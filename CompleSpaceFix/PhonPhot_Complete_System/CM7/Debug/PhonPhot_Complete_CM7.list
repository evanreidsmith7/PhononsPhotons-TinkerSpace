
PhonPhot_Complete_CM7.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0002b798  080002a0  080002a0  000012a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000491c  0802ba38  0802ba38  0002ca38  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 FontSearchFlashSection 00000028  08030354  08030354  00031354  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .ARM.extab    00000000  0803037c  0803037c  0009cae0  2**0
                  CONTENTS
  5 .ARM          00000008  0803037c  0803037c  0003137c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  6 .preinit_array 00000000  08030384  08030384  0009cae0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  7 .init_array   00000014  08030384  08030384  00031384  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .fini_array   00000008  08030398  08030398  00031398  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .data         0000012c  24000000  080303a0  00032000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 10 .bss          0000bb34  2400012c  080304cc  0003212c  2**2
                  ALLOC
 11 ._user_heap_stack 00002000  2400bc60  080304cc  00032c60  2**0
                  ALLOC
 12 .ARM.attributes 0000002e  00000000  00000000  0009cae0  2**0
                  CONTENTS, READONLY
 13 FontFlashSection 00000bd4  90000000  90000000  00034000  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
 14 TextFlashSection 0000021c  90000bd4  90000bd4  00034bd4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
 15 ExtFlashSection 00067cf0  90000df0  90000df0  00034df0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
 16 .ipc_data     00000050  30000000  30000000  00033000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 17 .debug_info   000b1e7b  00000000  00000000  0009cb0e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_abbrev 00014d12  00000000  00000000  0014e989  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_aranges 00004848  00000000  00000000  001636a0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_rnglists 00003507  00000000  00000000  00167ee8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_macro  00013193  00000000  00000000  0016b3ef  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line   00055ea5  00000000  00000000  0017e582  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 23 .debug_str    001b87d0  00000000  00000000  001d4427  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 24 .comment      000000c2  00000000  00000000  0038cbf7  2**0
                  CONTENTS, READONLY
 25 .debug_frame  000134d8  00000000  00000000  0038ccbc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 26 .debug_line_str 000000a5  00000000  00000000  003a0194  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080002a0 <__do_global_dtors_aux>:
 80002a0:	b510      	push	{r4, lr}
 80002a2:	4c05      	ldr	r4, [pc, #20]	@ (80002b8 <__do_global_dtors_aux+0x18>)
 80002a4:	7823      	ldrb	r3, [r4, #0]
 80002a6:	b933      	cbnz	r3, 80002b6 <__do_global_dtors_aux+0x16>
 80002a8:	4b04      	ldr	r3, [pc, #16]	@ (80002bc <__do_global_dtors_aux+0x1c>)
 80002aa:	b113      	cbz	r3, 80002b2 <__do_global_dtors_aux+0x12>
 80002ac:	4804      	ldr	r0, [pc, #16]	@ (80002c0 <__do_global_dtors_aux+0x20>)
 80002ae:	f3af 8000 	nop.w
 80002b2:	2301      	movs	r3, #1
 80002b4:	7023      	strb	r3, [r4, #0]
 80002b6:	bd10      	pop	{r4, pc}
 80002b8:	2400012c 	.word	0x2400012c
 80002bc:	00000000 	.word	0x00000000
 80002c0:	0802ba20 	.word	0x0802ba20

080002c4 <frame_dummy>:
 80002c4:	b508      	push	{r3, lr}
 80002c6:	4b03      	ldr	r3, [pc, #12]	@ (80002d4 <frame_dummy+0x10>)
 80002c8:	b11b      	cbz	r3, 80002d2 <frame_dummy+0xe>
 80002ca:	4903      	ldr	r1, [pc, #12]	@ (80002d8 <frame_dummy+0x14>)
 80002cc:	4803      	ldr	r0, [pc, #12]	@ (80002dc <frame_dummy+0x18>)
 80002ce:	f3af 8000 	nop.w
 80002d2:	bd08      	pop	{r3, pc}
 80002d4:	00000000 	.word	0x00000000
 80002d8:	24000130 	.word	0x24000130
 80002dc:	0802ba20 	.word	0x0802ba20

080002e0 <memchr>:
 80002e0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80002e4:	2a10      	cmp	r2, #16
 80002e6:	db2b      	blt.n	8000340 <memchr+0x60>
 80002e8:	f010 0f07 	tst.w	r0, #7
 80002ec:	d008      	beq.n	8000300 <memchr+0x20>
 80002ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80002f2:	3a01      	subs	r2, #1
 80002f4:	428b      	cmp	r3, r1
 80002f6:	d02d      	beq.n	8000354 <memchr+0x74>
 80002f8:	f010 0f07 	tst.w	r0, #7
 80002fc:	b342      	cbz	r2, 8000350 <memchr+0x70>
 80002fe:	d1f6      	bne.n	80002ee <memchr+0xe>
 8000300:	b4f0      	push	{r4, r5, r6, r7}
 8000302:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000306:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800030a:	f022 0407 	bic.w	r4, r2, #7
 800030e:	f07f 0700 	mvns.w	r7, #0
 8000312:	2300      	movs	r3, #0
 8000314:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000318:	3c08      	subs	r4, #8
 800031a:	ea85 0501 	eor.w	r5, r5, r1
 800031e:	ea86 0601 	eor.w	r6, r6, r1
 8000322:	fa85 f547 	uadd8	r5, r5, r7
 8000326:	faa3 f587 	sel	r5, r3, r7
 800032a:	fa86 f647 	uadd8	r6, r6, r7
 800032e:	faa5 f687 	sel	r6, r5, r7
 8000332:	b98e      	cbnz	r6, 8000358 <memchr+0x78>
 8000334:	d1ee      	bne.n	8000314 <memchr+0x34>
 8000336:	bcf0      	pop	{r4, r5, r6, r7}
 8000338:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800033c:	f002 0207 	and.w	r2, r2, #7
 8000340:	b132      	cbz	r2, 8000350 <memchr+0x70>
 8000342:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000346:	3a01      	subs	r2, #1
 8000348:	ea83 0301 	eor.w	r3, r3, r1
 800034c:	b113      	cbz	r3, 8000354 <memchr+0x74>
 800034e:	d1f8      	bne.n	8000342 <memchr+0x62>
 8000350:	2000      	movs	r0, #0
 8000352:	4770      	bx	lr
 8000354:	3801      	subs	r0, #1
 8000356:	4770      	bx	lr
 8000358:	2d00      	cmp	r5, #0
 800035a:	bf06      	itte	eq
 800035c:	4635      	moveq	r5, r6
 800035e:	3803      	subeq	r0, #3
 8000360:	3807      	subne	r0, #7
 8000362:	f015 0f01 	tst.w	r5, #1
 8000366:	d107      	bne.n	8000378 <memchr+0x98>
 8000368:	3001      	adds	r0, #1
 800036a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800036e:	bf02      	ittt	eq
 8000370:	3001      	addeq	r0, #1
 8000372:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000376:	3001      	addeq	r0, #1
 8000378:	bcf0      	pop	{r4, r5, r6, r7}
 800037a:	3801      	subs	r0, #1
 800037c:	4770      	bx	lr
 800037e:	bf00      	nop

08000380 <IPCSetVoiceVolumeNormalized>:
{
  return shared_memory.voice_volume_normalized;
}

void IPCSetVoiceVolumeNormalized( float new_vol )
{
 8000380:	b480      	push	{r7}
 8000382:	b083      	sub	sp, #12
 8000384:	af00      	add	r7, sp, #0
 8000386:	ed87 0a01 	vstr	s0, [r7, #4]
  shared_memory.voice_volume_normalized = new_vol;
 800038a:	4a04      	ldr	r2, [pc, #16]	@ (800039c <IPCSetVoiceVolumeNormalized+0x1c>)
 800038c:	687b      	ldr	r3, [r7, #4]
 800038e:	6013      	str	r3, [r2, #0]
}
 8000390:	bf00      	nop
 8000392:	370c      	adds	r7, #12
 8000394:	46bd      	mov	sp, r7
 8000396:	f85d 7b04 	ldr.w	r7, [sp], #4
 800039a:	4770      	bx	lr
 800039c:	30000000 	.word	0x30000000

080003a0 <IPCSetVoiceMuteState>:
{
  return shared_memory.voice_mute_active;
}

void IPCSetVoiceMuteState( boolean_t new_state )
{
 80003a0:	b480      	push	{r7}
 80003a2:	b083      	sub	sp, #12
 80003a4:	af00      	add	r7, sp, #0
 80003a6:	4603      	mov	r3, r0
 80003a8:	71fb      	strb	r3, [r7, #7]
  shared_memory.voice_mute_active = new_state;
 80003aa:	4a04      	ldr	r2, [pc, #16]	@ (80003bc <IPCSetVoiceMuteState+0x1c>)
 80003ac:	79fb      	ldrb	r3, [r7, #7]
 80003ae:	7113      	strb	r3, [r2, #4]
}
 80003b0:	bf00      	nop
 80003b2:	370c      	adds	r7, #12
 80003b4:	46bd      	mov	sp, r7
 80003b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80003ba:	4770      	bx	lr
 80003bc:	30000000 	.word	0x30000000

080003c0 <IPCGetAnomalyDetectState>:

boolean_t IPCGetAnomalyDetectState( void )
{
 80003c0:	b480      	push	{r7}
 80003c2:	af00      	add	r7, sp, #0
  return shared_memory.anomaly_detection_active;
 80003c4:	4b03      	ldr	r3, [pc, #12]	@ (80003d4 <IPCGetAnomalyDetectState+0x14>)
 80003c6:	795b      	ldrb	r3, [r3, #5]
 80003c8:	b2db      	uxtb	r3, r3
}
 80003ca:	4618      	mov	r0, r3
 80003cc:	46bd      	mov	sp, r7
 80003ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80003d2:	4770      	bx	lr
 80003d4:	30000000 	.word	0x30000000

080003d8 <IPCGetAlarmMuteState>:
{
  shared_memory.anomaly_magnitude_db = new_mag;
}

boolean_t IPCGetAlarmMuteState( void )
{
 80003d8:	b480      	push	{r7}
 80003da:	af00      	add	r7, sp, #0
  return shared_memory.alarm_mute;
 80003dc:	4b03      	ldr	r3, [pc, #12]	@ (80003ec <IPCGetAlarmMuteState+0x14>)
 80003de:	799b      	ldrb	r3, [r3, #6]
 80003e0:	b2db      	uxtb	r3, r3
}
 80003e2:	4618      	mov	r0, r3
 80003e4:	46bd      	mov	sp, r7
 80003e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80003ea:	4770      	bx	lr
 80003ec:	30000000 	.word	0x30000000

080003f0 <IPCSetAlarmMuteState>:

void IPCSetAlarmMuteState( boolean_t new_state )
{
 80003f0:	b480      	push	{r7}
 80003f2:	b083      	sub	sp, #12
 80003f4:	af00      	add	r7, sp, #0
 80003f6:	4603      	mov	r3, r0
 80003f8:	71fb      	strb	r3, [r7, #7]
  shared_memory.alarm_mute = new_state;
 80003fa:	4a04      	ldr	r2, [pc, #16]	@ (800040c <IPCSetAlarmMuteState+0x1c>)
 80003fc:	79fb      	ldrb	r3, [r7, #7]
 80003fe:	7193      	strb	r3, [r2, #6]
}
 8000400:	bf00      	nop
 8000402:	370c      	adds	r7, #12
 8000404:	46bd      	mov	sp, r7
 8000406:	f85d 7b04 	ldr.w	r7, [sp], #4
 800040a:	4770      	bx	lr
 800040c:	30000000 	.word	0x30000000

08000410 <ITM_SendChar>:
           \li Is blocking when a debugger is connected, but the previous character sent has not been transmitted.
  \param [in]     ch  Character to transmit.
  \returns            Character to transmit.
 */
__STATIC_INLINE uint32_t ITM_SendChar (uint32_t ch)
{
 8000410:	b480      	push	{r7}
 8000412:	b083      	sub	sp, #12
 8000414:	af00      	add	r7, sp, #0
 8000416:	6078      	str	r0, [r7, #4]
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 8000418:	f04f 4360 	mov.w	r3, #3758096384	@ 0xe0000000
 800041c:	f8d3 3e80 	ldr.w	r3, [r3, #3712]	@ 0xe80
 8000420:	f003 0301 	and.w	r3, r3, #1
 8000424:	2b00      	cmp	r3, #0
 8000426:	d013      	beq.n	8000450 <ITM_SendChar+0x40>
      ((ITM->TER & 1UL               ) != 0UL)   )     /* ITM Port #0 enabled */
 8000428:	f04f 4360 	mov.w	r3, #3758096384	@ 0xe0000000
 800042c:	f8d3 3e00 	ldr.w	r3, [r3, #3584]	@ 0xe00
 8000430:	f003 0301 	and.w	r3, r3, #1
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 8000434:	2b00      	cmp	r3, #0
 8000436:	d00b      	beq.n	8000450 <ITM_SendChar+0x40>
  {
    while (ITM->PORT[0U].u32 == 0UL)
 8000438:	e000      	b.n	800043c <ITM_SendChar+0x2c>
    {
      __NOP();
 800043a:	bf00      	nop
    while (ITM->PORT[0U].u32 == 0UL)
 800043c:	f04f 4360 	mov.w	r3, #3758096384	@ 0xe0000000
 8000440:	681b      	ldr	r3, [r3, #0]
 8000442:	2b00      	cmp	r3, #0
 8000444:	d0f9      	beq.n	800043a <ITM_SendChar+0x2a>
    }
    ITM->PORT[0U].u8 = (uint8_t)ch;
 8000446:	f04f 4360 	mov.w	r3, #3758096384	@ 0xe0000000
 800044a:	687a      	ldr	r2, [r7, #4]
 800044c:	b2d2      	uxtb	r2, r2
 800044e:	701a      	strb	r2, [r3, #0]
  }
  return (ch);
 8000450:	687b      	ldr	r3, [r7, #4]
}
 8000452:	4618      	mov	r0, r3
 8000454:	370c      	adds	r7, #12
 8000456:	46bd      	mov	sp, r7
 8000458:	f85d 7b04 	ldr.w	r7, [sp], #4
 800045c:	4770      	bx	lr

0800045e <_write>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int _write(int file, char *ptr, int len)
{
 800045e:	b580      	push	{r7, lr}
 8000460:	b086      	sub	sp, #24
 8000462:	af00      	add	r7, sp, #0
 8000464:	60f8      	str	r0, [r7, #12]
 8000466:	60b9      	str	r1, [r7, #8]
 8000468:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800046a:	2300      	movs	r3, #0
 800046c:	617b      	str	r3, [r7, #20]
 800046e:	e009      	b.n	8000484 <_write+0x26>
	{
		ITM_SendChar(*ptr++);
 8000470:	68bb      	ldr	r3, [r7, #8]
 8000472:	1c5a      	adds	r2, r3, #1
 8000474:	60ba      	str	r2, [r7, #8]
 8000476:	781b      	ldrb	r3, [r3, #0]
 8000478:	4618      	mov	r0, r3
 800047a:	f7ff ffc9 	bl	8000410 <ITM_SendChar>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800047e:	697b      	ldr	r3, [r7, #20]
 8000480:	3301      	adds	r3, #1
 8000482:	617b      	str	r3, [r7, #20]
 8000484:	697a      	ldr	r2, [r7, #20]
 8000486:	687b      	ldr	r3, [r7, #4]
 8000488:	429a      	cmp	r2, r3
 800048a:	dbf1      	blt.n	8000470 <_write+0x12>
	}
	return len;
 800048c:	687b      	ldr	r3, [r7, #4]
}
 800048e:	4618      	mov	r0, r3
 8000490:	3718      	adds	r7, #24
 8000492:	46bd      	mov	sp, r7
 8000494:	bd80      	pop	{r7, pc}
	...

08000498 <main>:


int main(void)
{
 8000498:	b580      	push	{r7, lr}
 800049a:	b084      	sub	sp, #16
 800049c:	af00      	add	r7, sp, #0
/* USER CODE BEGIN Boot_Mode_Sequence_0 */
  int32_t timeout;
/* USER CODE END Boot_Mode_Sequence_0 */

  /* MPU Configuration--------------------------------------------------------*/
  MPU_Config();
 800049e:	f000 fbab 	bl	8000bf8 <MPU_Config>
  /* Enable D-Cache---------------------------------------------------------*/
  //SCB_EnableDCache();

/* USER CODE BEGIN Boot_Mode_Sequence_1 */
  /* Wait until CPU2 boots and enters in stop mode or timeout*/
  timeout = 0xFFFF;
 80004a2:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 80004a6:	60fb      	str	r3, [r7, #12]
  while((__HAL_RCC_GET_FLAG(RCC_FLAG_D2CKRDY) != RESET) && (timeout-- > 0));
 80004a8:	bf00      	nop
 80004aa:	4b39      	ldr	r3, [pc, #228]	@ (8000590 <main+0xf8>)
 80004ac:	681b      	ldr	r3, [r3, #0]
 80004ae:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80004b2:	2b00      	cmp	r3, #0
 80004b4:	d004      	beq.n	80004c0 <main+0x28>
 80004b6:	68fb      	ldr	r3, [r7, #12]
 80004b8:	1e5a      	subs	r2, r3, #1
 80004ba:	60fa      	str	r2, [r7, #12]
 80004bc:	2b00      	cmp	r3, #0
 80004be:	dcf4      	bgt.n	80004aa <main+0x12>
  if ( timeout < 0 )
 80004c0:	68fb      	ldr	r3, [r7, #12]
 80004c2:	2b00      	cmp	r3, #0
 80004c4:	da01      	bge.n	80004ca <main+0x32>
  {
    Error_Handler();
 80004c6:	f000 fbe1 	bl	8000c8c <Error_Handler>
  }
/* USER CODE END Boot_Mode_Sequence_1 */
  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80004ca:	f010 fbc9 	bl	8010c60 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80004ce:	f000 f86d 	bl	80005ac <SystemClock_Config>

  /* Configure the peripherals common clocks */
  PeriphCommonClock_Config();
 80004d2:	f000 f8f5 	bl	80006c0 <PeriphCommonClock_Config>

  /* USER CODE BEGIN Boot_Mode_Sequence_2 */
  /* When system initialization is finished, Cortex-M7 will release Cortex-M4 by means of
  HSEM notification */
  /*HW semaphore Clock enable*/
  __HAL_RCC_HSEM_CLK_ENABLE();
 80004d6:	4b2e      	ldr	r3, [pc, #184]	@ (8000590 <main+0xf8>)
 80004d8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80004dc:	4a2c      	ldr	r2, [pc, #176]	@ (8000590 <main+0xf8>)
 80004de:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 80004e2:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80004e6:	4b2a      	ldr	r3, [pc, #168]	@ (8000590 <main+0xf8>)
 80004e8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80004ec:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80004f0:	60bb      	str	r3, [r7, #8]
 80004f2:	68bb      	ldr	r3, [r7, #8]
  /*Take HSEM */
  HAL_HSEM_FastTake(HSEM_ID_0);
 80004f4:	2000      	movs	r0, #0
 80004f6:	f011 fafb 	bl	8011af0 <HAL_HSEM_FastTake>
  /*Release HSEM in order to notify the CPU2(CM4)*/
  HAL_HSEM_Release(HSEM_ID_0,0);
 80004fa:	2100      	movs	r1, #0
 80004fc:	2000      	movs	r0, #0
 80004fe:	f011 fb11 	bl	8011b24 <HAL_HSEM_Release>
  /* wait until CPU2 wakes up from stop mode */
  timeout = 0xFFFF;
 8000502:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8000506:	60fb      	str	r3, [r7, #12]
  while((__HAL_RCC_GET_FLAG(RCC_FLAG_D2CKRDY) == RESET) && (timeout-- > 0));
 8000508:	bf00      	nop
 800050a:	4b21      	ldr	r3, [pc, #132]	@ (8000590 <main+0xf8>)
 800050c:	681b      	ldr	r3, [r3, #0]
 800050e:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8000512:	2b00      	cmp	r3, #0
 8000514:	d104      	bne.n	8000520 <main+0x88>
 8000516:	68fb      	ldr	r3, [r7, #12]
 8000518:	1e5a      	subs	r2, r3, #1
 800051a:	60fa      	str	r2, [r7, #12]
 800051c:	2b00      	cmp	r3, #0
 800051e:	dcf4      	bgt.n	800050a <main+0x72>
  if ( timeout < 0 )
 8000520:	68fb      	ldr	r3, [r7, #12]
 8000522:	2b00      	cmp	r3, #0
 8000524:	da01      	bge.n	800052a <main+0x92>
  {
    Error_Handler();
 8000526:	f000 fbb1 	bl	8000c8c <Error_Handler>
  }
  /* USER CODE END Boot_Mode_Sequence_2 */

  /* USER CODE BEGIN SysInit */

  __HAL_RCC_DMA1_CLK_ENABLE();
 800052a:	4b19      	ldr	r3, [pc, #100]	@ (8000590 <main+0xf8>)
 800052c:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8000530:	4a17      	ldr	r2, [pc, #92]	@ (8000590 <main+0xf8>)
 8000532:	f043 0301 	orr.w	r3, r3, #1
 8000536:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 800053a:	4b15      	ldr	r3, [pc, #84]	@ (8000590 <main+0xf8>)
 800053c:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8000540:	f003 0301 	and.w	r3, r3, #1
 8000544:	607b      	str	r3, [r7, #4]
 8000546:	687b      	ldr	r3, [r7, #4]
  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000548:	f000 fa32 	bl	80009b0 <MX_GPIO_Init>
  MX_QUADSPI_Init();
 800054c:	f000 f9ac 	bl	80008a8 <MX_QUADSPI_Init>
  MX_FMC_Init();
 8000550:	f000 f9d8 	bl	8000904 <MX_FMC_Init>
  MX_LTDC_Init();
 8000554:	f000 f924 	bl	80007a0 <MX_LTDC_Init>
  MX_CRC_Init();
 8000558:	f000 f8e2 	bl	8000720 <MX_CRC_Init>
  MX_DMA2D_Init();
 800055c:	f000 f902 	bl	8000764 <MX_DMA2D_Init>
  //MX_TIM4_Init();
  MX_TouchGFX_Init();
 8000560:	f001 f945 	bl	80017ee <MX_TouchGFX_Init>
  // start/enable timer
  //TIM4->CR1 |= TIM_CR1_CEN;
  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 8000564:	f00a fb18 	bl	800ab98 <osKernelInitialize>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of defaultTask */
  defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);
 8000568:	4a0a      	ldr	r2, [pc, #40]	@ (8000594 <main+0xfc>)
 800056a:	2100      	movs	r1, #0
 800056c:	480a      	ldr	r0, [pc, #40]	@ (8000598 <main+0x100>)
 800056e:	f00a fb5d 	bl	800ac2c <osThreadNew>
 8000572:	4603      	mov	r3, r0
 8000574:	4a09      	ldr	r2, [pc, #36]	@ (800059c <main+0x104>)
 8000576:	6013      	str	r3, [r2, #0]

  /* creation of TouchGFXTask */
  TouchGFXTaskHandle = osThreadNew(TouchGFX_Task, NULL, &TouchGFXTask_attributes);
 8000578:	4a09      	ldr	r2, [pc, #36]	@ (80005a0 <main+0x108>)
 800057a:	2100      	movs	r1, #0
 800057c:	4809      	ldr	r0, [pc, #36]	@ (80005a4 <main+0x10c>)
 800057e:	f00a fb55 	bl	800ac2c <osThreadNew>
 8000582:	4603      	mov	r3, r0
 8000584:	4a08      	ldr	r2, [pc, #32]	@ (80005a8 <main+0x110>)
 8000586:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 8000588:	f00a fb2a 	bl	800abe0 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 800058c:	bf00      	nop
 800058e:	e7fd      	b.n	800058c <main+0xf4>
 8000590:	58024400 	.word	0x58024400
 8000594:	0802c740 	.word	0x0802c740
 8000598:	08000be9 	.word	0x08000be9
 800059c:	240002fc 	.word	0x240002fc
 80005a0:	0802c764 	.word	0x0802c764
 80005a4:	080017fb 	.word	0x080017fb
 80005a8:	24000300 	.word	0x24000300

080005ac <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80005ac:	b580      	push	{r7, lr}
 80005ae:	b09c      	sub	sp, #112	@ 0x70
 80005b0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80005b2:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80005b6:	224c      	movs	r2, #76	@ 0x4c
 80005b8:	2100      	movs	r1, #0
 80005ba:	4618      	mov	r0, r3
 80005bc:	f02a fbc1 	bl	802ad42 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80005c0:	1d3b      	adds	r3, r7, #4
 80005c2:	2220      	movs	r2, #32
 80005c4:	2100      	movs	r1, #0
 80005c6:	4618      	mov	r0, r3
 80005c8:	f02a fbbb 	bl	802ad42 <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_DIRECT_SMPS_SUPPLY);
 80005cc:	2004      	movs	r0, #4
 80005ce:	f012 fe25 	bl	801321c <HAL_PWREx_ConfigSupply>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80005d2:	2300      	movs	r3, #0
 80005d4:	603b      	str	r3, [r7, #0]
 80005d6:	4b37      	ldr	r3, [pc, #220]	@ (80006b4 <SystemClock_Config+0x108>)
 80005d8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80005da:	4a36      	ldr	r2, [pc, #216]	@ (80006b4 <SystemClock_Config+0x108>)
 80005dc:	f023 0301 	bic.w	r3, r3, #1
 80005e0:	62d3      	str	r3, [r2, #44]	@ 0x2c
 80005e2:	4b34      	ldr	r3, [pc, #208]	@ (80006b4 <SystemClock_Config+0x108>)
 80005e4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80005e6:	f003 0301 	and.w	r3, r3, #1
 80005ea:	603b      	str	r3, [r7, #0]
 80005ec:	4b32      	ldr	r3, [pc, #200]	@ (80006b8 <SystemClock_Config+0x10c>)
 80005ee:	699b      	ldr	r3, [r3, #24]
 80005f0:	4a31      	ldr	r2, [pc, #196]	@ (80006b8 <SystemClock_Config+0x10c>)
 80005f2:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 80005f6:	6193      	str	r3, [r2, #24]
 80005f8:	4b2f      	ldr	r3, [pc, #188]	@ (80006b8 <SystemClock_Config+0x10c>)
 80005fa:	699b      	ldr	r3, [r3, #24]
 80005fc:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8000600:	603b      	str	r3, [r7, #0]
 8000602:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 8000604:	bf00      	nop
 8000606:	4b2c      	ldr	r3, [pc, #176]	@ (80006b8 <SystemClock_Config+0x10c>)
 8000608:	699b      	ldr	r3, [r3, #24]
 800060a:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800060e:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8000612:	d1f8      	bne.n	8000606 <SystemClock_Config+0x5a>

  /** Macro to configure the PLL clock source
  */
  __HAL_RCC_PLL_PLLSOURCE_CONFIG(RCC_PLLSOURCE_HSE);
 8000614:	4b29      	ldr	r3, [pc, #164]	@ (80006bc <SystemClock_Config+0x110>)
 8000616:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8000618:	f023 0303 	bic.w	r3, r3, #3
 800061c:	4a27      	ldr	r2, [pc, #156]	@ (80006bc <SystemClock_Config+0x110>)
 800061e:	f043 0302 	orr.w	r3, r3, #2
 8000622:	6293      	str	r3, [r2, #40]	@ 0x28

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000624:	2301      	movs	r3, #1
 8000626:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000628:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 800062c:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800062e:	2302      	movs	r3, #2
 8000630:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000632:	2302      	movs	r3, #2
 8000634:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RCC_OscInitStruct.PLL.PLLM = 5;
 8000636:	2305      	movs	r3, #5
 8000638:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLN = 144;
 800063a:	2390      	movs	r3, #144	@ 0x90
 800063c:	657b      	str	r3, [r7, #84]	@ 0x54
  RCC_OscInitStruct.PLL.PLLP = 2;
 800063e:	2302      	movs	r3, #2
 8000640:	65bb      	str	r3, [r7, #88]	@ 0x58
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8000642:	2304      	movs	r3, #4
 8000644:	65fb      	str	r3, [r7, #92]	@ 0x5c
  RCC_OscInitStruct.PLL.PLLR = 4;
 8000646:	2304      	movs	r3, #4
 8000648:	663b      	str	r3, [r7, #96]	@ 0x60
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_2;
 800064a:	2308      	movs	r3, #8
 800064c:	667b      	str	r3, [r7, #100]	@ 0x64
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 800064e:	2300      	movs	r3, #0
 8000650:	66bb      	str	r3, [r7, #104]	@ 0x68
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 8000652:	2300      	movs	r3, #0
 8000654:	66fb      	str	r3, [r7, #108]	@ 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000656:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800065a:	4618      	mov	r0, r3
 800065c:	f013 fd1a 	bl	8014094 <HAL_RCC_OscConfig>
 8000660:	4603      	mov	r3, r0
 8000662:	2b00      	cmp	r3, #0
 8000664:	d001      	beq.n	800066a <SystemClock_Config+0xbe>
  {
    Error_Handler();
 8000666:	f000 fb11 	bl	8000c8c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800066a:	233f      	movs	r3, #63	@ 0x3f
 800066c:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800066e:	2303      	movs	r3, #3
 8000670:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 8000672:	2300      	movs	r3, #0
 8000674:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV2;
 8000676:	2308      	movs	r3, #8
 8000678:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV2;
 800067a:	2340      	movs	r3, #64	@ 0x40
 800067c:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 800067e:	2340      	movs	r3, #64	@ 0x40
 8000680:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 8000682:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8000686:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV2;
 8000688:	2340      	movs	r3, #64	@ 0x40
 800068a:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 800068c:	1d3b      	adds	r3, r7, #4
 800068e:	2102      	movs	r1, #2
 8000690:	4618      	mov	r0, r3
 8000692:	f014 f959 	bl	8014948 <HAL_RCC_ClockConfig>
 8000696:	4603      	mov	r3, r0
 8000698:	2b00      	cmp	r3, #0
 800069a:	d001      	beq.n	80006a0 <SystemClock_Config+0xf4>
  {
    Error_Handler();
 800069c:	f000 faf6 	bl	8000c8c <Error_Handler>
  }
  HAL_RCC_MCOConfig(RCC_MCO1, RCC_MCO1SOURCE_HSI, RCC_MCODIV_1);
 80006a0:	f44f 2280 	mov.w	r2, #262144	@ 0x40000
 80006a4:	2100      	movs	r1, #0
 80006a6:	2000      	movs	r0, #0
 80006a8:	f014 fb04 	bl	8014cb4 <HAL_RCC_MCOConfig>
}
 80006ac:	bf00      	nop
 80006ae:	3770      	adds	r7, #112	@ 0x70
 80006b0:	46bd      	mov	sp, r7
 80006b2:	bd80      	pop	{r7, pc}
 80006b4:	58000400 	.word	0x58000400
 80006b8:	58024800 	.word	0x58024800
 80006bc:	58024400 	.word	0x58024400

080006c0 <PeriphCommonClock_Config>:
/**
  * @brief Peripherals Common Clock Configuration
  * @retval None
  */
void PeriphCommonClock_Config(void)
{
 80006c0:	b580      	push	{r7, lr}
 80006c2:	b0b0      	sub	sp, #192	@ 0xc0
 80006c4:	af00      	add	r7, sp, #0
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80006c6:	463b      	mov	r3, r7
 80006c8:	22c0      	movs	r2, #192	@ 0xc0
 80006ca:	2100      	movs	r1, #0
 80006cc:	4618      	mov	r0, r3
 80006ce:	f02a fb38 	bl	802ad42 <memset>

  /** Initializes the peripherals clock
  */
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 80006d2:	f44f 2200 	mov.w	r2, #524288	@ 0x80000
 80006d6:	f04f 0300 	mov.w	r3, #0
 80006da:	e9c7 2300 	strd	r2, r3, [r7]
  PeriphClkInitStruct.PLL2.PLL2M = 5;
 80006de:	2305      	movs	r3, #5
 80006e0:	60bb      	str	r3, [r7, #8]
  PeriphClkInitStruct.PLL2.PLL2N = 100;
 80006e2:	2364      	movs	r3, #100	@ 0x64
 80006e4:	60fb      	str	r3, [r7, #12]
  PeriphClkInitStruct.PLL2.PLL2P = 10;
 80006e6:	230a      	movs	r3, #10
 80006e8:	613b      	str	r3, [r7, #16]
  PeriphClkInitStruct.PLL2.PLL2Q = 10;
 80006ea:	230a      	movs	r3, #10
 80006ec:	617b      	str	r3, [r7, #20]
  PeriphClkInitStruct.PLL2.PLL2R = 2;
 80006ee:	2302      	movs	r3, #2
 80006f0:	61bb      	str	r3, [r7, #24]
  PeriphClkInitStruct.PLL2.PLL2RGE = RCC_PLL2VCIRANGE_2;
 80006f2:	2380      	movs	r3, #128	@ 0x80
 80006f4:	61fb      	str	r3, [r7, #28]
  PeriphClkInitStruct.PLL2.PLL2VCOSEL = RCC_PLL2VCOWIDE;
 80006f6:	2300      	movs	r3, #0
 80006f8:	623b      	str	r3, [r7, #32]
  PeriphClkInitStruct.PLL2.PLL2FRACN = 0;
 80006fa:	2300      	movs	r3, #0
 80006fc:	627b      	str	r3, [r7, #36]	@ 0x24
  PeriphClkInitStruct.AdcClockSelection = RCC_ADCCLKSOURCE_PLL2;
 80006fe:	2300      	movs	r3, #0
 8000700:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000704:	463b      	mov	r3, r7
 8000706:	4618      	mov	r0, r3
 8000708:	f014 fd56 	bl	80151b8 <HAL_RCCEx_PeriphCLKConfig>
 800070c:	4603      	mov	r3, r0
 800070e:	2b00      	cmp	r3, #0
 8000710:	d001      	beq.n	8000716 <PeriphCommonClock_Config+0x56>
  {
    Error_Handler();
 8000712:	f000 fabb 	bl	8000c8c <Error_Handler>
  }
}
 8000716:	bf00      	nop
 8000718:	37c0      	adds	r7, #192	@ 0xc0
 800071a:	46bd      	mov	sp, r7
 800071c:	bd80      	pop	{r7, pc}
	...

08000720 <MX_CRC_Init>:
  * @brief CRC Initialization Function
  * @param None
  * @retval None
  */
static void MX_CRC_Init(void)
{
 8000720:	b580      	push	{r7, lr}
 8000722:	af00      	add	r7, sp, #0
  /* USER CODE END CRC_Init 0 */

  /* USER CODE BEGIN CRC_Init 1 */

  /* USER CODE END CRC_Init 1 */
  hcrc.Instance = CRC;
 8000724:	4b0d      	ldr	r3, [pc, #52]	@ (800075c <MX_CRC_Init+0x3c>)
 8000726:	4a0e      	ldr	r2, [pc, #56]	@ (8000760 <MX_CRC_Init+0x40>)
 8000728:	601a      	str	r2, [r3, #0]
  hcrc.Init.DefaultPolynomialUse = DEFAULT_POLYNOMIAL_ENABLE;
 800072a:	4b0c      	ldr	r3, [pc, #48]	@ (800075c <MX_CRC_Init+0x3c>)
 800072c:	2200      	movs	r2, #0
 800072e:	711a      	strb	r2, [r3, #4]
  hcrc.Init.DefaultInitValueUse = DEFAULT_INIT_VALUE_ENABLE;
 8000730:	4b0a      	ldr	r3, [pc, #40]	@ (800075c <MX_CRC_Init+0x3c>)
 8000732:	2200      	movs	r2, #0
 8000734:	715a      	strb	r2, [r3, #5]
  hcrc.Init.InputDataInversionMode = CRC_INPUTDATA_INVERSION_NONE;
 8000736:	4b09      	ldr	r3, [pc, #36]	@ (800075c <MX_CRC_Init+0x3c>)
 8000738:	2200      	movs	r2, #0
 800073a:	615a      	str	r2, [r3, #20]
  hcrc.Init.OutputDataInversionMode = CRC_OUTPUTDATA_INVERSION_DISABLE;
 800073c:	4b07      	ldr	r3, [pc, #28]	@ (800075c <MX_CRC_Init+0x3c>)
 800073e:	2200      	movs	r2, #0
 8000740:	619a      	str	r2, [r3, #24]
  hcrc.InputDataFormat = CRC_INPUTDATA_FORMAT_BYTES;
 8000742:	4b06      	ldr	r3, [pc, #24]	@ (800075c <MX_CRC_Init+0x3c>)
 8000744:	2201      	movs	r2, #1
 8000746:	621a      	str	r2, [r3, #32]
  if (HAL_CRC_Init(&hcrc) != HAL_OK)
 8000748:	4804      	ldr	r0, [pc, #16]	@ (800075c <MX_CRC_Init+0x3c>)
 800074a:	f010 fc7f 	bl	801104c <HAL_CRC_Init>
 800074e:	4603      	mov	r3, r0
 8000750:	2b00      	cmp	r3, #0
 8000752:	d001      	beq.n	8000758 <MX_CRC_Init+0x38>
  {
    Error_Handler();
 8000754:	f000 fa9a 	bl	8000c8c <Error_Handler>
  }
  /* USER CODE BEGIN CRC_Init 2 */

  /* USER CODE END CRC_Init 2 */

}
 8000758:	bf00      	nop
 800075a:	bd80      	pop	{r7, pc}
 800075c:	24000148 	.word	0x24000148
 8000760:	58024c00 	.word	0x58024c00

08000764 <MX_DMA2D_Init>:
  * @brief DMA2D Initialization Function
  * @param None
  * @retval None
  */
static void MX_DMA2D_Init(void)
{
 8000764:	b580      	push	{r7, lr}
 8000766:	af00      	add	r7, sp, #0
  /* USER CODE END DMA2D_Init 0 */

  /* USER CODE BEGIN DMA2D_Init 1 */

  /* USER CODE END DMA2D_Init 1 */
  hdma2d.Instance = DMA2D;
 8000768:	4b0b      	ldr	r3, [pc, #44]	@ (8000798 <MX_DMA2D_Init+0x34>)
 800076a:	4a0c      	ldr	r2, [pc, #48]	@ (800079c <MX_DMA2D_Init+0x38>)
 800076c:	601a      	str	r2, [r3, #0]
  hdma2d.Init.Mode = DMA2D_R2M;
 800076e:	4b0a      	ldr	r3, [pc, #40]	@ (8000798 <MX_DMA2D_Init+0x34>)
 8000770:	f44f 3240 	mov.w	r2, #196608	@ 0x30000
 8000774:	605a      	str	r2, [r3, #4]
  hdma2d.Init.ColorMode = DMA2D_OUTPUT_RGB565;
 8000776:	4b08      	ldr	r3, [pc, #32]	@ (8000798 <MX_DMA2D_Init+0x34>)
 8000778:	2202      	movs	r2, #2
 800077a:	609a      	str	r2, [r3, #8]
  hdma2d.Init.OutputOffset = 0;
 800077c:	4b06      	ldr	r3, [pc, #24]	@ (8000798 <MX_DMA2D_Init+0x34>)
 800077e:	2200      	movs	r2, #0
 8000780:	60da      	str	r2, [r3, #12]
  if (HAL_DMA2D_Init(&hdma2d) != HAL_OK)
 8000782:	4805      	ldr	r0, [pc, #20]	@ (8000798 <MX_DMA2D_Init+0x34>)
 8000784:	f010 fd54 	bl	8011230 <HAL_DMA2D_Init>
 8000788:	4603      	mov	r3, r0
 800078a:	2b00      	cmp	r3, #0
 800078c:	d001      	beq.n	8000792 <MX_DMA2D_Init+0x2e>
  {
    Error_Handler();
 800078e:	f000 fa7d 	bl	8000c8c <Error_Handler>
  }
  /* USER CODE BEGIN DMA2D_Init 2 */

  /* USER CODE END DMA2D_Init 2 */

}
 8000792:	bf00      	nop
 8000794:	bd80      	pop	{r7, pc}
 8000796:	bf00      	nop
 8000798:	2400016c 	.word	0x2400016c
 800079c:	52001000 	.word	0x52001000

080007a0 <MX_LTDC_Init>:
  * @brief LTDC Initialization Function
  * @param None
  * @retval None
  */
static void MX_LTDC_Init(void)
{
 80007a0:	b580      	push	{r7, lr}
 80007a2:	b08e      	sub	sp, #56	@ 0x38
 80007a4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN LTDC_Init 0 */
  initLtdcClocks();
 80007a6:	f000 fa77 	bl	8000c98 <initLtdcClocks>
  /* USER CODE END LTDC_Init 0 */

  LTDC_LayerCfgTypeDef pLayerCfg = {0};
 80007aa:	1d3b      	adds	r3, r7, #4
 80007ac:	2234      	movs	r2, #52	@ 0x34
 80007ae:	2100      	movs	r1, #0
 80007b0:	4618      	mov	r0, r3
 80007b2:	f02a fac6 	bl	802ad42 <memset>

  /* USER CODE BEGIN LTDC_Init 1 */

  /* USER CODE END LTDC_Init 1 */
  hltdc.Instance = LTDC;
 80007b6:	4b3a      	ldr	r3, [pc, #232]	@ (80008a0 <MX_LTDC_Init+0x100>)
 80007b8:	4a3a      	ldr	r2, [pc, #232]	@ (80008a4 <MX_LTDC_Init+0x104>)
 80007ba:	601a      	str	r2, [r3, #0]
  hltdc.Init.HSPolarity = LTDC_HSPOLARITY_AL;
 80007bc:	4b38      	ldr	r3, [pc, #224]	@ (80008a0 <MX_LTDC_Init+0x100>)
 80007be:	2200      	movs	r2, #0
 80007c0:	605a      	str	r2, [r3, #4]
  hltdc.Init.VSPolarity = LTDC_VSPOLARITY_AL;
 80007c2:	4b37      	ldr	r3, [pc, #220]	@ (80008a0 <MX_LTDC_Init+0x100>)
 80007c4:	2200      	movs	r2, #0
 80007c6:	609a      	str	r2, [r3, #8]
  hltdc.Init.DEPolarity = LTDC_DEPOLARITY_AL;
 80007c8:	4b35      	ldr	r3, [pc, #212]	@ (80008a0 <MX_LTDC_Init+0x100>)
 80007ca:	2200      	movs	r2, #0
 80007cc:	60da      	str	r2, [r3, #12]
  hltdc.Init.PCPolarity = LTDC_PCPOLARITY_IPC;
 80007ce:	4b34      	ldr	r3, [pc, #208]	@ (80008a0 <MX_LTDC_Init+0x100>)
 80007d0:	2200      	movs	r2, #0
 80007d2:	611a      	str	r2, [r3, #16]
  hltdc.Init.HorizontalSync = 40;
 80007d4:	4b32      	ldr	r3, [pc, #200]	@ (80008a0 <MX_LTDC_Init+0x100>)
 80007d6:	2228      	movs	r2, #40	@ 0x28
 80007d8:	615a      	str	r2, [r3, #20]
  hltdc.Init.VerticalSync = 9;
 80007da:	4b31      	ldr	r3, [pc, #196]	@ (80008a0 <MX_LTDC_Init+0x100>)
 80007dc:	2209      	movs	r2, #9
 80007de:	619a      	str	r2, [r3, #24]
  hltdc.Init.AccumulatedHBP = 53;
 80007e0:	4b2f      	ldr	r3, [pc, #188]	@ (80008a0 <MX_LTDC_Init+0x100>)
 80007e2:	2235      	movs	r2, #53	@ 0x35
 80007e4:	61da      	str	r2, [r3, #28]
  hltdc.Init.AccumulatedVBP = 11;
 80007e6:	4b2e      	ldr	r3, [pc, #184]	@ (80008a0 <MX_LTDC_Init+0x100>)
 80007e8:	220b      	movs	r2, #11
 80007ea:	621a      	str	r2, [r3, #32]
  hltdc.Init.AccumulatedActiveW = 533;
 80007ec:	4b2c      	ldr	r3, [pc, #176]	@ (80008a0 <MX_LTDC_Init+0x100>)
 80007ee:	f240 2215 	movw	r2, #533	@ 0x215
 80007f2:	625a      	str	r2, [r3, #36]	@ 0x24
  hltdc.Init.AccumulatedActiveH = 283;
 80007f4:	4b2a      	ldr	r3, [pc, #168]	@ (80008a0 <MX_LTDC_Init+0x100>)
 80007f6:	f240 121b 	movw	r2, #283	@ 0x11b
 80007fa:	629a      	str	r2, [r3, #40]	@ 0x28
  hltdc.Init.TotalWidth = 565;
 80007fc:	4b28      	ldr	r3, [pc, #160]	@ (80008a0 <MX_LTDC_Init+0x100>)
 80007fe:	f240 2235 	movw	r2, #565	@ 0x235
 8000802:	62da      	str	r2, [r3, #44]	@ 0x2c
  hltdc.Init.TotalHeigh = 285;
 8000804:	4b26      	ldr	r3, [pc, #152]	@ (80008a0 <MX_LTDC_Init+0x100>)
 8000806:	f240 121d 	movw	r2, #285	@ 0x11d
 800080a:	631a      	str	r2, [r3, #48]	@ 0x30
  hltdc.Init.Backcolor.Blue = 0;
 800080c:	4b24      	ldr	r3, [pc, #144]	@ (80008a0 <MX_LTDC_Init+0x100>)
 800080e:	2200      	movs	r2, #0
 8000810:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  hltdc.Init.Backcolor.Green = 0;
 8000814:	4b22      	ldr	r3, [pc, #136]	@ (80008a0 <MX_LTDC_Init+0x100>)
 8000816:	2200      	movs	r2, #0
 8000818:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
  hltdc.Init.Backcolor.Red = 0;
 800081c:	4b20      	ldr	r3, [pc, #128]	@ (80008a0 <MX_LTDC_Init+0x100>)
 800081e:	2200      	movs	r2, #0
 8000820:	f883 2036 	strb.w	r2, [r3, #54]	@ 0x36
  if (HAL_LTDC_Init(&hltdc) != HAL_OK)
 8000824:	481e      	ldr	r0, [pc, #120]	@ (80008a0 <MX_LTDC_Init+0x100>)
 8000826:	f011 fffd 	bl	8012824 <HAL_LTDC_Init>
 800082a:	4603      	mov	r3, r0
 800082c:	2b00      	cmp	r3, #0
 800082e:	d001      	beq.n	8000834 <MX_LTDC_Init+0x94>
  {
    Error_Handler();
 8000830:	f000 fa2c 	bl	8000c8c <Error_Handler>
  }
  pLayerCfg.WindowX0 = 0;
 8000834:	2300      	movs	r3, #0
 8000836:	607b      	str	r3, [r7, #4]
  pLayerCfg.WindowX1 = 480;
 8000838:	f44f 73f0 	mov.w	r3, #480	@ 0x1e0
 800083c:	60bb      	str	r3, [r7, #8]
  pLayerCfg.WindowY0 = 0;
 800083e:	2300      	movs	r3, #0
 8000840:	60fb      	str	r3, [r7, #12]
  pLayerCfg.WindowY1 = 272;
 8000842:	f44f 7388 	mov.w	r3, #272	@ 0x110
 8000846:	613b      	str	r3, [r7, #16]
  pLayerCfg.PixelFormat = LTDC_PIXEL_FORMAT_RGB565;
 8000848:	2302      	movs	r3, #2
 800084a:	617b      	str	r3, [r7, #20]
  pLayerCfg.Alpha = 255;
 800084c:	23ff      	movs	r3, #255	@ 0xff
 800084e:	61bb      	str	r3, [r7, #24]
  pLayerCfg.Alpha0 = 0;
 8000850:	2300      	movs	r3, #0
 8000852:	61fb      	str	r3, [r7, #28]
  pLayerCfg.BlendingFactor1 = LTDC_BLENDING_FACTOR1_CA;
 8000854:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8000858:	623b      	str	r3, [r7, #32]
  pLayerCfg.BlendingFactor2 = LTDC_BLENDING_FACTOR2_CA;
 800085a:	2305      	movs	r3, #5
 800085c:	627b      	str	r3, [r7, #36]	@ 0x24
  pLayerCfg.FBStartAdress = 0xD0000000;
 800085e:	f04f 4350 	mov.w	r3, #3489660928	@ 0xd0000000
 8000862:	62bb      	str	r3, [r7, #40]	@ 0x28
  pLayerCfg.ImageWidth = 480;
 8000864:	f44f 73f0 	mov.w	r3, #480	@ 0x1e0
 8000868:	62fb      	str	r3, [r7, #44]	@ 0x2c
  pLayerCfg.ImageHeight = 272;
 800086a:	f44f 7388 	mov.w	r3, #272	@ 0x110
 800086e:	633b      	str	r3, [r7, #48]	@ 0x30
  pLayerCfg.Backcolor.Blue = 0;
 8000870:	2300      	movs	r3, #0
 8000872:	f887 3034 	strb.w	r3, [r7, #52]	@ 0x34
  pLayerCfg.Backcolor.Green = 0;
 8000876:	2300      	movs	r3, #0
 8000878:	f887 3035 	strb.w	r3, [r7, #53]	@ 0x35
  pLayerCfg.Backcolor.Red = 0;
 800087c:	2300      	movs	r3, #0
 800087e:	f887 3036 	strb.w	r3, [r7, #54]	@ 0x36
  if (HAL_LTDC_ConfigLayer(&hltdc, &pLayerCfg, 0) != HAL_OK)
 8000882:	1d3b      	adds	r3, r7, #4
 8000884:	2200      	movs	r2, #0
 8000886:	4619      	mov	r1, r3
 8000888:	4805      	ldr	r0, [pc, #20]	@ (80008a0 <MX_LTDC_Init+0x100>)
 800088a:	f012 f953 	bl	8012b34 <HAL_LTDC_ConfigLayer>
 800088e:	4603      	mov	r3, r0
 8000890:	2b00      	cmp	r3, #0
 8000892:	d001      	beq.n	8000898 <MX_LTDC_Init+0xf8>
  {
    Error_Handler();
 8000894:	f000 f9fa 	bl	8000c8c <Error_Handler>
  }
  /* USER CODE BEGIN LTDC_Init 2 */

  /* USER CODE END LTDC_Init 2 */

}
 8000898:	bf00      	nop
 800089a:	3738      	adds	r7, #56	@ 0x38
 800089c:	46bd      	mov	sp, r7
 800089e:	bd80      	pop	{r7, pc}
 80008a0:	240001d4 	.word	0x240001d4
 80008a4:	50001000 	.word	0x50001000

080008a8 <MX_QUADSPI_Init>:
  * @brief QUADSPI Initialization Function
  * @param None
  * @retval None
  */
static void MX_QUADSPI_Init(void)
{
 80008a8:	b580      	push	{r7, lr}
 80008aa:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN QUADSPI_Init 1 */

  /* USER CODE END QUADSPI_Init 1 */
  /* QUADSPI parameter configuration*/
  hqspi.Instance = QUADSPI;
 80008ac:	4b12      	ldr	r3, [pc, #72]	@ (80008f8 <MX_QUADSPI_Init+0x50>)
 80008ae:	4a13      	ldr	r2, [pc, #76]	@ (80008fc <MX_QUADSPI_Init+0x54>)
 80008b0:	601a      	str	r2, [r3, #0]
  hqspi.Init.ClockPrescaler = 1;
 80008b2:	4b11      	ldr	r3, [pc, #68]	@ (80008f8 <MX_QUADSPI_Init+0x50>)
 80008b4:	2201      	movs	r2, #1
 80008b6:	605a      	str	r2, [r3, #4]
  hqspi.Init.FifoThreshold = 1;
 80008b8:	4b0f      	ldr	r3, [pc, #60]	@ (80008f8 <MX_QUADSPI_Init+0x50>)
 80008ba:	2201      	movs	r2, #1
 80008bc:	609a      	str	r2, [r3, #8]
  hqspi.Init.SampleShifting = QSPI_SAMPLE_SHIFTING_HALFCYCLE;
 80008be:	4b0e      	ldr	r3, [pc, #56]	@ (80008f8 <MX_QUADSPI_Init+0x50>)
 80008c0:	2210      	movs	r2, #16
 80008c2:	60da      	str	r2, [r3, #12]
  hqspi.Init.FlashSize = 26;
 80008c4:	4b0c      	ldr	r3, [pc, #48]	@ (80008f8 <MX_QUADSPI_Init+0x50>)
 80008c6:	221a      	movs	r2, #26
 80008c8:	611a      	str	r2, [r3, #16]
  hqspi.Init.ChipSelectHighTime = QSPI_CS_HIGH_TIME_3_CYCLE;
 80008ca:	4b0b      	ldr	r3, [pc, #44]	@ (80008f8 <MX_QUADSPI_Init+0x50>)
 80008cc:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80008d0:	615a      	str	r2, [r3, #20]
  hqspi.Init.ClockMode = QSPI_CLOCK_MODE_0;
 80008d2:	4b09      	ldr	r3, [pc, #36]	@ (80008f8 <MX_QUADSPI_Init+0x50>)
 80008d4:	2200      	movs	r2, #0
 80008d6:	619a      	str	r2, [r3, #24]
  hqspi.Init.DualFlash = QSPI_DUALFLASH_ENABLE;
 80008d8:	4b07      	ldr	r3, [pc, #28]	@ (80008f8 <MX_QUADSPI_Init+0x50>)
 80008da:	2240      	movs	r2, #64	@ 0x40
 80008dc:	621a      	str	r2, [r3, #32]
  if (HAL_QSPI_Init(&hqspi) != HAL_OK)
 80008de:	4806      	ldr	r0, [pc, #24]	@ (80008f8 <MX_QUADSPI_Init+0x50>)
 80008e0:	f012 fcf6 	bl	80132d0 <HAL_QSPI_Init>
 80008e4:	4603      	mov	r3, r0
 80008e6:	2b00      	cmp	r3, #0
 80008e8:	d001      	beq.n	80008ee <MX_QUADSPI_Init+0x46>
  {
    Error_Handler();
 80008ea:	f000 f9cf 	bl	8000c8c <Error_Handler>
  }
  /* USER CODE BEGIN QUADSPI_Init 2 */
  initBspQuadSpi(&Error_Handler);
 80008ee:	4804      	ldr	r0, [pc, #16]	@ (8000900 <MX_QUADSPI_Init+0x58>)
 80008f0:	f000 fa46 	bl	8000d80 <initBspQuadSpi>
  /* USER CODE END QUADSPI_Init 2 */

}
 80008f4:	bf00      	nop
 80008f6:	bd80      	pop	{r7, pc}
 80008f8:	2400027c 	.word	0x2400027c
 80008fc:	52005000 	.word	0x52005000
 8000900:	08000c8d 	.word	0x08000c8d

08000904 <MX_FMC_Init>:

// }

/* FMC initialization function */
void MX_FMC_Init(void)
{
 8000904:	b580      	push	{r7, lr}
 8000906:	b088      	sub	sp, #32
 8000908:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN FMC_Init 0 */

  /* USER CODE END FMC_Init 0 */

  FMC_SDRAM_TimingTypeDef SdramTiming = {0};
 800090a:	1d3b      	adds	r3, r7, #4
 800090c:	2200      	movs	r2, #0
 800090e:	601a      	str	r2, [r3, #0]
 8000910:	605a      	str	r2, [r3, #4]
 8000912:	609a      	str	r2, [r3, #8]
 8000914:	60da      	str	r2, [r3, #12]
 8000916:	611a      	str	r2, [r3, #16]
 8000918:	615a      	str	r2, [r3, #20]
 800091a:	619a      	str	r2, [r3, #24]

  /* USER CODE END FMC_Init 1 */

  /** Perform the SDRAM2 memory initialization sequence
  */
  hsdram2.Instance = FMC_SDRAM_DEVICE;
 800091c:	4b21      	ldr	r3, [pc, #132]	@ (80009a4 <MX_FMC_Init+0xa0>)
 800091e:	4a22      	ldr	r2, [pc, #136]	@ (80009a8 <MX_FMC_Init+0xa4>)
 8000920:	601a      	str	r2, [r3, #0]
  /* hsdram2.Init */
  hsdram2.Init.SDBank = FMC_SDRAM_BANK2;
 8000922:	4b20      	ldr	r3, [pc, #128]	@ (80009a4 <MX_FMC_Init+0xa0>)
 8000924:	2201      	movs	r2, #1
 8000926:	605a      	str	r2, [r3, #4]
  hsdram2.Init.ColumnBitsNumber = FMC_SDRAM_COLUMN_BITS_NUM_8;
 8000928:	4b1e      	ldr	r3, [pc, #120]	@ (80009a4 <MX_FMC_Init+0xa0>)
 800092a:	2200      	movs	r2, #0
 800092c:	609a      	str	r2, [r3, #8]
  hsdram2.Init.RowBitsNumber = FMC_SDRAM_ROW_BITS_NUM_12;
 800092e:	4b1d      	ldr	r3, [pc, #116]	@ (80009a4 <MX_FMC_Init+0xa0>)
 8000930:	2204      	movs	r2, #4
 8000932:	60da      	str	r2, [r3, #12]
  hsdram2.Init.MemoryDataWidth = FMC_SDRAM_MEM_BUS_WIDTH_16;
 8000934:	4b1b      	ldr	r3, [pc, #108]	@ (80009a4 <MX_FMC_Init+0xa0>)
 8000936:	2210      	movs	r2, #16
 8000938:	611a      	str	r2, [r3, #16]
  hsdram2.Init.InternalBankNumber = FMC_SDRAM_INTERN_BANKS_NUM_4;
 800093a:	4b1a      	ldr	r3, [pc, #104]	@ (80009a4 <MX_FMC_Init+0xa0>)
 800093c:	2240      	movs	r2, #64	@ 0x40
 800093e:	615a      	str	r2, [r3, #20]
  hsdram2.Init.CASLatency = FMC_SDRAM_CAS_LATENCY_2;
 8000940:	4b18      	ldr	r3, [pc, #96]	@ (80009a4 <MX_FMC_Init+0xa0>)
 8000942:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8000946:	619a      	str	r2, [r3, #24]
  hsdram2.Init.WriteProtection = FMC_SDRAM_WRITE_PROTECTION_DISABLE;
 8000948:	4b16      	ldr	r3, [pc, #88]	@ (80009a4 <MX_FMC_Init+0xa0>)
 800094a:	2200      	movs	r2, #0
 800094c:	61da      	str	r2, [r3, #28]
  hsdram2.Init.SDClockPeriod = FMC_SDRAM_CLOCK_PERIOD_2;
 800094e:	4b15      	ldr	r3, [pc, #84]	@ (80009a4 <MX_FMC_Init+0xa0>)
 8000950:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8000954:	621a      	str	r2, [r3, #32]
  hsdram2.Init.ReadBurst = FMC_SDRAM_RBURST_ENABLE;
 8000956:	4b13      	ldr	r3, [pc, #76]	@ (80009a4 <MX_FMC_Init+0xa0>)
 8000958:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 800095c:	625a      	str	r2, [r3, #36]	@ 0x24
  hsdram2.Init.ReadPipeDelay = FMC_SDRAM_RPIPE_DELAY_0;
 800095e:	4b11      	ldr	r3, [pc, #68]	@ (80009a4 <MX_FMC_Init+0xa0>)
 8000960:	2200      	movs	r2, #0
 8000962:	629a      	str	r2, [r3, #40]	@ 0x28
  /* SdramTiming */
  SdramTiming.LoadToActiveDelay = 2;
 8000964:	2302      	movs	r3, #2
 8000966:	607b      	str	r3, [r7, #4]
  SdramTiming.ExitSelfRefreshDelay = 6;
 8000968:	2306      	movs	r3, #6
 800096a:	60bb      	str	r3, [r7, #8]
  SdramTiming.SelfRefreshTime = 4;
 800096c:	2304      	movs	r3, #4
 800096e:	60fb      	str	r3, [r7, #12]
  SdramTiming.RowCycleDelay = 6;
 8000970:	2306      	movs	r3, #6
 8000972:	613b      	str	r3, [r7, #16]
  SdramTiming.WriteRecoveryTime = 2;
 8000974:	2302      	movs	r3, #2
 8000976:	617b      	str	r3, [r7, #20]
  SdramTiming.RPDelay = 2;
 8000978:	2302      	movs	r3, #2
 800097a:	61bb      	str	r3, [r7, #24]
  SdramTiming.RCDDelay = 2;
 800097c:	2302      	movs	r3, #2
 800097e:	61fb      	str	r3, [r7, #28]

  if (HAL_SDRAM_Init(&hsdram2, &SdramTiming) != HAL_OK)
 8000980:	1d3b      	adds	r3, r7, #4
 8000982:	4619      	mov	r1, r3
 8000984:	4807      	ldr	r0, [pc, #28]	@ (80009a4 <MX_FMC_Init+0xa0>)
 8000986:	f015 ff85 	bl	8016894 <HAL_SDRAM_Init>
 800098a:	4603      	mov	r3, r0
 800098c:	2b00      	cmp	r3, #0
 800098e:	d001      	beq.n	8000994 <MX_FMC_Init+0x90>
  {
    Error_Handler( );
 8000990:	f000 f97c 	bl	8000c8c <Error_Handler>
  }

  /* USER CODE BEGIN FMC_Init 2 */
  initBspSdRam(&Error_Handler);
 8000994:	4805      	ldr	r0, [pc, #20]	@ (80009ac <MX_FMC_Init+0xa8>)
 8000996:	f000 fa14 	bl	8000dc2 <initBspSdRam>
  /* USER CODE END FMC_Init 2 */
}
 800099a:	bf00      	nop
 800099c:	3720      	adds	r7, #32
 800099e:	46bd      	mov	sp, r7
 80009a0:	bd80      	pop	{r7, pc}
 80009a2:	bf00      	nop
 80009a4:	240002c8 	.word	0x240002c8
 80009a8:	52004140 	.word	0x52004140
 80009ac:	08000c8d 	.word	0x08000c8d

080009b0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80009b0:	b580      	push	{r7, lr}
 80009b2:	b090      	sub	sp, #64	@ 0x40
 80009b4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80009b6:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 80009ba:	2200      	movs	r2, #0
 80009bc:	601a      	str	r2, [r3, #0]
 80009be:	605a      	str	r2, [r3, #4]
 80009c0:	609a      	str	r2, [r3, #8]
 80009c2:	60da      	str	r2, [r3, #12]
 80009c4:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOK_CLK_ENABLE();
 80009c6:	4b81      	ldr	r3, [pc, #516]	@ (8000bcc <MX_GPIO_Init+0x21c>)
 80009c8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80009cc:	4a7f      	ldr	r2, [pc, #508]	@ (8000bcc <MX_GPIO_Init+0x21c>)
 80009ce:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80009d2:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80009d6:	4b7d      	ldr	r3, [pc, #500]	@ (8000bcc <MX_GPIO_Init+0x21c>)
 80009d8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80009dc:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80009e0:	62bb      	str	r3, [r7, #40]	@ 0x28
 80009e2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
  __HAL_RCC_GPIOG_CLK_ENABLE();
 80009e4:	4b79      	ldr	r3, [pc, #484]	@ (8000bcc <MX_GPIO_Init+0x21c>)
 80009e6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80009ea:	4a78      	ldr	r2, [pc, #480]	@ (8000bcc <MX_GPIO_Init+0x21c>)
 80009ec:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80009f0:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80009f4:	4b75      	ldr	r3, [pc, #468]	@ (8000bcc <MX_GPIO_Init+0x21c>)
 80009f6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80009fa:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80009fe:	627b      	str	r3, [r7, #36]	@ 0x24
 8000a00:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
  __HAL_RCC_GPIOI_CLK_ENABLE();
 8000a02:	4b72      	ldr	r3, [pc, #456]	@ (8000bcc <MX_GPIO_Init+0x21c>)
 8000a04:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000a08:	4a70      	ldr	r2, [pc, #448]	@ (8000bcc <MX_GPIO_Init+0x21c>)
 8000a0a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8000a0e:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000a12:	4b6e      	ldr	r3, [pc, #440]	@ (8000bcc <MX_GPIO_Init+0x21c>)
 8000a14:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000a18:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8000a1c:	623b      	str	r3, [r7, #32]
 8000a1e:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000a20:	4b6a      	ldr	r3, [pc, #424]	@ (8000bcc <MX_GPIO_Init+0x21c>)
 8000a22:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000a26:	4a69      	ldr	r2, [pc, #420]	@ (8000bcc <MX_GPIO_Init+0x21c>)
 8000a28:	f043 0310 	orr.w	r3, r3, #16
 8000a2c:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000a30:	4b66      	ldr	r3, [pc, #408]	@ (8000bcc <MX_GPIO_Init+0x21c>)
 8000a32:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000a36:	f003 0310 	and.w	r3, r3, #16
 8000a3a:	61fb      	str	r3, [r7, #28]
 8000a3c:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOJ_CLK_ENABLE();
 8000a3e:	4b63      	ldr	r3, [pc, #396]	@ (8000bcc <MX_GPIO_Init+0x21c>)
 8000a40:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000a44:	4a61      	ldr	r2, [pc, #388]	@ (8000bcc <MX_GPIO_Init+0x21c>)
 8000a46:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8000a4a:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000a4e:	4b5f      	ldr	r3, [pc, #380]	@ (8000bcc <MX_GPIO_Init+0x21c>)
 8000a50:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000a54:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8000a58:	61bb      	str	r3, [r7, #24]
 8000a5a:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000a5c:	4b5b      	ldr	r3, [pc, #364]	@ (8000bcc <MX_GPIO_Init+0x21c>)
 8000a5e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000a62:	4a5a      	ldr	r2, [pc, #360]	@ (8000bcc <MX_GPIO_Init+0x21c>)
 8000a64:	f043 0308 	orr.w	r3, r3, #8
 8000a68:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000a6c:	4b57      	ldr	r3, [pc, #348]	@ (8000bcc <MX_GPIO_Init+0x21c>)
 8000a6e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000a72:	f003 0308 	and.w	r3, r3, #8
 8000a76:	617b      	str	r3, [r7, #20]
 8000a78:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000a7a:	4b54      	ldr	r3, [pc, #336]	@ (8000bcc <MX_GPIO_Init+0x21c>)
 8000a7c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000a80:	4a52      	ldr	r2, [pc, #328]	@ (8000bcc <MX_GPIO_Init+0x21c>)
 8000a82:	f043 0304 	orr.w	r3, r3, #4
 8000a86:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000a8a:	4b50      	ldr	r3, [pc, #320]	@ (8000bcc <MX_GPIO_Init+0x21c>)
 8000a8c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000a90:	f003 0304 	and.w	r3, r3, #4
 8000a94:	613b      	str	r3, [r7, #16]
 8000a96:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000a98:	4b4c      	ldr	r3, [pc, #304]	@ (8000bcc <MX_GPIO_Init+0x21c>)
 8000a9a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000a9e:	4a4b      	ldr	r2, [pc, #300]	@ (8000bcc <MX_GPIO_Init+0x21c>)
 8000aa0:	f043 0301 	orr.w	r3, r3, #1
 8000aa4:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000aa8:	4b48      	ldr	r3, [pc, #288]	@ (8000bcc <MX_GPIO_Init+0x21c>)
 8000aaa:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000aae:	f003 0301 	and.w	r3, r3, #1
 8000ab2:	60fb      	str	r3, [r7, #12]
 8000ab4:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000ab6:	4b45      	ldr	r3, [pc, #276]	@ (8000bcc <MX_GPIO_Init+0x21c>)
 8000ab8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000abc:	4a43      	ldr	r2, [pc, #268]	@ (8000bcc <MX_GPIO_Init+0x21c>)
 8000abe:	f043 0320 	orr.w	r3, r3, #32
 8000ac2:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000ac6:	4b41      	ldr	r3, [pc, #260]	@ (8000bcc <MX_GPIO_Init+0x21c>)
 8000ac8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000acc:	f003 0320 	and.w	r3, r3, #32
 8000ad0:	60bb      	str	r3, [r7, #8]
 8000ad2:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000ad4:	4b3d      	ldr	r3, [pc, #244]	@ (8000bcc <MX_GPIO_Init+0x21c>)
 8000ad6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000ada:	4a3c      	ldr	r2, [pc, #240]	@ (8000bcc <MX_GPIO_Init+0x21c>)
 8000adc:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000ae0:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000ae4:	4b39      	ldr	r3, [pc, #228]	@ (8000bcc <MX_GPIO_Init+0x21c>)
 8000ae6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000aea:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8000aee:	607b      	str	r3, [r7, #4]
 8000af0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000af2:	4b36      	ldr	r3, [pc, #216]	@ (8000bcc <MX_GPIO_Init+0x21c>)
 8000af4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000af8:	4a34      	ldr	r2, [pc, #208]	@ (8000bcc <MX_GPIO_Init+0x21c>)
 8000afa:	f043 0302 	orr.w	r3, r3, #2
 8000afe:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000b02:	4b32      	ldr	r3, [pc, #200]	@ (8000bcc <MX_GPIO_Init+0x21c>)
 8000b04:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000b08:	f003 0302 	and.w	r3, r3, #2
 8000b0c:	603b      	str	r3, [r7, #0]
 8000b0e:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(D3_ImprGnD_GPIO_Port, D3_ImprGnD_Pin, GPIO_PIN_RESET);
 8000b10:	2200      	movs	r2, #0
 8000b12:	2140      	movs	r1, #64	@ 0x40
 8000b14:	482e      	ldr	r0, [pc, #184]	@ (8000bd0 <MX_GPIO_Init+0x220>)
 8000b16:	f010 ffd1 	bl	8011abc <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PI3 */
  GPIO_InitStruct.Pin = GPIO_PIN_3;
 8000b1a:	2308      	movs	r3, #8
 8000b1c:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000b1e:	2300      	movs	r3, #0
 8000b20:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b22:	2300      	movs	r3, #0
 8000b24:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 8000b26:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8000b2a:	4619      	mov	r1, r3
 8000b2c:	4829      	ldr	r0, [pc, #164]	@ (8000bd4 <MX_GPIO_Init+0x224>)
 8000b2e:	f010 fcf3 	bl	8011518 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA8 */
  GPIO_InitStruct.Pin = GPIO_PIN_8;
 8000b32:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8000b36:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b38:	2302      	movs	r3, #2
 8000b3a:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b3c:	2300      	movs	r3, #0
 8000b3e:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b40:	2300      	movs	r3, #0
 8000b42:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF0_MCO;
 8000b44:	2300      	movs	r3, #0
 8000b46:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000b48:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8000b4c:	4619      	mov	r1, r3
 8000b4e:	4820      	ldr	r0, [pc, #128]	@ (8000bd0 <MX_GPIO_Init+0x220>)
 8000b50:	f010 fce2 	bl	8011518 <HAL_GPIO_Init>

  /*Configure GPIO pin : D2_SWToggle_Pin */
  GPIO_InitStruct.Pin = D2_SWToggle_Pin;
 8000b54:	2308      	movs	r3, #8
 8000b56:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000b58:	2300      	movs	r3, #0
 8000b5a:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000b5c:	2301      	movs	r3, #1
 8000b5e:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(D2_SWToggle_GPIO_Port, &GPIO_InitStruct);
 8000b60:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8000b64:	4619      	mov	r1, r3
 8000b66:	481c      	ldr	r0, [pc, #112]	@ (8000bd8 <MX_GPIO_Init+0x228>)
 8000b68:	f010 fcd6 	bl	8011518 <HAL_GPIO_Init>

  /*Configure GPIO pin : D4_MoButton_Pin */
  GPIO_InitStruct.Pin = D4_MoButton_Pin;
 8000b6c:	2302      	movs	r3, #2
 8000b6e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000b70:	2300      	movs	r3, #0
 8000b72:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000b74:	2301      	movs	r3, #1
 8000b76:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(D4_MoButton_GPIO_Port, &GPIO_InitStruct);
 8000b78:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8000b7c:	4619      	mov	r1, r3
 8000b7e:	4817      	ldr	r0, [pc, #92]	@ (8000bdc <MX_GPIO_Init+0x22c>)
 8000b80:	f010 fcca 	bl	8011518 <HAL_GPIO_Init>

  /*Configure GPIO pin : D3_ImprGnD_Pin */
  GPIO_InitStruct.Pin = D3_ImprGnD_Pin;
 8000b84:	2340      	movs	r3, #64	@ 0x40
 8000b86:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000b88:	2301      	movs	r3, #1
 8000b8a:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b8c:	2300      	movs	r3, #0
 8000b8e:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b90:	2300      	movs	r3, #0
 8000b92:	63bb      	str	r3, [r7, #56]	@ 0x38
  HAL_GPIO_Init(D3_ImprGnD_GPIO_Port, &GPIO_InitStruct);
 8000b94:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8000b98:	4619      	mov	r1, r3
 8000b9a:	480d      	ldr	r0, [pc, #52]	@ (8000bd0 <MX_GPIO_Init+0x220>)
 8000b9c:	f010 fcbc 	bl	8011518 <HAL_GPIO_Init>

  // PE3, used for alarm LEDs
  // Use hal to set things
  GPIO_InitStruct.Pin = GPIO_PIN_3;
 8000ba0:	2308      	movs	r3, #8
 8000ba2:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000ba4:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8000ba8:	4619      	mov	r1, r3
 8000baa:	480d      	ldr	r0, [pc, #52]	@ (8000be0 <MX_GPIO_Init+0x230>)
 8000bac:	f010 fcb4 	bl	8011518 <HAL_GPIO_Init>

  // PH15, also used for alarm LEDs
  GPIO_InitStruct.Pin = GPIO_PIN_15;
 8000bb0:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8000bb4:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8000bb6:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8000bba:	4619      	mov	r1, r3
 8000bbc:	4809      	ldr	r0, [pc, #36]	@ (8000be4 <MX_GPIO_Init+0x234>)
 8000bbe:	f010 fcab 	bl	8011518 <HAL_GPIO_Init>
}
 8000bc2:	bf00      	nop
 8000bc4:	3740      	adds	r7, #64	@ 0x40
 8000bc6:	46bd      	mov	sp, r7
 8000bc8:	bd80      	pop	{r7, pc}
 8000bca:	bf00      	nop
 8000bcc:	58024400 	.word	0x58024400
 8000bd0:	58020000 	.word	0x58020000
 8000bd4:	58022000 	.word	0x58022000
 8000bd8:	58021800 	.word	0x58021800
 8000bdc:	58022800 	.word	0x58022800
 8000be0:	58021000 	.word	0x58021000
 8000be4:	58021c00 	.word	0x58021c00

08000be8 <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void *argument)
{
 8000be8:	b580      	push	{r7, lr}
 8000bea:	b082      	sub	sp, #8
 8000bec:	af00      	add	r7, sp, #0
 8000bee:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 8000bf0:	2001      	movs	r0, #1
 8000bf2:	f00a f8ad 	bl	800ad50 <osDelay>
 8000bf6:	e7fb      	b.n	8000bf0 <StartDefaultTask+0x8>

08000bf8 <MPU_Config>:
}

/* MPU Configuration */

void MPU_Config(void)
{
 8000bf8:	b580      	push	{r7, lr}
 8000bfa:	b084      	sub	sp, #16
 8000bfc:	af00      	add	r7, sp, #0
  MPU_Region_InitTypeDef MPU_InitStruct = {0};
 8000bfe:	463b      	mov	r3, r7
 8000c00:	2200      	movs	r2, #0
 8000c02:	601a      	str	r2, [r3, #0]
 8000c04:	605a      	str	r2, [r3, #4]
 8000c06:	609a      	str	r2, [r3, #8]
 8000c08:	60da      	str	r2, [r3, #12]

  /* Disables the MPU */
  HAL_MPU_Disable();
 8000c0a:	f010 f9a3 	bl	8010f54 <HAL_MPU_Disable>

  /** Initializes and configures the Region and the memory to be protected
  */
  MPU_InitStruct.Enable = MPU_REGION_ENABLE;
 8000c0e:	2301      	movs	r3, #1
 8000c10:	703b      	strb	r3, [r7, #0]
  MPU_InitStruct.Number = MPU_REGION_NUMBER0;
 8000c12:	2300      	movs	r3, #0
 8000c14:	707b      	strb	r3, [r7, #1]
  MPU_InitStruct.BaseAddress = 0xD0000000;
 8000c16:	f04f 4350 	mov.w	r3, #3489660928	@ 0xd0000000
 8000c1a:	607b      	str	r3, [r7, #4]
  MPU_InitStruct.Size = MPU_REGION_SIZE_1MB;
 8000c1c:	2313      	movs	r3, #19
 8000c1e:	723b      	strb	r3, [r7, #8]
  MPU_InitStruct.SubRegionDisable = 0x0;
 8000c20:	2300      	movs	r3, #0
 8000c22:	727b      	strb	r3, [r7, #9]
  MPU_InitStruct.TypeExtField = MPU_TEX_LEVEL0;
 8000c24:	2300      	movs	r3, #0
 8000c26:	72bb      	strb	r3, [r7, #10]
  MPU_InitStruct.AccessPermission = MPU_REGION_FULL_ACCESS;
 8000c28:	2303      	movs	r3, #3
 8000c2a:	72fb      	strb	r3, [r7, #11]
  MPU_InitStruct.DisableExec = MPU_INSTRUCTION_ACCESS_DISABLE;
 8000c2c:	2301      	movs	r3, #1
 8000c2e:	733b      	strb	r3, [r7, #12]
  MPU_InitStruct.IsShareable = MPU_ACCESS_NOT_SHAREABLE;
 8000c30:	2300      	movs	r3, #0
 8000c32:	737b      	strb	r3, [r7, #13]
  MPU_InitStruct.IsCacheable = MPU_ACCESS_CACHEABLE;
 8000c34:	2301      	movs	r3, #1
 8000c36:	73bb      	strb	r3, [r7, #14]
  MPU_InitStruct.IsBufferable = MPU_ACCESS_BUFFERABLE;
 8000c38:	2301      	movs	r3, #1
 8000c3a:	73fb      	strb	r3, [r7, #15]

  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 8000c3c:	463b      	mov	r3, r7
 8000c3e:	4618      	mov	r0, r3
 8000c40:	f010 f9c0 	bl	8010fc4 <HAL_MPU_ConfigRegion>

  /** Initializes and configures the Region and the memory to be protected
  */
  MPU_InitStruct.Number = MPU_REGION_NUMBER1;
 8000c44:	2301      	movs	r3, #1
 8000c46:	707b      	strb	r3, [r7, #1]
  MPU_InitStruct.BaseAddress = 0x90000000;
 8000c48:	f04f 4310 	mov.w	r3, #2415919104	@ 0x90000000
 8000c4c:	607b      	str	r3, [r7, #4]
  MPU_InitStruct.Size = MPU_REGION_SIZE_128MB;
 8000c4e:	231a      	movs	r3, #26
 8000c50:	723b      	strb	r3, [r7, #8]

  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 8000c52:	463b      	mov	r3, r7
 8000c54:	4618      	mov	r0, r3
 8000c56:	f010 f9b5 	bl	8010fc4 <HAL_MPU_ConfigRegion>
  /* Enables the MPU */
  HAL_MPU_Enable(MPU_PRIVILEGED_DEFAULT);
 8000c5a:	2004      	movs	r0, #4
 8000c5c:	f010 f992 	bl	8010f84 <HAL_MPU_Enable>

}
 8000c60:	bf00      	nop
 8000c62:	3710      	adds	r7, #16
 8000c64:	46bd      	mov	sp, r7
 8000c66:	bd80      	pop	{r7, pc}

08000c68 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000c68:	b580      	push	{r7, lr}
 8000c6a:	b082      	sub	sp, #8
 8000c6c:	af00      	add	r7, sp, #0
 8000c6e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 8000c70:	687b      	ldr	r3, [r7, #4]
 8000c72:	681b      	ldr	r3, [r3, #0]
 8000c74:	4a04      	ldr	r2, [pc, #16]	@ (8000c88 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8000c76:	4293      	cmp	r3, r2
 8000c78:	d101      	bne.n	8000c7e <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8000c7a:	f010 f82d 	bl	8010cd8 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8000c7e:	bf00      	nop
 8000c80:	3708      	adds	r7, #8
 8000c82:	46bd      	mov	sp, r7
 8000c84:	bd80      	pop	{r7, pc}
 8000c86:	bf00      	nop
 8000c88:	40001000 	.word	0x40001000

08000c8c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000c8c:	b480      	push	{r7}
 8000c8e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000c90:	b672      	cpsid	i
}
 8000c92:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000c94:	bf00      	nop
 8000c96:	e7fd      	b.n	8000c94 <Error_Handler+0x8>

08000c98 <initLtdcClocks>:

/**
 * @brief initLtdcClocks initialize LTDC clocks
 */
void initLtdcClocks(void)
{
 8000c98:	b580      	push	{r7, lr}
 8000c9a:	b08c      	sub	sp, #48	@ 0x30
 8000c9c:	af00      	add	r7, sp, #0
   // enable the LTDC and DMA2D clocks
   __HAL_RCC_LTDC_CLK_ENABLE();
 8000c9e:	4b36      	ldr	r3, [pc, #216]	@ (8000d78 <initLtdcClocks+0xe0>)
 8000ca0:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8000ca4:	4a34      	ldr	r2, [pc, #208]	@ (8000d78 <initLtdcClocks+0xe0>)
 8000ca6:	f043 0308 	orr.w	r3, r3, #8
 8000caa:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
 8000cae:	4b32      	ldr	r3, [pc, #200]	@ (8000d78 <initLtdcClocks+0xe0>)
 8000cb0:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8000cb4:	f003 0308 	and.w	r3, r3, #8
 8000cb8:	61bb      	str	r3, [r7, #24]
 8000cba:	69bb      	ldr	r3, [r7, #24]

   // enable GPIOs clock
   __HAL_RCC_GPIOI_CLK_ENABLE();
 8000cbc:	4b2e      	ldr	r3, [pc, #184]	@ (8000d78 <initLtdcClocks+0xe0>)
 8000cbe:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000cc2:	4a2d      	ldr	r2, [pc, #180]	@ (8000d78 <initLtdcClocks+0xe0>)
 8000cc4:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8000cc8:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000ccc:	4b2a      	ldr	r3, [pc, #168]	@ (8000d78 <initLtdcClocks+0xe0>)
 8000cce:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000cd2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8000cd6:	617b      	str	r3, [r7, #20]
 8000cd8:	697b      	ldr	r3, [r7, #20]
   __HAL_RCC_GPIOJ_CLK_ENABLE();
 8000cda:	4b27      	ldr	r3, [pc, #156]	@ (8000d78 <initLtdcClocks+0xe0>)
 8000cdc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000ce0:	4a25      	ldr	r2, [pc, #148]	@ (8000d78 <initLtdcClocks+0xe0>)
 8000ce2:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8000ce6:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000cea:	4b23      	ldr	r3, [pc, #140]	@ (8000d78 <initLtdcClocks+0xe0>)
 8000cec:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000cf0:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8000cf4:	613b      	str	r3, [r7, #16]
 8000cf6:	693b      	ldr	r3, [r7, #16]
   __HAL_RCC_GPIOK_CLK_ENABLE();
 8000cf8:	4b1f      	ldr	r3, [pc, #124]	@ (8000d78 <initLtdcClocks+0xe0>)
 8000cfa:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000cfe:	4a1e      	ldr	r2, [pc, #120]	@ (8000d78 <initLtdcClocks+0xe0>)
 8000d00:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8000d04:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000d08:	4b1b      	ldr	r3, [pc, #108]	@ (8000d78 <initLtdcClocks+0xe0>)
 8000d0a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000d0e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8000d12:	60fb      	str	r3, [r7, #12]
 8000d14:	68fb      	ldr	r3, [r7, #12]
   __HAL_RCC_GPIOH_CLK_ENABLE();
 8000d16:	4b18      	ldr	r3, [pc, #96]	@ (8000d78 <initLtdcClocks+0xe0>)
 8000d18:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000d1c:	4a16      	ldr	r2, [pc, #88]	@ (8000d78 <initLtdcClocks+0xe0>)
 8000d1e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000d22:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000d26:	4b14      	ldr	r3, [pc, #80]	@ (8000d78 <initLtdcClocks+0xe0>)
 8000d28:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000d2c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8000d30:	60bb      	str	r3, [r7, #8]
 8000d32:	68bb      	ldr	r3, [r7, #8]
   __HAL_RCC_GPIOD_CLK_ENABLE();
 8000d34:	4b10      	ldr	r3, [pc, #64]	@ (8000d78 <initLtdcClocks+0xe0>)
 8000d36:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000d3a:	4a0f      	ldr	r2, [pc, #60]	@ (8000d78 <initLtdcClocks+0xe0>)
 8000d3c:	f043 0308 	orr.w	r3, r3, #8
 8000d40:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000d44:	4b0c      	ldr	r3, [pc, #48]	@ (8000d78 <initLtdcClocks+0xe0>)
 8000d46:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000d4a:	f003 0308 	and.w	r3, r3, #8
 8000d4e:	607b      	str	r3, [r7, #4]
 8000d50:	687b      	ldr	r3, [r7, #4]

   // LCD_DISP pin has to be manually controlled
   GPIO_InitTypeDef gpio_init_structure;
   gpio_init_structure.Pin = GPIO_PIN_7;
 8000d52:	2380      	movs	r3, #128	@ 0x80
 8000d54:	61fb      	str	r3, [r7, #28]
   gpio_init_structure.Mode = GPIO_MODE_OUTPUT_PP;
 8000d56:	2301      	movs	r3, #1
 8000d58:	623b      	str	r3, [r7, #32]
   HAL_GPIO_Init(GPIOD, &gpio_init_structure);
 8000d5a:	f107 031c 	add.w	r3, r7, #28
 8000d5e:	4619      	mov	r1, r3
 8000d60:	4806      	ldr	r0, [pc, #24]	@ (8000d7c <initLtdcClocks+0xe4>)
 8000d62:	f010 fbd9 	bl	8011518 <HAL_GPIO_Init>

   // assert display enable LCD_DISP pin
   HAL_GPIO_WritePin(GPIOD, GPIO_PIN_7, GPIO_PIN_SET);
 8000d66:	2201      	movs	r2, #1
 8000d68:	2180      	movs	r1, #128	@ 0x80
 8000d6a:	4804      	ldr	r0, [pc, #16]	@ (8000d7c <initLtdcClocks+0xe4>)
 8000d6c:	f010 fea6 	bl	8011abc <HAL_GPIO_WritePin>
}
 8000d70:	bf00      	nop
 8000d72:	3730      	adds	r7, #48	@ 0x30
 8000d74:	46bd      	mov	sp, r7
 8000d76:	bd80      	pop	{r7, pc}
 8000d78:	58024400 	.word	0x58024400
 8000d7c:	58020c00 	.word	0x58020c00

08000d80 <initBspQuadSpi>:
/**
 * @brief initBspQuadSpi initialize QSPI via BSP
 * @param error_handler callback to error handler
 */
void initBspQuadSpi(void (*error_handler)())
{
 8000d80:	b580      	push	{r7, lr}
 8000d82:	b084      	sub	sp, #16
 8000d84:	af00      	add	r7, sp, #0
 8000d86:	6078      	str	r0, [r7, #4]
   BSP_QSPI_Init_t init;

   init.InterfaceMode = MT25TL01G_QPI_MODE;
 8000d88:	2303      	movs	r3, #3
 8000d8a:	733b      	strb	r3, [r7, #12]
   init.TransferRate = MT25TL01G_DTR_TRANSFER;
 8000d8c:	2301      	movs	r3, #1
 8000d8e:	737b      	strb	r3, [r7, #13]
   init.DualFlashMode = MT25TL01G_DUALFLASH_ENABLE;
 8000d90:	2340      	movs	r3, #64	@ 0x40
 8000d92:	73bb      	strb	r3, [r7, #14]

   if (BSP_QSPI_Init(0, &init) != BSP_ERROR_NONE)
 8000d94:	f107 030c 	add.w	r3, r7, #12
 8000d98:	4619      	mov	r1, r3
 8000d9a:	2000      	movs	r0, #0
 8000d9c:	f00e ff1a 	bl	800fbd4 <BSP_QSPI_Init>
 8000da0:	4603      	mov	r3, r0
 8000da2:	2b00      	cmp	r3, #0
 8000da4:	d001      	beq.n	8000daa <initBspQuadSpi+0x2a>
   {
      error_handler();
 8000da6:	687b      	ldr	r3, [r7, #4]
 8000da8:	4798      	blx	r3
   }

   if (BSP_QSPI_EnableMemoryMappedMode(0) != BSP_ERROR_NONE)
 8000daa:	2000      	movs	r0, #0
 8000dac:	f00e ffec 	bl	800fd88 <BSP_QSPI_EnableMemoryMappedMode>
 8000db0:	4603      	mov	r3, r0
 8000db2:	2b00      	cmp	r3, #0
 8000db4:	d001      	beq.n	8000dba <initBspQuadSpi+0x3a>
   {
      error_handler();
 8000db6:	687b      	ldr	r3, [r7, #4]
 8000db8:	4798      	blx	r3
   }
}
 8000dba:	bf00      	nop
 8000dbc:	3710      	adds	r7, #16
 8000dbe:	46bd      	mov	sp, r7
 8000dc0:	bd80      	pop	{r7, pc}

08000dc2 <initBspSdRam>:
/**
 * @brief initBspSdRam initialize SDRAM/FMC via BSP
 * @param error_handler callback to error handler
 */
void initBspSdRam(void (*error_handler)())
{
 8000dc2:	b580      	push	{r7, lr}
 8000dc4:	b082      	sub	sp, #8
 8000dc6:	af00      	add	r7, sp, #0
 8000dc8:	6078      	str	r0, [r7, #4]
   BSP_SDRAM_DeInit(0);
 8000dca:	2000      	movs	r0, #0
 8000dcc:	f00f fb4a 	bl	8010464 <BSP_SDRAM_DeInit>

   if (BSP_SDRAM_Init(0) != BSP_ERROR_NONE)
 8000dd0:	2000      	movs	r0, #0
 8000dd2:	f00f faeb 	bl	80103ac <BSP_SDRAM_Init>
 8000dd6:	4603      	mov	r3, r0
 8000dd8:	2b00      	cmp	r3, #0
 8000dda:	d001      	beq.n	8000de0 <initBspSdRam+0x1e>
   {
      error_handler();
 8000ddc:	687b      	ldr	r3, [r7, #4]
 8000dde:	4798      	blx	r3
   }
}
 8000de0:	bf00      	nop
 8000de2:	3708      	adds	r7, #8
 8000de4:	46bd      	mov	sp, r7
 8000de6:	bd80      	pop	{r7, pc}

08000de8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000de8:	b580      	push	{r7, lr}
 8000dea:	b082      	sub	sp, #8
 8000dec:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000dee:	4b0c      	ldr	r3, [pc, #48]	@ (8000e20 <HAL_MspInit+0x38>)
 8000df0:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8000df4:	4a0a      	ldr	r2, [pc, #40]	@ (8000e20 <HAL_MspInit+0x38>)
 8000df6:	f043 0302 	orr.w	r3, r3, #2
 8000dfa:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 8000dfe:	4b08      	ldr	r3, [pc, #32]	@ (8000e20 <HAL_MspInit+0x38>)
 8000e00:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8000e04:	f003 0302 	and.w	r3, r3, #2
 8000e08:	607b      	str	r3, [r7, #4]
 8000e0a:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8000e0c:	2200      	movs	r2, #0
 8000e0e:	210f      	movs	r1, #15
 8000e10:	f06f 0001 	mvn.w	r0, #1
 8000e14:	f010 f868 	bl	8010ee8 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000e18:	bf00      	nop
 8000e1a:	3708      	adds	r7, #8
 8000e1c:	46bd      	mov	sp, r7
 8000e1e:	bd80      	pop	{r7, pc}
 8000e20:	58024400 	.word	0x58024400

08000e24 <HAL_CRC_MspInit>:
* This function configures the hardware resources used in this example
* @param hcrc: CRC handle pointer
* @retval None
*/
void HAL_CRC_MspInit(CRC_HandleTypeDef* hcrc)
{
 8000e24:	b480      	push	{r7}
 8000e26:	b085      	sub	sp, #20
 8000e28:	af00      	add	r7, sp, #0
 8000e2a:	6078      	str	r0, [r7, #4]
  if(hcrc->Instance==CRC)
 8000e2c:	687b      	ldr	r3, [r7, #4]
 8000e2e:	681b      	ldr	r3, [r3, #0]
 8000e30:	4a0b      	ldr	r2, [pc, #44]	@ (8000e60 <HAL_CRC_MspInit+0x3c>)
 8000e32:	4293      	cmp	r3, r2
 8000e34:	d10e      	bne.n	8000e54 <HAL_CRC_MspInit+0x30>
  {
  /* USER CODE BEGIN CRC_MspInit 0 */

  /* USER CODE END CRC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CRC_CLK_ENABLE();
 8000e36:	4b0b      	ldr	r3, [pc, #44]	@ (8000e64 <HAL_CRC_MspInit+0x40>)
 8000e38:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000e3c:	4a09      	ldr	r2, [pc, #36]	@ (8000e64 <HAL_CRC_MspInit+0x40>)
 8000e3e:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8000e42:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000e46:	4b07      	ldr	r3, [pc, #28]	@ (8000e64 <HAL_CRC_MspInit+0x40>)
 8000e48:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000e4c:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8000e50:	60fb      	str	r3, [r7, #12]
 8000e52:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN CRC_MspInit 1 */

  /* USER CODE END CRC_MspInit 1 */
  }

}
 8000e54:	bf00      	nop
 8000e56:	3714      	adds	r7, #20
 8000e58:	46bd      	mov	sp, r7
 8000e5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e5e:	4770      	bx	lr
 8000e60:	58024c00 	.word	0x58024c00
 8000e64:	58024400 	.word	0x58024400

08000e68 <HAL_DMA2D_MspInit>:
* This function configures the hardware resources used in this example
* @param hdma2d: DMA2D handle pointer
* @retval None
*/
void HAL_DMA2D_MspInit(DMA2D_HandleTypeDef* hdma2d)
{
 8000e68:	b580      	push	{r7, lr}
 8000e6a:	b084      	sub	sp, #16
 8000e6c:	af00      	add	r7, sp, #0
 8000e6e:	6078      	str	r0, [r7, #4]
  if(hdma2d->Instance==DMA2D)
 8000e70:	687b      	ldr	r3, [r7, #4]
 8000e72:	681b      	ldr	r3, [r3, #0]
 8000e74:	4a0e      	ldr	r2, [pc, #56]	@ (8000eb0 <HAL_DMA2D_MspInit+0x48>)
 8000e76:	4293      	cmp	r3, r2
 8000e78:	d116      	bne.n	8000ea8 <HAL_DMA2D_MspInit+0x40>
  {
  /* USER CODE BEGIN DMA2D_MspInit 0 */

  /* USER CODE END DMA2D_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DMA2D_CLK_ENABLE();
 8000e7a:	4b0e      	ldr	r3, [pc, #56]	@ (8000eb4 <HAL_DMA2D_MspInit+0x4c>)
 8000e7c:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 8000e80:	4a0c      	ldr	r2, [pc, #48]	@ (8000eb4 <HAL_DMA2D_MspInit+0x4c>)
 8000e82:	f043 0310 	orr.w	r3, r3, #16
 8000e86:	f8c2 30d4 	str.w	r3, [r2, #212]	@ 0xd4
 8000e8a:	4b0a      	ldr	r3, [pc, #40]	@ (8000eb4 <HAL_DMA2D_MspInit+0x4c>)
 8000e8c:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 8000e90:	f003 0310 	and.w	r3, r3, #16
 8000e94:	60fb      	str	r3, [r7, #12]
 8000e96:	68fb      	ldr	r3, [r7, #12]
    /* DMA2D interrupt Init */
    HAL_NVIC_SetPriority(DMA2D_IRQn, 5, 0);
 8000e98:	2200      	movs	r2, #0
 8000e9a:	2105      	movs	r1, #5
 8000e9c:	205a      	movs	r0, #90	@ 0x5a
 8000e9e:	f010 f823 	bl	8010ee8 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(DMA2D_IRQn);
 8000ea2:	205a      	movs	r0, #90	@ 0x5a
 8000ea4:	f010 f83a 	bl	8010f1c <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN DMA2D_MspInit 1 */

  /* USER CODE END DMA2D_MspInit 1 */
  }

}
 8000ea8:	bf00      	nop
 8000eaa:	3710      	adds	r7, #16
 8000eac:	46bd      	mov	sp, r7
 8000eae:	bd80      	pop	{r7, pc}
 8000eb0:	52001000 	.word	0x52001000
 8000eb4:	58024400 	.word	0x58024400

08000eb8 <HAL_LTDC_MspInit>:
* This function configures the hardware resources used in this example
* @param hltdc: LTDC handle pointer
* @retval None
*/
void HAL_LTDC_MspInit(LTDC_HandleTypeDef* hltdc)
{
 8000eb8:	b580      	push	{r7, lr}
 8000eba:	b0be      	sub	sp, #248	@ 0xf8
 8000ebc:	af00      	add	r7, sp, #0
 8000ebe:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ec0:	f107 03e4 	add.w	r3, r7, #228	@ 0xe4
 8000ec4:	2200      	movs	r2, #0
 8000ec6:	601a      	str	r2, [r3, #0]
 8000ec8:	605a      	str	r2, [r3, #4]
 8000eca:	609a      	str	r2, [r3, #8]
 8000ecc:	60da      	str	r2, [r3, #12]
 8000ece:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000ed0:	f107 0320 	add.w	r3, r7, #32
 8000ed4:	22c0      	movs	r2, #192	@ 0xc0
 8000ed6:	2100      	movs	r1, #0
 8000ed8:	4618      	mov	r0, r3
 8000eda:	f029 ff32 	bl	802ad42 <memset>
  if(hltdc->Instance==LTDC)
 8000ede:	687b      	ldr	r3, [r7, #4]
 8000ee0:	681b      	ldr	r3, [r3, #0]
 8000ee2:	4a69      	ldr	r2, [pc, #420]	@ (8001088 <HAL_LTDC_MspInit+0x1d0>)
 8000ee4:	4293      	cmp	r3, r2
 8000ee6:	f040 80cb 	bne.w	8001080 <HAL_LTDC_MspInit+0x1c8>

  /* USER CODE END LTDC_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_LTDC;
 8000eea:	f04f 5200 	mov.w	r2, #536870912	@ 0x20000000
 8000eee:	f04f 0300 	mov.w	r3, #0
 8000ef2:	e9c7 2308 	strd	r2, r3, [r7, #32]
    PeriphClkInitStruct.PLL3.PLL3M = 5;
 8000ef6:	2305      	movs	r3, #5
 8000ef8:	64bb      	str	r3, [r7, #72]	@ 0x48
    PeriphClkInitStruct.PLL3.PLL3N = 160;
 8000efa:	23a0      	movs	r3, #160	@ 0xa0
 8000efc:	64fb      	str	r3, [r7, #76]	@ 0x4c
    PeriphClkInitStruct.PLL3.PLL3P = 2;
 8000efe:	2302      	movs	r3, #2
 8000f00:	653b      	str	r3, [r7, #80]	@ 0x50
    PeriphClkInitStruct.PLL3.PLL3Q = 2;
 8000f02:	2302      	movs	r3, #2
 8000f04:	657b      	str	r3, [r7, #84]	@ 0x54
    PeriphClkInitStruct.PLL3.PLL3R = 83;
 8000f06:	2353      	movs	r3, #83	@ 0x53
 8000f08:	65bb      	str	r3, [r7, #88]	@ 0x58
    PeriphClkInitStruct.PLL3.PLL3RGE = RCC_PLL3VCIRANGE_2;
 8000f0a:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8000f0e:	65fb      	str	r3, [r7, #92]	@ 0x5c
    PeriphClkInitStruct.PLL3.PLL3VCOSEL = RCC_PLL3VCOWIDE;
 8000f10:	2300      	movs	r3, #0
 8000f12:	663b      	str	r3, [r7, #96]	@ 0x60
    PeriphClkInitStruct.PLL3.PLL3FRACN = 0;
 8000f14:	2300      	movs	r3, #0
 8000f16:	667b      	str	r3, [r7, #100]	@ 0x64
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000f18:	f107 0320 	add.w	r3, r7, #32
 8000f1c:	4618      	mov	r0, r3
 8000f1e:	f014 f94b 	bl	80151b8 <HAL_RCCEx_PeriphCLKConfig>
 8000f22:	4603      	mov	r3, r0
 8000f24:	2b00      	cmp	r3, #0
 8000f26:	d001      	beq.n	8000f2c <HAL_LTDC_MspInit+0x74>
    {
      Error_Handler();
 8000f28:	f7ff feb0 	bl	8000c8c <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_LTDC_CLK_ENABLE();
 8000f2c:	4b57      	ldr	r3, [pc, #348]	@ (800108c <HAL_LTDC_MspInit+0x1d4>)
 8000f2e:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8000f32:	4a56      	ldr	r2, [pc, #344]	@ (800108c <HAL_LTDC_MspInit+0x1d4>)
 8000f34:	f043 0308 	orr.w	r3, r3, #8
 8000f38:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
 8000f3c:	4b53      	ldr	r3, [pc, #332]	@ (800108c <HAL_LTDC_MspInit+0x1d4>)
 8000f3e:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8000f42:	f003 0308 	and.w	r3, r3, #8
 8000f46:	61fb      	str	r3, [r7, #28]
 8000f48:	69fb      	ldr	r3, [r7, #28]

    __HAL_RCC_GPIOK_CLK_ENABLE();
 8000f4a:	4b50      	ldr	r3, [pc, #320]	@ (800108c <HAL_LTDC_MspInit+0x1d4>)
 8000f4c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000f50:	4a4e      	ldr	r2, [pc, #312]	@ (800108c <HAL_LTDC_MspInit+0x1d4>)
 8000f52:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8000f56:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000f5a:	4b4c      	ldr	r3, [pc, #304]	@ (800108c <HAL_LTDC_MspInit+0x1d4>)
 8000f5c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000f60:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8000f64:	61bb      	str	r3, [r7, #24]
 8000f66:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOI_CLK_ENABLE();
 8000f68:	4b48      	ldr	r3, [pc, #288]	@ (800108c <HAL_LTDC_MspInit+0x1d4>)
 8000f6a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000f6e:	4a47      	ldr	r2, [pc, #284]	@ (800108c <HAL_LTDC_MspInit+0x1d4>)
 8000f70:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8000f74:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000f78:	4b44      	ldr	r3, [pc, #272]	@ (800108c <HAL_LTDC_MspInit+0x1d4>)
 8000f7a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000f7e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8000f82:	617b      	str	r3, [r7, #20]
 8000f84:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOJ_CLK_ENABLE();
 8000f86:	4b41      	ldr	r3, [pc, #260]	@ (800108c <HAL_LTDC_MspInit+0x1d4>)
 8000f88:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000f8c:	4a3f      	ldr	r2, [pc, #252]	@ (800108c <HAL_LTDC_MspInit+0x1d4>)
 8000f8e:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8000f92:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000f96:	4b3d      	ldr	r3, [pc, #244]	@ (800108c <HAL_LTDC_MspInit+0x1d4>)
 8000f98:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000f9c:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8000fa0:	613b      	str	r3, [r7, #16]
 8000fa2:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOH_CLK_ENABLE();
 8000fa4:	4b39      	ldr	r3, [pc, #228]	@ (800108c <HAL_LTDC_MspInit+0x1d4>)
 8000fa6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000faa:	4a38      	ldr	r2, [pc, #224]	@ (800108c <HAL_LTDC_MspInit+0x1d4>)
 8000fac:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000fb0:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000fb4:	4b35      	ldr	r3, [pc, #212]	@ (800108c <HAL_LTDC_MspInit+0x1d4>)
 8000fb6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000fba:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8000fbe:	60fb      	str	r3, [r7, #12]
 8000fc0:	68fb      	ldr	r3, [r7, #12]
    PJ5     ------> LTDC_R6
    PH9     ------> LTDC_R3
    PJ3     ------> LTDC_R4
    PJ4     ------> LTDC_R5
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_4|GPIO_PIN_6|GPIO_PIN_3
 8000fc2:	23fc      	movs	r3, #252	@ 0xfc
 8000fc4:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
                          |GPIO_PIN_7|GPIO_PIN_2;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000fc8:	2302      	movs	r3, #2
 8000fca:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fce:	2300      	movs	r3, #0
 8000fd0:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000fd4:	2302      	movs	r3, #2
 8000fd6:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8000fda:	230e      	movs	r3, #14
 8000fdc:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
    HAL_GPIO_Init(GPIOK, &GPIO_InitStruct);
 8000fe0:	f107 03e4 	add.w	r3, r7, #228	@ 0xe4
 8000fe4:	4619      	mov	r1, r3
 8000fe6:	482a      	ldr	r0, [pc, #168]	@ (8001090 <HAL_LTDC_MspInit+0x1d8>)
 8000fe8:	f010 fa96 	bl	8011518 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_0|GPIO_PIN_9|GPIO_PIN_12
 8000fec:	f24d 2303 	movw	r3, #53763	@ 0xd203
 8000ff0:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
                          |GPIO_PIN_14|GPIO_PIN_15;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ff4:	2302      	movs	r3, #2
 8000ff6:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ffa:	2300      	movs	r3, #0
 8000ffc:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001000:	2302      	movs	r3, #2
 8001002:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8001006:	230e      	movs	r3, #14
 8001008:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
    HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 800100c:	f107 03e4 	add.w	r3, r7, #228	@ 0xe4
 8001010:	4619      	mov	r1, r3
 8001012:	4820      	ldr	r0, [pc, #128]	@ (8001094 <HAL_LTDC_MspInit+0x1dc>)
 8001014:	f010 fa80 	bl	8011518 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_15|GPIO_PIN_14|GPIO_PIN_12|GPIO_PIN_13
 8001018:	f64f 73fb 	movw	r3, #65531	@ 0xfffb
 800101c:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
                          |GPIO_PIN_11|GPIO_PIN_10|GPIO_PIN_9|GPIO_PIN_0
                          |GPIO_PIN_8|GPIO_PIN_7|GPIO_PIN_6|GPIO_PIN_1
                          |GPIO_PIN_5|GPIO_PIN_3|GPIO_PIN_4;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001020:	2302      	movs	r3, #2
 8001022:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001026:	2300      	movs	r3, #0
 8001028:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800102c:	2302      	movs	r3, #2
 800102e:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8001032:	230e      	movs	r3, #14
 8001034:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
    HAL_GPIO_Init(GPIOJ, &GPIO_InitStruct);
 8001038:	f107 03e4 	add.w	r3, r7, #228	@ 0xe4
 800103c:	4619      	mov	r1, r3
 800103e:	4816      	ldr	r0, [pc, #88]	@ (8001098 <HAL_LTDC_MspInit+0x1e0>)
 8001040:	f010 fa6a 	bl	8011518 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8001044:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8001048:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800104c:	2302      	movs	r3, #2
 800104e:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001052:	2300      	movs	r3, #0
 8001054:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001058:	2302      	movs	r3, #2
 800105a:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 800105e:	230e      	movs	r3, #14
 8001060:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
    HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8001064:	f107 03e4 	add.w	r3, r7, #228	@ 0xe4
 8001068:	4619      	mov	r1, r3
 800106a:	480c      	ldr	r0, [pc, #48]	@ (800109c <HAL_LTDC_MspInit+0x1e4>)
 800106c:	f010 fa54 	bl	8011518 <HAL_GPIO_Init>

    /* LTDC interrupt Init */
    HAL_NVIC_SetPriority(LTDC_IRQn, 5, 0);
 8001070:	2200      	movs	r2, #0
 8001072:	2105      	movs	r1, #5
 8001074:	2058      	movs	r0, #88	@ 0x58
 8001076:	f00f ff37 	bl	8010ee8 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(LTDC_IRQn);
 800107a:	2058      	movs	r0, #88	@ 0x58
 800107c:	f00f ff4e 	bl	8010f1c <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN LTDC_MspInit 1 */

  /* USER CODE END LTDC_MspInit 1 */
  }

}
 8001080:	bf00      	nop
 8001082:	37f8      	adds	r7, #248	@ 0xf8
 8001084:	46bd      	mov	sp, r7
 8001086:	bd80      	pop	{r7, pc}
 8001088:	50001000 	.word	0x50001000
 800108c:	58024400 	.word	0x58024400
 8001090:	58022800 	.word	0x58022800
 8001094:	58022000 	.word	0x58022000
 8001098:	58022400 	.word	0x58022400
 800109c:	58021c00 	.word	0x58021c00

080010a0 <HAL_QSPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hqspi: QSPI handle pointer
* @retval None
*/
void HAL_QSPI_MspInit(QSPI_HandleTypeDef* hqspi)
{
 80010a0:	b580      	push	{r7, lr}
 80010a2:	b0be      	sub	sp, #248	@ 0xf8
 80010a4:	af00      	add	r7, sp, #0
 80010a6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80010a8:	f107 03e4 	add.w	r3, r7, #228	@ 0xe4
 80010ac:	2200      	movs	r2, #0
 80010ae:	601a      	str	r2, [r3, #0]
 80010b0:	605a      	str	r2, [r3, #4]
 80010b2:	609a      	str	r2, [r3, #8]
 80010b4:	60da      	str	r2, [r3, #12]
 80010b6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80010b8:	f107 0320 	add.w	r3, r7, #32
 80010bc:	22c0      	movs	r2, #192	@ 0xc0
 80010be:	2100      	movs	r1, #0
 80010c0:	4618      	mov	r0, r3
 80010c2:	f029 fe3e 	bl	802ad42 <memset>
  if(hqspi->Instance==QUADSPI)
 80010c6:	687b      	ldr	r3, [r7, #4]
 80010c8:	681b      	ldr	r3, [r3, #0]
 80010ca:	4a77      	ldr	r2, [pc, #476]	@ (80012a8 <HAL_QSPI_MspInit+0x208>)
 80010cc:	4293      	cmp	r3, r2
 80010ce:	f040 80e7 	bne.w	80012a0 <HAL_QSPI_MspInit+0x200>

  /* USER CODE END QUADSPI_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_QSPI;
 80010d2:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 80010d6:	f04f 0300 	mov.w	r3, #0
 80010da:	e9c7 2308 	strd	r2, r3, [r7, #32]
    PeriphClkInitStruct.QspiClockSelection = RCC_QSPICLKSOURCE_D1HCLK;
 80010de:	2300      	movs	r3, #0
 80010e0:	66fb      	str	r3, [r7, #108]	@ 0x6c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80010e2:	f107 0320 	add.w	r3, r7, #32
 80010e6:	4618      	mov	r0, r3
 80010e8:	f014 f866 	bl	80151b8 <HAL_RCCEx_PeriphCLKConfig>
 80010ec:	4603      	mov	r3, r0
 80010ee:	2b00      	cmp	r3, #0
 80010f0:	d001      	beq.n	80010f6 <HAL_QSPI_MspInit+0x56>
    {
      Error_Handler();
 80010f2:	f7ff fdcb 	bl	8000c8c <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_QSPI_CLK_ENABLE();
 80010f6:	4b6d      	ldr	r3, [pc, #436]	@ (80012ac <HAL_QSPI_MspInit+0x20c>)
 80010f8:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 80010fc:	4a6b      	ldr	r2, [pc, #428]	@ (80012ac <HAL_QSPI_MspInit+0x20c>)
 80010fe:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001102:	f8c2 30d4 	str.w	r3, [r2, #212]	@ 0xd4
 8001106:	4b69      	ldr	r3, [pc, #420]	@ (80012ac <HAL_QSPI_MspInit+0x20c>)
 8001108:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 800110c:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001110:	61fb      	str	r3, [r7, #28]
 8001112:	69fb      	ldr	r3, [r7, #28]

    __HAL_RCC_GPIOG_CLK_ENABLE();
 8001114:	4b65      	ldr	r3, [pc, #404]	@ (80012ac <HAL_QSPI_MspInit+0x20c>)
 8001116:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800111a:	4a64      	ldr	r2, [pc, #400]	@ (80012ac <HAL_QSPI_MspInit+0x20c>)
 800111c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8001120:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001124:	4b61      	ldr	r3, [pc, #388]	@ (80012ac <HAL_QSPI_MspInit+0x20c>)
 8001126:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800112a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800112e:	61bb      	str	r3, [r7, #24]
 8001130:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOF_CLK_ENABLE();
 8001132:	4b5e      	ldr	r3, [pc, #376]	@ (80012ac <HAL_QSPI_MspInit+0x20c>)
 8001134:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001138:	4a5c      	ldr	r2, [pc, #368]	@ (80012ac <HAL_QSPI_MspInit+0x20c>)
 800113a:	f043 0320 	orr.w	r3, r3, #32
 800113e:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001142:	4b5a      	ldr	r3, [pc, #360]	@ (80012ac <HAL_QSPI_MspInit+0x20c>)
 8001144:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001148:	f003 0320 	and.w	r3, r3, #32
 800114c:	617b      	str	r3, [r7, #20]
 800114e:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOH_CLK_ENABLE();
 8001150:	4b56      	ldr	r3, [pc, #344]	@ (80012ac <HAL_QSPI_MspInit+0x20c>)
 8001152:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001156:	4a55      	ldr	r2, [pc, #340]	@ (80012ac <HAL_QSPI_MspInit+0x20c>)
 8001158:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800115c:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001160:	4b52      	ldr	r3, [pc, #328]	@ (80012ac <HAL_QSPI_MspInit+0x20c>)
 8001162:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001166:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800116a:	613b      	str	r3, [r7, #16]
 800116c:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 800116e:	4b4f      	ldr	r3, [pc, #316]	@ (80012ac <HAL_QSPI_MspInit+0x20c>)
 8001170:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001174:	4a4d      	ldr	r2, [pc, #308]	@ (80012ac <HAL_QSPI_MspInit+0x20c>)
 8001176:	f043 0308 	orr.w	r3, r3, #8
 800117a:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 800117e:	4b4b      	ldr	r3, [pc, #300]	@ (80012ac <HAL_QSPI_MspInit+0x20c>)
 8001180:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001184:	f003 0308 	and.w	r3, r3, #8
 8001188:	60fb      	str	r3, [r7, #12]
 800118a:	68fb      	ldr	r3, [r7, #12]
    PF9     ------> QUADSPI_BK1_IO1
    PH2     ------> QUADSPI_BK2_IO0
    PH3     ------> QUADSPI_BK2_IO1
    PD11     ------> QUADSPI_BK1_IO0
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_14;
 800118c:	f44f 4384 	mov.w	r3, #16896	@ 0x4200
 8001190:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001194:	2302      	movs	r3, #2
 8001196:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800119a:	2300      	movs	r3, #0
 800119c:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80011a0:	2303      	movs	r3, #3
 80011a2:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
    GPIO_InitStruct.Alternate = GPIO_AF9_QUADSPI;
 80011a6:	2309      	movs	r3, #9
 80011a8:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80011ac:	f107 03e4 	add.w	r3, r7, #228	@ 0xe4
 80011b0:	4619      	mov	r1, r3
 80011b2:	483f      	ldr	r0, [pc, #252]	@ (80012b0 <HAL_QSPI_MspInit+0x210>)
 80011b4:	f010 f9b0 	bl	8011518 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_6;
 80011b8:	2340      	movs	r3, #64	@ 0x40
 80011ba:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80011be:	2302      	movs	r3, #2
 80011c0:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80011c4:	2301      	movs	r3, #1
 80011c6:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80011ca:	2303      	movs	r3, #3
 80011cc:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
    GPIO_InitStruct.Alternate = GPIO_AF10_QUADSPI;
 80011d0:	230a      	movs	r3, #10
 80011d2:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80011d6:	f107 03e4 	add.w	r3, r7, #228	@ 0xe4
 80011da:	4619      	mov	r1, r3
 80011dc:	4834      	ldr	r0, [pc, #208]	@ (80012b0 <HAL_QSPI_MspInit+0x210>)
 80011de:	f010 f99b 	bl	8011518 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_10;
 80011e2:	f44f 6398 	mov.w	r3, #1216	@ 0x4c0
 80011e6:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80011ea:	2302      	movs	r3, #2
 80011ec:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011f0:	2300      	movs	r3, #0
 80011f2:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80011f6:	2303      	movs	r3, #3
 80011f8:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
    GPIO_InitStruct.Alternate = GPIO_AF9_QUADSPI;
 80011fc:	2309      	movs	r3, #9
 80011fe:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8001202:	f107 03e4 	add.w	r3, r7, #228	@ 0xe4
 8001206:	4619      	mov	r1, r3
 8001208:	482a      	ldr	r0, [pc, #168]	@ (80012b4 <HAL_QSPI_MspInit+0x214>)
 800120a:	f010 f985 	bl	8011518 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_9;
 800120e:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8001212:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001216:	2302      	movs	r3, #2
 8001218:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800121c:	2300      	movs	r3, #0
 800121e:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001222:	2303      	movs	r3, #3
 8001224:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
    GPIO_InitStruct.Alternate = GPIO_AF10_QUADSPI;
 8001228:	230a      	movs	r3, #10
 800122a:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 800122e:	f107 03e4 	add.w	r3, r7, #228	@ 0xe4
 8001232:	4619      	mov	r1, r3
 8001234:	481f      	ldr	r0, [pc, #124]	@ (80012b4 <HAL_QSPI_MspInit+0x214>)
 8001236:	f010 f96f 	bl	8011518 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 800123a:	230c      	movs	r3, #12
 800123c:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001240:	2302      	movs	r3, #2
 8001242:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001246:	2300      	movs	r3, #0
 8001248:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800124c:	2303      	movs	r3, #3
 800124e:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
    GPIO_InitStruct.Alternate = GPIO_AF9_QUADSPI;
 8001252:	2309      	movs	r3, #9
 8001254:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
    HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8001258:	f107 03e4 	add.w	r3, r7, #228	@ 0xe4
 800125c:	4619      	mov	r1, r3
 800125e:	4816      	ldr	r0, [pc, #88]	@ (80012b8 <HAL_QSPI_MspInit+0x218>)
 8001260:	f010 f95a 	bl	8011518 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_11;
 8001264:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8001268:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800126c:	2302      	movs	r3, #2
 800126e:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001272:	2300      	movs	r3, #0
 8001274:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001278:	2303      	movs	r3, #3
 800127a:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
    GPIO_InitStruct.Alternate = GPIO_AF9_QUADSPI;
 800127e:	2309      	movs	r3, #9
 8001280:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001284:	f107 03e4 	add.w	r3, r7, #228	@ 0xe4
 8001288:	4619      	mov	r1, r3
 800128a:	480c      	ldr	r0, [pc, #48]	@ (80012bc <HAL_QSPI_MspInit+0x21c>)
 800128c:	f010 f944 	bl	8011518 <HAL_GPIO_Init>

    /* QUADSPI interrupt Init */
    HAL_NVIC_SetPriority(QUADSPI_IRQn, 5, 0);
 8001290:	2200      	movs	r2, #0
 8001292:	2105      	movs	r1, #5
 8001294:	205c      	movs	r0, #92	@ 0x5c
 8001296:	f00f fe27 	bl	8010ee8 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(QUADSPI_IRQn);
 800129a:	205c      	movs	r0, #92	@ 0x5c
 800129c:	f00f fe3e 	bl	8010f1c <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN QUADSPI_MspInit 1 */

  /* USER CODE END QUADSPI_MspInit 1 */
  }

}
 80012a0:	bf00      	nop
 80012a2:	37f8      	adds	r7, #248	@ 0xf8
 80012a4:	46bd      	mov	sp, r7
 80012a6:	bd80      	pop	{r7, pc}
 80012a8:	52005000 	.word	0x52005000
 80012ac:	58024400 	.word	0x58024400
 80012b0:	58021800 	.word	0x58021800
 80012b4:	58021400 	.word	0x58021400
 80012b8:	58021c00 	.word	0x58021c00
 80012bc:	58020c00 	.word	0x58020c00

080012c0 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80012c0:	b480      	push	{r7}
 80012c2:	b083      	sub	sp, #12
 80012c4:	af00      	add	r7, sp, #0
 80012c6:	6078      	str	r0, [r7, #4]
  // /* USER CODE BEGIN TIM4_MspInit 1 */

  // /* USER CODE END TIM4_MspInit 1 */
  // }

}
 80012c8:	bf00      	nop
 80012ca:	370c      	adds	r7, #12
 80012cc:	46bd      	mov	sp, r7
 80012ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012d2:	4770      	bx	lr

080012d4 <HAL_FMC_MspInit>:

}

static uint32_t FMC_Initialized = 0;

static void HAL_FMC_MspInit(void){
 80012d4:	b580      	push	{r7, lr}
 80012d6:	b0b8      	sub	sp, #224	@ 0xe0
 80012d8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FMC_MspInit 0 */

  /* USER CODE END FMC_MspInit 0 */
  GPIO_InitTypeDef GPIO_InitStruct ={0};
 80012da:	f107 03cc 	add.w	r3, r7, #204	@ 0xcc
 80012de:	2200      	movs	r2, #0
 80012e0:	601a      	str	r2, [r3, #0]
 80012e2:	605a      	str	r2, [r3, #4]
 80012e4:	609a      	str	r2, [r3, #8]
 80012e6:	60da      	str	r2, [r3, #12]
 80012e8:	611a      	str	r2, [r3, #16]
  if (FMC_Initialized) {
 80012ea:	4b51      	ldr	r3, [pc, #324]	@ (8001430 <HAL_FMC_MspInit+0x15c>)
 80012ec:	681b      	ldr	r3, [r3, #0]
 80012ee:	2b00      	cmp	r3, #0
 80012f0:	f040 8099 	bne.w	8001426 <HAL_FMC_MspInit+0x152>
    return;
  }
  FMC_Initialized = 1;
 80012f4:	4b4e      	ldr	r3, [pc, #312]	@ (8001430 <HAL_FMC_MspInit+0x15c>)
 80012f6:	2201      	movs	r2, #1
 80012f8:	601a      	str	r2, [r3, #0]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80012fa:	f107 0308 	add.w	r3, r7, #8
 80012fe:	22c0      	movs	r2, #192	@ 0xc0
 8001300:	2100      	movs	r1, #0
 8001302:	4618      	mov	r0, r3
 8001304:	f029 fd1d 	bl	802ad42 <memset>

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_FMC;
 8001308:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 800130c:	f04f 0300 	mov.w	r3, #0
 8001310:	e9c7 2302 	strd	r2, r3, [r7, #8]
    PeriphClkInitStruct.FmcClockSelection = RCC_FMCCLKSOURCE_D1HCLK;
 8001314:	2300      	movs	r3, #0
 8001316:	653b      	str	r3, [r7, #80]	@ 0x50
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001318:	f107 0308 	add.w	r3, r7, #8
 800131c:	4618      	mov	r0, r3
 800131e:	f013 ff4b 	bl	80151b8 <HAL_RCCEx_PeriphCLKConfig>
 8001322:	4603      	mov	r3, r0
 8001324:	2b00      	cmp	r3, #0
 8001326:	d001      	beq.n	800132c <HAL_FMC_MspInit+0x58>
    {
      Error_Handler();
 8001328:	f7ff fcb0 	bl	8000c8c <Error_Handler>
    }

  /* Peripheral clock enable */
  __HAL_RCC_FMC_CLK_ENABLE();
 800132c:	4b41      	ldr	r3, [pc, #260]	@ (8001434 <HAL_FMC_MspInit+0x160>)
 800132e:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 8001332:	4a40      	ldr	r2, [pc, #256]	@ (8001434 <HAL_FMC_MspInit+0x160>)
 8001334:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8001338:	f8c2 30d4 	str.w	r3, [r2, #212]	@ 0xd4
 800133c:	4b3d      	ldr	r3, [pc, #244]	@ (8001434 <HAL_FMC_MspInit+0x160>)
 800133e:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 8001342:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8001346:	607b      	str	r3, [r7, #4]
 8001348:	687b      	ldr	r3, [r7, #4]
  PE7   ------> FMC_D4
  PE14   ------> FMC_D11
  PH7   ------> FMC_SDCKE1
  PD8   ------> FMC_D13
  */
  GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_0|GPIO_PIN_10|GPIO_PIN_9
 800134a:	f64f 7383 	movw	r3, #65411	@ 0xff83
 800134e:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
                          |GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_15|GPIO_PIN_8
                          |GPIO_PIN_13|GPIO_PIN_7|GPIO_PIN_14;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001352:	2302      	movs	r3, #2
 8001354:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001358:	2300      	movs	r3, #0
 800135a:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800135e:	2303      	movs	r3, #3
 8001360:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8001364:	230c      	movs	r3, #12
 8001366:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800136a:	f107 03cc 	add.w	r3, r7, #204	@ 0xcc
 800136e:	4619      	mov	r1, r3
 8001370:	4831      	ldr	r0, [pc, #196]	@ (8001438 <HAL_FMC_MspInit+0x164>)
 8001372:	f010 f8d1 	bl	8011518 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = GPIO_PIN_15|GPIO_PIN_8|GPIO_PIN_5|GPIO_PIN_4
 8001376:	f248 1333 	movw	r3, #33075	@ 0x8133
 800137a:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
                          |GPIO_PIN_0|GPIO_PIN_1;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800137e:	2302      	movs	r3, #2
 8001380:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001384:	2300      	movs	r3, #0
 8001386:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800138a:	2303      	movs	r3, #3
 800138c:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8001390:	230c      	movs	r3, #12
 8001392:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8001396:	f107 03cc 	add.w	r3, r7, #204	@ 0xcc
 800139a:	4619      	mov	r1, r3
 800139c:	4827      	ldr	r0, [pc, #156]	@ (800143c <HAL_FMC_MspInit+0x168>)
 800139e:	f010 f8bb 	bl	8011518 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_15|GPIO_PIN_14
 80013a2:	f24c 7303 	movw	r3, #50947	@ 0xc703
 80013a6:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
                          |GPIO_PIN_10|GPIO_PIN_9|GPIO_PIN_8;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80013aa:	2302      	movs	r3, #2
 80013ac:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013b0:	2300      	movs	r3, #0
 80013b2:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80013b6:	2303      	movs	r3, #3
 80013b8:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 80013bc:	230c      	movs	r3, #12
 80013be:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80013c2:	f107 03cc 	add.w	r3, r7, #204	@ 0xcc
 80013c6:	4619      	mov	r1, r3
 80013c8:	481d      	ldr	r0, [pc, #116]	@ (8001440 <HAL_FMC_MspInit+0x16c>)
 80013ca:	f010 f8a5 	bl	8011518 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_1|GPIO_PIN_0|GPIO_PIN_3
 80013ce:	f64f 033f 	movw	r3, #63551	@ 0xf83f
 80013d2:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
                          |GPIO_PIN_5|GPIO_PIN_4|GPIO_PIN_13|GPIO_PIN_14
                          |GPIO_PIN_12|GPIO_PIN_15|GPIO_PIN_11;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80013d6:	2302      	movs	r3, #2
 80013d8:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013dc:	2300      	movs	r3, #0
 80013de:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80013e2:	2303      	movs	r3, #3
 80013e4:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 80013e8:	230c      	movs	r3, #12
 80013ea:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 80013ee:	f107 03cc 	add.w	r3, r7, #204	@ 0xcc
 80013f2:	4619      	mov	r1, r3
 80013f4:	4813      	ldr	r0, [pc, #76]	@ (8001444 <HAL_FMC_MspInit+0x170>)
 80013f6:	f010 f88f 	bl	8011518 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 80013fa:	23e0      	movs	r3, #224	@ 0xe0
 80013fc:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001400:	2302      	movs	r3, #2
 8001402:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001406:	2300      	movs	r3, #0
 8001408:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800140c:	2303      	movs	r3, #3
 800140e:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8001412:	230c      	movs	r3, #12
 8001414:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8001418:	f107 03cc 	add.w	r3, r7, #204	@ 0xcc
 800141c:	4619      	mov	r1, r3
 800141e:	480a      	ldr	r0, [pc, #40]	@ (8001448 <HAL_FMC_MspInit+0x174>)
 8001420:	f010 f87a 	bl	8011518 <HAL_GPIO_Init>
 8001424:	e000      	b.n	8001428 <HAL_FMC_MspInit+0x154>
    return;
 8001426:	bf00      	nop

  /* USER CODE BEGIN FMC_MspInit 1 */

  /* USER CODE END FMC_MspInit 1 */
}
 8001428:	37e0      	adds	r7, #224	@ 0xe0
 800142a:	46bd      	mov	sp, r7
 800142c:	bd80      	pop	{r7, pc}
 800142e:	bf00      	nop
 8001430:	24000304 	.word	0x24000304
 8001434:	58024400 	.word	0x58024400
 8001438:	58021000 	.word	0x58021000
 800143c:	58021800 	.word	0x58021800
 8001440:	58020c00 	.word	0x58020c00
 8001444:	58021400 	.word	0x58021400
 8001448:	58021c00 	.word	0x58021c00

0800144c <HAL_SDRAM_MspInit>:

void HAL_SDRAM_MspInit(SDRAM_HandleTypeDef* hsdram){
 800144c:	b580      	push	{r7, lr}
 800144e:	b082      	sub	sp, #8
 8001450:	af00      	add	r7, sp, #0
 8001452:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN SDRAM_MspInit 0 */

  /* USER CODE END SDRAM_MspInit 0 */
  HAL_FMC_MspInit();
 8001454:	f7ff ff3e 	bl	80012d4 <HAL_FMC_MspInit>
  /* USER CODE BEGIN SDRAM_MspInit 1 */

  /* USER CODE END SDRAM_MspInit 1 */
}
 8001458:	bf00      	nop
 800145a:	3708      	adds	r7, #8
 800145c:	46bd      	mov	sp, r7
 800145e:	bd80      	pop	{r7, pc}

08001460 <HAL_FMC_MspDeInit>:

static uint32_t FMC_DeInitialized = 0;

static void HAL_FMC_MspDeInit(void){
 8001460:	b580      	push	{r7, lr}
 8001462:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FMC_MspDeInit 0 */

  /* USER CODE END FMC_MspDeInit 0 */
  if (FMC_DeInitialized) {
 8001464:	4b14      	ldr	r3, [pc, #80]	@ (80014b8 <HAL_FMC_MspDeInit+0x58>)
 8001466:	681b      	ldr	r3, [r3, #0]
 8001468:	2b00      	cmp	r3, #0
 800146a:	d123      	bne.n	80014b4 <HAL_FMC_MspDeInit+0x54>
    return;
  }
  FMC_DeInitialized = 1;
 800146c:	4b12      	ldr	r3, [pc, #72]	@ (80014b8 <HAL_FMC_MspDeInit+0x58>)
 800146e:	2201      	movs	r2, #1
 8001470:	601a      	str	r2, [r3, #0]
  /* Peripheral clock enable */
  __HAL_RCC_FMC_CLK_DISABLE();
 8001472:	4b12      	ldr	r3, [pc, #72]	@ (80014bc <HAL_FMC_MspDeInit+0x5c>)
 8001474:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 8001478:	4a10      	ldr	r2, [pc, #64]	@ (80014bc <HAL_FMC_MspDeInit+0x5c>)
 800147a:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800147e:	f8c2 30d4 	str.w	r3, [r2, #212]	@ 0xd4
  PE7   ------> FMC_D4
  PE14   ------> FMC_D11
  PH7   ------> FMC_SDCKE1
  PD8   ------> FMC_D13
  */
  HAL_GPIO_DeInit(GPIOE, GPIO_PIN_1|GPIO_PIN_0|GPIO_PIN_10|GPIO_PIN_9
 8001482:	f64f 7183 	movw	r1, #65411	@ 0xff83
 8001486:	480e      	ldr	r0, [pc, #56]	@ (80014c0 <HAL_FMC_MspDeInit+0x60>)
 8001488:	f010 f9f6 	bl	8011878 <HAL_GPIO_DeInit>
                          |GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_15|GPIO_PIN_8
                          |GPIO_PIN_13|GPIO_PIN_7|GPIO_PIN_14);

  HAL_GPIO_DeInit(GPIOG, GPIO_PIN_15|GPIO_PIN_8|GPIO_PIN_5|GPIO_PIN_4
 800148c:	f248 1133 	movw	r1, #33075	@ 0x8133
 8001490:	480c      	ldr	r0, [pc, #48]	@ (80014c4 <HAL_FMC_MspDeInit+0x64>)
 8001492:	f010 f9f1 	bl	8011878 <HAL_GPIO_DeInit>
                          |GPIO_PIN_0|GPIO_PIN_1);

  HAL_GPIO_DeInit(GPIOD, GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_15|GPIO_PIN_14
 8001496:	f24c 7103 	movw	r1, #50947	@ 0xc703
 800149a:	480b      	ldr	r0, [pc, #44]	@ (80014c8 <HAL_FMC_MspDeInit+0x68>)
 800149c:	f010 f9ec 	bl	8011878 <HAL_GPIO_DeInit>
                          |GPIO_PIN_10|GPIO_PIN_9|GPIO_PIN_8);

  HAL_GPIO_DeInit(GPIOF, GPIO_PIN_2|GPIO_PIN_1|GPIO_PIN_0|GPIO_PIN_3
 80014a0:	f64f 013f 	movw	r1, #63551	@ 0xf83f
 80014a4:	4809      	ldr	r0, [pc, #36]	@ (80014cc <HAL_FMC_MspDeInit+0x6c>)
 80014a6:	f010 f9e7 	bl	8011878 <HAL_GPIO_DeInit>
                          |GPIO_PIN_5|GPIO_PIN_4|GPIO_PIN_13|GPIO_PIN_14
                          |GPIO_PIN_12|GPIO_PIN_15|GPIO_PIN_11);

  HAL_GPIO_DeInit(GPIOH, GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7);
 80014aa:	21e0      	movs	r1, #224	@ 0xe0
 80014ac:	4808      	ldr	r0, [pc, #32]	@ (80014d0 <HAL_FMC_MspDeInit+0x70>)
 80014ae:	f010 f9e3 	bl	8011878 <HAL_GPIO_DeInit>
 80014b2:	e000      	b.n	80014b6 <HAL_FMC_MspDeInit+0x56>
    return;
 80014b4:	bf00      	nop

  /* USER CODE BEGIN FMC_MspDeInit 1 */

  /* USER CODE END FMC_MspDeInit 1 */
}
 80014b6:	bd80      	pop	{r7, pc}
 80014b8:	24000308 	.word	0x24000308
 80014bc:	58024400 	.word	0x58024400
 80014c0:	58021000 	.word	0x58021000
 80014c4:	58021800 	.word	0x58021800
 80014c8:	58020c00 	.word	0x58020c00
 80014cc:	58021400 	.word	0x58021400
 80014d0:	58021c00 	.word	0x58021c00

080014d4 <HAL_SDRAM_MspDeInit>:

void HAL_SDRAM_MspDeInit(SDRAM_HandleTypeDef* hsdram){
 80014d4:	b580      	push	{r7, lr}
 80014d6:	b082      	sub	sp, #8
 80014d8:	af00      	add	r7, sp, #0
 80014da:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN SDRAM_MspDeInit 0 */

  /* USER CODE END SDRAM_MspDeInit 0 */
  HAL_FMC_MspDeInit();
 80014dc:	f7ff ffc0 	bl	8001460 <HAL_FMC_MspDeInit>
  /* USER CODE BEGIN SDRAM_MspDeInit 1 */

  /* USER CODE END SDRAM_MspDeInit 1 */
}
 80014e0:	bf00      	nop
 80014e2:	3708      	adds	r7, #8
 80014e4:	46bd      	mov	sp, r7
 80014e6:	bd80      	pop	{r7, pc}

080014e8 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80014e8:	b580      	push	{r7, lr}
 80014ea:	b090      	sub	sp, #64	@ 0x40
 80014ec:	af00      	add	r7, sp, #0
 80014ee:	6078      	str	r0, [r7, #4]
  uint32_t              uwTimclock, uwAPB1Prescaler;

  uint32_t              uwPrescalerValue;
  uint32_t              pFLatency;
/*Configure the TIM6 IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80014f0:	687b      	ldr	r3, [r7, #4]
 80014f2:	2b0f      	cmp	r3, #15
 80014f4:	d827      	bhi.n	8001546 <HAL_InitTick+0x5e>
  {
  HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority ,0U);
 80014f6:	2200      	movs	r2, #0
 80014f8:	6879      	ldr	r1, [r7, #4]
 80014fa:	2036      	movs	r0, #54	@ 0x36
 80014fc:	f00f fcf4 	bl	8010ee8 <HAL_NVIC_SetPriority>

  /* Enable the TIM6 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8001500:	2036      	movs	r0, #54	@ 0x36
 8001502:	f00f fd0b 	bl	8010f1c <HAL_NVIC_EnableIRQ>
    uwTickPrio = TickPriority;
 8001506:	4a29      	ldr	r2, [pc, #164]	@ (80015ac <HAL_InitTick+0xc4>)
 8001508:	687b      	ldr	r3, [r7, #4]
 800150a:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 800150c:	4b28      	ldr	r3, [pc, #160]	@ (80015b0 <HAL_InitTick+0xc8>)
 800150e:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8001512:	4a27      	ldr	r2, [pc, #156]	@ (80015b0 <HAL_InitTick+0xc8>)
 8001514:	f043 0310 	orr.w	r3, r3, #16
 8001518:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 800151c:	4b24      	ldr	r3, [pc, #144]	@ (80015b0 <HAL_InitTick+0xc8>)
 800151e:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8001522:	f003 0310 	and.w	r3, r3, #16
 8001526:	60fb      	str	r3, [r7, #12]
 8001528:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 800152a:	f107 0210 	add.w	r2, r7, #16
 800152e:	f107 0314 	add.w	r3, r7, #20
 8001532:	4611      	mov	r1, r2
 8001534:	4618      	mov	r0, r3
 8001536:	f013 fdfd 	bl	8015134 <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 800153a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800153c:	63bb      	str	r3, [r7, #56]	@ 0x38
  /* Compute TIM6 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 800153e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8001540:	2b00      	cmp	r3, #0
 8001542:	d106      	bne.n	8001552 <HAL_InitTick+0x6a>
 8001544:	e001      	b.n	800154a <HAL_InitTick+0x62>
    return HAL_ERROR;
 8001546:	2301      	movs	r3, #1
 8001548:	e02b      	b.n	80015a2 <HAL_InitTick+0xba>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 800154a:	f013 fdc7 	bl	80150dc <HAL_RCC_GetPCLK1Freq>
 800154e:	63f8      	str	r0, [r7, #60]	@ 0x3c
 8001550:	e004      	b.n	800155c <HAL_InitTick+0x74>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 8001552:	f013 fdc3 	bl	80150dc <HAL_RCC_GetPCLK1Freq>
 8001556:	4603      	mov	r3, r0
 8001558:	005b      	lsls	r3, r3, #1
 800155a:	63fb      	str	r3, [r7, #60]	@ 0x3c
  }

  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 800155c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800155e:	4a15      	ldr	r2, [pc, #84]	@ (80015b4 <HAL_InitTick+0xcc>)
 8001560:	fba2 2303 	umull	r2, r3, r2, r3
 8001564:	0c9b      	lsrs	r3, r3, #18
 8001566:	3b01      	subs	r3, #1
 8001568:	637b      	str	r3, [r7, #52]	@ 0x34

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 800156a:	4b13      	ldr	r3, [pc, #76]	@ (80015b8 <HAL_InitTick+0xd0>)
 800156c:	4a13      	ldr	r2, [pc, #76]	@ (80015bc <HAL_InitTick+0xd4>)
 800156e:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 8001570:	4b11      	ldr	r3, [pc, #68]	@ (80015b8 <HAL_InitTick+0xd0>)
 8001572:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8001576:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 8001578:	4a0f      	ldr	r2, [pc, #60]	@ (80015b8 <HAL_InitTick+0xd0>)
 800157a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800157c:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 800157e:	4b0e      	ldr	r3, [pc, #56]	@ (80015b8 <HAL_InitTick+0xd0>)
 8001580:	2200      	movs	r2, #0
 8001582:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001584:	4b0c      	ldr	r3, [pc, #48]	@ (80015b8 <HAL_InitTick+0xd0>)
 8001586:	2200      	movs	r2, #0
 8001588:	609a      	str	r2, [r3, #8]

  if(HAL_TIM_Base_Init(&htim6) == HAL_OK)
 800158a:	480b      	ldr	r0, [pc, #44]	@ (80015b8 <HAL_InitTick+0xd0>)
 800158c:	f015 fa37 	bl	80169fe <HAL_TIM_Base_Init>
 8001590:	4603      	mov	r3, r0
 8001592:	2b00      	cmp	r3, #0
 8001594:	d104      	bne.n	80015a0 <HAL_InitTick+0xb8>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim6);
 8001596:	4808      	ldr	r0, [pc, #32]	@ (80015b8 <HAL_InitTick+0xd0>)
 8001598:	f015 fa88 	bl	8016aac <HAL_TIM_Base_Start_IT>
 800159c:	4603      	mov	r3, r0
 800159e:	e000      	b.n	80015a2 <HAL_InitTick+0xba>
  }

  /* Return function status */
  return HAL_ERROR;
 80015a0:	2301      	movs	r3, #1
}
 80015a2:	4618      	mov	r0, r3
 80015a4:	3740      	adds	r7, #64	@ 0x40
 80015a6:	46bd      	mov	sp, r7
 80015a8:	bd80      	pop	{r7, pc}
 80015aa:	bf00      	nop
 80015ac:	24000050 	.word	0x24000050
 80015b0:	58024400 	.word	0x58024400
 80015b4:	431bde83 	.word	0x431bde83
 80015b8:	2400030c 	.word	0x2400030c
 80015bc:	40001000 	.word	0x40001000

080015c0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80015c0:	b480      	push	{r7}
 80015c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80015c4:	bf00      	nop
 80015c6:	e7fd      	b.n	80015c4 <NMI_Handler+0x4>

080015c8 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80015c8:	b480      	push	{r7}
 80015ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80015cc:	bf00      	nop
 80015ce:	e7fd      	b.n	80015cc <HardFault_Handler+0x4>

080015d0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80015d0:	b480      	push	{r7}
 80015d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80015d4:	bf00      	nop
 80015d6:	e7fd      	b.n	80015d4 <MemManage_Handler+0x4>

080015d8 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80015d8:	b480      	push	{r7}
 80015da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80015dc:	bf00      	nop
 80015de:	e7fd      	b.n	80015dc <BusFault_Handler+0x4>

080015e0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80015e0:	b480      	push	{r7}
 80015e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80015e4:	bf00      	nop
 80015e6:	e7fd      	b.n	80015e4 <UsageFault_Handler+0x4>

080015e8 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80015e8:	b480      	push	{r7}
 80015ea:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80015ec:	bf00      	nop
 80015ee:	46bd      	mov	sp, r7
 80015f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015f4:	4770      	bx	lr
	...

080015f8 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1_CH1 and DAC1_CH2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 80015f8:	b580      	push	{r7, lr}
 80015fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 80015fc:	4802      	ldr	r0, [pc, #8]	@ (8001608 <TIM6_DAC_IRQHandler+0x10>)
 80015fe:	f015 facd 	bl	8016b9c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8001602:	bf00      	nop
 8001604:	bd80      	pop	{r7, pc}
 8001606:	bf00      	nop
 8001608:	2400030c 	.word	0x2400030c

0800160c <LTDC_IRQHandler>:

/**
  * @brief This function handles LTDC global interrupt.
  */
void LTDC_IRQHandler(void)
{
 800160c:	b580      	push	{r7, lr}
 800160e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN LTDC_IRQn 0 */

  /* USER CODE END LTDC_IRQn 0 */
  HAL_LTDC_IRQHandler(&hltdc);
 8001610:	4802      	ldr	r0, [pc, #8]	@ (800161c <LTDC_IRQHandler+0x10>)
 8001612:	f011 f9d7 	bl	80129c4 <HAL_LTDC_IRQHandler>
  /* USER CODE BEGIN LTDC_IRQn 1 */

  /* USER CODE END LTDC_IRQn 1 */
}
 8001616:	bf00      	nop
 8001618:	bd80      	pop	{r7, pc}
 800161a:	bf00      	nop
 800161c:	240001d4 	.word	0x240001d4

08001620 <DMA2D_IRQHandler>:

/**
  * @brief This function handles DMA2D global interrupt.
  */
void DMA2D_IRQHandler(void)
{
 8001620:	b580      	push	{r7, lr}
 8001622:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2D_IRQn 0 */

  /* USER CODE END DMA2D_IRQn 0 */
  HAL_DMA2D_IRQHandler(&hdma2d);
 8001624:	4802      	ldr	r0, [pc, #8]	@ (8001630 <DMA2D_IRQHandler+0x10>)
 8001626:	f00f fe67 	bl	80112f8 <HAL_DMA2D_IRQHandler>
  /* USER CODE BEGIN DMA2D_IRQn 1 */

  /* USER CODE END DMA2D_IRQn 1 */
}
 800162a:	bf00      	nop
 800162c:	bd80      	pop	{r7, pc}
 800162e:	bf00      	nop
 8001630:	2400016c 	.word	0x2400016c

08001634 <QUADSPI_IRQHandler>:

/**
  * @brief This function handles QUADSPI global interrupt.
  */
void QUADSPI_IRQHandler(void)
{
 8001634:	b580      	push	{r7, lr}
 8001636:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN QUADSPI_IRQn 0 */

  /* USER CODE END QUADSPI_IRQn 0 */
  HAL_QSPI_IRQHandler(&hqspi);
 8001638:	4802      	ldr	r0, [pc, #8]	@ (8001644 <QUADSPI_IRQHandler+0x10>)
 800163a:	f011 febd 	bl	80133b8 <HAL_QSPI_IRQHandler>
  /* USER CODE BEGIN QUADSPI_IRQn 1 */

  /* USER CODE END QUADSPI_IRQn 1 */
}
 800163e:	bf00      	nop
 8001640:	bd80      	pop	{r7, pc}
 8001642:	bf00      	nop
 8001644:	2400027c 	.word	0x2400027c

08001648 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001648:	b480      	push	{r7}
 800164a:	af00      	add	r7, sp, #0
	return 1;
 800164c:	2301      	movs	r3, #1
}
 800164e:	4618      	mov	r0, r3
 8001650:	46bd      	mov	sp, r7
 8001652:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001656:	4770      	bx	lr

08001658 <_kill>:

int _kill(int pid, int sig)
{
 8001658:	b580      	push	{r7, lr}
 800165a:	b082      	sub	sp, #8
 800165c:	af00      	add	r7, sp, #0
 800165e:	6078      	str	r0, [r7, #4]
 8001660:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8001662:	f029 fc67 	bl	802af34 <__errno>
 8001666:	4603      	mov	r3, r0
 8001668:	2216      	movs	r2, #22
 800166a:	601a      	str	r2, [r3, #0]
	return -1;
 800166c:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001670:	4618      	mov	r0, r3
 8001672:	3708      	adds	r7, #8
 8001674:	46bd      	mov	sp, r7
 8001676:	bd80      	pop	{r7, pc}

08001678 <_exit>:

void _exit (int status)
{
 8001678:	b580      	push	{r7, lr}
 800167a:	b082      	sub	sp, #8
 800167c:	af00      	add	r7, sp, #0
 800167e:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8001680:	f04f 31ff 	mov.w	r1, #4294967295
 8001684:	6878      	ldr	r0, [r7, #4]
 8001686:	f7ff ffe7 	bl	8001658 <_kill>
	while (1) {}		/* Make sure we hang here */
 800168a:	bf00      	nop
 800168c:	e7fd      	b.n	800168a <_exit+0x12>

0800168e <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 800168e:	b580      	push	{r7, lr}
 8001690:	b086      	sub	sp, #24
 8001692:	af00      	add	r7, sp, #0
 8001694:	60f8      	str	r0, [r7, #12]
 8001696:	60b9      	str	r1, [r7, #8]
 8001698:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800169a:	2300      	movs	r3, #0
 800169c:	617b      	str	r3, [r7, #20]
 800169e:	e00a      	b.n	80016b6 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 80016a0:	f3af 8000 	nop.w
 80016a4:	4601      	mov	r1, r0
 80016a6:	68bb      	ldr	r3, [r7, #8]
 80016a8:	1c5a      	adds	r2, r3, #1
 80016aa:	60ba      	str	r2, [r7, #8]
 80016ac:	b2ca      	uxtb	r2, r1
 80016ae:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80016b0:	697b      	ldr	r3, [r7, #20]
 80016b2:	3301      	adds	r3, #1
 80016b4:	617b      	str	r3, [r7, #20]
 80016b6:	697a      	ldr	r2, [r7, #20]
 80016b8:	687b      	ldr	r3, [r7, #4]
 80016ba:	429a      	cmp	r2, r3
 80016bc:	dbf0      	blt.n	80016a0 <_read+0x12>
	}

return len;
 80016be:	687b      	ldr	r3, [r7, #4]
}
 80016c0:	4618      	mov	r0, r3
 80016c2:	3718      	adds	r7, #24
 80016c4:	46bd      	mov	sp, r7
 80016c6:	bd80      	pop	{r7, pc}

080016c8 <_close>:
	}
	return len;
}

int _close(int file)
{
 80016c8:	b480      	push	{r7}
 80016ca:	b083      	sub	sp, #12
 80016cc:	af00      	add	r7, sp, #0
 80016ce:	6078      	str	r0, [r7, #4]
	return -1;
 80016d0:	f04f 33ff 	mov.w	r3, #4294967295
}
 80016d4:	4618      	mov	r0, r3
 80016d6:	370c      	adds	r7, #12
 80016d8:	46bd      	mov	sp, r7
 80016da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016de:	4770      	bx	lr

080016e0 <_fstat>:


int _fstat(int file, struct stat *st)
{
 80016e0:	b480      	push	{r7}
 80016e2:	b083      	sub	sp, #12
 80016e4:	af00      	add	r7, sp, #0
 80016e6:	6078      	str	r0, [r7, #4]
 80016e8:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 80016ea:	683b      	ldr	r3, [r7, #0]
 80016ec:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 80016f0:	605a      	str	r2, [r3, #4]
	return 0;
 80016f2:	2300      	movs	r3, #0
}
 80016f4:	4618      	mov	r0, r3
 80016f6:	370c      	adds	r7, #12
 80016f8:	46bd      	mov	sp, r7
 80016fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016fe:	4770      	bx	lr

08001700 <_isatty>:

int _isatty(int file)
{
 8001700:	b480      	push	{r7}
 8001702:	b083      	sub	sp, #12
 8001704:	af00      	add	r7, sp, #0
 8001706:	6078      	str	r0, [r7, #4]
	return 1;
 8001708:	2301      	movs	r3, #1
}
 800170a:	4618      	mov	r0, r3
 800170c:	370c      	adds	r7, #12
 800170e:	46bd      	mov	sp, r7
 8001710:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001714:	4770      	bx	lr

08001716 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001716:	b480      	push	{r7}
 8001718:	b085      	sub	sp, #20
 800171a:	af00      	add	r7, sp, #0
 800171c:	60f8      	str	r0, [r7, #12]
 800171e:	60b9      	str	r1, [r7, #8]
 8001720:	607a      	str	r2, [r7, #4]
	return 0;
 8001722:	2300      	movs	r3, #0
}
 8001724:	4618      	mov	r0, r3
 8001726:	3714      	adds	r7, #20
 8001728:	46bd      	mov	sp, r7
 800172a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800172e:	4770      	bx	lr

08001730 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001730:	b580      	push	{r7, lr}
 8001732:	b086      	sub	sp, #24
 8001734:	af00      	add	r7, sp, #0
 8001736:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001738:	4a14      	ldr	r2, [pc, #80]	@ (800178c <_sbrk+0x5c>)
 800173a:	4b15      	ldr	r3, [pc, #84]	@ (8001790 <_sbrk+0x60>)
 800173c:	1ad3      	subs	r3, r2, r3
 800173e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001740:	697b      	ldr	r3, [r7, #20]
 8001742:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001744:	4b13      	ldr	r3, [pc, #76]	@ (8001794 <_sbrk+0x64>)
 8001746:	681b      	ldr	r3, [r3, #0]
 8001748:	2b00      	cmp	r3, #0
 800174a:	d102      	bne.n	8001752 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800174c:	4b11      	ldr	r3, [pc, #68]	@ (8001794 <_sbrk+0x64>)
 800174e:	4a12      	ldr	r2, [pc, #72]	@ (8001798 <_sbrk+0x68>)
 8001750:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001752:	4b10      	ldr	r3, [pc, #64]	@ (8001794 <_sbrk+0x64>)
 8001754:	681a      	ldr	r2, [r3, #0]
 8001756:	687b      	ldr	r3, [r7, #4]
 8001758:	4413      	add	r3, r2
 800175a:	693a      	ldr	r2, [r7, #16]
 800175c:	429a      	cmp	r2, r3
 800175e:	d207      	bcs.n	8001770 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001760:	f029 fbe8 	bl	802af34 <__errno>
 8001764:	4603      	mov	r3, r0
 8001766:	220c      	movs	r2, #12
 8001768:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800176a:	f04f 33ff 	mov.w	r3, #4294967295
 800176e:	e009      	b.n	8001784 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001770:	4b08      	ldr	r3, [pc, #32]	@ (8001794 <_sbrk+0x64>)
 8001772:	681b      	ldr	r3, [r3, #0]
 8001774:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001776:	4b07      	ldr	r3, [pc, #28]	@ (8001794 <_sbrk+0x64>)
 8001778:	681a      	ldr	r2, [r3, #0]
 800177a:	687b      	ldr	r3, [r7, #4]
 800177c:	4413      	add	r3, r2
 800177e:	4a05      	ldr	r2, [pc, #20]	@ (8001794 <_sbrk+0x64>)
 8001780:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001782:	68fb      	ldr	r3, [r7, #12]
}
 8001784:	4618      	mov	r0, r3
 8001786:	3718      	adds	r7, #24
 8001788:	46bd      	mov	sp, r7
 800178a:	bd80      	pop	{r7, pc}
 800178c:	24080000 	.word	0x24080000
 8001790:	00001000 	.word	0x00001000
 8001794:	24000358 	.word	0x24000358
 8001798:	2400bc60 	.word	0x2400bc60

0800179c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 800179c:	f8df d034 	ldr.w	sp, [pc, #52]	@ 80017d4 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit
 80017a0:	f00c fe2c 	bl	800e3fc <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80017a4:	480c      	ldr	r0, [pc, #48]	@ (80017d8 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 80017a6:	490d      	ldr	r1, [pc, #52]	@ (80017dc <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 80017a8:	4a0d      	ldr	r2, [pc, #52]	@ (80017e0 <LoopFillZerobss+0x1a>)
  movs r3, #0
 80017aa:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80017ac:	e002      	b.n	80017b4 <LoopCopyDataInit>

080017ae <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80017ae:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80017b0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80017b2:	3304      	adds	r3, #4

080017b4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80017b4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80017b6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80017b8:	d3f9      	bcc.n	80017ae <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80017ba:	4a0a      	ldr	r2, [pc, #40]	@ (80017e4 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 80017bc:	4c0a      	ldr	r4, [pc, #40]	@ (80017e8 <LoopFillZerobss+0x22>)
  movs r3, #0
 80017be:	2300      	movs	r3, #0
  b LoopFillZerobss
 80017c0:	e001      	b.n	80017c6 <LoopFillZerobss>

080017c2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80017c2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80017c4:	3204      	adds	r2, #4

080017c6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80017c6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80017c8:	d3fb      	bcc.n	80017c2 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80017ca:	f029 fbb9 	bl	802af40 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80017ce:	f7fe fe63 	bl	8000498 <main>
  bx  lr
 80017d2:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 80017d4:	24080000 	.word	0x24080000
  ldr r0, =_sdata
 80017d8:	24000000 	.word	0x24000000
  ldr r1, =_edata
 80017dc:	2400012c 	.word	0x2400012c
  ldr r2, =_sidata
 80017e0:	080303a0 	.word	0x080303a0
  ldr r2, =_sbss
 80017e4:	2400012c 	.word	0x2400012c
  ldr r4, =_ebss
 80017e8:	2400bc60 	.word	0x2400bc60

080017ec <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80017ec:	e7fe      	b.n	80017ec <ADC3_IRQHandler>

080017ee <MX_TouchGFX_Init>:

/**
 * Initialize TouchGFX application
 */
void MX_TouchGFX_Init(void)
{
 80017ee:	b580      	push	{r7, lr}
 80017f0:	af00      	add	r7, sp, #0
  // Calling forward to touchgfx_init in C++ domain
  touchgfx_init();
 80017f2:	f001 fc5f 	bl	80030b4 <touchgfx_init>
}
 80017f6:	bf00      	nop
 80017f8:	bd80      	pop	{r7, pc}

080017fa <TouchGFX_Task>:

/**
 * TouchGFX application thread
 */
void TouchGFX_Task(void *argument)
{
 80017fa:	b580      	push	{r7, lr}
 80017fc:	b082      	sub	sp, #8
 80017fe:	af00      	add	r7, sp, #0
 8001800:	6078      	str	r0, [r7, #4]
  // Calling forward to touchgfx_taskEntry in C++ domain
  touchgfx_taskEntry();
 8001802:	f001 fc81 	bl	8003108 <touchgfx_taskEntry>
}
 8001806:	bf00      	nop
 8001808:	3708      	adds	r7, #8
 800180a:	46bd      	mov	sp, r7
 800180c:	bd80      	pop	{r7, pc}
	...

08001810 <_ZN8touchgfx15TouchControllerD1Ev>:
/** Basic Touch Controller interface. */
class TouchController
{
public:
    /** Finalizes an instance of the TouchController class. */
    virtual ~TouchController()
 8001810:	b480      	push	{r7}
 8001812:	b083      	sub	sp, #12
 8001814:	af00      	add	r7, sp, #0
 8001816:	6078      	str	r0, [r7, #4]
    {
 8001818:	4a04      	ldr	r2, [pc, #16]	@ (800182c <_ZN8touchgfx15TouchControllerD1Ev+0x1c>)
 800181a:	687b      	ldr	r3, [r7, #4]
 800181c:	601a      	str	r2, [r3, #0]
    }
 800181e:	687b      	ldr	r3, [r7, #4]
 8001820:	4618      	mov	r0, r3
 8001822:	370c      	adds	r7, #12
 8001824:	46bd      	mov	sp, r7
 8001826:	f85d 7b04 	ldr.w	r7, [sp], #4
 800182a:	4770      	bx	lr
 800182c:	0802c7a8 	.word	0x0802c7a8

08001830 <_ZN8touchgfx15TouchControllerD0Ev>:
    virtual ~TouchController()
 8001830:	b580      	push	{r7, lr}
 8001832:	b082      	sub	sp, #8
 8001834:	af00      	add	r7, sp, #0
 8001836:	6078      	str	r0, [r7, #4]
    }
 8001838:	6878      	ldr	r0, [r7, #4]
 800183a:	f7ff ffe9 	bl	8001810 <_ZN8touchgfx15TouchControllerD1Ev>
 800183e:	2104      	movs	r1, #4
 8001840:	6878      	ldr	r0, [r7, #4]
 8001842:	f029 f848 	bl	802a8d6 <_ZdlPvj>
 8001846:	687b      	ldr	r3, [r7, #4]
 8001848:	4618      	mov	r0, r3
 800184a:	3708      	adds	r7, #8
 800184c:	46bd      	mov	sp, r7
 800184e:	bd80      	pop	{r7, pc}

08001850 <_ZN20STM32TouchController4initEv>:

#include <STM32TouchController.hpp>
#include "stm32h745i_touchcontroller.hpp"

void STM32TouchController::init()
{
 8001850:	b580      	push	{r7, lr}
 8001852:	b082      	sub	sp, #8
 8001854:	af00      	add	r7, sp, #0
 8001856:	6078      	str	r0, [r7, #4]
    /**
     * Initialize touch controller and driver
     *
     */
    STM32H745ITouchController::init();
 8001858:	f000 faa8 	bl	8001dac <_ZN25STM32H745ITouchController4initEv>
}
 800185c:	bf00      	nop
 800185e:	3708      	adds	r7, #8
 8001860:	46bd      	mov	sp, r7
 8001862:	bd80      	pop	{r7, pc}

08001864 <_ZN20STM32TouchController11sampleTouchERlS0_>:

bool STM32TouchController::sampleTouch(int32_t& x, int32_t& y)
{
 8001864:	b580      	push	{r7, lr}
 8001866:	b084      	sub	sp, #16
 8001868:	af00      	add	r7, sp, #0
 800186a:	60f8      	str	r0, [r7, #12]
 800186c:	60b9      	str	r1, [r7, #8]
 800186e:	607a      	str	r2, [r7, #4]
     *
     * This function is called by the TouchGFX framework.
     * By default sampleTouch is called every tick, this can be adjusted by HAL::setTouchSampleRate(int8_t);
     *
     */
    return STM32H745ITouchController::sampleTouch(x, y);
 8001870:	6879      	ldr	r1, [r7, #4]
 8001872:	68b8      	ldr	r0, [r7, #8]
 8001874:	f000 fabe 	bl	8001df4 <_ZN25STM32H745ITouchController11sampleTouchERlS0_>
 8001878:	4603      	mov	r3, r0
}
 800187a:	4618      	mov	r0, r3
 800187c:	3710      	adds	r7, #16
 800187e:	46bd      	mov	sp, r7
 8001880:	bd80      	pop	{r7, pc}
	...

08001884 <_ZN20STM32TouchControllerD1Ev>:
 * @brief This class specializes TouchController Interface.
 *
 * @sa touchgfx::TouchController
 */

class STM32TouchController : public touchgfx::TouchController
 8001884:	b580      	push	{r7, lr}
 8001886:	b082      	sub	sp, #8
 8001888:	af00      	add	r7, sp, #0
 800188a:	6078      	str	r0, [r7, #4]
 800188c:	4a05      	ldr	r2, [pc, #20]	@ (80018a4 <_ZN20STM32TouchControllerD1Ev+0x20>)
 800188e:	687b      	ldr	r3, [r7, #4]
 8001890:	601a      	str	r2, [r3, #0]
 8001892:	687b      	ldr	r3, [r7, #4]
 8001894:	4618      	mov	r0, r3
 8001896:	f7ff ffbb 	bl	8001810 <_ZN8touchgfx15TouchControllerD1Ev>
 800189a:	687b      	ldr	r3, [r7, #4]
 800189c:	4618      	mov	r0, r3
 800189e:	3708      	adds	r7, #8
 80018a0:	46bd      	mov	sp, r7
 80018a2:	bd80      	pop	{r7, pc}
 80018a4:	0802c790 	.word	0x0802c790

080018a8 <_ZN20STM32TouchControllerD0Ev>:
 80018a8:	b580      	push	{r7, lr}
 80018aa:	b082      	sub	sp, #8
 80018ac:	af00      	add	r7, sp, #0
 80018ae:	6078      	str	r0, [r7, #4]
 80018b0:	6878      	ldr	r0, [r7, #4]
 80018b2:	f7ff ffe7 	bl	8001884 <_ZN20STM32TouchControllerD1Ev>
 80018b6:	2104      	movs	r1, #4
 80018b8:	6878      	ldr	r0, [r7, #4]
 80018ba:	f029 f80c 	bl	802a8d6 <_ZdlPvj>
 80018be:	687b      	ldr	r3, [r7, #4]
 80018c0:	4618      	mov	r0, r3
 80018c2:	3708      	adds	r7, #8
 80018c4:	46bd      	mov	sp, r7
 80018c6:	bd80      	pop	{r7, pc}

080018c8 <_ZN8touchgfx4GPIO3setENS0_7GPIO_IDE>:

/*
 * Sets a pin high.
 */
void GPIO::set(GPIO_ID id)
{
 80018c8:	b480      	push	{r7}
 80018ca:	b083      	sub	sp, #12
 80018cc:	af00      	add	r7, sp, #0
 80018ce:	4603      	mov	r3, r0
 80018d0:	71fb      	strb	r3, [r7, #7]
    switch (id)
 80018d2:	79fb      	ldrb	r3, [r7, #7]
 80018d4:	2b03      	cmp	r3, #3
 80018d6:	d80c      	bhi.n	80018f2 <_ZN8touchgfx4GPIO3setENS0_7GPIO_IDE+0x2a>
 80018d8:	a201      	add	r2, pc, #4	@ (adr r2, 80018e0 <_ZN8touchgfx4GPIO3setENS0_7GPIO_IDE+0x18>)
 80018da:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80018de:	bf00      	nop
 80018e0:	080018f1 	.word	0x080018f1
 80018e4:	080018f1 	.word	0x080018f1
 80018e8:	080018f1 	.word	0x080018f1
 80018ec:	080018f1 	.word	0x080018f1
    {
    case GPIO::VSYNC_FREQ:
#if defined(VSYNC_FREQ_GPIO_Port) && defined(VSYNC_FREQ_Pin)
        HAL_GPIO_WritePin(VSYNC_FREQ_GPIO_Port, VSYNC_FREQ_Pin, M_GPIO_PIN_SET(id));
#endif
        break;
 80018f0:	bf00      	nop
#if defined(MCU_ACTIVE_GPIO_Port) && defined(MCU_ACTIVE_Pin)
        HAL_GPIO_WritePin(MCU_ACTIVE_GPIO_Port, MCU_ACTIVE_Pin, M_GPIO_PIN_SET(id));
#endif
        break;
    }
}
 80018f2:	bf00      	nop
 80018f4:	370c      	adds	r7, #12
 80018f6:	46bd      	mov	sp, r7
 80018f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018fc:	4770      	bx	lr
 80018fe:	bf00      	nop

08001900 <_ZN8touchgfx4GPIO5clearENS0_7GPIO_IDE>:

/*
 * Sets a pin low.
 */
void GPIO::clear(GPIO_ID id)
{
 8001900:	b480      	push	{r7}
 8001902:	b083      	sub	sp, #12
 8001904:	af00      	add	r7, sp, #0
 8001906:	4603      	mov	r3, r0
 8001908:	71fb      	strb	r3, [r7, #7]
    switch (id)
 800190a:	79fb      	ldrb	r3, [r7, #7]
 800190c:	2b03      	cmp	r3, #3
 800190e:	d80c      	bhi.n	800192a <_ZN8touchgfx4GPIO5clearENS0_7GPIO_IDE+0x2a>
 8001910:	a201      	add	r2, pc, #4	@ (adr r2, 8001918 <_ZN8touchgfx4GPIO5clearENS0_7GPIO_IDE+0x18>)
 8001912:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001916:	bf00      	nop
 8001918:	08001929 	.word	0x08001929
 800191c:	08001929 	.word	0x08001929
 8001920:	08001929 	.word	0x08001929
 8001924:	08001929 	.word	0x08001929
    {
    case GPIO::VSYNC_FREQ:
#if defined(VSYNC_FREQ_GPIO_Port) && defined(VSYNC_FREQ_Pin)
        HAL_GPIO_WritePin(VSYNC_FREQ_GPIO_Port, VSYNC_FREQ_Pin, M_GPIO_PIN_RESET(id));
#endif
        break;
 8001928:	bf00      	nop
#if defined(MCU_ACTIVE_GPIO_Port) && defined(MCU_ACTIVE_Pin)
        HAL_GPIO_WritePin(MCU_ACTIVE_GPIO_Port, MCU_ACTIVE_Pin, M_GPIO_PIN_RESET(id));
#endif
        break;
    }
}
 800192a:	bf00      	nop
 800192c:	370c      	adds	r7, #12
 800192e:	46bd      	mov	sp, r7
 8001930:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001934:	4770      	bx	lr
 8001936:	bf00      	nop

08001938 <_ZN8touchgfx4GPIO6toggleENS0_7GPIO_IDE>:

/*
 * Toggles a pin.
 */
void GPIO::toggle(GPIO_ID id)
{
 8001938:	b480      	push	{r7}
 800193a:	b083      	sub	sp, #12
 800193c:	af00      	add	r7, sp, #0
 800193e:	4603      	mov	r3, r0
 8001940:	71fb      	strb	r3, [r7, #7]
    switch (id)
 8001942:	79fb      	ldrb	r3, [r7, #7]
 8001944:	2b03      	cmp	r3, #3
 8001946:	d80c      	bhi.n	8001962 <_ZN8touchgfx4GPIO6toggleENS0_7GPIO_IDE+0x2a>
 8001948:	a201      	add	r2, pc, #4	@ (adr r2, 8001950 <_ZN8touchgfx4GPIO6toggleENS0_7GPIO_IDE+0x18>)
 800194a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800194e:	bf00      	nop
 8001950:	08001961 	.word	0x08001961
 8001954:	08001961 	.word	0x08001961
 8001958:	08001961 	.word	0x08001961
 800195c:	08001961 	.word	0x08001961
    {
    case GPIO::VSYNC_FREQ:
#if defined(VSYNC_FREQ_GPIO_Port) && defined(VSYNC_FREQ_Pin)
        HAL_GPIO_TogglePin(VSYNC_FREQ_GPIO_Port, VSYNC_FREQ_Pin);
#endif
        break;
 8001960:	bf00      	nop
#if defined(MCU_ACTIVE_GPIO_Port) && defined(MCU_ACTIVE_Pin)
        HAL_GPIO_TogglePin(MCU_ACTIVE_GPIO_Port, MCU_ACTIVE_Pin);
#endif
        break;
    }
}
 8001962:	bf00      	nop
 8001964:	370c      	adds	r7, #12
 8001966:	46bd      	mov	sp, r7
 8001968:	f85d 7b04 	ldr.w	r7, [sp], #4
 800196c:	4770      	bx	lr
 800196e:	bf00      	nop

08001970 <_ZN8touchgfx3HALD1Ev>:
        DISPLAY_ROTATION = rotate0;
        nativeDisplayOrientation = ((width >= height) ? ORIENTATION_LANDSCAPE : ORIENTATION_PORTRAIT);
    }

    /** Finalizes an instance of the HAL class. */
    virtual ~HAL()
 8001970:	b480      	push	{r7}
 8001972:	b083      	sub	sp, #12
 8001974:	af00      	add	r7, sp, #0
 8001976:	6078      	str	r0, [r7, #4]
    {
 8001978:	4a04      	ldr	r2, [pc, #16]	@ (800198c <_ZN8touchgfx3HALD1Ev+0x1c>)
 800197a:	687b      	ldr	r3, [r7, #4]
 800197c:	601a      	str	r2, [r3, #0]
    }
 800197e:	687b      	ldr	r3, [r7, #4]
 8001980:	4618      	mov	r0, r3
 8001982:	370c      	adds	r7, #12
 8001984:	46bd      	mov	sp, r7
 8001986:	f85d 7b04 	ldr.w	r7, [sp], #4
 800198a:	4770      	bx	lr
 800198c:	0802df80 	.word	0x0802df80

08001990 <_ZN8touchgfx3HALD0Ev>:
    virtual ~HAL()
 8001990:	b580      	push	{r7, lr}
 8001992:	b082      	sub	sp, #8
 8001994:	af00      	add	r7, sp, #0
 8001996:	6078      	str	r0, [r7, #4]
    }
 8001998:	6878      	ldr	r0, [r7, #4]
 800199a:	f7ff ffe9 	bl	8001970 <_ZN8touchgfx3HALD1Ev>
 800199e:	217c      	movs	r1, #124	@ 0x7c
 80019a0:	6878      	ldr	r0, [r7, #4]
 80019a2:	f028 ff98 	bl	802a8d6 <_ZdlPvj>
 80019a6:	687b      	ldr	r3, [r7, #4]
 80019a8:	4618      	mov	r0, r3
 80019aa:	3708      	adds	r7, #8
 80019ac:	46bd      	mov	sp, r7
 80019ae:	bd80      	pop	{r7, pc}

080019b0 <_ZN8touchgfx3HAL21setDisplayOrientationENS_18DisplayOrientationE>:
     *
     * @param  orientation The desired display orientation.
     *
     * @note A screen transition must occur before this takes effect!
     */
    virtual void setDisplayOrientation(DisplayOrientation orientation)
 80019b0:	b480      	push	{r7}
 80019b2:	b083      	sub	sp, #12
 80019b4:	af00      	add	r7, sp, #0
 80019b6:	6078      	str	r0, [r7, #4]
 80019b8:	460b      	mov	r3, r1
 80019ba:	70fb      	strb	r3, [r7, #3]
    {
        requestedOrientation = orientation;
 80019bc:	687b      	ldr	r3, [r7, #4]
 80019be:	78fa      	ldrb	r2, [r7, #3]
 80019c0:	f883 2074 	strb.w	r2, [r3, #116]	@ 0x74
        displayOrientationChangeRequested = true;
 80019c4:	687b      	ldr	r3, [r7, #4]
 80019c6:	2201      	movs	r2, #1
 80019c8:	f883 2075 	strb.w	r2, [r3, #117]	@ 0x75
    }
 80019cc:	bf00      	nop
 80019ce:	370c      	adds	r7, #12
 80019d0:	46bd      	mov	sp, r7
 80019d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019d6:	4770      	bx	lr

080019d8 <_ZN8touchgfx3HAL18setFrameBufferSizeEtt>:
     * @param   width   The width of the framebuffer.
     * @param   height  The height of the framebuffer.
     *
     * @see touchgfx_generic_init
     */
    virtual void setFrameBufferSize(uint16_t width, uint16_t height)
 80019d8:	b580      	push	{r7, lr}
 80019da:	b082      	sub	sp, #8
 80019dc:	af00      	add	r7, sp, #0
 80019de:	6078      	str	r0, [r7, #4]
 80019e0:	460b      	mov	r3, r1
 80019e2:	807b      	strh	r3, [r7, #2]
 80019e4:	4613      	mov	r3, r2
 80019e6:	803b      	strh	r3, [r7, #0]
    {
        assert(width >= DISPLAY_WIDTH && height >= DISPLAY_HEIGHT && "Framebuffer cannot be smaller than display");
 80019e8:	4b0c      	ldr	r3, [pc, #48]	@ (8001a1c <_ZN8touchgfx3HAL18setFrameBufferSizeEtt+0x44>)
 80019ea:	881b      	ldrh	r3, [r3, #0]
 80019ec:	887a      	ldrh	r2, [r7, #2]
 80019ee:	429a      	cmp	r2, r3
 80019f0:	d304      	bcc.n	80019fc <_ZN8touchgfx3HAL18setFrameBufferSizeEtt+0x24>
 80019f2:	4b0b      	ldr	r3, [pc, #44]	@ (8001a20 <_ZN8touchgfx3HAL18setFrameBufferSizeEtt+0x48>)
 80019f4:	881b      	ldrh	r3, [r3, #0]
 80019f6:	883a      	ldrh	r2, [r7, #0]
 80019f8:	429a      	cmp	r2, r3
 80019fa:	d205      	bcs.n	8001a08 <_ZN8touchgfx3HAL18setFrameBufferSizeEtt+0x30>
 80019fc:	4b09      	ldr	r3, [pc, #36]	@ (8001a24 <_ZN8touchgfx3HAL18setFrameBufferSizeEtt+0x4c>)
 80019fe:	4a0a      	ldr	r2, [pc, #40]	@ (8001a28 <_ZN8touchgfx3HAL18setFrameBufferSizeEtt+0x50>)
 8001a00:	219e      	movs	r1, #158	@ 0x9e
 8001a02:	480a      	ldr	r0, [pc, #40]	@ (8001a2c <_ZN8touchgfx3HAL18setFrameBufferSizeEtt+0x54>)
 8001a04:	f028 ff96 	bl	802a934 <__assert_func>
        FRAME_BUFFER_WIDTH = width;
 8001a08:	4a09      	ldr	r2, [pc, #36]	@ (8001a30 <_ZN8touchgfx3HAL18setFrameBufferSizeEtt+0x58>)
 8001a0a:	887b      	ldrh	r3, [r7, #2]
 8001a0c:	8013      	strh	r3, [r2, #0]
        FRAME_BUFFER_HEIGHT = height;
 8001a0e:	4a09      	ldr	r2, [pc, #36]	@ (8001a34 <_ZN8touchgfx3HAL18setFrameBufferSizeEtt+0x5c>)
 8001a10:	883b      	ldrh	r3, [r7, #0]
 8001a12:	8013      	strh	r3, [r2, #0]
    }
 8001a14:	bf00      	nop
 8001a16:	3708      	adds	r7, #8
 8001a18:	46bd      	mov	sp, r7
 8001a1a:	bd80      	pop	{r7, pc}
 8001a1c:	2400b874 	.word	0x2400b874
 8001a20:	2400b876 	.word	0x2400b876
 8001a24:	0802ba54 	.word	0x0802ba54
 8001a28:	0802bab8 	.word	0x0802bab8
 8001a2c:	0802bafc 	.word	0x0802bafc
 8001a30:	2400b87a 	.word	0x2400b87a
 8001a34:	2400b87c 	.word	0x2400b87c

08001a38 <_ZN8touchgfx3HAL11getBlitCapsEv>:
     *
     * @return a bitmask of the supported blitcaps.
     *
     * @see enableDMAAcceleration
     */
    virtual BlitOperations getBlitCaps()
 8001a38:	b580      	push	{r7, lr}
 8001a3a:	b082      	sub	sp, #8
 8001a3c:	af00      	add	r7, sp, #0
 8001a3e:	6078      	str	r0, [r7, #4]
    {
        if (useDMAAcceleration)
 8001a40:	687b      	ldr	r3, [r7, #4]
 8001a42:	f893 3077 	ldrb.w	r3, [r3, #119]	@ 0x77
 8001a46:	2b00      	cmp	r3, #0
 8001a48:	d009      	beq.n	8001a5e <_ZN8touchgfx3HAL11getBlitCapsEv+0x26>
        {
            return dma.getBlitCaps();
 8001a4a:	687b      	ldr	r3, [r7, #4]
 8001a4c:	685a      	ldr	r2, [r3, #4]
 8001a4e:	687b      	ldr	r3, [r7, #4]
 8001a50:	685b      	ldr	r3, [r3, #4]
 8001a52:	681b      	ldr	r3, [r3, #0]
 8001a54:	681b      	ldr	r3, [r3, #0]
 8001a56:	4610      	mov	r0, r2
 8001a58:	4798      	blx	r3
 8001a5a:	4603      	mov	r3, r0
 8001a5c:	e000      	b.n	8001a60 <_ZN8touchgfx3HAL11getBlitCapsEv+0x28>
        }
        return static_cast<BlitOperations>(0);
 8001a5e:	2300      	movs	r3, #0
    }
 8001a60:	4618      	mov	r0, r3
 8001a62:	3708      	adds	r7, #8
 8001a64:	46bd      	mov	sp, r7
 8001a66:	bd80      	pop	{r7, pc}

08001a68 <_ZN8touchgfx3HAL15backPorchExitedEv>:
    /**
     * Has to be called from within the LCD IRQ rutine when the Back Porch Exit is reached.
     *
     * Has to be called from within the LCD IRQ rutine when the Back Porch Exit is reached.
     */
    virtual void backPorchExited()
 8001a68:	b580      	push	{r7, lr}
 8001a6a:	b082      	sub	sp, #8
 8001a6c:	af00      	add	r7, sp, #0
 8001a6e:	6078      	str	r0, [r7, #4]
    {
        swapFrameBuffers();
 8001a70:	6878      	ldr	r0, [r7, #4]
 8001a72:	f017 faaf 	bl	8018fd4 <_ZN8touchgfx3HAL16swapFrameBuffersEv>
        tick();
 8001a76:	687b      	ldr	r3, [r7, #4]
 8001a78:	681b      	ldr	r3, [r3, #0]
 8001a7a:	33a4      	adds	r3, #164	@ 0xa4
 8001a7c:	681b      	ldr	r3, [r3, #0]
 8001a7e:	6878      	ldr	r0, [r7, #4]
 8001a80:	4798      	blx	r3
    }
 8001a82:	bf00      	nop
 8001a84:	3708      	adds	r7, #8
 8001a86:	46bd      	mov	sp, r7
 8001a88:	bd80      	pop	{r7, pc}

08001a8a <_ZN8touchgfx3HAL9sampleKeyERh>:
     * @param [out] key Output parameter that will be set to the key value if a keypress was
     *                  detected.
     *
     * @return True if a keypress was detected and the "key" parameter is set to a value.
     */
    virtual bool sampleKey(uint8_t& key)
 8001a8a:	b480      	push	{r7}
 8001a8c:	b083      	sub	sp, #12
 8001a8e:	af00      	add	r7, sp, #0
 8001a90:	6078      	str	r0, [r7, #4]
 8001a92:	6039      	str	r1, [r7, #0]
    {
        return false;
 8001a94:	2300      	movs	r3, #0
    }
 8001a96:	4618      	mov	r0, r3
 8001a98:	370c      	adds	r7, #12
 8001a9a:	46bd      	mov	sp, r7
 8001a9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001aa0:	4770      	bx	lr
	...

08001aa4 <_ZN8touchgfx3HAL28setFrameBufferStartAddressesEPvS1_S1_>:
     * @param [in] doubleBuffer     If non-null, buffer for double buffer data. If null double
     *                              buffering is disabled.
     * @param [in] animationStorage If non-null, the animation storage. If null animation storage
     *                              is disabled.
     */
    virtual void setFrameBufferStartAddresses(void* frameBuffer, void* doubleBuffer, void* animationStorage)
 8001aa4:	b580      	push	{r7, lr}
 8001aa6:	b084      	sub	sp, #16
 8001aa8:	af00      	add	r7, sp, #0
 8001aaa:	60f8      	str	r0, [r7, #12]
 8001aac:	60b9      	str	r1, [r7, #8]
 8001aae:	607a      	str	r2, [r7, #4]
 8001ab0:	603b      	str	r3, [r7, #0]
    {
        assert(frameBuffer != 0 && "A framebuffer address must be set");
 8001ab2:	68bb      	ldr	r3, [r7, #8]
 8001ab4:	2b00      	cmp	r3, #0
 8001ab6:	d106      	bne.n	8001ac6 <_ZN8touchgfx3HAL28setFrameBufferStartAddressesEPvS1_S1_+0x22>
 8001ab8:	4b11      	ldr	r3, [pc, #68]	@ (8001b00 <_ZN8touchgfx3HAL28setFrameBufferStartAddressesEPvS1_S1_+0x5c>)
 8001aba:	4a12      	ldr	r2, [pc, #72]	@ (8001b04 <_ZN8touchgfx3HAL28setFrameBufferStartAddressesEPvS1_S1_+0x60>)
 8001abc:	f44f 712b 	mov.w	r1, #684	@ 0x2ac
 8001ac0:	4811      	ldr	r0, [pc, #68]	@ (8001b08 <_ZN8touchgfx3HAL28setFrameBufferStartAddressesEPvS1_S1_+0x64>)
 8001ac2:	f028 ff37 	bl	802a934 <__assert_func>
        frameBuffer0 = reinterpret_cast<uint16_t*>(frameBuffer);
 8001ac6:	68fb      	ldr	r3, [r7, #12]
 8001ac8:	68ba      	ldr	r2, [r7, #8]
 8001aca:	63da      	str	r2, [r3, #60]	@ 0x3c
        frameBuffer1 = reinterpret_cast<uint16_t*>(doubleBuffer);
 8001acc:	68fb      	ldr	r3, [r7, #12]
 8001ace:	687a      	ldr	r2, [r7, #4]
 8001ad0:	641a      	str	r2, [r3, #64]	@ 0x40
        frameBuffer2 = reinterpret_cast<uint16_t*>(animationStorage);
 8001ad2:	68fb      	ldr	r3, [r7, #12]
 8001ad4:	683a      	ldr	r2, [r7, #0]
 8001ad6:	645a      	str	r2, [r3, #68]	@ 0x44
        USE_DOUBLE_BUFFERING = doubleBuffer != 0;
 8001ad8:	687b      	ldr	r3, [r7, #4]
 8001ada:	2b00      	cmp	r3, #0
 8001adc:	bf14      	ite	ne
 8001ade:	2301      	movne	r3, #1
 8001ae0:	2300      	moveq	r3, #0
 8001ae2:	b2da      	uxtb	r2, r3
 8001ae4:	4b09      	ldr	r3, [pc, #36]	@ (8001b0c <_ZN8touchgfx3HAL28setFrameBufferStartAddressesEPvS1_S1_+0x68>)
 8001ae6:	701a      	strb	r2, [r3, #0]
        USE_ANIMATION_STORAGE = animationStorage != 0;
 8001ae8:	683b      	ldr	r3, [r7, #0]
 8001aea:	2b00      	cmp	r3, #0
 8001aec:	bf14      	ite	ne
 8001aee:	2301      	movne	r3, #1
 8001af0:	2300      	moveq	r3, #0
 8001af2:	b2da      	uxtb	r2, r3
 8001af4:	4b06      	ldr	r3, [pc, #24]	@ (8001b10 <_ZN8touchgfx3HAL28setFrameBufferStartAddressesEPvS1_S1_+0x6c>)
 8001af6:	701a      	strb	r2, [r3, #0]
    }
 8001af8:	bf00      	nop
 8001afa:	3710      	adds	r7, #16
 8001afc:	46bd      	mov	sp, r7
 8001afe:	bd80      	pop	{r7, pc}
 8001b00:	0802bb44 	.word	0x0802bb44
 8001b04:	0802bb7c 	.word	0x0802bb7c
 8001b08:	0802bafc 	.word	0x0802bafc
 8001b0c:	2400b87e 	.word	0x2400b87e
 8001b10:	2400b87f 	.word	0x2400b87f

08001b14 <_ZNK8touchgfx3HAL18getFlashDataReaderEv>:
     * Gets the flash data reader. This method must be implemented in
     * subclasses that uses a FlashDataReader object.
     *
     * @return the FlashDataReader.
     */
    virtual FlashDataReader* getFlashDataReader() const
 8001b14:	b480      	push	{r7}
 8001b16:	b083      	sub	sp, #12
 8001b18:	af00      	add	r7, sp, #0
 8001b1a:	6078      	str	r0, [r7, #4]
    {
        return 0;
 8001b1c:	2300      	movs	r3, #0
    }
 8001b1e:	4618      	mov	r0, r3
 8001b20:	370c      	adds	r7, #12
 8001b22:	46bd      	mov	sp, r7
 8001b24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b28:	4770      	bx	lr

08001b2a <_ZN8touchgfx3HAL9taskDelayEt>:
     *
     * @param  ms Number of milliseconds to wait.
     *
     * @see registerTaskDelayFunction
     */
    virtual void taskDelay(uint16_t ms)
 8001b2a:	b580      	push	{r7, lr}
 8001b2c:	b082      	sub	sp, #8
 8001b2e:	af00      	add	r7, sp, #0
 8001b30:	6078      	str	r0, [r7, #4]
 8001b32:	460b      	mov	r3, r1
 8001b34:	807b      	strh	r3, [r7, #2]
    {
        if (taskDelayFunc)
 8001b36:	687b      	ldr	r3, [r7, #4]
 8001b38:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001b3a:	2b00      	cmp	r3, #0
 8001b3c:	d004      	beq.n	8001b48 <_ZN8touchgfx3HAL9taskDelayEt+0x1e>
        {
            taskDelayFunc(ms);
 8001b3e:	687b      	ldr	r3, [r7, #4]
 8001b40:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001b42:	887a      	ldrh	r2, [r7, #2]
 8001b44:	4610      	mov	r0, r2
 8001b46:	4798      	blx	r3
        }
    }
 8001b48:	bf00      	nop
 8001b4a:	3708      	adds	r7, #8
 8001b4c:	46bd      	mov	sp, r7
 8001b4e:	bd80      	pop	{r7, pc}

08001b50 <_ZN8touchgfx3HAL17getTFTCurrentLineEv>:
     * getTFTCurrentLine function is never called and can be disregarded.
     *
     * @return In this default implementation, 0xFFFF is returned to signify "not
     *         implemented".
     */
    virtual uint16_t getTFTCurrentLine()
 8001b50:	b480      	push	{r7}
 8001b52:	b083      	sub	sp, #12
 8001b54:	af00      	add	r7, sp, #0
 8001b56:	6078      	str	r0, [r7, #4]
    {
        return 0xFFFFu;
 8001b58:	f64f 73ff 	movw	r3, #65535	@ 0xffff
    }
 8001b5c:	4618      	mov	r0, r3
 8001b5e:	370c      	adds	r7, #12
 8001b60:	46bd      	mov	sp, r7
 8001b62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b66:	4770      	bx	lr

08001b68 <_ZN8touchgfx3HAL10getDMATypeEv>:
     * Function for obtaining the DMA type of the concrete DMA implementation. As default,
     * will return DMA_TYPE_GENERIC type value.
     *
     * @return a DMAType value of the concrete DMA implementation.
     */
    virtual DMAType getDMAType()
 8001b68:	b580      	push	{r7, lr}
 8001b6a:	b082      	sub	sp, #8
 8001b6c:	af00      	add	r7, sp, #0
 8001b6e:	6078      	str	r0, [r7, #4]
    {
        return dma.getDMAType();
 8001b70:	687b      	ldr	r3, [r7, #4]
 8001b72:	685a      	ldr	r2, [r3, #4]
 8001b74:	687b      	ldr	r3, [r7, #4]
 8001b76:	685b      	ldr	r3, [r3, #4]
 8001b78:	681b      	ldr	r3, [r3, #0]
 8001b7a:	3318      	adds	r3, #24
 8001b7c:	681b      	ldr	r3, [r3, #0]
 8001b7e:	4610      	mov	r0, r2
 8001b80:	4798      	blx	r3
 8001b82:	4603      	mov	r3, r0
    }
 8001b84:	4618      	mov	r0, r3
 8001b86:	3708      	adds	r7, #8
 8001b88:	46bd      	mov	sp, r7
 8001b8a:	bd80      	pop	{r7, pc}

08001b8c <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv>:

    /** Called by the touch driver to indicate that no touch is currently detected. */
    virtual void noTouch();

    /** Perform the actual display orientation change. */
    virtual void performDisplayOrientationChange()
 8001b8c:	b480      	push	{r7}
 8001b8e:	b085      	sub	sp, #20
 8001b90:	af00      	add	r7, sp, #0
 8001b92:	6078      	str	r0, [r7, #4]
    {
        if (requestedOrientation != nativeDisplayOrientation)
 8001b94:	687b      	ldr	r3, [r7, #4]
 8001b96:	f893 2074 	ldrb.w	r2, [r3, #116]	@ 0x74
 8001b9a:	687b      	ldr	r3, [r7, #4]
 8001b9c:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 8001ba0:	429a      	cmp	r2, r3
 8001ba2:	d011      	beq.n	8001bc8 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x3c>
        {
            if (DISPLAY_ROTATION == rotate0)
 8001ba4:	4b14      	ldr	r3, [pc, #80]	@ (8001bf8 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x6c>)
 8001ba6:	781b      	ldrb	r3, [r3, #0]
 8001ba8:	2b00      	cmp	r3, #0
 8001baa:	d11e      	bne.n	8001bea <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x5e>
            {
                const uint16_t tmp = DISPLAY_HEIGHT;
 8001bac:	4b13      	ldr	r3, [pc, #76]	@ (8001bfc <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x70>)
 8001bae:	881b      	ldrh	r3, [r3, #0]
 8001bb0:	81bb      	strh	r3, [r7, #12]
                DISPLAY_HEIGHT = DISPLAY_WIDTH;
 8001bb2:	4b13      	ldr	r3, [pc, #76]	@ (8001c00 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x74>)
 8001bb4:	881a      	ldrh	r2, [r3, #0]
 8001bb6:	4b11      	ldr	r3, [pc, #68]	@ (8001bfc <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x70>)
 8001bb8:	801a      	strh	r2, [r3, #0]
                DISPLAY_WIDTH = tmp;
 8001bba:	4a11      	ldr	r2, [pc, #68]	@ (8001c00 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x74>)
 8001bbc:	89bb      	ldrh	r3, [r7, #12]
 8001bbe:	8013      	strh	r3, [r2, #0]
                DISPLAY_ROTATION = rotate90;
 8001bc0:	4b0d      	ldr	r3, [pc, #52]	@ (8001bf8 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x6c>)
 8001bc2:	2201      	movs	r2, #1
 8001bc4:	701a      	strb	r2, [r3, #0]
            const uint16_t tmp = DISPLAY_HEIGHT;
            DISPLAY_HEIGHT = DISPLAY_WIDTH;
            DISPLAY_WIDTH = tmp;
            DISPLAY_ROTATION = rotate0;
        }
    }
 8001bc6:	e010      	b.n	8001bea <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x5e>
        else if (DISPLAY_ROTATION != rotate0)
 8001bc8:	4b0b      	ldr	r3, [pc, #44]	@ (8001bf8 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x6c>)
 8001bca:	781b      	ldrb	r3, [r3, #0]
 8001bcc:	2b00      	cmp	r3, #0
 8001bce:	d00c      	beq.n	8001bea <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x5e>
            const uint16_t tmp = DISPLAY_HEIGHT;
 8001bd0:	4b0a      	ldr	r3, [pc, #40]	@ (8001bfc <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x70>)
 8001bd2:	881b      	ldrh	r3, [r3, #0]
 8001bd4:	81fb      	strh	r3, [r7, #14]
            DISPLAY_HEIGHT = DISPLAY_WIDTH;
 8001bd6:	4b0a      	ldr	r3, [pc, #40]	@ (8001c00 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x74>)
 8001bd8:	881a      	ldrh	r2, [r3, #0]
 8001bda:	4b08      	ldr	r3, [pc, #32]	@ (8001bfc <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x70>)
 8001bdc:	801a      	strh	r2, [r3, #0]
            DISPLAY_WIDTH = tmp;
 8001bde:	4a08      	ldr	r2, [pc, #32]	@ (8001c00 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x74>)
 8001be0:	89fb      	ldrh	r3, [r7, #14]
 8001be2:	8013      	strh	r3, [r2, #0]
            DISPLAY_ROTATION = rotate0;
 8001be4:	4b04      	ldr	r3, [pc, #16]	@ (8001bf8 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x6c>)
 8001be6:	2200      	movs	r2, #0
 8001be8:	701a      	strb	r2, [r3, #0]
    }
 8001bea:	bf00      	nop
 8001bec:	3714      	adds	r7, #20
 8001bee:	46bd      	mov	sp, r7
 8001bf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bf4:	4770      	bx	lr
 8001bf6:	bf00      	nop
 8001bf8:	2400b878 	.word	0x2400b878
 8001bfc:	2400b876 	.word	0x2400b876
 8001c00:	2400b874 	.word	0x2400b874

08001c04 <_ZN20TouchGFXGeneratedHAL16flushFrameBufferEv>:
     *
     * This specialization is only in place to keep compilers happy. Base impl. will call the
     * Rect version.
     * @see HAL::flushFrameBuffer
     */
    virtual void flushFrameBuffer()
 8001c04:	b580      	push	{r7, lr}
 8001c06:	b082      	sub	sp, #8
 8001c08:	af00      	add	r7, sp, #0
 8001c0a:	6078      	str	r0, [r7, #4]
    {
        HAL::flushFrameBuffer();
 8001c0c:	687b      	ldr	r3, [r7, #4]
 8001c0e:	4618      	mov	r0, r3
 8001c10:	f016 fb95 	bl	801833e <_ZN8touchgfx3HAL16flushFrameBufferEv>
    }
 8001c14:	bf00      	nop
 8001c16:	3708      	adds	r7, #8
 8001c18:	46bd      	mov	sp, r7
 8001c1a:	bd80      	pop	{r7, pc}

08001c1c <_ZN20TouchGFXGeneratedHALD1Ev>:
class TouchGFXGeneratedHAL : public touchgfx::HAL
 8001c1c:	b580      	push	{r7, lr}
 8001c1e:	b082      	sub	sp, #8
 8001c20:	af00      	add	r7, sp, #0
 8001c22:	6078      	str	r0, [r7, #4]
 8001c24:	4a05      	ldr	r2, [pc, #20]	@ (8001c3c <_ZN20TouchGFXGeneratedHALD1Ev+0x20>)
 8001c26:	687b      	ldr	r3, [r7, #4]
 8001c28:	601a      	str	r2, [r3, #0]
 8001c2a:	687b      	ldr	r3, [r7, #4]
 8001c2c:	4618      	mov	r0, r3
 8001c2e:	f7ff fe9f 	bl	8001970 <_ZN8touchgfx3HALD1Ev>
 8001c32:	687b      	ldr	r3, [r7, #4]
 8001c34:	4618      	mov	r0, r3
 8001c36:	3708      	adds	r7, #8
 8001c38:	46bd      	mov	sp, r7
 8001c3a:	bd80      	pop	{r7, pc}
 8001c3c:	0802cb10 	.word	0x0802cb10

08001c40 <_ZN20TouchGFXGeneratedHALD0Ev>:
 8001c40:	b580      	push	{r7, lr}
 8001c42:	b082      	sub	sp, #8
 8001c44:	af00      	add	r7, sp, #0
 8001c46:	6078      	str	r0, [r7, #4]
 8001c48:	6878      	ldr	r0, [r7, #4]
 8001c4a:	f7ff ffe7 	bl	8001c1c <_ZN20TouchGFXGeneratedHALD1Ev>
 8001c4e:	217c      	movs	r1, #124	@ 0x7c
 8001c50:	6878      	ldr	r0, [r7, #4]
 8001c52:	f028 fe40 	bl	802a8d6 <_ZdlPvj>
 8001c56:	687b      	ldr	r3, [r7, #4]
 8001c58:	4618      	mov	r0, r3
 8001c5a:	3708      	adds	r7, #8
 8001c5c:	46bd      	mov	sp, r7
 8001c5e:	bd80      	pop	{r7, pc}

08001c60 <_ZN11TouchGFXHAL16flushFrameBufferEv>:
     *
     * This specialization is only in place to keep compilers happy. Base impl. will call the
     * Rect version.
     * @see HAL::flushFrameBuffer
     */
    virtual void flushFrameBuffer()
 8001c60:	b580      	push	{r7, lr}
 8001c62:	b082      	sub	sp, #8
 8001c64:	af00      	add	r7, sp, #0
 8001c66:	6078      	str	r0, [r7, #4]
    {
        TouchGFXGeneratedHAL::flushFrameBuffer();
 8001c68:	687b      	ldr	r3, [r7, #4]
 8001c6a:	4618      	mov	r0, r3
 8001c6c:	f7ff ffca 	bl	8001c04 <_ZN20TouchGFXGeneratedHAL16flushFrameBufferEv>
    }
 8001c70:	bf00      	nop
 8001c72:	3708      	adds	r7, #8
 8001c74:	46bd      	mov	sp, r7
 8001c76:	bd80      	pop	{r7, pc}

08001c78 <_ZN11TouchGFXHAL10initializeEv>:
/* USER CODE BEGIN TouchGFXHAL.cpp */

using namespace touchgfx;

void TouchGFXHAL::initialize()
{
 8001c78:	b580      	push	{r7, lr}
 8001c7a:	b082      	sub	sp, #8
 8001c7c:	af00      	add	r7, sp, #0
 8001c7e:	6078      	str	r0, [r7, #4]
    //
    // To overwrite the generated implementation, omit call to parent function
    // and implemented needed functionality here.
    // Please note, HAL::initialize() must be called to initialize the framework.

    TouchGFXGeneratedHAL::initialize();
 8001c80:	687b      	ldr	r3, [r7, #4]
 8001c82:	4618      	mov	r0, r3
 8001c84:	f001 fd30 	bl	80036e8 <_ZN20TouchGFXGeneratedHAL10initializeEv>
}
 8001c88:	bf00      	nop
 8001c8a:	3708      	adds	r7, #8
 8001c8c:	46bd      	mov	sp, r7
 8001c8e:	bd80      	pop	{r7, pc}

08001c90 <_ZNK11TouchGFXHAL17getTFTFrameBufferEv>:
 * Gets the frame buffer address used by the TFT controller.
 *
 * @return The address of the frame buffer currently being displayed on the TFT.
 */
uint16_t* TouchGFXHAL::getTFTFrameBuffer() const
{
 8001c90:	b580      	push	{r7, lr}
 8001c92:	b082      	sub	sp, #8
 8001c94:	af00      	add	r7, sp, #0
 8001c96:	6078      	str	r0, [r7, #4]
    // Calling parent implementation of getTFTFrameBuffer().
    //
    // To overwrite the generated implementation, omit call to parent function
    // and implemented needed functionality here.

    return TouchGFXGeneratedHAL::getTFTFrameBuffer();
 8001c98:	687b      	ldr	r3, [r7, #4]
 8001c9a:	4618      	mov	r0, r3
 8001c9c:	f001 fdbc 	bl	8003818 <_ZNK20TouchGFXGeneratedHAL17getTFTFrameBufferEv>
 8001ca0:	4603      	mov	r3, r0
}
 8001ca2:	4618      	mov	r0, r3
 8001ca4:	3708      	adds	r7, #8
 8001ca6:	46bd      	mov	sp, r7
 8001ca8:	bd80      	pop	{r7, pc}

08001caa <_ZN11TouchGFXHAL17setTFTFrameBufferEPt>:
 * Sets the frame buffer address used by the TFT controller.
 *
 * @param [in] address New frame buffer address.
 */
void TouchGFXHAL::setTFTFrameBuffer(uint16_t* address)
{
 8001caa:	b580      	push	{r7, lr}
 8001cac:	b082      	sub	sp, #8
 8001cae:	af00      	add	r7, sp, #0
 8001cb0:	6078      	str	r0, [r7, #4]
 8001cb2:	6039      	str	r1, [r7, #0]
    // Calling parent implementation of setTFTFrameBuffer(uint16_t* address).
    //
    // To overwrite the generated implementation, omit call to parent function
    // and implemented needed functionality here.

    TouchGFXGeneratedHAL::setTFTFrameBuffer(address);
 8001cb4:	687b      	ldr	r3, [r7, #4]
 8001cb6:	6839      	ldr	r1, [r7, #0]
 8001cb8:	4618      	mov	r0, r3
 8001cba:	f001 fdbb 	bl	8003834 <_ZN20TouchGFXGeneratedHAL17setTFTFrameBufferEPt>
}
 8001cbe:	bf00      	nop
 8001cc0:	3708      	adds	r7, #8
 8001cc2:	46bd      	mov	sp, r7
 8001cc4:	bd80      	pop	{r7, pc}

08001cc6 <_ZN11TouchGFXHAL16flushFrameBufferERKN8touchgfx4RectE>:
 * @param rect The area of the screen that has been drawn, expressed in absolute coordinates.
 *
 * @see flushFrameBuffer().
 */
void TouchGFXHAL::flushFrameBuffer(const touchgfx::Rect& rect)
{
 8001cc6:	b580      	push	{r7, lr}
 8001cc8:	b082      	sub	sp, #8
 8001cca:	af00      	add	r7, sp, #0
 8001ccc:	6078      	str	r0, [r7, #4]
 8001cce:	6039      	str	r1, [r7, #0]
    // be called to notify the touchgfx framework that flush has been performed.
    // To calculate he start adress of rect,
    // use advanceFrameBufferToRect(uint8_t* fbPtr, const touchgfx::Rect& rect)
    // defined in TouchGFXGeneratedHAL.cpp

    TouchGFXGeneratedHAL::flushFrameBuffer(rect);
 8001cd0:	687b      	ldr	r3, [r7, #4]
 8001cd2:	6839      	ldr	r1, [r7, #0]
 8001cd4:	4618      	mov	r0, r3
 8001cd6:	f001 fdc3 	bl	8003860 <_ZN20TouchGFXGeneratedHAL16flushFrameBufferERKN8touchgfx4RectE>
}
 8001cda:	bf00      	nop
 8001cdc:	3708      	adds	r7, #8
 8001cde:	46bd      	mov	sp, r7
 8001ce0:	bd80      	pop	{r7, pc}

08001ce2 <_ZN11TouchGFXHAL9blockCopyEPvPKvm>:

bool TouchGFXHAL::blockCopy(void* RESTRICT dest, const void* RESTRICT src, uint32_t numBytes)
{
 8001ce2:	b580      	push	{r7, lr}
 8001ce4:	b084      	sub	sp, #16
 8001ce6:	af00      	add	r7, sp, #0
 8001ce8:	60f8      	str	r0, [r7, #12]
 8001cea:	60b9      	str	r1, [r7, #8]
 8001cec:	607a      	str	r2, [r7, #4]
 8001cee:	603b      	str	r3, [r7, #0]
    return TouchGFXGeneratedHAL::blockCopy(dest, src, numBytes);
 8001cf0:	68f8      	ldr	r0, [r7, #12]
 8001cf2:	683b      	ldr	r3, [r7, #0]
 8001cf4:	687a      	ldr	r2, [r7, #4]
 8001cf6:	68b9      	ldr	r1, [r7, #8]
 8001cf8:	f001 fe08 	bl	800390c <_ZN20TouchGFXGeneratedHAL9blockCopyEPvPKvm>
 8001cfc:	4603      	mov	r3, r0
}
 8001cfe:	4618      	mov	r0, r3
 8001d00:	3710      	adds	r7, #16
 8001d02:	46bd      	mov	sp, r7
 8001d04:	bd80      	pop	{r7, pc}

08001d06 <_ZN11TouchGFXHAL19configureInterruptsEv>:
/**
 * Configures the interrupts relevant for TouchGFX. This primarily entails setting
 * the interrupt priorities for the DMA and LCD interrupts.
 */
void TouchGFXHAL::configureInterrupts()
{
 8001d06:	b580      	push	{r7, lr}
 8001d08:	b082      	sub	sp, #8
 8001d0a:	af00      	add	r7, sp, #0
 8001d0c:	6078      	str	r0, [r7, #4]
    // Calling parent implementation of configureInterrupts().
    //
    // To overwrite the generated implementation, omit call to parent function
    // and implemented needed functionality here.

    TouchGFXGeneratedHAL::configureInterrupts();
 8001d0e:	687b      	ldr	r3, [r7, #4]
 8001d10:	4618      	mov	r0, r3
 8001d12:	f001 fd0d 	bl	8003730 <_ZN20TouchGFXGeneratedHAL19configureInterruptsEv>
}
 8001d16:	bf00      	nop
 8001d18:	3708      	adds	r7, #8
 8001d1a:	46bd      	mov	sp, r7
 8001d1c:	bd80      	pop	{r7, pc}

08001d1e <_ZN11TouchGFXHAL16enableInterruptsEv>:

/**
 * Used for enabling interrupts set in configureInterrupts()
 */
void TouchGFXHAL::enableInterrupts()
{
 8001d1e:	b580      	push	{r7, lr}
 8001d20:	b082      	sub	sp, #8
 8001d22:	af00      	add	r7, sp, #0
 8001d24:	6078      	str	r0, [r7, #4]
    // Calling parent implementation of enableInterrupts().
    //
    // To overwrite the generated implementation, omit call to parent function
    // and implemented needed functionality here.

    TouchGFXGeneratedHAL::enableInterrupts();
 8001d26:	687b      	ldr	r3, [r7, #4]
 8001d28:	4618      	mov	r0, r3
 8001d2a:	f001 fd11 	bl	8003750 <_ZN20TouchGFXGeneratedHAL16enableInterruptsEv>
}
 8001d2e:	bf00      	nop
 8001d30:	3708      	adds	r7, #8
 8001d32:	46bd      	mov	sp, r7
 8001d34:	bd80      	pop	{r7, pc}

08001d36 <_ZN11TouchGFXHAL17disableInterruptsEv>:

/**
 * Used for disabling interrupts set in configureInterrupts()
 */
void TouchGFXHAL::disableInterrupts()
{
 8001d36:	b580      	push	{r7, lr}
 8001d38:	b082      	sub	sp, #8
 8001d3a:	af00      	add	r7, sp, #0
 8001d3c:	6078      	str	r0, [r7, #4]
    // Calling parent implementation of disableInterrupts().
    //
    // To overwrite the generated implementation, omit call to parent function
    // and implemented needed functionality here.

    TouchGFXGeneratedHAL::disableInterrupts();
 8001d3e:	687b      	ldr	r3, [r7, #4]
 8001d40:	4618      	mov	r0, r3
 8001d42:	f001 fd13 	bl	800376c <_ZN20TouchGFXGeneratedHAL17disableInterruptsEv>
}
 8001d46:	bf00      	nop
 8001d48:	3708      	adds	r7, #8
 8001d4a:	46bd      	mov	sp, r7
 8001d4c:	bd80      	pop	{r7, pc}

08001d4e <_ZN11TouchGFXHAL28enableLCDControllerInterruptEv>:
/**
 * Configure the LCD controller to fire interrupts at VSYNC. Called automatically
 * once TouchGFX initialization has completed.
 */
void TouchGFXHAL::enableLCDControllerInterrupt()
{
 8001d4e:	b580      	push	{r7, lr}
 8001d50:	b082      	sub	sp, #8
 8001d52:	af00      	add	r7, sp, #0
 8001d54:	6078      	str	r0, [r7, #4]
    // Calling parent implementation of enableLCDControllerInterrupt().
    //
    // To overwrite the generated implementation, omit call to parent function
    // and implemented needed functionality here.

    TouchGFXGeneratedHAL::enableLCDControllerInterrupt();
 8001d56:	687b      	ldr	r3, [r7, #4]
 8001d58:	4618      	mov	r0, r3
 8001d5a:	f001 fd15 	bl	8003788 <_ZN20TouchGFXGeneratedHAL28enableLCDControllerInterruptEv>
}
 8001d5e:	bf00      	nop
 8001d60:	3708      	adds	r7, #8
 8001d62:	46bd      	mov	sp, r7
 8001d64:	bd80      	pop	{r7, pc}
	...

08001d68 <_ZN11TouchGFXHALD1Ev>:
class TouchGFXHAL : public TouchGFXGeneratedHAL
 8001d68:	b580      	push	{r7, lr}
 8001d6a:	b082      	sub	sp, #8
 8001d6c:	af00      	add	r7, sp, #0
 8001d6e:	6078      	str	r0, [r7, #4]
 8001d70:	4a05      	ldr	r2, [pc, #20]	@ (8001d88 <_ZN11TouchGFXHALD1Ev+0x20>)
 8001d72:	687b      	ldr	r3, [r7, #4]
 8001d74:	601a      	str	r2, [r3, #0]
 8001d76:	687b      	ldr	r3, [r7, #4]
 8001d78:	4618      	mov	r0, r3
 8001d7a:	f7ff ff4f 	bl	8001c1c <_ZN20TouchGFXGeneratedHALD1Ev>
 8001d7e:	687b      	ldr	r3, [r7, #4]
 8001d80:	4618      	mov	r0, r3
 8001d82:	3708      	adds	r7, #8
 8001d84:	46bd      	mov	sp, r7
 8001d86:	bd80      	pop	{r7, pc}
 8001d88:	0802c7c0 	.word	0x0802c7c0

08001d8c <_ZN11TouchGFXHALD0Ev>:
 8001d8c:	b580      	push	{r7, lr}
 8001d8e:	b082      	sub	sp, #8
 8001d90:	af00      	add	r7, sp, #0
 8001d92:	6078      	str	r0, [r7, #4]
 8001d94:	6878      	ldr	r0, [r7, #4]
 8001d96:	f7ff ffe7 	bl	8001d68 <_ZN11TouchGFXHALD1Ev>
 8001d9a:	217c      	movs	r1, #124	@ 0x7c
 8001d9c:	6878      	ldr	r0, [r7, #4]
 8001d9e:	f028 fd9a 	bl	802a8d6 <_ZdlPvj>
 8001da2:	687b      	ldr	r3, [r7, #4]
 8001da4:	4618      	mov	r0, r3
 8001da6:	3708      	adds	r7, #8
 8001da8:	46bd      	mov	sp, r7
 8001daa:	bd80      	pop	{r7, pc}

08001dac <_ZN25STM32H745ITouchController4initEv>:

/**
 * @brief initializes the touch controller
 */
void STM32H745ITouchController::init()
{
 8001dac:	b580      	push	{r7, lr}
 8001dae:	b084      	sub	sp, #16
 8001db0:	af00      	add	r7, sp, #0
    static const uint32_t width = 480;
    static const uint32_t height = 272;

    TS_Init_t config;
    config.Width = width;
 8001db2:	f44f 73f0 	mov.w	r3, #480	@ 0x1e0
 8001db6:	603b      	str	r3, [r7, #0]
    config.Height = height;
 8001db8:	f44f 7388 	mov.w	r3, #272	@ 0x110
 8001dbc:	607b      	str	r3, [r7, #4]
    config.Orientation = TS_SWAP_XY;
 8001dbe:	2308      	movs	r3, #8
 8001dc0:	60bb      	str	r3, [r7, #8]
    config.Accuracy = 0;
 8001dc2:	2300      	movs	r3, #0
 8001dc4:	60fb      	str	r3, [r7, #12]

    if (BSP_TS_Init(0, &config) != BSP_ERROR_NONE)
 8001dc6:	463b      	mov	r3, r7
 8001dc8:	4619      	mov	r1, r3
 8001dca:	2000      	movs	r0, #0
 8001dcc:	f00e fcd0 	bl	8010770 <BSP_TS_Init>
 8001dd0:	4603      	mov	r3, r0
 8001dd2:	2b00      	cmp	r3, #0
 8001dd4:	bf14      	ite	ne
 8001dd6:	2301      	movne	r3, #1
 8001dd8:	2300      	moveq	r3, #0
 8001dda:	b2db      	uxtb	r3, r3
 8001ddc:	2b00      	cmp	r3, #0
 8001dde:	d103      	bne.n	8001de8 <_ZN25STM32H745ITouchController4initEv+0x3c>
    {
        return;
    }

    _bsp_ts_initialized = true;
 8001de0:	4b03      	ldr	r3, [pc, #12]	@ (8001df0 <_ZN25STM32H745ITouchController4initEv+0x44>)
 8001de2:	2201      	movs	r2, #1
 8001de4:	701a      	strb	r2, [r3, #0]
 8001de6:	e000      	b.n	8001dea <_ZN25STM32H745ITouchController4initEv+0x3e>
        return;
 8001de8:	bf00      	nop
}
 8001dea:	3710      	adds	r7, #16
 8001dec:	46bd      	mov	sp, r7
 8001dee:	bd80      	pop	{r7, pc}
 8001df0:	2400035c 	.word	0x2400035c

08001df4 <_ZN25STM32H745ITouchController11sampleTouchERlS0_>:
 * @param x touch x coordinate
 * @param y touch y coordinate
 * @return \c true if a touch event was detected, else \c false
 */
bool STM32H745ITouchController::sampleTouch(int32_t& x, int32_t& y)
{
 8001df4:	b580      	push	{r7, lr}
 8001df6:	b082      	sub	sp, #8
 8001df8:	af00      	add	r7, sp, #0
 8001dfa:	6078      	str	r0, [r7, #4]
 8001dfc:	6039      	str	r1, [r7, #0]
    static TS_State_t state;

    if (!_bsp_ts_initialized)
 8001dfe:	4b11      	ldr	r3, [pc, #68]	@ (8001e44 <_ZN25STM32H745ITouchController11sampleTouchERlS0_+0x50>)
 8001e00:	781b      	ldrb	r3, [r3, #0]
 8001e02:	f083 0301 	eor.w	r3, r3, #1
 8001e06:	b2db      	uxtb	r3, r3
 8001e08:	2b00      	cmp	r3, #0
 8001e0a:	d001      	beq.n	8001e10 <_ZN25STM32H745ITouchController11sampleTouchERlS0_+0x1c>
    {
        return false;
 8001e0c:	2300      	movs	r3, #0
 8001e0e:	e014      	b.n	8001e3a <_ZN25STM32H745ITouchController11sampleTouchERlS0_+0x46>
    }

    BSP_TS_GetState(0, &state);
 8001e10:	490d      	ldr	r1, [pc, #52]	@ (8001e48 <_ZN25STM32H745ITouchController11sampleTouchERlS0_+0x54>)
 8001e12:	2000      	movs	r0, #0
 8001e14:	f00e fd68 	bl	80108e8 <BSP_TS_GetState>

    if (!state.TouchDetected)
 8001e18:	4b0b      	ldr	r3, [pc, #44]	@ (8001e48 <_ZN25STM32H745ITouchController11sampleTouchERlS0_+0x54>)
 8001e1a:	681b      	ldr	r3, [r3, #0]
 8001e1c:	2b00      	cmp	r3, #0
 8001e1e:	d101      	bne.n	8001e24 <_ZN25STM32H745ITouchController11sampleTouchERlS0_+0x30>
    {
        return false;
 8001e20:	2300      	movs	r3, #0
 8001e22:	e00a      	b.n	8001e3a <_ZN25STM32H745ITouchController11sampleTouchERlS0_+0x46>
    }

    x = state.TouchX;
 8001e24:	4b08      	ldr	r3, [pc, #32]	@ (8001e48 <_ZN25STM32H745ITouchController11sampleTouchERlS0_+0x54>)
 8001e26:	685b      	ldr	r3, [r3, #4]
 8001e28:	461a      	mov	r2, r3
 8001e2a:	687b      	ldr	r3, [r7, #4]
 8001e2c:	601a      	str	r2, [r3, #0]
    y = state.TouchY;
 8001e2e:	4b06      	ldr	r3, [pc, #24]	@ (8001e48 <_ZN25STM32H745ITouchController11sampleTouchERlS0_+0x54>)
 8001e30:	689b      	ldr	r3, [r3, #8]
 8001e32:	461a      	mov	r2, r3
 8001e34:	683b      	ldr	r3, [r7, #0]
 8001e36:	601a      	str	r2, [r3, #0]
    return true;
 8001e38:	2301      	movs	r3, #1
}
 8001e3a:	4618      	mov	r0, r3
 8001e3c:	3708      	adds	r7, #8
 8001e3e:	46bd      	mov	sp, r7
 8001e40:	bd80      	pop	{r7, pc}
 8001e42:	bf00      	nop
 8001e44:	2400035c 	.word	0x2400035c
 8001e48:	24000360 	.word	0x24000360

08001e4c <_ZN8touchgfx10OSWrappers10initializeEv>:

/*
 * Initialize frame buffer semaphore and queue/mutex for VSYNC signal.
 */
void OSWrappers::initialize()
{
 8001e4c:	b580      	push	{r7, lr}
 8001e4e:	af00      	add	r7, sp, #0
    // Create a queue of length 1
    frame_buffer_sem = osSemaphoreNew(1, 1, NULL); // Binary semaphore
 8001e50:	2200      	movs	r2, #0
 8001e52:	2101      	movs	r1, #1
 8001e54:	2001      	movs	r0, #1
 8001e56:	f008 ff96 	bl	800ad86 <osSemaphoreNew>
 8001e5a:	4603      	mov	r3, r0
 8001e5c:	4a0f      	ldr	r2, [pc, #60]	@ (8001e9c <_ZN8touchgfx10OSWrappers10initializeEv+0x50>)
 8001e5e:	6013      	str	r3, [r2, #0]
    assert((frame_buffer_sem != NULL) && "Creation of framebuffer semaphore failed");
 8001e60:	4b0e      	ldr	r3, [pc, #56]	@ (8001e9c <_ZN8touchgfx10OSWrappers10initializeEv+0x50>)
 8001e62:	681b      	ldr	r3, [r3, #0]
 8001e64:	2b00      	cmp	r3, #0
 8001e66:	d105      	bne.n	8001e74 <_ZN8touchgfx10OSWrappers10initializeEv+0x28>
 8001e68:	4b0d      	ldr	r3, [pc, #52]	@ (8001ea0 <_ZN8touchgfx10OSWrappers10initializeEv+0x54>)
 8001e6a:	4a0e      	ldr	r2, [pc, #56]	@ (8001ea4 <_ZN8touchgfx10OSWrappers10initializeEv+0x58>)
 8001e6c:	2128      	movs	r1, #40	@ 0x28
 8001e6e:	480e      	ldr	r0, [pc, #56]	@ (8001ea8 <_ZN8touchgfx10OSWrappers10initializeEv+0x5c>)
 8001e70:	f028 fd60 	bl	802a934 <__assert_func>

    // Create a queue of length 1
    vsync_queue = osMessageQueueNew(1, 4, NULL);
 8001e74:	2200      	movs	r2, #0
 8001e76:	2104      	movs	r1, #4
 8001e78:	2001      	movs	r0, #1
 8001e7a:	f009 f8a3 	bl	800afc4 <osMessageQueueNew>
 8001e7e:	4603      	mov	r3, r0
 8001e80:	4a0a      	ldr	r2, [pc, #40]	@ (8001eac <_ZN8touchgfx10OSWrappers10initializeEv+0x60>)
 8001e82:	6013      	str	r3, [r2, #0]
    assert((vsync_queue != NULL) && "Creation of vsync message queue failed");
 8001e84:	4b09      	ldr	r3, [pc, #36]	@ (8001eac <_ZN8touchgfx10OSWrappers10initializeEv+0x60>)
 8001e86:	681b      	ldr	r3, [r3, #0]
 8001e88:	2b00      	cmp	r3, #0
 8001e8a:	d105      	bne.n	8001e98 <_ZN8touchgfx10OSWrappers10initializeEv+0x4c>
 8001e8c:	4b08      	ldr	r3, [pc, #32]	@ (8001eb0 <_ZN8touchgfx10OSWrappers10initializeEv+0x64>)
 8001e8e:	4a05      	ldr	r2, [pc, #20]	@ (8001ea4 <_ZN8touchgfx10OSWrappers10initializeEv+0x58>)
 8001e90:	212c      	movs	r1, #44	@ 0x2c
 8001e92:	4805      	ldr	r0, [pc, #20]	@ (8001ea8 <_ZN8touchgfx10OSWrappers10initializeEv+0x5c>)
 8001e94:	f028 fd4e 	bl	802a934 <__assert_func>
}
 8001e98:	bf00      	nop
 8001e9a:	bd80      	pop	{r7, pc}
 8001e9c:	2400036c 	.word	0x2400036c
 8001ea0:	0802bbcc 	.word	0x0802bbcc
 8001ea4:	0802bc18 	.word	0x0802bc18
 8001ea8:	0802bc48 	.word	0x0802bc48
 8001eac:	24000370 	.word	0x24000370
 8001eb0:	0802bcd8 	.word	0x0802bcd8

08001eb4 <_ZN8touchgfx10OSWrappers24takeFrameBufferSemaphoreEv>:

/*
 * Take the frame buffer semaphore. Blocks until semaphore is available.
 */
void OSWrappers::takeFrameBufferSemaphore()
{
 8001eb4:	b580      	push	{r7, lr}
 8001eb6:	af00      	add	r7, sp, #0
    osSemaphoreAcquire(frame_buffer_sem, osWaitForever);
 8001eb8:	4b04      	ldr	r3, [pc, #16]	@ (8001ecc <_ZN8touchgfx10OSWrappers24takeFrameBufferSemaphoreEv+0x18>)
 8001eba:	681b      	ldr	r3, [r3, #0]
 8001ebc:	f04f 31ff 	mov.w	r1, #4294967295
 8001ec0:	4618      	mov	r0, r3
 8001ec2:	f008 ffe9 	bl	800ae98 <osSemaphoreAcquire>
}
 8001ec6:	bf00      	nop
 8001ec8:	bd80      	pop	{r7, pc}
 8001eca:	bf00      	nop
 8001ecc:	2400036c 	.word	0x2400036c

08001ed0 <_ZN8touchgfx10OSWrappers24giveFrameBufferSemaphoreEv>:

/*
 * Release the frame buffer semaphore.
 */
void OSWrappers::giveFrameBufferSemaphore()
{
 8001ed0:	b580      	push	{r7, lr}
 8001ed2:	af00      	add	r7, sp, #0
    osSemaphoreRelease(frame_buffer_sem);
 8001ed4:	4b03      	ldr	r3, [pc, #12]	@ (8001ee4 <_ZN8touchgfx10OSWrappers24giveFrameBufferSemaphoreEv+0x14>)
 8001ed6:	681b      	ldr	r3, [r3, #0]
 8001ed8:	4618      	mov	r0, r3
 8001eda:	f009 f82f 	bl	800af3c <osSemaphoreRelease>
}
 8001ede:	bf00      	nop
 8001ee0:	bd80      	pop	{r7, pc}
 8001ee2:	bf00      	nop
 8001ee4:	2400036c 	.word	0x2400036c

08001ee8 <_ZN8touchgfx10OSWrappers27tryTakeFrameBufferSemaphoreEv>:
 *
 * Note must return immediately! This function does not care who has the taken the semaphore,
 * it only serves to make sure that the semaphore is taken by someone.
 */
void OSWrappers::tryTakeFrameBufferSemaphore()
{
 8001ee8:	b580      	push	{r7, lr}
 8001eea:	af00      	add	r7, sp, #0
    osSemaphoreAcquire(frame_buffer_sem, 0);
 8001eec:	4b03      	ldr	r3, [pc, #12]	@ (8001efc <_ZN8touchgfx10OSWrappers27tryTakeFrameBufferSemaphoreEv+0x14>)
 8001eee:	681b      	ldr	r3, [r3, #0]
 8001ef0:	2100      	movs	r1, #0
 8001ef2:	4618      	mov	r0, r3
 8001ef4:	f008 ffd0 	bl	800ae98 <osSemaphoreAcquire>
}
 8001ef8:	bf00      	nop
 8001efa:	bd80      	pop	{r7, pc}
 8001efc:	2400036c 	.word	0x2400036c

08001f00 <_ZN8touchgfx10OSWrappers31giveFrameBufferSemaphoreFromISREv>:
 *
 * Release the frame buffer semaphore in a way that is safe in interrupt context.
 * Called from ISR.
 */
void OSWrappers::giveFrameBufferSemaphoreFromISR()
{
 8001f00:	b580      	push	{r7, lr}
 8001f02:	af00      	add	r7, sp, #0
    osSemaphoreRelease(frame_buffer_sem);
 8001f04:	4b03      	ldr	r3, [pc, #12]	@ (8001f14 <_ZN8touchgfx10OSWrappers31giveFrameBufferSemaphoreFromISREv+0x14>)
 8001f06:	681b      	ldr	r3, [r3, #0]
 8001f08:	4618      	mov	r0, r3
 8001f0a:	f009 f817 	bl	800af3c <osSemaphoreRelease>
}
 8001f0e:	bf00      	nop
 8001f10:	bd80      	pop	{r7, pc}
 8001f12:	bf00      	nop
 8001f14:	2400036c 	.word	0x2400036c

08001f18 <_ZN8touchgfx10OSWrappers11signalVSyncEv>:
 *
 * Note This function is called from an ISR, and should (depending on OS) trigger a
 * scheduling.
 */
void OSWrappers::signalVSync()
{
 8001f18:	b580      	push	{r7, lr}
 8001f1a:	af00      	add	r7, sp, #0
    osMessageQueuePut(vsync_queue, &dummy, 0, 0);
 8001f1c:	4b04      	ldr	r3, [pc, #16]	@ (8001f30 <_ZN8touchgfx10OSWrappers11signalVSyncEv+0x18>)
 8001f1e:	6818      	ldr	r0, [r3, #0]
 8001f20:	2300      	movs	r3, #0
 8001f22:	2200      	movs	r2, #0
 8001f24:	4903      	ldr	r1, [pc, #12]	@ (8001f34 <_ZN8touchgfx10OSWrappers11signalVSyncEv+0x1c>)
 8001f26:	f009 f8c1 	bl	800b0ac <osMessageQueuePut>
}
 8001f2a:	bf00      	nop
 8001f2c:	bd80      	pop	{r7, pc}
 8001f2e:	bf00      	nop
 8001f30:	24000370 	.word	0x24000370
 8001f34:	24000004 	.word	0x24000004

08001f38 <_ZN8touchgfx10OSWrappers12waitForVSyncEv>:
 *
 * Note This function must first clear the mutex/queue and then wait for the next one to
 * occur.
 */
void OSWrappers::waitForVSync()
{
 8001f38:	b580      	push	{r7, lr}
 8001f3a:	b082      	sub	sp, #8
 8001f3c:	af00      	add	r7, sp, #0
    uint32_t dummyGet;
    // First make sure the queue is empty, by trying to remove an element with 0 timeout.
    osMessageQueueGet(vsync_queue, &dummyGet, 0, 0);
 8001f3e:	4b09      	ldr	r3, [pc, #36]	@ (8001f64 <_ZN8touchgfx10OSWrappers12waitForVSyncEv+0x2c>)
 8001f40:	6818      	ldr	r0, [r3, #0]
 8001f42:	1d39      	adds	r1, r7, #4
 8001f44:	2300      	movs	r3, #0
 8001f46:	2200      	movs	r2, #0
 8001f48:	f009 f910 	bl	800b16c <osMessageQueueGet>

    // Then, wait for next VSYNC to occur.
    osMessageQueueGet(vsync_queue, &dummyGet, 0, osWaitForever);
 8001f4c:	4b05      	ldr	r3, [pc, #20]	@ (8001f64 <_ZN8touchgfx10OSWrappers12waitForVSyncEv+0x2c>)
 8001f4e:	6818      	ldr	r0, [r3, #0]
 8001f50:	1d39      	adds	r1, r7, #4
 8001f52:	f04f 33ff 	mov.w	r3, #4294967295
 8001f56:	2200      	movs	r2, #0
 8001f58:	f009 f908 	bl	800b16c <osMessageQueueGet>
}
 8001f5c:	bf00      	nop
 8001f5e:	3708      	adds	r7, #8
 8001f60:	46bd      	mov	sp, r7
 8001f62:	bd80      	pop	{r7, pc}
 8001f64:	24000370 	.word	0x24000370

08001f68 <__NVIC_EnableIRQ>:
{
 8001f68:	b480      	push	{r7}
 8001f6a:	b083      	sub	sp, #12
 8001f6c:	af00      	add	r7, sp, #0
 8001f6e:	4603      	mov	r3, r0
 8001f70:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8001f72:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001f76:	2b00      	cmp	r3, #0
 8001f78:	db0b      	blt.n	8001f92 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001f7a:	88fb      	ldrh	r3, [r7, #6]
 8001f7c:	f003 021f 	and.w	r2, r3, #31
 8001f80:	4907      	ldr	r1, [pc, #28]	@ (8001fa0 <__NVIC_EnableIRQ+0x38>)
 8001f82:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001f86:	095b      	lsrs	r3, r3, #5
 8001f88:	2001      	movs	r0, #1
 8001f8a:	fa00 f202 	lsl.w	r2, r0, r2
 8001f8e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8001f92:	bf00      	nop
 8001f94:	370c      	adds	r7, #12
 8001f96:	46bd      	mov	sp, r7
 8001f98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f9c:	4770      	bx	lr
 8001f9e:	bf00      	nop
 8001fa0:	e000e100 	.word	0xe000e100

08001fa4 <__NVIC_DisableIRQ>:
{
 8001fa4:	b480      	push	{r7}
 8001fa6:	b083      	sub	sp, #12
 8001fa8:	af00      	add	r7, sp, #0
 8001faa:	4603      	mov	r3, r0
 8001fac:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8001fae:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001fb2:	2b00      	cmp	r3, #0
 8001fb4:	db12      	blt.n	8001fdc <__NVIC_DisableIRQ+0x38>
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001fb6:	88fb      	ldrh	r3, [r7, #6]
 8001fb8:	f003 021f 	and.w	r2, r3, #31
 8001fbc:	490a      	ldr	r1, [pc, #40]	@ (8001fe8 <__NVIC_DisableIRQ+0x44>)
 8001fbe:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001fc2:	095b      	lsrs	r3, r3, #5
 8001fc4:	2001      	movs	r0, #1
 8001fc6:	fa00 f202 	lsl.w	r2, r0, r2
 8001fca:	3320      	adds	r3, #32
 8001fcc:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8001fd0:	f3bf 8f4f 	dsb	sy
}
 8001fd4:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8001fd6:	f3bf 8f6f 	isb	sy
}
 8001fda:	bf00      	nop
}
 8001fdc:	bf00      	nop
 8001fde:	370c      	adds	r7, #12
 8001fe0:	46bd      	mov	sp, r7
 8001fe2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fe6:	4770      	bx	lr
 8001fe8:	e000e100 	.word	0xe000e100

08001fec <_ZN8touchgfx9colortypeC1Ev>:
 * extract a 24/32-bit color from this type, use the getColor32 function.
 */
struct colortype
{
    /** Default constructor. Creates a black (0) color. */
    colortype()
 8001fec:	b480      	push	{r7}
 8001fee:	b083      	sub	sp, #12
 8001ff0:	af00      	add	r7, sp, #0
 8001ff2:	6078      	str	r0, [r7, #4]
        : color(0)
 8001ff4:	687b      	ldr	r3, [r7, #4]
 8001ff6:	2200      	movs	r2, #0
 8001ff8:	601a      	str	r2, [r3, #0]
    {
    }
 8001ffa:	687b      	ldr	r3, [r7, #4]
 8001ffc:	4618      	mov	r0, r3
 8001ffe:	370c      	adds	r7, #12
 8002000:	46bd      	mov	sp, r7
 8002002:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002006:	4770      	bx	lr

08002008 <_ZNK8touchgfx9colortypecvmEv>:
    /**
     * Cast that converts the given colortype to an uint32_t.
     *
     * @return The result of the operation.
     */
    operator uint32_t() const
 8002008:	b480      	push	{r7}
 800200a:	b083      	sub	sp, #12
 800200c:	af00      	add	r7, sp, #0
 800200e:	6078      	str	r0, [r7, #4]
    {
        return color;
 8002010:	687b      	ldr	r3, [r7, #4]
 8002012:	681b      	ldr	r3, [r3, #0]
    }
 8002014:	4618      	mov	r0, r3
 8002016:	370c      	adds	r7, #12
 8002018:	46bd      	mov	sp, r7
 800201a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800201e:	4770      	bx	lr

08002020 <_ZN8touchgfx9DMA_QueueD1Ev>:
     * @param  op The blitop to add.
     */
    virtual void pushCopyOf(const BlitOp& op) = 0;

    /** Finalizes an instance of the DMA_Queue class. */
    virtual ~DMA_Queue()
 8002020:	b480      	push	{r7}
 8002022:	b083      	sub	sp, #12
 8002024:	af00      	add	r7, sp, #0
 8002026:	6078      	str	r0, [r7, #4]
    {
 8002028:	4a04      	ldr	r2, [pc, #16]	@ (800203c <_ZN8touchgfx9DMA_QueueD1Ev+0x1c>)
 800202a:	687b      	ldr	r3, [r7, #4]
 800202c:	601a      	str	r2, [r3, #0]
    }
 800202e:	687b      	ldr	r3, [r7, #4]
 8002030:	4618      	mov	r0, r3
 8002032:	370c      	adds	r7, #12
 8002034:	46bd      	mov	sp, r7
 8002036:	f85d 7b04 	ldr.w	r7, [sp], #4
 800203a:	4770      	bx	lr
 800203c:	0802c8e0 	.word	0x0802c8e0

08002040 <_ZN8touchgfx9DMA_QueueD0Ev>:
    virtual ~DMA_Queue()
 8002040:	b580      	push	{r7, lr}
 8002042:	b082      	sub	sp, #8
 8002044:	af00      	add	r7, sp, #0
 8002046:	6078      	str	r0, [r7, #4]
    }
 8002048:	6878      	ldr	r0, [r7, #4]
 800204a:	f7ff ffe9 	bl	8002020 <_ZN8touchgfx9DMA_QueueD1Ev>
 800204e:	2104      	movs	r1, #4
 8002050:	6878      	ldr	r0, [r7, #4]
 8002052:	f028 fc40 	bl	802a8d6 <_ZdlPvj>
 8002056:	687b      	ldr	r3, [r7, #4]
 8002058:	4618      	mov	r0, r3
 800205a:	3708      	adds	r7, #8
 800205c:	46bd      	mov	sp, r7
 800205e:	bd80      	pop	{r7, pc}

08002060 <_ZN8touchgfx13DMA_Interface5flushEv>:
     * @param  op The operation to add.
     */
    virtual void addToQueue(const BlitOp& op);

    /** This function blocks until all DMA transfers in the queue have been completed. */
    virtual void flush()
 8002060:	b580      	push	{r7, lr}
 8002062:	b082      	sub	sp, #8
 8002064:	af00      	add	r7, sp, #0
 8002066:	6078      	str	r0, [r7, #4]
    {
        waitForFrameBufferSemaphore();
 8002068:	687b      	ldr	r3, [r7, #4]
 800206a:	681b      	ldr	r3, [r3, #0]
 800206c:	3344      	adds	r3, #68	@ 0x44
 800206e:	681b      	ldr	r3, [r3, #0]
 8002070:	6878      	ldr	r0, [r7, #4]
 8002072:	4798      	blx	r3
    }
 8002074:	bf00      	nop
 8002076:	3708      	adds	r7, #8
 8002078:	46bd      	mov	sp, r7
 800207a:	bd80      	pop	{r7, pc}

0800207c <_ZN8touchgfx13DMA_InterfaceD1Ev>:
    {
        return DMA_TYPE_GENERIC;
    }

    /** Finalizes an instance of the DMA_Interface class. */
    virtual ~DMA_Interface()
 800207c:	b480      	push	{r7}
 800207e:	b083      	sub	sp, #12
 8002080:	af00      	add	r7, sp, #0
 8002082:	6078      	str	r0, [r7, #4]
    {
 8002084:	4a04      	ldr	r2, [pc, #16]	@ (8002098 <_ZN8touchgfx13DMA_InterfaceD1Ev+0x1c>)
 8002086:	687b      	ldr	r3, [r7, #4]
 8002088:	601a      	str	r2, [r3, #0]
    }
 800208a:	687b      	ldr	r3, [r7, #4]
 800208c:	4618      	mov	r0, r3
 800208e:	370c      	adds	r7, #12
 8002090:	46bd      	mov	sp, r7
 8002092:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002096:	4770      	bx	lr
 8002098:	0802e4d8 	.word	0x0802e4d8

0800209c <_ZN8touchgfx13DMA_InterfaceD0Ev>:
    virtual ~DMA_Interface()
 800209c:	b580      	push	{r7, lr}
 800209e:	b082      	sub	sp, #8
 80020a0:	af00      	add	r7, sp, #0
 80020a2:	6078      	str	r0, [r7, #4]
    }
 80020a4:	6878      	ldr	r0, [r7, #4]
 80020a6:	f7ff ffe9 	bl	800207c <_ZN8touchgfx13DMA_InterfaceD1Ev>
 80020aa:	210c      	movs	r1, #12
 80020ac:	6878      	ldr	r0, [r7, #4]
 80020ae:	f028 fc12 	bl	802a8d6 <_ZdlPvj>
 80020b2:	687b      	ldr	r3, [r7, #4]
 80020b4:	4618      	mov	r0, r3
 80020b6:	3708      	adds	r7, #8
 80020b8:	46bd      	mov	sp, r7
 80020ba:	bd80      	pop	{r7, pc}

080020bc <_ZN8touchgfx13DMA_InterfaceC1ERNS_9DMA_QueueE>:
    /**
     * Constructs a DMA Interface object.
     *
     * @param [in] dmaQueue Reference to the queue of DMA operations.
     */
    DMA_Interface(DMA_Queue& dmaQueue)
 80020bc:	b480      	push	{r7}
 80020be:	b083      	sub	sp, #12
 80020c0:	af00      	add	r7, sp, #0
 80020c2:	6078      	str	r0, [r7, #4]
 80020c4:	6039      	str	r1, [r7, #0]
        : queue(dmaQueue), isRunning(false), isAllowed(false)
 80020c6:	4a09      	ldr	r2, [pc, #36]	@ (80020ec <_ZN8touchgfx13DMA_InterfaceC1ERNS_9DMA_QueueE+0x30>)
 80020c8:	687b      	ldr	r3, [r7, #4]
 80020ca:	601a      	str	r2, [r3, #0]
 80020cc:	687b      	ldr	r3, [r7, #4]
 80020ce:	683a      	ldr	r2, [r7, #0]
 80020d0:	605a      	str	r2, [r3, #4]
 80020d2:	687b      	ldr	r3, [r7, #4]
 80020d4:	2200      	movs	r2, #0
 80020d6:	721a      	strb	r2, [r3, #8]
 80020d8:	687b      	ldr	r3, [r7, #4]
 80020da:	2200      	movs	r2, #0
 80020dc:	725a      	strb	r2, [r3, #9]
    {
    }
 80020de:	687b      	ldr	r3, [r7, #4]
 80020e0:	4618      	mov	r0, r3
 80020e2:	370c      	adds	r7, #12
 80020e4:	46bd      	mov	sp, r7
 80020e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020ea:	4770      	bx	lr
 80020ec:	0802e4d8 	.word	0x0802e4d8

080020f0 <_ZN8STM32DMA10getDMATypeEv>:
     *        Function for obtaining the DMA type of the concrete DMA_Interface implementation.
     *        As default, will return DMA_TYPE_CHROMART type value.
     *
     * @return a DMAType value of the concrete DMA_Interface implementation.
     */
    virtual touchgfx::DMAType getDMAType(void)
 80020f0:	b480      	push	{r7}
 80020f2:	b083      	sub	sp, #12
 80020f4:	af00      	add	r7, sp, #0
 80020f6:	6078      	str	r0, [r7, #4]
    {
        return touchgfx::DMA_TYPE_CHROMART;
 80020f8:	2301      	movs	r3, #1
    }
 80020fa:	4618      	mov	r0, r3
 80020fc:	370c      	adds	r7, #12
 80020fe:	46bd      	mov	sp, r7
 8002100:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002104:	4770      	bx	lr

08002106 <_ZN8STM32DMA18signalDMAInterruptEv>:
     *
     * @brief Raises a DMA interrupt signal.
     *
     *        Raises a DMA interrupt signal.
     */
    virtual void signalDMAInterrupt()
 8002106:	b580      	push	{r7, lr}
 8002108:	b082      	sub	sp, #8
 800210a:	af00      	add	r7, sp, #0
 800210c:	6078      	str	r0, [r7, #4]
    {
        executeCompleted();
 800210e:	687a      	ldr	r2, [r7, #4]
 8002110:	687b      	ldr	r3, [r7, #4]
 8002112:	681b      	ldr	r3, [r3, #0]
 8002114:	3328      	adds	r3, #40	@ 0x28
 8002116:	681b      	ldr	r3, [r3, #0]
 8002118:	4610      	mov	r0, r2
 800211a:	4798      	blx	r3
    }
 800211c:	bf00      	nop
 800211e:	3708      	adds	r7, #8
 8002120:	46bd      	mov	sp, r7
 8002122:	bd80      	pop	{r7, pc}

08002124 <_ZN8touchgfx3HAL11getInstanceEv>:
    static HAL* getInstance()
 8002124:	b480      	push	{r7}
 8002126:	af00      	add	r7, sp, #0
        return instance;
 8002128:	4b03      	ldr	r3, [pc, #12]	@ (8002138 <_ZN8touchgfx3HAL11getInstanceEv+0x14>)
 800212a:	681b      	ldr	r3, [r3, #0]
    }
 800212c:	4618      	mov	r0, r3
 800212e:	46bd      	mov	sp, r7
 8002130:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002134:	4770      	bx	lr
 8002136:	bf00      	nop
 8002138:	2400b880 	.word	0x2400b880

0800213c <_ZN8touchgfx3HAL18signalDMAInterruptEv>:
    void signalDMAInterrupt()
 800213c:	b580      	push	{r7, lr}
 800213e:	b082      	sub	sp, #8
 8002140:	af00      	add	r7, sp, #0
 8002142:	6078      	str	r0, [r7, #4]
        dma.signalDMAInterrupt();
 8002144:	687b      	ldr	r3, [r7, #4]
 8002146:	685a      	ldr	r2, [r3, #4]
 8002148:	687b      	ldr	r3, [r7, #4]
 800214a:	685b      	ldr	r3, [r3, #4]
 800214c:	681b      	ldr	r3, [r3, #0]
 800214e:	3314      	adds	r3, #20
 8002150:	681b      	ldr	r3, [r3, #0]
 8002152:	4610      	mov	r0, r2
 8002154:	4798      	blx	r3
    }
 8002156:	bf00      	nop
 8002158:	3708      	adds	r7, #8
 800215a:	46bd      	mov	sp, r7
 800215c:	bd80      	pop	{r7, pc}

0800215e <DMA2D_XferCpltCallback>:

extern "C" DMA2D_HandleTypeDef hdma2d;

extern "C" {
    static void DMA2D_XferCpltCallback(DMA2D_HandleTypeDef* handle)
    {
 800215e:	b580      	push	{r7, lr}
 8002160:	b082      	sub	sp, #8
 8002162:	af00      	add	r7, sp, #0
 8002164:	6078      	str	r0, [r7, #4]
        (void)handle; // Unused argument
        HAL::getInstance()->signalDMAInterrupt();
 8002166:	f7ff ffdd 	bl	8002124 <_ZN8touchgfx3HAL11getInstanceEv>
 800216a:	4603      	mov	r3, r0
 800216c:	4618      	mov	r0, r3
 800216e:	f7ff ffe5 	bl	800213c <_ZN8touchgfx3HAL18signalDMAInterruptEv>
    }
 8002172:	bf00      	nop
 8002174:	3708      	adds	r7, #8
 8002176:	46bd      	mov	sp, r7
 8002178:	bd80      	pop	{r7, pc}

0800217a <_ZN8touchgfx6BlitOpC1Ev>:

/**
 * BlitOp instances carry the required information for performing operations on the LCD
 * (framebuffer) using DMA.
 */
struct BlitOp
 800217a:	b580      	push	{r7, lr}
 800217c:	b082      	sub	sp, #8
 800217e:	af00      	add	r7, sp, #0
 8002180:	6078      	str	r0, [r7, #4]
 8002182:	687b      	ldr	r3, [r7, #4]
 8002184:	330c      	adds	r3, #12
 8002186:	4618      	mov	r0, r3
 8002188:	f7ff ff30 	bl	8001fec <_ZN8touchgfx9colortypeC1Ev>
 800218c:	687b      	ldr	r3, [r7, #4]
 800218e:	4618      	mov	r0, r3
 8002190:	3708      	adds	r7, #8
 8002192:	46bd      	mov	sp, r7
 8002194:	bd80      	pop	{r7, pc}
	...

08002198 <_ZN8STM32DMAC1Ev>:
}

STM32DMA::STM32DMA()
 8002198:	b5b0      	push	{r4, r5, r7, lr}
 800219a:	b082      	sub	sp, #8
 800219c:	af00      	add	r7, sp, #0
 800219e:	6078      	str	r0, [r7, #4]
    : DMA_Interface(dma_queue), dma_queue(queue_storage, sizeof(queue_storage) / sizeof(queue_storage[0]))
 80021a0:	687a      	ldr	r2, [r7, #4]
 80021a2:	687b      	ldr	r3, [r7, #4]
 80021a4:	330c      	adds	r3, #12
 80021a6:	4619      	mov	r1, r3
 80021a8:	4610      	mov	r0, r2
 80021aa:	f7ff ff87 	bl	80020bc <_ZN8touchgfx13DMA_InterfaceC1ERNS_9DMA_QueueE>
 80021ae:	4a0e      	ldr	r2, [pc, #56]	@ (80021e8 <_ZN8STM32DMAC1Ev+0x50>)
 80021b0:	687b      	ldr	r3, [r7, #4]
 80021b2:	601a      	str	r2, [r3, #0]
 80021b4:	687b      	ldr	r3, [r7, #4]
 80021b6:	f103 000c 	add.w	r0, r3, #12
 80021ba:	687b      	ldr	r3, [r7, #4]
 80021bc:	3320      	adds	r3, #32
 80021be:	2260      	movs	r2, #96	@ 0x60
 80021c0:	4619      	mov	r1, r3
 80021c2:	f017 f86d 	bl	80192a0 <_ZN8touchgfx17LockFreeDMA_QueueC1EPNS_6BlitOpEi>
 80021c6:	687b      	ldr	r3, [r7, #4]
 80021c8:	3320      	adds	r3, #32
 80021ca:	245f      	movs	r4, #95	@ 0x5f
 80021cc:	461d      	mov	r5, r3
 80021ce:	e004      	b.n	80021da <_ZN8STM32DMAC1Ev+0x42>
 80021d0:	4628      	mov	r0, r5
 80021d2:	f7ff ffd2 	bl	800217a <_ZN8touchgfx6BlitOpC1Ev>
 80021d6:	3c01      	subs	r4, #1
 80021d8:	3520      	adds	r5, #32
 80021da:	2c00      	cmp	r4, #0
 80021dc:	daf8      	bge.n	80021d0 <_ZN8STM32DMAC1Ev+0x38>
{
}
 80021de:	687b      	ldr	r3, [r7, #4]
 80021e0:	4618      	mov	r0, r3
 80021e2:	3708      	adds	r7, #8
 80021e4:	46bd      	mov	sp, r7
 80021e6:	bdb0      	pop	{r4, r5, r7, pc}
 80021e8:	0802c890 	.word	0x0802c890

080021ec <_ZN8STM32DMAD1Ev>:

STM32DMA::~STM32DMA()
 80021ec:	b580      	push	{r7, lr}
 80021ee:	b082      	sub	sp, #8
 80021f0:	af00      	add	r7, sp, #0
 80021f2:	6078      	str	r0, [r7, #4]
 80021f4:	4a09      	ldr	r2, [pc, #36]	@ (800221c <_ZN8STM32DMAD1Ev+0x30>)
 80021f6:	687b      	ldr	r3, [r7, #4]
 80021f8:	601a      	str	r2, [r3, #0]
{
    /* Disable DMA2D global Interrupt */
    NVIC_DisableIRQ(DMA2D_IRQn);
 80021fa:	205a      	movs	r0, #90	@ 0x5a
 80021fc:	f7ff fed2 	bl	8001fa4 <__NVIC_DisableIRQ>
}
 8002200:	687b      	ldr	r3, [r7, #4]
 8002202:	330c      	adds	r3, #12
 8002204:	4618      	mov	r0, r3
 8002206:	f000 fabf 	bl	8002788 <_ZN8touchgfx17LockFreeDMA_QueueD1Ev>
 800220a:	687b      	ldr	r3, [r7, #4]
 800220c:	4618      	mov	r0, r3
 800220e:	f7ff ff35 	bl	800207c <_ZN8touchgfx13DMA_InterfaceD1Ev>
 8002212:	687b      	ldr	r3, [r7, #4]
 8002214:	4618      	mov	r0, r3
 8002216:	3708      	adds	r7, #8
 8002218:	46bd      	mov	sp, r7
 800221a:	bd80      	pop	{r7, pc}
 800221c:	0802c890 	.word	0x0802c890

08002220 <_ZN8STM32DMAD0Ev>:
STM32DMA::~STM32DMA()
 8002220:	b580      	push	{r7, lr}
 8002222:	b082      	sub	sp, #8
 8002224:	af00      	add	r7, sp, #0
 8002226:	6078      	str	r0, [r7, #4]
}
 8002228:	6878      	ldr	r0, [r7, #4]
 800222a:	f7ff ffdf 	bl	80021ec <_ZN8STM32DMAD1Ev>
 800222e:	f44f 6142 	mov.w	r1, #3104	@ 0xc20
 8002232:	6878      	ldr	r0, [r7, #4]
 8002234:	f028 fb4f 	bl	802a8d6 <_ZdlPvj>
 8002238:	687b      	ldr	r3, [r7, #4]
 800223a:	4618      	mov	r0, r3
 800223c:	3708      	adds	r7, #8
 800223e:	46bd      	mov	sp, r7
 8002240:	bd80      	pop	{r7, pc}
	...

08002244 <_ZN8STM32DMA10initializeEv>:

void STM32DMA::initialize()
{
 8002244:	b580      	push	{r7, lr}
 8002246:	b084      	sub	sp, #16
 8002248:	af00      	add	r7, sp, #0
 800224a:	6078      	str	r0, [r7, #4]
    /* Ensure DMA2D Clock is enabled */
    __HAL_RCC_DMA2D_CLK_ENABLE();
 800224c:	4b12      	ldr	r3, [pc, #72]	@ (8002298 <_ZN8STM32DMA10initializeEv+0x54>)
 800224e:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 8002252:	4a11      	ldr	r2, [pc, #68]	@ (8002298 <_ZN8STM32DMA10initializeEv+0x54>)
 8002254:	f043 0310 	orr.w	r3, r3, #16
 8002258:	f8c2 30d4 	str.w	r3, [r2, #212]	@ 0xd4
 800225c:	4b0e      	ldr	r3, [pc, #56]	@ (8002298 <_ZN8STM32DMA10initializeEv+0x54>)
 800225e:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 8002262:	f003 0310 	and.w	r3, r3, #16
 8002266:	60fb      	str	r3, [r7, #12]
 8002268:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_DMA2D_FORCE_RESET();
 800226a:	4b0b      	ldr	r3, [pc, #44]	@ (8002298 <_ZN8STM32DMA10initializeEv+0x54>)
 800226c:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800226e:	4a0a      	ldr	r2, [pc, #40]	@ (8002298 <_ZN8STM32DMA10initializeEv+0x54>)
 8002270:	f043 0310 	orr.w	r3, r3, #16
 8002274:	67d3      	str	r3, [r2, #124]	@ 0x7c
    __HAL_RCC_DMA2D_RELEASE_RESET();
 8002276:	4b08      	ldr	r3, [pc, #32]	@ (8002298 <_ZN8STM32DMA10initializeEv+0x54>)
 8002278:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800227a:	4a07      	ldr	r2, [pc, #28]	@ (8002298 <_ZN8STM32DMA10initializeEv+0x54>)
 800227c:	f023 0310 	bic.w	r3, r3, #16
 8002280:	67d3      	str	r3, [r2, #124]	@ 0x7c

    /* Add transfer complete callback function */
    hdma2d.XferCpltCallback = DMA2D_XferCpltCallback;
 8002282:	4b06      	ldr	r3, [pc, #24]	@ (800229c <_ZN8STM32DMA10initializeEv+0x58>)
 8002284:	4a06      	ldr	r2, [pc, #24]	@ (80022a0 <_ZN8STM32DMA10initializeEv+0x5c>)
 8002286:	621a      	str	r2, [r3, #32]

    /* Enable DMA2D global Interrupt */
    NVIC_EnableIRQ(DMA2D_IRQn);
 8002288:	205a      	movs	r0, #90	@ 0x5a
 800228a:	f7ff fe6d 	bl	8001f68 <__NVIC_EnableIRQ>
}
 800228e:	bf00      	nop
 8002290:	3710      	adds	r7, #16
 8002292:	46bd      	mov	sp, r7
 8002294:	bd80      	pop	{r7, pc}
 8002296:	bf00      	nop
 8002298:	58024400 	.word	0x58024400
 800229c:	2400016c 	.word	0x2400016c
 80022a0:	0800215f 	.word	0x0800215f

080022a4 <_ZN8STM32DMA22getChromARTInputFormatEN8touchgfx6Bitmap12BitmapFormatE>:

inline uint32_t STM32DMA::getChromARTInputFormat(Bitmap::BitmapFormat format)
{
 80022a4:	b580      	push	{r7, lr}
 80022a6:	b084      	sub	sp, #16
 80022a8:	af00      	add	r7, sp, #0
 80022aa:	6078      	str	r0, [r7, #4]
 80022ac:	460b      	mov	r3, r1
 80022ae:	70fb      	strb	r3, [r7, #3]
    // Default color mode set to ARGB8888
    uint32_t dma2dColorMode = DMA2D_INPUT_ARGB8888;
 80022b0:	2300      	movs	r3, #0
 80022b2:	60fb      	str	r3, [r7, #12]

    switch (format)
 80022b4:	78fb      	ldrb	r3, [r7, #3]
 80022b6:	2b0b      	cmp	r3, #11
 80022b8:	d826      	bhi.n	8002308 <_ZN8STM32DMA22getChromARTInputFormatEN8touchgfx6Bitmap12BitmapFormatE+0x64>
 80022ba:	a201      	add	r2, pc, #4	@ (adr r2, 80022c0 <_ZN8STM32DMA22getChromARTInputFormatEN8touchgfx6Bitmap12BitmapFormatE+0x1c>)
 80022bc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80022c0:	080022fd 	.word	0x080022fd
 80022c4:	080022f7 	.word	0x080022f7
 80022c8:	080022f1 	.word	0x080022f1
 80022cc:	08002309 	.word	0x08002309
 80022d0:	08002309 	.word	0x08002309
 80022d4:	08002309 	.word	0x08002309
 80022d8:	08002309 	.word	0x08002309
 80022dc:	08002303 	.word	0x08002303
 80022e0:	08002303 	.word	0x08002303
 80022e4:	08002303 	.word	0x08002303
 80022e8:	08002303 	.word	0x08002303
 80022ec:	08002303 	.word	0x08002303
    {
    case Bitmap::ARGB8888: /* DMA2D input mode set to 32bit ARGB */
        dma2dColorMode = DMA2D_INPUT_ARGB8888;
 80022f0:	2300      	movs	r3, #0
 80022f2:	60fb      	str	r3, [r7, #12]
        break;
 80022f4:	e00e      	b.n	8002314 <_ZN8STM32DMA22getChromARTInputFormatEN8touchgfx6Bitmap12BitmapFormatE+0x70>
    case Bitmap::RGB888: /* DMA2D input mode set to 24bit RGB */
        dma2dColorMode = DMA2D_INPUT_RGB888;
 80022f6:	2301      	movs	r3, #1
 80022f8:	60fb      	str	r3, [r7, #12]
        break;
 80022fa:	e00b      	b.n	8002314 <_ZN8STM32DMA22getChromARTInputFormatEN8touchgfx6Bitmap12BitmapFormatE+0x70>
    case Bitmap::RGB565: /* DMA2D input mode set to 16bit RGB */
        dma2dColorMode = DMA2D_INPUT_RGB565;
 80022fc:	2302      	movs	r3, #2
 80022fe:	60fb      	str	r3, [r7, #12]
        break;
 8002300:	e008      	b.n	8002314 <_ZN8STM32DMA22getChromARTInputFormatEN8touchgfx6Bitmap12BitmapFormatE+0x70>
    case Bitmap::ARGB2222: /* Fall through */
    case Bitmap::ABGR2222: /* Fall through */
    case Bitmap::RGBA2222: /* Fall through */
    case Bitmap::BGRA2222: /* Fall through */
    case Bitmap::L8:       /* DMA2D input mode set to 8bit Color Look up table*/
        dma2dColorMode = DMA2D_INPUT_L8;
 8002302:	2305      	movs	r3, #5
 8002304:	60fb      	str	r3, [r7, #12]
        break;
 8002306:	e005      	b.n	8002314 <_ZN8STM32DMA22getChromARTInputFormatEN8touchgfx6Bitmap12BitmapFormatE+0x70>
    case Bitmap::BW:     /* Fall through */
    case Bitmap::BW_RLE: /* Fall through */
    case Bitmap::GRAY4:  /* Fall through */
    case Bitmap::GRAY2:  /* Fall through */
    default:             /* Unsupported input format for DMA2D */
        assert(0 && "Unsupported Format!");
 8002308:	4b05      	ldr	r3, [pc, #20]	@ (8002320 <_ZN8STM32DMA22getChromARTInputFormatEN8touchgfx6Bitmap12BitmapFormatE+0x7c>)
 800230a:	4a06      	ldr	r2, [pc, #24]	@ (8002324 <_ZN8STM32DMA22getChromARTInputFormatEN8touchgfx6Bitmap12BitmapFormatE+0x80>)
 800230c:	2166      	movs	r1, #102	@ 0x66
 800230e:	4806      	ldr	r0, [pc, #24]	@ (8002328 <_ZN8STM32DMA22getChromARTInputFormatEN8touchgfx6Bitmap12BitmapFormatE+0x84>)
 8002310:	f028 fb10 	bl	802a934 <__assert_func>
        break;
    }

    return dma2dColorMode;
 8002314:	68fb      	ldr	r3, [r7, #12]
}
 8002316:	4618      	mov	r0, r3
 8002318:	3710      	adds	r7, #16
 800231a:	46bd      	mov	sp, r7
 800231c:	bd80      	pop	{r7, pc}
 800231e:	bf00      	nop
 8002320:	0802bd1c 	.word	0x0802bd1c
 8002324:	0802bd38 	.word	0x0802bd38
 8002328:	0802bd84 	.word	0x0802bd84

0800232c <_ZN8STM32DMA23getChromARTOutputFormatEN8touchgfx6Bitmap12BitmapFormatE>:

inline uint32_t STM32DMA::getChromARTOutputFormat(Bitmap::BitmapFormat format)
{
 800232c:	b580      	push	{r7, lr}
 800232e:	b084      	sub	sp, #16
 8002330:	af00      	add	r7, sp, #0
 8002332:	6078      	str	r0, [r7, #4]
 8002334:	460b      	mov	r3, r1
 8002336:	70fb      	strb	r3, [r7, #3]
    // Default color mode set to ARGB8888
    uint32_t dma2dColorMode = DMA2D_OUTPUT_ARGB8888;
 8002338:	2300      	movs	r3, #0
 800233a:	60fb      	str	r3, [r7, #12]

    switch (format)
 800233c:	78fb      	ldrb	r3, [r7, #3]
 800233e:	2b0a      	cmp	r3, #10
 8002340:	d821      	bhi.n	8002386 <_ZN8STM32DMA23getChromARTOutputFormatEN8touchgfx6Bitmap12BitmapFormatE+0x5a>
 8002342:	a201      	add	r2, pc, #4	@ (adr r2, 8002348 <_ZN8STM32DMA23getChromARTOutputFormatEN8touchgfx6Bitmap12BitmapFormatE+0x1c>)
 8002344:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002348:	08002381 	.word	0x08002381
 800234c:	0800237b 	.word	0x0800237b
 8002350:	08002375 	.word	0x08002375
 8002354:	08002387 	.word	0x08002387
 8002358:	08002387 	.word	0x08002387
 800235c:	08002387 	.word	0x08002387
 8002360:	08002387 	.word	0x08002387
 8002364:	0800237b 	.word	0x0800237b
 8002368:	0800237b 	.word	0x0800237b
 800236c:	0800237b 	.word	0x0800237b
 8002370:	0800237b 	.word	0x0800237b
    {
    case Bitmap::ARGB8888: /* DMA2D output mode set to 32bit ARGB */
        dma2dColorMode = DMA2D_OUTPUT_ARGB8888;
 8002374:	2300      	movs	r3, #0
 8002376:	60fb      	str	r3, [r7, #12]
        break;
 8002378:	e00b      	b.n	8002392 <_ZN8STM32DMA23getChromARTOutputFormatEN8touchgfx6Bitmap12BitmapFormatE+0x66>
    case Bitmap::RGB888:   /* Fall through */
    case Bitmap::ARGB2222: /* Fall through */
    case Bitmap::ABGR2222: /* Fall through */
    case Bitmap::RGBA2222: /* Fall through */
    case Bitmap::BGRA2222: /* DMA2D output mode set to 24bit RGB */
        dma2dColorMode = DMA2D_OUTPUT_RGB888;
 800237a:	2301      	movs	r3, #1
 800237c:	60fb      	str	r3, [r7, #12]
        break;
 800237e:	e008      	b.n	8002392 <_ZN8STM32DMA23getChromARTOutputFormatEN8touchgfx6Bitmap12BitmapFormatE+0x66>
    case Bitmap::RGB565: /* DMA2D output mode set to 16bit RGB */
        dma2dColorMode = DMA2D_OUTPUT_RGB565;
 8002380:	2302      	movs	r3, #2
 8002382:	60fb      	str	r3, [r7, #12]
        break;
 8002384:	e005      	b.n	8002392 <_ZN8STM32DMA23getChromARTOutputFormatEN8touchgfx6Bitmap12BitmapFormatE+0x66>
    case Bitmap::BW:     /* Fall through */
    case Bitmap::BW_RLE: /* Fall through */
    case Bitmap::GRAY4:  /* Fall through */
    case Bitmap::GRAY2:  /* Fall through */
    default:             /* Unsupported output format for DMA2D */
        assert(0 && "Unsupported Format!");
 8002386:	4b05      	ldr	r3, [pc, #20]	@ (800239c <_ZN8STM32DMA23getChromARTOutputFormatEN8touchgfx6Bitmap12BitmapFormatE+0x70>)
 8002388:	4a05      	ldr	r2, [pc, #20]	@ (80023a0 <_ZN8STM32DMA23getChromARTOutputFormatEN8touchgfx6Bitmap12BitmapFormatE+0x74>)
 800238a:	2187      	movs	r1, #135	@ 0x87
 800238c:	4805      	ldr	r0, [pc, #20]	@ (80023a4 <_ZN8STM32DMA23getChromARTOutputFormatEN8touchgfx6Bitmap12BitmapFormatE+0x78>)
 800238e:	f028 fad1 	bl	802a934 <__assert_func>
        break;
    }

    return dma2dColorMode;
 8002392:	68fb      	ldr	r3, [r7, #12]
}
 8002394:	4618      	mov	r0, r3
 8002396:	3710      	adds	r7, #16
 8002398:	46bd      	mov	sp, r7
 800239a:	bd80      	pop	{r7, pc}
 800239c:	0802bd1c 	.word	0x0802bd1c
 80023a0:	0802be14 	.word	0x0802be14
 80023a4:	0802bd84 	.word	0x0802bd84

080023a8 <_ZN8STM32DMA11getBlitCapsEv>:

BlitOperations STM32DMA::getBlitCaps()
{
 80023a8:	b480      	push	{r7}
 80023aa:	b083      	sub	sp, #12
 80023ac:	af00      	add	r7, sp, #0
 80023ae:	6078      	str	r0, [r7, #4]
                                       | BLIT_OP_COPY_L8
                                       | BLIT_OP_COPY_WITH_ALPHA
                                       | BLIT_OP_COPY_ARGB8888
                                       | BLIT_OP_COPY_ARGB8888_WITH_ALPHA
                                       | BLIT_OP_COPY_A4
                                       | BLIT_OP_COPY_A8);
 80023b0:	f240 33ef 	movw	r3, #1007	@ 0x3ef
}
 80023b4:	4618      	mov	r0, r3
 80023b6:	370c      	adds	r7, #12
 80023b8:	46bd      	mov	sp, r7
 80023ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023be:	4770      	bx	lr

080023c0 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE>:
 * BLIT_OP_COPY_ARGB8888_WITH_ALPHA
 * BLIT_OP_COPY_A4
 * BLIT_OP_COPY_A8
 */
void STM32DMA::setupDataCopy(const BlitOp& blitOp)
{
 80023c0:	b590      	push	{r4, r7, lr}
 80023c2:	b089      	sub	sp, #36	@ 0x24
 80023c4:	af00      	add	r7, sp, #0
 80023c6:	6078      	str	r0, [r7, #4]
 80023c8:	6039      	str	r1, [r7, #0]
    uint32_t dma2dForegroundColorMode = getChromARTInputFormat(static_cast<Bitmap::BitmapFormat>(blitOp.srcFormat));
 80023ca:	683b      	ldr	r3, [r7, #0]
 80023cc:	7f5b      	ldrb	r3, [r3, #29]
 80023ce:	4619      	mov	r1, r3
 80023d0:	6878      	ldr	r0, [r7, #4]
 80023d2:	f7ff ff67 	bl	80022a4 <_ZN8STM32DMA22getChromARTInputFormatEN8touchgfx6Bitmap12BitmapFormatE>
 80023d6:	61b8      	str	r0, [r7, #24]
    uint32_t dma2dBackgroundColorMode = getChromARTInputFormat(static_cast<Bitmap::BitmapFormat>(blitOp.dstFormat));
 80023d8:	683b      	ldr	r3, [r7, #0]
 80023da:	7f9b      	ldrb	r3, [r3, #30]
 80023dc:	4619      	mov	r1, r3
 80023de:	6878      	ldr	r0, [r7, #4]
 80023e0:	f7ff ff60 	bl	80022a4 <_ZN8STM32DMA22getChromARTInputFormatEN8touchgfx6Bitmap12BitmapFormatE>
 80023e4:	6178      	str	r0, [r7, #20]
    uint32_t dma2dOutputColorMode = getChromARTOutputFormat(static_cast<Bitmap::BitmapFormat>(blitOp.dstFormat));
 80023e6:	683b      	ldr	r3, [r7, #0]
 80023e8:	7f9b      	ldrb	r3, [r3, #30]
 80023ea:	4619      	mov	r1, r3
 80023ec:	6878      	ldr	r0, [r7, #4]
 80023ee:	f7ff ff9d 	bl	800232c <_ZN8STM32DMA23getChromARTOutputFormatEN8touchgfx6Bitmap12BitmapFormatE>
 80023f2:	6138      	str	r0, [r7, #16]

    /* DMA2D OOR register configuration ------------------------------------------*/
    WRITE_REG(DMA2D->OOR, blitOp.dstLoopStride - blitOp.nSteps);
 80023f4:	683b      	ldr	r3, [r7, #0]
 80023f6:	8b5b      	ldrh	r3, [r3, #26]
 80023f8:	461a      	mov	r2, r3
 80023fa:	683b      	ldr	r3, [r7, #0]
 80023fc:	8a9b      	ldrh	r3, [r3, #20]
 80023fe:	1ad2      	subs	r2, r2, r3
 8002400:	4b93      	ldr	r3, [pc, #588]	@ (8002650 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x290>)
 8002402:	641a      	str	r2, [r3, #64]	@ 0x40

    /* DMA2D BGOR register configuration -------------------------------------*/
    WRITE_REG(DMA2D->BGOR, blitOp.dstLoopStride - blitOp.nSteps);
 8002404:	683b      	ldr	r3, [r7, #0]
 8002406:	8b5b      	ldrh	r3, [r3, #26]
 8002408:	461a      	mov	r2, r3
 800240a:	683b      	ldr	r3, [r7, #0]
 800240c:	8a9b      	ldrh	r3, [r3, #20]
 800240e:	1ad2      	subs	r2, r2, r3
 8002410:	4b8f      	ldr	r3, [pc, #572]	@ (8002650 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x290>)
 8002412:	619a      	str	r2, [r3, #24]

    /* DMA2D FGOR register configuration -------------------------------------*/
    WRITE_REG(DMA2D->FGOR, blitOp.srcLoopStride - blitOp.nSteps);
 8002414:	683b      	ldr	r3, [r7, #0]
 8002416:	8b1b      	ldrh	r3, [r3, #24]
 8002418:	461a      	mov	r2, r3
 800241a:	683b      	ldr	r3, [r7, #0]
 800241c:	8a9b      	ldrh	r3, [r3, #20]
 800241e:	1ad2      	subs	r2, r2, r3
 8002420:	4b8b      	ldr	r3, [pc, #556]	@ (8002650 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x290>)
 8002422:	611a      	str	r2, [r3, #16]

    /* DMA2D OPFCCR register configuration ---------------------------------------*/
    WRITE_REG(DMA2D->OPFCCR, dma2dOutputColorMode);
 8002424:	4a8a      	ldr	r2, [pc, #552]	@ (8002650 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x290>)
 8002426:	693b      	ldr	r3, [r7, #16]
 8002428:	6353      	str	r3, [r2, #52]	@ 0x34

    /* Configure DMA2D data size */
    WRITE_REG(DMA2D->NLR, (blitOp.nLoops | (blitOp.nSteps << DMA2D_NLR_PL_Pos)));
 800242a:	683b      	ldr	r3, [r7, #0]
 800242c:	8adb      	ldrh	r3, [r3, #22]
 800242e:	461a      	mov	r2, r3
 8002430:	683b      	ldr	r3, [r7, #0]
 8002432:	8a9b      	ldrh	r3, [r3, #20]
 8002434:	041b      	lsls	r3, r3, #16
 8002436:	431a      	orrs	r2, r3
 8002438:	4b85      	ldr	r3, [pc, #532]	@ (8002650 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x290>)
 800243a:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Configure DMA2D destination address */
    WRITE_REG(DMA2D->OMAR, reinterpret_cast<uint32_t>(blitOp.pDst));
 800243c:	683b      	ldr	r3, [r7, #0]
 800243e:	691a      	ldr	r2, [r3, #16]
 8002440:	4b83      	ldr	r3, [pc, #524]	@ (8002650 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x290>)
 8002442:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Configure DMA2D source address */
    WRITE_REG(DMA2D->FGMAR, reinterpret_cast<uint32_t>(blitOp.pSrc));
 8002444:	683b      	ldr	r3, [r7, #0]
 8002446:	685a      	ldr	r2, [r3, #4]
 8002448:	4b81      	ldr	r3, [pc, #516]	@ (8002650 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x290>)
 800244a:	60da      	str	r2, [r3, #12]

    switch (blitOp.operation)
 800244c:	683b      	ldr	r3, [r7, #0]
 800244e:	681b      	ldr	r3, [r3, #0]
 8002450:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8002454:	d035      	beq.n	80024c2 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x102>
 8002456:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800245a:	f200 80dd 	bhi.w	8002618 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x258>
 800245e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8002462:	d014      	beq.n	800248e <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0xce>
 8002464:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8002468:	f200 80d6 	bhi.w	8002618 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x258>
 800246c:	2b80      	cmp	r3, #128	@ 0x80
 800246e:	d056      	beq.n	800251e <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x15e>
 8002470:	2b80      	cmp	r3, #128	@ 0x80
 8002472:	f200 80d1 	bhi.w	8002618 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x258>
 8002476:	2b40      	cmp	r3, #64	@ 0x40
 8002478:	f000 80ba 	beq.w	80025f0 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x230>
 800247c:	2b40      	cmp	r3, #64	@ 0x40
 800247e:	f200 80cb 	bhi.w	8002618 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x258>
 8002482:	2b04      	cmp	r3, #4
 8002484:	d037      	beq.n	80024f6 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x136>
 8002486:	2b20      	cmp	r3, #32
 8002488:	f000 80b2 	beq.w	80025f0 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x230>
 800248c:	e0c4      	b.n	8002618 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x258>
    {
    case BLIT_OP_COPY_A4:
        /* Set DMA2D color mode and alpha mode */
        WRITE_REG(DMA2D->FGPFCCR, DMA2D_INPUT_A4 | (DMA2D_COMBINE_ALPHA << DMA2D_BGPFCCR_AM_Pos) | (blitOp.alpha << 24));
 800248e:	683b      	ldr	r3, [r7, #0]
 8002490:	7f1b      	ldrb	r3, [r3, #28]
 8002492:	061a      	lsls	r2, r3, #24
 8002494:	496e      	ldr	r1, [pc, #440]	@ (8002650 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x290>)
 8002496:	4b6f      	ldr	r3, [pc, #444]	@ (8002654 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x294>)
 8002498:	4313      	orrs	r3, r2
 800249a:	61cb      	str	r3, [r1, #28]

        /* set DMA2D foreground color */
        WRITE_REG(DMA2D->FGCOLR, blitOp.color);
 800249c:	683b      	ldr	r3, [r7, #0]
 800249e:	330c      	adds	r3, #12
 80024a0:	4c6b      	ldr	r4, [pc, #428]	@ (8002650 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x290>)
 80024a2:	4618      	mov	r0, r3
 80024a4:	f7ff fdb0 	bl	8002008 <_ZNK8touchgfx9colortypecvmEv>
 80024a8:	4603      	mov	r3, r0
 80024aa:	6223      	str	r3, [r4, #32]

        /* Write DMA2D BGPFCCR register */
        WRITE_REG(DMA2D->BGPFCCR, dma2dBackgroundColorMode | (DMA2D_NO_MODIF_ALPHA << DMA2D_BGPFCCR_AM_Pos));
 80024ac:	4a68      	ldr	r2, [pc, #416]	@ (8002650 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x290>)
 80024ae:	697b      	ldr	r3, [r7, #20]
 80024b0:	6253      	str	r3, [r2, #36]	@ 0x24

        /* Configure DMA2D Stream source2 address */
        WRITE_REG(DMA2D->BGMAR, reinterpret_cast<uint32_t>(blitOp.pDst));
 80024b2:	683b      	ldr	r3, [r7, #0]
 80024b4:	691a      	ldr	r2, [r3, #16]
 80024b6:	4b66      	ldr	r3, [pc, #408]	@ (8002650 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x290>)
 80024b8:	615a      	str	r2, [r3, #20]

        /* Set DMA2D mode */
        WRITE_REG(DMA2D->CR, DMA2D_M2M_BLEND | DMA2D_IT_TC | DMA2D_CR_START);
 80024ba:	4b65      	ldr	r3, [pc, #404]	@ (8002650 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x290>)
 80024bc:	4a66      	ldr	r2, [pc, #408]	@ (8002658 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x298>)
 80024be:	601a      	str	r2, [r3, #0]
        break;
 80024c0:	e0c2      	b.n	8002648 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x288>
    case BLIT_OP_COPY_A8:
        /* Set DMA2D color mode and alpha mode */
        WRITE_REG(DMA2D->FGPFCCR, DMA2D_INPUT_A8 | (DMA2D_COMBINE_ALPHA << DMA2D_BGPFCCR_AM_Pos) | (blitOp.alpha << 24));
 80024c2:	683b      	ldr	r3, [r7, #0]
 80024c4:	7f1b      	ldrb	r3, [r3, #28]
 80024c6:	061a      	lsls	r2, r3, #24
 80024c8:	4961      	ldr	r1, [pc, #388]	@ (8002650 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x290>)
 80024ca:	4b64      	ldr	r3, [pc, #400]	@ (800265c <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x29c>)
 80024cc:	4313      	orrs	r3, r2
 80024ce:	61cb      	str	r3, [r1, #28]

        /* set DMA2D foreground color */
        WRITE_REG(DMA2D->FGCOLR, blitOp.color);
 80024d0:	683b      	ldr	r3, [r7, #0]
 80024d2:	330c      	adds	r3, #12
 80024d4:	4c5e      	ldr	r4, [pc, #376]	@ (8002650 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x290>)
 80024d6:	4618      	mov	r0, r3
 80024d8:	f7ff fd96 	bl	8002008 <_ZNK8touchgfx9colortypecvmEv>
 80024dc:	4603      	mov	r3, r0
 80024de:	6223      	str	r3, [r4, #32]

        /* Write DMA2D BGPFCCR register */
        WRITE_REG(DMA2D->BGPFCCR, dma2dBackgroundColorMode | (DMA2D_NO_MODIF_ALPHA << DMA2D_BGPFCCR_AM_Pos));
 80024e0:	4a5b      	ldr	r2, [pc, #364]	@ (8002650 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x290>)
 80024e2:	697b      	ldr	r3, [r7, #20]
 80024e4:	6253      	str	r3, [r2, #36]	@ 0x24

        /* Configure DMA2D Stream source2 address */
        WRITE_REG(DMA2D->BGMAR, reinterpret_cast<uint32_t>(blitOp.pDst));
 80024e6:	683b      	ldr	r3, [r7, #0]
 80024e8:	691a      	ldr	r2, [r3, #16]
 80024ea:	4b59      	ldr	r3, [pc, #356]	@ (8002650 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x290>)
 80024ec:	615a      	str	r2, [r3, #20]

        /* Set DMA2D mode */
        WRITE_REG(DMA2D->CR, DMA2D_M2M_BLEND | DMA2D_IT_TC | DMA2D_CR_START);
 80024ee:	4b58      	ldr	r3, [pc, #352]	@ (8002650 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x290>)
 80024f0:	4a59      	ldr	r2, [pc, #356]	@ (8002658 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x298>)
 80024f2:	601a      	str	r2, [r3, #0]
        break;
 80024f4:	e0a8      	b.n	8002648 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x288>
    case BLIT_OP_COPY_WITH_ALPHA:
        /* Set DMA2D color mode and alpha mode */
        WRITE_REG(DMA2D->FGPFCCR, dma2dForegroundColorMode | (DMA2D_COMBINE_ALPHA << DMA2D_BGPFCCR_AM_Pos) | (blitOp.alpha << 24));
 80024f6:	683b      	ldr	r3, [r7, #0]
 80024f8:	7f1b      	ldrb	r3, [r3, #28]
 80024fa:	061a      	lsls	r2, r3, #24
 80024fc:	69bb      	ldr	r3, [r7, #24]
 80024fe:	4313      	orrs	r3, r2
 8002500:	4a53      	ldr	r2, [pc, #332]	@ (8002650 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x290>)
 8002502:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002506:	61d3      	str	r3, [r2, #28]

        /* Write DMA2D BGPFCCR register */
        WRITE_REG(DMA2D->BGPFCCR, dma2dBackgroundColorMode | (DMA2D_NO_MODIF_ALPHA << DMA2D_BGPFCCR_AM_Pos));
 8002508:	4a51      	ldr	r2, [pc, #324]	@ (8002650 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x290>)
 800250a:	697b      	ldr	r3, [r7, #20]
 800250c:	6253      	str	r3, [r2, #36]	@ 0x24

        /* Configure DMA2D Stream source2 address */
        WRITE_REG(DMA2D->BGMAR, reinterpret_cast<uint32_t>(blitOp.pDst));
 800250e:	683b      	ldr	r3, [r7, #0]
 8002510:	691a      	ldr	r2, [r3, #16]
 8002512:	4b4f      	ldr	r3, [pc, #316]	@ (8002650 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x290>)
 8002514:	615a      	str	r2, [r3, #20]

        /* Set DMA2D mode */
        WRITE_REG(DMA2D->CR, DMA2D_M2M_BLEND | DMA2D_IT_TC | DMA2D_CR_START);
 8002516:	4b4e      	ldr	r3, [pc, #312]	@ (8002650 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x290>)
 8002518:	4a4f      	ldr	r2, [pc, #316]	@ (8002658 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x298>)
 800251a:	601a      	str	r2, [r3, #0]
        break;
 800251c:	e094      	b.n	8002648 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x288>
    case BLIT_OP_COPY_L8:
        {
            bool blend = true;
 800251e:	2301      	movs	r3, #1
 8002520:	77fb      	strb	r3, [r7, #31]
            const clutData_t* const palette = reinterpret_cast<const clutData_t*>(blitOp.pClut);
 8002522:	683b      	ldr	r3, [r7, #0]
 8002524:	689b      	ldr	r3, [r3, #8]
 8002526:	60fb      	str	r3, [r7, #12]

            /* Write foreground CLUT memory address */
            WRITE_REG(DMA2D->FGCMAR, reinterpret_cast<uint32_t>(&palette->data));
 8002528:	68fb      	ldr	r3, [r7, #12]
 800252a:	1d1a      	adds	r2, r3, #4
 800252c:	4b48      	ldr	r3, [pc, #288]	@ (8002650 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x290>)
 800252e:	62da      	str	r2, [r3, #44]	@ 0x2c

            /* Set DMA2D color mode and alpha mode */
            WRITE_REG(DMA2D->FGPFCCR, dma2dForegroundColorMode | (DMA2D_COMBINE_ALPHA << DMA2D_BGPFCCR_AM_Pos) | (blitOp.alpha << 24));
 8002530:	683b      	ldr	r3, [r7, #0]
 8002532:	7f1b      	ldrb	r3, [r3, #28]
 8002534:	061a      	lsls	r2, r3, #24
 8002536:	69bb      	ldr	r3, [r7, #24]
 8002538:	4313      	orrs	r3, r2
 800253a:	4a45      	ldr	r2, [pc, #276]	@ (8002650 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x290>)
 800253c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002540:	61d3      	str	r3, [r2, #28]

            /* Write DMA2D BGPFCCR register */
            WRITE_REG(DMA2D->BGPFCCR, dma2dBackgroundColorMode | (DMA2D_NO_MODIF_ALPHA << DMA2D_BGPFCCR_AM_Pos));
 8002542:	4a43      	ldr	r2, [pc, #268]	@ (8002650 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x290>)
 8002544:	697b      	ldr	r3, [r7, #20]
 8002546:	6253      	str	r3, [r2, #36]	@ 0x24

            /* Configure DMA2D Stream source2 address */
            WRITE_REG(DMA2D->BGMAR, reinterpret_cast<uint32_t>(blitOp.pDst));
 8002548:	683b      	ldr	r3, [r7, #0]
 800254a:	691a      	ldr	r2, [r3, #16]
 800254c:	4b40      	ldr	r3, [pc, #256]	@ (8002650 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x290>)
 800254e:	615a      	str	r2, [r3, #20]

            /* Configure CLUT */
            switch ((Bitmap::ClutFormat)palette->format)
 8002550:	68fb      	ldr	r3, [r7, #12]
 8002552:	881b      	ldrh	r3, [r3, #0]
 8002554:	b2db      	uxtb	r3, r3
 8002556:	2b00      	cmp	r3, #0
 8002558:	d002      	beq.n	8002560 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x1a0>
 800255a:	2b01      	cmp	r3, #1
 800255c:	d00d      	beq.n	800257a <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x1ba>
 800255e:	e020      	b.n	80025a2 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x1e2>
            {
            case Bitmap::CLUT_FORMAT_L8_ARGB8888:
                /* Write foreground CLUT size and CLUT color mode */
                MODIFY_REG(DMA2D->FGPFCCR, (DMA2D_FGPFCCR_CS | DMA2D_FGPFCCR_CCM), (((palette->size - 1) << DMA2D_FGPFCCR_CS_Pos) | (DMA2D_CCM_ARGB8888 << DMA2D_FGPFCCR_CCM_Pos)));
 8002560:	4b3b      	ldr	r3, [pc, #236]	@ (8002650 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x290>)
 8002562:	69da      	ldr	r2, [r3, #28]
 8002564:	4b3e      	ldr	r3, [pc, #248]	@ (8002660 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x2a0>)
 8002566:	4013      	ands	r3, r2
 8002568:	68fa      	ldr	r2, [r7, #12]
 800256a:	8852      	ldrh	r2, [r2, #2]
 800256c:	3a01      	subs	r2, #1
 800256e:	0212      	lsls	r2, r2, #8
 8002570:	4611      	mov	r1, r2
 8002572:	4a37      	ldr	r2, [pc, #220]	@ (8002650 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x290>)
 8002574:	430b      	orrs	r3, r1
 8002576:	61d3      	str	r3, [r2, #28]
                break;
 8002578:	e01a      	b.n	80025b0 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x1f0>
            case Bitmap::CLUT_FORMAT_L8_RGB888:
                if(blitOp.alpha == 255)
 800257a:	683b      	ldr	r3, [r7, #0]
 800257c:	7f1b      	ldrb	r3, [r3, #28]
 800257e:	2bff      	cmp	r3, #255	@ 0xff
 8002580:	d101      	bne.n	8002586 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x1c6>
                {
                  blend = false;
 8002582:	2300      	movs	r3, #0
 8002584:	77fb      	strb	r3, [r7, #31]
                }
                MODIFY_REG(DMA2D->FGPFCCR, (DMA2D_FGPFCCR_CS | DMA2D_FGPFCCR_CCM), (((palette->size - 1) << DMA2D_FGPFCCR_CS_Pos) | (DMA2D_CCM_RGB888 << DMA2D_FGPFCCR_CCM_Pos)));
 8002586:	4b32      	ldr	r3, [pc, #200]	@ (8002650 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x290>)
 8002588:	69da      	ldr	r2, [r3, #28]
 800258a:	4b35      	ldr	r3, [pc, #212]	@ (8002660 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x2a0>)
 800258c:	4013      	ands	r3, r2
 800258e:	68fa      	ldr	r2, [r7, #12]
 8002590:	8852      	ldrh	r2, [r2, #2]
 8002592:	3a01      	subs	r2, #1
 8002594:	0212      	lsls	r2, r2, #8
 8002596:	4313      	orrs	r3, r2
 8002598:	4a2d      	ldr	r2, [pc, #180]	@ (8002650 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x290>)
 800259a:	f043 0310 	orr.w	r3, r3, #16
 800259e:	61d3      	str	r3, [r2, #28]
                break;
 80025a0:	e006      	b.n	80025b0 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x1f0>

            case Bitmap::CLUT_FORMAT_L8_RGB565:
            default:
                assert(0 && "Unsupported format");
 80025a2:	4b30      	ldr	r3, [pc, #192]	@ (8002664 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x2a4>)
 80025a4:	4a30      	ldr	r2, [pc, #192]	@ (8002668 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x2a8>)
 80025a6:	f240 1111 	movw	r1, #273	@ 0x111
 80025aa:	4830      	ldr	r0, [pc, #192]	@ (800266c <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x2ac>)
 80025ac:	f028 f9c2 	bl	802a934 <__assert_func>
                break;
            }

            /* Enable the CLUT loading for the foreground */
            SET_BIT(DMA2D->FGPFCCR, DMA2D_FGPFCCR_START);
 80025b0:	4b27      	ldr	r3, [pc, #156]	@ (8002650 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x290>)
 80025b2:	69db      	ldr	r3, [r3, #28]
 80025b4:	4a26      	ldr	r2, [pc, #152]	@ (8002650 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x290>)
 80025b6:	f043 0320 	orr.w	r3, r3, #32
 80025ba:	61d3      	str	r3, [r2, #28]

            while ((READ_REG(DMA2D->FGPFCCR) & DMA2D_FGPFCCR_START) != 0U)
 80025bc:	bf00      	nop
 80025be:	4b24      	ldr	r3, [pc, #144]	@ (8002650 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x290>)
 80025c0:	69db      	ldr	r3, [r3, #28]
 80025c2:	f003 0320 	and.w	r3, r3, #32
 80025c6:	2b00      	cmp	r3, #0
 80025c8:	bf14      	ite	ne
 80025ca:	2301      	movne	r3, #1
 80025cc:	2300      	moveq	r3, #0
 80025ce:	b2db      	uxtb	r3, r3
 80025d0:	2b00      	cmp	r3, #0
 80025d2:	d1f4      	bne.n	80025be <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x1fe>
            {
            }
            DMA2D->IFCR = (DMA2D_FLAG_CTC);
 80025d4:	4b1e      	ldr	r3, [pc, #120]	@ (8002650 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x290>)
 80025d6:	2210      	movs	r2, #16
 80025d8:	609a      	str	r2, [r3, #8]

            /* Set DMA2D mode */
            if(blend)
 80025da:	7ffb      	ldrb	r3, [r7, #31]
 80025dc:	2b00      	cmp	r3, #0
 80025de:	d003      	beq.n	80025e8 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x228>
            {
                WRITE_REG(DMA2D->CR, DMA2D_M2M_BLEND | DMA2D_IT_TC | DMA2D_CR_START);
 80025e0:	4b1b      	ldr	r3, [pc, #108]	@ (8002650 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x290>)
 80025e2:	4a1d      	ldr	r2, [pc, #116]	@ (8002658 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x298>)
 80025e4:	601a      	str	r2, [r3, #0]
            else
            {
                WRITE_REG(DMA2D->CR, DMA2D_M2M_PFC | DMA2D_IT_TC | DMA2D_CR_START);
            }
        }
      break;
 80025e6:	e02f      	b.n	8002648 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x288>
                WRITE_REG(DMA2D->CR, DMA2D_M2M_PFC | DMA2D_IT_TC | DMA2D_CR_START);
 80025e8:	4b19      	ldr	r3, [pc, #100]	@ (8002650 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x290>)
 80025ea:	4a21      	ldr	r2, [pc, #132]	@ (8002670 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x2b0>)
 80025ec:	601a      	str	r2, [r3, #0]
      break;
 80025ee:	e02b      	b.n	8002648 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x288>
    case BLIT_OP_COPY_ARGB8888:
    case BLIT_OP_COPY_ARGB8888_WITH_ALPHA:
        /* Set DMA2D color mode and alpha mode */
        WRITE_REG(DMA2D->FGPFCCR, dma2dForegroundColorMode | (DMA2D_COMBINE_ALPHA << DMA2D_BGPFCCR_AM_Pos) | (blitOp.alpha << 24));
 80025f0:	683b      	ldr	r3, [r7, #0]
 80025f2:	7f1b      	ldrb	r3, [r3, #28]
 80025f4:	061a      	lsls	r2, r3, #24
 80025f6:	69bb      	ldr	r3, [r7, #24]
 80025f8:	4313      	orrs	r3, r2
 80025fa:	4a15      	ldr	r2, [pc, #84]	@ (8002650 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x290>)
 80025fc:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002600:	61d3      	str	r3, [r2, #28]

        /* Write DMA2D BGPFCCR register */
        WRITE_REG(DMA2D->BGPFCCR, dma2dBackgroundColorMode | (DMA2D_NO_MODIF_ALPHA << DMA2D_BGPFCCR_AM_Pos));
 8002602:	4a13      	ldr	r2, [pc, #76]	@ (8002650 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x290>)
 8002604:	697b      	ldr	r3, [r7, #20]
 8002606:	6253      	str	r3, [r2, #36]	@ 0x24

        /* Configure DMA2D Stream source2 address */
        WRITE_REG(DMA2D->BGMAR, reinterpret_cast<uint32_t>(blitOp.pDst));
 8002608:	683b      	ldr	r3, [r7, #0]
 800260a:	691a      	ldr	r2, [r3, #16]
 800260c:	4b10      	ldr	r3, [pc, #64]	@ (8002650 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x290>)
 800260e:	615a      	str	r2, [r3, #20]

        /* Set DMA2D mode */
        WRITE_REG(DMA2D->CR, DMA2D_M2M_BLEND | DMA2D_IT_TC | DMA2D_CR_START);
 8002610:	4b0f      	ldr	r3, [pc, #60]	@ (8002650 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x290>)
 8002612:	4a11      	ldr	r2, [pc, #68]	@ (8002658 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x298>)
 8002614:	601a      	str	r2, [r3, #0]
        break;
 8002616:	e017      	b.n	8002648 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x288>
    default: /* BLIT_OP_COPY */
        /* Set DMA2D color mode and alpha mode */
        WRITE_REG(DMA2D->FGPFCCR, dma2dForegroundColorMode | (DMA2D_COMBINE_ALPHA << DMA2D_BGPFCCR_AM_Pos) | (blitOp.alpha << 24));
 8002618:	683b      	ldr	r3, [r7, #0]
 800261a:	7f1b      	ldrb	r3, [r3, #28]
 800261c:	061a      	lsls	r2, r3, #24
 800261e:	69bb      	ldr	r3, [r7, #24]
 8002620:	4313      	orrs	r3, r2
 8002622:	4a0b      	ldr	r2, [pc, #44]	@ (8002650 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x290>)
 8002624:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002628:	61d3      	str	r3, [r2, #28]

        /* Perform pixel-format-conversion (PFC) If Bitmap format is not same format as framebuffer format */
        if (blitOp.srcFormat != blitOp.dstFormat)
 800262a:	683b      	ldr	r3, [r7, #0]
 800262c:	7f5a      	ldrb	r2, [r3, #29]
 800262e:	683b      	ldr	r3, [r7, #0]
 8002630:	7f9b      	ldrb	r3, [r3, #30]
 8002632:	429a      	cmp	r2, r3
 8002634:	d003      	beq.n	800263e <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x27e>
        {
            /* Start DMA2D : PFC Mode */
            WRITE_REG(DMA2D->CR, DMA2D_M2M_PFC | DMA2D_IT_TC | DMA2D_CR_START);
 8002636:	4b06      	ldr	r3, [pc, #24]	@ (8002650 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x290>)
 8002638:	4a0d      	ldr	r2, [pc, #52]	@ (8002670 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x2b0>)
 800263a:	601a      	str	r2, [r3, #0]
        else
        {
            /* Start DMA2D : M2M Mode */
            WRITE_REG(DMA2D->CR, DMA2D_M2M | DMA2D_IT_TC | DMA2D_CR_START);
        }
        break;
 800263c:	e003      	b.n	8002646 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x286>
            WRITE_REG(DMA2D->CR, DMA2D_M2M | DMA2D_IT_TC | DMA2D_CR_START);
 800263e:	4b04      	ldr	r3, [pc, #16]	@ (8002650 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x290>)
 8002640:	f240 2201 	movw	r2, #513	@ 0x201
 8002644:	601a      	str	r2, [r3, #0]
        break;
 8002646:	bf00      	nop
    }
}
 8002648:	bf00      	nop
 800264a:	3724      	adds	r7, #36	@ 0x24
 800264c:	46bd      	mov	sp, r7
 800264e:	bd90      	pop	{r4, r7, pc}
 8002650:	52001000 	.word	0x52001000
 8002654:	0002000a 	.word	0x0002000a
 8002658:	00020201 	.word	0x00020201
 800265c:	00020009 	.word	0x00020009
 8002660:	ffff00ef 	.word	0xffff00ef
 8002664:	0802be60 	.word	0x0802be60
 8002668:	0802be7c 	.word	0x0802be7c
 800266c:	0802bd84 	.word	0x0802bd84
 8002670:	00010201 	.word	0x00010201

08002674 <_ZN8STM32DMA13setupDataFillERKN8touchgfx6BlitOpE>:
 * void STM32DMA::setupDataFill(const BlitOp& blitOp) handles blit operation of
 * BLIT_OP_FILL
 * BLIT_OP_FILL_WITH_ALPHA
 */
void STM32DMA::setupDataFill(const BlitOp& blitOp)
{
 8002674:	b590      	push	{r4, r7, lr}
 8002676:	b085      	sub	sp, #20
 8002678:	af00      	add	r7, sp, #0
 800267a:	6078      	str	r0, [r7, #4]
 800267c:	6039      	str	r1, [r7, #0]
    uint32_t dma2dOutputColorMode = getChromARTOutputFormat(static_cast<Bitmap::BitmapFormat>(blitOp.dstFormat));
 800267e:	683b      	ldr	r3, [r7, #0]
 8002680:	7f9b      	ldrb	r3, [r3, #30]
 8002682:	4619      	mov	r1, r3
 8002684:	6878      	ldr	r0, [r7, #4]
 8002686:	f7ff fe51 	bl	800232c <_ZN8STM32DMA23getChromARTOutputFormatEN8touchgfx6Bitmap12BitmapFormatE>
 800268a:	60f8      	str	r0, [r7, #12]

    /* DMA2D OPFCCR register configuration ---------------------------------------*/
    WRITE_REG(DMA2D->OPFCCR, dma2dOutputColorMode);
 800268c:	4a3a      	ldr	r2, [pc, #232]	@ (8002778 <_ZN8STM32DMA13setupDataFillERKN8touchgfx6BlitOpE+0x104>)
 800268e:	68fb      	ldr	r3, [r7, #12]
 8002690:	6353      	str	r3, [r2, #52]	@ 0x34

    /* Configure DMA2D data size */
    WRITE_REG(DMA2D->NLR, (blitOp.nLoops | (blitOp.nSteps << DMA2D_NLR_PL_Pos)));
 8002692:	683b      	ldr	r3, [r7, #0]
 8002694:	8adb      	ldrh	r3, [r3, #22]
 8002696:	461a      	mov	r2, r3
 8002698:	683b      	ldr	r3, [r7, #0]
 800269a:	8a9b      	ldrh	r3, [r3, #20]
 800269c:	041b      	lsls	r3, r3, #16
 800269e:	431a      	orrs	r2, r3
 80026a0:	4b35      	ldr	r3, [pc, #212]	@ (8002778 <_ZN8STM32DMA13setupDataFillERKN8touchgfx6BlitOpE+0x104>)
 80026a2:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Configure DMA2D destination address */
    WRITE_REG(DMA2D->OMAR, reinterpret_cast<uint32_t>(blitOp.pDst));
 80026a4:	683b      	ldr	r3, [r7, #0]
 80026a6:	691a      	ldr	r2, [r3, #16]
 80026a8:	4b33      	ldr	r3, [pc, #204]	@ (8002778 <_ZN8STM32DMA13setupDataFillERKN8touchgfx6BlitOpE+0x104>)
 80026aa:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* DMA2D OOR register configuration ------------------------------------------*/
    WRITE_REG(DMA2D->OOR, blitOp.dstLoopStride - blitOp.nSteps);
 80026ac:	683b      	ldr	r3, [r7, #0]
 80026ae:	8b5b      	ldrh	r3, [r3, #26]
 80026b0:	461a      	mov	r2, r3
 80026b2:	683b      	ldr	r3, [r7, #0]
 80026b4:	8a9b      	ldrh	r3, [r3, #20]
 80026b6:	1ad2      	subs	r2, r2, r3
 80026b8:	4b2f      	ldr	r3, [pc, #188]	@ (8002778 <_ZN8STM32DMA13setupDataFillERKN8touchgfx6BlitOpE+0x104>)
 80026ba:	641a      	str	r2, [r3, #64]	@ 0x40

    if (blitOp.operation == BLIT_OP_FILL_WITH_ALPHA)
 80026bc:	683b      	ldr	r3, [r7, #0]
 80026be:	681b      	ldr	r3, [r3, #0]
 80026c0:	2b08      	cmp	r3, #8
 80026c2:	d12d      	bne.n	8002720 <_ZN8STM32DMA13setupDataFillERKN8touchgfx6BlitOpE+0xac>
    {
        /* DMA2D BGOR register configuration -------------------------------------*/
        WRITE_REG(DMA2D->BGOR, blitOp.dstLoopStride - blitOp.nSteps);
 80026c4:	683b      	ldr	r3, [r7, #0]
 80026c6:	8b5b      	ldrh	r3, [r3, #26]
 80026c8:	461a      	mov	r2, r3
 80026ca:	683b      	ldr	r3, [r7, #0]
 80026cc:	8a9b      	ldrh	r3, [r3, #20]
 80026ce:	1ad2      	subs	r2, r2, r3
 80026d0:	4b29      	ldr	r3, [pc, #164]	@ (8002778 <_ZN8STM32DMA13setupDataFillERKN8touchgfx6BlitOpE+0x104>)
 80026d2:	619a      	str	r2, [r3, #24]

        /* DMA2D FGOR register configuration -------------------------------------*/
        WRITE_REG(DMA2D->FGOR, blitOp.dstLoopStride - blitOp.nSteps);
 80026d4:	683b      	ldr	r3, [r7, #0]
 80026d6:	8b5b      	ldrh	r3, [r3, #26]
 80026d8:	461a      	mov	r2, r3
 80026da:	683b      	ldr	r3, [r7, #0]
 80026dc:	8a9b      	ldrh	r3, [r3, #20]
 80026de:	1ad2      	subs	r2, r2, r3
 80026e0:	4b25      	ldr	r3, [pc, #148]	@ (8002778 <_ZN8STM32DMA13setupDataFillERKN8touchgfx6BlitOpE+0x104>)
 80026e2:	611a      	str	r2, [r3, #16]

        /* Write DMA2D BGPFCCR register */
        WRITE_REG(DMA2D->BGPFCCR, dma2dOutputColorMode | (DMA2D_NO_MODIF_ALPHA << DMA2D_BGPFCCR_AM_Pos));
 80026e4:	4a24      	ldr	r2, [pc, #144]	@ (8002778 <_ZN8STM32DMA13setupDataFillERKN8touchgfx6BlitOpE+0x104>)
 80026e6:	68fb      	ldr	r3, [r7, #12]
 80026e8:	6253      	str	r3, [r2, #36]	@ 0x24

        /* Write DMA2D FGPFCCR register */
        WRITE_REG(DMA2D->FGPFCCR, CM_A8 | (DMA2D_REPLACE_ALPHA << DMA2D_BGPFCCR_AM_Pos) | ((blitOp.alpha << 24) & DMA2D_BGPFCCR_ALPHA));
 80026ea:	683b      	ldr	r3, [r7, #0]
 80026ec:	7f1b      	ldrb	r3, [r3, #28]
 80026ee:	061a      	lsls	r2, r3, #24
 80026f0:	4921      	ldr	r1, [pc, #132]	@ (8002778 <_ZN8STM32DMA13setupDataFillERKN8touchgfx6BlitOpE+0x104>)
 80026f2:	4b22      	ldr	r3, [pc, #136]	@ (800277c <_ZN8STM32DMA13setupDataFillERKN8touchgfx6BlitOpE+0x108>)
 80026f4:	4313      	orrs	r3, r2
 80026f6:	61cb      	str	r3, [r1, #28]

        /* DMA2D FGCOLR register configuration -------------------------------------*/
        WRITE_REG(DMA2D->FGCOLR, blitOp.color);
 80026f8:	683b      	ldr	r3, [r7, #0]
 80026fa:	330c      	adds	r3, #12
 80026fc:	4c1e      	ldr	r4, [pc, #120]	@ (8002778 <_ZN8STM32DMA13setupDataFillERKN8touchgfx6BlitOpE+0x104>)
 80026fe:	4618      	mov	r0, r3
 8002700:	f7ff fc82 	bl	8002008 <_ZNK8touchgfx9colortypecvmEv>
 8002704:	4603      	mov	r3, r0
 8002706:	6223      	str	r3, [r4, #32]

        /* Configure DMA2D Stream source2 address */
        WRITE_REG(DMA2D->BGMAR, reinterpret_cast<uint32_t>(blitOp.pDst));
 8002708:	683b      	ldr	r3, [r7, #0]
 800270a:	691a      	ldr	r2, [r3, #16]
 800270c:	4b1a      	ldr	r3, [pc, #104]	@ (8002778 <_ZN8STM32DMA13setupDataFillERKN8touchgfx6BlitOpE+0x104>)
 800270e:	615a      	str	r2, [r3, #20]

        /* Configure DMA2D source address */
        WRITE_REG(DMA2D->FGMAR, reinterpret_cast<uint32_t>(blitOp.pDst));
 8002710:	683b      	ldr	r3, [r7, #0]
 8002712:	691a      	ldr	r2, [r3, #16]
 8002714:	4b18      	ldr	r3, [pc, #96]	@ (8002778 <_ZN8STM32DMA13setupDataFillERKN8touchgfx6BlitOpE+0x104>)
 8002716:	60da      	str	r2, [r3, #12]

        /* Enable the Peripheral and Enable the transfer complete interrupt */
        WRITE_REG(DMA2D->CR, (DMA2D_IT_TC | DMA2D_CR_START | DMA2D_M2M_BLEND));
 8002718:	4b17      	ldr	r3, [pc, #92]	@ (8002778 <_ZN8STM32DMA13setupDataFillERKN8touchgfx6BlitOpE+0x104>)
 800271a:	4a19      	ldr	r2, [pc, #100]	@ (8002780 <_ZN8STM32DMA13setupDataFillERKN8touchgfx6BlitOpE+0x10c>)
 800271c:	601a      	str	r2, [r3, #0]
        WRITE_REG(DMA2D->OCOLR, ((blitOp.color >> 8) & 0xF800) | ((blitOp.color >> 5) & 0x07E0) | ((blitOp.color >> 3) & 0x001F));

        /* Enable the Peripheral and Enable the transfer complete interrupt */
        WRITE_REG(DMA2D->CR, (DMA2D_IT_TC | DMA2D_CR_START | DMA2D_R2M));
    }
}
 800271e:	e027      	b.n	8002770 <_ZN8STM32DMA13setupDataFillERKN8touchgfx6BlitOpE+0xfc>
        WRITE_REG(DMA2D->FGPFCCR, dma2dOutputColorMode | (DMA2D_NO_MODIF_ALPHA << DMA2D_BGPFCCR_AM_Pos));
 8002720:	4a15      	ldr	r2, [pc, #84]	@ (8002778 <_ZN8STM32DMA13setupDataFillERKN8touchgfx6BlitOpE+0x104>)
 8002722:	68fb      	ldr	r3, [r7, #12]
 8002724:	61d3      	str	r3, [r2, #28]
        WRITE_REG(DMA2D->FGOR, 0);
 8002726:	4b14      	ldr	r3, [pc, #80]	@ (8002778 <_ZN8STM32DMA13setupDataFillERKN8touchgfx6BlitOpE+0x104>)
 8002728:	2200      	movs	r2, #0
 800272a:	611a      	str	r2, [r3, #16]
        WRITE_REG(DMA2D->OCOLR, ((blitOp.color >> 8) & 0xF800) | ((blitOp.color >> 5) & 0x07E0) | ((blitOp.color >> 3) & 0x001F));
 800272c:	683b      	ldr	r3, [r7, #0]
 800272e:	330c      	adds	r3, #12
 8002730:	4618      	mov	r0, r3
 8002732:	f7ff fc69 	bl	8002008 <_ZNK8touchgfx9colortypecvmEv>
 8002736:	4603      	mov	r3, r0
 8002738:	0a1b      	lsrs	r3, r3, #8
 800273a:	f403 4478 	and.w	r4, r3, #63488	@ 0xf800
 800273e:	683b      	ldr	r3, [r7, #0]
 8002740:	330c      	adds	r3, #12
 8002742:	4618      	mov	r0, r3
 8002744:	f7ff fc60 	bl	8002008 <_ZNK8touchgfx9colortypecvmEv>
 8002748:	4603      	mov	r3, r0
 800274a:	095b      	lsrs	r3, r3, #5
 800274c:	f403 63fc 	and.w	r3, r3, #2016	@ 0x7e0
 8002750:	431c      	orrs	r4, r3
 8002752:	683b      	ldr	r3, [r7, #0]
 8002754:	330c      	adds	r3, #12
 8002756:	4618      	mov	r0, r3
 8002758:	f7ff fc56 	bl	8002008 <_ZNK8touchgfx9colortypecvmEv>
 800275c:	4603      	mov	r3, r0
 800275e:	08db      	lsrs	r3, r3, #3
 8002760:	f003 031f 	and.w	r3, r3, #31
 8002764:	4a04      	ldr	r2, [pc, #16]	@ (8002778 <_ZN8STM32DMA13setupDataFillERKN8touchgfx6BlitOpE+0x104>)
 8002766:	4323      	orrs	r3, r4
 8002768:	6393      	str	r3, [r2, #56]	@ 0x38
        WRITE_REG(DMA2D->CR, (DMA2D_IT_TC | DMA2D_CR_START | DMA2D_R2M));
 800276a:	4b03      	ldr	r3, [pc, #12]	@ (8002778 <_ZN8STM32DMA13setupDataFillERKN8touchgfx6BlitOpE+0x104>)
 800276c:	4a05      	ldr	r2, [pc, #20]	@ (8002784 <_ZN8STM32DMA13setupDataFillERKN8touchgfx6BlitOpE+0x110>)
 800276e:	601a      	str	r2, [r3, #0]
}
 8002770:	bf00      	nop
 8002772:	3714      	adds	r7, #20
 8002774:	46bd      	mov	sp, r7
 8002776:	bd90      	pop	{r4, r7, pc}
 8002778:	52001000 	.word	0x52001000
 800277c:	00010009 	.word	0x00010009
 8002780:	00020201 	.word	0x00020201
 8002784:	00030201 	.word	0x00030201

08002788 <_ZN8touchgfx17LockFreeDMA_QueueD1Ev>:
class LockFreeDMA_Queue : public DMA_Queue
 8002788:	b580      	push	{r7, lr}
 800278a:	b082      	sub	sp, #8
 800278c:	af00      	add	r7, sp, #0
 800278e:	6078      	str	r0, [r7, #4]
 8002790:	4a05      	ldr	r2, [pc, #20]	@ (80027a8 <_ZN8touchgfx17LockFreeDMA_QueueD1Ev+0x20>)
 8002792:	687b      	ldr	r3, [r7, #4]
 8002794:	601a      	str	r2, [r3, #0]
 8002796:	687b      	ldr	r3, [r7, #4]
 8002798:	4618      	mov	r0, r3
 800279a:	f7ff fc41 	bl	8002020 <_ZN8touchgfx9DMA_QueueD1Ev>
 800279e:	687b      	ldr	r3, [r7, #4]
 80027a0:	4618      	mov	r0, r3
 80027a2:	3708      	adds	r7, #8
 80027a4:	46bd      	mov	sp, r7
 80027a6:	bd80      	pop	{r7, pc}
 80027a8:	0802e528 	.word	0x0802e528

080027ac <_ZN8touchgfx17LockFreeDMA_QueueD0Ev>:
 80027ac:	b580      	push	{r7, lr}
 80027ae:	b082      	sub	sp, #8
 80027b0:	af00      	add	r7, sp, #0
 80027b2:	6078      	str	r0, [r7, #4]
 80027b4:	6878      	ldr	r0, [r7, #4]
 80027b6:	f7ff ffe7 	bl	8002788 <_ZN8touchgfx17LockFreeDMA_QueueD1Ev>
 80027ba:	2114      	movs	r1, #20
 80027bc:	6878      	ldr	r0, [r7, #4]
 80027be:	f028 f88a 	bl	802a8d6 <_ZdlPvj>
 80027c2:	687b      	ldr	r3, [r7, #4]
 80027c4:	4618      	mov	r0, r3
 80027c6:	3708      	adds	r7, #8
 80027c8:	46bd      	mov	sp, r7
 80027ca:	bd80      	pop	{r7, pc}

080027cc <_ZN8touchgfx4RectC1Ev>:
/** Class representing a Rectangle with a few convenient methods. */
class Rect
{
public:
    /** Default constructor. Resulting in an empty Rect with coordinates 0,0. */
    Rect()
 80027cc:	b480      	push	{r7}
 80027ce:	b083      	sub	sp, #12
 80027d0:	af00      	add	r7, sp, #0
 80027d2:	6078      	str	r0, [r7, #4]
        : x(0), y(0), width(0), height(0)
 80027d4:	687b      	ldr	r3, [r7, #4]
 80027d6:	2200      	movs	r2, #0
 80027d8:	801a      	strh	r2, [r3, #0]
 80027da:	687b      	ldr	r3, [r7, #4]
 80027dc:	2200      	movs	r2, #0
 80027de:	805a      	strh	r2, [r3, #2]
 80027e0:	687b      	ldr	r3, [r7, #4]
 80027e2:	2200      	movs	r2, #0
 80027e4:	809a      	strh	r2, [r3, #4]
 80027e6:	687b      	ldr	r3, [r7, #4]
 80027e8:	2200      	movs	r2, #0
 80027ea:	80da      	strh	r2, [r3, #6]
    {
    }
 80027ec:	687b      	ldr	r3, [r7, #4]
 80027ee:	4618      	mov	r0, r3
 80027f0:	370c      	adds	r7, #12
 80027f2:	46bd      	mov	sp, r7
 80027f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027f8:	4770      	bx	lr
	...

080027fc <_ZN8touchgfx9TypedText13registerTextsEPKNS_5TextsE>:
     * Registers an array of texts. This function is called automatically from
     * touchgfx_generic_init(). Should not be called under normal circumstances.
     *
     * @param  t The array of texts.
     */
    static void registerTexts(const Texts* t)
 80027fc:	b480      	push	{r7}
 80027fe:	b083      	sub	sp, #12
 8002800:	af00      	add	r7, sp, #0
 8002802:	6078      	str	r0, [r7, #4]
    {
        texts = t;
 8002804:	4a04      	ldr	r2, [pc, #16]	@ (8002818 <_ZN8touchgfx9TypedText13registerTextsEPKNS_5TextsE+0x1c>)
 8002806:	687b      	ldr	r3, [r7, #4]
 8002808:	6013      	str	r3, [r2, #0]
    }
 800280a:	bf00      	nop
 800280c:	370c      	adds	r7, #12
 800280e:	46bd      	mov	sp, r7
 8002810:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002814:	4770      	bx	lr
 8002816:	bf00      	nop
 8002818:	2400b8dc 	.word	0x2400b8dc

0800281c <_ZN8touchgfx12FontProviderD1Ev>:
     * @return The font with a font id of fontId.
     */
    virtual Font* getFont(FontId fontId) = 0;

    /** Finalizes an instance of the FontProvider class. */
    virtual ~FontProvider()
 800281c:	b480      	push	{r7}
 800281e:	b083      	sub	sp, #12
 8002820:	af00      	add	r7, sp, #0
 8002822:	6078      	str	r0, [r7, #4]
    {
 8002824:	4a04      	ldr	r2, [pc, #16]	@ (8002838 <_ZN8touchgfx12FontProviderD1Ev+0x1c>)
 8002826:	687b      	ldr	r3, [r7, #4]
 8002828:	601a      	str	r2, [r3, #0]
    }
 800282a:	687b      	ldr	r3, [r7, #4]
 800282c:	4618      	mov	r0, r3
 800282e:	370c      	adds	r7, #12
 8002830:	46bd      	mov	sp, r7
 8002832:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002836:	4770      	bx	lr
 8002838:	0802cafc 	.word	0x0802cafc

0800283c <_ZN8touchgfx12FontProviderD0Ev>:
    virtual ~FontProvider()
 800283c:	b580      	push	{r7, lr}
 800283e:	b082      	sub	sp, #8
 8002840:	af00      	add	r7, sp, #0
 8002842:	6078      	str	r0, [r7, #4]
    }
 8002844:	6878      	ldr	r0, [r7, #4]
 8002846:	f7ff ffe9 	bl	800281c <_ZN8touchgfx12FontProviderD1Ev>
 800284a:	2104      	movs	r1, #4
 800284c:	6878      	ldr	r0, [r7, #4]
 800284e:	f028 f842 	bl	802a8d6 <_ZdlPvj>
 8002852:	687b      	ldr	r3, [r7, #4]
 8002854:	4618      	mov	r0, r3
 8002856:	3708      	adds	r7, #8
 8002858:	46bd      	mov	sp, r7
 800285a:	bd80      	pop	{r7, pc}

0800285c <_ZN8touchgfx7MVPHeapC1ERNS_17AbstractPartitionES2_S2_RNS_14MVPApplicationE>:
     * @param [in] scr  A memory partition containing enough memory to hold the largest view.
     * @param [in] tra  A memory partition containing enough memory to hold the largest
     *                  transition.
     * @param [in] app  A reference to the MVPApplication instance.
     */
    MVPHeap(AbstractPartition& pres,
 800285c:	b480      	push	{r7}
 800285e:	b085      	sub	sp, #20
 8002860:	af00      	add	r7, sp, #0
 8002862:	60f8      	str	r0, [r7, #12]
 8002864:	60b9      	str	r1, [r7, #8]
 8002866:	607a      	str	r2, [r7, #4]
 8002868:	603b      	str	r3, [r7, #0]
            AbstractPartition& tra,
            MVPApplication& app)
        : presenterStorage(pres),
          screenStorage(scr),
          transitionStorage(tra),
          frontendApplication(app)
 800286a:	4a0b      	ldr	r2, [pc, #44]	@ (8002898 <_ZN8touchgfx7MVPHeapC1ERNS_17AbstractPartitionES2_S2_RNS_14MVPApplicationE+0x3c>)
 800286c:	68fb      	ldr	r3, [r7, #12]
 800286e:	601a      	str	r2, [r3, #0]
        : presenterStorage(pres),
 8002870:	68fb      	ldr	r3, [r7, #12]
 8002872:	68ba      	ldr	r2, [r7, #8]
 8002874:	605a      	str	r2, [r3, #4]
          screenStorage(scr),
 8002876:	68fb      	ldr	r3, [r7, #12]
 8002878:	687a      	ldr	r2, [r7, #4]
 800287a:	609a      	str	r2, [r3, #8]
          transitionStorage(tra),
 800287c:	68fb      	ldr	r3, [r7, #12]
 800287e:	683a      	ldr	r2, [r7, #0]
 8002880:	60da      	str	r2, [r3, #12]
          frontendApplication(app)
 8002882:	68fb      	ldr	r3, [r7, #12]
 8002884:	69ba      	ldr	r2, [r7, #24]
 8002886:	611a      	str	r2, [r3, #16]
    {
    }
 8002888:	68fb      	ldr	r3, [r7, #12]
 800288a:	4618      	mov	r0, r3
 800288c:	3714      	adds	r7, #20
 800288e:	46bd      	mov	sp, r7
 8002890:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002894:	4770      	bx	lr
 8002896:	bf00      	nop
 8002898:	0802caec 	.word	0x0802caec

0800289c <_ZN8touchgfx7MVPHeapD1Ev>:

    /** Finalizes an instance of the MVPHeap class. */
    virtual ~MVPHeap()
 800289c:	b480      	push	{r7}
 800289e:	b083      	sub	sp, #12
 80028a0:	af00      	add	r7, sp, #0
 80028a2:	6078      	str	r0, [r7, #4]
    {
 80028a4:	4a04      	ldr	r2, [pc, #16]	@ (80028b8 <_ZN8touchgfx7MVPHeapD1Ev+0x1c>)
 80028a6:	687b      	ldr	r3, [r7, #4]
 80028a8:	601a      	str	r2, [r3, #0]
    }
 80028aa:	687b      	ldr	r3, [r7, #4]
 80028ac:	4618      	mov	r0, r3
 80028ae:	370c      	adds	r7, #12
 80028b0:	46bd      	mov	sp, r7
 80028b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028b6:	4770      	bx	lr
 80028b8:	0802caec 	.word	0x0802caec

080028bc <_ZN8touchgfx7MVPHeapD0Ev>:
    virtual ~MVPHeap()
 80028bc:	b580      	push	{r7, lr}
 80028be:	b082      	sub	sp, #8
 80028c0:	af00      	add	r7, sp, #0
 80028c2:	6078      	str	r0, [r7, #4]
    }
 80028c4:	6878      	ldr	r0, [r7, #4]
 80028c6:	f7ff ffe9 	bl	800289c <_ZN8touchgfx7MVPHeapD1Ev>
 80028ca:	2114      	movs	r1, #20
 80028cc:	6878      	ldr	r0, [r7, #4]
 80028ce:	f028 f802 	bl	802a8d6 <_ZdlPvj>
 80028d2:	687b      	ldr	r3, [r7, #4]
 80028d4:	4618      	mov	r0, r3
 80028d6:	3708      	adds	r7, #8
 80028d8:	46bd      	mov	sp, r7
 80028da:	bd80      	pop	{r7, pc}

080028dc <_ZN8touchgfx15UIEventListener16handleClickEventERKNS_10ClickEventE>:
     * This handler is invoked when a mouse click or display touch event has been detected
     * by the system.
     *
     * @param  event The event data.
     */
    virtual void handleClickEvent(const ClickEvent& event)
 80028dc:	b480      	push	{r7}
 80028de:	b083      	sub	sp, #12
 80028e0:	af00      	add	r7, sp, #0
 80028e2:	6078      	str	r0, [r7, #4]
 80028e4:	6039      	str	r1, [r7, #0]
    {
    }
 80028e6:	bf00      	nop
 80028e8:	370c      	adds	r7, #12
 80028ea:	46bd      	mov	sp, r7
 80028ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028f0:	4770      	bx	lr

080028f2 <_ZN8touchgfx15UIEventListener15handleDragEventERKNS_9DragEventE>:
    /**
     * This handler is invoked when a drag event has been detected by the system.
     *
     * @param  event The event data.
     */
    virtual void handleDragEvent(const DragEvent& event)
 80028f2:	b480      	push	{r7}
 80028f4:	b083      	sub	sp, #12
 80028f6:	af00      	add	r7, sp, #0
 80028f8:	6078      	str	r0, [r7, #4]
 80028fa:	6039      	str	r1, [r7, #0]
    {
    }
 80028fc:	bf00      	nop
 80028fe:	370c      	adds	r7, #12
 8002900:	46bd      	mov	sp, r7
 8002902:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002906:	4770      	bx	lr

08002908 <_ZN8touchgfx15UIEventListener18handleGestureEventERKNS_12GestureEventE>:
    /**
     * This handler is invoked when a gesture event has been detected by the system.
     *
     * @param  event The event data.
     */
    virtual void handleGestureEvent(const GestureEvent& event)
 8002908:	b480      	push	{r7}
 800290a:	b083      	sub	sp, #12
 800290c:	af00      	add	r7, sp, #0
 800290e:	6078      	str	r0, [r7, #4]
 8002910:	6039      	str	r1, [r7, #0]
    {
    }
 8002912:	bf00      	nop
 8002914:	370c      	adds	r7, #12
 8002916:	46bd      	mov	sp, r7
 8002918:	f85d 7b04 	ldr.w	r7, [sp], #4
 800291c:	4770      	bx	lr

0800291e <_ZN8touchgfx15UIEventListener14handleKeyEventEh>:
    /**
     * This handler is invoked when a key (or button) event has been detected by the system.
     *
     * @param  c The key or button pressed.
     */
    virtual void handleKeyEvent(uint8_t c)
 800291e:	b480      	push	{r7}
 8002920:	b083      	sub	sp, #12
 8002922:	af00      	add	r7, sp, #0
 8002924:	6078      	str	r0, [r7, #4]
 8002926:	460b      	mov	r3, r1
 8002928:	70fb      	strb	r3, [r7, #3]
    {
    }
 800292a:	bf00      	nop
 800292c:	370c      	adds	r7, #12
 800292e:	46bd      	mov	sp, r7
 8002930:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002934:	4770      	bx	lr

08002936 <_ZN8touchgfx15UIEventListener15handleTickEventEv>:

    /**
     * This handler is invoked when a system tick event has been generated. The system tick
     * period is configured in the HAL.
     */
    virtual void handleTickEvent()
 8002936:	b480      	push	{r7}
 8002938:	b083      	sub	sp, #12
 800293a:	af00      	add	r7, sp, #0
 800293c:	6078      	str	r0, [r7, #4]
    {
    }
 800293e:	bf00      	nop
 8002940:	370c      	adds	r7, #12
 8002942:	46bd      	mov	sp, r7
 8002944:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002948:	4770      	bx	lr

0800294a <_ZN8touchgfx15UIEventListener29handlePendingScreenTransitionEv>:

    /** This handler is invoked when a change screen event is pending. */
    virtual void handlePendingScreenTransition()
 800294a:	b480      	push	{r7}
 800294c:	b083      	sub	sp, #12
 800294e:	af00      	add	r7, sp, #0
 8002950:	6078      	str	r0, [r7, #4]
    {
    }
 8002952:	bf00      	nop
 8002954:	370c      	adds	r7, #12
 8002956:	46bd      	mov	sp, r7
 8002958:	f85d 7b04 	ldr.w	r7, [sp], #4
 800295c:	4770      	bx	lr
	...

08002960 <_ZN8touchgfx15UIEventListenerD1Ev>:

    /** Finalizes an instance of the UIEventListener class. */
    virtual ~UIEventListener()
 8002960:	b480      	push	{r7}
 8002962:	b083      	sub	sp, #12
 8002964:	af00      	add	r7, sp, #0
 8002966:	6078      	str	r0, [r7, #4]
    {
 8002968:	4a04      	ldr	r2, [pc, #16]	@ (800297c <_ZN8touchgfx15UIEventListenerD1Ev+0x1c>)
 800296a:	687b      	ldr	r3, [r7, #4]
 800296c:	601a      	str	r2, [r3, #0]
    }
 800296e:	687b      	ldr	r3, [r7, #4]
 8002970:	4618      	mov	r0, r3
 8002972:	370c      	adds	r7, #12
 8002974:	46bd      	mov	sp, r7
 8002976:	f85d 7b04 	ldr.w	r7, [sp], #4
 800297a:	4770      	bx	lr
 800297c:	0802cac4 	.word	0x0802cac4

08002980 <_ZN8touchgfx15UIEventListenerD0Ev>:
    virtual ~UIEventListener()
 8002980:	b580      	push	{r7, lr}
 8002982:	b082      	sub	sp, #8
 8002984:	af00      	add	r7, sp, #0
 8002986:	6078      	str	r0, [r7, #4]
    }
 8002988:	6878      	ldr	r0, [r7, #4]
 800298a:	f7ff ffe9 	bl	8002960 <_ZN8touchgfx15UIEventListenerD1Ev>
 800298e:	2104      	movs	r1, #4
 8002990:	6878      	ldr	r0, [r7, #4]
 8002992:	f027 ffa0 	bl	802a8d6 <_ZdlPvj>
 8002996:	687b      	ldr	r3, [r7, #4]
 8002998:	4618      	mov	r0, r3
 800299a:	3708      	adds	r7, #8
 800299c:	46bd      	mov	sp, r7
 800299e:	bd80      	pop	{r7, pc}

080029a0 <_ZN8touchgfx3LCDD1Ev>:
        : textureMapperClass(0)
    {
    }

    /** Finalizes an instance of the LCD class. */
    virtual ~LCD()
 80029a0:	b480      	push	{r7}
 80029a2:	b083      	sub	sp, #12
 80029a4:	af00      	add	r7, sp, #0
 80029a6:	6078      	str	r0, [r7, #4]
    {
 80029a8:	4a04      	ldr	r2, [pc, #16]	@ (80029bc <_ZN8touchgfx3LCDD1Ev+0x1c>)
 80029aa:	687b      	ldr	r3, [r7, #4]
 80029ac:	601a      	str	r2, [r3, #0]
    }
 80029ae:	687b      	ldr	r3, [r7, #4]
 80029b0:	4618      	mov	r0, r3
 80029b2:	370c      	adds	r7, #12
 80029b4:	46bd      	mov	sp, r7
 80029b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029ba:	4770      	bx	lr
 80029bc:	0802eb20 	.word	0x0802eb20

080029c0 <_ZN8touchgfx3LCDD0Ev>:
    virtual ~LCD()
 80029c0:	b580      	push	{r7, lr}
 80029c2:	b082      	sub	sp, #8
 80029c4:	af00      	add	r7, sp, #0
 80029c6:	6078      	str	r0, [r7, #4]
    }
 80029c8:	6878      	ldr	r0, [r7, #4]
 80029ca:	f7ff ffe9 	bl	80029a0 <_ZN8touchgfx3LCDD1Ev>
 80029ce:	2108      	movs	r1, #8
 80029d0:	6878      	ldr	r0, [r7, #4]
 80029d2:	f027 ff80 	bl	802a8d6 <_ZdlPvj>
 80029d6:	687b      	ldr	r3, [r7, #4]
 80029d8:	4618      	mov	r0, r3
 80029da:	3708      	adds	r7, #8
 80029dc:	46bd      	mov	sp, r7
 80029de:	bd80      	pop	{r7, pc}

080029e0 <_ZN8touchgfx11Application15appSwitchScreenEh>:
     * means to switch screen from places that does not have access to a pointer to the new
     * screen. Base implementation is empty.
     *
     * @param screenId An id that maps to the desired screen.
     */
    virtual void appSwitchScreen(uint8_t screenId)
 80029e0:	b480      	push	{r7}
 80029e2:	b083      	sub	sp, #12
 80029e4:	af00      	add	r7, sp, #0
 80029e6:	6078      	str	r0, [r7, #4]
 80029e8:	460b      	mov	r3, r1
 80029ea:	70fb      	strb	r3, [r7, #3]
    {
    }
 80029ec:	bf00      	nop
 80029ee:	370c      	adds	r7, #12
 80029f0:	46bd      	mov	sp, r7
 80029f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029f6:	4770      	bx	lr

080029f8 <_ZN8touchgfx11Application13requestRedrawERNS_4RectE>:
    /**
     * An application specific function for requesting redraw of given Rect.
     *
     * @param [in,out] rect The Rect that must be redrawn.
     */
    virtual void requestRedraw(Rect& rect)
 80029f8:	b480      	push	{r7}
 80029fa:	b083      	sub	sp, #12
 80029fc:	af00      	add	r7, sp, #0
 80029fe:	6078      	str	r0, [r7, #4]
 8002a00:	6039      	str	r1, [r7, #0]
    {
        redraw = rect;
 8002a02:	687b      	ldr	r3, [r7, #4]
 8002a04:	683a      	ldr	r2, [r7, #0]
 8002a06:	f503 7396 	add.w	r3, r3, #300	@ 0x12c
 8002a0a:	6810      	ldr	r0, [r2, #0]
 8002a0c:	6851      	ldr	r1, [r2, #4]
 8002a0e:	c303      	stmia	r3!, {r0, r1}
    }
 8002a10:	bf00      	nop
 8002a12:	370c      	adds	r7, #12
 8002a14:	46bd      	mov	sp, r7
 8002a16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a1a:	4770      	bx	lr

08002a1c <_ZN8touchgfx15GenericCallbackIvvvED1Ev>:
template <>
class GenericCallback<void>
{
public:
    /** Finalizes an instance of the GenericCallback<void> class. */
    virtual ~GenericCallback()
 8002a1c:	b480      	push	{r7}
 8002a1e:	b083      	sub	sp, #12
 8002a20:	af00      	add	r7, sp, #0
 8002a22:	6078      	str	r0, [r7, #4]
    {
 8002a24:	4a04      	ldr	r2, [pc, #16]	@ (8002a38 <_ZN8touchgfx15GenericCallbackIvvvED1Ev+0x1c>)
 8002a26:	687b      	ldr	r3, [r7, #4]
 8002a28:	601a      	str	r2, [r3, #0]
    }
 8002a2a:	687b      	ldr	r3, [r7, #4]
 8002a2c:	4618      	mov	r0, r3
 8002a2e:	370c      	adds	r7, #12
 8002a30:	46bd      	mov	sp, r7
 8002a32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a36:	4770      	bx	lr
 8002a38:	0802caac 	.word	0x0802caac

08002a3c <_ZN8touchgfx15GenericCallbackIvvvED0Ev>:
    virtual ~GenericCallback()
 8002a3c:	b580      	push	{r7, lr}
 8002a3e:	b082      	sub	sp, #8
 8002a40:	af00      	add	r7, sp, #0
 8002a42:	6078      	str	r0, [r7, #4]
    }
 8002a44:	6878      	ldr	r0, [r7, #4]
 8002a46:	f7ff ffe9 	bl	8002a1c <_ZN8touchgfx15GenericCallbackIvvvED1Ev>
 8002a4a:	2104      	movs	r1, #4
 8002a4c:	6878      	ldr	r0, [r7, #4]
 8002a4e:	f027 ff42 	bl	802a8d6 <_ZdlPvj>
 8002a52:	687b      	ldr	r3, [r7, #4]
 8002a54:	4618      	mov	r0, r3
 8002a56:	3708      	adds	r7, #8
 8002a58:	46bd      	mov	sp, r7
 8002a5a:	bd80      	pop	{r7, pc}

08002a5c <_ZN8touchgfx8Gestures9DragStateC1Ev>:
    static const uint8_t MIN_VELOCITY_AT_RELEASE_BEFORE_SWIPE = 3;

    /** Defines the state of a drag. */
    struct DragState
    {
        DragState()
 8002a5c:	b480      	push	{r7}
 8002a5e:	b083      	sub	sp, #12
 8002a60:	af00      	add	r7, sp, #0
 8002a62:	6078      	str	r0, [r7, #4]
            : startX(0),
 8002a64:	687b      	ldr	r3, [r7, #4]
 8002a66:	2200      	movs	r2, #0
 8002a68:	801a      	strh	r2, [r3, #0]
              startY(0),
 8002a6a:	687b      	ldr	r3, [r7, #4]
 8002a6c:	2200      	movs	r2, #0
 8002a6e:	805a      	strh	r2, [r3, #2]
              downX(0),
 8002a70:	687b      	ldr	r3, [r7, #4]
 8002a72:	2200      	movs	r2, #0
 8002a74:	809a      	strh	r2, [r3, #4]
              downY(0),
 8002a76:	687b      	ldr	r3, [r7, #4]
 8002a78:	2200      	movs	r2, #0
 8002a7a:	80da      	strh	r2, [r3, #6]
              tickCount(0),
 8002a7c:	687b      	ldr	r3, [r7, #4]
 8002a7e:	2200      	movs	r2, #0
 8002a80:	811a      	strh	r2, [r3, #8]
              velocityX(0),
 8002a82:	687b      	ldr	r3, [r7, #4]
 8002a84:	2200      	movs	r2, #0
 8002a86:	815a      	strh	r2, [r3, #10]
              velocityY(0),
 8002a88:	687b      	ldr	r3, [r7, #4]
 8002a8a:	2200      	movs	r2, #0
 8002a8c:	819a      	strh	r2, [r3, #12]
              inProgress(false)
 8002a8e:	687b      	ldr	r3, [r7, #4]
 8002a90:	2200      	movs	r2, #0
 8002a92:	739a      	strb	r2, [r3, #14]
        {
        }
 8002a94:	687b      	ldr	r3, [r7, #4]
 8002a96:	4618      	mov	r0, r3
 8002a98:	370c      	adds	r7, #12
 8002a9a:	46bd      	mov	sp, r7
 8002a9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002aa0:	4770      	bx	lr

08002aa2 <_ZN8touchgfx8GesturesC1Ev>:
        bool inProgress;    ///< Whether a drag is in progress or not
    };

public:
    /** Default constructor. Does nothing. */
    Gestures()
 8002aa2:	b580      	push	{r7, lr}
 8002aa4:	b082      	sub	sp, #8
 8002aa6:	af00      	add	r7, sp, #0
 8002aa8:	6078      	str	r0, [r7, #4]
        : drag(), listener(0), dragThresholdValue(0)
 8002aaa:	687b      	ldr	r3, [r7, #4]
 8002aac:	4618      	mov	r0, r3
 8002aae:	f7ff ffd5 	bl	8002a5c <_ZN8touchgfx8Gestures9DragStateC1Ev>
 8002ab2:	687b      	ldr	r3, [r7, #4]
 8002ab4:	2200      	movs	r2, #0
 8002ab6:	611a      	str	r2, [r3, #16]
 8002ab8:	687b      	ldr	r3, [r7, #4]
 8002aba:	2200      	movs	r2, #0
 8002abc:	829a      	strh	r2, [r3, #20]
    {
    }
 8002abe:	687b      	ldr	r3, [r7, #4]
 8002ac0:	4618      	mov	r0, r3
 8002ac2:	3708      	adds	r7, #8
 8002ac4:	46bd      	mov	sp, r7
 8002ac6:	bd80      	pop	{r7, pc}

08002ac8 <_ZN8touchgfx3HALC1ERNS_13DMA_InterfaceERNS_3LCDERNS_15TouchControllerEtt>:
    HAL(DMA_Interface& dmaInterface, LCD& display, TouchController& touchCtrl, uint16_t width, uint16_t height)
 8002ac8:	b580      	push	{r7, lr}
 8002aca:	b084      	sub	sp, #16
 8002acc:	af00      	add	r7, sp, #0
 8002ace:	60f8      	str	r0, [r7, #12]
 8002ad0:	60b9      	str	r1, [r7, #8]
 8002ad2:	607a      	str	r2, [r7, #4]
 8002ad4:	603b      	str	r3, [r7, #0]
          lastRenderMethod(HARDWARE)
 8002ad6:	4a55      	ldr	r2, [pc, #340]	@ (8002c2c <_ZN8touchgfx3HALC1ERNS_13DMA_InterfaceERNS_3LCDERNS_15TouchControllerEtt+0x164>)
 8002ad8:	68fb      	ldr	r3, [r7, #12]
 8002ada:	601a      	str	r2, [r3, #0]
        : dma(dmaInterface),
 8002adc:	68fb      	ldr	r3, [r7, #12]
 8002ade:	68ba      	ldr	r2, [r7, #8]
 8002ae0:	605a      	str	r2, [r3, #4]
          lcdRef(display),
 8002ae2:	68fb      	ldr	r3, [r7, #12]
 8002ae4:	687a      	ldr	r2, [r7, #4]
 8002ae6:	609a      	str	r2, [r3, #8]
          touchController(touchCtrl),
 8002ae8:	68fb      	ldr	r3, [r7, #12]
 8002aea:	683a      	ldr	r2, [r7, #0]
 8002aec:	60da      	str	r2, [r3, #12]
          mcuInstrumentation(0),
 8002aee:	68fb      	ldr	r3, [r7, #12]
 8002af0:	2200      	movs	r2, #0
 8002af2:	611a      	str	r2, [r3, #16]
          buttonController(0),
 8002af4:	68fb      	ldr	r3, [r7, #12]
 8002af6:	2200      	movs	r2, #0
 8002af8:	615a      	str	r2, [r3, #20]
          frameBufferAllocator(0),
 8002afa:	68fb      	ldr	r3, [r7, #12]
 8002afc:	2200      	movs	r2, #0
 8002afe:	619a      	str	r2, [r3, #24]
          gestures(),
 8002b00:	68fb      	ldr	r3, [r7, #12]
 8002b02:	331c      	adds	r3, #28
 8002b04:	4618      	mov	r0, r3
 8002b06:	f7ff ffcc 	bl	8002aa2 <_ZN8touchgfx8GesturesC1Ev>
          nativeDisplayOrientation(ORIENTATION_LANDSCAPE),
 8002b0a:	68fb      	ldr	r3, [r7, #12]
 8002b0c:	2200      	movs	r2, #0
 8002b0e:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
          taskDelayFunc(0),
 8002b12:	68fb      	ldr	r3, [r7, #12]
 8002b14:	2200      	movs	r2, #0
 8002b16:	639a      	str	r2, [r3, #56]	@ 0x38
          frameBuffer0(0),
 8002b18:	68fb      	ldr	r3, [r7, #12]
 8002b1a:	2200      	movs	r2, #0
 8002b1c:	63da      	str	r2, [r3, #60]	@ 0x3c
          frameBuffer1(0),
 8002b1e:	68fb      	ldr	r3, [r7, #12]
 8002b20:	2200      	movs	r2, #0
 8002b22:	641a      	str	r2, [r3, #64]	@ 0x40
          frameBuffer2(0),
 8002b24:	68fb      	ldr	r3, [r7, #12]
 8002b26:	2200      	movs	r2, #0
 8002b28:	645a      	str	r2, [r3, #68]	@ 0x44
          refreshStrategy(REFRESH_STRATEGY_DEFAULT),
 8002b2a:	68fb      	ldr	r3, [r7, #12]
 8002b2c:	2200      	movs	r2, #0
 8002b2e:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48
          fingerSize(1),
 8002b32:	68fb      	ldr	r3, [r7, #12]
 8002b34:	2201      	movs	r2, #1
 8002b36:	f883 2049 	strb.w	r2, [r3, #73]	@ 0x49
          lockDMAToPorch(false),
 8002b3a:	68fb      	ldr	r3, [r7, #12]
 8002b3c:	2200      	movs	r2, #0
 8002b3e:	f883 204a 	strb.w	r2, [r3, #74]	@ 0x4a
          frameBufferUpdatedThisFrame(false),
 8002b42:	68fb      	ldr	r3, [r7, #12]
 8002b44:	2200      	movs	r2, #0
 8002b46:	f883 204b 	strb.w	r2, [r3, #75]	@ 0x4b
          auxiliaryLCD(0),
 8002b4a:	68fb      	ldr	r3, [r7, #12]
 8002b4c:	2200      	movs	r2, #0
 8002b4e:	64da      	str	r2, [r3, #76]	@ 0x4c
          partialFrameBufferRect(),
 8002b50:	68fb      	ldr	r3, [r7, #12]
 8002b52:	3350      	adds	r3, #80	@ 0x50
 8002b54:	4618      	mov	r0, r3
 8002b56:	f7ff fe39 	bl	80027cc <_ZN8touchgfx4RectC1Ev>
          listener(0),
 8002b5a:	68fb      	ldr	r3, [r7, #12]
 8002b5c:	2200      	movs	r2, #0
 8002b5e:	659a      	str	r2, [r3, #88]	@ 0x58
          lastX(0),
 8002b60:	68fb      	ldr	r3, [r7, #12]
 8002b62:	2200      	movs	r2, #0
 8002b64:	65da      	str	r2, [r3, #92]	@ 0x5c
          lastY(0),
 8002b66:	68fb      	ldr	r3, [r7, #12]
 8002b68:	2200      	movs	r2, #0
 8002b6a:	661a      	str	r2, [r3, #96]	@ 0x60
          touchSampleRate(1),
 8002b6c:	68fb      	ldr	r3, [r7, #12]
 8002b6e:	2201      	movs	r2, #1
 8002b70:	f883 2064 	strb.w	r2, [r3, #100]	@ 0x64
          mcuLoadPct(0),
 8002b74:	68fb      	ldr	r3, [r7, #12]
 8002b76:	2200      	movs	r2, #0
 8002b78:	f883 2065 	strb.w	r2, [r3, #101]	@ 0x65
          vSyncCnt(0),
 8002b7c:	68fb      	ldr	r3, [r7, #12]
 8002b7e:	2200      	movs	r2, #0
 8002b80:	f883 2066 	strb.w	r2, [r3, #102]	@ 0x66
          vSyncForFrame(1),
 8002b84:	68fb      	ldr	r3, [r7, #12]
 8002b86:	2201      	movs	r2, #1
 8002b88:	f883 2067 	strb.w	r2, [r3, #103]	@ 0x67
          vSyncCompensationEnabled(false),
 8002b8c:	68fb      	ldr	r3, [r7, #12]
 8002b8e:	2200      	movs	r2, #0
 8002b90:	f883 2068 	strb.w	r2, [r3, #104]	@ 0x68
          clientDirty(false),
 8002b94:	68fb      	ldr	r3, [r7, #12]
 8002b96:	2200      	movs	r2, #0
 8002b98:	f883 2069 	strb.w	r2, [r3, #105]	@ 0x69
          swapRequested(false),
 8002b9c:	68fb      	ldr	r3, [r7, #12]
 8002b9e:	2200      	movs	r2, #0
 8002ba0:	f883 206a 	strb.w	r2, [r3, #106]	@ 0x6a
          lastTouched(false),
 8002ba4:	68fb      	ldr	r3, [r7, #12]
 8002ba6:	2200      	movs	r2, #0
 8002ba8:	f883 206b 	strb.w	r2, [r3, #107]	@ 0x6b
          updateMCULoad(0),
 8002bac:	68fb      	ldr	r3, [r7, #12]
 8002bae:	2200      	movs	r2, #0
 8002bb0:	f883 206c 	strb.w	r2, [r3, #108]	@ 0x6c
          cc_begin(0),
 8002bb4:	68fb      	ldr	r3, [r7, #12]
 8002bb6:	2200      	movs	r2, #0
 8002bb8:	671a      	str	r2, [r3, #112]	@ 0x70
          requestedOrientation(ORIENTATION_LANDSCAPE),
 8002bba:	68fb      	ldr	r3, [r7, #12]
 8002bbc:	2200      	movs	r2, #0
 8002bbe:	f883 2074 	strb.w	r2, [r3, #116]	@ 0x74
          displayOrientationChangeRequested(false),
 8002bc2:	68fb      	ldr	r3, [r7, #12]
 8002bc4:	2200      	movs	r2, #0
 8002bc6:	f883 2075 	strb.w	r2, [r3, #117]	@ 0x75
          useAuxiliaryLCD(false),
 8002bca:	68fb      	ldr	r3, [r7, #12]
 8002bcc:	2200      	movs	r2, #0
 8002bce:	f883 2076 	strb.w	r2, [r3, #118]	@ 0x76
          useDMAAcceleration(true),
 8002bd2:	68fb      	ldr	r3, [r7, #12]
 8002bd4:	2201      	movs	r2, #1
 8002bd6:	f883 2077 	strb.w	r2, [r3, #119]	@ 0x77
          lastRenderMethod(HARDWARE)
 8002bda:	68fb      	ldr	r3, [r7, #12]
 8002bdc:	2201      	movs	r2, #1
 8002bde:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78
        instance = this;
 8002be2:	4a13      	ldr	r2, [pc, #76]	@ (8002c30 <_ZN8touchgfx3HALC1ERNS_13DMA_InterfaceERNS_3LCDERNS_15TouchControllerEtt+0x168>)
 8002be4:	68fb      	ldr	r3, [r7, #12]
 8002be6:	6013      	str	r3, [r2, #0]
        FRAME_BUFFER_WIDTH = DISPLAY_WIDTH = width;
 8002be8:	4a12      	ldr	r2, [pc, #72]	@ (8002c34 <_ZN8touchgfx3HALC1ERNS_13DMA_InterfaceERNS_3LCDERNS_15TouchControllerEtt+0x16c>)
 8002bea:	8b3b      	ldrh	r3, [r7, #24]
 8002bec:	8013      	strh	r3, [r2, #0]
 8002bee:	4b11      	ldr	r3, [pc, #68]	@ (8002c34 <_ZN8touchgfx3HALC1ERNS_13DMA_InterfaceERNS_3LCDERNS_15TouchControllerEtt+0x16c>)
 8002bf0:	881a      	ldrh	r2, [r3, #0]
 8002bf2:	4b11      	ldr	r3, [pc, #68]	@ (8002c38 <_ZN8touchgfx3HALC1ERNS_13DMA_InterfaceERNS_3LCDERNS_15TouchControllerEtt+0x170>)
 8002bf4:	801a      	strh	r2, [r3, #0]
        FRAME_BUFFER_HEIGHT = DISPLAY_HEIGHT = height;
 8002bf6:	4a11      	ldr	r2, [pc, #68]	@ (8002c3c <_ZN8touchgfx3HALC1ERNS_13DMA_InterfaceERNS_3LCDERNS_15TouchControllerEtt+0x174>)
 8002bf8:	8bbb      	ldrh	r3, [r7, #28]
 8002bfa:	8013      	strh	r3, [r2, #0]
 8002bfc:	4b0f      	ldr	r3, [pc, #60]	@ (8002c3c <_ZN8touchgfx3HALC1ERNS_13DMA_InterfaceERNS_3LCDERNS_15TouchControllerEtt+0x174>)
 8002bfe:	881a      	ldrh	r2, [r3, #0]
 8002c00:	4b0f      	ldr	r3, [pc, #60]	@ (8002c40 <_ZN8touchgfx3HALC1ERNS_13DMA_InterfaceERNS_3LCDERNS_15TouchControllerEtt+0x178>)
 8002c02:	801a      	strh	r2, [r3, #0]
        DISPLAY_ROTATION = rotate0;
 8002c04:	4b0f      	ldr	r3, [pc, #60]	@ (8002c44 <_ZN8touchgfx3HALC1ERNS_13DMA_InterfaceERNS_3LCDERNS_15TouchControllerEtt+0x17c>)
 8002c06:	2200      	movs	r2, #0
 8002c08:	701a      	strb	r2, [r3, #0]
        nativeDisplayOrientation = ((width >= height) ? ORIENTATION_LANDSCAPE : ORIENTATION_PORTRAIT);
 8002c0a:	8b3a      	ldrh	r2, [r7, #24]
 8002c0c:	8bbb      	ldrh	r3, [r7, #28]
 8002c0e:	429a      	cmp	r2, r3
 8002c10:	bf34      	ite	cc
 8002c12:	2301      	movcc	r3, #1
 8002c14:	2300      	movcs	r3, #0
 8002c16:	b2db      	uxtb	r3, r3
 8002c18:	461a      	mov	r2, r3
 8002c1a:	68fb      	ldr	r3, [r7, #12]
 8002c1c:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    }
 8002c20:	68fb      	ldr	r3, [r7, #12]
 8002c22:	4618      	mov	r0, r3
 8002c24:	3710      	adds	r7, #16
 8002c26:	46bd      	mov	sp, r7
 8002c28:	bd80      	pop	{r7, pc}
 8002c2a:	bf00      	nop
 8002c2c:	0802df80 	.word	0x0802df80
 8002c30:	2400b880 	.word	0x2400b880
 8002c34:	2400b874 	.word	0x2400b874
 8002c38:	2400b87a 	.word	0x2400b87a
 8002c3c:	2400b876 	.word	0x2400b876
 8002c40:	2400b87c 	.word	0x2400b87c
 8002c44:	2400b878 	.word	0x2400b878

08002c48 <_ZN8touchgfx11ApplicationD1Ev>:
class Application : public UIEventListener
 8002c48:	b580      	push	{r7, lr}
 8002c4a:	b082      	sub	sp, #8
 8002c4c:	af00      	add	r7, sp, #0
 8002c4e:	6078      	str	r0, [r7, #4]
 8002c50:	4a05      	ldr	r2, [pc, #20]	@ (8002c68 <_ZN8touchgfx11ApplicationD1Ev+0x20>)
 8002c52:	687b      	ldr	r3, [r7, #4]
 8002c54:	601a      	str	r2, [r3, #0]
 8002c56:	687b      	ldr	r3, [r7, #4]
 8002c58:	4618      	mov	r0, r3
 8002c5a:	f7ff fe81 	bl	8002960 <_ZN8touchgfx15UIEventListenerD1Ev>
 8002c5e:	687b      	ldr	r3, [r7, #4]
 8002c60:	4618      	mov	r0, r3
 8002c62:	3708      	adds	r7, #8
 8002c64:	46bd      	mov	sp, r7
 8002c66:	bd80      	pop	{r7, pc}
 8002c68:	0802ec34 	.word	0x0802ec34

08002c6c <_ZN8touchgfx11ApplicationD0Ev>:
 8002c6c:	b580      	push	{r7, lr}
 8002c6e:	b082      	sub	sp, #8
 8002c70:	af00      	add	r7, sp, #0
 8002c72:	6078      	str	r0, [r7, #4]
 8002c74:	6878      	ldr	r0, [r7, #4]
 8002c76:	f7ff ffe7 	bl	8002c48 <_ZN8touchgfx11ApplicationD1Ev>
 8002c7a:	f44f 719c 	mov.w	r1, #312	@ 0x138
 8002c7e:	6878      	ldr	r0, [r7, #4]
 8002c80:	f027 fe29 	bl	802a8d6 <_ZdlPvj>
 8002c84:	687b      	ldr	r3, [r7, #4]
 8002c86:	4618      	mov	r0, r3
 8002c88:	3708      	adds	r7, #8
 8002c8a:	46bd      	mov	sp, r7
 8002c8c:	bd80      	pop	{r7, pc}

08002c8e <_ZN8touchgfx14MVPApplication29handlePendingScreenTransitionEv>:
    /**
     * Handles the pending screen transition.
     *
     * Delegates the work to evaluatePendingScreenTransition()
     */
    virtual void handlePendingScreenTransition()
 8002c8e:	b580      	push	{r7, lr}
 8002c90:	b082      	sub	sp, #8
 8002c92:	af00      	add	r7, sp, #0
 8002c94:	6078      	str	r0, [r7, #4]
    {
        evaluatePendingScreenTransition();
 8002c96:	6878      	ldr	r0, [r7, #4]
 8002c98:	f000 f804 	bl	8002ca4 <_ZN8touchgfx14MVPApplication31evaluatePendingScreenTransitionEv>
    }
 8002c9c:	bf00      	nop
 8002c9e:	3708      	adds	r7, #8
 8002ca0:	46bd      	mov	sp, r7
 8002ca2:	bd80      	pop	{r7, pc}

08002ca4 <_ZN8touchgfx14MVPApplication31evaluatePendingScreenTransitionEv>:

    /**
     * Evaluates the pending Callback instances. If a callback is valid, it is executed and
     * a Screen transition is executed.
     */
    void evaluatePendingScreenTransition()
 8002ca4:	b580      	push	{r7, lr}
 8002ca6:	b082      	sub	sp, #8
 8002ca8:	af00      	add	r7, sp, #0
 8002caa:	6078      	str	r0, [r7, #4]
    {
        if (pendingScreenTransitionCallback && pendingScreenTransitionCallback->isValid())
 8002cac:	687b      	ldr	r3, [r7, #4]
 8002cae:	f8d3 313c 	ldr.w	r3, [r3, #316]	@ 0x13c
 8002cb2:	2b00      	cmp	r3, #0
 8002cb4:	d00f      	beq.n	8002cd6 <_ZN8touchgfx14MVPApplication31evaluatePendingScreenTransitionEv+0x32>
 8002cb6:	687b      	ldr	r3, [r7, #4]
 8002cb8:	f8d3 213c 	ldr.w	r2, [r3, #316]	@ 0x13c
 8002cbc:	687b      	ldr	r3, [r7, #4]
 8002cbe:	f8d3 313c 	ldr.w	r3, [r3, #316]	@ 0x13c
 8002cc2:	681b      	ldr	r3, [r3, #0]
 8002cc4:	330c      	adds	r3, #12
 8002cc6:	681b      	ldr	r3, [r3, #0]
 8002cc8:	4610      	mov	r0, r2
 8002cca:	4798      	blx	r3
 8002ccc:	4603      	mov	r3, r0
 8002cce:	2b00      	cmp	r3, #0
 8002cd0:	d001      	beq.n	8002cd6 <_ZN8touchgfx14MVPApplication31evaluatePendingScreenTransitionEv+0x32>
 8002cd2:	2301      	movs	r3, #1
 8002cd4:	e000      	b.n	8002cd8 <_ZN8touchgfx14MVPApplication31evaluatePendingScreenTransitionEv+0x34>
 8002cd6:	2300      	movs	r3, #0
 8002cd8:	2b00      	cmp	r3, #0
 8002cda:	d00e      	beq.n	8002cfa <_ZN8touchgfx14MVPApplication31evaluatePendingScreenTransitionEv+0x56>
        {
            pendingScreenTransitionCallback->execute();
 8002cdc:	687b      	ldr	r3, [r7, #4]
 8002cde:	f8d3 213c 	ldr.w	r2, [r3, #316]	@ 0x13c
 8002ce2:	687b      	ldr	r3, [r7, #4]
 8002ce4:	f8d3 313c 	ldr.w	r3, [r3, #316]	@ 0x13c
 8002ce8:	681b      	ldr	r3, [r3, #0]
 8002cea:	3308      	adds	r3, #8
 8002cec:	681b      	ldr	r3, [r3, #0]
 8002cee:	4610      	mov	r0, r2
 8002cf0:	4798      	blx	r3
            pendingScreenTransitionCallback = 0;
 8002cf2:	687b      	ldr	r3, [r7, #4]
 8002cf4:	2200      	movs	r2, #0
 8002cf6:	f8c3 213c 	str.w	r2, [r3, #316]	@ 0x13c
        }
    }
 8002cfa:	bf00      	nop
 8002cfc:	3708      	adds	r7, #8
 8002cfe:	46bd      	mov	sp, r7
 8002d00:	bd80      	pop	{r7, pc}
	...

08002d04 <_ZN8touchgfx14MVPApplicationD1Ev>:
class MVPApplication : public Application
 8002d04:	b580      	push	{r7, lr}
 8002d06:	b082      	sub	sp, #8
 8002d08:	af00      	add	r7, sp, #0
 8002d0a:	6078      	str	r0, [r7, #4]
 8002d0c:	4a05      	ldr	r2, [pc, #20]	@ (8002d24 <_ZN8touchgfx14MVPApplicationD1Ev+0x20>)
 8002d0e:	687b      	ldr	r3, [r7, #4]
 8002d10:	601a      	str	r2, [r3, #0]
 8002d12:	687b      	ldr	r3, [r7, #4]
 8002d14:	4618      	mov	r0, r3
 8002d16:	f7ff ff97 	bl	8002c48 <_ZN8touchgfx11ApplicationD1Ev>
 8002d1a:	687b      	ldr	r3, [r7, #4]
 8002d1c:	4618      	mov	r0, r3
 8002d1e:	3708      	adds	r7, #8
 8002d20:	46bd      	mov	sp, r7
 8002d22:	bd80      	pop	{r7, pc}
 8002d24:	0802ca68 	.word	0x0802ca68

08002d28 <_ZN8touchgfx14MVPApplicationD0Ev>:
 8002d28:	b580      	push	{r7, lr}
 8002d2a:	b082      	sub	sp, #8
 8002d2c:	af00      	add	r7, sp, #0
 8002d2e:	6078      	str	r0, [r7, #4]
 8002d30:	6878      	ldr	r0, [r7, #4]
 8002d32:	f7ff ffe7 	bl	8002d04 <_ZN8touchgfx14MVPApplicationD1Ev>
 8002d36:	f44f 71a0 	mov.w	r1, #320	@ 0x140
 8002d3a:	6878      	ldr	r0, [r7, #4]
 8002d3c:	f027 fdcb 	bl	802a8d6 <_ZdlPvj>
 8002d40:	687b      	ldr	r3, [r7, #4]
 8002d42:	4618      	mov	r0, r3
 8002d44:	3708      	adds	r7, #8
 8002d46:	46bd      	mov	sp, r7
 8002d48:	bd80      	pop	{r7, pc}
	...

08002d4c <_ZN23FrontendApplicationBaseD1Ev>:

class FrontendApplicationBase : public touchgfx::MVPApplication
{
public:
    FrontendApplicationBase(Model& m, FrontendHeap& heap);
    virtual ~FrontendApplicationBase() { }
 8002d4c:	b580      	push	{r7, lr}
 8002d4e:	b082      	sub	sp, #8
 8002d50:	af00      	add	r7, sp, #0
 8002d52:	6078      	str	r0, [r7, #4]
 8002d54:	4a08      	ldr	r2, [pc, #32]	@ (8002d78 <_ZN23FrontendApplicationBaseD1Ev+0x2c>)
 8002d56:	687b      	ldr	r3, [r7, #4]
 8002d58:	601a      	str	r2, [r3, #0]
 8002d5a:	687b      	ldr	r3, [r7, #4]
 8002d5c:	f503 73a0 	add.w	r3, r3, #320	@ 0x140
 8002d60:	4618      	mov	r0, r3
 8002d62:	f000 fb09 	bl	8003378 <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvED1Ev>
 8002d66:	687b      	ldr	r3, [r7, #4]
 8002d68:	4618      	mov	r0, r3
 8002d6a:	f7ff ffcb 	bl	8002d04 <_ZN8touchgfx14MVPApplicationD1Ev>
 8002d6e:	687b      	ldr	r3, [r7, #4]
 8002d70:	4618      	mov	r0, r3
 8002d72:	3708      	adds	r7, #8
 8002d74:	46bd      	mov	sp, r7
 8002d76:	bd80      	pop	{r7, pc}
 8002d78:	0802ca0c 	.word	0x0802ca0c

08002d7c <_ZN23FrontendApplicationBaseD0Ev>:
 8002d7c:	b580      	push	{r7, lr}
 8002d7e:	b082      	sub	sp, #8
 8002d80:	af00      	add	r7, sp, #0
 8002d82:	6078      	str	r0, [r7, #4]
 8002d84:	6878      	ldr	r0, [r7, #4]
 8002d86:	f7ff ffe1 	bl	8002d4c <_ZN23FrontendApplicationBaseD1Ev>
 8002d8a:	f44f 71ac 	mov.w	r1, #344	@ 0x158
 8002d8e:	6878      	ldr	r0, [r7, #4]
 8002d90:	f027 fda1 	bl	802a8d6 <_ZdlPvj>
 8002d94:	687b      	ldr	r3, [r7, #4]
 8002d96:	4618      	mov	r0, r3
 8002d98:	3708      	adds	r7, #8
 8002d9a:	46bd      	mov	sp, r7
 8002d9c:	bd80      	pop	{r7, pc}
	...

08002da0 <_ZN19FrontendApplicationD1Ev>:

class FrontendApplication : public FrontendApplicationBase
{
public:
    FrontendApplication(Model& m, FrontendHeap& heap);
    virtual ~FrontendApplication() { }
 8002da0:	b580      	push	{r7, lr}
 8002da2:	b082      	sub	sp, #8
 8002da4:	af00      	add	r7, sp, #0
 8002da6:	6078      	str	r0, [r7, #4]
 8002da8:	4a05      	ldr	r2, [pc, #20]	@ (8002dc0 <_ZN19FrontendApplicationD1Ev+0x20>)
 8002daa:	687b      	ldr	r3, [r7, #4]
 8002dac:	601a      	str	r2, [r3, #0]
 8002dae:	687b      	ldr	r3, [r7, #4]
 8002db0:	4618      	mov	r0, r3
 8002db2:	f7ff ffcb 	bl	8002d4c <_ZN23FrontendApplicationBaseD1Ev>
 8002db6:	687b      	ldr	r3, [r7, #4]
 8002db8:	4618      	mov	r0, r3
 8002dba:	3708      	adds	r7, #8
 8002dbc:	46bd      	mov	sp, r7
 8002dbe:	bd80      	pop	{r7, pc}
 8002dc0:	0802c9c8 	.word	0x0802c9c8

08002dc4 <_ZN19FrontendApplicationD0Ev>:
 8002dc4:	b580      	push	{r7, lr}
 8002dc6:	b082      	sub	sp, #8
 8002dc8:	af00      	add	r7, sp, #0
 8002dca:	6078      	str	r0, [r7, #4]
 8002dcc:	6878      	ldr	r0, [r7, #4]
 8002dce:	f7ff ffe7 	bl	8002da0 <_ZN19FrontendApplicationD1Ev>
 8002dd2:	f44f 71ac 	mov.w	r1, #344	@ 0x158
 8002dd6:	6878      	ldr	r0, [r7, #4]
 8002dd8:	f027 fd7d 	bl	802a8d6 <_ZdlPvj>
 8002ddc:	687b      	ldr	r3, [r7, #4]
 8002dde:	4618      	mov	r0, r3
 8002de0:	3708      	adds	r7, #8
 8002de2:	46bd      	mov	sp, r7
 8002de4:	bd80      	pop	{r7, pc}

08002de6 <_ZN19FrontendApplication15handleTickEventEv>:

    virtual void handleTickEvent()
 8002de6:	b580      	push	{r7, lr}
 8002de8:	b082      	sub	sp, #8
 8002dea:	af00      	add	r7, sp, #0
 8002dec:	6078      	str	r0, [r7, #4]
    {
        model.tick();
 8002dee:	687b      	ldr	r3, [r7, #4]
 8002df0:	f8d3 3154 	ldr.w	r3, [r3, #340]	@ 0x154
 8002df4:	4618      	mov	r0, r3
 8002df6:	f007 fdc7 	bl	800a988 <_ZN5Model4tickEv>
        FrontendApplicationBase::handleTickEvent();
 8002dfa:	687b      	ldr	r3, [r7, #4]
 8002dfc:	4618      	mov	r0, r3
 8002dfe:	f018 faff 	bl	801b400 <_ZN8touchgfx11Application15handleTickEventEv>
    }
 8002e02:	bf00      	nop
 8002e04:	3708      	adds	r7, #8
 8002e06:	46bd      	mov	sp, r7
 8002e08:	bd80      	pop	{r7, pc}

08002e0a <_ZN16FrontendHeapBase15gotoStartScreenER19FrontendApplication>:
    /**
     * Determine (compile time) the Transition type of largest size.
     */
    typedef touchgfx::meta::select_type_maxsize< GeneratedTransitionTypes >::type MaxGeneratedTransitionType;

    virtual void gotoStartScreen(FrontendApplication& app)
 8002e0a:	b580      	push	{r7, lr}
 8002e0c:	b082      	sub	sp, #8
 8002e0e:	af00      	add	r7, sp, #0
 8002e10:	6078      	str	r0, [r7, #4]
 8002e12:	6039      	str	r1, [r7, #0]
    {
        app.gotoMainScreenNoTransition();
 8002e14:	683b      	ldr	r3, [r7, #0]
 8002e16:	4618      	mov	r0, r3
 8002e18:	f001 fb1e 	bl	8004458 <_ZN23FrontendApplicationBase26gotoMainScreenNoTransitionEv>
    }
 8002e1c:	bf00      	nop
 8002e1e:	3708      	adds	r7, #8
 8002e20:	46bd      	mov	sp, r7
 8002e22:	bd80      	pop	{r7, pc}

08002e24 <_ZN16FrontendHeapBaseC1ERN8touchgfx17AbstractPartitionES2_S2_R19FrontendApplication>:
protected:
    FrontendHeapBase(touchgfx::AbstractPartition& presenters, touchgfx::AbstractPartition& views, touchgfx::AbstractPartition& transitions, FrontendApplication& app)
 8002e24:	b580      	push	{r7, lr}
 8002e26:	b086      	sub	sp, #24
 8002e28:	af02      	add	r7, sp, #8
 8002e2a:	60f8      	str	r0, [r7, #12]
 8002e2c:	60b9      	str	r1, [r7, #8]
 8002e2e:	607a      	str	r2, [r7, #4]
 8002e30:	603b      	str	r3, [r7, #0]
        : MVPHeap(presenters, views, transitions, app)
 8002e32:	68f8      	ldr	r0, [r7, #12]
 8002e34:	69bb      	ldr	r3, [r7, #24]
 8002e36:	9300      	str	r3, [sp, #0]
 8002e38:	683b      	ldr	r3, [r7, #0]
 8002e3a:	687a      	ldr	r2, [r7, #4]
 8002e3c:	68b9      	ldr	r1, [r7, #8]
 8002e3e:	f7ff fd0d 	bl	800285c <_ZN8touchgfx7MVPHeapC1ERNS_17AbstractPartitionES2_S2_RNS_14MVPApplicationE>
 8002e42:	4a04      	ldr	r2, [pc, #16]	@ (8002e54 <_ZN16FrontendHeapBaseC1ERN8touchgfx17AbstractPartitionES2_S2_R19FrontendApplication+0x30>)
 8002e44:	68fb      	ldr	r3, [r7, #12]
 8002e46:	601a      	str	r2, [r3, #0]
    {

    }
 8002e48:	68fb      	ldr	r3, [r7, #12]
 8002e4a:	4618      	mov	r0, r3
 8002e4c:	3710      	adds	r7, #16
 8002e4e:	46bd      	mov	sp, r7
 8002e50:	bd80      	pop	{r7, pc}
 8002e52:	bf00      	nop
 8002e54:	0802c9b4 	.word	0x0802c9b4

08002e58 <__tcf_0>:
            > > CombinedTransitionTypes;
    typedef meta::select_type_maxsize< CombinedTransitionTypes >::type MaxTransitionType;

    static FrontendHeap& getInstance()
    {
        static FrontendHeap instance;
 8002e58:	b580      	push	{r7, lr}
 8002e5a:	af00      	add	r7, sp, #0
 8002e5c:	4801      	ldr	r0, [pc, #4]	@ (8002e64 <__tcf_0+0xc>)
 8002e5e:	f000 f95d 	bl	800311c <_ZN12FrontendHeapD1Ev>
 8002e62:	bd80      	pop	{r7, pc}
 8002e64:	24000374 	.word	0x24000374

08002e68 <_ZN12FrontendHeap11getInstanceEv>:
    static FrontendHeap& getInstance()
 8002e68:	b580      	push	{r7, lr}
 8002e6a:	af00      	add	r7, sp, #0
        static FrontendHeap instance;
 8002e6c:	4b11      	ldr	r3, [pc, #68]	@ (8002eb4 <_ZN12FrontendHeap11getInstanceEv+0x4c>)
 8002e6e:	681b      	ldr	r3, [r3, #0]
 8002e70:	f3bf 8f5b 	dmb	ish
 8002e74:	f003 0301 	and.w	r3, r3, #1
 8002e78:	2b00      	cmp	r3, #0
 8002e7a:	bf0c      	ite	eq
 8002e7c:	2301      	moveq	r3, #1
 8002e7e:	2300      	movne	r3, #0
 8002e80:	b2db      	uxtb	r3, r3
 8002e82:	2b00      	cmp	r3, #0
 8002e84:	d013      	beq.n	8002eae <_ZN12FrontendHeap11getInstanceEv+0x46>
 8002e86:	480b      	ldr	r0, [pc, #44]	@ (8002eb4 <_ZN12FrontendHeap11getInstanceEv+0x4c>)
 8002e88:	f027 fd27 	bl	802a8da <__cxa_guard_acquire>
 8002e8c:	4603      	mov	r3, r0
 8002e8e:	2b00      	cmp	r3, #0
 8002e90:	bf14      	ite	ne
 8002e92:	2301      	movne	r3, #1
 8002e94:	2300      	moveq	r3, #0
 8002e96:	b2db      	uxtb	r3, r3
 8002e98:	2b00      	cmp	r3, #0
 8002e9a:	d008      	beq.n	8002eae <_ZN12FrontendHeap11getInstanceEv+0x46>
 8002e9c:	4806      	ldr	r0, [pc, #24]	@ (8002eb8 <_ZN12FrontendHeap11getInstanceEv+0x50>)
 8002e9e:	f000 f867 	bl	8002f70 <_ZN12FrontendHeapC1Ev>
 8002ea2:	4806      	ldr	r0, [pc, #24]	@ (8002ebc <_ZN12FrontendHeap11getInstanceEv+0x54>)
 8002ea4:	f027 fd64 	bl	802a970 <atexit>
 8002ea8:	4802      	ldr	r0, [pc, #8]	@ (8002eb4 <_ZN12FrontendHeap11getInstanceEv+0x4c>)
 8002eaa:	f027 fd22 	bl	802a8f2 <__cxa_guard_release>
        return instance;
 8002eae:	4b02      	ldr	r3, [pc, #8]	@ (8002eb8 <_ZN12FrontendHeap11getInstanceEv+0x50>)
    }
 8002eb0:	4618      	mov	r0, r3
 8002eb2:	bd80      	pop	{r7, pc}
 8002eb4:	2400105c 	.word	0x2400105c
 8002eb8:	24000374 	.word	0x24000374
 8002ebc:	08002e59 	.word	0x08002e59

08002ec0 <_ZN16FrontendHeapBaseD1Ev>:
class FrontendHeapBase : public touchgfx::MVPHeap
 8002ec0:	b580      	push	{r7, lr}
 8002ec2:	b082      	sub	sp, #8
 8002ec4:	af00      	add	r7, sp, #0
 8002ec6:	6078      	str	r0, [r7, #4]
 8002ec8:	4a05      	ldr	r2, [pc, #20]	@ (8002ee0 <_ZN16FrontendHeapBaseD1Ev+0x20>)
 8002eca:	687b      	ldr	r3, [r7, #4]
 8002ecc:	601a      	str	r2, [r3, #0]
 8002ece:	687b      	ldr	r3, [r7, #4]
 8002ed0:	4618      	mov	r0, r3
 8002ed2:	f7ff fce3 	bl	800289c <_ZN8touchgfx7MVPHeapD1Ev>
 8002ed6:	687b      	ldr	r3, [r7, #4]
 8002ed8:	4618      	mov	r0, r3
 8002eda:	3708      	adds	r7, #8
 8002edc:	46bd      	mov	sp, r7
 8002ede:	bd80      	pop	{r7, pc}
 8002ee0:	0802c9b4 	.word	0x0802c9b4

08002ee4 <_ZN16FrontendHeapBaseD0Ev>:
 8002ee4:	b580      	push	{r7, lr}
 8002ee6:	b082      	sub	sp, #8
 8002ee8:	af00      	add	r7, sp, #0
 8002eea:	6078      	str	r0, [r7, #4]
 8002eec:	6878      	ldr	r0, [r7, #4]
 8002eee:	f7ff ffe7 	bl	8002ec0 <_ZN16FrontendHeapBaseD1Ev>
 8002ef2:	2114      	movs	r1, #20
 8002ef4:	6878      	ldr	r0, [r7, #4]
 8002ef6:	f027 fcee 	bl	802a8d6 <_ZdlPvj>
 8002efa:	687b      	ldr	r3, [r7, #4]
 8002efc:	4618      	mov	r0, r3
 8002efe:	3708      	adds	r7, #8
 8002f00:	46bd      	mov	sp, r7
 8002f02:	bd80      	pop	{r7, pc}

08002f04 <_ZN8touchgfx9PartitionINS_4meta8TypeListI25Localize_AnomalyPresenterNS2_INS1_3NilES4_EEEELt1EEC1Ev>:
 * @tparam NUMBER_OF_ELEMENTS Type of the number of elements.
 *
 * @see AbstractPartition
 */
template <typename ListOfTypes, uint16_t NUMBER_OF_ELEMENTS>
class Partition : public AbstractPartition
 8002f04:	b580      	push	{r7, lr}
 8002f06:	b082      	sub	sp, #8
 8002f08:	af00      	add	r7, sp, #0
 8002f0a:	6078      	str	r0, [r7, #4]
 8002f0c:	687b      	ldr	r3, [r7, #4]
 8002f0e:	4618      	mov	r0, r3
 8002f10:	f014 f9ee 	bl	80172f0 <_ZN8touchgfx17AbstractPartitionC1Ev>
 8002f14:	4a03      	ldr	r2, [pc, #12]	@ (8002f24 <_ZN8touchgfx9PartitionINS_4meta8TypeListI25Localize_AnomalyPresenterNS2_INS1_3NilES4_EEEELt1EEC1Ev+0x20>)
 8002f16:	687b      	ldr	r3, [r7, #4]
 8002f18:	601a      	str	r2, [r3, #0]
 8002f1a:	687b      	ldr	r3, [r7, #4]
 8002f1c:	4618      	mov	r0, r3
 8002f1e:	3708      	adds	r7, #8
 8002f20:	46bd      	mov	sp, r7
 8002f22:	bd80      	pop	{r7, pc}
 8002f24:	0802c980 	.word	0x0802c980

08002f28 <_ZN8touchgfx9PartitionINS_4meta8TypeListI8MainViewNS2_INS1_3NilES4_EEEELt1EEC1Ev>:
 8002f28:	b580      	push	{r7, lr}
 8002f2a:	b082      	sub	sp, #8
 8002f2c:	af00      	add	r7, sp, #0
 8002f2e:	6078      	str	r0, [r7, #4]
 8002f30:	687b      	ldr	r3, [r7, #4]
 8002f32:	4618      	mov	r0, r3
 8002f34:	f014 f9dc 	bl	80172f0 <_ZN8touchgfx17AbstractPartitionC1Ev>
 8002f38:	4a03      	ldr	r2, [pc, #12]	@ (8002f48 <_ZN8touchgfx9PartitionINS_4meta8TypeListI8MainViewNS2_INS1_3NilES4_EEEELt1EEC1Ev+0x20>)
 8002f3a:	687b      	ldr	r3, [r7, #4]
 8002f3c:	601a      	str	r2, [r3, #0]
 8002f3e:	687b      	ldr	r3, [r7, #4]
 8002f40:	4618      	mov	r0, r3
 8002f42:	3708      	adds	r7, #8
 8002f44:	46bd      	mov	sp, r7
 8002f46:	bd80      	pop	{r7, pc}
 8002f48:	0802c94c 	.word	0x0802c94c

08002f4c <_ZN8touchgfx9PartitionINS_4meta8TypeListINS_14WipeTransitionILNS_9DirectionE1EEENS2_INS1_3NilES6_EEEELt1EEC1Ev>:
 8002f4c:	b580      	push	{r7, lr}
 8002f4e:	b082      	sub	sp, #8
 8002f50:	af00      	add	r7, sp, #0
 8002f52:	6078      	str	r0, [r7, #4]
 8002f54:	687b      	ldr	r3, [r7, #4]
 8002f56:	4618      	mov	r0, r3
 8002f58:	f014 f9ca 	bl	80172f0 <_ZN8touchgfx17AbstractPartitionC1Ev>
 8002f5c:	4a03      	ldr	r2, [pc, #12]	@ (8002f6c <_ZN8touchgfx9PartitionINS_4meta8TypeListINS_14WipeTransitionILNS_9DirectionE1EEENS2_INS1_3NilES6_EEEELt1EEC1Ev+0x20>)
 8002f5e:	687b      	ldr	r3, [r7, #4]
 8002f60:	601a      	str	r2, [r3, #0]
 8002f62:	687b      	ldr	r3, [r7, #4]
 8002f64:	4618      	mov	r0, r3
 8002f66:	3708      	adds	r7, #8
 8002f68:	46bd      	mov	sp, r7
 8002f6a:	bd80      	pop	{r7, pc}
 8002f6c:	0802c918 	.word	0x0802c918

08002f70 <_ZN12FrontendHeapC1Ev>:
    Partition< CombinedTransitionTypes, 1 > transitions;
    FrontendApplication app;
    Model model;

private:
    FrontendHeap() : FrontendHeapBase(presenters, views, transitions, app),
 8002f70:	b590      	push	{r4, r7, lr}
 8002f72:	b085      	sub	sp, #20
 8002f74:	af02      	add	r7, sp, #8
 8002f76:	6078      	str	r0, [r7, #4]
        app(model, *this)
 8002f78:	6878      	ldr	r0, [r7, #4]
 8002f7a:	687b      	ldr	r3, [r7, #4]
 8002f7c:	f103 0114 	add.w	r1, r3, #20
 8002f80:	687b      	ldr	r3, [r7, #4]
 8002f82:	f103 022c 	add.w	r2, r3, #44	@ 0x2c
 8002f86:	687b      	ldr	r3, [r7, #4]
 8002f88:	f603 344c 	addw	r4, r3, #2892	@ 0xb4c
    FrontendHeap() : FrontendHeapBase(presenters, views, transitions, app),
 8002f8c:	687b      	ldr	r3, [r7, #4]
 8002f8e:	f603 338c 	addw	r3, r3, #2956	@ 0xb8c
        app(model, *this)
 8002f92:	9300      	str	r3, [sp, #0]
 8002f94:	4623      	mov	r3, r4
 8002f96:	f7ff ff45 	bl	8002e24 <_ZN16FrontendHeapBaseC1ERN8touchgfx17AbstractPartitionES2_S2_R19FrontendApplication>
 8002f9a:	4a18      	ldr	r2, [pc, #96]	@ (8002ffc <_ZN12FrontendHeapC1Ev+0x8c>)
 8002f9c:	687b      	ldr	r3, [r7, #4]
 8002f9e:	601a      	str	r2, [r3, #0]
 8002fa0:	687b      	ldr	r3, [r7, #4]
 8002fa2:	3314      	adds	r3, #20
 8002fa4:	4618      	mov	r0, r3
 8002fa6:	f7ff ffad 	bl	8002f04 <_ZN8touchgfx9PartitionINS_4meta8TypeListI25Localize_AnomalyPresenterNS2_INS1_3NilES4_EEEELt1EEC1Ev>
 8002faa:	687b      	ldr	r3, [r7, #4]
 8002fac:	332c      	adds	r3, #44	@ 0x2c
 8002fae:	4618      	mov	r0, r3
 8002fb0:	f7ff ffba 	bl	8002f28 <_ZN8touchgfx9PartitionINS_4meta8TypeListI8MainViewNS2_INS1_3NilES4_EEEELt1EEC1Ev>
 8002fb4:	687b      	ldr	r3, [r7, #4]
 8002fb6:	f603 334c 	addw	r3, r3, #2892	@ 0xb4c
 8002fba:	4618      	mov	r0, r3
 8002fbc:	f7ff ffc6 	bl	8002f4c <_ZN8touchgfx9PartitionINS_4meta8TypeListINS_14WipeTransitionILNS_9DirectionE1EEENS2_INS1_3NilES6_EEEELt1EEC1Ev>
 8002fc0:	687b      	ldr	r3, [r7, #4]
 8002fc2:	f603 308c 	addw	r0, r3, #2956	@ 0xb8c
 8002fc6:	687b      	ldr	r3, [r7, #4]
 8002fc8:	f603 43e4 	addw	r3, r3, #3300	@ 0xce4
 8002fcc:	687a      	ldr	r2, [r7, #4]
 8002fce:	4619      	mov	r1, r3
 8002fd0:	f007 f830 	bl	800a034 <_ZN19FrontendApplicationC1ER5ModelR12FrontendHeap>
 8002fd4:	687b      	ldr	r3, [r7, #4]
 8002fd6:	f603 43e4 	addw	r3, r3, #3300	@ 0xce4
 8002fda:	4618      	mov	r0, r3
 8002fdc:	f007 fcc6 	bl	800a96c <_ZN5ModelC1Ev>
    {
        gotoStartScreen(app);
 8002fe0:	687a      	ldr	r2, [r7, #4]
 8002fe2:	687b      	ldr	r3, [r7, #4]
 8002fe4:	f603 338c 	addw	r3, r3, #2956	@ 0xb8c
 8002fe8:	4619      	mov	r1, r3
 8002fea:	4610      	mov	r0, r2
 8002fec:	f7ff ff0d 	bl	8002e0a <_ZN16FrontendHeapBase15gotoStartScreenER19FrontendApplication>
    }
 8002ff0:	687b      	ldr	r3, [r7, #4]
 8002ff2:	4618      	mov	r0, r3
 8002ff4:	370c      	adds	r7, #12
 8002ff6:	46bd      	mov	sp, r7
 8002ff8:	bd90      	pop	{r4, r7, pc}
 8002ffa:	bf00      	nop
 8002ffc:	0802c904 	.word	0x0802c904

08003000 <_ZN20TouchGFXGeneratedHALC1ERN8touchgfx13DMA_InterfaceERNS0_3LCDERNS0_15TouchControllerEtt>:
    TouchGFXGeneratedHAL(touchgfx::DMA_Interface& dma, touchgfx::LCD& display, touchgfx::TouchController& tc, uint16_t width, uint16_t height) :
 8003000:	b580      	push	{r7, lr}
 8003002:	b086      	sub	sp, #24
 8003004:	af02      	add	r7, sp, #8
 8003006:	60f8      	str	r0, [r7, #12]
 8003008:	60b9      	str	r1, [r7, #8]
 800300a:	607a      	str	r2, [r7, #4]
 800300c:	603b      	str	r3, [r7, #0]
        touchgfx::HAL(dma, display, tc, width, height)
 800300e:	68f8      	ldr	r0, [r7, #12]
 8003010:	8bbb      	ldrh	r3, [r7, #28]
 8003012:	9301      	str	r3, [sp, #4]
 8003014:	8b3b      	ldrh	r3, [r7, #24]
 8003016:	9300      	str	r3, [sp, #0]
 8003018:	683b      	ldr	r3, [r7, #0]
 800301a:	687a      	ldr	r2, [r7, #4]
 800301c:	68b9      	ldr	r1, [r7, #8]
 800301e:	f7ff fd53 	bl	8002ac8 <_ZN8touchgfx3HALC1ERNS_13DMA_InterfaceERNS_3LCDERNS_15TouchControllerEtt>
 8003022:	4a04      	ldr	r2, [pc, #16]	@ (8003034 <_ZN20TouchGFXGeneratedHALC1ERN8touchgfx13DMA_InterfaceERNS0_3LCDERNS0_15TouchControllerEtt+0x34>)
 8003024:	68fb      	ldr	r3, [r7, #12]
 8003026:	601a      	str	r2, [r3, #0]
    }
 8003028:	68fb      	ldr	r3, [r7, #12]
 800302a:	4618      	mov	r0, r3
 800302c:	3710      	adds	r7, #16
 800302e:	46bd      	mov	sp, r7
 8003030:	bd80      	pop	{r7, pc}
 8003032:	bf00      	nop
 8003034:	0802cb10 	.word	0x0802cb10

08003038 <_ZN11TouchGFXHALC1ERN8touchgfx13DMA_InterfaceERNS0_3LCDERNS0_15TouchControllerEtt>:
    TouchGFXHAL(touchgfx::DMA_Interface& dma, touchgfx::LCD& display, touchgfx::TouchController& tc, uint16_t width, uint16_t height) : TouchGFXGeneratedHAL(dma, display, tc, width, height)
 8003038:	b580      	push	{r7, lr}
 800303a:	b086      	sub	sp, #24
 800303c:	af02      	add	r7, sp, #8
 800303e:	60f8      	str	r0, [r7, #12]
 8003040:	60b9      	str	r1, [r7, #8]
 8003042:	607a      	str	r2, [r7, #4]
 8003044:	603b      	str	r3, [r7, #0]
 8003046:	68f8      	ldr	r0, [r7, #12]
 8003048:	8bbb      	ldrh	r3, [r7, #28]
 800304a:	9301      	str	r3, [sp, #4]
 800304c:	8b3b      	ldrh	r3, [r7, #24]
 800304e:	9300      	str	r3, [sp, #0]
 8003050:	683b      	ldr	r3, [r7, #0]
 8003052:	687a      	ldr	r2, [r7, #4]
 8003054:	68b9      	ldr	r1, [r7, #8]
 8003056:	f7ff ffd3 	bl	8003000 <_ZN20TouchGFXGeneratedHALC1ERN8touchgfx13DMA_InterfaceERNS0_3LCDERNS0_15TouchControllerEtt>
 800305a:	4a04      	ldr	r2, [pc, #16]	@ (800306c <_ZN11TouchGFXHALC1ERN8touchgfx13DMA_InterfaceERNS0_3LCDERNS0_15TouchControllerEtt+0x34>)
 800305c:	68fb      	ldr	r3, [r7, #12]
 800305e:	601a      	str	r2, [r3, #0]
    }
 8003060:	68fb      	ldr	r3, [r7, #12]
 8003062:	4618      	mov	r0, r3
 8003064:	3710      	adds	r7, #16
 8003066:	46bd      	mov	sp, r7
 8003068:	bd80      	pop	{r7, pc}
 800306a:	bf00      	nop
 800306c:	0802c7c0 	.word	0x0802c7c0

08003070 <_ZN8touchgfx15TouchControllerC1Ev>:
class TouchController
 8003070:	b480      	push	{r7}
 8003072:	b083      	sub	sp, #12
 8003074:	af00      	add	r7, sp, #0
 8003076:	6078      	str	r0, [r7, #4]
 8003078:	4a04      	ldr	r2, [pc, #16]	@ (800308c <_ZN8touchgfx15TouchControllerC1Ev+0x1c>)
 800307a:	687b      	ldr	r3, [r7, #4]
 800307c:	601a      	str	r2, [r3, #0]
 800307e:	687b      	ldr	r3, [r7, #4]
 8003080:	4618      	mov	r0, r3
 8003082:	370c      	adds	r7, #12
 8003084:	46bd      	mov	sp, r7
 8003086:	f85d 7b04 	ldr.w	r7, [sp], #4
 800308a:	4770      	bx	lr
 800308c:	0802c7a8 	.word	0x0802c7a8

08003090 <_ZN20STM32TouchControllerC1Ev>:
{
public:

    STM32TouchController() {}
 8003090:	b580      	push	{r7, lr}
 8003092:	b082      	sub	sp, #8
 8003094:	af00      	add	r7, sp, #0
 8003096:	6078      	str	r0, [r7, #4]
 8003098:	687b      	ldr	r3, [r7, #4]
 800309a:	4618      	mov	r0, r3
 800309c:	f7ff ffe8 	bl	8003070 <_ZN8touchgfx15TouchControllerC1Ev>
 80030a0:	4a03      	ldr	r2, [pc, #12]	@ (80030b0 <_ZN20STM32TouchControllerC1Ev+0x20>)
 80030a2:	687b      	ldr	r3, [r7, #4]
 80030a4:	601a      	str	r2, [r3, #0]
 80030a6:	687b      	ldr	r3, [r7, #4]
 80030a8:	4618      	mov	r0, r3
 80030aa:	3708      	adds	r7, #8
 80030ac:	46bd      	mov	sp, r7
 80030ae:	bd80      	pop	{r7, pc}
 80030b0:	0802c790 	.word	0x0802c790

080030b4 <touchgfx_init>:
static ApplicationFontProvider fontProvider;
static Texts texts;
static TouchGFXHAL hal(dma, display, tc, 480, 272);

void touchgfx_init()
{
 80030b4:	b590      	push	{r4, r7, lr}
 80030b6:	b085      	sub	sp, #20
 80030b8:	af02      	add	r7, sp, #8
    Bitmap::registerBitmapDatabase(BitmapDatabase::getInstance(), BitmapDatabase::getInstanceSize());
 80030ba:	f000 fd59 	bl	8003b70 <_ZN14BitmapDatabase11getInstanceEv>
 80030be:	4604      	mov	r4, r0
 80030c0:	f000 fd60 	bl	8003b84 <_ZN14BitmapDatabase15getInstanceSizeEv>
 80030c4:	4603      	mov	r3, r0
 80030c6:	4619      	mov	r1, r3
 80030c8:	2300      	movs	r3, #0
 80030ca:	9300      	str	r3, [sp, #0]
 80030cc:	2300      	movs	r3, #0
 80030ce:	2200      	movs	r2, #0
 80030d0:	4620      	mov	r0, r4
 80030d2:	f01b fba9 	bl	801e828 <_ZN8touchgfx6Bitmap22registerBitmapDatabaseEPKNS0_10BitmapDataEtPtmm>
    TypedText::registerTexts(&texts);
 80030d6:	4809      	ldr	r0, [pc, #36]	@ (80030fc <touchgfx_init+0x48>)
 80030d8:	f7ff fb90 	bl	80027fc <_ZN8touchgfx9TypedText13registerTextsEPKNS_5TextsE>
    Texts::setLanguage(0);
 80030dc:	2000      	movs	r0, #0
 80030de:	f006 fef3 	bl	8009ec8 <_ZN8touchgfx5Texts11setLanguageEt>

    FontManager::setFontProvider(&fontProvider);
 80030e2:	4807      	ldr	r0, [pc, #28]	@ (8003100 <touchgfx_init+0x4c>)
 80030e4:	f01b fae2 	bl	801e6ac <_ZN8touchgfx11FontManager15setFontProviderEPNS_12FontProviderE>

    FrontendHeap& heap = FrontendHeap::getInstance();
 80030e8:	f7ff febe 	bl	8002e68 <_ZN12FrontendHeap11getInstanceEv>
 80030ec:	6078      	str	r0, [r7, #4]
    (void)heap;

    /*
     * Initialize TouchGFX
     */
    hal.initialize();
 80030ee:	4805      	ldr	r0, [pc, #20]	@ (8003104 <touchgfx_init+0x50>)
 80030f0:	f7fe fdc2 	bl	8001c78 <_ZN11TouchGFXHAL10initializeEv>
}
 80030f4:	bf00      	nop
 80030f6:	370c      	adds	r7, #12
 80030f8:	46bd      	mov	sp, r7
 80030fa:	bd90      	pop	{r4, r7, pc}
 80030fc:	24001cfc 	.word	0x24001cfc
 8003100:	24000008 	.word	0x24000008
 8003104:	24001d00 	.word	0x24001d00

08003108 <touchgfx_taskEntry>:

void touchgfx_taskEntry()
{
 8003108:	b580      	push	{r7, lr}
 800310a:	af00      	add	r7, sp, #0
     * Main event loop. Will wait for VSYNC signal, and then process next frame. Call
     * this function from your GUI task.
     *
     * Note This function never returns
     */
    hal.taskEntry();
 800310c:	4802      	ldr	r0, [pc, #8]	@ (8003118 <touchgfx_taskEntry+0x10>)
 800310e:	f015 f97e 	bl	801840e <_ZN8touchgfx3HAL9taskEntryEv>
}
 8003112:	bf00      	nop
 8003114:	bd80      	pop	{r7, pc}
 8003116:	bf00      	nop
 8003118:	24001d00 	.word	0x24001d00

0800311c <_ZN12FrontendHeapD1Ev>:
class FrontendHeap : public FrontendHeapBase
 800311c:	b580      	push	{r7, lr}
 800311e:	b082      	sub	sp, #8
 8003120:	af00      	add	r7, sp, #0
 8003122:	6078      	str	r0, [r7, #4]
 8003124:	4a10      	ldr	r2, [pc, #64]	@ (8003168 <_ZN12FrontendHeapD1Ev+0x4c>)
 8003126:	687b      	ldr	r3, [r7, #4]
 8003128:	601a      	str	r2, [r3, #0]
 800312a:	687b      	ldr	r3, [r7, #4]
 800312c:	f603 338c 	addw	r3, r3, #2956	@ 0xb8c
 8003130:	4618      	mov	r0, r3
 8003132:	f7ff fe35 	bl	8002da0 <_ZN19FrontendApplicationD1Ev>
 8003136:	687b      	ldr	r3, [r7, #4]
 8003138:	f603 334c 	addw	r3, r3, #2892	@ 0xb4c
 800313c:	4618      	mov	r0, r3
 800313e:	f000 f827 	bl	8003190 <_ZN8touchgfx9PartitionINS_4meta8TypeListINS_14WipeTransitionILNS_9DirectionE1EEENS2_INS1_3NilES6_EEEELt1EED1Ev>
 8003142:	687b      	ldr	r3, [r7, #4]
 8003144:	332c      	adds	r3, #44	@ 0x2c
 8003146:	4618      	mov	r0, r3
 8003148:	f000 f844 	bl	80031d4 <_ZN8touchgfx9PartitionINS_4meta8TypeListI8MainViewNS2_INS1_3NilES4_EEEELt1EED1Ev>
 800314c:	687b      	ldr	r3, [r7, #4]
 800314e:	3314      	adds	r3, #20
 8003150:	4618      	mov	r0, r3
 8003152:	f000 f863 	bl	800321c <_ZN8touchgfx9PartitionINS_4meta8TypeListI25Localize_AnomalyPresenterNS2_INS1_3NilES4_EEEELt1EED1Ev>
 8003156:	687b      	ldr	r3, [r7, #4]
 8003158:	4618      	mov	r0, r3
 800315a:	f7ff feb1 	bl	8002ec0 <_ZN16FrontendHeapBaseD1Ev>
 800315e:	687b      	ldr	r3, [r7, #4]
 8003160:	4618      	mov	r0, r3
 8003162:	3708      	adds	r7, #8
 8003164:	46bd      	mov	sp, r7
 8003166:	bd80      	pop	{r7, pc}
 8003168:	0802c904 	.word	0x0802c904

0800316c <_ZN12FrontendHeapD0Ev>:
 800316c:	b580      	push	{r7, lr}
 800316e:	b082      	sub	sp, #8
 8003170:	af00      	add	r7, sp, #0
 8003172:	6078      	str	r0, [r7, #4]
 8003174:	6878      	ldr	r0, [r7, #4]
 8003176:	f7ff ffd1 	bl	800311c <_ZN12FrontendHeapD1Ev>
 800317a:	f640 41e8 	movw	r1, #3304	@ 0xce8
 800317e:	6878      	ldr	r0, [r7, #4]
 8003180:	f027 fba9 	bl	802a8d6 <_ZdlPvj>
 8003184:	687b      	ldr	r3, [r7, #4]
 8003186:	4618      	mov	r0, r3
 8003188:	3708      	adds	r7, #8
 800318a:	46bd      	mov	sp, r7
 800318c:	bd80      	pop	{r7, pc}
	...

08003190 <_ZN8touchgfx9PartitionINS_4meta8TypeListINS_14WipeTransitionILNS_9DirectionE1EEENS2_INS1_3NilES6_EEEELt1EED1Ev>:
 8003190:	b580      	push	{r7, lr}
 8003192:	b082      	sub	sp, #8
 8003194:	af00      	add	r7, sp, #0
 8003196:	6078      	str	r0, [r7, #4]
 8003198:	4a05      	ldr	r2, [pc, #20]	@ (80031b0 <_ZN8touchgfx9PartitionINS_4meta8TypeListINS_14WipeTransitionILNS_9DirectionE1EEENS2_INS1_3NilES6_EEEELt1EED1Ev+0x20>)
 800319a:	687b      	ldr	r3, [r7, #4]
 800319c:	601a      	str	r2, [r3, #0]
 800319e:	687b      	ldr	r3, [r7, #4]
 80031a0:	4618      	mov	r0, r3
 80031a2:	f014 f8a3 	bl	80172ec <_ZN8touchgfx17AbstractPartitionD1Ev>
 80031a6:	687b      	ldr	r3, [r7, #4]
 80031a8:	4618      	mov	r0, r3
 80031aa:	3708      	adds	r7, #8
 80031ac:	46bd      	mov	sp, r7
 80031ae:	bd80      	pop	{r7, pc}
 80031b0:	0802c918 	.word	0x0802c918

080031b4 <_ZN8touchgfx9PartitionINS_4meta8TypeListINS_14WipeTransitionILNS_9DirectionE1EEENS2_INS1_3NilES6_EEEELt1EED0Ev>:
 80031b4:	b580      	push	{r7, lr}
 80031b6:	b082      	sub	sp, #8
 80031b8:	af00      	add	r7, sp, #0
 80031ba:	6078      	str	r0, [r7, #4]
 80031bc:	6878      	ldr	r0, [r7, #4]
 80031be:	f7ff ffe7 	bl	8003190 <_ZN8touchgfx9PartitionINS_4meta8TypeListINS_14WipeTransitionILNS_9DirectionE1EEENS2_INS1_3NilES6_EEEELt1EED1Ev>
 80031c2:	2140      	movs	r1, #64	@ 0x40
 80031c4:	6878      	ldr	r0, [r7, #4]
 80031c6:	f027 fb86 	bl	802a8d6 <_ZdlPvj>
 80031ca:	687b      	ldr	r3, [r7, #4]
 80031cc:	4618      	mov	r0, r3
 80031ce:	3708      	adds	r7, #8
 80031d0:	46bd      	mov	sp, r7
 80031d2:	bd80      	pop	{r7, pc}

080031d4 <_ZN8touchgfx9PartitionINS_4meta8TypeListI8MainViewNS2_INS1_3NilES4_EEEELt1EED1Ev>:
 80031d4:	b580      	push	{r7, lr}
 80031d6:	b082      	sub	sp, #8
 80031d8:	af00      	add	r7, sp, #0
 80031da:	6078      	str	r0, [r7, #4]
 80031dc:	4a05      	ldr	r2, [pc, #20]	@ (80031f4 <_ZN8touchgfx9PartitionINS_4meta8TypeListI8MainViewNS2_INS1_3NilES4_EEEELt1EED1Ev+0x20>)
 80031de:	687b      	ldr	r3, [r7, #4]
 80031e0:	601a      	str	r2, [r3, #0]
 80031e2:	687b      	ldr	r3, [r7, #4]
 80031e4:	4618      	mov	r0, r3
 80031e6:	f014 f881 	bl	80172ec <_ZN8touchgfx17AbstractPartitionD1Ev>
 80031ea:	687b      	ldr	r3, [r7, #4]
 80031ec:	4618      	mov	r0, r3
 80031ee:	3708      	adds	r7, #8
 80031f0:	46bd      	mov	sp, r7
 80031f2:	bd80      	pop	{r7, pc}
 80031f4:	0802c94c 	.word	0x0802c94c

080031f8 <_ZN8touchgfx9PartitionINS_4meta8TypeListI8MainViewNS2_INS1_3NilES4_EEEELt1EED0Ev>:
 80031f8:	b580      	push	{r7, lr}
 80031fa:	b082      	sub	sp, #8
 80031fc:	af00      	add	r7, sp, #0
 80031fe:	6078      	str	r0, [r7, #4]
 8003200:	6878      	ldr	r0, [r7, #4]
 8003202:	f7ff ffe7 	bl	80031d4 <_ZN8touchgfx9PartitionINS_4meta8TypeListI8MainViewNS2_INS1_3NilES4_EEEELt1EED1Ev>
 8003206:	f44f 6132 	mov.w	r1, #2848	@ 0xb20
 800320a:	6878      	ldr	r0, [r7, #4]
 800320c:	f027 fb63 	bl	802a8d6 <_ZdlPvj>
 8003210:	687b      	ldr	r3, [r7, #4]
 8003212:	4618      	mov	r0, r3
 8003214:	3708      	adds	r7, #8
 8003216:	46bd      	mov	sp, r7
 8003218:	bd80      	pop	{r7, pc}
	...

0800321c <_ZN8touchgfx9PartitionINS_4meta8TypeListI25Localize_AnomalyPresenterNS2_INS1_3NilES4_EEEELt1EED1Ev>:
 800321c:	b580      	push	{r7, lr}
 800321e:	b082      	sub	sp, #8
 8003220:	af00      	add	r7, sp, #0
 8003222:	6078      	str	r0, [r7, #4]
 8003224:	4a05      	ldr	r2, [pc, #20]	@ (800323c <_ZN8touchgfx9PartitionINS_4meta8TypeListI25Localize_AnomalyPresenterNS2_INS1_3NilES4_EEEELt1EED1Ev+0x20>)
 8003226:	687b      	ldr	r3, [r7, #4]
 8003228:	601a      	str	r2, [r3, #0]
 800322a:	687b      	ldr	r3, [r7, #4]
 800322c:	4618      	mov	r0, r3
 800322e:	f014 f85d 	bl	80172ec <_ZN8touchgfx17AbstractPartitionD1Ev>
 8003232:	687b      	ldr	r3, [r7, #4]
 8003234:	4618      	mov	r0, r3
 8003236:	3708      	adds	r7, #8
 8003238:	46bd      	mov	sp, r7
 800323a:	bd80      	pop	{r7, pc}
 800323c:	0802c980 	.word	0x0802c980

08003240 <_ZN8touchgfx9PartitionINS_4meta8TypeListI25Localize_AnomalyPresenterNS2_INS1_3NilES4_EEEELt1EED0Ev>:
 8003240:	b580      	push	{r7, lr}
 8003242:	b082      	sub	sp, #8
 8003244:	af00      	add	r7, sp, #0
 8003246:	6078      	str	r0, [r7, #4]
 8003248:	6878      	ldr	r0, [r7, #4]
 800324a:	f7ff ffe7 	bl	800321c <_ZN8touchgfx9PartitionINS_4meta8TypeListI25Localize_AnomalyPresenterNS2_INS1_3NilES4_EEEELt1EED1Ev>
 800324e:	2118      	movs	r1, #24
 8003250:	6878      	ldr	r0, [r7, #4]
 8003252:	f027 fb40 	bl	802a8d6 <_ZdlPvj>
 8003256:	687b      	ldr	r3, [r7, #4]
 8003258:	4618      	mov	r0, r3
 800325a:	3708      	adds	r7, #8
 800325c:	46bd      	mov	sp, r7
 800325e:	bd80      	pop	{r7, pc}

08003260 <_ZN23ApplicationFontProviderD1Ev>:
    static const touchgfx::FontId TYPOGRAPHY_01 = 0; // verdana_20_4bpp
    static const touchgfx::FontId TYPOGRAPHY_02 = 4; // verdanab_12_4bpp
    static const uint16_t NUMBER_OF_FONTS = 5;
};

class ApplicationFontProvider : public touchgfx::FontProvider
 8003260:	b580      	push	{r7, lr}
 8003262:	b082      	sub	sp, #8
 8003264:	af00      	add	r7, sp, #0
 8003266:	6078      	str	r0, [r7, #4]
 8003268:	4a05      	ldr	r2, [pc, #20]	@ (8003280 <_ZN23ApplicationFontProviderD1Ev+0x20>)
 800326a:	687b      	ldr	r3, [r7, #4]
 800326c:	601a      	str	r2, [r3, #0]
 800326e:	687b      	ldr	r3, [r7, #4]
 8003270:	4618      	mov	r0, r3
 8003272:	f7ff fad3 	bl	800281c <_ZN8touchgfx12FontProviderD1Ev>
 8003276:	687b      	ldr	r3, [r7, #4]
 8003278:	4618      	mov	r0, r3
 800327a:	3708      	adds	r7, #8
 800327c:	46bd      	mov	sp, r7
 800327e:	bd80      	pop	{r7, pc}
 8003280:	0802cbe0 	.word	0x0802cbe0

08003284 <_ZN23ApplicationFontProviderD0Ev>:
 8003284:	b580      	push	{r7, lr}
 8003286:	b082      	sub	sp, #8
 8003288:	af00      	add	r7, sp, #0
 800328a:	6078      	str	r0, [r7, #4]
 800328c:	6878      	ldr	r0, [r7, #4]
 800328e:	f7ff ffe7 	bl	8003260 <_ZN23ApplicationFontProviderD1Ev>
 8003292:	2104      	movs	r1, #4
 8003294:	6878      	ldr	r0, [r7, #4]
 8003296:	f027 fb1e 	bl	802a8d6 <_ZdlPvj>
 800329a:	687b      	ldr	r3, [r7, #4]
 800329c:	4618      	mov	r0, r3
 800329e:	3708      	adds	r7, #8
 80032a0:	46bd      	mov	sp, r7
 80032a2:	bd80      	pop	{r7, pc}

080032a4 <_ZN8touchgfx8LCD16bppD1Ev>:
 *
 * @see LCD
 *
 * @note All coordinates are expected to be in absolute coordinates!
 */
class LCD16bpp : public LCD
 80032a4:	b580      	push	{r7, lr}
 80032a6:	b082      	sub	sp, #8
 80032a8:	af00      	add	r7, sp, #0
 80032aa:	6078      	str	r0, [r7, #4]
 80032ac:	4a05      	ldr	r2, [pc, #20]	@ (80032c4 <_ZN8touchgfx8LCD16bppD1Ev+0x20>)
 80032ae:	687b      	ldr	r3, [r7, #4]
 80032b0:	601a      	str	r2, [r3, #0]
 80032b2:	687b      	ldr	r3, [r7, #4]
 80032b4:	4618      	mov	r0, r3
 80032b6:	f7ff fb73 	bl	80029a0 <_ZN8touchgfx3LCDD1Ev>
 80032ba:	687b      	ldr	r3, [r7, #4]
 80032bc:	4618      	mov	r0, r3
 80032be:	3708      	adds	r7, #8
 80032c0:	46bd      	mov	sp, r7
 80032c2:	bd80      	pop	{r7, pc}
 80032c4:	0802fdc4 	.word	0x0802fdc4

080032c8 <_ZN8touchgfx8LCD16bppD0Ev>:
 80032c8:	b580      	push	{r7, lr}
 80032ca:	b082      	sub	sp, #8
 80032cc:	af00      	add	r7, sp, #0
 80032ce:	6078      	str	r0, [r7, #4]
 80032d0:	6878      	ldr	r0, [r7, #4]
 80032d2:	f7ff ffe7 	bl	80032a4 <_ZN8touchgfx8LCD16bppD1Ev>
 80032d6:	2178      	movs	r1, #120	@ 0x78
 80032d8:	6878      	ldr	r0, [r7, #4]
 80032da:	f027 fafc 	bl	802a8d6 <_ZdlPvj>
 80032de:	687b      	ldr	r3, [r7, #4]
 80032e0:	4618      	mov	r0, r3
 80032e2:	3708      	adds	r7, #8
 80032e4:	46bd      	mov	sp, r7
 80032e6:	bd80      	pop	{r7, pc}

080032e8 <_Z41__static_initialization_and_destruction_0ii>:
 80032e8:	b580      	push	{r7, lr}
 80032ea:	b084      	sub	sp, #16
 80032ec:	af02      	add	r7, sp, #8
 80032ee:	6078      	str	r0, [r7, #4]
 80032f0:	6039      	str	r1, [r7, #0]
 80032f2:	687b      	ldr	r3, [r7, #4]
 80032f4:	2b01      	cmp	r3, #1
 80032f6:	d119      	bne.n	800332c <_Z41__static_initialization_and_destruction_0ii+0x44>
 80032f8:	683b      	ldr	r3, [r7, #0]
 80032fa:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80032fe:	4293      	cmp	r3, r2
 8003300:	d114      	bne.n	800332c <_Z41__static_initialization_and_destruction_0ii+0x44>
static STM32TouchController tc;
 8003302:	4818      	ldr	r0, [pc, #96]	@ (8003364 <_Z41__static_initialization_and_destruction_0ii+0x7c>)
 8003304:	f7ff fec4 	bl	8003090 <_ZN20STM32TouchControllerC1Ev>
static STM32DMA dma;
 8003308:	4817      	ldr	r0, [pc, #92]	@ (8003368 <_Z41__static_initialization_and_destruction_0ii+0x80>)
 800330a:	f7fe ff45 	bl	8002198 <_ZN8STM32DMAC1Ev>
static LCD16bpp display;
 800330e:	4817      	ldr	r0, [pc, #92]	@ (800336c <_Z41__static_initialization_and_destruction_0ii+0x84>)
 8003310:	f01e fb52 	bl	80219b8 <_ZN8touchgfx8LCD16bppC1Ev>
static TouchGFXHAL hal(dma, display, tc, 480, 272);
 8003314:	f44f 7388 	mov.w	r3, #272	@ 0x110
 8003318:	9301      	str	r3, [sp, #4]
 800331a:	f44f 73f0 	mov.w	r3, #480	@ 0x1e0
 800331e:	9300      	str	r3, [sp, #0]
 8003320:	4b10      	ldr	r3, [pc, #64]	@ (8003364 <_Z41__static_initialization_and_destruction_0ii+0x7c>)
 8003322:	4a12      	ldr	r2, [pc, #72]	@ (800336c <_Z41__static_initialization_and_destruction_0ii+0x84>)
 8003324:	4910      	ldr	r1, [pc, #64]	@ (8003368 <_Z41__static_initialization_and_destruction_0ii+0x80>)
 8003326:	4812      	ldr	r0, [pc, #72]	@ (8003370 <_Z41__static_initialization_and_destruction_0ii+0x88>)
 8003328:	f7ff fe86 	bl	8003038 <_ZN11TouchGFXHALC1ERN8touchgfx13DMA_InterfaceERNS0_3LCDERNS0_15TouchControllerEtt>
 800332c:	687b      	ldr	r3, [r7, #4]
 800332e:	2b00      	cmp	r3, #0
 8003330:	d113      	bne.n	800335a <_Z41__static_initialization_and_destruction_0ii+0x72>
 8003332:	683b      	ldr	r3, [r7, #0]
 8003334:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8003338:	4293      	cmp	r3, r2
 800333a:	d10e      	bne.n	800335a <_Z41__static_initialization_and_destruction_0ii+0x72>
 800333c:	480c      	ldr	r0, [pc, #48]	@ (8003370 <_Z41__static_initialization_and_destruction_0ii+0x88>)
 800333e:	f7fe fd13 	bl	8001d68 <_ZN11TouchGFXHALD1Ev>
static ApplicationFontProvider fontProvider;
 8003342:	480c      	ldr	r0, [pc, #48]	@ (8003374 <_Z41__static_initialization_and_destruction_0ii+0x8c>)
 8003344:	f7ff ff8c 	bl	8003260 <_ZN23ApplicationFontProviderD1Ev>
static LCD16bpp display;
 8003348:	4808      	ldr	r0, [pc, #32]	@ (800336c <_Z41__static_initialization_and_destruction_0ii+0x84>)
 800334a:	f7ff ffab 	bl	80032a4 <_ZN8touchgfx8LCD16bppD1Ev>
static STM32DMA dma;
 800334e:	4806      	ldr	r0, [pc, #24]	@ (8003368 <_Z41__static_initialization_and_destruction_0ii+0x80>)
 8003350:	f7fe ff4c 	bl	80021ec <_ZN8STM32DMAD1Ev>
static STM32TouchController tc;
 8003354:	4803      	ldr	r0, [pc, #12]	@ (8003364 <_Z41__static_initialization_and_destruction_0ii+0x7c>)
 8003356:	f7fe fa95 	bl	8001884 <_ZN20STM32TouchControllerD1Ev>
}
 800335a:	bf00      	nop
 800335c:	3708      	adds	r7, #8
 800335e:	46bd      	mov	sp, r7
 8003360:	bd80      	pop	{r7, pc}
 8003362:	bf00      	nop
 8003364:	24001060 	.word	0x24001060
 8003368:	24001064 	.word	0x24001064
 800336c:	24001c84 	.word	0x24001c84
 8003370:	24001d00 	.word	0x24001d00
 8003374:	24000008 	.word	0x24000008

08003378 <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvED1Ev>:
 *
 * @note The member function to call must return void. The function can have zero, one, two or
 *       three arguments of any type.
 */
template <class dest_type>
struct Callback<dest_type, void, void, void> : public GenericCallback<>
 8003378:	b580      	push	{r7, lr}
 800337a:	b082      	sub	sp, #8
 800337c:	af00      	add	r7, sp, #0
 800337e:	6078      	str	r0, [r7, #4]
 8003380:	4a05      	ldr	r2, [pc, #20]	@ (8003398 <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvED1Ev+0x20>)
 8003382:	687b      	ldr	r3, [r7, #4]
 8003384:	601a      	str	r2, [r3, #0]
 8003386:	687b      	ldr	r3, [r7, #4]
 8003388:	4618      	mov	r0, r3
 800338a:	f7ff fb47 	bl	8002a1c <_ZN8touchgfx15GenericCallbackIvvvED1Ev>
 800338e:	687b      	ldr	r3, [r7, #4]
 8003390:	4618      	mov	r0, r3
 8003392:	3708      	adds	r7, #8
 8003394:	46bd      	mov	sp, r7
 8003396:	bd80      	pop	{r7, pc}
 8003398:	0802ca50 	.word	0x0802ca50

0800339c <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvED0Ev>:
 800339c:	b580      	push	{r7, lr}
 800339e:	b082      	sub	sp, #8
 80033a0:	af00      	add	r7, sp, #0
 80033a2:	6078      	str	r0, [r7, #4]
 80033a4:	6878      	ldr	r0, [r7, #4]
 80033a6:	f7ff ffe7 	bl	8003378 <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvED1Ev>
 80033aa:	2110      	movs	r1, #16
 80033ac:	6878      	ldr	r0, [r7, #4]
 80033ae:	f027 fa92 	bl	802a8d6 <_ZdlPvj>
 80033b2:	687b      	ldr	r3, [r7, #4]
 80033b4:	4618      	mov	r0, r3
 80033b6:	3708      	adds	r7, #8
 80033b8:	46bd      	mov	sp, r7
 80033ba:	bd80      	pop	{r7, pc}

080033bc <_ZNK8touchgfx9PartitionINS_4meta8TypeListINS_14WipeTransitionILNS_9DirectionE1EEENS2_INS1_3NilES6_EEEELt1EE8capacityEv>:
    {
        INTS_PR_ELEMENT = (sizeof(typename meta::select_type_maxsize<SupportedTypesList>::type) + sizeof(int) - 1) / sizeof(int),
        SIZE_OF_ELEMENT = INTS_PR_ELEMENT * sizeof(int)
    };

    virtual uint16_t capacity() const
 80033bc:	b480      	push	{r7}
 80033be:	b083      	sub	sp, #12
 80033c0:	af00      	add	r7, sp, #0
 80033c2:	6078      	str	r0, [r7, #4]
    {
        return NUMBER_OF_ELEMENTS;
 80033c4:	2301      	movs	r3, #1
    }
 80033c6:	4618      	mov	r0, r3
 80033c8:	370c      	adds	r7, #12
 80033ca:	46bd      	mov	sp, r7
 80033cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033d0:	4770      	bx	lr

080033d2 <_ZN8touchgfx9PartitionINS_4meta8TypeListINS_14WipeTransitionILNS_9DirectionE1EEENS2_INS1_3NilES6_EEEELt1EE12element_sizeEv>:

    virtual uint32_t element_size()
 80033d2:	b480      	push	{r7}
 80033d4:	b083      	sub	sp, #12
 80033d6:	af00      	add	r7, sp, #0
 80033d8:	6078      	str	r0, [r7, #4]
    {
        return sizeof(stBlocks[0]);
 80033da:	2338      	movs	r3, #56	@ 0x38
    }
 80033dc:	4618      	mov	r0, r3
 80033de:	370c      	adds	r7, #12
 80033e0:	46bd      	mov	sp, r7
 80033e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033e6:	4770      	bx	lr

080033e8 <_ZN8touchgfx9PartitionINS_4meta8TypeListINS_14WipeTransitionILNS_9DirectionE1EEENS2_INS1_3NilES6_EEEELt1EE7elementEt>:

protected:
    virtual void* element(uint16_t index)
 80033e8:	b480      	push	{r7}
 80033ea:	b083      	sub	sp, #12
 80033ec:	af00      	add	r7, sp, #0
 80033ee:	6078      	str	r0, [r7, #4]
 80033f0:	460b      	mov	r3, r1
 80033f2:	807b      	strh	r3, [r7, #2]
    {
        return &stBlocks[index];
 80033f4:	887a      	ldrh	r2, [r7, #2]
 80033f6:	4613      	mov	r3, r2
 80033f8:	00db      	lsls	r3, r3, #3
 80033fa:	1a9b      	subs	r3, r3, r2
 80033fc:	00db      	lsls	r3, r3, #3
 80033fe:	3308      	adds	r3, #8
 8003400:	687a      	ldr	r2, [r7, #4]
 8003402:	4413      	add	r3, r2
    }
 8003404:	4618      	mov	r0, r3
 8003406:	370c      	adds	r7, #12
 8003408:	46bd      	mov	sp, r7
 800340a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800340e:	4770      	bx	lr

08003410 <_ZNK8touchgfx9PartitionINS_4meta8TypeListINS_14WipeTransitionILNS_9DirectionE1EEENS2_INS1_3NilES6_EEEELt1EE7elementEt>:

    virtual const void* element(uint16_t index) const
 8003410:	b480      	push	{r7}
 8003412:	b083      	sub	sp, #12
 8003414:	af00      	add	r7, sp, #0
 8003416:	6078      	str	r0, [r7, #4]
 8003418:	460b      	mov	r3, r1
 800341a:	807b      	strh	r3, [r7, #2]
    {
        return &stBlocks[index];
 800341c:	887a      	ldrh	r2, [r7, #2]
 800341e:	4613      	mov	r3, r2
 8003420:	00db      	lsls	r3, r3, #3
 8003422:	1a9b      	subs	r3, r3, r2
 8003424:	00db      	lsls	r3, r3, #3
 8003426:	3308      	adds	r3, #8
 8003428:	687a      	ldr	r2, [r7, #4]
 800342a:	4413      	add	r3, r2
    }
 800342c:	4618      	mov	r0, r3
 800342e:	370c      	adds	r7, #12
 8003430:	46bd      	mov	sp, r7
 8003432:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003436:	4770      	bx	lr

08003438 <_ZNK8touchgfx9PartitionINS_4meta8TypeListI8MainViewNS2_INS1_3NilES4_EEEELt1EE8capacityEv>:
    virtual uint16_t capacity() const
 8003438:	b480      	push	{r7}
 800343a:	b083      	sub	sp, #12
 800343c:	af00      	add	r7, sp, #0
 800343e:	6078      	str	r0, [r7, #4]
        return NUMBER_OF_ELEMENTS;
 8003440:	2301      	movs	r3, #1
    }
 8003442:	4618      	mov	r0, r3
 8003444:	370c      	adds	r7, #12
 8003446:	46bd      	mov	sp, r7
 8003448:	f85d 7b04 	ldr.w	r7, [sp], #4
 800344c:	4770      	bx	lr

0800344e <_ZN8touchgfx9PartitionINS_4meta8TypeListI8MainViewNS2_INS1_3NilES4_EEEELt1EE12element_sizeEv>:
    virtual uint32_t element_size()
 800344e:	b480      	push	{r7}
 8003450:	b083      	sub	sp, #12
 8003452:	af00      	add	r7, sp, #0
 8003454:	6078      	str	r0, [r7, #4]
        return sizeof(stBlocks[0]);
 8003456:	f640 3318 	movw	r3, #2840	@ 0xb18
    }
 800345a:	4618      	mov	r0, r3
 800345c:	370c      	adds	r7, #12
 800345e:	46bd      	mov	sp, r7
 8003460:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003464:	4770      	bx	lr

08003466 <_ZN8touchgfx9PartitionINS_4meta8TypeListI8MainViewNS2_INS1_3NilES4_EEEELt1EE7elementEt>:
    virtual void* element(uint16_t index)
 8003466:	b480      	push	{r7}
 8003468:	b083      	sub	sp, #12
 800346a:	af00      	add	r7, sp, #0
 800346c:	6078      	str	r0, [r7, #4]
 800346e:	460b      	mov	r3, r1
 8003470:	807b      	strh	r3, [r7, #2]
        return &stBlocks[index];
 8003472:	887b      	ldrh	r3, [r7, #2]
 8003474:	f640 3218 	movw	r2, #2840	@ 0xb18
 8003478:	fb02 f303 	mul.w	r3, r2, r3
 800347c:	3308      	adds	r3, #8
 800347e:	687a      	ldr	r2, [r7, #4]
 8003480:	4413      	add	r3, r2
    }
 8003482:	4618      	mov	r0, r3
 8003484:	370c      	adds	r7, #12
 8003486:	46bd      	mov	sp, r7
 8003488:	f85d 7b04 	ldr.w	r7, [sp], #4
 800348c:	4770      	bx	lr

0800348e <_ZNK8touchgfx9PartitionINS_4meta8TypeListI8MainViewNS2_INS1_3NilES4_EEEELt1EE7elementEt>:
    virtual const void* element(uint16_t index) const
 800348e:	b480      	push	{r7}
 8003490:	b083      	sub	sp, #12
 8003492:	af00      	add	r7, sp, #0
 8003494:	6078      	str	r0, [r7, #4]
 8003496:	460b      	mov	r3, r1
 8003498:	807b      	strh	r3, [r7, #2]
        return &stBlocks[index];
 800349a:	887b      	ldrh	r3, [r7, #2]
 800349c:	f640 3218 	movw	r2, #2840	@ 0xb18
 80034a0:	fb02 f303 	mul.w	r3, r2, r3
 80034a4:	3308      	adds	r3, #8
 80034a6:	687a      	ldr	r2, [r7, #4]
 80034a8:	4413      	add	r3, r2
    }
 80034aa:	4618      	mov	r0, r3
 80034ac:	370c      	adds	r7, #12
 80034ae:	46bd      	mov	sp, r7
 80034b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034b4:	4770      	bx	lr

080034b6 <_ZNK8touchgfx9PartitionINS_4meta8TypeListI25Localize_AnomalyPresenterNS2_INS1_3NilES4_EEEELt1EE8capacityEv>:
    virtual uint16_t capacity() const
 80034b6:	b480      	push	{r7}
 80034b8:	b083      	sub	sp, #12
 80034ba:	af00      	add	r7, sp, #0
 80034bc:	6078      	str	r0, [r7, #4]
        return NUMBER_OF_ELEMENTS;
 80034be:	2301      	movs	r3, #1
    }
 80034c0:	4618      	mov	r0, r3
 80034c2:	370c      	adds	r7, #12
 80034c4:	46bd      	mov	sp, r7
 80034c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034ca:	4770      	bx	lr

080034cc <_ZN8touchgfx9PartitionINS_4meta8TypeListI25Localize_AnomalyPresenterNS2_INS1_3NilES4_EEEELt1EE12element_sizeEv>:
    virtual uint32_t element_size()
 80034cc:	b480      	push	{r7}
 80034ce:	b083      	sub	sp, #12
 80034d0:	af00      	add	r7, sp, #0
 80034d2:	6078      	str	r0, [r7, #4]
        return sizeof(stBlocks[0]);
 80034d4:	2310      	movs	r3, #16
    }
 80034d6:	4618      	mov	r0, r3
 80034d8:	370c      	adds	r7, #12
 80034da:	46bd      	mov	sp, r7
 80034dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034e0:	4770      	bx	lr

080034e2 <_ZN8touchgfx9PartitionINS_4meta8TypeListI25Localize_AnomalyPresenterNS2_INS1_3NilES4_EEEELt1EE7elementEt>:
    virtual void* element(uint16_t index)
 80034e2:	b480      	push	{r7}
 80034e4:	b083      	sub	sp, #12
 80034e6:	af00      	add	r7, sp, #0
 80034e8:	6078      	str	r0, [r7, #4]
 80034ea:	460b      	mov	r3, r1
 80034ec:	807b      	strh	r3, [r7, #2]
        return &stBlocks[index];
 80034ee:	887b      	ldrh	r3, [r7, #2]
 80034f0:	011b      	lsls	r3, r3, #4
 80034f2:	3308      	adds	r3, #8
 80034f4:	687a      	ldr	r2, [r7, #4]
 80034f6:	4413      	add	r3, r2
    }
 80034f8:	4618      	mov	r0, r3
 80034fa:	370c      	adds	r7, #12
 80034fc:	46bd      	mov	sp, r7
 80034fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003502:	4770      	bx	lr

08003504 <_ZNK8touchgfx9PartitionINS_4meta8TypeListI25Localize_AnomalyPresenterNS2_INS1_3NilES4_EEEELt1EE7elementEt>:
    virtual const void* element(uint16_t index) const
 8003504:	b480      	push	{r7}
 8003506:	b083      	sub	sp, #12
 8003508:	af00      	add	r7, sp, #0
 800350a:	6078      	str	r0, [r7, #4]
 800350c:	460b      	mov	r3, r1
 800350e:	807b      	strh	r3, [r7, #2]
        return &stBlocks[index];
 8003510:	887b      	ldrh	r3, [r7, #2]
 8003512:	011b      	lsls	r3, r3, #4
 8003514:	3308      	adds	r3, #8
 8003516:	687a      	ldr	r2, [r7, #4]
 8003518:	4413      	add	r3, r2
    }
 800351a:	4618      	mov	r0, r3
 800351c:	370c      	adds	r7, #12
 800351e:	46bd      	mov	sp, r7
 8003520:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003524:	4770      	bx	lr

08003526 <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvE7executeEv>:

    /**
     * Calls the member function. Do not call execute unless isValid() returns true (ie. a
     * pointer to the object and the function has been set).
     */
    virtual void execute()
 8003526:	b580      	push	{r7, lr}
 8003528:	b082      	sub	sp, #8
 800352a:	af00      	add	r7, sp, #0
 800352c:	6078      	str	r0, [r7, #4]
    {
        (pobject->*pmemfun_0)();
 800352e:	687b      	ldr	r3, [r7, #4]
 8003530:	685b      	ldr	r3, [r3, #4]
 8003532:	687a      	ldr	r2, [r7, #4]
 8003534:	68d2      	ldr	r2, [r2, #12]
 8003536:	1052      	asrs	r2, r2, #1
 8003538:	1899      	adds	r1, r3, r2
 800353a:	687b      	ldr	r3, [r7, #4]
 800353c:	68db      	ldr	r3, [r3, #12]
 800353e:	f003 0301 	and.w	r3, r3, #1
 8003542:	2b00      	cmp	r3, #0
 8003544:	d102      	bne.n	800354c <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvE7executeEv+0x26>
 8003546:	687b      	ldr	r3, [r7, #4]
 8003548:	689b      	ldr	r3, [r3, #8]
 800354a:	e00a      	b.n	8003562 <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvE7executeEv+0x3c>
 800354c:	687b      	ldr	r3, [r7, #4]
 800354e:	685b      	ldr	r3, [r3, #4]
 8003550:	687a      	ldr	r2, [r7, #4]
 8003552:	68d2      	ldr	r2, [r2, #12]
 8003554:	1052      	asrs	r2, r2, #1
 8003556:	4413      	add	r3, r2
 8003558:	681b      	ldr	r3, [r3, #0]
 800355a:	687a      	ldr	r2, [r7, #4]
 800355c:	6892      	ldr	r2, [r2, #8]
 800355e:	4413      	add	r3, r2
 8003560:	681b      	ldr	r3, [r3, #0]
 8003562:	4608      	mov	r0, r1
 8003564:	4798      	blx	r3
    }
 8003566:	bf00      	nop
 8003568:	3708      	adds	r7, #8
 800356a:	46bd      	mov	sp, r7
 800356c:	bd80      	pop	{r7, pc}

0800356e <_ZNK8touchgfx8CallbackI23FrontendApplicationBasevvvE7isValidEv>:
    /**
     * Function to check whether the Callback has been initialized with values.
     *
     * @return true If the callback is valid (i.e. safe to call execute).
     */
    virtual bool isValid() const
 800356e:	b480      	push	{r7}
 8003570:	b083      	sub	sp, #12
 8003572:	af00      	add	r7, sp, #0
 8003574:	6078      	str	r0, [r7, #4]
    {
        return (pobject != 0) && (pmemfun_0 != 0);
 8003576:	687b      	ldr	r3, [r7, #4]
 8003578:	685b      	ldr	r3, [r3, #4]
 800357a:	2b00      	cmp	r3, #0
 800357c:	d010      	beq.n	80035a0 <_ZNK8touchgfx8CallbackI23FrontendApplicationBasevvvE7isValidEv+0x32>
 800357e:	687b      	ldr	r3, [r7, #4]
 8003580:	689b      	ldr	r3, [r3, #8]
 8003582:	2b00      	cmp	r3, #0
 8003584:	d107      	bne.n	8003596 <_ZNK8touchgfx8CallbackI23FrontendApplicationBasevvvE7isValidEv+0x28>
 8003586:	687b      	ldr	r3, [r7, #4]
 8003588:	68db      	ldr	r3, [r3, #12]
 800358a:	f003 0301 	and.w	r3, r3, #1
 800358e:	2b00      	cmp	r3, #0
 8003590:	d101      	bne.n	8003596 <_ZNK8touchgfx8CallbackI23FrontendApplicationBasevvvE7isValidEv+0x28>
 8003592:	2301      	movs	r3, #1
 8003594:	e000      	b.n	8003598 <_ZNK8touchgfx8CallbackI23FrontendApplicationBasevvvE7isValidEv+0x2a>
 8003596:	2300      	movs	r3, #0
 8003598:	2b01      	cmp	r3, #1
 800359a:	d001      	beq.n	80035a0 <_ZNK8touchgfx8CallbackI23FrontendApplicationBasevvvE7isValidEv+0x32>
 800359c:	2301      	movs	r3, #1
 800359e:	e000      	b.n	80035a2 <_ZNK8touchgfx8CallbackI23FrontendApplicationBasevvvE7isValidEv+0x34>
 80035a0:	2300      	movs	r3, #0
    }
 80035a2:	4618      	mov	r0, r3
 80035a4:	370c      	adds	r7, #12
 80035a6:	46bd      	mov	sp, r7
 80035a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035ac:	4770      	bx	lr

080035ae <_GLOBAL__sub_I_touchgfx_init>:
 80035ae:	b580      	push	{r7, lr}
 80035b0:	af00      	add	r7, sp, #0
 80035b2:	f64f 71ff 	movw	r1, #65535	@ 0xffff
 80035b6:	2001      	movs	r0, #1
 80035b8:	f7ff fe96 	bl	80032e8 <_Z41__static_initialization_and_destruction_0ii>
 80035bc:	bd80      	pop	{r7, pc}

080035be <_GLOBAL__sub_D_touchgfx_init>:
 80035be:	b580      	push	{r7, lr}
 80035c0:	af00      	add	r7, sp, #0
 80035c2:	f64f 71ff 	movw	r1, #65535	@ 0xffff
 80035c6:	2000      	movs	r0, #0
 80035c8:	f7ff fe8e 	bl	80032e8 <_Z41__static_initialization_and_destruction_0ii>
 80035cc:	bd80      	pop	{r7, pc}

080035ce <_ZN8touchgfx3HAL17frontPorchEnteredEv>:
    void frontPorchEntered()
 80035ce:	b580      	push	{r7, lr}
 80035d0:	b082      	sub	sp, #8
 80035d2:	af00      	add	r7, sp, #0
 80035d4:	6078      	str	r0, [r7, #4]
        allowDMATransfers();
 80035d6:	687b      	ldr	r3, [r7, #4]
 80035d8:	681b      	ldr	r3, [r3, #0]
 80035da:	3320      	adds	r3, #32
 80035dc:	681b      	ldr	r3, [r3, #0]
 80035de:	6878      	ldr	r0, [r7, #4]
 80035e0:	4798      	blx	r3
    }
 80035e2:	bf00      	nop
 80035e4:	3708      	adds	r7, #8
 80035e6:	46bd      	mov	sp, r7
 80035e8:	bd80      	pop	{r7, pc}

080035ea <_ZN8touchgfx3HAL5vSyncEv>:
    void vSync()
 80035ea:	b480      	push	{r7}
 80035ec:	b083      	sub	sp, #12
 80035ee:	af00      	add	r7, sp, #0
 80035f0:	6078      	str	r0, [r7, #4]
        vSyncCnt++;
 80035f2:	687b      	ldr	r3, [r7, #4]
 80035f4:	f893 3066 	ldrb.w	r3, [r3, #102]	@ 0x66
 80035f8:	3301      	adds	r3, #1
 80035fa:	b2da      	uxtb	r2, r3
 80035fc:	687b      	ldr	r3, [r7, #4]
 80035fe:	f883 2066 	strb.w	r2, [r3, #102]	@ 0x66
    }
 8003602:	bf00      	nop
 8003604:	370c      	adds	r7, #12
 8003606:	46bd      	mov	sp, r7
 8003608:	f85d 7b04 	ldr.w	r7, [sp], #4
 800360c:	4770      	bx	lr
	...

08003610 <__NVIC_EnableIRQ>:
{
 8003610:	b480      	push	{r7}
 8003612:	b083      	sub	sp, #12
 8003614:	af00      	add	r7, sp, #0
 8003616:	4603      	mov	r3, r0
 8003618:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 800361a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800361e:	2b00      	cmp	r3, #0
 8003620:	db0b      	blt.n	800363a <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003622:	88fb      	ldrh	r3, [r7, #6]
 8003624:	f003 021f 	and.w	r2, r3, #31
 8003628:	4907      	ldr	r1, [pc, #28]	@ (8003648 <__NVIC_EnableIRQ+0x38>)
 800362a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800362e:	095b      	lsrs	r3, r3, #5
 8003630:	2001      	movs	r0, #1
 8003632:	fa00 f202 	lsl.w	r2, r0, r2
 8003636:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 800363a:	bf00      	nop
 800363c:	370c      	adds	r7, #12
 800363e:	46bd      	mov	sp, r7
 8003640:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003644:	4770      	bx	lr
 8003646:	bf00      	nop
 8003648:	e000e100 	.word	0xe000e100

0800364c <__NVIC_DisableIRQ>:
{
 800364c:	b480      	push	{r7}
 800364e:	b083      	sub	sp, #12
 8003650:	af00      	add	r7, sp, #0
 8003652:	4603      	mov	r3, r0
 8003654:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8003656:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800365a:	2b00      	cmp	r3, #0
 800365c:	db12      	blt.n	8003684 <__NVIC_DisableIRQ+0x38>
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800365e:	88fb      	ldrh	r3, [r7, #6]
 8003660:	f003 021f 	and.w	r2, r3, #31
 8003664:	490a      	ldr	r1, [pc, #40]	@ (8003690 <__NVIC_DisableIRQ+0x44>)
 8003666:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800366a:	095b      	lsrs	r3, r3, #5
 800366c:	2001      	movs	r0, #1
 800366e:	fa00 f202 	lsl.w	r2, r0, r2
 8003672:	3320      	adds	r3, #32
 8003674:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  __ASM volatile ("dsb 0xF":::"memory");
 8003678:	f3bf 8f4f 	dsb	sy
}
 800367c:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 800367e:	f3bf 8f6f 	isb	sy
}
 8003682:	bf00      	nop
}
 8003684:	bf00      	nop
 8003686:	370c      	adds	r7, #12
 8003688:	46bd      	mov	sp, r7
 800368a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800368e:	4770      	bx	lr
 8003690:	e000e100 	.word	0xe000e100

08003694 <__NVIC_SetPriority>:
{
 8003694:	b480      	push	{r7}
 8003696:	b083      	sub	sp, #12
 8003698:	af00      	add	r7, sp, #0
 800369a:	4603      	mov	r3, r0
 800369c:	6039      	str	r1, [r7, #0]
 800369e:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 80036a0:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80036a4:	2b00      	cmp	r3, #0
 80036a6:	db0a      	blt.n	80036be <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80036a8:	683b      	ldr	r3, [r7, #0]
 80036aa:	b2da      	uxtb	r2, r3
 80036ac:	490c      	ldr	r1, [pc, #48]	@ (80036e0 <__NVIC_SetPriority+0x4c>)
 80036ae:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80036b2:	0112      	lsls	r2, r2, #4
 80036b4:	b2d2      	uxtb	r2, r2
 80036b6:	440b      	add	r3, r1
 80036b8:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 80036bc:	e00a      	b.n	80036d4 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80036be:	683b      	ldr	r3, [r7, #0]
 80036c0:	b2da      	uxtb	r2, r3
 80036c2:	4908      	ldr	r1, [pc, #32]	@ (80036e4 <__NVIC_SetPriority+0x50>)
 80036c4:	88fb      	ldrh	r3, [r7, #6]
 80036c6:	f003 030f 	and.w	r3, r3, #15
 80036ca:	3b04      	subs	r3, #4
 80036cc:	0112      	lsls	r2, r2, #4
 80036ce:	b2d2      	uxtb	r2, r2
 80036d0:	440b      	add	r3, r1
 80036d2:	761a      	strb	r2, [r3, #24]
}
 80036d4:	bf00      	nop
 80036d6:	370c      	adds	r7, #12
 80036d8:	46bd      	mov	sp, r7
 80036da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036de:	4770      	bx	lr
 80036e0:	e000e100 	.word	0xe000e100
 80036e4:	e000ed00 	.word	0xe000ed00

080036e8 <_ZN20TouchGFXGeneratedHAL10initializeEv>:
    static uint16_t lcd_int_active_line;
    static uint16_t lcd_int_porch_line;
}

void TouchGFXGeneratedHAL::initialize()
{
 80036e8:	b5b0      	push	{r4, r5, r7, lr}
 80036ea:	b082      	sub	sp, #8
 80036ec:	af00      	add	r7, sp, #0
 80036ee:	6078      	str	r0, [r7, #4]
    HAL::initialize();
 80036f0:	687b      	ldr	r3, [r7, #4]
 80036f2:	4618      	mov	r0, r3
 80036f4:	f014 fe79 	bl	80183ea <_ZN8touchgfx3HAL10initializeEv>
    registerEventListener(*(Application::getInstance()));
 80036f8:	687d      	ldr	r5, [r7, #4]
 80036fa:	687b      	ldr	r3, [r7, #4]
 80036fc:	681b      	ldr	r3, [r3, #0]
 80036fe:	3360      	adds	r3, #96	@ 0x60
 8003700:	681c      	ldr	r4, [r3, #0]
 8003702:	f017 ffa9 	bl	801b658 <_ZN8touchgfx11Application11getInstanceEv>
 8003706:	4603      	mov	r3, r0
 8003708:	4619      	mov	r1, r3
 800370a:	4628      	mov	r0, r5
 800370c:	47a0      	blx	r4
    setFrameBufferStartAddresses((void*)0xD0000000, (void*)0xD0200000, (void*)0);
 800370e:	6878      	ldr	r0, [r7, #4]
 8003710:	687b      	ldr	r3, [r7, #4]
 8003712:	681b      	ldr	r3, [r3, #0]
 8003714:	3384      	adds	r3, #132	@ 0x84
 8003716:	681c      	ldr	r4, [r3, #0]
 8003718:	2300      	movs	r3, #0
 800371a:	4a04      	ldr	r2, [pc, #16]	@ (800372c <_ZN20TouchGFXGeneratedHAL10initializeEv+0x44>)
 800371c:	f04f 4150 	mov.w	r1, #3489660928	@ 0xd0000000
 8003720:	47a0      	blx	r4
}
 8003722:	bf00      	nop
 8003724:	3708      	adds	r7, #8
 8003726:	46bd      	mov	sp, r7
 8003728:	bdb0      	pop	{r4, r5, r7, pc}
 800372a:	bf00      	nop
 800372c:	d0200000 	.word	0xd0200000

08003730 <_ZN20TouchGFXGeneratedHAL19configureInterruptsEv>:

void TouchGFXGeneratedHAL::configureInterrupts()
{
 8003730:	b580      	push	{r7, lr}
 8003732:	b082      	sub	sp, #8
 8003734:	af00      	add	r7, sp, #0
 8003736:	6078      	str	r0, [r7, #4]
    NVIC_SetPriority(DMA2D_IRQn, 9);
 8003738:	2109      	movs	r1, #9
 800373a:	205a      	movs	r0, #90	@ 0x5a
 800373c:	f7ff ffaa 	bl	8003694 <__NVIC_SetPriority>
    NVIC_SetPriority(LTDC_IRQn, 9);
 8003740:	2109      	movs	r1, #9
 8003742:	2058      	movs	r0, #88	@ 0x58
 8003744:	f7ff ffa6 	bl	8003694 <__NVIC_SetPriority>
}
 8003748:	bf00      	nop
 800374a:	3708      	adds	r7, #8
 800374c:	46bd      	mov	sp, r7
 800374e:	bd80      	pop	{r7, pc}

08003750 <_ZN20TouchGFXGeneratedHAL16enableInterruptsEv>:

void TouchGFXGeneratedHAL::enableInterrupts()
{
 8003750:	b580      	push	{r7, lr}
 8003752:	b082      	sub	sp, #8
 8003754:	af00      	add	r7, sp, #0
 8003756:	6078      	str	r0, [r7, #4]
    NVIC_EnableIRQ(DMA2D_IRQn);
 8003758:	205a      	movs	r0, #90	@ 0x5a
 800375a:	f7ff ff59 	bl	8003610 <__NVIC_EnableIRQ>
    NVIC_EnableIRQ(LTDC_IRQn);
 800375e:	2058      	movs	r0, #88	@ 0x58
 8003760:	f7ff ff56 	bl	8003610 <__NVIC_EnableIRQ>
}
 8003764:	bf00      	nop
 8003766:	3708      	adds	r7, #8
 8003768:	46bd      	mov	sp, r7
 800376a:	bd80      	pop	{r7, pc}

0800376c <_ZN20TouchGFXGeneratedHAL17disableInterruptsEv>:

void TouchGFXGeneratedHAL::disableInterrupts()
{
 800376c:	b580      	push	{r7, lr}
 800376e:	b082      	sub	sp, #8
 8003770:	af00      	add	r7, sp, #0
 8003772:	6078      	str	r0, [r7, #4]
    NVIC_DisableIRQ(DMA2D_IRQn);
 8003774:	205a      	movs	r0, #90	@ 0x5a
 8003776:	f7ff ff69 	bl	800364c <__NVIC_DisableIRQ>
    NVIC_DisableIRQ(LTDC_IRQn);
 800377a:	2058      	movs	r0, #88	@ 0x58
 800377c:	f7ff ff66 	bl	800364c <__NVIC_DisableIRQ>
}
 8003780:	bf00      	nop
 8003782:	3708      	adds	r7, #8
 8003784:	46bd      	mov	sp, r7
 8003786:	bd80      	pop	{r7, pc}

08003788 <_ZN20TouchGFXGeneratedHAL28enableLCDControllerInterruptEv>:

void TouchGFXGeneratedHAL::enableLCDControllerInterrupt()
{
 8003788:	b480      	push	{r7}
 800378a:	b083      	sub	sp, #12
 800378c:	af00      	add	r7, sp, #0
 800378e:	6078      	str	r0, [r7, #4]
    lcd_int_active_line = (LTDC->BPCR & 0x7FF) - 1;
 8003790:	4b11      	ldr	r3, [pc, #68]	@ (80037d8 <_ZN20TouchGFXGeneratedHAL28enableLCDControllerInterruptEv+0x50>)
 8003792:	68db      	ldr	r3, [r3, #12]
 8003794:	b29b      	uxth	r3, r3
 8003796:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800379a:	b29b      	uxth	r3, r3
 800379c:	3b01      	subs	r3, #1
 800379e:	b29a      	uxth	r2, r3
 80037a0:	4b0e      	ldr	r3, [pc, #56]	@ (80037dc <_ZN20TouchGFXGeneratedHAL28enableLCDControllerInterruptEv+0x54>)
 80037a2:	801a      	strh	r2, [r3, #0]
    lcd_int_porch_line = (LTDC->AWCR & 0x7FF) - 1;
 80037a4:	4b0c      	ldr	r3, [pc, #48]	@ (80037d8 <_ZN20TouchGFXGeneratedHAL28enableLCDControllerInterruptEv+0x50>)
 80037a6:	691b      	ldr	r3, [r3, #16]
 80037a8:	b29b      	uxth	r3, r3
 80037aa:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80037ae:	b29b      	uxth	r3, r3
 80037b0:	3b01      	subs	r3, #1
 80037b2:	b29a      	uxth	r2, r3
 80037b4:	4b0a      	ldr	r3, [pc, #40]	@ (80037e0 <_ZN20TouchGFXGeneratedHAL28enableLCDControllerInterruptEv+0x58>)
 80037b6:	801a      	strh	r2, [r3, #0]

    /* Sets the Line Interrupt position */
    LTDC->LIPCR = lcd_int_active_line;
 80037b8:	4b08      	ldr	r3, [pc, #32]	@ (80037dc <_ZN20TouchGFXGeneratedHAL28enableLCDControllerInterruptEv+0x54>)
 80037ba:	881a      	ldrh	r2, [r3, #0]
 80037bc:	4b06      	ldr	r3, [pc, #24]	@ (80037d8 <_ZN20TouchGFXGeneratedHAL28enableLCDControllerInterruptEv+0x50>)
 80037be:	641a      	str	r2, [r3, #64]	@ 0x40
    /* Line Interrupt Enable            */
    LTDC->IER |= LTDC_IER_LIE;
 80037c0:	4b05      	ldr	r3, [pc, #20]	@ (80037d8 <_ZN20TouchGFXGeneratedHAL28enableLCDControllerInterruptEv+0x50>)
 80037c2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80037c4:	4a04      	ldr	r2, [pc, #16]	@ (80037d8 <_ZN20TouchGFXGeneratedHAL28enableLCDControllerInterruptEv+0x50>)
 80037c6:	f043 0301 	orr.w	r3, r3, #1
 80037ca:	6353      	str	r3, [r2, #52]	@ 0x34
}
 80037cc:	bf00      	nop
 80037ce:	370c      	adds	r7, #12
 80037d0:	46bd      	mov	sp, r7
 80037d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037d6:	4770      	bx	lr
 80037d8:	50001000 	.word	0x50001000
 80037dc:	24001d7c 	.word	0x24001d7c
 80037e0:	24001d7e 	.word	0x24001d7e

080037e4 <_ZN20TouchGFXGeneratedHAL10beginFrameEv>:

bool TouchGFXGeneratedHAL::beginFrame()
{
 80037e4:	b580      	push	{r7, lr}
 80037e6:	b082      	sub	sp, #8
 80037e8:	af00      	add	r7, sp, #0
 80037ea:	6078      	str	r0, [r7, #4]
    return HAL::beginFrame();
 80037ec:	687b      	ldr	r3, [r7, #4]
 80037ee:	4618      	mov	r0, r3
 80037f0:	f014 fde2 	bl	80183b8 <_ZN8touchgfx3HAL10beginFrameEv>
 80037f4:	4603      	mov	r3, r0
}
 80037f6:	4618      	mov	r0, r3
 80037f8:	3708      	adds	r7, #8
 80037fa:	46bd      	mov	sp, r7
 80037fc:	bd80      	pop	{r7, pc}

080037fe <_ZN20TouchGFXGeneratedHAL8endFrameEv>:

void TouchGFXGeneratedHAL::endFrame()
{
 80037fe:	b580      	push	{r7, lr}
 8003800:	b082      	sub	sp, #8
 8003802:	af00      	add	r7, sp, #0
 8003804:	6078      	str	r0, [r7, #4]
    HAL::endFrame();
 8003806:	687b      	ldr	r3, [r7, #4]
 8003808:	4618      	mov	r0, r3
 800380a:	f014 fde1 	bl	80183d0 <_ZN8touchgfx3HAL8endFrameEv>

}
 800380e:	bf00      	nop
 8003810:	3708      	adds	r7, #8
 8003812:	46bd      	mov	sp, r7
 8003814:	bd80      	pop	{r7, pc}
	...

08003818 <_ZNK20TouchGFXGeneratedHAL17getTFTFrameBufferEv>:

uint16_t* TouchGFXGeneratedHAL::getTFTFrameBuffer() const
{
 8003818:	b480      	push	{r7}
 800381a:	b083      	sub	sp, #12
 800381c:	af00      	add	r7, sp, #0
 800381e:	6078      	str	r0, [r7, #4]
    return (uint16_t*)LTDC_Layer1->CFBAR;
 8003820:	4b03      	ldr	r3, [pc, #12]	@ (8003830 <_ZNK20TouchGFXGeneratedHAL17getTFTFrameBufferEv+0x18>)
 8003822:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
}
 8003824:	4618      	mov	r0, r3
 8003826:	370c      	adds	r7, #12
 8003828:	46bd      	mov	sp, r7
 800382a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800382e:	4770      	bx	lr
 8003830:	50001084 	.word	0x50001084

08003834 <_ZN20TouchGFXGeneratedHAL17setTFTFrameBufferEPt>:

void TouchGFXGeneratedHAL::setTFTFrameBuffer(uint16_t* adr)
{
 8003834:	b480      	push	{r7}
 8003836:	b083      	sub	sp, #12
 8003838:	af00      	add	r7, sp, #0
 800383a:	6078      	str	r0, [r7, #4]
 800383c:	6039      	str	r1, [r7, #0]
    LTDC_Layer1->CFBAR = (uint32_t)adr;
 800383e:	4a06      	ldr	r2, [pc, #24]	@ (8003858 <_ZN20TouchGFXGeneratedHAL17setTFTFrameBufferEPt+0x24>)
 8003840:	683b      	ldr	r3, [r7, #0]
 8003842:	6293      	str	r3, [r2, #40]	@ 0x28

    /* Reload immediate */
    LTDC->SRCR = (uint32_t)LTDC_SRCR_IMR;
 8003844:	4b05      	ldr	r3, [pc, #20]	@ (800385c <_ZN20TouchGFXGeneratedHAL17setTFTFrameBufferEPt+0x28>)
 8003846:	2201      	movs	r2, #1
 8003848:	625a      	str	r2, [r3, #36]	@ 0x24
}
 800384a:	bf00      	nop
 800384c:	370c      	adds	r7, #12
 800384e:	46bd      	mov	sp, r7
 8003850:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003854:	4770      	bx	lr
 8003856:	bf00      	nop
 8003858:	50001084 	.word	0x50001084
 800385c:	50001000 	.word	0x50001000

08003860 <_ZN20TouchGFXGeneratedHAL16flushFrameBufferERKN8touchgfx4RectE>:

void TouchGFXGeneratedHAL::flushFrameBuffer(const touchgfx::Rect& rect)
{
 8003860:	b580      	push	{r7, lr}
 8003862:	b086      	sub	sp, #24
 8003864:	af00      	add	r7, sp, #0
 8003866:	6078      	str	r0, [r7, #4]
 8003868:	6039      	str	r1, [r7, #0]
    HAL::flushFrameBuffer(rect);
 800386a:	687b      	ldr	r3, [r7, #4]
 800386c:	6839      	ldr	r1, [r7, #0]
 800386e:	4618      	mov	r0, r3
 8003870:	f014 fd6b 	bl	801834a <_ZN8touchgfx3HAL16flushFrameBufferERKNS_4RectE>
    // If the framebuffer is placed in Write Through cached memory (e.g. SRAM) then
    // the DCache must be flushed prior to DMA2D accessing it. That's done
    // using the function SCB_CleanInvalidateDCache(). Remember to enable "CPU Cache" in the
    // "System Core" settings for "Cortex M7" in CubeMX in order for this function call to work.
    if (SCB->CCR & SCB_CCR_DC_Msk)
 8003874:	4b24      	ldr	r3, [pc, #144]	@ (8003908 <_ZN20TouchGFXGeneratedHAL16flushFrameBufferERKN8touchgfx4RectE+0xa8>)
 8003876:	695b      	ldr	r3, [r3, #20]
 8003878:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800387c:	2b00      	cmp	r3, #0
 800387e:	bf14      	ite	ne
 8003880:	2301      	movne	r3, #1
 8003882:	2300      	moveq	r3, #0
 8003884:	b2db      	uxtb	r3, r3
 8003886:	2b00      	cmp	r3, #0
 8003888:	d03a      	beq.n	8003900 <_ZN20TouchGFXGeneratedHAL16flushFrameBufferERKN8touchgfx4RectE+0xa0>
    SCB->CSSELR = 0U;                       /* select Level 1 data cache */
 800388a:	4b1f      	ldr	r3, [pc, #124]	@ (8003908 <_ZN20TouchGFXGeneratedHAL16flushFrameBufferERKN8touchgfx4RectE+0xa8>)
 800388c:	2200      	movs	r2, #0
 800388e:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  __ASM volatile ("dsb 0xF":::"memory");
 8003892:	f3bf 8f4f 	dsb	sy
}
 8003896:	bf00      	nop
    ccsidr = SCB->CCSIDR;
 8003898:	4b1b      	ldr	r3, [pc, #108]	@ (8003908 <_ZN20TouchGFXGeneratedHAL16flushFrameBufferERKN8touchgfx4RectE+0xa8>)
 800389a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800389e:	617b      	str	r3, [r7, #20]
    sets = (uint32_t)(CCSIDR_SETS(ccsidr));
 80038a0:	697b      	ldr	r3, [r7, #20]
 80038a2:	0b5b      	lsrs	r3, r3, #13
 80038a4:	f3c3 030e 	ubfx	r3, r3, #0, #15
 80038a8:	613b      	str	r3, [r7, #16]
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
 80038aa:	697b      	ldr	r3, [r7, #20]
 80038ac:	08db      	lsrs	r3, r3, #3
 80038ae:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80038b2:	60fb      	str	r3, [r7, #12]
        SCB->DCCISW = (((sets << SCB_DCCISW_SET_Pos) & SCB_DCCISW_SET_Msk) |
 80038b4:	693b      	ldr	r3, [r7, #16]
 80038b6:	015a      	lsls	r2, r3, #5
 80038b8:	f643 73e0 	movw	r3, #16352	@ 0x3fe0
 80038bc:	4013      	ands	r3, r2
                       ((ways << SCB_DCCISW_WAY_Pos) & SCB_DCCISW_WAY_Msk)  );
 80038be:	68fa      	ldr	r2, [r7, #12]
 80038c0:	0792      	lsls	r2, r2, #30
        SCB->DCCISW = (((sets << SCB_DCCISW_SET_Pos) & SCB_DCCISW_SET_Msk) |
 80038c2:	4911      	ldr	r1, [pc, #68]	@ (8003908 <_ZN20TouchGFXGeneratedHAL16flushFrameBufferERKN8touchgfx4RectE+0xa8>)
 80038c4:	4313      	orrs	r3, r2
 80038c6:	f8c1 3274 	str.w	r3, [r1, #628]	@ 0x274
      } while (ways-- != 0U);
 80038ca:	68fb      	ldr	r3, [r7, #12]
 80038cc:	1e5a      	subs	r2, r3, #1
 80038ce:	60fa      	str	r2, [r7, #12]
 80038d0:	2b00      	cmp	r3, #0
 80038d2:	bf14      	ite	ne
 80038d4:	2301      	movne	r3, #1
 80038d6:	2300      	moveq	r3, #0
 80038d8:	b2db      	uxtb	r3, r3
 80038da:	2b00      	cmp	r3, #0
 80038dc:	d1ea      	bne.n	80038b4 <_ZN20TouchGFXGeneratedHAL16flushFrameBufferERKN8touchgfx4RectE+0x54>
    } while(sets-- != 0U);
 80038de:	693b      	ldr	r3, [r7, #16]
 80038e0:	1e5a      	subs	r2, r3, #1
 80038e2:	613a      	str	r2, [r7, #16]
 80038e4:	2b00      	cmp	r3, #0
 80038e6:	bf14      	ite	ne
 80038e8:	2301      	movne	r3, #1
 80038ea:	2300      	moveq	r3, #0
 80038ec:	b2db      	uxtb	r3, r3
 80038ee:	2b00      	cmp	r3, #0
 80038f0:	d1db      	bne.n	80038aa <_ZN20TouchGFXGeneratedHAL16flushFrameBufferERKN8touchgfx4RectE+0x4a>
  __ASM volatile ("dsb 0xF":::"memory");
 80038f2:	f3bf 8f4f 	dsb	sy
}
 80038f6:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 80038f8:	f3bf 8f6f 	isb	sy
}
 80038fc:	bf00      	nop
}
 80038fe:	bf00      	nop
    {
        SCB_CleanInvalidateDCache();
    }
}
 8003900:	bf00      	nop
 8003902:	3718      	adds	r7, #24
 8003904:	46bd      	mov	sp, r7
 8003906:	bd80      	pop	{r7, pc}
 8003908:	e000ed00 	.word	0xe000ed00

0800390c <_ZN20TouchGFXGeneratedHAL9blockCopyEPvPKvm>:

bool TouchGFXGeneratedHAL::blockCopy(void* RESTRICT dest, const void* RESTRICT src, uint32_t numBytes)
{
 800390c:	b580      	push	{r7, lr}
 800390e:	b084      	sub	sp, #16
 8003910:	af00      	add	r7, sp, #0
 8003912:	60f8      	str	r0, [r7, #12]
 8003914:	60b9      	str	r1, [r7, #8]
 8003916:	607a      	str	r2, [r7, #4]
 8003918:	603b      	str	r3, [r7, #0]
    return HAL::blockCopy(dest, src, numBytes);
 800391a:	68f8      	ldr	r0, [r7, #12]
 800391c:	683b      	ldr	r3, [r7, #0]
 800391e:	687a      	ldr	r2, [r7, #4]
 8003920:	68b9      	ldr	r1, [r7, #8]
 8003922:	f014 fe7e 	bl	8018622 <_ZN8touchgfx3HAL9blockCopyEPvPKvm>
 8003926:	4603      	mov	r3, r0
}
 8003928:	4618      	mov	r0, r3
 800392a:	3710      	adds	r7, #16
 800392c:	46bd      	mov	sp, r7
 800392e:	bd80      	pop	{r7, pc}

08003930 <_ZN20TouchGFXGeneratedHAL15InvalidateCacheEv>:

void TouchGFXGeneratedHAL::InvalidateCache()
{
 8003930:	b480      	push	{r7}
 8003932:	b087      	sub	sp, #28
 8003934:	af00      	add	r7, sp, #0
 8003936:	6078      	str	r0, [r7, #4]
    // If the framebuffer is placed in Write Through cached memory (e.g. SRAM) then
    // the DCache must be flushed prior to DMA2D accessing it. That's done
    // using the function SCB_CleanInvalidateDCache(). Remember to enable "CPU Cache" in the
    // "System Core" settings for "Cortex M7" in CubeMX in order for this function call to work.
    if (SCB->CCR & SCB_CCR_DC_Msk)
 8003938:	4b25      	ldr	r3, [pc, #148]	@ (80039d0 <_ZN20TouchGFXGeneratedHAL15InvalidateCacheEv+0xa0>)
 800393a:	695b      	ldr	r3, [r3, #20]
 800393c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003940:	2b00      	cmp	r3, #0
 8003942:	bf14      	ite	ne
 8003944:	2301      	movne	r3, #1
 8003946:	2300      	moveq	r3, #0
 8003948:	b2db      	uxtb	r3, r3
 800394a:	2b00      	cmp	r3, #0
 800394c:	d03a      	beq.n	80039c4 <_ZN20TouchGFXGeneratedHAL15InvalidateCacheEv+0x94>
    SCB->CSSELR = 0U;                       /* select Level 1 data cache */
 800394e:	4b20      	ldr	r3, [pc, #128]	@ (80039d0 <_ZN20TouchGFXGeneratedHAL15InvalidateCacheEv+0xa0>)
 8003950:	2200      	movs	r2, #0
 8003952:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  __ASM volatile ("dsb 0xF":::"memory");
 8003956:	f3bf 8f4f 	dsb	sy
}
 800395a:	bf00      	nop
    ccsidr = SCB->CCSIDR;
 800395c:	4b1c      	ldr	r3, [pc, #112]	@ (80039d0 <_ZN20TouchGFXGeneratedHAL15InvalidateCacheEv+0xa0>)
 800395e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8003962:	617b      	str	r3, [r7, #20]
    sets = (uint32_t)(CCSIDR_SETS(ccsidr));
 8003964:	697b      	ldr	r3, [r7, #20]
 8003966:	0b5b      	lsrs	r3, r3, #13
 8003968:	f3c3 030e 	ubfx	r3, r3, #0, #15
 800396c:	613b      	str	r3, [r7, #16]
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
 800396e:	697b      	ldr	r3, [r7, #20]
 8003970:	08db      	lsrs	r3, r3, #3
 8003972:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003976:	60fb      	str	r3, [r7, #12]
        SCB->DCCISW = (((sets << SCB_DCCISW_SET_Pos) & SCB_DCCISW_SET_Msk) |
 8003978:	693b      	ldr	r3, [r7, #16]
 800397a:	015a      	lsls	r2, r3, #5
 800397c:	f643 73e0 	movw	r3, #16352	@ 0x3fe0
 8003980:	4013      	ands	r3, r2
                       ((ways << SCB_DCCISW_WAY_Pos) & SCB_DCCISW_WAY_Msk)  );
 8003982:	68fa      	ldr	r2, [r7, #12]
 8003984:	0792      	lsls	r2, r2, #30
        SCB->DCCISW = (((sets << SCB_DCCISW_SET_Pos) & SCB_DCCISW_SET_Msk) |
 8003986:	4912      	ldr	r1, [pc, #72]	@ (80039d0 <_ZN20TouchGFXGeneratedHAL15InvalidateCacheEv+0xa0>)
 8003988:	4313      	orrs	r3, r2
 800398a:	f8c1 3274 	str.w	r3, [r1, #628]	@ 0x274
      } while (ways-- != 0U);
 800398e:	68fb      	ldr	r3, [r7, #12]
 8003990:	1e5a      	subs	r2, r3, #1
 8003992:	60fa      	str	r2, [r7, #12]
 8003994:	2b00      	cmp	r3, #0
 8003996:	bf14      	ite	ne
 8003998:	2301      	movne	r3, #1
 800399a:	2300      	moveq	r3, #0
 800399c:	b2db      	uxtb	r3, r3
 800399e:	2b00      	cmp	r3, #0
 80039a0:	d1ea      	bne.n	8003978 <_ZN20TouchGFXGeneratedHAL15InvalidateCacheEv+0x48>
    } while(sets-- != 0U);
 80039a2:	693b      	ldr	r3, [r7, #16]
 80039a4:	1e5a      	subs	r2, r3, #1
 80039a6:	613a      	str	r2, [r7, #16]
 80039a8:	2b00      	cmp	r3, #0
 80039aa:	bf14      	ite	ne
 80039ac:	2301      	movne	r3, #1
 80039ae:	2300      	moveq	r3, #0
 80039b0:	b2db      	uxtb	r3, r3
 80039b2:	2b00      	cmp	r3, #0
 80039b4:	d1db      	bne.n	800396e <_ZN20TouchGFXGeneratedHAL15InvalidateCacheEv+0x3e>
  __ASM volatile ("dsb 0xF":::"memory");
 80039b6:	f3bf 8f4f 	dsb	sy
}
 80039ba:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 80039bc:	f3bf 8f6f 	isb	sy
}
 80039c0:	bf00      	nop
}
 80039c2:	bf00      	nop
    {
        SCB_CleanInvalidateDCache();
    }
}
 80039c4:	bf00      	nop
 80039c6:	371c      	adds	r7, #28
 80039c8:	46bd      	mov	sp, r7
 80039ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039ce:	4770      	bx	lr
 80039d0:	e000ed00 	.word	0xe000ed00

080039d4 <_ZN20TouchGFXGeneratedHAL10FlushCacheEv>:

void TouchGFXGeneratedHAL::FlushCache()
{
 80039d4:	b480      	push	{r7}
 80039d6:	b087      	sub	sp, #28
 80039d8:	af00      	add	r7, sp, #0
 80039da:	6078      	str	r0, [r7, #4]
    // If the framebuffer is placed in Write Through cached memory (e.g. SRAM) then
    // the DCache must be flushed prior to DMA2D accessing it. That's done
    // using the function SCB_CleanInvalidateDCache(). Remember to enable "CPU Cache" in the
    // "System Core" settings for "Cortex M7" in CubeMX in order for this function call to work.
    if (SCB->CCR & SCB_CCR_DC_Msk)
 80039dc:	4b25      	ldr	r3, [pc, #148]	@ (8003a74 <_ZN20TouchGFXGeneratedHAL10FlushCacheEv+0xa0>)
 80039de:	695b      	ldr	r3, [r3, #20]
 80039e0:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80039e4:	2b00      	cmp	r3, #0
 80039e6:	bf14      	ite	ne
 80039e8:	2301      	movne	r3, #1
 80039ea:	2300      	moveq	r3, #0
 80039ec:	b2db      	uxtb	r3, r3
 80039ee:	2b00      	cmp	r3, #0
 80039f0:	d03a      	beq.n	8003a68 <_ZN20TouchGFXGeneratedHAL10FlushCacheEv+0x94>
    SCB->CSSELR = 0U;                       /* select Level 1 data cache */
 80039f2:	4b20      	ldr	r3, [pc, #128]	@ (8003a74 <_ZN20TouchGFXGeneratedHAL10FlushCacheEv+0xa0>)
 80039f4:	2200      	movs	r2, #0
 80039f6:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  __ASM volatile ("dsb 0xF":::"memory");
 80039fa:	f3bf 8f4f 	dsb	sy
}
 80039fe:	bf00      	nop
    ccsidr = SCB->CCSIDR;
 8003a00:	4b1c      	ldr	r3, [pc, #112]	@ (8003a74 <_ZN20TouchGFXGeneratedHAL10FlushCacheEv+0xa0>)
 8003a02:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8003a06:	617b      	str	r3, [r7, #20]
    sets = (uint32_t)(CCSIDR_SETS(ccsidr));
 8003a08:	697b      	ldr	r3, [r7, #20]
 8003a0a:	0b5b      	lsrs	r3, r3, #13
 8003a0c:	f3c3 030e 	ubfx	r3, r3, #0, #15
 8003a10:	613b      	str	r3, [r7, #16]
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
 8003a12:	697b      	ldr	r3, [r7, #20]
 8003a14:	08db      	lsrs	r3, r3, #3
 8003a16:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003a1a:	60fb      	str	r3, [r7, #12]
        SCB->DCCISW = (((sets << SCB_DCCISW_SET_Pos) & SCB_DCCISW_SET_Msk) |
 8003a1c:	693b      	ldr	r3, [r7, #16]
 8003a1e:	015a      	lsls	r2, r3, #5
 8003a20:	f643 73e0 	movw	r3, #16352	@ 0x3fe0
 8003a24:	4013      	ands	r3, r2
                       ((ways << SCB_DCCISW_WAY_Pos) & SCB_DCCISW_WAY_Msk)  );
 8003a26:	68fa      	ldr	r2, [r7, #12]
 8003a28:	0792      	lsls	r2, r2, #30
        SCB->DCCISW = (((sets << SCB_DCCISW_SET_Pos) & SCB_DCCISW_SET_Msk) |
 8003a2a:	4912      	ldr	r1, [pc, #72]	@ (8003a74 <_ZN20TouchGFXGeneratedHAL10FlushCacheEv+0xa0>)
 8003a2c:	4313      	orrs	r3, r2
 8003a2e:	f8c1 3274 	str.w	r3, [r1, #628]	@ 0x274
      } while (ways-- != 0U);
 8003a32:	68fb      	ldr	r3, [r7, #12]
 8003a34:	1e5a      	subs	r2, r3, #1
 8003a36:	60fa      	str	r2, [r7, #12]
 8003a38:	2b00      	cmp	r3, #0
 8003a3a:	bf14      	ite	ne
 8003a3c:	2301      	movne	r3, #1
 8003a3e:	2300      	moveq	r3, #0
 8003a40:	b2db      	uxtb	r3, r3
 8003a42:	2b00      	cmp	r3, #0
 8003a44:	d1ea      	bne.n	8003a1c <_ZN20TouchGFXGeneratedHAL10FlushCacheEv+0x48>
    } while(sets-- != 0U);
 8003a46:	693b      	ldr	r3, [r7, #16]
 8003a48:	1e5a      	subs	r2, r3, #1
 8003a4a:	613a      	str	r2, [r7, #16]
 8003a4c:	2b00      	cmp	r3, #0
 8003a4e:	bf14      	ite	ne
 8003a50:	2301      	movne	r3, #1
 8003a52:	2300      	moveq	r3, #0
 8003a54:	b2db      	uxtb	r3, r3
 8003a56:	2b00      	cmp	r3, #0
 8003a58:	d1db      	bne.n	8003a12 <_ZN20TouchGFXGeneratedHAL10FlushCacheEv+0x3e>
  __ASM volatile ("dsb 0xF":::"memory");
 8003a5a:	f3bf 8f4f 	dsb	sy
}
 8003a5e:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8003a60:	f3bf 8f6f 	isb	sy
}
 8003a64:	bf00      	nop
}
 8003a66:	bf00      	nop
    {
        SCB_CleanInvalidateDCache();
    }
}
 8003a68:	bf00      	nop
 8003a6a:	371c      	adds	r7, #28
 8003a6c:	46bd      	mov	sp, r7
 8003a6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a72:	4770      	bx	lr
 8003a74:	e000ed00 	.word	0xe000ed00

08003a78 <HAL_LTDC_LineEventCallback>:

extern "C"
{
    void HAL_LTDC_LineEventCallback(LTDC_HandleTypeDef* hltdc)
    {
 8003a78:	b580      	push	{r7, lr}
 8003a7a:	b082      	sub	sp, #8
 8003a7c:	af00      	add	r7, sp, #0
 8003a7e:	6078      	str	r0, [r7, #4]
        if (LTDC->LIPCR == lcd_int_active_line)
 8003a80:	4b1a      	ldr	r3, [pc, #104]	@ (8003aec <HAL_LTDC_LineEventCallback+0x74>)
 8003a82:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003a84:	4a1a      	ldr	r2, [pc, #104]	@ (8003af0 <HAL_LTDC_LineEventCallback+0x78>)
 8003a86:	8812      	ldrh	r2, [r2, #0]
 8003a88:	4293      	cmp	r3, r2
 8003a8a:	bf0c      	ite	eq
 8003a8c:	2301      	moveq	r3, #1
 8003a8e:	2300      	movne	r3, #0
 8003a90:	b2db      	uxtb	r3, r3
 8003a92:	2b00      	cmp	r3, #0
 8003a94:	d017      	beq.n	8003ac6 <HAL_LTDC_LineEventCallback+0x4e>
        {
            //entering active area
            HAL_LTDC_ProgramLineEvent(hltdc, lcd_int_porch_line);
 8003a96:	4b17      	ldr	r3, [pc, #92]	@ (8003af4 <HAL_LTDC_LineEventCallback+0x7c>)
 8003a98:	881b      	ldrh	r3, [r3, #0]
 8003a9a:	4619      	mov	r1, r3
 8003a9c:	6878      	ldr	r0, [r7, #4]
 8003a9e:	f00f f887 	bl	8012bb0 <HAL_LTDC_ProgramLineEvent>
            HAL::getInstance()->vSync();
 8003aa2:	f7fe fb3f 	bl	8002124 <_ZN8touchgfx3HAL11getInstanceEv>
 8003aa6:	4603      	mov	r3, r0
 8003aa8:	4618      	mov	r0, r3
 8003aaa:	f7ff fd9e 	bl	80035ea <_ZN8touchgfx3HAL5vSyncEv>
            OSWrappers::signalVSync();
 8003aae:	f7fe fa33 	bl	8001f18 <_ZN8touchgfx10OSWrappers11signalVSyncEv>
            // Swap frame buffers immediately instead of waiting for the task to be scheduled in.
            // Note: task will also swap when it wakes up, but that operation is guarded and will not have
            // any effect if already swapped.
            HAL::getInstance()->swapFrameBuffers();
 8003ab2:	f7fe fb37 	bl	8002124 <_ZN8touchgfx3HAL11getInstanceEv>
 8003ab6:	4603      	mov	r3, r0
 8003ab8:	4618      	mov	r0, r3
 8003aba:	f015 fa8b 	bl	8018fd4 <_ZN8touchgfx3HAL16swapFrameBuffersEv>
            GPIO::set(GPIO::VSYNC_FREQ);
 8003abe:	2000      	movs	r0, #0
 8003ac0:	f7fd ff02 	bl	80018c8 <_ZN8touchgfx4GPIO3setENS0_7GPIO_IDE>
            //exiting active area
            HAL_LTDC_ProgramLineEvent(hltdc, lcd_int_active_line);
            GPIO::clear(GPIO::VSYNC_FREQ);
            HAL::getInstance()->frontPorchEntered();
        }
    }
 8003ac4:	e00e      	b.n	8003ae4 <HAL_LTDC_LineEventCallback+0x6c>
            HAL_LTDC_ProgramLineEvent(hltdc, lcd_int_active_line);
 8003ac6:	4b0a      	ldr	r3, [pc, #40]	@ (8003af0 <HAL_LTDC_LineEventCallback+0x78>)
 8003ac8:	881b      	ldrh	r3, [r3, #0]
 8003aca:	4619      	mov	r1, r3
 8003acc:	6878      	ldr	r0, [r7, #4]
 8003ace:	f00f f86f 	bl	8012bb0 <HAL_LTDC_ProgramLineEvent>
            GPIO::clear(GPIO::VSYNC_FREQ);
 8003ad2:	2000      	movs	r0, #0
 8003ad4:	f7fd ff14 	bl	8001900 <_ZN8touchgfx4GPIO5clearENS0_7GPIO_IDE>
            HAL::getInstance()->frontPorchEntered();
 8003ad8:	f7fe fb24 	bl	8002124 <_ZN8touchgfx3HAL11getInstanceEv>
 8003adc:	4603      	mov	r3, r0
 8003ade:	4618      	mov	r0, r3
 8003ae0:	f7ff fd75 	bl	80035ce <_ZN8touchgfx3HAL17frontPorchEnteredEv>
    }
 8003ae4:	bf00      	nop
 8003ae6:	3708      	adds	r7, #8
 8003ae8:	46bd      	mov	sp, r7
 8003aea:	bd80      	pop	{r7, pc}
 8003aec:	50001000 	.word	0x50001000
 8003af0:	24001d7c 	.word	0x24001d7c
 8003af4:	24001d7e 	.word	0x24001d7e

08003af8 <_ZN23ApplicationFontProvider7getFontEt>:
#include <fonts/ApplicationFontProvider.hpp>
#include <fonts/GeneratedFont.hpp>
#include <texts/TypedTextDatabase.hpp>

touchgfx::Font* ApplicationFontProvider::getFont(touchgfx::FontId typography)
{
 8003af8:	b580      	push	{r7, lr}
 8003afa:	b082      	sub	sp, #8
 8003afc:	af00      	add	r7, sp, #0
 8003afe:	6078      	str	r0, [r7, #4]
 8003b00:	460b      	mov	r3, r1
 8003b02:	807b      	strh	r3, [r7, #2]
    switch (typography)
 8003b04:	887b      	ldrh	r3, [r7, #2]
 8003b06:	2b05      	cmp	r3, #5
 8003b08:	d82c      	bhi.n	8003b64 <_ZN23ApplicationFontProvider7getFontEt+0x6c>
 8003b0a:	a201      	add	r2, pc, #4	@ (adr r2, 8003b10 <_ZN23ApplicationFontProvider7getFontEt+0x18>)
 8003b0c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003b10:	08003b29 	.word	0x08003b29
 8003b14:	08003b33 	.word	0x08003b33
 8003b18:	08003b3d 	.word	0x08003b3d
 8003b1c:	08003b47 	.word	0x08003b47
 8003b20:	08003b51 	.word	0x08003b51
 8003b24:	08003b5b 	.word	0x08003b5b
    {
    case Typography::DEFAULT:
        // verdana_20_4bpp
        return const_cast<touchgfx::Font*>(TypedTextDatabase::getFonts()[0]);
 8003b28:	f006 fa46 	bl	8009fb8 <_ZN17TypedTextDatabase8getFontsEv>
 8003b2c:	4603      	mov	r3, r0
 8003b2e:	681b      	ldr	r3, [r3, #0]
 8003b30:	e019      	b.n	8003b66 <_ZN23ApplicationFontProvider7getFontEt+0x6e>
    case Typography::LARGE:
        // verdana_40_4bpp
        return const_cast<touchgfx::Font*>(TypedTextDatabase::getFonts()[1]);
 8003b32:	f006 fa41 	bl	8009fb8 <_ZN17TypedTextDatabase8getFontsEv>
 8003b36:	4603      	mov	r3, r0
 8003b38:	685b      	ldr	r3, [r3, #4]
 8003b3a:	e014      	b.n	8003b66 <_ZN23ApplicationFontProvider7getFontEt+0x6e>
    case Typography::SMALL:
        // verdanab_8_4bpp
        return const_cast<touchgfx::Font*>(TypedTextDatabase::getFonts()[2]);
 8003b3c:	f006 fa3c 	bl	8009fb8 <_ZN17TypedTextDatabase8getFontsEv>
 8003b40:	4603      	mov	r3, r0
 8003b42:	689b      	ldr	r3, [r3, #8]
 8003b44:	e00f      	b.n	8003b66 <_ZN23ApplicationFontProvider7getFontEt+0x6e>
    case Typography::TYPOGRAPHY_00:
        // verdanab_10_4bpp
        return const_cast<touchgfx::Font*>(TypedTextDatabase::getFonts()[3]);
 8003b46:	f006 fa37 	bl	8009fb8 <_ZN17TypedTextDatabase8getFontsEv>
 8003b4a:	4603      	mov	r3, r0
 8003b4c:	68db      	ldr	r3, [r3, #12]
 8003b4e:	e00a      	b.n	8003b66 <_ZN23ApplicationFontProvider7getFontEt+0x6e>
    case Typography::TYPOGRAPHY_01:
        // verdana_20_4bpp
        return const_cast<touchgfx::Font*>(TypedTextDatabase::getFonts()[0]);
 8003b50:	f006 fa32 	bl	8009fb8 <_ZN17TypedTextDatabase8getFontsEv>
 8003b54:	4603      	mov	r3, r0
 8003b56:	681b      	ldr	r3, [r3, #0]
 8003b58:	e005      	b.n	8003b66 <_ZN23ApplicationFontProvider7getFontEt+0x6e>
    case Typography::TYPOGRAPHY_02:
        // verdanab_12_4bpp
        return const_cast<touchgfx::Font*>(TypedTextDatabase::getFonts()[4]);
 8003b5a:	f006 fa2d 	bl	8009fb8 <_ZN17TypedTextDatabase8getFontsEv>
 8003b5e:	4603      	mov	r3, r0
 8003b60:	691b      	ldr	r3, [r3, #16]
 8003b62:	e000      	b.n	8003b66 <_ZN23ApplicationFontProvider7getFontEt+0x6e>
    default:
        return 0;
 8003b64:	2300      	movs	r3, #0
    }
}
 8003b66:	4618      	mov	r0, r3
 8003b68:	3708      	adds	r7, #8
 8003b6a:	46bd      	mov	sp, r7
 8003b6c:	bd80      	pop	{r7, pc}
 8003b6e:	bf00      	nop

08003b70 <_ZN14BitmapDatabase11getInstanceEv>:
};

namespace BitmapDatabase
{
const touchgfx::Bitmap::BitmapData* getInstance()
{
 8003b70:	b480      	push	{r7}
 8003b72:	af00      	add	r7, sp, #0
    return bitmap_database;
 8003b74:	4b02      	ldr	r3, [pc, #8]	@ (8003b80 <_ZN14BitmapDatabase11getInstanceEv+0x10>)
}
 8003b76:	4618      	mov	r0, r3
 8003b78:	46bd      	mov	sp, r7
 8003b7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b7e:	4770      	bx	lr
 8003b80:	0802cbec 	.word	0x0802cbec

08003b84 <_ZN14BitmapDatabase15getInstanceSizeEv>:

uint16_t getInstanceSize()
{
 8003b84:	b480      	push	{r7}
 8003b86:	af00      	add	r7, sp, #0
    return (uint16_t)(sizeof(bitmap_database) / sizeof(touchgfx::Bitmap::BitmapData));
 8003b88:	230e      	movs	r3, #14
}
 8003b8a:	4618      	mov	r0, r3
 8003b8c:	46bd      	mov	sp, r7
 8003b8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b92:	4770      	bx	lr

08003b94 <_ZN8touchgfx4FontD1Ev>:
 */
class Font
{
public:
    /** Finalizes an instance of the Font class. */
    virtual ~Font()
 8003b94:	b480      	push	{r7}
 8003b96:	b083      	sub	sp, #12
 8003b98:	af00      	add	r7, sp, #0
 8003b9a:	6078      	str	r0, [r7, #4]
    {
 8003b9c:	4a04      	ldr	r2, [pc, #16]	@ (8003bb0 <_ZN8touchgfx4FontD1Ev+0x1c>)
 8003b9e:	687b      	ldr	r3, [r7, #4]
 8003ba0:	601a      	str	r2, [r3, #0]
    }
 8003ba2:	687b      	ldr	r3, [r7, #4]
 8003ba4:	4618      	mov	r0, r3
 8003ba6:	370c      	adds	r7, #12
 8003ba8:	46bd      	mov	sp, r7
 8003baa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bae:	4770      	bx	lr
 8003bb0:	0802d090 	.word	0x0802d090

08003bb4 <_ZN8touchgfx4FontD0Ev>:
    virtual ~Font()
 8003bb4:	b580      	push	{r7, lr}
 8003bb6:	b082      	sub	sp, #8
 8003bb8:	af00      	add	r7, sp, #0
 8003bba:	6078      	str	r0, [r7, #4]
    }
 8003bbc:	6878      	ldr	r0, [r7, #4]
 8003bbe:	f7ff ffe9 	bl	8003b94 <_ZN8touchgfx4FontD1Ev>
 8003bc2:	2110      	movs	r1, #16
 8003bc4:	6878      	ldr	r0, [r7, #4]
 8003bc6:	f026 fe86 	bl	802a8d6 <_ZdlPvj>
 8003bca:	687b      	ldr	r3, [r7, #4]
 8003bcc:	4618      	mov	r0, r3
 8003bce:	3708      	adds	r7, #8
 8003bd0:	46bd      	mov	sp, r7
 8003bd2:	bd80      	pop	{r7, pc}

08003bd4 <_ZNK8touchgfx4Font8getGlyphEt>:
     *
     * @return A pointer to the glyph node or null if the glyph was not found.
     *
     * @see TextProvider::getNextLigature
     */
    virtual const GlyphNode* getGlyph(Unicode::UnicodeChar unicode) const
 8003bd4:	b590      	push	{r4, r7, lr}
 8003bd6:	b087      	sub	sp, #28
 8003bd8:	af00      	add	r7, sp, #0
 8003bda:	6078      	str	r0, [r7, #4]
 8003bdc:	460b      	mov	r3, r1
 8003bde:	807b      	strh	r3, [r7, #2]
    {
        if (unicode == 0)
 8003be0:	887b      	ldrh	r3, [r7, #2]
 8003be2:	2b00      	cmp	r3, #0
 8003be4:	d101      	bne.n	8003bea <_ZNK8touchgfx4Font8getGlyphEt+0x16>
        {
            return 0;
 8003be6:	2300      	movs	r3, #0
 8003be8:	e010      	b.n	8003c0c <_ZNK8touchgfx4Font8getGlyphEt+0x38>
        }
        const uint8_t* dummyPixelDataPointer = 0;
 8003bea:	2300      	movs	r3, #0
 8003bec:	613b      	str	r3, [r7, #16]
        uint8_t bitsPerPixelDummy = 0;
 8003bee:	2300      	movs	r3, #0
 8003bf0:	73fb      	strb	r3, [r7, #15]
        const GlyphNode* glyph = getGlyph(unicode, dummyPixelDataPointer, bitsPerPixelDummy);
 8003bf2:	687b      	ldr	r3, [r7, #4]
 8003bf4:	681b      	ldr	r3, [r3, #0]
 8003bf6:	3308      	adds	r3, #8
 8003bf8:	681c      	ldr	r4, [r3, #0]
 8003bfa:	f107 030f 	add.w	r3, r7, #15
 8003bfe:	f107 0210 	add.w	r2, r7, #16
 8003c02:	8879      	ldrh	r1, [r7, #2]
 8003c04:	6878      	ldr	r0, [r7, #4]
 8003c06:	47a0      	blx	r4
 8003c08:	6178      	str	r0, [r7, #20]
        return glyph;
 8003c0a:	697b      	ldr	r3, [r7, #20]
    }
 8003c0c:	4618      	mov	r0, r3
 8003c0e:	371c      	adds	r7, #28
 8003c10:	46bd      	mov	sp, r7
 8003c12:	bd90      	pop	{r4, r7, pc}

08003c14 <_ZNK8touchgfx4Font15getFallbackCharEv>:
     * used when no glyph is available for some character. If 0 (zero) is returned, there is
     * no default character.
     *
     * @return The default character for the typography in case no glyph is available.
     */
    virtual Unicode::UnicodeChar getFallbackChar() const
 8003c14:	b480      	push	{r7}
 8003c16:	b083      	sub	sp, #12
 8003c18:	af00      	add	r7, sp, #0
 8003c1a:	6078      	str	r0, [r7, #4]
    {
        return fallbackCharacter;
 8003c1c:	687b      	ldr	r3, [r7, #4]
 8003c1e:	895b      	ldrh	r3, [r3, #10]
    }
 8003c20:	4618      	mov	r0, r3
 8003c22:	370c      	adds	r7, #12
 8003c24:	46bd      	mov	sp, r7
 8003c26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c2a:	4770      	bx	lr

08003c2c <_ZNK8touchgfx4Font15getEllipsisCharEv>:
     *
     * @return The ellipsis character for the typography.
     *
     * @see TextArea::setWideTextAction
     */
    virtual Unicode::UnicodeChar getEllipsisChar() const
 8003c2c:	b480      	push	{r7}
 8003c2e:	b083      	sub	sp, #12
 8003c30:	af00      	add	r7, sp, #0
 8003c32:	6078      	str	r0, [r7, #4]
    {
        return ellipsisCharacter;
 8003c34:	687b      	ldr	r3, [r7, #4]
 8003c36:	899b      	ldrh	r3, [r3, #12]
    }
 8003c38:	4618      	mov	r0, r3
 8003c3a:	370c      	adds	r7, #12
 8003c3c:	46bd      	mov	sp, r7
 8003c3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c42:	4770      	bx	lr

08003c44 <_ZNK8touchgfx4Font13getFontHeightEv>:
     * @return The height in pixels of this font.
     *
     * @note It is not sufficient to allocate text areas with this height. Use
     *       getMinimumTextHeight for this.
     */
    FORCE_INLINE_FUNCTION virtual uint16_t getFontHeight() const
 8003c44:	b480      	push	{r7}
 8003c46:	b083      	sub	sp, #12
 8003c48:	af00      	add	r7, sp, #0
 8003c4a:	6078      	str	r0, [r7, #4]
    {
        return fontHeight;
 8003c4c:	687b      	ldr	r3, [r7, #4]
 8003c4e:	889b      	ldrh	r3, [r3, #4]
    }
 8003c50:	4618      	mov	r0, r3
 8003c52:	370c      	adds	r7, #12
 8003c54:	46bd      	mov	sp, r7
 8003c56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c5a:	4770      	bx	lr

08003c5c <_ZNK8touchgfx4Font20getMinimumTextHeightEv>:
     * account that certain characters (eg 'g') have pixels below the baseline, thus making
     * the text height larger than the font height.
     *
     * @return The minimum height needed for a text field that uses this font.
     */
    FORCE_INLINE_FUNCTION virtual uint16_t getMinimumTextHeight() const
 8003c5c:	b480      	push	{r7}
 8003c5e:	b083      	sub	sp, #12
 8003c60:	af00      	add	r7, sp, #0
 8003c62:	6078      	str	r0, [r7, #4]
    {
        return fontHeight + pixelsBelowBaseline;
 8003c64:	687b      	ldr	r3, [r7, #4]
 8003c66:	889b      	ldrh	r3, [r3, #4]
 8003c68:	687a      	ldr	r2, [r7, #4]
 8003c6a:	7992      	ldrb	r2, [r2, #6]
 8003c6c:	4413      	add	r3, r2
 8003c6e:	b29b      	uxth	r3, r3
    }
 8003c70:	4618      	mov	r0, r3
 8003c72:	370c      	adds	r7, #12
 8003c74:	46bd      	mov	sp, r7
 8003c76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c7a:	4770      	bx	lr

08003c7c <_ZNK8touchgfx4Font15getBitsPerPixelEv>:
    /**
     * Gets bits per pixel for this font.
     *
     * @return The number of bits used per pixel in this font.
     */
    FORCE_INLINE_FUNCTION virtual uint8_t getBitsPerPixel() const
 8003c7c:	b480      	push	{r7}
 8003c7e:	b083      	sub	sp, #12
 8003c80:	af00      	add	r7, sp, #0
 8003c82:	6078      	str	r0, [r7, #4]
    {
        return bPerPixel;
 8003c84:	687b      	ldr	r3, [r7, #4]
 8003c86:	79db      	ldrb	r3, [r3, #7]
 8003c88:	f3c3 0306 	ubfx	r3, r3, #0, #7
 8003c8c:	b2db      	uxtb	r3, r3
    }
 8003c8e:	4618      	mov	r0, r3
 8003c90:	370c      	adds	r7, #12
 8003c92:	46bd      	mov	sp, r7
 8003c94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c98:	4770      	bx	lr

08003c9a <_ZNK8touchgfx4Font15getByteAlignRowEv>:
    /**
     * Are the glyphs saved with each glyph row byte aligned?
     *
     * @return True if each glyph row is stored byte aligned, false otherwise.
     */
    FORCE_INLINE_FUNCTION virtual uint8_t getByteAlignRow() const
 8003c9a:	b480      	push	{r7}
 8003c9c:	b083      	sub	sp, #12
 8003c9e:	af00      	add	r7, sp, #0
 8003ca0:	6078      	str	r0, [r7, #4]
    {
        return bAlignRow;
 8003ca2:	687b      	ldr	r3, [r7, #4]
 8003ca4:	79db      	ldrb	r3, [r3, #7]
 8003ca6:	f3c3 13c0 	ubfx	r3, r3, #7, #1
 8003caa:	b2db      	uxtb	r3, r3
    }
 8003cac:	4618      	mov	r0, r3
 8003cae:	370c      	adds	r7, #12
 8003cb0:	46bd      	mov	sp, r7
 8003cb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cb6:	4770      	bx	lr

08003cb8 <_ZN8touchgfx9ConstFontD1Ev>:
 *
 * @see Font
 *
 * @note Pure virtual class. Create an application-specific implementation of getPixelData().
 */
class ConstFont : public Font
 8003cb8:	b580      	push	{r7, lr}
 8003cba:	b082      	sub	sp, #8
 8003cbc:	af00      	add	r7, sp, #0
 8003cbe:	6078      	str	r0, [r7, #4]
 8003cc0:	4a05      	ldr	r2, [pc, #20]	@ (8003cd8 <_ZN8touchgfx9ConstFontD1Ev+0x20>)
 8003cc2:	687b      	ldr	r3, [r7, #4]
 8003cc4:	601a      	str	r2, [r3, #0]
 8003cc6:	687b      	ldr	r3, [r7, #4]
 8003cc8:	4618      	mov	r0, r3
 8003cca:	f7ff ff63 	bl	8003b94 <_ZN8touchgfx4FontD1Ev>
 8003cce:	687b      	ldr	r3, [r7, #4]
 8003cd0:	4618      	mov	r0, r3
 8003cd2:	3708      	adds	r7, #8
 8003cd4:	46bd      	mov	sp, r7
 8003cd6:	bd80      	pop	{r7, pc}
 8003cd8:	0802eef8 	.word	0x0802eef8

08003cdc <_ZN8touchgfx9ConstFontD0Ev>:
 8003cdc:	b580      	push	{r7, lr}
 8003cde:	b082      	sub	sp, #8
 8003ce0:	af00      	add	r7, sp, #0
 8003ce2:	6078      	str	r0, [r7, #4]
 8003ce4:	6878      	ldr	r0, [r7, #4]
 8003ce6:	f7ff ffe7 	bl	8003cb8 <_ZN8touchgfx9ConstFontD1Ev>
 8003cea:	2118      	movs	r1, #24
 8003cec:	6878      	ldr	r0, [r7, #4]
 8003cee:	f026 fdf2 	bl	802a8d6 <_ZdlPvj>
 8003cf2:	687b      	ldr	r3, [r7, #4]
 8003cf4:	4618      	mov	r0, r3
 8003cf6:	3708      	adds	r7, #8
 8003cf8:	46bd      	mov	sp, r7
 8003cfa:	bd80      	pop	{r7, pc}

08003cfc <_ZN8touchgfx13GeneratedFontD1Ev>:
 * An GeneratedFont has both glyph table and glyph data placed in a flash which
 * supports random access read (i.e. not a NAND flash)
 *
 * @see ConstFont
 */
class GeneratedFont : public ConstFont
 8003cfc:	b580      	push	{r7, lr}
 8003cfe:	b082      	sub	sp, #8
 8003d00:	af00      	add	r7, sp, #0
 8003d02:	6078      	str	r0, [r7, #4]
 8003d04:	4a05      	ldr	r2, [pc, #20]	@ (8003d1c <_ZN8touchgfx13GeneratedFontD1Ev+0x20>)
 8003d06:	687b      	ldr	r3, [r7, #4]
 8003d08:	601a      	str	r2, [r3, #0]
 8003d0a:	687b      	ldr	r3, [r7, #4]
 8003d0c:	4618      	mov	r0, r3
 8003d0e:	f7ff ffd3 	bl	8003cb8 <_ZN8touchgfx9ConstFontD1Ev>
 8003d12:	687b      	ldr	r3, [r7, #4]
 8003d14:	4618      	mov	r0, r3
 8003d16:	3708      	adds	r7, #8
 8003d18:	46bd      	mov	sp, r7
 8003d1a:	bd80      	pop	{r7, pc}
 8003d1c:	0802ced8 	.word	0x0802ced8

08003d20 <_ZN8touchgfx13GeneratedFontD0Ev>:
 8003d20:	b580      	push	{r7, lr}
 8003d22:	b082      	sub	sp, #8
 8003d24:	af00      	add	r7, sp, #0
 8003d26:	6078      	str	r0, [r7, #4]
 8003d28:	6878      	ldr	r0, [r7, #4]
 8003d2a:	f7ff ffe7 	bl	8003cfc <_ZN8touchgfx13GeneratedFontD1Ev>
 8003d2e:	2128      	movs	r1, #40	@ 0x28
 8003d30:	6878      	ldr	r0, [r7, #4]
 8003d32:	f026 fdd0 	bl	802a8d6 <_ZdlPvj>
 8003d36:	687b      	ldr	r3, [r7, #4]
 8003d38:	4618      	mov	r0, r3
 8003d3a:	3708      	adds	r7, #8
 8003d3c:	46bd      	mov	sp, r7
 8003d3e:	bd80      	pop	{r7, pc}

08003d40 <_ZN8touchgfx9TypedTextD1Ev>:
    virtual ~TypedText()
 8003d40:	b480      	push	{r7}
 8003d42:	b083      	sub	sp, #12
 8003d44:	af00      	add	r7, sp, #0
 8003d46:	6078      	str	r0, [r7, #4]
    {
 8003d48:	4a04      	ldr	r2, [pc, #16]	@ (8003d5c <_ZN8touchgfx9TypedTextD1Ev+0x1c>)
 8003d4a:	687b      	ldr	r3, [r7, #4]
 8003d4c:	601a      	str	r2, [r3, #0]
    }
 8003d4e:	687b      	ldr	r3, [r7, #4]
 8003d50:	4618      	mov	r0, r3
 8003d52:	370c      	adds	r7, #12
 8003d54:	46bd      	mov	sp, r7
 8003d56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d5a:	4770      	bx	lr
 8003d5c:	0802cd0c 	.word	0x0802cd0c

08003d60 <_ZN8touchgfx9TypedTextD0Ev>:
    virtual ~TypedText()
 8003d60:	b580      	push	{r7, lr}
 8003d62:	b082      	sub	sp, #8
 8003d64:	af00      	add	r7, sp, #0
 8003d66:	6078      	str	r0, [r7, #4]
    }
 8003d68:	6878      	ldr	r0, [r7, #4]
 8003d6a:	f7ff ffe9 	bl	8003d40 <_ZN8touchgfx9TypedTextD1Ev>
 8003d6e:	2108      	movs	r1, #8
 8003d70:	6878      	ldr	r0, [r7, #4]
 8003d72:	f026 fdb0 	bl	802a8d6 <_ZdlPvj>
 8003d76:	687b      	ldr	r3, [r7, #4]
 8003d78:	4618      	mov	r0, r3
 8003d7a:	3708      	adds	r7, #8
 8003d7c:	46bd      	mov	sp, r7
 8003d7e:	bd80      	pop	{r7, pc}

08003d80 <_ZnwjPv>:
#endif // __cpp_sized_deallocation
#endif // __cpp_aligned_new

// Default placement versions of operator new.
_GLIBCXX_NODISCARD inline void* operator new(std::size_t, void* __p) _GLIBCXX_USE_NOEXCEPT
{ return __p; }
 8003d80:	b480      	push	{r7}
 8003d82:	b083      	sub	sp, #12
 8003d84:	af00      	add	r7, sp, #0
 8003d86:	6078      	str	r0, [r7, #4]
 8003d88:	6039      	str	r1, [r7, #0]
 8003d8a:	683b      	ldr	r3, [r7, #0]
 8003d8c:	4618      	mov	r0, r3
 8003d8e:	370c      	adds	r7, #12
 8003d90:	46bd      	mov	sp, r7
 8003d92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d96:	4770      	bx	lr

08003d98 <_ZN8touchgfx4RectC1Essss>:
     * @param  x      The x coordinate.
     * @param  y      The y coordinate.
     * @param  width  The width.
     * @param  height The height.
     */
    Rect(int16_t x, int16_t y, int16_t width, int16_t height)
 8003d98:	b480      	push	{r7}
 8003d9a:	b085      	sub	sp, #20
 8003d9c:	af00      	add	r7, sp, #0
 8003d9e:	60f8      	str	r0, [r7, #12]
 8003da0:	4608      	mov	r0, r1
 8003da2:	4611      	mov	r1, r2
 8003da4:	461a      	mov	r2, r3
 8003da6:	4603      	mov	r3, r0
 8003da8:	817b      	strh	r3, [r7, #10]
 8003daa:	460b      	mov	r3, r1
 8003dac:	813b      	strh	r3, [r7, #8]
 8003dae:	4613      	mov	r3, r2
 8003db0:	80fb      	strh	r3, [r7, #6]
        : x(x), y(y), width(width), height(height)
 8003db2:	68fb      	ldr	r3, [r7, #12]
 8003db4:	897a      	ldrh	r2, [r7, #10]
 8003db6:	801a      	strh	r2, [r3, #0]
 8003db8:	68fb      	ldr	r3, [r7, #12]
 8003dba:	893a      	ldrh	r2, [r7, #8]
 8003dbc:	805a      	strh	r2, [r3, #2]
 8003dbe:	68fb      	ldr	r3, [r7, #12]
 8003dc0:	88fa      	ldrh	r2, [r7, #6]
 8003dc2:	809a      	strh	r2, [r3, #4]
 8003dc4:	68fb      	ldr	r3, [r7, #12]
 8003dc6:	8b3a      	ldrh	r2, [r7, #24]
 8003dc8:	80da      	strh	r2, [r3, #6]
    {
    }
 8003dca:	68fb      	ldr	r3, [r7, #12]
 8003dcc:	4618      	mov	r0, r3
 8003dce:	3714      	adds	r7, #20
 8003dd0:	46bd      	mov	sp, r7
 8003dd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dd6:	4770      	bx	lr

08003dd8 <_ZN8touchgfx8DrawableC1Ev>:
 */
class Drawable
{
public:
    /** Initializes a new instance of the Drawable class. */
    Drawable()
 8003dd8:	b580      	push	{r7, lr}
 8003dda:	b082      	sub	sp, #8
 8003ddc:	af00      	add	r7, sp, #0
 8003dde:	6078      	str	r0, [r7, #4]
          nextSibling(0),
          nextDrawChainElement(0),
          cachedAbsX(0),
          cachedAbsY(0),
          touchable(false),
          visible(true)
 8003de0:	4a14      	ldr	r2, [pc, #80]	@ (8003e34 <_ZN8touchgfx8DrawableC1Ev+0x5c>)
 8003de2:	687b      	ldr	r3, [r7, #4]
 8003de4:	601a      	str	r2, [r3, #0]
        : rect(),
 8003de6:	687b      	ldr	r3, [r7, #4]
 8003de8:	3304      	adds	r3, #4
 8003dea:	4618      	mov	r0, r3
 8003dec:	f7fe fcee 	bl	80027cc <_ZN8touchgfx4RectC1Ev>
          cachedVisibleRect(),
 8003df0:	687b      	ldr	r3, [r7, #4]
 8003df2:	330c      	adds	r3, #12
 8003df4:	4618      	mov	r0, r3
 8003df6:	f7fe fce9 	bl	80027cc <_ZN8touchgfx4RectC1Ev>
          parent(0),
 8003dfa:	687b      	ldr	r3, [r7, #4]
 8003dfc:	2200      	movs	r2, #0
 8003dfe:	615a      	str	r2, [r3, #20]
          nextSibling(0),
 8003e00:	687b      	ldr	r3, [r7, #4]
 8003e02:	2200      	movs	r2, #0
 8003e04:	619a      	str	r2, [r3, #24]
          nextDrawChainElement(0),
 8003e06:	687b      	ldr	r3, [r7, #4]
 8003e08:	2200      	movs	r2, #0
 8003e0a:	61da      	str	r2, [r3, #28]
          cachedAbsX(0),
 8003e0c:	687b      	ldr	r3, [r7, #4]
 8003e0e:	2200      	movs	r2, #0
 8003e10:	841a      	strh	r2, [r3, #32]
          cachedAbsY(0),
 8003e12:	687b      	ldr	r3, [r7, #4]
 8003e14:	2200      	movs	r2, #0
 8003e16:	845a      	strh	r2, [r3, #34]	@ 0x22
          touchable(false),
 8003e18:	687b      	ldr	r3, [r7, #4]
 8003e1a:	2200      	movs	r2, #0
 8003e1c:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
          visible(true)
 8003e20:	687b      	ldr	r3, [r7, #4]
 8003e22:	2201      	movs	r2, #1
 8003e24:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
    {
    }
 8003e28:	687b      	ldr	r3, [r7, #4]
 8003e2a:	4618      	mov	r0, r3
 8003e2c:	3708      	adds	r7, #8
 8003e2e:	46bd      	mov	sp, r7
 8003e30:	bd80      	pop	{r7, pc}
 8003e32:	bf00      	nop
 8003e34:	0802ee94 	.word	0x0802ee94

08003e38 <_ZN8touchgfx8DrawableD1Ev>:

    /** Finalizes an instance of the Drawable class. */
    virtual ~Drawable()
 8003e38:	b480      	push	{r7}
 8003e3a:	b083      	sub	sp, #12
 8003e3c:	af00      	add	r7, sp, #0
 8003e3e:	6078      	str	r0, [r7, #4]
    {
 8003e40:	4a04      	ldr	r2, [pc, #16]	@ (8003e54 <_ZN8touchgfx8DrawableD1Ev+0x1c>)
 8003e42:	687b      	ldr	r3, [r7, #4]
 8003e44:	601a      	str	r2, [r3, #0]
    }
 8003e46:	687b      	ldr	r3, [r7, #4]
 8003e48:	4618      	mov	r0, r3
 8003e4a:	370c      	adds	r7, #12
 8003e4c:	46bd      	mov	sp, r7
 8003e4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e52:	4770      	bx	lr
 8003e54:	0802ee94 	.word	0x0802ee94

08003e58 <_ZN8touchgfx8DrawableD0Ev>:
    virtual ~Drawable()
 8003e58:	b580      	push	{r7, lr}
 8003e5a:	b082      	sub	sp, #8
 8003e5c:	af00      	add	r7, sp, #0
 8003e5e:	6078      	str	r0, [r7, #4]
    }
 8003e60:	6878      	ldr	r0, [r7, #4]
 8003e62:	f7ff ffe9 	bl	8003e38 <_ZN8touchgfx8DrawableD1Ev>
 8003e66:	2128      	movs	r1, #40	@ 0x28
 8003e68:	6878      	ldr	r0, [r7, #4]
 8003e6a:	f026 fd34 	bl	802a8d6 <_ZdlPvj>
 8003e6e:	687b      	ldr	r3, [r7, #4]
 8003e70:	4618      	mov	r0, r3
 8003e72:	3708      	adds	r7, #8
 8003e74:	46bd      	mov	sp, r7
 8003e76:	bd80      	pop	{r7, pc}

08003e78 <_ZN8touchgfx8Drawable13getFirstChildEv>:
     * Function for obtaining the first child of this drawable if any.
     *
     * @return A pointer on the first child drawable if any.
     * @see Container::getFirstChild
     */
    virtual Drawable* getFirstChild()
 8003e78:	b480      	push	{r7}
 8003e7a:	b083      	sub	sp, #12
 8003e7c:	af00      	add	r7, sp, #0
 8003e7e:	6078      	str	r0, [r7, #4]
    {
        return 0;
 8003e80:	2300      	movs	r3, #0
    }
 8003e82:	4618      	mov	r0, r3
 8003e84:	370c      	adds	r7, #12
 8003e86:	46bd      	mov	sp, r7
 8003e88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e8c:	4770      	bx	lr

08003e8e <_ZNK8touchgfx8Drawable7getRectEv>:
     * @return The rectangle this Drawable covers expressed in coordinates relative to its
     *         parent.
     *
     * @see getAbsoluteRect
     */
    const Rect& getRect() const
 8003e8e:	b480      	push	{r7}
 8003e90:	b083      	sub	sp, #12
 8003e92:	af00      	add	r7, sp, #0
 8003e94:	6078      	str	r0, [r7, #4]
    {
        return rect;
 8003e96:	687b      	ldr	r3, [r7, #4]
 8003e98:	3304      	adds	r3, #4
    }
 8003e9a:	4618      	mov	r0, r3
 8003e9c:	370c      	adds	r7, #12
 8003e9e:	46bd      	mov	sp, r7
 8003ea0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ea4:	4770      	bx	lr

08003ea6 <_ZN8touchgfx8Drawable11setPositionEssss>:
     * @param  width  The width of this Drawable.
     * @param  height The height of this Drawable.
     *
     * @note For most Drawable widgets, changing this does normally not automatically yield a redraw.
     */
    void setPosition(int16_t x, int16_t y, int16_t width, int16_t height)
 8003ea6:	b580      	push	{r7, lr}
 8003ea8:	b084      	sub	sp, #16
 8003eaa:	af00      	add	r7, sp, #0
 8003eac:	60f8      	str	r0, [r7, #12]
 8003eae:	4608      	mov	r0, r1
 8003eb0:	4611      	mov	r1, r2
 8003eb2:	461a      	mov	r2, r3
 8003eb4:	4603      	mov	r3, r0
 8003eb6:	817b      	strh	r3, [r7, #10]
 8003eb8:	460b      	mov	r3, r1
 8003eba:	813b      	strh	r3, [r7, #8]
 8003ebc:	4613      	mov	r3, r2
 8003ebe:	80fb      	strh	r3, [r7, #6]
    {
        setXY(x, y);
 8003ec0:	f9b7 2008 	ldrsh.w	r2, [r7, #8]
 8003ec4:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 8003ec8:	4619      	mov	r1, r3
 8003eca:	68f8      	ldr	r0, [r7, #12]
 8003ecc:	f000 f844 	bl	8003f58 <_ZN8touchgfx8Drawable5setXYEss>
        setWidthHeight(width, height);
 8003ed0:	f9b7 2018 	ldrsh.w	r2, [r7, #24]
 8003ed4:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8003ed8:	4619      	mov	r1, r3
 8003eda:	68f8      	ldr	r0, [r7, #12]
 8003edc:	f000 f898 	bl	8004010 <_ZN8touchgfx8Drawable14setWidthHeightEss>
    }
 8003ee0:	bf00      	nop
 8003ee2:	3710      	adds	r7, #16
 8003ee4:	46bd      	mov	sp, r7
 8003ee6:	bd80      	pop	{r7, pc}

08003ee8 <_ZNK8touchgfx8Drawable4getYEv>:
    /**
     * Gets the y coordinate of this Drawable, relative to its parent.
     *
     * @return The y value, relative to the parent.
     */
    int16_t getY() const
 8003ee8:	b480      	push	{r7}
 8003eea:	b083      	sub	sp, #12
 8003eec:	af00      	add	r7, sp, #0
 8003eee:	6078      	str	r0, [r7, #4]
    {
        return rect.y;
 8003ef0:	687b      	ldr	r3, [r7, #4]
 8003ef2:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
    }
 8003ef6:	4618      	mov	r0, r3
 8003ef8:	370c      	adds	r7, #12
 8003efa:	46bd      	mov	sp, r7
 8003efc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f00:	4770      	bx	lr

08003f02 <_ZNK8touchgfx8Drawable9getHeightEv>:
    /**
     * Gets the height of this Drawable.
     *
     * @return The height of this Drawable.
     */
    int16_t getHeight() const
 8003f02:	b480      	push	{r7}
 8003f04:	b083      	sub	sp, #12
 8003f06:	af00      	add	r7, sp, #0
 8003f08:	6078      	str	r0, [r7, #4]
    {
        return rect.height;
 8003f0a:	687b      	ldr	r3, [r7, #4]
 8003f0c:	f9b3 300a 	ldrsh.w	r3, [r3, #10]
    }
 8003f10:	4618      	mov	r0, r3
 8003f12:	370c      	adds	r7, #12
 8003f14:	46bd      	mov	sp, r7
 8003f16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f1a:	4770      	bx	lr

08003f1c <_ZN8touchgfx8Drawable4setXEs>:
     *
     * @param  x The new x value, relative to the parent. A negative value is allowed.
     *
     * @note For most Drawable widgets, changing this does normally not automatically yield a redraw.
     */
    virtual void setX(int16_t x)
 8003f1c:	b480      	push	{r7}
 8003f1e:	b083      	sub	sp, #12
 8003f20:	af00      	add	r7, sp, #0
 8003f22:	6078      	str	r0, [r7, #4]
 8003f24:	460b      	mov	r3, r1
 8003f26:	807b      	strh	r3, [r7, #2]
    {
        rect.x = x;
 8003f28:	687b      	ldr	r3, [r7, #4]
 8003f2a:	887a      	ldrh	r2, [r7, #2]
 8003f2c:	809a      	strh	r2, [r3, #4]
    }
 8003f2e:	bf00      	nop
 8003f30:	370c      	adds	r7, #12
 8003f32:	46bd      	mov	sp, r7
 8003f34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f38:	4770      	bx	lr

08003f3a <_ZN8touchgfx8Drawable4setYEs>:
     *
     * @param  y The new y value, relative to the parent. A negative value is allowed.
     *
     * @note For most Drawable widgets, changing this does normally not automatically yield a redraw.
     */
    virtual void setY(int16_t y)
 8003f3a:	b480      	push	{r7}
 8003f3c:	b083      	sub	sp, #12
 8003f3e:	af00      	add	r7, sp, #0
 8003f40:	6078      	str	r0, [r7, #4]
 8003f42:	460b      	mov	r3, r1
 8003f44:	807b      	strh	r3, [r7, #2]
    {
        rect.y = y;
 8003f46:	687b      	ldr	r3, [r7, #4]
 8003f48:	887a      	ldrh	r2, [r7, #2]
 8003f4a:	80da      	strh	r2, [r3, #6]
    }
 8003f4c:	bf00      	nop
 8003f4e:	370c      	adds	r7, #12
 8003f50:	46bd      	mov	sp, r7
 8003f52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f56:	4770      	bx	lr

08003f58 <_ZN8touchgfx8Drawable5setXYEss>:
     *
     * @see moveTo
     *
     * @note For most Drawable widgets, changing this does normally not automatically yield a redraw.
     */
    void setXY(int16_t x, int16_t y)
 8003f58:	b580      	push	{r7, lr}
 8003f5a:	b082      	sub	sp, #8
 8003f5c:	af00      	add	r7, sp, #0
 8003f5e:	6078      	str	r0, [r7, #4]
 8003f60:	460b      	mov	r3, r1
 8003f62:	807b      	strh	r3, [r7, #2]
 8003f64:	4613      	mov	r3, r2
 8003f66:	803b      	strh	r3, [r7, #0]
    {
        setX(x);
 8003f68:	687b      	ldr	r3, [r7, #4]
 8003f6a:	681b      	ldr	r3, [r3, #0]
 8003f6c:	332c      	adds	r3, #44	@ 0x2c
 8003f6e:	681b      	ldr	r3, [r3, #0]
 8003f70:	f9b7 2002 	ldrsh.w	r2, [r7, #2]
 8003f74:	4611      	mov	r1, r2
 8003f76:	6878      	ldr	r0, [r7, #4]
 8003f78:	4798      	blx	r3
        setY(y);
 8003f7a:	687b      	ldr	r3, [r7, #4]
 8003f7c:	681b      	ldr	r3, [r3, #0]
 8003f7e:	3330      	adds	r3, #48	@ 0x30
 8003f80:	681b      	ldr	r3, [r3, #0]
 8003f82:	f9b7 2000 	ldrsh.w	r2, [r7]
 8003f86:	4611      	mov	r1, r2
 8003f88:	6878      	ldr	r0, [r7, #4]
 8003f8a:	4798      	blx	r3
    }
 8003f8c:	bf00      	nop
 8003f8e:	3708      	adds	r7, #8
 8003f90:	46bd      	mov	sp, r7
 8003f92:	bd80      	pop	{r7, pc}

08003f94 <_ZN8touchgfx8Drawable8setWidthEs>:
     *
     * @param  width The new width.
     *
     * @note For most Drawable widgets, changing this does normally not automatically yield a redraw.
     */
    virtual void setWidth(int16_t width)
 8003f94:	b480      	push	{r7}
 8003f96:	b083      	sub	sp, #12
 8003f98:	af00      	add	r7, sp, #0
 8003f9a:	6078      	str	r0, [r7, #4]
 8003f9c:	460b      	mov	r3, r1
 8003f9e:	807b      	strh	r3, [r7, #2]
    {
        rect.width = width;
 8003fa0:	687b      	ldr	r3, [r7, #4]
 8003fa2:	887a      	ldrh	r2, [r7, #2]
 8003fa4:	811a      	strh	r2, [r3, #8]
    }
 8003fa6:	bf00      	nop
 8003fa8:	370c      	adds	r7, #12
 8003faa:	46bd      	mov	sp, r7
 8003fac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fb0:	4770      	bx	lr

08003fb2 <_ZN8touchgfx8Drawable9setHeightEs>:
     *
     * @param  height The new height.
     *
     * @note For most Drawable widgets, changing this does normally not automatically yield a redraw.
     */
    virtual void setHeight(int16_t height)
 8003fb2:	b480      	push	{r7}
 8003fb4:	b083      	sub	sp, #12
 8003fb6:	af00      	add	r7, sp, #0
 8003fb8:	6078      	str	r0, [r7, #4]
 8003fba:	460b      	mov	r3, r1
 8003fbc:	807b      	strh	r3, [r7, #2]
    {
        rect.height = height;
 8003fbe:	687b      	ldr	r3, [r7, #4]
 8003fc0:	887a      	ldrh	r2, [r7, #2]
 8003fc2:	815a      	strh	r2, [r3, #10]
    }
 8003fc4:	bf00      	nop
 8003fc6:	370c      	adds	r7, #12
 8003fc8:	46bd      	mov	sp, r7
 8003fca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fce:	4770      	bx	lr

08003fd0 <_ZN8touchgfx8Drawable20childGeometryChangedEv>:
    /**
     * This function can be called on parent nodes to signal that the size or position of
     * one or more of its children has changed. Currently only used in ScrollableContainer
     * to redraw scrollbars when the size of the scrolling contents changes.
     */
    virtual void childGeometryChanged()
 8003fd0:	b480      	push	{r7}
 8003fd2:	b083      	sub	sp, #12
 8003fd4:	af00      	add	r7, sp, #0
 8003fd6:	6078      	str	r0, [r7, #4]
    {
    }
 8003fd8:	bf00      	nop
 8003fda:	370c      	adds	r7, #12
 8003fdc:	46bd      	mov	sp, r7
 8003fde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fe2:	4770      	bx	lr

08003fe4 <_ZN8touchgfx8Drawable16handleClickEventERKNS_10ClickEventE>:
     * ignores the event. The event is only received if the Drawable is touchable and
     * visible.
     *
     * @param  event The ClickEvent received from the HAL.
     */
    virtual void handleClickEvent(const ClickEvent& event)
 8003fe4:	b480      	push	{r7}
 8003fe6:	b083      	sub	sp, #12
 8003fe8:	af00      	add	r7, sp, #0
 8003fea:	6078      	str	r0, [r7, #4]
 8003fec:	6039      	str	r1, [r7, #0]
    {
    }
 8003fee:	bf00      	nop
 8003ff0:	370c      	adds	r7, #12
 8003ff2:	46bd      	mov	sp, r7
 8003ff4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ff8:	4770      	bx	lr

08003ffa <_ZN8touchgfx8Drawable18handleGestureEventERKNS_12GestureEventE>:
     * ignores the event. The event is only received if the Drawable is touchable and
     * visible.
     *
     * @param  event The GestureEvent received from the HAL.
     */
    virtual void handleGestureEvent(const GestureEvent& event)
 8003ffa:	b480      	push	{r7}
 8003ffc:	b083      	sub	sp, #12
 8003ffe:	af00      	add	r7, sp, #0
 8004000:	6078      	str	r0, [r7, #4]
 8004002:	6039      	str	r1, [r7, #0]
    {
    }
 8004004:	bf00      	nop
 8004006:	370c      	adds	r7, #12
 8004008:	46bd      	mov	sp, r7
 800400a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800400e:	4770      	bx	lr

08004010 <_ZN8touchgfx8Drawable14setWidthHeightEss>:
     * coordinates).
     *
     * @param  width  The width.
     * @param  height The height.
     */
    void setWidthHeight(int16_t width, int16_t height)
 8004010:	b580      	push	{r7, lr}
 8004012:	b082      	sub	sp, #8
 8004014:	af00      	add	r7, sp, #0
 8004016:	6078      	str	r0, [r7, #4]
 8004018:	460b      	mov	r3, r1
 800401a:	807b      	strh	r3, [r7, #2]
 800401c:	4613      	mov	r3, r2
 800401e:	803b      	strh	r3, [r7, #0]
    {
        setWidth(width);
 8004020:	687b      	ldr	r3, [r7, #4]
 8004022:	681b      	ldr	r3, [r3, #0]
 8004024:	3334      	adds	r3, #52	@ 0x34
 8004026:	681b      	ldr	r3, [r3, #0]
 8004028:	f9b7 2002 	ldrsh.w	r2, [r7, #2]
 800402c:	4611      	mov	r1, r2
 800402e:	6878      	ldr	r0, [r7, #4]
 8004030:	4798      	blx	r3
        setHeight(height);
 8004032:	687b      	ldr	r3, [r7, #4]
 8004034:	681b      	ldr	r3, [r3, #0]
 8004036:	3338      	adds	r3, #56	@ 0x38
 8004038:	681b      	ldr	r3, [r3, #0]
 800403a:	f9b7 2000 	ldrsh.w	r2, [r7]
 800403e:	4611      	mov	r1, r2
 8004040:	6878      	ldr	r0, [r7, #4]
 8004042:	4798      	blx	r3
    }
 8004044:	bf00      	nop
 8004046:	3708      	adds	r7, #8
 8004048:	46bd      	mov	sp, r7
 800404a:	bd80      	pop	{r7, pc}

0800404c <_ZN8touchgfx8Drawable15handleDragEventERKNS_9DragEventE>:
     * ignores the event. The event is only received if the drawable is touchable and
     * visible.
     *
     * @param  event The DragEvent received from the HAL.
     */
    virtual void handleDragEvent(const DragEvent& event)
 800404c:	b480      	push	{r7}
 800404e:	b083      	sub	sp, #12
 8004050:	af00      	add	r7, sp, #0
 8004052:	6078      	str	r0, [r7, #4]
 8004054:	6039      	str	r1, [r7, #0]
    {
    }
 8004056:	bf00      	nop
 8004058:	370c      	adds	r7, #12
 800405a:	46bd      	mov	sp, r7
 800405c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004060:	4770      	bx	lr

08004062 <_ZN8touchgfx8Drawable15handleTickEventEv>:
     * Called periodically by the framework if the Drawable instance has subscribed to timer
     * ticks.
     *
     * @see Application::registerTimerWidget
     */
    virtual void handleTickEvent()
 8004062:	b480      	push	{r7}
 8004064:	b083      	sub	sp, #12
 8004066:	af00      	add	r7, sp, #0
 8004068:	6078      	str	r0, [r7, #4]
    {
    }
 800406a:	bf00      	nop
 800406c:	370c      	adds	r7, #12
 800406e:	46bd      	mov	sp, r7
 8004070:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004074:	4770      	bx	lr

08004076 <_ZNK8touchgfx8Drawable9isVisibleEv>:
     *
     * @return true if the Drawable is visible.
     *
     * @see setVisible
     */
    bool isVisible() const
 8004076:	b480      	push	{r7}
 8004078:	b083      	sub	sp, #12
 800407a:	af00      	add	r7, sp, #0
 800407c:	6078      	str	r0, [r7, #4]
    {
        return visible;
 800407e:	687b      	ldr	r3, [r7, #4]
 8004080:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
    }
 8004084:	4618      	mov	r0, r3
 8004086:	370c      	adds	r7, #12
 8004088:	46bd      	mov	sp, r7
 800408a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800408e:	4770      	bx	lr

08004090 <_ZNK8touchgfx8Drawable11isTouchableEv>:
     *
     * @return True if touch events are received.
     *
     * @see setTouchable
     */
    bool isTouchable() const
 8004090:	b480      	push	{r7}
 8004092:	b083      	sub	sp, #12
 8004094:	af00      	add	r7, sp, #0
 8004096:	6078      	str	r0, [r7, #4]
    {
        return touchable;
 8004098:	687b      	ldr	r3, [r7, #4]
 800409a:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
    }
 800409e:	4618      	mov	r0, r3
 80040a0:	370c      	adds	r7, #12
 80040a2:	46bd      	mov	sp, r7
 80040a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040a8:	4770      	bx	lr

080040aa <_ZN8touchgfx8Drawable6moveToEss>:
     *
     * @see moveRelative, setXY
     *
     * @note Will redraw the appropriate areas of the screen.
     */
    virtual void moveTo(int16_t x, int16_t y)
 80040aa:	b580      	push	{r7, lr}
 80040ac:	b082      	sub	sp, #8
 80040ae:	af00      	add	r7, sp, #0
 80040b0:	6078      	str	r0, [r7, #4]
 80040b2:	460b      	mov	r3, r1
 80040b4:	807b      	strh	r3, [r7, #2]
 80040b6:	4613      	mov	r3, r2
 80040b8:	803b      	strh	r3, [r7, #0]
    {
        moveRelative(x - rect.x, y - rect.y);
 80040ba:	687b      	ldr	r3, [r7, #4]
 80040bc:	681b      	ldr	r3, [r3, #0]
 80040be:	3350      	adds	r3, #80	@ 0x50
 80040c0:	681b      	ldr	r3, [r3, #0]
 80040c2:	8879      	ldrh	r1, [r7, #2]
 80040c4:	687a      	ldr	r2, [r7, #4]
 80040c6:	f9b2 2004 	ldrsh.w	r2, [r2, #4]
 80040ca:	b292      	uxth	r2, r2
 80040cc:	1a8a      	subs	r2, r1, r2
 80040ce:	b292      	uxth	r2, r2
 80040d0:	b210      	sxth	r0, r2
 80040d2:	8839      	ldrh	r1, [r7, #0]
 80040d4:	687a      	ldr	r2, [r7, #4]
 80040d6:	f9b2 2006 	ldrsh.w	r2, [r2, #6]
 80040da:	b292      	uxth	r2, r2
 80040dc:	1a8a      	subs	r2, r1, r2
 80040de:	b292      	uxth	r2, r2
 80040e0:	b212      	sxth	r2, r2
 80040e2:	4601      	mov	r1, r0
 80040e4:	6878      	ldr	r0, [r7, #4]
 80040e6:	4798      	blx	r3
    }
 80040e8:	bf00      	nop
 80040ea:	3708      	adds	r7, #8
 80040ec:	46bd      	mov	sp, r7
 80040ee:	bd80      	pop	{r7, pc}

080040f0 <_ZN8touchgfx8Drawable19resetDrawChainCacheEv>:
     *
     * Reset cached coordinate data.
     *
     * @note For TouchGFX internal use only.
     */
    void resetDrawChainCache()
 80040f0:	b480      	push	{r7}
 80040f2:	b083      	sub	sp, #12
 80040f4:	af00      	add	r7, sp, #0
 80040f6:	6078      	str	r0, [r7, #4]
    {
        // Resetting the cached indicators
        cachedVisibleRect.x = UNCACHED_INDICATOR;
 80040f8:	687b      	ldr	r3, [r7, #4]
 80040fa:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80040fe:	819a      	strh	r2, [r3, #12]
        cachedAbsX = UNCACHED_INDICATOR;
 8004100:	687b      	ldr	r3, [r7, #4]
 8004102:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8004106:	841a      	strh	r2, [r3, #32]
        cachedAbsY = UNCACHED_INDICATOR;
 8004108:	687b      	ldr	r3, [r7, #4]
 800410a:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800410e:	845a      	strh	r2, [r3, #34]	@ 0x22
    }
 8004110:	bf00      	nop
 8004112:	370c      	adds	r7, #12
 8004114:	46bd      	mov	sp, r7
 8004116:	f85d 7b04 	ldr.w	r7, [sp], #4
 800411a:	4770      	bx	lr

0800411c <_ZN8touchgfx8Drawable14setupDrawChainERKNS_4RectEPPS0_>:
     * @param          invalidatedArea     Include drawables that intersect with this area only.
     * @param [in,out] nextPreviousElement Modifiable element in linked list.
     *
     * @note For TouchGFX internal use only.
     */
    virtual void setupDrawChain(const Rect& invalidatedArea, Drawable** nextPreviousElement)
 800411c:	b580      	push	{r7, lr}
 800411e:	b084      	sub	sp, #16
 8004120:	af00      	add	r7, sp, #0
 8004122:	60f8      	str	r0, [r7, #12]
 8004124:	60b9      	str	r1, [r7, #8]
 8004126:	607a      	str	r2, [r7, #4]
    {
        resetDrawChainCache();
 8004128:	68f8      	ldr	r0, [r7, #12]
 800412a:	f7ff ffe1 	bl	80040f0 <_ZN8touchgfx8Drawable19resetDrawChainCacheEv>
        nextDrawChainElement = *nextPreviousElement;
 800412e:	687b      	ldr	r3, [r7, #4]
 8004130:	681a      	ldr	r2, [r3, #0]
 8004132:	68fb      	ldr	r3, [r7, #12]
 8004134:	61da      	str	r2, [r3, #28]
        *nextPreviousElement = this;
 8004136:	687b      	ldr	r3, [r7, #4]
 8004138:	68fa      	ldr	r2, [r7, #12]
 800413a:	601a      	str	r2, [r3, #0]
    }
 800413c:	bf00      	nop
 800413e:	3710      	adds	r7, #16
 8004140:	46bd      	mov	sp, r7
 8004142:	bd80      	pop	{r7, pc}

08004144 <_ZN8touchgfx3HAL3lcdEv>:
    static LCD& lcd()
 8004144:	b480      	push	{r7}
 8004146:	af00      	add	r7, sp, #0
        if (instance->useAuxiliaryLCD && instance->auxiliaryLCD)
 8004148:	4b0b      	ldr	r3, [pc, #44]	@ (8004178 <_ZN8touchgfx3HAL3lcdEv+0x34>)
 800414a:	681b      	ldr	r3, [r3, #0]
 800414c:	f893 3076 	ldrb.w	r3, [r3, #118]	@ 0x76
 8004150:	2b00      	cmp	r3, #0
 8004152:	d008      	beq.n	8004166 <_ZN8touchgfx3HAL3lcdEv+0x22>
 8004154:	4b08      	ldr	r3, [pc, #32]	@ (8004178 <_ZN8touchgfx3HAL3lcdEv+0x34>)
 8004156:	681b      	ldr	r3, [r3, #0]
 8004158:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800415a:	2b00      	cmp	r3, #0
 800415c:	d003      	beq.n	8004166 <_ZN8touchgfx3HAL3lcdEv+0x22>
            return *instance->auxiliaryLCD;
 800415e:	4b06      	ldr	r3, [pc, #24]	@ (8004178 <_ZN8touchgfx3HAL3lcdEv+0x34>)
 8004160:	681b      	ldr	r3, [r3, #0]
 8004162:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004164:	e002      	b.n	800416c <_ZN8touchgfx3HAL3lcdEv+0x28>
        return instance->lcdRef;
 8004166:	4b04      	ldr	r3, [pc, #16]	@ (8004178 <_ZN8touchgfx3HAL3lcdEv+0x34>)
 8004168:	681b      	ldr	r3, [r3, #0]
 800416a:	689b      	ldr	r3, [r3, #8]
    }
 800416c:	4618      	mov	r0, r3
 800416e:	46bd      	mov	sp, r7
 8004170:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004174:	4770      	bx	lr
 8004176:	bf00      	nop
 8004178:	2400b880 	.word	0x2400b880

0800417c <_ZN8touchgfx10TransitionC1Ev>:
 */
class Transition
{
public:
    /** Initializes a new instance of the Transition class. */
    Transition()
 800417c:	b480      	push	{r7}
 800417e:	b083      	sub	sp, #12
 8004180:	af00      	add	r7, sp, #0
 8004182:	6078      	str	r0, [r7, #4]
        : screenContainer(0), done(false)
 8004184:	4a07      	ldr	r2, [pc, #28]	@ (80041a4 <_ZN8touchgfx10TransitionC1Ev+0x28>)
 8004186:	687b      	ldr	r3, [r7, #4]
 8004188:	601a      	str	r2, [r3, #0]
 800418a:	687b      	ldr	r3, [r7, #4]
 800418c:	2200      	movs	r2, #0
 800418e:	605a      	str	r2, [r3, #4]
 8004190:	687b      	ldr	r3, [r7, #4]
 8004192:	2200      	movs	r2, #0
 8004194:	721a      	strb	r2, [r3, #8]
    {
    }
 8004196:	687b      	ldr	r3, [r7, #4]
 8004198:	4618      	mov	r0, r3
 800419a:	370c      	adds	r7, #12
 800419c:	46bd      	mov	sp, r7
 800419e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041a2:	4770      	bx	lr
 80041a4:	0802ceb4 	.word	0x0802ceb4

080041a8 <_ZN8touchgfx10TransitionD1Ev>:

    /** Finalizes an instance of the Transition class. */
    virtual ~Transition()
 80041a8:	b480      	push	{r7}
 80041aa:	b083      	sub	sp, #12
 80041ac:	af00      	add	r7, sp, #0
 80041ae:	6078      	str	r0, [r7, #4]
    {
 80041b0:	4a04      	ldr	r2, [pc, #16]	@ (80041c4 <_ZN8touchgfx10TransitionD1Ev+0x1c>)
 80041b2:	687b      	ldr	r3, [r7, #4]
 80041b4:	601a      	str	r2, [r3, #0]
    }
 80041b6:	687b      	ldr	r3, [r7, #4]
 80041b8:	4618      	mov	r0, r3
 80041ba:	370c      	adds	r7, #12
 80041bc:	46bd      	mov	sp, r7
 80041be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041c2:	4770      	bx	lr
 80041c4:	0802ceb4 	.word	0x0802ceb4

080041c8 <_ZN8touchgfx10TransitionD0Ev>:
    virtual ~Transition()
 80041c8:	b580      	push	{r7, lr}
 80041ca:	b082      	sub	sp, #8
 80041cc:	af00      	add	r7, sp, #0
 80041ce:	6078      	str	r0, [r7, #4]
    }
 80041d0:	6878      	ldr	r0, [r7, #4]
 80041d2:	f7ff ffe9 	bl	80041a8 <_ZN8touchgfx10TransitionD1Ev>
 80041d6:	210c      	movs	r1, #12
 80041d8:	6878      	ldr	r0, [r7, #4]
 80041da:	f026 fb7c 	bl	802a8d6 <_ZdlPvj>
 80041de:	687b      	ldr	r3, [r7, #4]
 80041e0:	4618      	mov	r0, r3
 80041e2:	3708      	adds	r7, #8
 80041e4:	46bd      	mov	sp, r7
 80041e6:	bd80      	pop	{r7, pc}

080041e8 <_ZN8touchgfx10Transition15handleTickEventEv>:

    /** Called for every tick when transitioning. */
    virtual void handleTickEvent()
 80041e8:	b480      	push	{r7}
 80041ea:	b083      	sub	sp, #12
 80041ec:	af00      	add	r7, sp, #0
 80041ee:	6078      	str	r0, [r7, #4]
    {
    }
 80041f0:	bf00      	nop
 80041f2:	370c      	adds	r7, #12
 80041f4:	46bd      	mov	sp, r7
 80041f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041fa:	4770      	bx	lr

080041fc <_ZN8touchgfx10Transition8tearDownEv>:

    /**
     * Tears down the Animation. Called before the destructor is called, when the
     * application changes the transition.
     */
    virtual void tearDown()
 80041fc:	b480      	push	{r7}
 80041fe:	b083      	sub	sp, #12
 8004200:	af00      	add	r7, sp, #0
 8004202:	6078      	str	r0, [r7, #4]
    {
    }
 8004204:	bf00      	nop
 8004206:	370c      	adds	r7, #12
 8004208:	46bd      	mov	sp, r7
 800420a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800420e:	4770      	bx	lr

08004210 <_ZN8touchgfx10Transition4initEv>:

    /**
     * Initializes the transition. Called after the constructor is called, when the
     * application changes the transition.
     */
    virtual void init()
 8004210:	b480      	push	{r7}
 8004212:	b083      	sub	sp, #12
 8004214:	af00      	add	r7, sp, #0
 8004216:	6078      	str	r0, [r7, #4]
    {
    }
 8004218:	bf00      	nop
 800421a:	370c      	adds	r7, #12
 800421c:	46bd      	mov	sp, r7
 800421e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004222:	4770      	bx	lr

08004224 <_ZN8touchgfx10Transition10invalidateEv>:
    /**
     * Invalidates the screen when starting the Transition. Default is
     * to invalidate the whole screen. Subclasses can do partial
     * invalidation.
     */
    virtual void invalidate()
 8004224:	b580      	push	{r7, lr}
 8004226:	b082      	sub	sp, #8
 8004228:	af00      	add	r7, sp, #0
 800422a:	6078      	str	r0, [r7, #4]
    {
        Application::getInstance()->draw();
 800422c:	f017 fa14 	bl	801b658 <_ZN8touchgfx11Application11getInstanceEv>
 8004230:	4603      	mov	r3, r0
 8004232:	681a      	ldr	r2, [r3, #0]
 8004234:	3230      	adds	r2, #48	@ 0x30
 8004236:	6812      	ldr	r2, [r2, #0]
 8004238:	4618      	mov	r0, r3
 800423a:	4790      	blx	r2
    }
 800423c:	bf00      	nop
 800423e:	3708      	adds	r7, #8
 8004240:	46bd      	mov	sp, r7
 8004242:	bd80      	pop	{r7, pc}

08004244 <_ZN8touchgfx10Transition18setScreenContainerERNS_9ContainerE>:
     * Sets the Screen Container. Is used by Screen to enable the transition to access the
     * Container.
     *
     * @param [in] cont The Container the transition should have access to.
     */
    virtual void setScreenContainer(Container& cont)
 8004244:	b480      	push	{r7}
 8004246:	b083      	sub	sp, #12
 8004248:	af00      	add	r7, sp, #0
 800424a:	6078      	str	r0, [r7, #4]
 800424c:	6039      	str	r1, [r7, #0]
    {
        screenContainer = &cont;
 800424e:	687b      	ldr	r3, [r7, #4]
 8004250:	683a      	ldr	r2, [r7, #0]
 8004252:	605a      	str	r2, [r3, #4]
    }
 8004254:	bf00      	nop
 8004256:	370c      	adds	r7, #12
 8004258:	46bd      	mov	sp, r7
 800425a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800425e:	4770      	bx	lr

08004260 <_ZN8touchgfx14MVPApplicationC1Ev>:
    MVPApplication()
 8004260:	b580      	push	{r7, lr}
 8004262:	b082      	sub	sp, #8
 8004264:	af00      	add	r7, sp, #0
 8004266:	6078      	str	r0, [r7, #4]
          pendingScreenTransitionCallback(0)
 8004268:	687b      	ldr	r3, [r7, #4]
 800426a:	4618      	mov	r0, r3
 800426c:	f017 fa5e 	bl	801b72c <_ZN8touchgfx11ApplicationC1Ev>
 8004270:	4a09      	ldr	r2, [pc, #36]	@ (8004298 <_ZN8touchgfx14MVPApplicationC1Ev+0x38>)
 8004272:	687b      	ldr	r3, [r7, #4]
 8004274:	601a      	str	r2, [r3, #0]
        : currentPresenter(0),
 8004276:	687b      	ldr	r3, [r7, #4]
 8004278:	2200      	movs	r2, #0
 800427a:	f8c3 2138 	str.w	r2, [r3, #312]	@ 0x138
          pendingScreenTransitionCallback(0)
 800427e:	687b      	ldr	r3, [r7, #4]
 8004280:	2200      	movs	r2, #0
 8004282:	f8c3 213c 	str.w	r2, [r3, #316]	@ 0x13c
        instance = this;
 8004286:	687b      	ldr	r3, [r7, #4]
 8004288:	4a04      	ldr	r2, [pc, #16]	@ (800429c <_ZN8touchgfx14MVPApplicationC1Ev+0x3c>)
 800428a:	6013      	str	r3, [r2, #0]
    }
 800428c:	687b      	ldr	r3, [r7, #4]
 800428e:	4618      	mov	r0, r3
 8004290:	3708      	adds	r7, #8
 8004292:	46bd      	mov	sp, r7
 8004294:	bd80      	pop	{r7, pc}
 8004296:	bf00      	nop
 8004298:	0802ca68 	.word	0x0802ca68
 800429c:	2400b8cc 	.word	0x2400b8cc

080042a0 <_ZN5Model4bindEP13ModelListener>:

    /**
     * Sets the modelListener to point to the currently active presenter. Called automatically
     * when switching screen.
     */
    void bind(ModelListener* listener)
 80042a0:	b480      	push	{r7}
 80042a2:	b083      	sub	sp, #12
 80042a4:	af00      	add	r7, sp, #0
 80042a6:	6078      	str	r0, [r7, #4]
 80042a8:	6039      	str	r1, [r7, #0]
    {
        modelListener = listener;
 80042aa:	687b      	ldr	r3, [r7, #4]
 80042ac:	683a      	ldr	r2, [r7, #0]
 80042ae:	601a      	str	r2, [r3, #0]
    }
 80042b0:	bf00      	nop
 80042b2:	370c      	adds	r7, #12
 80042b4:	46bd      	mov	sp, r7
 80042b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042ba:	4770      	bx	lr

080042bc <_ZN8touchgfx12NoTransition15handleTickEventEv>:
 */
class NoTransition : public Transition
{
public:
    /** Indicates that the transition is done after the first tick. */
    virtual void handleTickEvent()
 80042bc:	b480      	push	{r7}
 80042be:	b083      	sub	sp, #12
 80042c0:	af00      	add	r7, sp, #0
 80042c2:	6078      	str	r0, [r7, #4]
    {
        done = true;
 80042c4:	687b      	ldr	r3, [r7, #4]
 80042c6:	2201      	movs	r2, #1
 80042c8:	721a      	strb	r2, [r3, #8]
    }
 80042ca:	bf00      	nop
 80042cc:	370c      	adds	r7, #12
 80042ce:	46bd      	mov	sp, r7
 80042d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042d4:	4770      	bx	lr

080042d6 <_ZN8touchgfx6Widget12getLastChildEssPPNS_8DrawableE>:
     *
     * @param       x    Not used since this Widget is the only "child".
     * @param       y    Not used since this Widget is the only "child".
     * @param [out] last Result, the address of the actual instance of the Widget.
     */
    virtual void getLastChild(int16_t x, int16_t y, Drawable** last)
 80042d6:	b580      	push	{r7, lr}
 80042d8:	b084      	sub	sp, #16
 80042da:	af00      	add	r7, sp, #0
 80042dc:	60f8      	str	r0, [r7, #12]
 80042de:	607b      	str	r3, [r7, #4]
 80042e0:	460b      	mov	r3, r1
 80042e2:	817b      	strh	r3, [r7, #10]
 80042e4:	4613      	mov	r3, r2
 80042e6:	813b      	strh	r3, [r7, #8]
    {
        (void)x;
        (void)y;
        if (isVisible() && isTouchable())
 80042e8:	68fb      	ldr	r3, [r7, #12]
 80042ea:	4618      	mov	r0, r3
 80042ec:	f7ff fec3 	bl	8004076 <_ZNK8touchgfx8Drawable9isVisibleEv>
 80042f0:	4603      	mov	r3, r0
 80042f2:	2b00      	cmp	r3, #0
 80042f4:	d008      	beq.n	8004308 <_ZN8touchgfx6Widget12getLastChildEssPPNS_8DrawableE+0x32>
 80042f6:	68fb      	ldr	r3, [r7, #12]
 80042f8:	4618      	mov	r0, r3
 80042fa:	f7ff fec9 	bl	8004090 <_ZNK8touchgfx8Drawable11isTouchableEv>
 80042fe:	4603      	mov	r3, r0
 8004300:	2b00      	cmp	r3, #0
 8004302:	d001      	beq.n	8004308 <_ZN8touchgfx6Widget12getLastChildEssPPNS_8DrawableE+0x32>
 8004304:	2301      	movs	r3, #1
 8004306:	e000      	b.n	800430a <_ZN8touchgfx6Widget12getLastChildEssPPNS_8DrawableE+0x34>
 8004308:	2300      	movs	r3, #0
 800430a:	2b00      	cmp	r3, #0
 800430c:	d002      	beq.n	8004314 <_ZN8touchgfx6Widget12getLastChildEssPPNS_8DrawableE+0x3e>
        {
            *last = this;
 800430e:	68fa      	ldr	r2, [r7, #12]
 8004310:	687b      	ldr	r3, [r7, #4]
 8004312:	601a      	str	r2, [r3, #0]
        }
    }
 8004314:	bf00      	nop
 8004316:	3710      	adds	r7, #16
 8004318:	46bd      	mov	sp, r7
 800431a:	bd80      	pop	{r7, pc}

0800431c <_ZN13ModelListener4bindEP5Model>:

    /**
     * Sets the model pointer to point to the Model object. Called automatically
     * when switching screen.
     */
    void bind(Model* m)
 800431c:	b480      	push	{r7}
 800431e:	b083      	sub	sp, #12
 8004320:	af00      	add	r7, sp, #0
 8004322:	6078      	str	r0, [r7, #4]
 8004324:	6039      	str	r1, [r7, #0]
    {
        model = m;
 8004326:	687b      	ldr	r3, [r7, #4]
 8004328:	683a      	ldr	r2, [r7, #0]
 800432a:	605a      	str	r2, [r3, #4]
    }
 800432c:	bf00      	nop
 800432e:	370c      	adds	r7, #12
 8004330:	46bd      	mov	sp, r7
 8004332:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004336:	4770      	bx	lr

08004338 <_ZN8touchgfx6WidgetC1Ev>:
class Widget : public Drawable
 8004338:	b580      	push	{r7, lr}
 800433a:	b082      	sub	sp, #8
 800433c:	af00      	add	r7, sp, #0
 800433e:	6078      	str	r0, [r7, #4]
 8004340:	687b      	ldr	r3, [r7, #4]
 8004342:	4618      	mov	r0, r3
 8004344:	f7ff fd48 	bl	8003dd8 <_ZN8touchgfx8DrawableC1Ev>
 8004348:	4a03      	ldr	r2, [pc, #12]	@ (8004358 <_ZN8touchgfx6WidgetC1Ev+0x20>)
 800434a:	687b      	ldr	r3, [r7, #4]
 800434c:	601a      	str	r2, [r3, #0]
 800434e:	687b      	ldr	r3, [r7, #4]
 8004350:	4618      	mov	r0, r3
 8004352:	3708      	adds	r7, #8
 8004354:	46bd      	mov	sp, r7
 8004356:	bd80      	pop	{r7, pc}
 8004358:	0802ce2c 	.word	0x0802ce2c

0800435c <_ZN8touchgfx6WidgetD1Ev>:
 800435c:	b580      	push	{r7, lr}
 800435e:	b082      	sub	sp, #8
 8004360:	af00      	add	r7, sp, #0
 8004362:	6078      	str	r0, [r7, #4]
 8004364:	4a05      	ldr	r2, [pc, #20]	@ (800437c <_ZN8touchgfx6WidgetD1Ev+0x20>)
 8004366:	687b      	ldr	r3, [r7, #4]
 8004368:	601a      	str	r2, [r3, #0]
 800436a:	687b      	ldr	r3, [r7, #4]
 800436c:	4618      	mov	r0, r3
 800436e:	f7ff fd63 	bl	8003e38 <_ZN8touchgfx8DrawableD1Ev>
 8004372:	687b      	ldr	r3, [r7, #4]
 8004374:	4618      	mov	r0, r3
 8004376:	3708      	adds	r7, #8
 8004378:	46bd      	mov	sp, r7
 800437a:	bd80      	pop	{r7, pc}
 800437c:	0802ce2c 	.word	0x0802ce2c

08004380 <_ZN8touchgfx6WidgetD0Ev>:
 8004380:	b580      	push	{r7, lr}
 8004382:	b082      	sub	sp, #8
 8004384:	af00      	add	r7, sp, #0
 8004386:	6078      	str	r0, [r7, #4]
 8004388:	6878      	ldr	r0, [r7, #4]
 800438a:	f7ff ffe7 	bl	800435c <_ZN8touchgfx6WidgetD1Ev>
 800438e:	2128      	movs	r1, #40	@ 0x28
 8004390:	6878      	ldr	r0, [r7, #4]
 8004392:	f026 faa0 	bl	802a8d6 <_ZdlPvj>
 8004396:	687b      	ldr	r3, [r7, #4]
 8004398:	4618      	mov	r0, r3
 800439a:	3708      	adds	r7, #8
 800439c:	46bd      	mov	sp, r7
 800439e:	bd80      	pop	{r7, pc}

080043a0 <_ZN23FrontendApplicationBaseC1ER5ModelR12FrontendHeap>:
#include <gui/localize_anomaly_screen/Localize_AnomalyView.hpp>
#include <gui/localize_anomaly_screen/Localize_AnomalyPresenter.hpp>

using namespace touchgfx;

FrontendApplicationBase::FrontendApplicationBase(Model& m, FrontendHeap& heap)
 80043a0:	b580      	push	{r7, lr}
 80043a2:	b084      	sub	sp, #16
 80043a4:	af00      	add	r7, sp, #0
 80043a6:	60f8      	str	r0, [r7, #12]
 80043a8:	60b9      	str	r1, [r7, #8]
 80043aa:	607a      	str	r2, [r7, #4]
    : touchgfx::MVPApplication(),
      transitionCallback(),
      frontendHeap(heap),
      model(m)
 80043ac:	68fb      	ldr	r3, [r7, #12]
 80043ae:	4618      	mov	r0, r3
 80043b0:	f7ff ff56 	bl	8004260 <_ZN8touchgfx14MVPApplicationC1Ev>
 80043b4:	4a13      	ldr	r2, [pc, #76]	@ (8004404 <_ZN23FrontendApplicationBaseC1ER5ModelR12FrontendHeap+0x64>)
 80043b6:	68fb      	ldr	r3, [r7, #12]
 80043b8:	601a      	str	r2, [r3, #0]
      transitionCallback(),
 80043ba:	68fb      	ldr	r3, [r7, #12]
 80043bc:	f503 73a0 	add.w	r3, r3, #320	@ 0x140
 80043c0:	4618      	mov	r0, r3
 80043c2:	f000 f92b 	bl	800461c <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvEC1Ev>
      frontendHeap(heap),
 80043c6:	68fb      	ldr	r3, [r7, #12]
 80043c8:	687a      	ldr	r2, [r7, #4]
 80043ca:	f8c3 2150 	str.w	r2, [r3, #336]	@ 0x150
      model(m)
 80043ce:	68fb      	ldr	r3, [r7, #12]
 80043d0:	68ba      	ldr	r2, [r7, #8]
 80043d2:	f8c3 2154 	str.w	r2, [r3, #340]	@ 0x154
{
    touchgfx::HAL::getInstance()->setDisplayOrientation(touchgfx::ORIENTATION_LANDSCAPE);
 80043d6:	f7fd fea5 	bl	8002124 <_ZN8touchgfx3HAL11getInstanceEv>
 80043da:	4603      	mov	r3, r0
 80043dc:	681a      	ldr	r2, [r3, #0]
 80043de:	3208      	adds	r2, #8
 80043e0:	6812      	ldr	r2, [r2, #0]
 80043e2:	2100      	movs	r1, #0
 80043e4:	4618      	mov	r0, r3
 80043e6:	4790      	blx	r2
    touchgfx::Texts::setLanguage(GB);
 80043e8:	2000      	movs	r0, #0
 80043ea:	f005 fd6d 	bl	8009ec8 <_ZN8touchgfx5Texts11setLanguageEt>
    reinterpret_cast<touchgfx::LCD16bpp&>(touchgfx::HAL::lcd()).enableTextureMapperAll();
 80043ee:	f7ff fea9 	bl	8004144 <_ZN8touchgfx3HAL3lcdEv>
 80043f2:	4603      	mov	r3, r0
 80043f4:	4618      	mov	r0, r3
 80043f6:	f01f f92a 	bl	802364e <_ZN8touchgfx8LCD16bpp22enableTextureMapperAllEv>
}
 80043fa:	68fb      	ldr	r3, [r7, #12]
 80043fc:	4618      	mov	r0, r3
 80043fe:	3710      	adds	r7, #16
 8004400:	46bd      	mov	sp, r7
 8004402:	bd80      	pop	{r7, pc}
 8004404:	0802ca0c 	.word	0x0802ca0c

08004408 <_ZN8touchgfx15GenericCallbackIvvvEaSERKS1_>:
class GenericCallback<void>
 8004408:	b480      	push	{r7}
 800440a:	b083      	sub	sp, #12
 800440c:	af00      	add	r7, sp, #0
 800440e:	6078      	str	r0, [r7, #4]
 8004410:	6039      	str	r1, [r7, #0]
 8004412:	687b      	ldr	r3, [r7, #4]
 8004414:	4618      	mov	r0, r3
 8004416:	370c      	adds	r7, #12
 8004418:	46bd      	mov	sp, r7
 800441a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800441e:	4770      	bx	lr

08004420 <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvEaSEOS2_>:
struct Callback<dest_type, void, void, void> : public GenericCallback<>
 8004420:	b580      	push	{r7, lr}
 8004422:	b082      	sub	sp, #8
 8004424:	af00      	add	r7, sp, #0
 8004426:	6078      	str	r0, [r7, #4]
 8004428:	6039      	str	r1, [r7, #0]
 800442a:	687b      	ldr	r3, [r7, #4]
 800442c:	683a      	ldr	r2, [r7, #0]
 800442e:	4611      	mov	r1, r2
 8004430:	4618      	mov	r0, r3
 8004432:	f7ff ffe9 	bl	8004408 <_ZN8touchgfx15GenericCallbackIvvvEaSERKS1_>
 8004436:	683b      	ldr	r3, [r7, #0]
 8004438:	685a      	ldr	r2, [r3, #4]
 800443a:	687b      	ldr	r3, [r7, #4]
 800443c:	605a      	str	r2, [r3, #4]
 800443e:	687b      	ldr	r3, [r7, #4]
 8004440:	683a      	ldr	r2, [r7, #0]
 8004442:	3308      	adds	r3, #8
 8004444:	3208      	adds	r2, #8
 8004446:	e892 0003 	ldmia.w	r2, {r0, r1}
 800444a:	e883 0003 	stmia.w	r3, {r0, r1}
 800444e:	687b      	ldr	r3, [r7, #4]
 8004450:	4618      	mov	r0, r3
 8004452:	3708      	adds	r7, #8
 8004454:	46bd      	mov	sp, r7
 8004456:	bd80      	pop	{r7, pc}

08004458 <_ZN23FrontendApplicationBase26gotoMainScreenNoTransitionEv>:
 */

// Main

void FrontendApplicationBase::gotoMainScreenNoTransition()
{
 8004458:	b590      	push	{r4, r7, lr}
 800445a:	b089      	sub	sp, #36	@ 0x24
 800445c:	af00      	add	r7, sp, #0
 800445e:	6078      	str	r0, [r7, #4]
    transitionCallback = touchgfx::Callback<FrontendApplicationBase>(this, &FrontendApplication::gotoMainScreenNoTransitionImpl);
 8004460:	687b      	ldr	r3, [r7, #4]
 8004462:	f503 74a0 	add.w	r4, r3, #320	@ 0x140
 8004466:	4b10      	ldr	r3, [pc, #64]	@ (80044a8 <_ZN23FrontendApplicationBase26gotoMainScreenNoTransitionEv+0x50>)
 8004468:	61bb      	str	r3, [r7, #24]
 800446a:	2300      	movs	r3, #0
 800446c:	61fb      	str	r3, [r7, #28]
 800446e:	f107 0008 	add.w	r0, r7, #8
 8004472:	f107 0318 	add.w	r3, r7, #24
 8004476:	cb0c      	ldmia	r3, {r2, r3}
 8004478:	6879      	ldr	r1, [r7, #4]
 800447a:	f000 f8eb 	bl	8004654 <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvEC1EPS1_MS1_FvvE>
 800447e:	f107 0308 	add.w	r3, r7, #8
 8004482:	4619      	mov	r1, r3
 8004484:	4620      	mov	r0, r4
 8004486:	f7ff ffcb 	bl	8004420 <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvEaSEOS2_>
 800448a:	f107 0308 	add.w	r3, r7, #8
 800448e:	4618      	mov	r0, r3
 8004490:	f7fe ff72 	bl	8003378 <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvED1Ev>
    pendingScreenTransitionCallback = &transitionCallback;
 8004494:	687b      	ldr	r3, [r7, #4]
 8004496:	f503 72a0 	add.w	r2, r3, #320	@ 0x140
 800449a:	687b      	ldr	r3, [r7, #4]
 800449c:	f8c3 213c 	str.w	r2, [r3, #316]	@ 0x13c
}
 80044a0:	bf00      	nop
 80044a2:	3724      	adds	r7, #36	@ 0x24
 80044a4:	46bd      	mov	sp, r7
 80044a6:	bd90      	pop	{r4, r7, pc}
 80044a8:	080044ad 	.word	0x080044ad

080044ac <_ZN23FrontendApplicationBase30gotoMainScreenNoTransitionImplEv>:

void FrontendApplicationBase::gotoMainScreenNoTransitionImpl()
{
 80044ac:	b580      	push	{r7, lr}
 80044ae:	b084      	sub	sp, #16
 80044b0:	af02      	add	r7, sp, #8
 80044b2:	6078      	str	r0, [r7, #4]
    touchgfx::makeTransition<MainView, MainPresenter, touchgfx::NoTransition, Model >(&currentScreen, &currentPresenter, frontendHeap, &currentTransition, &model);
 80044b4:	687b      	ldr	r3, [r7, #4]
 80044b6:	f503 719c 	add.w	r1, r3, #312	@ 0x138
 80044ba:	687b      	ldr	r3, [r7, #4]
 80044bc:	f8d3 3150 	ldr.w	r3, [r3, #336]	@ 0x150
 80044c0:	461a      	mov	r2, r3
 80044c2:	687b      	ldr	r3, [r7, #4]
 80044c4:	f8d3 3154 	ldr.w	r3, [r3, #340]	@ 0x154
 80044c8:	9300      	str	r3, [sp, #0]
 80044ca:	4b04      	ldr	r3, [pc, #16]	@ (80044dc <_ZN23FrontendApplicationBase30gotoMainScreenNoTransitionImplEv+0x30>)
 80044cc:	4804      	ldr	r0, [pc, #16]	@ (80044e0 <_ZN23FrontendApplicationBase30gotoMainScreenNoTransitionImplEv+0x34>)
 80044ce:	f000 f8f3 	bl	80046b8 <_ZN8touchgfx14makeTransitionI8MainView13MainPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_>
}
 80044d2:	bf00      	nop
 80044d4:	3708      	adds	r7, #8
 80044d6:	46bd      	mov	sp, r7
 80044d8:	bd80      	pop	{r7, pc}
 80044da:	bf00      	nop
 80044dc:	2400b8c0 	.word	0x2400b8c0
 80044e0:	2400b8bc 	.word	0x2400b8bc

080044e4 <_ZN23FrontendApplicationBase33gotoMainScreenWipeTransitionSouthEv>:

void FrontendApplicationBase::gotoMainScreenWipeTransitionSouth()
{
 80044e4:	b590      	push	{r4, r7, lr}
 80044e6:	b089      	sub	sp, #36	@ 0x24
 80044e8:	af00      	add	r7, sp, #0
 80044ea:	6078      	str	r0, [r7, #4]
    transitionCallback = touchgfx::Callback<FrontendApplicationBase>(this, &FrontendApplication::gotoMainScreenWipeTransitionSouthImpl);
 80044ec:	687b      	ldr	r3, [r7, #4]
 80044ee:	f503 74a0 	add.w	r4, r3, #320	@ 0x140
 80044f2:	4b10      	ldr	r3, [pc, #64]	@ (8004534 <_ZN23FrontendApplicationBase33gotoMainScreenWipeTransitionSouthEv+0x50>)
 80044f4:	61bb      	str	r3, [r7, #24]
 80044f6:	2300      	movs	r3, #0
 80044f8:	61fb      	str	r3, [r7, #28]
 80044fa:	f107 0008 	add.w	r0, r7, #8
 80044fe:	f107 0318 	add.w	r3, r7, #24
 8004502:	cb0c      	ldmia	r3, {r2, r3}
 8004504:	6879      	ldr	r1, [r7, #4]
 8004506:	f000 f8a5 	bl	8004654 <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvEC1EPS1_MS1_FvvE>
 800450a:	f107 0308 	add.w	r3, r7, #8
 800450e:	4619      	mov	r1, r3
 8004510:	4620      	mov	r0, r4
 8004512:	f7ff ff85 	bl	8004420 <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvEaSEOS2_>
 8004516:	f107 0308 	add.w	r3, r7, #8
 800451a:	4618      	mov	r0, r3
 800451c:	f7fe ff2c 	bl	8003378 <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvED1Ev>
    pendingScreenTransitionCallback = &transitionCallback;
 8004520:	687b      	ldr	r3, [r7, #4]
 8004522:	f503 72a0 	add.w	r2, r3, #320	@ 0x140
 8004526:	687b      	ldr	r3, [r7, #4]
 8004528:	f8c3 213c 	str.w	r2, [r3, #316]	@ 0x13c
}
 800452c:	bf00      	nop
 800452e:	3724      	adds	r7, #36	@ 0x24
 8004530:	46bd      	mov	sp, r7
 8004532:	bd90      	pop	{r4, r7, pc}
 8004534:	08004539 	.word	0x08004539

08004538 <_ZN23FrontendApplicationBase37gotoMainScreenWipeTransitionSouthImplEv>:

void FrontendApplicationBase::gotoMainScreenWipeTransitionSouthImpl()
{
 8004538:	b580      	push	{r7, lr}
 800453a:	b084      	sub	sp, #16
 800453c:	af02      	add	r7, sp, #8
 800453e:	6078      	str	r0, [r7, #4]
    touchgfx::makeTransition<MainView, MainPresenter, touchgfx::WipeTransition<SOUTH>, Model >(&currentScreen, &currentPresenter, frontendHeap, &currentTransition, &model);
 8004540:	687b      	ldr	r3, [r7, #4]
 8004542:	f503 719c 	add.w	r1, r3, #312	@ 0x138
 8004546:	687b      	ldr	r3, [r7, #4]
 8004548:	f8d3 3150 	ldr.w	r3, [r3, #336]	@ 0x150
 800454c:	461a      	mov	r2, r3
 800454e:	687b      	ldr	r3, [r7, #4]
 8004550:	f8d3 3154 	ldr.w	r3, [r3, #340]	@ 0x154
 8004554:	9300      	str	r3, [sp, #0]
 8004556:	4b04      	ldr	r3, [pc, #16]	@ (8004568 <_ZN23FrontendApplicationBase37gotoMainScreenWipeTransitionSouthImplEv+0x30>)
 8004558:	4804      	ldr	r0, [pc, #16]	@ (800456c <_ZN23FrontendApplicationBase37gotoMainScreenWipeTransitionSouthImplEv+0x34>)
 800455a:	f000 f9c7 	bl	80048ec <_ZN8touchgfx14makeTransitionI8MainView13MainPresenterNS_14WipeTransitionILNS_9DirectionE1EEE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_>
}
 800455e:	bf00      	nop
 8004560:	3708      	adds	r7, #8
 8004562:	46bd      	mov	sp, r7
 8004564:	bd80      	pop	{r7, pc}
 8004566:	bf00      	nop
 8004568:	2400b8c0 	.word	0x2400b8c0
 800456c:	2400b8bc 	.word	0x2400b8bc

08004570 <_ZN23FrontendApplicationBase45gotoLocalize_AnomalyScreenWipeTransitionNorthEv>:

// Localize_Anomaly

void FrontendApplicationBase::gotoLocalize_AnomalyScreenWipeTransitionNorth()
{
 8004570:	b590      	push	{r4, r7, lr}
 8004572:	b089      	sub	sp, #36	@ 0x24
 8004574:	af00      	add	r7, sp, #0
 8004576:	6078      	str	r0, [r7, #4]
    transitionCallback = touchgfx::Callback<FrontendApplicationBase>(this, &FrontendApplication::gotoLocalize_AnomalyScreenWipeTransitionNorthImpl);
 8004578:	687b      	ldr	r3, [r7, #4]
 800457a:	f503 74a0 	add.w	r4, r3, #320	@ 0x140
 800457e:	4b10      	ldr	r3, [pc, #64]	@ (80045c0 <_ZN23FrontendApplicationBase45gotoLocalize_AnomalyScreenWipeTransitionNorthEv+0x50>)
 8004580:	61bb      	str	r3, [r7, #24]
 8004582:	2300      	movs	r3, #0
 8004584:	61fb      	str	r3, [r7, #28]
 8004586:	f107 0008 	add.w	r0, r7, #8
 800458a:	f107 0318 	add.w	r3, r7, #24
 800458e:	cb0c      	ldmia	r3, {r2, r3}
 8004590:	6879      	ldr	r1, [r7, #4]
 8004592:	f000 f85f 	bl	8004654 <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvEC1EPS1_MS1_FvvE>
 8004596:	f107 0308 	add.w	r3, r7, #8
 800459a:	4619      	mov	r1, r3
 800459c:	4620      	mov	r0, r4
 800459e:	f7ff ff3f 	bl	8004420 <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvEaSEOS2_>
 80045a2:	f107 0308 	add.w	r3, r7, #8
 80045a6:	4618      	mov	r0, r3
 80045a8:	f7fe fee6 	bl	8003378 <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvED1Ev>
    pendingScreenTransitionCallback = &transitionCallback;
 80045ac:	687b      	ldr	r3, [r7, #4]
 80045ae:	f503 72a0 	add.w	r2, r3, #320	@ 0x140
 80045b2:	687b      	ldr	r3, [r7, #4]
 80045b4:	f8c3 213c 	str.w	r2, [r3, #316]	@ 0x13c
}
 80045b8:	bf00      	nop
 80045ba:	3724      	adds	r7, #36	@ 0x24
 80045bc:	46bd      	mov	sp, r7
 80045be:	bd90      	pop	{r4, r7, pc}
 80045c0:	080045c5 	.word	0x080045c5

080045c4 <_ZN23FrontendApplicationBase49gotoLocalize_AnomalyScreenWipeTransitionNorthImplEv>:

void FrontendApplicationBase::gotoLocalize_AnomalyScreenWipeTransitionNorthImpl()
{
 80045c4:	b580      	push	{r7, lr}
 80045c6:	b084      	sub	sp, #16
 80045c8:	af02      	add	r7, sp, #8
 80045ca:	6078      	str	r0, [r7, #4]
    touchgfx::makeTransition<Localize_AnomalyView, Localize_AnomalyPresenter, touchgfx::WipeTransition<NORTH>, Model >(&currentScreen, &currentPresenter, frontendHeap, &currentTransition, &model);
 80045cc:	687b      	ldr	r3, [r7, #4]
 80045ce:	f503 719c 	add.w	r1, r3, #312	@ 0x138
 80045d2:	687b      	ldr	r3, [r7, #4]
 80045d4:	f8d3 3150 	ldr.w	r3, [r3, #336]	@ 0x150
 80045d8:	461a      	mov	r2, r3
 80045da:	687b      	ldr	r3, [r7, #4]
 80045dc:	f8d3 3154 	ldr.w	r3, [r3, #340]	@ 0x154
 80045e0:	9300      	str	r3, [sp, #0]
 80045e2:	4b04      	ldr	r3, [pc, #16]	@ (80045f4 <_ZN23FrontendApplicationBase49gotoLocalize_AnomalyScreenWipeTransitionNorthImplEv+0x30>)
 80045e4:	4804      	ldr	r0, [pc, #16]	@ (80045f8 <_ZN23FrontendApplicationBase49gotoLocalize_AnomalyScreenWipeTransitionNorthImplEv+0x34>)
 80045e6:	f000 fa9d 	bl	8004b24 <_ZN8touchgfx14makeTransitionI20Localize_AnomalyView25Localize_AnomalyPresenterNS_14WipeTransitionILNS_9DirectionE0EEE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_>
}
 80045ea:	bf00      	nop
 80045ec:	3708      	adds	r7, #8
 80045ee:	46bd      	mov	sp, r7
 80045f0:	bd80      	pop	{r7, pc}
 80045f2:	bf00      	nop
 80045f4:	2400b8c0 	.word	0x2400b8c0
 80045f8:	2400b8bc 	.word	0x2400b8bc

080045fc <_ZN8touchgfx15GenericCallbackIvvvEC1Ev>:
class GenericCallback<void>
 80045fc:	b480      	push	{r7}
 80045fe:	b083      	sub	sp, #12
 8004600:	af00      	add	r7, sp, #0
 8004602:	6078      	str	r0, [r7, #4]
 8004604:	4a04      	ldr	r2, [pc, #16]	@ (8004618 <_ZN8touchgfx15GenericCallbackIvvvEC1Ev+0x1c>)
 8004606:	687b      	ldr	r3, [r7, #4]
 8004608:	601a      	str	r2, [r3, #0]
 800460a:	687b      	ldr	r3, [r7, #4]
 800460c:	4618      	mov	r0, r3
 800460e:	370c      	adds	r7, #12
 8004610:	46bd      	mov	sp, r7
 8004612:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004616:	4770      	bx	lr
 8004618:	0802caac 	.word	0x0802caac

0800461c <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvEC1Ev>:
    Callback()
 800461c:	b580      	push	{r7, lr}
 800461e:	b082      	sub	sp, #8
 8004620:	af00      	add	r7, sp, #0
 8004622:	6078      	str	r0, [r7, #4]
        : pobject(0), pmemfun_0(0)
 8004624:	687b      	ldr	r3, [r7, #4]
 8004626:	4618      	mov	r0, r3
 8004628:	f7ff ffe8 	bl	80045fc <_ZN8touchgfx15GenericCallbackIvvvEC1Ev>
 800462c:	4a08      	ldr	r2, [pc, #32]	@ (8004650 <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvEC1Ev+0x34>)
 800462e:	687b      	ldr	r3, [r7, #4]
 8004630:	601a      	str	r2, [r3, #0]
 8004632:	687b      	ldr	r3, [r7, #4]
 8004634:	2200      	movs	r2, #0
 8004636:	605a      	str	r2, [r3, #4]
 8004638:	687b      	ldr	r3, [r7, #4]
 800463a:	2200      	movs	r2, #0
 800463c:	609a      	str	r2, [r3, #8]
 800463e:	687b      	ldr	r3, [r7, #4]
 8004640:	2200      	movs	r2, #0
 8004642:	60da      	str	r2, [r3, #12]
    }
 8004644:	687b      	ldr	r3, [r7, #4]
 8004646:	4618      	mov	r0, r3
 8004648:	3708      	adds	r7, #8
 800464a:	46bd      	mov	sp, r7
 800464c:	bd80      	pop	{r7, pc}
 800464e:	bf00      	nop
 8004650:	0802ca50 	.word	0x0802ca50

08004654 <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvEC1EPS1_MS1_FvvE>:
    Callback(dest_type* pobject, void (dest_type::*pmemfun_0)())
 8004654:	b580      	push	{r7, lr}
 8004656:	b084      	sub	sp, #16
 8004658:	af00      	add	r7, sp, #0
 800465a:	60f8      	str	r0, [r7, #12]
 800465c:	60b9      	str	r1, [r7, #8]
 800465e:	4639      	mov	r1, r7
 8004660:	e881 000c 	stmia.w	r1, {r2, r3}
        : pobject(pobject), pmemfun_0(pmemfun_0)
 8004664:	68fb      	ldr	r3, [r7, #12]
 8004666:	4618      	mov	r0, r3
 8004668:	f7ff ffc8 	bl	80045fc <_ZN8touchgfx15GenericCallbackIvvvEC1Ev>
 800466c:	4a08      	ldr	r2, [pc, #32]	@ (8004690 <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvEC1EPS1_MS1_FvvE+0x3c>)
 800466e:	68fb      	ldr	r3, [r7, #12]
 8004670:	601a      	str	r2, [r3, #0]
 8004672:	68fb      	ldr	r3, [r7, #12]
 8004674:	68ba      	ldr	r2, [r7, #8]
 8004676:	605a      	str	r2, [r3, #4]
 8004678:	68fb      	ldr	r3, [r7, #12]
 800467a:	3308      	adds	r3, #8
 800467c:	463a      	mov	r2, r7
 800467e:	e892 0003 	ldmia.w	r2, {r0, r1}
 8004682:	e883 0003 	stmia.w	r3, {r0, r1}
    }
 8004686:	68fb      	ldr	r3, [r7, #12]
 8004688:	4618      	mov	r0, r3
 800468a:	3710      	adds	r7, #16
 800468c:	46bd      	mov	sp, r7
 800468e:	bd80      	pop	{r7, pc}
 8004690:	0802ca50 	.word	0x0802ca50

08004694 <_ZN8touchgfx12NoTransitionC1Ev>:
class NoTransition : public Transition
 8004694:	b580      	push	{r7, lr}
 8004696:	b082      	sub	sp, #8
 8004698:	af00      	add	r7, sp, #0
 800469a:	6078      	str	r0, [r7, #4]
 800469c:	687b      	ldr	r3, [r7, #4]
 800469e:	4618      	mov	r0, r3
 80046a0:	f7ff fd6c 	bl	800417c <_ZN8touchgfx10TransitionC1Ev>
 80046a4:	4a03      	ldr	r2, [pc, #12]	@ (80046b4 <_ZN8touchgfx12NoTransitionC1Ev+0x20>)
 80046a6:	687b      	ldr	r3, [r7, #4]
 80046a8:	601a      	str	r2, [r3, #0]
 80046aa:	687b      	ldr	r3, [r7, #4]
 80046ac:	4618      	mov	r0, r3
 80046ae:	3708      	adds	r7, #8
 80046b0:	46bd      	mov	sp, r7
 80046b2:	bd80      	pop	{r7, pc}
 80046b4:	0802ce90 	.word	0x0802ce90

080046b8 <_ZN8touchgfx14makeTransitionI8MainView13MainPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_>:
 *
 * @return Pointer to the new Presenter of the requested type. Incidentally it will be the same
 *         value as the old presenter due to memory reuse.
 */
template <class ScreenType, class PresenterType, class TransType, class ModelType>
PresenterType* makeTransition(Screen** currentScreen, Presenter** currentPresenter, MVPHeap& heap, Transition** currentTrans, ModelType* model)
 80046b8:	b590      	push	{r4, r7, lr}
 80046ba:	b08f      	sub	sp, #60	@ 0x3c
 80046bc:	af00      	add	r7, sp, #0
 80046be:	60f8      	str	r0, [r7, #12]
 80046c0:	60b9      	str	r1, [r7, #8]
 80046c2:	607a      	str	r2, [r7, #4]
 80046c4:	603b      	str	r3, [r7, #0]
{
    assert(sizeof(ScreenType) <= heap.screenStorage.element_size() && "View allocation error: Check that all views are added to FrontendHeap::ViewTypes");
 80046c6:	687b      	ldr	r3, [r7, #4]
 80046c8:	689a      	ldr	r2, [r3, #8]
 80046ca:	687b      	ldr	r3, [r7, #4]
 80046cc:	689b      	ldr	r3, [r3, #8]
 80046ce:	681b      	ldr	r3, [r3, #0]
 80046d0:	3320      	adds	r3, #32
 80046d2:	681b      	ldr	r3, [r3, #0]
 80046d4:	4610      	mov	r0, r2
 80046d6:	4798      	blx	r3
 80046d8:	4603      	mov	r3, r0
 80046da:	f640 3217 	movw	r2, #2839	@ 0xb17
 80046de:	4293      	cmp	r3, r2
 80046e0:	d805      	bhi.n	80046ee <_ZN8touchgfx14makeTransitionI8MainView13MainPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x36>
 80046e2:	4b7d      	ldr	r3, [pc, #500]	@ (80048d8 <_ZN8touchgfx14makeTransitionI8MainView13MainPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x220>)
 80046e4:	4a7d      	ldr	r2, [pc, #500]	@ (80048dc <_ZN8touchgfx14makeTransitionI8MainView13MainPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x224>)
 80046e6:	21a3      	movs	r1, #163	@ 0xa3
 80046e8:	487d      	ldr	r0, [pc, #500]	@ (80048e0 <_ZN8touchgfx14makeTransitionI8MainView13MainPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x228>)
 80046ea:	f026 f923 	bl	802a934 <__assert_func>
    assert(sizeof(PresenterType) <= heap.presenterStorage.element_size() && "Presenter allocation error: Check that all presenters are added to FrontendHeap::PresenterTypes");
 80046ee:	687b      	ldr	r3, [r7, #4]
 80046f0:	685a      	ldr	r2, [r3, #4]
 80046f2:	687b      	ldr	r3, [r7, #4]
 80046f4:	685b      	ldr	r3, [r3, #4]
 80046f6:	681b      	ldr	r3, [r3, #0]
 80046f8:	3320      	adds	r3, #32
 80046fa:	681b      	ldr	r3, [r3, #0]
 80046fc:	4610      	mov	r0, r2
 80046fe:	4798      	blx	r3
 8004700:	4603      	mov	r3, r0
 8004702:	2b0f      	cmp	r3, #15
 8004704:	d805      	bhi.n	8004712 <_ZN8touchgfx14makeTransitionI8MainView13MainPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x5a>
 8004706:	4b77      	ldr	r3, [pc, #476]	@ (80048e4 <_ZN8touchgfx14makeTransitionI8MainView13MainPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x22c>)
 8004708:	4a74      	ldr	r2, [pc, #464]	@ (80048dc <_ZN8touchgfx14makeTransitionI8MainView13MainPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x224>)
 800470a:	21a4      	movs	r1, #164	@ 0xa4
 800470c:	4874      	ldr	r0, [pc, #464]	@ (80048e0 <_ZN8touchgfx14makeTransitionI8MainView13MainPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x228>)
 800470e:	f026 f911 	bl	802a934 <__assert_func>
    assert(sizeof(TransType) <= heap.transitionStorage.element_size() && "Transition allocation error: Check that all transitions are added to FrontendHeap::TransitionTypes");
 8004712:	687b      	ldr	r3, [r7, #4]
 8004714:	68da      	ldr	r2, [r3, #12]
 8004716:	687b      	ldr	r3, [r7, #4]
 8004718:	68db      	ldr	r3, [r3, #12]
 800471a:	681b      	ldr	r3, [r3, #0]
 800471c:	3320      	adds	r3, #32
 800471e:	681b      	ldr	r3, [r3, #0]
 8004720:	4610      	mov	r0, r2
 8004722:	4798      	blx	r3
 8004724:	4603      	mov	r3, r0
 8004726:	2b0b      	cmp	r3, #11
 8004728:	d805      	bhi.n	8004736 <_ZN8touchgfx14makeTransitionI8MainView13MainPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x7e>
 800472a:	4b6f      	ldr	r3, [pc, #444]	@ (80048e8 <_ZN8touchgfx14makeTransitionI8MainView13MainPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x230>)
 800472c:	4a6b      	ldr	r2, [pc, #428]	@ (80048dc <_ZN8touchgfx14makeTransitionI8MainView13MainPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x224>)
 800472e:	21a5      	movs	r1, #165	@ 0xa5
 8004730:	486b      	ldr	r0, [pc, #428]	@ (80048e0 <_ZN8touchgfx14makeTransitionI8MainView13MainPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x228>)
 8004732:	f026 f8ff 	bl	802a934 <__assert_func>
 8004736:	68fb      	ldr	r3, [r7, #12]
 8004738:	62bb      	str	r3, [r7, #40]	@ 0x28
 800473a:	68bb      	ldr	r3, [r7, #8]
 800473c:	627b      	str	r3, [r7, #36]	@ 0x24
 800473e:	683b      	ldr	r3, [r7, #0]
 8004740:	623b      	str	r3, [r7, #32]
    Application::getInstance()->clearAllTimerWidgets();
 8004742:	f016 ff89 	bl	801b658 <_ZN8touchgfx11Application11getInstanceEv>
 8004746:	4603      	mov	r3, r0
 8004748:	4618      	mov	r0, r3
 800474a:	f016 ffd3 	bl	801b6f4 <_ZN8touchgfx11Application20clearAllTimerWidgetsEv>
    if (*currentTrans)
 800474e:	6a3b      	ldr	r3, [r7, #32]
 8004750:	681b      	ldr	r3, [r3, #0]
 8004752:	2b00      	cmp	r3, #0
 8004754:	d008      	beq.n	8004768 <_ZN8touchgfx14makeTransitionI8MainView13MainPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0xb0>
        (*currentTrans)->tearDown();
 8004756:	6a3b      	ldr	r3, [r7, #32]
 8004758:	681a      	ldr	r2, [r3, #0]
 800475a:	6a3b      	ldr	r3, [r7, #32]
 800475c:	681b      	ldr	r3, [r3, #0]
 800475e:	681b      	ldr	r3, [r3, #0]
 8004760:	330c      	adds	r3, #12
 8004762:	681b      	ldr	r3, [r3, #0]
 8004764:	4610      	mov	r0, r2
 8004766:	4798      	blx	r3
    if (*currentTrans)
 8004768:	6a3b      	ldr	r3, [r7, #32]
 800476a:	681b      	ldr	r3, [r3, #0]
 800476c:	2b00      	cmp	r3, #0
 800476e:	d007      	beq.n	8004780 <_ZN8touchgfx14makeTransitionI8MainView13MainPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0xc8>
        (*currentTrans)->~Transition();
 8004770:	6a3b      	ldr	r3, [r7, #32]
 8004772:	681a      	ldr	r2, [r3, #0]
 8004774:	6a3b      	ldr	r3, [r7, #32]
 8004776:	681b      	ldr	r3, [r3, #0]
 8004778:	681b      	ldr	r3, [r3, #0]
 800477a:	681b      	ldr	r3, [r3, #0]
 800477c:	4610      	mov	r0, r2
 800477e:	4798      	blx	r3
    if (*currentScreen)
 8004780:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004782:	681b      	ldr	r3, [r3, #0]
 8004784:	2b00      	cmp	r3, #0
 8004786:	d008      	beq.n	800479a <_ZN8touchgfx14makeTransitionI8MainView13MainPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0xe2>
        (*currentScreen)->tearDownScreen();
 8004788:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800478a:	681a      	ldr	r2, [r3, #0]
 800478c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800478e:	681b      	ldr	r3, [r3, #0]
 8004790:	681b      	ldr	r3, [r3, #0]
 8004792:	3314      	adds	r3, #20
 8004794:	681b      	ldr	r3, [r3, #0]
 8004796:	4610      	mov	r0, r2
 8004798:	4798      	blx	r3
    if (*currentPresenter)
 800479a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800479c:	681b      	ldr	r3, [r3, #0]
 800479e:	2b00      	cmp	r3, #0
 80047a0:	d008      	beq.n	80047b4 <_ZN8touchgfx14makeTransitionI8MainView13MainPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0xfc>
        (*currentPresenter)->deactivate();
 80047a2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80047a4:	681a      	ldr	r2, [r3, #0]
 80047a6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80047a8:	681b      	ldr	r3, [r3, #0]
 80047aa:	681b      	ldr	r3, [r3, #0]
 80047ac:	3304      	adds	r3, #4
 80047ae:	681b      	ldr	r3, [r3, #0]
 80047b0:	4610      	mov	r0, r2
 80047b2:	4798      	blx	r3
    if (*currentScreen)
 80047b4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80047b6:	681b      	ldr	r3, [r3, #0]
 80047b8:	2b00      	cmp	r3, #0
 80047ba:	d007      	beq.n	80047cc <_ZN8touchgfx14makeTransitionI8MainView13MainPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x114>
        (*currentScreen)->~Screen();
 80047bc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80047be:	681a      	ldr	r2, [r3, #0]
 80047c0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80047c2:	681b      	ldr	r3, [r3, #0]
 80047c4:	681b      	ldr	r3, [r3, #0]
 80047c6:	681b      	ldr	r3, [r3, #0]
 80047c8:	4610      	mov	r0, r2
 80047ca:	4798      	blx	r3
    if (*currentPresenter)
 80047cc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80047ce:	681b      	ldr	r3, [r3, #0]
 80047d0:	2b00      	cmp	r3, #0
 80047d2:	d008      	beq.n	80047e6 <_ZN8touchgfx14makeTransitionI8MainView13MainPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x12e>
        (*currentPresenter)->~Presenter();
 80047d4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80047d6:	681a      	ldr	r2, [r3, #0]
 80047d8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80047da:	681b      	ldr	r3, [r3, #0]
 80047dc:	681b      	ldr	r3, [r3, #0]
 80047de:	3308      	adds	r3, #8
 80047e0:	681b      	ldr	r3, [r3, #0]
 80047e2:	4610      	mov	r0, r2
 80047e4:	4798      	blx	r3
}
 80047e6:	bf00      	nop

    prepareTransition(currentScreen, currentPresenter, currentTrans);

    TransType* newTransition = new (&heap.transitionStorage.at<TransType>(0)) TransType;
 80047e8:	687b      	ldr	r3, [r7, #4]
 80047ea:	68db      	ldr	r3, [r3, #12]
 80047ec:	2100      	movs	r1, #0
 80047ee:	4618      	mov	r0, r3
 80047f0:	f000 fab2 	bl	8004d58 <_ZN8touchgfx17AbstractPartition2atINS_12NoTransitionEEERT_t>
 80047f4:	4603      	mov	r3, r0
 80047f6:	4619      	mov	r1, r3
 80047f8:	200c      	movs	r0, #12
 80047fa:	f7ff fac1 	bl	8003d80 <_ZnwjPv>
 80047fe:	4604      	mov	r4, r0
 8004800:	4620      	mov	r0, r4
 8004802:	f7ff ff47 	bl	8004694 <_ZN8touchgfx12NoTransitionC1Ev>
 8004806:	637c      	str	r4, [r7, #52]	@ 0x34
    ScreenType* newScreen = new (&heap.screenStorage.at<ScreenType>(0)) ScreenType;
 8004808:	687b      	ldr	r3, [r7, #4]
 800480a:	689b      	ldr	r3, [r3, #8]
 800480c:	2100      	movs	r1, #0
 800480e:	4618      	mov	r0, r3
 8004810:	f000 fab5 	bl	8004d7e <_ZN8touchgfx17AbstractPartition2atI8MainViewEERT_t>
 8004814:	4603      	mov	r3, r0
 8004816:	4619      	mov	r1, r3
 8004818:	f640 3018 	movw	r0, #2840	@ 0xb18
 800481c:	f7ff fab0 	bl	8003d80 <_ZnwjPv>
 8004820:	4604      	mov	r4, r0
 8004822:	4620      	mov	r0, r4
 8004824:	f005 fe0c 	bl	800a440 <_ZN8MainViewC1Ev>
 8004828:	633c      	str	r4, [r7, #48]	@ 0x30
    PresenterType* newPresenter = new (&heap.presenterStorage.at<PresenterType>(0)) PresenterType(*newScreen);
 800482a:	687b      	ldr	r3, [r7, #4]
 800482c:	685b      	ldr	r3, [r3, #4]
 800482e:	2100      	movs	r1, #0
 8004830:	4618      	mov	r0, r3
 8004832:	f000 fab7 	bl	8004da4 <_ZN8touchgfx17AbstractPartition2atI13MainPresenterEERT_t>
 8004836:	4603      	mov	r3, r0
 8004838:	4619      	mov	r1, r3
 800483a:	2010      	movs	r0, #16
 800483c:	f7ff faa0 	bl	8003d80 <_ZnwjPv>
 8004840:	4604      	mov	r4, r0
 8004842:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8004844:	4620      	mov	r0, r4
 8004846:	f005 fd6d 	bl	800a324 <_ZN13MainPresenterC1ER8MainView>
 800484a:	62fc      	str	r4, [r7, #44]	@ 0x2c
    *currentTrans = newTransition;
 800484c:	683b      	ldr	r3, [r7, #0]
 800484e:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8004850:	601a      	str	r2, [r3, #0]
    *currentPresenter = newPresenter;
 8004852:	68bb      	ldr	r3, [r7, #8]
 8004854:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8004856:	601a      	str	r2, [r3, #0]
    *currentScreen = newScreen;
 8004858:	68fb      	ldr	r3, [r7, #12]
 800485a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800485c:	601a      	str	r2, [r3, #0]
    model->bind(newPresenter);
 800485e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004860:	2b00      	cmp	r3, #0
 8004862:	d002      	beq.n	800486a <_ZN8touchgfx14makeTransitionI8MainView13MainPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x1b2>
 8004864:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004866:	3304      	adds	r3, #4
 8004868:	e000      	b.n	800486c <_ZN8touchgfx14makeTransitionI8MainView13MainPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x1b4>
 800486a:	2300      	movs	r3, #0
 800486c:	4619      	mov	r1, r3
 800486e:	6cb8      	ldr	r0, [r7, #72]	@ 0x48
 8004870:	f7ff fd16 	bl	80042a0 <_ZN5Model4bindEP13ModelListener>
    newPresenter->bind(model);
 8004874:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004876:	3304      	adds	r3, #4
 8004878:	6cb9      	ldr	r1, [r7, #72]	@ 0x48
 800487a:	4618      	mov	r0, r3
 800487c:	f7ff fd4e 	bl	800431c <_ZN13ModelListener4bindEP5Model>
    newScreen->bind(*newPresenter);
 8004880:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004882:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8004884:	4618      	mov	r0, r3
 8004886:	f000 faa0 	bl	8004dca <_ZN8touchgfx4ViewI13MainPresenterE4bindERS1_>
 800488a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800488c:	61fb      	str	r3, [r7, #28]
 800488e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004890:	61bb      	str	r3, [r7, #24]
 8004892:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004894:	617b      	str	r3, [r7, #20]
    newScreen->setupScreen();
 8004896:	69fb      	ldr	r3, [r7, #28]
 8004898:	681b      	ldr	r3, [r3, #0]
 800489a:	330c      	adds	r3, #12
 800489c:	681b      	ldr	r3, [r3, #0]
 800489e:	69f8      	ldr	r0, [r7, #28]
 80048a0:	4798      	blx	r3
    newPresenter->activate();
 80048a2:	69bb      	ldr	r3, [r7, #24]
 80048a4:	681b      	ldr	r3, [r3, #0]
 80048a6:	681b      	ldr	r3, [r3, #0]
 80048a8:	69b8      	ldr	r0, [r7, #24]
 80048aa:	4798      	blx	r3
    newScreen->bindTransition(*newTransition);
 80048ac:	6979      	ldr	r1, [r7, #20]
 80048ae:	69f8      	ldr	r0, [r7, #28]
 80048b0:	f018 fb66 	bl	801cf80 <_ZN8touchgfx6Screen14bindTransitionERNS_10TransitionE>
    newTransition->init();
 80048b4:	697b      	ldr	r3, [r7, #20]
 80048b6:	681b      	ldr	r3, [r3, #0]
 80048b8:	3310      	adds	r3, #16
 80048ba:	681b      	ldr	r3, [r3, #0]
 80048bc:	6978      	ldr	r0, [r7, #20]
 80048be:	4798      	blx	r3
    newTransition->invalidate();
 80048c0:	697b      	ldr	r3, [r7, #20]
 80048c2:	681b      	ldr	r3, [r3, #0]
 80048c4:	3314      	adds	r3, #20
 80048c6:	681b      	ldr	r3, [r3, #0]
 80048c8:	6978      	ldr	r0, [r7, #20]
 80048ca:	4798      	blx	r3
}
 80048cc:	bf00      	nop

    finalizeTransition((Screen*)newScreen, (Presenter*)newPresenter, (Transition*)newTransition);

    return newPresenter;
 80048ce:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
}
 80048d0:	4618      	mov	r0, r3
 80048d2:	373c      	adds	r7, #60	@ 0x3c
 80048d4:	46bd      	mov	sp, r7
 80048d6:	bd90      	pop	{r4, r7, pc}
 80048d8:	0802bebc 	.word	0x0802bebc
 80048dc:	0802bf4c 	.word	0x0802bf4c
 80048e0:	0802c018 	.word	0x0802c018
 80048e4:	0802c060 	.word	0x0802c060
 80048e8:	0802c104 	.word	0x0802c104

080048ec <_ZN8touchgfx14makeTransitionI8MainView13MainPresenterNS_14WipeTransitionILNS_9DirectionE1EEE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_>:
PresenterType* makeTransition(Screen** currentScreen, Presenter** currentPresenter, MVPHeap& heap, Transition** currentTrans, ModelType* model)
 80048ec:	b590      	push	{r4, r7, lr}
 80048ee:	b08f      	sub	sp, #60	@ 0x3c
 80048f0:	af00      	add	r7, sp, #0
 80048f2:	60f8      	str	r0, [r7, #12]
 80048f4:	60b9      	str	r1, [r7, #8]
 80048f6:	607a      	str	r2, [r7, #4]
 80048f8:	603b      	str	r3, [r7, #0]
    assert(sizeof(ScreenType) <= heap.screenStorage.element_size() && "View allocation error: Check that all views are added to FrontendHeap::ViewTypes");
 80048fa:	687b      	ldr	r3, [r7, #4]
 80048fc:	689a      	ldr	r2, [r3, #8]
 80048fe:	687b      	ldr	r3, [r7, #4]
 8004900:	689b      	ldr	r3, [r3, #8]
 8004902:	681b      	ldr	r3, [r3, #0]
 8004904:	3320      	adds	r3, #32
 8004906:	681b      	ldr	r3, [r3, #0]
 8004908:	4610      	mov	r0, r2
 800490a:	4798      	blx	r3
 800490c:	4603      	mov	r3, r0
 800490e:	f640 3217 	movw	r2, #2839	@ 0xb17
 8004912:	4293      	cmp	r3, r2
 8004914:	d805      	bhi.n	8004922 <_ZN8touchgfx14makeTransitionI8MainView13MainPresenterNS_14WipeTransitionILNS_9DirectionE1EEE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x36>
 8004916:	4b7e      	ldr	r3, [pc, #504]	@ (8004b10 <_ZN8touchgfx14makeTransitionI8MainView13MainPresenterNS_14WipeTransitionILNS_9DirectionE1EEE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x224>)
 8004918:	4a7e      	ldr	r2, [pc, #504]	@ (8004b14 <_ZN8touchgfx14makeTransitionI8MainView13MainPresenterNS_14WipeTransitionILNS_9DirectionE1EEE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x228>)
 800491a:	21a3      	movs	r1, #163	@ 0xa3
 800491c:	487e      	ldr	r0, [pc, #504]	@ (8004b18 <_ZN8touchgfx14makeTransitionI8MainView13MainPresenterNS_14WipeTransitionILNS_9DirectionE1EEE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x22c>)
 800491e:	f026 f809 	bl	802a934 <__assert_func>
    assert(sizeof(PresenterType) <= heap.presenterStorage.element_size() && "Presenter allocation error: Check that all presenters are added to FrontendHeap::PresenterTypes");
 8004922:	687b      	ldr	r3, [r7, #4]
 8004924:	685a      	ldr	r2, [r3, #4]
 8004926:	687b      	ldr	r3, [r7, #4]
 8004928:	685b      	ldr	r3, [r3, #4]
 800492a:	681b      	ldr	r3, [r3, #0]
 800492c:	3320      	adds	r3, #32
 800492e:	681b      	ldr	r3, [r3, #0]
 8004930:	4610      	mov	r0, r2
 8004932:	4798      	blx	r3
 8004934:	4603      	mov	r3, r0
 8004936:	2b0f      	cmp	r3, #15
 8004938:	d805      	bhi.n	8004946 <_ZN8touchgfx14makeTransitionI8MainView13MainPresenterNS_14WipeTransitionILNS_9DirectionE1EEE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x5a>
 800493a:	4b78      	ldr	r3, [pc, #480]	@ (8004b1c <_ZN8touchgfx14makeTransitionI8MainView13MainPresenterNS_14WipeTransitionILNS_9DirectionE1EEE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x230>)
 800493c:	4a75      	ldr	r2, [pc, #468]	@ (8004b14 <_ZN8touchgfx14makeTransitionI8MainView13MainPresenterNS_14WipeTransitionILNS_9DirectionE1EEE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x228>)
 800493e:	21a4      	movs	r1, #164	@ 0xa4
 8004940:	4875      	ldr	r0, [pc, #468]	@ (8004b18 <_ZN8touchgfx14makeTransitionI8MainView13MainPresenterNS_14WipeTransitionILNS_9DirectionE1EEE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x22c>)
 8004942:	f025 fff7 	bl	802a934 <__assert_func>
    assert(sizeof(TransType) <= heap.transitionStorage.element_size() && "Transition allocation error: Check that all transitions are added to FrontendHeap::TransitionTypes");
 8004946:	687b      	ldr	r3, [r7, #4]
 8004948:	68da      	ldr	r2, [r3, #12]
 800494a:	687b      	ldr	r3, [r7, #4]
 800494c:	68db      	ldr	r3, [r3, #12]
 800494e:	681b      	ldr	r3, [r3, #0]
 8004950:	3320      	adds	r3, #32
 8004952:	681b      	ldr	r3, [r3, #0]
 8004954:	4610      	mov	r0, r2
 8004956:	4798      	blx	r3
 8004958:	4603      	mov	r3, r0
 800495a:	2b37      	cmp	r3, #55	@ 0x37
 800495c:	d805      	bhi.n	800496a <_ZN8touchgfx14makeTransitionI8MainView13MainPresenterNS_14WipeTransitionILNS_9DirectionE1EEE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x7e>
 800495e:	4b70      	ldr	r3, [pc, #448]	@ (8004b20 <_ZN8touchgfx14makeTransitionI8MainView13MainPresenterNS_14WipeTransitionILNS_9DirectionE1EEE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x234>)
 8004960:	4a6c      	ldr	r2, [pc, #432]	@ (8004b14 <_ZN8touchgfx14makeTransitionI8MainView13MainPresenterNS_14WipeTransitionILNS_9DirectionE1EEE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x228>)
 8004962:	21a5      	movs	r1, #165	@ 0xa5
 8004964:	486c      	ldr	r0, [pc, #432]	@ (8004b18 <_ZN8touchgfx14makeTransitionI8MainView13MainPresenterNS_14WipeTransitionILNS_9DirectionE1EEE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x22c>)
 8004966:	f025 ffe5 	bl	802a934 <__assert_func>
 800496a:	68fb      	ldr	r3, [r7, #12]
 800496c:	62bb      	str	r3, [r7, #40]	@ 0x28
 800496e:	68bb      	ldr	r3, [r7, #8]
 8004970:	627b      	str	r3, [r7, #36]	@ 0x24
 8004972:	683b      	ldr	r3, [r7, #0]
 8004974:	623b      	str	r3, [r7, #32]
    Application::getInstance()->clearAllTimerWidgets();
 8004976:	f016 fe6f 	bl	801b658 <_ZN8touchgfx11Application11getInstanceEv>
 800497a:	4603      	mov	r3, r0
 800497c:	4618      	mov	r0, r3
 800497e:	f016 feb9 	bl	801b6f4 <_ZN8touchgfx11Application20clearAllTimerWidgetsEv>
    if (*currentTrans)
 8004982:	6a3b      	ldr	r3, [r7, #32]
 8004984:	681b      	ldr	r3, [r3, #0]
 8004986:	2b00      	cmp	r3, #0
 8004988:	d008      	beq.n	800499c <_ZN8touchgfx14makeTransitionI8MainView13MainPresenterNS_14WipeTransitionILNS_9DirectionE1EEE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0xb0>
        (*currentTrans)->tearDown();
 800498a:	6a3b      	ldr	r3, [r7, #32]
 800498c:	681a      	ldr	r2, [r3, #0]
 800498e:	6a3b      	ldr	r3, [r7, #32]
 8004990:	681b      	ldr	r3, [r3, #0]
 8004992:	681b      	ldr	r3, [r3, #0]
 8004994:	330c      	adds	r3, #12
 8004996:	681b      	ldr	r3, [r3, #0]
 8004998:	4610      	mov	r0, r2
 800499a:	4798      	blx	r3
    if (*currentTrans)
 800499c:	6a3b      	ldr	r3, [r7, #32]
 800499e:	681b      	ldr	r3, [r3, #0]
 80049a0:	2b00      	cmp	r3, #0
 80049a2:	d007      	beq.n	80049b4 <_ZN8touchgfx14makeTransitionI8MainView13MainPresenterNS_14WipeTransitionILNS_9DirectionE1EEE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0xc8>
        (*currentTrans)->~Transition();
 80049a4:	6a3b      	ldr	r3, [r7, #32]
 80049a6:	681a      	ldr	r2, [r3, #0]
 80049a8:	6a3b      	ldr	r3, [r7, #32]
 80049aa:	681b      	ldr	r3, [r3, #0]
 80049ac:	681b      	ldr	r3, [r3, #0]
 80049ae:	681b      	ldr	r3, [r3, #0]
 80049b0:	4610      	mov	r0, r2
 80049b2:	4798      	blx	r3
    if (*currentScreen)
 80049b4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80049b6:	681b      	ldr	r3, [r3, #0]
 80049b8:	2b00      	cmp	r3, #0
 80049ba:	d008      	beq.n	80049ce <_ZN8touchgfx14makeTransitionI8MainView13MainPresenterNS_14WipeTransitionILNS_9DirectionE1EEE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0xe2>
        (*currentScreen)->tearDownScreen();
 80049bc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80049be:	681a      	ldr	r2, [r3, #0]
 80049c0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80049c2:	681b      	ldr	r3, [r3, #0]
 80049c4:	681b      	ldr	r3, [r3, #0]
 80049c6:	3314      	adds	r3, #20
 80049c8:	681b      	ldr	r3, [r3, #0]
 80049ca:	4610      	mov	r0, r2
 80049cc:	4798      	blx	r3
    if (*currentPresenter)
 80049ce:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80049d0:	681b      	ldr	r3, [r3, #0]
 80049d2:	2b00      	cmp	r3, #0
 80049d4:	d008      	beq.n	80049e8 <_ZN8touchgfx14makeTransitionI8MainView13MainPresenterNS_14WipeTransitionILNS_9DirectionE1EEE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0xfc>
        (*currentPresenter)->deactivate();
 80049d6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80049d8:	681a      	ldr	r2, [r3, #0]
 80049da:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80049dc:	681b      	ldr	r3, [r3, #0]
 80049de:	681b      	ldr	r3, [r3, #0]
 80049e0:	3304      	adds	r3, #4
 80049e2:	681b      	ldr	r3, [r3, #0]
 80049e4:	4610      	mov	r0, r2
 80049e6:	4798      	blx	r3
    if (*currentScreen)
 80049e8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80049ea:	681b      	ldr	r3, [r3, #0]
 80049ec:	2b00      	cmp	r3, #0
 80049ee:	d007      	beq.n	8004a00 <_ZN8touchgfx14makeTransitionI8MainView13MainPresenterNS_14WipeTransitionILNS_9DirectionE1EEE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x114>
        (*currentScreen)->~Screen();
 80049f0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80049f2:	681a      	ldr	r2, [r3, #0]
 80049f4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80049f6:	681b      	ldr	r3, [r3, #0]
 80049f8:	681b      	ldr	r3, [r3, #0]
 80049fa:	681b      	ldr	r3, [r3, #0]
 80049fc:	4610      	mov	r0, r2
 80049fe:	4798      	blx	r3
    if (*currentPresenter)
 8004a00:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004a02:	681b      	ldr	r3, [r3, #0]
 8004a04:	2b00      	cmp	r3, #0
 8004a06:	d008      	beq.n	8004a1a <_ZN8touchgfx14makeTransitionI8MainView13MainPresenterNS_14WipeTransitionILNS_9DirectionE1EEE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x12e>
        (*currentPresenter)->~Presenter();
 8004a08:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004a0a:	681a      	ldr	r2, [r3, #0]
 8004a0c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004a0e:	681b      	ldr	r3, [r3, #0]
 8004a10:	681b      	ldr	r3, [r3, #0]
 8004a12:	3308      	adds	r3, #8
 8004a14:	681b      	ldr	r3, [r3, #0]
 8004a16:	4610      	mov	r0, r2
 8004a18:	4798      	blx	r3
}
 8004a1a:	bf00      	nop
    TransType* newTransition = new (&heap.transitionStorage.at<TransType>(0)) TransType;
 8004a1c:	687b      	ldr	r3, [r7, #4]
 8004a1e:	68db      	ldr	r3, [r3, #12]
 8004a20:	2100      	movs	r1, #0
 8004a22:	4618      	mov	r0, r3
 8004a24:	f000 f9df 	bl	8004de6 <_ZN8touchgfx17AbstractPartition2atINS_14WipeTransitionILNS_9DirectionE1EEEEERT_t>
 8004a28:	4603      	mov	r3, r0
 8004a2a:	4619      	mov	r1, r3
 8004a2c:	2038      	movs	r0, #56	@ 0x38
 8004a2e:	f7ff f9a7 	bl	8003d80 <_ZnwjPv>
 8004a32:	4604      	mov	r4, r0
 8004a34:	2114      	movs	r1, #20
 8004a36:	4620      	mov	r0, r4
 8004a38:	f000 fa1c 	bl	8004e74 <_ZN8touchgfx14WipeTransitionILNS_9DirectionE1EEC1Eh>
 8004a3c:	637c      	str	r4, [r7, #52]	@ 0x34
    ScreenType* newScreen = new (&heap.screenStorage.at<ScreenType>(0)) ScreenType;
 8004a3e:	687b      	ldr	r3, [r7, #4]
 8004a40:	689b      	ldr	r3, [r3, #8]
 8004a42:	2100      	movs	r1, #0
 8004a44:	4618      	mov	r0, r3
 8004a46:	f000 f99a 	bl	8004d7e <_ZN8touchgfx17AbstractPartition2atI8MainViewEERT_t>
 8004a4a:	4603      	mov	r3, r0
 8004a4c:	4619      	mov	r1, r3
 8004a4e:	f640 3018 	movw	r0, #2840	@ 0xb18
 8004a52:	f7ff f995 	bl	8003d80 <_ZnwjPv>
 8004a56:	4604      	mov	r4, r0
 8004a58:	4620      	mov	r0, r4
 8004a5a:	f005 fcf1 	bl	800a440 <_ZN8MainViewC1Ev>
 8004a5e:	633c      	str	r4, [r7, #48]	@ 0x30
    PresenterType* newPresenter = new (&heap.presenterStorage.at<PresenterType>(0)) PresenterType(*newScreen);
 8004a60:	687b      	ldr	r3, [r7, #4]
 8004a62:	685b      	ldr	r3, [r3, #4]
 8004a64:	2100      	movs	r1, #0
 8004a66:	4618      	mov	r0, r3
 8004a68:	f000 f99c 	bl	8004da4 <_ZN8touchgfx17AbstractPartition2atI13MainPresenterEERT_t>
 8004a6c:	4603      	mov	r3, r0
 8004a6e:	4619      	mov	r1, r3
 8004a70:	2010      	movs	r0, #16
 8004a72:	f7ff f985 	bl	8003d80 <_ZnwjPv>
 8004a76:	4604      	mov	r4, r0
 8004a78:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8004a7a:	4620      	mov	r0, r4
 8004a7c:	f005 fc52 	bl	800a324 <_ZN13MainPresenterC1ER8MainView>
 8004a80:	62fc      	str	r4, [r7, #44]	@ 0x2c
    *currentTrans = newTransition;
 8004a82:	683b      	ldr	r3, [r7, #0]
 8004a84:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8004a86:	601a      	str	r2, [r3, #0]
    *currentPresenter = newPresenter;
 8004a88:	68bb      	ldr	r3, [r7, #8]
 8004a8a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8004a8c:	601a      	str	r2, [r3, #0]
    *currentScreen = newScreen;
 8004a8e:	68fb      	ldr	r3, [r7, #12]
 8004a90:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8004a92:	601a      	str	r2, [r3, #0]
    model->bind(newPresenter);
 8004a94:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004a96:	2b00      	cmp	r3, #0
 8004a98:	d002      	beq.n	8004aa0 <_ZN8touchgfx14makeTransitionI8MainView13MainPresenterNS_14WipeTransitionILNS_9DirectionE1EEE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x1b4>
 8004a9a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004a9c:	3304      	adds	r3, #4
 8004a9e:	e000      	b.n	8004aa2 <_ZN8touchgfx14makeTransitionI8MainView13MainPresenterNS_14WipeTransitionILNS_9DirectionE1EEE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x1b6>
 8004aa0:	2300      	movs	r3, #0
 8004aa2:	4619      	mov	r1, r3
 8004aa4:	6cb8      	ldr	r0, [r7, #72]	@ 0x48
 8004aa6:	f7ff fbfb 	bl	80042a0 <_ZN5Model4bindEP13ModelListener>
    newPresenter->bind(model);
 8004aaa:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004aac:	3304      	adds	r3, #4
 8004aae:	6cb9      	ldr	r1, [r7, #72]	@ 0x48
 8004ab0:	4618      	mov	r0, r3
 8004ab2:	f7ff fc33 	bl	800431c <_ZN13ModelListener4bindEP5Model>
    newScreen->bind(*newPresenter);
 8004ab6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004ab8:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8004aba:	4618      	mov	r0, r3
 8004abc:	f000 f985 	bl	8004dca <_ZN8touchgfx4ViewI13MainPresenterE4bindERS1_>
 8004ac0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004ac2:	61fb      	str	r3, [r7, #28]
 8004ac4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004ac6:	61bb      	str	r3, [r7, #24]
 8004ac8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004aca:	617b      	str	r3, [r7, #20]
    newScreen->setupScreen();
 8004acc:	69fb      	ldr	r3, [r7, #28]
 8004ace:	681b      	ldr	r3, [r3, #0]
 8004ad0:	330c      	adds	r3, #12
 8004ad2:	681b      	ldr	r3, [r3, #0]
 8004ad4:	69f8      	ldr	r0, [r7, #28]
 8004ad6:	4798      	blx	r3
    newPresenter->activate();
 8004ad8:	69bb      	ldr	r3, [r7, #24]
 8004ada:	681b      	ldr	r3, [r3, #0]
 8004adc:	681b      	ldr	r3, [r3, #0]
 8004ade:	69b8      	ldr	r0, [r7, #24]
 8004ae0:	4798      	blx	r3
    newScreen->bindTransition(*newTransition);
 8004ae2:	6979      	ldr	r1, [r7, #20]
 8004ae4:	69f8      	ldr	r0, [r7, #28]
 8004ae6:	f018 fa4b 	bl	801cf80 <_ZN8touchgfx6Screen14bindTransitionERNS_10TransitionE>
    newTransition->init();
 8004aea:	697b      	ldr	r3, [r7, #20]
 8004aec:	681b      	ldr	r3, [r3, #0]
 8004aee:	3310      	adds	r3, #16
 8004af0:	681b      	ldr	r3, [r3, #0]
 8004af2:	6978      	ldr	r0, [r7, #20]
 8004af4:	4798      	blx	r3
    newTransition->invalidate();
 8004af6:	697b      	ldr	r3, [r7, #20]
 8004af8:	681b      	ldr	r3, [r3, #0]
 8004afa:	3314      	adds	r3, #20
 8004afc:	681b      	ldr	r3, [r3, #0]
 8004afe:	6978      	ldr	r0, [r7, #20]
 8004b00:	4798      	blx	r3
}
 8004b02:	bf00      	nop
    return newPresenter;
 8004b04:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
}
 8004b06:	4618      	mov	r0, r3
 8004b08:	373c      	adds	r7, #60	@ 0x3c
 8004b0a:	46bd      	mov	sp, r7
 8004b0c:	bd90      	pop	{r4, r7, pc}
 8004b0e:	bf00      	nop
 8004b10:	0802bebc 	.word	0x0802bebc
 8004b14:	0802c1a8 	.word	0x0802c1a8
 8004b18:	0802c018 	.word	0x0802c018
 8004b1c:	0802c060 	.word	0x0802c060
 8004b20:	0802c104 	.word	0x0802c104

08004b24 <_ZN8touchgfx14makeTransitionI20Localize_AnomalyView25Localize_AnomalyPresenterNS_14WipeTransitionILNS_9DirectionE0EEE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_>:
PresenterType* makeTransition(Screen** currentScreen, Presenter** currentPresenter, MVPHeap& heap, Transition** currentTrans, ModelType* model)
 8004b24:	b590      	push	{r4, r7, lr}
 8004b26:	b08f      	sub	sp, #60	@ 0x3c
 8004b28:	af00      	add	r7, sp, #0
 8004b2a:	60f8      	str	r0, [r7, #12]
 8004b2c:	60b9      	str	r1, [r7, #8]
 8004b2e:	607a      	str	r2, [r7, #4]
 8004b30:	603b      	str	r3, [r7, #0]
    assert(sizeof(ScreenType) <= heap.screenStorage.element_size() && "View allocation error: Check that all views are added to FrontendHeap::ViewTypes");
 8004b32:	687b      	ldr	r3, [r7, #4]
 8004b34:	689a      	ldr	r2, [r3, #8]
 8004b36:	687b      	ldr	r3, [r7, #4]
 8004b38:	689b      	ldr	r3, [r3, #8]
 8004b3a:	681b      	ldr	r3, [r3, #0]
 8004b3c:	3320      	adds	r3, #32
 8004b3e:	681b      	ldr	r3, [r3, #0]
 8004b40:	4610      	mov	r0, r2
 8004b42:	4798      	blx	r3
 8004b44:	4603      	mov	r3, r0
 8004b46:	f5b3 7f70 	cmp.w	r3, #960	@ 0x3c0
 8004b4a:	d205      	bcs.n	8004b58 <_ZN8touchgfx14makeTransitionI20Localize_AnomalyView25Localize_AnomalyPresenterNS_14WipeTransitionILNS_9DirectionE0EEE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x34>
 8004b4c:	4b7d      	ldr	r3, [pc, #500]	@ (8004d44 <_ZN8touchgfx14makeTransitionI20Localize_AnomalyView25Localize_AnomalyPresenterNS_14WipeTransitionILNS_9DirectionE0EEE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x220>)
 8004b4e:	4a7e      	ldr	r2, [pc, #504]	@ (8004d48 <_ZN8touchgfx14makeTransitionI20Localize_AnomalyView25Localize_AnomalyPresenterNS_14WipeTransitionILNS_9DirectionE0EEE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x224>)
 8004b50:	21a3      	movs	r1, #163	@ 0xa3
 8004b52:	487e      	ldr	r0, [pc, #504]	@ (8004d4c <_ZN8touchgfx14makeTransitionI20Localize_AnomalyView25Localize_AnomalyPresenterNS_14WipeTransitionILNS_9DirectionE0EEE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x228>)
 8004b54:	f025 feee 	bl	802a934 <__assert_func>
    assert(sizeof(PresenterType) <= heap.presenterStorage.element_size() && "Presenter allocation error: Check that all presenters are added to FrontendHeap::PresenterTypes");
 8004b58:	687b      	ldr	r3, [r7, #4]
 8004b5a:	685a      	ldr	r2, [r3, #4]
 8004b5c:	687b      	ldr	r3, [r7, #4]
 8004b5e:	685b      	ldr	r3, [r3, #4]
 8004b60:	681b      	ldr	r3, [r3, #0]
 8004b62:	3320      	adds	r3, #32
 8004b64:	681b      	ldr	r3, [r3, #0]
 8004b66:	4610      	mov	r0, r2
 8004b68:	4798      	blx	r3
 8004b6a:	4603      	mov	r3, r0
 8004b6c:	2b0f      	cmp	r3, #15
 8004b6e:	d805      	bhi.n	8004b7c <_ZN8touchgfx14makeTransitionI20Localize_AnomalyView25Localize_AnomalyPresenterNS_14WipeTransitionILNS_9DirectionE0EEE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x58>
 8004b70:	4b77      	ldr	r3, [pc, #476]	@ (8004d50 <_ZN8touchgfx14makeTransitionI20Localize_AnomalyView25Localize_AnomalyPresenterNS_14WipeTransitionILNS_9DirectionE0EEE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x22c>)
 8004b72:	4a75      	ldr	r2, [pc, #468]	@ (8004d48 <_ZN8touchgfx14makeTransitionI20Localize_AnomalyView25Localize_AnomalyPresenterNS_14WipeTransitionILNS_9DirectionE0EEE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x224>)
 8004b74:	21a4      	movs	r1, #164	@ 0xa4
 8004b76:	4875      	ldr	r0, [pc, #468]	@ (8004d4c <_ZN8touchgfx14makeTransitionI20Localize_AnomalyView25Localize_AnomalyPresenterNS_14WipeTransitionILNS_9DirectionE0EEE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x228>)
 8004b78:	f025 fedc 	bl	802a934 <__assert_func>
    assert(sizeof(TransType) <= heap.transitionStorage.element_size() && "Transition allocation error: Check that all transitions are added to FrontendHeap::TransitionTypes");
 8004b7c:	687b      	ldr	r3, [r7, #4]
 8004b7e:	68da      	ldr	r2, [r3, #12]
 8004b80:	687b      	ldr	r3, [r7, #4]
 8004b82:	68db      	ldr	r3, [r3, #12]
 8004b84:	681b      	ldr	r3, [r3, #0]
 8004b86:	3320      	adds	r3, #32
 8004b88:	681b      	ldr	r3, [r3, #0]
 8004b8a:	4610      	mov	r0, r2
 8004b8c:	4798      	blx	r3
 8004b8e:	4603      	mov	r3, r0
 8004b90:	2b37      	cmp	r3, #55	@ 0x37
 8004b92:	d805      	bhi.n	8004ba0 <_ZN8touchgfx14makeTransitionI20Localize_AnomalyView25Localize_AnomalyPresenterNS_14WipeTransitionILNS_9DirectionE0EEE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x7c>
 8004b94:	4b6f      	ldr	r3, [pc, #444]	@ (8004d54 <_ZN8touchgfx14makeTransitionI20Localize_AnomalyView25Localize_AnomalyPresenterNS_14WipeTransitionILNS_9DirectionE0EEE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x230>)
 8004b96:	4a6c      	ldr	r2, [pc, #432]	@ (8004d48 <_ZN8touchgfx14makeTransitionI20Localize_AnomalyView25Localize_AnomalyPresenterNS_14WipeTransitionILNS_9DirectionE0EEE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x224>)
 8004b98:	21a5      	movs	r1, #165	@ 0xa5
 8004b9a:	486c      	ldr	r0, [pc, #432]	@ (8004d4c <_ZN8touchgfx14makeTransitionI20Localize_AnomalyView25Localize_AnomalyPresenterNS_14WipeTransitionILNS_9DirectionE0EEE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x228>)
 8004b9c:	f025 feca 	bl	802a934 <__assert_func>
 8004ba0:	68fb      	ldr	r3, [r7, #12]
 8004ba2:	62bb      	str	r3, [r7, #40]	@ 0x28
 8004ba4:	68bb      	ldr	r3, [r7, #8]
 8004ba6:	627b      	str	r3, [r7, #36]	@ 0x24
 8004ba8:	683b      	ldr	r3, [r7, #0]
 8004baa:	623b      	str	r3, [r7, #32]
    Application::getInstance()->clearAllTimerWidgets();
 8004bac:	f016 fd54 	bl	801b658 <_ZN8touchgfx11Application11getInstanceEv>
 8004bb0:	4603      	mov	r3, r0
 8004bb2:	4618      	mov	r0, r3
 8004bb4:	f016 fd9e 	bl	801b6f4 <_ZN8touchgfx11Application20clearAllTimerWidgetsEv>
    if (*currentTrans)
 8004bb8:	6a3b      	ldr	r3, [r7, #32]
 8004bba:	681b      	ldr	r3, [r3, #0]
 8004bbc:	2b00      	cmp	r3, #0
 8004bbe:	d008      	beq.n	8004bd2 <_ZN8touchgfx14makeTransitionI20Localize_AnomalyView25Localize_AnomalyPresenterNS_14WipeTransitionILNS_9DirectionE0EEE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0xae>
        (*currentTrans)->tearDown();
 8004bc0:	6a3b      	ldr	r3, [r7, #32]
 8004bc2:	681a      	ldr	r2, [r3, #0]
 8004bc4:	6a3b      	ldr	r3, [r7, #32]
 8004bc6:	681b      	ldr	r3, [r3, #0]
 8004bc8:	681b      	ldr	r3, [r3, #0]
 8004bca:	330c      	adds	r3, #12
 8004bcc:	681b      	ldr	r3, [r3, #0]
 8004bce:	4610      	mov	r0, r2
 8004bd0:	4798      	blx	r3
    if (*currentTrans)
 8004bd2:	6a3b      	ldr	r3, [r7, #32]
 8004bd4:	681b      	ldr	r3, [r3, #0]
 8004bd6:	2b00      	cmp	r3, #0
 8004bd8:	d007      	beq.n	8004bea <_ZN8touchgfx14makeTransitionI20Localize_AnomalyView25Localize_AnomalyPresenterNS_14WipeTransitionILNS_9DirectionE0EEE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0xc6>
        (*currentTrans)->~Transition();
 8004bda:	6a3b      	ldr	r3, [r7, #32]
 8004bdc:	681a      	ldr	r2, [r3, #0]
 8004bde:	6a3b      	ldr	r3, [r7, #32]
 8004be0:	681b      	ldr	r3, [r3, #0]
 8004be2:	681b      	ldr	r3, [r3, #0]
 8004be4:	681b      	ldr	r3, [r3, #0]
 8004be6:	4610      	mov	r0, r2
 8004be8:	4798      	blx	r3
    if (*currentScreen)
 8004bea:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004bec:	681b      	ldr	r3, [r3, #0]
 8004bee:	2b00      	cmp	r3, #0
 8004bf0:	d008      	beq.n	8004c04 <_ZN8touchgfx14makeTransitionI20Localize_AnomalyView25Localize_AnomalyPresenterNS_14WipeTransitionILNS_9DirectionE0EEE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0xe0>
        (*currentScreen)->tearDownScreen();
 8004bf2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004bf4:	681a      	ldr	r2, [r3, #0]
 8004bf6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004bf8:	681b      	ldr	r3, [r3, #0]
 8004bfa:	681b      	ldr	r3, [r3, #0]
 8004bfc:	3314      	adds	r3, #20
 8004bfe:	681b      	ldr	r3, [r3, #0]
 8004c00:	4610      	mov	r0, r2
 8004c02:	4798      	blx	r3
    if (*currentPresenter)
 8004c04:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004c06:	681b      	ldr	r3, [r3, #0]
 8004c08:	2b00      	cmp	r3, #0
 8004c0a:	d008      	beq.n	8004c1e <_ZN8touchgfx14makeTransitionI20Localize_AnomalyView25Localize_AnomalyPresenterNS_14WipeTransitionILNS_9DirectionE0EEE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0xfa>
        (*currentPresenter)->deactivate();
 8004c0c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004c0e:	681a      	ldr	r2, [r3, #0]
 8004c10:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004c12:	681b      	ldr	r3, [r3, #0]
 8004c14:	681b      	ldr	r3, [r3, #0]
 8004c16:	3304      	adds	r3, #4
 8004c18:	681b      	ldr	r3, [r3, #0]
 8004c1a:	4610      	mov	r0, r2
 8004c1c:	4798      	blx	r3
    if (*currentScreen)
 8004c1e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004c20:	681b      	ldr	r3, [r3, #0]
 8004c22:	2b00      	cmp	r3, #0
 8004c24:	d007      	beq.n	8004c36 <_ZN8touchgfx14makeTransitionI20Localize_AnomalyView25Localize_AnomalyPresenterNS_14WipeTransitionILNS_9DirectionE0EEE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x112>
        (*currentScreen)->~Screen();
 8004c26:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004c28:	681a      	ldr	r2, [r3, #0]
 8004c2a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004c2c:	681b      	ldr	r3, [r3, #0]
 8004c2e:	681b      	ldr	r3, [r3, #0]
 8004c30:	681b      	ldr	r3, [r3, #0]
 8004c32:	4610      	mov	r0, r2
 8004c34:	4798      	blx	r3
    if (*currentPresenter)
 8004c36:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004c38:	681b      	ldr	r3, [r3, #0]
 8004c3a:	2b00      	cmp	r3, #0
 8004c3c:	d008      	beq.n	8004c50 <_ZN8touchgfx14makeTransitionI20Localize_AnomalyView25Localize_AnomalyPresenterNS_14WipeTransitionILNS_9DirectionE0EEE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x12c>
        (*currentPresenter)->~Presenter();
 8004c3e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004c40:	681a      	ldr	r2, [r3, #0]
 8004c42:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004c44:	681b      	ldr	r3, [r3, #0]
 8004c46:	681b      	ldr	r3, [r3, #0]
 8004c48:	3308      	adds	r3, #8
 8004c4a:	681b      	ldr	r3, [r3, #0]
 8004c4c:	4610      	mov	r0, r2
 8004c4e:	4798      	blx	r3
}
 8004c50:	bf00      	nop
    TransType* newTransition = new (&heap.transitionStorage.at<TransType>(0)) TransType;
 8004c52:	687b      	ldr	r3, [r7, #4]
 8004c54:	68db      	ldr	r3, [r3, #12]
 8004c56:	2100      	movs	r1, #0
 8004c58:	4618      	mov	r0, r3
 8004c5a:	f000 f94d 	bl	8004ef8 <_ZN8touchgfx17AbstractPartition2atINS_14WipeTransitionILNS_9DirectionE0EEEEERT_t>
 8004c5e:	4603      	mov	r3, r0
 8004c60:	4619      	mov	r1, r3
 8004c62:	2038      	movs	r0, #56	@ 0x38
 8004c64:	f7ff f88c 	bl	8003d80 <_ZnwjPv>
 8004c68:	4604      	mov	r4, r0
 8004c6a:	2114      	movs	r1, #20
 8004c6c:	4620      	mov	r0, r4
 8004c6e:	f000 f98b 	bl	8004f88 <_ZN8touchgfx14WipeTransitionILNS_9DirectionE0EEC1Eh>
 8004c72:	637c      	str	r4, [r7, #52]	@ 0x34
    ScreenType* newScreen = new (&heap.screenStorage.at<ScreenType>(0)) ScreenType;
 8004c74:	687b      	ldr	r3, [r7, #4]
 8004c76:	689b      	ldr	r3, [r3, #8]
 8004c78:	2100      	movs	r1, #0
 8004c7a:	4618      	mov	r0, r3
 8004c7c:	f000 f9c6 	bl	800500c <_ZN8touchgfx17AbstractPartition2atI20Localize_AnomalyViewEERT_t>
 8004c80:	4603      	mov	r3, r0
 8004c82:	4619      	mov	r1, r3
 8004c84:	f44f 7070 	mov.w	r0, #960	@ 0x3c0
 8004c88:	f7ff f87a 	bl	8003d80 <_ZnwjPv>
 8004c8c:	4604      	mov	r4, r0
 8004c8e:	4620      	mov	r0, r4
 8004c90:	f005 faea 	bl	800a268 <_ZN20Localize_AnomalyViewC1Ev>
 8004c94:	633c      	str	r4, [r7, #48]	@ 0x30
    PresenterType* newPresenter = new (&heap.presenterStorage.at<PresenterType>(0)) PresenterType(*newScreen);
 8004c96:	687b      	ldr	r3, [r7, #4]
 8004c98:	685b      	ldr	r3, [r3, #4]
 8004c9a:	2100      	movs	r1, #0
 8004c9c:	4618      	mov	r0, r3
 8004c9e:	f000 f9c8 	bl	8005032 <_ZN8touchgfx17AbstractPartition2atI25Localize_AnomalyPresenterEERT_t>
 8004ca2:	4603      	mov	r3, r0
 8004ca4:	4619      	mov	r1, r3
 8004ca6:	2010      	movs	r0, #16
 8004ca8:	f7ff f86a 	bl	8003d80 <_ZnwjPv>
 8004cac:	4604      	mov	r4, r0
 8004cae:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8004cb0:	4620      	mov	r0, r4
 8004cb2:	f005 fa81 	bl	800a1b8 <_ZN25Localize_AnomalyPresenterC1ER20Localize_AnomalyView>
 8004cb6:	62fc      	str	r4, [r7, #44]	@ 0x2c
    *currentTrans = newTransition;
 8004cb8:	683b      	ldr	r3, [r7, #0]
 8004cba:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8004cbc:	601a      	str	r2, [r3, #0]
    *currentPresenter = newPresenter;
 8004cbe:	68bb      	ldr	r3, [r7, #8]
 8004cc0:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8004cc2:	601a      	str	r2, [r3, #0]
    *currentScreen = newScreen;
 8004cc4:	68fb      	ldr	r3, [r7, #12]
 8004cc6:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8004cc8:	601a      	str	r2, [r3, #0]
    model->bind(newPresenter);
 8004cca:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004ccc:	2b00      	cmp	r3, #0
 8004cce:	d002      	beq.n	8004cd6 <_ZN8touchgfx14makeTransitionI20Localize_AnomalyView25Localize_AnomalyPresenterNS_14WipeTransitionILNS_9DirectionE0EEE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x1b2>
 8004cd0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004cd2:	3304      	adds	r3, #4
 8004cd4:	e000      	b.n	8004cd8 <_ZN8touchgfx14makeTransitionI20Localize_AnomalyView25Localize_AnomalyPresenterNS_14WipeTransitionILNS_9DirectionE0EEE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x1b4>
 8004cd6:	2300      	movs	r3, #0
 8004cd8:	4619      	mov	r1, r3
 8004cda:	6cb8      	ldr	r0, [r7, #72]	@ 0x48
 8004cdc:	f7ff fae0 	bl	80042a0 <_ZN5Model4bindEP13ModelListener>
    newPresenter->bind(model);
 8004ce0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004ce2:	3304      	adds	r3, #4
 8004ce4:	6cb9      	ldr	r1, [r7, #72]	@ 0x48
 8004ce6:	4618      	mov	r0, r3
 8004ce8:	f7ff fb18 	bl	800431c <_ZN13ModelListener4bindEP5Model>
    newScreen->bind(*newPresenter);
 8004cec:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004cee:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8004cf0:	4618      	mov	r0, r3
 8004cf2:	f000 f9b1 	bl	8005058 <_ZN8touchgfx4ViewI25Localize_AnomalyPresenterE4bindERS1_>
 8004cf6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004cf8:	61fb      	str	r3, [r7, #28]
 8004cfa:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004cfc:	61bb      	str	r3, [r7, #24]
 8004cfe:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004d00:	617b      	str	r3, [r7, #20]
    newScreen->setupScreen();
 8004d02:	69fb      	ldr	r3, [r7, #28]
 8004d04:	681b      	ldr	r3, [r3, #0]
 8004d06:	330c      	adds	r3, #12
 8004d08:	681b      	ldr	r3, [r3, #0]
 8004d0a:	69f8      	ldr	r0, [r7, #28]
 8004d0c:	4798      	blx	r3
    newPresenter->activate();
 8004d0e:	69bb      	ldr	r3, [r7, #24]
 8004d10:	681b      	ldr	r3, [r3, #0]
 8004d12:	681b      	ldr	r3, [r3, #0]
 8004d14:	69b8      	ldr	r0, [r7, #24]
 8004d16:	4798      	blx	r3
    newScreen->bindTransition(*newTransition);
 8004d18:	6979      	ldr	r1, [r7, #20]
 8004d1a:	69f8      	ldr	r0, [r7, #28]
 8004d1c:	f018 f930 	bl	801cf80 <_ZN8touchgfx6Screen14bindTransitionERNS_10TransitionE>
    newTransition->init();
 8004d20:	697b      	ldr	r3, [r7, #20]
 8004d22:	681b      	ldr	r3, [r3, #0]
 8004d24:	3310      	adds	r3, #16
 8004d26:	681b      	ldr	r3, [r3, #0]
 8004d28:	6978      	ldr	r0, [r7, #20]
 8004d2a:	4798      	blx	r3
    newTransition->invalidate();
 8004d2c:	697b      	ldr	r3, [r7, #20]
 8004d2e:	681b      	ldr	r3, [r3, #0]
 8004d30:	3314      	adds	r3, #20
 8004d32:	681b      	ldr	r3, [r3, #0]
 8004d34:	6978      	ldr	r0, [r7, #20]
 8004d36:	4798      	blx	r3
}
 8004d38:	bf00      	nop
    return newPresenter;
 8004d3a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
}
 8004d3c:	4618      	mov	r0, r3
 8004d3e:	373c      	adds	r7, #60	@ 0x3c
 8004d40:	46bd      	mov	sp, r7
 8004d42:	bd90      	pop	{r4, r7, pc}
 8004d44:	0802bebc 	.word	0x0802bebc
 8004d48:	0802c288 	.word	0x0802c288
 8004d4c:	0802c018 	.word	0x0802c018
 8004d50:	0802c060 	.word	0x0802c060
 8004d54:	0802c104 	.word	0x0802c104

08004d58 <_ZN8touchgfx17AbstractPartition2atINS_12NoTransitionEEERT_t>:
     * @param  index The index into the Partition storage where the returned object is located.
     *
     * @return A typed reference to the object at the specified index.
     */
    template <typename T>
    T& at(const uint16_t index)
 8004d58:	b580      	push	{r7, lr}
 8004d5a:	b082      	sub	sp, #8
 8004d5c:	af00      	add	r7, sp, #0
 8004d5e:	6078      	str	r0, [r7, #4]
 8004d60:	460b      	mov	r3, r1
 8004d62:	807b      	strh	r3, [r7, #2]
    {
        return *static_cast<T*>(element(index));
 8004d64:	687b      	ldr	r3, [r7, #4]
 8004d66:	681b      	ldr	r3, [r3, #0]
 8004d68:	3324      	adds	r3, #36	@ 0x24
 8004d6a:	681b      	ldr	r3, [r3, #0]
 8004d6c:	887a      	ldrh	r2, [r7, #2]
 8004d6e:	4611      	mov	r1, r2
 8004d70:	6878      	ldr	r0, [r7, #4]
 8004d72:	4798      	blx	r3
 8004d74:	4603      	mov	r3, r0
    }
 8004d76:	4618      	mov	r0, r3
 8004d78:	3708      	adds	r7, #8
 8004d7a:	46bd      	mov	sp, r7
 8004d7c:	bd80      	pop	{r7, pc}

08004d7e <_ZN8touchgfx17AbstractPartition2atI8MainViewEERT_t>:
    T& at(const uint16_t index)
 8004d7e:	b580      	push	{r7, lr}
 8004d80:	b082      	sub	sp, #8
 8004d82:	af00      	add	r7, sp, #0
 8004d84:	6078      	str	r0, [r7, #4]
 8004d86:	460b      	mov	r3, r1
 8004d88:	807b      	strh	r3, [r7, #2]
        return *static_cast<T*>(element(index));
 8004d8a:	687b      	ldr	r3, [r7, #4]
 8004d8c:	681b      	ldr	r3, [r3, #0]
 8004d8e:	3324      	adds	r3, #36	@ 0x24
 8004d90:	681b      	ldr	r3, [r3, #0]
 8004d92:	887a      	ldrh	r2, [r7, #2]
 8004d94:	4611      	mov	r1, r2
 8004d96:	6878      	ldr	r0, [r7, #4]
 8004d98:	4798      	blx	r3
 8004d9a:	4603      	mov	r3, r0
    }
 8004d9c:	4618      	mov	r0, r3
 8004d9e:	3708      	adds	r7, #8
 8004da0:	46bd      	mov	sp, r7
 8004da2:	bd80      	pop	{r7, pc}

08004da4 <_ZN8touchgfx17AbstractPartition2atI13MainPresenterEERT_t>:
    T& at(const uint16_t index)
 8004da4:	b580      	push	{r7, lr}
 8004da6:	b082      	sub	sp, #8
 8004da8:	af00      	add	r7, sp, #0
 8004daa:	6078      	str	r0, [r7, #4]
 8004dac:	460b      	mov	r3, r1
 8004dae:	807b      	strh	r3, [r7, #2]
        return *static_cast<T*>(element(index));
 8004db0:	687b      	ldr	r3, [r7, #4]
 8004db2:	681b      	ldr	r3, [r3, #0]
 8004db4:	3324      	adds	r3, #36	@ 0x24
 8004db6:	681b      	ldr	r3, [r3, #0]
 8004db8:	887a      	ldrh	r2, [r7, #2]
 8004dba:	4611      	mov	r1, r2
 8004dbc:	6878      	ldr	r0, [r7, #4]
 8004dbe:	4798      	blx	r3
 8004dc0:	4603      	mov	r3, r0
    }
 8004dc2:	4618      	mov	r0, r3
 8004dc4:	3708      	adds	r7, #8
 8004dc6:	46bd      	mov	sp, r7
 8004dc8:	bd80      	pop	{r7, pc}

08004dca <_ZN8touchgfx4ViewI13MainPresenterE4bindERS1_>:
     * Binds an instance of a specific Presenter type (subclass) to the View instance. This
     * function is called automatically when a new presenter/view pair is activated.
     *
     * @param [in] presenter The specific Presenter to be associated with the View.
     */
    void bind(T& presenter)
 8004dca:	b480      	push	{r7}
 8004dcc:	b083      	sub	sp, #12
 8004dce:	af00      	add	r7, sp, #0
 8004dd0:	6078      	str	r0, [r7, #4]
 8004dd2:	6039      	str	r1, [r7, #0]
    {
        this->presenter = &presenter;
 8004dd4:	687b      	ldr	r3, [r7, #4]
 8004dd6:	683a      	ldr	r2, [r7, #0]
 8004dd8:	63da      	str	r2, [r3, #60]	@ 0x3c
    }
 8004dda:	bf00      	nop
 8004ddc:	370c      	adds	r7, #12
 8004dde:	46bd      	mov	sp, r7
 8004de0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004de4:	4770      	bx	lr

08004de6 <_ZN8touchgfx17AbstractPartition2atINS_14WipeTransitionILNS_9DirectionE1EEEEERT_t>:
    T& at(const uint16_t index)
 8004de6:	b580      	push	{r7, lr}
 8004de8:	b082      	sub	sp, #8
 8004dea:	af00      	add	r7, sp, #0
 8004dec:	6078      	str	r0, [r7, #4]
 8004dee:	460b      	mov	r3, r1
 8004df0:	807b      	strh	r3, [r7, #2]
        return *static_cast<T*>(element(index));
 8004df2:	687b      	ldr	r3, [r7, #4]
 8004df4:	681b      	ldr	r3, [r3, #0]
 8004df6:	3324      	adds	r3, #36	@ 0x24
 8004df8:	681b      	ldr	r3, [r3, #0]
 8004dfa:	887a      	ldrh	r2, [r7, #2]
 8004dfc:	4611      	mov	r1, r2
 8004dfe:	6878      	ldr	r0, [r7, #4]
 8004e00:	4798      	blx	r3
 8004e02:	4603      	mov	r3, r0
    }
 8004e04:	4618      	mov	r0, r3
 8004e06:	3708      	adds	r7, #8
 8004e08:	46bd      	mov	sp, r7
 8004e0a:	bd80      	pop	{r7, pc}

08004e0c <_ZN8touchgfx14WipeTransitionILNS_9DirectionE1EE13FullSolidRectC1Ev>:
{
public:
    /**
     * A Widget that reports solid and but does not draw anything.
     */
    class FullSolidRect : public Widget
 8004e0c:	b580      	push	{r7, lr}
 8004e0e:	b082      	sub	sp, #8
 8004e10:	af00      	add	r7, sp, #0
 8004e12:	6078      	str	r0, [r7, #4]
 8004e14:	687b      	ldr	r3, [r7, #4]
 8004e16:	4618      	mov	r0, r3
 8004e18:	f7ff fa8e 	bl	8004338 <_ZN8touchgfx6WidgetC1Ev>
 8004e1c:	4a03      	ldr	r2, [pc, #12]	@ (8004e2c <_ZN8touchgfx14WipeTransitionILNS_9DirectionE1EE13FullSolidRectC1Ev+0x20>)
 8004e1e:	687b      	ldr	r3, [r7, #4]
 8004e20:	601a      	str	r2, [r3, #0]
 8004e22:	687b      	ldr	r3, [r7, #4]
 8004e24:	4618      	mov	r0, r3
 8004e26:	3708      	adds	r7, #8
 8004e28:	46bd      	mov	sp, r7
 8004e2a:	bd80      	pop	{r7, pc}
 8004e2c:	0802cd40 	.word	0x0802cd40

08004e30 <_ZN8touchgfx14WipeTransitionILNS_9DirectionE1EE13FullSolidRectD1Ev>:
 8004e30:	b580      	push	{r7, lr}
 8004e32:	b082      	sub	sp, #8
 8004e34:	af00      	add	r7, sp, #0
 8004e36:	6078      	str	r0, [r7, #4]
 8004e38:	4a05      	ldr	r2, [pc, #20]	@ (8004e50 <_ZN8touchgfx14WipeTransitionILNS_9DirectionE1EE13FullSolidRectD1Ev+0x20>)
 8004e3a:	687b      	ldr	r3, [r7, #4]
 8004e3c:	601a      	str	r2, [r3, #0]
 8004e3e:	687b      	ldr	r3, [r7, #4]
 8004e40:	4618      	mov	r0, r3
 8004e42:	f7ff fa8b 	bl	800435c <_ZN8touchgfx6WidgetD1Ev>
 8004e46:	687b      	ldr	r3, [r7, #4]
 8004e48:	4618      	mov	r0, r3
 8004e4a:	3708      	adds	r7, #8
 8004e4c:	46bd      	mov	sp, r7
 8004e4e:	bd80      	pop	{r7, pc}
 8004e50:	0802cd40 	.word	0x0802cd40

08004e54 <_ZN8touchgfx14WipeTransitionILNS_9DirectionE1EE13FullSolidRectD0Ev>:
 8004e54:	b580      	push	{r7, lr}
 8004e56:	b082      	sub	sp, #8
 8004e58:	af00      	add	r7, sp, #0
 8004e5a:	6078      	str	r0, [r7, #4]
 8004e5c:	6878      	ldr	r0, [r7, #4]
 8004e5e:	f7ff ffe7 	bl	8004e30 <_ZN8touchgfx14WipeTransitionILNS_9DirectionE1EE13FullSolidRectD1Ev>
 8004e62:	2128      	movs	r1, #40	@ 0x28
 8004e64:	6878      	ldr	r0, [r7, #4]
 8004e66:	f025 fd36 	bl	802a8d6 <_ZdlPvj>
 8004e6a:	687b      	ldr	r3, [r7, #4]
 8004e6c:	4618      	mov	r0, r3
 8004e6e:	3708      	adds	r7, #8
 8004e70:	46bd      	mov	sp, r7
 8004e72:	bd80      	pop	{r7, pc}

08004e74 <_ZN8touchgfx14WipeTransitionILNS_9DirectionE1EEC1Eh>:
    /**
     * Initializes a new instance of the WipeTransition class.
     *
     * @param  transitionSteps (Optional) Number of steps in the transition animation.
     */
    WipeTransition(const uint8_t transitionSteps = 20)
 8004e74:	b580      	push	{r7, lr}
 8004e76:	b084      	sub	sp, #16
 8004e78:	af02      	add	r7, sp, #8
 8004e7a:	6078      	str	r0, [r7, #4]
 8004e7c:	460b      	mov	r3, r1
 8004e7e:	70fb      	strb	r3, [r7, #3]
        : Transition(),
          animationSteps(transitionSteps),
          animationCounter(0),
          calculatedValue(0),
          solid()
 8004e80:	687b      	ldr	r3, [r7, #4]
 8004e82:	4618      	mov	r0, r3
 8004e84:	f7ff f97a 	bl	800417c <_ZN8touchgfx10TransitionC1Ev>
 8004e88:	4a18      	ldr	r2, [pc, #96]	@ (8004eec <_ZN8touchgfx14WipeTransitionILNS_9DirectionE1EEC1Eh+0x78>)
 8004e8a:	687b      	ldr	r3, [r7, #4]
 8004e8c:	601a      	str	r2, [r3, #0]
          animationSteps(transitionSteps),
 8004e8e:	687b      	ldr	r3, [r7, #4]
 8004e90:	78fa      	ldrb	r2, [r7, #3]
 8004e92:	725a      	strb	r2, [r3, #9]
          animationCounter(0),
 8004e94:	687b      	ldr	r3, [r7, #4]
 8004e96:	2200      	movs	r2, #0
 8004e98:	729a      	strb	r2, [r3, #10]
          calculatedValue(0),
 8004e9a:	687b      	ldr	r3, [r7, #4]
 8004e9c:	2200      	movs	r2, #0
 8004e9e:	81da      	strh	r2, [r3, #14]
          solid()
 8004ea0:	687b      	ldr	r3, [r7, #4]
 8004ea2:	3310      	adds	r3, #16
 8004ea4:	2228      	movs	r2, #40	@ 0x28
 8004ea6:	2100      	movs	r1, #0
 8004ea8:	4618      	mov	r0, r3
 8004eaa:	f025 ff4a 	bl	802ad42 <memset>
 8004eae:	687b      	ldr	r3, [r7, #4]
 8004eb0:	3310      	adds	r3, #16
 8004eb2:	4618      	mov	r0, r3
 8004eb4:	f7ff ffaa 	bl	8004e0c <_ZN8touchgfx14WipeTransitionILNS_9DirectionE1EE13FullSolidRectC1Ev>
        case WEST:
            targetValue = HAL::DISPLAY_WIDTH;
            break;
        case NORTH:
        case SOUTH:
            targetValue = HAL::DISPLAY_HEIGHT;
 8004eb8:	4b0d      	ldr	r3, [pc, #52]	@ (8004ef0 <_ZN8touchgfx14WipeTransitionILNS_9DirectionE1EEC1Eh+0x7c>)
 8004eba:	881b      	ldrh	r3, [r3, #0]
 8004ebc:	b21a      	sxth	r2, r3
 8004ebe:	687b      	ldr	r3, [r7, #4]
 8004ec0:	819a      	strh	r2, [r3, #12]
            break;
 8004ec2:	bf00      	nop
            // Nothing to do here
            break;
        }

        // Ensure that the solid area covers the entire screen
        solid.setPosition(0, 0, HAL::DISPLAY_WIDTH, HAL::DISPLAY_HEIGHT);
 8004ec4:	687b      	ldr	r3, [r7, #4]
 8004ec6:	f103 0010 	add.w	r0, r3, #16
 8004eca:	4b0a      	ldr	r3, [pc, #40]	@ (8004ef4 <_ZN8touchgfx14WipeTransitionILNS_9DirectionE1EEC1Eh+0x80>)
 8004ecc:	881b      	ldrh	r3, [r3, #0]
 8004ece:	b21a      	sxth	r2, r3
 8004ed0:	4b07      	ldr	r3, [pc, #28]	@ (8004ef0 <_ZN8touchgfx14WipeTransitionILNS_9DirectionE1EEC1Eh+0x7c>)
 8004ed2:	881b      	ldrh	r3, [r3, #0]
 8004ed4:	b21b      	sxth	r3, r3
 8004ed6:	9300      	str	r3, [sp, #0]
 8004ed8:	4613      	mov	r3, r2
 8004eda:	2200      	movs	r2, #0
 8004edc:	2100      	movs	r1, #0
 8004ede:	f7fe ffe2 	bl	8003ea6 <_ZN8touchgfx8Drawable11setPositionEssss>
    }
 8004ee2:	687b      	ldr	r3, [r7, #4]
 8004ee4:	4618      	mov	r0, r3
 8004ee6:	3708      	adds	r7, #8
 8004ee8:	46bd      	mov	sp, r7
 8004eea:	bd80      	pop	{r7, pc}
 8004eec:	0802cd1c 	.word	0x0802cd1c
 8004ef0:	2400b876 	.word	0x2400b876
 8004ef4:	2400b874 	.word	0x2400b874

08004ef8 <_ZN8touchgfx17AbstractPartition2atINS_14WipeTransitionILNS_9DirectionE0EEEEERT_t>:
    T& at(const uint16_t index)
 8004ef8:	b580      	push	{r7, lr}
 8004efa:	b082      	sub	sp, #8
 8004efc:	af00      	add	r7, sp, #0
 8004efe:	6078      	str	r0, [r7, #4]
 8004f00:	460b      	mov	r3, r1
 8004f02:	807b      	strh	r3, [r7, #2]
        return *static_cast<T*>(element(index));
 8004f04:	687b      	ldr	r3, [r7, #4]
 8004f06:	681b      	ldr	r3, [r3, #0]
 8004f08:	3324      	adds	r3, #36	@ 0x24
 8004f0a:	681b      	ldr	r3, [r3, #0]
 8004f0c:	887a      	ldrh	r2, [r7, #2]
 8004f0e:	4611      	mov	r1, r2
 8004f10:	6878      	ldr	r0, [r7, #4]
 8004f12:	4798      	blx	r3
 8004f14:	4603      	mov	r3, r0
    }
 8004f16:	4618      	mov	r0, r3
 8004f18:	3708      	adds	r7, #8
 8004f1a:	46bd      	mov	sp, r7
 8004f1c:	bd80      	pop	{r7, pc}
	...

08004f20 <_ZN8touchgfx14WipeTransitionILNS_9DirectionE0EE13FullSolidRectC1Ev>:
    class FullSolidRect : public Widget
 8004f20:	b580      	push	{r7, lr}
 8004f22:	b082      	sub	sp, #8
 8004f24:	af00      	add	r7, sp, #0
 8004f26:	6078      	str	r0, [r7, #4]
 8004f28:	687b      	ldr	r3, [r7, #4]
 8004f2a:	4618      	mov	r0, r3
 8004f2c:	f7ff fa04 	bl	8004338 <_ZN8touchgfx6WidgetC1Ev>
 8004f30:	4a03      	ldr	r2, [pc, #12]	@ (8004f40 <_ZN8touchgfx14WipeTransitionILNS_9DirectionE0EE13FullSolidRectC1Ev+0x20>)
 8004f32:	687b      	ldr	r3, [r7, #4]
 8004f34:	601a      	str	r2, [r3, #0]
 8004f36:	687b      	ldr	r3, [r7, #4]
 8004f38:	4618      	mov	r0, r3
 8004f3a:	3708      	adds	r7, #8
 8004f3c:	46bd      	mov	sp, r7
 8004f3e:	bd80      	pop	{r7, pc}
 8004f40:	0802cdc8 	.word	0x0802cdc8

08004f44 <_ZN8touchgfx14WipeTransitionILNS_9DirectionE0EE13FullSolidRectD1Ev>:
 8004f44:	b580      	push	{r7, lr}
 8004f46:	b082      	sub	sp, #8
 8004f48:	af00      	add	r7, sp, #0
 8004f4a:	6078      	str	r0, [r7, #4]
 8004f4c:	4a05      	ldr	r2, [pc, #20]	@ (8004f64 <_ZN8touchgfx14WipeTransitionILNS_9DirectionE0EE13FullSolidRectD1Ev+0x20>)
 8004f4e:	687b      	ldr	r3, [r7, #4]
 8004f50:	601a      	str	r2, [r3, #0]
 8004f52:	687b      	ldr	r3, [r7, #4]
 8004f54:	4618      	mov	r0, r3
 8004f56:	f7ff fa01 	bl	800435c <_ZN8touchgfx6WidgetD1Ev>
 8004f5a:	687b      	ldr	r3, [r7, #4]
 8004f5c:	4618      	mov	r0, r3
 8004f5e:	3708      	adds	r7, #8
 8004f60:	46bd      	mov	sp, r7
 8004f62:	bd80      	pop	{r7, pc}
 8004f64:	0802cdc8 	.word	0x0802cdc8

08004f68 <_ZN8touchgfx14WipeTransitionILNS_9DirectionE0EE13FullSolidRectD0Ev>:
 8004f68:	b580      	push	{r7, lr}
 8004f6a:	b082      	sub	sp, #8
 8004f6c:	af00      	add	r7, sp, #0
 8004f6e:	6078      	str	r0, [r7, #4]
 8004f70:	6878      	ldr	r0, [r7, #4]
 8004f72:	f7ff ffe7 	bl	8004f44 <_ZN8touchgfx14WipeTransitionILNS_9DirectionE0EE13FullSolidRectD1Ev>
 8004f76:	2128      	movs	r1, #40	@ 0x28
 8004f78:	6878      	ldr	r0, [r7, #4]
 8004f7a:	f025 fcac 	bl	802a8d6 <_ZdlPvj>
 8004f7e:	687b      	ldr	r3, [r7, #4]
 8004f80:	4618      	mov	r0, r3
 8004f82:	3708      	adds	r7, #8
 8004f84:	46bd      	mov	sp, r7
 8004f86:	bd80      	pop	{r7, pc}

08004f88 <_ZN8touchgfx14WipeTransitionILNS_9DirectionE0EEC1Eh>:
    WipeTransition(const uint8_t transitionSteps = 20)
 8004f88:	b580      	push	{r7, lr}
 8004f8a:	b084      	sub	sp, #16
 8004f8c:	af02      	add	r7, sp, #8
 8004f8e:	6078      	str	r0, [r7, #4]
 8004f90:	460b      	mov	r3, r1
 8004f92:	70fb      	strb	r3, [r7, #3]
          solid()
 8004f94:	687b      	ldr	r3, [r7, #4]
 8004f96:	4618      	mov	r0, r3
 8004f98:	f7ff f8f0 	bl	800417c <_ZN8touchgfx10TransitionC1Ev>
 8004f9c:	4a18      	ldr	r2, [pc, #96]	@ (8005000 <_ZN8touchgfx14WipeTransitionILNS_9DirectionE0EEC1Eh+0x78>)
 8004f9e:	687b      	ldr	r3, [r7, #4]
 8004fa0:	601a      	str	r2, [r3, #0]
          animationSteps(transitionSteps),
 8004fa2:	687b      	ldr	r3, [r7, #4]
 8004fa4:	78fa      	ldrb	r2, [r7, #3]
 8004fa6:	725a      	strb	r2, [r3, #9]
          animationCounter(0),
 8004fa8:	687b      	ldr	r3, [r7, #4]
 8004faa:	2200      	movs	r2, #0
 8004fac:	729a      	strb	r2, [r3, #10]
          calculatedValue(0),
 8004fae:	687b      	ldr	r3, [r7, #4]
 8004fb0:	2200      	movs	r2, #0
 8004fb2:	81da      	strh	r2, [r3, #14]
          solid()
 8004fb4:	687b      	ldr	r3, [r7, #4]
 8004fb6:	3310      	adds	r3, #16
 8004fb8:	2228      	movs	r2, #40	@ 0x28
 8004fba:	2100      	movs	r1, #0
 8004fbc:	4618      	mov	r0, r3
 8004fbe:	f025 fec0 	bl	802ad42 <memset>
 8004fc2:	687b      	ldr	r3, [r7, #4]
 8004fc4:	3310      	adds	r3, #16
 8004fc6:	4618      	mov	r0, r3
 8004fc8:	f7ff ffaa 	bl	8004f20 <_ZN8touchgfx14WipeTransitionILNS_9DirectionE0EE13FullSolidRectC1Ev>
            targetValue = HAL::DISPLAY_HEIGHT;
 8004fcc:	4b0d      	ldr	r3, [pc, #52]	@ (8005004 <_ZN8touchgfx14WipeTransitionILNS_9DirectionE0EEC1Eh+0x7c>)
 8004fce:	881b      	ldrh	r3, [r3, #0]
 8004fd0:	b21a      	sxth	r2, r3
 8004fd2:	687b      	ldr	r3, [r7, #4]
 8004fd4:	819a      	strh	r2, [r3, #12]
            break;
 8004fd6:	bf00      	nop
        solid.setPosition(0, 0, HAL::DISPLAY_WIDTH, HAL::DISPLAY_HEIGHT);
 8004fd8:	687b      	ldr	r3, [r7, #4]
 8004fda:	f103 0010 	add.w	r0, r3, #16
 8004fde:	4b0a      	ldr	r3, [pc, #40]	@ (8005008 <_ZN8touchgfx14WipeTransitionILNS_9DirectionE0EEC1Eh+0x80>)
 8004fe0:	881b      	ldrh	r3, [r3, #0]
 8004fe2:	b21a      	sxth	r2, r3
 8004fe4:	4b07      	ldr	r3, [pc, #28]	@ (8005004 <_ZN8touchgfx14WipeTransitionILNS_9DirectionE0EEC1Eh+0x7c>)
 8004fe6:	881b      	ldrh	r3, [r3, #0]
 8004fe8:	b21b      	sxth	r3, r3
 8004fea:	9300      	str	r3, [sp, #0]
 8004fec:	4613      	mov	r3, r2
 8004fee:	2200      	movs	r2, #0
 8004ff0:	2100      	movs	r1, #0
 8004ff2:	f7fe ff58 	bl	8003ea6 <_ZN8touchgfx8Drawable11setPositionEssss>
    }
 8004ff6:	687b      	ldr	r3, [r7, #4]
 8004ff8:	4618      	mov	r0, r3
 8004ffa:	3708      	adds	r7, #8
 8004ffc:	46bd      	mov	sp, r7
 8004ffe:	bd80      	pop	{r7, pc}
 8005000:	0802cda4 	.word	0x0802cda4
 8005004:	2400b876 	.word	0x2400b876
 8005008:	2400b874 	.word	0x2400b874

0800500c <_ZN8touchgfx17AbstractPartition2atI20Localize_AnomalyViewEERT_t>:
    T& at(const uint16_t index)
 800500c:	b580      	push	{r7, lr}
 800500e:	b082      	sub	sp, #8
 8005010:	af00      	add	r7, sp, #0
 8005012:	6078      	str	r0, [r7, #4]
 8005014:	460b      	mov	r3, r1
 8005016:	807b      	strh	r3, [r7, #2]
        return *static_cast<T*>(element(index));
 8005018:	687b      	ldr	r3, [r7, #4]
 800501a:	681b      	ldr	r3, [r3, #0]
 800501c:	3324      	adds	r3, #36	@ 0x24
 800501e:	681b      	ldr	r3, [r3, #0]
 8005020:	887a      	ldrh	r2, [r7, #2]
 8005022:	4611      	mov	r1, r2
 8005024:	6878      	ldr	r0, [r7, #4]
 8005026:	4798      	blx	r3
 8005028:	4603      	mov	r3, r0
    }
 800502a:	4618      	mov	r0, r3
 800502c:	3708      	adds	r7, #8
 800502e:	46bd      	mov	sp, r7
 8005030:	bd80      	pop	{r7, pc}

08005032 <_ZN8touchgfx17AbstractPartition2atI25Localize_AnomalyPresenterEERT_t>:
    T& at(const uint16_t index)
 8005032:	b580      	push	{r7, lr}
 8005034:	b082      	sub	sp, #8
 8005036:	af00      	add	r7, sp, #0
 8005038:	6078      	str	r0, [r7, #4]
 800503a:	460b      	mov	r3, r1
 800503c:	807b      	strh	r3, [r7, #2]
        return *static_cast<T*>(element(index));
 800503e:	687b      	ldr	r3, [r7, #4]
 8005040:	681b      	ldr	r3, [r3, #0]
 8005042:	3324      	adds	r3, #36	@ 0x24
 8005044:	681b      	ldr	r3, [r3, #0]
 8005046:	887a      	ldrh	r2, [r7, #2]
 8005048:	4611      	mov	r1, r2
 800504a:	6878      	ldr	r0, [r7, #4]
 800504c:	4798      	blx	r3
 800504e:	4603      	mov	r3, r0
    }
 8005050:	4618      	mov	r0, r3
 8005052:	3708      	adds	r7, #8
 8005054:	46bd      	mov	sp, r7
 8005056:	bd80      	pop	{r7, pc}

08005058 <_ZN8touchgfx4ViewI25Localize_AnomalyPresenterE4bindERS1_>:
    void bind(T& presenter)
 8005058:	b480      	push	{r7}
 800505a:	b083      	sub	sp, #12
 800505c:	af00      	add	r7, sp, #0
 800505e:	6078      	str	r0, [r7, #4]
 8005060:	6039      	str	r1, [r7, #0]
        this->presenter = &presenter;
 8005062:	687b      	ldr	r3, [r7, #4]
 8005064:	683a      	ldr	r2, [r7, #0]
 8005066:	63da      	str	r2, [r3, #60]	@ 0x3c
    }
 8005068:	bf00      	nop
 800506a:	370c      	adds	r7, #12
 800506c:	46bd      	mov	sp, r7
 800506e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005072:	4770      	bx	lr

08005074 <_ZN8touchgfx14WipeTransitionILNS_9DirectionE1EED1Ev>:
class WipeTransition : public Transition
 8005074:	b580      	push	{r7, lr}
 8005076:	b082      	sub	sp, #8
 8005078:	af00      	add	r7, sp, #0
 800507a:	6078      	str	r0, [r7, #4]
 800507c:	4a08      	ldr	r2, [pc, #32]	@ (80050a0 <_ZN8touchgfx14WipeTransitionILNS_9DirectionE1EED1Ev+0x2c>)
 800507e:	687b      	ldr	r3, [r7, #4]
 8005080:	601a      	str	r2, [r3, #0]
 8005082:	687b      	ldr	r3, [r7, #4]
 8005084:	3310      	adds	r3, #16
 8005086:	4618      	mov	r0, r3
 8005088:	f7ff fed2 	bl	8004e30 <_ZN8touchgfx14WipeTransitionILNS_9DirectionE1EE13FullSolidRectD1Ev>
 800508c:	687b      	ldr	r3, [r7, #4]
 800508e:	4618      	mov	r0, r3
 8005090:	f7ff f88a 	bl	80041a8 <_ZN8touchgfx10TransitionD1Ev>
 8005094:	687b      	ldr	r3, [r7, #4]
 8005096:	4618      	mov	r0, r3
 8005098:	3708      	adds	r7, #8
 800509a:	46bd      	mov	sp, r7
 800509c:	bd80      	pop	{r7, pc}
 800509e:	bf00      	nop
 80050a0:	0802cd1c 	.word	0x0802cd1c

080050a4 <_ZN8touchgfx14WipeTransitionILNS_9DirectionE1EED0Ev>:
 80050a4:	b580      	push	{r7, lr}
 80050a6:	b082      	sub	sp, #8
 80050a8:	af00      	add	r7, sp, #0
 80050aa:	6078      	str	r0, [r7, #4]
 80050ac:	6878      	ldr	r0, [r7, #4]
 80050ae:	f7ff ffe1 	bl	8005074 <_ZN8touchgfx14WipeTransitionILNS_9DirectionE1EED1Ev>
 80050b2:	2138      	movs	r1, #56	@ 0x38
 80050b4:	6878      	ldr	r0, [r7, #4]
 80050b6:	f025 fc0e 	bl	802a8d6 <_ZdlPvj>
 80050ba:	687b      	ldr	r3, [r7, #4]
 80050bc:	4618      	mov	r0, r3
 80050be:	3708      	adds	r7, #8
 80050c0:	46bd      	mov	sp, r7
 80050c2:	bd80      	pop	{r7, pc}

080050c4 <_ZN8touchgfx14WipeTransitionILNS_9DirectionE0EED1Ev>:
 80050c4:	b580      	push	{r7, lr}
 80050c6:	b082      	sub	sp, #8
 80050c8:	af00      	add	r7, sp, #0
 80050ca:	6078      	str	r0, [r7, #4]
 80050cc:	4a08      	ldr	r2, [pc, #32]	@ (80050f0 <_ZN8touchgfx14WipeTransitionILNS_9DirectionE0EED1Ev+0x2c>)
 80050ce:	687b      	ldr	r3, [r7, #4]
 80050d0:	601a      	str	r2, [r3, #0]
 80050d2:	687b      	ldr	r3, [r7, #4]
 80050d4:	3310      	adds	r3, #16
 80050d6:	4618      	mov	r0, r3
 80050d8:	f7ff ff34 	bl	8004f44 <_ZN8touchgfx14WipeTransitionILNS_9DirectionE0EE13FullSolidRectD1Ev>
 80050dc:	687b      	ldr	r3, [r7, #4]
 80050de:	4618      	mov	r0, r3
 80050e0:	f7ff f862 	bl	80041a8 <_ZN8touchgfx10TransitionD1Ev>
 80050e4:	687b      	ldr	r3, [r7, #4]
 80050e6:	4618      	mov	r0, r3
 80050e8:	3708      	adds	r7, #8
 80050ea:	46bd      	mov	sp, r7
 80050ec:	bd80      	pop	{r7, pc}
 80050ee:	bf00      	nop
 80050f0:	0802cda4 	.word	0x0802cda4

080050f4 <_ZN8touchgfx14WipeTransitionILNS_9DirectionE0EED0Ev>:
 80050f4:	b580      	push	{r7, lr}
 80050f6:	b082      	sub	sp, #8
 80050f8:	af00      	add	r7, sp, #0
 80050fa:	6078      	str	r0, [r7, #4]
 80050fc:	6878      	ldr	r0, [r7, #4]
 80050fe:	f7ff ffe1 	bl	80050c4 <_ZN8touchgfx14WipeTransitionILNS_9DirectionE0EED1Ev>
 8005102:	2138      	movs	r1, #56	@ 0x38
 8005104:	6878      	ldr	r0, [r7, #4]
 8005106:	f025 fbe6 	bl	802a8d6 <_ZdlPvj>
 800510a:	687b      	ldr	r3, [r7, #4]
 800510c:	4618      	mov	r0, r3
 800510e:	3708      	adds	r7, #8
 8005110:	46bd      	mov	sp, r7
 8005112:	bd80      	pop	{r7, pc}

08005114 <_ZN8touchgfx12NoTransitionD1Ev>:
 8005114:	b580      	push	{r7, lr}
 8005116:	b082      	sub	sp, #8
 8005118:	af00      	add	r7, sp, #0
 800511a:	6078      	str	r0, [r7, #4]
 800511c:	4a05      	ldr	r2, [pc, #20]	@ (8005134 <_ZN8touchgfx12NoTransitionD1Ev+0x20>)
 800511e:	687b      	ldr	r3, [r7, #4]
 8005120:	601a      	str	r2, [r3, #0]
 8005122:	687b      	ldr	r3, [r7, #4]
 8005124:	4618      	mov	r0, r3
 8005126:	f7ff f83f 	bl	80041a8 <_ZN8touchgfx10TransitionD1Ev>
 800512a:	687b      	ldr	r3, [r7, #4]
 800512c:	4618      	mov	r0, r3
 800512e:	3708      	adds	r7, #8
 8005130:	46bd      	mov	sp, r7
 8005132:	bd80      	pop	{r7, pc}
 8005134:	0802ce90 	.word	0x0802ce90

08005138 <_ZN8touchgfx12NoTransitionD0Ev>:
 8005138:	b580      	push	{r7, lr}
 800513a:	b082      	sub	sp, #8
 800513c:	af00      	add	r7, sp, #0
 800513e:	6078      	str	r0, [r7, #4]
 8005140:	6878      	ldr	r0, [r7, #4]
 8005142:	f7ff ffe7 	bl	8005114 <_ZN8touchgfx12NoTransitionD1Ev>
 8005146:	210c      	movs	r1, #12
 8005148:	6878      	ldr	r0, [r7, #4]
 800514a:	f025 fbc4 	bl	802a8d6 <_ZdlPvj>
 800514e:	687b      	ldr	r3, [r7, #4]
 8005150:	4618      	mov	r0, r3
 8005152:	3708      	adds	r7, #8
 8005154:	46bd      	mov	sp, r7
 8005156:	bd80      	pop	{r7, pc}

08005158 <_ZN8touchgfx14WipeTransitionILNS_9DirectionE1EE15handleTickEventEv>:

    /**
     * Handles the tick event when transitioning. It uncovers and
     * invalidates increasing parts of the new screen elements.
     */
    virtual void handleTickEvent()
 8005158:	b590      	push	{r4, r7, lr}
 800515a:	b093      	sub	sp, #76	@ 0x4c
 800515c:	af02      	add	r7, sp, #8
 800515e:	6078      	str	r0, [r7, #4]
    {
        Transition::handleTickEvent();
 8005160:	687b      	ldr	r3, [r7, #4]
 8005162:	4618      	mov	r0, r3
 8005164:	f7ff f840 	bl	80041e8 <_ZN8touchgfx10Transition15handleTickEventEv>
        animationCounter++;
 8005168:	687b      	ldr	r3, [r7, #4]
 800516a:	7a9b      	ldrb	r3, [r3, #10]
 800516c:	3301      	adds	r3, #1
 800516e:	b2da      	uxtb	r2, r3
 8005170:	687b      	ldr	r3, [r7, #4]
 8005172:	729a      	strb	r2, [r3, #10]

        // Calculate new position or stop animation
        if (animationCounter <= (animationSteps))
 8005174:	687b      	ldr	r3, [r7, #4]
 8005176:	7a9a      	ldrb	r2, [r3, #10]
 8005178:	687b      	ldr	r3, [r7, #4]
 800517a:	7a5b      	ldrb	r3, [r3, #9]
 800517c:	429a      	cmp	r2, r3
 800517e:	d82a      	bhi.n	80051d6 <_ZN8touchgfx14WipeTransitionILNS_9DirectionE1EE15handleTickEventEv+0x7e>
        {
            // Calculate value in [0;targetValue]
            calculatedValue = EasingEquations::cubicEaseOut(animationCounter, 0, targetValue, animationSteps);
 8005180:	687b      	ldr	r3, [r7, #4]
 8005182:	7a9b      	ldrb	r3, [r3, #10]
 8005184:	4618      	mov	r0, r3
 8005186:	687b      	ldr	r3, [r7, #4]
 8005188:	f9b3 200c 	ldrsh.w	r2, [r3, #12]
 800518c:	687b      	ldr	r3, [r7, #4]
 800518e:	7a5b      	ldrb	r3, [r3, #9]
 8005190:	2100      	movs	r1, #0
 8005192:	f017 fefb 	bl	801cf8c <_ZN8touchgfx15EasingEquations12cubicEaseOutEtsst>
 8005196:	4603      	mov	r3, r0
 8005198:	461a      	mov	r2, r3
 800519a:	687b      	ldr	r3, [r7, #4]
 800519c:	81da      	strh	r2, [r3, #14]

            // Note: Result of "calculatedValue & 1" is compiler dependent for negative values of calculatedValue
            if (calculatedValue % 2)
 800519e:	687b      	ldr	r3, [r7, #4]
 80051a0:	f9b3 300e 	ldrsh.w	r3, [r3, #14]
 80051a4:	b29b      	uxth	r3, r3
 80051a6:	f003 0301 	and.w	r3, r3, #1
 80051aa:	b29b      	uxth	r3, r3
 80051ac:	2b00      	cmp	r3, #0
 80051ae:	d019      	beq.n	80051e4 <_ZN8touchgfx14WipeTransitionILNS_9DirectionE1EE15handleTickEventEv+0x8c>
            {
                // Optimization: calculatedValue is odd, add 1/-1 to move drawables modulo 32 bits in framebuffer
                calculatedValue += (calculatedValue > 0 ? 1 : -1);
 80051b0:	687b      	ldr	r3, [r7, #4]
 80051b2:	f9b3 300e 	ldrsh.w	r3, [r3, #14]
 80051b6:	b29b      	uxth	r3, r3
 80051b8:	687a      	ldr	r2, [r7, #4]
 80051ba:	f9b2 200e 	ldrsh.w	r2, [r2, #14]
 80051be:	2a00      	cmp	r2, #0
 80051c0:	dd01      	ble.n	80051c6 <_ZN8touchgfx14WipeTransitionILNS_9DirectionE1EE15handleTickEventEv+0x6e>
 80051c2:	2201      	movs	r2, #1
 80051c4:	e001      	b.n	80051ca <_ZN8touchgfx14WipeTransitionILNS_9DirectionE1EE15handleTickEventEv+0x72>
 80051c6:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80051ca:	4413      	add	r3, r2
 80051cc:	b29b      	uxth	r3, r3
 80051ce:	b21a      	sxth	r2, r3
 80051d0:	687b      	ldr	r3, [r7, #4]
 80051d2:	81da      	strh	r2, [r3, #14]
 80051d4:	e006      	b.n	80051e4 <_ZN8touchgfx14WipeTransitionILNS_9DirectionE1EE15handleTickEventEv+0x8c>
            }
        }
        else
        {
            // Final step: stop the animation
            done = true;
 80051d6:	687b      	ldr	r3, [r7, #4]
 80051d8:	2201      	movs	r2, #1
 80051da:	721a      	strb	r2, [r3, #8]
            animationCounter = 0;
 80051dc:	687b      	ldr	r3, [r7, #4]
 80051de:	2200      	movs	r2, #0
 80051e0:	729a      	strb	r2, [r3, #10]
            return;
 80051e2:	e07e      	b.n	80052e2 <_ZN8touchgfx14WipeTransitionILNS_9DirectionE1EE15handleTickEventEv+0x18a>
                break;
            }
        case SOUTH:
            {
                // Cover must have height of remaining part
                const uint16_t prevSolidHeight = solid.getHeight();
 80051e4:	687b      	ldr	r3, [r7, #4]
 80051e6:	3310      	adds	r3, #16
 80051e8:	4618      	mov	r0, r3
 80051ea:	f7fe fe8a 	bl	8003f02 <_ZNK8touchgfx8Drawable9getHeightEv>
 80051ee:	4603      	mov	r3, r0
 80051f0:	877b      	strh	r3, [r7, #58]	@ 0x3a
                solid.setHeight(HAL::DISPLAY_HEIGHT - calculatedValue);
 80051f2:	687b      	ldr	r3, [r7, #4]
 80051f4:	f103 0010 	add.w	r0, r3, #16
 80051f8:	4b3b      	ldr	r3, [pc, #236]	@ (80052e8 <_ZN8touchgfx14WipeTransitionILNS_9DirectionE1EE15handleTickEventEv+0x190>)
 80051fa:	881a      	ldrh	r2, [r3, #0]
 80051fc:	687b      	ldr	r3, [r7, #4]
 80051fe:	f9b3 300e 	ldrsh.w	r3, [r3, #14]
 8005202:	b29b      	uxth	r3, r3
 8005204:	1ad3      	subs	r3, r2, r3
 8005206:	b29b      	uxth	r3, r3
 8005208:	b21b      	sxth	r3, r3
 800520a:	4619      	mov	r1, r3
 800520c:	f7fe fed1 	bl	8003fb2 <_ZN8touchgfx8Drawable9setHeightEs>

                // Invalidate the uncovered part
                const uint16_t delta = prevSolidHeight - solid.getHeight();
 8005210:	687b      	ldr	r3, [r7, #4]
 8005212:	3310      	adds	r3, #16
 8005214:	4618      	mov	r0, r3
 8005216:	f7fe fe74 	bl	8003f02 <_ZNK8touchgfx8Drawable9getHeightEv>
 800521a:	4603      	mov	r3, r0
 800521c:	b29b      	uxth	r3, r3
 800521e:	8f7a      	ldrh	r2, [r7, #58]	@ 0x3a
 8005220:	1ad3      	subs	r3, r2, r3
 8005222:	873b      	strh	r3, [r7, #56]	@ 0x38
                Rect r(0, solid.getHeight(), HAL::DISPLAY_WIDTH, delta);
 8005224:	687b      	ldr	r3, [r7, #4]
 8005226:	3310      	adds	r3, #16
 8005228:	4618      	mov	r0, r3
 800522a:	f7fe fe6a 	bl	8003f02 <_ZNK8touchgfx8Drawable9getHeightEv>
 800522e:	4603      	mov	r3, r0
 8005230:	4619      	mov	r1, r3
 8005232:	4b2e      	ldr	r3, [pc, #184]	@ (80052ec <_ZN8touchgfx14WipeTransitionILNS_9DirectionE1EE15handleTickEventEv+0x194>)
 8005234:	881b      	ldrh	r3, [r3, #0]
 8005236:	b21a      	sxth	r2, r3
 8005238:	f9b7 3038 	ldrsh.w	r3, [r7, #56]	@ 0x38
 800523c:	f107 0018 	add.w	r0, r7, #24
 8005240:	9300      	str	r3, [sp, #0]
 8005242:	4613      	mov	r3, r2
 8005244:	460a      	mov	r2, r1
 8005246:	2100      	movs	r1, #0
 8005248:	f7fe fda6 	bl	8003d98 <_ZN8touchgfx4RectC1Essss>
                screenContainer->invalidateRect(r);
 800524c:	687b      	ldr	r3, [r7, #4]
 800524e:	685b      	ldr	r3, [r3, #4]
 8005250:	4618      	mov	r0, r3
 8005252:	687b      	ldr	r3, [r7, #4]
 8005254:	685b      	ldr	r3, [r3, #4]
 8005256:	681b      	ldr	r3, [r3, #0]
 8005258:	3310      	adds	r3, #16
 800525a:	681b      	ldr	r3, [r3, #0]
 800525c:	f107 0218 	add.w	r2, r7, #24
 8005260:	4611      	mov	r1, r2
 8005262:	4798      	blx	r3
                break;
 8005264:	bf00      	nop
        //
        // In the first tick WipeTransition cover "calculatedValue"
        // pixels vertically or horizontally depending on the speed of
        // the transition, so there's no need to transfer that. The
        // solid Widget covers the rest, so we copy those pixels.
        if (animationCounter == 1 && HAL::USE_DOUBLE_BUFFERING)
 8005266:	687b      	ldr	r3, [r7, #4]
 8005268:	7a9b      	ldrb	r3, [r3, #10]
 800526a:	2b01      	cmp	r3, #1
 800526c:	d139      	bne.n	80052e2 <_ZN8touchgfx14WipeTransitionILNS_9DirectionE1EE15handleTickEventEv+0x18a>
 800526e:	4b20      	ldr	r3, [pc, #128]	@ (80052f0 <_ZN8touchgfx14WipeTransitionILNS_9DirectionE1EE15handleTickEventEv+0x198>)
 8005270:	781b      	ldrb	r3, [r3, #0]
 8005272:	2b00      	cmp	r3, #0
 8005274:	d035      	beq.n	80052e2 <_ZN8touchgfx14WipeTransitionILNS_9DirectionE1EE15handleTickEventEv+0x18a>
        {
            Rect rect = solid.getRect(); // Part to copy between buffers
 8005276:	687b      	ldr	r3, [r7, #4]
 8005278:	3310      	adds	r3, #16
 800527a:	4618      	mov	r0, r3
 800527c:	f7fe fe07 	bl	8003e8e <_ZNK8touchgfx8Drawable7getRectEv>
 8005280:	4602      	mov	r2, r0
 8005282:	f107 0310 	add.w	r3, r7, #16
 8005286:	6810      	ldr	r0, [r2, #0]
 8005288:	6851      	ldr	r1, [r2, #4]
 800528a:	c303      	stmia	r3!, {r0, r1}

            // Get the currently displayed framebuffer
            uint16_t* tftFb = HAL::getInstance()->getTFTFrameBuffer();
 800528c:	f7fc ff4a 	bl	8002124 <_ZN8touchgfx3HAL11getInstanceEv>
 8005290:	4603      	mov	r3, r0
 8005292:	681a      	ldr	r2, [r3, #0]
 8005294:	3230      	adds	r2, #48	@ 0x30
 8005296:	6812      	ldr	r2, [r2, #0]
 8005298:	4618      	mov	r0, r3
 800529a:	4790      	blx	r2
 800529c:	63f8      	str	r0, [r7, #60]	@ 0x3c

            Rect source;
 800529e:	f107 0308 	add.w	r3, r7, #8
 80052a2:	4618      	mov	r0, r3
 80052a4:	f7fd fa92 	bl	80027cc <_ZN8touchgfx4RectC1Ev>
            source.x = 0;
 80052a8:	2300      	movs	r3, #0
 80052aa:	813b      	strh	r3, [r7, #8]
            source.y = 0;
 80052ac:	2300      	movs	r3, #0
 80052ae:	817b      	strh	r3, [r7, #10]
            source.width = HAL::DISPLAY_WIDTH;
 80052b0:	4b0e      	ldr	r3, [pc, #56]	@ (80052ec <_ZN8touchgfx14WipeTransitionILNS_9DirectionE1EE15handleTickEventEv+0x194>)
 80052b2:	881b      	ldrh	r3, [r3, #0]
 80052b4:	b21b      	sxth	r3, r3
 80052b6:	81bb      	strh	r3, [r7, #12]
            source.height = HAL::DISPLAY_HEIGHT;
 80052b8:	4b0b      	ldr	r3, [pc, #44]	@ (80052e8 <_ZN8touchgfx14WipeTransitionILNS_9DirectionE1EE15handleTickEventEv+0x190>)
 80052ba:	881b      	ldrh	r3, [r3, #0]
 80052bc:	b21b      	sxth	r3, r3
 80052be:	81fb      	strh	r3, [r7, #14]

            // Copy rect from tft to client framebuffer
            HAL::getInstance()->lcd().blitCopy((const uint16_t*)tftFb, source, rect, 255, false);
 80052c0:	f7fc ff30 	bl	8002124 <_ZN8touchgfx3HAL11getInstanceEv>
 80052c4:	f7fe ff3e 	bl	8004144 <_ZN8touchgfx3HAL3lcdEv>
 80052c8:	6803      	ldr	r3, [r0, #0]
 80052ca:	330c      	adds	r3, #12
 80052cc:	681c      	ldr	r4, [r3, #0]
 80052ce:	f107 0310 	add.w	r3, r7, #16
 80052d2:	f107 0208 	add.w	r2, r7, #8
 80052d6:	2100      	movs	r1, #0
 80052d8:	9101      	str	r1, [sp, #4]
 80052da:	21ff      	movs	r1, #255	@ 0xff
 80052dc:	9100      	str	r1, [sp, #0]
 80052de:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 80052e0:	47a0      	blx	r4
        }
    }
 80052e2:	3744      	adds	r7, #68	@ 0x44
 80052e4:	46bd      	mov	sp, r7
 80052e6:	bd90      	pop	{r4, r7, pc}
 80052e8:	2400b876 	.word	0x2400b876
 80052ec:	2400b874 	.word	0x2400b874
 80052f0:	2400b87e 	.word	0x2400b87e

080052f4 <_ZN8touchgfx14WipeTransitionILNS_9DirectionE1EE8tearDownEv>:

    virtual void tearDown()
 80052f4:	b580      	push	{r7, lr}
 80052f6:	b082      	sub	sp, #8
 80052f8:	af00      	add	r7, sp, #0
 80052fa:	6078      	str	r0, [r7, #4]
    {
        screenContainer->remove(solid);
 80052fc:	687b      	ldr	r3, [r7, #4]
 80052fe:	6858      	ldr	r0, [r3, #4]
 8005300:	687b      	ldr	r3, [r7, #4]
 8005302:	685b      	ldr	r3, [r3, #4]
 8005304:	681b      	ldr	r3, [r3, #0]
 8005306:	3360      	adds	r3, #96	@ 0x60
 8005308:	681b      	ldr	r3, [r3, #0]
 800530a:	687a      	ldr	r2, [r7, #4]
 800530c:	3210      	adds	r2, #16
 800530e:	4611      	mov	r1, r2
 8005310:	4798      	blx	r3
    }
 8005312:	bf00      	nop
 8005314:	3708      	adds	r7, #8
 8005316:	46bd      	mov	sp, r7
 8005318:	bd80      	pop	{r7, pc}

0800531a <_ZN8touchgfx14WipeTransitionILNS_9DirectionE1EE4initEv>:

    virtual void init()
 800531a:	b580      	push	{r7, lr}
 800531c:	b082      	sub	sp, #8
 800531e:	af00      	add	r7, sp, #0
 8005320:	6078      	str	r0, [r7, #4]
    {
        Transition::init();
 8005322:	687b      	ldr	r3, [r7, #4]
 8005324:	4618      	mov	r0, r3
 8005326:	f7fe ff73 	bl	8004210 <_ZN8touchgfx10Transition4initEv>
        // Add the solid (and not-drawing-anything) widget on top to cover the other widgets
        screenContainer->add(solid);
 800532a:	687b      	ldr	r3, [r7, #4]
 800532c:	6858      	ldr	r0, [r3, #4]
 800532e:	687b      	ldr	r3, [r7, #4]
 8005330:	685b      	ldr	r3, [r3, #4]
 8005332:	681b      	ldr	r3, [r3, #0]
 8005334:	335c      	adds	r3, #92	@ 0x5c
 8005336:	681b      	ldr	r3, [r3, #0]
 8005338:	687a      	ldr	r2, [r7, #4]
 800533a:	3210      	adds	r2, #16
 800533c:	4611      	mov	r1, r2
 800533e:	4798      	blx	r3
    }
 8005340:	bf00      	nop
 8005342:	3708      	adds	r7, #8
 8005344:	46bd      	mov	sp, r7
 8005346:	bd80      	pop	{r7, pc}

08005348 <_ZN8touchgfx14WipeTransitionILNS_9DirectionE1EE10invalidateEv>:

    /**
     * Wipe transition does not require an invalidation. Invalidation
     * is handled by the class. Do no invalidation initially.
     */
    virtual void invalidate()
 8005348:	b480      	push	{r7}
 800534a:	b083      	sub	sp, #12
 800534c:	af00      	add	r7, sp, #0
 800534e:	6078      	str	r0, [r7, #4]
    {
    }
 8005350:	bf00      	nop
 8005352:	370c      	adds	r7, #12
 8005354:	46bd      	mov	sp, r7
 8005356:	f85d 7b04 	ldr.w	r7, [sp], #4
 800535a:	4770      	bx	lr

0800535c <_ZNK8touchgfx14WipeTransitionILNS_9DirectionE1EE13FullSolidRect4drawERKNS_4RectE>:
        virtual void draw(const Rect& area) const
 800535c:	b480      	push	{r7}
 800535e:	b083      	sub	sp, #12
 8005360:	af00      	add	r7, sp, #0
 8005362:	6078      	str	r0, [r7, #4]
 8005364:	6039      	str	r1, [r7, #0]
        }
 8005366:	bf00      	nop
 8005368:	370c      	adds	r7, #12
 800536a:	46bd      	mov	sp, r7
 800536c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005370:	4770      	bx	lr

08005372 <_ZNK8touchgfx14WipeTransitionILNS_9DirectionE1EE13FullSolidRect12getSolidRectEv>:
        virtual Rect getSolidRect() const
 8005372:	b580      	push	{r7, lr}
 8005374:	b084      	sub	sp, #16
 8005376:	af02      	add	r7, sp, #8
 8005378:	6078      	str	r0, [r7, #4]
 800537a:	6039      	str	r1, [r7, #0]
            return Rect(0U, 0U, rect.width, rect.height);
 800537c:	683b      	ldr	r3, [r7, #0]
 800537e:	f9b3 2008 	ldrsh.w	r2, [r3, #8]
 8005382:	683b      	ldr	r3, [r7, #0]
 8005384:	f9b3 300a 	ldrsh.w	r3, [r3, #10]
 8005388:	9300      	str	r3, [sp, #0]
 800538a:	4613      	mov	r3, r2
 800538c:	2200      	movs	r2, #0
 800538e:	2100      	movs	r1, #0
 8005390:	6878      	ldr	r0, [r7, #4]
 8005392:	f7fe fd01 	bl	8003d98 <_ZN8touchgfx4RectC1Essss>
        }
 8005396:	6878      	ldr	r0, [r7, #4]
 8005398:	3708      	adds	r7, #8
 800539a:	46bd      	mov	sp, r7
 800539c:	bd80      	pop	{r7, pc}
	...

080053a0 <_ZN8touchgfx14WipeTransitionILNS_9DirectionE0EE15handleTickEventEv>:
    virtual void handleTickEvent()
 80053a0:	b590      	push	{r4, r7, lr}
 80053a2:	b093      	sub	sp, #76	@ 0x4c
 80053a4:	af02      	add	r7, sp, #8
 80053a6:	6078      	str	r0, [r7, #4]
        Transition::handleTickEvent();
 80053a8:	687b      	ldr	r3, [r7, #4]
 80053aa:	4618      	mov	r0, r3
 80053ac:	f7fe ff1c 	bl	80041e8 <_ZN8touchgfx10Transition15handleTickEventEv>
        animationCounter++;
 80053b0:	687b      	ldr	r3, [r7, #4]
 80053b2:	7a9b      	ldrb	r3, [r3, #10]
 80053b4:	3301      	adds	r3, #1
 80053b6:	b2da      	uxtb	r2, r3
 80053b8:	687b      	ldr	r3, [r7, #4]
 80053ba:	729a      	strb	r2, [r3, #10]
        if (animationCounter <= (animationSteps))
 80053bc:	687b      	ldr	r3, [r7, #4]
 80053be:	7a9a      	ldrb	r2, [r3, #10]
 80053c0:	687b      	ldr	r3, [r7, #4]
 80053c2:	7a5b      	ldrb	r3, [r3, #9]
 80053c4:	429a      	cmp	r2, r3
 80053c6:	d82a      	bhi.n	800541e <_ZN8touchgfx14WipeTransitionILNS_9DirectionE0EE15handleTickEventEv+0x7e>
            calculatedValue = EasingEquations::cubicEaseOut(animationCounter, 0, targetValue, animationSteps);
 80053c8:	687b      	ldr	r3, [r7, #4]
 80053ca:	7a9b      	ldrb	r3, [r3, #10]
 80053cc:	4618      	mov	r0, r3
 80053ce:	687b      	ldr	r3, [r7, #4]
 80053d0:	f9b3 200c 	ldrsh.w	r2, [r3, #12]
 80053d4:	687b      	ldr	r3, [r7, #4]
 80053d6:	7a5b      	ldrb	r3, [r3, #9]
 80053d8:	2100      	movs	r1, #0
 80053da:	f017 fdd7 	bl	801cf8c <_ZN8touchgfx15EasingEquations12cubicEaseOutEtsst>
 80053de:	4603      	mov	r3, r0
 80053e0:	461a      	mov	r2, r3
 80053e2:	687b      	ldr	r3, [r7, #4]
 80053e4:	81da      	strh	r2, [r3, #14]
            if (calculatedValue % 2)
 80053e6:	687b      	ldr	r3, [r7, #4]
 80053e8:	f9b3 300e 	ldrsh.w	r3, [r3, #14]
 80053ec:	b29b      	uxth	r3, r3
 80053ee:	f003 0301 	and.w	r3, r3, #1
 80053f2:	b29b      	uxth	r3, r3
 80053f4:	2b00      	cmp	r3, #0
 80053f6:	d019      	beq.n	800542c <_ZN8touchgfx14WipeTransitionILNS_9DirectionE0EE15handleTickEventEv+0x8c>
                calculatedValue += (calculatedValue > 0 ? 1 : -1);
 80053f8:	687b      	ldr	r3, [r7, #4]
 80053fa:	f9b3 300e 	ldrsh.w	r3, [r3, #14]
 80053fe:	b29b      	uxth	r3, r3
 8005400:	687a      	ldr	r2, [r7, #4]
 8005402:	f9b2 200e 	ldrsh.w	r2, [r2, #14]
 8005406:	2a00      	cmp	r2, #0
 8005408:	dd01      	ble.n	800540e <_ZN8touchgfx14WipeTransitionILNS_9DirectionE0EE15handleTickEventEv+0x6e>
 800540a:	2201      	movs	r2, #1
 800540c:	e001      	b.n	8005412 <_ZN8touchgfx14WipeTransitionILNS_9DirectionE0EE15handleTickEventEv+0x72>
 800540e:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8005412:	4413      	add	r3, r2
 8005414:	b29b      	uxth	r3, r3
 8005416:	b21a      	sxth	r2, r3
 8005418:	687b      	ldr	r3, [r7, #4]
 800541a:	81da      	strh	r2, [r3, #14]
 800541c:	e006      	b.n	800542c <_ZN8touchgfx14WipeTransitionILNS_9DirectionE0EE15handleTickEventEv+0x8c>
            done = true;
 800541e:	687b      	ldr	r3, [r7, #4]
 8005420:	2201      	movs	r2, #1
 8005422:	721a      	strb	r2, [r3, #8]
            animationCounter = 0;
 8005424:	687b      	ldr	r3, [r7, #4]
 8005426:	2200      	movs	r2, #0
 8005428:	729a      	strb	r2, [r3, #10]
            return;
 800542a:	e07f      	b.n	800552c <_ZN8touchgfx14WipeTransitionILNS_9DirectionE0EE15handleTickEventEv+0x18c>
                const uint16_t prevSolidPos = solid.getY();
 800542c:	687b      	ldr	r3, [r7, #4]
 800542e:	3310      	adds	r3, #16
 8005430:	4618      	mov	r0, r3
 8005432:	f7fe fd59 	bl	8003ee8 <_ZNK8touchgfx8Drawable4getYEv>
 8005436:	4603      	mov	r3, r0
 8005438:	877b      	strh	r3, [r7, #58]	@ 0x3a
                solid.setHeight(HAL::DISPLAY_HEIGHT - calculatedValue);
 800543a:	687b      	ldr	r3, [r7, #4]
 800543c:	f103 0010 	add.w	r0, r3, #16
 8005440:	4b3c      	ldr	r3, [pc, #240]	@ (8005534 <_ZN8touchgfx14WipeTransitionILNS_9DirectionE0EE15handleTickEventEv+0x194>)
 8005442:	881a      	ldrh	r2, [r3, #0]
 8005444:	687b      	ldr	r3, [r7, #4]
 8005446:	f9b3 300e 	ldrsh.w	r3, [r3, #14]
 800544a:	b29b      	uxth	r3, r3
 800544c:	1ad3      	subs	r3, r2, r3
 800544e:	b29b      	uxth	r3, r3
 8005450:	b21b      	sxth	r3, r3
 8005452:	4619      	mov	r1, r3
 8005454:	f7fe fdad 	bl	8003fb2 <_ZN8touchgfx8Drawable9setHeightEs>
                solid.setY(calculatedValue);
 8005458:	687b      	ldr	r3, [r7, #4]
 800545a:	f103 0210 	add.w	r2, r3, #16
 800545e:	687b      	ldr	r3, [r7, #4]
 8005460:	f9b3 300e 	ldrsh.w	r3, [r3, #14]
 8005464:	4619      	mov	r1, r3
 8005466:	4610      	mov	r0, r2
 8005468:	f7fe fd67 	bl	8003f3a <_ZN8touchgfx8Drawable4setYEs>
                const uint16_t delta = calculatedValue - prevSolidPos;
 800546c:	687b      	ldr	r3, [r7, #4]
 800546e:	f9b3 300e 	ldrsh.w	r3, [r3, #14]
 8005472:	b29a      	uxth	r2, r3
 8005474:	8f7b      	ldrh	r3, [r7, #58]	@ 0x3a
 8005476:	1ad3      	subs	r3, r2, r3
 8005478:	873b      	strh	r3, [r7, #56]	@ 0x38
                Rect r(0, prevSolidPos, HAL::DISPLAY_WIDTH, delta);
 800547a:	f9b7 203a 	ldrsh.w	r2, [r7, #58]	@ 0x3a
 800547e:	4b2e      	ldr	r3, [pc, #184]	@ (8005538 <_ZN8touchgfx14WipeTransitionILNS_9DirectionE0EE15handleTickEventEv+0x198>)
 8005480:	881b      	ldrh	r3, [r3, #0]
 8005482:	b219      	sxth	r1, r3
 8005484:	f9b7 3038 	ldrsh.w	r3, [r7, #56]	@ 0x38
 8005488:	f107 0020 	add.w	r0, r7, #32
 800548c:	9300      	str	r3, [sp, #0]
 800548e:	460b      	mov	r3, r1
 8005490:	2100      	movs	r1, #0
 8005492:	f7fe fc81 	bl	8003d98 <_ZN8touchgfx4RectC1Essss>
                screenContainer->invalidateRect(r);
 8005496:	687b      	ldr	r3, [r7, #4]
 8005498:	685b      	ldr	r3, [r3, #4]
 800549a:	4618      	mov	r0, r3
 800549c:	687b      	ldr	r3, [r7, #4]
 800549e:	685b      	ldr	r3, [r3, #4]
 80054a0:	681b      	ldr	r3, [r3, #0]
 80054a2:	3310      	adds	r3, #16
 80054a4:	681b      	ldr	r3, [r3, #0]
 80054a6:	f107 0220 	add.w	r2, r7, #32
 80054aa:	4611      	mov	r1, r2
 80054ac:	4798      	blx	r3
                break;
 80054ae:	bf00      	nop
        if (animationCounter == 1 && HAL::USE_DOUBLE_BUFFERING)
 80054b0:	687b      	ldr	r3, [r7, #4]
 80054b2:	7a9b      	ldrb	r3, [r3, #10]
 80054b4:	2b01      	cmp	r3, #1
 80054b6:	d139      	bne.n	800552c <_ZN8touchgfx14WipeTransitionILNS_9DirectionE0EE15handleTickEventEv+0x18c>
 80054b8:	4b20      	ldr	r3, [pc, #128]	@ (800553c <_ZN8touchgfx14WipeTransitionILNS_9DirectionE0EE15handleTickEventEv+0x19c>)
 80054ba:	781b      	ldrb	r3, [r3, #0]
 80054bc:	2b00      	cmp	r3, #0
 80054be:	d035      	beq.n	800552c <_ZN8touchgfx14WipeTransitionILNS_9DirectionE0EE15handleTickEventEv+0x18c>
            Rect rect = solid.getRect(); // Part to copy between buffers
 80054c0:	687b      	ldr	r3, [r7, #4]
 80054c2:	3310      	adds	r3, #16
 80054c4:	4618      	mov	r0, r3
 80054c6:	f7fe fce2 	bl	8003e8e <_ZNK8touchgfx8Drawable7getRectEv>
 80054ca:	4602      	mov	r2, r0
 80054cc:	f107 0310 	add.w	r3, r7, #16
 80054d0:	6810      	ldr	r0, [r2, #0]
 80054d2:	6851      	ldr	r1, [r2, #4]
 80054d4:	c303      	stmia	r3!, {r0, r1}
            uint16_t* tftFb = HAL::getInstance()->getTFTFrameBuffer();
 80054d6:	f7fc fe25 	bl	8002124 <_ZN8touchgfx3HAL11getInstanceEv>
 80054da:	4603      	mov	r3, r0
 80054dc:	681a      	ldr	r2, [r3, #0]
 80054de:	3230      	adds	r2, #48	@ 0x30
 80054e0:	6812      	ldr	r2, [r2, #0]
 80054e2:	4618      	mov	r0, r3
 80054e4:	4790      	blx	r2
 80054e6:	63f8      	str	r0, [r7, #60]	@ 0x3c
            Rect source;
 80054e8:	f107 0308 	add.w	r3, r7, #8
 80054ec:	4618      	mov	r0, r3
 80054ee:	f7fd f96d 	bl	80027cc <_ZN8touchgfx4RectC1Ev>
            source.x = 0;
 80054f2:	2300      	movs	r3, #0
 80054f4:	813b      	strh	r3, [r7, #8]
            source.y = 0;
 80054f6:	2300      	movs	r3, #0
 80054f8:	817b      	strh	r3, [r7, #10]
            source.width = HAL::DISPLAY_WIDTH;
 80054fa:	4b0f      	ldr	r3, [pc, #60]	@ (8005538 <_ZN8touchgfx14WipeTransitionILNS_9DirectionE0EE15handleTickEventEv+0x198>)
 80054fc:	881b      	ldrh	r3, [r3, #0]
 80054fe:	b21b      	sxth	r3, r3
 8005500:	81bb      	strh	r3, [r7, #12]
            source.height = HAL::DISPLAY_HEIGHT;
 8005502:	4b0c      	ldr	r3, [pc, #48]	@ (8005534 <_ZN8touchgfx14WipeTransitionILNS_9DirectionE0EE15handleTickEventEv+0x194>)
 8005504:	881b      	ldrh	r3, [r3, #0]
 8005506:	b21b      	sxth	r3, r3
 8005508:	81fb      	strh	r3, [r7, #14]
            HAL::getInstance()->lcd().blitCopy((const uint16_t*)tftFb, source, rect, 255, false);
 800550a:	f7fc fe0b 	bl	8002124 <_ZN8touchgfx3HAL11getInstanceEv>
 800550e:	f7fe fe19 	bl	8004144 <_ZN8touchgfx3HAL3lcdEv>
 8005512:	6803      	ldr	r3, [r0, #0]
 8005514:	330c      	adds	r3, #12
 8005516:	681c      	ldr	r4, [r3, #0]
 8005518:	f107 0310 	add.w	r3, r7, #16
 800551c:	f107 0208 	add.w	r2, r7, #8
 8005520:	2100      	movs	r1, #0
 8005522:	9101      	str	r1, [sp, #4]
 8005524:	21ff      	movs	r1, #255	@ 0xff
 8005526:	9100      	str	r1, [sp, #0]
 8005528:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800552a:	47a0      	blx	r4
    }
 800552c:	3744      	adds	r7, #68	@ 0x44
 800552e:	46bd      	mov	sp, r7
 8005530:	bd90      	pop	{r4, r7, pc}
 8005532:	bf00      	nop
 8005534:	2400b876 	.word	0x2400b876
 8005538:	2400b874 	.word	0x2400b874
 800553c:	2400b87e 	.word	0x2400b87e

08005540 <_ZN8touchgfx14WipeTransitionILNS_9DirectionE0EE8tearDownEv>:
    virtual void tearDown()
 8005540:	b580      	push	{r7, lr}
 8005542:	b082      	sub	sp, #8
 8005544:	af00      	add	r7, sp, #0
 8005546:	6078      	str	r0, [r7, #4]
        screenContainer->remove(solid);
 8005548:	687b      	ldr	r3, [r7, #4]
 800554a:	6858      	ldr	r0, [r3, #4]
 800554c:	687b      	ldr	r3, [r7, #4]
 800554e:	685b      	ldr	r3, [r3, #4]
 8005550:	681b      	ldr	r3, [r3, #0]
 8005552:	3360      	adds	r3, #96	@ 0x60
 8005554:	681b      	ldr	r3, [r3, #0]
 8005556:	687a      	ldr	r2, [r7, #4]
 8005558:	3210      	adds	r2, #16
 800555a:	4611      	mov	r1, r2
 800555c:	4798      	blx	r3
    }
 800555e:	bf00      	nop
 8005560:	3708      	adds	r7, #8
 8005562:	46bd      	mov	sp, r7
 8005564:	bd80      	pop	{r7, pc}

08005566 <_ZN8touchgfx14WipeTransitionILNS_9DirectionE0EE4initEv>:
    virtual void init()
 8005566:	b580      	push	{r7, lr}
 8005568:	b082      	sub	sp, #8
 800556a:	af00      	add	r7, sp, #0
 800556c:	6078      	str	r0, [r7, #4]
        Transition::init();
 800556e:	687b      	ldr	r3, [r7, #4]
 8005570:	4618      	mov	r0, r3
 8005572:	f7fe fe4d 	bl	8004210 <_ZN8touchgfx10Transition4initEv>
        screenContainer->add(solid);
 8005576:	687b      	ldr	r3, [r7, #4]
 8005578:	6858      	ldr	r0, [r3, #4]
 800557a:	687b      	ldr	r3, [r7, #4]
 800557c:	685b      	ldr	r3, [r3, #4]
 800557e:	681b      	ldr	r3, [r3, #0]
 8005580:	335c      	adds	r3, #92	@ 0x5c
 8005582:	681b      	ldr	r3, [r3, #0]
 8005584:	687a      	ldr	r2, [r7, #4]
 8005586:	3210      	adds	r2, #16
 8005588:	4611      	mov	r1, r2
 800558a:	4798      	blx	r3
    }
 800558c:	bf00      	nop
 800558e:	3708      	adds	r7, #8
 8005590:	46bd      	mov	sp, r7
 8005592:	bd80      	pop	{r7, pc}

08005594 <_ZN8touchgfx14WipeTransitionILNS_9DirectionE0EE10invalidateEv>:
    virtual void invalidate()
 8005594:	b480      	push	{r7}
 8005596:	b083      	sub	sp, #12
 8005598:	af00      	add	r7, sp, #0
 800559a:	6078      	str	r0, [r7, #4]
    }
 800559c:	bf00      	nop
 800559e:	370c      	adds	r7, #12
 80055a0:	46bd      	mov	sp, r7
 80055a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055a6:	4770      	bx	lr

080055a8 <_ZNK8touchgfx14WipeTransitionILNS_9DirectionE0EE13FullSolidRect4drawERKNS_4RectE>:
        virtual void draw(const Rect& area) const
 80055a8:	b480      	push	{r7}
 80055aa:	b083      	sub	sp, #12
 80055ac:	af00      	add	r7, sp, #0
 80055ae:	6078      	str	r0, [r7, #4]
 80055b0:	6039      	str	r1, [r7, #0]
        }
 80055b2:	bf00      	nop
 80055b4:	370c      	adds	r7, #12
 80055b6:	46bd      	mov	sp, r7
 80055b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055bc:	4770      	bx	lr

080055be <_ZNK8touchgfx14WipeTransitionILNS_9DirectionE0EE13FullSolidRect12getSolidRectEv>:
        virtual Rect getSolidRect() const
 80055be:	b580      	push	{r7, lr}
 80055c0:	b084      	sub	sp, #16
 80055c2:	af02      	add	r7, sp, #8
 80055c4:	6078      	str	r0, [r7, #4]
 80055c6:	6039      	str	r1, [r7, #0]
            return Rect(0U, 0U, rect.width, rect.height);
 80055c8:	683b      	ldr	r3, [r7, #0]
 80055ca:	f9b3 2008 	ldrsh.w	r2, [r3, #8]
 80055ce:	683b      	ldr	r3, [r7, #0]
 80055d0:	f9b3 300a 	ldrsh.w	r3, [r3, #10]
 80055d4:	9300      	str	r3, [sp, #0]
 80055d6:	4613      	mov	r3, r2
 80055d8:	2200      	movs	r2, #0
 80055da:	2100      	movs	r1, #0
 80055dc:	6878      	ldr	r0, [r7, #4]
 80055de:	f7fe fbdb 	bl	8003d98 <_ZN8touchgfx4RectC1Essss>
        }
 80055e2:	6878      	ldr	r0, [r7, #4]
 80055e4:	3708      	adds	r7, #8
 80055e6:	46bd      	mov	sp, r7
 80055e8:	bd80      	pop	{r7, pc}

080055ea <_ZNK8touchgfx13GeneratedFont12getGSUBTableEv>:
    /**
     * Gets GSUB table.
     *
     * @return The GSUB table or null if font has GSUB no table
     */
    virtual const uint16_t* getGSUBTable() const
 80055ea:	b480      	push	{r7}
 80055ec:	b083      	sub	sp, #12
 80055ee:	af00      	add	r7, sp, #0
 80055f0:	6078      	str	r0, [r7, #4]
    {
        return gsubTable;
 80055f2:	687b      	ldr	r3, [r7, #4]
 80055f4:	6a1b      	ldr	r3, [r3, #32]
    }
 80055f6:	4618      	mov	r0, r3
 80055f8:	370c      	adds	r7, #12
 80055fa:	46bd      	mov	sp, r7
 80055fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005600:	4770      	bx	lr

08005602 <_ZNK8touchgfx13GeneratedFont23getContextualFormsTableEv>:
    /**
     * Gets the contextual forms table used in arabic fonts.
     *
     * @return The FontContextualFormsTable or null if the font has no table.
     */
    virtual const FontContextualFormsTable* getContextualFormsTable() const
 8005602:	b480      	push	{r7}
 8005604:	b083      	sub	sp, #12
 8005606:	af00      	add	r7, sp, #0
 8005608:	6078      	str	r0, [r7, #4]
    {
        return arabicTable;
 800560a:	687b      	ldr	r3, [r7, #4]
 800560c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
    }
 800560e:	4618      	mov	r0, r3
 8005610:	370c      	adds	r7, #12
 8005612:	46bd      	mov	sp, r7
 8005614:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005618:	4770      	bx	lr
	...

0800561c <_ZN8touchgfx13GeneratedFontC1EPKNS_9GlyphNodeEtthhhhhPKPKhPKNS_11KerningNodeEttPKtPKNS_24FontContextualFormsTableE>:

#include <fonts/GeneratedFont.hpp>

namespace touchgfx
{
GeneratedFont::GeneratedFont(const GlyphNode* list, uint16_t size, uint16_t height, uint8_t pixBelowBase, uint8_t bitsPerPixel, uint8_t byteAlignRow, uint8_t maxLeft, uint8_t maxRight, const uint8_t* const* glyphDataInternalFlash, const KerningNode* kerningList, const Unicode::UnicodeChar fallbackChar, const Unicode::UnicodeChar ellipsisChar, const uint16_t* const gsubData, const FontContextualFormsTable* formsTable)
 800561c:	b580      	push	{r7, lr}
 800561e:	b08c      	sub	sp, #48	@ 0x30
 8005620:	af08      	add	r7, sp, #32
 8005622:	60f8      	str	r0, [r7, #12]
 8005624:	60b9      	str	r1, [r7, #8]
 8005626:	4611      	mov	r1, r2
 8005628:	461a      	mov	r2, r3
 800562a:	460b      	mov	r3, r1
 800562c:	80fb      	strh	r3, [r7, #6]
 800562e:	4613      	mov	r3, r2
 8005630:	80bb      	strh	r3, [r7, #4]
    : ConstFont(list, size, height, pixBelowBase, bitsPerPixel, byteAlignRow, maxLeft, maxRight, fallbackChar, ellipsisChar),
      glyphData(glyphDataInternalFlash),
      kerningData(kerningList),
      gsubTable(gsubData),
      arabicTable(formsTable)
 8005632:	68f8      	ldr	r0, [r7, #12]
 8005634:	88b9      	ldrh	r1, [r7, #4]
 8005636:	88fa      	ldrh	r2, [r7, #6]
 8005638:	8f3b      	ldrh	r3, [r7, #56]	@ 0x38
 800563a:	9306      	str	r3, [sp, #24]
 800563c:	8ebb      	ldrh	r3, [r7, #52]	@ 0x34
 800563e:	9305      	str	r3, [sp, #20]
 8005640:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8005644:	9304      	str	r3, [sp, #16]
 8005646:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 800564a:	9303      	str	r3, [sp, #12]
 800564c:	f897 3020 	ldrb.w	r3, [r7, #32]
 8005650:	9302      	str	r3, [sp, #8]
 8005652:	7f3b      	ldrb	r3, [r7, #28]
 8005654:	9301      	str	r3, [sp, #4]
 8005656:	7e3b      	ldrb	r3, [r7, #24]
 8005658:	9300      	str	r3, [sp, #0]
 800565a:	460b      	mov	r3, r1
 800565c:	68b9      	ldr	r1, [r7, #8]
 800565e:	f017 f86f 	bl	801c740 <_ZN8touchgfx9ConstFontC1EPKNS_9GlyphNodeEtthhhhhtt>
 8005662:	4a0a      	ldr	r2, [pc, #40]	@ (800568c <_ZN8touchgfx13GeneratedFontC1EPKNS_9GlyphNodeEtthhhhhPKPKhPKNS_11KerningNodeEttPKtPKNS_24FontContextualFormsTableE+0x70>)
 8005664:	68fb      	ldr	r3, [r7, #12]
 8005666:	601a      	str	r2, [r3, #0]
      glyphData(glyphDataInternalFlash),
 8005668:	68fb      	ldr	r3, [r7, #12]
 800566a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800566c:	619a      	str	r2, [r3, #24]
      kerningData(kerningList),
 800566e:	68fb      	ldr	r3, [r7, #12]
 8005670:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8005672:	61da      	str	r2, [r3, #28]
      gsubTable(gsubData),
 8005674:	68fb      	ldr	r3, [r7, #12]
 8005676:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8005678:	621a      	str	r2, [r3, #32]
      arabicTable(formsTable)
 800567a:	68fb      	ldr	r3, [r7, #12]
 800567c:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800567e:	625a      	str	r2, [r3, #36]	@ 0x24
{
}
 8005680:	68fb      	ldr	r3, [r7, #12]
 8005682:	4618      	mov	r0, r3
 8005684:	3710      	adds	r7, #16
 8005686:	46bd      	mov	sp, r7
 8005688:	bd80      	pop	{r7, pc}
 800568a:	bf00      	nop
 800568c:	0802ced8 	.word	0x0802ced8

08005690 <_ZNK8touchgfx13GeneratedFont12getPixelDataEPKNS_9GlyphNodeE>:

const uint8_t* GeneratedFont::getPixelData(const GlyphNode* glyph) const
{
 8005690:	b480      	push	{r7}
 8005692:	b085      	sub	sp, #20
 8005694:	af00      	add	r7, sp, #0
 8005696:	6078      	str	r0, [r7, #4]
 8005698:	6039      	str	r1, [r7, #0]
    const uint8_t* const* table = (const uint8_t* const*)glyphData;
 800569a:	687b      	ldr	r3, [r7, #4]
 800569c:	699b      	ldr	r3, [r3, #24]
 800569e:	60fb      	str	r3, [r7, #12]
    return &(table[glyph->unicode / 2048][glyph->dataOffset]);
 80056a0:	683b      	ldr	r3, [r7, #0]
 80056a2:	889b      	ldrh	r3, [r3, #4]
 80056a4:	0adb      	lsrs	r3, r3, #11
 80056a6:	b29b      	uxth	r3, r3
 80056a8:	009b      	lsls	r3, r3, #2
 80056aa:	68fa      	ldr	r2, [r7, #12]
 80056ac:	4413      	add	r3, r2
 80056ae:	681a      	ldr	r2, [r3, #0]
 80056b0:	683b      	ldr	r3, [r7, #0]
 80056b2:	681b      	ldr	r3, [r3, #0]
 80056b4:	4413      	add	r3, r2
}
 80056b6:	4618      	mov	r0, r3
 80056b8:	3714      	adds	r7, #20
 80056ba:	46bd      	mov	sp, r7
 80056bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056c0:	4770      	bx	lr

080056c2 <_ZNK8touchgfx13GeneratedFont10getKerningEtPKNS_9GlyphNodeE>:

int8_t GeneratedFont::getKerning(Unicode::UnicodeChar prevChar, const GlyphNode* glyph) const
{
 80056c2:	b480      	push	{r7}
 80056c4:	b089      	sub	sp, #36	@ 0x24
 80056c6:	af00      	add	r7, sp, #0
 80056c8:	60f8      	str	r0, [r7, #12]
 80056ca:	460b      	mov	r3, r1
 80056cc:	607a      	str	r2, [r7, #4]
 80056ce:	817b      	strh	r3, [r7, #10]
    if (!glyph || glyph->kerningTableSize == 0)
 80056d0:	687b      	ldr	r3, [r7, #4]
 80056d2:	2b00      	cmp	r3, #0
 80056d4:	d003      	beq.n	80056de <_ZNK8touchgfx13GeneratedFont10getKerningEtPKNS_9GlyphNodeE+0x1c>
 80056d6:	687b      	ldr	r3, [r7, #4]
 80056d8:	7b1b      	ldrb	r3, [r3, #12]
 80056da:	2b00      	cmp	r3, #0
 80056dc:	d101      	bne.n	80056e2 <_ZNK8touchgfx13GeneratedFont10getKerningEtPKNS_9GlyphNodeE+0x20>
    {
        return 0;
 80056de:	2300      	movs	r3, #0
 80056e0:	e031      	b.n	8005746 <_ZNK8touchgfx13GeneratedFont10getKerningEtPKNS_9GlyphNodeE+0x84>
    }

    const KerningNode* kerndata = kerningData + glyph->kerningTablePos();
 80056e2:	68fb      	ldr	r3, [r7, #12]
 80056e4:	69da      	ldr	r2, [r3, #28]
 80056e6:	687b      	ldr	r3, [r7, #4]
 80056e8:	617b      	str	r3, [r7, #20]
        return ((flags & GLYPH_DATA_KERNINGTABLEPOS_BIT8_10) << 8) | _kerningTablePos;
 80056ea:	697b      	ldr	r3, [r7, #20]
 80056ec:	7b5b      	ldrb	r3, [r3, #13]
 80056ee:	021b      	lsls	r3, r3, #8
 80056f0:	b21b      	sxth	r3, r3
 80056f2:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 80056f6:	b219      	sxth	r1, r3
 80056f8:	697b      	ldr	r3, [r7, #20]
 80056fa:	7adb      	ldrb	r3, [r3, #11]
 80056fc:	b21b      	sxth	r3, r3
 80056fe:	430b      	orrs	r3, r1
 8005700:	b21b      	sxth	r3, r3
 8005702:	b29b      	uxth	r3, r3
 8005704:	009b      	lsls	r3, r3, #2
 8005706:	4413      	add	r3, r2
 8005708:	61fb      	str	r3, [r7, #28]
    for (uint16_t i = glyph->kerningTableSize; i > 0; i--, kerndata++)
 800570a:	687b      	ldr	r3, [r7, #4]
 800570c:	7b1b      	ldrb	r3, [r3, #12]
 800570e:	837b      	strh	r3, [r7, #26]
 8005710:	e013      	b.n	800573a <_ZNK8touchgfx13GeneratedFont10getKerningEtPKNS_9GlyphNodeE+0x78>
    {
        if (prevChar == kerndata->unicodePrevChar)
 8005712:	69fb      	ldr	r3, [r7, #28]
 8005714:	881b      	ldrh	r3, [r3, #0]
 8005716:	897a      	ldrh	r2, [r7, #10]
 8005718:	429a      	cmp	r2, r3
 800571a:	d103      	bne.n	8005724 <_ZNK8touchgfx13GeneratedFont10getKerningEtPKNS_9GlyphNodeE+0x62>
        {
            return kerndata->distance;
 800571c:	69fb      	ldr	r3, [r7, #28]
 800571e:	f993 3002 	ldrsb.w	r3, [r3, #2]
 8005722:	e010      	b.n	8005746 <_ZNK8touchgfx13GeneratedFont10getKerningEtPKNS_9GlyphNodeE+0x84>
        }
        if (prevChar < kerndata->unicodePrevChar)
 8005724:	69fb      	ldr	r3, [r7, #28]
 8005726:	881b      	ldrh	r3, [r3, #0]
 8005728:	897a      	ldrh	r2, [r7, #10]
 800572a:	429a      	cmp	r2, r3
 800572c:	d309      	bcc.n	8005742 <_ZNK8touchgfx13GeneratedFont10getKerningEtPKNS_9GlyphNodeE+0x80>
    for (uint16_t i = glyph->kerningTableSize; i > 0; i--, kerndata++)
 800572e:	8b7b      	ldrh	r3, [r7, #26]
 8005730:	3b01      	subs	r3, #1
 8005732:	837b      	strh	r3, [r7, #26]
 8005734:	69fb      	ldr	r3, [r7, #28]
 8005736:	3304      	adds	r3, #4
 8005738:	61fb      	str	r3, [r7, #28]
 800573a:	8b7b      	ldrh	r3, [r7, #26]
 800573c:	2b00      	cmp	r3, #0
 800573e:	d1e8      	bne.n	8005712 <_ZNK8touchgfx13GeneratedFont10getKerningEtPKNS_9GlyphNodeE+0x50>
 8005740:	e000      	b.n	8005744 <_ZNK8touchgfx13GeneratedFont10getKerningEtPKNS_9GlyphNodeE+0x82>
        {
            break;
 8005742:	bf00      	nop
        }
    }
    return 0;
 8005744:	2300      	movs	r3, #0
}
 8005746:	4618      	mov	r0, r3
 8005748:	3724      	adds	r7, #36	@ 0x24
 800574a:	46bd      	mov	sp, r7
 800574c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005750:	4770      	bx	lr

08005752 <_ZN8touchgfx9colortypeC1Em>:
    colortype(uint32_t col)
 8005752:	b480      	push	{r7}
 8005754:	b083      	sub	sp, #12
 8005756:	af00      	add	r7, sp, #0
 8005758:	6078      	str	r0, [r7, #4]
 800575a:	6039      	str	r1, [r7, #0]
        : color(col)
 800575c:	687b      	ldr	r3, [r7, #4]
 800575e:	683a      	ldr	r2, [r7, #0]
 8005760:	601a      	str	r2, [r3, #0]
    }
 8005762:	687b      	ldr	r3, [r7, #4]
 8005764:	4618      	mov	r0, r3
 8005766:	370c      	adds	r7, #12
 8005768:	46bd      	mov	sp, r7
 800576a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800576e:	4770      	bx	lr

08005770 <_ZN8touchgfx6BitmapC1Et>:
     * Creates and binds a Bitmap instance to the corresponding entry in the BitmapData
     * array.
     *
     * @param  id (Optional) The unique bitmap identifier.
     */
    Bitmap(const BitmapId id = BITMAP_INVALID)
 8005770:	b480      	push	{r7}
 8005772:	b083      	sub	sp, #12
 8005774:	af00      	add	r7, sp, #0
 8005776:	6078      	str	r0, [r7, #4]
 8005778:	460b      	mov	r3, r1
 800577a:	807b      	strh	r3, [r7, #2]
        : bitmapId(id)
 800577c:	687b      	ldr	r3, [r7, #4]
 800577e:	887a      	ldrh	r2, [r7, #2]
 8005780:	801a      	strh	r2, [r3, #0]
    {
    }
 8005782:	687b      	ldr	r3, [r7, #4]
 8005784:	4618      	mov	r0, r3
 8005786:	370c      	adds	r7, #12
 8005788:	46bd      	mov	sp, r7
 800578a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800578e:	4770      	bx	lr

08005790 <_ZN8touchgfx8Drawable12setTouchableEb>:
    void setTouchable(bool touch)
 8005790:	b480      	push	{r7}
 8005792:	b083      	sub	sp, #12
 8005794:	af00      	add	r7, sp, #0
 8005796:	6078      	str	r0, [r7, #4]
 8005798:	460b      	mov	r3, r1
 800579a:	70fb      	strb	r3, [r7, #3]
        touchable = touch;
 800579c:	687b      	ldr	r3, [r7, #4]
 800579e:	78fa      	ldrb	r2, [r7, #3]
 80057a0:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
    }
 80057a4:	bf00      	nop
 80057a6:	370c      	adds	r7, #12
 80057a8:	46bd      	mov	sp, r7
 80057aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057ae:	4770      	bx	lr

080057b0 <_ZN8touchgfx9ContainerC1Ev>:
 * @see Drawable
 */
class Container : public Drawable
{
public:
    Container()
 80057b0:	b580      	push	{r7, lr}
 80057b2:	b082      	sub	sp, #8
 80057b4:	af00      	add	r7, sp, #0
 80057b6:	6078      	str	r0, [r7, #4]
        : Drawable(),
          firstChild(0)
 80057b8:	687b      	ldr	r3, [r7, #4]
 80057ba:	4618      	mov	r0, r3
 80057bc:	f7fe fb0c 	bl	8003dd8 <_ZN8touchgfx8DrawableC1Ev>
 80057c0:	4a05      	ldr	r2, [pc, #20]	@ (80057d8 <_ZN8touchgfx9ContainerC1Ev+0x28>)
 80057c2:	687b      	ldr	r3, [r7, #4]
 80057c4:	601a      	str	r2, [r3, #0]
 80057c6:	687b      	ldr	r3, [r7, #4]
 80057c8:	2200      	movs	r2, #0
 80057ca:	629a      	str	r2, [r3, #40]	@ 0x28
    {
    }
 80057cc:	687b      	ldr	r3, [r7, #4]
 80057ce:	4618      	mov	r0, r3
 80057d0:	3708      	adds	r7, #8
 80057d2:	46bd      	mov	sp, r7
 80057d4:	bd80      	pop	{r7, pc}
 80057d6:	bf00      	nop
 80057d8:	0802d7cc 	.word	0x0802d7cc

080057dc <_ZN8touchgfx6ScreenD1Ev>:
public:
    /** Initializes a new instance of the Screen class. */
    Screen();

    /** Finalizes an instance of the Screen class. */
    virtual ~Screen()
 80057dc:	b580      	push	{r7, lr}
 80057de:	b082      	sub	sp, #8
 80057e0:	af00      	add	r7, sp, #0
 80057e2:	6078      	str	r0, [r7, #4]
    {
 80057e4:	4a06      	ldr	r2, [pc, #24]	@ (8005800 <_ZN8touchgfx6ScreenD1Ev+0x24>)
 80057e6:	687b      	ldr	r3, [r7, #4]
 80057e8:	601a      	str	r2, [r3, #0]
    }
 80057ea:	687b      	ldr	r3, [r7, #4]
 80057ec:	3304      	adds	r3, #4
 80057ee:	4618      	mov	r0, r3
 80057f0:	f001 f812 	bl	8006818 <_ZN8touchgfx9ContainerD1Ev>
 80057f4:	687b      	ldr	r3, [r7, #4]
 80057f6:	4618      	mov	r0, r3
 80057f8:	3708      	adds	r7, #8
 80057fa:	46bd      	mov	sp, r7
 80057fc:	bd80      	pop	{r7, pc}
 80057fe:	bf00      	nop
 8005800:	0802ef8c 	.word	0x0802ef8c

08005804 <_ZN8touchgfx6ScreenD0Ev>:
    virtual ~Screen()
 8005804:	b580      	push	{r7, lr}
 8005806:	b082      	sub	sp, #8
 8005808:	af00      	add	r7, sp, #0
 800580a:	6078      	str	r0, [r7, #4]
    }
 800580c:	6878      	ldr	r0, [r7, #4]
 800580e:	f7ff ffe5 	bl	80057dc <_ZN8touchgfx6ScreenD1Ev>
 8005812:	213c      	movs	r1, #60	@ 0x3c
 8005814:	6878      	ldr	r0, [r7, #4]
 8005816:	f025 f85e 	bl	802a8d6 <_ZdlPvj>
 800581a:	687b      	ldr	r3, [r7, #4]
 800581c:	4618      	mov	r0, r3
 800581e:	3708      	adds	r7, #8
 8005820:	46bd      	mov	sp, r7
 8005822:	bd80      	pop	{r7, pc}

08005824 <_ZN8touchgfx6Screen11setupScreenEv>:
     * version does nothing, but place any screen specific initialization code in an
     * overridden version.
     *
     * @see Application::switchScreen
     */
    virtual void setupScreen()
 8005824:	b480      	push	{r7}
 8005826:	b083      	sub	sp, #12
 8005828:	af00      	add	r7, sp, #0
 800582a:	6078      	str	r0, [r7, #4]
    {
    }
 800582c:	bf00      	nop
 800582e:	370c      	adds	r7, #12
 8005830:	46bd      	mov	sp, r7
 8005832:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005836:	4770      	bx	lr

08005838 <_ZN8touchgfx6Screen15afterTransitionEv>:
     * version does nothing, but override to do screen specific initialization code that has
     * to be done after the transition to the screen.
     *
     * @see Application::handleTickEvent
     */
    virtual void afterTransition()
 8005838:	b480      	push	{r7}
 800583a:	b083      	sub	sp, #12
 800583c:	af00      	add	r7, sp, #0
 800583e:	6078      	str	r0, [r7, #4]
    {
    }
 8005840:	bf00      	nop
 8005842:	370c      	adds	r7, #12
 8005844:	46bd      	mov	sp, r7
 8005846:	f85d 7b04 	ldr.w	r7, [sp], #4
 800584a:	4770      	bx	lr

0800584c <_ZN8touchgfx6Screen14tearDownScreenEv>:
     * Base version does nothing, but place any screen specific cleanup code in an
     * overridden version.
     *
     * @see Application::switchScreen
     */
    virtual void tearDownScreen()
 800584c:	b480      	push	{r7}
 800584e:	b083      	sub	sp, #12
 8005850:	af00      	add	r7, sp, #0
 8005852:	6078      	str	r0, [r7, #4]
    {
    }
 8005854:	bf00      	nop
 8005856:	370c      	adds	r7, #12
 8005858:	46bd      	mov	sp, r7
 800585a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800585e:	4770      	bx	lr

08005860 <_ZN8touchgfx6Screen15handleTickEventEv>:

    /**
     * Called by the Application on the current screen with a frequency of
     * Application::TICK_INTERVAL_MS.
     */
    virtual void handleTickEvent()
 8005860:	b480      	push	{r7}
 8005862:	b083      	sub	sp, #12
 8005864:	af00      	add	r7, sp, #0
 8005866:	6078      	str	r0, [r7, #4]
    {
    }
 8005868:	bf00      	nop
 800586a:	370c      	adds	r7, #12
 800586c:	46bd      	mov	sp, r7
 800586e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005872:	4770      	bx	lr

08005874 <_ZN8touchgfx6Screen14handleKeyEventEh>:
     * Called by the Application on the reception of a "key", the meaning of which is
     * platform/application specific. Default implementation does nothing.
     *
     * @param  key The key to handle.
     */
    virtual void handleKeyEvent(uint8_t key)
 8005874:	b480      	push	{r7}
 8005876:	b083      	sub	sp, #12
 8005878:	af00      	add	r7, sp, #0
 800587a:	6078      	str	r0, [r7, #4]
 800587c:	460b      	mov	r3, r1
 800587e:	70fb      	strb	r3, [r7, #3]
    {
    }
 8005880:	bf00      	nop
 8005882:	370c      	adds	r7, #12
 8005884:	46bd      	mov	sp, r7
 8005886:	f85d 7b04 	ldr.w	r7, [sp], #4
 800588a:	4770      	bx	lr

0800588c <_ZN8touchgfx6Screen3addERNS_8DrawableE>:
     * @param [in] d The Drawable to add.
     *
     * @note Must not be called with a Drawable that was already added to the screen. If in doubt,
     *       call remove() first.
     */
    void add(Drawable& d)
 800588c:	b580      	push	{r7, lr}
 800588e:	b082      	sub	sp, #8
 8005890:	af00      	add	r7, sp, #0
 8005892:	6078      	str	r0, [r7, #4]
 8005894:	6039      	str	r1, [r7, #0]
    {
        container.add(d);
 8005896:	687b      	ldr	r3, [r7, #4]
 8005898:	3304      	adds	r3, #4
 800589a:	6839      	ldr	r1, [r7, #0]
 800589c:	4618      	mov	r0, r3
 800589e:	f012 f827 	bl	80178f0 <_ZN8touchgfx9Container3addERNS_8DrawableE>
    }
 80058a2:	bf00      	nop
 80058a4:	3708      	adds	r7, #8
 80058a6:	46bd      	mov	sp, r7
 80058a8:	bd80      	pop	{r7, pc}
	...

080058ac <_ZN8touchgfx3BoxC1Ev>:
 */
class Box : public Widget
{
public:
    /** Construct a new Box with a default alpha value of 255 (solid) */
    Box()
 80058ac:	b580      	push	{r7, lr}
 80058ae:	b082      	sub	sp, #8
 80058b0:	af00      	add	r7, sp, #0
 80058b2:	6078      	str	r0, [r7, #4]
        : Widget(), alpha(255), color(0)
 80058b4:	687b      	ldr	r3, [r7, #4]
 80058b6:	4618      	mov	r0, r3
 80058b8:	2326      	movs	r3, #38	@ 0x26
 80058ba:	461a      	mov	r2, r3
 80058bc:	2100      	movs	r1, #0
 80058be:	f025 fa40 	bl	802ad42 <memset>
 80058c2:	687b      	ldr	r3, [r7, #4]
 80058c4:	4618      	mov	r0, r3
 80058c6:	f7fe fd37 	bl	8004338 <_ZN8touchgfx6WidgetC1Ev>
 80058ca:	4a09      	ldr	r2, [pc, #36]	@ (80058f0 <_ZN8touchgfx3BoxC1Ev+0x44>)
 80058cc:	687b      	ldr	r3, [r7, #4]
 80058ce:	601a      	str	r2, [r3, #0]
 80058d0:	687b      	ldr	r3, [r7, #4]
 80058d2:	22ff      	movs	r2, #255	@ 0xff
 80058d4:	f883 2026 	strb.w	r2, [r3, #38]	@ 0x26
 80058d8:	687b      	ldr	r3, [r7, #4]
 80058da:	3328      	adds	r3, #40	@ 0x28
 80058dc:	2100      	movs	r1, #0
 80058de:	4618      	mov	r0, r3
 80058e0:	f7ff ff37 	bl	8005752 <_ZN8touchgfx9colortypeC1Em>
    {
    }
 80058e4:	687b      	ldr	r3, [r7, #4]
 80058e6:	4618      	mov	r0, r3
 80058e8:	3708      	adds	r7, #8
 80058ea:	46bd      	mov	sp, r7
 80058ec:	bd80      	pop	{r7, pc}
 80058ee:	bf00      	nop
 80058f0:	0802e840 	.word	0x0802e840

080058f4 <_ZN8touchgfx3Box8setColorENS_9colortypeE>:
     *
     * @param  color The color of the box.
     *
     * @see getColor, Color::getColorFrom24BitRGB
     */
    void setColor(colortype color)
 80058f4:	b480      	push	{r7}
 80058f6:	b083      	sub	sp, #12
 80058f8:	af00      	add	r7, sp, #0
 80058fa:	6078      	str	r0, [r7, #4]
 80058fc:	6039      	str	r1, [r7, #0]
    {
        this->color = color;
 80058fe:	687b      	ldr	r3, [r7, #4]
 8005900:	683a      	ldr	r2, [r7, #0]
 8005902:	629a      	str	r2, [r3, #40]	@ 0x28
    }
 8005904:	bf00      	nop
 8005906:	370c      	adds	r7, #12
 8005908:	46bd      	mov	sp, r7
 800590a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800590e:	4770      	bx	lr

08005910 <_ZN8touchgfx5ImageC1ERKNS_6BitmapE>:
     *
     * @param  bitmap (Optional) The bitmap to display.
     *
     * @see setBitmap
     */
    Image(const Bitmap& bitmap = Bitmap())
 8005910:	b580      	push	{r7, lr}
 8005912:	b082      	sub	sp, #8
 8005914:	af00      	add	r7, sp, #0
 8005916:	6078      	str	r0, [r7, #4]
 8005918:	6039      	str	r1, [r7, #0]
        : Widget(), bitmap(bitmap), alpha(255)
 800591a:	687b      	ldr	r3, [r7, #4]
 800591c:	4618      	mov	r0, r3
 800591e:	2326      	movs	r3, #38	@ 0x26
 8005920:	461a      	mov	r2, r3
 8005922:	2100      	movs	r1, #0
 8005924:	f025 fa0d 	bl	802ad42 <memset>
 8005928:	687b      	ldr	r3, [r7, #4]
 800592a:	4618      	mov	r0, r3
 800592c:	f7fe fd04 	bl	8004338 <_ZN8touchgfx6WidgetC1Ev>
 8005930:	4a09      	ldr	r2, [pc, #36]	@ (8005958 <_ZN8touchgfx5ImageC1ERKNS_6BitmapE+0x48>)
 8005932:	687b      	ldr	r3, [r7, #4]
 8005934:	601a      	str	r2, [r3, #0]
 8005936:	687b      	ldr	r3, [r7, #4]
 8005938:	683a      	ldr	r2, [r7, #0]
 800593a:	8812      	ldrh	r2, [r2, #0]
 800593c:	84da      	strh	r2, [r3, #38]	@ 0x26
 800593e:	687b      	ldr	r3, [r7, #4]
 8005940:	22ff      	movs	r2, #255	@ 0xff
 8005942:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
    {
        Image::setBitmap(bitmap);
 8005946:	6839      	ldr	r1, [r7, #0]
 8005948:	6878      	ldr	r0, [r7, #4]
 800594a:	f014 f976 	bl	8019c3a <_ZN8touchgfx5Image9setBitmapERKNS_6BitmapE>
    }
 800594e:	687b      	ldr	r3, [r7, #4]
 8005950:	4618      	mov	r0, r3
 8005952:	3708      	adds	r7, #8
 8005954:	46bd      	mov	sp, r7
 8005956:	bd80      	pop	{r7, pc}
 8005958:	0802eab8 	.word	0x0802eab8

0800595c <_ZN8touchgfx3BoxD1Ev>:
class Box : public Widget
 800595c:	b580      	push	{r7, lr}
 800595e:	b082      	sub	sp, #8
 8005960:	af00      	add	r7, sp, #0
 8005962:	6078      	str	r0, [r7, #4]
 8005964:	4a05      	ldr	r2, [pc, #20]	@ (800597c <_ZN8touchgfx3BoxD1Ev+0x20>)
 8005966:	687b      	ldr	r3, [r7, #4]
 8005968:	601a      	str	r2, [r3, #0]
 800596a:	687b      	ldr	r3, [r7, #4]
 800596c:	4618      	mov	r0, r3
 800596e:	f7fe fcf5 	bl	800435c <_ZN8touchgfx6WidgetD1Ev>
 8005972:	687b      	ldr	r3, [r7, #4]
 8005974:	4618      	mov	r0, r3
 8005976:	3708      	adds	r7, #8
 8005978:	46bd      	mov	sp, r7
 800597a:	bd80      	pop	{r7, pc}
 800597c:	0802e840 	.word	0x0802e840

08005980 <_ZN8touchgfx3BoxD0Ev>:
 8005980:	b580      	push	{r7, lr}
 8005982:	b082      	sub	sp, #8
 8005984:	af00      	add	r7, sp, #0
 8005986:	6078      	str	r0, [r7, #4]
 8005988:	6878      	ldr	r0, [r7, #4]
 800598a:	f7ff ffe7 	bl	800595c <_ZN8touchgfx3BoxD1Ev>
 800598e:	212c      	movs	r1, #44	@ 0x2c
 8005990:	6878      	ldr	r0, [r7, #4]
 8005992:	f024 ffa0 	bl	802a8d6 <_ZdlPvj>
 8005996:	687b      	ldr	r3, [r7, #4]
 8005998:	4618      	mov	r0, r3
 800599a:	3708      	adds	r7, #8
 800599c:	46bd      	mov	sp, r7
 800599e:	bd80      	pop	{r7, pc}

080059a0 <_ZN8touchgfx13BoxWithBorderC1Ev>:
 * BoxWithBorder will function just like a Box.
 */
class BoxWithBorder : public Box
{
public:
    BoxWithBorder()
 80059a0:	b580      	push	{r7, lr}
 80059a2:	b082      	sub	sp, #8
 80059a4:	af00      	add	r7, sp, #0
 80059a6:	6078      	str	r0, [r7, #4]
        : Box(), borderColor(0), borderSize(0)
 80059a8:	687b      	ldr	r3, [r7, #4]
 80059aa:	4618      	mov	r0, r3
 80059ac:	f7ff ff7e 	bl	80058ac <_ZN8touchgfx3BoxC1Ev>
 80059b0:	4a08      	ldr	r2, [pc, #32]	@ (80059d4 <_ZN8touchgfx13BoxWithBorderC1Ev+0x34>)
 80059b2:	687b      	ldr	r3, [r7, #4]
 80059b4:	601a      	str	r2, [r3, #0]
 80059b6:	687b      	ldr	r3, [r7, #4]
 80059b8:	332c      	adds	r3, #44	@ 0x2c
 80059ba:	2100      	movs	r1, #0
 80059bc:	4618      	mov	r0, r3
 80059be:	f7ff fec8 	bl	8005752 <_ZN8touchgfx9colortypeC1Em>
 80059c2:	687b      	ldr	r3, [r7, #4]
 80059c4:	2200      	movs	r2, #0
 80059c6:	861a      	strh	r2, [r3, #48]	@ 0x30
    {
    }
 80059c8:	687b      	ldr	r3, [r7, #4]
 80059ca:	4618      	mov	r0, r3
 80059cc:	3708      	adds	r7, #8
 80059ce:	46bd      	mov	sp, r7
 80059d0:	bd80      	pop	{r7, pc}
 80059d2:	bf00      	nop
 80059d4:	0802ea54 	.word	0x0802ea54

080059d8 <_ZN8touchgfx13BoxWithBorder14setBorderColorENS_9colortypeE>:
     * Sets the color of the border drawn along the edge of the BoxWithBorder.
     *
     * @param  color The color of the border.
     * @see setColor, getBorderColor, Color::getColorFrom24BitRGB
     */
    void setBorderColor(colortype color)
 80059d8:	b480      	push	{r7}
 80059da:	b083      	sub	sp, #12
 80059dc:	af00      	add	r7, sp, #0
 80059de:	6078      	str	r0, [r7, #4]
 80059e0:	6039      	str	r1, [r7, #0]
    {
        borderColor = color;
 80059e2:	687b      	ldr	r3, [r7, #4]
 80059e4:	683a      	ldr	r2, [r7, #0]
 80059e6:	62da      	str	r2, [r3, #44]	@ 0x2c
    }
 80059e8:	bf00      	nop
 80059ea:	370c      	adds	r7, #12
 80059ec:	46bd      	mov	sp, r7
 80059ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059f2:	4770      	bx	lr

080059f4 <_ZN8touchgfx13BoxWithBorder13setBorderSizeEt>:
     *
     * @param  size The width of the border.
     *
     * @see getBorderSize
     */
    void setBorderSize(uint16_t size)
 80059f4:	b480      	push	{r7}
 80059f6:	b083      	sub	sp, #12
 80059f8:	af00      	add	r7, sp, #0
 80059fa:	6078      	str	r0, [r7, #4]
 80059fc:	460b      	mov	r3, r1
 80059fe:	807b      	strh	r3, [r7, #2]
    {
        borderSize = size;
 8005a00:	687b      	ldr	r3, [r7, #4]
 8005a02:	887a      	ldrh	r2, [r7, #2]
 8005a04:	861a      	strh	r2, [r3, #48]	@ 0x30
    }
 8005a06:	bf00      	nop
 8005a08:	370c      	adds	r7, #12
 8005a0a:	46bd      	mov	sp, r7
 8005a0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a10:	4770      	bx	lr
	...

08005a14 <_ZN8touchgfx9TypedTextC1Et>:
    explicit TypedText(const TypedTextId id = TYPED_TEXT_INVALID)
 8005a14:	b480      	push	{r7}
 8005a16:	b083      	sub	sp, #12
 8005a18:	af00      	add	r7, sp, #0
 8005a1a:	6078      	str	r0, [r7, #4]
 8005a1c:	460b      	mov	r3, r1
 8005a1e:	807b      	strh	r3, [r7, #2]
        : typedTextId(id)
 8005a20:	4a06      	ldr	r2, [pc, #24]	@ (8005a3c <_ZN8touchgfx9TypedTextC1Et+0x28>)
 8005a22:	687b      	ldr	r3, [r7, #4]
 8005a24:	601a      	str	r2, [r3, #0]
 8005a26:	687b      	ldr	r3, [r7, #4]
 8005a28:	887a      	ldrh	r2, [r7, #2]
 8005a2a:	809a      	strh	r2, [r3, #4]
    }
 8005a2c:	687b      	ldr	r3, [r7, #4]
 8005a2e:	4618      	mov	r0, r3
 8005a30:	370c      	adds	r7, #12
 8005a32:	46bd      	mov	sp, r7
 8005a34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a38:	4770      	bx	lr
 8005a3a:	bf00      	nop
 8005a3c:	0802cd0c 	.word	0x0802cd0c

08005a40 <_ZN8touchgfx8TextAreaC1Ev>:
 *       the pointer remains valid when drawing.
 */
class TextArea : public Widget
{
public:
    TextArea()
 8005a40:	b580      	push	{r7, lr}
 8005a42:	b082      	sub	sp, #8
 8005a44:	af00      	add	r7, sp, #0
 8005a46:	6078      	str	r0, [r7, #4]
        : Widget(), typedText(TYPED_TEXT_INVALID), color(0), linespace(0), alpha(255), indentation(0), rotation(TEXT_ROTATE_0), wideTextAction(WIDE_TEXT_NONE)
 8005a48:	687b      	ldr	r3, [r7, #4]
 8005a4a:	4618      	mov	r0, r3
 8005a4c:	2326      	movs	r3, #38	@ 0x26
 8005a4e:	461a      	mov	r2, r3
 8005a50:	2100      	movs	r1, #0
 8005a52:	f025 f976 	bl	802ad42 <memset>
 8005a56:	687b      	ldr	r3, [r7, #4]
 8005a58:	4618      	mov	r0, r3
 8005a5a:	f7fe fc6d 	bl	8004338 <_ZN8touchgfx6WidgetC1Ev>
 8005a5e:	4a14      	ldr	r2, [pc, #80]	@ (8005ab0 <_ZN8touchgfx8TextAreaC1Ev+0x70>)
 8005a60:	687b      	ldr	r3, [r7, #4]
 8005a62:	601a      	str	r2, [r3, #0]
 8005a64:	687b      	ldr	r3, [r7, #4]
 8005a66:	3328      	adds	r3, #40	@ 0x28
 8005a68:	f64f 71ff 	movw	r1, #65535	@ 0xffff
 8005a6c:	4618      	mov	r0, r3
 8005a6e:	f7ff ffd1 	bl	8005a14 <_ZN8touchgfx9TypedTextC1Et>
 8005a72:	687b      	ldr	r3, [r7, #4]
 8005a74:	3330      	adds	r3, #48	@ 0x30
 8005a76:	2100      	movs	r1, #0
 8005a78:	4618      	mov	r0, r3
 8005a7a:	f7ff fe6a 	bl	8005752 <_ZN8touchgfx9colortypeC1Em>
 8005a7e:	687b      	ldr	r3, [r7, #4]
 8005a80:	2200      	movs	r2, #0
 8005a82:	869a      	strh	r2, [r3, #52]	@ 0x34
 8005a84:	687b      	ldr	r3, [r7, #4]
 8005a86:	22ff      	movs	r2, #255	@ 0xff
 8005a88:	f883 2036 	strb.w	r2, [r3, #54]	@ 0x36
 8005a8c:	687b      	ldr	r3, [r7, #4]
 8005a8e:	2200      	movs	r2, #0
 8005a90:	f883 2037 	strb.w	r2, [r3, #55]	@ 0x37
 8005a94:	687b      	ldr	r3, [r7, #4]
 8005a96:	2200      	movs	r2, #0
 8005a98:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
 8005a9c:	687b      	ldr	r3, [r7, #4]
 8005a9e:	2200      	movs	r2, #0
 8005aa0:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39
    {
    }
 8005aa4:	687b      	ldr	r3, [r7, #4]
 8005aa6:	4618      	mov	r0, r3
 8005aa8:	3708      	adds	r7, #8
 8005aaa:	46bd      	mov	sp, r7
 8005aac:	bd80      	pop	{r7, pc}
 8005aae:	bf00      	nop
 8005ab0:	0802e798 	.word	0x0802e798

08005ab4 <_ZN8touchgfx14AbstractButtonC1Ev>:
 */
class AbstractButton : public Widget
{
public:
    /** Sets this Widget touchable so the user can interact with buttons. */
    AbstractButton()
 8005ab4:	b580      	push	{r7, lr}
 8005ab6:	b082      	sub	sp, #8
 8005ab8:	af00      	add	r7, sp, #0
 8005aba:	6078      	str	r0, [r7, #4]
        : Widget(), action(), pressed(false)
 8005abc:	687b      	ldr	r3, [r7, #4]
 8005abe:	4618      	mov	r0, r3
 8005ac0:	2326      	movs	r3, #38	@ 0x26
 8005ac2:	461a      	mov	r2, r3
 8005ac4:	2100      	movs	r1, #0
 8005ac6:	f025 f93c 	bl	802ad42 <memset>
 8005aca:	687b      	ldr	r3, [r7, #4]
 8005acc:	4618      	mov	r0, r3
 8005ace:	f7fe fc33 	bl	8004338 <_ZN8touchgfx6WidgetC1Ev>
 8005ad2:	4a0a      	ldr	r2, [pc, #40]	@ (8005afc <_ZN8touchgfx14AbstractButtonC1Ev+0x48>)
 8005ad4:	687b      	ldr	r3, [r7, #4]
 8005ad6:	601a      	str	r2, [r3, #0]
 8005ad8:	687b      	ldr	r3, [r7, #4]
 8005ada:	2200      	movs	r2, #0
 8005adc:	629a      	str	r2, [r3, #40]	@ 0x28
 8005ade:	687b      	ldr	r3, [r7, #4]
 8005ae0:	2200      	movs	r2, #0
 8005ae2:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c
    {
        setTouchable(true);
 8005ae6:	687b      	ldr	r3, [r7, #4]
 8005ae8:	2101      	movs	r1, #1
 8005aea:	4618      	mov	r0, r3
 8005aec:	f7ff fe50 	bl	8005790 <_ZN8touchgfx8Drawable12setTouchableEb>
    }
 8005af0:	687b      	ldr	r3, [r7, #4]
 8005af2:	4618      	mov	r0, r3
 8005af4:	3708      	adds	r7, #8
 8005af6:	46bd      	mov	sp, r7
 8005af8:	bd80      	pop	{r7, pc}
 8005afa:	bf00      	nop
 8005afc:	0802e5fc 	.word	0x0802e5fc

08005b00 <_ZN8touchgfx14AbstractButton9setActionERNS_15GenericCallbackIRKS0_vvEE>:
     * @param  callback The callback to be executed. The callback will be executed with a
     *                  reference to the AbstractButton.
     *
     * @see GenericCallback, handleClickEvent, ClickEvent
     */
    void setAction(GenericCallback<const AbstractButton&>& callback)
 8005b00:	b480      	push	{r7}
 8005b02:	b083      	sub	sp, #12
 8005b04:	af00      	add	r7, sp, #0
 8005b06:	6078      	str	r0, [r7, #4]
 8005b08:	6039      	str	r1, [r7, #0]
    {
        action = &callback;
 8005b0a:	687b      	ldr	r3, [r7, #4]
 8005b0c:	683a      	ldr	r2, [r7, #0]
 8005b0e:	629a      	str	r2, [r3, #40]	@ 0x28
    }
 8005b10:	bf00      	nop
 8005b12:	370c      	adds	r7, #12
 8005b14:	46bd      	mov	sp, r7
 8005b16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b1a:	4770      	bx	lr

08005b1c <_ZN8touchgfx14AbstractButtonD1Ev>:
class AbstractButton : public Widget
 8005b1c:	b580      	push	{r7, lr}
 8005b1e:	b082      	sub	sp, #8
 8005b20:	af00      	add	r7, sp, #0
 8005b22:	6078      	str	r0, [r7, #4]
 8005b24:	4a05      	ldr	r2, [pc, #20]	@ (8005b3c <_ZN8touchgfx14AbstractButtonD1Ev+0x20>)
 8005b26:	687b      	ldr	r3, [r7, #4]
 8005b28:	601a      	str	r2, [r3, #0]
 8005b2a:	687b      	ldr	r3, [r7, #4]
 8005b2c:	4618      	mov	r0, r3
 8005b2e:	f7fe fc15 	bl	800435c <_ZN8touchgfx6WidgetD1Ev>
 8005b32:	687b      	ldr	r3, [r7, #4]
 8005b34:	4618      	mov	r0, r3
 8005b36:	3708      	adds	r7, #8
 8005b38:	46bd      	mov	sp, r7
 8005b3a:	bd80      	pop	{r7, pc}
 8005b3c:	0802e5fc 	.word	0x0802e5fc

08005b40 <_ZN8touchgfx14AbstractButtonD0Ev>:
 8005b40:	b580      	push	{r7, lr}
 8005b42:	b082      	sub	sp, #8
 8005b44:	af00      	add	r7, sp, #0
 8005b46:	6078      	str	r0, [r7, #4]
 8005b48:	6878      	ldr	r0, [r7, #4]
 8005b4a:	f7ff ffe7 	bl	8005b1c <_ZN8touchgfx14AbstractButtonD1Ev>
 8005b4e:	2130      	movs	r1, #48	@ 0x30
 8005b50:	6878      	ldr	r0, [r7, #4]
 8005b52:	f024 fec0 	bl	802a8d6 <_ZdlPvj>
 8005b56:	687b      	ldr	r3, [r7, #4]
 8005b58:	4618      	mov	r0, r3
 8005b5a:	3708      	adds	r7, #8
 8005b5c:	46bd      	mov	sp, r7
 8005b5e:	bd80      	pop	{r7, pc}

08005b60 <_ZN8touchgfx6ButtonC1Ev>:
 * pressed state.
 */
class Button : public AbstractButton
{
public:
    Button()
 8005b60:	b580      	push	{r7, lr}
 8005b62:	b082      	sub	sp, #8
 8005b64:	af00      	add	r7, sp, #0
 8005b66:	6078      	str	r0, [r7, #4]
        : AbstractButton(), up(), down(), alpha(255)
 8005b68:	687b      	ldr	r3, [r7, #4]
 8005b6a:	4618      	mov	r0, r3
 8005b6c:	f7ff ffa2 	bl	8005ab4 <_ZN8touchgfx14AbstractButtonC1Ev>
 8005b70:	4a0c      	ldr	r2, [pc, #48]	@ (8005ba4 <_ZN8touchgfx6ButtonC1Ev+0x44>)
 8005b72:	687b      	ldr	r3, [r7, #4]
 8005b74:	601a      	str	r2, [r3, #0]
 8005b76:	687b      	ldr	r3, [r7, #4]
 8005b78:	332e      	adds	r3, #46	@ 0x2e
 8005b7a:	f64f 71ff 	movw	r1, #65535	@ 0xffff
 8005b7e:	4618      	mov	r0, r3
 8005b80:	f7ff fdf6 	bl	8005770 <_ZN8touchgfx6BitmapC1Et>
 8005b84:	687b      	ldr	r3, [r7, #4]
 8005b86:	3330      	adds	r3, #48	@ 0x30
 8005b88:	f64f 71ff 	movw	r1, #65535	@ 0xffff
 8005b8c:	4618      	mov	r0, r3
 8005b8e:	f7ff fdef 	bl	8005770 <_ZN8touchgfx6BitmapC1Et>
 8005b92:	687b      	ldr	r3, [r7, #4]
 8005b94:	22ff      	movs	r2, #255	@ 0xff
 8005b96:	f883 2032 	strb.w	r2, [r3, #50]	@ 0x32
    {
    }
 8005b9a:	687b      	ldr	r3, [r7, #4]
 8005b9c:	4618      	mov	r0, r3
 8005b9e:	3708      	adds	r7, #8
 8005ba0:	46bd      	mov	sp, r7
 8005ba2:	bd80      	pop	{r7, pc}
 8005ba4:	0802e908 	.word	0x0802e908

08005ba8 <_ZN8touchgfx4ViewI25Localize_AnomalyPresenterED1Ev>:
class View : public Screen
 8005ba8:	b580      	push	{r7, lr}
 8005baa:	b082      	sub	sp, #8
 8005bac:	af00      	add	r7, sp, #0
 8005bae:	6078      	str	r0, [r7, #4]
 8005bb0:	4a05      	ldr	r2, [pc, #20]	@ (8005bc8 <_ZN8touchgfx4ViewI25Localize_AnomalyPresenterED1Ev+0x20>)
 8005bb2:	687b      	ldr	r3, [r7, #4]
 8005bb4:	601a      	str	r2, [r3, #0]
 8005bb6:	687b      	ldr	r3, [r7, #4]
 8005bb8:	4618      	mov	r0, r3
 8005bba:	f7ff fe0f 	bl	80057dc <_ZN8touchgfx6ScreenD1Ev>
 8005bbe:	687b      	ldr	r3, [r7, #4]
 8005bc0:	4618      	mov	r0, r3
 8005bc2:	3708      	adds	r7, #8
 8005bc4:	46bd      	mov	sp, r7
 8005bc6:	bd80      	pop	{r7, pc}
 8005bc8:	0802cf80 	.word	0x0802cf80

08005bcc <_ZN8touchgfx4ViewI25Localize_AnomalyPresenterED0Ev>:
 8005bcc:	b580      	push	{r7, lr}
 8005bce:	b082      	sub	sp, #8
 8005bd0:	af00      	add	r7, sp, #0
 8005bd2:	6078      	str	r0, [r7, #4]
 8005bd4:	6878      	ldr	r0, [r7, #4]
 8005bd6:	f7ff ffe7 	bl	8005ba8 <_ZN8touchgfx4ViewI25Localize_AnomalyPresenterED1Ev>
 8005bda:	2140      	movs	r1, #64	@ 0x40
 8005bdc:	6878      	ldr	r0, [r7, #4]
 8005bde:	f024 fe7a 	bl	802a8d6 <_ZdlPvj>
 8005be2:	687b      	ldr	r3, [r7, #4]
 8005be4:	4618      	mov	r0, r3
 8005be6:	3708      	adds	r7, #8
 8005be8:	46bd      	mov	sp, r7
 8005bea:	bd80      	pop	{r7, pc}

08005bec <_ZN24Localize_AnomalyViewBaseD1Ev>:

class Localize_AnomalyViewBase : public touchgfx::View<Localize_AnomalyPresenter>
{
public:
    Localize_AnomalyViewBase();
    virtual ~Localize_AnomalyViewBase() {}
 8005bec:	b580      	push	{r7, lr}
 8005bee:	b082      	sub	sp, #8
 8005bf0:	af00      	add	r7, sp, #0
 8005bf2:	6078      	str	r0, [r7, #4]
 8005bf4:	4a3c      	ldr	r2, [pc, #240]	@ (8005ce8 <_ZN24Localize_AnomalyViewBaseD1Ev+0xfc>)
 8005bf6:	687b      	ldr	r3, [r7, #4]
 8005bf8:	601a      	str	r2, [r3, #0]
 8005bfa:	687b      	ldr	r3, [r7, #4]
 8005bfc:	f503 736c 	add.w	r3, r3, #944	@ 0x3b0
 8005c00:	4618      	mov	r0, r3
 8005c02:	f000 fde7 	bl	80067d4 <_ZN8touchgfx8CallbackI24Localize_AnomalyViewBaseRKNS_14AbstractButtonEvvED1Ev>
 8005c06:	687b      	ldr	r3, [r7, #4]
 8005c08:	f503 735d 	add.w	r3, r3, #884	@ 0x374
 8005c0c:	4618      	mov	r0, r3
 8005c0e:	f000 fe69 	bl	80068e4 <_ZN8touchgfx8TextAreaD1Ev>
 8005c12:	687b      	ldr	r3, [r7, #4]
 8005c14:	f503 7350 	add.w	r3, r3, #832	@ 0x340
 8005c18:	4618      	mov	r0, r3
 8005c1a:	f000 fe41 	bl	80068a0 <_ZN8touchgfx13BoxWithBorderD1Ev>
 8005c1e:	687b      	ldr	r3, [r7, #4]
 8005c20:	f503 7345 	add.w	r3, r3, #788	@ 0x314
 8005c24:	4618      	mov	r0, r3
 8005c26:	f000 fdf7 	bl	8006818 <_ZN8touchgfx9ContainerD1Ev>
 8005c2a:	687b      	ldr	r3, [r7, #4]
 8005c2c:	f503 733a 	add.w	r3, r3, #744	@ 0x2e8
 8005c30:	4618      	mov	r0, r3
 8005c32:	f000 fe13 	bl	800685c <_ZN8touchgfx5ImageD1Ev>
 8005c36:	687b      	ldr	r3, [r7, #4]
 8005c38:	f503 732d 	add.w	r3, r3, #692	@ 0x2b4
 8005c3c:	4618      	mov	r0, r3
 8005c3e:	f000 fe2f 	bl	80068a0 <_ZN8touchgfx13BoxWithBorderD1Ev>
 8005c42:	687b      	ldr	r3, [r7, #4]
 8005c44:	f503 7322 	add.w	r3, r3, #648	@ 0x288
 8005c48:	4618      	mov	r0, r3
 8005c4a:	f000 fde5 	bl	8006818 <_ZN8touchgfx9ContainerD1Ev>
 8005c4e:	687b      	ldr	r3, [r7, #4]
 8005c50:	f503 7315 	add.w	r3, r3, #596	@ 0x254
 8005c54:	4618      	mov	r0, r3
 8005c56:	f000 fe23 	bl	80068a0 <_ZN8touchgfx13BoxWithBorderD1Ev>
 8005c5a:	687b      	ldr	r3, [r7, #4]
 8005c5c:	f503 730a 	add.w	r3, r3, #552	@ 0x228
 8005c60:	4618      	mov	r0, r3
 8005c62:	f000 fdd9 	bl	8006818 <_ZN8touchgfx9ContainerD1Ev>
 8005c66:	687b      	ldr	r3, [r7, #4]
 8005c68:	f503 73fa 	add.w	r3, r3, #500	@ 0x1f4
 8005c6c:	4618      	mov	r0, r3
 8005c6e:	f000 fe61 	bl	8006934 <_ZN8touchgfx6ButtonD1Ev>
 8005c72:	687b      	ldr	r3, [r7, #4]
 8005c74:	f503 73dc 	add.w	r3, r3, #440	@ 0x1b8
 8005c78:	4618      	mov	r0, r3
 8005c7a:	f000 fe33 	bl	80068e4 <_ZN8touchgfx8TextAreaD1Ev>
 8005c7e:	687b      	ldr	r3, [r7, #4]
 8005c80:	f503 73c2 	add.w	r3, r3, #388	@ 0x184
 8005c84:	4618      	mov	r0, r3
 8005c86:	f000 fe0b 	bl	80068a0 <_ZN8touchgfx13BoxWithBorderD1Ev>
 8005c8a:	687b      	ldr	r3, [r7, #4]
 8005c8c:	f503 73ac 	add.w	r3, r3, #344	@ 0x158
 8005c90:	4618      	mov	r0, r3
 8005c92:	f000 fdc1 	bl	8006818 <_ZN8touchgfx9ContainerD1Ev>
 8005c96:	687b      	ldr	r3, [r7, #4]
 8005c98:	f503 7392 	add.w	r3, r3, #292	@ 0x124
 8005c9c:	4618      	mov	r0, r3
 8005c9e:	f000 fdff 	bl	80068a0 <_ZN8touchgfx13BoxWithBorderD1Ev>
 8005ca2:	687b      	ldr	r3, [r7, #4]
 8005ca4:	33f8      	adds	r3, #248	@ 0xf8
 8005ca6:	4618      	mov	r0, r3
 8005ca8:	f000 fdb6 	bl	8006818 <_ZN8touchgfx9ContainerD1Ev>
 8005cac:	687b      	ldr	r3, [r7, #4]
 8005cae:	33c4      	adds	r3, #196	@ 0xc4
 8005cb0:	4618      	mov	r0, r3
 8005cb2:	f000 fdf5 	bl	80068a0 <_ZN8touchgfx13BoxWithBorderD1Ev>
 8005cb6:	687b      	ldr	r3, [r7, #4]
 8005cb8:	3398      	adds	r3, #152	@ 0x98
 8005cba:	4618      	mov	r0, r3
 8005cbc:	f000 fdac 	bl	8006818 <_ZN8touchgfx9ContainerD1Ev>
 8005cc0:	687b      	ldr	r3, [r7, #4]
 8005cc2:	336c      	adds	r3, #108	@ 0x6c
 8005cc4:	4618      	mov	r0, r3
 8005cc6:	f000 fdc9 	bl	800685c <_ZN8touchgfx5ImageD1Ev>
 8005cca:	687b      	ldr	r3, [r7, #4]
 8005ccc:	3340      	adds	r3, #64	@ 0x40
 8005cce:	4618      	mov	r0, r3
 8005cd0:	f7ff fe44 	bl	800595c <_ZN8touchgfx3BoxD1Ev>
 8005cd4:	687b      	ldr	r3, [r7, #4]
 8005cd6:	4618      	mov	r0, r3
 8005cd8:	f7ff ff66 	bl	8005ba8 <_ZN8touchgfx4ViewI25Localize_AnomalyPresenterED1Ev>
 8005cdc:	687b      	ldr	r3, [r7, #4]
 8005cde:	4618      	mov	r0, r3
 8005ce0:	3708      	adds	r7, #8
 8005ce2:	46bd      	mov	sp, r7
 8005ce4:	bd80      	pop	{r7, pc}
 8005ce6:	bf00      	nop
 8005ce8:	0802cf30 	.word	0x0802cf30

08005cec <_ZN24Localize_AnomalyViewBaseD0Ev>:
 8005cec:	b580      	push	{r7, lr}
 8005cee:	b082      	sub	sp, #8
 8005cf0:	af00      	add	r7, sp, #0
 8005cf2:	6078      	str	r0, [r7, #4]
 8005cf4:	6878      	ldr	r0, [r7, #4]
 8005cf6:	f7ff ff79 	bl	8005bec <_ZN24Localize_AnomalyViewBaseD1Ev>
 8005cfa:	f44f 7170 	mov.w	r1, #960	@ 0x3c0
 8005cfe:	6878      	ldr	r0, [r7, #4]
 8005d00:	f024 fde9 	bl	802a8d6 <_ZdlPvj>
 8005d04:	687b      	ldr	r3, [r7, #4]
 8005d06:	4618      	mov	r0, r3
 8005d08:	3708      	adds	r7, #8
 8005d0a:	46bd      	mov	sp, r7
 8005d0c:	bd80      	pop	{r7, pc}

08005d0e <_ZN24Localize_AnomalyViewBase9function1Ev>:
    virtual void afterTransition();

    /*
     * Virtual Action Handlers
     */
    virtual void function1()
 8005d0e:	b480      	push	{r7}
 8005d10:	b083      	sub	sp, #12
 8005d12:	af00      	add	r7, sp, #0
 8005d14:	6078      	str	r0, [r7, #4]
    {
        // Override and implement this function in Localize_Anomaly
    }
 8005d16:	bf00      	nop
 8005d18:	370c      	adds	r7, #12
 8005d1a:	46bd      	mov	sp, r7
 8005d1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d20:	4770      	bx	lr

08005d22 <_ZN24Localize_AnomalyViewBase11applicationEv>:

protected:
    FrontendApplication& application() {
 8005d22:	b580      	push	{r7, lr}
 8005d24:	b082      	sub	sp, #8
 8005d26:	af00      	add	r7, sp, #0
 8005d28:	6078      	str	r0, [r7, #4]
        return *static_cast<FrontendApplication*>(touchgfx::Application::getInstance());
 8005d2a:	f015 fc95 	bl	801b658 <_ZN8touchgfx11Application11getInstanceEv>
 8005d2e:	4603      	mov	r3, r0
    }
 8005d30:	4618      	mov	r0, r3
 8005d32:	3708      	adds	r7, #8
 8005d34:	46bd      	mov	sp, r7
 8005d36:	bd80      	pop	{r7, pc}

08005d38 <_ZN24Localize_AnomalyViewBaseC1Ev>:
#include <gui_generated/localize_anomaly_screen/Localize_AnomalyViewBase.hpp>
#include <touchgfx/Color.hpp>
#include <BitmapDatabase.hpp>
#include <texts/TextKeysAndLanguages.hpp>

Localize_AnomalyViewBase::Localize_AnomalyViewBase() :
 8005d38:	b590      	push	{r4, r7, lr}
 8005d3a:	b0b5      	sub	sp, #212	@ 0xd4
 8005d3c:	af02      	add	r7, sp, #8
 8005d3e:	6078      	str	r0, [r7, #4]
    buttonCallback(this, &Localize_AnomalyViewBase::buttonCallbackHandler)
 8005d40:	687b      	ldr	r3, [r7, #4]
 8005d42:	4618      	mov	r0, r3
 8005d44:	f000 fce0 	bl	8006708 <_ZN8touchgfx4ViewI25Localize_AnomalyPresenterEC1Ev>
 8005d48:	4ae0      	ldr	r2, [pc, #896]	@ (80060cc <_ZN24Localize_AnomalyViewBaseC1Ev+0x394>)
 8005d4a:	687b      	ldr	r3, [r7, #4]
 8005d4c:	601a      	str	r2, [r3, #0]
 8005d4e:	687b      	ldr	r3, [r7, #4]
 8005d50:	3340      	adds	r3, #64	@ 0x40
 8005d52:	4618      	mov	r0, r3
 8005d54:	f7ff fdaa 	bl	80058ac <_ZN8touchgfx3BoxC1Ev>
 8005d58:	687b      	ldr	r3, [r7, #4]
 8005d5a:	f103 046c 	add.w	r4, r3, #108	@ 0x6c
 8005d5e:	f107 0314 	add.w	r3, r7, #20
 8005d62:	f64f 71ff 	movw	r1, #65535	@ 0xffff
 8005d66:	4618      	mov	r0, r3
 8005d68:	f7ff fd02 	bl	8005770 <_ZN8touchgfx6BitmapC1Et>
 8005d6c:	f107 0314 	add.w	r3, r7, #20
 8005d70:	4619      	mov	r1, r3
 8005d72:	4620      	mov	r0, r4
 8005d74:	f7ff fdcc 	bl	8005910 <_ZN8touchgfx5ImageC1ERKNS_6BitmapE>
 8005d78:	687b      	ldr	r3, [r7, #4]
 8005d7a:	3398      	adds	r3, #152	@ 0x98
 8005d7c:	4618      	mov	r0, r3
 8005d7e:	f7ff fd17 	bl	80057b0 <_ZN8touchgfx9ContainerC1Ev>
 8005d82:	687b      	ldr	r3, [r7, #4]
 8005d84:	33c4      	adds	r3, #196	@ 0xc4
 8005d86:	4618      	mov	r0, r3
 8005d88:	f7ff fe0a 	bl	80059a0 <_ZN8touchgfx13BoxWithBorderC1Ev>
 8005d8c:	687b      	ldr	r3, [r7, #4]
 8005d8e:	33f8      	adds	r3, #248	@ 0xf8
 8005d90:	4618      	mov	r0, r3
 8005d92:	f7ff fd0d 	bl	80057b0 <_ZN8touchgfx9ContainerC1Ev>
 8005d96:	687b      	ldr	r3, [r7, #4]
 8005d98:	f503 7392 	add.w	r3, r3, #292	@ 0x124
 8005d9c:	4618      	mov	r0, r3
 8005d9e:	f7ff fdff 	bl	80059a0 <_ZN8touchgfx13BoxWithBorderC1Ev>
 8005da2:	687b      	ldr	r3, [r7, #4]
 8005da4:	f503 73ac 	add.w	r3, r3, #344	@ 0x158
 8005da8:	4618      	mov	r0, r3
 8005daa:	f7ff fd01 	bl	80057b0 <_ZN8touchgfx9ContainerC1Ev>
 8005dae:	687b      	ldr	r3, [r7, #4]
 8005db0:	f503 73c2 	add.w	r3, r3, #388	@ 0x184
 8005db4:	4618      	mov	r0, r3
 8005db6:	f7ff fdf3 	bl	80059a0 <_ZN8touchgfx13BoxWithBorderC1Ev>
 8005dba:	687b      	ldr	r3, [r7, #4]
 8005dbc:	f503 73dc 	add.w	r3, r3, #440	@ 0x1b8
 8005dc0:	4618      	mov	r0, r3
 8005dc2:	f7ff fe3d 	bl	8005a40 <_ZN8touchgfx8TextAreaC1Ev>
 8005dc6:	687b      	ldr	r3, [r7, #4]
 8005dc8:	f503 73fa 	add.w	r3, r3, #500	@ 0x1f4
 8005dcc:	4618      	mov	r0, r3
 8005dce:	f7ff fec7 	bl	8005b60 <_ZN8touchgfx6ButtonC1Ev>
 8005dd2:	687b      	ldr	r3, [r7, #4]
 8005dd4:	f503 730a 	add.w	r3, r3, #552	@ 0x228
 8005dd8:	4618      	mov	r0, r3
 8005dda:	f7ff fce9 	bl	80057b0 <_ZN8touchgfx9ContainerC1Ev>
 8005dde:	687b      	ldr	r3, [r7, #4]
 8005de0:	f503 7315 	add.w	r3, r3, #596	@ 0x254
 8005de4:	4618      	mov	r0, r3
 8005de6:	f7ff fddb 	bl	80059a0 <_ZN8touchgfx13BoxWithBorderC1Ev>
 8005dea:	687b      	ldr	r3, [r7, #4]
 8005dec:	f503 7322 	add.w	r3, r3, #648	@ 0x288
 8005df0:	4618      	mov	r0, r3
 8005df2:	f7ff fcdd 	bl	80057b0 <_ZN8touchgfx9ContainerC1Ev>
 8005df6:	687b      	ldr	r3, [r7, #4]
 8005df8:	f503 732d 	add.w	r3, r3, #692	@ 0x2b4
 8005dfc:	4618      	mov	r0, r3
 8005dfe:	f7ff fdcf 	bl	80059a0 <_ZN8touchgfx13BoxWithBorderC1Ev>
 8005e02:	687b      	ldr	r3, [r7, #4]
 8005e04:	f503 743a 	add.w	r4, r3, #744	@ 0x2e8
 8005e08:	f107 0318 	add.w	r3, r7, #24
 8005e0c:	f64f 71ff 	movw	r1, #65535	@ 0xffff
 8005e10:	4618      	mov	r0, r3
 8005e12:	f7ff fcad 	bl	8005770 <_ZN8touchgfx6BitmapC1Et>
 8005e16:	f107 0318 	add.w	r3, r7, #24
 8005e1a:	4619      	mov	r1, r3
 8005e1c:	4620      	mov	r0, r4
 8005e1e:	f7ff fd77 	bl	8005910 <_ZN8touchgfx5ImageC1ERKNS_6BitmapE>
 8005e22:	687b      	ldr	r3, [r7, #4]
 8005e24:	f503 7345 	add.w	r3, r3, #788	@ 0x314
 8005e28:	4618      	mov	r0, r3
 8005e2a:	f7ff fcc1 	bl	80057b0 <_ZN8touchgfx9ContainerC1Ev>
 8005e2e:	687b      	ldr	r3, [r7, #4]
 8005e30:	f503 7350 	add.w	r3, r3, #832	@ 0x340
 8005e34:	4618      	mov	r0, r3
 8005e36:	f7ff fdb3 	bl	80059a0 <_ZN8touchgfx13BoxWithBorderC1Ev>
 8005e3a:	687b      	ldr	r3, [r7, #4]
 8005e3c:	f503 735d 	add.w	r3, r3, #884	@ 0x374
 8005e40:	4618      	mov	r0, r3
 8005e42:	f7ff fdfd 	bl	8005a40 <_ZN8touchgfx8TextAreaC1Ev>
 8005e46:	687b      	ldr	r3, [r7, #4]
 8005e48:	f503 706c 	add.w	r0, r3, #944	@ 0x3b0
 8005e4c:	4ba0      	ldr	r3, [pc, #640]	@ (80060d0 <_ZN24Localize_AnomalyViewBaseC1Ev+0x398>)
 8005e4e:	61fb      	str	r3, [r7, #28]
 8005e50:	2300      	movs	r3, #0
 8005e52:	623b      	str	r3, [r7, #32]
 8005e54:	f107 031c 	add.w	r3, r7, #28
 8005e58:	cb0c      	ldmia	r3, {r2, r3}
 8005e5a:	6879      	ldr	r1, [r7, #4]
 8005e5c:	f000 fc7a 	bl	8006754 <_ZN8touchgfx8CallbackI24Localize_AnomalyViewBaseRKNS_14AbstractButtonEvvEC1EPS1_MS1_FvS4_E>
{

    __background.setPosition(0, 0, 480, 272);
 8005e60:	687b      	ldr	r3, [r7, #4]
 8005e62:	f103 0040 	add.w	r0, r3, #64	@ 0x40
 8005e66:	f44f 7388 	mov.w	r3, #272	@ 0x110
 8005e6a:	9300      	str	r3, [sp, #0]
 8005e6c:	f44f 73f0 	mov.w	r3, #480	@ 0x1e0
 8005e70:	2200      	movs	r2, #0
 8005e72:	2100      	movs	r1, #0
 8005e74:	f7fe f817 	bl	8003ea6 <_ZN8touchgfx8Drawable11setPositionEssss>
    __background.setColor(touchgfx::Color::getColorFromRGB(0, 0, 0));
 8005e78:	687b      	ldr	r3, [r7, #4]
 8005e7a:	f103 0440 	add.w	r4, r3, #64	@ 0x40
 8005e7e:	2300      	movs	r3, #0
 8005e80:	f887 3082 	strb.w	r3, [r7, #130]	@ 0x82
 8005e84:	2300      	movs	r3, #0
 8005e86:	f887 3081 	strb.w	r3, [r7, #129]	@ 0x81
 8005e8a:	2300      	movs	r3, #0
 8005e8c:	f887 3080 	strb.w	r3, [r7, #128]	@ 0x80
     *
     * @return The color representation depending on LCD color format.
     */
    FORCE_INLINE_FUNCTION static colortype getColorFromRGB(uint8_t red, uint8_t green, uint8_t blue)
    {
        return 0xFF000000 | (red << 16) | (green << 8) | (blue);
 8005e90:	f897 3082 	ldrb.w	r3, [r7, #130]	@ 0x82
 8005e94:	041a      	lsls	r2, r3, #16
 8005e96:	f897 3081 	ldrb.w	r3, [r7, #129]	@ 0x81
 8005e9a:	021b      	lsls	r3, r3, #8
 8005e9c:	431a      	orrs	r2, r3
 8005e9e:	f897 3080 	ldrb.w	r3, [r7, #128]	@ 0x80
 8005ea2:	4313      	orrs	r3, r2
 8005ea4:	f043 427f 	orr.w	r2, r3, #4278190080	@ 0xff000000
 8005ea8:	f107 037c 	add.w	r3, r7, #124	@ 0x7c
 8005eac:	4611      	mov	r1, r2
 8005eae:	4618      	mov	r0, r3
 8005eb0:	f7ff fc4f 	bl	8005752 <_ZN8touchgfx9colortypeC1Em>
 8005eb4:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8005eb6:	4619      	mov	r1, r3
 8005eb8:	4620      	mov	r0, r4
 8005eba:	f7ff fd1b 	bl	80058f4 <_ZN8touchgfx3Box8setColorENS_9colortypeE>

    Main_Background.setXY(0, 0);
 8005ebe:	687b      	ldr	r3, [r7, #4]
 8005ec0:	336c      	adds	r3, #108	@ 0x6c
 8005ec2:	2200      	movs	r2, #0
 8005ec4:	2100      	movs	r1, #0
 8005ec6:	4618      	mov	r0, r3
 8005ec8:	f7fe f846 	bl	8003f58 <_ZN8touchgfx8Drawable5setXYEss>
    Main_Background.setBitmap(touchgfx::Bitmap(BITMAP_BACKGROUND_1_ID));
 8005ecc:	687b      	ldr	r3, [r7, #4]
 8005ece:	f103 046c 	add.w	r4, r3, #108	@ 0x6c
 8005ed2:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8005ed6:	2100      	movs	r1, #0
 8005ed8:	4618      	mov	r0, r3
 8005eda:	f7ff fc49 	bl	8005770 <_ZN8touchgfx6BitmapC1Et>
 8005ede:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8005ee2:	4619      	mov	r1, r3
 8005ee4:	4620      	mov	r0, r4
 8005ee6:	f013 fea8 	bl	8019c3a <_ZN8touchgfx5Image9setBitmapERKNS_6BitmapE>

    Button_Panel.setPosition(10, 187, 460, 77);
 8005eea:	687b      	ldr	r3, [r7, #4]
 8005eec:	f103 0098 	add.w	r0, r3, #152	@ 0x98
 8005ef0:	234d      	movs	r3, #77	@ 0x4d
 8005ef2:	9300      	str	r3, [sp, #0]
 8005ef4:	f44f 73e6 	mov.w	r3, #460	@ 0x1cc
 8005ef8:	22bb      	movs	r2, #187	@ 0xbb
 8005efa:	210a      	movs	r1, #10
 8005efc:	f7fd ffd3 	bl	8003ea6 <_ZN8touchgfx8Drawable11setPositionEssss>

    Button_Panel_Background.setPosition(0, 0, 460, 77);
 8005f00:	687b      	ldr	r3, [r7, #4]
 8005f02:	f103 00c4 	add.w	r0, r3, #196	@ 0xc4
 8005f06:	234d      	movs	r3, #77	@ 0x4d
 8005f08:	9300      	str	r3, [sp, #0]
 8005f0a:	f44f 73e6 	mov.w	r3, #460	@ 0x1cc
 8005f0e:	2200      	movs	r2, #0
 8005f10:	2100      	movs	r1, #0
 8005f12:	f7fd ffc8 	bl	8003ea6 <_ZN8touchgfx8Drawable11setPositionEssss>
    Button_Panel_Background.setColor(touchgfx::Color::getColorFromRGB(78, 137, 174));
 8005f16:	687b      	ldr	r3, [r7, #4]
 8005f18:	f103 04c4 	add.w	r4, r3, #196	@ 0xc4
 8005f1c:	234e      	movs	r3, #78	@ 0x4e
 8005f1e:	f887 3085 	strb.w	r3, [r7, #133]	@ 0x85
 8005f22:	2389      	movs	r3, #137	@ 0x89
 8005f24:	f887 3084 	strb.w	r3, [r7, #132]	@ 0x84
 8005f28:	23ae      	movs	r3, #174	@ 0xae
 8005f2a:	f887 3083 	strb.w	r3, [r7, #131]	@ 0x83
 8005f2e:	f897 3085 	ldrb.w	r3, [r7, #133]	@ 0x85
 8005f32:	041a      	lsls	r2, r3, #16
 8005f34:	f897 3084 	ldrb.w	r3, [r7, #132]	@ 0x84
 8005f38:	021b      	lsls	r3, r3, #8
 8005f3a:	431a      	orrs	r2, r3
 8005f3c:	f897 3083 	ldrb.w	r3, [r7, #131]	@ 0x83
 8005f40:	4313      	orrs	r3, r2
 8005f42:	f043 427f 	orr.w	r2, r3, #4278190080	@ 0xff000000
 8005f46:	f107 0378 	add.w	r3, r7, #120	@ 0x78
 8005f4a:	4611      	mov	r1, r2
 8005f4c:	4618      	mov	r0, r3
 8005f4e:	f7ff fc00 	bl	8005752 <_ZN8touchgfx9colortypeC1Em>
 8005f52:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8005f54:	4619      	mov	r1, r3
 8005f56:	4620      	mov	r0, r4
 8005f58:	f7ff fccc 	bl	80058f4 <_ZN8touchgfx3Box8setColorENS_9colortypeE>
    Button_Panel_Background.setBorderColor(touchgfx::Color::getColorFromRGB(237, 102, 99));
 8005f5c:	687b      	ldr	r3, [r7, #4]
 8005f5e:	f103 04c4 	add.w	r4, r3, #196	@ 0xc4
 8005f62:	23ed      	movs	r3, #237	@ 0xed
 8005f64:	f887 3088 	strb.w	r3, [r7, #136]	@ 0x88
 8005f68:	2366      	movs	r3, #102	@ 0x66
 8005f6a:	f887 3087 	strb.w	r3, [r7, #135]	@ 0x87
 8005f6e:	2363      	movs	r3, #99	@ 0x63
 8005f70:	f887 3086 	strb.w	r3, [r7, #134]	@ 0x86
 8005f74:	f897 3088 	ldrb.w	r3, [r7, #136]	@ 0x88
 8005f78:	041a      	lsls	r2, r3, #16
 8005f7a:	f897 3087 	ldrb.w	r3, [r7, #135]	@ 0x87
 8005f7e:	021b      	lsls	r3, r3, #8
 8005f80:	431a      	orrs	r2, r3
 8005f82:	f897 3086 	ldrb.w	r3, [r7, #134]	@ 0x86
 8005f86:	4313      	orrs	r3, r2
 8005f88:	f043 427f 	orr.w	r2, r3, #4278190080	@ 0xff000000
 8005f8c:	f107 0374 	add.w	r3, r7, #116	@ 0x74
 8005f90:	4611      	mov	r1, r2
 8005f92:	4618      	mov	r0, r3
 8005f94:	f7ff fbdd 	bl	8005752 <_ZN8touchgfx9colortypeC1Em>
 8005f98:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8005f9a:	4619      	mov	r1, r3
 8005f9c:	4620      	mov	r0, r4
 8005f9e:	f7ff fd1b 	bl	80059d8 <_ZN8touchgfx13BoxWithBorder14setBorderColorENS_9colortypeE>
    Button_Panel_Background.setBorderSize(5);
 8005fa2:	687b      	ldr	r3, [r7, #4]
 8005fa4:	33c4      	adds	r3, #196	@ 0xc4
 8005fa6:	2105      	movs	r1, #5
 8005fa8:	4618      	mov	r0, r3
 8005faa:	f7ff fd23 	bl	80059f4 <_ZN8touchgfx13BoxWithBorder13setBorderSizeEt>
    Button_Panel.add(Button_Panel_Background);
 8005fae:	687b      	ldr	r3, [r7, #4]
 8005fb0:	f103 0298 	add.w	r2, r3, #152	@ 0x98
 8005fb4:	687b      	ldr	r3, [r7, #4]
 8005fb6:	33c4      	adds	r3, #196	@ 0xc4
 8005fb8:	4619      	mov	r1, r3
 8005fba:	4610      	mov	r0, r2
 8005fbc:	f011 fc98 	bl	80178f0 <_ZN8touchgfx9Container3addERNS_8DrawableE>

    Anomaly_Detection_Panel.setPosition(5, 4, 450, 73);
 8005fc0:	687b      	ldr	r3, [r7, #4]
 8005fc2:	f103 00f8 	add.w	r0, r3, #248	@ 0xf8
 8005fc6:	2349      	movs	r3, #73	@ 0x49
 8005fc8:	9300      	str	r3, [sp, #0]
 8005fca:	f44f 73e1 	mov.w	r3, #450	@ 0x1c2
 8005fce:	2204      	movs	r2, #4
 8005fd0:	2105      	movs	r1, #5
 8005fd2:	f7fd ff68 	bl	8003ea6 <_ZN8touchgfx8Drawable11setPositionEssss>

    Anomaly_Detection_Background.setPosition(0, 1, 450, 67);
 8005fd6:	687b      	ldr	r3, [r7, #4]
 8005fd8:	f503 7092 	add.w	r0, r3, #292	@ 0x124
 8005fdc:	2343      	movs	r3, #67	@ 0x43
 8005fde:	9300      	str	r3, [sp, #0]
 8005fe0:	f44f 73e1 	mov.w	r3, #450	@ 0x1c2
 8005fe4:	2201      	movs	r2, #1
 8005fe6:	2100      	movs	r1, #0
 8005fe8:	f7fd ff5d 	bl	8003ea6 <_ZN8touchgfx8Drawable11setPositionEssss>
    Anomaly_Detection_Background.setColor(touchgfx::Color::getColorFromRGB(67, 101, 139));
 8005fec:	687b      	ldr	r3, [r7, #4]
 8005fee:	f503 7492 	add.w	r4, r3, #292	@ 0x124
 8005ff2:	2343      	movs	r3, #67	@ 0x43
 8005ff4:	f887 308b 	strb.w	r3, [r7, #139]	@ 0x8b
 8005ff8:	2365      	movs	r3, #101	@ 0x65
 8005ffa:	f887 308a 	strb.w	r3, [r7, #138]	@ 0x8a
 8005ffe:	238b      	movs	r3, #139	@ 0x8b
 8006000:	f887 3089 	strb.w	r3, [r7, #137]	@ 0x89
 8006004:	f897 308b 	ldrb.w	r3, [r7, #139]	@ 0x8b
 8006008:	041a      	lsls	r2, r3, #16
 800600a:	f897 308a 	ldrb.w	r3, [r7, #138]	@ 0x8a
 800600e:	021b      	lsls	r3, r3, #8
 8006010:	431a      	orrs	r2, r3
 8006012:	f897 3089 	ldrb.w	r3, [r7, #137]	@ 0x89
 8006016:	4313      	orrs	r3, r2
 8006018:	f043 427f 	orr.w	r2, r3, #4278190080	@ 0xff000000
 800601c:	f107 0370 	add.w	r3, r7, #112	@ 0x70
 8006020:	4611      	mov	r1, r2
 8006022:	4618      	mov	r0, r3
 8006024:	f7ff fb95 	bl	8005752 <_ZN8touchgfx9colortypeC1Em>
 8006028:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800602a:	4619      	mov	r1, r3
 800602c:	4620      	mov	r0, r4
 800602e:	f7ff fc61 	bl	80058f4 <_ZN8touchgfx3Box8setColorENS_9colortypeE>
    Anomaly_Detection_Background.setBorderColor(touchgfx::Color::getColorFromRGB(0, 0, 0));
 8006032:	687b      	ldr	r3, [r7, #4]
 8006034:	f503 7492 	add.w	r4, r3, #292	@ 0x124
 8006038:	2300      	movs	r3, #0
 800603a:	f887 308e 	strb.w	r3, [r7, #142]	@ 0x8e
 800603e:	2300      	movs	r3, #0
 8006040:	f887 308d 	strb.w	r3, [r7, #141]	@ 0x8d
 8006044:	2300      	movs	r3, #0
 8006046:	f887 308c 	strb.w	r3, [r7, #140]	@ 0x8c
 800604a:	f897 308e 	ldrb.w	r3, [r7, #142]	@ 0x8e
 800604e:	041a      	lsls	r2, r3, #16
 8006050:	f897 308d 	ldrb.w	r3, [r7, #141]	@ 0x8d
 8006054:	021b      	lsls	r3, r3, #8
 8006056:	431a      	orrs	r2, r3
 8006058:	f897 308c 	ldrb.w	r3, [r7, #140]	@ 0x8c
 800605c:	4313      	orrs	r3, r2
 800605e:	f043 427f 	orr.w	r2, r3, #4278190080	@ 0xff000000
 8006062:	f107 036c 	add.w	r3, r7, #108	@ 0x6c
 8006066:	4611      	mov	r1, r2
 8006068:	4618      	mov	r0, r3
 800606a:	f7ff fb72 	bl	8005752 <_ZN8touchgfx9colortypeC1Em>
 800606e:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8006070:	4619      	mov	r1, r3
 8006072:	4620      	mov	r0, r4
 8006074:	f7ff fcb0 	bl	80059d8 <_ZN8touchgfx13BoxWithBorder14setBorderColorENS_9colortypeE>
    Anomaly_Detection_Background.setBorderSize(2);
 8006078:	687b      	ldr	r3, [r7, #4]
 800607a:	f503 7392 	add.w	r3, r3, #292	@ 0x124
 800607e:	2102      	movs	r1, #2
 8006080:	4618      	mov	r0, r3
 8006082:	f7ff fcb7 	bl	80059f4 <_ZN8touchgfx13BoxWithBorder13setBorderSizeEt>
    Anomaly_Detection_Panel.add(Anomaly_Detection_Background);
 8006086:	687b      	ldr	r3, [r7, #4]
 8006088:	f103 02f8 	add.w	r2, r3, #248	@ 0xf8
 800608c:	687b      	ldr	r3, [r7, #4]
 800608e:	f503 7392 	add.w	r3, r3, #292	@ 0x124
 8006092:	4619      	mov	r1, r3
 8006094:	4610      	mov	r0, r2
 8006096:	f011 fc2b 	bl	80178f0 <_ZN8touchgfx9Container3addERNS_8DrawableE>
    Button_Panel.add(Anomaly_Detection_Panel);
 800609a:	687b      	ldr	r3, [r7, #4]
 800609c:	f103 0298 	add.w	r2, r3, #152	@ 0x98
 80060a0:	687b      	ldr	r3, [r7, #4]
 80060a2:	33f8      	adds	r3, #248	@ 0xf8
 80060a4:	4619      	mov	r1, r3
 80060a6:	4610      	mov	r0, r2
 80060a8:	f011 fc22 	bl	80178f0 <_ZN8touchgfx9Container3addERNS_8DrawableE>

    Alarm_Mute_Indicator_Textbox_1_1_1.setPosition(142, 47, 177, 20);
 80060ac:	687b      	ldr	r3, [r7, #4]
 80060ae:	f503 70ac 	add.w	r0, r3, #344	@ 0x158
 80060b2:	2314      	movs	r3, #20
 80060b4:	9300      	str	r3, [sp, #0]
 80060b6:	23b1      	movs	r3, #177	@ 0xb1
 80060b8:	222f      	movs	r2, #47	@ 0x2f
 80060ba:	218e      	movs	r1, #142	@ 0x8e
 80060bc:	f7fd fef3 	bl	8003ea6 <_ZN8touchgfx8Drawable11setPositionEssss>

    AnomalyDetection_Border_1_1_1_1.setPosition(0, 3, 177, 17);
 80060c0:	687b      	ldr	r3, [r7, #4]
 80060c2:	f503 70c2 	add.w	r0, r3, #388	@ 0x184
 80060c6:	2311      	movs	r3, #17
 80060c8:	e004      	b.n	80060d4 <_ZN24Localize_AnomalyViewBaseC1Ev+0x39c>
 80060ca:	bf00      	nop
 80060cc:	0802cf30 	.word	0x0802cf30
 80060d0:	080066dd 	.word	0x080066dd
 80060d4:	9300      	str	r3, [sp, #0]
 80060d6:	23b1      	movs	r3, #177	@ 0xb1
 80060d8:	2203      	movs	r2, #3
 80060da:	2100      	movs	r1, #0
 80060dc:	f7fd fee3 	bl	8003ea6 <_ZN8touchgfx8Drawable11setPositionEssss>
    AnomalyDetection_Border_1_1_1_1.setColor(touchgfx::Color::getColorFromRGB(0, 0, 0));
 80060e0:	687b      	ldr	r3, [r7, #4]
 80060e2:	f503 74c2 	add.w	r4, r3, #388	@ 0x184
 80060e6:	2300      	movs	r3, #0
 80060e8:	f887 3091 	strb.w	r3, [r7, #145]	@ 0x91
 80060ec:	2300      	movs	r3, #0
 80060ee:	f887 3090 	strb.w	r3, [r7, #144]	@ 0x90
 80060f2:	2300      	movs	r3, #0
 80060f4:	f887 308f 	strb.w	r3, [r7, #143]	@ 0x8f
 80060f8:	f897 3091 	ldrb.w	r3, [r7, #145]	@ 0x91
 80060fc:	041a      	lsls	r2, r3, #16
 80060fe:	f897 3090 	ldrb.w	r3, [r7, #144]	@ 0x90
 8006102:	021b      	lsls	r3, r3, #8
 8006104:	431a      	orrs	r2, r3
 8006106:	f897 308f 	ldrb.w	r3, [r7, #143]	@ 0x8f
 800610a:	4313      	orrs	r3, r2
 800610c:	f043 427f 	orr.w	r2, r3, #4278190080	@ 0xff000000
 8006110:	f107 0368 	add.w	r3, r7, #104	@ 0x68
 8006114:	4611      	mov	r1, r2
 8006116:	4618      	mov	r0, r3
 8006118:	f7ff fb1b 	bl	8005752 <_ZN8touchgfx9colortypeC1Em>
 800611c:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800611e:	4619      	mov	r1, r3
 8006120:	4620      	mov	r0, r4
 8006122:	f7ff fbe7 	bl	80058f4 <_ZN8touchgfx3Box8setColorENS_9colortypeE>
    AnomalyDetection_Border_1_1_1_1.setBorderColor(touchgfx::Color::getColorFromRGB(237, 102, 99));
 8006126:	687b      	ldr	r3, [r7, #4]
 8006128:	f503 74c2 	add.w	r4, r3, #388	@ 0x184
 800612c:	23ed      	movs	r3, #237	@ 0xed
 800612e:	f887 3094 	strb.w	r3, [r7, #148]	@ 0x94
 8006132:	2366      	movs	r3, #102	@ 0x66
 8006134:	f887 3093 	strb.w	r3, [r7, #147]	@ 0x93
 8006138:	2363      	movs	r3, #99	@ 0x63
 800613a:	f887 3092 	strb.w	r3, [r7, #146]	@ 0x92
 800613e:	f897 3094 	ldrb.w	r3, [r7, #148]	@ 0x94
 8006142:	041a      	lsls	r2, r3, #16
 8006144:	f897 3093 	ldrb.w	r3, [r7, #147]	@ 0x93
 8006148:	021b      	lsls	r3, r3, #8
 800614a:	431a      	orrs	r2, r3
 800614c:	f897 3092 	ldrb.w	r3, [r7, #146]	@ 0x92
 8006150:	4313      	orrs	r3, r2
 8006152:	f043 427f 	orr.w	r2, r3, #4278190080	@ 0xff000000
 8006156:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 800615a:	4611      	mov	r1, r2
 800615c:	4618      	mov	r0, r3
 800615e:	f7ff faf8 	bl	8005752 <_ZN8touchgfx9colortypeC1Em>
 8006162:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8006164:	4619      	mov	r1, r3
 8006166:	4620      	mov	r0, r4
 8006168:	f7ff fc36 	bl	80059d8 <_ZN8touchgfx13BoxWithBorder14setBorderColorENS_9colortypeE>
    AnomalyDetection_Border_1_1_1_1.setBorderSize(3);
 800616c:	687b      	ldr	r3, [r7, #4]
 800616e:	f503 73c2 	add.w	r3, r3, #388	@ 0x184
 8006172:	2103      	movs	r1, #3
 8006174:	4618      	mov	r0, r3
 8006176:	f7ff fc3d 	bl	80059f4 <_ZN8touchgfx13BoxWithBorder13setBorderSizeEt>
    Alarm_Mute_Indicator_Textbox_1_1_1.add(AnomalyDetection_Border_1_1_1_1);
 800617a:	687b      	ldr	r3, [r7, #4]
 800617c:	f503 72ac 	add.w	r2, r3, #344	@ 0x158
 8006180:	687b      	ldr	r3, [r7, #4]
 8006182:	f503 73c2 	add.w	r3, r3, #388	@ 0x184
 8006186:	4619      	mov	r1, r3
 8006188:	4610      	mov	r0, r2
 800618a:	f011 fbb1 	bl	80178f0 <_ZN8touchgfx9Container3addERNS_8DrawableE>

    AnomalyDetection_Text.setXY(7, 5);
 800618e:	687b      	ldr	r3, [r7, #4]
 8006190:	f503 73dc 	add.w	r3, r3, #440	@ 0x1b8
 8006194:	2205      	movs	r2, #5
 8006196:	2107      	movs	r1, #7
 8006198:	4618      	mov	r0, r3
 800619a:	f7fd fedd 	bl	8003f58 <_ZN8touchgfx8Drawable5setXYEss>
    AnomalyDetection_Text.setColor(touchgfx::Color::getColorFromRGB(255, 255, 255));
 800619e:	687b      	ldr	r3, [r7, #4]
 80061a0:	f503 74dc 	add.w	r4, r3, #440	@ 0x1b8
 80061a4:	23ff      	movs	r3, #255	@ 0xff
 80061a6:	f887 3097 	strb.w	r3, [r7, #151]	@ 0x97
 80061aa:	23ff      	movs	r3, #255	@ 0xff
 80061ac:	f887 3096 	strb.w	r3, [r7, #150]	@ 0x96
 80061b0:	23ff      	movs	r3, #255	@ 0xff
 80061b2:	f887 3095 	strb.w	r3, [r7, #149]	@ 0x95
 80061b6:	f897 3097 	ldrb.w	r3, [r7, #151]	@ 0x97
 80061ba:	041a      	lsls	r2, r3, #16
 80061bc:	f897 3096 	ldrb.w	r3, [r7, #150]	@ 0x96
 80061c0:	021b      	lsls	r3, r3, #8
 80061c2:	431a      	orrs	r2, r3
 80061c4:	f897 3095 	ldrb.w	r3, [r7, #149]	@ 0x95
 80061c8:	4313      	orrs	r3, r2
 80061ca:	f043 427f 	orr.w	r2, r3, #4278190080	@ 0xff000000
 80061ce:	f107 0360 	add.w	r3, r7, #96	@ 0x60
 80061d2:	4611      	mov	r1, r2
 80061d4:	4618      	mov	r0, r3
 80061d6:	f7ff fabc 	bl	8005752 <_ZN8touchgfx9colortypeC1Em>
 80061da:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80061dc:	f8c7 4098 	str.w	r4, [r7, #152]	@ 0x98
 80061e0:	613b      	str	r3, [r7, #16]
     *
     * @param  color The color to use.
     */
    FORCE_INLINE_FUNCTION void setColor(colortype color)
    {
        this->color = color;
 80061e2:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 80061e6:	693a      	ldr	r2, [r7, #16]
 80061e8:	631a      	str	r2, [r3, #48]	@ 0x30
    }
 80061ea:	bf00      	nop
    AnomalyDetection_Text.setLinespacing(0);
 80061ec:	687b      	ldr	r3, [r7, #4]
 80061ee:	f503 73dc 	add.w	r3, r3, #440	@ 0x1b8
 80061f2:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 80061f6:	2300      	movs	r3, #0
 80061f8:	f8a7 309e 	strh.w	r3, [r7, #158]	@ 0x9e
     *
     * @see getLinespacing
     */
    FORCE_INLINE_FUNCTION void setLinespacing(int16_t space)
    {
        linespace = space;
 80061fc:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8006200:	f8b7 209e 	ldrh.w	r2, [r7, #158]	@ 0x9e
 8006204:	869a      	strh	r2, [r3, #52]	@ 0x34
    }
 8006206:	bf00      	nop
    AnomalyDetection_Text.setTypedText(touchgfx::TypedText(T___SINGLEUSE_6CIV));
 8006208:	687b      	ldr	r3, [r7, #4]
 800620a:	f503 74dc 	add.w	r4, r3, #440	@ 0x1b8
 800620e:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8006212:	2107      	movs	r1, #7
 8006214:	4618      	mov	r0, r3
 8006216:	f7ff fbfd 	bl	8005a14 <_ZN8touchgfx9TypedTextC1Et>
 800621a:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 800621e:	4619      	mov	r1, r3
 8006220:	4620      	mov	r0, r4
 8006222:	f013 fa90 	bl	8019746 <_ZN8touchgfx8TextArea12setTypedTextERKNS_9TypedTextE>
 8006226:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 800622a:	4618      	mov	r0, r3
 800622c:	f7fd fd88 	bl	8003d40 <_ZN8touchgfx9TypedTextD1Ev>
    Alarm_Mute_Indicator_Textbox_1_1_1.add(AnomalyDetection_Text);
 8006230:	687b      	ldr	r3, [r7, #4]
 8006232:	f503 72ac 	add.w	r2, r3, #344	@ 0x158
 8006236:	687b      	ldr	r3, [r7, #4]
 8006238:	f503 73dc 	add.w	r3, r3, #440	@ 0x1b8
 800623c:	4619      	mov	r1, r3
 800623e:	4610      	mov	r0, r2
 8006240:	f011 fb56 	bl	80178f0 <_ZN8touchgfx9Container3addERNS_8DrawableE>
    Button_Panel.add(Alarm_Mute_Indicator_Textbox_1_1_1);
 8006244:	687b      	ldr	r3, [r7, #4]
 8006246:	f103 0298 	add.w	r2, r3, #152	@ 0x98
 800624a:	687b      	ldr	r3, [r7, #4]
 800624c:	f503 73ac 	add.w	r3, r3, #344	@ 0x158
 8006250:	4619      	mov	r1, r3
 8006252:	4610      	mov	r0, r2
 8006254:	f011 fb4c 	bl	80178f0 <_ZN8touchgfx9Container3addERNS_8DrawableE>

    Localize_Button.setXY(188, 15);
 8006258:	687b      	ldr	r3, [r7, #4]
 800625a:	f503 73fa 	add.w	r3, r3, #500	@ 0x1f4
 800625e:	220f      	movs	r2, #15
 8006260:	21bc      	movs	r1, #188	@ 0xbc
 8006262:	4618      	mov	r0, r3
 8006264:	f7fd fe78 	bl	8003f58 <_ZN8touchgfx8Drawable5setXYEss>
    Localize_Button.setBitmaps(touchgfx::Bitmap(BITMAP_RECT_BUTTON_UNPRESSED_ID), touchgfx::Bitmap(BITMAP_RECT_BUTTON_PRESSED_ID));
 8006268:	687b      	ldr	r3, [r7, #4]
 800626a:	f503 74fa 	add.w	r4, r3, #500	@ 0x1f4
 800626e:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8006272:	2103      	movs	r1, #3
 8006274:	4618      	mov	r0, r3
 8006276:	f7ff fa7b 	bl	8005770 <_ZN8touchgfx6BitmapC1Et>
 800627a:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 800627e:	2102      	movs	r1, #2
 8006280:	4618      	mov	r0, r3
 8006282:	f7ff fa75 	bl	8005770 <_ZN8touchgfx6BitmapC1Et>
 8006286:	f107 0234 	add.w	r2, r7, #52	@ 0x34
 800628a:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 800628e:	4619      	mov	r1, r3
 8006290:	4620      	mov	r0, r4
 8006292:	f013 fa8f 	bl	80197b4 <_ZN8touchgfx6Button10setBitmapsERKNS_6BitmapES3_>
    Localize_Button.setAction(buttonCallback);
 8006296:	687b      	ldr	r3, [r7, #4]
 8006298:	f503 72fa 	add.w	r2, r3, #500	@ 0x1f4
 800629c:	687b      	ldr	r3, [r7, #4]
 800629e:	f503 736c 	add.w	r3, r3, #944	@ 0x3b0
 80062a2:	4619      	mov	r1, r3
 80062a4:	4610      	mov	r0, r2
 80062a6:	f7ff fc2b 	bl	8005b00 <_ZN8touchgfx14AbstractButton9setActionERNS_15GenericCallbackIRKS0_vvEE>
    Button_Panel.add(Localize_Button);
 80062aa:	687b      	ldr	r3, [r7, #4]
 80062ac:	f103 0298 	add.w	r2, r3, #152	@ 0x98
 80062b0:	687b      	ldr	r3, [r7, #4]
 80062b2:	f503 73fa 	add.w	r3, r3, #500	@ 0x1f4
 80062b6:	4619      	mov	r1, r3
 80062b8:	4610      	mov	r0, r2
 80062ba:	f011 fb19 	bl	80178f0 <_ZN8touchgfx9Container3addERNS_8DrawableE>

    Message_panel.setPosition(10, 8, 460, 194);
 80062be:	687b      	ldr	r3, [r7, #4]
 80062c0:	f503 700a 	add.w	r0, r3, #552	@ 0x228
 80062c4:	23c2      	movs	r3, #194	@ 0xc2
 80062c6:	9300      	str	r3, [sp, #0]
 80062c8:	f44f 73e6 	mov.w	r3, #460	@ 0x1cc
 80062cc:	2208      	movs	r2, #8
 80062ce:	210a      	movs	r1, #10
 80062d0:	f7fd fde9 	bl	8003ea6 <_ZN8touchgfx8Drawable11setPositionEssss>

    Button_Panel_Background_1.setPosition(0, 0, 460, 183);
 80062d4:	687b      	ldr	r3, [r7, #4]
 80062d6:	f503 7015 	add.w	r0, r3, #596	@ 0x254
 80062da:	23b7      	movs	r3, #183	@ 0xb7
 80062dc:	9300      	str	r3, [sp, #0]
 80062de:	f44f 73e6 	mov.w	r3, #460	@ 0x1cc
 80062e2:	2200      	movs	r2, #0
 80062e4:	2100      	movs	r1, #0
 80062e6:	f7fd fdde 	bl	8003ea6 <_ZN8touchgfx8Drawable11setPositionEssss>
    Button_Panel_Background_1.setColor(touchgfx::Color::getColorFromRGB(78, 137, 174));
 80062ea:	687b      	ldr	r3, [r7, #4]
 80062ec:	f503 7415 	add.w	r4, r3, #596	@ 0x254
 80062f0:	234e      	movs	r3, #78	@ 0x4e
 80062f2:	f887 30a9 	strb.w	r3, [r7, #169]	@ 0xa9
 80062f6:	2389      	movs	r3, #137	@ 0x89
 80062f8:	f887 30a8 	strb.w	r3, [r7, #168]	@ 0xa8
 80062fc:	23ae      	movs	r3, #174	@ 0xae
 80062fe:	f887 30a7 	strb.w	r3, [r7, #167]	@ 0xa7
 8006302:	f897 30a9 	ldrb.w	r3, [r7, #169]	@ 0xa9
 8006306:	041a      	lsls	r2, r3, #16
 8006308:	f897 30a8 	ldrb.w	r3, [r7, #168]	@ 0xa8
 800630c:	021b      	lsls	r3, r3, #8
 800630e:	431a      	orrs	r2, r3
 8006310:	f897 30a7 	ldrb.w	r3, [r7, #167]	@ 0xa7
 8006314:	4313      	orrs	r3, r2
 8006316:	f043 427f 	orr.w	r2, r3, #4278190080	@ 0xff000000
 800631a:	f107 035c 	add.w	r3, r7, #92	@ 0x5c
 800631e:	4611      	mov	r1, r2
 8006320:	4618      	mov	r0, r3
 8006322:	f7ff fa16 	bl	8005752 <_ZN8touchgfx9colortypeC1Em>
 8006326:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8006328:	4619      	mov	r1, r3
 800632a:	4620      	mov	r0, r4
 800632c:	f7ff fae2 	bl	80058f4 <_ZN8touchgfx3Box8setColorENS_9colortypeE>
    Button_Panel_Background_1.setBorderColor(touchgfx::Color::getColorFromRGB(237, 102, 99));
 8006330:	687b      	ldr	r3, [r7, #4]
 8006332:	f503 7415 	add.w	r4, r3, #596	@ 0x254
 8006336:	23ed      	movs	r3, #237	@ 0xed
 8006338:	f887 30ac 	strb.w	r3, [r7, #172]	@ 0xac
 800633c:	2366      	movs	r3, #102	@ 0x66
 800633e:	f887 30ab 	strb.w	r3, [r7, #171]	@ 0xab
 8006342:	2363      	movs	r3, #99	@ 0x63
 8006344:	f887 30aa 	strb.w	r3, [r7, #170]	@ 0xaa
 8006348:	f897 30ac 	ldrb.w	r3, [r7, #172]	@ 0xac
 800634c:	041a      	lsls	r2, r3, #16
 800634e:	f897 30ab 	ldrb.w	r3, [r7, #171]	@ 0xab
 8006352:	021b      	lsls	r3, r3, #8
 8006354:	431a      	orrs	r2, r3
 8006356:	f897 30aa 	ldrb.w	r3, [r7, #170]	@ 0xaa
 800635a:	4313      	orrs	r3, r2
 800635c:	f043 427f 	orr.w	r2, r3, #4278190080	@ 0xff000000
 8006360:	f107 0358 	add.w	r3, r7, #88	@ 0x58
 8006364:	4611      	mov	r1, r2
 8006366:	4618      	mov	r0, r3
 8006368:	f7ff f9f3 	bl	8005752 <_ZN8touchgfx9colortypeC1Em>
 800636c:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800636e:	4619      	mov	r1, r3
 8006370:	4620      	mov	r0, r4
 8006372:	f7ff fb31 	bl	80059d8 <_ZN8touchgfx13BoxWithBorder14setBorderColorENS_9colortypeE>
    Button_Panel_Background_1.setBorderSize(5);
 8006376:	687b      	ldr	r3, [r7, #4]
 8006378:	f503 7315 	add.w	r3, r3, #596	@ 0x254
 800637c:	2105      	movs	r1, #5
 800637e:	4618      	mov	r0, r3
 8006380:	f7ff fb38 	bl	80059f4 <_ZN8touchgfx13BoxWithBorder13setBorderSizeEt>
    Message_panel.add(Button_Panel_Background_1);
 8006384:	687b      	ldr	r3, [r7, #4]
 8006386:	f503 720a 	add.w	r2, r3, #552	@ 0x228
 800638a:	687b      	ldr	r3, [r7, #4]
 800638c:	f503 7315 	add.w	r3, r3, #596	@ 0x254
 8006390:	4619      	mov	r1, r3
 8006392:	4610      	mov	r0, r2
 8006394:	f011 faac 	bl	80178f0 <_ZN8touchgfx9Container3addERNS_8DrawableE>

    Message_Board_Panel_1.setPosition(5, 4, 450, 175);
 8006398:	687b      	ldr	r3, [r7, #4]
 800639a:	f503 7022 	add.w	r0, r3, #648	@ 0x288
 800639e:	23af      	movs	r3, #175	@ 0xaf
 80063a0:	9300      	str	r3, [sp, #0]
 80063a2:	f44f 73e1 	mov.w	r3, #450	@ 0x1c2
 80063a6:	2204      	movs	r2, #4
 80063a8:	2105      	movs	r1, #5
 80063aa:	f7fd fd7c 	bl	8003ea6 <_ZN8touchgfx8Drawable11setPositionEssss>

    MessageBoard_Background_1.setPosition(0, 0, 450, 175);
 80063ae:	687b      	ldr	r3, [r7, #4]
 80063b0:	f503 702d 	add.w	r0, r3, #692	@ 0x2b4
 80063b4:	23af      	movs	r3, #175	@ 0xaf
 80063b6:	9300      	str	r3, [sp, #0]
 80063b8:	f44f 73e1 	mov.w	r3, #450	@ 0x1c2
 80063bc:	2200      	movs	r2, #0
 80063be:	2100      	movs	r1, #0
 80063c0:	f7fd fd71 	bl	8003ea6 <_ZN8touchgfx8Drawable11setPositionEssss>
    MessageBoard_Background_1.setColor(touchgfx::Color::getColorFromRGB(67, 101, 139));
 80063c4:	687b      	ldr	r3, [r7, #4]
 80063c6:	f503 742d 	add.w	r4, r3, #692	@ 0x2b4
 80063ca:	2343      	movs	r3, #67	@ 0x43
 80063cc:	f887 30af 	strb.w	r3, [r7, #175]	@ 0xaf
 80063d0:	2365      	movs	r3, #101	@ 0x65
 80063d2:	f887 30ae 	strb.w	r3, [r7, #174]	@ 0xae
 80063d6:	238b      	movs	r3, #139	@ 0x8b
 80063d8:	f887 30ad 	strb.w	r3, [r7, #173]	@ 0xad
 80063dc:	f897 30af 	ldrb.w	r3, [r7, #175]	@ 0xaf
 80063e0:	041a      	lsls	r2, r3, #16
 80063e2:	f897 30ae 	ldrb.w	r3, [r7, #174]	@ 0xae
 80063e6:	021b      	lsls	r3, r3, #8
 80063e8:	431a      	orrs	r2, r3
 80063ea:	f897 30ad 	ldrb.w	r3, [r7, #173]	@ 0xad
 80063ee:	4313      	orrs	r3, r2
 80063f0:	f043 427f 	orr.w	r2, r3, #4278190080	@ 0xff000000
 80063f4:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 80063f8:	4611      	mov	r1, r2
 80063fa:	4618      	mov	r0, r3
 80063fc:	f7ff f9a9 	bl	8005752 <_ZN8touchgfx9colortypeC1Em>
 8006400:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8006402:	4619      	mov	r1, r3
 8006404:	4620      	mov	r0, r4
 8006406:	f7ff fa75 	bl	80058f4 <_ZN8touchgfx3Box8setColorENS_9colortypeE>
    MessageBoard_Background_1.setBorderColor(touchgfx::Color::getColorFromRGB(0, 0, 0));
 800640a:	687b      	ldr	r3, [r7, #4]
 800640c:	f503 742d 	add.w	r4, r3, #692	@ 0x2b4
 8006410:	2300      	movs	r3, #0
 8006412:	f887 30b2 	strb.w	r3, [r7, #178]	@ 0xb2
 8006416:	2300      	movs	r3, #0
 8006418:	f887 30b1 	strb.w	r3, [r7, #177]	@ 0xb1
 800641c:	2300      	movs	r3, #0
 800641e:	f887 30b0 	strb.w	r3, [r7, #176]	@ 0xb0
 8006422:	f897 30b2 	ldrb.w	r3, [r7, #178]	@ 0xb2
 8006426:	041a      	lsls	r2, r3, #16
 8006428:	f897 30b1 	ldrb.w	r3, [r7, #177]	@ 0xb1
 800642c:	021b      	lsls	r3, r3, #8
 800642e:	431a      	orrs	r2, r3
 8006430:	f897 30b0 	ldrb.w	r3, [r7, #176]	@ 0xb0
 8006434:	4313      	orrs	r3, r2
 8006436:	f043 427f 	orr.w	r2, r3, #4278190080	@ 0xff000000
 800643a:	f107 0350 	add.w	r3, r7, #80	@ 0x50
 800643e:	4611      	mov	r1, r2
 8006440:	4618      	mov	r0, r3
 8006442:	f7ff f986 	bl	8005752 <_ZN8touchgfx9colortypeC1Em>
 8006446:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8006448:	4619      	mov	r1, r3
 800644a:	4620      	mov	r0, r4
 800644c:	f7ff fac4 	bl	80059d8 <_ZN8touchgfx13BoxWithBorder14setBorderColorENS_9colortypeE>
    MessageBoard_Background_1.setBorderSize(2);
 8006450:	687b      	ldr	r3, [r7, #4]
 8006452:	f503 732d 	add.w	r3, r3, #692	@ 0x2b4
 8006456:	2102      	movs	r1, #2
 8006458:	4618      	mov	r0, r3
 800645a:	f7ff facb 	bl	80059f4 <_ZN8touchgfx13BoxWithBorder13setBorderSizeEt>
    Message_Board_Panel_1.add(MessageBoard_Background_1);
 800645e:	687b      	ldr	r3, [r7, #4]
 8006460:	f503 7222 	add.w	r2, r3, #648	@ 0x288
 8006464:	687b      	ldr	r3, [r7, #4]
 8006466:	f503 732d 	add.w	r3, r3, #692	@ 0x2b4
 800646a:	4619      	mov	r1, r3
 800646c:	4610      	mov	r0, r2
 800646e:	f011 fa3f 	bl	80178f0 <_ZN8touchgfx9Container3addERNS_8DrawableE>

    Directional_Vector.setXY(95, 9);
 8006472:	687b      	ldr	r3, [r7, #4]
 8006474:	f503 733a 	add.w	r3, r3, #744	@ 0x2e8
 8006478:	2209      	movs	r2, #9
 800647a:	215f      	movs	r1, #95	@ 0x5f
 800647c:	4618      	mov	r0, r3
 800647e:	f7fd fd6b 	bl	8003f58 <_ZN8touchgfx8Drawable5setXYEss>
    Directional_Vector.setBitmap(touchgfx::Bitmap(BITMAP_VECTOR_IMAGE_ID));
 8006482:	687b      	ldr	r3, [r7, #4]
 8006484:	f503 743a 	add.w	r4, r3, #744	@ 0x2e8
 8006488:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 800648c:	210c      	movs	r1, #12
 800648e:	4618      	mov	r0, r3
 8006490:	f7ff f96e 	bl	8005770 <_ZN8touchgfx6BitmapC1Et>
 8006494:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 8006498:	4619      	mov	r1, r3
 800649a:	4620      	mov	r0, r4
 800649c:	f013 fbcd 	bl	8019c3a <_ZN8touchgfx5Image9setBitmapERKNS_6BitmapE>
    Message_Board_Panel_1.add(Directional_Vector);
 80064a0:	687b      	ldr	r3, [r7, #4]
 80064a2:	f503 7222 	add.w	r2, r3, #648	@ 0x288
 80064a6:	687b      	ldr	r3, [r7, #4]
 80064a8:	f503 733a 	add.w	r3, r3, #744	@ 0x2e8
 80064ac:	4619      	mov	r1, r3
 80064ae:	4610      	mov	r0, r2
 80064b0:	f011 fa1e 	bl	80178f0 <_ZN8touchgfx9Container3addERNS_8DrawableE>

    Message_Board_Textbox_1.setPosition(167, 0, 117, 20);
 80064b4:	687b      	ldr	r3, [r7, #4]
 80064b6:	f503 7045 	add.w	r0, r3, #788	@ 0x314
 80064ba:	2314      	movs	r3, #20
 80064bc:	9300      	str	r3, [sp, #0]
 80064be:	2375      	movs	r3, #117	@ 0x75
 80064c0:	2200      	movs	r2, #0
 80064c2:	21a7      	movs	r1, #167	@ 0xa7
 80064c4:	f7fd fcef 	bl	8003ea6 <_ZN8touchgfx8Drawable11setPositionEssss>

    MessageBoard_Border_1_1.setPosition(0, 3, 117, 17);
 80064c8:	687b      	ldr	r3, [r7, #4]
 80064ca:	f503 7050 	add.w	r0, r3, #832	@ 0x340
 80064ce:	2311      	movs	r3, #17
 80064d0:	9300      	str	r3, [sp, #0]
 80064d2:	2375      	movs	r3, #117	@ 0x75
 80064d4:	2203      	movs	r2, #3
 80064d6:	2100      	movs	r1, #0
 80064d8:	f7fd fce5 	bl	8003ea6 <_ZN8touchgfx8Drawable11setPositionEssss>
    MessageBoard_Border_1_1.setColor(touchgfx::Color::getColorFromRGB(0, 0, 0));
 80064dc:	687b      	ldr	r3, [r7, #4]
 80064de:	f503 7450 	add.w	r4, r3, #832	@ 0x340
 80064e2:	2300      	movs	r3, #0
 80064e4:	f887 30b5 	strb.w	r3, [r7, #181]	@ 0xb5
 80064e8:	2300      	movs	r3, #0
 80064ea:	f887 30b4 	strb.w	r3, [r7, #180]	@ 0xb4
 80064ee:	2300      	movs	r3, #0
 80064f0:	f887 30b3 	strb.w	r3, [r7, #179]	@ 0xb3
 80064f4:	f897 30b5 	ldrb.w	r3, [r7, #181]	@ 0xb5
 80064f8:	041a      	lsls	r2, r3, #16
 80064fa:	f897 30b4 	ldrb.w	r3, [r7, #180]	@ 0xb4
 80064fe:	021b      	lsls	r3, r3, #8
 8006500:	431a      	orrs	r2, r3
 8006502:	f897 30b3 	ldrb.w	r3, [r7, #179]	@ 0xb3
 8006506:	4313      	orrs	r3, r2
 8006508:	f043 427f 	orr.w	r2, r3, #4278190080	@ 0xff000000
 800650c:	f107 034c 	add.w	r3, r7, #76	@ 0x4c
 8006510:	4611      	mov	r1, r2
 8006512:	4618      	mov	r0, r3
 8006514:	f7ff f91d 	bl	8005752 <_ZN8touchgfx9colortypeC1Em>
 8006518:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800651a:	4619      	mov	r1, r3
 800651c:	4620      	mov	r0, r4
 800651e:	f7ff f9e9 	bl	80058f4 <_ZN8touchgfx3Box8setColorENS_9colortypeE>
    MessageBoard_Border_1_1.setBorderColor(touchgfx::Color::getColorFromRGB(237, 102, 99));
 8006522:	687b      	ldr	r3, [r7, #4]
 8006524:	f503 7450 	add.w	r4, r3, #832	@ 0x340
 8006528:	23ed      	movs	r3, #237	@ 0xed
 800652a:	f887 30b8 	strb.w	r3, [r7, #184]	@ 0xb8
 800652e:	2366      	movs	r3, #102	@ 0x66
 8006530:	f887 30b7 	strb.w	r3, [r7, #183]	@ 0xb7
 8006534:	2363      	movs	r3, #99	@ 0x63
 8006536:	f887 30b6 	strb.w	r3, [r7, #182]	@ 0xb6
 800653a:	f897 30b8 	ldrb.w	r3, [r7, #184]	@ 0xb8
 800653e:	041a      	lsls	r2, r3, #16
 8006540:	f897 30b7 	ldrb.w	r3, [r7, #183]	@ 0xb7
 8006544:	021b      	lsls	r3, r3, #8
 8006546:	431a      	orrs	r2, r3
 8006548:	f897 30b6 	ldrb.w	r3, [r7, #182]	@ 0xb6
 800654c:	4313      	orrs	r3, r2
 800654e:	f043 427f 	orr.w	r2, r3, #4278190080	@ 0xff000000
 8006552:	f107 0348 	add.w	r3, r7, #72	@ 0x48
 8006556:	4611      	mov	r1, r2
 8006558:	4618      	mov	r0, r3
 800655a:	f7ff f8fa 	bl	8005752 <_ZN8touchgfx9colortypeC1Em>
 800655e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8006560:	4619      	mov	r1, r3
 8006562:	4620      	mov	r0, r4
 8006564:	f7ff fa38 	bl	80059d8 <_ZN8touchgfx13BoxWithBorder14setBorderColorENS_9colortypeE>
    MessageBoard_Border_1_1.setBorderSize(3);
 8006568:	687b      	ldr	r3, [r7, #4]
 800656a:	f503 7350 	add.w	r3, r3, #832	@ 0x340
 800656e:	2103      	movs	r1, #3
 8006570:	4618      	mov	r0, r3
 8006572:	f7ff fa3f 	bl	80059f4 <_ZN8touchgfx13BoxWithBorder13setBorderSizeEt>
    Message_Board_Textbox_1.add(MessageBoard_Border_1_1);
 8006576:	687b      	ldr	r3, [r7, #4]
 8006578:	f503 7245 	add.w	r2, r3, #788	@ 0x314
 800657c:	687b      	ldr	r3, [r7, #4]
 800657e:	f503 7350 	add.w	r3, r3, #832	@ 0x340
 8006582:	4619      	mov	r1, r3
 8006584:	4610      	mov	r0, r2
 8006586:	f011 f9b3 	bl	80178f0 <_ZN8touchgfx9Container3addERNS_8DrawableE>

    MessageBoard_Text_1.setXY(4, 5);
 800658a:	687b      	ldr	r3, [r7, #4]
 800658c:	f503 735d 	add.w	r3, r3, #884	@ 0x374
 8006590:	2205      	movs	r2, #5
 8006592:	2104      	movs	r1, #4
 8006594:	4618      	mov	r0, r3
 8006596:	f7fd fcdf 	bl	8003f58 <_ZN8touchgfx8Drawable5setXYEss>
    MessageBoard_Text_1.setColor(touchgfx::Color::getColorFromRGB(255, 255, 255));
 800659a:	687b      	ldr	r3, [r7, #4]
 800659c:	f503 745d 	add.w	r4, r3, #884	@ 0x374
 80065a0:	23ff      	movs	r3, #255	@ 0xff
 80065a2:	f887 30bb 	strb.w	r3, [r7, #187]	@ 0xbb
 80065a6:	23ff      	movs	r3, #255	@ 0xff
 80065a8:	f887 30ba 	strb.w	r3, [r7, #186]	@ 0xba
 80065ac:	23ff      	movs	r3, #255	@ 0xff
 80065ae:	f887 30b9 	strb.w	r3, [r7, #185]	@ 0xb9
 80065b2:	f897 30bb 	ldrb.w	r3, [r7, #187]	@ 0xbb
 80065b6:	041a      	lsls	r2, r3, #16
 80065b8:	f897 30ba 	ldrb.w	r3, [r7, #186]	@ 0xba
 80065bc:	021b      	lsls	r3, r3, #8
 80065be:	431a      	orrs	r2, r3
 80065c0:	f897 30b9 	ldrb.w	r3, [r7, #185]	@ 0xb9
 80065c4:	4313      	orrs	r3, r2
 80065c6:	f043 427f 	orr.w	r2, r3, #4278190080	@ 0xff000000
 80065ca:	f107 0344 	add.w	r3, r7, #68	@ 0x44
 80065ce:	4611      	mov	r1, r2
 80065d0:	4618      	mov	r0, r3
 80065d2:	f7ff f8be 	bl	8005752 <_ZN8touchgfx9colortypeC1Em>
 80065d6:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80065d8:	f8c7 40bc 	str.w	r4, [r7, #188]	@ 0xbc
 80065dc:	60fb      	str	r3, [r7, #12]
        this->color = color;
 80065de:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 80065e2:	68fa      	ldr	r2, [r7, #12]
 80065e4:	631a      	str	r2, [r3, #48]	@ 0x30
    }
 80065e6:	bf00      	nop
    MessageBoard_Text_1.setLinespacing(0);
 80065e8:	687b      	ldr	r3, [r7, #4]
 80065ea:	f503 735d 	add.w	r3, r3, #884	@ 0x374
 80065ee:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 80065f2:	2300      	movs	r3, #0
 80065f4:	f8a7 30c2 	strh.w	r3, [r7, #194]	@ 0xc2
        linespace = space;
 80065f8:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 80065fc:	f8b7 20c2 	ldrh.w	r2, [r7, #194]	@ 0xc2
 8006600:	869a      	strh	r2, [r3, #52]	@ 0x34
    }
 8006602:	bf00      	nop
    MessageBoard_Text_1.setTypedText(touchgfx::TypedText(T___SINGLEUSE_HV8G));
 8006604:	687b      	ldr	r3, [r7, #4]
 8006606:	f503 745d 	add.w	r4, r3, #884	@ 0x374
 800660a:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 800660e:	2108      	movs	r1, #8
 8006610:	4618      	mov	r0, r3
 8006612:	f7ff f9ff 	bl	8005a14 <_ZN8touchgfx9TypedTextC1Et>
 8006616:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 800661a:	4619      	mov	r1, r3
 800661c:	4620      	mov	r0, r4
 800661e:	f013 f892 	bl	8019746 <_ZN8touchgfx8TextArea12setTypedTextERKNS_9TypedTextE>
 8006622:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 8006626:	4618      	mov	r0, r3
 8006628:	f7fd fb8a 	bl	8003d40 <_ZN8touchgfx9TypedTextD1Ev>
    Message_Board_Textbox_1.add(MessageBoard_Text_1);
 800662c:	687b      	ldr	r3, [r7, #4]
 800662e:	f503 7245 	add.w	r2, r3, #788	@ 0x314
 8006632:	687b      	ldr	r3, [r7, #4]
 8006634:	f503 735d 	add.w	r3, r3, #884	@ 0x374
 8006638:	4619      	mov	r1, r3
 800663a:	4610      	mov	r0, r2
 800663c:	f011 f958 	bl	80178f0 <_ZN8touchgfx9Container3addERNS_8DrawableE>
    Message_Board_Panel_1.add(Message_Board_Textbox_1);
 8006640:	687b      	ldr	r3, [r7, #4]
 8006642:	f503 7222 	add.w	r2, r3, #648	@ 0x288
 8006646:	687b      	ldr	r3, [r7, #4]
 8006648:	f503 7345 	add.w	r3, r3, #788	@ 0x314
 800664c:	4619      	mov	r1, r3
 800664e:	4610      	mov	r0, r2
 8006650:	f011 f94e 	bl	80178f0 <_ZN8touchgfx9Container3addERNS_8DrawableE>
    Message_panel.add(Message_Board_Panel_1);
 8006654:	687b      	ldr	r3, [r7, #4]
 8006656:	f503 720a 	add.w	r2, r3, #552	@ 0x228
 800665a:	687b      	ldr	r3, [r7, #4]
 800665c:	f503 7322 	add.w	r3, r3, #648	@ 0x288
 8006660:	4619      	mov	r1, r3
 8006662:	4610      	mov	r0, r2
 8006664:	f011 f944 	bl	80178f0 <_ZN8touchgfx9Container3addERNS_8DrawableE>

    add(__background);
 8006668:	687a      	ldr	r2, [r7, #4]
 800666a:	687b      	ldr	r3, [r7, #4]
 800666c:	3340      	adds	r3, #64	@ 0x40
 800666e:	4619      	mov	r1, r3
 8006670:	4610      	mov	r0, r2
 8006672:	f7ff f90b 	bl	800588c <_ZN8touchgfx6Screen3addERNS_8DrawableE>
    add(Main_Background);
 8006676:	687a      	ldr	r2, [r7, #4]
 8006678:	687b      	ldr	r3, [r7, #4]
 800667a:	336c      	adds	r3, #108	@ 0x6c
 800667c:	4619      	mov	r1, r3
 800667e:	4610      	mov	r0, r2
 8006680:	f7ff f904 	bl	800588c <_ZN8touchgfx6Screen3addERNS_8DrawableE>
    add(Button_Panel);
 8006684:	687a      	ldr	r2, [r7, #4]
 8006686:	687b      	ldr	r3, [r7, #4]
 8006688:	3398      	adds	r3, #152	@ 0x98
 800668a:	4619      	mov	r1, r3
 800668c:	4610      	mov	r0, r2
 800668e:	f7ff f8fd 	bl	800588c <_ZN8touchgfx6Screen3addERNS_8DrawableE>
    add(Message_panel);
 8006692:	687a      	ldr	r2, [r7, #4]
 8006694:	687b      	ldr	r3, [r7, #4]
 8006696:	f503 730a 	add.w	r3, r3, #552	@ 0x228
 800669a:	4619      	mov	r1, r3
 800669c:	4610      	mov	r0, r2
 800669e:	f7ff f8f5 	bl	800588c <_ZN8touchgfx6Screen3addERNS_8DrawableE>
}
 80066a2:	687b      	ldr	r3, [r7, #4]
 80066a4:	4618      	mov	r0, r3
 80066a6:	37cc      	adds	r7, #204	@ 0xcc
 80066a8:	46bd      	mov	sp, r7
 80066aa:	bd90      	pop	{r4, r7, pc}

080066ac <_ZN24Localize_AnomalyViewBase11setupScreenEv>:

void Localize_AnomalyViewBase::setupScreen()
{
 80066ac:	b480      	push	{r7}
 80066ae:	b083      	sub	sp, #12
 80066b0:	af00      	add	r7, sp, #0
 80066b2:	6078      	str	r0, [r7, #4]

}
 80066b4:	bf00      	nop
 80066b6:	370c      	adds	r7, #12
 80066b8:	46bd      	mov	sp, r7
 80066ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066be:	4770      	bx	lr

080066c0 <_ZN24Localize_AnomalyViewBase15afterTransitionEv>:

//Called when the screen transition ends
void Localize_AnomalyViewBase::afterTransition()
{
 80066c0:	b580      	push	{r7, lr}
 80066c2:	b082      	sub	sp, #8
 80066c4:	af00      	add	r7, sp, #0
 80066c6:	6078      	str	r0, [r7, #4]
    //Interaction1
    //When screen transition ends call virtual function
    //Call function1
    function1();
 80066c8:	687b      	ldr	r3, [r7, #4]
 80066ca:	681b      	ldr	r3, [r3, #0]
 80066cc:	332c      	adds	r3, #44	@ 0x2c
 80066ce:	681b      	ldr	r3, [r3, #0]
 80066d0:	6878      	ldr	r0, [r7, #4]
 80066d2:	4798      	blx	r3
}
 80066d4:	bf00      	nop
 80066d6:	3708      	adds	r7, #8
 80066d8:	46bd      	mov	sp, r7
 80066da:	bd80      	pop	{r7, pc}

080066dc <_ZN24Localize_AnomalyViewBase21buttonCallbackHandlerERKN8touchgfx14AbstractButtonE>:

void Localize_AnomalyViewBase::buttonCallbackHandler(const touchgfx::AbstractButton& src)
{
 80066dc:	b580      	push	{r7, lr}
 80066de:	b082      	sub	sp, #8
 80066e0:	af00      	add	r7, sp, #0
 80066e2:	6078      	str	r0, [r7, #4]
 80066e4:	6039      	str	r1, [r7, #0]
    if (&src == &Localize_Button)
 80066e6:	687b      	ldr	r3, [r7, #4]
 80066e8:	f503 73fa 	add.w	r3, r3, #500	@ 0x1f4
 80066ec:	683a      	ldr	r2, [r7, #0]
 80066ee:	429a      	cmp	r2, r3
 80066f0:	d106      	bne.n	8006700 <_ZN24Localize_AnomalyViewBase21buttonCallbackHandlerERKN8touchgfx14AbstractButtonE+0x24>
    {
        //Switch_Main_Screen
        //When Localize_Button clicked change screen to Main
        //Go to Main with screen transition towards South
        application().gotoMainScreenWipeTransitionSouth();
 80066f2:	6878      	ldr	r0, [r7, #4]
 80066f4:	f7ff fb15 	bl	8005d22 <_ZN24Localize_AnomalyViewBase11applicationEv>
 80066f8:	4603      	mov	r3, r0
 80066fa:	4618      	mov	r0, r3
 80066fc:	f7fd fef2 	bl	80044e4 <_ZN23FrontendApplicationBase33gotoMainScreenWipeTransitionSouthEv>
    }
}
 8006700:	bf00      	nop
 8006702:	3708      	adds	r7, #8
 8006704:	46bd      	mov	sp, r7
 8006706:	bd80      	pop	{r7, pc}

08006708 <_ZN8touchgfx4ViewI25Localize_AnomalyPresenterEC1Ev>:
    View()
 8006708:	b580      	push	{r7, lr}
 800670a:	b082      	sub	sp, #8
 800670c:	af00      	add	r7, sp, #0
 800670e:	6078      	str	r0, [r7, #4]
        : presenter(0)
 8006710:	687b      	ldr	r3, [r7, #4]
 8006712:	4618      	mov	r0, r3
 8006714:	f016 fa88 	bl	801cc28 <_ZN8touchgfx6ScreenC1Ev>
 8006718:	4a05      	ldr	r2, [pc, #20]	@ (8006730 <_ZN8touchgfx4ViewI25Localize_AnomalyPresenterEC1Ev+0x28>)
 800671a:	687b      	ldr	r3, [r7, #4]
 800671c:	601a      	str	r2, [r3, #0]
 800671e:	687b      	ldr	r3, [r7, #4]
 8006720:	2200      	movs	r2, #0
 8006722:	63da      	str	r2, [r3, #60]	@ 0x3c
    }
 8006724:	687b      	ldr	r3, [r7, #4]
 8006726:	4618      	mov	r0, r3
 8006728:	3708      	adds	r7, #8
 800672a:	46bd      	mov	sp, r7
 800672c:	bd80      	pop	{r7, pc}
 800672e:	bf00      	nop
 8006730:	0802cf80 	.word	0x0802cf80

08006734 <_ZN8touchgfx15GenericCallbackIRKNS_14AbstractButtonEvvEC1Ev>:
class GenericCallback<T1, void, void>
 8006734:	b480      	push	{r7}
 8006736:	b083      	sub	sp, #12
 8006738:	af00      	add	r7, sp, #0
 800673a:	6078      	str	r0, [r7, #4]
 800673c:	4a04      	ldr	r2, [pc, #16]	@ (8006750 <_ZN8touchgfx15GenericCallbackIRKNS_14AbstractButtonEvvEC1Ev+0x1c>)
 800673e:	687b      	ldr	r3, [r7, #4]
 8006740:	601a      	str	r2, [r3, #0]
 8006742:	687b      	ldr	r3, [r7, #4]
 8006744:	4618      	mov	r0, r3
 8006746:	370c      	adds	r7, #12
 8006748:	46bd      	mov	sp, r7
 800674a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800674e:	4770      	bx	lr
 8006750:	0802cfb4 	.word	0x0802cfb4

08006754 <_ZN8touchgfx8CallbackI24Localize_AnomalyViewBaseRKNS_14AbstractButtonEvvEC1EPS1_MS1_FvS4_E>:
    Callback(dest_type* pobject, void (dest_type::*pmemfun_1)(T1))
 8006754:	b580      	push	{r7, lr}
 8006756:	b084      	sub	sp, #16
 8006758:	af00      	add	r7, sp, #0
 800675a:	60f8      	str	r0, [r7, #12]
 800675c:	60b9      	str	r1, [r7, #8]
 800675e:	4639      	mov	r1, r7
 8006760:	e881 000c 	stmia.w	r1, {r2, r3}
        : pobject(pobject), pmemfun_1(pmemfun_1)
 8006764:	68fb      	ldr	r3, [r7, #12]
 8006766:	4618      	mov	r0, r3
 8006768:	f7ff ffe4 	bl	8006734 <_ZN8touchgfx15GenericCallbackIRKNS_14AbstractButtonEvvEC1Ev>
 800676c:	4a08      	ldr	r2, [pc, #32]	@ (8006790 <_ZN8touchgfx8CallbackI24Localize_AnomalyViewBaseRKNS_14AbstractButtonEvvEC1EPS1_MS1_FvS4_E+0x3c>)
 800676e:	68fb      	ldr	r3, [r7, #12]
 8006770:	601a      	str	r2, [r3, #0]
 8006772:	68fb      	ldr	r3, [r7, #12]
 8006774:	68ba      	ldr	r2, [r7, #8]
 8006776:	605a      	str	r2, [r3, #4]
 8006778:	68fb      	ldr	r3, [r7, #12]
 800677a:	3308      	adds	r3, #8
 800677c:	463a      	mov	r2, r7
 800677e:	e892 0003 	ldmia.w	r2, {r0, r1}
 8006782:	e883 0003 	stmia.w	r3, {r0, r1}
    }
 8006786:	68fb      	ldr	r3, [r7, #12]
 8006788:	4618      	mov	r0, r3
 800678a:	3710      	adds	r7, #16
 800678c:	46bd      	mov	sp, r7
 800678e:	bd80      	pop	{r7, pc}
 8006790:	0802cf68 	.word	0x0802cf68

08006794 <_ZN8touchgfx15GenericCallbackIRKNS_14AbstractButtonEvvED1Ev>:
    virtual ~GenericCallback()
 8006794:	b480      	push	{r7}
 8006796:	b083      	sub	sp, #12
 8006798:	af00      	add	r7, sp, #0
 800679a:	6078      	str	r0, [r7, #4]
    }
 800679c:	4a04      	ldr	r2, [pc, #16]	@ (80067b0 <_ZN8touchgfx15GenericCallbackIRKNS_14AbstractButtonEvvED1Ev+0x1c>)
 800679e:	687b      	ldr	r3, [r7, #4]
 80067a0:	601a      	str	r2, [r3, #0]
 80067a2:	687b      	ldr	r3, [r7, #4]
 80067a4:	4618      	mov	r0, r3
 80067a6:	370c      	adds	r7, #12
 80067a8:	46bd      	mov	sp, r7
 80067aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067ae:	4770      	bx	lr
 80067b0:	0802cfb4 	.word	0x0802cfb4

080067b4 <_ZN8touchgfx15GenericCallbackIRKNS_14AbstractButtonEvvED0Ev>:
    virtual ~GenericCallback()
 80067b4:	b580      	push	{r7, lr}
 80067b6:	b082      	sub	sp, #8
 80067b8:	af00      	add	r7, sp, #0
 80067ba:	6078      	str	r0, [r7, #4]
    }
 80067bc:	6878      	ldr	r0, [r7, #4]
 80067be:	f7ff ffe9 	bl	8006794 <_ZN8touchgfx15GenericCallbackIRKNS_14AbstractButtonEvvED1Ev>
 80067c2:	2104      	movs	r1, #4
 80067c4:	6878      	ldr	r0, [r7, #4]
 80067c6:	f024 f886 	bl	802a8d6 <_ZdlPvj>
 80067ca:	687b      	ldr	r3, [r7, #4]
 80067cc:	4618      	mov	r0, r3
 80067ce:	3708      	adds	r7, #8
 80067d0:	46bd      	mov	sp, r7
 80067d2:	bd80      	pop	{r7, pc}

080067d4 <_ZN8touchgfx8CallbackI24Localize_AnomalyViewBaseRKNS_14AbstractButtonEvvED1Ev>:
struct Callback<dest_type, T1, void, void> : public GenericCallback<T1>
 80067d4:	b580      	push	{r7, lr}
 80067d6:	b082      	sub	sp, #8
 80067d8:	af00      	add	r7, sp, #0
 80067da:	6078      	str	r0, [r7, #4]
 80067dc:	4a05      	ldr	r2, [pc, #20]	@ (80067f4 <_ZN8touchgfx8CallbackI24Localize_AnomalyViewBaseRKNS_14AbstractButtonEvvED1Ev+0x20>)
 80067de:	687b      	ldr	r3, [r7, #4]
 80067e0:	601a      	str	r2, [r3, #0]
 80067e2:	687b      	ldr	r3, [r7, #4]
 80067e4:	4618      	mov	r0, r3
 80067e6:	f7ff ffd5 	bl	8006794 <_ZN8touchgfx15GenericCallbackIRKNS_14AbstractButtonEvvED1Ev>
 80067ea:	687b      	ldr	r3, [r7, #4]
 80067ec:	4618      	mov	r0, r3
 80067ee:	3708      	adds	r7, #8
 80067f0:	46bd      	mov	sp, r7
 80067f2:	bd80      	pop	{r7, pc}
 80067f4:	0802cf68 	.word	0x0802cf68

080067f8 <_ZN8touchgfx8CallbackI24Localize_AnomalyViewBaseRKNS_14AbstractButtonEvvED0Ev>:
 80067f8:	b580      	push	{r7, lr}
 80067fa:	b082      	sub	sp, #8
 80067fc:	af00      	add	r7, sp, #0
 80067fe:	6078      	str	r0, [r7, #4]
 8006800:	6878      	ldr	r0, [r7, #4]
 8006802:	f7ff ffe7 	bl	80067d4 <_ZN8touchgfx8CallbackI24Localize_AnomalyViewBaseRKNS_14AbstractButtonEvvED1Ev>
 8006806:	2110      	movs	r1, #16
 8006808:	6878      	ldr	r0, [r7, #4]
 800680a:	f024 f864 	bl	802a8d6 <_ZdlPvj>
 800680e:	687b      	ldr	r3, [r7, #4]
 8006810:	4618      	mov	r0, r3
 8006812:	3708      	adds	r7, #8
 8006814:	46bd      	mov	sp, r7
 8006816:	bd80      	pop	{r7, pc}

08006818 <_ZN8touchgfx9ContainerD1Ev>:
class Container : public Drawable
 8006818:	b580      	push	{r7, lr}
 800681a:	b082      	sub	sp, #8
 800681c:	af00      	add	r7, sp, #0
 800681e:	6078      	str	r0, [r7, #4]
 8006820:	4a05      	ldr	r2, [pc, #20]	@ (8006838 <_ZN8touchgfx9ContainerD1Ev+0x20>)
 8006822:	687b      	ldr	r3, [r7, #4]
 8006824:	601a      	str	r2, [r3, #0]
 8006826:	687b      	ldr	r3, [r7, #4]
 8006828:	4618      	mov	r0, r3
 800682a:	f7fd fb05 	bl	8003e38 <_ZN8touchgfx8DrawableD1Ev>
 800682e:	687b      	ldr	r3, [r7, #4]
 8006830:	4618      	mov	r0, r3
 8006832:	3708      	adds	r7, #8
 8006834:	46bd      	mov	sp, r7
 8006836:	bd80      	pop	{r7, pc}
 8006838:	0802d7cc 	.word	0x0802d7cc

0800683c <_ZN8touchgfx9ContainerD0Ev>:
 800683c:	b580      	push	{r7, lr}
 800683e:	b082      	sub	sp, #8
 8006840:	af00      	add	r7, sp, #0
 8006842:	6078      	str	r0, [r7, #4]
 8006844:	6878      	ldr	r0, [r7, #4]
 8006846:	f7ff ffe7 	bl	8006818 <_ZN8touchgfx9ContainerD1Ev>
 800684a:	212c      	movs	r1, #44	@ 0x2c
 800684c:	6878      	ldr	r0, [r7, #4]
 800684e:	f024 f842 	bl	802a8d6 <_ZdlPvj>
 8006852:	687b      	ldr	r3, [r7, #4]
 8006854:	4618      	mov	r0, r3
 8006856:	3708      	adds	r7, #8
 8006858:	46bd      	mov	sp, r7
 800685a:	bd80      	pop	{r7, pc}

0800685c <_ZN8touchgfx5ImageD1Ev>:
class Image : public Widget
 800685c:	b580      	push	{r7, lr}
 800685e:	b082      	sub	sp, #8
 8006860:	af00      	add	r7, sp, #0
 8006862:	6078      	str	r0, [r7, #4]
 8006864:	4a05      	ldr	r2, [pc, #20]	@ (800687c <_ZN8touchgfx5ImageD1Ev+0x20>)
 8006866:	687b      	ldr	r3, [r7, #4]
 8006868:	601a      	str	r2, [r3, #0]
 800686a:	687b      	ldr	r3, [r7, #4]
 800686c:	4618      	mov	r0, r3
 800686e:	f7fd fd75 	bl	800435c <_ZN8touchgfx6WidgetD1Ev>
 8006872:	687b      	ldr	r3, [r7, #4]
 8006874:	4618      	mov	r0, r3
 8006876:	3708      	adds	r7, #8
 8006878:	46bd      	mov	sp, r7
 800687a:	bd80      	pop	{r7, pc}
 800687c:	0802eab8 	.word	0x0802eab8

08006880 <_ZN8touchgfx5ImageD0Ev>:
 8006880:	b580      	push	{r7, lr}
 8006882:	b082      	sub	sp, #8
 8006884:	af00      	add	r7, sp, #0
 8006886:	6078      	str	r0, [r7, #4]
 8006888:	6878      	ldr	r0, [r7, #4]
 800688a:	f7ff ffe7 	bl	800685c <_ZN8touchgfx5ImageD1Ev>
 800688e:	212c      	movs	r1, #44	@ 0x2c
 8006890:	6878      	ldr	r0, [r7, #4]
 8006892:	f024 f820 	bl	802a8d6 <_ZdlPvj>
 8006896:	687b      	ldr	r3, [r7, #4]
 8006898:	4618      	mov	r0, r3
 800689a:	3708      	adds	r7, #8
 800689c:	46bd      	mov	sp, r7
 800689e:	bd80      	pop	{r7, pc}

080068a0 <_ZN8touchgfx13BoxWithBorderD1Ev>:
class BoxWithBorder : public Box
 80068a0:	b580      	push	{r7, lr}
 80068a2:	b082      	sub	sp, #8
 80068a4:	af00      	add	r7, sp, #0
 80068a6:	6078      	str	r0, [r7, #4]
 80068a8:	4a05      	ldr	r2, [pc, #20]	@ (80068c0 <_ZN8touchgfx13BoxWithBorderD1Ev+0x20>)
 80068aa:	687b      	ldr	r3, [r7, #4]
 80068ac:	601a      	str	r2, [r3, #0]
 80068ae:	687b      	ldr	r3, [r7, #4]
 80068b0:	4618      	mov	r0, r3
 80068b2:	f7ff f853 	bl	800595c <_ZN8touchgfx3BoxD1Ev>
 80068b6:	687b      	ldr	r3, [r7, #4]
 80068b8:	4618      	mov	r0, r3
 80068ba:	3708      	adds	r7, #8
 80068bc:	46bd      	mov	sp, r7
 80068be:	bd80      	pop	{r7, pc}
 80068c0:	0802ea54 	.word	0x0802ea54

080068c4 <_ZN8touchgfx13BoxWithBorderD0Ev>:
 80068c4:	b580      	push	{r7, lr}
 80068c6:	b082      	sub	sp, #8
 80068c8:	af00      	add	r7, sp, #0
 80068ca:	6078      	str	r0, [r7, #4]
 80068cc:	6878      	ldr	r0, [r7, #4]
 80068ce:	f7ff ffe7 	bl	80068a0 <_ZN8touchgfx13BoxWithBorderD1Ev>
 80068d2:	2134      	movs	r1, #52	@ 0x34
 80068d4:	6878      	ldr	r0, [r7, #4]
 80068d6:	f023 fffe 	bl	802a8d6 <_ZdlPvj>
 80068da:	687b      	ldr	r3, [r7, #4]
 80068dc:	4618      	mov	r0, r3
 80068de:	3708      	adds	r7, #8
 80068e0:	46bd      	mov	sp, r7
 80068e2:	bd80      	pop	{r7, pc}

080068e4 <_ZN8touchgfx8TextAreaD1Ev>:
class TextArea : public Widget
 80068e4:	b580      	push	{r7, lr}
 80068e6:	b082      	sub	sp, #8
 80068e8:	af00      	add	r7, sp, #0
 80068ea:	6078      	str	r0, [r7, #4]
 80068ec:	4a08      	ldr	r2, [pc, #32]	@ (8006910 <_ZN8touchgfx8TextAreaD1Ev+0x2c>)
 80068ee:	687b      	ldr	r3, [r7, #4]
 80068f0:	601a      	str	r2, [r3, #0]
 80068f2:	687b      	ldr	r3, [r7, #4]
 80068f4:	3328      	adds	r3, #40	@ 0x28
 80068f6:	4618      	mov	r0, r3
 80068f8:	f7fd fa22 	bl	8003d40 <_ZN8touchgfx9TypedTextD1Ev>
 80068fc:	687b      	ldr	r3, [r7, #4]
 80068fe:	4618      	mov	r0, r3
 8006900:	f7fd fd2c 	bl	800435c <_ZN8touchgfx6WidgetD1Ev>
 8006904:	687b      	ldr	r3, [r7, #4]
 8006906:	4618      	mov	r0, r3
 8006908:	3708      	adds	r7, #8
 800690a:	46bd      	mov	sp, r7
 800690c:	bd80      	pop	{r7, pc}
 800690e:	bf00      	nop
 8006910:	0802e798 	.word	0x0802e798

08006914 <_ZN8touchgfx8TextAreaD0Ev>:
 8006914:	b580      	push	{r7, lr}
 8006916:	b082      	sub	sp, #8
 8006918:	af00      	add	r7, sp, #0
 800691a:	6078      	str	r0, [r7, #4]
 800691c:	6878      	ldr	r0, [r7, #4]
 800691e:	f7ff ffe1 	bl	80068e4 <_ZN8touchgfx8TextAreaD1Ev>
 8006922:	213c      	movs	r1, #60	@ 0x3c
 8006924:	6878      	ldr	r0, [r7, #4]
 8006926:	f023 ffd6 	bl	802a8d6 <_ZdlPvj>
 800692a:	687b      	ldr	r3, [r7, #4]
 800692c:	4618      	mov	r0, r3
 800692e:	3708      	adds	r7, #8
 8006930:	46bd      	mov	sp, r7
 8006932:	bd80      	pop	{r7, pc}

08006934 <_ZN8touchgfx6ButtonD1Ev>:
class Button : public AbstractButton
 8006934:	b580      	push	{r7, lr}
 8006936:	b082      	sub	sp, #8
 8006938:	af00      	add	r7, sp, #0
 800693a:	6078      	str	r0, [r7, #4]
 800693c:	4a05      	ldr	r2, [pc, #20]	@ (8006954 <_ZN8touchgfx6ButtonD1Ev+0x20>)
 800693e:	687b      	ldr	r3, [r7, #4]
 8006940:	601a      	str	r2, [r3, #0]
 8006942:	687b      	ldr	r3, [r7, #4]
 8006944:	4618      	mov	r0, r3
 8006946:	f7ff f8e9 	bl	8005b1c <_ZN8touchgfx14AbstractButtonD1Ev>
 800694a:	687b      	ldr	r3, [r7, #4]
 800694c:	4618      	mov	r0, r3
 800694e:	3708      	adds	r7, #8
 8006950:	46bd      	mov	sp, r7
 8006952:	bd80      	pop	{r7, pc}
 8006954:	0802e908 	.word	0x0802e908

08006958 <_ZN8touchgfx6ButtonD0Ev>:
 8006958:	b580      	push	{r7, lr}
 800695a:	b082      	sub	sp, #8
 800695c:	af00      	add	r7, sp, #0
 800695e:	6078      	str	r0, [r7, #4]
 8006960:	6878      	ldr	r0, [r7, #4]
 8006962:	f7ff ffe7 	bl	8006934 <_ZN8touchgfx6ButtonD1Ev>
 8006966:	2134      	movs	r1, #52	@ 0x34
 8006968:	6878      	ldr	r0, [r7, #4]
 800696a:	f023 ffb4 	bl	802a8d6 <_ZdlPvj>
 800696e:	687b      	ldr	r3, [r7, #4]
 8006970:	4618      	mov	r0, r3
 8006972:	3708      	adds	r7, #8
 8006974:	46bd      	mov	sp, r7
 8006976:	bd80      	pop	{r7, pc}

08006978 <_ZN8touchgfx8CallbackI24Localize_AnomalyViewBaseRKNS_14AbstractButtonEvvE7executeES4_>:
    virtual void execute(T1 t1)
 8006978:	b580      	push	{r7, lr}
 800697a:	b082      	sub	sp, #8
 800697c:	af00      	add	r7, sp, #0
 800697e:	6078      	str	r0, [r7, #4]
 8006980:	6039      	str	r1, [r7, #0]
        (pobject->*pmemfun_1)(t1);
 8006982:	687b      	ldr	r3, [r7, #4]
 8006984:	685b      	ldr	r3, [r3, #4]
 8006986:	687a      	ldr	r2, [r7, #4]
 8006988:	68d2      	ldr	r2, [r2, #12]
 800698a:	1052      	asrs	r2, r2, #1
 800698c:	1898      	adds	r0, r3, r2
 800698e:	687b      	ldr	r3, [r7, #4]
 8006990:	68db      	ldr	r3, [r3, #12]
 8006992:	f003 0301 	and.w	r3, r3, #1
 8006996:	2b00      	cmp	r3, #0
 8006998:	d102      	bne.n	80069a0 <_ZN8touchgfx8CallbackI24Localize_AnomalyViewBaseRKNS_14AbstractButtonEvvE7executeES4_+0x28>
 800699a:	687b      	ldr	r3, [r7, #4]
 800699c:	689b      	ldr	r3, [r3, #8]
 800699e:	e00a      	b.n	80069b6 <_ZN8touchgfx8CallbackI24Localize_AnomalyViewBaseRKNS_14AbstractButtonEvvE7executeES4_+0x3e>
 80069a0:	687b      	ldr	r3, [r7, #4]
 80069a2:	685b      	ldr	r3, [r3, #4]
 80069a4:	687a      	ldr	r2, [r7, #4]
 80069a6:	68d2      	ldr	r2, [r2, #12]
 80069a8:	1052      	asrs	r2, r2, #1
 80069aa:	4413      	add	r3, r2
 80069ac:	681b      	ldr	r3, [r3, #0]
 80069ae:	687a      	ldr	r2, [r7, #4]
 80069b0:	6892      	ldr	r2, [r2, #8]
 80069b2:	4413      	add	r3, r2
 80069b4:	681b      	ldr	r3, [r3, #0]
 80069b6:	6839      	ldr	r1, [r7, #0]
 80069b8:	4798      	blx	r3
    }
 80069ba:	bf00      	nop
 80069bc:	3708      	adds	r7, #8
 80069be:	46bd      	mov	sp, r7
 80069c0:	bd80      	pop	{r7, pc}

080069c2 <_ZNK8touchgfx8CallbackI24Localize_AnomalyViewBaseRKNS_14AbstractButtonEvvE7isValidEv>:
    virtual bool isValid() const
 80069c2:	b480      	push	{r7}
 80069c4:	b083      	sub	sp, #12
 80069c6:	af00      	add	r7, sp, #0
 80069c8:	6078      	str	r0, [r7, #4]
        return (pobject != 0) && (pmemfun_1 != 0);
 80069ca:	687b      	ldr	r3, [r7, #4]
 80069cc:	685b      	ldr	r3, [r3, #4]
 80069ce:	2b00      	cmp	r3, #0
 80069d0:	d010      	beq.n	80069f4 <_ZNK8touchgfx8CallbackI24Localize_AnomalyViewBaseRKNS_14AbstractButtonEvvE7isValidEv+0x32>
 80069d2:	687b      	ldr	r3, [r7, #4]
 80069d4:	689b      	ldr	r3, [r3, #8]
 80069d6:	2b00      	cmp	r3, #0
 80069d8:	d107      	bne.n	80069ea <_ZNK8touchgfx8CallbackI24Localize_AnomalyViewBaseRKNS_14AbstractButtonEvvE7isValidEv+0x28>
 80069da:	687b      	ldr	r3, [r7, #4]
 80069dc:	68db      	ldr	r3, [r3, #12]
 80069de:	f003 0301 	and.w	r3, r3, #1
 80069e2:	2b00      	cmp	r3, #0
 80069e4:	d101      	bne.n	80069ea <_ZNK8touchgfx8CallbackI24Localize_AnomalyViewBaseRKNS_14AbstractButtonEvvE7isValidEv+0x28>
 80069e6:	2301      	movs	r3, #1
 80069e8:	e000      	b.n	80069ec <_ZNK8touchgfx8CallbackI24Localize_AnomalyViewBaseRKNS_14AbstractButtonEvvE7isValidEv+0x2a>
 80069ea:	2300      	movs	r3, #0
 80069ec:	2b01      	cmp	r3, #1
 80069ee:	d001      	beq.n	80069f4 <_ZNK8touchgfx8CallbackI24Localize_AnomalyViewBaseRKNS_14AbstractButtonEvvE7isValidEv+0x32>
 80069f0:	2301      	movs	r3, #1
 80069f2:	e000      	b.n	80069f6 <_ZNK8touchgfx8CallbackI24Localize_AnomalyViewBaseRKNS_14AbstractButtonEvvE7isValidEv+0x34>
 80069f4:	2300      	movs	r3, #0
    }
 80069f6:	4618      	mov	r0, r3
 80069f8:	370c      	adds	r7, #12
 80069fa:	46bd      	mov	sp, r7
 80069fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a00:	4770      	bx	lr

08006a02 <_ZN8touchgfx8Drawable10setVisibleEb>:
    void setVisible(bool vis)
 8006a02:	b480      	push	{r7}
 8006a04:	b083      	sub	sp, #12
 8006a06:	af00      	add	r7, sp, #0
 8006a08:	6078      	str	r0, [r7, #4]
 8006a0a:	460b      	mov	r3, r1
 8006a0c:	70fb      	strb	r3, [r7, #3]
        visible = vis;
 8006a0e:	687b      	ldr	r3, [r7, #4]
 8006a10:	78fa      	ldrb	r2, [r7, #3]
 8006a12:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
    }
 8006a16:	bf00      	nop
 8006a18:	370c      	adds	r7, #12
 8006a1a:	46bd      	mov	sp, r7
 8006a1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a20:	4770      	bx	lr

08006a22 <_ZN8touchgfx6Slider19setNewValueCallbackERNS_15GenericCallbackIRKS0_ivEE>:
     * @param  callback The callback to be executed. The callback will be given a reference
     *                  to the Slider and the current value of the slider.
     *
     * @see GenericCallback
     */
    void setNewValueCallback(GenericCallback<const Slider&, int>& callback)
 8006a22:	b480      	push	{r7}
 8006a24:	b083      	sub	sp, #12
 8006a26:	af00      	add	r7, sp, #0
 8006a28:	6078      	str	r0, [r7, #4]
 8006a2a:	6039      	str	r1, [r7, #0]
    {
        newValueCallback = &callback;
 8006a2c:	687b      	ldr	r3, [r7, #4]
 8006a2e:	683a      	ldr	r2, [r7, #0]
 8006a30:	f8c3 20f8 	str.w	r2, [r3, #248]	@ 0xf8
    }
 8006a34:	bf00      	nop
 8006a36:	370c      	adds	r7, #12
 8006a38:	46bd      	mov	sp, r7
 8006a3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a3e:	4770      	bx	lr

08006a40 <_ZN8touchgfx12ToggleButton10setBitmapsERKNS_6BitmapES3_>:
 * when it is subsequently pressed, it will pop back out.
 */
class ToggleButton : public Button
{
public:
    virtual void setBitmaps(const Bitmap& bitmapReleased, const Bitmap& bitmapPressed)
 8006a40:	b580      	push	{r7, lr}
 8006a42:	b084      	sub	sp, #16
 8006a44:	af00      	add	r7, sp, #0
 8006a46:	60f8      	str	r0, [r7, #12]
 8006a48:	60b9      	str	r1, [r7, #8]
 8006a4a:	607a      	str	r2, [r7, #4]
    {
        originalPressed = bitmapPressed;
 8006a4c:	68fb      	ldr	r3, [r7, #12]
 8006a4e:	687a      	ldr	r2, [r7, #4]
 8006a50:	8812      	ldrh	r2, [r2, #0]
 8006a52:	869a      	strh	r2, [r3, #52]	@ 0x34
        Button::setBitmaps(bitmapReleased, bitmapPressed);
 8006a54:	68fb      	ldr	r3, [r7, #12]
 8006a56:	687a      	ldr	r2, [r7, #4]
 8006a58:	68b9      	ldr	r1, [r7, #8]
 8006a5a:	4618      	mov	r0, r3
 8006a5c:	f012 feaa 	bl	80197b4 <_ZN8touchgfx6Button10setBitmapsERKNS_6BitmapES3_>
    }
 8006a60:	bf00      	nop
 8006a62:	3710      	adds	r7, #16
 8006a64:	46bd      	mov	sp, r7
 8006a66:	bd80      	pop	{r7, pc}

08006a68 <_ZN8touchgfx4ViewI13MainPresenterED1Ev>:
class View : public Screen
 8006a68:	b580      	push	{r7, lr}
 8006a6a:	b082      	sub	sp, #8
 8006a6c:	af00      	add	r7, sp, #0
 8006a6e:	6078      	str	r0, [r7, #4]
 8006a70:	4a05      	ldr	r2, [pc, #20]	@ (8006a88 <_ZN8touchgfx4ViewI13MainPresenterED1Ev+0x20>)
 8006a72:	687b      	ldr	r3, [r7, #4]
 8006a74:	601a      	str	r2, [r3, #0]
 8006a76:	687b      	ldr	r3, [r7, #4]
 8006a78:	4618      	mov	r0, r3
 8006a7a:	f7fe feaf 	bl	80057dc <_ZN8touchgfx6ScreenD1Ev>
 8006a7e:	687b      	ldr	r3, [r7, #4]
 8006a80:	4618      	mov	r0, r3
 8006a82:	3708      	adds	r7, #8
 8006a84:	46bd      	mov	sp, r7
 8006a86:	bd80      	pop	{r7, pc}
 8006a88:	0802d044 	.word	0x0802d044

08006a8c <_ZN8touchgfx4ViewI13MainPresenterED0Ev>:
 8006a8c:	b580      	push	{r7, lr}
 8006a8e:	b082      	sub	sp, #8
 8006a90:	af00      	add	r7, sp, #0
 8006a92:	6078      	str	r0, [r7, #4]
 8006a94:	6878      	ldr	r0, [r7, #4]
 8006a96:	f7ff ffe7 	bl	8006a68 <_ZN8touchgfx4ViewI13MainPresenterED1Ev>
 8006a9a:	2140      	movs	r1, #64	@ 0x40
 8006a9c:	6878      	ldr	r0, [r7, #4]
 8006a9e:	f023 ff1a 	bl	802a8d6 <_ZdlPvj>
 8006aa2:	687b      	ldr	r3, [r7, #4]
 8006aa4:	4618      	mov	r0, r3
 8006aa6:	3708      	adds	r7, #8
 8006aa8:	46bd      	mov	sp, r7
 8006aaa:	bd80      	pop	{r7, pc}

08006aac <_ZN12MainViewBaseD1Ev>:

class MainViewBase : public touchgfx::View<MainPresenter>
{
public:
    MainViewBase();
    virtual ~MainViewBase() {}
 8006aac:	b580      	push	{r7, lr}
 8006aae:	b082      	sub	sp, #8
 8006ab0:	af00      	add	r7, sp, #0
 8006ab2:	6078      	str	r0, [r7, #4]
 8006ab4:	4a93      	ldr	r2, [pc, #588]	@ (8006d04 <_ZN12MainViewBaseD1Ev+0x258>)
 8006ab6:	687b      	ldr	r3, [r7, #4]
 8006ab8:	601a      	str	r2, [r3, #0]
 8006aba:	687b      	ldr	r3, [r7, #4]
 8006abc:	f603 3308 	addw	r3, r3, #2824	@ 0xb08
 8006ac0:	4618      	mov	r0, r3
 8006ac2:	f002 fd77 	bl	80095b4 <_ZN8touchgfx8CallbackI12MainViewBaseRKNS_6SliderEivED1Ev>
 8006ac6:	687b      	ldr	r3, [r7, #4]
 8006ac8:	f603 23f8 	addw	r3, r3, #2808	@ 0xaf8
 8006acc:	4618      	mov	r0, r3
 8006ace:	f002 fd93 	bl	80095f8 <_ZN8touchgfx8CallbackI12MainViewBaseRKNS_14AbstractButtonEvvED1Ev>
 8006ad2:	687b      	ldr	r3, [r7, #4]
 8006ad4:	f603 23bc 	addw	r3, r3, #2748	@ 0xabc
 8006ad8:	4618      	mov	r0, r3
 8006ada:	f7ff ff03 	bl	80068e4 <_ZN8touchgfx8TextAreaD1Ev>
 8006ade:	687b      	ldr	r3, [r7, #4]
 8006ae0:	f603 2388 	addw	r3, r3, #2696	@ 0xa88
 8006ae4:	4618      	mov	r0, r3
 8006ae6:	f7ff fedb 	bl	80068a0 <_ZN8touchgfx13BoxWithBorderD1Ev>
 8006aea:	687b      	ldr	r3, [r7, #4]
 8006aec:	f603 235c 	addw	r3, r3, #2652	@ 0xa5c
 8006af0:	4618      	mov	r0, r3
 8006af2:	f7ff fe91 	bl	8006818 <_ZN8touchgfx9ContainerD1Ev>
 8006af6:	687b      	ldr	r3, [r7, #4]
 8006af8:	f603 2328 	addw	r3, r3, #2600	@ 0xa28
 8006afc:	4618      	mov	r0, r3
 8006afe:	f7ff ff19 	bl	8006934 <_ZN8touchgfx6ButtonD1Ev>
 8006b02:	687b      	ldr	r3, [r7, #4]
 8006b04:	f603 13f4 	addw	r3, r3, #2548	@ 0x9f4
 8006b08:	4618      	mov	r0, r3
 8006b0a:	f7ff ff13 	bl	8006934 <_ZN8touchgfx6ButtonD1Ev>
 8006b0e:	687b      	ldr	r3, [r7, #4]
 8006b10:	f603 13c8 	addw	r3, r3, #2504	@ 0x9c8
 8006b14:	4618      	mov	r0, r3
 8006b16:	f7ff fea1 	bl	800685c <_ZN8touchgfx5ImageD1Ev>
 8006b1a:	687b      	ldr	r3, [r7, #4]
 8006b1c:	f603 139c 	addw	r3, r3, #2460	@ 0x99c
 8006b20:	4618      	mov	r0, r3
 8006b22:	f7ff fe9b 	bl	800685c <_ZN8touchgfx5ImageD1Ev>
 8006b26:	687b      	ldr	r3, [r7, #4]
 8006b28:	f503 6316 	add.w	r3, r3, #2400	@ 0x960
 8006b2c:	4618      	mov	r0, r3
 8006b2e:	f7ff fed9 	bl	80068e4 <_ZN8touchgfx8TextAreaD1Ev>
 8006b32:	687b      	ldr	r3, [r7, #4]
 8006b34:	f603 132c 	addw	r3, r3, #2348	@ 0x92c
 8006b38:	4618      	mov	r0, r3
 8006b3a:	f7ff feb1 	bl	80068a0 <_ZN8touchgfx13BoxWithBorderD1Ev>
 8006b3e:	687b      	ldr	r3, [r7, #4]
 8006b40:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006b44:	4618      	mov	r0, r3
 8006b46:	f7ff fe67 	bl	8006818 <_ZN8touchgfx9ContainerD1Ev>
 8006b4a:	687b      	ldr	r3, [r7, #4]
 8006b4c:	f603 03c4 	addw	r3, r3, #2244	@ 0x8c4
 8006b50:	4618      	mov	r0, r3
 8006b52:	f7ff fec7 	bl	80068e4 <_ZN8touchgfx8TextAreaD1Ev>
 8006b56:	687b      	ldr	r3, [r7, #4]
 8006b58:	f603 0388 	addw	r3, r3, #2184	@ 0x888
 8006b5c:	4618      	mov	r0, r3
 8006b5e:	f7ff fec1 	bl	80068e4 <_ZN8touchgfx8TextAreaD1Ev>
 8006b62:	687b      	ldr	r3, [r7, #4]
 8006b64:	f603 0354 	addw	r3, r3, #2132	@ 0x854
 8006b68:	4618      	mov	r0, r3
 8006b6a:	f7ff fe99 	bl	80068a0 <_ZN8touchgfx13BoxWithBorderD1Ev>
 8006b6e:	687b      	ldr	r3, [r7, #4]
 8006b70:	f503 6302 	add.w	r3, r3, #2080	@ 0x820
 8006b74:	4618      	mov	r0, r3
 8006b76:	f7ff fe93 	bl	80068a0 <_ZN8touchgfx13BoxWithBorderD1Ev>
 8006b7a:	687b      	ldr	r3, [r7, #4]
 8006b7c:	f203 73f4 	addw	r3, r3, #2036	@ 0x7f4
 8006b80:	4618      	mov	r0, r3
 8006b82:	f7ff fe49 	bl	8006818 <_ZN8touchgfx9ContainerD1Ev>
 8006b86:	687b      	ldr	r3, [r7, #4]
 8006b88:	f503 63f7 	add.w	r3, r3, #1976	@ 0x7b8
 8006b8c:	4618      	mov	r0, r3
 8006b8e:	f7ff fea9 	bl	80068e4 <_ZN8touchgfx8TextAreaD1Ev>
 8006b92:	687b      	ldr	r3, [r7, #4]
 8006b94:	f203 737c 	addw	r3, r3, #1916	@ 0x77c
 8006b98:	4618      	mov	r0, r3
 8006b9a:	f7ff fea3 	bl	80068e4 <_ZN8touchgfx8TextAreaD1Ev>
 8006b9e:	687b      	ldr	r3, [r7, #4]
 8006ba0:	f503 63e9 	add.w	r3, r3, #1864	@ 0x748
 8006ba4:	4618      	mov	r0, r3
 8006ba6:	f7ff fe7b 	bl	80068a0 <_ZN8touchgfx13BoxWithBorderD1Ev>
 8006baa:	687b      	ldr	r3, [r7, #4]
 8006bac:	f203 7314 	addw	r3, r3, #1812	@ 0x714
 8006bb0:	4618      	mov	r0, r3
 8006bb2:	f7ff fe75 	bl	80068a0 <_ZN8touchgfx13BoxWithBorderD1Ev>
 8006bb6:	687b      	ldr	r3, [r7, #4]
 8006bb8:	f503 63dd 	add.w	r3, r3, #1768	@ 0x6e8
 8006bbc:	4618      	mov	r0, r3
 8006bbe:	f7ff fe2b 	bl	8006818 <_ZN8touchgfx9ContainerD1Ev>
 8006bc2:	687b      	ldr	r3, [r7, #4]
 8006bc4:	f203 63ac 	addw	r3, r3, #1708	@ 0x6ac
 8006bc8:	4618      	mov	r0, r3
 8006bca:	f7ff fe8b 	bl	80068e4 <_ZN8touchgfx8TextAreaD1Ev>
 8006bce:	687b      	ldr	r3, [r7, #4]
 8006bd0:	f503 63cf 	add.w	r3, r3, #1656	@ 0x678
 8006bd4:	4618      	mov	r0, r3
 8006bd6:	f7ff fe63 	bl	80068a0 <_ZN8touchgfx13BoxWithBorderD1Ev>
 8006bda:	687b      	ldr	r3, [r7, #4]
 8006bdc:	f203 634c 	addw	r3, r3, #1612	@ 0x64c
 8006be0:	4618      	mov	r0, r3
 8006be2:	f7ff fe19 	bl	8006818 <_ZN8touchgfx9ContainerD1Ev>
 8006be6:	687b      	ldr	r3, [r7, #4]
 8006be8:	f503 63c3 	add.w	r3, r3, #1560	@ 0x618
 8006bec:	4618      	mov	r0, r3
 8006bee:	f7ff fe57 	bl	80068a0 <_ZN8touchgfx13BoxWithBorderD1Ev>
 8006bf2:	687b      	ldr	r3, [r7, #4]
 8006bf4:	f203 53ec 	addw	r3, r3, #1516	@ 0x5ec
 8006bf8:	4618      	mov	r0, r3
 8006bfa:	f7ff fe0d 	bl	8006818 <_ZN8touchgfx9ContainerD1Ev>
 8006bfe:	687b      	ldr	r3, [r7, #4]
 8006c00:	f503 63b7 	add.w	r3, r3, #1464	@ 0x5b8
 8006c04:	4618      	mov	r0, r3
 8006c06:	f7ff fe4b 	bl	80068a0 <_ZN8touchgfx13BoxWithBorderD1Ev>
 8006c0a:	687b      	ldr	r3, [r7, #4]
 8006c0c:	f203 538c 	addw	r3, r3, #1420	@ 0x58c
 8006c10:	4618      	mov	r0, r3
 8006c12:	f7ff fe01 	bl	8006818 <_ZN8touchgfx9ContainerD1Ev>
 8006c16:	687b      	ldr	r3, [r7, #4]
 8006c18:	f503 63ab 	add.w	r3, r3, #1368	@ 0x558
 8006c1c:	4618      	mov	r0, r3
 8006c1e:	f7ff fe3f 	bl	80068a0 <_ZN8touchgfx13BoxWithBorderD1Ev>
 8006c22:	687b      	ldr	r3, [r7, #4]
 8006c24:	f203 532c 	addw	r3, r3, #1324	@ 0x52c
 8006c28:	4618      	mov	r0, r3
 8006c2a:	f7ff fdf5 	bl	8006818 <_ZN8touchgfx9ContainerD1Ev>
 8006c2e:	687b      	ldr	r3, [r7, #4]
 8006c30:	f203 43f4 	addw	r3, r3, #1268	@ 0x4f4
 8006c34:	4618      	mov	r0, r3
 8006c36:	f002 fdaf 	bl	8009798 <_ZN8touchgfx12ToggleButtonD1Ev>
 8006c3a:	687b      	ldr	r3, [r7, #4]
 8006c3c:	f503 737e 	add.w	r3, r3, #1016	@ 0x3f8
 8006c40:	4618      	mov	r0, r3
 8006c42:	f002 fd73 	bl	800972c <_ZN8touchgfx6SliderD1Ev>
 8006c46:	687b      	ldr	r3, [r7, #4]
 8006c48:	f503 736f 	add.w	r3, r3, #956	@ 0x3bc
 8006c4c:	4618      	mov	r0, r3
 8006c4e:	f7ff fe49 	bl	80068e4 <_ZN8touchgfx8TextAreaD1Ev>
 8006c52:	687b      	ldr	r3, [r7, #4]
 8006c54:	f503 7362 	add.w	r3, r3, #904	@ 0x388
 8006c58:	4618      	mov	r0, r3
 8006c5a:	f7ff fe21 	bl	80068a0 <_ZN8touchgfx13BoxWithBorderD1Ev>
 8006c5e:	687b      	ldr	r3, [r7, #4]
 8006c60:	f503 7357 	add.w	r3, r3, #860	@ 0x35c
 8006c64:	4618      	mov	r0, r3
 8006c66:	f7ff fdd7 	bl	8006818 <_ZN8touchgfx9ContainerD1Ev>
 8006c6a:	687b      	ldr	r3, [r7, #4]
 8006c6c:	f503 7315 	add.w	r3, r3, #596	@ 0x254
 8006c70:	4618      	mov	r0, r3
 8006c72:	f002 fd31 	bl	80096d8 <_ZN8touchgfx12TextProgressD1Ev>
 8006c76:	687b      	ldr	r3, [r7, #4]
 8006c78:	f503 7308 	add.w	r3, r3, #544	@ 0x220
 8006c7c:	4618      	mov	r0, r3
 8006c7e:	f7ff fe0f 	bl	80068a0 <_ZN8touchgfx13BoxWithBorderD1Ev>
 8006c82:	687b      	ldr	r3, [r7, #4]
 8006c84:	f503 73fa 	add.w	r3, r3, #500	@ 0x1f4
 8006c88:	4618      	mov	r0, r3
 8006c8a:	f7ff fdc5 	bl	8006818 <_ZN8touchgfx9ContainerD1Ev>
 8006c8e:	687b      	ldr	r3, [r7, #4]
 8006c90:	f503 73dc 	add.w	r3, r3, #440	@ 0x1b8
 8006c94:	4618      	mov	r0, r3
 8006c96:	f7ff fe25 	bl	80068e4 <_ZN8touchgfx8TextAreaD1Ev>
 8006c9a:	687b      	ldr	r3, [r7, #4]
 8006c9c:	f503 73c2 	add.w	r3, r3, #388	@ 0x184
 8006ca0:	4618      	mov	r0, r3
 8006ca2:	f7ff fdfd 	bl	80068a0 <_ZN8touchgfx13BoxWithBorderD1Ev>
 8006ca6:	687b      	ldr	r3, [r7, #4]
 8006ca8:	f503 73ac 	add.w	r3, r3, #344	@ 0x158
 8006cac:	4618      	mov	r0, r3
 8006cae:	f7ff fdb3 	bl	8006818 <_ZN8touchgfx9ContainerD1Ev>
 8006cb2:	687b      	ldr	r3, [r7, #4]
 8006cb4:	f503 7392 	add.w	r3, r3, #292	@ 0x124
 8006cb8:	4618      	mov	r0, r3
 8006cba:	f7ff fdf1 	bl	80068a0 <_ZN8touchgfx13BoxWithBorderD1Ev>
 8006cbe:	687b      	ldr	r3, [r7, #4]
 8006cc0:	33f8      	adds	r3, #248	@ 0xf8
 8006cc2:	4618      	mov	r0, r3
 8006cc4:	f7ff fda8 	bl	8006818 <_ZN8touchgfx9ContainerD1Ev>
 8006cc8:	687b      	ldr	r3, [r7, #4]
 8006cca:	33c4      	adds	r3, #196	@ 0xc4
 8006ccc:	4618      	mov	r0, r3
 8006cce:	f7ff fde7 	bl	80068a0 <_ZN8touchgfx13BoxWithBorderD1Ev>
 8006cd2:	687b      	ldr	r3, [r7, #4]
 8006cd4:	3398      	adds	r3, #152	@ 0x98
 8006cd6:	4618      	mov	r0, r3
 8006cd8:	f7ff fd9e 	bl	8006818 <_ZN8touchgfx9ContainerD1Ev>
 8006cdc:	687b      	ldr	r3, [r7, #4]
 8006cde:	336c      	adds	r3, #108	@ 0x6c
 8006ce0:	4618      	mov	r0, r3
 8006ce2:	f7ff fdbb 	bl	800685c <_ZN8touchgfx5ImageD1Ev>
 8006ce6:	687b      	ldr	r3, [r7, #4]
 8006ce8:	3340      	adds	r3, #64	@ 0x40
 8006cea:	4618      	mov	r0, r3
 8006cec:	f7fe fe36 	bl	800595c <_ZN8touchgfx3BoxD1Ev>
 8006cf0:	687b      	ldr	r3, [r7, #4]
 8006cf2:	4618      	mov	r0, r3
 8006cf4:	f7ff feb8 	bl	8006a68 <_ZN8touchgfx4ViewI13MainPresenterED1Ev>
 8006cf8:	687b      	ldr	r3, [r7, #4]
 8006cfa:	4618      	mov	r0, r3
 8006cfc:	3708      	adds	r7, #8
 8006cfe:	46bd      	mov	sp, r7
 8006d00:	bd80      	pop	{r7, pc}
 8006d02:	bf00      	nop
 8006d04:	0802cfcc 	.word	0x0802cfcc

08006d08 <_ZN12MainViewBaseD0Ev>:
 8006d08:	b580      	push	{r7, lr}
 8006d0a:	b082      	sub	sp, #8
 8006d0c:	af00      	add	r7, sp, #0
 8006d0e:	6078      	str	r0, [r7, #4]
 8006d10:	6878      	ldr	r0, [r7, #4]
 8006d12:	f7ff fecb 	bl	8006aac <_ZN12MainViewBaseD1Ev>
 8006d16:	f640 3118 	movw	r1, #2840	@ 0xb18
 8006d1a:	6878      	ldr	r0, [r7, #4]
 8006d1c:	f023 fddb 	bl	802a8d6 <_ZdlPvj>
 8006d20:	687b      	ldr	r3, [r7, #4]
 8006d22:	4618      	mov	r0, r3
 8006d24:	3708      	adds	r7, #8
 8006d26:	46bd      	mov	sp, r7
 8006d28:	bd80      	pop	{r7, pc}

08006d2a <_ZN12MainViewBase17set_volume_sliderEi>:
    virtual void handleKeyEvent(uint8_t key);

    /*
     * Virtual Action Handlers
     */
    virtual void set_volume_slider(int value)
 8006d2a:	b480      	push	{r7}
 8006d2c:	b083      	sub	sp, #12
 8006d2e:	af00      	add	r7, sp, #0
 8006d30:	6078      	str	r0, [r7, #4]
 8006d32:	6039      	str	r1, [r7, #0]
    {
        // Override and implement this function in Main
    }
 8006d34:	bf00      	nop
 8006d36:	370c      	adds	r7, #12
 8006d38:	46bd      	mov	sp, r7
 8006d3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d3e:	4770      	bx	lr

08006d40 <_ZN12MainViewBase20update_anomaly_alertEv>:

    virtual void update_anomaly_alert()
 8006d40:	b480      	push	{r7}
 8006d42:	b083      	sub	sp, #12
 8006d44:	af00      	add	r7, sp, #0
 8006d46:	6078      	str	r0, [r7, #4]
    {
        // Override and implement this function in Main
    }
 8006d48:	bf00      	nop
 8006d4a:	370c      	adds	r7, #12
 8006d4c:	46bd      	mov	sp, r7
 8006d4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d52:	4770      	bx	lr

08006d54 <_ZN12MainViewBase12toggle_voiceEv>:

    virtual void toggle_voice()
 8006d54:	b480      	push	{r7}
 8006d56:	b083      	sub	sp, #12
 8006d58:	af00      	add	r7, sp, #0
 8006d5a:	6078      	str	r0, [r7, #4]
    {
        // Override and implement this function in Main
    }
 8006d5c:	bf00      	nop
 8006d5e:	370c      	adds	r7, #12
 8006d60:	46bd      	mov	sp, r7
 8006d62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d66:	4770      	bx	lr

08006d68 <_ZN12MainViewBase18alert_mute_pressedEv>:

    virtual void alert_mute_pressed()
 8006d68:	b480      	push	{r7}
 8006d6a:	b083      	sub	sp, #12
 8006d6c:	af00      	add	r7, sp, #0
 8006d6e:	6078      	str	r0, [r7, #4]
    {
        // Override and implement this function in Main
    }
 8006d70:	bf00      	nop
 8006d72:	370c      	adds	r7, #12
 8006d74:	46bd      	mov	sp, r7
 8006d76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d7a:	4770      	bx	lr

08006d7c <_ZN12MainViewBase18set_volume_encoderEv>:

    virtual void set_volume_encoder()
 8006d7c:	b480      	push	{r7}
 8006d7e:	b083      	sub	sp, #12
 8006d80:	af00      	add	r7, sp, #0
 8006d82:	6078      	str	r0, [r7, #4]
    {
        // Override and implement this function in Main
    }
 8006d84:	bf00      	nop
 8006d86:	370c      	adds	r7, #12
 8006d88:	46bd      	mov	sp, r7
 8006d8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d8e:	4770      	bx	lr

08006d90 <_ZN12MainViewBase11applicationEv>:

protected:
    FrontendApplication& application() {
 8006d90:	b580      	push	{r7, lr}
 8006d92:	b082      	sub	sp, #8
 8006d94:	af00      	add	r7, sp, #0
 8006d96:	6078      	str	r0, [r7, #4]
        return *static_cast<FrontendApplication*>(touchgfx::Application::getInstance());
 8006d98:	f014 fc5e 	bl	801b658 <_ZN8touchgfx11Application11getInstanceEv>
 8006d9c:	4603      	mov	r3, r0
    }
 8006d9e:	4618      	mov	r0, r3
 8006da0:	3708      	adds	r7, #8
 8006da2:	46bd      	mov	sp, r7
 8006da4:	bd80      	pop	{r7, pc}
	...

08006da8 <_ZN8touchgfx12ToggleButtonC1Ev>:
class ToggleButton : public Button
 8006da8:	b580      	push	{r7, lr}
 8006daa:	b082      	sub	sp, #8
 8006dac:	af00      	add	r7, sp, #0
 8006dae:	6078      	str	r0, [r7, #4]
 8006db0:	687b      	ldr	r3, [r7, #4]
 8006db2:	4618      	mov	r0, r3
 8006db4:	f7fe fed4 	bl	8005b60 <_ZN8touchgfx6ButtonC1Ev>
 8006db8:	4a07      	ldr	r2, [pc, #28]	@ (8006dd8 <_ZN8touchgfx12ToggleButtonC1Ev+0x30>)
 8006dba:	687b      	ldr	r3, [r7, #4]
 8006dbc:	601a      	str	r2, [r3, #0]
 8006dbe:	687b      	ldr	r3, [r7, #4]
 8006dc0:	3334      	adds	r3, #52	@ 0x34
 8006dc2:	f64f 71ff 	movw	r1, #65535	@ 0xffff
 8006dc6:	4618      	mov	r0, r3
 8006dc8:	f7fe fcd2 	bl	8005770 <_ZN8touchgfx6BitmapC1Et>
 8006dcc:	687b      	ldr	r3, [r7, #4]
 8006dce:	4618      	mov	r0, r3
 8006dd0:	3708      	adds	r7, #8
 8006dd2:	46bd      	mov	sp, r7
 8006dd4:	bd80      	pop	{r7, pc}
 8006dd6:	bf00      	nop
 8006dd8:	0802e668 	.word	0x0802e668

08006ddc <_ZN12MainViewBaseC1Ev>:
#include <gui_generated/main_screen/MainViewBase.hpp>
#include <touchgfx/Color.hpp>
#include <BitmapDatabase.hpp>
#include <texts/TextKeysAndLanguages.hpp>

MainViewBase::MainViewBase() :
 8006ddc:	b590      	push	{r4, r7, lr}
 8006dde:	f5ad 7d1d 	sub.w	sp, sp, #628	@ 0x274
 8006de2:	af02      	add	r7, sp, #8
 8006de4:	f507 731a 	add.w	r3, r7, #616	@ 0x268
 8006de8:	f5a3 7319 	sub.w	r3, r3, #612	@ 0x264
 8006dec:	6018      	str	r0, [r3, #0]
    buttonCallback(this, &MainViewBase::buttonCallbackHandler),
    sliderValueChangedCallback(this, &MainViewBase::sliderValueChangedCallbackHandler)
 8006dee:	f507 731a 	add.w	r3, r7, #616	@ 0x268
 8006df2:	f5a3 7319 	sub.w	r3, r3, #612	@ 0x264
 8006df6:	681b      	ldr	r3, [r3, #0]
 8006df8:	4618      	mov	r0, r3
 8006dfa:	f002 fb55 	bl	80094a8 <_ZN8touchgfx4ViewI13MainPresenterEC1Ev>
 8006dfe:	4ae7      	ldr	r2, [pc, #924]	@ (800719c <_ZN12MainViewBaseC1Ev+0x3c0>)
 8006e00:	f507 731a 	add.w	r3, r7, #616	@ 0x268
 8006e04:	f5a3 7319 	sub.w	r3, r3, #612	@ 0x264
 8006e08:	681b      	ldr	r3, [r3, #0]
 8006e0a:	601a      	str	r2, [r3, #0]
 8006e0c:	f507 731a 	add.w	r3, r7, #616	@ 0x268
 8006e10:	f5a3 7319 	sub.w	r3, r3, #612	@ 0x264
 8006e14:	681b      	ldr	r3, [r3, #0]
 8006e16:	3340      	adds	r3, #64	@ 0x40
 8006e18:	4618      	mov	r0, r3
 8006e1a:	f7fe fd47 	bl	80058ac <_ZN8touchgfx3BoxC1Ev>
 8006e1e:	f507 731a 	add.w	r3, r7, #616	@ 0x268
 8006e22:	f5a3 7319 	sub.w	r3, r3, #612	@ 0x264
 8006e26:	681b      	ldr	r3, [r3, #0]
 8006e28:	f103 046c 	add.w	r4, r3, #108	@ 0x6c
 8006e2c:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8006e30:	f64f 71ff 	movw	r1, #65535	@ 0xffff
 8006e34:	4618      	mov	r0, r3
 8006e36:	f7fe fc9b 	bl	8005770 <_ZN8touchgfx6BitmapC1Et>
 8006e3a:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8006e3e:	4619      	mov	r1, r3
 8006e40:	4620      	mov	r0, r4
 8006e42:	f7fe fd65 	bl	8005910 <_ZN8touchgfx5ImageC1ERKNS_6BitmapE>
 8006e46:	f507 731a 	add.w	r3, r7, #616	@ 0x268
 8006e4a:	f5a3 7319 	sub.w	r3, r3, #612	@ 0x264
 8006e4e:	681b      	ldr	r3, [r3, #0]
 8006e50:	3398      	adds	r3, #152	@ 0x98
 8006e52:	4618      	mov	r0, r3
 8006e54:	f7fe fcac 	bl	80057b0 <_ZN8touchgfx9ContainerC1Ev>
 8006e58:	f507 731a 	add.w	r3, r7, #616	@ 0x268
 8006e5c:	f5a3 7319 	sub.w	r3, r3, #612	@ 0x264
 8006e60:	681b      	ldr	r3, [r3, #0]
 8006e62:	33c4      	adds	r3, #196	@ 0xc4
 8006e64:	4618      	mov	r0, r3
 8006e66:	f7fe fd9b 	bl	80059a0 <_ZN8touchgfx13BoxWithBorderC1Ev>
 8006e6a:	f507 731a 	add.w	r3, r7, #616	@ 0x268
 8006e6e:	f5a3 7319 	sub.w	r3, r3, #612	@ 0x264
 8006e72:	681b      	ldr	r3, [r3, #0]
 8006e74:	33f8      	adds	r3, #248	@ 0xf8
 8006e76:	4618      	mov	r0, r3
 8006e78:	f7fe fc9a 	bl	80057b0 <_ZN8touchgfx9ContainerC1Ev>
 8006e7c:	f507 731a 	add.w	r3, r7, #616	@ 0x268
 8006e80:	f5a3 7319 	sub.w	r3, r3, #612	@ 0x264
 8006e84:	681b      	ldr	r3, [r3, #0]
 8006e86:	f503 7392 	add.w	r3, r3, #292	@ 0x124
 8006e8a:	4618      	mov	r0, r3
 8006e8c:	f7fe fd88 	bl	80059a0 <_ZN8touchgfx13BoxWithBorderC1Ev>
 8006e90:	f507 731a 	add.w	r3, r7, #616	@ 0x268
 8006e94:	f5a3 7319 	sub.w	r3, r3, #612	@ 0x264
 8006e98:	681b      	ldr	r3, [r3, #0]
 8006e9a:	f503 73ac 	add.w	r3, r3, #344	@ 0x158
 8006e9e:	4618      	mov	r0, r3
 8006ea0:	f7fe fc86 	bl	80057b0 <_ZN8touchgfx9ContainerC1Ev>
 8006ea4:	f507 731a 	add.w	r3, r7, #616	@ 0x268
 8006ea8:	f5a3 7319 	sub.w	r3, r3, #612	@ 0x264
 8006eac:	681b      	ldr	r3, [r3, #0]
 8006eae:	f503 73c2 	add.w	r3, r3, #388	@ 0x184
 8006eb2:	4618      	mov	r0, r3
 8006eb4:	f7fe fd74 	bl	80059a0 <_ZN8touchgfx13BoxWithBorderC1Ev>
 8006eb8:	f507 731a 	add.w	r3, r7, #616	@ 0x268
 8006ebc:	f5a3 7319 	sub.w	r3, r3, #612	@ 0x264
 8006ec0:	681b      	ldr	r3, [r3, #0]
 8006ec2:	f503 73dc 	add.w	r3, r3, #440	@ 0x1b8
 8006ec6:	4618      	mov	r0, r3
 8006ec8:	f7fe fdba 	bl	8005a40 <_ZN8touchgfx8TextAreaC1Ev>
 8006ecc:	f507 731a 	add.w	r3, r7, #616	@ 0x268
 8006ed0:	f5a3 7319 	sub.w	r3, r3, #612	@ 0x264
 8006ed4:	681b      	ldr	r3, [r3, #0]
 8006ed6:	f503 73fa 	add.w	r3, r3, #500	@ 0x1f4
 8006eda:	4618      	mov	r0, r3
 8006edc:	f7fe fc68 	bl	80057b0 <_ZN8touchgfx9ContainerC1Ev>
 8006ee0:	f507 731a 	add.w	r3, r7, #616	@ 0x268
 8006ee4:	f5a3 7319 	sub.w	r3, r3, #612	@ 0x264
 8006ee8:	681b      	ldr	r3, [r3, #0]
 8006eea:	f503 7308 	add.w	r3, r3, #544	@ 0x220
 8006eee:	4618      	mov	r0, r3
 8006ef0:	f7fe fd56 	bl	80059a0 <_ZN8touchgfx13BoxWithBorderC1Ev>
 8006ef4:	f507 731a 	add.w	r3, r7, #616	@ 0x268
 8006ef8:	f5a3 7319 	sub.w	r3, r3, #612	@ 0x264
 8006efc:	681b      	ldr	r3, [r3, #0]
 8006efe:	f503 7315 	add.w	r3, r3, #596	@ 0x254
 8006f02:	4618      	mov	r0, r3
 8006f04:	f010 fa92 	bl	801742c <_ZN8touchgfx12TextProgressC1Ev>
 8006f08:	f507 731a 	add.w	r3, r7, #616	@ 0x268
 8006f0c:	f5a3 7319 	sub.w	r3, r3, #612	@ 0x264
 8006f10:	681b      	ldr	r3, [r3, #0]
 8006f12:	f503 7357 	add.w	r3, r3, #860	@ 0x35c
 8006f16:	4618      	mov	r0, r3
 8006f18:	f7fe fc4a 	bl	80057b0 <_ZN8touchgfx9ContainerC1Ev>
 8006f1c:	f507 731a 	add.w	r3, r7, #616	@ 0x268
 8006f20:	f5a3 7319 	sub.w	r3, r3, #612	@ 0x264
 8006f24:	681b      	ldr	r3, [r3, #0]
 8006f26:	f503 7362 	add.w	r3, r3, #904	@ 0x388
 8006f2a:	4618      	mov	r0, r3
 8006f2c:	f7fe fd38 	bl	80059a0 <_ZN8touchgfx13BoxWithBorderC1Ev>
 8006f30:	f507 731a 	add.w	r3, r7, #616	@ 0x268
 8006f34:	f5a3 7319 	sub.w	r3, r3, #612	@ 0x264
 8006f38:	681b      	ldr	r3, [r3, #0]
 8006f3a:	f503 736f 	add.w	r3, r3, #956	@ 0x3bc
 8006f3e:	4618      	mov	r0, r3
 8006f40:	f7fe fd7e 	bl	8005a40 <_ZN8touchgfx8TextAreaC1Ev>
 8006f44:	f507 731a 	add.w	r3, r7, #616	@ 0x268
 8006f48:	f5a3 7319 	sub.w	r3, r3, #612	@ 0x264
 8006f4c:	681b      	ldr	r3, [r3, #0]
 8006f4e:	f503 737e 	add.w	r3, r3, #1016	@ 0x3f8
 8006f52:	4618      	mov	r0, r3
 8006f54:	f011 f94c 	bl	80181f0 <_ZN8touchgfx6SliderC1Ev>
 8006f58:	f507 731a 	add.w	r3, r7, #616	@ 0x268
 8006f5c:	f5a3 7319 	sub.w	r3, r3, #612	@ 0x264
 8006f60:	681b      	ldr	r3, [r3, #0]
 8006f62:	f203 43f4 	addw	r3, r3, #1268	@ 0x4f4
 8006f66:	4618      	mov	r0, r3
 8006f68:	f7ff ff1e 	bl	8006da8 <_ZN8touchgfx12ToggleButtonC1Ev>
 8006f6c:	f507 731a 	add.w	r3, r7, #616	@ 0x268
 8006f70:	f5a3 7319 	sub.w	r3, r3, #612	@ 0x264
 8006f74:	681b      	ldr	r3, [r3, #0]
 8006f76:	f203 532c 	addw	r3, r3, #1324	@ 0x52c
 8006f7a:	4618      	mov	r0, r3
 8006f7c:	f7fe fc18 	bl	80057b0 <_ZN8touchgfx9ContainerC1Ev>
 8006f80:	f507 731a 	add.w	r3, r7, #616	@ 0x268
 8006f84:	f5a3 7319 	sub.w	r3, r3, #612	@ 0x264
 8006f88:	681b      	ldr	r3, [r3, #0]
 8006f8a:	f503 63ab 	add.w	r3, r3, #1368	@ 0x558
 8006f8e:	4618      	mov	r0, r3
 8006f90:	f7fe fd06 	bl	80059a0 <_ZN8touchgfx13BoxWithBorderC1Ev>
 8006f94:	f507 731a 	add.w	r3, r7, #616	@ 0x268
 8006f98:	f5a3 7319 	sub.w	r3, r3, #612	@ 0x264
 8006f9c:	681b      	ldr	r3, [r3, #0]
 8006f9e:	f203 538c 	addw	r3, r3, #1420	@ 0x58c
 8006fa2:	4618      	mov	r0, r3
 8006fa4:	f7fe fc04 	bl	80057b0 <_ZN8touchgfx9ContainerC1Ev>
 8006fa8:	f507 731a 	add.w	r3, r7, #616	@ 0x268
 8006fac:	f5a3 7319 	sub.w	r3, r3, #612	@ 0x264
 8006fb0:	681b      	ldr	r3, [r3, #0]
 8006fb2:	f503 63b7 	add.w	r3, r3, #1464	@ 0x5b8
 8006fb6:	4618      	mov	r0, r3
 8006fb8:	f7fe fcf2 	bl	80059a0 <_ZN8touchgfx13BoxWithBorderC1Ev>
 8006fbc:	f507 731a 	add.w	r3, r7, #616	@ 0x268
 8006fc0:	f5a3 7319 	sub.w	r3, r3, #612	@ 0x264
 8006fc4:	681b      	ldr	r3, [r3, #0]
 8006fc6:	f203 53ec 	addw	r3, r3, #1516	@ 0x5ec
 8006fca:	4618      	mov	r0, r3
 8006fcc:	f7fe fbf0 	bl	80057b0 <_ZN8touchgfx9ContainerC1Ev>
 8006fd0:	f507 731a 	add.w	r3, r7, #616	@ 0x268
 8006fd4:	f5a3 7319 	sub.w	r3, r3, #612	@ 0x264
 8006fd8:	681b      	ldr	r3, [r3, #0]
 8006fda:	f503 63c3 	add.w	r3, r3, #1560	@ 0x618
 8006fde:	4618      	mov	r0, r3
 8006fe0:	f7fe fcde 	bl	80059a0 <_ZN8touchgfx13BoxWithBorderC1Ev>
 8006fe4:	f507 731a 	add.w	r3, r7, #616	@ 0x268
 8006fe8:	f5a3 7319 	sub.w	r3, r3, #612	@ 0x264
 8006fec:	681b      	ldr	r3, [r3, #0]
 8006fee:	f203 634c 	addw	r3, r3, #1612	@ 0x64c
 8006ff2:	4618      	mov	r0, r3
 8006ff4:	f7fe fbdc 	bl	80057b0 <_ZN8touchgfx9ContainerC1Ev>
 8006ff8:	f507 731a 	add.w	r3, r7, #616	@ 0x268
 8006ffc:	f5a3 7319 	sub.w	r3, r3, #612	@ 0x264
 8007000:	681b      	ldr	r3, [r3, #0]
 8007002:	f503 63cf 	add.w	r3, r3, #1656	@ 0x678
 8007006:	4618      	mov	r0, r3
 8007008:	f7fe fcca 	bl	80059a0 <_ZN8touchgfx13BoxWithBorderC1Ev>
 800700c:	f507 731a 	add.w	r3, r7, #616	@ 0x268
 8007010:	f5a3 7319 	sub.w	r3, r3, #612	@ 0x264
 8007014:	681b      	ldr	r3, [r3, #0]
 8007016:	f203 63ac 	addw	r3, r3, #1708	@ 0x6ac
 800701a:	4618      	mov	r0, r3
 800701c:	f7fe fd10 	bl	8005a40 <_ZN8touchgfx8TextAreaC1Ev>
 8007020:	f507 731a 	add.w	r3, r7, #616	@ 0x268
 8007024:	f5a3 7319 	sub.w	r3, r3, #612	@ 0x264
 8007028:	681b      	ldr	r3, [r3, #0]
 800702a:	f503 63dd 	add.w	r3, r3, #1768	@ 0x6e8
 800702e:	4618      	mov	r0, r3
 8007030:	f7fe fbbe 	bl	80057b0 <_ZN8touchgfx9ContainerC1Ev>
 8007034:	f507 731a 	add.w	r3, r7, #616	@ 0x268
 8007038:	f5a3 7319 	sub.w	r3, r3, #612	@ 0x264
 800703c:	681b      	ldr	r3, [r3, #0]
 800703e:	f203 7314 	addw	r3, r3, #1812	@ 0x714
 8007042:	4618      	mov	r0, r3
 8007044:	f7fe fcac 	bl	80059a0 <_ZN8touchgfx13BoxWithBorderC1Ev>
 8007048:	f507 731a 	add.w	r3, r7, #616	@ 0x268
 800704c:	f5a3 7319 	sub.w	r3, r3, #612	@ 0x264
 8007050:	681b      	ldr	r3, [r3, #0]
 8007052:	f503 63e9 	add.w	r3, r3, #1864	@ 0x748
 8007056:	4618      	mov	r0, r3
 8007058:	f7fe fca2 	bl	80059a0 <_ZN8touchgfx13BoxWithBorderC1Ev>
 800705c:	f507 731a 	add.w	r3, r7, #616	@ 0x268
 8007060:	f5a3 7319 	sub.w	r3, r3, #612	@ 0x264
 8007064:	681b      	ldr	r3, [r3, #0]
 8007066:	f203 737c 	addw	r3, r3, #1916	@ 0x77c
 800706a:	4618      	mov	r0, r3
 800706c:	f7fe fce8 	bl	8005a40 <_ZN8touchgfx8TextAreaC1Ev>
 8007070:	f507 731a 	add.w	r3, r7, #616	@ 0x268
 8007074:	f5a3 7319 	sub.w	r3, r3, #612	@ 0x264
 8007078:	681b      	ldr	r3, [r3, #0]
 800707a:	f503 63f7 	add.w	r3, r3, #1976	@ 0x7b8
 800707e:	4618      	mov	r0, r3
 8007080:	f7fe fcde 	bl	8005a40 <_ZN8touchgfx8TextAreaC1Ev>
 8007084:	f507 731a 	add.w	r3, r7, #616	@ 0x268
 8007088:	f5a3 7319 	sub.w	r3, r3, #612	@ 0x264
 800708c:	681b      	ldr	r3, [r3, #0]
 800708e:	f203 73f4 	addw	r3, r3, #2036	@ 0x7f4
 8007092:	4618      	mov	r0, r3
 8007094:	f7fe fb8c 	bl	80057b0 <_ZN8touchgfx9ContainerC1Ev>
 8007098:	f507 731a 	add.w	r3, r7, #616	@ 0x268
 800709c:	f5a3 7319 	sub.w	r3, r3, #612	@ 0x264
 80070a0:	681b      	ldr	r3, [r3, #0]
 80070a2:	f503 6302 	add.w	r3, r3, #2080	@ 0x820
 80070a6:	4618      	mov	r0, r3
 80070a8:	f7fe fc7a 	bl	80059a0 <_ZN8touchgfx13BoxWithBorderC1Ev>
 80070ac:	f507 731a 	add.w	r3, r7, #616	@ 0x268
 80070b0:	f5a3 7319 	sub.w	r3, r3, #612	@ 0x264
 80070b4:	681b      	ldr	r3, [r3, #0]
 80070b6:	f603 0354 	addw	r3, r3, #2132	@ 0x854
 80070ba:	4618      	mov	r0, r3
 80070bc:	f7fe fc70 	bl	80059a0 <_ZN8touchgfx13BoxWithBorderC1Ev>
 80070c0:	f507 731a 	add.w	r3, r7, #616	@ 0x268
 80070c4:	f5a3 7319 	sub.w	r3, r3, #612	@ 0x264
 80070c8:	681b      	ldr	r3, [r3, #0]
 80070ca:	f603 0388 	addw	r3, r3, #2184	@ 0x888
 80070ce:	4618      	mov	r0, r3
 80070d0:	f7fe fcb6 	bl	8005a40 <_ZN8touchgfx8TextAreaC1Ev>
 80070d4:	f507 731a 	add.w	r3, r7, #616	@ 0x268
 80070d8:	f5a3 7319 	sub.w	r3, r3, #612	@ 0x264
 80070dc:	681b      	ldr	r3, [r3, #0]
 80070de:	f603 03c4 	addw	r3, r3, #2244	@ 0x8c4
 80070e2:	4618      	mov	r0, r3
 80070e4:	f7fe fcac 	bl	8005a40 <_ZN8touchgfx8TextAreaC1Ev>
 80070e8:	f507 731a 	add.w	r3, r7, #616	@ 0x268
 80070ec:	f5a3 7319 	sub.w	r3, r3, #612	@ 0x264
 80070f0:	681b      	ldr	r3, [r3, #0]
 80070f2:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80070f6:	4618      	mov	r0, r3
 80070f8:	f7fe fb5a 	bl	80057b0 <_ZN8touchgfx9ContainerC1Ev>
 80070fc:	f507 731a 	add.w	r3, r7, #616	@ 0x268
 8007100:	f5a3 7319 	sub.w	r3, r3, #612	@ 0x264
 8007104:	681b      	ldr	r3, [r3, #0]
 8007106:	f603 132c 	addw	r3, r3, #2348	@ 0x92c
 800710a:	4618      	mov	r0, r3
 800710c:	f7fe fc48 	bl	80059a0 <_ZN8touchgfx13BoxWithBorderC1Ev>
 8007110:	f507 731a 	add.w	r3, r7, #616	@ 0x268
 8007114:	f5a3 7319 	sub.w	r3, r3, #612	@ 0x264
 8007118:	681b      	ldr	r3, [r3, #0]
 800711a:	f503 6316 	add.w	r3, r3, #2400	@ 0x960
 800711e:	4618      	mov	r0, r3
 8007120:	f7fe fc8e 	bl	8005a40 <_ZN8touchgfx8TextAreaC1Ev>
 8007124:	f507 731a 	add.w	r3, r7, #616	@ 0x268
 8007128:	f5a3 7319 	sub.w	r3, r3, #612	@ 0x264
 800712c:	681b      	ldr	r3, [r3, #0]
 800712e:	f603 149c 	addw	r4, r3, #2460	@ 0x99c
 8007132:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 8007136:	f64f 71ff 	movw	r1, #65535	@ 0xffff
 800713a:	4618      	mov	r0, r3
 800713c:	f7fe fb18 	bl	8005770 <_ZN8touchgfx6BitmapC1Et>
 8007140:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 8007144:	4619      	mov	r1, r3
 8007146:	4620      	mov	r0, r4
 8007148:	f7fe fbe2 	bl	8005910 <_ZN8touchgfx5ImageC1ERKNS_6BitmapE>
 800714c:	f507 731a 	add.w	r3, r7, #616	@ 0x268
 8007150:	f5a3 7319 	sub.w	r3, r3, #612	@ 0x264
 8007154:	681b      	ldr	r3, [r3, #0]
 8007156:	f603 14c8 	addw	r4, r3, #2504	@ 0x9c8
 800715a:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 800715e:	f64f 71ff 	movw	r1, #65535	@ 0xffff
 8007162:	4618      	mov	r0, r3
 8007164:	f7fe fb04 	bl	8005770 <_ZN8touchgfx6BitmapC1Et>
 8007168:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 800716c:	4619      	mov	r1, r3
 800716e:	4620      	mov	r0, r4
 8007170:	f7fe fbce 	bl	8005910 <_ZN8touchgfx5ImageC1ERKNS_6BitmapE>
 8007174:	f507 731a 	add.w	r3, r7, #616	@ 0x268
 8007178:	f5a3 7319 	sub.w	r3, r3, #612	@ 0x264
 800717c:	681b      	ldr	r3, [r3, #0]
 800717e:	f603 13f4 	addw	r3, r3, #2548	@ 0x9f4
 8007182:	4618      	mov	r0, r3
 8007184:	f7fe fcec 	bl	8005b60 <_ZN8touchgfx6ButtonC1Ev>
 8007188:	f507 731a 	add.w	r3, r7, #616	@ 0x268
 800718c:	f5a3 7319 	sub.w	r3, r3, #612	@ 0x264
 8007190:	681b      	ldr	r3, [r3, #0]
 8007192:	f603 2328 	addw	r3, r3, #2600	@ 0xa28
 8007196:	4618      	mov	r0, r3
 8007198:	e002      	b.n	80071a0 <_ZN12MainViewBaseC1Ev+0x3c4>
 800719a:	bf00      	nop
 800719c:	0802cfcc 	.word	0x0802cfcc
 80071a0:	f7fe fcde 	bl	8005b60 <_ZN8touchgfx6ButtonC1Ev>
 80071a4:	f507 731a 	add.w	r3, r7, #616	@ 0x268
 80071a8:	f5a3 7319 	sub.w	r3, r3, #612	@ 0x264
 80071ac:	681b      	ldr	r3, [r3, #0]
 80071ae:	f603 235c 	addw	r3, r3, #2652	@ 0xa5c
 80071b2:	4618      	mov	r0, r3
 80071b4:	f7fe fafc 	bl	80057b0 <_ZN8touchgfx9ContainerC1Ev>
 80071b8:	f507 731a 	add.w	r3, r7, #616	@ 0x268
 80071bc:	f5a3 7319 	sub.w	r3, r3, #612	@ 0x264
 80071c0:	681b      	ldr	r3, [r3, #0]
 80071c2:	f603 2388 	addw	r3, r3, #2696	@ 0xa88
 80071c6:	4618      	mov	r0, r3
 80071c8:	f7fe fbea 	bl	80059a0 <_ZN8touchgfx13BoxWithBorderC1Ev>
 80071cc:	f507 731a 	add.w	r3, r7, #616	@ 0x268
 80071d0:	f5a3 7319 	sub.w	r3, r3, #612	@ 0x264
 80071d4:	681b      	ldr	r3, [r3, #0]
 80071d6:	f603 23bc 	addw	r3, r3, #2748	@ 0xabc
 80071da:	4618      	mov	r0, r3
 80071dc:	f7fe fc30 	bl	8005a40 <_ZN8touchgfx8TextAreaC1Ev>
    buttonCallback(this, &MainViewBase::buttonCallbackHandler),
 80071e0:	f507 731a 	add.w	r3, r7, #616	@ 0x268
 80071e4:	f5a3 7319 	sub.w	r3, r3, #612	@ 0x264
 80071e8:	681b      	ldr	r3, [r3, #0]
 80071ea:	f603 20f8 	addw	r0, r3, #2808	@ 0xaf8
 80071ee:	f507 731a 	add.w	r3, r7, #616	@ 0x268
 80071f2:	f5a3 730b 	sub.w	r3, r3, #556	@ 0x22c
 80071f6:	4ae9      	ldr	r2, [pc, #932]	@ (800759c <_ZN12MainViewBaseC1Ev+0x7c0>)
 80071f8:	601a      	str	r2, [r3, #0]
 80071fa:	f507 731a 	add.w	r3, r7, #616	@ 0x268
 80071fe:	f5a3 730b 	sub.w	r3, r3, #556	@ 0x22c
 8007202:	2200      	movs	r2, #0
 8007204:	605a      	str	r2, [r3, #4]
 8007206:	f507 731a 	add.w	r3, r7, #616	@ 0x268
 800720a:	f5a3 730b 	sub.w	r3, r3, #556	@ 0x22c
 800720e:	f507 721a 	add.w	r2, r7, #616	@ 0x268
 8007212:	f5a2 7119 	sub.w	r1, r2, #612	@ 0x264
 8007216:	cb0c      	ldmia	r3, {r2, r3}
 8007218:	6809      	ldr	r1, [r1, #0]
 800721a:	f002 f95b 	bl	80094d4 <_ZN8touchgfx8CallbackI12MainViewBaseRKNS_14AbstractButtonEvvEC1EPS1_MS1_FvS4_E>
    sliderValueChangedCallback(this, &MainViewBase::sliderValueChangedCallbackHandler)
 800721e:	f507 731a 	add.w	r3, r7, #616	@ 0x268
 8007222:	f5a3 7319 	sub.w	r3, r3, #612	@ 0x264
 8007226:	681b      	ldr	r3, [r3, #0]
 8007228:	f603 3008 	addw	r0, r3, #2824	@ 0xb08
 800722c:	f507 731a 	add.w	r3, r7, #616	@ 0x268
 8007230:	f5a3 7309 	sub.w	r3, r3, #548	@ 0x224
 8007234:	4ada      	ldr	r2, [pc, #872]	@ (80075a0 <_ZN12MainViewBaseC1Ev+0x7c4>)
 8007236:	601a      	str	r2, [r3, #0]
 8007238:	f507 731a 	add.w	r3, r7, #616	@ 0x268
 800723c:	f5a3 7309 	sub.w	r3, r3, #548	@ 0x224
 8007240:	2200      	movs	r2, #0
 8007242:	605a      	str	r2, [r3, #4]
 8007244:	f507 731a 	add.w	r3, r7, #616	@ 0x268
 8007248:	f5a3 7309 	sub.w	r3, r3, #548	@ 0x224
 800724c:	f507 721a 	add.w	r2, r7, #616	@ 0x268
 8007250:	f5a2 7119 	sub.w	r1, r2, #612	@ 0x264
 8007254:	cb0c      	ldmia	r3, {r2, r3}
 8007256:	6809      	ldr	r1, [r1, #0]
 8007258:	f002 f96c 	bl	8009534 <_ZN8touchgfx8CallbackI12MainViewBaseRKNS_6SliderEivEC1EPS1_MS1_FvS4_iE>
{

    __background.setPosition(0, 0, 480, 272);
 800725c:	f507 731a 	add.w	r3, r7, #616	@ 0x268
 8007260:	f5a3 7319 	sub.w	r3, r3, #612	@ 0x264
 8007264:	681b      	ldr	r3, [r3, #0]
 8007266:	f103 0040 	add.w	r0, r3, #64	@ 0x40
 800726a:	f44f 7388 	mov.w	r3, #272	@ 0x110
 800726e:	9300      	str	r3, [sp, #0]
 8007270:	f44f 73f0 	mov.w	r3, #480	@ 0x1e0
 8007274:	2200      	movs	r2, #0
 8007276:	2100      	movs	r1, #0
 8007278:	f7fc fe15 	bl	8003ea6 <_ZN8touchgfx8Drawable11setPositionEssss>
    __background.setColor(touchgfx::Color::getColorFromRGB(0, 0, 0));
 800727c:	f507 731a 	add.w	r3, r7, #616	@ 0x268
 8007280:	f5a3 7319 	sub.w	r3, r3, #612	@ 0x264
 8007284:	681b      	ldr	r3, [r3, #0]
 8007286:	f103 0440 	add.w	r4, r3, #64	@ 0x40
 800728a:	2300      	movs	r3, #0
 800728c:	f887 3176 	strb.w	r3, [r7, #374]	@ 0x176
 8007290:	2300      	movs	r3, #0
 8007292:	f887 3175 	strb.w	r3, [r7, #373]	@ 0x175
 8007296:	2300      	movs	r3, #0
 8007298:	f887 3174 	strb.w	r3, [r7, #372]	@ 0x174
 800729c:	f897 3176 	ldrb.w	r3, [r7, #374]	@ 0x176
 80072a0:	041a      	lsls	r2, r3, #16
 80072a2:	f897 3175 	ldrb.w	r3, [r7, #373]	@ 0x175
 80072a6:	021b      	lsls	r3, r3, #8
 80072a8:	431a      	orrs	r2, r3
 80072aa:	f897 3174 	ldrb.w	r3, [r7, #372]	@ 0x174
 80072ae:	4313      	orrs	r3, r2
 80072b0:	f043 427f 	orr.w	r2, r3, #4278190080	@ 0xff000000
 80072b4:	f507 73b8 	add.w	r3, r7, #368	@ 0x170
 80072b8:	4611      	mov	r1, r2
 80072ba:	4618      	mov	r0, r3
 80072bc:	f7fe fa49 	bl	8005752 <_ZN8touchgfx9colortypeC1Em>
 80072c0:	f8d7 3170 	ldr.w	r3, [r7, #368]	@ 0x170
 80072c4:	4619      	mov	r1, r3
 80072c6:	4620      	mov	r0, r4
 80072c8:	f7fe fb14 	bl	80058f4 <_ZN8touchgfx3Box8setColorENS_9colortypeE>

    Main_Background.setXY(0, 0);
 80072cc:	f507 731a 	add.w	r3, r7, #616	@ 0x268
 80072d0:	f5a3 7319 	sub.w	r3, r3, #612	@ 0x264
 80072d4:	681b      	ldr	r3, [r3, #0]
 80072d6:	336c      	adds	r3, #108	@ 0x6c
 80072d8:	2200      	movs	r2, #0
 80072da:	2100      	movs	r1, #0
 80072dc:	4618      	mov	r0, r3
 80072de:	f7fc fe3b 	bl	8003f58 <_ZN8touchgfx8Drawable5setXYEss>
    Main_Background.setBitmap(touchgfx::Bitmap(BITMAP_BACKGROUND_1_ID));
 80072e2:	f507 731a 	add.w	r3, r7, #616	@ 0x268
 80072e6:	f5a3 7319 	sub.w	r3, r3, #612	@ 0x264
 80072ea:	681b      	ldr	r3, [r3, #0]
 80072ec:	f103 046c 	add.w	r4, r3, #108	@ 0x6c
 80072f0:	f107 034c 	add.w	r3, r7, #76	@ 0x4c
 80072f4:	2100      	movs	r1, #0
 80072f6:	4618      	mov	r0, r3
 80072f8:	f7fe fa3a 	bl	8005770 <_ZN8touchgfx6BitmapC1Et>
 80072fc:	f107 034c 	add.w	r3, r7, #76	@ 0x4c
 8007300:	4619      	mov	r1, r3
 8007302:	4620      	mov	r0, r4
 8007304:	f012 fc99 	bl	8019c3a <_ZN8touchgfx5Image9setBitmapERKNS_6BitmapE>

    Button_Panel.setPosition(10, 94, 460, 170);
 8007308:	f507 731a 	add.w	r3, r7, #616	@ 0x268
 800730c:	f5a3 7319 	sub.w	r3, r3, #612	@ 0x264
 8007310:	681b      	ldr	r3, [r3, #0]
 8007312:	f103 0098 	add.w	r0, r3, #152	@ 0x98
 8007316:	23aa      	movs	r3, #170	@ 0xaa
 8007318:	9300      	str	r3, [sp, #0]
 800731a:	f44f 73e6 	mov.w	r3, #460	@ 0x1cc
 800731e:	225e      	movs	r2, #94	@ 0x5e
 8007320:	210a      	movs	r1, #10
 8007322:	f7fc fdc0 	bl	8003ea6 <_ZN8touchgfx8Drawable11setPositionEssss>

    Button_Panel_Background.setPosition(0, 18, 460, 153);
 8007326:	f507 731a 	add.w	r3, r7, #616	@ 0x268
 800732a:	f5a3 7319 	sub.w	r3, r3, #612	@ 0x264
 800732e:	681b      	ldr	r3, [r3, #0]
 8007330:	f103 00c4 	add.w	r0, r3, #196	@ 0xc4
 8007334:	2399      	movs	r3, #153	@ 0x99
 8007336:	9300      	str	r3, [sp, #0]
 8007338:	f44f 73e6 	mov.w	r3, #460	@ 0x1cc
 800733c:	2212      	movs	r2, #18
 800733e:	2100      	movs	r1, #0
 8007340:	f7fc fdb1 	bl	8003ea6 <_ZN8touchgfx8Drawable11setPositionEssss>
    Button_Panel_Background.setColor(touchgfx::Color::getColorFromRGB(78, 137, 174));
 8007344:	f507 731a 	add.w	r3, r7, #616	@ 0x268
 8007348:	f5a3 7319 	sub.w	r3, r3, #612	@ 0x264
 800734c:	681b      	ldr	r3, [r3, #0]
 800734e:	f103 04c4 	add.w	r4, r3, #196	@ 0xc4
 8007352:	234e      	movs	r3, #78	@ 0x4e
 8007354:	f887 3179 	strb.w	r3, [r7, #377]	@ 0x179
 8007358:	2389      	movs	r3, #137	@ 0x89
 800735a:	f887 3178 	strb.w	r3, [r7, #376]	@ 0x178
 800735e:	23ae      	movs	r3, #174	@ 0xae
 8007360:	f887 3177 	strb.w	r3, [r7, #375]	@ 0x177
 8007364:	f897 3179 	ldrb.w	r3, [r7, #377]	@ 0x179
 8007368:	041a      	lsls	r2, r3, #16
 800736a:	f897 3178 	ldrb.w	r3, [r7, #376]	@ 0x178
 800736e:	021b      	lsls	r3, r3, #8
 8007370:	431a      	orrs	r2, r3
 8007372:	f897 3177 	ldrb.w	r3, [r7, #375]	@ 0x177
 8007376:	4313      	orrs	r3, r2
 8007378:	f043 427f 	orr.w	r2, r3, #4278190080	@ 0xff000000
 800737c:	f507 73b6 	add.w	r3, r7, #364	@ 0x16c
 8007380:	4611      	mov	r1, r2
 8007382:	4618      	mov	r0, r3
 8007384:	f7fe f9e5 	bl	8005752 <_ZN8touchgfx9colortypeC1Em>
 8007388:	f8d7 316c 	ldr.w	r3, [r7, #364]	@ 0x16c
 800738c:	4619      	mov	r1, r3
 800738e:	4620      	mov	r0, r4
 8007390:	f7fe fab0 	bl	80058f4 <_ZN8touchgfx3Box8setColorENS_9colortypeE>
    Button_Panel_Background.setBorderColor(touchgfx::Color::getColorFromRGB(237, 102, 99));
 8007394:	f507 731a 	add.w	r3, r7, #616	@ 0x268
 8007398:	f5a3 7319 	sub.w	r3, r3, #612	@ 0x264
 800739c:	681b      	ldr	r3, [r3, #0]
 800739e:	f103 04c4 	add.w	r4, r3, #196	@ 0xc4
 80073a2:	23ed      	movs	r3, #237	@ 0xed
 80073a4:	f887 317c 	strb.w	r3, [r7, #380]	@ 0x17c
 80073a8:	2366      	movs	r3, #102	@ 0x66
 80073aa:	f887 317b 	strb.w	r3, [r7, #379]	@ 0x17b
 80073ae:	2363      	movs	r3, #99	@ 0x63
 80073b0:	f887 317a 	strb.w	r3, [r7, #378]	@ 0x17a
 80073b4:	f897 317c 	ldrb.w	r3, [r7, #380]	@ 0x17c
 80073b8:	041a      	lsls	r2, r3, #16
 80073ba:	f897 317b 	ldrb.w	r3, [r7, #379]	@ 0x17b
 80073be:	021b      	lsls	r3, r3, #8
 80073c0:	431a      	orrs	r2, r3
 80073c2:	f897 317a 	ldrb.w	r3, [r7, #378]	@ 0x17a
 80073c6:	4313      	orrs	r3, r2
 80073c8:	f043 427f 	orr.w	r2, r3, #4278190080	@ 0xff000000
 80073cc:	f507 73b4 	add.w	r3, r7, #360	@ 0x168
 80073d0:	4611      	mov	r1, r2
 80073d2:	4618      	mov	r0, r3
 80073d4:	f7fe f9bd 	bl	8005752 <_ZN8touchgfx9colortypeC1Em>
 80073d8:	f507 731a 	add.w	r3, r7, #616	@ 0x268
 80073dc:	f5a3 7380 	sub.w	r3, r3, #256	@ 0x100
 80073e0:	681b      	ldr	r3, [r3, #0]
 80073e2:	4619      	mov	r1, r3
 80073e4:	4620      	mov	r0, r4
 80073e6:	f7fe faf7 	bl	80059d8 <_ZN8touchgfx13BoxWithBorder14setBorderColorENS_9colortypeE>
    Button_Panel_Background.setBorderSize(5);
 80073ea:	f507 731a 	add.w	r3, r7, #616	@ 0x268
 80073ee:	f5a3 7319 	sub.w	r3, r3, #612	@ 0x264
 80073f2:	681b      	ldr	r3, [r3, #0]
 80073f4:	33c4      	adds	r3, #196	@ 0xc4
 80073f6:	2105      	movs	r1, #5
 80073f8:	4618      	mov	r0, r3
 80073fa:	f7fe fafb 	bl	80059f4 <_ZN8touchgfx13BoxWithBorder13setBorderSizeEt>
    Button_Panel.add(Button_Panel_Background);
 80073fe:	f507 731a 	add.w	r3, r7, #616	@ 0x268
 8007402:	f5a3 7319 	sub.w	r3, r3, #612	@ 0x264
 8007406:	681b      	ldr	r3, [r3, #0]
 8007408:	f103 0298 	add.w	r2, r3, #152	@ 0x98
 800740c:	f507 731a 	add.w	r3, r7, #616	@ 0x268
 8007410:	f5a3 7319 	sub.w	r3, r3, #612	@ 0x264
 8007414:	681b      	ldr	r3, [r3, #0]
 8007416:	33c4      	adds	r3, #196	@ 0xc4
 8007418:	4619      	mov	r1, r3
 800741a:	4610      	mov	r0, r2
 800741c:	f010 fa68 	bl	80178f0 <_ZN8touchgfx9Container3addERNS_8DrawableE>

    Voice_Comm_Panel.setPosition(5, 84, 450, 82);
 8007420:	f507 731a 	add.w	r3, r7, #616	@ 0x268
 8007424:	f5a3 7319 	sub.w	r3, r3, #612	@ 0x264
 8007428:	681b      	ldr	r3, [r3, #0]
 800742a:	f103 00f8 	add.w	r0, r3, #248	@ 0xf8
 800742e:	2352      	movs	r3, #82	@ 0x52
 8007430:	9300      	str	r3, [sp, #0]
 8007432:	f44f 73e1 	mov.w	r3, #450	@ 0x1c2
 8007436:	2254      	movs	r2, #84	@ 0x54
 8007438:	2105      	movs	r1, #5
 800743a:	f7fc fd34 	bl	8003ea6 <_ZN8touchgfx8Drawable11setPositionEssss>

    Voice_Comm_Background.setPosition(0, 0, 450, 82);
 800743e:	f507 731a 	add.w	r3, r7, #616	@ 0x268
 8007442:	f5a3 7319 	sub.w	r3, r3, #612	@ 0x264
 8007446:	681b      	ldr	r3, [r3, #0]
 8007448:	f503 7092 	add.w	r0, r3, #292	@ 0x124
 800744c:	2352      	movs	r3, #82	@ 0x52
 800744e:	9300      	str	r3, [sp, #0]
 8007450:	f44f 73e1 	mov.w	r3, #450	@ 0x1c2
 8007454:	2200      	movs	r2, #0
 8007456:	2100      	movs	r1, #0
 8007458:	f7fc fd25 	bl	8003ea6 <_ZN8touchgfx8Drawable11setPositionEssss>
    Voice_Comm_Background.setColor(touchgfx::Color::getColorFromRGB(67, 101, 139));
 800745c:	f507 731a 	add.w	r3, r7, #616	@ 0x268
 8007460:	f5a3 7319 	sub.w	r3, r3, #612	@ 0x264
 8007464:	681b      	ldr	r3, [r3, #0]
 8007466:	f503 7492 	add.w	r4, r3, #292	@ 0x124
 800746a:	2343      	movs	r3, #67	@ 0x43
 800746c:	f887 317f 	strb.w	r3, [r7, #383]	@ 0x17f
 8007470:	2365      	movs	r3, #101	@ 0x65
 8007472:	f887 317e 	strb.w	r3, [r7, #382]	@ 0x17e
 8007476:	238b      	movs	r3, #139	@ 0x8b
 8007478:	f887 317d 	strb.w	r3, [r7, #381]	@ 0x17d
 800747c:	f897 317f 	ldrb.w	r3, [r7, #383]	@ 0x17f
 8007480:	041a      	lsls	r2, r3, #16
 8007482:	f897 317e 	ldrb.w	r3, [r7, #382]	@ 0x17e
 8007486:	021b      	lsls	r3, r3, #8
 8007488:	431a      	orrs	r2, r3
 800748a:	f897 317d 	ldrb.w	r3, [r7, #381]	@ 0x17d
 800748e:	4313      	orrs	r3, r2
 8007490:	f043 427f 	orr.w	r2, r3, #4278190080	@ 0xff000000
 8007494:	f507 73b2 	add.w	r3, r7, #356	@ 0x164
 8007498:	4611      	mov	r1, r2
 800749a:	4618      	mov	r0, r3
 800749c:	f7fe f959 	bl	8005752 <_ZN8touchgfx9colortypeC1Em>
 80074a0:	f507 731a 	add.w	r3, r7, #616	@ 0x268
 80074a4:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80074a8:	681b      	ldr	r3, [r3, #0]
 80074aa:	4619      	mov	r1, r3
 80074ac:	4620      	mov	r0, r4
 80074ae:	f7fe fa21 	bl	80058f4 <_ZN8touchgfx3Box8setColorENS_9colortypeE>
    Voice_Comm_Background.setBorderColor(touchgfx::Color::getColorFromRGB(0, 0, 0));
 80074b2:	f507 731a 	add.w	r3, r7, #616	@ 0x268
 80074b6:	f5a3 7319 	sub.w	r3, r3, #612	@ 0x264
 80074ba:	681b      	ldr	r3, [r3, #0]
 80074bc:	f503 7492 	add.w	r4, r3, #292	@ 0x124
 80074c0:	2300      	movs	r3, #0
 80074c2:	f887 3182 	strb.w	r3, [r7, #386]	@ 0x182
 80074c6:	2300      	movs	r3, #0
 80074c8:	f887 3181 	strb.w	r3, [r7, #385]	@ 0x181
 80074cc:	2300      	movs	r3, #0
 80074ce:	f887 3180 	strb.w	r3, [r7, #384]	@ 0x180
 80074d2:	f897 3182 	ldrb.w	r3, [r7, #386]	@ 0x182
 80074d6:	041a      	lsls	r2, r3, #16
 80074d8:	f897 3181 	ldrb.w	r3, [r7, #385]	@ 0x181
 80074dc:	021b      	lsls	r3, r3, #8
 80074de:	431a      	orrs	r2, r3
 80074e0:	f897 3180 	ldrb.w	r3, [r7, #384]	@ 0x180
 80074e4:	4313      	orrs	r3, r2
 80074e6:	f043 427f 	orr.w	r2, r3, #4278190080	@ 0xff000000
 80074ea:	f507 73b0 	add.w	r3, r7, #352	@ 0x160
 80074ee:	4611      	mov	r1, r2
 80074f0:	4618      	mov	r0, r3
 80074f2:	f7fe f92e 	bl	8005752 <_ZN8touchgfx9colortypeC1Em>
 80074f6:	f507 731a 	add.w	r3, r7, #616	@ 0x268
 80074fa:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80074fe:	681b      	ldr	r3, [r3, #0]
 8007500:	4619      	mov	r1, r3
 8007502:	4620      	mov	r0, r4
 8007504:	f7fe fa68 	bl	80059d8 <_ZN8touchgfx13BoxWithBorder14setBorderColorENS_9colortypeE>
    Voice_Comm_Background.setBorderSize(2);
 8007508:	f507 731a 	add.w	r3, r7, #616	@ 0x268
 800750c:	f5a3 7319 	sub.w	r3, r3, #612	@ 0x264
 8007510:	681b      	ldr	r3, [r3, #0]
 8007512:	f503 7392 	add.w	r3, r3, #292	@ 0x124
 8007516:	2102      	movs	r1, #2
 8007518:	4618      	mov	r0, r3
 800751a:	f7fe fa6b 	bl	80059f4 <_ZN8touchgfx13BoxWithBorder13setBorderSizeEt>
    Voice_Comm_Panel.add(Voice_Comm_Background);
 800751e:	f507 731a 	add.w	r3, r7, #616	@ 0x268
 8007522:	f5a3 7319 	sub.w	r3, r3, #612	@ 0x264
 8007526:	681b      	ldr	r3, [r3, #0]
 8007528:	f103 02f8 	add.w	r2, r3, #248	@ 0xf8
 800752c:	f507 731a 	add.w	r3, r7, #616	@ 0x268
 8007530:	f5a3 7319 	sub.w	r3, r3, #612	@ 0x264
 8007534:	681b      	ldr	r3, [r3, #0]
 8007536:	f503 7392 	add.w	r3, r3, #292	@ 0x124
 800753a:	4619      	mov	r1, r3
 800753c:	4610      	mov	r0, r2
 800753e:	f010 f9d7 	bl	80178f0 <_ZN8touchgfx9Container3addERNS_8DrawableE>

    Voicecomm_Textbox.setPosition(157, 0, 137, 20);
 8007542:	f507 731a 	add.w	r3, r7, #616	@ 0x268
 8007546:	f5a3 7319 	sub.w	r3, r3, #612	@ 0x264
 800754a:	681b      	ldr	r3, [r3, #0]
 800754c:	f503 70ac 	add.w	r0, r3, #344	@ 0x158
 8007550:	2314      	movs	r3, #20
 8007552:	9300      	str	r3, [sp, #0]
 8007554:	2389      	movs	r3, #137	@ 0x89
 8007556:	2200      	movs	r2, #0
 8007558:	219d      	movs	r1, #157	@ 0x9d
 800755a:	f7fc fca4 	bl	8003ea6 <_ZN8touchgfx8Drawable11setPositionEssss>

    Voicecomm_Border.setPosition(-1, 3, 138, 17);
 800755e:	f507 731a 	add.w	r3, r7, #616	@ 0x268
 8007562:	f5a3 7319 	sub.w	r3, r3, #612	@ 0x264
 8007566:	681b      	ldr	r3, [r3, #0]
 8007568:	f503 70c2 	add.w	r0, r3, #388	@ 0x184
 800756c:	2311      	movs	r3, #17
 800756e:	9300      	str	r3, [sp, #0]
 8007570:	238a      	movs	r3, #138	@ 0x8a
 8007572:	2203      	movs	r2, #3
 8007574:	f04f 31ff 	mov.w	r1, #4294967295
 8007578:	f7fc fc95 	bl	8003ea6 <_ZN8touchgfx8Drawable11setPositionEssss>
    Voicecomm_Border.setColor(touchgfx::Color::getColorFromRGB(0, 0, 0));
 800757c:	f507 731a 	add.w	r3, r7, #616	@ 0x268
 8007580:	f5a3 7319 	sub.w	r3, r3, #612	@ 0x264
 8007584:	681b      	ldr	r3, [r3, #0]
 8007586:	f503 74c2 	add.w	r4, r3, #388	@ 0x184
 800758a:	2300      	movs	r3, #0
 800758c:	f887 3185 	strb.w	r3, [r7, #389]	@ 0x185
 8007590:	2300      	movs	r3, #0
 8007592:	f887 3184 	strb.w	r3, [r7, #388]	@ 0x184
 8007596:	2300      	movs	r3, #0
 8007598:	e004      	b.n	80075a4 <_ZN12MainViewBaseC1Ev+0x7c8>
 800759a:	bf00      	nop
 800759c:	08009419 	.word	0x08009419
 80075a0:	08009479 	.word	0x08009479
 80075a4:	f887 3183 	strb.w	r3, [r7, #387]	@ 0x183
 80075a8:	f897 3185 	ldrb.w	r3, [r7, #389]	@ 0x185
 80075ac:	041a      	lsls	r2, r3, #16
 80075ae:	f897 3184 	ldrb.w	r3, [r7, #388]	@ 0x184
 80075b2:	021b      	lsls	r3, r3, #8
 80075b4:	431a      	orrs	r2, r3
 80075b6:	f897 3183 	ldrb.w	r3, [r7, #387]	@ 0x183
 80075ba:	4313      	orrs	r3, r2
 80075bc:	f043 427f 	orr.w	r2, r3, #4278190080	@ 0xff000000
 80075c0:	f507 73ae 	add.w	r3, r7, #348	@ 0x15c
 80075c4:	4611      	mov	r1, r2
 80075c6:	4618      	mov	r0, r3
 80075c8:	f7fe f8c3 	bl	8005752 <_ZN8touchgfx9colortypeC1Em>
 80075cc:	f507 731a 	add.w	r3, r7, #616	@ 0x268
 80075d0:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 80075d4:	681b      	ldr	r3, [r3, #0]
 80075d6:	4619      	mov	r1, r3
 80075d8:	4620      	mov	r0, r4
 80075da:	f7fe f98b 	bl	80058f4 <_ZN8touchgfx3Box8setColorENS_9colortypeE>
    Voicecomm_Border.setBorderColor(touchgfx::Color::getColorFromRGB(237, 102, 99));
 80075de:	f507 731a 	add.w	r3, r7, #616	@ 0x268
 80075e2:	f5a3 7319 	sub.w	r3, r3, #612	@ 0x264
 80075e6:	681b      	ldr	r3, [r3, #0]
 80075e8:	f503 74c2 	add.w	r4, r3, #388	@ 0x184
 80075ec:	23ed      	movs	r3, #237	@ 0xed
 80075ee:	f887 3188 	strb.w	r3, [r7, #392]	@ 0x188
 80075f2:	2366      	movs	r3, #102	@ 0x66
 80075f4:	f887 3187 	strb.w	r3, [r7, #391]	@ 0x187
 80075f8:	2363      	movs	r3, #99	@ 0x63
 80075fa:	f887 3186 	strb.w	r3, [r7, #390]	@ 0x186
 80075fe:	f897 3188 	ldrb.w	r3, [r7, #392]	@ 0x188
 8007602:	041a      	lsls	r2, r3, #16
 8007604:	f897 3187 	ldrb.w	r3, [r7, #391]	@ 0x187
 8007608:	021b      	lsls	r3, r3, #8
 800760a:	431a      	orrs	r2, r3
 800760c:	f897 3186 	ldrb.w	r3, [r7, #390]	@ 0x186
 8007610:	4313      	orrs	r3, r2
 8007612:	f043 427f 	orr.w	r2, r3, #4278190080	@ 0xff000000
 8007616:	f507 73ac 	add.w	r3, r7, #344	@ 0x158
 800761a:	4611      	mov	r1, r2
 800761c:	4618      	mov	r0, r3
 800761e:	f7fe f898 	bl	8005752 <_ZN8touchgfx9colortypeC1Em>
 8007622:	f507 731a 	add.w	r3, r7, #616	@ 0x268
 8007626:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 800762a:	681b      	ldr	r3, [r3, #0]
 800762c:	4619      	mov	r1, r3
 800762e:	4620      	mov	r0, r4
 8007630:	f7fe f9d2 	bl	80059d8 <_ZN8touchgfx13BoxWithBorder14setBorderColorENS_9colortypeE>
    Voicecomm_Border.setBorderSize(3);
 8007634:	f507 731a 	add.w	r3, r7, #616	@ 0x268
 8007638:	f5a3 7319 	sub.w	r3, r3, #612	@ 0x264
 800763c:	681b      	ldr	r3, [r3, #0]
 800763e:	f503 73c2 	add.w	r3, r3, #388	@ 0x184
 8007642:	2103      	movs	r1, #3
 8007644:	4618      	mov	r0, r3
 8007646:	f7fe f9d5 	bl	80059f4 <_ZN8touchgfx13BoxWithBorder13setBorderSizeEt>
    Voicecomm_Textbox.add(Voicecomm_Border);
 800764a:	f507 731a 	add.w	r3, r7, #616	@ 0x268
 800764e:	f5a3 7319 	sub.w	r3, r3, #612	@ 0x264
 8007652:	681b      	ldr	r3, [r3, #0]
 8007654:	f503 72ac 	add.w	r2, r3, #344	@ 0x158
 8007658:	f507 731a 	add.w	r3, r7, #616	@ 0x268
 800765c:	f5a3 7319 	sub.w	r3, r3, #612	@ 0x264
 8007660:	681b      	ldr	r3, [r3, #0]
 8007662:	f503 73c2 	add.w	r3, r3, #388	@ 0x184
 8007666:	4619      	mov	r1, r3
 8007668:	4610      	mov	r0, r2
 800766a:	f010 f941 	bl	80178f0 <_ZN8touchgfx9Container3addERNS_8DrawableE>

    Voicecomm_Text.setXY(7, 5);
 800766e:	f507 731a 	add.w	r3, r7, #616	@ 0x268
 8007672:	f5a3 7319 	sub.w	r3, r3, #612	@ 0x264
 8007676:	681b      	ldr	r3, [r3, #0]
 8007678:	f503 73dc 	add.w	r3, r3, #440	@ 0x1b8
 800767c:	2205      	movs	r2, #5
 800767e:	2107      	movs	r1, #7
 8007680:	4618      	mov	r0, r3
 8007682:	f7fc fc69 	bl	8003f58 <_ZN8touchgfx8Drawable5setXYEss>
    Voicecomm_Text.setColor(touchgfx::Color::getColorFromRGB(255, 255, 255));
 8007686:	f507 731a 	add.w	r3, r7, #616	@ 0x268
 800768a:	f5a3 7319 	sub.w	r3, r3, #612	@ 0x264
 800768e:	681b      	ldr	r3, [r3, #0]
 8007690:	f503 74dc 	add.w	r4, r3, #440	@ 0x1b8
 8007694:	23ff      	movs	r3, #255	@ 0xff
 8007696:	f887 318b 	strb.w	r3, [r7, #395]	@ 0x18b
 800769a:	23ff      	movs	r3, #255	@ 0xff
 800769c:	f887 318a 	strb.w	r3, [r7, #394]	@ 0x18a
 80076a0:	23ff      	movs	r3, #255	@ 0xff
 80076a2:	f887 3189 	strb.w	r3, [r7, #393]	@ 0x189
 80076a6:	f897 318b 	ldrb.w	r3, [r7, #395]	@ 0x18b
 80076aa:	041a      	lsls	r2, r3, #16
 80076ac:	f897 318a 	ldrb.w	r3, [r7, #394]	@ 0x18a
 80076b0:	021b      	lsls	r3, r3, #8
 80076b2:	431a      	orrs	r2, r3
 80076b4:	f897 3189 	ldrb.w	r3, [r7, #393]	@ 0x189
 80076b8:	4313      	orrs	r3, r2
 80076ba:	f043 427f 	orr.w	r2, r3, #4278190080	@ 0xff000000
 80076be:	f507 73aa 	add.w	r3, r7, #340	@ 0x154
 80076c2:	4611      	mov	r1, r2
 80076c4:	4618      	mov	r0, r3
 80076c6:	f7fe f844 	bl	8005752 <_ZN8touchgfx9colortypeC1Em>
 80076ca:	f507 731a 	add.w	r3, r7, #616	@ 0x268
 80076ce:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 80076d2:	681b      	ldr	r3, [r3, #0]
 80076d4:	461a      	mov	r2, r3
 80076d6:	f8c7 418c 	str.w	r4, [r7, #396]	@ 0x18c
 80076da:	f507 731a 	add.w	r3, r7, #616	@ 0x268
 80076de:	f5a3 730f 	sub.w	r3, r3, #572	@ 0x23c
 80076e2:	601a      	str	r2, [r3, #0]
        this->color = color;
 80076e4:	f8d7 318c 	ldr.w	r3, [r7, #396]	@ 0x18c
 80076e8:	f507 721a 	add.w	r2, r7, #616	@ 0x268
 80076ec:	f5a2 720f 	sub.w	r2, r2, #572	@ 0x23c
 80076f0:	6812      	ldr	r2, [r2, #0]
 80076f2:	631a      	str	r2, [r3, #48]	@ 0x30
    }
 80076f4:	bf00      	nop
    Voicecomm_Text.setLinespacing(0);
 80076f6:	f507 731a 	add.w	r3, r7, #616	@ 0x268
 80076fa:	f5a3 7319 	sub.w	r3, r3, #612	@ 0x264
 80076fe:	681b      	ldr	r3, [r3, #0]
 8007700:	f503 73dc 	add.w	r3, r3, #440	@ 0x1b8
 8007704:	f8c7 3194 	str.w	r3, [r7, #404]	@ 0x194
 8007708:	2300      	movs	r3, #0
 800770a:	f8a7 3192 	strh.w	r3, [r7, #402]	@ 0x192
        linespace = space;
 800770e:	f8d7 3194 	ldr.w	r3, [r7, #404]	@ 0x194
 8007712:	f8b7 2192 	ldrh.w	r2, [r7, #402]	@ 0x192
 8007716:	869a      	strh	r2, [r3, #52]	@ 0x34
    }
 8007718:	bf00      	nop
    Voicecomm_Text.setTypedText(touchgfx::TypedText(T___SINGLEUSE_2Q8N));
 800771a:	f507 731a 	add.w	r3, r7, #616	@ 0x268
 800771e:	f5a3 7319 	sub.w	r3, r3, #612	@ 0x264
 8007722:	681b      	ldr	r3, [r3, #0]
 8007724:	f503 74dc 	add.w	r4, r3, #440	@ 0x1b8
 8007728:	f107 0350 	add.w	r3, r7, #80	@ 0x50
 800772c:	2101      	movs	r1, #1
 800772e:	4618      	mov	r0, r3
 8007730:	f7fe f970 	bl	8005a14 <_ZN8touchgfx9TypedTextC1Et>
 8007734:	f107 0350 	add.w	r3, r7, #80	@ 0x50
 8007738:	4619      	mov	r1, r3
 800773a:	4620      	mov	r0, r4
 800773c:	f012 f803 	bl	8019746 <_ZN8touchgfx8TextArea12setTypedTextERKNS_9TypedTextE>
 8007740:	f107 0350 	add.w	r3, r7, #80	@ 0x50
 8007744:	4618      	mov	r0, r3
 8007746:	f7fc fafb 	bl	8003d40 <_ZN8touchgfx9TypedTextD1Ev>
    Voicecomm_Textbox.add(Voicecomm_Text);
 800774a:	f507 731a 	add.w	r3, r7, #616	@ 0x268
 800774e:	f5a3 7319 	sub.w	r3, r3, #612	@ 0x264
 8007752:	681b      	ldr	r3, [r3, #0]
 8007754:	f503 72ac 	add.w	r2, r3, #344	@ 0x158
 8007758:	f507 731a 	add.w	r3, r7, #616	@ 0x268
 800775c:	f5a3 7319 	sub.w	r3, r3, #612	@ 0x264
 8007760:	681b      	ldr	r3, [r3, #0]
 8007762:	f503 73dc 	add.w	r3, r3, #440	@ 0x1b8
 8007766:	4619      	mov	r1, r3
 8007768:	4610      	mov	r0, r2
 800776a:	f010 f8c1 	bl	80178f0 <_ZN8touchgfx9Container3addERNS_8DrawableE>
    Voice_Comm_Panel.add(Voicecomm_Textbox);
 800776e:	f507 731a 	add.w	r3, r7, #616	@ 0x268
 8007772:	f5a3 7319 	sub.w	r3, r3, #612	@ 0x264
 8007776:	681b      	ldr	r3, [r3, #0]
 8007778:	f103 02f8 	add.w	r2, r3, #248	@ 0xf8
 800777c:	f507 731a 	add.w	r3, r7, #616	@ 0x268
 8007780:	f5a3 7319 	sub.w	r3, r3, #612	@ 0x264
 8007784:	681b      	ldr	r3, [r3, #0]
 8007786:	f503 73ac 	add.w	r3, r3, #344	@ 0x158
 800778a:	4619      	mov	r1, r3
 800778c:	4610      	mov	r0, r2
 800778e:	f010 f8af 	bl	80178f0 <_ZN8touchgfx9Container3addERNS_8DrawableE>

    Volume_Textbox.setPosition(143, 58, 70, 16);
 8007792:	f507 731a 	add.w	r3, r7, #616	@ 0x268
 8007796:	f5a3 7319 	sub.w	r3, r3, #612	@ 0x264
 800779a:	681b      	ldr	r3, [r3, #0]
 800779c:	f503 70fa 	add.w	r0, r3, #500	@ 0x1f4
 80077a0:	2310      	movs	r3, #16
 80077a2:	9300      	str	r3, [sp, #0]
 80077a4:	2346      	movs	r3, #70	@ 0x46
 80077a6:	223a      	movs	r2, #58	@ 0x3a
 80077a8:	218f      	movs	r1, #143	@ 0x8f
 80077aa:	f7fc fb7c 	bl	8003ea6 <_ZN8touchgfx8Drawable11setPositionEssss>

    Volume_Text_Border.setPosition(0, 0, 70, 16);
 80077ae:	f507 731a 	add.w	r3, r7, #616	@ 0x268
 80077b2:	f5a3 7319 	sub.w	r3, r3, #612	@ 0x264
 80077b6:	681b      	ldr	r3, [r3, #0]
 80077b8:	f503 7008 	add.w	r0, r3, #544	@ 0x220
 80077bc:	2310      	movs	r3, #16
 80077be:	9300      	str	r3, [sp, #0]
 80077c0:	2346      	movs	r3, #70	@ 0x46
 80077c2:	2200      	movs	r2, #0
 80077c4:	2100      	movs	r1, #0
 80077c6:	f7fc fb6e 	bl	8003ea6 <_ZN8touchgfx8Drawable11setPositionEssss>
    Volume_Text_Border.setColor(touchgfx::Color::getColorFromRGB(0, 0, 0));
 80077ca:	f507 731a 	add.w	r3, r7, #616	@ 0x268
 80077ce:	f5a3 7319 	sub.w	r3, r3, #612	@ 0x264
 80077d2:	681b      	ldr	r3, [r3, #0]
 80077d4:	f503 7408 	add.w	r4, r3, #544	@ 0x220
 80077d8:	2300      	movs	r3, #0
 80077da:	f887 319c 	strb.w	r3, [r7, #412]	@ 0x19c
 80077de:	2300      	movs	r3, #0
 80077e0:	f887 319b 	strb.w	r3, [r7, #411]	@ 0x19b
 80077e4:	2300      	movs	r3, #0
 80077e6:	f887 319a 	strb.w	r3, [r7, #410]	@ 0x19a
 80077ea:	f897 319c 	ldrb.w	r3, [r7, #412]	@ 0x19c
 80077ee:	041a      	lsls	r2, r3, #16
 80077f0:	f897 319b 	ldrb.w	r3, [r7, #411]	@ 0x19b
 80077f4:	021b      	lsls	r3, r3, #8
 80077f6:	431a      	orrs	r2, r3
 80077f8:	f897 319a 	ldrb.w	r3, [r7, #410]	@ 0x19a
 80077fc:	4313      	orrs	r3, r2
 80077fe:	f043 427f 	orr.w	r2, r3, #4278190080	@ 0xff000000
 8007802:	f507 73a8 	add.w	r3, r7, #336	@ 0x150
 8007806:	4611      	mov	r1, r2
 8007808:	4618      	mov	r0, r3
 800780a:	f7fd ffa2 	bl	8005752 <_ZN8touchgfx9colortypeC1Em>
 800780e:	f507 731a 	add.w	r3, r7, #616	@ 0x268
 8007812:	f5a3 738c 	sub.w	r3, r3, #280	@ 0x118
 8007816:	681b      	ldr	r3, [r3, #0]
 8007818:	4619      	mov	r1, r3
 800781a:	4620      	mov	r0, r4
 800781c:	f7fe f86a 	bl	80058f4 <_ZN8touchgfx3Box8setColorENS_9colortypeE>
    Volume_Text_Border.setBorderColor(touchgfx::Color::getColorFromRGB(237, 102, 99));
 8007820:	f507 731a 	add.w	r3, r7, #616	@ 0x268
 8007824:	f5a3 7319 	sub.w	r3, r3, #612	@ 0x264
 8007828:	681b      	ldr	r3, [r3, #0]
 800782a:	f503 7408 	add.w	r4, r3, #544	@ 0x220
 800782e:	23ed      	movs	r3, #237	@ 0xed
 8007830:	f887 319f 	strb.w	r3, [r7, #415]	@ 0x19f
 8007834:	2366      	movs	r3, #102	@ 0x66
 8007836:	f887 319e 	strb.w	r3, [r7, #414]	@ 0x19e
 800783a:	2363      	movs	r3, #99	@ 0x63
 800783c:	f887 319d 	strb.w	r3, [r7, #413]	@ 0x19d
 8007840:	f897 319f 	ldrb.w	r3, [r7, #415]	@ 0x19f
 8007844:	041a      	lsls	r2, r3, #16
 8007846:	f897 319e 	ldrb.w	r3, [r7, #414]	@ 0x19e
 800784a:	021b      	lsls	r3, r3, #8
 800784c:	431a      	orrs	r2, r3
 800784e:	f897 319d 	ldrb.w	r3, [r7, #413]	@ 0x19d
 8007852:	4313      	orrs	r3, r2
 8007854:	f043 427f 	orr.w	r2, r3, #4278190080	@ 0xff000000
 8007858:	f507 73a6 	add.w	r3, r7, #332	@ 0x14c
 800785c:	4611      	mov	r1, r2
 800785e:	4618      	mov	r0, r3
 8007860:	f7fd ff77 	bl	8005752 <_ZN8touchgfx9colortypeC1Em>
 8007864:	f507 731a 	add.w	r3, r7, #616	@ 0x268
 8007868:	f5a3 738e 	sub.w	r3, r3, #284	@ 0x11c
 800786c:	681b      	ldr	r3, [r3, #0]
 800786e:	4619      	mov	r1, r3
 8007870:	4620      	mov	r0, r4
 8007872:	f7fe f8b1 	bl	80059d8 <_ZN8touchgfx13BoxWithBorder14setBorderColorENS_9colortypeE>
    Volume_Text_Border.setBorderSize(3);
 8007876:	f507 731a 	add.w	r3, r7, #616	@ 0x268
 800787a:	f5a3 7319 	sub.w	r3, r3, #612	@ 0x264
 800787e:	681b      	ldr	r3, [r3, #0]
 8007880:	f503 7308 	add.w	r3, r3, #544	@ 0x220
 8007884:	2103      	movs	r1, #3
 8007886:	4618      	mov	r0, r3
 8007888:	f7fe f8b4 	bl	80059f4 <_ZN8touchgfx13BoxWithBorder13setBorderSizeEt>
    Volume_Textbox.add(Volume_Text_Border);
 800788c:	f507 731a 	add.w	r3, r7, #616	@ 0x268
 8007890:	f5a3 7319 	sub.w	r3, r3, #612	@ 0x264
 8007894:	681b      	ldr	r3, [r3, #0]
 8007896:	f503 72fa 	add.w	r2, r3, #500	@ 0x1f4
 800789a:	f507 731a 	add.w	r3, r7, #616	@ 0x268
 800789e:	f5a3 7319 	sub.w	r3, r3, #612	@ 0x264
 80078a2:	681b      	ldr	r3, [r3, #0]
 80078a4:	f503 7308 	add.w	r3, r3, #544	@ 0x220
 80078a8:	4619      	mov	r1, r3
 80078aa:	4610      	mov	r0, r2
 80078ac:	f010 f820 	bl	80178f0 <_ZN8touchgfx9Container3addERNS_8DrawableE>

    textProgress1.setXY(3, 3);
 80078b0:	f507 731a 	add.w	r3, r7, #616	@ 0x268
 80078b4:	f5a3 7319 	sub.w	r3, r3, #612	@ 0x264
 80078b8:	681b      	ldr	r3, [r3, #0]
 80078ba:	f503 7315 	add.w	r3, r3, #596	@ 0x254
 80078be:	2203      	movs	r2, #3
 80078c0:	2103      	movs	r1, #3
 80078c2:	4618      	mov	r0, r3
 80078c4:	f7fc fb48 	bl	8003f58 <_ZN8touchgfx8Drawable5setXYEss>
    textProgress1.setProgressIndicatorPosition(0, 0, 64, 20);
 80078c8:	f507 731a 	add.w	r3, r7, #616	@ 0x268
 80078cc:	f5a3 7319 	sub.w	r3, r3, #612	@ 0x264
 80078d0:	681b      	ldr	r3, [r3, #0]
 80078d2:	f503 7015 	add.w	r0, r3, #596	@ 0x254
 80078d6:	2314      	movs	r3, #20
 80078d8:	9300      	str	r3, [sp, #0]
 80078da:	2340      	movs	r3, #64	@ 0x40
 80078dc:	2200      	movs	r2, #0
 80078de:	2100      	movs	r1, #0
 80078e0:	f00f fd86 	bl	80173f0 <_ZN8touchgfx12TextProgress28setProgressIndicatorPositionEssss>
    textProgress1.setRange(0, 100);
 80078e4:	f507 731a 	add.w	r3, r7, #616	@ 0x268
 80078e8:	f5a3 7319 	sub.w	r3, r3, #612	@ 0x264
 80078ec:	681b      	ldr	r3, [r3, #0]
 80078ee:	f503 7015 	add.w	r0, r3, #596	@ 0x254
 80078f2:	2300      	movs	r3, #0
 80078f4:	9300      	str	r3, [sp, #0]
 80078f6:	2300      	movs	r3, #0
 80078f8:	2264      	movs	r2, #100	@ 0x64
 80078fa:	2100      	movs	r1, #0
 80078fc:	f00f fe80 	bl	8017600 <_ZN8touchgfx25AbstractProgressIndicator8setRangeEiitt>
    textProgress1.setColor(touchgfx::Color::getColorFromRGB(255, 255, 255));
 8007900:	f507 731a 	add.w	r3, r7, #616	@ 0x268
 8007904:	f5a3 7319 	sub.w	r3, r3, #612	@ 0x264
 8007908:	681b      	ldr	r3, [r3, #0]
 800790a:	f503 7415 	add.w	r4, r3, #596	@ 0x254
 800790e:	23ff      	movs	r3, #255	@ 0xff
 8007910:	f887 31a2 	strb.w	r3, [r7, #418]	@ 0x1a2
 8007914:	23ff      	movs	r3, #255	@ 0xff
 8007916:	f887 31a1 	strb.w	r3, [r7, #417]	@ 0x1a1
 800791a:	23ff      	movs	r3, #255	@ 0xff
 800791c:	f887 31a0 	strb.w	r3, [r7, #416]	@ 0x1a0
 8007920:	f897 31a2 	ldrb.w	r3, [r7, #418]	@ 0x1a2
 8007924:	041a      	lsls	r2, r3, #16
 8007926:	f897 31a1 	ldrb.w	r3, [r7, #417]	@ 0x1a1
 800792a:	021b      	lsls	r3, r3, #8
 800792c:	431a      	orrs	r2, r3
 800792e:	f897 31a0 	ldrb.w	r3, [r7, #416]	@ 0x1a0
 8007932:	4313      	orrs	r3, r2
 8007934:	f043 427f 	orr.w	r2, r3, #4278190080	@ 0xff000000
 8007938:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
 800793c:	4611      	mov	r1, r2
 800793e:	4618      	mov	r0, r3
 8007940:	f7fd ff07 	bl	8005752 <_ZN8touchgfx9colortypeC1Em>
 8007944:	f507 731a 	add.w	r3, r7, #616	@ 0x268
 8007948:	f5a3 7390 	sub.w	r3, r3, #288	@ 0x120
 800794c:	681b      	ldr	r3, [r3, #0]
 800794e:	4619      	mov	r1, r3
 8007950:	4620      	mov	r0, r4
 8007952:	f00f fcdf 	bl	8017314 <_ZN8touchgfx12TextProgress8setColorENS_9colortypeE>
    textProgress1.setNumberOfDecimals(0);
 8007956:	f507 731a 	add.w	r3, r7, #616	@ 0x268
 800795a:	f5a3 7319 	sub.w	r3, r3, #612	@ 0x264
 800795e:	681b      	ldr	r3, [r3, #0]
 8007960:	f503 7315 	add.w	r3, r3, #596	@ 0x254
 8007964:	2100      	movs	r1, #0
 8007966:	4618      	mov	r0, r3
 8007968:	f00f fcda 	bl	8017320 <_ZN8touchgfx12TextProgress19setNumberOfDecimalsEt>
    textProgress1.setTypedText(touchgfx::TypedText(T___SINGLEUSE_F9M9));
 800796c:	f507 731a 	add.w	r3, r7, #616	@ 0x268
 8007970:	f5a3 7319 	sub.w	r3, r3, #612	@ 0x264
 8007974:	681b      	ldr	r3, [r3, #0]
 8007976:	f503 7415 	add.w	r4, r3, #596	@ 0x254
 800797a:	f107 0358 	add.w	r3, r7, #88	@ 0x58
 800797e:	2109      	movs	r1, #9
 8007980:	4618      	mov	r0, r3
 8007982:	f7fe f847 	bl	8005a14 <_ZN8touchgfx9TypedTextC1Et>
 8007986:	f107 0358 	add.w	r3, r7, #88	@ 0x58
 800798a:	4619      	mov	r1, r3
 800798c:	4620      	mov	r0, r4
 800798e:	f00f fcdd 	bl	801734c <_ZN8touchgfx12TextProgress12setTypedTextERKNS_9TypedTextE>
 8007992:	f107 0358 	add.w	r3, r7, #88	@ 0x58
 8007996:	4618      	mov	r0, r3
 8007998:	f7fc f9d2 	bl	8003d40 <_ZN8touchgfx9TypedTextD1Ev>
    textProgress1.setBackground(touchgfx::Bitmap(BITMAP_VOLUME_BACKGROUND2_ID));
 800799c:	f507 731a 	add.w	r3, r7, #616	@ 0x268
 80079a0:	f5a3 7319 	sub.w	r3, r3, #612	@ 0x264
 80079a4:	681b      	ldr	r3, [r3, #0]
 80079a6:	f503 7415 	add.w	r4, r3, #596	@ 0x254
 80079aa:	f107 0360 	add.w	r3, r7, #96	@ 0x60
 80079ae:	210d      	movs	r1, #13
 80079b0:	4618      	mov	r0, r3
 80079b2:	f7fd fedd 	bl	8005770 <_ZN8touchgfx6BitmapC1Et>
 80079b6:	f107 0360 	add.w	r3, r7, #96	@ 0x60
 80079ba:	4619      	mov	r1, r3
 80079bc:	4620      	mov	r0, r4
 80079be:	f00f fecc 	bl	801775a <_ZN8touchgfx25AbstractProgressIndicator13setBackgroundERKNS_6BitmapE>
    textProgress1.setValue(50);
 80079c2:	f507 731a 	add.w	r3, r7, #616	@ 0x268
 80079c6:	f5a3 7319 	sub.w	r3, r3, #612	@ 0x264
 80079ca:	681b      	ldr	r3, [r3, #0]
 80079cc:	f503 7315 	add.w	r3, r3, #596	@ 0x254
 80079d0:	2132      	movs	r1, #50	@ 0x32
 80079d2:	4618      	mov	r0, r3
 80079d4:	f00f fcc6 	bl	8017364 <_ZN8touchgfx12TextProgress8setValueEi>
    Volume_Textbox.add(textProgress1);
 80079d8:	f507 731a 	add.w	r3, r7, #616	@ 0x268
 80079dc:	f5a3 7319 	sub.w	r3, r3, #612	@ 0x264
 80079e0:	681b      	ldr	r3, [r3, #0]
 80079e2:	f503 72fa 	add.w	r2, r3, #500	@ 0x1f4
 80079e6:	f507 731a 	add.w	r3, r7, #616	@ 0x268
 80079ea:	f5a3 7319 	sub.w	r3, r3, #612	@ 0x264
 80079ee:	681b      	ldr	r3, [r3, #0]
 80079f0:	f503 7315 	add.w	r3, r3, #596	@ 0x254
 80079f4:	4619      	mov	r1, r3
 80079f6:	4610      	mov	r0, r2
 80079f8:	f00f ff7a 	bl	80178f0 <_ZN8touchgfx9Container3addERNS_8DrawableE>
    Voice_Comm_Panel.add(Volume_Textbox);
 80079fc:	f507 731a 	add.w	r3, r7, #616	@ 0x268
 8007a00:	f5a3 7319 	sub.w	r3, r3, #612	@ 0x264
 8007a04:	681b      	ldr	r3, [r3, #0]
 8007a06:	f103 02f8 	add.w	r2, r3, #248	@ 0xf8
 8007a0a:	f507 731a 	add.w	r3, r7, #616	@ 0x268
 8007a0e:	f5a3 7319 	sub.w	r3, r3, #612	@ 0x264
 8007a12:	681b      	ldr	r3, [r3, #0]
 8007a14:	f503 73fa 	add.w	r3, r3, #500	@ 0x1f4
 8007a18:	4619      	mov	r1, r3
 8007a1a:	4610      	mov	r0, r2
 8007a1c:	f00f ff68 	bl	80178f0 <_ZN8touchgfx9Container3addERNS_8DrawableE>

    Toggle_Textbox.setPosition(388, 58, 39, 17);
 8007a20:	f507 731a 	add.w	r3, r7, #616	@ 0x268
 8007a24:	f5a3 7319 	sub.w	r3, r3, #612	@ 0x264
 8007a28:	681b      	ldr	r3, [r3, #0]
 8007a2a:	f503 7057 	add.w	r0, r3, #860	@ 0x35c
 8007a2e:	2311      	movs	r3, #17
 8007a30:	9300      	str	r3, [sp, #0]
 8007a32:	2327      	movs	r3, #39	@ 0x27
 8007a34:	223a      	movs	r2, #58	@ 0x3a
 8007a36:	f44f 71c2 	mov.w	r1, #388	@ 0x184
 8007a3a:	f7fc fa34 	bl	8003ea6 <_ZN8touchgfx8Drawable11setPositionEssss>

    Toggle_Text_Border.setPosition(0, 0, 38, 16);
 8007a3e:	f507 731a 	add.w	r3, r7, #616	@ 0x268
 8007a42:	f5a3 7319 	sub.w	r3, r3, #612	@ 0x264
 8007a46:	681b      	ldr	r3, [r3, #0]
 8007a48:	f503 7062 	add.w	r0, r3, #904	@ 0x388
 8007a4c:	2310      	movs	r3, #16
 8007a4e:	9300      	str	r3, [sp, #0]
 8007a50:	2326      	movs	r3, #38	@ 0x26
 8007a52:	2200      	movs	r2, #0
 8007a54:	2100      	movs	r1, #0
 8007a56:	f7fc fa26 	bl	8003ea6 <_ZN8touchgfx8Drawable11setPositionEssss>
    Toggle_Text_Border.setColor(touchgfx::Color::getColorFromRGB(0, 0, 0));
 8007a5a:	f507 731a 	add.w	r3, r7, #616	@ 0x268
 8007a5e:	f5a3 7319 	sub.w	r3, r3, #612	@ 0x264
 8007a62:	681b      	ldr	r3, [r3, #0]
 8007a64:	f503 7462 	add.w	r4, r3, #904	@ 0x388
 8007a68:	2300      	movs	r3, #0
 8007a6a:	f887 31a5 	strb.w	r3, [r7, #421]	@ 0x1a5
 8007a6e:	2300      	movs	r3, #0
 8007a70:	f887 31a4 	strb.w	r3, [r7, #420]	@ 0x1a4
 8007a74:	2300      	movs	r3, #0
 8007a76:	f887 31a3 	strb.w	r3, [r7, #419]	@ 0x1a3
 8007a7a:	f897 31a5 	ldrb.w	r3, [r7, #421]	@ 0x1a5
 8007a7e:	041a      	lsls	r2, r3, #16
 8007a80:	f897 31a4 	ldrb.w	r3, [r7, #420]	@ 0x1a4
 8007a84:	021b      	lsls	r3, r3, #8
 8007a86:	431a      	orrs	r2, r3
 8007a88:	f897 31a3 	ldrb.w	r3, [r7, #419]	@ 0x1a3
 8007a8c:	4313      	orrs	r3, r2
 8007a8e:	f043 427f 	orr.w	r2, r3, #4278190080	@ 0xff000000
 8007a92:	f507 73a2 	add.w	r3, r7, #324	@ 0x144
 8007a96:	4611      	mov	r1, r2
 8007a98:	4618      	mov	r0, r3
 8007a9a:	f7fd fe5a 	bl	8005752 <_ZN8touchgfx9colortypeC1Em>
 8007a9e:	f507 731a 	add.w	r3, r7, #616	@ 0x268
 8007aa2:	f5a3 7392 	sub.w	r3, r3, #292	@ 0x124
 8007aa6:	681b      	ldr	r3, [r3, #0]
 8007aa8:	4619      	mov	r1, r3
 8007aaa:	4620      	mov	r0, r4
 8007aac:	f7fd ff22 	bl	80058f4 <_ZN8touchgfx3Box8setColorENS_9colortypeE>
    Toggle_Text_Border.setBorderColor(touchgfx::Color::getColorFromRGB(237, 102, 99));
 8007ab0:	f507 731a 	add.w	r3, r7, #616	@ 0x268
 8007ab4:	f5a3 7319 	sub.w	r3, r3, #612	@ 0x264
 8007ab8:	681b      	ldr	r3, [r3, #0]
 8007aba:	f503 7462 	add.w	r4, r3, #904	@ 0x388
 8007abe:	23ed      	movs	r3, #237	@ 0xed
 8007ac0:	f887 31a8 	strb.w	r3, [r7, #424]	@ 0x1a8
 8007ac4:	2366      	movs	r3, #102	@ 0x66
 8007ac6:	f887 31a7 	strb.w	r3, [r7, #423]	@ 0x1a7
 8007aca:	2363      	movs	r3, #99	@ 0x63
 8007acc:	f887 31a6 	strb.w	r3, [r7, #422]	@ 0x1a6
 8007ad0:	f897 31a8 	ldrb.w	r3, [r7, #424]	@ 0x1a8
 8007ad4:	041a      	lsls	r2, r3, #16
 8007ad6:	f897 31a7 	ldrb.w	r3, [r7, #423]	@ 0x1a7
 8007ada:	021b      	lsls	r3, r3, #8
 8007adc:	431a      	orrs	r2, r3
 8007ade:	f897 31a6 	ldrb.w	r3, [r7, #422]	@ 0x1a6
 8007ae2:	4313      	orrs	r3, r2
 8007ae4:	f043 427f 	orr.w	r2, r3, #4278190080	@ 0xff000000
 8007ae8:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 8007aec:	4611      	mov	r1, r2
 8007aee:	4618      	mov	r0, r3
 8007af0:	f7fd fe2f 	bl	8005752 <_ZN8touchgfx9colortypeC1Em>
 8007af4:	f507 731a 	add.w	r3, r7, #616	@ 0x268
 8007af8:	f5a3 7394 	sub.w	r3, r3, #296	@ 0x128
 8007afc:	681b      	ldr	r3, [r3, #0]
 8007afe:	4619      	mov	r1, r3
 8007b00:	4620      	mov	r0, r4
 8007b02:	f7fd ff69 	bl	80059d8 <_ZN8touchgfx13BoxWithBorder14setBorderColorENS_9colortypeE>
    Toggle_Text_Border.setBorderSize(3);
 8007b06:	f507 731a 	add.w	r3, r7, #616	@ 0x268
 8007b0a:	f5a3 7319 	sub.w	r3, r3, #612	@ 0x264
 8007b0e:	681b      	ldr	r3, [r3, #0]
 8007b10:	f503 7362 	add.w	r3, r3, #904	@ 0x388
 8007b14:	2103      	movs	r1, #3
 8007b16:	4618      	mov	r0, r3
 8007b18:	f7fd ff6c 	bl	80059f4 <_ZN8touchgfx13BoxWithBorder13setBorderSizeEt>
    Toggle_Textbox.add(Toggle_Text_Border);
 8007b1c:	f507 731a 	add.w	r3, r7, #616	@ 0x268
 8007b20:	f5a3 7319 	sub.w	r3, r3, #612	@ 0x264
 8007b24:	681b      	ldr	r3, [r3, #0]
 8007b26:	f503 7257 	add.w	r2, r3, #860	@ 0x35c
 8007b2a:	f507 731a 	add.w	r3, r7, #616	@ 0x268
 8007b2e:	f5a3 7319 	sub.w	r3, r3, #612	@ 0x264
 8007b32:	681b      	ldr	r3, [r3, #0]
 8007b34:	f503 7362 	add.w	r3, r3, #904	@ 0x388
 8007b38:	4619      	mov	r1, r3
 8007b3a:	4610      	mov	r0, r2
 8007b3c:	f00f fed8 	bl	80178f0 <_ZN8touchgfx9Container3addERNS_8DrawableE>

    Toggle_Text.setXY(4, 3);
 8007b40:	f507 731a 	add.w	r3, r7, #616	@ 0x268
 8007b44:	f5a3 7319 	sub.w	r3, r3, #612	@ 0x264
 8007b48:	681b      	ldr	r3, [r3, #0]
 8007b4a:	f503 736f 	add.w	r3, r3, #956	@ 0x3bc
 8007b4e:	2203      	movs	r2, #3
 8007b50:	2104      	movs	r1, #4
 8007b52:	4618      	mov	r0, r3
 8007b54:	f7fc fa00 	bl	8003f58 <_ZN8touchgfx8Drawable5setXYEss>
    Toggle_Text.setColor(touchgfx::Color::getColorFromRGB(255, 255, 255));
 8007b58:	f507 731a 	add.w	r3, r7, #616	@ 0x268
 8007b5c:	f5a3 7319 	sub.w	r3, r3, #612	@ 0x264
 8007b60:	681b      	ldr	r3, [r3, #0]
 8007b62:	f503 746f 	add.w	r4, r3, #956	@ 0x3bc
 8007b66:	23ff      	movs	r3, #255	@ 0xff
 8007b68:	f887 31ab 	strb.w	r3, [r7, #427]	@ 0x1ab
 8007b6c:	23ff      	movs	r3, #255	@ 0xff
 8007b6e:	f887 31aa 	strb.w	r3, [r7, #426]	@ 0x1aa
 8007b72:	23ff      	movs	r3, #255	@ 0xff
 8007b74:	f887 31a9 	strb.w	r3, [r7, #425]	@ 0x1a9
 8007b78:	f897 31ab 	ldrb.w	r3, [r7, #427]	@ 0x1ab
 8007b7c:	041a      	lsls	r2, r3, #16
 8007b7e:	f897 31aa 	ldrb.w	r3, [r7, #426]	@ 0x1aa
 8007b82:	021b      	lsls	r3, r3, #8
 8007b84:	431a      	orrs	r2, r3
 8007b86:	f897 31a9 	ldrb.w	r3, [r7, #425]	@ 0x1a9
 8007b8a:	4313      	orrs	r3, r2
 8007b8c:	f043 427f 	orr.w	r2, r3, #4278190080	@ 0xff000000
 8007b90:	f507 739e 	add.w	r3, r7, #316	@ 0x13c
 8007b94:	4611      	mov	r1, r2
 8007b96:	4618      	mov	r0, r3
 8007b98:	f7fd fddb 	bl	8005752 <_ZN8touchgfx9colortypeC1Em>
 8007b9c:	f507 731a 	add.w	r3, r7, #616	@ 0x268
 8007ba0:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8007ba4:	681b      	ldr	r3, [r3, #0]
 8007ba6:	461a      	mov	r2, r3
 8007ba8:	f8c7 41ac 	str.w	r4, [r7, #428]	@ 0x1ac
 8007bac:	f507 731a 	add.w	r3, r7, #616	@ 0x268
 8007bb0:	f5a3 7310 	sub.w	r3, r3, #576	@ 0x240
 8007bb4:	601a      	str	r2, [r3, #0]
        this->color = color;
 8007bb6:	f8d7 31ac 	ldr.w	r3, [r7, #428]	@ 0x1ac
 8007bba:	f507 721a 	add.w	r2, r7, #616	@ 0x268
 8007bbe:	f5a2 7210 	sub.w	r2, r2, #576	@ 0x240
 8007bc2:	6812      	ldr	r2, [r2, #0]
 8007bc4:	631a      	str	r2, [r3, #48]	@ 0x30
    }
 8007bc6:	bf00      	nop
    Toggle_Text.setLinespacing(0);
 8007bc8:	f507 731a 	add.w	r3, r7, #616	@ 0x268
 8007bcc:	f5a3 7319 	sub.w	r3, r3, #612	@ 0x264
 8007bd0:	681b      	ldr	r3, [r3, #0]
 8007bd2:	f503 736f 	add.w	r3, r3, #956	@ 0x3bc
 8007bd6:	f8c7 31b4 	str.w	r3, [r7, #436]	@ 0x1b4
 8007bda:	2300      	movs	r3, #0
 8007bdc:	f8a7 31b2 	strh.w	r3, [r7, #434]	@ 0x1b2
        linespace = space;
 8007be0:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
 8007be4:	f8b7 21b2 	ldrh.w	r2, [r7, #434]	@ 0x1b2
 8007be8:	869a      	strh	r2, [r3, #52]	@ 0x34
    }
 8007bea:	bf00      	nop
    Toggle_Text.setTypedText(touchgfx::TypedText(T___SINGLEUSE_P64J));
 8007bec:	f507 731a 	add.w	r3, r7, #616	@ 0x268
 8007bf0:	f5a3 7319 	sub.w	r3, r3, #612	@ 0x264
 8007bf4:	681b      	ldr	r3, [r3, #0]
 8007bf6:	f503 746f 	add.w	r4, r3, #956	@ 0x3bc
 8007bfa:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 8007bfe:	2100      	movs	r1, #0
 8007c00:	4618      	mov	r0, r3
 8007c02:	f7fd ff07 	bl	8005a14 <_ZN8touchgfx9TypedTextC1Et>
 8007c06:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 8007c0a:	4619      	mov	r1, r3
 8007c0c:	4620      	mov	r0, r4
 8007c0e:	f011 fd9a 	bl	8019746 <_ZN8touchgfx8TextArea12setTypedTextERKNS_9TypedTextE>
 8007c12:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 8007c16:	4618      	mov	r0, r3
 8007c18:	f7fc f892 	bl	8003d40 <_ZN8touchgfx9TypedTextD1Ev>
    Toggle_Textbox.add(Toggle_Text);
 8007c1c:	f507 731a 	add.w	r3, r7, #616	@ 0x268
 8007c20:	f5a3 7319 	sub.w	r3, r3, #612	@ 0x264
 8007c24:	681b      	ldr	r3, [r3, #0]
 8007c26:	f503 7257 	add.w	r2, r3, #860	@ 0x35c
 8007c2a:	f507 731a 	add.w	r3, r7, #616	@ 0x268
 8007c2e:	f5a3 7319 	sub.w	r3, r3, #612	@ 0x264
 8007c32:	681b      	ldr	r3, [r3, #0]
 8007c34:	f503 736f 	add.w	r3, r3, #956	@ 0x3bc
 8007c38:	4619      	mov	r1, r3
 8007c3a:	4610      	mov	r0, r2
 8007c3c:	f00f fe58 	bl	80178f0 <_ZN8touchgfx9Container3addERNS_8DrawableE>
    Voice_Comm_Panel.add(Toggle_Textbox);
 8007c40:	f507 731a 	add.w	r3, r7, #616	@ 0x268
 8007c44:	f5a3 7319 	sub.w	r3, r3, #612	@ 0x264
 8007c48:	681b      	ldr	r3, [r3, #0]
 8007c4a:	f103 02f8 	add.w	r2, r3, #248	@ 0xf8
 8007c4e:	f507 731a 	add.w	r3, r7, #616	@ 0x268
 8007c52:	f5a3 7319 	sub.w	r3, r3, #612	@ 0x264
 8007c56:	681b      	ldr	r3, [r3, #0]
 8007c58:	f503 7357 	add.w	r3, r3, #860	@ 0x35c
 8007c5c:	4619      	mov	r1, r3
 8007c5e:	4610      	mov	r0, r2
 8007c60:	f00f fe46 	bl	80178f0 <_ZN8touchgfx9Container3addERNS_8DrawableE>

    Volume_Slider.setXY(8, 25);
 8007c64:	f507 731a 	add.w	r3, r7, #616	@ 0x268
 8007c68:	f5a3 7319 	sub.w	r3, r3, #612	@ 0x264
 8007c6c:	681b      	ldr	r3, [r3, #0]
 8007c6e:	f503 737e 	add.w	r3, r3, #1016	@ 0x3f8
 8007c72:	2219      	movs	r2, #25
 8007c74:	2108      	movs	r1, #8
 8007c76:	4618      	mov	r0, r3
 8007c78:	f7fc f96e 	bl	8003f58 <_ZN8touchgfx8Drawable5setXYEss>
    Volume_Slider.setBitmaps(touchgfx::Bitmap(BITMAP_SLIDER_DARK_ID), touchgfx::Bitmap(BITMAP_SLIDER_LIGHT_ID), touchgfx::Bitmap(BITMAP_UNPRESSED_BUTTON_ID));
 8007c7c:	f507 731a 	add.w	r3, r7, #616	@ 0x268
 8007c80:	f5a3 7319 	sub.w	r3, r3, #612	@ 0x264
 8007c84:	681b      	ldr	r3, [r3, #0]
 8007c86:	f503 747e 	add.w	r4, r3, #1016	@ 0x3f8
 8007c8a:	f107 036c 	add.w	r3, r7, #108	@ 0x6c
 8007c8e:	2104      	movs	r1, #4
 8007c90:	4618      	mov	r0, r3
 8007c92:	f7fd fd6d 	bl	8005770 <_ZN8touchgfx6BitmapC1Et>
 8007c96:	f107 0370 	add.w	r3, r7, #112	@ 0x70
 8007c9a:	2105      	movs	r1, #5
 8007c9c:	4618      	mov	r0, r3
 8007c9e:	f7fd fd67 	bl	8005770 <_ZN8touchgfx6BitmapC1Et>
 8007ca2:	f107 0374 	add.w	r3, r7, #116	@ 0x74
 8007ca6:	210b      	movs	r1, #11
 8007ca8:	4618      	mov	r0, r3
 8007caa:	f7fd fd61 	bl	8005770 <_ZN8touchgfx6BitmapC1Et>
 8007cae:	f107 0374 	add.w	r3, r7, #116	@ 0x74
 8007cb2:	f107 0270 	add.w	r2, r7, #112	@ 0x70
 8007cb6:	f107 016c 	add.w	r1, r7, #108	@ 0x6c
 8007cba:	4620      	mov	r0, r4
 8007cbc:	f010 faf4 	bl	80182a8 <_ZN8touchgfx6Slider10setBitmapsERKNS_6BitmapES3_S3_>
    Volume_Slider.setupHorizontalSlider(2, 9, 0, 0, 310);
 8007cc0:	f507 731a 	add.w	r3, r7, #616	@ 0x268
 8007cc4:	f5a3 7319 	sub.w	r3, r3, #612	@ 0x264
 8007cc8:	681b      	ldr	r3, [r3, #0]
 8007cca:	f503 707e 	add.w	r0, r3, #1016	@ 0x3f8
 8007cce:	f44f 739b 	mov.w	r3, #310	@ 0x136
 8007cd2:	9301      	str	r3, [sp, #4]
 8007cd4:	2300      	movs	r3, #0
 8007cd6:	9300      	str	r3, [sp, #0]
 8007cd8:	2300      	movs	r3, #0
 8007cda:	2209      	movs	r2, #9
 8007cdc:	2102      	movs	r1, #2
 8007cde:	f010 f957 	bl	8017f90 <_ZN8touchgfx6Slider21setupHorizontalSliderEttttt>
    Volume_Slider.setValueRange(0, 100);
 8007ce2:	f507 731a 	add.w	r3, r7, #616	@ 0x268
 8007ce6:	f5a3 7319 	sub.w	r3, r3, #612	@ 0x264
 8007cea:	681b      	ldr	r3, [r3, #0]
 8007cec:	f503 737e 	add.w	r3, r3, #1016	@ 0x3f8
 8007cf0:	2264      	movs	r2, #100	@ 0x64
 8007cf2:	2100      	movs	r1, #0
 8007cf4:	4618      	mov	r0, r3
 8007cf6:	f010 f8c0 	bl	8017e7a <_ZN8touchgfx6Slider13setValueRangeEii>
    Volume_Slider.setValue(50);
 8007cfa:	f507 731a 	add.w	r3, r7, #616	@ 0x268
 8007cfe:	f5a3 7319 	sub.w	r3, r3, #612	@ 0x264
 8007d02:	681b      	ldr	r3, [r3, #0]
 8007d04:	f503 737e 	add.w	r3, r3, #1016	@ 0x3f8
 8007d08:	2132      	movs	r1, #50	@ 0x32
 8007d0a:	4618      	mov	r0, r3
 8007d0c:	f010 f841 	bl	8017d92 <_ZN8touchgfx6Slider8setValueEi>
    Volume_Slider.setNewValueCallback(sliderValueChangedCallback);
 8007d10:	f507 731a 	add.w	r3, r7, #616	@ 0x268
 8007d14:	f5a3 7319 	sub.w	r3, r3, #612	@ 0x264
 8007d18:	681b      	ldr	r3, [r3, #0]
 8007d1a:	f503 727e 	add.w	r2, r3, #1016	@ 0x3f8
 8007d1e:	f507 731a 	add.w	r3, r7, #616	@ 0x268
 8007d22:	f5a3 7319 	sub.w	r3, r3, #612	@ 0x264
 8007d26:	681b      	ldr	r3, [r3, #0]
 8007d28:	f603 3308 	addw	r3, r3, #2824	@ 0xb08
 8007d2c:	4619      	mov	r1, r3
 8007d2e:	4610      	mov	r0, r2
 8007d30:	f7fe fe77 	bl	8006a22 <_ZN8touchgfx6Slider19setNewValueCallbackERNS_15GenericCallbackIRKS0_ivEE>
    Voice_Comm_Panel.add(Volume_Slider);
 8007d34:	f507 731a 	add.w	r3, r7, #616	@ 0x268
 8007d38:	f5a3 7319 	sub.w	r3, r3, #612	@ 0x264
 8007d3c:	681b      	ldr	r3, [r3, #0]
 8007d3e:	f103 02f8 	add.w	r2, r3, #248	@ 0xf8
 8007d42:	f507 731a 	add.w	r3, r7, #616	@ 0x268
 8007d46:	f5a3 7319 	sub.w	r3, r3, #612	@ 0x264
 8007d4a:	681b      	ldr	r3, [r3, #0]
 8007d4c:	f503 737e 	add.w	r3, r3, #1016	@ 0x3f8
 8007d50:	4619      	mov	r1, r3
 8007d52:	4610      	mov	r0, r2
 8007d54:	f00f fdcc 	bl	80178f0 <_ZN8touchgfx9Container3addERNS_8DrawableE>

    Voice_Toggle_Button.setXY(372, 23);
 8007d58:	f507 731a 	add.w	r3, r7, #616	@ 0x268
 8007d5c:	f5a3 7319 	sub.w	r3, r3, #612	@ 0x264
 8007d60:	681b      	ldr	r3, [r3, #0]
 8007d62:	f203 43f4 	addw	r3, r3, #1268	@ 0x4f4
 8007d66:	2217      	movs	r2, #23
 8007d68:	f44f 71ba 	mov.w	r1, #372	@ 0x174
 8007d6c:	4618      	mov	r0, r3
 8007d6e:	f7fc f8f3 	bl	8003f58 <_ZN8touchgfx8Drawable5setXYEss>
    Voice_Toggle_Button.setBitmaps(touchgfx::Bitmap(BITMAP_TOGGLE_BUTTON_ON2_ID), touchgfx::Bitmap(BITMAP_TOGGLE_BUTTON_OFF2_ID));
 8007d72:	f507 731a 	add.w	r3, r7, #616	@ 0x268
 8007d76:	f5a3 7319 	sub.w	r3, r3, #612	@ 0x264
 8007d7a:	681b      	ldr	r3, [r3, #0]
 8007d7c:	f203 44f4 	addw	r4, r3, #1268	@ 0x4f4
 8007d80:	f107 0378 	add.w	r3, r7, #120	@ 0x78
 8007d84:	210a      	movs	r1, #10
 8007d86:	4618      	mov	r0, r3
 8007d88:	f7fd fcf2 	bl	8005770 <_ZN8touchgfx6BitmapC1Et>
 8007d8c:	f107 037c 	add.w	r3, r7, #124	@ 0x7c
 8007d90:	2108      	movs	r1, #8
 8007d92:	4618      	mov	r0, r3
 8007d94:	f7fd fcec 	bl	8005770 <_ZN8touchgfx6BitmapC1Et>
 8007d98:	f107 027c 	add.w	r2, r7, #124	@ 0x7c
 8007d9c:	f107 0378 	add.w	r3, r7, #120	@ 0x78
 8007da0:	4619      	mov	r1, r3
 8007da2:	4620      	mov	r0, r4
 8007da4:	f7fe fe4c 	bl	8006a40 <_ZN8touchgfx12ToggleButton10setBitmapsERKNS_6BitmapES3_>
    Voice_Toggle_Button.setAction(buttonCallback);
 8007da8:	f507 731a 	add.w	r3, r7, #616	@ 0x268
 8007dac:	f5a3 7319 	sub.w	r3, r3, #612	@ 0x264
 8007db0:	681b      	ldr	r3, [r3, #0]
 8007db2:	f203 42f4 	addw	r2, r3, #1268	@ 0x4f4
 8007db6:	f507 731a 	add.w	r3, r7, #616	@ 0x268
 8007dba:	f5a3 7319 	sub.w	r3, r3, #612	@ 0x264
 8007dbe:	681b      	ldr	r3, [r3, #0]
 8007dc0:	f603 23f8 	addw	r3, r3, #2808	@ 0xaf8
 8007dc4:	4619      	mov	r1, r3
 8007dc6:	4610      	mov	r0, r2
 8007dc8:	f7fd fe9a 	bl	8005b00 <_ZN8touchgfx14AbstractButton9setActionERNS_15GenericCallbackIRKS0_vvEE>
    Voice_Comm_Panel.add(Voice_Toggle_Button);
 8007dcc:	f507 731a 	add.w	r3, r7, #616	@ 0x268
 8007dd0:	f5a3 7319 	sub.w	r3, r3, #612	@ 0x264
 8007dd4:	681b      	ldr	r3, [r3, #0]
 8007dd6:	f103 02f8 	add.w	r2, r3, #248	@ 0xf8
 8007dda:	f507 731a 	add.w	r3, r7, #616	@ 0x268
 8007dde:	f5a3 7319 	sub.w	r3, r3, #612	@ 0x264
 8007de2:	681b      	ldr	r3, [r3, #0]
 8007de4:	f203 43f4 	addw	r3, r3, #1268	@ 0x4f4
 8007de8:	4619      	mov	r1, r3
 8007dea:	4610      	mov	r0, r2
 8007dec:	f00f fd80 	bl	80178f0 <_ZN8touchgfx9Container3addERNS_8DrawableE>
    Button_Panel.add(Voice_Comm_Panel);
 8007df0:	f507 731a 	add.w	r3, r7, #616	@ 0x268
 8007df4:	f5a3 7319 	sub.w	r3, r3, #612	@ 0x264
 8007df8:	681b      	ldr	r3, [r3, #0]
 8007dfa:	f103 0298 	add.w	r2, r3, #152	@ 0x98
 8007dfe:	f507 731a 	add.w	r3, r7, #616	@ 0x268
 8007e02:	f5a3 7319 	sub.w	r3, r3, #612	@ 0x264
 8007e06:	681b      	ldr	r3, [r3, #0]
 8007e08:	33f8      	adds	r3, #248	@ 0xf8
 8007e0a:	4619      	mov	r1, r3
 8007e0c:	4610      	mov	r0, r2
 8007e0e:	f00f fd6f 	bl	80178f0 <_ZN8touchgfx9Container3addERNS_8DrawableE>

    Anomaly_Detection_Panel.setPosition(5, 23, 450, 67);
 8007e12:	f507 731a 	add.w	r3, r7, #616	@ 0x268
 8007e16:	f5a3 7319 	sub.w	r3, r3, #612	@ 0x264
 8007e1a:	681b      	ldr	r3, [r3, #0]
 8007e1c:	f203 502c 	addw	r0, r3, #1324	@ 0x52c
 8007e20:	2343      	movs	r3, #67	@ 0x43
 8007e22:	9300      	str	r3, [sp, #0]
 8007e24:	f44f 73e1 	mov.w	r3, #450	@ 0x1c2
 8007e28:	2217      	movs	r2, #23
 8007e2a:	2105      	movs	r1, #5
 8007e2c:	f7fc f83b 	bl	8003ea6 <_ZN8touchgfx8Drawable11setPositionEssss>

    Anomaly_Detection_Background.setPosition(0, 0, 450, 63);
 8007e30:	f507 731a 	add.w	r3, r7, #616	@ 0x268
 8007e34:	f5a3 7319 	sub.w	r3, r3, #612	@ 0x264
 8007e38:	681b      	ldr	r3, [r3, #0]
 8007e3a:	f503 60ab 	add.w	r0, r3, #1368	@ 0x558
 8007e3e:	233f      	movs	r3, #63	@ 0x3f
 8007e40:	9300      	str	r3, [sp, #0]
 8007e42:	f44f 73e1 	mov.w	r3, #450	@ 0x1c2
 8007e46:	2200      	movs	r2, #0
 8007e48:	2100      	movs	r1, #0
 8007e4a:	f7fc f82c 	bl	8003ea6 <_ZN8touchgfx8Drawable11setPositionEssss>
    Anomaly_Detection_Background.setColor(touchgfx::Color::getColorFromRGB(67, 101, 139));
 8007e4e:	f507 731a 	add.w	r3, r7, #616	@ 0x268
 8007e52:	f5a3 7319 	sub.w	r3, r3, #612	@ 0x264
 8007e56:	681b      	ldr	r3, [r3, #0]
 8007e58:	f503 64ab 	add.w	r4, r3, #1368	@ 0x558
 8007e5c:	2343      	movs	r3, #67	@ 0x43
 8007e5e:	f887 31bb 	strb.w	r3, [r7, #443]	@ 0x1bb
 8007e62:	2365      	movs	r3, #101	@ 0x65
 8007e64:	f887 31ba 	strb.w	r3, [r7, #442]	@ 0x1ba
 8007e68:	238b      	movs	r3, #139	@ 0x8b
 8007e6a:	f887 31b9 	strb.w	r3, [r7, #441]	@ 0x1b9
 8007e6e:	f897 31bb 	ldrb.w	r3, [r7, #443]	@ 0x1bb
 8007e72:	041a      	lsls	r2, r3, #16
 8007e74:	f897 31ba 	ldrb.w	r3, [r7, #442]	@ 0x1ba
 8007e78:	021b      	lsls	r3, r3, #8
 8007e7a:	431a      	orrs	r2, r3
 8007e7c:	f897 31b9 	ldrb.w	r3, [r7, #441]	@ 0x1b9
 8007e80:	4313      	orrs	r3, r2
 8007e82:	f043 427f 	orr.w	r2, r3, #4278190080	@ 0xff000000
 8007e86:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8007e8a:	4611      	mov	r1, r2
 8007e8c:	4618      	mov	r0, r3
 8007e8e:	f7fd fc60 	bl	8005752 <_ZN8touchgfx9colortypeC1Em>
 8007e92:	f507 731a 	add.w	r3, r7, #616	@ 0x268
 8007e96:	f5a3 7398 	sub.w	r3, r3, #304	@ 0x130
 8007e9a:	681b      	ldr	r3, [r3, #0]
 8007e9c:	4619      	mov	r1, r3
 8007e9e:	4620      	mov	r0, r4
 8007ea0:	f7fd fd28 	bl	80058f4 <_ZN8touchgfx3Box8setColorENS_9colortypeE>
    Anomaly_Detection_Background.setBorderColor(touchgfx::Color::getColorFromRGB(0, 0, 0));
 8007ea4:	f507 731a 	add.w	r3, r7, #616	@ 0x268
 8007ea8:	f5a3 7319 	sub.w	r3, r3, #612	@ 0x264
 8007eac:	681b      	ldr	r3, [r3, #0]
 8007eae:	f503 64ab 	add.w	r4, r3, #1368	@ 0x558
 8007eb2:	2300      	movs	r3, #0
 8007eb4:	f887 31be 	strb.w	r3, [r7, #446]	@ 0x1be
 8007eb8:	2300      	movs	r3, #0
 8007eba:	f887 31bd 	strb.w	r3, [r7, #445]	@ 0x1bd
 8007ebe:	2300      	movs	r3, #0
 8007ec0:	f887 31bc 	strb.w	r3, [r7, #444]	@ 0x1bc
 8007ec4:	f897 31be 	ldrb.w	r3, [r7, #446]	@ 0x1be
 8007ec8:	041a      	lsls	r2, r3, #16
 8007eca:	f897 31bd 	ldrb.w	r3, [r7, #445]	@ 0x1bd
 8007ece:	021b      	lsls	r3, r3, #8
 8007ed0:	431a      	orrs	r2, r3
 8007ed2:	f897 31bc 	ldrb.w	r3, [r7, #444]	@ 0x1bc
 8007ed6:	4313      	orrs	r3, r2
 8007ed8:	f043 427f 	orr.w	r2, r3, #4278190080	@ 0xff000000
 8007edc:	f507 739a 	add.w	r3, r7, #308	@ 0x134
 8007ee0:	4611      	mov	r1, r2
 8007ee2:	4618      	mov	r0, r3
 8007ee4:	f7fd fc35 	bl	8005752 <_ZN8touchgfx9colortypeC1Em>
 8007ee8:	f507 731a 	add.w	r3, r7, #616	@ 0x268
 8007eec:	f5a3 739a 	sub.w	r3, r3, #308	@ 0x134
 8007ef0:	681b      	ldr	r3, [r3, #0]
 8007ef2:	4619      	mov	r1, r3
 8007ef4:	4620      	mov	r0, r4
 8007ef6:	f7fd fd6f 	bl	80059d8 <_ZN8touchgfx13BoxWithBorder14setBorderColorENS_9colortypeE>
    Anomaly_Detection_Background.setBorderSize(2);
 8007efa:	f507 731a 	add.w	r3, r7, #616	@ 0x268
 8007efe:	f5a3 7319 	sub.w	r3, r3, #612	@ 0x264
 8007f02:	681b      	ldr	r3, [r3, #0]
 8007f04:	f503 63ab 	add.w	r3, r3, #1368	@ 0x558
 8007f08:	2102      	movs	r1, #2
 8007f0a:	4618      	mov	r0, r3
 8007f0c:	f7fd fd72 	bl	80059f4 <_ZN8touchgfx13BoxWithBorder13setBorderSizeEt>
    Anomaly_Detection_Panel.add(Anomaly_Detection_Background);
 8007f10:	f507 731a 	add.w	r3, r7, #616	@ 0x268
 8007f14:	f5a3 7319 	sub.w	r3, r3, #612	@ 0x264
 8007f18:	681b      	ldr	r3, [r3, #0]
 8007f1a:	f203 522c 	addw	r2, r3, #1324	@ 0x52c
 8007f1e:	f507 731a 	add.w	r3, r7, #616	@ 0x268
 8007f22:	f5a3 7319 	sub.w	r3, r3, #612	@ 0x264
 8007f26:	681b      	ldr	r3, [r3, #0]
 8007f28:	f503 63ab 	add.w	r3, r3, #1368	@ 0x558
 8007f2c:	4619      	mov	r1, r3
 8007f2e:	4610      	mov	r0, r2
 8007f30:	f00f fcde 	bl	80178f0 <_ZN8touchgfx9Container3addERNS_8DrawableE>
    Button_Panel.add(Anomaly_Detection_Panel);
 8007f34:	f507 731a 	add.w	r3, r7, #616	@ 0x268
 8007f38:	f5a3 7319 	sub.w	r3, r3, #612	@ 0x264
 8007f3c:	681b      	ldr	r3, [r3, #0]
 8007f3e:	f103 0298 	add.w	r2, r3, #152	@ 0x98
 8007f42:	f507 731a 	add.w	r3, r7, #616	@ 0x268
 8007f46:	f5a3 7319 	sub.w	r3, r3, #612	@ 0x264
 8007f4a:	681b      	ldr	r3, [r3, #0]
 8007f4c:	f203 532c 	addw	r3, r3, #1324	@ 0x52c
 8007f50:	4619      	mov	r1, r3
 8007f52:	4610      	mov	r0, r2
 8007f54:	f00f fccc 	bl	80178f0 <_ZN8touchgfx9Container3addERNS_8DrawableE>

    Message_panel.setPosition(10, 8, 460, 109);
 8007f58:	f507 731a 	add.w	r3, r7, #616	@ 0x268
 8007f5c:	f5a3 7319 	sub.w	r3, r3, #612	@ 0x264
 8007f60:	681b      	ldr	r3, [r3, #0]
 8007f62:	f203 508c 	addw	r0, r3, #1420	@ 0x58c
 8007f66:	236d      	movs	r3, #109	@ 0x6d
 8007f68:	9300      	str	r3, [sp, #0]
 8007f6a:	f44f 73e6 	mov.w	r3, #460	@ 0x1cc
 8007f6e:	2208      	movs	r2, #8
 8007f70:	210a      	movs	r1, #10
 8007f72:	f7fb ff98 	bl	8003ea6 <_ZN8touchgfx8Drawable11setPositionEssss>

    Button_Panel_Background_1.setPosition(0, 0, 460, 109);
 8007f76:	f507 731a 	add.w	r3, r7, #616	@ 0x268
 8007f7a:	f5a3 7319 	sub.w	r3, r3, #612	@ 0x264
 8007f7e:	681b      	ldr	r3, [r3, #0]
 8007f80:	f503 60b7 	add.w	r0, r3, #1464	@ 0x5b8
 8007f84:	236d      	movs	r3, #109	@ 0x6d
 8007f86:	9300      	str	r3, [sp, #0]
 8007f88:	f44f 73e6 	mov.w	r3, #460	@ 0x1cc
 8007f8c:	2200      	movs	r2, #0
 8007f8e:	2100      	movs	r1, #0
 8007f90:	f7fb ff89 	bl	8003ea6 <_ZN8touchgfx8Drawable11setPositionEssss>
    Button_Panel_Background_1.setColor(touchgfx::Color::getColorFromRGB(78, 137, 174));
 8007f94:	f507 731a 	add.w	r3, r7, #616	@ 0x268
 8007f98:	f5a3 7319 	sub.w	r3, r3, #612	@ 0x264
 8007f9c:	681b      	ldr	r3, [r3, #0]
 8007f9e:	f503 64b7 	add.w	r4, r3, #1464	@ 0x5b8
 8007fa2:	234e      	movs	r3, #78	@ 0x4e
 8007fa4:	f887 31c1 	strb.w	r3, [r7, #449]	@ 0x1c1
 8007fa8:	2389      	movs	r3, #137	@ 0x89
 8007faa:	f887 31c0 	strb.w	r3, [r7, #448]	@ 0x1c0
 8007fae:	23ae      	movs	r3, #174	@ 0xae
 8007fb0:	f887 31bf 	strb.w	r3, [r7, #447]	@ 0x1bf
 8007fb4:	f897 31c1 	ldrb.w	r3, [r7, #449]	@ 0x1c1
 8007fb8:	041a      	lsls	r2, r3, #16
 8007fba:	f897 31c0 	ldrb.w	r3, [r7, #448]	@ 0x1c0
 8007fbe:	021b      	lsls	r3, r3, #8
 8007fc0:	431a      	orrs	r2, r3
 8007fc2:	f897 31bf 	ldrb.w	r3, [r7, #447]	@ 0x1bf
 8007fc6:	4313      	orrs	r3, r2
 8007fc8:	f043 427f 	orr.w	r2, r3, #4278190080	@ 0xff000000
 8007fcc:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8007fd0:	4611      	mov	r1, r2
 8007fd2:	4618      	mov	r0, r3
 8007fd4:	f7fd fbbd 	bl	8005752 <_ZN8touchgfx9colortypeC1Em>
 8007fd8:	f507 731a 	add.w	r3, r7, #616	@ 0x268
 8007fdc:	f5a3 739c 	sub.w	r3, r3, #312	@ 0x138
 8007fe0:	681b      	ldr	r3, [r3, #0]
 8007fe2:	4619      	mov	r1, r3
 8007fe4:	4620      	mov	r0, r4
 8007fe6:	f7fd fc85 	bl	80058f4 <_ZN8touchgfx3Box8setColorENS_9colortypeE>
    Button_Panel_Background_1.setBorderColor(touchgfx::Color::getColorFromRGB(237, 102, 99));
 8007fea:	f507 731a 	add.w	r3, r7, #616	@ 0x268
 8007fee:	f5a3 7319 	sub.w	r3, r3, #612	@ 0x264
 8007ff2:	681b      	ldr	r3, [r3, #0]
 8007ff4:	f503 64b7 	add.w	r4, r3, #1464	@ 0x5b8
 8007ff8:	23ed      	movs	r3, #237	@ 0xed
 8007ffa:	f887 31c4 	strb.w	r3, [r7, #452]	@ 0x1c4
 8007ffe:	2366      	movs	r3, #102	@ 0x66
 8008000:	f887 31c3 	strb.w	r3, [r7, #451]	@ 0x1c3
 8008004:	2363      	movs	r3, #99	@ 0x63
 8008006:	f887 31c2 	strb.w	r3, [r7, #450]	@ 0x1c2
 800800a:	f897 31c4 	ldrb.w	r3, [r7, #452]	@ 0x1c4
 800800e:	041a      	lsls	r2, r3, #16
 8008010:	f897 31c3 	ldrb.w	r3, [r7, #451]	@ 0x1c3
 8008014:	021b      	lsls	r3, r3, #8
 8008016:	431a      	orrs	r2, r3
 8008018:	f897 31c2 	ldrb.w	r3, [r7, #450]	@ 0x1c2
 800801c:	4313      	orrs	r3, r2
 800801e:	f043 427f 	orr.w	r2, r3, #4278190080	@ 0xff000000
 8008022:	f507 7396 	add.w	r3, r7, #300	@ 0x12c
 8008026:	4611      	mov	r1, r2
 8008028:	4618      	mov	r0, r3
 800802a:	f7fd fb92 	bl	8005752 <_ZN8touchgfx9colortypeC1Em>
 800802e:	f507 731a 	add.w	r3, r7, #616	@ 0x268
 8008032:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 8008036:	681b      	ldr	r3, [r3, #0]
 8008038:	4619      	mov	r1, r3
 800803a:	4620      	mov	r0, r4
 800803c:	f7fd fccc 	bl	80059d8 <_ZN8touchgfx13BoxWithBorder14setBorderColorENS_9colortypeE>
    Button_Panel_Background_1.setBorderSize(5);
 8008040:	f507 731a 	add.w	r3, r7, #616	@ 0x268
 8008044:	f5a3 7319 	sub.w	r3, r3, #612	@ 0x264
 8008048:	681b      	ldr	r3, [r3, #0]
 800804a:	f503 63b7 	add.w	r3, r3, #1464	@ 0x5b8
 800804e:	2105      	movs	r1, #5
 8008050:	4618      	mov	r0, r3
 8008052:	f7fd fccf 	bl	80059f4 <_ZN8touchgfx13BoxWithBorder13setBorderSizeEt>
    Message_panel.add(Button_Panel_Background_1);
 8008056:	f507 731a 	add.w	r3, r7, #616	@ 0x268
 800805a:	f5a3 7319 	sub.w	r3, r3, #612	@ 0x264
 800805e:	681b      	ldr	r3, [r3, #0]
 8008060:	f203 528c 	addw	r2, r3, #1420	@ 0x58c
 8008064:	f507 731a 	add.w	r3, r7, #616	@ 0x268
 8008068:	f5a3 7319 	sub.w	r3, r3, #612	@ 0x264
 800806c:	681b      	ldr	r3, [r3, #0]
 800806e:	f503 63b7 	add.w	r3, r3, #1464	@ 0x5b8
 8008072:	4619      	mov	r1, r3
 8008074:	4610      	mov	r0, r2
 8008076:	f00f fc3b 	bl	80178f0 <_ZN8touchgfx9Container3addERNS_8DrawableE>

    Message_Board_Panel_1.setPosition(5, 4, 450, 100);
 800807a:	f507 731a 	add.w	r3, r7, #616	@ 0x268
 800807e:	f5a3 7319 	sub.w	r3, r3, #612	@ 0x264
 8008082:	681b      	ldr	r3, [r3, #0]
 8008084:	f203 50ec 	addw	r0, r3, #1516	@ 0x5ec
 8008088:	2364      	movs	r3, #100	@ 0x64
 800808a:	9300      	str	r3, [sp, #0]
 800808c:	f44f 73e1 	mov.w	r3, #450	@ 0x1c2
 8008090:	2204      	movs	r2, #4
 8008092:	2105      	movs	r1, #5
 8008094:	f7fb ff07 	bl	8003ea6 <_ZN8touchgfx8Drawable11setPositionEssss>

    MessageBoard_Background_1.setPosition(0, 0, 450, 100);
 8008098:	f507 731a 	add.w	r3, r7, #616	@ 0x268
 800809c:	f5a3 7319 	sub.w	r3, r3, #612	@ 0x264
 80080a0:	681b      	ldr	r3, [r3, #0]
 80080a2:	f503 60c3 	add.w	r0, r3, #1560	@ 0x618
 80080a6:	2364      	movs	r3, #100	@ 0x64
 80080a8:	9300      	str	r3, [sp, #0]
 80080aa:	f44f 73e1 	mov.w	r3, #450	@ 0x1c2
 80080ae:	2200      	movs	r2, #0
 80080b0:	2100      	movs	r1, #0
 80080b2:	f7fb fef8 	bl	8003ea6 <_ZN8touchgfx8Drawable11setPositionEssss>
    MessageBoard_Background_1.setColor(touchgfx::Color::getColorFromRGB(67, 101, 139));
 80080b6:	f507 731a 	add.w	r3, r7, #616	@ 0x268
 80080ba:	f5a3 7319 	sub.w	r3, r3, #612	@ 0x264
 80080be:	681b      	ldr	r3, [r3, #0]
 80080c0:	f503 64c3 	add.w	r4, r3, #1560	@ 0x618
 80080c4:	2343      	movs	r3, #67	@ 0x43
 80080c6:	f887 31c7 	strb.w	r3, [r7, #455]	@ 0x1c7
 80080ca:	2365      	movs	r3, #101	@ 0x65
 80080cc:	f887 31c6 	strb.w	r3, [r7, #454]	@ 0x1c6
 80080d0:	238b      	movs	r3, #139	@ 0x8b
 80080d2:	f887 31c5 	strb.w	r3, [r7, #453]	@ 0x1c5
 80080d6:	f897 31c7 	ldrb.w	r3, [r7, #455]	@ 0x1c7
 80080da:	041a      	lsls	r2, r3, #16
 80080dc:	f897 31c6 	ldrb.w	r3, [r7, #454]	@ 0x1c6
 80080e0:	021b      	lsls	r3, r3, #8
 80080e2:	431a      	orrs	r2, r3
 80080e4:	f897 31c5 	ldrb.w	r3, [r7, #453]	@ 0x1c5
 80080e8:	4313      	orrs	r3, r2
 80080ea:	f043 427f 	orr.w	r2, r3, #4278190080	@ 0xff000000
 80080ee:	f507 7394 	add.w	r3, r7, #296	@ 0x128
 80080f2:	4611      	mov	r1, r2
 80080f4:	4618      	mov	r0, r3
 80080f6:	f7fd fb2c 	bl	8005752 <_ZN8touchgfx9colortypeC1Em>
 80080fa:	f507 731a 	add.w	r3, r7, #616	@ 0x268
 80080fe:	f5a3 73a0 	sub.w	r3, r3, #320	@ 0x140
 8008102:	681b      	ldr	r3, [r3, #0]
 8008104:	4619      	mov	r1, r3
 8008106:	4620      	mov	r0, r4
 8008108:	f7fd fbf4 	bl	80058f4 <_ZN8touchgfx3Box8setColorENS_9colortypeE>
    MessageBoard_Background_1.setBorderColor(touchgfx::Color::getColorFromRGB(0, 0, 0));
 800810c:	f507 731a 	add.w	r3, r7, #616	@ 0x268
 8008110:	f5a3 7319 	sub.w	r3, r3, #612	@ 0x264
 8008114:	681b      	ldr	r3, [r3, #0]
 8008116:	f503 64c3 	add.w	r4, r3, #1560	@ 0x618
 800811a:	2300      	movs	r3, #0
 800811c:	f887 31ca 	strb.w	r3, [r7, #458]	@ 0x1ca
 8008120:	2300      	movs	r3, #0
 8008122:	f887 31c9 	strb.w	r3, [r7, #457]	@ 0x1c9
 8008126:	2300      	movs	r3, #0
 8008128:	f887 31c8 	strb.w	r3, [r7, #456]	@ 0x1c8
 800812c:	f897 31ca 	ldrb.w	r3, [r7, #458]	@ 0x1ca
 8008130:	041a      	lsls	r2, r3, #16
 8008132:	f897 31c9 	ldrb.w	r3, [r7, #457]	@ 0x1c9
 8008136:	021b      	lsls	r3, r3, #8
 8008138:	431a      	orrs	r2, r3
 800813a:	f897 31c8 	ldrb.w	r3, [r7, #456]	@ 0x1c8
 800813e:	4313      	orrs	r3, r2
 8008140:	f043 427f 	orr.w	r2, r3, #4278190080	@ 0xff000000
 8008144:	f507 7392 	add.w	r3, r7, #292	@ 0x124
 8008148:	4611      	mov	r1, r2
 800814a:	4618      	mov	r0, r3
 800814c:	f7fd fb01 	bl	8005752 <_ZN8touchgfx9colortypeC1Em>
 8008150:	f507 731a 	add.w	r3, r7, #616	@ 0x268
 8008154:	f5a3 73a2 	sub.w	r3, r3, #324	@ 0x144
 8008158:	681b      	ldr	r3, [r3, #0]
 800815a:	4619      	mov	r1, r3
 800815c:	4620      	mov	r0, r4
 800815e:	f7fd fc3b 	bl	80059d8 <_ZN8touchgfx13BoxWithBorder14setBorderColorENS_9colortypeE>
    MessageBoard_Background_1.setBorderSize(2);
 8008162:	f507 731a 	add.w	r3, r7, #616	@ 0x268
 8008166:	f5a3 7319 	sub.w	r3, r3, #612	@ 0x264
 800816a:	681b      	ldr	r3, [r3, #0]
 800816c:	f503 63c3 	add.w	r3, r3, #1560	@ 0x618
 8008170:	2102      	movs	r1, #2
 8008172:	4618      	mov	r0, r3
 8008174:	f7fd fc3e 	bl	80059f4 <_ZN8touchgfx13BoxWithBorder13setBorderSizeEt>
    Message_Board_Panel_1.add(MessageBoard_Background_1);
 8008178:	f507 731a 	add.w	r3, r7, #616	@ 0x268
 800817c:	f5a3 7319 	sub.w	r3, r3, #612	@ 0x264
 8008180:	681b      	ldr	r3, [r3, #0]
 8008182:	f203 52ec 	addw	r2, r3, #1516	@ 0x5ec
 8008186:	f507 731a 	add.w	r3, r7, #616	@ 0x268
 800818a:	f5a3 7319 	sub.w	r3, r3, #612	@ 0x264
 800818e:	681b      	ldr	r3, [r3, #0]
 8008190:	f503 63c3 	add.w	r3, r3, #1560	@ 0x618
 8008194:	4619      	mov	r1, r3
 8008196:	4610      	mov	r0, r2
 8008198:	f00f fbaa 	bl	80178f0 <_ZN8touchgfx9Container3addERNS_8DrawableE>

    Message_Board_Textbox_1.setPosition(176, 0, 99, 20);
 800819c:	f507 731a 	add.w	r3, r7, #616	@ 0x268
 80081a0:	f5a3 7319 	sub.w	r3, r3, #612	@ 0x264
 80081a4:	681b      	ldr	r3, [r3, #0]
 80081a6:	f203 604c 	addw	r0, r3, #1612	@ 0x64c
 80081aa:	2314      	movs	r3, #20
 80081ac:	9300      	str	r3, [sp, #0]
 80081ae:	2363      	movs	r3, #99	@ 0x63
 80081b0:	2200      	movs	r2, #0
 80081b2:	21b0      	movs	r1, #176	@ 0xb0
 80081b4:	f7fb fe77 	bl	8003ea6 <_ZN8touchgfx8Drawable11setPositionEssss>

    MessageBoard_Border_1_1.setPosition(0, 3, 99, 17);
 80081b8:	f507 731a 	add.w	r3, r7, #616	@ 0x268
 80081bc:	f5a3 7319 	sub.w	r3, r3, #612	@ 0x264
 80081c0:	681b      	ldr	r3, [r3, #0]
 80081c2:	f503 60cf 	add.w	r0, r3, #1656	@ 0x678
 80081c6:	2311      	movs	r3, #17
 80081c8:	9300      	str	r3, [sp, #0]
 80081ca:	2363      	movs	r3, #99	@ 0x63
 80081cc:	2203      	movs	r2, #3
 80081ce:	2100      	movs	r1, #0
 80081d0:	f7fb fe69 	bl	8003ea6 <_ZN8touchgfx8Drawable11setPositionEssss>
    MessageBoard_Border_1_1.setColor(touchgfx::Color::getColorFromRGB(0, 0, 0));
 80081d4:	f507 731a 	add.w	r3, r7, #616	@ 0x268
 80081d8:	f5a3 7319 	sub.w	r3, r3, #612	@ 0x264
 80081dc:	681b      	ldr	r3, [r3, #0]
 80081de:	f503 64cf 	add.w	r4, r3, #1656	@ 0x678
 80081e2:	2300      	movs	r3, #0
 80081e4:	f887 31cd 	strb.w	r3, [r7, #461]	@ 0x1cd
 80081e8:	2300      	movs	r3, #0
 80081ea:	f887 31cc 	strb.w	r3, [r7, #460]	@ 0x1cc
 80081ee:	2300      	movs	r3, #0
 80081f0:	f887 31cb 	strb.w	r3, [r7, #459]	@ 0x1cb
 80081f4:	f897 31cd 	ldrb.w	r3, [r7, #461]	@ 0x1cd
 80081f8:	041a      	lsls	r2, r3, #16
 80081fa:	f897 31cc 	ldrb.w	r3, [r7, #460]	@ 0x1cc
 80081fe:	021b      	lsls	r3, r3, #8
 8008200:	431a      	orrs	r2, r3
 8008202:	f897 31cb 	ldrb.w	r3, [r7, #459]	@ 0x1cb
 8008206:	4313      	orrs	r3, r2
 8008208:	f043 427f 	orr.w	r2, r3, #4278190080	@ 0xff000000
 800820c:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 8008210:	4611      	mov	r1, r2
 8008212:	4618      	mov	r0, r3
 8008214:	f7fd fa9d 	bl	8005752 <_ZN8touchgfx9colortypeC1Em>
 8008218:	f507 731a 	add.w	r3, r7, #616	@ 0x268
 800821c:	f5a3 73a4 	sub.w	r3, r3, #328	@ 0x148
 8008220:	681b      	ldr	r3, [r3, #0]
 8008222:	4619      	mov	r1, r3
 8008224:	4620      	mov	r0, r4
 8008226:	f7fd fb65 	bl	80058f4 <_ZN8touchgfx3Box8setColorENS_9colortypeE>
    MessageBoard_Border_1_1.setBorderColor(touchgfx::Color::getColorFromRGB(237, 102, 99));
 800822a:	f507 731a 	add.w	r3, r7, #616	@ 0x268
 800822e:	f5a3 7319 	sub.w	r3, r3, #612	@ 0x264
 8008232:	681b      	ldr	r3, [r3, #0]
 8008234:	f503 64cf 	add.w	r4, r3, #1656	@ 0x678
 8008238:	23ed      	movs	r3, #237	@ 0xed
 800823a:	f887 31d0 	strb.w	r3, [r7, #464]	@ 0x1d0
 800823e:	2366      	movs	r3, #102	@ 0x66
 8008240:	f887 31cf 	strb.w	r3, [r7, #463]	@ 0x1cf
 8008244:	2363      	movs	r3, #99	@ 0x63
 8008246:	f887 31ce 	strb.w	r3, [r7, #462]	@ 0x1ce
 800824a:	f897 31d0 	ldrb.w	r3, [r7, #464]	@ 0x1d0
 800824e:	041a      	lsls	r2, r3, #16
 8008250:	f897 31cf 	ldrb.w	r3, [r7, #463]	@ 0x1cf
 8008254:	021b      	lsls	r3, r3, #8
 8008256:	431a      	orrs	r2, r3
 8008258:	f897 31ce 	ldrb.w	r3, [r7, #462]	@ 0x1ce
 800825c:	4313      	orrs	r3, r2
 800825e:	f043 427f 	orr.w	r2, r3, #4278190080	@ 0xff000000
 8008262:	f507 738e 	add.w	r3, r7, #284	@ 0x11c
 8008266:	4611      	mov	r1, r2
 8008268:	4618      	mov	r0, r3
 800826a:	f7fd fa72 	bl	8005752 <_ZN8touchgfx9colortypeC1Em>
 800826e:	f507 731a 	add.w	r3, r7, #616	@ 0x268
 8008272:	f5a3 73a6 	sub.w	r3, r3, #332	@ 0x14c
 8008276:	681b      	ldr	r3, [r3, #0]
 8008278:	4619      	mov	r1, r3
 800827a:	4620      	mov	r0, r4
 800827c:	f7fd fbac 	bl	80059d8 <_ZN8touchgfx13BoxWithBorder14setBorderColorENS_9colortypeE>
    MessageBoard_Border_1_1.setBorderSize(3);
 8008280:	f507 731a 	add.w	r3, r7, #616	@ 0x268
 8008284:	f5a3 7319 	sub.w	r3, r3, #612	@ 0x264
 8008288:	681b      	ldr	r3, [r3, #0]
 800828a:	f503 63cf 	add.w	r3, r3, #1656	@ 0x678
 800828e:	2103      	movs	r1, #3
 8008290:	4618      	mov	r0, r3
 8008292:	f7fd fbaf 	bl	80059f4 <_ZN8touchgfx13BoxWithBorder13setBorderSizeEt>
    Message_Board_Textbox_1.add(MessageBoard_Border_1_1);
 8008296:	f507 731a 	add.w	r3, r7, #616	@ 0x268
 800829a:	f5a3 7319 	sub.w	r3, r3, #612	@ 0x264
 800829e:	681b      	ldr	r3, [r3, #0]
 80082a0:	f203 624c 	addw	r2, r3, #1612	@ 0x64c
 80082a4:	f507 731a 	add.w	r3, r7, #616	@ 0x268
 80082a8:	f5a3 7319 	sub.w	r3, r3, #612	@ 0x264
 80082ac:	681b      	ldr	r3, [r3, #0]
 80082ae:	f503 63cf 	add.w	r3, r3, #1656	@ 0x678
 80082b2:	4619      	mov	r1, r3
 80082b4:	4610      	mov	r0, r2
 80082b6:	f00f fb1b 	bl	80178f0 <_ZN8touchgfx9Container3addERNS_8DrawableE>

    MessageBoard_Text_1.setXY(7, 5);
 80082ba:	f507 731a 	add.w	r3, r7, #616	@ 0x268
 80082be:	f5a3 7319 	sub.w	r3, r3, #612	@ 0x264
 80082c2:	681b      	ldr	r3, [r3, #0]
 80082c4:	f203 63ac 	addw	r3, r3, #1708	@ 0x6ac
 80082c8:	2205      	movs	r2, #5
 80082ca:	2107      	movs	r1, #7
 80082cc:	4618      	mov	r0, r3
 80082ce:	f7fb fe43 	bl	8003f58 <_ZN8touchgfx8Drawable5setXYEss>
    MessageBoard_Text_1.setColor(touchgfx::Color::getColorFromRGB(255, 255, 255));
 80082d2:	f507 731a 	add.w	r3, r7, #616	@ 0x268
 80082d6:	f5a3 7319 	sub.w	r3, r3, #612	@ 0x264
 80082da:	681b      	ldr	r3, [r3, #0]
 80082dc:	f203 64ac 	addw	r4, r3, #1708	@ 0x6ac
 80082e0:	23ff      	movs	r3, #255	@ 0xff
 80082e2:	f887 31d3 	strb.w	r3, [r7, #467]	@ 0x1d3
 80082e6:	23ff      	movs	r3, #255	@ 0xff
 80082e8:	f887 31d2 	strb.w	r3, [r7, #466]	@ 0x1d2
 80082ec:	23ff      	movs	r3, #255	@ 0xff
 80082ee:	f887 31d1 	strb.w	r3, [r7, #465]	@ 0x1d1
 80082f2:	f897 31d3 	ldrb.w	r3, [r7, #467]	@ 0x1d3
 80082f6:	041a      	lsls	r2, r3, #16
 80082f8:	f897 31d2 	ldrb.w	r3, [r7, #466]	@ 0x1d2
 80082fc:	021b      	lsls	r3, r3, #8
 80082fe:	431a      	orrs	r2, r3
 8008300:	f897 31d1 	ldrb.w	r3, [r7, #465]	@ 0x1d1
 8008304:	4313      	orrs	r3, r2
 8008306:	f043 427f 	orr.w	r2, r3, #4278190080	@ 0xff000000
 800830a:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 800830e:	4611      	mov	r1, r2
 8008310:	4618      	mov	r0, r3
 8008312:	f7fd fa1e 	bl	8005752 <_ZN8touchgfx9colortypeC1Em>
 8008316:	f507 731a 	add.w	r3, r7, #616	@ 0x268
 800831a:	f5a3 73a8 	sub.w	r3, r3, #336	@ 0x150
 800831e:	681b      	ldr	r3, [r3, #0]
 8008320:	461a      	mov	r2, r3
 8008322:	f8c7 41d4 	str.w	r4, [r7, #468]	@ 0x1d4
 8008326:	f507 731a 	add.w	r3, r7, #616	@ 0x268
 800832a:	f5a3 7311 	sub.w	r3, r3, #580	@ 0x244
 800832e:	601a      	str	r2, [r3, #0]
        this->color = color;
 8008330:	f8d7 31d4 	ldr.w	r3, [r7, #468]	@ 0x1d4
 8008334:	f507 721a 	add.w	r2, r7, #616	@ 0x268
 8008338:	f5a2 7211 	sub.w	r2, r2, #580	@ 0x244
 800833c:	6812      	ldr	r2, [r2, #0]
 800833e:	631a      	str	r2, [r3, #48]	@ 0x30
    }
 8008340:	bf00      	nop
    MessageBoard_Text_1.setLinespacing(0);
 8008342:	f507 731a 	add.w	r3, r7, #616	@ 0x268
 8008346:	f5a3 7319 	sub.w	r3, r3, #612	@ 0x264
 800834a:	681b      	ldr	r3, [r3, #0]
 800834c:	f203 63ac 	addw	r3, r3, #1708	@ 0x6ac
 8008350:	f8c7 31dc 	str.w	r3, [r7, #476]	@ 0x1dc
 8008354:	2300      	movs	r3, #0
 8008356:	f8a7 31da 	strh.w	r3, [r7, #474]	@ 0x1da
        linespace = space;
 800835a:	f8d7 31dc 	ldr.w	r3, [r7, #476]	@ 0x1dc
 800835e:	f8b7 21da 	ldrh.w	r2, [r7, #474]	@ 0x1da
 8008362:	869a      	strh	r2, [r3, #52]	@ 0x34
    }
 8008364:	bf00      	nop
    MessageBoard_Text_1.setTypedText(touchgfx::TypedText(T___SINGLEUSE_0Y28));
 8008366:	f507 731a 	add.w	r3, r7, #616	@ 0x268
 800836a:	f5a3 7319 	sub.w	r3, r3, #612	@ 0x264
 800836e:	681b      	ldr	r3, [r3, #0]
 8008370:	f203 64ac 	addw	r4, r3, #1708	@ 0x6ac
 8008374:	f107 0380 	add.w	r3, r7, #128	@ 0x80
 8008378:	2102      	movs	r1, #2
 800837a:	4618      	mov	r0, r3
 800837c:	f7fd fb4a 	bl	8005a14 <_ZN8touchgfx9TypedTextC1Et>
 8008380:	f107 0380 	add.w	r3, r7, #128	@ 0x80
 8008384:	4619      	mov	r1, r3
 8008386:	4620      	mov	r0, r4
 8008388:	f011 f9dd 	bl	8019746 <_ZN8touchgfx8TextArea12setTypedTextERKNS_9TypedTextE>
 800838c:	f107 0380 	add.w	r3, r7, #128	@ 0x80
 8008390:	4618      	mov	r0, r3
 8008392:	f7fb fcd5 	bl	8003d40 <_ZN8touchgfx9TypedTextD1Ev>
    Message_Board_Textbox_1.add(MessageBoard_Text_1);
 8008396:	f507 731a 	add.w	r3, r7, #616	@ 0x268
 800839a:	f5a3 7319 	sub.w	r3, r3, #612	@ 0x264
 800839e:	681b      	ldr	r3, [r3, #0]
 80083a0:	f203 624c 	addw	r2, r3, #1612	@ 0x64c
 80083a4:	f507 731a 	add.w	r3, r7, #616	@ 0x268
 80083a8:	f5a3 7319 	sub.w	r3, r3, #612	@ 0x264
 80083ac:	681b      	ldr	r3, [r3, #0]
 80083ae:	f203 63ac 	addw	r3, r3, #1708	@ 0x6ac
 80083b2:	4619      	mov	r1, r3
 80083b4:	4610      	mov	r0, r2
 80083b6:	f00f fa9b 	bl	80178f0 <_ZN8touchgfx9Container3addERNS_8DrawableE>
    Message_Board_Panel_1.add(Message_Board_Textbox_1);
 80083ba:	f507 731a 	add.w	r3, r7, #616	@ 0x268
 80083be:	f5a3 7319 	sub.w	r3, r3, #612	@ 0x264
 80083c2:	681b      	ldr	r3, [r3, #0]
 80083c4:	f203 52ec 	addw	r2, r3, #1516	@ 0x5ec
 80083c8:	f507 731a 	add.w	r3, r7, #616	@ 0x268
 80083cc:	f5a3 7319 	sub.w	r3, r3, #612	@ 0x264
 80083d0:	681b      	ldr	r3, [r3, #0]
 80083d2:	f203 634c 	addw	r3, r3, #1612	@ 0x64c
 80083d6:	4619      	mov	r1, r3
 80083d8:	4610      	mov	r0, r2
 80083da:	f00f fa89 	bl	80178f0 <_ZN8touchgfx9Container3addERNS_8DrawableE>

    VoiceComm_Textbox_1.setPosition(294, 0, 114, 98);
 80083de:	f507 731a 	add.w	r3, r7, #616	@ 0x268
 80083e2:	f5a3 7319 	sub.w	r3, r3, #612	@ 0x264
 80083e6:	681b      	ldr	r3, [r3, #0]
 80083e8:	f503 60dd 	add.w	r0, r3, #1768	@ 0x6e8
 80083ec:	2362      	movs	r3, #98	@ 0x62
 80083ee:	9300      	str	r3, [sp, #0]
 80083f0:	2372      	movs	r3, #114	@ 0x72
 80083f2:	2200      	movs	r2, #0
 80083f4:	f44f 7193 	mov.w	r1, #294	@ 0x126
 80083f8:	f7fb fd55 	bl	8003ea6 <_ZN8touchgfx8Drawable11setPositionEssss>

    VoiceCommMess_Background.setPosition(2, 2, 112, 96);
 80083fc:	f507 731a 	add.w	r3, r7, #616	@ 0x268
 8008400:	f5a3 7319 	sub.w	r3, r3, #612	@ 0x264
 8008404:	681b      	ldr	r3, [r3, #0]
 8008406:	f203 7014 	addw	r0, r3, #1812	@ 0x714
 800840a:	2360      	movs	r3, #96	@ 0x60
 800840c:	9300      	str	r3, [sp, #0]
 800840e:	2370      	movs	r3, #112	@ 0x70
 8008410:	2202      	movs	r2, #2
 8008412:	2102      	movs	r1, #2
 8008414:	f7fb fd47 	bl	8003ea6 <_ZN8touchgfx8Drawable11setPositionEssss>
    VoiceCommMess_Background.setColor(touchgfx::Color::getColorFromRGB(237, 102, 99));
 8008418:	f507 731a 	add.w	r3, r7, #616	@ 0x268
 800841c:	f5a3 7319 	sub.w	r3, r3, #612	@ 0x264
 8008420:	681b      	ldr	r3, [r3, #0]
 8008422:	f203 7414 	addw	r4, r3, #1812	@ 0x714
 8008426:	23ed      	movs	r3, #237	@ 0xed
 8008428:	f887 31e3 	strb.w	r3, [r7, #483]	@ 0x1e3
 800842c:	2366      	movs	r3, #102	@ 0x66
 800842e:	f887 31e2 	strb.w	r3, [r7, #482]	@ 0x1e2
 8008432:	2363      	movs	r3, #99	@ 0x63
 8008434:	f887 31e1 	strb.w	r3, [r7, #481]	@ 0x1e1
 8008438:	f897 31e3 	ldrb.w	r3, [r7, #483]	@ 0x1e3
 800843c:	041a      	lsls	r2, r3, #16
 800843e:	f897 31e2 	ldrb.w	r3, [r7, #482]	@ 0x1e2
 8008442:	021b      	lsls	r3, r3, #8
 8008444:	431a      	orrs	r2, r3
 8008446:	f897 31e1 	ldrb.w	r3, [r7, #481]	@ 0x1e1
 800844a:	4313      	orrs	r3, r2
 800844c:	f043 427f 	orr.w	r2, r3, #4278190080	@ 0xff000000
 8008450:	f507 738a 	add.w	r3, r7, #276	@ 0x114
 8008454:	4611      	mov	r1, r2
 8008456:	4618      	mov	r0, r3
 8008458:	f7fd f97b 	bl	8005752 <_ZN8touchgfx9colortypeC1Em>
 800845c:	f507 731a 	add.w	r3, r7, #616	@ 0x268
 8008460:	f5a3 73aa 	sub.w	r3, r3, #340	@ 0x154
 8008464:	681b      	ldr	r3, [r3, #0]
 8008466:	4619      	mov	r1, r3
 8008468:	4620      	mov	r0, r4
 800846a:	f7fd fa43 	bl	80058f4 <_ZN8touchgfx3Box8setColorENS_9colortypeE>
    VoiceCommMess_Background.setBorderColor(touchgfx::Color::getColorFromRGB(0, 0, 0));
 800846e:	f507 731a 	add.w	r3, r7, #616	@ 0x268
 8008472:	f5a3 7319 	sub.w	r3, r3, #612	@ 0x264
 8008476:	681b      	ldr	r3, [r3, #0]
 8008478:	f203 7414 	addw	r4, r3, #1812	@ 0x714
 800847c:	2300      	movs	r3, #0
 800847e:	f887 31e6 	strb.w	r3, [r7, #486]	@ 0x1e6
 8008482:	2300      	movs	r3, #0
 8008484:	f887 31e5 	strb.w	r3, [r7, #485]	@ 0x1e5
 8008488:	2300      	movs	r3, #0
 800848a:	f887 31e4 	strb.w	r3, [r7, #484]	@ 0x1e4
 800848e:	f897 31e6 	ldrb.w	r3, [r7, #486]	@ 0x1e6
 8008492:	041a      	lsls	r2, r3, #16
 8008494:	f897 31e5 	ldrb.w	r3, [r7, #485]	@ 0x1e5
 8008498:	021b      	lsls	r3, r3, #8
 800849a:	431a      	orrs	r2, r3
 800849c:	f897 31e4 	ldrb.w	r3, [r7, #484]	@ 0x1e4
 80084a0:	4313      	orrs	r3, r2
 80084a2:	f043 427f 	orr.w	r2, r3, #4278190080	@ 0xff000000
 80084a6:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 80084aa:	4611      	mov	r1, r2
 80084ac:	4618      	mov	r0, r3
 80084ae:	f7fd f950 	bl	8005752 <_ZN8touchgfx9colortypeC1Em>
 80084b2:	f507 731a 	add.w	r3, r7, #616	@ 0x268
 80084b6:	f5a3 73ac 	sub.w	r3, r3, #344	@ 0x158
 80084ba:	681b      	ldr	r3, [r3, #0]
 80084bc:	4619      	mov	r1, r3
 80084be:	4620      	mov	r0, r4
 80084c0:	f7fd fa8a 	bl	80059d8 <_ZN8touchgfx13BoxWithBorder14setBorderColorENS_9colortypeE>
    VoiceCommMess_Background.setBorderSize(3);
 80084c4:	f507 731a 	add.w	r3, r7, #616	@ 0x268
 80084c8:	f5a3 7319 	sub.w	r3, r3, #612	@ 0x264
 80084cc:	681b      	ldr	r3, [r3, #0]
 80084ce:	f203 7314 	addw	r3, r3, #1812	@ 0x714
 80084d2:	2103      	movs	r1, #3
 80084d4:	4618      	mov	r0, r3
 80084d6:	f7fd fa8d 	bl	80059f4 <_ZN8touchgfx13BoxWithBorder13setBorderSizeEt>
    VoiceComm_Textbox_1.add(VoiceCommMess_Background);
 80084da:	f507 731a 	add.w	r3, r7, #616	@ 0x268
 80084de:	f5a3 7319 	sub.w	r3, r3, #612	@ 0x264
 80084e2:	681b      	ldr	r3, [r3, #0]
 80084e4:	f503 62dd 	add.w	r2, r3, #1768	@ 0x6e8
 80084e8:	f507 731a 	add.w	r3, r7, #616	@ 0x268
 80084ec:	f5a3 7319 	sub.w	r3, r3, #612	@ 0x264
 80084f0:	681b      	ldr	r3, [r3, #0]
 80084f2:	f203 7314 	addw	r3, r3, #1812	@ 0x714
 80084f6:	4619      	mov	r1, r3
 80084f8:	4610      	mov	r0, r2
 80084fa:	f00f f9f9 	bl	80178f0 <_ZN8touchgfx9Container3addERNS_8DrawableE>

    VoiceCommMess_Background2.setPosition(16, 10, 84, 80);
 80084fe:	f507 731a 	add.w	r3, r7, #616	@ 0x268
 8008502:	f5a3 7319 	sub.w	r3, r3, #612	@ 0x264
 8008506:	681b      	ldr	r3, [r3, #0]
 8008508:	f503 60e9 	add.w	r0, r3, #1864	@ 0x748
 800850c:	2350      	movs	r3, #80	@ 0x50
 800850e:	9300      	str	r3, [sp, #0]
 8008510:	2354      	movs	r3, #84	@ 0x54
 8008512:	220a      	movs	r2, #10
 8008514:	2110      	movs	r1, #16
 8008516:	f7fb fcc6 	bl	8003ea6 <_ZN8touchgfx8Drawable11setPositionEssss>
    VoiceCommMess_Background2.setColor(touchgfx::Color::getColorFromRGB(0, 0, 0));
 800851a:	f507 731a 	add.w	r3, r7, #616	@ 0x268
 800851e:	f5a3 7319 	sub.w	r3, r3, #612	@ 0x264
 8008522:	681b      	ldr	r3, [r3, #0]
 8008524:	f503 64e9 	add.w	r4, r3, #1864	@ 0x748
 8008528:	2300      	movs	r3, #0
 800852a:	f887 31e9 	strb.w	r3, [r7, #489]	@ 0x1e9
 800852e:	2300      	movs	r3, #0
 8008530:	f887 31e8 	strb.w	r3, [r7, #488]	@ 0x1e8
 8008534:	2300      	movs	r3, #0
 8008536:	f887 31e7 	strb.w	r3, [r7, #487]	@ 0x1e7
 800853a:	f897 31e9 	ldrb.w	r3, [r7, #489]	@ 0x1e9
 800853e:	041a      	lsls	r2, r3, #16
 8008540:	f897 31e8 	ldrb.w	r3, [r7, #488]	@ 0x1e8
 8008544:	021b      	lsls	r3, r3, #8
 8008546:	431a      	orrs	r2, r3
 8008548:	f897 31e7 	ldrb.w	r3, [r7, #487]	@ 0x1e7
 800854c:	4313      	orrs	r3, r2
 800854e:	f043 427f 	orr.w	r2, r3, #4278190080	@ 0xff000000
 8008552:	f507 7386 	add.w	r3, r7, #268	@ 0x10c
 8008556:	4611      	mov	r1, r2
 8008558:	4618      	mov	r0, r3
 800855a:	f7fd f8fa 	bl	8005752 <_ZN8touchgfx9colortypeC1Em>
 800855e:	f507 731a 	add.w	r3, r7, #616	@ 0x268
 8008562:	f5a3 73ae 	sub.w	r3, r3, #348	@ 0x15c
 8008566:	681b      	ldr	r3, [r3, #0]
 8008568:	4619      	mov	r1, r3
 800856a:	4620      	mov	r0, r4
 800856c:	f7fd f9c2 	bl	80058f4 <_ZN8touchgfx3Box8setColorENS_9colortypeE>
    VoiceCommMess_Background2.setBorderColor(touchgfx::Color::getColorFromRGB(67, 101, 139));
 8008570:	f507 731a 	add.w	r3, r7, #616	@ 0x268
 8008574:	f5a3 7319 	sub.w	r3, r3, #612	@ 0x264
 8008578:	681b      	ldr	r3, [r3, #0]
 800857a:	f503 64e9 	add.w	r4, r3, #1864	@ 0x748
 800857e:	2343      	movs	r3, #67	@ 0x43
 8008580:	f887 31ec 	strb.w	r3, [r7, #492]	@ 0x1ec
 8008584:	2365      	movs	r3, #101	@ 0x65
 8008586:	f887 31eb 	strb.w	r3, [r7, #491]	@ 0x1eb
 800858a:	238b      	movs	r3, #139	@ 0x8b
 800858c:	f887 31ea 	strb.w	r3, [r7, #490]	@ 0x1ea
 8008590:	f897 31ec 	ldrb.w	r3, [r7, #492]	@ 0x1ec
 8008594:	041a      	lsls	r2, r3, #16
 8008596:	f897 31eb 	ldrb.w	r3, [r7, #491]	@ 0x1eb
 800859a:	021b      	lsls	r3, r3, #8
 800859c:	431a      	orrs	r2, r3
 800859e:	f897 31ea 	ldrb.w	r3, [r7, #490]	@ 0x1ea
 80085a2:	4313      	orrs	r3, r2
 80085a4:	f043 427f 	orr.w	r2, r3, #4278190080	@ 0xff000000
 80085a8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80085ac:	4611      	mov	r1, r2
 80085ae:	4618      	mov	r0, r3
 80085b0:	f7fd f8cf 	bl	8005752 <_ZN8touchgfx9colortypeC1Em>
 80085b4:	f507 731a 	add.w	r3, r7, #616	@ 0x268
 80085b8:	f5a3 73b0 	sub.w	r3, r3, #352	@ 0x160
 80085bc:	681b      	ldr	r3, [r3, #0]
 80085be:	4619      	mov	r1, r3
 80085c0:	4620      	mov	r0, r4
 80085c2:	f7fd fa09 	bl	80059d8 <_ZN8touchgfx13BoxWithBorder14setBorderColorENS_9colortypeE>
    VoiceCommMess_Background2.setBorderSize(3);
 80085c6:	f507 731a 	add.w	r3, r7, #616	@ 0x268
 80085ca:	f5a3 7319 	sub.w	r3, r3, #612	@ 0x264
 80085ce:	681b      	ldr	r3, [r3, #0]
 80085d0:	f503 63e9 	add.w	r3, r3, #1864	@ 0x748
 80085d4:	2103      	movs	r1, #3
 80085d6:	4618      	mov	r0, r3
 80085d8:	f7fd fa0c 	bl	80059f4 <_ZN8touchgfx13BoxWithBorder13setBorderSizeEt>
    VoiceComm_Textbox_1.add(VoiceCommMess_Background2);
 80085dc:	f507 731a 	add.w	r3, r7, #616	@ 0x268
 80085e0:	f5a3 7319 	sub.w	r3, r3, #612	@ 0x264
 80085e4:	681b      	ldr	r3, [r3, #0]
 80085e6:	f503 62dd 	add.w	r2, r3, #1768	@ 0x6e8
 80085ea:	f507 731a 	add.w	r3, r7, #616	@ 0x268
 80085ee:	f5a3 7319 	sub.w	r3, r3, #612	@ 0x264
 80085f2:	681b      	ldr	r3, [r3, #0]
 80085f4:	f503 63e9 	add.w	r3, r3, #1864	@ 0x748
 80085f8:	4619      	mov	r1, r3
 80085fa:	4610      	mov	r0, r2
 80085fc:	f00f f978 	bl	80178f0 <_ZN8touchgfx9Container3addERNS_8DrawableE>

    VoiceCommMess_Text_On.setXY(36, 13);
 8008600:	f507 731a 	add.w	r3, r7, #616	@ 0x268
 8008604:	f5a3 7319 	sub.w	r3, r3, #612	@ 0x264
 8008608:	681b      	ldr	r3, [r3, #0]
 800860a:	f203 737c 	addw	r3, r3, #1916	@ 0x77c
 800860e:	220d      	movs	r2, #13
 8008610:	2124      	movs	r1, #36	@ 0x24
 8008612:	4618      	mov	r0, r3
 8008614:	f7fb fca0 	bl	8003f58 <_ZN8touchgfx8Drawable5setXYEss>
    VoiceCommMess_Text_On.setColor(touchgfx::Color::getColorFromRGB(255, 255, 255));
 8008618:	f507 731a 	add.w	r3, r7, #616	@ 0x268
 800861c:	f5a3 7319 	sub.w	r3, r3, #612	@ 0x264
 8008620:	681b      	ldr	r3, [r3, #0]
 8008622:	f203 747c 	addw	r4, r3, #1916	@ 0x77c
 8008626:	23ff      	movs	r3, #255	@ 0xff
 8008628:	f887 31ef 	strb.w	r3, [r7, #495]	@ 0x1ef
 800862c:	23ff      	movs	r3, #255	@ 0xff
 800862e:	f887 31ee 	strb.w	r3, [r7, #494]	@ 0x1ee
 8008632:	23ff      	movs	r3, #255	@ 0xff
 8008634:	f887 31ed 	strb.w	r3, [r7, #493]	@ 0x1ed
 8008638:	f897 31ef 	ldrb.w	r3, [r7, #495]	@ 0x1ef
 800863c:	041a      	lsls	r2, r3, #16
 800863e:	f897 31ee 	ldrb.w	r3, [r7, #494]	@ 0x1ee
 8008642:	021b      	lsls	r3, r3, #8
 8008644:	431a      	orrs	r2, r3
 8008646:	f897 31ed 	ldrb.w	r3, [r7, #493]	@ 0x1ed
 800864a:	4313      	orrs	r3, r2
 800864c:	f043 427f 	orr.w	r2, r3, #4278190080	@ 0xff000000
 8008650:	f507 7382 	add.w	r3, r7, #260	@ 0x104
 8008654:	4611      	mov	r1, r2
 8008656:	4618      	mov	r0, r3
 8008658:	f7fd f87b 	bl	8005752 <_ZN8touchgfx9colortypeC1Em>
 800865c:	f507 731a 	add.w	r3, r7, #616	@ 0x268
 8008660:	f5a3 73b2 	sub.w	r3, r3, #356	@ 0x164
 8008664:	681b      	ldr	r3, [r3, #0]
 8008666:	461a      	mov	r2, r3
 8008668:	f8c7 41f0 	str.w	r4, [r7, #496]	@ 0x1f0
 800866c:	f507 731a 	add.w	r3, r7, #616	@ 0x268
 8008670:	f5a3 7312 	sub.w	r3, r3, #584	@ 0x248
 8008674:	601a      	str	r2, [r3, #0]
        this->color = color;
 8008676:	f8d7 31f0 	ldr.w	r3, [r7, #496]	@ 0x1f0
 800867a:	f507 721a 	add.w	r2, r7, #616	@ 0x268
 800867e:	f5a2 7212 	sub.w	r2, r2, #584	@ 0x248
 8008682:	6812      	ldr	r2, [r2, #0]
 8008684:	631a      	str	r2, [r3, #48]	@ 0x30
    }
 8008686:	bf00      	nop
    VoiceCommMess_Text_On.setLinespacing(0);
 8008688:	f507 731a 	add.w	r3, r7, #616	@ 0x268
 800868c:	f5a3 7319 	sub.w	r3, r3, #612	@ 0x264
 8008690:	681b      	ldr	r3, [r3, #0]
 8008692:	f203 737c 	addw	r3, r3, #1916	@ 0x77c
 8008696:	f8c7 31f8 	str.w	r3, [r7, #504]	@ 0x1f8
 800869a:	2300      	movs	r3, #0
 800869c:	f8a7 31f6 	strh.w	r3, [r7, #502]	@ 0x1f6
        linespace = space;
 80086a0:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 80086a4:	f8b7 21f6 	ldrh.w	r2, [r7, #502]	@ 0x1f6
 80086a8:	869a      	strh	r2, [r3, #52]	@ 0x34
    }
 80086aa:	bf00      	nop
    VoiceCommMess_Text_On.setTypedText(touchgfx::TypedText(T___SINGLEUSE_LNSV));
 80086ac:	f507 731a 	add.w	r3, r7, #616	@ 0x268
 80086b0:	f5a3 7319 	sub.w	r3, r3, #612	@ 0x264
 80086b4:	681b      	ldr	r3, [r3, #0]
 80086b6:	f203 747c 	addw	r4, r3, #1916	@ 0x77c
 80086ba:	f107 0388 	add.w	r3, r7, #136	@ 0x88
 80086be:	2105      	movs	r1, #5
 80086c0:	4618      	mov	r0, r3
 80086c2:	f7fd f9a7 	bl	8005a14 <_ZN8touchgfx9TypedTextC1Et>
 80086c6:	f107 0388 	add.w	r3, r7, #136	@ 0x88
 80086ca:	4619      	mov	r1, r3
 80086cc:	4620      	mov	r0, r4
 80086ce:	f011 f83a 	bl	8019746 <_ZN8touchgfx8TextArea12setTypedTextERKNS_9TypedTextE>
 80086d2:	f107 0388 	add.w	r3, r7, #136	@ 0x88
 80086d6:	4618      	mov	r0, r3
 80086d8:	f7fb fb32 	bl	8003d40 <_ZN8touchgfx9TypedTextD1Ev>
    VoiceComm_Textbox_1.add(VoiceCommMess_Text_On);
 80086dc:	f507 731a 	add.w	r3, r7, #616	@ 0x268
 80086e0:	f5a3 7319 	sub.w	r3, r3, #612	@ 0x264
 80086e4:	681b      	ldr	r3, [r3, #0]
 80086e6:	f503 62dd 	add.w	r2, r3, #1768	@ 0x6e8
 80086ea:	f507 731a 	add.w	r3, r7, #616	@ 0x268
 80086ee:	f5a3 7319 	sub.w	r3, r3, #612	@ 0x264
 80086f2:	681b      	ldr	r3, [r3, #0]
 80086f4:	f203 737c 	addw	r3, r3, #1916	@ 0x77c
 80086f8:	4619      	mov	r1, r3
 80086fa:	4610      	mov	r0, r2
 80086fc:	f00f f8f8 	bl	80178f0 <_ZN8touchgfx9Container3addERNS_8DrawableE>

    VoiceCommMess_Text_Off.setXY(36, 13);
 8008700:	f507 731a 	add.w	r3, r7, #616	@ 0x268
 8008704:	f5a3 7319 	sub.w	r3, r3, #612	@ 0x264
 8008708:	681b      	ldr	r3, [r3, #0]
 800870a:	f503 63f7 	add.w	r3, r3, #1976	@ 0x7b8
 800870e:	220d      	movs	r2, #13
 8008710:	2124      	movs	r1, #36	@ 0x24
 8008712:	4618      	mov	r0, r3
 8008714:	f7fb fc20 	bl	8003f58 <_ZN8touchgfx8Drawable5setXYEss>
    VoiceCommMess_Text_Off.setVisible(false);
 8008718:	f507 731a 	add.w	r3, r7, #616	@ 0x268
 800871c:	f5a3 7319 	sub.w	r3, r3, #612	@ 0x264
 8008720:	681b      	ldr	r3, [r3, #0]
 8008722:	f503 63f7 	add.w	r3, r3, #1976	@ 0x7b8
 8008726:	2100      	movs	r1, #0
 8008728:	4618      	mov	r0, r3
 800872a:	f7fe f96a 	bl	8006a02 <_ZN8touchgfx8Drawable10setVisibleEb>
    VoiceCommMess_Text_Off.setColor(touchgfx::Color::getColorFromRGB(255, 255, 255));
 800872e:	f507 731a 	add.w	r3, r7, #616	@ 0x268
 8008732:	f5a3 7319 	sub.w	r3, r3, #612	@ 0x264
 8008736:	681b      	ldr	r3, [r3, #0]
 8008738:	f503 64f7 	add.w	r4, r3, #1976	@ 0x7b8
 800873c:	23ff      	movs	r3, #255	@ 0xff
 800873e:	f887 31ff 	strb.w	r3, [r7, #511]	@ 0x1ff
 8008742:	23ff      	movs	r3, #255	@ 0xff
 8008744:	f887 31fe 	strb.w	r3, [r7, #510]	@ 0x1fe
 8008748:	23ff      	movs	r3, #255	@ 0xff
 800874a:	f887 31fd 	strb.w	r3, [r7, #509]	@ 0x1fd
 800874e:	f897 31ff 	ldrb.w	r3, [r7, #511]	@ 0x1ff
 8008752:	041a      	lsls	r2, r3, #16
 8008754:	f897 31fe 	ldrb.w	r3, [r7, #510]	@ 0x1fe
 8008758:	021b      	lsls	r3, r3, #8
 800875a:	431a      	orrs	r2, r3
 800875c:	f897 31fd 	ldrb.w	r3, [r7, #509]	@ 0x1fd
 8008760:	4313      	orrs	r3, r2
 8008762:	f043 427f 	orr.w	r2, r3, #4278190080	@ 0xff000000
 8008766:	f507 7380 	add.w	r3, r7, #256	@ 0x100
 800876a:	4611      	mov	r1, r2
 800876c:	4618      	mov	r0, r3
 800876e:	f7fc fff0 	bl	8005752 <_ZN8touchgfx9colortypeC1Em>
 8008772:	f507 731a 	add.w	r3, r7, #616	@ 0x268
 8008776:	f5a3 73b4 	sub.w	r3, r3, #360	@ 0x168
 800877a:	681b      	ldr	r3, [r3, #0]
 800877c:	461a      	mov	r2, r3
 800877e:	f8c7 4200 	str.w	r4, [r7, #512]	@ 0x200
 8008782:	f507 731a 	add.w	r3, r7, #616	@ 0x268
 8008786:	f5a3 7313 	sub.w	r3, r3, #588	@ 0x24c
 800878a:	601a      	str	r2, [r3, #0]
        this->color = color;
 800878c:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 8008790:	f507 721a 	add.w	r2, r7, #616	@ 0x268
 8008794:	f5a2 7213 	sub.w	r2, r2, #588	@ 0x24c
 8008798:	6812      	ldr	r2, [r2, #0]
 800879a:	631a      	str	r2, [r3, #48]	@ 0x30
    }
 800879c:	bf00      	nop
    VoiceCommMess_Text_Off.setLinespacing(0);
 800879e:	f507 731a 	add.w	r3, r7, #616	@ 0x268
 80087a2:	f5a3 7319 	sub.w	r3, r3, #612	@ 0x264
 80087a6:	681b      	ldr	r3, [r3, #0]
 80087a8:	f503 63f7 	add.w	r3, r3, #1976	@ 0x7b8
 80087ac:	f8c7 3208 	str.w	r3, [r7, #520]	@ 0x208
 80087b0:	2300      	movs	r3, #0
 80087b2:	f8a7 3206 	strh.w	r3, [r7, #518]	@ 0x206
        linespace = space;
 80087b6:	f8d7 3208 	ldr.w	r3, [r7, #520]	@ 0x208
 80087ba:	f8b7 2206 	ldrh.w	r2, [r7, #518]	@ 0x206
 80087be:	869a      	strh	r2, [r3, #52]	@ 0x34
    }
 80087c0:	bf00      	nop
    VoiceCommMess_Text_Off.setTypedText(touchgfx::TypedText(T___SINGLEUSE_GO11));
 80087c2:	f507 731a 	add.w	r3, r7, #616	@ 0x268
 80087c6:	f5a3 7319 	sub.w	r3, r3, #612	@ 0x264
 80087ca:	681b      	ldr	r3, [r3, #0]
 80087cc:	f503 64f7 	add.w	r4, r3, #1976	@ 0x7b8
 80087d0:	f107 0390 	add.w	r3, r7, #144	@ 0x90
 80087d4:	210a      	movs	r1, #10
 80087d6:	4618      	mov	r0, r3
 80087d8:	f7fd f91c 	bl	8005a14 <_ZN8touchgfx9TypedTextC1Et>
 80087dc:	f107 0390 	add.w	r3, r7, #144	@ 0x90
 80087e0:	4619      	mov	r1, r3
 80087e2:	4620      	mov	r0, r4
 80087e4:	f010 ffaf 	bl	8019746 <_ZN8touchgfx8TextArea12setTypedTextERKNS_9TypedTextE>
 80087e8:	f107 0390 	add.w	r3, r7, #144	@ 0x90
 80087ec:	4618      	mov	r0, r3
 80087ee:	f7fb faa7 	bl	8003d40 <_ZN8touchgfx9TypedTextD1Ev>
    VoiceComm_Textbox_1.add(VoiceCommMess_Text_Off);
 80087f2:	f507 731a 	add.w	r3, r7, #616	@ 0x268
 80087f6:	f5a3 7319 	sub.w	r3, r3, #612	@ 0x264
 80087fa:	681b      	ldr	r3, [r3, #0]
 80087fc:	f503 62dd 	add.w	r2, r3, #1768	@ 0x6e8
 8008800:	f507 731a 	add.w	r3, r7, #616	@ 0x268
 8008804:	f5a3 7319 	sub.w	r3, r3, #612	@ 0x264
 8008808:	681b      	ldr	r3, [r3, #0]
 800880a:	f503 63f7 	add.w	r3, r3, #1976	@ 0x7b8
 800880e:	4619      	mov	r1, r3
 8008810:	4610      	mov	r0, r2
 8008812:	f00f f86d 	bl	80178f0 <_ZN8touchgfx9Container3addERNS_8DrawableE>
    Message_Board_Panel_1.add(VoiceComm_Textbox_1);
 8008816:	f507 731a 	add.w	r3, r7, #616	@ 0x268
 800881a:	f5a3 7319 	sub.w	r3, r3, #612	@ 0x264
 800881e:	681b      	ldr	r3, [r3, #0]
 8008820:	f203 52ec 	addw	r2, r3, #1516	@ 0x5ec
 8008824:	f507 731a 	add.w	r3, r7, #616	@ 0x268
 8008828:	f5a3 7319 	sub.w	r3, r3, #612	@ 0x264
 800882c:	681b      	ldr	r3, [r3, #0]
 800882e:	f503 63dd 	add.w	r3, r3, #1768	@ 0x6e8
 8008832:	4619      	mov	r1, r3
 8008834:	4610      	mov	r0, r2
 8008836:	f00f f85b 	bl	80178f0 <_ZN8touchgfx9Container3addERNS_8DrawableE>

    AnomalyWarning_Textbox_1_1.setPosition(42, 0, 117, 98);
 800883a:	f507 731a 	add.w	r3, r7, #616	@ 0x268
 800883e:	f5a3 7319 	sub.w	r3, r3, #612	@ 0x264
 8008842:	681b      	ldr	r3, [r3, #0]
 8008844:	f203 70f4 	addw	r0, r3, #2036	@ 0x7f4
 8008848:	2362      	movs	r3, #98	@ 0x62
 800884a:	9300      	str	r3, [sp, #0]
 800884c:	2375      	movs	r3, #117	@ 0x75
 800884e:	2200      	movs	r2, #0
 8008850:	212a      	movs	r1, #42	@ 0x2a
 8008852:	f7fb fb28 	bl	8003ea6 <_ZN8touchgfx8Drawable11setPositionEssss>

    MessageBoard_Border_1_1_1_2.setPosition(2, 2, 115, 96);
 8008856:	f507 731a 	add.w	r3, r7, #616	@ 0x268
 800885a:	f5a3 7319 	sub.w	r3, r3, #612	@ 0x264
 800885e:	681b      	ldr	r3, [r3, #0]
 8008860:	f503 6002 	add.w	r0, r3, #2080	@ 0x820
 8008864:	2360      	movs	r3, #96	@ 0x60
 8008866:	9300      	str	r3, [sp, #0]
 8008868:	2373      	movs	r3, #115	@ 0x73
 800886a:	2202      	movs	r2, #2
 800886c:	2102      	movs	r1, #2
 800886e:	f7fb fb1a 	bl	8003ea6 <_ZN8touchgfx8Drawable11setPositionEssss>
    MessageBoard_Border_1_1_1_2.setColor(touchgfx::Color::getColorFromRGB(237, 102, 99));
 8008872:	f507 731a 	add.w	r3, r7, #616	@ 0x268
 8008876:	f5a3 7319 	sub.w	r3, r3, #612	@ 0x264
 800887a:	681b      	ldr	r3, [r3, #0]
 800887c:	f503 6402 	add.w	r4, r3, #2080	@ 0x820
 8008880:	23ed      	movs	r3, #237	@ 0xed
 8008882:	f887 320f 	strb.w	r3, [r7, #527]	@ 0x20f
 8008886:	2366      	movs	r3, #102	@ 0x66
 8008888:	f887 320e 	strb.w	r3, [r7, #526]	@ 0x20e
 800888c:	2363      	movs	r3, #99	@ 0x63
 800888e:	f887 320d 	strb.w	r3, [r7, #525]	@ 0x20d
 8008892:	f897 320f 	ldrb.w	r3, [r7, #527]	@ 0x20f
 8008896:	041a      	lsls	r2, r3, #16
 8008898:	f897 320e 	ldrb.w	r3, [r7, #526]	@ 0x20e
 800889c:	021b      	lsls	r3, r3, #8
 800889e:	431a      	orrs	r2, r3
 80088a0:	f897 320d 	ldrb.w	r3, [r7, #525]	@ 0x20d
 80088a4:	4313      	orrs	r3, r2
 80088a6:	f043 427f 	orr.w	r2, r3, #4278190080	@ 0xff000000
 80088aa:	f107 03fc 	add.w	r3, r7, #252	@ 0xfc
 80088ae:	4611      	mov	r1, r2
 80088b0:	4618      	mov	r0, r3
 80088b2:	f7fc ff4e 	bl	8005752 <_ZN8touchgfx9colortypeC1Em>
 80088b6:	f507 731a 	add.w	r3, r7, #616	@ 0x268
 80088ba:	f5a3 73b6 	sub.w	r3, r3, #364	@ 0x16c
 80088be:	681b      	ldr	r3, [r3, #0]
 80088c0:	4619      	mov	r1, r3
 80088c2:	4620      	mov	r0, r4
 80088c4:	f7fd f816 	bl	80058f4 <_ZN8touchgfx3Box8setColorENS_9colortypeE>
    MessageBoard_Border_1_1_1_2.setBorderColor(touchgfx::Color::getColorFromRGB(0, 0, 0));
 80088c8:	f507 731a 	add.w	r3, r7, #616	@ 0x268
 80088cc:	f5a3 7319 	sub.w	r3, r3, #612	@ 0x264
 80088d0:	681b      	ldr	r3, [r3, #0]
 80088d2:	f503 6402 	add.w	r4, r3, #2080	@ 0x820
 80088d6:	2300      	movs	r3, #0
 80088d8:	f887 3212 	strb.w	r3, [r7, #530]	@ 0x212
 80088dc:	2300      	movs	r3, #0
 80088de:	f887 3211 	strb.w	r3, [r7, #529]	@ 0x211
 80088e2:	2300      	movs	r3, #0
 80088e4:	f887 3210 	strb.w	r3, [r7, #528]	@ 0x210
 80088e8:	f897 3212 	ldrb.w	r3, [r7, #530]	@ 0x212
 80088ec:	041a      	lsls	r2, r3, #16
 80088ee:	f897 3211 	ldrb.w	r3, [r7, #529]	@ 0x211
 80088f2:	021b      	lsls	r3, r3, #8
 80088f4:	431a      	orrs	r2, r3
 80088f6:	f897 3210 	ldrb.w	r3, [r7, #528]	@ 0x210
 80088fa:	4313      	orrs	r3, r2
 80088fc:	f043 427f 	orr.w	r2, r3, #4278190080	@ 0xff000000
 8008900:	f107 03f8 	add.w	r3, r7, #248	@ 0xf8
 8008904:	4611      	mov	r1, r2
 8008906:	4618      	mov	r0, r3
 8008908:	f7fc ff23 	bl	8005752 <_ZN8touchgfx9colortypeC1Em>
 800890c:	f507 731a 	add.w	r3, r7, #616	@ 0x268
 8008910:	f5a3 73b8 	sub.w	r3, r3, #368	@ 0x170
 8008914:	681b      	ldr	r3, [r3, #0]
 8008916:	4619      	mov	r1, r3
 8008918:	4620      	mov	r0, r4
 800891a:	f7fd f85d 	bl	80059d8 <_ZN8touchgfx13BoxWithBorder14setBorderColorENS_9colortypeE>
    MessageBoard_Border_1_1_1_2.setBorderSize(3);
 800891e:	f507 731a 	add.w	r3, r7, #616	@ 0x268
 8008922:	f5a3 7319 	sub.w	r3, r3, #612	@ 0x264
 8008926:	681b      	ldr	r3, [r3, #0]
 8008928:	f503 6302 	add.w	r3, r3, #2080	@ 0x820
 800892c:	2103      	movs	r1, #3
 800892e:	4618      	mov	r0, r3
 8008930:	f7fd f860 	bl	80059f4 <_ZN8touchgfx13BoxWithBorder13setBorderSizeEt>
    AnomalyWarning_Textbox_1_1.add(MessageBoard_Border_1_1_1_2);
 8008934:	f507 731a 	add.w	r3, r7, #616	@ 0x268
 8008938:	f5a3 7319 	sub.w	r3, r3, #612	@ 0x264
 800893c:	681b      	ldr	r3, [r3, #0]
 800893e:	f203 72f4 	addw	r2, r3, #2036	@ 0x7f4
 8008942:	f507 731a 	add.w	r3, r7, #616	@ 0x268
 8008946:	f5a3 7319 	sub.w	r3, r3, #612	@ 0x264
 800894a:	681b      	ldr	r3, [r3, #0]
 800894c:	f503 6302 	add.w	r3, r3, #2080	@ 0x820
 8008950:	4619      	mov	r1, r3
 8008952:	4610      	mov	r0, r2
 8008954:	f00e ffcc 	bl	80178f0 <_ZN8touchgfx9Container3addERNS_8DrawableE>

    MessageBoard_Border_1_1_1_1_1.setPosition(16, 10, 89, 80);
 8008958:	f507 731a 	add.w	r3, r7, #616	@ 0x268
 800895c:	f5a3 7319 	sub.w	r3, r3, #612	@ 0x264
 8008960:	681b      	ldr	r3, [r3, #0]
 8008962:	f603 0054 	addw	r0, r3, #2132	@ 0x854
 8008966:	2350      	movs	r3, #80	@ 0x50
 8008968:	9300      	str	r3, [sp, #0]
 800896a:	2359      	movs	r3, #89	@ 0x59
 800896c:	220a      	movs	r2, #10
 800896e:	2110      	movs	r1, #16
 8008970:	f7fb fa99 	bl	8003ea6 <_ZN8touchgfx8Drawable11setPositionEssss>
    MessageBoard_Border_1_1_1_1_1.setColor(touchgfx::Color::getColorFromRGB(0, 0, 0));
 8008974:	f507 731a 	add.w	r3, r7, #616	@ 0x268
 8008978:	f5a3 7319 	sub.w	r3, r3, #612	@ 0x264
 800897c:	681b      	ldr	r3, [r3, #0]
 800897e:	f603 0454 	addw	r4, r3, #2132	@ 0x854
 8008982:	2300      	movs	r3, #0
 8008984:	f887 3215 	strb.w	r3, [r7, #533]	@ 0x215
 8008988:	2300      	movs	r3, #0
 800898a:	f887 3214 	strb.w	r3, [r7, #532]	@ 0x214
 800898e:	2300      	movs	r3, #0
 8008990:	f887 3213 	strb.w	r3, [r7, #531]	@ 0x213
 8008994:	f897 3215 	ldrb.w	r3, [r7, #533]	@ 0x215
 8008998:	041a      	lsls	r2, r3, #16
 800899a:	f897 3214 	ldrb.w	r3, [r7, #532]	@ 0x214
 800899e:	021b      	lsls	r3, r3, #8
 80089a0:	431a      	orrs	r2, r3
 80089a2:	f897 3213 	ldrb.w	r3, [r7, #531]	@ 0x213
 80089a6:	4313      	orrs	r3, r2
 80089a8:	f043 427f 	orr.w	r2, r3, #4278190080	@ 0xff000000
 80089ac:	f107 03f4 	add.w	r3, r7, #244	@ 0xf4
 80089b0:	4611      	mov	r1, r2
 80089b2:	4618      	mov	r0, r3
 80089b4:	f7fc fecd 	bl	8005752 <_ZN8touchgfx9colortypeC1Em>
 80089b8:	f507 731a 	add.w	r3, r7, #616	@ 0x268
 80089bc:	f5a3 73ba 	sub.w	r3, r3, #372	@ 0x174
 80089c0:	681b      	ldr	r3, [r3, #0]
 80089c2:	4619      	mov	r1, r3
 80089c4:	4620      	mov	r0, r4
 80089c6:	f7fc ff95 	bl	80058f4 <_ZN8touchgfx3Box8setColorENS_9colortypeE>
    MessageBoard_Border_1_1_1_1_1.setBorderColor(touchgfx::Color::getColorFromRGB(67, 101, 139));
 80089ca:	f507 731a 	add.w	r3, r7, #616	@ 0x268
 80089ce:	f5a3 7319 	sub.w	r3, r3, #612	@ 0x264
 80089d2:	681b      	ldr	r3, [r3, #0]
 80089d4:	f603 0454 	addw	r4, r3, #2132	@ 0x854
 80089d8:	2343      	movs	r3, #67	@ 0x43
 80089da:	f887 3218 	strb.w	r3, [r7, #536]	@ 0x218
 80089de:	2365      	movs	r3, #101	@ 0x65
 80089e0:	f887 3217 	strb.w	r3, [r7, #535]	@ 0x217
 80089e4:	238b      	movs	r3, #139	@ 0x8b
 80089e6:	f887 3216 	strb.w	r3, [r7, #534]	@ 0x216
 80089ea:	f897 3218 	ldrb.w	r3, [r7, #536]	@ 0x218
 80089ee:	041a      	lsls	r2, r3, #16
 80089f0:	f897 3217 	ldrb.w	r3, [r7, #535]	@ 0x217
 80089f4:	021b      	lsls	r3, r3, #8
 80089f6:	431a      	orrs	r2, r3
 80089f8:	f897 3216 	ldrb.w	r3, [r7, #534]	@ 0x216
 80089fc:	4313      	orrs	r3, r2
 80089fe:	f043 427f 	orr.w	r2, r3, #4278190080	@ 0xff000000
 8008a02:	f107 03f0 	add.w	r3, r7, #240	@ 0xf0
 8008a06:	4611      	mov	r1, r2
 8008a08:	4618      	mov	r0, r3
 8008a0a:	f7fc fea2 	bl	8005752 <_ZN8touchgfx9colortypeC1Em>
 8008a0e:	f507 731a 	add.w	r3, r7, #616	@ 0x268
 8008a12:	f5a3 73bc 	sub.w	r3, r3, #376	@ 0x178
 8008a16:	681b      	ldr	r3, [r3, #0]
 8008a18:	4619      	mov	r1, r3
 8008a1a:	4620      	mov	r0, r4
 8008a1c:	f7fc ffdc 	bl	80059d8 <_ZN8touchgfx13BoxWithBorder14setBorderColorENS_9colortypeE>
    MessageBoard_Border_1_1_1_1_1.setBorderSize(3);
 8008a20:	f507 731a 	add.w	r3, r7, #616	@ 0x268
 8008a24:	f5a3 7319 	sub.w	r3, r3, #612	@ 0x264
 8008a28:	681b      	ldr	r3, [r3, #0]
 8008a2a:	f603 0354 	addw	r3, r3, #2132	@ 0x854
 8008a2e:	2103      	movs	r1, #3
 8008a30:	4618      	mov	r0, r3
 8008a32:	f7fc ffdf 	bl	80059f4 <_ZN8touchgfx13BoxWithBorder13setBorderSizeEt>
    AnomalyWarning_Textbox_1_1.add(MessageBoard_Border_1_1_1_1_1);
 8008a36:	f507 731a 	add.w	r3, r7, #616	@ 0x268
 8008a3a:	f5a3 7319 	sub.w	r3, r3, #612	@ 0x264
 8008a3e:	681b      	ldr	r3, [r3, #0]
 8008a40:	f203 72f4 	addw	r2, r3, #2036	@ 0x7f4
 8008a44:	f507 731a 	add.w	r3, r7, #616	@ 0x268
 8008a48:	f5a3 7319 	sub.w	r3, r3, #612	@ 0x264
 8008a4c:	681b      	ldr	r3, [r3, #0]
 8008a4e:	f603 0354 	addw	r3, r3, #2132	@ 0x854
 8008a52:	4619      	mov	r1, r3
 8008a54:	4610      	mov	r0, r2
 8008a56:	f00e ff4b 	bl	80178f0 <_ZN8touchgfx9Container3addERNS_8DrawableE>

    MessageBoard_Message_1.setXY(29, 13);
 8008a5a:	f507 731a 	add.w	r3, r7, #616	@ 0x268
 8008a5e:	f5a3 7319 	sub.w	r3, r3, #612	@ 0x264
 8008a62:	681b      	ldr	r3, [r3, #0]
 8008a64:	f603 0388 	addw	r3, r3, #2184	@ 0x888
 8008a68:	220d      	movs	r2, #13
 8008a6a:	211d      	movs	r1, #29
 8008a6c:	4618      	mov	r0, r3
 8008a6e:	f7fb fa73 	bl	8003f58 <_ZN8touchgfx8Drawable5setXYEss>
    MessageBoard_Message_1.setColor(touchgfx::Color::getColorFromRGB(255, 255, 255));
 8008a72:	f507 731a 	add.w	r3, r7, #616	@ 0x268
 8008a76:	f5a3 7319 	sub.w	r3, r3, #612	@ 0x264
 8008a7a:	681b      	ldr	r3, [r3, #0]
 8008a7c:	f603 0488 	addw	r4, r3, #2184	@ 0x888
 8008a80:	23ff      	movs	r3, #255	@ 0xff
 8008a82:	f887 321b 	strb.w	r3, [r7, #539]	@ 0x21b
 8008a86:	23ff      	movs	r3, #255	@ 0xff
 8008a88:	f887 321a 	strb.w	r3, [r7, #538]	@ 0x21a
 8008a8c:	23ff      	movs	r3, #255	@ 0xff
 8008a8e:	f887 3219 	strb.w	r3, [r7, #537]	@ 0x219
 8008a92:	f897 321b 	ldrb.w	r3, [r7, #539]	@ 0x21b
 8008a96:	041a      	lsls	r2, r3, #16
 8008a98:	f897 321a 	ldrb.w	r3, [r7, #538]	@ 0x21a
 8008a9c:	021b      	lsls	r3, r3, #8
 8008a9e:	431a      	orrs	r2, r3
 8008aa0:	f897 3219 	ldrb.w	r3, [r7, #537]	@ 0x219
 8008aa4:	4313      	orrs	r3, r2
 8008aa6:	f043 427f 	orr.w	r2, r3, #4278190080	@ 0xff000000
 8008aaa:	f107 03ec 	add.w	r3, r7, #236	@ 0xec
 8008aae:	4611      	mov	r1, r2
 8008ab0:	4618      	mov	r0, r3
 8008ab2:	f7fc fe4e 	bl	8005752 <_ZN8touchgfx9colortypeC1Em>
 8008ab6:	f507 731a 	add.w	r3, r7, #616	@ 0x268
 8008aba:	f5a3 73be 	sub.w	r3, r3, #380	@ 0x17c
 8008abe:	681b      	ldr	r3, [r3, #0]
 8008ac0:	461a      	mov	r2, r3
 8008ac2:	f8c7 421c 	str.w	r4, [r7, #540]	@ 0x21c
 8008ac6:	f507 731a 	add.w	r3, r7, #616	@ 0x268
 8008aca:	f5a3 7314 	sub.w	r3, r3, #592	@ 0x250
 8008ace:	601a      	str	r2, [r3, #0]
        this->color = color;
 8008ad0:	f8d7 321c 	ldr.w	r3, [r7, #540]	@ 0x21c
 8008ad4:	f507 721a 	add.w	r2, r7, #616	@ 0x268
 8008ad8:	f5a2 7214 	sub.w	r2, r2, #592	@ 0x250
 8008adc:	6812      	ldr	r2, [r2, #0]
 8008ade:	631a      	str	r2, [r3, #48]	@ 0x30
    }
 8008ae0:	bf00      	nop
    MessageBoard_Message_1.setLinespacing(0);
 8008ae2:	f507 731a 	add.w	r3, r7, #616	@ 0x268
 8008ae6:	f5a3 7319 	sub.w	r3, r3, #612	@ 0x264
 8008aea:	681b      	ldr	r3, [r3, #0]
 8008aec:	f603 0388 	addw	r3, r3, #2184	@ 0x888
 8008af0:	f8c7 3224 	str.w	r3, [r7, #548]	@ 0x224
 8008af4:	2300      	movs	r3, #0
 8008af6:	f8a7 3222 	strh.w	r3, [r7, #546]	@ 0x222
        linespace = space;
 8008afa:	f8d7 3224 	ldr.w	r3, [r7, #548]	@ 0x224
 8008afe:	f8b7 2222 	ldrh.w	r2, [r7, #546]	@ 0x222
 8008b02:	869a      	strh	r2, [r3, #52]	@ 0x34
    }
 8008b04:	bf00      	nop
    MessageBoard_Message_1.setTypedText(touchgfx::TypedText(T___SINGLEUSE_RLM0));
 8008b06:	f507 731a 	add.w	r3, r7, #616	@ 0x268
 8008b0a:	f5a3 7319 	sub.w	r3, r3, #612	@ 0x264
 8008b0e:	681b      	ldr	r3, [r3, #0]
 8008b10:	f603 0488 	addw	r4, r3, #2184	@ 0x888
 8008b14:	f107 0398 	add.w	r3, r7, #152	@ 0x98
 8008b18:	2106      	movs	r1, #6
 8008b1a:	4618      	mov	r0, r3
 8008b1c:	f7fc ff7a 	bl	8005a14 <_ZN8touchgfx9TypedTextC1Et>
 8008b20:	f107 0398 	add.w	r3, r7, #152	@ 0x98
 8008b24:	4619      	mov	r1, r3
 8008b26:	4620      	mov	r0, r4
 8008b28:	f010 fe0d 	bl	8019746 <_ZN8touchgfx8TextArea12setTypedTextERKNS_9TypedTextE>
 8008b2c:	f107 0398 	add.w	r3, r7, #152	@ 0x98
 8008b30:	4618      	mov	r0, r3
 8008b32:	f7fb f905 	bl	8003d40 <_ZN8touchgfx9TypedTextD1Ev>
    AnomalyWarning_Textbox_1_1.add(MessageBoard_Message_1);
 8008b36:	f507 731a 	add.w	r3, r7, #616	@ 0x268
 8008b3a:	f5a3 7319 	sub.w	r3, r3, #612	@ 0x264
 8008b3e:	681b      	ldr	r3, [r3, #0]
 8008b40:	f203 72f4 	addw	r2, r3, #2036	@ 0x7f4
 8008b44:	f507 731a 	add.w	r3, r7, #616	@ 0x268
 8008b48:	f5a3 7319 	sub.w	r3, r3, #612	@ 0x264
 8008b4c:	681b      	ldr	r3, [r3, #0]
 8008b4e:	f603 0388 	addw	r3, r3, #2184	@ 0x888
 8008b52:	4619      	mov	r1, r3
 8008b54:	4610      	mov	r0, r2
 8008b56:	f00e fecb 	bl	80178f0 <_ZN8touchgfx9Container3addERNS_8DrawableE>

    MessageBoard_Message_Muted.setXY(30, 13);
 8008b5a:	f507 731a 	add.w	r3, r7, #616	@ 0x268
 8008b5e:	f5a3 7319 	sub.w	r3, r3, #612	@ 0x264
 8008b62:	681b      	ldr	r3, [r3, #0]
 8008b64:	f603 03c4 	addw	r3, r3, #2244	@ 0x8c4
 8008b68:	220d      	movs	r2, #13
 8008b6a:	211e      	movs	r1, #30
 8008b6c:	4618      	mov	r0, r3
 8008b6e:	f7fb f9f3 	bl	8003f58 <_ZN8touchgfx8Drawable5setXYEss>
    MessageBoard_Message_Muted.setVisible(false);
 8008b72:	f507 731a 	add.w	r3, r7, #616	@ 0x268
 8008b76:	f5a3 7319 	sub.w	r3, r3, #612	@ 0x264
 8008b7a:	681b      	ldr	r3, [r3, #0]
 8008b7c:	f603 03c4 	addw	r3, r3, #2244	@ 0x8c4
 8008b80:	2100      	movs	r1, #0
 8008b82:	4618      	mov	r0, r3
 8008b84:	f7fd ff3d 	bl	8006a02 <_ZN8touchgfx8Drawable10setVisibleEb>
    MessageBoard_Message_Muted.setColor(touchgfx::Color::getColorFromRGB(255, 255, 255));
 8008b88:	f507 731a 	add.w	r3, r7, #616	@ 0x268
 8008b8c:	f5a3 7319 	sub.w	r3, r3, #612	@ 0x264
 8008b90:	681b      	ldr	r3, [r3, #0]
 8008b92:	f603 04c4 	addw	r4, r3, #2244	@ 0x8c4
 8008b96:	23ff      	movs	r3, #255	@ 0xff
 8008b98:	f887 322b 	strb.w	r3, [r7, #555]	@ 0x22b
 8008b9c:	23ff      	movs	r3, #255	@ 0xff
 8008b9e:	f887 322a 	strb.w	r3, [r7, #554]	@ 0x22a
 8008ba2:	23ff      	movs	r3, #255	@ 0xff
 8008ba4:	f887 3229 	strb.w	r3, [r7, #553]	@ 0x229
 8008ba8:	f897 322b 	ldrb.w	r3, [r7, #555]	@ 0x22b
 8008bac:	041a      	lsls	r2, r3, #16
 8008bae:	f897 322a 	ldrb.w	r3, [r7, #554]	@ 0x22a
 8008bb2:	021b      	lsls	r3, r3, #8
 8008bb4:	431a      	orrs	r2, r3
 8008bb6:	f897 3229 	ldrb.w	r3, [r7, #553]	@ 0x229
 8008bba:	4313      	orrs	r3, r2
 8008bbc:	f043 427f 	orr.w	r2, r3, #4278190080	@ 0xff000000
 8008bc0:	f107 03e8 	add.w	r3, r7, #232	@ 0xe8
 8008bc4:	4611      	mov	r1, r2
 8008bc6:	4618      	mov	r0, r3
 8008bc8:	f7fc fdc3 	bl	8005752 <_ZN8touchgfx9colortypeC1Em>
 8008bcc:	f507 731a 	add.w	r3, r7, #616	@ 0x268
 8008bd0:	f5a3 73c0 	sub.w	r3, r3, #384	@ 0x180
 8008bd4:	681b      	ldr	r3, [r3, #0]
 8008bd6:	461a      	mov	r2, r3
 8008bd8:	f8c7 422c 	str.w	r4, [r7, #556]	@ 0x22c
 8008bdc:	f507 731a 	add.w	r3, r7, #616	@ 0x268
 8008be0:	f5a3 7315 	sub.w	r3, r3, #596	@ 0x254
 8008be4:	601a      	str	r2, [r3, #0]
        this->color = color;
 8008be6:	f8d7 322c 	ldr.w	r3, [r7, #556]	@ 0x22c
 8008bea:	f507 721a 	add.w	r2, r7, #616	@ 0x268
 8008bee:	f5a2 7215 	sub.w	r2, r2, #596	@ 0x254
 8008bf2:	6812      	ldr	r2, [r2, #0]
 8008bf4:	631a      	str	r2, [r3, #48]	@ 0x30
    }
 8008bf6:	bf00      	nop
    MessageBoard_Message_Muted.setLinespacing(0);
 8008bf8:	f507 731a 	add.w	r3, r7, #616	@ 0x268
 8008bfc:	f5a3 7319 	sub.w	r3, r3, #612	@ 0x264
 8008c00:	681b      	ldr	r3, [r3, #0]
 8008c02:	f603 03c4 	addw	r3, r3, #2244	@ 0x8c4
 8008c06:	f8c7 3234 	str.w	r3, [r7, #564]	@ 0x234
 8008c0a:	2300      	movs	r3, #0
 8008c0c:	f8a7 3232 	strh.w	r3, [r7, #562]	@ 0x232
        linespace = space;
 8008c10:	f8d7 3234 	ldr.w	r3, [r7, #564]	@ 0x234
 8008c14:	f8b7 2232 	ldrh.w	r2, [r7, #562]	@ 0x232
 8008c18:	869a      	strh	r2, [r3, #52]	@ 0x34
    }
 8008c1a:	bf00      	nop
    MessageBoard_Message_Muted.setTypedText(touchgfx::TypedText(T___SINGLEUSE_RFKN));
 8008c1c:	f507 731a 	add.w	r3, r7, #616	@ 0x268
 8008c20:	f5a3 7319 	sub.w	r3, r3, #612	@ 0x264
 8008c24:	681b      	ldr	r3, [r3, #0]
 8008c26:	f603 04c4 	addw	r4, r3, #2244	@ 0x8c4
 8008c2a:	f107 03a0 	add.w	r3, r7, #160	@ 0xa0
 8008c2e:	210b      	movs	r1, #11
 8008c30:	4618      	mov	r0, r3
 8008c32:	f7fc feef 	bl	8005a14 <_ZN8touchgfx9TypedTextC1Et>
 8008c36:	f107 03a0 	add.w	r3, r7, #160	@ 0xa0
 8008c3a:	4619      	mov	r1, r3
 8008c3c:	4620      	mov	r0, r4
 8008c3e:	f010 fd82 	bl	8019746 <_ZN8touchgfx8TextArea12setTypedTextERKNS_9TypedTextE>
 8008c42:	f107 03a0 	add.w	r3, r7, #160	@ 0xa0
 8008c46:	4618      	mov	r0, r3
 8008c48:	f7fb f87a 	bl	8003d40 <_ZN8touchgfx9TypedTextD1Ev>
    AnomalyWarning_Textbox_1_1.add(MessageBoard_Message_Muted);
 8008c4c:	f507 731a 	add.w	r3, r7, #616	@ 0x268
 8008c50:	f5a3 7319 	sub.w	r3, r3, #612	@ 0x264
 8008c54:	681b      	ldr	r3, [r3, #0]
 8008c56:	f203 72f4 	addw	r2, r3, #2036	@ 0x7f4
 8008c5a:	f507 731a 	add.w	r3, r7, #616	@ 0x268
 8008c5e:	f5a3 7319 	sub.w	r3, r3, #612	@ 0x264
 8008c62:	681b      	ldr	r3, [r3, #0]
 8008c64:	f603 03c4 	addw	r3, r3, #2244	@ 0x8c4
 8008c68:	4619      	mov	r1, r3
 8008c6a:	4610      	mov	r0, r2
 8008c6c:	f00e fe40 	bl	80178f0 <_ZN8touchgfx9Container3addERNS_8DrawableE>
    Message_Board_Panel_1.add(AnomalyWarning_Textbox_1_1);
 8008c70:	f507 731a 	add.w	r3, r7, #616	@ 0x268
 8008c74:	f5a3 7319 	sub.w	r3, r3, #612	@ 0x264
 8008c78:	681b      	ldr	r3, [r3, #0]
 8008c7a:	f203 52ec 	addw	r2, r3, #1516	@ 0x5ec
 8008c7e:	f507 731a 	add.w	r3, r7, #616	@ 0x268
 8008c82:	f5a3 7319 	sub.w	r3, r3, #612	@ 0x264
 8008c86:	681b      	ldr	r3, [r3, #0]
 8008c88:	f203 73f4 	addw	r3, r3, #2036	@ 0x7f4
 8008c8c:	4619      	mov	r1, r3
 8008c8e:	4610      	mov	r0, r2
 8008c90:	f00e fe2e 	bl	80178f0 <_ZN8touchgfx9Container3addERNS_8DrawableE>
    Message_panel.add(Message_Board_Panel_1);
 8008c94:	f507 731a 	add.w	r3, r7, #616	@ 0x268
 8008c98:	f5a3 7319 	sub.w	r3, r3, #612	@ 0x264
 8008c9c:	681b      	ldr	r3, [r3, #0]
 8008c9e:	f203 528c 	addw	r2, r3, #1420	@ 0x58c
 8008ca2:	f507 731a 	add.w	r3, r7, #616	@ 0x268
 8008ca6:	f5a3 7319 	sub.w	r3, r3, #612	@ 0x264
 8008caa:	681b      	ldr	r3, [r3, #0]
 8008cac:	f203 53ec 	addw	r3, r3, #1516	@ 0x5ec
 8008cb0:	4619      	mov	r1, r3
 8008cb2:	4610      	mov	r0, r2
 8008cb4:	f00e fe1c 	bl	80178f0 <_ZN8touchgfx9Container3addERNS_8DrawableE>

    Alarm_Mute_Indicator_Textbox_1_1.setPosition(64, 117, 129, 20);
 8008cb8:	f507 731a 	add.w	r3, r7, #616	@ 0x268
 8008cbc:	f5a3 7319 	sub.w	r3, r3, #612	@ 0x264
 8008cc0:	681b      	ldr	r3, [r3, #0]
 8008cc2:	f503 6010 	add.w	r0, r3, #2304	@ 0x900
 8008cc6:	2314      	movs	r3, #20
 8008cc8:	9300      	str	r3, [sp, #0]
 8008cca:	2381      	movs	r3, #129	@ 0x81
 8008ccc:	2275      	movs	r2, #117	@ 0x75
 8008cce:	2140      	movs	r1, #64	@ 0x40
 8008cd0:	f7fb f8e9 	bl	8003ea6 <_ZN8touchgfx8Drawable11setPositionEssss>

    AnomalyDetection_Border_1_1_1.setPosition(0, 3, 129, 17);
 8008cd4:	f507 731a 	add.w	r3, r7, #616	@ 0x268
 8008cd8:	f5a3 7319 	sub.w	r3, r3, #612	@ 0x264
 8008cdc:	681b      	ldr	r3, [r3, #0]
 8008cde:	f603 102c 	addw	r0, r3, #2348	@ 0x92c
 8008ce2:	2311      	movs	r3, #17
 8008ce4:	9300      	str	r3, [sp, #0]
 8008ce6:	2381      	movs	r3, #129	@ 0x81
 8008ce8:	2203      	movs	r2, #3
 8008cea:	2100      	movs	r1, #0
 8008cec:	f7fb f8db 	bl	8003ea6 <_ZN8touchgfx8Drawable11setPositionEssss>
    AnomalyDetection_Border_1_1_1.setColor(touchgfx::Color::getColorFromRGB(0, 0, 0));
 8008cf0:	f507 731a 	add.w	r3, r7, #616	@ 0x268
 8008cf4:	f5a3 7319 	sub.w	r3, r3, #612	@ 0x264
 8008cf8:	681b      	ldr	r3, [r3, #0]
 8008cfa:	f603 142c 	addw	r4, r3, #2348	@ 0x92c
 8008cfe:	2300      	movs	r3, #0
 8008d00:	f887 323d 	strb.w	r3, [r7, #573]	@ 0x23d
 8008d04:	2300      	movs	r3, #0
 8008d06:	f887 323c 	strb.w	r3, [r7, #572]	@ 0x23c
 8008d0a:	2300      	movs	r3, #0
 8008d0c:	f887 323b 	strb.w	r3, [r7, #571]	@ 0x23b
 8008d10:	f897 323d 	ldrb.w	r3, [r7, #573]	@ 0x23d
 8008d14:	041a      	lsls	r2, r3, #16
 8008d16:	f897 323c 	ldrb.w	r3, [r7, #572]	@ 0x23c
 8008d1a:	021b      	lsls	r3, r3, #8
 8008d1c:	431a      	orrs	r2, r3
 8008d1e:	f897 323b 	ldrb.w	r3, [r7, #571]	@ 0x23b
 8008d22:	4313      	orrs	r3, r2
 8008d24:	f043 427f 	orr.w	r2, r3, #4278190080	@ 0xff000000
 8008d28:	f107 03e4 	add.w	r3, r7, #228	@ 0xe4
 8008d2c:	4611      	mov	r1, r2
 8008d2e:	4618      	mov	r0, r3
 8008d30:	f7fc fd0f 	bl	8005752 <_ZN8touchgfx9colortypeC1Em>
 8008d34:	f507 731a 	add.w	r3, r7, #616	@ 0x268
 8008d38:	f5a3 73c2 	sub.w	r3, r3, #388	@ 0x184
 8008d3c:	681b      	ldr	r3, [r3, #0]
 8008d3e:	4619      	mov	r1, r3
 8008d40:	4620      	mov	r0, r4
 8008d42:	f7fc fdd7 	bl	80058f4 <_ZN8touchgfx3Box8setColorENS_9colortypeE>
    AnomalyDetection_Border_1_1_1.setBorderColor(touchgfx::Color::getColorFromRGB(237, 102, 99));
 8008d46:	f507 731a 	add.w	r3, r7, #616	@ 0x268
 8008d4a:	f5a3 7319 	sub.w	r3, r3, #612	@ 0x264
 8008d4e:	681b      	ldr	r3, [r3, #0]
 8008d50:	f603 142c 	addw	r4, r3, #2348	@ 0x92c
 8008d54:	23ed      	movs	r3, #237	@ 0xed
 8008d56:	f887 3240 	strb.w	r3, [r7, #576]	@ 0x240
 8008d5a:	2366      	movs	r3, #102	@ 0x66
 8008d5c:	f887 323f 	strb.w	r3, [r7, #575]	@ 0x23f
 8008d60:	2363      	movs	r3, #99	@ 0x63
 8008d62:	f887 323e 	strb.w	r3, [r7, #574]	@ 0x23e
 8008d66:	f897 3240 	ldrb.w	r3, [r7, #576]	@ 0x240
 8008d6a:	041a      	lsls	r2, r3, #16
 8008d6c:	f897 323f 	ldrb.w	r3, [r7, #575]	@ 0x23f
 8008d70:	021b      	lsls	r3, r3, #8
 8008d72:	431a      	orrs	r2, r3
 8008d74:	f897 323e 	ldrb.w	r3, [r7, #574]	@ 0x23e
 8008d78:	4313      	orrs	r3, r2
 8008d7a:	f043 427f 	orr.w	r2, r3, #4278190080	@ 0xff000000
 8008d7e:	f107 03e0 	add.w	r3, r7, #224	@ 0xe0
 8008d82:	4611      	mov	r1, r2
 8008d84:	4618      	mov	r0, r3
 8008d86:	f7fc fce4 	bl	8005752 <_ZN8touchgfx9colortypeC1Em>
 8008d8a:	f507 731a 	add.w	r3, r7, #616	@ 0x268
 8008d8e:	f5a3 73c4 	sub.w	r3, r3, #392	@ 0x188
 8008d92:	681b      	ldr	r3, [r3, #0]
 8008d94:	4619      	mov	r1, r3
 8008d96:	4620      	mov	r0, r4
 8008d98:	f7fc fe1e 	bl	80059d8 <_ZN8touchgfx13BoxWithBorder14setBorderColorENS_9colortypeE>
    AnomalyDetection_Border_1_1_1.setBorderSize(3);
 8008d9c:	f507 731a 	add.w	r3, r7, #616	@ 0x268
 8008da0:	f5a3 7319 	sub.w	r3, r3, #612	@ 0x264
 8008da4:	681b      	ldr	r3, [r3, #0]
 8008da6:	f603 132c 	addw	r3, r3, #2348	@ 0x92c
 8008daa:	2103      	movs	r1, #3
 8008dac:	4618      	mov	r0, r3
 8008dae:	f7fc fe21 	bl	80059f4 <_ZN8touchgfx13BoxWithBorder13setBorderSizeEt>
    Alarm_Mute_Indicator_Textbox_1_1.add(AnomalyDetection_Border_1_1_1);
 8008db2:	f507 731a 	add.w	r3, r7, #616	@ 0x268
 8008db6:	f5a3 7319 	sub.w	r3, r3, #612	@ 0x264
 8008dba:	681b      	ldr	r3, [r3, #0]
 8008dbc:	f503 6210 	add.w	r2, r3, #2304	@ 0x900
 8008dc0:	f507 731a 	add.w	r3, r7, #616	@ 0x268
 8008dc4:	f5a3 7319 	sub.w	r3, r3, #612	@ 0x264
 8008dc8:	681b      	ldr	r3, [r3, #0]
 8008dca:	f603 132c 	addw	r3, r3, #2348	@ 0x92c
 8008dce:	4619      	mov	r1, r3
 8008dd0:	4610      	mov	r0, r2
 8008dd2:	f00e fd8d 	bl	80178f0 <_ZN8touchgfx9Container3addERNS_8DrawableE>

    AnomalyDetection_Text_1_1.setXY(9, 5);
 8008dd6:	f507 731a 	add.w	r3, r7, #616	@ 0x268
 8008dda:	f5a3 7319 	sub.w	r3, r3, #612	@ 0x264
 8008dde:	681b      	ldr	r3, [r3, #0]
 8008de0:	f503 6316 	add.w	r3, r3, #2400	@ 0x960
 8008de4:	2205      	movs	r2, #5
 8008de6:	2109      	movs	r1, #9
 8008de8:	4618      	mov	r0, r3
 8008dea:	f7fb f8b5 	bl	8003f58 <_ZN8touchgfx8Drawable5setXYEss>
    AnomalyDetection_Text_1_1.setColor(touchgfx::Color::getColorFromRGB(255, 255, 255));
 8008dee:	f507 731a 	add.w	r3, r7, #616	@ 0x268
 8008df2:	f5a3 7319 	sub.w	r3, r3, #612	@ 0x264
 8008df6:	681b      	ldr	r3, [r3, #0]
 8008df8:	f503 6416 	add.w	r4, r3, #2400	@ 0x960
 8008dfc:	23ff      	movs	r3, #255	@ 0xff
 8008dfe:	f887 3243 	strb.w	r3, [r7, #579]	@ 0x243
 8008e02:	23ff      	movs	r3, #255	@ 0xff
 8008e04:	f887 3242 	strb.w	r3, [r7, #578]	@ 0x242
 8008e08:	23ff      	movs	r3, #255	@ 0xff
 8008e0a:	f887 3241 	strb.w	r3, [r7, #577]	@ 0x241
 8008e0e:	f897 3243 	ldrb.w	r3, [r7, #579]	@ 0x243
 8008e12:	041a      	lsls	r2, r3, #16
 8008e14:	f897 3242 	ldrb.w	r3, [r7, #578]	@ 0x242
 8008e18:	021b      	lsls	r3, r3, #8
 8008e1a:	431a      	orrs	r2, r3
 8008e1c:	f897 3241 	ldrb.w	r3, [r7, #577]	@ 0x241
 8008e20:	4313      	orrs	r3, r2
 8008e22:	f043 427f 	orr.w	r2, r3, #4278190080	@ 0xff000000
 8008e26:	f107 03dc 	add.w	r3, r7, #220	@ 0xdc
 8008e2a:	4611      	mov	r1, r2
 8008e2c:	4618      	mov	r0, r3
 8008e2e:	f7fc fc90 	bl	8005752 <_ZN8touchgfx9colortypeC1Em>
 8008e32:	f507 731a 	add.w	r3, r7, #616	@ 0x268
 8008e36:	f5a3 73c6 	sub.w	r3, r3, #396	@ 0x18c
 8008e3a:	681b      	ldr	r3, [r3, #0]
 8008e3c:	461a      	mov	r2, r3
 8008e3e:	f8c7 4244 	str.w	r4, [r7, #580]	@ 0x244
 8008e42:	f507 731a 	add.w	r3, r7, #616	@ 0x268
 8008e46:	f5a3 7316 	sub.w	r3, r3, #600	@ 0x258
 8008e4a:	601a      	str	r2, [r3, #0]
        this->color = color;
 8008e4c:	f8d7 3244 	ldr.w	r3, [r7, #580]	@ 0x244
 8008e50:	f507 721a 	add.w	r2, r7, #616	@ 0x268
 8008e54:	f5a2 7216 	sub.w	r2, r2, #600	@ 0x258
 8008e58:	6812      	ldr	r2, [r2, #0]
 8008e5a:	631a      	str	r2, [r3, #48]	@ 0x30
    }
 8008e5c:	bf00      	nop
    AnomalyDetection_Text_1_1.setLinespacing(0);
 8008e5e:	f507 731a 	add.w	r3, r7, #616	@ 0x268
 8008e62:	f5a3 7319 	sub.w	r3, r3, #612	@ 0x264
 8008e66:	681b      	ldr	r3, [r3, #0]
 8008e68:	f503 6316 	add.w	r3, r3, #2400	@ 0x960
 8008e6c:	f8c7 324c 	str.w	r3, [r7, #588]	@ 0x24c
 8008e70:	2300      	movs	r3, #0
 8008e72:	f8a7 324a 	strh.w	r3, [r7, #586]	@ 0x24a
        linespace = space;
 8008e76:	f8d7 324c 	ldr.w	r3, [r7, #588]	@ 0x24c
 8008e7a:	f8b7 224a 	ldrh.w	r2, [r7, #586]	@ 0x24a
 8008e7e:	869a      	strh	r2, [r3, #52]	@ 0x34
    }
 8008e80:	bf00      	nop
    AnomalyDetection_Text_1_1.setTypedText(touchgfx::TypedText(T___SINGLEUSE_BBOL));
 8008e82:	f507 731a 	add.w	r3, r7, #616	@ 0x268
 8008e86:	f5a3 7319 	sub.w	r3, r3, #612	@ 0x264
 8008e8a:	681b      	ldr	r3, [r3, #0]
 8008e8c:	f503 6416 	add.w	r4, r3, #2400	@ 0x960
 8008e90:	f107 03a8 	add.w	r3, r7, #168	@ 0xa8
 8008e94:	2103      	movs	r1, #3
 8008e96:	4618      	mov	r0, r3
 8008e98:	f7fc fdbc 	bl	8005a14 <_ZN8touchgfx9TypedTextC1Et>
 8008e9c:	f107 03a8 	add.w	r3, r7, #168	@ 0xa8
 8008ea0:	4619      	mov	r1, r3
 8008ea2:	4620      	mov	r0, r4
 8008ea4:	f010 fc4f 	bl	8019746 <_ZN8touchgfx8TextArea12setTypedTextERKNS_9TypedTextE>
 8008ea8:	f107 03a8 	add.w	r3, r7, #168	@ 0xa8
 8008eac:	4618      	mov	r0, r3
 8008eae:	f7fa ff47 	bl	8003d40 <_ZN8touchgfx9TypedTextD1Ev>
    Alarm_Mute_Indicator_Textbox_1_1.add(AnomalyDetection_Text_1_1);
 8008eb2:	f507 731a 	add.w	r3, r7, #616	@ 0x268
 8008eb6:	f5a3 7319 	sub.w	r3, r3, #612	@ 0x264
 8008eba:	681b      	ldr	r3, [r3, #0]
 8008ebc:	f503 6210 	add.w	r2, r3, #2304	@ 0x900
 8008ec0:	f507 731a 	add.w	r3, r7, #616	@ 0x268
 8008ec4:	f5a3 7319 	sub.w	r3, r3, #612	@ 0x264
 8008ec8:	681b      	ldr	r3, [r3, #0]
 8008eca:	f503 6316 	add.w	r3, r3, #2400	@ 0x960
 8008ece:	4619      	mov	r1, r3
 8008ed0:	4610      	mov	r0, r2
 8008ed2:	f00e fd0d 	bl	80178f0 <_ZN8touchgfx9Container3addERNS_8DrawableE>

    Disabled_Button2.setXY(92, 140);
 8008ed6:	f507 731a 	add.w	r3, r7, #616	@ 0x268
 8008eda:	f5a3 7319 	sub.w	r3, r3, #612	@ 0x264
 8008ede:	681b      	ldr	r3, [r3, #0]
 8008ee0:	f603 139c 	addw	r3, r3, #2460	@ 0x99c
 8008ee4:	228c      	movs	r2, #140	@ 0x8c
 8008ee6:	215c      	movs	r1, #92	@ 0x5c
 8008ee8:	4618      	mov	r0, r3
 8008eea:	f7fb f835 	bl	8003f58 <_ZN8touchgfx8Drawable5setXYEss>
    Disabled_Button2.setBitmap(touchgfx::Bitmap(BITMAP_RECT_BUTTON_PRESSED_ID));
 8008eee:	f507 731a 	add.w	r3, r7, #616	@ 0x268
 8008ef2:	f5a3 7319 	sub.w	r3, r3, #612	@ 0x264
 8008ef6:	681b      	ldr	r3, [r3, #0]
 8008ef8:	f603 149c 	addw	r4, r3, #2460	@ 0x99c
 8008efc:	f107 03b0 	add.w	r3, r7, #176	@ 0xb0
 8008f00:	2102      	movs	r1, #2
 8008f02:	4618      	mov	r0, r3
 8008f04:	f7fc fc34 	bl	8005770 <_ZN8touchgfx6BitmapC1Et>
 8008f08:	f107 03b0 	add.w	r3, r7, #176	@ 0xb0
 8008f0c:	4619      	mov	r1, r3
 8008f0e:	4620      	mov	r0, r4
 8008f10:	f010 fe93 	bl	8019c3a <_ZN8touchgfx5Image9setBitmapERKNS_6BitmapE>

    Disabled_Button1.setXY(309, 141);
 8008f14:	f507 731a 	add.w	r3, r7, #616	@ 0x268
 8008f18:	f5a3 7319 	sub.w	r3, r3, #612	@ 0x264
 8008f1c:	681b      	ldr	r3, [r3, #0]
 8008f1e:	f603 13c8 	addw	r3, r3, #2504	@ 0x9c8
 8008f22:	228d      	movs	r2, #141	@ 0x8d
 8008f24:	f240 1135 	movw	r1, #309	@ 0x135
 8008f28:	4618      	mov	r0, r3
 8008f2a:	f7fb f815 	bl	8003f58 <_ZN8touchgfx8Drawable5setXYEss>
    Disabled_Button1.setBitmap(touchgfx::Bitmap(BITMAP_RECT_BUTTON_PRESSED_ID));
 8008f2e:	f507 731a 	add.w	r3, r7, #616	@ 0x268
 8008f32:	f5a3 7319 	sub.w	r3, r3, #612	@ 0x264
 8008f36:	681b      	ldr	r3, [r3, #0]
 8008f38:	f603 14c8 	addw	r4, r3, #2504	@ 0x9c8
 8008f3c:	f107 03b4 	add.w	r3, r7, #180	@ 0xb4
 8008f40:	2102      	movs	r1, #2
 8008f42:	4618      	mov	r0, r3
 8008f44:	f7fc fc14 	bl	8005770 <_ZN8touchgfx6BitmapC1Et>
 8008f48:	f107 03b4 	add.w	r3, r7, #180	@ 0xb4
 8008f4c:	4619      	mov	r1, r3
 8008f4e:	4620      	mov	r0, r4
 8008f50:	f010 fe73 	bl	8019c3a <_ZN8touchgfx5Image9setBitmapERKNS_6BitmapE>

    Alert_Mute_Button.setXY(92, 140);
 8008f54:	f507 731a 	add.w	r3, r7, #616	@ 0x268
 8008f58:	f5a3 7319 	sub.w	r3, r3, #612	@ 0x264
 8008f5c:	681b      	ldr	r3, [r3, #0]
 8008f5e:	f603 13f4 	addw	r3, r3, #2548	@ 0x9f4
 8008f62:	228c      	movs	r2, #140	@ 0x8c
 8008f64:	215c      	movs	r1, #92	@ 0x5c
 8008f66:	4618      	mov	r0, r3
 8008f68:	f7fa fff6 	bl	8003f58 <_ZN8touchgfx8Drawable5setXYEss>
    Alert_Mute_Button.setBitmaps(touchgfx::Bitmap(BITMAP_RECT_BUTTON_UNPRESSED_ID), touchgfx::Bitmap(BITMAP_RECT_BUTTON_PRESSED_ID));
 8008f6c:	f507 731a 	add.w	r3, r7, #616	@ 0x268
 8008f70:	f5a3 7319 	sub.w	r3, r3, #612	@ 0x264
 8008f74:	681b      	ldr	r3, [r3, #0]
 8008f76:	f603 14f4 	addw	r4, r3, #2548	@ 0x9f4
 8008f7a:	f107 03b8 	add.w	r3, r7, #184	@ 0xb8
 8008f7e:	2103      	movs	r1, #3
 8008f80:	4618      	mov	r0, r3
 8008f82:	f7fc fbf5 	bl	8005770 <_ZN8touchgfx6BitmapC1Et>
 8008f86:	f107 03bc 	add.w	r3, r7, #188	@ 0xbc
 8008f8a:	2102      	movs	r1, #2
 8008f8c:	4618      	mov	r0, r3
 8008f8e:	f7fc fbef 	bl	8005770 <_ZN8touchgfx6BitmapC1Et>
 8008f92:	f107 02bc 	add.w	r2, r7, #188	@ 0xbc
 8008f96:	f107 03b8 	add.w	r3, r7, #184	@ 0xb8
 8008f9a:	4619      	mov	r1, r3
 8008f9c:	4620      	mov	r0, r4
 8008f9e:	f010 fc09 	bl	80197b4 <_ZN8touchgfx6Button10setBitmapsERKNS_6BitmapES3_>
    Alert_Mute_Button.setAction(buttonCallback);
 8008fa2:	f507 731a 	add.w	r3, r7, #616	@ 0x268
 8008fa6:	f5a3 7319 	sub.w	r3, r3, #612	@ 0x264
 8008faa:	681b      	ldr	r3, [r3, #0]
 8008fac:	f603 12f4 	addw	r2, r3, #2548	@ 0x9f4
 8008fb0:	f507 731a 	add.w	r3, r7, #616	@ 0x268
 8008fb4:	f5a3 7319 	sub.w	r3, r3, #612	@ 0x264
 8008fb8:	681b      	ldr	r3, [r3, #0]
 8008fba:	f603 23f8 	addw	r3, r3, #2808	@ 0xaf8
 8008fbe:	4619      	mov	r1, r3
 8008fc0:	4610      	mov	r0, r2
 8008fc2:	f7fc fd9d 	bl	8005b00 <_ZN8touchgfx14AbstractButton9setActionERNS_15GenericCallbackIRKS0_vvEE>

    Localize_Button.setXY(309, 140);
 8008fc6:	f507 731a 	add.w	r3, r7, #616	@ 0x268
 8008fca:	f5a3 7319 	sub.w	r3, r3, #612	@ 0x264
 8008fce:	681b      	ldr	r3, [r3, #0]
 8008fd0:	f603 2328 	addw	r3, r3, #2600	@ 0xa28
 8008fd4:	228c      	movs	r2, #140	@ 0x8c
 8008fd6:	f240 1135 	movw	r1, #309	@ 0x135
 8008fda:	4618      	mov	r0, r3
 8008fdc:	f7fa ffbc 	bl	8003f58 <_ZN8touchgfx8Drawable5setXYEss>
    Localize_Button.setBitmaps(touchgfx::Bitmap(BITMAP_RECT_BUTTON_UNPRESSED_ID), touchgfx::Bitmap(BITMAP_RECT_BUTTON_PRESSED_ID));
 8008fe0:	f507 731a 	add.w	r3, r7, #616	@ 0x268
 8008fe4:	f5a3 7319 	sub.w	r3, r3, #612	@ 0x264
 8008fe8:	681b      	ldr	r3, [r3, #0]
 8008fea:	f603 2428 	addw	r4, r3, #2600	@ 0xa28
 8008fee:	f107 03c0 	add.w	r3, r7, #192	@ 0xc0
 8008ff2:	2103      	movs	r1, #3
 8008ff4:	4618      	mov	r0, r3
 8008ff6:	f7fc fbbb 	bl	8005770 <_ZN8touchgfx6BitmapC1Et>
 8008ffa:	f107 03c4 	add.w	r3, r7, #196	@ 0xc4
 8008ffe:	2102      	movs	r1, #2
 8009000:	4618      	mov	r0, r3
 8009002:	f7fc fbb5 	bl	8005770 <_ZN8touchgfx6BitmapC1Et>
 8009006:	f107 02c4 	add.w	r2, r7, #196	@ 0xc4
 800900a:	f107 03c0 	add.w	r3, r7, #192	@ 0xc0
 800900e:	4619      	mov	r1, r3
 8009010:	4620      	mov	r0, r4
 8009012:	f010 fbcf 	bl	80197b4 <_ZN8touchgfx6Button10setBitmapsERKNS_6BitmapES3_>
    Localize_Button.setAction(buttonCallback);
 8009016:	f507 731a 	add.w	r3, r7, #616	@ 0x268
 800901a:	f5a3 7319 	sub.w	r3, r3, #612	@ 0x264
 800901e:	681b      	ldr	r3, [r3, #0]
 8009020:	f603 2228 	addw	r2, r3, #2600	@ 0xa28
 8009024:	f507 731a 	add.w	r3, r7, #616	@ 0x268
 8009028:	f5a3 7319 	sub.w	r3, r3, #612	@ 0x264
 800902c:	681b      	ldr	r3, [r3, #0]
 800902e:	f603 23f8 	addw	r3, r3, #2808	@ 0xaf8
 8009032:	4619      	mov	r1, r3
 8009034:	4610      	mov	r0, r2
 8009036:	f7fc fd63 	bl	8005b00 <_ZN8touchgfx14AbstractButton9setActionERNS_15GenericCallbackIRKS0_vvEE>

    Alarm_Mute_Indicator_Textbox_1_1_1.setPosition(283, 117, 129, 20);
 800903a:	f507 731a 	add.w	r3, r7, #616	@ 0x268
 800903e:	f5a3 7319 	sub.w	r3, r3, #612	@ 0x264
 8009042:	681b      	ldr	r3, [r3, #0]
 8009044:	f603 205c 	addw	r0, r3, #2652	@ 0xa5c
 8009048:	2314      	movs	r3, #20
 800904a:	9300      	str	r3, [sp, #0]
 800904c:	2381      	movs	r3, #129	@ 0x81
 800904e:	2275      	movs	r2, #117	@ 0x75
 8009050:	f240 111b 	movw	r1, #283	@ 0x11b
 8009054:	f7fa ff27 	bl	8003ea6 <_ZN8touchgfx8Drawable11setPositionEssss>

    AnomalyDetection_Border_1_1_1_1.setPosition(0, 3, 129, 17);
 8009058:	f507 731a 	add.w	r3, r7, #616	@ 0x268
 800905c:	f5a3 7319 	sub.w	r3, r3, #612	@ 0x264
 8009060:	681b      	ldr	r3, [r3, #0]
 8009062:	f603 2088 	addw	r0, r3, #2696	@ 0xa88
 8009066:	2311      	movs	r3, #17
 8009068:	9300      	str	r3, [sp, #0]
 800906a:	2381      	movs	r3, #129	@ 0x81
 800906c:	2203      	movs	r2, #3
 800906e:	2100      	movs	r1, #0
 8009070:	f7fa ff19 	bl	8003ea6 <_ZN8touchgfx8Drawable11setPositionEssss>
    AnomalyDetection_Border_1_1_1_1.setColor(touchgfx::Color::getColorFromRGB(0, 0, 0));
 8009074:	f507 731a 	add.w	r3, r7, #616	@ 0x268
 8009078:	f5a3 7319 	sub.w	r3, r3, #612	@ 0x264
 800907c:	681b      	ldr	r3, [r3, #0]
 800907e:	f603 2488 	addw	r4, r3, #2696	@ 0xa88
 8009082:	2300      	movs	r3, #0
 8009084:	f887 3255 	strb.w	r3, [r7, #597]	@ 0x255
 8009088:	2300      	movs	r3, #0
 800908a:	f887 3254 	strb.w	r3, [r7, #596]	@ 0x254
 800908e:	2300      	movs	r3, #0
 8009090:	f887 3253 	strb.w	r3, [r7, #595]	@ 0x253
 8009094:	f897 3255 	ldrb.w	r3, [r7, #597]	@ 0x255
 8009098:	041a      	lsls	r2, r3, #16
 800909a:	f897 3254 	ldrb.w	r3, [r7, #596]	@ 0x254
 800909e:	021b      	lsls	r3, r3, #8
 80090a0:	431a      	orrs	r2, r3
 80090a2:	f897 3253 	ldrb.w	r3, [r7, #595]	@ 0x253
 80090a6:	4313      	orrs	r3, r2
 80090a8:	f043 427f 	orr.w	r2, r3, #4278190080	@ 0xff000000
 80090ac:	f107 03d8 	add.w	r3, r7, #216	@ 0xd8
 80090b0:	4611      	mov	r1, r2
 80090b2:	4618      	mov	r0, r3
 80090b4:	f7fc fb4d 	bl	8005752 <_ZN8touchgfx9colortypeC1Em>
 80090b8:	f507 731a 	add.w	r3, r7, #616	@ 0x268
 80090bc:	f5a3 73c8 	sub.w	r3, r3, #400	@ 0x190
 80090c0:	681b      	ldr	r3, [r3, #0]
 80090c2:	4619      	mov	r1, r3
 80090c4:	4620      	mov	r0, r4
 80090c6:	f7fc fc15 	bl	80058f4 <_ZN8touchgfx3Box8setColorENS_9colortypeE>
    AnomalyDetection_Border_1_1_1_1.setBorderColor(touchgfx::Color::getColorFromRGB(237, 102, 99));
 80090ca:	f507 731a 	add.w	r3, r7, #616	@ 0x268
 80090ce:	f5a3 7319 	sub.w	r3, r3, #612	@ 0x264
 80090d2:	681b      	ldr	r3, [r3, #0]
 80090d4:	f603 2488 	addw	r4, r3, #2696	@ 0xa88
 80090d8:	23ed      	movs	r3, #237	@ 0xed
 80090da:	f887 3258 	strb.w	r3, [r7, #600]	@ 0x258
 80090de:	2366      	movs	r3, #102	@ 0x66
 80090e0:	f887 3257 	strb.w	r3, [r7, #599]	@ 0x257
 80090e4:	2363      	movs	r3, #99	@ 0x63
 80090e6:	f887 3256 	strb.w	r3, [r7, #598]	@ 0x256
 80090ea:	f897 3258 	ldrb.w	r3, [r7, #600]	@ 0x258
 80090ee:	041a      	lsls	r2, r3, #16
 80090f0:	f897 3257 	ldrb.w	r3, [r7, #599]	@ 0x257
 80090f4:	021b      	lsls	r3, r3, #8
 80090f6:	431a      	orrs	r2, r3
 80090f8:	f897 3256 	ldrb.w	r3, [r7, #598]	@ 0x256
 80090fc:	4313      	orrs	r3, r2
 80090fe:	f043 427f 	orr.w	r2, r3, #4278190080	@ 0xff000000
 8009102:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 8009106:	4611      	mov	r1, r2
 8009108:	4618      	mov	r0, r3
 800910a:	f7fc fb22 	bl	8005752 <_ZN8touchgfx9colortypeC1Em>
 800910e:	f507 731a 	add.w	r3, r7, #616	@ 0x268
 8009112:	f5a3 73ca 	sub.w	r3, r3, #404	@ 0x194
 8009116:	681b      	ldr	r3, [r3, #0]
 8009118:	4619      	mov	r1, r3
 800911a:	4620      	mov	r0, r4
 800911c:	f7fc fc5c 	bl	80059d8 <_ZN8touchgfx13BoxWithBorder14setBorderColorENS_9colortypeE>
    AnomalyDetection_Border_1_1_1_1.setBorderSize(3);
 8009120:	f507 731a 	add.w	r3, r7, #616	@ 0x268
 8009124:	f5a3 7319 	sub.w	r3, r3, #612	@ 0x264
 8009128:	681b      	ldr	r3, [r3, #0]
 800912a:	f603 2388 	addw	r3, r3, #2696	@ 0xa88
 800912e:	2103      	movs	r1, #3
 8009130:	4618      	mov	r0, r3
 8009132:	f7fc fc5f 	bl	80059f4 <_ZN8touchgfx13BoxWithBorder13setBorderSizeEt>
    Alarm_Mute_Indicator_Textbox_1_1_1.add(AnomalyDetection_Border_1_1_1_1);
 8009136:	f507 731a 	add.w	r3, r7, #616	@ 0x268
 800913a:	f5a3 7319 	sub.w	r3, r3, #612	@ 0x264
 800913e:	681b      	ldr	r3, [r3, #0]
 8009140:	f603 225c 	addw	r2, r3, #2652	@ 0xa5c
 8009144:	f507 731a 	add.w	r3, r7, #616	@ 0x268
 8009148:	f5a3 7319 	sub.w	r3, r3, #612	@ 0x264
 800914c:	681b      	ldr	r3, [r3, #0]
 800914e:	f603 2388 	addw	r3, r3, #2696	@ 0xa88
 8009152:	4619      	mov	r1, r3
 8009154:	4610      	mov	r0, r2
 8009156:	f00e fbcb 	bl	80178f0 <_ZN8touchgfx9Container3addERNS_8DrawableE>

    AnomalyDetection_Text_1_1_1.setXY(15, 5);
 800915a:	f507 731a 	add.w	r3, r7, #616	@ 0x268
 800915e:	f5a3 7319 	sub.w	r3, r3, #612	@ 0x264
 8009162:	681b      	ldr	r3, [r3, #0]
 8009164:	f603 23bc 	addw	r3, r3, #2748	@ 0xabc
 8009168:	2205      	movs	r2, #5
 800916a:	210f      	movs	r1, #15
 800916c:	4618      	mov	r0, r3
 800916e:	f7fa fef3 	bl	8003f58 <_ZN8touchgfx8Drawable5setXYEss>
    AnomalyDetection_Text_1_1_1.setColor(touchgfx::Color::getColorFromRGB(255, 255, 255));
 8009172:	f507 731a 	add.w	r3, r7, #616	@ 0x268
 8009176:	f5a3 7319 	sub.w	r3, r3, #612	@ 0x264
 800917a:	681b      	ldr	r3, [r3, #0]
 800917c:	f603 24bc 	addw	r4, r3, #2748	@ 0xabc
 8009180:	23ff      	movs	r3, #255	@ 0xff
 8009182:	f887 325b 	strb.w	r3, [r7, #603]	@ 0x25b
 8009186:	23ff      	movs	r3, #255	@ 0xff
 8009188:	f887 325a 	strb.w	r3, [r7, #602]	@ 0x25a
 800918c:	23ff      	movs	r3, #255	@ 0xff
 800918e:	f887 3259 	strb.w	r3, [r7, #601]	@ 0x259
 8009192:	f897 325b 	ldrb.w	r3, [r7, #603]	@ 0x25b
 8009196:	041a      	lsls	r2, r3, #16
 8009198:	f897 325a 	ldrb.w	r3, [r7, #602]	@ 0x25a
 800919c:	021b      	lsls	r3, r3, #8
 800919e:	431a      	orrs	r2, r3
 80091a0:	f897 3259 	ldrb.w	r3, [r7, #601]	@ 0x259
 80091a4:	4313      	orrs	r3, r2
 80091a6:	f043 427f 	orr.w	r2, r3, #4278190080	@ 0xff000000
 80091aa:	f107 03d0 	add.w	r3, r7, #208	@ 0xd0
 80091ae:	4611      	mov	r1, r2
 80091b0:	4618      	mov	r0, r3
 80091b2:	f7fc face 	bl	8005752 <_ZN8touchgfx9colortypeC1Em>
 80091b6:	f507 731a 	add.w	r3, r7, #616	@ 0x268
 80091ba:	f5a3 73cc 	sub.w	r3, r3, #408	@ 0x198
 80091be:	681b      	ldr	r3, [r3, #0]
 80091c0:	461a      	mov	r2, r3
 80091c2:	f8c7 425c 	str.w	r4, [r7, #604]	@ 0x25c
 80091c6:	f507 731a 	add.w	r3, r7, #616	@ 0x268
 80091ca:	f5a3 7317 	sub.w	r3, r3, #604	@ 0x25c
 80091ce:	601a      	str	r2, [r3, #0]
        this->color = color;
 80091d0:	f8d7 325c 	ldr.w	r3, [r7, #604]	@ 0x25c
 80091d4:	f507 721a 	add.w	r2, r7, #616	@ 0x268
 80091d8:	f5a2 7217 	sub.w	r2, r2, #604	@ 0x25c
 80091dc:	6812      	ldr	r2, [r2, #0]
 80091de:	631a      	str	r2, [r3, #48]	@ 0x30
    }
 80091e0:	bf00      	nop
    AnomalyDetection_Text_1_1_1.setLinespacing(0);
 80091e2:	f507 731a 	add.w	r3, r7, #616	@ 0x268
 80091e6:	f5a3 7319 	sub.w	r3, r3, #612	@ 0x264
 80091ea:	681b      	ldr	r3, [r3, #0]
 80091ec:	f603 23bc 	addw	r3, r3, #2748	@ 0xabc
 80091f0:	f8c7 3264 	str.w	r3, [r7, #612]	@ 0x264
 80091f4:	2300      	movs	r3, #0
 80091f6:	f8a7 3262 	strh.w	r3, [r7, #610]	@ 0x262
        linespace = space;
 80091fa:	f8d7 3264 	ldr.w	r3, [r7, #612]	@ 0x264
 80091fe:	f8b7 2262 	ldrh.w	r2, [r7, #610]	@ 0x262
 8009202:	869a      	strh	r2, [r3, #52]	@ 0x34
    }
 8009204:	bf00      	nop
    AnomalyDetection_Text_1_1_1.setTypedText(touchgfx::TypedText(T___SINGLEUSE_V6ST));
 8009206:	f507 731a 	add.w	r3, r7, #616	@ 0x268
 800920a:	f5a3 7319 	sub.w	r3, r3, #612	@ 0x264
 800920e:	681b      	ldr	r3, [r3, #0]
 8009210:	f603 24bc 	addw	r4, r3, #2748	@ 0xabc
 8009214:	f107 03c8 	add.w	r3, r7, #200	@ 0xc8
 8009218:	2104      	movs	r1, #4
 800921a:	4618      	mov	r0, r3
 800921c:	f7fc fbfa 	bl	8005a14 <_ZN8touchgfx9TypedTextC1Et>
 8009220:	f107 03c8 	add.w	r3, r7, #200	@ 0xc8
 8009224:	4619      	mov	r1, r3
 8009226:	4620      	mov	r0, r4
 8009228:	f010 fa8d 	bl	8019746 <_ZN8touchgfx8TextArea12setTypedTextERKNS_9TypedTextE>
 800922c:	f107 03c8 	add.w	r3, r7, #200	@ 0xc8
 8009230:	4618      	mov	r0, r3
 8009232:	f7fa fd85 	bl	8003d40 <_ZN8touchgfx9TypedTextD1Ev>
    Alarm_Mute_Indicator_Textbox_1_1_1.add(AnomalyDetection_Text_1_1_1);
 8009236:	f507 731a 	add.w	r3, r7, #616	@ 0x268
 800923a:	f5a3 7319 	sub.w	r3, r3, #612	@ 0x264
 800923e:	681b      	ldr	r3, [r3, #0]
 8009240:	f603 225c 	addw	r2, r3, #2652	@ 0xa5c
 8009244:	f507 731a 	add.w	r3, r7, #616	@ 0x268
 8009248:	f5a3 7319 	sub.w	r3, r3, #612	@ 0x264
 800924c:	681b      	ldr	r3, [r3, #0]
 800924e:	f603 23bc 	addw	r3, r3, #2748	@ 0xabc
 8009252:	4619      	mov	r1, r3
 8009254:	4610      	mov	r0, r2
 8009256:	f00e fb4b 	bl	80178f0 <_ZN8touchgfx9Container3addERNS_8DrawableE>

    add(__background);
 800925a:	f507 731a 	add.w	r3, r7, #616	@ 0x268
 800925e:	f5a3 7319 	sub.w	r3, r3, #612	@ 0x264
 8009262:	681a      	ldr	r2, [r3, #0]
 8009264:	f507 731a 	add.w	r3, r7, #616	@ 0x268
 8009268:	f5a3 7319 	sub.w	r3, r3, #612	@ 0x264
 800926c:	681b      	ldr	r3, [r3, #0]
 800926e:	3340      	adds	r3, #64	@ 0x40
 8009270:	4619      	mov	r1, r3
 8009272:	4610      	mov	r0, r2
 8009274:	f7fc fb0a 	bl	800588c <_ZN8touchgfx6Screen3addERNS_8DrawableE>
    add(Main_Background);
 8009278:	f507 731a 	add.w	r3, r7, #616	@ 0x268
 800927c:	f5a3 7319 	sub.w	r3, r3, #612	@ 0x264
 8009280:	681a      	ldr	r2, [r3, #0]
 8009282:	f507 731a 	add.w	r3, r7, #616	@ 0x268
 8009286:	f5a3 7319 	sub.w	r3, r3, #612	@ 0x264
 800928a:	681b      	ldr	r3, [r3, #0]
 800928c:	336c      	adds	r3, #108	@ 0x6c
 800928e:	4619      	mov	r1, r3
 8009290:	4610      	mov	r0, r2
 8009292:	f7fc fafb 	bl	800588c <_ZN8touchgfx6Screen3addERNS_8DrawableE>
    add(Button_Panel);
 8009296:	f507 731a 	add.w	r3, r7, #616	@ 0x268
 800929a:	f5a3 7319 	sub.w	r3, r3, #612	@ 0x264
 800929e:	681a      	ldr	r2, [r3, #0]
 80092a0:	f507 731a 	add.w	r3, r7, #616	@ 0x268
 80092a4:	f5a3 7319 	sub.w	r3, r3, #612	@ 0x264
 80092a8:	681b      	ldr	r3, [r3, #0]
 80092aa:	3398      	adds	r3, #152	@ 0x98
 80092ac:	4619      	mov	r1, r3
 80092ae:	4610      	mov	r0, r2
 80092b0:	f7fc faec 	bl	800588c <_ZN8touchgfx6Screen3addERNS_8DrawableE>
    add(Message_panel);
 80092b4:	f507 731a 	add.w	r3, r7, #616	@ 0x268
 80092b8:	f5a3 7319 	sub.w	r3, r3, #612	@ 0x264
 80092bc:	681a      	ldr	r2, [r3, #0]
 80092be:	f507 731a 	add.w	r3, r7, #616	@ 0x268
 80092c2:	f5a3 7319 	sub.w	r3, r3, #612	@ 0x264
 80092c6:	681b      	ldr	r3, [r3, #0]
 80092c8:	f203 538c 	addw	r3, r3, #1420	@ 0x58c
 80092cc:	4619      	mov	r1, r3
 80092ce:	4610      	mov	r0, r2
 80092d0:	f7fc fadc 	bl	800588c <_ZN8touchgfx6Screen3addERNS_8DrawableE>
    add(Alarm_Mute_Indicator_Textbox_1_1);
 80092d4:	f507 731a 	add.w	r3, r7, #616	@ 0x268
 80092d8:	f5a3 7319 	sub.w	r3, r3, #612	@ 0x264
 80092dc:	681a      	ldr	r2, [r3, #0]
 80092de:	f507 731a 	add.w	r3, r7, #616	@ 0x268
 80092e2:	f5a3 7319 	sub.w	r3, r3, #612	@ 0x264
 80092e6:	681b      	ldr	r3, [r3, #0]
 80092e8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80092ec:	4619      	mov	r1, r3
 80092ee:	4610      	mov	r0, r2
 80092f0:	f7fc facc 	bl	800588c <_ZN8touchgfx6Screen3addERNS_8DrawableE>
    add(Disabled_Button2);
 80092f4:	f507 731a 	add.w	r3, r7, #616	@ 0x268
 80092f8:	f5a3 7319 	sub.w	r3, r3, #612	@ 0x264
 80092fc:	681a      	ldr	r2, [r3, #0]
 80092fe:	f507 731a 	add.w	r3, r7, #616	@ 0x268
 8009302:	f5a3 7319 	sub.w	r3, r3, #612	@ 0x264
 8009306:	681b      	ldr	r3, [r3, #0]
 8009308:	f603 139c 	addw	r3, r3, #2460	@ 0x99c
 800930c:	4619      	mov	r1, r3
 800930e:	4610      	mov	r0, r2
 8009310:	f7fc fabc 	bl	800588c <_ZN8touchgfx6Screen3addERNS_8DrawableE>
    add(Disabled_Button1);
 8009314:	f507 731a 	add.w	r3, r7, #616	@ 0x268
 8009318:	f5a3 7319 	sub.w	r3, r3, #612	@ 0x264
 800931c:	681a      	ldr	r2, [r3, #0]
 800931e:	f507 731a 	add.w	r3, r7, #616	@ 0x268
 8009322:	f5a3 7319 	sub.w	r3, r3, #612	@ 0x264
 8009326:	681b      	ldr	r3, [r3, #0]
 8009328:	f603 13c8 	addw	r3, r3, #2504	@ 0x9c8
 800932c:	4619      	mov	r1, r3
 800932e:	4610      	mov	r0, r2
 8009330:	f7fc faac 	bl	800588c <_ZN8touchgfx6Screen3addERNS_8DrawableE>
    add(Alert_Mute_Button);
 8009334:	f507 731a 	add.w	r3, r7, #616	@ 0x268
 8009338:	f5a3 7319 	sub.w	r3, r3, #612	@ 0x264
 800933c:	681a      	ldr	r2, [r3, #0]
 800933e:	f507 731a 	add.w	r3, r7, #616	@ 0x268
 8009342:	f5a3 7319 	sub.w	r3, r3, #612	@ 0x264
 8009346:	681b      	ldr	r3, [r3, #0]
 8009348:	f603 13f4 	addw	r3, r3, #2548	@ 0x9f4
 800934c:	4619      	mov	r1, r3
 800934e:	4610      	mov	r0, r2
 8009350:	f7fc fa9c 	bl	800588c <_ZN8touchgfx6Screen3addERNS_8DrawableE>
    add(Localize_Button);
 8009354:	f507 731a 	add.w	r3, r7, #616	@ 0x268
 8009358:	f5a3 7319 	sub.w	r3, r3, #612	@ 0x264
 800935c:	681a      	ldr	r2, [r3, #0]
 800935e:	f507 731a 	add.w	r3, r7, #616	@ 0x268
 8009362:	f5a3 7319 	sub.w	r3, r3, #612	@ 0x264
 8009366:	681b      	ldr	r3, [r3, #0]
 8009368:	f603 2328 	addw	r3, r3, #2600	@ 0xa28
 800936c:	4619      	mov	r1, r3
 800936e:	4610      	mov	r0, r2
 8009370:	f7fc fa8c 	bl	800588c <_ZN8touchgfx6Screen3addERNS_8DrawableE>
    add(Alarm_Mute_Indicator_Textbox_1_1_1);
 8009374:	f507 731a 	add.w	r3, r7, #616	@ 0x268
 8009378:	f5a3 7319 	sub.w	r3, r3, #612	@ 0x264
 800937c:	681a      	ldr	r2, [r3, #0]
 800937e:	f507 731a 	add.w	r3, r7, #616	@ 0x268
 8009382:	f5a3 7319 	sub.w	r3, r3, #612	@ 0x264
 8009386:	681b      	ldr	r3, [r3, #0]
 8009388:	f603 235c 	addw	r3, r3, #2652	@ 0xa5c
 800938c:	4619      	mov	r1, r3
 800938e:	4610      	mov	r0, r2
 8009390:	f7fc fa7c 	bl	800588c <_ZN8touchgfx6Screen3addERNS_8DrawableE>
}
 8009394:	f507 731a 	add.w	r3, r7, #616	@ 0x268
 8009398:	f5a3 7319 	sub.w	r3, r3, #612	@ 0x264
 800939c:	681b      	ldr	r3, [r3, #0]
 800939e:	4618      	mov	r0, r3
 80093a0:	f507 771b 	add.w	r7, r7, #620	@ 0x26c
 80093a4:	46bd      	mov	sp, r7
 80093a6:	bd90      	pop	{r4, r7, pc}

080093a8 <_ZN12MainViewBase11setupScreenEv>:

void MainViewBase::setupScreen()
{
 80093a8:	b480      	push	{r7}
 80093aa:	b083      	sub	sp, #12
 80093ac:	af00      	add	r7, sp, #0
 80093ae:	6078      	str	r0, [r7, #4]

}
 80093b0:	bf00      	nop
 80093b2:	370c      	adds	r7, #12
 80093b4:	46bd      	mov	sp, r7
 80093b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80093ba:	4770      	bx	lr

080093bc <_ZN12MainViewBase14handleKeyEventEh>:

//Handles when a key is pressed
void MainViewBase::handleKeyEvent(uint8_t key)
{
 80093bc:	b580      	push	{r7, lr}
 80093be:	b082      	sub	sp, #8
 80093c0:	af00      	add	r7, sp, #0
 80093c2:	6078      	str	r0, [r7, #4]
 80093c4:	460b      	mov	r3, r1
 80093c6:	70fb      	strb	r3, [r7, #3]
    if(87 == key)
 80093c8:	78fb      	ldrb	r3, [r7, #3]
 80093ca:	2b57      	cmp	r3, #87	@ 0x57
 80093cc:	d105      	bne.n	80093da <_ZN12MainViewBase14handleKeyEventEh+0x1e>
    {
        //Anomaly_Alert_Handler
        //When hardware button 87 clicked call virtual function
        //Call update_anomaly_alert
        update_anomaly_alert();
 80093ce:	687b      	ldr	r3, [r7, #4]
 80093d0:	681b      	ldr	r3, [r3, #0]
 80093d2:	3330      	adds	r3, #48	@ 0x30
 80093d4:	681b      	ldr	r3, [r3, #0]
 80093d6:	6878      	ldr	r0, [r7, #4]
 80093d8:	4798      	blx	r3
    }
    if(88 == key)
 80093da:	78fb      	ldrb	r3, [r7, #3]
 80093dc:	2b58      	cmp	r3, #88	@ 0x58
 80093de:	d105      	bne.n	80093ec <_ZN12MainViewBase14handleKeyEventEh+0x30>
    {
        //Set_Volume_Rotary_Encoder
        //When hardware button 88 clicked call virtual function
        //Call set_volume_encoder
        set_volume_encoder();
 80093e0:	687b      	ldr	r3, [r7, #4]
 80093e2:	681b      	ldr	r3, [r3, #0]
 80093e4:	333c      	adds	r3, #60	@ 0x3c
 80093e6:	681b      	ldr	r3, [r3, #0]
 80093e8:	6878      	ldr	r0, [r7, #4]
 80093ea:	4798      	blx	r3
    }
    if(89 == key)
 80093ec:	78fb      	ldrb	r3, [r7, #3]
 80093ee:	2b59      	cmp	r3, #89	@ 0x59
 80093f0:	d105      	bne.n	80093fe <_ZN12MainViewBase14handleKeyEventEh+0x42>
    {
        //Toggle_Voice_SW
        //When hardware button 89 clicked call virtual function
        //Call toggle_voice
        toggle_voice();
 80093f2:	687b      	ldr	r3, [r7, #4]
 80093f4:	681b      	ldr	r3, [r3, #0]
 80093f6:	3334      	adds	r3, #52	@ 0x34
 80093f8:	681b      	ldr	r3, [r3, #0]
 80093fa:	6878      	ldr	r0, [r7, #4]
 80093fc:	4798      	blx	r3
    }
    if(90 == key)
 80093fe:	78fb      	ldrb	r3, [r7, #3]
 8009400:	2b5a      	cmp	r3, #90	@ 0x5a
 8009402:	d105      	bne.n	8009410 <_ZN12MainViewBase14handleKeyEventEh+0x54>
    {
        //Alert_Mute_Pressed_Button
        //When hardware button 90 clicked call virtual function
        //Call alert_mute_pressed
        alert_mute_pressed();
 8009404:	687b      	ldr	r3, [r7, #4]
 8009406:	681b      	ldr	r3, [r3, #0]
 8009408:	3338      	adds	r3, #56	@ 0x38
 800940a:	681b      	ldr	r3, [r3, #0]
 800940c:	6878      	ldr	r0, [r7, #4]
 800940e:	4798      	blx	r3
    }
}
 8009410:	bf00      	nop
 8009412:	3708      	adds	r7, #8
 8009414:	46bd      	mov	sp, r7
 8009416:	bd80      	pop	{r7, pc}

08009418 <_ZN12MainViewBase21buttonCallbackHandlerERKN8touchgfx14AbstractButtonE>:

void MainViewBase::buttonCallbackHandler(const touchgfx::AbstractButton& src)
{
 8009418:	b580      	push	{r7, lr}
 800941a:	b082      	sub	sp, #8
 800941c:	af00      	add	r7, sp, #0
 800941e:	6078      	str	r0, [r7, #4]
 8009420:	6039      	str	r1, [r7, #0]
    if (&src == &Voice_Toggle_Button)
 8009422:	687b      	ldr	r3, [r7, #4]
 8009424:	f203 43f4 	addw	r3, r3, #1268	@ 0x4f4
 8009428:	683a      	ldr	r2, [r7, #0]
 800942a:	429a      	cmp	r2, r3
 800942c:	d106      	bne.n	800943c <_ZN12MainViewBase21buttonCallbackHandlerERKN8touchgfx14AbstractButtonE+0x24>
    {
        //Toggle_Voice
        //When Voice_Toggle_Button clicked call virtual function
        //Call toggle_voice
        toggle_voice();
 800942e:	687b      	ldr	r3, [r7, #4]
 8009430:	681b      	ldr	r3, [r3, #0]
 8009432:	3334      	adds	r3, #52	@ 0x34
 8009434:	681b      	ldr	r3, [r3, #0]
 8009436:	6878      	ldr	r0, [r7, #4]
 8009438:	4798      	blx	r3
        //Switch_To_Anomaly_Screen
        //When Localize_Button clicked change screen to Localize_Anomaly
        //Go to Localize_Anomaly with screen transition towards North
        application().gotoLocalize_AnomalyScreenWipeTransitionNorth();
    }
}
 800943a:	e019      	b.n	8009470 <_ZN12MainViewBase21buttonCallbackHandlerERKN8touchgfx14AbstractButtonE+0x58>
    else if (&src == &Alert_Mute_Button)
 800943c:	687b      	ldr	r3, [r7, #4]
 800943e:	f603 13f4 	addw	r3, r3, #2548	@ 0x9f4
 8009442:	683a      	ldr	r2, [r7, #0]
 8009444:	429a      	cmp	r2, r3
 8009446:	d106      	bne.n	8009456 <_ZN12MainViewBase21buttonCallbackHandlerERKN8touchgfx14AbstractButtonE+0x3e>
        alert_mute_pressed();
 8009448:	687b      	ldr	r3, [r7, #4]
 800944a:	681b      	ldr	r3, [r3, #0]
 800944c:	3338      	adds	r3, #56	@ 0x38
 800944e:	681b      	ldr	r3, [r3, #0]
 8009450:	6878      	ldr	r0, [r7, #4]
 8009452:	4798      	blx	r3
}
 8009454:	e00c      	b.n	8009470 <_ZN12MainViewBase21buttonCallbackHandlerERKN8touchgfx14AbstractButtonE+0x58>
    else if (&src == &Localize_Button)
 8009456:	687b      	ldr	r3, [r7, #4]
 8009458:	f603 2328 	addw	r3, r3, #2600	@ 0xa28
 800945c:	683a      	ldr	r2, [r7, #0]
 800945e:	429a      	cmp	r2, r3
 8009460:	d106      	bne.n	8009470 <_ZN12MainViewBase21buttonCallbackHandlerERKN8touchgfx14AbstractButtonE+0x58>
        application().gotoLocalize_AnomalyScreenWipeTransitionNorth();
 8009462:	6878      	ldr	r0, [r7, #4]
 8009464:	f7fd fc94 	bl	8006d90 <_ZN12MainViewBase11applicationEv>
 8009468:	4603      	mov	r3, r0
 800946a:	4618      	mov	r0, r3
 800946c:	f7fb f880 	bl	8004570 <_ZN23FrontendApplicationBase45gotoLocalize_AnomalyScreenWipeTransitionNorthEv>
}
 8009470:	bf00      	nop
 8009472:	3708      	adds	r7, #8
 8009474:	46bd      	mov	sp, r7
 8009476:	bd80      	pop	{r7, pc}

08009478 <_ZN12MainViewBase33sliderValueChangedCallbackHandlerERKN8touchgfx6SliderEi>:

void MainViewBase::sliderValueChangedCallbackHandler(const touchgfx::Slider& src, int value)
{
 8009478:	b580      	push	{r7, lr}
 800947a:	b084      	sub	sp, #16
 800947c:	af00      	add	r7, sp, #0
 800947e:	60f8      	str	r0, [r7, #12]
 8009480:	60b9      	str	r1, [r7, #8]
 8009482:	607a      	str	r2, [r7, #4]
    if (&src == &Volume_Slider)
 8009484:	68fb      	ldr	r3, [r7, #12]
 8009486:	f503 737e 	add.w	r3, r3, #1016	@ 0x3f8
 800948a:	68ba      	ldr	r2, [r7, #8]
 800948c:	429a      	cmp	r2, r3
 800948e:	d106      	bne.n	800949e <_ZN12MainViewBase33sliderValueChangedCallbackHandlerERKN8touchgfx6SliderEi+0x26>
    {
        //Set_Volume_Slider
        //When Volume_Slider value changed call virtual function
        //Call set_volume_slider
        set_volume_slider(value);
 8009490:	68fb      	ldr	r3, [r7, #12]
 8009492:	681b      	ldr	r3, [r3, #0]
 8009494:	332c      	adds	r3, #44	@ 0x2c
 8009496:	681b      	ldr	r3, [r3, #0]
 8009498:	6879      	ldr	r1, [r7, #4]
 800949a:	68f8      	ldr	r0, [r7, #12]
 800949c:	4798      	blx	r3
    }
}
 800949e:	bf00      	nop
 80094a0:	3710      	adds	r7, #16
 80094a2:	46bd      	mov	sp, r7
 80094a4:	bd80      	pop	{r7, pc}
	...

080094a8 <_ZN8touchgfx4ViewI13MainPresenterEC1Ev>:
    View()
 80094a8:	b580      	push	{r7, lr}
 80094aa:	b082      	sub	sp, #8
 80094ac:	af00      	add	r7, sp, #0
 80094ae:	6078      	str	r0, [r7, #4]
        : presenter(0)
 80094b0:	687b      	ldr	r3, [r7, #4]
 80094b2:	4618      	mov	r0, r3
 80094b4:	f013 fbb8 	bl	801cc28 <_ZN8touchgfx6ScreenC1Ev>
 80094b8:	4a05      	ldr	r2, [pc, #20]	@ (80094d0 <_ZN8touchgfx4ViewI13MainPresenterEC1Ev+0x28>)
 80094ba:	687b      	ldr	r3, [r7, #4]
 80094bc:	601a      	str	r2, [r3, #0]
 80094be:	687b      	ldr	r3, [r7, #4]
 80094c0:	2200      	movs	r2, #0
 80094c2:	63da      	str	r2, [r3, #60]	@ 0x3c
    }
 80094c4:	687b      	ldr	r3, [r7, #4]
 80094c6:	4618      	mov	r0, r3
 80094c8:	3708      	adds	r7, #8
 80094ca:	46bd      	mov	sp, r7
 80094cc:	bd80      	pop	{r7, pc}
 80094ce:	bf00      	nop
 80094d0:	0802d044 	.word	0x0802d044

080094d4 <_ZN8touchgfx8CallbackI12MainViewBaseRKNS_14AbstractButtonEvvEC1EPS1_MS1_FvS4_E>:
    Callback(dest_type* pobject, void (dest_type::*pmemfun_1)(T1))
 80094d4:	b580      	push	{r7, lr}
 80094d6:	b084      	sub	sp, #16
 80094d8:	af00      	add	r7, sp, #0
 80094da:	60f8      	str	r0, [r7, #12]
 80094dc:	60b9      	str	r1, [r7, #8]
 80094de:	4639      	mov	r1, r7
 80094e0:	e881 000c 	stmia.w	r1, {r2, r3}
        : pobject(pobject), pmemfun_1(pmemfun_1)
 80094e4:	68fb      	ldr	r3, [r7, #12]
 80094e6:	4618      	mov	r0, r3
 80094e8:	f7fd f924 	bl	8006734 <_ZN8touchgfx15GenericCallbackIRKNS_14AbstractButtonEvvEC1Ev>
 80094ec:	4a08      	ldr	r2, [pc, #32]	@ (8009510 <_ZN8touchgfx8CallbackI12MainViewBaseRKNS_14AbstractButtonEvvEC1EPS1_MS1_FvS4_E+0x3c>)
 80094ee:	68fb      	ldr	r3, [r7, #12]
 80094f0:	601a      	str	r2, [r3, #0]
 80094f2:	68fb      	ldr	r3, [r7, #12]
 80094f4:	68ba      	ldr	r2, [r7, #8]
 80094f6:	605a      	str	r2, [r3, #4]
 80094f8:	68fb      	ldr	r3, [r7, #12]
 80094fa:	3308      	adds	r3, #8
 80094fc:	463a      	mov	r2, r7
 80094fe:	e892 0003 	ldmia.w	r2, {r0, r1}
 8009502:	e883 0003 	stmia.w	r3, {r0, r1}
    }
 8009506:	68fb      	ldr	r3, [r7, #12]
 8009508:	4618      	mov	r0, r3
 800950a:	3710      	adds	r7, #16
 800950c:	46bd      	mov	sp, r7
 800950e:	bd80      	pop	{r7, pc}
 8009510:	0802d02c 	.word	0x0802d02c

08009514 <_ZN8touchgfx15GenericCallbackIRKNS_6SliderEivEC1Ev>:
class GenericCallback<T1, T2, void>
 8009514:	b480      	push	{r7}
 8009516:	b083      	sub	sp, #12
 8009518:	af00      	add	r7, sp, #0
 800951a:	6078      	str	r0, [r7, #4]
 800951c:	4a04      	ldr	r2, [pc, #16]	@ (8009530 <_ZN8touchgfx15GenericCallbackIRKNS_6SliderEivEC1Ev+0x1c>)
 800951e:	687b      	ldr	r3, [r7, #4]
 8009520:	601a      	str	r2, [r3, #0]
 8009522:	687b      	ldr	r3, [r7, #4]
 8009524:	4618      	mov	r0, r3
 8009526:	370c      	adds	r7, #12
 8009528:	46bd      	mov	sp, r7
 800952a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800952e:	4770      	bx	lr
 8009530:	0802d078 	.word	0x0802d078

08009534 <_ZN8touchgfx8CallbackI12MainViewBaseRKNS_6SliderEivEC1EPS1_MS1_FvS4_iE>:
    Callback(dest_type* pobject, void (dest_type::*pmemfun_2)(T1, T2))
 8009534:	b580      	push	{r7, lr}
 8009536:	b084      	sub	sp, #16
 8009538:	af00      	add	r7, sp, #0
 800953a:	60f8      	str	r0, [r7, #12]
 800953c:	60b9      	str	r1, [r7, #8]
 800953e:	4639      	mov	r1, r7
 8009540:	e881 000c 	stmia.w	r1, {r2, r3}
        : pobject(pobject), pmemfun_2(pmemfun_2)
 8009544:	68fb      	ldr	r3, [r7, #12]
 8009546:	4618      	mov	r0, r3
 8009548:	f7ff ffe4 	bl	8009514 <_ZN8touchgfx15GenericCallbackIRKNS_6SliderEivEC1Ev>
 800954c:	4a08      	ldr	r2, [pc, #32]	@ (8009570 <_ZN8touchgfx8CallbackI12MainViewBaseRKNS_6SliderEivEC1EPS1_MS1_FvS4_iE+0x3c>)
 800954e:	68fb      	ldr	r3, [r7, #12]
 8009550:	601a      	str	r2, [r3, #0]
 8009552:	68fb      	ldr	r3, [r7, #12]
 8009554:	68ba      	ldr	r2, [r7, #8]
 8009556:	605a      	str	r2, [r3, #4]
 8009558:	68fb      	ldr	r3, [r7, #12]
 800955a:	3308      	adds	r3, #8
 800955c:	463a      	mov	r2, r7
 800955e:	e892 0003 	ldmia.w	r2, {r0, r1}
 8009562:	e883 0003 	stmia.w	r3, {r0, r1}
    }
 8009566:	68fb      	ldr	r3, [r7, #12]
 8009568:	4618      	mov	r0, r3
 800956a:	3710      	adds	r7, #16
 800956c:	46bd      	mov	sp, r7
 800956e:	bd80      	pop	{r7, pc}
 8009570:	0802d014 	.word	0x0802d014

08009574 <_ZN8touchgfx15GenericCallbackIRKNS_6SliderEivED1Ev>:
    virtual ~GenericCallback()
 8009574:	b480      	push	{r7}
 8009576:	b083      	sub	sp, #12
 8009578:	af00      	add	r7, sp, #0
 800957a:	6078      	str	r0, [r7, #4]
    }
 800957c:	4a04      	ldr	r2, [pc, #16]	@ (8009590 <_ZN8touchgfx15GenericCallbackIRKNS_6SliderEivED1Ev+0x1c>)
 800957e:	687b      	ldr	r3, [r7, #4]
 8009580:	601a      	str	r2, [r3, #0]
 8009582:	687b      	ldr	r3, [r7, #4]
 8009584:	4618      	mov	r0, r3
 8009586:	370c      	adds	r7, #12
 8009588:	46bd      	mov	sp, r7
 800958a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800958e:	4770      	bx	lr
 8009590:	0802d078 	.word	0x0802d078

08009594 <_ZN8touchgfx15GenericCallbackIRKNS_6SliderEivED0Ev>:
    virtual ~GenericCallback()
 8009594:	b580      	push	{r7, lr}
 8009596:	b082      	sub	sp, #8
 8009598:	af00      	add	r7, sp, #0
 800959a:	6078      	str	r0, [r7, #4]
    }
 800959c:	6878      	ldr	r0, [r7, #4]
 800959e:	f7ff ffe9 	bl	8009574 <_ZN8touchgfx15GenericCallbackIRKNS_6SliderEivED1Ev>
 80095a2:	2104      	movs	r1, #4
 80095a4:	6878      	ldr	r0, [r7, #4]
 80095a6:	f021 f996 	bl	802a8d6 <_ZdlPvj>
 80095aa:	687b      	ldr	r3, [r7, #4]
 80095ac:	4618      	mov	r0, r3
 80095ae:	3708      	adds	r7, #8
 80095b0:	46bd      	mov	sp, r7
 80095b2:	bd80      	pop	{r7, pc}

080095b4 <_ZN8touchgfx8CallbackI12MainViewBaseRKNS_6SliderEivED1Ev>:
struct Callback<dest_type, T1, T2, void> : public GenericCallback<T1, T2>
 80095b4:	b580      	push	{r7, lr}
 80095b6:	b082      	sub	sp, #8
 80095b8:	af00      	add	r7, sp, #0
 80095ba:	6078      	str	r0, [r7, #4]
 80095bc:	4a05      	ldr	r2, [pc, #20]	@ (80095d4 <_ZN8touchgfx8CallbackI12MainViewBaseRKNS_6SliderEivED1Ev+0x20>)
 80095be:	687b      	ldr	r3, [r7, #4]
 80095c0:	601a      	str	r2, [r3, #0]
 80095c2:	687b      	ldr	r3, [r7, #4]
 80095c4:	4618      	mov	r0, r3
 80095c6:	f7ff ffd5 	bl	8009574 <_ZN8touchgfx15GenericCallbackIRKNS_6SliderEivED1Ev>
 80095ca:	687b      	ldr	r3, [r7, #4]
 80095cc:	4618      	mov	r0, r3
 80095ce:	3708      	adds	r7, #8
 80095d0:	46bd      	mov	sp, r7
 80095d2:	bd80      	pop	{r7, pc}
 80095d4:	0802d014 	.word	0x0802d014

080095d8 <_ZN8touchgfx8CallbackI12MainViewBaseRKNS_6SliderEivED0Ev>:
 80095d8:	b580      	push	{r7, lr}
 80095da:	b082      	sub	sp, #8
 80095dc:	af00      	add	r7, sp, #0
 80095de:	6078      	str	r0, [r7, #4]
 80095e0:	6878      	ldr	r0, [r7, #4]
 80095e2:	f7ff ffe7 	bl	80095b4 <_ZN8touchgfx8CallbackI12MainViewBaseRKNS_6SliderEivED1Ev>
 80095e6:	2110      	movs	r1, #16
 80095e8:	6878      	ldr	r0, [r7, #4]
 80095ea:	f021 f974 	bl	802a8d6 <_ZdlPvj>
 80095ee:	687b      	ldr	r3, [r7, #4]
 80095f0:	4618      	mov	r0, r3
 80095f2:	3708      	adds	r7, #8
 80095f4:	46bd      	mov	sp, r7
 80095f6:	bd80      	pop	{r7, pc}

080095f8 <_ZN8touchgfx8CallbackI12MainViewBaseRKNS_14AbstractButtonEvvED1Ev>:
struct Callback<dest_type, T1, void, void> : public GenericCallback<T1>
 80095f8:	b580      	push	{r7, lr}
 80095fa:	b082      	sub	sp, #8
 80095fc:	af00      	add	r7, sp, #0
 80095fe:	6078      	str	r0, [r7, #4]
 8009600:	4a05      	ldr	r2, [pc, #20]	@ (8009618 <_ZN8touchgfx8CallbackI12MainViewBaseRKNS_14AbstractButtonEvvED1Ev+0x20>)
 8009602:	687b      	ldr	r3, [r7, #4]
 8009604:	601a      	str	r2, [r3, #0]
 8009606:	687b      	ldr	r3, [r7, #4]
 8009608:	4618      	mov	r0, r3
 800960a:	f7fd f8c3 	bl	8006794 <_ZN8touchgfx15GenericCallbackIRKNS_14AbstractButtonEvvED1Ev>
 800960e:	687b      	ldr	r3, [r7, #4]
 8009610:	4618      	mov	r0, r3
 8009612:	3708      	adds	r7, #8
 8009614:	46bd      	mov	sp, r7
 8009616:	bd80      	pop	{r7, pc}
 8009618:	0802d02c 	.word	0x0802d02c

0800961c <_ZN8touchgfx8CallbackI12MainViewBaseRKNS_14AbstractButtonEvvED0Ev>:
 800961c:	b580      	push	{r7, lr}
 800961e:	b082      	sub	sp, #8
 8009620:	af00      	add	r7, sp, #0
 8009622:	6078      	str	r0, [r7, #4]
 8009624:	6878      	ldr	r0, [r7, #4]
 8009626:	f7ff ffe7 	bl	80095f8 <_ZN8touchgfx8CallbackI12MainViewBaseRKNS_14AbstractButtonEvvED1Ev>
 800962a:	2110      	movs	r1, #16
 800962c:	6878      	ldr	r0, [r7, #4]
 800962e:	f021 f952 	bl	802a8d6 <_ZdlPvj>
 8009632:	687b      	ldr	r3, [r7, #4]
 8009634:	4618      	mov	r0, r3
 8009636:	3708      	adds	r7, #8
 8009638:	46bd      	mov	sp, r7
 800963a:	bd80      	pop	{r7, pc}

0800963c <_ZN8touchgfx25AbstractProgressIndicatorD1Ev>:
 * to implement a progress indicator. For more specific implementations see classes that
 * inherit from AbstractProgressIndicator.
 *
 * @see BoxProgress, CircleProgress, ImageProgress, LineProgress, TextProgress
 */
class AbstractProgressIndicator : public Container
 800963c:	b580      	push	{r7, lr}
 800963e:	b082      	sub	sp, #8
 8009640:	af00      	add	r7, sp, #0
 8009642:	6078      	str	r0, [r7, #4]
 8009644:	4a0a      	ldr	r2, [pc, #40]	@ (8009670 <_ZN8touchgfx25AbstractProgressIndicatorD1Ev+0x34>)
 8009646:	687b      	ldr	r3, [r7, #4]
 8009648:	601a      	str	r2, [r3, #0]
 800964a:	687b      	ldr	r3, [r7, #4]
 800964c:	3358      	adds	r3, #88	@ 0x58
 800964e:	4618      	mov	r0, r3
 8009650:	f7fd f8e2 	bl	8006818 <_ZN8touchgfx9ContainerD1Ev>
 8009654:	687b      	ldr	r3, [r7, #4]
 8009656:	332c      	adds	r3, #44	@ 0x2c
 8009658:	4618      	mov	r0, r3
 800965a:	f7fd f8ff 	bl	800685c <_ZN8touchgfx5ImageD1Ev>
 800965e:	687b      	ldr	r3, [r7, #4]
 8009660:	4618      	mov	r0, r3
 8009662:	f7fd f8d9 	bl	8006818 <_ZN8touchgfx9ContainerD1Ev>
 8009666:	687b      	ldr	r3, [r7, #4]
 8009668:	4618      	mov	r0, r3
 800966a:	3708      	adds	r7, #8
 800966c:	46bd      	mov	sp, r7
 800966e:	bd80      	pop	{r7, pc}
 8009670:	0802d5d8 	.word	0x0802d5d8

08009674 <_ZN8touchgfx25AbstractProgressIndicatorD0Ev>:
 8009674:	b580      	push	{r7, lr}
 8009676:	b082      	sub	sp, #8
 8009678:	af00      	add	r7, sp, #0
 800967a:	6078      	str	r0, [r7, #4]
 800967c:	6878      	ldr	r0, [r7, #4]
 800967e:	f7ff ffdd 	bl	800963c <_ZN8touchgfx25AbstractProgressIndicatorD1Ev>
 8009682:	21b4      	movs	r1, #180	@ 0xb4
 8009684:	6878      	ldr	r0, [r7, #4]
 8009686:	f021 f926 	bl	802a8d6 <_ZdlPvj>
 800968a:	687b      	ldr	r3, [r7, #4]
 800968c:	4618      	mov	r0, r3
 800968e:	3708      	adds	r7, #8
 8009690:	46bd      	mov	sp, r7
 8009692:	bd80      	pop	{r7, pc}

08009694 <_ZN8touchgfx23TextAreaWithOneWildcardD1Ev>:
 * expected to contain a wildcard &lt;placeholder> from the text.
 *
 * @note the text converter tool converts the <...> to ascii value 2 which is then being
 *       replaced by a wildcard text.
 */
class TextAreaWithOneWildcard : public TextArea
 8009694:	b580      	push	{r7, lr}
 8009696:	b082      	sub	sp, #8
 8009698:	af00      	add	r7, sp, #0
 800969a:	6078      	str	r0, [r7, #4]
 800969c:	4a05      	ldr	r2, [pc, #20]	@ (80096b4 <_ZN8touchgfx23TextAreaWithOneWildcardD1Ev+0x20>)
 800969e:	687b      	ldr	r3, [r7, #4]
 80096a0:	601a      	str	r2, [r3, #0]
 80096a2:	687b      	ldr	r3, [r7, #4]
 80096a4:	4618      	mov	r0, r3
 80096a6:	f7fd f91d 	bl	80068e4 <_ZN8touchgfx8TextAreaD1Ev>
 80096aa:	687b      	ldr	r3, [r7, #4]
 80096ac:	4618      	mov	r0, r3
 80096ae:	3708      	adds	r7, #8
 80096b0:	46bd      	mov	sp, r7
 80096b2:	bd80      	pop	{r7, pc}
 80096b4:	0802e9ac 	.word	0x0802e9ac

080096b8 <_ZN8touchgfx23TextAreaWithOneWildcardD0Ev>:
 80096b8:	b580      	push	{r7, lr}
 80096ba:	b082      	sub	sp, #8
 80096bc:	af00      	add	r7, sp, #0
 80096be:	6078      	str	r0, [r7, #4]
 80096c0:	6878      	ldr	r0, [r7, #4]
 80096c2:	f7ff ffe7 	bl	8009694 <_ZN8touchgfx23TextAreaWithOneWildcardD1Ev>
 80096c6:	2140      	movs	r1, #64	@ 0x40
 80096c8:	6878      	ldr	r0, [r7, #4]
 80096ca:	f021 f904 	bl	802a8d6 <_ZdlPvj>
 80096ce:	687b      	ldr	r3, [r7, #4]
 80096d0:	4618      	mov	r0, r3
 80096d2:	3708      	adds	r7, #8
 80096d4:	46bd      	mov	sp, r7
 80096d6:	bd80      	pop	{r7, pc}

080096d8 <_ZN8touchgfx12TextProgressD1Ev>:
/**
 * A text progress will display progress as a number with a given number of decimals.
 *
 * @note The implementation does not use floating point variables to calculate the progress.
 */
class TextProgress : public AbstractProgressIndicator
 80096d8:	b580      	push	{r7, lr}
 80096da:	b082      	sub	sp, #8
 80096dc:	af00      	add	r7, sp, #0
 80096de:	6078      	str	r0, [r7, #4]
 80096e0:	4a08      	ldr	r2, [pc, #32]	@ (8009704 <_ZN8touchgfx12TextProgressD1Ev+0x2c>)
 80096e2:	687b      	ldr	r3, [r7, #4]
 80096e4:	601a      	str	r2, [r3, #0]
 80096e6:	687b      	ldr	r3, [r7, #4]
 80096e8:	33b4      	adds	r3, #180	@ 0xb4
 80096ea:	4618      	mov	r0, r3
 80096ec:	f7ff ffd2 	bl	8009694 <_ZN8touchgfx23TextAreaWithOneWildcardD1Ev>
 80096f0:	687b      	ldr	r3, [r7, #4]
 80096f2:	4618      	mov	r0, r3
 80096f4:	f7ff ffa2 	bl	800963c <_ZN8touchgfx25AbstractProgressIndicatorD1Ev>
 80096f8:	687b      	ldr	r3, [r7, #4]
 80096fa:	4618      	mov	r0, r3
 80096fc:	3708      	adds	r7, #8
 80096fe:	46bd      	mov	sp, r7
 8009700:	bd80      	pop	{r7, pc}
 8009702:	bf00      	nop
 8009704:	0802d474 	.word	0x0802d474

08009708 <_ZN8touchgfx12TextProgressD0Ev>:
 8009708:	b580      	push	{r7, lr}
 800970a:	b082      	sub	sp, #8
 800970c:	af00      	add	r7, sp, #0
 800970e:	6078      	str	r0, [r7, #4]
 8009710:	6878      	ldr	r0, [r7, #4]
 8009712:	f7ff ffe1 	bl	80096d8 <_ZN8touchgfx12TextProgressD1Ev>
 8009716:	f44f 7184 	mov.w	r1, #264	@ 0x108
 800971a:	6878      	ldr	r0, [r7, #4]
 800971c:	f021 f8db 	bl	802a8d6 <_ZdlPvj>
 8009720:	687b      	ldr	r3, [r7, #4]
 8009722:	4618      	mov	r0, r3
 8009724:	3708      	adds	r7, #8
 8009726:	46bd      	mov	sp, r7
 8009728:	bd80      	pop	{r7, pc}
	...

0800972c <_ZN8touchgfx6SliderD1Ev>:
class Slider : public Container
 800972c:	b580      	push	{r7, lr}
 800972e:	b082      	sub	sp, #8
 8009730:	af00      	add	r7, sp, #0
 8009732:	6078      	str	r0, [r7, #4]
 8009734:	4a0f      	ldr	r2, [pc, #60]	@ (8009774 <_ZN8touchgfx6SliderD1Ev+0x48>)
 8009736:	687b      	ldr	r3, [r7, #4]
 8009738:	601a      	str	r2, [r3, #0]
 800973a:	687b      	ldr	r3, [r7, #4]
 800973c:	33c0      	adds	r3, #192	@ 0xc0
 800973e:	4618      	mov	r0, r3
 8009740:	f7fd f86a 	bl	8006818 <_ZN8touchgfx9ContainerD1Ev>
 8009744:	687b      	ldr	r3, [r7, #4]
 8009746:	3394      	adds	r3, #148	@ 0x94
 8009748:	4618      	mov	r0, r3
 800974a:	f7fd f887 	bl	800685c <_ZN8touchgfx5ImageD1Ev>
 800974e:	687b      	ldr	r3, [r7, #4]
 8009750:	3368      	adds	r3, #104	@ 0x68
 8009752:	4618      	mov	r0, r3
 8009754:	f7fd f882 	bl	800685c <_ZN8touchgfx5ImageD1Ev>
 8009758:	687b      	ldr	r3, [r7, #4]
 800975a:	333c      	adds	r3, #60	@ 0x3c
 800975c:	4618      	mov	r0, r3
 800975e:	f7fd f87d 	bl	800685c <_ZN8touchgfx5ImageD1Ev>
 8009762:	687b      	ldr	r3, [r7, #4]
 8009764:	4618      	mov	r0, r3
 8009766:	f7fd f857 	bl	8006818 <_ZN8touchgfx9ContainerD1Ev>
 800976a:	687b      	ldr	r3, [r7, #4]
 800976c:	4618      	mov	r0, r3
 800976e:	3708      	adds	r7, #8
 8009770:	46bd      	mov	sp, r7
 8009772:	bd80      	pop	{r7, pc}
 8009774:	0802dae0 	.word	0x0802dae0

08009778 <_ZN8touchgfx6SliderD0Ev>:
 8009778:	b580      	push	{r7, lr}
 800977a:	b082      	sub	sp, #8
 800977c:	af00      	add	r7, sp, #0
 800977e:	6078      	str	r0, [r7, #4]
 8009780:	6878      	ldr	r0, [r7, #4]
 8009782:	f7ff ffd3 	bl	800972c <_ZN8touchgfx6SliderD1Ev>
 8009786:	21fc      	movs	r1, #252	@ 0xfc
 8009788:	6878      	ldr	r0, [r7, #4]
 800978a:	f021 f8a4 	bl	802a8d6 <_ZdlPvj>
 800978e:	687b      	ldr	r3, [r7, #4]
 8009790:	4618      	mov	r0, r3
 8009792:	3708      	adds	r7, #8
 8009794:	46bd      	mov	sp, r7
 8009796:	bd80      	pop	{r7, pc}

08009798 <_ZN8touchgfx12ToggleButtonD1Ev>:
 8009798:	b580      	push	{r7, lr}
 800979a:	b082      	sub	sp, #8
 800979c:	af00      	add	r7, sp, #0
 800979e:	6078      	str	r0, [r7, #4]
 80097a0:	4a05      	ldr	r2, [pc, #20]	@ (80097b8 <_ZN8touchgfx12ToggleButtonD1Ev+0x20>)
 80097a2:	687b      	ldr	r3, [r7, #4]
 80097a4:	601a      	str	r2, [r3, #0]
 80097a6:	687b      	ldr	r3, [r7, #4]
 80097a8:	4618      	mov	r0, r3
 80097aa:	f7fd f8c3 	bl	8006934 <_ZN8touchgfx6ButtonD1Ev>
 80097ae:	687b      	ldr	r3, [r7, #4]
 80097b0:	4618      	mov	r0, r3
 80097b2:	3708      	adds	r7, #8
 80097b4:	46bd      	mov	sp, r7
 80097b6:	bd80      	pop	{r7, pc}
 80097b8:	0802e668 	.word	0x0802e668

080097bc <_ZN8touchgfx12ToggleButtonD0Ev>:
 80097bc:	b580      	push	{r7, lr}
 80097be:	b082      	sub	sp, #8
 80097c0:	af00      	add	r7, sp, #0
 80097c2:	6078      	str	r0, [r7, #4]
 80097c4:	6878      	ldr	r0, [r7, #4]
 80097c6:	f7ff ffe7 	bl	8009798 <_ZN8touchgfx12ToggleButtonD1Ev>
 80097ca:	2138      	movs	r1, #56	@ 0x38
 80097cc:	6878      	ldr	r0, [r7, #4]
 80097ce:	f021 f882 	bl	802a8d6 <_ZdlPvj>
 80097d2:	687b      	ldr	r3, [r7, #4]
 80097d4:	4618      	mov	r0, r3
 80097d6:	3708      	adds	r7, #8
 80097d8:	46bd      	mov	sp, r7
 80097da:	bd80      	pop	{r7, pc}

080097dc <_ZN8touchgfx8CallbackI12MainViewBaseRKNS_6SliderEivE7executeES4_i>:
    virtual void execute(T1 t1, T2 t2)
 80097dc:	b580      	push	{r7, lr}
 80097de:	b084      	sub	sp, #16
 80097e0:	af00      	add	r7, sp, #0
 80097e2:	60f8      	str	r0, [r7, #12]
 80097e4:	60b9      	str	r1, [r7, #8]
 80097e6:	607a      	str	r2, [r7, #4]
        (pobject->*pmemfun_2)(t1, t2);
 80097e8:	68fb      	ldr	r3, [r7, #12]
 80097ea:	685b      	ldr	r3, [r3, #4]
 80097ec:	68fa      	ldr	r2, [r7, #12]
 80097ee:	68d2      	ldr	r2, [r2, #12]
 80097f0:	1052      	asrs	r2, r2, #1
 80097f2:	1898      	adds	r0, r3, r2
 80097f4:	68fb      	ldr	r3, [r7, #12]
 80097f6:	68db      	ldr	r3, [r3, #12]
 80097f8:	f003 0301 	and.w	r3, r3, #1
 80097fc:	2b00      	cmp	r3, #0
 80097fe:	d102      	bne.n	8009806 <_ZN8touchgfx8CallbackI12MainViewBaseRKNS_6SliderEivE7executeES4_i+0x2a>
 8009800:	68fb      	ldr	r3, [r7, #12]
 8009802:	689b      	ldr	r3, [r3, #8]
 8009804:	e00a      	b.n	800981c <_ZN8touchgfx8CallbackI12MainViewBaseRKNS_6SliderEivE7executeES4_i+0x40>
 8009806:	68fb      	ldr	r3, [r7, #12]
 8009808:	685b      	ldr	r3, [r3, #4]
 800980a:	68fa      	ldr	r2, [r7, #12]
 800980c:	68d2      	ldr	r2, [r2, #12]
 800980e:	1052      	asrs	r2, r2, #1
 8009810:	4413      	add	r3, r2
 8009812:	681b      	ldr	r3, [r3, #0]
 8009814:	68fa      	ldr	r2, [r7, #12]
 8009816:	6892      	ldr	r2, [r2, #8]
 8009818:	4413      	add	r3, r2
 800981a:	681b      	ldr	r3, [r3, #0]
 800981c:	687a      	ldr	r2, [r7, #4]
 800981e:	68b9      	ldr	r1, [r7, #8]
 8009820:	4798      	blx	r3
    }
 8009822:	bf00      	nop
 8009824:	3710      	adds	r7, #16
 8009826:	46bd      	mov	sp, r7
 8009828:	bd80      	pop	{r7, pc}

0800982a <_ZNK8touchgfx8CallbackI12MainViewBaseRKNS_6SliderEivE7isValidEv>:
    virtual bool isValid() const
 800982a:	b480      	push	{r7}
 800982c:	b083      	sub	sp, #12
 800982e:	af00      	add	r7, sp, #0
 8009830:	6078      	str	r0, [r7, #4]
        return (pobject != 0) && (pmemfun_2 != 0);
 8009832:	687b      	ldr	r3, [r7, #4]
 8009834:	685b      	ldr	r3, [r3, #4]
 8009836:	2b00      	cmp	r3, #0
 8009838:	d010      	beq.n	800985c <_ZNK8touchgfx8CallbackI12MainViewBaseRKNS_6SliderEivE7isValidEv+0x32>
 800983a:	687b      	ldr	r3, [r7, #4]
 800983c:	689b      	ldr	r3, [r3, #8]
 800983e:	2b00      	cmp	r3, #0
 8009840:	d107      	bne.n	8009852 <_ZNK8touchgfx8CallbackI12MainViewBaseRKNS_6SliderEivE7isValidEv+0x28>
 8009842:	687b      	ldr	r3, [r7, #4]
 8009844:	68db      	ldr	r3, [r3, #12]
 8009846:	f003 0301 	and.w	r3, r3, #1
 800984a:	2b00      	cmp	r3, #0
 800984c:	d101      	bne.n	8009852 <_ZNK8touchgfx8CallbackI12MainViewBaseRKNS_6SliderEivE7isValidEv+0x28>
 800984e:	2301      	movs	r3, #1
 8009850:	e000      	b.n	8009854 <_ZNK8touchgfx8CallbackI12MainViewBaseRKNS_6SliderEivE7isValidEv+0x2a>
 8009852:	2300      	movs	r3, #0
 8009854:	2b01      	cmp	r3, #1
 8009856:	d001      	beq.n	800985c <_ZNK8touchgfx8CallbackI12MainViewBaseRKNS_6SliderEivE7isValidEv+0x32>
 8009858:	2301      	movs	r3, #1
 800985a:	e000      	b.n	800985e <_ZNK8touchgfx8CallbackI12MainViewBaseRKNS_6SliderEivE7isValidEv+0x34>
 800985c:	2300      	movs	r3, #0
    }
 800985e:	4618      	mov	r0, r3
 8009860:	370c      	adds	r7, #12
 8009862:	46bd      	mov	sp, r7
 8009864:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009868:	4770      	bx	lr

0800986a <_ZN8touchgfx8CallbackI12MainViewBaseRKNS_14AbstractButtonEvvE7executeES4_>:
    virtual void execute(T1 t1)
 800986a:	b580      	push	{r7, lr}
 800986c:	b082      	sub	sp, #8
 800986e:	af00      	add	r7, sp, #0
 8009870:	6078      	str	r0, [r7, #4]
 8009872:	6039      	str	r1, [r7, #0]
        (pobject->*pmemfun_1)(t1);
 8009874:	687b      	ldr	r3, [r7, #4]
 8009876:	685b      	ldr	r3, [r3, #4]
 8009878:	687a      	ldr	r2, [r7, #4]
 800987a:	68d2      	ldr	r2, [r2, #12]
 800987c:	1052      	asrs	r2, r2, #1
 800987e:	1898      	adds	r0, r3, r2
 8009880:	687b      	ldr	r3, [r7, #4]
 8009882:	68db      	ldr	r3, [r3, #12]
 8009884:	f003 0301 	and.w	r3, r3, #1
 8009888:	2b00      	cmp	r3, #0
 800988a:	d102      	bne.n	8009892 <_ZN8touchgfx8CallbackI12MainViewBaseRKNS_14AbstractButtonEvvE7executeES4_+0x28>
 800988c:	687b      	ldr	r3, [r7, #4]
 800988e:	689b      	ldr	r3, [r3, #8]
 8009890:	e00a      	b.n	80098a8 <_ZN8touchgfx8CallbackI12MainViewBaseRKNS_14AbstractButtonEvvE7executeES4_+0x3e>
 8009892:	687b      	ldr	r3, [r7, #4]
 8009894:	685b      	ldr	r3, [r3, #4]
 8009896:	687a      	ldr	r2, [r7, #4]
 8009898:	68d2      	ldr	r2, [r2, #12]
 800989a:	1052      	asrs	r2, r2, #1
 800989c:	4413      	add	r3, r2
 800989e:	681b      	ldr	r3, [r3, #0]
 80098a0:	687a      	ldr	r2, [r7, #4]
 80098a2:	6892      	ldr	r2, [r2, #8]
 80098a4:	4413      	add	r3, r2
 80098a6:	681b      	ldr	r3, [r3, #0]
 80098a8:	6839      	ldr	r1, [r7, #0]
 80098aa:	4798      	blx	r3
    }
 80098ac:	bf00      	nop
 80098ae:	3708      	adds	r7, #8
 80098b0:	46bd      	mov	sp, r7
 80098b2:	bd80      	pop	{r7, pc}

080098b4 <_ZNK8touchgfx8CallbackI12MainViewBaseRKNS_14AbstractButtonEvvE7isValidEv>:
    virtual bool isValid() const
 80098b4:	b480      	push	{r7}
 80098b6:	b083      	sub	sp, #12
 80098b8:	af00      	add	r7, sp, #0
 80098ba:	6078      	str	r0, [r7, #4]
        return (pobject != 0) && (pmemfun_1 != 0);
 80098bc:	687b      	ldr	r3, [r7, #4]
 80098be:	685b      	ldr	r3, [r3, #4]
 80098c0:	2b00      	cmp	r3, #0
 80098c2:	d010      	beq.n	80098e6 <_ZNK8touchgfx8CallbackI12MainViewBaseRKNS_14AbstractButtonEvvE7isValidEv+0x32>
 80098c4:	687b      	ldr	r3, [r7, #4]
 80098c6:	689b      	ldr	r3, [r3, #8]
 80098c8:	2b00      	cmp	r3, #0
 80098ca:	d107      	bne.n	80098dc <_ZNK8touchgfx8CallbackI12MainViewBaseRKNS_14AbstractButtonEvvE7isValidEv+0x28>
 80098cc:	687b      	ldr	r3, [r7, #4]
 80098ce:	68db      	ldr	r3, [r3, #12]
 80098d0:	f003 0301 	and.w	r3, r3, #1
 80098d4:	2b00      	cmp	r3, #0
 80098d6:	d101      	bne.n	80098dc <_ZNK8touchgfx8CallbackI12MainViewBaseRKNS_14AbstractButtonEvvE7isValidEv+0x28>
 80098d8:	2301      	movs	r3, #1
 80098da:	e000      	b.n	80098de <_ZNK8touchgfx8CallbackI12MainViewBaseRKNS_14AbstractButtonEvvE7isValidEv+0x2a>
 80098dc:	2300      	movs	r3, #0
 80098de:	2b01      	cmp	r3, #1
 80098e0:	d001      	beq.n	80098e6 <_ZNK8touchgfx8CallbackI12MainViewBaseRKNS_14AbstractButtonEvvE7isValidEv+0x32>
 80098e2:	2301      	movs	r3, #1
 80098e4:	e000      	b.n	80098e8 <_ZNK8touchgfx8CallbackI12MainViewBaseRKNS_14AbstractButtonEvvE7isValidEv+0x34>
 80098e6:	2300      	movs	r3, #0
    }
 80098e8:	4618      	mov	r0, r3
 80098ea:	370c      	adds	r7, #12
 80098ec:	46bd      	mov	sp, r7
 80098ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80098f2:	4770      	bx	lr

080098f4 <__tcf_0>:
KEEP extern const touchgfx::KerningNode kerning_verdana_20_4bpp[] FONT_KERNING_LOCATION_FLASH_ATTRIBUTE;
touchgfx::GeneratedFont& getFont_verdana_20_4bpp();

touchgfx::GeneratedFont& getFont_verdana_20_4bpp()
{
    static touchgfx::GeneratedFont verdana_20_4bpp(glyphs_verdana_20_4bpp, 1, 20, 0, 4, 1, 0, 0, unicodes_verdana_20_4bpp, kerning_verdana_20_4bpp, 63, 0, 0, 0);
 80098f4:	b580      	push	{r7, lr}
 80098f6:	af00      	add	r7, sp, #0
 80098f8:	4801      	ldr	r0, [pc, #4]	@ (8009900 <__tcf_0+0xc>)
 80098fa:	f7fa f9ff 	bl	8003cfc <_ZN8touchgfx13GeneratedFontD1Ev>
 80098fe:	bd80      	pop	{r7, pc}
 8009900:	24001d80 	.word	0x24001d80

08009904 <_Z23getFont_verdana_20_4bppv>:
{
 8009904:	b580      	push	{r7, lr}
 8009906:	b08c      	sub	sp, #48	@ 0x30
 8009908:	af0c      	add	r7, sp, #48	@ 0x30
    static touchgfx::GeneratedFont verdana_20_4bpp(glyphs_verdana_20_4bpp, 1, 20, 0, 4, 1, 0, 0, unicodes_verdana_20_4bpp, kerning_verdana_20_4bpp, 63, 0, 0, 0);
 800990a:	4b1f      	ldr	r3, [pc, #124]	@ (8009988 <_Z23getFont_verdana_20_4bppv+0x84>)
 800990c:	681b      	ldr	r3, [r3, #0]
 800990e:	f3bf 8f5b 	dmb	ish
 8009912:	f003 0301 	and.w	r3, r3, #1
 8009916:	2b00      	cmp	r3, #0
 8009918:	bf0c      	ite	eq
 800991a:	2301      	moveq	r3, #1
 800991c:	2300      	movne	r3, #0
 800991e:	b2db      	uxtb	r3, r3
 8009920:	2b00      	cmp	r3, #0
 8009922:	d02c      	beq.n	800997e <_Z23getFont_verdana_20_4bppv+0x7a>
 8009924:	4818      	ldr	r0, [pc, #96]	@ (8009988 <_Z23getFont_verdana_20_4bppv+0x84>)
 8009926:	f020 ffd8 	bl	802a8da <__cxa_guard_acquire>
 800992a:	4603      	mov	r3, r0
 800992c:	2b00      	cmp	r3, #0
 800992e:	bf14      	ite	ne
 8009930:	2301      	movne	r3, #1
 8009932:	2300      	moveq	r3, #0
 8009934:	b2db      	uxtb	r3, r3
 8009936:	2b00      	cmp	r3, #0
 8009938:	d021      	beq.n	800997e <_Z23getFont_verdana_20_4bppv+0x7a>
 800993a:	2300      	movs	r3, #0
 800993c:	930a      	str	r3, [sp, #40]	@ 0x28
 800993e:	2300      	movs	r3, #0
 8009940:	9309      	str	r3, [sp, #36]	@ 0x24
 8009942:	2300      	movs	r3, #0
 8009944:	9308      	str	r3, [sp, #32]
 8009946:	233f      	movs	r3, #63	@ 0x3f
 8009948:	9307      	str	r3, [sp, #28]
 800994a:	4b10      	ldr	r3, [pc, #64]	@ (800998c <_Z23getFont_verdana_20_4bppv+0x88>)
 800994c:	9306      	str	r3, [sp, #24]
 800994e:	4b10      	ldr	r3, [pc, #64]	@ (8009990 <_Z23getFont_verdana_20_4bppv+0x8c>)
 8009950:	9305      	str	r3, [sp, #20]
 8009952:	2300      	movs	r3, #0
 8009954:	9304      	str	r3, [sp, #16]
 8009956:	2300      	movs	r3, #0
 8009958:	9303      	str	r3, [sp, #12]
 800995a:	2301      	movs	r3, #1
 800995c:	9302      	str	r3, [sp, #8]
 800995e:	2304      	movs	r3, #4
 8009960:	9301      	str	r3, [sp, #4]
 8009962:	2300      	movs	r3, #0
 8009964:	9300      	str	r3, [sp, #0]
 8009966:	2314      	movs	r3, #20
 8009968:	2201      	movs	r2, #1
 800996a:	490a      	ldr	r1, [pc, #40]	@ (8009994 <_Z23getFont_verdana_20_4bppv+0x90>)
 800996c:	480a      	ldr	r0, [pc, #40]	@ (8009998 <_Z23getFont_verdana_20_4bppv+0x94>)
 800996e:	f7fb fe55 	bl	800561c <_ZN8touchgfx13GeneratedFontC1EPKNS_9GlyphNodeEtthhhhhPKPKhPKNS_11KerningNodeEttPKtPKNS_24FontContextualFormsTableE>
 8009972:	480a      	ldr	r0, [pc, #40]	@ (800999c <_Z23getFont_verdana_20_4bppv+0x98>)
 8009974:	f020 fffc 	bl	802a970 <atexit>
 8009978:	4803      	ldr	r0, [pc, #12]	@ (8009988 <_Z23getFont_verdana_20_4bppv+0x84>)
 800997a:	f020 ffba 	bl	802a8f2 <__cxa_guard_release>
    return verdana_20_4bpp;
 800997e:	4b06      	ldr	r3, [pc, #24]	@ (8009998 <_Z23getFont_verdana_20_4bppv+0x94>)
}
 8009980:	4618      	mov	r0, r3
 8009982:	46bd      	mov	sp, r7
 8009984:	bd80      	pop	{r7, pc}
 8009986:	bf00      	nop
 8009988:	24001da8 	.word	0x24001da8
 800998c:	08030354 	.word	0x08030354
 8009990:	08030368 	.word	0x08030368
 8009994:	900007ec 	.word	0x900007ec
 8009998:	24001d80 	.word	0x24001d80
 800999c:	080098f5 	.word	0x080098f5

080099a0 <__tcf_0>:
KEEP extern const touchgfx::KerningNode kerning_verdana_40_4bpp[] FONT_KERNING_LOCATION_FLASH_ATTRIBUTE;
touchgfx::GeneratedFont& getFont_verdana_40_4bpp();

touchgfx::GeneratedFont& getFont_verdana_40_4bpp()
{
    static touchgfx::GeneratedFont verdana_40_4bpp(glyphs_verdana_40_4bpp, 1, 40, 0, 4, 1, 0, 0, unicodes_verdana_40_4bpp, kerning_verdana_40_4bpp, 63, 0, 0, 0);
 80099a0:	b580      	push	{r7, lr}
 80099a2:	af00      	add	r7, sp, #0
 80099a4:	4801      	ldr	r0, [pc, #4]	@ (80099ac <__tcf_0+0xc>)
 80099a6:	f7fa f9a9 	bl	8003cfc <_ZN8touchgfx13GeneratedFontD1Ev>
 80099aa:	bd80      	pop	{r7, pc}
 80099ac:	24001dac 	.word	0x24001dac

080099b0 <_Z23getFont_verdana_40_4bppv>:
{
 80099b0:	b580      	push	{r7, lr}
 80099b2:	b08c      	sub	sp, #48	@ 0x30
 80099b4:	af0c      	add	r7, sp, #48	@ 0x30
    static touchgfx::GeneratedFont verdana_40_4bpp(glyphs_verdana_40_4bpp, 1, 40, 0, 4, 1, 0, 0, unicodes_verdana_40_4bpp, kerning_verdana_40_4bpp, 63, 0, 0, 0);
 80099b6:	4b1f      	ldr	r3, [pc, #124]	@ (8009a34 <_Z23getFont_verdana_40_4bppv+0x84>)
 80099b8:	681b      	ldr	r3, [r3, #0]
 80099ba:	f3bf 8f5b 	dmb	ish
 80099be:	f003 0301 	and.w	r3, r3, #1
 80099c2:	2b00      	cmp	r3, #0
 80099c4:	bf0c      	ite	eq
 80099c6:	2301      	moveq	r3, #1
 80099c8:	2300      	movne	r3, #0
 80099ca:	b2db      	uxtb	r3, r3
 80099cc:	2b00      	cmp	r3, #0
 80099ce:	d02c      	beq.n	8009a2a <_Z23getFont_verdana_40_4bppv+0x7a>
 80099d0:	4818      	ldr	r0, [pc, #96]	@ (8009a34 <_Z23getFont_verdana_40_4bppv+0x84>)
 80099d2:	f020 ff82 	bl	802a8da <__cxa_guard_acquire>
 80099d6:	4603      	mov	r3, r0
 80099d8:	2b00      	cmp	r3, #0
 80099da:	bf14      	ite	ne
 80099dc:	2301      	movne	r3, #1
 80099de:	2300      	moveq	r3, #0
 80099e0:	b2db      	uxtb	r3, r3
 80099e2:	2b00      	cmp	r3, #0
 80099e4:	d021      	beq.n	8009a2a <_Z23getFont_verdana_40_4bppv+0x7a>
 80099e6:	2300      	movs	r3, #0
 80099e8:	930a      	str	r3, [sp, #40]	@ 0x28
 80099ea:	2300      	movs	r3, #0
 80099ec:	9309      	str	r3, [sp, #36]	@ 0x24
 80099ee:	2300      	movs	r3, #0
 80099f0:	9308      	str	r3, [sp, #32]
 80099f2:	233f      	movs	r3, #63	@ 0x3f
 80099f4:	9307      	str	r3, [sp, #28]
 80099f6:	4b10      	ldr	r3, [pc, #64]	@ (8009a38 <_Z23getFont_verdana_40_4bppv+0x88>)
 80099f8:	9306      	str	r3, [sp, #24]
 80099fa:	4b10      	ldr	r3, [pc, #64]	@ (8009a3c <_Z23getFont_verdana_40_4bppv+0x8c>)
 80099fc:	9305      	str	r3, [sp, #20]
 80099fe:	2300      	movs	r3, #0
 8009a00:	9304      	str	r3, [sp, #16]
 8009a02:	2300      	movs	r3, #0
 8009a04:	9303      	str	r3, [sp, #12]
 8009a06:	2301      	movs	r3, #1
 8009a08:	9302      	str	r3, [sp, #8]
 8009a0a:	2304      	movs	r3, #4
 8009a0c:	9301      	str	r3, [sp, #4]
 8009a0e:	2300      	movs	r3, #0
 8009a10:	9300      	str	r3, [sp, #0]
 8009a12:	2328      	movs	r3, #40	@ 0x28
 8009a14:	2201      	movs	r2, #1
 8009a16:	490a      	ldr	r1, [pc, #40]	@ (8009a40 <_Z23getFont_verdana_40_4bppv+0x90>)
 8009a18:	480a      	ldr	r0, [pc, #40]	@ (8009a44 <_Z23getFont_verdana_40_4bppv+0x94>)
 8009a1a:	f7fb fdff 	bl	800561c <_ZN8touchgfx13GeneratedFontC1EPKNS_9GlyphNodeEtthhhhhPKPKhPKNS_11KerningNodeEttPKtPKNS_24FontContextualFormsTableE>
 8009a1e:	480a      	ldr	r0, [pc, #40]	@ (8009a48 <_Z23getFont_verdana_40_4bppv+0x98>)
 8009a20:	f020 ffa6 	bl	802a970 <atexit>
 8009a24:	4803      	ldr	r0, [pc, #12]	@ (8009a34 <_Z23getFont_verdana_40_4bppv+0x84>)
 8009a26:	f020 ff64 	bl	802a8f2 <__cxa_guard_release>
    return verdana_40_4bpp;
 8009a2a:	4b06      	ldr	r3, [pc, #24]	@ (8009a44 <_Z23getFont_verdana_40_4bppv+0x94>)
}
 8009a2c:	4618      	mov	r0, r3
 8009a2e:	46bd      	mov	sp, r7
 8009a30:	bd80      	pop	{r7, pc}
 8009a32:	bf00      	nop
 8009a34:	24001dd4 	.word	0x24001dd4
 8009a38:	08030358 	.word	0x08030358
 8009a3c:	0803036c 	.word	0x0803036c
 8009a40:	900007fc 	.word	0x900007fc
 8009a44:	24001dac 	.word	0x24001dac
 8009a48:	080099a1 	.word	0x080099a1

08009a4c <__tcf_0>:
KEEP extern const touchgfx::KerningNode kerning_verdanab_10_4bpp[] FONT_KERNING_LOCATION_FLASH_ATTRIBUTE;
touchgfx::GeneratedFont& getFont_verdanab_10_4bpp();

touchgfx::GeneratedFont& getFont_verdanab_10_4bpp()
{
    static touchgfx::GeneratedFont verdanab_10_4bpp(glyphs_verdanab_10_4bpp, 26, 10, 2, 4, 1, 0, 1, unicodes_verdanab_10_4bpp, kerning_verdanab_10_4bpp, 63, 0, 0, 0);
 8009a4c:	b580      	push	{r7, lr}
 8009a4e:	af00      	add	r7, sp, #0
 8009a50:	4801      	ldr	r0, [pc, #4]	@ (8009a58 <__tcf_0+0xc>)
 8009a52:	f7fa f953 	bl	8003cfc <_ZN8touchgfx13GeneratedFontD1Ev>
 8009a56:	bd80      	pop	{r7, pc}
 8009a58:	24001dd8 	.word	0x24001dd8

08009a5c <_Z24getFont_verdanab_10_4bppv>:
{
 8009a5c:	b580      	push	{r7, lr}
 8009a5e:	b08c      	sub	sp, #48	@ 0x30
 8009a60:	af0c      	add	r7, sp, #48	@ 0x30
    static touchgfx::GeneratedFont verdanab_10_4bpp(glyphs_verdanab_10_4bpp, 26, 10, 2, 4, 1, 0, 1, unicodes_verdanab_10_4bpp, kerning_verdanab_10_4bpp, 63, 0, 0, 0);
 8009a62:	4b1f      	ldr	r3, [pc, #124]	@ (8009ae0 <_Z24getFont_verdanab_10_4bppv+0x84>)
 8009a64:	681b      	ldr	r3, [r3, #0]
 8009a66:	f3bf 8f5b 	dmb	ish
 8009a6a:	f003 0301 	and.w	r3, r3, #1
 8009a6e:	2b00      	cmp	r3, #0
 8009a70:	bf0c      	ite	eq
 8009a72:	2301      	moveq	r3, #1
 8009a74:	2300      	movne	r3, #0
 8009a76:	b2db      	uxtb	r3, r3
 8009a78:	2b00      	cmp	r3, #0
 8009a7a:	d02c      	beq.n	8009ad6 <_Z24getFont_verdanab_10_4bppv+0x7a>
 8009a7c:	4818      	ldr	r0, [pc, #96]	@ (8009ae0 <_Z24getFont_verdanab_10_4bppv+0x84>)
 8009a7e:	f020 ff2c 	bl	802a8da <__cxa_guard_acquire>
 8009a82:	4603      	mov	r3, r0
 8009a84:	2b00      	cmp	r3, #0
 8009a86:	bf14      	ite	ne
 8009a88:	2301      	movne	r3, #1
 8009a8a:	2300      	moveq	r3, #0
 8009a8c:	b2db      	uxtb	r3, r3
 8009a8e:	2b00      	cmp	r3, #0
 8009a90:	d021      	beq.n	8009ad6 <_Z24getFont_verdanab_10_4bppv+0x7a>
 8009a92:	2300      	movs	r3, #0
 8009a94:	930a      	str	r3, [sp, #40]	@ 0x28
 8009a96:	2300      	movs	r3, #0
 8009a98:	9309      	str	r3, [sp, #36]	@ 0x24
 8009a9a:	2300      	movs	r3, #0
 8009a9c:	9308      	str	r3, [sp, #32]
 8009a9e:	233f      	movs	r3, #63	@ 0x3f
 8009aa0:	9307      	str	r3, [sp, #28]
 8009aa2:	4b10      	ldr	r3, [pc, #64]	@ (8009ae4 <_Z24getFont_verdanab_10_4bppv+0x88>)
 8009aa4:	9306      	str	r3, [sp, #24]
 8009aa6:	4b10      	ldr	r3, [pc, #64]	@ (8009ae8 <_Z24getFont_verdanab_10_4bppv+0x8c>)
 8009aa8:	9305      	str	r3, [sp, #20]
 8009aaa:	2301      	movs	r3, #1
 8009aac:	9304      	str	r3, [sp, #16]
 8009aae:	2300      	movs	r3, #0
 8009ab0:	9303      	str	r3, [sp, #12]
 8009ab2:	2301      	movs	r3, #1
 8009ab4:	9302      	str	r3, [sp, #8]
 8009ab6:	2304      	movs	r3, #4
 8009ab8:	9301      	str	r3, [sp, #4]
 8009aba:	2302      	movs	r3, #2
 8009abc:	9300      	str	r3, [sp, #0]
 8009abe:	230a      	movs	r3, #10
 8009ac0:	221a      	movs	r2, #26
 8009ac2:	490a      	ldr	r1, [pc, #40]	@ (8009aec <_Z24getFont_verdanab_10_4bppv+0x90>)
 8009ac4:	480a      	ldr	r0, [pc, #40]	@ (8009af0 <_Z24getFont_verdanab_10_4bppv+0x94>)
 8009ac6:	f7fb fda9 	bl	800561c <_ZN8touchgfx13GeneratedFontC1EPKNS_9GlyphNodeEtthhhhhPKPKhPKNS_11KerningNodeEttPKtPKNS_24FontContextualFormsTableE>
 8009aca:	480a      	ldr	r0, [pc, #40]	@ (8009af4 <_Z24getFont_verdanab_10_4bppv+0x98>)
 8009acc:	f020 ff50 	bl	802a970 <atexit>
 8009ad0:	4803      	ldr	r0, [pc, #12]	@ (8009ae0 <_Z24getFont_verdanab_10_4bppv+0x84>)
 8009ad2:	f020 ff0e 	bl	802a8f2 <__cxa_guard_release>
    return verdanab_10_4bpp;
 8009ad6:	4b06      	ldr	r3, [pc, #24]	@ (8009af0 <_Z24getFont_verdanab_10_4bppv+0x94>)
}
 8009ad8:	4618      	mov	r0, r3
 8009ada:	46bd      	mov	sp, r7
 8009adc:	bd80      	pop	{r7, pc}
 8009ade:	bf00      	nop
 8009ae0:	24001e00 	.word	0x24001e00
 8009ae4:	0803035c 	.word	0x0803035c
 8009ae8:	08030370 	.word	0x08030370
 8009aec:	9000080c 	.word	0x9000080c
 8009af0:	24001dd8 	.word	0x24001dd8
 8009af4:	08009a4d 	.word	0x08009a4d

08009af8 <__tcf_0>:
KEEP extern const touchgfx::KerningNode kerning_verdanab_12_4bpp[] FONT_KERNING_LOCATION_FLASH_ATTRIBUTE;
touchgfx::GeneratedFont& getFont_verdanab_12_4bpp();

touchgfx::GeneratedFont& getFont_verdanab_12_4bpp()
{
    static touchgfx::GeneratedFont verdanab_12_4bpp(glyphs_verdanab_12_4bpp, 21, 12, 2, 4, 1, 0, 1, unicodes_verdanab_12_4bpp, kerning_verdanab_12_4bpp, 63, 0, 0, 0);
 8009af8:	b580      	push	{r7, lr}
 8009afa:	af00      	add	r7, sp, #0
 8009afc:	4801      	ldr	r0, [pc, #4]	@ (8009b04 <__tcf_0+0xc>)
 8009afe:	f7fa f8fd 	bl	8003cfc <_ZN8touchgfx13GeneratedFontD1Ev>
 8009b02:	bd80      	pop	{r7, pc}
 8009b04:	24001e04 	.word	0x24001e04

08009b08 <_Z24getFont_verdanab_12_4bppv>:
{
 8009b08:	b580      	push	{r7, lr}
 8009b0a:	b08c      	sub	sp, #48	@ 0x30
 8009b0c:	af0c      	add	r7, sp, #48	@ 0x30
    static touchgfx::GeneratedFont verdanab_12_4bpp(glyphs_verdanab_12_4bpp, 21, 12, 2, 4, 1, 0, 1, unicodes_verdanab_12_4bpp, kerning_verdanab_12_4bpp, 63, 0, 0, 0);
 8009b0e:	4b1f      	ldr	r3, [pc, #124]	@ (8009b8c <_Z24getFont_verdanab_12_4bppv+0x84>)
 8009b10:	681b      	ldr	r3, [r3, #0]
 8009b12:	f3bf 8f5b 	dmb	ish
 8009b16:	f003 0301 	and.w	r3, r3, #1
 8009b1a:	2b00      	cmp	r3, #0
 8009b1c:	bf0c      	ite	eq
 8009b1e:	2301      	moveq	r3, #1
 8009b20:	2300      	movne	r3, #0
 8009b22:	b2db      	uxtb	r3, r3
 8009b24:	2b00      	cmp	r3, #0
 8009b26:	d02c      	beq.n	8009b82 <_Z24getFont_verdanab_12_4bppv+0x7a>
 8009b28:	4818      	ldr	r0, [pc, #96]	@ (8009b8c <_Z24getFont_verdanab_12_4bppv+0x84>)
 8009b2a:	f020 fed6 	bl	802a8da <__cxa_guard_acquire>
 8009b2e:	4603      	mov	r3, r0
 8009b30:	2b00      	cmp	r3, #0
 8009b32:	bf14      	ite	ne
 8009b34:	2301      	movne	r3, #1
 8009b36:	2300      	moveq	r3, #0
 8009b38:	b2db      	uxtb	r3, r3
 8009b3a:	2b00      	cmp	r3, #0
 8009b3c:	d021      	beq.n	8009b82 <_Z24getFont_verdanab_12_4bppv+0x7a>
 8009b3e:	2300      	movs	r3, #0
 8009b40:	930a      	str	r3, [sp, #40]	@ 0x28
 8009b42:	2300      	movs	r3, #0
 8009b44:	9309      	str	r3, [sp, #36]	@ 0x24
 8009b46:	2300      	movs	r3, #0
 8009b48:	9308      	str	r3, [sp, #32]
 8009b4a:	233f      	movs	r3, #63	@ 0x3f
 8009b4c:	9307      	str	r3, [sp, #28]
 8009b4e:	4b10      	ldr	r3, [pc, #64]	@ (8009b90 <_Z24getFont_verdanab_12_4bppv+0x88>)
 8009b50:	9306      	str	r3, [sp, #24]
 8009b52:	4b10      	ldr	r3, [pc, #64]	@ (8009b94 <_Z24getFont_verdanab_12_4bppv+0x8c>)
 8009b54:	9305      	str	r3, [sp, #20]
 8009b56:	2301      	movs	r3, #1
 8009b58:	9304      	str	r3, [sp, #16]
 8009b5a:	2300      	movs	r3, #0
 8009b5c:	9303      	str	r3, [sp, #12]
 8009b5e:	2301      	movs	r3, #1
 8009b60:	9302      	str	r3, [sp, #8]
 8009b62:	2304      	movs	r3, #4
 8009b64:	9301      	str	r3, [sp, #4]
 8009b66:	2302      	movs	r3, #2
 8009b68:	9300      	str	r3, [sp, #0]
 8009b6a:	230c      	movs	r3, #12
 8009b6c:	2215      	movs	r2, #21
 8009b6e:	490a      	ldr	r1, [pc, #40]	@ (8009b98 <_Z24getFont_verdanab_12_4bppv+0x90>)
 8009b70:	480a      	ldr	r0, [pc, #40]	@ (8009b9c <_Z24getFont_verdanab_12_4bppv+0x94>)
 8009b72:	f7fb fd53 	bl	800561c <_ZN8touchgfx13GeneratedFontC1EPKNS_9GlyphNodeEtthhhhhPKPKhPKNS_11KerningNodeEttPKtPKNS_24FontContextualFormsTableE>
 8009b76:	480a      	ldr	r0, [pc, #40]	@ (8009ba0 <_Z24getFont_verdanab_12_4bppv+0x98>)
 8009b78:	f020 fefa 	bl	802a970 <atexit>
 8009b7c:	4803      	ldr	r0, [pc, #12]	@ (8009b8c <_Z24getFont_verdanab_12_4bppv+0x84>)
 8009b7e:	f020 feb8 	bl	802a8f2 <__cxa_guard_release>
    return verdanab_12_4bpp;
 8009b82:	4b06      	ldr	r3, [pc, #24]	@ (8009b9c <_Z24getFont_verdanab_12_4bppv+0x94>)
}
 8009b84:	4618      	mov	r0, r3
 8009b86:	46bd      	mov	sp, r7
 8009b88:	bd80      	pop	{r7, pc}
 8009b8a:	bf00      	nop
 8009b8c:	24001e2c 	.word	0x24001e2c
 8009b90:	08030360 	.word	0x08030360
 8009b94:	08030374 	.word	0x08030374
 8009b98:	90000978 	.word	0x90000978
 8009b9c:	24001e04 	.word	0x24001e04
 8009ba0:	08009af9 	.word	0x08009af9

08009ba4 <__tcf_0>:
KEEP extern const touchgfx::KerningNode kerning_verdanab_8_4bpp[] FONT_KERNING_LOCATION_FLASH_ATTRIBUTE;
touchgfx::GeneratedFont& getFont_verdanab_8_4bpp();

touchgfx::GeneratedFont& getFont_verdanab_8_4bpp()
{
    static touchgfx::GeneratedFont verdanab_8_4bpp(glyphs_verdanab_8_4bpp, 22, 8, 2, 4, 1, 0, 1, unicodes_verdanab_8_4bpp, kerning_verdanab_8_4bpp, 63, 0, 0, 0);
 8009ba4:	b580      	push	{r7, lr}
 8009ba6:	af00      	add	r7, sp, #0
 8009ba8:	4801      	ldr	r0, [pc, #4]	@ (8009bb0 <__tcf_0+0xc>)
 8009baa:	f7fa f8a7 	bl	8003cfc <_ZN8touchgfx13GeneratedFontD1Ev>
 8009bae:	bd80      	pop	{r7, pc}
 8009bb0:	24001e30 	.word	0x24001e30

08009bb4 <_Z23getFont_verdanab_8_4bppv>:
{
 8009bb4:	b580      	push	{r7, lr}
 8009bb6:	b08c      	sub	sp, #48	@ 0x30
 8009bb8:	af0c      	add	r7, sp, #48	@ 0x30
    static touchgfx::GeneratedFont verdanab_8_4bpp(glyphs_verdanab_8_4bpp, 22, 8, 2, 4, 1, 0, 1, unicodes_verdanab_8_4bpp, kerning_verdanab_8_4bpp, 63, 0, 0, 0);
 8009bba:	4b1f      	ldr	r3, [pc, #124]	@ (8009c38 <_Z23getFont_verdanab_8_4bppv+0x84>)
 8009bbc:	681b      	ldr	r3, [r3, #0]
 8009bbe:	f3bf 8f5b 	dmb	ish
 8009bc2:	f003 0301 	and.w	r3, r3, #1
 8009bc6:	2b00      	cmp	r3, #0
 8009bc8:	bf0c      	ite	eq
 8009bca:	2301      	moveq	r3, #1
 8009bcc:	2300      	movne	r3, #0
 8009bce:	b2db      	uxtb	r3, r3
 8009bd0:	2b00      	cmp	r3, #0
 8009bd2:	d02c      	beq.n	8009c2e <_Z23getFont_verdanab_8_4bppv+0x7a>
 8009bd4:	4818      	ldr	r0, [pc, #96]	@ (8009c38 <_Z23getFont_verdanab_8_4bppv+0x84>)
 8009bd6:	f020 fe80 	bl	802a8da <__cxa_guard_acquire>
 8009bda:	4603      	mov	r3, r0
 8009bdc:	2b00      	cmp	r3, #0
 8009bde:	bf14      	ite	ne
 8009be0:	2301      	movne	r3, #1
 8009be2:	2300      	moveq	r3, #0
 8009be4:	b2db      	uxtb	r3, r3
 8009be6:	2b00      	cmp	r3, #0
 8009be8:	d021      	beq.n	8009c2e <_Z23getFont_verdanab_8_4bppv+0x7a>
 8009bea:	2300      	movs	r3, #0
 8009bec:	930a      	str	r3, [sp, #40]	@ 0x28
 8009bee:	2300      	movs	r3, #0
 8009bf0:	9309      	str	r3, [sp, #36]	@ 0x24
 8009bf2:	2300      	movs	r3, #0
 8009bf4:	9308      	str	r3, [sp, #32]
 8009bf6:	233f      	movs	r3, #63	@ 0x3f
 8009bf8:	9307      	str	r3, [sp, #28]
 8009bfa:	4b10      	ldr	r3, [pc, #64]	@ (8009c3c <_Z23getFont_verdanab_8_4bppv+0x88>)
 8009bfc:	9306      	str	r3, [sp, #24]
 8009bfe:	4b10      	ldr	r3, [pc, #64]	@ (8009c40 <_Z23getFont_verdanab_8_4bppv+0x8c>)
 8009c00:	9305      	str	r3, [sp, #20]
 8009c02:	2301      	movs	r3, #1
 8009c04:	9304      	str	r3, [sp, #16]
 8009c06:	2300      	movs	r3, #0
 8009c08:	9303      	str	r3, [sp, #12]
 8009c0a:	2301      	movs	r3, #1
 8009c0c:	9302      	str	r3, [sp, #8]
 8009c0e:	2304      	movs	r3, #4
 8009c10:	9301      	str	r3, [sp, #4]
 8009c12:	2302      	movs	r3, #2
 8009c14:	9300      	str	r3, [sp, #0]
 8009c16:	2308      	movs	r3, #8
 8009c18:	2216      	movs	r2, #22
 8009c1a:	490a      	ldr	r1, [pc, #40]	@ (8009c44 <_Z23getFont_verdanab_8_4bppv+0x90>)
 8009c1c:	480a      	ldr	r0, [pc, #40]	@ (8009c48 <_Z23getFont_verdanab_8_4bppv+0x94>)
 8009c1e:	f7fb fcfd 	bl	800561c <_ZN8touchgfx13GeneratedFontC1EPKNS_9GlyphNodeEtthhhhhPKPKhPKNS_11KerningNodeEttPKtPKNS_24FontContextualFormsTableE>
 8009c22:	480a      	ldr	r0, [pc, #40]	@ (8009c4c <_Z23getFont_verdanab_8_4bppv+0x98>)
 8009c24:	f020 fea4 	bl	802a970 <atexit>
 8009c28:	4803      	ldr	r0, [pc, #12]	@ (8009c38 <_Z23getFont_verdanab_8_4bppv+0x84>)
 8009c2a:	f020 fe62 	bl	802a8f2 <__cxa_guard_release>
    return verdanab_8_4bpp;
 8009c2e:	4b06      	ldr	r3, [pc, #24]	@ (8009c48 <_Z23getFont_verdanab_8_4bppv+0x94>)
}
 8009c30:	4618      	mov	r0, r3
 8009c32:	46bd      	mov	sp, r7
 8009c34:	bd80      	pop	{r7, pc}
 8009c36:	bf00      	nop
 8009c38:	24001e58 	.word	0x24001e58
 8009c3c:	08030364 	.word	0x08030364
 8009c40:	08030378 	.word	0x08030378
 8009c44:	90000aa0 	.word	0x90000aa0
 8009c48:	24001e30 	.word	0x24001e30
 8009c4c:	08009ba5 	.word	0x08009ba5

08009c50 <_ZNK8touchgfx4Font10getKerningEtPKNS_9GlyphNodeE>:
     * @param  prevChar The Unicode value of the previous character.
     * @param  glyph    the glyph object for the current character.
     *
     * @return The kerning distance between prevChar and glyph char.
     */
    virtual int8_t getKerning(Unicode::UnicodeChar prevChar, const GlyphNode* glyph) const
 8009c50:	b480      	push	{r7}
 8009c52:	b085      	sub	sp, #20
 8009c54:	af00      	add	r7, sp, #0
 8009c56:	60f8      	str	r0, [r7, #12]
 8009c58:	460b      	mov	r3, r1
 8009c5a:	607a      	str	r2, [r7, #4]
 8009c5c:	817b      	strh	r3, [r7, #10]
    {
        return 0;
 8009c5e:	2300      	movs	r3, #0
    }
 8009c60:	4618      	mov	r0, r3
 8009c62:	3714      	adds	r7, #20
 8009c64:	46bd      	mov	sp, r7
 8009c66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c6a:	4770      	bx	lr

08009c6c <_ZNK8touchgfx4Font12getGSUBTableEv>:
    /**
     * Gets GSUB table. Currently only used for Devanagari fonts.
     *
     * @return The GSUB table or null if font has GSUB no table.
     */
    virtual const uint16_t* getGSUBTable() const
 8009c6c:	b480      	push	{r7}
 8009c6e:	b083      	sub	sp, #12
 8009c70:	af00      	add	r7, sp, #0
 8009c72:	6078      	str	r0, [r7, #4]
    {
        return 0;
 8009c74:	2300      	movs	r3, #0
    }
 8009c76:	4618      	mov	r0, r3
 8009c78:	370c      	adds	r7, #12
 8009c7a:	46bd      	mov	sp, r7
 8009c7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c80:	4770      	bx	lr

08009c82 <_ZNK8touchgfx4Font23getContextualFormsTableEv>:
    /**
     * Gets the contextual forms table used in arabic fonts.
     *
     * @return The FontContextualFormsTable or null if the font has no table.
     */
    virtual const FontContextualFormsTable* getContextualFormsTable() const
 8009c82:	b480      	push	{r7}
 8009c84:	b083      	sub	sp, #12
 8009c86:	af00      	add	r7, sp, #0
 8009c88:	6078      	str	r0, [r7, #4]
    {
        return 0;
 8009c8a:	2300      	movs	r3, #0
    }
 8009c8c:	4618      	mov	r0, r3
 8009c8e:	370c      	adds	r7, #12
 8009c90:	46bd      	mov	sp, r7
 8009c92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c96:	4770      	bx	lr

08009c98 <_ZN8touchgfx9TypedText25registerTypedTextDatabaseEPKNS0_13TypedTextDataEPKPKNS_4FontEt>:
    static void registerTypedTextDatabase(const TypedTextData* data, const Font* const* f, const uint16_t n)
 8009c98:	b480      	push	{r7}
 8009c9a:	b085      	sub	sp, #20
 8009c9c:	af00      	add	r7, sp, #0
 8009c9e:	60f8      	str	r0, [r7, #12]
 8009ca0:	60b9      	str	r1, [r7, #8]
 8009ca2:	4613      	mov	r3, r2
 8009ca4:	80fb      	strh	r3, [r7, #6]
        typedTexts = data;
 8009ca6:	4a07      	ldr	r2, [pc, #28]	@ (8009cc4 <_ZN8touchgfx9TypedText25registerTypedTextDatabaseEPKNS0_13TypedTextDataEPKPKNS_4FontEt+0x2c>)
 8009ca8:	68fb      	ldr	r3, [r7, #12]
 8009caa:	6013      	str	r3, [r2, #0]
        fonts = f;
 8009cac:	4a06      	ldr	r2, [pc, #24]	@ (8009cc8 <_ZN8touchgfx9TypedText25registerTypedTextDatabaseEPKNS0_13TypedTextDataEPKPKNS_4FontEt+0x30>)
 8009cae:	68bb      	ldr	r3, [r7, #8]
 8009cb0:	6013      	str	r3, [r2, #0]
        numberOfTypedTexts = n;
 8009cb2:	4a06      	ldr	r2, [pc, #24]	@ (8009ccc <_ZN8touchgfx9TypedText25registerTypedTextDatabaseEPKNS0_13TypedTextDataEPKPKNS_4FontEt+0x34>)
 8009cb4:	88fb      	ldrh	r3, [r7, #6]
 8009cb6:	8013      	strh	r3, [r2, #0]
    }
 8009cb8:	bf00      	nop
 8009cba:	3714      	adds	r7, #20
 8009cbc:	46bd      	mov	sp, r7
 8009cbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009cc2:	4770      	bx	lr
 8009cc4:	2400b8d0 	.word	0x2400b8d0
 8009cc8:	2400b8d8 	.word	0x2400b8d8
 8009ccc:	2400b8d4 	.word	0x2400b8d4

08009cd0 <_ZNK8touchgfx4Font14getStringWidthEPKtz>:
#include <touchgfx/hal/HAL.hpp>
#include <touchgfx/lcd/LCD.hpp>
#include <texts/TypedTextDatabase.hpp>

uint16_t touchgfx::Font::getStringWidth(const touchgfx::Unicode::UnicodeChar* text, ...) const
{
 8009cd0:	b40e      	push	{r1, r2, r3}
 8009cd2:	b580      	push	{r7, lr}
 8009cd4:	b085      	sub	sp, #20
 8009cd6:	af00      	add	r7, sp, #0
 8009cd8:	6078      	str	r0, [r7, #4]
    va_list pArg;
    va_start(pArg, text);
 8009cda:	f107 0320 	add.w	r3, r7, #32
 8009cde:	60bb      	str	r3, [r7, #8]
    uint16_t width = getStringWidthLTR(TEXT_DIRECTION_LTR, text, pArg);
 8009ce0:	68bb      	ldr	r3, [r7, #8]
 8009ce2:	69fa      	ldr	r2, [r7, #28]
 8009ce4:	2100      	movs	r1, #0
 8009ce6:	6878      	ldr	r0, [r7, #4]
 8009ce8:	f012 fb5e 	bl	801c3a8 <_ZNK8touchgfx4Font17getStringWidthLTREhPKtSt9__va_list>
 8009cec:	4603      	mov	r3, r0
 8009cee:	81fb      	strh	r3, [r7, #14]
    va_end(pArg);
    return width;
 8009cf0:	89fb      	ldrh	r3, [r7, #14]
}
 8009cf2:	4618      	mov	r0, r3
 8009cf4:	3714      	adds	r7, #20
 8009cf6:	46bd      	mov	sp, r7
 8009cf8:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8009cfc:	b003      	add	sp, #12
 8009cfe:	4770      	bx	lr

08009d00 <_ZNK8touchgfx4Font14getStringWidthEhPKtz>:

uint16_t touchgfx::Font::getStringWidth(touchgfx::TextDirection textDirection, const touchgfx::Unicode::UnicodeChar* text, ...) const
{
 8009d00:	b40c      	push	{r2, r3}
 8009d02:	b580      	push	{r7, lr}
 8009d04:	b084      	sub	sp, #16
 8009d06:	af00      	add	r7, sp, #0
 8009d08:	6078      	str	r0, [r7, #4]
 8009d0a:	460b      	mov	r3, r1
 8009d0c:	70fb      	strb	r3, [r7, #3]
    va_list pArg;
    va_start(pArg, text);
 8009d0e:	f107 031c 	add.w	r3, r7, #28
 8009d12:	60bb      	str	r3, [r7, #8]
    uint16_t width = getStringWidthLTR(textDirection, text, pArg);
 8009d14:	78f9      	ldrb	r1, [r7, #3]
 8009d16:	68bb      	ldr	r3, [r7, #8]
 8009d18:	69ba      	ldr	r2, [r7, #24]
 8009d1a:	6878      	ldr	r0, [r7, #4]
 8009d1c:	f012 fb44 	bl	801c3a8 <_ZNK8touchgfx4Font17getStringWidthLTREhPKtSt9__va_list>
 8009d20:	4603      	mov	r3, r0
 8009d22:	81fb      	strh	r3, [r7, #14]
    va_end(pArg);
    return width;
 8009d24:	89fb      	ldrh	r3, [r7, #14]
}
 8009d26:	4618      	mov	r0, r3
 8009d28:	3710      	adds	r7, #16
 8009d2a:	46bd      	mov	sp, r7
 8009d2c:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8009d30:	b002      	add	sp, #8
 8009d32:	4770      	bx	lr

08009d34 <_ZN8touchgfx12TextProvider15getNextLigatureEh>:

touchgfx::Unicode::UnicodeChar touchgfx::TextProvider::getNextLigature(TextDirection direction)
{
 8009d34:	b580      	push	{r7, lr}
 8009d36:	b08a      	sub	sp, #40	@ 0x28
 8009d38:	af00      	add	r7, sp, #0
 8009d3a:	6078      	str	r0, [r7, #4]
 8009d3c:	460b      	mov	r3, r1
 8009d3e:	70fb      	strb	r3, [r7, #3]
    if (fontGsubTable && nextCharacters.peekChar())
 8009d40:	687b      	ldr	r3, [r7, #4]
 8009d42:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8009d44:	2b00      	cmp	r3, #0
 8009d46:	d016      	beq.n	8009d76 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x42>
 8009d48:	687b      	ldr	r3, [r7, #4]
 8009d4a:	3322      	adds	r3, #34	@ 0x22
 8009d4c:	627b      	str	r3, [r7, #36]	@ 0x24
        {
            return used == size;
        }
        FORCE_INLINE_FUNCTION Unicode::UnicodeChar peekChar()
        {
            assert(used > 0);
 8009d4e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009d50:	8adb      	ldrh	r3, [r3, #22]
 8009d52:	2b00      	cmp	r3, #0
 8009d54:	d105      	bne.n	8009d62 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x2e>
 8009d56:	4b43      	ldr	r3, [pc, #268]	@ (8009e64 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x130>)
 8009d58:	4a43      	ldr	r2, [pc, #268]	@ (8009e68 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x134>)
 8009d5a:	21c0      	movs	r1, #192	@ 0xc0
 8009d5c:	4843      	ldr	r0, [pc, #268]	@ (8009e6c <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x138>)
 8009d5e:	f020 fde9 	bl	802a934 <__assert_func>
            return buffer[pos];
 8009d62:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009d64:	8a9b      	ldrh	r3, [r3, #20]
 8009d66:	461a      	mov	r2, r3
 8009d68:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009d6a:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 8009d6e:	2b00      	cmp	r3, #0
 8009d70:	d001      	beq.n	8009d76 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x42>
 8009d72:	2301      	movs	r3, #1
 8009d74:	e000      	b.n	8009d78 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x44>
 8009d76:	2300      	movs	r3, #0
 8009d78:	2b00      	cmp	r3, #0
 8009d7a:	d06a      	beq.n	8009e52 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x11e>
    {
        substituteGlyphs();
 8009d7c:	6878      	ldr	r0, [r7, #4]
 8009d7e:	f013 fecf 	bl	801db20 <_ZN8touchgfx12TextProvider16substituteGlyphsEv>
        if (nextCharacters.peekChar(1) == 0x093F) // Hindi I-matra
 8009d82:	687b      	ldr	r3, [r7, #4]
 8009d84:	3322      	adds	r3, #34	@ 0x22
 8009d86:	623b      	str	r3, [r7, #32]
 8009d88:	2301      	movs	r3, #1
 8009d8a:	83fb      	strh	r3, [r7, #30]
        }
        FORCE_INLINE_FUNCTION Unicode::UnicodeChar peekChar(uint16_t offset)
        {
            assert(offset < used);
 8009d8c:	6a3b      	ldr	r3, [r7, #32]
 8009d8e:	8adb      	ldrh	r3, [r3, #22]
 8009d90:	8bfa      	ldrh	r2, [r7, #30]
 8009d92:	429a      	cmp	r2, r3
 8009d94:	d305      	bcc.n	8009da2 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x6e>
 8009d96:	4b36      	ldr	r3, [pc, #216]	@ (8009e70 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x13c>)
 8009d98:	4a36      	ldr	r2, [pc, #216]	@ (8009e74 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x140>)
 8009d9a:	21c5      	movs	r1, #197	@ 0xc5
 8009d9c:	4833      	ldr	r0, [pc, #204]	@ (8009e6c <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x138>)
 8009d9e:	f020 fdc9 	bl	802a934 <__assert_func>
            const uint16_t index = pos + offset;
 8009da2:	6a3b      	ldr	r3, [r7, #32]
 8009da4:	8a9a      	ldrh	r2, [r3, #20]
 8009da6:	8bfb      	ldrh	r3, [r7, #30]
 8009da8:	4413      	add	r3, r2
 8009daa:	83bb      	strh	r3, [r7, #28]
            return buffer[index < size ? index : index - size];
 8009dac:	8bbb      	ldrh	r3, [r7, #28]
 8009dae:	2b09      	cmp	r3, #9
 8009db0:	d801      	bhi.n	8009db6 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x82>
 8009db2:	8bbb      	ldrh	r3, [r7, #28]
 8009db4:	e001      	b.n	8009dba <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x86>
 8009db6:	8bbb      	ldrh	r3, [r7, #28]
 8009db8:	3b0a      	subs	r3, #10
 8009dba:	6a3a      	ldr	r2, [r7, #32]
 8009dbc:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8009dc0:	f640 123f 	movw	r2, #2367	@ 0x93f
 8009dc4:	4293      	cmp	r3, r2
 8009dc6:	bf0c      	ite	eq
 8009dc8:	2301      	moveq	r3, #1
 8009dca:	2300      	movne	r3, #0
 8009dcc:	b2db      	uxtb	r3, r3
 8009dce:	2b00      	cmp	r3, #0
 8009dd0:	d03f      	beq.n	8009e52 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x11e>
        {
            nextCharacters.replaceAt1(nextCharacters.peekChar());
 8009dd2:	687b      	ldr	r3, [r7, #4]
 8009dd4:	3322      	adds	r3, #34	@ 0x22
 8009dd6:	687a      	ldr	r2, [r7, #4]
 8009dd8:	3222      	adds	r2, #34	@ 0x22
 8009dda:	60ba      	str	r2, [r7, #8]
            assert(used > 0);
 8009ddc:	68ba      	ldr	r2, [r7, #8]
 8009dde:	8ad2      	ldrh	r2, [r2, #22]
 8009de0:	2a00      	cmp	r2, #0
 8009de2:	d105      	bne.n	8009df0 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0xbc>
 8009de4:	4b1f      	ldr	r3, [pc, #124]	@ (8009e64 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x130>)
 8009de6:	4a20      	ldr	r2, [pc, #128]	@ (8009e68 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x134>)
 8009de8:	21c0      	movs	r1, #192	@ 0xc0
 8009dea:	4820      	ldr	r0, [pc, #128]	@ (8009e6c <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x138>)
 8009dec:	f020 fda2 	bl	802a934 <__assert_func>
            return buffer[pos];
 8009df0:	68ba      	ldr	r2, [r7, #8]
 8009df2:	8a92      	ldrh	r2, [r2, #20]
 8009df4:	4611      	mov	r1, r2
 8009df6:	68ba      	ldr	r2, [r7, #8]
 8009df8:	f832 2011 	ldrh.w	r2, [r2, r1, lsl #1]
 8009dfc:	613b      	str	r3, [r7, #16]
 8009dfe:	4613      	mov	r3, r2
 8009e00:	81fb      	strh	r3, [r7, #14]
        {
            buffer[pos] = newChar;
        }
        FORCE_INLINE_FUNCTION void replaceAt1(Unicode::UnicodeChar newChar)
        {
            assert(used > 1);
 8009e02:	693b      	ldr	r3, [r7, #16]
 8009e04:	8adb      	ldrh	r3, [r3, #22]
 8009e06:	2b01      	cmp	r3, #1
 8009e08:	d806      	bhi.n	8009e18 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0xe4>
 8009e0a:	4b1b      	ldr	r3, [pc, #108]	@ (8009e78 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x144>)
 8009e0c:	4a1b      	ldr	r2, [pc, #108]	@ (8009e7c <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x148>)
 8009e0e:	f240 110d 	movw	r1, #269	@ 0x10d
 8009e12:	4816      	ldr	r0, [pc, #88]	@ (8009e6c <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x138>)
 8009e14:	f020 fd8e 	bl	802a934 <__assert_func>
            const uint16_t index = pos + 1;
 8009e18:	693b      	ldr	r3, [r7, #16]
 8009e1a:	8a9b      	ldrh	r3, [r3, #20]
 8009e1c:	3301      	adds	r3, #1
 8009e1e:	81bb      	strh	r3, [r7, #12]
            buffer[index < size ? index : 0] = newChar;
 8009e20:	89bb      	ldrh	r3, [r7, #12]
 8009e22:	2b09      	cmp	r3, #9
 8009e24:	d801      	bhi.n	8009e2a <_ZN8touchgfx12TextProvider15getNextLigatureEh+0xf6>
 8009e26:	89bb      	ldrh	r3, [r7, #12]
 8009e28:	e000      	b.n	8009e2c <_ZN8touchgfx12TextProvider15getNextLigatureEh+0xf8>
 8009e2a:	2300      	movs	r3, #0
 8009e2c:	693a      	ldr	r2, [r7, #16]
 8009e2e:	89f9      	ldrh	r1, [r7, #14]
 8009e30:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
        }
 8009e34:	bf00      	nop
            nextCharacters.replaceAt0(0x093F);
 8009e36:	687b      	ldr	r3, [r7, #4]
 8009e38:	3322      	adds	r3, #34	@ 0x22
 8009e3a:	61bb      	str	r3, [r7, #24]
 8009e3c:	f640 133f 	movw	r3, #2367	@ 0x93f
 8009e40:	82fb      	strh	r3, [r7, #22]
            buffer[pos] = newChar;
 8009e42:	69bb      	ldr	r3, [r7, #24]
 8009e44:	8a9b      	ldrh	r3, [r3, #20]
 8009e46:	4619      	mov	r1, r3
 8009e48:	69bb      	ldr	r3, [r7, #24]
 8009e4a:	8afa      	ldrh	r2, [r7, #22]
 8009e4c:	f823 2011 	strh.w	r2, [r3, r1, lsl #1]
        }
 8009e50:	bf00      	nop
        }
    }
    return getNextChar();
 8009e52:	6878      	ldr	r0, [r7, #4]
 8009e54:	f013 fd48 	bl	801d8e8 <_ZN8touchgfx12TextProvider11getNextCharEv>
 8009e58:	4603      	mov	r3, r0
}
 8009e5a:	4618      	mov	r0, r3
 8009e5c:	3728      	adds	r7, #40	@ 0x28
 8009e5e:	46bd      	mov	sp, r7
 8009e60:	bd80      	pop	{r7, pc}
 8009e62:	bf00      	nop
 8009e64:	0802c380 	.word	0x0802c380
 8009e68:	0802c38c 	.word	0x0802c38c
 8009e6c:	0802c438 	.word	0x0802c438
 8009e70:	0802c484 	.word	0x0802c484
 8009e74:	0802c494 	.word	0x0802c494
 8009e78:	0802c568 	.word	0x0802c568
 8009e7c:	0802c574 	.word	0x0802c574

08009e80 <_ZN8touchgfx12TextProvider18initializeInternalEv>:

void touchgfx::TextProvider::initializeInternal()
{
 8009e80:	b580      	push	{r7, lr}
 8009e82:	b082      	sub	sp, #8
 8009e84:	af00      	add	r7, sp, #0
 8009e86:	6078      	str	r0, [r7, #4]
    fillInputBuffer();
 8009e88:	6878      	ldr	r0, [r7, #4]
 8009e8a:	f013 fce5 	bl	801d858 <_ZN8touchgfx12TextProvider15fillInputBufferEv>
}
 8009e8e:	bf00      	nop
 8009e90:	3708      	adds	r7, #8
 8009e92:	46bd      	mov	sp, r7
 8009e94:	bd80      	pop	{r7, pc}

08009e96 <_ZN8touchgfx3LCD10drawStringENS_4RectERKS1_RKNS0_13StringVisualsEPKtz>:

void touchgfx::LCD::drawString(touchgfx::Rect widgetArea, const touchgfx::Rect& invalidatedArea, const touchgfx::LCD::StringVisuals& stringVisuals, const touchgfx::Unicode::UnicodeChar* format, ...)
{
 8009e96:	b580      	push	{r7, lr}
 8009e98:	b088      	sub	sp, #32
 8009e9a:	af02      	add	r7, sp, #8
 8009e9c:	60f8      	str	r0, [r7, #12]
 8009e9e:	1d38      	adds	r0, r7, #4
 8009ea0:	e880 0006 	stmia.w	r0, {r1, r2}
 8009ea4:	603b      	str	r3, [r7, #0]
    va_list pArg;
    va_start(pArg, format);
 8009ea6:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8009eaa:	617b      	str	r3, [r7, #20]
    drawStringLTR(widgetArea, invalidatedArea, stringVisuals, format, pArg);
 8009eac:	1d39      	adds	r1, r7, #4
 8009eae:	697b      	ldr	r3, [r7, #20]
 8009eb0:	9301      	str	r3, [sp, #4]
 8009eb2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009eb4:	9300      	str	r3, [sp, #0]
 8009eb6:	6a3b      	ldr	r3, [r7, #32]
 8009eb8:	683a      	ldr	r2, [r7, #0]
 8009eba:	68f8      	ldr	r0, [r7, #12]
 8009ebc:	f010 ff4c 	bl	801ad58 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list>
    va_end(pArg);
}
 8009ec0:	bf00      	nop
 8009ec2:	3718      	adds	r7, #24
 8009ec4:	46bd      	mov	sp, r7
 8009ec6:	bd80      	pop	{r7, pc}

08009ec8 <_ZN8touchgfx5Texts11setLanguageEt>:
touchgfx::LanguageId touchgfx::Texts::currentLanguage = static_cast<touchgfx::LanguageId>(0);
static const touchgfx::Unicode::UnicodeChar* currentLanguagePtr = 0;
static const uint32_t* currentLanguageIndices = 0;

void touchgfx::Texts::setLanguage(touchgfx::LanguageId id)
{
 8009ec8:	b590      	push	{r4, r7, lr}
 8009eca:	b085      	sub	sp, #20
 8009ecc:	af00      	add	r7, sp, #0
 8009ece:	4603      	mov	r3, r0
 8009ed0:	80fb      	strh	r3, [r7, #6]
    const touchgfx::TypedText::TypedTextData* currentLanguageTypedText = 0;
 8009ed2:	2300      	movs	r3, #0
 8009ed4:	60fb      	str	r3, [r7, #12]
    if (id < 1)
 8009ed6:	88fb      	ldrh	r3, [r7, #6]
 8009ed8:	2b00      	cmp	r3, #0
 8009eda:	d127      	bne.n	8009f2c <_ZN8touchgfx5Texts11setLanguageEt+0x64>
    {
        if (languagesArray[id] != 0)
 8009edc:	88fb      	ldrh	r3, [r7, #6]
 8009ede:	4a1e      	ldr	r2, [pc, #120]	@ (8009f58 <_ZN8touchgfx5Texts11setLanguageEt+0x90>)
 8009ee0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8009ee4:	2b00      	cmp	r3, #0
 8009ee6:	d016      	beq.n	8009f16 <_ZN8touchgfx5Texts11setLanguageEt+0x4e>
        {
            // Dynamic translation is added
            const TranslationHeader* translation = languagesArray[id];
 8009ee8:	88fb      	ldrh	r3, [r7, #6]
 8009eea:	4a1b      	ldr	r2, [pc, #108]	@ (8009f58 <_ZN8touchgfx5Texts11setLanguageEt+0x90>)
 8009eec:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8009ef0:	60bb      	str	r3, [r7, #8]
            currentLanguagePtr = (const touchgfx::Unicode::UnicodeChar*)(((const uint8_t*)translation) + translation->offset_to_texts);
 8009ef2:	68bb      	ldr	r3, [r7, #8]
 8009ef4:	681b      	ldr	r3, [r3, #0]
 8009ef6:	68ba      	ldr	r2, [r7, #8]
 8009ef8:	4413      	add	r3, r2
 8009efa:	4a18      	ldr	r2, [pc, #96]	@ (8009f5c <_ZN8touchgfx5Texts11setLanguageEt+0x94>)
 8009efc:	6013      	str	r3, [r2, #0]
            currentLanguageIndices = (const uint32_t*)(((const uint8_t*)translation) + translation->offset_to_indices);
 8009efe:	68bb      	ldr	r3, [r7, #8]
 8009f00:	685b      	ldr	r3, [r3, #4]
 8009f02:	68ba      	ldr	r2, [r7, #8]
 8009f04:	4413      	add	r3, r2
 8009f06:	4a16      	ldr	r2, [pc, #88]	@ (8009f60 <_ZN8touchgfx5Texts11setLanguageEt+0x98>)
 8009f08:	6013      	str	r3, [r2, #0]
            currentLanguageTypedText = (const touchgfx::TypedText::TypedTextData*)(((const uint8_t*)translation) + translation->offset_to_typedtext);
 8009f0a:	68bb      	ldr	r3, [r7, #8]
 8009f0c:	689b      	ldr	r3, [r3, #8]
 8009f0e:	68ba      	ldr	r2, [r7, #8]
 8009f10:	4413      	add	r3, r2
 8009f12:	60fb      	str	r3, [r7, #12]
 8009f14:	e00a      	b.n	8009f2c <_ZN8touchgfx5Texts11setLanguageEt+0x64>
        }
        else
        {
            // Compiled and linked in languages
            currentLanguagePtr = texts_all_languages;
 8009f16:	4b11      	ldr	r3, [pc, #68]	@ (8009f5c <_ZN8touchgfx5Texts11setLanguageEt+0x94>)
 8009f18:	4a12      	ldr	r2, [pc, #72]	@ (8009f64 <_ZN8touchgfx5Texts11setLanguageEt+0x9c>)
 8009f1a:	601a      	str	r2, [r3, #0]
            currentLanguageIndices = staticLanguageIndices[id];
 8009f1c:	4a12      	ldr	r2, [pc, #72]	@ (8009f68 <_ZN8touchgfx5Texts11setLanguageEt+0xa0>)
 8009f1e:	4b10      	ldr	r3, [pc, #64]	@ (8009f60 <_ZN8touchgfx5Texts11setLanguageEt+0x98>)
 8009f20:	601a      	str	r2, [r3, #0]
            currentLanguageTypedText = typedTextDatabaseArray[id];
 8009f22:	88fb      	ldrh	r3, [r7, #6]
 8009f24:	4a11      	ldr	r2, [pc, #68]	@ (8009f6c <_ZN8touchgfx5Texts11setLanguageEt+0xa4>)
 8009f26:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8009f2a:	60fb      	str	r3, [r7, #12]
        }
    }

    if (currentLanguageTypedText)
 8009f2c:	68fb      	ldr	r3, [r7, #12]
 8009f2e:	2b00      	cmp	r3, #0
 8009f30:	d00d      	beq.n	8009f4e <_ZN8touchgfx5Texts11setLanguageEt+0x86>
    {
        currentLanguage = id;
 8009f32:	4a0f      	ldr	r2, [pc, #60]	@ (8009f70 <_ZN8touchgfx5Texts11setLanguageEt+0xa8>)
 8009f34:	88fb      	ldrh	r3, [r7, #6]
 8009f36:	8013      	strh	r3, [r2, #0]
        touchgfx::TypedText::registerTypedTextDatabase(currentLanguageTypedText,
                                                       TypedTextDatabase::getFonts(), TypedTextDatabase::getInstanceSize());
 8009f38:	f000 f83e 	bl	8009fb8 <_ZN17TypedTextDatabase8getFontsEv>
 8009f3c:	4604      	mov	r4, r0
        touchgfx::TypedText::registerTypedTextDatabase(currentLanguageTypedText,
 8009f3e:	f000 f833 	bl	8009fa8 <_ZN17TypedTextDatabase15getInstanceSizeEv>
 8009f42:	4603      	mov	r3, r0
 8009f44:	461a      	mov	r2, r3
 8009f46:	4621      	mov	r1, r4
 8009f48:	68f8      	ldr	r0, [r7, #12]
 8009f4a:	f7ff fea5 	bl	8009c98 <_ZN8touchgfx9TypedText25registerTypedTextDatabaseEPKNS0_13TypedTextDataEPKPKNS_4FontEt>
    }
}
 8009f4e:	bf00      	nop
 8009f50:	3714      	adds	r7, #20
 8009f52:	46bd      	mov	sp, r7
 8009f54:	bd90      	pop	{r4, r7, pc}
 8009f56:	bf00      	nop
 8009f58:	24001e5c 	.word	0x24001e5c
 8009f5c:	24001e64 	.word	0x24001e64
 8009f60:	24001e68 	.word	0x24001e68
 8009f64:	90000c04 	.word	0x90000c04
 8009f68:	90000bd4 	.word	0x90000bd4
 8009f6c:	90000dec 	.word	0x90000dec
 8009f70:	24001e60 	.word	0x24001e60

08009f74 <_ZNK8touchgfx5Texts7getTextEt>:
{
    languagesArray[id] = (const TranslationHeader*)translation;
}

const touchgfx::Unicode::UnicodeChar* touchgfx::Texts::getText(TypedTextId id) const
{
 8009f74:	b480      	push	{r7}
 8009f76:	b083      	sub	sp, #12
 8009f78:	af00      	add	r7, sp, #0
 8009f7a:	6078      	str	r0, [r7, #4]
 8009f7c:	460b      	mov	r3, r1
 8009f7e:	807b      	strh	r3, [r7, #2]
    return &currentLanguagePtr[currentLanguageIndices[id]];
 8009f80:	4b07      	ldr	r3, [pc, #28]	@ (8009fa0 <_ZNK8touchgfx5Texts7getTextEt+0x2c>)
 8009f82:	681a      	ldr	r2, [r3, #0]
 8009f84:	4b07      	ldr	r3, [pc, #28]	@ (8009fa4 <_ZNK8touchgfx5Texts7getTextEt+0x30>)
 8009f86:	6819      	ldr	r1, [r3, #0]
 8009f88:	887b      	ldrh	r3, [r7, #2]
 8009f8a:	009b      	lsls	r3, r3, #2
 8009f8c:	440b      	add	r3, r1
 8009f8e:	681b      	ldr	r3, [r3, #0]
 8009f90:	005b      	lsls	r3, r3, #1
 8009f92:	4413      	add	r3, r2
}
 8009f94:	4618      	mov	r0, r3
 8009f96:	370c      	adds	r7, #12
 8009f98:	46bd      	mov	sp, r7
 8009f9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f9e:	4770      	bx	lr
 8009fa0:	24001e64 	.word	0x24001e64
 8009fa4:	24001e68 	.word	0x24001e68

08009fa8 <_ZN17TypedTextDatabase15getInstanceSizeEv>:
{
    return typedTextDatabaseArray[id];
}

uint16_t getInstanceSize()
{
 8009fa8:	b480      	push	{r7}
 8009faa:	af00      	add	r7, sp, #0
    return sizeof(typedText_database_DEFAULT) / sizeof(touchgfx::TypedText::TypedTextData);
 8009fac:	230c      	movs	r3, #12
}
 8009fae:	4618      	mov	r0, r3
 8009fb0:	46bd      	mov	sp, r7
 8009fb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009fb6:	4770      	bx	lr

08009fb8 <_ZN17TypedTextDatabase8getFontsEv>:

const touchgfx::Font** getFonts()
{
 8009fb8:	b480      	push	{r7}
 8009fba:	af00      	add	r7, sp, #0
    return touchgfx_fonts;
 8009fbc:	4b02      	ldr	r3, [pc, #8]	@ (8009fc8 <_ZN17TypedTextDatabase8getFontsEv+0x10>)
}
 8009fbe:	4618      	mov	r0, r3
 8009fc0:	46bd      	mov	sp, r7
 8009fc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009fc6:	4770      	bx	lr
 8009fc8:	24001e6c 	.word	0x24001e6c

08009fcc <_Z41__static_initialization_and_destruction_0ii>:
    case 4:
        touchgfx_fonts[4] = &(getFont_verdanab_12_4bpp());
        break;
    }
}
} // namespace TypedTextDatabase
 8009fcc:	b580      	push	{r7, lr}
 8009fce:	b082      	sub	sp, #8
 8009fd0:	af00      	add	r7, sp, #0
 8009fd2:	6078      	str	r0, [r7, #4]
 8009fd4:	6039      	str	r1, [r7, #0]
 8009fd6:	687b      	ldr	r3, [r7, #4]
 8009fd8:	2b01      	cmp	r3, #1
 8009fda:	d11d      	bne.n	800a018 <_Z41__static_initialization_and_destruction_0ii+0x4c>
 8009fdc:	683b      	ldr	r3, [r7, #0]
 8009fde:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8009fe2:	4293      	cmp	r3, r2
 8009fe4:	d118      	bne.n	800a018 <_Z41__static_initialization_and_destruction_0ii+0x4c>
    &(getFont_verdana_20_4bpp()),
 8009fe6:	f7ff fc8d 	bl	8009904 <_Z23getFont_verdana_20_4bppv>
 8009fea:	4603      	mov	r3, r0
};
 8009fec:	4a0c      	ldr	r2, [pc, #48]	@ (800a020 <_Z41__static_initialization_and_destruction_0ii+0x54>)
 8009fee:	6013      	str	r3, [r2, #0]
    &(getFont_verdana_40_4bpp()),
 8009ff0:	f7ff fcde 	bl	80099b0 <_Z23getFont_verdana_40_4bppv>
 8009ff4:	4603      	mov	r3, r0
};
 8009ff6:	4a0a      	ldr	r2, [pc, #40]	@ (800a020 <_Z41__static_initialization_and_destruction_0ii+0x54>)
 8009ff8:	6053      	str	r3, [r2, #4]
    &(getFont_verdanab_8_4bpp()),
 8009ffa:	f7ff fddb 	bl	8009bb4 <_Z23getFont_verdanab_8_4bppv>
 8009ffe:	4603      	mov	r3, r0
};
 800a000:	4a07      	ldr	r2, [pc, #28]	@ (800a020 <_Z41__static_initialization_and_destruction_0ii+0x54>)
 800a002:	6093      	str	r3, [r2, #8]
    &(getFont_verdanab_10_4bpp()),
 800a004:	f7ff fd2a 	bl	8009a5c <_Z24getFont_verdanab_10_4bppv>
 800a008:	4603      	mov	r3, r0
};
 800a00a:	4a05      	ldr	r2, [pc, #20]	@ (800a020 <_Z41__static_initialization_and_destruction_0ii+0x54>)
 800a00c:	60d3      	str	r3, [r2, #12]
    &(getFont_verdanab_12_4bpp())
 800a00e:	f7ff fd7b 	bl	8009b08 <_Z24getFont_verdanab_12_4bppv>
 800a012:	4603      	mov	r3, r0
};
 800a014:	4a02      	ldr	r2, [pc, #8]	@ (800a020 <_Z41__static_initialization_and_destruction_0ii+0x54>)
 800a016:	6113      	str	r3, [r2, #16]
} // namespace TypedTextDatabase
 800a018:	bf00      	nop
 800a01a:	3708      	adds	r7, #8
 800a01c:	46bd      	mov	sp, r7
 800a01e:	bd80      	pop	{r7, pc}
 800a020:	24001e6c 	.word	0x24001e6c

0800a024 <_GLOBAL__sub_I_touchgfx_fonts>:
 800a024:	b580      	push	{r7, lr}
 800a026:	af00      	add	r7, sp, #0
 800a028:	f64f 71ff 	movw	r1, #65535	@ 0xffff
 800a02c:	2001      	movs	r0, #1
 800a02e:	f7ff ffcd 	bl	8009fcc <_Z41__static_initialization_and_destruction_0ii>
 800a032:	bd80      	pop	{r7, pc}

0800a034 <_ZN19FrontendApplicationC1ER5ModelR12FrontendHeap>:
#include <gui/common/FrontendApplication.hpp>

FrontendApplication::FrontendApplication(Model& m, FrontendHeap& heap)
 800a034:	b580      	push	{r7, lr}
 800a036:	b084      	sub	sp, #16
 800a038:	af00      	add	r7, sp, #0
 800a03a:	60f8      	str	r0, [r7, #12]
 800a03c:	60b9      	str	r1, [r7, #8]
 800a03e:	607a      	str	r2, [r7, #4]
    : FrontendApplicationBase(m, heap)
 800a040:	68fb      	ldr	r3, [r7, #12]
 800a042:	687a      	ldr	r2, [r7, #4]
 800a044:	68b9      	ldr	r1, [r7, #8]
 800a046:	4618      	mov	r0, r3
 800a048:	f7fa f9aa 	bl	80043a0 <_ZN23FrontendApplicationBaseC1ER5ModelR12FrontendHeap>
 800a04c:	4a03      	ldr	r2, [pc, #12]	@ (800a05c <_ZN19FrontendApplicationC1ER5ModelR12FrontendHeap+0x28>)
 800a04e:	68fb      	ldr	r3, [r7, #12]
 800a050:	601a      	str	r2, [r3, #0]
{
}
 800a052:	68fb      	ldr	r3, [r7, #12]
 800a054:	4618      	mov	r0, r3
 800a056:	3710      	adds	r7, #16
 800a058:	46bd      	mov	sp, r7
 800a05a:	bd80      	pop	{r7, pc}
 800a05c:	0802c9c8 	.word	0x0802c9c8

0800a060 <_ZN8touchgfx9Presenter8activateEv>:
     * Place initialization code for the Presenter here.
     *
     * The activate function is called automatically when a screen transition causes this
     * Presenter to become active. Place initialization code for the Presenter here.
     */
    virtual void activate()
 800a060:	b480      	push	{r7}
 800a062:	b083      	sub	sp, #12
 800a064:	af00      	add	r7, sp, #0
 800a066:	6078      	str	r0, [r7, #4]
    {
    }
 800a068:	bf00      	nop
 800a06a:	370c      	adds	r7, #12
 800a06c:	46bd      	mov	sp, r7
 800a06e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a072:	4770      	bx	lr

0800a074 <_ZN8touchgfx9Presenter10deactivateEv>:
     * Place cleanup code for the Presenter here.
     *
     * The deactivate function is called automatically when a screen transition causes this
     * Presenter to become inactive. Place cleanup code for the Presenter here.
     */
    virtual void deactivate()
 800a074:	b480      	push	{r7}
 800a076:	b083      	sub	sp, #12
 800a078:	af00      	add	r7, sp, #0
 800a07a:	6078      	str	r0, [r7, #4]
    {
    }
 800a07c:	bf00      	nop
 800a07e:	370c      	adds	r7, #12
 800a080:	46bd      	mov	sp, r7
 800a082:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a086:	4770      	bx	lr

0800a088 <_ZN8touchgfx9PresenterD1Ev>:

    /** Finalizes an instance of the Presenter class. */
    virtual ~Presenter()
 800a088:	b480      	push	{r7}
 800a08a:	b083      	sub	sp, #12
 800a08c:	af00      	add	r7, sp, #0
 800a08e:	6078      	str	r0, [r7, #4]
    {
 800a090:	4a04      	ldr	r2, [pc, #16]	@ (800a0a4 <_ZN8touchgfx9PresenterD1Ev+0x1c>)
 800a092:	687b      	ldr	r3, [r7, #4]
 800a094:	601a      	str	r2, [r3, #0]
    }
 800a096:	687b      	ldr	r3, [r7, #4]
 800a098:	4618      	mov	r0, r3
 800a09a:	370c      	adds	r7, #12
 800a09c:	46bd      	mov	sp, r7
 800a09e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a0a2:	4770      	bx	lr
 800a0a4:	0802d11c 	.word	0x0802d11c

0800a0a8 <_ZN8touchgfx9PresenterD0Ev>:
    virtual ~Presenter()
 800a0a8:	b580      	push	{r7, lr}
 800a0aa:	b082      	sub	sp, #8
 800a0ac:	af00      	add	r7, sp, #0
 800a0ae:	6078      	str	r0, [r7, #4]
    }
 800a0b0:	6878      	ldr	r0, [r7, #4]
 800a0b2:	f7ff ffe9 	bl	800a088 <_ZN8touchgfx9PresenterD1Ev>
 800a0b6:	2104      	movs	r1, #4
 800a0b8:	6878      	ldr	r0, [r7, #4]
 800a0ba:	f020 fc0c 	bl	802a8d6 <_ZdlPvj>
 800a0be:	687b      	ldr	r3, [r7, #4]
 800a0c0:	4618      	mov	r0, r3
 800a0c2:	3708      	adds	r7, #8
 800a0c4:	46bd      	mov	sp, r7
 800a0c6:	bd80      	pop	{r7, pc}

0800a0c8 <_ZN8touchgfx9PresenterC1Ev>:

protected:
    /** Initializes a new instance of the Presenter class. */
    Presenter()
 800a0c8:	b480      	push	{r7}
 800a0ca:	b083      	sub	sp, #12
 800a0cc:	af00      	add	r7, sp, #0
 800a0ce:	6078      	str	r0, [r7, #4]
    {
 800a0d0:	4a04      	ldr	r2, [pc, #16]	@ (800a0e4 <_ZN8touchgfx9PresenterC1Ev+0x1c>)
 800a0d2:	687b      	ldr	r3, [r7, #4]
 800a0d4:	601a      	str	r2, [r3, #0]
    }
 800a0d6:	687b      	ldr	r3, [r7, #4]
 800a0d8:	4618      	mov	r0, r3
 800a0da:	370c      	adds	r7, #12
 800a0dc:	46bd      	mov	sp, r7
 800a0de:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a0e2:	4770      	bx	lr
 800a0e4:	0802d11c 	.word	0x0802d11c

0800a0e8 <_ZN13ModelListenerC1Ev>:
    ModelListener() : model(0) {}
 800a0e8:	b480      	push	{r7}
 800a0ea:	b083      	sub	sp, #12
 800a0ec:	af00      	add	r7, sp, #0
 800a0ee:	6078      	str	r0, [r7, #4]
 800a0f0:	4a06      	ldr	r2, [pc, #24]	@ (800a10c <_ZN13ModelListenerC1Ev+0x24>)
 800a0f2:	687b      	ldr	r3, [r7, #4]
 800a0f4:	601a      	str	r2, [r3, #0]
 800a0f6:	687b      	ldr	r3, [r7, #4]
 800a0f8:	2200      	movs	r2, #0
 800a0fa:	605a      	str	r2, [r3, #4]
 800a0fc:	687b      	ldr	r3, [r7, #4]
 800a0fe:	4618      	mov	r0, r3
 800a100:	370c      	adds	r7, #12
 800a102:	46bd      	mov	sp, r7
 800a104:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a108:	4770      	bx	lr
 800a10a:	bf00      	nop
 800a10c:	0802d10c 	.word	0x0802d10c

0800a110 <_ZN13ModelListenerD1Ev>:
    virtual ~ModelListener() {}
 800a110:	b480      	push	{r7}
 800a112:	b083      	sub	sp, #12
 800a114:	af00      	add	r7, sp, #0
 800a116:	6078      	str	r0, [r7, #4]
 800a118:	4a04      	ldr	r2, [pc, #16]	@ (800a12c <_ZN13ModelListenerD1Ev+0x1c>)
 800a11a:	687b      	ldr	r3, [r7, #4]
 800a11c:	601a      	str	r2, [r3, #0]
 800a11e:	687b      	ldr	r3, [r7, #4]
 800a120:	4618      	mov	r0, r3
 800a122:	370c      	adds	r7, #12
 800a124:	46bd      	mov	sp, r7
 800a126:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a12a:	4770      	bx	lr
 800a12c:	0802d10c 	.word	0x0802d10c

0800a130 <_ZN13ModelListenerD0Ev>:
 800a130:	b580      	push	{r7, lr}
 800a132:	b082      	sub	sp, #8
 800a134:	af00      	add	r7, sp, #0
 800a136:	6078      	str	r0, [r7, #4]
 800a138:	6878      	ldr	r0, [r7, #4]
 800a13a:	f7ff ffe9 	bl	800a110 <_ZN13ModelListenerD1Ev>
 800a13e:	2108      	movs	r1, #8
 800a140:	6878      	ldr	r0, [r7, #4]
 800a142:	f020 fbc8 	bl	802a8d6 <_ZdlPvj>
 800a146:	687b      	ldr	r3, [r7, #4]
 800a148:	4618      	mov	r0, r3
 800a14a:	3708      	adds	r7, #8
 800a14c:	46bd      	mov	sp, r7
 800a14e:	bd80      	pop	{r7, pc}

0800a150 <_ZN25Localize_AnomalyPresenterD1Ev>:
     * The deactivate function is called automatically when this screen is "switched out"
     * (ie. made inactive). Teardown functionality can be placed here.
     */
    virtual void deactivate();

    virtual ~Localize_AnomalyPresenter() {};
 800a150:	b580      	push	{r7, lr}
 800a152:	b082      	sub	sp, #8
 800a154:	af00      	add	r7, sp, #0
 800a156:	6078      	str	r0, [r7, #4]
 800a158:	4a09      	ldr	r2, [pc, #36]	@ (800a180 <_ZN25Localize_AnomalyPresenterD1Ev+0x30>)
 800a15a:	687b      	ldr	r3, [r7, #4]
 800a15c:	601a      	str	r2, [r3, #0]
 800a15e:	4a09      	ldr	r2, [pc, #36]	@ (800a184 <_ZN25Localize_AnomalyPresenterD1Ev+0x34>)
 800a160:	687b      	ldr	r3, [r7, #4]
 800a162:	605a      	str	r2, [r3, #4]
 800a164:	687b      	ldr	r3, [r7, #4]
 800a166:	3304      	adds	r3, #4
 800a168:	4618      	mov	r0, r3
 800a16a:	f7ff ffd1 	bl	800a110 <_ZN13ModelListenerD1Ev>
 800a16e:	687b      	ldr	r3, [r7, #4]
 800a170:	4618      	mov	r0, r3
 800a172:	f7ff ff89 	bl	800a088 <_ZN8touchgfx9PresenterD1Ev>
 800a176:	687b      	ldr	r3, [r7, #4]
 800a178:	4618      	mov	r0, r3
 800a17a:	3708      	adds	r7, #8
 800a17c:	46bd      	mov	sp, r7
 800a17e:	bd80      	pop	{r7, pc}
 800a180:	0802d0e4 	.word	0x0802d0e4
 800a184:	0802d0fc 	.word	0x0802d0fc

0800a188 <_ZThn4_N25Localize_AnomalyPresenterD1Ev>:
 800a188:	f1a0 0004 	sub.w	r0, r0, #4
 800a18c:	e7e0      	b.n	800a150 <_ZN25Localize_AnomalyPresenterD1Ev>
 800a18e:	bf00      	nop

0800a190 <_ZN25Localize_AnomalyPresenterD0Ev>:
 800a190:	b580      	push	{r7, lr}
 800a192:	b082      	sub	sp, #8
 800a194:	af00      	add	r7, sp, #0
 800a196:	6078      	str	r0, [r7, #4]
 800a198:	6878      	ldr	r0, [r7, #4]
 800a19a:	f7ff ffd9 	bl	800a150 <_ZN25Localize_AnomalyPresenterD1Ev>
 800a19e:	2110      	movs	r1, #16
 800a1a0:	6878      	ldr	r0, [r7, #4]
 800a1a2:	f020 fb98 	bl	802a8d6 <_ZdlPvj>
 800a1a6:	687b      	ldr	r3, [r7, #4]
 800a1a8:	4618      	mov	r0, r3
 800a1aa:	3708      	adds	r7, #8
 800a1ac:	46bd      	mov	sp, r7
 800a1ae:	bd80      	pop	{r7, pc}

0800a1b0 <_ZThn4_N25Localize_AnomalyPresenterD0Ev>:
 800a1b0:	f1a0 0004 	sub.w	r0, r0, #4
 800a1b4:	e7ec      	b.n	800a190 <_ZN25Localize_AnomalyPresenterD0Ev>
	...

0800a1b8 <_ZN25Localize_AnomalyPresenterC1ER20Localize_AnomalyView>:
#include <gui/localize_anomaly_screen/Localize_AnomalyView.hpp>
#include <gui/localize_anomaly_screen/Localize_AnomalyPresenter.hpp>

Localize_AnomalyPresenter::Localize_AnomalyPresenter(Localize_AnomalyView& v)
 800a1b8:	b580      	push	{r7, lr}
 800a1ba:	b082      	sub	sp, #8
 800a1bc:	af00      	add	r7, sp, #0
 800a1be:	6078      	str	r0, [r7, #4]
 800a1c0:	6039      	str	r1, [r7, #0]
    : view(v)
 800a1c2:	687b      	ldr	r3, [r7, #4]
 800a1c4:	4618      	mov	r0, r3
 800a1c6:	f7ff ff7f 	bl	800a0c8 <_ZN8touchgfx9PresenterC1Ev>
 800a1ca:	687b      	ldr	r3, [r7, #4]
 800a1cc:	3304      	adds	r3, #4
 800a1ce:	4618      	mov	r0, r3
 800a1d0:	f7ff ff8a 	bl	800a0e8 <_ZN13ModelListenerC1Ev>
 800a1d4:	4a06      	ldr	r2, [pc, #24]	@ (800a1f0 <_ZN25Localize_AnomalyPresenterC1ER20Localize_AnomalyView+0x38>)
 800a1d6:	687b      	ldr	r3, [r7, #4]
 800a1d8:	601a      	str	r2, [r3, #0]
 800a1da:	4a06      	ldr	r2, [pc, #24]	@ (800a1f4 <_ZN25Localize_AnomalyPresenterC1ER20Localize_AnomalyView+0x3c>)
 800a1dc:	687b      	ldr	r3, [r7, #4]
 800a1de:	605a      	str	r2, [r3, #4]
 800a1e0:	687b      	ldr	r3, [r7, #4]
 800a1e2:	683a      	ldr	r2, [r7, #0]
 800a1e4:	60da      	str	r2, [r3, #12]
{

}
 800a1e6:	687b      	ldr	r3, [r7, #4]
 800a1e8:	4618      	mov	r0, r3
 800a1ea:	3708      	adds	r7, #8
 800a1ec:	46bd      	mov	sp, r7
 800a1ee:	bd80      	pop	{r7, pc}
 800a1f0:	0802d0e4 	.word	0x0802d0e4
 800a1f4:	0802d0fc 	.word	0x0802d0fc

0800a1f8 <_ZN25Localize_AnomalyPresenter8activateEv>:

void Localize_AnomalyPresenter::activate()
{
 800a1f8:	b480      	push	{r7}
 800a1fa:	b083      	sub	sp, #12
 800a1fc:	af00      	add	r7, sp, #0
 800a1fe:	6078      	str	r0, [r7, #4]

}
 800a200:	bf00      	nop
 800a202:	370c      	adds	r7, #12
 800a204:	46bd      	mov	sp, r7
 800a206:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a20a:	4770      	bx	lr

0800a20c <_ZN25Localize_AnomalyPresenter10deactivateEv>:

void Localize_AnomalyPresenter::deactivate()
{
 800a20c:	b480      	push	{r7}
 800a20e:	b083      	sub	sp, #12
 800a210:	af00      	add	r7, sp, #0
 800a212:	6078      	str	r0, [r7, #4]

}
 800a214:	bf00      	nop
 800a216:	370c      	adds	r7, #12
 800a218:	46bd      	mov	sp, r7
 800a21a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a21e:	4770      	bx	lr

0800a220 <_ZN20Localize_AnomalyViewD1Ev>:

class Localize_AnomalyView : public Localize_AnomalyViewBase
{
public:
    Localize_AnomalyView();
    virtual ~Localize_AnomalyView() {}
 800a220:	b580      	push	{r7, lr}
 800a222:	b082      	sub	sp, #8
 800a224:	af00      	add	r7, sp, #0
 800a226:	6078      	str	r0, [r7, #4]
 800a228:	4a05      	ldr	r2, [pc, #20]	@ (800a240 <_ZN20Localize_AnomalyViewD1Ev+0x20>)
 800a22a:	687b      	ldr	r3, [r7, #4]
 800a22c:	601a      	str	r2, [r3, #0]
 800a22e:	687b      	ldr	r3, [r7, #4]
 800a230:	4618      	mov	r0, r3
 800a232:	f7fb fcdb 	bl	8005bec <_ZN24Localize_AnomalyViewBaseD1Ev>
 800a236:	687b      	ldr	r3, [r7, #4]
 800a238:	4618      	mov	r0, r3
 800a23a:	3708      	adds	r7, #8
 800a23c:	46bd      	mov	sp, r7
 800a23e:	bd80      	pop	{r7, pc}
 800a240:	0802d134 	.word	0x0802d134

0800a244 <_ZN20Localize_AnomalyViewD0Ev>:
 800a244:	b580      	push	{r7, lr}
 800a246:	b082      	sub	sp, #8
 800a248:	af00      	add	r7, sp, #0
 800a24a:	6078      	str	r0, [r7, #4]
 800a24c:	6878      	ldr	r0, [r7, #4]
 800a24e:	f7ff ffe7 	bl	800a220 <_ZN20Localize_AnomalyViewD1Ev>
 800a252:	f44f 7170 	mov.w	r1, #960	@ 0x3c0
 800a256:	6878      	ldr	r0, [r7, #4]
 800a258:	f020 fb3d 	bl	802a8d6 <_ZdlPvj>
 800a25c:	687b      	ldr	r3, [r7, #4]
 800a25e:	4618      	mov	r0, r3
 800a260:	3708      	adds	r7, #8
 800a262:	46bd      	mov	sp, r7
 800a264:	bd80      	pop	{r7, pc}
	...

0800a268 <_ZN20Localize_AnomalyViewC1Ev>:
#include <gui/localize_anomaly_screen/Localize_AnomalyView.hpp>

Localize_AnomalyView::Localize_AnomalyView()
 800a268:	b580      	push	{r7, lr}
 800a26a:	b082      	sub	sp, #8
 800a26c:	af00      	add	r7, sp, #0
 800a26e:	6078      	str	r0, [r7, #4]
 800a270:	687b      	ldr	r3, [r7, #4]
 800a272:	4618      	mov	r0, r3
 800a274:	f7fb fd60 	bl	8005d38 <_ZN24Localize_AnomalyViewBaseC1Ev>
 800a278:	4a03      	ldr	r2, [pc, #12]	@ (800a288 <_ZN20Localize_AnomalyViewC1Ev+0x20>)
 800a27a:	687b      	ldr	r3, [r7, #4]
 800a27c:	601a      	str	r2, [r3, #0]
{

}
 800a27e:	687b      	ldr	r3, [r7, #4]
 800a280:	4618      	mov	r0, r3
 800a282:	3708      	adds	r7, #8
 800a284:	46bd      	mov	sp, r7
 800a286:	bd80      	pop	{r7, pc}
 800a288:	0802d134 	.word	0x0802d134

0800a28c <_ZN20Localize_AnomalyView11setupScreenEv>:

void Localize_AnomalyView::setupScreen()
{
 800a28c:	b580      	push	{r7, lr}
 800a28e:	b082      	sub	sp, #8
 800a290:	af00      	add	r7, sp, #0
 800a292:	6078      	str	r0, [r7, #4]
    Localize_AnomalyViewBase::setupScreen();
 800a294:	687b      	ldr	r3, [r7, #4]
 800a296:	4618      	mov	r0, r3
 800a298:	f7fc fa08 	bl	80066ac <_ZN24Localize_AnomalyViewBase11setupScreenEv>
}
 800a29c:	bf00      	nop
 800a29e:	3708      	adds	r7, #8
 800a2a0:	46bd      	mov	sp, r7
 800a2a2:	bd80      	pop	{r7, pc}

0800a2a4 <_ZN20Localize_AnomalyView14tearDownScreenEv>:

void Localize_AnomalyView::tearDownScreen()
{
 800a2a4:	b580      	push	{r7, lr}
 800a2a6:	b082      	sub	sp, #8
 800a2a8:	af00      	add	r7, sp, #0
 800a2aa:	6078      	str	r0, [r7, #4]
    Localize_AnomalyViewBase::tearDownScreen();
 800a2ac:	687b      	ldr	r3, [r7, #4]
 800a2ae:	4618      	mov	r0, r3
 800a2b0:	f7fb facc 	bl	800584c <_ZN8touchgfx6Screen14tearDownScreenEv>
}
 800a2b4:	bf00      	nop
 800a2b6:	3708      	adds	r7, #8
 800a2b8:	46bd      	mov	sp, r7
 800a2ba:	bd80      	pop	{r7, pc}

0800a2bc <_ZN13MainPresenterD1Ev>:
     * The deactivate function is called automatically when this screen is "switched out"
     * (ie. made inactive). Teardown functionality can be placed here.
     */
    virtual void deactivate();

    virtual ~MainPresenter() {};
 800a2bc:	b580      	push	{r7, lr}
 800a2be:	b082      	sub	sp, #8
 800a2c0:	af00      	add	r7, sp, #0
 800a2c2:	6078      	str	r0, [r7, #4]
 800a2c4:	4a09      	ldr	r2, [pc, #36]	@ (800a2ec <_ZN13MainPresenterD1Ev+0x30>)
 800a2c6:	687b      	ldr	r3, [r7, #4]
 800a2c8:	601a      	str	r2, [r3, #0]
 800a2ca:	4a09      	ldr	r2, [pc, #36]	@ (800a2f0 <_ZN13MainPresenterD1Ev+0x34>)
 800a2cc:	687b      	ldr	r3, [r7, #4]
 800a2ce:	605a      	str	r2, [r3, #4]
 800a2d0:	687b      	ldr	r3, [r7, #4]
 800a2d2:	3304      	adds	r3, #4
 800a2d4:	4618      	mov	r0, r3
 800a2d6:	f7ff ff1b 	bl	800a110 <_ZN13ModelListenerD1Ev>
 800a2da:	687b      	ldr	r3, [r7, #4]
 800a2dc:	4618      	mov	r0, r3
 800a2de:	f7ff fed3 	bl	800a088 <_ZN8touchgfx9PresenterD1Ev>
 800a2e2:	687b      	ldr	r3, [r7, #4]
 800a2e4:	4618      	mov	r0, r3
 800a2e6:	3708      	adds	r7, #8
 800a2e8:	46bd      	mov	sp, r7
 800a2ea:	bd80      	pop	{r7, pc}
 800a2ec:	0802d16c 	.word	0x0802d16c
 800a2f0:	0802d184 	.word	0x0802d184

0800a2f4 <_ZThn4_N13MainPresenterD1Ev>:
 800a2f4:	f1a0 0004 	sub.w	r0, r0, #4
 800a2f8:	e7e0      	b.n	800a2bc <_ZN13MainPresenterD1Ev>
 800a2fa:	bf00      	nop

0800a2fc <_ZN13MainPresenterD0Ev>:
 800a2fc:	b580      	push	{r7, lr}
 800a2fe:	b082      	sub	sp, #8
 800a300:	af00      	add	r7, sp, #0
 800a302:	6078      	str	r0, [r7, #4]
 800a304:	6878      	ldr	r0, [r7, #4]
 800a306:	f7ff ffd9 	bl	800a2bc <_ZN13MainPresenterD1Ev>
 800a30a:	2110      	movs	r1, #16
 800a30c:	6878      	ldr	r0, [r7, #4]
 800a30e:	f020 fae2 	bl	802a8d6 <_ZdlPvj>
 800a312:	687b      	ldr	r3, [r7, #4]
 800a314:	4618      	mov	r0, r3
 800a316:	3708      	adds	r7, #8
 800a318:	46bd      	mov	sp, r7
 800a31a:	bd80      	pop	{r7, pc}

0800a31c <_ZThn4_N13MainPresenterD0Ev>:
 800a31c:	f1a0 0004 	sub.w	r0, r0, #4
 800a320:	e7ec      	b.n	800a2fc <_ZN13MainPresenterD0Ev>
	...

0800a324 <_ZN13MainPresenterC1ER8MainView>:
#include <gui/main_screen/MainView.hpp>
#include <gui/main_screen/MainPresenter.hpp>

MainPresenter::MainPresenter(MainView& v)
 800a324:	b580      	push	{r7, lr}
 800a326:	b082      	sub	sp, #8
 800a328:	af00      	add	r7, sp, #0
 800a32a:	6078      	str	r0, [r7, #4]
 800a32c:	6039      	str	r1, [r7, #0]
    : view(v)
 800a32e:	687b      	ldr	r3, [r7, #4]
 800a330:	4618      	mov	r0, r3
 800a332:	f7ff fec9 	bl	800a0c8 <_ZN8touchgfx9PresenterC1Ev>
 800a336:	687b      	ldr	r3, [r7, #4]
 800a338:	3304      	adds	r3, #4
 800a33a:	4618      	mov	r0, r3
 800a33c:	f7ff fed4 	bl	800a0e8 <_ZN13ModelListenerC1Ev>
 800a340:	4a06      	ldr	r2, [pc, #24]	@ (800a35c <_ZN13MainPresenterC1ER8MainView+0x38>)
 800a342:	687b      	ldr	r3, [r7, #4]
 800a344:	601a      	str	r2, [r3, #0]
 800a346:	4a06      	ldr	r2, [pc, #24]	@ (800a360 <_ZN13MainPresenterC1ER8MainView+0x3c>)
 800a348:	687b      	ldr	r3, [r7, #4]
 800a34a:	605a      	str	r2, [r3, #4]
 800a34c:	687b      	ldr	r3, [r7, #4]
 800a34e:	683a      	ldr	r2, [r7, #0]
 800a350:	60da      	str	r2, [r3, #12]
{
}
 800a352:	687b      	ldr	r3, [r7, #4]
 800a354:	4618      	mov	r0, r3
 800a356:	3708      	adds	r7, #8
 800a358:	46bd      	mov	sp, r7
 800a35a:	bd80      	pop	{r7, pc}
 800a35c:	0802d16c 	.word	0x0802d16c
 800a360:	0802d184 	.word	0x0802d184

0800a364 <_ZN13MainPresenter8activateEv>:

void MainPresenter::activate()
{
 800a364:	b480      	push	{r7}
 800a366:	b083      	sub	sp, #12
 800a368:	af00      	add	r7, sp, #0
 800a36a:	6078      	str	r0, [r7, #4]
}
 800a36c:	bf00      	nop
 800a36e:	370c      	adds	r7, #12
 800a370:	46bd      	mov	sp, r7
 800a372:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a376:	4770      	bx	lr

0800a378 <_ZN13MainPresenter10deactivateEv>:

void MainPresenter::deactivate()
{
 800a378:	b480      	push	{r7}
 800a37a:	b083      	sub	sp, #12
 800a37c:	af00      	add	r7, sp, #0
 800a37e:	6078      	str	r0, [r7, #4]
}
 800a380:	bf00      	nop
 800a382:	370c      	adds	r7, #12
 800a384:	46bd      	mov	sp, r7
 800a386:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a38a:	4770      	bx	lr

0800a38c <_ZNK8touchgfx6Bitmap5getIdEv>:
    /**
     * Gets the id of this Bitmap.
     *
     * @return The id of this Bitmap.
     */
    BitmapId getId() const
 800a38c:	b580      	push	{r7, lr}
 800a38e:	b082      	sub	sp, #8
 800a390:	af00      	add	r7, sp, #0
 800a392:	6078      	str	r0, [r7, #4]
    {
        assert(bitmaps != 0 && "Bitmap database has not been initialized.");
 800a394:	4b07      	ldr	r3, [pc, #28]	@ (800a3b4 <_ZNK8touchgfx6Bitmap5getIdEv+0x28>)
 800a396:	681b      	ldr	r3, [r3, #0]
 800a398:	2b00      	cmp	r3, #0
 800a39a:	d105      	bne.n	800a3a8 <_ZNK8touchgfx6Bitmap5getIdEv+0x1c>
 800a39c:	4b06      	ldr	r3, [pc, #24]	@ (800a3b8 <_ZNK8touchgfx6Bitmap5getIdEv+0x2c>)
 800a39e:	4a07      	ldr	r2, [pc, #28]	@ (800a3bc <_ZNK8touchgfx6Bitmap5getIdEv+0x30>)
 800a3a0:	2187      	movs	r1, #135	@ 0x87
 800a3a2:	4807      	ldr	r0, [pc, #28]	@ (800a3c0 <_ZNK8touchgfx6Bitmap5getIdEv+0x34>)
 800a3a4:	f020 fac6 	bl	802a934 <__assert_func>
        return bitmapId;
 800a3a8:	687b      	ldr	r3, [r7, #4]
 800a3aa:	881b      	ldrh	r3, [r3, #0]
    }
 800a3ac:	4618      	mov	r0, r3
 800a3ae:	3708      	adds	r7, #8
 800a3b0:	46bd      	mov	sp, r7
 800a3b2:	bd80      	pop	{r7, pc}
 800a3b4:	2400b908 	.word	0x2400b908
 800a3b8:	0802c628 	.word	0x0802c628
 800a3bc:	0802c664 	.word	0x0802c664
 800a3c0:	0802c698 	.word	0x0802c698

0800a3c4 <_ZNK8touchgfx12ToggleButton8getStateEv>:
     * Gets the state of the ToggleButton as set with forceState.
     *
     * @return True if the button has been toggled, i.e. the pressed state is shown when the
     *         button is not pressed.
     */
    bool getState() const
 800a3c4:	b590      	push	{r4, r7, lr}
 800a3c6:	b083      	sub	sp, #12
 800a3c8:	af00      	add	r7, sp, #0
 800a3ca:	6078      	str	r0, [r7, #4]
    {
        return up.getId() == originalPressed.getId();
 800a3cc:	687b      	ldr	r3, [r7, #4]
 800a3ce:	332e      	adds	r3, #46	@ 0x2e
 800a3d0:	4618      	mov	r0, r3
 800a3d2:	f7ff ffdb 	bl	800a38c <_ZNK8touchgfx6Bitmap5getIdEv>
 800a3d6:	4603      	mov	r3, r0
 800a3d8:	461c      	mov	r4, r3
 800a3da:	687b      	ldr	r3, [r7, #4]
 800a3dc:	3334      	adds	r3, #52	@ 0x34
 800a3de:	4618      	mov	r0, r3
 800a3e0:	f7ff ffd4 	bl	800a38c <_ZNK8touchgfx6Bitmap5getIdEv>
 800a3e4:	4603      	mov	r3, r0
 800a3e6:	429c      	cmp	r4, r3
 800a3e8:	bf0c      	ite	eq
 800a3ea:	2301      	moveq	r3, #1
 800a3ec:	2300      	movne	r3, #0
 800a3ee:	b2db      	uxtb	r3, r3
    }
 800a3f0:	4618      	mov	r0, r3
 800a3f2:	370c      	adds	r7, #12
 800a3f4:	46bd      	mov	sp, r7
 800a3f6:	bd90      	pop	{r4, r7, pc}

0800a3f8 <_ZN8MainViewD1Ev>:

class MainView : public MainViewBase
{
public:
    MainView();
    virtual ~MainView() {}
 800a3f8:	b580      	push	{r7, lr}
 800a3fa:	b082      	sub	sp, #8
 800a3fc:	af00      	add	r7, sp, #0
 800a3fe:	6078      	str	r0, [r7, #4]
 800a400:	4a05      	ldr	r2, [pc, #20]	@ (800a418 <_ZN8MainViewD1Ev+0x20>)
 800a402:	687b      	ldr	r3, [r7, #4]
 800a404:	601a      	str	r2, [r3, #0]
 800a406:	687b      	ldr	r3, [r7, #4]
 800a408:	4618      	mov	r0, r3
 800a40a:	f7fc fb4f 	bl	8006aac <_ZN12MainViewBaseD1Ev>
 800a40e:	687b      	ldr	r3, [r7, #4]
 800a410:	4618      	mov	r0, r3
 800a412:	3708      	adds	r7, #8
 800a414:	46bd      	mov	sp, r7
 800a416:	bd80      	pop	{r7, pc}
 800a418:	0802d194 	.word	0x0802d194

0800a41c <_ZN8MainViewD0Ev>:
 800a41c:	b580      	push	{r7, lr}
 800a41e:	b082      	sub	sp, #8
 800a420:	af00      	add	r7, sp, #0
 800a422:	6078      	str	r0, [r7, #4]
 800a424:	6878      	ldr	r0, [r7, #4]
 800a426:	f7ff ffe7 	bl	800a3f8 <_ZN8MainViewD1Ev>
 800a42a:	f640 3118 	movw	r1, #2840	@ 0xb18
 800a42e:	6878      	ldr	r0, [r7, #4]
 800a430:	f020 fa51 	bl	802a8d6 <_ZdlPvj>
 800a434:	687b      	ldr	r3, [r7, #4]
 800a436:	4618      	mov	r0, r3
 800a438:	3708      	adds	r7, #8
 800a43a:	46bd      	mov	sp, r7
 800a43c:	bd80      	pop	{r7, pc}
	...

0800a440 <_ZN8MainViewC1Ev>:
#include "ipc_interface.h"

systemState state;
int currentDelta = 0;

MainView::MainView()
 800a440:	b580      	push	{r7, lr}
 800a442:	b082      	sub	sp, #8
 800a444:	af00      	add	r7, sp, #0
 800a446:	6078      	str	r0, [r7, #4]
 800a448:	687b      	ldr	r3, [r7, #4]
 800a44a:	4618      	mov	r0, r3
 800a44c:	f7fc fcc6 	bl	8006ddc <_ZN12MainViewBaseC1Ev>
 800a450:	4a03      	ldr	r2, [pc, #12]	@ (800a460 <_ZN8MainViewC1Ev+0x20>)
 800a452:	687b      	ldr	r3, [r7, #4]
 800a454:	601a      	str	r2, [r3, #0]
{
}
 800a456:	687b      	ldr	r3, [r7, #4]
 800a458:	4618      	mov	r0, r3
 800a45a:	3708      	adds	r7, #8
 800a45c:	46bd      	mov	sp, r7
 800a45e:	bd80      	pop	{r7, pc}
 800a460:	0802d194 	.word	0x0802d194

0800a464 <_ZN8MainView11setupScreenEv>:

void MainView::setupScreen()
{
 800a464:	b580      	push	{r7, lr}
 800a466:	b082      	sub	sp, #8
 800a468:	af00      	add	r7, sp, #0
 800a46a:	6078      	str	r0, [r7, #4]
	//setup voiceToggle
	if(!state.voiceToggle) {
 800a46c:	4b60      	ldr	r3, [pc, #384]	@ (800a5f0 <_ZN8MainView11setupScreenEv+0x18c>)
 800a46e:	791b      	ldrb	r3, [r3, #4]
 800a470:	f083 0301 	eor.w	r3, r3, #1
 800a474:	b2db      	uxtb	r3, r3
 800a476:	2b00      	cmp	r3, #0
 800a478:	d026      	beq.n	800a4c8 <_ZN8MainView11setupScreenEv+0x64>
		VoiceCommMess_Text_On.setVisible(false);
 800a47a:	687b      	ldr	r3, [r7, #4]
 800a47c:	f203 737c 	addw	r3, r3, #1916	@ 0x77c
 800a480:	2100      	movs	r1, #0
 800a482:	4618      	mov	r0, r3
 800a484:	f7fc fabd 	bl	8006a02 <_ZN8touchgfx8Drawable10setVisibleEb>
		VoiceCommMess_Text_Off.setVisible(true);
 800a488:	687b      	ldr	r3, [r7, #4]
 800a48a:	f503 63f7 	add.w	r3, r3, #1976	@ 0x7b8
 800a48e:	2101      	movs	r1, #1
 800a490:	4618      	mov	r0, r3
 800a492:	f7fc fab6 	bl	8006a02 <_ZN8touchgfx8Drawable10setVisibleEb>

		VoiceCommMess_Text_On.invalidate();
 800a496:	687b      	ldr	r3, [r7, #4]
 800a498:	f203 737c 	addw	r3, r3, #1916	@ 0x77c
 800a49c:	4618      	mov	r0, r3
 800a49e:	f012 f8a5 	bl	801c5ec <_ZNK8touchgfx8Drawable10invalidateEv>
		VoiceCommMess_Text_Off.invalidate();
 800a4a2:	687b      	ldr	r3, [r7, #4]
 800a4a4:	f503 63f7 	add.w	r3, r3, #1976	@ 0x7b8
 800a4a8:	4618      	mov	r0, r3
 800a4aa:	f012 f89f 	bl	801c5ec <_ZNK8touchgfx8Drawable10invalidateEv>

		Voice_Toggle_Button.forceState(true);
 800a4ae:	687b      	ldr	r3, [r7, #4]
 800a4b0:	f203 43f4 	addw	r3, r3, #1268	@ 0x4f4
 800a4b4:	2101      	movs	r1, #1
 800a4b6:	4618      	mov	r0, r3
 800a4b8:	f00e ff40 	bl	801933c <_ZN8touchgfx12ToggleButton10forceStateEb>
		Voice_Toggle_Button.invalidate();
 800a4bc:	687b      	ldr	r3, [r7, #4]
 800a4be:	f203 43f4 	addw	r3, r3, #1268	@ 0x4f4
 800a4c2:	4618      	mov	r0, r3
 800a4c4:	f012 f892 	bl	801c5ec <_ZNK8touchgfx8Drawable10invalidateEv>
	}

	//setup volume
	textProgress1.setValue(state.volume);
 800a4c8:	687b      	ldr	r3, [r7, #4]
 800a4ca:	f503 7315 	add.w	r3, r3, #596	@ 0x254
 800a4ce:	4a48      	ldr	r2, [pc, #288]	@ (800a5f0 <_ZN8MainView11setupScreenEv+0x18c>)
 800a4d0:	6812      	ldr	r2, [r2, #0]
 800a4d2:	4611      	mov	r1, r2
 800a4d4:	4618      	mov	r0, r3
 800a4d6:	f00c ff45 	bl	8017364 <_ZN8touchgfx12TextProgress8setValueEi>
	Volume_Slider.setValue(state.volume);
 800a4da:	687b      	ldr	r3, [r7, #4]
 800a4dc:	f503 737e 	add.w	r3, r3, #1016	@ 0x3f8
 800a4e0:	4a43      	ldr	r2, [pc, #268]	@ (800a5f0 <_ZN8MainView11setupScreenEv+0x18c>)
 800a4e2:	6812      	ldr	r2, [r2, #0]
 800a4e4:	4611      	mov	r1, r2
 800a4e6:	4618      	mov	r0, r3
 800a4e8:	f00d fc53 	bl	8017d92 <_ZN8touchgfx6Slider8setValueEi>
	Volume_Slider.invalidate();
 800a4ec:	687b      	ldr	r3, [r7, #4]
 800a4ee:	f503 737e 	add.w	r3, r3, #1016	@ 0x3f8
 800a4f2:	4618      	mov	r0, r3
 800a4f4:	f012 f87a 	bl	801c5ec <_ZNK8touchgfx8Drawable10invalidateEv>

	//setup anomaly message
	AnomalyWarning_Textbox_1_1.setVisible(state.anomalyDetected);
 800a4f8:	687b      	ldr	r3, [r7, #4]
 800a4fa:	f203 73f4 	addw	r3, r3, #2036	@ 0x7f4
 800a4fe:	4a3c      	ldr	r2, [pc, #240]	@ (800a5f0 <_ZN8MainView11setupScreenEv+0x18c>)
 800a500:	7952      	ldrb	r2, [r2, #5]
 800a502:	b2d2      	uxtb	r2, r2
 800a504:	4611      	mov	r1, r2
 800a506:	4618      	mov	r0, r3
 800a508:	f7fc fa7b 	bl	8006a02 <_ZN8touchgfx8Drawable10setVisibleEb>
	AnomalyWarning_Textbox_1_1.invalidate();
 800a50c:	687b      	ldr	r3, [r7, #4]
 800a50e:	f203 73f4 	addw	r3, r3, #2036	@ 0x7f4
 800a512:	4618      	mov	r0, r3
 800a514:	f012 f86a 	bl	801c5ec <_ZNK8touchgfx8Drawable10invalidateEv>

	MessageBoard_Message_1.setVisible(state.alert);
 800a518:	687b      	ldr	r3, [r7, #4]
 800a51a:	f603 0388 	addw	r3, r3, #2184	@ 0x888
 800a51e:	4a34      	ldr	r2, [pc, #208]	@ (800a5f0 <_ZN8MainView11setupScreenEv+0x18c>)
 800a520:	7992      	ldrb	r2, [r2, #6]
 800a522:	4611      	mov	r1, r2
 800a524:	4618      	mov	r0, r3
 800a526:	f7fc fa6c 	bl	8006a02 <_ZN8touchgfx8Drawable10setVisibleEb>
	MessageBoard_Message_1.invalidate();
 800a52a:	687b      	ldr	r3, [r7, #4]
 800a52c:	f603 0388 	addw	r3, r3, #2184	@ 0x888
 800a530:	4618      	mov	r0, r3
 800a532:	f012 f85b 	bl	801c5ec <_ZNK8touchgfx8Drawable10invalidateEv>
	MessageBoard_Message_Muted.setVisible(!state.alert);
 800a536:	687b      	ldr	r3, [r7, #4]
 800a538:	f603 02c4 	addw	r2, r3, #2244	@ 0x8c4
 800a53c:	4b2c      	ldr	r3, [pc, #176]	@ (800a5f0 <_ZN8MainView11setupScreenEv+0x18c>)
 800a53e:	799b      	ldrb	r3, [r3, #6]
 800a540:	f083 0301 	eor.w	r3, r3, #1
 800a544:	b2db      	uxtb	r3, r3
 800a546:	4619      	mov	r1, r3
 800a548:	4610      	mov	r0, r2
 800a54a:	f7fc fa5a 	bl	8006a02 <_ZN8touchgfx8Drawable10setVisibleEb>
	MessageBoard_Message_Muted.invalidate();
 800a54e:	687b      	ldr	r3, [r7, #4]
 800a550:	f603 03c4 	addw	r3, r3, #2244	@ 0x8c4
 800a554:	4618      	mov	r0, r3
 800a556:	f012 f849 	bl	801c5ec <_ZNK8touchgfx8Drawable10invalidateEv>

	//Set buttons
	Localize_Button.setVisible(state.anomalyDetected);
 800a55a:	687b      	ldr	r3, [r7, #4]
 800a55c:	f603 2328 	addw	r3, r3, #2600	@ 0xa28
 800a560:	4a23      	ldr	r2, [pc, #140]	@ (800a5f0 <_ZN8MainView11setupScreenEv+0x18c>)
 800a562:	7952      	ldrb	r2, [r2, #5]
 800a564:	b2d2      	uxtb	r2, r2
 800a566:	4611      	mov	r1, r2
 800a568:	4618      	mov	r0, r3
 800a56a:	f7fc fa4a 	bl	8006a02 <_ZN8touchgfx8Drawable10setVisibleEb>
	Localize_Button.invalidate();
 800a56e:	687b      	ldr	r3, [r7, #4]
 800a570:	f603 2328 	addw	r3, r3, #2600	@ 0xa28
 800a574:	4618      	mov	r0, r3
 800a576:	f012 f839 	bl	801c5ec <_ZNK8touchgfx8Drawable10invalidateEv>
	Alert_Mute_Button.setVisible(state.anomalyDetected);
 800a57a:	687b      	ldr	r3, [r7, #4]
 800a57c:	f603 13f4 	addw	r3, r3, #2548	@ 0x9f4
 800a580:	4a1b      	ldr	r2, [pc, #108]	@ (800a5f0 <_ZN8MainView11setupScreenEv+0x18c>)
 800a582:	7952      	ldrb	r2, [r2, #5]
 800a584:	b2d2      	uxtb	r2, r2
 800a586:	4611      	mov	r1, r2
 800a588:	4618      	mov	r0, r3
 800a58a:	f7fc fa3a 	bl	8006a02 <_ZN8touchgfx8Drawable10setVisibleEb>
	Alert_Mute_Button.invalidate();
 800a58e:	687b      	ldr	r3, [r7, #4]
 800a590:	f603 13f4 	addw	r3, r3, #2548	@ 0x9f4
 800a594:	4618      	mov	r0, r3
 800a596:	f012 f829 	bl	801c5ec <_ZNK8touchgfx8Drawable10invalidateEv>

	//Set disabled button images
	Disabled_Button1.setVisible(!state.anomalyDetected);
 800a59a:	687b      	ldr	r3, [r7, #4]
 800a59c:	f603 12c8 	addw	r2, r3, #2504	@ 0x9c8
 800a5a0:	4b13      	ldr	r3, [pc, #76]	@ (800a5f0 <_ZN8MainView11setupScreenEv+0x18c>)
 800a5a2:	795b      	ldrb	r3, [r3, #5]
 800a5a4:	b2db      	uxtb	r3, r3
 800a5a6:	f083 0301 	eor.w	r3, r3, #1
 800a5aa:	b2db      	uxtb	r3, r3
 800a5ac:	4619      	mov	r1, r3
 800a5ae:	4610      	mov	r0, r2
 800a5b0:	f7fc fa27 	bl	8006a02 <_ZN8touchgfx8Drawable10setVisibleEb>
	Disabled_Button1.invalidate();
 800a5b4:	687b      	ldr	r3, [r7, #4]
 800a5b6:	f603 13c8 	addw	r3, r3, #2504	@ 0x9c8
 800a5ba:	4618      	mov	r0, r3
 800a5bc:	f012 f816 	bl	801c5ec <_ZNK8touchgfx8Drawable10invalidateEv>
	Disabled_Button2.setVisible(!state.anomalyDetected);
 800a5c0:	687b      	ldr	r3, [r7, #4]
 800a5c2:	f603 129c 	addw	r2, r3, #2460	@ 0x99c
 800a5c6:	4b0a      	ldr	r3, [pc, #40]	@ (800a5f0 <_ZN8MainView11setupScreenEv+0x18c>)
 800a5c8:	795b      	ldrb	r3, [r3, #5]
 800a5ca:	b2db      	uxtb	r3, r3
 800a5cc:	f083 0301 	eor.w	r3, r3, #1
 800a5d0:	b2db      	uxtb	r3, r3
 800a5d2:	4619      	mov	r1, r3
 800a5d4:	4610      	mov	r0, r2
 800a5d6:	f7fc fa14 	bl	8006a02 <_ZN8touchgfx8Drawable10setVisibleEb>
	Disabled_Button2.invalidate();
 800a5da:	687b      	ldr	r3, [r7, #4]
 800a5dc:	f603 139c 	addw	r3, r3, #2460	@ 0x99c
 800a5e0:	4618      	mov	r0, r3
 800a5e2:	f012 f803 	bl	801c5ec <_ZNK8touchgfx8Drawable10invalidateEv>
}
 800a5e6:	bf00      	nop
 800a5e8:	3708      	adds	r7, #8
 800a5ea:	46bd      	mov	sp, r7
 800a5ec:	bd80      	pop	{r7, pc}
 800a5ee:	bf00      	nop
 800a5f0:	2400000c 	.word	0x2400000c

0800a5f4 <_ZN8MainView14tearDownScreenEv>:

void MainView::tearDownScreen()
{
 800a5f4:	b480      	push	{r7}
 800a5f6:	b083      	sub	sp, #12
 800a5f8:	af00      	add	r7, sp, #0
 800a5fa:	6078      	str	r0, [r7, #4]
}
 800a5fc:	bf00      	nop
 800a5fe:	370c      	adds	r7, #12
 800a600:	46bd      	mov	sp, r7
 800a602:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a606:	4770      	bx	lr

0800a608 <_ZN8MainView17set_volume_sliderEi>:

void MainView::set_volume_slider(int value) {
 800a608:	b580      	push	{r7, lr}
 800a60a:	b082      	sub	sp, #8
 800a60c:	af00      	add	r7, sp, #0
 800a60e:	6078      	str	r0, [r7, #4]
 800a610:	6039      	str	r1, [r7, #0]
	state.volume = value;
 800a612:	4a0e      	ldr	r2, [pc, #56]	@ (800a64c <_ZN8MainView17set_volume_sliderEi+0x44>)
 800a614:	683b      	ldr	r3, [r7, #0]
 800a616:	6013      	str	r3, [r2, #0]
	textProgress1.setValue(value);
 800a618:	687b      	ldr	r3, [r7, #4]
 800a61a:	f503 7315 	add.w	r3, r3, #596	@ 0x254
 800a61e:	6839      	ldr	r1, [r7, #0]
 800a620:	4618      	mov	r0, r3
 800a622:	f00c fe9f 	bl	8017364 <_ZN8touchgfx12TextProgress8setValueEi>

  // update IPC voice volume, normalized 0.0f to 1.0f
  IPCSetVoiceVolumeNormalized( (float)state.volume/100.0f );
 800a626:	4b09      	ldr	r3, [pc, #36]	@ (800a64c <_ZN8MainView17set_volume_sliderEi+0x44>)
 800a628:	681b      	ldr	r3, [r3, #0]
 800a62a:	ee07 3a90 	vmov	s15, r3
 800a62e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800a632:	eddf 6a07 	vldr	s13, [pc, #28]	@ 800a650 <_ZN8MainView17set_volume_sliderEi+0x48>
 800a636:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 800a63a:	eeb0 0a47 	vmov.f32	s0, s14
 800a63e:	f7f5 fe9f 	bl	8000380 <IPCSetVoiceVolumeNormalized>
}
 800a642:	bf00      	nop
 800a644:	3708      	adds	r7, #8
 800a646:	46bd      	mov	sp, r7
 800a648:	bd80      	pop	{r7, pc}
 800a64a:	bf00      	nop
 800a64c:	2400000c 	.word	0x2400000c
 800a650:	42c80000 	.word	0x42c80000

0800a654 <_ZN8MainView18set_volume_encoderEv>:

void MainView::set_volume_encoder() {
 800a654:	b580      	push	{r7, lr}
 800a656:	b084      	sub	sp, #16
 800a658:	af00      	add	r7, sp, #0
 800a65a:	6078      	str	r0, [r7, #4]
	int tempVolume = state.volume + currentDelta;
 800a65c:	4b1e      	ldr	r3, [pc, #120]	@ (800a6d8 <_ZN8MainView18set_volume_encoderEv+0x84>)
 800a65e:	681a      	ldr	r2, [r3, #0]
 800a660:	4b1e      	ldr	r3, [pc, #120]	@ (800a6dc <_ZN8MainView18set_volume_encoderEv+0x88>)
 800a662:	681b      	ldr	r3, [r3, #0]
 800a664:	4413      	add	r3, r2
 800a666:	60fb      	str	r3, [r7, #12]
	if(tempVolume > 100) {
 800a668:	68fb      	ldr	r3, [r7, #12]
 800a66a:	2b64      	cmp	r3, #100	@ 0x64
 800a66c:	dd02      	ble.n	800a674 <_ZN8MainView18set_volume_encoderEv+0x20>
		tempVolume = 100;
 800a66e:	2364      	movs	r3, #100	@ 0x64
 800a670:	60fb      	str	r3, [r7, #12]
 800a672:	e004      	b.n	800a67e <_ZN8MainView18set_volume_encoderEv+0x2a>
	}
	else if(tempVolume < 0) {
 800a674:	68fb      	ldr	r3, [r7, #12]
 800a676:	2b00      	cmp	r3, #0
 800a678:	da01      	bge.n	800a67e <_ZN8MainView18set_volume_encoderEv+0x2a>
		tempVolume = 0;
 800a67a:	2300      	movs	r3, #0
 800a67c:	60fb      	str	r3, [r7, #12]
	}
	state.volume = tempVolume;
 800a67e:	4a16      	ldr	r2, [pc, #88]	@ (800a6d8 <_ZN8MainView18set_volume_encoderEv+0x84>)
 800a680:	68fb      	ldr	r3, [r7, #12]
 800a682:	6013      	str	r3, [r2, #0]

	// update IPC voice volume, normalized 0.0f to 1.0f
	IPCSetVoiceVolumeNormalized( (float)state.volume/100.0f );
 800a684:	4b14      	ldr	r3, [pc, #80]	@ (800a6d8 <_ZN8MainView18set_volume_encoderEv+0x84>)
 800a686:	681b      	ldr	r3, [r3, #0]
 800a688:	ee07 3a90 	vmov	s15, r3
 800a68c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800a690:	eddf 6a13 	vldr	s13, [pc, #76]	@ 800a6e0 <_ZN8MainView18set_volume_encoderEv+0x8c>
 800a694:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 800a698:	eeb0 0a47 	vmov.f32	s0, s14
 800a69c:	f7f5 fe70 	bl	8000380 <IPCSetVoiceVolumeNormalized>

	//setup volume
	textProgress1.setValue(state.volume);
 800a6a0:	687b      	ldr	r3, [r7, #4]
 800a6a2:	f503 7315 	add.w	r3, r3, #596	@ 0x254
 800a6a6:	4a0c      	ldr	r2, [pc, #48]	@ (800a6d8 <_ZN8MainView18set_volume_encoderEv+0x84>)
 800a6a8:	6812      	ldr	r2, [r2, #0]
 800a6aa:	4611      	mov	r1, r2
 800a6ac:	4618      	mov	r0, r3
 800a6ae:	f00c fe59 	bl	8017364 <_ZN8touchgfx12TextProgress8setValueEi>
	Volume_Slider.setValue(state.volume);
 800a6b2:	687b      	ldr	r3, [r7, #4]
 800a6b4:	f503 737e 	add.w	r3, r3, #1016	@ 0x3f8
 800a6b8:	4a07      	ldr	r2, [pc, #28]	@ (800a6d8 <_ZN8MainView18set_volume_encoderEv+0x84>)
 800a6ba:	6812      	ldr	r2, [r2, #0]
 800a6bc:	4611      	mov	r1, r2
 800a6be:	4618      	mov	r0, r3
 800a6c0:	f00d fb67 	bl	8017d92 <_ZN8touchgfx6Slider8setValueEi>
	Volume_Slider.invalidate();
 800a6c4:	687b      	ldr	r3, [r7, #4]
 800a6c6:	f503 737e 	add.w	r3, r3, #1016	@ 0x3f8
 800a6ca:	4618      	mov	r0, r3
 800a6cc:	f011 ff8e 	bl	801c5ec <_ZNK8touchgfx8Drawable10invalidateEv>

}
 800a6d0:	bf00      	nop
 800a6d2:	3710      	adds	r7, #16
 800a6d4:	46bd      	mov	sp, r7
 800a6d6:	bd80      	pop	{r7, pc}
 800a6d8:	2400000c 	.word	0x2400000c
 800a6dc:	24001e80 	.word	0x24001e80
 800a6e0:	42c80000 	.word	0x42c80000

0800a6e4 <_ZN8MainView12toggle_voiceEv>:

/*
 * Virtual function called when either toggle button is pressed
 */
void MainView::toggle_voice() {
 800a6e4:	b580      	push	{r7, lr}
 800a6e6:	b082      	sub	sp, #8
 800a6e8:	af00      	add	r7, sp, #0
 800a6ea:	6078      	str	r0, [r7, #4]
	//Toggle voiceToggle variable
	state.voiceToggle = !state.voiceToggle;
 800a6ec:	4b37      	ldr	r3, [pc, #220]	@ (800a7cc <_ZN8MainView12toggle_voiceEv+0xe8>)
 800a6ee:	791b      	ldrb	r3, [r3, #4]
 800a6f0:	f083 0301 	eor.w	r3, r3, #1
 800a6f4:	b2da      	uxtb	r2, r3
 800a6f6:	4b35      	ldr	r3, [pc, #212]	@ (800a7cc <_ZN8MainView12toggle_voiceEv+0xe8>)
 800a6f8:	711a      	strb	r2, [r3, #4]

	// update IPC, mute state is !voiceToggle
	IPCSetVoiceMuteState( (boolean_t)!state.voiceToggle );
 800a6fa:	4b34      	ldr	r3, [pc, #208]	@ (800a7cc <_ZN8MainView12toggle_voiceEv+0xe8>)
 800a6fc:	791b      	ldrb	r3, [r3, #4]
 800a6fe:	f083 0301 	eor.w	r3, r3, #1
 800a702:	b2db      	uxtb	r3, r3
 800a704:	4618      	mov	r0, r3
 800a706:	f7f5 fe4b 	bl	80003a0 <IPCSetVoiceMuteState>

	//Update GUI accordingly
	if(state.voiceToggle) {
 800a70a:	4b30      	ldr	r3, [pc, #192]	@ (800a7cc <_ZN8MainView12toggle_voiceEv+0xe8>)
 800a70c:	791b      	ldrb	r3, [r3, #4]
 800a70e:	2b00      	cmp	r3, #0
 800a710:	d01a      	beq.n	800a748 <_ZN8MainView12toggle_voiceEv+0x64>
		VoiceCommMess_Text_On.setVisible(true);
 800a712:	687b      	ldr	r3, [r7, #4]
 800a714:	f203 737c 	addw	r3, r3, #1916	@ 0x77c
 800a718:	2101      	movs	r1, #1
 800a71a:	4618      	mov	r0, r3
 800a71c:	f7fc f971 	bl	8006a02 <_ZN8touchgfx8Drawable10setVisibleEb>
		VoiceCommMess_Text_Off.setVisible(false);
 800a720:	687b      	ldr	r3, [r7, #4]
 800a722:	f503 63f7 	add.w	r3, r3, #1976	@ 0x7b8
 800a726:	2100      	movs	r1, #0
 800a728:	4618      	mov	r0, r3
 800a72a:	f7fc f96a 	bl	8006a02 <_ZN8touchgfx8Drawable10setVisibleEb>

		VoiceCommMess_Text_On.invalidate();
 800a72e:	687b      	ldr	r3, [r7, #4]
 800a730:	f203 737c 	addw	r3, r3, #1916	@ 0x77c
 800a734:	4618      	mov	r0, r3
 800a736:	f011 ff59 	bl	801c5ec <_ZNK8touchgfx8Drawable10invalidateEv>
		VoiceCommMess_Text_Off.invalidate();
 800a73a:	687b      	ldr	r3, [r7, #4]
 800a73c:	f503 63f7 	add.w	r3, r3, #1976	@ 0x7b8
 800a740:	4618      	mov	r0, r3
 800a742:	f011 ff53 	bl	801c5ec <_ZNK8touchgfx8Drawable10invalidateEv>
 800a746:	e019      	b.n	800a77c <_ZN8MainView12toggle_voiceEv+0x98>

	} else {
		VoiceCommMess_Text_On.setVisible(false);
 800a748:	687b      	ldr	r3, [r7, #4]
 800a74a:	f203 737c 	addw	r3, r3, #1916	@ 0x77c
 800a74e:	2100      	movs	r1, #0
 800a750:	4618      	mov	r0, r3
 800a752:	f7fc f956 	bl	8006a02 <_ZN8touchgfx8Drawable10setVisibleEb>
		VoiceCommMess_Text_Off.setVisible(true);
 800a756:	687b      	ldr	r3, [r7, #4]
 800a758:	f503 63f7 	add.w	r3, r3, #1976	@ 0x7b8
 800a75c:	2101      	movs	r1, #1
 800a75e:	4618      	mov	r0, r3
 800a760:	f7fc f94f 	bl	8006a02 <_ZN8touchgfx8Drawable10setVisibleEb>

		VoiceCommMess_Text_On.invalidate();
 800a764:	687b      	ldr	r3, [r7, #4]
 800a766:	f203 737c 	addw	r3, r3, #1916	@ 0x77c
 800a76a:	4618      	mov	r0, r3
 800a76c:	f011 ff3e 	bl	801c5ec <_ZNK8touchgfx8Drawable10invalidateEv>
		VoiceCommMess_Text_Off.invalidate();
 800a770:	687b      	ldr	r3, [r7, #4]
 800a772:	f503 63f7 	add.w	r3, r3, #1976	@ 0x7b8
 800a776:	4618      	mov	r0, r3
 800a778:	f011 ff38 	bl	801c5ec <_ZNK8touchgfx8Drawable10invalidateEv>
	}

	if(Voice_Toggle_Button.getState() == state.voiceToggle) {
 800a77c:	687b      	ldr	r3, [r7, #4]
 800a77e:	f203 43f4 	addw	r3, r3, #1268	@ 0x4f4
 800a782:	4618      	mov	r0, r3
 800a784:	f7ff fe1e 	bl	800a3c4 <_ZNK8touchgfx12ToggleButton8getStateEv>
 800a788:	4603      	mov	r3, r0
 800a78a:	461a      	mov	r2, r3
 800a78c:	4b0f      	ldr	r3, [pc, #60]	@ (800a7cc <_ZN8MainView12toggle_voiceEv+0xe8>)
 800a78e:	791b      	ldrb	r3, [r3, #4]
 800a790:	429a      	cmp	r2, r3
 800a792:	bf0c      	ite	eq
 800a794:	2301      	moveq	r3, #1
 800a796:	2300      	movne	r3, #0
 800a798:	b2db      	uxtb	r3, r3
 800a79a:	2b00      	cmp	r3, #0
 800a79c:	d011      	beq.n	800a7c2 <_ZN8MainView12toggle_voiceEv+0xde>
		Voice_Toggle_Button.forceState(!state.voiceToggle);
 800a79e:	687b      	ldr	r3, [r7, #4]
 800a7a0:	f203 42f4 	addw	r2, r3, #1268	@ 0x4f4
 800a7a4:	4b09      	ldr	r3, [pc, #36]	@ (800a7cc <_ZN8MainView12toggle_voiceEv+0xe8>)
 800a7a6:	791b      	ldrb	r3, [r3, #4]
 800a7a8:	f083 0301 	eor.w	r3, r3, #1
 800a7ac:	b2db      	uxtb	r3, r3
 800a7ae:	4619      	mov	r1, r3
 800a7b0:	4610      	mov	r0, r2
 800a7b2:	f00e fdc3 	bl	801933c <_ZN8touchgfx12ToggleButton10forceStateEb>
		Voice_Toggle_Button.invalidate();
 800a7b6:	687b      	ldr	r3, [r7, #4]
 800a7b8:	f203 43f4 	addw	r3, r3, #1268	@ 0x4f4
 800a7bc:	4618      	mov	r0, r3
 800a7be:	f011 ff15 	bl	801c5ec <_ZNK8touchgfx8Drawable10invalidateEv>
	}
}
 800a7c2:	bf00      	nop
 800a7c4:	3708      	adds	r7, #8
 800a7c6:	46bd      	mov	sp, r7
 800a7c8:	bd80      	pop	{r7, pc}
 800a7ca:	bf00      	nop
 800a7cc:	2400000c 	.word	0x2400000c

0800a7d0 <_ZN8MainView20update_anomaly_alertEv>:

void MainView::update_anomaly_alert() {
 800a7d0:	b580      	push	{r7, lr}
 800a7d2:	b082      	sub	sp, #8
 800a7d4:	af00      	add	r7, sp, #0
 800a7d6:	6078      	str	r0, [r7, #4]
  // a direct cast to bool doesnt work here, need a conditional
	state.anomalyDetected = (IPCGetAnomalyDetectState( ) != 0 ? true : false);
 800a7d8:	f7f5 fdf2 	bl	80003c0 <IPCGetAnomalyDetectState>
 800a7dc:	4603      	mov	r3, r0
 800a7de:	2b00      	cmp	r3, #0
 800a7e0:	bf14      	ite	ne
 800a7e2:	2301      	movne	r3, #1
 800a7e4:	2300      	moveq	r3, #0
 800a7e6:	b2da      	uxtb	r2, r3
 800a7e8:	4b40      	ldr	r3, [pc, #256]	@ (800a8ec <_ZN8MainView20update_anomaly_alertEv+0x11c>)
 800a7ea:	715a      	strb	r2, [r3, #5]
	state.alert = state.anomalyDetected;
 800a7ec:	4b3f      	ldr	r3, [pc, #252]	@ (800a8ec <_ZN8MainView20update_anomaly_alertEv+0x11c>)
 800a7ee:	795b      	ldrb	r3, [r3, #5]
 800a7f0:	b2da      	uxtb	r2, r3
 800a7f2:	4b3e      	ldr	r3, [pc, #248]	@ (800a8ec <_ZN8MainView20update_anomaly_alertEv+0x11c>)
 800a7f4:	719a      	strb	r2, [r3, #6]

	//Set alert message
	AnomalyWarning_Textbox_1_1.setVisible(state.anomalyDetected);
 800a7f6:	687b      	ldr	r3, [r7, #4]
 800a7f8:	f203 73f4 	addw	r3, r3, #2036	@ 0x7f4
 800a7fc:	4a3b      	ldr	r2, [pc, #236]	@ (800a8ec <_ZN8MainView20update_anomaly_alertEv+0x11c>)
 800a7fe:	7952      	ldrb	r2, [r2, #5]
 800a800:	b2d2      	uxtb	r2, r2
 800a802:	4611      	mov	r1, r2
 800a804:	4618      	mov	r0, r3
 800a806:	f7fc f8fc 	bl	8006a02 <_ZN8touchgfx8Drawable10setVisibleEb>
	AnomalyWarning_Textbox_1_1.invalidate();
 800a80a:	687b      	ldr	r3, [r7, #4]
 800a80c:	f203 73f4 	addw	r3, r3, #2036	@ 0x7f4
 800a810:	4618      	mov	r0, r3
 800a812:	f011 feeb 	bl	801c5ec <_ZNK8touchgfx8Drawable10invalidateEv>

	//Set text of alert message
	MessageBoard_Message_1.setVisible(state.alert);
 800a816:	687b      	ldr	r3, [r7, #4]
 800a818:	f603 0388 	addw	r3, r3, #2184	@ 0x888
 800a81c:	4a33      	ldr	r2, [pc, #204]	@ (800a8ec <_ZN8MainView20update_anomaly_alertEv+0x11c>)
 800a81e:	7992      	ldrb	r2, [r2, #6]
 800a820:	4611      	mov	r1, r2
 800a822:	4618      	mov	r0, r3
 800a824:	f7fc f8ed 	bl	8006a02 <_ZN8touchgfx8Drawable10setVisibleEb>
	MessageBoard_Message_1.invalidate();
 800a828:	687b      	ldr	r3, [r7, #4]
 800a82a:	f603 0388 	addw	r3, r3, #2184	@ 0x888
 800a82e:	4618      	mov	r0, r3
 800a830:	f011 fedc 	bl	801c5ec <_ZNK8touchgfx8Drawable10invalidateEv>
	MessageBoard_Message_Muted.setVisible(!state.alert);
 800a834:	687b      	ldr	r3, [r7, #4]
 800a836:	f603 02c4 	addw	r2, r3, #2244	@ 0x8c4
 800a83a:	4b2c      	ldr	r3, [pc, #176]	@ (800a8ec <_ZN8MainView20update_anomaly_alertEv+0x11c>)
 800a83c:	799b      	ldrb	r3, [r3, #6]
 800a83e:	f083 0301 	eor.w	r3, r3, #1
 800a842:	b2db      	uxtb	r3, r3
 800a844:	4619      	mov	r1, r3
 800a846:	4610      	mov	r0, r2
 800a848:	f7fc f8db 	bl	8006a02 <_ZN8touchgfx8Drawable10setVisibleEb>
	MessageBoard_Message_Muted.invalidate();
 800a84c:	687b      	ldr	r3, [r7, #4]
 800a84e:	f603 03c4 	addw	r3, r3, #2244	@ 0x8c4
 800a852:	4618      	mov	r0, r3
 800a854:	f011 feca 	bl	801c5ec <_ZNK8touchgfx8Drawable10invalidateEv>

	//Set buttons
	Localize_Button.setVisible(state.anomalyDetected);
 800a858:	687b      	ldr	r3, [r7, #4]
 800a85a:	f603 2328 	addw	r3, r3, #2600	@ 0xa28
 800a85e:	4a23      	ldr	r2, [pc, #140]	@ (800a8ec <_ZN8MainView20update_anomaly_alertEv+0x11c>)
 800a860:	7952      	ldrb	r2, [r2, #5]
 800a862:	b2d2      	uxtb	r2, r2
 800a864:	4611      	mov	r1, r2
 800a866:	4618      	mov	r0, r3
 800a868:	f7fc f8cb 	bl	8006a02 <_ZN8touchgfx8Drawable10setVisibleEb>
	Localize_Button.invalidate();
 800a86c:	687b      	ldr	r3, [r7, #4]
 800a86e:	f603 2328 	addw	r3, r3, #2600	@ 0xa28
 800a872:	4618      	mov	r0, r3
 800a874:	f011 feba 	bl	801c5ec <_ZNK8touchgfx8Drawable10invalidateEv>
	Alert_Mute_Button.setVisible(state.anomalyDetected);
 800a878:	687b      	ldr	r3, [r7, #4]
 800a87a:	f603 13f4 	addw	r3, r3, #2548	@ 0x9f4
 800a87e:	4a1b      	ldr	r2, [pc, #108]	@ (800a8ec <_ZN8MainView20update_anomaly_alertEv+0x11c>)
 800a880:	7952      	ldrb	r2, [r2, #5]
 800a882:	b2d2      	uxtb	r2, r2
 800a884:	4611      	mov	r1, r2
 800a886:	4618      	mov	r0, r3
 800a888:	f7fc f8bb 	bl	8006a02 <_ZN8touchgfx8Drawable10setVisibleEb>
	Alert_Mute_Button.invalidate();
 800a88c:	687b      	ldr	r3, [r7, #4]
 800a88e:	f603 13f4 	addw	r3, r3, #2548	@ 0x9f4
 800a892:	4618      	mov	r0, r3
 800a894:	f011 feaa 	bl	801c5ec <_ZNK8touchgfx8Drawable10invalidateEv>

	//Set disabled button images
	Disabled_Button1.setVisible(!state.anomalyDetected);
 800a898:	687b      	ldr	r3, [r7, #4]
 800a89a:	f603 12c8 	addw	r2, r3, #2504	@ 0x9c8
 800a89e:	4b13      	ldr	r3, [pc, #76]	@ (800a8ec <_ZN8MainView20update_anomaly_alertEv+0x11c>)
 800a8a0:	795b      	ldrb	r3, [r3, #5]
 800a8a2:	b2db      	uxtb	r3, r3
 800a8a4:	f083 0301 	eor.w	r3, r3, #1
 800a8a8:	b2db      	uxtb	r3, r3
 800a8aa:	4619      	mov	r1, r3
 800a8ac:	4610      	mov	r0, r2
 800a8ae:	f7fc f8a8 	bl	8006a02 <_ZN8touchgfx8Drawable10setVisibleEb>
	Disabled_Button1.invalidate();
 800a8b2:	687b      	ldr	r3, [r7, #4]
 800a8b4:	f603 13c8 	addw	r3, r3, #2504	@ 0x9c8
 800a8b8:	4618      	mov	r0, r3
 800a8ba:	f011 fe97 	bl	801c5ec <_ZNK8touchgfx8Drawable10invalidateEv>
	Disabled_Button2.setVisible(!state.anomalyDetected);
 800a8be:	687b      	ldr	r3, [r7, #4]
 800a8c0:	f603 129c 	addw	r2, r3, #2460	@ 0x99c
 800a8c4:	4b09      	ldr	r3, [pc, #36]	@ (800a8ec <_ZN8MainView20update_anomaly_alertEv+0x11c>)
 800a8c6:	795b      	ldrb	r3, [r3, #5]
 800a8c8:	b2db      	uxtb	r3, r3
 800a8ca:	f083 0301 	eor.w	r3, r3, #1
 800a8ce:	b2db      	uxtb	r3, r3
 800a8d0:	4619      	mov	r1, r3
 800a8d2:	4610      	mov	r0, r2
 800a8d4:	f7fc f895 	bl	8006a02 <_ZN8touchgfx8Drawable10setVisibleEb>
	Disabled_Button2.invalidate();
 800a8d8:	687b      	ldr	r3, [r7, #4]
 800a8da:	f603 139c 	addw	r3, r3, #2460	@ 0x99c
 800a8de:	4618      	mov	r0, r3
 800a8e0:	f011 fe84 	bl	801c5ec <_ZNK8touchgfx8Drawable10invalidateEv>
}
 800a8e4:	bf00      	nop
 800a8e6:	3708      	adds	r7, #8
 800a8e8:	46bd      	mov	sp, r7
 800a8ea:	bd80      	pop	{r7, pc}
 800a8ec:	2400000c 	.word	0x2400000c

0800a8f0 <_ZN8MainView18alert_mute_pressedEv>:

void MainView::alert_mute_pressed() {
 800a8f0:	b580      	push	{r7, lr}
 800a8f2:	b082      	sub	sp, #8
 800a8f4:	af00      	add	r7, sp, #0
 800a8f6:	6078      	str	r0, [r7, #4]
  // toggle IPC mute, doesnt matter if alarm is not active, output audio sets it active on new event
  IPCSetAlarmMuteState( (boolean_t)!IPCGetAlarmMuteState( ) );
 800a8f8:	f7f5 fd6e 	bl	80003d8 <IPCGetAlarmMuteState>
 800a8fc:	4603      	mov	r3, r0
 800a8fe:	2b00      	cmp	r3, #0
 800a900:	bf0c      	ite	eq
 800a902:	2301      	moveq	r3, #1
 800a904:	2300      	movne	r3, #0
 800a906:	b2db      	uxtb	r3, r3
 800a908:	4618      	mov	r0, r3
 800a90a:	f7f5 fd71 	bl	80003f0 <IPCSetAlarmMuteState>

	if(state.alert) {
 800a90e:	4b16      	ldr	r3, [pc, #88]	@ (800a968 <_ZN8MainView18alert_mute_pressedEv+0x78>)
 800a910:	799b      	ldrb	r3, [r3, #6]
 800a912:	2b00      	cmp	r3, #0
 800a914:	d023      	beq.n	800a95e <_ZN8MainView18alert_mute_pressedEv+0x6e>
		state.alert = false;
 800a916:	4b14      	ldr	r3, [pc, #80]	@ (800a968 <_ZN8MainView18alert_mute_pressedEv+0x78>)
 800a918:	2200      	movs	r2, #0
 800a91a:	719a      	strb	r2, [r3, #6]

		MessageBoard_Message_1.setVisible(state.alert);
 800a91c:	687b      	ldr	r3, [r7, #4]
 800a91e:	f603 0388 	addw	r3, r3, #2184	@ 0x888
 800a922:	4a11      	ldr	r2, [pc, #68]	@ (800a968 <_ZN8MainView18alert_mute_pressedEv+0x78>)
 800a924:	7992      	ldrb	r2, [r2, #6]
 800a926:	4611      	mov	r1, r2
 800a928:	4618      	mov	r0, r3
 800a92a:	f7fc f86a 	bl	8006a02 <_ZN8touchgfx8Drawable10setVisibleEb>
		MessageBoard_Message_1.invalidate();
 800a92e:	687b      	ldr	r3, [r7, #4]
 800a930:	f603 0388 	addw	r3, r3, #2184	@ 0x888
 800a934:	4618      	mov	r0, r3
 800a936:	f011 fe59 	bl	801c5ec <_ZNK8touchgfx8Drawable10invalidateEv>
		MessageBoard_Message_Muted.setVisible(!state.alert);
 800a93a:	687b      	ldr	r3, [r7, #4]
 800a93c:	f603 02c4 	addw	r2, r3, #2244	@ 0x8c4
 800a940:	4b09      	ldr	r3, [pc, #36]	@ (800a968 <_ZN8MainView18alert_mute_pressedEv+0x78>)
 800a942:	799b      	ldrb	r3, [r3, #6]
 800a944:	f083 0301 	eor.w	r3, r3, #1
 800a948:	b2db      	uxtb	r3, r3
 800a94a:	4619      	mov	r1, r3
 800a94c:	4610      	mov	r0, r2
 800a94e:	f7fc f858 	bl	8006a02 <_ZN8touchgfx8Drawable10setVisibleEb>
		MessageBoard_Message_Muted.invalidate();
 800a952:	687b      	ldr	r3, [r7, #4]
 800a954:	f603 03c4 	addw	r3, r3, #2244	@ 0x8c4
 800a958:	4618      	mov	r0, r3
 800a95a:	f011 fe47 	bl	801c5ec <_ZNK8touchgfx8Drawable10invalidateEv>
	}
}
 800a95e:	bf00      	nop
 800a960:	3708      	adds	r7, #8
 800a962:	46bd      	mov	sp, r7
 800a964:	bd80      	pop	{r7, pc}
 800a966:	bf00      	nop
 800a968:	2400000c 	.word	0x2400000c

0800a96c <_ZN5ModelC1Ev>:
#include "ipc_interface.h"

//#include "main.h"
boolean_t led1 = TRUE;
extern int currentDelta;
Model::Model() : modelListener(0)
 800a96c:	b480      	push	{r7}
 800a96e:	b083      	sub	sp, #12
 800a970:	af00      	add	r7, sp, #0
 800a972:	6078      	str	r0, [r7, #4]
 800a974:	687b      	ldr	r3, [r7, #4]
 800a976:	2200      	movs	r2, #0
 800a978:	601a      	str	r2, [r3, #0]
{

}
 800a97a:	687b      	ldr	r3, [r7, #4]
 800a97c:	4618      	mov	r0, r3
 800a97e:	370c      	adds	r7, #12
 800a980:	46bd      	mov	sp, r7
 800a982:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a986:	4770      	bx	lr

0800a988 <_ZN5Model4tickEv>:
bool anomaly_detect_state_previous;
bool anomaly_detect_state_current = false;

uint16_t encoderCount = 0;
void Model::tick()
{
 800a988:	b580      	push	{r7, lr}
 800a98a:	b084      	sub	sp, #16
 800a98c:	af00      	add	r7, sp, #0
 800a98e:	6078      	str	r0, [r7, #4]
  // update anomaly detect state from IPC
  anomaly_detect_state_previous = anomaly_detect_state_current;
 800a990:	4b54      	ldr	r3, [pc, #336]	@ (800aae4 <_ZN5Model4tickEv+0x15c>)
 800a992:	781a      	ldrb	r2, [r3, #0]
 800a994:	4b54      	ldr	r3, [pc, #336]	@ (800aae8 <_ZN5Model4tickEv+0x160>)
 800a996:	701a      	strb	r2, [r3, #0]
  // a direct cast to bool doesnt work here, need a conditional
  anomaly_detect_state_current = ((int)IPCGetAnomalyDetectState( ) != 0 ? true : false);
 800a998:	f7f5 fd12 	bl	80003c0 <IPCGetAnomalyDetectState>
 800a99c:	4603      	mov	r3, r0
 800a99e:	2b00      	cmp	r3, #0
 800a9a0:	bf14      	ite	ne
 800a9a2:	2301      	movne	r3, #1
 800a9a4:	2300      	moveq	r3, #0
 800a9a6:	b2da      	uxtb	r2, r3
 800a9a8:	4b4e      	ldr	r3, [pc, #312]	@ (800aae4 <_ZN5Model4tickEv+0x15c>)
 800a9aa:	701a      	strb	r2, [r3, #0]

  // only update GUI on change of state
  if ( anomaly_detect_state_current != anomaly_detect_state_previous )
 800a9ac:	4b4d      	ldr	r3, [pc, #308]	@ (800aae4 <_ZN5Model4tickEv+0x15c>)
 800a9ae:	781a      	ldrb	r2, [r3, #0]
 800a9b0:	4b4d      	ldr	r3, [pc, #308]	@ (800aae8 <_ZN5Model4tickEv+0x160>)
 800a9b2:	781b      	ldrb	r3, [r3, #0]
 800a9b4:	429a      	cmp	r2, r3
 800a9b6:	d009      	beq.n	800a9cc <_ZN5Model4tickEv+0x44>
  {
    static_cast<FrontendApplication*>(Application::getInstance())->handleKeyEvent(87);
 800a9b8:	f010 fe4e 	bl	801b658 <_ZN8touchgfx11Application11getInstanceEv>
 800a9bc:	4603      	mov	r3, r0
 800a9be:	461a      	mov	r2, r3
 800a9c0:	6813      	ldr	r3, [r2, #0]
 800a9c2:	330c      	adds	r3, #12
 800a9c4:	681b      	ldr	r3, [r3, #0]
 800a9c6:	2157      	movs	r1, #87	@ 0x57
 800a9c8:	4610      	mov	r0, r2
 800a9ca:	4798      	blx	r3
  // Actuate and toggle alarm LEDS
  // * Originally went for series LEDs with center tap by driving output, but they remain lit even without output active,
  //     so added another output to conditionally provide 3v3 to the series
  // TODO - Might as well use one output for each LED, instead of the current kind of fixed arrangement
  // TODO - This level of hardware access should NOT be here, but it's 2 days to FDR and I'm long out of patience
  if ( anomaly_detect_state_current )
 800a9cc:	4b45      	ldr	r3, [pc, #276]	@ (800aae4 <_ZN5Model4tickEv+0x15c>)
 800a9ce:	781b      	ldrb	r3, [r3, #0]
 800a9d0:	2b00      	cmp	r3, #0
 800a9d2:	d028      	beq.n	800aa26 <_ZN5Model4tickEv+0x9e>
  {
    // enable the driving output
    GPIOH->BSRR |= 1 << 15;
 800a9d4:	4b45      	ldr	r3, [pc, #276]	@ (800aaec <_ZN5Model4tickEv+0x164>)
 800a9d6:	699b      	ldr	r3, [r3, #24]
 800a9d8:	4a44      	ldr	r2, [pc, #272]	@ (800aaec <_ZN5Model4tickEv+0x164>)
 800a9da:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800a9de:	6193      	str	r3, [r2, #24]

    // half second on, half second off for each
    // wiring so that one or the other is on
    if ( HAL_GetTick( ) % 1000 < 500 )
 800a9e0:	f006 f98e 	bl	8010d00 <HAL_GetTick>
 800a9e4:	4602      	mov	r2, r0
 800a9e6:	4b42      	ldr	r3, [pc, #264]	@ (800aaf0 <_ZN5Model4tickEv+0x168>)
 800a9e8:	fba3 1302 	umull	r1, r3, r3, r2
 800a9ec:	099b      	lsrs	r3, r3, #6
 800a9ee:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 800a9f2:	fb01 f303 	mul.w	r3, r1, r3
 800a9f6:	1ad3      	subs	r3, r2, r3
 800a9f8:	f240 12f3 	movw	r2, #499	@ 0x1f3
 800a9fc:	4293      	cmp	r3, r2
 800a9fe:	bf94      	ite	ls
 800aa00:	2301      	movls	r3, #1
 800aa02:	2300      	movhi	r3, #0
 800aa04:	b2db      	uxtb	r3, r3
 800aa06:	2b00      	cmp	r3, #0
 800aa08:	d006      	beq.n	800aa18 <_ZN5Model4tickEv+0x90>
    {
      GPIOE->BSRR |= 1 << 3;
 800aa0a:	4b3a      	ldr	r3, [pc, #232]	@ (800aaf4 <_ZN5Model4tickEv+0x16c>)
 800aa0c:	699b      	ldr	r3, [r3, #24]
 800aa0e:	4a39      	ldr	r2, [pc, #228]	@ (800aaf4 <_ZN5Model4tickEv+0x16c>)
 800aa10:	f043 0308 	orr.w	r3, r3, #8
 800aa14:	6193      	str	r3, [r2, #24]
 800aa16:	e012      	b.n	800aa3e <_ZN5Model4tickEv+0xb6>
    }
    else
    {
      GPIOE->BSRR |= 1 << (3 + 16);
 800aa18:	4b36      	ldr	r3, [pc, #216]	@ (800aaf4 <_ZN5Model4tickEv+0x16c>)
 800aa1a:	699b      	ldr	r3, [r3, #24]
 800aa1c:	4a35      	ldr	r2, [pc, #212]	@ (800aaf4 <_ZN5Model4tickEv+0x16c>)
 800aa1e:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 800aa22:	6193      	str	r3, [r2, #24]
 800aa24:	e00b      	b.n	800aa3e <_ZN5Model4tickEv+0xb6>
    }
  }
  else
  {
    // disable outputs driving LEDs
    GPIOH->BSRR |= 1 << (15 + 16);
 800aa26:	4b31      	ldr	r3, [pc, #196]	@ (800aaec <_ZN5Model4tickEv+0x164>)
 800aa28:	699b      	ldr	r3, [r3, #24]
 800aa2a:	4a30      	ldr	r2, [pc, #192]	@ (800aaec <_ZN5Model4tickEv+0x164>)
 800aa2c:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 800aa30:	6193      	str	r3, [r2, #24]
    GPIOE->BSRR |= 1 << (3 + 16);
 800aa32:	4b30      	ldr	r3, [pc, #192]	@ (800aaf4 <_ZN5Model4tickEv+0x16c>)
 800aa34:	699b      	ldr	r3, [r3, #24]
 800aa36:	4a2f      	ldr	r2, [pc, #188]	@ (800aaf4 <_ZN5Model4tickEv+0x16c>)
 800aa38:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 800aa3c:	6193      	str	r3, [r2, #24]
  }

  // voice mute
	bool currentSWStatus = HAL_GPIO_ReadPin(GPIOG, GPIO_PIN_3);
 800aa3e:	2108      	movs	r1, #8
 800aa40:	482d      	ldr	r0, [pc, #180]	@ (800aaf8 <_ZN5Model4tickEv+0x170>)
 800aa42:	f007 f823 	bl	8011a8c <HAL_GPIO_ReadPin>
 800aa46:	4603      	mov	r3, r0
 800aa48:	2b00      	cmp	r3, #0
 800aa4a:	bf14      	ite	ne
 800aa4c:	2301      	movne	r3, #1
 800aa4e:	2300      	moveq	r3, #0
 800aa50:	73fb      	strb	r3, [r7, #15]
    if(currentSWStatus != swStatus){
 800aa52:	4b2a      	ldr	r3, [pc, #168]	@ (800aafc <_ZN5Model4tickEv+0x174>)
 800aa54:	781b      	ldrb	r3, [r3, #0]
 800aa56:	7bfa      	ldrb	r2, [r7, #15]
 800aa58:	429a      	cmp	r2, r3
 800aa5a:	d017      	beq.n	800aa8c <_ZN5Model4tickEv+0x104>
	   swStatus = currentSWStatus;
 800aa5c:	4a27      	ldr	r2, [pc, #156]	@ (800aafc <_ZN5Model4tickEv+0x174>)
 800aa5e:	7bfb      	ldrb	r3, [r7, #15]
 800aa60:	7013      	strb	r3, [r2, #0]
	   if(swFilter) {
 800aa62:	4b27      	ldr	r3, [pc, #156]	@ (800ab00 <_ZN5Model4tickEv+0x178>)
 800aa64:	781b      	ldrb	r3, [r3, #0]
 800aa66:	2b00      	cmp	r3, #0
 800aa68:	d009      	beq.n	800aa7e <_ZN5Model4tickEv+0xf6>
		   static_cast<FrontendApplication*>(Application::getInstance())->handleKeyEvent(89);
 800aa6a:	f010 fdf5 	bl	801b658 <_ZN8touchgfx11Application11getInstanceEv>
 800aa6e:	4603      	mov	r3, r0
 800aa70:	461a      	mov	r2, r3
 800aa72:	6813      	ldr	r3, [r2, #0]
 800aa74:	330c      	adds	r3, #12
 800aa76:	681b      	ldr	r3, [r3, #0]
 800aa78:	2159      	movs	r1, #89	@ 0x59
 800aa7a:	4610      	mov	r0, r2
 800aa7c:	4798      	blx	r3
	   }
	   swFilter = !swFilter;
 800aa7e:	4b20      	ldr	r3, [pc, #128]	@ (800ab00 <_ZN5Model4tickEv+0x178>)
 800aa80:	781b      	ldrb	r3, [r3, #0]
 800aa82:	f083 0301 	eor.w	r3, r3, #1
 800aa86:	b2da      	uxtb	r2, r3
 800aa88:	4b1d      	ldr	r3, [pc, #116]	@ (800ab00 <_ZN5Model4tickEv+0x178>)
 800aa8a:	701a      	strb	r2, [r3, #0]
	}

  // alarm mute button
	bool currentMuteStatus = HAL_GPIO_ReadPin(GPIOK, GPIO_PIN_1);
 800aa8c:	2102      	movs	r1, #2
 800aa8e:	481d      	ldr	r0, [pc, #116]	@ (800ab04 <_ZN5Model4tickEv+0x17c>)
 800aa90:	f006 fffc 	bl	8011a8c <HAL_GPIO_ReadPin>
 800aa94:	4603      	mov	r3, r0
 800aa96:	2b00      	cmp	r3, #0
 800aa98:	bf14      	ite	ne
 800aa9a:	2301      	movne	r3, #1
 800aa9c:	2300      	moveq	r3, #0
 800aa9e:	73bb      	strb	r3, [r7, #14]
    if(currentMuteStatus != muteStatus){
 800aaa0:	4b19      	ldr	r3, [pc, #100]	@ (800ab08 <_ZN5Model4tickEv+0x180>)
 800aaa2:	781b      	ldrb	r3, [r3, #0]
 800aaa4:	7bba      	ldrb	r2, [r7, #14]
 800aaa6:	429a      	cmp	r2, r3
 800aaa8:	d017      	beq.n	800aada <_ZN5Model4tickEv+0x152>
	   muteStatus = currentMuteStatus;
 800aaaa:	4a17      	ldr	r2, [pc, #92]	@ (800ab08 <_ZN5Model4tickEv+0x180>)
 800aaac:	7bbb      	ldrb	r3, [r7, #14]
 800aaae:	7013      	strb	r3, [r2, #0]
	   if(muteFilter) {
 800aab0:	4b16      	ldr	r3, [pc, #88]	@ (800ab0c <_ZN5Model4tickEv+0x184>)
 800aab2:	781b      	ldrb	r3, [r3, #0]
 800aab4:	2b00      	cmp	r3, #0
 800aab6:	d009      	beq.n	800aacc <_ZN5Model4tickEv+0x144>
		   static_cast<FrontendApplication*>(Application::getInstance())->handleKeyEvent(90);
 800aab8:	f010 fdce 	bl	801b658 <_ZN8touchgfx11Application11getInstanceEv>
 800aabc:	4603      	mov	r3, r0
 800aabe:	461a      	mov	r2, r3
 800aac0:	6813      	ldr	r3, [r2, #0]
 800aac2:	330c      	adds	r3, #12
 800aac4:	681b      	ldr	r3, [r3, #0]
 800aac6:	215a      	movs	r1, #90	@ 0x5a
 800aac8:	4610      	mov	r0, r2
 800aaca:	4798      	blx	r3
	   }
	   muteFilter = !muteFilter;
 800aacc:	4b0f      	ldr	r3, [pc, #60]	@ (800ab0c <_ZN5Model4tickEv+0x184>)
 800aace:	781b      	ldrb	r3, [r3, #0]
 800aad0:	f083 0301 	eor.w	r3, r3, #1
 800aad4:	b2da      	uxtb	r2, r3
 800aad6:	4b0d      	ldr	r3, [pc, #52]	@ (800ab0c <_ZN5Model4tickEv+0x184>)
 800aad8:	701a      	strb	r2, [r3, #0]
  //   encoderCount = TIM4->CNT;
  //   currentDelta = encoderDelta * 2;

  //   static_cast<FrontendApplication*>(Application::getInstance())->handleKeyEvent(88);
  // }
}
 800aada:	bf00      	nop
 800aadc:	3710      	adds	r7, #16
 800aade:	46bd      	mov	sp, r7
 800aae0:	bd80      	pop	{r7, pc}
 800aae2:	bf00      	nop
 800aae4:	24001e89 	.word	0x24001e89
 800aae8:	24001e88 	.word	0x24001e88
 800aaec:	58021c00 	.word	0x58021c00
 800aaf0:	10624dd3 	.word	0x10624dd3
 800aaf4:	58021000 	.word	0x58021000
 800aaf8:	58021800 	.word	0x58021800
 800aafc:	24001e84 	.word	0x24001e84
 800ab00:	24001e85 	.word	0x24001e85
 800ab04:	58022800 	.word	0x58022800
 800ab08:	24001e86 	.word	0x24001e86
 800ab0c:	24001e87 	.word	0x24001e87

0800ab10 <__NVIC_SetPriority>:
{
 800ab10:	b480      	push	{r7}
 800ab12:	b083      	sub	sp, #12
 800ab14:	af00      	add	r7, sp, #0
 800ab16:	4603      	mov	r3, r0
 800ab18:	6039      	str	r1, [r7, #0]
 800ab1a:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 800ab1c:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800ab20:	2b00      	cmp	r3, #0
 800ab22:	db0a      	blt.n	800ab3a <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800ab24:	683b      	ldr	r3, [r7, #0]
 800ab26:	b2da      	uxtb	r2, r3
 800ab28:	490c      	ldr	r1, [pc, #48]	@ (800ab5c <__NVIC_SetPriority+0x4c>)
 800ab2a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800ab2e:	0112      	lsls	r2, r2, #4
 800ab30:	b2d2      	uxtb	r2, r2
 800ab32:	440b      	add	r3, r1
 800ab34:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 800ab38:	e00a      	b.n	800ab50 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800ab3a:	683b      	ldr	r3, [r7, #0]
 800ab3c:	b2da      	uxtb	r2, r3
 800ab3e:	4908      	ldr	r1, [pc, #32]	@ (800ab60 <__NVIC_SetPriority+0x50>)
 800ab40:	88fb      	ldrh	r3, [r7, #6]
 800ab42:	f003 030f 	and.w	r3, r3, #15
 800ab46:	3b04      	subs	r3, #4
 800ab48:	0112      	lsls	r2, r2, #4
 800ab4a:	b2d2      	uxtb	r2, r2
 800ab4c:	440b      	add	r3, r1
 800ab4e:	761a      	strb	r2, [r3, #24]
}
 800ab50:	bf00      	nop
 800ab52:	370c      	adds	r7, #12
 800ab54:	46bd      	mov	sp, r7
 800ab56:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab5a:	4770      	bx	lr
 800ab5c:	e000e100 	.word	0xe000e100
 800ab60:	e000ed00 	.word	0xe000ed00

0800ab64 <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 800ab64:	b580      	push	{r7, lr}
 800ab66:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 800ab68:	4b05      	ldr	r3, [pc, #20]	@ (800ab80 <SysTick_Handler+0x1c>)
 800ab6a:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 800ab6c:	f002 ff0a 	bl	800d984 <xTaskGetSchedulerState>
 800ab70:	4603      	mov	r3, r0
 800ab72:	2b01      	cmp	r3, #1
 800ab74:	d001      	beq.n	800ab7a <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 800ab76:	f000 ffef 	bl	800bb58 <xPortSysTickHandler>
  }
}
 800ab7a:	bf00      	nop
 800ab7c:	bd80      	pop	{r7, pc}
 800ab7e:	bf00      	nop
 800ab80:	e000e010 	.word	0xe000e010

0800ab84 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 800ab84:	b580      	push	{r7, lr}
 800ab86:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 800ab88:	2100      	movs	r1, #0
 800ab8a:	f06f 0004 	mvn.w	r0, #4
 800ab8e:	f7ff ffbf 	bl	800ab10 <__NVIC_SetPriority>
#endif
}
 800ab92:	bf00      	nop
 800ab94:	bd80      	pop	{r7, pc}
	...

0800ab98 <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 800ab98:	b480      	push	{r7}
 800ab9a:	b083      	sub	sp, #12
 800ab9c:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800ab9e:	f3ef 8305 	mrs	r3, IPSR
 800aba2:	603b      	str	r3, [r7, #0]
  return(result);
 800aba4:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 800aba6:	2b00      	cmp	r3, #0
 800aba8:	d003      	beq.n	800abb2 <osKernelInitialize+0x1a>
    stat = osErrorISR;
 800abaa:	f06f 0305 	mvn.w	r3, #5
 800abae:	607b      	str	r3, [r7, #4]
 800abb0:	e00c      	b.n	800abcc <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 800abb2:	4b0a      	ldr	r3, [pc, #40]	@ (800abdc <osKernelInitialize+0x44>)
 800abb4:	681b      	ldr	r3, [r3, #0]
 800abb6:	2b00      	cmp	r3, #0
 800abb8:	d105      	bne.n	800abc6 <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 800abba:	4b08      	ldr	r3, [pc, #32]	@ (800abdc <osKernelInitialize+0x44>)
 800abbc:	2201      	movs	r2, #1
 800abbe:	601a      	str	r2, [r3, #0]
      stat = osOK;
 800abc0:	2300      	movs	r3, #0
 800abc2:	607b      	str	r3, [r7, #4]
 800abc4:	e002      	b.n	800abcc <osKernelInitialize+0x34>
    } else {
      stat = osError;
 800abc6:	f04f 33ff 	mov.w	r3, #4294967295
 800abca:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 800abcc:	687b      	ldr	r3, [r7, #4]
}
 800abce:	4618      	mov	r0, r3
 800abd0:	370c      	adds	r7, #12
 800abd2:	46bd      	mov	sp, r7
 800abd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800abd8:	4770      	bx	lr
 800abda:	bf00      	nop
 800abdc:	24001e8c 	.word	0x24001e8c

0800abe0 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 800abe0:	b580      	push	{r7, lr}
 800abe2:	b082      	sub	sp, #8
 800abe4:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800abe6:	f3ef 8305 	mrs	r3, IPSR
 800abea:	603b      	str	r3, [r7, #0]
  return(result);
 800abec:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 800abee:	2b00      	cmp	r3, #0
 800abf0:	d003      	beq.n	800abfa <osKernelStart+0x1a>
    stat = osErrorISR;
 800abf2:	f06f 0305 	mvn.w	r3, #5
 800abf6:	607b      	str	r3, [r7, #4]
 800abf8:	e010      	b.n	800ac1c <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 800abfa:	4b0b      	ldr	r3, [pc, #44]	@ (800ac28 <osKernelStart+0x48>)
 800abfc:	681b      	ldr	r3, [r3, #0]
 800abfe:	2b01      	cmp	r3, #1
 800ac00:	d109      	bne.n	800ac16 <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 800ac02:	f7ff ffbf 	bl	800ab84 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 800ac06:	4b08      	ldr	r3, [pc, #32]	@ (800ac28 <osKernelStart+0x48>)
 800ac08:	2202      	movs	r2, #2
 800ac0a:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 800ac0c:	f002 fa56 	bl	800d0bc <vTaskStartScheduler>
      stat = osOK;
 800ac10:	2300      	movs	r3, #0
 800ac12:	607b      	str	r3, [r7, #4]
 800ac14:	e002      	b.n	800ac1c <osKernelStart+0x3c>
    } else {
      stat = osError;
 800ac16:	f04f 33ff 	mov.w	r3, #4294967295
 800ac1a:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 800ac1c:	687b      	ldr	r3, [r7, #4]
}
 800ac1e:	4618      	mov	r0, r3
 800ac20:	3708      	adds	r7, #8
 800ac22:	46bd      	mov	sp, r7
 800ac24:	bd80      	pop	{r7, pc}
 800ac26:	bf00      	nop
 800ac28:	24001e8c 	.word	0x24001e8c

0800ac2c <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 800ac2c:	b580      	push	{r7, lr}
 800ac2e:	b08e      	sub	sp, #56	@ 0x38
 800ac30:	af04      	add	r7, sp, #16
 800ac32:	60f8      	str	r0, [r7, #12]
 800ac34:	60b9      	str	r1, [r7, #8]
 800ac36:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 800ac38:	2300      	movs	r3, #0
 800ac3a:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800ac3c:	f3ef 8305 	mrs	r3, IPSR
 800ac40:	617b      	str	r3, [r7, #20]
  return(result);
 800ac42:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 800ac44:	2b00      	cmp	r3, #0
 800ac46:	d17e      	bne.n	800ad46 <osThreadNew+0x11a>
 800ac48:	68fb      	ldr	r3, [r7, #12]
 800ac4a:	2b00      	cmp	r3, #0
 800ac4c:	d07b      	beq.n	800ad46 <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 800ac4e:	2380      	movs	r3, #128	@ 0x80
 800ac50:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 800ac52:	2318      	movs	r3, #24
 800ac54:	61fb      	str	r3, [r7, #28]

    name = NULL;
 800ac56:	2300      	movs	r3, #0
 800ac58:	627b      	str	r3, [r7, #36]	@ 0x24
    mem  = -1;
 800ac5a:	f04f 33ff 	mov.w	r3, #4294967295
 800ac5e:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 800ac60:	687b      	ldr	r3, [r7, #4]
 800ac62:	2b00      	cmp	r3, #0
 800ac64:	d045      	beq.n	800acf2 <osThreadNew+0xc6>
      if (attr->name != NULL) {
 800ac66:	687b      	ldr	r3, [r7, #4]
 800ac68:	681b      	ldr	r3, [r3, #0]
 800ac6a:	2b00      	cmp	r3, #0
 800ac6c:	d002      	beq.n	800ac74 <osThreadNew+0x48>
        name = attr->name;
 800ac6e:	687b      	ldr	r3, [r7, #4]
 800ac70:	681b      	ldr	r3, [r3, #0]
 800ac72:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (attr->priority != osPriorityNone) {
 800ac74:	687b      	ldr	r3, [r7, #4]
 800ac76:	699b      	ldr	r3, [r3, #24]
 800ac78:	2b00      	cmp	r3, #0
 800ac7a:	d002      	beq.n	800ac82 <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 800ac7c:	687b      	ldr	r3, [r7, #4]
 800ac7e:	699b      	ldr	r3, [r3, #24]
 800ac80:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 800ac82:	69fb      	ldr	r3, [r7, #28]
 800ac84:	2b00      	cmp	r3, #0
 800ac86:	d008      	beq.n	800ac9a <osThreadNew+0x6e>
 800ac88:	69fb      	ldr	r3, [r7, #28]
 800ac8a:	2b38      	cmp	r3, #56	@ 0x38
 800ac8c:	d805      	bhi.n	800ac9a <osThreadNew+0x6e>
 800ac8e:	687b      	ldr	r3, [r7, #4]
 800ac90:	685b      	ldr	r3, [r3, #4]
 800ac92:	f003 0301 	and.w	r3, r3, #1
 800ac96:	2b00      	cmp	r3, #0
 800ac98:	d001      	beq.n	800ac9e <osThreadNew+0x72>
        return (NULL);
 800ac9a:	2300      	movs	r3, #0
 800ac9c:	e054      	b.n	800ad48 <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 800ac9e:	687b      	ldr	r3, [r7, #4]
 800aca0:	695b      	ldr	r3, [r3, #20]
 800aca2:	2b00      	cmp	r3, #0
 800aca4:	d003      	beq.n	800acae <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 800aca6:	687b      	ldr	r3, [r7, #4]
 800aca8:	695b      	ldr	r3, [r3, #20]
 800acaa:	089b      	lsrs	r3, r3, #2
 800acac:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800acae:	687b      	ldr	r3, [r7, #4]
 800acb0:	689b      	ldr	r3, [r3, #8]
 800acb2:	2b00      	cmp	r3, #0
 800acb4:	d00e      	beq.n	800acd4 <osThreadNew+0xa8>
 800acb6:	687b      	ldr	r3, [r7, #4]
 800acb8:	68db      	ldr	r3, [r3, #12]
 800acba:	2ba7      	cmp	r3, #167	@ 0xa7
 800acbc:	d90a      	bls.n	800acd4 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800acbe:	687b      	ldr	r3, [r7, #4]
 800acc0:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800acc2:	2b00      	cmp	r3, #0
 800acc4:	d006      	beq.n	800acd4 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800acc6:	687b      	ldr	r3, [r7, #4]
 800acc8:	695b      	ldr	r3, [r3, #20]
 800acca:	2b00      	cmp	r3, #0
 800accc:	d002      	beq.n	800acd4 <osThreadNew+0xa8>
        mem = 1;
 800acce:	2301      	movs	r3, #1
 800acd0:	61bb      	str	r3, [r7, #24]
 800acd2:	e010      	b.n	800acf6 <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 800acd4:	687b      	ldr	r3, [r7, #4]
 800acd6:	689b      	ldr	r3, [r3, #8]
 800acd8:	2b00      	cmp	r3, #0
 800acda:	d10c      	bne.n	800acf6 <osThreadNew+0xca>
 800acdc:	687b      	ldr	r3, [r7, #4]
 800acde:	68db      	ldr	r3, [r3, #12]
 800ace0:	2b00      	cmp	r3, #0
 800ace2:	d108      	bne.n	800acf6 <osThreadNew+0xca>
 800ace4:	687b      	ldr	r3, [r7, #4]
 800ace6:	691b      	ldr	r3, [r3, #16]
 800ace8:	2b00      	cmp	r3, #0
 800acea:	d104      	bne.n	800acf6 <osThreadNew+0xca>
          mem = 0;
 800acec:	2300      	movs	r3, #0
 800acee:	61bb      	str	r3, [r7, #24]
 800acf0:	e001      	b.n	800acf6 <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 800acf2:	2300      	movs	r3, #0
 800acf4:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 800acf6:	69bb      	ldr	r3, [r7, #24]
 800acf8:	2b01      	cmp	r3, #1
 800acfa:	d110      	bne.n	800ad1e <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 800acfc:	687b      	ldr	r3, [r7, #4]
 800acfe:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 800ad00:	687a      	ldr	r2, [r7, #4]
 800ad02:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 800ad04:	9202      	str	r2, [sp, #8]
 800ad06:	9301      	str	r3, [sp, #4]
 800ad08:	69fb      	ldr	r3, [r7, #28]
 800ad0a:	9300      	str	r3, [sp, #0]
 800ad0c:	68bb      	ldr	r3, [r7, #8]
 800ad0e:	6a3a      	ldr	r2, [r7, #32]
 800ad10:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800ad12:	68f8      	ldr	r0, [r7, #12]
 800ad14:	f001 ffde 	bl	800ccd4 <xTaskCreateStatic>
 800ad18:	4603      	mov	r3, r0
 800ad1a:	613b      	str	r3, [r7, #16]
 800ad1c:	e013      	b.n	800ad46 <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 800ad1e:	69bb      	ldr	r3, [r7, #24]
 800ad20:	2b00      	cmp	r3, #0
 800ad22:	d110      	bne.n	800ad46 <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 800ad24:	6a3b      	ldr	r3, [r7, #32]
 800ad26:	b29a      	uxth	r2, r3
 800ad28:	f107 0310 	add.w	r3, r7, #16
 800ad2c:	9301      	str	r3, [sp, #4]
 800ad2e:	69fb      	ldr	r3, [r7, #28]
 800ad30:	9300      	str	r3, [sp, #0]
 800ad32:	68bb      	ldr	r3, [r7, #8]
 800ad34:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800ad36:	68f8      	ldr	r0, [r7, #12]
 800ad38:	f002 f82c 	bl	800cd94 <xTaskCreate>
 800ad3c:	4603      	mov	r3, r0
 800ad3e:	2b01      	cmp	r3, #1
 800ad40:	d001      	beq.n	800ad46 <osThreadNew+0x11a>
            hTask = NULL;
 800ad42:	2300      	movs	r3, #0
 800ad44:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 800ad46:	693b      	ldr	r3, [r7, #16]
}
 800ad48:	4618      	mov	r0, r3
 800ad4a:	3728      	adds	r7, #40	@ 0x28
 800ad4c:	46bd      	mov	sp, r7
 800ad4e:	bd80      	pop	{r7, pc}

0800ad50 <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 800ad50:	b580      	push	{r7, lr}
 800ad52:	b084      	sub	sp, #16
 800ad54:	af00      	add	r7, sp, #0
 800ad56:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800ad58:	f3ef 8305 	mrs	r3, IPSR
 800ad5c:	60bb      	str	r3, [r7, #8]
  return(result);
 800ad5e:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 800ad60:	2b00      	cmp	r3, #0
 800ad62:	d003      	beq.n	800ad6c <osDelay+0x1c>
    stat = osErrorISR;
 800ad64:	f06f 0305 	mvn.w	r3, #5
 800ad68:	60fb      	str	r3, [r7, #12]
 800ad6a:	e007      	b.n	800ad7c <osDelay+0x2c>
  }
  else {
    stat = osOK;
 800ad6c:	2300      	movs	r3, #0
 800ad6e:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 800ad70:	687b      	ldr	r3, [r7, #4]
 800ad72:	2b00      	cmp	r3, #0
 800ad74:	d002      	beq.n	800ad7c <osDelay+0x2c>
      vTaskDelay(ticks);
 800ad76:	6878      	ldr	r0, [r7, #4]
 800ad78:	f002 f96a 	bl	800d050 <vTaskDelay>
    }
  }

  return (stat);
 800ad7c:	68fb      	ldr	r3, [r7, #12]
}
 800ad7e:	4618      	mov	r0, r3
 800ad80:	3710      	adds	r7, #16
 800ad82:	46bd      	mov	sp, r7
 800ad84:	bd80      	pop	{r7, pc}

0800ad86 <osSemaphoreNew>:
}
#endif /* (configUSE_OS2_MUTEX == 1) */

/*---------------------------------------------------------------------------*/

osSemaphoreId_t osSemaphoreNew (uint32_t max_count, uint32_t initial_count, const osSemaphoreAttr_t *attr) {
 800ad86:	b580      	push	{r7, lr}
 800ad88:	b08a      	sub	sp, #40	@ 0x28
 800ad8a:	af02      	add	r7, sp, #8
 800ad8c:	60f8      	str	r0, [r7, #12]
 800ad8e:	60b9      	str	r1, [r7, #8]
 800ad90:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hSemaphore = NULL;
 800ad92:	2300      	movs	r3, #0
 800ad94:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800ad96:	f3ef 8305 	mrs	r3, IPSR
 800ad9a:	613b      	str	r3, [r7, #16]
  return(result);
 800ad9c:	693b      	ldr	r3, [r7, #16]

  if (!IS_IRQ() && (max_count > 0U) && (initial_count <= max_count)) {
 800ad9e:	2b00      	cmp	r3, #0
 800ada0:	d175      	bne.n	800ae8e <osSemaphoreNew+0x108>
 800ada2:	68fb      	ldr	r3, [r7, #12]
 800ada4:	2b00      	cmp	r3, #0
 800ada6:	d072      	beq.n	800ae8e <osSemaphoreNew+0x108>
 800ada8:	68ba      	ldr	r2, [r7, #8]
 800adaa:	68fb      	ldr	r3, [r7, #12]
 800adac:	429a      	cmp	r2, r3
 800adae:	d86e      	bhi.n	800ae8e <osSemaphoreNew+0x108>
    mem = -1;
 800adb0:	f04f 33ff 	mov.w	r3, #4294967295
 800adb4:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 800adb6:	687b      	ldr	r3, [r7, #4]
 800adb8:	2b00      	cmp	r3, #0
 800adba:	d015      	beq.n	800ade8 <osSemaphoreNew+0x62>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticSemaphore_t))) {
 800adbc:	687b      	ldr	r3, [r7, #4]
 800adbe:	689b      	ldr	r3, [r3, #8]
 800adc0:	2b00      	cmp	r3, #0
 800adc2:	d006      	beq.n	800add2 <osSemaphoreNew+0x4c>
 800adc4:	687b      	ldr	r3, [r7, #4]
 800adc6:	68db      	ldr	r3, [r3, #12]
 800adc8:	2b4f      	cmp	r3, #79	@ 0x4f
 800adca:	d902      	bls.n	800add2 <osSemaphoreNew+0x4c>
        mem = 1;
 800adcc:	2301      	movs	r3, #1
 800adce:	61bb      	str	r3, [r7, #24]
 800add0:	e00c      	b.n	800adec <osSemaphoreNew+0x66>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 800add2:	687b      	ldr	r3, [r7, #4]
 800add4:	689b      	ldr	r3, [r3, #8]
 800add6:	2b00      	cmp	r3, #0
 800add8:	d108      	bne.n	800adec <osSemaphoreNew+0x66>
 800adda:	687b      	ldr	r3, [r7, #4]
 800addc:	68db      	ldr	r3, [r3, #12]
 800adde:	2b00      	cmp	r3, #0
 800ade0:	d104      	bne.n	800adec <osSemaphoreNew+0x66>
          mem = 0;
 800ade2:	2300      	movs	r3, #0
 800ade4:	61bb      	str	r3, [r7, #24]
 800ade6:	e001      	b.n	800adec <osSemaphoreNew+0x66>
        }
      }
    }
    else {
      mem = 0;
 800ade8:	2300      	movs	r3, #0
 800adea:	61bb      	str	r3, [r7, #24]
    }

    if (mem != -1) {
 800adec:	69bb      	ldr	r3, [r7, #24]
 800adee:	f1b3 3fff 	cmp.w	r3, #4294967295
 800adf2:	d04c      	beq.n	800ae8e <osSemaphoreNew+0x108>
      if (max_count == 1U) {
 800adf4:	68fb      	ldr	r3, [r7, #12]
 800adf6:	2b01      	cmp	r3, #1
 800adf8:	d128      	bne.n	800ae4c <osSemaphoreNew+0xc6>
        if (mem == 1) {
 800adfa:	69bb      	ldr	r3, [r7, #24]
 800adfc:	2b01      	cmp	r3, #1
 800adfe:	d10a      	bne.n	800ae16 <osSemaphoreNew+0x90>
          #if (configSUPPORT_STATIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateBinaryStatic ((StaticSemaphore_t *)attr->cb_mem);
 800ae00:	687b      	ldr	r3, [r7, #4]
 800ae02:	689b      	ldr	r3, [r3, #8]
 800ae04:	2203      	movs	r2, #3
 800ae06:	9200      	str	r2, [sp, #0]
 800ae08:	2200      	movs	r2, #0
 800ae0a:	2100      	movs	r1, #0
 800ae0c:	2001      	movs	r0, #1
 800ae0e:	f000 ff9f 	bl	800bd50 <xQueueGenericCreateStatic>
 800ae12:	61f8      	str	r0, [r7, #28]
 800ae14:	e005      	b.n	800ae22 <osSemaphoreNew+0x9c>
          #endif
        }
        else {
          #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateBinary();
 800ae16:	2203      	movs	r2, #3
 800ae18:	2100      	movs	r1, #0
 800ae1a:	2001      	movs	r0, #1
 800ae1c:	f001 f815 	bl	800be4a <xQueueGenericCreate>
 800ae20:	61f8      	str	r0, [r7, #28]
          #endif
        }

        if ((hSemaphore != NULL) && (initial_count != 0U)) {
 800ae22:	69fb      	ldr	r3, [r7, #28]
 800ae24:	2b00      	cmp	r3, #0
 800ae26:	d022      	beq.n	800ae6e <osSemaphoreNew+0xe8>
 800ae28:	68bb      	ldr	r3, [r7, #8]
 800ae2a:	2b00      	cmp	r3, #0
 800ae2c:	d01f      	beq.n	800ae6e <osSemaphoreNew+0xe8>
          if (xSemaphoreGive (hSemaphore) != pdPASS) {
 800ae2e:	2300      	movs	r3, #0
 800ae30:	2200      	movs	r2, #0
 800ae32:	2100      	movs	r1, #0
 800ae34:	69f8      	ldr	r0, [r7, #28]
 800ae36:	f001 f8d5 	bl	800bfe4 <xQueueGenericSend>
 800ae3a:	4603      	mov	r3, r0
 800ae3c:	2b01      	cmp	r3, #1
 800ae3e:	d016      	beq.n	800ae6e <osSemaphoreNew+0xe8>
            vSemaphoreDelete (hSemaphore);
 800ae40:	69f8      	ldr	r0, [r7, #28]
 800ae42:	f001 fd73 	bl	800c92c <vQueueDelete>
            hSemaphore = NULL;
 800ae46:	2300      	movs	r3, #0
 800ae48:	61fb      	str	r3, [r7, #28]
 800ae4a:	e010      	b.n	800ae6e <osSemaphoreNew+0xe8>
          }
        }
      }
      else {
        if (mem == 1) {
 800ae4c:	69bb      	ldr	r3, [r7, #24]
 800ae4e:	2b01      	cmp	r3, #1
 800ae50:	d108      	bne.n	800ae64 <osSemaphoreNew+0xde>
          #if (configSUPPORT_STATIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateCountingStatic (max_count, initial_count, (StaticSemaphore_t *)attr->cb_mem);
 800ae52:	687b      	ldr	r3, [r7, #4]
 800ae54:	689b      	ldr	r3, [r3, #8]
 800ae56:	461a      	mov	r2, r3
 800ae58:	68b9      	ldr	r1, [r7, #8]
 800ae5a:	68f8      	ldr	r0, [r7, #12]
 800ae5c:	f001 f853 	bl	800bf06 <xQueueCreateCountingSemaphoreStatic>
 800ae60:	61f8      	str	r0, [r7, #28]
 800ae62:	e004      	b.n	800ae6e <osSemaphoreNew+0xe8>
          #endif
        }
        else {
          #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateCounting (max_count, initial_count);
 800ae64:	68b9      	ldr	r1, [r7, #8]
 800ae66:	68f8      	ldr	r0, [r7, #12]
 800ae68:	f001 f886 	bl	800bf78 <xQueueCreateCountingSemaphore>
 800ae6c:	61f8      	str	r0, [r7, #28]
          #endif
        }
      }
      
      #if (configQUEUE_REGISTRY_SIZE > 0)
      if (hSemaphore != NULL) {
 800ae6e:	69fb      	ldr	r3, [r7, #28]
 800ae70:	2b00      	cmp	r3, #0
 800ae72:	d00c      	beq.n	800ae8e <osSemaphoreNew+0x108>
        if (attr != NULL) {
 800ae74:	687b      	ldr	r3, [r7, #4]
 800ae76:	2b00      	cmp	r3, #0
 800ae78:	d003      	beq.n	800ae82 <osSemaphoreNew+0xfc>
          name = attr->name;
 800ae7a:	687b      	ldr	r3, [r7, #4]
 800ae7c:	681b      	ldr	r3, [r3, #0]
 800ae7e:	617b      	str	r3, [r7, #20]
 800ae80:	e001      	b.n	800ae86 <osSemaphoreNew+0x100>
        } else {
          name = NULL;
 800ae82:	2300      	movs	r3, #0
 800ae84:	617b      	str	r3, [r7, #20]
        }
        vQueueAddToRegistry (hSemaphore, name);
 800ae86:	6979      	ldr	r1, [r7, #20]
 800ae88:	69f8      	ldr	r0, [r7, #28]
 800ae8a:	f001 fe9b 	bl	800cbc4 <vQueueAddToRegistry>
      }
      #endif
    }
  }

  return ((osSemaphoreId_t)hSemaphore);
 800ae8e:	69fb      	ldr	r3, [r7, #28]
}
 800ae90:	4618      	mov	r0, r3
 800ae92:	3720      	adds	r7, #32
 800ae94:	46bd      	mov	sp, r7
 800ae96:	bd80      	pop	{r7, pc}

0800ae98 <osSemaphoreAcquire>:

osStatus_t osSemaphoreAcquire (osSemaphoreId_t semaphore_id, uint32_t timeout) {
 800ae98:	b580      	push	{r7, lr}
 800ae9a:	b086      	sub	sp, #24
 800ae9c:	af00      	add	r7, sp, #0
 800ae9e:	6078      	str	r0, [r7, #4]
 800aea0:	6039      	str	r1, [r7, #0]
  SemaphoreHandle_t hSemaphore = (SemaphoreHandle_t)semaphore_id;
 800aea2:	687b      	ldr	r3, [r7, #4]
 800aea4:	613b      	str	r3, [r7, #16]
  osStatus_t stat;
  BaseType_t yield;

  stat = osOK;
 800aea6:	2300      	movs	r3, #0
 800aea8:	617b      	str	r3, [r7, #20]

  if (hSemaphore == NULL) {
 800aeaa:	693b      	ldr	r3, [r7, #16]
 800aeac:	2b00      	cmp	r3, #0
 800aeae:	d103      	bne.n	800aeb8 <osSemaphoreAcquire+0x20>
    stat = osErrorParameter;
 800aeb0:	f06f 0303 	mvn.w	r3, #3
 800aeb4:	617b      	str	r3, [r7, #20]
 800aeb6:	e039      	b.n	800af2c <osSemaphoreAcquire+0x94>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800aeb8:	f3ef 8305 	mrs	r3, IPSR
 800aebc:	60fb      	str	r3, [r7, #12]
  return(result);
 800aebe:	68fb      	ldr	r3, [r7, #12]
  }
  else if (IS_IRQ()) {
 800aec0:	2b00      	cmp	r3, #0
 800aec2:	d022      	beq.n	800af0a <osSemaphoreAcquire+0x72>
    if (timeout != 0U) {
 800aec4:	683b      	ldr	r3, [r7, #0]
 800aec6:	2b00      	cmp	r3, #0
 800aec8:	d003      	beq.n	800aed2 <osSemaphoreAcquire+0x3a>
      stat = osErrorParameter;
 800aeca:	f06f 0303 	mvn.w	r3, #3
 800aece:	617b      	str	r3, [r7, #20]
 800aed0:	e02c      	b.n	800af2c <osSemaphoreAcquire+0x94>
    }
    else {
      yield = pdFALSE;
 800aed2:	2300      	movs	r3, #0
 800aed4:	60bb      	str	r3, [r7, #8]

      if (xSemaphoreTakeFromISR (hSemaphore, &yield) != pdPASS) {
 800aed6:	f107 0308 	add.w	r3, r7, #8
 800aeda:	461a      	mov	r2, r3
 800aedc:	2100      	movs	r1, #0
 800aede:	6938      	ldr	r0, [r7, #16]
 800aee0:	f001 fca2 	bl	800c828 <xQueueReceiveFromISR>
 800aee4:	4603      	mov	r3, r0
 800aee6:	2b01      	cmp	r3, #1
 800aee8:	d003      	beq.n	800aef2 <osSemaphoreAcquire+0x5a>
        stat = osErrorResource;
 800aeea:	f06f 0302 	mvn.w	r3, #2
 800aeee:	617b      	str	r3, [r7, #20]
 800aef0:	e01c      	b.n	800af2c <osSemaphoreAcquire+0x94>
      } else {
        portYIELD_FROM_ISR (yield);
 800aef2:	68bb      	ldr	r3, [r7, #8]
 800aef4:	2b00      	cmp	r3, #0
 800aef6:	d019      	beq.n	800af2c <osSemaphoreAcquire+0x94>
 800aef8:	4b0f      	ldr	r3, [pc, #60]	@ (800af38 <osSemaphoreAcquire+0xa0>)
 800aefa:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800aefe:	601a      	str	r2, [r3, #0]
 800af00:	f3bf 8f4f 	dsb	sy
 800af04:	f3bf 8f6f 	isb	sy
 800af08:	e010      	b.n	800af2c <osSemaphoreAcquire+0x94>
      }
    }
  }
  else {
    if (xSemaphoreTake (hSemaphore, (TickType_t)timeout) != pdPASS) {
 800af0a:	6839      	ldr	r1, [r7, #0]
 800af0c:	6938      	ldr	r0, [r7, #16]
 800af0e:	f001 fb7b 	bl	800c608 <xQueueSemaphoreTake>
 800af12:	4603      	mov	r3, r0
 800af14:	2b01      	cmp	r3, #1
 800af16:	d009      	beq.n	800af2c <osSemaphoreAcquire+0x94>
      if (timeout != 0U) {
 800af18:	683b      	ldr	r3, [r7, #0]
 800af1a:	2b00      	cmp	r3, #0
 800af1c:	d003      	beq.n	800af26 <osSemaphoreAcquire+0x8e>
        stat = osErrorTimeout;
 800af1e:	f06f 0301 	mvn.w	r3, #1
 800af22:	617b      	str	r3, [r7, #20]
 800af24:	e002      	b.n	800af2c <osSemaphoreAcquire+0x94>
      } else {
        stat = osErrorResource;
 800af26:	f06f 0302 	mvn.w	r3, #2
 800af2a:	617b      	str	r3, [r7, #20]
      }
    }
  }

  return (stat);
 800af2c:	697b      	ldr	r3, [r7, #20]
}
 800af2e:	4618      	mov	r0, r3
 800af30:	3718      	adds	r7, #24
 800af32:	46bd      	mov	sp, r7
 800af34:	bd80      	pop	{r7, pc}
 800af36:	bf00      	nop
 800af38:	e000ed04 	.word	0xe000ed04

0800af3c <osSemaphoreRelease>:

osStatus_t osSemaphoreRelease (osSemaphoreId_t semaphore_id) {
 800af3c:	b580      	push	{r7, lr}
 800af3e:	b086      	sub	sp, #24
 800af40:	af00      	add	r7, sp, #0
 800af42:	6078      	str	r0, [r7, #4]
  SemaphoreHandle_t hSemaphore = (SemaphoreHandle_t)semaphore_id;
 800af44:	687b      	ldr	r3, [r7, #4]
 800af46:	613b      	str	r3, [r7, #16]
  osStatus_t stat;
  BaseType_t yield;

  stat = osOK;
 800af48:	2300      	movs	r3, #0
 800af4a:	617b      	str	r3, [r7, #20]

  if (hSemaphore == NULL) {
 800af4c:	693b      	ldr	r3, [r7, #16]
 800af4e:	2b00      	cmp	r3, #0
 800af50:	d103      	bne.n	800af5a <osSemaphoreRelease+0x1e>
    stat = osErrorParameter;
 800af52:	f06f 0303 	mvn.w	r3, #3
 800af56:	617b      	str	r3, [r7, #20]
 800af58:	e02c      	b.n	800afb4 <osSemaphoreRelease+0x78>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800af5a:	f3ef 8305 	mrs	r3, IPSR
 800af5e:	60fb      	str	r3, [r7, #12]
  return(result);
 800af60:	68fb      	ldr	r3, [r7, #12]
  }
  else if (IS_IRQ()) {
 800af62:	2b00      	cmp	r3, #0
 800af64:	d01a      	beq.n	800af9c <osSemaphoreRelease+0x60>
    yield = pdFALSE;
 800af66:	2300      	movs	r3, #0
 800af68:	60bb      	str	r3, [r7, #8]

    if (xSemaphoreGiveFromISR (hSemaphore, &yield) != pdTRUE) {
 800af6a:	f107 0308 	add.w	r3, r7, #8
 800af6e:	4619      	mov	r1, r3
 800af70:	6938      	ldr	r0, [r7, #16]
 800af72:	f001 f9d7 	bl	800c324 <xQueueGiveFromISR>
 800af76:	4603      	mov	r3, r0
 800af78:	2b01      	cmp	r3, #1
 800af7a:	d003      	beq.n	800af84 <osSemaphoreRelease+0x48>
      stat = osErrorResource;
 800af7c:	f06f 0302 	mvn.w	r3, #2
 800af80:	617b      	str	r3, [r7, #20]
 800af82:	e017      	b.n	800afb4 <osSemaphoreRelease+0x78>
    } else {
      portYIELD_FROM_ISR (yield);
 800af84:	68bb      	ldr	r3, [r7, #8]
 800af86:	2b00      	cmp	r3, #0
 800af88:	d014      	beq.n	800afb4 <osSemaphoreRelease+0x78>
 800af8a:	4b0d      	ldr	r3, [pc, #52]	@ (800afc0 <osSemaphoreRelease+0x84>)
 800af8c:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800af90:	601a      	str	r2, [r3, #0]
 800af92:	f3bf 8f4f 	dsb	sy
 800af96:	f3bf 8f6f 	isb	sy
 800af9a:	e00b      	b.n	800afb4 <osSemaphoreRelease+0x78>
    }
  }
  else {
    if (xSemaphoreGive (hSemaphore) != pdPASS) {
 800af9c:	2300      	movs	r3, #0
 800af9e:	2200      	movs	r2, #0
 800afa0:	2100      	movs	r1, #0
 800afa2:	6938      	ldr	r0, [r7, #16]
 800afa4:	f001 f81e 	bl	800bfe4 <xQueueGenericSend>
 800afa8:	4603      	mov	r3, r0
 800afaa:	2b01      	cmp	r3, #1
 800afac:	d002      	beq.n	800afb4 <osSemaphoreRelease+0x78>
      stat = osErrorResource;
 800afae:	f06f 0302 	mvn.w	r3, #2
 800afb2:	617b      	str	r3, [r7, #20]
    }
  }

  return (stat);
 800afb4:	697b      	ldr	r3, [r7, #20]
}
 800afb6:	4618      	mov	r0, r3
 800afb8:	3718      	adds	r7, #24
 800afba:	46bd      	mov	sp, r7
 800afbc:	bd80      	pop	{r7, pc}
 800afbe:	bf00      	nop
 800afc0:	e000ed04 	.word	0xe000ed04

0800afc4 <osMessageQueueNew>:
  return (stat);
}

/*---------------------------------------------------------------------------*/

osMessageQueueId_t osMessageQueueNew (uint32_t msg_count, uint32_t msg_size, const osMessageQueueAttr_t *attr) {
 800afc4:	b580      	push	{r7, lr}
 800afc6:	b08a      	sub	sp, #40	@ 0x28
 800afc8:	af02      	add	r7, sp, #8
 800afca:	60f8      	str	r0, [r7, #12]
 800afcc:	60b9      	str	r1, [r7, #8]
 800afce:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hQueue = NULL;
 800afd0:	2300      	movs	r3, #0
 800afd2:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800afd4:	f3ef 8305 	mrs	r3, IPSR
 800afd8:	613b      	str	r3, [r7, #16]
  return(result);
 800afda:	693b      	ldr	r3, [r7, #16]

  if (!IS_IRQ() && (msg_count > 0U) && (msg_size > 0U)) {
 800afdc:	2b00      	cmp	r3, #0
 800afde:	d15f      	bne.n	800b0a0 <osMessageQueueNew+0xdc>
 800afe0:	68fb      	ldr	r3, [r7, #12]
 800afe2:	2b00      	cmp	r3, #0
 800afe4:	d05c      	beq.n	800b0a0 <osMessageQueueNew+0xdc>
 800afe6:	68bb      	ldr	r3, [r7, #8]
 800afe8:	2b00      	cmp	r3, #0
 800afea:	d059      	beq.n	800b0a0 <osMessageQueueNew+0xdc>
    mem = -1;
 800afec:	f04f 33ff 	mov.w	r3, #4294967295
 800aff0:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 800aff2:	687b      	ldr	r3, [r7, #4]
 800aff4:	2b00      	cmp	r3, #0
 800aff6:	d029      	beq.n	800b04c <osMessageQueueNew+0x88>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 800aff8:	687b      	ldr	r3, [r7, #4]
 800affa:	689b      	ldr	r3, [r3, #8]
 800affc:	2b00      	cmp	r3, #0
 800affe:	d012      	beq.n	800b026 <osMessageQueueNew+0x62>
 800b000:	687b      	ldr	r3, [r7, #4]
 800b002:	68db      	ldr	r3, [r3, #12]
 800b004:	2b4f      	cmp	r3, #79	@ 0x4f
 800b006:	d90e      	bls.n	800b026 <osMessageQueueNew+0x62>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 800b008:	687b      	ldr	r3, [r7, #4]
 800b00a:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 800b00c:	2b00      	cmp	r3, #0
 800b00e:	d00a      	beq.n	800b026 <osMessageQueueNew+0x62>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 800b010:	687b      	ldr	r3, [r7, #4]
 800b012:	695a      	ldr	r2, [r3, #20]
 800b014:	68fb      	ldr	r3, [r7, #12]
 800b016:	68b9      	ldr	r1, [r7, #8]
 800b018:	fb01 f303 	mul.w	r3, r1, r3
 800b01c:	429a      	cmp	r2, r3
 800b01e:	d302      	bcc.n	800b026 <osMessageQueueNew+0x62>
        mem = 1;
 800b020:	2301      	movs	r3, #1
 800b022:	61bb      	str	r3, [r7, #24]
 800b024:	e014      	b.n	800b050 <osMessageQueueNew+0x8c>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 800b026:	687b      	ldr	r3, [r7, #4]
 800b028:	689b      	ldr	r3, [r3, #8]
 800b02a:	2b00      	cmp	r3, #0
 800b02c:	d110      	bne.n	800b050 <osMessageQueueNew+0x8c>
 800b02e:	687b      	ldr	r3, [r7, #4]
 800b030:	68db      	ldr	r3, [r3, #12]
 800b032:	2b00      	cmp	r3, #0
 800b034:	d10c      	bne.n	800b050 <osMessageQueueNew+0x8c>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 800b036:	687b      	ldr	r3, [r7, #4]
 800b038:	691b      	ldr	r3, [r3, #16]
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 800b03a:	2b00      	cmp	r3, #0
 800b03c:	d108      	bne.n	800b050 <osMessageQueueNew+0x8c>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 800b03e:	687b      	ldr	r3, [r7, #4]
 800b040:	695b      	ldr	r3, [r3, #20]
 800b042:	2b00      	cmp	r3, #0
 800b044:	d104      	bne.n	800b050 <osMessageQueueNew+0x8c>
          mem = 0;
 800b046:	2300      	movs	r3, #0
 800b048:	61bb      	str	r3, [r7, #24]
 800b04a:	e001      	b.n	800b050 <osMessageQueueNew+0x8c>
        }
      }
    }
    else {
      mem = 0;
 800b04c:	2300      	movs	r3, #0
 800b04e:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 800b050:	69bb      	ldr	r3, [r7, #24]
 800b052:	2b01      	cmp	r3, #1
 800b054:	d10b      	bne.n	800b06e <osMessageQueueNew+0xaa>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hQueue = xQueueCreateStatic (msg_count, msg_size, attr->mq_mem, attr->cb_mem);
 800b056:	687b      	ldr	r3, [r7, #4]
 800b058:	691a      	ldr	r2, [r3, #16]
 800b05a:	687b      	ldr	r3, [r7, #4]
 800b05c:	689b      	ldr	r3, [r3, #8]
 800b05e:	2100      	movs	r1, #0
 800b060:	9100      	str	r1, [sp, #0]
 800b062:	68b9      	ldr	r1, [r7, #8]
 800b064:	68f8      	ldr	r0, [r7, #12]
 800b066:	f000 fe73 	bl	800bd50 <xQueueGenericCreateStatic>
 800b06a:	61f8      	str	r0, [r7, #28]
 800b06c:	e008      	b.n	800b080 <osMessageQueueNew+0xbc>
      #endif
    }
    else {
      if (mem == 0) {
 800b06e:	69bb      	ldr	r3, [r7, #24]
 800b070:	2b00      	cmp	r3, #0
 800b072:	d105      	bne.n	800b080 <osMessageQueueNew+0xbc>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          hQueue = xQueueCreate (msg_count, msg_size);
 800b074:	2200      	movs	r2, #0
 800b076:	68b9      	ldr	r1, [r7, #8]
 800b078:	68f8      	ldr	r0, [r7, #12]
 800b07a:	f000 fee6 	bl	800be4a <xQueueGenericCreate>
 800b07e:	61f8      	str	r0, [r7, #28]
        #endif
      }
    }

    #if (configQUEUE_REGISTRY_SIZE > 0)
    if (hQueue != NULL) {
 800b080:	69fb      	ldr	r3, [r7, #28]
 800b082:	2b00      	cmp	r3, #0
 800b084:	d00c      	beq.n	800b0a0 <osMessageQueueNew+0xdc>
      if (attr != NULL) {
 800b086:	687b      	ldr	r3, [r7, #4]
 800b088:	2b00      	cmp	r3, #0
 800b08a:	d003      	beq.n	800b094 <osMessageQueueNew+0xd0>
        name = attr->name;
 800b08c:	687b      	ldr	r3, [r7, #4]
 800b08e:	681b      	ldr	r3, [r3, #0]
 800b090:	617b      	str	r3, [r7, #20]
 800b092:	e001      	b.n	800b098 <osMessageQueueNew+0xd4>
      } else {
        name = NULL;
 800b094:	2300      	movs	r3, #0
 800b096:	617b      	str	r3, [r7, #20]
      }
      vQueueAddToRegistry (hQueue, name);
 800b098:	6979      	ldr	r1, [r7, #20]
 800b09a:	69f8      	ldr	r0, [r7, #28]
 800b09c:	f001 fd92 	bl	800cbc4 <vQueueAddToRegistry>
    }
    #endif

  }

  return ((osMessageQueueId_t)hQueue);
 800b0a0:	69fb      	ldr	r3, [r7, #28]
}
 800b0a2:	4618      	mov	r0, r3
 800b0a4:	3720      	adds	r7, #32
 800b0a6:	46bd      	mov	sp, r7
 800b0a8:	bd80      	pop	{r7, pc}
	...

0800b0ac <osMessageQueuePut>:

osStatus_t osMessageQueuePut (osMessageQueueId_t mq_id, const void *msg_ptr, uint8_t msg_prio, uint32_t timeout) {
 800b0ac:	b580      	push	{r7, lr}
 800b0ae:	b088      	sub	sp, #32
 800b0b0:	af00      	add	r7, sp, #0
 800b0b2:	60f8      	str	r0, [r7, #12]
 800b0b4:	60b9      	str	r1, [r7, #8]
 800b0b6:	603b      	str	r3, [r7, #0]
 800b0b8:	4613      	mov	r3, r2
 800b0ba:	71fb      	strb	r3, [r7, #7]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 800b0bc:	68fb      	ldr	r3, [r7, #12]
 800b0be:	61bb      	str	r3, [r7, #24]
  osStatus_t stat;
  BaseType_t yield;

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;
 800b0c0:	2300      	movs	r3, #0
 800b0c2:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800b0c4:	f3ef 8305 	mrs	r3, IPSR
 800b0c8:	617b      	str	r3, [r7, #20]
  return(result);
 800b0ca:	697b      	ldr	r3, [r7, #20]

  if (IS_IRQ()) {
 800b0cc:	2b00      	cmp	r3, #0
 800b0ce:	d028      	beq.n	800b122 <osMessageQueuePut+0x76>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 800b0d0:	69bb      	ldr	r3, [r7, #24]
 800b0d2:	2b00      	cmp	r3, #0
 800b0d4:	d005      	beq.n	800b0e2 <osMessageQueuePut+0x36>
 800b0d6:	68bb      	ldr	r3, [r7, #8]
 800b0d8:	2b00      	cmp	r3, #0
 800b0da:	d002      	beq.n	800b0e2 <osMessageQueuePut+0x36>
 800b0dc:	683b      	ldr	r3, [r7, #0]
 800b0de:	2b00      	cmp	r3, #0
 800b0e0:	d003      	beq.n	800b0ea <osMessageQueuePut+0x3e>
      stat = osErrorParameter;
 800b0e2:	f06f 0303 	mvn.w	r3, #3
 800b0e6:	61fb      	str	r3, [r7, #28]
 800b0e8:	e038      	b.n	800b15c <osMessageQueuePut+0xb0>
    }
    else {
      yield = pdFALSE;
 800b0ea:	2300      	movs	r3, #0
 800b0ec:	613b      	str	r3, [r7, #16]

      if (xQueueSendToBackFromISR (hQueue, msg_ptr, &yield) != pdTRUE) {
 800b0ee:	f107 0210 	add.w	r2, r7, #16
 800b0f2:	2300      	movs	r3, #0
 800b0f4:	68b9      	ldr	r1, [r7, #8]
 800b0f6:	69b8      	ldr	r0, [r7, #24]
 800b0f8:	f001 f876 	bl	800c1e8 <xQueueGenericSendFromISR>
 800b0fc:	4603      	mov	r3, r0
 800b0fe:	2b01      	cmp	r3, #1
 800b100:	d003      	beq.n	800b10a <osMessageQueuePut+0x5e>
        stat = osErrorResource;
 800b102:	f06f 0302 	mvn.w	r3, #2
 800b106:	61fb      	str	r3, [r7, #28]
 800b108:	e028      	b.n	800b15c <osMessageQueuePut+0xb0>
      } else {
        portYIELD_FROM_ISR (yield);
 800b10a:	693b      	ldr	r3, [r7, #16]
 800b10c:	2b00      	cmp	r3, #0
 800b10e:	d025      	beq.n	800b15c <osMessageQueuePut+0xb0>
 800b110:	4b15      	ldr	r3, [pc, #84]	@ (800b168 <osMessageQueuePut+0xbc>)
 800b112:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800b116:	601a      	str	r2, [r3, #0]
 800b118:	f3bf 8f4f 	dsb	sy
 800b11c:	f3bf 8f6f 	isb	sy
 800b120:	e01c      	b.n	800b15c <osMessageQueuePut+0xb0>
      }
    }
  }
  else {
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 800b122:	69bb      	ldr	r3, [r7, #24]
 800b124:	2b00      	cmp	r3, #0
 800b126:	d002      	beq.n	800b12e <osMessageQueuePut+0x82>
 800b128:	68bb      	ldr	r3, [r7, #8]
 800b12a:	2b00      	cmp	r3, #0
 800b12c:	d103      	bne.n	800b136 <osMessageQueuePut+0x8a>
      stat = osErrorParameter;
 800b12e:	f06f 0303 	mvn.w	r3, #3
 800b132:	61fb      	str	r3, [r7, #28]
 800b134:	e012      	b.n	800b15c <osMessageQueuePut+0xb0>
    }
    else {
      if (xQueueSendToBack (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 800b136:	2300      	movs	r3, #0
 800b138:	683a      	ldr	r2, [r7, #0]
 800b13a:	68b9      	ldr	r1, [r7, #8]
 800b13c:	69b8      	ldr	r0, [r7, #24]
 800b13e:	f000 ff51 	bl	800bfe4 <xQueueGenericSend>
 800b142:	4603      	mov	r3, r0
 800b144:	2b01      	cmp	r3, #1
 800b146:	d009      	beq.n	800b15c <osMessageQueuePut+0xb0>
        if (timeout != 0U) {
 800b148:	683b      	ldr	r3, [r7, #0]
 800b14a:	2b00      	cmp	r3, #0
 800b14c:	d003      	beq.n	800b156 <osMessageQueuePut+0xaa>
          stat = osErrorTimeout;
 800b14e:	f06f 0301 	mvn.w	r3, #1
 800b152:	61fb      	str	r3, [r7, #28]
 800b154:	e002      	b.n	800b15c <osMessageQueuePut+0xb0>
        } else {
          stat = osErrorResource;
 800b156:	f06f 0302 	mvn.w	r3, #2
 800b15a:	61fb      	str	r3, [r7, #28]
        }
      }
    }
  }

  return (stat);
 800b15c:	69fb      	ldr	r3, [r7, #28]
}
 800b15e:	4618      	mov	r0, r3
 800b160:	3720      	adds	r7, #32
 800b162:	46bd      	mov	sp, r7
 800b164:	bd80      	pop	{r7, pc}
 800b166:	bf00      	nop
 800b168:	e000ed04 	.word	0xe000ed04

0800b16c <osMessageQueueGet>:

osStatus_t osMessageQueueGet (osMessageQueueId_t mq_id, void *msg_ptr, uint8_t *msg_prio, uint32_t timeout) {
 800b16c:	b580      	push	{r7, lr}
 800b16e:	b088      	sub	sp, #32
 800b170:	af00      	add	r7, sp, #0
 800b172:	60f8      	str	r0, [r7, #12]
 800b174:	60b9      	str	r1, [r7, #8]
 800b176:	607a      	str	r2, [r7, #4]
 800b178:	603b      	str	r3, [r7, #0]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 800b17a:	68fb      	ldr	r3, [r7, #12]
 800b17c:	61bb      	str	r3, [r7, #24]
  osStatus_t stat;
  BaseType_t yield;

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;
 800b17e:	2300      	movs	r3, #0
 800b180:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800b182:	f3ef 8305 	mrs	r3, IPSR
 800b186:	617b      	str	r3, [r7, #20]
  return(result);
 800b188:	697b      	ldr	r3, [r7, #20]

  if (IS_IRQ()) {
 800b18a:	2b00      	cmp	r3, #0
 800b18c:	d028      	beq.n	800b1e0 <osMessageQueueGet+0x74>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 800b18e:	69bb      	ldr	r3, [r7, #24]
 800b190:	2b00      	cmp	r3, #0
 800b192:	d005      	beq.n	800b1a0 <osMessageQueueGet+0x34>
 800b194:	68bb      	ldr	r3, [r7, #8]
 800b196:	2b00      	cmp	r3, #0
 800b198:	d002      	beq.n	800b1a0 <osMessageQueueGet+0x34>
 800b19a:	683b      	ldr	r3, [r7, #0]
 800b19c:	2b00      	cmp	r3, #0
 800b19e:	d003      	beq.n	800b1a8 <osMessageQueueGet+0x3c>
      stat = osErrorParameter;
 800b1a0:	f06f 0303 	mvn.w	r3, #3
 800b1a4:	61fb      	str	r3, [r7, #28]
 800b1a6:	e037      	b.n	800b218 <osMessageQueueGet+0xac>
    }
    else {
      yield = pdFALSE;
 800b1a8:	2300      	movs	r3, #0
 800b1aa:	613b      	str	r3, [r7, #16]

      if (xQueueReceiveFromISR (hQueue, msg_ptr, &yield) != pdPASS) {
 800b1ac:	f107 0310 	add.w	r3, r7, #16
 800b1b0:	461a      	mov	r2, r3
 800b1b2:	68b9      	ldr	r1, [r7, #8]
 800b1b4:	69b8      	ldr	r0, [r7, #24]
 800b1b6:	f001 fb37 	bl	800c828 <xQueueReceiveFromISR>
 800b1ba:	4603      	mov	r3, r0
 800b1bc:	2b01      	cmp	r3, #1
 800b1be:	d003      	beq.n	800b1c8 <osMessageQueueGet+0x5c>
        stat = osErrorResource;
 800b1c0:	f06f 0302 	mvn.w	r3, #2
 800b1c4:	61fb      	str	r3, [r7, #28]
 800b1c6:	e027      	b.n	800b218 <osMessageQueueGet+0xac>
      } else {
        portYIELD_FROM_ISR (yield);
 800b1c8:	693b      	ldr	r3, [r7, #16]
 800b1ca:	2b00      	cmp	r3, #0
 800b1cc:	d024      	beq.n	800b218 <osMessageQueueGet+0xac>
 800b1ce:	4b15      	ldr	r3, [pc, #84]	@ (800b224 <osMessageQueueGet+0xb8>)
 800b1d0:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800b1d4:	601a      	str	r2, [r3, #0]
 800b1d6:	f3bf 8f4f 	dsb	sy
 800b1da:	f3bf 8f6f 	isb	sy
 800b1de:	e01b      	b.n	800b218 <osMessageQueueGet+0xac>
      }
    }
  }
  else {
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 800b1e0:	69bb      	ldr	r3, [r7, #24]
 800b1e2:	2b00      	cmp	r3, #0
 800b1e4:	d002      	beq.n	800b1ec <osMessageQueueGet+0x80>
 800b1e6:	68bb      	ldr	r3, [r7, #8]
 800b1e8:	2b00      	cmp	r3, #0
 800b1ea:	d103      	bne.n	800b1f4 <osMessageQueueGet+0x88>
      stat = osErrorParameter;
 800b1ec:	f06f 0303 	mvn.w	r3, #3
 800b1f0:	61fb      	str	r3, [r7, #28]
 800b1f2:	e011      	b.n	800b218 <osMessageQueueGet+0xac>
    }
    else {
      if (xQueueReceive (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 800b1f4:	683a      	ldr	r2, [r7, #0]
 800b1f6:	68b9      	ldr	r1, [r7, #8]
 800b1f8:	69b8      	ldr	r0, [r7, #24]
 800b1fa:	f001 f923 	bl	800c444 <xQueueReceive>
 800b1fe:	4603      	mov	r3, r0
 800b200:	2b01      	cmp	r3, #1
 800b202:	d009      	beq.n	800b218 <osMessageQueueGet+0xac>
        if (timeout != 0U) {
 800b204:	683b      	ldr	r3, [r7, #0]
 800b206:	2b00      	cmp	r3, #0
 800b208:	d003      	beq.n	800b212 <osMessageQueueGet+0xa6>
          stat = osErrorTimeout;
 800b20a:	f06f 0301 	mvn.w	r3, #1
 800b20e:	61fb      	str	r3, [r7, #28]
 800b210:	e002      	b.n	800b218 <osMessageQueueGet+0xac>
        } else {
          stat = osErrorResource;
 800b212:	f06f 0302 	mvn.w	r3, #2
 800b216:	61fb      	str	r3, [r7, #28]
        }
      }
    }
  }

  return (stat);
 800b218:	69fb      	ldr	r3, [r7, #28]
}
 800b21a:	4618      	mov	r0, r3
 800b21c:	3720      	adds	r7, #32
 800b21e:	46bd      	mov	sp, r7
 800b220:	bd80      	pop	{r7, pc}
 800b222:	bf00      	nop
 800b224:	e000ed04 	.word	0xe000ed04

0800b228 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 800b228:	b480      	push	{r7}
 800b22a:	b085      	sub	sp, #20
 800b22c:	af00      	add	r7, sp, #0
 800b22e:	60f8      	str	r0, [r7, #12]
 800b230:	60b9      	str	r1, [r7, #8]
 800b232:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 800b234:	68fb      	ldr	r3, [r7, #12]
 800b236:	4a07      	ldr	r2, [pc, #28]	@ (800b254 <vApplicationGetIdleTaskMemory+0x2c>)
 800b238:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 800b23a:	68bb      	ldr	r3, [r7, #8]
 800b23c:	4a06      	ldr	r2, [pc, #24]	@ (800b258 <vApplicationGetIdleTaskMemory+0x30>)
 800b23e:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 800b240:	687b      	ldr	r3, [r7, #4]
 800b242:	2280      	movs	r2, #128	@ 0x80
 800b244:	601a      	str	r2, [r3, #0]
}
 800b246:	bf00      	nop
 800b248:	3714      	adds	r7, #20
 800b24a:	46bd      	mov	sp, r7
 800b24c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b250:	4770      	bx	lr
 800b252:	bf00      	nop
 800b254:	24001e90 	.word	0x24001e90
 800b258:	24001f38 	.word	0x24001f38

0800b25c <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 800b25c:	b480      	push	{r7}
 800b25e:	b085      	sub	sp, #20
 800b260:	af00      	add	r7, sp, #0
 800b262:	60f8      	str	r0, [r7, #12]
 800b264:	60b9      	str	r1, [r7, #8]
 800b266:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 800b268:	68fb      	ldr	r3, [r7, #12]
 800b26a:	4a07      	ldr	r2, [pc, #28]	@ (800b288 <vApplicationGetTimerTaskMemory+0x2c>)
 800b26c:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 800b26e:	68bb      	ldr	r3, [r7, #8]
 800b270:	4a06      	ldr	r2, [pc, #24]	@ (800b28c <vApplicationGetTimerTaskMemory+0x30>)
 800b272:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 800b274:	687b      	ldr	r3, [r7, #4]
 800b276:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800b27a:	601a      	str	r2, [r3, #0]
}
 800b27c:	bf00      	nop
 800b27e:	3714      	adds	r7, #20
 800b280:	46bd      	mov	sp, r7
 800b282:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b286:	4770      	bx	lr
 800b288:	24002138 	.word	0x24002138
 800b28c:	240021e0 	.word	0x240021e0

0800b290 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800b290:	b580      	push	{r7, lr}
 800b292:	b08a      	sub	sp, #40	@ 0x28
 800b294:	af00      	add	r7, sp, #0
 800b296:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 800b298:	2300      	movs	r3, #0
 800b29a:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 800b29c:	f001 ff7e 	bl	800d19c <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800b2a0:	4b5c      	ldr	r3, [pc, #368]	@ (800b414 <pvPortMalloc+0x184>)
 800b2a2:	681b      	ldr	r3, [r3, #0]
 800b2a4:	2b00      	cmp	r3, #0
 800b2a6:	d101      	bne.n	800b2ac <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 800b2a8:	f000 f924 	bl	800b4f4 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800b2ac:	4b5a      	ldr	r3, [pc, #360]	@ (800b418 <pvPortMalloc+0x188>)
 800b2ae:	681a      	ldr	r2, [r3, #0]
 800b2b0:	687b      	ldr	r3, [r7, #4]
 800b2b2:	4013      	ands	r3, r2
 800b2b4:	2b00      	cmp	r3, #0
 800b2b6:	f040 8095 	bne.w	800b3e4 <pvPortMalloc+0x154>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800b2ba:	687b      	ldr	r3, [r7, #4]
 800b2bc:	2b00      	cmp	r3, #0
 800b2be:	d01e      	beq.n	800b2fe <pvPortMalloc+0x6e>
			{
				xWantedSize += xHeapStructSize;
 800b2c0:	2208      	movs	r2, #8
 800b2c2:	687b      	ldr	r3, [r7, #4]
 800b2c4:	4413      	add	r3, r2
 800b2c6:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800b2c8:	687b      	ldr	r3, [r7, #4]
 800b2ca:	f003 0307 	and.w	r3, r3, #7
 800b2ce:	2b00      	cmp	r3, #0
 800b2d0:	d015      	beq.n	800b2fe <pvPortMalloc+0x6e>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800b2d2:	687b      	ldr	r3, [r7, #4]
 800b2d4:	f023 0307 	bic.w	r3, r3, #7
 800b2d8:	3308      	adds	r3, #8
 800b2da:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 800b2dc:	687b      	ldr	r3, [r7, #4]
 800b2de:	f003 0307 	and.w	r3, r3, #7
 800b2e2:	2b00      	cmp	r3, #0
 800b2e4:	d00b      	beq.n	800b2fe <pvPortMalloc+0x6e>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 800b2e6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b2ea:	f383 8811 	msr	BASEPRI, r3
 800b2ee:	f3bf 8f6f 	isb	sy
 800b2f2:	f3bf 8f4f 	dsb	sy
 800b2f6:	617b      	str	r3, [r7, #20]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 800b2f8:	bf00      	nop
 800b2fa:	bf00      	nop
 800b2fc:	e7fd      	b.n	800b2fa <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800b2fe:	687b      	ldr	r3, [r7, #4]
 800b300:	2b00      	cmp	r3, #0
 800b302:	d06f      	beq.n	800b3e4 <pvPortMalloc+0x154>
 800b304:	4b45      	ldr	r3, [pc, #276]	@ (800b41c <pvPortMalloc+0x18c>)
 800b306:	681b      	ldr	r3, [r3, #0]
 800b308:	687a      	ldr	r2, [r7, #4]
 800b30a:	429a      	cmp	r2, r3
 800b30c:	d86a      	bhi.n	800b3e4 <pvPortMalloc+0x154>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800b30e:	4b44      	ldr	r3, [pc, #272]	@ (800b420 <pvPortMalloc+0x190>)
 800b310:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800b312:	4b43      	ldr	r3, [pc, #268]	@ (800b420 <pvPortMalloc+0x190>)
 800b314:	681b      	ldr	r3, [r3, #0]
 800b316:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800b318:	e004      	b.n	800b324 <pvPortMalloc+0x94>
				{
					pxPreviousBlock = pxBlock;
 800b31a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b31c:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800b31e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b320:	681b      	ldr	r3, [r3, #0]
 800b322:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800b324:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b326:	685b      	ldr	r3, [r3, #4]
 800b328:	687a      	ldr	r2, [r7, #4]
 800b32a:	429a      	cmp	r2, r3
 800b32c:	d903      	bls.n	800b336 <pvPortMalloc+0xa6>
 800b32e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b330:	681b      	ldr	r3, [r3, #0]
 800b332:	2b00      	cmp	r3, #0
 800b334:	d1f1      	bne.n	800b31a <pvPortMalloc+0x8a>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800b336:	4b37      	ldr	r3, [pc, #220]	@ (800b414 <pvPortMalloc+0x184>)
 800b338:	681b      	ldr	r3, [r3, #0]
 800b33a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800b33c:	429a      	cmp	r2, r3
 800b33e:	d051      	beq.n	800b3e4 <pvPortMalloc+0x154>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800b340:	6a3b      	ldr	r3, [r7, #32]
 800b342:	681b      	ldr	r3, [r3, #0]
 800b344:	2208      	movs	r2, #8
 800b346:	4413      	add	r3, r2
 800b348:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800b34a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b34c:	681a      	ldr	r2, [r3, #0]
 800b34e:	6a3b      	ldr	r3, [r7, #32]
 800b350:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800b352:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b354:	685a      	ldr	r2, [r3, #4]
 800b356:	687b      	ldr	r3, [r7, #4]
 800b358:	1ad2      	subs	r2, r2, r3
 800b35a:	2308      	movs	r3, #8
 800b35c:	005b      	lsls	r3, r3, #1
 800b35e:	429a      	cmp	r2, r3
 800b360:	d920      	bls.n	800b3a4 <pvPortMalloc+0x114>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800b362:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800b364:	687b      	ldr	r3, [r7, #4]
 800b366:	4413      	add	r3, r2
 800b368:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800b36a:	69bb      	ldr	r3, [r7, #24]
 800b36c:	f003 0307 	and.w	r3, r3, #7
 800b370:	2b00      	cmp	r3, #0
 800b372:	d00b      	beq.n	800b38c <pvPortMalloc+0xfc>
	__asm volatile
 800b374:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b378:	f383 8811 	msr	BASEPRI, r3
 800b37c:	f3bf 8f6f 	isb	sy
 800b380:	f3bf 8f4f 	dsb	sy
 800b384:	613b      	str	r3, [r7, #16]
}
 800b386:	bf00      	nop
 800b388:	bf00      	nop
 800b38a:	e7fd      	b.n	800b388 <pvPortMalloc+0xf8>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800b38c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b38e:	685a      	ldr	r2, [r3, #4]
 800b390:	687b      	ldr	r3, [r7, #4]
 800b392:	1ad2      	subs	r2, r2, r3
 800b394:	69bb      	ldr	r3, [r7, #24]
 800b396:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800b398:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b39a:	687a      	ldr	r2, [r7, #4]
 800b39c:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800b39e:	69b8      	ldr	r0, [r7, #24]
 800b3a0:	f000 f90a 	bl	800b5b8 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800b3a4:	4b1d      	ldr	r3, [pc, #116]	@ (800b41c <pvPortMalloc+0x18c>)
 800b3a6:	681a      	ldr	r2, [r3, #0]
 800b3a8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b3aa:	685b      	ldr	r3, [r3, #4]
 800b3ac:	1ad3      	subs	r3, r2, r3
 800b3ae:	4a1b      	ldr	r2, [pc, #108]	@ (800b41c <pvPortMalloc+0x18c>)
 800b3b0:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800b3b2:	4b1a      	ldr	r3, [pc, #104]	@ (800b41c <pvPortMalloc+0x18c>)
 800b3b4:	681a      	ldr	r2, [r3, #0]
 800b3b6:	4b1b      	ldr	r3, [pc, #108]	@ (800b424 <pvPortMalloc+0x194>)
 800b3b8:	681b      	ldr	r3, [r3, #0]
 800b3ba:	429a      	cmp	r2, r3
 800b3bc:	d203      	bcs.n	800b3c6 <pvPortMalloc+0x136>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800b3be:	4b17      	ldr	r3, [pc, #92]	@ (800b41c <pvPortMalloc+0x18c>)
 800b3c0:	681b      	ldr	r3, [r3, #0]
 800b3c2:	4a18      	ldr	r2, [pc, #96]	@ (800b424 <pvPortMalloc+0x194>)
 800b3c4:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800b3c6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b3c8:	685a      	ldr	r2, [r3, #4]
 800b3ca:	4b13      	ldr	r3, [pc, #76]	@ (800b418 <pvPortMalloc+0x188>)
 800b3cc:	681b      	ldr	r3, [r3, #0]
 800b3ce:	431a      	orrs	r2, r3
 800b3d0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b3d2:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800b3d4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b3d6:	2200      	movs	r2, #0
 800b3d8:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 800b3da:	4b13      	ldr	r3, [pc, #76]	@ (800b428 <pvPortMalloc+0x198>)
 800b3dc:	681b      	ldr	r3, [r3, #0]
 800b3de:	3301      	adds	r3, #1
 800b3e0:	4a11      	ldr	r2, [pc, #68]	@ (800b428 <pvPortMalloc+0x198>)
 800b3e2:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 800b3e4:	f001 fee8 	bl	800d1b8 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800b3e8:	69fb      	ldr	r3, [r7, #28]
 800b3ea:	f003 0307 	and.w	r3, r3, #7
 800b3ee:	2b00      	cmp	r3, #0
 800b3f0:	d00b      	beq.n	800b40a <pvPortMalloc+0x17a>
	__asm volatile
 800b3f2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b3f6:	f383 8811 	msr	BASEPRI, r3
 800b3fa:	f3bf 8f6f 	isb	sy
 800b3fe:	f3bf 8f4f 	dsb	sy
 800b402:	60fb      	str	r3, [r7, #12]
}
 800b404:	bf00      	nop
 800b406:	bf00      	nop
 800b408:	e7fd      	b.n	800b406 <pvPortMalloc+0x176>
	return pvReturn;
 800b40a:	69fb      	ldr	r3, [r7, #28]
}
 800b40c:	4618      	mov	r0, r3
 800b40e:	3728      	adds	r7, #40	@ 0x28
 800b410:	46bd      	mov	sp, r7
 800b412:	bd80      	pop	{r7, pc}
 800b414:	2400a5e8 	.word	0x2400a5e8
 800b418:	2400a5fc 	.word	0x2400a5fc
 800b41c:	2400a5ec 	.word	0x2400a5ec
 800b420:	2400a5e0 	.word	0x2400a5e0
 800b424:	2400a5f0 	.word	0x2400a5f0
 800b428:	2400a5f4 	.word	0x2400a5f4

0800b42c <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 800b42c:	b580      	push	{r7, lr}
 800b42e:	b086      	sub	sp, #24
 800b430:	af00      	add	r7, sp, #0
 800b432:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 800b434:	687b      	ldr	r3, [r7, #4]
 800b436:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800b438:	687b      	ldr	r3, [r7, #4]
 800b43a:	2b00      	cmp	r3, #0
 800b43c:	d04f      	beq.n	800b4de <vPortFree+0xb2>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800b43e:	2308      	movs	r3, #8
 800b440:	425b      	negs	r3, r3
 800b442:	697a      	ldr	r2, [r7, #20]
 800b444:	4413      	add	r3, r2
 800b446:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800b448:	697b      	ldr	r3, [r7, #20]
 800b44a:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800b44c:	693b      	ldr	r3, [r7, #16]
 800b44e:	685a      	ldr	r2, [r3, #4]
 800b450:	4b25      	ldr	r3, [pc, #148]	@ (800b4e8 <vPortFree+0xbc>)
 800b452:	681b      	ldr	r3, [r3, #0]
 800b454:	4013      	ands	r3, r2
 800b456:	2b00      	cmp	r3, #0
 800b458:	d10b      	bne.n	800b472 <vPortFree+0x46>
	__asm volatile
 800b45a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b45e:	f383 8811 	msr	BASEPRI, r3
 800b462:	f3bf 8f6f 	isb	sy
 800b466:	f3bf 8f4f 	dsb	sy
 800b46a:	60fb      	str	r3, [r7, #12]
}
 800b46c:	bf00      	nop
 800b46e:	bf00      	nop
 800b470:	e7fd      	b.n	800b46e <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800b472:	693b      	ldr	r3, [r7, #16]
 800b474:	681b      	ldr	r3, [r3, #0]
 800b476:	2b00      	cmp	r3, #0
 800b478:	d00b      	beq.n	800b492 <vPortFree+0x66>
	__asm volatile
 800b47a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b47e:	f383 8811 	msr	BASEPRI, r3
 800b482:	f3bf 8f6f 	isb	sy
 800b486:	f3bf 8f4f 	dsb	sy
 800b48a:	60bb      	str	r3, [r7, #8]
}
 800b48c:	bf00      	nop
 800b48e:	bf00      	nop
 800b490:	e7fd      	b.n	800b48e <vPortFree+0x62>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800b492:	693b      	ldr	r3, [r7, #16]
 800b494:	685a      	ldr	r2, [r3, #4]
 800b496:	4b14      	ldr	r3, [pc, #80]	@ (800b4e8 <vPortFree+0xbc>)
 800b498:	681b      	ldr	r3, [r3, #0]
 800b49a:	4013      	ands	r3, r2
 800b49c:	2b00      	cmp	r3, #0
 800b49e:	d01e      	beq.n	800b4de <vPortFree+0xb2>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 800b4a0:	693b      	ldr	r3, [r7, #16]
 800b4a2:	681b      	ldr	r3, [r3, #0]
 800b4a4:	2b00      	cmp	r3, #0
 800b4a6:	d11a      	bne.n	800b4de <vPortFree+0xb2>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800b4a8:	693b      	ldr	r3, [r7, #16]
 800b4aa:	685a      	ldr	r2, [r3, #4]
 800b4ac:	4b0e      	ldr	r3, [pc, #56]	@ (800b4e8 <vPortFree+0xbc>)
 800b4ae:	681b      	ldr	r3, [r3, #0]
 800b4b0:	43db      	mvns	r3, r3
 800b4b2:	401a      	ands	r2, r3
 800b4b4:	693b      	ldr	r3, [r7, #16]
 800b4b6:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 800b4b8:	f001 fe70 	bl	800d19c <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800b4bc:	693b      	ldr	r3, [r7, #16]
 800b4be:	685a      	ldr	r2, [r3, #4]
 800b4c0:	4b0a      	ldr	r3, [pc, #40]	@ (800b4ec <vPortFree+0xc0>)
 800b4c2:	681b      	ldr	r3, [r3, #0]
 800b4c4:	4413      	add	r3, r2
 800b4c6:	4a09      	ldr	r2, [pc, #36]	@ (800b4ec <vPortFree+0xc0>)
 800b4c8:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800b4ca:	6938      	ldr	r0, [r7, #16]
 800b4cc:	f000 f874 	bl	800b5b8 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 800b4d0:	4b07      	ldr	r3, [pc, #28]	@ (800b4f0 <vPortFree+0xc4>)
 800b4d2:	681b      	ldr	r3, [r3, #0]
 800b4d4:	3301      	adds	r3, #1
 800b4d6:	4a06      	ldr	r2, [pc, #24]	@ (800b4f0 <vPortFree+0xc4>)
 800b4d8:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 800b4da:	f001 fe6d 	bl	800d1b8 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800b4de:	bf00      	nop
 800b4e0:	3718      	adds	r7, #24
 800b4e2:	46bd      	mov	sp, r7
 800b4e4:	bd80      	pop	{r7, pc}
 800b4e6:	bf00      	nop
 800b4e8:	2400a5fc 	.word	0x2400a5fc
 800b4ec:	2400a5ec 	.word	0x2400a5ec
 800b4f0:	2400a5f8 	.word	0x2400a5f8

0800b4f4 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 800b4f4:	b480      	push	{r7}
 800b4f6:	b085      	sub	sp, #20
 800b4f8:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800b4fa:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800b4fe:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 800b500:	4b27      	ldr	r3, [pc, #156]	@ (800b5a0 <prvHeapInit+0xac>)
 800b502:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800b504:	68fb      	ldr	r3, [r7, #12]
 800b506:	f003 0307 	and.w	r3, r3, #7
 800b50a:	2b00      	cmp	r3, #0
 800b50c:	d00c      	beq.n	800b528 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800b50e:	68fb      	ldr	r3, [r7, #12]
 800b510:	3307      	adds	r3, #7
 800b512:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800b514:	68fb      	ldr	r3, [r7, #12]
 800b516:	f023 0307 	bic.w	r3, r3, #7
 800b51a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800b51c:	68ba      	ldr	r2, [r7, #8]
 800b51e:	68fb      	ldr	r3, [r7, #12]
 800b520:	1ad3      	subs	r3, r2, r3
 800b522:	4a1f      	ldr	r2, [pc, #124]	@ (800b5a0 <prvHeapInit+0xac>)
 800b524:	4413      	add	r3, r2
 800b526:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 800b528:	68fb      	ldr	r3, [r7, #12]
 800b52a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800b52c:	4a1d      	ldr	r2, [pc, #116]	@ (800b5a4 <prvHeapInit+0xb0>)
 800b52e:	687b      	ldr	r3, [r7, #4]
 800b530:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800b532:	4b1c      	ldr	r3, [pc, #112]	@ (800b5a4 <prvHeapInit+0xb0>)
 800b534:	2200      	movs	r2, #0
 800b536:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 800b538:	687b      	ldr	r3, [r7, #4]
 800b53a:	68ba      	ldr	r2, [r7, #8]
 800b53c:	4413      	add	r3, r2
 800b53e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 800b540:	2208      	movs	r2, #8
 800b542:	68fb      	ldr	r3, [r7, #12]
 800b544:	1a9b      	subs	r3, r3, r2
 800b546:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800b548:	68fb      	ldr	r3, [r7, #12]
 800b54a:	f023 0307 	bic.w	r3, r3, #7
 800b54e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 800b550:	68fb      	ldr	r3, [r7, #12]
 800b552:	4a15      	ldr	r2, [pc, #84]	@ (800b5a8 <prvHeapInit+0xb4>)
 800b554:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 800b556:	4b14      	ldr	r3, [pc, #80]	@ (800b5a8 <prvHeapInit+0xb4>)
 800b558:	681b      	ldr	r3, [r3, #0]
 800b55a:	2200      	movs	r2, #0
 800b55c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800b55e:	4b12      	ldr	r3, [pc, #72]	@ (800b5a8 <prvHeapInit+0xb4>)
 800b560:	681b      	ldr	r3, [r3, #0]
 800b562:	2200      	movs	r2, #0
 800b564:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800b566:	687b      	ldr	r3, [r7, #4]
 800b568:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800b56a:	683b      	ldr	r3, [r7, #0]
 800b56c:	68fa      	ldr	r2, [r7, #12]
 800b56e:	1ad2      	subs	r2, r2, r3
 800b570:	683b      	ldr	r3, [r7, #0]
 800b572:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800b574:	4b0c      	ldr	r3, [pc, #48]	@ (800b5a8 <prvHeapInit+0xb4>)
 800b576:	681a      	ldr	r2, [r3, #0]
 800b578:	683b      	ldr	r3, [r7, #0]
 800b57a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800b57c:	683b      	ldr	r3, [r7, #0]
 800b57e:	685b      	ldr	r3, [r3, #4]
 800b580:	4a0a      	ldr	r2, [pc, #40]	@ (800b5ac <prvHeapInit+0xb8>)
 800b582:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800b584:	683b      	ldr	r3, [r7, #0]
 800b586:	685b      	ldr	r3, [r3, #4]
 800b588:	4a09      	ldr	r2, [pc, #36]	@ (800b5b0 <prvHeapInit+0xbc>)
 800b58a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800b58c:	4b09      	ldr	r3, [pc, #36]	@ (800b5b4 <prvHeapInit+0xc0>)
 800b58e:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 800b592:	601a      	str	r2, [r3, #0]
}
 800b594:	bf00      	nop
 800b596:	3714      	adds	r7, #20
 800b598:	46bd      	mov	sp, r7
 800b59a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b59e:	4770      	bx	lr
 800b5a0:	240025e0 	.word	0x240025e0
 800b5a4:	2400a5e0 	.word	0x2400a5e0
 800b5a8:	2400a5e8 	.word	0x2400a5e8
 800b5ac:	2400a5f0 	.word	0x2400a5f0
 800b5b0:	2400a5ec 	.word	0x2400a5ec
 800b5b4:	2400a5fc 	.word	0x2400a5fc

0800b5b8 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 800b5b8:	b480      	push	{r7}
 800b5ba:	b085      	sub	sp, #20
 800b5bc:	af00      	add	r7, sp, #0
 800b5be:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800b5c0:	4b28      	ldr	r3, [pc, #160]	@ (800b664 <prvInsertBlockIntoFreeList+0xac>)
 800b5c2:	60fb      	str	r3, [r7, #12]
 800b5c4:	e002      	b.n	800b5cc <prvInsertBlockIntoFreeList+0x14>
 800b5c6:	68fb      	ldr	r3, [r7, #12]
 800b5c8:	681b      	ldr	r3, [r3, #0]
 800b5ca:	60fb      	str	r3, [r7, #12]
 800b5cc:	68fb      	ldr	r3, [r7, #12]
 800b5ce:	681b      	ldr	r3, [r3, #0]
 800b5d0:	687a      	ldr	r2, [r7, #4]
 800b5d2:	429a      	cmp	r2, r3
 800b5d4:	d8f7      	bhi.n	800b5c6 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800b5d6:	68fb      	ldr	r3, [r7, #12]
 800b5d8:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800b5da:	68fb      	ldr	r3, [r7, #12]
 800b5dc:	685b      	ldr	r3, [r3, #4]
 800b5de:	68ba      	ldr	r2, [r7, #8]
 800b5e0:	4413      	add	r3, r2
 800b5e2:	687a      	ldr	r2, [r7, #4]
 800b5e4:	429a      	cmp	r2, r3
 800b5e6:	d108      	bne.n	800b5fa <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800b5e8:	68fb      	ldr	r3, [r7, #12]
 800b5ea:	685a      	ldr	r2, [r3, #4]
 800b5ec:	687b      	ldr	r3, [r7, #4]
 800b5ee:	685b      	ldr	r3, [r3, #4]
 800b5f0:	441a      	add	r2, r3
 800b5f2:	68fb      	ldr	r3, [r7, #12]
 800b5f4:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800b5f6:	68fb      	ldr	r3, [r7, #12]
 800b5f8:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800b5fa:	687b      	ldr	r3, [r7, #4]
 800b5fc:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800b5fe:	687b      	ldr	r3, [r7, #4]
 800b600:	685b      	ldr	r3, [r3, #4]
 800b602:	68ba      	ldr	r2, [r7, #8]
 800b604:	441a      	add	r2, r3
 800b606:	68fb      	ldr	r3, [r7, #12]
 800b608:	681b      	ldr	r3, [r3, #0]
 800b60a:	429a      	cmp	r2, r3
 800b60c:	d118      	bne.n	800b640 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800b60e:	68fb      	ldr	r3, [r7, #12]
 800b610:	681a      	ldr	r2, [r3, #0]
 800b612:	4b15      	ldr	r3, [pc, #84]	@ (800b668 <prvInsertBlockIntoFreeList+0xb0>)
 800b614:	681b      	ldr	r3, [r3, #0]
 800b616:	429a      	cmp	r2, r3
 800b618:	d00d      	beq.n	800b636 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800b61a:	687b      	ldr	r3, [r7, #4]
 800b61c:	685a      	ldr	r2, [r3, #4]
 800b61e:	68fb      	ldr	r3, [r7, #12]
 800b620:	681b      	ldr	r3, [r3, #0]
 800b622:	685b      	ldr	r3, [r3, #4]
 800b624:	441a      	add	r2, r3
 800b626:	687b      	ldr	r3, [r7, #4]
 800b628:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800b62a:	68fb      	ldr	r3, [r7, #12]
 800b62c:	681b      	ldr	r3, [r3, #0]
 800b62e:	681a      	ldr	r2, [r3, #0]
 800b630:	687b      	ldr	r3, [r7, #4]
 800b632:	601a      	str	r2, [r3, #0]
 800b634:	e008      	b.n	800b648 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800b636:	4b0c      	ldr	r3, [pc, #48]	@ (800b668 <prvInsertBlockIntoFreeList+0xb0>)
 800b638:	681a      	ldr	r2, [r3, #0]
 800b63a:	687b      	ldr	r3, [r7, #4]
 800b63c:	601a      	str	r2, [r3, #0]
 800b63e:	e003      	b.n	800b648 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800b640:	68fb      	ldr	r3, [r7, #12]
 800b642:	681a      	ldr	r2, [r3, #0]
 800b644:	687b      	ldr	r3, [r7, #4]
 800b646:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800b648:	68fa      	ldr	r2, [r7, #12]
 800b64a:	687b      	ldr	r3, [r7, #4]
 800b64c:	429a      	cmp	r2, r3
 800b64e:	d002      	beq.n	800b656 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800b650:	68fb      	ldr	r3, [r7, #12]
 800b652:	687a      	ldr	r2, [r7, #4]
 800b654:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800b656:	bf00      	nop
 800b658:	3714      	adds	r7, #20
 800b65a:	46bd      	mov	sp, r7
 800b65c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b660:	4770      	bx	lr
 800b662:	bf00      	nop
 800b664:	2400a5e0 	.word	0x2400a5e0
 800b668:	2400a5e8 	.word	0x2400a5e8

0800b66c <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 800b66c:	b480      	push	{r7}
 800b66e:	b083      	sub	sp, #12
 800b670:	af00      	add	r7, sp, #0
 800b672:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800b674:	687b      	ldr	r3, [r7, #4]
 800b676:	f103 0208 	add.w	r2, r3, #8
 800b67a:	687b      	ldr	r3, [r7, #4]
 800b67c:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800b67e:	687b      	ldr	r3, [r7, #4]
 800b680:	f04f 32ff 	mov.w	r2, #4294967295
 800b684:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800b686:	687b      	ldr	r3, [r7, #4]
 800b688:	f103 0208 	add.w	r2, r3, #8
 800b68c:	687b      	ldr	r3, [r7, #4]
 800b68e:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800b690:	687b      	ldr	r3, [r7, #4]
 800b692:	f103 0208 	add.w	r2, r3, #8
 800b696:	687b      	ldr	r3, [r7, #4]
 800b698:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800b69a:	687b      	ldr	r3, [r7, #4]
 800b69c:	2200      	movs	r2, #0
 800b69e:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 800b6a0:	bf00      	nop
 800b6a2:	370c      	adds	r7, #12
 800b6a4:	46bd      	mov	sp, r7
 800b6a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b6aa:	4770      	bx	lr

0800b6ac <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 800b6ac:	b480      	push	{r7}
 800b6ae:	b083      	sub	sp, #12
 800b6b0:	af00      	add	r7, sp, #0
 800b6b2:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 800b6b4:	687b      	ldr	r3, [r7, #4]
 800b6b6:	2200      	movs	r2, #0
 800b6b8:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800b6ba:	bf00      	nop
 800b6bc:	370c      	adds	r7, #12
 800b6be:	46bd      	mov	sp, r7
 800b6c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b6c4:	4770      	bx	lr

0800b6c6 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800b6c6:	b480      	push	{r7}
 800b6c8:	b085      	sub	sp, #20
 800b6ca:	af00      	add	r7, sp, #0
 800b6cc:	6078      	str	r0, [r7, #4]
 800b6ce:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 800b6d0:	687b      	ldr	r3, [r7, #4]
 800b6d2:	685b      	ldr	r3, [r3, #4]
 800b6d4:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800b6d6:	683b      	ldr	r3, [r7, #0]
 800b6d8:	68fa      	ldr	r2, [r7, #12]
 800b6da:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 800b6dc:	68fb      	ldr	r3, [r7, #12]
 800b6de:	689a      	ldr	r2, [r3, #8]
 800b6e0:	683b      	ldr	r3, [r7, #0]
 800b6e2:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 800b6e4:	68fb      	ldr	r3, [r7, #12]
 800b6e6:	689b      	ldr	r3, [r3, #8]
 800b6e8:	683a      	ldr	r2, [r7, #0]
 800b6ea:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 800b6ec:	68fb      	ldr	r3, [r7, #12]
 800b6ee:	683a      	ldr	r2, [r7, #0]
 800b6f0:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 800b6f2:	683b      	ldr	r3, [r7, #0]
 800b6f4:	687a      	ldr	r2, [r7, #4]
 800b6f6:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800b6f8:	687b      	ldr	r3, [r7, #4]
 800b6fa:	681b      	ldr	r3, [r3, #0]
 800b6fc:	1c5a      	adds	r2, r3, #1
 800b6fe:	687b      	ldr	r3, [r7, #4]
 800b700:	601a      	str	r2, [r3, #0]
}
 800b702:	bf00      	nop
 800b704:	3714      	adds	r7, #20
 800b706:	46bd      	mov	sp, r7
 800b708:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b70c:	4770      	bx	lr

0800b70e <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800b70e:	b480      	push	{r7}
 800b710:	b085      	sub	sp, #20
 800b712:	af00      	add	r7, sp, #0
 800b714:	6078      	str	r0, [r7, #4]
 800b716:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 800b718:	683b      	ldr	r3, [r7, #0]
 800b71a:	681b      	ldr	r3, [r3, #0]
 800b71c:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 800b71e:	68bb      	ldr	r3, [r7, #8]
 800b720:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b724:	d103      	bne.n	800b72e <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 800b726:	687b      	ldr	r3, [r7, #4]
 800b728:	691b      	ldr	r3, [r3, #16]
 800b72a:	60fb      	str	r3, [r7, #12]
 800b72c:	e00c      	b.n	800b748 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 800b72e:	687b      	ldr	r3, [r7, #4]
 800b730:	3308      	adds	r3, #8
 800b732:	60fb      	str	r3, [r7, #12]
 800b734:	e002      	b.n	800b73c <vListInsert+0x2e>
 800b736:	68fb      	ldr	r3, [r7, #12]
 800b738:	685b      	ldr	r3, [r3, #4]
 800b73a:	60fb      	str	r3, [r7, #12]
 800b73c:	68fb      	ldr	r3, [r7, #12]
 800b73e:	685b      	ldr	r3, [r3, #4]
 800b740:	681b      	ldr	r3, [r3, #0]
 800b742:	68ba      	ldr	r2, [r7, #8]
 800b744:	429a      	cmp	r2, r3
 800b746:	d2f6      	bcs.n	800b736 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 800b748:	68fb      	ldr	r3, [r7, #12]
 800b74a:	685a      	ldr	r2, [r3, #4]
 800b74c:	683b      	ldr	r3, [r7, #0]
 800b74e:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 800b750:	683b      	ldr	r3, [r7, #0]
 800b752:	685b      	ldr	r3, [r3, #4]
 800b754:	683a      	ldr	r2, [r7, #0]
 800b756:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 800b758:	683b      	ldr	r3, [r7, #0]
 800b75a:	68fa      	ldr	r2, [r7, #12]
 800b75c:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 800b75e:	68fb      	ldr	r3, [r7, #12]
 800b760:	683a      	ldr	r2, [r7, #0]
 800b762:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 800b764:	683b      	ldr	r3, [r7, #0]
 800b766:	687a      	ldr	r2, [r7, #4]
 800b768:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800b76a:	687b      	ldr	r3, [r7, #4]
 800b76c:	681b      	ldr	r3, [r3, #0]
 800b76e:	1c5a      	adds	r2, r3, #1
 800b770:	687b      	ldr	r3, [r7, #4]
 800b772:	601a      	str	r2, [r3, #0]
}
 800b774:	bf00      	nop
 800b776:	3714      	adds	r7, #20
 800b778:	46bd      	mov	sp, r7
 800b77a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b77e:	4770      	bx	lr

0800b780 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 800b780:	b480      	push	{r7}
 800b782:	b085      	sub	sp, #20
 800b784:	af00      	add	r7, sp, #0
 800b786:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 800b788:	687b      	ldr	r3, [r7, #4]
 800b78a:	691b      	ldr	r3, [r3, #16]
 800b78c:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800b78e:	687b      	ldr	r3, [r7, #4]
 800b790:	685b      	ldr	r3, [r3, #4]
 800b792:	687a      	ldr	r2, [r7, #4]
 800b794:	6892      	ldr	r2, [r2, #8]
 800b796:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 800b798:	687b      	ldr	r3, [r7, #4]
 800b79a:	689b      	ldr	r3, [r3, #8]
 800b79c:	687a      	ldr	r2, [r7, #4]
 800b79e:	6852      	ldr	r2, [r2, #4]
 800b7a0:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800b7a2:	68fb      	ldr	r3, [r7, #12]
 800b7a4:	685b      	ldr	r3, [r3, #4]
 800b7a6:	687a      	ldr	r2, [r7, #4]
 800b7a8:	429a      	cmp	r2, r3
 800b7aa:	d103      	bne.n	800b7b4 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 800b7ac:	687b      	ldr	r3, [r7, #4]
 800b7ae:	689a      	ldr	r2, [r3, #8]
 800b7b0:	68fb      	ldr	r3, [r7, #12]
 800b7b2:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 800b7b4:	687b      	ldr	r3, [r7, #4]
 800b7b6:	2200      	movs	r2, #0
 800b7b8:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 800b7ba:	68fb      	ldr	r3, [r7, #12]
 800b7bc:	681b      	ldr	r3, [r3, #0]
 800b7be:	1e5a      	subs	r2, r3, #1
 800b7c0:	68fb      	ldr	r3, [r7, #12]
 800b7c2:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 800b7c4:	68fb      	ldr	r3, [r7, #12]
 800b7c6:	681b      	ldr	r3, [r3, #0]
}
 800b7c8:	4618      	mov	r0, r3
 800b7ca:	3714      	adds	r7, #20
 800b7cc:	46bd      	mov	sp, r7
 800b7ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b7d2:	4770      	bx	lr

0800b7d4 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 800b7d4:	b480      	push	{r7}
 800b7d6:	b085      	sub	sp, #20
 800b7d8:	af00      	add	r7, sp, #0
 800b7da:	60f8      	str	r0, [r7, #12]
 800b7dc:	60b9      	str	r1, [r7, #8]
 800b7de:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 800b7e0:	68fb      	ldr	r3, [r7, #12]
 800b7e2:	3b04      	subs	r3, #4
 800b7e4:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800b7e6:	68fb      	ldr	r3, [r7, #12]
 800b7e8:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 800b7ec:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800b7ee:	68fb      	ldr	r3, [r7, #12]
 800b7f0:	3b04      	subs	r3, #4
 800b7f2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800b7f4:	68bb      	ldr	r3, [r7, #8]
 800b7f6:	f023 0201 	bic.w	r2, r3, #1
 800b7fa:	68fb      	ldr	r3, [r7, #12]
 800b7fc:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800b7fe:	68fb      	ldr	r3, [r7, #12]
 800b800:	3b04      	subs	r3, #4
 800b802:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800b804:	4a0c      	ldr	r2, [pc, #48]	@ (800b838 <pxPortInitialiseStack+0x64>)
 800b806:	68fb      	ldr	r3, [r7, #12]
 800b808:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800b80a:	68fb      	ldr	r3, [r7, #12]
 800b80c:	3b14      	subs	r3, #20
 800b80e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800b810:	687a      	ldr	r2, [r7, #4]
 800b812:	68fb      	ldr	r3, [r7, #12]
 800b814:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800b816:	68fb      	ldr	r3, [r7, #12]
 800b818:	3b04      	subs	r3, #4
 800b81a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 800b81c:	68fb      	ldr	r3, [r7, #12]
 800b81e:	f06f 0202 	mvn.w	r2, #2
 800b822:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800b824:	68fb      	ldr	r3, [r7, #12]
 800b826:	3b20      	subs	r3, #32
 800b828:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800b82a:	68fb      	ldr	r3, [r7, #12]
}
 800b82c:	4618      	mov	r0, r3
 800b82e:	3714      	adds	r7, #20
 800b830:	46bd      	mov	sp, r7
 800b832:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b836:	4770      	bx	lr
 800b838:	0800b83d 	.word	0x0800b83d

0800b83c <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800b83c:	b480      	push	{r7}
 800b83e:	b085      	sub	sp, #20
 800b840:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 800b842:	2300      	movs	r3, #0
 800b844:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800b846:	4b13      	ldr	r3, [pc, #76]	@ (800b894 <prvTaskExitError+0x58>)
 800b848:	681b      	ldr	r3, [r3, #0]
 800b84a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b84e:	d00b      	beq.n	800b868 <prvTaskExitError+0x2c>
	__asm volatile
 800b850:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b854:	f383 8811 	msr	BASEPRI, r3
 800b858:	f3bf 8f6f 	isb	sy
 800b85c:	f3bf 8f4f 	dsb	sy
 800b860:	60fb      	str	r3, [r7, #12]
}
 800b862:	bf00      	nop
 800b864:	bf00      	nop
 800b866:	e7fd      	b.n	800b864 <prvTaskExitError+0x28>
	__asm volatile
 800b868:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b86c:	f383 8811 	msr	BASEPRI, r3
 800b870:	f3bf 8f6f 	isb	sy
 800b874:	f3bf 8f4f 	dsb	sy
 800b878:	60bb      	str	r3, [r7, #8]
}
 800b87a:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800b87c:	bf00      	nop
 800b87e:	687b      	ldr	r3, [r7, #4]
 800b880:	2b00      	cmp	r3, #0
 800b882:	d0fc      	beq.n	800b87e <prvTaskExitError+0x42>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800b884:	bf00      	nop
 800b886:	bf00      	nop
 800b888:	3714      	adds	r7, #20
 800b88a:	46bd      	mov	sp, r7
 800b88c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b890:	4770      	bx	lr
 800b892:	bf00      	nop
 800b894:	24000014 	.word	0x24000014
	...

0800b8a0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 800b8a0:	4b07      	ldr	r3, [pc, #28]	@ (800b8c0 <pxCurrentTCBConst2>)
 800b8a2:	6819      	ldr	r1, [r3, #0]
 800b8a4:	6808      	ldr	r0, [r1, #0]
 800b8a6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b8aa:	f380 8809 	msr	PSP, r0
 800b8ae:	f3bf 8f6f 	isb	sy
 800b8b2:	f04f 0000 	mov.w	r0, #0
 800b8b6:	f380 8811 	msr	BASEPRI, r0
 800b8ba:	4770      	bx	lr
 800b8bc:	f3af 8000 	nop.w

0800b8c0 <pxCurrentTCBConst2>:
 800b8c0:	2400a648 	.word	0x2400a648
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 800b8c4:	bf00      	nop
 800b8c6:	bf00      	nop

0800b8c8 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 800b8c8:	4808      	ldr	r0, [pc, #32]	@ (800b8ec <prvPortStartFirstTask+0x24>)
 800b8ca:	6800      	ldr	r0, [r0, #0]
 800b8cc:	6800      	ldr	r0, [r0, #0]
 800b8ce:	f380 8808 	msr	MSP, r0
 800b8d2:	f04f 0000 	mov.w	r0, #0
 800b8d6:	f380 8814 	msr	CONTROL, r0
 800b8da:	b662      	cpsie	i
 800b8dc:	b661      	cpsie	f
 800b8de:	f3bf 8f4f 	dsb	sy
 800b8e2:	f3bf 8f6f 	isb	sy
 800b8e6:	df00      	svc	0
 800b8e8:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800b8ea:	bf00      	nop
 800b8ec:	e000ed08 	.word	0xe000ed08

0800b8f0 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 800b8f0:	b580      	push	{r7, lr}
 800b8f2:	b086      	sub	sp, #24
 800b8f4:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 800b8f6:	4b47      	ldr	r3, [pc, #284]	@ (800ba14 <xPortStartScheduler+0x124>)
 800b8f8:	681b      	ldr	r3, [r3, #0]
 800b8fa:	4a47      	ldr	r2, [pc, #284]	@ (800ba18 <xPortStartScheduler+0x128>)
 800b8fc:	4293      	cmp	r3, r2
 800b8fe:	d10b      	bne.n	800b918 <xPortStartScheduler+0x28>
	__asm volatile
 800b900:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b904:	f383 8811 	msr	BASEPRI, r3
 800b908:	f3bf 8f6f 	isb	sy
 800b90c:	f3bf 8f4f 	dsb	sy
 800b910:	613b      	str	r3, [r7, #16]
}
 800b912:	bf00      	nop
 800b914:	bf00      	nop
 800b916:	e7fd      	b.n	800b914 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 800b918:	4b3e      	ldr	r3, [pc, #248]	@ (800ba14 <xPortStartScheduler+0x124>)
 800b91a:	681b      	ldr	r3, [r3, #0]
 800b91c:	4a3f      	ldr	r2, [pc, #252]	@ (800ba1c <xPortStartScheduler+0x12c>)
 800b91e:	4293      	cmp	r3, r2
 800b920:	d10b      	bne.n	800b93a <xPortStartScheduler+0x4a>
	__asm volatile
 800b922:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b926:	f383 8811 	msr	BASEPRI, r3
 800b92a:	f3bf 8f6f 	isb	sy
 800b92e:	f3bf 8f4f 	dsb	sy
 800b932:	60fb      	str	r3, [r7, #12]
}
 800b934:	bf00      	nop
 800b936:	bf00      	nop
 800b938:	e7fd      	b.n	800b936 <xPortStartScheduler+0x46>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800b93a:	4b39      	ldr	r3, [pc, #228]	@ (800ba20 <xPortStartScheduler+0x130>)
 800b93c:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800b93e:	697b      	ldr	r3, [r7, #20]
 800b940:	781b      	ldrb	r3, [r3, #0]
 800b942:	b2db      	uxtb	r3, r3
 800b944:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800b946:	697b      	ldr	r3, [r7, #20]
 800b948:	22ff      	movs	r2, #255	@ 0xff
 800b94a:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800b94c:	697b      	ldr	r3, [r7, #20]
 800b94e:	781b      	ldrb	r3, [r3, #0]
 800b950:	b2db      	uxtb	r3, r3
 800b952:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800b954:	78fb      	ldrb	r3, [r7, #3]
 800b956:	b2db      	uxtb	r3, r3
 800b958:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 800b95c:	b2da      	uxtb	r2, r3
 800b95e:	4b31      	ldr	r3, [pc, #196]	@ (800ba24 <xPortStartScheduler+0x134>)
 800b960:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800b962:	4b31      	ldr	r3, [pc, #196]	@ (800ba28 <xPortStartScheduler+0x138>)
 800b964:	2207      	movs	r2, #7
 800b966:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800b968:	e009      	b.n	800b97e <xPortStartScheduler+0x8e>
		{
			ulMaxPRIGROUPValue--;
 800b96a:	4b2f      	ldr	r3, [pc, #188]	@ (800ba28 <xPortStartScheduler+0x138>)
 800b96c:	681b      	ldr	r3, [r3, #0]
 800b96e:	3b01      	subs	r3, #1
 800b970:	4a2d      	ldr	r2, [pc, #180]	@ (800ba28 <xPortStartScheduler+0x138>)
 800b972:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 800b974:	78fb      	ldrb	r3, [r7, #3]
 800b976:	b2db      	uxtb	r3, r3
 800b978:	005b      	lsls	r3, r3, #1
 800b97a:	b2db      	uxtb	r3, r3
 800b97c:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800b97e:	78fb      	ldrb	r3, [r7, #3]
 800b980:	b2db      	uxtb	r3, r3
 800b982:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800b986:	2b80      	cmp	r3, #128	@ 0x80
 800b988:	d0ef      	beq.n	800b96a <xPortStartScheduler+0x7a>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800b98a:	4b27      	ldr	r3, [pc, #156]	@ (800ba28 <xPortStartScheduler+0x138>)
 800b98c:	681b      	ldr	r3, [r3, #0]
 800b98e:	f1c3 0307 	rsb	r3, r3, #7
 800b992:	2b04      	cmp	r3, #4
 800b994:	d00b      	beq.n	800b9ae <xPortStartScheduler+0xbe>
	__asm volatile
 800b996:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b99a:	f383 8811 	msr	BASEPRI, r3
 800b99e:	f3bf 8f6f 	isb	sy
 800b9a2:	f3bf 8f4f 	dsb	sy
 800b9a6:	60bb      	str	r3, [r7, #8]
}
 800b9a8:	bf00      	nop
 800b9aa:	bf00      	nop
 800b9ac:	e7fd      	b.n	800b9aa <xPortStartScheduler+0xba>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800b9ae:	4b1e      	ldr	r3, [pc, #120]	@ (800ba28 <xPortStartScheduler+0x138>)
 800b9b0:	681b      	ldr	r3, [r3, #0]
 800b9b2:	021b      	lsls	r3, r3, #8
 800b9b4:	4a1c      	ldr	r2, [pc, #112]	@ (800ba28 <xPortStartScheduler+0x138>)
 800b9b6:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800b9b8:	4b1b      	ldr	r3, [pc, #108]	@ (800ba28 <xPortStartScheduler+0x138>)
 800b9ba:	681b      	ldr	r3, [r3, #0]
 800b9bc:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 800b9c0:	4a19      	ldr	r2, [pc, #100]	@ (800ba28 <xPortStartScheduler+0x138>)
 800b9c2:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800b9c4:	687b      	ldr	r3, [r7, #4]
 800b9c6:	b2da      	uxtb	r2, r3
 800b9c8:	697b      	ldr	r3, [r7, #20]
 800b9ca:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800b9cc:	4b17      	ldr	r3, [pc, #92]	@ (800ba2c <xPortStartScheduler+0x13c>)
 800b9ce:	681b      	ldr	r3, [r3, #0]
 800b9d0:	4a16      	ldr	r2, [pc, #88]	@ (800ba2c <xPortStartScheduler+0x13c>)
 800b9d2:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 800b9d6:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800b9d8:	4b14      	ldr	r3, [pc, #80]	@ (800ba2c <xPortStartScheduler+0x13c>)
 800b9da:	681b      	ldr	r3, [r3, #0]
 800b9dc:	4a13      	ldr	r2, [pc, #76]	@ (800ba2c <xPortStartScheduler+0x13c>)
 800b9de:	f043 4370 	orr.w	r3, r3, #4026531840	@ 0xf0000000
 800b9e2:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800b9e4:	f000 f8da 	bl	800bb9c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 800b9e8:	4b11      	ldr	r3, [pc, #68]	@ (800ba30 <xPortStartScheduler+0x140>)
 800b9ea:	2200      	movs	r2, #0
 800b9ec:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 800b9ee:	f000 f8f9 	bl	800bbe4 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800b9f2:	4b10      	ldr	r3, [pc, #64]	@ (800ba34 <xPortStartScheduler+0x144>)
 800b9f4:	681b      	ldr	r3, [r3, #0]
 800b9f6:	4a0f      	ldr	r2, [pc, #60]	@ (800ba34 <xPortStartScheduler+0x144>)
 800b9f8:	f043 4340 	orr.w	r3, r3, #3221225472	@ 0xc0000000
 800b9fc:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800b9fe:	f7ff ff63 	bl	800b8c8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800ba02:	f001 fd41 	bl	800d488 <vTaskSwitchContext>
	prvTaskExitError();
 800ba06:	f7ff ff19 	bl	800b83c <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800ba0a:	2300      	movs	r3, #0
}
 800ba0c:	4618      	mov	r0, r3
 800ba0e:	3718      	adds	r7, #24
 800ba10:	46bd      	mov	sp, r7
 800ba12:	bd80      	pop	{r7, pc}
 800ba14:	e000ed00 	.word	0xe000ed00
 800ba18:	410fc271 	.word	0x410fc271
 800ba1c:	410fc270 	.word	0x410fc270
 800ba20:	e000e400 	.word	0xe000e400
 800ba24:	2400a600 	.word	0x2400a600
 800ba28:	2400a604 	.word	0x2400a604
 800ba2c:	e000ed20 	.word	0xe000ed20
 800ba30:	24000014 	.word	0x24000014
 800ba34:	e000ef34 	.word	0xe000ef34

0800ba38 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800ba38:	b480      	push	{r7}
 800ba3a:	b083      	sub	sp, #12
 800ba3c:	af00      	add	r7, sp, #0
	__asm volatile
 800ba3e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ba42:	f383 8811 	msr	BASEPRI, r3
 800ba46:	f3bf 8f6f 	isb	sy
 800ba4a:	f3bf 8f4f 	dsb	sy
 800ba4e:	607b      	str	r3, [r7, #4]
}
 800ba50:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800ba52:	4b10      	ldr	r3, [pc, #64]	@ (800ba94 <vPortEnterCritical+0x5c>)
 800ba54:	681b      	ldr	r3, [r3, #0]
 800ba56:	3301      	adds	r3, #1
 800ba58:	4a0e      	ldr	r2, [pc, #56]	@ (800ba94 <vPortEnterCritical+0x5c>)
 800ba5a:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800ba5c:	4b0d      	ldr	r3, [pc, #52]	@ (800ba94 <vPortEnterCritical+0x5c>)
 800ba5e:	681b      	ldr	r3, [r3, #0]
 800ba60:	2b01      	cmp	r3, #1
 800ba62:	d110      	bne.n	800ba86 <vPortEnterCritical+0x4e>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 800ba64:	4b0c      	ldr	r3, [pc, #48]	@ (800ba98 <vPortEnterCritical+0x60>)
 800ba66:	681b      	ldr	r3, [r3, #0]
 800ba68:	b2db      	uxtb	r3, r3
 800ba6a:	2b00      	cmp	r3, #0
 800ba6c:	d00b      	beq.n	800ba86 <vPortEnterCritical+0x4e>
	__asm volatile
 800ba6e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ba72:	f383 8811 	msr	BASEPRI, r3
 800ba76:	f3bf 8f6f 	isb	sy
 800ba7a:	f3bf 8f4f 	dsb	sy
 800ba7e:	603b      	str	r3, [r7, #0]
}
 800ba80:	bf00      	nop
 800ba82:	bf00      	nop
 800ba84:	e7fd      	b.n	800ba82 <vPortEnterCritical+0x4a>
	}
}
 800ba86:	bf00      	nop
 800ba88:	370c      	adds	r7, #12
 800ba8a:	46bd      	mov	sp, r7
 800ba8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ba90:	4770      	bx	lr
 800ba92:	bf00      	nop
 800ba94:	24000014 	.word	0x24000014
 800ba98:	e000ed04 	.word	0xe000ed04

0800ba9c <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800ba9c:	b480      	push	{r7}
 800ba9e:	b083      	sub	sp, #12
 800baa0:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800baa2:	4b12      	ldr	r3, [pc, #72]	@ (800baec <vPortExitCritical+0x50>)
 800baa4:	681b      	ldr	r3, [r3, #0]
 800baa6:	2b00      	cmp	r3, #0
 800baa8:	d10b      	bne.n	800bac2 <vPortExitCritical+0x26>
	__asm volatile
 800baaa:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800baae:	f383 8811 	msr	BASEPRI, r3
 800bab2:	f3bf 8f6f 	isb	sy
 800bab6:	f3bf 8f4f 	dsb	sy
 800baba:	607b      	str	r3, [r7, #4]
}
 800babc:	bf00      	nop
 800babe:	bf00      	nop
 800bac0:	e7fd      	b.n	800babe <vPortExitCritical+0x22>
	uxCriticalNesting--;
 800bac2:	4b0a      	ldr	r3, [pc, #40]	@ (800baec <vPortExitCritical+0x50>)
 800bac4:	681b      	ldr	r3, [r3, #0]
 800bac6:	3b01      	subs	r3, #1
 800bac8:	4a08      	ldr	r2, [pc, #32]	@ (800baec <vPortExitCritical+0x50>)
 800baca:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800bacc:	4b07      	ldr	r3, [pc, #28]	@ (800baec <vPortExitCritical+0x50>)
 800bace:	681b      	ldr	r3, [r3, #0]
 800bad0:	2b00      	cmp	r3, #0
 800bad2:	d105      	bne.n	800bae0 <vPortExitCritical+0x44>
 800bad4:	2300      	movs	r3, #0
 800bad6:	603b      	str	r3, [r7, #0]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 800bad8:	683b      	ldr	r3, [r7, #0]
 800bada:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 800bade:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 800bae0:	bf00      	nop
 800bae2:	370c      	adds	r7, #12
 800bae4:	46bd      	mov	sp, r7
 800bae6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800baea:	4770      	bx	lr
 800baec:	24000014 	.word	0x24000014

0800baf0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 800baf0:	f3ef 8009 	mrs	r0, PSP
 800baf4:	f3bf 8f6f 	isb	sy
 800baf8:	4b15      	ldr	r3, [pc, #84]	@ (800bb50 <pxCurrentTCBConst>)
 800bafa:	681a      	ldr	r2, [r3, #0]
 800bafc:	f01e 0f10 	tst.w	lr, #16
 800bb00:	bf08      	it	eq
 800bb02:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 800bb06:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bb0a:	6010      	str	r0, [r2, #0]
 800bb0c:	e92d 0009 	stmdb	sp!, {r0, r3}
 800bb10:	f04f 0050 	mov.w	r0, #80	@ 0x50
 800bb14:	f380 8811 	msr	BASEPRI, r0
 800bb18:	f3bf 8f4f 	dsb	sy
 800bb1c:	f3bf 8f6f 	isb	sy
 800bb20:	f001 fcb2 	bl	800d488 <vTaskSwitchContext>
 800bb24:	f04f 0000 	mov.w	r0, #0
 800bb28:	f380 8811 	msr	BASEPRI, r0
 800bb2c:	bc09      	pop	{r0, r3}
 800bb2e:	6819      	ldr	r1, [r3, #0]
 800bb30:	6808      	ldr	r0, [r1, #0]
 800bb32:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bb36:	f01e 0f10 	tst.w	lr, #16
 800bb3a:	bf08      	it	eq
 800bb3c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 800bb40:	f380 8809 	msr	PSP, r0
 800bb44:	f3bf 8f6f 	isb	sy
 800bb48:	4770      	bx	lr
 800bb4a:	bf00      	nop
 800bb4c:	f3af 8000 	nop.w

0800bb50 <pxCurrentTCBConst>:
 800bb50:	2400a648 	.word	0x2400a648
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 800bb54:	bf00      	nop
 800bb56:	bf00      	nop

0800bb58 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 800bb58:	b580      	push	{r7, lr}
 800bb5a:	b082      	sub	sp, #8
 800bb5c:	af00      	add	r7, sp, #0
	__asm volatile
 800bb5e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800bb62:	f383 8811 	msr	BASEPRI, r3
 800bb66:	f3bf 8f6f 	isb	sy
 800bb6a:	f3bf 8f4f 	dsb	sy
 800bb6e:	607b      	str	r3, [r7, #4]
}
 800bb70:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 800bb72:	f001 fbcf 	bl	800d314 <xTaskIncrementTick>
 800bb76:	4603      	mov	r3, r0
 800bb78:	2b00      	cmp	r3, #0
 800bb7a:	d003      	beq.n	800bb84 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800bb7c:	4b06      	ldr	r3, [pc, #24]	@ (800bb98 <xPortSysTickHandler+0x40>)
 800bb7e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800bb82:	601a      	str	r2, [r3, #0]
 800bb84:	2300      	movs	r3, #0
 800bb86:	603b      	str	r3, [r7, #0]
	__asm volatile
 800bb88:	683b      	ldr	r3, [r7, #0]
 800bb8a:	f383 8811 	msr	BASEPRI, r3
}
 800bb8e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 800bb90:	bf00      	nop
 800bb92:	3708      	adds	r7, #8
 800bb94:	46bd      	mov	sp, r7
 800bb96:	bd80      	pop	{r7, pc}
 800bb98:	e000ed04 	.word	0xe000ed04

0800bb9c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800bb9c:	b480      	push	{r7}
 800bb9e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 800bba0:	4b0b      	ldr	r3, [pc, #44]	@ (800bbd0 <vPortSetupTimerInterrupt+0x34>)
 800bba2:	2200      	movs	r2, #0
 800bba4:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 800bba6:	4b0b      	ldr	r3, [pc, #44]	@ (800bbd4 <vPortSetupTimerInterrupt+0x38>)
 800bba8:	2200      	movs	r2, #0
 800bbaa:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800bbac:	4b0a      	ldr	r3, [pc, #40]	@ (800bbd8 <vPortSetupTimerInterrupt+0x3c>)
 800bbae:	681b      	ldr	r3, [r3, #0]
 800bbb0:	4a0a      	ldr	r2, [pc, #40]	@ (800bbdc <vPortSetupTimerInterrupt+0x40>)
 800bbb2:	fba2 2303 	umull	r2, r3, r2, r3
 800bbb6:	099b      	lsrs	r3, r3, #6
 800bbb8:	4a09      	ldr	r2, [pc, #36]	@ (800bbe0 <vPortSetupTimerInterrupt+0x44>)
 800bbba:	3b01      	subs	r3, #1
 800bbbc:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800bbbe:	4b04      	ldr	r3, [pc, #16]	@ (800bbd0 <vPortSetupTimerInterrupt+0x34>)
 800bbc0:	2207      	movs	r2, #7
 800bbc2:	601a      	str	r2, [r3, #0]
}
 800bbc4:	bf00      	nop
 800bbc6:	46bd      	mov	sp, r7
 800bbc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bbcc:	4770      	bx	lr
 800bbce:	bf00      	nop
 800bbd0:	e000e010 	.word	0xe000e010
 800bbd4:	e000e018 	.word	0xe000e018
 800bbd8:	24000018 	.word	0x24000018
 800bbdc:	10624dd3 	.word	0x10624dd3
 800bbe0:	e000e014 	.word	0xe000e014

0800bbe4 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 800bbe4:	f8df 000c 	ldr.w	r0, [pc, #12]	@ 800bbf4 <vPortEnableVFP+0x10>
 800bbe8:	6801      	ldr	r1, [r0, #0]
 800bbea:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800bbee:	6001      	str	r1, [r0, #0]
 800bbf0:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 800bbf2:	bf00      	nop
 800bbf4:	e000ed88 	.word	0xe000ed88

0800bbf8 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 800bbf8:	b480      	push	{r7}
 800bbfa:	b085      	sub	sp, #20
 800bbfc:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800bbfe:	f3ef 8305 	mrs	r3, IPSR
 800bc02:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 800bc04:	68fb      	ldr	r3, [r7, #12]
 800bc06:	2b0f      	cmp	r3, #15
 800bc08:	d915      	bls.n	800bc36 <vPortValidateInterruptPriority+0x3e>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800bc0a:	4a18      	ldr	r2, [pc, #96]	@ (800bc6c <vPortValidateInterruptPriority+0x74>)
 800bc0c:	68fb      	ldr	r3, [r7, #12]
 800bc0e:	4413      	add	r3, r2
 800bc10:	781b      	ldrb	r3, [r3, #0]
 800bc12:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 800bc14:	4b16      	ldr	r3, [pc, #88]	@ (800bc70 <vPortValidateInterruptPriority+0x78>)
 800bc16:	781b      	ldrb	r3, [r3, #0]
 800bc18:	7afa      	ldrb	r2, [r7, #11]
 800bc1a:	429a      	cmp	r2, r3
 800bc1c:	d20b      	bcs.n	800bc36 <vPortValidateInterruptPriority+0x3e>
	__asm volatile
 800bc1e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800bc22:	f383 8811 	msr	BASEPRI, r3
 800bc26:	f3bf 8f6f 	isb	sy
 800bc2a:	f3bf 8f4f 	dsb	sy
 800bc2e:	607b      	str	r3, [r7, #4]
}
 800bc30:	bf00      	nop
 800bc32:	bf00      	nop
 800bc34:	e7fd      	b.n	800bc32 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800bc36:	4b0f      	ldr	r3, [pc, #60]	@ (800bc74 <vPortValidateInterruptPriority+0x7c>)
 800bc38:	681b      	ldr	r3, [r3, #0]
 800bc3a:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 800bc3e:	4b0e      	ldr	r3, [pc, #56]	@ (800bc78 <vPortValidateInterruptPriority+0x80>)
 800bc40:	681b      	ldr	r3, [r3, #0]
 800bc42:	429a      	cmp	r2, r3
 800bc44:	d90b      	bls.n	800bc5e <vPortValidateInterruptPriority+0x66>
	__asm volatile
 800bc46:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800bc4a:	f383 8811 	msr	BASEPRI, r3
 800bc4e:	f3bf 8f6f 	isb	sy
 800bc52:	f3bf 8f4f 	dsb	sy
 800bc56:	603b      	str	r3, [r7, #0]
}
 800bc58:	bf00      	nop
 800bc5a:	bf00      	nop
 800bc5c:	e7fd      	b.n	800bc5a <vPortValidateInterruptPriority+0x62>
	}
 800bc5e:	bf00      	nop
 800bc60:	3714      	adds	r7, #20
 800bc62:	46bd      	mov	sp, r7
 800bc64:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bc68:	4770      	bx	lr
 800bc6a:	bf00      	nop
 800bc6c:	e000e3f0 	.word	0xe000e3f0
 800bc70:	2400a600 	.word	0x2400a600
 800bc74:	e000ed0c 	.word	0xe000ed0c
 800bc78:	2400a604 	.word	0x2400a604

0800bc7c <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 800bc7c:	b580      	push	{r7, lr}
 800bc7e:	b084      	sub	sp, #16
 800bc80:	af00      	add	r7, sp, #0
 800bc82:	6078      	str	r0, [r7, #4]
 800bc84:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 800bc86:	687b      	ldr	r3, [r7, #4]
 800bc88:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800bc8a:	68fb      	ldr	r3, [r7, #12]
 800bc8c:	2b00      	cmp	r3, #0
 800bc8e:	d10b      	bne.n	800bca8 <xQueueGenericReset+0x2c>
	__asm volatile
 800bc90:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800bc94:	f383 8811 	msr	BASEPRI, r3
 800bc98:	f3bf 8f6f 	isb	sy
 800bc9c:	f3bf 8f4f 	dsb	sy
 800bca0:	60bb      	str	r3, [r7, #8]
}
 800bca2:	bf00      	nop
 800bca4:	bf00      	nop
 800bca6:	e7fd      	b.n	800bca4 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 800bca8:	f7ff fec6 	bl	800ba38 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800bcac:	68fb      	ldr	r3, [r7, #12]
 800bcae:	681a      	ldr	r2, [r3, #0]
 800bcb0:	68fb      	ldr	r3, [r7, #12]
 800bcb2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800bcb4:	68f9      	ldr	r1, [r7, #12]
 800bcb6:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 800bcb8:	fb01 f303 	mul.w	r3, r1, r3
 800bcbc:	441a      	add	r2, r3
 800bcbe:	68fb      	ldr	r3, [r7, #12]
 800bcc0:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 800bcc2:	68fb      	ldr	r3, [r7, #12]
 800bcc4:	2200      	movs	r2, #0
 800bcc6:	639a      	str	r2, [r3, #56]	@ 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 800bcc8:	68fb      	ldr	r3, [r7, #12]
 800bcca:	681a      	ldr	r2, [r3, #0]
 800bccc:	68fb      	ldr	r3, [r7, #12]
 800bcce:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800bcd0:	68fb      	ldr	r3, [r7, #12]
 800bcd2:	681a      	ldr	r2, [r3, #0]
 800bcd4:	68fb      	ldr	r3, [r7, #12]
 800bcd6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800bcd8:	3b01      	subs	r3, #1
 800bcda:	68f9      	ldr	r1, [r7, #12]
 800bcdc:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 800bcde:	fb01 f303 	mul.w	r3, r1, r3
 800bce2:	441a      	add	r2, r3
 800bce4:	68fb      	ldr	r3, [r7, #12]
 800bce6:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 800bce8:	68fb      	ldr	r3, [r7, #12]
 800bcea:	22ff      	movs	r2, #255	@ 0xff
 800bcec:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 800bcf0:	68fb      	ldr	r3, [r7, #12]
 800bcf2:	22ff      	movs	r2, #255	@ 0xff
 800bcf4:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

		if( xNewQueue == pdFALSE )
 800bcf8:	683b      	ldr	r3, [r7, #0]
 800bcfa:	2b00      	cmp	r3, #0
 800bcfc:	d114      	bne.n	800bd28 <xQueueGenericReset+0xac>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800bcfe:	68fb      	ldr	r3, [r7, #12]
 800bd00:	691b      	ldr	r3, [r3, #16]
 800bd02:	2b00      	cmp	r3, #0
 800bd04:	d01a      	beq.n	800bd3c <xQueueGenericReset+0xc0>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800bd06:	68fb      	ldr	r3, [r7, #12]
 800bd08:	3310      	adds	r3, #16
 800bd0a:	4618      	mov	r0, r3
 800bd0c:	f001 fc74 	bl	800d5f8 <xTaskRemoveFromEventList>
 800bd10:	4603      	mov	r3, r0
 800bd12:	2b00      	cmp	r3, #0
 800bd14:	d012      	beq.n	800bd3c <xQueueGenericReset+0xc0>
				{
					queueYIELD_IF_USING_PREEMPTION();
 800bd16:	4b0d      	ldr	r3, [pc, #52]	@ (800bd4c <xQueueGenericReset+0xd0>)
 800bd18:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800bd1c:	601a      	str	r2, [r3, #0]
 800bd1e:	f3bf 8f4f 	dsb	sy
 800bd22:	f3bf 8f6f 	isb	sy
 800bd26:	e009      	b.n	800bd3c <xQueueGenericReset+0xc0>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 800bd28:	68fb      	ldr	r3, [r7, #12]
 800bd2a:	3310      	adds	r3, #16
 800bd2c:	4618      	mov	r0, r3
 800bd2e:	f7ff fc9d 	bl	800b66c <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 800bd32:	68fb      	ldr	r3, [r7, #12]
 800bd34:	3324      	adds	r3, #36	@ 0x24
 800bd36:	4618      	mov	r0, r3
 800bd38:	f7ff fc98 	bl	800b66c <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 800bd3c:	f7ff feae 	bl	800ba9c <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 800bd40:	2301      	movs	r3, #1
}
 800bd42:	4618      	mov	r0, r3
 800bd44:	3710      	adds	r7, #16
 800bd46:	46bd      	mov	sp, r7
 800bd48:	bd80      	pop	{r7, pc}
 800bd4a:	bf00      	nop
 800bd4c:	e000ed04 	.word	0xe000ed04

0800bd50 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 800bd50:	b580      	push	{r7, lr}
 800bd52:	b08e      	sub	sp, #56	@ 0x38
 800bd54:	af02      	add	r7, sp, #8
 800bd56:	60f8      	str	r0, [r7, #12]
 800bd58:	60b9      	str	r1, [r7, #8]
 800bd5a:	607a      	str	r2, [r7, #4]
 800bd5c:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800bd5e:	68fb      	ldr	r3, [r7, #12]
 800bd60:	2b00      	cmp	r3, #0
 800bd62:	d10b      	bne.n	800bd7c <xQueueGenericCreateStatic+0x2c>
	__asm volatile
 800bd64:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800bd68:	f383 8811 	msr	BASEPRI, r3
 800bd6c:	f3bf 8f6f 	isb	sy
 800bd70:	f3bf 8f4f 	dsb	sy
 800bd74:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 800bd76:	bf00      	nop
 800bd78:	bf00      	nop
 800bd7a:	e7fd      	b.n	800bd78 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 800bd7c:	683b      	ldr	r3, [r7, #0]
 800bd7e:	2b00      	cmp	r3, #0
 800bd80:	d10b      	bne.n	800bd9a <xQueueGenericCreateStatic+0x4a>
	__asm volatile
 800bd82:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800bd86:	f383 8811 	msr	BASEPRI, r3
 800bd8a:	f3bf 8f6f 	isb	sy
 800bd8e:	f3bf 8f4f 	dsb	sy
 800bd92:	627b      	str	r3, [r7, #36]	@ 0x24
}
 800bd94:	bf00      	nop
 800bd96:	bf00      	nop
 800bd98:	e7fd      	b.n	800bd96 <xQueueGenericCreateStatic+0x46>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 800bd9a:	687b      	ldr	r3, [r7, #4]
 800bd9c:	2b00      	cmp	r3, #0
 800bd9e:	d002      	beq.n	800bda6 <xQueueGenericCreateStatic+0x56>
 800bda0:	68bb      	ldr	r3, [r7, #8]
 800bda2:	2b00      	cmp	r3, #0
 800bda4:	d001      	beq.n	800bdaa <xQueueGenericCreateStatic+0x5a>
 800bda6:	2301      	movs	r3, #1
 800bda8:	e000      	b.n	800bdac <xQueueGenericCreateStatic+0x5c>
 800bdaa:	2300      	movs	r3, #0
 800bdac:	2b00      	cmp	r3, #0
 800bdae:	d10b      	bne.n	800bdc8 <xQueueGenericCreateStatic+0x78>
	__asm volatile
 800bdb0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800bdb4:	f383 8811 	msr	BASEPRI, r3
 800bdb8:	f3bf 8f6f 	isb	sy
 800bdbc:	f3bf 8f4f 	dsb	sy
 800bdc0:	623b      	str	r3, [r7, #32]
}
 800bdc2:	bf00      	nop
 800bdc4:	bf00      	nop
 800bdc6:	e7fd      	b.n	800bdc4 <xQueueGenericCreateStatic+0x74>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 800bdc8:	687b      	ldr	r3, [r7, #4]
 800bdca:	2b00      	cmp	r3, #0
 800bdcc:	d102      	bne.n	800bdd4 <xQueueGenericCreateStatic+0x84>
 800bdce:	68bb      	ldr	r3, [r7, #8]
 800bdd0:	2b00      	cmp	r3, #0
 800bdd2:	d101      	bne.n	800bdd8 <xQueueGenericCreateStatic+0x88>
 800bdd4:	2301      	movs	r3, #1
 800bdd6:	e000      	b.n	800bdda <xQueueGenericCreateStatic+0x8a>
 800bdd8:	2300      	movs	r3, #0
 800bdda:	2b00      	cmp	r3, #0
 800bddc:	d10b      	bne.n	800bdf6 <xQueueGenericCreateStatic+0xa6>
	__asm volatile
 800bdde:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800bde2:	f383 8811 	msr	BASEPRI, r3
 800bde6:	f3bf 8f6f 	isb	sy
 800bdea:	f3bf 8f4f 	dsb	sy
 800bdee:	61fb      	str	r3, [r7, #28]
}
 800bdf0:	bf00      	nop
 800bdf2:	bf00      	nop
 800bdf4:	e7fd      	b.n	800bdf2 <xQueueGenericCreateStatic+0xa2>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 800bdf6:	2350      	movs	r3, #80	@ 0x50
 800bdf8:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 800bdfa:	697b      	ldr	r3, [r7, #20]
 800bdfc:	2b50      	cmp	r3, #80	@ 0x50
 800bdfe:	d00b      	beq.n	800be18 <xQueueGenericCreateStatic+0xc8>
	__asm volatile
 800be00:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800be04:	f383 8811 	msr	BASEPRI, r3
 800be08:	f3bf 8f6f 	isb	sy
 800be0c:	f3bf 8f4f 	dsb	sy
 800be10:	61bb      	str	r3, [r7, #24]
}
 800be12:	bf00      	nop
 800be14:	bf00      	nop
 800be16:	e7fd      	b.n	800be14 <xQueueGenericCreateStatic+0xc4>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 800be18:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800be1a:	683b      	ldr	r3, [r7, #0]
 800be1c:	62fb      	str	r3, [r7, #44]	@ 0x2c

		if( pxNewQueue != NULL )
 800be1e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800be20:	2b00      	cmp	r3, #0
 800be22:	d00d      	beq.n	800be40 <xQueueGenericCreateStatic+0xf0>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 800be24:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800be26:	2201      	movs	r2, #1
 800be28:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800be2c:	f897 2038 	ldrb.w	r2, [r7, #56]	@ 0x38
 800be30:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800be32:	9300      	str	r3, [sp, #0]
 800be34:	4613      	mov	r3, r2
 800be36:	687a      	ldr	r2, [r7, #4]
 800be38:	68b9      	ldr	r1, [r7, #8]
 800be3a:	68f8      	ldr	r0, [r7, #12]
 800be3c:	f000 f840 	bl	800bec0 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800be40:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
	}
 800be42:	4618      	mov	r0, r3
 800be44:	3730      	adds	r7, #48	@ 0x30
 800be46:	46bd      	mov	sp, r7
 800be48:	bd80      	pop	{r7, pc}

0800be4a <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 800be4a:	b580      	push	{r7, lr}
 800be4c:	b08a      	sub	sp, #40	@ 0x28
 800be4e:	af02      	add	r7, sp, #8
 800be50:	60f8      	str	r0, [r7, #12]
 800be52:	60b9      	str	r1, [r7, #8]
 800be54:	4613      	mov	r3, r2
 800be56:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800be58:	68fb      	ldr	r3, [r7, #12]
 800be5a:	2b00      	cmp	r3, #0
 800be5c:	d10b      	bne.n	800be76 <xQueueGenericCreate+0x2c>
	__asm volatile
 800be5e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800be62:	f383 8811 	msr	BASEPRI, r3
 800be66:	f3bf 8f6f 	isb	sy
 800be6a:	f3bf 8f4f 	dsb	sy
 800be6e:	613b      	str	r3, [r7, #16]
}
 800be70:	bf00      	nop
 800be72:	bf00      	nop
 800be74:	e7fd      	b.n	800be72 <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800be76:	68fb      	ldr	r3, [r7, #12]
 800be78:	68ba      	ldr	r2, [r7, #8]
 800be7a:	fb02 f303 	mul.w	r3, r2, r3
 800be7e:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 800be80:	69fb      	ldr	r3, [r7, #28]
 800be82:	3350      	adds	r3, #80	@ 0x50
 800be84:	4618      	mov	r0, r3
 800be86:	f7ff fa03 	bl	800b290 <pvPortMalloc>
 800be8a:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 800be8c:	69bb      	ldr	r3, [r7, #24]
 800be8e:	2b00      	cmp	r3, #0
 800be90:	d011      	beq.n	800beb6 <xQueueGenericCreate+0x6c>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 800be92:	69bb      	ldr	r3, [r7, #24]
 800be94:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800be96:	697b      	ldr	r3, [r7, #20]
 800be98:	3350      	adds	r3, #80	@ 0x50
 800be9a:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 800be9c:	69bb      	ldr	r3, [r7, #24]
 800be9e:	2200      	movs	r2, #0
 800bea0:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800bea4:	79fa      	ldrb	r2, [r7, #7]
 800bea6:	69bb      	ldr	r3, [r7, #24]
 800bea8:	9300      	str	r3, [sp, #0]
 800beaa:	4613      	mov	r3, r2
 800beac:	697a      	ldr	r2, [r7, #20]
 800beae:	68b9      	ldr	r1, [r7, #8]
 800beb0:	68f8      	ldr	r0, [r7, #12]
 800beb2:	f000 f805 	bl	800bec0 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800beb6:	69bb      	ldr	r3, [r7, #24]
	}
 800beb8:	4618      	mov	r0, r3
 800beba:	3720      	adds	r7, #32
 800bebc:	46bd      	mov	sp, r7
 800bebe:	bd80      	pop	{r7, pc}

0800bec0 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 800bec0:	b580      	push	{r7, lr}
 800bec2:	b084      	sub	sp, #16
 800bec4:	af00      	add	r7, sp, #0
 800bec6:	60f8      	str	r0, [r7, #12]
 800bec8:	60b9      	str	r1, [r7, #8]
 800beca:	607a      	str	r2, [r7, #4]
 800becc:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 800bece:	68bb      	ldr	r3, [r7, #8]
 800bed0:	2b00      	cmp	r3, #0
 800bed2:	d103      	bne.n	800bedc <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 800bed4:	69bb      	ldr	r3, [r7, #24]
 800bed6:	69ba      	ldr	r2, [r7, #24]
 800bed8:	601a      	str	r2, [r3, #0]
 800beda:	e002      	b.n	800bee2 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 800bedc:	69bb      	ldr	r3, [r7, #24]
 800bede:	687a      	ldr	r2, [r7, #4]
 800bee0:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 800bee2:	69bb      	ldr	r3, [r7, #24]
 800bee4:	68fa      	ldr	r2, [r7, #12]
 800bee6:	63da      	str	r2, [r3, #60]	@ 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 800bee8:	69bb      	ldr	r3, [r7, #24]
 800beea:	68ba      	ldr	r2, [r7, #8]
 800beec:	641a      	str	r2, [r3, #64]	@ 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800beee:	2101      	movs	r1, #1
 800bef0:	69b8      	ldr	r0, [r7, #24]
 800bef2:	f7ff fec3 	bl	800bc7c <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 800bef6:	69bb      	ldr	r3, [r7, #24]
 800bef8:	78fa      	ldrb	r2, [r7, #3]
 800befa:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 800befe:	bf00      	nop
 800bf00:	3710      	adds	r7, #16
 800bf02:	46bd      	mov	sp, r7
 800bf04:	bd80      	pop	{r7, pc}

0800bf06 <xQueueCreateCountingSemaphoreStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateCountingSemaphoreStatic( const UBaseType_t uxMaxCount, const UBaseType_t uxInitialCount, StaticQueue_t *pxStaticQueue )
	{
 800bf06:	b580      	push	{r7, lr}
 800bf08:	b08a      	sub	sp, #40	@ 0x28
 800bf0a:	af02      	add	r7, sp, #8
 800bf0c:	60f8      	str	r0, [r7, #12]
 800bf0e:	60b9      	str	r1, [r7, #8]
 800bf10:	607a      	str	r2, [r7, #4]
	QueueHandle_t xHandle;

		configASSERT( uxMaxCount != 0 );
 800bf12:	68fb      	ldr	r3, [r7, #12]
 800bf14:	2b00      	cmp	r3, #0
 800bf16:	d10b      	bne.n	800bf30 <xQueueCreateCountingSemaphoreStatic+0x2a>
	__asm volatile
 800bf18:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800bf1c:	f383 8811 	msr	BASEPRI, r3
 800bf20:	f3bf 8f6f 	isb	sy
 800bf24:	f3bf 8f4f 	dsb	sy
 800bf28:	61bb      	str	r3, [r7, #24]
}
 800bf2a:	bf00      	nop
 800bf2c:	bf00      	nop
 800bf2e:	e7fd      	b.n	800bf2c <xQueueCreateCountingSemaphoreStatic+0x26>
		configASSERT( uxInitialCount <= uxMaxCount );
 800bf30:	68ba      	ldr	r2, [r7, #8]
 800bf32:	68fb      	ldr	r3, [r7, #12]
 800bf34:	429a      	cmp	r2, r3
 800bf36:	d90b      	bls.n	800bf50 <xQueueCreateCountingSemaphoreStatic+0x4a>
	__asm volatile
 800bf38:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800bf3c:	f383 8811 	msr	BASEPRI, r3
 800bf40:	f3bf 8f6f 	isb	sy
 800bf44:	f3bf 8f4f 	dsb	sy
 800bf48:	617b      	str	r3, [r7, #20]
}
 800bf4a:	bf00      	nop
 800bf4c:	bf00      	nop
 800bf4e:	e7fd      	b.n	800bf4c <xQueueCreateCountingSemaphoreStatic+0x46>

		xHandle = xQueueGenericCreateStatic( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, NULL, pxStaticQueue, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 800bf50:	2302      	movs	r3, #2
 800bf52:	9300      	str	r3, [sp, #0]
 800bf54:	687b      	ldr	r3, [r7, #4]
 800bf56:	2200      	movs	r2, #0
 800bf58:	2100      	movs	r1, #0
 800bf5a:	68f8      	ldr	r0, [r7, #12]
 800bf5c:	f7ff fef8 	bl	800bd50 <xQueueGenericCreateStatic>
 800bf60:	61f8      	str	r0, [r7, #28]

		if( xHandle != NULL )
 800bf62:	69fb      	ldr	r3, [r7, #28]
 800bf64:	2b00      	cmp	r3, #0
 800bf66:	d002      	beq.n	800bf6e <xQueueCreateCountingSemaphoreStatic+0x68>
		{
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 800bf68:	69fb      	ldr	r3, [r7, #28]
 800bf6a:	68ba      	ldr	r2, [r7, #8]
 800bf6c:	639a      	str	r2, [r3, #56]	@ 0x38
		else
		{
			traceCREATE_COUNTING_SEMAPHORE_FAILED();
		}

		return xHandle;
 800bf6e:	69fb      	ldr	r3, [r7, #28]
	}
 800bf70:	4618      	mov	r0, r3
 800bf72:	3720      	adds	r7, #32
 800bf74:	46bd      	mov	sp, r7
 800bf76:	bd80      	pop	{r7, pc}

0800bf78 <xQueueCreateCountingSemaphore>:
/*-----------------------------------------------------------*/

#if( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateCountingSemaphore( const UBaseType_t uxMaxCount, const UBaseType_t uxInitialCount )
	{
 800bf78:	b580      	push	{r7, lr}
 800bf7a:	b086      	sub	sp, #24
 800bf7c:	af00      	add	r7, sp, #0
 800bf7e:	6078      	str	r0, [r7, #4]
 800bf80:	6039      	str	r1, [r7, #0]
	QueueHandle_t xHandle;

		configASSERT( uxMaxCount != 0 );
 800bf82:	687b      	ldr	r3, [r7, #4]
 800bf84:	2b00      	cmp	r3, #0
 800bf86:	d10b      	bne.n	800bfa0 <xQueueCreateCountingSemaphore+0x28>
	__asm volatile
 800bf88:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800bf8c:	f383 8811 	msr	BASEPRI, r3
 800bf90:	f3bf 8f6f 	isb	sy
 800bf94:	f3bf 8f4f 	dsb	sy
 800bf98:	613b      	str	r3, [r7, #16]
}
 800bf9a:	bf00      	nop
 800bf9c:	bf00      	nop
 800bf9e:	e7fd      	b.n	800bf9c <xQueueCreateCountingSemaphore+0x24>
		configASSERT( uxInitialCount <= uxMaxCount );
 800bfa0:	683a      	ldr	r2, [r7, #0]
 800bfa2:	687b      	ldr	r3, [r7, #4]
 800bfa4:	429a      	cmp	r2, r3
 800bfa6:	d90b      	bls.n	800bfc0 <xQueueCreateCountingSemaphore+0x48>
	__asm volatile
 800bfa8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800bfac:	f383 8811 	msr	BASEPRI, r3
 800bfb0:	f3bf 8f6f 	isb	sy
 800bfb4:	f3bf 8f4f 	dsb	sy
 800bfb8:	60fb      	str	r3, [r7, #12]
}
 800bfba:	bf00      	nop
 800bfbc:	bf00      	nop
 800bfbe:	e7fd      	b.n	800bfbc <xQueueCreateCountingSemaphore+0x44>

		xHandle = xQueueGenericCreate( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 800bfc0:	2202      	movs	r2, #2
 800bfc2:	2100      	movs	r1, #0
 800bfc4:	6878      	ldr	r0, [r7, #4]
 800bfc6:	f7ff ff40 	bl	800be4a <xQueueGenericCreate>
 800bfca:	6178      	str	r0, [r7, #20]

		if( xHandle != NULL )
 800bfcc:	697b      	ldr	r3, [r7, #20]
 800bfce:	2b00      	cmp	r3, #0
 800bfd0:	d002      	beq.n	800bfd8 <xQueueCreateCountingSemaphore+0x60>
		{
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 800bfd2:	697b      	ldr	r3, [r7, #20]
 800bfd4:	683a      	ldr	r2, [r7, #0]
 800bfd6:	639a      	str	r2, [r3, #56]	@ 0x38
		else
		{
			traceCREATE_COUNTING_SEMAPHORE_FAILED();
		}

		return xHandle;
 800bfd8:	697b      	ldr	r3, [r7, #20]
	}
 800bfda:	4618      	mov	r0, r3
 800bfdc:	3718      	adds	r7, #24
 800bfde:	46bd      	mov	sp, r7
 800bfe0:	bd80      	pop	{r7, pc}
	...

0800bfe4 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 800bfe4:	b580      	push	{r7, lr}
 800bfe6:	b08e      	sub	sp, #56	@ 0x38
 800bfe8:	af00      	add	r7, sp, #0
 800bfea:	60f8      	str	r0, [r7, #12]
 800bfec:	60b9      	str	r1, [r7, #8]
 800bfee:	607a      	str	r2, [r7, #4]
 800bff0:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 800bff2:	2300      	movs	r3, #0
 800bff4:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800bff6:	68fb      	ldr	r3, [r7, #12]
 800bff8:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 800bffa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800bffc:	2b00      	cmp	r3, #0
 800bffe:	d10b      	bne.n	800c018 <xQueueGenericSend+0x34>
	__asm volatile
 800c000:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c004:	f383 8811 	msr	BASEPRI, r3
 800c008:	f3bf 8f6f 	isb	sy
 800c00c:	f3bf 8f4f 	dsb	sy
 800c010:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 800c012:	bf00      	nop
 800c014:	bf00      	nop
 800c016:	e7fd      	b.n	800c014 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800c018:	68bb      	ldr	r3, [r7, #8]
 800c01a:	2b00      	cmp	r3, #0
 800c01c:	d103      	bne.n	800c026 <xQueueGenericSend+0x42>
 800c01e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c020:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800c022:	2b00      	cmp	r3, #0
 800c024:	d101      	bne.n	800c02a <xQueueGenericSend+0x46>
 800c026:	2301      	movs	r3, #1
 800c028:	e000      	b.n	800c02c <xQueueGenericSend+0x48>
 800c02a:	2300      	movs	r3, #0
 800c02c:	2b00      	cmp	r3, #0
 800c02e:	d10b      	bne.n	800c048 <xQueueGenericSend+0x64>
	__asm volatile
 800c030:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c034:	f383 8811 	msr	BASEPRI, r3
 800c038:	f3bf 8f6f 	isb	sy
 800c03c:	f3bf 8f4f 	dsb	sy
 800c040:	627b      	str	r3, [r7, #36]	@ 0x24
}
 800c042:	bf00      	nop
 800c044:	bf00      	nop
 800c046:	e7fd      	b.n	800c044 <xQueueGenericSend+0x60>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800c048:	683b      	ldr	r3, [r7, #0]
 800c04a:	2b02      	cmp	r3, #2
 800c04c:	d103      	bne.n	800c056 <xQueueGenericSend+0x72>
 800c04e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c050:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800c052:	2b01      	cmp	r3, #1
 800c054:	d101      	bne.n	800c05a <xQueueGenericSend+0x76>
 800c056:	2301      	movs	r3, #1
 800c058:	e000      	b.n	800c05c <xQueueGenericSend+0x78>
 800c05a:	2300      	movs	r3, #0
 800c05c:	2b00      	cmp	r3, #0
 800c05e:	d10b      	bne.n	800c078 <xQueueGenericSend+0x94>
	__asm volatile
 800c060:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c064:	f383 8811 	msr	BASEPRI, r3
 800c068:	f3bf 8f6f 	isb	sy
 800c06c:	f3bf 8f4f 	dsb	sy
 800c070:	623b      	str	r3, [r7, #32]
}
 800c072:	bf00      	nop
 800c074:	bf00      	nop
 800c076:	e7fd      	b.n	800c074 <xQueueGenericSend+0x90>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800c078:	f001 fc84 	bl	800d984 <xTaskGetSchedulerState>
 800c07c:	4603      	mov	r3, r0
 800c07e:	2b00      	cmp	r3, #0
 800c080:	d102      	bne.n	800c088 <xQueueGenericSend+0xa4>
 800c082:	687b      	ldr	r3, [r7, #4]
 800c084:	2b00      	cmp	r3, #0
 800c086:	d101      	bne.n	800c08c <xQueueGenericSend+0xa8>
 800c088:	2301      	movs	r3, #1
 800c08a:	e000      	b.n	800c08e <xQueueGenericSend+0xaa>
 800c08c:	2300      	movs	r3, #0
 800c08e:	2b00      	cmp	r3, #0
 800c090:	d10b      	bne.n	800c0aa <xQueueGenericSend+0xc6>
	__asm volatile
 800c092:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c096:	f383 8811 	msr	BASEPRI, r3
 800c09a:	f3bf 8f6f 	isb	sy
 800c09e:	f3bf 8f4f 	dsb	sy
 800c0a2:	61fb      	str	r3, [r7, #28]
}
 800c0a4:	bf00      	nop
 800c0a6:	bf00      	nop
 800c0a8:	e7fd      	b.n	800c0a6 <xQueueGenericSend+0xc2>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800c0aa:	f7ff fcc5 	bl	800ba38 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800c0ae:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c0b0:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800c0b2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c0b4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800c0b6:	429a      	cmp	r2, r3
 800c0b8:	d302      	bcc.n	800c0c0 <xQueueGenericSend+0xdc>
 800c0ba:	683b      	ldr	r3, [r7, #0]
 800c0bc:	2b02      	cmp	r3, #2
 800c0be:	d129      	bne.n	800c114 <xQueueGenericSend+0x130>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800c0c0:	683a      	ldr	r2, [r7, #0]
 800c0c2:	68b9      	ldr	r1, [r7, #8]
 800c0c4:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800c0c6:	f000 fc6d 	bl	800c9a4 <prvCopyDataToQueue>
 800c0ca:	62f8      	str	r0, [r7, #44]	@ 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800c0cc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c0ce:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800c0d0:	2b00      	cmp	r3, #0
 800c0d2:	d010      	beq.n	800c0f6 <xQueueGenericSend+0x112>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800c0d4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c0d6:	3324      	adds	r3, #36	@ 0x24
 800c0d8:	4618      	mov	r0, r3
 800c0da:	f001 fa8d 	bl	800d5f8 <xTaskRemoveFromEventList>
 800c0de:	4603      	mov	r3, r0
 800c0e0:	2b00      	cmp	r3, #0
 800c0e2:	d013      	beq.n	800c10c <xQueueGenericSend+0x128>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 800c0e4:	4b3f      	ldr	r3, [pc, #252]	@ (800c1e4 <xQueueGenericSend+0x200>)
 800c0e6:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800c0ea:	601a      	str	r2, [r3, #0]
 800c0ec:	f3bf 8f4f 	dsb	sy
 800c0f0:	f3bf 8f6f 	isb	sy
 800c0f4:	e00a      	b.n	800c10c <xQueueGenericSend+0x128>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 800c0f6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c0f8:	2b00      	cmp	r3, #0
 800c0fa:	d007      	beq.n	800c10c <xQueueGenericSend+0x128>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 800c0fc:	4b39      	ldr	r3, [pc, #228]	@ (800c1e4 <xQueueGenericSend+0x200>)
 800c0fe:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800c102:	601a      	str	r2, [r3, #0]
 800c104:	f3bf 8f4f 	dsb	sy
 800c108:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 800c10c:	f7ff fcc6 	bl	800ba9c <vPortExitCritical>
				return pdPASS;
 800c110:	2301      	movs	r3, #1
 800c112:	e063      	b.n	800c1dc <xQueueGenericSend+0x1f8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800c114:	687b      	ldr	r3, [r7, #4]
 800c116:	2b00      	cmp	r3, #0
 800c118:	d103      	bne.n	800c122 <xQueueGenericSend+0x13e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800c11a:	f7ff fcbf 	bl	800ba9c <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 800c11e:	2300      	movs	r3, #0
 800c120:	e05c      	b.n	800c1dc <xQueueGenericSend+0x1f8>
				}
				else if( xEntryTimeSet == pdFALSE )
 800c122:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800c124:	2b00      	cmp	r3, #0
 800c126:	d106      	bne.n	800c136 <xQueueGenericSend+0x152>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800c128:	f107 0314 	add.w	r3, r7, #20
 800c12c:	4618      	mov	r0, r3
 800c12e:	f001 fac7 	bl	800d6c0 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800c132:	2301      	movs	r3, #1
 800c134:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800c136:	f7ff fcb1 	bl	800ba9c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800c13a:	f001 f82f 	bl	800d19c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800c13e:	f7ff fc7b 	bl	800ba38 <vPortEnterCritical>
 800c142:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c144:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800c148:	b25b      	sxtb	r3, r3
 800c14a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c14e:	d103      	bne.n	800c158 <xQueueGenericSend+0x174>
 800c150:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c152:	2200      	movs	r2, #0
 800c154:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800c158:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c15a:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800c15e:	b25b      	sxtb	r3, r3
 800c160:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c164:	d103      	bne.n	800c16e <xQueueGenericSend+0x18a>
 800c166:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c168:	2200      	movs	r2, #0
 800c16a:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800c16e:	f7ff fc95 	bl	800ba9c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800c172:	1d3a      	adds	r2, r7, #4
 800c174:	f107 0314 	add.w	r3, r7, #20
 800c178:	4611      	mov	r1, r2
 800c17a:	4618      	mov	r0, r3
 800c17c:	f001 fab6 	bl	800d6ec <xTaskCheckForTimeOut>
 800c180:	4603      	mov	r3, r0
 800c182:	2b00      	cmp	r3, #0
 800c184:	d124      	bne.n	800c1d0 <xQueueGenericSend+0x1ec>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 800c186:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800c188:	f000 fd04 	bl	800cb94 <prvIsQueueFull>
 800c18c:	4603      	mov	r3, r0
 800c18e:	2b00      	cmp	r3, #0
 800c190:	d018      	beq.n	800c1c4 <xQueueGenericSend+0x1e0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800c192:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c194:	3310      	adds	r3, #16
 800c196:	687a      	ldr	r2, [r7, #4]
 800c198:	4611      	mov	r1, r2
 800c19a:	4618      	mov	r0, r3
 800c19c:	f001 f9da 	bl	800d554 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 800c1a0:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800c1a2:	f000 fc8f 	bl	800cac4 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 800c1a6:	f001 f807 	bl	800d1b8 <xTaskResumeAll>
 800c1aa:	4603      	mov	r3, r0
 800c1ac:	2b00      	cmp	r3, #0
 800c1ae:	f47f af7c 	bne.w	800c0aa <xQueueGenericSend+0xc6>
				{
					portYIELD_WITHIN_API();
 800c1b2:	4b0c      	ldr	r3, [pc, #48]	@ (800c1e4 <xQueueGenericSend+0x200>)
 800c1b4:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800c1b8:	601a      	str	r2, [r3, #0]
 800c1ba:	f3bf 8f4f 	dsb	sy
 800c1be:	f3bf 8f6f 	isb	sy
 800c1c2:	e772      	b.n	800c0aa <xQueueGenericSend+0xc6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 800c1c4:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800c1c6:	f000 fc7d 	bl	800cac4 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800c1ca:	f000 fff5 	bl	800d1b8 <xTaskResumeAll>
 800c1ce:	e76c      	b.n	800c0aa <xQueueGenericSend+0xc6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 800c1d0:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800c1d2:	f000 fc77 	bl	800cac4 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800c1d6:	f000 ffef 	bl	800d1b8 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 800c1da:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 800c1dc:	4618      	mov	r0, r3
 800c1de:	3738      	adds	r7, #56	@ 0x38
 800c1e0:	46bd      	mov	sp, r7
 800c1e2:	bd80      	pop	{r7, pc}
 800c1e4:	e000ed04 	.word	0xe000ed04

0800c1e8 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 800c1e8:	b580      	push	{r7, lr}
 800c1ea:	b090      	sub	sp, #64	@ 0x40
 800c1ec:	af00      	add	r7, sp, #0
 800c1ee:	60f8      	str	r0, [r7, #12]
 800c1f0:	60b9      	str	r1, [r7, #8]
 800c1f2:	607a      	str	r2, [r7, #4]
 800c1f4:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800c1f6:	68fb      	ldr	r3, [r7, #12]
 800c1f8:	63bb      	str	r3, [r7, #56]	@ 0x38

	configASSERT( pxQueue );
 800c1fa:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c1fc:	2b00      	cmp	r3, #0
 800c1fe:	d10b      	bne.n	800c218 <xQueueGenericSendFromISR+0x30>
	__asm volatile
 800c200:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c204:	f383 8811 	msr	BASEPRI, r3
 800c208:	f3bf 8f6f 	isb	sy
 800c20c:	f3bf 8f4f 	dsb	sy
 800c210:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 800c212:	bf00      	nop
 800c214:	bf00      	nop
 800c216:	e7fd      	b.n	800c214 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800c218:	68bb      	ldr	r3, [r7, #8]
 800c21a:	2b00      	cmp	r3, #0
 800c21c:	d103      	bne.n	800c226 <xQueueGenericSendFromISR+0x3e>
 800c21e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c220:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800c222:	2b00      	cmp	r3, #0
 800c224:	d101      	bne.n	800c22a <xQueueGenericSendFromISR+0x42>
 800c226:	2301      	movs	r3, #1
 800c228:	e000      	b.n	800c22c <xQueueGenericSendFromISR+0x44>
 800c22a:	2300      	movs	r3, #0
 800c22c:	2b00      	cmp	r3, #0
 800c22e:	d10b      	bne.n	800c248 <xQueueGenericSendFromISR+0x60>
	__asm volatile
 800c230:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c234:	f383 8811 	msr	BASEPRI, r3
 800c238:	f3bf 8f6f 	isb	sy
 800c23c:	f3bf 8f4f 	dsb	sy
 800c240:	627b      	str	r3, [r7, #36]	@ 0x24
}
 800c242:	bf00      	nop
 800c244:	bf00      	nop
 800c246:	e7fd      	b.n	800c244 <xQueueGenericSendFromISR+0x5c>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800c248:	683b      	ldr	r3, [r7, #0]
 800c24a:	2b02      	cmp	r3, #2
 800c24c:	d103      	bne.n	800c256 <xQueueGenericSendFromISR+0x6e>
 800c24e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c250:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800c252:	2b01      	cmp	r3, #1
 800c254:	d101      	bne.n	800c25a <xQueueGenericSendFromISR+0x72>
 800c256:	2301      	movs	r3, #1
 800c258:	e000      	b.n	800c25c <xQueueGenericSendFromISR+0x74>
 800c25a:	2300      	movs	r3, #0
 800c25c:	2b00      	cmp	r3, #0
 800c25e:	d10b      	bne.n	800c278 <xQueueGenericSendFromISR+0x90>
	__asm volatile
 800c260:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c264:	f383 8811 	msr	BASEPRI, r3
 800c268:	f3bf 8f6f 	isb	sy
 800c26c:	f3bf 8f4f 	dsb	sy
 800c270:	623b      	str	r3, [r7, #32]
}
 800c272:	bf00      	nop
 800c274:	bf00      	nop
 800c276:	e7fd      	b.n	800c274 <xQueueGenericSendFromISR+0x8c>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800c278:	f7ff fcbe 	bl	800bbf8 <vPortValidateInterruptPriority>
	__asm volatile
 800c27c:	f3ef 8211 	mrs	r2, BASEPRI
 800c280:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c284:	f383 8811 	msr	BASEPRI, r3
 800c288:	f3bf 8f6f 	isb	sy
 800c28c:	f3bf 8f4f 	dsb	sy
 800c290:	61fa      	str	r2, [r7, #28]
 800c292:	61bb      	str	r3, [r7, #24]
	return ulOriginalBASEPRI;
 800c294:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800c296:	637b      	str	r3, [r7, #52]	@ 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800c298:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c29a:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800c29c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c29e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800c2a0:	429a      	cmp	r2, r3
 800c2a2:	d302      	bcc.n	800c2aa <xQueueGenericSendFromISR+0xc2>
 800c2a4:	683b      	ldr	r3, [r7, #0]
 800c2a6:	2b02      	cmp	r3, #2
 800c2a8:	d12f      	bne.n	800c30a <xQueueGenericSendFromISR+0x122>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800c2aa:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c2ac:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800c2b0:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 800c2b4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c2b6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800c2b8:	62fb      	str	r3, [r7, #44]	@ 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800c2ba:	683a      	ldr	r2, [r7, #0]
 800c2bc:	68b9      	ldr	r1, [r7, #8]
 800c2be:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 800c2c0:	f000 fb70 	bl	800c9a4 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800c2c4:	f997 3033 	ldrsb.w	r3, [r7, #51]	@ 0x33
 800c2c8:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c2cc:	d112      	bne.n	800c2f4 <xQueueGenericSendFromISR+0x10c>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800c2ce:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c2d0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800c2d2:	2b00      	cmp	r3, #0
 800c2d4:	d016      	beq.n	800c304 <xQueueGenericSendFromISR+0x11c>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800c2d6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c2d8:	3324      	adds	r3, #36	@ 0x24
 800c2da:	4618      	mov	r0, r3
 800c2dc:	f001 f98c 	bl	800d5f8 <xTaskRemoveFromEventList>
 800c2e0:	4603      	mov	r3, r0
 800c2e2:	2b00      	cmp	r3, #0
 800c2e4:	d00e      	beq.n	800c304 <xQueueGenericSendFromISR+0x11c>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800c2e6:	687b      	ldr	r3, [r7, #4]
 800c2e8:	2b00      	cmp	r3, #0
 800c2ea:	d00b      	beq.n	800c304 <xQueueGenericSendFromISR+0x11c>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800c2ec:	687b      	ldr	r3, [r7, #4]
 800c2ee:	2201      	movs	r2, #1
 800c2f0:	601a      	str	r2, [r3, #0]
 800c2f2:	e007      	b.n	800c304 <xQueueGenericSendFromISR+0x11c>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800c2f4:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 800c2f8:	3301      	adds	r3, #1
 800c2fa:	b2db      	uxtb	r3, r3
 800c2fc:	b25a      	sxtb	r2, r3
 800c2fe:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c300:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
			}

			xReturn = pdPASS;
 800c304:	2301      	movs	r3, #1
 800c306:	63fb      	str	r3, [r7, #60]	@ 0x3c
		{
 800c308:	e001      	b.n	800c30e <xQueueGenericSendFromISR+0x126>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800c30a:	2300      	movs	r3, #0
 800c30c:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800c30e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800c310:	617b      	str	r3, [r7, #20]
	__asm volatile
 800c312:	697b      	ldr	r3, [r7, #20]
 800c314:	f383 8811 	msr	BASEPRI, r3
}
 800c318:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800c31a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
}
 800c31c:	4618      	mov	r0, r3
 800c31e:	3740      	adds	r7, #64	@ 0x40
 800c320:	46bd      	mov	sp, r7
 800c322:	bd80      	pop	{r7, pc}

0800c324 <xQueueGiveFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGiveFromISR( QueueHandle_t xQueue, BaseType_t * const pxHigherPriorityTaskWoken )
{
 800c324:	b580      	push	{r7, lr}
 800c326:	b08e      	sub	sp, #56	@ 0x38
 800c328:	af00      	add	r7, sp, #0
 800c32a:	6078      	str	r0, [r7, #4]
 800c32c:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800c32e:	687b      	ldr	r3, [r7, #4]
 800c330:	633b      	str	r3, [r7, #48]	@ 0x30
	item size is 0.  Don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */

	configASSERT( pxQueue );
 800c332:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c334:	2b00      	cmp	r3, #0
 800c336:	d10b      	bne.n	800c350 <xQueueGiveFromISR+0x2c>
	__asm volatile
 800c338:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c33c:	f383 8811 	msr	BASEPRI, r3
 800c340:	f3bf 8f6f 	isb	sy
 800c344:	f3bf 8f4f 	dsb	sy
 800c348:	623b      	str	r3, [r7, #32]
}
 800c34a:	bf00      	nop
 800c34c:	bf00      	nop
 800c34e:	e7fd      	b.n	800c34c <xQueueGiveFromISR+0x28>

	/* xQueueGenericSendFromISR() should be used instead of xQueueGiveFromISR()
	if the item size is not 0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 800c350:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c352:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800c354:	2b00      	cmp	r3, #0
 800c356:	d00b      	beq.n	800c370 <xQueueGiveFromISR+0x4c>
	__asm volatile
 800c358:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c35c:	f383 8811 	msr	BASEPRI, r3
 800c360:	f3bf 8f6f 	isb	sy
 800c364:	f3bf 8f4f 	dsb	sy
 800c368:	61fb      	str	r3, [r7, #28]
}
 800c36a:	bf00      	nop
 800c36c:	bf00      	nop
 800c36e:	e7fd      	b.n	800c36c <xQueueGiveFromISR+0x48>

	/* Normally a mutex would not be given from an interrupt, especially if
	there is a mutex holder, as priority inheritance makes no sense for an
	interrupts, only tasks. */
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->u.xSemaphore.xMutexHolder != NULL ) ) );
 800c370:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c372:	681b      	ldr	r3, [r3, #0]
 800c374:	2b00      	cmp	r3, #0
 800c376:	d103      	bne.n	800c380 <xQueueGiveFromISR+0x5c>
 800c378:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c37a:	689b      	ldr	r3, [r3, #8]
 800c37c:	2b00      	cmp	r3, #0
 800c37e:	d101      	bne.n	800c384 <xQueueGiveFromISR+0x60>
 800c380:	2301      	movs	r3, #1
 800c382:	e000      	b.n	800c386 <xQueueGiveFromISR+0x62>
 800c384:	2300      	movs	r3, #0
 800c386:	2b00      	cmp	r3, #0
 800c388:	d10b      	bne.n	800c3a2 <xQueueGiveFromISR+0x7e>
	__asm volatile
 800c38a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c38e:	f383 8811 	msr	BASEPRI, r3
 800c392:	f3bf 8f6f 	isb	sy
 800c396:	f3bf 8f4f 	dsb	sy
 800c39a:	61bb      	str	r3, [r7, #24]
}
 800c39c:	bf00      	nop
 800c39e:	bf00      	nop
 800c3a0:	e7fd      	b.n	800c39e <xQueueGiveFromISR+0x7a>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800c3a2:	f7ff fc29 	bl	800bbf8 <vPortValidateInterruptPriority>
	__asm volatile
 800c3a6:	f3ef 8211 	mrs	r2, BASEPRI
 800c3aa:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c3ae:	f383 8811 	msr	BASEPRI, r3
 800c3b2:	f3bf 8f6f 	isb	sy
 800c3b6:	f3bf 8f4f 	dsb	sy
 800c3ba:	617a      	str	r2, [r7, #20]
 800c3bc:	613b      	str	r3, [r7, #16]
	return ulOriginalBASEPRI;
 800c3be:	697b      	ldr	r3, [r7, #20]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800c3c0:	62fb      	str	r3, [r7, #44]	@ 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800c3c2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c3c4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800c3c6:	62bb      	str	r3, [r7, #40]	@ 0x28

		/* When the queue is used to implement a semaphore no data is ever
		moved through the queue but it is still valid to see if the queue 'has
		space'. */
		if( uxMessagesWaiting < pxQueue->uxLength )
 800c3c8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c3ca:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800c3cc:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800c3ce:	429a      	cmp	r2, r3
 800c3d0:	d22b      	bcs.n	800c42a <xQueueGiveFromISR+0x106>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800c3d2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c3d4:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800c3d8:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
			holder - and if there is a mutex holder then the mutex cannot be
			given from an ISR.  As this is the ISR version of the function it
			can be assumed there is no mutex holder and no need to determine if
			priority disinheritance is needed.  Simply increase the count of
			messages (semaphores) available. */
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800c3dc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c3de:	1c5a      	adds	r2, r3, #1
 800c3e0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c3e2:	639a      	str	r2, [r3, #56]	@ 0x38

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800c3e4:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 800c3e8:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c3ec:	d112      	bne.n	800c414 <xQueueGiveFromISR+0xf0>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800c3ee:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c3f0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800c3f2:	2b00      	cmp	r3, #0
 800c3f4:	d016      	beq.n	800c424 <xQueueGiveFromISR+0x100>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800c3f6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c3f8:	3324      	adds	r3, #36	@ 0x24
 800c3fa:	4618      	mov	r0, r3
 800c3fc:	f001 f8fc 	bl	800d5f8 <xTaskRemoveFromEventList>
 800c400:	4603      	mov	r3, r0
 800c402:	2b00      	cmp	r3, #0
 800c404:	d00e      	beq.n	800c424 <xQueueGiveFromISR+0x100>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800c406:	683b      	ldr	r3, [r7, #0]
 800c408:	2b00      	cmp	r3, #0
 800c40a:	d00b      	beq.n	800c424 <xQueueGiveFromISR+0x100>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800c40c:	683b      	ldr	r3, [r7, #0]
 800c40e:	2201      	movs	r2, #1
 800c410:	601a      	str	r2, [r3, #0]
 800c412:	e007      	b.n	800c424 <xQueueGiveFromISR+0x100>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800c414:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800c418:	3301      	adds	r3, #1
 800c41a:	b2db      	uxtb	r3, r3
 800c41c:	b25a      	sxtb	r2, r3
 800c41e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c420:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
			}

			xReturn = pdPASS;
 800c424:	2301      	movs	r3, #1
 800c426:	637b      	str	r3, [r7, #52]	@ 0x34
 800c428:	e001      	b.n	800c42e <xQueueGiveFromISR+0x10a>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800c42a:	2300      	movs	r3, #0
 800c42c:	637b      	str	r3, [r7, #52]	@ 0x34
 800c42e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c430:	60fb      	str	r3, [r7, #12]
	__asm volatile
 800c432:	68fb      	ldr	r3, [r7, #12]
 800c434:	f383 8811 	msr	BASEPRI, r3
}
 800c438:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800c43a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
}
 800c43c:	4618      	mov	r0, r3
 800c43e:	3738      	adds	r7, #56	@ 0x38
 800c440:	46bd      	mov	sp, r7
 800c442:	bd80      	pop	{r7, pc}

0800c444 <xQueueReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 800c444:	b580      	push	{r7, lr}
 800c446:	b08c      	sub	sp, #48	@ 0x30
 800c448:	af00      	add	r7, sp, #0
 800c44a:	60f8      	str	r0, [r7, #12]
 800c44c:	60b9      	str	r1, [r7, #8]
 800c44e:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 800c450:	2300      	movs	r3, #0
 800c452:	62fb      	str	r3, [r7, #44]	@ 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800c454:	68fb      	ldr	r3, [r7, #12]
 800c456:	62bb      	str	r3, [r7, #40]	@ 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800c458:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c45a:	2b00      	cmp	r3, #0
 800c45c:	d10b      	bne.n	800c476 <xQueueReceive+0x32>
	__asm volatile
 800c45e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c462:	f383 8811 	msr	BASEPRI, r3
 800c466:	f3bf 8f6f 	isb	sy
 800c46a:	f3bf 8f4f 	dsb	sy
 800c46e:	623b      	str	r3, [r7, #32]
}
 800c470:	bf00      	nop
 800c472:	bf00      	nop
 800c474:	e7fd      	b.n	800c472 <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800c476:	68bb      	ldr	r3, [r7, #8]
 800c478:	2b00      	cmp	r3, #0
 800c47a:	d103      	bne.n	800c484 <xQueueReceive+0x40>
 800c47c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c47e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800c480:	2b00      	cmp	r3, #0
 800c482:	d101      	bne.n	800c488 <xQueueReceive+0x44>
 800c484:	2301      	movs	r3, #1
 800c486:	e000      	b.n	800c48a <xQueueReceive+0x46>
 800c488:	2300      	movs	r3, #0
 800c48a:	2b00      	cmp	r3, #0
 800c48c:	d10b      	bne.n	800c4a6 <xQueueReceive+0x62>
	__asm volatile
 800c48e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c492:	f383 8811 	msr	BASEPRI, r3
 800c496:	f3bf 8f6f 	isb	sy
 800c49a:	f3bf 8f4f 	dsb	sy
 800c49e:	61fb      	str	r3, [r7, #28]
}
 800c4a0:	bf00      	nop
 800c4a2:	bf00      	nop
 800c4a4:	e7fd      	b.n	800c4a2 <xQueueReceive+0x5e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800c4a6:	f001 fa6d 	bl	800d984 <xTaskGetSchedulerState>
 800c4aa:	4603      	mov	r3, r0
 800c4ac:	2b00      	cmp	r3, #0
 800c4ae:	d102      	bne.n	800c4b6 <xQueueReceive+0x72>
 800c4b0:	687b      	ldr	r3, [r7, #4]
 800c4b2:	2b00      	cmp	r3, #0
 800c4b4:	d101      	bne.n	800c4ba <xQueueReceive+0x76>
 800c4b6:	2301      	movs	r3, #1
 800c4b8:	e000      	b.n	800c4bc <xQueueReceive+0x78>
 800c4ba:	2300      	movs	r3, #0
 800c4bc:	2b00      	cmp	r3, #0
 800c4be:	d10b      	bne.n	800c4d8 <xQueueReceive+0x94>
	__asm volatile
 800c4c0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c4c4:	f383 8811 	msr	BASEPRI, r3
 800c4c8:	f3bf 8f6f 	isb	sy
 800c4cc:	f3bf 8f4f 	dsb	sy
 800c4d0:	61bb      	str	r3, [r7, #24]
}
 800c4d2:	bf00      	nop
 800c4d4:	bf00      	nop
 800c4d6:	e7fd      	b.n	800c4d4 <xQueueReceive+0x90>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800c4d8:	f7ff faae 	bl	800ba38 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800c4dc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c4de:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800c4e0:	627b      	str	r3, [r7, #36]	@ 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800c4e2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c4e4:	2b00      	cmp	r3, #0
 800c4e6:	d01f      	beq.n	800c528 <xQueueReceive+0xe4>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 800c4e8:	68b9      	ldr	r1, [r7, #8]
 800c4ea:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800c4ec:	f000 fac4 	bl	800ca78 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800c4f0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c4f2:	1e5a      	subs	r2, r3, #1
 800c4f4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c4f6:	639a      	str	r2, [r3, #56]	@ 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800c4f8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c4fa:	691b      	ldr	r3, [r3, #16]
 800c4fc:	2b00      	cmp	r3, #0
 800c4fe:	d00f      	beq.n	800c520 <xQueueReceive+0xdc>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800c500:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c502:	3310      	adds	r3, #16
 800c504:	4618      	mov	r0, r3
 800c506:	f001 f877 	bl	800d5f8 <xTaskRemoveFromEventList>
 800c50a:	4603      	mov	r3, r0
 800c50c:	2b00      	cmp	r3, #0
 800c50e:	d007      	beq.n	800c520 <xQueueReceive+0xdc>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800c510:	4b3c      	ldr	r3, [pc, #240]	@ (800c604 <xQueueReceive+0x1c0>)
 800c512:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800c516:	601a      	str	r2, [r3, #0]
 800c518:	f3bf 8f4f 	dsb	sy
 800c51c:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800c520:	f7ff fabc 	bl	800ba9c <vPortExitCritical>
				return pdPASS;
 800c524:	2301      	movs	r3, #1
 800c526:	e069      	b.n	800c5fc <xQueueReceive+0x1b8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800c528:	687b      	ldr	r3, [r7, #4]
 800c52a:	2b00      	cmp	r3, #0
 800c52c:	d103      	bne.n	800c536 <xQueueReceive+0xf2>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800c52e:	f7ff fab5 	bl	800ba9c <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800c532:	2300      	movs	r3, #0
 800c534:	e062      	b.n	800c5fc <xQueueReceive+0x1b8>
				}
				else if( xEntryTimeSet == pdFALSE )
 800c536:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c538:	2b00      	cmp	r3, #0
 800c53a:	d106      	bne.n	800c54a <xQueueReceive+0x106>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800c53c:	f107 0310 	add.w	r3, r7, #16
 800c540:	4618      	mov	r0, r3
 800c542:	f001 f8bd 	bl	800d6c0 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800c546:	2301      	movs	r3, #1
 800c548:	62fb      	str	r3, [r7, #44]	@ 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800c54a:	f7ff faa7 	bl	800ba9c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800c54e:	f000 fe25 	bl	800d19c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800c552:	f7ff fa71 	bl	800ba38 <vPortEnterCritical>
 800c556:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c558:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800c55c:	b25b      	sxtb	r3, r3
 800c55e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c562:	d103      	bne.n	800c56c <xQueueReceive+0x128>
 800c564:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c566:	2200      	movs	r2, #0
 800c568:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800c56c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c56e:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800c572:	b25b      	sxtb	r3, r3
 800c574:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c578:	d103      	bne.n	800c582 <xQueueReceive+0x13e>
 800c57a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c57c:	2200      	movs	r2, #0
 800c57e:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800c582:	f7ff fa8b 	bl	800ba9c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800c586:	1d3a      	adds	r2, r7, #4
 800c588:	f107 0310 	add.w	r3, r7, #16
 800c58c:	4611      	mov	r1, r2
 800c58e:	4618      	mov	r0, r3
 800c590:	f001 f8ac 	bl	800d6ec <xTaskCheckForTimeOut>
 800c594:	4603      	mov	r3, r0
 800c596:	2b00      	cmp	r3, #0
 800c598:	d123      	bne.n	800c5e2 <xQueueReceive+0x19e>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800c59a:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800c59c:	f000 fae4 	bl	800cb68 <prvIsQueueEmpty>
 800c5a0:	4603      	mov	r3, r0
 800c5a2:	2b00      	cmp	r3, #0
 800c5a4:	d017      	beq.n	800c5d6 <xQueueReceive+0x192>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800c5a6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c5a8:	3324      	adds	r3, #36	@ 0x24
 800c5aa:	687a      	ldr	r2, [r7, #4]
 800c5ac:	4611      	mov	r1, r2
 800c5ae:	4618      	mov	r0, r3
 800c5b0:	f000 ffd0 	bl	800d554 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800c5b4:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800c5b6:	f000 fa85 	bl	800cac4 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800c5ba:	f000 fdfd 	bl	800d1b8 <xTaskResumeAll>
 800c5be:	4603      	mov	r3, r0
 800c5c0:	2b00      	cmp	r3, #0
 800c5c2:	d189      	bne.n	800c4d8 <xQueueReceive+0x94>
				{
					portYIELD_WITHIN_API();
 800c5c4:	4b0f      	ldr	r3, [pc, #60]	@ (800c604 <xQueueReceive+0x1c0>)
 800c5c6:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800c5ca:	601a      	str	r2, [r3, #0]
 800c5cc:	f3bf 8f4f 	dsb	sy
 800c5d0:	f3bf 8f6f 	isb	sy
 800c5d4:	e780      	b.n	800c4d8 <xQueueReceive+0x94>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 800c5d6:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800c5d8:	f000 fa74 	bl	800cac4 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800c5dc:	f000 fdec 	bl	800d1b8 <xTaskResumeAll>
 800c5e0:	e77a      	b.n	800c4d8 <xQueueReceive+0x94>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 800c5e2:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800c5e4:	f000 fa6e 	bl	800cac4 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800c5e8:	f000 fde6 	bl	800d1b8 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800c5ec:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800c5ee:	f000 fabb 	bl	800cb68 <prvIsQueueEmpty>
 800c5f2:	4603      	mov	r3, r0
 800c5f4:	2b00      	cmp	r3, #0
 800c5f6:	f43f af6f 	beq.w	800c4d8 <xQueueReceive+0x94>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800c5fa:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800c5fc:	4618      	mov	r0, r3
 800c5fe:	3730      	adds	r7, #48	@ 0x30
 800c600:	46bd      	mov	sp, r7
 800c602:	bd80      	pop	{r7, pc}
 800c604:	e000ed04 	.word	0xe000ed04

0800c608 <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 800c608:	b580      	push	{r7, lr}
 800c60a:	b08e      	sub	sp, #56	@ 0x38
 800c60c:	af00      	add	r7, sp, #0
 800c60e:	6078      	str	r0, [r7, #4]
 800c610:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 800c612:	2300      	movs	r3, #0
 800c614:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800c616:	687b      	ldr	r3, [r7, #4]
 800c618:	62fb      	str	r3, [r7, #44]	@ 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 800c61a:	2300      	movs	r3, #0
 800c61c:	633b      	str	r3, [r7, #48]	@ 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800c61e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c620:	2b00      	cmp	r3, #0
 800c622:	d10b      	bne.n	800c63c <xQueueSemaphoreTake+0x34>
	__asm volatile
 800c624:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c628:	f383 8811 	msr	BASEPRI, r3
 800c62c:	f3bf 8f6f 	isb	sy
 800c630:	f3bf 8f4f 	dsb	sy
 800c634:	623b      	str	r3, [r7, #32]
}
 800c636:	bf00      	nop
 800c638:	bf00      	nop
 800c63a:	e7fd      	b.n	800c638 <xQueueSemaphoreTake+0x30>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 800c63c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c63e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800c640:	2b00      	cmp	r3, #0
 800c642:	d00b      	beq.n	800c65c <xQueueSemaphoreTake+0x54>
	__asm volatile
 800c644:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c648:	f383 8811 	msr	BASEPRI, r3
 800c64c:	f3bf 8f6f 	isb	sy
 800c650:	f3bf 8f4f 	dsb	sy
 800c654:	61fb      	str	r3, [r7, #28]
}
 800c656:	bf00      	nop
 800c658:	bf00      	nop
 800c65a:	e7fd      	b.n	800c658 <xQueueSemaphoreTake+0x50>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800c65c:	f001 f992 	bl	800d984 <xTaskGetSchedulerState>
 800c660:	4603      	mov	r3, r0
 800c662:	2b00      	cmp	r3, #0
 800c664:	d102      	bne.n	800c66c <xQueueSemaphoreTake+0x64>
 800c666:	683b      	ldr	r3, [r7, #0]
 800c668:	2b00      	cmp	r3, #0
 800c66a:	d101      	bne.n	800c670 <xQueueSemaphoreTake+0x68>
 800c66c:	2301      	movs	r3, #1
 800c66e:	e000      	b.n	800c672 <xQueueSemaphoreTake+0x6a>
 800c670:	2300      	movs	r3, #0
 800c672:	2b00      	cmp	r3, #0
 800c674:	d10b      	bne.n	800c68e <xQueueSemaphoreTake+0x86>
	__asm volatile
 800c676:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c67a:	f383 8811 	msr	BASEPRI, r3
 800c67e:	f3bf 8f6f 	isb	sy
 800c682:	f3bf 8f4f 	dsb	sy
 800c686:	61bb      	str	r3, [r7, #24]
}
 800c688:	bf00      	nop
 800c68a:	bf00      	nop
 800c68c:	e7fd      	b.n	800c68a <xQueueSemaphoreTake+0x82>
	/*lint -save -e904 This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800c68e:	f7ff f9d3 	bl	800ba38 <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 800c692:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c694:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800c696:	62bb      	str	r3, [r7, #40]	@ 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 800c698:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c69a:	2b00      	cmp	r3, #0
 800c69c:	d024      	beq.n	800c6e8 <xQueueSemaphoreTake+0xe0>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 800c69e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c6a0:	1e5a      	subs	r2, r3, #1
 800c6a2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c6a4:	639a      	str	r2, [r3, #56]	@ 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800c6a6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c6a8:	681b      	ldr	r3, [r3, #0]
 800c6aa:	2b00      	cmp	r3, #0
 800c6ac:	d104      	bne.n	800c6b8 <xQueueSemaphoreTake+0xb0>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 800c6ae:	f001 fae3 	bl	800dc78 <pvTaskIncrementMutexHeldCount>
 800c6b2:	4602      	mov	r2, r0
 800c6b4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c6b6:	609a      	str	r2, [r3, #8]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800c6b8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c6ba:	691b      	ldr	r3, [r3, #16]
 800c6bc:	2b00      	cmp	r3, #0
 800c6be:	d00f      	beq.n	800c6e0 <xQueueSemaphoreTake+0xd8>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800c6c0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c6c2:	3310      	adds	r3, #16
 800c6c4:	4618      	mov	r0, r3
 800c6c6:	f000 ff97 	bl	800d5f8 <xTaskRemoveFromEventList>
 800c6ca:	4603      	mov	r3, r0
 800c6cc:	2b00      	cmp	r3, #0
 800c6ce:	d007      	beq.n	800c6e0 <xQueueSemaphoreTake+0xd8>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800c6d0:	4b54      	ldr	r3, [pc, #336]	@ (800c824 <xQueueSemaphoreTake+0x21c>)
 800c6d2:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800c6d6:	601a      	str	r2, [r3, #0]
 800c6d8:	f3bf 8f4f 	dsb	sy
 800c6dc:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800c6e0:	f7ff f9dc 	bl	800ba9c <vPortExitCritical>
				return pdPASS;
 800c6e4:	2301      	movs	r3, #1
 800c6e6:	e098      	b.n	800c81a <xQueueSemaphoreTake+0x212>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800c6e8:	683b      	ldr	r3, [r7, #0]
 800c6ea:	2b00      	cmp	r3, #0
 800c6ec:	d112      	bne.n	800c714 <xQueueSemaphoreTake+0x10c>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 800c6ee:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c6f0:	2b00      	cmp	r3, #0
 800c6f2:	d00b      	beq.n	800c70c <xQueueSemaphoreTake+0x104>
	__asm volatile
 800c6f4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c6f8:	f383 8811 	msr	BASEPRI, r3
 800c6fc:	f3bf 8f6f 	isb	sy
 800c700:	f3bf 8f4f 	dsb	sy
 800c704:	617b      	str	r3, [r7, #20]
}
 800c706:	bf00      	nop
 800c708:	bf00      	nop
 800c70a:	e7fd      	b.n	800c708 <xQueueSemaphoreTake+0x100>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 800c70c:	f7ff f9c6 	bl	800ba9c <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800c710:	2300      	movs	r3, #0
 800c712:	e082      	b.n	800c81a <xQueueSemaphoreTake+0x212>
				}
				else if( xEntryTimeSet == pdFALSE )
 800c714:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800c716:	2b00      	cmp	r3, #0
 800c718:	d106      	bne.n	800c728 <xQueueSemaphoreTake+0x120>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800c71a:	f107 030c 	add.w	r3, r7, #12
 800c71e:	4618      	mov	r0, r3
 800c720:	f000 ffce 	bl	800d6c0 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800c724:	2301      	movs	r3, #1
 800c726:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800c728:	f7ff f9b8 	bl	800ba9c <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 800c72c:	f000 fd36 	bl	800d19c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800c730:	f7ff f982 	bl	800ba38 <vPortEnterCritical>
 800c734:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c736:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800c73a:	b25b      	sxtb	r3, r3
 800c73c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c740:	d103      	bne.n	800c74a <xQueueSemaphoreTake+0x142>
 800c742:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c744:	2200      	movs	r2, #0
 800c746:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800c74a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c74c:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800c750:	b25b      	sxtb	r3, r3
 800c752:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c756:	d103      	bne.n	800c760 <xQueueSemaphoreTake+0x158>
 800c758:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c75a:	2200      	movs	r2, #0
 800c75c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800c760:	f7ff f99c 	bl	800ba9c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800c764:	463a      	mov	r2, r7
 800c766:	f107 030c 	add.w	r3, r7, #12
 800c76a:	4611      	mov	r1, r2
 800c76c:	4618      	mov	r0, r3
 800c76e:	f000 ffbd 	bl	800d6ec <xTaskCheckForTimeOut>
 800c772:	4603      	mov	r3, r0
 800c774:	2b00      	cmp	r3, #0
 800c776:	d132      	bne.n	800c7de <xQueueSemaphoreTake+0x1d6>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800c778:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800c77a:	f000 f9f5 	bl	800cb68 <prvIsQueueEmpty>
 800c77e:	4603      	mov	r3, r0
 800c780:	2b00      	cmp	r3, #0
 800c782:	d026      	beq.n	800c7d2 <xQueueSemaphoreTake+0x1ca>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800c784:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c786:	681b      	ldr	r3, [r3, #0]
 800c788:	2b00      	cmp	r3, #0
 800c78a:	d109      	bne.n	800c7a0 <xQueueSemaphoreTake+0x198>
					{
						taskENTER_CRITICAL();
 800c78c:	f7ff f954 	bl	800ba38 <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 800c790:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c792:	689b      	ldr	r3, [r3, #8]
 800c794:	4618      	mov	r0, r3
 800c796:	f001 f913 	bl	800d9c0 <xTaskPriorityInherit>
 800c79a:	6338      	str	r0, [r7, #48]	@ 0x30
						}
						taskEXIT_CRITICAL();
 800c79c:	f7ff f97e 	bl	800ba9c <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800c7a0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c7a2:	3324      	adds	r3, #36	@ 0x24
 800c7a4:	683a      	ldr	r2, [r7, #0]
 800c7a6:	4611      	mov	r1, r2
 800c7a8:	4618      	mov	r0, r3
 800c7aa:	f000 fed3 	bl	800d554 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800c7ae:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800c7b0:	f000 f988 	bl	800cac4 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800c7b4:	f000 fd00 	bl	800d1b8 <xTaskResumeAll>
 800c7b8:	4603      	mov	r3, r0
 800c7ba:	2b00      	cmp	r3, #0
 800c7bc:	f47f af67 	bne.w	800c68e <xQueueSemaphoreTake+0x86>
				{
					portYIELD_WITHIN_API();
 800c7c0:	4b18      	ldr	r3, [pc, #96]	@ (800c824 <xQueueSemaphoreTake+0x21c>)
 800c7c2:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800c7c6:	601a      	str	r2, [r3, #0]
 800c7c8:	f3bf 8f4f 	dsb	sy
 800c7cc:	f3bf 8f6f 	isb	sy
 800c7d0:	e75d      	b.n	800c68e <xQueueSemaphoreTake+0x86>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 800c7d2:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800c7d4:	f000 f976 	bl	800cac4 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800c7d8:	f000 fcee 	bl	800d1b8 <xTaskResumeAll>
 800c7dc:	e757      	b.n	800c68e <xQueueSemaphoreTake+0x86>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 800c7de:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800c7e0:	f000 f970 	bl	800cac4 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800c7e4:	f000 fce8 	bl	800d1b8 <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800c7e8:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800c7ea:	f000 f9bd 	bl	800cb68 <prvIsQueueEmpty>
 800c7ee:	4603      	mov	r3, r0
 800c7f0:	2b00      	cmp	r3, #0
 800c7f2:	f43f af4c 	beq.w	800c68e <xQueueSemaphoreTake+0x86>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 800c7f6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c7f8:	2b00      	cmp	r3, #0
 800c7fa:	d00d      	beq.n	800c818 <xQueueSemaphoreTake+0x210>
					{
						taskENTER_CRITICAL();
 800c7fc:	f7ff f91c 	bl	800ba38 <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 800c800:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800c802:	f000 f8b7 	bl	800c974 <prvGetDisinheritPriorityAfterTimeout>
 800c806:	6278      	str	r0, [r7, #36]	@ 0x24
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 800c808:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c80a:	689b      	ldr	r3, [r3, #8]
 800c80c:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800c80e:	4618      	mov	r0, r3
 800c810:	f001 f9ae 	bl	800db70 <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 800c814:	f7ff f942 	bl	800ba9c <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800c818:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800c81a:	4618      	mov	r0, r3
 800c81c:	3738      	adds	r7, #56	@ 0x38
 800c81e:	46bd      	mov	sp, r7
 800c820:	bd80      	pop	{r7, pc}
 800c822:	bf00      	nop
 800c824:	e000ed04 	.word	0xe000ed04

0800c828 <xQueueReceiveFromISR>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 800c828:	b580      	push	{r7, lr}
 800c82a:	b08e      	sub	sp, #56	@ 0x38
 800c82c:	af00      	add	r7, sp, #0
 800c82e:	60f8      	str	r0, [r7, #12]
 800c830:	60b9      	str	r1, [r7, #8]
 800c832:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800c834:	68fb      	ldr	r3, [r7, #12]
 800c836:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 800c838:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c83a:	2b00      	cmp	r3, #0
 800c83c:	d10b      	bne.n	800c856 <xQueueReceiveFromISR+0x2e>
	__asm volatile
 800c83e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c842:	f383 8811 	msr	BASEPRI, r3
 800c846:	f3bf 8f6f 	isb	sy
 800c84a:	f3bf 8f4f 	dsb	sy
 800c84e:	623b      	str	r3, [r7, #32]
}
 800c850:	bf00      	nop
 800c852:	bf00      	nop
 800c854:	e7fd      	b.n	800c852 <xQueueReceiveFromISR+0x2a>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800c856:	68bb      	ldr	r3, [r7, #8]
 800c858:	2b00      	cmp	r3, #0
 800c85a:	d103      	bne.n	800c864 <xQueueReceiveFromISR+0x3c>
 800c85c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c85e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800c860:	2b00      	cmp	r3, #0
 800c862:	d101      	bne.n	800c868 <xQueueReceiveFromISR+0x40>
 800c864:	2301      	movs	r3, #1
 800c866:	e000      	b.n	800c86a <xQueueReceiveFromISR+0x42>
 800c868:	2300      	movs	r3, #0
 800c86a:	2b00      	cmp	r3, #0
 800c86c:	d10b      	bne.n	800c886 <xQueueReceiveFromISR+0x5e>
	__asm volatile
 800c86e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c872:	f383 8811 	msr	BASEPRI, r3
 800c876:	f3bf 8f6f 	isb	sy
 800c87a:	f3bf 8f4f 	dsb	sy
 800c87e:	61fb      	str	r3, [r7, #28]
}
 800c880:	bf00      	nop
 800c882:	bf00      	nop
 800c884:	e7fd      	b.n	800c882 <xQueueReceiveFromISR+0x5a>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800c886:	f7ff f9b7 	bl	800bbf8 <vPortValidateInterruptPriority>
	__asm volatile
 800c88a:	f3ef 8211 	mrs	r2, BASEPRI
 800c88e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c892:	f383 8811 	msr	BASEPRI, r3
 800c896:	f3bf 8f6f 	isb	sy
 800c89a:	f3bf 8f4f 	dsb	sy
 800c89e:	61ba      	str	r2, [r7, #24]
 800c8a0:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 800c8a2:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800c8a4:	62fb      	str	r3, [r7, #44]	@ 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800c8a6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c8a8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800c8aa:	62bb      	str	r3, [r7, #40]	@ 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800c8ac:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c8ae:	2b00      	cmp	r3, #0
 800c8b0:	d02f      	beq.n	800c912 <xQueueReceiveFromISR+0xea>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 800c8b2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c8b4:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800c8b8:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 800c8bc:	68b9      	ldr	r1, [r7, #8]
 800c8be:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800c8c0:	f000 f8da 	bl	800ca78 <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800c8c4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c8c6:	1e5a      	subs	r2, r3, #1
 800c8c8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c8ca:	639a      	str	r2, [r3, #56]	@ 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 800c8cc:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 800c8d0:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c8d4:	d112      	bne.n	800c8fc <xQueueReceiveFromISR+0xd4>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800c8d6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c8d8:	691b      	ldr	r3, [r3, #16]
 800c8da:	2b00      	cmp	r3, #0
 800c8dc:	d016      	beq.n	800c90c <xQueueReceiveFromISR+0xe4>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800c8de:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c8e0:	3310      	adds	r3, #16
 800c8e2:	4618      	mov	r0, r3
 800c8e4:	f000 fe88 	bl	800d5f8 <xTaskRemoveFromEventList>
 800c8e8:	4603      	mov	r3, r0
 800c8ea:	2b00      	cmp	r3, #0
 800c8ec:	d00e      	beq.n	800c90c <xQueueReceiveFromISR+0xe4>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 800c8ee:	687b      	ldr	r3, [r7, #4]
 800c8f0:	2b00      	cmp	r3, #0
 800c8f2:	d00b      	beq.n	800c90c <xQueueReceiveFromISR+0xe4>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 800c8f4:	687b      	ldr	r3, [r7, #4]
 800c8f6:	2201      	movs	r2, #1
 800c8f8:	601a      	str	r2, [r3, #0]
 800c8fa:	e007      	b.n	800c90c <xQueueReceiveFromISR+0xe4>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 800c8fc:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800c900:	3301      	adds	r3, #1
 800c902:	b2db      	uxtb	r3, r3
 800c904:	b25a      	sxtb	r2, r3
 800c906:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c908:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
			}

			xReturn = pdPASS;
 800c90c:	2301      	movs	r3, #1
 800c90e:	637b      	str	r3, [r7, #52]	@ 0x34
 800c910:	e001      	b.n	800c916 <xQueueReceiveFromISR+0xee>
		}
		else
		{
			xReturn = pdFAIL;
 800c912:	2300      	movs	r3, #0
 800c914:	637b      	str	r3, [r7, #52]	@ 0x34
 800c916:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c918:	613b      	str	r3, [r7, #16]
	__asm volatile
 800c91a:	693b      	ldr	r3, [r7, #16]
 800c91c:	f383 8811 	msr	BASEPRI, r3
}
 800c920:	bf00      	nop
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800c922:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
}
 800c924:	4618      	mov	r0, r3
 800c926:	3738      	adds	r7, #56	@ 0x38
 800c928:	46bd      	mov	sp, r7
 800c92a:	bd80      	pop	{r7, pc}

0800c92c <vQueueDelete>:
	return uxReturn;
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
/*-----------------------------------------------------------*/

void vQueueDelete( QueueHandle_t xQueue )
{
 800c92c:	b580      	push	{r7, lr}
 800c92e:	b084      	sub	sp, #16
 800c930:	af00      	add	r7, sp, #0
 800c932:	6078      	str	r0, [r7, #4]
Queue_t * const pxQueue = xQueue;
 800c934:	687b      	ldr	r3, [r7, #4]
 800c936:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800c938:	68fb      	ldr	r3, [r7, #12]
 800c93a:	2b00      	cmp	r3, #0
 800c93c:	d10b      	bne.n	800c956 <vQueueDelete+0x2a>
	__asm volatile
 800c93e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c942:	f383 8811 	msr	BASEPRI, r3
 800c946:	f3bf 8f6f 	isb	sy
 800c94a:	f3bf 8f4f 	dsb	sy
 800c94e:	60bb      	str	r3, [r7, #8]
}
 800c950:	bf00      	nop
 800c952:	bf00      	nop
 800c954:	e7fd      	b.n	800c952 <vQueueDelete+0x26>
	traceQUEUE_DELETE( pxQueue );

	#if ( configQUEUE_REGISTRY_SIZE > 0 )
	{
		vQueueUnregisterQueue( pxQueue );
 800c956:	68f8      	ldr	r0, [r7, #12]
 800c958:	f000 f95e 	bl	800cc18 <vQueueUnregisterQueue>
	}
	#elif( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )
	{
		/* The queue could have been allocated statically or dynamically, so
		check before attempting to free the memory. */
		if( pxQueue->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
 800c95c:	68fb      	ldr	r3, [r7, #12]
 800c95e:	f893 3046 	ldrb.w	r3, [r3, #70]	@ 0x46
 800c962:	2b00      	cmp	r3, #0
 800c964:	d102      	bne.n	800c96c <vQueueDelete+0x40>
		{
			vPortFree( pxQueue );
 800c966:	68f8      	ldr	r0, [r7, #12]
 800c968:	f7fe fd60 	bl	800b42c <vPortFree>
		/* The queue must have been statically allocated, so is not going to be
		deleted.  Avoid compiler warnings about the unused parameter. */
		( void ) pxQueue;
	}
	#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
}
 800c96c:	bf00      	nop
 800c96e:	3710      	adds	r7, #16
 800c970:	46bd      	mov	sp, r7
 800c972:	bd80      	pop	{r7, pc}

0800c974 <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 800c974:	b480      	push	{r7}
 800c976:	b085      	sub	sp, #20
 800c978:	af00      	add	r7, sp, #0
 800c97a:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 800c97c:	687b      	ldr	r3, [r7, #4]
 800c97e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800c980:	2b00      	cmp	r3, #0
 800c982:	d006      	beq.n	800c992 <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 800c984:	687b      	ldr	r3, [r7, #4]
 800c986:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800c988:	681b      	ldr	r3, [r3, #0]
 800c98a:	f1c3 0338 	rsb	r3, r3, #56	@ 0x38
 800c98e:	60fb      	str	r3, [r7, #12]
 800c990:	e001      	b.n	800c996 <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 800c992:	2300      	movs	r3, #0
 800c994:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 800c996:	68fb      	ldr	r3, [r7, #12]
	}
 800c998:	4618      	mov	r0, r3
 800c99a:	3714      	adds	r7, #20
 800c99c:	46bd      	mov	sp, r7
 800c99e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c9a2:	4770      	bx	lr

0800c9a4 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 800c9a4:	b580      	push	{r7, lr}
 800c9a6:	b086      	sub	sp, #24
 800c9a8:	af00      	add	r7, sp, #0
 800c9aa:	60f8      	str	r0, [r7, #12]
 800c9ac:	60b9      	str	r1, [r7, #8]
 800c9ae:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 800c9b0:	2300      	movs	r3, #0
 800c9b2:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800c9b4:	68fb      	ldr	r3, [r7, #12]
 800c9b6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800c9b8:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800c9ba:	68fb      	ldr	r3, [r7, #12]
 800c9bc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800c9be:	2b00      	cmp	r3, #0
 800c9c0:	d10d      	bne.n	800c9de <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800c9c2:	68fb      	ldr	r3, [r7, #12]
 800c9c4:	681b      	ldr	r3, [r3, #0]
 800c9c6:	2b00      	cmp	r3, #0
 800c9c8:	d14d      	bne.n	800ca66 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 800c9ca:	68fb      	ldr	r3, [r7, #12]
 800c9cc:	689b      	ldr	r3, [r3, #8]
 800c9ce:	4618      	mov	r0, r3
 800c9d0:	f001 f85e 	bl	800da90 <xTaskPriorityDisinherit>
 800c9d4:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 800c9d6:	68fb      	ldr	r3, [r7, #12]
 800c9d8:	2200      	movs	r2, #0
 800c9da:	609a      	str	r2, [r3, #8]
 800c9dc:	e043      	b.n	800ca66 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 800c9de:	687b      	ldr	r3, [r7, #4]
 800c9e0:	2b00      	cmp	r3, #0
 800c9e2:	d119      	bne.n	800ca18 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800c9e4:	68fb      	ldr	r3, [r7, #12]
 800c9e6:	6858      	ldr	r0, [r3, #4]
 800c9e8:	68fb      	ldr	r3, [r7, #12]
 800c9ea:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800c9ec:	461a      	mov	r2, r3
 800c9ee:	68b9      	ldr	r1, [r7, #8]
 800c9f0:	f01e facd 	bl	802af8e <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800c9f4:	68fb      	ldr	r3, [r7, #12]
 800c9f6:	685a      	ldr	r2, [r3, #4]
 800c9f8:	68fb      	ldr	r3, [r7, #12]
 800c9fa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800c9fc:	441a      	add	r2, r3
 800c9fe:	68fb      	ldr	r3, [r7, #12]
 800ca00:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800ca02:	68fb      	ldr	r3, [r7, #12]
 800ca04:	685a      	ldr	r2, [r3, #4]
 800ca06:	68fb      	ldr	r3, [r7, #12]
 800ca08:	689b      	ldr	r3, [r3, #8]
 800ca0a:	429a      	cmp	r2, r3
 800ca0c:	d32b      	bcc.n	800ca66 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 800ca0e:	68fb      	ldr	r3, [r7, #12]
 800ca10:	681a      	ldr	r2, [r3, #0]
 800ca12:	68fb      	ldr	r3, [r7, #12]
 800ca14:	605a      	str	r2, [r3, #4]
 800ca16:	e026      	b.n	800ca66 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 800ca18:	68fb      	ldr	r3, [r7, #12]
 800ca1a:	68d8      	ldr	r0, [r3, #12]
 800ca1c:	68fb      	ldr	r3, [r7, #12]
 800ca1e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800ca20:	461a      	mov	r2, r3
 800ca22:	68b9      	ldr	r1, [r7, #8]
 800ca24:	f01e fab3 	bl	802af8e <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 800ca28:	68fb      	ldr	r3, [r7, #12]
 800ca2a:	68da      	ldr	r2, [r3, #12]
 800ca2c:	68fb      	ldr	r3, [r7, #12]
 800ca2e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800ca30:	425b      	negs	r3, r3
 800ca32:	441a      	add	r2, r3
 800ca34:	68fb      	ldr	r3, [r7, #12]
 800ca36:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800ca38:	68fb      	ldr	r3, [r7, #12]
 800ca3a:	68da      	ldr	r2, [r3, #12]
 800ca3c:	68fb      	ldr	r3, [r7, #12]
 800ca3e:	681b      	ldr	r3, [r3, #0]
 800ca40:	429a      	cmp	r2, r3
 800ca42:	d207      	bcs.n	800ca54 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 800ca44:	68fb      	ldr	r3, [r7, #12]
 800ca46:	689a      	ldr	r2, [r3, #8]
 800ca48:	68fb      	ldr	r3, [r7, #12]
 800ca4a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800ca4c:	425b      	negs	r3, r3
 800ca4e:	441a      	add	r2, r3
 800ca50:	68fb      	ldr	r3, [r7, #12]
 800ca52:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 800ca54:	687b      	ldr	r3, [r7, #4]
 800ca56:	2b02      	cmp	r3, #2
 800ca58:	d105      	bne.n	800ca66 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800ca5a:	693b      	ldr	r3, [r7, #16]
 800ca5c:	2b00      	cmp	r3, #0
 800ca5e:	d002      	beq.n	800ca66 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 800ca60:	693b      	ldr	r3, [r7, #16]
 800ca62:	3b01      	subs	r3, #1
 800ca64:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800ca66:	693b      	ldr	r3, [r7, #16]
 800ca68:	1c5a      	adds	r2, r3, #1
 800ca6a:	68fb      	ldr	r3, [r7, #12]
 800ca6c:	639a      	str	r2, [r3, #56]	@ 0x38

	return xReturn;
 800ca6e:	697b      	ldr	r3, [r7, #20]
}
 800ca70:	4618      	mov	r0, r3
 800ca72:	3718      	adds	r7, #24
 800ca74:	46bd      	mov	sp, r7
 800ca76:	bd80      	pop	{r7, pc}

0800ca78 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 800ca78:	b580      	push	{r7, lr}
 800ca7a:	b082      	sub	sp, #8
 800ca7c:	af00      	add	r7, sp, #0
 800ca7e:	6078      	str	r0, [r7, #4]
 800ca80:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800ca82:	687b      	ldr	r3, [r7, #4]
 800ca84:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800ca86:	2b00      	cmp	r3, #0
 800ca88:	d018      	beq.n	800cabc <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800ca8a:	687b      	ldr	r3, [r7, #4]
 800ca8c:	68da      	ldr	r2, [r3, #12]
 800ca8e:	687b      	ldr	r3, [r7, #4]
 800ca90:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800ca92:	441a      	add	r2, r3
 800ca94:	687b      	ldr	r3, [r7, #4]
 800ca96:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 800ca98:	687b      	ldr	r3, [r7, #4]
 800ca9a:	68da      	ldr	r2, [r3, #12]
 800ca9c:	687b      	ldr	r3, [r7, #4]
 800ca9e:	689b      	ldr	r3, [r3, #8]
 800caa0:	429a      	cmp	r2, r3
 800caa2:	d303      	bcc.n	800caac <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 800caa4:	687b      	ldr	r3, [r7, #4]
 800caa6:	681a      	ldr	r2, [r3, #0]
 800caa8:	687b      	ldr	r3, [r7, #4]
 800caaa:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800caac:	687b      	ldr	r3, [r7, #4]
 800caae:	68d9      	ldr	r1, [r3, #12]
 800cab0:	687b      	ldr	r3, [r7, #4]
 800cab2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800cab4:	461a      	mov	r2, r3
 800cab6:	6838      	ldr	r0, [r7, #0]
 800cab8:	f01e fa69 	bl	802af8e <memcpy>
	}
}
 800cabc:	bf00      	nop
 800cabe:	3708      	adds	r7, #8
 800cac0:	46bd      	mov	sp, r7
 800cac2:	bd80      	pop	{r7, pc}

0800cac4 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 800cac4:	b580      	push	{r7, lr}
 800cac6:	b084      	sub	sp, #16
 800cac8:	af00      	add	r7, sp, #0
 800caca:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 800cacc:	f7fe ffb4 	bl	800ba38 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 800cad0:	687b      	ldr	r3, [r7, #4]
 800cad2:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800cad6:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800cad8:	e011      	b.n	800cafe <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800cada:	687b      	ldr	r3, [r7, #4]
 800cadc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800cade:	2b00      	cmp	r3, #0
 800cae0:	d012      	beq.n	800cb08 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800cae2:	687b      	ldr	r3, [r7, #4]
 800cae4:	3324      	adds	r3, #36	@ 0x24
 800cae6:	4618      	mov	r0, r3
 800cae8:	f000 fd86 	bl	800d5f8 <xTaskRemoveFromEventList>
 800caec:	4603      	mov	r3, r0
 800caee:	2b00      	cmp	r3, #0
 800caf0:	d001      	beq.n	800caf6 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 800caf2:	f000 fe5f 	bl	800d7b4 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 800caf6:	7bfb      	ldrb	r3, [r7, #15]
 800caf8:	3b01      	subs	r3, #1
 800cafa:	b2db      	uxtb	r3, r3
 800cafc:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800cafe:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800cb02:	2b00      	cmp	r3, #0
 800cb04:	dce9      	bgt.n	800cada <prvUnlockQueue+0x16>
 800cb06:	e000      	b.n	800cb0a <prvUnlockQueue+0x46>
					break;
 800cb08:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 800cb0a:	687b      	ldr	r3, [r7, #4]
 800cb0c:	22ff      	movs	r2, #255	@ 0xff
 800cb0e:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
	}
	taskEXIT_CRITICAL();
 800cb12:	f7fe ffc3 	bl	800ba9c <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 800cb16:	f7fe ff8f 	bl	800ba38 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 800cb1a:	687b      	ldr	r3, [r7, #4]
 800cb1c:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800cb20:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 800cb22:	e011      	b.n	800cb48 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800cb24:	687b      	ldr	r3, [r7, #4]
 800cb26:	691b      	ldr	r3, [r3, #16]
 800cb28:	2b00      	cmp	r3, #0
 800cb2a:	d012      	beq.n	800cb52 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800cb2c:	687b      	ldr	r3, [r7, #4]
 800cb2e:	3310      	adds	r3, #16
 800cb30:	4618      	mov	r0, r3
 800cb32:	f000 fd61 	bl	800d5f8 <xTaskRemoveFromEventList>
 800cb36:	4603      	mov	r3, r0
 800cb38:	2b00      	cmp	r3, #0
 800cb3a:	d001      	beq.n	800cb40 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 800cb3c:	f000 fe3a 	bl	800d7b4 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 800cb40:	7bbb      	ldrb	r3, [r7, #14]
 800cb42:	3b01      	subs	r3, #1
 800cb44:	b2db      	uxtb	r3, r3
 800cb46:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 800cb48:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800cb4c:	2b00      	cmp	r3, #0
 800cb4e:	dce9      	bgt.n	800cb24 <prvUnlockQueue+0x60>
 800cb50:	e000      	b.n	800cb54 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 800cb52:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 800cb54:	687b      	ldr	r3, [r7, #4]
 800cb56:	22ff      	movs	r2, #255	@ 0xff
 800cb58:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
	}
	taskEXIT_CRITICAL();
 800cb5c:	f7fe ff9e 	bl	800ba9c <vPortExitCritical>
}
 800cb60:	bf00      	nop
 800cb62:	3710      	adds	r7, #16
 800cb64:	46bd      	mov	sp, r7
 800cb66:	bd80      	pop	{r7, pc}

0800cb68 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 800cb68:	b580      	push	{r7, lr}
 800cb6a:	b084      	sub	sp, #16
 800cb6c:	af00      	add	r7, sp, #0
 800cb6e:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800cb70:	f7fe ff62 	bl	800ba38 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 800cb74:	687b      	ldr	r3, [r7, #4]
 800cb76:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800cb78:	2b00      	cmp	r3, #0
 800cb7a:	d102      	bne.n	800cb82 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 800cb7c:	2301      	movs	r3, #1
 800cb7e:	60fb      	str	r3, [r7, #12]
 800cb80:	e001      	b.n	800cb86 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 800cb82:	2300      	movs	r3, #0
 800cb84:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800cb86:	f7fe ff89 	bl	800ba9c <vPortExitCritical>

	return xReturn;
 800cb8a:	68fb      	ldr	r3, [r7, #12]
}
 800cb8c:	4618      	mov	r0, r3
 800cb8e:	3710      	adds	r7, #16
 800cb90:	46bd      	mov	sp, r7
 800cb92:	bd80      	pop	{r7, pc}

0800cb94 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 800cb94:	b580      	push	{r7, lr}
 800cb96:	b084      	sub	sp, #16
 800cb98:	af00      	add	r7, sp, #0
 800cb9a:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800cb9c:	f7fe ff4c 	bl	800ba38 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 800cba0:	687b      	ldr	r3, [r7, #4]
 800cba2:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800cba4:	687b      	ldr	r3, [r7, #4]
 800cba6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800cba8:	429a      	cmp	r2, r3
 800cbaa:	d102      	bne.n	800cbb2 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 800cbac:	2301      	movs	r3, #1
 800cbae:	60fb      	str	r3, [r7, #12]
 800cbb0:	e001      	b.n	800cbb6 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 800cbb2:	2300      	movs	r3, #0
 800cbb4:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800cbb6:	f7fe ff71 	bl	800ba9c <vPortExitCritical>

	return xReturn;
 800cbba:	68fb      	ldr	r3, [r7, #12]
}
 800cbbc:	4618      	mov	r0, r3
 800cbbe:	3710      	adds	r7, #16
 800cbc0:	46bd      	mov	sp, r7
 800cbc2:	bd80      	pop	{r7, pc}

0800cbc4 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 800cbc4:	b480      	push	{r7}
 800cbc6:	b085      	sub	sp, #20
 800cbc8:	af00      	add	r7, sp, #0
 800cbca:	6078      	str	r0, [r7, #4]
 800cbcc:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800cbce:	2300      	movs	r3, #0
 800cbd0:	60fb      	str	r3, [r7, #12]
 800cbd2:	e014      	b.n	800cbfe <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 800cbd4:	4a0f      	ldr	r2, [pc, #60]	@ (800cc14 <vQueueAddToRegistry+0x50>)
 800cbd6:	68fb      	ldr	r3, [r7, #12]
 800cbd8:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 800cbdc:	2b00      	cmp	r3, #0
 800cbde:	d10b      	bne.n	800cbf8 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 800cbe0:	490c      	ldr	r1, [pc, #48]	@ (800cc14 <vQueueAddToRegistry+0x50>)
 800cbe2:	68fb      	ldr	r3, [r7, #12]
 800cbe4:	683a      	ldr	r2, [r7, #0]
 800cbe6:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 800cbea:	4a0a      	ldr	r2, [pc, #40]	@ (800cc14 <vQueueAddToRegistry+0x50>)
 800cbec:	68fb      	ldr	r3, [r7, #12]
 800cbee:	00db      	lsls	r3, r3, #3
 800cbf0:	4413      	add	r3, r2
 800cbf2:	687a      	ldr	r2, [r7, #4]
 800cbf4:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 800cbf6:	e006      	b.n	800cc06 <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800cbf8:	68fb      	ldr	r3, [r7, #12]
 800cbfa:	3301      	adds	r3, #1
 800cbfc:	60fb      	str	r3, [r7, #12]
 800cbfe:	68fb      	ldr	r3, [r7, #12]
 800cc00:	2b07      	cmp	r3, #7
 800cc02:	d9e7      	bls.n	800cbd4 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 800cc04:	bf00      	nop
 800cc06:	bf00      	nop
 800cc08:	3714      	adds	r7, #20
 800cc0a:	46bd      	mov	sp, r7
 800cc0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cc10:	4770      	bx	lr
 800cc12:	bf00      	nop
 800cc14:	2400a608 	.word	0x2400a608

0800cc18 <vQueueUnregisterQueue>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueUnregisterQueue( QueueHandle_t xQueue )
	{
 800cc18:	b480      	push	{r7}
 800cc1a:	b085      	sub	sp, #20
 800cc1c:	af00      	add	r7, sp, #0
 800cc1e:	6078      	str	r0, [r7, #4]
	UBaseType_t ux;

		/* See if the handle of the queue being unregistered in actually in the
		registry. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800cc20:	2300      	movs	r3, #0
 800cc22:	60fb      	str	r3, [r7, #12]
 800cc24:	e016      	b.n	800cc54 <vQueueUnregisterQueue+0x3c>
		{
			if( xQueueRegistry[ ux ].xHandle == xQueue )
 800cc26:	4a10      	ldr	r2, [pc, #64]	@ (800cc68 <vQueueUnregisterQueue+0x50>)
 800cc28:	68fb      	ldr	r3, [r7, #12]
 800cc2a:	00db      	lsls	r3, r3, #3
 800cc2c:	4413      	add	r3, r2
 800cc2e:	685b      	ldr	r3, [r3, #4]
 800cc30:	687a      	ldr	r2, [r7, #4]
 800cc32:	429a      	cmp	r2, r3
 800cc34:	d10b      	bne.n	800cc4e <vQueueUnregisterQueue+0x36>
			{
				/* Set the name to NULL to show that this slot if free again. */
				xQueueRegistry[ ux ].pcQueueName = NULL;
 800cc36:	4a0c      	ldr	r2, [pc, #48]	@ (800cc68 <vQueueUnregisterQueue+0x50>)
 800cc38:	68fb      	ldr	r3, [r7, #12]
 800cc3a:	2100      	movs	r1, #0
 800cc3c:	f842 1033 	str.w	r1, [r2, r3, lsl #3]

				/* Set the handle to NULL to ensure the same queue handle cannot
				appear in the registry twice if it is added, removed, then
				added again. */
				xQueueRegistry[ ux ].xHandle = ( QueueHandle_t ) 0;
 800cc40:	4a09      	ldr	r2, [pc, #36]	@ (800cc68 <vQueueUnregisterQueue+0x50>)
 800cc42:	68fb      	ldr	r3, [r7, #12]
 800cc44:	00db      	lsls	r3, r3, #3
 800cc46:	4413      	add	r3, r2
 800cc48:	2200      	movs	r2, #0
 800cc4a:	605a      	str	r2, [r3, #4]
				break;
 800cc4c:	e006      	b.n	800cc5c <vQueueUnregisterQueue+0x44>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800cc4e:	68fb      	ldr	r3, [r7, #12]
 800cc50:	3301      	adds	r3, #1
 800cc52:	60fb      	str	r3, [r7, #12]
 800cc54:	68fb      	ldr	r3, [r7, #12]
 800cc56:	2b07      	cmp	r3, #7
 800cc58:	d9e5      	bls.n	800cc26 <vQueueUnregisterQueue+0xe>
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

	} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
 800cc5a:	bf00      	nop
 800cc5c:	bf00      	nop
 800cc5e:	3714      	adds	r7, #20
 800cc60:	46bd      	mov	sp, r7
 800cc62:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cc66:	4770      	bx	lr
 800cc68:	2400a608 	.word	0x2400a608

0800cc6c <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800cc6c:	b580      	push	{r7, lr}
 800cc6e:	b086      	sub	sp, #24
 800cc70:	af00      	add	r7, sp, #0
 800cc72:	60f8      	str	r0, [r7, #12]
 800cc74:	60b9      	str	r1, [r7, #8]
 800cc76:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 800cc78:	68fb      	ldr	r3, [r7, #12]
 800cc7a:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 800cc7c:	f7fe fedc 	bl	800ba38 <vPortEnterCritical>
 800cc80:	697b      	ldr	r3, [r7, #20]
 800cc82:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800cc86:	b25b      	sxtb	r3, r3
 800cc88:	f1b3 3fff 	cmp.w	r3, #4294967295
 800cc8c:	d103      	bne.n	800cc96 <vQueueWaitForMessageRestricted+0x2a>
 800cc8e:	697b      	ldr	r3, [r7, #20]
 800cc90:	2200      	movs	r2, #0
 800cc92:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800cc96:	697b      	ldr	r3, [r7, #20]
 800cc98:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800cc9c:	b25b      	sxtb	r3, r3
 800cc9e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800cca2:	d103      	bne.n	800ccac <vQueueWaitForMessageRestricted+0x40>
 800cca4:	697b      	ldr	r3, [r7, #20]
 800cca6:	2200      	movs	r2, #0
 800cca8:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800ccac:	f7fe fef6 	bl	800ba9c <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 800ccb0:	697b      	ldr	r3, [r7, #20]
 800ccb2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800ccb4:	2b00      	cmp	r3, #0
 800ccb6:	d106      	bne.n	800ccc6 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 800ccb8:	697b      	ldr	r3, [r7, #20]
 800ccba:	3324      	adds	r3, #36	@ 0x24
 800ccbc:	687a      	ldr	r2, [r7, #4]
 800ccbe:	68b9      	ldr	r1, [r7, #8]
 800ccc0:	4618      	mov	r0, r3
 800ccc2:	f000 fc6d 	bl	800d5a0 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 800ccc6:	6978      	ldr	r0, [r7, #20]
 800ccc8:	f7ff fefc 	bl	800cac4 <prvUnlockQueue>
	}
 800cccc:	bf00      	nop
 800ccce:	3718      	adds	r7, #24
 800ccd0:	46bd      	mov	sp, r7
 800ccd2:	bd80      	pop	{r7, pc}

0800ccd4 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 800ccd4:	b580      	push	{r7, lr}
 800ccd6:	b08e      	sub	sp, #56	@ 0x38
 800ccd8:	af04      	add	r7, sp, #16
 800ccda:	60f8      	str	r0, [r7, #12]
 800ccdc:	60b9      	str	r1, [r7, #8]
 800ccde:	607a      	str	r2, [r7, #4]
 800cce0:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 800cce2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800cce4:	2b00      	cmp	r3, #0
 800cce6:	d10b      	bne.n	800cd00 <xTaskCreateStatic+0x2c>
	__asm volatile
 800cce8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ccec:	f383 8811 	msr	BASEPRI, r3
 800ccf0:	f3bf 8f6f 	isb	sy
 800ccf4:	f3bf 8f4f 	dsb	sy
 800ccf8:	623b      	str	r3, [r7, #32]
}
 800ccfa:	bf00      	nop
 800ccfc:	bf00      	nop
 800ccfe:	e7fd      	b.n	800ccfc <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 800cd00:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800cd02:	2b00      	cmp	r3, #0
 800cd04:	d10b      	bne.n	800cd1e <xTaskCreateStatic+0x4a>
	__asm volatile
 800cd06:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800cd0a:	f383 8811 	msr	BASEPRI, r3
 800cd0e:	f3bf 8f6f 	isb	sy
 800cd12:	f3bf 8f4f 	dsb	sy
 800cd16:	61fb      	str	r3, [r7, #28]
}
 800cd18:	bf00      	nop
 800cd1a:	bf00      	nop
 800cd1c:	e7fd      	b.n	800cd1a <xTaskCreateStatic+0x46>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 800cd1e:	23a8      	movs	r3, #168	@ 0xa8
 800cd20:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 800cd22:	693b      	ldr	r3, [r7, #16]
 800cd24:	2ba8      	cmp	r3, #168	@ 0xa8
 800cd26:	d00b      	beq.n	800cd40 <xTaskCreateStatic+0x6c>
	__asm volatile
 800cd28:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800cd2c:	f383 8811 	msr	BASEPRI, r3
 800cd30:	f3bf 8f6f 	isb	sy
 800cd34:	f3bf 8f4f 	dsb	sy
 800cd38:	61bb      	str	r3, [r7, #24]
}
 800cd3a:	bf00      	nop
 800cd3c:	bf00      	nop
 800cd3e:	e7fd      	b.n	800cd3c <xTaskCreateStatic+0x68>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 800cd40:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 800cd42:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800cd44:	2b00      	cmp	r3, #0
 800cd46:	d01e      	beq.n	800cd86 <xTaskCreateStatic+0xb2>
 800cd48:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800cd4a:	2b00      	cmp	r3, #0
 800cd4c:	d01b      	beq.n	800cd86 <xTaskCreateStatic+0xb2>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800cd4e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800cd50:	627b      	str	r3, [r7, #36]	@ 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 800cd52:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800cd54:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800cd56:	631a      	str	r2, [r3, #48]	@ 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800cd58:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800cd5a:	2202      	movs	r2, #2
 800cd5c:	f883 20a5 	strb.w	r2, [r3, #165]	@ 0xa5
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 800cd60:	2300      	movs	r3, #0
 800cd62:	9303      	str	r3, [sp, #12]
 800cd64:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800cd66:	9302      	str	r3, [sp, #8]
 800cd68:	f107 0314 	add.w	r3, r7, #20
 800cd6c:	9301      	str	r3, [sp, #4]
 800cd6e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800cd70:	9300      	str	r3, [sp, #0]
 800cd72:	683b      	ldr	r3, [r7, #0]
 800cd74:	687a      	ldr	r2, [r7, #4]
 800cd76:	68b9      	ldr	r1, [r7, #8]
 800cd78:	68f8      	ldr	r0, [r7, #12]
 800cd7a:	f000 f851 	bl	800ce20 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800cd7e:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 800cd80:	f000 f8f6 	bl	800cf70 <prvAddNewTaskToReadyList>
 800cd84:	e001      	b.n	800cd8a <xTaskCreateStatic+0xb6>
		}
		else
		{
			xReturn = NULL;
 800cd86:	2300      	movs	r3, #0
 800cd88:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 800cd8a:	697b      	ldr	r3, [r7, #20]
	}
 800cd8c:	4618      	mov	r0, r3
 800cd8e:	3728      	adds	r7, #40	@ 0x28
 800cd90:	46bd      	mov	sp, r7
 800cd92:	bd80      	pop	{r7, pc}

0800cd94 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 800cd94:	b580      	push	{r7, lr}
 800cd96:	b08c      	sub	sp, #48	@ 0x30
 800cd98:	af04      	add	r7, sp, #16
 800cd9a:	60f8      	str	r0, [r7, #12]
 800cd9c:	60b9      	str	r1, [r7, #8]
 800cd9e:	603b      	str	r3, [r7, #0]
 800cda0:	4613      	mov	r3, r2
 800cda2:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 800cda4:	88fb      	ldrh	r3, [r7, #6]
 800cda6:	009b      	lsls	r3, r3, #2
 800cda8:	4618      	mov	r0, r3
 800cdaa:	f7fe fa71 	bl	800b290 <pvPortMalloc>
 800cdae:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 800cdb0:	697b      	ldr	r3, [r7, #20]
 800cdb2:	2b00      	cmp	r3, #0
 800cdb4:	d00e      	beq.n	800cdd4 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 800cdb6:	20a8      	movs	r0, #168	@ 0xa8
 800cdb8:	f7fe fa6a 	bl	800b290 <pvPortMalloc>
 800cdbc:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 800cdbe:	69fb      	ldr	r3, [r7, #28]
 800cdc0:	2b00      	cmp	r3, #0
 800cdc2:	d003      	beq.n	800cdcc <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 800cdc4:	69fb      	ldr	r3, [r7, #28]
 800cdc6:	697a      	ldr	r2, [r7, #20]
 800cdc8:	631a      	str	r2, [r3, #48]	@ 0x30
 800cdca:	e005      	b.n	800cdd8 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 800cdcc:	6978      	ldr	r0, [r7, #20]
 800cdce:	f7fe fb2d 	bl	800b42c <vPortFree>
 800cdd2:	e001      	b.n	800cdd8 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 800cdd4:	2300      	movs	r3, #0
 800cdd6:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 800cdd8:	69fb      	ldr	r3, [r7, #28]
 800cdda:	2b00      	cmp	r3, #0
 800cddc:	d017      	beq.n	800ce0e <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 800cdde:	69fb      	ldr	r3, [r7, #28]
 800cde0:	2200      	movs	r2, #0
 800cde2:	f883 20a5 	strb.w	r2, [r3, #165]	@ 0xa5
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800cde6:	88fa      	ldrh	r2, [r7, #6]
 800cde8:	2300      	movs	r3, #0
 800cdea:	9303      	str	r3, [sp, #12]
 800cdec:	69fb      	ldr	r3, [r7, #28]
 800cdee:	9302      	str	r3, [sp, #8]
 800cdf0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800cdf2:	9301      	str	r3, [sp, #4]
 800cdf4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800cdf6:	9300      	str	r3, [sp, #0]
 800cdf8:	683b      	ldr	r3, [r7, #0]
 800cdfa:	68b9      	ldr	r1, [r7, #8]
 800cdfc:	68f8      	ldr	r0, [r7, #12]
 800cdfe:	f000 f80f 	bl	800ce20 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800ce02:	69f8      	ldr	r0, [r7, #28]
 800ce04:	f000 f8b4 	bl	800cf70 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800ce08:	2301      	movs	r3, #1
 800ce0a:	61bb      	str	r3, [r7, #24]
 800ce0c:	e002      	b.n	800ce14 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800ce0e:	f04f 33ff 	mov.w	r3, #4294967295
 800ce12:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 800ce14:	69bb      	ldr	r3, [r7, #24]
	}
 800ce16:	4618      	mov	r0, r3
 800ce18:	3720      	adds	r7, #32
 800ce1a:	46bd      	mov	sp, r7
 800ce1c:	bd80      	pop	{r7, pc}
	...

0800ce20 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 800ce20:	b580      	push	{r7, lr}
 800ce22:	b088      	sub	sp, #32
 800ce24:	af00      	add	r7, sp, #0
 800ce26:	60f8      	str	r0, [r7, #12]
 800ce28:	60b9      	str	r1, [r7, #8]
 800ce2a:	607a      	str	r2, [r7, #4]
 800ce2c:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 800ce2e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ce30:	6b18      	ldr	r0, [r3, #48]	@ 0x30
 800ce32:	687b      	ldr	r3, [r7, #4]
 800ce34:	009b      	lsls	r3, r3, #2
 800ce36:	461a      	mov	r2, r3
 800ce38:	21a5      	movs	r1, #165	@ 0xa5
 800ce3a:	f01d ff82 	bl	802ad42 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 800ce3e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ce40:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800ce42:	6879      	ldr	r1, [r7, #4]
 800ce44:	f06f 4340 	mvn.w	r3, #3221225472	@ 0xc0000000
 800ce48:	440b      	add	r3, r1
 800ce4a:	009b      	lsls	r3, r3, #2
 800ce4c:	4413      	add	r3, r2
 800ce4e:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 800ce50:	69bb      	ldr	r3, [r7, #24]
 800ce52:	f023 0307 	bic.w	r3, r3, #7
 800ce56:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 800ce58:	69bb      	ldr	r3, [r7, #24]
 800ce5a:	f003 0307 	and.w	r3, r3, #7
 800ce5e:	2b00      	cmp	r3, #0
 800ce60:	d00b      	beq.n	800ce7a <prvInitialiseNewTask+0x5a>
	__asm volatile
 800ce62:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ce66:	f383 8811 	msr	BASEPRI, r3
 800ce6a:	f3bf 8f6f 	isb	sy
 800ce6e:	f3bf 8f4f 	dsb	sy
 800ce72:	617b      	str	r3, [r7, #20]
}
 800ce74:	bf00      	nop
 800ce76:	bf00      	nop
 800ce78:	e7fd      	b.n	800ce76 <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 800ce7a:	68bb      	ldr	r3, [r7, #8]
 800ce7c:	2b00      	cmp	r3, #0
 800ce7e:	d01f      	beq.n	800cec0 <prvInitialiseNewTask+0xa0>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800ce80:	2300      	movs	r3, #0
 800ce82:	61fb      	str	r3, [r7, #28]
 800ce84:	e012      	b.n	800ceac <prvInitialiseNewTask+0x8c>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800ce86:	68ba      	ldr	r2, [r7, #8]
 800ce88:	69fb      	ldr	r3, [r7, #28]
 800ce8a:	4413      	add	r3, r2
 800ce8c:	7819      	ldrb	r1, [r3, #0]
 800ce8e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800ce90:	69fb      	ldr	r3, [r7, #28]
 800ce92:	4413      	add	r3, r2
 800ce94:	3334      	adds	r3, #52	@ 0x34
 800ce96:	460a      	mov	r2, r1
 800ce98:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 800ce9a:	68ba      	ldr	r2, [r7, #8]
 800ce9c:	69fb      	ldr	r3, [r7, #28]
 800ce9e:	4413      	add	r3, r2
 800cea0:	781b      	ldrb	r3, [r3, #0]
 800cea2:	2b00      	cmp	r3, #0
 800cea4:	d006      	beq.n	800ceb4 <prvInitialiseNewTask+0x94>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800cea6:	69fb      	ldr	r3, [r7, #28]
 800cea8:	3301      	adds	r3, #1
 800ceaa:	61fb      	str	r3, [r7, #28]
 800ceac:	69fb      	ldr	r3, [r7, #28]
 800ceae:	2b0f      	cmp	r3, #15
 800ceb0:	d9e9      	bls.n	800ce86 <prvInitialiseNewTask+0x66>
 800ceb2:	e000      	b.n	800ceb6 <prvInitialiseNewTask+0x96>
			{
				break;
 800ceb4:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800ceb6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ceb8:	2200      	movs	r2, #0
 800ceba:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 800cebe:	e003      	b.n	800cec8 <prvInitialiseNewTask+0xa8>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 800cec0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800cec2:	2200      	movs	r2, #0
 800cec4:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800cec8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ceca:	2b37      	cmp	r3, #55	@ 0x37
 800cecc:	d901      	bls.n	800ced2 <prvInitialiseNewTask+0xb2>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800cece:	2337      	movs	r3, #55	@ 0x37
 800ced0:	62bb      	str	r3, [r7, #40]	@ 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 800ced2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ced4:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800ced6:	62da      	str	r2, [r3, #44]	@ 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 800ced8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ceda:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800cedc:	64da      	str	r2, [r3, #76]	@ 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 800cede:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800cee0:	2200      	movs	r2, #0
 800cee2:	651a      	str	r2, [r3, #80]	@ 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800cee4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800cee6:	3304      	adds	r3, #4
 800cee8:	4618      	mov	r0, r3
 800ceea:	f7fe fbdf 	bl	800b6ac <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800ceee:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800cef0:	3318      	adds	r3, #24
 800cef2:	4618      	mov	r0, r3
 800cef4:	f7fe fbda 	bl	800b6ac <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800cef8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800cefa:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800cefc:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800cefe:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800cf00:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 800cf04:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800cf06:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800cf08:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800cf0a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800cf0c:	625a      	str	r2, [r3, #36]	@ 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 800cf0e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800cf10:	2200      	movs	r2, #0
 800cf12:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800cf16:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800cf18:	2200      	movs	r2, #0
 800cf1a:	f883 20a4 	strb.w	r2, [r3, #164]	@ 0xa4
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 800cf1e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800cf20:	3354      	adds	r3, #84	@ 0x54
 800cf22:	224c      	movs	r2, #76	@ 0x4c
 800cf24:	2100      	movs	r1, #0
 800cf26:	4618      	mov	r0, r3
 800cf28:	f01d ff0b 	bl	802ad42 <memset>
 800cf2c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800cf2e:	4a0d      	ldr	r2, [pc, #52]	@ (800cf64 <prvInitialiseNewTask+0x144>)
 800cf30:	659a      	str	r2, [r3, #88]	@ 0x58
 800cf32:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800cf34:	4a0c      	ldr	r2, [pc, #48]	@ (800cf68 <prvInitialiseNewTask+0x148>)
 800cf36:	65da      	str	r2, [r3, #92]	@ 0x5c
 800cf38:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800cf3a:	4a0c      	ldr	r2, [pc, #48]	@ (800cf6c <prvInitialiseNewTask+0x14c>)
 800cf3c:	661a      	str	r2, [r3, #96]	@ 0x60
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800cf3e:	683a      	ldr	r2, [r7, #0]
 800cf40:	68f9      	ldr	r1, [r7, #12]
 800cf42:	69b8      	ldr	r0, [r7, #24]
 800cf44:	f7fe fc46 	bl	800b7d4 <pxPortInitialiseStack>
 800cf48:	4602      	mov	r2, r0
 800cf4a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800cf4c:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 800cf4e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800cf50:	2b00      	cmp	r3, #0
 800cf52:	d002      	beq.n	800cf5a <prvInitialiseNewTask+0x13a>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800cf54:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800cf56:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800cf58:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800cf5a:	bf00      	nop
 800cf5c:	3720      	adds	r7, #32
 800cf5e:	46bd      	mov	sp, r7
 800cf60:	bd80      	pop	{r7, pc}
 800cf62:	bf00      	nop
 800cf64:	2400b984 	.word	0x2400b984
 800cf68:	2400b9ec 	.word	0x2400b9ec
 800cf6c:	2400ba54 	.word	0x2400ba54

0800cf70 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 800cf70:	b580      	push	{r7, lr}
 800cf72:	b082      	sub	sp, #8
 800cf74:	af00      	add	r7, sp, #0
 800cf76:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 800cf78:	f7fe fd5e 	bl	800ba38 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 800cf7c:	4b2d      	ldr	r3, [pc, #180]	@ (800d034 <prvAddNewTaskToReadyList+0xc4>)
 800cf7e:	681b      	ldr	r3, [r3, #0]
 800cf80:	3301      	adds	r3, #1
 800cf82:	4a2c      	ldr	r2, [pc, #176]	@ (800d034 <prvAddNewTaskToReadyList+0xc4>)
 800cf84:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800cf86:	4b2c      	ldr	r3, [pc, #176]	@ (800d038 <prvAddNewTaskToReadyList+0xc8>)
 800cf88:	681b      	ldr	r3, [r3, #0]
 800cf8a:	2b00      	cmp	r3, #0
 800cf8c:	d109      	bne.n	800cfa2 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800cf8e:	4a2a      	ldr	r2, [pc, #168]	@ (800d038 <prvAddNewTaskToReadyList+0xc8>)
 800cf90:	687b      	ldr	r3, [r7, #4]
 800cf92:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 800cf94:	4b27      	ldr	r3, [pc, #156]	@ (800d034 <prvAddNewTaskToReadyList+0xc4>)
 800cf96:	681b      	ldr	r3, [r3, #0]
 800cf98:	2b01      	cmp	r3, #1
 800cf9a:	d110      	bne.n	800cfbe <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 800cf9c:	f000 fc2e 	bl	800d7fc <prvInitialiseTaskLists>
 800cfa0:	e00d      	b.n	800cfbe <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800cfa2:	4b26      	ldr	r3, [pc, #152]	@ (800d03c <prvAddNewTaskToReadyList+0xcc>)
 800cfa4:	681b      	ldr	r3, [r3, #0]
 800cfa6:	2b00      	cmp	r3, #0
 800cfa8:	d109      	bne.n	800cfbe <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800cfaa:	4b23      	ldr	r3, [pc, #140]	@ (800d038 <prvAddNewTaskToReadyList+0xc8>)
 800cfac:	681b      	ldr	r3, [r3, #0]
 800cfae:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800cfb0:	687b      	ldr	r3, [r7, #4]
 800cfb2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800cfb4:	429a      	cmp	r2, r3
 800cfb6:	d802      	bhi.n	800cfbe <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 800cfb8:	4a1f      	ldr	r2, [pc, #124]	@ (800d038 <prvAddNewTaskToReadyList+0xc8>)
 800cfba:	687b      	ldr	r3, [r7, #4]
 800cfbc:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800cfbe:	4b20      	ldr	r3, [pc, #128]	@ (800d040 <prvAddNewTaskToReadyList+0xd0>)
 800cfc0:	681b      	ldr	r3, [r3, #0]
 800cfc2:	3301      	adds	r3, #1
 800cfc4:	4a1e      	ldr	r2, [pc, #120]	@ (800d040 <prvAddNewTaskToReadyList+0xd0>)
 800cfc6:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 800cfc8:	4b1d      	ldr	r3, [pc, #116]	@ (800d040 <prvAddNewTaskToReadyList+0xd0>)
 800cfca:	681a      	ldr	r2, [r3, #0]
 800cfcc:	687b      	ldr	r3, [r7, #4]
 800cfce:	645a      	str	r2, [r3, #68]	@ 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 800cfd0:	687b      	ldr	r3, [r7, #4]
 800cfd2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800cfd4:	4b1b      	ldr	r3, [pc, #108]	@ (800d044 <prvAddNewTaskToReadyList+0xd4>)
 800cfd6:	681b      	ldr	r3, [r3, #0]
 800cfd8:	429a      	cmp	r2, r3
 800cfda:	d903      	bls.n	800cfe4 <prvAddNewTaskToReadyList+0x74>
 800cfdc:	687b      	ldr	r3, [r7, #4]
 800cfde:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800cfe0:	4a18      	ldr	r2, [pc, #96]	@ (800d044 <prvAddNewTaskToReadyList+0xd4>)
 800cfe2:	6013      	str	r3, [r2, #0]
 800cfe4:	687b      	ldr	r3, [r7, #4]
 800cfe6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800cfe8:	4613      	mov	r3, r2
 800cfea:	009b      	lsls	r3, r3, #2
 800cfec:	4413      	add	r3, r2
 800cfee:	009b      	lsls	r3, r3, #2
 800cff0:	4a15      	ldr	r2, [pc, #84]	@ (800d048 <prvAddNewTaskToReadyList+0xd8>)
 800cff2:	441a      	add	r2, r3
 800cff4:	687b      	ldr	r3, [r7, #4]
 800cff6:	3304      	adds	r3, #4
 800cff8:	4619      	mov	r1, r3
 800cffa:	4610      	mov	r0, r2
 800cffc:	f7fe fb63 	bl	800b6c6 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 800d000:	f7fe fd4c 	bl	800ba9c <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 800d004:	4b0d      	ldr	r3, [pc, #52]	@ (800d03c <prvAddNewTaskToReadyList+0xcc>)
 800d006:	681b      	ldr	r3, [r3, #0]
 800d008:	2b00      	cmp	r3, #0
 800d00a:	d00e      	beq.n	800d02a <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800d00c:	4b0a      	ldr	r3, [pc, #40]	@ (800d038 <prvAddNewTaskToReadyList+0xc8>)
 800d00e:	681b      	ldr	r3, [r3, #0]
 800d010:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800d012:	687b      	ldr	r3, [r7, #4]
 800d014:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800d016:	429a      	cmp	r2, r3
 800d018:	d207      	bcs.n	800d02a <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 800d01a:	4b0c      	ldr	r3, [pc, #48]	@ (800d04c <prvAddNewTaskToReadyList+0xdc>)
 800d01c:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800d020:	601a      	str	r2, [r3, #0]
 800d022:	f3bf 8f4f 	dsb	sy
 800d026:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800d02a:	bf00      	nop
 800d02c:	3708      	adds	r7, #8
 800d02e:	46bd      	mov	sp, r7
 800d030:	bd80      	pop	{r7, pc}
 800d032:	bf00      	nop
 800d034:	2400ab1c 	.word	0x2400ab1c
 800d038:	2400a648 	.word	0x2400a648
 800d03c:	2400ab28 	.word	0x2400ab28
 800d040:	2400ab38 	.word	0x2400ab38
 800d044:	2400ab24 	.word	0x2400ab24
 800d048:	2400a64c 	.word	0x2400a64c
 800d04c:	e000ed04 	.word	0xe000ed04

0800d050 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 800d050:	b580      	push	{r7, lr}
 800d052:	b084      	sub	sp, #16
 800d054:	af00      	add	r7, sp, #0
 800d056:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 800d058:	2300      	movs	r3, #0
 800d05a:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 800d05c:	687b      	ldr	r3, [r7, #4]
 800d05e:	2b00      	cmp	r3, #0
 800d060:	d018      	beq.n	800d094 <vTaskDelay+0x44>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800d062:	4b14      	ldr	r3, [pc, #80]	@ (800d0b4 <vTaskDelay+0x64>)
 800d064:	681b      	ldr	r3, [r3, #0]
 800d066:	2b00      	cmp	r3, #0
 800d068:	d00b      	beq.n	800d082 <vTaskDelay+0x32>
	__asm volatile
 800d06a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d06e:	f383 8811 	msr	BASEPRI, r3
 800d072:	f3bf 8f6f 	isb	sy
 800d076:	f3bf 8f4f 	dsb	sy
 800d07a:	60bb      	str	r3, [r7, #8]
}
 800d07c:	bf00      	nop
 800d07e:	bf00      	nop
 800d080:	e7fd      	b.n	800d07e <vTaskDelay+0x2e>
			vTaskSuspendAll();
 800d082:	f000 f88b 	bl	800d19c <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 800d086:	2100      	movs	r1, #0
 800d088:	6878      	ldr	r0, [r7, #4]
 800d08a:	f000 fe09 	bl	800dca0 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 800d08e:	f000 f893 	bl	800d1b8 <xTaskResumeAll>
 800d092:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800d094:	68fb      	ldr	r3, [r7, #12]
 800d096:	2b00      	cmp	r3, #0
 800d098:	d107      	bne.n	800d0aa <vTaskDelay+0x5a>
		{
			portYIELD_WITHIN_API();
 800d09a:	4b07      	ldr	r3, [pc, #28]	@ (800d0b8 <vTaskDelay+0x68>)
 800d09c:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800d0a0:	601a      	str	r2, [r3, #0]
 800d0a2:	f3bf 8f4f 	dsb	sy
 800d0a6:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800d0aa:	bf00      	nop
 800d0ac:	3710      	adds	r7, #16
 800d0ae:	46bd      	mov	sp, r7
 800d0b0:	bd80      	pop	{r7, pc}
 800d0b2:	bf00      	nop
 800d0b4:	2400ab44 	.word	0x2400ab44
 800d0b8:	e000ed04 	.word	0xe000ed04

0800d0bc <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 800d0bc:	b580      	push	{r7, lr}
 800d0be:	b08a      	sub	sp, #40	@ 0x28
 800d0c0:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800d0c2:	2300      	movs	r3, #0
 800d0c4:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800d0c6:	2300      	movs	r3, #0
 800d0c8:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800d0ca:	463a      	mov	r2, r7
 800d0cc:	1d39      	adds	r1, r7, #4
 800d0ce:	f107 0308 	add.w	r3, r7, #8
 800d0d2:	4618      	mov	r0, r3
 800d0d4:	f7fe f8a8 	bl	800b228 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 800d0d8:	6839      	ldr	r1, [r7, #0]
 800d0da:	687b      	ldr	r3, [r7, #4]
 800d0dc:	68ba      	ldr	r2, [r7, #8]
 800d0de:	9202      	str	r2, [sp, #8]
 800d0e0:	9301      	str	r3, [sp, #4]
 800d0e2:	2300      	movs	r3, #0
 800d0e4:	9300      	str	r3, [sp, #0]
 800d0e6:	2300      	movs	r3, #0
 800d0e8:	460a      	mov	r2, r1
 800d0ea:	4924      	ldr	r1, [pc, #144]	@ (800d17c <vTaskStartScheduler+0xc0>)
 800d0ec:	4824      	ldr	r0, [pc, #144]	@ (800d180 <vTaskStartScheduler+0xc4>)
 800d0ee:	f7ff fdf1 	bl	800ccd4 <xTaskCreateStatic>
 800d0f2:	4603      	mov	r3, r0
 800d0f4:	4a23      	ldr	r2, [pc, #140]	@ (800d184 <vTaskStartScheduler+0xc8>)
 800d0f6:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 800d0f8:	4b22      	ldr	r3, [pc, #136]	@ (800d184 <vTaskStartScheduler+0xc8>)
 800d0fa:	681b      	ldr	r3, [r3, #0]
 800d0fc:	2b00      	cmp	r3, #0
 800d0fe:	d002      	beq.n	800d106 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 800d100:	2301      	movs	r3, #1
 800d102:	617b      	str	r3, [r7, #20]
 800d104:	e001      	b.n	800d10a <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800d106:	2300      	movs	r3, #0
 800d108:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 800d10a:	697b      	ldr	r3, [r7, #20]
 800d10c:	2b01      	cmp	r3, #1
 800d10e:	d102      	bne.n	800d116 <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 800d110:	f000 fe1a 	bl	800dd48 <xTimerCreateTimerTask>
 800d114:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800d116:	697b      	ldr	r3, [r7, #20]
 800d118:	2b01      	cmp	r3, #1
 800d11a:	d11b      	bne.n	800d154 <vTaskStartScheduler+0x98>
	__asm volatile
 800d11c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d120:	f383 8811 	msr	BASEPRI, r3
 800d124:	f3bf 8f6f 	isb	sy
 800d128:	f3bf 8f4f 	dsb	sy
 800d12c:	613b      	str	r3, [r7, #16]
}
 800d12e:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 800d130:	4b15      	ldr	r3, [pc, #84]	@ (800d188 <vTaskStartScheduler+0xcc>)
 800d132:	681b      	ldr	r3, [r3, #0]
 800d134:	3354      	adds	r3, #84	@ 0x54
 800d136:	4a15      	ldr	r2, [pc, #84]	@ (800d18c <vTaskStartScheduler+0xd0>)
 800d138:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 800d13a:	4b15      	ldr	r3, [pc, #84]	@ (800d190 <vTaskStartScheduler+0xd4>)
 800d13c:	f04f 32ff 	mov.w	r2, #4294967295
 800d140:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800d142:	4b14      	ldr	r3, [pc, #80]	@ (800d194 <vTaskStartScheduler+0xd8>)
 800d144:	2201      	movs	r2, #1
 800d146:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 800d148:	4b13      	ldr	r3, [pc, #76]	@ (800d198 <vTaskStartScheduler+0xdc>)
 800d14a:	2200      	movs	r2, #0
 800d14c:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 800d14e:	f7fe fbcf 	bl	800b8f0 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 800d152:	e00f      	b.n	800d174 <vTaskStartScheduler+0xb8>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800d154:	697b      	ldr	r3, [r7, #20]
 800d156:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d15a:	d10b      	bne.n	800d174 <vTaskStartScheduler+0xb8>
	__asm volatile
 800d15c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d160:	f383 8811 	msr	BASEPRI, r3
 800d164:	f3bf 8f6f 	isb	sy
 800d168:	f3bf 8f4f 	dsb	sy
 800d16c:	60fb      	str	r3, [r7, #12]
}
 800d16e:	bf00      	nop
 800d170:	bf00      	nop
 800d172:	e7fd      	b.n	800d170 <vTaskStartScheduler+0xb4>
}
 800d174:	bf00      	nop
 800d176:	3718      	adds	r7, #24
 800d178:	46bd      	mov	sp, r7
 800d17a:	bd80      	pop	{r7, pc}
 800d17c:	0802c6dc 	.word	0x0802c6dc
 800d180:	0800d7cd 	.word	0x0800d7cd
 800d184:	2400ab40 	.word	0x2400ab40
 800d188:	2400a648 	.word	0x2400a648
 800d18c:	240000d8 	.word	0x240000d8
 800d190:	2400ab3c 	.word	0x2400ab3c
 800d194:	2400ab28 	.word	0x2400ab28
 800d198:	2400ab20 	.word	0x2400ab20

0800d19c <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 800d19c:	b480      	push	{r7}
 800d19e:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 800d1a0:	4b04      	ldr	r3, [pc, #16]	@ (800d1b4 <vTaskSuspendAll+0x18>)
 800d1a2:	681b      	ldr	r3, [r3, #0]
 800d1a4:	3301      	adds	r3, #1
 800d1a6:	4a03      	ldr	r2, [pc, #12]	@ (800d1b4 <vTaskSuspendAll+0x18>)
 800d1a8:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 800d1aa:	bf00      	nop
 800d1ac:	46bd      	mov	sp, r7
 800d1ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d1b2:	4770      	bx	lr
 800d1b4:	2400ab44 	.word	0x2400ab44

0800d1b8 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 800d1b8:	b580      	push	{r7, lr}
 800d1ba:	b084      	sub	sp, #16
 800d1bc:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800d1be:	2300      	movs	r3, #0
 800d1c0:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800d1c2:	2300      	movs	r3, #0
 800d1c4:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800d1c6:	4b42      	ldr	r3, [pc, #264]	@ (800d2d0 <xTaskResumeAll+0x118>)
 800d1c8:	681b      	ldr	r3, [r3, #0]
 800d1ca:	2b00      	cmp	r3, #0
 800d1cc:	d10b      	bne.n	800d1e6 <xTaskResumeAll+0x2e>
	__asm volatile
 800d1ce:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d1d2:	f383 8811 	msr	BASEPRI, r3
 800d1d6:	f3bf 8f6f 	isb	sy
 800d1da:	f3bf 8f4f 	dsb	sy
 800d1de:	603b      	str	r3, [r7, #0]
}
 800d1e0:	bf00      	nop
 800d1e2:	bf00      	nop
 800d1e4:	e7fd      	b.n	800d1e2 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 800d1e6:	f7fe fc27 	bl	800ba38 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 800d1ea:	4b39      	ldr	r3, [pc, #228]	@ (800d2d0 <xTaskResumeAll+0x118>)
 800d1ec:	681b      	ldr	r3, [r3, #0]
 800d1ee:	3b01      	subs	r3, #1
 800d1f0:	4a37      	ldr	r2, [pc, #220]	@ (800d2d0 <xTaskResumeAll+0x118>)
 800d1f2:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800d1f4:	4b36      	ldr	r3, [pc, #216]	@ (800d2d0 <xTaskResumeAll+0x118>)
 800d1f6:	681b      	ldr	r3, [r3, #0]
 800d1f8:	2b00      	cmp	r3, #0
 800d1fa:	d162      	bne.n	800d2c2 <xTaskResumeAll+0x10a>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800d1fc:	4b35      	ldr	r3, [pc, #212]	@ (800d2d4 <xTaskResumeAll+0x11c>)
 800d1fe:	681b      	ldr	r3, [r3, #0]
 800d200:	2b00      	cmp	r3, #0
 800d202:	d05e      	beq.n	800d2c2 <xTaskResumeAll+0x10a>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800d204:	e02f      	b.n	800d266 <xTaskResumeAll+0xae>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800d206:	4b34      	ldr	r3, [pc, #208]	@ (800d2d8 <xTaskResumeAll+0x120>)
 800d208:	68db      	ldr	r3, [r3, #12]
 800d20a:	68db      	ldr	r3, [r3, #12]
 800d20c:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800d20e:	68fb      	ldr	r3, [r7, #12]
 800d210:	3318      	adds	r3, #24
 800d212:	4618      	mov	r0, r3
 800d214:	f7fe fab4 	bl	800b780 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800d218:	68fb      	ldr	r3, [r7, #12]
 800d21a:	3304      	adds	r3, #4
 800d21c:	4618      	mov	r0, r3
 800d21e:	f7fe faaf 	bl	800b780 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800d222:	68fb      	ldr	r3, [r7, #12]
 800d224:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800d226:	4b2d      	ldr	r3, [pc, #180]	@ (800d2dc <xTaskResumeAll+0x124>)
 800d228:	681b      	ldr	r3, [r3, #0]
 800d22a:	429a      	cmp	r2, r3
 800d22c:	d903      	bls.n	800d236 <xTaskResumeAll+0x7e>
 800d22e:	68fb      	ldr	r3, [r7, #12]
 800d230:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800d232:	4a2a      	ldr	r2, [pc, #168]	@ (800d2dc <xTaskResumeAll+0x124>)
 800d234:	6013      	str	r3, [r2, #0]
 800d236:	68fb      	ldr	r3, [r7, #12]
 800d238:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800d23a:	4613      	mov	r3, r2
 800d23c:	009b      	lsls	r3, r3, #2
 800d23e:	4413      	add	r3, r2
 800d240:	009b      	lsls	r3, r3, #2
 800d242:	4a27      	ldr	r2, [pc, #156]	@ (800d2e0 <xTaskResumeAll+0x128>)
 800d244:	441a      	add	r2, r3
 800d246:	68fb      	ldr	r3, [r7, #12]
 800d248:	3304      	adds	r3, #4
 800d24a:	4619      	mov	r1, r3
 800d24c:	4610      	mov	r0, r2
 800d24e:	f7fe fa3a 	bl	800b6c6 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800d252:	68fb      	ldr	r3, [r7, #12]
 800d254:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800d256:	4b23      	ldr	r3, [pc, #140]	@ (800d2e4 <xTaskResumeAll+0x12c>)
 800d258:	681b      	ldr	r3, [r3, #0]
 800d25a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800d25c:	429a      	cmp	r2, r3
 800d25e:	d302      	bcc.n	800d266 <xTaskResumeAll+0xae>
					{
						xYieldPending = pdTRUE;
 800d260:	4b21      	ldr	r3, [pc, #132]	@ (800d2e8 <xTaskResumeAll+0x130>)
 800d262:	2201      	movs	r2, #1
 800d264:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800d266:	4b1c      	ldr	r3, [pc, #112]	@ (800d2d8 <xTaskResumeAll+0x120>)
 800d268:	681b      	ldr	r3, [r3, #0]
 800d26a:	2b00      	cmp	r3, #0
 800d26c:	d1cb      	bne.n	800d206 <xTaskResumeAll+0x4e>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 800d26e:	68fb      	ldr	r3, [r7, #12]
 800d270:	2b00      	cmp	r3, #0
 800d272:	d001      	beq.n	800d278 <xTaskResumeAll+0xc0>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 800d274:	f000 fb66 	bl	800d944 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 800d278:	4b1c      	ldr	r3, [pc, #112]	@ (800d2ec <xTaskResumeAll+0x134>)
 800d27a:	681b      	ldr	r3, [r3, #0]
 800d27c:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 800d27e:	687b      	ldr	r3, [r7, #4]
 800d280:	2b00      	cmp	r3, #0
 800d282:	d010      	beq.n	800d2a6 <xTaskResumeAll+0xee>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 800d284:	f000 f846 	bl	800d314 <xTaskIncrementTick>
 800d288:	4603      	mov	r3, r0
 800d28a:	2b00      	cmp	r3, #0
 800d28c:	d002      	beq.n	800d294 <xTaskResumeAll+0xdc>
							{
								xYieldPending = pdTRUE;
 800d28e:	4b16      	ldr	r3, [pc, #88]	@ (800d2e8 <xTaskResumeAll+0x130>)
 800d290:	2201      	movs	r2, #1
 800d292:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 800d294:	687b      	ldr	r3, [r7, #4]
 800d296:	3b01      	subs	r3, #1
 800d298:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 800d29a:	687b      	ldr	r3, [r7, #4]
 800d29c:	2b00      	cmp	r3, #0
 800d29e:	d1f1      	bne.n	800d284 <xTaskResumeAll+0xcc>

						xPendedTicks = 0;
 800d2a0:	4b12      	ldr	r3, [pc, #72]	@ (800d2ec <xTaskResumeAll+0x134>)
 800d2a2:	2200      	movs	r2, #0
 800d2a4:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 800d2a6:	4b10      	ldr	r3, [pc, #64]	@ (800d2e8 <xTaskResumeAll+0x130>)
 800d2a8:	681b      	ldr	r3, [r3, #0]
 800d2aa:	2b00      	cmp	r3, #0
 800d2ac:	d009      	beq.n	800d2c2 <xTaskResumeAll+0x10a>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 800d2ae:	2301      	movs	r3, #1
 800d2b0:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 800d2b2:	4b0f      	ldr	r3, [pc, #60]	@ (800d2f0 <xTaskResumeAll+0x138>)
 800d2b4:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800d2b8:	601a      	str	r2, [r3, #0]
 800d2ba:	f3bf 8f4f 	dsb	sy
 800d2be:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800d2c2:	f7fe fbeb 	bl	800ba9c <vPortExitCritical>

	return xAlreadyYielded;
 800d2c6:	68bb      	ldr	r3, [r7, #8]
}
 800d2c8:	4618      	mov	r0, r3
 800d2ca:	3710      	adds	r7, #16
 800d2cc:	46bd      	mov	sp, r7
 800d2ce:	bd80      	pop	{r7, pc}
 800d2d0:	2400ab44 	.word	0x2400ab44
 800d2d4:	2400ab1c 	.word	0x2400ab1c
 800d2d8:	2400aadc 	.word	0x2400aadc
 800d2dc:	2400ab24 	.word	0x2400ab24
 800d2e0:	2400a64c 	.word	0x2400a64c
 800d2e4:	2400a648 	.word	0x2400a648
 800d2e8:	2400ab30 	.word	0x2400ab30
 800d2ec:	2400ab2c 	.word	0x2400ab2c
 800d2f0:	e000ed04 	.word	0xe000ed04

0800d2f4 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 800d2f4:	b480      	push	{r7}
 800d2f6:	b083      	sub	sp, #12
 800d2f8:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 800d2fa:	4b05      	ldr	r3, [pc, #20]	@ (800d310 <xTaskGetTickCount+0x1c>)
 800d2fc:	681b      	ldr	r3, [r3, #0]
 800d2fe:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 800d300:	687b      	ldr	r3, [r7, #4]
}
 800d302:	4618      	mov	r0, r3
 800d304:	370c      	adds	r7, #12
 800d306:	46bd      	mov	sp, r7
 800d308:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d30c:	4770      	bx	lr
 800d30e:	bf00      	nop
 800d310:	2400ab20 	.word	0x2400ab20

0800d314 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 800d314:	b580      	push	{r7, lr}
 800d316:	b086      	sub	sp, #24
 800d318:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800d31a:	2300      	movs	r3, #0
 800d31c:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800d31e:	4b4f      	ldr	r3, [pc, #316]	@ (800d45c <xTaskIncrementTick+0x148>)
 800d320:	681b      	ldr	r3, [r3, #0]
 800d322:	2b00      	cmp	r3, #0
 800d324:	f040 8090 	bne.w	800d448 <xTaskIncrementTick+0x134>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800d328:	4b4d      	ldr	r3, [pc, #308]	@ (800d460 <xTaskIncrementTick+0x14c>)
 800d32a:	681b      	ldr	r3, [r3, #0]
 800d32c:	3301      	adds	r3, #1
 800d32e:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 800d330:	4a4b      	ldr	r2, [pc, #300]	@ (800d460 <xTaskIncrementTick+0x14c>)
 800d332:	693b      	ldr	r3, [r7, #16]
 800d334:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800d336:	693b      	ldr	r3, [r7, #16]
 800d338:	2b00      	cmp	r3, #0
 800d33a:	d121      	bne.n	800d380 <xTaskIncrementTick+0x6c>
		{
			taskSWITCH_DELAYED_LISTS();
 800d33c:	4b49      	ldr	r3, [pc, #292]	@ (800d464 <xTaskIncrementTick+0x150>)
 800d33e:	681b      	ldr	r3, [r3, #0]
 800d340:	681b      	ldr	r3, [r3, #0]
 800d342:	2b00      	cmp	r3, #0
 800d344:	d00b      	beq.n	800d35e <xTaskIncrementTick+0x4a>
	__asm volatile
 800d346:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d34a:	f383 8811 	msr	BASEPRI, r3
 800d34e:	f3bf 8f6f 	isb	sy
 800d352:	f3bf 8f4f 	dsb	sy
 800d356:	603b      	str	r3, [r7, #0]
}
 800d358:	bf00      	nop
 800d35a:	bf00      	nop
 800d35c:	e7fd      	b.n	800d35a <xTaskIncrementTick+0x46>
 800d35e:	4b41      	ldr	r3, [pc, #260]	@ (800d464 <xTaskIncrementTick+0x150>)
 800d360:	681b      	ldr	r3, [r3, #0]
 800d362:	60fb      	str	r3, [r7, #12]
 800d364:	4b40      	ldr	r3, [pc, #256]	@ (800d468 <xTaskIncrementTick+0x154>)
 800d366:	681b      	ldr	r3, [r3, #0]
 800d368:	4a3e      	ldr	r2, [pc, #248]	@ (800d464 <xTaskIncrementTick+0x150>)
 800d36a:	6013      	str	r3, [r2, #0]
 800d36c:	4a3e      	ldr	r2, [pc, #248]	@ (800d468 <xTaskIncrementTick+0x154>)
 800d36e:	68fb      	ldr	r3, [r7, #12]
 800d370:	6013      	str	r3, [r2, #0]
 800d372:	4b3e      	ldr	r3, [pc, #248]	@ (800d46c <xTaskIncrementTick+0x158>)
 800d374:	681b      	ldr	r3, [r3, #0]
 800d376:	3301      	adds	r3, #1
 800d378:	4a3c      	ldr	r2, [pc, #240]	@ (800d46c <xTaskIncrementTick+0x158>)
 800d37a:	6013      	str	r3, [r2, #0]
 800d37c:	f000 fae2 	bl	800d944 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800d380:	4b3b      	ldr	r3, [pc, #236]	@ (800d470 <xTaskIncrementTick+0x15c>)
 800d382:	681b      	ldr	r3, [r3, #0]
 800d384:	693a      	ldr	r2, [r7, #16]
 800d386:	429a      	cmp	r2, r3
 800d388:	d349      	bcc.n	800d41e <xTaskIncrementTick+0x10a>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800d38a:	4b36      	ldr	r3, [pc, #216]	@ (800d464 <xTaskIncrementTick+0x150>)
 800d38c:	681b      	ldr	r3, [r3, #0]
 800d38e:	681b      	ldr	r3, [r3, #0]
 800d390:	2b00      	cmp	r3, #0
 800d392:	d104      	bne.n	800d39e <xTaskIncrementTick+0x8a>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800d394:	4b36      	ldr	r3, [pc, #216]	@ (800d470 <xTaskIncrementTick+0x15c>)
 800d396:	f04f 32ff 	mov.w	r2, #4294967295
 800d39a:	601a      	str	r2, [r3, #0]
					break;
 800d39c:	e03f      	b.n	800d41e <xTaskIncrementTick+0x10a>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800d39e:	4b31      	ldr	r3, [pc, #196]	@ (800d464 <xTaskIncrementTick+0x150>)
 800d3a0:	681b      	ldr	r3, [r3, #0]
 800d3a2:	68db      	ldr	r3, [r3, #12]
 800d3a4:	68db      	ldr	r3, [r3, #12]
 800d3a6:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800d3a8:	68bb      	ldr	r3, [r7, #8]
 800d3aa:	685b      	ldr	r3, [r3, #4]
 800d3ac:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800d3ae:	693a      	ldr	r2, [r7, #16]
 800d3b0:	687b      	ldr	r3, [r7, #4]
 800d3b2:	429a      	cmp	r2, r3
 800d3b4:	d203      	bcs.n	800d3be <xTaskIncrementTick+0xaa>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 800d3b6:	4a2e      	ldr	r2, [pc, #184]	@ (800d470 <xTaskIncrementTick+0x15c>)
 800d3b8:	687b      	ldr	r3, [r7, #4]
 800d3ba:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 800d3bc:	e02f      	b.n	800d41e <xTaskIncrementTick+0x10a>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800d3be:	68bb      	ldr	r3, [r7, #8]
 800d3c0:	3304      	adds	r3, #4
 800d3c2:	4618      	mov	r0, r3
 800d3c4:	f7fe f9dc 	bl	800b780 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800d3c8:	68bb      	ldr	r3, [r7, #8]
 800d3ca:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800d3cc:	2b00      	cmp	r3, #0
 800d3ce:	d004      	beq.n	800d3da <xTaskIncrementTick+0xc6>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800d3d0:	68bb      	ldr	r3, [r7, #8]
 800d3d2:	3318      	adds	r3, #24
 800d3d4:	4618      	mov	r0, r3
 800d3d6:	f7fe f9d3 	bl	800b780 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800d3da:	68bb      	ldr	r3, [r7, #8]
 800d3dc:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800d3de:	4b25      	ldr	r3, [pc, #148]	@ (800d474 <xTaskIncrementTick+0x160>)
 800d3e0:	681b      	ldr	r3, [r3, #0]
 800d3e2:	429a      	cmp	r2, r3
 800d3e4:	d903      	bls.n	800d3ee <xTaskIncrementTick+0xda>
 800d3e6:	68bb      	ldr	r3, [r7, #8]
 800d3e8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800d3ea:	4a22      	ldr	r2, [pc, #136]	@ (800d474 <xTaskIncrementTick+0x160>)
 800d3ec:	6013      	str	r3, [r2, #0]
 800d3ee:	68bb      	ldr	r3, [r7, #8]
 800d3f0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800d3f2:	4613      	mov	r3, r2
 800d3f4:	009b      	lsls	r3, r3, #2
 800d3f6:	4413      	add	r3, r2
 800d3f8:	009b      	lsls	r3, r3, #2
 800d3fa:	4a1f      	ldr	r2, [pc, #124]	@ (800d478 <xTaskIncrementTick+0x164>)
 800d3fc:	441a      	add	r2, r3
 800d3fe:	68bb      	ldr	r3, [r7, #8]
 800d400:	3304      	adds	r3, #4
 800d402:	4619      	mov	r1, r3
 800d404:	4610      	mov	r0, r2
 800d406:	f7fe f95e 	bl	800b6c6 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800d40a:	68bb      	ldr	r3, [r7, #8]
 800d40c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800d40e:	4b1b      	ldr	r3, [pc, #108]	@ (800d47c <xTaskIncrementTick+0x168>)
 800d410:	681b      	ldr	r3, [r3, #0]
 800d412:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800d414:	429a      	cmp	r2, r3
 800d416:	d3b8      	bcc.n	800d38a <xTaskIncrementTick+0x76>
						{
							xSwitchRequired = pdTRUE;
 800d418:	2301      	movs	r3, #1
 800d41a:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800d41c:	e7b5      	b.n	800d38a <xTaskIncrementTick+0x76>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800d41e:	4b17      	ldr	r3, [pc, #92]	@ (800d47c <xTaskIncrementTick+0x168>)
 800d420:	681b      	ldr	r3, [r3, #0]
 800d422:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800d424:	4914      	ldr	r1, [pc, #80]	@ (800d478 <xTaskIncrementTick+0x164>)
 800d426:	4613      	mov	r3, r2
 800d428:	009b      	lsls	r3, r3, #2
 800d42a:	4413      	add	r3, r2
 800d42c:	009b      	lsls	r3, r3, #2
 800d42e:	440b      	add	r3, r1
 800d430:	681b      	ldr	r3, [r3, #0]
 800d432:	2b01      	cmp	r3, #1
 800d434:	d901      	bls.n	800d43a <xTaskIncrementTick+0x126>
			{
				xSwitchRequired = pdTRUE;
 800d436:	2301      	movs	r3, #1
 800d438:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 800d43a:	4b11      	ldr	r3, [pc, #68]	@ (800d480 <xTaskIncrementTick+0x16c>)
 800d43c:	681b      	ldr	r3, [r3, #0]
 800d43e:	2b00      	cmp	r3, #0
 800d440:	d007      	beq.n	800d452 <xTaskIncrementTick+0x13e>
			{
				xSwitchRequired = pdTRUE;
 800d442:	2301      	movs	r3, #1
 800d444:	617b      	str	r3, [r7, #20]
 800d446:	e004      	b.n	800d452 <xTaskIncrementTick+0x13e>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 800d448:	4b0e      	ldr	r3, [pc, #56]	@ (800d484 <xTaskIncrementTick+0x170>)
 800d44a:	681b      	ldr	r3, [r3, #0]
 800d44c:	3301      	adds	r3, #1
 800d44e:	4a0d      	ldr	r2, [pc, #52]	@ (800d484 <xTaskIncrementTick+0x170>)
 800d450:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 800d452:	697b      	ldr	r3, [r7, #20]
}
 800d454:	4618      	mov	r0, r3
 800d456:	3718      	adds	r7, #24
 800d458:	46bd      	mov	sp, r7
 800d45a:	bd80      	pop	{r7, pc}
 800d45c:	2400ab44 	.word	0x2400ab44
 800d460:	2400ab20 	.word	0x2400ab20
 800d464:	2400aad4 	.word	0x2400aad4
 800d468:	2400aad8 	.word	0x2400aad8
 800d46c:	2400ab34 	.word	0x2400ab34
 800d470:	2400ab3c 	.word	0x2400ab3c
 800d474:	2400ab24 	.word	0x2400ab24
 800d478:	2400a64c 	.word	0x2400a64c
 800d47c:	2400a648 	.word	0x2400a648
 800d480:	2400ab30 	.word	0x2400ab30
 800d484:	2400ab2c 	.word	0x2400ab2c

0800d488 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 800d488:	b480      	push	{r7}
 800d48a:	b085      	sub	sp, #20
 800d48c:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800d48e:	4b2b      	ldr	r3, [pc, #172]	@ (800d53c <vTaskSwitchContext+0xb4>)
 800d490:	681b      	ldr	r3, [r3, #0]
 800d492:	2b00      	cmp	r3, #0
 800d494:	d003      	beq.n	800d49e <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800d496:	4b2a      	ldr	r3, [pc, #168]	@ (800d540 <vTaskSwitchContext+0xb8>)
 800d498:	2201      	movs	r2, #1
 800d49a:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 800d49c:	e047      	b.n	800d52e <vTaskSwitchContext+0xa6>
		xYieldPending = pdFALSE;
 800d49e:	4b28      	ldr	r3, [pc, #160]	@ (800d540 <vTaskSwitchContext+0xb8>)
 800d4a0:	2200      	movs	r2, #0
 800d4a2:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800d4a4:	4b27      	ldr	r3, [pc, #156]	@ (800d544 <vTaskSwitchContext+0xbc>)
 800d4a6:	681b      	ldr	r3, [r3, #0]
 800d4a8:	60fb      	str	r3, [r7, #12]
 800d4aa:	e011      	b.n	800d4d0 <vTaskSwitchContext+0x48>
 800d4ac:	68fb      	ldr	r3, [r7, #12]
 800d4ae:	2b00      	cmp	r3, #0
 800d4b0:	d10b      	bne.n	800d4ca <vTaskSwitchContext+0x42>
	__asm volatile
 800d4b2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d4b6:	f383 8811 	msr	BASEPRI, r3
 800d4ba:	f3bf 8f6f 	isb	sy
 800d4be:	f3bf 8f4f 	dsb	sy
 800d4c2:	607b      	str	r3, [r7, #4]
}
 800d4c4:	bf00      	nop
 800d4c6:	bf00      	nop
 800d4c8:	e7fd      	b.n	800d4c6 <vTaskSwitchContext+0x3e>
 800d4ca:	68fb      	ldr	r3, [r7, #12]
 800d4cc:	3b01      	subs	r3, #1
 800d4ce:	60fb      	str	r3, [r7, #12]
 800d4d0:	491d      	ldr	r1, [pc, #116]	@ (800d548 <vTaskSwitchContext+0xc0>)
 800d4d2:	68fa      	ldr	r2, [r7, #12]
 800d4d4:	4613      	mov	r3, r2
 800d4d6:	009b      	lsls	r3, r3, #2
 800d4d8:	4413      	add	r3, r2
 800d4da:	009b      	lsls	r3, r3, #2
 800d4dc:	440b      	add	r3, r1
 800d4de:	681b      	ldr	r3, [r3, #0]
 800d4e0:	2b00      	cmp	r3, #0
 800d4e2:	d0e3      	beq.n	800d4ac <vTaskSwitchContext+0x24>
 800d4e4:	68fa      	ldr	r2, [r7, #12]
 800d4e6:	4613      	mov	r3, r2
 800d4e8:	009b      	lsls	r3, r3, #2
 800d4ea:	4413      	add	r3, r2
 800d4ec:	009b      	lsls	r3, r3, #2
 800d4ee:	4a16      	ldr	r2, [pc, #88]	@ (800d548 <vTaskSwitchContext+0xc0>)
 800d4f0:	4413      	add	r3, r2
 800d4f2:	60bb      	str	r3, [r7, #8]
 800d4f4:	68bb      	ldr	r3, [r7, #8]
 800d4f6:	685b      	ldr	r3, [r3, #4]
 800d4f8:	685a      	ldr	r2, [r3, #4]
 800d4fa:	68bb      	ldr	r3, [r7, #8]
 800d4fc:	605a      	str	r2, [r3, #4]
 800d4fe:	68bb      	ldr	r3, [r7, #8]
 800d500:	685a      	ldr	r2, [r3, #4]
 800d502:	68bb      	ldr	r3, [r7, #8]
 800d504:	3308      	adds	r3, #8
 800d506:	429a      	cmp	r2, r3
 800d508:	d104      	bne.n	800d514 <vTaskSwitchContext+0x8c>
 800d50a:	68bb      	ldr	r3, [r7, #8]
 800d50c:	685b      	ldr	r3, [r3, #4]
 800d50e:	685a      	ldr	r2, [r3, #4]
 800d510:	68bb      	ldr	r3, [r7, #8]
 800d512:	605a      	str	r2, [r3, #4]
 800d514:	68bb      	ldr	r3, [r7, #8]
 800d516:	685b      	ldr	r3, [r3, #4]
 800d518:	68db      	ldr	r3, [r3, #12]
 800d51a:	4a0c      	ldr	r2, [pc, #48]	@ (800d54c <vTaskSwitchContext+0xc4>)
 800d51c:	6013      	str	r3, [r2, #0]
 800d51e:	4a09      	ldr	r2, [pc, #36]	@ (800d544 <vTaskSwitchContext+0xbc>)
 800d520:	68fb      	ldr	r3, [r7, #12]
 800d522:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 800d524:	4b09      	ldr	r3, [pc, #36]	@ (800d54c <vTaskSwitchContext+0xc4>)
 800d526:	681b      	ldr	r3, [r3, #0]
 800d528:	3354      	adds	r3, #84	@ 0x54
 800d52a:	4a09      	ldr	r2, [pc, #36]	@ (800d550 <vTaskSwitchContext+0xc8>)
 800d52c:	6013      	str	r3, [r2, #0]
}
 800d52e:	bf00      	nop
 800d530:	3714      	adds	r7, #20
 800d532:	46bd      	mov	sp, r7
 800d534:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d538:	4770      	bx	lr
 800d53a:	bf00      	nop
 800d53c:	2400ab44 	.word	0x2400ab44
 800d540:	2400ab30 	.word	0x2400ab30
 800d544:	2400ab24 	.word	0x2400ab24
 800d548:	2400a64c 	.word	0x2400a64c
 800d54c:	2400a648 	.word	0x2400a648
 800d550:	240000d8 	.word	0x240000d8

0800d554 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 800d554:	b580      	push	{r7, lr}
 800d556:	b084      	sub	sp, #16
 800d558:	af00      	add	r7, sp, #0
 800d55a:	6078      	str	r0, [r7, #4]
 800d55c:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 800d55e:	687b      	ldr	r3, [r7, #4]
 800d560:	2b00      	cmp	r3, #0
 800d562:	d10b      	bne.n	800d57c <vTaskPlaceOnEventList+0x28>
	__asm volatile
 800d564:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d568:	f383 8811 	msr	BASEPRI, r3
 800d56c:	f3bf 8f6f 	isb	sy
 800d570:	f3bf 8f4f 	dsb	sy
 800d574:	60fb      	str	r3, [r7, #12]
}
 800d576:	bf00      	nop
 800d578:	bf00      	nop
 800d57a:	e7fd      	b.n	800d578 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800d57c:	4b07      	ldr	r3, [pc, #28]	@ (800d59c <vTaskPlaceOnEventList+0x48>)
 800d57e:	681b      	ldr	r3, [r3, #0]
 800d580:	3318      	adds	r3, #24
 800d582:	4619      	mov	r1, r3
 800d584:	6878      	ldr	r0, [r7, #4]
 800d586:	f7fe f8c2 	bl	800b70e <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800d58a:	2101      	movs	r1, #1
 800d58c:	6838      	ldr	r0, [r7, #0]
 800d58e:	f000 fb87 	bl	800dca0 <prvAddCurrentTaskToDelayedList>
}
 800d592:	bf00      	nop
 800d594:	3710      	adds	r7, #16
 800d596:	46bd      	mov	sp, r7
 800d598:	bd80      	pop	{r7, pc}
 800d59a:	bf00      	nop
 800d59c:	2400a648 	.word	0x2400a648

0800d5a0 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800d5a0:	b580      	push	{r7, lr}
 800d5a2:	b086      	sub	sp, #24
 800d5a4:	af00      	add	r7, sp, #0
 800d5a6:	60f8      	str	r0, [r7, #12]
 800d5a8:	60b9      	str	r1, [r7, #8]
 800d5aa:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 800d5ac:	68fb      	ldr	r3, [r7, #12]
 800d5ae:	2b00      	cmp	r3, #0
 800d5b0:	d10b      	bne.n	800d5ca <vTaskPlaceOnEventListRestricted+0x2a>
	__asm volatile
 800d5b2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d5b6:	f383 8811 	msr	BASEPRI, r3
 800d5ba:	f3bf 8f6f 	isb	sy
 800d5be:	f3bf 8f4f 	dsb	sy
 800d5c2:	617b      	str	r3, [r7, #20]
}
 800d5c4:	bf00      	nop
 800d5c6:	bf00      	nop
 800d5c8:	e7fd      	b.n	800d5c6 <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800d5ca:	4b0a      	ldr	r3, [pc, #40]	@ (800d5f4 <vTaskPlaceOnEventListRestricted+0x54>)
 800d5cc:	681b      	ldr	r3, [r3, #0]
 800d5ce:	3318      	adds	r3, #24
 800d5d0:	4619      	mov	r1, r3
 800d5d2:	68f8      	ldr	r0, [r7, #12]
 800d5d4:	f7fe f877 	bl	800b6c6 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 800d5d8:	687b      	ldr	r3, [r7, #4]
 800d5da:	2b00      	cmp	r3, #0
 800d5dc:	d002      	beq.n	800d5e4 <vTaskPlaceOnEventListRestricted+0x44>
		{
			xTicksToWait = portMAX_DELAY;
 800d5de:	f04f 33ff 	mov.w	r3, #4294967295
 800d5e2:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 800d5e4:	6879      	ldr	r1, [r7, #4]
 800d5e6:	68b8      	ldr	r0, [r7, #8]
 800d5e8:	f000 fb5a 	bl	800dca0 <prvAddCurrentTaskToDelayedList>
	}
 800d5ec:	bf00      	nop
 800d5ee:	3718      	adds	r7, #24
 800d5f0:	46bd      	mov	sp, r7
 800d5f2:	bd80      	pop	{r7, pc}
 800d5f4:	2400a648 	.word	0x2400a648

0800d5f8 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 800d5f8:	b580      	push	{r7, lr}
 800d5fa:	b086      	sub	sp, #24
 800d5fc:	af00      	add	r7, sp, #0
 800d5fe:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800d600:	687b      	ldr	r3, [r7, #4]
 800d602:	68db      	ldr	r3, [r3, #12]
 800d604:	68db      	ldr	r3, [r3, #12]
 800d606:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 800d608:	693b      	ldr	r3, [r7, #16]
 800d60a:	2b00      	cmp	r3, #0
 800d60c:	d10b      	bne.n	800d626 <xTaskRemoveFromEventList+0x2e>
	__asm volatile
 800d60e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d612:	f383 8811 	msr	BASEPRI, r3
 800d616:	f3bf 8f6f 	isb	sy
 800d61a:	f3bf 8f4f 	dsb	sy
 800d61e:	60fb      	str	r3, [r7, #12]
}
 800d620:	bf00      	nop
 800d622:	bf00      	nop
 800d624:	e7fd      	b.n	800d622 <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800d626:	693b      	ldr	r3, [r7, #16]
 800d628:	3318      	adds	r3, #24
 800d62a:	4618      	mov	r0, r3
 800d62c:	f7fe f8a8 	bl	800b780 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800d630:	4b1d      	ldr	r3, [pc, #116]	@ (800d6a8 <xTaskRemoveFromEventList+0xb0>)
 800d632:	681b      	ldr	r3, [r3, #0]
 800d634:	2b00      	cmp	r3, #0
 800d636:	d11d      	bne.n	800d674 <xTaskRemoveFromEventList+0x7c>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800d638:	693b      	ldr	r3, [r7, #16]
 800d63a:	3304      	adds	r3, #4
 800d63c:	4618      	mov	r0, r3
 800d63e:	f7fe f89f 	bl	800b780 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 800d642:	693b      	ldr	r3, [r7, #16]
 800d644:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800d646:	4b19      	ldr	r3, [pc, #100]	@ (800d6ac <xTaskRemoveFromEventList+0xb4>)
 800d648:	681b      	ldr	r3, [r3, #0]
 800d64a:	429a      	cmp	r2, r3
 800d64c:	d903      	bls.n	800d656 <xTaskRemoveFromEventList+0x5e>
 800d64e:	693b      	ldr	r3, [r7, #16]
 800d650:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800d652:	4a16      	ldr	r2, [pc, #88]	@ (800d6ac <xTaskRemoveFromEventList+0xb4>)
 800d654:	6013      	str	r3, [r2, #0]
 800d656:	693b      	ldr	r3, [r7, #16]
 800d658:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800d65a:	4613      	mov	r3, r2
 800d65c:	009b      	lsls	r3, r3, #2
 800d65e:	4413      	add	r3, r2
 800d660:	009b      	lsls	r3, r3, #2
 800d662:	4a13      	ldr	r2, [pc, #76]	@ (800d6b0 <xTaskRemoveFromEventList+0xb8>)
 800d664:	441a      	add	r2, r3
 800d666:	693b      	ldr	r3, [r7, #16]
 800d668:	3304      	adds	r3, #4
 800d66a:	4619      	mov	r1, r3
 800d66c:	4610      	mov	r0, r2
 800d66e:	f7fe f82a 	bl	800b6c6 <vListInsertEnd>
 800d672:	e005      	b.n	800d680 <xTaskRemoveFromEventList+0x88>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800d674:	693b      	ldr	r3, [r7, #16]
 800d676:	3318      	adds	r3, #24
 800d678:	4619      	mov	r1, r3
 800d67a:	480e      	ldr	r0, [pc, #56]	@ (800d6b4 <xTaskRemoveFromEventList+0xbc>)
 800d67c:	f7fe f823 	bl	800b6c6 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800d680:	693b      	ldr	r3, [r7, #16]
 800d682:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800d684:	4b0c      	ldr	r3, [pc, #48]	@ (800d6b8 <xTaskRemoveFromEventList+0xc0>)
 800d686:	681b      	ldr	r3, [r3, #0]
 800d688:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800d68a:	429a      	cmp	r2, r3
 800d68c:	d905      	bls.n	800d69a <xTaskRemoveFromEventList+0xa2>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 800d68e:	2301      	movs	r3, #1
 800d690:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 800d692:	4b0a      	ldr	r3, [pc, #40]	@ (800d6bc <xTaskRemoveFromEventList+0xc4>)
 800d694:	2201      	movs	r2, #1
 800d696:	601a      	str	r2, [r3, #0]
 800d698:	e001      	b.n	800d69e <xTaskRemoveFromEventList+0xa6>
	}
	else
	{
		xReturn = pdFALSE;
 800d69a:	2300      	movs	r3, #0
 800d69c:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 800d69e:	697b      	ldr	r3, [r7, #20]
}
 800d6a0:	4618      	mov	r0, r3
 800d6a2:	3718      	adds	r7, #24
 800d6a4:	46bd      	mov	sp, r7
 800d6a6:	bd80      	pop	{r7, pc}
 800d6a8:	2400ab44 	.word	0x2400ab44
 800d6ac:	2400ab24 	.word	0x2400ab24
 800d6b0:	2400a64c 	.word	0x2400a64c
 800d6b4:	2400aadc 	.word	0x2400aadc
 800d6b8:	2400a648 	.word	0x2400a648
 800d6bc:	2400ab30 	.word	0x2400ab30

0800d6c0 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 800d6c0:	b480      	push	{r7}
 800d6c2:	b083      	sub	sp, #12
 800d6c4:	af00      	add	r7, sp, #0
 800d6c6:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 800d6c8:	4b06      	ldr	r3, [pc, #24]	@ (800d6e4 <vTaskInternalSetTimeOutState+0x24>)
 800d6ca:	681a      	ldr	r2, [r3, #0]
 800d6cc:	687b      	ldr	r3, [r7, #4]
 800d6ce:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 800d6d0:	4b05      	ldr	r3, [pc, #20]	@ (800d6e8 <vTaskInternalSetTimeOutState+0x28>)
 800d6d2:	681a      	ldr	r2, [r3, #0]
 800d6d4:	687b      	ldr	r3, [r7, #4]
 800d6d6:	605a      	str	r2, [r3, #4]
}
 800d6d8:	bf00      	nop
 800d6da:	370c      	adds	r7, #12
 800d6dc:	46bd      	mov	sp, r7
 800d6de:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d6e2:	4770      	bx	lr
 800d6e4:	2400ab34 	.word	0x2400ab34
 800d6e8:	2400ab20 	.word	0x2400ab20

0800d6ec <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 800d6ec:	b580      	push	{r7, lr}
 800d6ee:	b088      	sub	sp, #32
 800d6f0:	af00      	add	r7, sp, #0
 800d6f2:	6078      	str	r0, [r7, #4]
 800d6f4:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 800d6f6:	687b      	ldr	r3, [r7, #4]
 800d6f8:	2b00      	cmp	r3, #0
 800d6fa:	d10b      	bne.n	800d714 <xTaskCheckForTimeOut+0x28>
	__asm volatile
 800d6fc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d700:	f383 8811 	msr	BASEPRI, r3
 800d704:	f3bf 8f6f 	isb	sy
 800d708:	f3bf 8f4f 	dsb	sy
 800d70c:	613b      	str	r3, [r7, #16]
}
 800d70e:	bf00      	nop
 800d710:	bf00      	nop
 800d712:	e7fd      	b.n	800d710 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 800d714:	683b      	ldr	r3, [r7, #0]
 800d716:	2b00      	cmp	r3, #0
 800d718:	d10b      	bne.n	800d732 <xTaskCheckForTimeOut+0x46>
	__asm volatile
 800d71a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d71e:	f383 8811 	msr	BASEPRI, r3
 800d722:	f3bf 8f6f 	isb	sy
 800d726:	f3bf 8f4f 	dsb	sy
 800d72a:	60fb      	str	r3, [r7, #12]
}
 800d72c:	bf00      	nop
 800d72e:	bf00      	nop
 800d730:	e7fd      	b.n	800d72e <xTaskCheckForTimeOut+0x42>

	taskENTER_CRITICAL();
 800d732:	f7fe f981 	bl	800ba38 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 800d736:	4b1d      	ldr	r3, [pc, #116]	@ (800d7ac <xTaskCheckForTimeOut+0xc0>)
 800d738:	681b      	ldr	r3, [r3, #0]
 800d73a:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 800d73c:	687b      	ldr	r3, [r7, #4]
 800d73e:	685b      	ldr	r3, [r3, #4]
 800d740:	69ba      	ldr	r2, [r7, #24]
 800d742:	1ad3      	subs	r3, r2, r3
 800d744:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 800d746:	683b      	ldr	r3, [r7, #0]
 800d748:	681b      	ldr	r3, [r3, #0]
 800d74a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d74e:	d102      	bne.n	800d756 <xTaskCheckForTimeOut+0x6a>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 800d750:	2300      	movs	r3, #0
 800d752:	61fb      	str	r3, [r7, #28]
 800d754:	e023      	b.n	800d79e <xTaskCheckForTimeOut+0xb2>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800d756:	687b      	ldr	r3, [r7, #4]
 800d758:	681a      	ldr	r2, [r3, #0]
 800d75a:	4b15      	ldr	r3, [pc, #84]	@ (800d7b0 <xTaskCheckForTimeOut+0xc4>)
 800d75c:	681b      	ldr	r3, [r3, #0]
 800d75e:	429a      	cmp	r2, r3
 800d760:	d007      	beq.n	800d772 <xTaskCheckForTimeOut+0x86>
 800d762:	687b      	ldr	r3, [r7, #4]
 800d764:	685b      	ldr	r3, [r3, #4]
 800d766:	69ba      	ldr	r2, [r7, #24]
 800d768:	429a      	cmp	r2, r3
 800d76a:	d302      	bcc.n	800d772 <xTaskCheckForTimeOut+0x86>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 800d76c:	2301      	movs	r3, #1
 800d76e:	61fb      	str	r3, [r7, #28]
 800d770:	e015      	b.n	800d79e <xTaskCheckForTimeOut+0xb2>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800d772:	683b      	ldr	r3, [r7, #0]
 800d774:	681b      	ldr	r3, [r3, #0]
 800d776:	697a      	ldr	r2, [r7, #20]
 800d778:	429a      	cmp	r2, r3
 800d77a:	d20b      	bcs.n	800d794 <xTaskCheckForTimeOut+0xa8>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 800d77c:	683b      	ldr	r3, [r7, #0]
 800d77e:	681a      	ldr	r2, [r3, #0]
 800d780:	697b      	ldr	r3, [r7, #20]
 800d782:	1ad2      	subs	r2, r2, r3
 800d784:	683b      	ldr	r3, [r7, #0]
 800d786:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 800d788:	6878      	ldr	r0, [r7, #4]
 800d78a:	f7ff ff99 	bl	800d6c0 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 800d78e:	2300      	movs	r3, #0
 800d790:	61fb      	str	r3, [r7, #28]
 800d792:	e004      	b.n	800d79e <xTaskCheckForTimeOut+0xb2>
		}
		else
		{
			*pxTicksToWait = 0;
 800d794:	683b      	ldr	r3, [r7, #0]
 800d796:	2200      	movs	r2, #0
 800d798:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 800d79a:	2301      	movs	r3, #1
 800d79c:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 800d79e:	f7fe f97d 	bl	800ba9c <vPortExitCritical>

	return xReturn;
 800d7a2:	69fb      	ldr	r3, [r7, #28]
}
 800d7a4:	4618      	mov	r0, r3
 800d7a6:	3720      	adds	r7, #32
 800d7a8:	46bd      	mov	sp, r7
 800d7aa:	bd80      	pop	{r7, pc}
 800d7ac:	2400ab20 	.word	0x2400ab20
 800d7b0:	2400ab34 	.word	0x2400ab34

0800d7b4 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 800d7b4:	b480      	push	{r7}
 800d7b6:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 800d7b8:	4b03      	ldr	r3, [pc, #12]	@ (800d7c8 <vTaskMissedYield+0x14>)
 800d7ba:	2201      	movs	r2, #1
 800d7bc:	601a      	str	r2, [r3, #0]
}
 800d7be:	bf00      	nop
 800d7c0:	46bd      	mov	sp, r7
 800d7c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d7c6:	4770      	bx	lr
 800d7c8:	2400ab30 	.word	0x2400ab30

0800d7cc <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 800d7cc:	b580      	push	{r7, lr}
 800d7ce:	b082      	sub	sp, #8
 800d7d0:	af00      	add	r7, sp, #0
 800d7d2:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 800d7d4:	f000 f852 	bl	800d87c <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800d7d8:	4b06      	ldr	r3, [pc, #24]	@ (800d7f4 <prvIdleTask+0x28>)
 800d7da:	681b      	ldr	r3, [r3, #0]
 800d7dc:	2b01      	cmp	r3, #1
 800d7de:	d9f9      	bls.n	800d7d4 <prvIdleTask+0x8>
			{
				taskYIELD();
 800d7e0:	4b05      	ldr	r3, [pc, #20]	@ (800d7f8 <prvIdleTask+0x2c>)
 800d7e2:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800d7e6:	601a      	str	r2, [r3, #0]
 800d7e8:	f3bf 8f4f 	dsb	sy
 800d7ec:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 800d7f0:	e7f0      	b.n	800d7d4 <prvIdleTask+0x8>
 800d7f2:	bf00      	nop
 800d7f4:	2400a64c 	.word	0x2400a64c
 800d7f8:	e000ed04 	.word	0xe000ed04

0800d7fc <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 800d7fc:	b580      	push	{r7, lr}
 800d7fe:	b082      	sub	sp, #8
 800d800:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800d802:	2300      	movs	r3, #0
 800d804:	607b      	str	r3, [r7, #4]
 800d806:	e00c      	b.n	800d822 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800d808:	687a      	ldr	r2, [r7, #4]
 800d80a:	4613      	mov	r3, r2
 800d80c:	009b      	lsls	r3, r3, #2
 800d80e:	4413      	add	r3, r2
 800d810:	009b      	lsls	r3, r3, #2
 800d812:	4a12      	ldr	r2, [pc, #72]	@ (800d85c <prvInitialiseTaskLists+0x60>)
 800d814:	4413      	add	r3, r2
 800d816:	4618      	mov	r0, r3
 800d818:	f7fd ff28 	bl	800b66c <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800d81c:	687b      	ldr	r3, [r7, #4]
 800d81e:	3301      	adds	r3, #1
 800d820:	607b      	str	r3, [r7, #4]
 800d822:	687b      	ldr	r3, [r7, #4]
 800d824:	2b37      	cmp	r3, #55	@ 0x37
 800d826:	d9ef      	bls.n	800d808 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 800d828:	480d      	ldr	r0, [pc, #52]	@ (800d860 <prvInitialiseTaskLists+0x64>)
 800d82a:	f7fd ff1f 	bl	800b66c <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800d82e:	480d      	ldr	r0, [pc, #52]	@ (800d864 <prvInitialiseTaskLists+0x68>)
 800d830:	f7fd ff1c 	bl	800b66c <vListInitialise>
	vListInitialise( &xPendingReadyList );
 800d834:	480c      	ldr	r0, [pc, #48]	@ (800d868 <prvInitialiseTaskLists+0x6c>)
 800d836:	f7fd ff19 	bl	800b66c <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800d83a:	480c      	ldr	r0, [pc, #48]	@ (800d86c <prvInitialiseTaskLists+0x70>)
 800d83c:	f7fd ff16 	bl	800b66c <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 800d840:	480b      	ldr	r0, [pc, #44]	@ (800d870 <prvInitialiseTaskLists+0x74>)
 800d842:	f7fd ff13 	bl	800b66c <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800d846:	4b0b      	ldr	r3, [pc, #44]	@ (800d874 <prvInitialiseTaskLists+0x78>)
 800d848:	4a05      	ldr	r2, [pc, #20]	@ (800d860 <prvInitialiseTaskLists+0x64>)
 800d84a:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800d84c:	4b0a      	ldr	r3, [pc, #40]	@ (800d878 <prvInitialiseTaskLists+0x7c>)
 800d84e:	4a05      	ldr	r2, [pc, #20]	@ (800d864 <prvInitialiseTaskLists+0x68>)
 800d850:	601a      	str	r2, [r3, #0]
}
 800d852:	bf00      	nop
 800d854:	3708      	adds	r7, #8
 800d856:	46bd      	mov	sp, r7
 800d858:	bd80      	pop	{r7, pc}
 800d85a:	bf00      	nop
 800d85c:	2400a64c 	.word	0x2400a64c
 800d860:	2400aaac 	.word	0x2400aaac
 800d864:	2400aac0 	.word	0x2400aac0
 800d868:	2400aadc 	.word	0x2400aadc
 800d86c:	2400aaf0 	.word	0x2400aaf0
 800d870:	2400ab08 	.word	0x2400ab08
 800d874:	2400aad4 	.word	0x2400aad4
 800d878:	2400aad8 	.word	0x2400aad8

0800d87c <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 800d87c:	b580      	push	{r7, lr}
 800d87e:	b082      	sub	sp, #8
 800d880:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800d882:	e019      	b.n	800d8b8 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 800d884:	f7fe f8d8 	bl	800ba38 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800d888:	4b10      	ldr	r3, [pc, #64]	@ (800d8cc <prvCheckTasksWaitingTermination+0x50>)
 800d88a:	68db      	ldr	r3, [r3, #12]
 800d88c:	68db      	ldr	r3, [r3, #12]
 800d88e:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800d890:	687b      	ldr	r3, [r7, #4]
 800d892:	3304      	adds	r3, #4
 800d894:	4618      	mov	r0, r3
 800d896:	f7fd ff73 	bl	800b780 <uxListRemove>
				--uxCurrentNumberOfTasks;
 800d89a:	4b0d      	ldr	r3, [pc, #52]	@ (800d8d0 <prvCheckTasksWaitingTermination+0x54>)
 800d89c:	681b      	ldr	r3, [r3, #0]
 800d89e:	3b01      	subs	r3, #1
 800d8a0:	4a0b      	ldr	r2, [pc, #44]	@ (800d8d0 <prvCheckTasksWaitingTermination+0x54>)
 800d8a2:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 800d8a4:	4b0b      	ldr	r3, [pc, #44]	@ (800d8d4 <prvCheckTasksWaitingTermination+0x58>)
 800d8a6:	681b      	ldr	r3, [r3, #0]
 800d8a8:	3b01      	subs	r3, #1
 800d8aa:	4a0a      	ldr	r2, [pc, #40]	@ (800d8d4 <prvCheckTasksWaitingTermination+0x58>)
 800d8ac:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800d8ae:	f7fe f8f5 	bl	800ba9c <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800d8b2:	6878      	ldr	r0, [r7, #4]
 800d8b4:	f000 f810 	bl	800d8d8 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800d8b8:	4b06      	ldr	r3, [pc, #24]	@ (800d8d4 <prvCheckTasksWaitingTermination+0x58>)
 800d8ba:	681b      	ldr	r3, [r3, #0]
 800d8bc:	2b00      	cmp	r3, #0
 800d8be:	d1e1      	bne.n	800d884 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 800d8c0:	bf00      	nop
 800d8c2:	bf00      	nop
 800d8c4:	3708      	adds	r7, #8
 800d8c6:	46bd      	mov	sp, r7
 800d8c8:	bd80      	pop	{r7, pc}
 800d8ca:	bf00      	nop
 800d8cc:	2400aaf0 	.word	0x2400aaf0
 800d8d0:	2400ab1c 	.word	0x2400ab1c
 800d8d4:	2400ab04 	.word	0x2400ab04

0800d8d8 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 800d8d8:	b580      	push	{r7, lr}
 800d8da:	b084      	sub	sp, #16
 800d8dc:	af00      	add	r7, sp, #0
 800d8de:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 800d8e0:	687b      	ldr	r3, [r7, #4]
 800d8e2:	3354      	adds	r3, #84	@ 0x54
 800d8e4:	4618      	mov	r0, r3
 800d8e6:	f01d fa75 	bl	802add4 <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800d8ea:	687b      	ldr	r3, [r7, #4]
 800d8ec:	f893 30a5 	ldrb.w	r3, [r3, #165]	@ 0xa5
 800d8f0:	2b00      	cmp	r3, #0
 800d8f2:	d108      	bne.n	800d906 <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 800d8f4:	687b      	ldr	r3, [r7, #4]
 800d8f6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800d8f8:	4618      	mov	r0, r3
 800d8fa:	f7fd fd97 	bl	800b42c <vPortFree>
				vPortFree( pxTCB );
 800d8fe:	6878      	ldr	r0, [r7, #4]
 800d900:	f7fd fd94 	bl	800b42c <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 800d904:	e019      	b.n	800d93a <prvDeleteTCB+0x62>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 800d906:	687b      	ldr	r3, [r7, #4]
 800d908:	f893 30a5 	ldrb.w	r3, [r3, #165]	@ 0xa5
 800d90c:	2b01      	cmp	r3, #1
 800d90e:	d103      	bne.n	800d918 <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 800d910:	6878      	ldr	r0, [r7, #4]
 800d912:	f7fd fd8b 	bl	800b42c <vPortFree>
	}
 800d916:	e010      	b.n	800d93a <prvDeleteTCB+0x62>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 800d918:	687b      	ldr	r3, [r7, #4]
 800d91a:	f893 30a5 	ldrb.w	r3, [r3, #165]	@ 0xa5
 800d91e:	2b02      	cmp	r3, #2
 800d920:	d00b      	beq.n	800d93a <prvDeleteTCB+0x62>
	__asm volatile
 800d922:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d926:	f383 8811 	msr	BASEPRI, r3
 800d92a:	f3bf 8f6f 	isb	sy
 800d92e:	f3bf 8f4f 	dsb	sy
 800d932:	60fb      	str	r3, [r7, #12]
}
 800d934:	bf00      	nop
 800d936:	bf00      	nop
 800d938:	e7fd      	b.n	800d936 <prvDeleteTCB+0x5e>
	}
 800d93a:	bf00      	nop
 800d93c:	3710      	adds	r7, #16
 800d93e:	46bd      	mov	sp, r7
 800d940:	bd80      	pop	{r7, pc}
	...

0800d944 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 800d944:	b480      	push	{r7}
 800d946:	b083      	sub	sp, #12
 800d948:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800d94a:	4b0c      	ldr	r3, [pc, #48]	@ (800d97c <prvResetNextTaskUnblockTime+0x38>)
 800d94c:	681b      	ldr	r3, [r3, #0]
 800d94e:	681b      	ldr	r3, [r3, #0]
 800d950:	2b00      	cmp	r3, #0
 800d952:	d104      	bne.n	800d95e <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800d954:	4b0a      	ldr	r3, [pc, #40]	@ (800d980 <prvResetNextTaskUnblockTime+0x3c>)
 800d956:	f04f 32ff 	mov.w	r2, #4294967295
 800d95a:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 800d95c:	e008      	b.n	800d970 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800d95e:	4b07      	ldr	r3, [pc, #28]	@ (800d97c <prvResetNextTaskUnblockTime+0x38>)
 800d960:	681b      	ldr	r3, [r3, #0]
 800d962:	68db      	ldr	r3, [r3, #12]
 800d964:	68db      	ldr	r3, [r3, #12]
 800d966:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800d968:	687b      	ldr	r3, [r7, #4]
 800d96a:	685b      	ldr	r3, [r3, #4]
 800d96c:	4a04      	ldr	r2, [pc, #16]	@ (800d980 <prvResetNextTaskUnblockTime+0x3c>)
 800d96e:	6013      	str	r3, [r2, #0]
}
 800d970:	bf00      	nop
 800d972:	370c      	adds	r7, #12
 800d974:	46bd      	mov	sp, r7
 800d976:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d97a:	4770      	bx	lr
 800d97c:	2400aad4 	.word	0x2400aad4
 800d980:	2400ab3c 	.word	0x2400ab3c

0800d984 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 800d984:	b480      	push	{r7}
 800d986:	b083      	sub	sp, #12
 800d988:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800d98a:	4b0b      	ldr	r3, [pc, #44]	@ (800d9b8 <xTaskGetSchedulerState+0x34>)
 800d98c:	681b      	ldr	r3, [r3, #0]
 800d98e:	2b00      	cmp	r3, #0
 800d990:	d102      	bne.n	800d998 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800d992:	2301      	movs	r3, #1
 800d994:	607b      	str	r3, [r7, #4]
 800d996:	e008      	b.n	800d9aa <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800d998:	4b08      	ldr	r3, [pc, #32]	@ (800d9bc <xTaskGetSchedulerState+0x38>)
 800d99a:	681b      	ldr	r3, [r3, #0]
 800d99c:	2b00      	cmp	r3, #0
 800d99e:	d102      	bne.n	800d9a6 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 800d9a0:	2302      	movs	r3, #2
 800d9a2:	607b      	str	r3, [r7, #4]
 800d9a4:	e001      	b.n	800d9aa <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800d9a6:	2300      	movs	r3, #0
 800d9a8:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800d9aa:	687b      	ldr	r3, [r7, #4]
	}
 800d9ac:	4618      	mov	r0, r3
 800d9ae:	370c      	adds	r7, #12
 800d9b0:	46bd      	mov	sp, r7
 800d9b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d9b6:	4770      	bx	lr
 800d9b8:	2400ab28 	.word	0x2400ab28
 800d9bc:	2400ab44 	.word	0x2400ab44

0800d9c0 <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 800d9c0:	b580      	push	{r7, lr}
 800d9c2:	b084      	sub	sp, #16
 800d9c4:	af00      	add	r7, sp, #0
 800d9c6:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 800d9c8:	687b      	ldr	r3, [r7, #4]
 800d9ca:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 800d9cc:	2300      	movs	r3, #0
 800d9ce:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 800d9d0:	687b      	ldr	r3, [r7, #4]
 800d9d2:	2b00      	cmp	r3, #0
 800d9d4:	d051      	beq.n	800da7a <xTaskPriorityInherit+0xba>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 800d9d6:	68bb      	ldr	r3, [r7, #8]
 800d9d8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800d9da:	4b2a      	ldr	r3, [pc, #168]	@ (800da84 <xTaskPriorityInherit+0xc4>)
 800d9dc:	681b      	ldr	r3, [r3, #0]
 800d9de:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800d9e0:	429a      	cmp	r2, r3
 800d9e2:	d241      	bcs.n	800da68 <xTaskPriorityInherit+0xa8>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 800d9e4:	68bb      	ldr	r3, [r7, #8]
 800d9e6:	699b      	ldr	r3, [r3, #24]
 800d9e8:	2b00      	cmp	r3, #0
 800d9ea:	db06      	blt.n	800d9fa <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800d9ec:	4b25      	ldr	r3, [pc, #148]	@ (800da84 <xTaskPriorityInherit+0xc4>)
 800d9ee:	681b      	ldr	r3, [r3, #0]
 800d9f0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800d9f2:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 800d9f6:	68bb      	ldr	r3, [r7, #8]
 800d9f8:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 800d9fa:	68bb      	ldr	r3, [r7, #8]
 800d9fc:	6959      	ldr	r1, [r3, #20]
 800d9fe:	68bb      	ldr	r3, [r7, #8]
 800da00:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800da02:	4613      	mov	r3, r2
 800da04:	009b      	lsls	r3, r3, #2
 800da06:	4413      	add	r3, r2
 800da08:	009b      	lsls	r3, r3, #2
 800da0a:	4a1f      	ldr	r2, [pc, #124]	@ (800da88 <xTaskPriorityInherit+0xc8>)
 800da0c:	4413      	add	r3, r2
 800da0e:	4299      	cmp	r1, r3
 800da10:	d122      	bne.n	800da58 <xTaskPriorityInherit+0x98>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800da12:	68bb      	ldr	r3, [r7, #8]
 800da14:	3304      	adds	r3, #4
 800da16:	4618      	mov	r0, r3
 800da18:	f7fd feb2 	bl	800b780 <uxListRemove>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 800da1c:	4b19      	ldr	r3, [pc, #100]	@ (800da84 <xTaskPriorityInherit+0xc4>)
 800da1e:	681b      	ldr	r3, [r3, #0]
 800da20:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800da22:	68bb      	ldr	r3, [r7, #8]
 800da24:	62da      	str	r2, [r3, #44]	@ 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 800da26:	68bb      	ldr	r3, [r7, #8]
 800da28:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800da2a:	4b18      	ldr	r3, [pc, #96]	@ (800da8c <xTaskPriorityInherit+0xcc>)
 800da2c:	681b      	ldr	r3, [r3, #0]
 800da2e:	429a      	cmp	r2, r3
 800da30:	d903      	bls.n	800da3a <xTaskPriorityInherit+0x7a>
 800da32:	68bb      	ldr	r3, [r7, #8]
 800da34:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800da36:	4a15      	ldr	r2, [pc, #84]	@ (800da8c <xTaskPriorityInherit+0xcc>)
 800da38:	6013      	str	r3, [r2, #0]
 800da3a:	68bb      	ldr	r3, [r7, #8]
 800da3c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800da3e:	4613      	mov	r3, r2
 800da40:	009b      	lsls	r3, r3, #2
 800da42:	4413      	add	r3, r2
 800da44:	009b      	lsls	r3, r3, #2
 800da46:	4a10      	ldr	r2, [pc, #64]	@ (800da88 <xTaskPriorityInherit+0xc8>)
 800da48:	441a      	add	r2, r3
 800da4a:	68bb      	ldr	r3, [r7, #8]
 800da4c:	3304      	adds	r3, #4
 800da4e:	4619      	mov	r1, r3
 800da50:	4610      	mov	r0, r2
 800da52:	f7fd fe38 	bl	800b6c6 <vListInsertEnd>
 800da56:	e004      	b.n	800da62 <xTaskPriorityInherit+0xa2>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 800da58:	4b0a      	ldr	r3, [pc, #40]	@ (800da84 <xTaskPriorityInherit+0xc4>)
 800da5a:	681b      	ldr	r3, [r3, #0]
 800da5c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800da5e:	68bb      	ldr	r3, [r7, #8]
 800da60:	62da      	str	r2, [r3, #44]	@ 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 800da62:	2301      	movs	r3, #1
 800da64:	60fb      	str	r3, [r7, #12]
 800da66:	e008      	b.n	800da7a <xTaskPriorityInherit+0xba>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 800da68:	68bb      	ldr	r3, [r7, #8]
 800da6a:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800da6c:	4b05      	ldr	r3, [pc, #20]	@ (800da84 <xTaskPriorityInherit+0xc4>)
 800da6e:	681b      	ldr	r3, [r3, #0]
 800da70:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800da72:	429a      	cmp	r2, r3
 800da74:	d201      	bcs.n	800da7a <xTaskPriorityInherit+0xba>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 800da76:	2301      	movs	r3, #1
 800da78:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800da7a:	68fb      	ldr	r3, [r7, #12]
	}
 800da7c:	4618      	mov	r0, r3
 800da7e:	3710      	adds	r7, #16
 800da80:	46bd      	mov	sp, r7
 800da82:	bd80      	pop	{r7, pc}
 800da84:	2400a648 	.word	0x2400a648
 800da88:	2400a64c 	.word	0x2400a64c
 800da8c:	2400ab24 	.word	0x2400ab24

0800da90 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 800da90:	b580      	push	{r7, lr}
 800da92:	b086      	sub	sp, #24
 800da94:	af00      	add	r7, sp, #0
 800da96:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 800da98:	687b      	ldr	r3, [r7, #4]
 800da9a:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 800da9c:	2300      	movs	r3, #0
 800da9e:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800daa0:	687b      	ldr	r3, [r7, #4]
 800daa2:	2b00      	cmp	r3, #0
 800daa4:	d058      	beq.n	800db58 <xTaskPriorityDisinherit+0xc8>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 800daa6:	4b2f      	ldr	r3, [pc, #188]	@ (800db64 <xTaskPriorityDisinherit+0xd4>)
 800daa8:	681b      	ldr	r3, [r3, #0]
 800daaa:	693a      	ldr	r2, [r7, #16]
 800daac:	429a      	cmp	r2, r3
 800daae:	d00b      	beq.n	800dac8 <xTaskPriorityDisinherit+0x38>
	__asm volatile
 800dab0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800dab4:	f383 8811 	msr	BASEPRI, r3
 800dab8:	f3bf 8f6f 	isb	sy
 800dabc:	f3bf 8f4f 	dsb	sy
 800dac0:	60fb      	str	r3, [r7, #12]
}
 800dac2:	bf00      	nop
 800dac4:	bf00      	nop
 800dac6:	e7fd      	b.n	800dac4 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 800dac8:	693b      	ldr	r3, [r7, #16]
 800daca:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800dacc:	2b00      	cmp	r3, #0
 800dace:	d10b      	bne.n	800dae8 <xTaskPriorityDisinherit+0x58>
	__asm volatile
 800dad0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800dad4:	f383 8811 	msr	BASEPRI, r3
 800dad8:	f3bf 8f6f 	isb	sy
 800dadc:	f3bf 8f4f 	dsb	sy
 800dae0:	60bb      	str	r3, [r7, #8]
}
 800dae2:	bf00      	nop
 800dae4:	bf00      	nop
 800dae6:	e7fd      	b.n	800dae4 <xTaskPriorityDisinherit+0x54>
			( pxTCB->uxMutexesHeld )--;
 800dae8:	693b      	ldr	r3, [r7, #16]
 800daea:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800daec:	1e5a      	subs	r2, r3, #1
 800daee:	693b      	ldr	r3, [r7, #16]
 800daf0:	651a      	str	r2, [r3, #80]	@ 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800daf2:	693b      	ldr	r3, [r7, #16]
 800daf4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800daf6:	693b      	ldr	r3, [r7, #16]
 800daf8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800dafa:	429a      	cmp	r2, r3
 800dafc:	d02c      	beq.n	800db58 <xTaskPriorityDisinherit+0xc8>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800dafe:	693b      	ldr	r3, [r7, #16]
 800db00:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800db02:	2b00      	cmp	r3, #0
 800db04:	d128      	bne.n	800db58 <xTaskPriorityDisinherit+0xc8>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800db06:	693b      	ldr	r3, [r7, #16]
 800db08:	3304      	adds	r3, #4
 800db0a:	4618      	mov	r0, r3
 800db0c:	f7fd fe38 	bl	800b780 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 800db10:	693b      	ldr	r3, [r7, #16]
 800db12:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800db14:	693b      	ldr	r3, [r7, #16]
 800db16:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800db18:	693b      	ldr	r3, [r7, #16]
 800db1a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800db1c:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 800db20:	693b      	ldr	r3, [r7, #16]
 800db22:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 800db24:	693b      	ldr	r3, [r7, #16]
 800db26:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800db28:	4b0f      	ldr	r3, [pc, #60]	@ (800db68 <xTaskPriorityDisinherit+0xd8>)
 800db2a:	681b      	ldr	r3, [r3, #0]
 800db2c:	429a      	cmp	r2, r3
 800db2e:	d903      	bls.n	800db38 <xTaskPriorityDisinherit+0xa8>
 800db30:	693b      	ldr	r3, [r7, #16]
 800db32:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800db34:	4a0c      	ldr	r2, [pc, #48]	@ (800db68 <xTaskPriorityDisinherit+0xd8>)
 800db36:	6013      	str	r3, [r2, #0]
 800db38:	693b      	ldr	r3, [r7, #16]
 800db3a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800db3c:	4613      	mov	r3, r2
 800db3e:	009b      	lsls	r3, r3, #2
 800db40:	4413      	add	r3, r2
 800db42:	009b      	lsls	r3, r3, #2
 800db44:	4a09      	ldr	r2, [pc, #36]	@ (800db6c <xTaskPriorityDisinherit+0xdc>)
 800db46:	441a      	add	r2, r3
 800db48:	693b      	ldr	r3, [r7, #16]
 800db4a:	3304      	adds	r3, #4
 800db4c:	4619      	mov	r1, r3
 800db4e:	4610      	mov	r0, r2
 800db50:	f7fd fdb9 	bl	800b6c6 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 800db54:	2301      	movs	r3, #1
 800db56:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800db58:	697b      	ldr	r3, [r7, #20]
	}
 800db5a:	4618      	mov	r0, r3
 800db5c:	3718      	adds	r7, #24
 800db5e:	46bd      	mov	sp, r7
 800db60:	bd80      	pop	{r7, pc}
 800db62:	bf00      	nop
 800db64:	2400a648 	.word	0x2400a648
 800db68:	2400ab24 	.word	0x2400ab24
 800db6c:	2400a64c 	.word	0x2400a64c

0800db70 <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 800db70:	b580      	push	{r7, lr}
 800db72:	b088      	sub	sp, #32
 800db74:	af00      	add	r7, sp, #0
 800db76:	6078      	str	r0, [r7, #4]
 800db78:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = pxMutexHolder;
 800db7a:	687b      	ldr	r3, [r7, #4]
 800db7c:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 800db7e:	2301      	movs	r3, #1
 800db80:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800db82:	687b      	ldr	r3, [r7, #4]
 800db84:	2b00      	cmp	r3, #0
 800db86:	d06c      	beq.n	800dc62 <vTaskPriorityDisinheritAfterTimeout+0xf2>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 800db88:	69bb      	ldr	r3, [r7, #24]
 800db8a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800db8c:	2b00      	cmp	r3, #0
 800db8e:	d10b      	bne.n	800dba8 <vTaskPriorityDisinheritAfterTimeout+0x38>
	__asm volatile
 800db90:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800db94:	f383 8811 	msr	BASEPRI, r3
 800db98:	f3bf 8f6f 	isb	sy
 800db9c:	f3bf 8f4f 	dsb	sy
 800dba0:	60fb      	str	r3, [r7, #12]
}
 800dba2:	bf00      	nop
 800dba4:	bf00      	nop
 800dba6:	e7fd      	b.n	800dba4 <vTaskPriorityDisinheritAfterTimeout+0x34>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 800dba8:	69bb      	ldr	r3, [r7, #24]
 800dbaa:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800dbac:	683a      	ldr	r2, [r7, #0]
 800dbae:	429a      	cmp	r2, r3
 800dbb0:	d902      	bls.n	800dbb8 <vTaskPriorityDisinheritAfterTimeout+0x48>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 800dbb2:	683b      	ldr	r3, [r7, #0]
 800dbb4:	61fb      	str	r3, [r7, #28]
 800dbb6:	e002      	b.n	800dbbe <vTaskPriorityDisinheritAfterTimeout+0x4e>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 800dbb8:	69bb      	ldr	r3, [r7, #24]
 800dbba:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800dbbc:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 800dbbe:	69bb      	ldr	r3, [r7, #24]
 800dbc0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800dbc2:	69fa      	ldr	r2, [r7, #28]
 800dbc4:	429a      	cmp	r2, r3
 800dbc6:	d04c      	beq.n	800dc62 <vTaskPriorityDisinheritAfterTimeout+0xf2>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 800dbc8:	69bb      	ldr	r3, [r7, #24]
 800dbca:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800dbcc:	697a      	ldr	r2, [r7, #20]
 800dbce:	429a      	cmp	r2, r3
 800dbd0:	d147      	bne.n	800dc62 <vTaskPriorityDisinheritAfterTimeout+0xf2>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 800dbd2:	4b26      	ldr	r3, [pc, #152]	@ (800dc6c <vTaskPriorityDisinheritAfterTimeout+0xfc>)
 800dbd4:	681b      	ldr	r3, [r3, #0]
 800dbd6:	69ba      	ldr	r2, [r7, #24]
 800dbd8:	429a      	cmp	r2, r3
 800dbda:	d10b      	bne.n	800dbf4 <vTaskPriorityDisinheritAfterTimeout+0x84>
	__asm volatile
 800dbdc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800dbe0:	f383 8811 	msr	BASEPRI, r3
 800dbe4:	f3bf 8f6f 	isb	sy
 800dbe8:	f3bf 8f4f 	dsb	sy
 800dbec:	60bb      	str	r3, [r7, #8]
}
 800dbee:	bf00      	nop
 800dbf0:	bf00      	nop
 800dbf2:	e7fd      	b.n	800dbf0 <vTaskPriorityDisinheritAfterTimeout+0x80>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 800dbf4:	69bb      	ldr	r3, [r7, #24]
 800dbf6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800dbf8:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 800dbfa:	69bb      	ldr	r3, [r7, #24]
 800dbfc:	69fa      	ldr	r2, [r7, #28]
 800dbfe:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 800dc00:	69bb      	ldr	r3, [r7, #24]
 800dc02:	699b      	ldr	r3, [r3, #24]
 800dc04:	2b00      	cmp	r3, #0
 800dc06:	db04      	blt.n	800dc12 <vTaskPriorityDisinheritAfterTimeout+0xa2>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800dc08:	69fb      	ldr	r3, [r7, #28]
 800dc0a:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 800dc0e:	69bb      	ldr	r3, [r7, #24]
 800dc10:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 800dc12:	69bb      	ldr	r3, [r7, #24]
 800dc14:	6959      	ldr	r1, [r3, #20]
 800dc16:	693a      	ldr	r2, [r7, #16]
 800dc18:	4613      	mov	r3, r2
 800dc1a:	009b      	lsls	r3, r3, #2
 800dc1c:	4413      	add	r3, r2
 800dc1e:	009b      	lsls	r3, r3, #2
 800dc20:	4a13      	ldr	r2, [pc, #76]	@ (800dc70 <vTaskPriorityDisinheritAfterTimeout+0x100>)
 800dc22:	4413      	add	r3, r2
 800dc24:	4299      	cmp	r1, r3
 800dc26:	d11c      	bne.n	800dc62 <vTaskPriorityDisinheritAfterTimeout+0xf2>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800dc28:	69bb      	ldr	r3, [r7, #24]
 800dc2a:	3304      	adds	r3, #4
 800dc2c:	4618      	mov	r0, r3
 800dc2e:	f7fd fda7 	bl	800b780 <uxListRemove>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 800dc32:	69bb      	ldr	r3, [r7, #24]
 800dc34:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800dc36:	4b0f      	ldr	r3, [pc, #60]	@ (800dc74 <vTaskPriorityDisinheritAfterTimeout+0x104>)
 800dc38:	681b      	ldr	r3, [r3, #0]
 800dc3a:	429a      	cmp	r2, r3
 800dc3c:	d903      	bls.n	800dc46 <vTaskPriorityDisinheritAfterTimeout+0xd6>
 800dc3e:	69bb      	ldr	r3, [r7, #24]
 800dc40:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800dc42:	4a0c      	ldr	r2, [pc, #48]	@ (800dc74 <vTaskPriorityDisinheritAfterTimeout+0x104>)
 800dc44:	6013      	str	r3, [r2, #0]
 800dc46:	69bb      	ldr	r3, [r7, #24]
 800dc48:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800dc4a:	4613      	mov	r3, r2
 800dc4c:	009b      	lsls	r3, r3, #2
 800dc4e:	4413      	add	r3, r2
 800dc50:	009b      	lsls	r3, r3, #2
 800dc52:	4a07      	ldr	r2, [pc, #28]	@ (800dc70 <vTaskPriorityDisinheritAfterTimeout+0x100>)
 800dc54:	441a      	add	r2, r3
 800dc56:	69bb      	ldr	r3, [r7, #24]
 800dc58:	3304      	adds	r3, #4
 800dc5a:	4619      	mov	r1, r3
 800dc5c:	4610      	mov	r0, r2
 800dc5e:	f7fd fd32 	bl	800b6c6 <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800dc62:	bf00      	nop
 800dc64:	3720      	adds	r7, #32
 800dc66:	46bd      	mov	sp, r7
 800dc68:	bd80      	pop	{r7, pc}
 800dc6a:	bf00      	nop
 800dc6c:	2400a648 	.word	0x2400a648
 800dc70:	2400a64c 	.word	0x2400a64c
 800dc74:	2400ab24 	.word	0x2400ab24

0800dc78 <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	TaskHandle_t pvTaskIncrementMutexHeldCount( void )
	{
 800dc78:	b480      	push	{r7}
 800dc7a:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 800dc7c:	4b07      	ldr	r3, [pc, #28]	@ (800dc9c <pvTaskIncrementMutexHeldCount+0x24>)
 800dc7e:	681b      	ldr	r3, [r3, #0]
 800dc80:	2b00      	cmp	r3, #0
 800dc82:	d004      	beq.n	800dc8e <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 800dc84:	4b05      	ldr	r3, [pc, #20]	@ (800dc9c <pvTaskIncrementMutexHeldCount+0x24>)
 800dc86:	681b      	ldr	r3, [r3, #0]
 800dc88:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800dc8a:	3201      	adds	r2, #1
 800dc8c:	651a      	str	r2, [r3, #80]	@ 0x50
		}

		return pxCurrentTCB;
 800dc8e:	4b03      	ldr	r3, [pc, #12]	@ (800dc9c <pvTaskIncrementMutexHeldCount+0x24>)
 800dc90:	681b      	ldr	r3, [r3, #0]
	}
 800dc92:	4618      	mov	r0, r3
 800dc94:	46bd      	mov	sp, r7
 800dc96:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dc9a:	4770      	bx	lr
 800dc9c:	2400a648 	.word	0x2400a648

0800dca0 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 800dca0:	b580      	push	{r7, lr}
 800dca2:	b084      	sub	sp, #16
 800dca4:	af00      	add	r7, sp, #0
 800dca6:	6078      	str	r0, [r7, #4]
 800dca8:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800dcaa:	4b21      	ldr	r3, [pc, #132]	@ (800dd30 <prvAddCurrentTaskToDelayedList+0x90>)
 800dcac:	681b      	ldr	r3, [r3, #0]
 800dcae:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800dcb0:	4b20      	ldr	r3, [pc, #128]	@ (800dd34 <prvAddCurrentTaskToDelayedList+0x94>)
 800dcb2:	681b      	ldr	r3, [r3, #0]
 800dcb4:	3304      	adds	r3, #4
 800dcb6:	4618      	mov	r0, r3
 800dcb8:	f7fd fd62 	bl	800b780 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800dcbc:	687b      	ldr	r3, [r7, #4]
 800dcbe:	f1b3 3fff 	cmp.w	r3, #4294967295
 800dcc2:	d10a      	bne.n	800dcda <prvAddCurrentTaskToDelayedList+0x3a>
 800dcc4:	683b      	ldr	r3, [r7, #0]
 800dcc6:	2b00      	cmp	r3, #0
 800dcc8:	d007      	beq.n	800dcda <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800dcca:	4b1a      	ldr	r3, [pc, #104]	@ (800dd34 <prvAddCurrentTaskToDelayedList+0x94>)
 800dccc:	681b      	ldr	r3, [r3, #0]
 800dcce:	3304      	adds	r3, #4
 800dcd0:	4619      	mov	r1, r3
 800dcd2:	4819      	ldr	r0, [pc, #100]	@ (800dd38 <prvAddCurrentTaskToDelayedList+0x98>)
 800dcd4:	f7fd fcf7 	bl	800b6c6 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800dcd8:	e026      	b.n	800dd28 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800dcda:	68fa      	ldr	r2, [r7, #12]
 800dcdc:	687b      	ldr	r3, [r7, #4]
 800dcde:	4413      	add	r3, r2
 800dce0:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800dce2:	4b14      	ldr	r3, [pc, #80]	@ (800dd34 <prvAddCurrentTaskToDelayedList+0x94>)
 800dce4:	681b      	ldr	r3, [r3, #0]
 800dce6:	68ba      	ldr	r2, [r7, #8]
 800dce8:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800dcea:	68ba      	ldr	r2, [r7, #8]
 800dcec:	68fb      	ldr	r3, [r7, #12]
 800dcee:	429a      	cmp	r2, r3
 800dcf0:	d209      	bcs.n	800dd06 <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800dcf2:	4b12      	ldr	r3, [pc, #72]	@ (800dd3c <prvAddCurrentTaskToDelayedList+0x9c>)
 800dcf4:	681a      	ldr	r2, [r3, #0]
 800dcf6:	4b0f      	ldr	r3, [pc, #60]	@ (800dd34 <prvAddCurrentTaskToDelayedList+0x94>)
 800dcf8:	681b      	ldr	r3, [r3, #0]
 800dcfa:	3304      	adds	r3, #4
 800dcfc:	4619      	mov	r1, r3
 800dcfe:	4610      	mov	r0, r2
 800dd00:	f7fd fd05 	bl	800b70e <vListInsert>
}
 800dd04:	e010      	b.n	800dd28 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800dd06:	4b0e      	ldr	r3, [pc, #56]	@ (800dd40 <prvAddCurrentTaskToDelayedList+0xa0>)
 800dd08:	681a      	ldr	r2, [r3, #0]
 800dd0a:	4b0a      	ldr	r3, [pc, #40]	@ (800dd34 <prvAddCurrentTaskToDelayedList+0x94>)
 800dd0c:	681b      	ldr	r3, [r3, #0]
 800dd0e:	3304      	adds	r3, #4
 800dd10:	4619      	mov	r1, r3
 800dd12:	4610      	mov	r0, r2
 800dd14:	f7fd fcfb 	bl	800b70e <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800dd18:	4b0a      	ldr	r3, [pc, #40]	@ (800dd44 <prvAddCurrentTaskToDelayedList+0xa4>)
 800dd1a:	681b      	ldr	r3, [r3, #0]
 800dd1c:	68ba      	ldr	r2, [r7, #8]
 800dd1e:	429a      	cmp	r2, r3
 800dd20:	d202      	bcs.n	800dd28 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 800dd22:	4a08      	ldr	r2, [pc, #32]	@ (800dd44 <prvAddCurrentTaskToDelayedList+0xa4>)
 800dd24:	68bb      	ldr	r3, [r7, #8]
 800dd26:	6013      	str	r3, [r2, #0]
}
 800dd28:	bf00      	nop
 800dd2a:	3710      	adds	r7, #16
 800dd2c:	46bd      	mov	sp, r7
 800dd2e:	bd80      	pop	{r7, pc}
 800dd30:	2400ab20 	.word	0x2400ab20
 800dd34:	2400a648 	.word	0x2400a648
 800dd38:	2400ab08 	.word	0x2400ab08
 800dd3c:	2400aad8 	.word	0x2400aad8
 800dd40:	2400aad4 	.word	0x2400aad4
 800dd44:	2400ab3c 	.word	0x2400ab3c

0800dd48 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 800dd48:	b580      	push	{r7, lr}
 800dd4a:	b08a      	sub	sp, #40	@ 0x28
 800dd4c:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 800dd4e:	2300      	movs	r3, #0
 800dd50:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 800dd52:	f000 fb13 	bl	800e37c <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 800dd56:	4b1d      	ldr	r3, [pc, #116]	@ (800ddcc <xTimerCreateTimerTask+0x84>)
 800dd58:	681b      	ldr	r3, [r3, #0]
 800dd5a:	2b00      	cmp	r3, #0
 800dd5c:	d021      	beq.n	800dda2 <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 800dd5e:	2300      	movs	r3, #0
 800dd60:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 800dd62:	2300      	movs	r3, #0
 800dd64:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 800dd66:	1d3a      	adds	r2, r7, #4
 800dd68:	f107 0108 	add.w	r1, r7, #8
 800dd6c:	f107 030c 	add.w	r3, r7, #12
 800dd70:	4618      	mov	r0, r3
 800dd72:	f7fd fa73 	bl	800b25c <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 800dd76:	6879      	ldr	r1, [r7, #4]
 800dd78:	68bb      	ldr	r3, [r7, #8]
 800dd7a:	68fa      	ldr	r2, [r7, #12]
 800dd7c:	9202      	str	r2, [sp, #8]
 800dd7e:	9301      	str	r3, [sp, #4]
 800dd80:	2302      	movs	r3, #2
 800dd82:	9300      	str	r3, [sp, #0]
 800dd84:	2300      	movs	r3, #0
 800dd86:	460a      	mov	r2, r1
 800dd88:	4911      	ldr	r1, [pc, #68]	@ (800ddd0 <xTimerCreateTimerTask+0x88>)
 800dd8a:	4812      	ldr	r0, [pc, #72]	@ (800ddd4 <xTimerCreateTimerTask+0x8c>)
 800dd8c:	f7fe ffa2 	bl	800ccd4 <xTaskCreateStatic>
 800dd90:	4603      	mov	r3, r0
 800dd92:	4a11      	ldr	r2, [pc, #68]	@ (800ddd8 <xTimerCreateTimerTask+0x90>)
 800dd94:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 800dd96:	4b10      	ldr	r3, [pc, #64]	@ (800ddd8 <xTimerCreateTimerTask+0x90>)
 800dd98:	681b      	ldr	r3, [r3, #0]
 800dd9a:	2b00      	cmp	r3, #0
 800dd9c:	d001      	beq.n	800dda2 <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 800dd9e:	2301      	movs	r3, #1
 800dda0:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 800dda2:	697b      	ldr	r3, [r7, #20]
 800dda4:	2b00      	cmp	r3, #0
 800dda6:	d10b      	bne.n	800ddc0 <xTimerCreateTimerTask+0x78>
	__asm volatile
 800dda8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ddac:	f383 8811 	msr	BASEPRI, r3
 800ddb0:	f3bf 8f6f 	isb	sy
 800ddb4:	f3bf 8f4f 	dsb	sy
 800ddb8:	613b      	str	r3, [r7, #16]
}
 800ddba:	bf00      	nop
 800ddbc:	bf00      	nop
 800ddbe:	e7fd      	b.n	800ddbc <xTimerCreateTimerTask+0x74>
	return xReturn;
 800ddc0:	697b      	ldr	r3, [r7, #20]
}
 800ddc2:	4618      	mov	r0, r3
 800ddc4:	3718      	adds	r7, #24
 800ddc6:	46bd      	mov	sp, r7
 800ddc8:	bd80      	pop	{r7, pc}
 800ddca:	bf00      	nop
 800ddcc:	2400ab78 	.word	0x2400ab78
 800ddd0:	0802c6e4 	.word	0x0802c6e4
 800ddd4:	0800df15 	.word	0x0800df15
 800ddd8:	2400ab7c 	.word	0x2400ab7c

0800dddc <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 800dddc:	b580      	push	{r7, lr}
 800ddde:	b08a      	sub	sp, #40	@ 0x28
 800dde0:	af00      	add	r7, sp, #0
 800dde2:	60f8      	str	r0, [r7, #12]
 800dde4:	60b9      	str	r1, [r7, #8]
 800dde6:	607a      	str	r2, [r7, #4]
 800dde8:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 800ddea:	2300      	movs	r3, #0
 800ddec:	627b      	str	r3, [r7, #36]	@ 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 800ddee:	68fb      	ldr	r3, [r7, #12]
 800ddf0:	2b00      	cmp	r3, #0
 800ddf2:	d10b      	bne.n	800de0c <xTimerGenericCommand+0x30>
	__asm volatile
 800ddf4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ddf8:	f383 8811 	msr	BASEPRI, r3
 800ddfc:	f3bf 8f6f 	isb	sy
 800de00:	f3bf 8f4f 	dsb	sy
 800de04:	623b      	str	r3, [r7, #32]
}
 800de06:	bf00      	nop
 800de08:	bf00      	nop
 800de0a:	e7fd      	b.n	800de08 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 800de0c:	4b19      	ldr	r3, [pc, #100]	@ (800de74 <xTimerGenericCommand+0x98>)
 800de0e:	681b      	ldr	r3, [r3, #0]
 800de10:	2b00      	cmp	r3, #0
 800de12:	d02a      	beq.n	800de6a <xTimerGenericCommand+0x8e>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 800de14:	68bb      	ldr	r3, [r7, #8]
 800de16:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 800de18:	687b      	ldr	r3, [r7, #4]
 800de1a:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 800de1c:	68fb      	ldr	r3, [r7, #12]
 800de1e:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 800de20:	68bb      	ldr	r3, [r7, #8]
 800de22:	2b05      	cmp	r3, #5
 800de24:	dc18      	bgt.n	800de58 <xTimerGenericCommand+0x7c>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 800de26:	f7ff fdad 	bl	800d984 <xTaskGetSchedulerState>
 800de2a:	4603      	mov	r3, r0
 800de2c:	2b02      	cmp	r3, #2
 800de2e:	d109      	bne.n	800de44 <xTimerGenericCommand+0x68>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 800de30:	4b10      	ldr	r3, [pc, #64]	@ (800de74 <xTimerGenericCommand+0x98>)
 800de32:	6818      	ldr	r0, [r3, #0]
 800de34:	f107 0110 	add.w	r1, r7, #16
 800de38:	2300      	movs	r3, #0
 800de3a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800de3c:	f7fe f8d2 	bl	800bfe4 <xQueueGenericSend>
 800de40:	6278      	str	r0, [r7, #36]	@ 0x24
 800de42:	e012      	b.n	800de6a <xTimerGenericCommand+0x8e>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 800de44:	4b0b      	ldr	r3, [pc, #44]	@ (800de74 <xTimerGenericCommand+0x98>)
 800de46:	6818      	ldr	r0, [r3, #0]
 800de48:	f107 0110 	add.w	r1, r7, #16
 800de4c:	2300      	movs	r3, #0
 800de4e:	2200      	movs	r2, #0
 800de50:	f7fe f8c8 	bl	800bfe4 <xQueueGenericSend>
 800de54:	6278      	str	r0, [r7, #36]	@ 0x24
 800de56:	e008      	b.n	800de6a <xTimerGenericCommand+0x8e>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 800de58:	4b06      	ldr	r3, [pc, #24]	@ (800de74 <xTimerGenericCommand+0x98>)
 800de5a:	6818      	ldr	r0, [r3, #0]
 800de5c:	f107 0110 	add.w	r1, r7, #16
 800de60:	2300      	movs	r3, #0
 800de62:	683a      	ldr	r2, [r7, #0]
 800de64:	f7fe f9c0 	bl	800c1e8 <xQueueGenericSendFromISR>
 800de68:	6278      	str	r0, [r7, #36]	@ 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 800de6a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 800de6c:	4618      	mov	r0, r3
 800de6e:	3728      	adds	r7, #40	@ 0x28
 800de70:	46bd      	mov	sp, r7
 800de72:	bd80      	pop	{r7, pc}
 800de74:	2400ab78 	.word	0x2400ab78

0800de78 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 800de78:	b580      	push	{r7, lr}
 800de7a:	b088      	sub	sp, #32
 800de7c:	af02      	add	r7, sp, #8
 800de7e:	6078      	str	r0, [r7, #4]
 800de80:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800de82:	4b23      	ldr	r3, [pc, #140]	@ (800df10 <prvProcessExpiredTimer+0x98>)
 800de84:	681b      	ldr	r3, [r3, #0]
 800de86:	68db      	ldr	r3, [r3, #12]
 800de88:	68db      	ldr	r3, [r3, #12]
 800de8a:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800de8c:	697b      	ldr	r3, [r7, #20]
 800de8e:	3304      	adds	r3, #4
 800de90:	4618      	mov	r0, r3
 800de92:	f7fd fc75 	bl	800b780 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800de96:	697b      	ldr	r3, [r7, #20]
 800de98:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800de9c:	f003 0304 	and.w	r3, r3, #4
 800dea0:	2b00      	cmp	r3, #0
 800dea2:	d023      	beq.n	800deec <prvProcessExpiredTimer+0x74>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 800dea4:	697b      	ldr	r3, [r7, #20]
 800dea6:	699a      	ldr	r2, [r3, #24]
 800dea8:	687b      	ldr	r3, [r7, #4]
 800deaa:	18d1      	adds	r1, r2, r3
 800deac:	687b      	ldr	r3, [r7, #4]
 800deae:	683a      	ldr	r2, [r7, #0]
 800deb0:	6978      	ldr	r0, [r7, #20]
 800deb2:	f000 f8d5 	bl	800e060 <prvInsertTimerInActiveList>
 800deb6:	4603      	mov	r3, r0
 800deb8:	2b00      	cmp	r3, #0
 800deba:	d020      	beq.n	800defe <prvProcessExpiredTimer+0x86>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800debc:	2300      	movs	r3, #0
 800debe:	9300      	str	r3, [sp, #0]
 800dec0:	2300      	movs	r3, #0
 800dec2:	687a      	ldr	r2, [r7, #4]
 800dec4:	2100      	movs	r1, #0
 800dec6:	6978      	ldr	r0, [r7, #20]
 800dec8:	f7ff ff88 	bl	800dddc <xTimerGenericCommand>
 800decc:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 800dece:	693b      	ldr	r3, [r7, #16]
 800ded0:	2b00      	cmp	r3, #0
 800ded2:	d114      	bne.n	800defe <prvProcessExpiredTimer+0x86>
	__asm volatile
 800ded4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ded8:	f383 8811 	msr	BASEPRI, r3
 800dedc:	f3bf 8f6f 	isb	sy
 800dee0:	f3bf 8f4f 	dsb	sy
 800dee4:	60fb      	str	r3, [r7, #12]
}
 800dee6:	bf00      	nop
 800dee8:	bf00      	nop
 800deea:	e7fd      	b.n	800dee8 <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800deec:	697b      	ldr	r3, [r7, #20]
 800deee:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800def2:	f023 0301 	bic.w	r3, r3, #1
 800def6:	b2da      	uxtb	r2, r3
 800def8:	697b      	ldr	r3, [r7, #20]
 800defa:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800defe:	697b      	ldr	r3, [r7, #20]
 800df00:	6a1b      	ldr	r3, [r3, #32]
 800df02:	6978      	ldr	r0, [r7, #20]
 800df04:	4798      	blx	r3
}
 800df06:	bf00      	nop
 800df08:	3718      	adds	r7, #24
 800df0a:	46bd      	mov	sp, r7
 800df0c:	bd80      	pop	{r7, pc}
 800df0e:	bf00      	nop
 800df10:	2400ab70 	.word	0x2400ab70

0800df14 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 800df14:	b580      	push	{r7, lr}
 800df16:	b084      	sub	sp, #16
 800df18:	af00      	add	r7, sp, #0
 800df1a:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800df1c:	f107 0308 	add.w	r3, r7, #8
 800df20:	4618      	mov	r0, r3
 800df22:	f000 f859 	bl	800dfd8 <prvGetNextExpireTime>
 800df26:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 800df28:	68bb      	ldr	r3, [r7, #8]
 800df2a:	4619      	mov	r1, r3
 800df2c:	68f8      	ldr	r0, [r7, #12]
 800df2e:	f000 f805 	bl	800df3c <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 800df32:	f000 f8d7 	bl	800e0e4 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800df36:	bf00      	nop
 800df38:	e7f0      	b.n	800df1c <prvTimerTask+0x8>
	...

0800df3c <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 800df3c:	b580      	push	{r7, lr}
 800df3e:	b084      	sub	sp, #16
 800df40:	af00      	add	r7, sp, #0
 800df42:	6078      	str	r0, [r7, #4]
 800df44:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 800df46:	f7ff f929 	bl	800d19c <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800df4a:	f107 0308 	add.w	r3, r7, #8
 800df4e:	4618      	mov	r0, r3
 800df50:	f000 f866 	bl	800e020 <prvSampleTimeNow>
 800df54:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 800df56:	68bb      	ldr	r3, [r7, #8]
 800df58:	2b00      	cmp	r3, #0
 800df5a:	d130      	bne.n	800dfbe <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 800df5c:	683b      	ldr	r3, [r7, #0]
 800df5e:	2b00      	cmp	r3, #0
 800df60:	d10a      	bne.n	800df78 <prvProcessTimerOrBlockTask+0x3c>
 800df62:	687a      	ldr	r2, [r7, #4]
 800df64:	68fb      	ldr	r3, [r7, #12]
 800df66:	429a      	cmp	r2, r3
 800df68:	d806      	bhi.n	800df78 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 800df6a:	f7ff f925 	bl	800d1b8 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 800df6e:	68f9      	ldr	r1, [r7, #12]
 800df70:	6878      	ldr	r0, [r7, #4]
 800df72:	f7ff ff81 	bl	800de78 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 800df76:	e024      	b.n	800dfc2 <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 800df78:	683b      	ldr	r3, [r7, #0]
 800df7a:	2b00      	cmp	r3, #0
 800df7c:	d008      	beq.n	800df90 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 800df7e:	4b13      	ldr	r3, [pc, #76]	@ (800dfcc <prvProcessTimerOrBlockTask+0x90>)
 800df80:	681b      	ldr	r3, [r3, #0]
 800df82:	681b      	ldr	r3, [r3, #0]
 800df84:	2b00      	cmp	r3, #0
 800df86:	d101      	bne.n	800df8c <prvProcessTimerOrBlockTask+0x50>
 800df88:	2301      	movs	r3, #1
 800df8a:	e000      	b.n	800df8e <prvProcessTimerOrBlockTask+0x52>
 800df8c:	2300      	movs	r3, #0
 800df8e:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 800df90:	4b0f      	ldr	r3, [pc, #60]	@ (800dfd0 <prvProcessTimerOrBlockTask+0x94>)
 800df92:	6818      	ldr	r0, [r3, #0]
 800df94:	687a      	ldr	r2, [r7, #4]
 800df96:	68fb      	ldr	r3, [r7, #12]
 800df98:	1ad3      	subs	r3, r2, r3
 800df9a:	683a      	ldr	r2, [r7, #0]
 800df9c:	4619      	mov	r1, r3
 800df9e:	f7fe fe65 	bl	800cc6c <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 800dfa2:	f7ff f909 	bl	800d1b8 <xTaskResumeAll>
 800dfa6:	4603      	mov	r3, r0
 800dfa8:	2b00      	cmp	r3, #0
 800dfaa:	d10a      	bne.n	800dfc2 <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 800dfac:	4b09      	ldr	r3, [pc, #36]	@ (800dfd4 <prvProcessTimerOrBlockTask+0x98>)
 800dfae:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800dfb2:	601a      	str	r2, [r3, #0]
 800dfb4:	f3bf 8f4f 	dsb	sy
 800dfb8:	f3bf 8f6f 	isb	sy
}
 800dfbc:	e001      	b.n	800dfc2 <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 800dfbe:	f7ff f8fb 	bl	800d1b8 <xTaskResumeAll>
}
 800dfc2:	bf00      	nop
 800dfc4:	3710      	adds	r7, #16
 800dfc6:	46bd      	mov	sp, r7
 800dfc8:	bd80      	pop	{r7, pc}
 800dfca:	bf00      	nop
 800dfcc:	2400ab74 	.word	0x2400ab74
 800dfd0:	2400ab78 	.word	0x2400ab78
 800dfd4:	e000ed04 	.word	0xe000ed04

0800dfd8 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 800dfd8:	b480      	push	{r7}
 800dfda:	b085      	sub	sp, #20
 800dfdc:	af00      	add	r7, sp, #0
 800dfde:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 800dfe0:	4b0e      	ldr	r3, [pc, #56]	@ (800e01c <prvGetNextExpireTime+0x44>)
 800dfe2:	681b      	ldr	r3, [r3, #0]
 800dfe4:	681b      	ldr	r3, [r3, #0]
 800dfe6:	2b00      	cmp	r3, #0
 800dfe8:	d101      	bne.n	800dfee <prvGetNextExpireTime+0x16>
 800dfea:	2201      	movs	r2, #1
 800dfec:	e000      	b.n	800dff0 <prvGetNextExpireTime+0x18>
 800dfee:	2200      	movs	r2, #0
 800dff0:	687b      	ldr	r3, [r7, #4]
 800dff2:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 800dff4:	687b      	ldr	r3, [r7, #4]
 800dff6:	681b      	ldr	r3, [r3, #0]
 800dff8:	2b00      	cmp	r3, #0
 800dffa:	d105      	bne.n	800e008 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800dffc:	4b07      	ldr	r3, [pc, #28]	@ (800e01c <prvGetNextExpireTime+0x44>)
 800dffe:	681b      	ldr	r3, [r3, #0]
 800e000:	68db      	ldr	r3, [r3, #12]
 800e002:	681b      	ldr	r3, [r3, #0]
 800e004:	60fb      	str	r3, [r7, #12]
 800e006:	e001      	b.n	800e00c <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 800e008:	2300      	movs	r3, #0
 800e00a:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 800e00c:	68fb      	ldr	r3, [r7, #12]
}
 800e00e:	4618      	mov	r0, r3
 800e010:	3714      	adds	r7, #20
 800e012:	46bd      	mov	sp, r7
 800e014:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e018:	4770      	bx	lr
 800e01a:	bf00      	nop
 800e01c:	2400ab70 	.word	0x2400ab70

0800e020 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 800e020:	b580      	push	{r7, lr}
 800e022:	b084      	sub	sp, #16
 800e024:	af00      	add	r7, sp, #0
 800e026:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 800e028:	f7ff f964 	bl	800d2f4 <xTaskGetTickCount>
 800e02c:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 800e02e:	4b0b      	ldr	r3, [pc, #44]	@ (800e05c <prvSampleTimeNow+0x3c>)
 800e030:	681b      	ldr	r3, [r3, #0]
 800e032:	68fa      	ldr	r2, [r7, #12]
 800e034:	429a      	cmp	r2, r3
 800e036:	d205      	bcs.n	800e044 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 800e038:	f000 f93a 	bl	800e2b0 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 800e03c:	687b      	ldr	r3, [r7, #4]
 800e03e:	2201      	movs	r2, #1
 800e040:	601a      	str	r2, [r3, #0]
 800e042:	e002      	b.n	800e04a <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 800e044:	687b      	ldr	r3, [r7, #4]
 800e046:	2200      	movs	r2, #0
 800e048:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 800e04a:	4a04      	ldr	r2, [pc, #16]	@ (800e05c <prvSampleTimeNow+0x3c>)
 800e04c:	68fb      	ldr	r3, [r7, #12]
 800e04e:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 800e050:	68fb      	ldr	r3, [r7, #12]
}
 800e052:	4618      	mov	r0, r3
 800e054:	3710      	adds	r7, #16
 800e056:	46bd      	mov	sp, r7
 800e058:	bd80      	pop	{r7, pc}
 800e05a:	bf00      	nop
 800e05c:	2400ab80 	.word	0x2400ab80

0800e060 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 800e060:	b580      	push	{r7, lr}
 800e062:	b086      	sub	sp, #24
 800e064:	af00      	add	r7, sp, #0
 800e066:	60f8      	str	r0, [r7, #12]
 800e068:	60b9      	str	r1, [r7, #8]
 800e06a:	607a      	str	r2, [r7, #4]
 800e06c:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 800e06e:	2300      	movs	r3, #0
 800e070:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 800e072:	68fb      	ldr	r3, [r7, #12]
 800e074:	68ba      	ldr	r2, [r7, #8]
 800e076:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800e078:	68fb      	ldr	r3, [r7, #12]
 800e07a:	68fa      	ldr	r2, [r7, #12]
 800e07c:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 800e07e:	68ba      	ldr	r2, [r7, #8]
 800e080:	687b      	ldr	r3, [r7, #4]
 800e082:	429a      	cmp	r2, r3
 800e084:	d812      	bhi.n	800e0ac <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800e086:	687a      	ldr	r2, [r7, #4]
 800e088:	683b      	ldr	r3, [r7, #0]
 800e08a:	1ad2      	subs	r2, r2, r3
 800e08c:	68fb      	ldr	r3, [r7, #12]
 800e08e:	699b      	ldr	r3, [r3, #24]
 800e090:	429a      	cmp	r2, r3
 800e092:	d302      	bcc.n	800e09a <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 800e094:	2301      	movs	r3, #1
 800e096:	617b      	str	r3, [r7, #20]
 800e098:	e01b      	b.n	800e0d2 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 800e09a:	4b10      	ldr	r3, [pc, #64]	@ (800e0dc <prvInsertTimerInActiveList+0x7c>)
 800e09c:	681a      	ldr	r2, [r3, #0]
 800e09e:	68fb      	ldr	r3, [r7, #12]
 800e0a0:	3304      	adds	r3, #4
 800e0a2:	4619      	mov	r1, r3
 800e0a4:	4610      	mov	r0, r2
 800e0a6:	f7fd fb32 	bl	800b70e <vListInsert>
 800e0aa:	e012      	b.n	800e0d2 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 800e0ac:	687a      	ldr	r2, [r7, #4]
 800e0ae:	683b      	ldr	r3, [r7, #0]
 800e0b0:	429a      	cmp	r2, r3
 800e0b2:	d206      	bcs.n	800e0c2 <prvInsertTimerInActiveList+0x62>
 800e0b4:	68ba      	ldr	r2, [r7, #8]
 800e0b6:	683b      	ldr	r3, [r7, #0]
 800e0b8:	429a      	cmp	r2, r3
 800e0ba:	d302      	bcc.n	800e0c2 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 800e0bc:	2301      	movs	r3, #1
 800e0be:	617b      	str	r3, [r7, #20]
 800e0c0:	e007      	b.n	800e0d2 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800e0c2:	4b07      	ldr	r3, [pc, #28]	@ (800e0e0 <prvInsertTimerInActiveList+0x80>)
 800e0c4:	681a      	ldr	r2, [r3, #0]
 800e0c6:	68fb      	ldr	r3, [r7, #12]
 800e0c8:	3304      	adds	r3, #4
 800e0ca:	4619      	mov	r1, r3
 800e0cc:	4610      	mov	r0, r2
 800e0ce:	f7fd fb1e 	bl	800b70e <vListInsert>
		}
	}

	return xProcessTimerNow;
 800e0d2:	697b      	ldr	r3, [r7, #20]
}
 800e0d4:	4618      	mov	r0, r3
 800e0d6:	3718      	adds	r7, #24
 800e0d8:	46bd      	mov	sp, r7
 800e0da:	bd80      	pop	{r7, pc}
 800e0dc:	2400ab74 	.word	0x2400ab74
 800e0e0:	2400ab70 	.word	0x2400ab70

0800e0e4 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 800e0e4:	b580      	push	{r7, lr}
 800e0e6:	b08e      	sub	sp, #56	@ 0x38
 800e0e8:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800e0ea:	e0ce      	b.n	800e28a <prvProcessReceivedCommands+0x1a6>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 800e0ec:	687b      	ldr	r3, [r7, #4]
 800e0ee:	2b00      	cmp	r3, #0
 800e0f0:	da19      	bge.n	800e126 <prvProcessReceivedCommands+0x42>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 800e0f2:	1d3b      	adds	r3, r7, #4
 800e0f4:	3304      	adds	r3, #4
 800e0f6:	62fb      	str	r3, [r7, #44]	@ 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 800e0f8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e0fa:	2b00      	cmp	r3, #0
 800e0fc:	d10b      	bne.n	800e116 <prvProcessReceivedCommands+0x32>
	__asm volatile
 800e0fe:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e102:	f383 8811 	msr	BASEPRI, r3
 800e106:	f3bf 8f6f 	isb	sy
 800e10a:	f3bf 8f4f 	dsb	sy
 800e10e:	61fb      	str	r3, [r7, #28]
}
 800e110:	bf00      	nop
 800e112:	bf00      	nop
 800e114:	e7fd      	b.n	800e112 <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 800e116:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e118:	681b      	ldr	r3, [r3, #0]
 800e11a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800e11c:	6850      	ldr	r0, [r2, #4]
 800e11e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800e120:	6892      	ldr	r2, [r2, #8]
 800e122:	4611      	mov	r1, r2
 800e124:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 800e126:	687b      	ldr	r3, [r7, #4]
 800e128:	2b00      	cmp	r3, #0
 800e12a:	f2c0 80ae 	blt.w	800e28a <prvProcessReceivedCommands+0x1a6>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 800e12e:	68fb      	ldr	r3, [r7, #12]
 800e130:	62bb      	str	r3, [r7, #40]	@ 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 800e132:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e134:	695b      	ldr	r3, [r3, #20]
 800e136:	2b00      	cmp	r3, #0
 800e138:	d004      	beq.n	800e144 <prvProcessReceivedCommands+0x60>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800e13a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e13c:	3304      	adds	r3, #4
 800e13e:	4618      	mov	r0, r3
 800e140:	f7fd fb1e 	bl	800b780 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800e144:	463b      	mov	r3, r7
 800e146:	4618      	mov	r0, r3
 800e148:	f7ff ff6a 	bl	800e020 <prvSampleTimeNow>
 800e14c:	6278      	str	r0, [r7, #36]	@ 0x24

			switch( xMessage.xMessageID )
 800e14e:	687b      	ldr	r3, [r7, #4]
 800e150:	2b09      	cmp	r3, #9
 800e152:	f200 8097 	bhi.w	800e284 <prvProcessReceivedCommands+0x1a0>
 800e156:	a201      	add	r2, pc, #4	@ (adr r2, 800e15c <prvProcessReceivedCommands+0x78>)
 800e158:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e15c:	0800e185 	.word	0x0800e185
 800e160:	0800e185 	.word	0x0800e185
 800e164:	0800e185 	.word	0x0800e185
 800e168:	0800e1fb 	.word	0x0800e1fb
 800e16c:	0800e20f 	.word	0x0800e20f
 800e170:	0800e25b 	.word	0x0800e25b
 800e174:	0800e185 	.word	0x0800e185
 800e178:	0800e185 	.word	0x0800e185
 800e17c:	0800e1fb 	.word	0x0800e1fb
 800e180:	0800e20f 	.word	0x0800e20f
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800e184:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e186:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800e18a:	f043 0301 	orr.w	r3, r3, #1
 800e18e:	b2da      	uxtb	r2, r3
 800e190:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e192:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 800e196:	68ba      	ldr	r2, [r7, #8]
 800e198:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e19a:	699b      	ldr	r3, [r3, #24]
 800e19c:	18d1      	adds	r1, r2, r3
 800e19e:	68bb      	ldr	r3, [r7, #8]
 800e1a0:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800e1a2:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800e1a4:	f7ff ff5c 	bl	800e060 <prvInsertTimerInActiveList>
 800e1a8:	4603      	mov	r3, r0
 800e1aa:	2b00      	cmp	r3, #0
 800e1ac:	d06c      	beq.n	800e288 <prvProcessReceivedCommands+0x1a4>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800e1ae:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e1b0:	6a1b      	ldr	r3, [r3, #32]
 800e1b2:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800e1b4:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800e1b6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e1b8:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800e1bc:	f003 0304 	and.w	r3, r3, #4
 800e1c0:	2b00      	cmp	r3, #0
 800e1c2:	d061      	beq.n	800e288 <prvProcessReceivedCommands+0x1a4>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 800e1c4:	68ba      	ldr	r2, [r7, #8]
 800e1c6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e1c8:	699b      	ldr	r3, [r3, #24]
 800e1ca:	441a      	add	r2, r3
 800e1cc:	2300      	movs	r3, #0
 800e1ce:	9300      	str	r3, [sp, #0]
 800e1d0:	2300      	movs	r3, #0
 800e1d2:	2100      	movs	r1, #0
 800e1d4:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800e1d6:	f7ff fe01 	bl	800dddc <xTimerGenericCommand>
 800e1da:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 800e1dc:	6a3b      	ldr	r3, [r7, #32]
 800e1de:	2b00      	cmp	r3, #0
 800e1e0:	d152      	bne.n	800e288 <prvProcessReceivedCommands+0x1a4>
	__asm volatile
 800e1e2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e1e6:	f383 8811 	msr	BASEPRI, r3
 800e1ea:	f3bf 8f6f 	isb	sy
 800e1ee:	f3bf 8f4f 	dsb	sy
 800e1f2:	61bb      	str	r3, [r7, #24]
}
 800e1f4:	bf00      	nop
 800e1f6:	bf00      	nop
 800e1f8:	e7fd      	b.n	800e1f6 <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800e1fa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e1fc:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800e200:	f023 0301 	bic.w	r3, r3, #1
 800e204:	b2da      	uxtb	r2, r3
 800e206:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e208:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 800e20c:	e03d      	b.n	800e28a <prvProcessReceivedCommands+0x1a6>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800e20e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e210:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800e214:	f043 0301 	orr.w	r3, r3, #1
 800e218:	b2da      	uxtb	r2, r3
 800e21a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e21c:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 800e220:	68ba      	ldr	r2, [r7, #8]
 800e222:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e224:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 800e226:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e228:	699b      	ldr	r3, [r3, #24]
 800e22a:	2b00      	cmp	r3, #0
 800e22c:	d10b      	bne.n	800e246 <prvProcessReceivedCommands+0x162>
	__asm volatile
 800e22e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e232:	f383 8811 	msr	BASEPRI, r3
 800e236:	f3bf 8f6f 	isb	sy
 800e23a:	f3bf 8f4f 	dsb	sy
 800e23e:	617b      	str	r3, [r7, #20]
}
 800e240:	bf00      	nop
 800e242:	bf00      	nop
 800e244:	e7fd      	b.n	800e242 <prvProcessReceivedCommands+0x15e>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 800e246:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e248:	699a      	ldr	r2, [r3, #24]
 800e24a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e24c:	18d1      	adds	r1, r2, r3
 800e24e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e250:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800e252:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800e254:	f7ff ff04 	bl	800e060 <prvInsertTimerInActiveList>
					break;
 800e258:	e017      	b.n	800e28a <prvProcessReceivedCommands+0x1a6>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 800e25a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e25c:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800e260:	f003 0302 	and.w	r3, r3, #2
 800e264:	2b00      	cmp	r3, #0
 800e266:	d103      	bne.n	800e270 <prvProcessReceivedCommands+0x18c>
						{
							vPortFree( pxTimer );
 800e268:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800e26a:	f7fd f8df 	bl	800b42c <vPortFree>
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 800e26e:	e00c      	b.n	800e28a <prvProcessReceivedCommands+0x1a6>
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800e270:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e272:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800e276:	f023 0301 	bic.w	r3, r3, #1
 800e27a:	b2da      	uxtb	r2, r3
 800e27c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e27e:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 800e282:	e002      	b.n	800e28a <prvProcessReceivedCommands+0x1a6>

				default	:
					/* Don't expect to get here. */
					break;
 800e284:	bf00      	nop
 800e286:	e000      	b.n	800e28a <prvProcessReceivedCommands+0x1a6>
					break;
 800e288:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800e28a:	4b08      	ldr	r3, [pc, #32]	@ (800e2ac <prvProcessReceivedCommands+0x1c8>)
 800e28c:	681b      	ldr	r3, [r3, #0]
 800e28e:	1d39      	adds	r1, r7, #4
 800e290:	2200      	movs	r2, #0
 800e292:	4618      	mov	r0, r3
 800e294:	f7fe f8d6 	bl	800c444 <xQueueReceive>
 800e298:	4603      	mov	r3, r0
 800e29a:	2b00      	cmp	r3, #0
 800e29c:	f47f af26 	bne.w	800e0ec <prvProcessReceivedCommands+0x8>
			}
		}
	}
}
 800e2a0:	bf00      	nop
 800e2a2:	bf00      	nop
 800e2a4:	3730      	adds	r7, #48	@ 0x30
 800e2a6:	46bd      	mov	sp, r7
 800e2a8:	bd80      	pop	{r7, pc}
 800e2aa:	bf00      	nop
 800e2ac:	2400ab78 	.word	0x2400ab78

0800e2b0 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 800e2b0:	b580      	push	{r7, lr}
 800e2b2:	b088      	sub	sp, #32
 800e2b4:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800e2b6:	e049      	b.n	800e34c <prvSwitchTimerLists+0x9c>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800e2b8:	4b2e      	ldr	r3, [pc, #184]	@ (800e374 <prvSwitchTimerLists+0xc4>)
 800e2ba:	681b      	ldr	r3, [r3, #0]
 800e2bc:	68db      	ldr	r3, [r3, #12]
 800e2be:	681b      	ldr	r3, [r3, #0]
 800e2c0:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800e2c2:	4b2c      	ldr	r3, [pc, #176]	@ (800e374 <prvSwitchTimerLists+0xc4>)
 800e2c4:	681b      	ldr	r3, [r3, #0]
 800e2c6:	68db      	ldr	r3, [r3, #12]
 800e2c8:	68db      	ldr	r3, [r3, #12]
 800e2ca:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800e2cc:	68fb      	ldr	r3, [r7, #12]
 800e2ce:	3304      	adds	r3, #4
 800e2d0:	4618      	mov	r0, r3
 800e2d2:	f7fd fa55 	bl	800b780 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800e2d6:	68fb      	ldr	r3, [r7, #12]
 800e2d8:	6a1b      	ldr	r3, [r3, #32]
 800e2da:	68f8      	ldr	r0, [r7, #12]
 800e2dc:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800e2de:	68fb      	ldr	r3, [r7, #12]
 800e2e0:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800e2e4:	f003 0304 	and.w	r3, r3, #4
 800e2e8:	2b00      	cmp	r3, #0
 800e2ea:	d02f      	beq.n	800e34c <prvSwitchTimerLists+0x9c>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 800e2ec:	68fb      	ldr	r3, [r7, #12]
 800e2ee:	699b      	ldr	r3, [r3, #24]
 800e2f0:	693a      	ldr	r2, [r7, #16]
 800e2f2:	4413      	add	r3, r2
 800e2f4:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 800e2f6:	68ba      	ldr	r2, [r7, #8]
 800e2f8:	693b      	ldr	r3, [r7, #16]
 800e2fa:	429a      	cmp	r2, r3
 800e2fc:	d90e      	bls.n	800e31c <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 800e2fe:	68fb      	ldr	r3, [r7, #12]
 800e300:	68ba      	ldr	r2, [r7, #8]
 800e302:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800e304:	68fb      	ldr	r3, [r7, #12]
 800e306:	68fa      	ldr	r2, [r7, #12]
 800e308:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800e30a:	4b1a      	ldr	r3, [pc, #104]	@ (800e374 <prvSwitchTimerLists+0xc4>)
 800e30c:	681a      	ldr	r2, [r3, #0]
 800e30e:	68fb      	ldr	r3, [r7, #12]
 800e310:	3304      	adds	r3, #4
 800e312:	4619      	mov	r1, r3
 800e314:	4610      	mov	r0, r2
 800e316:	f7fd f9fa 	bl	800b70e <vListInsert>
 800e31a:	e017      	b.n	800e34c <prvSwitchTimerLists+0x9c>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800e31c:	2300      	movs	r3, #0
 800e31e:	9300      	str	r3, [sp, #0]
 800e320:	2300      	movs	r3, #0
 800e322:	693a      	ldr	r2, [r7, #16]
 800e324:	2100      	movs	r1, #0
 800e326:	68f8      	ldr	r0, [r7, #12]
 800e328:	f7ff fd58 	bl	800dddc <xTimerGenericCommand>
 800e32c:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 800e32e:	687b      	ldr	r3, [r7, #4]
 800e330:	2b00      	cmp	r3, #0
 800e332:	d10b      	bne.n	800e34c <prvSwitchTimerLists+0x9c>
	__asm volatile
 800e334:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e338:	f383 8811 	msr	BASEPRI, r3
 800e33c:	f3bf 8f6f 	isb	sy
 800e340:	f3bf 8f4f 	dsb	sy
 800e344:	603b      	str	r3, [r7, #0]
}
 800e346:	bf00      	nop
 800e348:	bf00      	nop
 800e34a:	e7fd      	b.n	800e348 <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800e34c:	4b09      	ldr	r3, [pc, #36]	@ (800e374 <prvSwitchTimerLists+0xc4>)
 800e34e:	681b      	ldr	r3, [r3, #0]
 800e350:	681b      	ldr	r3, [r3, #0]
 800e352:	2b00      	cmp	r3, #0
 800e354:	d1b0      	bne.n	800e2b8 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 800e356:	4b07      	ldr	r3, [pc, #28]	@ (800e374 <prvSwitchTimerLists+0xc4>)
 800e358:	681b      	ldr	r3, [r3, #0]
 800e35a:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 800e35c:	4b06      	ldr	r3, [pc, #24]	@ (800e378 <prvSwitchTimerLists+0xc8>)
 800e35e:	681b      	ldr	r3, [r3, #0]
 800e360:	4a04      	ldr	r2, [pc, #16]	@ (800e374 <prvSwitchTimerLists+0xc4>)
 800e362:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 800e364:	4a04      	ldr	r2, [pc, #16]	@ (800e378 <prvSwitchTimerLists+0xc8>)
 800e366:	697b      	ldr	r3, [r7, #20]
 800e368:	6013      	str	r3, [r2, #0]
}
 800e36a:	bf00      	nop
 800e36c:	3718      	adds	r7, #24
 800e36e:	46bd      	mov	sp, r7
 800e370:	bd80      	pop	{r7, pc}
 800e372:	bf00      	nop
 800e374:	2400ab70 	.word	0x2400ab70
 800e378:	2400ab74 	.word	0x2400ab74

0800e37c <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 800e37c:	b580      	push	{r7, lr}
 800e37e:	b082      	sub	sp, #8
 800e380:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 800e382:	f7fd fb59 	bl	800ba38 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 800e386:	4b15      	ldr	r3, [pc, #84]	@ (800e3dc <prvCheckForValidListAndQueue+0x60>)
 800e388:	681b      	ldr	r3, [r3, #0]
 800e38a:	2b00      	cmp	r3, #0
 800e38c:	d120      	bne.n	800e3d0 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 800e38e:	4814      	ldr	r0, [pc, #80]	@ (800e3e0 <prvCheckForValidListAndQueue+0x64>)
 800e390:	f7fd f96c 	bl	800b66c <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 800e394:	4813      	ldr	r0, [pc, #76]	@ (800e3e4 <prvCheckForValidListAndQueue+0x68>)
 800e396:	f7fd f969 	bl	800b66c <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 800e39a:	4b13      	ldr	r3, [pc, #76]	@ (800e3e8 <prvCheckForValidListAndQueue+0x6c>)
 800e39c:	4a10      	ldr	r2, [pc, #64]	@ (800e3e0 <prvCheckForValidListAndQueue+0x64>)
 800e39e:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 800e3a0:	4b12      	ldr	r3, [pc, #72]	@ (800e3ec <prvCheckForValidListAndQueue+0x70>)
 800e3a2:	4a10      	ldr	r2, [pc, #64]	@ (800e3e4 <prvCheckForValidListAndQueue+0x68>)
 800e3a4:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 800e3a6:	2300      	movs	r3, #0
 800e3a8:	9300      	str	r3, [sp, #0]
 800e3aa:	4b11      	ldr	r3, [pc, #68]	@ (800e3f0 <prvCheckForValidListAndQueue+0x74>)
 800e3ac:	4a11      	ldr	r2, [pc, #68]	@ (800e3f4 <prvCheckForValidListAndQueue+0x78>)
 800e3ae:	2110      	movs	r1, #16
 800e3b0:	200a      	movs	r0, #10
 800e3b2:	f7fd fccd 	bl	800bd50 <xQueueGenericCreateStatic>
 800e3b6:	4603      	mov	r3, r0
 800e3b8:	4a08      	ldr	r2, [pc, #32]	@ (800e3dc <prvCheckForValidListAndQueue+0x60>)
 800e3ba:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 800e3bc:	4b07      	ldr	r3, [pc, #28]	@ (800e3dc <prvCheckForValidListAndQueue+0x60>)
 800e3be:	681b      	ldr	r3, [r3, #0]
 800e3c0:	2b00      	cmp	r3, #0
 800e3c2:	d005      	beq.n	800e3d0 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 800e3c4:	4b05      	ldr	r3, [pc, #20]	@ (800e3dc <prvCheckForValidListAndQueue+0x60>)
 800e3c6:	681b      	ldr	r3, [r3, #0]
 800e3c8:	490b      	ldr	r1, [pc, #44]	@ (800e3f8 <prvCheckForValidListAndQueue+0x7c>)
 800e3ca:	4618      	mov	r0, r3
 800e3cc:	f7fe fbfa 	bl	800cbc4 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800e3d0:	f7fd fb64 	bl	800ba9c <vPortExitCritical>
}
 800e3d4:	bf00      	nop
 800e3d6:	46bd      	mov	sp, r7
 800e3d8:	bd80      	pop	{r7, pc}
 800e3da:	bf00      	nop
 800e3dc:	2400ab78 	.word	0x2400ab78
 800e3e0:	2400ab48 	.word	0x2400ab48
 800e3e4:	2400ab5c 	.word	0x2400ab5c
 800e3e8:	2400ab70 	.word	0x2400ab70
 800e3ec:	2400ab74 	.word	0x2400ab74
 800e3f0:	2400ac24 	.word	0x2400ac24
 800e3f4:	2400ab84 	.word	0x2400ab84
 800e3f8:	0802c6ec 	.word	0x0802c6ec

0800e3fc <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 800e3fc:	b480      	push	{r7}
 800e3fe:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 800e400:	4b3f      	ldr	r3, [pc, #252]	@ (800e500 <SystemInit+0x104>)
 800e402:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800e406:	4a3e      	ldr	r2, [pc, #248]	@ (800e500 <SystemInit+0x104>)
 800e408:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 800e40c:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
  #endif

    /*SEVONPEND enabled so that an interrupt coming from the CPU(n) interrupt signal is
     detectable by the CPU after a WFI/WFE instruction.*/
 SCB->SCR |= SCB_SCR_SEVONPEND_Msk;
 800e410:	4b3b      	ldr	r3, [pc, #236]	@ (800e500 <SystemInit+0x104>)
 800e412:	691b      	ldr	r3, [r3, #16]
 800e414:	4a3a      	ldr	r2, [pc, #232]	@ (800e500 <SystemInit+0x104>)
 800e416:	f043 0310 	orr.w	r3, r3, #16
 800e41a:	6113      	str	r3, [r2, #16]

#ifdef CORE_CM7
  /* Reset the RCC clock configuration to the default reset state ------------*/
   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 800e41c:	4b39      	ldr	r3, [pc, #228]	@ (800e504 <SystemInit+0x108>)
 800e41e:	681b      	ldr	r3, [r3, #0]
 800e420:	f003 030f 	and.w	r3, r3, #15
 800e424:	2b06      	cmp	r3, #6
 800e426:	d807      	bhi.n	800e438 <SystemInit+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
	MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 800e428:	4b36      	ldr	r3, [pc, #216]	@ (800e504 <SystemInit+0x108>)
 800e42a:	681b      	ldr	r3, [r3, #0]
 800e42c:	f023 030f 	bic.w	r3, r3, #15
 800e430:	4a34      	ldr	r2, [pc, #208]	@ (800e504 <SystemInit+0x108>)
 800e432:	f043 0307 	orr.w	r3, r3, #7
 800e436:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 800e438:	4b33      	ldr	r3, [pc, #204]	@ (800e508 <SystemInit+0x10c>)
 800e43a:	681b      	ldr	r3, [r3, #0]
 800e43c:	4a32      	ldr	r2, [pc, #200]	@ (800e508 <SystemInit+0x10c>)
 800e43e:	f043 0301 	orr.w	r3, r3, #1
 800e442:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 800e444:	4b30      	ldr	r3, [pc, #192]	@ (800e508 <SystemInit+0x10c>)
 800e446:	2200      	movs	r2, #0
 800e448:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, RC48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 800e44a:	4b2f      	ldr	r3, [pc, #188]	@ (800e508 <SystemInit+0x10c>)
 800e44c:	681a      	ldr	r2, [r3, #0]
 800e44e:	492e      	ldr	r1, [pc, #184]	@ (800e508 <SystemInit+0x10c>)
 800e450:	4b2e      	ldr	r3, [pc, #184]	@ (800e50c <SystemInit+0x110>)
 800e452:	4013      	ands	r3, r2
 800e454:	600b      	str	r3, [r1, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 800e456:	4b2b      	ldr	r3, [pc, #172]	@ (800e504 <SystemInit+0x108>)
 800e458:	681b      	ldr	r3, [r3, #0]
 800e45a:	f003 0308 	and.w	r3, r3, #8
 800e45e:	2b00      	cmp	r3, #0
 800e460:	d007      	beq.n	800e472 <SystemInit+0x76>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
	MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 800e462:	4b28      	ldr	r3, [pc, #160]	@ (800e504 <SystemInit+0x108>)
 800e464:	681b      	ldr	r3, [r3, #0]
 800e466:	f023 030f 	bic.w	r3, r3, #15
 800e46a:	4a26      	ldr	r2, [pc, #152]	@ (800e504 <SystemInit+0x108>)
 800e46c:	f043 0307 	orr.w	r3, r3, #7
 800e470:	6013      	str	r3, [r2, #0]
  }

  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 800e472:	4b25      	ldr	r3, [pc, #148]	@ (800e508 <SystemInit+0x10c>)
 800e474:	2200      	movs	r2, #0
 800e476:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 800e478:	4b23      	ldr	r3, [pc, #140]	@ (800e508 <SystemInit+0x10c>)
 800e47a:	2200      	movs	r2, #0
 800e47c:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 800e47e:	4b22      	ldr	r3, [pc, #136]	@ (800e508 <SystemInit+0x10c>)
 800e480:	2200      	movs	r2, #0
 800e482:	621a      	str	r2, [r3, #32]

  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 800e484:	4b20      	ldr	r3, [pc, #128]	@ (800e508 <SystemInit+0x10c>)
 800e486:	4a22      	ldr	r2, [pc, #136]	@ (800e510 <SystemInit+0x114>)
 800e488:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 800e48a:	4b1f      	ldr	r3, [pc, #124]	@ (800e508 <SystemInit+0x10c>)
 800e48c:	4a21      	ldr	r2, [pc, #132]	@ (800e514 <SystemInit+0x118>)
 800e48e:	62da      	str	r2, [r3, #44]	@ 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 800e490:	4b1d      	ldr	r3, [pc, #116]	@ (800e508 <SystemInit+0x10c>)
 800e492:	4a21      	ldr	r2, [pc, #132]	@ (800e518 <SystemInit+0x11c>)
 800e494:	631a      	str	r2, [r3, #48]	@ 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 800e496:	4b1c      	ldr	r3, [pc, #112]	@ (800e508 <SystemInit+0x10c>)
 800e498:	2200      	movs	r2, #0
 800e49a:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 800e49c:	4b1a      	ldr	r3, [pc, #104]	@ (800e508 <SystemInit+0x10c>)
 800e49e:	4a1e      	ldr	r2, [pc, #120]	@ (800e518 <SystemInit+0x11c>)
 800e4a0:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 800e4a2:	4b19      	ldr	r3, [pc, #100]	@ (800e508 <SystemInit+0x10c>)
 800e4a4:	2200      	movs	r2, #0
 800e4a6:	63da      	str	r2, [r3, #60]	@ 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 800e4a8:	4b17      	ldr	r3, [pc, #92]	@ (800e508 <SystemInit+0x10c>)
 800e4aa:	4a1b      	ldr	r2, [pc, #108]	@ (800e518 <SystemInit+0x11c>)
 800e4ac:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 800e4ae:	4b16      	ldr	r3, [pc, #88]	@ (800e508 <SystemInit+0x10c>)
 800e4b0:	2200      	movs	r2, #0
 800e4b2:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 800e4b4:	4b14      	ldr	r3, [pc, #80]	@ (800e508 <SystemInit+0x10c>)
 800e4b6:	681b      	ldr	r3, [r3, #0]
 800e4b8:	4a13      	ldr	r2, [pc, #76]	@ (800e508 <SystemInit+0x10c>)
 800e4ba:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800e4be:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 800e4c0:	4b11      	ldr	r3, [pc, #68]	@ (800e508 <SystemInit+0x10c>)
 800e4c2:	2200      	movs	r2, #0
 800e4c4:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Enable CortexM7 HSEM EXTI line (line 78)*/
  EXTI_D2->EMR3 |= 0x4000UL;
 800e4c6:	4b15      	ldr	r3, [pc, #84]	@ (800e51c <SystemInit+0x120>)
 800e4c8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800e4ca:	4a14      	ldr	r2, [pc, #80]	@ (800e51c <SystemInit+0x120>)
 800e4cc:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800e4d0:	6253      	str	r3, [r2, #36]	@ 0x24


  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 800e4d2:	4b13      	ldr	r3, [pc, #76]	@ (800e520 <SystemInit+0x124>)
 800e4d4:	681a      	ldr	r2, [r3, #0]
 800e4d6:	4b13      	ldr	r3, [pc, #76]	@ (800e524 <SystemInit+0x128>)
 800e4d8:	4013      	ands	r3, r2
 800e4da:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800e4de:	d202      	bcs.n	800e4e6 <SystemInit+0xea>
  {
    /* if stm32h7 revY*/
    /* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
    *((__IO uint32_t*)0x51008108) = 0x000000001U;
 800e4e0:	4b11      	ldr	r3, [pc, #68]	@ (800e528 <SystemInit+0x12c>)
 800e4e2:	2201      	movs	r2, #1
 800e4e4:	601a      	str	r2, [r3, #0]
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 800e4e6:	4b11      	ldr	r3, [pc, #68]	@ (800e52c <SystemInit+0x130>)
 800e4e8:	f243 02d2 	movw	r2, #12498	@ 0x30d2
 800e4ec:	601a      	str	r2, [r3, #0]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = D1_AXISRAM_BASE  | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM */
#else
  SCB->VTOR = FLASH_BANK1_BASE | VECT_TAB_OFFSET;       /* Vector Table Relocation in Internal FLASH */
 800e4ee:	4b04      	ldr	r3, [pc, #16]	@ (800e500 <SystemInit+0x104>)
 800e4f0:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 800e4f4:	609a      	str	r2, [r3, #8]
#else
#error Please #define CORE_CM4 or CORE_CM7
#endif
#endif

}
 800e4f6:	bf00      	nop
 800e4f8:	46bd      	mov	sp, r7
 800e4fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e4fe:	4770      	bx	lr
 800e500:	e000ed00 	.word	0xe000ed00
 800e504:	52002000 	.word	0x52002000
 800e508:	58024400 	.word	0x58024400
 800e50c:	eaf6ed7f 	.word	0xeaf6ed7f
 800e510:	02020200 	.word	0x02020200
 800e514:	01ff0000 	.word	0x01ff0000
 800e518:	01010280 	.word	0x01010280
 800e51c:	580000c0 	.word	0x580000c0
 800e520:	5c001000 	.word	0x5c001000
 800e524:	ffff0000 	.word	0xffff0000
 800e528:	51008108 	.word	0x51008108
 800e52c:	52004000 	.word	0x52004000

0800e530 <FT5336_RegisterBusIO>:
  * @brief  Register IO bus to component object
  * @param  Component object pointer
  * @retval error status
  */
int32_t FT5336_RegisterBusIO (FT5336_Object_t *pObj, FT5336_IO_t *pIO)
{
 800e530:	b580      	push	{r7, lr}
 800e532:	b084      	sub	sp, #16
 800e534:	af00      	add	r7, sp, #0
 800e536:	6078      	str	r0, [r7, #4]
 800e538:	6039      	str	r1, [r7, #0]
  int32_t ret;

  if (pObj == NULL)
 800e53a:	687b      	ldr	r3, [r7, #4]
 800e53c:	2b00      	cmp	r3, #0
 800e53e:	d103      	bne.n	800e548 <FT5336_RegisterBusIO+0x18>
  {
    ret = FT5336_ERROR;
 800e540:	f04f 33ff 	mov.w	r3, #4294967295
 800e544:	60fb      	str	r3, [r7, #12]
 800e546:	e02c      	b.n	800e5a2 <FT5336_RegisterBusIO+0x72>
  }
  else
  {
    pObj->IO.Init      = pIO->Init;
 800e548:	683b      	ldr	r3, [r7, #0]
 800e54a:	681a      	ldr	r2, [r3, #0]
 800e54c:	687b      	ldr	r3, [r7, #4]
 800e54e:	601a      	str	r2, [r3, #0]
    pObj->IO.DeInit    = pIO->DeInit;
 800e550:	683b      	ldr	r3, [r7, #0]
 800e552:	685a      	ldr	r2, [r3, #4]
 800e554:	687b      	ldr	r3, [r7, #4]
 800e556:	605a      	str	r2, [r3, #4]
    pObj->IO.Address   = pIO->Address;
 800e558:	683b      	ldr	r3, [r7, #0]
 800e55a:	891a      	ldrh	r2, [r3, #8]
 800e55c:	687b      	ldr	r3, [r7, #4]
 800e55e:	811a      	strh	r2, [r3, #8]
    pObj->IO.WriteReg  = pIO->WriteReg;
 800e560:	683b      	ldr	r3, [r7, #0]
 800e562:	68da      	ldr	r2, [r3, #12]
 800e564:	687b      	ldr	r3, [r7, #4]
 800e566:	60da      	str	r2, [r3, #12]
    pObj->IO.ReadReg   = pIO->ReadReg;
 800e568:	683b      	ldr	r3, [r7, #0]
 800e56a:	691a      	ldr	r2, [r3, #16]
 800e56c:	687b      	ldr	r3, [r7, #4]
 800e56e:	611a      	str	r2, [r3, #16]
    pObj->IO.GetTick   = pIO->GetTick;
 800e570:	683b      	ldr	r3, [r7, #0]
 800e572:	695a      	ldr	r2, [r3, #20]
 800e574:	687b      	ldr	r3, [r7, #4]
 800e576:	615a      	str	r2, [r3, #20]

    pObj->Ctx.ReadReg  = ReadRegWrap;
 800e578:	687b      	ldr	r3, [r7, #4]
 800e57a:	4a0c      	ldr	r2, [pc, #48]	@ (800e5ac <FT5336_RegisterBusIO+0x7c>)
 800e57c:	61da      	str	r2, [r3, #28]
    pObj->Ctx.WriteReg = WriteRegWrap;
 800e57e:	687b      	ldr	r3, [r7, #4]
 800e580:	4a0b      	ldr	r2, [pc, #44]	@ (800e5b0 <FT5336_RegisterBusIO+0x80>)
 800e582:	619a      	str	r2, [r3, #24]
    pObj->Ctx.handle   = pObj;
 800e584:	687b      	ldr	r3, [r7, #4]
 800e586:	687a      	ldr	r2, [r7, #4]
 800e588:	621a      	str	r2, [r3, #32]

    if(pObj->IO.Init != NULL)
 800e58a:	687b      	ldr	r3, [r7, #4]
 800e58c:	681b      	ldr	r3, [r3, #0]
 800e58e:	2b00      	cmp	r3, #0
 800e590:	d004      	beq.n	800e59c <FT5336_RegisterBusIO+0x6c>
    {
      ret = pObj->IO.Init();
 800e592:	687b      	ldr	r3, [r7, #4]
 800e594:	681b      	ldr	r3, [r3, #0]
 800e596:	4798      	blx	r3
 800e598:	60f8      	str	r0, [r7, #12]
 800e59a:	e002      	b.n	800e5a2 <FT5336_RegisterBusIO+0x72>
    }
    else
    {
      ret = FT5336_ERROR;
 800e59c:	f04f 33ff 	mov.w	r3, #4294967295
 800e5a0:	60fb      	str	r3, [r7, #12]
    }
  }

  return ret;
 800e5a2:	68fb      	ldr	r3, [r7, #12]
}
 800e5a4:	4618      	mov	r0, r3
 800e5a6:	3710      	adds	r7, #16
 800e5a8:	46bd      	mov	sp, r7
 800e5aa:	bd80      	pop	{r7, pc}
 800e5ac:	0800e9a9 	.word	0x0800e9a9
 800e5b0:	0800e9dd 	.word	0x0800e9dd

0800e5b4 <FT5336_GetCapabilities>:
  * @param  pObj Component object pointer
  * @param  Capabilities pointer to FT5336 sensor capabilities
  * @retval Component status
  */
int32_t FT5336_GetCapabilities(FT5336_Object_t *pObj, FT5336_Capabilities_t *Capabilities)
{
 800e5b4:	b480      	push	{r7}
 800e5b6:	b083      	sub	sp, #12
 800e5b8:	af00      	add	r7, sp, #0
 800e5ba:	6078      	str	r0, [r7, #4]
 800e5bc:	6039      	str	r1, [r7, #0]
  /* Prevent unused argument(s) compilation warning */
  (void)(pObj);

  /* Store component's capabilities */
  Capabilities->MultiTouch = 1;
 800e5be:	683b      	ldr	r3, [r7, #0]
 800e5c0:	2201      	movs	r2, #1
 800e5c2:	701a      	strb	r2, [r3, #0]
  Capabilities->Gesture    = 1;
 800e5c4:	683b      	ldr	r3, [r7, #0]
 800e5c6:	2201      	movs	r2, #1
 800e5c8:	705a      	strb	r2, [r3, #1]
  Capabilities->MaxTouch   = FT5336_MAX_NB_TOUCH;
 800e5ca:	683b      	ldr	r3, [r7, #0]
 800e5cc:	2205      	movs	r2, #5
 800e5ce:	709a      	strb	r2, [r3, #2]
  Capabilities->MaxXl      = FT5336_MAX_X_LENGTH;
 800e5d0:	683b      	ldr	r3, [r7, #0]
 800e5d2:	f44f 72f0 	mov.w	r2, #480	@ 0x1e0
 800e5d6:	605a      	str	r2, [r3, #4]
  Capabilities->MaxYl      = FT5336_MAX_Y_LENGTH;
 800e5d8:	683b      	ldr	r3, [r7, #0]
 800e5da:	f44f 7288 	mov.w	r2, #272	@ 0x110
 800e5de:	609a      	str	r2, [r3, #8]

  return FT5336_OK;
 800e5e0:	2300      	movs	r3, #0
}
 800e5e2:	4618      	mov	r0, r3
 800e5e4:	370c      	adds	r7, #12
 800e5e6:	46bd      	mov	sp, r7
 800e5e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e5ec:	4770      	bx	lr

0800e5ee <FT5336_Init>:
  * @param  pObj Component object pointer
  * @param  GestureInit: Gesture init structure
  * @retval FT5336_OK
  */
int32_t FT5336_Init(FT5336_Object_t *pObj)
{
 800e5ee:	b580      	push	{r7, lr}
 800e5f0:	b084      	sub	sp, #16
 800e5f2:	af00      	add	r7, sp, #0
 800e5f4:	6078      	str	r0, [r7, #4]
  int32_t ret = FT5336_OK;
 800e5f6:	2300      	movs	r3, #0
 800e5f8:	60fb      	str	r3, [r7, #12]

  if(pObj->IsInitialized == 0U)
 800e5fa:	687b      	ldr	r3, [r7, #4]
 800e5fc:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 800e600:	2b00      	cmp	r3, #0
 800e602:	d10d      	bne.n	800e620 <FT5336_Init+0x32>
  {
    /* Initialize IO BUS layer */
    pObj->IO.Init();
 800e604:	687b      	ldr	r3, [r7, #4]
 800e606:	681b      	ldr	r3, [r3, #0]
 800e608:	4798      	blx	r3
    /* This is called internal calibration of the touch screen                 */
    ret += FT5336_TS_Calibration(pObj);
#endif /* (FT5336_AUTO_CALIBRATION_ENABLED == 1) */
    /* By default set FT5336 IC in Polling mode : no INT generation on FT5336 for new touch available */
    /* Note TS_INT is active low                                                                      */
    ret += FT5336_DisableIT(pObj);
 800e60a:	6878      	ldr	r0, [r7, #4]
 800e60c:	f000 f987 	bl	800e91e <FT5336_DisableIT>
 800e610:	4602      	mov	r2, r0
 800e612:	68fb      	ldr	r3, [r7, #12]
 800e614:	4413      	add	r3, r2
 800e616:	60fb      	str	r3, [r7, #12]

    pObj->IsInitialized = 1;
 800e618:	687b      	ldr	r3, [r7, #4]
 800e61a:	2201      	movs	r2, #1
 800e61c:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  }

  if(ret != FT5336_OK)
 800e620:	68fb      	ldr	r3, [r7, #12]
 800e622:	2b00      	cmp	r3, #0
 800e624:	d002      	beq.n	800e62c <FT5336_Init+0x3e>
  {
    ret = FT5336_ERROR;
 800e626:	f04f 33ff 	mov.w	r3, #4294967295
 800e62a:	60fb      	str	r3, [r7, #12]
  }

  return ret;
 800e62c:	68fb      	ldr	r3, [r7, #12]
}
 800e62e:	4618      	mov	r0, r3
 800e630:	3710      	adds	r7, #16
 800e632:	46bd      	mov	sp, r7
 800e634:	bd80      	pop	{r7, pc}

0800e636 <FT5336_DeInit>:
  *         from MCU to FT5336 : ie I2C channel initialization (if required).
  * @param  pObj Component object pointer
  * @retval FT5336_OK
  */
int32_t FT5336_DeInit(FT5336_Object_t *pObj)
{
 800e636:	b480      	push	{r7}
 800e638:	b085      	sub	sp, #20
 800e63a:	af00      	add	r7, sp, #0
 800e63c:	6078      	str	r0, [r7, #4]
  int32_t ret = FT5336_OK;
 800e63e:	2300      	movs	r3, #0
 800e640:	60fb      	str	r3, [r7, #12]

  if(pObj->IsInitialized == 1U)
 800e642:	687b      	ldr	r3, [r7, #4]
 800e644:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 800e648:	2b01      	cmp	r3, #1
 800e64a:	d103      	bne.n	800e654 <FT5336_DeInit+0x1e>
  {
    pObj->IsInitialized = 0;
 800e64c:	687b      	ldr	r3, [r7, #4]
 800e64e:	2200      	movs	r2, #0
 800e650:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  }

  return ret;
 800e654:	68fb      	ldr	r3, [r7, #12]
}
 800e656:	4618      	mov	r0, r3
 800e658:	3714      	adds	r7, #20
 800e65a:	46bd      	mov	sp, r7
 800e65c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e660:	4770      	bx	lr

0800e662 <FT5336_GestureConfig>:
  * @param  pObj  Component object pointer
  * @param  GestureInit Gesture init structure
  * @retval FT5336_OK
  */
int32_t FT5336_GestureConfig(FT5336_Object_t *pObj, FT5336_Gesture_Init_t *GestureInit)
{
 800e662:	b580      	push	{r7, lr}
 800e664:	b084      	sub	sp, #16
 800e666:	af00      	add	r7, sp, #0
 800e668:	6078      	str	r0, [r7, #4]
 800e66a:	6039      	str	r1, [r7, #0]
  int32_t ret;

  ret = ft5336_radian_value(&pObj->Ctx, (uint8_t)GestureInit->Radian);
 800e66c:	687b      	ldr	r3, [r7, #4]
 800e66e:	f103 0218 	add.w	r2, r3, #24
 800e672:	683b      	ldr	r3, [r7, #0]
 800e674:	681b      	ldr	r3, [r3, #0]
 800e676:	b2db      	uxtb	r3, r3
 800e678:	4619      	mov	r1, r3
 800e67a:	4610      	mov	r0, r2
 800e67c:	f000 fa25 	bl	800eaca <ft5336_radian_value>
 800e680:	60f8      	str	r0, [r7, #12]
  ret += ft5336_offset_left_right(&pObj->Ctx, (uint8_t)GestureInit->OffsetLeftRight);
 800e682:	687b      	ldr	r3, [r7, #4]
 800e684:	f103 0218 	add.w	r2, r3, #24
 800e688:	683b      	ldr	r3, [r7, #0]
 800e68a:	685b      	ldr	r3, [r3, #4]
 800e68c:	b2db      	uxtb	r3, r3
 800e68e:	4619      	mov	r1, r3
 800e690:	4610      	mov	r0, r2
 800e692:	f000 fa2b 	bl	800eaec <ft5336_offset_left_right>
 800e696:	4602      	mov	r2, r0
 800e698:	68fb      	ldr	r3, [r7, #12]
 800e69a:	4413      	add	r3, r2
 800e69c:	60fb      	str	r3, [r7, #12]
  ret += ft5336_offset_up_down(&pObj->Ctx, (uint8_t)GestureInit->OffsetUpDown);
 800e69e:	687b      	ldr	r3, [r7, #4]
 800e6a0:	f103 0218 	add.w	r2, r3, #24
 800e6a4:	683b      	ldr	r3, [r7, #0]
 800e6a6:	689b      	ldr	r3, [r3, #8]
 800e6a8:	b2db      	uxtb	r3, r3
 800e6aa:	4619      	mov	r1, r3
 800e6ac:	4610      	mov	r0, r2
 800e6ae:	f000 fa2e 	bl	800eb0e <ft5336_offset_up_down>
 800e6b2:	4602      	mov	r2, r0
 800e6b4:	68fb      	ldr	r3, [r7, #12]
 800e6b6:	4413      	add	r3, r2
 800e6b8:	60fb      	str	r3, [r7, #12]
  ret += ft5336_disatnce_left_right(&pObj->Ctx, (uint8_t)GestureInit->DistanceLeftRight);
 800e6ba:	687b      	ldr	r3, [r7, #4]
 800e6bc:	f103 0218 	add.w	r2, r3, #24
 800e6c0:	683b      	ldr	r3, [r7, #0]
 800e6c2:	68db      	ldr	r3, [r3, #12]
 800e6c4:	b2db      	uxtb	r3, r3
 800e6c6:	4619      	mov	r1, r3
 800e6c8:	4610      	mov	r0, r2
 800e6ca:	f000 fa31 	bl	800eb30 <ft5336_disatnce_left_right>
 800e6ce:	4602      	mov	r2, r0
 800e6d0:	68fb      	ldr	r3, [r7, #12]
 800e6d2:	4413      	add	r3, r2
 800e6d4:	60fb      	str	r3, [r7, #12]
  ret += ft5336_distance_up_down(&pObj->Ctx, (uint8_t)GestureInit->DistanceUpDown);
 800e6d6:	687b      	ldr	r3, [r7, #4]
 800e6d8:	f103 0218 	add.w	r2, r3, #24
 800e6dc:	683b      	ldr	r3, [r7, #0]
 800e6de:	691b      	ldr	r3, [r3, #16]
 800e6e0:	b2db      	uxtb	r3, r3
 800e6e2:	4619      	mov	r1, r3
 800e6e4:	4610      	mov	r0, r2
 800e6e6:	f000 fa34 	bl	800eb52 <ft5336_distance_up_down>
 800e6ea:	4602      	mov	r2, r0
 800e6ec:	68fb      	ldr	r3, [r7, #12]
 800e6ee:	4413      	add	r3, r2
 800e6f0:	60fb      	str	r3, [r7, #12]
  ret += ft5336_distance_zoom(&pObj->Ctx, (uint8_t)GestureInit->DistanceZoom);
 800e6f2:	687b      	ldr	r3, [r7, #4]
 800e6f4:	f103 0218 	add.w	r2, r3, #24
 800e6f8:	683b      	ldr	r3, [r7, #0]
 800e6fa:	695b      	ldr	r3, [r3, #20]
 800e6fc:	b2db      	uxtb	r3, r3
 800e6fe:	4619      	mov	r1, r3
 800e700:	4610      	mov	r0, r2
 800e702:	f000 fa37 	bl	800eb74 <ft5336_distance_zoom>
 800e706:	4602      	mov	r2, r0
 800e708:	68fb      	ldr	r3, [r7, #12]
 800e70a:	4413      	add	r3, r2
 800e70c:	60fb      	str	r3, [r7, #12]

  if(ret != FT5336_OK)
 800e70e:	68fb      	ldr	r3, [r7, #12]
 800e710:	2b00      	cmp	r3, #0
 800e712:	d002      	beq.n	800e71a <FT5336_GestureConfig+0xb8>
  {
    ret = FT5336_ERROR;
 800e714:	f04f 33ff 	mov.w	r3, #4294967295
 800e718:	60fb      	str	r3, [r7, #12]
  }

  return ret;
 800e71a:	68fb      	ldr	r3, [r7, #12]
}
 800e71c:	4618      	mov	r0, r3
 800e71e:	3710      	adds	r7, #16
 800e720:	46bd      	mov	sp, r7
 800e722:	bd80      	pop	{r7, pc}

0800e724 <FT5336_ReadID>:
  *         able to read the FT5336 device ID, and verify this is a FT5336.
  * @param  pObj Component object pointer
  * @retval The Device ID (two bytes).
  */
int32_t FT5336_ReadID(FT5336_Object_t *pObj, uint32_t *Id)
{
 800e724:	b580      	push	{r7, lr}
 800e726:	b082      	sub	sp, #8
 800e728:	af00      	add	r7, sp, #0
 800e72a:	6078      	str	r0, [r7, #4]
 800e72c:	6039      	str	r1, [r7, #0]
  return ft5336_chip_id(&pObj->Ctx, (uint8_t *)Id);
 800e72e:	687b      	ldr	r3, [r7, #4]
 800e730:	3318      	adds	r3, #24
 800e732:	6839      	ldr	r1, [r7, #0]
 800e734:	4618      	mov	r0, r3
 800e736:	f000 fa3f 	bl	800ebb8 <ft5336_chip_id>
 800e73a:	4603      	mov	r3, r0
}
 800e73c:	4618      	mov	r0, r3
 800e73e:	3708      	adds	r7, #8
 800e740:	46bd      	mov	sp, r7
 800e742:	bd80      	pop	{r7, pc}

0800e744 <FT5336_GetState>:
  * @param  pObj Component object pointer
  * @param  State: Single Touch stucture pointer
  * @retval FT5336_OK.
  */
int32_t FT5336_GetState(FT5336_Object_t *pObj, FT5336_State_t *State)
{
 800e744:	b580      	push	{r7, lr}
 800e746:	b084      	sub	sp, #16
 800e748:	af00      	add	r7, sp, #0
 800e74a:	6078      	str	r0, [r7, #4]
 800e74c:	6039      	str	r1, [r7, #0]
  int32_t ret = FT5336_OK;
 800e74e:	2300      	movs	r3, #0
 800e750:	60fb      	str	r3, [r7, #12]
  uint8_t  data[4];

  State->TouchDetected = (uint32_t)FT5336_DetectTouch(pObj);
 800e752:	6878      	ldr	r0, [r7, #4]
 800e754:	f000 f908 	bl	800e968 <FT5336_DetectTouch>
 800e758:	4603      	mov	r3, r0
 800e75a:	461a      	mov	r2, r3
 800e75c:	683b      	ldr	r3, [r7, #0]
 800e75e:	601a      	str	r2, [r3, #0]
  if(ft5336_read_reg(&pObj->Ctx, FT5336_P1_XH_REG, data, (uint16_t)sizeof(data)) != FT5336_OK)
 800e760:	687b      	ldr	r3, [r7, #4]
 800e762:	f103 0018 	add.w	r0, r3, #24
 800e766:	f107 0208 	add.w	r2, r7, #8
 800e76a:	2304      	movs	r3, #4
 800e76c:	2103      	movs	r1, #3
 800e76e:	f000 f94f 	bl	800ea10 <ft5336_read_reg>
 800e772:	4603      	mov	r3, r0
 800e774:	2b00      	cmp	r3, #0
 800e776:	d003      	beq.n	800e780 <FT5336_GetState+0x3c>
  {
    ret = FT5336_ERROR;
 800e778:	f04f 33ff 	mov.w	r3, #4294967295
 800e77c:	60fb      	str	r3, [r7, #12]
 800e77e:	e00f      	b.n	800e7a0 <FT5336_GetState+0x5c>
  }
  else
  {
    /* Send back first ready X position to caller */
    State->TouchX = (((uint32_t)data[0] & FT5336_P1_XH_TP_BIT_MASK) << 8) | ((uint32_t)data[1] & FT5336_P1_XL_TP_BIT_MASK);
 800e780:	7a3b      	ldrb	r3, [r7, #8]
 800e782:	021b      	lsls	r3, r3, #8
 800e784:	f403 6370 	and.w	r3, r3, #3840	@ 0xf00
 800e788:	7a7a      	ldrb	r2, [r7, #9]
 800e78a:	431a      	orrs	r2, r3
 800e78c:	683b      	ldr	r3, [r7, #0]
 800e78e:	605a      	str	r2, [r3, #4]
    /* Send back first ready Y position to caller */
    State->TouchY = (((uint32_t)data[2] & FT5336_P1_YH_TP_BIT_MASK) << 8) | ((uint32_t)data[3] & FT5336_P1_YL_TP_BIT_MASK);
 800e790:	7abb      	ldrb	r3, [r7, #10]
 800e792:	021b      	lsls	r3, r3, #8
 800e794:	f403 6370 	and.w	r3, r3, #3840	@ 0xf00
 800e798:	7afa      	ldrb	r2, [r7, #11]
 800e79a:	431a      	orrs	r2, r3
 800e79c:	683b      	ldr	r3, [r7, #0]
 800e79e:	609a      	str	r2, [r3, #8]
  }

  return ret;
 800e7a0:	68fb      	ldr	r3, [r7, #12]
}
 800e7a2:	4618      	mov	r0, r3
 800e7a4:	3710      	adds	r7, #16
 800e7a6:	46bd      	mov	sp, r7
 800e7a8:	bd80      	pop	{r7, pc}

0800e7aa <FT5336_GetMultiTouchState>:
  * @param  pObj Component object pointer
  * @param  State Multi Touch structure pointer
  * @retval FT5336_OK.
  */
int32_t FT5336_GetMultiTouchState(FT5336_Object_t *pObj, FT5336_MultiTouch_State_t *State)
{
 800e7aa:	b580      	push	{r7, lr}
 800e7ac:	b08c      	sub	sp, #48	@ 0x30
 800e7ae:	af00      	add	r7, sp, #0
 800e7b0:	6078      	str	r0, [r7, #4]
 800e7b2:	6039      	str	r1, [r7, #0]
  int32_t ret = FT5336_OK;
 800e7b4:	2300      	movs	r3, #0
 800e7b6:	62fb      	str	r3, [r7, #44]	@ 0x2c
  uint8_t  data[30];
  uint32_t i;

  State->TouchDetected = (uint32_t)FT5336_DetectTouch(pObj);
 800e7b8:	6878      	ldr	r0, [r7, #4]
 800e7ba:	f000 f8d5 	bl	800e968 <FT5336_DetectTouch>
 800e7be:	4603      	mov	r3, r0
 800e7c0:	461a      	mov	r2, r3
 800e7c2:	683b      	ldr	r3, [r7, #0]
 800e7c4:	601a      	str	r2, [r3, #0]

  if(ft5336_read_reg(&pObj->Ctx, FT5336_P1_XH_REG, data, (uint16_t)sizeof(data)) != FT5336_OK)
 800e7c6:	687b      	ldr	r3, [r7, #4]
 800e7c8:	f103 0018 	add.w	r0, r3, #24
 800e7cc:	f107 0208 	add.w	r2, r7, #8
 800e7d0:	231e      	movs	r3, #30
 800e7d2:	2103      	movs	r1, #3
 800e7d4:	f000 f91c 	bl	800ea10 <ft5336_read_reg>
 800e7d8:	4603      	mov	r3, r0
 800e7da:	2b00      	cmp	r3, #0
 800e7dc:	d003      	beq.n	800e7e6 <FT5336_GetMultiTouchState+0x3c>
  {
    ret = FT5336_ERROR;
 800e7de:	f04f 33ff 	mov.w	r3, #4294967295
 800e7e2:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800e7e4:	e077      	b.n	800e8d6 <FT5336_GetMultiTouchState+0x12c>
  }
  else
  {
    for(i = 0; i < FT5336_MAX_NB_TOUCH; i++)
 800e7e6:	2300      	movs	r3, #0
 800e7e8:	62bb      	str	r3, [r7, #40]	@ 0x28
 800e7ea:	e071      	b.n	800e8d0 <FT5336_GetMultiTouchState+0x126>
    {
    /* Send back first ready X position to caller */
    State->TouchX[i] = (((uint32_t)data[i*6U] & FT5336_P1_XH_TP_BIT_MASK) << 8U) | ((uint32_t)data[(i*6U) + 1U] & FT5336_P1_XL_TP_BIT_MASK);
 800e7ec:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800e7ee:	4613      	mov	r3, r2
 800e7f0:	005b      	lsls	r3, r3, #1
 800e7f2:	4413      	add	r3, r2
 800e7f4:	005b      	lsls	r3, r3, #1
 800e7f6:	3330      	adds	r3, #48	@ 0x30
 800e7f8:	443b      	add	r3, r7
 800e7fa:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 800e7fe:	021b      	lsls	r3, r3, #8
 800e800:	f403 6170 	and.w	r1, r3, #3840	@ 0xf00
 800e804:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800e806:	4613      	mov	r3, r2
 800e808:	005b      	lsls	r3, r3, #1
 800e80a:	4413      	add	r3, r2
 800e80c:	005b      	lsls	r3, r3, #1
 800e80e:	3301      	adds	r3, #1
 800e810:	3330      	adds	r3, #48	@ 0x30
 800e812:	443b      	add	r3, r7
 800e814:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 800e818:	ea41 0203 	orr.w	r2, r1, r3
 800e81c:	6839      	ldr	r1, [r7, #0]
 800e81e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e820:	009b      	lsls	r3, r3, #2
 800e822:	440b      	add	r3, r1
 800e824:	605a      	str	r2, [r3, #4]
    /* Send back first ready Y position to caller */
    State->TouchY[i] = (((uint32_t)data[(i*6U) + 2U] & FT5336_P1_YH_TP_BIT_MASK) << 8U) | ((uint32_t)data[(i*6U) + 3U] & FT5336_P1_YL_TP_BIT_MASK);
 800e826:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800e828:	4613      	mov	r3, r2
 800e82a:	005b      	lsls	r3, r3, #1
 800e82c:	4413      	add	r3, r2
 800e82e:	005b      	lsls	r3, r3, #1
 800e830:	3302      	adds	r3, #2
 800e832:	3330      	adds	r3, #48	@ 0x30
 800e834:	443b      	add	r3, r7
 800e836:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 800e83a:	021b      	lsls	r3, r3, #8
 800e83c:	f403 6170 	and.w	r1, r3, #3840	@ 0xf00
 800e840:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800e842:	4613      	mov	r3, r2
 800e844:	005b      	lsls	r3, r3, #1
 800e846:	4413      	add	r3, r2
 800e848:	005b      	lsls	r3, r3, #1
 800e84a:	3303      	adds	r3, #3
 800e84c:	3330      	adds	r3, #48	@ 0x30
 800e84e:	443b      	add	r3, r7
 800e850:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 800e854:	4319      	orrs	r1, r3
 800e856:	683b      	ldr	r3, [r7, #0]
 800e858:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800e85a:	3206      	adds	r2, #6
 800e85c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    /* Send back first ready Event to caller */
    State->TouchEvent[i] = (((uint32_t)data[i*6U] & FT5336_P1_XH_EF_BIT_MASK) >> FT5336_P1_XH_EF_BIT_POSITION);
 800e860:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800e862:	4613      	mov	r3, r2
 800e864:	005b      	lsls	r3, r3, #1
 800e866:	4413      	add	r3, r2
 800e868:	005b      	lsls	r3, r3, #1
 800e86a:	3330      	adds	r3, #48	@ 0x30
 800e86c:	443b      	add	r3, r7
 800e86e:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 800e872:	099b      	lsrs	r3, r3, #6
 800e874:	b2db      	uxtb	r3, r3
 800e876:	4619      	mov	r1, r3
 800e878:	683b      	ldr	r3, [r7, #0]
 800e87a:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800e87c:	3210      	adds	r2, #16
 800e87e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    /* Send back first ready Weight to caller */
    State->TouchWeight[i] = ((uint32_t)data[(i*6U) + 4U] & FT5336_P1_WEIGHT_BIT_MASK);
 800e882:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800e884:	4613      	mov	r3, r2
 800e886:	005b      	lsls	r3, r3, #1
 800e888:	4413      	add	r3, r2
 800e88a:	005b      	lsls	r3, r3, #1
 800e88c:	3304      	adds	r3, #4
 800e88e:	3330      	adds	r3, #48	@ 0x30
 800e890:	443b      	add	r3, r7
 800e892:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 800e896:	4619      	mov	r1, r3
 800e898:	683a      	ldr	r2, [r7, #0]
 800e89a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e89c:	330a      	adds	r3, #10
 800e89e:	009b      	lsls	r3, r3, #2
 800e8a0:	4413      	add	r3, r2
 800e8a2:	6059      	str	r1, [r3, #4]
    /* Send back first ready Area to caller */
    State->TouchArea[i] = ((uint32_t)data[(i*6U) + 5U] & FT5336_P1_MISC_BIT_MASK) >> FT5336_P1_MISC_BIT_POSITION;
 800e8a4:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800e8a6:	4613      	mov	r3, r2
 800e8a8:	005b      	lsls	r3, r3, #1
 800e8aa:	4413      	add	r3, r2
 800e8ac:	005b      	lsls	r3, r3, #1
 800e8ae:	3305      	adds	r3, #5
 800e8b0:	3330      	adds	r3, #48	@ 0x30
 800e8b2:	443b      	add	r3, r7
 800e8b4:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 800e8b8:	091b      	lsrs	r3, r3, #4
 800e8ba:	b2db      	uxtb	r3, r3
 800e8bc:	4619      	mov	r1, r3
 800e8be:	683a      	ldr	r2, [r7, #0]
 800e8c0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e8c2:	3314      	adds	r3, #20
 800e8c4:	009b      	lsls	r3, r3, #2
 800e8c6:	4413      	add	r3, r2
 800e8c8:	6059      	str	r1, [r3, #4]
    for(i = 0; i < FT5336_MAX_NB_TOUCH; i++)
 800e8ca:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e8cc:	3301      	adds	r3, #1
 800e8ce:	62bb      	str	r3, [r7, #40]	@ 0x28
 800e8d0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e8d2:	2b04      	cmp	r3, #4
 800e8d4:	d98a      	bls.n	800e7ec <FT5336_GetMultiTouchState+0x42>
    }
  }

  return ret;
 800e8d6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
}
 800e8d8:	4618      	mov	r0, r3
 800e8da:	3730      	adds	r7, #48	@ 0x30
 800e8dc:	46bd      	mov	sp, r7
 800e8de:	bd80      	pop	{r7, pc}

0800e8e0 <FT5336_GetGesture>:
  * @param  pObj Component object pointer
  * @param  GestureId: gesture ID
  * @retval Gesture ID.
  */
int32_t FT5336_GetGesture(FT5336_Object_t *pObj, uint8_t *GestureId)
{
 800e8e0:	b580      	push	{r7, lr}
 800e8e2:	b082      	sub	sp, #8
 800e8e4:	af00      	add	r7, sp, #0
 800e8e6:	6078      	str	r0, [r7, #4]
 800e8e8:	6039      	str	r1, [r7, #0]
  return ft5336_gest_id(&pObj->Ctx, GestureId);
 800e8ea:	687b      	ldr	r3, [r7, #4]
 800e8ec:	3318      	adds	r3, #24
 800e8ee:	6839      	ldr	r1, [r7, #0]
 800e8f0:	4618      	mov	r0, r3
 800e8f2:	f000 f8bb 	bl	800ea6c <ft5336_gest_id>
 800e8f6:	4603      	mov	r3, r0
}
 800e8f8:	4618      	mov	r0, r3
 800e8fa:	3708      	adds	r7, #8
 800e8fc:	46bd      	mov	sp, r7
 800e8fe:	bd80      	pop	{r7, pc}

0800e900 <FT5336_EnableIT>:
  *         connected to MCU as EXTI.
  * @param  pObj Component object pointer
  * @retval None
  */
int32_t FT5336_EnableIT(FT5336_Object_t *pObj)
{
 800e900:	b580      	push	{r7, lr}
 800e902:	b082      	sub	sp, #8
 800e904:	af00      	add	r7, sp, #0
 800e906:	6078      	str	r0, [r7, #4]
  return ft5336_g_mode(&pObj->Ctx, FT5336_G_MODE_INTERRUPT_TRIGGER);
 800e908:	687b      	ldr	r3, [r7, #4]
 800e90a:	3318      	adds	r3, #24
 800e90c:	2101      	movs	r1, #1
 800e90e:	4618      	mov	r0, r3
 800e910:	f000 f941 	bl	800eb96 <ft5336_g_mode>
 800e914:	4603      	mov	r3, r0
}
 800e916:	4618      	mov	r0, r3
 800e918:	3708      	adds	r7, #8
 800e91a:	46bd      	mov	sp, r7
 800e91c:	bd80      	pop	{r7, pc}

0800e91e <FT5336_DisableIT>:
  *         connected to MCU as EXTI.
  * @param  pObj Component object pointer
  * @retval None
  */
int32_t FT5336_DisableIT(FT5336_Object_t *pObj)
{
 800e91e:	b580      	push	{r7, lr}
 800e920:	b082      	sub	sp, #8
 800e922:	af00      	add	r7, sp, #0
 800e924:	6078      	str	r0, [r7, #4]
  return ft5336_g_mode(&pObj->Ctx, FT5336_G_MODE_INTERRUPT_POLLING);
 800e926:	687b      	ldr	r3, [r7, #4]
 800e928:	3318      	adds	r3, #24
 800e92a:	2100      	movs	r1, #0
 800e92c:	4618      	mov	r0, r3
 800e92e:	f000 f932 	bl	800eb96 <ft5336_g_mode>
 800e932:	4603      	mov	r3, r0
}
 800e934:	4618      	mov	r0, r3
 800e936:	3708      	adds	r7, #8
 800e938:	46bd      	mov	sp, r7
 800e93a:	bd80      	pop	{r7, pc}

0800e93c <FT5336_ITStatus>:
  *         @note : This feature is not applicable to FT5336.
  * @param  pObj Component object pointer
  * @retval TS interrupts status : always return 0 here
  */
int32_t FT5336_ITStatus(FT5336_Object_t *pObj)
{
 800e93c:	b480      	push	{r7}
 800e93e:	b083      	sub	sp, #12
 800e940:	af00      	add	r7, sp, #0
 800e942:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  (void)(pObj);

  /* Always return FT5336_OK as feature not applicable to FT5336 */
  return FT5336_OK;
 800e944:	2300      	movs	r3, #0
}
 800e946:	4618      	mov	r0, r3
 800e948:	370c      	adds	r7, #12
 800e94a:	46bd      	mov	sp, r7
 800e94c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e950:	4770      	bx	lr

0800e952 <FT5336_ClearIT>:
  *         @note : This feature is not applicable to FT5336.
  * @param  pObj Component object pointer
  * @retval None
  */
int32_t FT5336_ClearIT(FT5336_Object_t *pObj)
{
 800e952:	b480      	push	{r7}
 800e954:	b083      	sub	sp, #12
 800e956:	af00      	add	r7, sp, #0
 800e958:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  (void)(pObj);

  /* Always return FT5336_OK as feature not applicable to FT5336 */
  return FT5336_OK;
 800e95a:	2300      	movs	r3, #0
}
 800e95c:	4618      	mov	r0, r3
 800e95e:	370c      	adds	r7, #12
 800e960:	46bd      	mov	sp, r7
 800e962:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e966:	4770      	bx	lr

0800e968 <FT5336_DetectTouch>:
  * @param  pObj Component object pointer
  * @retval Number of active touches detected (can be 0, 1 or 2) or FT5336_ERROR
  *         in case of error
  */
static int32_t FT5336_DetectTouch(FT5336_Object_t *pObj)
{
 800e968:	b580      	push	{r7, lr}
 800e96a:	b084      	sub	sp, #16
 800e96c:	af00      	add	r7, sp, #0
 800e96e:	6078      	str	r0, [r7, #4]
  int32_t ret;
  uint8_t nb_touch;

  /* Read register FT5336_TD_STAT_REG to check number of touches detection */
  if(ft5336_td_status(&pObj->Ctx, &nb_touch) != FT5336_OK)
 800e970:	687b      	ldr	r3, [r7, #4]
 800e972:	3318      	adds	r3, #24
 800e974:	f107 020b 	add.w	r2, r7, #11
 800e978:	4611      	mov	r1, r2
 800e97a:	4618      	mov	r0, r3
 800e97c:	f000 f886 	bl	800ea8c <ft5336_td_status>
 800e980:	4603      	mov	r3, r0
 800e982:	2b00      	cmp	r3, #0
 800e984:	d003      	beq.n	800e98e <FT5336_DetectTouch+0x26>
  {
    ret = FT5336_ERROR;
 800e986:	f04f 33ff 	mov.w	r3, #4294967295
 800e98a:	60fb      	str	r3, [r7, #12]
 800e98c:	e007      	b.n	800e99e <FT5336_DetectTouch+0x36>
  }
  else
  {
    if(nb_touch > FT5336_MAX_NB_TOUCH)
 800e98e:	7afb      	ldrb	r3, [r7, #11]
 800e990:	2b05      	cmp	r3, #5
 800e992:	d902      	bls.n	800e99a <FT5336_DetectTouch+0x32>
    {
      /* If invalid number of touch detected, set it to zero */
      ret = 0;
 800e994:	2300      	movs	r3, #0
 800e996:	60fb      	str	r3, [r7, #12]
 800e998:	e001      	b.n	800e99e <FT5336_DetectTouch+0x36>
    }
    else
    {
      ret = (int32_t)nb_touch;
 800e99a:	7afb      	ldrb	r3, [r7, #11]
 800e99c:	60fb      	str	r3, [r7, #12]
    }
  }
  return ret;
 800e99e:	68fb      	ldr	r3, [r7, #12]
}
 800e9a0:	4618      	mov	r0, r3
 800e9a2:	3710      	adds	r7, #16
 800e9a4:	46bd      	mov	sp, r7
 800e9a6:	bd80      	pop	{r7, pc}

0800e9a8 <ReadRegWrap>:
  * @param  pData: The target register value to be written
  * @param  Length: buffer size to be written
  * @retval error status
  */
static int32_t ReadRegWrap(void *handle, uint8_t Reg, uint8_t* pData, uint16_t Length)
{
 800e9a8:	b590      	push	{r4, r7, lr}
 800e9aa:	b087      	sub	sp, #28
 800e9ac:	af00      	add	r7, sp, #0
 800e9ae:	60f8      	str	r0, [r7, #12]
 800e9b0:	607a      	str	r2, [r7, #4]
 800e9b2:	461a      	mov	r2, r3
 800e9b4:	460b      	mov	r3, r1
 800e9b6:	72fb      	strb	r3, [r7, #11]
 800e9b8:	4613      	mov	r3, r2
 800e9ba:	813b      	strh	r3, [r7, #8]
  FT5336_Object_t *pObj = (FT5336_Object_t *)handle;
 800e9bc:	68fb      	ldr	r3, [r7, #12]
 800e9be:	617b      	str	r3, [r7, #20]

  return pObj->IO.ReadReg(pObj->IO.Address, Reg, pData, Length);
 800e9c0:	697b      	ldr	r3, [r7, #20]
 800e9c2:	691c      	ldr	r4, [r3, #16]
 800e9c4:	697b      	ldr	r3, [r7, #20]
 800e9c6:	8918      	ldrh	r0, [r3, #8]
 800e9c8:	7afb      	ldrb	r3, [r7, #11]
 800e9ca:	b299      	uxth	r1, r3
 800e9cc:	893b      	ldrh	r3, [r7, #8]
 800e9ce:	687a      	ldr	r2, [r7, #4]
 800e9d0:	47a0      	blx	r4
 800e9d2:	4603      	mov	r3, r0
}
 800e9d4:	4618      	mov	r0, r3
 800e9d6:	371c      	adds	r7, #28
 800e9d8:	46bd      	mov	sp, r7
 800e9da:	bd90      	pop	{r4, r7, pc}

0800e9dc <WriteRegWrap>:
  * @param  pData: The target register value to be written
  * @param  Length: buffer size to be written
  * @retval error status
  */
static int32_t WriteRegWrap(void *handle, uint8_t Reg, uint8_t* pData, uint16_t Length)
{
 800e9dc:	b590      	push	{r4, r7, lr}
 800e9de:	b087      	sub	sp, #28
 800e9e0:	af00      	add	r7, sp, #0
 800e9e2:	60f8      	str	r0, [r7, #12]
 800e9e4:	607a      	str	r2, [r7, #4]
 800e9e6:	461a      	mov	r2, r3
 800e9e8:	460b      	mov	r3, r1
 800e9ea:	72fb      	strb	r3, [r7, #11]
 800e9ec:	4613      	mov	r3, r2
 800e9ee:	813b      	strh	r3, [r7, #8]
  FT5336_Object_t *pObj = (FT5336_Object_t *)handle;
 800e9f0:	68fb      	ldr	r3, [r7, #12]
 800e9f2:	617b      	str	r3, [r7, #20]

  return pObj->IO.WriteReg(pObj->IO.Address, Reg, pData, Length);
 800e9f4:	697b      	ldr	r3, [r7, #20]
 800e9f6:	68dc      	ldr	r4, [r3, #12]
 800e9f8:	697b      	ldr	r3, [r7, #20]
 800e9fa:	8918      	ldrh	r0, [r3, #8]
 800e9fc:	7afb      	ldrb	r3, [r7, #11]
 800e9fe:	b299      	uxth	r1, r3
 800ea00:	893b      	ldrh	r3, [r7, #8]
 800ea02:	687a      	ldr	r2, [r7, #4]
 800ea04:	47a0      	blx	r4
 800ea06:	4603      	mov	r3, r0
}
 800ea08:	4618      	mov	r0, r3
 800ea0a:	371c      	adds	r7, #28
 800ea0c:	46bd      	mov	sp, r7
 800ea0e:	bd90      	pop	{r4, r7, pc}

0800ea10 <ft5336_read_reg>:
  * @param  pdata pointer to data to be read
  * @param  length Length of data to read   
  * @retval Component status
  */
int32_t ft5336_read_reg(ft5336_ctx_t *ctx, uint8_t reg, uint8_t* pdata, uint16_t length)
{
 800ea10:	b590      	push	{r4, r7, lr}
 800ea12:	b085      	sub	sp, #20
 800ea14:	af00      	add	r7, sp, #0
 800ea16:	60f8      	str	r0, [r7, #12]
 800ea18:	607a      	str	r2, [r7, #4]
 800ea1a:	461a      	mov	r2, r3
 800ea1c:	460b      	mov	r3, r1
 800ea1e:	72fb      	strb	r3, [r7, #11]
 800ea20:	4613      	mov	r3, r2
 800ea22:	813b      	strh	r3, [r7, #8]
  return ctx->ReadReg(ctx->handle, reg, pdata, length);
 800ea24:	68fb      	ldr	r3, [r7, #12]
 800ea26:	685c      	ldr	r4, [r3, #4]
 800ea28:	68fb      	ldr	r3, [r7, #12]
 800ea2a:	6898      	ldr	r0, [r3, #8]
 800ea2c:	893b      	ldrh	r3, [r7, #8]
 800ea2e:	7af9      	ldrb	r1, [r7, #11]
 800ea30:	687a      	ldr	r2, [r7, #4]
 800ea32:	47a0      	blx	r4
 800ea34:	4603      	mov	r3, r0
}
 800ea36:	4618      	mov	r0, r3
 800ea38:	3714      	adds	r7, #20
 800ea3a:	46bd      	mov	sp, r7
 800ea3c:	bd90      	pop	{r4, r7, pc}

0800ea3e <ft5336_write_reg>:
  * @param  pdata pointer to data to be written
  * @param  length Length of data to write   
  * @retval Component status
  */
int32_t ft5336_write_reg(ft5336_ctx_t *ctx, uint8_t reg, uint8_t *pdata, uint16_t length)
{
 800ea3e:	b590      	push	{r4, r7, lr}
 800ea40:	b085      	sub	sp, #20
 800ea42:	af00      	add	r7, sp, #0
 800ea44:	60f8      	str	r0, [r7, #12]
 800ea46:	607a      	str	r2, [r7, #4]
 800ea48:	461a      	mov	r2, r3
 800ea4a:	460b      	mov	r3, r1
 800ea4c:	72fb      	strb	r3, [r7, #11]
 800ea4e:	4613      	mov	r3, r2
 800ea50:	813b      	strh	r3, [r7, #8]
  return ctx->WriteReg(ctx->handle, reg, pdata, length);
 800ea52:	68fb      	ldr	r3, [r7, #12]
 800ea54:	681c      	ldr	r4, [r3, #0]
 800ea56:	68fb      	ldr	r3, [r7, #12]
 800ea58:	6898      	ldr	r0, [r3, #8]
 800ea5a:	893b      	ldrh	r3, [r7, #8]
 800ea5c:	7af9      	ldrb	r1, [r7, #11]
 800ea5e:	687a      	ldr	r2, [r7, #4]
 800ea60:	47a0      	blx	r4
 800ea62:	4603      	mov	r3, r0
}
 800ea64:	4618      	mov	r0, r3
 800ea66:	3714      	adds	r7, #20
 800ea68:	46bd      	mov	sp, r7
 800ea6a:	bd90      	pop	{r4, r7, pc}

0800ea6c <ft5336_gest_id>:
  * @param  ctx Component context 
  * @param  value pointer to the value of FT5336_GEST_ID_REG register
  * @retval Component status
  */
int32_t  ft5336_gest_id(ft5336_ctx_t *ctx, uint8_t *value)
{
 800ea6c:	b580      	push	{r7, lr}
 800ea6e:	b082      	sub	sp, #8
 800ea70:	af00      	add	r7, sp, #0
 800ea72:	6078      	str	r0, [r7, #4]
 800ea74:	6039      	str	r1, [r7, #0]
  return ft5336_read_reg(ctx, FT5336_GEST_ID_REG, (uint8_t *)value, 1);
 800ea76:	2301      	movs	r3, #1
 800ea78:	683a      	ldr	r2, [r7, #0]
 800ea7a:	2101      	movs	r1, #1
 800ea7c:	6878      	ldr	r0, [r7, #4]
 800ea7e:	f7ff ffc7 	bl	800ea10 <ft5336_read_reg>
 800ea82:	4603      	mov	r3, r0
}
 800ea84:	4618      	mov	r0, r3
 800ea86:	3708      	adds	r7, #8
 800ea88:	46bd      	mov	sp, r7
 800ea8a:	bd80      	pop	{r7, pc}

0800ea8c <ft5336_td_status>:
  * @param  ctx Component context 
  * @param  value pointer to the value of Touch Data Status register
  * @retval Component status
  */
int32_t  ft5336_td_status(ft5336_ctx_t *ctx, uint8_t *value)
{
 800ea8c:	b580      	push	{r7, lr}
 800ea8e:	b084      	sub	sp, #16
 800ea90:	af00      	add	r7, sp, #0
 800ea92:	6078      	str	r0, [r7, #4]
 800ea94:	6039      	str	r1, [r7, #0]
  int32_t ret;
  
  ret = ft5336_read_reg(ctx, FT5336_TD_STAT_REG, (uint8_t *)value, 1);
 800ea96:	2301      	movs	r3, #1
 800ea98:	683a      	ldr	r2, [r7, #0]
 800ea9a:	2102      	movs	r1, #2
 800ea9c:	6878      	ldr	r0, [r7, #4]
 800ea9e:	f7ff ffb7 	bl	800ea10 <ft5336_read_reg>
 800eaa2:	60f8      	str	r0, [r7, #12]
  
  if(ret == 0)
 800eaa4:	68fb      	ldr	r3, [r7, #12]
 800eaa6:	2b00      	cmp	r3, #0
 800eaa8:	d10a      	bne.n	800eac0 <ft5336_td_status+0x34>
  {
    *value &= FT5336_TD_STATUS_BIT_MASK; 
 800eaaa:	683b      	ldr	r3, [r7, #0]
 800eaac:	781b      	ldrb	r3, [r3, #0]
 800eaae:	f003 030f 	and.w	r3, r3, #15
 800eab2:	b2da      	uxtb	r2, r3
 800eab4:	683b      	ldr	r3, [r7, #0]
 800eab6:	701a      	strb	r2, [r3, #0]
    *value = *value >> FT5336_TD_STATUS_BIT_POSITION; 
 800eab8:	683b      	ldr	r3, [r7, #0]
 800eaba:	781a      	ldrb	r2, [r3, #0]
 800eabc:	683b      	ldr	r3, [r7, #0]
 800eabe:	701a      	strb	r2, [r3, #0]
  }
  
  return ret;
 800eac0:	68fb      	ldr	r3, [r7, #12]
}
 800eac2:	4618      	mov	r0, r3
 800eac4:	3710      	adds	r7, #16
 800eac6:	46bd      	mov	sp, r7
 800eac8:	bd80      	pop	{r7, pc}

0800eaca <ft5336_radian_value>:
  * @param  ctx Component context 
  * @param  value Value to write to FT5336_RADIAN_VALUE_REG register
  * @retval Component status
  */
int32_t  ft5336_radian_value(ft5336_ctx_t *ctx, uint8_t value)
{
 800eaca:	b580      	push	{r7, lr}
 800eacc:	b082      	sub	sp, #8
 800eace:	af00      	add	r7, sp, #0
 800ead0:	6078      	str	r0, [r7, #4]
 800ead2:	460b      	mov	r3, r1
 800ead4:	70fb      	strb	r3, [r7, #3]
  return ft5336_write_reg(ctx, FT5336_RADIAN_VALUE_REG, &value, 1);
 800ead6:	1cfa      	adds	r2, r7, #3
 800ead8:	2301      	movs	r3, #1
 800eada:	2191      	movs	r1, #145	@ 0x91
 800eadc:	6878      	ldr	r0, [r7, #4]
 800eade:	f7ff ffae 	bl	800ea3e <ft5336_write_reg>
 800eae2:	4603      	mov	r3, r0
}
 800eae4:	4618      	mov	r0, r3
 800eae6:	3708      	adds	r7, #8
 800eae8:	46bd      	mov	sp, r7
 800eaea:	bd80      	pop	{r7, pc}

0800eaec <ft5336_offset_left_right>:
  * @param  ctx Component context 
  * @param  value Value to write to FT5336_OFFSET_LR_REG register
  * @retval Component status
  */
int32_t  ft5336_offset_left_right(ft5336_ctx_t *ctx, uint8_t value)
{
 800eaec:	b580      	push	{r7, lr}
 800eaee:	b082      	sub	sp, #8
 800eaf0:	af00      	add	r7, sp, #0
 800eaf2:	6078      	str	r0, [r7, #4]
 800eaf4:	460b      	mov	r3, r1
 800eaf6:	70fb      	strb	r3, [r7, #3]
  return ft5336_write_reg(ctx, FT5336_OFFSET_LR_REG, &value, 1);
 800eaf8:	1cfa      	adds	r2, r7, #3
 800eafa:	2301      	movs	r3, #1
 800eafc:	2192      	movs	r1, #146	@ 0x92
 800eafe:	6878      	ldr	r0, [r7, #4]
 800eb00:	f7ff ff9d 	bl	800ea3e <ft5336_write_reg>
 800eb04:	4603      	mov	r3, r0
}
 800eb06:	4618      	mov	r0, r3
 800eb08:	3708      	adds	r7, #8
 800eb0a:	46bd      	mov	sp, r7
 800eb0c:	bd80      	pop	{r7, pc}

0800eb0e <ft5336_offset_up_down>:
  * @param  ctx Component context 
  * @param  value Value to write to FT5336_OFFSET_UD_REG register
  * @retval Component status
  */
int32_t  ft5336_offset_up_down(ft5336_ctx_t *ctx, uint8_t value)
{
 800eb0e:	b580      	push	{r7, lr}
 800eb10:	b082      	sub	sp, #8
 800eb12:	af00      	add	r7, sp, #0
 800eb14:	6078      	str	r0, [r7, #4]
 800eb16:	460b      	mov	r3, r1
 800eb18:	70fb      	strb	r3, [r7, #3]
  return ft5336_write_reg(ctx, FT5336_OFFSET_UD_REG, &value, 1);
 800eb1a:	1cfa      	adds	r2, r7, #3
 800eb1c:	2301      	movs	r3, #1
 800eb1e:	2193      	movs	r1, #147	@ 0x93
 800eb20:	6878      	ldr	r0, [r7, #4]
 800eb22:	f7ff ff8c 	bl	800ea3e <ft5336_write_reg>
 800eb26:	4603      	mov	r3, r0
}
 800eb28:	4618      	mov	r0, r3
 800eb2a:	3708      	adds	r7, #8
 800eb2c:	46bd      	mov	sp, r7
 800eb2e:	bd80      	pop	{r7, pc}

0800eb30 <ft5336_disatnce_left_right>:
  * @param  ctx Component context 
  * @param  value Value to write to FT5336_DISTANCE_LR_REG register
  * @retval Component status
  */
int32_t  ft5336_disatnce_left_right(ft5336_ctx_t *ctx, uint8_t value)
{
 800eb30:	b580      	push	{r7, lr}
 800eb32:	b082      	sub	sp, #8
 800eb34:	af00      	add	r7, sp, #0
 800eb36:	6078      	str	r0, [r7, #4]
 800eb38:	460b      	mov	r3, r1
 800eb3a:	70fb      	strb	r3, [r7, #3]
  return ft5336_write_reg(ctx, FT5336_DISTANCE_LR_REG, &value, 1);
 800eb3c:	1cfa      	adds	r2, r7, #3
 800eb3e:	2301      	movs	r3, #1
 800eb40:	2194      	movs	r1, #148	@ 0x94
 800eb42:	6878      	ldr	r0, [r7, #4]
 800eb44:	f7ff ff7b 	bl	800ea3e <ft5336_write_reg>
 800eb48:	4603      	mov	r3, r0
}
 800eb4a:	4618      	mov	r0, r3
 800eb4c:	3708      	adds	r7, #8
 800eb4e:	46bd      	mov	sp, r7
 800eb50:	bd80      	pop	{r7, pc}

0800eb52 <ft5336_distance_up_down>:
  * @param  ctx Component context 
  * @param  value Value to write to FT5336_DISTANCE_UD_REG register
  * @retval Component status
  */
int32_t  ft5336_distance_up_down(ft5336_ctx_t *ctx, uint8_t value)
{
 800eb52:	b580      	push	{r7, lr}
 800eb54:	b082      	sub	sp, #8
 800eb56:	af00      	add	r7, sp, #0
 800eb58:	6078      	str	r0, [r7, #4]
 800eb5a:	460b      	mov	r3, r1
 800eb5c:	70fb      	strb	r3, [r7, #3]
  return ft5336_write_reg(ctx, FT5336_DISTANCE_UD_REG, &value, 1);
 800eb5e:	1cfa      	adds	r2, r7, #3
 800eb60:	2301      	movs	r3, #1
 800eb62:	2195      	movs	r1, #149	@ 0x95
 800eb64:	6878      	ldr	r0, [r7, #4]
 800eb66:	f7ff ff6a 	bl	800ea3e <ft5336_write_reg>
 800eb6a:	4603      	mov	r3, r0
}
 800eb6c:	4618      	mov	r0, r3
 800eb6e:	3708      	adds	r7, #8
 800eb70:	46bd      	mov	sp, r7
 800eb72:	bd80      	pop	{r7, pc}

0800eb74 <ft5336_distance_zoom>:
  * @param  ctx Component context 
  * @param  value Value to write to FT5336_DISTANCE_ZOOM_REG register
  * @retval Component status
  */
int32_t  ft5336_distance_zoom(ft5336_ctx_t *ctx, uint8_t value)
{
 800eb74:	b580      	push	{r7, lr}
 800eb76:	b082      	sub	sp, #8
 800eb78:	af00      	add	r7, sp, #0
 800eb7a:	6078      	str	r0, [r7, #4]
 800eb7c:	460b      	mov	r3, r1
 800eb7e:	70fb      	strb	r3, [r7, #3]
  return ft5336_write_reg(ctx, FT5336_DISTANCE_ZOOM_REG, &value, 1);
 800eb80:	1cfa      	adds	r2, r7, #3
 800eb82:	2301      	movs	r3, #1
 800eb84:	2196      	movs	r1, #150	@ 0x96
 800eb86:	6878      	ldr	r0, [r7, #4]
 800eb88:	f7ff ff59 	bl	800ea3e <ft5336_write_reg>
 800eb8c:	4603      	mov	r3, r0
}
 800eb8e:	4618      	mov	r0, r3
 800eb90:	3708      	adds	r7, #8
 800eb92:	46bd      	mov	sp, r7
 800eb94:	bd80      	pop	{r7, pc}

0800eb96 <ft5336_g_mode>:
  * @param  ctx Component context 
  * @param  value Value to write to FT5336_GMODE_REG register
  * @retval Component status
  */
int32_t  ft5336_g_mode(ft5336_ctx_t *ctx, uint8_t value)
{
 800eb96:	b580      	push	{r7, lr}
 800eb98:	b082      	sub	sp, #8
 800eb9a:	af00      	add	r7, sp, #0
 800eb9c:	6078      	str	r0, [r7, #4]
 800eb9e:	460b      	mov	r3, r1
 800eba0:	70fb      	strb	r3, [r7, #3]
  return ft5336_write_reg(ctx, FT5336_GMODE_REG, &value, 1);
 800eba2:	1cfa      	adds	r2, r7, #3
 800eba4:	2301      	movs	r3, #1
 800eba6:	21a4      	movs	r1, #164	@ 0xa4
 800eba8:	6878      	ldr	r0, [r7, #4]
 800ebaa:	f7ff ff48 	bl	800ea3e <ft5336_write_reg>
 800ebae:	4603      	mov	r3, r0
}
 800ebb0:	4618      	mov	r0, r3
 800ebb2:	3708      	adds	r7, #8
 800ebb4:	46bd      	mov	sp, r7
 800ebb6:	bd80      	pop	{r7, pc}

0800ebb8 <ft5336_chip_id>:
  * @param  ctx Component context 
  * @param  value Pointer to FT5336_CHIP_ID_REG register value
  * @retval Component status
  */
int32_t  ft5336_chip_id(ft5336_ctx_t *ctx, uint8_t *value)
{
 800ebb8:	b580      	push	{r7, lr}
 800ebba:	b084      	sub	sp, #16
 800ebbc:	af00      	add	r7, sp, #0
 800ebbe:	6078      	str	r0, [r7, #4]
 800ebc0:	6039      	str	r1, [r7, #0]
  int32_t ret;
  
  ret = ft5336_read_reg(ctx, FT5336_CHIP_ID_REG, (uint8_t *)value, 1);
 800ebc2:	2301      	movs	r3, #1
 800ebc4:	683a      	ldr	r2, [r7, #0]
 800ebc6:	21a8      	movs	r1, #168	@ 0xa8
 800ebc8:	6878      	ldr	r0, [r7, #4]
 800ebca:	f7ff ff21 	bl	800ea10 <ft5336_read_reg>
 800ebce:	60f8      	str	r0, [r7, #12]
  
  if(ret == 0)
 800ebd0:	68fb      	ldr	r3, [r7, #12]
 800ebd2:	2b00      	cmp	r3, #0
 800ebd4:	d107      	bne.n	800ebe6 <ft5336_chip_id+0x2e>
  {
    *value &= FT5336_CHIP_ID_BIT_MASK; 
 800ebd6:	683b      	ldr	r3, [r7, #0]
 800ebd8:	781a      	ldrb	r2, [r3, #0]
 800ebda:	683b      	ldr	r3, [r7, #0]
 800ebdc:	701a      	strb	r2, [r3, #0]
    *value = *value >> FT5336_CHIP_ID_BIT_POSITION; 
 800ebde:	683b      	ldr	r3, [r7, #0]
 800ebe0:	781a      	ldrb	r2, [r3, #0]
 800ebe2:	683b      	ldr	r3, [r7, #0]
 800ebe4:	701a      	strb	r2, [r3, #0]
  }
  
  return ret;
 800ebe6:	68fb      	ldr	r3, [r7, #12]
}
 800ebe8:	4618      	mov	r0, r3
 800ebea:	3710      	adds	r7, #16
 800ebec:	46bd      	mov	sp, r7
 800ebee:	bd80      	pop	{r7, pc}

0800ebf0 <MT25TL01G_GetFlashInfo>:
  * @brief  Return the configuration of the QSPI memory.
  * @param  pInfo pointer on the configuration structure
  * @retval QSPI memory status
  */
int32_t MT25TL01G_GetFlashInfo(MT25TL01G_Info_t *pInfo)
{
 800ebf0:	b480      	push	{r7}
 800ebf2:	b083      	sub	sp, #12
 800ebf4:	af00      	add	r7, sp, #0
 800ebf6:	6078      	str	r0, [r7, #4]
  pInfo->FlashSize          = MT25TL01G_FLASH_SIZE;
 800ebf8:	687b      	ldr	r3, [r7, #4]
 800ebfa:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 800ebfe:	601a      	str	r2, [r3, #0]
  pInfo->EraseSectorSize    = (2 * MT25TL01G_SUBSECTOR_SIZE);
 800ec00:	687b      	ldr	r3, [r7, #4]
 800ec02:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 800ec06:	605a      	str	r2, [r3, #4]
  pInfo->ProgPageSize       = MT25TL01G_PAGE_SIZE;
 800ec08:	687b      	ldr	r3, [r7, #4]
 800ec0a:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800ec0e:	60da      	str	r2, [r3, #12]
  pInfo->EraseSectorsNumber = (MT25TL01G_FLASH_SIZE/pInfo->EraseSectorSize);
 800ec10:	687b      	ldr	r3, [r7, #4]
 800ec12:	685b      	ldr	r3, [r3, #4]
 800ec14:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 800ec18:	fbb2 f2f3 	udiv	r2, r2, r3
 800ec1c:	687b      	ldr	r3, [r7, #4]
 800ec1e:	609a      	str	r2, [r3, #8]
  pInfo->ProgPagesNumber    = (MT25TL01G_FLASH_SIZE/pInfo->ProgPageSize);
 800ec20:	687b      	ldr	r3, [r7, #4]
 800ec22:	68db      	ldr	r3, [r3, #12]
 800ec24:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 800ec28:	fbb2 f2f3 	udiv	r2, r2, r3
 800ec2c:	687b      	ldr	r3, [r7, #4]
 800ec2e:	611a      	str	r2, [r3, #16]
  return MT25TL01G_OK;
 800ec30:	2300      	movs	r3, #0
}
 800ec32:	4618      	mov	r0, r3
 800ec34:	370c      	adds	r7, #12
 800ec36:	46bd      	mov	sp, r7
 800ec38:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ec3c:	4770      	bx	lr

0800ec3e <MT25TL01G_Enter4BytesAddressMode>:
  * @param  Ctx Component object pointer
  * @param  Mode Interface mode
  * @retval QSPI memory status
  */
int32_t MT25TL01G_Enter4BytesAddressMode(QSPI_HandleTypeDef *Ctx, MT25TL01G_Interface_t Mode)
{
 800ec3e:	b580      	push	{r7, lr}
 800ec40:	b090      	sub	sp, #64	@ 0x40
 800ec42:	af00      	add	r7, sp, #0
 800ec44:	6078      	str	r0, [r7, #4]
 800ec46:	460b      	mov	r3, r1
 800ec48:	70fb      	strb	r3, [r7, #3]
  QSPI_CommandTypeDef s_command;

  /* Initialize the command */
  s_command.InstructionMode   = (Mode == MT25TL01G_QPI_MODE) ? QSPI_INSTRUCTION_4_LINES : QSPI_INSTRUCTION_1_LINE;
 800ec4a:	78fb      	ldrb	r3, [r7, #3]
 800ec4c:	2b03      	cmp	r3, #3
 800ec4e:	d102      	bne.n	800ec56 <MT25TL01G_Enter4BytesAddressMode+0x18>
 800ec50:	f44f 7340 	mov.w	r3, #768	@ 0x300
 800ec54:	e001      	b.n	800ec5a <MT25TL01G_Enter4BytesAddressMode+0x1c>
 800ec56:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800ec5a:	623b      	str	r3, [r7, #32]
  s_command.Instruction       = MT25TL01G_ENTER_4_BYTE_ADDR_MODE_CMD;
 800ec5c:	23b7      	movs	r3, #183	@ 0xb7
 800ec5e:	60bb      	str	r3, [r7, #8]
  s_command.AddressMode       = QSPI_ADDRESS_NONE;
 800ec60:	2300      	movs	r3, #0
 800ec62:	627b      	str	r3, [r7, #36]	@ 0x24
  s_command.AlternateByteMode = QSPI_ALTERNATE_BYTES_NONE;
 800ec64:	2300      	movs	r3, #0
 800ec66:	62bb      	str	r3, [r7, #40]	@ 0x28
  s_command.DataMode          = QSPI_DATA_NONE;
 800ec68:	2300      	movs	r3, #0
 800ec6a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  s_command.DummyCycles       = 0;
 800ec6c:	2300      	movs	r3, #0
 800ec6e:	61fb      	str	r3, [r7, #28]
  s_command.DdrMode           = QSPI_DDR_MODE_DISABLE;
 800ec70:	2300      	movs	r3, #0
 800ec72:	637b      	str	r3, [r7, #52]	@ 0x34
  s_command.DdrHoldHalfCycle  = QSPI_DDR_HHC_ANALOG_DELAY;
 800ec74:	2300      	movs	r3, #0
 800ec76:	63bb      	str	r3, [r7, #56]	@ 0x38
  s_command.SIOOMode          = QSPI_SIOO_INST_EVERY_CMD;
 800ec78:	2300      	movs	r3, #0
 800ec7a:	63fb      	str	r3, [r7, #60]	@ 0x3c

  /*write enable */
  if( MT25TL01G_WriteEnable(Ctx,Mode)!=MT25TL01G_OK)
 800ec7c:	78fb      	ldrb	r3, [r7, #3]
 800ec7e:	4619      	mov	r1, r3
 800ec80:	6878      	ldr	r0, [r7, #4]
 800ec82:	f000 f860 	bl	800ed46 <MT25TL01G_WriteEnable>
 800ec86:	4603      	mov	r3, r0
 800ec88:	2b00      	cmp	r3, #0
 800ec8a:	d002      	beq.n	800ec92 <MT25TL01G_Enter4BytesAddressMode+0x54>
  {
    return MT25TL01G_ERROR_COMMAND;
 800ec8c:	f06f 0301 	mvn.w	r3, #1
 800ec90:	e019      	b.n	800ecc6 <MT25TL01G_Enter4BytesAddressMode+0x88>
  }
  /* Send the command */
  if (HAL_QSPI_Command(Ctx, &s_command, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 800ec92:	f107 0308 	add.w	r3, r7, #8
 800ec96:	f241 3288 	movw	r2, #5000	@ 0x1388
 800ec9a:	4619      	mov	r1, r3
 800ec9c:	6878      	ldr	r0, [r7, #4]
 800ec9e:	f004 fd45 	bl	801372c <HAL_QSPI_Command>
 800eca2:	4603      	mov	r3, r0
 800eca4:	2b00      	cmp	r3, #0
 800eca6:	d002      	beq.n	800ecae <MT25TL01G_Enter4BytesAddressMode+0x70>
  {
    return MT25TL01G_ERROR_COMMAND;
 800eca8:	f06f 0301 	mvn.w	r3, #1
 800ecac:	e00b      	b.n	800ecc6 <MT25TL01G_Enter4BytesAddressMode+0x88>
  }

  /* Configure automatic polling mode to wait the memory is ready */
  else if(MT25TL01G_AutoPollingMemReady(Ctx,Mode)!=MT25TL01G_OK)
 800ecae:	78fb      	ldrb	r3, [r7, #3]
 800ecb0:	4619      	mov	r1, r3
 800ecb2:	6878      	ldr	r0, [r7, #4]
 800ecb4:	f000 f80b 	bl	800ecce <MT25TL01G_AutoPollingMemReady>
 800ecb8:	4603      	mov	r3, r0
 800ecba:	2b00      	cmp	r3, #0
 800ecbc:	d002      	beq.n	800ecc4 <MT25TL01G_Enter4BytesAddressMode+0x86>
  {
    return MT25TL01G_ERROR_COMMAND;
 800ecbe:	f06f 0301 	mvn.w	r3, #1
 800ecc2:	e000      	b.n	800ecc6 <MT25TL01G_Enter4BytesAddressMode+0x88>
  }

  return MT25TL01G_OK;
 800ecc4:	2300      	movs	r3, #0
}
 800ecc6:	4618      	mov	r0, r3
 800ecc8:	3740      	adds	r7, #64	@ 0x40
 800ecca:	46bd      	mov	sp, r7
 800eccc:	bd80      	pop	{r7, pc}

0800ecce <MT25TL01G_AutoPollingMemReady>:
  * @param  Ctx Component object pointer
  * @param  Mode Interface mode
  * @retval QSPI memory status
  */
int32_t MT25TL01G_AutoPollingMemReady(QSPI_HandleTypeDef *Ctx, MT25TL01G_Interface_t Mode)
{
 800ecce:	b580      	push	{r7, lr}
 800ecd0:	b096      	sub	sp, #88	@ 0x58
 800ecd2:	af00      	add	r7, sp, #0
 800ecd4:	6078      	str	r0, [r7, #4]
 800ecd6:	460b      	mov	r3, r1
 800ecd8:	70fb      	strb	r3, [r7, #3]

  QSPI_CommandTypeDef     s_command;
  QSPI_AutoPollingTypeDef s_config;

  /* Configure automatic polling mode to wait for memory ready */
  s_command.InstructionMode   = QSPI_INSTRUCTION_4_LINES;
 800ecda:	f44f 7340 	mov.w	r3, #768	@ 0x300
 800ecde:	63bb      	str	r3, [r7, #56]	@ 0x38
  s_command.Instruction       = MT25TL01G_READ_STATUS_REG_CMD;
 800ece0:	2305      	movs	r3, #5
 800ece2:	623b      	str	r3, [r7, #32]
  s_command.AddressMode       = QSPI_ADDRESS_NONE;
 800ece4:	2300      	movs	r3, #0
 800ece6:	63fb      	str	r3, [r7, #60]	@ 0x3c
  s_command.AlternateByteMode = QSPI_ALTERNATE_BYTES_NONE;
 800ece8:	2300      	movs	r3, #0
 800ecea:	643b      	str	r3, [r7, #64]	@ 0x40
  s_command.DataMode          = QSPI_DATA_4_LINES;
 800ecec:	f04f 7340 	mov.w	r3, #50331648	@ 0x3000000
 800ecf0:	647b      	str	r3, [r7, #68]	@ 0x44
  s_command.DummyCycles       = 2;
 800ecf2:	2302      	movs	r3, #2
 800ecf4:	637b      	str	r3, [r7, #52]	@ 0x34
  s_command.DdrMode           = QSPI_DDR_MODE_DISABLE;
 800ecf6:	2300      	movs	r3, #0
 800ecf8:	64fb      	str	r3, [r7, #76]	@ 0x4c
  s_command.DdrHoldHalfCycle  = QSPI_DDR_HHC_ANALOG_DELAY;
 800ecfa:	2300      	movs	r3, #0
 800ecfc:	653b      	str	r3, [r7, #80]	@ 0x50
  s_command.SIOOMode          = QSPI_SIOO_INST_EVERY_CMD;
 800ecfe:	2300      	movs	r3, #0
 800ed00:	657b      	str	r3, [r7, #84]	@ 0x54

  s_config.Match           = 0;
 800ed02:	2300      	movs	r3, #0
 800ed04:	60bb      	str	r3, [r7, #8]
  s_config.MatchMode       = QSPI_MATCH_MODE_AND;
 800ed06:	2300      	movs	r3, #0
 800ed08:	61bb      	str	r3, [r7, #24]
  s_config.Interval        = 0x10;
 800ed0a:	2310      	movs	r3, #16
 800ed0c:	613b      	str	r3, [r7, #16]
  s_config.AutomaticStop   = QSPI_AUTOMATIC_STOP_ENABLE;
 800ed0e:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 800ed12:	61fb      	str	r3, [r7, #28]
  s_config.Mask            = MT25TL01G_SR_WIP | (MT25TL01G_SR_WIP <<8);
 800ed14:	f240 1301 	movw	r3, #257	@ 0x101
 800ed18:	60fb      	str	r3, [r7, #12]
  s_config.StatusBytesSize = 2;
 800ed1a:	2302      	movs	r3, #2
 800ed1c:	617b      	str	r3, [r7, #20]

  if (HAL_QSPI_AutoPolling(Ctx, &s_command, &s_config, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 800ed1e:	f107 0208 	add.w	r2, r7, #8
 800ed22:	f107 0120 	add.w	r1, r7, #32
 800ed26:	f241 3388 	movw	r3, #5000	@ 0x1388
 800ed2a:	6878      	ldr	r0, [r7, #4]
 800ed2c:	f004 fe8b 	bl	8013a46 <HAL_QSPI_AutoPolling>
 800ed30:	4603      	mov	r3, r0
 800ed32:	2b00      	cmp	r3, #0
 800ed34:	d002      	beq.n	800ed3c <MT25TL01G_AutoPollingMemReady+0x6e>
  {
    return MT25TL01G_ERROR_AUTOPOLLING;
 800ed36:	f06f 0304 	mvn.w	r3, #4
 800ed3a:	e000      	b.n	800ed3e <MT25TL01G_AutoPollingMemReady+0x70>
  }

  return MT25TL01G_OK;
 800ed3c:	2300      	movs	r3, #0

}
 800ed3e:	4618      	mov	r0, r3
 800ed40:	3758      	adds	r7, #88	@ 0x58
 800ed42:	46bd      	mov	sp, r7
 800ed44:	bd80      	pop	{r7, pc}

0800ed46 <MT25TL01G_WriteEnable>:
  * @param  Mode Interface mode
  * @retval QSPI memory status
  */

int32_t MT25TL01G_WriteEnable(QSPI_HandleTypeDef *Ctx, MT25TL01G_Interface_t Mode)
{
 800ed46:	b580      	push	{r7, lr}
 800ed48:	b096      	sub	sp, #88	@ 0x58
 800ed4a:	af00      	add	r7, sp, #0
 800ed4c:	6078      	str	r0, [r7, #4]
 800ed4e:	460b      	mov	r3, r1
 800ed50:	70fb      	strb	r3, [r7, #3]
  QSPI_CommandTypeDef     s_command;
  QSPI_AutoPollingTypeDef s_config;

  /* Enable write operations */
  s_command.InstructionMode   = (Mode == MT25TL01G_QPI_MODE) ? QSPI_INSTRUCTION_4_LINES : QSPI_INSTRUCTION_1_LINE;
 800ed52:	78fb      	ldrb	r3, [r7, #3]
 800ed54:	2b03      	cmp	r3, #3
 800ed56:	d102      	bne.n	800ed5e <MT25TL01G_WriteEnable+0x18>
 800ed58:	f44f 7340 	mov.w	r3, #768	@ 0x300
 800ed5c:	e001      	b.n	800ed62 <MT25TL01G_WriteEnable+0x1c>
 800ed5e:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800ed62:	63bb      	str	r3, [r7, #56]	@ 0x38

  s_command.Instruction       = MT25TL01G_WRITE_ENABLE_CMD;
 800ed64:	2306      	movs	r3, #6
 800ed66:	623b      	str	r3, [r7, #32]
  s_command.AddressMode       = QSPI_ADDRESS_NONE;
 800ed68:	2300      	movs	r3, #0
 800ed6a:	63fb      	str	r3, [r7, #60]	@ 0x3c
  s_command.AlternateByteMode = QSPI_ALTERNATE_BYTES_NONE;
 800ed6c:	2300      	movs	r3, #0
 800ed6e:	643b      	str	r3, [r7, #64]	@ 0x40
  s_command.DataMode          = QSPI_DATA_NONE;
 800ed70:	2300      	movs	r3, #0
 800ed72:	647b      	str	r3, [r7, #68]	@ 0x44
  s_command.DummyCycles       = 0;
 800ed74:	2300      	movs	r3, #0
 800ed76:	637b      	str	r3, [r7, #52]	@ 0x34
  s_command.DdrMode           = QSPI_DDR_MODE_DISABLE;
 800ed78:	2300      	movs	r3, #0
 800ed7a:	64fb      	str	r3, [r7, #76]	@ 0x4c
  s_command.DdrHoldHalfCycle  = QSPI_DDR_HHC_ANALOG_DELAY;
 800ed7c:	2300      	movs	r3, #0
 800ed7e:	653b      	str	r3, [r7, #80]	@ 0x50
  s_command.SIOOMode          = QSPI_SIOO_INST_EVERY_CMD;
 800ed80:	2300      	movs	r3, #0
 800ed82:	657b      	str	r3, [r7, #84]	@ 0x54

  if (HAL_QSPI_Command(Ctx, &s_command, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 800ed84:	f107 0320 	add.w	r3, r7, #32
 800ed88:	f241 3288 	movw	r2, #5000	@ 0x1388
 800ed8c:	4619      	mov	r1, r3
 800ed8e:	6878      	ldr	r0, [r7, #4]
 800ed90:	f004 fccc 	bl	801372c <HAL_QSPI_Command>
 800ed94:	4603      	mov	r3, r0
 800ed96:	2b00      	cmp	r3, #0
 800ed98:	d002      	beq.n	800eda0 <MT25TL01G_WriteEnable+0x5a>
  {
    return MT25TL01G_ERROR_COMMAND;
 800ed9a:	f06f 0301 	mvn.w	r3, #1
 800ed9e:	e029      	b.n	800edf4 <MT25TL01G_WriteEnable+0xae>
  }

  /* Configure automatic polling mode to wait for write enabling */
  s_config.Match           = MT25TL01G_SR_WREN | (MT25TL01G_SR_WREN << 8);
 800eda0:	f240 2302 	movw	r3, #514	@ 0x202
 800eda4:	60bb      	str	r3, [r7, #8]
  s_config.Mask            = MT25TL01G_SR_WREN | (MT25TL01G_SR_WREN << 8);
 800eda6:	f240 2302 	movw	r3, #514	@ 0x202
 800edaa:	60fb      	str	r3, [r7, #12]
  s_config.MatchMode       = QSPI_MATCH_MODE_AND;
 800edac:	2300      	movs	r3, #0
 800edae:	61bb      	str	r3, [r7, #24]
  s_config.StatusBytesSize = 2;
 800edb0:	2302      	movs	r3, #2
 800edb2:	617b      	str	r3, [r7, #20]
  s_config.Interval        = 0x10;
 800edb4:	2310      	movs	r3, #16
 800edb6:	613b      	str	r3, [r7, #16]
  s_config.AutomaticStop   = QSPI_AUTOMATIC_STOP_ENABLE;
 800edb8:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 800edbc:	61fb      	str	r3, [r7, #28]

  s_command.Instruction    = MT25TL01G_READ_STATUS_REG_CMD;
 800edbe:	2305      	movs	r3, #5
 800edc0:	623b      	str	r3, [r7, #32]
  s_command.DataMode       = (Mode == MT25TL01G_QPI_MODE) ? QSPI_DATA_4_LINES : QSPI_DATA_1_LINE;
 800edc2:	78fb      	ldrb	r3, [r7, #3]
 800edc4:	2b03      	cmp	r3, #3
 800edc6:	d102      	bne.n	800edce <MT25TL01G_WriteEnable+0x88>
 800edc8:	f04f 7340 	mov.w	r3, #50331648	@ 0x3000000
 800edcc:	e001      	b.n	800edd2 <MT25TL01G_WriteEnable+0x8c>
 800edce:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 800edd2:	647b      	str	r3, [r7, #68]	@ 0x44


  if (HAL_QSPI_AutoPolling(Ctx, &s_command, &s_config, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 800edd4:	f107 0208 	add.w	r2, r7, #8
 800edd8:	f107 0120 	add.w	r1, r7, #32
 800eddc:	f241 3388 	movw	r3, #5000	@ 0x1388
 800ede0:	6878      	ldr	r0, [r7, #4]
 800ede2:	f004 fe30 	bl	8013a46 <HAL_QSPI_AutoPolling>
 800ede6:	4603      	mov	r3, r0
 800ede8:	2b00      	cmp	r3, #0
 800edea:	d002      	beq.n	800edf2 <MT25TL01G_WriteEnable+0xac>
  {
    return MT25TL01G_ERROR_AUTOPOLLING;
 800edec:	f06f 0304 	mvn.w	r3, #4
 800edf0:	e000      	b.n	800edf4 <MT25TL01G_WriteEnable+0xae>
  }

  return MT25TL01G_OK;
 800edf2:	2300      	movs	r3, #0
}
 800edf4:	4618      	mov	r0, r3
 800edf6:	3758      	adds	r7, #88	@ 0x58
 800edf8:	46bd      	mov	sp, r7
 800edfa:	bd80      	pop	{r7, pc}

0800edfc <MT25TL01G_EnterQPIMode>:
  * @param  Ctx Component object pointer
  * @param  Mode Interface mode
  * @retval QSPI memory status
  */
int32_t MT25TL01G_EnterQPIMode(QSPI_HandleTypeDef *Ctx)
{
 800edfc:	b580      	push	{r7, lr}
 800edfe:	b090      	sub	sp, #64	@ 0x40
 800ee00:	af00      	add	r7, sp, #0
 800ee02:	6078      	str	r0, [r7, #4]
  QSPI_CommandTypeDef s_command;

  s_command.InstructionMode   = QSPI_INSTRUCTION_1_LINE;
 800ee04:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800ee08:	623b      	str	r3, [r7, #32]
  s_command.Instruction       = MT25TL01G_ENTER_QUAD_CMD;
 800ee0a:	2335      	movs	r3, #53	@ 0x35
 800ee0c:	60bb      	str	r3, [r7, #8]
  s_command.AddressMode       = QSPI_ADDRESS_NONE;
 800ee0e:	2300      	movs	r3, #0
 800ee10:	627b      	str	r3, [r7, #36]	@ 0x24
  s_command.AlternateByteMode = QSPI_ALTERNATE_BYTES_NONE;
 800ee12:	2300      	movs	r3, #0
 800ee14:	62bb      	str	r3, [r7, #40]	@ 0x28
  s_command.DataMode          = QSPI_DATA_NONE;
 800ee16:	2300      	movs	r3, #0
 800ee18:	62fb      	str	r3, [r7, #44]	@ 0x2c
  s_command.DummyCycles       = 0;
 800ee1a:	2300      	movs	r3, #0
 800ee1c:	61fb      	str	r3, [r7, #28]
  s_command.DdrMode           = QSPI_DDR_MODE_DISABLE;
 800ee1e:	2300      	movs	r3, #0
 800ee20:	637b      	str	r3, [r7, #52]	@ 0x34
  s_command.DdrHoldHalfCycle  = QSPI_DDR_HHC_ANALOG_DELAY;
 800ee22:	2300      	movs	r3, #0
 800ee24:	63bb      	str	r3, [r7, #56]	@ 0x38
  s_command.SIOOMode          = QSPI_SIOO_INST_EVERY_CMD;
 800ee26:	2300      	movs	r3, #0
 800ee28:	63fb      	str	r3, [r7, #60]	@ 0x3c

  if (HAL_QSPI_Command(Ctx, &s_command, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 800ee2a:	f107 0308 	add.w	r3, r7, #8
 800ee2e:	f241 3288 	movw	r2, #5000	@ 0x1388
 800ee32:	4619      	mov	r1, r3
 800ee34:	6878      	ldr	r0, [r7, #4]
 800ee36:	f004 fc79 	bl	801372c <HAL_QSPI_Command>
 800ee3a:	4603      	mov	r3, r0
 800ee3c:	2b00      	cmp	r3, #0
 800ee3e:	d002      	beq.n	800ee46 <MT25TL01G_EnterQPIMode+0x4a>
  {
    return MT25TL01G_ERROR_COMMAND;
 800ee40:	f06f 0301 	mvn.w	r3, #1
 800ee44:	e000      	b.n	800ee48 <MT25TL01G_EnterQPIMode+0x4c>
  }

  return MT25TL01G_OK;
 800ee46:	2300      	movs	r3, #0
}
 800ee48:	4618      	mov	r0, r3
 800ee4a:	3740      	adds	r7, #64	@ 0x40
 800ee4c:	46bd      	mov	sp, r7
 800ee4e:	bd80      	pop	{r7, pc}

0800ee50 <MT25TL01G_ExitQPIMode>:
  * @param  Ctx Component object pointer
  * @param  Mode Interface mode
  * @retval QSPI memory status
  */
int32_t MT25TL01G_ExitQPIMode(QSPI_HandleTypeDef *Ctx)
{
 800ee50:	b580      	push	{r7, lr}
 800ee52:	b090      	sub	sp, #64	@ 0x40
 800ee54:	af00      	add	r7, sp, #0
 800ee56:	6078      	str	r0, [r7, #4]
  QSPI_CommandTypeDef s_command;

  s_command.InstructionMode   = QSPI_INSTRUCTION_1_LINE;
 800ee58:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800ee5c:	623b      	str	r3, [r7, #32]
  s_command.Instruction       = MT25TL01G_EXIT_QUAD_CMD;
 800ee5e:	23f5      	movs	r3, #245	@ 0xf5
 800ee60:	60bb      	str	r3, [r7, #8]
  s_command.AddressMode       = QSPI_ADDRESS_NONE;
 800ee62:	2300      	movs	r3, #0
 800ee64:	627b      	str	r3, [r7, #36]	@ 0x24
  s_command.AlternateByteMode = QSPI_ALTERNATE_BYTES_NONE;
 800ee66:	2300      	movs	r3, #0
 800ee68:	62bb      	str	r3, [r7, #40]	@ 0x28
  s_command.DataMode          = QSPI_DATA_NONE;
 800ee6a:	2300      	movs	r3, #0
 800ee6c:	62fb      	str	r3, [r7, #44]	@ 0x2c
  s_command.DummyCycles       = 0;
 800ee6e:	2300      	movs	r3, #0
 800ee70:	61fb      	str	r3, [r7, #28]
  s_command.DdrMode           = QSPI_DDR_MODE_DISABLE;
 800ee72:	2300      	movs	r3, #0
 800ee74:	637b      	str	r3, [r7, #52]	@ 0x34
  s_command.DdrHoldHalfCycle  = QSPI_DDR_HHC_ANALOG_DELAY;
 800ee76:	2300      	movs	r3, #0
 800ee78:	63bb      	str	r3, [r7, #56]	@ 0x38
  s_command.SIOOMode          = QSPI_SIOO_INST_EVERY_CMD;
 800ee7a:	2300      	movs	r3, #0
 800ee7c:	63fb      	str	r3, [r7, #60]	@ 0x3c

  if (HAL_QSPI_Command(Ctx, &s_command, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 800ee7e:	f107 0308 	add.w	r3, r7, #8
 800ee82:	f241 3288 	movw	r2, #5000	@ 0x1388
 800ee86:	4619      	mov	r1, r3
 800ee88:	6878      	ldr	r0, [r7, #4]
 800ee8a:	f004 fc4f 	bl	801372c <HAL_QSPI_Command>
 800ee8e:	4603      	mov	r3, r0
 800ee90:	2b00      	cmp	r3, #0
 800ee92:	d002      	beq.n	800ee9a <MT25TL01G_ExitQPIMode+0x4a>
  {
    return MT25TL01G_ERROR_COMMAND;
 800ee94:	f06f 0301 	mvn.w	r3, #1
 800ee98:	e000      	b.n	800ee9c <MT25TL01G_ExitQPIMode+0x4c>
  }

  return MT25TL01G_OK;
 800ee9a:	2300      	movs	r3, #0
}
 800ee9c:	4618      	mov	r0, r3
 800ee9e:	3740      	adds	r7, #64	@ 0x40
 800eea0:	46bd      	mov	sp, r7
 800eea2:	bd80      	pop	{r7, pc}

0800eea4 <MT25TL01G_EnableMemoryMappedModeDTR>:
  * @param  Ctx Component object pointer
  * @param  Mode Interface mode
  * @retval QSPI memory status
  */
int32_t MT25TL01G_EnableMemoryMappedModeDTR(QSPI_HandleTypeDef *Ctx, MT25TL01G_Interface_t Mode)
{
 800eea4:	b580      	push	{r7, lr}
 800eea6:	b092      	sub	sp, #72	@ 0x48
 800eea8:	af00      	add	r7, sp, #0
 800eeaa:	6078      	str	r0, [r7, #4]
 800eeac:	460b      	mov	r3, r1
 800eeae:	70fb      	strb	r3, [r7, #3]
  QSPI_CommandTypeDef      s_command;
  QSPI_MemoryMappedTypeDef s_mem_mapped_cfg;
  switch(Mode)
 800eeb0:	78fb      	ldrb	r3, [r7, #3]
 800eeb2:	2b03      	cmp	r3, #3
 800eeb4:	d83a      	bhi.n	800ef2c <MT25TL01G_EnableMemoryMappedModeDTR+0x88>
 800eeb6:	a201      	add	r2, pc, #4	@ (adr r2, 800eebc <MT25TL01G_EnableMemoryMappedModeDTR+0x18>)
 800eeb8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800eebc:	0800eecd 	.word	0x0800eecd
 800eec0:	0800eee5 	.word	0x0800eee5
 800eec4:	0800eefd 	.word	0x0800eefd
 800eec8:	0800ef15 	.word	0x0800ef15
  {
  case MT25TL01G_SPI_MODE:                /* 1-1-1 commands, Power on H/W default setting */
    s_command.InstructionMode   = QSPI_INSTRUCTION_1_LINE;
 800eecc:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800eed0:	62bb      	str	r3, [r7, #40]	@ 0x28
    s_command.Instruction       = MT25TL01G_FAST_READ_4_BYTE_DTR_CMD;
 800eed2:	230e      	movs	r3, #14
 800eed4:	613b      	str	r3, [r7, #16]
    s_command.AddressMode       = QSPI_ADDRESS_1_LINE;
 800eed6:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800eeda:	62fb      	str	r3, [r7, #44]	@ 0x2c
    s_command.DataMode          = QSPI_DATA_1_LINE;
 800eedc:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 800eee0:	637b      	str	r3, [r7, #52]	@ 0x34

    break;
 800eee2:	e023      	b.n	800ef2c <MT25TL01G_EnableMemoryMappedModeDTR+0x88>
  case MT25TL01G_SPI_2IO_MODE:           /* 1-1-2 read commands */

    s_command.InstructionMode   = QSPI_INSTRUCTION_1_LINE;
 800eee4:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800eee8:	62bb      	str	r3, [r7, #40]	@ 0x28
    s_command.Instruction       = MT25TL01G_DUAL_OUT_FAST_READ_DTR_CMD;
 800eeea:	233d      	movs	r3, #61	@ 0x3d
 800eeec:	613b      	str	r3, [r7, #16]
    s_command.AddressMode       = QSPI_ADDRESS_1_LINE;
 800eeee:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800eef2:	62fb      	str	r3, [r7, #44]	@ 0x2c
    s_command.DataMode          = QSPI_DATA_2_LINES;
 800eef4:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 800eef8:	637b      	str	r3, [r7, #52]	@ 0x34

    break;
 800eefa:	e017      	b.n	800ef2c <MT25TL01G_EnableMemoryMappedModeDTR+0x88>
  case MT25TL01G_SPI_4IO_MODE:             /* 1-4-4 read commands */

    s_command.InstructionMode   = QSPI_INSTRUCTION_1_LINE;
 800eefc:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800ef00:	62bb      	str	r3, [r7, #40]	@ 0x28
    s_command.Instruction       = MT25TL01G_QUAD_INOUT_FAST_READ_4_BYTE_DTR_CMD;
 800ef02:	23ee      	movs	r3, #238	@ 0xee
 800ef04:	613b      	str	r3, [r7, #16]
    s_command.AddressMode       = QSPI_ADDRESS_4_LINES;
 800ef06:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 800ef0a:	62fb      	str	r3, [r7, #44]	@ 0x2c
    s_command.DataMode          = QSPI_DATA_4_LINES;
 800ef0c:	f04f 7340 	mov.w	r3, #50331648	@ 0x3000000
 800ef10:	637b      	str	r3, [r7, #52]	@ 0x34

    break;
 800ef12:	e00b      	b.n	800ef2c <MT25TL01G_EnableMemoryMappedModeDTR+0x88>
  case MT25TL01G_QPI_MODE:                 /* 4-4-4 commands */
    s_command.InstructionMode   = QSPI_INSTRUCTION_4_LINES;
 800ef14:	f44f 7340 	mov.w	r3, #768	@ 0x300
 800ef18:	62bb      	str	r3, [r7, #40]	@ 0x28
    s_command.Instruction       = MT25TL01G_QUAD_INOUT_FAST_READ_DTR_CMD;
 800ef1a:	23ed      	movs	r3, #237	@ 0xed
 800ef1c:	613b      	str	r3, [r7, #16]
    s_command.AddressMode       = QSPI_ADDRESS_4_LINES;
 800ef1e:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 800ef22:	62fb      	str	r3, [r7, #44]	@ 0x2c
    s_command.DataMode          = QSPI_DATA_4_LINES;
 800ef24:	f04f 7340 	mov.w	r3, #50331648	@ 0x3000000
 800ef28:	637b      	str	r3, [r7, #52]	@ 0x34

    break;
 800ef2a:	bf00      	nop
  }
  /* Configure the command for the read instruction */
  s_command.AddressSize       = QSPI_ADDRESS_32_BITS;
 800ef2c:	f44f 5340 	mov.w	r3, #12288	@ 0x3000
 800ef30:	61fb      	str	r3, [r7, #28]
  s_command.AlternateByteMode = QSPI_ALTERNATE_BYTES_NONE;
 800ef32:	2300      	movs	r3, #0
 800ef34:	633b      	str	r3, [r7, #48]	@ 0x30
  s_command.DummyCycles       = MT25TL01G_DUMMY_CYCLES_READ_QUAD_DTR;
 800ef36:	2308      	movs	r3, #8
 800ef38:	627b      	str	r3, [r7, #36]	@ 0x24
  s_command.DdrMode           = QSPI_DDR_MODE_ENABLE;
 800ef3a:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 800ef3e:	63fb      	str	r3, [r7, #60]	@ 0x3c
  s_command.DdrHoldHalfCycle  = QSPI_DDR_HHC_HALF_CLK_DELAY;
 800ef40:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 800ef44:	643b      	str	r3, [r7, #64]	@ 0x40
  s_command.SIOOMode          = QSPI_SIOO_INST_EVERY_CMD;
 800ef46:	2300      	movs	r3, #0
 800ef48:	647b      	str	r3, [r7, #68]	@ 0x44

  /* Configure the memory mapped mode */
  s_mem_mapped_cfg.TimeOutActivation = QSPI_TIMEOUT_COUNTER_DISABLE;
 800ef4a:	2300      	movs	r3, #0
 800ef4c:	60fb      	str	r3, [r7, #12]
  s_mem_mapped_cfg.TimeOutPeriod     = 0;
 800ef4e:	2300      	movs	r3, #0
 800ef50:	60bb      	str	r3, [r7, #8]

  if (HAL_QSPI_MemoryMapped(Ctx, &s_command, &s_mem_mapped_cfg) != HAL_OK)
 800ef52:	f107 0208 	add.w	r2, r7, #8
 800ef56:	f107 0310 	add.w	r3, r7, #16
 800ef5a:	4619      	mov	r1, r3
 800ef5c:	6878      	ldr	r0, [r7, #4]
 800ef5e:	f004 fde9 	bl	8013b34 <HAL_QSPI_MemoryMapped>
 800ef62:	4603      	mov	r3, r0
 800ef64:	2b00      	cmp	r3, #0
 800ef66:	d002      	beq.n	800ef6e <MT25TL01G_EnableMemoryMappedModeDTR+0xca>
  {
    return MT25TL01G_ERROR_MEMORYMAPPED;
 800ef68:	f06f 0305 	mvn.w	r3, #5
 800ef6c:	e000      	b.n	800ef70 <MT25TL01G_EnableMemoryMappedModeDTR+0xcc>
  }

  return MT25TL01G_OK;
 800ef6e:	2300      	movs	r3, #0
}
 800ef70:	4618      	mov	r0, r3
 800ef72:	3748      	adds	r7, #72	@ 0x48
 800ef74:	46bd      	mov	sp, r7
 800ef76:	bd80      	pop	{r7, pc}

0800ef78 <MT25TL01G_EnableMemoryMappedModeSTR>:
  * @param  Mode Interface mode
  * @retval QSPI memory status
  */

int32_t MT25TL01G_EnableMemoryMappedModeSTR(QSPI_HandleTypeDef *Ctx, MT25TL01G_Interface_t Mode)
{
 800ef78:	b580      	push	{r7, lr}
 800ef7a:	b092      	sub	sp, #72	@ 0x48
 800ef7c:	af00      	add	r7, sp, #0
 800ef7e:	6078      	str	r0, [r7, #4]
 800ef80:	460b      	mov	r3, r1
 800ef82:	70fb      	strb	r3, [r7, #3]
  QSPI_CommandTypeDef      s_command;
  QSPI_MemoryMappedTypeDef s_mem_mapped_cfg;
  switch(Mode)
 800ef84:	78fb      	ldrb	r3, [r7, #3]
 800ef86:	2b03      	cmp	r3, #3
 800ef88:	d83a      	bhi.n	800f000 <MT25TL01G_EnableMemoryMappedModeSTR+0x88>
 800ef8a:	a201      	add	r2, pc, #4	@ (adr r2, 800ef90 <MT25TL01G_EnableMemoryMappedModeSTR+0x18>)
 800ef8c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ef90:	0800efa1 	.word	0x0800efa1
 800ef94:	0800efb9 	.word	0x0800efb9
 800ef98:	0800efd1 	.word	0x0800efd1
 800ef9c:	0800efe9 	.word	0x0800efe9
  {
  case MT25TL01G_SPI_MODE:           /* 1-1-1 read commands */
    s_command.InstructionMode   = QSPI_INSTRUCTION_1_LINE;
 800efa0:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800efa4:	62bb      	str	r3, [r7, #40]	@ 0x28
    s_command.Instruction       = MT25TL01G_FAST_READ_4_BYTE_ADDR_CMD;
 800efa6:	230c      	movs	r3, #12
 800efa8:	613b      	str	r3, [r7, #16]
    s_command.AddressMode       = QSPI_ADDRESS_1_LINE;
 800efaa:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800efae:	62fb      	str	r3, [r7, #44]	@ 0x2c
    s_command.DataMode          = QSPI_DATA_1_LINE;
 800efb0:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 800efb4:	637b      	str	r3, [r7, #52]	@ 0x34


    break;
 800efb6:	e023      	b.n	800f000 <MT25TL01G_EnableMemoryMappedModeSTR+0x88>
  case MT25TL01G_SPI_2IO_MODE:           /* 1-2-2 read commands */

    s_command.InstructionMode   = QSPI_INSTRUCTION_1_LINE;
 800efb8:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800efbc:	62bb      	str	r3, [r7, #40]	@ 0x28
    s_command.Instruction       = MT25TL01G_DUAL_INOUT_FAST_READ_4_BYTE_ADDR_CMD;
 800efbe:	23bc      	movs	r3, #188	@ 0xbc
 800efc0:	613b      	str	r3, [r7, #16]
    s_command.AddressMode       = QSPI_ADDRESS_2_LINES;
 800efc2:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 800efc6:	62fb      	str	r3, [r7, #44]	@ 0x2c
    s_command.DataMode          = QSPI_DATA_2_LINES;
 800efc8:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 800efcc:	637b      	str	r3, [r7, #52]	@ 0x34

    break;
 800efce:	e017      	b.n	800f000 <MT25TL01G_EnableMemoryMappedModeSTR+0x88>

  case MT25TL01G_SPI_4IO_MODE:             /* 1-4-4 read commands */

    s_command.InstructionMode   = QSPI_INSTRUCTION_1_LINE;
 800efd0:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800efd4:	62bb      	str	r3, [r7, #40]	@ 0x28
    s_command.Instruction       = MT25TL01G_QUAD_INOUT_FAST_READ_4_BYTE_ADDR_CMD;
 800efd6:	23ec      	movs	r3, #236	@ 0xec
 800efd8:	613b      	str	r3, [r7, #16]
    s_command.AddressMode       = QSPI_ADDRESS_4_LINES;
 800efda:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 800efde:	62fb      	str	r3, [r7, #44]	@ 0x2c
    s_command.DataMode          = QSPI_DATA_4_LINES;
 800efe0:	f04f 7340 	mov.w	r3, #50331648	@ 0x3000000
 800efe4:	637b      	str	r3, [r7, #52]	@ 0x34

    break;
 800efe6:	e00b      	b.n	800f000 <MT25TL01G_EnableMemoryMappedModeSTR+0x88>

  case MT25TL01G_QPI_MODE:                 /* 4-4-4 commands */
    s_command.InstructionMode   = QSPI_INSTRUCTION_4_LINES;
 800efe8:	f44f 7340 	mov.w	r3, #768	@ 0x300
 800efec:	62bb      	str	r3, [r7, #40]	@ 0x28
    s_command.Instruction       = MT25TL01G_QUAD_INOUT_FAST_READ_CMD;
 800efee:	23eb      	movs	r3, #235	@ 0xeb
 800eff0:	613b      	str	r3, [r7, #16]
    s_command.AddressMode       = QSPI_ADDRESS_4_LINES;
 800eff2:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 800eff6:	62fb      	str	r3, [r7, #44]	@ 0x2c
    s_command.DataMode          = QSPI_DATA_4_LINES;
 800eff8:	f04f 7340 	mov.w	r3, #50331648	@ 0x3000000
 800effc:	637b      	str	r3, [r7, #52]	@ 0x34

    break;
 800effe:	bf00      	nop

  }
  /* Configure the command for the read instruction */
  s_command.DummyCycles       = MT25TL01G_DUMMY_CYCLES_READ;
 800f000:	2308      	movs	r3, #8
 800f002:	627b      	str	r3, [r7, #36]	@ 0x24
  s_command.AddressSize       = QSPI_ADDRESS_32_BITS;
 800f004:	f44f 5340 	mov.w	r3, #12288	@ 0x3000
 800f008:	61fb      	str	r3, [r7, #28]
  s_command.AlternateByteMode = QSPI_ALTERNATE_BYTES_NONE;
 800f00a:	2300      	movs	r3, #0
 800f00c:	633b      	str	r3, [r7, #48]	@ 0x30
  s_command.DdrMode           = QSPI_DDR_MODE_DISABLE;
 800f00e:	2300      	movs	r3, #0
 800f010:	63fb      	str	r3, [r7, #60]	@ 0x3c
  s_command.DdrHoldHalfCycle  = QSPI_DDR_HHC_ANALOG_DELAY;
 800f012:	2300      	movs	r3, #0
 800f014:	643b      	str	r3, [r7, #64]	@ 0x40
  s_command.SIOOMode          = QSPI_SIOO_INST_EVERY_CMD;
 800f016:	2300      	movs	r3, #0
 800f018:	647b      	str	r3, [r7, #68]	@ 0x44

  /* Configure the memory mapped mode */
  s_mem_mapped_cfg.TimeOutActivation = QSPI_TIMEOUT_COUNTER_DISABLE;
 800f01a:	2300      	movs	r3, #0
 800f01c:	60fb      	str	r3, [r7, #12]
  s_mem_mapped_cfg.TimeOutPeriod     = 0;
 800f01e:	2300      	movs	r3, #0
 800f020:	60bb      	str	r3, [r7, #8]

  if (HAL_QSPI_MemoryMapped(Ctx, &s_command, &s_mem_mapped_cfg) != HAL_OK)
 800f022:	f107 0208 	add.w	r2, r7, #8
 800f026:	f107 0310 	add.w	r3, r7, #16
 800f02a:	4619      	mov	r1, r3
 800f02c:	6878      	ldr	r0, [r7, #4]
 800f02e:	f004 fd81 	bl	8013b34 <HAL_QSPI_MemoryMapped>
 800f032:	4603      	mov	r3, r0
 800f034:	2b00      	cmp	r3, #0
 800f036:	d002      	beq.n	800f03e <MT25TL01G_EnableMemoryMappedModeSTR+0xc6>
  {
    return MT25TL01G_ERROR_MEMORYMAPPED;
 800f038:	f06f 0305 	mvn.w	r3, #5
 800f03c:	e000      	b.n	800f040 <MT25TL01G_EnableMemoryMappedModeSTR+0xc8>
  }

  return MT25TL01G_OK;
 800f03e:	2300      	movs	r3, #0
}
 800f040:	4618      	mov	r0, r3
 800f042:	3748      	adds	r7, #72	@ 0x48
 800f044:	46bd      	mov	sp, r7
 800f046:	bd80      	pop	{r7, pc}

0800f048 <MT25TL01G_ResetEnable>:
  * @param  Ctx Component object pointer
  * @param  Mode Interface mode
  * @retval QSPI memory status
  */
int32_t MT25TL01G_ResetEnable(QSPI_HandleTypeDef *Ctx, MT25TL01G_Interface_t Mode)
{
 800f048:	b580      	push	{r7, lr}
 800f04a:	b090      	sub	sp, #64	@ 0x40
 800f04c:	af00      	add	r7, sp, #0
 800f04e:	6078      	str	r0, [r7, #4]
 800f050:	460b      	mov	r3, r1
 800f052:	70fb      	strb	r3, [r7, #3]
  QSPI_CommandTypeDef s_command;

  /* Initialize the reset enable command */
  s_command.InstructionMode   = (Mode == MT25TL01G_QPI_MODE) ? QSPI_INSTRUCTION_4_LINES : QSPI_INSTRUCTION_1_LINE;
 800f054:	78fb      	ldrb	r3, [r7, #3]
 800f056:	2b03      	cmp	r3, #3
 800f058:	d102      	bne.n	800f060 <MT25TL01G_ResetEnable+0x18>
 800f05a:	f44f 7340 	mov.w	r3, #768	@ 0x300
 800f05e:	e001      	b.n	800f064 <MT25TL01G_ResetEnable+0x1c>
 800f060:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800f064:	623b      	str	r3, [r7, #32]
  s_command.Instruction       = MT25TL01G_RESET_ENABLE_CMD;
 800f066:	2366      	movs	r3, #102	@ 0x66
 800f068:	60bb      	str	r3, [r7, #8]
  s_command.AddressMode       = QSPI_ADDRESS_NONE;
 800f06a:	2300      	movs	r3, #0
 800f06c:	627b      	str	r3, [r7, #36]	@ 0x24
  s_command.AlternateByteMode = QSPI_ALTERNATE_BYTES_NONE;
 800f06e:	2300      	movs	r3, #0
 800f070:	62bb      	str	r3, [r7, #40]	@ 0x28
  s_command.DataMode          = QSPI_DATA_NONE;
 800f072:	2300      	movs	r3, #0
 800f074:	62fb      	str	r3, [r7, #44]	@ 0x2c
  s_command.DummyCycles       = 0;
 800f076:	2300      	movs	r3, #0
 800f078:	61fb      	str	r3, [r7, #28]
  s_command.DdrMode           = QSPI_DDR_MODE_DISABLE;
 800f07a:	2300      	movs	r3, #0
 800f07c:	637b      	str	r3, [r7, #52]	@ 0x34
  s_command.DdrHoldHalfCycle  = QSPI_DDR_HHC_ANALOG_DELAY;
 800f07e:	2300      	movs	r3, #0
 800f080:	63bb      	str	r3, [r7, #56]	@ 0x38
  s_command.SIOOMode          = QSPI_SIOO_INST_EVERY_CMD;
 800f082:	2300      	movs	r3, #0
 800f084:	63fb      	str	r3, [r7, #60]	@ 0x3c

  /* Send the command */
  if (HAL_QSPI_Command(Ctx, &s_command, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 800f086:	f107 0308 	add.w	r3, r7, #8
 800f08a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800f08e:	4619      	mov	r1, r3
 800f090:	6878      	ldr	r0, [r7, #4]
 800f092:	f004 fb4b 	bl	801372c <HAL_QSPI_Command>
 800f096:	4603      	mov	r3, r0
 800f098:	2b00      	cmp	r3, #0
 800f09a:	d002      	beq.n	800f0a2 <MT25TL01G_ResetEnable+0x5a>
  {
    return MT25TL01G_ERROR_COMMAND;
 800f09c:	f06f 0301 	mvn.w	r3, #1
 800f0a0:	e000      	b.n	800f0a4 <MT25TL01G_ResetEnable+0x5c>
  }

  return MT25TL01G_OK;
 800f0a2:	2300      	movs	r3, #0
}
 800f0a4:	4618      	mov	r0, r3
 800f0a6:	3740      	adds	r7, #64	@ 0x40
 800f0a8:	46bd      	mov	sp, r7
 800f0aa:	bd80      	pop	{r7, pc}

0800f0ac <MT25TL01G_ResetMemory>:
  * @param  Ctx Component object pointer
  * @param  Mode Interface mode
  * @retval QSPI memory status
  */
int32_t MT25TL01G_ResetMemory(QSPI_HandleTypeDef *Ctx, MT25TL01G_Interface_t Mode)
{
 800f0ac:	b580      	push	{r7, lr}
 800f0ae:	b090      	sub	sp, #64	@ 0x40
 800f0b0:	af00      	add	r7, sp, #0
 800f0b2:	6078      	str	r0, [r7, #4]
 800f0b4:	460b      	mov	r3, r1
 800f0b6:	70fb      	strb	r3, [r7, #3]
  QSPI_CommandTypeDef s_command;

  /* Initialize the reset enable command */
  s_command.InstructionMode   = (Mode == MT25TL01G_QPI_MODE) ? QSPI_INSTRUCTION_4_LINES : QSPI_INSTRUCTION_1_LINE;
 800f0b8:	78fb      	ldrb	r3, [r7, #3]
 800f0ba:	2b03      	cmp	r3, #3
 800f0bc:	d102      	bne.n	800f0c4 <MT25TL01G_ResetMemory+0x18>
 800f0be:	f44f 7340 	mov.w	r3, #768	@ 0x300
 800f0c2:	e001      	b.n	800f0c8 <MT25TL01G_ResetMemory+0x1c>
 800f0c4:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800f0c8:	623b      	str	r3, [r7, #32]
  s_command.Instruction       = MT25TL01G_RESET_MEMORY_CMD ;
 800f0ca:	2399      	movs	r3, #153	@ 0x99
 800f0cc:	60bb      	str	r3, [r7, #8]
  s_command.AddressMode       = QSPI_ADDRESS_NONE;
 800f0ce:	2300      	movs	r3, #0
 800f0d0:	627b      	str	r3, [r7, #36]	@ 0x24
  s_command.AlternateByteMode = QSPI_ALTERNATE_BYTES_NONE;
 800f0d2:	2300      	movs	r3, #0
 800f0d4:	62bb      	str	r3, [r7, #40]	@ 0x28
  s_command.DataMode          = QSPI_DATA_NONE;
 800f0d6:	2300      	movs	r3, #0
 800f0d8:	62fb      	str	r3, [r7, #44]	@ 0x2c
  s_command.DummyCycles       = 0;
 800f0da:	2300      	movs	r3, #0
 800f0dc:	61fb      	str	r3, [r7, #28]
  s_command.DdrMode           = QSPI_DDR_MODE_DISABLE;
 800f0de:	2300      	movs	r3, #0
 800f0e0:	637b      	str	r3, [r7, #52]	@ 0x34
  s_command.DdrHoldHalfCycle  = QSPI_DDR_HHC_ANALOG_DELAY;
 800f0e2:	2300      	movs	r3, #0
 800f0e4:	63bb      	str	r3, [r7, #56]	@ 0x38
  s_command.SIOOMode          = QSPI_SIOO_INST_EVERY_CMD;
 800f0e6:	2300      	movs	r3, #0
 800f0e8:	63fb      	str	r3, [r7, #60]	@ 0x3c

  /* Send the command */
  if (HAL_QSPI_Command(Ctx, &s_command, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 800f0ea:	f107 0308 	add.w	r3, r7, #8
 800f0ee:	f241 3288 	movw	r2, #5000	@ 0x1388
 800f0f2:	4619      	mov	r1, r3
 800f0f4:	6878      	ldr	r0, [r7, #4]
 800f0f6:	f004 fb19 	bl	801372c <HAL_QSPI_Command>
 800f0fa:	4603      	mov	r3, r0
 800f0fc:	2b00      	cmp	r3, #0
 800f0fe:	d002      	beq.n	800f106 <MT25TL01G_ResetMemory+0x5a>
  {
    return MT25TL01G_ERROR_COMMAND;
 800f100:	f06f 0301 	mvn.w	r3, #1
 800f104:	e000      	b.n	800f108 <MT25TL01G_ResetMemory+0x5c>
  }

  return MT25TL01G_OK;
 800f106:	2300      	movs	r3, #0
}
 800f108:	4618      	mov	r0, r3
 800f10a:	3740      	adds	r7, #64	@ 0x40
 800f10c:	46bd      	mov	sp, r7
 800f10e:	bd80      	pop	{r7, pc}

0800f110 <MT48LC4M32B2_Init>:
  * @param  Ctx : Component object pointer
  * @param  pRegMode : Pointer to Register Mode stucture
  * @retval error status
  */
int32_t MT48LC4M32B2_Init(SDRAM_HandleTypeDef *Ctx, MT48LC4M32B2_Context_t *pRegMode) 
{
 800f110:	b580      	push	{r7, lr}
 800f112:	b084      	sub	sp, #16
 800f114:	af00      	add	r7, sp, #0
 800f116:	6078      	str	r0, [r7, #4]
 800f118:	6039      	str	r1, [r7, #0]
  int32_t ret = MT48LC4M32B2_ERROR;
 800f11a:	f04f 33ff 	mov.w	r3, #4294967295
 800f11e:	60fb      	str	r3, [r7, #12]
  
  /* Step 1: Configure a clock configuration enable command */
  if(MT48LC4M32B2_ClockEnable(Ctx, pRegMode->TargetBank) == MT48LC4M32B2_OK)
 800f120:	683b      	ldr	r3, [r7, #0]
 800f122:	681b      	ldr	r3, [r3, #0]
 800f124:	4619      	mov	r1, r3
 800f126:	6878      	ldr	r0, [r7, #4]
 800f128:	f000 f832 	bl	800f190 <MT48LC4M32B2_ClockEnable>
 800f12c:	4603      	mov	r3, r0
 800f12e:	2b00      	cmp	r3, #0
 800f130:	d128      	bne.n	800f184 <MT48LC4M32B2_Init+0x74>
  {
    /* Step 2: Insert 100 us minimum delay */ 
    /* Inserted delay is equal to 1 ms due to systick time base unit (ms) */
    (void)MT48LC4M32B2_Delay(1);
 800f132:	2001      	movs	r0, #1
 800f134:	f000 f8e2 	bl	800f2fc <MT48LC4M32B2_Delay>
    
    /* Step 3: Configure a PALL (precharge all) command */ 
    if(MT48LC4M32B2_Precharge(Ctx, pRegMode->TargetBank) == MT48LC4M32B2_OK)
 800f138:	683b      	ldr	r3, [r7, #0]
 800f13a:	681b      	ldr	r3, [r3, #0]
 800f13c:	4619      	mov	r1, r3
 800f13e:	6878      	ldr	r0, [r7, #4]
 800f140:	f000 f84a 	bl	800f1d8 <MT48LC4M32B2_Precharge>
 800f144:	4603      	mov	r3, r0
 800f146:	2b00      	cmp	r3, #0
 800f148:	d11c      	bne.n	800f184 <MT48LC4M32B2_Init+0x74>
    {
      /* Step 4: Configure a Refresh command */ 
      if(MT48LC4M32B2_RefreshMode(Ctx, pRegMode->TargetBank, pRegMode->RefreshMode) == MT48LC4M32B2_OK)
 800f14a:	683b      	ldr	r3, [r7, #0]
 800f14c:	6819      	ldr	r1, [r3, #0]
 800f14e:	683b      	ldr	r3, [r7, #0]
 800f150:	685b      	ldr	r3, [r3, #4]
 800f152:	461a      	mov	r2, r3
 800f154:	6878      	ldr	r0, [r7, #4]
 800f156:	f000 f897 	bl	800f288 <MT48LC4M32B2_RefreshMode>
 800f15a:	4603      	mov	r3, r0
 800f15c:	2b00      	cmp	r3, #0
 800f15e:	d111      	bne.n	800f184 <MT48LC4M32B2_Init+0x74>
      {
        /* Step 5: Program the external memory mode register */
        if(MT48LC4M32B2_ModeRegConfig(Ctx, pRegMode) == MT48LC4M32B2_OK)
 800f160:	6839      	ldr	r1, [r7, #0]
 800f162:	6878      	ldr	r0, [r7, #4]
 800f164:	f000 f85c 	bl	800f220 <MT48LC4M32B2_ModeRegConfig>
 800f168:	4603      	mov	r3, r0
 800f16a:	2b00      	cmp	r3, #0
 800f16c:	d10a      	bne.n	800f184 <MT48LC4M32B2_Init+0x74>
        {
          /* Step 6: Set the refresh rate counter */
          if(MT48LC4M32B2_RefreshRate(Ctx, pRegMode->RefreshRate) == MT48LC4M32B2_OK)
 800f16e:	683b      	ldr	r3, [r7, #0]
 800f170:	689b      	ldr	r3, [r3, #8]
 800f172:	4619      	mov	r1, r3
 800f174:	6878      	ldr	r0, [r7, #4]
 800f176:	f000 f8ad 	bl	800f2d4 <MT48LC4M32B2_RefreshRate>
 800f17a:	4603      	mov	r3, r0
 800f17c:	2b00      	cmp	r3, #0
 800f17e:	d101      	bne.n	800f184 <MT48LC4M32B2_Init+0x74>
          {
            ret = MT48LC4M32B2_OK;
 800f180:	2300      	movs	r3, #0
 800f182:	60fb      	str	r3, [r7, #12]
          }
        }
      }
    }
  } 
  return ret;
 800f184:	68fb      	ldr	r3, [r7, #12]
}
 800f186:	4618      	mov	r0, r3
 800f188:	3710      	adds	r7, #16
 800f18a:	46bd      	mov	sp, r7
 800f18c:	bd80      	pop	{r7, pc}
	...

0800f190 <MT48LC4M32B2_ClockEnable>:
  * @param  Ctx : Component object pointer
  * @param  Interface : Could be FMC_SDRAM_CMD_TARGET_BANK1 or FMC_SDRAM_CMD_TARGET_BANK2
  * @retval error status
  */
int32_t MT48LC4M32B2_ClockEnable(SDRAM_HandleTypeDef *Ctx, uint32_t Interface) 
{
 800f190:	b580      	push	{r7, lr}
 800f192:	b082      	sub	sp, #8
 800f194:	af00      	add	r7, sp, #0
 800f196:	6078      	str	r0, [r7, #4]
 800f198:	6039      	str	r1, [r7, #0]
  Command.CommandMode            = MT48LC4M32B2_CLK_ENABLE_CMD;
 800f19a:	4b0e      	ldr	r3, [pc, #56]	@ (800f1d4 <MT48LC4M32B2_ClockEnable+0x44>)
 800f19c:	2201      	movs	r2, #1
 800f19e:	601a      	str	r2, [r3, #0]
  Command.CommandTarget          = Interface;
 800f1a0:	4a0c      	ldr	r2, [pc, #48]	@ (800f1d4 <MT48LC4M32B2_ClockEnable+0x44>)
 800f1a2:	683b      	ldr	r3, [r7, #0]
 800f1a4:	6053      	str	r3, [r2, #4]
  Command.AutoRefreshNumber      = 1;
 800f1a6:	4b0b      	ldr	r3, [pc, #44]	@ (800f1d4 <MT48LC4M32B2_ClockEnable+0x44>)
 800f1a8:	2201      	movs	r2, #1
 800f1aa:	609a      	str	r2, [r3, #8]
  Command.ModeRegisterDefinition = 0;
 800f1ac:	4b09      	ldr	r3, [pc, #36]	@ (800f1d4 <MT48LC4M32B2_ClockEnable+0x44>)
 800f1ae:	2200      	movs	r2, #0
 800f1b0:	60da      	str	r2, [r3, #12]

  /* Send the command */
  if(HAL_SDRAM_SendCommand(Ctx, &Command, MT48LC4M32B2_TIMEOUT) != HAL_OK)
 800f1b2:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800f1b6:	4907      	ldr	r1, [pc, #28]	@ (800f1d4 <MT48LC4M32B2_ClockEnable+0x44>)
 800f1b8:	6878      	ldr	r0, [r7, #4]
 800f1ba:	f007 fbc3 	bl	8016944 <HAL_SDRAM_SendCommand>
 800f1be:	4603      	mov	r3, r0
 800f1c0:	2b00      	cmp	r3, #0
 800f1c2:	d002      	beq.n	800f1ca <MT48LC4M32B2_ClockEnable+0x3a>
  {
    return MT48LC4M32B2_ERROR;
 800f1c4:	f04f 33ff 	mov.w	r3, #4294967295
 800f1c8:	e000      	b.n	800f1cc <MT48LC4M32B2_ClockEnable+0x3c>
  }
  else
  {
    return MT48LC4M32B2_OK;
 800f1ca:	2300      	movs	r3, #0
  }
}
 800f1cc:	4618      	mov	r0, r3
 800f1ce:	3708      	adds	r7, #8
 800f1d0:	46bd      	mov	sp, r7
 800f1d2:	bd80      	pop	{r7, pc}
 800f1d4:	2400ac74 	.word	0x2400ac74

0800f1d8 <MT48LC4M32B2_Precharge>:
  * @param  Ctx : Component object pointer
  * @param  Interface : Could be FMC_SDRAM_CMD_TARGET_BANK1 or FMC_SDRAM_CMD_TARGET_BANK2
  * @retval error status
  */
int32_t MT48LC4M32B2_Precharge(SDRAM_HandleTypeDef *Ctx, uint32_t Interface) 
{
 800f1d8:	b580      	push	{r7, lr}
 800f1da:	b082      	sub	sp, #8
 800f1dc:	af00      	add	r7, sp, #0
 800f1de:	6078      	str	r0, [r7, #4]
 800f1e0:	6039      	str	r1, [r7, #0]
  Command.CommandMode            = MT48LC4M32B2_PALL_CMD;
 800f1e2:	4b0e      	ldr	r3, [pc, #56]	@ (800f21c <MT48LC4M32B2_Precharge+0x44>)
 800f1e4:	2202      	movs	r2, #2
 800f1e6:	601a      	str	r2, [r3, #0]
  Command.CommandTarget          = Interface;
 800f1e8:	4a0c      	ldr	r2, [pc, #48]	@ (800f21c <MT48LC4M32B2_Precharge+0x44>)
 800f1ea:	683b      	ldr	r3, [r7, #0]
 800f1ec:	6053      	str	r3, [r2, #4]
  Command.AutoRefreshNumber      = 1;
 800f1ee:	4b0b      	ldr	r3, [pc, #44]	@ (800f21c <MT48LC4M32B2_Precharge+0x44>)
 800f1f0:	2201      	movs	r2, #1
 800f1f2:	609a      	str	r2, [r3, #8]
  Command.ModeRegisterDefinition = 0;
 800f1f4:	4b09      	ldr	r3, [pc, #36]	@ (800f21c <MT48LC4M32B2_Precharge+0x44>)
 800f1f6:	2200      	movs	r2, #0
 800f1f8:	60da      	str	r2, [r3, #12]

  /* Send the command */
  if(HAL_SDRAM_SendCommand(Ctx, &Command, MT48LC4M32B2_TIMEOUT) != HAL_OK)
 800f1fa:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800f1fe:	4907      	ldr	r1, [pc, #28]	@ (800f21c <MT48LC4M32B2_Precharge+0x44>)
 800f200:	6878      	ldr	r0, [r7, #4]
 800f202:	f007 fb9f 	bl	8016944 <HAL_SDRAM_SendCommand>
 800f206:	4603      	mov	r3, r0
 800f208:	2b00      	cmp	r3, #0
 800f20a:	d002      	beq.n	800f212 <MT48LC4M32B2_Precharge+0x3a>
  {
    return MT48LC4M32B2_ERROR;
 800f20c:	f04f 33ff 	mov.w	r3, #4294967295
 800f210:	e000      	b.n	800f214 <MT48LC4M32B2_Precharge+0x3c>
  }
  else
  {
    return MT48LC4M32B2_OK;
 800f212:	2300      	movs	r3, #0
  }
}
 800f214:	4618      	mov	r0, r3
 800f216:	3708      	adds	r7, #8
 800f218:	46bd      	mov	sp, r7
 800f21a:	bd80      	pop	{r7, pc}
 800f21c:	2400ac74 	.word	0x2400ac74

0800f220 <MT48LC4M32B2_ModeRegConfig>:
  * @param  Ctx : Component object pointer
  * @param  pRegMode : Pointer to Register Mode stucture
  * @retval error status
  */
int32_t MT48LC4M32B2_ModeRegConfig(SDRAM_HandleTypeDef *Ctx, MT48LC4M32B2_Context_t *pRegMode) 
{
 800f220:	b580      	push	{r7, lr}
 800f222:	b084      	sub	sp, #16
 800f224:	af00      	add	r7, sp, #0
 800f226:	6078      	str	r0, [r7, #4]
 800f228:	6039      	str	r1, [r7, #0]
  uint32_t tmpmrd;

  /* Program the external memory mode register */
  tmpmrd = (uint32_t)pRegMode->BurstLength   |\
 800f22a:	683b      	ldr	r3, [r7, #0]
 800f22c:	68da      	ldr	r2, [r3, #12]
                     pRegMode->BurstType     |\
 800f22e:	683b      	ldr	r3, [r7, #0]
 800f230:	691b      	ldr	r3, [r3, #16]
  tmpmrd = (uint32_t)pRegMode->BurstLength   |\
 800f232:	431a      	orrs	r2, r3
                     pRegMode->CASLatency    |\
 800f234:	683b      	ldr	r3, [r7, #0]
 800f236:	695b      	ldr	r3, [r3, #20]
                     pRegMode->BurstType     |\
 800f238:	431a      	orrs	r2, r3
                     pRegMode->OperationMode |\
 800f23a:	683b      	ldr	r3, [r7, #0]
 800f23c:	699b      	ldr	r3, [r3, #24]
                     pRegMode->CASLatency    |\
 800f23e:	431a      	orrs	r2, r3
                     pRegMode->WriteBurstMode;
 800f240:	683b      	ldr	r3, [r7, #0]
 800f242:	69db      	ldr	r3, [r3, #28]
  tmpmrd = (uint32_t)pRegMode->BurstLength   |\
 800f244:	4313      	orrs	r3, r2
 800f246:	60fb      	str	r3, [r7, #12]
  
  Command.CommandMode            = MT48LC4M32B2_LOAD_MODE_CMD;
 800f248:	4b0e      	ldr	r3, [pc, #56]	@ (800f284 <MT48LC4M32B2_ModeRegConfig+0x64>)
 800f24a:	2204      	movs	r2, #4
 800f24c:	601a      	str	r2, [r3, #0]
  Command.CommandTarget          = pRegMode->TargetBank;
 800f24e:	683b      	ldr	r3, [r7, #0]
 800f250:	681b      	ldr	r3, [r3, #0]
 800f252:	4a0c      	ldr	r2, [pc, #48]	@ (800f284 <MT48LC4M32B2_ModeRegConfig+0x64>)
 800f254:	6053      	str	r3, [r2, #4]
  Command.AutoRefreshNumber      = 1;
 800f256:	4b0b      	ldr	r3, [pc, #44]	@ (800f284 <MT48LC4M32B2_ModeRegConfig+0x64>)
 800f258:	2201      	movs	r2, #1
 800f25a:	609a      	str	r2, [r3, #8]
  Command.ModeRegisterDefinition = tmpmrd;
 800f25c:	4a09      	ldr	r2, [pc, #36]	@ (800f284 <MT48LC4M32B2_ModeRegConfig+0x64>)
 800f25e:	68fb      	ldr	r3, [r7, #12]
 800f260:	60d3      	str	r3, [r2, #12]
  
  /* Send the command */
  if(HAL_SDRAM_SendCommand(Ctx, &Command, MT48LC4M32B2_TIMEOUT) != HAL_OK)
 800f262:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800f266:	4907      	ldr	r1, [pc, #28]	@ (800f284 <MT48LC4M32B2_ModeRegConfig+0x64>)
 800f268:	6878      	ldr	r0, [r7, #4]
 800f26a:	f007 fb6b 	bl	8016944 <HAL_SDRAM_SendCommand>
 800f26e:	4603      	mov	r3, r0
 800f270:	2b00      	cmp	r3, #0
 800f272:	d002      	beq.n	800f27a <MT48LC4M32B2_ModeRegConfig+0x5a>
  {
    return MT48LC4M32B2_ERROR;
 800f274:	f04f 33ff 	mov.w	r3, #4294967295
 800f278:	e000      	b.n	800f27c <MT48LC4M32B2_ModeRegConfig+0x5c>
  }
  else
  {
    return MT48LC4M32B2_OK;
 800f27a:	2300      	movs	r3, #0
  }
}
 800f27c:	4618      	mov	r0, r3
 800f27e:	3710      	adds	r7, #16
 800f280:	46bd      	mov	sp, r7
 800f282:	bd80      	pop	{r7, pc}
 800f284:	2400ac74 	.word	0x2400ac74

0800f288 <MT48LC4M32B2_RefreshMode>:
  * @param  RefreshMode : Could be MT48LC4M32B2_CMD_AUTOREFRESH_MODE or
  *                      MT48LC4M32B2_CMD_SELFREFRESH_MODE
  * @retval error status
  */
int32_t MT48LC4M32B2_RefreshMode(SDRAM_HandleTypeDef *Ctx, uint32_t Interface, uint32_t RefreshMode) 
{
 800f288:	b580      	push	{r7, lr}
 800f28a:	b084      	sub	sp, #16
 800f28c:	af00      	add	r7, sp, #0
 800f28e:	60f8      	str	r0, [r7, #12]
 800f290:	60b9      	str	r1, [r7, #8]
 800f292:	607a      	str	r2, [r7, #4]
  Command.CommandMode            = RefreshMode;
 800f294:	4a0e      	ldr	r2, [pc, #56]	@ (800f2d0 <MT48LC4M32B2_RefreshMode+0x48>)
 800f296:	687b      	ldr	r3, [r7, #4]
 800f298:	6013      	str	r3, [r2, #0]
  Command.CommandTarget          = Interface;
 800f29a:	4a0d      	ldr	r2, [pc, #52]	@ (800f2d0 <MT48LC4M32B2_RefreshMode+0x48>)
 800f29c:	68bb      	ldr	r3, [r7, #8]
 800f29e:	6053      	str	r3, [r2, #4]
  Command.AutoRefreshNumber      = 8;
 800f2a0:	4b0b      	ldr	r3, [pc, #44]	@ (800f2d0 <MT48LC4M32B2_RefreshMode+0x48>)
 800f2a2:	2208      	movs	r2, #8
 800f2a4:	609a      	str	r2, [r3, #8]
  Command.ModeRegisterDefinition = 0;
 800f2a6:	4b0a      	ldr	r3, [pc, #40]	@ (800f2d0 <MT48LC4M32B2_RefreshMode+0x48>)
 800f2a8:	2200      	movs	r2, #0
 800f2aa:	60da      	str	r2, [r3, #12]

  /* Send the command */
  if(HAL_SDRAM_SendCommand(Ctx, &Command, MT48LC4M32B2_TIMEOUT) != HAL_OK)
 800f2ac:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800f2b0:	4907      	ldr	r1, [pc, #28]	@ (800f2d0 <MT48LC4M32B2_RefreshMode+0x48>)
 800f2b2:	68f8      	ldr	r0, [r7, #12]
 800f2b4:	f007 fb46 	bl	8016944 <HAL_SDRAM_SendCommand>
 800f2b8:	4603      	mov	r3, r0
 800f2ba:	2b00      	cmp	r3, #0
 800f2bc:	d002      	beq.n	800f2c4 <MT48LC4M32B2_RefreshMode+0x3c>
  {
    return MT48LC4M32B2_ERROR;
 800f2be:	f04f 33ff 	mov.w	r3, #4294967295
 800f2c2:	e000      	b.n	800f2c6 <MT48LC4M32B2_RefreshMode+0x3e>
  }
  else
  {
    return MT48LC4M32B2_OK;
 800f2c4:	2300      	movs	r3, #0
  }
}
 800f2c6:	4618      	mov	r0, r3
 800f2c8:	3710      	adds	r7, #16
 800f2ca:	46bd      	mov	sp, r7
 800f2cc:	bd80      	pop	{r7, pc}
 800f2ce:	bf00      	nop
 800f2d0:	2400ac74 	.word	0x2400ac74

0800f2d4 <MT48LC4M32B2_RefreshRate>:
  * @param  Ctx : Component object pointer
  * @param  RefreshCount : The refresh rate to be programmed
  * @retval error status
  */
int32_t MT48LC4M32B2_RefreshRate(SDRAM_HandleTypeDef *Ctx, uint32_t RefreshCount) 
{
 800f2d4:	b580      	push	{r7, lr}
 800f2d6:	b082      	sub	sp, #8
 800f2d8:	af00      	add	r7, sp, #0
 800f2da:	6078      	str	r0, [r7, #4]
 800f2dc:	6039      	str	r1, [r7, #0]
  /* Set the device refresh rate */
  if(HAL_SDRAM_ProgramRefreshRate(Ctx, RefreshCount) != HAL_OK)
 800f2de:	6839      	ldr	r1, [r7, #0]
 800f2e0:	6878      	ldr	r0, [r7, #4]
 800f2e2:	f007 fb64 	bl	80169ae <HAL_SDRAM_ProgramRefreshRate>
 800f2e6:	4603      	mov	r3, r0
 800f2e8:	2b00      	cmp	r3, #0
 800f2ea:	d002      	beq.n	800f2f2 <MT48LC4M32B2_RefreshRate+0x1e>
  {
    return MT48LC4M32B2_ERROR;
 800f2ec:	f04f 33ff 	mov.w	r3, #4294967295
 800f2f0:	e000      	b.n	800f2f4 <MT48LC4M32B2_RefreshRate+0x20>
  }
  else
  {
    return MT48LC4M32B2_OK;
 800f2f2:	2300      	movs	r3, #0
  }
}
 800f2f4:	4618      	mov	r0, r3
 800f2f6:	3708      	adds	r7, #8
 800f2f8:	46bd      	mov	sp, r7
 800f2fa:	bd80      	pop	{r7, pc}

0800f2fc <MT48LC4M32B2_Delay>:
  * @brief This function provides accurate delay (in milliseconds)
  * @param Delay: specifies the delay time length, in milliseconds
  * @retval MT48LC4M32B2_OK
  */
static int32_t MT48LC4M32B2_Delay(uint32_t Delay)
{  
 800f2fc:	b580      	push	{r7, lr}
 800f2fe:	b084      	sub	sp, #16
 800f300:	af00      	add	r7, sp, #0
 800f302:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  tickstart = HAL_GetTick();
 800f304:	f001 fcfc 	bl	8010d00 <HAL_GetTick>
 800f308:	60f8      	str	r0, [r7, #12]
  while((HAL_GetTick() - tickstart) < Delay)
 800f30a:	bf00      	nop
 800f30c:	f001 fcf8 	bl	8010d00 <HAL_GetTick>
 800f310:	4602      	mov	r2, r0
 800f312:	68fb      	ldr	r3, [r7, #12]
 800f314:	1ad3      	subs	r3, r2, r3
 800f316:	687a      	ldr	r2, [r7, #4]
 800f318:	429a      	cmp	r2, r3
 800f31a:	d8f7      	bhi.n	800f30c <MT48LC4M32B2_Delay+0x10>
  {
  }
  return MT48LC4M32B2_OK;
 800f31c:	2300      	movs	r3, #0
}
 800f31e:	4618      	mov	r0, r3
 800f320:	3710      	adds	r7, #16
 800f322:	46bd      	mov	sp, r7
 800f324:	bd80      	pop	{r7, pc}
	...

0800f328 <BSP_I2C4_Init>:
/**
  * @brief  Initializes I2C HAL.
  * @retval BSP status
  */
int32_t BSP_I2C4_Init(void)
{
 800f328:	b580      	push	{r7, lr}
 800f32a:	b082      	sub	sp, #8
 800f32c:	af00      	add	r7, sp, #0
  int32_t ret = BSP_ERROR_NONE;
 800f32e:	2300      	movs	r3, #0
 800f330:	607b      	str	r3, [r7, #4]

  hbus_i2c4.Instance = BUS_I2C4;
 800f332:	4b16      	ldr	r3, [pc, #88]	@ (800f38c <BSP_I2C4_Init+0x64>)
 800f334:	4a16      	ldr	r2, [pc, #88]	@ (800f390 <BSP_I2C4_Init+0x68>)
 800f336:	601a      	str	r2, [r3, #0]

  if (I2c4InitCounter == 0U)
 800f338:	4b16      	ldr	r3, [pc, #88]	@ (800f394 <BSP_I2C4_Init+0x6c>)
 800f33a:	681b      	ldr	r3, [r3, #0]
 800f33c:	2b00      	cmp	r3, #0
 800f33e:	d11f      	bne.n	800f380 <BSP_I2C4_Init+0x58>
  {
    I2c4InitCounter++;
 800f340:	4b14      	ldr	r3, [pc, #80]	@ (800f394 <BSP_I2C4_Init+0x6c>)
 800f342:	681b      	ldr	r3, [r3, #0]
 800f344:	3301      	adds	r3, #1
 800f346:	4a13      	ldr	r2, [pc, #76]	@ (800f394 <BSP_I2C4_Init+0x6c>)
 800f348:	6013      	str	r3, [r2, #0]

    if (HAL_I2C_GetState(&hbus_i2c4) == HAL_I2C_STATE_RESET)
 800f34a:	4810      	ldr	r0, [pc, #64]	@ (800f38c <BSP_I2C4_Init+0x64>)
 800f34c:	f002 ff00 	bl	8012150 <HAL_I2C_GetState>
 800f350:	4603      	mov	r3, r0
 800f352:	2b00      	cmp	r3, #0
 800f354:	d114      	bne.n	800f380 <BSP_I2C4_Init+0x58>
        BspI2cSemaphore = osSemaphoreCreate(osSemaphore(BSP_I2C_SEM), 1);
      }
#endif
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 0)
      /* Init the I2C4 Msp */
      I2C4_MspInit(&hbus_i2c4);
 800f356:	480d      	ldr	r0, [pc, #52]	@ (800f38c <BSP_I2C4_Init+0x64>)
 800f358:	f000 fb60 	bl	800fa1c <I2C4_MspInit>
        }
      }
      if (ret == BSP_ERROR_NONE)
      {
#endif
        if (MX_I2C4_Init(&hbus_i2c4, I2C_GetTiming(HAL_RCC_GetPCLK2Freq(), BUS_I2C4_FREQUENCY)) != HAL_OK)
 800f35c:	f005 fed4 	bl	8015108 <HAL_RCC_GetPCLK2Freq>
 800f360:	4603      	mov	r3, r0
 800f362:	490d      	ldr	r1, [pc, #52]	@ (800f398 <BSP_I2C4_Init+0x70>)
 800f364:	4618      	mov	r0, r3
 800f366:	f000 f8e3 	bl	800f530 <I2C_GetTiming>
 800f36a:	4603      	mov	r3, r0
 800f36c:	4619      	mov	r1, r3
 800f36e:	4807      	ldr	r0, [pc, #28]	@ (800f38c <BSP_I2C4_Init+0x64>)
 800f370:	f000 f838 	bl	800f3e4 <MX_I2C4_Init>
 800f374:	4603      	mov	r3, r0
 800f376:	2b00      	cmp	r3, #0
 800f378:	d002      	beq.n	800f380 <BSP_I2C4_Init+0x58>
        {
          ret = BSP_ERROR_BUS_FAILURE;
 800f37a:	f06f 0307 	mvn.w	r3, #7
 800f37e:	607b      	str	r3, [r7, #4]
      }
#endif
    }
  }

  return ret;
 800f380:	687b      	ldr	r3, [r7, #4]
}
 800f382:	4618      	mov	r0, r3
 800f384:	3708      	adds	r7, #8
 800f386:	46bd      	mov	sp, r7
 800f388:	bd80      	pop	{r7, pc}
 800f38a:	bf00      	nop
 800f38c:	2400b68c 	.word	0x2400b68c
 800f390:	58001c00 	.word	0x58001c00
 800f394:	2400ac84 	.word	0x2400ac84
 800f398:	000186a0 	.word	0x000186a0

0800f39c <BSP_I2C4_DeInit>:
/**
  * @brief  DeInitializes I2C HAL.
  * @retval BSP status
  */
int32_t BSP_I2C4_DeInit(void)
{
 800f39c:	b580      	push	{r7, lr}
 800f39e:	b082      	sub	sp, #8
 800f3a0:	af00      	add	r7, sp, #0
  int32_t ret  = BSP_ERROR_NONE;
 800f3a2:	2300      	movs	r3, #0
 800f3a4:	607b      	str	r3, [r7, #4]

  I2c4InitCounter--;
 800f3a6:	4b0d      	ldr	r3, [pc, #52]	@ (800f3dc <BSP_I2C4_DeInit+0x40>)
 800f3a8:	681b      	ldr	r3, [r3, #0]
 800f3aa:	3b01      	subs	r3, #1
 800f3ac:	4a0b      	ldr	r2, [pc, #44]	@ (800f3dc <BSP_I2C4_DeInit+0x40>)
 800f3ae:	6013      	str	r3, [r2, #0]

  if (I2c4InitCounter == 0U)
 800f3b0:	4b0a      	ldr	r3, [pc, #40]	@ (800f3dc <BSP_I2C4_DeInit+0x40>)
 800f3b2:	681b      	ldr	r3, [r3, #0]
 800f3b4:	2b00      	cmp	r3, #0
 800f3b6:	d10b      	bne.n	800f3d0 <BSP_I2C4_DeInit+0x34>
  {
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 0)
    I2C4_MspDeInit(&hbus_i2c4);
 800f3b8:	4809      	ldr	r0, [pc, #36]	@ (800f3e0 <BSP_I2C4_DeInit+0x44>)
 800f3ba:	f000 fb9b 	bl	800faf4 <I2C4_MspDeInit>
#endif /* (USE_HAL_I2C_REGISTER_CALLBACKS == 0) */

    /* Init the I2C */
    if (HAL_I2C_DeInit(&hbus_i2c4) != HAL_OK)
 800f3be:	4808      	ldr	r0, [pc, #32]	@ (800f3e0 <BSP_I2C4_DeInit+0x44>)
 800f3c0:	f002 fc54 	bl	8011c6c <HAL_I2C_DeInit>
 800f3c4:	4603      	mov	r3, r0
 800f3c6:	2b00      	cmp	r3, #0
 800f3c8:	d002      	beq.n	800f3d0 <BSP_I2C4_DeInit+0x34>
    {
      ret = BSP_ERROR_BUS_FAILURE;
 800f3ca:	f06f 0307 	mvn.w	r3, #7
 800f3ce:	607b      	str	r3, [r7, #4]
    }
  }

  return ret;
 800f3d0:	687b      	ldr	r3, [r7, #4]
}
 800f3d2:	4618      	mov	r0, r3
 800f3d4:	3708      	adds	r7, #8
 800f3d6:	46bd      	mov	sp, r7
 800f3d8:	bd80      	pop	{r7, pc}
 800f3da:	bf00      	nop
 800f3dc:	2400ac84 	.word	0x2400ac84
 800f3e0:	2400b68c 	.word	0x2400b68c

0800f3e4 <MX_I2C4_Init>:
  * @param  hI2c I2C handle
  * @param  timing I2C timing
  * @retval HAL status
  */
__weak HAL_StatusTypeDef MX_I2C4_Init(I2C_HandleTypeDef *hI2c, uint32_t timing)
{
 800f3e4:	b580      	push	{r7, lr}
 800f3e6:	b084      	sub	sp, #16
 800f3e8:	af00      	add	r7, sp, #0
 800f3ea:	6078      	str	r0, [r7, #4]
 800f3ec:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800f3ee:	2300      	movs	r3, #0
 800f3f0:	73fb      	strb	r3, [r7, #15]

  hI2c->Init.Timing           = timing;
 800f3f2:	687b      	ldr	r3, [r7, #4]
 800f3f4:	683a      	ldr	r2, [r7, #0]
 800f3f6:	605a      	str	r2, [r3, #4]
  hI2c->Init.OwnAddress1      = 0;
 800f3f8:	687b      	ldr	r3, [r7, #4]
 800f3fa:	2200      	movs	r2, #0
 800f3fc:	609a      	str	r2, [r3, #8]
  hI2c->Init.AddressingMode   = I2C_ADDRESSINGMODE_7BIT;
 800f3fe:	687b      	ldr	r3, [r7, #4]
 800f400:	2201      	movs	r2, #1
 800f402:	60da      	str	r2, [r3, #12]
  hI2c->Init.DualAddressMode  = I2C_DUALADDRESS_DISABLE;
 800f404:	687b      	ldr	r3, [r7, #4]
 800f406:	2200      	movs	r2, #0
 800f408:	611a      	str	r2, [r3, #16]
  hI2c->Init.OwnAddress2      = 0;
 800f40a:	687b      	ldr	r3, [r7, #4]
 800f40c:	2200      	movs	r2, #0
 800f40e:	615a      	str	r2, [r3, #20]
  hI2c->Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 800f410:	687b      	ldr	r3, [r7, #4]
 800f412:	2200      	movs	r2, #0
 800f414:	619a      	str	r2, [r3, #24]
  hI2c->Init.GeneralCallMode  = I2C_GENERALCALL_DISABLE;
 800f416:	687b      	ldr	r3, [r7, #4]
 800f418:	2200      	movs	r2, #0
 800f41a:	61da      	str	r2, [r3, #28]
  hI2c->Init.NoStretchMode    = I2C_NOSTRETCH_DISABLE;
 800f41c:	687b      	ldr	r3, [r7, #4]
 800f41e:	2200      	movs	r2, #0
 800f420:	621a      	str	r2, [r3, #32]

  if (HAL_I2C_Init(hI2c) != HAL_OK)
 800f422:	6878      	ldr	r0, [r7, #4]
 800f424:	f002 fb92 	bl	8011b4c <HAL_I2C_Init>
 800f428:	4603      	mov	r3, r0
 800f42a:	2b00      	cmp	r3, #0
 800f42c:	d002      	beq.n	800f434 <MX_I2C4_Init+0x50>
  {
    status = HAL_ERROR;
 800f42e:	2301      	movs	r3, #1
 800f430:	73fb      	strb	r3, [r7, #15]
 800f432:	e014      	b.n	800f45e <MX_I2C4_Init+0x7a>
  }
  else
  {
    uint32_t analog_filter;

    analog_filter = I2C_ANALOGFILTER_ENABLE;
 800f434:	2300      	movs	r3, #0
 800f436:	60bb      	str	r3, [r7, #8]
    if (HAL_I2CEx_ConfigAnalogFilter(hI2c, analog_filter) != HAL_OK)
 800f438:	68b9      	ldr	r1, [r7, #8]
 800f43a:	6878      	ldr	r0, [r7, #4]
 800f43c:	f003 f95a 	bl	80126f4 <HAL_I2CEx_ConfigAnalogFilter>
 800f440:	4603      	mov	r3, r0
 800f442:	2b00      	cmp	r3, #0
 800f444:	d002      	beq.n	800f44c <MX_I2C4_Init+0x68>
    {
      status = HAL_ERROR;
 800f446:	2301      	movs	r3, #1
 800f448:	73fb      	strb	r3, [r7, #15]
 800f44a:	e008      	b.n	800f45e <MX_I2C4_Init+0x7a>
    }
    else
    {
      if (HAL_I2CEx_ConfigDigitalFilter(hI2c, I2C_DIGITAL_FILTER_COEF) != HAL_OK)
 800f44c:	2100      	movs	r1, #0
 800f44e:	6878      	ldr	r0, [r7, #4]
 800f450:	f003 f99b 	bl	801278a <HAL_I2CEx_ConfigDigitalFilter>
 800f454:	4603      	mov	r3, r0
 800f456:	2b00      	cmp	r3, #0
 800f458:	d001      	beq.n	800f45e <MX_I2C4_Init+0x7a>
      {
        status = HAL_ERROR;
 800f45a:	2301      	movs	r3, #1
 800f45c:	73fb      	strb	r3, [r7, #15]
      }
    }
  }

  return status;
 800f45e:	7bfb      	ldrb	r3, [r7, #15]
}
 800f460:	4618      	mov	r0, r3
 800f462:	3710      	adds	r7, #16
 800f464:	46bd      	mov	sp, r7
 800f466:	bd80      	pop	{r7, pc}

0800f468 <BSP_I2C4_WriteReg>:
  * @param  pData  The target register value to be written
  * @param  Length buffer size to be written
  * @retval BSP status
  */
int32_t BSP_I2C4_WriteReg(uint16_t DevAddr, uint16_t Reg, uint8_t *pData, uint16_t Length)
{
 800f468:	b580      	push	{r7, lr}
 800f46a:	b088      	sub	sp, #32
 800f46c:	af02      	add	r7, sp, #8
 800f46e:	60ba      	str	r2, [r7, #8]
 800f470:	461a      	mov	r2, r3
 800f472:	4603      	mov	r3, r0
 800f474:	81fb      	strh	r3, [r7, #14]
 800f476:	460b      	mov	r3, r1
 800f478:	81bb      	strh	r3, [r7, #12]
 800f47a:	4613      	mov	r3, r2
 800f47c:	80fb      	strh	r3, [r7, #6]
  int32_t ret;
#if defined(BSP_USE_CMSIS_OS)
  /* Get semaphore to prevent multiple I2C access */
  osSemaphoreWait(BspI2cSemaphore, osWaitForever);
#endif
  if(I2C4_WriteReg(DevAddr, Reg, I2C_MEMADD_SIZE_8BIT, pData, Length) == 0)
 800f47e:	89b9      	ldrh	r1, [r7, #12]
 800f480:	89f8      	ldrh	r0, [r7, #14]
 800f482:	88fb      	ldrh	r3, [r7, #6]
 800f484:	9300      	str	r3, [sp, #0]
 800f486:	68bb      	ldr	r3, [r7, #8]
 800f488:	2201      	movs	r2, #1
 800f48a:	f000 fb57 	bl	800fb3c <I2C4_WriteReg>
 800f48e:	4603      	mov	r3, r0
 800f490:	2b00      	cmp	r3, #0
 800f492:	d102      	bne.n	800f49a <BSP_I2C4_WriteReg+0x32>
  {
    ret = BSP_ERROR_NONE;
 800f494:	2300      	movs	r3, #0
 800f496:	617b      	str	r3, [r7, #20]
 800f498:	e00c      	b.n	800f4b4 <BSP_I2C4_WriteReg+0x4c>
  }
  else
  {
    if( HAL_I2C_GetError(&hbus_i2c4) == HAL_I2C_ERROR_AF)
 800f49a:	4809      	ldr	r0, [pc, #36]	@ (800f4c0 <BSP_I2C4_WriteReg+0x58>)
 800f49c:	f002 fe66 	bl	801216c <HAL_I2C_GetError>
 800f4a0:	4603      	mov	r3, r0
 800f4a2:	2b04      	cmp	r3, #4
 800f4a4:	d103      	bne.n	800f4ae <BSP_I2C4_WriteReg+0x46>
    {
      ret = BSP_ERROR_BUS_ACKNOWLEDGE_FAILURE;
 800f4a6:	f06f 0365 	mvn.w	r3, #101	@ 0x65
 800f4aa:	617b      	str	r3, [r7, #20]
 800f4ac:	e002      	b.n	800f4b4 <BSP_I2C4_WriteReg+0x4c>
    }
    else
    {
      ret =  BSP_ERROR_PERIPH_FAILURE;
 800f4ae:	f06f 0303 	mvn.w	r3, #3
 800f4b2:	617b      	str	r3, [r7, #20]
  }
#if defined(BSP_USE_CMSIS_OS)
  /* Release semaphore to prevent multiple I2C access */
  osSemaphoreRelease(BspI2cSemaphore);
#endif
  return ret;
 800f4b4:	697b      	ldr	r3, [r7, #20]
}
 800f4b6:	4618      	mov	r0, r3
 800f4b8:	3718      	adds	r7, #24
 800f4ba:	46bd      	mov	sp, r7
 800f4bc:	bd80      	pop	{r7, pc}
 800f4be:	bf00      	nop
 800f4c0:	2400b68c 	.word	0x2400b68c

0800f4c4 <BSP_I2C4_ReadReg>:
  * @param  pData   Pointer to data buffer
  * @param  Length  Length of the data
  * @retval BSP status
  */
int32_t BSP_I2C4_ReadReg(uint16_t DevAddr, uint16_t Reg, uint8_t *pData, uint16_t Length)
{
 800f4c4:	b580      	push	{r7, lr}
 800f4c6:	b088      	sub	sp, #32
 800f4c8:	af02      	add	r7, sp, #8
 800f4ca:	60ba      	str	r2, [r7, #8]
 800f4cc:	461a      	mov	r2, r3
 800f4ce:	4603      	mov	r3, r0
 800f4d0:	81fb      	strh	r3, [r7, #14]
 800f4d2:	460b      	mov	r3, r1
 800f4d4:	81bb      	strh	r3, [r7, #12]
 800f4d6:	4613      	mov	r3, r2
 800f4d8:	80fb      	strh	r3, [r7, #6]
  int32_t ret;
#if defined(BSP_USE_CMSIS_OS)
  /* Get semaphore to prevent multiple I2C access */
  osSemaphoreWait(BspI2cSemaphore, osWaitForever);
#endif
  if(I2C4_ReadReg(DevAddr, Reg, I2C_MEMADD_SIZE_8BIT, pData, Length) == 0)
 800f4da:	89b9      	ldrh	r1, [r7, #12]
 800f4dc:	89f8      	ldrh	r0, [r7, #14]
 800f4de:	88fb      	ldrh	r3, [r7, #6]
 800f4e0:	9300      	str	r3, [sp, #0]
 800f4e2:	68bb      	ldr	r3, [r7, #8]
 800f4e4:	2201      	movs	r2, #1
 800f4e6:	f000 fb4f 	bl	800fb88 <I2C4_ReadReg>
 800f4ea:	4603      	mov	r3, r0
 800f4ec:	2b00      	cmp	r3, #0
 800f4ee:	d102      	bne.n	800f4f6 <BSP_I2C4_ReadReg+0x32>
  {
    ret = BSP_ERROR_NONE;
 800f4f0:	2300      	movs	r3, #0
 800f4f2:	617b      	str	r3, [r7, #20]
 800f4f4:	e00c      	b.n	800f510 <BSP_I2C4_ReadReg+0x4c>
  }
  else
  {
    if( HAL_I2C_GetError(&hbus_i2c4) == HAL_I2C_ERROR_AF)
 800f4f6:	4809      	ldr	r0, [pc, #36]	@ (800f51c <BSP_I2C4_ReadReg+0x58>)
 800f4f8:	f002 fe38 	bl	801216c <HAL_I2C_GetError>
 800f4fc:	4603      	mov	r3, r0
 800f4fe:	2b04      	cmp	r3, #4
 800f500:	d103      	bne.n	800f50a <BSP_I2C4_ReadReg+0x46>
    {
      ret = BSP_ERROR_BUS_ACKNOWLEDGE_FAILURE;
 800f502:	f06f 0365 	mvn.w	r3, #101	@ 0x65
 800f506:	617b      	str	r3, [r7, #20]
 800f508:	e002      	b.n	800f510 <BSP_I2C4_ReadReg+0x4c>
    }
    else
    {
      ret =  BSP_ERROR_PERIPH_FAILURE;
 800f50a:	f06f 0303 	mvn.w	r3, #3
 800f50e:	617b      	str	r3, [r7, #20]
  }
#if defined(BSP_USE_CMSIS_OS)
  /* Release semaphore to prevent multiple I2C access */
  osSemaphoreRelease(BspI2cSemaphore);
#endif
  return ret;
 800f510:	697b      	ldr	r3, [r7, #20]
}
 800f512:	4618      	mov	r0, r3
 800f514:	3718      	adds	r7, #24
 800f516:	46bd      	mov	sp, r7
 800f518:	bd80      	pop	{r7, pc}
 800f51a:	bf00      	nop
 800f51c:	2400b68c 	.word	0x2400b68c

0800f520 <BSP_GetTick>:
/**
  * @brief  Delay function
  * @retval Tick value
  */
int32_t BSP_GetTick(void)
{
 800f520:	b580      	push	{r7, lr}
 800f522:	af00      	add	r7, sp, #0
  return (int32_t)HAL_GetTick();
 800f524:	f001 fbec 	bl	8010d00 <HAL_GetTick>
 800f528:	4603      	mov	r3, r0
}
 800f52a:	4618      	mov	r0, r3
 800f52c:	bd80      	pop	{r7, pc}
	...

0800f530 <I2C_GetTiming>:
  * @param  clock_src_freq I2C clock source in Hz.
  * @param  i2c_freq Required I2C clock in Hz.
  * @retval I2C timing or 0 in case of error.
  */
static uint32_t I2C_GetTiming(uint32_t clock_src_freq, uint32_t i2c_freq)
{
 800f530:	b580      	push	{r7, lr}
 800f532:	b086      	sub	sp, #24
 800f534:	af00      	add	r7, sp, #0
 800f536:	6078      	str	r0, [r7, #4]
 800f538:	6039      	str	r1, [r7, #0]
  uint32_t ret = 0;
 800f53a:	2300      	movs	r3, #0
 800f53c:	617b      	str	r3, [r7, #20]
  uint32_t speed;
  uint32_t idx;

  if((clock_src_freq != 0U) && (i2c_freq != 0U))
 800f53e:	687b      	ldr	r3, [r7, #4]
 800f540:	2b00      	cmp	r3, #0
 800f542:	d06b      	beq.n	800f61c <I2C_GetTiming+0xec>
 800f544:	683b      	ldr	r3, [r7, #0]
 800f546:	2b00      	cmp	r3, #0
 800f548:	d068      	beq.n	800f61c <I2C_GetTiming+0xec>
  {
    for ( speed = 0 ; speed <=  (uint32_t)I2C_SPEED_FREQ_FAST_PLUS ; speed++)
 800f54a:	2300      	movs	r3, #0
 800f54c:	613b      	str	r3, [r7, #16]
 800f54e:	e060      	b.n	800f612 <I2C_GetTiming+0xe2>
    {
      if ((i2c_freq >= I2C_Charac[speed].freq_min) &&
 800f550:	4a35      	ldr	r2, [pc, #212]	@ (800f628 <I2C_GetTiming+0xf8>)
 800f552:	693b      	ldr	r3, [r7, #16]
 800f554:	212c      	movs	r1, #44	@ 0x2c
 800f556:	fb01 f303 	mul.w	r3, r1, r3
 800f55a:	4413      	add	r3, r2
 800f55c:	3304      	adds	r3, #4
 800f55e:	681b      	ldr	r3, [r3, #0]
 800f560:	683a      	ldr	r2, [r7, #0]
 800f562:	429a      	cmp	r2, r3
 800f564:	d352      	bcc.n	800f60c <I2C_GetTiming+0xdc>
          (i2c_freq <= I2C_Charac[speed].freq_max))
 800f566:	4a30      	ldr	r2, [pc, #192]	@ (800f628 <I2C_GetTiming+0xf8>)
 800f568:	693b      	ldr	r3, [r7, #16]
 800f56a:	212c      	movs	r1, #44	@ 0x2c
 800f56c:	fb01 f303 	mul.w	r3, r1, r3
 800f570:	4413      	add	r3, r2
 800f572:	3308      	adds	r3, #8
 800f574:	681b      	ldr	r3, [r3, #0]
      if ((i2c_freq >= I2C_Charac[speed].freq_min) &&
 800f576:	683a      	ldr	r2, [r7, #0]
 800f578:	429a      	cmp	r2, r3
 800f57a:	d847      	bhi.n	800f60c <I2C_GetTiming+0xdc>
      {
        I2C_Compute_PRESC_SCLDEL_SDADEL(clock_src_freq, speed);
 800f57c:	6939      	ldr	r1, [r7, #16]
 800f57e:	6878      	ldr	r0, [r7, #4]
 800f580:	f000 f856 	bl	800f630 <I2C_Compute_PRESC_SCLDEL_SDADEL>
        idx = I2C_Compute_SCLL_SCLH(clock_src_freq, speed);
 800f584:	6939      	ldr	r1, [r7, #16]
 800f586:	6878      	ldr	r0, [r7, #4]
 800f588:	f000 f940 	bl	800f80c <I2C_Compute_SCLL_SCLH>
 800f58c:	60f8      	str	r0, [r7, #12]

        if (idx < I2C_VALID_TIMING_NBR)
 800f58e:	68fb      	ldr	r3, [r7, #12]
 800f590:	2b7f      	cmp	r3, #127	@ 0x7f
 800f592:	d842      	bhi.n	800f61a <I2C_GetTiming+0xea>
        {
          ret = ((I2c_valid_timing[idx].presc  & 0x0FU) << 28) |\
 800f594:	4925      	ldr	r1, [pc, #148]	@ (800f62c <I2C_GetTiming+0xfc>)
 800f596:	68fa      	ldr	r2, [r7, #12]
 800f598:	4613      	mov	r3, r2
 800f59a:	009b      	lsls	r3, r3, #2
 800f59c:	4413      	add	r3, r2
 800f59e:	009b      	lsls	r3, r3, #2
 800f5a0:	440b      	add	r3, r1
 800f5a2:	681b      	ldr	r3, [r3, #0]
 800f5a4:	0719      	lsls	r1, r3, #28
                ((I2c_valid_timing[idx].tscldel & 0x0FU) << 20) |\
 800f5a6:	4821      	ldr	r0, [pc, #132]	@ (800f62c <I2C_GetTiming+0xfc>)
 800f5a8:	68fa      	ldr	r2, [r7, #12]
 800f5aa:	4613      	mov	r3, r2
 800f5ac:	009b      	lsls	r3, r3, #2
 800f5ae:	4413      	add	r3, r2
 800f5b0:	009b      	lsls	r3, r3, #2
 800f5b2:	4403      	add	r3, r0
 800f5b4:	3304      	adds	r3, #4
 800f5b6:	681b      	ldr	r3, [r3, #0]
 800f5b8:	051b      	lsls	r3, r3, #20
 800f5ba:	f403 0370 	and.w	r3, r3, #15728640	@ 0xf00000
          ret = ((I2c_valid_timing[idx].presc  & 0x0FU) << 28) |\
 800f5be:	4319      	orrs	r1, r3
                ((I2c_valid_timing[idx].tsdadel & 0x0FU) << 16) |\
 800f5c0:	481a      	ldr	r0, [pc, #104]	@ (800f62c <I2C_GetTiming+0xfc>)
 800f5c2:	68fa      	ldr	r2, [r7, #12]
 800f5c4:	4613      	mov	r3, r2
 800f5c6:	009b      	lsls	r3, r3, #2
 800f5c8:	4413      	add	r3, r2
 800f5ca:	009b      	lsls	r3, r3, #2
 800f5cc:	4403      	add	r3, r0
 800f5ce:	3308      	adds	r3, #8
 800f5d0:	681b      	ldr	r3, [r3, #0]
 800f5d2:	041b      	lsls	r3, r3, #16
 800f5d4:	f403 2370 	and.w	r3, r3, #983040	@ 0xf0000
                ((I2c_valid_timing[idx].tscldel & 0x0FU) << 20) |\
 800f5d8:	4319      	orrs	r1, r3
                ((I2c_valid_timing[idx].sclh & 0xFFU) << 8) |\
 800f5da:	4814      	ldr	r0, [pc, #80]	@ (800f62c <I2C_GetTiming+0xfc>)
 800f5dc:	68fa      	ldr	r2, [r7, #12]
 800f5de:	4613      	mov	r3, r2
 800f5e0:	009b      	lsls	r3, r3, #2
 800f5e2:	4413      	add	r3, r2
 800f5e4:	009b      	lsls	r3, r3, #2
 800f5e6:	4403      	add	r3, r0
 800f5e8:	330c      	adds	r3, #12
 800f5ea:	681b      	ldr	r3, [r3, #0]
 800f5ec:	021b      	lsls	r3, r3, #8
 800f5ee:	b29b      	uxth	r3, r3
                ((I2c_valid_timing[idx].tsdadel & 0x0FU) << 16) |\
 800f5f0:	4319      	orrs	r1, r3
                ((I2c_valid_timing[idx].scll & 0xFFU) << 0);
 800f5f2:	480e      	ldr	r0, [pc, #56]	@ (800f62c <I2C_GetTiming+0xfc>)
 800f5f4:	68fa      	ldr	r2, [r7, #12]
 800f5f6:	4613      	mov	r3, r2
 800f5f8:	009b      	lsls	r3, r3, #2
 800f5fa:	4413      	add	r3, r2
 800f5fc:	009b      	lsls	r3, r3, #2
 800f5fe:	4403      	add	r3, r0
 800f600:	3310      	adds	r3, #16
 800f602:	681b      	ldr	r3, [r3, #0]
 800f604:	b2db      	uxtb	r3, r3
          ret = ((I2c_valid_timing[idx].presc  & 0x0FU) << 28) |\
 800f606:	430b      	orrs	r3, r1
 800f608:	617b      	str	r3, [r7, #20]
        }
        break;
 800f60a:	e006      	b.n	800f61a <I2C_GetTiming+0xea>
    for ( speed = 0 ; speed <=  (uint32_t)I2C_SPEED_FREQ_FAST_PLUS ; speed++)
 800f60c:	693b      	ldr	r3, [r7, #16]
 800f60e:	3301      	adds	r3, #1
 800f610:	613b      	str	r3, [r7, #16]
 800f612:	693b      	ldr	r3, [r7, #16]
 800f614:	2b02      	cmp	r3, #2
 800f616:	d99b      	bls.n	800f550 <I2C_GetTiming+0x20>
 800f618:	e000      	b.n	800f61c <I2C_GetTiming+0xec>
        break;
 800f61a:	bf00      	nop
      }
    }
  }

  return ret;
 800f61c:	697b      	ldr	r3, [r7, #20]
}
 800f61e:	4618      	mov	r0, r3
 800f620:	3718      	adds	r7, #24
 800f622:	46bd      	mov	sp, r7
 800f624:	bd80      	pop	{r7, pc}
 800f626:	bf00      	nop
 800f628:	0802d1e4 	.word	0x0802d1e4
 800f62c:	2400ac88 	.word	0x2400ac88

0800f630 <I2C_Compute_PRESC_SCLDEL_SDADEL>:
  * @param  clock_src_freq I2C source clock in HZ.
  * @param  I2C_speed I2C frequency (index).
  * @retval None.
  */
static void I2C_Compute_PRESC_SCLDEL_SDADEL(uint32_t clock_src_freq, uint32_t I2C_speed)
{
 800f630:	b480      	push	{r7}
 800f632:	b08f      	sub	sp, #60	@ 0x3c
 800f634:	af00      	add	r7, sp, #0
 800f636:	6078      	str	r0, [r7, #4]
 800f638:	6039      	str	r1, [r7, #0]
  uint32_t prev_presc = I2C_PRESC_MAX;
 800f63a:	2310      	movs	r3, #16
 800f63c:	637b      	str	r3, [r7, #52]	@ 0x34
  int32_t  tsdadel_min, tsdadel_max;
  int32_t  tscldel_min;
  uint32_t presc, scldel, sdadel;
  uint32_t tafdel_min, tafdel_max;

  ti2cclk   = (SEC2NSEC + (clock_src_freq / 2U))/ clock_src_freq;
 800f63e:	687b      	ldr	r3, [r7, #4]
 800f640:	085a      	lsrs	r2, r3, #1
 800f642:	4b6e      	ldr	r3, [pc, #440]	@ (800f7fc <I2C_Compute_PRESC_SCLDEL_SDADEL+0x1cc>)
 800f644:	4413      	add	r3, r2
 800f646:	687a      	ldr	r2, [r7, #4]
 800f648:	fbb3 f3f2 	udiv	r3, r3, r2
 800f64c:	61fb      	str	r3, [r7, #28]

  tafdel_min = I2C_ANALOG_FILTER_DELAY_MIN;
 800f64e:	2332      	movs	r3, #50	@ 0x32
 800f650:	61bb      	str	r3, [r7, #24]
  tafdel_max = I2C_ANALOG_FILTER_DELAY_MAX;
 800f652:	f44f 7382 	mov.w	r3, #260	@ 0x104
 800f656:	617b      	str	r3, [r7, #20]
  /* tDNF = DNF x tI2CCLK
     tPRESC = (PRESC+1) x tI2CCLK
     SDADEL >= {tf +tHD;DAT(min) - tAF(min) - tDNF - [3 x tI2CCLK]} / {tPRESC}
     SDADEL <= {tVD;DAT(max) - tr - tAF(max) - tDNF- [4 x tI2CCLK]} / {tPRESC} */

  tsdadel_min = (int32_t)I2C_Charac[I2C_speed].tfall + (int32_t)I2C_Charac[I2C_speed].hddat_min -
 800f658:	4a69      	ldr	r2, [pc, #420]	@ (800f800 <I2C_Compute_PRESC_SCLDEL_SDADEL+0x1d0>)
 800f65a:	683b      	ldr	r3, [r7, #0]
 800f65c:	212c      	movs	r1, #44	@ 0x2c
 800f65e:	fb01 f303 	mul.w	r3, r1, r3
 800f662:	4413      	add	r3, r2
 800f664:	3324      	adds	r3, #36	@ 0x24
 800f666:	681b      	ldr	r3, [r3, #0]
 800f668:	4618      	mov	r0, r3
 800f66a:	4a65      	ldr	r2, [pc, #404]	@ (800f800 <I2C_Compute_PRESC_SCLDEL_SDADEL+0x1d0>)
 800f66c:	683b      	ldr	r3, [r7, #0]
 800f66e:	212c      	movs	r1, #44	@ 0x2c
 800f670:	fb01 f303 	mul.w	r3, r1, r3
 800f674:	4413      	add	r3, r2
 800f676:	330c      	adds	r3, #12
 800f678:	681b      	ldr	r3, [r3, #0]
 800f67a:	18c2      	adds	r2, r0, r3
    (int32_t)tafdel_min - (int32_t)(((int32_t)I2C_Charac[I2C_speed].dnf + 3) * (int32_t)ti2cclk);
 800f67c:	69bb      	ldr	r3, [r7, #24]
  tsdadel_min = (int32_t)I2C_Charac[I2C_speed].tfall + (int32_t)I2C_Charac[I2C_speed].hddat_min -
 800f67e:	1ad2      	subs	r2, r2, r3
    (int32_t)tafdel_min - (int32_t)(((int32_t)I2C_Charac[I2C_speed].dnf + 3) * (int32_t)ti2cclk);
 800f680:	495f      	ldr	r1, [pc, #380]	@ (800f800 <I2C_Compute_PRESC_SCLDEL_SDADEL+0x1d0>)
 800f682:	683b      	ldr	r3, [r7, #0]
 800f684:	202c      	movs	r0, #44	@ 0x2c
 800f686:	fb00 f303 	mul.w	r3, r0, r3
 800f68a:	440b      	add	r3, r1
 800f68c:	3328      	adds	r3, #40	@ 0x28
 800f68e:	681b      	ldr	r3, [r3, #0]
 800f690:	3303      	adds	r3, #3
 800f692:	69f9      	ldr	r1, [r7, #28]
 800f694:	fb01 f303 	mul.w	r3, r1, r3
  tsdadel_min = (int32_t)I2C_Charac[I2C_speed].tfall + (int32_t)I2C_Charac[I2C_speed].hddat_min -
 800f698:	1ad3      	subs	r3, r2, r3
 800f69a:	633b      	str	r3, [r7, #48]	@ 0x30

  tsdadel_max = (int32_t)I2C_Charac[I2C_speed].vddat_max - (int32_t)I2C_Charac[I2C_speed].trise -
 800f69c:	4a58      	ldr	r2, [pc, #352]	@ (800f800 <I2C_Compute_PRESC_SCLDEL_SDADEL+0x1d0>)
 800f69e:	683b      	ldr	r3, [r7, #0]
 800f6a0:	212c      	movs	r1, #44	@ 0x2c
 800f6a2:	fb01 f303 	mul.w	r3, r1, r3
 800f6a6:	4413      	add	r3, r2
 800f6a8:	3310      	adds	r3, #16
 800f6aa:	681b      	ldr	r3, [r3, #0]
 800f6ac:	4618      	mov	r0, r3
 800f6ae:	4a54      	ldr	r2, [pc, #336]	@ (800f800 <I2C_Compute_PRESC_SCLDEL_SDADEL+0x1d0>)
 800f6b0:	683b      	ldr	r3, [r7, #0]
 800f6b2:	212c      	movs	r1, #44	@ 0x2c
 800f6b4:	fb01 f303 	mul.w	r3, r1, r3
 800f6b8:	4413      	add	r3, r2
 800f6ba:	3320      	adds	r3, #32
 800f6bc:	681b      	ldr	r3, [r3, #0]
 800f6be:	1ac2      	subs	r2, r0, r3
    (int32_t)tafdel_max - (int32_t)(((int32_t)I2C_Charac[I2C_speed].dnf + 4) * (int32_t)ti2cclk);
 800f6c0:	697b      	ldr	r3, [r7, #20]
  tsdadel_max = (int32_t)I2C_Charac[I2C_speed].vddat_max - (int32_t)I2C_Charac[I2C_speed].trise -
 800f6c2:	1ad2      	subs	r2, r2, r3
    (int32_t)tafdel_max - (int32_t)(((int32_t)I2C_Charac[I2C_speed].dnf + 4) * (int32_t)ti2cclk);
 800f6c4:	494e      	ldr	r1, [pc, #312]	@ (800f800 <I2C_Compute_PRESC_SCLDEL_SDADEL+0x1d0>)
 800f6c6:	683b      	ldr	r3, [r7, #0]
 800f6c8:	202c      	movs	r0, #44	@ 0x2c
 800f6ca:	fb00 f303 	mul.w	r3, r0, r3
 800f6ce:	440b      	add	r3, r1
 800f6d0:	3328      	adds	r3, #40	@ 0x28
 800f6d2:	681b      	ldr	r3, [r3, #0]
 800f6d4:	3304      	adds	r3, #4
 800f6d6:	69f9      	ldr	r1, [r7, #28]
 800f6d8:	fb01 f303 	mul.w	r3, r1, r3
  tsdadel_max = (int32_t)I2C_Charac[I2C_speed].vddat_max - (int32_t)I2C_Charac[I2C_speed].trise -
 800f6dc:	1ad3      	subs	r3, r2, r3
 800f6de:	62fb      	str	r3, [r7, #44]	@ 0x2c


  /* {[tr+ tSU;DAT(min)] / [tPRESC]} - 1 <= SCLDEL */
  tscldel_min = (int32_t)I2C_Charac[I2C_speed].trise + (int32_t)I2C_Charac[I2C_speed].sudat_min;
 800f6e0:	4a47      	ldr	r2, [pc, #284]	@ (800f800 <I2C_Compute_PRESC_SCLDEL_SDADEL+0x1d0>)
 800f6e2:	683b      	ldr	r3, [r7, #0]
 800f6e4:	212c      	movs	r1, #44	@ 0x2c
 800f6e6:	fb01 f303 	mul.w	r3, r1, r3
 800f6ea:	4413      	add	r3, r2
 800f6ec:	3320      	adds	r3, #32
 800f6ee:	681b      	ldr	r3, [r3, #0]
 800f6f0:	4618      	mov	r0, r3
 800f6f2:	4a43      	ldr	r2, [pc, #268]	@ (800f800 <I2C_Compute_PRESC_SCLDEL_SDADEL+0x1d0>)
 800f6f4:	683b      	ldr	r3, [r7, #0]
 800f6f6:	212c      	movs	r1, #44	@ 0x2c
 800f6f8:	fb01 f303 	mul.w	r3, r1, r3
 800f6fc:	4413      	add	r3, r2
 800f6fe:	3314      	adds	r3, #20
 800f700:	681b      	ldr	r3, [r3, #0]
 800f702:	4403      	add	r3, r0
 800f704:	613b      	str	r3, [r7, #16]

  if (tsdadel_min <= 0)
 800f706:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800f708:	2b00      	cmp	r3, #0
 800f70a:	dc01      	bgt.n	800f710 <I2C_Compute_PRESC_SCLDEL_SDADEL+0xe0>
  {
    tsdadel_min = 0;
 800f70c:	2300      	movs	r3, #0
 800f70e:	633b      	str	r3, [r7, #48]	@ 0x30
  }

  if (tsdadel_max <= 0)
 800f710:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800f712:	2b00      	cmp	r3, #0
 800f714:	dc01      	bgt.n	800f71a <I2C_Compute_PRESC_SCLDEL_SDADEL+0xea>
  {
    tsdadel_max = 0;
 800f716:	2300      	movs	r3, #0
 800f718:	62fb      	str	r3, [r7, #44]	@ 0x2c
  }

  for (presc = 0; presc < I2C_PRESC_MAX; presc++)
 800f71a:	2300      	movs	r3, #0
 800f71c:	62bb      	str	r3, [r7, #40]	@ 0x28
 800f71e:	e062      	b.n	800f7e6 <I2C_Compute_PRESC_SCLDEL_SDADEL+0x1b6>
  {
    for (scldel = 0; scldel < I2C_SCLDEL_MAX; scldel++)
 800f720:	2300      	movs	r3, #0
 800f722:	627b      	str	r3, [r7, #36]	@ 0x24
 800f724:	e059      	b.n	800f7da <I2C_Compute_PRESC_SCLDEL_SDADEL+0x1aa>
    {
      /* TSCLDEL = (SCLDEL+1) * (PRESC+1) * TI2CCLK */
      uint32_t tscldel = (scldel + 1U) * (presc + 1U) * ti2cclk;
 800f726:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f728:	3301      	adds	r3, #1
 800f72a:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800f72c:	3201      	adds	r2, #1
 800f72e:	fb03 f202 	mul.w	r2, r3, r2
 800f732:	69fb      	ldr	r3, [r7, #28]
 800f734:	fb02 f303 	mul.w	r3, r2, r3
 800f738:	60fb      	str	r3, [r7, #12]

      if (tscldel >= (uint32_t)tscldel_min)
 800f73a:	693b      	ldr	r3, [r7, #16]
 800f73c:	68fa      	ldr	r2, [r7, #12]
 800f73e:	429a      	cmp	r2, r3
 800f740:	d348      	bcc.n	800f7d4 <I2C_Compute_PRESC_SCLDEL_SDADEL+0x1a4>
      {
        for (sdadel = 0; sdadel < I2C_SDADEL_MAX; sdadel++)
 800f742:	2300      	movs	r3, #0
 800f744:	623b      	str	r3, [r7, #32]
 800f746:	e042      	b.n	800f7ce <I2C_Compute_PRESC_SCLDEL_SDADEL+0x19e>
        {
          /* TSDADEL = SDADEL * (PRESC+1) * TI2CCLK */
          uint32_t tsdadel = (sdadel * (presc + 1U)) * ti2cclk;
 800f748:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800f74a:	3301      	adds	r3, #1
 800f74c:	6a3a      	ldr	r2, [r7, #32]
 800f74e:	fb03 f202 	mul.w	r2, r3, r2
 800f752:	69fb      	ldr	r3, [r7, #28]
 800f754:	fb02 f303 	mul.w	r3, r2, r3
 800f758:	60bb      	str	r3, [r7, #8]

          if ((tsdadel >= (uint32_t)tsdadel_min) && (tsdadel <= (uint32_t)tsdadel_max))
 800f75a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800f75c:	68ba      	ldr	r2, [r7, #8]
 800f75e:	429a      	cmp	r2, r3
 800f760:	d332      	bcc.n	800f7c8 <I2C_Compute_PRESC_SCLDEL_SDADEL+0x198>
 800f762:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800f764:	68ba      	ldr	r2, [r7, #8]
 800f766:	429a      	cmp	r2, r3
 800f768:	d82e      	bhi.n	800f7c8 <I2C_Compute_PRESC_SCLDEL_SDADEL+0x198>
          {
            if(presc != prev_presc)
 800f76a:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800f76c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800f76e:	429a      	cmp	r2, r3
 800f770:	d02a      	beq.n	800f7c8 <I2C_Compute_PRESC_SCLDEL_SDADEL+0x198>
            {
              I2c_valid_timing[I2c_valid_timing_nbr].presc = presc;
 800f772:	4b24      	ldr	r3, [pc, #144]	@ (800f804 <I2C_Compute_PRESC_SCLDEL_SDADEL+0x1d4>)
 800f774:	681a      	ldr	r2, [r3, #0]
 800f776:	4924      	ldr	r1, [pc, #144]	@ (800f808 <I2C_Compute_PRESC_SCLDEL_SDADEL+0x1d8>)
 800f778:	4613      	mov	r3, r2
 800f77a:	009b      	lsls	r3, r3, #2
 800f77c:	4413      	add	r3, r2
 800f77e:	009b      	lsls	r3, r3, #2
 800f780:	440b      	add	r3, r1
 800f782:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800f784:	601a      	str	r2, [r3, #0]
              I2c_valid_timing[I2c_valid_timing_nbr].tscldel = scldel;
 800f786:	4b1f      	ldr	r3, [pc, #124]	@ (800f804 <I2C_Compute_PRESC_SCLDEL_SDADEL+0x1d4>)
 800f788:	681a      	ldr	r2, [r3, #0]
 800f78a:	491f      	ldr	r1, [pc, #124]	@ (800f808 <I2C_Compute_PRESC_SCLDEL_SDADEL+0x1d8>)
 800f78c:	4613      	mov	r3, r2
 800f78e:	009b      	lsls	r3, r3, #2
 800f790:	4413      	add	r3, r2
 800f792:	009b      	lsls	r3, r3, #2
 800f794:	440b      	add	r3, r1
 800f796:	3304      	adds	r3, #4
 800f798:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800f79a:	601a      	str	r2, [r3, #0]
              I2c_valid_timing[I2c_valid_timing_nbr].tsdadel = sdadel;
 800f79c:	4b19      	ldr	r3, [pc, #100]	@ (800f804 <I2C_Compute_PRESC_SCLDEL_SDADEL+0x1d4>)
 800f79e:	681a      	ldr	r2, [r3, #0]
 800f7a0:	4919      	ldr	r1, [pc, #100]	@ (800f808 <I2C_Compute_PRESC_SCLDEL_SDADEL+0x1d8>)
 800f7a2:	4613      	mov	r3, r2
 800f7a4:	009b      	lsls	r3, r3, #2
 800f7a6:	4413      	add	r3, r2
 800f7a8:	009b      	lsls	r3, r3, #2
 800f7aa:	440b      	add	r3, r1
 800f7ac:	3308      	adds	r3, #8
 800f7ae:	6a3a      	ldr	r2, [r7, #32]
 800f7b0:	601a      	str	r2, [r3, #0]
              prev_presc = presc;
 800f7b2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800f7b4:	637b      	str	r3, [r7, #52]	@ 0x34
              I2c_valid_timing_nbr ++;
 800f7b6:	4b13      	ldr	r3, [pc, #76]	@ (800f804 <I2C_Compute_PRESC_SCLDEL_SDADEL+0x1d4>)
 800f7b8:	681b      	ldr	r3, [r3, #0]
 800f7ba:	3301      	adds	r3, #1
 800f7bc:	4a11      	ldr	r2, [pc, #68]	@ (800f804 <I2C_Compute_PRESC_SCLDEL_SDADEL+0x1d4>)
 800f7be:	6013      	str	r3, [r2, #0]

              if(I2c_valid_timing_nbr >= I2C_VALID_TIMING_NBR)
 800f7c0:	4b10      	ldr	r3, [pc, #64]	@ (800f804 <I2C_Compute_PRESC_SCLDEL_SDADEL+0x1d4>)
 800f7c2:	681b      	ldr	r3, [r3, #0]
 800f7c4:	2b7f      	cmp	r3, #127	@ 0x7f
 800f7c6:	d812      	bhi.n	800f7ee <I2C_Compute_PRESC_SCLDEL_SDADEL+0x1be>
        for (sdadel = 0; sdadel < I2C_SDADEL_MAX; sdadel++)
 800f7c8:	6a3b      	ldr	r3, [r7, #32]
 800f7ca:	3301      	adds	r3, #1
 800f7cc:	623b      	str	r3, [r7, #32]
 800f7ce:	6a3b      	ldr	r3, [r7, #32]
 800f7d0:	2b0f      	cmp	r3, #15
 800f7d2:	d9b9      	bls.n	800f748 <I2C_Compute_PRESC_SCLDEL_SDADEL+0x118>
    for (scldel = 0; scldel < I2C_SCLDEL_MAX; scldel++)
 800f7d4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f7d6:	3301      	adds	r3, #1
 800f7d8:	627b      	str	r3, [r7, #36]	@ 0x24
 800f7da:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f7dc:	2b0f      	cmp	r3, #15
 800f7de:	d9a2      	bls.n	800f726 <I2C_Compute_PRESC_SCLDEL_SDADEL+0xf6>
  for (presc = 0; presc < I2C_PRESC_MAX; presc++)
 800f7e0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800f7e2:	3301      	adds	r3, #1
 800f7e4:	62bb      	str	r3, [r7, #40]	@ 0x28
 800f7e6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800f7e8:	2b0f      	cmp	r3, #15
 800f7ea:	d999      	bls.n	800f720 <I2C_Compute_PRESC_SCLDEL_SDADEL+0xf0>
 800f7ec:	e000      	b.n	800f7f0 <I2C_Compute_PRESC_SCLDEL_SDADEL+0x1c0>
              {
                return;
 800f7ee:	bf00      	nop
          }
        }
      }
    }
  }
}
 800f7f0:	373c      	adds	r7, #60	@ 0x3c
 800f7f2:	46bd      	mov	sp, r7
 800f7f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f7f8:	4770      	bx	lr
 800f7fa:	bf00      	nop
 800f7fc:	3b9aca00 	.word	0x3b9aca00
 800f800:	0802d1e4 	.word	0x0802d1e4
 800f804:	2400b688 	.word	0x2400b688
 800f808:	2400ac88 	.word	0x2400ac88

0800f80c <I2C_Compute_SCLL_SCLH>:
  * @param  clock_src_freq I2C source clock in HZ.
  * @param  I2C_speed I2C frequency (index).
  * @retval config index (0 to I2C_VALID_TIMING_NBR], 0xFFFFFFFF for no valid config.
  */
static uint32_t I2C_Compute_SCLL_SCLH (uint32_t clock_src_freq, uint32_t I2C_speed)
{
 800f80c:	b480      	push	{r7}
 800f80e:	b093      	sub	sp, #76	@ 0x4c
 800f810:	af00      	add	r7, sp, #0
 800f812:	6078      	str	r0, [r7, #4]
 800f814:	6039      	str	r1, [r7, #0]
 uint32_t ret = 0xFFFFFFFFU;
 800f816:	f04f 33ff 	mov.w	r3, #4294967295
 800f81a:	647b      	str	r3, [r7, #68]	@ 0x44
  uint32_t dnf_delay;
  uint32_t clk_min, clk_max;
  uint32_t scll, sclh;
  uint32_t tafdel_min;

  ti2cclk   = (SEC2NSEC + (clock_src_freq / 2U))/ clock_src_freq;
 800f81c:	687b      	ldr	r3, [r7, #4]
 800f81e:	085a      	lsrs	r2, r3, #1
 800f820:	4b7a      	ldr	r3, [pc, #488]	@ (800fa0c <I2C_Compute_SCLL_SCLH+0x200>)
 800f822:	4413      	add	r3, r2
 800f824:	687a      	ldr	r2, [r7, #4]
 800f826:	fbb3 f3f2 	udiv	r3, r3, r2
 800f82a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  ti2cspeed   = (SEC2NSEC + (I2C_Charac[I2C_speed].freq / 2U))/ I2C_Charac[I2C_speed].freq;
 800f82c:	4a78      	ldr	r2, [pc, #480]	@ (800fa10 <I2C_Compute_SCLL_SCLH+0x204>)
 800f82e:	683b      	ldr	r3, [r7, #0]
 800f830:	212c      	movs	r1, #44	@ 0x2c
 800f832:	fb01 f303 	mul.w	r3, r1, r3
 800f836:	4413      	add	r3, r2
 800f838:	681b      	ldr	r3, [r3, #0]
 800f83a:	085a      	lsrs	r2, r3, #1
 800f83c:	4b73      	ldr	r3, [pc, #460]	@ (800fa0c <I2C_Compute_SCLL_SCLH+0x200>)
 800f83e:	4413      	add	r3, r2
 800f840:	4973      	ldr	r1, [pc, #460]	@ (800fa10 <I2C_Compute_SCLL_SCLH+0x204>)
 800f842:	683a      	ldr	r2, [r7, #0]
 800f844:	202c      	movs	r0, #44	@ 0x2c
 800f846:	fb00 f202 	mul.w	r2, r0, r2
 800f84a:	440a      	add	r2, r1
 800f84c:	6812      	ldr	r2, [r2, #0]
 800f84e:	fbb3 f3f2 	udiv	r3, r3, r2
 800f852:	62bb      	str	r3, [r7, #40]	@ 0x28

  tafdel_min = I2C_ANALOG_FILTER_DELAY_MIN;
 800f854:	2332      	movs	r3, #50	@ 0x32
 800f856:	627b      	str	r3, [r7, #36]	@ 0x24

  /* tDNF = DNF x tI2CCLK */
  dnf_delay = I2C_Charac[I2C_speed].dnf * ti2cclk;
 800f858:	4a6d      	ldr	r2, [pc, #436]	@ (800fa10 <I2C_Compute_SCLL_SCLH+0x204>)
 800f85a:	683b      	ldr	r3, [r7, #0]
 800f85c:	212c      	movs	r1, #44	@ 0x2c
 800f85e:	fb01 f303 	mul.w	r3, r1, r3
 800f862:	4413      	add	r3, r2
 800f864:	3328      	adds	r3, #40	@ 0x28
 800f866:	681a      	ldr	r2, [r3, #0]
 800f868:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800f86a:	fb02 f303 	mul.w	r3, r2, r3
 800f86e:	623b      	str	r3, [r7, #32]

  clk_max = SEC2NSEC / I2C_Charac[I2C_speed].freq_min;
 800f870:	4a67      	ldr	r2, [pc, #412]	@ (800fa10 <I2C_Compute_SCLL_SCLH+0x204>)
 800f872:	683b      	ldr	r3, [r7, #0]
 800f874:	212c      	movs	r1, #44	@ 0x2c
 800f876:	fb01 f303 	mul.w	r3, r1, r3
 800f87a:	4413      	add	r3, r2
 800f87c:	3304      	adds	r3, #4
 800f87e:	681b      	ldr	r3, [r3, #0]
 800f880:	4a62      	ldr	r2, [pc, #392]	@ (800fa0c <I2C_Compute_SCLL_SCLH+0x200>)
 800f882:	fbb2 f3f3 	udiv	r3, r2, r3
 800f886:	61fb      	str	r3, [r7, #28]
  clk_min = SEC2NSEC / I2C_Charac[I2C_speed].freq_max;
 800f888:	4a61      	ldr	r2, [pc, #388]	@ (800fa10 <I2C_Compute_SCLL_SCLH+0x204>)
 800f88a:	683b      	ldr	r3, [r7, #0]
 800f88c:	212c      	movs	r1, #44	@ 0x2c
 800f88e:	fb01 f303 	mul.w	r3, r1, r3
 800f892:	4413      	add	r3, r2
 800f894:	3308      	adds	r3, #8
 800f896:	681b      	ldr	r3, [r3, #0]
 800f898:	4a5c      	ldr	r2, [pc, #368]	@ (800fa0c <I2C_Compute_SCLL_SCLH+0x200>)
 800f89a:	fbb2 f3f3 	udiv	r3, r2, r3
 800f89e:	61bb      	str	r3, [r7, #24]

  prev_error = ti2cspeed;
 800f8a0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800f8a2:	643b      	str	r3, [r7, #64]	@ 0x40

  for (uint32_t count = 0; count < I2c_valid_timing_nbr; count++)
 800f8a4:	2300      	movs	r3, #0
 800f8a6:	637b      	str	r3, [r7, #52]	@ 0x34
 800f8a8:	e0a3      	b.n	800f9f2 <I2C_Compute_SCLL_SCLH+0x1e6>
  {
    /* tPRESC = (PRESC+1) x tI2CCLK*/
    uint32_t tpresc = (I2c_valid_timing[count].presc + 1U) * ti2cclk;
 800f8aa:	495a      	ldr	r1, [pc, #360]	@ (800fa14 <I2C_Compute_SCLL_SCLH+0x208>)
 800f8ac:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800f8ae:	4613      	mov	r3, r2
 800f8b0:	009b      	lsls	r3, r3, #2
 800f8b2:	4413      	add	r3, r2
 800f8b4:	009b      	lsls	r3, r3, #2
 800f8b6:	440b      	add	r3, r1
 800f8b8:	681b      	ldr	r3, [r3, #0]
 800f8ba:	1c5a      	adds	r2, r3, #1
 800f8bc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800f8be:	fb02 f303 	mul.w	r3, r2, r3
 800f8c2:	617b      	str	r3, [r7, #20]

    for (scll = 0; scll < I2C_SCLL_MAX; scll++)
 800f8c4:	2300      	movs	r3, #0
 800f8c6:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800f8c8:	e08c      	b.n	800f9e4 <I2C_Compute_SCLL_SCLH+0x1d8>
    {
      /* tLOW(min) <= tAF(min) + tDNF + 2 x tI2CCLK + [(SCLL+1) x tPRESC ] */
      uint32_t tscl_l = tafdel_min + dnf_delay + (2U * ti2cclk) + ((scll + 1U) * tpresc);
 800f8ca:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800f8cc:	6a3b      	ldr	r3, [r7, #32]
 800f8ce:	441a      	add	r2, r3
 800f8d0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800f8d2:	3301      	adds	r3, #1
 800f8d4:	6979      	ldr	r1, [r7, #20]
 800f8d6:	fb03 f101 	mul.w	r1, r3, r1
 800f8da:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800f8dc:	005b      	lsls	r3, r3, #1
 800f8de:	440b      	add	r3, r1
 800f8e0:	4413      	add	r3, r2
 800f8e2:	613b      	str	r3, [r7, #16]


      /* The I2CCLK period tI2CCLK must respect the following conditions:
      tI2CCLK < (tLOW - tfilters) / 4 and tI2CCLK < tHIGH */
      if ((tscl_l > I2C_Charac[I2C_speed].lscl_min) && (ti2cclk < ((tscl_l - tafdel_min - dnf_delay) / 4U)))
 800f8e4:	4a4a      	ldr	r2, [pc, #296]	@ (800fa10 <I2C_Compute_SCLL_SCLH+0x204>)
 800f8e6:	683b      	ldr	r3, [r7, #0]
 800f8e8:	212c      	movs	r1, #44	@ 0x2c
 800f8ea:	fb01 f303 	mul.w	r3, r1, r3
 800f8ee:	4413      	add	r3, r2
 800f8f0:	3318      	adds	r3, #24
 800f8f2:	681b      	ldr	r3, [r3, #0]
 800f8f4:	693a      	ldr	r2, [r7, #16]
 800f8f6:	429a      	cmp	r2, r3
 800f8f8:	d971      	bls.n	800f9de <I2C_Compute_SCLL_SCLH+0x1d2>
 800f8fa:	693a      	ldr	r2, [r7, #16]
 800f8fc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f8fe:	1ad2      	subs	r2, r2, r3
 800f900:	6a3b      	ldr	r3, [r7, #32]
 800f902:	1ad3      	subs	r3, r2, r3
 800f904:	089b      	lsrs	r3, r3, #2
 800f906:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800f908:	429a      	cmp	r2, r3
 800f90a:	d268      	bcs.n	800f9de <I2C_Compute_SCLL_SCLH+0x1d2>
      {
        for (sclh = 0; sclh < I2C_SCLH_MAX; sclh++)
 800f90c:	2300      	movs	r3, #0
 800f90e:	63bb      	str	r3, [r7, #56]	@ 0x38
 800f910:	e062      	b.n	800f9d8 <I2C_Compute_SCLL_SCLH+0x1cc>
        {
          /* tHIGH(min) <= tAF(min) + tDNF + 2 x tI2CCLK + [(SCLH+1) x tPRESC] */
          uint32_t tscl_h = tafdel_min + dnf_delay + (2U * ti2cclk) + ((sclh + 1U) * tpresc);
 800f912:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800f914:	6a3b      	ldr	r3, [r7, #32]
 800f916:	441a      	add	r2, r3
 800f918:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f91a:	3301      	adds	r3, #1
 800f91c:	6979      	ldr	r1, [r7, #20]
 800f91e:	fb03 f101 	mul.w	r1, r3, r1
 800f922:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800f924:	005b      	lsls	r3, r3, #1
 800f926:	440b      	add	r3, r1
 800f928:	4413      	add	r3, r2
 800f92a:	60fb      	str	r3, [r7, #12]

          /* tSCL = tf + tLOW + tr + tHIGH */
          uint32_t tscl = tscl_l + tscl_h + I2C_Charac[I2C_speed].trise + I2C_Charac[I2C_speed].tfall;
 800f92c:	693a      	ldr	r2, [r7, #16]
 800f92e:	68fb      	ldr	r3, [r7, #12]
 800f930:	441a      	add	r2, r3
 800f932:	4937      	ldr	r1, [pc, #220]	@ (800fa10 <I2C_Compute_SCLL_SCLH+0x204>)
 800f934:	683b      	ldr	r3, [r7, #0]
 800f936:	202c      	movs	r0, #44	@ 0x2c
 800f938:	fb00 f303 	mul.w	r3, r0, r3
 800f93c:	440b      	add	r3, r1
 800f93e:	3320      	adds	r3, #32
 800f940:	681b      	ldr	r3, [r3, #0]
 800f942:	441a      	add	r2, r3
 800f944:	4932      	ldr	r1, [pc, #200]	@ (800fa10 <I2C_Compute_SCLL_SCLH+0x204>)
 800f946:	683b      	ldr	r3, [r7, #0]
 800f948:	202c      	movs	r0, #44	@ 0x2c
 800f94a:	fb00 f303 	mul.w	r3, r0, r3
 800f94e:	440b      	add	r3, r1
 800f950:	3324      	adds	r3, #36	@ 0x24
 800f952:	681b      	ldr	r3, [r3, #0]
 800f954:	4413      	add	r3, r2
 800f956:	60bb      	str	r3, [r7, #8]

          if ((tscl >= clk_min) && (tscl <= clk_max) && (tscl_h >= I2C_Charac[I2C_speed].hscl_min) && (ti2cclk < tscl_h))
 800f958:	68ba      	ldr	r2, [r7, #8]
 800f95a:	69bb      	ldr	r3, [r7, #24]
 800f95c:	429a      	cmp	r2, r3
 800f95e:	d338      	bcc.n	800f9d2 <I2C_Compute_SCLL_SCLH+0x1c6>
 800f960:	68ba      	ldr	r2, [r7, #8]
 800f962:	69fb      	ldr	r3, [r7, #28]
 800f964:	429a      	cmp	r2, r3
 800f966:	d834      	bhi.n	800f9d2 <I2C_Compute_SCLL_SCLH+0x1c6>
 800f968:	4a29      	ldr	r2, [pc, #164]	@ (800fa10 <I2C_Compute_SCLL_SCLH+0x204>)
 800f96a:	683b      	ldr	r3, [r7, #0]
 800f96c:	212c      	movs	r1, #44	@ 0x2c
 800f96e:	fb01 f303 	mul.w	r3, r1, r3
 800f972:	4413      	add	r3, r2
 800f974:	331c      	adds	r3, #28
 800f976:	681b      	ldr	r3, [r3, #0]
 800f978:	68fa      	ldr	r2, [r7, #12]
 800f97a:	429a      	cmp	r2, r3
 800f97c:	d329      	bcc.n	800f9d2 <I2C_Compute_SCLL_SCLH+0x1c6>
 800f97e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800f980:	68fb      	ldr	r3, [r7, #12]
 800f982:	429a      	cmp	r2, r3
 800f984:	d225      	bcs.n	800f9d2 <I2C_Compute_SCLL_SCLH+0x1c6>
          {
            int32_t error = (int32_t)tscl - (int32_t)ti2cspeed;
 800f986:	68ba      	ldr	r2, [r7, #8]
 800f988:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800f98a:	1ad3      	subs	r3, r2, r3
 800f98c:	633b      	str	r3, [r7, #48]	@ 0x30

            if (error < 0)
 800f98e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800f990:	2b00      	cmp	r3, #0
 800f992:	da02      	bge.n	800f99a <I2C_Compute_SCLL_SCLH+0x18e>
            {
              error = -error;
 800f994:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800f996:	425b      	negs	r3, r3
 800f998:	633b      	str	r3, [r7, #48]	@ 0x30
            }

            /* look for the timings with the lowest clock error */
            if ((uint32_t)error < prev_error)
 800f99a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800f99c:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800f99e:	429a      	cmp	r2, r3
 800f9a0:	d917      	bls.n	800f9d2 <I2C_Compute_SCLL_SCLH+0x1c6>
            {
              prev_error = (uint32_t)error;
 800f9a2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800f9a4:	643b      	str	r3, [r7, #64]	@ 0x40
              I2c_valid_timing[count].scll = scll;
 800f9a6:	491b      	ldr	r1, [pc, #108]	@ (800fa14 <I2C_Compute_SCLL_SCLH+0x208>)
 800f9a8:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800f9aa:	4613      	mov	r3, r2
 800f9ac:	009b      	lsls	r3, r3, #2
 800f9ae:	4413      	add	r3, r2
 800f9b0:	009b      	lsls	r3, r3, #2
 800f9b2:	440b      	add	r3, r1
 800f9b4:	3310      	adds	r3, #16
 800f9b6:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 800f9b8:	601a      	str	r2, [r3, #0]
              I2c_valid_timing[count].sclh = sclh;
 800f9ba:	4916      	ldr	r1, [pc, #88]	@ (800fa14 <I2C_Compute_SCLL_SCLH+0x208>)
 800f9bc:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800f9be:	4613      	mov	r3, r2
 800f9c0:	009b      	lsls	r3, r3, #2
 800f9c2:	4413      	add	r3, r2
 800f9c4:	009b      	lsls	r3, r3, #2
 800f9c6:	440b      	add	r3, r1
 800f9c8:	330c      	adds	r3, #12
 800f9ca:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800f9cc:	601a      	str	r2, [r3, #0]
              ret = count;
 800f9ce:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800f9d0:	647b      	str	r3, [r7, #68]	@ 0x44
        for (sclh = 0; sclh < I2C_SCLH_MAX; sclh++)
 800f9d2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f9d4:	3301      	adds	r3, #1
 800f9d6:	63bb      	str	r3, [r7, #56]	@ 0x38
 800f9d8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f9da:	2bff      	cmp	r3, #255	@ 0xff
 800f9dc:	d999      	bls.n	800f912 <I2C_Compute_SCLL_SCLH+0x106>
    for (scll = 0; scll < I2C_SCLL_MAX; scll++)
 800f9de:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800f9e0:	3301      	adds	r3, #1
 800f9e2:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800f9e4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800f9e6:	2bff      	cmp	r3, #255	@ 0xff
 800f9e8:	f67f af6f 	bls.w	800f8ca <I2C_Compute_SCLL_SCLH+0xbe>
  for (uint32_t count = 0; count < I2c_valid_timing_nbr; count++)
 800f9ec:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800f9ee:	3301      	adds	r3, #1
 800f9f0:	637b      	str	r3, [r7, #52]	@ 0x34
 800f9f2:	4b09      	ldr	r3, [pc, #36]	@ (800fa18 <I2C_Compute_SCLL_SCLH+0x20c>)
 800f9f4:	681b      	ldr	r3, [r3, #0]
 800f9f6:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800f9f8:	429a      	cmp	r2, r3
 800f9fa:	f4ff af56 	bcc.w	800f8aa <I2C_Compute_SCLL_SCLH+0x9e>
        }
      }
    }
  }

  return ret;
 800f9fe:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
}
 800fa00:	4618      	mov	r0, r3
 800fa02:	374c      	adds	r7, #76	@ 0x4c
 800fa04:	46bd      	mov	sp, r7
 800fa06:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fa0a:	4770      	bx	lr
 800fa0c:	3b9aca00 	.word	0x3b9aca00
 800fa10:	0802d1e4 	.word	0x0802d1e4
 800fa14:	2400ac88 	.word	0x2400ac88
 800fa18:	2400b688 	.word	0x2400b688

0800fa1c <I2C4_MspInit>:
  * @brief  Initializes I2C MSP.
  * @param  phi2c  I2C handler
  * @retval None
  */
static void I2C4_MspInit(I2C_HandleTypeDef *phi2c)
{
 800fa1c:	b580      	push	{r7, lr}
 800fa1e:	b08a      	sub	sp, #40	@ 0x28
 800fa20:	af00      	add	r7, sp, #0
 800fa22:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phi2c);

  /*** Configure the GPIOs ***/
  /* Enable SCL GPIO clock */
  BUS_I2C4_SCL_GPIO_CLK_ENABLE();
 800fa24:	4b31      	ldr	r3, [pc, #196]	@ (800faec <I2C4_MspInit+0xd0>)
 800fa26:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800fa2a:	4a30      	ldr	r2, [pc, #192]	@ (800faec <I2C4_MspInit+0xd0>)
 800fa2c:	f043 0308 	orr.w	r3, r3, #8
 800fa30:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 800fa34:	4b2d      	ldr	r3, [pc, #180]	@ (800faec <I2C4_MspInit+0xd0>)
 800fa36:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800fa3a:	f003 0308 	and.w	r3, r3, #8
 800fa3e:	613b      	str	r3, [r7, #16]
 800fa40:	693b      	ldr	r3, [r7, #16]
  /* Enable SDA GPIO clock */
  BUS_I2C4_SDA_GPIO_CLK_ENABLE();
 800fa42:	4b2a      	ldr	r3, [pc, #168]	@ (800faec <I2C4_MspInit+0xd0>)
 800fa44:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800fa48:	4a28      	ldr	r2, [pc, #160]	@ (800faec <I2C4_MspInit+0xd0>)
 800fa4a:	f043 0308 	orr.w	r3, r3, #8
 800fa4e:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 800fa52:	4b26      	ldr	r3, [pc, #152]	@ (800faec <I2C4_MspInit+0xd0>)
 800fa54:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800fa58:	f003 0308 	and.w	r3, r3, #8
 800fa5c:	60fb      	str	r3, [r7, #12]
 800fa5e:	68fb      	ldr	r3, [r7, #12]

  /* Configure I2C Tx as alternate function */
  gpio_init_structure.Pin       = BUS_I2C4_SCL_PIN;
 800fa60:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800fa64:	617b      	str	r3, [r7, #20]
  gpio_init_structure.Mode      = GPIO_MODE_AF_OD;
 800fa66:	2312      	movs	r3, #18
 800fa68:	61bb      	str	r3, [r7, #24]
  gpio_init_structure.Pull      = GPIO_NOPULL;
 800fa6a:	2300      	movs	r3, #0
 800fa6c:	61fb      	str	r3, [r7, #28]
  gpio_init_structure.Speed     = GPIO_SPEED_FREQ_HIGH;
 800fa6e:	2302      	movs	r3, #2
 800fa70:	623b      	str	r3, [r7, #32]
  gpio_init_structure.Alternate = BUS_I2C4_SCL_AF;
 800fa72:	2304      	movs	r3, #4
 800fa74:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(BUS_I2C4_SCL_GPIO_PORT, &gpio_init_structure);
 800fa76:	f107 0314 	add.w	r3, r7, #20
 800fa7a:	4619      	mov	r1, r3
 800fa7c:	481c      	ldr	r0, [pc, #112]	@ (800faf0 <I2C4_MspInit+0xd4>)
 800fa7e:	f001 fd4b 	bl	8011518 <HAL_GPIO_Init>

  /* Configure I2C Rx as alternate function */
  gpio_init_structure.Pin       = BUS_I2C4_SDA_PIN;
 800fa82:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800fa86:	617b      	str	r3, [r7, #20]
  gpio_init_structure.Mode      = GPIO_MODE_AF_OD;
 800fa88:	2312      	movs	r3, #18
 800fa8a:	61bb      	str	r3, [r7, #24]
  gpio_init_structure.Pull      = GPIO_NOPULL;
 800fa8c:	2300      	movs	r3, #0
 800fa8e:	61fb      	str	r3, [r7, #28]
  gpio_init_structure.Speed     = GPIO_SPEED_FREQ_HIGH;
 800fa90:	2302      	movs	r3, #2
 800fa92:	623b      	str	r3, [r7, #32]
  gpio_init_structure.Alternate = BUS_I2C4_SDA_AF;
 800fa94:	2304      	movs	r3, #4
 800fa96:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(BUS_I2C4_SDA_GPIO_PORT, &gpio_init_structure);
 800fa98:	f107 0314 	add.w	r3, r7, #20
 800fa9c:	4619      	mov	r1, r3
 800fa9e:	4814      	ldr	r0, [pc, #80]	@ (800faf0 <I2C4_MspInit+0xd4>)
 800faa0:	f001 fd3a 	bl	8011518 <HAL_GPIO_Init>

  /*** Configure the I2C peripheral ***/
  /* Enable I2C clock */
  BUS_I2C4_CLK_ENABLE();
 800faa4:	4b11      	ldr	r3, [pc, #68]	@ (800faec <I2C4_MspInit+0xd0>)
 800faa6:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 800faaa:	4a10      	ldr	r2, [pc, #64]	@ (800faec <I2C4_MspInit+0xd0>)
 800faac:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800fab0:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 800fab4:	4b0d      	ldr	r3, [pc, #52]	@ (800faec <I2C4_MspInit+0xd0>)
 800fab6:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 800faba:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800fabe:	60bb      	str	r3, [r7, #8]
 800fac0:	68bb      	ldr	r3, [r7, #8]

  /* Force the I2C peripheral clock reset */
  BUS_I2C4_FORCE_RESET();
 800fac2:	4b0a      	ldr	r3, [pc, #40]	@ (800faec <I2C4_MspInit+0xd0>)
 800fac4:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 800fac8:	4a08      	ldr	r2, [pc, #32]	@ (800faec <I2C4_MspInit+0xd0>)
 800faca:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800face:	f8c2 309c 	str.w	r3, [r2, #156]	@ 0x9c

  /* Release the I2C peripheral clock reset */
  BUS_I2C4_RELEASE_RESET();
 800fad2:	4b06      	ldr	r3, [pc, #24]	@ (800faec <I2C4_MspInit+0xd0>)
 800fad4:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 800fad8:	4a04      	ldr	r2, [pc, #16]	@ (800faec <I2C4_MspInit+0xd0>)
 800fada:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800fade:	f8c2 309c 	str.w	r3, [r2, #156]	@ 0x9c
}
 800fae2:	bf00      	nop
 800fae4:	3728      	adds	r7, #40	@ 0x28
 800fae6:	46bd      	mov	sp, r7
 800fae8:	bd80      	pop	{r7, pc}
 800faea:	bf00      	nop
 800faec:	58024400 	.word	0x58024400
 800faf0:	58020c00 	.word	0x58020c00

0800faf4 <I2C4_MspDeInit>:
  * @brief  DeInitializes I2C MSP.
  * @param  phi2c  I2C handler
  * @retval None
  */
static void I2C4_MspDeInit(I2C_HandleTypeDef *phi2c)
{
 800faf4:	b580      	push	{r7, lr}
 800faf6:	b088      	sub	sp, #32
 800faf8:	af00      	add	r7, sp, #0
 800fafa:	6078      	str	r0, [r7, #4]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(phi2c);

  /* Configure I2C Tx, Rx as alternate function */
  gpio_init_structure.Pin = BUS_I2C4_SCL_PIN;
 800fafc:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800fb00:	60fb      	str	r3, [r7, #12]
  HAL_GPIO_DeInit(BUS_I2C4_SCL_GPIO_PORT, gpio_init_structure.Pin );
 800fb02:	68fb      	ldr	r3, [r7, #12]
 800fb04:	4619      	mov	r1, r3
 800fb06:	480b      	ldr	r0, [pc, #44]	@ (800fb34 <I2C4_MspDeInit+0x40>)
 800fb08:	f001 feb6 	bl	8011878 <HAL_GPIO_DeInit>
  gpio_init_structure.Pin = BUS_I2C4_SDA_PIN;
 800fb0c:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800fb10:	60fb      	str	r3, [r7, #12]
  HAL_GPIO_DeInit(BUS_I2C4_SDA_GPIO_PORT, gpio_init_structure.Pin);
 800fb12:	68fb      	ldr	r3, [r7, #12]
 800fb14:	4619      	mov	r1, r3
 800fb16:	4807      	ldr	r0, [pc, #28]	@ (800fb34 <I2C4_MspDeInit+0x40>)
 800fb18:	f001 feae 	bl	8011878 <HAL_GPIO_DeInit>

  /* Disable I2C clock */
  BUS_I2C4_CLK_DISABLE();
 800fb1c:	4b06      	ldr	r3, [pc, #24]	@ (800fb38 <I2C4_MspDeInit+0x44>)
 800fb1e:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 800fb22:	4a05      	ldr	r2, [pc, #20]	@ (800fb38 <I2C4_MspDeInit+0x44>)
 800fb24:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800fb28:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
}
 800fb2c:	bf00      	nop
 800fb2e:	3720      	adds	r7, #32
 800fb30:	46bd      	mov	sp, r7
 800fb32:	bd80      	pop	{r7, pc}
 800fb34:	58020c00 	.word	0x58020c00
 800fb38:	58024400 	.word	0x58024400

0800fb3c <I2C4_WriteReg>:
  * @param  pData      The target register value to be written
  * @param  Length     data length in bytes
  * @retval BSP status
  */
static int32_t I2C4_WriteReg(uint16_t DevAddr, uint16_t Reg, uint16_t MemAddSize, uint8_t *pData, uint16_t Length)
{
 800fb3c:	b580      	push	{r7, lr}
 800fb3e:	b088      	sub	sp, #32
 800fb40:	af04      	add	r7, sp, #16
 800fb42:	607b      	str	r3, [r7, #4]
 800fb44:	4603      	mov	r3, r0
 800fb46:	81fb      	strh	r3, [r7, #14]
 800fb48:	460b      	mov	r3, r1
 800fb4a:	81bb      	strh	r3, [r7, #12]
 800fb4c:	4613      	mov	r3, r2
 800fb4e:	817b      	strh	r3, [r7, #10]
  if(HAL_I2C_Mem_Write(&hbus_i2c4, DevAddr, Reg, MemAddSize, pData, Length, 1000) == HAL_OK)
 800fb50:	8978      	ldrh	r0, [r7, #10]
 800fb52:	89ba      	ldrh	r2, [r7, #12]
 800fb54:	89f9      	ldrh	r1, [r7, #14]
 800fb56:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800fb5a:	9302      	str	r3, [sp, #8]
 800fb5c:	8b3b      	ldrh	r3, [r7, #24]
 800fb5e:	9301      	str	r3, [sp, #4]
 800fb60:	687b      	ldr	r3, [r7, #4]
 800fb62:	9300      	str	r3, [sp, #0]
 800fb64:	4603      	mov	r3, r0
 800fb66:	4807      	ldr	r0, [pc, #28]	@ (800fb84 <I2C4_WriteReg+0x48>)
 800fb68:	f002 f8c4 	bl	8011cf4 <HAL_I2C_Mem_Write>
 800fb6c:	4603      	mov	r3, r0
 800fb6e:	2b00      	cmp	r3, #0
 800fb70:	d101      	bne.n	800fb76 <I2C4_WriteReg+0x3a>
  {
    return BSP_ERROR_NONE;
 800fb72:	2300      	movs	r3, #0
 800fb74:	e001      	b.n	800fb7a <I2C4_WriteReg+0x3e>
  }

  return BSP_ERROR_BUS_FAILURE;
 800fb76:	f06f 0307 	mvn.w	r3, #7
}
 800fb7a:	4618      	mov	r0, r3
 800fb7c:	3710      	adds	r7, #16
 800fb7e:	46bd      	mov	sp, r7
 800fb80:	bd80      	pop	{r7, pc}
 800fb82:	bf00      	nop
 800fb84:	2400b68c 	.word	0x2400b68c

0800fb88 <I2C4_ReadReg>:
  * @param  pData      The target register value to be read
  * @param  Length     data length in bytes
  * @retval BSP status
  */
static int32_t I2C4_ReadReg(uint16_t DevAddr, uint16_t Reg, uint16_t MemAddSize, uint8_t *pData, uint16_t Length)
{
 800fb88:	b580      	push	{r7, lr}
 800fb8a:	b088      	sub	sp, #32
 800fb8c:	af04      	add	r7, sp, #16
 800fb8e:	607b      	str	r3, [r7, #4]
 800fb90:	4603      	mov	r3, r0
 800fb92:	81fb      	strh	r3, [r7, #14]
 800fb94:	460b      	mov	r3, r1
 800fb96:	81bb      	strh	r3, [r7, #12]
 800fb98:	4613      	mov	r3, r2
 800fb9a:	817b      	strh	r3, [r7, #10]
  if (HAL_I2C_Mem_Read(&hbus_i2c4, DevAddr, Reg, MemAddSize, pData, Length, 1000) == HAL_OK)
 800fb9c:	8978      	ldrh	r0, [r7, #10]
 800fb9e:	89ba      	ldrh	r2, [r7, #12]
 800fba0:	89f9      	ldrh	r1, [r7, #14]
 800fba2:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800fba6:	9302      	str	r3, [sp, #8]
 800fba8:	8b3b      	ldrh	r3, [r7, #24]
 800fbaa:	9301      	str	r3, [sp, #4]
 800fbac:	687b      	ldr	r3, [r7, #4]
 800fbae:	9300      	str	r3, [sp, #0]
 800fbb0:	4603      	mov	r3, r0
 800fbb2:	4807      	ldr	r0, [pc, #28]	@ (800fbd0 <I2C4_ReadReg+0x48>)
 800fbb4:	f002 f9b2 	bl	8011f1c <HAL_I2C_Mem_Read>
 800fbb8:	4603      	mov	r3, r0
 800fbba:	2b00      	cmp	r3, #0
 800fbbc:	d101      	bne.n	800fbc2 <I2C4_ReadReg+0x3a>
  {
    return BSP_ERROR_NONE;
 800fbbe:	2300      	movs	r3, #0
 800fbc0:	e001      	b.n	800fbc6 <I2C4_ReadReg+0x3e>
  }

  return BSP_ERROR_BUS_FAILURE;
 800fbc2:	f06f 0307 	mvn.w	r3, #7
}
 800fbc6:	4618      	mov	r0, r3
 800fbc8:	3710      	adds	r7, #16
 800fbca:	46bd      	mov	sp, r7
 800fbcc:	bd80      	pop	{r7, pc}
 800fbce:	bf00      	nop
 800fbd0:	2400b68c 	.word	0x2400b68c

0800fbd4 <BSP_QSPI_Init>:
  * @param  Instance   QSPI Instance
  * @param  Init       QSPI Init structure
  * @retval BSP status
  */
int32_t BSP_QSPI_Init(uint32_t Instance, BSP_QSPI_Init_t *Init)
{
 800fbd4:	b580      	push	{r7, lr}
 800fbd6:	b090      	sub	sp, #64	@ 0x40
 800fbd8:	af00      	add	r7, sp, #0
 800fbda:	6078      	str	r0, [r7, #4]
 800fbdc:	6039      	str	r1, [r7, #0]
  int32_t ret = BSP_ERROR_NONE;
 800fbde:	2300      	movs	r3, #0
 800fbe0:	63fb      	str	r3, [r7, #60]	@ 0x3c
  3: For DTR mode to reach max 54Mhz
  */
  static const uint32_t PrescalerTab[2] = {1, 3};

  /* Check if the instance is supported */
  if(Instance >= QSPI_INSTANCES_NUMBER)
 800fbe2:	687b      	ldr	r3, [r7, #4]
 800fbe4:	2b00      	cmp	r3, #0
 800fbe6:	d003      	beq.n	800fbf0 <BSP_QSPI_Init+0x1c>
  {
    ret = BSP_ERROR_WRONG_PARAM;
 800fbe8:	f06f 0301 	mvn.w	r3, #1
 800fbec:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800fbee:	e090      	b.n	800fd12 <BSP_QSPI_Init+0x13e>
  }
  else
  {
    /* Check if instance is already initialized */
    if(QSPI_Ctx[Instance].IsInitialized == QSPI_ACCESS_NONE)
 800fbf0:	494a      	ldr	r1, [pc, #296]	@ (800fd1c <BSP_QSPI_Init+0x148>)
 800fbf2:	687a      	ldr	r2, [r7, #4]
 800fbf4:	4613      	mov	r3, r2
 800fbf6:	005b      	lsls	r3, r3, #1
 800fbf8:	4413      	add	r3, r2
 800fbfa:	009b      	lsls	r3, r3, #2
 800fbfc:	440b      	add	r3, r1
 800fbfe:	781b      	ldrb	r3, [r3, #0]
 800fc00:	2b00      	cmp	r3, #0
 800fc02:	f040 8086 	bne.w	800fd12 <BSP_QSPI_Init+0x13e>
          ret = BSP_ERROR_PERIPH_FAILURE;
        }
      }
#else
      /* Msp QSPI initialization */
      QSPI_MspInit(&hqspi);
 800fc06:	4846      	ldr	r0, [pc, #280]	@ (800fd20 <BSP_QSPI_Init+0x14c>)
 800fc08:	f000 f99c 	bl	800ff44 <QSPI_MspInit>
#endif /* USE_HAL_QSPI_REGISTER_CALLBACKS */

      if(ret == BSP_ERROR_NONE)
 800fc0c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800fc0e:	2b00      	cmp	r3, #0
 800fc10:	d17f      	bne.n	800fd12 <BSP_QSPI_Init+0x13e>
      {
        /* STM32 QSPI interface initialization */
        (void)MT25TL01G_GetFlashInfo(&pInfo);
 800fc12:	f107 031c 	add.w	r3, r7, #28
 800fc16:	4618      	mov	r0, r3
 800fc18:	f7fe ffea 	bl	800ebf0 <MT25TL01G_GetFlashInfo>
        qspi_init.ClockPrescaler = PrescalerTab[Init->TransferRate];
 800fc1c:	683b      	ldr	r3, [r7, #0]
 800fc1e:	785b      	ldrb	r3, [r3, #1]
 800fc20:	461a      	mov	r2, r3
 800fc22:	4b40      	ldr	r3, [pc, #256]	@ (800fd24 <BSP_QSPI_Init+0x150>)
 800fc24:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800fc28:	613b      	str	r3, [r7, #16]
        qspi_init.DualFlashMode  = QSPI_DUALFLASH_ENABLE;
 800fc2a:	2340      	movs	r3, #64	@ 0x40
 800fc2c:	61bb      	str	r3, [r7, #24]
        qspi_init.FlashSize      = (uint32_t)POSITION_VAL((uint32_t)pInfo.FlashSize) - 1U;
 800fc2e:	69fb      	ldr	r3, [r7, #28]
 800fc30:	637b      	str	r3, [r7, #52]	@ 0x34
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800fc32:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800fc34:	fa93 f3a3 	rbit	r3, r3
 800fc38:	633b      	str	r3, [r7, #48]	@ 0x30
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 800fc3a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800fc3c:	63bb      	str	r3, [r7, #56]	@ 0x38
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 800fc3e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800fc40:	2b00      	cmp	r3, #0
 800fc42:	d101      	bne.n	800fc48 <BSP_QSPI_Init+0x74>
  {
    return 32U;
 800fc44:	2320      	movs	r3, #32
 800fc46:	e003      	b.n	800fc50 <BSP_QSPI_Init+0x7c>
  }
  return __builtin_clz(value);
 800fc48:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800fc4a:	fab3 f383 	clz	r3, r3
 800fc4e:	b2db      	uxtb	r3, r3
 800fc50:	3b01      	subs	r3, #1
 800fc52:	60fb      	str	r3, [r7, #12]
        qspi_init.SampleShifting = (Init->TransferRate == BSP_QSPI_STR_TRANSFER) ? QSPI_SAMPLE_SHIFTING_HALFCYCLE : QSPI_SAMPLE_SHIFTING_NONE;
 800fc54:	683b      	ldr	r3, [r7, #0]
 800fc56:	785b      	ldrb	r3, [r3, #1]
 800fc58:	2b00      	cmp	r3, #0
 800fc5a:	d101      	bne.n	800fc60 <BSP_QSPI_Init+0x8c>
 800fc5c:	2310      	movs	r3, #16
 800fc5e:	e000      	b.n	800fc62 <BSP_QSPI_Init+0x8e>
 800fc60:	2300      	movs	r3, #0
 800fc62:	617b      	str	r3, [r7, #20]

        if(MX_QSPI_Init(&hqspi, &qspi_init) != HAL_OK)
 800fc64:	f107 030c 	add.w	r3, r7, #12
 800fc68:	4619      	mov	r1, r3
 800fc6a:	482d      	ldr	r0, [pc, #180]	@ (800fd20 <BSP_QSPI_Init+0x14c>)
 800fc6c:	f000 f85c 	bl	800fd28 <MX_QSPI_Init>
 800fc70:	4603      	mov	r3, r0
 800fc72:	2b00      	cmp	r3, #0
 800fc74:	d003      	beq.n	800fc7e <BSP_QSPI_Init+0xaa>
        {
          ret = BSP_ERROR_PERIPH_FAILURE;
 800fc76:	f06f 0303 	mvn.w	r3, #3
 800fc7a:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800fc7c:	e049      	b.n	800fd12 <BSP_QSPI_Init+0x13e>
        }/* QSPI memory reset */
        else if(QSPI_ResetMemory(Instance) != BSP_ERROR_NONE)
 800fc7e:	6878      	ldr	r0, [r7, #4]
 800fc80:	f000 faa8 	bl	80101d4 <QSPI_ResetMemory>
 800fc84:	4603      	mov	r3, r0
 800fc86:	2b00      	cmp	r3, #0
 800fc88:	d003      	beq.n	800fc92 <BSP_QSPI_Init+0xbe>
        {
          ret = BSP_ERROR_COMPONENT_FAILURE;
 800fc8a:	f06f 0304 	mvn.w	r3, #4
 800fc8e:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800fc90:	e03f      	b.n	800fd12 <BSP_QSPI_Init+0x13e>
        }/* Force Flash enter 4 Byte address mode */
        else if(MT25TL01G_AutoPollingMemReady(&hqspi, QSPI_Ctx[Instance].InterfaceMode) != MT25TL01G_OK)
 800fc92:	4922      	ldr	r1, [pc, #136]	@ (800fd1c <BSP_QSPI_Init+0x148>)
 800fc94:	687a      	ldr	r2, [r7, #4]
 800fc96:	4613      	mov	r3, r2
 800fc98:	005b      	lsls	r3, r3, #1
 800fc9a:	4413      	add	r3, r2
 800fc9c:	009b      	lsls	r3, r3, #2
 800fc9e:	440b      	add	r3, r1
 800fca0:	3301      	adds	r3, #1
 800fca2:	781b      	ldrb	r3, [r3, #0]
 800fca4:	4619      	mov	r1, r3
 800fca6:	481e      	ldr	r0, [pc, #120]	@ (800fd20 <BSP_QSPI_Init+0x14c>)
 800fca8:	f7ff f811 	bl	800ecce <MT25TL01G_AutoPollingMemReady>
 800fcac:	4603      	mov	r3, r0
 800fcae:	2b00      	cmp	r3, #0
 800fcb0:	d003      	beq.n	800fcba <BSP_QSPI_Init+0xe6>
        {
          ret = BSP_ERROR_COMPONENT_FAILURE;
 800fcb2:	f06f 0304 	mvn.w	r3, #4
 800fcb6:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800fcb8:	e02b      	b.n	800fd12 <BSP_QSPI_Init+0x13e>
        }
        else if(MT25TL01G_Enter4BytesAddressMode(&hqspi, QSPI_Ctx[Instance].InterfaceMode) != MT25TL01G_OK)
 800fcba:	4918      	ldr	r1, [pc, #96]	@ (800fd1c <BSP_QSPI_Init+0x148>)
 800fcbc:	687a      	ldr	r2, [r7, #4]
 800fcbe:	4613      	mov	r3, r2
 800fcc0:	005b      	lsls	r3, r3, #1
 800fcc2:	4413      	add	r3, r2
 800fcc4:	009b      	lsls	r3, r3, #2
 800fcc6:	440b      	add	r3, r1
 800fcc8:	3301      	adds	r3, #1
 800fcca:	781b      	ldrb	r3, [r3, #0]
 800fccc:	4619      	mov	r1, r3
 800fcce:	4814      	ldr	r0, [pc, #80]	@ (800fd20 <BSP_QSPI_Init+0x14c>)
 800fcd0:	f7fe ffb5 	bl	800ec3e <MT25TL01G_Enter4BytesAddressMode>
 800fcd4:	4603      	mov	r3, r0
 800fcd6:	2b00      	cmp	r3, #0
 800fcd8:	d003      	beq.n	800fce2 <BSP_QSPI_Init+0x10e>
        {
          ret = BSP_ERROR_COMPONENT_FAILURE;
 800fcda:	f06f 0304 	mvn.w	r3, #4
 800fcde:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800fce0:	e017      	b.n	800fd12 <BSP_QSPI_Init+0x13e>
        }/* Configuration of the dummy cycles on QSPI memory side */
        else if(QSPI_DummyCyclesCfg(Instance) != BSP_ERROR_NONE)
 800fce2:	6878      	ldr	r0, [r7, #4]
 800fce4:	f000 fae2 	bl	80102ac <QSPI_DummyCyclesCfg>
 800fce8:	4603      	mov	r3, r0
 800fcea:	2b00      	cmp	r3, #0
 800fcec:	d003      	beq.n	800fcf6 <BSP_QSPI_Init+0x122>
        {
          ret = BSP_ERROR_COMPONENT_FAILURE;
 800fcee:	f06f 0304 	mvn.w	r3, #4
 800fcf2:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800fcf4:	e00d      	b.n	800fd12 <BSP_QSPI_Init+0x13e>
        }
        else
        {
          /* Configure Flash to desired mode */
          if(BSP_QSPI_ConfigFlash(Instance, Init->InterfaceMode, Init->TransferRate) != BSP_ERROR_NONE)
 800fcf6:	683b      	ldr	r3, [r7, #0]
 800fcf8:	7819      	ldrb	r1, [r3, #0]
 800fcfa:	683b      	ldr	r3, [r7, #0]
 800fcfc:	785b      	ldrb	r3, [r3, #1]
 800fcfe:	461a      	mov	r2, r3
 800fd00:	6878      	ldr	r0, [r7, #4]
 800fd02:	f000 f89d 	bl	800fe40 <BSP_QSPI_ConfigFlash>
 800fd06:	4603      	mov	r3, r0
 800fd08:	2b00      	cmp	r3, #0
 800fd0a:	d002      	beq.n	800fd12 <BSP_QSPI_Init+0x13e>
          {
            ret = BSP_ERROR_COMPONENT_FAILURE;
 800fd0c:	f06f 0304 	mvn.w	r3, #4
 800fd10:	63fb      	str	r3, [r7, #60]	@ 0x3c
      }
    }
  }

  /* Return BSP status */
  return ret;
 800fd12:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
}
 800fd14:	4618      	mov	r0, r3
 800fd16:	3740      	adds	r7, #64	@ 0x40
 800fd18:	46bd      	mov	sp, r7
 800fd1a:	bd80      	pop	{r7, pc}
 800fd1c:	2400b6e0 	.word	0x2400b6e0
 800fd20:	2400027c 	.word	0x2400027c
 800fd24:	0802d268 	.word	0x0802d268

0800fd28 <MX_QSPI_Init>:
  * @param  hQspi       QSPI handle
  * @param  Config      QSPI configuration structure
  * @retval BSP status
  */
__weak HAL_StatusTypeDef MX_QSPI_Init(QSPI_HandleTypeDef *hQspi, MX_QSPI_Init_t *Config)
{
 800fd28:	b580      	push	{r7, lr}
 800fd2a:	b082      	sub	sp, #8
 800fd2c:	af00      	add	r7, sp, #0
 800fd2e:	6078      	str	r0, [r7, #4]
 800fd30:	6039      	str	r1, [r7, #0]
  /* QSPI initialization */
  /* QSPI freq = SYSCLK /(1 + ClockPrescaler) Mhz */
  hQspi->Instance                = QUADSPI;
 800fd32:	687b      	ldr	r3, [r7, #4]
 800fd34:	4a13      	ldr	r2, [pc, #76]	@ (800fd84 <MX_QSPI_Init+0x5c>)
 800fd36:	601a      	str	r2, [r3, #0]
  hQspi->Init.ClockPrescaler     = Config->ClockPrescaler;
 800fd38:	683b      	ldr	r3, [r7, #0]
 800fd3a:	685a      	ldr	r2, [r3, #4]
 800fd3c:	687b      	ldr	r3, [r7, #4]
 800fd3e:	605a      	str	r2, [r3, #4]
  hQspi->Init.FifoThreshold      = 1;
 800fd40:	687b      	ldr	r3, [r7, #4]
 800fd42:	2201      	movs	r2, #1
 800fd44:	609a      	str	r2, [r3, #8]
  hQspi->Init.SampleShifting     = Config->SampleShifting;
 800fd46:	683b      	ldr	r3, [r7, #0]
 800fd48:	689a      	ldr	r2, [r3, #8]
 800fd4a:	687b      	ldr	r3, [r7, #4]
 800fd4c:	60da      	str	r2, [r3, #12]
  hQspi->Init.FlashSize          = Config->FlashSize;
 800fd4e:	683b      	ldr	r3, [r7, #0]
 800fd50:	681a      	ldr	r2, [r3, #0]
 800fd52:	687b      	ldr	r3, [r7, #4]
 800fd54:	611a      	str	r2, [r3, #16]
  hQspi->Init.ChipSelectHighTime = QSPI_CS_HIGH_TIME_4_CYCLE; /* Min 50ns for nonRead */
 800fd56:	687b      	ldr	r3, [r7, #4]
 800fd58:	f44f 7240 	mov.w	r2, #768	@ 0x300
 800fd5c:	615a      	str	r2, [r3, #20]
  hQspi->Init.ClockMode          = QSPI_CLOCK_MODE_0;
 800fd5e:	687b      	ldr	r3, [r7, #4]
 800fd60:	2200      	movs	r2, #0
 800fd62:	619a      	str	r2, [r3, #24]
  hQspi->Init.FlashID            = QSPI_FLASH_ID_1;
 800fd64:	687b      	ldr	r3, [r7, #4]
 800fd66:	2200      	movs	r2, #0
 800fd68:	61da      	str	r2, [r3, #28]
  hQspi->Init.DualFlash          = Config->DualFlashMode;
 800fd6a:	683b      	ldr	r3, [r7, #0]
 800fd6c:	68da      	ldr	r2, [r3, #12]
 800fd6e:	687b      	ldr	r3, [r7, #4]
 800fd70:	621a      	str	r2, [r3, #32]

  return HAL_QSPI_Init(hQspi);
 800fd72:	6878      	ldr	r0, [r7, #4]
 800fd74:	f003 faac 	bl	80132d0 <HAL_QSPI_Init>
 800fd78:	4603      	mov	r3, r0
}
 800fd7a:	4618      	mov	r0, r3
 800fd7c:	3708      	adds	r7, #8
 800fd7e:	46bd      	mov	sp, r7
 800fd80:	bd80      	pop	{r7, pc}
 800fd82:	bf00      	nop
 800fd84:	52005000 	.word	0x52005000

0800fd88 <BSP_QSPI_EnableMemoryMappedMode>:
  *         Only 1 Instance can running MMP mode. And it will lock system at this mode.
  * @param  Instance  QSPI instance
  * @retval BSP status
  */
int32_t BSP_QSPI_EnableMemoryMappedMode(uint32_t Instance)
{
 800fd88:	b580      	push	{r7, lr}
 800fd8a:	b084      	sub	sp, #16
 800fd8c:	af00      	add	r7, sp, #0
 800fd8e:	6078      	str	r0, [r7, #4]
  int32_t ret = BSP_ERROR_NONE;
 800fd90:	2300      	movs	r3, #0
 800fd92:	60fb      	str	r3, [r7, #12]

  /* Check if the instance is supported */
  if(Instance >= QSPI_INSTANCES_NUMBER)
 800fd94:	687b      	ldr	r3, [r7, #4]
 800fd96:	2b00      	cmp	r3, #0
 800fd98:	d003      	beq.n	800fda2 <BSP_QSPI_EnableMemoryMappedMode+0x1a>
  {
    ret = BSP_ERROR_WRONG_PARAM;
 800fd9a:	f06f 0301 	mvn.w	r3, #1
 800fd9e:	60fb      	str	r3, [r7, #12]
 800fda0:	e045      	b.n	800fe2e <BSP_QSPI_EnableMemoryMappedMode+0xa6>
  }
  else
  {
    if(QSPI_Ctx[Instance].TransferRate == BSP_QSPI_STR_TRANSFER)
 800fda2:	4925      	ldr	r1, [pc, #148]	@ (800fe38 <BSP_QSPI_EnableMemoryMappedMode+0xb0>)
 800fda4:	687a      	ldr	r2, [r7, #4]
 800fda6:	4613      	mov	r3, r2
 800fda8:	005b      	lsls	r3, r3, #1
 800fdaa:	4413      	add	r3, r2
 800fdac:	009b      	lsls	r3, r3, #2
 800fdae:	440b      	add	r3, r1
 800fdb0:	3302      	adds	r3, #2
 800fdb2:	781b      	ldrb	r3, [r3, #0]
 800fdb4:	2b00      	cmp	r3, #0
 800fdb6:	d11d      	bne.n	800fdf4 <BSP_QSPI_EnableMemoryMappedMode+0x6c>
    {
      if(MT25TL01G_EnableMemoryMappedModeSTR(&hqspi, QSPI_Ctx[Instance].InterfaceMode) != MT25TL01G_OK)
 800fdb8:	491f      	ldr	r1, [pc, #124]	@ (800fe38 <BSP_QSPI_EnableMemoryMappedMode+0xb0>)
 800fdba:	687a      	ldr	r2, [r7, #4]
 800fdbc:	4613      	mov	r3, r2
 800fdbe:	005b      	lsls	r3, r3, #1
 800fdc0:	4413      	add	r3, r2
 800fdc2:	009b      	lsls	r3, r3, #2
 800fdc4:	440b      	add	r3, r1
 800fdc6:	3301      	adds	r3, #1
 800fdc8:	781b      	ldrb	r3, [r3, #0]
 800fdca:	4619      	mov	r1, r3
 800fdcc:	481b      	ldr	r0, [pc, #108]	@ (800fe3c <BSP_QSPI_EnableMemoryMappedMode+0xb4>)
 800fdce:	f7ff f8d3 	bl	800ef78 <MT25TL01G_EnableMemoryMappedModeSTR>
 800fdd2:	4603      	mov	r3, r0
 800fdd4:	2b00      	cmp	r3, #0
 800fdd6:	d003      	beq.n	800fde0 <BSP_QSPI_EnableMemoryMappedMode+0x58>
      {
        ret = BSP_ERROR_COMPONENT_FAILURE;
 800fdd8:	f06f 0304 	mvn.w	r3, #4
 800fddc:	60fb      	str	r3, [r7, #12]
 800fdde:	e026      	b.n	800fe2e <BSP_QSPI_EnableMemoryMappedMode+0xa6>
      }
      else /* Update QSPI context if all operations are well done */
      {
        QSPI_Ctx[Instance].IsInitialized = QSPI_ACCESS_MMP;
 800fde0:	4915      	ldr	r1, [pc, #84]	@ (800fe38 <BSP_QSPI_EnableMemoryMappedMode+0xb0>)
 800fde2:	687a      	ldr	r2, [r7, #4]
 800fde4:	4613      	mov	r3, r2
 800fde6:	005b      	lsls	r3, r3, #1
 800fde8:	4413      	add	r3, r2
 800fdea:	009b      	lsls	r3, r3, #2
 800fdec:	440b      	add	r3, r1
 800fdee:	2202      	movs	r2, #2
 800fdf0:	701a      	strb	r2, [r3, #0]
 800fdf2:	e01c      	b.n	800fe2e <BSP_QSPI_EnableMemoryMappedMode+0xa6>
      }
    }
    else
    {
      if(MT25TL01G_EnableMemoryMappedModeDTR(&hqspi, QSPI_Ctx[Instance].InterfaceMode) != MT25TL01G_OK)
 800fdf4:	4910      	ldr	r1, [pc, #64]	@ (800fe38 <BSP_QSPI_EnableMemoryMappedMode+0xb0>)
 800fdf6:	687a      	ldr	r2, [r7, #4]
 800fdf8:	4613      	mov	r3, r2
 800fdfa:	005b      	lsls	r3, r3, #1
 800fdfc:	4413      	add	r3, r2
 800fdfe:	009b      	lsls	r3, r3, #2
 800fe00:	440b      	add	r3, r1
 800fe02:	3301      	adds	r3, #1
 800fe04:	781b      	ldrb	r3, [r3, #0]
 800fe06:	4619      	mov	r1, r3
 800fe08:	480c      	ldr	r0, [pc, #48]	@ (800fe3c <BSP_QSPI_EnableMemoryMappedMode+0xb4>)
 800fe0a:	f7ff f84b 	bl	800eea4 <MT25TL01G_EnableMemoryMappedModeDTR>
 800fe0e:	4603      	mov	r3, r0
 800fe10:	2b00      	cmp	r3, #0
 800fe12:	d003      	beq.n	800fe1c <BSP_QSPI_EnableMemoryMappedMode+0x94>
      {
        ret = BSP_ERROR_COMPONENT_FAILURE;
 800fe14:	f06f 0304 	mvn.w	r3, #4
 800fe18:	60fb      	str	r3, [r7, #12]
 800fe1a:	e008      	b.n	800fe2e <BSP_QSPI_EnableMemoryMappedMode+0xa6>
      }
      else /* Update QSPI context if all operations are well done */
      {
        QSPI_Ctx[Instance].IsInitialized = QSPI_ACCESS_MMP;
 800fe1c:	4906      	ldr	r1, [pc, #24]	@ (800fe38 <BSP_QSPI_EnableMemoryMappedMode+0xb0>)
 800fe1e:	687a      	ldr	r2, [r7, #4]
 800fe20:	4613      	mov	r3, r2
 800fe22:	005b      	lsls	r3, r3, #1
 800fe24:	4413      	add	r3, r2
 800fe26:	009b      	lsls	r3, r3, #2
 800fe28:	440b      	add	r3, r1
 800fe2a:	2202      	movs	r2, #2
 800fe2c:	701a      	strb	r2, [r3, #0]
      }
    }
  }

  /* Return BSP status */
  return ret;
 800fe2e:	68fb      	ldr	r3, [r7, #12]
}
 800fe30:	4618      	mov	r0, r3
 800fe32:	3710      	adds	r7, #16
 800fe34:	46bd      	mov	sp, r7
 800fe36:	bd80      	pop	{r7, pc}
 800fe38:	2400b6e0 	.word	0x2400b6e0
 800fe3c:	2400027c 	.word	0x2400027c

0800fe40 <BSP_QSPI_ConfigFlash>:
  * @param  Mode      QSPI mode
  * @param  Rate      QSPI transfer rate
  * @retval BSP status
  */
int32_t BSP_QSPI_ConfigFlash(uint32_t Instance, BSP_QSPI_Interface_t Mode, BSP_QSPI_Transfer_t Rate)
{
 800fe40:	b580      	push	{r7, lr}
 800fe42:	b084      	sub	sp, #16
 800fe44:	af00      	add	r7, sp, #0
 800fe46:	6078      	str	r0, [r7, #4]
 800fe48:	460b      	mov	r3, r1
 800fe4a:	70fb      	strb	r3, [r7, #3]
 800fe4c:	4613      	mov	r3, r2
 800fe4e:	70bb      	strb	r3, [r7, #2]
  int32_t ret = BSP_ERROR_NONE;
 800fe50:	2300      	movs	r3, #0
 800fe52:	60fb      	str	r3, [r7, #12]

  /* Check if the instance is supported */
  if(Instance >= QSPI_INSTANCES_NUMBER)
 800fe54:	687b      	ldr	r3, [r7, #4]
 800fe56:	2b00      	cmp	r3, #0
 800fe58:	d003      	beq.n	800fe62 <BSP_QSPI_ConfigFlash+0x22>
  {
    ret = BSP_ERROR_WRONG_PARAM;
 800fe5a:	f06f 0301 	mvn.w	r3, #1
 800fe5e:	60fb      	str	r3, [r7, #12]
 800fe60:	e067      	b.n	800ff32 <BSP_QSPI_ConfigFlash+0xf2>
  }
  else
  {
    /* Check if MMP mode locked ************************************************/
    if(QSPI_Ctx[Instance].IsInitialized == QSPI_ACCESS_MMP)
 800fe62:	4936      	ldr	r1, [pc, #216]	@ (800ff3c <BSP_QSPI_ConfigFlash+0xfc>)
 800fe64:	687a      	ldr	r2, [r7, #4]
 800fe66:	4613      	mov	r3, r2
 800fe68:	005b      	lsls	r3, r3, #1
 800fe6a:	4413      	add	r3, r2
 800fe6c:	009b      	lsls	r3, r3, #2
 800fe6e:	440b      	add	r3, r1
 800fe70:	781b      	ldrb	r3, [r3, #0]
 800fe72:	2b02      	cmp	r3, #2
 800fe74:	d103      	bne.n	800fe7e <BSP_QSPI_ConfigFlash+0x3e>
    {
      ret = BSP_ERROR_QSPI_MMP_LOCK_FAILURE;
 800fe76:	f06f 0319 	mvn.w	r3, #25
 800fe7a:	60fb      	str	r3, [r7, #12]
 800fe7c:	e059      	b.n	800ff32 <BSP_QSPI_ConfigFlash+0xf2>
    }
    else
    {
      /* Setup MCU transfer rate setting ***************************************************/
      hqspi.Init.SampleShifting = (Rate == BSP_QSPI_STR_TRANSFER) ? QSPI_SAMPLE_SHIFTING_HALFCYCLE : QSPI_SAMPLE_SHIFTING_NONE;
 800fe7e:	78bb      	ldrb	r3, [r7, #2]
 800fe80:	2b00      	cmp	r3, #0
 800fe82:	d101      	bne.n	800fe88 <BSP_QSPI_ConfigFlash+0x48>
 800fe84:	2310      	movs	r3, #16
 800fe86:	e000      	b.n	800fe8a <BSP_QSPI_ConfigFlash+0x4a>
 800fe88:	2300      	movs	r3, #0
 800fe8a:	4a2d      	ldr	r2, [pc, #180]	@ (800ff40 <BSP_QSPI_ConfigFlash+0x100>)
 800fe8c:	60d3      	str	r3, [r2, #12]

      if(HAL_QSPI_Init(&hqspi)!= HAL_OK)
 800fe8e:	482c      	ldr	r0, [pc, #176]	@ (800ff40 <BSP_QSPI_ConfigFlash+0x100>)
 800fe90:	f003 fa1e 	bl	80132d0 <HAL_QSPI_Init>
 800fe94:	4603      	mov	r3, r0
 800fe96:	2b00      	cmp	r3, #0
 800fe98:	d003      	beq.n	800fea2 <BSP_QSPI_ConfigFlash+0x62>
      {
        ret = BSP_ERROR_PERIPH_FAILURE;
 800fe9a:	f06f 0303 	mvn.w	r3, #3
 800fe9e:	60fb      	str	r3, [r7, #12]
 800fea0:	e047      	b.n	800ff32 <BSP_QSPI_ConfigFlash+0xf2>
      }
      else
      {
        /* Setup Flash interface ***************************************************/
        switch(QSPI_Ctx[Instance].InterfaceMode)
 800fea2:	4926      	ldr	r1, [pc, #152]	@ (800ff3c <BSP_QSPI_ConfigFlash+0xfc>)
 800fea4:	687a      	ldr	r2, [r7, #4]
 800fea6:	4613      	mov	r3, r2
 800fea8:	005b      	lsls	r3, r3, #1
 800feaa:	4413      	add	r3, r2
 800feac:	009b      	lsls	r3, r3, #2
 800feae:	440b      	add	r3, r1
 800feb0:	3301      	adds	r3, #1
 800feb2:	781b      	ldrb	r3, [r3, #0]
 800feb4:	2b03      	cmp	r3, #3
 800feb6:	d10c      	bne.n	800fed2 <BSP_QSPI_ConfigFlash+0x92>
        {
        case MT25TL01G_QPI_MODE :               /* 4-4-4 commands */
          if(Mode != MT25TL01G_QPI_MODE)
 800feb8:	78fb      	ldrb	r3, [r7, #3]
 800feba:	2b03      	cmp	r3, #3
 800febc:	d016      	beq.n	800feec <BSP_QSPI_ConfigFlash+0xac>
          {
            if(MT25TL01G_ExitQPIMode(&hqspi) != MT25TL01G_OK)
 800febe:	4820      	ldr	r0, [pc, #128]	@ (800ff40 <BSP_QSPI_ConfigFlash+0x100>)
 800fec0:	f7fe ffc6 	bl	800ee50 <MT25TL01G_ExitQPIMode>
 800fec4:	4603      	mov	r3, r0
 800fec6:	2b00      	cmp	r3, #0
 800fec8:	d010      	beq.n	800feec <BSP_QSPI_ConfigFlash+0xac>
            {
              ret = BSP_ERROR_COMPONENT_FAILURE;
 800feca:	f06f 0304 	mvn.w	r3, #4
 800fece:	60fb      	str	r3, [r7, #12]
            }
          }
          break;
 800fed0:	e00c      	b.n	800feec <BSP_QSPI_ConfigFlash+0xac>

        case BSP_QSPI_SPI_MODE :               /* 1-1-1 commands, Power on H/W default setting */
        case BSP_QSPI_SPI_2IO_MODE :           /* 1-2-2 read commands */
        case BSP_QSPI_SPI_4IO_MODE :           /* 1-4-4 read commands */
        default :
          if(Mode == MT25TL01G_QPI_MODE)
 800fed2:	78fb      	ldrb	r3, [r7, #3]
 800fed4:	2b03      	cmp	r3, #3
 800fed6:	d10b      	bne.n	800fef0 <BSP_QSPI_ConfigFlash+0xb0>
          {
            if(MT25TL01G_EnterQPIMode(&hqspi) != MT25TL01G_OK)
 800fed8:	4819      	ldr	r0, [pc, #100]	@ (800ff40 <BSP_QSPI_ConfigFlash+0x100>)
 800feda:	f7fe ff8f 	bl	800edfc <MT25TL01G_EnterQPIMode>
 800fede:	4603      	mov	r3, r0
 800fee0:	2b00      	cmp	r3, #0
 800fee2:	d005      	beq.n	800fef0 <BSP_QSPI_ConfigFlash+0xb0>
            {
              ret = BSP_ERROR_COMPONENT_FAILURE;
 800fee4:	f06f 0304 	mvn.w	r3, #4
 800fee8:	60fb      	str	r3, [r7, #12]
            }
          }
          break;
 800feea:	e001      	b.n	800fef0 <BSP_QSPI_ConfigFlash+0xb0>
          break;
 800feec:	bf00      	nop
 800feee:	e000      	b.n	800fef2 <BSP_QSPI_ConfigFlash+0xb2>
          break;
 800fef0:	bf00      	nop
        }

        /* Update QSPI context if all operations are well done */
        if(ret == BSP_ERROR_NONE)
 800fef2:	68fb      	ldr	r3, [r7, #12]
 800fef4:	2b00      	cmp	r3, #0
 800fef6:	d11c      	bne.n	800ff32 <BSP_QSPI_ConfigFlash+0xf2>
        {
          /* Update current status parameter *****************************************/
          QSPI_Ctx[Instance].IsInitialized = QSPI_ACCESS_INDIRECT;
 800fef8:	4910      	ldr	r1, [pc, #64]	@ (800ff3c <BSP_QSPI_ConfigFlash+0xfc>)
 800fefa:	687a      	ldr	r2, [r7, #4]
 800fefc:	4613      	mov	r3, r2
 800fefe:	005b      	lsls	r3, r3, #1
 800ff00:	4413      	add	r3, r2
 800ff02:	009b      	lsls	r3, r3, #2
 800ff04:	440b      	add	r3, r1
 800ff06:	2201      	movs	r2, #1
 800ff08:	701a      	strb	r2, [r3, #0]
          QSPI_Ctx[Instance].InterfaceMode = Mode;
 800ff0a:	490c      	ldr	r1, [pc, #48]	@ (800ff3c <BSP_QSPI_ConfigFlash+0xfc>)
 800ff0c:	687a      	ldr	r2, [r7, #4]
 800ff0e:	4613      	mov	r3, r2
 800ff10:	005b      	lsls	r3, r3, #1
 800ff12:	4413      	add	r3, r2
 800ff14:	009b      	lsls	r3, r3, #2
 800ff16:	440b      	add	r3, r1
 800ff18:	3301      	adds	r3, #1
 800ff1a:	78fa      	ldrb	r2, [r7, #3]
 800ff1c:	701a      	strb	r2, [r3, #0]
          QSPI_Ctx[Instance].TransferRate  = Rate;
 800ff1e:	4907      	ldr	r1, [pc, #28]	@ (800ff3c <BSP_QSPI_ConfigFlash+0xfc>)
 800ff20:	687a      	ldr	r2, [r7, #4]
 800ff22:	4613      	mov	r3, r2
 800ff24:	005b      	lsls	r3, r3, #1
 800ff26:	4413      	add	r3, r2
 800ff28:	009b      	lsls	r3, r3, #2
 800ff2a:	440b      	add	r3, r1
 800ff2c:	3302      	adds	r3, #2
 800ff2e:	78ba      	ldrb	r2, [r7, #2]
 800ff30:	701a      	strb	r2, [r3, #0]
      }
    }
  }

  /* Return BSP status */
  return ret;
 800ff32:	68fb      	ldr	r3, [r7, #12]
}
 800ff34:	4618      	mov	r0, r3
 800ff36:	3710      	adds	r7, #16
 800ff38:	46bd      	mov	sp, r7
 800ff3a:	bd80      	pop	{r7, pc}
 800ff3c:	2400b6e0 	.word	0x2400b6e0
 800ff40:	2400027c 	.word	0x2400027c

0800ff44 <QSPI_MspInit>:
  *           - Peripheral's GPIO Configuration
  *           - NVIC configuration for QSPI interrupt
  * @retval None
  */
static void QSPI_MspInit(QSPI_HandleTypeDef *hQspi)
{
 800ff44:	b580      	push	{r7, lr}
 800ff46:	b094      	sub	sp, #80	@ 0x50
 800ff48:	af00      	add	r7, sp, #0
 800ff4a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hQspi);

  /*##-1- Enable peripherals and GPIO Clocks #################################*/
  /* Enable the QuadSPI memory interface clock */
  QSPI_CLK_ENABLE();
 800ff4c:	4b9c      	ldr	r3, [pc, #624]	@ (80101c0 <QSPI_MspInit+0x27c>)
 800ff4e:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 800ff52:	4a9b      	ldr	r2, [pc, #620]	@ (80101c0 <QSPI_MspInit+0x27c>)
 800ff54:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800ff58:	f8c2 30d4 	str.w	r3, [r2, #212]	@ 0xd4
 800ff5c:	4b98      	ldr	r3, [pc, #608]	@ (80101c0 <QSPI_MspInit+0x27c>)
 800ff5e:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 800ff62:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800ff66:	63bb      	str	r3, [r7, #56]	@ 0x38
 800ff68:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
  /* Reset the QuadSPI memory interface */
  QSPI_FORCE_RESET();
 800ff6a:	4b95      	ldr	r3, [pc, #596]	@ (80101c0 <QSPI_MspInit+0x27c>)
 800ff6c:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800ff6e:	4a94      	ldr	r2, [pc, #592]	@ (80101c0 <QSPI_MspInit+0x27c>)
 800ff70:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800ff74:	67d3      	str	r3, [r2, #124]	@ 0x7c
  QSPI_RELEASE_RESET();
 800ff76:	4b92      	ldr	r3, [pc, #584]	@ (80101c0 <QSPI_MspInit+0x27c>)
 800ff78:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800ff7a:	4a91      	ldr	r2, [pc, #580]	@ (80101c0 <QSPI_MspInit+0x27c>)
 800ff7c:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800ff80:	67d3      	str	r3, [r2, #124]	@ 0x7c
  /* Enable GPIO clocks */
  QSPI_CLK_GPIO_CLK_ENABLE();
 800ff82:	4b8f      	ldr	r3, [pc, #572]	@ (80101c0 <QSPI_MspInit+0x27c>)
 800ff84:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800ff88:	4a8d      	ldr	r2, [pc, #564]	@ (80101c0 <QSPI_MspInit+0x27c>)
 800ff8a:	f043 0320 	orr.w	r3, r3, #32
 800ff8e:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 800ff92:	4b8b      	ldr	r3, [pc, #556]	@ (80101c0 <QSPI_MspInit+0x27c>)
 800ff94:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800ff98:	f003 0320 	and.w	r3, r3, #32
 800ff9c:	637b      	str	r3, [r7, #52]	@ 0x34
 800ff9e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
  QSPI_BK1_CS_GPIO_CLK_ENABLE();
 800ffa0:	4b87      	ldr	r3, [pc, #540]	@ (80101c0 <QSPI_MspInit+0x27c>)
 800ffa2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800ffa6:	4a86      	ldr	r2, [pc, #536]	@ (80101c0 <QSPI_MspInit+0x27c>)
 800ffa8:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800ffac:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 800ffb0:	4b83      	ldr	r3, [pc, #524]	@ (80101c0 <QSPI_MspInit+0x27c>)
 800ffb2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800ffb6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800ffba:	633b      	str	r3, [r7, #48]	@ 0x30
 800ffbc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
  QSPI_BK1_D0_GPIO_CLK_ENABLE();
 800ffbe:	4b80      	ldr	r3, [pc, #512]	@ (80101c0 <QSPI_MspInit+0x27c>)
 800ffc0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800ffc4:	4a7e      	ldr	r2, [pc, #504]	@ (80101c0 <QSPI_MspInit+0x27c>)
 800ffc6:	f043 0308 	orr.w	r3, r3, #8
 800ffca:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 800ffce:	4b7c      	ldr	r3, [pc, #496]	@ (80101c0 <QSPI_MspInit+0x27c>)
 800ffd0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800ffd4:	f003 0308 	and.w	r3, r3, #8
 800ffd8:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800ffda:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
  QSPI_BK1_D1_GPIO_CLK_ENABLE();
 800ffdc:	4b78      	ldr	r3, [pc, #480]	@ (80101c0 <QSPI_MspInit+0x27c>)
 800ffde:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800ffe2:	4a77      	ldr	r2, [pc, #476]	@ (80101c0 <QSPI_MspInit+0x27c>)
 800ffe4:	f043 0320 	orr.w	r3, r3, #32
 800ffe8:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 800ffec:	4b74      	ldr	r3, [pc, #464]	@ (80101c0 <QSPI_MspInit+0x27c>)
 800ffee:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800fff2:	f003 0320 	and.w	r3, r3, #32
 800fff6:	62bb      	str	r3, [r7, #40]	@ 0x28
 800fff8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
  QSPI_BK1_D2_GPIO_CLK_ENABLE();
 800fffa:	4b71      	ldr	r3, [pc, #452]	@ (80101c0 <QSPI_MspInit+0x27c>)
 800fffc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8010000:	4a6f      	ldr	r2, [pc, #444]	@ (80101c0 <QSPI_MspInit+0x27c>)
 8010002:	f043 0320 	orr.w	r3, r3, #32
 8010006:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 801000a:	4b6d      	ldr	r3, [pc, #436]	@ (80101c0 <QSPI_MspInit+0x27c>)
 801000c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8010010:	f003 0320 	and.w	r3, r3, #32
 8010014:	627b      	str	r3, [r7, #36]	@ 0x24
 8010016:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
  QSPI_BK1_D3_GPIO_CLK_ENABLE();
 8010018:	4b69      	ldr	r3, [pc, #420]	@ (80101c0 <QSPI_MspInit+0x27c>)
 801001a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 801001e:	4a68      	ldr	r2, [pc, #416]	@ (80101c0 <QSPI_MspInit+0x27c>)
 8010020:	f043 0320 	orr.w	r3, r3, #32
 8010024:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8010028:	4b65      	ldr	r3, [pc, #404]	@ (80101c0 <QSPI_MspInit+0x27c>)
 801002a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 801002e:	f003 0320 	and.w	r3, r3, #32
 8010032:	623b      	str	r3, [r7, #32]
 8010034:	6a3b      	ldr	r3, [r7, #32]

  QSPI_BK2_CS_GPIO_CLK_ENABLE();
 8010036:	4b62      	ldr	r3, [pc, #392]	@ (80101c0 <QSPI_MspInit+0x27c>)
 8010038:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 801003c:	4a60      	ldr	r2, [pc, #384]	@ (80101c0 <QSPI_MspInit+0x27c>)
 801003e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8010042:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8010046:	4b5e      	ldr	r3, [pc, #376]	@ (80101c0 <QSPI_MspInit+0x27c>)
 8010048:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 801004c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8010050:	61fb      	str	r3, [r7, #28]
 8010052:	69fb      	ldr	r3, [r7, #28]
  QSPI_BK2_D0_GPIO_CLK_ENABLE();
 8010054:	4b5a      	ldr	r3, [pc, #360]	@ (80101c0 <QSPI_MspInit+0x27c>)
 8010056:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 801005a:	4a59      	ldr	r2, [pc, #356]	@ (80101c0 <QSPI_MspInit+0x27c>)
 801005c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8010060:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8010064:	4b56      	ldr	r3, [pc, #344]	@ (80101c0 <QSPI_MspInit+0x27c>)
 8010066:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 801006a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 801006e:	61bb      	str	r3, [r7, #24]
 8010070:	69bb      	ldr	r3, [r7, #24]
  QSPI_BK2_D1_GPIO_CLK_ENABLE();
 8010072:	4b53      	ldr	r3, [pc, #332]	@ (80101c0 <QSPI_MspInit+0x27c>)
 8010074:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8010078:	4a51      	ldr	r2, [pc, #324]	@ (80101c0 <QSPI_MspInit+0x27c>)
 801007a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 801007e:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8010082:	4b4f      	ldr	r3, [pc, #316]	@ (80101c0 <QSPI_MspInit+0x27c>)
 8010084:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8010088:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 801008c:	617b      	str	r3, [r7, #20]
 801008e:	697b      	ldr	r3, [r7, #20]
  QSPI_BK2_D2_GPIO_CLK_ENABLE();
 8010090:	4b4b      	ldr	r3, [pc, #300]	@ (80101c0 <QSPI_MspInit+0x27c>)
 8010092:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8010096:	4a4a      	ldr	r2, [pc, #296]	@ (80101c0 <QSPI_MspInit+0x27c>)
 8010098:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 801009c:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80100a0:	4b47      	ldr	r3, [pc, #284]	@ (80101c0 <QSPI_MspInit+0x27c>)
 80100a2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80100a6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80100aa:	613b      	str	r3, [r7, #16]
 80100ac:	693b      	ldr	r3, [r7, #16]
  QSPI_BK2_D3_GPIO_CLK_ENABLE();
 80100ae:	4b44      	ldr	r3, [pc, #272]	@ (80101c0 <QSPI_MspInit+0x27c>)
 80100b0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80100b4:	4a42      	ldr	r2, [pc, #264]	@ (80101c0 <QSPI_MspInit+0x27c>)
 80100b6:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80100ba:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80100be:	4b40      	ldr	r3, [pc, #256]	@ (80101c0 <QSPI_MspInit+0x27c>)
 80100c0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80100c4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80100c8:	60fb      	str	r3, [r7, #12]
 80100ca:	68fb      	ldr	r3, [r7, #12]

  /*##-2- Configure peripheral GPIO ##########################################*/
  /* QSPI CLK GPIO pin configuration  */
  gpio_init_structure.Pin       = QSPI_CLK_PIN;
 80100cc:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80100d0:	63fb      	str	r3, [r7, #60]	@ 0x3c
  gpio_init_structure.Mode      = GPIO_MODE_AF_PP;
 80100d2:	2302      	movs	r3, #2
 80100d4:	643b      	str	r3, [r7, #64]	@ 0x40
  gpio_init_structure.Speed     = GPIO_SPEED_FREQ_VERY_HIGH;
 80100d6:	2303      	movs	r3, #3
 80100d8:	64bb      	str	r3, [r7, #72]	@ 0x48
  gpio_init_structure.Pull      = GPIO_NOPULL;
 80100da:	2300      	movs	r3, #0
 80100dc:	647b      	str	r3, [r7, #68]	@ 0x44
  gpio_init_structure.Alternate = GPIO_AF9_QUADSPI;
 80100de:	2309      	movs	r3, #9
 80100e0:	64fb      	str	r3, [r7, #76]	@ 0x4c
  HAL_GPIO_Init(QSPI_CLK_GPIO_PORT, &gpio_init_structure);
 80100e2:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 80100e6:	4619      	mov	r1, r3
 80100e8:	4836      	ldr	r0, [pc, #216]	@ (80101c4 <QSPI_MspInit+0x280>)
 80100ea:	f001 fa15 	bl	8011518 <HAL_GPIO_Init>

  /* QSPI CS GPIO pin configuration  */
  gpio_init_structure.Pin       = QSPI_BK1_CS_PIN;
 80100ee:	2340      	movs	r3, #64	@ 0x40
 80100f0:	63fb      	str	r3, [r7, #60]	@ 0x3c
  gpio_init_structure.Pull      = GPIO_PULLUP;
 80100f2:	2301      	movs	r3, #1
 80100f4:	647b      	str	r3, [r7, #68]	@ 0x44
  gpio_init_structure.Alternate = GPIO_AF10_QUADSPI;
 80100f6:	230a      	movs	r3, #10
 80100f8:	64fb      	str	r3, [r7, #76]	@ 0x4c
  HAL_GPIO_Init(QSPI_BK1_CS_GPIO_PORT, &gpio_init_structure);
 80100fa:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 80100fe:	4619      	mov	r1, r3
 8010100:	4831      	ldr	r0, [pc, #196]	@ (80101c8 <QSPI_MspInit+0x284>)
 8010102:	f001 fa09 	bl	8011518 <HAL_GPIO_Init>

  /* QSPI D0 GPIO pin configuration  */
  gpio_init_structure.Pin       = QSPI_BK1_D0_PIN;
 8010106:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 801010a:	63fb      	str	r3, [r7, #60]	@ 0x3c
  gpio_init_structure.Pull      = GPIO_NOPULL;
 801010c:	2300      	movs	r3, #0
 801010e:	647b      	str	r3, [r7, #68]	@ 0x44
  gpio_init_structure.Alternate = GPIO_AF9_QUADSPI;
 8010110:	2309      	movs	r3, #9
 8010112:	64fb      	str	r3, [r7, #76]	@ 0x4c
  HAL_GPIO_Init(QSPI_BK1_D0_GPIO_PORT, &gpio_init_structure);
 8010114:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 8010118:	4619      	mov	r1, r3
 801011a:	482c      	ldr	r0, [pc, #176]	@ (80101cc <QSPI_MspInit+0x288>)
 801011c:	f001 f9fc 	bl	8011518 <HAL_GPIO_Init>

  gpio_init_structure.Pin       = QSPI_BK2_D0_PIN;
 8010120:	2304      	movs	r3, #4
 8010122:	63fb      	str	r3, [r7, #60]	@ 0x3c
  gpio_init_structure.Alternate = GPIO_AF9_QUADSPI;
 8010124:	2309      	movs	r3, #9
 8010126:	64fb      	str	r3, [r7, #76]	@ 0x4c
  HAL_GPIO_Init(QSPI_BK2_D0_GPIO_PORT, &gpio_init_structure);
 8010128:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 801012c:	4619      	mov	r1, r3
 801012e:	4828      	ldr	r0, [pc, #160]	@ (80101d0 <QSPI_MspInit+0x28c>)
 8010130:	f001 f9f2 	bl	8011518 <HAL_GPIO_Init>

  /* QSPI D1 GPIO pin configuration  */
  gpio_init_structure.Pin       = QSPI_BK1_D1_PIN;
 8010134:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8010138:	63fb      	str	r3, [r7, #60]	@ 0x3c
  gpio_init_structure.Alternate = GPIO_AF10_QUADSPI;
 801013a:	230a      	movs	r3, #10
 801013c:	64fb      	str	r3, [r7, #76]	@ 0x4c
  HAL_GPIO_Init(QSPI_BK1_D1_GPIO_PORT, &gpio_init_structure);
 801013e:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 8010142:	4619      	mov	r1, r3
 8010144:	481f      	ldr	r0, [pc, #124]	@ (80101c4 <QSPI_MspInit+0x280>)
 8010146:	f001 f9e7 	bl	8011518 <HAL_GPIO_Init>

  gpio_init_structure.Pin       = QSPI_BK2_D1_PIN;
 801014a:	2308      	movs	r3, #8
 801014c:	63fb      	str	r3, [r7, #60]	@ 0x3c
  gpio_init_structure.Alternate = GPIO_AF9_QUADSPI;
 801014e:	2309      	movs	r3, #9
 8010150:	64fb      	str	r3, [r7, #76]	@ 0x4c
  HAL_GPIO_Init(QSPI_BK2_D1_GPIO_PORT, &gpio_init_structure);
 8010152:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 8010156:	4619      	mov	r1, r3
 8010158:	481d      	ldr	r0, [pc, #116]	@ (80101d0 <QSPI_MspInit+0x28c>)
 801015a:	f001 f9dd 	bl	8011518 <HAL_GPIO_Init>

  /* QSPI D2 GPIO pin configuration  */
  gpio_init_structure.Pin       = QSPI_BK1_D2_PIN;
 801015e:	2380      	movs	r3, #128	@ 0x80
 8010160:	63fb      	str	r3, [r7, #60]	@ 0x3c
  gpio_init_structure.Alternate = GPIO_AF9_QUADSPI;
 8010162:	2309      	movs	r3, #9
 8010164:	64fb      	str	r3, [r7, #76]	@ 0x4c
  HAL_GPIO_Init(QSPI_BK1_D2_GPIO_PORT, &gpio_init_structure);
 8010166:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 801016a:	4619      	mov	r1, r3
 801016c:	4815      	ldr	r0, [pc, #84]	@ (80101c4 <QSPI_MspInit+0x280>)
 801016e:	f001 f9d3 	bl	8011518 <HAL_GPIO_Init>

  gpio_init_structure.Pin       = QSPI_BK2_D2_PIN;
 8010172:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8010176:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(QSPI_BK2_D2_GPIO_PORT, &gpio_init_structure);
 8010178:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 801017c:	4619      	mov	r1, r3
 801017e:	4812      	ldr	r0, [pc, #72]	@ (80101c8 <QSPI_MspInit+0x284>)
 8010180:	f001 f9ca 	bl	8011518 <HAL_GPIO_Init>

  /* QSPI D3 GPIO pin configuration  */
  gpio_init_structure.Pin       = QSPI_BK1_D3_PIN;
 8010184:	2340      	movs	r3, #64	@ 0x40
 8010186:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(QSPI_BK1_D3_GPIO_PORT, &gpio_init_structure);
 8010188:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 801018c:	4619      	mov	r1, r3
 801018e:	480d      	ldr	r0, [pc, #52]	@ (80101c4 <QSPI_MspInit+0x280>)
 8010190:	f001 f9c2 	bl	8011518 <HAL_GPIO_Init>

  gpio_init_structure.Pin       = QSPI_BK2_D3_PIN;
 8010194:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8010198:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(QSPI_BK2_D3_GPIO_PORT, &gpio_init_structure);
 801019a:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 801019e:	4619      	mov	r1, r3
 80101a0:	4809      	ldr	r0, [pc, #36]	@ (80101c8 <QSPI_MspInit+0x284>)
 80101a2:	f001 f9b9 	bl	8011518 <HAL_GPIO_Init>

  /*##-3- Configure the NVIC for QSPI #########################################*/
  /* NVIC configuration for QSPI interrupt */
  HAL_NVIC_SetPriority(QUADSPI_IRQn, 0x0F, 0);
 80101a6:	2200      	movs	r2, #0
 80101a8:	210f      	movs	r1, #15
 80101aa:	205c      	movs	r0, #92	@ 0x5c
 80101ac:	f000 fe9c 	bl	8010ee8 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(QUADSPI_IRQn);
 80101b0:	205c      	movs	r0, #92	@ 0x5c
 80101b2:	f000 feb3 	bl	8010f1c <HAL_NVIC_EnableIRQ>
}
 80101b6:	bf00      	nop
 80101b8:	3750      	adds	r7, #80	@ 0x50
 80101ba:	46bd      	mov	sp, r7
 80101bc:	bd80      	pop	{r7, pc}
 80101be:	bf00      	nop
 80101c0:	58024400 	.word	0x58024400
 80101c4:	58021400 	.word	0x58021400
 80101c8:	58021800 	.word	0x58021800
 80101cc:	58020c00 	.word	0x58020c00
 80101d0:	58021c00 	.word	0x58021c00

080101d4 <QSPI_ResetMemory>:
  *         Flash accept 1-1-1, 1-1-2, 1-2-2 commands after reset.
  * @param  Instance  QSPI instance
  * @retval BSP status
  */
static int32_t QSPI_ResetMemory(uint32_t Instance)
{
 80101d4:	b580      	push	{r7, lr}
 80101d6:	b084      	sub	sp, #16
 80101d8:	af00      	add	r7, sp, #0
 80101da:	6078      	str	r0, [r7, #4]
  int32_t ret = BSP_ERROR_NONE;
 80101dc:	2300      	movs	r3, #0
 80101de:	60fb      	str	r3, [r7, #12]

  /* Send RESET ENABLE command in QPI mode (QUAD I/Os, 4-4-4) */
  if(MT25TL01G_ResetEnable(&hqspi, MT25TL01G_QPI_MODE) != MT25TL01G_OK)
 80101e0:	2103      	movs	r1, #3
 80101e2:	4830      	ldr	r0, [pc, #192]	@ (80102a4 <QSPI_ResetMemory+0xd0>)
 80101e4:	f7fe ff30 	bl	800f048 <MT25TL01G_ResetEnable>
 80101e8:	4603      	mov	r3, r0
 80101ea:	2b00      	cmp	r3, #0
 80101ec:	d003      	beq.n	80101f6 <QSPI_ResetMemory+0x22>
  {
    ret =BSP_ERROR_COMPONENT_FAILURE;
 80101ee:	f06f 0304 	mvn.w	r3, #4
 80101f2:	60fb      	str	r3, [r7, #12]
 80101f4:	e051      	b.n	801029a <QSPI_ResetMemory+0xc6>
  }/* Send RESET memory command in QPI mode (QUAD I/Os, 4-4-4) */
  else if(MT25TL01G_ResetMemory(&hqspi, MT25TL01G_QPI_MODE) != MT25TL01G_OK)
 80101f6:	2103      	movs	r1, #3
 80101f8:	482a      	ldr	r0, [pc, #168]	@ (80102a4 <QSPI_ResetMemory+0xd0>)
 80101fa:	f7fe ff57 	bl	800f0ac <MT25TL01G_ResetMemory>
 80101fe:	4603      	mov	r3, r0
 8010200:	2b00      	cmp	r3, #0
 8010202:	d003      	beq.n	801020c <QSPI_ResetMemory+0x38>
  {
    ret = BSP_ERROR_COMPONENT_FAILURE;
 8010204:	f06f 0304 	mvn.w	r3, #4
 8010208:	60fb      	str	r3, [r7, #12]
 801020a:	e046      	b.n	801029a <QSPI_ResetMemory+0xc6>
  }/* Wait Flash ready */
  else if(MT25TL01G_AutoPollingMemReady(&hqspi, QSPI_Ctx[Instance].InterfaceMode) != MT25TL01G_OK)
 801020c:	4926      	ldr	r1, [pc, #152]	@ (80102a8 <QSPI_ResetMemory+0xd4>)
 801020e:	687a      	ldr	r2, [r7, #4]
 8010210:	4613      	mov	r3, r2
 8010212:	005b      	lsls	r3, r3, #1
 8010214:	4413      	add	r3, r2
 8010216:	009b      	lsls	r3, r3, #2
 8010218:	440b      	add	r3, r1
 801021a:	3301      	adds	r3, #1
 801021c:	781b      	ldrb	r3, [r3, #0]
 801021e:	4619      	mov	r1, r3
 8010220:	4820      	ldr	r0, [pc, #128]	@ (80102a4 <QSPI_ResetMemory+0xd0>)
 8010222:	f7fe fd54 	bl	800ecce <MT25TL01G_AutoPollingMemReady>
 8010226:	4603      	mov	r3, r0
 8010228:	2b00      	cmp	r3, #0
 801022a:	d003      	beq.n	8010234 <QSPI_ResetMemory+0x60>
  {
    ret = BSP_ERROR_COMPONENT_FAILURE;
 801022c:	f06f 0304 	mvn.w	r3, #4
 8010230:	60fb      	str	r3, [r7, #12]
 8010232:	e032      	b.n	801029a <QSPI_ResetMemory+0xc6>
  }/* Send RESET ENABLE command in SPI mode (1-1-1) */
  else if(MT25TL01G_ResetEnable(&hqspi, BSP_QSPI_SPI_MODE) != MT25TL01G_OK)
 8010234:	2100      	movs	r1, #0
 8010236:	481b      	ldr	r0, [pc, #108]	@ (80102a4 <QSPI_ResetMemory+0xd0>)
 8010238:	f7fe ff06 	bl	800f048 <MT25TL01G_ResetEnable>
 801023c:	4603      	mov	r3, r0
 801023e:	2b00      	cmp	r3, #0
 8010240:	d003      	beq.n	801024a <QSPI_ResetMemory+0x76>
  {
    ret = BSP_ERROR_COMPONENT_FAILURE;
 8010242:	f06f 0304 	mvn.w	r3, #4
 8010246:	60fb      	str	r3, [r7, #12]
 8010248:	e027      	b.n	801029a <QSPI_ResetMemory+0xc6>
  }/* Send RESET memory command in SPI mode (1-1-1) */
  else if(MT25TL01G_ResetMemory(&hqspi, BSP_QSPI_SPI_MODE) != MT25TL01G_OK)
 801024a:	2100      	movs	r1, #0
 801024c:	4815      	ldr	r0, [pc, #84]	@ (80102a4 <QSPI_ResetMemory+0xd0>)
 801024e:	f7fe ff2d 	bl	800f0ac <MT25TL01G_ResetMemory>
 8010252:	4603      	mov	r3, r0
 8010254:	2b00      	cmp	r3, #0
 8010256:	d003      	beq.n	8010260 <QSPI_ResetMemory+0x8c>
  {
    ret = BSP_ERROR_COMPONENT_FAILURE;
 8010258:	f06f 0304 	mvn.w	r3, #4
 801025c:	60fb      	str	r3, [r7, #12]
 801025e:	e01c      	b.n	801029a <QSPI_ResetMemory+0xc6>
  }
  else
  {
    QSPI_Ctx[Instance].IsInitialized = QSPI_ACCESS_INDIRECT;  /* After reset S/W setting to indirect access   */
 8010260:	4911      	ldr	r1, [pc, #68]	@ (80102a8 <QSPI_ResetMemory+0xd4>)
 8010262:	687a      	ldr	r2, [r7, #4]
 8010264:	4613      	mov	r3, r2
 8010266:	005b      	lsls	r3, r3, #1
 8010268:	4413      	add	r3, r2
 801026a:	009b      	lsls	r3, r3, #2
 801026c:	440b      	add	r3, r1
 801026e:	2201      	movs	r2, #1
 8010270:	701a      	strb	r2, [r3, #0]
    QSPI_Ctx[Instance].InterfaceMode = BSP_QSPI_SPI_MODE;     /* After reset H/W back to SPI mode by default  */
 8010272:	490d      	ldr	r1, [pc, #52]	@ (80102a8 <QSPI_ResetMemory+0xd4>)
 8010274:	687a      	ldr	r2, [r7, #4]
 8010276:	4613      	mov	r3, r2
 8010278:	005b      	lsls	r3, r3, #1
 801027a:	4413      	add	r3, r2
 801027c:	009b      	lsls	r3, r3, #2
 801027e:	440b      	add	r3, r1
 8010280:	3301      	adds	r3, #1
 8010282:	2200      	movs	r2, #0
 8010284:	701a      	strb	r2, [r3, #0]
    QSPI_Ctx[Instance].TransferRate  = BSP_QSPI_STR_TRANSFER; /* After reset S/W setting to STR mode          */
 8010286:	4908      	ldr	r1, [pc, #32]	@ (80102a8 <QSPI_ResetMemory+0xd4>)
 8010288:	687a      	ldr	r2, [r7, #4]
 801028a:	4613      	mov	r3, r2
 801028c:	005b      	lsls	r3, r3, #1
 801028e:	4413      	add	r3, r2
 8010290:	009b      	lsls	r3, r3, #2
 8010292:	440b      	add	r3, r1
 8010294:	3302      	adds	r3, #2
 8010296:	2200      	movs	r2, #0
 8010298:	701a      	strb	r2, [r3, #0]

  }

  /* Return BSP status */
  return ret;
 801029a:	68fb      	ldr	r3, [r7, #12]
}
 801029c:	4618      	mov	r0, r3
 801029e:	3710      	adds	r7, #16
 80102a0:	46bd      	mov	sp, r7
 80102a2:	bd80      	pop	{r7, pc}
 80102a4:	2400027c 	.word	0x2400027c
 80102a8:	2400b6e0 	.word	0x2400b6e0

080102ac <QSPI_DummyCyclesCfg>:
  *         Dummy cycle bit locate in Configuration Register[7:6]
  * @param  Instance  QSPI instance
  * @retval BSP status
  */
static int32_t QSPI_DummyCyclesCfg(uint32_t Instance)
{
 80102ac:	b580      	push	{r7, lr}
 80102ae:	b092      	sub	sp, #72	@ 0x48
 80102b0:	af00      	add	r7, sp, #0
 80102b2:	6078      	str	r0, [r7, #4]
    int32_t ret= BSP_ERROR_NONE;
 80102b4:	2300      	movs	r3, #0
 80102b6:	647b      	str	r3, [r7, #68]	@ 0x44
    QSPI_CommandTypeDef s_command;
  uint16_t reg=0;
 80102b8:	2300      	movs	r3, #0
 80102ba:	817b      	strh	r3, [r7, #10]

  /* Initialize the read volatile configuration register command */
  s_command.InstructionMode   = QSPI_INSTRUCTION_4_LINES;
 80102bc:	f44f 7340 	mov.w	r3, #768	@ 0x300
 80102c0:	627b      	str	r3, [r7, #36]	@ 0x24
  s_command.Instruction       = MT25TL01G_READ_VOL_CFG_REG_CMD;
 80102c2:	2385      	movs	r3, #133	@ 0x85
 80102c4:	60fb      	str	r3, [r7, #12]
  s_command.AddressMode       = QSPI_ADDRESS_NONE;
 80102c6:	2300      	movs	r3, #0
 80102c8:	62bb      	str	r3, [r7, #40]	@ 0x28
  s_command.AlternateByteMode = QSPI_ALTERNATE_BYTES_NONE;
 80102ca:	2300      	movs	r3, #0
 80102cc:	62fb      	str	r3, [r7, #44]	@ 0x2c
  s_command.DataMode          = QSPI_DATA_4_LINES;
 80102ce:	f04f 7340 	mov.w	r3, #50331648	@ 0x3000000
 80102d2:	633b      	str	r3, [r7, #48]	@ 0x30
  s_command.DummyCycles       = 0;
 80102d4:	2300      	movs	r3, #0
 80102d6:	623b      	str	r3, [r7, #32]
  s_command.NbData            = 2;
 80102d8:	2302      	movs	r3, #2
 80102da:	637b      	str	r3, [r7, #52]	@ 0x34
  s_command.DdrMode           = QSPI_DDR_MODE_DISABLE;
 80102dc:	2300      	movs	r3, #0
 80102de:	63bb      	str	r3, [r7, #56]	@ 0x38
  s_command.DdrHoldHalfCycle  = QSPI_DDR_HHC_ANALOG_DELAY;
 80102e0:	2300      	movs	r3, #0
 80102e2:	63fb      	str	r3, [r7, #60]	@ 0x3c
  s_command.SIOOMode          = QSPI_SIOO_INST_EVERY_CMD;
 80102e4:	2300      	movs	r3, #0
 80102e6:	643b      	str	r3, [r7, #64]	@ 0x40

  /* Configure the command */
  if (HAL_QSPI_Command(&hqspi, &s_command, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 80102e8:	f107 030c 	add.w	r3, r7, #12
 80102ec:	f241 3288 	movw	r2, #5000	@ 0x1388
 80102f0:	4619      	mov	r1, r3
 80102f2:	482b      	ldr	r0, [pc, #172]	@ (80103a0 <QSPI_DummyCyclesCfg+0xf4>)
 80102f4:	f003 fa1a 	bl	801372c <HAL_QSPI_Command>
 80102f8:	4603      	mov	r3, r0
 80102fa:	2b00      	cmp	r3, #0
 80102fc:	d002      	beq.n	8010304 <QSPI_DummyCyclesCfg+0x58>
  {
    return BSP_ERROR_COMPONENT_FAILURE;
 80102fe:	f06f 0304 	mvn.w	r3, #4
 8010302:	e048      	b.n	8010396 <QSPI_DummyCyclesCfg+0xea>
  }

  /* Reception of the data */
  if (HAL_QSPI_Receive(&hqspi, (uint8_t *)(&reg), HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8010304:	f107 030a 	add.w	r3, r7, #10
 8010308:	f241 3288 	movw	r2, #5000	@ 0x1388
 801030c:	4619      	mov	r1, r3
 801030e:	4824      	ldr	r0, [pc, #144]	@ (80103a0 <QSPI_DummyCyclesCfg+0xf4>)
 8010310:	f003 fafc 	bl	801390c <HAL_QSPI_Receive>
 8010314:	4603      	mov	r3, r0
 8010316:	2b00      	cmp	r3, #0
 8010318:	d002      	beq.n	8010320 <QSPI_DummyCyclesCfg+0x74>
  {
    return BSP_ERROR_COMPONENT_FAILURE;
 801031a:	f06f 0304 	mvn.w	r3, #4
 801031e:	e03a      	b.n	8010396 <QSPI_DummyCyclesCfg+0xea>
  }

  /* Enable write operations */
  if (MT25TL01G_WriteEnable(&hqspi, QSPI_Ctx[Instance].InterfaceMode) != MT25TL01G_OK)
 8010320:	4920      	ldr	r1, [pc, #128]	@ (80103a4 <QSPI_DummyCyclesCfg+0xf8>)
 8010322:	687a      	ldr	r2, [r7, #4]
 8010324:	4613      	mov	r3, r2
 8010326:	005b      	lsls	r3, r3, #1
 8010328:	4413      	add	r3, r2
 801032a:	009b      	lsls	r3, r3, #2
 801032c:	440b      	add	r3, r1
 801032e:	3301      	adds	r3, #1
 8010330:	781b      	ldrb	r3, [r3, #0]
 8010332:	4619      	mov	r1, r3
 8010334:	481a      	ldr	r0, [pc, #104]	@ (80103a0 <QSPI_DummyCyclesCfg+0xf4>)
 8010336:	f7fe fd06 	bl	800ed46 <MT25TL01G_WriteEnable>
 801033a:	4603      	mov	r3, r0
 801033c:	2b00      	cmp	r3, #0
 801033e:	d002      	beq.n	8010346 <QSPI_DummyCyclesCfg+0x9a>
  {
    return BSP_ERROR_COMPONENT_FAILURE;
 8010340:	f06f 0304 	mvn.w	r3, #4
 8010344:	e027      	b.n	8010396 <QSPI_DummyCyclesCfg+0xea>
  }

  /* Update volatile configuration register (with new dummy cycles) */
  s_command.Instruction = MT25TL01G_WRITE_VOL_CFG_REG_CMD;
 8010346:	2381      	movs	r3, #129	@ 0x81
 8010348:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(reg, 0xF0F0, ((MT25TL01G_DUMMY_CYCLES_READ_QUAD << 4) |
 801034a:	897a      	ldrh	r2, [r7, #10]
 801034c:	f640 730f 	movw	r3, #3855	@ 0xf0f
 8010350:	4013      	ands	r3, r2
 8010352:	b29a      	uxth	r2, r3
 8010354:	4b14      	ldr	r3, [pc, #80]	@ (80103a8 <QSPI_DummyCyclesCfg+0xfc>)
 8010356:	4313      	orrs	r3, r2
 8010358:	b29b      	uxth	r3, r3
 801035a:	817b      	strh	r3, [r7, #10]
                               (MT25TL01G_DUMMY_CYCLES_READ_QUAD << 12)));

  /* Configure the write volatile configuration register command */
  if (HAL_QSPI_Command(&hqspi, &s_command, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 801035c:	f107 030c 	add.w	r3, r7, #12
 8010360:	f241 3288 	movw	r2, #5000	@ 0x1388
 8010364:	4619      	mov	r1, r3
 8010366:	480e      	ldr	r0, [pc, #56]	@ (80103a0 <QSPI_DummyCyclesCfg+0xf4>)
 8010368:	f003 f9e0 	bl	801372c <HAL_QSPI_Command>
 801036c:	4603      	mov	r3, r0
 801036e:	2b00      	cmp	r3, #0
 8010370:	d002      	beq.n	8010378 <QSPI_DummyCyclesCfg+0xcc>
  {
    return BSP_ERROR_COMPONENT_FAILURE;
 8010372:	f06f 0304 	mvn.w	r3, #4
 8010376:	e00e      	b.n	8010396 <QSPI_DummyCyclesCfg+0xea>
  }

  /* Transmission of the data */
  if (HAL_QSPI_Transmit(&hqspi, (uint8_t *)(&reg), HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8010378:	f107 030a 	add.w	r3, r7, #10
 801037c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8010380:	4619      	mov	r1, r3
 8010382:	4807      	ldr	r0, [pc, #28]	@ (80103a0 <QSPI_DummyCyclesCfg+0xf4>)
 8010384:	f003 fa30 	bl	80137e8 <HAL_QSPI_Transmit>
 8010388:	4603      	mov	r3, r0
 801038a:	2b00      	cmp	r3, #0
 801038c:	d002      	beq.n	8010394 <QSPI_DummyCyclesCfg+0xe8>
  {
    return BSP_ERROR_COMPONENT_FAILURE;
 801038e:	f06f 0304 	mvn.w	r3, #4
 8010392:	e000      	b.n	8010396 <QSPI_DummyCyclesCfg+0xea>
  }

  /* Return BSP status */
  return ret;
 8010394:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
}
 8010396:	4618      	mov	r0, r3
 8010398:	3748      	adds	r7, #72	@ 0x48
 801039a:	46bd      	mov	sp, r7
 801039c:	bd80      	pop	{r7, pc}
 801039e:	bf00      	nop
 80103a0:	2400027c 	.word	0x2400027c
 80103a4:	2400b6e0 	.word	0x2400b6e0
 80103a8:	ffff8080 	.word	0xffff8080

080103ac <BSP_SDRAM_Init>:
  * @brief  Initializes the SDRAM device.
  * @param Instance  SDRAM Instance
  * @retval BSP status
  */
int32_t BSP_SDRAM_Init(uint32_t Instance)
{
 80103ac:	b580      	push	{r7, lr}
 80103ae:	b084      	sub	sp, #16
 80103b0:	af00      	add	r7, sp, #0
 80103b2:	6078      	str	r0, [r7, #4]
  int32_t ret = BSP_ERROR_NONE;
 80103b4:	2300      	movs	r3, #0
 80103b6:	60fb      	str	r3, [r7, #12]
  static MT48LC4M32B2_Context_t pRegMode;
  if(Instance >=SDRAM_INSTANCES_NBR)
 80103b8:	687b      	ldr	r3, [r7, #4]
 80103ba:	2b00      	cmp	r3, #0
 80103bc:	d003      	beq.n	80103c6 <BSP_SDRAM_Init+0x1a>
  {
    ret =  BSP_ERROR_WRONG_PARAM;
 80103be:	f06f 0301 	mvn.w	r3, #1
 80103c2:	60fb      	str	r3, [r7, #12]
 80103c4:	e044      	b.n	8010450 <BSP_SDRAM_Init+0xa4>
        return BSP_ERROR_PERIPH_FAILURE;
      }
    }
#else
    /* Msp SDRAM initialization */
    SDRAM_MspInit(&hsdram[Instance]);
 80103c6:	687b      	ldr	r3, [r7, #4]
 80103c8:	2234      	movs	r2, #52	@ 0x34
 80103ca:	fb02 f303 	mul.w	r3, r2, r3
 80103ce:	4a23      	ldr	r2, [pc, #140]	@ (801045c <BSP_SDRAM_Init+0xb0>)
 80103d0:	4413      	add	r3, r2
 80103d2:	4618      	mov	r0, r3
 80103d4:	f000 f8b8 	bl	8010548 <SDRAM_MspInit>
#endif /* USE_HAL_SDRAM_REGISTER_CALLBACKS */
    if(MX_SDRAM_BANK2_Init(&hsdram[Instance],FMC_SDRAM_ROW_BITS_NUM_12, FMC_SDRAM_MEM_BUS_WIDTH_16) != HAL_OK)
 80103d8:	687b      	ldr	r3, [r7, #4]
 80103da:	2234      	movs	r2, #52	@ 0x34
 80103dc:	fb02 f303 	mul.w	r3, r2, r3
 80103e0:	4a1e      	ldr	r2, [pc, #120]	@ (801045c <BSP_SDRAM_Init+0xb0>)
 80103e2:	4413      	add	r3, r2
 80103e4:	2210      	movs	r2, #16
 80103e6:	2104      	movs	r1, #4
 80103e8:	4618      	mov	r0, r3
 80103ea:	f000 f861 	bl	80104b0 <MX_SDRAM_BANK2_Init>
 80103ee:	4603      	mov	r3, r0
 80103f0:	2b00      	cmp	r3, #0
 80103f2:	d003      	beq.n	80103fc <BSP_SDRAM_Init+0x50>
    {
      ret = BSP_ERROR_NO_INIT;
 80103f4:	f04f 33ff 	mov.w	r3, #4294967295
 80103f8:	60fb      	str	r3, [r7, #12]
 80103fa:	e029      	b.n	8010450 <BSP_SDRAM_Init+0xa4>
    }
    else
    {
      /* External memory mode register configuration */
      pRegMode.TargetBank      = FMC_SDRAM_CMD_TARGET_BANK2;
 80103fc:	4b18      	ldr	r3, [pc, #96]	@ (8010460 <BSP_SDRAM_Init+0xb4>)
 80103fe:	2208      	movs	r2, #8
 8010400:	601a      	str	r2, [r3, #0]
      pRegMode.RefreshMode     = MT48LC4M32B2_AUTOREFRESH_MODE_CMD;
 8010402:	4b17      	ldr	r3, [pc, #92]	@ (8010460 <BSP_SDRAM_Init+0xb4>)
 8010404:	2203      	movs	r2, #3
 8010406:	605a      	str	r2, [r3, #4]
      pRegMode.RefreshRate     = REFRESH_COUNT;
 8010408:	4b15      	ldr	r3, [pc, #84]	@ (8010460 <BSP_SDRAM_Init+0xb4>)
 801040a:	f240 6203 	movw	r2, #1539	@ 0x603
 801040e:	609a      	str	r2, [r3, #8]
      pRegMode.BurstLength     = MT48LC4M32B2_BURST_LENGTH_1;
 8010410:	4b13      	ldr	r3, [pc, #76]	@ (8010460 <BSP_SDRAM_Init+0xb4>)
 8010412:	2200      	movs	r2, #0
 8010414:	60da      	str	r2, [r3, #12]
      pRegMode.BurstType       = MT48LC4M32B2_BURST_TYPE_SEQUENTIAL;
 8010416:	4b12      	ldr	r3, [pc, #72]	@ (8010460 <BSP_SDRAM_Init+0xb4>)
 8010418:	2200      	movs	r2, #0
 801041a:	611a      	str	r2, [r3, #16]
      pRegMode.CASLatency      = MT48LC4M32B2_CAS_LATENCY_3;
 801041c:	4b10      	ldr	r3, [pc, #64]	@ (8010460 <BSP_SDRAM_Init+0xb4>)
 801041e:	2230      	movs	r2, #48	@ 0x30
 8010420:	615a      	str	r2, [r3, #20]
      pRegMode.OperationMode   = MT48LC4M32B2_OPERATING_MODE_STANDARD;
 8010422:	4b0f      	ldr	r3, [pc, #60]	@ (8010460 <BSP_SDRAM_Init+0xb4>)
 8010424:	2200      	movs	r2, #0
 8010426:	619a      	str	r2, [r3, #24]
      pRegMode.WriteBurstMode  = MT48LC4M32B2_WRITEBURST_MODE_SINGLE;
 8010428:	4b0d      	ldr	r3, [pc, #52]	@ (8010460 <BSP_SDRAM_Init+0xb4>)
 801042a:	f44f 7200 	mov.w	r2, #512	@ 0x200
 801042e:	61da      	str	r2, [r3, #28]

      /* SDRAM initialization sequence */
      if(MT48LC4M32B2_Init(&hsdram[Instance], &pRegMode) != MT48LC4M32B2_OK)
 8010430:	687b      	ldr	r3, [r7, #4]
 8010432:	2234      	movs	r2, #52	@ 0x34
 8010434:	fb02 f303 	mul.w	r3, r2, r3
 8010438:	4a08      	ldr	r2, [pc, #32]	@ (801045c <BSP_SDRAM_Init+0xb0>)
 801043a:	4413      	add	r3, r2
 801043c:	4908      	ldr	r1, [pc, #32]	@ (8010460 <BSP_SDRAM_Init+0xb4>)
 801043e:	4618      	mov	r0, r3
 8010440:	f7fe fe66 	bl	800f110 <MT48LC4M32B2_Init>
 8010444:	4603      	mov	r3, r0
 8010446:	2b00      	cmp	r3, #0
 8010448:	d002      	beq.n	8010450 <BSP_SDRAM_Init+0xa4>
      {
        ret =  BSP_ERROR_COMPONENT_FAILURE;
 801044a:	f06f 0304 	mvn.w	r3, #4
 801044e:	60fb      	str	r3, [r7, #12]
      }
    }
  }

  return ret;
 8010450:	68fb      	ldr	r3, [r7, #12]
}
 8010452:	4618      	mov	r0, r3
 8010454:	3710      	adds	r7, #16
 8010456:	46bd      	mov	sp, r7
 8010458:	bd80      	pop	{r7, pc}
 801045a:	bf00      	nop
 801045c:	2400b6ec 	.word	0x2400b6ec
 8010460:	2400b720 	.word	0x2400b720

08010464 <BSP_SDRAM_DeInit>:
  * @brief  DeInitializes the SDRAM device.
  * @param  Instance  SDRAM Instance
  * @retval BSP status
  */
int32_t BSP_SDRAM_DeInit(uint32_t Instance)
{
 8010464:	b580      	push	{r7, lr}
 8010466:	b084      	sub	sp, #16
 8010468:	af00      	add	r7, sp, #0
 801046a:	6078      	str	r0, [r7, #4]
  int32_t ret = BSP_ERROR_NONE;
 801046c:	2300      	movs	r3, #0
 801046e:	60fb      	str	r3, [r7, #12]

  if(Instance >= SDRAM_INSTANCES_NBR)
 8010470:	687b      	ldr	r3, [r7, #4]
 8010472:	2b00      	cmp	r3, #0
 8010474:	d003      	beq.n	801047e <BSP_SDRAM_DeInit+0x1a>
  {
    ret =  BSP_ERROR_WRONG_PARAM;
 8010476:	f06f 0301 	mvn.w	r3, #1
 801047a:	60fb      	str	r3, [r7, #12]
 801047c:	e011      	b.n	80104a2 <BSP_SDRAM_DeInit+0x3e>
  }
  else
  {
    (void)HAL_SDRAM_DeInit(&hsdram[Instance]);
 801047e:	687b      	ldr	r3, [r7, #4]
 8010480:	2234      	movs	r2, #52	@ 0x34
 8010482:	fb02 f303 	mul.w	r3, r2, r3
 8010486:	4a09      	ldr	r2, [pc, #36]	@ (80104ac <BSP_SDRAM_DeInit+0x48>)
 8010488:	4413      	add	r3, r2
 801048a:	4618      	mov	r0, r3
 801048c:	f006 fa3e 	bl	801690c <HAL_SDRAM_DeInit>
#if (USE_HAL_SDRAM_REGISTER_CALLBACKS == 0)
    /* SDRAM controller de-initialization */
    SDRAM_MspDeInit(&hsdram[Instance]);
 8010490:	687b      	ldr	r3, [r7, #4]
 8010492:	2234      	movs	r2, #52	@ 0x34
 8010494:	fb02 f303 	mul.w	r3, r2, r3
 8010498:	4a04      	ldr	r2, [pc, #16]	@ (80104ac <BSP_SDRAM_DeInit+0x48>)
 801049a:	4413      	add	r3, r2
 801049c:	4618      	mov	r0, r3
 801049e:	f000 f951 	bl	8010744 <SDRAM_MspDeInit>
#endif /* (USE_HAL_SDRAM_REGISTER_CALLBACKS == 0) */
  }

  return ret;
 80104a2:	68fb      	ldr	r3, [r7, #12]
}
 80104a4:	4618      	mov	r0, r3
 80104a6:	3710      	adds	r7, #16
 80104a8:	46bd      	mov	sp, r7
 80104aa:	bd80      	pop	{r7, pc}
 80104ac:	2400b6ec 	.word	0x2400b6ec

080104b0 <MX_SDRAM_BANK2_Init>:
  * @param  RowBitsNumber Number of row to set
  * @param  MemoryDataWidth The momory width 16 or 32bits
  * @retval HAL status
  */
__weak HAL_StatusTypeDef MX_SDRAM_BANK2_Init(SDRAM_HandleTypeDef *hSdram, uint32_t RowBitsNumber, uint32_t MemoryDataWidth)
{
 80104b0:	b580      	push	{r7, lr}
 80104b2:	b08c      	sub	sp, #48	@ 0x30
 80104b4:	af00      	add	r7, sp, #0
 80104b6:	60f8      	str	r0, [r7, #12]
 80104b8:	60b9      	str	r1, [r7, #8]
 80104ba:	607a      	str	r2, [r7, #4]
  FMC_SDRAM_TimingTypeDef sdram_timing;

  /* SDRAM device configuration */
  hsdram->Instance = FMC_SDRAM_DEVICE;
 80104bc:	4b20      	ldr	r3, [pc, #128]	@ (8010540 <MX_SDRAM_BANK2_Init+0x90>)
 80104be:	4a21      	ldr	r2, [pc, #132]	@ (8010544 <MX_SDRAM_BANK2_Init+0x94>)
 80104c0:	601a      	str	r2, [r3, #0]

  /* SDRAM handle configuration */
  hSdram->Init.SDBank             = FMC_SDRAM_BANK2;
 80104c2:	68fb      	ldr	r3, [r7, #12]
 80104c4:	2201      	movs	r2, #1
 80104c6:	605a      	str	r2, [r3, #4]
  hSdram->Init.ColumnBitsNumber   = FMC_SDRAM_COLUMN_BITS_NUM_8;
 80104c8:	68fb      	ldr	r3, [r7, #12]
 80104ca:	2200      	movs	r2, #0
 80104cc:	609a      	str	r2, [r3, #8]
  hSdram->Init.RowBitsNumber      = RowBitsNumber;
 80104ce:	68fb      	ldr	r3, [r7, #12]
 80104d0:	68ba      	ldr	r2, [r7, #8]
 80104d2:	60da      	str	r2, [r3, #12]
  hSdram->Init.MemoryDataWidth    = MemoryDataWidth;
 80104d4:	68fb      	ldr	r3, [r7, #12]
 80104d6:	687a      	ldr	r2, [r7, #4]
 80104d8:	611a      	str	r2, [r3, #16]
  hsdram->Init.InternalBankNumber = FMC_SDRAM_INTERN_BANKS_NUM_4;
 80104da:	4b19      	ldr	r3, [pc, #100]	@ (8010540 <MX_SDRAM_BANK2_Init+0x90>)
 80104dc:	2240      	movs	r2, #64	@ 0x40
 80104de:	615a      	str	r2, [r3, #20]
  hSdram->Init.CASLatency         = FMC_SDRAM_CAS_LATENCY_3;
 80104e0:	68fb      	ldr	r3, [r7, #12]
 80104e2:	f44f 72c0 	mov.w	r2, #384	@ 0x180
 80104e6:	619a      	str	r2, [r3, #24]
  hSdram->Init.WriteProtection    = FMC_SDRAM_WRITE_PROTECTION_DISABLE;
 80104e8:	68fb      	ldr	r3, [r7, #12]
 80104ea:	2200      	movs	r2, #0
 80104ec:	61da      	str	r2, [r3, #28]
  hSdram->Init.SDClockPeriod      = FMC_SDRAM_CLOCK_PERIOD_2;
 80104ee:	68fb      	ldr	r3, [r7, #12]
 80104f0:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 80104f4:	621a      	str	r2, [r3, #32]
  hSdram->Init.ReadBurst          = FMC_SDRAM_RBURST_ENABLE;
 80104f6:	68fb      	ldr	r3, [r7, #12]
 80104f8:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 80104fc:	625a      	str	r2, [r3, #36]	@ 0x24
  hSdram->Init.ReadPipeDelay      = FMC_SDRAM_RPIPE_DELAY_0;
 80104fe:	68fb      	ldr	r3, [r7, #12]
 8010500:	2200      	movs	r2, #0
 8010502:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Timing configuration for as SDRAM */
  sdram_timing.LoadToActiveDelay    = 2;
 8010504:	2302      	movs	r3, #2
 8010506:	617b      	str	r3, [r7, #20]
  sdram_timing.ExitSelfRefreshDelay = 7;
 8010508:	2307      	movs	r3, #7
 801050a:	61bb      	str	r3, [r7, #24]
  sdram_timing.SelfRefreshTime      = 4;
 801050c:	2304      	movs	r3, #4
 801050e:	61fb      	str	r3, [r7, #28]
  sdram_timing.RowCycleDelay        = 7;
 8010510:	2307      	movs	r3, #7
 8010512:	623b      	str	r3, [r7, #32]
  sdram_timing.WriteRecoveryTime    = 2;
 8010514:	2302      	movs	r3, #2
 8010516:	627b      	str	r3, [r7, #36]	@ 0x24
  sdram_timing.RPDelay              = 2;
 8010518:	2302      	movs	r3, #2
 801051a:	62bb      	str	r3, [r7, #40]	@ 0x28
  sdram_timing.RCDDelay             = 2;
 801051c:	2302      	movs	r3, #2
 801051e:	62fb      	str	r3, [r7, #44]	@ 0x2c

  /* SDRAM controller initialization */
  if(HAL_SDRAM_Init(hSdram, &sdram_timing) != HAL_OK)
 8010520:	f107 0314 	add.w	r3, r7, #20
 8010524:	4619      	mov	r1, r3
 8010526:	68f8      	ldr	r0, [r7, #12]
 8010528:	f006 f9b4 	bl	8016894 <HAL_SDRAM_Init>
 801052c:	4603      	mov	r3, r0
 801052e:	2b00      	cmp	r3, #0
 8010530:	d001      	beq.n	8010536 <MX_SDRAM_BANK2_Init+0x86>
  {
    return  HAL_ERROR;
 8010532:	2301      	movs	r3, #1
 8010534:	e000      	b.n	8010538 <MX_SDRAM_BANK2_Init+0x88>
  }
  return HAL_OK;
 8010536:	2300      	movs	r3, #0
}
 8010538:	4618      	mov	r0, r3
 801053a:	3730      	adds	r7, #48	@ 0x30
 801053c:	46bd      	mov	sp, r7
 801053e:	bd80      	pop	{r7, pc}
 8010540:	2400b6ec 	.word	0x2400b6ec
 8010544:	52004140 	.word	0x52004140

08010548 <SDRAM_MspInit>:
  * @brief  Initializes SDRAM MSP.
  * @param  hSdram SDRAM handle
  * @retval None
  */
static void SDRAM_MspInit(SDRAM_HandleTypeDef  *hSdram)
{
 8010548:	b580      	push	{r7, lr}
 801054a:	b08e      	sub	sp, #56	@ 0x38
 801054c:	af00      	add	r7, sp, #0
 801054e:	6078      	str	r0, [r7, #4]
  static MDMA_HandleTypeDef mdma_handle;
  GPIO_InitTypeDef gpio_init_structure;

  /* Enable FMC clock */
  __HAL_RCC_FMC_CLK_ENABLE();
 8010550:	4b73      	ldr	r3, [pc, #460]	@ (8010720 <SDRAM_MspInit+0x1d8>)
 8010552:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 8010556:	4a72      	ldr	r2, [pc, #456]	@ (8010720 <SDRAM_MspInit+0x1d8>)
 8010558:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 801055c:	f8c2 30d4 	str.w	r3, [r2, #212]	@ 0xd4
 8010560:	4b6f      	ldr	r3, [pc, #444]	@ (8010720 <SDRAM_MspInit+0x1d8>)
 8010562:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 8010566:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 801056a:	623b      	str	r3, [r7, #32]
 801056c:	6a3b      	ldr	r3, [r7, #32]

  /* Enable chosen MDMAx clock */
  SDRAM_MDMAx_CLK_ENABLE();
 801056e:	4b6c      	ldr	r3, [pc, #432]	@ (8010720 <SDRAM_MspInit+0x1d8>)
 8010570:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 8010574:	4a6a      	ldr	r2, [pc, #424]	@ (8010720 <SDRAM_MspInit+0x1d8>)
 8010576:	f043 0301 	orr.w	r3, r3, #1
 801057a:	f8c2 30d4 	str.w	r3, [r2, #212]	@ 0xd4
 801057e:	4b68      	ldr	r3, [pc, #416]	@ (8010720 <SDRAM_MspInit+0x1d8>)
 8010580:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 8010584:	f003 0301 	and.w	r3, r3, #1
 8010588:	61fb      	str	r3, [r7, #28]
 801058a:	69fb      	ldr	r3, [r7, #28]

  /* Enable GPIOs clock */
  __HAL_RCC_GPIOD_CLK_ENABLE();
 801058c:	4b64      	ldr	r3, [pc, #400]	@ (8010720 <SDRAM_MspInit+0x1d8>)
 801058e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8010592:	4a63      	ldr	r2, [pc, #396]	@ (8010720 <SDRAM_MspInit+0x1d8>)
 8010594:	f043 0308 	orr.w	r3, r3, #8
 8010598:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 801059c:	4b60      	ldr	r3, [pc, #384]	@ (8010720 <SDRAM_MspInit+0x1d8>)
 801059e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80105a2:	f003 0308 	and.w	r3, r3, #8
 80105a6:	61bb      	str	r3, [r7, #24]
 80105a8:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80105aa:	4b5d      	ldr	r3, [pc, #372]	@ (8010720 <SDRAM_MspInit+0x1d8>)
 80105ac:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80105b0:	4a5b      	ldr	r2, [pc, #364]	@ (8010720 <SDRAM_MspInit+0x1d8>)
 80105b2:	f043 0310 	orr.w	r3, r3, #16
 80105b6:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80105ba:	4b59      	ldr	r3, [pc, #356]	@ (8010720 <SDRAM_MspInit+0x1d8>)
 80105bc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80105c0:	f003 0310 	and.w	r3, r3, #16
 80105c4:	617b      	str	r3, [r7, #20]
 80105c6:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80105c8:	4b55      	ldr	r3, [pc, #340]	@ (8010720 <SDRAM_MspInit+0x1d8>)
 80105ca:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80105ce:	4a54      	ldr	r2, [pc, #336]	@ (8010720 <SDRAM_MspInit+0x1d8>)
 80105d0:	f043 0320 	orr.w	r3, r3, #32
 80105d4:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80105d8:	4b51      	ldr	r3, [pc, #324]	@ (8010720 <SDRAM_MspInit+0x1d8>)
 80105da:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80105de:	f003 0320 	and.w	r3, r3, #32
 80105e2:	613b      	str	r3, [r7, #16]
 80105e4:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 80105e6:	4b4e      	ldr	r3, [pc, #312]	@ (8010720 <SDRAM_MspInit+0x1d8>)
 80105e8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80105ec:	4a4c      	ldr	r2, [pc, #304]	@ (8010720 <SDRAM_MspInit+0x1d8>)
 80105ee:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80105f2:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80105f6:	4b4a      	ldr	r3, [pc, #296]	@ (8010720 <SDRAM_MspInit+0x1d8>)
 80105f8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80105fc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8010600:	60fb      	str	r3, [r7, #12]
 8010602:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8010604:	4b46      	ldr	r3, [pc, #280]	@ (8010720 <SDRAM_MspInit+0x1d8>)
 8010606:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 801060a:	4a45      	ldr	r2, [pc, #276]	@ (8010720 <SDRAM_MspInit+0x1d8>)
 801060c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8010610:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8010614:	4b42      	ldr	r3, [pc, #264]	@ (8010720 <SDRAM_MspInit+0x1d8>)
 8010616:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 801061a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 801061e:	60bb      	str	r3, [r7, #8]
 8010620:	68bb      	ldr	r3, [r7, #8]

  /* Common GPIO configuration */
  gpio_init_structure.Mode      = GPIO_MODE_AF_PP;
 8010622:	2302      	movs	r3, #2
 8010624:	62bb      	str	r3, [r7, #40]	@ 0x28
  gpio_init_structure.Pull      = GPIO_PULLUP;
 8010626:	2301      	movs	r3, #1
 8010628:	62fb      	str	r3, [r7, #44]	@ 0x2c
  gpio_init_structure.Speed     = GPIO_SPEED_FREQ_VERY_HIGH;
 801062a:	2303      	movs	r3, #3
 801062c:	633b      	str	r3, [r7, #48]	@ 0x30
  gpio_init_structure.Alternate = GPIO_AF12_FMC;
 801062e:	230c      	movs	r3, #12
 8010630:	637b      	str	r3, [r7, #52]	@ 0x34

  /* GPIOD configuration */
  gpio_init_structure.Pin   = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_8| GPIO_PIN_9 | GPIO_PIN_10 |\
 8010632:	f24c 7303 	movw	r3, #50947	@ 0xc703
 8010636:	627b      	str	r3, [r7, #36]	@ 0x24
                              GPIO_PIN_14 | GPIO_PIN_15;


  HAL_GPIO_Init(GPIOD, &gpio_init_structure);
 8010638:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 801063c:	4619      	mov	r1, r3
 801063e:	4839      	ldr	r0, [pc, #228]	@ (8010724 <SDRAM_MspInit+0x1dc>)
 8010640:	f000 ff6a 	bl	8011518 <HAL_GPIO_Init>

  /* GPIOE configuration */
  gpio_init_structure.Pin   = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_7| GPIO_PIN_8 | GPIO_PIN_9 |\
 8010644:	f64f 7383 	movw	r3, #65411	@ 0xff83
 8010648:	627b      	str	r3, [r7, #36]	@ 0x24
                              GPIO_PIN_10 | GPIO_PIN_11 | GPIO_PIN_12 | GPIO_PIN_13 | GPIO_PIN_14 |\
                              GPIO_PIN_15;

  HAL_GPIO_Init(GPIOE, &gpio_init_structure);
 801064a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 801064e:	4619      	mov	r1, r3
 8010650:	4835      	ldr	r0, [pc, #212]	@ (8010728 <SDRAM_MspInit+0x1e0>)
 8010652:	f000 ff61 	bl	8011518 <HAL_GPIO_Init>

  /* GPIOF configuration */
  gpio_init_structure.Pin   = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_2| GPIO_PIN_3 | GPIO_PIN_4 |\
 8010656:	f64f 033f 	movw	r3, #63551	@ 0xf83f
 801065a:	627b      	str	r3, [r7, #36]	@ 0x24
                              GPIO_PIN_5 | GPIO_PIN_11 | GPIO_PIN_12 | GPIO_PIN_13 | GPIO_PIN_14 |\
                              GPIO_PIN_15;

  HAL_GPIO_Init(GPIOF, &gpio_init_structure);
 801065c:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8010660:	4619      	mov	r1, r3
 8010662:	4832      	ldr	r0, [pc, #200]	@ (801072c <SDRAM_MspInit+0x1e4>)
 8010664:	f000 ff58 	bl	8011518 <HAL_GPIO_Init>

  /* GPIOG configuration */
  gpio_init_structure.Pin   = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_4 | GPIO_PIN_5 | GPIO_PIN_8 | GPIO_PIN_15;
 8010668:	f248 1333 	movw	r3, #33075	@ 0x8133
 801066c:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOG, &gpio_init_structure);
 801066e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8010672:	4619      	mov	r1, r3
 8010674:	482e      	ldr	r0, [pc, #184]	@ (8010730 <SDRAM_MspInit+0x1e8>)
 8010676:	f000 ff4f 	bl	8011518 <HAL_GPIO_Init>

  /* GPIOH configuration */
  gpio_init_structure.Pin   = GPIO_PIN_5 | GPIO_PIN_6 | GPIO_PIN_7 ;
 801067a:	23e0      	movs	r3, #224	@ 0xe0
 801067c:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOH, &gpio_init_structure);
 801067e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8010682:	4619      	mov	r1, r3
 8010684:	482b      	ldr	r0, [pc, #172]	@ (8010734 <SDRAM_MspInit+0x1ec>)
 8010686:	f000 ff47 	bl	8011518 <HAL_GPIO_Init>



  /* Configure common MDMA parameters */
  mdma_handle.Init.Request = MDMA_REQUEST_SW;
 801068a:	4b2b      	ldr	r3, [pc, #172]	@ (8010738 <SDRAM_MspInit+0x1f0>)
 801068c:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8010690:	605a      	str	r2, [r3, #4]
  mdma_handle.Init.TransferTriggerMode = MDMA_BLOCK_TRANSFER;
 8010692:	4b29      	ldr	r3, [pc, #164]	@ (8010738 <SDRAM_MspInit+0x1f0>)
 8010694:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8010698:	609a      	str	r2, [r3, #8]
  mdma_handle.Init.Priority = MDMA_PRIORITY_HIGH;
 801069a:	4b27      	ldr	r3, [pc, #156]	@ (8010738 <SDRAM_MspInit+0x1f0>)
 801069c:	2280      	movs	r2, #128	@ 0x80
 801069e:	60da      	str	r2, [r3, #12]
  mdma_handle.Init.Endianness = MDMA_LITTLE_ENDIANNESS_PRESERVE;
 80106a0:	4b25      	ldr	r3, [pc, #148]	@ (8010738 <SDRAM_MspInit+0x1f0>)
 80106a2:	2200      	movs	r2, #0
 80106a4:	611a      	str	r2, [r3, #16]
  mdma_handle.Init.SourceInc = MDMA_SRC_INC_WORD;
 80106a6:	4b24      	ldr	r3, [pc, #144]	@ (8010738 <SDRAM_MspInit+0x1f0>)
 80106a8:	f240 2202 	movw	r2, #514	@ 0x202
 80106ac:	615a      	str	r2, [r3, #20]
  mdma_handle.Init.DestinationInc = MDMA_DEST_INC_WORD;
 80106ae:	4b22      	ldr	r3, [pc, #136]	@ (8010738 <SDRAM_MspInit+0x1f0>)
 80106b0:	f640 0208 	movw	r2, #2056	@ 0x808
 80106b4:	619a      	str	r2, [r3, #24]
  mdma_handle.Init.SourceDataSize = MDMA_SRC_DATASIZE_WORD;
 80106b6:	4b20      	ldr	r3, [pc, #128]	@ (8010738 <SDRAM_MspInit+0x1f0>)
 80106b8:	2220      	movs	r2, #32
 80106ba:	61da      	str	r2, [r3, #28]
  mdma_handle.Init.DestDataSize = MDMA_DEST_DATASIZE_WORD;
 80106bc:	4b1e      	ldr	r3, [pc, #120]	@ (8010738 <SDRAM_MspInit+0x1f0>)
 80106be:	2280      	movs	r2, #128	@ 0x80
 80106c0:	621a      	str	r2, [r3, #32]
  mdma_handle.Init.DataAlignment = MDMA_DATAALIGN_PACKENABLE;
 80106c2:	4b1d      	ldr	r3, [pc, #116]	@ (8010738 <SDRAM_MspInit+0x1f0>)
 80106c4:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 80106c8:	625a      	str	r2, [r3, #36]	@ 0x24
  mdma_handle.Init.SourceBurst = MDMA_SOURCE_BURST_SINGLE;
 80106ca:	4b1b      	ldr	r3, [pc, #108]	@ (8010738 <SDRAM_MspInit+0x1f0>)
 80106cc:	2200      	movs	r2, #0
 80106ce:	62da      	str	r2, [r3, #44]	@ 0x2c
  mdma_handle.Init.DestBurst = MDMA_DEST_BURST_SINGLE;
 80106d0:	4b19      	ldr	r3, [pc, #100]	@ (8010738 <SDRAM_MspInit+0x1f0>)
 80106d2:	2200      	movs	r2, #0
 80106d4:	631a      	str	r2, [r3, #48]	@ 0x30
  mdma_handle.Init.BufferTransferLength = 128;
 80106d6:	4b18      	ldr	r3, [pc, #96]	@ (8010738 <SDRAM_MspInit+0x1f0>)
 80106d8:	2280      	movs	r2, #128	@ 0x80
 80106da:	629a      	str	r2, [r3, #40]	@ 0x28
  mdma_handle.Init.SourceBlockAddressOffset = 0;
 80106dc:	4b16      	ldr	r3, [pc, #88]	@ (8010738 <SDRAM_MspInit+0x1f0>)
 80106de:	2200      	movs	r2, #0
 80106e0:	635a      	str	r2, [r3, #52]	@ 0x34
  mdma_handle.Init.DestBlockAddressOffset = 0;
 80106e2:	4b15      	ldr	r3, [pc, #84]	@ (8010738 <SDRAM_MspInit+0x1f0>)
 80106e4:	2200      	movs	r2, #0
 80106e6:	639a      	str	r2, [r3, #56]	@ 0x38


  mdma_handle.Instance = SDRAM_MDMAx_CHANNEL;
 80106e8:	4b13      	ldr	r3, [pc, #76]	@ (8010738 <SDRAM_MspInit+0x1f0>)
 80106ea:	4a14      	ldr	r2, [pc, #80]	@ (801073c <SDRAM_MspInit+0x1f4>)
 80106ec:	601a      	str	r2, [r3, #0]

   /* Associate the DMA handle */
  __HAL_LINKDMA(hsdram, hmdma, mdma_handle);
 80106ee:	4b14      	ldr	r3, [pc, #80]	@ (8010740 <SDRAM_MspInit+0x1f8>)
 80106f0:	4a11      	ldr	r2, [pc, #68]	@ (8010738 <SDRAM_MspInit+0x1f0>)
 80106f2:	631a      	str	r2, [r3, #48]	@ 0x30
 80106f4:	4b10      	ldr	r3, [pc, #64]	@ (8010738 <SDRAM_MspInit+0x1f0>)
 80106f6:	4a12      	ldr	r2, [pc, #72]	@ (8010740 <SDRAM_MspInit+0x1f8>)
 80106f8:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Deinitialize the stream for new transfer */
  HAL_MDMA_DeInit(&mdma_handle);
 80106fa:	480f      	ldr	r0, [pc, #60]	@ (8010738 <SDRAM_MspInit+0x1f0>)
 80106fc:	f002 fc76 	bl	8012fec <HAL_MDMA_DeInit>

  /* Configure the DMA stream */
  HAL_MDMA_Init(&mdma_handle);
 8010700:	480d      	ldr	r0, [pc, #52]	@ (8010738 <SDRAM_MspInit+0x1f0>)
 8010702:	f002 fc27 	bl	8012f54 <HAL_MDMA_Init>

  /* NVIC configuration for DMA transfer complete interrupt */
  HAL_NVIC_SetPriority(SDRAM_MDMAx_IRQn, 0x0F, 0);
 8010706:	2200      	movs	r2, #0
 8010708:	210f      	movs	r1, #15
 801070a:	207a      	movs	r0, #122	@ 0x7a
 801070c:	f000 fbec 	bl	8010ee8 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(SDRAM_MDMAx_IRQn);
 8010710:	207a      	movs	r0, #122	@ 0x7a
 8010712:	f000 fc03 	bl	8010f1c <HAL_NVIC_EnableIRQ>
}
 8010716:	bf00      	nop
 8010718:	3738      	adds	r7, #56	@ 0x38
 801071a:	46bd      	mov	sp, r7
 801071c:	bd80      	pop	{r7, pc}
 801071e:	bf00      	nop
 8010720:	58024400 	.word	0x58024400
 8010724:	58020c00 	.word	0x58020c00
 8010728:	58021000 	.word	0x58021000
 801072c:	58021400 	.word	0x58021400
 8010730:	58021800 	.word	0x58021800
 8010734:	58021c00 	.word	0x58021c00
 8010738:	2400b740 	.word	0x2400b740
 801073c:	52000040 	.word	0x52000040
 8010740:	2400b6ec 	.word	0x2400b6ec

08010744 <SDRAM_MspDeInit>:
  * @brief  DeInitializes SDRAM MSP.
  * @param  hSdram SDRAM handle
  * @retval None
  */
static void SDRAM_MspDeInit(SDRAM_HandleTypeDef  *hSdram)
{
 8010744:	b580      	push	{r7, lr}
 8010746:	b082      	sub	sp, #8
 8010748:	af00      	add	r7, sp, #0
 801074a:	6078      	str	r0, [r7, #4]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(hSdram);

  /* Disable NVIC configuration for DMA interrupt */
  HAL_NVIC_DisableIRQ(SDRAM_MDMAx_IRQn);
 801074c:	207a      	movs	r0, #122	@ 0x7a
 801074e:	f000 fbf3 	bl	8010f38 <HAL_NVIC_DisableIRQ>

  /* Deinitialize the stream for new transfer */
  mdma_handle.Instance = SDRAM_MDMAx_CHANNEL;
 8010752:	4b05      	ldr	r3, [pc, #20]	@ (8010768 <SDRAM_MspDeInit+0x24>)
 8010754:	4a05      	ldr	r2, [pc, #20]	@ (801076c <SDRAM_MspDeInit+0x28>)
 8010756:	601a      	str	r2, [r3, #0]
  (void)HAL_MDMA_DeInit(&mdma_handle);
 8010758:	4803      	ldr	r0, [pc, #12]	@ (8010768 <SDRAM_MspDeInit+0x24>)
 801075a:	f002 fc47 	bl	8012fec <HAL_MDMA_DeInit>
}
 801075e:	bf00      	nop
 8010760:	3708      	adds	r7, #8
 8010762:	46bd      	mov	sp, r7
 8010764:	bd80      	pop	{r7, pc}
 8010766:	bf00      	nop
 8010768:	2400b7ac 	.word	0x2400b7ac
 801076c:	52000040 	.word	0x52000040

08010770 <BSP_TS_Init>:
  * @param  Instance TS instance. Could be only 0.
  * @param  TS_Init  TS Init structure
  * @retval BSP status
  */
int32_t BSP_TS_Init(uint32_t Instance, TS_Init_t *TS_Init)
{
 8010770:	b580      	push	{r7, lr}
 8010772:	b088      	sub	sp, #32
 8010774:	af00      	add	r7, sp, #0
 8010776:	6078      	str	r0, [r7, #4]
 8010778:	6039      	str	r1, [r7, #0]
  int32_t ret = BSP_ERROR_NONE;
 801077a:	2300      	movs	r3, #0
 801077c:	61fb      	str	r3, [r7, #28]

  if((Instance >=TS_INSTANCES_NBR) || (TS_Init->Width == 0U) ||( TS_Init->Width > TS_MAX_WIDTH) ||\
 801077e:	687b      	ldr	r3, [r7, #4]
 8010780:	2b00      	cmp	r3, #0
 8010782:	d11c      	bne.n	80107be <BSP_TS_Init+0x4e>
 8010784:	683b      	ldr	r3, [r7, #0]
 8010786:	681b      	ldr	r3, [r3, #0]
 8010788:	2b00      	cmp	r3, #0
 801078a:	d018      	beq.n	80107be <BSP_TS_Init+0x4e>
 801078c:	683b      	ldr	r3, [r7, #0]
 801078e:	681b      	ldr	r3, [r3, #0]
 8010790:	f5b3 7ff0 	cmp.w	r3, #480	@ 0x1e0
 8010794:	d813      	bhi.n	80107be <BSP_TS_Init+0x4e>
                         (TS_Init->Height == 0U) ||( TS_Init->Height > TS_MAX_HEIGHT) ||\
 8010796:	683b      	ldr	r3, [r7, #0]
 8010798:	685b      	ldr	r3, [r3, #4]
  if((Instance >=TS_INSTANCES_NBR) || (TS_Init->Width == 0U) ||( TS_Init->Width > TS_MAX_WIDTH) ||\
 801079a:	2b00      	cmp	r3, #0
 801079c:	d00f      	beq.n	80107be <BSP_TS_Init+0x4e>
                         (TS_Init->Height == 0U) ||( TS_Init->Height > TS_MAX_HEIGHT) ||\
 801079e:	683b      	ldr	r3, [r7, #0]
 80107a0:	685b      	ldr	r3, [r3, #4]
 80107a2:	f5b3 7f88 	cmp.w	r3, #272	@ 0x110
 80107a6:	d80a      	bhi.n	80107be <BSP_TS_Init+0x4e>
                         (TS_Init->Accuracy > TS_MIN((TS_Init->Width), (TS_Init->Height))))
 80107a8:	683b      	ldr	r3, [r7, #0]
 80107aa:	68da      	ldr	r2, [r3, #12]
 80107ac:	683b      	ldr	r3, [r7, #0]
 80107ae:	6819      	ldr	r1, [r3, #0]
 80107b0:	683b      	ldr	r3, [r7, #0]
 80107b2:	685b      	ldr	r3, [r3, #4]
 80107b4:	428b      	cmp	r3, r1
 80107b6:	bf28      	it	cs
 80107b8:	460b      	movcs	r3, r1
                         (TS_Init->Height == 0U) ||( TS_Init->Height > TS_MAX_HEIGHT) ||\
 80107ba:	429a      	cmp	r2, r3
 80107bc:	d903      	bls.n	80107c6 <BSP_TS_Init+0x56>
  {
    ret = BSP_ERROR_WRONG_PARAM;
 80107be:	f06f 0301 	mvn.w	r3, #1
 80107c2:	61fb      	str	r3, [r7, #28]
 80107c4:	e085      	b.n	80108d2 <BSP_TS_Init+0x162>
  }
  else
  {
    if(FT5336_Probe(Instance) != BSP_ERROR_NONE)
 80107c6:	6878      	ldr	r0, [r7, #4]
 80107c8:	f000 f9e6 	bl	8010b98 <FT5336_Probe>
 80107cc:	4603      	mov	r3, r0
 80107ce:	2b00      	cmp	r3, #0
 80107d0:	d003      	beq.n	80107da <BSP_TS_Init+0x6a>
    {
      ret = BSP_ERROR_NO_INIT;
 80107d2:	f04f 33ff 	mov.w	r3, #4294967295
 80107d6:	61fb      	str	r3, [r7, #28]
 80107d8:	e07b      	b.n	80108d2 <BSP_TS_Init+0x162>
    else
    {
      TS_Capabilities_t Capabilities;
      uint32_t i;
      /* Store parameters on TS context */
      Ts_Ctx[Instance].Width             = TS_Init->Width;
 80107da:	683b      	ldr	r3, [r7, #0]
 80107dc:	6819      	ldr	r1, [r3, #0]
 80107de:	483f      	ldr	r0, [pc, #252]	@ (80108dc <BSP_TS_Init+0x16c>)
 80107e0:	687a      	ldr	r2, [r7, #4]
 80107e2:	4613      	mov	r3, r2
 80107e4:	009b      	lsls	r3, r3, #2
 80107e6:	4413      	add	r3, r2
 80107e8:	00db      	lsls	r3, r3, #3
 80107ea:	4403      	add	r3, r0
 80107ec:	6019      	str	r1, [r3, #0]
      Ts_Ctx[Instance].Height            = TS_Init->Height;
 80107ee:	683b      	ldr	r3, [r7, #0]
 80107f0:	6859      	ldr	r1, [r3, #4]
 80107f2:	483a      	ldr	r0, [pc, #232]	@ (80108dc <BSP_TS_Init+0x16c>)
 80107f4:	687a      	ldr	r2, [r7, #4]
 80107f6:	4613      	mov	r3, r2
 80107f8:	009b      	lsls	r3, r3, #2
 80107fa:	4413      	add	r3, r2
 80107fc:	00db      	lsls	r3, r3, #3
 80107fe:	4403      	add	r3, r0
 8010800:	3304      	adds	r3, #4
 8010802:	6019      	str	r1, [r3, #0]
      Ts_Ctx[Instance].Orientation       = TS_Init->Orientation;
 8010804:	683b      	ldr	r3, [r7, #0]
 8010806:	6899      	ldr	r1, [r3, #8]
 8010808:	4834      	ldr	r0, [pc, #208]	@ (80108dc <BSP_TS_Init+0x16c>)
 801080a:	687a      	ldr	r2, [r7, #4]
 801080c:	4613      	mov	r3, r2
 801080e:	009b      	lsls	r3, r3, #2
 8010810:	4413      	add	r3, r2
 8010812:	00db      	lsls	r3, r3, #3
 8010814:	4403      	add	r3, r0
 8010816:	3308      	adds	r3, #8
 8010818:	6019      	str	r1, [r3, #0]
      Ts_Ctx[Instance].Accuracy          = TS_Init->Accuracy;
 801081a:	683b      	ldr	r3, [r7, #0]
 801081c:	68d9      	ldr	r1, [r3, #12]
 801081e:	482f      	ldr	r0, [pc, #188]	@ (80108dc <BSP_TS_Init+0x16c>)
 8010820:	687a      	ldr	r2, [r7, #4]
 8010822:	4613      	mov	r3, r2
 8010824:	009b      	lsls	r3, r3, #2
 8010826:	4413      	add	r3, r2
 8010828:	00db      	lsls	r3, r3, #3
 801082a:	4403      	add	r3, r0
 801082c:	330c      	adds	r3, #12
 801082e:	6019      	str	r1, [r3, #0]
      /* Get capabilities to retrieve maximum values of X and Y */
        if (Ts_Drv->GetCapabilities(Ts_CompObj[Instance], &Capabilities) < 0)
 8010830:	4b2b      	ldr	r3, [pc, #172]	@ (80108e0 <BSP_TS_Init+0x170>)
 8010832:	681b      	ldr	r3, [r3, #0]
 8010834:	69db      	ldr	r3, [r3, #28]
 8010836:	492b      	ldr	r1, [pc, #172]	@ (80108e4 <BSP_TS_Init+0x174>)
 8010838:	687a      	ldr	r2, [r7, #4]
 801083a:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 801083e:	f107 010c 	add.w	r1, r7, #12
 8010842:	4610      	mov	r0, r2
 8010844:	4798      	blx	r3
 8010846:	4603      	mov	r3, r0
 8010848:	2b00      	cmp	r3, #0
 801084a:	da03      	bge.n	8010854 <BSP_TS_Init+0xe4>
      {
        ret = BSP_ERROR_COMPONENT_FAILURE;
 801084c:	f06f 0304 	mvn.w	r3, #4
 8010850:	61fb      	str	r3, [r7, #28]
 8010852:	e03e      	b.n	80108d2 <BSP_TS_Init+0x162>
      }
      else
      {
        /* Store maximum X and Y on context */
        Ts_Ctx[Instance].MaxX = Capabilities.MaxXl;
 8010854:	6939      	ldr	r1, [r7, #16]
 8010856:	4821      	ldr	r0, [pc, #132]	@ (80108dc <BSP_TS_Init+0x16c>)
 8010858:	687a      	ldr	r2, [r7, #4]
 801085a:	4613      	mov	r3, r2
 801085c:	009b      	lsls	r3, r3, #2
 801085e:	4413      	add	r3, r2
 8010860:	00db      	lsls	r3, r3, #3
 8010862:	4403      	add	r3, r0
 8010864:	3310      	adds	r3, #16
 8010866:	6019      	str	r1, [r3, #0]
        Ts_Ctx[Instance].MaxY = Capabilities.MaxYl;
 8010868:	6979      	ldr	r1, [r7, #20]
 801086a:	481c      	ldr	r0, [pc, #112]	@ (80108dc <BSP_TS_Init+0x16c>)
 801086c:	687a      	ldr	r2, [r7, #4]
 801086e:	4613      	mov	r3, r2
 8010870:	009b      	lsls	r3, r3, #2
 8010872:	4413      	add	r3, r2
 8010874:	00db      	lsls	r3, r3, #3
 8010876:	4403      	add	r3, r0
 8010878:	3314      	adds	r3, #20
 801087a:	6019      	str	r1, [r3, #0]
        /* Initialize previous position in order to always detect first touch */
        for(i = 0; i < TS_TOUCH_NBR; i++)
 801087c:	2300      	movs	r3, #0
 801087e:	61bb      	str	r3, [r7, #24]
 8010880:	e024      	b.n	80108cc <BSP_TS_Init+0x15c>
        {
          Ts_Ctx[Instance].PreviousX[i] = TS_Init->Width + TS_Init->Accuracy + 1U;
 8010882:	683b      	ldr	r3, [r7, #0]
 8010884:	681a      	ldr	r2, [r3, #0]
 8010886:	683b      	ldr	r3, [r7, #0]
 8010888:	68db      	ldr	r3, [r3, #12]
 801088a:	4413      	add	r3, r2
 801088c:	1c59      	adds	r1, r3, #1
 801088e:	4813      	ldr	r0, [pc, #76]	@ (80108dc <BSP_TS_Init+0x16c>)
 8010890:	687a      	ldr	r2, [r7, #4]
 8010892:	4613      	mov	r3, r2
 8010894:	009b      	lsls	r3, r3, #2
 8010896:	4413      	add	r3, r2
 8010898:	005b      	lsls	r3, r3, #1
 801089a:	69ba      	ldr	r2, [r7, #24]
 801089c:	4413      	add	r3, r2
 801089e:	3306      	adds	r3, #6
 80108a0:	f840 1023 	str.w	r1, [r0, r3, lsl #2]
          Ts_Ctx[Instance].PreviousY[i] = TS_Init->Height + TS_Init->Accuracy + 1U;
 80108a4:	683b      	ldr	r3, [r7, #0]
 80108a6:	685a      	ldr	r2, [r3, #4]
 80108a8:	683b      	ldr	r3, [r7, #0]
 80108aa:	68db      	ldr	r3, [r3, #12]
 80108ac:	4413      	add	r3, r2
 80108ae:	1c59      	adds	r1, r3, #1
 80108b0:	480a      	ldr	r0, [pc, #40]	@ (80108dc <BSP_TS_Init+0x16c>)
 80108b2:	687a      	ldr	r2, [r7, #4]
 80108b4:	4613      	mov	r3, r2
 80108b6:	009b      	lsls	r3, r3, #2
 80108b8:	4413      	add	r3, r2
 80108ba:	005b      	lsls	r3, r3, #1
 80108bc:	69ba      	ldr	r2, [r7, #24]
 80108be:	4413      	add	r3, r2
 80108c0:	3308      	adds	r3, #8
 80108c2:	f840 1023 	str.w	r1, [r0, r3, lsl #2]
        for(i = 0; i < TS_TOUCH_NBR; i++)
 80108c6:	69bb      	ldr	r3, [r7, #24]
 80108c8:	3301      	adds	r3, #1
 80108ca:	61bb      	str	r3, [r7, #24]
 80108cc:	69bb      	ldr	r3, [r7, #24]
 80108ce:	2b01      	cmp	r3, #1
 80108d0:	d9d7      	bls.n	8010882 <BSP_TS_Init+0x112>
        }
      }
    }
  }

  return ret;
 80108d2:	69fb      	ldr	r3, [r7, #28]
}
 80108d4:	4618      	mov	r0, r3
 80108d6:	3720      	adds	r7, #32
 80108d8:	46bd      	mov	sp, r7
 80108da:	bd80      	pop	{r7, pc}
 80108dc:	2400b820 	.word	0x2400b820
 80108e0:	2400b818 	.word	0x2400b818
 80108e4:	2400b81c 	.word	0x2400b81c

080108e8 <BSP_TS_GetState>:
  * @param  Instance  TS instance. Could be only 0.
  * @param  TS_State  Pointer to touch screen current state structure
  * @retval BSP status
  */
int32_t BSP_TS_GetState(uint32_t Instance, TS_State_t *TS_State)
{
 80108e8:	b580      	push	{r7, lr}
 80108ea:	b08a      	sub	sp, #40	@ 0x28
 80108ec:	af00      	add	r7, sp, #0
 80108ee:	6078      	str	r0, [r7, #4]
 80108f0:	6039      	str	r1, [r7, #0]
  int32_t ret = BSP_ERROR_NONE;
 80108f2:	2300      	movs	r3, #0
 80108f4:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t x_oriented, y_oriented;
  uint32_t x_diff, y_diff;

  if(Instance >= TS_INSTANCES_NBR)
 80108f6:	687b      	ldr	r3, [r7, #4]
 80108f8:	2b00      	cmp	r3, #0
 80108fa:	d003      	beq.n	8010904 <BSP_TS_GetState+0x1c>
  {
    ret = BSP_ERROR_WRONG_PARAM;
 80108fc:	f06f 0301 	mvn.w	r3, #1
 8010900:	627b      	str	r3, [r7, #36]	@ 0x24
 8010902:	e13e      	b.n	8010b82 <BSP_TS_GetState+0x29a>
  else
  {
    FT5336_State_t state;

    /* Get each touch coordinates */
    if(Ts_Drv->GetState(Ts_CompObj[Instance], &state) < 0)
 8010904:	4ba1      	ldr	r3, [pc, #644]	@ (8010b8c <BSP_TS_GetState+0x2a4>)
 8010906:	681b      	ldr	r3, [r3, #0]
 8010908:	691b      	ldr	r3, [r3, #16]
 801090a:	49a1      	ldr	r1, [pc, #644]	@ (8010b90 <BSP_TS_GetState+0x2a8>)
 801090c:	687a      	ldr	r2, [r7, #4]
 801090e:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 8010912:	f107 0108 	add.w	r1, r7, #8
 8010916:	4610      	mov	r0, r2
 8010918:	4798      	blx	r3
 801091a:	4603      	mov	r3, r0
 801091c:	2b00      	cmp	r3, #0
 801091e:	da03      	bge.n	8010928 <BSP_TS_GetState+0x40>
    {
      ret = BSP_ERROR_COMPONENT_FAILURE;
 8010920:	f06f 0304 	mvn.w	r3, #4
 8010924:	627b      	str	r3, [r7, #36]	@ 0x24
 8010926:	e12c      	b.n	8010b82 <BSP_TS_GetState+0x29a>
    }/* Check and update the number of touches active detected */
    else if(state.TouchDetected != 0U)
 8010928:	68bb      	ldr	r3, [r7, #8]
 801092a:	2b00      	cmp	r3, #0
 801092c:	f000 8110 	beq.w	8010b50 <BSP_TS_GetState+0x268>
    {
      x_oriented = state.TouchX;
 8010930:	68fb      	ldr	r3, [r7, #12]
 8010932:	623b      	str	r3, [r7, #32]
      y_oriented = state.TouchY;
 8010934:	693b      	ldr	r3, [r7, #16]
 8010936:	61fb      	str	r3, [r7, #28]

      if((Ts_Ctx[Instance].Orientation & TS_SWAP_XY) == TS_SWAP_XY)
 8010938:	4996      	ldr	r1, [pc, #600]	@ (8010b94 <BSP_TS_GetState+0x2ac>)
 801093a:	687a      	ldr	r2, [r7, #4]
 801093c:	4613      	mov	r3, r2
 801093e:	009b      	lsls	r3, r3, #2
 8010940:	4413      	add	r3, r2
 8010942:	00db      	lsls	r3, r3, #3
 8010944:	440b      	add	r3, r1
 8010946:	3308      	adds	r3, #8
 8010948:	681b      	ldr	r3, [r3, #0]
 801094a:	f003 0308 	and.w	r3, r3, #8
 801094e:	2b00      	cmp	r3, #0
 8010950:	d003      	beq.n	801095a <BSP_TS_GetState+0x72>
      {
        x_oriented = state.TouchY;
 8010952:	693b      	ldr	r3, [r7, #16]
 8010954:	623b      	str	r3, [r7, #32]
        y_oriented = state.TouchX;
 8010956:	68fb      	ldr	r3, [r7, #12]
 8010958:	61fb      	str	r3, [r7, #28]
      }

      if((Ts_Ctx[Instance].Orientation & TS_SWAP_X) == TS_SWAP_X)
 801095a:	498e      	ldr	r1, [pc, #568]	@ (8010b94 <BSP_TS_GetState+0x2ac>)
 801095c:	687a      	ldr	r2, [r7, #4]
 801095e:	4613      	mov	r3, r2
 8010960:	009b      	lsls	r3, r3, #2
 8010962:	4413      	add	r3, r2
 8010964:	00db      	lsls	r3, r3, #3
 8010966:	440b      	add	r3, r1
 8010968:	3308      	adds	r3, #8
 801096a:	681b      	ldr	r3, [r3, #0]
 801096c:	f003 0302 	and.w	r3, r3, #2
 8010970:	2b00      	cmp	r3, #0
 8010972:	d00c      	beq.n	801098e <BSP_TS_GetState+0xa6>
      {
        x_oriented = Ts_Ctx[Instance].MaxX - state.TouchX - 1UL;
 8010974:	4987      	ldr	r1, [pc, #540]	@ (8010b94 <BSP_TS_GetState+0x2ac>)
 8010976:	687a      	ldr	r2, [r7, #4]
 8010978:	4613      	mov	r3, r2
 801097a:	009b      	lsls	r3, r3, #2
 801097c:	4413      	add	r3, r2
 801097e:	00db      	lsls	r3, r3, #3
 8010980:	440b      	add	r3, r1
 8010982:	3310      	adds	r3, #16
 8010984:	681a      	ldr	r2, [r3, #0]
 8010986:	68fb      	ldr	r3, [r7, #12]
 8010988:	1ad3      	subs	r3, r2, r3
 801098a:	3b01      	subs	r3, #1
 801098c:	623b      	str	r3, [r7, #32]
      }

      if((Ts_Ctx[Instance].Orientation & TS_SWAP_Y) == TS_SWAP_Y)
 801098e:	4981      	ldr	r1, [pc, #516]	@ (8010b94 <BSP_TS_GetState+0x2ac>)
 8010990:	687a      	ldr	r2, [r7, #4]
 8010992:	4613      	mov	r3, r2
 8010994:	009b      	lsls	r3, r3, #2
 8010996:	4413      	add	r3, r2
 8010998:	00db      	lsls	r3, r3, #3
 801099a:	440b      	add	r3, r1
 801099c:	3308      	adds	r3, #8
 801099e:	681b      	ldr	r3, [r3, #0]
 80109a0:	f003 0304 	and.w	r3, r3, #4
 80109a4:	2b00      	cmp	r3, #0
 80109a6:	d00b      	beq.n	80109c0 <BSP_TS_GetState+0xd8>
      {
        y_oriented = Ts_Ctx[Instance].MaxY - state.TouchY;
 80109a8:	497a      	ldr	r1, [pc, #488]	@ (8010b94 <BSP_TS_GetState+0x2ac>)
 80109aa:	687a      	ldr	r2, [r7, #4]
 80109ac:	4613      	mov	r3, r2
 80109ae:	009b      	lsls	r3, r3, #2
 80109b0:	4413      	add	r3, r2
 80109b2:	00db      	lsls	r3, r3, #3
 80109b4:	440b      	add	r3, r1
 80109b6:	3314      	adds	r3, #20
 80109b8:	681a      	ldr	r2, [r3, #0]
 80109ba:	693b      	ldr	r3, [r7, #16]
 80109bc:	1ad3      	subs	r3, r2, r3
 80109be:	61fb      	str	r3, [r7, #28]
      }

      /* Apply boundary */
      TS_State->TouchX = (x_oriented * Ts_Ctx[Instance].Width) / Ts_Ctx[Instance].MaxX;
 80109c0:	4974      	ldr	r1, [pc, #464]	@ (8010b94 <BSP_TS_GetState+0x2ac>)
 80109c2:	687a      	ldr	r2, [r7, #4]
 80109c4:	4613      	mov	r3, r2
 80109c6:	009b      	lsls	r3, r3, #2
 80109c8:	4413      	add	r3, r2
 80109ca:	00db      	lsls	r3, r3, #3
 80109cc:	440b      	add	r3, r1
 80109ce:	681b      	ldr	r3, [r3, #0]
 80109d0:	6a3a      	ldr	r2, [r7, #32]
 80109d2:	fb02 f103 	mul.w	r1, r2, r3
 80109d6:	486f      	ldr	r0, [pc, #444]	@ (8010b94 <BSP_TS_GetState+0x2ac>)
 80109d8:	687a      	ldr	r2, [r7, #4]
 80109da:	4613      	mov	r3, r2
 80109dc:	009b      	lsls	r3, r3, #2
 80109de:	4413      	add	r3, r2
 80109e0:	00db      	lsls	r3, r3, #3
 80109e2:	4403      	add	r3, r0
 80109e4:	3310      	adds	r3, #16
 80109e6:	681b      	ldr	r3, [r3, #0]
 80109e8:	fbb1 f2f3 	udiv	r2, r1, r3
 80109ec:	683b      	ldr	r3, [r7, #0]
 80109ee:	605a      	str	r2, [r3, #4]
      TS_State->TouchY = (y_oriented * Ts_Ctx[Instance].Height) / Ts_Ctx[Instance].MaxY;
 80109f0:	4968      	ldr	r1, [pc, #416]	@ (8010b94 <BSP_TS_GetState+0x2ac>)
 80109f2:	687a      	ldr	r2, [r7, #4]
 80109f4:	4613      	mov	r3, r2
 80109f6:	009b      	lsls	r3, r3, #2
 80109f8:	4413      	add	r3, r2
 80109fa:	00db      	lsls	r3, r3, #3
 80109fc:	440b      	add	r3, r1
 80109fe:	3304      	adds	r3, #4
 8010a00:	681b      	ldr	r3, [r3, #0]
 8010a02:	69fa      	ldr	r2, [r7, #28]
 8010a04:	fb02 f103 	mul.w	r1, r2, r3
 8010a08:	4862      	ldr	r0, [pc, #392]	@ (8010b94 <BSP_TS_GetState+0x2ac>)
 8010a0a:	687a      	ldr	r2, [r7, #4]
 8010a0c:	4613      	mov	r3, r2
 8010a0e:	009b      	lsls	r3, r3, #2
 8010a10:	4413      	add	r3, r2
 8010a12:	00db      	lsls	r3, r3, #3
 8010a14:	4403      	add	r3, r0
 8010a16:	3314      	adds	r3, #20
 8010a18:	681b      	ldr	r3, [r3, #0]
 8010a1a:	fbb1 f2f3 	udiv	r2, r1, r3
 8010a1e:	683b      	ldr	r3, [r7, #0]
 8010a20:	609a      	str	r2, [r3, #8]
      /* Store Current TS state */
      TS_State->TouchDetected = state.TouchDetected;
 8010a22:	68ba      	ldr	r2, [r7, #8]
 8010a24:	683b      	ldr	r3, [r7, #0]
 8010a26:	601a      	str	r2, [r3, #0]

      /* Check accuracy */
      x_diff = (TS_State->TouchX > Ts_Ctx[Instance].PreviousX[0])?
 8010a28:	683b      	ldr	r3, [r7, #0]
 8010a2a:	6859      	ldr	r1, [r3, #4]
 8010a2c:	4859      	ldr	r0, [pc, #356]	@ (8010b94 <BSP_TS_GetState+0x2ac>)
 8010a2e:	687a      	ldr	r2, [r7, #4]
 8010a30:	4613      	mov	r3, r2
 8010a32:	009b      	lsls	r3, r3, #2
 8010a34:	4413      	add	r3, r2
 8010a36:	00db      	lsls	r3, r3, #3
 8010a38:	4403      	add	r3, r0
 8010a3a:	3318      	adds	r3, #24
 8010a3c:	681b      	ldr	r3, [r3, #0]
        (TS_State->TouchX - Ts_Ctx[Instance].PreviousX[0]):
 8010a3e:	4299      	cmp	r1, r3
 8010a40:	d90c      	bls.n	8010a5c <BSP_TS_GetState+0x174>
 8010a42:	683b      	ldr	r3, [r7, #0]
 8010a44:	6859      	ldr	r1, [r3, #4]
 8010a46:	4853      	ldr	r0, [pc, #332]	@ (8010b94 <BSP_TS_GetState+0x2ac>)
 8010a48:	687a      	ldr	r2, [r7, #4]
 8010a4a:	4613      	mov	r3, r2
 8010a4c:	009b      	lsls	r3, r3, #2
 8010a4e:	4413      	add	r3, r2
 8010a50:	00db      	lsls	r3, r3, #3
 8010a52:	4403      	add	r3, r0
 8010a54:	3318      	adds	r3, #24
 8010a56:	681b      	ldr	r3, [r3, #0]
 8010a58:	1acb      	subs	r3, r1, r3
 8010a5a:	e00b      	b.n	8010a74 <BSP_TS_GetState+0x18c>
        (Ts_Ctx[Instance].PreviousX[0] - TS_State->TouchX);
 8010a5c:	494d      	ldr	r1, [pc, #308]	@ (8010b94 <BSP_TS_GetState+0x2ac>)
 8010a5e:	687a      	ldr	r2, [r7, #4]
 8010a60:	4613      	mov	r3, r2
 8010a62:	009b      	lsls	r3, r3, #2
 8010a64:	4413      	add	r3, r2
 8010a66:	00db      	lsls	r3, r3, #3
 8010a68:	440b      	add	r3, r1
 8010a6a:	3318      	adds	r3, #24
 8010a6c:	681a      	ldr	r2, [r3, #0]
 8010a6e:	683b      	ldr	r3, [r7, #0]
 8010a70:	685b      	ldr	r3, [r3, #4]
        (TS_State->TouchX - Ts_Ctx[Instance].PreviousX[0]):
 8010a72:	1ad3      	subs	r3, r2, r3
      x_diff = (TS_State->TouchX > Ts_Ctx[Instance].PreviousX[0])?
 8010a74:	61bb      	str	r3, [r7, #24]

        y_diff = (TS_State->TouchY > Ts_Ctx[Instance].PreviousY[0])?
 8010a76:	683b      	ldr	r3, [r7, #0]
 8010a78:	6899      	ldr	r1, [r3, #8]
 8010a7a:	4846      	ldr	r0, [pc, #280]	@ (8010b94 <BSP_TS_GetState+0x2ac>)
 8010a7c:	687a      	ldr	r2, [r7, #4]
 8010a7e:	4613      	mov	r3, r2
 8010a80:	009b      	lsls	r3, r3, #2
 8010a82:	4413      	add	r3, r2
 8010a84:	00db      	lsls	r3, r3, #3
 8010a86:	4403      	add	r3, r0
 8010a88:	3320      	adds	r3, #32
 8010a8a:	681b      	ldr	r3, [r3, #0]
          (TS_State->TouchY - Ts_Ctx[Instance].PreviousY[0]):
 8010a8c:	4299      	cmp	r1, r3
 8010a8e:	d90c      	bls.n	8010aaa <BSP_TS_GetState+0x1c2>
 8010a90:	683b      	ldr	r3, [r7, #0]
 8010a92:	6899      	ldr	r1, [r3, #8]
 8010a94:	483f      	ldr	r0, [pc, #252]	@ (8010b94 <BSP_TS_GetState+0x2ac>)
 8010a96:	687a      	ldr	r2, [r7, #4]
 8010a98:	4613      	mov	r3, r2
 8010a9a:	009b      	lsls	r3, r3, #2
 8010a9c:	4413      	add	r3, r2
 8010a9e:	00db      	lsls	r3, r3, #3
 8010aa0:	4403      	add	r3, r0
 8010aa2:	3320      	adds	r3, #32
 8010aa4:	681b      	ldr	r3, [r3, #0]
 8010aa6:	1acb      	subs	r3, r1, r3
 8010aa8:	e00b      	b.n	8010ac2 <BSP_TS_GetState+0x1da>
          (Ts_Ctx[Instance].PreviousY[0] - TS_State->TouchY);
 8010aaa:	493a      	ldr	r1, [pc, #232]	@ (8010b94 <BSP_TS_GetState+0x2ac>)
 8010aac:	687a      	ldr	r2, [r7, #4]
 8010aae:	4613      	mov	r3, r2
 8010ab0:	009b      	lsls	r3, r3, #2
 8010ab2:	4413      	add	r3, r2
 8010ab4:	00db      	lsls	r3, r3, #3
 8010ab6:	440b      	add	r3, r1
 8010ab8:	3320      	adds	r3, #32
 8010aba:	681a      	ldr	r2, [r3, #0]
 8010abc:	683b      	ldr	r3, [r7, #0]
 8010abe:	689b      	ldr	r3, [r3, #8]
          (TS_State->TouchY - Ts_Ctx[Instance].PreviousY[0]):
 8010ac0:	1ad3      	subs	r3, r2, r3
        y_diff = (TS_State->TouchY > Ts_Ctx[Instance].PreviousY[0])?
 8010ac2:	617b      	str	r3, [r7, #20]


          if ((x_diff > Ts_Ctx[Instance].Accuracy) || (y_diff > Ts_Ctx[Instance].Accuracy))
 8010ac4:	4933      	ldr	r1, [pc, #204]	@ (8010b94 <BSP_TS_GetState+0x2ac>)
 8010ac6:	687a      	ldr	r2, [r7, #4]
 8010ac8:	4613      	mov	r3, r2
 8010aca:	009b      	lsls	r3, r3, #2
 8010acc:	4413      	add	r3, r2
 8010ace:	00db      	lsls	r3, r3, #3
 8010ad0:	440b      	add	r3, r1
 8010ad2:	330c      	adds	r3, #12
 8010ad4:	681b      	ldr	r3, [r3, #0]
 8010ad6:	69ba      	ldr	r2, [r7, #24]
 8010ad8:	429a      	cmp	r2, r3
 8010ada:	d80b      	bhi.n	8010af4 <BSP_TS_GetState+0x20c>
 8010adc:	492d      	ldr	r1, [pc, #180]	@ (8010b94 <BSP_TS_GetState+0x2ac>)
 8010ade:	687a      	ldr	r2, [r7, #4]
 8010ae0:	4613      	mov	r3, r2
 8010ae2:	009b      	lsls	r3, r3, #2
 8010ae4:	4413      	add	r3, r2
 8010ae6:	00db      	lsls	r3, r3, #3
 8010ae8:	440b      	add	r3, r1
 8010aea:	330c      	adds	r3, #12
 8010aec:	681b      	ldr	r3, [r3, #0]
 8010aee:	697a      	ldr	r2, [r7, #20]
 8010af0:	429a      	cmp	r2, r3
 8010af2:	d916      	bls.n	8010b22 <BSP_TS_GetState+0x23a>
          {
            /* New touch detected */
            Ts_Ctx[Instance].PreviousX[0] = TS_State->TouchX;
 8010af4:	683b      	ldr	r3, [r7, #0]
 8010af6:	6859      	ldr	r1, [r3, #4]
 8010af8:	4826      	ldr	r0, [pc, #152]	@ (8010b94 <BSP_TS_GetState+0x2ac>)
 8010afa:	687a      	ldr	r2, [r7, #4]
 8010afc:	4613      	mov	r3, r2
 8010afe:	009b      	lsls	r3, r3, #2
 8010b00:	4413      	add	r3, r2
 8010b02:	00db      	lsls	r3, r3, #3
 8010b04:	4403      	add	r3, r0
 8010b06:	3318      	adds	r3, #24
 8010b08:	6019      	str	r1, [r3, #0]
            Ts_Ctx[Instance].PreviousY[0] = TS_State->TouchY;
 8010b0a:	683b      	ldr	r3, [r7, #0]
 8010b0c:	6899      	ldr	r1, [r3, #8]
 8010b0e:	4821      	ldr	r0, [pc, #132]	@ (8010b94 <BSP_TS_GetState+0x2ac>)
 8010b10:	687a      	ldr	r2, [r7, #4]
 8010b12:	4613      	mov	r3, r2
 8010b14:	009b      	lsls	r3, r3, #2
 8010b16:	4413      	add	r3, r2
 8010b18:	00db      	lsls	r3, r3, #3
 8010b1a:	4403      	add	r3, r0
 8010b1c:	3320      	adds	r3, #32
 8010b1e:	6019      	str	r1, [r3, #0]
 8010b20:	e02f      	b.n	8010b82 <BSP_TS_GetState+0x29a>
          }
          else
          {
            TS_State->TouchX = Ts_Ctx[Instance].PreviousX[0];
 8010b22:	491c      	ldr	r1, [pc, #112]	@ (8010b94 <BSP_TS_GetState+0x2ac>)
 8010b24:	687a      	ldr	r2, [r7, #4]
 8010b26:	4613      	mov	r3, r2
 8010b28:	009b      	lsls	r3, r3, #2
 8010b2a:	4413      	add	r3, r2
 8010b2c:	00db      	lsls	r3, r3, #3
 8010b2e:	440b      	add	r3, r1
 8010b30:	3318      	adds	r3, #24
 8010b32:	681a      	ldr	r2, [r3, #0]
 8010b34:	683b      	ldr	r3, [r7, #0]
 8010b36:	605a      	str	r2, [r3, #4]
            TS_State->TouchY = Ts_Ctx[Instance].PreviousY[0];
 8010b38:	4916      	ldr	r1, [pc, #88]	@ (8010b94 <BSP_TS_GetState+0x2ac>)
 8010b3a:	687a      	ldr	r2, [r7, #4]
 8010b3c:	4613      	mov	r3, r2
 8010b3e:	009b      	lsls	r3, r3, #2
 8010b40:	4413      	add	r3, r2
 8010b42:	00db      	lsls	r3, r3, #3
 8010b44:	440b      	add	r3, r1
 8010b46:	3320      	adds	r3, #32
 8010b48:	681a      	ldr	r2, [r3, #0]
 8010b4a:	683b      	ldr	r3, [r7, #0]
 8010b4c:	609a      	str	r2, [r3, #8]
 8010b4e:	e018      	b.n	8010b82 <BSP_TS_GetState+0x29a>
          }
    }
    else
    {
      TS_State->TouchDetected = 0U;
 8010b50:	683b      	ldr	r3, [r7, #0]
 8010b52:	2200      	movs	r2, #0
 8010b54:	601a      	str	r2, [r3, #0]
      TS_State->TouchX = Ts_Ctx[Instance].PreviousX[0];
 8010b56:	490f      	ldr	r1, [pc, #60]	@ (8010b94 <BSP_TS_GetState+0x2ac>)
 8010b58:	687a      	ldr	r2, [r7, #4]
 8010b5a:	4613      	mov	r3, r2
 8010b5c:	009b      	lsls	r3, r3, #2
 8010b5e:	4413      	add	r3, r2
 8010b60:	00db      	lsls	r3, r3, #3
 8010b62:	440b      	add	r3, r1
 8010b64:	3318      	adds	r3, #24
 8010b66:	681a      	ldr	r2, [r3, #0]
 8010b68:	683b      	ldr	r3, [r7, #0]
 8010b6a:	605a      	str	r2, [r3, #4]
      TS_State->TouchY = Ts_Ctx[Instance].PreviousY[0];
 8010b6c:	4909      	ldr	r1, [pc, #36]	@ (8010b94 <BSP_TS_GetState+0x2ac>)
 8010b6e:	687a      	ldr	r2, [r7, #4]
 8010b70:	4613      	mov	r3, r2
 8010b72:	009b      	lsls	r3, r3, #2
 8010b74:	4413      	add	r3, r2
 8010b76:	00db      	lsls	r3, r3, #3
 8010b78:	440b      	add	r3, r1
 8010b7a:	3320      	adds	r3, #32
 8010b7c:	681a      	ldr	r2, [r3, #0]
 8010b7e:	683b      	ldr	r3, [r7, #0]
 8010b80:	609a      	str	r2, [r3, #8]
    }
}

return ret;
 8010b82:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 8010b84:	4618      	mov	r0, r3
 8010b86:	3728      	adds	r7, #40	@ 0x28
 8010b88:	46bd      	mov	sp, r7
 8010b8a:	bd80      	pop	{r7, pc}
 8010b8c:	2400b818 	.word	0x2400b818
 8010b90:	2400b81c 	.word	0x2400b81c
 8010b94:	2400b820 	.word	0x2400b820

08010b98 <FT5336_Probe>:
  * @brief  Register Bus IOs if component ID is OK
  * @param  Instance TS instance. Could be only 0.
  * @retval BSP status
  */
static int32_t FT5336_Probe(uint32_t Instance)
{
 8010b98:	b580      	push	{r7, lr}
 8010b9a:	b08a      	sub	sp, #40	@ 0x28
 8010b9c:	af00      	add	r7, sp, #0
 8010b9e:	6078      	str	r0, [r7, #4]
  int32_t ret = BSP_ERROR_NONE;
 8010ba0:	2300      	movs	r3, #0
 8010ba2:	627b      	str	r3, [r7, #36]	@ 0x24
  FT5336_IO_t              IOCtx;
  static FT5336_Object_t   FT5336Obj;
  uint32_t ft5336_id       = 0;
 8010ba4:	2300      	movs	r3, #0
 8010ba6:	60bb      	str	r3, [r7, #8]

  /* Configure the touch screen driver */
  IOCtx.Address     = TS_I2C_ADDRESS;
 8010ba8:	2370      	movs	r3, #112	@ 0x70
 8010baa:	82bb      	strh	r3, [r7, #20]
  IOCtx.Init        = BSP_I2C4_Init;
 8010bac:	4b23      	ldr	r3, [pc, #140]	@ (8010c3c <FT5336_Probe+0xa4>)
 8010bae:	60fb      	str	r3, [r7, #12]
  IOCtx.DeInit      = BSP_I2C4_DeInit;
 8010bb0:	4b23      	ldr	r3, [pc, #140]	@ (8010c40 <FT5336_Probe+0xa8>)
 8010bb2:	613b      	str	r3, [r7, #16]
  IOCtx.ReadReg     = BSP_I2C4_ReadReg;
 8010bb4:	4b23      	ldr	r3, [pc, #140]	@ (8010c44 <FT5336_Probe+0xac>)
 8010bb6:	61fb      	str	r3, [r7, #28]
  IOCtx.WriteReg    = BSP_I2C4_WriteReg;
 8010bb8:	4b23      	ldr	r3, [pc, #140]	@ (8010c48 <FT5336_Probe+0xb0>)
 8010bba:	61bb      	str	r3, [r7, #24]
  IOCtx.GetTick     = BSP_GetTick;
 8010bbc:	4b23      	ldr	r3, [pc, #140]	@ (8010c4c <FT5336_Probe+0xb4>)
 8010bbe:	623b      	str	r3, [r7, #32]

  if(FT5336_RegisterBusIO (&FT5336Obj, &IOCtx) != FT5336_OK)
 8010bc0:	f107 030c 	add.w	r3, r7, #12
 8010bc4:	4619      	mov	r1, r3
 8010bc6:	4822      	ldr	r0, [pc, #136]	@ (8010c50 <FT5336_Probe+0xb8>)
 8010bc8:	f7fd fcb2 	bl	800e530 <FT5336_RegisterBusIO>
 8010bcc:	4603      	mov	r3, r0
 8010bce:	2b00      	cmp	r3, #0
 8010bd0:	d003      	beq.n	8010bda <FT5336_Probe+0x42>
  {
    ret = BSP_ERROR_BUS_FAILURE;
 8010bd2:	f06f 0307 	mvn.w	r3, #7
 8010bd6:	627b      	str	r3, [r7, #36]	@ 0x24
 8010bd8:	e02a      	b.n	8010c30 <FT5336_Probe+0x98>
  }
  else if(FT5336_ReadID(&FT5336Obj, &ft5336_id) != FT5336_OK)
 8010bda:	f107 0308 	add.w	r3, r7, #8
 8010bde:	4619      	mov	r1, r3
 8010be0:	481b      	ldr	r0, [pc, #108]	@ (8010c50 <FT5336_Probe+0xb8>)
 8010be2:	f7fd fd9f 	bl	800e724 <FT5336_ReadID>
 8010be6:	4603      	mov	r3, r0
 8010be8:	2b00      	cmp	r3, #0
 8010bea:	d003      	beq.n	8010bf4 <FT5336_Probe+0x5c>
  {
    ret = BSP_ERROR_COMPONENT_FAILURE;
 8010bec:	f06f 0304 	mvn.w	r3, #4
 8010bf0:	627b      	str	r3, [r7, #36]	@ 0x24
 8010bf2:	e01d      	b.n	8010c30 <FT5336_Probe+0x98>
  }
  else if(ft5336_id != FT5336_ID)
 8010bf4:	68bb      	ldr	r3, [r7, #8]
 8010bf6:	2b51      	cmp	r3, #81	@ 0x51
 8010bf8:	d003      	beq.n	8010c02 <FT5336_Probe+0x6a>
  {
    ret = BSP_ERROR_UNKNOWN_COMPONENT;
 8010bfa:	f06f 0306 	mvn.w	r3, #6
 8010bfe:	627b      	str	r3, [r7, #36]	@ 0x24
 8010c00:	e016      	b.n	8010c30 <FT5336_Probe+0x98>
  }
  else
  {
    Ts_CompObj[Instance] = &FT5336Obj;
 8010c02:	4a14      	ldr	r2, [pc, #80]	@ (8010c54 <FT5336_Probe+0xbc>)
 8010c04:	687b      	ldr	r3, [r7, #4]
 8010c06:	4912      	ldr	r1, [pc, #72]	@ (8010c50 <FT5336_Probe+0xb8>)
 8010c08:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
    Ts_Drv = (TS_Drv_t *) &FT5336_TS_Driver;
 8010c0c:	4b12      	ldr	r3, [pc, #72]	@ (8010c58 <FT5336_Probe+0xc0>)
 8010c0e:	4a13      	ldr	r2, [pc, #76]	@ (8010c5c <FT5336_Probe+0xc4>)
 8010c10:	601a      	str	r2, [r3, #0]

    if(Ts_Drv->Init(Ts_CompObj[Instance]) != FT5336_OK)
 8010c12:	4b11      	ldr	r3, [pc, #68]	@ (8010c58 <FT5336_Probe+0xc0>)
 8010c14:	681b      	ldr	r3, [r3, #0]
 8010c16:	681b      	ldr	r3, [r3, #0]
 8010c18:	490e      	ldr	r1, [pc, #56]	@ (8010c54 <FT5336_Probe+0xbc>)
 8010c1a:	687a      	ldr	r2, [r7, #4]
 8010c1c:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 8010c20:	4610      	mov	r0, r2
 8010c22:	4798      	blx	r3
 8010c24:	4603      	mov	r3, r0
 8010c26:	2b00      	cmp	r3, #0
 8010c28:	d002      	beq.n	8010c30 <FT5336_Probe+0x98>
    {
      ret = BSP_ERROR_COMPONENT_FAILURE;
 8010c2a:	f06f 0304 	mvn.w	r3, #4
 8010c2e:	627b      	str	r3, [r7, #36]	@ 0x24
    }
  }

  return ret;
 8010c30:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 8010c32:	4618      	mov	r0, r3
 8010c34:	3728      	adds	r7, #40	@ 0x28
 8010c36:	46bd      	mov	sp, r7
 8010c38:	bd80      	pop	{r7, pc}
 8010c3a:	bf00      	nop
 8010c3c:	0800f329 	.word	0x0800f329
 8010c40:	0800f39d 	.word	0x0800f39d
 8010c44:	0800f4c5 	.word	0x0800f4c5
 8010c48:	0800f469 	.word	0x0800f469
 8010c4c:	0800f521 	.word	0x0800f521
 8010c50:	2400b848 	.word	0x2400b848
 8010c54:	2400b81c 	.word	0x2400b81c
 8010c58:	2400b818 	.word	0x2400b818
 8010c5c:	24000020 	.word	0x24000020

08010c60 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8010c60:	b580      	push	{r7, lr}
 8010c62:	b082      	sub	sp, #8
 8010c64:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8010c66:	2003      	movs	r0, #3
 8010c68:	f000 f933 	bl	8010ed2 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8010c6c:	f004 f88c 	bl	8014d88 <HAL_RCC_GetSysClockFreq>
 8010c70:	4602      	mov	r2, r0
 8010c72:	4b15      	ldr	r3, [pc, #84]	@ (8010cc8 <HAL_Init+0x68>)
 8010c74:	699b      	ldr	r3, [r3, #24]
 8010c76:	0a1b      	lsrs	r3, r3, #8
 8010c78:	f003 030f 	and.w	r3, r3, #15
 8010c7c:	4913      	ldr	r1, [pc, #76]	@ (8010ccc <HAL_Init+0x6c>)
 8010c7e:	5ccb      	ldrb	r3, [r1, r3]
 8010c80:	f003 031f 	and.w	r3, r3, #31
 8010c84:	fa22 f303 	lsr.w	r3, r2, r3
 8010c88:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8010c8a:	4b0f      	ldr	r3, [pc, #60]	@ (8010cc8 <HAL_Init+0x68>)
 8010c8c:	699b      	ldr	r3, [r3, #24]
 8010c8e:	f003 030f 	and.w	r3, r3, #15
 8010c92:	4a0e      	ldr	r2, [pc, #56]	@ (8010ccc <HAL_Init+0x6c>)
 8010c94:	5cd3      	ldrb	r3, [r2, r3]
 8010c96:	f003 031f 	and.w	r3, r3, #31
 8010c9a:	687a      	ldr	r2, [r7, #4]
 8010c9c:	fa22 f303 	lsr.w	r3, r2, r3
 8010ca0:	4a0b      	ldr	r2, [pc, #44]	@ (8010cd0 <HAL_Init+0x70>)
 8010ca2:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8010ca4:	4a0b      	ldr	r2, [pc, #44]	@ (8010cd4 <HAL_Init+0x74>)
 8010ca6:	687b      	ldr	r3, [r7, #4]
 8010ca8:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8010caa:	200f      	movs	r0, #15
 8010cac:	f7f0 fc1c 	bl	80014e8 <HAL_InitTick>
 8010cb0:	4603      	mov	r3, r0
 8010cb2:	2b00      	cmp	r3, #0
 8010cb4:	d001      	beq.n	8010cba <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 8010cb6:	2301      	movs	r3, #1
 8010cb8:	e002      	b.n	8010cc0 <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 8010cba:	f7f0 f895 	bl	8000de8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8010cbe:	2300      	movs	r3, #0
}
 8010cc0:	4618      	mov	r0, r3
 8010cc2:	3708      	adds	r7, #8
 8010cc4:	46bd      	mov	sp, r7
 8010cc6:	bd80      	pop	{r7, pc}
 8010cc8:	58024400 	.word	0x58024400
 8010ccc:	0802d1d4 	.word	0x0802d1d4
 8010cd0:	2400001c 	.word	0x2400001c
 8010cd4:	24000018 	.word	0x24000018

08010cd8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8010cd8:	b480      	push	{r7}
 8010cda:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8010cdc:	4b06      	ldr	r3, [pc, #24]	@ (8010cf8 <HAL_IncTick+0x20>)
 8010cde:	781b      	ldrb	r3, [r3, #0]
 8010ce0:	461a      	mov	r2, r3
 8010ce2:	4b06      	ldr	r3, [pc, #24]	@ (8010cfc <HAL_IncTick+0x24>)
 8010ce4:	681b      	ldr	r3, [r3, #0]
 8010ce6:	4413      	add	r3, r2
 8010ce8:	4a04      	ldr	r2, [pc, #16]	@ (8010cfc <HAL_IncTick+0x24>)
 8010cea:	6013      	str	r3, [r2, #0]
}
 8010cec:	bf00      	nop
 8010cee:	46bd      	mov	sp, r7
 8010cf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010cf4:	4770      	bx	lr
 8010cf6:	bf00      	nop
 8010cf8:	24000054 	.word	0x24000054
 8010cfc:	2400b870 	.word	0x2400b870

08010d00 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8010d00:	b480      	push	{r7}
 8010d02:	af00      	add	r7, sp, #0
  return uwTick;
 8010d04:	4b03      	ldr	r3, [pc, #12]	@ (8010d14 <HAL_GetTick+0x14>)
 8010d06:	681b      	ldr	r3, [r3, #0]
}
 8010d08:	4618      	mov	r0, r3
 8010d0a:	46bd      	mov	sp, r7
 8010d0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010d10:	4770      	bx	lr
 8010d12:	bf00      	nop
 8010d14:	2400b870 	.word	0x2400b870

08010d18 <HAL_GetREVID>:
/**
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
 8010d18:	b480      	push	{r7}
 8010d1a:	af00      	add	r7, sp, #0
   return((DBGMCU->IDCODE) >> 16);
 8010d1c:	4b03      	ldr	r3, [pc, #12]	@ (8010d2c <HAL_GetREVID+0x14>)
 8010d1e:	681b      	ldr	r3, [r3, #0]
 8010d20:	0c1b      	lsrs	r3, r3, #16
}
 8010d22:	4618      	mov	r0, r3
 8010d24:	46bd      	mov	sp, r7
 8010d26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010d2a:	4770      	bx	lr
 8010d2c:	5c001000 	.word	0x5c001000

08010d30 <__NVIC_SetPriorityGrouping>:
{
 8010d30:	b480      	push	{r7}
 8010d32:	b085      	sub	sp, #20
 8010d34:	af00      	add	r7, sp, #0
 8010d36:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8010d38:	687b      	ldr	r3, [r7, #4]
 8010d3a:	f003 0307 	and.w	r3, r3, #7
 8010d3e:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8010d40:	4b0b      	ldr	r3, [pc, #44]	@ (8010d70 <__NVIC_SetPriorityGrouping+0x40>)
 8010d42:	68db      	ldr	r3, [r3, #12]
 8010d44:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8010d46:	68ba      	ldr	r2, [r7, #8]
 8010d48:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8010d4c:	4013      	ands	r3, r2
 8010d4e:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8010d50:	68fb      	ldr	r3, [r7, #12]
 8010d52:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8010d54:	68bb      	ldr	r3, [r7, #8]
 8010d56:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8010d58:	4b06      	ldr	r3, [pc, #24]	@ (8010d74 <__NVIC_SetPriorityGrouping+0x44>)
 8010d5a:	4313      	orrs	r3, r2
 8010d5c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8010d5e:	4a04      	ldr	r2, [pc, #16]	@ (8010d70 <__NVIC_SetPriorityGrouping+0x40>)
 8010d60:	68bb      	ldr	r3, [r7, #8]
 8010d62:	60d3      	str	r3, [r2, #12]
}
 8010d64:	bf00      	nop
 8010d66:	3714      	adds	r7, #20
 8010d68:	46bd      	mov	sp, r7
 8010d6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010d6e:	4770      	bx	lr
 8010d70:	e000ed00 	.word	0xe000ed00
 8010d74:	05fa0000 	.word	0x05fa0000

08010d78 <__NVIC_GetPriorityGrouping>:
{
 8010d78:	b480      	push	{r7}
 8010d7a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8010d7c:	4b04      	ldr	r3, [pc, #16]	@ (8010d90 <__NVIC_GetPriorityGrouping+0x18>)
 8010d7e:	68db      	ldr	r3, [r3, #12]
 8010d80:	0a1b      	lsrs	r3, r3, #8
 8010d82:	f003 0307 	and.w	r3, r3, #7
}
 8010d86:	4618      	mov	r0, r3
 8010d88:	46bd      	mov	sp, r7
 8010d8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010d8e:	4770      	bx	lr
 8010d90:	e000ed00 	.word	0xe000ed00

08010d94 <__NVIC_EnableIRQ>:
{
 8010d94:	b480      	push	{r7}
 8010d96:	b083      	sub	sp, #12
 8010d98:	af00      	add	r7, sp, #0
 8010d9a:	4603      	mov	r3, r0
 8010d9c:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8010d9e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8010da2:	2b00      	cmp	r3, #0
 8010da4:	db0b      	blt.n	8010dbe <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8010da6:	88fb      	ldrh	r3, [r7, #6]
 8010da8:	f003 021f 	and.w	r2, r3, #31
 8010dac:	4907      	ldr	r1, [pc, #28]	@ (8010dcc <__NVIC_EnableIRQ+0x38>)
 8010dae:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8010db2:	095b      	lsrs	r3, r3, #5
 8010db4:	2001      	movs	r0, #1
 8010db6:	fa00 f202 	lsl.w	r2, r0, r2
 8010dba:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8010dbe:	bf00      	nop
 8010dc0:	370c      	adds	r7, #12
 8010dc2:	46bd      	mov	sp, r7
 8010dc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010dc8:	4770      	bx	lr
 8010dca:	bf00      	nop
 8010dcc:	e000e100 	.word	0xe000e100

08010dd0 <__NVIC_DisableIRQ>:
{
 8010dd0:	b480      	push	{r7}
 8010dd2:	b083      	sub	sp, #12
 8010dd4:	af00      	add	r7, sp, #0
 8010dd6:	4603      	mov	r3, r0
 8010dd8:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8010dda:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8010dde:	2b00      	cmp	r3, #0
 8010de0:	db12      	blt.n	8010e08 <__NVIC_DisableIRQ+0x38>
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8010de2:	88fb      	ldrh	r3, [r7, #6]
 8010de4:	f003 021f 	and.w	r2, r3, #31
 8010de8:	490a      	ldr	r1, [pc, #40]	@ (8010e14 <__NVIC_DisableIRQ+0x44>)
 8010dea:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8010dee:	095b      	lsrs	r3, r3, #5
 8010df0:	2001      	movs	r0, #1
 8010df2:	fa00 f202 	lsl.w	r2, r0, r2
 8010df6:	3320      	adds	r3, #32
 8010df8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  __ASM volatile ("dsb 0xF":::"memory");
 8010dfc:	f3bf 8f4f 	dsb	sy
}
 8010e00:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8010e02:	f3bf 8f6f 	isb	sy
}
 8010e06:	bf00      	nop
}
 8010e08:	bf00      	nop
 8010e0a:	370c      	adds	r7, #12
 8010e0c:	46bd      	mov	sp, r7
 8010e0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010e12:	4770      	bx	lr
 8010e14:	e000e100 	.word	0xe000e100

08010e18 <__NVIC_SetPriority>:
{
 8010e18:	b480      	push	{r7}
 8010e1a:	b083      	sub	sp, #12
 8010e1c:	af00      	add	r7, sp, #0
 8010e1e:	4603      	mov	r3, r0
 8010e20:	6039      	str	r1, [r7, #0]
 8010e22:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8010e24:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8010e28:	2b00      	cmp	r3, #0
 8010e2a:	db0a      	blt.n	8010e42 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8010e2c:	683b      	ldr	r3, [r7, #0]
 8010e2e:	b2da      	uxtb	r2, r3
 8010e30:	490c      	ldr	r1, [pc, #48]	@ (8010e64 <__NVIC_SetPriority+0x4c>)
 8010e32:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8010e36:	0112      	lsls	r2, r2, #4
 8010e38:	b2d2      	uxtb	r2, r2
 8010e3a:	440b      	add	r3, r1
 8010e3c:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 8010e40:	e00a      	b.n	8010e58 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8010e42:	683b      	ldr	r3, [r7, #0]
 8010e44:	b2da      	uxtb	r2, r3
 8010e46:	4908      	ldr	r1, [pc, #32]	@ (8010e68 <__NVIC_SetPriority+0x50>)
 8010e48:	88fb      	ldrh	r3, [r7, #6]
 8010e4a:	f003 030f 	and.w	r3, r3, #15
 8010e4e:	3b04      	subs	r3, #4
 8010e50:	0112      	lsls	r2, r2, #4
 8010e52:	b2d2      	uxtb	r2, r2
 8010e54:	440b      	add	r3, r1
 8010e56:	761a      	strb	r2, [r3, #24]
}
 8010e58:	bf00      	nop
 8010e5a:	370c      	adds	r7, #12
 8010e5c:	46bd      	mov	sp, r7
 8010e5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010e62:	4770      	bx	lr
 8010e64:	e000e100 	.word	0xe000e100
 8010e68:	e000ed00 	.word	0xe000ed00

08010e6c <NVIC_EncodePriority>:
{
 8010e6c:	b480      	push	{r7}
 8010e6e:	b089      	sub	sp, #36	@ 0x24
 8010e70:	af00      	add	r7, sp, #0
 8010e72:	60f8      	str	r0, [r7, #12]
 8010e74:	60b9      	str	r1, [r7, #8]
 8010e76:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8010e78:	68fb      	ldr	r3, [r7, #12]
 8010e7a:	f003 0307 	and.w	r3, r3, #7
 8010e7e:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8010e80:	69fb      	ldr	r3, [r7, #28]
 8010e82:	f1c3 0307 	rsb	r3, r3, #7
 8010e86:	2b04      	cmp	r3, #4
 8010e88:	bf28      	it	cs
 8010e8a:	2304      	movcs	r3, #4
 8010e8c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8010e8e:	69fb      	ldr	r3, [r7, #28]
 8010e90:	3304      	adds	r3, #4
 8010e92:	2b06      	cmp	r3, #6
 8010e94:	d902      	bls.n	8010e9c <NVIC_EncodePriority+0x30>
 8010e96:	69fb      	ldr	r3, [r7, #28]
 8010e98:	3b03      	subs	r3, #3
 8010e9a:	e000      	b.n	8010e9e <NVIC_EncodePriority+0x32>
 8010e9c:	2300      	movs	r3, #0
 8010e9e:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8010ea0:	f04f 32ff 	mov.w	r2, #4294967295
 8010ea4:	69bb      	ldr	r3, [r7, #24]
 8010ea6:	fa02 f303 	lsl.w	r3, r2, r3
 8010eaa:	43da      	mvns	r2, r3
 8010eac:	68bb      	ldr	r3, [r7, #8]
 8010eae:	401a      	ands	r2, r3
 8010eb0:	697b      	ldr	r3, [r7, #20]
 8010eb2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8010eb4:	f04f 31ff 	mov.w	r1, #4294967295
 8010eb8:	697b      	ldr	r3, [r7, #20]
 8010eba:	fa01 f303 	lsl.w	r3, r1, r3
 8010ebe:	43d9      	mvns	r1, r3
 8010ec0:	687b      	ldr	r3, [r7, #4]
 8010ec2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8010ec4:	4313      	orrs	r3, r2
}
 8010ec6:	4618      	mov	r0, r3
 8010ec8:	3724      	adds	r7, #36	@ 0x24
 8010eca:	46bd      	mov	sp, r7
 8010ecc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010ed0:	4770      	bx	lr

08010ed2 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8010ed2:	b580      	push	{r7, lr}
 8010ed4:	b082      	sub	sp, #8
 8010ed6:	af00      	add	r7, sp, #0
 8010ed8:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8010eda:	6878      	ldr	r0, [r7, #4]
 8010edc:	f7ff ff28 	bl	8010d30 <__NVIC_SetPriorityGrouping>
}
 8010ee0:	bf00      	nop
 8010ee2:	3708      	adds	r7, #8
 8010ee4:	46bd      	mov	sp, r7
 8010ee6:	bd80      	pop	{r7, pc}

08010ee8 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8010ee8:	b580      	push	{r7, lr}
 8010eea:	b086      	sub	sp, #24
 8010eec:	af00      	add	r7, sp, #0
 8010eee:	4603      	mov	r3, r0
 8010ef0:	60b9      	str	r1, [r7, #8]
 8010ef2:	607a      	str	r2, [r7, #4]
 8010ef4:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8010ef6:	f7ff ff3f 	bl	8010d78 <__NVIC_GetPriorityGrouping>
 8010efa:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8010efc:	687a      	ldr	r2, [r7, #4]
 8010efe:	68b9      	ldr	r1, [r7, #8]
 8010f00:	6978      	ldr	r0, [r7, #20]
 8010f02:	f7ff ffb3 	bl	8010e6c <NVIC_EncodePriority>
 8010f06:	4602      	mov	r2, r0
 8010f08:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8010f0c:	4611      	mov	r1, r2
 8010f0e:	4618      	mov	r0, r3
 8010f10:	f7ff ff82 	bl	8010e18 <__NVIC_SetPriority>
}
 8010f14:	bf00      	nop
 8010f16:	3718      	adds	r7, #24
 8010f18:	46bd      	mov	sp, r7
 8010f1a:	bd80      	pop	{r7, pc}

08010f1c <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8010f1c:	b580      	push	{r7, lr}
 8010f1e:	b082      	sub	sp, #8
 8010f20:	af00      	add	r7, sp, #0
 8010f22:	4603      	mov	r3, r0
 8010f24:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8010f26:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8010f2a:	4618      	mov	r0, r3
 8010f2c:	f7ff ff32 	bl	8010d94 <__NVIC_EnableIRQ>
}
 8010f30:	bf00      	nop
 8010f32:	3708      	adds	r7, #8
 8010f34:	46bd      	mov	sp, r7
 8010f36:	bd80      	pop	{r7, pc}

08010f38 <HAL_NVIC_DisableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8010f38:	b580      	push	{r7, lr}
 8010f3a:	b082      	sub	sp, #8
 8010f3c:	af00      	add	r7, sp, #0
 8010f3e:	4603      	mov	r3, r0
 8010f40:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
 8010f42:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8010f46:	4618      	mov	r0, r3
 8010f48:	f7ff ff42 	bl	8010dd0 <__NVIC_DisableIRQ>
}
 8010f4c:	bf00      	nop
 8010f4e:	3708      	adds	r7, #8
 8010f50:	46bd      	mov	sp, r7
 8010f52:	bd80      	pop	{r7, pc}

08010f54 <HAL_MPU_Disable>:
/**
  * @brief  Disables the MPU
  * @retval None
  */
void HAL_MPU_Disable(void)
{
 8010f54:	b480      	push	{r7}
 8010f56:	af00      	add	r7, sp, #0
  __ASM volatile ("dmb 0xF":::"memory");
 8010f58:	f3bf 8f5f 	dmb	sy
}
 8010f5c:	bf00      	nop
  /* Make sure outstanding transfers are done */
  __DMB();

  /* Disable fault exceptions */
  SCB->SHCSR &= ~SCB_SHCSR_MEMFAULTENA_Msk;
 8010f5e:	4b07      	ldr	r3, [pc, #28]	@ (8010f7c <HAL_MPU_Disable+0x28>)
 8010f60:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8010f62:	4a06      	ldr	r2, [pc, #24]	@ (8010f7c <HAL_MPU_Disable+0x28>)
 8010f64:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8010f68:	6253      	str	r3, [r2, #36]	@ 0x24

  /* Disable the MPU and clear the control register*/
  MPU->CTRL = 0;
 8010f6a:	4b05      	ldr	r3, [pc, #20]	@ (8010f80 <HAL_MPU_Disable+0x2c>)
 8010f6c:	2200      	movs	r2, #0
 8010f6e:	605a      	str	r2, [r3, #4]
}
 8010f70:	bf00      	nop
 8010f72:	46bd      	mov	sp, r7
 8010f74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010f78:	4770      	bx	lr
 8010f7a:	bf00      	nop
 8010f7c:	e000ed00 	.word	0xe000ed00
 8010f80:	e000ed90 	.word	0xe000ed90

08010f84 <HAL_MPU_Enable>:
  *            @arg MPU_PRIVILEGED_DEFAULT
  *            @arg MPU_HFNMI_PRIVDEF
  * @retval None
  */
void HAL_MPU_Enable(uint32_t MPU_Control)
{
 8010f84:	b480      	push	{r7}
 8010f86:	b083      	sub	sp, #12
 8010f88:	af00      	add	r7, sp, #0
 8010f8a:	6078      	str	r0, [r7, #4]
  /* Enable the MPU */
  MPU->CTRL = MPU_Control | MPU_CTRL_ENABLE_Msk;
 8010f8c:	4a0b      	ldr	r2, [pc, #44]	@ (8010fbc <HAL_MPU_Enable+0x38>)
 8010f8e:	687b      	ldr	r3, [r7, #4]
 8010f90:	f043 0301 	orr.w	r3, r3, #1
 8010f94:	6053      	str	r3, [r2, #4]

  /* Enable fault exceptions */
  SCB->SHCSR |= SCB_SHCSR_MEMFAULTENA_Msk;
 8010f96:	4b0a      	ldr	r3, [pc, #40]	@ (8010fc0 <HAL_MPU_Enable+0x3c>)
 8010f98:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8010f9a:	4a09      	ldr	r2, [pc, #36]	@ (8010fc0 <HAL_MPU_Enable+0x3c>)
 8010f9c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8010fa0:	6253      	str	r3, [r2, #36]	@ 0x24
  __ASM volatile ("dsb 0xF":::"memory");
 8010fa2:	f3bf 8f4f 	dsb	sy
}
 8010fa6:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8010fa8:	f3bf 8f6f 	isb	sy
}
 8010fac:	bf00      	nop

  /* Ensure MPU setting take effects */
  __DSB();
  __ISB();
}
 8010fae:	bf00      	nop
 8010fb0:	370c      	adds	r7, #12
 8010fb2:	46bd      	mov	sp, r7
 8010fb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010fb8:	4770      	bx	lr
 8010fba:	bf00      	nop
 8010fbc:	e000ed90 	.word	0xe000ed90
 8010fc0:	e000ed00 	.word	0xe000ed00

08010fc4 <HAL_MPU_ConfigRegion>:
  * @param  MPU_Init Pointer to a MPU_Region_InitTypeDef structure that contains
  *                  the initialization and configuration information.
  * @retval None
  */
void HAL_MPU_ConfigRegion(MPU_Region_InitTypeDef *MPU_Init)
{
 8010fc4:	b480      	push	{r7}
 8010fc6:	b083      	sub	sp, #12
 8010fc8:	af00      	add	r7, sp, #0
 8010fca:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_MPU_REGION_NUMBER(MPU_Init->Number));
  assert_param(IS_MPU_REGION_ENABLE(MPU_Init->Enable));

  /* Set the Region number */
  MPU->RNR = MPU_Init->Number;
 8010fcc:	687b      	ldr	r3, [r7, #4]
 8010fce:	785a      	ldrb	r2, [r3, #1]
 8010fd0:	4b1d      	ldr	r3, [pc, #116]	@ (8011048 <HAL_MPU_ConfigRegion+0x84>)
 8010fd2:	609a      	str	r2, [r3, #8]

  if ((MPU_Init->Enable) != 0UL)
 8010fd4:	687b      	ldr	r3, [r7, #4]
 8010fd6:	781b      	ldrb	r3, [r3, #0]
 8010fd8:	2b00      	cmp	r3, #0
 8010fda:	d029      	beq.n	8011030 <HAL_MPU_ConfigRegion+0x6c>
    assert_param(IS_MPU_ACCESS_CACHEABLE(MPU_Init->IsCacheable));
    assert_param(IS_MPU_ACCESS_BUFFERABLE(MPU_Init->IsBufferable));
    assert_param(IS_MPU_SUB_REGION_DISABLE(MPU_Init->SubRegionDisable));
    assert_param(IS_MPU_REGION_SIZE(MPU_Init->Size));

    MPU->RBAR = MPU_Init->BaseAddress;
 8010fdc:	4a1a      	ldr	r2, [pc, #104]	@ (8011048 <HAL_MPU_ConfigRegion+0x84>)
 8010fde:	687b      	ldr	r3, [r7, #4]
 8010fe0:	685b      	ldr	r3, [r3, #4]
 8010fe2:	60d3      	str	r3, [r2, #12]
    MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8010fe4:	687b      	ldr	r3, [r7, #4]
 8010fe6:	7b1b      	ldrb	r3, [r3, #12]
 8010fe8:	071a      	lsls	r2, r3, #28
                ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 8010fea:	687b      	ldr	r3, [r7, #4]
 8010fec:	7adb      	ldrb	r3, [r3, #11]
 8010fee:	061b      	lsls	r3, r3, #24
    MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8010ff0:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 8010ff2:	687b      	ldr	r3, [r7, #4]
 8010ff4:	7a9b      	ldrb	r3, [r3, #10]
 8010ff6:	04db      	lsls	r3, r3, #19
                ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 8010ff8:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 8010ffa:	687b      	ldr	r3, [r7, #4]
 8010ffc:	7b5b      	ldrb	r3, [r3, #13]
 8010ffe:	049b      	lsls	r3, r3, #18
                ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 8011000:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 8011002:	687b      	ldr	r3, [r7, #4]
 8011004:	7b9b      	ldrb	r3, [r3, #14]
 8011006:	045b      	lsls	r3, r3, #17
                ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 8011008:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 801100a:	687b      	ldr	r3, [r7, #4]
 801100c:	7bdb      	ldrb	r3, [r3, #15]
 801100e:	041b      	lsls	r3, r3, #16
                ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 8011010:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 8011012:	687b      	ldr	r3, [r7, #4]
 8011014:	7a5b      	ldrb	r3, [r3, #9]
 8011016:	021b      	lsls	r3, r3, #8
                ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 8011018:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 801101a:	687b      	ldr	r3, [r7, #4]
 801101c:	7a1b      	ldrb	r3, [r3, #8]
 801101e:	005b      	lsls	r3, r3, #1
                ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 8011020:	4313      	orrs	r3, r2
                ((uint32_t)MPU_Init->Enable                  << MPU_RASR_ENABLE_Pos);
 8011022:	687a      	ldr	r2, [r7, #4]
 8011024:	7812      	ldrb	r2, [r2, #0]
 8011026:	4611      	mov	r1, r2
    MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8011028:	4a07      	ldr	r2, [pc, #28]	@ (8011048 <HAL_MPU_ConfigRegion+0x84>)
                ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 801102a:	430b      	orrs	r3, r1
    MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 801102c:	6113      	str	r3, [r2, #16]
  else
  {
    MPU->RBAR = 0x00;
    MPU->RASR = 0x00;
  }
}
 801102e:	e005      	b.n	801103c <HAL_MPU_ConfigRegion+0x78>
    MPU->RBAR = 0x00;
 8011030:	4b05      	ldr	r3, [pc, #20]	@ (8011048 <HAL_MPU_ConfigRegion+0x84>)
 8011032:	2200      	movs	r2, #0
 8011034:	60da      	str	r2, [r3, #12]
    MPU->RASR = 0x00;
 8011036:	4b04      	ldr	r3, [pc, #16]	@ (8011048 <HAL_MPU_ConfigRegion+0x84>)
 8011038:	2200      	movs	r2, #0
 801103a:	611a      	str	r2, [r3, #16]
}
 801103c:	bf00      	nop
 801103e:	370c      	adds	r7, #12
 8011040:	46bd      	mov	sp, r7
 8011042:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011046:	4770      	bx	lr
 8011048:	e000ed90 	.word	0xe000ed90

0801104c <HAL_CRC_Init>:
  *         parameters in the CRC_InitTypeDef and create the associated handle.
  * @param  hcrc CRC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRC_Init(CRC_HandleTypeDef *hcrc)
{
 801104c:	b580      	push	{r7, lr}
 801104e:	b082      	sub	sp, #8
 8011050:	af00      	add	r7, sp, #0
 8011052:	6078      	str	r0, [r7, #4]
  /* Check the CRC handle allocation */
  if (hcrc == NULL)
 8011054:	687b      	ldr	r3, [r7, #4]
 8011056:	2b00      	cmp	r3, #0
 8011058:	d101      	bne.n	801105e <HAL_CRC_Init+0x12>
  {
    return HAL_ERROR;
 801105a:	2301      	movs	r3, #1
 801105c:	e054      	b.n	8011108 <HAL_CRC_Init+0xbc>
  }

  /* Check the parameters */
  assert_param(IS_CRC_ALL_INSTANCE(hcrc->Instance));

  if (hcrc->State == HAL_CRC_STATE_RESET)
 801105e:	687b      	ldr	r3, [r7, #4]
 8011060:	7f5b      	ldrb	r3, [r3, #29]
 8011062:	b2db      	uxtb	r3, r3
 8011064:	2b00      	cmp	r3, #0
 8011066:	d105      	bne.n	8011074 <HAL_CRC_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hcrc->Lock = HAL_UNLOCKED;
 8011068:	687b      	ldr	r3, [r7, #4]
 801106a:	2200      	movs	r2, #0
 801106c:	771a      	strb	r2, [r3, #28]
    /* Init the low level hardware */
    HAL_CRC_MspInit(hcrc);
 801106e:	6878      	ldr	r0, [r7, #4]
 8011070:	f7ef fed8 	bl	8000e24 <HAL_CRC_MspInit>
  }

  hcrc->State = HAL_CRC_STATE_BUSY;
 8011074:	687b      	ldr	r3, [r7, #4]
 8011076:	2202      	movs	r2, #2
 8011078:	775a      	strb	r2, [r3, #29]

  /* check whether or not non-default generating polynomial has been
   * picked up by user */
  assert_param(IS_DEFAULT_POLYNOMIAL(hcrc->Init.DefaultPolynomialUse));
  if (hcrc->Init.DefaultPolynomialUse == DEFAULT_POLYNOMIAL_ENABLE)
 801107a:	687b      	ldr	r3, [r7, #4]
 801107c:	791b      	ldrb	r3, [r3, #4]
 801107e:	2b00      	cmp	r3, #0
 8011080:	d10c      	bne.n	801109c <HAL_CRC_Init+0x50>
  {
    /* initialize peripheral with default generating polynomial */
    WRITE_REG(hcrc->Instance->POL, DEFAULT_CRC32_POLY);
 8011082:	687b      	ldr	r3, [r7, #4]
 8011084:	681b      	ldr	r3, [r3, #0]
 8011086:	4a22      	ldr	r2, [pc, #136]	@ (8011110 <HAL_CRC_Init+0xc4>)
 8011088:	615a      	str	r2, [r3, #20]
    MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, CRC_POLYLENGTH_32B);
 801108a:	687b      	ldr	r3, [r7, #4]
 801108c:	681b      	ldr	r3, [r3, #0]
 801108e:	689a      	ldr	r2, [r3, #8]
 8011090:	687b      	ldr	r3, [r7, #4]
 8011092:	681b      	ldr	r3, [r3, #0]
 8011094:	f022 0218 	bic.w	r2, r2, #24
 8011098:	609a      	str	r2, [r3, #8]
 801109a:	e00c      	b.n	80110b6 <HAL_CRC_Init+0x6a>
  }
  else
  {
    /* initialize CRC peripheral with generating polynomial defined by user */
    if (HAL_CRCEx_Polynomial_Set(hcrc, hcrc->Init.GeneratingPolynomial, hcrc->Init.CRCLength) != HAL_OK)
 801109c:	687b      	ldr	r3, [r7, #4]
 801109e:	6899      	ldr	r1, [r3, #8]
 80110a0:	687b      	ldr	r3, [r7, #4]
 80110a2:	68db      	ldr	r3, [r3, #12]
 80110a4:	461a      	mov	r2, r3
 80110a6:	6878      	ldr	r0, [r7, #4]
 80110a8:	f000 f834 	bl	8011114 <HAL_CRCEx_Polynomial_Set>
 80110ac:	4603      	mov	r3, r0
 80110ae:	2b00      	cmp	r3, #0
 80110b0:	d001      	beq.n	80110b6 <HAL_CRC_Init+0x6a>
    {
      return HAL_ERROR;
 80110b2:	2301      	movs	r3, #1
 80110b4:	e028      	b.n	8011108 <HAL_CRC_Init+0xbc>
  }

  /* check whether or not non-default CRC initial value has been
   * picked up by user */
  assert_param(IS_DEFAULT_INIT_VALUE(hcrc->Init.DefaultInitValueUse));
  if (hcrc->Init.DefaultInitValueUse == DEFAULT_INIT_VALUE_ENABLE)
 80110b6:	687b      	ldr	r3, [r7, #4]
 80110b8:	795b      	ldrb	r3, [r3, #5]
 80110ba:	2b00      	cmp	r3, #0
 80110bc:	d105      	bne.n	80110ca <HAL_CRC_Init+0x7e>
  {
    WRITE_REG(hcrc->Instance->INIT, DEFAULT_CRC_INITVALUE);
 80110be:	687b      	ldr	r3, [r7, #4]
 80110c0:	681b      	ldr	r3, [r3, #0]
 80110c2:	f04f 32ff 	mov.w	r2, #4294967295
 80110c6:	611a      	str	r2, [r3, #16]
 80110c8:	e004      	b.n	80110d4 <HAL_CRC_Init+0x88>
  }
  else
  {
    WRITE_REG(hcrc->Instance->INIT, hcrc->Init.InitValue);
 80110ca:	687b      	ldr	r3, [r7, #4]
 80110cc:	681b      	ldr	r3, [r3, #0]
 80110ce:	687a      	ldr	r2, [r7, #4]
 80110d0:	6912      	ldr	r2, [r2, #16]
 80110d2:	611a      	str	r2, [r3, #16]
  }


  /* set input data inversion mode */
  assert_param(IS_CRC_INPUTDATA_INVERSION_MODE(hcrc->Init.InputDataInversionMode));
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_IN, hcrc->Init.InputDataInversionMode);
 80110d4:	687b      	ldr	r3, [r7, #4]
 80110d6:	681b      	ldr	r3, [r3, #0]
 80110d8:	689b      	ldr	r3, [r3, #8]
 80110da:	f023 0160 	bic.w	r1, r3, #96	@ 0x60
 80110de:	687b      	ldr	r3, [r7, #4]
 80110e0:	695a      	ldr	r2, [r3, #20]
 80110e2:	687b      	ldr	r3, [r7, #4]
 80110e4:	681b      	ldr	r3, [r3, #0]
 80110e6:	430a      	orrs	r2, r1
 80110e8:	609a      	str	r2, [r3, #8]

  /* set output data inversion mode */
  assert_param(IS_CRC_OUTPUTDATA_INVERSION_MODE(hcrc->Init.OutputDataInversionMode));
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_OUT, hcrc->Init.OutputDataInversionMode);
 80110ea:	687b      	ldr	r3, [r7, #4]
 80110ec:	681b      	ldr	r3, [r3, #0]
 80110ee:	689b      	ldr	r3, [r3, #8]
 80110f0:	f023 0180 	bic.w	r1, r3, #128	@ 0x80
 80110f4:	687b      	ldr	r3, [r7, #4]
 80110f6:	699a      	ldr	r2, [r3, #24]
 80110f8:	687b      	ldr	r3, [r7, #4]
 80110fa:	681b      	ldr	r3, [r3, #0]
 80110fc:	430a      	orrs	r2, r1
 80110fe:	609a      	str	r2, [r3, #8]
  /* makes sure the input data format (bytes, halfwords or words stream)
   * is properly specified by user */
  assert_param(IS_CRC_INPUTDATA_FORMAT(hcrc->InputDataFormat));

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_READY;
 8011100:	687b      	ldr	r3, [r7, #4]
 8011102:	2201      	movs	r2, #1
 8011104:	775a      	strb	r2, [r3, #29]

  /* Return function status */
  return HAL_OK;
 8011106:	2300      	movs	r3, #0
}
 8011108:	4618      	mov	r0, r3
 801110a:	3708      	adds	r7, #8
 801110c:	46bd      	mov	sp, r7
 801110e:	bd80      	pop	{r7, pc}
 8011110:	04c11db7 	.word	0x04c11db7

08011114 <HAL_CRCEx_Polynomial_Set>:
  *          @arg @ref CRC_POLYLENGTH_16B 16-bit long CRC (generating polynomial of degree 16)
  *          @arg @ref CRC_POLYLENGTH_32B 32-bit long CRC (generating polynomial of degree 32)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRCEx_Polynomial_Set(CRC_HandleTypeDef *hcrc, uint32_t Pol, uint32_t PolyLength)
{
 8011114:	b480      	push	{r7}
 8011116:	b087      	sub	sp, #28
 8011118:	af00      	add	r7, sp, #0
 801111a:	60f8      	str	r0, [r7, #12]
 801111c:	60b9      	str	r1, [r7, #8]
 801111e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8011120:	2300      	movs	r3, #0
 8011122:	75fb      	strb	r3, [r7, #23]
  uint32_t msb = 31U; /* polynomial degree is 32 at most, so msb is initialized to max value */
 8011124:	231f      	movs	r3, #31
 8011126:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_CRC_POL_LENGTH(PolyLength));

  /* Ensure that the generating polynomial is odd */ 
  if ((Pol & (uint32_t)(0x1U)) ==  0U)
 8011128:	68bb      	ldr	r3, [r7, #8]
 801112a:	f003 0301 	and.w	r3, r3, #1
 801112e:	2b00      	cmp	r3, #0
 8011130:	d102      	bne.n	8011138 <HAL_CRCEx_Polynomial_Set+0x24>
  {
    status =  HAL_ERROR;
 8011132:	2301      	movs	r3, #1
 8011134:	75fb      	strb	r3, [r7, #23]
 8011136:	e063      	b.n	8011200 <HAL_CRCEx_Polynomial_Set+0xec>
     * definition. HAL_ERROR is reported if Pol degree is
     * larger than that indicated by PolyLength.
     * Look for MSB position: msb will contain the degree of
     *  the second to the largest polynomial member. E.g., for
     *  X^7 + X^6 + X^5 + X^2 + 1, msb = 6. */
    while ((msb-- > 0U) && ((Pol & ((uint32_t)(0x1U) << (msb & 0x1FU))) == 0U))
 8011138:	bf00      	nop
 801113a:	693b      	ldr	r3, [r7, #16]
 801113c:	1e5a      	subs	r2, r3, #1
 801113e:	613a      	str	r2, [r7, #16]
 8011140:	2b00      	cmp	r3, #0
 8011142:	d009      	beq.n	8011158 <HAL_CRCEx_Polynomial_Set+0x44>
 8011144:	693b      	ldr	r3, [r7, #16]
 8011146:	f003 031f 	and.w	r3, r3, #31
 801114a:	68ba      	ldr	r2, [r7, #8]
 801114c:	fa22 f303 	lsr.w	r3, r2, r3
 8011150:	f003 0301 	and.w	r3, r3, #1
 8011154:	2b00      	cmp	r3, #0
 8011156:	d0f0      	beq.n	801113a <HAL_CRCEx_Polynomial_Set+0x26>
    {
    }

    switch (PolyLength)
 8011158:	687b      	ldr	r3, [r7, #4]
 801115a:	2b18      	cmp	r3, #24
 801115c:	d846      	bhi.n	80111ec <HAL_CRCEx_Polynomial_Set+0xd8>
 801115e:	a201      	add	r2, pc, #4	@ (adr r2, 8011164 <HAL_CRCEx_Polynomial_Set+0x50>)
 8011160:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8011164:	080111f3 	.word	0x080111f3
 8011168:	080111ed 	.word	0x080111ed
 801116c:	080111ed 	.word	0x080111ed
 8011170:	080111ed 	.word	0x080111ed
 8011174:	080111ed 	.word	0x080111ed
 8011178:	080111ed 	.word	0x080111ed
 801117c:	080111ed 	.word	0x080111ed
 8011180:	080111ed 	.word	0x080111ed
 8011184:	080111e1 	.word	0x080111e1
 8011188:	080111ed 	.word	0x080111ed
 801118c:	080111ed 	.word	0x080111ed
 8011190:	080111ed 	.word	0x080111ed
 8011194:	080111ed 	.word	0x080111ed
 8011198:	080111ed 	.word	0x080111ed
 801119c:	080111ed 	.word	0x080111ed
 80111a0:	080111ed 	.word	0x080111ed
 80111a4:	080111d5 	.word	0x080111d5
 80111a8:	080111ed 	.word	0x080111ed
 80111ac:	080111ed 	.word	0x080111ed
 80111b0:	080111ed 	.word	0x080111ed
 80111b4:	080111ed 	.word	0x080111ed
 80111b8:	080111ed 	.word	0x080111ed
 80111bc:	080111ed 	.word	0x080111ed
 80111c0:	080111ed 	.word	0x080111ed
 80111c4:	080111c9 	.word	0x080111c9
    {
          
      case CRC_POLYLENGTH_7B:
        if (msb >= HAL_CRC_LENGTH_7B)
 80111c8:	693b      	ldr	r3, [r7, #16]
 80111ca:	2b06      	cmp	r3, #6
 80111cc:	d913      	bls.n	80111f6 <HAL_CRCEx_Polynomial_Set+0xe2>
        {
          status =   HAL_ERROR;
 80111ce:	2301      	movs	r3, #1
 80111d0:	75fb      	strb	r3, [r7, #23]
        }
        break;
 80111d2:	e010      	b.n	80111f6 <HAL_CRCEx_Polynomial_Set+0xe2>
      case CRC_POLYLENGTH_8B:
        if (msb >= HAL_CRC_LENGTH_8B)
 80111d4:	693b      	ldr	r3, [r7, #16]
 80111d6:	2b07      	cmp	r3, #7
 80111d8:	d90f      	bls.n	80111fa <HAL_CRCEx_Polynomial_Set+0xe6>
        {
          status =   HAL_ERROR;
 80111da:	2301      	movs	r3, #1
 80111dc:	75fb      	strb	r3, [r7, #23]
        }
        break;
 80111de:	e00c      	b.n	80111fa <HAL_CRCEx_Polynomial_Set+0xe6>
      case CRC_POLYLENGTH_16B:
        if (msb >= HAL_CRC_LENGTH_16B)
 80111e0:	693b      	ldr	r3, [r7, #16]
 80111e2:	2b0f      	cmp	r3, #15
 80111e4:	d90b      	bls.n	80111fe <HAL_CRCEx_Polynomial_Set+0xea>
        {
          status =   HAL_ERROR;
 80111e6:	2301      	movs	r3, #1
 80111e8:	75fb      	strb	r3, [r7, #23]
        }
        break;
 80111ea:	e008      	b.n	80111fe <HAL_CRCEx_Polynomial_Set+0xea>
 
      case CRC_POLYLENGTH_32B:
        /* no polynomial definition vs. polynomial length issue possible */
        break;
      default:
        status =  HAL_ERROR;
 80111ec:	2301      	movs	r3, #1
 80111ee:	75fb      	strb	r3, [r7, #23]
        break;
 80111f0:	e006      	b.n	8011200 <HAL_CRCEx_Polynomial_Set+0xec>
        break;
 80111f2:	bf00      	nop
 80111f4:	e004      	b.n	8011200 <HAL_CRCEx_Polynomial_Set+0xec>
        break;
 80111f6:	bf00      	nop
 80111f8:	e002      	b.n	8011200 <HAL_CRCEx_Polynomial_Set+0xec>
        break;
 80111fa:	bf00      	nop
 80111fc:	e000      	b.n	8011200 <HAL_CRCEx_Polynomial_Set+0xec>
        break;
 80111fe:	bf00      	nop
    }
  }
  if (status == HAL_OK)
 8011200:	7dfb      	ldrb	r3, [r7, #23]
 8011202:	2b00      	cmp	r3, #0
 8011204:	d10d      	bne.n	8011222 <HAL_CRCEx_Polynomial_Set+0x10e>
  {
    /* set generating polynomial */
    WRITE_REG(hcrc->Instance->POL, Pol);
 8011206:	68fb      	ldr	r3, [r7, #12]
 8011208:	681b      	ldr	r3, [r3, #0]
 801120a:	68ba      	ldr	r2, [r7, #8]
 801120c:	615a      	str	r2, [r3, #20]

    /* set generating polynomial size */
    MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, PolyLength);
 801120e:	68fb      	ldr	r3, [r7, #12]
 8011210:	681b      	ldr	r3, [r3, #0]
 8011212:	689b      	ldr	r3, [r3, #8]
 8011214:	f023 0118 	bic.w	r1, r3, #24
 8011218:	68fb      	ldr	r3, [r7, #12]
 801121a:	681b      	ldr	r3, [r3, #0]
 801121c:	687a      	ldr	r2, [r7, #4]
 801121e:	430a      	orrs	r2, r1
 8011220:	609a      	str	r2, [r3, #8]
  }
  /* Return function status */
  return status;
 8011222:	7dfb      	ldrb	r3, [r7, #23]
}
 8011224:	4618      	mov	r0, r3
 8011226:	371c      	adds	r7, #28
 8011228:	46bd      	mov	sp, r7
 801122a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801122e:	4770      	bx	lr

08011230 <HAL_DMA2D_Init>:
  * @param  hdma2d pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_Init(DMA2D_HandleTypeDef *hdma2d)
{
 8011230:	b580      	push	{r7, lr}
 8011232:	b082      	sub	sp, #8
 8011234:	af00      	add	r7, sp, #0
 8011236:	6078      	str	r0, [r7, #4]
  /* Check the DMA2D peripheral state */
  if (hdma2d == NULL)
 8011238:	687b      	ldr	r3, [r7, #4]
 801123a:	2b00      	cmp	r3, #0
 801123c:	d101      	bne.n	8011242 <HAL_DMA2D_Init+0x12>
  {
    return HAL_ERROR;
 801123e:	2301      	movs	r3, #1
 8011240:	e04f      	b.n	80112e2 <HAL_DMA2D_Init+0xb2>

    /* Init the low level hardware */
    hdma2d->MspInitCallback(hdma2d);
  }
#else
  if (hdma2d->State == HAL_DMA2D_STATE_RESET)
 8011242:	687b      	ldr	r3, [r7, #4]
 8011244:	f893 3061 	ldrb.w	r3, [r3, #97]	@ 0x61
 8011248:	b2db      	uxtb	r3, r3
 801124a:	2b00      	cmp	r3, #0
 801124c:	d106      	bne.n	801125c <HAL_DMA2D_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hdma2d->Lock = HAL_UNLOCKED;
 801124e:	687b      	ldr	r3, [r7, #4]
 8011250:	2200      	movs	r2, #0
 8011252:	f883 2060 	strb.w	r2, [r3, #96]	@ 0x60
    /* Init the low level hardware */
    HAL_DMA2D_MspInit(hdma2d);
 8011256:	6878      	ldr	r0, [r7, #4]
 8011258:	f7ef fe06 	bl	8000e68 <HAL_DMA2D_MspInit>
  }
#endif /* (USE_HAL_DMA2D_REGISTER_CALLBACKS) */

  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 801125c:	687b      	ldr	r3, [r7, #4]
 801125e:	2202      	movs	r2, #2
 8011260:	f883 2061 	strb.w	r2, [r3, #97]	@ 0x61

  /* DMA2D CR register configuration -------------------------------------------*/
  MODIFY_REG(hdma2d->Instance->CR, DMA2D_CR_MODE | DMA2D_CR_LOM, hdma2d->Init.Mode | hdma2d->Init.LineOffsetMode);
 8011264:	687b      	ldr	r3, [r7, #4]
 8011266:	681b      	ldr	r3, [r3, #0]
 8011268:	681a      	ldr	r2, [r3, #0]
 801126a:	4b20      	ldr	r3, [pc, #128]	@ (80112ec <HAL_DMA2D_Init+0xbc>)
 801126c:	4013      	ands	r3, r2
 801126e:	687a      	ldr	r2, [r7, #4]
 8011270:	6851      	ldr	r1, [r2, #4]
 8011272:	687a      	ldr	r2, [r7, #4]
 8011274:	69d2      	ldr	r2, [r2, #28]
 8011276:	4311      	orrs	r1, r2
 8011278:	687a      	ldr	r2, [r7, #4]
 801127a:	6812      	ldr	r2, [r2, #0]
 801127c:	430b      	orrs	r3, r1
 801127e:	6013      	str	r3, [r2, #0]

  /* DMA2D OPFCCR register configuration ---------------------------------------*/
  MODIFY_REG(hdma2d->Instance->OPFCCR, DMA2D_OPFCCR_CM | DMA2D_OPFCCR_SB,
 8011280:	687b      	ldr	r3, [r7, #4]
 8011282:	681b      	ldr	r3, [r3, #0]
 8011284:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8011286:	4b1a      	ldr	r3, [pc, #104]	@ (80112f0 <HAL_DMA2D_Init+0xc0>)
 8011288:	4013      	ands	r3, r2
 801128a:	687a      	ldr	r2, [r7, #4]
 801128c:	6891      	ldr	r1, [r2, #8]
 801128e:	687a      	ldr	r2, [r7, #4]
 8011290:	6992      	ldr	r2, [r2, #24]
 8011292:	4311      	orrs	r1, r2
 8011294:	687a      	ldr	r2, [r7, #4]
 8011296:	6812      	ldr	r2, [r2, #0]
 8011298:	430b      	orrs	r3, r1
 801129a:	6353      	str	r3, [r2, #52]	@ 0x34
             hdma2d->Init.ColorMode | hdma2d->Init.BytesSwap);

  /* DMA2D OOR register configuration ------------------------------------------*/
  MODIFY_REG(hdma2d->Instance->OOR, DMA2D_OOR_LO, hdma2d->Init.OutputOffset);
 801129c:	687b      	ldr	r3, [r7, #4]
 801129e:	681b      	ldr	r3, [r3, #0]
 80112a0:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80112a2:	4b14      	ldr	r3, [pc, #80]	@ (80112f4 <HAL_DMA2D_Init+0xc4>)
 80112a4:	4013      	ands	r3, r2
 80112a6:	687a      	ldr	r2, [r7, #4]
 80112a8:	68d1      	ldr	r1, [r2, #12]
 80112aa:	687a      	ldr	r2, [r7, #4]
 80112ac:	6812      	ldr	r2, [r2, #0]
 80112ae:	430b      	orrs	r3, r1
 80112b0:	6413      	str	r3, [r2, #64]	@ 0x40
  /* DMA2D OPFCCR AI and RBS fields setting (Output Alpha Inversion)*/
  MODIFY_REG(hdma2d->Instance->OPFCCR, (DMA2D_OPFCCR_AI | DMA2D_OPFCCR_RBS),
 80112b2:	687b      	ldr	r3, [r7, #4]
 80112b4:	681b      	ldr	r3, [r3, #0]
 80112b6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80112b8:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 80112bc:	687b      	ldr	r3, [r7, #4]
 80112be:	691b      	ldr	r3, [r3, #16]
 80112c0:	051a      	lsls	r2, r3, #20
 80112c2:	687b      	ldr	r3, [r7, #4]
 80112c4:	695b      	ldr	r3, [r3, #20]
 80112c6:	055b      	lsls	r3, r3, #21
 80112c8:	431a      	orrs	r2, r3
 80112ca:	687b      	ldr	r3, [r7, #4]
 80112cc:	681b      	ldr	r3, [r3, #0]
 80112ce:	430a      	orrs	r2, r1
 80112d0:	635a      	str	r2, [r3, #52]	@ 0x34
             ((hdma2d->Init.AlphaInverted << DMA2D_OPFCCR_AI_Pos) | \
              (hdma2d->Init.RedBlueSwap << DMA2D_OPFCCR_RBS_Pos)));


  /* Update error code */
  hdma2d->ErrorCode = HAL_DMA2D_ERROR_NONE;
 80112d2:	687b      	ldr	r3, [r7, #4]
 80112d4:	2200      	movs	r2, #0
 80112d6:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Initialize the DMA2D state*/
  hdma2d->State  = HAL_DMA2D_STATE_READY;
 80112d8:	687b      	ldr	r3, [r7, #4]
 80112da:	2201      	movs	r2, #1
 80112dc:	f883 2061 	strb.w	r2, [r3, #97]	@ 0x61

  return HAL_OK;
 80112e0:	2300      	movs	r3, #0
}
 80112e2:	4618      	mov	r0, r3
 80112e4:	3708      	adds	r7, #8
 80112e6:	46bd      	mov	sp, r7
 80112e8:	bd80      	pop	{r7, pc}
 80112ea:	bf00      	nop
 80112ec:	fff8ffbf 	.word	0xfff8ffbf
 80112f0:	fffffef8 	.word	0xfffffef8
 80112f4:	ffff0000 	.word	0xffff0000

080112f8 <HAL_DMA2D_IRQHandler>:
  * @param  hdma2d Pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval HAL status
  */
void HAL_DMA2D_IRQHandler(DMA2D_HandleTypeDef *hdma2d)
{
 80112f8:	b580      	push	{r7, lr}
 80112fa:	b084      	sub	sp, #16
 80112fc:	af00      	add	r7, sp, #0
 80112fe:	6078      	str	r0, [r7, #4]
  uint32_t isrflags = READ_REG(hdma2d->Instance->ISR);
 8011300:	687b      	ldr	r3, [r7, #4]
 8011302:	681b      	ldr	r3, [r3, #0]
 8011304:	685b      	ldr	r3, [r3, #4]
 8011306:	60fb      	str	r3, [r7, #12]
  uint32_t crflags = READ_REG(hdma2d->Instance->CR);
 8011308:	687b      	ldr	r3, [r7, #4]
 801130a:	681b      	ldr	r3, [r3, #0]
 801130c:	681b      	ldr	r3, [r3, #0]
 801130e:	60bb      	str	r3, [r7, #8]

  /* Transfer Error Interrupt management ***************************************/
  if ((isrflags & DMA2D_FLAG_TE) != 0U)
 8011310:	68fb      	ldr	r3, [r7, #12]
 8011312:	f003 0301 	and.w	r3, r3, #1
 8011316:	2b00      	cmp	r3, #0
 8011318:	d026      	beq.n	8011368 <HAL_DMA2D_IRQHandler+0x70>
  {
    if ((crflags & DMA2D_IT_TE) != 0U)
 801131a:	68bb      	ldr	r3, [r7, #8]
 801131c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8011320:	2b00      	cmp	r3, #0
 8011322:	d021      	beq.n	8011368 <HAL_DMA2D_IRQHandler+0x70>
    {
      /* Disable the transfer Error interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_TE);
 8011324:	687b      	ldr	r3, [r7, #4]
 8011326:	681b      	ldr	r3, [r3, #0]
 8011328:	681a      	ldr	r2, [r3, #0]
 801132a:	687b      	ldr	r3, [r7, #4]
 801132c:	681b      	ldr	r3, [r3, #0]
 801132e:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8011332:	601a      	str	r2, [r3, #0]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TE;
 8011334:	687b      	ldr	r3, [r7, #4]
 8011336:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8011338:	f043 0201 	orr.w	r2, r3, #1
 801133c:	687b      	ldr	r3, [r7, #4]
 801133e:	665a      	str	r2, [r3, #100]	@ 0x64

      /* Clear the transfer error flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TE);
 8011340:	687b      	ldr	r3, [r7, #4]
 8011342:	681b      	ldr	r3, [r3, #0]
 8011344:	2201      	movs	r2, #1
 8011346:	609a      	str	r2, [r3, #8]

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_ERROR;
 8011348:	687b      	ldr	r3, [r7, #4]
 801134a:	2204      	movs	r2, #4
 801134c:	f883 2061 	strb.w	r2, [r3, #97]	@ 0x61

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 8011350:	687b      	ldr	r3, [r7, #4]
 8011352:	2200      	movs	r2, #0
 8011354:	f883 2060 	strb.w	r2, [r3, #96]	@ 0x60

      if (hdma2d->XferErrorCallback != NULL)
 8011358:	687b      	ldr	r3, [r7, #4]
 801135a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801135c:	2b00      	cmp	r3, #0
 801135e:	d003      	beq.n	8011368 <HAL_DMA2D_IRQHandler+0x70>
      {
        /* Transfer error Callback */
        hdma2d->XferErrorCallback(hdma2d);
 8011360:	687b      	ldr	r3, [r7, #4]
 8011362:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8011364:	6878      	ldr	r0, [r7, #4]
 8011366:	4798      	blx	r3
      }
    }
  }
  /* Configuration Error Interrupt management **********************************/
  if ((isrflags & DMA2D_FLAG_CE) != 0U)
 8011368:	68fb      	ldr	r3, [r7, #12]
 801136a:	f003 0320 	and.w	r3, r3, #32
 801136e:	2b00      	cmp	r3, #0
 8011370:	d026      	beq.n	80113c0 <HAL_DMA2D_IRQHandler+0xc8>
  {
    if ((crflags & DMA2D_IT_CE) != 0U)
 8011372:	68bb      	ldr	r3, [r7, #8]
 8011374:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8011378:	2b00      	cmp	r3, #0
 801137a:	d021      	beq.n	80113c0 <HAL_DMA2D_IRQHandler+0xc8>
    {
      /* Disable the Configuration Error interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_CE);
 801137c:	687b      	ldr	r3, [r7, #4]
 801137e:	681b      	ldr	r3, [r3, #0]
 8011380:	681a      	ldr	r2, [r3, #0]
 8011382:	687b      	ldr	r3, [r7, #4]
 8011384:	681b      	ldr	r3, [r3, #0]
 8011386:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 801138a:	601a      	str	r2, [r3, #0]

      /* Clear the Configuration error flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CE);
 801138c:	687b      	ldr	r3, [r7, #4]
 801138e:	681b      	ldr	r3, [r3, #0]
 8011390:	2220      	movs	r2, #32
 8011392:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CE;
 8011394:	687b      	ldr	r3, [r7, #4]
 8011396:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8011398:	f043 0202 	orr.w	r2, r3, #2
 801139c:	687b      	ldr	r3, [r7, #4]
 801139e:	665a      	str	r2, [r3, #100]	@ 0x64

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_ERROR;
 80113a0:	687b      	ldr	r3, [r7, #4]
 80113a2:	2204      	movs	r2, #4
 80113a4:	f883 2061 	strb.w	r2, [r3, #97]	@ 0x61

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 80113a8:	687b      	ldr	r3, [r7, #4]
 80113aa:	2200      	movs	r2, #0
 80113ac:	f883 2060 	strb.w	r2, [r3, #96]	@ 0x60

      if (hdma2d->XferErrorCallback != NULL)
 80113b0:	687b      	ldr	r3, [r7, #4]
 80113b2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80113b4:	2b00      	cmp	r3, #0
 80113b6:	d003      	beq.n	80113c0 <HAL_DMA2D_IRQHandler+0xc8>
      {
        /* Transfer error Callback */
        hdma2d->XferErrorCallback(hdma2d);
 80113b8:	687b      	ldr	r3, [r7, #4]
 80113ba:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80113bc:	6878      	ldr	r0, [r7, #4]
 80113be:	4798      	blx	r3
      }
    }
  }
  /* CLUT access Error Interrupt management ***********************************/
  if ((isrflags & DMA2D_FLAG_CAE) != 0U)
 80113c0:	68fb      	ldr	r3, [r7, #12]
 80113c2:	f003 0308 	and.w	r3, r3, #8
 80113c6:	2b00      	cmp	r3, #0
 80113c8:	d026      	beq.n	8011418 <HAL_DMA2D_IRQHandler+0x120>
  {
    if ((crflags & DMA2D_IT_CAE) != 0U)
 80113ca:	68bb      	ldr	r3, [r7, #8]
 80113cc:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80113d0:	2b00      	cmp	r3, #0
 80113d2:	d021      	beq.n	8011418 <HAL_DMA2D_IRQHandler+0x120>
    {
      /* Disable the CLUT access error interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_CAE);
 80113d4:	687b      	ldr	r3, [r7, #4]
 80113d6:	681b      	ldr	r3, [r3, #0]
 80113d8:	681a      	ldr	r2, [r3, #0]
 80113da:	687b      	ldr	r3, [r7, #4]
 80113dc:	681b      	ldr	r3, [r3, #0]
 80113de:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80113e2:	601a      	str	r2, [r3, #0]

      /* Clear the CLUT access error flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CAE);
 80113e4:	687b      	ldr	r3, [r7, #4]
 80113e6:	681b      	ldr	r3, [r3, #0]
 80113e8:	2208      	movs	r2, #8
 80113ea:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CAE;
 80113ec:	687b      	ldr	r3, [r7, #4]
 80113ee:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80113f0:	f043 0204 	orr.w	r2, r3, #4
 80113f4:	687b      	ldr	r3, [r7, #4]
 80113f6:	665a      	str	r2, [r3, #100]	@ 0x64

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_ERROR;
 80113f8:	687b      	ldr	r3, [r7, #4]
 80113fa:	2204      	movs	r2, #4
 80113fc:	f883 2061 	strb.w	r2, [r3, #97]	@ 0x61

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 8011400:	687b      	ldr	r3, [r7, #4]
 8011402:	2200      	movs	r2, #0
 8011404:	f883 2060 	strb.w	r2, [r3, #96]	@ 0x60

      if (hdma2d->XferErrorCallback != NULL)
 8011408:	687b      	ldr	r3, [r7, #4]
 801140a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801140c:	2b00      	cmp	r3, #0
 801140e:	d003      	beq.n	8011418 <HAL_DMA2D_IRQHandler+0x120>
      {
        /* Transfer error Callback */
        hdma2d->XferErrorCallback(hdma2d);
 8011410:	687b      	ldr	r3, [r7, #4]
 8011412:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8011414:	6878      	ldr	r0, [r7, #4]
 8011416:	4798      	blx	r3
      }
    }
  }
  /* Transfer watermark Interrupt management **********************************/
  if ((isrflags & DMA2D_FLAG_TW) != 0U)
 8011418:	68fb      	ldr	r3, [r7, #12]
 801141a:	f003 0304 	and.w	r3, r3, #4
 801141e:	2b00      	cmp	r3, #0
 8011420:	d013      	beq.n	801144a <HAL_DMA2D_IRQHandler+0x152>
  {
    if ((crflags & DMA2D_IT_TW) != 0U)
 8011422:	68bb      	ldr	r3, [r7, #8]
 8011424:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8011428:	2b00      	cmp	r3, #0
 801142a:	d00e      	beq.n	801144a <HAL_DMA2D_IRQHandler+0x152>
    {
      /* Disable the transfer watermark interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_TW);
 801142c:	687b      	ldr	r3, [r7, #4]
 801142e:	681b      	ldr	r3, [r3, #0]
 8011430:	681a      	ldr	r2, [r3, #0]
 8011432:	687b      	ldr	r3, [r7, #4]
 8011434:	681b      	ldr	r3, [r3, #0]
 8011436:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 801143a:	601a      	str	r2, [r3, #0]

      /* Clear the transfer watermark flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TW);
 801143c:	687b      	ldr	r3, [r7, #4]
 801143e:	681b      	ldr	r3, [r3, #0]
 8011440:	2204      	movs	r2, #4
 8011442:	609a      	str	r2, [r3, #8]

      /* Transfer watermark Callback */
#if (USE_HAL_DMA2D_REGISTER_CALLBACKS == 1)
      hdma2d->LineEventCallback(hdma2d);
#else
      HAL_DMA2D_LineEventCallback(hdma2d);
 8011444:	6878      	ldr	r0, [r7, #4]
 8011446:	f000 f853 	bl	80114f0 <HAL_DMA2D_LineEventCallback>
#endif /* USE_HAL_DMA2D_REGISTER_CALLBACKS */

    }
  }
  /* Transfer Complete Interrupt management ************************************/
  if ((isrflags & DMA2D_FLAG_TC) != 0U)
 801144a:	68fb      	ldr	r3, [r7, #12]
 801144c:	f003 0302 	and.w	r3, r3, #2
 8011450:	2b00      	cmp	r3, #0
 8011452:	d024      	beq.n	801149e <HAL_DMA2D_IRQHandler+0x1a6>
  {
    if ((crflags & DMA2D_IT_TC) != 0U)
 8011454:	68bb      	ldr	r3, [r7, #8]
 8011456:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 801145a:	2b00      	cmp	r3, #0
 801145c:	d01f      	beq.n	801149e <HAL_DMA2D_IRQHandler+0x1a6>
    {
      /* Disable the transfer complete interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_TC);
 801145e:	687b      	ldr	r3, [r7, #4]
 8011460:	681b      	ldr	r3, [r3, #0]
 8011462:	681a      	ldr	r2, [r3, #0]
 8011464:	687b      	ldr	r3, [r7, #4]
 8011466:	681b      	ldr	r3, [r3, #0]
 8011468:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 801146c:	601a      	str	r2, [r3, #0]

      /* Clear the transfer complete flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TC);
 801146e:	687b      	ldr	r3, [r7, #4]
 8011470:	681b      	ldr	r3, [r3, #0]
 8011472:	2202      	movs	r2, #2
 8011474:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_NONE;
 8011476:	687b      	ldr	r3, [r7, #4]
 8011478:	6e5a      	ldr	r2, [r3, #100]	@ 0x64
 801147a:	687b      	ldr	r3, [r7, #4]
 801147c:	665a      	str	r2, [r3, #100]	@ 0x64

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_READY;
 801147e:	687b      	ldr	r3, [r7, #4]
 8011480:	2201      	movs	r2, #1
 8011482:	f883 2061 	strb.w	r2, [r3, #97]	@ 0x61

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 8011486:	687b      	ldr	r3, [r7, #4]
 8011488:	2200      	movs	r2, #0
 801148a:	f883 2060 	strb.w	r2, [r3, #96]	@ 0x60

      if (hdma2d->XferCpltCallback != NULL)
 801148e:	687b      	ldr	r3, [r7, #4]
 8011490:	6a1b      	ldr	r3, [r3, #32]
 8011492:	2b00      	cmp	r3, #0
 8011494:	d003      	beq.n	801149e <HAL_DMA2D_IRQHandler+0x1a6>
      {
        /* Transfer complete Callback */
        hdma2d->XferCpltCallback(hdma2d);
 8011496:	687b      	ldr	r3, [r7, #4]
 8011498:	6a1b      	ldr	r3, [r3, #32]
 801149a:	6878      	ldr	r0, [r7, #4]
 801149c:	4798      	blx	r3
      }
    }
  }
  /* CLUT Transfer Complete Interrupt management ******************************/
  if ((isrflags & DMA2D_FLAG_CTC) != 0U)
 801149e:	68fb      	ldr	r3, [r7, #12]
 80114a0:	f003 0310 	and.w	r3, r3, #16
 80114a4:	2b00      	cmp	r3, #0
 80114a6:	d01f      	beq.n	80114e8 <HAL_DMA2D_IRQHandler+0x1f0>
  {
    if ((crflags & DMA2D_IT_CTC) != 0U)
 80114a8:	68bb      	ldr	r3, [r7, #8]
 80114aa:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80114ae:	2b00      	cmp	r3, #0
 80114b0:	d01a      	beq.n	80114e8 <HAL_DMA2D_IRQHandler+0x1f0>
    {
      /* Disable the CLUT transfer complete interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_CTC);
 80114b2:	687b      	ldr	r3, [r7, #4]
 80114b4:	681b      	ldr	r3, [r3, #0]
 80114b6:	681a      	ldr	r2, [r3, #0]
 80114b8:	687b      	ldr	r3, [r7, #4]
 80114ba:	681b      	ldr	r3, [r3, #0]
 80114bc:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 80114c0:	601a      	str	r2, [r3, #0]

      /* Clear the CLUT transfer complete flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CTC);
 80114c2:	687b      	ldr	r3, [r7, #4]
 80114c4:	681b      	ldr	r3, [r3, #0]
 80114c6:	2210      	movs	r2, #16
 80114c8:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_NONE;
 80114ca:	687b      	ldr	r3, [r7, #4]
 80114cc:	6e5a      	ldr	r2, [r3, #100]	@ 0x64
 80114ce:	687b      	ldr	r3, [r7, #4]
 80114d0:	665a      	str	r2, [r3, #100]	@ 0x64

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_READY;
 80114d2:	687b      	ldr	r3, [r7, #4]
 80114d4:	2201      	movs	r2, #1
 80114d6:	f883 2061 	strb.w	r2, [r3, #97]	@ 0x61

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 80114da:	687b      	ldr	r3, [r7, #4]
 80114dc:	2200      	movs	r2, #0
 80114de:	f883 2060 	strb.w	r2, [r3, #96]	@ 0x60

      /* CLUT Transfer complete Callback */
#if (USE_HAL_DMA2D_REGISTER_CALLBACKS == 1)
      hdma2d->CLUTLoadingCpltCallback(hdma2d);
#else
      HAL_DMA2D_CLUTLoadingCpltCallback(hdma2d);
 80114e2:	6878      	ldr	r0, [r7, #4]
 80114e4:	f000 f80e 	bl	8011504 <HAL_DMA2D_CLUTLoadingCpltCallback>
#endif /* USE_HAL_DMA2D_REGISTER_CALLBACKS */
    }
  }

}
 80114e8:	bf00      	nop
 80114ea:	3710      	adds	r7, #16
 80114ec:	46bd      	mov	sp, r7
 80114ee:	bd80      	pop	{r7, pc}

080114f0 <HAL_DMA2D_LineEventCallback>:
  * @param  hdma2d pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval None
  */
__weak void HAL_DMA2D_LineEventCallback(DMA2D_HandleTypeDef *hdma2d)
{
 80114f0:	b480      	push	{r7}
 80114f2:	b083      	sub	sp, #12
 80114f4:	af00      	add	r7, sp, #0
 80114f6:	6078      	str	r0, [r7, #4]
  UNUSED(hdma2d);

  /* NOTE : This function should not be modified; when the callback is needed,
            the HAL_DMA2D_LineEventCallback can be implemented in the user file.
   */
}
 80114f8:	bf00      	nop
 80114fa:	370c      	adds	r7, #12
 80114fc:	46bd      	mov	sp, r7
 80114fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011502:	4770      	bx	lr

08011504 <HAL_DMA2D_CLUTLoadingCpltCallback>:
  * @param  hdma2d pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval None
  */
__weak void HAL_DMA2D_CLUTLoadingCpltCallback(DMA2D_HandleTypeDef *hdma2d)
{
 8011504:	b480      	push	{r7}
 8011506:	b083      	sub	sp, #12
 8011508:	af00      	add	r7, sp, #0
 801150a:	6078      	str	r0, [r7, #4]
  UNUSED(hdma2d);

  /* NOTE : This function should not be modified; when the callback is needed,
            the HAL_DMA2D_CLUTLoadingCpltCallback can be implemented in the user file.
   */
}
 801150c:	bf00      	nop
 801150e:	370c      	adds	r7, #12
 8011510:	46bd      	mov	sp, r7
 8011512:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011516:	4770      	bx	lr

08011518 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8011518:	b480      	push	{r7}
 801151a:	b089      	sub	sp, #36	@ 0x24
 801151c:	af00      	add	r7, sp, #0
 801151e:	6078      	str	r0, [r7, #4]
 8011520:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8011522:	2300      	movs	r3, #0
 8011524:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 8011526:	4b89      	ldr	r3, [pc, #548]	@ (801174c <HAL_GPIO_Init+0x234>)
 8011528:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 801152a:	e194      	b.n	8011856 <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 801152c:	683b      	ldr	r3, [r7, #0]
 801152e:	681a      	ldr	r2, [r3, #0]
 8011530:	2101      	movs	r1, #1
 8011532:	69fb      	ldr	r3, [r7, #28]
 8011534:	fa01 f303 	lsl.w	r3, r1, r3
 8011538:	4013      	ands	r3, r2
 801153a:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 801153c:	693b      	ldr	r3, [r7, #16]
 801153e:	2b00      	cmp	r3, #0
 8011540:	f000 8186 	beq.w	8011850 <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8011544:	683b      	ldr	r3, [r7, #0]
 8011546:	685b      	ldr	r3, [r3, #4]
 8011548:	f003 0303 	and.w	r3, r3, #3
 801154c:	2b01      	cmp	r3, #1
 801154e:	d005      	beq.n	801155c <HAL_GPIO_Init+0x44>
 8011550:	683b      	ldr	r3, [r7, #0]
 8011552:	685b      	ldr	r3, [r3, #4]
 8011554:	f003 0303 	and.w	r3, r3, #3
 8011558:	2b02      	cmp	r3, #2
 801155a:	d130      	bne.n	80115be <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 801155c:	687b      	ldr	r3, [r7, #4]
 801155e:	689b      	ldr	r3, [r3, #8]
 8011560:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8011562:	69fb      	ldr	r3, [r7, #28]
 8011564:	005b      	lsls	r3, r3, #1
 8011566:	2203      	movs	r2, #3
 8011568:	fa02 f303 	lsl.w	r3, r2, r3
 801156c:	43db      	mvns	r3, r3
 801156e:	69ba      	ldr	r2, [r7, #24]
 8011570:	4013      	ands	r3, r2
 8011572:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8011574:	683b      	ldr	r3, [r7, #0]
 8011576:	68da      	ldr	r2, [r3, #12]
 8011578:	69fb      	ldr	r3, [r7, #28]
 801157a:	005b      	lsls	r3, r3, #1
 801157c:	fa02 f303 	lsl.w	r3, r2, r3
 8011580:	69ba      	ldr	r2, [r7, #24]
 8011582:	4313      	orrs	r3, r2
 8011584:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8011586:	687b      	ldr	r3, [r7, #4]
 8011588:	69ba      	ldr	r2, [r7, #24]
 801158a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 801158c:	687b      	ldr	r3, [r7, #4]
 801158e:	685b      	ldr	r3, [r3, #4]
 8011590:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8011592:	2201      	movs	r2, #1
 8011594:	69fb      	ldr	r3, [r7, #28]
 8011596:	fa02 f303 	lsl.w	r3, r2, r3
 801159a:	43db      	mvns	r3, r3
 801159c:	69ba      	ldr	r2, [r7, #24]
 801159e:	4013      	ands	r3, r2
 80115a0:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80115a2:	683b      	ldr	r3, [r7, #0]
 80115a4:	685b      	ldr	r3, [r3, #4]
 80115a6:	091b      	lsrs	r3, r3, #4
 80115a8:	f003 0201 	and.w	r2, r3, #1
 80115ac:	69fb      	ldr	r3, [r7, #28]
 80115ae:	fa02 f303 	lsl.w	r3, r2, r3
 80115b2:	69ba      	ldr	r2, [r7, #24]
 80115b4:	4313      	orrs	r3, r2
 80115b6:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80115b8:	687b      	ldr	r3, [r7, #4]
 80115ba:	69ba      	ldr	r2, [r7, #24]
 80115bc:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80115be:	683b      	ldr	r3, [r7, #0]
 80115c0:	685b      	ldr	r3, [r3, #4]
 80115c2:	f003 0303 	and.w	r3, r3, #3
 80115c6:	2b03      	cmp	r3, #3
 80115c8:	d017      	beq.n	80115fa <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 80115ca:	687b      	ldr	r3, [r7, #4]
 80115cc:	68db      	ldr	r3, [r3, #12]
 80115ce:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80115d0:	69fb      	ldr	r3, [r7, #28]
 80115d2:	005b      	lsls	r3, r3, #1
 80115d4:	2203      	movs	r2, #3
 80115d6:	fa02 f303 	lsl.w	r3, r2, r3
 80115da:	43db      	mvns	r3, r3
 80115dc:	69ba      	ldr	r2, [r7, #24]
 80115de:	4013      	ands	r3, r2
 80115e0:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 80115e2:	683b      	ldr	r3, [r7, #0]
 80115e4:	689a      	ldr	r2, [r3, #8]
 80115e6:	69fb      	ldr	r3, [r7, #28]
 80115e8:	005b      	lsls	r3, r3, #1
 80115ea:	fa02 f303 	lsl.w	r3, r2, r3
 80115ee:	69ba      	ldr	r2, [r7, #24]
 80115f0:	4313      	orrs	r3, r2
 80115f2:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 80115f4:	687b      	ldr	r3, [r7, #4]
 80115f6:	69ba      	ldr	r2, [r7, #24]
 80115f8:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80115fa:	683b      	ldr	r3, [r7, #0]
 80115fc:	685b      	ldr	r3, [r3, #4]
 80115fe:	f003 0303 	and.w	r3, r3, #3
 8011602:	2b02      	cmp	r3, #2
 8011604:	d123      	bne.n	801164e <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8011606:	69fb      	ldr	r3, [r7, #28]
 8011608:	08da      	lsrs	r2, r3, #3
 801160a:	687b      	ldr	r3, [r7, #4]
 801160c:	3208      	adds	r2, #8
 801160e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8011612:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8011614:	69fb      	ldr	r3, [r7, #28]
 8011616:	f003 0307 	and.w	r3, r3, #7
 801161a:	009b      	lsls	r3, r3, #2
 801161c:	220f      	movs	r2, #15
 801161e:	fa02 f303 	lsl.w	r3, r2, r3
 8011622:	43db      	mvns	r3, r3
 8011624:	69ba      	ldr	r2, [r7, #24]
 8011626:	4013      	ands	r3, r2
 8011628:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 801162a:	683b      	ldr	r3, [r7, #0]
 801162c:	691a      	ldr	r2, [r3, #16]
 801162e:	69fb      	ldr	r3, [r7, #28]
 8011630:	f003 0307 	and.w	r3, r3, #7
 8011634:	009b      	lsls	r3, r3, #2
 8011636:	fa02 f303 	lsl.w	r3, r2, r3
 801163a:	69ba      	ldr	r2, [r7, #24]
 801163c:	4313      	orrs	r3, r2
 801163e:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8011640:	69fb      	ldr	r3, [r7, #28]
 8011642:	08da      	lsrs	r2, r3, #3
 8011644:	687b      	ldr	r3, [r7, #4]
 8011646:	3208      	adds	r2, #8
 8011648:	69b9      	ldr	r1, [r7, #24]
 801164a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 801164e:	687b      	ldr	r3, [r7, #4]
 8011650:	681b      	ldr	r3, [r3, #0]
 8011652:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8011654:	69fb      	ldr	r3, [r7, #28]
 8011656:	005b      	lsls	r3, r3, #1
 8011658:	2203      	movs	r2, #3
 801165a:	fa02 f303 	lsl.w	r3, r2, r3
 801165e:	43db      	mvns	r3, r3
 8011660:	69ba      	ldr	r2, [r7, #24]
 8011662:	4013      	ands	r3, r2
 8011664:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8011666:	683b      	ldr	r3, [r7, #0]
 8011668:	685b      	ldr	r3, [r3, #4]
 801166a:	f003 0203 	and.w	r2, r3, #3
 801166e:	69fb      	ldr	r3, [r7, #28]
 8011670:	005b      	lsls	r3, r3, #1
 8011672:	fa02 f303 	lsl.w	r3, r2, r3
 8011676:	69ba      	ldr	r2, [r7, #24]
 8011678:	4313      	orrs	r3, r2
 801167a:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 801167c:	687b      	ldr	r3, [r7, #4]
 801167e:	69ba      	ldr	r2, [r7, #24]
 8011680:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8011682:	683b      	ldr	r3, [r7, #0]
 8011684:	685b      	ldr	r3, [r3, #4]
 8011686:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 801168a:	2b00      	cmp	r3, #0
 801168c:	f000 80e0 	beq.w	8011850 <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8011690:	4b2f      	ldr	r3, [pc, #188]	@ (8011750 <HAL_GPIO_Init+0x238>)
 8011692:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8011696:	4a2e      	ldr	r2, [pc, #184]	@ (8011750 <HAL_GPIO_Init+0x238>)
 8011698:	f043 0302 	orr.w	r3, r3, #2
 801169c:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 80116a0:	4b2b      	ldr	r3, [pc, #172]	@ (8011750 <HAL_GPIO_Init+0x238>)
 80116a2:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 80116a6:	f003 0302 	and.w	r3, r3, #2
 80116aa:	60fb      	str	r3, [r7, #12]
 80116ac:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80116ae:	4a29      	ldr	r2, [pc, #164]	@ (8011754 <HAL_GPIO_Init+0x23c>)
 80116b0:	69fb      	ldr	r3, [r7, #28]
 80116b2:	089b      	lsrs	r3, r3, #2
 80116b4:	3302      	adds	r3, #2
 80116b6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80116ba:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 80116bc:	69fb      	ldr	r3, [r7, #28]
 80116be:	f003 0303 	and.w	r3, r3, #3
 80116c2:	009b      	lsls	r3, r3, #2
 80116c4:	220f      	movs	r2, #15
 80116c6:	fa02 f303 	lsl.w	r3, r2, r3
 80116ca:	43db      	mvns	r3, r3
 80116cc:	69ba      	ldr	r2, [r7, #24]
 80116ce:	4013      	ands	r3, r2
 80116d0:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 80116d2:	687b      	ldr	r3, [r7, #4]
 80116d4:	4a20      	ldr	r2, [pc, #128]	@ (8011758 <HAL_GPIO_Init+0x240>)
 80116d6:	4293      	cmp	r3, r2
 80116d8:	d052      	beq.n	8011780 <HAL_GPIO_Init+0x268>
 80116da:	687b      	ldr	r3, [r7, #4]
 80116dc:	4a1f      	ldr	r2, [pc, #124]	@ (801175c <HAL_GPIO_Init+0x244>)
 80116de:	4293      	cmp	r3, r2
 80116e0:	d031      	beq.n	8011746 <HAL_GPIO_Init+0x22e>
 80116e2:	687b      	ldr	r3, [r7, #4]
 80116e4:	4a1e      	ldr	r2, [pc, #120]	@ (8011760 <HAL_GPIO_Init+0x248>)
 80116e6:	4293      	cmp	r3, r2
 80116e8:	d02b      	beq.n	8011742 <HAL_GPIO_Init+0x22a>
 80116ea:	687b      	ldr	r3, [r7, #4]
 80116ec:	4a1d      	ldr	r2, [pc, #116]	@ (8011764 <HAL_GPIO_Init+0x24c>)
 80116ee:	4293      	cmp	r3, r2
 80116f0:	d025      	beq.n	801173e <HAL_GPIO_Init+0x226>
 80116f2:	687b      	ldr	r3, [r7, #4]
 80116f4:	4a1c      	ldr	r2, [pc, #112]	@ (8011768 <HAL_GPIO_Init+0x250>)
 80116f6:	4293      	cmp	r3, r2
 80116f8:	d01f      	beq.n	801173a <HAL_GPIO_Init+0x222>
 80116fa:	687b      	ldr	r3, [r7, #4]
 80116fc:	4a1b      	ldr	r2, [pc, #108]	@ (801176c <HAL_GPIO_Init+0x254>)
 80116fe:	4293      	cmp	r3, r2
 8011700:	d019      	beq.n	8011736 <HAL_GPIO_Init+0x21e>
 8011702:	687b      	ldr	r3, [r7, #4]
 8011704:	4a1a      	ldr	r2, [pc, #104]	@ (8011770 <HAL_GPIO_Init+0x258>)
 8011706:	4293      	cmp	r3, r2
 8011708:	d013      	beq.n	8011732 <HAL_GPIO_Init+0x21a>
 801170a:	687b      	ldr	r3, [r7, #4]
 801170c:	4a19      	ldr	r2, [pc, #100]	@ (8011774 <HAL_GPIO_Init+0x25c>)
 801170e:	4293      	cmp	r3, r2
 8011710:	d00d      	beq.n	801172e <HAL_GPIO_Init+0x216>
 8011712:	687b      	ldr	r3, [r7, #4]
 8011714:	4a18      	ldr	r2, [pc, #96]	@ (8011778 <HAL_GPIO_Init+0x260>)
 8011716:	4293      	cmp	r3, r2
 8011718:	d007      	beq.n	801172a <HAL_GPIO_Init+0x212>
 801171a:	687b      	ldr	r3, [r7, #4]
 801171c:	4a17      	ldr	r2, [pc, #92]	@ (801177c <HAL_GPIO_Init+0x264>)
 801171e:	4293      	cmp	r3, r2
 8011720:	d101      	bne.n	8011726 <HAL_GPIO_Init+0x20e>
 8011722:	2309      	movs	r3, #9
 8011724:	e02d      	b.n	8011782 <HAL_GPIO_Init+0x26a>
 8011726:	230a      	movs	r3, #10
 8011728:	e02b      	b.n	8011782 <HAL_GPIO_Init+0x26a>
 801172a:	2308      	movs	r3, #8
 801172c:	e029      	b.n	8011782 <HAL_GPIO_Init+0x26a>
 801172e:	2307      	movs	r3, #7
 8011730:	e027      	b.n	8011782 <HAL_GPIO_Init+0x26a>
 8011732:	2306      	movs	r3, #6
 8011734:	e025      	b.n	8011782 <HAL_GPIO_Init+0x26a>
 8011736:	2305      	movs	r3, #5
 8011738:	e023      	b.n	8011782 <HAL_GPIO_Init+0x26a>
 801173a:	2304      	movs	r3, #4
 801173c:	e021      	b.n	8011782 <HAL_GPIO_Init+0x26a>
 801173e:	2303      	movs	r3, #3
 8011740:	e01f      	b.n	8011782 <HAL_GPIO_Init+0x26a>
 8011742:	2302      	movs	r3, #2
 8011744:	e01d      	b.n	8011782 <HAL_GPIO_Init+0x26a>
 8011746:	2301      	movs	r3, #1
 8011748:	e01b      	b.n	8011782 <HAL_GPIO_Init+0x26a>
 801174a:	bf00      	nop
 801174c:	58000080 	.word	0x58000080
 8011750:	58024400 	.word	0x58024400
 8011754:	58000400 	.word	0x58000400
 8011758:	58020000 	.word	0x58020000
 801175c:	58020400 	.word	0x58020400
 8011760:	58020800 	.word	0x58020800
 8011764:	58020c00 	.word	0x58020c00
 8011768:	58021000 	.word	0x58021000
 801176c:	58021400 	.word	0x58021400
 8011770:	58021800 	.word	0x58021800
 8011774:	58021c00 	.word	0x58021c00
 8011778:	58022000 	.word	0x58022000
 801177c:	58022400 	.word	0x58022400
 8011780:	2300      	movs	r3, #0
 8011782:	69fa      	ldr	r2, [r7, #28]
 8011784:	f002 0203 	and.w	r2, r2, #3
 8011788:	0092      	lsls	r2, r2, #2
 801178a:	4093      	lsls	r3, r2
 801178c:	69ba      	ldr	r2, [r7, #24]
 801178e:	4313      	orrs	r3, r2
 8011790:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8011792:	4938      	ldr	r1, [pc, #224]	@ (8011874 <HAL_GPIO_Init+0x35c>)
 8011794:	69fb      	ldr	r3, [r7, #28]
 8011796:	089b      	lsrs	r3, r3, #2
 8011798:	3302      	adds	r3, #2
 801179a:	69ba      	ldr	r2, [r7, #24]
 801179c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80117a0:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80117a4:	681b      	ldr	r3, [r3, #0]
 80117a6:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80117a8:	693b      	ldr	r3, [r7, #16]
 80117aa:	43db      	mvns	r3, r3
 80117ac:	69ba      	ldr	r2, [r7, #24]
 80117ae:	4013      	ands	r3, r2
 80117b0:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80117b2:	683b      	ldr	r3, [r7, #0]
 80117b4:	685b      	ldr	r3, [r3, #4]
 80117b6:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80117ba:	2b00      	cmp	r3, #0
 80117bc:	d003      	beq.n	80117c6 <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 80117be:	69ba      	ldr	r2, [r7, #24]
 80117c0:	693b      	ldr	r3, [r7, #16]
 80117c2:	4313      	orrs	r3, r2
 80117c4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 80117c6:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 80117ca:	69bb      	ldr	r3, [r7, #24]
 80117cc:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 80117ce:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80117d2:	685b      	ldr	r3, [r3, #4]
 80117d4:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80117d6:	693b      	ldr	r3, [r7, #16]
 80117d8:	43db      	mvns	r3, r3
 80117da:	69ba      	ldr	r2, [r7, #24]
 80117dc:	4013      	ands	r3, r2
 80117de:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80117e0:	683b      	ldr	r3, [r7, #0]
 80117e2:	685b      	ldr	r3, [r3, #4]
 80117e4:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80117e8:	2b00      	cmp	r3, #0
 80117ea:	d003      	beq.n	80117f4 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 80117ec:	69ba      	ldr	r2, [r7, #24]
 80117ee:	693b      	ldr	r3, [r7, #16]
 80117f0:	4313      	orrs	r3, r2
 80117f2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 80117f4:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 80117f8:	69bb      	ldr	r3, [r7, #24]
 80117fa:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 80117fc:	697b      	ldr	r3, [r7, #20]
 80117fe:	685b      	ldr	r3, [r3, #4]
 8011800:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8011802:	693b      	ldr	r3, [r7, #16]
 8011804:	43db      	mvns	r3, r3
 8011806:	69ba      	ldr	r2, [r7, #24]
 8011808:	4013      	ands	r3, r2
 801180a:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 801180c:	683b      	ldr	r3, [r7, #0]
 801180e:	685b      	ldr	r3, [r3, #4]
 8011810:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8011814:	2b00      	cmp	r3, #0
 8011816:	d003      	beq.n	8011820 <HAL_GPIO_Init+0x308>
        {
          temp |= iocurrent;
 8011818:	69ba      	ldr	r2, [r7, #24]
 801181a:	693b      	ldr	r3, [r7, #16]
 801181c:	4313      	orrs	r3, r2
 801181e:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 8011820:	697b      	ldr	r3, [r7, #20]
 8011822:	69ba      	ldr	r2, [r7, #24]
 8011824:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 8011826:	697b      	ldr	r3, [r7, #20]
 8011828:	681b      	ldr	r3, [r3, #0]
 801182a:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 801182c:	693b      	ldr	r3, [r7, #16]
 801182e:	43db      	mvns	r3, r3
 8011830:	69ba      	ldr	r2, [r7, #24]
 8011832:	4013      	ands	r3, r2
 8011834:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8011836:	683b      	ldr	r3, [r7, #0]
 8011838:	685b      	ldr	r3, [r3, #4]
 801183a:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 801183e:	2b00      	cmp	r3, #0
 8011840:	d003      	beq.n	801184a <HAL_GPIO_Init+0x332>
        {
          temp |= iocurrent;
 8011842:	69ba      	ldr	r2, [r7, #24]
 8011844:	693b      	ldr	r3, [r7, #16]
 8011846:	4313      	orrs	r3, r2
 8011848:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 801184a:	697b      	ldr	r3, [r7, #20]
 801184c:	69ba      	ldr	r2, [r7, #24]
 801184e:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 8011850:	69fb      	ldr	r3, [r7, #28]
 8011852:	3301      	adds	r3, #1
 8011854:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8011856:	683b      	ldr	r3, [r7, #0]
 8011858:	681a      	ldr	r2, [r3, #0]
 801185a:	69fb      	ldr	r3, [r7, #28]
 801185c:	fa22 f303 	lsr.w	r3, r2, r3
 8011860:	2b00      	cmp	r3, #0
 8011862:	f47f ae63 	bne.w	801152c <HAL_GPIO_Init+0x14>
  }
}
 8011866:	bf00      	nop
 8011868:	bf00      	nop
 801186a:	3724      	adds	r7, #36	@ 0x24
 801186c:	46bd      	mov	sp, r7
 801186e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011872:	4770      	bx	lr
 8011874:	58000400 	.word	0x58000400

08011878 <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin: specifies the port bit to be written.
  *          This parameter can be one of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 8011878:	b480      	push	{r7}
 801187a:	b087      	sub	sp, #28
 801187c:	af00      	add	r7, sp, #0
 801187e:	6078      	str	r0, [r7, #4]
 8011880:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8011882:	2300      	movs	r3, #0
 8011884:	617b      	str	r3, [r7, #20]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 8011886:	4b75      	ldr	r3, [pc, #468]	@ (8011a5c <HAL_GPIO_DeInit+0x1e4>)
 8011888:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* Configure the port pins */
  while ((GPIO_Pin >> position) != 0x00U)
 801188a:	e0d9      	b.n	8011a40 <HAL_GPIO_DeInit+0x1c8>
  {
    /* Get current io position */
    iocurrent = GPIO_Pin & (1UL << position) ;
 801188c:	2201      	movs	r2, #1
 801188e:	697b      	ldr	r3, [r7, #20]
 8011890:	fa02 f303 	lsl.w	r3, r2, r3
 8011894:	683a      	ldr	r2, [r7, #0]
 8011896:	4013      	ands	r3, r2
 8011898:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00U)
 801189a:	68fb      	ldr	r3, [r7, #12]
 801189c:	2b00      	cmp	r3, #0
 801189e:	f000 80cc 	beq.w	8011a3a <HAL_GPIO_DeInit+0x1c2>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      /* Clear the External Interrupt or Event for the current IO */
      tmp = SYSCFG->EXTICR[position >> 2U];
 80118a2:	4a6f      	ldr	r2, [pc, #444]	@ (8011a60 <HAL_GPIO_DeInit+0x1e8>)
 80118a4:	697b      	ldr	r3, [r7, #20]
 80118a6:	089b      	lsrs	r3, r3, #2
 80118a8:	3302      	adds	r3, #2
 80118aa:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80118ae:	60bb      	str	r3, [r7, #8]
      tmp &= (0x0FUL << (4U * (position & 0x03U)));
 80118b0:	697b      	ldr	r3, [r7, #20]
 80118b2:	f003 0303 	and.w	r3, r3, #3
 80118b6:	009b      	lsls	r3, r3, #2
 80118b8:	220f      	movs	r2, #15
 80118ba:	fa02 f303 	lsl.w	r3, r2, r3
 80118be:	68ba      	ldr	r2, [r7, #8]
 80118c0:	4013      	ands	r3, r2
 80118c2:	60bb      	str	r3, [r7, #8]
      if (tmp == (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U))))
 80118c4:	687b      	ldr	r3, [r7, #4]
 80118c6:	4a67      	ldr	r2, [pc, #412]	@ (8011a64 <HAL_GPIO_DeInit+0x1ec>)
 80118c8:	4293      	cmp	r3, r2
 80118ca:	d037      	beq.n	801193c <HAL_GPIO_DeInit+0xc4>
 80118cc:	687b      	ldr	r3, [r7, #4]
 80118ce:	4a66      	ldr	r2, [pc, #408]	@ (8011a68 <HAL_GPIO_DeInit+0x1f0>)
 80118d0:	4293      	cmp	r3, r2
 80118d2:	d031      	beq.n	8011938 <HAL_GPIO_DeInit+0xc0>
 80118d4:	687b      	ldr	r3, [r7, #4]
 80118d6:	4a65      	ldr	r2, [pc, #404]	@ (8011a6c <HAL_GPIO_DeInit+0x1f4>)
 80118d8:	4293      	cmp	r3, r2
 80118da:	d02b      	beq.n	8011934 <HAL_GPIO_DeInit+0xbc>
 80118dc:	687b      	ldr	r3, [r7, #4]
 80118de:	4a64      	ldr	r2, [pc, #400]	@ (8011a70 <HAL_GPIO_DeInit+0x1f8>)
 80118e0:	4293      	cmp	r3, r2
 80118e2:	d025      	beq.n	8011930 <HAL_GPIO_DeInit+0xb8>
 80118e4:	687b      	ldr	r3, [r7, #4]
 80118e6:	4a63      	ldr	r2, [pc, #396]	@ (8011a74 <HAL_GPIO_DeInit+0x1fc>)
 80118e8:	4293      	cmp	r3, r2
 80118ea:	d01f      	beq.n	801192c <HAL_GPIO_DeInit+0xb4>
 80118ec:	687b      	ldr	r3, [r7, #4]
 80118ee:	4a62      	ldr	r2, [pc, #392]	@ (8011a78 <HAL_GPIO_DeInit+0x200>)
 80118f0:	4293      	cmp	r3, r2
 80118f2:	d019      	beq.n	8011928 <HAL_GPIO_DeInit+0xb0>
 80118f4:	687b      	ldr	r3, [r7, #4]
 80118f6:	4a61      	ldr	r2, [pc, #388]	@ (8011a7c <HAL_GPIO_DeInit+0x204>)
 80118f8:	4293      	cmp	r3, r2
 80118fa:	d013      	beq.n	8011924 <HAL_GPIO_DeInit+0xac>
 80118fc:	687b      	ldr	r3, [r7, #4]
 80118fe:	4a60      	ldr	r2, [pc, #384]	@ (8011a80 <HAL_GPIO_DeInit+0x208>)
 8011900:	4293      	cmp	r3, r2
 8011902:	d00d      	beq.n	8011920 <HAL_GPIO_DeInit+0xa8>
 8011904:	687b      	ldr	r3, [r7, #4]
 8011906:	4a5f      	ldr	r2, [pc, #380]	@ (8011a84 <HAL_GPIO_DeInit+0x20c>)
 8011908:	4293      	cmp	r3, r2
 801190a:	d007      	beq.n	801191c <HAL_GPIO_DeInit+0xa4>
 801190c:	687b      	ldr	r3, [r7, #4]
 801190e:	4a5e      	ldr	r2, [pc, #376]	@ (8011a88 <HAL_GPIO_DeInit+0x210>)
 8011910:	4293      	cmp	r3, r2
 8011912:	d101      	bne.n	8011918 <HAL_GPIO_DeInit+0xa0>
 8011914:	2309      	movs	r3, #9
 8011916:	e012      	b.n	801193e <HAL_GPIO_DeInit+0xc6>
 8011918:	230a      	movs	r3, #10
 801191a:	e010      	b.n	801193e <HAL_GPIO_DeInit+0xc6>
 801191c:	2308      	movs	r3, #8
 801191e:	e00e      	b.n	801193e <HAL_GPIO_DeInit+0xc6>
 8011920:	2307      	movs	r3, #7
 8011922:	e00c      	b.n	801193e <HAL_GPIO_DeInit+0xc6>
 8011924:	2306      	movs	r3, #6
 8011926:	e00a      	b.n	801193e <HAL_GPIO_DeInit+0xc6>
 8011928:	2305      	movs	r3, #5
 801192a:	e008      	b.n	801193e <HAL_GPIO_DeInit+0xc6>
 801192c:	2304      	movs	r3, #4
 801192e:	e006      	b.n	801193e <HAL_GPIO_DeInit+0xc6>
 8011930:	2303      	movs	r3, #3
 8011932:	e004      	b.n	801193e <HAL_GPIO_DeInit+0xc6>
 8011934:	2302      	movs	r3, #2
 8011936:	e002      	b.n	801193e <HAL_GPIO_DeInit+0xc6>
 8011938:	2301      	movs	r3, #1
 801193a:	e000      	b.n	801193e <HAL_GPIO_DeInit+0xc6>
 801193c:	2300      	movs	r3, #0
 801193e:	697a      	ldr	r2, [r7, #20]
 8011940:	f002 0203 	and.w	r2, r2, #3
 8011944:	0092      	lsls	r2, r2, #2
 8011946:	4093      	lsls	r3, r2
 8011948:	68ba      	ldr	r2, [r7, #8]
 801194a:	429a      	cmp	r2, r3
 801194c:	d136      	bne.n	80119bc <HAL_GPIO_DeInit+0x144>
      {
        /* Clear EXTI line configuration for Current CPU */
        EXTI_CurrentCPU->IMR1 &= ~(iocurrent);
 801194e:	693b      	ldr	r3, [r7, #16]
 8011950:	681a      	ldr	r2, [r3, #0]
 8011952:	68fb      	ldr	r3, [r7, #12]
 8011954:	43db      	mvns	r3, r3
 8011956:	401a      	ands	r2, r3
 8011958:	693b      	ldr	r3, [r7, #16]
 801195a:	601a      	str	r2, [r3, #0]
        EXTI_CurrentCPU->EMR1 &= ~(iocurrent);
 801195c:	693b      	ldr	r3, [r7, #16]
 801195e:	685a      	ldr	r2, [r3, #4]
 8011960:	68fb      	ldr	r3, [r7, #12]
 8011962:	43db      	mvns	r3, r3
 8011964:	401a      	ands	r2, r3
 8011966:	693b      	ldr	r3, [r7, #16]
 8011968:	605a      	str	r2, [r3, #4]

        /* Clear Rising Falling edge configuration */
        EXTI->FTSR1 &= ~(iocurrent);
 801196a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 801196e:	685a      	ldr	r2, [r3, #4]
 8011970:	68fb      	ldr	r3, [r7, #12]
 8011972:	43db      	mvns	r3, r3
 8011974:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8011978:	4013      	ands	r3, r2
 801197a:	604b      	str	r3, [r1, #4]
        EXTI->RTSR1 &= ~(iocurrent);
 801197c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8011980:	681a      	ldr	r2, [r3, #0]
 8011982:	68fb      	ldr	r3, [r7, #12]
 8011984:	43db      	mvns	r3, r3
 8011986:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 801198a:	4013      	ands	r3, r2
 801198c:	600b      	str	r3, [r1, #0]

        tmp = 0x0FUL << (4U * (position & 0x03U));
 801198e:	697b      	ldr	r3, [r7, #20]
 8011990:	f003 0303 	and.w	r3, r3, #3
 8011994:	009b      	lsls	r3, r3, #2
 8011996:	220f      	movs	r2, #15
 8011998:	fa02 f303 	lsl.w	r3, r2, r3
 801199c:	60bb      	str	r3, [r7, #8]
        SYSCFG->EXTICR[position >> 2U] &= ~tmp;
 801199e:	4a30      	ldr	r2, [pc, #192]	@ (8011a60 <HAL_GPIO_DeInit+0x1e8>)
 80119a0:	697b      	ldr	r3, [r7, #20]
 80119a2:	089b      	lsrs	r3, r3, #2
 80119a4:	3302      	adds	r3, #2
 80119a6:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 80119aa:	68bb      	ldr	r3, [r7, #8]
 80119ac:	43da      	mvns	r2, r3
 80119ae:	482c      	ldr	r0, [pc, #176]	@ (8011a60 <HAL_GPIO_DeInit+0x1e8>)
 80119b0:	697b      	ldr	r3, [r7, #20]
 80119b2:	089b      	lsrs	r3, r3, #2
 80119b4:	400a      	ands	r2, r1
 80119b6:	3302      	adds	r3, #2
 80119b8:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
      }

      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO in Analog Mode */
      GPIOx->MODER |= (GPIO_MODER_MODE0 << (position * 2U));
 80119bc:	687b      	ldr	r3, [r7, #4]
 80119be:	681a      	ldr	r2, [r3, #0]
 80119c0:	697b      	ldr	r3, [r7, #20]
 80119c2:	005b      	lsls	r3, r3, #1
 80119c4:	2103      	movs	r1, #3
 80119c6:	fa01 f303 	lsl.w	r3, r1, r3
 80119ca:	431a      	orrs	r2, r3
 80119cc:	687b      	ldr	r3, [r7, #4]
 80119ce:	601a      	str	r2, [r3, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3U] &= ~(0xFU << ((position & 0x07U) * 4U)) ;
 80119d0:	697b      	ldr	r3, [r7, #20]
 80119d2:	08da      	lsrs	r2, r3, #3
 80119d4:	687b      	ldr	r3, [r7, #4]
 80119d6:	3208      	adds	r2, #8
 80119d8:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80119dc:	697b      	ldr	r3, [r7, #20]
 80119de:	f003 0307 	and.w	r3, r3, #7
 80119e2:	009b      	lsls	r3, r3, #2
 80119e4:	220f      	movs	r2, #15
 80119e6:	fa02 f303 	lsl.w	r3, r2, r3
 80119ea:	43db      	mvns	r3, r3
 80119ec:	697a      	ldr	r2, [r7, #20]
 80119ee:	08d2      	lsrs	r2, r2, #3
 80119f0:	4019      	ands	r1, r3
 80119f2:	687b      	ldr	r3, [r7, #4]
 80119f4:	3208      	adds	r2, #8
 80119f6:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80119fa:	687b      	ldr	r3, [r7, #4]
 80119fc:	68da      	ldr	r2, [r3, #12]
 80119fe:	697b      	ldr	r3, [r7, #20]
 8011a00:	005b      	lsls	r3, r3, #1
 8011a02:	2103      	movs	r1, #3
 8011a04:	fa01 f303 	lsl.w	r3, r1, r3
 8011a08:	43db      	mvns	r3, r3
 8011a0a:	401a      	ands	r2, r3
 8011a0c:	687b      	ldr	r3, [r7, #4]
 8011a0e:	60da      	str	r2, [r3, #12]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT0 << position) ;
 8011a10:	687b      	ldr	r3, [r7, #4]
 8011a12:	685a      	ldr	r2, [r3, #4]
 8011a14:	2101      	movs	r1, #1
 8011a16:	697b      	ldr	r3, [r7, #20]
 8011a18:	fa01 f303 	lsl.w	r3, r1, r3
 8011a1c:	43db      	mvns	r3, r3
 8011a1e:	401a      	ands	r2, r3
 8011a20:	687b      	ldr	r3, [r7, #4]
 8011a22:	605a      	str	r2, [r3, #4]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8011a24:	687b      	ldr	r3, [r7, #4]
 8011a26:	689a      	ldr	r2, [r3, #8]
 8011a28:	697b      	ldr	r3, [r7, #20]
 8011a2a:	005b      	lsls	r3, r3, #1
 8011a2c:	2103      	movs	r1, #3
 8011a2e:	fa01 f303 	lsl.w	r3, r1, r3
 8011a32:	43db      	mvns	r3, r3
 8011a34:	401a      	ands	r2, r3
 8011a36:	687b      	ldr	r3, [r7, #4]
 8011a38:	609a      	str	r2, [r3, #8]
    }

    position++;
 8011a3a:	697b      	ldr	r3, [r7, #20]
 8011a3c:	3301      	adds	r3, #1
 8011a3e:	617b      	str	r3, [r7, #20]
  while ((GPIO_Pin >> position) != 0x00U)
 8011a40:	683a      	ldr	r2, [r7, #0]
 8011a42:	697b      	ldr	r3, [r7, #20]
 8011a44:	fa22 f303 	lsr.w	r3, r2, r3
 8011a48:	2b00      	cmp	r3, #0
 8011a4a:	f47f af1f 	bne.w	801188c <HAL_GPIO_DeInit+0x14>
  }
}
 8011a4e:	bf00      	nop
 8011a50:	bf00      	nop
 8011a52:	371c      	adds	r7, #28
 8011a54:	46bd      	mov	sp, r7
 8011a56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011a5a:	4770      	bx	lr
 8011a5c:	58000080 	.word	0x58000080
 8011a60:	58000400 	.word	0x58000400
 8011a64:	58020000 	.word	0x58020000
 8011a68:	58020400 	.word	0x58020400
 8011a6c:	58020800 	.word	0x58020800
 8011a70:	58020c00 	.word	0x58020c00
 8011a74:	58021000 	.word	0x58021000
 8011a78:	58021400 	.word	0x58021400
 8011a7c:	58021800 	.word	0x58021800
 8011a80:	58021c00 	.word	0x58021c00
 8011a84:	58022000 	.word	0x58022000
 8011a88:	58022400 	.word	0x58022400

08011a8c <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8011a8c:	b480      	push	{r7}
 8011a8e:	b085      	sub	sp, #20
 8011a90:	af00      	add	r7, sp, #0
 8011a92:	6078      	str	r0, [r7, #4]
 8011a94:	460b      	mov	r3, r1
 8011a96:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00U)
 8011a98:	687b      	ldr	r3, [r7, #4]
 8011a9a:	691a      	ldr	r2, [r3, #16]
 8011a9c:	887b      	ldrh	r3, [r7, #2]
 8011a9e:	4013      	ands	r3, r2
 8011aa0:	2b00      	cmp	r3, #0
 8011aa2:	d002      	beq.n	8011aaa <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8011aa4:	2301      	movs	r3, #1
 8011aa6:	73fb      	strb	r3, [r7, #15]
 8011aa8:	e001      	b.n	8011aae <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8011aaa:	2300      	movs	r3, #0
 8011aac:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8011aae:	7bfb      	ldrb	r3, [r7, #15]
}
 8011ab0:	4618      	mov	r0, r3
 8011ab2:	3714      	adds	r7, #20
 8011ab4:	46bd      	mov	sp, r7
 8011ab6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011aba:	4770      	bx	lr

08011abc <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8011abc:	b480      	push	{r7}
 8011abe:	b083      	sub	sp, #12
 8011ac0:	af00      	add	r7, sp, #0
 8011ac2:	6078      	str	r0, [r7, #4]
 8011ac4:	460b      	mov	r3, r1
 8011ac6:	807b      	strh	r3, [r7, #2]
 8011ac8:	4613      	mov	r3, r2
 8011aca:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8011acc:	787b      	ldrb	r3, [r7, #1]
 8011ace:	2b00      	cmp	r3, #0
 8011ad0:	d003      	beq.n	8011ada <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8011ad2:	887a      	ldrh	r2, [r7, #2]
 8011ad4:	687b      	ldr	r3, [r7, #4]
 8011ad6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 8011ad8:	e003      	b.n	8011ae2 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 8011ada:	887b      	ldrh	r3, [r7, #2]
 8011adc:	041a      	lsls	r2, r3, #16
 8011ade:	687b      	ldr	r3, [r7, #4]
 8011ae0:	619a      	str	r2, [r3, #24]
}
 8011ae2:	bf00      	nop
 8011ae4:	370c      	adds	r7, #12
 8011ae6:	46bd      	mov	sp, r7
 8011ae8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011aec:	4770      	bx	lr
	...

08011af0 <HAL_HSEM_FastTake>:
  * @brief  Fast Take a semaphore with 1 Step mode.
  * @param  SemID: semaphore ID from 0 to 31
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HSEM_FastTake(uint32_t SemID)
{
 8011af0:	b480      	push	{r7}
 8011af2:	b083      	sub	sp, #12
 8011af4:	af00      	add	r7, sp, #0
 8011af6:	6078      	str	r0, [r7, #4]
    /*take success when MasterID match and take bit set*/
    return HAL_OK;
  }
#else  
  /* Read the RLR register to take the semaphore */
  if (HSEM->RLR[SemID] == (HSEM_CR_COREID_CURRENT | HSEM_RLR_LOCK))
 8011af8:	4a08      	ldr	r2, [pc, #32]	@ (8011b1c <HAL_HSEM_FastTake+0x2c>)
 8011afa:	687b      	ldr	r3, [r7, #4]
 8011afc:	3320      	adds	r3, #32
 8011afe:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8011b02:	4a07      	ldr	r2, [pc, #28]	@ (8011b20 <HAL_HSEM_FastTake+0x30>)
 8011b04:	4293      	cmp	r3, r2
 8011b06:	d101      	bne.n	8011b0c <HAL_HSEM_FastTake+0x1c>
  {
    /*take success when MasterID match and take bit set*/
    return HAL_OK;
 8011b08:	2300      	movs	r3, #0
 8011b0a:	e000      	b.n	8011b0e <HAL_HSEM_FastTake+0x1e>
  }
#endif

  /* Semaphore take fails */
  return HAL_ERROR;
 8011b0c:	2301      	movs	r3, #1
}
 8011b0e:	4618      	mov	r0, r3
 8011b10:	370c      	adds	r7, #12
 8011b12:	46bd      	mov	sp, r7
 8011b14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011b18:	4770      	bx	lr
 8011b1a:	bf00      	nop
 8011b1c:	58026400 	.word	0x58026400
 8011b20:	80000300 	.word	0x80000300

08011b24 <HAL_HSEM_Release>:
  * @param  SemID: semaphore ID from 0 to 31
  * @param  ProcessID: Process ID from 0 to 255
  * @retval None
  */
void  HAL_HSEM_Release(uint32_t SemID, uint32_t ProcessID)
{
 8011b24:	b480      	push	{r7}
 8011b26:	b083      	sub	sp, #12
 8011b28:	af00      	add	r7, sp, #0
 8011b2a:	6078      	str	r0, [r7, #4]
 8011b2c:	6039      	str	r1, [r7, #0]

  /* Clear the semaphore by writing to the R register : the MasterID , the processID and take bit = 0  */
#if  USE_MULTI_CORE_SHARED_CODE != 0U
  HSEM->R[SemID] = (ProcessID | ((HAL_GetCurrentCPUID() << POSITION_VAL(HSEM_R_MASTERID)) & HSEM_R_MASTERID));
#else
  HSEM->R[SemID] = (ProcessID | HSEM_CR_COREID_CURRENT);
 8011b2e:	4906      	ldr	r1, [pc, #24]	@ (8011b48 <HAL_HSEM_Release+0x24>)
 8011b30:	683b      	ldr	r3, [r7, #0]
 8011b32:	f443 7240 	orr.w	r2, r3, #768	@ 0x300
 8011b36:	687b      	ldr	r3, [r7, #4]
 8011b38:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
#endif

}
 8011b3c:	bf00      	nop
 8011b3e:	370c      	adds	r7, #12
 8011b40:	46bd      	mov	sp, r7
 8011b42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011b46:	4770      	bx	lr
 8011b48:	58026400 	.word	0x58026400

08011b4c <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8011b4c:	b580      	push	{r7, lr}
 8011b4e:	b082      	sub	sp, #8
 8011b50:	af00      	add	r7, sp, #0
 8011b52:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8011b54:	687b      	ldr	r3, [r7, #4]
 8011b56:	2b00      	cmp	r3, #0
 8011b58:	d101      	bne.n	8011b5e <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8011b5a:	2301      	movs	r3, #1
 8011b5c:	e07f      	b.n	8011c5e <HAL_I2C_Init+0x112>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8011b5e:	687b      	ldr	r3, [r7, #4]
 8011b60:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8011b64:	b2db      	uxtb	r3, r3
 8011b66:	2b00      	cmp	r3, #0
 8011b68:	d106      	bne.n	8011b78 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8011b6a:	687b      	ldr	r3, [r7, #4]
 8011b6c:	2200      	movs	r2, #0
 8011b6e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8011b72:	6878      	ldr	r0, [r7, #4]
 8011b74:	f000 f8a9 	bl	8011cca <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8011b78:	687b      	ldr	r3, [r7, #4]
 8011b7a:	2224      	movs	r2, #36	@ 0x24
 8011b7c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8011b80:	687b      	ldr	r3, [r7, #4]
 8011b82:	681b      	ldr	r3, [r3, #0]
 8011b84:	681a      	ldr	r2, [r3, #0]
 8011b86:	687b      	ldr	r3, [r7, #4]
 8011b88:	681b      	ldr	r3, [r3, #0]
 8011b8a:	f022 0201 	bic.w	r2, r2, #1
 8011b8e:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8011b90:	687b      	ldr	r3, [r7, #4]
 8011b92:	685a      	ldr	r2, [r3, #4]
 8011b94:	687b      	ldr	r3, [r7, #4]
 8011b96:	681b      	ldr	r3, [r3, #0]
 8011b98:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8011b9c:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8011b9e:	687b      	ldr	r3, [r7, #4]
 8011ba0:	681b      	ldr	r3, [r3, #0]
 8011ba2:	689a      	ldr	r2, [r3, #8]
 8011ba4:	687b      	ldr	r3, [r7, #4]
 8011ba6:	681b      	ldr	r3, [r3, #0]
 8011ba8:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8011bac:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8011bae:	687b      	ldr	r3, [r7, #4]
 8011bb0:	68db      	ldr	r3, [r3, #12]
 8011bb2:	2b01      	cmp	r3, #1
 8011bb4:	d107      	bne.n	8011bc6 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8011bb6:	687b      	ldr	r3, [r7, #4]
 8011bb8:	689a      	ldr	r2, [r3, #8]
 8011bba:	687b      	ldr	r3, [r7, #4]
 8011bbc:	681b      	ldr	r3, [r3, #0]
 8011bbe:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8011bc2:	609a      	str	r2, [r3, #8]
 8011bc4:	e006      	b.n	8011bd4 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8011bc6:	687b      	ldr	r3, [r7, #4]
 8011bc8:	689a      	ldr	r2, [r3, #8]
 8011bca:	687b      	ldr	r3, [r7, #4]
 8011bcc:	681b      	ldr	r3, [r3, #0]
 8011bce:	f442 4204 	orr.w	r2, r2, #33792	@ 0x8400
 8011bd2:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8011bd4:	687b      	ldr	r3, [r7, #4]
 8011bd6:	68db      	ldr	r3, [r3, #12]
 8011bd8:	2b02      	cmp	r3, #2
 8011bda:	d104      	bne.n	8011be6 <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8011bdc:	687b      	ldr	r3, [r7, #4]
 8011bde:	681b      	ldr	r3, [r3, #0]
 8011be0:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8011be4:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8011be6:	687b      	ldr	r3, [r7, #4]
 8011be8:	681b      	ldr	r3, [r3, #0]
 8011bea:	6859      	ldr	r1, [r3, #4]
 8011bec:	687b      	ldr	r3, [r7, #4]
 8011bee:	681a      	ldr	r2, [r3, #0]
 8011bf0:	4b1d      	ldr	r3, [pc, #116]	@ (8011c68 <HAL_I2C_Init+0x11c>)
 8011bf2:	430b      	orrs	r3, r1
 8011bf4:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8011bf6:	687b      	ldr	r3, [r7, #4]
 8011bf8:	681b      	ldr	r3, [r3, #0]
 8011bfa:	68da      	ldr	r2, [r3, #12]
 8011bfc:	687b      	ldr	r3, [r7, #4]
 8011bfe:	681b      	ldr	r3, [r3, #0]
 8011c00:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8011c04:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8011c06:	687b      	ldr	r3, [r7, #4]
 8011c08:	691a      	ldr	r2, [r3, #16]
 8011c0a:	687b      	ldr	r3, [r7, #4]
 8011c0c:	695b      	ldr	r3, [r3, #20]
 8011c0e:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8011c12:	687b      	ldr	r3, [r7, #4]
 8011c14:	699b      	ldr	r3, [r3, #24]
 8011c16:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8011c18:	687b      	ldr	r3, [r7, #4]
 8011c1a:	681b      	ldr	r3, [r3, #0]
 8011c1c:	430a      	orrs	r2, r1
 8011c1e:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8011c20:	687b      	ldr	r3, [r7, #4]
 8011c22:	69d9      	ldr	r1, [r3, #28]
 8011c24:	687b      	ldr	r3, [r7, #4]
 8011c26:	6a1a      	ldr	r2, [r3, #32]
 8011c28:	687b      	ldr	r3, [r7, #4]
 8011c2a:	681b      	ldr	r3, [r3, #0]
 8011c2c:	430a      	orrs	r2, r1
 8011c2e:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8011c30:	687b      	ldr	r3, [r7, #4]
 8011c32:	681b      	ldr	r3, [r3, #0]
 8011c34:	681a      	ldr	r2, [r3, #0]
 8011c36:	687b      	ldr	r3, [r7, #4]
 8011c38:	681b      	ldr	r3, [r3, #0]
 8011c3a:	f042 0201 	orr.w	r2, r2, #1
 8011c3e:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8011c40:	687b      	ldr	r3, [r7, #4]
 8011c42:	2200      	movs	r2, #0
 8011c44:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8011c46:	687b      	ldr	r3, [r7, #4]
 8011c48:	2220      	movs	r2, #32
 8011c4a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8011c4e:	687b      	ldr	r3, [r7, #4]
 8011c50:	2200      	movs	r2, #0
 8011c52:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8011c54:	687b      	ldr	r3, [r7, #4]
 8011c56:	2200      	movs	r2, #0
 8011c58:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  return HAL_OK;
 8011c5c:	2300      	movs	r3, #0
}
 8011c5e:	4618      	mov	r0, r3
 8011c60:	3708      	adds	r7, #8
 8011c62:	46bd      	mov	sp, r7
 8011c64:	bd80      	pop	{r7, pc}
 8011c66:	bf00      	nop
 8011c68:	02008000 	.word	0x02008000

08011c6c <HAL_I2C_DeInit>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_DeInit(I2C_HandleTypeDef *hi2c)
{
 8011c6c:	b580      	push	{r7, lr}
 8011c6e:	b082      	sub	sp, #8
 8011c70:	af00      	add	r7, sp, #0
 8011c72:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8011c74:	687b      	ldr	r3, [r7, #4]
 8011c76:	2b00      	cmp	r3, #0
 8011c78:	d101      	bne.n	8011c7e <HAL_I2C_DeInit+0x12>
  {
    return HAL_ERROR;
 8011c7a:	2301      	movs	r3, #1
 8011c7c:	e021      	b.n	8011cc2 <HAL_I2C_DeInit+0x56>
  }

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));

  hi2c->State = HAL_I2C_STATE_BUSY;
 8011c7e:	687b      	ldr	r3, [r7, #4]
 8011c80:	2224      	movs	r2, #36	@ 0x24
 8011c82:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the I2C Peripheral Clock */
  __HAL_I2C_DISABLE(hi2c);
 8011c86:	687b      	ldr	r3, [r7, #4]
 8011c88:	681b      	ldr	r3, [r3, #0]
 8011c8a:	681a      	ldr	r2, [r3, #0]
 8011c8c:	687b      	ldr	r3, [r7, #4]
 8011c8e:	681b      	ldr	r3, [r3, #0]
 8011c90:	f022 0201 	bic.w	r2, r2, #1
 8011c94:	601a      	str	r2, [r3, #0]

  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  hi2c->MspDeInitCallback(hi2c);
#else
  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  HAL_I2C_MspDeInit(hi2c);
 8011c96:	6878      	ldr	r0, [r7, #4]
 8011c98:	f000 f821 	bl	8011cde <HAL_I2C_MspDeInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8011c9c:	687b      	ldr	r3, [r7, #4]
 8011c9e:	2200      	movs	r2, #0
 8011ca0:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_RESET;
 8011ca2:	687b      	ldr	r3, [r7, #4]
 8011ca4:	2200      	movs	r2, #0
 8011ca6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8011caa:	687b      	ldr	r3, [r7, #4]
 8011cac:	2200      	movs	r2, #0
 8011cae:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8011cb0:	687b      	ldr	r3, [r7, #4]
 8011cb2:	2200      	movs	r2, #0
 8011cb4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  /* Release Lock */
  __HAL_UNLOCK(hi2c);
 8011cb8:	687b      	ldr	r3, [r7, #4]
 8011cba:	2200      	movs	r2, #0
 8011cbc:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  return HAL_OK;
 8011cc0:	2300      	movs	r3, #0
}
 8011cc2:	4618      	mov	r0, r3
 8011cc4:	3708      	adds	r7, #8
 8011cc6:	46bd      	mov	sp, r7
 8011cc8:	bd80      	pop	{r7, pc}

08011cca <HAL_I2C_MspInit>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MspInit(I2C_HandleTypeDef *hi2c)
{
 8011cca:	b480      	push	{r7}
 8011ccc:	b083      	sub	sp, #12
 8011cce:	af00      	add	r7, sp, #0
 8011cd0:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MspInit could be implemented in the user file
   */
}
 8011cd2:	bf00      	nop
 8011cd4:	370c      	adds	r7, #12
 8011cd6:	46bd      	mov	sp, r7
 8011cd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011cdc:	4770      	bx	lr

08011cde <HAL_I2C_MspDeInit>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MspDeInit(I2C_HandleTypeDef *hi2c)
{
 8011cde:	b480      	push	{r7}
 8011ce0:	b083      	sub	sp, #12
 8011ce2:	af00      	add	r7, sp, #0
 8011ce4:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MspDeInit could be implemented in the user file
   */
}
 8011ce6:	bf00      	nop
 8011ce8:	370c      	adds	r7, #12
 8011cea:	46bd      	mov	sp, r7
 8011cec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011cf0:	4770      	bx	lr
	...

08011cf4 <HAL_I2C_Mem_Write>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                    uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8011cf4:	b580      	push	{r7, lr}
 8011cf6:	b088      	sub	sp, #32
 8011cf8:	af02      	add	r7, sp, #8
 8011cfa:	60f8      	str	r0, [r7, #12]
 8011cfc:	4608      	mov	r0, r1
 8011cfe:	4611      	mov	r1, r2
 8011d00:	461a      	mov	r2, r3
 8011d02:	4603      	mov	r3, r0
 8011d04:	817b      	strh	r3, [r7, #10]
 8011d06:	460b      	mov	r3, r1
 8011d08:	813b      	strh	r3, [r7, #8]
 8011d0a:	4613      	mov	r3, r2
 8011d0c:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8011d0e:	68fb      	ldr	r3, [r7, #12]
 8011d10:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8011d14:	b2db      	uxtb	r3, r3
 8011d16:	2b20      	cmp	r3, #32
 8011d18:	f040 80f9 	bne.w	8011f0e <HAL_I2C_Mem_Write+0x21a>
  {
    if ((pData == NULL) || (Size == 0U))
 8011d1c:	6a3b      	ldr	r3, [r7, #32]
 8011d1e:	2b00      	cmp	r3, #0
 8011d20:	d002      	beq.n	8011d28 <HAL_I2C_Mem_Write+0x34>
 8011d22:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8011d24:	2b00      	cmp	r3, #0
 8011d26:	d105      	bne.n	8011d34 <HAL_I2C_Mem_Write+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8011d28:	68fb      	ldr	r3, [r7, #12]
 8011d2a:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8011d2e:	645a      	str	r2, [r3, #68]	@ 0x44
      return  HAL_ERROR;
 8011d30:	2301      	movs	r3, #1
 8011d32:	e0ed      	b.n	8011f10 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8011d34:	68fb      	ldr	r3, [r7, #12]
 8011d36:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8011d3a:	2b01      	cmp	r3, #1
 8011d3c:	d101      	bne.n	8011d42 <HAL_I2C_Mem_Write+0x4e>
 8011d3e:	2302      	movs	r3, #2
 8011d40:	e0e6      	b.n	8011f10 <HAL_I2C_Mem_Write+0x21c>
 8011d42:	68fb      	ldr	r3, [r7, #12]
 8011d44:	2201      	movs	r2, #1
 8011d46:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8011d4a:	f7fe ffd9 	bl	8010d00 <HAL_GetTick>
 8011d4e:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8011d50:	697b      	ldr	r3, [r7, #20]
 8011d52:	9300      	str	r3, [sp, #0]
 8011d54:	2319      	movs	r3, #25
 8011d56:	2201      	movs	r2, #1
 8011d58:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8011d5c:	68f8      	ldr	r0, [r7, #12]
 8011d5e:	f000 fadd 	bl	801231c <I2C_WaitOnFlagUntilTimeout>
 8011d62:	4603      	mov	r3, r0
 8011d64:	2b00      	cmp	r3, #0
 8011d66:	d001      	beq.n	8011d6c <HAL_I2C_Mem_Write+0x78>
    {
      return HAL_ERROR;
 8011d68:	2301      	movs	r3, #1
 8011d6a:	e0d1      	b.n	8011f10 <HAL_I2C_Mem_Write+0x21c>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8011d6c:	68fb      	ldr	r3, [r7, #12]
 8011d6e:	2221      	movs	r2, #33	@ 0x21
 8011d70:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8011d74:	68fb      	ldr	r3, [r7, #12]
 8011d76:	2240      	movs	r2, #64	@ 0x40
 8011d78:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8011d7c:	68fb      	ldr	r3, [r7, #12]
 8011d7e:	2200      	movs	r2, #0
 8011d80:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8011d82:	68fb      	ldr	r3, [r7, #12]
 8011d84:	6a3a      	ldr	r2, [r7, #32]
 8011d86:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 8011d88:	68fb      	ldr	r3, [r7, #12]
 8011d8a:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 8011d8c:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 8011d8e:	68fb      	ldr	r3, [r7, #12]
 8011d90:	2200      	movs	r2, #0
 8011d92:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8011d94:	88f8      	ldrh	r0, [r7, #6]
 8011d96:	893a      	ldrh	r2, [r7, #8]
 8011d98:	8979      	ldrh	r1, [r7, #10]
 8011d9a:	697b      	ldr	r3, [r7, #20]
 8011d9c:	9301      	str	r3, [sp, #4]
 8011d9e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8011da0:	9300      	str	r3, [sp, #0]
 8011da2:	4603      	mov	r3, r0
 8011da4:	68f8      	ldr	r0, [r7, #12]
 8011da6:	f000 f9ed 	bl	8012184 <I2C_RequestMemoryWrite>
 8011daa:	4603      	mov	r3, r0
 8011dac:	2b00      	cmp	r3, #0
 8011dae:	d005      	beq.n	8011dbc <HAL_I2C_Mem_Write+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8011db0:	68fb      	ldr	r3, [r7, #12]
 8011db2:	2200      	movs	r2, #0
 8011db4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
      return HAL_ERROR;
 8011db8:	2301      	movs	r3, #1
 8011dba:	e0a9      	b.n	8011f10 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8011dbc:	68fb      	ldr	r3, [r7, #12]
 8011dbe:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8011dc0:	b29b      	uxth	r3, r3
 8011dc2:	2bff      	cmp	r3, #255	@ 0xff
 8011dc4:	d90e      	bls.n	8011de4 <HAL_I2C_Mem_Write+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8011dc6:	68fb      	ldr	r3, [r7, #12]
 8011dc8:	22ff      	movs	r2, #255	@ 0xff
 8011dca:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8011dcc:	68fb      	ldr	r3, [r7, #12]
 8011dce:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8011dd0:	b2da      	uxtb	r2, r3
 8011dd2:	8979      	ldrh	r1, [r7, #10]
 8011dd4:	2300      	movs	r3, #0
 8011dd6:	9300      	str	r3, [sp, #0]
 8011dd8:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8011ddc:	68f8      	ldr	r0, [r7, #12]
 8011dde:	f000 fc57 	bl	8012690 <I2C_TransferConfig>
 8011de2:	e00f      	b.n	8011e04 <HAL_I2C_Mem_Write+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8011de4:	68fb      	ldr	r3, [r7, #12]
 8011de6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8011de8:	b29a      	uxth	r2, r3
 8011dea:	68fb      	ldr	r3, [r7, #12]
 8011dec:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8011dee:	68fb      	ldr	r3, [r7, #12]
 8011df0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8011df2:	b2da      	uxtb	r2, r3
 8011df4:	8979      	ldrh	r1, [r7, #10]
 8011df6:	2300      	movs	r3, #0
 8011df8:	9300      	str	r3, [sp, #0]
 8011dfa:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8011dfe:	68f8      	ldr	r0, [r7, #12]
 8011e00:	f000 fc46 	bl	8012690 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8011e04:	697a      	ldr	r2, [r7, #20]
 8011e06:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8011e08:	68f8      	ldr	r0, [r7, #12]
 8011e0a:	f000 fad6 	bl	80123ba <I2C_WaitOnTXISFlagUntilTimeout>
 8011e0e:	4603      	mov	r3, r0
 8011e10:	2b00      	cmp	r3, #0
 8011e12:	d001      	beq.n	8011e18 <HAL_I2C_Mem_Write+0x124>
      {
        return HAL_ERROR;
 8011e14:	2301      	movs	r3, #1
 8011e16:	e07b      	b.n	8011f10 <HAL_I2C_Mem_Write+0x21c>
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8011e18:	68fb      	ldr	r3, [r7, #12]
 8011e1a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8011e1c:	781a      	ldrb	r2, [r3, #0]
 8011e1e:	68fb      	ldr	r3, [r7, #12]
 8011e20:	681b      	ldr	r3, [r3, #0]
 8011e22:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8011e24:	68fb      	ldr	r3, [r7, #12]
 8011e26:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8011e28:	1c5a      	adds	r2, r3, #1
 8011e2a:	68fb      	ldr	r3, [r7, #12]
 8011e2c:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 8011e2e:	68fb      	ldr	r3, [r7, #12]
 8011e30:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8011e32:	b29b      	uxth	r3, r3
 8011e34:	3b01      	subs	r3, #1
 8011e36:	b29a      	uxth	r2, r3
 8011e38:	68fb      	ldr	r3, [r7, #12]
 8011e3a:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 8011e3c:	68fb      	ldr	r3, [r7, #12]
 8011e3e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8011e40:	3b01      	subs	r3, #1
 8011e42:	b29a      	uxth	r2, r3
 8011e44:	68fb      	ldr	r3, [r7, #12]
 8011e46:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8011e48:	68fb      	ldr	r3, [r7, #12]
 8011e4a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8011e4c:	b29b      	uxth	r3, r3
 8011e4e:	2b00      	cmp	r3, #0
 8011e50:	d034      	beq.n	8011ebc <HAL_I2C_Mem_Write+0x1c8>
 8011e52:	68fb      	ldr	r3, [r7, #12]
 8011e54:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8011e56:	2b00      	cmp	r3, #0
 8011e58:	d130      	bne.n	8011ebc <HAL_I2C_Mem_Write+0x1c8>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8011e5a:	697b      	ldr	r3, [r7, #20]
 8011e5c:	9300      	str	r3, [sp, #0]
 8011e5e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8011e60:	2200      	movs	r2, #0
 8011e62:	2180      	movs	r1, #128	@ 0x80
 8011e64:	68f8      	ldr	r0, [r7, #12]
 8011e66:	f000 fa59 	bl	801231c <I2C_WaitOnFlagUntilTimeout>
 8011e6a:	4603      	mov	r3, r0
 8011e6c:	2b00      	cmp	r3, #0
 8011e6e:	d001      	beq.n	8011e74 <HAL_I2C_Mem_Write+0x180>
        {
          return HAL_ERROR;
 8011e70:	2301      	movs	r3, #1
 8011e72:	e04d      	b.n	8011f10 <HAL_I2C_Mem_Write+0x21c>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8011e74:	68fb      	ldr	r3, [r7, #12]
 8011e76:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8011e78:	b29b      	uxth	r3, r3
 8011e7a:	2bff      	cmp	r3, #255	@ 0xff
 8011e7c:	d90e      	bls.n	8011e9c <HAL_I2C_Mem_Write+0x1a8>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8011e7e:	68fb      	ldr	r3, [r7, #12]
 8011e80:	22ff      	movs	r2, #255	@ 0xff
 8011e82:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8011e84:	68fb      	ldr	r3, [r7, #12]
 8011e86:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8011e88:	b2da      	uxtb	r2, r3
 8011e8a:	8979      	ldrh	r1, [r7, #10]
 8011e8c:	2300      	movs	r3, #0
 8011e8e:	9300      	str	r3, [sp, #0]
 8011e90:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8011e94:	68f8      	ldr	r0, [r7, #12]
 8011e96:	f000 fbfb 	bl	8012690 <I2C_TransferConfig>
 8011e9a:	e00f      	b.n	8011ebc <HAL_I2C_Mem_Write+0x1c8>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8011e9c:	68fb      	ldr	r3, [r7, #12]
 8011e9e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8011ea0:	b29a      	uxth	r2, r3
 8011ea2:	68fb      	ldr	r3, [r7, #12]
 8011ea4:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8011ea6:	68fb      	ldr	r3, [r7, #12]
 8011ea8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8011eaa:	b2da      	uxtb	r2, r3
 8011eac:	8979      	ldrh	r1, [r7, #10]
 8011eae:	2300      	movs	r3, #0
 8011eb0:	9300      	str	r3, [sp, #0]
 8011eb2:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8011eb6:	68f8      	ldr	r0, [r7, #12]
 8011eb8:	f000 fbea 	bl	8012690 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }

    } while (hi2c->XferCount > 0U);
 8011ebc:	68fb      	ldr	r3, [r7, #12]
 8011ebe:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8011ec0:	b29b      	uxth	r3, r3
 8011ec2:	2b00      	cmp	r3, #0
 8011ec4:	d19e      	bne.n	8011e04 <HAL_I2C_Mem_Write+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8011ec6:	697a      	ldr	r2, [r7, #20]
 8011ec8:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8011eca:	68f8      	ldr	r0, [r7, #12]
 8011ecc:	f000 fabc 	bl	8012448 <I2C_WaitOnSTOPFlagUntilTimeout>
 8011ed0:	4603      	mov	r3, r0
 8011ed2:	2b00      	cmp	r3, #0
 8011ed4:	d001      	beq.n	8011eda <HAL_I2C_Mem_Write+0x1e6>
    {
      return HAL_ERROR;
 8011ed6:	2301      	movs	r3, #1
 8011ed8:	e01a      	b.n	8011f10 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8011eda:	68fb      	ldr	r3, [r7, #12]
 8011edc:	681b      	ldr	r3, [r3, #0]
 8011ede:	2220      	movs	r2, #32
 8011ee0:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8011ee2:	68fb      	ldr	r3, [r7, #12]
 8011ee4:	681b      	ldr	r3, [r3, #0]
 8011ee6:	6859      	ldr	r1, [r3, #4]
 8011ee8:	68fb      	ldr	r3, [r7, #12]
 8011eea:	681a      	ldr	r2, [r3, #0]
 8011eec:	4b0a      	ldr	r3, [pc, #40]	@ (8011f18 <HAL_I2C_Mem_Write+0x224>)
 8011eee:	400b      	ands	r3, r1
 8011ef0:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8011ef2:	68fb      	ldr	r3, [r7, #12]
 8011ef4:	2220      	movs	r2, #32
 8011ef6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8011efa:	68fb      	ldr	r3, [r7, #12]
 8011efc:	2200      	movs	r2, #0
 8011efe:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8011f02:	68fb      	ldr	r3, [r7, #12]
 8011f04:	2200      	movs	r2, #0
 8011f06:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8011f0a:	2300      	movs	r3, #0
 8011f0c:	e000      	b.n	8011f10 <HAL_I2C_Mem_Write+0x21c>
  }
  else
  {
    return HAL_BUSY;
 8011f0e:	2302      	movs	r3, #2
  }
}
 8011f10:	4618      	mov	r0, r3
 8011f12:	3718      	adds	r7, #24
 8011f14:	46bd      	mov	sp, r7
 8011f16:	bd80      	pop	{r7, pc}
 8011f18:	fe00e800 	.word	0xfe00e800

08011f1c <HAL_I2C_Mem_Read>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                   uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8011f1c:	b580      	push	{r7, lr}
 8011f1e:	b088      	sub	sp, #32
 8011f20:	af02      	add	r7, sp, #8
 8011f22:	60f8      	str	r0, [r7, #12]
 8011f24:	4608      	mov	r0, r1
 8011f26:	4611      	mov	r1, r2
 8011f28:	461a      	mov	r2, r3
 8011f2a:	4603      	mov	r3, r0
 8011f2c:	817b      	strh	r3, [r7, #10]
 8011f2e:	460b      	mov	r3, r1
 8011f30:	813b      	strh	r3, [r7, #8]
 8011f32:	4613      	mov	r3, r2
 8011f34:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8011f36:	68fb      	ldr	r3, [r7, #12]
 8011f38:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8011f3c:	b2db      	uxtb	r3, r3
 8011f3e:	2b20      	cmp	r3, #32
 8011f40:	f040 80fd 	bne.w	801213e <HAL_I2C_Mem_Read+0x222>
  {
    if ((pData == NULL) || (Size == 0U))
 8011f44:	6a3b      	ldr	r3, [r7, #32]
 8011f46:	2b00      	cmp	r3, #0
 8011f48:	d002      	beq.n	8011f50 <HAL_I2C_Mem_Read+0x34>
 8011f4a:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8011f4c:	2b00      	cmp	r3, #0
 8011f4e:	d105      	bne.n	8011f5c <HAL_I2C_Mem_Read+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8011f50:	68fb      	ldr	r3, [r7, #12]
 8011f52:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8011f56:	645a      	str	r2, [r3, #68]	@ 0x44
      return  HAL_ERROR;
 8011f58:	2301      	movs	r3, #1
 8011f5a:	e0f1      	b.n	8012140 <HAL_I2C_Mem_Read+0x224>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8011f5c:	68fb      	ldr	r3, [r7, #12]
 8011f5e:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8011f62:	2b01      	cmp	r3, #1
 8011f64:	d101      	bne.n	8011f6a <HAL_I2C_Mem_Read+0x4e>
 8011f66:	2302      	movs	r3, #2
 8011f68:	e0ea      	b.n	8012140 <HAL_I2C_Mem_Read+0x224>
 8011f6a:	68fb      	ldr	r3, [r7, #12]
 8011f6c:	2201      	movs	r2, #1
 8011f6e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8011f72:	f7fe fec5 	bl	8010d00 <HAL_GetTick>
 8011f76:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8011f78:	697b      	ldr	r3, [r7, #20]
 8011f7a:	9300      	str	r3, [sp, #0]
 8011f7c:	2319      	movs	r3, #25
 8011f7e:	2201      	movs	r2, #1
 8011f80:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8011f84:	68f8      	ldr	r0, [r7, #12]
 8011f86:	f000 f9c9 	bl	801231c <I2C_WaitOnFlagUntilTimeout>
 8011f8a:	4603      	mov	r3, r0
 8011f8c:	2b00      	cmp	r3, #0
 8011f8e:	d001      	beq.n	8011f94 <HAL_I2C_Mem_Read+0x78>
    {
      return HAL_ERROR;
 8011f90:	2301      	movs	r3, #1
 8011f92:	e0d5      	b.n	8012140 <HAL_I2C_Mem_Read+0x224>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8011f94:	68fb      	ldr	r3, [r7, #12]
 8011f96:	2222      	movs	r2, #34	@ 0x22
 8011f98:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8011f9c:	68fb      	ldr	r3, [r7, #12]
 8011f9e:	2240      	movs	r2, #64	@ 0x40
 8011fa0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8011fa4:	68fb      	ldr	r3, [r7, #12]
 8011fa6:	2200      	movs	r2, #0
 8011fa8:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8011faa:	68fb      	ldr	r3, [r7, #12]
 8011fac:	6a3a      	ldr	r2, [r7, #32]
 8011fae:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 8011fb0:	68fb      	ldr	r3, [r7, #12]
 8011fb2:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 8011fb4:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 8011fb6:	68fb      	ldr	r3, [r7, #12]
 8011fb8:	2200      	movs	r2, #0
 8011fba:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8011fbc:	88f8      	ldrh	r0, [r7, #6]
 8011fbe:	893a      	ldrh	r2, [r7, #8]
 8011fc0:	8979      	ldrh	r1, [r7, #10]
 8011fc2:	697b      	ldr	r3, [r7, #20]
 8011fc4:	9301      	str	r3, [sp, #4]
 8011fc6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8011fc8:	9300      	str	r3, [sp, #0]
 8011fca:	4603      	mov	r3, r0
 8011fcc:	68f8      	ldr	r0, [r7, #12]
 8011fce:	f000 f92d 	bl	801222c <I2C_RequestMemoryRead>
 8011fd2:	4603      	mov	r3, r0
 8011fd4:	2b00      	cmp	r3, #0
 8011fd6:	d005      	beq.n	8011fe4 <HAL_I2C_Mem_Read+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8011fd8:	68fb      	ldr	r3, [r7, #12]
 8011fda:	2200      	movs	r2, #0
 8011fdc:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
      return HAL_ERROR;
 8011fe0:	2301      	movs	r3, #1
 8011fe2:	e0ad      	b.n	8012140 <HAL_I2C_Mem_Read+0x224>
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8011fe4:	68fb      	ldr	r3, [r7, #12]
 8011fe6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8011fe8:	b29b      	uxth	r3, r3
 8011fea:	2bff      	cmp	r3, #255	@ 0xff
 8011fec:	d90e      	bls.n	801200c <HAL_I2C_Mem_Read+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8011fee:	68fb      	ldr	r3, [r7, #12]
 8011ff0:	22ff      	movs	r2, #255	@ 0xff
 8011ff2:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8011ff4:	68fb      	ldr	r3, [r7, #12]
 8011ff6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8011ff8:	b2da      	uxtb	r2, r3
 8011ffa:	8979      	ldrh	r1, [r7, #10]
 8011ffc:	4b52      	ldr	r3, [pc, #328]	@ (8012148 <HAL_I2C_Mem_Read+0x22c>)
 8011ffe:	9300      	str	r3, [sp, #0]
 8012000:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8012004:	68f8      	ldr	r0, [r7, #12]
 8012006:	f000 fb43 	bl	8012690 <I2C_TransferConfig>
 801200a:	e00f      	b.n	801202c <HAL_I2C_Mem_Read+0x110>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 801200c:	68fb      	ldr	r3, [r7, #12]
 801200e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8012010:	b29a      	uxth	r2, r3
 8012012:	68fb      	ldr	r3, [r7, #12]
 8012014:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8012016:	68fb      	ldr	r3, [r7, #12]
 8012018:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 801201a:	b2da      	uxtb	r2, r3
 801201c:	8979      	ldrh	r1, [r7, #10]
 801201e:	4b4a      	ldr	r3, [pc, #296]	@ (8012148 <HAL_I2C_Mem_Read+0x22c>)
 8012020:	9300      	str	r3, [sp, #0]
 8012022:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8012026:	68f8      	ldr	r0, [r7, #12]
 8012028:	f000 fb32 	bl	8012690 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 801202c:	697b      	ldr	r3, [r7, #20]
 801202e:	9300      	str	r3, [sp, #0]
 8012030:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8012032:	2200      	movs	r2, #0
 8012034:	2104      	movs	r1, #4
 8012036:	68f8      	ldr	r0, [r7, #12]
 8012038:	f000 f970 	bl	801231c <I2C_WaitOnFlagUntilTimeout>
 801203c:	4603      	mov	r3, r0
 801203e:	2b00      	cmp	r3, #0
 8012040:	d001      	beq.n	8012046 <HAL_I2C_Mem_Read+0x12a>
      {
        return HAL_ERROR;
 8012042:	2301      	movs	r3, #1
 8012044:	e07c      	b.n	8012140 <HAL_I2C_Mem_Read+0x224>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8012046:	68fb      	ldr	r3, [r7, #12]
 8012048:	681b      	ldr	r3, [r3, #0]
 801204a:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 801204c:	68fb      	ldr	r3, [r7, #12]
 801204e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8012050:	b2d2      	uxtb	r2, r2
 8012052:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8012054:	68fb      	ldr	r3, [r7, #12]
 8012056:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8012058:	1c5a      	adds	r2, r3, #1
 801205a:	68fb      	ldr	r3, [r7, #12]
 801205c:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferSize--;
 801205e:	68fb      	ldr	r3, [r7, #12]
 8012060:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8012062:	3b01      	subs	r3, #1
 8012064:	b29a      	uxth	r2, r3
 8012066:	68fb      	ldr	r3, [r7, #12]
 8012068:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 801206a:	68fb      	ldr	r3, [r7, #12]
 801206c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 801206e:	b29b      	uxth	r3, r3
 8012070:	3b01      	subs	r3, #1
 8012072:	b29a      	uxth	r2, r3
 8012074:	68fb      	ldr	r3, [r7, #12]
 8012076:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8012078:	68fb      	ldr	r3, [r7, #12]
 801207a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 801207c:	b29b      	uxth	r3, r3
 801207e:	2b00      	cmp	r3, #0
 8012080:	d034      	beq.n	80120ec <HAL_I2C_Mem_Read+0x1d0>
 8012082:	68fb      	ldr	r3, [r7, #12]
 8012084:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8012086:	2b00      	cmp	r3, #0
 8012088:	d130      	bne.n	80120ec <HAL_I2C_Mem_Read+0x1d0>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 801208a:	697b      	ldr	r3, [r7, #20]
 801208c:	9300      	str	r3, [sp, #0]
 801208e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8012090:	2200      	movs	r2, #0
 8012092:	2180      	movs	r1, #128	@ 0x80
 8012094:	68f8      	ldr	r0, [r7, #12]
 8012096:	f000 f941 	bl	801231c <I2C_WaitOnFlagUntilTimeout>
 801209a:	4603      	mov	r3, r0
 801209c:	2b00      	cmp	r3, #0
 801209e:	d001      	beq.n	80120a4 <HAL_I2C_Mem_Read+0x188>
        {
          return HAL_ERROR;
 80120a0:	2301      	movs	r3, #1
 80120a2:	e04d      	b.n	8012140 <HAL_I2C_Mem_Read+0x224>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80120a4:	68fb      	ldr	r3, [r7, #12]
 80120a6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80120a8:	b29b      	uxth	r3, r3
 80120aa:	2bff      	cmp	r3, #255	@ 0xff
 80120ac:	d90e      	bls.n	80120cc <HAL_I2C_Mem_Read+0x1b0>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 80120ae:	68fb      	ldr	r3, [r7, #12]
 80120b0:	22ff      	movs	r2, #255	@ 0xff
 80120b2:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE,
 80120b4:	68fb      	ldr	r3, [r7, #12]
 80120b6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80120b8:	b2da      	uxtb	r2, r3
 80120ba:	8979      	ldrh	r1, [r7, #10]
 80120bc:	2300      	movs	r3, #0
 80120be:	9300      	str	r3, [sp, #0]
 80120c0:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 80120c4:	68f8      	ldr	r0, [r7, #12]
 80120c6:	f000 fae3 	bl	8012690 <I2C_TransferConfig>
 80120ca:	e00f      	b.n	80120ec <HAL_I2C_Mem_Read+0x1d0>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 80120cc:	68fb      	ldr	r3, [r7, #12]
 80120ce:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80120d0:	b29a      	uxth	r2, r3
 80120d2:	68fb      	ldr	r3, [r7, #12]
 80120d4:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80120d6:	68fb      	ldr	r3, [r7, #12]
 80120d8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80120da:	b2da      	uxtb	r2, r3
 80120dc:	8979      	ldrh	r1, [r7, #10]
 80120de:	2300      	movs	r3, #0
 80120e0:	9300      	str	r3, [sp, #0]
 80120e2:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 80120e6:	68f8      	ldr	r0, [r7, #12]
 80120e8:	f000 fad2 	bl	8012690 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }
    } while (hi2c->XferCount > 0U);
 80120ec:	68fb      	ldr	r3, [r7, #12]
 80120ee:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80120f0:	b29b      	uxth	r3, r3
 80120f2:	2b00      	cmp	r3, #0
 80120f4:	d19a      	bne.n	801202c <HAL_I2C_Mem_Read+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80120f6:	697a      	ldr	r2, [r7, #20]
 80120f8:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80120fa:	68f8      	ldr	r0, [r7, #12]
 80120fc:	f000 f9a4 	bl	8012448 <I2C_WaitOnSTOPFlagUntilTimeout>
 8012100:	4603      	mov	r3, r0
 8012102:	2b00      	cmp	r3, #0
 8012104:	d001      	beq.n	801210a <HAL_I2C_Mem_Read+0x1ee>
    {
      return HAL_ERROR;
 8012106:	2301      	movs	r3, #1
 8012108:	e01a      	b.n	8012140 <HAL_I2C_Mem_Read+0x224>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 801210a:	68fb      	ldr	r3, [r7, #12]
 801210c:	681b      	ldr	r3, [r3, #0]
 801210e:	2220      	movs	r2, #32
 8012110:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8012112:	68fb      	ldr	r3, [r7, #12]
 8012114:	681b      	ldr	r3, [r3, #0]
 8012116:	6859      	ldr	r1, [r3, #4]
 8012118:	68fb      	ldr	r3, [r7, #12]
 801211a:	681a      	ldr	r2, [r3, #0]
 801211c:	4b0b      	ldr	r3, [pc, #44]	@ (801214c <HAL_I2C_Mem_Read+0x230>)
 801211e:	400b      	ands	r3, r1
 8012120:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8012122:	68fb      	ldr	r3, [r7, #12]
 8012124:	2220      	movs	r2, #32
 8012126:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 801212a:	68fb      	ldr	r3, [r7, #12]
 801212c:	2200      	movs	r2, #0
 801212e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8012132:	68fb      	ldr	r3, [r7, #12]
 8012134:	2200      	movs	r2, #0
 8012136:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 801213a:	2300      	movs	r3, #0
 801213c:	e000      	b.n	8012140 <HAL_I2C_Mem_Read+0x224>
  }
  else
  {
    return HAL_BUSY;
 801213e:	2302      	movs	r3, #2
  }
}
 8012140:	4618      	mov	r0, r3
 8012142:	3718      	adds	r7, #24
 8012144:	46bd      	mov	sp, r7
 8012146:	bd80      	pop	{r7, pc}
 8012148:	80002400 	.word	0x80002400
 801214c:	fe00e800 	.word	0xfe00e800

08012150 <HAL_I2C_GetState>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL state
  */
HAL_I2C_StateTypeDef HAL_I2C_GetState(I2C_HandleTypeDef *hi2c)
{
 8012150:	b480      	push	{r7}
 8012152:	b083      	sub	sp, #12
 8012154:	af00      	add	r7, sp, #0
 8012156:	6078      	str	r0, [r7, #4]
  /* Return I2C handle state */
  return hi2c->State;
 8012158:	687b      	ldr	r3, [r7, #4]
 801215a:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 801215e:	b2db      	uxtb	r3, r3
}
 8012160:	4618      	mov	r0, r3
 8012162:	370c      	adds	r7, #12
 8012164:	46bd      	mov	sp, r7
 8012166:	f85d 7b04 	ldr.w	r7, [sp], #4
 801216a:	4770      	bx	lr

0801216c <HAL_I2C_GetError>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *              the configuration information for the specified I2C.
  * @retval I2C Error Code
  */
uint32_t HAL_I2C_GetError(I2C_HandleTypeDef *hi2c)
{
 801216c:	b480      	push	{r7}
 801216e:	b083      	sub	sp, #12
 8012170:	af00      	add	r7, sp, #0
 8012172:	6078      	str	r0, [r7, #4]
  return hi2c->ErrorCode;
 8012174:	687b      	ldr	r3, [r7, #4]
 8012176:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
}
 8012178:	4618      	mov	r0, r3
 801217a:	370c      	adds	r7, #12
 801217c:	46bd      	mov	sp, r7
 801217e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012182:	4770      	bx	lr

08012184 <I2C_RequestMemoryWrite>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                                uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                                uint32_t Tickstart)
{
 8012184:	b580      	push	{r7, lr}
 8012186:	b086      	sub	sp, #24
 8012188:	af02      	add	r7, sp, #8
 801218a:	60f8      	str	r0, [r7, #12]
 801218c:	4608      	mov	r0, r1
 801218e:	4611      	mov	r1, r2
 8012190:	461a      	mov	r2, r3
 8012192:	4603      	mov	r3, r0
 8012194:	817b      	strh	r3, [r7, #10]
 8012196:	460b      	mov	r3, r1
 8012198:	813b      	strh	r3, [r7, #8]
 801219a:	4613      	mov	r3, r2
 801219c:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 801219e:	88fb      	ldrh	r3, [r7, #6]
 80121a0:	b2da      	uxtb	r2, r3
 80121a2:	8979      	ldrh	r1, [r7, #10]
 80121a4:	4b20      	ldr	r3, [pc, #128]	@ (8012228 <I2C_RequestMemoryWrite+0xa4>)
 80121a6:	9300      	str	r3, [sp, #0]
 80121a8:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 80121ac:	68f8      	ldr	r0, [r7, #12]
 80121ae:	f000 fa6f 	bl	8012690 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80121b2:	69fa      	ldr	r2, [r7, #28]
 80121b4:	69b9      	ldr	r1, [r7, #24]
 80121b6:	68f8      	ldr	r0, [r7, #12]
 80121b8:	f000 f8ff 	bl	80123ba <I2C_WaitOnTXISFlagUntilTimeout>
 80121bc:	4603      	mov	r3, r0
 80121be:	2b00      	cmp	r3, #0
 80121c0:	d001      	beq.n	80121c6 <I2C_RequestMemoryWrite+0x42>
  {
    return HAL_ERROR;
 80121c2:	2301      	movs	r3, #1
 80121c4:	e02c      	b.n	8012220 <I2C_RequestMemoryWrite+0x9c>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80121c6:	88fb      	ldrh	r3, [r7, #6]
 80121c8:	2b01      	cmp	r3, #1
 80121ca:	d105      	bne.n	80121d8 <I2C_RequestMemoryWrite+0x54>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 80121cc:	893b      	ldrh	r3, [r7, #8]
 80121ce:	b2da      	uxtb	r2, r3
 80121d0:	68fb      	ldr	r3, [r7, #12]
 80121d2:	681b      	ldr	r3, [r3, #0]
 80121d4:	629a      	str	r2, [r3, #40]	@ 0x28
 80121d6:	e015      	b.n	8012204 <I2C_RequestMemoryWrite+0x80>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 80121d8:	893b      	ldrh	r3, [r7, #8]
 80121da:	0a1b      	lsrs	r3, r3, #8
 80121dc:	b29b      	uxth	r3, r3
 80121de:	b2da      	uxtb	r2, r3
 80121e0:	68fb      	ldr	r3, [r7, #12]
 80121e2:	681b      	ldr	r3, [r3, #0]
 80121e4:	629a      	str	r2, [r3, #40]	@ 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80121e6:	69fa      	ldr	r2, [r7, #28]
 80121e8:	69b9      	ldr	r1, [r7, #24]
 80121ea:	68f8      	ldr	r0, [r7, #12]
 80121ec:	f000 f8e5 	bl	80123ba <I2C_WaitOnTXISFlagUntilTimeout>
 80121f0:	4603      	mov	r3, r0
 80121f2:	2b00      	cmp	r3, #0
 80121f4:	d001      	beq.n	80121fa <I2C_RequestMemoryWrite+0x76>
    {
      return HAL_ERROR;
 80121f6:	2301      	movs	r3, #1
 80121f8:	e012      	b.n	8012220 <I2C_RequestMemoryWrite+0x9c>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 80121fa:	893b      	ldrh	r3, [r7, #8]
 80121fc:	b2da      	uxtb	r2, r3
 80121fe:	68fb      	ldr	r3, [r7, #12]
 8012200:	681b      	ldr	r3, [r3, #0]
 8012202:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 8012204:	69fb      	ldr	r3, [r7, #28]
 8012206:	9300      	str	r3, [sp, #0]
 8012208:	69bb      	ldr	r3, [r7, #24]
 801220a:	2200      	movs	r2, #0
 801220c:	2180      	movs	r1, #128	@ 0x80
 801220e:	68f8      	ldr	r0, [r7, #12]
 8012210:	f000 f884 	bl	801231c <I2C_WaitOnFlagUntilTimeout>
 8012214:	4603      	mov	r3, r0
 8012216:	2b00      	cmp	r3, #0
 8012218:	d001      	beq.n	801221e <I2C_RequestMemoryWrite+0x9a>
  {
    return HAL_ERROR;
 801221a:	2301      	movs	r3, #1
 801221c:	e000      	b.n	8012220 <I2C_RequestMemoryWrite+0x9c>
  }

  return HAL_OK;
 801221e:	2300      	movs	r3, #0
}
 8012220:	4618      	mov	r0, r3
 8012222:	3710      	adds	r7, #16
 8012224:	46bd      	mov	sp, r7
 8012226:	bd80      	pop	{r7, pc}
 8012228:	80002000 	.word	0x80002000

0801222c <I2C_RequestMemoryRead>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                               uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                               uint32_t Tickstart)
{
 801222c:	b580      	push	{r7, lr}
 801222e:	b086      	sub	sp, #24
 8012230:	af02      	add	r7, sp, #8
 8012232:	60f8      	str	r0, [r7, #12]
 8012234:	4608      	mov	r0, r1
 8012236:	4611      	mov	r1, r2
 8012238:	461a      	mov	r2, r3
 801223a:	4603      	mov	r3, r0
 801223c:	817b      	strh	r3, [r7, #10]
 801223e:	460b      	mov	r3, r1
 8012240:	813b      	strh	r3, [r7, #8]
 8012242:	4613      	mov	r3, r2
 8012244:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 8012246:	88fb      	ldrh	r3, [r7, #6]
 8012248:	b2da      	uxtb	r2, r3
 801224a:	8979      	ldrh	r1, [r7, #10]
 801224c:	4b20      	ldr	r3, [pc, #128]	@ (80122d0 <I2C_RequestMemoryRead+0xa4>)
 801224e:	9300      	str	r3, [sp, #0]
 8012250:	2300      	movs	r3, #0
 8012252:	68f8      	ldr	r0, [r7, #12]
 8012254:	f000 fa1c 	bl	8012690 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8012258:	69fa      	ldr	r2, [r7, #28]
 801225a:	69b9      	ldr	r1, [r7, #24]
 801225c:	68f8      	ldr	r0, [r7, #12]
 801225e:	f000 f8ac 	bl	80123ba <I2C_WaitOnTXISFlagUntilTimeout>
 8012262:	4603      	mov	r3, r0
 8012264:	2b00      	cmp	r3, #0
 8012266:	d001      	beq.n	801226c <I2C_RequestMemoryRead+0x40>
  {
    return HAL_ERROR;
 8012268:	2301      	movs	r3, #1
 801226a:	e02c      	b.n	80122c6 <I2C_RequestMemoryRead+0x9a>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 801226c:	88fb      	ldrh	r3, [r7, #6]
 801226e:	2b01      	cmp	r3, #1
 8012270:	d105      	bne.n	801227e <I2C_RequestMemoryRead+0x52>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8012272:	893b      	ldrh	r3, [r7, #8]
 8012274:	b2da      	uxtb	r2, r3
 8012276:	68fb      	ldr	r3, [r7, #12]
 8012278:	681b      	ldr	r3, [r3, #0]
 801227a:	629a      	str	r2, [r3, #40]	@ 0x28
 801227c:	e015      	b.n	80122aa <I2C_RequestMemoryRead+0x7e>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 801227e:	893b      	ldrh	r3, [r7, #8]
 8012280:	0a1b      	lsrs	r3, r3, #8
 8012282:	b29b      	uxth	r3, r3
 8012284:	b2da      	uxtb	r2, r3
 8012286:	68fb      	ldr	r3, [r7, #12]
 8012288:	681b      	ldr	r3, [r3, #0]
 801228a:	629a      	str	r2, [r3, #40]	@ 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 801228c:	69fa      	ldr	r2, [r7, #28]
 801228e:	69b9      	ldr	r1, [r7, #24]
 8012290:	68f8      	ldr	r0, [r7, #12]
 8012292:	f000 f892 	bl	80123ba <I2C_WaitOnTXISFlagUntilTimeout>
 8012296:	4603      	mov	r3, r0
 8012298:	2b00      	cmp	r3, #0
 801229a:	d001      	beq.n	80122a0 <I2C_RequestMemoryRead+0x74>
    {
      return HAL_ERROR;
 801229c:	2301      	movs	r3, #1
 801229e:	e012      	b.n	80122c6 <I2C_RequestMemoryRead+0x9a>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 80122a0:	893b      	ldrh	r3, [r7, #8]
 80122a2:	b2da      	uxtb	r2, r3
 80122a4:	68fb      	ldr	r3, [r7, #12]
 80122a6:	681b      	ldr	r3, [r3, #0]
 80122a8:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Wait until TC flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 80122aa:	69fb      	ldr	r3, [r7, #28]
 80122ac:	9300      	str	r3, [sp, #0]
 80122ae:	69bb      	ldr	r3, [r7, #24]
 80122b0:	2200      	movs	r2, #0
 80122b2:	2140      	movs	r1, #64	@ 0x40
 80122b4:	68f8      	ldr	r0, [r7, #12]
 80122b6:	f000 f831 	bl	801231c <I2C_WaitOnFlagUntilTimeout>
 80122ba:	4603      	mov	r3, r0
 80122bc:	2b00      	cmp	r3, #0
 80122be:	d001      	beq.n	80122c4 <I2C_RequestMemoryRead+0x98>
  {
    return HAL_ERROR;
 80122c0:	2301      	movs	r3, #1
 80122c2:	e000      	b.n	80122c6 <I2C_RequestMemoryRead+0x9a>
  }

  return HAL_OK;
 80122c4:	2300      	movs	r3, #0
}
 80122c6:	4618      	mov	r0, r3
 80122c8:	3710      	adds	r7, #16
 80122ca:	46bd      	mov	sp, r7
 80122cc:	bd80      	pop	{r7, pc}
 80122ce:	bf00      	nop
 80122d0:	80002000 	.word	0x80002000

080122d4 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 80122d4:	b480      	push	{r7}
 80122d6:	b083      	sub	sp, #12
 80122d8:	af00      	add	r7, sp, #0
 80122da:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 80122dc:	687b      	ldr	r3, [r7, #4]
 80122de:	681b      	ldr	r3, [r3, #0]
 80122e0:	699b      	ldr	r3, [r3, #24]
 80122e2:	f003 0302 	and.w	r3, r3, #2
 80122e6:	2b02      	cmp	r3, #2
 80122e8:	d103      	bne.n	80122f2 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 80122ea:	687b      	ldr	r3, [r7, #4]
 80122ec:	681b      	ldr	r3, [r3, #0]
 80122ee:	2200      	movs	r2, #0
 80122f0:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80122f2:	687b      	ldr	r3, [r7, #4]
 80122f4:	681b      	ldr	r3, [r3, #0]
 80122f6:	699b      	ldr	r3, [r3, #24]
 80122f8:	f003 0301 	and.w	r3, r3, #1
 80122fc:	2b01      	cmp	r3, #1
 80122fe:	d007      	beq.n	8012310 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8012300:	687b      	ldr	r3, [r7, #4]
 8012302:	681b      	ldr	r3, [r3, #0]
 8012304:	699a      	ldr	r2, [r3, #24]
 8012306:	687b      	ldr	r3, [r7, #4]
 8012308:	681b      	ldr	r3, [r3, #0]
 801230a:	f042 0201 	orr.w	r2, r2, #1
 801230e:	619a      	str	r2, [r3, #24]
  }
}
 8012310:	bf00      	nop
 8012312:	370c      	adds	r7, #12
 8012314:	46bd      	mov	sp, r7
 8012316:	f85d 7b04 	ldr.w	r7, [sp], #4
 801231a:	4770      	bx	lr

0801231c <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 801231c:	b580      	push	{r7, lr}
 801231e:	b084      	sub	sp, #16
 8012320:	af00      	add	r7, sp, #0
 8012322:	60f8      	str	r0, [r7, #12]
 8012324:	60b9      	str	r1, [r7, #8]
 8012326:	603b      	str	r3, [r7, #0]
 8012328:	4613      	mov	r3, r2
 801232a:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 801232c:	e031      	b.n	8012392 <I2C_WaitOnFlagUntilTimeout+0x76>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 801232e:	683b      	ldr	r3, [r7, #0]
 8012330:	f1b3 3fff 	cmp.w	r3, #4294967295
 8012334:	d02d      	beq.n	8012392 <I2C_WaitOnFlagUntilTimeout+0x76>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8012336:	f7fe fce3 	bl	8010d00 <HAL_GetTick>
 801233a:	4602      	mov	r2, r0
 801233c:	69bb      	ldr	r3, [r7, #24]
 801233e:	1ad3      	subs	r3, r2, r3
 8012340:	683a      	ldr	r2, [r7, #0]
 8012342:	429a      	cmp	r2, r3
 8012344:	d302      	bcc.n	801234c <I2C_WaitOnFlagUntilTimeout+0x30>
 8012346:	683b      	ldr	r3, [r7, #0]
 8012348:	2b00      	cmp	r3, #0
 801234a:	d122      	bne.n	8012392 <I2C_WaitOnFlagUntilTimeout+0x76>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 801234c:	68fb      	ldr	r3, [r7, #12]
 801234e:	681b      	ldr	r3, [r3, #0]
 8012350:	699a      	ldr	r2, [r3, #24]
 8012352:	68bb      	ldr	r3, [r7, #8]
 8012354:	4013      	ands	r3, r2
 8012356:	68ba      	ldr	r2, [r7, #8]
 8012358:	429a      	cmp	r2, r3
 801235a:	bf0c      	ite	eq
 801235c:	2301      	moveq	r3, #1
 801235e:	2300      	movne	r3, #0
 8012360:	b2db      	uxtb	r3, r3
 8012362:	461a      	mov	r2, r3
 8012364:	79fb      	ldrb	r3, [r7, #7]
 8012366:	429a      	cmp	r2, r3
 8012368:	d113      	bne.n	8012392 <I2C_WaitOnFlagUntilTimeout+0x76>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 801236a:	68fb      	ldr	r3, [r7, #12]
 801236c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 801236e:	f043 0220 	orr.w	r2, r3, #32
 8012372:	68fb      	ldr	r3, [r7, #12]
 8012374:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8012376:	68fb      	ldr	r3, [r7, #12]
 8012378:	2220      	movs	r2, #32
 801237a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 801237e:	68fb      	ldr	r3, [r7, #12]
 8012380:	2200      	movs	r2, #0
 8012382:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8012386:	68fb      	ldr	r3, [r7, #12]
 8012388:	2200      	movs	r2, #0
 801238a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
          return HAL_ERROR;
 801238e:	2301      	movs	r3, #1
 8012390:	e00f      	b.n	80123b2 <I2C_WaitOnFlagUntilTimeout+0x96>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8012392:	68fb      	ldr	r3, [r7, #12]
 8012394:	681b      	ldr	r3, [r3, #0]
 8012396:	699a      	ldr	r2, [r3, #24]
 8012398:	68bb      	ldr	r3, [r7, #8]
 801239a:	4013      	ands	r3, r2
 801239c:	68ba      	ldr	r2, [r7, #8]
 801239e:	429a      	cmp	r2, r3
 80123a0:	bf0c      	ite	eq
 80123a2:	2301      	moveq	r3, #1
 80123a4:	2300      	movne	r3, #0
 80123a6:	b2db      	uxtb	r3, r3
 80123a8:	461a      	mov	r2, r3
 80123aa:	79fb      	ldrb	r3, [r7, #7]
 80123ac:	429a      	cmp	r2, r3
 80123ae:	d0be      	beq.n	801232e <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80123b0:	2300      	movs	r3, #0
}
 80123b2:	4618      	mov	r0, r3
 80123b4:	3710      	adds	r7, #16
 80123b6:	46bd      	mov	sp, r7
 80123b8:	bd80      	pop	{r7, pc}

080123ba <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 80123ba:	b580      	push	{r7, lr}
 80123bc:	b084      	sub	sp, #16
 80123be:	af00      	add	r7, sp, #0
 80123c0:	60f8      	str	r0, [r7, #12]
 80123c2:	60b9      	str	r1, [r7, #8]
 80123c4:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 80123c6:	e033      	b.n	8012430 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 80123c8:	687a      	ldr	r2, [r7, #4]
 80123ca:	68b9      	ldr	r1, [r7, #8]
 80123cc:	68f8      	ldr	r0, [r7, #12]
 80123ce:	f000 f87f 	bl	80124d0 <I2C_IsErrorOccurred>
 80123d2:	4603      	mov	r3, r0
 80123d4:	2b00      	cmp	r3, #0
 80123d6:	d001      	beq.n	80123dc <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 80123d8:	2301      	movs	r3, #1
 80123da:	e031      	b.n	8012440 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80123dc:	68bb      	ldr	r3, [r7, #8]
 80123de:	f1b3 3fff 	cmp.w	r3, #4294967295
 80123e2:	d025      	beq.n	8012430 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80123e4:	f7fe fc8c 	bl	8010d00 <HAL_GetTick>
 80123e8:	4602      	mov	r2, r0
 80123ea:	687b      	ldr	r3, [r7, #4]
 80123ec:	1ad3      	subs	r3, r2, r3
 80123ee:	68ba      	ldr	r2, [r7, #8]
 80123f0:	429a      	cmp	r2, r3
 80123f2:	d302      	bcc.n	80123fa <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 80123f4:	68bb      	ldr	r3, [r7, #8]
 80123f6:	2b00      	cmp	r3, #0
 80123f8:	d11a      	bne.n	8012430 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET))
 80123fa:	68fb      	ldr	r3, [r7, #12]
 80123fc:	681b      	ldr	r3, [r3, #0]
 80123fe:	699b      	ldr	r3, [r3, #24]
 8012400:	f003 0302 	and.w	r3, r3, #2
 8012404:	2b02      	cmp	r3, #2
 8012406:	d013      	beq.n	8012430 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8012408:	68fb      	ldr	r3, [r7, #12]
 801240a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 801240c:	f043 0220 	orr.w	r2, r3, #32
 8012410:	68fb      	ldr	r3, [r7, #12]
 8012412:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8012414:	68fb      	ldr	r3, [r7, #12]
 8012416:	2220      	movs	r2, #32
 8012418:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 801241c:	68fb      	ldr	r3, [r7, #12]
 801241e:	2200      	movs	r2, #0
 8012420:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8012424:	68fb      	ldr	r3, [r7, #12]
 8012426:	2200      	movs	r2, #0
 8012428:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 801242c:	2301      	movs	r3, #1
 801242e:	e007      	b.n	8012440 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8012430:	68fb      	ldr	r3, [r7, #12]
 8012432:	681b      	ldr	r3, [r3, #0]
 8012434:	699b      	ldr	r3, [r3, #24]
 8012436:	f003 0302 	and.w	r3, r3, #2
 801243a:	2b02      	cmp	r3, #2
 801243c:	d1c4      	bne.n	80123c8 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 801243e:	2300      	movs	r3, #0
}
 8012440:	4618      	mov	r0, r3
 8012442:	3710      	adds	r7, #16
 8012444:	46bd      	mov	sp, r7
 8012446:	bd80      	pop	{r7, pc}

08012448 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8012448:	b580      	push	{r7, lr}
 801244a:	b084      	sub	sp, #16
 801244c:	af00      	add	r7, sp, #0
 801244e:	60f8      	str	r0, [r7, #12]
 8012450:	60b9      	str	r1, [r7, #8]
 8012452:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8012454:	e02f      	b.n	80124b6 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8012456:	687a      	ldr	r2, [r7, #4]
 8012458:	68b9      	ldr	r1, [r7, #8]
 801245a:	68f8      	ldr	r0, [r7, #12]
 801245c:	f000 f838 	bl	80124d0 <I2C_IsErrorOccurred>
 8012460:	4603      	mov	r3, r0
 8012462:	2b00      	cmp	r3, #0
 8012464:	d001      	beq.n	801246a <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8012466:	2301      	movs	r3, #1
 8012468:	e02d      	b.n	80124c6 <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 801246a:	f7fe fc49 	bl	8010d00 <HAL_GetTick>
 801246e:	4602      	mov	r2, r0
 8012470:	687b      	ldr	r3, [r7, #4]
 8012472:	1ad3      	subs	r3, r2, r3
 8012474:	68ba      	ldr	r2, [r7, #8]
 8012476:	429a      	cmp	r2, r3
 8012478:	d302      	bcc.n	8012480 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 801247a:	68bb      	ldr	r3, [r7, #8]
 801247c:	2b00      	cmp	r3, #0
 801247e:	d11a      	bne.n	80124b6 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET))
 8012480:	68fb      	ldr	r3, [r7, #12]
 8012482:	681b      	ldr	r3, [r3, #0]
 8012484:	699b      	ldr	r3, [r3, #24]
 8012486:	f003 0320 	and.w	r3, r3, #32
 801248a:	2b20      	cmp	r3, #32
 801248c:	d013      	beq.n	80124b6 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 801248e:	68fb      	ldr	r3, [r7, #12]
 8012490:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8012492:	f043 0220 	orr.w	r2, r3, #32
 8012496:	68fb      	ldr	r3, [r7, #12]
 8012498:	645a      	str	r2, [r3, #68]	@ 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 801249a:	68fb      	ldr	r3, [r7, #12]
 801249c:	2220      	movs	r2, #32
 801249e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80124a2:	68fb      	ldr	r3, [r7, #12]
 80124a4:	2200      	movs	r2, #0
 80124a6:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80124aa:	68fb      	ldr	r3, [r7, #12]
 80124ac:	2200      	movs	r2, #0
 80124ae:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        return HAL_ERROR;
 80124b2:	2301      	movs	r3, #1
 80124b4:	e007      	b.n	80124c6 <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80124b6:	68fb      	ldr	r3, [r7, #12]
 80124b8:	681b      	ldr	r3, [r3, #0]
 80124ba:	699b      	ldr	r3, [r3, #24]
 80124bc:	f003 0320 	and.w	r3, r3, #32
 80124c0:	2b20      	cmp	r3, #32
 80124c2:	d1c8      	bne.n	8012456 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80124c4:	2300      	movs	r3, #0
}
 80124c6:	4618      	mov	r0, r3
 80124c8:	3710      	adds	r7, #16
 80124ca:	46bd      	mov	sp, r7
 80124cc:	bd80      	pop	{r7, pc}
	...

080124d0 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80124d0:	b580      	push	{r7, lr}
 80124d2:	b08a      	sub	sp, #40	@ 0x28
 80124d4:	af00      	add	r7, sp, #0
 80124d6:	60f8      	str	r0, [r7, #12]
 80124d8:	60b9      	str	r1, [r7, #8]
 80124da:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80124dc:	2300      	movs	r3, #0
 80124de:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 80124e2:	68fb      	ldr	r3, [r7, #12]
 80124e4:	681b      	ldr	r3, [r3, #0]
 80124e6:	699b      	ldr	r3, [r3, #24]
 80124e8:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 80124ea:	2300      	movs	r3, #0
 80124ec:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 80124ee:	687b      	ldr	r3, [r7, #4]
 80124f0:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 80124f2:	69bb      	ldr	r3, [r7, #24]
 80124f4:	f003 0310 	and.w	r3, r3, #16
 80124f8:	2b00      	cmp	r3, #0
 80124fa:	d068      	beq.n	80125ce <I2C_IsErrorOccurred+0xfe>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80124fc:	68fb      	ldr	r3, [r7, #12]
 80124fe:	681b      	ldr	r3, [r3, #0]
 8012500:	2210      	movs	r2, #16
 8012502:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8012504:	e049      	b.n	801259a <I2C_IsErrorOccurred+0xca>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8012506:	68bb      	ldr	r3, [r7, #8]
 8012508:	f1b3 3fff 	cmp.w	r3, #4294967295
 801250c:	d045      	beq.n	801259a <I2C_IsErrorOccurred+0xca>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 801250e:	f7fe fbf7 	bl	8010d00 <HAL_GetTick>
 8012512:	4602      	mov	r2, r0
 8012514:	69fb      	ldr	r3, [r7, #28]
 8012516:	1ad3      	subs	r3, r2, r3
 8012518:	68ba      	ldr	r2, [r7, #8]
 801251a:	429a      	cmp	r2, r3
 801251c:	d302      	bcc.n	8012524 <I2C_IsErrorOccurred+0x54>
 801251e:	68bb      	ldr	r3, [r7, #8]
 8012520:	2b00      	cmp	r3, #0
 8012522:	d13a      	bne.n	801259a <I2C_IsErrorOccurred+0xca>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 8012524:	68fb      	ldr	r3, [r7, #12]
 8012526:	681b      	ldr	r3, [r3, #0]
 8012528:	685b      	ldr	r3, [r3, #4]
 801252a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 801252e:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 8012530:	68fb      	ldr	r3, [r7, #12]
 8012532:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8012536:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8012538:	68fb      	ldr	r3, [r7, #12]
 801253a:	681b      	ldr	r3, [r3, #0]
 801253c:	699b      	ldr	r3, [r3, #24]
 801253e:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8012542:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8012546:	d121      	bne.n	801258c <I2C_IsErrorOccurred+0xbc>
 8012548:	697b      	ldr	r3, [r7, #20]
 801254a:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 801254e:	d01d      	beq.n	801258c <I2C_IsErrorOccurred+0xbc>
              (tmp1 != I2C_CR2_STOP) && \
 8012550:	7cfb      	ldrb	r3, [r7, #19]
 8012552:	2b20      	cmp	r3, #32
 8012554:	d01a      	beq.n	801258c <I2C_IsErrorOccurred+0xbc>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8012556:	68fb      	ldr	r3, [r7, #12]
 8012558:	681b      	ldr	r3, [r3, #0]
 801255a:	685a      	ldr	r2, [r3, #4]
 801255c:	68fb      	ldr	r3, [r7, #12]
 801255e:	681b      	ldr	r3, [r3, #0]
 8012560:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8012564:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 8012566:	f7fe fbcb 	bl	8010d00 <HAL_GetTick>
 801256a:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 801256c:	e00e      	b.n	801258c <I2C_IsErrorOccurred+0xbc>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 801256e:	f7fe fbc7 	bl	8010d00 <HAL_GetTick>
 8012572:	4602      	mov	r2, r0
 8012574:	69fb      	ldr	r3, [r7, #28]
 8012576:	1ad3      	subs	r3, r2, r3
 8012578:	2b19      	cmp	r3, #25
 801257a:	d907      	bls.n	801258c <I2C_IsErrorOccurred+0xbc>
            {
              error_code |= HAL_I2C_ERROR_TIMEOUT;
 801257c:	6a3b      	ldr	r3, [r7, #32]
 801257e:	f043 0320 	orr.w	r3, r3, #32
 8012582:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 8012584:	2301      	movs	r3, #1
 8012586:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

              break;
 801258a:	e006      	b.n	801259a <I2C_IsErrorOccurred+0xca>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 801258c:	68fb      	ldr	r3, [r7, #12]
 801258e:	681b      	ldr	r3, [r3, #0]
 8012590:	699b      	ldr	r3, [r3, #24]
 8012592:	f003 0320 	and.w	r3, r3, #32
 8012596:	2b20      	cmp	r3, #32
 8012598:	d1e9      	bne.n	801256e <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 801259a:	68fb      	ldr	r3, [r7, #12]
 801259c:	681b      	ldr	r3, [r3, #0]
 801259e:	699b      	ldr	r3, [r3, #24]
 80125a0:	f003 0320 	and.w	r3, r3, #32
 80125a4:	2b20      	cmp	r3, #32
 80125a6:	d003      	beq.n	80125b0 <I2C_IsErrorOccurred+0xe0>
 80125a8:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80125ac:	2b00      	cmp	r3, #0
 80125ae:	d0aa      	beq.n	8012506 <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 80125b0:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80125b4:	2b00      	cmp	r3, #0
 80125b6:	d103      	bne.n	80125c0 <I2C_IsErrorOccurred+0xf0>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80125b8:	68fb      	ldr	r3, [r7, #12]
 80125ba:	681b      	ldr	r3, [r3, #0]
 80125bc:	2220      	movs	r2, #32
 80125be:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 80125c0:	6a3b      	ldr	r3, [r7, #32]
 80125c2:	f043 0304 	orr.w	r3, r3, #4
 80125c6:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 80125c8:	2301      	movs	r3, #1
 80125ca:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 80125ce:	68fb      	ldr	r3, [r7, #12]
 80125d0:	681b      	ldr	r3, [r3, #0]
 80125d2:	699b      	ldr	r3, [r3, #24]
 80125d4:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 80125d6:	69bb      	ldr	r3, [r7, #24]
 80125d8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80125dc:	2b00      	cmp	r3, #0
 80125de:	d00b      	beq.n	80125f8 <I2C_IsErrorOccurred+0x128>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 80125e0:	6a3b      	ldr	r3, [r7, #32]
 80125e2:	f043 0301 	orr.w	r3, r3, #1
 80125e6:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 80125e8:	68fb      	ldr	r3, [r7, #12]
 80125ea:	681b      	ldr	r3, [r3, #0]
 80125ec:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80125f0:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 80125f2:	2301      	movs	r3, #1
 80125f4:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 80125f8:	69bb      	ldr	r3, [r7, #24]
 80125fa:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80125fe:	2b00      	cmp	r3, #0
 8012600:	d00b      	beq.n	801261a <I2C_IsErrorOccurred+0x14a>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 8012602:	6a3b      	ldr	r3, [r7, #32]
 8012604:	f043 0308 	orr.w	r3, r3, #8
 8012608:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 801260a:	68fb      	ldr	r3, [r7, #12]
 801260c:	681b      	ldr	r3, [r3, #0]
 801260e:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8012612:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8012614:	2301      	movs	r3, #1
 8012616:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 801261a:	69bb      	ldr	r3, [r7, #24]
 801261c:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8012620:	2b00      	cmp	r3, #0
 8012622:	d00b      	beq.n	801263c <I2C_IsErrorOccurred+0x16c>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 8012624:	6a3b      	ldr	r3, [r7, #32]
 8012626:	f043 0302 	orr.w	r3, r3, #2
 801262a:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 801262c:	68fb      	ldr	r3, [r7, #12]
 801262e:	681b      	ldr	r3, [r3, #0]
 8012630:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8012634:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8012636:	2301      	movs	r3, #1
 8012638:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  if (status != HAL_OK)
 801263c:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8012640:	2b00      	cmp	r3, #0
 8012642:	d01c      	beq.n	801267e <I2C_IsErrorOccurred+0x1ae>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8012644:	68f8      	ldr	r0, [r7, #12]
 8012646:	f7ff fe45 	bl	80122d4 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 801264a:	68fb      	ldr	r3, [r7, #12]
 801264c:	681b      	ldr	r3, [r3, #0]
 801264e:	6859      	ldr	r1, [r3, #4]
 8012650:	68fb      	ldr	r3, [r7, #12]
 8012652:	681a      	ldr	r2, [r3, #0]
 8012654:	4b0d      	ldr	r3, [pc, #52]	@ (801268c <I2C_IsErrorOccurred+0x1bc>)
 8012656:	400b      	ands	r3, r1
 8012658:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 801265a:	68fb      	ldr	r3, [r7, #12]
 801265c:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 801265e:	6a3b      	ldr	r3, [r7, #32]
 8012660:	431a      	orrs	r2, r3
 8012662:	68fb      	ldr	r3, [r7, #12]
 8012664:	645a      	str	r2, [r3, #68]	@ 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8012666:	68fb      	ldr	r3, [r7, #12]
 8012668:	2220      	movs	r2, #32
 801266a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 801266e:	68fb      	ldr	r3, [r7, #12]
 8012670:	2200      	movs	r2, #0
 8012672:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8012676:	68fb      	ldr	r3, [r7, #12]
 8012678:	2200      	movs	r2, #0
 801267a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
  }

  return status;
 801267e:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
}
 8012682:	4618      	mov	r0, r3
 8012684:	3728      	adds	r7, #40	@ 0x28
 8012686:	46bd      	mov	sp, r7
 8012688:	bd80      	pop	{r7, pc}
 801268a:	bf00      	nop
 801268c:	fe00e800 	.word	0xfe00e800

08012690 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8012690:	b480      	push	{r7}
 8012692:	b087      	sub	sp, #28
 8012694:	af00      	add	r7, sp, #0
 8012696:	60f8      	str	r0, [r7, #12]
 8012698:	607b      	str	r3, [r7, #4]
 801269a:	460b      	mov	r3, r1
 801269c:	817b      	strh	r3, [r7, #10]
 801269e:	4613      	mov	r3, r2
 80126a0:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80126a2:	897b      	ldrh	r3, [r7, #10]
 80126a4:	f3c3 0209 	ubfx	r2, r3, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 80126a8:	7a7b      	ldrb	r3, [r7, #9]
 80126aa:	041b      	lsls	r3, r3, #16
 80126ac:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80126b0:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 80126b2:	687b      	ldr	r3, [r7, #4]
 80126b4:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80126b6:	6a3b      	ldr	r3, [r7, #32]
 80126b8:	4313      	orrs	r3, r2
 80126ba:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 80126be:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 80126c0:	68fb      	ldr	r3, [r7, #12]
 80126c2:	681b      	ldr	r3, [r3, #0]
 80126c4:	685a      	ldr	r2, [r3, #4]
 80126c6:	6a3b      	ldr	r3, [r7, #32]
 80126c8:	0d5b      	lsrs	r3, r3, #21
 80126ca:	f403 6180 	and.w	r1, r3, #1024	@ 0x400
 80126ce:	4b08      	ldr	r3, [pc, #32]	@ (80126f0 <I2C_TransferConfig+0x60>)
 80126d0:	430b      	orrs	r3, r1
 80126d2:	43db      	mvns	r3, r3
 80126d4:	ea02 0103 	and.w	r1, r2, r3
 80126d8:	68fb      	ldr	r3, [r7, #12]
 80126da:	681b      	ldr	r3, [r3, #0]
 80126dc:	697a      	ldr	r2, [r7, #20]
 80126de:	430a      	orrs	r2, r1
 80126e0:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 80126e2:	bf00      	nop
 80126e4:	371c      	adds	r7, #28
 80126e6:	46bd      	mov	sp, r7
 80126e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80126ec:	4770      	bx	lr
 80126ee:	bf00      	nop
 80126f0:	03ff63ff 	.word	0x03ff63ff

080126f4 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 80126f4:	b480      	push	{r7}
 80126f6:	b083      	sub	sp, #12
 80126f8:	af00      	add	r7, sp, #0
 80126fa:	6078      	str	r0, [r7, #4]
 80126fc:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80126fe:	687b      	ldr	r3, [r7, #4]
 8012700:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8012704:	b2db      	uxtb	r3, r3
 8012706:	2b20      	cmp	r3, #32
 8012708:	d138      	bne.n	801277c <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 801270a:	687b      	ldr	r3, [r7, #4]
 801270c:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8012710:	2b01      	cmp	r3, #1
 8012712:	d101      	bne.n	8012718 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8012714:	2302      	movs	r3, #2
 8012716:	e032      	b.n	801277e <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8012718:	687b      	ldr	r3, [r7, #4]
 801271a:	2201      	movs	r2, #1
 801271c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8012720:	687b      	ldr	r3, [r7, #4]
 8012722:	2224      	movs	r2, #36	@ 0x24
 8012724:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8012728:	687b      	ldr	r3, [r7, #4]
 801272a:	681b      	ldr	r3, [r3, #0]
 801272c:	681a      	ldr	r2, [r3, #0]
 801272e:	687b      	ldr	r3, [r7, #4]
 8012730:	681b      	ldr	r3, [r3, #0]
 8012732:	f022 0201 	bic.w	r2, r2, #1
 8012736:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8012738:	687b      	ldr	r3, [r7, #4]
 801273a:	681b      	ldr	r3, [r3, #0]
 801273c:	681a      	ldr	r2, [r3, #0]
 801273e:	687b      	ldr	r3, [r7, #4]
 8012740:	681b      	ldr	r3, [r3, #0]
 8012742:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8012746:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8012748:	687b      	ldr	r3, [r7, #4]
 801274a:	681b      	ldr	r3, [r3, #0]
 801274c:	6819      	ldr	r1, [r3, #0]
 801274e:	687b      	ldr	r3, [r7, #4]
 8012750:	681b      	ldr	r3, [r3, #0]
 8012752:	683a      	ldr	r2, [r7, #0]
 8012754:	430a      	orrs	r2, r1
 8012756:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8012758:	687b      	ldr	r3, [r7, #4]
 801275a:	681b      	ldr	r3, [r3, #0]
 801275c:	681a      	ldr	r2, [r3, #0]
 801275e:	687b      	ldr	r3, [r7, #4]
 8012760:	681b      	ldr	r3, [r3, #0]
 8012762:	f042 0201 	orr.w	r2, r2, #1
 8012766:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8012768:	687b      	ldr	r3, [r7, #4]
 801276a:	2220      	movs	r2, #32
 801276c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8012770:	687b      	ldr	r3, [r7, #4]
 8012772:	2200      	movs	r2, #0
 8012774:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8012778:	2300      	movs	r3, #0
 801277a:	e000      	b.n	801277e <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 801277c:	2302      	movs	r3, #2
  }
}
 801277e:	4618      	mov	r0, r3
 8012780:	370c      	adds	r7, #12
 8012782:	46bd      	mov	sp, r7
 8012784:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012788:	4770      	bx	lr

0801278a <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 801278a:	b480      	push	{r7}
 801278c:	b085      	sub	sp, #20
 801278e:	af00      	add	r7, sp, #0
 8012790:	6078      	str	r0, [r7, #4]
 8012792:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8012794:	687b      	ldr	r3, [r7, #4]
 8012796:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 801279a:	b2db      	uxtb	r3, r3
 801279c:	2b20      	cmp	r3, #32
 801279e:	d139      	bne.n	8012814 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80127a0:	687b      	ldr	r3, [r7, #4]
 80127a2:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80127a6:	2b01      	cmp	r3, #1
 80127a8:	d101      	bne.n	80127ae <HAL_I2CEx_ConfigDigitalFilter+0x24>
 80127aa:	2302      	movs	r3, #2
 80127ac:	e033      	b.n	8012816 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 80127ae:	687b      	ldr	r3, [r7, #4]
 80127b0:	2201      	movs	r2, #1
 80127b2:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80127b6:	687b      	ldr	r3, [r7, #4]
 80127b8:	2224      	movs	r2, #36	@ 0x24
 80127ba:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80127be:	687b      	ldr	r3, [r7, #4]
 80127c0:	681b      	ldr	r3, [r3, #0]
 80127c2:	681a      	ldr	r2, [r3, #0]
 80127c4:	687b      	ldr	r3, [r7, #4]
 80127c6:	681b      	ldr	r3, [r3, #0]
 80127c8:	f022 0201 	bic.w	r2, r2, #1
 80127cc:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 80127ce:	687b      	ldr	r3, [r7, #4]
 80127d0:	681b      	ldr	r3, [r3, #0]
 80127d2:	681b      	ldr	r3, [r3, #0]
 80127d4:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 80127d6:	68fb      	ldr	r3, [r7, #12]
 80127d8:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 80127dc:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 80127de:	683b      	ldr	r3, [r7, #0]
 80127e0:	021b      	lsls	r3, r3, #8
 80127e2:	68fa      	ldr	r2, [r7, #12]
 80127e4:	4313      	orrs	r3, r2
 80127e6:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 80127e8:	687b      	ldr	r3, [r7, #4]
 80127ea:	681b      	ldr	r3, [r3, #0]
 80127ec:	68fa      	ldr	r2, [r7, #12]
 80127ee:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80127f0:	687b      	ldr	r3, [r7, #4]
 80127f2:	681b      	ldr	r3, [r3, #0]
 80127f4:	681a      	ldr	r2, [r3, #0]
 80127f6:	687b      	ldr	r3, [r7, #4]
 80127f8:	681b      	ldr	r3, [r3, #0]
 80127fa:	f042 0201 	orr.w	r2, r2, #1
 80127fe:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8012800:	687b      	ldr	r3, [r7, #4]
 8012802:	2220      	movs	r2, #32
 8012804:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8012808:	687b      	ldr	r3, [r7, #4]
 801280a:	2200      	movs	r2, #0
 801280c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8012810:	2300      	movs	r3, #0
 8012812:	e000      	b.n	8012816 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8012814:	2302      	movs	r3, #2
  }
}
 8012816:	4618      	mov	r0, r3
 8012818:	3714      	adds	r7, #20
 801281a:	46bd      	mov	sp, r7
 801281c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012820:	4770      	bx	lr
	...

08012824 <HAL_LTDC_Init>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LTDC_Init(LTDC_HandleTypeDef *hltdc)
{
 8012824:	b580      	push	{r7, lr}
 8012826:	b084      	sub	sp, #16
 8012828:	af00      	add	r7, sp, #0
 801282a:	6078      	str	r0, [r7, #4]
  uint32_t tmp;
  uint32_t tmp1;

  /* Check the LTDC peripheral state */
  if (hltdc == NULL)
 801282c:	687b      	ldr	r3, [r7, #4]
 801282e:	2b00      	cmp	r3, #0
 8012830:	d101      	bne.n	8012836 <HAL_LTDC_Init+0x12>
  {
    return HAL_ERROR;
 8012832:	2301      	movs	r3, #1
 8012834:	e0bf      	b.n	80129b6 <HAL_LTDC_Init+0x192>
    }
    /* Init the low level hardware */
    hltdc->MspInitCallback(hltdc);
  }
#else
  if (hltdc->State == HAL_LTDC_STATE_RESET)
 8012836:	687b      	ldr	r3, [r7, #4]
 8012838:	f893 30a1 	ldrb.w	r3, [r3, #161]	@ 0xa1
 801283c:	b2db      	uxtb	r3, r3
 801283e:	2b00      	cmp	r3, #0
 8012840:	d106      	bne.n	8012850 <HAL_LTDC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hltdc->Lock = HAL_UNLOCKED;
 8012842:	687b      	ldr	r3, [r7, #4]
 8012844:	2200      	movs	r2, #0
 8012846:	f883 20a0 	strb.w	r2, [r3, #160]	@ 0xa0
    /* Init the low level hardware */
    HAL_LTDC_MspInit(hltdc);
 801284a:	6878      	ldr	r0, [r7, #4]
 801284c:	f7ee fb34 	bl	8000eb8 <HAL_LTDC_MspInit>
  }
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 8012850:	687b      	ldr	r3, [r7, #4]
 8012852:	2202      	movs	r2, #2
 8012854:	f883 20a1 	strb.w	r2, [r3, #161]	@ 0xa1

  /* Configure the HS, VS, DE and PC polarity */
  hltdc->Instance->GCR &= ~(LTDC_GCR_HSPOL | LTDC_GCR_VSPOL | LTDC_GCR_DEPOL | LTDC_GCR_PCPOL);
 8012858:	687b      	ldr	r3, [r7, #4]
 801285a:	681b      	ldr	r3, [r3, #0]
 801285c:	699a      	ldr	r2, [r3, #24]
 801285e:	687b      	ldr	r3, [r7, #4]
 8012860:	681b      	ldr	r3, [r3, #0]
 8012862:	f022 4270 	bic.w	r2, r2, #4026531840	@ 0xf0000000
 8012866:	619a      	str	r2, [r3, #24]
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 8012868:	687b      	ldr	r3, [r7, #4]
 801286a:	681b      	ldr	r3, [r3, #0]
 801286c:	6999      	ldr	r1, [r3, #24]
 801286e:	687b      	ldr	r3, [r7, #4]
 8012870:	685a      	ldr	r2, [r3, #4]
 8012872:	687b      	ldr	r3, [r7, #4]
 8012874:	689b      	ldr	r3, [r3, #8]
 8012876:	431a      	orrs	r2, r3
                                     hltdc->Init.DEPolarity | hltdc->Init.PCPolarity);
 8012878:	687b      	ldr	r3, [r7, #4]
 801287a:	68db      	ldr	r3, [r3, #12]
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 801287c:	431a      	orrs	r2, r3
                                     hltdc->Init.DEPolarity | hltdc->Init.PCPolarity);
 801287e:	687b      	ldr	r3, [r7, #4]
 8012880:	691b      	ldr	r3, [r3, #16]
 8012882:	431a      	orrs	r2, r3
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 8012884:	687b      	ldr	r3, [r7, #4]
 8012886:	681b      	ldr	r3, [r3, #0]
 8012888:	430a      	orrs	r2, r1
 801288a:	619a      	str	r2, [r3, #24]

  /* Set Synchronization size */
  hltdc->Instance->SSCR &= ~(LTDC_SSCR_VSH | LTDC_SSCR_HSW);
 801288c:	687b      	ldr	r3, [r7, #4]
 801288e:	681b      	ldr	r3, [r3, #0]
 8012890:	6899      	ldr	r1, [r3, #8]
 8012892:	687b      	ldr	r3, [r7, #4]
 8012894:	681a      	ldr	r2, [r3, #0]
 8012896:	4b4a      	ldr	r3, [pc, #296]	@ (80129c0 <HAL_LTDC_Init+0x19c>)
 8012898:	400b      	ands	r3, r1
 801289a:	6093      	str	r3, [r2, #8]
  tmp = (hltdc->Init.HorizontalSync << 16U);
 801289c:	687b      	ldr	r3, [r7, #4]
 801289e:	695b      	ldr	r3, [r3, #20]
 80128a0:	041b      	lsls	r3, r3, #16
 80128a2:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->SSCR |= (tmp | hltdc->Init.VerticalSync);
 80128a4:	687b      	ldr	r3, [r7, #4]
 80128a6:	681b      	ldr	r3, [r3, #0]
 80128a8:	6899      	ldr	r1, [r3, #8]
 80128aa:	687b      	ldr	r3, [r7, #4]
 80128ac:	699a      	ldr	r2, [r3, #24]
 80128ae:	68fb      	ldr	r3, [r7, #12]
 80128b0:	431a      	orrs	r2, r3
 80128b2:	687b      	ldr	r3, [r7, #4]
 80128b4:	681b      	ldr	r3, [r3, #0]
 80128b6:	430a      	orrs	r2, r1
 80128b8:	609a      	str	r2, [r3, #8]

  /* Set Accumulated Back porch */
  hltdc->Instance->BPCR &= ~(LTDC_BPCR_AVBP | LTDC_BPCR_AHBP);
 80128ba:	687b      	ldr	r3, [r7, #4]
 80128bc:	681b      	ldr	r3, [r3, #0]
 80128be:	68d9      	ldr	r1, [r3, #12]
 80128c0:	687b      	ldr	r3, [r7, #4]
 80128c2:	681a      	ldr	r2, [r3, #0]
 80128c4:	4b3e      	ldr	r3, [pc, #248]	@ (80129c0 <HAL_LTDC_Init+0x19c>)
 80128c6:	400b      	ands	r3, r1
 80128c8:	60d3      	str	r3, [r2, #12]
  tmp = (hltdc->Init.AccumulatedHBP << 16U);
 80128ca:	687b      	ldr	r3, [r7, #4]
 80128cc:	69db      	ldr	r3, [r3, #28]
 80128ce:	041b      	lsls	r3, r3, #16
 80128d0:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->BPCR |= (tmp | hltdc->Init.AccumulatedVBP);
 80128d2:	687b      	ldr	r3, [r7, #4]
 80128d4:	681b      	ldr	r3, [r3, #0]
 80128d6:	68d9      	ldr	r1, [r3, #12]
 80128d8:	687b      	ldr	r3, [r7, #4]
 80128da:	6a1a      	ldr	r2, [r3, #32]
 80128dc:	68fb      	ldr	r3, [r7, #12]
 80128de:	431a      	orrs	r2, r3
 80128e0:	687b      	ldr	r3, [r7, #4]
 80128e2:	681b      	ldr	r3, [r3, #0]
 80128e4:	430a      	orrs	r2, r1
 80128e6:	60da      	str	r2, [r3, #12]

  /* Set Accumulated Active Width */
  hltdc->Instance->AWCR &= ~(LTDC_AWCR_AAH | LTDC_AWCR_AAW);
 80128e8:	687b      	ldr	r3, [r7, #4]
 80128ea:	681b      	ldr	r3, [r3, #0]
 80128ec:	6919      	ldr	r1, [r3, #16]
 80128ee:	687b      	ldr	r3, [r7, #4]
 80128f0:	681a      	ldr	r2, [r3, #0]
 80128f2:	4b33      	ldr	r3, [pc, #204]	@ (80129c0 <HAL_LTDC_Init+0x19c>)
 80128f4:	400b      	ands	r3, r1
 80128f6:	6113      	str	r3, [r2, #16]
  tmp = (hltdc->Init.AccumulatedActiveW << 16U);
 80128f8:	687b      	ldr	r3, [r7, #4]
 80128fa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80128fc:	041b      	lsls	r3, r3, #16
 80128fe:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->AWCR |= (tmp | hltdc->Init.AccumulatedActiveH);
 8012900:	687b      	ldr	r3, [r7, #4]
 8012902:	681b      	ldr	r3, [r3, #0]
 8012904:	6919      	ldr	r1, [r3, #16]
 8012906:	687b      	ldr	r3, [r7, #4]
 8012908:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 801290a:	68fb      	ldr	r3, [r7, #12]
 801290c:	431a      	orrs	r2, r3
 801290e:	687b      	ldr	r3, [r7, #4]
 8012910:	681b      	ldr	r3, [r3, #0]
 8012912:	430a      	orrs	r2, r1
 8012914:	611a      	str	r2, [r3, #16]

  /* Set Total Width */
  hltdc->Instance->TWCR &= ~(LTDC_TWCR_TOTALH | LTDC_TWCR_TOTALW);
 8012916:	687b      	ldr	r3, [r7, #4]
 8012918:	681b      	ldr	r3, [r3, #0]
 801291a:	6959      	ldr	r1, [r3, #20]
 801291c:	687b      	ldr	r3, [r7, #4]
 801291e:	681a      	ldr	r2, [r3, #0]
 8012920:	4b27      	ldr	r3, [pc, #156]	@ (80129c0 <HAL_LTDC_Init+0x19c>)
 8012922:	400b      	ands	r3, r1
 8012924:	6153      	str	r3, [r2, #20]
  tmp = (hltdc->Init.TotalWidth << 16U);
 8012926:	687b      	ldr	r3, [r7, #4]
 8012928:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801292a:	041b      	lsls	r3, r3, #16
 801292c:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->TWCR |= (tmp | hltdc->Init.TotalHeigh);
 801292e:	687b      	ldr	r3, [r7, #4]
 8012930:	681b      	ldr	r3, [r3, #0]
 8012932:	6959      	ldr	r1, [r3, #20]
 8012934:	687b      	ldr	r3, [r7, #4]
 8012936:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8012938:	68fb      	ldr	r3, [r7, #12]
 801293a:	431a      	orrs	r2, r3
 801293c:	687b      	ldr	r3, [r7, #4]
 801293e:	681b      	ldr	r3, [r3, #0]
 8012940:	430a      	orrs	r2, r1
 8012942:	615a      	str	r2, [r3, #20]

  /* Set the background color value */
  tmp = ((uint32_t)(hltdc->Init.Backcolor.Green) << 8U);
 8012944:	687b      	ldr	r3, [r7, #4]
 8012946:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 801294a:	021b      	lsls	r3, r3, #8
 801294c:	60fb      	str	r3, [r7, #12]
  tmp1 = ((uint32_t)(hltdc->Init.Backcolor.Red) << 16U);
 801294e:	687b      	ldr	r3, [r7, #4]
 8012950:	f893 3036 	ldrb.w	r3, [r3, #54]	@ 0x36
 8012954:	041b      	lsls	r3, r3, #16
 8012956:	60bb      	str	r3, [r7, #8]
  hltdc->Instance->BCCR &= ~(LTDC_BCCR_BCBLUE | LTDC_BCCR_BCGREEN | LTDC_BCCR_BCRED);
 8012958:	687b      	ldr	r3, [r7, #4]
 801295a:	681b      	ldr	r3, [r3, #0]
 801295c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 801295e:	687b      	ldr	r3, [r7, #4]
 8012960:	681b      	ldr	r3, [r3, #0]
 8012962:	f002 427f 	and.w	r2, r2, #4278190080	@ 0xff000000
 8012966:	62da      	str	r2, [r3, #44]	@ 0x2c
  hltdc->Instance->BCCR |= (tmp1 | tmp | hltdc->Init.Backcolor.Blue);
 8012968:	687b      	ldr	r3, [r7, #4]
 801296a:	681b      	ldr	r3, [r3, #0]
 801296c:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 801296e:	68ba      	ldr	r2, [r7, #8]
 8012970:	68fb      	ldr	r3, [r7, #12]
 8012972:	4313      	orrs	r3, r2
 8012974:	687a      	ldr	r2, [r7, #4]
 8012976:	f892 2034 	ldrb.w	r2, [r2, #52]	@ 0x34
 801297a:	431a      	orrs	r2, r3
 801297c:	687b      	ldr	r3, [r7, #4]
 801297e:	681b      	ldr	r3, [r3, #0]
 8012980:	430a      	orrs	r2, r1
 8012982:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Enable the Transfer Error and FIFO underrun interrupts */
  __HAL_LTDC_ENABLE_IT(hltdc, LTDC_IT_TE | LTDC_IT_FU);
 8012984:	687b      	ldr	r3, [r7, #4]
 8012986:	681b      	ldr	r3, [r3, #0]
 8012988:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 801298a:	687b      	ldr	r3, [r7, #4]
 801298c:	681b      	ldr	r3, [r3, #0]
 801298e:	f042 0206 	orr.w	r2, r2, #6
 8012992:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Enable LTDC by setting LTDCEN bit */
  __HAL_LTDC_ENABLE(hltdc);
 8012994:	687b      	ldr	r3, [r7, #4]
 8012996:	681b      	ldr	r3, [r3, #0]
 8012998:	699a      	ldr	r2, [r3, #24]
 801299a:	687b      	ldr	r3, [r7, #4]
 801299c:	681b      	ldr	r3, [r3, #0]
 801299e:	f042 0201 	orr.w	r2, r2, #1
 80129a2:	619a      	str	r2, [r3, #24]

  /* Initialize the error code */
  hltdc->ErrorCode = HAL_LTDC_ERROR_NONE;
 80129a4:	687b      	ldr	r3, [r7, #4]
 80129a6:	2200      	movs	r2, #0
 80129a8:	f8c3 20a4 	str.w	r2, [r3, #164]	@ 0xa4

  /* Initialize the LTDC state*/
  hltdc->State = HAL_LTDC_STATE_READY;
 80129ac:	687b      	ldr	r3, [r7, #4]
 80129ae:	2201      	movs	r2, #1
 80129b0:	f883 20a1 	strb.w	r2, [r3, #161]	@ 0xa1

  return HAL_OK;
 80129b4:	2300      	movs	r3, #0
}
 80129b6:	4618      	mov	r0, r3
 80129b8:	3710      	adds	r7, #16
 80129ba:	46bd      	mov	sp, r7
 80129bc:	bd80      	pop	{r7, pc}
 80129be:	bf00      	nop
 80129c0:	f000f800 	.word	0xf000f800

080129c4 <HAL_LTDC_IRQHandler>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval HAL status
  */
void HAL_LTDC_IRQHandler(LTDC_HandleTypeDef *hltdc)
{
 80129c4:	b580      	push	{r7, lr}
 80129c6:	b084      	sub	sp, #16
 80129c8:	af00      	add	r7, sp, #0
 80129ca:	6078      	str	r0, [r7, #4]
  uint32_t isrflags  = READ_REG(hltdc->Instance->ISR);
 80129cc:	687b      	ldr	r3, [r7, #4]
 80129ce:	681b      	ldr	r3, [r3, #0]
 80129d0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80129d2:	60fb      	str	r3, [r7, #12]
  uint32_t itsources = READ_REG(hltdc->Instance->IER);
 80129d4:	687b      	ldr	r3, [r7, #4]
 80129d6:	681b      	ldr	r3, [r3, #0]
 80129d8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80129da:	60bb      	str	r3, [r7, #8]

  /* Transfer Error Interrupt management ***************************************/
  if (((isrflags & LTDC_ISR_TERRIF) != 0U) && ((itsources & LTDC_IER_TERRIE) != 0U))
 80129dc:	68fb      	ldr	r3, [r7, #12]
 80129de:	f003 0304 	and.w	r3, r3, #4
 80129e2:	2b00      	cmp	r3, #0
 80129e4:	d023      	beq.n	8012a2e <HAL_LTDC_IRQHandler+0x6a>
 80129e6:	68bb      	ldr	r3, [r7, #8]
 80129e8:	f003 0304 	and.w	r3, r3, #4
 80129ec:	2b00      	cmp	r3, #0
 80129ee:	d01e      	beq.n	8012a2e <HAL_LTDC_IRQHandler+0x6a>
  {
    /* Disable the transfer Error interrupt */
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_TE);
 80129f0:	687b      	ldr	r3, [r7, #4]
 80129f2:	681b      	ldr	r3, [r3, #0]
 80129f4:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80129f6:	687b      	ldr	r3, [r7, #4]
 80129f8:	681b      	ldr	r3, [r3, #0]
 80129fa:	f022 0204 	bic.w	r2, r2, #4
 80129fe:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Clear the transfer error flag */
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_TE);
 8012a00:	687b      	ldr	r3, [r7, #4]
 8012a02:	681b      	ldr	r3, [r3, #0]
 8012a04:	2204      	movs	r2, #4
 8012a06:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Update error code */
    hltdc->ErrorCode |= HAL_LTDC_ERROR_TE;
 8012a08:	687b      	ldr	r3, [r7, #4]
 8012a0a:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8012a0e:	f043 0201 	orr.w	r2, r3, #1
 8012a12:	687b      	ldr	r3, [r7, #4]
 8012a14:	f8c3 20a4 	str.w	r2, [r3, #164]	@ 0xa4

    /* Change LTDC state */
    hltdc->State = HAL_LTDC_STATE_ERROR;
 8012a18:	687b      	ldr	r3, [r7, #4]
 8012a1a:	2204      	movs	r2, #4
 8012a1c:	f883 20a1 	strb.w	r2, [r3, #161]	@ 0xa1

    /* Process unlocked */
    __HAL_UNLOCK(hltdc);
 8012a20:	687b      	ldr	r3, [r7, #4]
 8012a22:	2200      	movs	r2, #0
 8012a24:	f883 20a0 	strb.w	r2, [r3, #160]	@ 0xa0
#if (USE_HAL_LTDC_REGISTER_CALLBACKS == 1)
    /*Call registered error callback*/
    hltdc->ErrorCallback(hltdc);
#else
    /* Call legacy error callback*/
    HAL_LTDC_ErrorCallback(hltdc);
 8012a28:	6878      	ldr	r0, [r7, #4]
 8012a2a:	f000 f86f 	bl	8012b0c <HAL_LTDC_ErrorCallback>
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */
  }

  /* FIFO underrun Interrupt management ***************************************/
  if (((isrflags & LTDC_ISR_FUIF) != 0U) && ((itsources & LTDC_IER_FUIE) != 0U))
 8012a2e:	68fb      	ldr	r3, [r7, #12]
 8012a30:	f003 0302 	and.w	r3, r3, #2
 8012a34:	2b00      	cmp	r3, #0
 8012a36:	d023      	beq.n	8012a80 <HAL_LTDC_IRQHandler+0xbc>
 8012a38:	68bb      	ldr	r3, [r7, #8]
 8012a3a:	f003 0302 	and.w	r3, r3, #2
 8012a3e:	2b00      	cmp	r3, #0
 8012a40:	d01e      	beq.n	8012a80 <HAL_LTDC_IRQHandler+0xbc>
  {
    /* Disable the FIFO underrun interrupt */
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_FU);
 8012a42:	687b      	ldr	r3, [r7, #4]
 8012a44:	681b      	ldr	r3, [r3, #0]
 8012a46:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8012a48:	687b      	ldr	r3, [r7, #4]
 8012a4a:	681b      	ldr	r3, [r3, #0]
 8012a4c:	f022 0202 	bic.w	r2, r2, #2
 8012a50:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Clear the FIFO underrun flag */
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_FU);
 8012a52:	687b      	ldr	r3, [r7, #4]
 8012a54:	681b      	ldr	r3, [r3, #0]
 8012a56:	2202      	movs	r2, #2
 8012a58:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Update error code */
    hltdc->ErrorCode |= HAL_LTDC_ERROR_FU;
 8012a5a:	687b      	ldr	r3, [r7, #4]
 8012a5c:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8012a60:	f043 0202 	orr.w	r2, r3, #2
 8012a64:	687b      	ldr	r3, [r7, #4]
 8012a66:	f8c3 20a4 	str.w	r2, [r3, #164]	@ 0xa4

    /* Change LTDC state */
    hltdc->State = HAL_LTDC_STATE_ERROR;
 8012a6a:	687b      	ldr	r3, [r7, #4]
 8012a6c:	2204      	movs	r2, #4
 8012a6e:	f883 20a1 	strb.w	r2, [r3, #161]	@ 0xa1

    /* Process unlocked */
    __HAL_UNLOCK(hltdc);
 8012a72:	687b      	ldr	r3, [r7, #4]
 8012a74:	2200      	movs	r2, #0
 8012a76:	f883 20a0 	strb.w	r2, [r3, #160]	@ 0xa0
#if (USE_HAL_LTDC_REGISTER_CALLBACKS == 1)
    /*Call registered error callback*/
    hltdc->ErrorCallback(hltdc);
#else
    /* Call legacy error callback*/
    HAL_LTDC_ErrorCallback(hltdc);
 8012a7a:	6878      	ldr	r0, [r7, #4]
 8012a7c:	f000 f846 	bl	8012b0c <HAL_LTDC_ErrorCallback>
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */
  }

  /* Line Interrupt management ************************************************/
  if (((isrflags & LTDC_ISR_LIF) != 0U) && ((itsources & LTDC_IER_LIE) != 0U))
 8012a80:	68fb      	ldr	r3, [r7, #12]
 8012a82:	f003 0301 	and.w	r3, r3, #1
 8012a86:	2b00      	cmp	r3, #0
 8012a88:	d01b      	beq.n	8012ac2 <HAL_LTDC_IRQHandler+0xfe>
 8012a8a:	68bb      	ldr	r3, [r7, #8]
 8012a8c:	f003 0301 	and.w	r3, r3, #1
 8012a90:	2b00      	cmp	r3, #0
 8012a92:	d016      	beq.n	8012ac2 <HAL_LTDC_IRQHandler+0xfe>
  {
    /* Disable the Line interrupt */
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_LI);
 8012a94:	687b      	ldr	r3, [r7, #4]
 8012a96:	681b      	ldr	r3, [r3, #0]
 8012a98:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8012a9a:	687b      	ldr	r3, [r7, #4]
 8012a9c:	681b      	ldr	r3, [r3, #0]
 8012a9e:	f022 0201 	bic.w	r2, r2, #1
 8012aa2:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Clear the Line interrupt flag */
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_LI);
 8012aa4:	687b      	ldr	r3, [r7, #4]
 8012aa6:	681b      	ldr	r3, [r3, #0]
 8012aa8:	2201      	movs	r2, #1
 8012aaa:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Change LTDC state */
    hltdc->State = HAL_LTDC_STATE_READY;
 8012aac:	687b      	ldr	r3, [r7, #4]
 8012aae:	2201      	movs	r2, #1
 8012ab0:	f883 20a1 	strb.w	r2, [r3, #161]	@ 0xa1

    /* Process unlocked */
    __HAL_UNLOCK(hltdc);
 8012ab4:	687b      	ldr	r3, [r7, #4]
 8012ab6:	2200      	movs	r2, #0
 8012ab8:	f883 20a0 	strb.w	r2, [r3, #160]	@ 0xa0
#if (USE_HAL_LTDC_REGISTER_CALLBACKS == 1)
    /*Call registered Line Event callback */
    hltdc->LineEventCallback(hltdc);
#else
    /*Call Legacy Line Event callback */
    HAL_LTDC_LineEventCallback(hltdc);
 8012abc:	6878      	ldr	r0, [r7, #4]
 8012abe:	f7f0 ffdb 	bl	8003a78 <HAL_LTDC_LineEventCallback>
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */
  }

  /* Register reload Interrupt management ***************************************/
  if (((isrflags & LTDC_ISR_RRIF) != 0U) && ((itsources & LTDC_IER_RRIE) != 0U))
 8012ac2:	68fb      	ldr	r3, [r7, #12]
 8012ac4:	f003 0308 	and.w	r3, r3, #8
 8012ac8:	2b00      	cmp	r3, #0
 8012aca:	d01b      	beq.n	8012b04 <HAL_LTDC_IRQHandler+0x140>
 8012acc:	68bb      	ldr	r3, [r7, #8]
 8012ace:	f003 0308 	and.w	r3, r3, #8
 8012ad2:	2b00      	cmp	r3, #0
 8012ad4:	d016      	beq.n	8012b04 <HAL_LTDC_IRQHandler+0x140>
  {
    /* Disable the register reload interrupt */
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_RR);
 8012ad6:	687b      	ldr	r3, [r7, #4]
 8012ad8:	681b      	ldr	r3, [r3, #0]
 8012ada:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8012adc:	687b      	ldr	r3, [r7, #4]
 8012ade:	681b      	ldr	r3, [r3, #0]
 8012ae0:	f022 0208 	bic.w	r2, r2, #8
 8012ae4:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Clear the register reload flag */
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_RR);
 8012ae6:	687b      	ldr	r3, [r7, #4]
 8012ae8:	681b      	ldr	r3, [r3, #0]
 8012aea:	2208      	movs	r2, #8
 8012aec:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Change LTDC state */
    hltdc->State = HAL_LTDC_STATE_READY;
 8012aee:	687b      	ldr	r3, [r7, #4]
 8012af0:	2201      	movs	r2, #1
 8012af2:	f883 20a1 	strb.w	r2, [r3, #161]	@ 0xa1

    /* Process unlocked */
    __HAL_UNLOCK(hltdc);
 8012af6:	687b      	ldr	r3, [r7, #4]
 8012af8:	2200      	movs	r2, #0
 8012afa:	f883 20a0 	strb.w	r2, [r3, #160]	@ 0xa0
#if (USE_HAL_LTDC_REGISTER_CALLBACKS == 1)
    /*Call registered reload Event callback */
    hltdc->ReloadEventCallback(hltdc);
#else
    /*Call Legacy Reload Event callback */
    HAL_LTDC_ReloadEventCallback(hltdc);
 8012afe:	6878      	ldr	r0, [r7, #4]
 8012b00:	f000 f80e 	bl	8012b20 <HAL_LTDC_ReloadEventCallback>
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */
  }
}
 8012b04:	bf00      	nop
 8012b06:	3710      	adds	r7, #16
 8012b08:	46bd      	mov	sp, r7
 8012b0a:	bd80      	pop	{r7, pc}

08012b0c <HAL_LTDC_ErrorCallback>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval None
  */
__weak void HAL_LTDC_ErrorCallback(LTDC_HandleTypeDef *hltdc)
{
 8012b0c:	b480      	push	{r7}
 8012b0e:	b083      	sub	sp, #12
 8012b10:	af00      	add	r7, sp, #0
 8012b12:	6078      	str	r0, [r7, #4]
  UNUSED(hltdc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LTDC_ErrorCallback could be implemented in the user file
   */
}
 8012b14:	bf00      	nop
 8012b16:	370c      	adds	r7, #12
 8012b18:	46bd      	mov	sp, r7
 8012b1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012b1e:	4770      	bx	lr

08012b20 <HAL_LTDC_ReloadEventCallback>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval None
  */
__weak void HAL_LTDC_ReloadEventCallback(LTDC_HandleTypeDef *hltdc)
{
 8012b20:	b480      	push	{r7}
 8012b22:	b083      	sub	sp, #12
 8012b24:	af00      	add	r7, sp, #0
 8012b26:	6078      	str	r0, [r7, #4]
  UNUSED(hltdc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LTDC_ReloadEvenCallback could be implemented in the user file
   */
}
 8012b28:	bf00      	nop
 8012b2a:	370c      	adds	r7, #12
 8012b2c:	46bd      	mov	sp, r7
 8012b2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012b32:	4770      	bx	lr

08012b34 <HAL_LTDC_ConfigLayer>:
  *                    This parameter can be one of the following values:
  *                    LTDC_LAYER_1 (0) or LTDC_LAYER_2 (1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LTDC_ConfigLayer(LTDC_HandleTypeDef *hltdc, LTDC_LayerCfgTypeDef *pLayerCfg, uint32_t LayerIdx)
{
 8012b34:	b5b0      	push	{r4, r5, r7, lr}
 8012b36:	b084      	sub	sp, #16
 8012b38:	af00      	add	r7, sp, #0
 8012b3a:	60f8      	str	r0, [r7, #12]
 8012b3c:	60b9      	str	r1, [r7, #8]
 8012b3e:	607a      	str	r2, [r7, #4]
  assert_param(IS_LTDC_BLENDING_FACTOR2(pLayerCfg->BlendingFactor2));
  assert_param(IS_LTDC_CFBLL(pLayerCfg->ImageWidth));
  assert_param(IS_LTDC_CFBLNBR(pLayerCfg->ImageHeight));

  /* Process locked */
  __HAL_LOCK(hltdc);
 8012b40:	68fb      	ldr	r3, [r7, #12]
 8012b42:	f893 30a0 	ldrb.w	r3, [r3, #160]	@ 0xa0
 8012b46:	2b01      	cmp	r3, #1
 8012b48:	d101      	bne.n	8012b4e <HAL_LTDC_ConfigLayer+0x1a>
 8012b4a:	2302      	movs	r3, #2
 8012b4c:	e02c      	b.n	8012ba8 <HAL_LTDC_ConfigLayer+0x74>
 8012b4e:	68fb      	ldr	r3, [r7, #12]
 8012b50:	2201      	movs	r2, #1
 8012b52:	f883 20a0 	strb.w	r2, [r3, #160]	@ 0xa0

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 8012b56:	68fb      	ldr	r3, [r7, #12]
 8012b58:	2202      	movs	r2, #2
 8012b5a:	f883 20a1 	strb.w	r2, [r3, #161]	@ 0xa1

  /* Copy new layer configuration into handle structure */
  hltdc->LayerCfg[LayerIdx] = *pLayerCfg;
 8012b5e:	68fa      	ldr	r2, [r7, #12]
 8012b60:	687b      	ldr	r3, [r7, #4]
 8012b62:	2134      	movs	r1, #52	@ 0x34
 8012b64:	fb01 f303 	mul.w	r3, r1, r3
 8012b68:	4413      	add	r3, r2
 8012b6a:	f103 0238 	add.w	r2, r3, #56	@ 0x38
 8012b6e:	68bb      	ldr	r3, [r7, #8]
 8012b70:	4614      	mov	r4, r2
 8012b72:	461d      	mov	r5, r3
 8012b74:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8012b76:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8012b78:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8012b7a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8012b7c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8012b7e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8012b80:	682b      	ldr	r3, [r5, #0]
 8012b82:	6023      	str	r3, [r4, #0]

  /* Configure the LTDC Layer */
  LTDC_SetConfig(hltdc, pLayerCfg, LayerIdx);
 8012b84:	687a      	ldr	r2, [r7, #4]
 8012b86:	68b9      	ldr	r1, [r7, #8]
 8012b88:	68f8      	ldr	r0, [r7, #12]
 8012b8a:	f000 f849 	bl	8012c20 <LTDC_SetConfig>

  /* Set the Immediate Reload type */
  hltdc->Instance->SRCR = LTDC_SRCR_IMR;
 8012b8e:	68fb      	ldr	r3, [r7, #12]
 8012b90:	681b      	ldr	r3, [r3, #0]
 8012b92:	2201      	movs	r2, #1
 8012b94:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Initialize the LTDC state*/
  hltdc->State  = HAL_LTDC_STATE_READY;
 8012b96:	68fb      	ldr	r3, [r7, #12]
 8012b98:	2201      	movs	r2, #1
 8012b9a:	f883 20a1 	strb.w	r2, [r3, #161]	@ 0xa1

  /* Process unlocked */
  __HAL_UNLOCK(hltdc);
 8012b9e:	68fb      	ldr	r3, [r7, #12]
 8012ba0:	2200      	movs	r2, #0
 8012ba2:	f883 20a0 	strb.w	r2, [r3, #160]	@ 0xa0

  return HAL_OK;
 8012ba6:	2300      	movs	r3, #0
}
 8012ba8:	4618      	mov	r0, r3
 8012baa:	3710      	adds	r7, #16
 8012bac:	46bd      	mov	sp, r7
 8012bae:	bdb0      	pop	{r4, r5, r7, pc}

08012bb0 <HAL_LTDC_ProgramLineEvent>:
  * @param  Line    Line Interrupt Position.
  * @note   User application may resort to HAL_LTDC_LineEventCallback() at line interrupt generation.
  * @retval  HAL status
  */
HAL_StatusTypeDef HAL_LTDC_ProgramLineEvent(LTDC_HandleTypeDef *hltdc, uint32_t Line)
{
 8012bb0:	b480      	push	{r7}
 8012bb2:	b083      	sub	sp, #12
 8012bb4:	af00      	add	r7, sp, #0
 8012bb6:	6078      	str	r0, [r7, #4]
 8012bb8:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_LTDC_LIPOS(Line));

  /* Process locked */
  __HAL_LOCK(hltdc);
 8012bba:	687b      	ldr	r3, [r7, #4]
 8012bbc:	f893 30a0 	ldrb.w	r3, [r3, #160]	@ 0xa0
 8012bc0:	2b01      	cmp	r3, #1
 8012bc2:	d101      	bne.n	8012bc8 <HAL_LTDC_ProgramLineEvent+0x18>
 8012bc4:	2302      	movs	r3, #2
 8012bc6:	e023      	b.n	8012c10 <HAL_LTDC_ProgramLineEvent+0x60>
 8012bc8:	687b      	ldr	r3, [r7, #4]
 8012bca:	2201      	movs	r2, #1
 8012bcc:	f883 20a0 	strb.w	r2, [r3, #160]	@ 0xa0

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 8012bd0:	687b      	ldr	r3, [r7, #4]
 8012bd2:	2202      	movs	r2, #2
 8012bd4:	f883 20a1 	strb.w	r2, [r3, #161]	@ 0xa1

  /* Disable the Line interrupt */
  __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_LI);
 8012bd8:	687b      	ldr	r3, [r7, #4]
 8012bda:	681b      	ldr	r3, [r3, #0]
 8012bdc:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8012bde:	687b      	ldr	r3, [r7, #4]
 8012be0:	681b      	ldr	r3, [r3, #0]
 8012be2:	f022 0201 	bic.w	r2, r2, #1
 8012be6:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Set the Line Interrupt position */
  LTDC->LIPCR = (uint32_t)Line;
 8012be8:	4a0c      	ldr	r2, [pc, #48]	@ (8012c1c <HAL_LTDC_ProgramLineEvent+0x6c>)
 8012bea:	683b      	ldr	r3, [r7, #0]
 8012bec:	6413      	str	r3, [r2, #64]	@ 0x40

  /* Enable the Line interrupt */
  __HAL_LTDC_ENABLE_IT(hltdc, LTDC_IT_LI);
 8012bee:	687b      	ldr	r3, [r7, #4]
 8012bf0:	681b      	ldr	r3, [r3, #0]
 8012bf2:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8012bf4:	687b      	ldr	r3, [r7, #4]
 8012bf6:	681b      	ldr	r3, [r3, #0]
 8012bf8:	f042 0201 	orr.w	r2, r2, #1
 8012bfc:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Change the LTDC state*/
  hltdc->State = HAL_LTDC_STATE_READY;
 8012bfe:	687b      	ldr	r3, [r7, #4]
 8012c00:	2201      	movs	r2, #1
 8012c02:	f883 20a1 	strb.w	r2, [r3, #161]	@ 0xa1

  /* Process unlocked */
  __HAL_UNLOCK(hltdc);
 8012c06:	687b      	ldr	r3, [r7, #4]
 8012c08:	2200      	movs	r2, #0
 8012c0a:	f883 20a0 	strb.w	r2, [r3, #160]	@ 0xa0

  return HAL_OK;
 8012c0e:	2300      	movs	r3, #0
}
 8012c10:	4618      	mov	r0, r3
 8012c12:	370c      	adds	r7, #12
 8012c14:	46bd      	mov	sp, r7
 8012c16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012c1a:	4770      	bx	lr
 8012c1c:	50001000 	.word	0x50001000

08012c20 <LTDC_SetConfig>:
  * @param  LayerIdx  LTDC Layer index.
  *                   This parameter can be one of the following values: LTDC_LAYER_1 (0) or LTDC_LAYER_2 (1)
  * @retval None
  */
static void LTDC_SetConfig(LTDC_HandleTypeDef *hltdc, LTDC_LayerCfgTypeDef *pLayerCfg, uint32_t LayerIdx)
{
 8012c20:	b480      	push	{r7}
 8012c22:	b089      	sub	sp, #36	@ 0x24
 8012c24:	af00      	add	r7, sp, #0
 8012c26:	60f8      	str	r0, [r7, #12]
 8012c28:	60b9      	str	r1, [r7, #8]
 8012c2a:	607a      	str	r2, [r7, #4]
  uint32_t tmp;
  uint32_t tmp1;
  uint32_t tmp2;

  /* Configure the horizontal start and stop position */
  tmp = ((pLayerCfg->WindowX1 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U)) << 16U);
 8012c2c:	68bb      	ldr	r3, [r7, #8]
 8012c2e:	685a      	ldr	r2, [r3, #4]
 8012c30:	68fb      	ldr	r3, [r7, #12]
 8012c32:	681b      	ldr	r3, [r3, #0]
 8012c34:	68db      	ldr	r3, [r3, #12]
 8012c36:	0c1b      	lsrs	r3, r3, #16
 8012c38:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8012c3c:	4413      	add	r3, r2
 8012c3e:	041b      	lsls	r3, r3, #16
 8012c40:	61fb      	str	r3, [r7, #28]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR &= ~(LTDC_LxWHPCR_WHSTPOS | LTDC_LxWHPCR_WHSPPOS);
 8012c42:	68fb      	ldr	r3, [r7, #12]
 8012c44:	681b      	ldr	r3, [r3, #0]
 8012c46:	461a      	mov	r2, r3
 8012c48:	687b      	ldr	r3, [r7, #4]
 8012c4a:	01db      	lsls	r3, r3, #7
 8012c4c:	4413      	add	r3, r2
 8012c4e:	3384      	adds	r3, #132	@ 0x84
 8012c50:	685b      	ldr	r3, [r3, #4]
 8012c52:	68fa      	ldr	r2, [r7, #12]
 8012c54:	6812      	ldr	r2, [r2, #0]
 8012c56:	4611      	mov	r1, r2
 8012c58:	687a      	ldr	r2, [r7, #4]
 8012c5a:	01d2      	lsls	r2, r2, #7
 8012c5c:	440a      	add	r2, r1
 8012c5e:	3284      	adds	r2, #132	@ 0x84
 8012c60:	f403 4370 	and.w	r3, r3, #61440	@ 0xf000
 8012c64:	6053      	str	r3, [r2, #4]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 8012c66:	68bb      	ldr	r3, [r7, #8]
 8012c68:	681a      	ldr	r2, [r3, #0]
                                         ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 8012c6a:	68fb      	ldr	r3, [r7, #12]
 8012c6c:	681b      	ldr	r3, [r3, #0]
 8012c6e:	68db      	ldr	r3, [r3, #12]
 8012c70:	0c1b      	lsrs	r3, r3, #16
 8012c72:	f3c3 030b 	ubfx	r3, r3, #0, #12
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 8012c76:	4413      	add	r3, r2
                                         ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 8012c78:	1c5a      	adds	r2, r3, #1
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 8012c7a:	68fb      	ldr	r3, [r7, #12]
 8012c7c:	681b      	ldr	r3, [r3, #0]
 8012c7e:	4619      	mov	r1, r3
 8012c80:	687b      	ldr	r3, [r7, #4]
 8012c82:	01db      	lsls	r3, r3, #7
 8012c84:	440b      	add	r3, r1
 8012c86:	3384      	adds	r3, #132	@ 0x84
 8012c88:	4619      	mov	r1, r3
                                         ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 8012c8a:	69fb      	ldr	r3, [r7, #28]
 8012c8c:	4313      	orrs	r3, r2
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 8012c8e:	604b      	str	r3, [r1, #4]

  /* Configure the vertical start and stop position */
  tmp = ((pLayerCfg->WindowY1 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP)) << 16U);
 8012c90:	68bb      	ldr	r3, [r7, #8]
 8012c92:	68da      	ldr	r2, [r3, #12]
 8012c94:	68fb      	ldr	r3, [r7, #12]
 8012c96:	681b      	ldr	r3, [r3, #0]
 8012c98:	68db      	ldr	r3, [r3, #12]
 8012c9a:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8012c9e:	4413      	add	r3, r2
 8012ca0:	041b      	lsls	r3, r3, #16
 8012ca2:	61fb      	str	r3, [r7, #28]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR &= ~(LTDC_LxWVPCR_WVSTPOS | LTDC_LxWVPCR_WVSPPOS);
 8012ca4:	68fb      	ldr	r3, [r7, #12]
 8012ca6:	681b      	ldr	r3, [r3, #0]
 8012ca8:	461a      	mov	r2, r3
 8012caa:	687b      	ldr	r3, [r7, #4]
 8012cac:	01db      	lsls	r3, r3, #7
 8012cae:	4413      	add	r3, r2
 8012cb0:	3384      	adds	r3, #132	@ 0x84
 8012cb2:	689b      	ldr	r3, [r3, #8]
 8012cb4:	68fa      	ldr	r2, [r7, #12]
 8012cb6:	6812      	ldr	r2, [r2, #0]
 8012cb8:	4611      	mov	r1, r2
 8012cba:	687a      	ldr	r2, [r7, #4]
 8012cbc:	01d2      	lsls	r2, r2, #7
 8012cbe:	440a      	add	r2, r1
 8012cc0:	3284      	adds	r2, #132	@ 0x84
 8012cc2:	f403 4370 	and.w	r3, r3, #61440	@ 0xf000
 8012cc6:	6093      	str	r3, [r2, #8]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR  = ((pLayerCfg->WindowY0 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP) + 1U) | tmp);
 8012cc8:	68bb      	ldr	r3, [r7, #8]
 8012cca:	689a      	ldr	r2, [r3, #8]
 8012ccc:	68fb      	ldr	r3, [r7, #12]
 8012cce:	681b      	ldr	r3, [r3, #0]
 8012cd0:	68db      	ldr	r3, [r3, #12]
 8012cd2:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8012cd6:	4413      	add	r3, r2
 8012cd8:	1c5a      	adds	r2, r3, #1
 8012cda:	68fb      	ldr	r3, [r7, #12]
 8012cdc:	681b      	ldr	r3, [r3, #0]
 8012cde:	4619      	mov	r1, r3
 8012ce0:	687b      	ldr	r3, [r7, #4]
 8012ce2:	01db      	lsls	r3, r3, #7
 8012ce4:	440b      	add	r3, r1
 8012ce6:	3384      	adds	r3, #132	@ 0x84
 8012ce8:	4619      	mov	r1, r3
 8012cea:	69fb      	ldr	r3, [r7, #28]
 8012cec:	4313      	orrs	r3, r2
 8012cee:	608b      	str	r3, [r1, #8]

  /* Specifies the pixel format */
  LTDC_LAYER(hltdc, LayerIdx)->PFCR &= ~(LTDC_LxPFCR_PF);
 8012cf0:	68fb      	ldr	r3, [r7, #12]
 8012cf2:	681b      	ldr	r3, [r3, #0]
 8012cf4:	461a      	mov	r2, r3
 8012cf6:	687b      	ldr	r3, [r7, #4]
 8012cf8:	01db      	lsls	r3, r3, #7
 8012cfa:	4413      	add	r3, r2
 8012cfc:	3384      	adds	r3, #132	@ 0x84
 8012cfe:	691b      	ldr	r3, [r3, #16]
 8012d00:	68fa      	ldr	r2, [r7, #12]
 8012d02:	6812      	ldr	r2, [r2, #0]
 8012d04:	4611      	mov	r1, r2
 8012d06:	687a      	ldr	r2, [r7, #4]
 8012d08:	01d2      	lsls	r2, r2, #7
 8012d0a:	440a      	add	r2, r1
 8012d0c:	3284      	adds	r2, #132	@ 0x84
 8012d0e:	f023 0307 	bic.w	r3, r3, #7
 8012d12:	6113      	str	r3, [r2, #16]
  LTDC_LAYER(hltdc, LayerIdx)->PFCR = (pLayerCfg->PixelFormat);
 8012d14:	68fb      	ldr	r3, [r7, #12]
 8012d16:	681b      	ldr	r3, [r3, #0]
 8012d18:	461a      	mov	r2, r3
 8012d1a:	687b      	ldr	r3, [r7, #4]
 8012d1c:	01db      	lsls	r3, r3, #7
 8012d1e:	4413      	add	r3, r2
 8012d20:	3384      	adds	r3, #132	@ 0x84
 8012d22:	461a      	mov	r2, r3
 8012d24:	68bb      	ldr	r3, [r7, #8]
 8012d26:	691b      	ldr	r3, [r3, #16]
 8012d28:	6113      	str	r3, [r2, #16]

  /* Configure the default color values */
  tmp = ((uint32_t)(pLayerCfg->Backcolor.Green) << 8U);
 8012d2a:	68bb      	ldr	r3, [r7, #8]
 8012d2c:	f893 3031 	ldrb.w	r3, [r3, #49]	@ 0x31
 8012d30:	021b      	lsls	r3, r3, #8
 8012d32:	61fb      	str	r3, [r7, #28]
  tmp1 = ((uint32_t)(pLayerCfg->Backcolor.Red) << 16U);
 8012d34:	68bb      	ldr	r3, [r7, #8]
 8012d36:	f893 3032 	ldrb.w	r3, [r3, #50]	@ 0x32
 8012d3a:	041b      	lsls	r3, r3, #16
 8012d3c:	61bb      	str	r3, [r7, #24]
  tmp2 = (pLayerCfg->Alpha0 << 24U);
 8012d3e:	68bb      	ldr	r3, [r7, #8]
 8012d40:	699b      	ldr	r3, [r3, #24]
 8012d42:	061b      	lsls	r3, r3, #24
 8012d44:	617b      	str	r3, [r7, #20]
  LTDC_LAYER(hltdc, LayerIdx)->DCCR &= ~(LTDC_LxDCCR_DCBLUE | LTDC_LxDCCR_DCGREEN | LTDC_LxDCCR_DCRED |
 8012d46:	68fb      	ldr	r3, [r7, #12]
 8012d48:	681b      	ldr	r3, [r3, #0]
 8012d4a:	461a      	mov	r2, r3
 8012d4c:	687b      	ldr	r3, [r7, #4]
 8012d4e:	01db      	lsls	r3, r3, #7
 8012d50:	4413      	add	r3, r2
 8012d52:	3384      	adds	r3, #132	@ 0x84
 8012d54:	699b      	ldr	r3, [r3, #24]
 8012d56:	68fb      	ldr	r3, [r7, #12]
 8012d58:	681b      	ldr	r3, [r3, #0]
 8012d5a:	461a      	mov	r2, r3
 8012d5c:	687b      	ldr	r3, [r7, #4]
 8012d5e:	01db      	lsls	r3, r3, #7
 8012d60:	4413      	add	r3, r2
 8012d62:	3384      	adds	r3, #132	@ 0x84
 8012d64:	461a      	mov	r2, r3
 8012d66:	2300      	movs	r3, #0
 8012d68:	6193      	str	r3, [r2, #24]
                                         LTDC_LxDCCR_DCALPHA);
  LTDC_LAYER(hltdc, LayerIdx)->DCCR = (pLayerCfg->Backcolor.Blue | tmp | tmp1 | tmp2);
 8012d6a:	68bb      	ldr	r3, [r7, #8]
 8012d6c:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8012d70:	461a      	mov	r2, r3
 8012d72:	69fb      	ldr	r3, [r7, #28]
 8012d74:	431a      	orrs	r2, r3
 8012d76:	69bb      	ldr	r3, [r7, #24]
 8012d78:	431a      	orrs	r2, r3
 8012d7a:	68fb      	ldr	r3, [r7, #12]
 8012d7c:	681b      	ldr	r3, [r3, #0]
 8012d7e:	4619      	mov	r1, r3
 8012d80:	687b      	ldr	r3, [r7, #4]
 8012d82:	01db      	lsls	r3, r3, #7
 8012d84:	440b      	add	r3, r1
 8012d86:	3384      	adds	r3, #132	@ 0x84
 8012d88:	4619      	mov	r1, r3
 8012d8a:	697b      	ldr	r3, [r7, #20]
 8012d8c:	4313      	orrs	r3, r2
 8012d8e:	618b      	str	r3, [r1, #24]

  /* Specifies the constant alpha value */
  LTDC_LAYER(hltdc, LayerIdx)->CACR &= ~(LTDC_LxCACR_CONSTA);
 8012d90:	68fb      	ldr	r3, [r7, #12]
 8012d92:	681b      	ldr	r3, [r3, #0]
 8012d94:	461a      	mov	r2, r3
 8012d96:	687b      	ldr	r3, [r7, #4]
 8012d98:	01db      	lsls	r3, r3, #7
 8012d9a:	4413      	add	r3, r2
 8012d9c:	3384      	adds	r3, #132	@ 0x84
 8012d9e:	695b      	ldr	r3, [r3, #20]
 8012da0:	68fa      	ldr	r2, [r7, #12]
 8012da2:	6812      	ldr	r2, [r2, #0]
 8012da4:	4611      	mov	r1, r2
 8012da6:	687a      	ldr	r2, [r7, #4]
 8012da8:	01d2      	lsls	r2, r2, #7
 8012daa:	440a      	add	r2, r1
 8012dac:	3284      	adds	r2, #132	@ 0x84
 8012dae:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 8012db2:	6153      	str	r3, [r2, #20]
  LTDC_LAYER(hltdc, LayerIdx)->CACR = (pLayerCfg->Alpha);
 8012db4:	68fb      	ldr	r3, [r7, #12]
 8012db6:	681b      	ldr	r3, [r3, #0]
 8012db8:	461a      	mov	r2, r3
 8012dba:	687b      	ldr	r3, [r7, #4]
 8012dbc:	01db      	lsls	r3, r3, #7
 8012dbe:	4413      	add	r3, r2
 8012dc0:	3384      	adds	r3, #132	@ 0x84
 8012dc2:	461a      	mov	r2, r3
 8012dc4:	68bb      	ldr	r3, [r7, #8]
 8012dc6:	695b      	ldr	r3, [r3, #20]
 8012dc8:	6153      	str	r3, [r2, #20]

  /* Specifies the blending factors */
  LTDC_LAYER(hltdc, LayerIdx)->BFCR &= ~(LTDC_LxBFCR_BF2 | LTDC_LxBFCR_BF1);
 8012dca:	68fb      	ldr	r3, [r7, #12]
 8012dcc:	681b      	ldr	r3, [r3, #0]
 8012dce:	461a      	mov	r2, r3
 8012dd0:	687b      	ldr	r3, [r7, #4]
 8012dd2:	01db      	lsls	r3, r3, #7
 8012dd4:	4413      	add	r3, r2
 8012dd6:	3384      	adds	r3, #132	@ 0x84
 8012dd8:	69da      	ldr	r2, [r3, #28]
 8012dda:	68fb      	ldr	r3, [r7, #12]
 8012ddc:	681b      	ldr	r3, [r3, #0]
 8012dde:	4619      	mov	r1, r3
 8012de0:	687b      	ldr	r3, [r7, #4]
 8012de2:	01db      	lsls	r3, r3, #7
 8012de4:	440b      	add	r3, r1
 8012de6:	3384      	adds	r3, #132	@ 0x84
 8012de8:	4619      	mov	r1, r3
 8012dea:	4b58      	ldr	r3, [pc, #352]	@ (8012f4c <LTDC_SetConfig+0x32c>)
 8012dec:	4013      	ands	r3, r2
 8012dee:	61cb      	str	r3, [r1, #28]
  LTDC_LAYER(hltdc, LayerIdx)->BFCR = (pLayerCfg->BlendingFactor1 | pLayerCfg->BlendingFactor2);
 8012df0:	68bb      	ldr	r3, [r7, #8]
 8012df2:	69da      	ldr	r2, [r3, #28]
 8012df4:	68bb      	ldr	r3, [r7, #8]
 8012df6:	6a1b      	ldr	r3, [r3, #32]
 8012df8:	68f9      	ldr	r1, [r7, #12]
 8012dfa:	6809      	ldr	r1, [r1, #0]
 8012dfc:	4608      	mov	r0, r1
 8012dfe:	6879      	ldr	r1, [r7, #4]
 8012e00:	01c9      	lsls	r1, r1, #7
 8012e02:	4401      	add	r1, r0
 8012e04:	3184      	adds	r1, #132	@ 0x84
 8012e06:	4313      	orrs	r3, r2
 8012e08:	61cb      	str	r3, [r1, #28]

  /* Configure the color frame buffer start address */
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR &= ~(LTDC_LxCFBAR_CFBADD);
 8012e0a:	68fb      	ldr	r3, [r7, #12]
 8012e0c:	681b      	ldr	r3, [r3, #0]
 8012e0e:	461a      	mov	r2, r3
 8012e10:	687b      	ldr	r3, [r7, #4]
 8012e12:	01db      	lsls	r3, r3, #7
 8012e14:	4413      	add	r3, r2
 8012e16:	3384      	adds	r3, #132	@ 0x84
 8012e18:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8012e1a:	68fb      	ldr	r3, [r7, #12]
 8012e1c:	681b      	ldr	r3, [r3, #0]
 8012e1e:	461a      	mov	r2, r3
 8012e20:	687b      	ldr	r3, [r7, #4]
 8012e22:	01db      	lsls	r3, r3, #7
 8012e24:	4413      	add	r3, r2
 8012e26:	3384      	adds	r3, #132	@ 0x84
 8012e28:	461a      	mov	r2, r3
 8012e2a:	2300      	movs	r3, #0
 8012e2c:	6293      	str	r3, [r2, #40]	@ 0x28
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR = (pLayerCfg->FBStartAdress);
 8012e2e:	68fb      	ldr	r3, [r7, #12]
 8012e30:	681b      	ldr	r3, [r3, #0]
 8012e32:	461a      	mov	r2, r3
 8012e34:	687b      	ldr	r3, [r7, #4]
 8012e36:	01db      	lsls	r3, r3, #7
 8012e38:	4413      	add	r3, r2
 8012e3a:	3384      	adds	r3, #132	@ 0x84
 8012e3c:	461a      	mov	r2, r3
 8012e3e:	68bb      	ldr	r3, [r7, #8]
 8012e40:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8012e42:	6293      	str	r3, [r2, #40]	@ 0x28

  if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB8888)
 8012e44:	68bb      	ldr	r3, [r7, #8]
 8012e46:	691b      	ldr	r3, [r3, #16]
 8012e48:	2b00      	cmp	r3, #0
 8012e4a:	d102      	bne.n	8012e52 <LTDC_SetConfig+0x232>
  {
    tmp = 4U;
 8012e4c:	2304      	movs	r3, #4
 8012e4e:	61fb      	str	r3, [r7, #28]
 8012e50:	e01b      	b.n	8012e8a <LTDC_SetConfig+0x26a>
  }
  else if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB888)
 8012e52:	68bb      	ldr	r3, [r7, #8]
 8012e54:	691b      	ldr	r3, [r3, #16]
 8012e56:	2b01      	cmp	r3, #1
 8012e58:	d102      	bne.n	8012e60 <LTDC_SetConfig+0x240>
  {
    tmp = 3U;
 8012e5a:	2303      	movs	r3, #3
 8012e5c:	61fb      	str	r3, [r7, #28]
 8012e5e:	e014      	b.n	8012e8a <LTDC_SetConfig+0x26a>
  }
  else if ((pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB4444) || \
 8012e60:	68bb      	ldr	r3, [r7, #8]
 8012e62:	691b      	ldr	r3, [r3, #16]
 8012e64:	2b04      	cmp	r3, #4
 8012e66:	d00b      	beq.n	8012e80 <LTDC_SetConfig+0x260>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB565)   || \
 8012e68:	68bb      	ldr	r3, [r7, #8]
 8012e6a:	691b      	ldr	r3, [r3, #16]
  else if ((pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB4444) || \
 8012e6c:	2b02      	cmp	r3, #2
 8012e6e:	d007      	beq.n	8012e80 <LTDC_SetConfig+0x260>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB1555) || \
 8012e70:	68bb      	ldr	r3, [r7, #8]
 8012e72:	691b      	ldr	r3, [r3, #16]
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB565)   || \
 8012e74:	2b03      	cmp	r3, #3
 8012e76:	d003      	beq.n	8012e80 <LTDC_SetConfig+0x260>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_AL88))
 8012e78:	68bb      	ldr	r3, [r7, #8]
 8012e7a:	691b      	ldr	r3, [r3, #16]
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB1555) || \
 8012e7c:	2b07      	cmp	r3, #7
 8012e7e:	d102      	bne.n	8012e86 <LTDC_SetConfig+0x266>
  {
    tmp = 2U;
 8012e80:	2302      	movs	r3, #2
 8012e82:	61fb      	str	r3, [r7, #28]
 8012e84:	e001      	b.n	8012e8a <LTDC_SetConfig+0x26a>
  }
  else
  {
    tmp = 1U;
 8012e86:	2301      	movs	r3, #1
 8012e88:	61fb      	str	r3, [r7, #28]
  }

  /* Configure the color frame buffer pitch in byte */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  &= ~(LTDC_LxCFBLR_CFBLL | LTDC_LxCFBLR_CFBP);
 8012e8a:	68fb      	ldr	r3, [r7, #12]
 8012e8c:	681b      	ldr	r3, [r3, #0]
 8012e8e:	461a      	mov	r2, r3
 8012e90:	687b      	ldr	r3, [r7, #4]
 8012e92:	01db      	lsls	r3, r3, #7
 8012e94:	4413      	add	r3, r2
 8012e96:	3384      	adds	r3, #132	@ 0x84
 8012e98:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8012e9a:	68fa      	ldr	r2, [r7, #12]
 8012e9c:	6812      	ldr	r2, [r2, #0]
 8012e9e:	4611      	mov	r1, r2
 8012ea0:	687a      	ldr	r2, [r7, #4]
 8012ea2:	01d2      	lsls	r2, r2, #7
 8012ea4:	440a      	add	r2, r1
 8012ea6:	3284      	adds	r2, #132	@ 0x84
 8012ea8:	f003 23e0 	and.w	r3, r3, #3758153728	@ 0xe000e000
 8012eac:	62d3      	str	r3, [r2, #44]	@ 0x2c
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  = (((pLayerCfg->ImageWidth * tmp) << 16U) | (((pLayerCfg->WindowX1 - pLayerCfg->WindowX0) * tmp)  + 7U));
 8012eae:	68bb      	ldr	r3, [r7, #8]
 8012eb0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8012eb2:	69fa      	ldr	r2, [r7, #28]
 8012eb4:	fb02 f303 	mul.w	r3, r2, r3
 8012eb8:	041a      	lsls	r2, r3, #16
 8012eba:	68bb      	ldr	r3, [r7, #8]
 8012ebc:	6859      	ldr	r1, [r3, #4]
 8012ebe:	68bb      	ldr	r3, [r7, #8]
 8012ec0:	681b      	ldr	r3, [r3, #0]
 8012ec2:	1acb      	subs	r3, r1, r3
 8012ec4:	69f9      	ldr	r1, [r7, #28]
 8012ec6:	fb01 f303 	mul.w	r3, r1, r3
 8012eca:	3307      	adds	r3, #7
 8012ecc:	68f9      	ldr	r1, [r7, #12]
 8012ece:	6809      	ldr	r1, [r1, #0]
 8012ed0:	4608      	mov	r0, r1
 8012ed2:	6879      	ldr	r1, [r7, #4]
 8012ed4:	01c9      	lsls	r1, r1, #7
 8012ed6:	4401      	add	r1, r0
 8012ed8:	3184      	adds	r1, #132	@ 0x84
 8012eda:	4313      	orrs	r3, r2
 8012edc:	62cb      	str	r3, [r1, #44]	@ 0x2c
  /* Configure the frame buffer line number */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  &= ~(LTDC_LxCFBLNR_CFBLNBR);
 8012ede:	68fb      	ldr	r3, [r7, #12]
 8012ee0:	681b      	ldr	r3, [r3, #0]
 8012ee2:	461a      	mov	r2, r3
 8012ee4:	687b      	ldr	r3, [r7, #4]
 8012ee6:	01db      	lsls	r3, r3, #7
 8012ee8:	4413      	add	r3, r2
 8012eea:	3384      	adds	r3, #132	@ 0x84
 8012eec:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8012eee:	68fb      	ldr	r3, [r7, #12]
 8012ef0:	681b      	ldr	r3, [r3, #0]
 8012ef2:	4619      	mov	r1, r3
 8012ef4:	687b      	ldr	r3, [r7, #4]
 8012ef6:	01db      	lsls	r3, r3, #7
 8012ef8:	440b      	add	r3, r1
 8012efa:	3384      	adds	r3, #132	@ 0x84
 8012efc:	4619      	mov	r1, r3
 8012efe:	4b14      	ldr	r3, [pc, #80]	@ (8012f50 <LTDC_SetConfig+0x330>)
 8012f00:	4013      	ands	r3, r2
 8012f02:	630b      	str	r3, [r1, #48]	@ 0x30
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  = (pLayerCfg->ImageHeight);
 8012f04:	68fb      	ldr	r3, [r7, #12]
 8012f06:	681b      	ldr	r3, [r3, #0]
 8012f08:	461a      	mov	r2, r3
 8012f0a:	687b      	ldr	r3, [r7, #4]
 8012f0c:	01db      	lsls	r3, r3, #7
 8012f0e:	4413      	add	r3, r2
 8012f10:	3384      	adds	r3, #132	@ 0x84
 8012f12:	461a      	mov	r2, r3
 8012f14:	68bb      	ldr	r3, [r7, #8]
 8012f16:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8012f18:	6313      	str	r3, [r2, #48]	@ 0x30

  /* Enable LTDC_Layer by setting LEN bit */
  LTDC_LAYER(hltdc, LayerIdx)->CR |= (uint32_t)LTDC_LxCR_LEN;
 8012f1a:	68fb      	ldr	r3, [r7, #12]
 8012f1c:	681b      	ldr	r3, [r3, #0]
 8012f1e:	461a      	mov	r2, r3
 8012f20:	687b      	ldr	r3, [r7, #4]
 8012f22:	01db      	lsls	r3, r3, #7
 8012f24:	4413      	add	r3, r2
 8012f26:	3384      	adds	r3, #132	@ 0x84
 8012f28:	681b      	ldr	r3, [r3, #0]
 8012f2a:	68fa      	ldr	r2, [r7, #12]
 8012f2c:	6812      	ldr	r2, [r2, #0]
 8012f2e:	4611      	mov	r1, r2
 8012f30:	687a      	ldr	r2, [r7, #4]
 8012f32:	01d2      	lsls	r2, r2, #7
 8012f34:	440a      	add	r2, r1
 8012f36:	3284      	adds	r2, #132	@ 0x84
 8012f38:	f043 0301 	orr.w	r3, r3, #1
 8012f3c:	6013      	str	r3, [r2, #0]
}
 8012f3e:	bf00      	nop
 8012f40:	3724      	adds	r7, #36	@ 0x24
 8012f42:	46bd      	mov	sp, r7
 8012f44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012f48:	4770      	bx	lr
 8012f4a:	bf00      	nop
 8012f4c:	fffff8f8 	.word	0xfffff8f8
 8012f50:	fffff800 	.word	0xfffff800

08012f54 <HAL_MDMA_Init>:
  * @param  hmdma: Pointer to a MDMA_HandleTypeDef structure that contains
  *               the configuration information for the specified MDMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_MDMA_Init(MDMA_HandleTypeDef *hmdma)
{
 8012f54:	b580      	push	{r7, lr}
 8012f56:	b084      	sub	sp, #16
 8012f58:	af00      	add	r7, sp, #0
 8012f5a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8012f5c:	f7fd fed0 	bl	8010d00 <HAL_GetTick>
 8012f60:	60f8      	str	r0, [r7, #12]

  /* Check the MDMA peripheral handle */
  if(hmdma == NULL)
 8012f62:	687b      	ldr	r3, [r7, #4]
 8012f64:	2b00      	cmp	r3, #0
 8012f66:	d101      	bne.n	8012f6c <HAL_MDMA_Init+0x18>
  {
    return HAL_ERROR;
 8012f68:	2301      	movs	r3, #1
 8012f6a:	e03b      	b.n	8012fe4 <HAL_MDMA_Init+0x90>
  assert_param(IS_MDMA_BLOCK_ADDR_OFFSET(hmdma->Init.SourceBlockAddressOffset));
  assert_param(IS_MDMA_BLOCK_ADDR_OFFSET(hmdma->Init.DestBlockAddressOffset));


  /* Allocate lock resource */
  __HAL_UNLOCK(hmdma);
 8012f6c:	687b      	ldr	r3, [r7, #4]
 8012f6e:	2200      	movs	r2, #0
 8012f70:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change MDMA peripheral state */
  hmdma->State = HAL_MDMA_STATE_BUSY;
 8012f74:	687b      	ldr	r3, [r7, #4]
 8012f76:	2202      	movs	r2, #2
 8012f78:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the MDMA channel */
  __HAL_MDMA_DISABLE(hmdma);
 8012f7c:	687b      	ldr	r3, [r7, #4]
 8012f7e:	681b      	ldr	r3, [r3, #0]
 8012f80:	68da      	ldr	r2, [r3, #12]
 8012f82:	687b      	ldr	r3, [r7, #4]
 8012f84:	681b      	ldr	r3, [r3, #0]
 8012f86:	f022 0201 	bic.w	r2, r2, #1
 8012f8a:	60da      	str	r2, [r3, #12]

  /* Check if the MDMA channel is effectively disabled */
  while((hmdma->Instance->CCR & MDMA_CCR_EN) != 0U)
 8012f8c:	e00f      	b.n	8012fae <HAL_MDMA_Init+0x5a>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_MDMA_ABORT)
 8012f8e:	f7fd feb7 	bl	8010d00 <HAL_GetTick>
 8012f92:	4602      	mov	r2, r0
 8012f94:	68fb      	ldr	r3, [r7, #12]
 8012f96:	1ad3      	subs	r3, r2, r3
 8012f98:	2b05      	cmp	r3, #5
 8012f9a:	d908      	bls.n	8012fae <HAL_MDMA_Init+0x5a>
    {
      /* Update error code */
      hmdma->ErrorCode = HAL_MDMA_ERROR_TIMEOUT;
 8012f9c:	687b      	ldr	r3, [r7, #4]
 8012f9e:	2240      	movs	r2, #64	@ 0x40
 8012fa0:	669a      	str	r2, [r3, #104]	@ 0x68

      /* Change the MDMA state */
      hmdma->State = HAL_MDMA_STATE_ERROR;
 8012fa2:	687b      	ldr	r3, [r7, #4]
 8012fa4:	2203      	movs	r2, #3
 8012fa6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

      return HAL_ERROR;
 8012faa:	2301      	movs	r3, #1
 8012fac:	e01a      	b.n	8012fe4 <HAL_MDMA_Init+0x90>
  while((hmdma->Instance->CCR & MDMA_CCR_EN) != 0U)
 8012fae:	687b      	ldr	r3, [r7, #4]
 8012fb0:	681b      	ldr	r3, [r3, #0]
 8012fb2:	68db      	ldr	r3, [r3, #12]
 8012fb4:	f003 0301 	and.w	r3, r3, #1
 8012fb8:	2b00      	cmp	r3, #0
 8012fba:	d1e8      	bne.n	8012f8e <HAL_MDMA_Init+0x3a>
    }
  }

  /* Initialize the MDMA channel registers */
  MDMA_Init(hmdma);
 8012fbc:	6878      	ldr	r0, [r7, #4]
 8012fbe:	f000 f894 	bl	80130ea <MDMA_Init>

  /* Reset the MDMA first/last linkedlist node addresses and node counter */
  hmdma->FirstLinkedListNodeAddress  = 0;
 8012fc2:	687b      	ldr	r3, [r7, #4]
 8012fc4:	2200      	movs	r2, #0
 8012fc6:	65da      	str	r2, [r3, #92]	@ 0x5c
  hmdma->LastLinkedListNodeAddress   = 0;
 8012fc8:	687b      	ldr	r3, [r7, #4]
 8012fca:	2200      	movs	r2, #0
 8012fcc:	661a      	str	r2, [r3, #96]	@ 0x60
  hmdma->LinkedListNodeCounter  = 0;
 8012fce:	687b      	ldr	r3, [r7, #4]
 8012fd0:	2200      	movs	r2, #0
 8012fd2:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Initialize the error code */
  hmdma->ErrorCode = HAL_MDMA_ERROR_NONE;
 8012fd4:	687b      	ldr	r3, [r7, #4]
 8012fd6:	2200      	movs	r2, #0
 8012fd8:	669a      	str	r2, [r3, #104]	@ 0x68

  /* Initialize the MDMA state */
  hmdma->State = HAL_MDMA_STATE_READY;
 8012fda:	687b      	ldr	r3, [r7, #4]
 8012fdc:	2201      	movs	r2, #1
 8012fde:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8012fe2:	2300      	movs	r3, #0
}
 8012fe4:	4618      	mov	r0, r3
 8012fe6:	3710      	adds	r7, #16
 8012fe8:	46bd      	mov	sp, r7
 8012fea:	bd80      	pop	{r7, pc}

08012fec <HAL_MDMA_DeInit>:
  * @param  hmdma: pointer to a MDMA_HandleTypeDef structure that contains
  *               the configuration information for the specified MDMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_MDMA_DeInit(MDMA_HandleTypeDef *hmdma)
{
 8012fec:	b480      	push	{r7}
 8012fee:	b083      	sub	sp, #12
 8012ff0:	af00      	add	r7, sp, #0
 8012ff2:	6078      	str	r0, [r7, #4]

  /* Check the MDMA peripheral handle */
  if(hmdma == NULL)
 8012ff4:	687b      	ldr	r3, [r7, #4]
 8012ff6:	2b00      	cmp	r3, #0
 8012ff8:	d101      	bne.n	8012ffe <HAL_MDMA_DeInit+0x12>
  {
    return HAL_ERROR;
 8012ffa:	2301      	movs	r3, #1
 8012ffc:	e048      	b.n	8013090 <HAL_MDMA_DeInit+0xa4>
  }

  /* Disable the selected MDMA Channelx */
  __HAL_MDMA_DISABLE(hmdma);
 8012ffe:	687b      	ldr	r3, [r7, #4]
 8013000:	681b      	ldr	r3, [r3, #0]
 8013002:	68da      	ldr	r2, [r3, #12]
 8013004:	687b      	ldr	r3, [r7, #4]
 8013006:	681b      	ldr	r3, [r3, #0]
 8013008:	f022 0201 	bic.w	r2, r2, #1
 801300c:	60da      	str	r2, [r3, #12]

  /* Reset MDMA Channel control register */
  hmdma->Instance->CCR  = 0;
 801300e:	687b      	ldr	r3, [r7, #4]
 8013010:	681b      	ldr	r3, [r3, #0]
 8013012:	2200      	movs	r2, #0
 8013014:	60da      	str	r2, [r3, #12]
  hmdma->Instance->CTCR = 0;
 8013016:	687b      	ldr	r3, [r7, #4]
 8013018:	681b      	ldr	r3, [r3, #0]
 801301a:	2200      	movs	r2, #0
 801301c:	611a      	str	r2, [r3, #16]
  hmdma->Instance->CBNDTR = 0;
 801301e:	687b      	ldr	r3, [r7, #4]
 8013020:	681b      	ldr	r3, [r3, #0]
 8013022:	2200      	movs	r2, #0
 8013024:	615a      	str	r2, [r3, #20]
  hmdma->Instance->CSAR = 0;
 8013026:	687b      	ldr	r3, [r7, #4]
 8013028:	681b      	ldr	r3, [r3, #0]
 801302a:	2200      	movs	r2, #0
 801302c:	619a      	str	r2, [r3, #24]
  hmdma->Instance->CDAR = 0;
 801302e:	687b      	ldr	r3, [r7, #4]
 8013030:	681b      	ldr	r3, [r3, #0]
 8013032:	2200      	movs	r2, #0
 8013034:	61da      	str	r2, [r3, #28]
  hmdma->Instance->CBRUR = 0;
 8013036:	687b      	ldr	r3, [r7, #4]
 8013038:	681b      	ldr	r3, [r3, #0]
 801303a:	2200      	movs	r2, #0
 801303c:	621a      	str	r2, [r3, #32]
  hmdma->Instance->CLAR = 0;
 801303e:	687b      	ldr	r3, [r7, #4]
 8013040:	681b      	ldr	r3, [r3, #0]
 8013042:	2200      	movs	r2, #0
 8013044:	625a      	str	r2, [r3, #36]	@ 0x24
  hmdma->Instance->CTBR = 0;
 8013046:	687b      	ldr	r3, [r7, #4]
 8013048:	681b      	ldr	r3, [r3, #0]
 801304a:	2200      	movs	r2, #0
 801304c:	629a      	str	r2, [r3, #40]	@ 0x28
  hmdma->Instance->CMAR = 0;
 801304e:	687b      	ldr	r3, [r7, #4]
 8013050:	681b      	ldr	r3, [r3, #0]
 8013052:	2200      	movs	r2, #0
 8013054:	631a      	str	r2, [r3, #48]	@ 0x30
  hmdma->Instance->CMDR = 0;
 8013056:	687b      	ldr	r3, [r7, #4]
 8013058:	681b      	ldr	r3, [r3, #0]
 801305a:	2200      	movs	r2, #0
 801305c:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Clear all flags */
  __HAL_MDMA_CLEAR_FLAG(hmdma,(MDMA_FLAG_TE | MDMA_FLAG_CTC | MDMA_FLAG_BRT | MDMA_FLAG_BT | MDMA_FLAG_BFTC));
 801305e:	687b      	ldr	r3, [r7, #4]
 8013060:	681b      	ldr	r3, [r3, #0]
 8013062:	221f      	movs	r2, #31
 8013064:	605a      	str	r2, [r3, #4]

  /* Reset the  MDMA first/last linkedlist node addresses and node counter */
  hmdma->FirstLinkedListNodeAddress  = 0;
 8013066:	687b      	ldr	r3, [r7, #4]
 8013068:	2200      	movs	r2, #0
 801306a:	65da      	str	r2, [r3, #92]	@ 0x5c
  hmdma->LastLinkedListNodeAddress   = 0;
 801306c:	687b      	ldr	r3, [r7, #4]
 801306e:	2200      	movs	r2, #0
 8013070:	661a      	str	r2, [r3, #96]	@ 0x60
  hmdma->LinkedListNodeCounter  = 0;
 8013072:	687b      	ldr	r3, [r7, #4]
 8013074:	2200      	movs	r2, #0
 8013076:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Initialize the error code */
  hmdma->ErrorCode = HAL_MDMA_ERROR_NONE;
 8013078:	687b      	ldr	r3, [r7, #4]
 801307a:	2200      	movs	r2, #0
 801307c:	669a      	str	r2, [r3, #104]	@ 0x68

  /* Initialize the MDMA state */
  hmdma->State = HAL_MDMA_STATE_RESET;
 801307e:	687b      	ldr	r3, [r7, #4]
 8013080:	2200      	movs	r2, #0
 8013082:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Release Lock */
  __HAL_UNLOCK(hmdma);
 8013086:	687b      	ldr	r3, [r7, #4]
 8013088:	2200      	movs	r2, #0
 801308a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 801308e:	2300      	movs	r3, #0
}
 8013090:	4618      	mov	r0, r3
 8013092:	370c      	adds	r7, #12
 8013094:	46bd      	mov	sp, r7
 8013096:	f85d 7b04 	ldr.w	r7, [sp], #4
 801309a:	4770      	bx	lr

0801309c <HAL_MDMA_Abort_IT>:
  * @param  hmdma  : pointer to a MDMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified MDMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_MDMA_Abort_IT(MDMA_HandleTypeDef *hmdma)
{
 801309c:	b480      	push	{r7}
 801309e:	b083      	sub	sp, #12
 80130a0:	af00      	add	r7, sp, #0
 80130a2:	6078      	str	r0, [r7, #4]
  /* Check the MDMA peripheral handle */
  if(hmdma == NULL)
 80130a4:	687b      	ldr	r3, [r7, #4]
 80130a6:	2b00      	cmp	r3, #0
 80130a8:	d101      	bne.n	80130ae <HAL_MDMA_Abort_IT+0x12>
  {
    return HAL_ERROR;
 80130aa:	2301      	movs	r3, #1
 80130ac:	e017      	b.n	80130de <HAL_MDMA_Abort_IT+0x42>
  }

  if(HAL_MDMA_STATE_BUSY != hmdma->State)
 80130ae:	687b      	ldr	r3, [r7, #4]
 80130b0:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80130b4:	b2db      	uxtb	r3, r3
 80130b6:	2b02      	cmp	r3, #2
 80130b8:	d004      	beq.n	80130c4 <HAL_MDMA_Abort_IT+0x28>
  {
    /* No transfer ongoing */
    hmdma->ErrorCode = HAL_MDMA_ERROR_NO_XFER;
 80130ba:	687b      	ldr	r3, [r7, #4]
 80130bc:	2280      	movs	r2, #128	@ 0x80
 80130be:	669a      	str	r2, [r3, #104]	@ 0x68

    return HAL_ERROR;
 80130c0:	2301      	movs	r3, #1
 80130c2:	e00c      	b.n	80130de <HAL_MDMA_Abort_IT+0x42>
  }
  else
  {
    /* Set Abort State  */
    hmdma->State = HAL_MDMA_STATE_ABORT;
 80130c4:	687b      	ldr	r3, [r7, #4]
 80130c6:	2204      	movs	r2, #4
 80130c8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

    /* Disable the stream */
    __HAL_MDMA_DISABLE(hmdma);
 80130cc:	687b      	ldr	r3, [r7, #4]
 80130ce:	681b      	ldr	r3, [r3, #0]
 80130d0:	68da      	ldr	r2, [r3, #12]
 80130d2:	687b      	ldr	r3, [r7, #4]
 80130d4:	681b      	ldr	r3, [r3, #0]
 80130d6:	f022 0201 	bic.w	r2, r2, #1
 80130da:	60da      	str	r2, [r3, #12]
  }

  return HAL_OK;
 80130dc:	2300      	movs	r3, #0
}
 80130de:	4618      	mov	r0, r3
 80130e0:	370c      	adds	r7, #12
 80130e2:	46bd      	mov	sp, r7
 80130e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80130e8:	4770      	bx	lr

080130ea <MDMA_Init>:
  * @param  hmdma:       pointer to a MDMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified MDMA Channel.
  * @retval None
  */
static void MDMA_Init(MDMA_HandleTypeDef *hmdma)
{
 80130ea:	b480      	push	{r7}
 80130ec:	b085      	sub	sp, #20
 80130ee:	af00      	add	r7, sp, #0
 80130f0:	6078      	str	r0, [r7, #4]
  uint32_t blockoffset;

  /* Prepare the MDMA Channel configuration */
  hmdma->Instance->CCR = hmdma->Init.Priority  | hmdma->Init.Endianness;
 80130f2:	687b      	ldr	r3, [r7, #4]
 80130f4:	68d9      	ldr	r1, [r3, #12]
 80130f6:	687b      	ldr	r3, [r7, #4]
 80130f8:	691a      	ldr	r2, [r3, #16]
 80130fa:	687b      	ldr	r3, [r7, #4]
 80130fc:	681b      	ldr	r3, [r3, #0]
 80130fe:	430a      	orrs	r2, r1
 8013100:	60da      	str	r2, [r3, #12]

  /* Write new CTCR Register value */
  hmdma->Instance->CTCR =  hmdma->Init.SourceInc      | hmdma->Init.DestinationInc | \
 8013102:	687b      	ldr	r3, [r7, #4]
 8013104:	695a      	ldr	r2, [r3, #20]
 8013106:	687b      	ldr	r3, [r7, #4]
 8013108:	699b      	ldr	r3, [r3, #24]
 801310a:	431a      	orrs	r2, r3
                           hmdma->Init.SourceDataSize | hmdma->Init.DestDataSize   | \
 801310c:	687b      	ldr	r3, [r7, #4]
 801310e:	69db      	ldr	r3, [r3, #28]
  hmdma->Instance->CTCR =  hmdma->Init.SourceInc      | hmdma->Init.DestinationInc | \
 8013110:	431a      	orrs	r2, r3
                           hmdma->Init.SourceDataSize | hmdma->Init.DestDataSize   | \
 8013112:	687b      	ldr	r3, [r7, #4]
 8013114:	6a1b      	ldr	r3, [r3, #32]
 8013116:	431a      	orrs	r2, r3
                           hmdma->Init.DataAlignment  | hmdma->Init.SourceBurst    | \
 8013118:	687b      	ldr	r3, [r7, #4]
 801311a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
                           hmdma->Init.SourceDataSize | hmdma->Init.DestDataSize   | \
 801311c:	431a      	orrs	r2, r3
                           hmdma->Init.DataAlignment  | hmdma->Init.SourceBurst    | \
 801311e:	687b      	ldr	r3, [r7, #4]
 8013120:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8013122:	431a      	orrs	r2, r3
                           hmdma->Init.DestBurst                                   | \
 8013124:	687b      	ldr	r3, [r7, #4]
 8013126:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
                           hmdma->Init.DataAlignment  | hmdma->Init.SourceBurst    | \
 8013128:	431a      	orrs	r2, r3
                           ((hmdma->Init.BufferTransferLength - 1U) << MDMA_CTCR_TLEN_Pos) | \
 801312a:	687b      	ldr	r3, [r7, #4]
 801312c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 801312e:	3b01      	subs	r3, #1
 8013130:	049b      	lsls	r3, r3, #18
                           hmdma->Init.DestBurst                                   | \
 8013132:	ea42 0103 	orr.w	r1, r2, r3
                           hmdma->Init.TransferTriggerMode;
 8013136:	687b      	ldr	r3, [r7, #4]
 8013138:	689a      	ldr	r2, [r3, #8]
  hmdma->Instance->CTCR =  hmdma->Init.SourceInc      | hmdma->Init.DestinationInc | \
 801313a:	687b      	ldr	r3, [r7, #4]
 801313c:	681b      	ldr	r3, [r3, #0]
                           ((hmdma->Init.BufferTransferLength - 1U) << MDMA_CTCR_TLEN_Pos) | \
 801313e:	430a      	orrs	r2, r1
  hmdma->Instance->CTCR =  hmdma->Init.SourceInc      | hmdma->Init.DestinationInc | \
 8013140:	611a      	str	r2, [r3, #16]

  /* If SW request set the CTCR register to SW Request Mode */
  if(hmdma->Init.Request == MDMA_REQUEST_SW)
 8013142:	687b      	ldr	r3, [r7, #4]
 8013144:	685b      	ldr	r3, [r3, #4]
 8013146:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 801314a:	d107      	bne.n	801315c <MDMA_Init+0x72>
    -If the request is done by SW : BWM could be set to 1 or 0.
    -If the request is done by a peripheral :
    If mask address not set (0) => BWM must be set to 0
    If mask address set (different than 0) => BWM could be set to 1 or 0
    */
    hmdma->Instance->CTCR |= (MDMA_CTCR_SWRM | MDMA_CTCR_BWM);
 801314c:	687b      	ldr	r3, [r7, #4]
 801314e:	681b      	ldr	r3, [r3, #0]
 8013150:	691a      	ldr	r2, [r3, #16]
 8013152:	687b      	ldr	r3, [r7, #4]
 8013154:	681b      	ldr	r3, [r3, #0]
 8013156:	f042 4240 	orr.w	r2, r2, #3221225472	@ 0xc0000000
 801315a:	611a      	str	r2, [r3, #16]
  }

  /* Reset CBNDTR Register */
  hmdma->Instance->CBNDTR = 0;
 801315c:	687b      	ldr	r3, [r7, #4]
 801315e:	681b      	ldr	r3, [r3, #0]
 8013160:	2200      	movs	r2, #0
 8013162:	615a      	str	r2, [r3, #20]

  /* if block source address offset is negative set the Block Repeat Source address Update Mode to decrement */
  if(hmdma->Init.SourceBlockAddressOffset < 0)
 8013164:	687b      	ldr	r3, [r7, #4]
 8013166:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8013168:	2b00      	cmp	r3, #0
 801316a:	da11      	bge.n	8013190 <MDMA_Init+0xa6>
  {
    hmdma->Instance->CBNDTR |= MDMA_CBNDTR_BRSUM;
 801316c:	687b      	ldr	r3, [r7, #4]
 801316e:	681b      	ldr	r3, [r3, #0]
 8013170:	695a      	ldr	r2, [r3, #20]
 8013172:	687b      	ldr	r3, [r7, #4]
 8013174:	681b      	ldr	r3, [r3, #0]
 8013176:	f442 2280 	orr.w	r2, r2, #262144	@ 0x40000
 801317a:	615a      	str	r2, [r3, #20]
    /* Write new CBRUR Register value : source repeat block offset */
    blockoffset = (uint32_t)(- hmdma->Init.SourceBlockAddressOffset);
 801317c:	687b      	ldr	r3, [r7, #4]
 801317e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8013180:	425b      	negs	r3, r3
 8013182:	60fb      	str	r3, [r7, #12]
    hmdma->Instance->CBRUR = (blockoffset & 0x0000FFFFU);
 8013184:	687b      	ldr	r3, [r7, #4]
 8013186:	681b      	ldr	r3, [r3, #0]
 8013188:	68fa      	ldr	r2, [r7, #12]
 801318a:	b292      	uxth	r2, r2
 801318c:	621a      	str	r2, [r3, #32]
 801318e:	e006      	b.n	801319e <MDMA_Init+0xb4>
  }
  else
  {
    /* Write new CBRUR Register value : source repeat block offset */
    hmdma->Instance->CBRUR = (((uint32_t)hmdma->Init.SourceBlockAddressOffset) & 0x0000FFFFU);
 8013190:	687b      	ldr	r3, [r7, #4]
 8013192:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8013194:	461a      	mov	r2, r3
 8013196:	687b      	ldr	r3, [r7, #4]
 8013198:	681b      	ldr	r3, [r3, #0]
 801319a:	b292      	uxth	r2, r2
 801319c:	621a      	str	r2, [r3, #32]
  }

  /* If block destination address offset is negative set the Block Repeat destination address Update Mode to decrement */
  if(hmdma->Init.DestBlockAddressOffset < 0)
 801319e:	687b      	ldr	r3, [r7, #4]
 80131a0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80131a2:	2b00      	cmp	r3, #0
 80131a4:	da15      	bge.n	80131d2 <MDMA_Init+0xe8>
  {
    hmdma->Instance->CBNDTR |= MDMA_CBNDTR_BRDUM;
 80131a6:	687b      	ldr	r3, [r7, #4]
 80131a8:	681b      	ldr	r3, [r3, #0]
 80131aa:	695a      	ldr	r2, [r3, #20]
 80131ac:	687b      	ldr	r3, [r7, #4]
 80131ae:	681b      	ldr	r3, [r3, #0]
 80131b0:	f442 2200 	orr.w	r2, r2, #524288	@ 0x80000
 80131b4:	615a      	str	r2, [r3, #20]
    /* Write new CBRUR Register value : destination repeat block offset */
    blockoffset = (uint32_t)(- hmdma->Init.DestBlockAddressOffset);
 80131b6:	687b      	ldr	r3, [r7, #4]
 80131b8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80131ba:	425b      	negs	r3, r3
 80131bc:	60fb      	str	r3, [r7, #12]
    hmdma->Instance->CBRUR |= ((blockoffset & 0x0000FFFFU) << MDMA_CBRUR_DUV_Pos);
 80131be:	687b      	ldr	r3, [r7, #4]
 80131c0:	681b      	ldr	r3, [r3, #0]
 80131c2:	6a19      	ldr	r1, [r3, #32]
 80131c4:	68fb      	ldr	r3, [r7, #12]
 80131c6:	041a      	lsls	r2, r3, #16
 80131c8:	687b      	ldr	r3, [r7, #4]
 80131ca:	681b      	ldr	r3, [r3, #0]
 80131cc:	430a      	orrs	r2, r1
 80131ce:	621a      	str	r2, [r3, #32]
 80131d0:	e009      	b.n	80131e6 <MDMA_Init+0xfc>
  }
  else
  {
    /*write new CBRUR Register value : destination repeat block offset */
    hmdma->Instance->CBRUR |= ((((uint32_t)hmdma->Init.DestBlockAddressOffset) & 0x0000FFFFU) << MDMA_CBRUR_DUV_Pos);
 80131d2:	687b      	ldr	r3, [r7, #4]
 80131d4:	681b      	ldr	r3, [r3, #0]
 80131d6:	6a19      	ldr	r1, [r3, #32]
 80131d8:	687b      	ldr	r3, [r7, #4]
 80131da:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80131dc:	041a      	lsls	r2, r3, #16
 80131de:	687b      	ldr	r3, [r7, #4]
 80131e0:	681b      	ldr	r3, [r3, #0]
 80131e2:	430a      	orrs	r2, r1
 80131e4:	621a      	str	r2, [r3, #32]
  }

  /* if HW request set the HW request and the requet CleraMask and ClearData MaskData, */
  if(hmdma->Init.Request != MDMA_REQUEST_SW)
 80131e6:	687b      	ldr	r3, [r7, #4]
 80131e8:	685b      	ldr	r3, [r3, #4]
 80131ea:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80131ee:	d006      	beq.n	80131fe <MDMA_Init+0x114>
  {
    /* Set the HW request in CTRB register  */
    hmdma->Instance->CTBR = hmdma->Init.Request & MDMA_CTBR_TSEL;
 80131f0:	687b      	ldr	r3, [r7, #4]
 80131f2:	685a      	ldr	r2, [r3, #4]
 80131f4:	687b      	ldr	r3, [r7, #4]
 80131f6:	681b      	ldr	r3, [r3, #0]
 80131f8:	b2d2      	uxtb	r2, r2
 80131fa:	629a      	str	r2, [r3, #40]	@ 0x28
 80131fc:	e003      	b.n	8013206 <MDMA_Init+0x11c>
  }
  else /* SW request : reset the CTBR register */
  {
    hmdma->Instance->CTBR = 0;
 80131fe:	687b      	ldr	r3, [r7, #4]
 8013200:	681b      	ldr	r3, [r3, #0]
 8013202:	2200      	movs	r2, #0
 8013204:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Write Link Address Register */
  hmdma->Instance->CLAR =  0;
 8013206:	687b      	ldr	r3, [r7, #4]
 8013208:	681b      	ldr	r3, [r3, #0]
 801320a:	2200      	movs	r2, #0
 801320c:	625a      	str	r2, [r3, #36]	@ 0x24
}
 801320e:	bf00      	nop
 8013210:	3714      	adds	r7, #20
 8013212:	46bd      	mov	sp, r7
 8013214:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013218:	4770      	bx	lr
	...

0801321c <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 801321c:	b580      	push	{r7, lr}
 801321e:	b084      	sub	sp, #16
 8013220:	af00      	add	r7, sp, #0
 8013222:	6078      	str	r0, [r7, #4]

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
 8013224:	4b29      	ldr	r3, [pc, #164]	@ (80132cc <HAL_PWREx_ConfigSupply+0xb0>)
 8013226:	68db      	ldr	r3, [r3, #12]
 8013228:	f003 0307 	and.w	r3, r3, #7
 801322c:	2b06      	cmp	r3, #6
 801322e:	d00a      	beq.n	8013246 <HAL_PWREx_ConfigSupply+0x2a>
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 8013230:	4b26      	ldr	r3, [pc, #152]	@ (80132cc <HAL_PWREx_ConfigSupply+0xb0>)
 8013232:	68db      	ldr	r3, [r3, #12]
 8013234:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8013238:	687a      	ldr	r2, [r7, #4]
 801323a:	429a      	cmp	r2, r3
 801323c:	d001      	beq.n	8013242 <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 801323e:	2301      	movs	r3, #1
 8013240:	e040      	b.n	80132c4 <HAL_PWREx_ConfigSupply+0xa8>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 8013242:	2300      	movs	r3, #0
 8013244:	e03e      	b.n	80132c4 <HAL_PWREx_ConfigSupply+0xa8>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 8013246:	4b21      	ldr	r3, [pc, #132]	@ (80132cc <HAL_PWREx_ConfigSupply+0xb0>)
 8013248:	68db      	ldr	r3, [r3, #12]
 801324a:	f023 023f 	bic.w	r2, r3, #63	@ 0x3f
 801324e:	491f      	ldr	r1, [pc, #124]	@ (80132cc <HAL_PWREx_ConfigSupply+0xb0>)
 8013250:	687b      	ldr	r3, [r7, #4]
 8013252:	4313      	orrs	r3, r2
 8013254:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 8013256:	f7fd fd53 	bl	8010d00 <HAL_GetTick>
 801325a:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 801325c:	e009      	b.n	8013272 <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 801325e:	f7fd fd4f 	bl	8010d00 <HAL_GetTick>
 8013262:	4602      	mov	r2, r0
 8013264:	68fb      	ldr	r3, [r7, #12]
 8013266:	1ad3      	subs	r3, r2, r3
 8013268:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 801326c:	d901      	bls.n	8013272 <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 801326e:	2301      	movs	r3, #1
 8013270:	e028      	b.n	80132c4 <HAL_PWREx_ConfigSupply+0xa8>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8013272:	4b16      	ldr	r3, [pc, #88]	@ (80132cc <HAL_PWREx_ConfigSupply+0xb0>)
 8013274:	685b      	ldr	r3, [r3, #4]
 8013276:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 801327a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 801327e:	d1ee      	bne.n	801325e <HAL_PWREx_ConfigSupply+0x42>
    }
  }

#if defined (SMPS)
  /* When the SMPS supplies external circuits verify that SDEXTRDY flag is set */
  if ((SupplySource == PWR_SMPS_1V8_SUPPLIES_EXT_AND_LDO) ||
 8013280:	687b      	ldr	r3, [r7, #4]
 8013282:	2b1e      	cmp	r3, #30
 8013284:	d008      	beq.n	8013298 <HAL_PWREx_ConfigSupply+0x7c>
 8013286:	687b      	ldr	r3, [r7, #4]
 8013288:	2b2e      	cmp	r3, #46	@ 0x2e
 801328a:	d005      	beq.n	8013298 <HAL_PWREx_ConfigSupply+0x7c>
      (SupplySource == PWR_SMPS_2V5_SUPPLIES_EXT_AND_LDO) ||
 801328c:	687b      	ldr	r3, [r7, #4]
 801328e:	2b1d      	cmp	r3, #29
 8013290:	d002      	beq.n	8013298 <HAL_PWREx_ConfigSupply+0x7c>
      (SupplySource == PWR_SMPS_1V8_SUPPLIES_EXT)         ||
 8013292:	687b      	ldr	r3, [r7, #4]
 8013294:	2b2d      	cmp	r3, #45	@ 0x2d
 8013296:	d114      	bne.n	80132c2 <HAL_PWREx_ConfigSupply+0xa6>
      (SupplySource == PWR_SMPS_2V5_SUPPLIES_EXT))
  {
    /* Get the current tick number */
    tickstart = HAL_GetTick ();
 8013298:	f7fd fd32 	bl	8010d00 <HAL_GetTick>
 801329c:	60f8      	str	r0, [r7, #12]

    /* Wait till SMPS external supply ready flag is set */
    while (__HAL_PWR_GET_FLAG (PWR_FLAG_SMPSEXTRDY) == 0U)
 801329e:	e009      	b.n	80132b4 <HAL_PWREx_ConfigSupply+0x98>
    {
      if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 80132a0:	f7fd fd2e 	bl	8010d00 <HAL_GetTick>
 80132a4:	4602      	mov	r2, r0
 80132a6:	68fb      	ldr	r3, [r7, #12]
 80132a8:	1ad3      	subs	r3, r2, r3
 80132aa:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 80132ae:	d901      	bls.n	80132b4 <HAL_PWREx_ConfigSupply+0x98>
      {
        return HAL_ERROR;
 80132b0:	2301      	movs	r3, #1
 80132b2:	e007      	b.n	80132c4 <HAL_PWREx_ConfigSupply+0xa8>
    while (__HAL_PWR_GET_FLAG (PWR_FLAG_SMPSEXTRDY) == 0U)
 80132b4:	4b05      	ldr	r3, [pc, #20]	@ (80132cc <HAL_PWREx_ConfigSupply+0xb0>)
 80132b6:	68db      	ldr	r3, [r3, #12]
 80132b8:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80132bc:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80132c0:	d1ee      	bne.n	80132a0 <HAL_PWREx_ConfigSupply+0x84>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 80132c2:	2300      	movs	r3, #0
}
 80132c4:	4618      	mov	r0, r3
 80132c6:	3710      	adds	r7, #16
 80132c8:	46bd      	mov	sp, r7
 80132ca:	bd80      	pop	{r7, pc}
 80132cc:	58024800 	.word	0x58024800

080132d0 <HAL_QSPI_Init>:
  *        in the QSPI_InitTypeDef and initialize the associated handle.
  * @param hqspi QSPI handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_QSPI_Init(QSPI_HandleTypeDef *hqspi)
{
 80132d0:	b580      	push	{r7, lr}
 80132d2:	b086      	sub	sp, #24
 80132d4:	af02      	add	r7, sp, #8
 80132d6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status;
  uint32_t tickstart = HAL_GetTick();
 80132d8:	f7fd fd12 	bl	8010d00 <HAL_GetTick>
 80132dc:	60f8      	str	r0, [r7, #12]

  /* Check the QSPI handle allocation */
  if(hqspi == NULL)
 80132de:	687b      	ldr	r3, [r7, #4]
 80132e0:	2b00      	cmp	r3, #0
 80132e2:	d101      	bne.n	80132e8 <HAL_QSPI_Init+0x18>
  {
    return HAL_ERROR;
 80132e4:	2301      	movs	r3, #1
 80132e6:	e05f      	b.n	80133a8 <HAL_QSPI_Init+0xd8>
  if (hqspi->Init.DualFlash != QSPI_DUALFLASH_ENABLE )
  {
    assert_param(IS_QSPI_FLASH_ID(hqspi->Init.FlashID));
  }

  if(hqspi->State == HAL_QSPI_STATE_RESET)
 80132e8:	687b      	ldr	r3, [r7, #4]
 80132ea:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80132ee:	b2db      	uxtb	r3, r3
 80132f0:	2b00      	cmp	r3, #0
 80132f2:	d107      	bne.n	8013304 <HAL_QSPI_Init+0x34>

    /* Init the low level hardware */
    hqspi->MspInitCallback(hqspi);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_QSPI_MspInit(hqspi);
 80132f4:	6878      	ldr	r0, [r7, #4]
 80132f6:	f7ed fed3 	bl	80010a0 <HAL_QSPI_MspInit>
#endif

    /* Configure the default timeout for the QSPI memory access */
    HAL_QSPI_SetTimeout(hqspi, HAL_QSPI_TIMEOUT_DEFAULT_VALUE);
 80132fa:	f241 3188 	movw	r1, #5000	@ 0x1388
 80132fe:	6878      	ldr	r0, [r7, #4]
 8013300:	f000 fcca 	bl	8013c98 <HAL_QSPI_SetTimeout>
  }

  /* Configure QSPI FIFO Threshold */
  MODIFY_REG(hqspi->Instance->CR, QUADSPI_CR_FTHRES,
 8013304:	687b      	ldr	r3, [r7, #4]
 8013306:	681b      	ldr	r3, [r3, #0]
 8013308:	681b      	ldr	r3, [r3, #0]
 801330a:	f423 51f8 	bic.w	r1, r3, #7936	@ 0x1f00
 801330e:	687b      	ldr	r3, [r7, #4]
 8013310:	689b      	ldr	r3, [r3, #8]
 8013312:	3b01      	subs	r3, #1
 8013314:	021a      	lsls	r2, r3, #8
 8013316:	687b      	ldr	r3, [r7, #4]
 8013318:	681b      	ldr	r3, [r3, #0]
 801331a:	430a      	orrs	r2, r1
 801331c:	601a      	str	r2, [r3, #0]
             ((hqspi->Init.FifoThreshold - 1U) << QUADSPI_CR_FTHRES_Pos));

  /* Wait till BUSY flag reset */
  status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_BUSY, RESET, tickstart, hqspi->Timeout);
 801331e:	687b      	ldr	r3, [r7, #4]
 8013320:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8013322:	9300      	str	r3, [sp, #0]
 8013324:	68fb      	ldr	r3, [r7, #12]
 8013326:	2200      	movs	r2, #0
 8013328:	2120      	movs	r1, #32
 801332a:	6878      	ldr	r0, [r7, #4]
 801332c:	f000 fcf5 	bl	8013d1a <QSPI_WaitFlagStateUntilTimeout>
 8013330:	4603      	mov	r3, r0
 8013332:	72fb      	strb	r3, [r7, #11]

  if(status == HAL_OK)
 8013334:	7afb      	ldrb	r3, [r7, #11]
 8013336:	2b00      	cmp	r3, #0
 8013338:	d135      	bne.n	80133a6 <HAL_QSPI_Init+0xd6>
  {
    /* Configure QSPI Clock Prescaler and Sample Shift */
    MODIFY_REG(hqspi->Instance->CR, (QUADSPI_CR_PRESCALER | QUADSPI_CR_SSHIFT | QUADSPI_CR_FSEL | QUADSPI_CR_DFM),
 801333a:	687b      	ldr	r3, [r7, #4]
 801333c:	681b      	ldr	r3, [r3, #0]
 801333e:	681a      	ldr	r2, [r3, #0]
 8013340:	4b1b      	ldr	r3, [pc, #108]	@ (80133b0 <HAL_QSPI_Init+0xe0>)
 8013342:	4013      	ands	r3, r2
 8013344:	687a      	ldr	r2, [r7, #4]
 8013346:	6852      	ldr	r2, [r2, #4]
 8013348:	0611      	lsls	r1, r2, #24
 801334a:	687a      	ldr	r2, [r7, #4]
 801334c:	68d2      	ldr	r2, [r2, #12]
 801334e:	4311      	orrs	r1, r2
 8013350:	687a      	ldr	r2, [r7, #4]
 8013352:	69d2      	ldr	r2, [r2, #28]
 8013354:	4311      	orrs	r1, r2
 8013356:	687a      	ldr	r2, [r7, #4]
 8013358:	6a12      	ldr	r2, [r2, #32]
 801335a:	4311      	orrs	r1, r2
 801335c:	687a      	ldr	r2, [r7, #4]
 801335e:	6812      	ldr	r2, [r2, #0]
 8013360:	430b      	orrs	r3, r1
 8013362:	6013      	str	r3, [r2, #0]
               ((hqspi->Init.ClockPrescaler << QUADSPI_CR_PRESCALER_Pos) |
                hqspi->Init.SampleShifting  | hqspi->Init.FlashID | hqspi->Init.DualFlash));

    /* Configure QSPI Flash Size, CS High Time and Clock Mode */
    MODIFY_REG(hqspi->Instance->DCR, (QUADSPI_DCR_FSIZE | QUADSPI_DCR_CSHT | QUADSPI_DCR_CKMODE),
 8013364:	687b      	ldr	r3, [r7, #4]
 8013366:	681b      	ldr	r3, [r3, #0]
 8013368:	685a      	ldr	r2, [r3, #4]
 801336a:	4b12      	ldr	r3, [pc, #72]	@ (80133b4 <HAL_QSPI_Init+0xe4>)
 801336c:	4013      	ands	r3, r2
 801336e:	687a      	ldr	r2, [r7, #4]
 8013370:	6912      	ldr	r2, [r2, #16]
 8013372:	0411      	lsls	r1, r2, #16
 8013374:	687a      	ldr	r2, [r7, #4]
 8013376:	6952      	ldr	r2, [r2, #20]
 8013378:	4311      	orrs	r1, r2
 801337a:	687a      	ldr	r2, [r7, #4]
 801337c:	6992      	ldr	r2, [r2, #24]
 801337e:	4311      	orrs	r1, r2
 8013380:	687a      	ldr	r2, [r7, #4]
 8013382:	6812      	ldr	r2, [r2, #0]
 8013384:	430b      	orrs	r3, r1
 8013386:	6053      	str	r3, [r2, #4]
               ((hqspi->Init.FlashSize << QUADSPI_DCR_FSIZE_Pos) |
                hqspi->Init.ChipSelectHighTime | hqspi->Init.ClockMode));

    /* Enable the QSPI peripheral */
    __HAL_QSPI_ENABLE(hqspi);
 8013388:	687b      	ldr	r3, [r7, #4]
 801338a:	681b      	ldr	r3, [r3, #0]
 801338c:	681a      	ldr	r2, [r3, #0]
 801338e:	687b      	ldr	r3, [r7, #4]
 8013390:	681b      	ldr	r3, [r3, #0]
 8013392:	f042 0201 	orr.w	r2, r2, #1
 8013396:	601a      	str	r2, [r3, #0]

    /* Set QSPI error code to none */
    hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;
 8013398:	687b      	ldr	r3, [r7, #4]
 801339a:	2200      	movs	r2, #0
 801339c:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Initialize the QSPI state */
    hqspi->State = HAL_QSPI_STATE_READY;
 801339e:	687b      	ldr	r3, [r7, #4]
 80133a0:	2201      	movs	r2, #1
 80133a2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  }

  /* Return function status */
  return status;
 80133a6:	7afb      	ldrb	r3, [r7, #11]
}
 80133a8:	4618      	mov	r0, r3
 80133aa:	3710      	adds	r7, #16
 80133ac:	46bd      	mov	sp, r7
 80133ae:	bd80      	pop	{r7, pc}
 80133b0:	00ffff2f 	.word	0x00ffff2f
 80133b4:	ffe0f8fe 	.word	0xffe0f8fe

080133b8 <HAL_QSPI_IRQHandler>:
  * @brief Handle QSPI interrupt request.
  * @param hqspi QSPI handle
  * @retval None
  */
void HAL_QSPI_IRQHandler(QSPI_HandleTypeDef *hqspi)
{
 80133b8:	b580      	push	{r7, lr}
 80133ba:	b086      	sub	sp, #24
 80133bc:	af00      	add	r7, sp, #0
 80133be:	6078      	str	r0, [r7, #4]
  __IO uint32_t *data_reg;
  uint32_t flag = READ_REG(hqspi->Instance->SR);
 80133c0:	687b      	ldr	r3, [r7, #4]
 80133c2:	681b      	ldr	r3, [r3, #0]
 80133c4:	689b      	ldr	r3, [r3, #8]
 80133c6:	617b      	str	r3, [r7, #20]
  uint32_t itsource = READ_REG(hqspi->Instance->CR);
 80133c8:	687b      	ldr	r3, [r7, #4]
 80133ca:	681b      	ldr	r3, [r3, #0]
 80133cc:	681b      	ldr	r3, [r3, #0]
 80133ce:	613b      	str	r3, [r7, #16]

  /* QSPI Fifo Threshold interrupt occurred ----------------------------------*/
  if(((flag & QSPI_FLAG_FT) != 0U) && ((itsource & QSPI_IT_FT) != 0U))
 80133d0:	697b      	ldr	r3, [r7, #20]
 80133d2:	f003 0304 	and.w	r3, r3, #4
 80133d6:	2b00      	cmp	r3, #0
 80133d8:	d064      	beq.n	80134a4 <HAL_QSPI_IRQHandler+0xec>
 80133da:	693b      	ldr	r3, [r7, #16]
 80133dc:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80133e0:	2b00      	cmp	r3, #0
 80133e2:	d05f      	beq.n	80134a4 <HAL_QSPI_IRQHandler+0xec>
  {
    data_reg = &hqspi->Instance->DR;
 80133e4:	687b      	ldr	r3, [r7, #4]
 80133e6:	681b      	ldr	r3, [r3, #0]
 80133e8:	3320      	adds	r3, #32
 80133ea:	60fb      	str	r3, [r7, #12]

    if(hqspi->State == HAL_QSPI_STATE_BUSY_INDIRECT_TX)
 80133ec:	687b      	ldr	r3, [r7, #4]
 80133ee:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80133f2:	b2db      	uxtb	r3, r3
 80133f4:	2b12      	cmp	r3, #18
 80133f6:	d125      	bne.n	8013444 <HAL_QSPI_IRQHandler+0x8c>
    {
      /* Transmission process */
      while(__HAL_QSPI_GET_FLAG(hqspi, QSPI_FLAG_FT) != RESET)
 80133f8:	e01c      	b.n	8013434 <HAL_QSPI_IRQHandler+0x7c>
      {
        if (hqspi->TxXferCount > 0U)
 80133fa:	687b      	ldr	r3, [r7, #4]
 80133fc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80133fe:	2b00      	cmp	r3, #0
 8013400:	d00f      	beq.n	8013422 <HAL_QSPI_IRQHandler+0x6a>
        {
          /* Fill the FIFO until the threshold is reached */
          *((__IO uint8_t *)data_reg) = *hqspi->pTxBuffPtr;
 8013402:	687b      	ldr	r3, [r7, #4]
 8013404:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8013406:	781a      	ldrb	r2, [r3, #0]
 8013408:	68fb      	ldr	r3, [r7, #12]
 801340a:	701a      	strb	r2, [r3, #0]
          hqspi->pTxBuffPtr++;
 801340c:	687b      	ldr	r3, [r7, #4]
 801340e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8013410:	1c5a      	adds	r2, r3, #1
 8013412:	687b      	ldr	r3, [r7, #4]
 8013414:	625a      	str	r2, [r3, #36]	@ 0x24
          hqspi->TxXferCount--;
 8013416:	687b      	ldr	r3, [r7, #4]
 8013418:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801341a:	1e5a      	subs	r2, r3, #1
 801341c:	687b      	ldr	r3, [r7, #4]
 801341e:	62da      	str	r2, [r3, #44]	@ 0x2c
 8013420:	e008      	b.n	8013434 <HAL_QSPI_IRQHandler+0x7c>
        }
        else
        {
          /* No more data available for the transfer */
          /* Disable the QSPI FIFO Threshold Interrupt */
          __HAL_QSPI_DISABLE_IT(hqspi, QSPI_IT_FT);
 8013422:	687b      	ldr	r3, [r7, #4]
 8013424:	681b      	ldr	r3, [r3, #0]
 8013426:	681a      	ldr	r2, [r3, #0]
 8013428:	687b      	ldr	r3, [r7, #4]
 801342a:	681b      	ldr	r3, [r3, #0]
 801342c:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 8013430:	601a      	str	r2, [r3, #0]
          break;
 8013432:	e033      	b.n	801349c <HAL_QSPI_IRQHandler+0xe4>
      while(__HAL_QSPI_GET_FLAG(hqspi, QSPI_FLAG_FT) != RESET)
 8013434:	687b      	ldr	r3, [r7, #4]
 8013436:	681b      	ldr	r3, [r3, #0]
 8013438:	689b      	ldr	r3, [r3, #8]
 801343a:	f003 0304 	and.w	r3, r3, #4
 801343e:	2b00      	cmp	r3, #0
 8013440:	d1db      	bne.n	80133fa <HAL_QSPI_IRQHandler+0x42>
 8013442:	e02b      	b.n	801349c <HAL_QSPI_IRQHandler+0xe4>
        }
      }
    }
    else if(hqspi->State == HAL_QSPI_STATE_BUSY_INDIRECT_RX)
 8013444:	687b      	ldr	r3, [r7, #4]
 8013446:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 801344a:	b2db      	uxtb	r3, r3
 801344c:	2b22      	cmp	r3, #34	@ 0x22
 801344e:	d125      	bne.n	801349c <HAL_QSPI_IRQHandler+0xe4>
    {
      /* Receiving Process */
      while(__HAL_QSPI_GET_FLAG(hqspi, QSPI_FLAG_FT) != RESET)
 8013450:	e01d      	b.n	801348e <HAL_QSPI_IRQHandler+0xd6>
      {
        if (hqspi->RxXferCount > 0U)
 8013452:	687b      	ldr	r3, [r7, #4]
 8013454:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8013456:	2b00      	cmp	r3, #0
 8013458:	d010      	beq.n	801347c <HAL_QSPI_IRQHandler+0xc4>
        {
          /* Read the FIFO until the threshold is reached */
          *hqspi->pRxBuffPtr = *((__IO uint8_t *)data_reg);
 801345a:	687b      	ldr	r3, [r7, #4]
 801345c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 801345e:	68fa      	ldr	r2, [r7, #12]
 8013460:	7812      	ldrb	r2, [r2, #0]
 8013462:	b2d2      	uxtb	r2, r2
 8013464:	701a      	strb	r2, [r3, #0]
          hqspi->pRxBuffPtr++;
 8013466:	687b      	ldr	r3, [r7, #4]
 8013468:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 801346a:	1c5a      	adds	r2, r3, #1
 801346c:	687b      	ldr	r3, [r7, #4]
 801346e:	631a      	str	r2, [r3, #48]	@ 0x30
          hqspi->RxXferCount--;
 8013470:	687b      	ldr	r3, [r7, #4]
 8013472:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8013474:	1e5a      	subs	r2, r3, #1
 8013476:	687b      	ldr	r3, [r7, #4]
 8013478:	639a      	str	r2, [r3, #56]	@ 0x38
 801347a:	e008      	b.n	801348e <HAL_QSPI_IRQHandler+0xd6>
        }
        else
        {
          /* All data have been received for the transfer */
          /* Disable the QSPI FIFO Threshold Interrupt */
          __HAL_QSPI_DISABLE_IT(hqspi, QSPI_IT_FT);
 801347c:	687b      	ldr	r3, [r7, #4]
 801347e:	681b      	ldr	r3, [r3, #0]
 8013480:	681a      	ldr	r2, [r3, #0]
 8013482:	687b      	ldr	r3, [r7, #4]
 8013484:	681b      	ldr	r3, [r3, #0]
 8013486:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 801348a:	601a      	str	r2, [r3, #0]
          break;
 801348c:	e006      	b.n	801349c <HAL_QSPI_IRQHandler+0xe4>
      while(__HAL_QSPI_GET_FLAG(hqspi, QSPI_FLAG_FT) != RESET)
 801348e:	687b      	ldr	r3, [r7, #4]
 8013490:	681b      	ldr	r3, [r3, #0]
 8013492:	689b      	ldr	r3, [r3, #8]
 8013494:	f003 0304 	and.w	r3, r3, #4
 8013498:	2b00      	cmp	r3, #0
 801349a:	d1da      	bne.n	8013452 <HAL_QSPI_IRQHandler+0x9a>

    /* FIFO Threshold callback */
#if (USE_HAL_QSPI_REGISTER_CALLBACKS == 1)
    hqspi->FifoThresholdCallback(hqspi);
#else
    HAL_QSPI_FifoThresholdCallback(hqspi);
 801349c:	6878      	ldr	r0, [r7, #4]
 801349e:	f000 fbdd 	bl	8013c5c <HAL_QSPI_FifoThresholdCallback>
 80134a2:	e13c      	b.n	801371e <HAL_QSPI_IRQHandler+0x366>
#endif
  }

  /* QSPI Transfer Complete interrupt occurred -------------------------------*/
  else if(((flag & QSPI_FLAG_TC) != 0U) && ((itsource & QSPI_IT_TC) != 0U))
 80134a4:	697b      	ldr	r3, [r7, #20]
 80134a6:	f003 0302 	and.w	r3, r3, #2
 80134aa:	2b00      	cmp	r3, #0
 80134ac:	f000 80b0 	beq.w	8013610 <HAL_QSPI_IRQHandler+0x258>
 80134b0:	693b      	ldr	r3, [r7, #16]
 80134b2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80134b6:	2b00      	cmp	r3, #0
 80134b8:	f000 80aa 	beq.w	8013610 <HAL_QSPI_IRQHandler+0x258>
  {
    /* Clear interrupt */
    WRITE_REG(hqspi->Instance->FCR, QSPI_FLAG_TC);
 80134bc:	687b      	ldr	r3, [r7, #4]
 80134be:	681b      	ldr	r3, [r3, #0]
 80134c0:	2202      	movs	r2, #2
 80134c2:	60da      	str	r2, [r3, #12]

    /* Disable the QSPI FIFO Threshold, Transfer Error and Transfer complete Interrupts */
    __HAL_QSPI_DISABLE_IT(hqspi, QSPI_IT_TC | QSPI_IT_TE | QSPI_IT_FT);
 80134c4:	687b      	ldr	r3, [r7, #4]
 80134c6:	681b      	ldr	r3, [r3, #0]
 80134c8:	681a      	ldr	r2, [r3, #0]
 80134ca:	687b      	ldr	r3, [r7, #4]
 80134cc:	681b      	ldr	r3, [r3, #0]
 80134ce:	f422 22e0 	bic.w	r2, r2, #458752	@ 0x70000
 80134d2:	601a      	str	r2, [r3, #0]

    /* Transfer complete callback */
    if(hqspi->State == HAL_QSPI_STATE_BUSY_INDIRECT_TX)
 80134d4:	687b      	ldr	r3, [r7, #4]
 80134d6:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80134da:	b2db      	uxtb	r3, r3
 80134dc:	2b12      	cmp	r3, #18
 80134de:	d120      	bne.n	8013522 <HAL_QSPI_IRQHandler+0x16a>
    {
      if ((hqspi->Instance->CR & QUADSPI_CR_DMAEN) != 0U)
 80134e0:	687b      	ldr	r3, [r7, #4]
 80134e2:	681b      	ldr	r3, [r3, #0]
 80134e4:	681b      	ldr	r3, [r3, #0]
 80134e6:	f003 0304 	and.w	r3, r3, #4
 80134ea:	2b00      	cmp	r3, #0
 80134ec:	d011      	beq.n	8013512 <HAL_QSPI_IRQHandler+0x15a>
      {
        /* Disable using MDMA by clearing DMAEN, note that DMAEN bit is "reserved"
           but no impact on H7 HW and it minimize the cost in the footprint */
        CLEAR_BIT(hqspi->Instance->CR, QUADSPI_CR_DMAEN);
 80134ee:	687b      	ldr	r3, [r7, #4]
 80134f0:	681b      	ldr	r3, [r3, #0]
 80134f2:	681a      	ldr	r2, [r3, #0]
 80134f4:	687b      	ldr	r3, [r7, #4]
 80134f6:	681b      	ldr	r3, [r3, #0]
 80134f8:	f022 0204 	bic.w	r2, r2, #4
 80134fc:	601a      	str	r2, [r3, #0]

        /* Disable the MDMA channel */
        __HAL_MDMA_DISABLE(hqspi->hmdma);
 80134fe:	687b      	ldr	r3, [r7, #4]
 8013500:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8013502:	681b      	ldr	r3, [r3, #0]
 8013504:	68da      	ldr	r2, [r3, #12]
 8013506:	687b      	ldr	r3, [r7, #4]
 8013508:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 801350a:	681b      	ldr	r3, [r3, #0]
 801350c:	f022 0201 	bic.w	r2, r2, #1
 8013510:	60da      	str	r2, [r3, #12]
      }


      /* Change state of QSPI */
      hqspi->State = HAL_QSPI_STATE_READY;
 8013512:	687b      	ldr	r3, [r7, #4]
 8013514:	2201      	movs	r2, #1
 8013516:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      /* TX Complete callback */
#if (USE_HAL_QSPI_REGISTER_CALLBACKS == 1)
      hqspi->TxCpltCallback(hqspi);
#else
      HAL_QSPI_TxCpltCallback(hqspi);
 801351a:	6878      	ldr	r0, [r7, #4]
 801351c:	f000 fb94 	bl	8013c48 <HAL_QSPI_TxCpltCallback>
    if(hqspi->State == HAL_QSPI_STATE_BUSY_INDIRECT_TX)
 8013520:	e0fa      	b.n	8013718 <HAL_QSPI_IRQHandler+0x360>
#endif
    }
    else if(hqspi->State == HAL_QSPI_STATE_BUSY_INDIRECT_RX)
 8013522:	687b      	ldr	r3, [r7, #4]
 8013524:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8013528:	b2db      	uxtb	r3, r3
 801352a:	2b22      	cmp	r3, #34	@ 0x22
 801352c:	d143      	bne.n	80135b6 <HAL_QSPI_IRQHandler+0x1fe>
    {
      if ((hqspi->Instance->CR & QUADSPI_CR_DMAEN) != 0U)
 801352e:	687b      	ldr	r3, [r7, #4]
 8013530:	681b      	ldr	r3, [r3, #0]
 8013532:	681b      	ldr	r3, [r3, #0]
 8013534:	f003 0304 	and.w	r3, r3, #4
 8013538:	2b00      	cmp	r3, #0
 801353a:	d012      	beq.n	8013562 <HAL_QSPI_IRQHandler+0x1aa>
      {
        /* Disable using MDMA by clearing DMAEN, note that DMAEN bit is "reserved"
           but no impact on H7 HW and it minimize the cost in the footprint */
        CLEAR_BIT(hqspi->Instance->CR, QUADSPI_CR_DMAEN);
 801353c:	687b      	ldr	r3, [r7, #4]
 801353e:	681b      	ldr	r3, [r3, #0]
 8013540:	681a      	ldr	r2, [r3, #0]
 8013542:	687b      	ldr	r3, [r7, #4]
 8013544:	681b      	ldr	r3, [r3, #0]
 8013546:	f022 0204 	bic.w	r2, r2, #4
 801354a:	601a      	str	r2, [r3, #0]

        /* Disable the MDMA channel */
        __HAL_MDMA_DISABLE(hqspi->hmdma);
 801354c:	687b      	ldr	r3, [r7, #4]
 801354e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8013550:	681b      	ldr	r3, [r3, #0]
 8013552:	68da      	ldr	r2, [r3, #12]
 8013554:	687b      	ldr	r3, [r7, #4]
 8013556:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8013558:	681b      	ldr	r3, [r3, #0]
 801355a:	f022 0201 	bic.w	r2, r2, #1
 801355e:	60da      	str	r2, [r3, #12]
 8013560:	e021      	b.n	80135a6 <HAL_QSPI_IRQHandler+0x1ee>
      }
      else
      {
        data_reg = &hqspi->Instance->DR;
 8013562:	687b      	ldr	r3, [r7, #4]
 8013564:	681b      	ldr	r3, [r3, #0]
 8013566:	3320      	adds	r3, #32
 8013568:	60fb      	str	r3, [r7, #12]
        while(READ_BIT(hqspi->Instance->SR, QUADSPI_SR_FLEVEL) != 0U)
 801356a:	e013      	b.n	8013594 <HAL_QSPI_IRQHandler+0x1dc>
        {
          if (hqspi->RxXferCount > 0U)
 801356c:	687b      	ldr	r3, [r7, #4]
 801356e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8013570:	2b00      	cmp	r3, #0
 8013572:	d017      	beq.n	80135a4 <HAL_QSPI_IRQHandler+0x1ec>
          {
            /* Read the last data received in the FIFO until it is empty */
            *hqspi->pRxBuffPtr = *((__IO uint8_t *)data_reg);
 8013574:	687b      	ldr	r3, [r7, #4]
 8013576:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8013578:	68fa      	ldr	r2, [r7, #12]
 801357a:	7812      	ldrb	r2, [r2, #0]
 801357c:	b2d2      	uxtb	r2, r2
 801357e:	701a      	strb	r2, [r3, #0]
            hqspi->pRxBuffPtr++;
 8013580:	687b      	ldr	r3, [r7, #4]
 8013582:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8013584:	1c5a      	adds	r2, r3, #1
 8013586:	687b      	ldr	r3, [r7, #4]
 8013588:	631a      	str	r2, [r3, #48]	@ 0x30
            hqspi->RxXferCount--;
 801358a:	687b      	ldr	r3, [r7, #4]
 801358c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 801358e:	1e5a      	subs	r2, r3, #1
 8013590:	687b      	ldr	r3, [r7, #4]
 8013592:	639a      	str	r2, [r3, #56]	@ 0x38
        while(READ_BIT(hqspi->Instance->SR, QUADSPI_SR_FLEVEL) != 0U)
 8013594:	687b      	ldr	r3, [r7, #4]
 8013596:	681b      	ldr	r3, [r3, #0]
 8013598:	689b      	ldr	r3, [r3, #8]
 801359a:	f403 537c 	and.w	r3, r3, #16128	@ 0x3f00
 801359e:	2b00      	cmp	r3, #0
 80135a0:	d1e4      	bne.n	801356c <HAL_QSPI_IRQHandler+0x1b4>
 80135a2:	e000      	b.n	80135a6 <HAL_QSPI_IRQHandler+0x1ee>
          }
          else
          {
            /* All data have been received for the transfer */
            break;
 80135a4:	bf00      	nop
        }
      }


      /* Change state of QSPI */
      hqspi->State = HAL_QSPI_STATE_READY;
 80135a6:	687b      	ldr	r3, [r7, #4]
 80135a8:	2201      	movs	r2, #1
 80135aa:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      /* RX Complete callback */
#if (USE_HAL_QSPI_REGISTER_CALLBACKS == 1)
      hqspi->RxCpltCallback(hqspi);
#else
      HAL_QSPI_RxCpltCallback(hqspi);
 80135ae:	6878      	ldr	r0, [r7, #4]
 80135b0:	f000 fb40 	bl	8013c34 <HAL_QSPI_RxCpltCallback>
    if(hqspi->State == HAL_QSPI_STATE_BUSY_INDIRECT_TX)
 80135b4:	e0b0      	b.n	8013718 <HAL_QSPI_IRQHandler+0x360>
#endif
    }
    else if(hqspi->State == HAL_QSPI_STATE_BUSY)
 80135b6:	687b      	ldr	r3, [r7, #4]
 80135b8:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80135bc:	b2db      	uxtb	r3, r3
 80135be:	2b02      	cmp	r3, #2
 80135c0:	d107      	bne.n	80135d2 <HAL_QSPI_IRQHandler+0x21a>
    {
      /* Change state of QSPI */
      hqspi->State = HAL_QSPI_STATE_READY;
 80135c2:	687b      	ldr	r3, [r7, #4]
 80135c4:	2201      	movs	r2, #1
 80135c6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      /* Command Complete callback */
#if (USE_HAL_QSPI_REGISTER_CALLBACKS == 1)
      hqspi->CmdCpltCallback(hqspi);
#else
      HAL_QSPI_CmdCpltCallback(hqspi);
 80135ca:	6878      	ldr	r0, [r7, #4]
 80135cc:	f000 fb28 	bl	8013c20 <HAL_QSPI_CmdCpltCallback>
    if(hqspi->State == HAL_QSPI_STATE_BUSY_INDIRECT_TX)
 80135d0:	e0a2      	b.n	8013718 <HAL_QSPI_IRQHandler+0x360>
#endif
    }
    else if(hqspi->State == HAL_QSPI_STATE_ABORT)
 80135d2:	687b      	ldr	r3, [r7, #4]
 80135d4:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80135d8:	b2db      	uxtb	r3, r3
 80135da:	2b08      	cmp	r3, #8
 80135dc:	f040 809c 	bne.w	8013718 <HAL_QSPI_IRQHandler+0x360>
    {
      /* Reset functional mode configuration to indirect write mode by default */
      CLEAR_BIT(hqspi->Instance->CCR, QUADSPI_CCR_FMODE);
 80135e0:	687b      	ldr	r3, [r7, #4]
 80135e2:	681b      	ldr	r3, [r3, #0]
 80135e4:	695a      	ldr	r2, [r3, #20]
 80135e6:	687b      	ldr	r3, [r7, #4]
 80135e8:	681b      	ldr	r3, [r3, #0]
 80135ea:	f022 6240 	bic.w	r2, r2, #201326592	@ 0xc000000
 80135ee:	615a      	str	r2, [r3, #20]

      /* Change state of QSPI */
      hqspi->State = HAL_QSPI_STATE_READY;
 80135f0:	687b      	ldr	r3, [r7, #4]
 80135f2:	2201      	movs	r2, #1
 80135f4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      if (hqspi->ErrorCode == HAL_QSPI_ERROR_NONE)
 80135f8:	687b      	ldr	r3, [r7, #4]
 80135fa:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80135fc:	2b00      	cmp	r3, #0
 80135fe:	d103      	bne.n	8013608 <HAL_QSPI_IRQHandler+0x250>

        /* Abort Complete callback */
#if (USE_HAL_QSPI_REGISTER_CALLBACKS == 1)
        hqspi->AbortCpltCallback(hqspi);
#else
        HAL_QSPI_AbortCpltCallback(hqspi);
 8013600:	6878      	ldr	r0, [r7, #4]
 8013602:	f000 fb03 	bl	8013c0c <HAL_QSPI_AbortCpltCallback>
    if(hqspi->State == HAL_QSPI_STATE_BUSY_INDIRECT_TX)
 8013606:	e087      	b.n	8013718 <HAL_QSPI_IRQHandler+0x360>

        /* Error callback */
#if (USE_HAL_QSPI_REGISTER_CALLBACKS == 1)
        hqspi->ErrorCallback(hqspi);
#else
        HAL_QSPI_ErrorCallback(hqspi);
 8013608:	6878      	ldr	r0, [r7, #4]
 801360a:	f000 faf5 	bl	8013bf8 <HAL_QSPI_ErrorCallback>
    if(hqspi->State == HAL_QSPI_STATE_BUSY_INDIRECT_TX)
 801360e:	e083      	b.n	8013718 <HAL_QSPI_IRQHandler+0x360>
     /* Nothing to do */
    }
  }

  /* QSPI Status Match interrupt occurred ------------------------------------*/
  else if(((flag & QSPI_FLAG_SM) != 0U) && ((itsource & QSPI_IT_SM) != 0U))
 8013610:	697b      	ldr	r3, [r7, #20]
 8013612:	f003 0308 	and.w	r3, r3, #8
 8013616:	2b00      	cmp	r3, #0
 8013618:	d01f      	beq.n	801365a <HAL_QSPI_IRQHandler+0x2a2>
 801361a:	693b      	ldr	r3, [r7, #16]
 801361c:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8013620:	2b00      	cmp	r3, #0
 8013622:	d01a      	beq.n	801365a <HAL_QSPI_IRQHandler+0x2a2>
  {
    /* Clear interrupt */
    WRITE_REG(hqspi->Instance->FCR, QSPI_FLAG_SM);
 8013624:	687b      	ldr	r3, [r7, #4]
 8013626:	681b      	ldr	r3, [r3, #0]
 8013628:	2208      	movs	r2, #8
 801362a:	60da      	str	r2, [r3, #12]

    /* Check if the automatic poll mode stop is activated */
    if(READ_BIT(hqspi->Instance->CR, QUADSPI_CR_APMS) != 0U)
 801362c:	687b      	ldr	r3, [r7, #4]
 801362e:	681b      	ldr	r3, [r3, #0]
 8013630:	681b      	ldr	r3, [r3, #0]
 8013632:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8013636:	2b00      	cmp	r3, #0
 8013638:	d00b      	beq.n	8013652 <HAL_QSPI_IRQHandler+0x29a>
    {
      /* Disable the QSPI Transfer Error and Status Match Interrupts */
      __HAL_QSPI_DISABLE_IT(hqspi, (QSPI_IT_SM | QSPI_IT_TE));
 801363a:	687b      	ldr	r3, [r7, #4]
 801363c:	681b      	ldr	r3, [r3, #0]
 801363e:	681a      	ldr	r2, [r3, #0]
 8013640:	687b      	ldr	r3, [r7, #4]
 8013642:	681b      	ldr	r3, [r3, #0]
 8013644:	f422 2210 	bic.w	r2, r2, #589824	@ 0x90000
 8013648:	601a      	str	r2, [r3, #0]

      /* Change state of QSPI */
      hqspi->State = HAL_QSPI_STATE_READY;
 801364a:	687b      	ldr	r3, [r7, #4]
 801364c:	2201      	movs	r2, #1
 801364e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Status match callback */
#if (USE_HAL_QSPI_REGISTER_CALLBACKS == 1)
    hqspi->StatusMatchCallback(hqspi);
#else
    HAL_QSPI_StatusMatchCallback(hqspi);
 8013652:	6878      	ldr	r0, [r7, #4]
 8013654:	f000 fb0c 	bl	8013c70 <HAL_QSPI_StatusMatchCallback>
 8013658:	e061      	b.n	801371e <HAL_QSPI_IRQHandler+0x366>
#endif
  }

  /* QSPI Transfer Error interrupt occurred ----------------------------------*/
  else if(((flag & QSPI_FLAG_TE) != 0U) && ((itsource & QSPI_IT_TE) != 0U))
 801365a:	697b      	ldr	r3, [r7, #20]
 801365c:	f003 0301 	and.w	r3, r3, #1
 8013660:	2b00      	cmp	r3, #0
 8013662:	d047      	beq.n	80136f4 <HAL_QSPI_IRQHandler+0x33c>
 8013664:	693b      	ldr	r3, [r7, #16]
 8013666:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 801366a:	2b00      	cmp	r3, #0
 801366c:	d042      	beq.n	80136f4 <HAL_QSPI_IRQHandler+0x33c>
  {
    /* Clear interrupt */
    WRITE_REG(hqspi->Instance->FCR, QSPI_FLAG_TE);
 801366e:	687b      	ldr	r3, [r7, #4]
 8013670:	681b      	ldr	r3, [r3, #0]
 8013672:	2201      	movs	r2, #1
 8013674:	60da      	str	r2, [r3, #12]

    /* Disable all the QSPI Interrupts */
    __HAL_QSPI_DISABLE_IT(hqspi, QSPI_IT_SM | QSPI_IT_TC | QSPI_IT_TE | QSPI_IT_FT);
 8013676:	687b      	ldr	r3, [r7, #4]
 8013678:	681b      	ldr	r3, [r3, #0]
 801367a:	681a      	ldr	r2, [r3, #0]
 801367c:	687b      	ldr	r3, [r7, #4]
 801367e:	681b      	ldr	r3, [r3, #0]
 8013680:	f422 2270 	bic.w	r2, r2, #983040	@ 0xf0000
 8013684:	601a      	str	r2, [r3, #0]

    /* Set error code */
    hqspi->ErrorCode |= HAL_QSPI_ERROR_TRANSFER;
 8013686:	687b      	ldr	r3, [r7, #4]
 8013688:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 801368a:	f043 0202 	orr.w	r2, r3, #2
 801368e:	687b      	ldr	r3, [r7, #4]
 8013690:	645a      	str	r2, [r3, #68]	@ 0x44

    if ((hqspi->Instance->CR & QUADSPI_CR_DMAEN) != 0U)
 8013692:	687b      	ldr	r3, [r7, #4]
 8013694:	681b      	ldr	r3, [r3, #0]
 8013696:	681b      	ldr	r3, [r3, #0]
 8013698:	f003 0304 	and.w	r3, r3, #4
 801369c:	2b00      	cmp	r3, #0
 801369e:	d021      	beq.n	80136e4 <HAL_QSPI_IRQHandler+0x32c>
    {
      /* Disable using MDMA by clearing DMAEN, note that DMAEN bit is "reserved"
         but no impact on H7 HW and it minimize the cost in the footprint */
      CLEAR_BIT(hqspi->Instance->CR, QUADSPI_CR_DMAEN);
 80136a0:	687b      	ldr	r3, [r7, #4]
 80136a2:	681b      	ldr	r3, [r3, #0]
 80136a4:	681a      	ldr	r2, [r3, #0]
 80136a6:	687b      	ldr	r3, [r7, #4]
 80136a8:	681b      	ldr	r3, [r3, #0]
 80136aa:	f022 0204 	bic.w	r2, r2, #4
 80136ae:	601a      	str	r2, [r3, #0]

      /* Disable the MDMA channel */
      hqspi->hmdma->XferAbortCallback = QSPI_DMAAbortCplt;
 80136b0:	687b      	ldr	r3, [r7, #4]
 80136b2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80136b4:	4a1c      	ldr	r2, [pc, #112]	@ (8013728 <HAL_QSPI_IRQHandler+0x370>)
 80136b6:	659a      	str	r2, [r3, #88]	@ 0x58
      if (HAL_MDMA_Abort_IT(hqspi->hmdma) != HAL_OK)
 80136b8:	687b      	ldr	r3, [r7, #4]
 80136ba:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80136bc:	4618      	mov	r0, r3
 80136be:	f7ff fced 	bl	801309c <HAL_MDMA_Abort_IT>
 80136c2:	4603      	mov	r3, r0
 80136c4:	2b00      	cmp	r3, #0
 80136c6:	d029      	beq.n	801371c <HAL_QSPI_IRQHandler+0x364>
      {
        /* Set error code to DMA */
        hqspi->ErrorCode |= HAL_QSPI_ERROR_DMA;
 80136c8:	687b      	ldr	r3, [r7, #4]
 80136ca:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80136cc:	f043 0204 	orr.w	r2, r3, #4
 80136d0:	687b      	ldr	r3, [r7, #4]
 80136d2:	645a      	str	r2, [r3, #68]	@ 0x44

        /* Change state of QSPI */
        hqspi->State = HAL_QSPI_STATE_READY;
 80136d4:	687b      	ldr	r3, [r7, #4]
 80136d6:	2201      	movs	r2, #1
 80136d8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        /* Error callback */
#if (USE_HAL_QSPI_REGISTER_CALLBACKS == 1)
        hqspi->ErrorCallback(hqspi);
#else
        HAL_QSPI_ErrorCallback(hqspi);
 80136dc:	6878      	ldr	r0, [r7, #4]
 80136de:	f000 fa8b 	bl	8013bf8 <HAL_QSPI_ErrorCallback>
    if ((hqspi->Instance->CR & QUADSPI_CR_DMAEN) != 0U)
 80136e2:	e01b      	b.n	801371c <HAL_QSPI_IRQHandler+0x364>
      }
    }
    else
    {
      /* Change state of QSPI */
      hqspi->State = HAL_QSPI_STATE_READY;
 80136e4:	687b      	ldr	r3, [r7, #4]
 80136e6:	2201      	movs	r2, #1
 80136e8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      /* Error callback */
#if (USE_HAL_QSPI_REGISTER_CALLBACKS == 1)
      hqspi->ErrorCallback(hqspi);
#else
      HAL_QSPI_ErrorCallback(hqspi);
 80136ec:	6878      	ldr	r0, [r7, #4]
 80136ee:	f000 fa83 	bl	8013bf8 <HAL_QSPI_ErrorCallback>
    if ((hqspi->Instance->CR & QUADSPI_CR_DMAEN) != 0U)
 80136f2:	e013      	b.n	801371c <HAL_QSPI_IRQHandler+0x364>
#endif
    }
  }

  /* QSPI Timeout interrupt occurred -----------------------------------------*/
  else if(((flag & QSPI_FLAG_TO) != 0U) && ((itsource & QSPI_IT_TO) != 0U))
 80136f4:	697b      	ldr	r3, [r7, #20]
 80136f6:	f003 0310 	and.w	r3, r3, #16
 80136fa:	2b00      	cmp	r3, #0
 80136fc:	d00f      	beq.n	801371e <HAL_QSPI_IRQHandler+0x366>
 80136fe:	693b      	ldr	r3, [r7, #16]
 8013700:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8013704:	2b00      	cmp	r3, #0
 8013706:	d00a      	beq.n	801371e <HAL_QSPI_IRQHandler+0x366>
  {
    /* Clear interrupt */
    WRITE_REG(hqspi->Instance->FCR, QSPI_FLAG_TO);
 8013708:	687b      	ldr	r3, [r7, #4]
 801370a:	681b      	ldr	r3, [r3, #0]
 801370c:	2210      	movs	r2, #16
 801370e:	60da      	str	r2, [r3, #12]

    /* Timeout callback */
#if (USE_HAL_QSPI_REGISTER_CALLBACKS == 1)
    hqspi->TimeOutCallback(hqspi);
#else
    HAL_QSPI_TimeOutCallback(hqspi);
 8013710:	6878      	ldr	r0, [r7, #4]
 8013712:	f000 fab7 	bl	8013c84 <HAL_QSPI_TimeOutCallback>

   else
  {
   /* Nothing to do */
  }
}
 8013716:	e002      	b.n	801371e <HAL_QSPI_IRQHandler+0x366>
    if(hqspi->State == HAL_QSPI_STATE_BUSY_INDIRECT_TX)
 8013718:	bf00      	nop
 801371a:	e000      	b.n	801371e <HAL_QSPI_IRQHandler+0x366>
    if ((hqspi->Instance->CR & QUADSPI_CR_DMAEN) != 0U)
 801371c:	bf00      	nop
}
 801371e:	bf00      	nop
 8013720:	3718      	adds	r7, #24
 8013722:	46bd      	mov	sp, r7
 8013724:	bd80      	pop	{r7, pc}
 8013726:	bf00      	nop
 8013728:	08013cb5 	.word	0x08013cb5

0801372c <HAL_QSPI_Command>:
  * @param Timeout Timeout duration
  * @note   This function is used only in Indirect Read or Write Modes
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_QSPI_Command(QSPI_HandleTypeDef *hqspi, QSPI_CommandTypeDef *cmd, uint32_t Timeout)
{
 801372c:	b580      	push	{r7, lr}
 801372e:	b088      	sub	sp, #32
 8013730:	af02      	add	r7, sp, #8
 8013732:	60f8      	str	r0, [r7, #12]
 8013734:	60b9      	str	r1, [r7, #8]
 8013736:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status;
  uint32_t tickstart = HAL_GetTick();
 8013738:	f7fd fae2 	bl	8010d00 <HAL_GetTick>
 801373c:	6138      	str	r0, [r7, #16]
  assert_param(IS_QSPI_DDR_MODE(cmd->DdrMode));
  assert_param(IS_QSPI_DDR_HHC(cmd->DdrHoldHalfCycle));
  assert_param(IS_QSPI_SIOO_MODE(cmd->SIOOMode));

  /* Process locked */
  __HAL_LOCK(hqspi);
 801373e:	68fb      	ldr	r3, [r7, #12]
 8013740:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8013744:	b2db      	uxtb	r3, r3
 8013746:	2b01      	cmp	r3, #1
 8013748:	d101      	bne.n	801374e <HAL_QSPI_Command+0x22>
 801374a:	2302      	movs	r3, #2
 801374c:	e048      	b.n	80137e0 <HAL_QSPI_Command+0xb4>
 801374e:	68fb      	ldr	r3, [r7, #12]
 8013750:	2201      	movs	r2, #1
 8013752:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  if(hqspi->State == HAL_QSPI_STATE_READY)
 8013756:	68fb      	ldr	r3, [r7, #12]
 8013758:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 801375c:	b2db      	uxtb	r3, r3
 801375e:	2b01      	cmp	r3, #1
 8013760:	d137      	bne.n	80137d2 <HAL_QSPI_Command+0xa6>
  {
    hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;
 8013762:	68fb      	ldr	r3, [r7, #12]
 8013764:	2200      	movs	r2, #0
 8013766:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Update QSPI state */
    hqspi->State = HAL_QSPI_STATE_BUSY;
 8013768:	68fb      	ldr	r3, [r7, #12]
 801376a:	2202      	movs	r2, #2
 801376c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Wait till BUSY flag reset */
    status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_BUSY, RESET, tickstart, Timeout);
 8013770:	687b      	ldr	r3, [r7, #4]
 8013772:	9300      	str	r3, [sp, #0]
 8013774:	693b      	ldr	r3, [r7, #16]
 8013776:	2200      	movs	r2, #0
 8013778:	2120      	movs	r1, #32
 801377a:	68f8      	ldr	r0, [r7, #12]
 801377c:	f000 facd 	bl	8013d1a <QSPI_WaitFlagStateUntilTimeout>
 8013780:	4603      	mov	r3, r0
 8013782:	75fb      	strb	r3, [r7, #23]

    if (status == HAL_OK)
 8013784:	7dfb      	ldrb	r3, [r7, #23]
 8013786:	2b00      	cmp	r3, #0
 8013788:	d125      	bne.n	80137d6 <HAL_QSPI_Command+0xaa>
    {
      /* Call the configuration function */
      QSPI_Config(hqspi, cmd, QSPI_FUNCTIONAL_MODE_INDIRECT_WRITE);
 801378a:	2200      	movs	r2, #0
 801378c:	68b9      	ldr	r1, [r7, #8]
 801378e:	68f8      	ldr	r0, [r7, #12]
 8013790:	f000 fafa 	bl	8013d88 <QSPI_Config>

      if (cmd->DataMode == QSPI_DATA_NONE)
 8013794:	68bb      	ldr	r3, [r7, #8]
 8013796:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8013798:	2b00      	cmp	r3, #0
 801379a:	d115      	bne.n	80137c8 <HAL_QSPI_Command+0x9c>
      {
        /* When there is no data phase, the transfer start as soon as the configuration is done
        so wait until TC flag is set to go back in idle state */
        status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_TC, SET, tickstart, Timeout);
 801379c:	687b      	ldr	r3, [r7, #4]
 801379e:	9300      	str	r3, [sp, #0]
 80137a0:	693b      	ldr	r3, [r7, #16]
 80137a2:	2201      	movs	r2, #1
 80137a4:	2102      	movs	r1, #2
 80137a6:	68f8      	ldr	r0, [r7, #12]
 80137a8:	f000 fab7 	bl	8013d1a <QSPI_WaitFlagStateUntilTimeout>
 80137ac:	4603      	mov	r3, r0
 80137ae:	75fb      	strb	r3, [r7, #23]

        if (status == HAL_OK)
 80137b0:	7dfb      	ldrb	r3, [r7, #23]
 80137b2:	2b00      	cmp	r3, #0
 80137b4:	d10f      	bne.n	80137d6 <HAL_QSPI_Command+0xaa>
        {
          __HAL_QSPI_CLEAR_FLAG(hqspi, QSPI_FLAG_TC);
 80137b6:	68fb      	ldr	r3, [r7, #12]
 80137b8:	681b      	ldr	r3, [r3, #0]
 80137ba:	2202      	movs	r2, #2
 80137bc:	60da      	str	r2, [r3, #12]

          /* Update QSPI state */
          hqspi->State = HAL_QSPI_STATE_READY;
 80137be:	68fb      	ldr	r3, [r7, #12]
 80137c0:	2201      	movs	r2, #1
 80137c2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 80137c6:	e006      	b.n	80137d6 <HAL_QSPI_Command+0xaa>
        }
      }
      else
      {
        /* Update QSPI state */
        hqspi->State = HAL_QSPI_STATE_READY;
 80137c8:	68fb      	ldr	r3, [r7, #12]
 80137ca:	2201      	movs	r2, #1
 80137cc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 80137d0:	e001      	b.n	80137d6 <HAL_QSPI_Command+0xaa>
      }
    }
  }
  else
  {
    status = HAL_BUSY;
 80137d2:	2302      	movs	r3, #2
 80137d4:	75fb      	strb	r3, [r7, #23]
  }

  /* Process unlocked */
  __HAL_UNLOCK(hqspi);
 80137d6:	68fb      	ldr	r3, [r7, #12]
 80137d8:	2200      	movs	r2, #0
 80137da:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  /* Return function status */
  return status;
 80137de:	7dfb      	ldrb	r3, [r7, #23]
}
 80137e0:	4618      	mov	r0, r3
 80137e2:	3718      	adds	r7, #24
 80137e4:	46bd      	mov	sp, r7
 80137e6:	bd80      	pop	{r7, pc}

080137e8 <HAL_QSPI_Transmit>:
  * @param Timeout Timeout duration
  * @note   This function is used only in Indirect Write Mode
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_QSPI_Transmit(QSPI_HandleTypeDef *hqspi, uint8_t *pData, uint32_t Timeout)
{
 80137e8:	b580      	push	{r7, lr}
 80137ea:	b08a      	sub	sp, #40	@ 0x28
 80137ec:	af02      	add	r7, sp, #8
 80137ee:	60f8      	str	r0, [r7, #12]
 80137f0:	60b9      	str	r1, [r7, #8]
 80137f2:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80137f4:	2300      	movs	r3, #0
 80137f6:	77fb      	strb	r3, [r7, #31]
  uint32_t tickstart = HAL_GetTick();
 80137f8:	f7fd fa82 	bl	8010d00 <HAL_GetTick>
 80137fc:	61b8      	str	r0, [r7, #24]
  __IO uint32_t *data_reg = &hqspi->Instance->DR;
 80137fe:	68fb      	ldr	r3, [r7, #12]
 8013800:	681b      	ldr	r3, [r3, #0]
 8013802:	3320      	adds	r3, #32
 8013804:	617b      	str	r3, [r7, #20]

  /* Process locked */
  __HAL_LOCK(hqspi);
 8013806:	68fb      	ldr	r3, [r7, #12]
 8013808:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 801380c:	b2db      	uxtb	r3, r3
 801380e:	2b01      	cmp	r3, #1
 8013810:	d101      	bne.n	8013816 <HAL_QSPI_Transmit+0x2e>
 8013812:	2302      	movs	r3, #2
 8013814:	e076      	b.n	8013904 <HAL_QSPI_Transmit+0x11c>
 8013816:	68fb      	ldr	r3, [r7, #12]
 8013818:	2201      	movs	r2, #1
 801381a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  if(hqspi->State == HAL_QSPI_STATE_READY)
 801381e:	68fb      	ldr	r3, [r7, #12]
 8013820:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8013824:	b2db      	uxtb	r3, r3
 8013826:	2b01      	cmp	r3, #1
 8013828:	d165      	bne.n	80138f6 <HAL_QSPI_Transmit+0x10e>
  {
    hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;
 801382a:	68fb      	ldr	r3, [r7, #12]
 801382c:	2200      	movs	r2, #0
 801382e:	645a      	str	r2, [r3, #68]	@ 0x44

    if(pData != NULL )
 8013830:	68bb      	ldr	r3, [r7, #8]
 8013832:	2b00      	cmp	r3, #0
 8013834:	d056      	beq.n	80138e4 <HAL_QSPI_Transmit+0xfc>
    {
      /* Update state */
      hqspi->State = HAL_QSPI_STATE_BUSY_INDIRECT_TX;
 8013836:	68fb      	ldr	r3, [r7, #12]
 8013838:	2212      	movs	r2, #18
 801383a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      /* Configure counters and size of the handle */
      hqspi->TxXferCount = READ_REG(hqspi->Instance->DLR) + 1U;
 801383e:	68fb      	ldr	r3, [r7, #12]
 8013840:	681b      	ldr	r3, [r3, #0]
 8013842:	691b      	ldr	r3, [r3, #16]
 8013844:	1c5a      	adds	r2, r3, #1
 8013846:	68fb      	ldr	r3, [r7, #12]
 8013848:	62da      	str	r2, [r3, #44]	@ 0x2c
      hqspi->TxXferSize = READ_REG(hqspi->Instance->DLR) + 1U;
 801384a:	68fb      	ldr	r3, [r7, #12]
 801384c:	681b      	ldr	r3, [r3, #0]
 801384e:	691b      	ldr	r3, [r3, #16]
 8013850:	1c5a      	adds	r2, r3, #1
 8013852:	68fb      	ldr	r3, [r7, #12]
 8013854:	629a      	str	r2, [r3, #40]	@ 0x28
      hqspi->pTxBuffPtr = pData;
 8013856:	68fb      	ldr	r3, [r7, #12]
 8013858:	68ba      	ldr	r2, [r7, #8]
 801385a:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Configure QSPI: CCR register with functional as indirect write */
      MODIFY_REG(hqspi->Instance->CCR, QUADSPI_CCR_FMODE, QSPI_FUNCTIONAL_MODE_INDIRECT_WRITE);
 801385c:	68fb      	ldr	r3, [r7, #12]
 801385e:	681b      	ldr	r3, [r3, #0]
 8013860:	695a      	ldr	r2, [r3, #20]
 8013862:	68fb      	ldr	r3, [r7, #12]
 8013864:	681b      	ldr	r3, [r3, #0]
 8013866:	f022 6240 	bic.w	r2, r2, #201326592	@ 0xc000000
 801386a:	615a      	str	r2, [r3, #20]

      while(hqspi->TxXferCount > 0U)
 801386c:	e01b      	b.n	80138a6 <HAL_QSPI_Transmit+0xbe>
      {
        /* Wait until FT flag is set to send data */
        status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_FT, SET, tickstart, Timeout);
 801386e:	687b      	ldr	r3, [r7, #4]
 8013870:	9300      	str	r3, [sp, #0]
 8013872:	69bb      	ldr	r3, [r7, #24]
 8013874:	2201      	movs	r2, #1
 8013876:	2104      	movs	r1, #4
 8013878:	68f8      	ldr	r0, [r7, #12]
 801387a:	f000 fa4e 	bl	8013d1a <QSPI_WaitFlagStateUntilTimeout>
 801387e:	4603      	mov	r3, r0
 8013880:	77fb      	strb	r3, [r7, #31]

        if (status != HAL_OK)
 8013882:	7ffb      	ldrb	r3, [r7, #31]
 8013884:	2b00      	cmp	r3, #0
 8013886:	d113      	bne.n	80138b0 <HAL_QSPI_Transmit+0xc8>
        {
          break;
        }

        *((__IO uint8_t *)data_reg) = *hqspi->pTxBuffPtr;
 8013888:	68fb      	ldr	r3, [r7, #12]
 801388a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801388c:	781a      	ldrb	r2, [r3, #0]
 801388e:	697b      	ldr	r3, [r7, #20]
 8013890:	701a      	strb	r2, [r3, #0]
        hqspi->pTxBuffPtr++;
 8013892:	68fb      	ldr	r3, [r7, #12]
 8013894:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8013896:	1c5a      	adds	r2, r3, #1
 8013898:	68fb      	ldr	r3, [r7, #12]
 801389a:	625a      	str	r2, [r3, #36]	@ 0x24
        hqspi->TxXferCount--;
 801389c:	68fb      	ldr	r3, [r7, #12]
 801389e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80138a0:	1e5a      	subs	r2, r3, #1
 80138a2:	68fb      	ldr	r3, [r7, #12]
 80138a4:	62da      	str	r2, [r3, #44]	@ 0x2c
      while(hqspi->TxXferCount > 0U)
 80138a6:	68fb      	ldr	r3, [r7, #12]
 80138a8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80138aa:	2b00      	cmp	r3, #0
 80138ac:	d1df      	bne.n	801386e <HAL_QSPI_Transmit+0x86>
 80138ae:	e000      	b.n	80138b2 <HAL_QSPI_Transmit+0xca>
          break;
 80138b0:	bf00      	nop
      }

      if (status == HAL_OK)
 80138b2:	7ffb      	ldrb	r3, [r7, #31]
 80138b4:	2b00      	cmp	r3, #0
 80138b6:	d110      	bne.n	80138da <HAL_QSPI_Transmit+0xf2>
      {
        /* Wait until TC flag is set to go back in idle state */
        status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_TC, SET, tickstart, Timeout);
 80138b8:	687b      	ldr	r3, [r7, #4]
 80138ba:	9300      	str	r3, [sp, #0]
 80138bc:	69bb      	ldr	r3, [r7, #24]
 80138be:	2201      	movs	r2, #1
 80138c0:	2102      	movs	r1, #2
 80138c2:	68f8      	ldr	r0, [r7, #12]
 80138c4:	f000 fa29 	bl	8013d1a <QSPI_WaitFlagStateUntilTimeout>
 80138c8:	4603      	mov	r3, r0
 80138ca:	77fb      	strb	r3, [r7, #31]

        if (status == HAL_OK)
 80138cc:	7ffb      	ldrb	r3, [r7, #31]
 80138ce:	2b00      	cmp	r3, #0
 80138d0:	d103      	bne.n	80138da <HAL_QSPI_Transmit+0xf2>
        {
          /* Clear Transfer Complete bit */
          __HAL_QSPI_CLEAR_FLAG(hqspi, QSPI_FLAG_TC);
 80138d2:	68fb      	ldr	r3, [r7, #12]
 80138d4:	681b      	ldr	r3, [r3, #0]
 80138d6:	2202      	movs	r2, #2
 80138d8:	60da      	str	r2, [r3, #12]

        }
      }

      /* Update QSPI state */
      hqspi->State = HAL_QSPI_STATE_READY;
 80138da:	68fb      	ldr	r3, [r7, #12]
 80138dc:	2201      	movs	r2, #1
 80138de:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 80138e2:	e00a      	b.n	80138fa <HAL_QSPI_Transmit+0x112>
    }
    else
    {
      hqspi->ErrorCode |= HAL_QSPI_ERROR_INVALID_PARAM;
 80138e4:	68fb      	ldr	r3, [r7, #12]
 80138e6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80138e8:	f043 0208 	orr.w	r2, r3, #8
 80138ec:	68fb      	ldr	r3, [r7, #12]
 80138ee:	645a      	str	r2, [r3, #68]	@ 0x44
      status = HAL_ERROR;
 80138f0:	2301      	movs	r3, #1
 80138f2:	77fb      	strb	r3, [r7, #31]
 80138f4:	e001      	b.n	80138fa <HAL_QSPI_Transmit+0x112>
    }
  }
  else
  {
    status = HAL_BUSY;
 80138f6:	2302      	movs	r3, #2
 80138f8:	77fb      	strb	r3, [r7, #31]
  }

  /* Process unlocked */
  __HAL_UNLOCK(hqspi);
 80138fa:	68fb      	ldr	r3, [r7, #12]
 80138fc:	2200      	movs	r2, #0
 80138fe:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  return status;
 8013902:	7ffb      	ldrb	r3, [r7, #31]
}
 8013904:	4618      	mov	r0, r3
 8013906:	3720      	adds	r7, #32
 8013908:	46bd      	mov	sp, r7
 801390a:	bd80      	pop	{r7, pc}

0801390c <HAL_QSPI_Receive>:
  * @param Timeout Timeout duration
  * @note   This function is used only in Indirect Read Mode
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_QSPI_Receive(QSPI_HandleTypeDef *hqspi, uint8_t *pData, uint32_t Timeout)
{
 801390c:	b580      	push	{r7, lr}
 801390e:	b08a      	sub	sp, #40	@ 0x28
 8013910:	af02      	add	r7, sp, #8
 8013912:	60f8      	str	r0, [r7, #12]
 8013914:	60b9      	str	r1, [r7, #8]
 8013916:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8013918:	2300      	movs	r3, #0
 801391a:	77fb      	strb	r3, [r7, #31]
  uint32_t tickstart = HAL_GetTick();
 801391c:	f7fd f9f0 	bl	8010d00 <HAL_GetTick>
 8013920:	61b8      	str	r0, [r7, #24]
  uint32_t addr_reg = READ_REG(hqspi->Instance->AR);
 8013922:	68fb      	ldr	r3, [r7, #12]
 8013924:	681b      	ldr	r3, [r3, #0]
 8013926:	699b      	ldr	r3, [r3, #24]
 8013928:	617b      	str	r3, [r7, #20]
  __IO uint32_t *data_reg = &hqspi->Instance->DR;
 801392a:	68fb      	ldr	r3, [r7, #12]
 801392c:	681b      	ldr	r3, [r3, #0]
 801392e:	3320      	adds	r3, #32
 8013930:	613b      	str	r3, [r7, #16]

  /* Process locked */
  __HAL_LOCK(hqspi);
 8013932:	68fb      	ldr	r3, [r7, #12]
 8013934:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8013938:	b2db      	uxtb	r3, r3
 801393a:	2b01      	cmp	r3, #1
 801393c:	d101      	bne.n	8013942 <HAL_QSPI_Receive+0x36>
 801393e:	2302      	movs	r3, #2
 8013940:	e07d      	b.n	8013a3e <HAL_QSPI_Receive+0x132>
 8013942:	68fb      	ldr	r3, [r7, #12]
 8013944:	2201      	movs	r2, #1
 8013946:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  if(hqspi->State == HAL_QSPI_STATE_READY)
 801394a:	68fb      	ldr	r3, [r7, #12]
 801394c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8013950:	b2db      	uxtb	r3, r3
 8013952:	2b01      	cmp	r3, #1
 8013954:	d16c      	bne.n	8013a30 <HAL_QSPI_Receive+0x124>
  {
    hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;
 8013956:	68fb      	ldr	r3, [r7, #12]
 8013958:	2200      	movs	r2, #0
 801395a:	645a      	str	r2, [r3, #68]	@ 0x44

    if(pData != NULL )
 801395c:	68bb      	ldr	r3, [r7, #8]
 801395e:	2b00      	cmp	r3, #0
 8013960:	d05d      	beq.n	8013a1e <HAL_QSPI_Receive+0x112>
    {
      /* Update state */
      hqspi->State = HAL_QSPI_STATE_BUSY_INDIRECT_RX;
 8013962:	68fb      	ldr	r3, [r7, #12]
 8013964:	2222      	movs	r2, #34	@ 0x22
 8013966:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      /* Configure counters and size of the handle */
      hqspi->RxXferCount = READ_REG(hqspi->Instance->DLR) + 1U;
 801396a:	68fb      	ldr	r3, [r7, #12]
 801396c:	681b      	ldr	r3, [r3, #0]
 801396e:	691b      	ldr	r3, [r3, #16]
 8013970:	1c5a      	adds	r2, r3, #1
 8013972:	68fb      	ldr	r3, [r7, #12]
 8013974:	639a      	str	r2, [r3, #56]	@ 0x38
      hqspi->RxXferSize = READ_REG(hqspi->Instance->DLR) + 1U;
 8013976:	68fb      	ldr	r3, [r7, #12]
 8013978:	681b      	ldr	r3, [r3, #0]
 801397a:	691b      	ldr	r3, [r3, #16]
 801397c:	1c5a      	adds	r2, r3, #1
 801397e:	68fb      	ldr	r3, [r7, #12]
 8013980:	635a      	str	r2, [r3, #52]	@ 0x34
      hqspi->pRxBuffPtr = pData;
 8013982:	68fb      	ldr	r3, [r7, #12]
 8013984:	68ba      	ldr	r2, [r7, #8]
 8013986:	631a      	str	r2, [r3, #48]	@ 0x30

      /* Configure QSPI: CCR register with functional as indirect read */
      MODIFY_REG(hqspi->Instance->CCR, QUADSPI_CCR_FMODE, QSPI_FUNCTIONAL_MODE_INDIRECT_READ);
 8013988:	68fb      	ldr	r3, [r7, #12]
 801398a:	681b      	ldr	r3, [r3, #0]
 801398c:	695b      	ldr	r3, [r3, #20]
 801398e:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8013992:	68fb      	ldr	r3, [r7, #12]
 8013994:	681b      	ldr	r3, [r3, #0]
 8013996:	f042 6280 	orr.w	r2, r2, #67108864	@ 0x4000000
 801399a:	615a      	str	r2, [r3, #20]

      /* Start the transfer by re-writing the address in AR register */
      WRITE_REG(hqspi->Instance->AR, addr_reg);
 801399c:	68fb      	ldr	r3, [r7, #12]
 801399e:	681b      	ldr	r3, [r3, #0]
 80139a0:	697a      	ldr	r2, [r7, #20]
 80139a2:	619a      	str	r2, [r3, #24]

      while(hqspi->RxXferCount > 0U)
 80139a4:	e01c      	b.n	80139e0 <HAL_QSPI_Receive+0xd4>
      {
        /* Wait until FT or TC flag is set to read received data */
        status = QSPI_WaitFlagStateUntilTimeout(hqspi, (QSPI_FLAG_FT | QSPI_FLAG_TC), SET, tickstart, Timeout);
 80139a6:	687b      	ldr	r3, [r7, #4]
 80139a8:	9300      	str	r3, [sp, #0]
 80139aa:	69bb      	ldr	r3, [r7, #24]
 80139ac:	2201      	movs	r2, #1
 80139ae:	2106      	movs	r1, #6
 80139b0:	68f8      	ldr	r0, [r7, #12]
 80139b2:	f000 f9b2 	bl	8013d1a <QSPI_WaitFlagStateUntilTimeout>
 80139b6:	4603      	mov	r3, r0
 80139b8:	77fb      	strb	r3, [r7, #31]

        if  (status != HAL_OK)
 80139ba:	7ffb      	ldrb	r3, [r7, #31]
 80139bc:	2b00      	cmp	r3, #0
 80139be:	d114      	bne.n	80139ea <HAL_QSPI_Receive+0xde>
        {
          break;
        }

        *hqspi->pRxBuffPtr = *((__IO uint8_t *)data_reg);
 80139c0:	68fb      	ldr	r3, [r7, #12]
 80139c2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80139c4:	693a      	ldr	r2, [r7, #16]
 80139c6:	7812      	ldrb	r2, [r2, #0]
 80139c8:	b2d2      	uxtb	r2, r2
 80139ca:	701a      	strb	r2, [r3, #0]
        hqspi->pRxBuffPtr++;
 80139cc:	68fb      	ldr	r3, [r7, #12]
 80139ce:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80139d0:	1c5a      	adds	r2, r3, #1
 80139d2:	68fb      	ldr	r3, [r7, #12]
 80139d4:	631a      	str	r2, [r3, #48]	@ 0x30
        hqspi->RxXferCount--;
 80139d6:	68fb      	ldr	r3, [r7, #12]
 80139d8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80139da:	1e5a      	subs	r2, r3, #1
 80139dc:	68fb      	ldr	r3, [r7, #12]
 80139de:	639a      	str	r2, [r3, #56]	@ 0x38
      while(hqspi->RxXferCount > 0U)
 80139e0:	68fb      	ldr	r3, [r7, #12]
 80139e2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80139e4:	2b00      	cmp	r3, #0
 80139e6:	d1de      	bne.n	80139a6 <HAL_QSPI_Receive+0x9a>
 80139e8:	e000      	b.n	80139ec <HAL_QSPI_Receive+0xe0>
          break;
 80139ea:	bf00      	nop
      }

      if (status == HAL_OK)
 80139ec:	7ffb      	ldrb	r3, [r7, #31]
 80139ee:	2b00      	cmp	r3, #0
 80139f0:	d110      	bne.n	8013a14 <HAL_QSPI_Receive+0x108>
      {
        /* Wait until TC flag is set to go back in idle state */
        status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_TC, SET, tickstart, Timeout);
 80139f2:	687b      	ldr	r3, [r7, #4]
 80139f4:	9300      	str	r3, [sp, #0]
 80139f6:	69bb      	ldr	r3, [r7, #24]
 80139f8:	2201      	movs	r2, #1
 80139fa:	2102      	movs	r1, #2
 80139fc:	68f8      	ldr	r0, [r7, #12]
 80139fe:	f000 f98c 	bl	8013d1a <QSPI_WaitFlagStateUntilTimeout>
 8013a02:	4603      	mov	r3, r0
 8013a04:	77fb      	strb	r3, [r7, #31]

        if  (status == HAL_OK)
 8013a06:	7ffb      	ldrb	r3, [r7, #31]
 8013a08:	2b00      	cmp	r3, #0
 8013a0a:	d103      	bne.n	8013a14 <HAL_QSPI_Receive+0x108>
        {
          /* Clear Transfer Complete bit */
          __HAL_QSPI_CLEAR_FLAG(hqspi, QSPI_FLAG_TC);
 8013a0c:	68fb      	ldr	r3, [r7, #12]
 8013a0e:	681b      	ldr	r3, [r3, #0]
 8013a10:	2202      	movs	r2, #2
 8013a12:	60da      	str	r2, [r3, #12]

        }
      }

      /* Update QSPI state */
      hqspi->State = HAL_QSPI_STATE_READY;
 8013a14:	68fb      	ldr	r3, [r7, #12]
 8013a16:	2201      	movs	r2, #1
 8013a18:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8013a1c:	e00a      	b.n	8013a34 <HAL_QSPI_Receive+0x128>
    }
    else
    {
      hqspi->ErrorCode |= HAL_QSPI_ERROR_INVALID_PARAM;
 8013a1e:	68fb      	ldr	r3, [r7, #12]
 8013a20:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8013a22:	f043 0208 	orr.w	r2, r3, #8
 8013a26:	68fb      	ldr	r3, [r7, #12]
 8013a28:	645a      	str	r2, [r3, #68]	@ 0x44
      status = HAL_ERROR;
 8013a2a:	2301      	movs	r3, #1
 8013a2c:	77fb      	strb	r3, [r7, #31]
 8013a2e:	e001      	b.n	8013a34 <HAL_QSPI_Receive+0x128>
    }
  }
  else
  {
    status = HAL_BUSY;
 8013a30:	2302      	movs	r3, #2
 8013a32:	77fb      	strb	r3, [r7, #31]
  }

  /* Process unlocked */
  __HAL_UNLOCK(hqspi);
 8013a34:	68fb      	ldr	r3, [r7, #12]
 8013a36:	2200      	movs	r2, #0
 8013a38:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  return status;
 8013a3c:	7ffb      	ldrb	r3, [r7, #31]
}
 8013a3e:	4618      	mov	r0, r3
 8013a40:	3720      	adds	r7, #32
 8013a42:	46bd      	mov	sp, r7
 8013a44:	bd80      	pop	{r7, pc}

08013a46 <HAL_QSPI_AutoPolling>:
  * @param  Timeout Timeout duration
  * @note   This function is used only in Automatic Polling Mode
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_QSPI_AutoPolling(QSPI_HandleTypeDef *hqspi, QSPI_CommandTypeDef *cmd, QSPI_AutoPollingTypeDef *cfg, uint32_t Timeout)
{
 8013a46:	b580      	push	{r7, lr}
 8013a48:	b088      	sub	sp, #32
 8013a4a:	af02      	add	r7, sp, #8
 8013a4c:	60f8      	str	r0, [r7, #12]
 8013a4e:	60b9      	str	r1, [r7, #8]
 8013a50:	607a      	str	r2, [r7, #4]
 8013a52:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status;
  uint32_t tickstart = HAL_GetTick();
 8013a54:	f7fd f954 	bl	8010d00 <HAL_GetTick>
 8013a58:	6138      	str	r0, [r7, #16]
  assert_param(IS_QSPI_INTERVAL(cfg->Interval));
  assert_param(IS_QSPI_STATUS_BYTES_SIZE(cfg->StatusBytesSize));
  assert_param(IS_QSPI_MATCH_MODE(cfg->MatchMode));

  /* Process locked */
  __HAL_LOCK(hqspi);
 8013a5a:	68fb      	ldr	r3, [r7, #12]
 8013a5c:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8013a60:	b2db      	uxtb	r3, r3
 8013a62:	2b01      	cmp	r3, #1
 8013a64:	d101      	bne.n	8013a6a <HAL_QSPI_AutoPolling+0x24>
 8013a66:	2302      	movs	r3, #2
 8013a68:	e060      	b.n	8013b2c <HAL_QSPI_AutoPolling+0xe6>
 8013a6a:	68fb      	ldr	r3, [r7, #12]
 8013a6c:	2201      	movs	r2, #1
 8013a6e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  if(hqspi->State == HAL_QSPI_STATE_READY)
 8013a72:	68fb      	ldr	r3, [r7, #12]
 8013a74:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8013a78:	b2db      	uxtb	r3, r3
 8013a7a:	2b01      	cmp	r3, #1
 8013a7c:	d14f      	bne.n	8013b1e <HAL_QSPI_AutoPolling+0xd8>
  {
    hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;
 8013a7e:	68fb      	ldr	r3, [r7, #12]
 8013a80:	2200      	movs	r2, #0
 8013a82:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Update state */
    hqspi->State = HAL_QSPI_STATE_BUSY_AUTO_POLLING;
 8013a84:	68fb      	ldr	r3, [r7, #12]
 8013a86:	2242      	movs	r2, #66	@ 0x42
 8013a88:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Wait till BUSY flag reset */
    status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_BUSY, RESET, tickstart, Timeout);
 8013a8c:	683b      	ldr	r3, [r7, #0]
 8013a8e:	9300      	str	r3, [sp, #0]
 8013a90:	693b      	ldr	r3, [r7, #16]
 8013a92:	2200      	movs	r2, #0
 8013a94:	2120      	movs	r1, #32
 8013a96:	68f8      	ldr	r0, [r7, #12]
 8013a98:	f000 f93f 	bl	8013d1a <QSPI_WaitFlagStateUntilTimeout>
 8013a9c:	4603      	mov	r3, r0
 8013a9e:	75fb      	strb	r3, [r7, #23]

    if (status == HAL_OK)
 8013aa0:	7dfb      	ldrb	r3, [r7, #23]
 8013aa2:	2b00      	cmp	r3, #0
 8013aa4:	d13d      	bne.n	8013b22 <HAL_QSPI_AutoPolling+0xdc>
    {
      /* Configure QSPI: PSMAR register with the status match value */
      WRITE_REG(hqspi->Instance->PSMAR, cfg->Match);
 8013aa6:	68fb      	ldr	r3, [r7, #12]
 8013aa8:	681b      	ldr	r3, [r3, #0]
 8013aaa:	687a      	ldr	r2, [r7, #4]
 8013aac:	6812      	ldr	r2, [r2, #0]
 8013aae:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Configure QSPI: PSMKR register with the status mask value */
      WRITE_REG(hqspi->Instance->PSMKR, cfg->Mask);
 8013ab0:	68fb      	ldr	r3, [r7, #12]
 8013ab2:	681b      	ldr	r3, [r3, #0]
 8013ab4:	687a      	ldr	r2, [r7, #4]
 8013ab6:	6852      	ldr	r2, [r2, #4]
 8013ab8:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Configure QSPI: PIR register with the interval value */
      WRITE_REG(hqspi->Instance->PIR, cfg->Interval);
 8013aba:	68fb      	ldr	r3, [r7, #12]
 8013abc:	681b      	ldr	r3, [r3, #0]
 8013abe:	687a      	ldr	r2, [r7, #4]
 8013ac0:	6892      	ldr	r2, [r2, #8]
 8013ac2:	62da      	str	r2, [r3, #44]	@ 0x2c

      /* Configure QSPI: CR register with Match mode and Automatic stop enabled
      (otherwise there will be an infinite loop in blocking mode) */
      MODIFY_REG(hqspi->Instance->CR, (QUADSPI_CR_PMM | QUADSPI_CR_APMS),
 8013ac4:	68fb      	ldr	r3, [r7, #12]
 8013ac6:	681b      	ldr	r3, [r3, #0]
 8013ac8:	681b      	ldr	r3, [r3, #0]
 8013aca:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8013ace:	687b      	ldr	r3, [r7, #4]
 8013ad0:	691b      	ldr	r3, [r3, #16]
 8013ad2:	431a      	orrs	r2, r3
 8013ad4:	68fb      	ldr	r3, [r7, #12]
 8013ad6:	681b      	ldr	r3, [r3, #0]
 8013ad8:	f442 0280 	orr.w	r2, r2, #4194304	@ 0x400000
 8013adc:	601a      	str	r2, [r3, #0]
               (cfg->MatchMode | QSPI_AUTOMATIC_STOP_ENABLE));

      /* Call the configuration function */
      cmd->NbData = cfg->StatusBytesSize;
 8013ade:	687b      	ldr	r3, [r7, #4]
 8013ae0:	68da      	ldr	r2, [r3, #12]
 8013ae2:	68bb      	ldr	r3, [r7, #8]
 8013ae4:	629a      	str	r2, [r3, #40]	@ 0x28
      QSPI_Config(hqspi, cmd, QSPI_FUNCTIONAL_MODE_AUTO_POLLING);
 8013ae6:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 8013aea:	68b9      	ldr	r1, [r7, #8]
 8013aec:	68f8      	ldr	r0, [r7, #12]
 8013aee:	f000 f94b 	bl	8013d88 <QSPI_Config>

      /* Wait until SM flag is set to go back in idle state */
      status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_SM, SET, tickstart, Timeout);
 8013af2:	683b      	ldr	r3, [r7, #0]
 8013af4:	9300      	str	r3, [sp, #0]
 8013af6:	693b      	ldr	r3, [r7, #16]
 8013af8:	2201      	movs	r2, #1
 8013afa:	2108      	movs	r1, #8
 8013afc:	68f8      	ldr	r0, [r7, #12]
 8013afe:	f000 f90c 	bl	8013d1a <QSPI_WaitFlagStateUntilTimeout>
 8013b02:	4603      	mov	r3, r0
 8013b04:	75fb      	strb	r3, [r7, #23]

      if (status == HAL_OK)
 8013b06:	7dfb      	ldrb	r3, [r7, #23]
 8013b08:	2b00      	cmp	r3, #0
 8013b0a:	d10a      	bne.n	8013b22 <HAL_QSPI_AutoPolling+0xdc>
      {
        __HAL_QSPI_CLEAR_FLAG(hqspi, QSPI_FLAG_SM);
 8013b0c:	68fb      	ldr	r3, [r7, #12]
 8013b0e:	681b      	ldr	r3, [r3, #0]
 8013b10:	2208      	movs	r2, #8
 8013b12:	60da      	str	r2, [r3, #12]

        /* Update state */
        hqspi->State = HAL_QSPI_STATE_READY;
 8013b14:	68fb      	ldr	r3, [r7, #12]
 8013b16:	2201      	movs	r2, #1
 8013b18:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8013b1c:	e001      	b.n	8013b22 <HAL_QSPI_AutoPolling+0xdc>
      }
    }
  }
  else
  {
    status = HAL_BUSY;
 8013b1e:	2302      	movs	r3, #2
 8013b20:	75fb      	strb	r3, [r7, #23]
  }

  /* Process unlocked */
  __HAL_UNLOCK(hqspi);
 8013b22:	68fb      	ldr	r3, [r7, #12]
 8013b24:	2200      	movs	r2, #0
 8013b26:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  /* Return function status */
  return status;
 8013b2a:	7dfb      	ldrb	r3, [r7, #23]
}
 8013b2c:	4618      	mov	r0, r3
 8013b2e:	3718      	adds	r7, #24
 8013b30:	46bd      	mov	sp, r7
 8013b32:	bd80      	pop	{r7, pc}

08013b34 <HAL_QSPI_MemoryMapped>:
  * @param  cfg structure that contains the memory mapped configuration information.
  * @note   This function is used only in Memory mapped Mode
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_QSPI_MemoryMapped(QSPI_HandleTypeDef *hqspi, QSPI_CommandTypeDef *cmd, QSPI_MemoryMappedTypeDef *cfg)
{
 8013b34:	b580      	push	{r7, lr}
 8013b36:	b088      	sub	sp, #32
 8013b38:	af02      	add	r7, sp, #8
 8013b3a:	60f8      	str	r0, [r7, #12]
 8013b3c:	60b9      	str	r1, [r7, #8]
 8013b3e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status;
  uint32_t tickstart = HAL_GetTick();
 8013b40:	f7fd f8de 	bl	8010d00 <HAL_GetTick>
 8013b44:	6138      	str	r0, [r7, #16]
  assert_param(IS_QSPI_SIOO_MODE(cmd->SIOOMode));

  assert_param(IS_QSPI_TIMEOUT_ACTIVATION(cfg->TimeOutActivation));

  /* Process locked */
  __HAL_LOCK(hqspi);
 8013b46:	68fb      	ldr	r3, [r7, #12]
 8013b48:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8013b4c:	b2db      	uxtb	r3, r3
 8013b4e:	2b01      	cmp	r3, #1
 8013b50:	d101      	bne.n	8013b56 <HAL_QSPI_MemoryMapped+0x22>
 8013b52:	2302      	movs	r3, #2
 8013b54:	e04c      	b.n	8013bf0 <HAL_QSPI_MemoryMapped+0xbc>
 8013b56:	68fb      	ldr	r3, [r7, #12]
 8013b58:	2201      	movs	r2, #1
 8013b5a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  if(hqspi->State == HAL_QSPI_STATE_READY)
 8013b5e:	68fb      	ldr	r3, [r7, #12]
 8013b60:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8013b64:	b2db      	uxtb	r3, r3
 8013b66:	2b01      	cmp	r3, #1
 8013b68:	d13b      	bne.n	8013be2 <HAL_QSPI_MemoryMapped+0xae>
  {
    hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;
 8013b6a:	68fb      	ldr	r3, [r7, #12]
 8013b6c:	2200      	movs	r2, #0
 8013b6e:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Update state */
    hqspi->State = HAL_QSPI_STATE_BUSY_MEM_MAPPED;
 8013b70:	68fb      	ldr	r3, [r7, #12]
 8013b72:	2282      	movs	r2, #130	@ 0x82
 8013b74:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Wait till BUSY flag reset */
    status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_BUSY, RESET, tickstart, hqspi->Timeout);
 8013b78:	68fb      	ldr	r3, [r7, #12]
 8013b7a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8013b7c:	9300      	str	r3, [sp, #0]
 8013b7e:	693b      	ldr	r3, [r7, #16]
 8013b80:	2200      	movs	r2, #0
 8013b82:	2120      	movs	r1, #32
 8013b84:	68f8      	ldr	r0, [r7, #12]
 8013b86:	f000 f8c8 	bl	8013d1a <QSPI_WaitFlagStateUntilTimeout>
 8013b8a:	4603      	mov	r3, r0
 8013b8c:	75fb      	strb	r3, [r7, #23]

    if (status == HAL_OK)
 8013b8e:	7dfb      	ldrb	r3, [r7, #23]
 8013b90:	2b00      	cmp	r3, #0
 8013b92:	d128      	bne.n	8013be6 <HAL_QSPI_MemoryMapped+0xb2>
    {
      /* Configure QSPI: CR register with timeout counter enable */
    MODIFY_REG(hqspi->Instance->CR, QUADSPI_CR_TCEN, cfg->TimeOutActivation);
 8013b94:	68fb      	ldr	r3, [r7, #12]
 8013b96:	681b      	ldr	r3, [r3, #0]
 8013b98:	681b      	ldr	r3, [r3, #0]
 8013b9a:	f023 0108 	bic.w	r1, r3, #8
 8013b9e:	687b      	ldr	r3, [r7, #4]
 8013ba0:	685a      	ldr	r2, [r3, #4]
 8013ba2:	68fb      	ldr	r3, [r7, #12]
 8013ba4:	681b      	ldr	r3, [r3, #0]
 8013ba6:	430a      	orrs	r2, r1
 8013ba8:	601a      	str	r2, [r3, #0]

    if (cfg->TimeOutActivation == QSPI_TIMEOUT_COUNTER_ENABLE)
 8013baa:	687b      	ldr	r3, [r7, #4]
 8013bac:	685b      	ldr	r3, [r3, #4]
 8013bae:	2b08      	cmp	r3, #8
 8013bb0:	d110      	bne.n	8013bd4 <HAL_QSPI_MemoryMapped+0xa0>
      {
        assert_param(IS_QSPI_TIMEOUT_PERIOD(cfg->TimeOutPeriod));

        /* Configure QSPI: LPTR register with the low-power timeout value */
        WRITE_REG(hqspi->Instance->LPTR, cfg->TimeOutPeriod);
 8013bb2:	68fb      	ldr	r3, [r7, #12]
 8013bb4:	681b      	ldr	r3, [r3, #0]
 8013bb6:	687a      	ldr	r2, [r7, #4]
 8013bb8:	6812      	ldr	r2, [r2, #0]
 8013bba:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Clear interrupt */
        __HAL_QSPI_CLEAR_FLAG(hqspi, QSPI_FLAG_TO);
 8013bbc:	68fb      	ldr	r3, [r7, #12]
 8013bbe:	681b      	ldr	r3, [r3, #0]
 8013bc0:	2210      	movs	r2, #16
 8013bc2:	60da      	str	r2, [r3, #12]

        /* Enable the QSPI TimeOut Interrupt */
        __HAL_QSPI_ENABLE_IT(hqspi, QSPI_IT_TO);
 8013bc4:	68fb      	ldr	r3, [r7, #12]
 8013bc6:	681b      	ldr	r3, [r3, #0]
 8013bc8:	681a      	ldr	r2, [r3, #0]
 8013bca:	68fb      	ldr	r3, [r7, #12]
 8013bcc:	681b      	ldr	r3, [r3, #0]
 8013bce:	f442 1280 	orr.w	r2, r2, #1048576	@ 0x100000
 8013bd2:	601a      	str	r2, [r3, #0]
      }

      /* Call the configuration function */
      QSPI_Config(hqspi, cmd, QSPI_FUNCTIONAL_MODE_MEMORY_MAPPED);
 8013bd4:	f04f 6240 	mov.w	r2, #201326592	@ 0xc000000
 8013bd8:	68b9      	ldr	r1, [r7, #8]
 8013bda:	68f8      	ldr	r0, [r7, #12]
 8013bdc:	f000 f8d4 	bl	8013d88 <QSPI_Config>
 8013be0:	e001      	b.n	8013be6 <HAL_QSPI_MemoryMapped+0xb2>
    }
  }
  else
  {
    status = HAL_BUSY;
 8013be2:	2302      	movs	r3, #2
 8013be4:	75fb      	strb	r3, [r7, #23]
  }

  /* Process unlocked */
  __HAL_UNLOCK(hqspi);
 8013be6:	68fb      	ldr	r3, [r7, #12]
 8013be8:	2200      	movs	r2, #0
 8013bea:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  /* Return function status */
  return status;
 8013bee:	7dfb      	ldrb	r3, [r7, #23]
}
 8013bf0:	4618      	mov	r0, r3
 8013bf2:	3718      	adds	r7, #24
 8013bf4:	46bd      	mov	sp, r7
 8013bf6:	bd80      	pop	{r7, pc}

08013bf8 <HAL_QSPI_ErrorCallback>:
  * @brief  Transfer Error callback.
  * @param  hqspi QSPI handle
  * @retval None
  */
__weak void HAL_QSPI_ErrorCallback(QSPI_HandleTypeDef *hqspi)
{
 8013bf8:	b480      	push	{r7}
 8013bfa:	b083      	sub	sp, #12
 8013bfc:	af00      	add	r7, sp, #0
 8013bfe:	6078      	str	r0, [r7, #4]
  UNUSED(hqspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_QSPI_ErrorCallback could be implemented in the user file
   */
}
 8013c00:	bf00      	nop
 8013c02:	370c      	adds	r7, #12
 8013c04:	46bd      	mov	sp, r7
 8013c06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013c0a:	4770      	bx	lr

08013c0c <HAL_QSPI_AbortCpltCallback>:
  * @brief  Abort completed callback.
  * @param  hqspi QSPI handle
  * @retval None
  */
__weak void HAL_QSPI_AbortCpltCallback(QSPI_HandleTypeDef *hqspi)
{
 8013c0c:	b480      	push	{r7}
 8013c0e:	b083      	sub	sp, #12
 8013c10:	af00      	add	r7, sp, #0
 8013c12:	6078      	str	r0, [r7, #4]
  UNUSED(hqspi);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_QSPI_AbortCpltCallback could be implemented in the user file
   */
}
 8013c14:	bf00      	nop
 8013c16:	370c      	adds	r7, #12
 8013c18:	46bd      	mov	sp, r7
 8013c1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013c1e:	4770      	bx	lr

08013c20 <HAL_QSPI_CmdCpltCallback>:
  * @brief  Command completed callback.
  * @param  hqspi QSPI handle
  * @retval None
  */
__weak void HAL_QSPI_CmdCpltCallback(QSPI_HandleTypeDef *hqspi)
{
 8013c20:	b480      	push	{r7}
 8013c22:	b083      	sub	sp, #12
 8013c24:	af00      	add	r7, sp, #0
 8013c26:	6078      	str	r0, [r7, #4]
  UNUSED(hqspi);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_QSPI_CmdCpltCallback could be implemented in the user file
   */
}
 8013c28:	bf00      	nop
 8013c2a:	370c      	adds	r7, #12
 8013c2c:	46bd      	mov	sp, r7
 8013c2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013c32:	4770      	bx	lr

08013c34 <HAL_QSPI_RxCpltCallback>:
  * @brief  Rx Transfer completed callback.
  * @param  hqspi QSPI handle
  * @retval None
  */
__weak void HAL_QSPI_RxCpltCallback(QSPI_HandleTypeDef *hqspi)
{
 8013c34:	b480      	push	{r7}
 8013c36:	b083      	sub	sp, #12
 8013c38:	af00      	add	r7, sp, #0
 8013c3a:	6078      	str	r0, [r7, #4]
  UNUSED(hqspi);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_QSPI_RxCpltCallback could be implemented in the user file
   */
}
 8013c3c:	bf00      	nop
 8013c3e:	370c      	adds	r7, #12
 8013c40:	46bd      	mov	sp, r7
 8013c42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013c46:	4770      	bx	lr

08013c48 <HAL_QSPI_TxCpltCallback>:
  * @brief  Tx Transfer completed callback.
  * @param  hqspi QSPI handle
  * @retval None
  */
__weak void HAL_QSPI_TxCpltCallback(QSPI_HandleTypeDef *hqspi)
{
 8013c48:	b480      	push	{r7}
 8013c4a:	b083      	sub	sp, #12
 8013c4c:	af00      	add	r7, sp, #0
 8013c4e:	6078      	str	r0, [r7, #4]
  UNUSED(hqspi);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_QSPI_TxCpltCallback could be implemented in the user file
   */
}
 8013c50:	bf00      	nop
 8013c52:	370c      	adds	r7, #12
 8013c54:	46bd      	mov	sp, r7
 8013c56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013c5a:	4770      	bx	lr

08013c5c <HAL_QSPI_FifoThresholdCallback>:
  * @brief  FIFO Threshold callback.
  * @param  hqspi QSPI handle
  * @retval None
  */
__weak void HAL_QSPI_FifoThresholdCallback(QSPI_HandleTypeDef *hqspi)
{
 8013c5c:	b480      	push	{r7}
 8013c5e:	b083      	sub	sp, #12
 8013c60:	af00      	add	r7, sp, #0
 8013c62:	6078      	str	r0, [r7, #4]
  UNUSED(hqspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_QSPI_FIFOThresholdCallback could be implemented in the user file
   */
}
 8013c64:	bf00      	nop
 8013c66:	370c      	adds	r7, #12
 8013c68:	46bd      	mov	sp, r7
 8013c6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013c6e:	4770      	bx	lr

08013c70 <HAL_QSPI_StatusMatchCallback>:
  * @brief  Status Match callback.
  * @param  hqspi QSPI handle
  * @retval None
  */
__weak void HAL_QSPI_StatusMatchCallback(QSPI_HandleTypeDef *hqspi)
{
 8013c70:	b480      	push	{r7}
 8013c72:	b083      	sub	sp, #12
 8013c74:	af00      	add	r7, sp, #0
 8013c76:	6078      	str	r0, [r7, #4]
  UNUSED(hqspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_QSPI_StatusMatchCallback could be implemented in the user file
   */
}
 8013c78:	bf00      	nop
 8013c7a:	370c      	adds	r7, #12
 8013c7c:	46bd      	mov	sp, r7
 8013c7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013c82:	4770      	bx	lr

08013c84 <HAL_QSPI_TimeOutCallback>:
  * @brief  Timeout callback.
  * @param  hqspi QSPI handle
  * @retval None
  */
__weak void HAL_QSPI_TimeOutCallback(QSPI_HandleTypeDef *hqspi)
{
 8013c84:	b480      	push	{r7}
 8013c86:	b083      	sub	sp, #12
 8013c88:	af00      	add	r7, sp, #0
 8013c8a:	6078      	str	r0, [r7, #4]
  UNUSED(hqspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_QSPI_TimeOutCallback could be implemented in the user file
   */
}
 8013c8c:	bf00      	nop
 8013c8e:	370c      	adds	r7, #12
 8013c90:	46bd      	mov	sp, r7
 8013c92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013c96:	4770      	bx	lr

08013c98 <HAL_QSPI_SetTimeout>:
  * @param  hqspi QSPI handle.
  * @param  Timeout Timeout for the QSPI memory access.
  * @retval None
  */
void HAL_QSPI_SetTimeout(QSPI_HandleTypeDef *hqspi, uint32_t Timeout)
{
 8013c98:	b480      	push	{r7}
 8013c9a:	b083      	sub	sp, #12
 8013c9c:	af00      	add	r7, sp, #0
 8013c9e:	6078      	str	r0, [r7, #4]
 8013ca0:	6039      	str	r1, [r7, #0]
  hqspi->Timeout = Timeout;
 8013ca2:	687b      	ldr	r3, [r7, #4]
 8013ca4:	683a      	ldr	r2, [r7, #0]
 8013ca6:	649a      	str	r2, [r3, #72]	@ 0x48
}
 8013ca8:	bf00      	nop
 8013caa:	370c      	adds	r7, #12
 8013cac:	46bd      	mov	sp, r7
 8013cae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013cb2:	4770      	bx	lr

08013cb4 <QSPI_DMAAbortCplt>:
  * @brief  MDMA QSPI abort complete callback.
  * @param  hmdma MDMA handle
  * @retval None
  */
static void QSPI_DMAAbortCplt(MDMA_HandleTypeDef *hmdma)
{
 8013cb4:	b580      	push	{r7, lr}
 8013cb6:	b084      	sub	sp, #16
 8013cb8:	af00      	add	r7, sp, #0
 8013cba:	6078      	str	r0, [r7, #4]
  QSPI_HandleTypeDef* hqspi = ( QSPI_HandleTypeDef* )(hmdma->Parent);
 8013cbc:	687b      	ldr	r3, [r7, #4]
 8013cbe:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8013cc0:	60fb      	str	r3, [r7, #12]

  hqspi->RxXferCount = 0U;
 8013cc2:	68fb      	ldr	r3, [r7, #12]
 8013cc4:	2200      	movs	r2, #0
 8013cc6:	639a      	str	r2, [r3, #56]	@ 0x38
  hqspi->TxXferCount = 0U;
 8013cc8:	68fb      	ldr	r3, [r7, #12]
 8013cca:	2200      	movs	r2, #0
 8013ccc:	62da      	str	r2, [r3, #44]	@ 0x2c

  if(hqspi->State == HAL_QSPI_STATE_ABORT)
 8013cce:	68fb      	ldr	r3, [r7, #12]
 8013cd0:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8013cd4:	b2db      	uxtb	r3, r3
 8013cd6:	2b08      	cmp	r3, #8
 8013cd8:	d114      	bne.n	8013d04 <QSPI_DMAAbortCplt+0x50>
  {
    /* MDMA Abort called by QSPI abort */
    /* Clear interrupt */
    __HAL_QSPI_CLEAR_FLAG(hqspi, QSPI_FLAG_TC);
 8013cda:	68fb      	ldr	r3, [r7, #12]
 8013cdc:	681b      	ldr	r3, [r3, #0]
 8013cde:	2202      	movs	r2, #2
 8013ce0:	60da      	str	r2, [r3, #12]

    /* Enable the QSPI Transfer Complete Interrupt */
    __HAL_QSPI_ENABLE_IT(hqspi, QSPI_IT_TC);
 8013ce2:	68fb      	ldr	r3, [r7, #12]
 8013ce4:	681b      	ldr	r3, [r3, #0]
 8013ce6:	681a      	ldr	r2, [r3, #0]
 8013ce8:	68fb      	ldr	r3, [r7, #12]
 8013cea:	681b      	ldr	r3, [r3, #0]
 8013cec:	f442 3200 	orr.w	r2, r2, #131072	@ 0x20000
 8013cf0:	601a      	str	r2, [r3, #0]

    /* Configure QSPI: CR register with Abort request */
    SET_BIT(hqspi->Instance->CR, QUADSPI_CR_ABORT);
 8013cf2:	68fb      	ldr	r3, [r7, #12]
 8013cf4:	681b      	ldr	r3, [r3, #0]
 8013cf6:	681a      	ldr	r2, [r3, #0]
 8013cf8:	68fb      	ldr	r3, [r7, #12]
 8013cfa:	681b      	ldr	r3, [r3, #0]
 8013cfc:	f042 0202 	orr.w	r2, r2, #2
 8013d00:	601a      	str	r2, [r3, #0]
    hqspi->ErrorCallback(hqspi);
#else
    HAL_QSPI_ErrorCallback(hqspi);
#endif
  }
}
 8013d02:	e006      	b.n	8013d12 <QSPI_DMAAbortCplt+0x5e>
    hqspi->State = HAL_QSPI_STATE_READY;
 8013d04:	68fb      	ldr	r3, [r7, #12]
 8013d06:	2201      	movs	r2, #1
 8013d08:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    HAL_QSPI_ErrorCallback(hqspi);
 8013d0c:	68f8      	ldr	r0, [r7, #12]
 8013d0e:	f7ff ff73 	bl	8013bf8 <HAL_QSPI_ErrorCallback>
}
 8013d12:	bf00      	nop
 8013d14:	3710      	adds	r7, #16
 8013d16:	46bd      	mov	sp, r7
 8013d18:	bd80      	pop	{r7, pc}

08013d1a <QSPI_WaitFlagStateUntilTimeout>:
  * @param  Timeout Duration of the timeout
  * @retval HAL status
  */
static HAL_StatusTypeDef QSPI_WaitFlagStateUntilTimeout(QSPI_HandleTypeDef *hqspi, uint32_t Flag,
                                                        FlagStatus State, uint32_t Tickstart, uint32_t Timeout)
{
 8013d1a:	b580      	push	{r7, lr}
 8013d1c:	b084      	sub	sp, #16
 8013d1e:	af00      	add	r7, sp, #0
 8013d20:	60f8      	str	r0, [r7, #12]
 8013d22:	60b9      	str	r1, [r7, #8]
 8013d24:	603b      	str	r3, [r7, #0]
 8013d26:	4613      	mov	r3, r2
 8013d28:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is in expected state */
  while((__HAL_QSPI_GET_FLAG(hqspi, Flag)) != State)
 8013d2a:	e01a      	b.n	8013d62 <QSPI_WaitFlagStateUntilTimeout+0x48>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8013d2c:	69bb      	ldr	r3, [r7, #24]
 8013d2e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8013d32:	d016      	beq.n	8013d62 <QSPI_WaitFlagStateUntilTimeout+0x48>
    {
      if(((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8013d34:	f7fc ffe4 	bl	8010d00 <HAL_GetTick>
 8013d38:	4602      	mov	r2, r0
 8013d3a:	683b      	ldr	r3, [r7, #0]
 8013d3c:	1ad3      	subs	r3, r2, r3
 8013d3e:	69ba      	ldr	r2, [r7, #24]
 8013d40:	429a      	cmp	r2, r3
 8013d42:	d302      	bcc.n	8013d4a <QSPI_WaitFlagStateUntilTimeout+0x30>
 8013d44:	69bb      	ldr	r3, [r7, #24]
 8013d46:	2b00      	cmp	r3, #0
 8013d48:	d10b      	bne.n	8013d62 <QSPI_WaitFlagStateUntilTimeout+0x48>
      {
        hqspi->State     = HAL_QSPI_STATE_ERROR;
 8013d4a:	68fb      	ldr	r3, [r7, #12]
 8013d4c:	2204      	movs	r2, #4
 8013d4e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
        hqspi->ErrorCode |= HAL_QSPI_ERROR_TIMEOUT;
 8013d52:	68fb      	ldr	r3, [r7, #12]
 8013d54:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8013d56:	f043 0201 	orr.w	r2, r3, #1
 8013d5a:	68fb      	ldr	r3, [r7, #12]
 8013d5c:	645a      	str	r2, [r3, #68]	@ 0x44

        return HAL_ERROR;
 8013d5e:	2301      	movs	r3, #1
 8013d60:	e00e      	b.n	8013d80 <QSPI_WaitFlagStateUntilTimeout+0x66>
  while((__HAL_QSPI_GET_FLAG(hqspi, Flag)) != State)
 8013d62:	68fb      	ldr	r3, [r7, #12]
 8013d64:	681b      	ldr	r3, [r3, #0]
 8013d66:	689a      	ldr	r2, [r3, #8]
 8013d68:	68bb      	ldr	r3, [r7, #8]
 8013d6a:	4013      	ands	r3, r2
 8013d6c:	2b00      	cmp	r3, #0
 8013d6e:	bf14      	ite	ne
 8013d70:	2301      	movne	r3, #1
 8013d72:	2300      	moveq	r3, #0
 8013d74:	b2db      	uxtb	r3, r3
 8013d76:	461a      	mov	r2, r3
 8013d78:	79fb      	ldrb	r3, [r7, #7]
 8013d7a:	429a      	cmp	r2, r3
 8013d7c:	d1d6      	bne.n	8013d2c <QSPI_WaitFlagStateUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8013d7e:	2300      	movs	r3, #0
}
 8013d80:	4618      	mov	r0, r3
 8013d82:	3710      	adds	r7, #16
 8013d84:	46bd      	mov	sp, r7
 8013d86:	bd80      	pop	{r7, pc}

08013d88 <QSPI_Config>:
  *            @arg QSPI_FUNCTIONAL_MODE_AUTO_POLLING: Automatic polling mode
  *            @arg QSPI_FUNCTIONAL_MODE_MEMORY_MAPPED: Memory-mapped mode
  * @retval None
  */
static void QSPI_Config(QSPI_HandleTypeDef *hqspi, QSPI_CommandTypeDef *cmd, uint32_t FunctionalMode)
{
 8013d88:	b480      	push	{r7}
 8013d8a:	b085      	sub	sp, #20
 8013d8c:	af00      	add	r7, sp, #0
 8013d8e:	60f8      	str	r0, [r7, #12]
 8013d90:	60b9      	str	r1, [r7, #8]
 8013d92:	607a      	str	r2, [r7, #4]
  assert_param(IS_QSPI_FUNCTIONAL_MODE(FunctionalMode));

  if ((cmd->DataMode != QSPI_DATA_NONE) && (FunctionalMode != QSPI_FUNCTIONAL_MODE_MEMORY_MAPPED))
 8013d94:	68bb      	ldr	r3, [r7, #8]
 8013d96:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8013d98:	2b00      	cmp	r3, #0
 8013d9a:	d009      	beq.n	8013db0 <QSPI_Config+0x28>
 8013d9c:	687b      	ldr	r3, [r7, #4]
 8013d9e:	f1b3 6f40 	cmp.w	r3, #201326592	@ 0xc000000
 8013da2:	d005      	beq.n	8013db0 <QSPI_Config+0x28>
  {
    /* Configure QSPI: DLR register with the number of data to read or write */
    WRITE_REG(hqspi->Instance->DLR, (cmd->NbData - 1U));
 8013da4:	68bb      	ldr	r3, [r7, #8]
 8013da6:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8013da8:	68fb      	ldr	r3, [r7, #12]
 8013daa:	681b      	ldr	r3, [r3, #0]
 8013dac:	3a01      	subs	r2, #1
 8013dae:	611a      	str	r2, [r3, #16]
  }

  if (cmd->InstructionMode != QSPI_INSTRUCTION_NONE)
 8013db0:	68bb      	ldr	r3, [r7, #8]
 8013db2:	699b      	ldr	r3, [r3, #24]
 8013db4:	2b00      	cmp	r3, #0
 8013db6:	f000 80b9 	beq.w	8013f2c <QSPI_Config+0x1a4>
  {
    if (cmd->AlternateByteMode != QSPI_ALTERNATE_BYTES_NONE)
 8013dba:	68bb      	ldr	r3, [r7, #8]
 8013dbc:	6a1b      	ldr	r3, [r3, #32]
 8013dbe:	2b00      	cmp	r3, #0
 8013dc0:	d05f      	beq.n	8013e82 <QSPI_Config+0xfa>
    {
      /* Configure QSPI: ABR register with alternate bytes value */
      WRITE_REG(hqspi->Instance->ABR, cmd->AlternateBytes);
 8013dc2:	68fb      	ldr	r3, [r7, #12]
 8013dc4:	681b      	ldr	r3, [r3, #0]
 8013dc6:	68ba      	ldr	r2, [r7, #8]
 8013dc8:	6892      	ldr	r2, [r2, #8]
 8013dca:	61da      	str	r2, [r3, #28]

      if (cmd->AddressMode != QSPI_ADDRESS_NONE)
 8013dcc:	68bb      	ldr	r3, [r7, #8]
 8013dce:	69db      	ldr	r3, [r3, #28]
 8013dd0:	2b00      	cmp	r3, #0
 8013dd2:	d031      	beq.n	8013e38 <QSPI_Config+0xb0>
      {
        /*---- Command with instruction, address and alternate bytes ----*/
        /* Configure QSPI: CCR register with all communications parameters */
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 8013dd4:	68bb      	ldr	r3, [r7, #8]
 8013dd6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8013dd8:	68bb      	ldr	r3, [r7, #8]
 8013dda:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8013ddc:	431a      	orrs	r2, r3
 8013dde:	68bb      	ldr	r3, [r7, #8]
 8013de0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8013de2:	431a      	orrs	r2, r3
 8013de4:	68bb      	ldr	r3, [r7, #8]
 8013de6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8013de8:	431a      	orrs	r2, r3
 8013dea:	68bb      	ldr	r3, [r7, #8]
 8013dec:	695b      	ldr	r3, [r3, #20]
 8013dee:	049b      	lsls	r3, r3, #18
 8013df0:	431a      	orrs	r2, r3
 8013df2:	68bb      	ldr	r3, [r7, #8]
 8013df4:	691b      	ldr	r3, [r3, #16]
 8013df6:	431a      	orrs	r2, r3
 8013df8:	68bb      	ldr	r3, [r7, #8]
 8013dfa:	6a1b      	ldr	r3, [r3, #32]
 8013dfc:	431a      	orrs	r2, r3
 8013dfe:	68bb      	ldr	r3, [r7, #8]
 8013e00:	68db      	ldr	r3, [r3, #12]
 8013e02:	431a      	orrs	r2, r3
 8013e04:	68bb      	ldr	r3, [r7, #8]
 8013e06:	69db      	ldr	r3, [r3, #28]
 8013e08:	431a      	orrs	r2, r3
 8013e0a:	68bb      	ldr	r3, [r7, #8]
 8013e0c:	699b      	ldr	r3, [r3, #24]
 8013e0e:	431a      	orrs	r2, r3
 8013e10:	68bb      	ldr	r3, [r7, #8]
 8013e12:	681b      	ldr	r3, [r3, #0]
 8013e14:	ea42 0103 	orr.w	r1, r2, r3
 8013e18:	68fb      	ldr	r3, [r7, #12]
 8013e1a:	681b      	ldr	r3, [r3, #0]
 8013e1c:	687a      	ldr	r2, [r7, #4]
 8013e1e:	430a      	orrs	r2, r1
 8013e20:	615a      	str	r2, [r3, #20]
                                         cmd->DataMode | (cmd->DummyCycles << QUADSPI_CCR_DCYC_Pos) |
                                         cmd->AlternateBytesSize | cmd->AlternateByteMode |
                                         cmd->AddressSize | cmd->AddressMode | cmd->InstructionMode |
                                         cmd->Instruction | FunctionalMode));

        if (FunctionalMode != QSPI_FUNCTIONAL_MODE_MEMORY_MAPPED)
 8013e22:	687b      	ldr	r3, [r7, #4]
 8013e24:	f1b3 6f40 	cmp.w	r3, #201326592	@ 0xc000000
 8013e28:	f000 812e 	beq.w	8014088 <QSPI_Config+0x300>
        {
          /* Configure QSPI: AR register with address value */
          WRITE_REG(hqspi->Instance->AR, cmd->Address);
 8013e2c:	68fb      	ldr	r3, [r7, #12]
 8013e2e:	681b      	ldr	r3, [r3, #0]
 8013e30:	68ba      	ldr	r2, [r7, #8]
 8013e32:	6852      	ldr	r2, [r2, #4]
 8013e34:	619a      	str	r2, [r3, #24]
                                           cmd->InstructionMode | FunctionalMode));
        }
      }
    }
  }
}
 8013e36:	e127      	b.n	8014088 <QSPI_Config+0x300>
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 8013e38:	68bb      	ldr	r3, [r7, #8]
 8013e3a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8013e3c:	68bb      	ldr	r3, [r7, #8]
 8013e3e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8013e40:	431a      	orrs	r2, r3
 8013e42:	68bb      	ldr	r3, [r7, #8]
 8013e44:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8013e46:	431a      	orrs	r2, r3
 8013e48:	68bb      	ldr	r3, [r7, #8]
 8013e4a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8013e4c:	431a      	orrs	r2, r3
 8013e4e:	68bb      	ldr	r3, [r7, #8]
 8013e50:	695b      	ldr	r3, [r3, #20]
 8013e52:	049b      	lsls	r3, r3, #18
 8013e54:	431a      	orrs	r2, r3
 8013e56:	68bb      	ldr	r3, [r7, #8]
 8013e58:	691b      	ldr	r3, [r3, #16]
 8013e5a:	431a      	orrs	r2, r3
 8013e5c:	68bb      	ldr	r3, [r7, #8]
 8013e5e:	6a1b      	ldr	r3, [r3, #32]
 8013e60:	431a      	orrs	r2, r3
 8013e62:	68bb      	ldr	r3, [r7, #8]
 8013e64:	69db      	ldr	r3, [r3, #28]
 8013e66:	431a      	orrs	r2, r3
 8013e68:	68bb      	ldr	r3, [r7, #8]
 8013e6a:	699b      	ldr	r3, [r3, #24]
 8013e6c:	431a      	orrs	r2, r3
 8013e6e:	68bb      	ldr	r3, [r7, #8]
 8013e70:	681b      	ldr	r3, [r3, #0]
 8013e72:	ea42 0103 	orr.w	r1, r2, r3
 8013e76:	68fb      	ldr	r3, [r7, #12]
 8013e78:	681b      	ldr	r3, [r3, #0]
 8013e7a:	687a      	ldr	r2, [r7, #4]
 8013e7c:	430a      	orrs	r2, r1
 8013e7e:	615a      	str	r2, [r3, #20]
}
 8013e80:	e102      	b.n	8014088 <QSPI_Config+0x300>
      if (cmd->AddressMode != QSPI_ADDRESS_NONE)
 8013e82:	68bb      	ldr	r3, [r7, #8]
 8013e84:	69db      	ldr	r3, [r3, #28]
 8013e86:	2b00      	cmp	r3, #0
 8013e88:	d02e      	beq.n	8013ee8 <QSPI_Config+0x160>
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 8013e8a:	68bb      	ldr	r3, [r7, #8]
 8013e8c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8013e8e:	68bb      	ldr	r3, [r7, #8]
 8013e90:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8013e92:	431a      	orrs	r2, r3
 8013e94:	68bb      	ldr	r3, [r7, #8]
 8013e96:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8013e98:	431a      	orrs	r2, r3
 8013e9a:	68bb      	ldr	r3, [r7, #8]
 8013e9c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8013e9e:	431a      	orrs	r2, r3
 8013ea0:	68bb      	ldr	r3, [r7, #8]
 8013ea2:	695b      	ldr	r3, [r3, #20]
 8013ea4:	049b      	lsls	r3, r3, #18
 8013ea6:	431a      	orrs	r2, r3
 8013ea8:	68bb      	ldr	r3, [r7, #8]
 8013eaa:	6a1b      	ldr	r3, [r3, #32]
 8013eac:	431a      	orrs	r2, r3
 8013eae:	68bb      	ldr	r3, [r7, #8]
 8013eb0:	68db      	ldr	r3, [r3, #12]
 8013eb2:	431a      	orrs	r2, r3
 8013eb4:	68bb      	ldr	r3, [r7, #8]
 8013eb6:	69db      	ldr	r3, [r3, #28]
 8013eb8:	431a      	orrs	r2, r3
 8013eba:	68bb      	ldr	r3, [r7, #8]
 8013ebc:	699b      	ldr	r3, [r3, #24]
 8013ebe:	431a      	orrs	r2, r3
 8013ec0:	68bb      	ldr	r3, [r7, #8]
 8013ec2:	681b      	ldr	r3, [r3, #0]
 8013ec4:	ea42 0103 	orr.w	r1, r2, r3
 8013ec8:	68fb      	ldr	r3, [r7, #12]
 8013eca:	681b      	ldr	r3, [r3, #0]
 8013ecc:	687a      	ldr	r2, [r7, #4]
 8013ece:	430a      	orrs	r2, r1
 8013ed0:	615a      	str	r2, [r3, #20]
        if (FunctionalMode != QSPI_FUNCTIONAL_MODE_MEMORY_MAPPED)
 8013ed2:	687b      	ldr	r3, [r7, #4]
 8013ed4:	f1b3 6f40 	cmp.w	r3, #201326592	@ 0xc000000
 8013ed8:	f000 80d6 	beq.w	8014088 <QSPI_Config+0x300>
          WRITE_REG(hqspi->Instance->AR, cmd->Address);
 8013edc:	68fb      	ldr	r3, [r7, #12]
 8013ede:	681b      	ldr	r3, [r3, #0]
 8013ee0:	68ba      	ldr	r2, [r7, #8]
 8013ee2:	6852      	ldr	r2, [r2, #4]
 8013ee4:	619a      	str	r2, [r3, #24]
}
 8013ee6:	e0cf      	b.n	8014088 <QSPI_Config+0x300>
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 8013ee8:	68bb      	ldr	r3, [r7, #8]
 8013eea:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8013eec:	68bb      	ldr	r3, [r7, #8]
 8013eee:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8013ef0:	431a      	orrs	r2, r3
 8013ef2:	68bb      	ldr	r3, [r7, #8]
 8013ef4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8013ef6:	431a      	orrs	r2, r3
 8013ef8:	68bb      	ldr	r3, [r7, #8]
 8013efa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8013efc:	431a      	orrs	r2, r3
 8013efe:	68bb      	ldr	r3, [r7, #8]
 8013f00:	695b      	ldr	r3, [r3, #20]
 8013f02:	049b      	lsls	r3, r3, #18
 8013f04:	431a      	orrs	r2, r3
 8013f06:	68bb      	ldr	r3, [r7, #8]
 8013f08:	6a1b      	ldr	r3, [r3, #32]
 8013f0a:	431a      	orrs	r2, r3
 8013f0c:	68bb      	ldr	r3, [r7, #8]
 8013f0e:	69db      	ldr	r3, [r3, #28]
 8013f10:	431a      	orrs	r2, r3
 8013f12:	68bb      	ldr	r3, [r7, #8]
 8013f14:	699b      	ldr	r3, [r3, #24]
 8013f16:	431a      	orrs	r2, r3
 8013f18:	68bb      	ldr	r3, [r7, #8]
 8013f1a:	681b      	ldr	r3, [r3, #0]
 8013f1c:	ea42 0103 	orr.w	r1, r2, r3
 8013f20:	68fb      	ldr	r3, [r7, #12]
 8013f22:	681b      	ldr	r3, [r3, #0]
 8013f24:	687a      	ldr	r2, [r7, #4]
 8013f26:	430a      	orrs	r2, r1
 8013f28:	615a      	str	r2, [r3, #20]
}
 8013f2a:	e0ad      	b.n	8014088 <QSPI_Config+0x300>
    if (cmd->AlternateByteMode != QSPI_ALTERNATE_BYTES_NONE)
 8013f2c:	68bb      	ldr	r3, [r7, #8]
 8013f2e:	6a1b      	ldr	r3, [r3, #32]
 8013f30:	2b00      	cmp	r3, #0
 8013f32:	d058      	beq.n	8013fe6 <QSPI_Config+0x25e>
      WRITE_REG(hqspi->Instance->ABR, cmd->AlternateBytes);
 8013f34:	68fb      	ldr	r3, [r7, #12]
 8013f36:	681b      	ldr	r3, [r3, #0]
 8013f38:	68ba      	ldr	r2, [r7, #8]
 8013f3a:	6892      	ldr	r2, [r2, #8]
 8013f3c:	61da      	str	r2, [r3, #28]
      if (cmd->AddressMode != QSPI_ADDRESS_NONE)
 8013f3e:	68bb      	ldr	r3, [r7, #8]
 8013f40:	69db      	ldr	r3, [r3, #28]
 8013f42:	2b00      	cmp	r3, #0
 8013f44:	d02d      	beq.n	8013fa2 <QSPI_Config+0x21a>
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 8013f46:	68bb      	ldr	r3, [r7, #8]
 8013f48:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8013f4a:	68bb      	ldr	r3, [r7, #8]
 8013f4c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8013f4e:	431a      	orrs	r2, r3
 8013f50:	68bb      	ldr	r3, [r7, #8]
 8013f52:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8013f54:	431a      	orrs	r2, r3
 8013f56:	68bb      	ldr	r3, [r7, #8]
 8013f58:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8013f5a:	431a      	orrs	r2, r3
 8013f5c:	68bb      	ldr	r3, [r7, #8]
 8013f5e:	695b      	ldr	r3, [r3, #20]
 8013f60:	049b      	lsls	r3, r3, #18
 8013f62:	431a      	orrs	r2, r3
 8013f64:	68bb      	ldr	r3, [r7, #8]
 8013f66:	691b      	ldr	r3, [r3, #16]
 8013f68:	431a      	orrs	r2, r3
 8013f6a:	68bb      	ldr	r3, [r7, #8]
 8013f6c:	6a1b      	ldr	r3, [r3, #32]
 8013f6e:	431a      	orrs	r2, r3
 8013f70:	68bb      	ldr	r3, [r7, #8]
 8013f72:	68db      	ldr	r3, [r3, #12]
 8013f74:	431a      	orrs	r2, r3
 8013f76:	68bb      	ldr	r3, [r7, #8]
 8013f78:	69db      	ldr	r3, [r3, #28]
 8013f7a:	431a      	orrs	r2, r3
 8013f7c:	68bb      	ldr	r3, [r7, #8]
 8013f7e:	699b      	ldr	r3, [r3, #24]
 8013f80:	ea42 0103 	orr.w	r1, r2, r3
 8013f84:	68fb      	ldr	r3, [r7, #12]
 8013f86:	681b      	ldr	r3, [r3, #0]
 8013f88:	687a      	ldr	r2, [r7, #4]
 8013f8a:	430a      	orrs	r2, r1
 8013f8c:	615a      	str	r2, [r3, #20]
        if (FunctionalMode != QSPI_FUNCTIONAL_MODE_MEMORY_MAPPED)
 8013f8e:	687b      	ldr	r3, [r7, #4]
 8013f90:	f1b3 6f40 	cmp.w	r3, #201326592	@ 0xc000000
 8013f94:	d078      	beq.n	8014088 <QSPI_Config+0x300>
          WRITE_REG(hqspi->Instance->AR, cmd->Address);
 8013f96:	68fb      	ldr	r3, [r7, #12]
 8013f98:	681b      	ldr	r3, [r3, #0]
 8013f9a:	68ba      	ldr	r2, [r7, #8]
 8013f9c:	6852      	ldr	r2, [r2, #4]
 8013f9e:	619a      	str	r2, [r3, #24]
}
 8013fa0:	e072      	b.n	8014088 <QSPI_Config+0x300>
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 8013fa2:	68bb      	ldr	r3, [r7, #8]
 8013fa4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8013fa6:	68bb      	ldr	r3, [r7, #8]
 8013fa8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8013faa:	431a      	orrs	r2, r3
 8013fac:	68bb      	ldr	r3, [r7, #8]
 8013fae:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8013fb0:	431a      	orrs	r2, r3
 8013fb2:	68bb      	ldr	r3, [r7, #8]
 8013fb4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8013fb6:	431a      	orrs	r2, r3
 8013fb8:	68bb      	ldr	r3, [r7, #8]
 8013fba:	695b      	ldr	r3, [r3, #20]
 8013fbc:	049b      	lsls	r3, r3, #18
 8013fbe:	431a      	orrs	r2, r3
 8013fc0:	68bb      	ldr	r3, [r7, #8]
 8013fc2:	691b      	ldr	r3, [r3, #16]
 8013fc4:	431a      	orrs	r2, r3
 8013fc6:	68bb      	ldr	r3, [r7, #8]
 8013fc8:	6a1b      	ldr	r3, [r3, #32]
 8013fca:	431a      	orrs	r2, r3
 8013fcc:	68bb      	ldr	r3, [r7, #8]
 8013fce:	69db      	ldr	r3, [r3, #28]
 8013fd0:	431a      	orrs	r2, r3
 8013fd2:	68bb      	ldr	r3, [r7, #8]
 8013fd4:	699b      	ldr	r3, [r3, #24]
 8013fd6:	ea42 0103 	orr.w	r1, r2, r3
 8013fda:	68fb      	ldr	r3, [r7, #12]
 8013fdc:	681b      	ldr	r3, [r3, #0]
 8013fde:	687a      	ldr	r2, [r7, #4]
 8013fe0:	430a      	orrs	r2, r1
 8013fe2:	615a      	str	r2, [r3, #20]
}
 8013fe4:	e050      	b.n	8014088 <QSPI_Config+0x300>
      if (cmd->AddressMode != QSPI_ADDRESS_NONE)
 8013fe6:	68bb      	ldr	r3, [r7, #8]
 8013fe8:	69db      	ldr	r3, [r3, #28]
 8013fea:	2b00      	cmp	r3, #0
 8013fec:	d02a      	beq.n	8014044 <QSPI_Config+0x2bc>
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 8013fee:	68bb      	ldr	r3, [r7, #8]
 8013ff0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8013ff2:	68bb      	ldr	r3, [r7, #8]
 8013ff4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8013ff6:	431a      	orrs	r2, r3
 8013ff8:	68bb      	ldr	r3, [r7, #8]
 8013ffa:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8013ffc:	431a      	orrs	r2, r3
 8013ffe:	68bb      	ldr	r3, [r7, #8]
 8014000:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8014002:	431a      	orrs	r2, r3
 8014004:	68bb      	ldr	r3, [r7, #8]
 8014006:	695b      	ldr	r3, [r3, #20]
 8014008:	049b      	lsls	r3, r3, #18
 801400a:	431a      	orrs	r2, r3
 801400c:	68bb      	ldr	r3, [r7, #8]
 801400e:	6a1b      	ldr	r3, [r3, #32]
 8014010:	431a      	orrs	r2, r3
 8014012:	68bb      	ldr	r3, [r7, #8]
 8014014:	68db      	ldr	r3, [r3, #12]
 8014016:	431a      	orrs	r2, r3
 8014018:	68bb      	ldr	r3, [r7, #8]
 801401a:	69db      	ldr	r3, [r3, #28]
 801401c:	431a      	orrs	r2, r3
 801401e:	68bb      	ldr	r3, [r7, #8]
 8014020:	699b      	ldr	r3, [r3, #24]
 8014022:	ea42 0103 	orr.w	r1, r2, r3
 8014026:	68fb      	ldr	r3, [r7, #12]
 8014028:	681b      	ldr	r3, [r3, #0]
 801402a:	687a      	ldr	r2, [r7, #4]
 801402c:	430a      	orrs	r2, r1
 801402e:	615a      	str	r2, [r3, #20]
        if (FunctionalMode != QSPI_FUNCTIONAL_MODE_MEMORY_MAPPED)
 8014030:	687b      	ldr	r3, [r7, #4]
 8014032:	f1b3 6f40 	cmp.w	r3, #201326592	@ 0xc000000
 8014036:	d027      	beq.n	8014088 <QSPI_Config+0x300>
          WRITE_REG(hqspi->Instance->AR, cmd->Address);
 8014038:	68fb      	ldr	r3, [r7, #12]
 801403a:	681b      	ldr	r3, [r3, #0]
 801403c:	68ba      	ldr	r2, [r7, #8]
 801403e:	6852      	ldr	r2, [r2, #4]
 8014040:	619a      	str	r2, [r3, #24]
}
 8014042:	e021      	b.n	8014088 <QSPI_Config+0x300>
        if (cmd->DataMode != QSPI_DATA_NONE)
 8014044:	68bb      	ldr	r3, [r7, #8]
 8014046:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8014048:	2b00      	cmp	r3, #0
 801404a:	d01d      	beq.n	8014088 <QSPI_Config+0x300>
          WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 801404c:	68bb      	ldr	r3, [r7, #8]
 801404e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8014050:	68bb      	ldr	r3, [r7, #8]
 8014052:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8014054:	431a      	orrs	r2, r3
 8014056:	68bb      	ldr	r3, [r7, #8]
 8014058:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 801405a:	431a      	orrs	r2, r3
 801405c:	68bb      	ldr	r3, [r7, #8]
 801405e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8014060:	431a      	orrs	r2, r3
 8014062:	68bb      	ldr	r3, [r7, #8]
 8014064:	695b      	ldr	r3, [r3, #20]
 8014066:	049b      	lsls	r3, r3, #18
 8014068:	431a      	orrs	r2, r3
 801406a:	68bb      	ldr	r3, [r7, #8]
 801406c:	6a1b      	ldr	r3, [r3, #32]
 801406e:	431a      	orrs	r2, r3
 8014070:	68bb      	ldr	r3, [r7, #8]
 8014072:	69db      	ldr	r3, [r3, #28]
 8014074:	431a      	orrs	r2, r3
 8014076:	68bb      	ldr	r3, [r7, #8]
 8014078:	699b      	ldr	r3, [r3, #24]
 801407a:	ea42 0103 	orr.w	r1, r2, r3
 801407e:	68fb      	ldr	r3, [r7, #12]
 8014080:	681b      	ldr	r3, [r3, #0]
 8014082:	687a      	ldr	r2, [r7, #4]
 8014084:	430a      	orrs	r2, r1
 8014086:	615a      	str	r2, [r3, #20]
}
 8014088:	bf00      	nop
 801408a:	3714      	adds	r7, #20
 801408c:	46bd      	mov	sp, r7
 801408e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014092:	4770      	bx	lr

08014094 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8014094:	b580      	push	{r7, lr}
 8014096:	b08c      	sub	sp, #48	@ 0x30
 8014098:	af00      	add	r7, sp, #0
 801409a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 801409c:	687b      	ldr	r3, [r7, #4]
 801409e:	2b00      	cmp	r3, #0
 80140a0:	d102      	bne.n	80140a8 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 80140a2:	2301      	movs	r3, #1
 80140a4:	f000 bc48 	b.w	8014938 <HAL_RCC_OscConfig+0x8a4>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80140a8:	687b      	ldr	r3, [r7, #4]
 80140aa:	681b      	ldr	r3, [r3, #0]
 80140ac:	f003 0301 	and.w	r3, r3, #1
 80140b0:	2b00      	cmp	r3, #0
 80140b2:	f000 8088 	beq.w	80141c6 <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80140b6:	4b99      	ldr	r3, [pc, #612]	@ (801431c <HAL_RCC_OscConfig+0x288>)
 80140b8:	691b      	ldr	r3, [r3, #16]
 80140ba:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80140be:	62fb      	str	r3, [r7, #44]	@ 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 80140c0:	4b96      	ldr	r3, [pc, #600]	@ (801431c <HAL_RCC_OscConfig+0x288>)
 80140c2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80140c4:	62bb      	str	r3, [r7, #40]	@ 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 80140c6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80140c8:	2b10      	cmp	r3, #16
 80140ca:	d007      	beq.n	80140dc <HAL_RCC_OscConfig+0x48>
 80140cc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80140ce:	2b18      	cmp	r3, #24
 80140d0:	d111      	bne.n	80140f6 <HAL_RCC_OscConfig+0x62>
 80140d2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80140d4:	f003 0303 	and.w	r3, r3, #3
 80140d8:	2b02      	cmp	r3, #2
 80140da:	d10c      	bne.n	80140f6 <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80140dc:	4b8f      	ldr	r3, [pc, #572]	@ (801431c <HAL_RCC_OscConfig+0x288>)
 80140de:	681b      	ldr	r3, [r3, #0]
 80140e0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80140e4:	2b00      	cmp	r3, #0
 80140e6:	d06d      	beq.n	80141c4 <HAL_RCC_OscConfig+0x130>
 80140e8:	687b      	ldr	r3, [r7, #4]
 80140ea:	685b      	ldr	r3, [r3, #4]
 80140ec:	2b00      	cmp	r3, #0
 80140ee:	d169      	bne.n	80141c4 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 80140f0:	2301      	movs	r3, #1
 80140f2:	f000 bc21 	b.w	8014938 <HAL_RCC_OscConfig+0x8a4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80140f6:	687b      	ldr	r3, [r7, #4]
 80140f8:	685b      	ldr	r3, [r3, #4]
 80140fa:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80140fe:	d106      	bne.n	801410e <HAL_RCC_OscConfig+0x7a>
 8014100:	4b86      	ldr	r3, [pc, #536]	@ (801431c <HAL_RCC_OscConfig+0x288>)
 8014102:	681b      	ldr	r3, [r3, #0]
 8014104:	4a85      	ldr	r2, [pc, #532]	@ (801431c <HAL_RCC_OscConfig+0x288>)
 8014106:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 801410a:	6013      	str	r3, [r2, #0]
 801410c:	e02e      	b.n	801416c <HAL_RCC_OscConfig+0xd8>
 801410e:	687b      	ldr	r3, [r7, #4]
 8014110:	685b      	ldr	r3, [r3, #4]
 8014112:	2b00      	cmp	r3, #0
 8014114:	d10c      	bne.n	8014130 <HAL_RCC_OscConfig+0x9c>
 8014116:	4b81      	ldr	r3, [pc, #516]	@ (801431c <HAL_RCC_OscConfig+0x288>)
 8014118:	681b      	ldr	r3, [r3, #0]
 801411a:	4a80      	ldr	r2, [pc, #512]	@ (801431c <HAL_RCC_OscConfig+0x288>)
 801411c:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8014120:	6013      	str	r3, [r2, #0]
 8014122:	4b7e      	ldr	r3, [pc, #504]	@ (801431c <HAL_RCC_OscConfig+0x288>)
 8014124:	681b      	ldr	r3, [r3, #0]
 8014126:	4a7d      	ldr	r2, [pc, #500]	@ (801431c <HAL_RCC_OscConfig+0x288>)
 8014128:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 801412c:	6013      	str	r3, [r2, #0]
 801412e:	e01d      	b.n	801416c <HAL_RCC_OscConfig+0xd8>
 8014130:	687b      	ldr	r3, [r7, #4]
 8014132:	685b      	ldr	r3, [r3, #4]
 8014134:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8014138:	d10c      	bne.n	8014154 <HAL_RCC_OscConfig+0xc0>
 801413a:	4b78      	ldr	r3, [pc, #480]	@ (801431c <HAL_RCC_OscConfig+0x288>)
 801413c:	681b      	ldr	r3, [r3, #0]
 801413e:	4a77      	ldr	r2, [pc, #476]	@ (801431c <HAL_RCC_OscConfig+0x288>)
 8014140:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8014144:	6013      	str	r3, [r2, #0]
 8014146:	4b75      	ldr	r3, [pc, #468]	@ (801431c <HAL_RCC_OscConfig+0x288>)
 8014148:	681b      	ldr	r3, [r3, #0]
 801414a:	4a74      	ldr	r2, [pc, #464]	@ (801431c <HAL_RCC_OscConfig+0x288>)
 801414c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8014150:	6013      	str	r3, [r2, #0]
 8014152:	e00b      	b.n	801416c <HAL_RCC_OscConfig+0xd8>
 8014154:	4b71      	ldr	r3, [pc, #452]	@ (801431c <HAL_RCC_OscConfig+0x288>)
 8014156:	681b      	ldr	r3, [r3, #0]
 8014158:	4a70      	ldr	r2, [pc, #448]	@ (801431c <HAL_RCC_OscConfig+0x288>)
 801415a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 801415e:	6013      	str	r3, [r2, #0]
 8014160:	4b6e      	ldr	r3, [pc, #440]	@ (801431c <HAL_RCC_OscConfig+0x288>)
 8014162:	681b      	ldr	r3, [r3, #0]
 8014164:	4a6d      	ldr	r2, [pc, #436]	@ (801431c <HAL_RCC_OscConfig+0x288>)
 8014166:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 801416a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 801416c:	687b      	ldr	r3, [r7, #4]
 801416e:	685b      	ldr	r3, [r3, #4]
 8014170:	2b00      	cmp	r3, #0
 8014172:	d013      	beq.n	801419c <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8014174:	f7fc fdc4 	bl	8010d00 <HAL_GetTick>
 8014178:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 801417a:	e008      	b.n	801418e <HAL_RCC_OscConfig+0xfa>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 801417c:	f7fc fdc0 	bl	8010d00 <HAL_GetTick>
 8014180:	4602      	mov	r2, r0
 8014182:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8014184:	1ad3      	subs	r3, r2, r3
 8014186:	2b64      	cmp	r3, #100	@ 0x64
 8014188:	d901      	bls.n	801418e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 801418a:	2303      	movs	r3, #3
 801418c:	e3d4      	b.n	8014938 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 801418e:	4b63      	ldr	r3, [pc, #396]	@ (801431c <HAL_RCC_OscConfig+0x288>)
 8014190:	681b      	ldr	r3, [r3, #0]
 8014192:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8014196:	2b00      	cmp	r3, #0
 8014198:	d0f0      	beq.n	801417c <HAL_RCC_OscConfig+0xe8>
 801419a:	e014      	b.n	80141c6 <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 801419c:	f7fc fdb0 	bl	8010d00 <HAL_GetTick>
 80141a0:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 80141a2:	e008      	b.n	80141b6 <HAL_RCC_OscConfig+0x122>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80141a4:	f7fc fdac 	bl	8010d00 <HAL_GetTick>
 80141a8:	4602      	mov	r2, r0
 80141aa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80141ac:	1ad3      	subs	r3, r2, r3
 80141ae:	2b64      	cmp	r3, #100	@ 0x64
 80141b0:	d901      	bls.n	80141b6 <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 80141b2:	2303      	movs	r3, #3
 80141b4:	e3c0      	b.n	8014938 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 80141b6:	4b59      	ldr	r3, [pc, #356]	@ (801431c <HAL_RCC_OscConfig+0x288>)
 80141b8:	681b      	ldr	r3, [r3, #0]
 80141ba:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80141be:	2b00      	cmp	r3, #0
 80141c0:	d1f0      	bne.n	80141a4 <HAL_RCC_OscConfig+0x110>
 80141c2:	e000      	b.n	80141c6 <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80141c4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80141c6:	687b      	ldr	r3, [r7, #4]
 80141c8:	681b      	ldr	r3, [r3, #0]
 80141ca:	f003 0302 	and.w	r3, r3, #2
 80141ce:	2b00      	cmp	r3, #0
 80141d0:	f000 80ca 	beq.w	8014368 <HAL_RCC_OscConfig+0x2d4>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80141d4:	4b51      	ldr	r3, [pc, #324]	@ (801431c <HAL_RCC_OscConfig+0x288>)
 80141d6:	691b      	ldr	r3, [r3, #16]
 80141d8:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80141dc:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 80141de:	4b4f      	ldr	r3, [pc, #316]	@ (801431c <HAL_RCC_OscConfig+0x288>)
 80141e0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80141e2:	61fb      	str	r3, [r7, #28]
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 80141e4:	6a3b      	ldr	r3, [r7, #32]
 80141e6:	2b00      	cmp	r3, #0
 80141e8:	d007      	beq.n	80141fa <HAL_RCC_OscConfig+0x166>
 80141ea:	6a3b      	ldr	r3, [r7, #32]
 80141ec:	2b18      	cmp	r3, #24
 80141ee:	d156      	bne.n	801429e <HAL_RCC_OscConfig+0x20a>
 80141f0:	69fb      	ldr	r3, [r7, #28]
 80141f2:	f003 0303 	and.w	r3, r3, #3
 80141f6:	2b00      	cmp	r3, #0
 80141f8:	d151      	bne.n	801429e <HAL_RCC_OscConfig+0x20a>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80141fa:	4b48      	ldr	r3, [pc, #288]	@ (801431c <HAL_RCC_OscConfig+0x288>)
 80141fc:	681b      	ldr	r3, [r3, #0]
 80141fe:	f003 0304 	and.w	r3, r3, #4
 8014202:	2b00      	cmp	r3, #0
 8014204:	d005      	beq.n	8014212 <HAL_RCC_OscConfig+0x17e>
 8014206:	687b      	ldr	r3, [r7, #4]
 8014208:	68db      	ldr	r3, [r3, #12]
 801420a:	2b00      	cmp	r3, #0
 801420c:	d101      	bne.n	8014212 <HAL_RCC_OscConfig+0x17e>
      {
        return HAL_ERROR;
 801420e:	2301      	movs	r3, #1
 8014210:	e392      	b.n	8014938 <HAL_RCC_OscConfig+0x8a4>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8014212:	4b42      	ldr	r3, [pc, #264]	@ (801431c <HAL_RCC_OscConfig+0x288>)
 8014214:	681b      	ldr	r3, [r3, #0]
 8014216:	f023 0219 	bic.w	r2, r3, #25
 801421a:	687b      	ldr	r3, [r7, #4]
 801421c:	68db      	ldr	r3, [r3, #12]
 801421e:	493f      	ldr	r1, [pc, #252]	@ (801431c <HAL_RCC_OscConfig+0x288>)
 8014220:	4313      	orrs	r3, r2
 8014222:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8014224:	f7fc fd6c 	bl	8010d00 <HAL_GetTick>
 8014228:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 801422a:	e008      	b.n	801423e <HAL_RCC_OscConfig+0x1aa>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 801422c:	f7fc fd68 	bl	8010d00 <HAL_GetTick>
 8014230:	4602      	mov	r2, r0
 8014232:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8014234:	1ad3      	subs	r3, r2, r3
 8014236:	2b02      	cmp	r3, #2
 8014238:	d901      	bls.n	801423e <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 801423a:	2303      	movs	r3, #3
 801423c:	e37c      	b.n	8014938 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 801423e:	4b37      	ldr	r3, [pc, #220]	@ (801431c <HAL_RCC_OscConfig+0x288>)
 8014240:	681b      	ldr	r3, [r3, #0]
 8014242:	f003 0304 	and.w	r3, r3, #4
 8014246:	2b00      	cmp	r3, #0
 8014248:	d0f0      	beq.n	801422c <HAL_RCC_OscConfig+0x198>
          }
        }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 801424a:	f7fc fd65 	bl	8010d18 <HAL_GetREVID>
 801424e:	4603      	mov	r3, r0
 8014250:	f241 0203 	movw	r2, #4099	@ 0x1003
 8014254:	4293      	cmp	r3, r2
 8014256:	d817      	bhi.n	8014288 <HAL_RCC_OscConfig+0x1f4>
 8014258:	687b      	ldr	r3, [r7, #4]
 801425a:	691b      	ldr	r3, [r3, #16]
 801425c:	2b40      	cmp	r3, #64	@ 0x40
 801425e:	d108      	bne.n	8014272 <HAL_RCC_OscConfig+0x1de>
 8014260:	4b2e      	ldr	r3, [pc, #184]	@ (801431c <HAL_RCC_OscConfig+0x288>)
 8014262:	685b      	ldr	r3, [r3, #4]
 8014264:	f423 337c 	bic.w	r3, r3, #258048	@ 0x3f000
 8014268:	4a2c      	ldr	r2, [pc, #176]	@ (801431c <HAL_RCC_OscConfig+0x288>)
 801426a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 801426e:	6053      	str	r3, [r2, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8014270:	e07a      	b.n	8014368 <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8014272:	4b2a      	ldr	r3, [pc, #168]	@ (801431c <HAL_RCC_OscConfig+0x288>)
 8014274:	685b      	ldr	r3, [r3, #4]
 8014276:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 801427a:	687b      	ldr	r3, [r7, #4]
 801427c:	691b      	ldr	r3, [r3, #16]
 801427e:	031b      	lsls	r3, r3, #12
 8014280:	4926      	ldr	r1, [pc, #152]	@ (801431c <HAL_RCC_OscConfig+0x288>)
 8014282:	4313      	orrs	r3, r2
 8014284:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8014286:	e06f      	b.n	8014368 <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8014288:	4b24      	ldr	r3, [pc, #144]	@ (801431c <HAL_RCC_OscConfig+0x288>)
 801428a:	685b      	ldr	r3, [r3, #4]
 801428c:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8014290:	687b      	ldr	r3, [r7, #4]
 8014292:	691b      	ldr	r3, [r3, #16]
 8014294:	061b      	lsls	r3, r3, #24
 8014296:	4921      	ldr	r1, [pc, #132]	@ (801431c <HAL_RCC_OscConfig+0x288>)
 8014298:	4313      	orrs	r3, r2
 801429a:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 801429c:	e064      	b.n	8014368 <HAL_RCC_OscConfig+0x2d4>
    }

    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 801429e:	687b      	ldr	r3, [r7, #4]
 80142a0:	68db      	ldr	r3, [r3, #12]
 80142a2:	2b00      	cmp	r3, #0
 80142a4:	d047      	beq.n	8014336 <HAL_RCC_OscConfig+0x2a2>
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 80142a6:	4b1d      	ldr	r3, [pc, #116]	@ (801431c <HAL_RCC_OscConfig+0x288>)
 80142a8:	681b      	ldr	r3, [r3, #0]
 80142aa:	f023 0219 	bic.w	r2, r3, #25
 80142ae:	687b      	ldr	r3, [r7, #4]
 80142b0:	68db      	ldr	r3, [r3, #12]
 80142b2:	491a      	ldr	r1, [pc, #104]	@ (801431c <HAL_RCC_OscConfig+0x288>)
 80142b4:	4313      	orrs	r3, r2
 80142b6:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80142b8:	f7fc fd22 	bl	8010d00 <HAL_GetTick>
 80142bc:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80142be:	e008      	b.n	80142d2 <HAL_RCC_OscConfig+0x23e>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80142c0:	f7fc fd1e 	bl	8010d00 <HAL_GetTick>
 80142c4:	4602      	mov	r2, r0
 80142c6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80142c8:	1ad3      	subs	r3, r2, r3
 80142ca:	2b02      	cmp	r3, #2
 80142cc:	d901      	bls.n	80142d2 <HAL_RCC_OscConfig+0x23e>
          {
            return HAL_TIMEOUT;
 80142ce:	2303      	movs	r3, #3
 80142d0:	e332      	b.n	8014938 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80142d2:	4b12      	ldr	r3, [pc, #72]	@ (801431c <HAL_RCC_OscConfig+0x288>)
 80142d4:	681b      	ldr	r3, [r3, #0]
 80142d6:	f003 0304 	and.w	r3, r3, #4
 80142da:	2b00      	cmp	r3, #0
 80142dc:	d0f0      	beq.n	80142c0 <HAL_RCC_OscConfig+0x22c>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80142de:	f7fc fd1b 	bl	8010d18 <HAL_GetREVID>
 80142e2:	4603      	mov	r3, r0
 80142e4:	f241 0203 	movw	r2, #4099	@ 0x1003
 80142e8:	4293      	cmp	r3, r2
 80142ea:	d819      	bhi.n	8014320 <HAL_RCC_OscConfig+0x28c>
 80142ec:	687b      	ldr	r3, [r7, #4]
 80142ee:	691b      	ldr	r3, [r3, #16]
 80142f0:	2b40      	cmp	r3, #64	@ 0x40
 80142f2:	d108      	bne.n	8014306 <HAL_RCC_OscConfig+0x272>
 80142f4:	4b09      	ldr	r3, [pc, #36]	@ (801431c <HAL_RCC_OscConfig+0x288>)
 80142f6:	685b      	ldr	r3, [r3, #4]
 80142f8:	f423 337c 	bic.w	r3, r3, #258048	@ 0x3f000
 80142fc:	4a07      	ldr	r2, [pc, #28]	@ (801431c <HAL_RCC_OscConfig+0x288>)
 80142fe:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8014302:	6053      	str	r3, [r2, #4]
 8014304:	e030      	b.n	8014368 <HAL_RCC_OscConfig+0x2d4>
 8014306:	4b05      	ldr	r3, [pc, #20]	@ (801431c <HAL_RCC_OscConfig+0x288>)
 8014308:	685b      	ldr	r3, [r3, #4]
 801430a:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 801430e:	687b      	ldr	r3, [r7, #4]
 8014310:	691b      	ldr	r3, [r3, #16]
 8014312:	031b      	lsls	r3, r3, #12
 8014314:	4901      	ldr	r1, [pc, #4]	@ (801431c <HAL_RCC_OscConfig+0x288>)
 8014316:	4313      	orrs	r3, r2
 8014318:	604b      	str	r3, [r1, #4]
 801431a:	e025      	b.n	8014368 <HAL_RCC_OscConfig+0x2d4>
 801431c:	58024400 	.word	0x58024400
 8014320:	4b9a      	ldr	r3, [pc, #616]	@ (801458c <HAL_RCC_OscConfig+0x4f8>)
 8014322:	685b      	ldr	r3, [r3, #4]
 8014324:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8014328:	687b      	ldr	r3, [r7, #4]
 801432a:	691b      	ldr	r3, [r3, #16]
 801432c:	061b      	lsls	r3, r3, #24
 801432e:	4997      	ldr	r1, [pc, #604]	@ (801458c <HAL_RCC_OscConfig+0x4f8>)
 8014330:	4313      	orrs	r3, r2
 8014332:	604b      	str	r3, [r1, #4]
 8014334:	e018      	b.n	8014368 <HAL_RCC_OscConfig+0x2d4>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8014336:	4b95      	ldr	r3, [pc, #596]	@ (801458c <HAL_RCC_OscConfig+0x4f8>)
 8014338:	681b      	ldr	r3, [r3, #0]
 801433a:	4a94      	ldr	r2, [pc, #592]	@ (801458c <HAL_RCC_OscConfig+0x4f8>)
 801433c:	f023 0301 	bic.w	r3, r3, #1
 8014340:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8014342:	f7fc fcdd 	bl	8010d00 <HAL_GetTick>
 8014346:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8014348:	e008      	b.n	801435c <HAL_RCC_OscConfig+0x2c8>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 801434a:	f7fc fcd9 	bl	8010d00 <HAL_GetTick>
 801434e:	4602      	mov	r2, r0
 8014350:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8014352:	1ad3      	subs	r3, r2, r3
 8014354:	2b02      	cmp	r3, #2
 8014356:	d901      	bls.n	801435c <HAL_RCC_OscConfig+0x2c8>
          {
            return HAL_TIMEOUT;
 8014358:	2303      	movs	r3, #3
 801435a:	e2ed      	b.n	8014938 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 801435c:	4b8b      	ldr	r3, [pc, #556]	@ (801458c <HAL_RCC_OscConfig+0x4f8>)
 801435e:	681b      	ldr	r3, [r3, #0]
 8014360:	f003 0304 	and.w	r3, r3, #4
 8014364:	2b00      	cmp	r3, #0
 8014366:	d1f0      	bne.n	801434a <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 8014368:	687b      	ldr	r3, [r7, #4]
 801436a:	681b      	ldr	r3, [r3, #0]
 801436c:	f003 0310 	and.w	r3, r3, #16
 8014370:	2b00      	cmp	r3, #0
 8014372:	f000 80a9 	beq.w	80144c8 <HAL_RCC_OscConfig+0x434>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8014376:	4b85      	ldr	r3, [pc, #532]	@ (801458c <HAL_RCC_OscConfig+0x4f8>)
 8014378:	691b      	ldr	r3, [r3, #16]
 801437a:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 801437e:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8014380:	4b82      	ldr	r3, [pc, #520]	@ (801458c <HAL_RCC_OscConfig+0x4f8>)
 8014382:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8014384:	617b      	str	r3, [r7, #20]
    if ((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 8014386:	69bb      	ldr	r3, [r7, #24]
 8014388:	2b08      	cmp	r3, #8
 801438a:	d007      	beq.n	801439c <HAL_RCC_OscConfig+0x308>
 801438c:	69bb      	ldr	r3, [r7, #24]
 801438e:	2b18      	cmp	r3, #24
 8014390:	d13a      	bne.n	8014408 <HAL_RCC_OscConfig+0x374>
 8014392:	697b      	ldr	r3, [r7, #20]
 8014394:	f003 0303 	and.w	r3, r3, #3
 8014398:	2b01      	cmp	r3, #1
 801439a:	d135      	bne.n	8014408 <HAL_RCC_OscConfig+0x374>
    {
      /* When CSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 801439c:	4b7b      	ldr	r3, [pc, #492]	@ (801458c <HAL_RCC_OscConfig+0x4f8>)
 801439e:	681b      	ldr	r3, [r3, #0]
 80143a0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80143a4:	2b00      	cmp	r3, #0
 80143a6:	d005      	beq.n	80143b4 <HAL_RCC_OscConfig+0x320>
 80143a8:	687b      	ldr	r3, [r7, #4]
 80143aa:	69db      	ldr	r3, [r3, #28]
 80143ac:	2b80      	cmp	r3, #128	@ 0x80
 80143ae:	d001      	beq.n	80143b4 <HAL_RCC_OscConfig+0x320>
      {
        return HAL_ERROR;
 80143b0:	2301      	movs	r3, #1
 80143b2:	e2c1      	b.n	8014938 <HAL_RCC_OscConfig+0x8a4>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80143b4:	f7fc fcb0 	bl	8010d18 <HAL_GetREVID>
 80143b8:	4603      	mov	r3, r0
 80143ba:	f241 0203 	movw	r2, #4099	@ 0x1003
 80143be:	4293      	cmp	r3, r2
 80143c0:	d817      	bhi.n	80143f2 <HAL_RCC_OscConfig+0x35e>
 80143c2:	687b      	ldr	r3, [r7, #4]
 80143c4:	6a1b      	ldr	r3, [r3, #32]
 80143c6:	2b20      	cmp	r3, #32
 80143c8:	d108      	bne.n	80143dc <HAL_RCC_OscConfig+0x348>
 80143ca:	4b70      	ldr	r3, [pc, #448]	@ (801458c <HAL_RCC_OscConfig+0x4f8>)
 80143cc:	685b      	ldr	r3, [r3, #4]
 80143ce:	f023 43f8 	bic.w	r3, r3, #2080374784	@ 0x7c000000
 80143d2:	4a6e      	ldr	r2, [pc, #440]	@ (801458c <HAL_RCC_OscConfig+0x4f8>)
 80143d4:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 80143d8:	6053      	str	r3, [r2, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 80143da:	e075      	b.n	80144c8 <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80143dc:	4b6b      	ldr	r3, [pc, #428]	@ (801458c <HAL_RCC_OscConfig+0x4f8>)
 80143de:	685b      	ldr	r3, [r3, #4]
 80143e0:	f023 42f8 	bic.w	r2, r3, #2080374784	@ 0x7c000000
 80143e4:	687b      	ldr	r3, [r7, #4]
 80143e6:	6a1b      	ldr	r3, [r3, #32]
 80143e8:	069b      	lsls	r3, r3, #26
 80143ea:	4968      	ldr	r1, [pc, #416]	@ (801458c <HAL_RCC_OscConfig+0x4f8>)
 80143ec:	4313      	orrs	r3, r2
 80143ee:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 80143f0:	e06a      	b.n	80144c8 <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80143f2:	4b66      	ldr	r3, [pc, #408]	@ (801458c <HAL_RCC_OscConfig+0x4f8>)
 80143f4:	68db      	ldr	r3, [r3, #12]
 80143f6:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
 80143fa:	687b      	ldr	r3, [r7, #4]
 80143fc:	6a1b      	ldr	r3, [r3, #32]
 80143fe:	061b      	lsls	r3, r3, #24
 8014400:	4962      	ldr	r1, [pc, #392]	@ (801458c <HAL_RCC_OscConfig+0x4f8>)
 8014402:	4313      	orrs	r3, r2
 8014404:	60cb      	str	r3, [r1, #12]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8014406:	e05f      	b.n	80144c8 <HAL_RCC_OscConfig+0x434>
      }
    }
    else
    {
      /* Check the CSI State */
      if ((RCC_OscInitStruct->CSIState) != RCC_CSI_OFF)
 8014408:	687b      	ldr	r3, [r7, #4]
 801440a:	69db      	ldr	r3, [r3, #28]
 801440c:	2b00      	cmp	r3, #0
 801440e:	d042      	beq.n	8014496 <HAL_RCC_OscConfig+0x402>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 8014410:	4b5e      	ldr	r3, [pc, #376]	@ (801458c <HAL_RCC_OscConfig+0x4f8>)
 8014412:	681b      	ldr	r3, [r3, #0]
 8014414:	4a5d      	ldr	r2, [pc, #372]	@ (801458c <HAL_RCC_OscConfig+0x4f8>)
 8014416:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 801441a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 801441c:	f7fc fc70 	bl	8010d00 <HAL_GetTick>
 8014420:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till CSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8014422:	e008      	b.n	8014436 <HAL_RCC_OscConfig+0x3a2>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 8014424:	f7fc fc6c 	bl	8010d00 <HAL_GetTick>
 8014428:	4602      	mov	r2, r0
 801442a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801442c:	1ad3      	subs	r3, r2, r3
 801442e:	2b02      	cmp	r3, #2
 8014430:	d901      	bls.n	8014436 <HAL_RCC_OscConfig+0x3a2>
          {
            return HAL_TIMEOUT;
 8014432:	2303      	movs	r3, #3
 8014434:	e280      	b.n	8014938 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8014436:	4b55      	ldr	r3, [pc, #340]	@ (801458c <HAL_RCC_OscConfig+0x4f8>)
 8014438:	681b      	ldr	r3, [r3, #0]
 801443a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 801443e:	2b00      	cmp	r3, #0
 8014440:	d0f0      	beq.n	8014424 <HAL_RCC_OscConfig+0x390>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8014442:	f7fc fc69 	bl	8010d18 <HAL_GetREVID>
 8014446:	4603      	mov	r3, r0
 8014448:	f241 0203 	movw	r2, #4099	@ 0x1003
 801444c:	4293      	cmp	r3, r2
 801444e:	d817      	bhi.n	8014480 <HAL_RCC_OscConfig+0x3ec>
 8014450:	687b      	ldr	r3, [r7, #4]
 8014452:	6a1b      	ldr	r3, [r3, #32]
 8014454:	2b20      	cmp	r3, #32
 8014456:	d108      	bne.n	801446a <HAL_RCC_OscConfig+0x3d6>
 8014458:	4b4c      	ldr	r3, [pc, #304]	@ (801458c <HAL_RCC_OscConfig+0x4f8>)
 801445a:	685b      	ldr	r3, [r3, #4]
 801445c:	f023 43f8 	bic.w	r3, r3, #2080374784	@ 0x7c000000
 8014460:	4a4a      	ldr	r2, [pc, #296]	@ (801458c <HAL_RCC_OscConfig+0x4f8>)
 8014462:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8014466:	6053      	str	r3, [r2, #4]
 8014468:	e02e      	b.n	80144c8 <HAL_RCC_OscConfig+0x434>
 801446a:	4b48      	ldr	r3, [pc, #288]	@ (801458c <HAL_RCC_OscConfig+0x4f8>)
 801446c:	685b      	ldr	r3, [r3, #4]
 801446e:	f023 42f8 	bic.w	r2, r3, #2080374784	@ 0x7c000000
 8014472:	687b      	ldr	r3, [r7, #4]
 8014474:	6a1b      	ldr	r3, [r3, #32]
 8014476:	069b      	lsls	r3, r3, #26
 8014478:	4944      	ldr	r1, [pc, #272]	@ (801458c <HAL_RCC_OscConfig+0x4f8>)
 801447a:	4313      	orrs	r3, r2
 801447c:	604b      	str	r3, [r1, #4]
 801447e:	e023      	b.n	80144c8 <HAL_RCC_OscConfig+0x434>
 8014480:	4b42      	ldr	r3, [pc, #264]	@ (801458c <HAL_RCC_OscConfig+0x4f8>)
 8014482:	68db      	ldr	r3, [r3, #12]
 8014484:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
 8014488:	687b      	ldr	r3, [r7, #4]
 801448a:	6a1b      	ldr	r3, [r3, #32]
 801448c:	061b      	lsls	r3, r3, #24
 801448e:	493f      	ldr	r1, [pc, #252]	@ (801458c <HAL_RCC_OscConfig+0x4f8>)
 8014490:	4313      	orrs	r3, r2
 8014492:	60cb      	str	r3, [r1, #12]
 8014494:	e018      	b.n	80144c8 <HAL_RCC_OscConfig+0x434>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 8014496:	4b3d      	ldr	r3, [pc, #244]	@ (801458c <HAL_RCC_OscConfig+0x4f8>)
 8014498:	681b      	ldr	r3, [r3, #0]
 801449a:	4a3c      	ldr	r2, [pc, #240]	@ (801458c <HAL_RCC_OscConfig+0x4f8>)
 801449c:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80144a0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80144a2:	f7fc fc2d 	bl	8010d00 <HAL_GetTick>
 80144a6:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till CSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 80144a8:	e008      	b.n	80144bc <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 80144aa:	f7fc fc29 	bl	8010d00 <HAL_GetTick>
 80144ae:	4602      	mov	r2, r0
 80144b0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80144b2:	1ad3      	subs	r3, r2, r3
 80144b4:	2b02      	cmp	r3, #2
 80144b6:	d901      	bls.n	80144bc <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 80144b8:	2303      	movs	r3, #3
 80144ba:	e23d      	b.n	8014938 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 80144bc:	4b33      	ldr	r3, [pc, #204]	@ (801458c <HAL_RCC_OscConfig+0x4f8>)
 80144be:	681b      	ldr	r3, [r3, #0]
 80144c0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80144c4:	2b00      	cmp	r3, #0
 80144c6:	d1f0      	bne.n	80144aa <HAL_RCC_OscConfig+0x416>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80144c8:	687b      	ldr	r3, [r7, #4]
 80144ca:	681b      	ldr	r3, [r3, #0]
 80144cc:	f003 0308 	and.w	r3, r3, #8
 80144d0:	2b00      	cmp	r3, #0
 80144d2:	d036      	beq.n	8014542 <HAL_RCC_OscConfig+0x4ae>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 80144d4:	687b      	ldr	r3, [r7, #4]
 80144d6:	695b      	ldr	r3, [r3, #20]
 80144d8:	2b00      	cmp	r3, #0
 80144da:	d019      	beq.n	8014510 <HAL_RCC_OscConfig+0x47c>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80144dc:	4b2b      	ldr	r3, [pc, #172]	@ (801458c <HAL_RCC_OscConfig+0x4f8>)
 80144de:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80144e0:	4a2a      	ldr	r2, [pc, #168]	@ (801458c <HAL_RCC_OscConfig+0x4f8>)
 80144e2:	f043 0301 	orr.w	r3, r3, #1
 80144e6:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80144e8:	f7fc fc0a 	bl	8010d00 <HAL_GetTick>
 80144ec:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 80144ee:	e008      	b.n	8014502 <HAL_RCC_OscConfig+0x46e>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80144f0:	f7fc fc06 	bl	8010d00 <HAL_GetTick>
 80144f4:	4602      	mov	r2, r0
 80144f6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80144f8:	1ad3      	subs	r3, r2, r3
 80144fa:	2b02      	cmp	r3, #2
 80144fc:	d901      	bls.n	8014502 <HAL_RCC_OscConfig+0x46e>
        {
          return HAL_TIMEOUT;
 80144fe:	2303      	movs	r3, #3
 8014500:	e21a      	b.n	8014938 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8014502:	4b22      	ldr	r3, [pc, #136]	@ (801458c <HAL_RCC_OscConfig+0x4f8>)
 8014504:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8014506:	f003 0302 	and.w	r3, r3, #2
 801450a:	2b00      	cmp	r3, #0
 801450c:	d0f0      	beq.n	80144f0 <HAL_RCC_OscConfig+0x45c>
 801450e:	e018      	b.n	8014542 <HAL_RCC_OscConfig+0x4ae>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8014510:	4b1e      	ldr	r3, [pc, #120]	@ (801458c <HAL_RCC_OscConfig+0x4f8>)
 8014512:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8014514:	4a1d      	ldr	r2, [pc, #116]	@ (801458c <HAL_RCC_OscConfig+0x4f8>)
 8014516:	f023 0301 	bic.w	r3, r3, #1
 801451a:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 801451c:	f7fc fbf0 	bl	8010d00 <HAL_GetTick>
 8014520:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8014522:	e008      	b.n	8014536 <HAL_RCC_OscConfig+0x4a2>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8014524:	f7fc fbec 	bl	8010d00 <HAL_GetTick>
 8014528:	4602      	mov	r2, r0
 801452a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801452c:	1ad3      	subs	r3, r2, r3
 801452e:	2b02      	cmp	r3, #2
 8014530:	d901      	bls.n	8014536 <HAL_RCC_OscConfig+0x4a2>
        {
          return HAL_TIMEOUT;
 8014532:	2303      	movs	r3, #3
 8014534:	e200      	b.n	8014938 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8014536:	4b15      	ldr	r3, [pc, #84]	@ (801458c <HAL_RCC_OscConfig+0x4f8>)
 8014538:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 801453a:	f003 0302 	and.w	r3, r3, #2
 801453e:	2b00      	cmp	r3, #0
 8014540:	d1f0      	bne.n	8014524 <HAL_RCC_OscConfig+0x490>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8014542:	687b      	ldr	r3, [r7, #4]
 8014544:	681b      	ldr	r3, [r3, #0]
 8014546:	f003 0320 	and.w	r3, r3, #32
 801454a:	2b00      	cmp	r3, #0
 801454c:	d039      	beq.n	80145c2 <HAL_RCC_OscConfig+0x52e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if ((RCC_OscInitStruct->HSI48State) != RCC_HSI48_OFF)
 801454e:	687b      	ldr	r3, [r7, #4]
 8014550:	699b      	ldr	r3, [r3, #24]
 8014552:	2b00      	cmp	r3, #0
 8014554:	d01c      	beq.n	8014590 <HAL_RCC_OscConfig+0x4fc>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8014556:	4b0d      	ldr	r3, [pc, #52]	@ (801458c <HAL_RCC_OscConfig+0x4f8>)
 8014558:	681b      	ldr	r3, [r3, #0]
 801455a:	4a0c      	ldr	r2, [pc, #48]	@ (801458c <HAL_RCC_OscConfig+0x4f8>)
 801455c:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8014560:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8014562:	f7fc fbcd 	bl	8010d00 <HAL_GetTick>
 8014566:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8014568:	e008      	b.n	801457c <HAL_RCC_OscConfig+0x4e8>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 801456a:	f7fc fbc9 	bl	8010d00 <HAL_GetTick>
 801456e:	4602      	mov	r2, r0
 8014570:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8014572:	1ad3      	subs	r3, r2, r3
 8014574:	2b02      	cmp	r3, #2
 8014576:	d901      	bls.n	801457c <HAL_RCC_OscConfig+0x4e8>
        {
          return HAL_TIMEOUT;
 8014578:	2303      	movs	r3, #3
 801457a:	e1dd      	b.n	8014938 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 801457c:	4b03      	ldr	r3, [pc, #12]	@ (801458c <HAL_RCC_OscConfig+0x4f8>)
 801457e:	681b      	ldr	r3, [r3, #0]
 8014580:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8014584:	2b00      	cmp	r3, #0
 8014586:	d0f0      	beq.n	801456a <HAL_RCC_OscConfig+0x4d6>
 8014588:	e01b      	b.n	80145c2 <HAL_RCC_OscConfig+0x52e>
 801458a:	bf00      	nop
 801458c:	58024400 	.word	0x58024400
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8014590:	4b9b      	ldr	r3, [pc, #620]	@ (8014800 <HAL_RCC_OscConfig+0x76c>)
 8014592:	681b      	ldr	r3, [r3, #0]
 8014594:	4a9a      	ldr	r2, [pc, #616]	@ (8014800 <HAL_RCC_OscConfig+0x76c>)
 8014596:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 801459a:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 801459c:	f7fc fbb0 	bl	8010d00 <HAL_GetTick>
 80145a0:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 80145a2:	e008      	b.n	80145b6 <HAL_RCC_OscConfig+0x522>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80145a4:	f7fc fbac 	bl	8010d00 <HAL_GetTick>
 80145a8:	4602      	mov	r2, r0
 80145aa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80145ac:	1ad3      	subs	r3, r2, r3
 80145ae:	2b02      	cmp	r3, #2
 80145b0:	d901      	bls.n	80145b6 <HAL_RCC_OscConfig+0x522>
        {
          return HAL_TIMEOUT;
 80145b2:	2303      	movs	r3, #3
 80145b4:	e1c0      	b.n	8014938 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 80145b6:	4b92      	ldr	r3, [pc, #584]	@ (8014800 <HAL_RCC_OscConfig+0x76c>)
 80145b8:	681b      	ldr	r3, [r3, #0]
 80145ba:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80145be:	2b00      	cmp	r3, #0
 80145c0:	d1f0      	bne.n	80145a4 <HAL_RCC_OscConfig+0x510>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80145c2:	687b      	ldr	r3, [r7, #4]
 80145c4:	681b      	ldr	r3, [r3, #0]
 80145c6:	f003 0304 	and.w	r3, r3, #4
 80145ca:	2b00      	cmp	r3, #0
 80145cc:	f000 8081 	beq.w	80146d2 <HAL_RCC_OscConfig+0x63e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 80145d0:	4b8c      	ldr	r3, [pc, #560]	@ (8014804 <HAL_RCC_OscConfig+0x770>)
 80145d2:	681b      	ldr	r3, [r3, #0]
 80145d4:	4a8b      	ldr	r2, [pc, #556]	@ (8014804 <HAL_RCC_OscConfig+0x770>)
 80145d6:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80145da:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80145dc:	f7fc fb90 	bl	8010d00 <HAL_GetTick>
 80145e0:	6278      	str	r0, [r7, #36]	@ 0x24

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80145e2:	e008      	b.n	80145f6 <HAL_RCC_OscConfig+0x562>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80145e4:	f7fc fb8c 	bl	8010d00 <HAL_GetTick>
 80145e8:	4602      	mov	r2, r0
 80145ea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80145ec:	1ad3      	subs	r3, r2, r3
 80145ee:	2b64      	cmp	r3, #100	@ 0x64
 80145f0:	d901      	bls.n	80145f6 <HAL_RCC_OscConfig+0x562>
      {
        return HAL_TIMEOUT;
 80145f2:	2303      	movs	r3, #3
 80145f4:	e1a0      	b.n	8014938 <HAL_RCC_OscConfig+0x8a4>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80145f6:	4b83      	ldr	r3, [pc, #524]	@ (8014804 <HAL_RCC_OscConfig+0x770>)
 80145f8:	681b      	ldr	r3, [r3, #0]
 80145fa:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80145fe:	2b00      	cmp	r3, #0
 8014600:	d0f0      	beq.n	80145e4 <HAL_RCC_OscConfig+0x550>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8014602:	687b      	ldr	r3, [r7, #4]
 8014604:	689b      	ldr	r3, [r3, #8]
 8014606:	2b01      	cmp	r3, #1
 8014608:	d106      	bne.n	8014618 <HAL_RCC_OscConfig+0x584>
 801460a:	4b7d      	ldr	r3, [pc, #500]	@ (8014800 <HAL_RCC_OscConfig+0x76c>)
 801460c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 801460e:	4a7c      	ldr	r2, [pc, #496]	@ (8014800 <HAL_RCC_OscConfig+0x76c>)
 8014610:	f043 0301 	orr.w	r3, r3, #1
 8014614:	6713      	str	r3, [r2, #112]	@ 0x70
 8014616:	e02d      	b.n	8014674 <HAL_RCC_OscConfig+0x5e0>
 8014618:	687b      	ldr	r3, [r7, #4]
 801461a:	689b      	ldr	r3, [r3, #8]
 801461c:	2b00      	cmp	r3, #0
 801461e:	d10c      	bne.n	801463a <HAL_RCC_OscConfig+0x5a6>
 8014620:	4b77      	ldr	r3, [pc, #476]	@ (8014800 <HAL_RCC_OscConfig+0x76c>)
 8014622:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8014624:	4a76      	ldr	r2, [pc, #472]	@ (8014800 <HAL_RCC_OscConfig+0x76c>)
 8014626:	f023 0301 	bic.w	r3, r3, #1
 801462a:	6713      	str	r3, [r2, #112]	@ 0x70
 801462c:	4b74      	ldr	r3, [pc, #464]	@ (8014800 <HAL_RCC_OscConfig+0x76c>)
 801462e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8014630:	4a73      	ldr	r2, [pc, #460]	@ (8014800 <HAL_RCC_OscConfig+0x76c>)
 8014632:	f023 0304 	bic.w	r3, r3, #4
 8014636:	6713      	str	r3, [r2, #112]	@ 0x70
 8014638:	e01c      	b.n	8014674 <HAL_RCC_OscConfig+0x5e0>
 801463a:	687b      	ldr	r3, [r7, #4]
 801463c:	689b      	ldr	r3, [r3, #8]
 801463e:	2b05      	cmp	r3, #5
 8014640:	d10c      	bne.n	801465c <HAL_RCC_OscConfig+0x5c8>
 8014642:	4b6f      	ldr	r3, [pc, #444]	@ (8014800 <HAL_RCC_OscConfig+0x76c>)
 8014644:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8014646:	4a6e      	ldr	r2, [pc, #440]	@ (8014800 <HAL_RCC_OscConfig+0x76c>)
 8014648:	f043 0304 	orr.w	r3, r3, #4
 801464c:	6713      	str	r3, [r2, #112]	@ 0x70
 801464e:	4b6c      	ldr	r3, [pc, #432]	@ (8014800 <HAL_RCC_OscConfig+0x76c>)
 8014650:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8014652:	4a6b      	ldr	r2, [pc, #428]	@ (8014800 <HAL_RCC_OscConfig+0x76c>)
 8014654:	f043 0301 	orr.w	r3, r3, #1
 8014658:	6713      	str	r3, [r2, #112]	@ 0x70
 801465a:	e00b      	b.n	8014674 <HAL_RCC_OscConfig+0x5e0>
 801465c:	4b68      	ldr	r3, [pc, #416]	@ (8014800 <HAL_RCC_OscConfig+0x76c>)
 801465e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8014660:	4a67      	ldr	r2, [pc, #412]	@ (8014800 <HAL_RCC_OscConfig+0x76c>)
 8014662:	f023 0301 	bic.w	r3, r3, #1
 8014666:	6713      	str	r3, [r2, #112]	@ 0x70
 8014668:	4b65      	ldr	r3, [pc, #404]	@ (8014800 <HAL_RCC_OscConfig+0x76c>)
 801466a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 801466c:	4a64      	ldr	r2, [pc, #400]	@ (8014800 <HAL_RCC_OscConfig+0x76c>)
 801466e:	f023 0304 	bic.w	r3, r3, #4
 8014672:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8014674:	687b      	ldr	r3, [r7, #4]
 8014676:	689b      	ldr	r3, [r3, #8]
 8014678:	2b00      	cmp	r3, #0
 801467a:	d015      	beq.n	80146a8 <HAL_RCC_OscConfig+0x614>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 801467c:	f7fc fb40 	bl	8010d00 <HAL_GetTick>
 8014680:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8014682:	e00a      	b.n	801469a <HAL_RCC_OscConfig+0x606>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8014684:	f7fc fb3c 	bl	8010d00 <HAL_GetTick>
 8014688:	4602      	mov	r2, r0
 801468a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801468c:	1ad3      	subs	r3, r2, r3
 801468e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8014692:	4293      	cmp	r3, r2
 8014694:	d901      	bls.n	801469a <HAL_RCC_OscConfig+0x606>
        {
          return HAL_TIMEOUT;
 8014696:	2303      	movs	r3, #3
 8014698:	e14e      	b.n	8014938 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 801469a:	4b59      	ldr	r3, [pc, #356]	@ (8014800 <HAL_RCC_OscConfig+0x76c>)
 801469c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 801469e:	f003 0302 	and.w	r3, r3, #2
 80146a2:	2b00      	cmp	r3, #0
 80146a4:	d0ee      	beq.n	8014684 <HAL_RCC_OscConfig+0x5f0>
 80146a6:	e014      	b.n	80146d2 <HAL_RCC_OscConfig+0x63e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80146a8:	f7fc fb2a 	bl	8010d00 <HAL_GetTick>
 80146ac:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 80146ae:	e00a      	b.n	80146c6 <HAL_RCC_OscConfig+0x632>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80146b0:	f7fc fb26 	bl	8010d00 <HAL_GetTick>
 80146b4:	4602      	mov	r2, r0
 80146b6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80146b8:	1ad3      	subs	r3, r2, r3
 80146ba:	f241 3288 	movw	r2, #5000	@ 0x1388
 80146be:	4293      	cmp	r3, r2
 80146c0:	d901      	bls.n	80146c6 <HAL_RCC_OscConfig+0x632>
        {
          return HAL_TIMEOUT;
 80146c2:	2303      	movs	r3, #3
 80146c4:	e138      	b.n	8014938 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 80146c6:	4b4e      	ldr	r3, [pc, #312]	@ (8014800 <HAL_RCC_OscConfig+0x76c>)
 80146c8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80146ca:	f003 0302 	and.w	r3, r3, #2
 80146ce:	2b00      	cmp	r3, #0
 80146d0:	d1ee      	bne.n	80146b0 <HAL_RCC_OscConfig+0x61c>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80146d2:	687b      	ldr	r3, [r7, #4]
 80146d4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80146d6:	2b00      	cmp	r3, #0
 80146d8:	f000 812d 	beq.w	8014936 <HAL_RCC_OscConfig+0x8a2>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 80146dc:	4b48      	ldr	r3, [pc, #288]	@ (8014800 <HAL_RCC_OscConfig+0x76c>)
 80146de:	691b      	ldr	r3, [r3, #16]
 80146e0:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80146e4:	2b18      	cmp	r3, #24
 80146e6:	f000 80bd 	beq.w	8014864 <HAL_RCC_OscConfig+0x7d0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80146ea:	687b      	ldr	r3, [r7, #4]
 80146ec:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80146ee:	2b02      	cmp	r3, #2
 80146f0:	f040 809e 	bne.w	8014830 <HAL_RCC_OscConfig+0x79c>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80146f4:	4b42      	ldr	r3, [pc, #264]	@ (8014800 <HAL_RCC_OscConfig+0x76c>)
 80146f6:	681b      	ldr	r3, [r3, #0]
 80146f8:	4a41      	ldr	r2, [pc, #260]	@ (8014800 <HAL_RCC_OscConfig+0x76c>)
 80146fa:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80146fe:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8014700:	f7fc fafe 	bl	8010d00 <HAL_GetTick>
 8014704:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8014706:	e008      	b.n	801471a <HAL_RCC_OscConfig+0x686>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8014708:	f7fc fafa 	bl	8010d00 <HAL_GetTick>
 801470c:	4602      	mov	r2, r0
 801470e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8014710:	1ad3      	subs	r3, r2, r3
 8014712:	2b02      	cmp	r3, #2
 8014714:	d901      	bls.n	801471a <HAL_RCC_OscConfig+0x686>
          {
            return HAL_TIMEOUT;
 8014716:	2303      	movs	r3, #3
 8014718:	e10e      	b.n	8014938 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 801471a:	4b39      	ldr	r3, [pc, #228]	@ (8014800 <HAL_RCC_OscConfig+0x76c>)
 801471c:	681b      	ldr	r3, [r3, #0]
 801471e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8014722:	2b00      	cmp	r3, #0
 8014724:	d1f0      	bne.n	8014708 <HAL_RCC_OscConfig+0x674>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8014726:	4b36      	ldr	r3, [pc, #216]	@ (8014800 <HAL_RCC_OscConfig+0x76c>)
 8014728:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 801472a:	4b37      	ldr	r3, [pc, #220]	@ (8014808 <HAL_RCC_OscConfig+0x774>)
 801472c:	4013      	ands	r3, r2
 801472e:	687a      	ldr	r2, [r7, #4]
 8014730:	6a91      	ldr	r1, [r2, #40]	@ 0x28
 8014732:	687a      	ldr	r2, [r7, #4]
 8014734:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 8014736:	0112      	lsls	r2, r2, #4
 8014738:	430a      	orrs	r2, r1
 801473a:	4931      	ldr	r1, [pc, #196]	@ (8014800 <HAL_RCC_OscConfig+0x76c>)
 801473c:	4313      	orrs	r3, r2
 801473e:	628b      	str	r3, [r1, #40]	@ 0x28
 8014740:	687b      	ldr	r3, [r7, #4]
 8014742:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8014744:	3b01      	subs	r3, #1
 8014746:	f3c3 0208 	ubfx	r2, r3, #0, #9
 801474a:	687b      	ldr	r3, [r7, #4]
 801474c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 801474e:	3b01      	subs	r3, #1
 8014750:	025b      	lsls	r3, r3, #9
 8014752:	b29b      	uxth	r3, r3
 8014754:	431a      	orrs	r2, r3
 8014756:	687b      	ldr	r3, [r7, #4]
 8014758:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 801475a:	3b01      	subs	r3, #1
 801475c:	041b      	lsls	r3, r3, #16
 801475e:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 8014762:	431a      	orrs	r2, r3
 8014764:	687b      	ldr	r3, [r7, #4]
 8014766:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8014768:	3b01      	subs	r3, #1
 801476a:	061b      	lsls	r3, r3, #24
 801476c:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 8014770:	4923      	ldr	r1, [pc, #140]	@ (8014800 <HAL_RCC_OscConfig+0x76c>)
 8014772:	4313      	orrs	r3, r2
 8014774:	630b      	str	r3, [r1, #48]	@ 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Disable PLLFRACN . */
        __HAL_RCC_PLLFRACN_DISABLE();
 8014776:	4b22      	ldr	r3, [pc, #136]	@ (8014800 <HAL_RCC_OscConfig+0x76c>)
 8014778:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801477a:	4a21      	ldr	r2, [pc, #132]	@ (8014800 <HAL_RCC_OscConfig+0x76c>)
 801477c:	f023 0301 	bic.w	r3, r3, #1
 8014780:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Configure PLL PLL1FRACN */
        __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8014782:	4b1f      	ldr	r3, [pc, #124]	@ (8014800 <HAL_RCC_OscConfig+0x76c>)
 8014784:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8014786:	4b21      	ldr	r3, [pc, #132]	@ (801480c <HAL_RCC_OscConfig+0x778>)
 8014788:	4013      	ands	r3, r2
 801478a:	687a      	ldr	r2, [r7, #4]
 801478c:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 801478e:	00d2      	lsls	r2, r2, #3
 8014790:	491b      	ldr	r1, [pc, #108]	@ (8014800 <HAL_RCC_OscConfig+0x76c>)
 8014792:	4313      	orrs	r3, r2
 8014794:	634b      	str	r3, [r1, #52]	@ 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 8014796:	4b1a      	ldr	r3, [pc, #104]	@ (8014800 <HAL_RCC_OscConfig+0x76c>)
 8014798:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801479a:	f023 020c 	bic.w	r2, r3, #12
 801479e:	687b      	ldr	r3, [r7, #4]
 80147a0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80147a2:	4917      	ldr	r1, [pc, #92]	@ (8014800 <HAL_RCC_OscConfig+0x76c>)
 80147a4:	4313      	orrs	r3, r2
 80147a6:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 80147a8:	4b15      	ldr	r3, [pc, #84]	@ (8014800 <HAL_RCC_OscConfig+0x76c>)
 80147aa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80147ac:	f023 0202 	bic.w	r2, r3, #2
 80147b0:	687b      	ldr	r3, [r7, #4]
 80147b2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80147b4:	4912      	ldr	r1, [pc, #72]	@ (8014800 <HAL_RCC_OscConfig+0x76c>)
 80147b6:	4313      	orrs	r3, r2
 80147b8:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 80147ba:	4b11      	ldr	r3, [pc, #68]	@ (8014800 <HAL_RCC_OscConfig+0x76c>)
 80147bc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80147be:	4a10      	ldr	r2, [pc, #64]	@ (8014800 <HAL_RCC_OscConfig+0x76c>)
 80147c0:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80147c4:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1Q Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80147c6:	4b0e      	ldr	r3, [pc, #56]	@ (8014800 <HAL_RCC_OscConfig+0x76c>)
 80147c8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80147ca:	4a0d      	ldr	r2, [pc, #52]	@ (8014800 <HAL_RCC_OscConfig+0x76c>)
 80147cc:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80147d0:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1R  Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 80147d2:	4b0b      	ldr	r3, [pc, #44]	@ (8014800 <HAL_RCC_OscConfig+0x76c>)
 80147d4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80147d6:	4a0a      	ldr	r2, [pc, #40]	@ (8014800 <HAL_RCC_OscConfig+0x76c>)
 80147d8:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80147dc:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1FRACN . */
        __HAL_RCC_PLLFRACN_ENABLE();
 80147de:	4b08      	ldr	r3, [pc, #32]	@ (8014800 <HAL_RCC_OscConfig+0x76c>)
 80147e0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80147e2:	4a07      	ldr	r2, [pc, #28]	@ (8014800 <HAL_RCC_OscConfig+0x76c>)
 80147e4:	f043 0301 	orr.w	r3, r3, #1
 80147e8:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80147ea:	4b05      	ldr	r3, [pc, #20]	@ (8014800 <HAL_RCC_OscConfig+0x76c>)
 80147ec:	681b      	ldr	r3, [r3, #0]
 80147ee:	4a04      	ldr	r2, [pc, #16]	@ (8014800 <HAL_RCC_OscConfig+0x76c>)
 80147f0:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80147f4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80147f6:	f7fc fa83 	bl	8010d00 <HAL_GetTick>
 80147fa:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80147fc:	e011      	b.n	8014822 <HAL_RCC_OscConfig+0x78e>
 80147fe:	bf00      	nop
 8014800:	58024400 	.word	0x58024400
 8014804:	58024800 	.word	0x58024800
 8014808:	fffffc0c 	.word	0xfffffc0c
 801480c:	ffff0007 	.word	0xffff0007
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8014810:	f7fc fa76 	bl	8010d00 <HAL_GetTick>
 8014814:	4602      	mov	r2, r0
 8014816:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8014818:	1ad3      	subs	r3, r2, r3
 801481a:	2b02      	cmp	r3, #2
 801481c:	d901      	bls.n	8014822 <HAL_RCC_OscConfig+0x78e>
          {
            return HAL_TIMEOUT;
 801481e:	2303      	movs	r3, #3
 8014820:	e08a      	b.n	8014938 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8014822:	4b47      	ldr	r3, [pc, #284]	@ (8014940 <HAL_RCC_OscConfig+0x8ac>)
 8014824:	681b      	ldr	r3, [r3, #0]
 8014826:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 801482a:	2b00      	cmp	r3, #0
 801482c:	d0f0      	beq.n	8014810 <HAL_RCC_OscConfig+0x77c>
 801482e:	e082      	b.n	8014936 <HAL_RCC_OscConfig+0x8a2>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8014830:	4b43      	ldr	r3, [pc, #268]	@ (8014940 <HAL_RCC_OscConfig+0x8ac>)
 8014832:	681b      	ldr	r3, [r3, #0]
 8014834:	4a42      	ldr	r2, [pc, #264]	@ (8014940 <HAL_RCC_OscConfig+0x8ac>)
 8014836:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 801483a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 801483c:	f7fc fa60 	bl	8010d00 <HAL_GetTick>
 8014840:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8014842:	e008      	b.n	8014856 <HAL_RCC_OscConfig+0x7c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8014844:	f7fc fa5c 	bl	8010d00 <HAL_GetTick>
 8014848:	4602      	mov	r2, r0
 801484a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801484c:	1ad3      	subs	r3, r2, r3
 801484e:	2b02      	cmp	r3, #2
 8014850:	d901      	bls.n	8014856 <HAL_RCC_OscConfig+0x7c2>
          {
            return HAL_TIMEOUT;
 8014852:	2303      	movs	r3, #3
 8014854:	e070      	b.n	8014938 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8014856:	4b3a      	ldr	r3, [pc, #232]	@ (8014940 <HAL_RCC_OscConfig+0x8ac>)
 8014858:	681b      	ldr	r3, [r3, #0]
 801485a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 801485e:	2b00      	cmp	r3, #0
 8014860:	d1f0      	bne.n	8014844 <HAL_RCC_OscConfig+0x7b0>
 8014862:	e068      	b.n	8014936 <HAL_RCC_OscConfig+0x8a2>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 8014864:	4b36      	ldr	r3, [pc, #216]	@ (8014940 <HAL_RCC_OscConfig+0x8ac>)
 8014866:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8014868:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 801486a:	4b35      	ldr	r3, [pc, #212]	@ (8014940 <HAL_RCC_OscConfig+0x8ac>)
 801486c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 801486e:	60fb      	str	r3, [r7, #12]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8014870:	687b      	ldr	r3, [r7, #4]
 8014872:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8014874:	2b01      	cmp	r3, #1
 8014876:	d031      	beq.n	80148dc <HAL_RCC_OscConfig+0x848>
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8014878:	693b      	ldr	r3, [r7, #16]
 801487a:	f003 0203 	and.w	r2, r3, #3
 801487e:	687b      	ldr	r3, [r7, #4]
 8014880:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8014882:	429a      	cmp	r2, r3
 8014884:	d12a      	bne.n	80148dc <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8014886:	693b      	ldr	r3, [r7, #16]
 8014888:	091b      	lsrs	r3, r3, #4
 801488a:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 801488e:	687b      	ldr	r3, [r7, #4]
 8014890:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8014892:	429a      	cmp	r2, r3
 8014894:	d122      	bne.n	80148dc <HAL_RCC_OscConfig+0x848>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8014896:	68fb      	ldr	r3, [r7, #12]
 8014898:	f3c3 0208 	ubfx	r2, r3, #0, #9
 801489c:	687b      	ldr	r3, [r7, #4]
 801489e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80148a0:	3b01      	subs	r3, #1
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 80148a2:	429a      	cmp	r2, r3
 80148a4:	d11a      	bne.n	80148dc <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 80148a6:	68fb      	ldr	r3, [r7, #12]
 80148a8:	0a5b      	lsrs	r3, r3, #9
 80148aa:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 80148ae:	687b      	ldr	r3, [r7, #4]
 80148b0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80148b2:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 80148b4:	429a      	cmp	r2, r3
 80148b6:	d111      	bne.n	80148dc <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 80148b8:	68fb      	ldr	r3, [r7, #12]
 80148ba:	0c1b      	lsrs	r3, r3, #16
 80148bc:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 80148c0:	687b      	ldr	r3, [r7, #4]
 80148c2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80148c4:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 80148c6:	429a      	cmp	r2, r3
 80148c8:	d108      	bne.n	80148dc <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 80148ca:	68fb      	ldr	r3, [r7, #12]
 80148cc:	0e1b      	lsrs	r3, r3, #24
 80148ce:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 80148d2:	687b      	ldr	r3, [r7, #4]
 80148d4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80148d6:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 80148d8:	429a      	cmp	r2, r3
 80148da:	d001      	beq.n	80148e0 <HAL_RCC_OscConfig+0x84c>
      {
        return HAL_ERROR;
 80148dc:	2301      	movs	r3, #1
 80148de:	e02b      	b.n	8014938 <HAL_RCC_OscConfig+0x8a4>
      }
      else
      {
        /* Check if only fractional part needs to be updated  */
        temp1_pllckcfg = ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> RCC_PLL1FRACR_FRACN1_Pos);
 80148e0:	4b17      	ldr	r3, [pc, #92]	@ (8014940 <HAL_RCC_OscConfig+0x8ac>)
 80148e2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80148e4:	08db      	lsrs	r3, r3, #3
 80148e6:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80148ea:	613b      	str	r3, [r7, #16]
        if (RCC_OscInitStruct->PLL.PLLFRACN != temp1_pllckcfg)
 80148ec:	687b      	ldr	r3, [r7, #4]
 80148ee:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80148f0:	693a      	ldr	r2, [r7, #16]
 80148f2:	429a      	cmp	r2, r3
 80148f4:	d01f      	beq.n	8014936 <HAL_RCC_OscConfig+0x8a2>
        {
          assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));
          /* Disable PLL1FRACEN */
          __HAL_RCC_PLLFRACN_DISABLE();
 80148f6:	4b12      	ldr	r3, [pc, #72]	@ (8014940 <HAL_RCC_OscConfig+0x8ac>)
 80148f8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80148fa:	4a11      	ldr	r2, [pc, #68]	@ (8014940 <HAL_RCC_OscConfig+0x8ac>)
 80148fc:	f023 0301 	bic.w	r3, r3, #1
 8014900:	62d3      	str	r3, [r2, #44]	@ 0x2c
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8014902:	f7fc f9fd 	bl	8010d00 <HAL_GetTick>
 8014906:	6278      	str	r0, [r7, #36]	@ 0x24
          /* Wait at least 2 CK_REF (PLL input source divided by M) period to make sure next latched value will be taken into account. */
          while ((HAL_GetTick() - tickstart) < PLL_FRAC_TIMEOUT_VALUE)
 8014908:	bf00      	nop
 801490a:	f7fc f9f9 	bl	8010d00 <HAL_GetTick>
 801490e:	4602      	mov	r2, r0
 8014910:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8014912:	4293      	cmp	r3, r2
 8014914:	d0f9      	beq.n	801490a <HAL_RCC_OscConfig+0x876>
          {
          }
          /* Configure PLL1 PLL1FRACN */
          __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8014916:	4b0a      	ldr	r3, [pc, #40]	@ (8014940 <HAL_RCC_OscConfig+0x8ac>)
 8014918:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 801491a:	4b0a      	ldr	r3, [pc, #40]	@ (8014944 <HAL_RCC_OscConfig+0x8b0>)
 801491c:	4013      	ands	r3, r2
 801491e:	687a      	ldr	r2, [r7, #4]
 8014920:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 8014922:	00d2      	lsls	r2, r2, #3
 8014924:	4906      	ldr	r1, [pc, #24]	@ (8014940 <HAL_RCC_OscConfig+0x8ac>)
 8014926:	4313      	orrs	r3, r2
 8014928:	634b      	str	r3, [r1, #52]	@ 0x34
          /* Enable PLL1FRACEN to latch new value. */
          __HAL_RCC_PLLFRACN_ENABLE();
 801492a:	4b05      	ldr	r3, [pc, #20]	@ (8014940 <HAL_RCC_OscConfig+0x8ac>)
 801492c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801492e:	4a04      	ldr	r2, [pc, #16]	@ (8014940 <HAL_RCC_OscConfig+0x8ac>)
 8014930:	f043 0301 	orr.w	r3, r3, #1
 8014934:	62d3      	str	r3, [r2, #44]	@ 0x2c
        }
      }
    }
  }
  return HAL_OK;
 8014936:	2300      	movs	r3, #0
}
 8014938:	4618      	mov	r0, r3
 801493a:	3730      	adds	r7, #48	@ 0x30
 801493c:	46bd      	mov	sp, r7
 801493e:	bd80      	pop	{r7, pc}
 8014940:	58024400 	.word	0x58024400
 8014944:	ffff0007 	.word	0xffff0007

08014948 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8014948:	b580      	push	{r7, lr}
 801494a:	b086      	sub	sp, #24
 801494c:	af00      	add	r7, sp, #0
 801494e:	6078      	str	r0, [r7, #4]
 8014950:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8014952:	687b      	ldr	r3, [r7, #4]
 8014954:	2b00      	cmp	r3, #0
 8014956:	d101      	bne.n	801495c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8014958:	2301      	movs	r3, #1
 801495a:	e19c      	b.n	8014c96 <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 801495c:	4b8a      	ldr	r3, [pc, #552]	@ (8014b88 <HAL_RCC_ClockConfig+0x240>)
 801495e:	681b      	ldr	r3, [r3, #0]
 8014960:	f003 030f 	and.w	r3, r3, #15
 8014964:	683a      	ldr	r2, [r7, #0]
 8014966:	429a      	cmp	r2, r3
 8014968:	d910      	bls.n	801498c <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 801496a:	4b87      	ldr	r3, [pc, #540]	@ (8014b88 <HAL_RCC_ClockConfig+0x240>)
 801496c:	681b      	ldr	r3, [r3, #0]
 801496e:	f023 020f 	bic.w	r2, r3, #15
 8014972:	4985      	ldr	r1, [pc, #532]	@ (8014b88 <HAL_RCC_ClockConfig+0x240>)
 8014974:	683b      	ldr	r3, [r7, #0]
 8014976:	4313      	orrs	r3, r2
 8014978:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 801497a:	4b83      	ldr	r3, [pc, #524]	@ (8014b88 <HAL_RCC_ClockConfig+0x240>)
 801497c:	681b      	ldr	r3, [r3, #0]
 801497e:	f003 030f 	and.w	r3, r3, #15
 8014982:	683a      	ldr	r2, [r7, #0]
 8014984:	429a      	cmp	r2, r3
 8014986:	d001      	beq.n	801498c <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8014988:	2301      	movs	r3, #1
 801498a:	e184      	b.n	8014c96 <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 801498c:	687b      	ldr	r3, [r7, #4]
 801498e:	681b      	ldr	r3, [r3, #0]
 8014990:	f003 0304 	and.w	r3, r3, #4
 8014994:	2b00      	cmp	r3, #0
 8014996:	d010      	beq.n	80149ba <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8014998:	687b      	ldr	r3, [r7, #4]
 801499a:	691a      	ldr	r2, [r3, #16]
 801499c:	4b7b      	ldr	r3, [pc, #492]	@ (8014b8c <HAL_RCC_ClockConfig+0x244>)
 801499e:	699b      	ldr	r3, [r3, #24]
 80149a0:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 80149a4:	429a      	cmp	r2, r3
 80149a6:	d908      	bls.n	80149ba <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 80149a8:	4b78      	ldr	r3, [pc, #480]	@ (8014b8c <HAL_RCC_ClockConfig+0x244>)
 80149aa:	699b      	ldr	r3, [r3, #24]
 80149ac:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 80149b0:	687b      	ldr	r3, [r7, #4]
 80149b2:	691b      	ldr	r3, [r3, #16]
 80149b4:	4975      	ldr	r1, [pc, #468]	@ (8014b8c <HAL_RCC_ClockConfig+0x244>)
 80149b6:	4313      	orrs	r3, r2
 80149b8:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80149ba:	687b      	ldr	r3, [r7, #4]
 80149bc:	681b      	ldr	r3, [r3, #0]
 80149be:	f003 0308 	and.w	r3, r3, #8
 80149c2:	2b00      	cmp	r3, #0
 80149c4:	d010      	beq.n	80149e8 <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 80149c6:	687b      	ldr	r3, [r7, #4]
 80149c8:	695a      	ldr	r2, [r3, #20]
 80149ca:	4b70      	ldr	r3, [pc, #448]	@ (8014b8c <HAL_RCC_ClockConfig+0x244>)
 80149cc:	69db      	ldr	r3, [r3, #28]
 80149ce:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 80149d2:	429a      	cmp	r2, r3
 80149d4:	d908      	bls.n	80149e8 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 80149d6:	4b6d      	ldr	r3, [pc, #436]	@ (8014b8c <HAL_RCC_ClockConfig+0x244>)
 80149d8:	69db      	ldr	r3, [r3, #28]
 80149da:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 80149de:	687b      	ldr	r3, [r7, #4]
 80149e0:	695b      	ldr	r3, [r3, #20]
 80149e2:	496a      	ldr	r1, [pc, #424]	@ (8014b8c <HAL_RCC_ClockConfig+0x244>)
 80149e4:	4313      	orrs	r3, r2
 80149e6:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
    }
#endif
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80149e8:	687b      	ldr	r3, [r7, #4]
 80149ea:	681b      	ldr	r3, [r3, #0]
 80149ec:	f003 0310 	and.w	r3, r3, #16
 80149f0:	2b00      	cmp	r3, #0
 80149f2:	d010      	beq.n	8014a16 <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 80149f4:	687b      	ldr	r3, [r7, #4]
 80149f6:	699a      	ldr	r2, [r3, #24]
 80149f8:	4b64      	ldr	r3, [pc, #400]	@ (8014b8c <HAL_RCC_ClockConfig+0x244>)
 80149fa:	69db      	ldr	r3, [r3, #28]
 80149fc:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8014a00:	429a      	cmp	r2, r3
 8014a02:	d908      	bls.n	8014a16 <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8014a04:	4b61      	ldr	r3, [pc, #388]	@ (8014b8c <HAL_RCC_ClockConfig+0x244>)
 8014a06:	69db      	ldr	r3, [r3, #28]
 8014a08:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8014a0c:	687b      	ldr	r3, [r7, #4]
 8014a0e:	699b      	ldr	r3, [r3, #24]
 8014a10:	495e      	ldr	r1, [pc, #376]	@ (8014b8c <HAL_RCC_ClockConfig+0x244>)
 8014a12:	4313      	orrs	r3, r2
 8014a14:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8014a16:	687b      	ldr	r3, [r7, #4]
 8014a18:	681b      	ldr	r3, [r3, #0]
 8014a1a:	f003 0320 	and.w	r3, r3, #32
 8014a1e:	2b00      	cmp	r3, #0
 8014a20:	d010      	beq.n	8014a44 <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8014a22:	687b      	ldr	r3, [r7, #4]
 8014a24:	69da      	ldr	r2, [r3, #28]
 8014a26:	4b59      	ldr	r3, [pc, #356]	@ (8014b8c <HAL_RCC_ClockConfig+0x244>)
 8014a28:	6a1b      	ldr	r3, [r3, #32]
 8014a2a:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8014a2e:	429a      	cmp	r2, r3
 8014a30:	d908      	bls.n	8014a44 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 8014a32:	4b56      	ldr	r3, [pc, #344]	@ (8014b8c <HAL_RCC_ClockConfig+0x244>)
 8014a34:	6a1b      	ldr	r3, [r3, #32]
 8014a36:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8014a3a:	687b      	ldr	r3, [r7, #4]
 8014a3c:	69db      	ldr	r3, [r3, #28]
 8014a3e:	4953      	ldr	r1, [pc, #332]	@ (8014b8c <HAL_RCC_ClockConfig+0x244>)
 8014a40:	4313      	orrs	r3, r2
 8014a42:	620b      	str	r3, [r1, #32]
    }
#endif
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8014a44:	687b      	ldr	r3, [r7, #4]
 8014a46:	681b      	ldr	r3, [r3, #0]
 8014a48:	f003 0302 	and.w	r3, r3, #2
 8014a4c:	2b00      	cmp	r3, #0
 8014a4e:	d010      	beq.n	8014a72 <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8014a50:	687b      	ldr	r3, [r7, #4]
 8014a52:	68da      	ldr	r2, [r3, #12]
 8014a54:	4b4d      	ldr	r3, [pc, #308]	@ (8014b8c <HAL_RCC_ClockConfig+0x244>)
 8014a56:	699b      	ldr	r3, [r3, #24]
 8014a58:	f003 030f 	and.w	r3, r3, #15
 8014a5c:	429a      	cmp	r2, r3
 8014a5e:	d908      	bls.n	8014a72 <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8014a60:	4b4a      	ldr	r3, [pc, #296]	@ (8014b8c <HAL_RCC_ClockConfig+0x244>)
 8014a62:	699b      	ldr	r3, [r3, #24]
 8014a64:	f023 020f 	bic.w	r2, r3, #15
 8014a68:	687b      	ldr	r3, [r7, #4]
 8014a6a:	68db      	ldr	r3, [r3, #12]
 8014a6c:	4947      	ldr	r1, [pc, #284]	@ (8014b8c <HAL_RCC_ClockConfig+0x244>)
 8014a6e:	4313      	orrs	r3, r2
 8014a70:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*------------------------- SYSCLK Configuration -------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8014a72:	687b      	ldr	r3, [r7, #4]
 8014a74:	681b      	ldr	r3, [r3, #0]
 8014a76:	f003 0301 	and.w	r3, r3, #1
 8014a7a:	2b00      	cmp	r3, #0
 8014a7c:	d055      	beq.n	8014b2a <HAL_RCC_ClockConfig+0x1e2>
  {
    assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
    MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 8014a7e:	4b43      	ldr	r3, [pc, #268]	@ (8014b8c <HAL_RCC_ClockConfig+0x244>)
 8014a80:	699b      	ldr	r3, [r3, #24]
 8014a82:	f423 6270 	bic.w	r2, r3, #3840	@ 0xf00
 8014a86:	687b      	ldr	r3, [r7, #4]
 8014a88:	689b      	ldr	r3, [r3, #8]
 8014a8a:	4940      	ldr	r1, [pc, #256]	@ (8014b8c <HAL_RCC_ClockConfig+0x244>)
 8014a8c:	4313      	orrs	r3, r2
 8014a8e:	618b      	str	r3, [r1, #24]
#else
    MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8014a90:	687b      	ldr	r3, [r7, #4]
 8014a92:	685b      	ldr	r3, [r3, #4]
 8014a94:	2b02      	cmp	r3, #2
 8014a96:	d107      	bne.n	8014aa8 <HAL_RCC_ClockConfig+0x160>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8014a98:	4b3c      	ldr	r3, [pc, #240]	@ (8014b8c <HAL_RCC_ClockConfig+0x244>)
 8014a9a:	681b      	ldr	r3, [r3, #0]
 8014a9c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8014aa0:	2b00      	cmp	r3, #0
 8014aa2:	d121      	bne.n	8014ae8 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8014aa4:	2301      	movs	r3, #1
 8014aa6:	e0f6      	b.n	8014c96 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8014aa8:	687b      	ldr	r3, [r7, #4]
 8014aaa:	685b      	ldr	r3, [r3, #4]
 8014aac:	2b03      	cmp	r3, #3
 8014aae:	d107      	bne.n	8014ac0 <HAL_RCC_ClockConfig+0x178>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8014ab0:	4b36      	ldr	r3, [pc, #216]	@ (8014b8c <HAL_RCC_ClockConfig+0x244>)
 8014ab2:	681b      	ldr	r3, [r3, #0]
 8014ab4:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8014ab8:	2b00      	cmp	r3, #0
 8014aba:	d115      	bne.n	8014ae8 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8014abc:	2301      	movs	r3, #1
 8014abe:	e0ea      	b.n	8014c96 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* CSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 8014ac0:	687b      	ldr	r3, [r7, #4]
 8014ac2:	685b      	ldr	r3, [r3, #4]
 8014ac4:	2b01      	cmp	r3, #1
 8014ac6:	d107      	bne.n	8014ad8 <HAL_RCC_ClockConfig+0x190>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8014ac8:	4b30      	ldr	r3, [pc, #192]	@ (8014b8c <HAL_RCC_ClockConfig+0x244>)
 8014aca:	681b      	ldr	r3, [r3, #0]
 8014acc:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8014ad0:	2b00      	cmp	r3, #0
 8014ad2:	d109      	bne.n	8014ae8 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8014ad4:	2301      	movs	r3, #1
 8014ad6:	e0de      	b.n	8014c96 <HAL_RCC_ClockConfig+0x34e>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8014ad8:	4b2c      	ldr	r3, [pc, #176]	@ (8014b8c <HAL_RCC_ClockConfig+0x244>)
 8014ada:	681b      	ldr	r3, [r3, #0]
 8014adc:	f003 0304 	and.w	r3, r3, #4
 8014ae0:	2b00      	cmp	r3, #0
 8014ae2:	d101      	bne.n	8014ae8 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8014ae4:	2301      	movs	r3, #1
 8014ae6:	e0d6      	b.n	8014c96 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8014ae8:	4b28      	ldr	r3, [pc, #160]	@ (8014b8c <HAL_RCC_ClockConfig+0x244>)
 8014aea:	691b      	ldr	r3, [r3, #16]
 8014aec:	f023 0207 	bic.w	r2, r3, #7
 8014af0:	687b      	ldr	r3, [r7, #4]
 8014af2:	685b      	ldr	r3, [r3, #4]
 8014af4:	4925      	ldr	r1, [pc, #148]	@ (8014b8c <HAL_RCC_ClockConfig+0x244>)
 8014af6:	4313      	orrs	r3, r2
 8014af8:	610b      	str	r3, [r1, #16]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8014afa:	f7fc f901 	bl	8010d00 <HAL_GetTick>
 8014afe:	6178      	str	r0, [r7, #20]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8014b00:	e00a      	b.n	8014b18 <HAL_RCC_ClockConfig+0x1d0>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8014b02:	f7fc f8fd 	bl	8010d00 <HAL_GetTick>
 8014b06:	4602      	mov	r2, r0
 8014b08:	697b      	ldr	r3, [r7, #20]
 8014b0a:	1ad3      	subs	r3, r2, r3
 8014b0c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8014b10:	4293      	cmp	r3, r2
 8014b12:	d901      	bls.n	8014b18 <HAL_RCC_ClockConfig+0x1d0>
      {
        return HAL_TIMEOUT;
 8014b14:	2303      	movs	r3, #3
 8014b16:	e0be      	b.n	8014c96 <HAL_RCC_ClockConfig+0x34e>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8014b18:	4b1c      	ldr	r3, [pc, #112]	@ (8014b8c <HAL_RCC_ClockConfig+0x244>)
 8014b1a:	691b      	ldr	r3, [r3, #16]
 8014b1c:	f003 0238 	and.w	r2, r3, #56	@ 0x38
 8014b20:	687b      	ldr	r3, [r7, #4]
 8014b22:	685b      	ldr	r3, [r3, #4]
 8014b24:	00db      	lsls	r3, r3, #3
 8014b26:	429a      	cmp	r2, r3
 8014b28:	d1eb      	bne.n	8014b02 <HAL_RCC_ClockConfig+0x1ba>

  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8014b2a:	687b      	ldr	r3, [r7, #4]
 8014b2c:	681b      	ldr	r3, [r3, #0]
 8014b2e:	f003 0302 	and.w	r3, r3, #2
 8014b32:	2b00      	cmp	r3, #0
 8014b34:	d010      	beq.n	8014b58 <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8014b36:	687b      	ldr	r3, [r7, #4]
 8014b38:	68da      	ldr	r2, [r3, #12]
 8014b3a:	4b14      	ldr	r3, [pc, #80]	@ (8014b8c <HAL_RCC_ClockConfig+0x244>)
 8014b3c:	699b      	ldr	r3, [r3, #24]
 8014b3e:	f003 030f 	and.w	r3, r3, #15
 8014b42:	429a      	cmp	r2, r3
 8014b44:	d208      	bcs.n	8014b58 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8014b46:	4b11      	ldr	r3, [pc, #68]	@ (8014b8c <HAL_RCC_ClockConfig+0x244>)
 8014b48:	699b      	ldr	r3, [r3, #24]
 8014b4a:	f023 020f 	bic.w	r2, r3, #15
 8014b4e:	687b      	ldr	r3, [r7, #4]
 8014b50:	68db      	ldr	r3, [r3, #12]
 8014b52:	490e      	ldr	r1, [pc, #56]	@ (8014b8c <HAL_RCC_ClockConfig+0x244>)
 8014b54:	4313      	orrs	r3, r2
 8014b56:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8014b58:	4b0b      	ldr	r3, [pc, #44]	@ (8014b88 <HAL_RCC_ClockConfig+0x240>)
 8014b5a:	681b      	ldr	r3, [r3, #0]
 8014b5c:	f003 030f 	and.w	r3, r3, #15
 8014b60:	683a      	ldr	r2, [r7, #0]
 8014b62:	429a      	cmp	r2, r3
 8014b64:	d214      	bcs.n	8014b90 <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8014b66:	4b08      	ldr	r3, [pc, #32]	@ (8014b88 <HAL_RCC_ClockConfig+0x240>)
 8014b68:	681b      	ldr	r3, [r3, #0]
 8014b6a:	f023 020f 	bic.w	r2, r3, #15
 8014b6e:	4906      	ldr	r1, [pc, #24]	@ (8014b88 <HAL_RCC_ClockConfig+0x240>)
 8014b70:	683b      	ldr	r3, [r7, #0]
 8014b72:	4313      	orrs	r3, r2
 8014b74:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8014b76:	4b04      	ldr	r3, [pc, #16]	@ (8014b88 <HAL_RCC_ClockConfig+0x240>)
 8014b78:	681b      	ldr	r3, [r3, #0]
 8014b7a:	f003 030f 	and.w	r3, r3, #15
 8014b7e:	683a      	ldr	r2, [r7, #0]
 8014b80:	429a      	cmp	r2, r3
 8014b82:	d005      	beq.n	8014b90 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 8014b84:	2301      	movs	r3, #1
 8014b86:	e086      	b.n	8014c96 <HAL_RCC_ClockConfig+0x34e>
 8014b88:	52002000 	.word	0x52002000
 8014b8c:	58024400 	.word	0x58024400
    }
  }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8014b90:	687b      	ldr	r3, [r7, #4]
 8014b92:	681b      	ldr	r3, [r3, #0]
 8014b94:	f003 0304 	and.w	r3, r3, #4
 8014b98:	2b00      	cmp	r3, #0
 8014b9a:	d010      	beq.n	8014bbe <HAL_RCC_ClockConfig+0x276>
  {
#if defined(RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8014b9c:	687b      	ldr	r3, [r7, #4]
 8014b9e:	691a      	ldr	r2, [r3, #16]
 8014ba0:	4b3f      	ldr	r3, [pc, #252]	@ (8014ca0 <HAL_RCC_ClockConfig+0x358>)
 8014ba2:	699b      	ldr	r3, [r3, #24]
 8014ba4:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8014ba8:	429a      	cmp	r2, r3
 8014baa:	d208      	bcs.n	8014bbe <HAL_RCC_ClockConfig+0x276>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8014bac:	4b3c      	ldr	r3, [pc, #240]	@ (8014ca0 <HAL_RCC_ClockConfig+0x358>)
 8014bae:	699b      	ldr	r3, [r3, #24]
 8014bb0:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8014bb4:	687b      	ldr	r3, [r7, #4]
 8014bb6:	691b      	ldr	r3, [r3, #16]
 8014bb8:	4939      	ldr	r1, [pc, #228]	@ (8014ca0 <HAL_RCC_ClockConfig+0x358>)
 8014bba:	4313      	orrs	r3, r2
 8014bbc:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8014bbe:	687b      	ldr	r3, [r7, #4]
 8014bc0:	681b      	ldr	r3, [r3, #0]
 8014bc2:	f003 0308 	and.w	r3, r3, #8
 8014bc6:	2b00      	cmp	r3, #0
 8014bc8:	d010      	beq.n	8014bec <HAL_RCC_ClockConfig+0x2a4>
  {
#if defined(RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8014bca:	687b      	ldr	r3, [r7, #4]
 8014bcc:	695a      	ldr	r2, [r3, #20]
 8014bce:	4b34      	ldr	r3, [pc, #208]	@ (8014ca0 <HAL_RCC_ClockConfig+0x358>)
 8014bd0:	69db      	ldr	r3, [r3, #28]
 8014bd2:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8014bd6:	429a      	cmp	r2, r3
 8014bd8:	d208      	bcs.n	8014bec <HAL_RCC_ClockConfig+0x2a4>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8014bda:	4b31      	ldr	r3, [pc, #196]	@ (8014ca0 <HAL_RCC_ClockConfig+0x358>)
 8014bdc:	69db      	ldr	r3, [r3, #28]
 8014bde:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8014be2:	687b      	ldr	r3, [r7, #4]
 8014be4:	695b      	ldr	r3, [r3, #20]
 8014be6:	492e      	ldr	r1, [pc, #184]	@ (8014ca0 <HAL_RCC_ClockConfig+0x358>)
 8014be8:	4313      	orrs	r3, r2
 8014bea:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8014bec:	687b      	ldr	r3, [r7, #4]
 8014bee:	681b      	ldr	r3, [r3, #0]
 8014bf0:	f003 0310 	and.w	r3, r3, #16
 8014bf4:	2b00      	cmp	r3, #0
 8014bf6:	d010      	beq.n	8014c1a <HAL_RCC_ClockConfig+0x2d2>
  {
#if defined (RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8014bf8:	687b      	ldr	r3, [r7, #4]
 8014bfa:	699a      	ldr	r2, [r3, #24]
 8014bfc:	4b28      	ldr	r3, [pc, #160]	@ (8014ca0 <HAL_RCC_ClockConfig+0x358>)
 8014bfe:	69db      	ldr	r3, [r3, #28]
 8014c00:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8014c04:	429a      	cmp	r2, r3
 8014c06:	d208      	bcs.n	8014c1a <HAL_RCC_ClockConfig+0x2d2>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8014c08:	4b25      	ldr	r3, [pc, #148]	@ (8014ca0 <HAL_RCC_ClockConfig+0x358>)
 8014c0a:	69db      	ldr	r3, [r3, #28]
 8014c0c:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8014c10:	687b      	ldr	r3, [r7, #4]
 8014c12:	699b      	ldr	r3, [r3, #24]
 8014c14:	4922      	ldr	r1, [pc, #136]	@ (8014ca0 <HAL_RCC_ClockConfig+0x358>)
 8014c16:	4313      	orrs	r3, r2
 8014c18:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8014c1a:	687b      	ldr	r3, [r7, #4]
 8014c1c:	681b      	ldr	r3, [r3, #0]
 8014c1e:	f003 0320 	and.w	r3, r3, #32
 8014c22:	2b00      	cmp	r3, #0
 8014c24:	d010      	beq.n	8014c48 <HAL_RCC_ClockConfig+0x300>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8014c26:	687b      	ldr	r3, [r7, #4]
 8014c28:	69da      	ldr	r2, [r3, #28]
 8014c2a:	4b1d      	ldr	r3, [pc, #116]	@ (8014ca0 <HAL_RCC_ClockConfig+0x358>)
 8014c2c:	6a1b      	ldr	r3, [r3, #32]
 8014c2e:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8014c32:	429a      	cmp	r2, r3
 8014c34:	d208      	bcs.n	8014c48 <HAL_RCC_ClockConfig+0x300>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 8014c36:	4b1a      	ldr	r3, [pc, #104]	@ (8014ca0 <HAL_RCC_ClockConfig+0x358>)
 8014c38:	6a1b      	ldr	r3, [r3, #32]
 8014c3a:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8014c3e:	687b      	ldr	r3, [r7, #4]
 8014c40:	69db      	ldr	r3, [r3, #28]
 8014c42:	4917      	ldr	r1, [pc, #92]	@ (8014ca0 <HAL_RCC_ClockConfig+0x358>)
 8014c44:	4313      	orrs	r3, r2
 8014c46:	620b      	str	r3, [r1, #32]
#endif
  }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8014c48:	f000 f89e 	bl	8014d88 <HAL_RCC_GetSysClockFreq>
 8014c4c:	4602      	mov	r2, r0
 8014c4e:	4b14      	ldr	r3, [pc, #80]	@ (8014ca0 <HAL_RCC_ClockConfig+0x358>)
 8014c50:	699b      	ldr	r3, [r3, #24]
 8014c52:	0a1b      	lsrs	r3, r3, #8
 8014c54:	f003 030f 	and.w	r3, r3, #15
 8014c58:	4912      	ldr	r1, [pc, #72]	@ (8014ca4 <HAL_RCC_ClockConfig+0x35c>)
 8014c5a:	5ccb      	ldrb	r3, [r1, r3]
 8014c5c:	f003 031f 	and.w	r3, r3, #31
 8014c60:	fa22 f303 	lsr.w	r3, r2, r3
 8014c64:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8014c66:	4b0e      	ldr	r3, [pc, #56]	@ (8014ca0 <HAL_RCC_ClockConfig+0x358>)
 8014c68:	699b      	ldr	r3, [r3, #24]
 8014c6a:	f003 030f 	and.w	r3, r3, #15
 8014c6e:	4a0d      	ldr	r2, [pc, #52]	@ (8014ca4 <HAL_RCC_ClockConfig+0x35c>)
 8014c70:	5cd3      	ldrb	r3, [r2, r3]
 8014c72:	f003 031f 	and.w	r3, r3, #31
 8014c76:	693a      	ldr	r2, [r7, #16]
 8014c78:	fa22 f303 	lsr.w	r3, r2, r3
 8014c7c:	4a0a      	ldr	r2, [pc, #40]	@ (8014ca8 <HAL_RCC_ClockConfig+0x360>)
 8014c7e:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8014c80:	4a0a      	ldr	r2, [pc, #40]	@ (8014cac <HAL_RCC_ClockConfig+0x364>)
 8014c82:	693b      	ldr	r3, [r7, #16]
 8014c84:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick(uwTickPrio);
 8014c86:	4b0a      	ldr	r3, [pc, #40]	@ (8014cb0 <HAL_RCC_ClockConfig+0x368>)
 8014c88:	681b      	ldr	r3, [r3, #0]
 8014c8a:	4618      	mov	r0, r3
 8014c8c:	f7ec fc2c 	bl	80014e8 <HAL_InitTick>
 8014c90:	4603      	mov	r3, r0
 8014c92:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 8014c94:	7bfb      	ldrb	r3, [r7, #15]
}
 8014c96:	4618      	mov	r0, r3
 8014c98:	3718      	adds	r7, #24
 8014c9a:	46bd      	mov	sp, r7
 8014c9c:	bd80      	pop	{r7, pc}
 8014c9e:	bf00      	nop
 8014ca0:	58024400 	.word	0x58024400
 8014ca4:	0802d1d4 	.word	0x0802d1d4
 8014ca8:	2400001c 	.word	0x2400001c
 8014cac:	24000018 	.word	0x24000018
 8014cb0:	24000050 	.word	0x24000050

08014cb4 <HAL_RCC_MCOConfig>:
  *          This parameter can be one of the following values:
  *            @arg RCC_MCODIV_1 up to RCC_MCODIV_15  : divider applied to MCOx clock
  * @retval None
  */
void HAL_RCC_MCOConfig(uint32_t RCC_MCOx, uint32_t RCC_MCOSource, uint32_t RCC_MCODiv)
{
 8014cb4:	b580      	push	{r7, lr}
 8014cb6:	b08c      	sub	sp, #48	@ 0x30
 8014cb8:	af00      	add	r7, sp, #0
 8014cba:	60f8      	str	r0, [r7, #12]
 8014cbc:	60b9      	str	r1, [r7, #8]
 8014cbe:	607a      	str	r2, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct;
  /* Check the parameters */
  assert_param(IS_RCC_MCO(RCC_MCOx));
  assert_param(IS_RCC_MCODIV(RCC_MCODiv));
  /* RCC_MCO1 */
  if (RCC_MCOx == RCC_MCO1)
 8014cc0:	68fb      	ldr	r3, [r7, #12]
 8014cc2:	2b00      	cmp	r3, #0
 8014cc4:	d12a      	bne.n	8014d1c <HAL_RCC_MCOConfig+0x68>
  {
    assert_param(IS_RCC_MCO1SOURCE(RCC_MCOSource));

    /* MCO1 Clock Enable */
    MCO1_CLK_ENABLE();
 8014cc6:	4b2d      	ldr	r3, [pc, #180]	@ (8014d7c <HAL_RCC_MCOConfig+0xc8>)
 8014cc8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8014ccc:	4a2b      	ldr	r2, [pc, #172]	@ (8014d7c <HAL_RCC_MCOConfig+0xc8>)
 8014cce:	f043 0301 	orr.w	r3, r3, #1
 8014cd2:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8014cd6:	4b29      	ldr	r3, [pc, #164]	@ (8014d7c <HAL_RCC_MCOConfig+0xc8>)
 8014cd8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8014cdc:	f003 0301 	and.w	r3, r3, #1
 8014ce0:	61bb      	str	r3, [r7, #24]
 8014ce2:	69bb      	ldr	r3, [r7, #24]

    /* Configure the MCO1 pin in alternate function mode */
    GPIO_InitStruct.Pin = MCO1_PIN;
 8014ce4:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8014ce8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8014cea:	2302      	movs	r3, #2
 8014cec:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8014cee:	2303      	movs	r3, #3
 8014cf0:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8014cf2:	2300      	movs	r3, #0
 8014cf4:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Alternate = GPIO_AF0_MCO;
 8014cf6:	2300      	movs	r3, #0
 8014cf8:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(MCO1_GPIO_PORT, &GPIO_InitStruct);
 8014cfa:	f107 031c 	add.w	r3, r7, #28
 8014cfe:	4619      	mov	r1, r3
 8014d00:	481f      	ldr	r0, [pc, #124]	@ (8014d80 <HAL_RCC_MCOConfig+0xcc>)
 8014d02:	f7fc fc09 	bl	8011518 <HAL_GPIO_Init>

    /* Mask MCO1 and MCO1PRE[3:0] bits then Select MCO1 clock source and pre-scaler */
    MODIFY_REG(RCC->CFGR, (RCC_CFGR_MCO1 | RCC_CFGR_MCO1PRE), (RCC_MCOSource | RCC_MCODiv));
 8014d06:	4b1d      	ldr	r3, [pc, #116]	@ (8014d7c <HAL_RCC_MCOConfig+0xc8>)
 8014d08:	691b      	ldr	r3, [r3, #16]
 8014d0a:	f023 72fe 	bic.w	r2, r3, #33292288	@ 0x1fc0000
 8014d0e:	68b9      	ldr	r1, [r7, #8]
 8014d10:	687b      	ldr	r3, [r7, #4]
 8014d12:	430b      	orrs	r3, r1
 8014d14:	4919      	ldr	r1, [pc, #100]	@ (8014d7c <HAL_RCC_MCOConfig+0xc8>)
 8014d16:	4313      	orrs	r3, r2
 8014d18:	610b      	str	r3, [r1, #16]
    HAL_GPIO_Init(MCO2_GPIO_PORT, &GPIO_InitStruct);

    /* Mask MCO2 and MCO2PRE[3:0] bits then Select MCO2 clock source and pre-scaler */
    MODIFY_REG(RCC->CFGR, (RCC_CFGR_MCO2 | RCC_CFGR_MCO2PRE), (RCC_MCOSource | (RCC_MCODiv << 7U)));
  }
}
 8014d1a:	e02a      	b.n	8014d72 <HAL_RCC_MCOConfig+0xbe>
    MCO2_CLK_ENABLE();
 8014d1c:	4b17      	ldr	r3, [pc, #92]	@ (8014d7c <HAL_RCC_MCOConfig+0xc8>)
 8014d1e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8014d22:	4a16      	ldr	r2, [pc, #88]	@ (8014d7c <HAL_RCC_MCOConfig+0xc8>)
 8014d24:	f043 0304 	orr.w	r3, r3, #4
 8014d28:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8014d2c:	4b13      	ldr	r3, [pc, #76]	@ (8014d7c <HAL_RCC_MCOConfig+0xc8>)
 8014d2e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8014d32:	f003 0304 	and.w	r3, r3, #4
 8014d36:	617b      	str	r3, [r7, #20]
 8014d38:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = MCO2_PIN;
 8014d3a:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8014d3e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8014d40:	2302      	movs	r3, #2
 8014d42:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8014d44:	2303      	movs	r3, #3
 8014d46:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8014d48:	2300      	movs	r3, #0
 8014d4a:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Alternate = GPIO_AF0_MCO;
 8014d4c:	2300      	movs	r3, #0
 8014d4e:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(MCO2_GPIO_PORT, &GPIO_InitStruct);
 8014d50:	f107 031c 	add.w	r3, r7, #28
 8014d54:	4619      	mov	r1, r3
 8014d56:	480b      	ldr	r0, [pc, #44]	@ (8014d84 <HAL_RCC_MCOConfig+0xd0>)
 8014d58:	f7fc fbde 	bl	8011518 <HAL_GPIO_Init>
    MODIFY_REG(RCC->CFGR, (RCC_CFGR_MCO2 | RCC_CFGR_MCO2PRE), (RCC_MCOSource | (RCC_MCODiv << 7U)));
 8014d5c:	4b07      	ldr	r3, [pc, #28]	@ (8014d7c <HAL_RCC_MCOConfig+0xc8>)
 8014d5e:	691b      	ldr	r3, [r3, #16]
 8014d60:	f023 427e 	bic.w	r2, r3, #4261412864	@ 0xfe000000
 8014d64:	687b      	ldr	r3, [r7, #4]
 8014d66:	01d9      	lsls	r1, r3, #7
 8014d68:	68bb      	ldr	r3, [r7, #8]
 8014d6a:	430b      	orrs	r3, r1
 8014d6c:	4903      	ldr	r1, [pc, #12]	@ (8014d7c <HAL_RCC_MCOConfig+0xc8>)
 8014d6e:	4313      	orrs	r3, r2
 8014d70:	610b      	str	r3, [r1, #16]
}
 8014d72:	bf00      	nop
 8014d74:	3730      	adds	r7, #48	@ 0x30
 8014d76:	46bd      	mov	sp, r7
 8014d78:	bd80      	pop	{r7, pc}
 8014d7a:	bf00      	nop
 8014d7c:	58024400 	.word	0x58024400
 8014d80:	58020000 	.word	0x58020000
 8014d84:	58020800 	.word	0x58020800

08014d88 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8014d88:	b480      	push	{r7}
 8014d8a:	b089      	sub	sp, #36	@ 0x24
 8014d8c:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 8014d8e:	4bb3      	ldr	r3, [pc, #716]	@ (801505c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8014d90:	691b      	ldr	r3, [r3, #16]
 8014d92:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8014d96:	2b18      	cmp	r3, #24
 8014d98:	f200 8155 	bhi.w	8015046 <HAL_RCC_GetSysClockFreq+0x2be>
 8014d9c:	a201      	add	r2, pc, #4	@ (adr r2, 8014da4 <HAL_RCC_GetSysClockFreq+0x1c>)
 8014d9e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8014da2:	bf00      	nop
 8014da4:	08014e09 	.word	0x08014e09
 8014da8:	08015047 	.word	0x08015047
 8014dac:	08015047 	.word	0x08015047
 8014db0:	08015047 	.word	0x08015047
 8014db4:	08015047 	.word	0x08015047
 8014db8:	08015047 	.word	0x08015047
 8014dbc:	08015047 	.word	0x08015047
 8014dc0:	08015047 	.word	0x08015047
 8014dc4:	08014e2f 	.word	0x08014e2f
 8014dc8:	08015047 	.word	0x08015047
 8014dcc:	08015047 	.word	0x08015047
 8014dd0:	08015047 	.word	0x08015047
 8014dd4:	08015047 	.word	0x08015047
 8014dd8:	08015047 	.word	0x08015047
 8014ddc:	08015047 	.word	0x08015047
 8014de0:	08015047 	.word	0x08015047
 8014de4:	08014e35 	.word	0x08014e35
 8014de8:	08015047 	.word	0x08015047
 8014dec:	08015047 	.word	0x08015047
 8014df0:	08015047 	.word	0x08015047
 8014df4:	08015047 	.word	0x08015047
 8014df8:	08015047 	.word	0x08015047
 8014dfc:	08015047 	.word	0x08015047
 8014e00:	08015047 	.word	0x08015047
 8014e04:	08014e3b 	.word	0x08014e3b
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8014e08:	4b94      	ldr	r3, [pc, #592]	@ (801505c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8014e0a:	681b      	ldr	r3, [r3, #0]
 8014e0c:	f003 0320 	and.w	r3, r3, #32
 8014e10:	2b00      	cmp	r3, #0
 8014e12:	d009      	beq.n	8014e28 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8014e14:	4b91      	ldr	r3, [pc, #580]	@ (801505c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8014e16:	681b      	ldr	r3, [r3, #0]
 8014e18:	08db      	lsrs	r3, r3, #3
 8014e1a:	f003 0303 	and.w	r3, r3, #3
 8014e1e:	4a90      	ldr	r2, [pc, #576]	@ (8015060 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8014e20:	fa22 f303 	lsr.w	r3, r2, r3
 8014e24:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

      break;
 8014e26:	e111      	b.n	801504c <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 8014e28:	4b8d      	ldr	r3, [pc, #564]	@ (8015060 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8014e2a:	61bb      	str	r3, [r7, #24]
      break;
 8014e2c:	e10e      	b.n	801504c <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
      sysclockfreq = CSI_VALUE;
 8014e2e:	4b8d      	ldr	r3, [pc, #564]	@ (8015064 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8014e30:	61bb      	str	r3, [r7, #24]
      break;
 8014e32:	e10b      	b.n	801504c <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
      sysclockfreq = HSE_VALUE;
 8014e34:	4b8c      	ldr	r3, [pc, #560]	@ (8015068 <HAL_RCC_GetSysClockFreq+0x2e0>)
 8014e36:	61bb      	str	r3, [r7, #24]
      break;
 8014e38:	e108      	b.n	801504c <HAL_RCC_GetSysClockFreq+0x2c4>
    case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR
      */
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8014e3a:	4b88      	ldr	r3, [pc, #544]	@ (801505c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8014e3c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8014e3e:	f003 0303 	and.w	r3, r3, #3
 8014e42:	617b      	str	r3, [r7, #20]
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
 8014e44:	4b85      	ldr	r3, [pc, #532]	@ (801505c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8014e46:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8014e48:	091b      	lsrs	r3, r3, #4
 8014e4a:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8014e4e:	613b      	str	r3, [r7, #16]
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
 8014e50:	4b82      	ldr	r3, [pc, #520]	@ (801505c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8014e52:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8014e54:	f003 0301 	and.w	r3, r3, #1
 8014e58:	60fb      	str	r3, [r7, #12]
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 8014e5a:	4b80      	ldr	r3, [pc, #512]	@ (801505c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8014e5c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8014e5e:	08db      	lsrs	r3, r3, #3
 8014e60:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8014e64:	68fa      	ldr	r2, [r7, #12]
 8014e66:	fb02 f303 	mul.w	r3, r2, r3
 8014e6a:	ee07 3a90 	vmov	s15, r3
 8014e6e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8014e72:	edc7 7a02 	vstr	s15, [r7, #8]

      if (pllm != 0U)
 8014e76:	693b      	ldr	r3, [r7, #16]
 8014e78:	2b00      	cmp	r3, #0
 8014e7a:	f000 80e1 	beq.w	8015040 <HAL_RCC_GetSysClockFreq+0x2b8>
 8014e7e:	697b      	ldr	r3, [r7, #20]
 8014e80:	2b02      	cmp	r3, #2
 8014e82:	f000 8083 	beq.w	8014f8c <HAL_RCC_GetSysClockFreq+0x204>
 8014e86:	697b      	ldr	r3, [r7, #20]
 8014e88:	2b02      	cmp	r3, #2
 8014e8a:	f200 80a1 	bhi.w	8014fd0 <HAL_RCC_GetSysClockFreq+0x248>
 8014e8e:	697b      	ldr	r3, [r7, #20]
 8014e90:	2b00      	cmp	r3, #0
 8014e92:	d003      	beq.n	8014e9c <HAL_RCC_GetSysClockFreq+0x114>
 8014e94:	697b      	ldr	r3, [r7, #20]
 8014e96:	2b01      	cmp	r3, #1
 8014e98:	d056      	beq.n	8014f48 <HAL_RCC_GetSysClockFreq+0x1c0>
 8014e9a:	e099      	b.n	8014fd0 <HAL_RCC_GetSysClockFreq+0x248>
      {
        switch (pllsource)
        {
          case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

            if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8014e9c:	4b6f      	ldr	r3, [pc, #444]	@ (801505c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8014e9e:	681b      	ldr	r3, [r3, #0]
 8014ea0:	f003 0320 	and.w	r3, r3, #32
 8014ea4:	2b00      	cmp	r3, #0
 8014ea6:	d02d      	beq.n	8014f04 <HAL_RCC_GetSysClockFreq+0x17c>
            {
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8014ea8:	4b6c      	ldr	r3, [pc, #432]	@ (801505c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8014eaa:	681b      	ldr	r3, [r3, #0]
 8014eac:	08db      	lsrs	r3, r3, #3
 8014eae:	f003 0303 	and.w	r3, r3, #3
 8014eb2:	4a6b      	ldr	r2, [pc, #428]	@ (8015060 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8014eb4:	fa22 f303 	lsr.w	r3, r2, r3
 8014eb8:	607b      	str	r3, [r7, #4]
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8014eba:	687b      	ldr	r3, [r7, #4]
 8014ebc:	ee07 3a90 	vmov	s15, r3
 8014ec0:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8014ec4:	693b      	ldr	r3, [r7, #16]
 8014ec6:	ee07 3a90 	vmov	s15, r3
 8014eca:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8014ece:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8014ed2:	4b62      	ldr	r3, [pc, #392]	@ (801505c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8014ed4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8014ed6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8014eda:	ee07 3a90 	vmov	s15, r3
 8014ede:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8014ee2:	ed97 6a02 	vldr	s12, [r7, #8]
 8014ee6:	eddf 5a61 	vldr	s11, [pc, #388]	@ 801506c <HAL_RCC_GetSysClockFreq+0x2e4>
 8014eea:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8014eee:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8014ef2:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8014ef6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8014efa:	ee67 7a27 	vmul.f32	s15, s14, s15
 8014efe:	edc7 7a07 	vstr	s15, [r7, #28]
            }
            else
            {
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
            }
            break;
 8014f02:	e087      	b.n	8015014 <HAL_RCC_GetSysClockFreq+0x28c>
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8014f04:	693b      	ldr	r3, [r7, #16]
 8014f06:	ee07 3a90 	vmov	s15, r3
 8014f0a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8014f0e:	eddf 6a58 	vldr	s13, [pc, #352]	@ 8015070 <HAL_RCC_GetSysClockFreq+0x2e8>
 8014f12:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8014f16:	4b51      	ldr	r3, [pc, #324]	@ (801505c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8014f18:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8014f1a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8014f1e:	ee07 3a90 	vmov	s15, r3
 8014f22:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8014f26:	ed97 6a02 	vldr	s12, [r7, #8]
 8014f2a:	eddf 5a50 	vldr	s11, [pc, #320]	@ 801506c <HAL_RCC_GetSysClockFreq+0x2e4>
 8014f2e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8014f32:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8014f36:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8014f3a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8014f3e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8014f42:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8014f46:	e065      	b.n	8015014 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8014f48:	693b      	ldr	r3, [r7, #16]
 8014f4a:	ee07 3a90 	vmov	s15, r3
 8014f4e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8014f52:	eddf 6a48 	vldr	s13, [pc, #288]	@ 8015074 <HAL_RCC_GetSysClockFreq+0x2ec>
 8014f56:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8014f5a:	4b40      	ldr	r3, [pc, #256]	@ (801505c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8014f5c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8014f5e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8014f62:	ee07 3a90 	vmov	s15, r3
 8014f66:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8014f6a:	ed97 6a02 	vldr	s12, [r7, #8]
 8014f6e:	eddf 5a3f 	vldr	s11, [pc, #252]	@ 801506c <HAL_RCC_GetSysClockFreq+0x2e4>
 8014f72:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8014f76:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8014f7a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8014f7e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8014f82:	ee67 7a27 	vmul.f32	s15, s14, s15
 8014f86:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8014f8a:	e043      	b.n	8015014 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
            pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8014f8c:	693b      	ldr	r3, [r7, #16]
 8014f8e:	ee07 3a90 	vmov	s15, r3
 8014f92:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8014f96:	eddf 6a38 	vldr	s13, [pc, #224]	@ 8015078 <HAL_RCC_GetSysClockFreq+0x2f0>
 8014f9a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8014f9e:	4b2f      	ldr	r3, [pc, #188]	@ (801505c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8014fa0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8014fa2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8014fa6:	ee07 3a90 	vmov	s15, r3
 8014faa:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8014fae:	ed97 6a02 	vldr	s12, [r7, #8]
 8014fb2:	eddf 5a2e 	vldr	s11, [pc, #184]	@ 801506c <HAL_RCC_GetSysClockFreq+0x2e4>
 8014fb6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8014fba:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8014fbe:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8014fc2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8014fc6:	ee67 7a27 	vmul.f32	s15, s14, s15
 8014fca:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8014fce:	e021      	b.n	8015014 <HAL_RCC_GetSysClockFreq+0x28c>

          default:
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8014fd0:	693b      	ldr	r3, [r7, #16]
 8014fd2:	ee07 3a90 	vmov	s15, r3
 8014fd6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8014fda:	eddf 6a26 	vldr	s13, [pc, #152]	@ 8015074 <HAL_RCC_GetSysClockFreq+0x2ec>
 8014fde:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8014fe2:	4b1e      	ldr	r3, [pc, #120]	@ (801505c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8014fe4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8014fe6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8014fea:	ee07 3a90 	vmov	s15, r3
 8014fee:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8014ff2:	ed97 6a02 	vldr	s12, [r7, #8]
 8014ff6:	eddf 5a1d 	vldr	s11, [pc, #116]	@ 801506c <HAL_RCC_GetSysClockFreq+0x2e4>
 8014ffa:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8014ffe:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8015002:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8015006:	ee77 7aa6 	vadd.f32	s15, s15, s13
 801500a:	ee67 7a27 	vmul.f32	s15, s14, s15
 801500e:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8015012:	bf00      	nop
        }
        pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9) + 1U) ;
 8015014:	4b11      	ldr	r3, [pc, #68]	@ (801505c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8015016:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8015018:	0a5b      	lsrs	r3, r3, #9
 801501a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 801501e:	3301      	adds	r3, #1
 8015020:	603b      	str	r3, [r7, #0]
        sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
 8015022:	683b      	ldr	r3, [r7, #0]
 8015024:	ee07 3a90 	vmov	s15, r3
 8015028:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 801502c:	edd7 6a07 	vldr	s13, [r7, #28]
 8015030:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8015034:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8015038:	ee17 3a90 	vmov	r3, s15
 801503c:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        sysclockfreq = 0U;
      }
      break;
 801503e:	e005      	b.n	801504c <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = 0U;
 8015040:	2300      	movs	r3, #0
 8015042:	61bb      	str	r3, [r7, #24]
      break;
 8015044:	e002      	b.n	801504c <HAL_RCC_GetSysClockFreq+0x2c4>

    default:
      sysclockfreq = CSI_VALUE;
 8015046:	4b07      	ldr	r3, [pc, #28]	@ (8015064 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8015048:	61bb      	str	r3, [r7, #24]
      break;
 801504a:	bf00      	nop
  }

  return sysclockfreq;
 801504c:	69bb      	ldr	r3, [r7, #24]
}
 801504e:	4618      	mov	r0, r3
 8015050:	3724      	adds	r7, #36	@ 0x24
 8015052:	46bd      	mov	sp, r7
 8015054:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015058:	4770      	bx	lr
 801505a:	bf00      	nop
 801505c:	58024400 	.word	0x58024400
 8015060:	03d09000 	.word	0x03d09000
 8015064:	003d0900 	.word	0x003d0900
 8015068:	017d7840 	.word	0x017d7840
 801506c:	46000000 	.word	0x46000000
 8015070:	4c742400 	.word	0x4c742400
 8015074:	4a742400 	.word	0x4a742400
 8015078:	4bbebc20 	.word	0x4bbebc20

0801507c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 801507c:	b580      	push	{r7, lr}
 801507e:	b082      	sub	sp, #8
 8015080:	af00      	add	r7, sp, #0
  uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 8015082:	f7ff fe81 	bl	8014d88 <HAL_RCC_GetSysClockFreq>
 8015086:	4602      	mov	r2, r0
 8015088:	4b10      	ldr	r3, [pc, #64]	@ (80150cc <HAL_RCC_GetHCLKFreq+0x50>)
 801508a:	699b      	ldr	r3, [r3, #24]
 801508c:	0a1b      	lsrs	r3, r3, #8
 801508e:	f003 030f 	and.w	r3, r3, #15
 8015092:	490f      	ldr	r1, [pc, #60]	@ (80150d0 <HAL_RCC_GetHCLKFreq+0x54>)
 8015094:	5ccb      	ldrb	r3, [r1, r3]
 8015096:	f003 031f 	and.w	r3, r3, #31
 801509a:	fa22 f303 	lsr.w	r3, r2, r3
 801509e:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 80150a0:	4b0a      	ldr	r3, [pc, #40]	@ (80150cc <HAL_RCC_GetHCLKFreq+0x50>)
 80150a2:	699b      	ldr	r3, [r3, #24]
 80150a4:	f003 030f 	and.w	r3, r3, #15
 80150a8:	4a09      	ldr	r2, [pc, #36]	@ (80150d0 <HAL_RCC_GetHCLKFreq+0x54>)
 80150aa:	5cd3      	ldrb	r3, [r2, r3]
 80150ac:	f003 031f 	and.w	r3, r3, #31
 80150b0:	687a      	ldr	r2, [r7, #4]
 80150b2:	fa22 f303 	lsr.w	r3, r2, r3
 80150b6:	4a07      	ldr	r2, [pc, #28]	@ (80150d4 <HAL_RCC_GetHCLKFreq+0x58>)
 80150b8:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 80150ba:	4a07      	ldr	r2, [pc, #28]	@ (80150d8 <HAL_RCC_GetHCLKFreq+0x5c>)
 80150bc:	687b      	ldr	r3, [r7, #4]
 80150be:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 80150c0:	4b04      	ldr	r3, [pc, #16]	@ (80150d4 <HAL_RCC_GetHCLKFreq+0x58>)
 80150c2:	681b      	ldr	r3, [r3, #0]
}
 80150c4:	4618      	mov	r0, r3
 80150c6:	3708      	adds	r7, #8
 80150c8:	46bd      	mov	sp, r7
 80150ca:	bd80      	pop	{r7, pc}
 80150cc:	58024400 	.word	0x58024400
 80150d0:	0802d1d4 	.word	0x0802d1d4
 80150d4:	2400001c 	.word	0x2400001c
 80150d8:	24000018 	.word	0x24000018

080150dc <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80150dc:	b580      	push	{r7, lr}
 80150de:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1) >> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 80150e0:	f7ff ffcc 	bl	801507c <HAL_RCC_GetHCLKFreq>
 80150e4:	4602      	mov	r2, r0
 80150e6:	4b06      	ldr	r3, [pc, #24]	@ (8015100 <HAL_RCC_GetPCLK1Freq+0x24>)
 80150e8:	69db      	ldr	r3, [r3, #28]
 80150ea:	091b      	lsrs	r3, r3, #4
 80150ec:	f003 0307 	and.w	r3, r3, #7
 80150f0:	4904      	ldr	r1, [pc, #16]	@ (8015104 <HAL_RCC_GetPCLK1Freq+0x28>)
 80150f2:	5ccb      	ldrb	r3, [r1, r3]
 80150f4:	f003 031f 	and.w	r3, r3, #31
 80150f8:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1) >> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 80150fc:	4618      	mov	r0, r3
 80150fe:	bd80      	pop	{r7, pc}
 8015100:	58024400 	.word	0x58024400
 8015104:	0802d1d4 	.word	0x0802d1d4

08015108 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8015108:	b580      	push	{r7, lr}
 801510a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2) >> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 801510c:	f7ff ffb6 	bl	801507c <HAL_RCC_GetHCLKFreq>
 8015110:	4602      	mov	r2, r0
 8015112:	4b06      	ldr	r3, [pc, #24]	@ (801512c <HAL_RCC_GetPCLK2Freq+0x24>)
 8015114:	69db      	ldr	r3, [r3, #28]
 8015116:	0a1b      	lsrs	r3, r3, #8
 8015118:	f003 0307 	and.w	r3, r3, #7
 801511c:	4904      	ldr	r1, [pc, #16]	@ (8015130 <HAL_RCC_GetPCLK2Freq+0x28>)
 801511e:	5ccb      	ldrb	r3, [r1, r3]
 8015120:	f003 031f 	and.w	r3, r3, #31
 8015124:	fa22 f303 	lsr.w	r3, r2, r3
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2) >> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 8015128:	4618      	mov	r0, r3
 801512a:	bd80      	pop	{r7, pc}
 801512c:	58024400 	.word	0x58024400
 8015130:	0802d1d4 	.word	0x0802d1d4

08015134 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency: Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8015134:	b480      	push	{r7}
 8015136:	b083      	sub	sp, #12
 8015138:	af00      	add	r7, sp, #0
 801513a:	6078      	str	r0, [r7, #4]
 801513c:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_D1PCLK1 | RCC_CLOCKTYPE_PCLK1 |
 801513e:	687b      	ldr	r3, [r7, #4]
 8015140:	223f      	movs	r2, #63	@ 0x3f
 8015142:	601a      	str	r2, [r3, #0]
                                 RCC_CLOCKTYPE_PCLK2 |  RCC_CLOCKTYPE_D3PCLK1  ;

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8015144:	4b1a      	ldr	r3, [pc, #104]	@ (80151b0 <HAL_RCC_GetClockConfig+0x7c>)
 8015146:	691b      	ldr	r3, [r3, #16]
 8015148:	f003 0207 	and.w	r2, r3, #7
 801514c:	687b      	ldr	r3, [r7, #4]
 801514e:	605a      	str	r2, [r3, #4]

#if defined(RCC_D1CFGR_D1CPRE)
  /* Get the SYSCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKDivider = (uint32_t)(RCC->D1CFGR & RCC_D1CFGR_D1CPRE);
 8015150:	4b17      	ldr	r3, [pc, #92]	@ (80151b0 <HAL_RCC_GetClockConfig+0x7c>)
 8015152:	699b      	ldr	r3, [r3, #24]
 8015154:	f403 6270 	and.w	r2, r3, #3840	@ 0xf00
 8015158:	687b      	ldr	r3, [r7, #4]
 801515a:	609a      	str	r2, [r3, #8]

  /* Get the D1HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->D1CFGR & RCC_D1CFGR_HPRE);
 801515c:	4b14      	ldr	r3, [pc, #80]	@ (80151b0 <HAL_RCC_GetClockConfig+0x7c>)
 801515e:	699b      	ldr	r3, [r3, #24]
 8015160:	f003 020f 	and.w	r2, r3, #15
 8015164:	687b      	ldr	r3, [r7, #4]
 8015166:	60da      	str	r2, [r3, #12]

  /* Get the APB3 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB3CLKDivider = (uint32_t)(RCC->D1CFGR & RCC_D1CFGR_D1PPRE);
 8015168:	4b11      	ldr	r3, [pc, #68]	@ (80151b0 <HAL_RCC_GetClockConfig+0x7c>)
 801516a:	699b      	ldr	r3, [r3, #24]
 801516c:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 8015170:	687b      	ldr	r3, [r7, #4]
 8015172:	611a      	str	r2, [r3, #16]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1);
 8015174:	4b0e      	ldr	r3, [pc, #56]	@ (80151b0 <HAL_RCC_GetClockConfig+0x7c>)
 8015176:	69db      	ldr	r3, [r3, #28]
 8015178:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 801517c:	687b      	ldr	r3, [r7, #4]
 801517e:	615a      	str	r2, [r3, #20]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2);
 8015180:	4b0b      	ldr	r3, [pc, #44]	@ (80151b0 <HAL_RCC_GetClockConfig+0x7c>)
 8015182:	69db      	ldr	r3, [r3, #28]
 8015184:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 8015188:	687b      	ldr	r3, [r7, #4]
 801518a:	619a      	str	r2, [r3, #24]

  /* Get the APB4 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB4CLKDivider = (uint32_t)(RCC->D3CFGR & RCC_D3CFGR_D3PPRE);
 801518c:	4b08      	ldr	r3, [pc, #32]	@ (80151b0 <HAL_RCC_GetClockConfig+0x7c>)
 801518e:	6a1b      	ldr	r3, [r3, #32]
 8015190:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 8015194:	687b      	ldr	r3, [r7, #4]
 8015196:	61da      	str	r2, [r3, #28]
  /* Get the APB4 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB4CLKDivider = (uint32_t)(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE);
#endif

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8015198:	4b06      	ldr	r3, [pc, #24]	@ (80151b4 <HAL_RCC_GetClockConfig+0x80>)
 801519a:	681b      	ldr	r3, [r3, #0]
 801519c:	f003 020f 	and.w	r2, r3, #15
 80151a0:	683b      	ldr	r3, [r7, #0]
 80151a2:	601a      	str	r2, [r3, #0]
}
 80151a4:	bf00      	nop
 80151a6:	370c      	adds	r7, #12
 80151a8:	46bd      	mov	sp, r7
 80151aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80151ae:	4770      	bx	lr
 80151b0:	58024400 	.word	0x58024400
 80151b4:	52002000 	.word	0x52002000

080151b8 <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80151b8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80151bc:	b0ca      	sub	sp, #296	@ 0x128
 80151be:	af00      	add	r7, sp, #0
 80151c0:	f8c7 0114 	str.w	r0, [r7, #276]	@ 0x114
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 80151c4:	2300      	movs	r3, #0
 80151c6:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80151ca:	2300      	movs	r3, #0
 80151cc:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 80151d0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80151d4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80151d8:	f002 6400 	and.w	r4, r2, #134217728	@ 0x8000000
 80151dc:	2500      	movs	r5, #0
 80151de:	ea54 0305 	orrs.w	r3, r4, r5
 80151e2:	d049      	beq.n	8015278 <HAL_RCCEx_PeriphCLKConfig+0xc0>
  {

    switch (PeriphClkInit->SpdifrxClockSelection)
 80151e4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80151e8:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80151ea:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 80151ee:	d02f      	beq.n	8015250 <HAL_RCCEx_PeriphCLKConfig+0x98>
 80151f0:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 80151f4:	d828      	bhi.n	8015248 <HAL_RCCEx_PeriphCLKConfig+0x90>
 80151f6:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 80151fa:	d01a      	beq.n	8015232 <HAL_RCCEx_PeriphCLKConfig+0x7a>
 80151fc:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8015200:	d822      	bhi.n	8015248 <HAL_RCCEx_PeriphCLKConfig+0x90>
 8015202:	2b00      	cmp	r3, #0
 8015204:	d003      	beq.n	801520e <HAL_RCCEx_PeriphCLKConfig+0x56>
 8015206:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 801520a:	d007      	beq.n	801521c <HAL_RCCEx_PeriphCLKConfig+0x64>
 801520c:	e01c      	b.n	8015248 <HAL_RCCEx_PeriphCLKConfig+0x90>
    {
      case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
        /* Enable PLL1Q Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 801520e:	4bb8      	ldr	r3, [pc, #736]	@ (80154f0 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8015210:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8015212:	4ab7      	ldr	r2, [pc, #732]	@ (80154f0 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8015214:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8015218:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 801521a:	e01a      	b.n	8015252 <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 801521c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8015220:	3308      	adds	r3, #8
 8015222:	2102      	movs	r1, #2
 8015224:	4618      	mov	r0, r3
 8015226:	f001 f9d1 	bl	80165cc <RCCEx_PLL2_Config>
 801522a:	4603      	mov	r3, r0
 801522c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8015230:	e00f      	b.n	8015252 <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8015232:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8015236:	3328      	adds	r3, #40	@ 0x28
 8015238:	2102      	movs	r1, #2
 801523a:	4618      	mov	r0, r3
 801523c:	f001 fa78 	bl	8016730 <RCCEx_PLL3_Config>
 8015240:	4603      	mov	r3, r0
 8015242:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8015246:	e004      	b.n	8015252 <HAL_RCCEx_PeriphCLKConfig+0x9a>
        /* Internal OSC clock is used as source of SPDIFRX clock*/
        /* SPDIFRX clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8015248:	2301      	movs	r3, #1
 801524a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 801524e:	e000      	b.n	8015252 <HAL_RCCEx_PeriphCLKConfig+0x9a>
        break;
 8015250:	bf00      	nop
    }

    if (ret == HAL_OK)
 8015252:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8015256:	2b00      	cmp	r3, #0
 8015258:	d10a      	bne.n	8015270 <HAL_RCCEx_PeriphCLKConfig+0xb8>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 801525a:	4ba5      	ldr	r3, [pc, #660]	@ (80154f0 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 801525c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 801525e:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 8015262:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8015266:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8015268:	4aa1      	ldr	r2, [pc, #644]	@ (80154f0 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 801526a:	430b      	orrs	r3, r1
 801526c:	6513      	str	r3, [r2, #80]	@ 0x50
 801526e:	e003      	b.n	8015278 <HAL_RCCEx_PeriphCLKConfig+0xc0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8015270:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8015274:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8015278:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801527c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8015280:	f402 7880 	and.w	r8, r2, #256	@ 0x100
 8015284:	f04f 0900 	mov.w	r9, #0
 8015288:	ea58 0309 	orrs.w	r3, r8, r9
 801528c:	d047      	beq.n	801531e <HAL_RCCEx_PeriphCLKConfig+0x166>
  {
    switch (PeriphClkInit->Sai1ClockSelection)
 801528e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8015292:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8015294:	2b04      	cmp	r3, #4
 8015296:	d82a      	bhi.n	80152ee <HAL_RCCEx_PeriphCLKConfig+0x136>
 8015298:	a201      	add	r2, pc, #4	@ (adr r2, 80152a0 <HAL_RCCEx_PeriphCLKConfig+0xe8>)
 801529a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801529e:	bf00      	nop
 80152a0:	080152b5 	.word	0x080152b5
 80152a4:	080152c3 	.word	0x080152c3
 80152a8:	080152d9 	.word	0x080152d9
 80152ac:	080152f7 	.word	0x080152f7
 80152b0:	080152f7 	.word	0x080152f7
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80152b4:	4b8e      	ldr	r3, [pc, #568]	@ (80154f0 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80152b6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80152b8:	4a8d      	ldr	r2, [pc, #564]	@ (80154f0 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80152ba:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80152be:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 80152c0:	e01a      	b.n	80152f8 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80152c2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80152c6:	3308      	adds	r3, #8
 80152c8:	2100      	movs	r1, #0
 80152ca:	4618      	mov	r0, r3
 80152cc:	f001 f97e 	bl	80165cc <RCCEx_PLL2_Config>
 80152d0:	4603      	mov	r3, r0
 80152d2:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 80152d6:	e00f      	b.n	80152f8 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 80152d8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80152dc:	3328      	adds	r3, #40	@ 0x28
 80152de:	2100      	movs	r1, #0
 80152e0:	4618      	mov	r0, r3
 80152e2:	f001 fa25 	bl	8016730 <RCCEx_PLL3_Config>
 80152e6:	4603      	mov	r3, r0
 80152e8:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 80152ec:	e004      	b.n	80152f8 <HAL_RCCEx_PeriphCLKConfig+0x140>
        /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
        /* SAI1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80152ee:	2301      	movs	r3, #1
 80152f0:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80152f4:	e000      	b.n	80152f8 <HAL_RCCEx_PeriphCLKConfig+0x140>
        break;
 80152f6:	bf00      	nop
    }

    if (ret == HAL_OK)
 80152f8:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80152fc:	2b00      	cmp	r3, #0
 80152fe:	d10a      	bne.n	8015316 <HAL_RCCEx_PeriphCLKConfig+0x15e>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8015300:	4b7b      	ldr	r3, [pc, #492]	@ (80154f0 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8015302:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8015304:	f023 0107 	bic.w	r1, r3, #7
 8015308:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801530c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 801530e:	4a78      	ldr	r2, [pc, #480]	@ (80154f0 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8015310:	430b      	orrs	r3, r1
 8015312:	6513      	str	r3, [r2, #80]	@ 0x50
 8015314:	e003      	b.n	801531e <HAL_RCCEx_PeriphCLKConfig+0x166>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8015316:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 801531a:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

#if defined(SAI3)
  /*---------------------------- SAI2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 801531e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8015322:	e9d3 2300 	ldrd	r2, r3, [r3]
 8015326:	f402 7a00 	and.w	sl, r2, #512	@ 0x200
 801532a:	f04f 0b00 	mov.w	fp, #0
 801532e:	ea5a 030b 	orrs.w	r3, sl, fp
 8015332:	d04c      	beq.n	80153ce <HAL_RCCEx_PeriphCLKConfig+0x216>
  {
    switch (PeriphClkInit->Sai23ClockSelection)
 8015334:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8015338:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 801533a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 801533e:	d030      	beq.n	80153a2 <HAL_RCCEx_PeriphCLKConfig+0x1ea>
 8015340:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8015344:	d829      	bhi.n	801539a <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 8015346:	2bc0      	cmp	r3, #192	@ 0xc0
 8015348:	d02d      	beq.n	80153a6 <HAL_RCCEx_PeriphCLKConfig+0x1ee>
 801534a:	2bc0      	cmp	r3, #192	@ 0xc0
 801534c:	d825      	bhi.n	801539a <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 801534e:	2b80      	cmp	r3, #128	@ 0x80
 8015350:	d018      	beq.n	8015384 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
 8015352:	2b80      	cmp	r3, #128	@ 0x80
 8015354:	d821      	bhi.n	801539a <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 8015356:	2b00      	cmp	r3, #0
 8015358:	d002      	beq.n	8015360 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
 801535a:	2b40      	cmp	r3, #64	@ 0x40
 801535c:	d007      	beq.n	801536e <HAL_RCCEx_PeriphCLKConfig+0x1b6>
 801535e:	e01c      	b.n	801539a <HAL_RCCEx_PeriphCLKConfig+0x1e2>
    {
      case RCC_SAI23CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2/3 */
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8015360:	4b63      	ldr	r3, [pc, #396]	@ (80154f0 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8015362:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8015364:	4a62      	ldr	r2, [pc, #392]	@ (80154f0 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8015366:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 801536a:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 801536c:	e01c      	b.n	80153a8 <HAL_RCCEx_PeriphCLKConfig+0x1f0>

      case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2/3 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 801536e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8015372:	3308      	adds	r3, #8
 8015374:	2100      	movs	r1, #0
 8015376:	4618      	mov	r0, r3
 8015378:	f001 f928 	bl	80165cc <RCCEx_PLL2_Config>
 801537c:	4603      	mov	r3, r0
 801537e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 8015382:	e011      	b.n	80153a8 <HAL_RCCEx_PeriphCLKConfig+0x1f0>

      case RCC_SAI23CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8015384:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8015388:	3328      	adds	r3, #40	@ 0x28
 801538a:	2100      	movs	r1, #0
 801538c:	4618      	mov	r0, r3
 801538e:	f001 f9cf 	bl	8016730 <RCCEx_PLL3_Config>
 8015392:	4603      	mov	r3, r0
 8015394:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 8015398:	e006      	b.n	80153a8 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        /* HSI, HSE, or CSI oscillator is used as source of SAI2/3 clock */
        /* SAI2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 801539a:	2301      	movs	r3, #1
 801539c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80153a0:	e002      	b.n	80153a8 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        break;
 80153a2:	bf00      	nop
 80153a4:	e000      	b.n	80153a8 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        break;
 80153a6:	bf00      	nop
    }

    if (ret == HAL_OK)
 80153a8:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80153ac:	2b00      	cmp	r3, #0
 80153ae:	d10a      	bne.n	80153c6 <HAL_RCCEx_PeriphCLKConfig+0x20e>
    {
      /* Set the source of SAI2/3 clock*/
      __HAL_RCC_SAI23_CONFIG(PeriphClkInit->Sai23ClockSelection);
 80153b0:	4b4f      	ldr	r3, [pc, #316]	@ (80154f0 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80153b2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80153b4:	f423 71e0 	bic.w	r1, r3, #448	@ 0x1c0
 80153b8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80153bc:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80153be:	4a4c      	ldr	r2, [pc, #304]	@ (80154f0 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80153c0:	430b      	orrs	r3, r1
 80153c2:	6513      	str	r3, [r2, #80]	@ 0x50
 80153c4:	e003      	b.n	80153ce <HAL_RCCEx_PeriphCLKConfig+0x216>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80153c6:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80153ca:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 80153ce:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80153d2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80153d6:	f402 6380 	and.w	r3, r2, #1024	@ 0x400
 80153da:	f8c7 3108 	str.w	r3, [r7, #264]	@ 0x108
 80153de:	2300      	movs	r3, #0
 80153e0:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
 80153e4:	e9d7 1242 	ldrd	r1, r2, [r7, #264]	@ 0x108
 80153e8:	460b      	mov	r3, r1
 80153ea:	4313      	orrs	r3, r2
 80153ec:	d053      	beq.n	8015496 <HAL_RCCEx_PeriphCLKConfig+0x2de>
  {
    switch (PeriphClkInit->Sai4AClockSelection)
 80153ee:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80153f2:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 80153f6:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 80153fa:	d035      	beq.n	8015468 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
 80153fc:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8015400:	d82e      	bhi.n	8015460 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 8015402:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 8015406:	d031      	beq.n	801546c <HAL_RCCEx_PeriphCLKConfig+0x2b4>
 8015408:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 801540c:	d828      	bhi.n	8015460 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 801540e:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8015412:	d01a      	beq.n	801544a <HAL_RCCEx_PeriphCLKConfig+0x292>
 8015414:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8015418:	d822      	bhi.n	8015460 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 801541a:	2b00      	cmp	r3, #0
 801541c:	d003      	beq.n	8015426 <HAL_RCCEx_PeriphCLKConfig+0x26e>
 801541e:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8015422:	d007      	beq.n	8015434 <HAL_RCCEx_PeriphCLKConfig+0x27c>
 8015424:	e01c      	b.n	8015460 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
    {
      case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8015426:	4b32      	ldr	r3, [pc, #200]	@ (80154f0 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8015428:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801542a:	4a31      	ldr	r2, [pc, #196]	@ (80154f0 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 801542c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8015430:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8015432:	e01c      	b.n	801546e <HAL_RCCEx_PeriphCLKConfig+0x2b6>

      case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8015434:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8015438:	3308      	adds	r3, #8
 801543a:	2100      	movs	r1, #0
 801543c:	4618      	mov	r0, r3
 801543e:	f001 f8c5 	bl	80165cc <RCCEx_PLL2_Config>
 8015442:	4603      	mov	r3, r0
 8015444:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 8015448:	e011      	b.n	801546e <HAL_RCCEx_PeriphCLKConfig+0x2b6>

      case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 801544a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801544e:	3328      	adds	r3, #40	@ 0x28
 8015450:	2100      	movs	r1, #0
 8015452:	4618      	mov	r0, r3
 8015454:	f001 f96c 	bl	8016730 <RCCEx_PLL3_Config>
 8015458:	4603      	mov	r3, r0
 801545a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 801545e:	e006      	b.n	801546e <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        /* SAI4A clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 8015460:	2301      	movs	r3, #1
 8015462:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8015466:	e002      	b.n	801546e <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        break;
 8015468:	bf00      	nop
 801546a:	e000      	b.n	801546e <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        break;
 801546c:	bf00      	nop
    }

    if (ret == HAL_OK)
 801546e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8015472:	2b00      	cmp	r3, #0
 8015474:	d10b      	bne.n	801548e <HAL_RCCEx_PeriphCLKConfig+0x2d6>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 8015476:	4b1e      	ldr	r3, [pc, #120]	@ (80154f0 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8015478:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 801547a:	f423 0160 	bic.w	r1, r3, #14680064	@ 0xe00000
 801547e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8015482:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 8015486:	4a1a      	ldr	r2, [pc, #104]	@ (80154f0 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8015488:	430b      	orrs	r3, r1
 801548a:	6593      	str	r3, [r2, #88]	@ 0x58
 801548c:	e003      	b.n	8015496 <HAL_RCCEx_PeriphCLKConfig+0x2de>
    }
    else
    {
      /* set overall return value */
      status = ret;
 801548e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8015492:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 8015496:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801549a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801549e:	f402 6300 	and.w	r3, r2, #2048	@ 0x800
 80154a2:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
 80154a6:	2300      	movs	r3, #0
 80154a8:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
 80154ac:	e9d7 1240 	ldrd	r1, r2, [r7, #256]	@ 0x100
 80154b0:	460b      	mov	r3, r1
 80154b2:	4313      	orrs	r3, r2
 80154b4:	d056      	beq.n	8015564 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
  {
    switch (PeriphClkInit->Sai4BClockSelection)
 80154b6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80154ba:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 80154be:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 80154c2:	d038      	beq.n	8015536 <HAL_RCCEx_PeriphCLKConfig+0x37e>
 80154c4:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 80154c8:	d831      	bhi.n	801552e <HAL_RCCEx_PeriphCLKConfig+0x376>
 80154ca:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 80154ce:	d034      	beq.n	801553a <HAL_RCCEx_PeriphCLKConfig+0x382>
 80154d0:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 80154d4:	d82b      	bhi.n	801552e <HAL_RCCEx_PeriphCLKConfig+0x376>
 80154d6:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 80154da:	d01d      	beq.n	8015518 <HAL_RCCEx_PeriphCLKConfig+0x360>
 80154dc:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 80154e0:	d825      	bhi.n	801552e <HAL_RCCEx_PeriphCLKConfig+0x376>
 80154e2:	2b00      	cmp	r3, #0
 80154e4:	d006      	beq.n	80154f4 <HAL_RCCEx_PeriphCLKConfig+0x33c>
 80154e6:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80154ea:	d00a      	beq.n	8015502 <HAL_RCCEx_PeriphCLKConfig+0x34a>
 80154ec:	e01f      	b.n	801552e <HAL_RCCEx_PeriphCLKConfig+0x376>
 80154ee:	bf00      	nop
 80154f0:	58024400 	.word	0x58024400
    {
      case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80154f4:	4ba2      	ldr	r3, [pc, #648]	@ (8015780 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80154f6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80154f8:	4aa1      	ldr	r2, [pc, #644]	@ (8015780 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80154fa:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80154fe:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8015500:	e01c      	b.n	801553c <HAL_RCCEx_PeriphCLKConfig+0x384>

      case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8015502:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8015506:	3308      	adds	r3, #8
 8015508:	2100      	movs	r1, #0
 801550a:	4618      	mov	r0, r3
 801550c:	f001 f85e 	bl	80165cc <RCCEx_PLL2_Config>
 8015510:	4603      	mov	r3, r0
 8015512:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 8015516:	e011      	b.n	801553c <HAL_RCCEx_PeriphCLKConfig+0x384>

      case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8015518:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801551c:	3328      	adds	r3, #40	@ 0x28
 801551e:	2100      	movs	r1, #0
 8015520:	4618      	mov	r0, r3
 8015522:	f001 f905 	bl	8016730 <RCCEx_PLL3_Config>
 8015526:	4603      	mov	r3, r0
 8015528:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 801552c:	e006      	b.n	801553c <HAL_RCCEx_PeriphCLKConfig+0x384>
        /* SAI4B clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 801552e:	2301      	movs	r3, #1
 8015530:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8015534:	e002      	b.n	801553c <HAL_RCCEx_PeriphCLKConfig+0x384>
        break;
 8015536:	bf00      	nop
 8015538:	e000      	b.n	801553c <HAL_RCCEx_PeriphCLKConfig+0x384>
        break;
 801553a:	bf00      	nop
    }

    if (ret == HAL_OK)
 801553c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8015540:	2b00      	cmp	r3, #0
 8015542:	d10b      	bne.n	801555c <HAL_RCCEx_PeriphCLKConfig+0x3a4>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 8015544:	4b8e      	ldr	r3, [pc, #568]	@ (8015780 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8015546:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8015548:	f023 61e0 	bic.w	r1, r3, #117440512	@ 0x7000000
 801554c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8015550:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 8015554:	4a8a      	ldr	r2, [pc, #552]	@ (8015780 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8015556:	430b      	orrs	r3, r1
 8015558:	6593      	str	r3, [r2, #88]	@ 0x58
 801555a:	e003      	b.n	8015564 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
    }
    else
    {
      /* set overall return value */
      status = ret;
 801555c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8015560:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
  }
#endif  /*SAI4*/

#if defined(QUADSPI)
  /*---------------------------- QSPI configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 8015564:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8015568:	e9d3 2300 	ldrd	r2, r3, [r3]
 801556c:	f002 7300 	and.w	r3, r2, #33554432	@ 0x2000000
 8015570:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 8015574:	2300      	movs	r3, #0
 8015576:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 801557a:	e9d7 123e 	ldrd	r1, r2, [r7, #248]	@ 0xf8
 801557e:	460b      	mov	r3, r1
 8015580:	4313      	orrs	r3, r2
 8015582:	d03a      	beq.n	80155fa <HAL_RCCEx_PeriphCLKConfig+0x442>
  {
    switch (PeriphClkInit->QspiClockSelection)
 8015584:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8015588:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 801558a:	2b30      	cmp	r3, #48	@ 0x30
 801558c:	d01f      	beq.n	80155ce <HAL_RCCEx_PeriphCLKConfig+0x416>
 801558e:	2b30      	cmp	r3, #48	@ 0x30
 8015590:	d819      	bhi.n	80155c6 <HAL_RCCEx_PeriphCLKConfig+0x40e>
 8015592:	2b20      	cmp	r3, #32
 8015594:	d00c      	beq.n	80155b0 <HAL_RCCEx_PeriphCLKConfig+0x3f8>
 8015596:	2b20      	cmp	r3, #32
 8015598:	d815      	bhi.n	80155c6 <HAL_RCCEx_PeriphCLKConfig+0x40e>
 801559a:	2b00      	cmp	r3, #0
 801559c:	d019      	beq.n	80155d2 <HAL_RCCEx_PeriphCLKConfig+0x41a>
 801559e:	2b10      	cmp	r3, #16
 80155a0:	d111      	bne.n	80155c6 <HAL_RCCEx_PeriphCLKConfig+0x40e>
    {
      case RCC_QSPICLKSOURCE_PLL:      /* PLL is used as clock source for QSPI*/
        /* Enable QSPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80155a2:	4b77      	ldr	r3, [pc, #476]	@ (8015780 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80155a4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80155a6:	4a76      	ldr	r2, [pc, #472]	@ (8015780 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80155a8:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80155ac:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* QSPI clock source configuration done later after clock selection check */
        break;
 80155ae:	e011      	b.n	80155d4 <HAL_RCCEx_PeriphCLKConfig+0x41c>

      case RCC_QSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for QSPI*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 80155b0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80155b4:	3308      	adds	r3, #8
 80155b6:	2102      	movs	r1, #2
 80155b8:	4618      	mov	r0, r3
 80155ba:	f001 f807 	bl	80165cc <RCCEx_PLL2_Config>
 80155be:	4603      	mov	r3, r0
 80155c0:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* QSPI clock source configuration done later after clock selection check */
        break;
 80155c4:	e006      	b.n	80155d4 <HAL_RCCEx_PeriphCLKConfig+0x41c>
      case RCC_QSPICLKSOURCE_D1HCLK:
        /* Domain1 HCLK  clock selected as QSPI kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 80155c6:	2301      	movs	r3, #1
 80155c8:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80155cc:	e002      	b.n	80155d4 <HAL_RCCEx_PeriphCLKConfig+0x41c>
        break;
 80155ce:	bf00      	nop
 80155d0:	e000      	b.n	80155d4 <HAL_RCCEx_PeriphCLKConfig+0x41c>
        break;
 80155d2:	bf00      	nop
    }

    if (ret == HAL_OK)
 80155d4:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80155d8:	2b00      	cmp	r3, #0
 80155da:	d10a      	bne.n	80155f2 <HAL_RCCEx_PeriphCLKConfig+0x43a>
    {
      /* Set the source of QSPI clock*/
      __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 80155dc:	4b68      	ldr	r3, [pc, #416]	@ (8015780 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80155de:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80155e0:	f023 0130 	bic.w	r1, r3, #48	@ 0x30
 80155e4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80155e8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80155ea:	4a65      	ldr	r2, [pc, #404]	@ (8015780 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80155ec:	430b      	orrs	r3, r1
 80155ee:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80155f0:	e003      	b.n	80155fa <HAL_RCCEx_PeriphCLKConfig+0x442>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80155f2:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80155f6:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 80155fa:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80155fe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8015602:	f402 5380 	and.w	r3, r2, #4096	@ 0x1000
 8015606:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 801560a:	2300      	movs	r3, #0
 801560c:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 8015610:	e9d7 123c 	ldrd	r1, r2, [r7, #240]	@ 0xf0
 8015614:	460b      	mov	r3, r1
 8015616:	4313      	orrs	r3, r2
 8015618:	d051      	beq.n	80156be <HAL_RCCEx_PeriphCLKConfig+0x506>
  {
    switch (PeriphClkInit->Spi123ClockSelection)
 801561a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801561e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8015620:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8015624:	d035      	beq.n	8015692 <HAL_RCCEx_PeriphCLKConfig+0x4da>
 8015626:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 801562a:	d82e      	bhi.n	801568a <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 801562c:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8015630:	d031      	beq.n	8015696 <HAL_RCCEx_PeriphCLKConfig+0x4de>
 8015632:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8015636:	d828      	bhi.n	801568a <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 8015638:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 801563c:	d01a      	beq.n	8015674 <HAL_RCCEx_PeriphCLKConfig+0x4bc>
 801563e:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8015642:	d822      	bhi.n	801568a <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 8015644:	2b00      	cmp	r3, #0
 8015646:	d003      	beq.n	8015650 <HAL_RCCEx_PeriphCLKConfig+0x498>
 8015648:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 801564c:	d007      	beq.n	801565e <HAL_RCCEx_PeriphCLKConfig+0x4a6>
 801564e:	e01c      	b.n	801568a <HAL_RCCEx_PeriphCLKConfig+0x4d2>
    {
      case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
        /* Enable SPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8015650:	4b4b      	ldr	r3, [pc, #300]	@ (8015780 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8015652:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8015654:	4a4a      	ldr	r2, [pc, #296]	@ (8015780 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8015656:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 801565a:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 801565c:	e01c      	b.n	8015698 <HAL_RCCEx_PeriphCLKConfig+0x4e0>

      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 801565e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8015662:	3308      	adds	r3, #8
 8015664:	2100      	movs	r1, #0
 8015666:	4618      	mov	r0, r3
 8015668:	f000 ffb0 	bl	80165cc <RCCEx_PLL2_Config>
 801566c:	4603      	mov	r3, r0
 801566e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8015672:	e011      	b.n	8015698 <HAL_RCCEx_PeriphCLKConfig+0x4e0>

      case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8015674:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8015678:	3328      	adds	r3, #40	@ 0x28
 801567a:	2100      	movs	r1, #0
 801567c:	4618      	mov	r0, r3
 801567e:	f001 f857 	bl	8016730 <RCCEx_PLL3_Config>
 8015682:	4603      	mov	r3, r0
 8015684:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8015688:	e006      	b.n	8015698 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 801568a:	2301      	movs	r3, #1
 801568c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8015690:	e002      	b.n	8015698 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        break;
 8015692:	bf00      	nop
 8015694:	e000      	b.n	8015698 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        break;
 8015696:	bf00      	nop
    }

    if (ret == HAL_OK)
 8015698:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 801569c:	2b00      	cmp	r3, #0
 801569e:	d10a      	bne.n	80156b6 <HAL_RCCEx_PeriphCLKConfig+0x4fe>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 80156a0:	4b37      	ldr	r3, [pc, #220]	@ (8015780 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80156a2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80156a4:	f423 41e0 	bic.w	r1, r3, #28672	@ 0x7000
 80156a8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80156ac:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80156ae:	4a34      	ldr	r2, [pc, #208]	@ (8015780 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80156b0:	430b      	orrs	r3, r1
 80156b2:	6513      	str	r3, [r2, #80]	@ 0x50
 80156b4:	e003      	b.n	80156be <HAL_RCCEx_PeriphCLKConfig+0x506>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80156b6:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80156ba:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 80156be:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80156c2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80156c6:	f402 5300 	and.w	r3, r2, #8192	@ 0x2000
 80156ca:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 80156ce:	2300      	movs	r3, #0
 80156d0:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 80156d4:	e9d7 123a 	ldrd	r1, r2, [r7, #232]	@ 0xe8
 80156d8:	460b      	mov	r3, r1
 80156da:	4313      	orrs	r3, r2
 80156dc:	d056      	beq.n	801578c <HAL_RCCEx_PeriphCLKConfig+0x5d4>
  {
    switch (PeriphClkInit->Spi45ClockSelection)
 80156de:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80156e2:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80156e4:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80156e8:	d033      	beq.n	8015752 <HAL_RCCEx_PeriphCLKConfig+0x59a>
 80156ea:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80156ee:	d82c      	bhi.n	801574a <HAL_RCCEx_PeriphCLKConfig+0x592>
 80156f0:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 80156f4:	d02f      	beq.n	8015756 <HAL_RCCEx_PeriphCLKConfig+0x59e>
 80156f6:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 80156fa:	d826      	bhi.n	801574a <HAL_RCCEx_PeriphCLKConfig+0x592>
 80156fc:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8015700:	d02b      	beq.n	801575a <HAL_RCCEx_PeriphCLKConfig+0x5a2>
 8015702:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8015706:	d820      	bhi.n	801574a <HAL_RCCEx_PeriphCLKConfig+0x592>
 8015708:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 801570c:	d012      	beq.n	8015734 <HAL_RCCEx_PeriphCLKConfig+0x57c>
 801570e:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8015712:	d81a      	bhi.n	801574a <HAL_RCCEx_PeriphCLKConfig+0x592>
 8015714:	2b00      	cmp	r3, #0
 8015716:	d022      	beq.n	801575e <HAL_RCCEx_PeriphCLKConfig+0x5a6>
 8015718:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 801571c:	d115      	bne.n	801574a <HAL_RCCEx_PeriphCLKConfig+0x592>
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 801571e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8015722:	3308      	adds	r3, #8
 8015724:	2101      	movs	r1, #1
 8015726:	4618      	mov	r0, r3
 8015728:	f000 ff50 	bl	80165cc <RCCEx_PLL2_Config>
 801572c:	4603      	mov	r3, r0
 801572e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 8015732:	e015      	b.n	8015760 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
      case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8015734:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8015738:	3328      	adds	r3, #40	@ 0x28
 801573a:	2101      	movs	r1, #1
 801573c:	4618      	mov	r0, r3
 801573e:	f000 fff7 	bl	8016730 <RCCEx_PLL3_Config>
 8015742:	4603      	mov	r3, r0
 8015744:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 8015748:	e00a      	b.n	8015760 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        /* HSE,  oscillator is used as source of SPI4/5 clock */
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 801574a:	2301      	movs	r3, #1
 801574c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8015750:	e006      	b.n	8015760 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 8015752:	bf00      	nop
 8015754:	e004      	b.n	8015760 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 8015756:	bf00      	nop
 8015758:	e002      	b.n	8015760 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 801575a:	bf00      	nop
 801575c:	e000      	b.n	8015760 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 801575e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8015760:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8015764:	2b00      	cmp	r3, #0
 8015766:	d10d      	bne.n	8015784 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 8015768:	4b05      	ldr	r3, [pc, #20]	@ (8015780 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 801576a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 801576c:	f423 21e0 	bic.w	r1, r3, #458752	@ 0x70000
 8015770:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8015774:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8015776:	4a02      	ldr	r2, [pc, #8]	@ (8015780 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8015778:	430b      	orrs	r3, r1
 801577a:	6513      	str	r3, [r2, #80]	@ 0x50
 801577c:	e006      	b.n	801578c <HAL_RCCEx_PeriphCLKConfig+0x5d4>
 801577e:	bf00      	nop
 8015780:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8015784:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8015788:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 801578c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8015790:	e9d3 2300 	ldrd	r2, r3, [r3]
 8015794:	f402 4380 	and.w	r3, r2, #16384	@ 0x4000
 8015798:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 801579c:	2300      	movs	r3, #0
 801579e:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 80157a2:	e9d7 1238 	ldrd	r1, r2, [r7, #224]	@ 0xe0
 80157a6:	460b      	mov	r3, r1
 80157a8:	4313      	orrs	r3, r2
 80157aa:	d055      	beq.n	8015858 <HAL_RCCEx_PeriphCLKConfig+0x6a0>
  {
    switch (PeriphClkInit->Spi6ClockSelection)
 80157ac:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80157b0:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 80157b4:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80157b8:	d033      	beq.n	8015822 <HAL_RCCEx_PeriphCLKConfig+0x66a>
 80157ba:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80157be:	d82c      	bhi.n	801581a <HAL_RCCEx_PeriphCLKConfig+0x662>
 80157c0:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80157c4:	d02f      	beq.n	8015826 <HAL_RCCEx_PeriphCLKConfig+0x66e>
 80157c6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80157ca:	d826      	bhi.n	801581a <HAL_RCCEx_PeriphCLKConfig+0x662>
 80157cc:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 80157d0:	d02b      	beq.n	801582a <HAL_RCCEx_PeriphCLKConfig+0x672>
 80157d2:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 80157d6:	d820      	bhi.n	801581a <HAL_RCCEx_PeriphCLKConfig+0x662>
 80157d8:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80157dc:	d012      	beq.n	8015804 <HAL_RCCEx_PeriphCLKConfig+0x64c>
 80157de:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80157e2:	d81a      	bhi.n	801581a <HAL_RCCEx_PeriphCLKConfig+0x662>
 80157e4:	2b00      	cmp	r3, #0
 80157e6:	d022      	beq.n	801582e <HAL_RCCEx_PeriphCLKConfig+0x676>
 80157e8:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80157ec:	d115      	bne.n	801581a <HAL_RCCEx_PeriphCLKConfig+0x662>
        /* SPI6 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 80157ee:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80157f2:	3308      	adds	r3, #8
 80157f4:	2101      	movs	r1, #1
 80157f6:	4618      	mov	r0, r3
 80157f8:	f000 fee8 	bl	80165cc <RCCEx_PLL2_Config>
 80157fc:	4603      	mov	r3, r0
 80157fe:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI6 clock source configuration done later after clock selection check */
        break;
 8015802:	e015      	b.n	8015830 <HAL_RCCEx_PeriphCLKConfig+0x678>
      case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8015804:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8015808:	3328      	adds	r3, #40	@ 0x28
 801580a:	2101      	movs	r1, #1
 801580c:	4618      	mov	r0, r3
 801580e:	f000 ff8f 	bl	8016730 <RCCEx_PLL3_Config>
 8015812:	4603      	mov	r3, r0
 8015814:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* SPI6 clock source configuration done later after clock selection check */
        break;
 8015818:	e00a      	b.n	8015830 <HAL_RCCEx_PeriphCLKConfig+0x678>
        /* SPI6 clock source configuration done later after clock selection check */
        break;
#endif

      default:
        ret = HAL_ERROR;
 801581a:	2301      	movs	r3, #1
 801581c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8015820:	e006      	b.n	8015830 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 8015822:	bf00      	nop
 8015824:	e004      	b.n	8015830 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 8015826:	bf00      	nop
 8015828:	e002      	b.n	8015830 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 801582a:	bf00      	nop
 801582c:	e000      	b.n	8015830 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 801582e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8015830:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8015834:	2b00      	cmp	r3, #0
 8015836:	d10b      	bne.n	8015850 <HAL_RCCEx_PeriphCLKConfig+0x698>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 8015838:	4ba3      	ldr	r3, [pc, #652]	@ (8015ac8 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 801583a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 801583c:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
 8015840:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8015844:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8015848:	4a9f      	ldr	r2, [pc, #636]	@ (8015ac8 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 801584a:	430b      	orrs	r3, r1
 801584c:	6593      	str	r3, [r2, #88]	@ 0x58
 801584e:	e003      	b.n	8015858 <HAL_RCCEx_PeriphCLKConfig+0x6a0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8015850:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8015854:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8015858:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801585c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8015860:	f402 4300 	and.w	r3, r2, #32768	@ 0x8000
 8015864:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8015868:	2300      	movs	r3, #0
 801586a:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 801586e:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 8015872:	460b      	mov	r3, r1
 8015874:	4313      	orrs	r3, r2
 8015876:	d037      	beq.n	80158e8 <HAL_RCCEx_PeriphCLKConfig+0x730>
  {
    switch (PeriphClkInit->FdcanClockSelection)
 8015878:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801587c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 801587e:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8015882:	d00e      	beq.n	80158a2 <HAL_RCCEx_PeriphCLKConfig+0x6ea>
 8015884:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8015888:	d816      	bhi.n	80158b8 <HAL_RCCEx_PeriphCLKConfig+0x700>
 801588a:	2b00      	cmp	r3, #0
 801588c:	d018      	beq.n	80158c0 <HAL_RCCEx_PeriphCLKConfig+0x708>
 801588e:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8015892:	d111      	bne.n	80158b8 <HAL_RCCEx_PeriphCLKConfig+0x700>
    {
      case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
        /* Enable FDCAN Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8015894:	4b8c      	ldr	r3, [pc, #560]	@ (8015ac8 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8015896:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8015898:	4a8b      	ldr	r2, [pc, #556]	@ (8015ac8 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 801589a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 801589e:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 80158a0:	e00f      	b.n	80158c2 <HAL_RCCEx_PeriphCLKConfig+0x70a>

      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 80158a2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80158a6:	3308      	adds	r3, #8
 80158a8:	2101      	movs	r1, #1
 80158aa:	4618      	mov	r0, r3
 80158ac:	f000 fe8e 	bl	80165cc <RCCEx_PLL2_Config>
 80158b0:	4603      	mov	r3, r0
 80158b2:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 80158b6:	e004      	b.n	80158c2 <HAL_RCCEx_PeriphCLKConfig+0x70a>
        /* HSE is used as clock source for FDCAN*/
        /* FDCAN clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80158b8:	2301      	movs	r3, #1
 80158ba:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80158be:	e000      	b.n	80158c2 <HAL_RCCEx_PeriphCLKConfig+0x70a>
        break;
 80158c0:	bf00      	nop
    }

    if (ret == HAL_OK)
 80158c2:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80158c6:	2b00      	cmp	r3, #0
 80158c8:	d10a      	bne.n	80158e0 <HAL_RCCEx_PeriphCLKConfig+0x728>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 80158ca:	4b7f      	ldr	r3, [pc, #508]	@ (8015ac8 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80158cc:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80158ce:	f023 5140 	bic.w	r1, r3, #805306368	@ 0x30000000
 80158d2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80158d6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80158d8:	4a7b      	ldr	r2, [pc, #492]	@ (8015ac8 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80158da:	430b      	orrs	r3, r1
 80158dc:	6513      	str	r3, [r2, #80]	@ 0x50
 80158de:	e003      	b.n	80158e8 <HAL_RCCEx_PeriphCLKConfig+0x730>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80158e0:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80158e4:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 80158e8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80158ec:	e9d3 2300 	ldrd	r2, r3, [r3]
 80158f0:	f002 7380 	and.w	r3, r2, #16777216	@ 0x1000000
 80158f4:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 80158f8:	2300      	movs	r3, #0
 80158fa:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 80158fe:	e9d7 1234 	ldrd	r1, r2, [r7, #208]	@ 0xd0
 8015902:	460b      	mov	r3, r1
 8015904:	4313      	orrs	r3, r2
 8015906:	d039      	beq.n	801597c <HAL_RCCEx_PeriphCLKConfig+0x7c4>
  {
    switch (PeriphClkInit->FmcClockSelection)
 8015908:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801590c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 801590e:	2b03      	cmp	r3, #3
 8015910:	d81c      	bhi.n	801594c <HAL_RCCEx_PeriphCLKConfig+0x794>
 8015912:	a201      	add	r2, pc, #4	@ (adr r2, 8015918 <HAL_RCCEx_PeriphCLKConfig+0x760>)
 8015914:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8015918:	08015955 	.word	0x08015955
 801591c:	08015929 	.word	0x08015929
 8015920:	08015937 	.word	0x08015937
 8015924:	08015955 	.word	0x08015955
    {
      case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
        /* Enable FMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8015928:	4b67      	ldr	r3, [pc, #412]	@ (8015ac8 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 801592a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801592c:	4a66      	ldr	r2, [pc, #408]	@ (8015ac8 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 801592e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8015932:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* FMC clock source configuration done later after clock selection check */
        break;
 8015934:	e00f      	b.n	8015956 <HAL_RCCEx_PeriphCLKConfig+0x79e>

      case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8015936:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801593a:	3308      	adds	r3, #8
 801593c:	2102      	movs	r1, #2
 801593e:	4618      	mov	r0, r3
 8015940:	f000 fe44 	bl	80165cc <RCCEx_PLL2_Config>
 8015944:	4603      	mov	r3, r0
 8015946:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* FMC clock source configuration done later after clock selection check */
        break;
 801594a:	e004      	b.n	8015956 <HAL_RCCEx_PeriphCLKConfig+0x79e>
      case RCC_FMCCLKSOURCE_HCLK:
        /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 801594c:	2301      	movs	r3, #1
 801594e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8015952:	e000      	b.n	8015956 <HAL_RCCEx_PeriphCLKConfig+0x79e>
        break;
 8015954:	bf00      	nop
    }

    if (ret == HAL_OK)
 8015956:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 801595a:	2b00      	cmp	r3, #0
 801595c:	d10a      	bne.n	8015974 <HAL_RCCEx_PeriphCLKConfig+0x7bc>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 801595e:	4b5a      	ldr	r3, [pc, #360]	@ (8015ac8 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8015960:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8015962:	f023 0103 	bic.w	r1, r3, #3
 8015966:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801596a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 801596c:	4a56      	ldr	r2, [pc, #344]	@ (8015ac8 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 801596e:	430b      	orrs	r3, r1
 8015970:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8015972:	e003      	b.n	801597c <HAL_RCCEx_PeriphCLKConfig+0x7c4>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8015974:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8015978:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 801597c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8015980:	e9d3 2300 	ldrd	r2, r3, [r3]
 8015984:	f402 0380 	and.w	r3, r2, #4194304	@ 0x400000
 8015988:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 801598c:	2300      	movs	r3, #0
 801598e:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8015992:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	@ 0xc8
 8015996:	460b      	mov	r3, r1
 8015998:	4313      	orrs	r3, r2
 801599a:	f000 809f 	beq.w	8015adc <HAL_RCCEx_PeriphCLKConfig+0x924>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 801599e:	4b4b      	ldr	r3, [pc, #300]	@ (8015acc <HAL_RCCEx_PeriphCLKConfig+0x914>)
 80159a0:	681b      	ldr	r3, [r3, #0]
 80159a2:	4a4a      	ldr	r2, [pc, #296]	@ (8015acc <HAL_RCCEx_PeriphCLKConfig+0x914>)
 80159a4:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80159a8:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80159aa:	f7fb f9a9 	bl	8010d00 <HAL_GetTick>
 80159ae:	f8c7 0120 	str.w	r0, [r7, #288]	@ 0x120

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80159b2:	e00b      	b.n	80159cc <HAL_RCCEx_PeriphCLKConfig+0x814>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80159b4:	f7fb f9a4 	bl	8010d00 <HAL_GetTick>
 80159b8:	4602      	mov	r2, r0
 80159ba:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 80159be:	1ad3      	subs	r3, r2, r3
 80159c0:	2b64      	cmp	r3, #100	@ 0x64
 80159c2:	d903      	bls.n	80159cc <HAL_RCCEx_PeriphCLKConfig+0x814>
      {
        ret = HAL_TIMEOUT;
 80159c4:	2303      	movs	r3, #3
 80159c6:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80159ca:	e005      	b.n	80159d8 <HAL_RCCEx_PeriphCLKConfig+0x820>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80159cc:	4b3f      	ldr	r3, [pc, #252]	@ (8015acc <HAL_RCCEx_PeriphCLKConfig+0x914>)
 80159ce:	681b      	ldr	r3, [r3, #0]
 80159d0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80159d4:	2b00      	cmp	r3, #0
 80159d6:	d0ed      	beq.n	80159b4 <HAL_RCCEx_PeriphCLKConfig+0x7fc>
      }
    }

    if (ret == HAL_OK)
 80159d8:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80159dc:	2b00      	cmp	r3, #0
 80159de:	d179      	bne.n	8015ad4 <HAL_RCCEx_PeriphCLKConfig+0x91c>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 80159e0:	4b39      	ldr	r3, [pc, #228]	@ (8015ac8 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80159e2:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 80159e4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80159e8:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 80159ec:	4053      	eors	r3, r2
 80159ee:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80159f2:	2b00      	cmp	r3, #0
 80159f4:	d015      	beq.n	8015a22 <HAL_RCCEx_PeriphCLKConfig+0x86a>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80159f6:	4b34      	ldr	r3, [pc, #208]	@ (8015ac8 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80159f8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80159fa:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80159fe:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8015a02:	4b31      	ldr	r3, [pc, #196]	@ (8015ac8 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8015a04:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8015a06:	4a30      	ldr	r2, [pc, #192]	@ (8015ac8 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8015a08:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8015a0c:	6713      	str	r3, [r2, #112]	@ 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 8015a0e:	4b2e      	ldr	r3, [pc, #184]	@ (8015ac8 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8015a10:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8015a12:	4a2d      	ldr	r2, [pc, #180]	@ (8015ac8 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8015a14:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8015a18:	6713      	str	r3, [r2, #112]	@ 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 8015a1a:	4a2b      	ldr	r2, [pc, #172]	@ (8015ac8 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8015a1c:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8015a20:	6713      	str	r3, [r2, #112]	@ 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if (PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 8015a22:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8015a26:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8015a2a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8015a2e:	d118      	bne.n	8015a62 <HAL_RCCEx_PeriphCLKConfig+0x8aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8015a30:	f7fb f966 	bl	8010d00 <HAL_GetTick>
 8015a34:	f8c7 0120 	str.w	r0, [r7, #288]	@ 0x120

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8015a38:	e00d      	b.n	8015a56 <HAL_RCCEx_PeriphCLKConfig+0x89e>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8015a3a:	f7fb f961 	bl	8010d00 <HAL_GetTick>
 8015a3e:	4602      	mov	r2, r0
 8015a40:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 8015a44:	1ad2      	subs	r2, r2, r3
 8015a46:	f241 3388 	movw	r3, #5000	@ 0x1388
 8015a4a:	429a      	cmp	r2, r3
 8015a4c:	d903      	bls.n	8015a56 <HAL_RCCEx_PeriphCLKConfig+0x89e>
          {
            ret = HAL_TIMEOUT;
 8015a4e:	2303      	movs	r3, #3
 8015a50:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
            break;
 8015a54:	e005      	b.n	8015a62 <HAL_RCCEx_PeriphCLKConfig+0x8aa>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8015a56:	4b1c      	ldr	r3, [pc, #112]	@ (8015ac8 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8015a58:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8015a5a:	f003 0302 	and.w	r3, r3, #2
 8015a5e:	2b00      	cmp	r3, #0
 8015a60:	d0eb      	beq.n	8015a3a <HAL_RCCEx_PeriphCLKConfig+0x882>
          }
        }
      }

      if (ret == HAL_OK)
 8015a62:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8015a66:	2b00      	cmp	r3, #0
 8015a68:	d129      	bne.n	8015abe <HAL_RCCEx_PeriphCLKConfig+0x906>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8015a6a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8015a6e:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8015a72:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8015a76:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8015a7a:	d10e      	bne.n	8015a9a <HAL_RCCEx_PeriphCLKConfig+0x8e2>
 8015a7c:	4b12      	ldr	r3, [pc, #72]	@ (8015ac8 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8015a7e:	691b      	ldr	r3, [r3, #16]
 8015a80:	f423 517c 	bic.w	r1, r3, #16128	@ 0x3f00
 8015a84:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8015a88:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8015a8c:	091a      	lsrs	r2, r3, #4
 8015a8e:	4b10      	ldr	r3, [pc, #64]	@ (8015ad0 <HAL_RCCEx_PeriphCLKConfig+0x918>)
 8015a90:	4013      	ands	r3, r2
 8015a92:	4a0d      	ldr	r2, [pc, #52]	@ (8015ac8 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8015a94:	430b      	orrs	r3, r1
 8015a96:	6113      	str	r3, [r2, #16]
 8015a98:	e005      	b.n	8015aa6 <HAL_RCCEx_PeriphCLKConfig+0x8ee>
 8015a9a:	4b0b      	ldr	r3, [pc, #44]	@ (8015ac8 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8015a9c:	691b      	ldr	r3, [r3, #16]
 8015a9e:	4a0a      	ldr	r2, [pc, #40]	@ (8015ac8 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8015aa0:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 8015aa4:	6113      	str	r3, [r2, #16]
 8015aa6:	4b08      	ldr	r3, [pc, #32]	@ (8015ac8 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8015aa8:	6f19      	ldr	r1, [r3, #112]	@ 0x70
 8015aaa:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8015aae:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8015ab2:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8015ab6:	4a04      	ldr	r2, [pc, #16]	@ (8015ac8 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8015ab8:	430b      	orrs	r3, r1
 8015aba:	6713      	str	r3, [r2, #112]	@ 0x70
 8015abc:	e00e      	b.n	8015adc <HAL_RCCEx_PeriphCLKConfig+0x924>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8015abe:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8015ac2:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
 8015ac6:	e009      	b.n	8015adc <HAL_RCCEx_PeriphCLKConfig+0x924>
 8015ac8:	58024400 	.word	0x58024400
 8015acc:	58024800 	.word	0x58024800
 8015ad0:	00ffffcf 	.word	0x00ffffcf
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8015ad4:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8015ad8:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 8015adc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8015ae0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8015ae4:	f002 0301 	and.w	r3, r2, #1
 8015ae8:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8015aec:	2300      	movs	r3, #0
 8015aee:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8015af2:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8015af6:	460b      	mov	r3, r1
 8015af8:	4313      	orrs	r3, r2
 8015afa:	f000 8089 	beq.w	8015c10 <HAL_RCCEx_PeriphCLKConfig+0xa58>
  {
    switch (PeriphClkInit->Usart16ClockSelection)
 8015afe:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8015b02:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8015b04:	2b28      	cmp	r3, #40	@ 0x28
 8015b06:	d86b      	bhi.n	8015be0 <HAL_RCCEx_PeriphCLKConfig+0xa28>
 8015b08:	a201      	add	r2, pc, #4	@ (adr r2, 8015b10 <HAL_RCCEx_PeriphCLKConfig+0x958>)
 8015b0a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8015b0e:	bf00      	nop
 8015b10:	08015be9 	.word	0x08015be9
 8015b14:	08015be1 	.word	0x08015be1
 8015b18:	08015be1 	.word	0x08015be1
 8015b1c:	08015be1 	.word	0x08015be1
 8015b20:	08015be1 	.word	0x08015be1
 8015b24:	08015be1 	.word	0x08015be1
 8015b28:	08015be1 	.word	0x08015be1
 8015b2c:	08015be1 	.word	0x08015be1
 8015b30:	08015bb5 	.word	0x08015bb5
 8015b34:	08015be1 	.word	0x08015be1
 8015b38:	08015be1 	.word	0x08015be1
 8015b3c:	08015be1 	.word	0x08015be1
 8015b40:	08015be1 	.word	0x08015be1
 8015b44:	08015be1 	.word	0x08015be1
 8015b48:	08015be1 	.word	0x08015be1
 8015b4c:	08015be1 	.word	0x08015be1
 8015b50:	08015bcb 	.word	0x08015bcb
 8015b54:	08015be1 	.word	0x08015be1
 8015b58:	08015be1 	.word	0x08015be1
 8015b5c:	08015be1 	.word	0x08015be1
 8015b60:	08015be1 	.word	0x08015be1
 8015b64:	08015be1 	.word	0x08015be1
 8015b68:	08015be1 	.word	0x08015be1
 8015b6c:	08015be1 	.word	0x08015be1
 8015b70:	08015be9 	.word	0x08015be9
 8015b74:	08015be1 	.word	0x08015be1
 8015b78:	08015be1 	.word	0x08015be1
 8015b7c:	08015be1 	.word	0x08015be1
 8015b80:	08015be1 	.word	0x08015be1
 8015b84:	08015be1 	.word	0x08015be1
 8015b88:	08015be1 	.word	0x08015be1
 8015b8c:	08015be1 	.word	0x08015be1
 8015b90:	08015be9 	.word	0x08015be9
 8015b94:	08015be1 	.word	0x08015be1
 8015b98:	08015be1 	.word	0x08015be1
 8015b9c:	08015be1 	.word	0x08015be1
 8015ba0:	08015be1 	.word	0x08015be1
 8015ba4:	08015be1 	.word	0x08015be1
 8015ba8:	08015be1 	.word	0x08015be1
 8015bac:	08015be1 	.word	0x08015be1
 8015bb0:	08015be9 	.word	0x08015be9
      case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8015bb4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8015bb8:	3308      	adds	r3, #8
 8015bba:	2101      	movs	r1, #1
 8015bbc:	4618      	mov	r0, r3
 8015bbe:	f000 fd05 	bl	80165cc <RCCEx_PLL2_Config>
 8015bc2:	4603      	mov	r3, r0
 8015bc4:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 8015bc8:	e00f      	b.n	8015bea <HAL_RCCEx_PeriphCLKConfig+0xa32>

      case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8015bca:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8015bce:	3328      	adds	r3, #40	@ 0x28
 8015bd0:	2101      	movs	r1, #1
 8015bd2:	4618      	mov	r0, r3
 8015bd4:	f000 fdac 	bl	8016730 <RCCEx_PLL3_Config>
 8015bd8:	4603      	mov	r3, r0
 8015bda:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 8015bde:	e004      	b.n	8015bea <HAL_RCCEx_PeriphCLKConfig+0xa32>
        /* LSE,  oscillator is used as source of USART1/6 clock */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8015be0:	2301      	movs	r3, #1
 8015be2:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8015be6:	e000      	b.n	8015bea <HAL_RCCEx_PeriphCLKConfig+0xa32>
        break;
 8015be8:	bf00      	nop
    }

    if (ret == HAL_OK)
 8015bea:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8015bee:	2b00      	cmp	r3, #0
 8015bf0:	d10a      	bne.n	8015c08 <HAL_RCCEx_PeriphCLKConfig+0xa50>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 8015bf2:	4bbf      	ldr	r3, [pc, #764]	@ (8015ef0 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8015bf4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8015bf6:	f023 0138 	bic.w	r1, r3, #56	@ 0x38
 8015bfa:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8015bfe:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8015c00:	4abb      	ldr	r2, [pc, #748]	@ (8015ef0 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8015c02:	430b      	orrs	r3, r1
 8015c04:	6553      	str	r3, [r2, #84]	@ 0x54
 8015c06:	e003      	b.n	8015c10 <HAL_RCCEx_PeriphCLKConfig+0xa58>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8015c08:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8015c0c:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 8015c10:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8015c14:	e9d3 2300 	ldrd	r2, r3, [r3]
 8015c18:	f002 0302 	and.w	r3, r2, #2
 8015c1c:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8015c20:	2300      	movs	r3, #0
 8015c22:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 8015c26:	e9d7 122e 	ldrd	r1, r2, [r7, #184]	@ 0xb8
 8015c2a:	460b      	mov	r3, r1
 8015c2c:	4313      	orrs	r3, r2
 8015c2e:	d041      	beq.n	8015cb4 <HAL_RCCEx_PeriphCLKConfig+0xafc>
  {
    switch (PeriphClkInit->Usart234578ClockSelection)
 8015c30:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8015c34:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8015c36:	2b05      	cmp	r3, #5
 8015c38:	d824      	bhi.n	8015c84 <HAL_RCCEx_PeriphCLKConfig+0xacc>
 8015c3a:	a201      	add	r2, pc, #4	@ (adr r2, 8015c40 <HAL_RCCEx_PeriphCLKConfig+0xa88>)
 8015c3c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8015c40:	08015c8d 	.word	0x08015c8d
 8015c44:	08015c59 	.word	0x08015c59
 8015c48:	08015c6f 	.word	0x08015c6f
 8015c4c:	08015c8d 	.word	0x08015c8d
 8015c50:	08015c8d 	.word	0x08015c8d
 8015c54:	08015c8d 	.word	0x08015c8d
      case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8015c58:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8015c5c:	3308      	adds	r3, #8
 8015c5e:	2101      	movs	r1, #1
 8015c60:	4618      	mov	r0, r3
 8015c62:	f000 fcb3 	bl	80165cc <RCCEx_PLL2_Config>
 8015c66:	4603      	mov	r3, r0
 8015c68:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 8015c6c:	e00f      	b.n	8015c8e <HAL_RCCEx_PeriphCLKConfig+0xad6>

      case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8015c6e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8015c72:	3328      	adds	r3, #40	@ 0x28
 8015c74:	2101      	movs	r1, #1
 8015c76:	4618      	mov	r0, r3
 8015c78:	f000 fd5a 	bl	8016730 <RCCEx_PLL3_Config>
 8015c7c:	4603      	mov	r3, r0
 8015c7e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 8015c82:	e004      	b.n	8015c8e <HAL_RCCEx_PeriphCLKConfig+0xad6>
        /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8015c84:	2301      	movs	r3, #1
 8015c86:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8015c8a:	e000      	b.n	8015c8e <HAL_RCCEx_PeriphCLKConfig+0xad6>
        break;
 8015c8c:	bf00      	nop
    }

    if (ret == HAL_OK)
 8015c8e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8015c92:	2b00      	cmp	r3, #0
 8015c94:	d10a      	bne.n	8015cac <HAL_RCCEx_PeriphCLKConfig+0xaf4>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 8015c96:	4b96      	ldr	r3, [pc, #600]	@ (8015ef0 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8015c98:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8015c9a:	f023 0107 	bic.w	r1, r3, #7
 8015c9e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8015ca2:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8015ca4:	4a92      	ldr	r2, [pc, #584]	@ (8015ef0 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8015ca6:	430b      	orrs	r3, r1
 8015ca8:	6553      	str	r3, [r2, #84]	@ 0x54
 8015caa:	e003      	b.n	8015cb4 <HAL_RCCEx_PeriphCLKConfig+0xafc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8015cac:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8015cb0:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8015cb4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8015cb8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8015cbc:	f002 0304 	and.w	r3, r2, #4
 8015cc0:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8015cc4:	2300      	movs	r3, #0
 8015cc6:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8015cca:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	@ 0xb0
 8015cce:	460b      	mov	r3, r1
 8015cd0:	4313      	orrs	r3, r2
 8015cd2:	d044      	beq.n	8015d5e <HAL_RCCEx_PeriphCLKConfig+0xba6>
  {
    switch (PeriphClkInit->Lpuart1ClockSelection)
 8015cd4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8015cd8:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8015cdc:	2b05      	cmp	r3, #5
 8015cde:	d825      	bhi.n	8015d2c <HAL_RCCEx_PeriphCLKConfig+0xb74>
 8015ce0:	a201      	add	r2, pc, #4	@ (adr r2, 8015ce8 <HAL_RCCEx_PeriphCLKConfig+0xb30>)
 8015ce2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8015ce6:	bf00      	nop
 8015ce8:	08015d35 	.word	0x08015d35
 8015cec:	08015d01 	.word	0x08015d01
 8015cf0:	08015d17 	.word	0x08015d17
 8015cf4:	08015d35 	.word	0x08015d35
 8015cf8:	08015d35 	.word	0x08015d35
 8015cfc:	08015d35 	.word	0x08015d35
      case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8015d00:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8015d04:	3308      	adds	r3, #8
 8015d06:	2101      	movs	r1, #1
 8015d08:	4618      	mov	r0, r3
 8015d0a:	f000 fc5f 	bl	80165cc <RCCEx_PLL2_Config>
 8015d0e:	4603      	mov	r3, r0
 8015d10:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 8015d14:	e00f      	b.n	8015d36 <HAL_RCCEx_PeriphCLKConfig+0xb7e>

      case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8015d16:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8015d1a:	3328      	adds	r3, #40	@ 0x28
 8015d1c:	2101      	movs	r1, #1
 8015d1e:	4618      	mov	r0, r3
 8015d20:	f000 fd06 	bl	8016730 <RCCEx_PLL3_Config>
 8015d24:	4603      	mov	r3, r0
 8015d26:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 8015d2a:	e004      	b.n	8015d36 <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        /* LSE,  oscillator is used as source of LPUART1 clock */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8015d2c:	2301      	movs	r3, #1
 8015d2e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8015d32:	e000      	b.n	8015d36 <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        break;
 8015d34:	bf00      	nop
    }

    if (ret == HAL_OK)
 8015d36:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8015d3a:	2b00      	cmp	r3, #0
 8015d3c:	d10b      	bne.n	8015d56 <HAL_RCCEx_PeriphCLKConfig+0xb9e>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8015d3e:	4b6c      	ldr	r3, [pc, #432]	@ (8015ef0 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8015d40:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8015d42:	f023 0107 	bic.w	r1, r3, #7
 8015d46:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8015d4a:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8015d4e:	4a68      	ldr	r2, [pc, #416]	@ (8015ef0 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8015d50:	430b      	orrs	r3, r1
 8015d52:	6593      	str	r3, [r2, #88]	@ 0x58
 8015d54:	e003      	b.n	8015d5e <HAL_RCCEx_PeriphCLKConfig+0xba6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8015d56:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8015d5a:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8015d5e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8015d62:	e9d3 2300 	ldrd	r2, r3, [r3]
 8015d66:	f002 0320 	and.w	r3, r2, #32
 8015d6a:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8015d6e:	2300      	movs	r3, #0
 8015d70:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8015d74:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8015d78:	460b      	mov	r3, r1
 8015d7a:	4313      	orrs	r3, r2
 8015d7c:	d055      	beq.n	8015e2a <HAL_RCCEx_PeriphCLKConfig+0xc72>
  {
    switch (PeriphClkInit->Lptim1ClockSelection)
 8015d7e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8015d82:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8015d86:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8015d8a:	d033      	beq.n	8015df4 <HAL_RCCEx_PeriphCLKConfig+0xc3c>
 8015d8c:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8015d90:	d82c      	bhi.n	8015dec <HAL_RCCEx_PeriphCLKConfig+0xc34>
 8015d92:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8015d96:	d02f      	beq.n	8015df8 <HAL_RCCEx_PeriphCLKConfig+0xc40>
 8015d98:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8015d9c:	d826      	bhi.n	8015dec <HAL_RCCEx_PeriphCLKConfig+0xc34>
 8015d9e:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8015da2:	d02b      	beq.n	8015dfc <HAL_RCCEx_PeriphCLKConfig+0xc44>
 8015da4:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8015da8:	d820      	bhi.n	8015dec <HAL_RCCEx_PeriphCLKConfig+0xc34>
 8015daa:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8015dae:	d012      	beq.n	8015dd6 <HAL_RCCEx_PeriphCLKConfig+0xc1e>
 8015db0:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8015db4:	d81a      	bhi.n	8015dec <HAL_RCCEx_PeriphCLKConfig+0xc34>
 8015db6:	2b00      	cmp	r3, #0
 8015db8:	d022      	beq.n	8015e00 <HAL_RCCEx_PeriphCLKConfig+0xc48>
 8015dba:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8015dbe:	d115      	bne.n	8015dec <HAL_RCCEx_PeriphCLKConfig+0xc34>
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8015dc0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8015dc4:	3308      	adds	r3, #8
 8015dc6:	2100      	movs	r1, #0
 8015dc8:	4618      	mov	r0, r3
 8015dca:	f000 fbff 	bl	80165cc <RCCEx_PLL2_Config>
 8015dce:	4603      	mov	r3, r0
 8015dd0:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 8015dd4:	e015      	b.n	8015e02 <HAL_RCCEx_PeriphCLKConfig+0xc4a>

      case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8015dd6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8015dda:	3328      	adds	r3, #40	@ 0x28
 8015ddc:	2102      	movs	r1, #2
 8015dde:	4618      	mov	r0, r3
 8015de0:	f000 fca6 	bl	8016730 <RCCEx_PLL3_Config>
 8015de4:	4603      	mov	r3, r0
 8015de6:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 8015dea:	e00a      	b.n	8015e02 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8015dec:	2301      	movs	r3, #1
 8015dee:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8015df2:	e006      	b.n	8015e02 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 8015df4:	bf00      	nop
 8015df6:	e004      	b.n	8015e02 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 8015df8:	bf00      	nop
 8015dfa:	e002      	b.n	8015e02 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 8015dfc:	bf00      	nop
 8015dfe:	e000      	b.n	8015e02 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 8015e00:	bf00      	nop
    }

    if (ret == HAL_OK)
 8015e02:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8015e06:	2b00      	cmp	r3, #0
 8015e08:	d10b      	bne.n	8015e22 <HAL_RCCEx_PeriphCLKConfig+0xc6a>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8015e0a:	4b39      	ldr	r3, [pc, #228]	@ (8015ef0 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8015e0c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8015e0e:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
 8015e12:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8015e16:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8015e1a:	4a35      	ldr	r2, [pc, #212]	@ (8015ef0 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8015e1c:	430b      	orrs	r3, r1
 8015e1e:	6553      	str	r3, [r2, #84]	@ 0x54
 8015e20:	e003      	b.n	8015e2a <HAL_RCCEx_PeriphCLKConfig+0xc72>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8015e22:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8015e26:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 8015e2a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8015e2e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8015e32:	f002 0340 	and.w	r3, r2, #64	@ 0x40
 8015e36:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8015e3a:	2300      	movs	r3, #0
 8015e3c:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 8015e40:	e9d7 1228 	ldrd	r1, r2, [r7, #160]	@ 0xa0
 8015e44:	460b      	mov	r3, r1
 8015e46:	4313      	orrs	r3, r2
 8015e48:	d058      	beq.n	8015efc <HAL_RCCEx_PeriphCLKConfig+0xd44>
  {
    switch (PeriphClkInit->Lptim2ClockSelection)
 8015e4a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8015e4e:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8015e52:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 8015e56:	d033      	beq.n	8015ec0 <HAL_RCCEx_PeriphCLKConfig+0xd08>
 8015e58:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 8015e5c:	d82c      	bhi.n	8015eb8 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 8015e5e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8015e62:	d02f      	beq.n	8015ec4 <HAL_RCCEx_PeriphCLKConfig+0xd0c>
 8015e64:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8015e68:	d826      	bhi.n	8015eb8 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 8015e6a:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8015e6e:	d02b      	beq.n	8015ec8 <HAL_RCCEx_PeriphCLKConfig+0xd10>
 8015e70:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8015e74:	d820      	bhi.n	8015eb8 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 8015e76:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8015e7a:	d012      	beq.n	8015ea2 <HAL_RCCEx_PeriphCLKConfig+0xcea>
 8015e7c:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8015e80:	d81a      	bhi.n	8015eb8 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 8015e82:	2b00      	cmp	r3, #0
 8015e84:	d022      	beq.n	8015ecc <HAL_RCCEx_PeriphCLKConfig+0xd14>
 8015e86:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8015e8a:	d115      	bne.n	8015eb8 <HAL_RCCEx_PeriphCLKConfig+0xd00>
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8015e8c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8015e90:	3308      	adds	r3, #8
 8015e92:	2100      	movs	r1, #0
 8015e94:	4618      	mov	r0, r3
 8015e96:	f000 fb99 	bl	80165cc <RCCEx_PLL2_Config>
 8015e9a:	4603      	mov	r3, r0
 8015e9c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 8015ea0:	e015      	b.n	8015ece <HAL_RCCEx_PeriphCLKConfig+0xd16>

      case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8015ea2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8015ea6:	3328      	adds	r3, #40	@ 0x28
 8015ea8:	2102      	movs	r1, #2
 8015eaa:	4618      	mov	r0, r3
 8015eac:	f000 fc40 	bl	8016730 <RCCEx_PLL3_Config>
 8015eb0:	4603      	mov	r3, r0
 8015eb2:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 8015eb6:	e00a      	b.n	8015ece <HAL_RCCEx_PeriphCLKConfig+0xd16>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8015eb8:	2301      	movs	r3, #1
 8015eba:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8015ebe:	e006      	b.n	8015ece <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 8015ec0:	bf00      	nop
 8015ec2:	e004      	b.n	8015ece <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 8015ec4:	bf00      	nop
 8015ec6:	e002      	b.n	8015ece <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 8015ec8:	bf00      	nop
 8015eca:	e000      	b.n	8015ece <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 8015ecc:	bf00      	nop
    }

    if (ret == HAL_OK)
 8015ece:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8015ed2:	2b00      	cmp	r3, #0
 8015ed4:	d10e      	bne.n	8015ef4 <HAL_RCCEx_PeriphCLKConfig+0xd3c>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8015ed6:	4b06      	ldr	r3, [pc, #24]	@ (8015ef0 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8015ed8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8015eda:	f423 51e0 	bic.w	r1, r3, #7168	@ 0x1c00
 8015ede:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8015ee2:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8015ee6:	4a02      	ldr	r2, [pc, #8]	@ (8015ef0 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8015ee8:	430b      	orrs	r3, r1
 8015eea:	6593      	str	r3, [r2, #88]	@ 0x58
 8015eec:	e006      	b.n	8015efc <HAL_RCCEx_PeriphCLKConfig+0xd44>
 8015eee:	bf00      	nop
 8015ef0:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8015ef4:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8015ef8:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 8015efc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8015f00:	e9d3 2300 	ldrd	r2, r3, [r3]
 8015f04:	f002 0380 	and.w	r3, r2, #128	@ 0x80
 8015f08:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8015f0c:	2300      	movs	r3, #0
 8015f0e:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8015f12:	e9d7 1226 	ldrd	r1, r2, [r7, #152]	@ 0x98
 8015f16:	460b      	mov	r3, r1
 8015f18:	4313      	orrs	r3, r2
 8015f1a:	d055      	beq.n	8015fc8 <HAL_RCCEx_PeriphCLKConfig+0xe10>
  {
    switch (PeriphClkInit->Lptim345ClockSelection)
 8015f1c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8015f20:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8015f24:	f5b3 4f20 	cmp.w	r3, #40960	@ 0xa000
 8015f28:	d033      	beq.n	8015f92 <HAL_RCCEx_PeriphCLKConfig+0xdda>
 8015f2a:	f5b3 4f20 	cmp.w	r3, #40960	@ 0xa000
 8015f2e:	d82c      	bhi.n	8015f8a <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 8015f30:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8015f34:	d02f      	beq.n	8015f96 <HAL_RCCEx_PeriphCLKConfig+0xdde>
 8015f36:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8015f3a:	d826      	bhi.n	8015f8a <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 8015f3c:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
 8015f40:	d02b      	beq.n	8015f9a <HAL_RCCEx_PeriphCLKConfig+0xde2>
 8015f42:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
 8015f46:	d820      	bhi.n	8015f8a <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 8015f48:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8015f4c:	d012      	beq.n	8015f74 <HAL_RCCEx_PeriphCLKConfig+0xdbc>
 8015f4e:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8015f52:	d81a      	bhi.n	8015f8a <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 8015f54:	2b00      	cmp	r3, #0
 8015f56:	d022      	beq.n	8015f9e <HAL_RCCEx_PeriphCLKConfig+0xde6>
 8015f58:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8015f5c:	d115      	bne.n	8015f8a <HAL_RCCEx_PeriphCLKConfig+0xdd2>
      case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8015f5e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8015f62:	3308      	adds	r3, #8
 8015f64:	2100      	movs	r1, #0
 8015f66:	4618      	mov	r0, r3
 8015f68:	f000 fb30 	bl	80165cc <RCCEx_PLL2_Config>
 8015f6c:	4603      	mov	r3, r0
 8015f6e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 8015f72:	e015      	b.n	8015fa0 <HAL_RCCEx_PeriphCLKConfig+0xde8>

      case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8015f74:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8015f78:	3328      	adds	r3, #40	@ 0x28
 8015f7a:	2102      	movs	r1, #2
 8015f7c:	4618      	mov	r0, r3
 8015f7e:	f000 fbd7 	bl	8016730 <RCCEx_PLL3_Config>
 8015f82:	4603      	mov	r3, r0
 8015f84:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 8015f88:	e00a      	b.n	8015fa0 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8015f8a:	2301      	movs	r3, #1
 8015f8c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8015f90:	e006      	b.n	8015fa0 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 8015f92:	bf00      	nop
 8015f94:	e004      	b.n	8015fa0 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 8015f96:	bf00      	nop
 8015f98:	e002      	b.n	8015fa0 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 8015f9a:	bf00      	nop
 8015f9c:	e000      	b.n	8015fa0 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 8015f9e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8015fa0:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8015fa4:	2b00      	cmp	r3, #0
 8015fa6:	d10b      	bne.n	8015fc0 <HAL_RCCEx_PeriphCLKConfig+0xe08>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 8015fa8:	4ba1      	ldr	r3, [pc, #644]	@ (8016230 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8015faa:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8015fac:	f423 4160 	bic.w	r1, r3, #57344	@ 0xe000
 8015fb0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8015fb4:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8015fb8:	4a9d      	ldr	r2, [pc, #628]	@ (8016230 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8015fba:	430b      	orrs	r3, r1
 8015fbc:	6593      	str	r3, [r2, #88]	@ 0x58
 8015fbe:	e003      	b.n	8015fc8 <HAL_RCCEx_PeriphCLKConfig+0xe10>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8015fc0:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8015fc4:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126

    __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 8015fc8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8015fcc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8015fd0:	f002 0308 	and.w	r3, r2, #8
 8015fd4:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8015fd8:	2300      	movs	r3, #0
 8015fda:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8015fde:	e9d7 1224 	ldrd	r1, r2, [r7, #144]	@ 0x90
 8015fe2:	460b      	mov	r3, r1
 8015fe4:	4313      	orrs	r3, r2
 8015fe6:	d01e      	beq.n	8016026 <HAL_RCCEx_PeriphCLKConfig+0xe6e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection) == RCC_I2C123CLKSOURCE_PLL3)
 8015fe8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8015fec:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8015ff0:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8015ff4:	d10c      	bne.n	8016010 <HAL_RCCEx_PeriphCLKConfig+0xe58>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8015ff6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8015ffa:	3328      	adds	r3, #40	@ 0x28
 8015ffc:	2102      	movs	r1, #2
 8015ffe:	4618      	mov	r0, r3
 8016000:	f000 fb96 	bl	8016730 <RCCEx_PLL3_Config>
 8016004:	4603      	mov	r3, r0
 8016006:	2b00      	cmp	r3, #0
 8016008:	d002      	beq.n	8016010 <HAL_RCCEx_PeriphCLKConfig+0xe58>
      {
        status = HAL_ERROR;
 801600a:	2301      	movs	r3, #1
 801600c:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
      }
    }

    __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 8016010:	4b87      	ldr	r3, [pc, #540]	@ (8016230 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8016012:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8016014:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8016018:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801601c:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8016020:	4a83      	ldr	r2, [pc, #524]	@ (8016230 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8016022:	430b      	orrs	r3, r1
 8016024:	6553      	str	r3, [r2, #84]	@ 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8016026:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801602a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801602e:	f002 0310 	and.w	r3, r2, #16
 8016032:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8016036:	2300      	movs	r3, #0
 8016038:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 801603c:	e9d7 1222 	ldrd	r1, r2, [r7, #136]	@ 0x88
 8016040:	460b      	mov	r3, r1
 8016042:	4313      	orrs	r3, r2
 8016044:	d01e      	beq.n	8016084 <HAL_RCCEx_PeriphCLKConfig+0xecc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3)
 8016046:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801604a:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 801604e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8016052:	d10c      	bne.n	801606e <HAL_RCCEx_PeriphCLKConfig+0xeb6>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8016054:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8016058:	3328      	adds	r3, #40	@ 0x28
 801605a:	2102      	movs	r1, #2
 801605c:	4618      	mov	r0, r3
 801605e:	f000 fb67 	bl	8016730 <RCCEx_PLL3_Config>
 8016062:	4603      	mov	r3, r0
 8016064:	2b00      	cmp	r3, #0
 8016066:	d002      	beq.n	801606e <HAL_RCCEx_PeriphCLKConfig+0xeb6>
      {
        status = HAL_ERROR;
 8016068:	2301      	movs	r3, #1
 801606a:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
      }
    }

    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 801606e:	4b70      	ldr	r3, [pc, #448]	@ (8016230 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8016070:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8016072:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 8016076:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801607a:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 801607e:	4a6c      	ldr	r2, [pc, #432]	@ (8016230 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8016080:	430b      	orrs	r3, r1
 8016082:	6593      	str	r3, [r2, #88]	@ 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8016084:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8016088:	e9d3 2300 	ldrd	r2, r3, [r3]
 801608c:	f402 2300 	and.w	r3, r2, #524288	@ 0x80000
 8016090:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8016094:	2300      	movs	r3, #0
 8016096:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 801609a:	e9d7 1220 	ldrd	r1, r2, [r7, #128]	@ 0x80
 801609e:	460b      	mov	r3, r1
 80160a0:	4313      	orrs	r3, r2
 80160a2:	d03e      	beq.n	8016122 <HAL_RCCEx_PeriphCLKConfig+0xf6a>
  {
    switch (PeriphClkInit->AdcClockSelection)
 80160a4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80160a8:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 80160ac:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80160b0:	d022      	beq.n	80160f8 <HAL_RCCEx_PeriphCLKConfig+0xf40>
 80160b2:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80160b6:	d81b      	bhi.n	80160f0 <HAL_RCCEx_PeriphCLKConfig+0xf38>
 80160b8:	2b00      	cmp	r3, #0
 80160ba:	d003      	beq.n	80160c4 <HAL_RCCEx_PeriphCLKConfig+0xf0c>
 80160bc:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80160c0:	d00b      	beq.n	80160da <HAL_RCCEx_PeriphCLKConfig+0xf22>
 80160c2:	e015      	b.n	80160f0 <HAL_RCCEx_PeriphCLKConfig+0xf38>
    {

      case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80160c4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80160c8:	3308      	adds	r3, #8
 80160ca:	2100      	movs	r1, #0
 80160cc:	4618      	mov	r0, r3
 80160ce:	f000 fa7d 	bl	80165cc <RCCEx_PLL2_Config>
 80160d2:	4603      	mov	r3, r0
 80160d4:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* ADC clock source configuration done later after clock selection check */
        break;
 80160d8:	e00f      	b.n	80160fa <HAL_RCCEx_PeriphCLKConfig+0xf42>

      case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 80160da:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80160de:	3328      	adds	r3, #40	@ 0x28
 80160e0:	2102      	movs	r1, #2
 80160e2:	4618      	mov	r0, r3
 80160e4:	f000 fb24 	bl	8016730 <RCCEx_PLL3_Config>
 80160e8:	4603      	mov	r3, r0
 80160ea:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* ADC clock source configuration done later after clock selection check */
        break;
 80160ee:	e004      	b.n	80160fa <HAL_RCCEx_PeriphCLKConfig+0xf42>
        /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
        /* ADC clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80160f0:	2301      	movs	r3, #1
 80160f2:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80160f6:	e000      	b.n	80160fa <HAL_RCCEx_PeriphCLKConfig+0xf42>
        break;
 80160f8:	bf00      	nop
    }

    if (ret == HAL_OK)
 80160fa:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80160fe:	2b00      	cmp	r3, #0
 8016100:	d10b      	bne.n	801611a <HAL_RCCEx_PeriphCLKConfig+0xf62>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8016102:	4b4b      	ldr	r3, [pc, #300]	@ (8016230 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8016104:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8016106:	f423 3140 	bic.w	r1, r3, #196608	@ 0x30000
 801610a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801610e:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8016112:	4a47      	ldr	r2, [pc, #284]	@ (8016230 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8016114:	430b      	orrs	r3, r1
 8016116:	6593      	str	r3, [r2, #88]	@ 0x58
 8016118:	e003      	b.n	8016122 <HAL_RCCEx_PeriphCLKConfig+0xf6a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 801611a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 801611e:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8016122:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8016126:	e9d3 2300 	ldrd	r2, r3, [r3]
 801612a:	f402 2380 	and.w	r3, r2, #262144	@ 0x40000
 801612e:	67bb      	str	r3, [r7, #120]	@ 0x78
 8016130:	2300      	movs	r3, #0
 8016132:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8016134:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	@ 0x78
 8016138:	460b      	mov	r3, r1
 801613a:	4313      	orrs	r3, r2
 801613c:	d03b      	beq.n	80161b6 <HAL_RCCEx_PeriphCLKConfig+0xffe>
  {

    switch (PeriphClkInit->UsbClockSelection)
 801613e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8016142:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8016146:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 801614a:	d01f      	beq.n	801618c <HAL_RCCEx_PeriphCLKConfig+0xfd4>
 801614c:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8016150:	d818      	bhi.n	8016184 <HAL_RCCEx_PeriphCLKConfig+0xfcc>
 8016152:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8016156:	d003      	beq.n	8016160 <HAL_RCCEx_PeriphCLKConfig+0xfa8>
 8016158:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 801615c:	d007      	beq.n	801616e <HAL_RCCEx_PeriphCLKConfig+0xfb6>
 801615e:	e011      	b.n	8016184 <HAL_RCCEx_PeriphCLKConfig+0xfcc>
    {
      case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
        /* Enable USB Clock output generated form System USB . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8016160:	4b33      	ldr	r3, [pc, #204]	@ (8016230 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8016162:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8016164:	4a32      	ldr	r2, [pc, #200]	@ (8016230 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8016166:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 801616a:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* USB clock source configuration done later after clock selection check */
        break;
 801616c:	e00f      	b.n	801618e <HAL_RCCEx_PeriphCLKConfig+0xfd6>

      case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 801616e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8016172:	3328      	adds	r3, #40	@ 0x28
 8016174:	2101      	movs	r1, #1
 8016176:	4618      	mov	r0, r3
 8016178:	f000 fada 	bl	8016730 <RCCEx_PLL3_Config>
 801617c:	4603      	mov	r3, r0
 801617e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* USB clock source configuration done later after clock selection check */
        break;
 8016182:	e004      	b.n	801618e <HAL_RCCEx_PeriphCLKConfig+0xfd6>
        /* HSI48 oscillator is used as source of USB clock */
        /* USB clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8016184:	2301      	movs	r3, #1
 8016186:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 801618a:	e000      	b.n	801618e <HAL_RCCEx_PeriphCLKConfig+0xfd6>
        break;
 801618c:	bf00      	nop
    }

    if (ret == HAL_OK)
 801618e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8016192:	2b00      	cmp	r3, #0
 8016194:	d10b      	bne.n	80161ae <HAL_RCCEx_PeriphCLKConfig+0xff6>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8016196:	4b26      	ldr	r3, [pc, #152]	@ (8016230 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8016198:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 801619a:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 801619e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80161a2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80161a6:	4a22      	ldr	r2, [pc, #136]	@ (8016230 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80161a8:	430b      	orrs	r3, r1
 80161aa:	6553      	str	r3, [r2, #84]	@ 0x54
 80161ac:	e003      	b.n	80161b6 <HAL_RCCEx_PeriphCLKConfig+0xffe>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80161ae:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80161b2:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 80161b6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80161ba:	e9d3 2300 	ldrd	r2, r3, [r3]
 80161be:	f402 3380 	and.w	r3, r2, #65536	@ 0x10000
 80161c2:	673b      	str	r3, [r7, #112]	@ 0x70
 80161c4:	2300      	movs	r3, #0
 80161c6:	677b      	str	r3, [r7, #116]	@ 0x74
 80161c8:	e9d7 121c 	ldrd	r1, r2, [r7, #112]	@ 0x70
 80161cc:	460b      	mov	r3, r1
 80161ce:	4313      	orrs	r3, r2
 80161d0:	d034      	beq.n	801623c <HAL_RCCEx_PeriphCLKConfig+0x1084>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch (PeriphClkInit->SdmmcClockSelection)
 80161d2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80161d6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80161d8:	2b00      	cmp	r3, #0
 80161da:	d003      	beq.n	80161e4 <HAL_RCCEx_PeriphCLKConfig+0x102c>
 80161dc:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80161e0:	d007      	beq.n	80161f2 <HAL_RCCEx_PeriphCLKConfig+0x103a>
 80161e2:	e011      	b.n	8016208 <HAL_RCCEx_PeriphCLKConfig+0x1050>
    {
      case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
        /* Enable SDMMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80161e4:	4b12      	ldr	r3, [pc, #72]	@ (8016230 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80161e6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80161e8:	4a11      	ldr	r2, [pc, #68]	@ (8016230 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80161ea:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80161ee:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 80161f0:	e00e      	b.n	8016210 <HAL_RCCEx_PeriphCLKConfig+0x1058>

      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 80161f2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80161f6:	3308      	adds	r3, #8
 80161f8:	2102      	movs	r1, #2
 80161fa:	4618      	mov	r0, r3
 80161fc:	f000 f9e6 	bl	80165cc <RCCEx_PLL2_Config>
 8016200:	4603      	mov	r3, r0
 8016202:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 8016206:	e003      	b.n	8016210 <HAL_RCCEx_PeriphCLKConfig+0x1058>

      default:
        ret = HAL_ERROR;
 8016208:	2301      	movs	r3, #1
 801620a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 801620e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8016210:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8016214:	2b00      	cmp	r3, #0
 8016216:	d10d      	bne.n	8016234 <HAL_RCCEx_PeriphCLKConfig+0x107c>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 8016218:	4b05      	ldr	r3, [pc, #20]	@ (8016230 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 801621a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 801621c:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8016220:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8016224:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8016226:	4a02      	ldr	r2, [pc, #8]	@ (8016230 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8016228:	430b      	orrs	r3, r1
 801622a:	64d3      	str	r3, [r2, #76]	@ 0x4c
 801622c:	e006      	b.n	801623c <HAL_RCCEx_PeriphCLKConfig+0x1084>
 801622e:	bf00      	nop
 8016230:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8016234:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8016238:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 801623c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8016240:	e9d3 2300 	ldrd	r2, r3, [r3]
 8016244:	f002 5300 	and.w	r3, r2, #536870912	@ 0x20000000
 8016248:	66bb      	str	r3, [r7, #104]	@ 0x68
 801624a:	2300      	movs	r3, #0
 801624c:	66fb      	str	r3, [r7, #108]	@ 0x6c
 801624e:	e9d7 121a 	ldrd	r1, r2, [r7, #104]	@ 0x68
 8016252:	460b      	mov	r3, r1
 8016254:	4313      	orrs	r3, r2
 8016256:	d00c      	beq.n	8016272 <HAL_RCCEx_PeriphCLKConfig+0x10ba>
  {
    if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8016258:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801625c:	3328      	adds	r3, #40	@ 0x28
 801625e:	2102      	movs	r1, #2
 8016260:	4618      	mov	r0, r3
 8016262:	f000 fa65 	bl	8016730 <RCCEx_PLL3_Config>
 8016266:	4603      	mov	r3, r0
 8016268:	2b00      	cmp	r3, #0
 801626a:	d002      	beq.n	8016272 <HAL_RCCEx_PeriphCLKConfig+0x10ba>
    {
      status = HAL_ERROR;
 801626c:	2301      	movs	r3, #1
 801626e:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 8016272:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8016276:	e9d3 2300 	ldrd	r2, r3, [r3]
 801627a:	f402 3300 	and.w	r3, r2, #131072	@ 0x20000
 801627e:	663b      	str	r3, [r7, #96]	@ 0x60
 8016280:	2300      	movs	r3, #0
 8016282:	667b      	str	r3, [r7, #100]	@ 0x64
 8016284:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	@ 0x60
 8016288:	460b      	mov	r3, r1
 801628a:	4313      	orrs	r3, r2
 801628c:	d038      	beq.n	8016300 <HAL_RCCEx_PeriphCLKConfig+0x1148>
  {

    switch (PeriphClkInit->RngClockSelection)
 801628e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8016292:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8016296:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 801629a:	d018      	beq.n	80162ce <HAL_RCCEx_PeriphCLKConfig+0x1116>
 801629c:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80162a0:	d811      	bhi.n	80162c6 <HAL_RCCEx_PeriphCLKConfig+0x110e>
 80162a2:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80162a6:	d014      	beq.n	80162d2 <HAL_RCCEx_PeriphCLKConfig+0x111a>
 80162a8:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80162ac:	d80b      	bhi.n	80162c6 <HAL_RCCEx_PeriphCLKConfig+0x110e>
 80162ae:	2b00      	cmp	r3, #0
 80162b0:	d011      	beq.n	80162d6 <HAL_RCCEx_PeriphCLKConfig+0x111e>
 80162b2:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80162b6:	d106      	bne.n	80162c6 <HAL_RCCEx_PeriphCLKConfig+0x110e>
    {
      case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
        /* Enable RNG Clock output generated form System RNG . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80162b8:	4bc3      	ldr	r3, [pc, #780]	@ (80165c8 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80162ba:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80162bc:	4ac2      	ldr	r2, [pc, #776]	@ (80165c8 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80162be:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80162c2:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* RNG clock source configuration done later after clock selection check */
        break;
 80162c4:	e008      	b.n	80162d8 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        /* HSI48 oscillator is used as source of RNG clock */
        /* RNG clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80162c6:	2301      	movs	r3, #1
 80162c8:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80162cc:	e004      	b.n	80162d8 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 80162ce:	bf00      	nop
 80162d0:	e002      	b.n	80162d8 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 80162d2:	bf00      	nop
 80162d4:	e000      	b.n	80162d8 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 80162d6:	bf00      	nop
    }

    if (ret == HAL_OK)
 80162d8:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80162dc:	2b00      	cmp	r3, #0
 80162de:	d10b      	bne.n	80162f8 <HAL_RCCEx_PeriphCLKConfig+0x1140>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80162e0:	4bb9      	ldr	r3, [pc, #740]	@ (80165c8 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80162e2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80162e4:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 80162e8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80162ec:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80162f0:	4ab5      	ldr	r2, [pc, #724]	@ (80165c8 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80162f2:	430b      	orrs	r3, r1
 80162f4:	6553      	str	r3, [r2, #84]	@ 0x54
 80162f6:	e003      	b.n	8016300 <HAL_RCCEx_PeriphCLKConfig+0x1148>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80162f8:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80162fc:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8016300:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8016304:	e9d3 2300 	ldrd	r2, r3, [r3]
 8016308:	f402 1380 	and.w	r3, r2, #1048576	@ 0x100000
 801630c:	65bb      	str	r3, [r7, #88]	@ 0x58
 801630e:	2300      	movs	r3, #0
 8016310:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8016312:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	@ 0x58
 8016316:	460b      	mov	r3, r1
 8016318:	4313      	orrs	r3, r2
 801631a:	d009      	beq.n	8016330 <HAL_RCCEx_PeriphCLKConfig+0x1178>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 801631c:	4baa      	ldr	r3, [pc, #680]	@ (80165c8 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 801631e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8016320:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 8016324:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8016328:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 801632a:	4aa7      	ldr	r2, [pc, #668]	@ (80165c8 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 801632c:	430b      	orrs	r3, r1
 801632e:	6513      	str	r3, [r2, #80]	@ 0x50
  }
#if defined(HRTIM1)
  /*------------------------------ HRTIM1 clock Configuration ----------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
 8016330:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8016334:	e9d3 2300 	ldrd	r2, r3, [r3]
 8016338:	f002 5380 	and.w	r3, r2, #268435456	@ 0x10000000
 801633c:	653b      	str	r3, [r7, #80]	@ 0x50
 801633e:	2300      	movs	r3, #0
 8016340:	657b      	str	r3, [r7, #84]	@ 0x54
 8016342:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	@ 0x50
 8016346:	460b      	mov	r3, r1
 8016348:	4313      	orrs	r3, r2
 801634a:	d00a      	beq.n	8016362 <HAL_RCCEx_PeriphCLKConfig+0x11aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HRTIM1CLKSOURCE(PeriphClkInit->Hrtim1ClockSelection));

    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
 801634c:	4b9e      	ldr	r3, [pc, #632]	@ (80165c8 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 801634e:	691b      	ldr	r3, [r3, #16]
 8016350:	f423 4180 	bic.w	r1, r3, #16384	@ 0x4000
 8016354:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8016358:	f8d3 30b8 	ldr.w	r3, [r3, #184]	@ 0xb8
 801635c:	4a9a      	ldr	r2, [pc, #616]	@ (80165c8 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 801635e:	430b      	orrs	r3, r1
 8016360:	6113      	str	r3, [r2, #16]
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8016362:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8016366:	e9d3 2300 	ldrd	r2, r3, [r3]
 801636a:	f402 1300 	and.w	r3, r2, #2097152	@ 0x200000
 801636e:	64bb      	str	r3, [r7, #72]	@ 0x48
 8016370:	2300      	movs	r3, #0
 8016372:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8016374:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	@ 0x48
 8016378:	460b      	mov	r3, r1
 801637a:	4313      	orrs	r3, r2
 801637c:	d009      	beq.n	8016392 <HAL_RCCEx_PeriphCLKConfig+0x11da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 801637e:	4b92      	ldr	r3, [pc, #584]	@ (80165c8 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8016380:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8016382:	f023 7180 	bic.w	r1, r3, #16777216	@ 0x1000000
 8016386:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801638a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 801638c:	4a8e      	ldr	r2, [pc, #568]	@ (80165c8 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 801638e:	430b      	orrs	r3, r1
 8016390:	6513      	str	r3, [r2, #80]	@ 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 8016392:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8016396:	e9d3 2300 	ldrd	r2, r3, [r3]
 801639a:	f002 4380 	and.w	r3, r2, #1073741824	@ 0x40000000
 801639e:	643b      	str	r3, [r7, #64]	@ 0x40
 80163a0:	2300      	movs	r3, #0
 80163a2:	647b      	str	r3, [r7, #68]	@ 0x44
 80163a4:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	@ 0x40
 80163a8:	460b      	mov	r3, r1
 80163aa:	4313      	orrs	r3, r2
 80163ac:	d00e      	beq.n	80163cc <HAL_RCCEx_PeriphCLKConfig+0x1214>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 80163ae:	4b86      	ldr	r3, [pc, #536]	@ (80165c8 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80163b0:	691b      	ldr	r3, [r3, #16]
 80163b2:	4a85      	ldr	r2, [pc, #532]	@ (80165c8 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80163b4:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 80163b8:	6113      	str	r3, [r2, #16]
 80163ba:	4b83      	ldr	r3, [pc, #524]	@ (80165c8 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80163bc:	6919      	ldr	r1, [r3, #16]
 80163be:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80163c2:	f8d3 30bc 	ldr.w	r3, [r3, #188]	@ 0xbc
 80163c6:	4a80      	ldr	r2, [pc, #512]	@ (80165c8 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80163c8:	430b      	orrs	r3, r1
 80163ca:	6113      	str	r3, [r2, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 80163cc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80163d0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80163d4:	f002 4300 	and.w	r3, r2, #2147483648	@ 0x80000000
 80163d8:	63bb      	str	r3, [r7, #56]	@ 0x38
 80163da:	2300      	movs	r3, #0
 80163dc:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80163de:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	@ 0x38
 80163e2:	460b      	mov	r3, r1
 80163e4:	4313      	orrs	r3, r2
 80163e6:	d009      	beq.n	80163fc <HAL_RCCEx_PeriphCLKConfig+0x1244>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 80163e8:	4b77      	ldr	r3, [pc, #476]	@ (80165c8 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80163ea:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80163ec:	f023 5140 	bic.w	r1, r3, #805306368	@ 0x30000000
 80163f0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80163f4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80163f6:	4a74      	ldr	r2, [pc, #464]	@ (80165c8 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80163f8:	430b      	orrs	r3, r1
 80163fa:	64d3      	str	r3, [r2, #76]	@ 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 80163fc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8016400:	e9d3 2300 	ldrd	r2, r3, [r3]
 8016404:	f402 0300 	and.w	r3, r2, #8388608	@ 0x800000
 8016408:	633b      	str	r3, [r7, #48]	@ 0x30
 801640a:	2300      	movs	r3, #0
 801640c:	637b      	str	r3, [r7, #52]	@ 0x34
 801640e:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	@ 0x30
 8016412:	460b      	mov	r3, r1
 8016414:	4313      	orrs	r3, r2
 8016416:	d00a      	beq.n	801642e <HAL_RCCEx_PeriphCLKConfig+0x1276>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8016418:	4b6b      	ldr	r3, [pc, #428]	@ (80165c8 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 801641a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 801641c:	f423 0140 	bic.w	r1, r3, #12582912	@ 0xc00000
 8016420:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8016424:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8016428:	4a67      	ldr	r2, [pc, #412]	@ (80165c8 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 801642a:	430b      	orrs	r3, r1
 801642c:	6553      	str	r3, [r2, #84]	@ 0x54
  }

  /*---------------------------- PLL2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVP) == RCC_PERIPHCLK_PLL2_DIVP)
 801642e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8016432:	e9d3 2300 	ldrd	r2, r3, [r3]
 8016436:	2100      	movs	r1, #0
 8016438:	62b9      	str	r1, [r7, #40]	@ 0x28
 801643a:	f003 0301 	and.w	r3, r3, #1
 801643e:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8016440:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	@ 0x28
 8016444:	460b      	mov	r3, r1
 8016446:	4313      	orrs	r3, r2
 8016448:	d011      	beq.n	801646e <HAL_RCCEx_PeriphCLKConfig+0x12b6>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 801644a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801644e:	3308      	adds	r3, #8
 8016450:	2100      	movs	r1, #0
 8016452:	4618      	mov	r0, r3
 8016454:	f000 f8ba 	bl	80165cc <RCCEx_PLL2_Config>
 8016458:	4603      	mov	r3, r0
 801645a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 801645e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8016462:	2b00      	cmp	r3, #0
 8016464:	d003      	beq.n	801646e <HAL_RCCEx_PeriphCLKConfig+0x12b6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8016466:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 801646a:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    } 
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVQ) == RCC_PERIPHCLK_PLL2_DIVQ)
 801646e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8016472:	e9d3 2300 	ldrd	r2, r3, [r3]
 8016476:	2100      	movs	r1, #0
 8016478:	6239      	str	r1, [r7, #32]
 801647a:	f003 0302 	and.w	r3, r3, #2
 801647e:	627b      	str	r3, [r7, #36]	@ 0x24
 8016480:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 8016484:	460b      	mov	r3, r1
 8016486:	4313      	orrs	r3, r2
 8016488:	d011      	beq.n	80164ae <HAL_RCCEx_PeriphCLKConfig+0x12f6>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 801648a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801648e:	3308      	adds	r3, #8
 8016490:	2101      	movs	r1, #1
 8016492:	4618      	mov	r0, r3
 8016494:	f000 f89a 	bl	80165cc <RCCEx_PLL2_Config>
 8016498:	4603      	mov	r3, r0
 801649a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 801649e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80164a2:	2b00      	cmp	r3, #0
 80164a4:	d003      	beq.n	80164ae <HAL_RCCEx_PeriphCLKConfig+0x12f6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 80164a6:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80164aa:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVR) == RCC_PERIPHCLK_PLL2_DIVR)
 80164ae:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80164b2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80164b6:	2100      	movs	r1, #0
 80164b8:	61b9      	str	r1, [r7, #24]
 80164ba:	f003 0304 	and.w	r3, r3, #4
 80164be:	61fb      	str	r3, [r7, #28]
 80164c0:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 80164c4:	460b      	mov	r3, r1
 80164c6:	4313      	orrs	r3, r2
 80164c8:	d011      	beq.n	80164ee <HAL_RCCEx_PeriphCLKConfig+0x1336>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 80164ca:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80164ce:	3308      	adds	r3, #8
 80164d0:	2102      	movs	r1, #2
 80164d2:	4618      	mov	r0, r3
 80164d4:	f000 f87a 	bl	80165cc <RCCEx_PLL2_Config>
 80164d8:	4603      	mov	r3, r0
 80164da:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 80164de:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80164e2:	2b00      	cmp	r3, #0
 80164e4:	d003      	beq.n	80164ee <HAL_RCCEx_PeriphCLKConfig+0x1336>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 80164e6:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80164ea:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  

  /*---------------------------- PLL3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVP) == RCC_PERIPHCLK_PLL3_DIVP)
 80164ee:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80164f2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80164f6:	2100      	movs	r1, #0
 80164f8:	6139      	str	r1, [r7, #16]
 80164fa:	f003 0308 	and.w	r3, r3, #8
 80164fe:	617b      	str	r3, [r7, #20]
 8016500:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 8016504:	460b      	mov	r3, r1
 8016506:	4313      	orrs	r3, r2
 8016508:	d011      	beq.n	801652e <HAL_RCCEx_PeriphCLKConfig+0x1376>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 801650a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801650e:	3328      	adds	r3, #40	@ 0x28
 8016510:	2100      	movs	r1, #0
 8016512:	4618      	mov	r0, r3
 8016514:	f000 f90c 	bl	8016730 <RCCEx_PLL3_Config>
 8016518:	4603      	mov	r3, r0
 801651a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
  
    if (ret == HAL_OK)
 801651e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8016522:	2b00      	cmp	r3, #0
 8016524:	d003      	beq.n	801652e <HAL_RCCEx_PeriphCLKConfig+0x1376>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8016526:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 801652a:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVQ) == RCC_PERIPHCLK_PLL3_DIVQ)
 801652e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8016532:	e9d3 2300 	ldrd	r2, r3, [r3]
 8016536:	2100      	movs	r1, #0
 8016538:	60b9      	str	r1, [r7, #8]
 801653a:	f003 0310 	and.w	r3, r3, #16
 801653e:	60fb      	str	r3, [r7, #12]
 8016540:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 8016544:	460b      	mov	r3, r1
 8016546:	4313      	orrs	r3, r2
 8016548:	d011      	beq.n	801656e <HAL_RCCEx_PeriphCLKConfig+0x13b6>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 801654a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801654e:	3328      	adds	r3, #40	@ 0x28
 8016550:	2101      	movs	r1, #1
 8016552:	4618      	mov	r0, r3
 8016554:	f000 f8ec 	bl	8016730 <RCCEx_PLL3_Config>
 8016558:	4603      	mov	r3, r0
 801655a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 801655e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8016562:	2b00      	cmp	r3, #0
 8016564:	d003      	beq.n	801656e <HAL_RCCEx_PeriphCLKConfig+0x13b6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8016566:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 801656a:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVR) == RCC_PERIPHCLK_PLL3_DIVR)
 801656e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8016572:	e9d3 2300 	ldrd	r2, r3, [r3]
 8016576:	2100      	movs	r1, #0
 8016578:	6039      	str	r1, [r7, #0]
 801657a:	f003 0320 	and.w	r3, r3, #32
 801657e:	607b      	str	r3, [r7, #4]
 8016580:	e9d7 1200 	ldrd	r1, r2, [r7]
 8016584:	460b      	mov	r3, r1
 8016586:	4313      	orrs	r3, r2
 8016588:	d011      	beq.n	80165ae <HAL_RCCEx_PeriphCLKConfig+0x13f6>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 801658a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801658e:	3328      	adds	r3, #40	@ 0x28
 8016590:	2102      	movs	r1, #2
 8016592:	4618      	mov	r0, r3
 8016594:	f000 f8cc 	bl	8016730 <RCCEx_PLL3_Config>
 8016598:	4603      	mov	r3, r0
 801659a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 801659e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80165a2:	2b00      	cmp	r3, #0
 80165a4:	d003      	beq.n	80165ae <HAL_RCCEx_PeriphCLKConfig+0x13f6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 80165a6:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80165aa:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    } 
  }

  if (status == HAL_OK)
 80165ae:	f897 3126 	ldrb.w	r3, [r7, #294]	@ 0x126
 80165b2:	2b00      	cmp	r3, #0
 80165b4:	d101      	bne.n	80165ba <HAL_RCCEx_PeriphCLKConfig+0x1402>
  {
    return HAL_OK;
 80165b6:	2300      	movs	r3, #0
 80165b8:	e000      	b.n	80165bc <HAL_RCCEx_PeriphCLKConfig+0x1404>
  }
  return HAL_ERROR;
 80165ba:	2301      	movs	r3, #1
}
 80165bc:	4618      	mov	r0, r3
 80165be:	f507 7794 	add.w	r7, r7, #296	@ 0x128
 80165c2:	46bd      	mov	sp, r7
 80165c4:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80165c8:	58024400 	.word	0x58024400

080165cc <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 80165cc:	b580      	push	{r7, lr}
 80165ce:	b084      	sub	sp, #16
 80165d0:	af00      	add	r7, sp, #0
 80165d2:	6078      	str	r0, [r7, #4]
 80165d4:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80165d6:	2300      	movs	r3, #0
 80165d8:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 80165da:	4b53      	ldr	r3, [pc, #332]	@ (8016728 <RCCEx_PLL2_Config+0x15c>)
 80165dc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80165de:	f003 0303 	and.w	r3, r3, #3
 80165e2:	2b03      	cmp	r3, #3
 80165e4:	d101      	bne.n	80165ea <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 80165e6:	2301      	movs	r3, #1
 80165e8:	e099      	b.n	801671e <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 80165ea:	4b4f      	ldr	r3, [pc, #316]	@ (8016728 <RCCEx_PLL2_Config+0x15c>)
 80165ec:	681b      	ldr	r3, [r3, #0]
 80165ee:	4a4e      	ldr	r2, [pc, #312]	@ (8016728 <RCCEx_PLL2_Config+0x15c>)
 80165f0:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 80165f4:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80165f6:	f7fa fb83 	bl	8010d00 <HAL_GetTick>
 80165fa:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 80165fc:	e008      	b.n	8016610 <RCCEx_PLL2_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 80165fe:	f7fa fb7f 	bl	8010d00 <HAL_GetTick>
 8016602:	4602      	mov	r2, r0
 8016604:	68bb      	ldr	r3, [r7, #8]
 8016606:	1ad3      	subs	r3, r2, r3
 8016608:	2b02      	cmp	r3, #2
 801660a:	d901      	bls.n	8016610 <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 801660c:	2303      	movs	r3, #3
 801660e:	e086      	b.n	801671e <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8016610:	4b45      	ldr	r3, [pc, #276]	@ (8016728 <RCCEx_PLL2_Config+0x15c>)
 8016612:	681b      	ldr	r3, [r3, #0]
 8016614:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8016618:	2b00      	cmp	r3, #0
 801661a:	d1f0      	bne.n	80165fe <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 801661c:	4b42      	ldr	r3, [pc, #264]	@ (8016728 <RCCEx_PLL2_Config+0x15c>)
 801661e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8016620:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 8016624:	687b      	ldr	r3, [r7, #4]
 8016626:	681b      	ldr	r3, [r3, #0]
 8016628:	031b      	lsls	r3, r3, #12
 801662a:	493f      	ldr	r1, [pc, #252]	@ (8016728 <RCCEx_PLL2_Config+0x15c>)
 801662c:	4313      	orrs	r3, r2
 801662e:	628b      	str	r3, [r1, #40]	@ 0x28
 8016630:	687b      	ldr	r3, [r7, #4]
 8016632:	685b      	ldr	r3, [r3, #4]
 8016634:	3b01      	subs	r3, #1
 8016636:	f3c3 0208 	ubfx	r2, r3, #0, #9
 801663a:	687b      	ldr	r3, [r7, #4]
 801663c:	689b      	ldr	r3, [r3, #8]
 801663e:	3b01      	subs	r3, #1
 8016640:	025b      	lsls	r3, r3, #9
 8016642:	b29b      	uxth	r3, r3
 8016644:	431a      	orrs	r2, r3
 8016646:	687b      	ldr	r3, [r7, #4]
 8016648:	68db      	ldr	r3, [r3, #12]
 801664a:	3b01      	subs	r3, #1
 801664c:	041b      	lsls	r3, r3, #16
 801664e:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 8016652:	431a      	orrs	r2, r3
 8016654:	687b      	ldr	r3, [r7, #4]
 8016656:	691b      	ldr	r3, [r3, #16]
 8016658:	3b01      	subs	r3, #1
 801665a:	061b      	lsls	r3, r3, #24
 801665c:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 8016660:	4931      	ldr	r1, [pc, #196]	@ (8016728 <RCCEx_PLL2_Config+0x15c>)
 8016662:	4313      	orrs	r3, r2
 8016664:	638b      	str	r3, [r1, #56]	@ 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 8016666:	4b30      	ldr	r3, [pc, #192]	@ (8016728 <RCCEx_PLL2_Config+0x15c>)
 8016668:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801666a:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 801666e:	687b      	ldr	r3, [r7, #4]
 8016670:	695b      	ldr	r3, [r3, #20]
 8016672:	492d      	ldr	r1, [pc, #180]	@ (8016728 <RCCEx_PLL2_Config+0x15c>)
 8016674:	4313      	orrs	r3, r2
 8016676:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 8016678:	4b2b      	ldr	r3, [pc, #172]	@ (8016728 <RCCEx_PLL2_Config+0x15c>)
 801667a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801667c:	f023 0220 	bic.w	r2, r3, #32
 8016680:	687b      	ldr	r3, [r7, #4]
 8016682:	699b      	ldr	r3, [r3, #24]
 8016684:	4928      	ldr	r1, [pc, #160]	@ (8016728 <RCCEx_PLL2_Config+0x15c>)
 8016686:	4313      	orrs	r3, r2
 8016688:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 801668a:	4b27      	ldr	r3, [pc, #156]	@ (8016728 <RCCEx_PLL2_Config+0x15c>)
 801668c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801668e:	4a26      	ldr	r2, [pc, #152]	@ (8016728 <RCCEx_PLL2_Config+0x15c>)
 8016690:	f023 0310 	bic.w	r3, r3, #16
 8016694:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 8016696:	4b24      	ldr	r3, [pc, #144]	@ (8016728 <RCCEx_PLL2_Config+0x15c>)
 8016698:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 801669a:	4b24      	ldr	r3, [pc, #144]	@ (801672c <RCCEx_PLL2_Config+0x160>)
 801669c:	4013      	ands	r3, r2
 801669e:	687a      	ldr	r2, [r7, #4]
 80166a0:	69d2      	ldr	r2, [r2, #28]
 80166a2:	00d2      	lsls	r2, r2, #3
 80166a4:	4920      	ldr	r1, [pc, #128]	@ (8016728 <RCCEx_PLL2_Config+0x15c>)
 80166a6:	4313      	orrs	r3, r2
 80166a8:	63cb      	str	r3, [r1, #60]	@ 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 80166aa:	4b1f      	ldr	r3, [pc, #124]	@ (8016728 <RCCEx_PLL2_Config+0x15c>)
 80166ac:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80166ae:	4a1e      	ldr	r2, [pc, #120]	@ (8016728 <RCCEx_PLL2_Config+0x15c>)
 80166b0:	f043 0310 	orr.w	r3, r3, #16
 80166b4:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Enable the PLL2 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 80166b6:	683b      	ldr	r3, [r7, #0]
 80166b8:	2b00      	cmp	r3, #0
 80166ba:	d106      	bne.n	80166ca <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 80166bc:	4b1a      	ldr	r3, [pc, #104]	@ (8016728 <RCCEx_PLL2_Config+0x15c>)
 80166be:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80166c0:	4a19      	ldr	r2, [pc, #100]	@ (8016728 <RCCEx_PLL2_Config+0x15c>)
 80166c2:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 80166c6:	62d3      	str	r3, [r2, #44]	@ 0x2c
 80166c8:	e00f      	b.n	80166ea <RCCEx_PLL2_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 80166ca:	683b      	ldr	r3, [r7, #0]
 80166cc:	2b01      	cmp	r3, #1
 80166ce:	d106      	bne.n	80166de <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 80166d0:	4b15      	ldr	r3, [pc, #84]	@ (8016728 <RCCEx_PLL2_Config+0x15c>)
 80166d2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80166d4:	4a14      	ldr	r2, [pc, #80]	@ (8016728 <RCCEx_PLL2_Config+0x15c>)
 80166d6:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80166da:	62d3      	str	r3, [r2, #44]	@ 0x2c
 80166dc:	e005      	b.n	80166ea <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 80166de:	4b12      	ldr	r3, [pc, #72]	@ (8016728 <RCCEx_PLL2_Config+0x15c>)
 80166e0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80166e2:	4a11      	ldr	r2, [pc, #68]	@ (8016728 <RCCEx_PLL2_Config+0x15c>)
 80166e4:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 80166e8:	62d3      	str	r3, [r2, #44]	@ 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 80166ea:	4b0f      	ldr	r3, [pc, #60]	@ (8016728 <RCCEx_PLL2_Config+0x15c>)
 80166ec:	681b      	ldr	r3, [r3, #0]
 80166ee:	4a0e      	ldr	r2, [pc, #56]	@ (8016728 <RCCEx_PLL2_Config+0x15c>)
 80166f0:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 80166f4:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80166f6:	f7fa fb03 	bl	8010d00 <HAL_GetTick>
 80166fa:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 80166fc:	e008      	b.n	8016710 <RCCEx_PLL2_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 80166fe:	f7fa faff 	bl	8010d00 <HAL_GetTick>
 8016702:	4602      	mov	r2, r0
 8016704:	68bb      	ldr	r3, [r7, #8]
 8016706:	1ad3      	subs	r3, r2, r3
 8016708:	2b02      	cmp	r3, #2
 801670a:	d901      	bls.n	8016710 <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 801670c:	2303      	movs	r3, #3
 801670e:	e006      	b.n	801671e <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8016710:	4b05      	ldr	r3, [pc, #20]	@ (8016728 <RCCEx_PLL2_Config+0x15c>)
 8016712:	681b      	ldr	r3, [r3, #0]
 8016714:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8016718:	2b00      	cmp	r3, #0
 801671a:	d0f0      	beq.n	80166fe <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 801671c:	7bfb      	ldrb	r3, [r7, #15]
}
 801671e:	4618      	mov	r0, r3
 8016720:	3710      	adds	r7, #16
 8016722:	46bd      	mov	sp, r7
 8016724:	bd80      	pop	{r7, pc}
 8016726:	bf00      	nop
 8016728:	58024400 	.word	0x58024400
 801672c:	ffff0007 	.word	0xffff0007

08016730 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 8016730:	b580      	push	{r7, lr}
 8016732:	b084      	sub	sp, #16
 8016734:	af00      	add	r7, sp, #0
 8016736:	6078      	str	r0, [r7, #4]
 8016738:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 801673a:	2300      	movs	r3, #0
 801673c:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 801673e:	4b53      	ldr	r3, [pc, #332]	@ (801688c <RCCEx_PLL3_Config+0x15c>)
 8016740:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8016742:	f003 0303 	and.w	r3, r3, #3
 8016746:	2b03      	cmp	r3, #3
 8016748:	d101      	bne.n	801674e <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 801674a:	2301      	movs	r3, #1
 801674c:	e099      	b.n	8016882 <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 801674e:	4b4f      	ldr	r3, [pc, #316]	@ (801688c <RCCEx_PLL3_Config+0x15c>)
 8016750:	681b      	ldr	r3, [r3, #0]
 8016752:	4a4e      	ldr	r2, [pc, #312]	@ (801688c <RCCEx_PLL3_Config+0x15c>)
 8016754:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8016758:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 801675a:	f7fa fad1 	bl	8010d00 <HAL_GetTick>
 801675e:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8016760:	e008      	b.n	8016774 <RCCEx_PLL3_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 8016762:	f7fa facd 	bl	8010d00 <HAL_GetTick>
 8016766:	4602      	mov	r2, r0
 8016768:	68bb      	ldr	r3, [r7, #8]
 801676a:	1ad3      	subs	r3, r2, r3
 801676c:	2b02      	cmp	r3, #2
 801676e:	d901      	bls.n	8016774 <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 8016770:	2303      	movs	r3, #3
 8016772:	e086      	b.n	8016882 <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8016774:	4b45      	ldr	r3, [pc, #276]	@ (801688c <RCCEx_PLL3_Config+0x15c>)
 8016776:	681b      	ldr	r3, [r3, #0]
 8016778:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 801677c:	2b00      	cmp	r3, #0
 801677e:	d1f0      	bne.n	8016762 <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 8016780:	4b42      	ldr	r3, [pc, #264]	@ (801688c <RCCEx_PLL3_Config+0x15c>)
 8016782:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8016784:	f023 727c 	bic.w	r2, r3, #66060288	@ 0x3f00000
 8016788:	687b      	ldr	r3, [r7, #4]
 801678a:	681b      	ldr	r3, [r3, #0]
 801678c:	051b      	lsls	r3, r3, #20
 801678e:	493f      	ldr	r1, [pc, #252]	@ (801688c <RCCEx_PLL3_Config+0x15c>)
 8016790:	4313      	orrs	r3, r2
 8016792:	628b      	str	r3, [r1, #40]	@ 0x28
 8016794:	687b      	ldr	r3, [r7, #4]
 8016796:	685b      	ldr	r3, [r3, #4]
 8016798:	3b01      	subs	r3, #1
 801679a:	f3c3 0208 	ubfx	r2, r3, #0, #9
 801679e:	687b      	ldr	r3, [r7, #4]
 80167a0:	689b      	ldr	r3, [r3, #8]
 80167a2:	3b01      	subs	r3, #1
 80167a4:	025b      	lsls	r3, r3, #9
 80167a6:	b29b      	uxth	r3, r3
 80167a8:	431a      	orrs	r2, r3
 80167aa:	687b      	ldr	r3, [r7, #4]
 80167ac:	68db      	ldr	r3, [r3, #12]
 80167ae:	3b01      	subs	r3, #1
 80167b0:	041b      	lsls	r3, r3, #16
 80167b2:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 80167b6:	431a      	orrs	r2, r3
 80167b8:	687b      	ldr	r3, [r7, #4]
 80167ba:	691b      	ldr	r3, [r3, #16]
 80167bc:	3b01      	subs	r3, #1
 80167be:	061b      	lsls	r3, r3, #24
 80167c0:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 80167c4:	4931      	ldr	r1, [pc, #196]	@ (801688c <RCCEx_PLL3_Config+0x15c>)
 80167c6:	4313      	orrs	r3, r2
 80167c8:	640b      	str	r3, [r1, #64]	@ 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 80167ca:	4b30      	ldr	r3, [pc, #192]	@ (801688c <RCCEx_PLL3_Config+0x15c>)
 80167cc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80167ce:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 80167d2:	687b      	ldr	r3, [r7, #4]
 80167d4:	695b      	ldr	r3, [r3, #20]
 80167d6:	492d      	ldr	r1, [pc, #180]	@ (801688c <RCCEx_PLL3_Config+0x15c>)
 80167d8:	4313      	orrs	r3, r2
 80167da:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 80167dc:	4b2b      	ldr	r3, [pc, #172]	@ (801688c <RCCEx_PLL3_Config+0x15c>)
 80167de:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80167e0:	f423 7200 	bic.w	r2, r3, #512	@ 0x200
 80167e4:	687b      	ldr	r3, [r7, #4]
 80167e6:	699b      	ldr	r3, [r3, #24]
 80167e8:	4928      	ldr	r1, [pc, #160]	@ (801688c <RCCEx_PLL3_Config+0x15c>)
 80167ea:	4313      	orrs	r3, r2
 80167ec:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 80167ee:	4b27      	ldr	r3, [pc, #156]	@ (801688c <RCCEx_PLL3_Config+0x15c>)
 80167f0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80167f2:	4a26      	ldr	r2, [pc, #152]	@ (801688c <RCCEx_PLL3_Config+0x15c>)
 80167f4:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80167f8:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 80167fa:	4b24      	ldr	r3, [pc, #144]	@ (801688c <RCCEx_PLL3_Config+0x15c>)
 80167fc:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80167fe:	4b24      	ldr	r3, [pc, #144]	@ (8016890 <RCCEx_PLL3_Config+0x160>)
 8016800:	4013      	ands	r3, r2
 8016802:	687a      	ldr	r2, [r7, #4]
 8016804:	69d2      	ldr	r2, [r2, #28]
 8016806:	00d2      	lsls	r2, r2, #3
 8016808:	4920      	ldr	r1, [pc, #128]	@ (801688c <RCCEx_PLL3_Config+0x15c>)
 801680a:	4313      	orrs	r3, r2
 801680c:	644b      	str	r3, [r1, #68]	@ 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 801680e:	4b1f      	ldr	r3, [pc, #124]	@ (801688c <RCCEx_PLL3_Config+0x15c>)
 8016810:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8016812:	4a1e      	ldr	r2, [pc, #120]	@ (801688c <RCCEx_PLL3_Config+0x15c>)
 8016814:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8016818:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Enable the PLL3 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 801681a:	683b      	ldr	r3, [r7, #0]
 801681c:	2b00      	cmp	r3, #0
 801681e:	d106      	bne.n	801682e <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 8016820:	4b1a      	ldr	r3, [pc, #104]	@ (801688c <RCCEx_PLL3_Config+0x15c>)
 8016822:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8016824:	4a19      	ldr	r2, [pc, #100]	@ (801688c <RCCEx_PLL3_Config+0x15c>)
 8016826:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 801682a:	62d3      	str	r3, [r2, #44]	@ 0x2c
 801682c:	e00f      	b.n	801684e <RCCEx_PLL3_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 801682e:	683b      	ldr	r3, [r7, #0]
 8016830:	2b01      	cmp	r3, #1
 8016832:	d106      	bne.n	8016842 <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 8016834:	4b15      	ldr	r3, [pc, #84]	@ (801688c <RCCEx_PLL3_Config+0x15c>)
 8016836:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8016838:	4a14      	ldr	r2, [pc, #80]	@ (801688c <RCCEx_PLL3_Config+0x15c>)
 801683a:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 801683e:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8016840:	e005      	b.n	801684e <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 8016842:	4b12      	ldr	r3, [pc, #72]	@ (801688c <RCCEx_PLL3_Config+0x15c>)
 8016844:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8016846:	4a11      	ldr	r2, [pc, #68]	@ (801688c <RCCEx_PLL3_Config+0x15c>)
 8016848:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 801684c:	62d3      	str	r3, [r2, #44]	@ 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 801684e:	4b0f      	ldr	r3, [pc, #60]	@ (801688c <RCCEx_PLL3_Config+0x15c>)
 8016850:	681b      	ldr	r3, [r3, #0]
 8016852:	4a0e      	ldr	r2, [pc, #56]	@ (801688c <RCCEx_PLL3_Config+0x15c>)
 8016854:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8016858:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 801685a:	f7fa fa51 	bl	8010d00 <HAL_GetTick>
 801685e:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8016860:	e008      	b.n	8016874 <RCCEx_PLL3_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 8016862:	f7fa fa4d 	bl	8010d00 <HAL_GetTick>
 8016866:	4602      	mov	r2, r0
 8016868:	68bb      	ldr	r3, [r7, #8]
 801686a:	1ad3      	subs	r3, r2, r3
 801686c:	2b02      	cmp	r3, #2
 801686e:	d901      	bls.n	8016874 <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 8016870:	2303      	movs	r3, #3
 8016872:	e006      	b.n	8016882 <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8016874:	4b05      	ldr	r3, [pc, #20]	@ (801688c <RCCEx_PLL3_Config+0x15c>)
 8016876:	681b      	ldr	r3, [r3, #0]
 8016878:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 801687c:	2b00      	cmp	r3, #0
 801687e:	d0f0      	beq.n	8016862 <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 8016880:	7bfb      	ldrb	r3, [r7, #15]
}
 8016882:	4618      	mov	r0, r3
 8016884:	3710      	adds	r7, #16
 8016886:	46bd      	mov	sp, r7
 8016888:	bd80      	pop	{r7, pc}
 801688a:	bf00      	nop
 801688c:	58024400 	.word	0x58024400
 8016890:	ffff0007 	.word	0xffff0007

08016894 <HAL_SDRAM_Init>:
  *                the configuration information for SDRAM module.
  * @param  Timing Pointer to SDRAM control timing structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_Init(SDRAM_HandleTypeDef *hsdram, FMC_SDRAM_TimingTypeDef *Timing)
{
 8016894:	b580      	push	{r7, lr}
 8016896:	b082      	sub	sp, #8
 8016898:	af00      	add	r7, sp, #0
 801689a:	6078      	str	r0, [r7, #4]
 801689c:	6039      	str	r1, [r7, #0]
  /* Check the SDRAM handle parameter */
  if (hsdram == NULL)
 801689e:	687b      	ldr	r3, [r7, #4]
 80168a0:	2b00      	cmp	r3, #0
 80168a2:	d101      	bne.n	80168a8 <HAL_SDRAM_Init+0x14>
  {
    return HAL_ERROR;
 80168a4:	2301      	movs	r3, #1
 80168a6:	e02b      	b.n	8016900 <HAL_SDRAM_Init+0x6c>
  }

  if (hsdram->State == HAL_SDRAM_STATE_RESET)
 80168a8:	687b      	ldr	r3, [r7, #4]
 80168aa:	f893 302c 	ldrb.w	r3, [r3, #44]	@ 0x2c
 80168ae:	b2db      	uxtb	r3, r3
 80168b0:	2b00      	cmp	r3, #0
 80168b2:	d106      	bne.n	80168c2 <HAL_SDRAM_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    hsdram->Lock = HAL_UNLOCKED;
 80168b4:	687b      	ldr	r3, [r7, #4]
 80168b6:	2200      	movs	r2, #0
 80168b8:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d

    /* Init the low level hardware */
    hsdram->MspInitCallback(hsdram);
#else
    /* Initialize the low level hardware (MSP) */
    HAL_SDRAM_MspInit(hsdram);
 80168bc:	6878      	ldr	r0, [r7, #4]
 80168be:	f7ea fdc5 	bl	800144c <HAL_SDRAM_MspInit>
#endif /* USE_HAL_SDRAM_REGISTER_CALLBACKS */
  }

  /* Initialize the SDRAM controller state */
  hsdram->State = HAL_SDRAM_STATE_BUSY;
 80168c2:	687b      	ldr	r3, [r7, #4]
 80168c4:	2202      	movs	r2, #2
 80168c6:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c

  /* Initialize SDRAM control Interface */
  (void)FMC_SDRAM_Init(hsdram->Instance, &(hsdram->Init));
 80168ca:	687b      	ldr	r3, [r7, #4]
 80168cc:	681a      	ldr	r2, [r3, #0]
 80168ce:	687b      	ldr	r3, [r7, #4]
 80168d0:	3304      	adds	r3, #4
 80168d2:	4619      	mov	r1, r3
 80168d4:	4610      	mov	r0, r2
 80168d6:	f000 fb61 	bl	8016f9c <FMC_SDRAM_Init>

  /* Initialize SDRAM timing Interface */
  (void)FMC_SDRAM_Timing_Init(hsdram->Instance, Timing, hsdram->Init.SDBank);
 80168da:	687b      	ldr	r3, [r7, #4]
 80168dc:	6818      	ldr	r0, [r3, #0]
 80168de:	687b      	ldr	r3, [r7, #4]
 80168e0:	685b      	ldr	r3, [r3, #4]
 80168e2:	461a      	mov	r2, r3
 80168e4:	6839      	ldr	r1, [r7, #0]
 80168e6:	f000 fbb5 	bl	8017054 <FMC_SDRAM_Timing_Init>

  /* Enable FMC Peripheral */
  __FMC_ENABLE();
 80168ea:	4b07      	ldr	r3, [pc, #28]	@ (8016908 <HAL_SDRAM_Init+0x74>)
 80168ec:	681b      	ldr	r3, [r3, #0]
 80168ee:	4a06      	ldr	r2, [pc, #24]	@ (8016908 <HAL_SDRAM_Init+0x74>)
 80168f0:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 80168f4:	6013      	str	r3, [r2, #0]
  /* Update the SDRAM controller state */
  hsdram->State = HAL_SDRAM_STATE_READY;
 80168f6:	687b      	ldr	r3, [r7, #4]
 80168f8:	2201      	movs	r2, #1
 80168fa:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c

  return HAL_OK;
 80168fe:	2300      	movs	r3, #0
}
 8016900:	4618      	mov	r0, r3
 8016902:	3708      	adds	r7, #8
 8016904:	46bd      	mov	sp, r7
 8016906:	bd80      	pop	{r7, pc}
 8016908:	52004000 	.word	0x52004000

0801690c <HAL_SDRAM_DeInit>:
  * @param  hsdram pointer to a SDRAM_HandleTypeDef structure that contains
  *                the configuration information for SDRAM module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_DeInit(SDRAM_HandleTypeDef *hsdram)
{
 801690c:	b580      	push	{r7, lr}
 801690e:	b082      	sub	sp, #8
 8016910:	af00      	add	r7, sp, #0
 8016912:	6078      	str	r0, [r7, #4]

  /* DeInit the low level hardware */
  hsdram->MspDeInitCallback(hsdram);
#else
  /* Initialize the low level hardware (MSP) */
  HAL_SDRAM_MspDeInit(hsdram);
 8016914:	6878      	ldr	r0, [r7, #4]
 8016916:	f7ea fddd 	bl	80014d4 <HAL_SDRAM_MspDeInit>
#endif /* USE_HAL_SDRAM_REGISTER_CALLBACKS */

  /* Configure the SDRAM registers with their reset values */
  (void)FMC_SDRAM_DeInit(hsdram->Instance, hsdram->Init.SDBank);
 801691a:	687b      	ldr	r3, [r7, #4]
 801691c:	681a      	ldr	r2, [r3, #0]
 801691e:	687b      	ldr	r3, [r7, #4]
 8016920:	685b      	ldr	r3, [r3, #4]
 8016922:	4619      	mov	r1, r3
 8016924:	4610      	mov	r0, r2
 8016926:	f000 fbff 	bl	8017128 <FMC_SDRAM_DeInit>

  /* Reset the SDRAM controller state */
  hsdram->State = HAL_SDRAM_STATE_RESET;
 801692a:	687b      	ldr	r3, [r7, #4]
 801692c:	2200      	movs	r2, #0
 801692e:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c

  /* Release Lock */
  __HAL_UNLOCK(hsdram);
 8016932:	687b      	ldr	r3, [r7, #4]
 8016934:	2200      	movs	r2, #0
 8016936:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d

  return HAL_OK;
 801693a:	2300      	movs	r3, #0
}
 801693c:	4618      	mov	r0, r3
 801693e:	3708      	adds	r7, #8
 8016940:	46bd      	mov	sp, r7
 8016942:	bd80      	pop	{r7, pc}

08016944 <HAL_SDRAM_SendCommand>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_SendCommand(SDRAM_HandleTypeDef *hsdram, FMC_SDRAM_CommandTypeDef *Command,
                                        uint32_t Timeout)
{
 8016944:	b580      	push	{r7, lr}
 8016946:	b086      	sub	sp, #24
 8016948:	af00      	add	r7, sp, #0
 801694a:	60f8      	str	r0, [r7, #12]
 801694c:	60b9      	str	r1, [r7, #8]
 801694e:	607a      	str	r2, [r7, #4]
  HAL_SDRAM_StateTypeDef state = hsdram->State;
 8016950:	68fb      	ldr	r3, [r7, #12]
 8016952:	f893 302c 	ldrb.w	r3, [r3, #44]	@ 0x2c
 8016956:	75fb      	strb	r3, [r7, #23]

  /* Check the SDRAM controller state */
  if (state == HAL_SDRAM_STATE_BUSY)
 8016958:	7dfb      	ldrb	r3, [r7, #23]
 801695a:	2b02      	cmp	r3, #2
 801695c:	d101      	bne.n	8016962 <HAL_SDRAM_SendCommand+0x1e>
  {
    return HAL_BUSY;
 801695e:	2302      	movs	r3, #2
 8016960:	e021      	b.n	80169a6 <HAL_SDRAM_SendCommand+0x62>
  }
  else if ((state == HAL_SDRAM_STATE_READY) || (state == HAL_SDRAM_STATE_PRECHARGED))
 8016962:	7dfb      	ldrb	r3, [r7, #23]
 8016964:	2b01      	cmp	r3, #1
 8016966:	d002      	beq.n	801696e <HAL_SDRAM_SendCommand+0x2a>
 8016968:	7dfb      	ldrb	r3, [r7, #23]
 801696a:	2b05      	cmp	r3, #5
 801696c:	d118      	bne.n	80169a0 <HAL_SDRAM_SendCommand+0x5c>
  {
    /* Update the SDRAM state */
    hsdram->State = HAL_SDRAM_STATE_BUSY;
 801696e:	68fb      	ldr	r3, [r7, #12]
 8016970:	2202      	movs	r2, #2
 8016972:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c

    /* Send SDRAM command */
    (void)FMC_SDRAM_SendCommand(hsdram->Instance, Command, Timeout);
 8016976:	68fb      	ldr	r3, [r7, #12]
 8016978:	681b      	ldr	r3, [r3, #0]
 801697a:	687a      	ldr	r2, [r7, #4]
 801697c:	68b9      	ldr	r1, [r7, #8]
 801697e:	4618      	mov	r0, r3
 8016980:	f000 fbf4 	bl	801716c <FMC_SDRAM_SendCommand>

    /* Update the SDRAM controller state state */
    if (Command->CommandMode == FMC_SDRAM_CMD_PALL)
 8016984:	68bb      	ldr	r3, [r7, #8]
 8016986:	681b      	ldr	r3, [r3, #0]
 8016988:	2b02      	cmp	r3, #2
 801698a:	d104      	bne.n	8016996 <HAL_SDRAM_SendCommand+0x52>
    {
      hsdram->State = HAL_SDRAM_STATE_PRECHARGED;
 801698c:	68fb      	ldr	r3, [r7, #12]
 801698e:	2205      	movs	r2, #5
 8016990:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c
    if (Command->CommandMode == FMC_SDRAM_CMD_PALL)
 8016994:	e006      	b.n	80169a4 <HAL_SDRAM_SendCommand+0x60>
    }
    else
    {
      hsdram->State = HAL_SDRAM_STATE_READY;
 8016996:	68fb      	ldr	r3, [r7, #12]
 8016998:	2201      	movs	r2, #1
 801699a:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c
    if (Command->CommandMode == FMC_SDRAM_CMD_PALL)
 801699e:	e001      	b.n	80169a4 <HAL_SDRAM_SendCommand+0x60>
    }
  }
  else
  {
    return HAL_ERROR;
 80169a0:	2301      	movs	r3, #1
 80169a2:	e000      	b.n	80169a6 <HAL_SDRAM_SendCommand+0x62>
  }

  return HAL_OK;
 80169a4:	2300      	movs	r3, #0
}
 80169a6:	4618      	mov	r0, r3
 80169a8:	3718      	adds	r7, #24
 80169aa:	46bd      	mov	sp, r7
 80169ac:	bd80      	pop	{r7, pc}

080169ae <HAL_SDRAM_ProgramRefreshRate>:
  *                the configuration information for SDRAM module.
  * @param  RefreshRate The SDRAM refresh rate value
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_ProgramRefreshRate(SDRAM_HandleTypeDef *hsdram, uint32_t RefreshRate)
{
 80169ae:	b580      	push	{r7, lr}
 80169b0:	b082      	sub	sp, #8
 80169b2:	af00      	add	r7, sp, #0
 80169b4:	6078      	str	r0, [r7, #4]
 80169b6:	6039      	str	r1, [r7, #0]
  /* Check the SDRAM controller state */
  if (hsdram->State == HAL_SDRAM_STATE_BUSY)
 80169b8:	687b      	ldr	r3, [r7, #4]
 80169ba:	f893 302c 	ldrb.w	r3, [r3, #44]	@ 0x2c
 80169be:	b2db      	uxtb	r3, r3
 80169c0:	2b02      	cmp	r3, #2
 80169c2:	d101      	bne.n	80169c8 <HAL_SDRAM_ProgramRefreshRate+0x1a>
  {
    return HAL_BUSY;
 80169c4:	2302      	movs	r3, #2
 80169c6:	e016      	b.n	80169f6 <HAL_SDRAM_ProgramRefreshRate+0x48>
  }
  else if (hsdram->State == HAL_SDRAM_STATE_READY)
 80169c8:	687b      	ldr	r3, [r7, #4]
 80169ca:	f893 302c 	ldrb.w	r3, [r3, #44]	@ 0x2c
 80169ce:	b2db      	uxtb	r3, r3
 80169d0:	2b01      	cmp	r3, #1
 80169d2:	d10f      	bne.n	80169f4 <HAL_SDRAM_ProgramRefreshRate+0x46>
  {
    /* Update the SDRAM state */
    hsdram->State = HAL_SDRAM_STATE_BUSY;
 80169d4:	687b      	ldr	r3, [r7, #4]
 80169d6:	2202      	movs	r2, #2
 80169d8:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c

    /* Program the refresh rate */
    (void)FMC_SDRAM_ProgramRefreshRate(hsdram->Instance, RefreshRate);
 80169dc:	687b      	ldr	r3, [r7, #4]
 80169de:	681b      	ldr	r3, [r3, #0]
 80169e0:	6839      	ldr	r1, [r7, #0]
 80169e2:	4618      	mov	r0, r3
 80169e4:	f000 fbe6 	bl	80171b4 <FMC_SDRAM_ProgramRefreshRate>

    /* Update the SDRAM state */
    hsdram->State = HAL_SDRAM_STATE_READY;
 80169e8:	687b      	ldr	r3, [r7, #4]
 80169ea:	2201      	movs	r2, #1
 80169ec:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c
  else
  {
    return HAL_ERROR;
  }

  return HAL_OK;
 80169f0:	2300      	movs	r3, #0
 80169f2:	e000      	b.n	80169f6 <HAL_SDRAM_ProgramRefreshRate+0x48>
    return HAL_ERROR;
 80169f4:	2301      	movs	r3, #1
}
 80169f6:	4618      	mov	r0, r3
 80169f8:	3708      	adds	r7, #8
 80169fa:	46bd      	mov	sp, r7
 80169fc:	bd80      	pop	{r7, pc}

080169fe <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80169fe:	b580      	push	{r7, lr}
 8016a00:	b082      	sub	sp, #8
 8016a02:	af00      	add	r7, sp, #0
 8016a04:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8016a06:	687b      	ldr	r3, [r7, #4]
 8016a08:	2b00      	cmp	r3, #0
 8016a0a:	d101      	bne.n	8016a10 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8016a0c:	2301      	movs	r3, #1
 8016a0e:	e049      	b.n	8016aa4 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8016a10:	687b      	ldr	r3, [r7, #4]
 8016a12:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8016a16:	b2db      	uxtb	r3, r3
 8016a18:	2b00      	cmp	r3, #0
 8016a1a:	d106      	bne.n	8016a2a <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8016a1c:	687b      	ldr	r3, [r7, #4]
 8016a1e:	2200      	movs	r2, #0
 8016a20:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8016a24:	6878      	ldr	r0, [r7, #4]
 8016a26:	f7ea fc4b 	bl	80012c0 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8016a2a:	687b      	ldr	r3, [r7, #4]
 8016a2c:	2202      	movs	r2, #2
 8016a2e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8016a32:	687b      	ldr	r3, [r7, #4]
 8016a34:	681a      	ldr	r2, [r3, #0]
 8016a36:	687b      	ldr	r3, [r7, #4]
 8016a38:	3304      	adds	r3, #4
 8016a3a:	4619      	mov	r1, r3
 8016a3c:	4610      	mov	r0, r2
 8016a3e:	f000 f9f5 	bl	8016e2c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8016a42:	687b      	ldr	r3, [r7, #4]
 8016a44:	2201      	movs	r2, #1
 8016a46:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8016a4a:	687b      	ldr	r3, [r7, #4]
 8016a4c:	2201      	movs	r2, #1
 8016a4e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8016a52:	687b      	ldr	r3, [r7, #4]
 8016a54:	2201      	movs	r2, #1
 8016a56:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8016a5a:	687b      	ldr	r3, [r7, #4]
 8016a5c:	2201      	movs	r2, #1
 8016a5e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8016a62:	687b      	ldr	r3, [r7, #4]
 8016a64:	2201      	movs	r2, #1
 8016a66:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8016a6a:	687b      	ldr	r3, [r7, #4]
 8016a6c:	2201      	movs	r2, #1
 8016a6e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8016a72:	687b      	ldr	r3, [r7, #4]
 8016a74:	2201      	movs	r2, #1
 8016a76:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8016a7a:	687b      	ldr	r3, [r7, #4]
 8016a7c:	2201      	movs	r2, #1
 8016a7e:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8016a82:	687b      	ldr	r3, [r7, #4]
 8016a84:	2201      	movs	r2, #1
 8016a86:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8016a8a:	687b      	ldr	r3, [r7, #4]
 8016a8c:	2201      	movs	r2, #1
 8016a8e:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8016a92:	687b      	ldr	r3, [r7, #4]
 8016a94:	2201      	movs	r2, #1
 8016a96:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8016a9a:	687b      	ldr	r3, [r7, #4]
 8016a9c:	2201      	movs	r2, #1
 8016a9e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8016aa2:	2300      	movs	r3, #0
}
 8016aa4:	4618      	mov	r0, r3
 8016aa6:	3708      	adds	r7, #8
 8016aa8:	46bd      	mov	sp, r7
 8016aaa:	bd80      	pop	{r7, pc}

08016aac <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8016aac:	b480      	push	{r7}
 8016aae:	b085      	sub	sp, #20
 8016ab0:	af00      	add	r7, sp, #0
 8016ab2:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8016ab4:	687b      	ldr	r3, [r7, #4]
 8016ab6:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8016aba:	b2db      	uxtb	r3, r3
 8016abc:	2b01      	cmp	r3, #1
 8016abe:	d001      	beq.n	8016ac4 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8016ac0:	2301      	movs	r3, #1
 8016ac2:	e054      	b.n	8016b6e <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8016ac4:	687b      	ldr	r3, [r7, #4]
 8016ac6:	2202      	movs	r2, #2
 8016ac8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8016acc:	687b      	ldr	r3, [r7, #4]
 8016ace:	681b      	ldr	r3, [r3, #0]
 8016ad0:	68da      	ldr	r2, [r3, #12]
 8016ad2:	687b      	ldr	r3, [r7, #4]
 8016ad4:	681b      	ldr	r3, [r3, #0]
 8016ad6:	f042 0201 	orr.w	r2, r2, #1
 8016ada:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8016adc:	687b      	ldr	r3, [r7, #4]
 8016ade:	681b      	ldr	r3, [r3, #0]
 8016ae0:	4a26      	ldr	r2, [pc, #152]	@ (8016b7c <HAL_TIM_Base_Start_IT+0xd0>)
 8016ae2:	4293      	cmp	r3, r2
 8016ae4:	d022      	beq.n	8016b2c <HAL_TIM_Base_Start_IT+0x80>
 8016ae6:	687b      	ldr	r3, [r7, #4]
 8016ae8:	681b      	ldr	r3, [r3, #0]
 8016aea:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8016aee:	d01d      	beq.n	8016b2c <HAL_TIM_Base_Start_IT+0x80>
 8016af0:	687b      	ldr	r3, [r7, #4]
 8016af2:	681b      	ldr	r3, [r3, #0]
 8016af4:	4a22      	ldr	r2, [pc, #136]	@ (8016b80 <HAL_TIM_Base_Start_IT+0xd4>)
 8016af6:	4293      	cmp	r3, r2
 8016af8:	d018      	beq.n	8016b2c <HAL_TIM_Base_Start_IT+0x80>
 8016afa:	687b      	ldr	r3, [r7, #4]
 8016afc:	681b      	ldr	r3, [r3, #0]
 8016afe:	4a21      	ldr	r2, [pc, #132]	@ (8016b84 <HAL_TIM_Base_Start_IT+0xd8>)
 8016b00:	4293      	cmp	r3, r2
 8016b02:	d013      	beq.n	8016b2c <HAL_TIM_Base_Start_IT+0x80>
 8016b04:	687b      	ldr	r3, [r7, #4]
 8016b06:	681b      	ldr	r3, [r3, #0]
 8016b08:	4a1f      	ldr	r2, [pc, #124]	@ (8016b88 <HAL_TIM_Base_Start_IT+0xdc>)
 8016b0a:	4293      	cmp	r3, r2
 8016b0c:	d00e      	beq.n	8016b2c <HAL_TIM_Base_Start_IT+0x80>
 8016b0e:	687b      	ldr	r3, [r7, #4]
 8016b10:	681b      	ldr	r3, [r3, #0]
 8016b12:	4a1e      	ldr	r2, [pc, #120]	@ (8016b8c <HAL_TIM_Base_Start_IT+0xe0>)
 8016b14:	4293      	cmp	r3, r2
 8016b16:	d009      	beq.n	8016b2c <HAL_TIM_Base_Start_IT+0x80>
 8016b18:	687b      	ldr	r3, [r7, #4]
 8016b1a:	681b      	ldr	r3, [r3, #0]
 8016b1c:	4a1c      	ldr	r2, [pc, #112]	@ (8016b90 <HAL_TIM_Base_Start_IT+0xe4>)
 8016b1e:	4293      	cmp	r3, r2
 8016b20:	d004      	beq.n	8016b2c <HAL_TIM_Base_Start_IT+0x80>
 8016b22:	687b      	ldr	r3, [r7, #4]
 8016b24:	681b      	ldr	r3, [r3, #0]
 8016b26:	4a1b      	ldr	r2, [pc, #108]	@ (8016b94 <HAL_TIM_Base_Start_IT+0xe8>)
 8016b28:	4293      	cmp	r3, r2
 8016b2a:	d115      	bne.n	8016b58 <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8016b2c:	687b      	ldr	r3, [r7, #4]
 8016b2e:	681b      	ldr	r3, [r3, #0]
 8016b30:	689a      	ldr	r2, [r3, #8]
 8016b32:	4b19      	ldr	r3, [pc, #100]	@ (8016b98 <HAL_TIM_Base_Start_IT+0xec>)
 8016b34:	4013      	ands	r3, r2
 8016b36:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8016b38:	68fb      	ldr	r3, [r7, #12]
 8016b3a:	2b06      	cmp	r3, #6
 8016b3c:	d015      	beq.n	8016b6a <HAL_TIM_Base_Start_IT+0xbe>
 8016b3e:	68fb      	ldr	r3, [r7, #12]
 8016b40:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8016b44:	d011      	beq.n	8016b6a <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 8016b46:	687b      	ldr	r3, [r7, #4]
 8016b48:	681b      	ldr	r3, [r3, #0]
 8016b4a:	681a      	ldr	r2, [r3, #0]
 8016b4c:	687b      	ldr	r3, [r7, #4]
 8016b4e:	681b      	ldr	r3, [r3, #0]
 8016b50:	f042 0201 	orr.w	r2, r2, #1
 8016b54:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8016b56:	e008      	b.n	8016b6a <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8016b58:	687b      	ldr	r3, [r7, #4]
 8016b5a:	681b      	ldr	r3, [r3, #0]
 8016b5c:	681a      	ldr	r2, [r3, #0]
 8016b5e:	687b      	ldr	r3, [r7, #4]
 8016b60:	681b      	ldr	r3, [r3, #0]
 8016b62:	f042 0201 	orr.w	r2, r2, #1
 8016b66:	601a      	str	r2, [r3, #0]
 8016b68:	e000      	b.n	8016b6c <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8016b6a:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8016b6c:	2300      	movs	r3, #0
}
 8016b6e:	4618      	mov	r0, r3
 8016b70:	3714      	adds	r7, #20
 8016b72:	46bd      	mov	sp, r7
 8016b74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016b78:	4770      	bx	lr
 8016b7a:	bf00      	nop
 8016b7c:	40010000 	.word	0x40010000
 8016b80:	40000400 	.word	0x40000400
 8016b84:	40000800 	.word	0x40000800
 8016b88:	40000c00 	.word	0x40000c00
 8016b8c:	40010400 	.word	0x40010400
 8016b90:	40001800 	.word	0x40001800
 8016b94:	40014000 	.word	0x40014000
 8016b98:	00010007 	.word	0x00010007

08016b9c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8016b9c:	b580      	push	{r7, lr}
 8016b9e:	b082      	sub	sp, #8
 8016ba0:	af00      	add	r7, sp, #0
 8016ba2:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8016ba4:	687b      	ldr	r3, [r7, #4]
 8016ba6:	681b      	ldr	r3, [r3, #0]
 8016ba8:	691b      	ldr	r3, [r3, #16]
 8016baa:	f003 0302 	and.w	r3, r3, #2
 8016bae:	2b02      	cmp	r3, #2
 8016bb0:	d122      	bne.n	8016bf8 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8016bb2:	687b      	ldr	r3, [r7, #4]
 8016bb4:	681b      	ldr	r3, [r3, #0]
 8016bb6:	68db      	ldr	r3, [r3, #12]
 8016bb8:	f003 0302 	and.w	r3, r3, #2
 8016bbc:	2b02      	cmp	r3, #2
 8016bbe:	d11b      	bne.n	8016bf8 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8016bc0:	687b      	ldr	r3, [r7, #4]
 8016bc2:	681b      	ldr	r3, [r3, #0]
 8016bc4:	f06f 0202 	mvn.w	r2, #2
 8016bc8:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8016bca:	687b      	ldr	r3, [r7, #4]
 8016bcc:	2201      	movs	r2, #1
 8016bce:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8016bd0:	687b      	ldr	r3, [r7, #4]
 8016bd2:	681b      	ldr	r3, [r3, #0]
 8016bd4:	699b      	ldr	r3, [r3, #24]
 8016bd6:	f003 0303 	and.w	r3, r3, #3
 8016bda:	2b00      	cmp	r3, #0
 8016bdc:	d003      	beq.n	8016be6 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8016bde:	6878      	ldr	r0, [r7, #4]
 8016be0:	f000 f905 	bl	8016dee <HAL_TIM_IC_CaptureCallback>
 8016be4:	e005      	b.n	8016bf2 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8016be6:	6878      	ldr	r0, [r7, #4]
 8016be8:	f000 f8f7 	bl	8016dda <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8016bec:	6878      	ldr	r0, [r7, #4]
 8016bee:	f000 f908 	bl	8016e02 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8016bf2:	687b      	ldr	r3, [r7, #4]
 8016bf4:	2200      	movs	r2, #0
 8016bf6:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8016bf8:	687b      	ldr	r3, [r7, #4]
 8016bfa:	681b      	ldr	r3, [r3, #0]
 8016bfc:	691b      	ldr	r3, [r3, #16]
 8016bfe:	f003 0304 	and.w	r3, r3, #4
 8016c02:	2b04      	cmp	r3, #4
 8016c04:	d122      	bne.n	8016c4c <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8016c06:	687b      	ldr	r3, [r7, #4]
 8016c08:	681b      	ldr	r3, [r3, #0]
 8016c0a:	68db      	ldr	r3, [r3, #12]
 8016c0c:	f003 0304 	and.w	r3, r3, #4
 8016c10:	2b04      	cmp	r3, #4
 8016c12:	d11b      	bne.n	8016c4c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8016c14:	687b      	ldr	r3, [r7, #4]
 8016c16:	681b      	ldr	r3, [r3, #0]
 8016c18:	f06f 0204 	mvn.w	r2, #4
 8016c1c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8016c1e:	687b      	ldr	r3, [r7, #4]
 8016c20:	2202      	movs	r2, #2
 8016c22:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8016c24:	687b      	ldr	r3, [r7, #4]
 8016c26:	681b      	ldr	r3, [r3, #0]
 8016c28:	699b      	ldr	r3, [r3, #24]
 8016c2a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8016c2e:	2b00      	cmp	r3, #0
 8016c30:	d003      	beq.n	8016c3a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8016c32:	6878      	ldr	r0, [r7, #4]
 8016c34:	f000 f8db 	bl	8016dee <HAL_TIM_IC_CaptureCallback>
 8016c38:	e005      	b.n	8016c46 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8016c3a:	6878      	ldr	r0, [r7, #4]
 8016c3c:	f000 f8cd 	bl	8016dda <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8016c40:	6878      	ldr	r0, [r7, #4]
 8016c42:	f000 f8de 	bl	8016e02 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8016c46:	687b      	ldr	r3, [r7, #4]
 8016c48:	2200      	movs	r2, #0
 8016c4a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8016c4c:	687b      	ldr	r3, [r7, #4]
 8016c4e:	681b      	ldr	r3, [r3, #0]
 8016c50:	691b      	ldr	r3, [r3, #16]
 8016c52:	f003 0308 	and.w	r3, r3, #8
 8016c56:	2b08      	cmp	r3, #8
 8016c58:	d122      	bne.n	8016ca0 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8016c5a:	687b      	ldr	r3, [r7, #4]
 8016c5c:	681b      	ldr	r3, [r3, #0]
 8016c5e:	68db      	ldr	r3, [r3, #12]
 8016c60:	f003 0308 	and.w	r3, r3, #8
 8016c64:	2b08      	cmp	r3, #8
 8016c66:	d11b      	bne.n	8016ca0 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8016c68:	687b      	ldr	r3, [r7, #4]
 8016c6a:	681b      	ldr	r3, [r3, #0]
 8016c6c:	f06f 0208 	mvn.w	r2, #8
 8016c70:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8016c72:	687b      	ldr	r3, [r7, #4]
 8016c74:	2204      	movs	r2, #4
 8016c76:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8016c78:	687b      	ldr	r3, [r7, #4]
 8016c7a:	681b      	ldr	r3, [r3, #0]
 8016c7c:	69db      	ldr	r3, [r3, #28]
 8016c7e:	f003 0303 	and.w	r3, r3, #3
 8016c82:	2b00      	cmp	r3, #0
 8016c84:	d003      	beq.n	8016c8e <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8016c86:	6878      	ldr	r0, [r7, #4]
 8016c88:	f000 f8b1 	bl	8016dee <HAL_TIM_IC_CaptureCallback>
 8016c8c:	e005      	b.n	8016c9a <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8016c8e:	6878      	ldr	r0, [r7, #4]
 8016c90:	f000 f8a3 	bl	8016dda <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8016c94:	6878      	ldr	r0, [r7, #4]
 8016c96:	f000 f8b4 	bl	8016e02 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8016c9a:	687b      	ldr	r3, [r7, #4]
 8016c9c:	2200      	movs	r2, #0
 8016c9e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8016ca0:	687b      	ldr	r3, [r7, #4]
 8016ca2:	681b      	ldr	r3, [r3, #0]
 8016ca4:	691b      	ldr	r3, [r3, #16]
 8016ca6:	f003 0310 	and.w	r3, r3, #16
 8016caa:	2b10      	cmp	r3, #16
 8016cac:	d122      	bne.n	8016cf4 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8016cae:	687b      	ldr	r3, [r7, #4]
 8016cb0:	681b      	ldr	r3, [r3, #0]
 8016cb2:	68db      	ldr	r3, [r3, #12]
 8016cb4:	f003 0310 	and.w	r3, r3, #16
 8016cb8:	2b10      	cmp	r3, #16
 8016cba:	d11b      	bne.n	8016cf4 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8016cbc:	687b      	ldr	r3, [r7, #4]
 8016cbe:	681b      	ldr	r3, [r3, #0]
 8016cc0:	f06f 0210 	mvn.w	r2, #16
 8016cc4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8016cc6:	687b      	ldr	r3, [r7, #4]
 8016cc8:	2208      	movs	r2, #8
 8016cca:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8016ccc:	687b      	ldr	r3, [r7, #4]
 8016cce:	681b      	ldr	r3, [r3, #0]
 8016cd0:	69db      	ldr	r3, [r3, #28]
 8016cd2:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8016cd6:	2b00      	cmp	r3, #0
 8016cd8:	d003      	beq.n	8016ce2 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8016cda:	6878      	ldr	r0, [r7, #4]
 8016cdc:	f000 f887 	bl	8016dee <HAL_TIM_IC_CaptureCallback>
 8016ce0:	e005      	b.n	8016cee <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8016ce2:	6878      	ldr	r0, [r7, #4]
 8016ce4:	f000 f879 	bl	8016dda <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8016ce8:	6878      	ldr	r0, [r7, #4]
 8016cea:	f000 f88a 	bl	8016e02 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8016cee:	687b      	ldr	r3, [r7, #4]
 8016cf0:	2200      	movs	r2, #0
 8016cf2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8016cf4:	687b      	ldr	r3, [r7, #4]
 8016cf6:	681b      	ldr	r3, [r3, #0]
 8016cf8:	691b      	ldr	r3, [r3, #16]
 8016cfa:	f003 0301 	and.w	r3, r3, #1
 8016cfe:	2b01      	cmp	r3, #1
 8016d00:	d10e      	bne.n	8016d20 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8016d02:	687b      	ldr	r3, [r7, #4]
 8016d04:	681b      	ldr	r3, [r3, #0]
 8016d06:	68db      	ldr	r3, [r3, #12]
 8016d08:	f003 0301 	and.w	r3, r3, #1
 8016d0c:	2b01      	cmp	r3, #1
 8016d0e:	d107      	bne.n	8016d20 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8016d10:	687b      	ldr	r3, [r7, #4]
 8016d12:	681b      	ldr	r3, [r3, #0]
 8016d14:	f06f 0201 	mvn.w	r2, #1
 8016d18:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8016d1a:	6878      	ldr	r0, [r7, #4]
 8016d1c:	f7e9 ffa4 	bl	8000c68 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8016d20:	687b      	ldr	r3, [r7, #4]
 8016d22:	681b      	ldr	r3, [r3, #0]
 8016d24:	691b      	ldr	r3, [r3, #16]
 8016d26:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8016d2a:	2b80      	cmp	r3, #128	@ 0x80
 8016d2c:	d10e      	bne.n	8016d4c <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8016d2e:	687b      	ldr	r3, [r7, #4]
 8016d30:	681b      	ldr	r3, [r3, #0]
 8016d32:	68db      	ldr	r3, [r3, #12]
 8016d34:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8016d38:	2b80      	cmp	r3, #128	@ 0x80
 8016d3a:	d107      	bne.n	8016d4c <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8016d3c:	687b      	ldr	r3, [r7, #4]
 8016d3e:	681b      	ldr	r3, [r3, #0]
 8016d40:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 8016d44:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8016d46:	6878      	ldr	r0, [r7, #4]
 8016d48:	f000 f914 	bl	8016f74 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8016d4c:	687b      	ldr	r3, [r7, #4]
 8016d4e:	681b      	ldr	r3, [r3, #0]
 8016d50:	691b      	ldr	r3, [r3, #16]
 8016d52:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8016d56:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8016d5a:	d10e      	bne.n	8016d7a <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8016d5c:	687b      	ldr	r3, [r7, #4]
 8016d5e:	681b      	ldr	r3, [r3, #0]
 8016d60:	68db      	ldr	r3, [r3, #12]
 8016d62:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8016d66:	2b80      	cmp	r3, #128	@ 0x80
 8016d68:	d107      	bne.n	8016d7a <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8016d6a:	687b      	ldr	r3, [r7, #4]
 8016d6c:	681b      	ldr	r3, [r3, #0]
 8016d6e:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 8016d72:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8016d74:	6878      	ldr	r0, [r7, #4]
 8016d76:	f000 f907 	bl	8016f88 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8016d7a:	687b      	ldr	r3, [r7, #4]
 8016d7c:	681b      	ldr	r3, [r3, #0]
 8016d7e:	691b      	ldr	r3, [r3, #16]
 8016d80:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8016d84:	2b40      	cmp	r3, #64	@ 0x40
 8016d86:	d10e      	bne.n	8016da6 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8016d88:	687b      	ldr	r3, [r7, #4]
 8016d8a:	681b      	ldr	r3, [r3, #0]
 8016d8c:	68db      	ldr	r3, [r3, #12]
 8016d8e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8016d92:	2b40      	cmp	r3, #64	@ 0x40
 8016d94:	d107      	bne.n	8016da6 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8016d96:	687b      	ldr	r3, [r7, #4]
 8016d98:	681b      	ldr	r3, [r3, #0]
 8016d9a:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8016d9e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8016da0:	6878      	ldr	r0, [r7, #4]
 8016da2:	f000 f838 	bl	8016e16 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8016da6:	687b      	ldr	r3, [r7, #4]
 8016da8:	681b      	ldr	r3, [r3, #0]
 8016daa:	691b      	ldr	r3, [r3, #16]
 8016dac:	f003 0320 	and.w	r3, r3, #32
 8016db0:	2b20      	cmp	r3, #32
 8016db2:	d10e      	bne.n	8016dd2 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8016db4:	687b      	ldr	r3, [r7, #4]
 8016db6:	681b      	ldr	r3, [r3, #0]
 8016db8:	68db      	ldr	r3, [r3, #12]
 8016dba:	f003 0320 	and.w	r3, r3, #32
 8016dbe:	2b20      	cmp	r3, #32
 8016dc0:	d107      	bne.n	8016dd2 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8016dc2:	687b      	ldr	r3, [r7, #4]
 8016dc4:	681b      	ldr	r3, [r3, #0]
 8016dc6:	f06f 0220 	mvn.w	r2, #32
 8016dca:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8016dcc:	6878      	ldr	r0, [r7, #4]
 8016dce:	f000 f8c7 	bl	8016f60 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8016dd2:	bf00      	nop
 8016dd4:	3708      	adds	r7, #8
 8016dd6:	46bd      	mov	sp, r7
 8016dd8:	bd80      	pop	{r7, pc}

08016dda <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8016dda:	b480      	push	{r7}
 8016ddc:	b083      	sub	sp, #12
 8016dde:	af00      	add	r7, sp, #0
 8016de0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8016de2:	bf00      	nop
 8016de4:	370c      	adds	r7, #12
 8016de6:	46bd      	mov	sp, r7
 8016de8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016dec:	4770      	bx	lr

08016dee <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8016dee:	b480      	push	{r7}
 8016df0:	b083      	sub	sp, #12
 8016df2:	af00      	add	r7, sp, #0
 8016df4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8016df6:	bf00      	nop
 8016df8:	370c      	adds	r7, #12
 8016dfa:	46bd      	mov	sp, r7
 8016dfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016e00:	4770      	bx	lr

08016e02 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8016e02:	b480      	push	{r7}
 8016e04:	b083      	sub	sp, #12
 8016e06:	af00      	add	r7, sp, #0
 8016e08:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8016e0a:	bf00      	nop
 8016e0c:	370c      	adds	r7, #12
 8016e0e:	46bd      	mov	sp, r7
 8016e10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016e14:	4770      	bx	lr

08016e16 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8016e16:	b480      	push	{r7}
 8016e18:	b083      	sub	sp, #12
 8016e1a:	af00      	add	r7, sp, #0
 8016e1c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8016e1e:	bf00      	nop
 8016e20:	370c      	adds	r7, #12
 8016e22:	46bd      	mov	sp, r7
 8016e24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016e28:	4770      	bx	lr
	...

08016e2c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8016e2c:	b480      	push	{r7}
 8016e2e:	b085      	sub	sp, #20
 8016e30:	af00      	add	r7, sp, #0
 8016e32:	6078      	str	r0, [r7, #4]
 8016e34:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8016e36:	687b      	ldr	r3, [r7, #4]
 8016e38:	681b      	ldr	r3, [r3, #0]
 8016e3a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8016e3c:	687b      	ldr	r3, [r7, #4]
 8016e3e:	4a40      	ldr	r2, [pc, #256]	@ (8016f40 <TIM_Base_SetConfig+0x114>)
 8016e40:	4293      	cmp	r3, r2
 8016e42:	d013      	beq.n	8016e6c <TIM_Base_SetConfig+0x40>
 8016e44:	687b      	ldr	r3, [r7, #4]
 8016e46:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8016e4a:	d00f      	beq.n	8016e6c <TIM_Base_SetConfig+0x40>
 8016e4c:	687b      	ldr	r3, [r7, #4]
 8016e4e:	4a3d      	ldr	r2, [pc, #244]	@ (8016f44 <TIM_Base_SetConfig+0x118>)
 8016e50:	4293      	cmp	r3, r2
 8016e52:	d00b      	beq.n	8016e6c <TIM_Base_SetConfig+0x40>
 8016e54:	687b      	ldr	r3, [r7, #4]
 8016e56:	4a3c      	ldr	r2, [pc, #240]	@ (8016f48 <TIM_Base_SetConfig+0x11c>)
 8016e58:	4293      	cmp	r3, r2
 8016e5a:	d007      	beq.n	8016e6c <TIM_Base_SetConfig+0x40>
 8016e5c:	687b      	ldr	r3, [r7, #4]
 8016e5e:	4a3b      	ldr	r2, [pc, #236]	@ (8016f4c <TIM_Base_SetConfig+0x120>)
 8016e60:	4293      	cmp	r3, r2
 8016e62:	d003      	beq.n	8016e6c <TIM_Base_SetConfig+0x40>
 8016e64:	687b      	ldr	r3, [r7, #4]
 8016e66:	4a3a      	ldr	r2, [pc, #232]	@ (8016f50 <TIM_Base_SetConfig+0x124>)
 8016e68:	4293      	cmp	r3, r2
 8016e6a:	d108      	bne.n	8016e7e <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8016e6c:	68fb      	ldr	r3, [r7, #12]
 8016e6e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8016e72:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8016e74:	683b      	ldr	r3, [r7, #0]
 8016e76:	685b      	ldr	r3, [r3, #4]
 8016e78:	68fa      	ldr	r2, [r7, #12]
 8016e7a:	4313      	orrs	r3, r2
 8016e7c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8016e7e:	687b      	ldr	r3, [r7, #4]
 8016e80:	4a2f      	ldr	r2, [pc, #188]	@ (8016f40 <TIM_Base_SetConfig+0x114>)
 8016e82:	4293      	cmp	r3, r2
 8016e84:	d01f      	beq.n	8016ec6 <TIM_Base_SetConfig+0x9a>
 8016e86:	687b      	ldr	r3, [r7, #4]
 8016e88:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8016e8c:	d01b      	beq.n	8016ec6 <TIM_Base_SetConfig+0x9a>
 8016e8e:	687b      	ldr	r3, [r7, #4]
 8016e90:	4a2c      	ldr	r2, [pc, #176]	@ (8016f44 <TIM_Base_SetConfig+0x118>)
 8016e92:	4293      	cmp	r3, r2
 8016e94:	d017      	beq.n	8016ec6 <TIM_Base_SetConfig+0x9a>
 8016e96:	687b      	ldr	r3, [r7, #4]
 8016e98:	4a2b      	ldr	r2, [pc, #172]	@ (8016f48 <TIM_Base_SetConfig+0x11c>)
 8016e9a:	4293      	cmp	r3, r2
 8016e9c:	d013      	beq.n	8016ec6 <TIM_Base_SetConfig+0x9a>
 8016e9e:	687b      	ldr	r3, [r7, #4]
 8016ea0:	4a2a      	ldr	r2, [pc, #168]	@ (8016f4c <TIM_Base_SetConfig+0x120>)
 8016ea2:	4293      	cmp	r3, r2
 8016ea4:	d00f      	beq.n	8016ec6 <TIM_Base_SetConfig+0x9a>
 8016ea6:	687b      	ldr	r3, [r7, #4]
 8016ea8:	4a29      	ldr	r2, [pc, #164]	@ (8016f50 <TIM_Base_SetConfig+0x124>)
 8016eaa:	4293      	cmp	r3, r2
 8016eac:	d00b      	beq.n	8016ec6 <TIM_Base_SetConfig+0x9a>
 8016eae:	687b      	ldr	r3, [r7, #4]
 8016eb0:	4a28      	ldr	r2, [pc, #160]	@ (8016f54 <TIM_Base_SetConfig+0x128>)
 8016eb2:	4293      	cmp	r3, r2
 8016eb4:	d007      	beq.n	8016ec6 <TIM_Base_SetConfig+0x9a>
 8016eb6:	687b      	ldr	r3, [r7, #4]
 8016eb8:	4a27      	ldr	r2, [pc, #156]	@ (8016f58 <TIM_Base_SetConfig+0x12c>)
 8016eba:	4293      	cmp	r3, r2
 8016ebc:	d003      	beq.n	8016ec6 <TIM_Base_SetConfig+0x9a>
 8016ebe:	687b      	ldr	r3, [r7, #4]
 8016ec0:	4a26      	ldr	r2, [pc, #152]	@ (8016f5c <TIM_Base_SetConfig+0x130>)
 8016ec2:	4293      	cmp	r3, r2
 8016ec4:	d108      	bne.n	8016ed8 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8016ec6:	68fb      	ldr	r3, [r7, #12]
 8016ec8:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8016ecc:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8016ece:	683b      	ldr	r3, [r7, #0]
 8016ed0:	68db      	ldr	r3, [r3, #12]
 8016ed2:	68fa      	ldr	r2, [r7, #12]
 8016ed4:	4313      	orrs	r3, r2
 8016ed6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8016ed8:	68fb      	ldr	r3, [r7, #12]
 8016eda:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8016ede:	683b      	ldr	r3, [r7, #0]
 8016ee0:	695b      	ldr	r3, [r3, #20]
 8016ee2:	4313      	orrs	r3, r2
 8016ee4:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8016ee6:	687b      	ldr	r3, [r7, #4]
 8016ee8:	68fa      	ldr	r2, [r7, #12]
 8016eea:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8016eec:	683b      	ldr	r3, [r7, #0]
 8016eee:	689a      	ldr	r2, [r3, #8]
 8016ef0:	687b      	ldr	r3, [r7, #4]
 8016ef2:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8016ef4:	683b      	ldr	r3, [r7, #0]
 8016ef6:	681a      	ldr	r2, [r3, #0]
 8016ef8:	687b      	ldr	r3, [r7, #4]
 8016efa:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8016efc:	687b      	ldr	r3, [r7, #4]
 8016efe:	4a10      	ldr	r2, [pc, #64]	@ (8016f40 <TIM_Base_SetConfig+0x114>)
 8016f00:	4293      	cmp	r3, r2
 8016f02:	d00f      	beq.n	8016f24 <TIM_Base_SetConfig+0xf8>
 8016f04:	687b      	ldr	r3, [r7, #4]
 8016f06:	4a12      	ldr	r2, [pc, #72]	@ (8016f50 <TIM_Base_SetConfig+0x124>)
 8016f08:	4293      	cmp	r3, r2
 8016f0a:	d00b      	beq.n	8016f24 <TIM_Base_SetConfig+0xf8>
 8016f0c:	687b      	ldr	r3, [r7, #4]
 8016f0e:	4a11      	ldr	r2, [pc, #68]	@ (8016f54 <TIM_Base_SetConfig+0x128>)
 8016f10:	4293      	cmp	r3, r2
 8016f12:	d007      	beq.n	8016f24 <TIM_Base_SetConfig+0xf8>
 8016f14:	687b      	ldr	r3, [r7, #4]
 8016f16:	4a10      	ldr	r2, [pc, #64]	@ (8016f58 <TIM_Base_SetConfig+0x12c>)
 8016f18:	4293      	cmp	r3, r2
 8016f1a:	d003      	beq.n	8016f24 <TIM_Base_SetConfig+0xf8>
 8016f1c:	687b      	ldr	r3, [r7, #4]
 8016f1e:	4a0f      	ldr	r2, [pc, #60]	@ (8016f5c <TIM_Base_SetConfig+0x130>)
 8016f20:	4293      	cmp	r3, r2
 8016f22:	d103      	bne.n	8016f2c <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8016f24:	683b      	ldr	r3, [r7, #0]
 8016f26:	691a      	ldr	r2, [r3, #16]
 8016f28:	687b      	ldr	r3, [r7, #4]
 8016f2a:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8016f2c:	687b      	ldr	r3, [r7, #4]
 8016f2e:	2201      	movs	r2, #1
 8016f30:	615a      	str	r2, [r3, #20]
}
 8016f32:	bf00      	nop
 8016f34:	3714      	adds	r7, #20
 8016f36:	46bd      	mov	sp, r7
 8016f38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016f3c:	4770      	bx	lr
 8016f3e:	bf00      	nop
 8016f40:	40010000 	.word	0x40010000
 8016f44:	40000400 	.word	0x40000400
 8016f48:	40000800 	.word	0x40000800
 8016f4c:	40000c00 	.word	0x40000c00
 8016f50:	40010400 	.word	0x40010400
 8016f54:	40014000 	.word	0x40014000
 8016f58:	40014400 	.word	0x40014400
 8016f5c:	40014800 	.word	0x40014800

08016f60 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8016f60:	b480      	push	{r7}
 8016f62:	b083      	sub	sp, #12
 8016f64:	af00      	add	r7, sp, #0
 8016f66:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8016f68:	bf00      	nop
 8016f6a:	370c      	adds	r7, #12
 8016f6c:	46bd      	mov	sp, r7
 8016f6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016f72:	4770      	bx	lr

08016f74 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8016f74:	b480      	push	{r7}
 8016f76:	b083      	sub	sp, #12
 8016f78:	af00      	add	r7, sp, #0
 8016f7a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8016f7c:	bf00      	nop
 8016f7e:	370c      	adds	r7, #12
 8016f80:	46bd      	mov	sp, r7
 8016f82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016f86:	4770      	bx	lr

08016f88 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8016f88:	b480      	push	{r7}
 8016f8a:	b083      	sub	sp, #12
 8016f8c:	af00      	add	r7, sp, #0
 8016f8e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8016f90:	bf00      	nop
 8016f92:	370c      	adds	r7, #12
 8016f94:	46bd      	mov	sp, r7
 8016f96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016f9a:	4770      	bx	lr

08016f9c <FMC_SDRAM_Init>:
  * @param  Device Pointer to SDRAM device instance
  * @param  Init Pointer to SDRAM Initialization structure
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_SDRAM_Init(FMC_SDRAM_TypeDef *Device, FMC_SDRAM_InitTypeDef *Init)
{
 8016f9c:	b480      	push	{r7}
 8016f9e:	b083      	sub	sp, #12
 8016fa0:	af00      	add	r7, sp, #0
 8016fa2:	6078      	str	r0, [r7, #4]
 8016fa4:	6039      	str	r1, [r7, #0]
  assert_param(IS_FMC_SDCLOCK_PERIOD(Init->SDClockPeriod));
  assert_param(IS_FMC_READ_BURST(Init->ReadBurst));
  assert_param(IS_FMC_READPIPE_DELAY(Init->ReadPipeDelay));

  /* Set SDRAM bank configuration parameters */
  if (Init->SDBank == FMC_SDRAM_BANK1)
 8016fa6:	683b      	ldr	r3, [r7, #0]
 8016fa8:	681b      	ldr	r3, [r3, #0]
 8016faa:	2b00      	cmp	r3, #0
 8016fac:	d121      	bne.n	8016ff2 <FMC_SDRAM_Init+0x56>
  {
    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK1],
 8016fae:	687b      	ldr	r3, [r7, #4]
 8016fb0:	681a      	ldr	r2, [r3, #0]
 8016fb2:	4b27      	ldr	r3, [pc, #156]	@ (8017050 <FMC_SDRAM_Init+0xb4>)
 8016fb4:	4013      	ands	r3, r2
 8016fb6:	683a      	ldr	r2, [r7, #0]
 8016fb8:	6851      	ldr	r1, [r2, #4]
 8016fba:	683a      	ldr	r2, [r7, #0]
 8016fbc:	6892      	ldr	r2, [r2, #8]
 8016fbe:	4311      	orrs	r1, r2
 8016fc0:	683a      	ldr	r2, [r7, #0]
 8016fc2:	68d2      	ldr	r2, [r2, #12]
 8016fc4:	4311      	orrs	r1, r2
 8016fc6:	683a      	ldr	r2, [r7, #0]
 8016fc8:	6912      	ldr	r2, [r2, #16]
 8016fca:	4311      	orrs	r1, r2
 8016fcc:	683a      	ldr	r2, [r7, #0]
 8016fce:	6952      	ldr	r2, [r2, #20]
 8016fd0:	4311      	orrs	r1, r2
 8016fd2:	683a      	ldr	r2, [r7, #0]
 8016fd4:	6992      	ldr	r2, [r2, #24]
 8016fd6:	4311      	orrs	r1, r2
 8016fd8:	683a      	ldr	r2, [r7, #0]
 8016fda:	69d2      	ldr	r2, [r2, #28]
 8016fdc:	4311      	orrs	r1, r2
 8016fde:	683a      	ldr	r2, [r7, #0]
 8016fe0:	6a12      	ldr	r2, [r2, #32]
 8016fe2:	4311      	orrs	r1, r2
 8016fe4:	683a      	ldr	r2, [r7, #0]
 8016fe6:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8016fe8:	430a      	orrs	r2, r1
 8016fea:	431a      	orrs	r2, r3
 8016fec:	687b      	ldr	r3, [r7, #4]
 8016fee:	601a      	str	r2, [r3, #0]
 8016ff0:	e026      	b.n	8017040 <FMC_SDRAM_Init+0xa4>
                Init->ReadBurst          |
                Init->ReadPipeDelay));
  }
  else /* FMC_Bank2_SDRAM */
  {
    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK1],
 8016ff2:	687b      	ldr	r3, [r7, #4]
 8016ff4:	681b      	ldr	r3, [r3, #0]
 8016ff6:	f423 42f8 	bic.w	r2, r3, #31744	@ 0x7c00
 8016ffa:	683b      	ldr	r3, [r7, #0]
 8016ffc:	69d9      	ldr	r1, [r3, #28]
 8016ffe:	683b      	ldr	r3, [r7, #0]
 8017000:	6a1b      	ldr	r3, [r3, #32]
 8017002:	4319      	orrs	r1, r3
 8017004:	683b      	ldr	r3, [r7, #0]
 8017006:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8017008:	430b      	orrs	r3, r1
 801700a:	431a      	orrs	r2, r3
 801700c:	687b      	ldr	r3, [r7, #4]
 801700e:	601a      	str	r2, [r3, #0]
               FMC_SDCRx_RPIPE,
               (Init->SDClockPeriod      |
                Init->ReadBurst          |
                Init->ReadPipeDelay));

    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK2],
 8017010:	687b      	ldr	r3, [r7, #4]
 8017012:	685a      	ldr	r2, [r3, #4]
 8017014:	4b0e      	ldr	r3, [pc, #56]	@ (8017050 <FMC_SDRAM_Init+0xb4>)
 8017016:	4013      	ands	r3, r2
 8017018:	683a      	ldr	r2, [r7, #0]
 801701a:	6851      	ldr	r1, [r2, #4]
 801701c:	683a      	ldr	r2, [r7, #0]
 801701e:	6892      	ldr	r2, [r2, #8]
 8017020:	4311      	orrs	r1, r2
 8017022:	683a      	ldr	r2, [r7, #0]
 8017024:	68d2      	ldr	r2, [r2, #12]
 8017026:	4311      	orrs	r1, r2
 8017028:	683a      	ldr	r2, [r7, #0]
 801702a:	6912      	ldr	r2, [r2, #16]
 801702c:	4311      	orrs	r1, r2
 801702e:	683a      	ldr	r2, [r7, #0]
 8017030:	6952      	ldr	r2, [r2, #20]
 8017032:	4311      	orrs	r1, r2
 8017034:	683a      	ldr	r2, [r7, #0]
 8017036:	6992      	ldr	r2, [r2, #24]
 8017038:	430a      	orrs	r2, r1
 801703a:	431a      	orrs	r2, r3
 801703c:	687b      	ldr	r3, [r7, #4]
 801703e:	605a      	str	r2, [r3, #4]
                Init->InternalBankNumber |
                Init->CASLatency         |
                Init->WriteProtection));
  }

  return HAL_OK;
 8017040:	2300      	movs	r3, #0
}
 8017042:	4618      	mov	r0, r3
 8017044:	370c      	adds	r7, #12
 8017046:	46bd      	mov	sp, r7
 8017048:	f85d 7b04 	ldr.w	r7, [sp], #4
 801704c:	4770      	bx	lr
 801704e:	bf00      	nop
 8017050:	ffff8000 	.word	0xffff8000

08017054 <FMC_SDRAM_Timing_Init>:
  * @param  Bank SDRAM bank number
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_SDRAM_Timing_Init(FMC_SDRAM_TypeDef *Device,
                                        FMC_SDRAM_TimingTypeDef *Timing, uint32_t Bank)
{
 8017054:	b480      	push	{r7}
 8017056:	b085      	sub	sp, #20
 8017058:	af00      	add	r7, sp, #0
 801705a:	60f8      	str	r0, [r7, #12]
 801705c:	60b9      	str	r1, [r7, #8]
 801705e:	607a      	str	r2, [r7, #4]
  assert_param(IS_FMC_RP_DELAY(Timing->RPDelay));
  assert_param(IS_FMC_RCD_DELAY(Timing->RCDDelay));
  assert_param(IS_FMC_SDRAM_BANK(Bank));

  /* Set SDRAM device timing parameters */
  if (Bank == FMC_SDRAM_BANK1)
 8017060:	687b      	ldr	r3, [r7, #4]
 8017062:	2b00      	cmp	r3, #0
 8017064:	d128      	bne.n	80170b8 <FMC_SDRAM_Timing_Init+0x64>
  {
    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK1],
 8017066:	68fb      	ldr	r3, [r7, #12]
 8017068:	689b      	ldr	r3, [r3, #8]
 801706a:	f003 4270 	and.w	r2, r3, #4026531840	@ 0xf0000000
 801706e:	68bb      	ldr	r3, [r7, #8]
 8017070:	681b      	ldr	r3, [r3, #0]
 8017072:	1e59      	subs	r1, r3, #1
 8017074:	68bb      	ldr	r3, [r7, #8]
 8017076:	685b      	ldr	r3, [r3, #4]
 8017078:	3b01      	subs	r3, #1
 801707a:	011b      	lsls	r3, r3, #4
 801707c:	4319      	orrs	r1, r3
 801707e:	68bb      	ldr	r3, [r7, #8]
 8017080:	689b      	ldr	r3, [r3, #8]
 8017082:	3b01      	subs	r3, #1
 8017084:	021b      	lsls	r3, r3, #8
 8017086:	4319      	orrs	r1, r3
 8017088:	68bb      	ldr	r3, [r7, #8]
 801708a:	68db      	ldr	r3, [r3, #12]
 801708c:	3b01      	subs	r3, #1
 801708e:	031b      	lsls	r3, r3, #12
 8017090:	4319      	orrs	r1, r3
 8017092:	68bb      	ldr	r3, [r7, #8]
 8017094:	691b      	ldr	r3, [r3, #16]
 8017096:	3b01      	subs	r3, #1
 8017098:	041b      	lsls	r3, r3, #16
 801709a:	4319      	orrs	r1, r3
 801709c:	68bb      	ldr	r3, [r7, #8]
 801709e:	695b      	ldr	r3, [r3, #20]
 80170a0:	3b01      	subs	r3, #1
 80170a2:	051b      	lsls	r3, r3, #20
 80170a4:	4319      	orrs	r1, r3
 80170a6:	68bb      	ldr	r3, [r7, #8]
 80170a8:	699b      	ldr	r3, [r3, #24]
 80170aa:	3b01      	subs	r3, #1
 80170ac:	061b      	lsls	r3, r3, #24
 80170ae:	430b      	orrs	r3, r1
 80170b0:	431a      	orrs	r2, r3
 80170b2:	68fb      	ldr	r3, [r7, #12]
 80170b4:	609a      	str	r2, [r3, #8]
 80170b6:	e02d      	b.n	8017114 <FMC_SDRAM_Timing_Init+0xc0>
                (((Timing->RPDelay) - 1U)              << FMC_SDTRx_TRP_Pos)  |
                (((Timing->RCDDelay) - 1U)             << FMC_SDTRx_TRCD_Pos)));
  }
  else /* FMC_Bank2_SDRAM */
  {
    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK1],
 80170b8:	68fb      	ldr	r3, [r7, #12]
 80170ba:	689a      	ldr	r2, [r3, #8]
 80170bc:	4b19      	ldr	r3, [pc, #100]	@ (8017124 <FMC_SDRAM_Timing_Init+0xd0>)
 80170be:	4013      	ands	r3, r2
 80170c0:	68ba      	ldr	r2, [r7, #8]
 80170c2:	68d2      	ldr	r2, [r2, #12]
 80170c4:	3a01      	subs	r2, #1
 80170c6:	0311      	lsls	r1, r2, #12
 80170c8:	68ba      	ldr	r2, [r7, #8]
 80170ca:	6952      	ldr	r2, [r2, #20]
 80170cc:	3a01      	subs	r2, #1
 80170ce:	0512      	lsls	r2, r2, #20
 80170d0:	430a      	orrs	r2, r1
 80170d2:	431a      	orrs	r2, r3
 80170d4:	68fb      	ldr	r3, [r7, #12]
 80170d6:	609a      	str	r2, [r3, #8]
               FMC_SDTRx_TRC |
               FMC_SDTRx_TRP,
               (((Timing->RowCycleDelay) - 1U)         << FMC_SDTRx_TRC_Pos)  |
               (((Timing->RPDelay) - 1U)               << FMC_SDTRx_TRP_Pos));

    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK2],
 80170d8:	68fb      	ldr	r3, [r7, #12]
 80170da:	68db      	ldr	r3, [r3, #12]
 80170dc:	f003 4270 	and.w	r2, r3, #4026531840	@ 0xf0000000
 80170e0:	68bb      	ldr	r3, [r7, #8]
 80170e2:	681b      	ldr	r3, [r3, #0]
 80170e4:	1e59      	subs	r1, r3, #1
 80170e6:	68bb      	ldr	r3, [r7, #8]
 80170e8:	685b      	ldr	r3, [r3, #4]
 80170ea:	3b01      	subs	r3, #1
 80170ec:	011b      	lsls	r3, r3, #4
 80170ee:	4319      	orrs	r1, r3
 80170f0:	68bb      	ldr	r3, [r7, #8]
 80170f2:	689b      	ldr	r3, [r3, #8]
 80170f4:	3b01      	subs	r3, #1
 80170f6:	021b      	lsls	r3, r3, #8
 80170f8:	4319      	orrs	r1, r3
 80170fa:	68bb      	ldr	r3, [r7, #8]
 80170fc:	691b      	ldr	r3, [r3, #16]
 80170fe:	3b01      	subs	r3, #1
 8017100:	041b      	lsls	r3, r3, #16
 8017102:	4319      	orrs	r1, r3
 8017104:	68bb      	ldr	r3, [r7, #8]
 8017106:	699b      	ldr	r3, [r3, #24]
 8017108:	3b01      	subs	r3, #1
 801710a:	061b      	lsls	r3, r3, #24
 801710c:	430b      	orrs	r3, r1
 801710e:	431a      	orrs	r2, r3
 8017110:	68fb      	ldr	r3, [r7, #12]
 8017112:	60da      	str	r2, [r3, #12]
                (((Timing->SelfRefreshTime) - 1U)      << FMC_SDTRx_TRAS_Pos) |
                (((Timing->WriteRecoveryTime) - 1U)    << FMC_SDTRx_TWR_Pos)  |
                (((Timing->RCDDelay) - 1U)             << FMC_SDTRx_TRCD_Pos)));
  }

  return HAL_OK;
 8017114:	2300      	movs	r3, #0
}
 8017116:	4618      	mov	r0, r3
 8017118:	3714      	adds	r7, #20
 801711a:	46bd      	mov	sp, r7
 801711c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017120:	4770      	bx	lr
 8017122:	bf00      	nop
 8017124:	ff0f0fff 	.word	0xff0f0fff

08017128 <FMC_SDRAM_DeInit>:
  * @brief  DeInitializes the FMC_SDRAM peripheral
  * @param  Device Pointer to SDRAM device instance
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_SDRAM_DeInit(FMC_SDRAM_TypeDef *Device, uint32_t Bank)
{
 8017128:	b480      	push	{r7}
 801712a:	b083      	sub	sp, #12
 801712c:	af00      	add	r7, sp, #0
 801712e:	6078      	str	r0, [r7, #4]
 8017130:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_FMC_SDRAM_DEVICE(Device));
  assert_param(IS_FMC_SDRAM_BANK(Bank));

  /* De-initialize the SDRAM device */
  Device->SDCR[Bank] = 0x000002D0U;
 8017132:	687b      	ldr	r3, [r7, #4]
 8017134:	683a      	ldr	r2, [r7, #0]
 8017136:	f44f 7134 	mov.w	r1, #720	@ 0x2d0
 801713a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  Device->SDTR[Bank] = 0x0FFFFFFFU;
 801713e:	687b      	ldr	r3, [r7, #4]
 8017140:	683a      	ldr	r2, [r7, #0]
 8017142:	3202      	adds	r2, #2
 8017144:	f06f 4170 	mvn.w	r1, #4026531840	@ 0xf0000000
 8017148:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  Device->SDCMR      = 0x00000000U;
 801714c:	687b      	ldr	r3, [r7, #4]
 801714e:	2200      	movs	r2, #0
 8017150:	611a      	str	r2, [r3, #16]
  Device->SDRTR      = 0x00000000U;
 8017152:	687b      	ldr	r3, [r7, #4]
 8017154:	2200      	movs	r2, #0
 8017156:	615a      	str	r2, [r3, #20]
  Device->SDSR       = 0x00000000U;
 8017158:	687b      	ldr	r3, [r7, #4]
 801715a:	2200      	movs	r2, #0
 801715c:	619a      	str	r2, [r3, #24]

  return HAL_OK;
 801715e:	2300      	movs	r3, #0
}
 8017160:	4618      	mov	r0, r3
 8017162:	370c      	adds	r7, #12
 8017164:	46bd      	mov	sp, r7
 8017166:	f85d 7b04 	ldr.w	r7, [sp], #4
 801716a:	4770      	bx	lr

0801716c <FMC_SDRAM_SendCommand>:
  * @param  Timeout Timeout wait value
  * @retval HAL state
  */
HAL_StatusTypeDef FMC_SDRAM_SendCommand(FMC_SDRAM_TypeDef *Device,
                                        FMC_SDRAM_CommandTypeDef *Command, uint32_t Timeout)
{
 801716c:	b480      	push	{r7}
 801716e:	b085      	sub	sp, #20
 8017170:	af00      	add	r7, sp, #0
 8017172:	60f8      	str	r0, [r7, #12]
 8017174:	60b9      	str	r1, [r7, #8]
 8017176:	607a      	str	r2, [r7, #4]
  assert_param(IS_FMC_COMMAND_TARGET(Command->CommandTarget));
  assert_param(IS_FMC_AUTOREFRESH_NUMBER(Command->AutoRefreshNumber));
  assert_param(IS_FMC_MODE_REGISTER(Command->ModeRegisterDefinition));

  /* Set command register */
  MODIFY_REG(Device->SDCMR, (FMC_SDCMR_MODE | FMC_SDCMR_CTB2 | FMC_SDCMR_CTB1 | FMC_SDCMR_NRFS | FMC_SDCMR_MRD),
 8017178:	68fb      	ldr	r3, [r7, #12]
 801717a:	691a      	ldr	r2, [r3, #16]
 801717c:	4b0c      	ldr	r3, [pc, #48]	@ (80171b0 <FMC_SDRAM_SendCommand+0x44>)
 801717e:	4013      	ands	r3, r2
 8017180:	68ba      	ldr	r2, [r7, #8]
 8017182:	6811      	ldr	r1, [r2, #0]
 8017184:	68ba      	ldr	r2, [r7, #8]
 8017186:	6852      	ldr	r2, [r2, #4]
 8017188:	4311      	orrs	r1, r2
 801718a:	68ba      	ldr	r2, [r7, #8]
 801718c:	6892      	ldr	r2, [r2, #8]
 801718e:	3a01      	subs	r2, #1
 8017190:	0152      	lsls	r2, r2, #5
 8017192:	4311      	orrs	r1, r2
 8017194:	68ba      	ldr	r2, [r7, #8]
 8017196:	68d2      	ldr	r2, [r2, #12]
 8017198:	0252      	lsls	r2, r2, #9
 801719a:	430a      	orrs	r2, r1
 801719c:	431a      	orrs	r2, r3
 801719e:	68fb      	ldr	r3, [r7, #12]
 80171a0:	611a      	str	r2, [r3, #16]
             ((Command->CommandMode) | (Command->CommandTarget) |
              (((Command->AutoRefreshNumber) - 1U) << FMC_SDCMR_NRFS_Pos) |
              ((Command->ModeRegisterDefinition) << FMC_SDCMR_MRD_Pos)));
  /* Prevent unused argument(s) compilation warning */
  UNUSED(Timeout);
  return HAL_OK;
 80171a2:	2300      	movs	r3, #0
}
 80171a4:	4618      	mov	r0, r3
 80171a6:	3714      	adds	r7, #20
 80171a8:	46bd      	mov	sp, r7
 80171aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80171ae:	4770      	bx	lr
 80171b0:	ffc00000 	.word	0xffc00000

080171b4 <FMC_SDRAM_ProgramRefreshRate>:
  * @param  Device Pointer to SDRAM device instance
  * @param  RefreshRate The SDRAM refresh rate value.
  * @retval HAL state
  */
HAL_StatusTypeDef FMC_SDRAM_ProgramRefreshRate(FMC_SDRAM_TypeDef *Device, uint32_t RefreshRate)
{
 80171b4:	b480      	push	{r7}
 80171b6:	b083      	sub	sp, #12
 80171b8:	af00      	add	r7, sp, #0
 80171ba:	6078      	str	r0, [r7, #4]
 80171bc:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_FMC_SDRAM_DEVICE(Device));
  assert_param(IS_FMC_REFRESH_RATE(RefreshRate));

  /* Set the refresh rate in command register */
  MODIFY_REG(Device->SDRTR, FMC_SDRTR_COUNT, (RefreshRate << FMC_SDRTR_COUNT_Pos));
 80171be:	687b      	ldr	r3, [r7, #4]
 80171c0:	695a      	ldr	r2, [r3, #20]
 80171c2:	4b07      	ldr	r3, [pc, #28]	@ (80171e0 <FMC_SDRAM_ProgramRefreshRate+0x2c>)
 80171c4:	4013      	ands	r3, r2
 80171c6:	683a      	ldr	r2, [r7, #0]
 80171c8:	0052      	lsls	r2, r2, #1
 80171ca:	431a      	orrs	r2, r3
 80171cc:	687b      	ldr	r3, [r7, #4]
 80171ce:	615a      	str	r2, [r3, #20]

  return HAL_OK;
 80171d0:	2300      	movs	r3, #0
}
 80171d2:	4618      	mov	r0, r3
 80171d4:	370c      	adds	r7, #12
 80171d6:	46bd      	mov	sp, r7
 80171d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80171dc:	4770      	bx	lr
 80171de:	bf00      	nop
 80171e0:	ffffc001 	.word	0xffffc001

080171e4 <_ZNK8touchgfx17AbstractPartition18getAllocationCountEv>:
 80171e4:	8880      	ldrh	r0, [r0, #4]
 80171e6:	4770      	bx	lr

080171e8 <_ZN8touchgfx17AbstractPartition5clearEv>:
 80171e8:	2300      	movs	r3, #0
 80171ea:	8083      	strh	r3, [r0, #4]
 80171ec:	4770      	bx	lr
	...

080171f0 <_ZN8touchgfx17AbstractPartition7indexOfEPKv>:
 80171f0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80171f2:	6803      	ldr	r3, [r0, #0]
 80171f4:	460e      	mov	r6, r1
 80171f6:	2100      	movs	r1, #0
 80171f8:	4605      	mov	r5, r0
 80171fa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80171fc:	4798      	blx	r3
 80171fe:	4604      	mov	r4, r0
 8017200:	682b      	ldr	r3, [r5, #0]
 8017202:	4628      	mov	r0, r5
 8017204:	1b34      	subs	r4, r6, r4
 8017206:	6a1b      	ldr	r3, [r3, #32]
 8017208:	b2a4      	uxth	r4, r4
 801720a:	4798      	blx	r3
 801720c:	88ab      	ldrh	r3, [r5, #4]
 801720e:	fbb4 f4f0 	udiv	r4, r4, r0
 8017212:	42a3      	cmp	r3, r4
 8017214:	d805      	bhi.n	8017222 <_ZN8touchgfx17AbstractPartition7indexOfEPKv+0x32>
 8017216:	4b0e      	ldr	r3, [pc, #56]	@ (8017250 <_ZN8touchgfx17AbstractPartition7indexOfEPKv+0x60>)
 8017218:	211e      	movs	r1, #30
 801721a:	4a0e      	ldr	r2, [pc, #56]	@ (8017254 <_ZN8touchgfx17AbstractPartition7indexOfEPKv+0x64>)
 801721c:	480e      	ldr	r0, [pc, #56]	@ (8017258 <_ZN8touchgfx17AbstractPartition7indexOfEPKv+0x68>)
 801721e:	f013 fb89 	bl	802a934 <__assert_func>
 8017222:	682b      	ldr	r3, [r5, #0]
 8017224:	2100      	movs	r1, #0
 8017226:	4628      	mov	r0, r5
 8017228:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801722a:	4798      	blx	r3
 801722c:	682b      	ldr	r3, [r5, #0]
 801722e:	4607      	mov	r7, r0
 8017230:	4628      	mov	r0, r5
 8017232:	6a1b      	ldr	r3, [r3, #32]
 8017234:	4798      	blx	r3
 8017236:	1bf3      	subs	r3, r6, r7
 8017238:	b29b      	uxth	r3, r3
 801723a:	fbb3 f2f0 	udiv	r2, r3, r0
 801723e:	fb02 3010 	mls	r0, r2, r0, r3
 8017242:	b118      	cbz	r0, 801724c <_ZN8touchgfx17AbstractPartition7indexOfEPKv+0x5c>
 8017244:	4b05      	ldr	r3, [pc, #20]	@ (801725c <_ZN8touchgfx17AbstractPartition7indexOfEPKv+0x6c>)
 8017246:	211f      	movs	r1, #31
 8017248:	4a02      	ldr	r2, [pc, #8]	@ (8017254 <_ZN8touchgfx17AbstractPartition7indexOfEPKv+0x64>)
 801724a:	e7e7      	b.n	801721c <_ZN8touchgfx17AbstractPartition7indexOfEPKv+0x2c>
 801724c:	4620      	mov	r0, r4
 801724e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8017250:	0802d270 	.word	0x0802d270
 8017254:	0802d3de 	.word	0x0802d3de
 8017258:	0802d285 	.word	0x0802d285
 801725c:	0802d2b3 	.word	0x0802d2b3

08017260 <_ZN8touchgfx17AbstractPartition8allocateEt>:
 8017260:	b538      	push	{r3, r4, r5, lr}
 8017262:	6803      	ldr	r3, [r0, #0]
 8017264:	460d      	mov	r5, r1
 8017266:	4604      	mov	r4, r0
 8017268:	6a1b      	ldr	r3, [r3, #32]
 801726a:	4798      	blx	r3
 801726c:	4285      	cmp	r5, r0
 801726e:	d905      	bls.n	801727c <_ZN8touchgfx17AbstractPartition8allocateEt+0x1c>
 8017270:	4b0c      	ldr	r3, [pc, #48]	@ (80172a4 <_ZN8touchgfx17AbstractPartition8allocateEt+0x44>)
 8017272:	2130      	movs	r1, #48	@ 0x30
 8017274:	4a0c      	ldr	r2, [pc, #48]	@ (80172a8 <_ZN8touchgfx17AbstractPartition8allocateEt+0x48>)
 8017276:	480d      	ldr	r0, [pc, #52]	@ (80172ac <_ZN8touchgfx17AbstractPartition8allocateEt+0x4c>)
 8017278:	f013 fb5c 	bl	802a934 <__assert_func>
 801727c:	6823      	ldr	r3, [r4, #0]
 801727e:	4620      	mov	r0, r4
 8017280:	88a5      	ldrh	r5, [r4, #4]
 8017282:	69db      	ldr	r3, [r3, #28]
 8017284:	4798      	blx	r3
 8017286:	4285      	cmp	r5, r0
 8017288:	d303      	bcc.n	8017292 <_ZN8touchgfx17AbstractPartition8allocateEt+0x32>
 801728a:	4b09      	ldr	r3, [pc, #36]	@ (80172b0 <_ZN8touchgfx17AbstractPartition8allocateEt+0x50>)
 801728c:	2131      	movs	r1, #49	@ 0x31
 801728e:	4a06      	ldr	r2, [pc, #24]	@ (80172a8 <_ZN8touchgfx17AbstractPartition8allocateEt+0x48>)
 8017290:	e7f1      	b.n	8017276 <_ZN8touchgfx17AbstractPartition8allocateEt+0x16>
 8017292:	6823      	ldr	r3, [r4, #0]
 8017294:	4620      	mov	r0, r4
 8017296:	88a1      	ldrh	r1, [r4, #4]
 8017298:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801729a:	4798      	blx	r3
 801729c:	88a3      	ldrh	r3, [r4, #4]
 801729e:	3301      	adds	r3, #1
 80172a0:	80a3      	strh	r3, [r4, #4]
 80172a2:	bd38      	pop	{r3, r4, r5, pc}
 80172a4:	0802d32d 	.word	0x0802d32d
 80172a8:	0802d421 	.word	0x0802d421
 80172ac:	0802d285 	.word	0x0802d285
 80172b0:	0802d344 	.word	0x0802d344

080172b4 <_ZN8touchgfx17AbstractPartition10allocateAtEtt>:
 80172b4:	b570      	push	{r4, r5, r6, lr}
 80172b6:	6803      	ldr	r3, [r0, #0]
 80172b8:	4616      	mov	r6, r2
 80172ba:	4604      	mov	r4, r0
 80172bc:	460d      	mov	r5, r1
 80172be:	6a1b      	ldr	r3, [r3, #32]
 80172c0:	4798      	blx	r3
 80172c2:	4286      	cmp	r6, r0
 80172c4:	d905      	bls.n	80172d2 <_ZN8touchgfx17AbstractPartition10allocateAtEtt+0x1e>
 80172c6:	4b06      	ldr	r3, [pc, #24]	@ (80172e0 <_ZN8touchgfx17AbstractPartition10allocateAtEtt+0x2c>)
 80172c8:	213a      	movs	r1, #58	@ 0x3a
 80172ca:	4a06      	ldr	r2, [pc, #24]	@ (80172e4 <_ZN8touchgfx17AbstractPartition10allocateAtEtt+0x30>)
 80172cc:	4806      	ldr	r0, [pc, #24]	@ (80172e8 <_ZN8touchgfx17AbstractPartition10allocateAtEtt+0x34>)
 80172ce:	f013 fb31 	bl	802a934 <__assert_func>
 80172d2:	6823      	ldr	r3, [r4, #0]
 80172d4:	4629      	mov	r1, r5
 80172d6:	4620      	mov	r0, r4
 80172d8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80172da:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 80172de:	4718      	bx	r3
 80172e0:	0802d32d 	.word	0x0802d32d
 80172e4:	0802d394 	.word	0x0802d394
 80172e8:	0802d285 	.word	0x0802d285

080172ec <_ZN8touchgfx17AbstractPartitionD1Ev>:
 80172ec:	4770      	bx	lr
	...

080172f0 <_ZN8touchgfx17AbstractPartitionC1Ev>:
 80172f0:	4a02      	ldr	r2, [pc, #8]	@ (80172fc <_ZN8touchgfx17AbstractPartitionC1Ev+0xc>)
 80172f2:	6002      	str	r2, [r0, #0]
 80172f4:	2200      	movs	r2, #0
 80172f6:	8082      	strh	r2, [r0, #4]
 80172f8:	4770      	bx	lr
 80172fa:	bf00      	nop
 80172fc:	0802d368 	.word	0x0802d368

08017300 <_ZN8touchgfx9Container13getFirstChildEv>:
 8017300:	6a80      	ldr	r0, [r0, #40]	@ 0x28
 8017302:	4770      	bx	lr

08017304 <_ZNK8touchgfx12TextProgress12getTypedTextEv>:
 8017304:	4a02      	ldr	r2, [pc, #8]	@ (8017310 <_ZNK8touchgfx12TextProgress12getTypedTextEv+0xc>)
 8017306:	6002      	str	r2, [r0, #0]
 8017308:	f8b1 20e0 	ldrh.w	r2, [r1, #224]	@ 0xe0
 801730c:	8082      	strh	r2, [r0, #4]
 801730e:	4770      	bx	lr
 8017310:	0802cd0c 	.word	0x0802cd0c

08017314 <_ZN8touchgfx12TextProgress8setColorENS_9colortypeE>:
 8017314:	f8c0 10e4 	str.w	r1, [r0, #228]	@ 0xe4
 8017318:	4770      	bx	lr

0801731a <_ZNK8touchgfx12TextProgress8getColorEv>:
 801731a:	f8d0 00e4 	ldr.w	r0, [r0, #228]	@ 0xe4
 801731e:	4770      	bx	lr

08017320 <_ZN8touchgfx12TextProgress19setNumberOfDecimalsEt>:
 8017320:	2902      	cmp	r1, #2
 8017322:	b570      	push	{r4, r5, r6, lr}
 8017324:	bf28      	it	cs
 8017326:	2102      	movcs	r1, #2
 8017328:	6803      	ldr	r3, [r0, #0]
 801732a:	4604      	mov	r4, r0
 801732c:	f8a0 1106 	strh.w	r1, [r0, #262]	@ 0x106
 8017330:	f8d3 50ac 	ldr.w	r5, [r3, #172]	@ 0xac
 8017334:	f8d3 30b8 	ldr.w	r3, [r3, #184]	@ 0xb8
 8017338:	4798      	blx	r3
 801733a:	462b      	mov	r3, r5
 801733c:	4601      	mov	r1, r0
 801733e:	4620      	mov	r0, r4
 8017340:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8017344:	4718      	bx	r3

08017346 <_ZNK8touchgfx12TextProgress19getNumberOfDecimalsEv>:
 8017346:	f8b0 0106 	ldrh.w	r0, [r0, #262]	@ 0x106
 801734a:	4770      	bx	lr

0801734c <_ZN8touchgfx12TextProgress12setTypedTextERKNS_9TypedTextE>:
 801734c:	30b4      	adds	r0, #180	@ 0xb4
 801734e:	f002 b9fa 	b.w	8019746 <_ZN8touchgfx8TextArea12setTypedTextERKNS_9TypedTextE>

08017352 <_ZN8touchgfx12TextProgress8setAlphaEh>:
 8017352:	b538      	push	{r3, r4, r5, lr}
 8017354:	4604      	mov	r4, r0
 8017356:	460d      	mov	r5, r1
 8017358:	f000 f8e7 	bl	801752a <_ZN8touchgfx25AbstractProgressIndicator8setAlphaEh>
 801735c:	f884 50ea 	strb.w	r5, [r4, #234]	@ 0xea
 8017360:	bd38      	pop	{r3, r4, r5, pc}
	...

08017364 <_ZN8touchgfx12TextProgress8setValueEi>:
 8017364:	b530      	push	{r4, r5, lr}
 8017366:	b087      	sub	sp, #28
 8017368:	4604      	mov	r4, r0
 801736a:	f000 f927 	bl	80175bc <_ZN8touchgfx25AbstractProgressIndicator8setValueEi>
 801736e:	4b1d      	ldr	r3, [pc, #116]	@ (80173e4 <_ZN8touchgfx12TextProgress8setValueEi+0x80>)
 8017370:	f104 05f4 	add.w	r5, r4, #244	@ 0xf4
 8017374:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8017378:	ab06      	add	r3, sp, #24
 801737a:	e903 0007 	stmdb	r3, {r0, r1, r2}
 801737e:	f8b4 3106 	ldrh.w	r3, [r4, #262]	@ 0x106
 8017382:	aa06      	add	r2, sp, #24
 8017384:	4620      	mov	r0, r4
 8017386:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 801738a:	f853 1c0c 	ldr.w	r1, [r3, #-12]
 801738e:	eb01 0181 	add.w	r1, r1, r1, lsl #2
 8017392:	eb01 0181 	add.w	r1, r1, r1, lsl #2
 8017396:	0089      	lsls	r1, r1, #2
 8017398:	b289      	uxth	r1, r1
 801739a:	f000 f9a2 	bl	80176e2 <_ZNK8touchgfx25AbstractProgressIndicator11getProgressEt>
 801739e:	f8b4 1106 	ldrh.w	r1, [r4, #262]	@ 0x106
 80173a2:	b1c1      	cbz	r1, 80173d6 <_ZN8touchgfx12TextProgress8setValueEi+0x72>
 80173a4:	ab06      	add	r3, sp, #24
 80173a6:	eb03 0381 	add.w	r3, r3, r1, lsl #2
 80173aa:	f853 2c0c 	ldr.w	r2, [r3, #-12]
 80173ae:	fb90 f3f2 	sdiv	r3, r0, r2
 80173b2:	fb02 0213 	mls	r2, r2, r3, r0
 80173b6:	4628      	mov	r0, r5
 80173b8:	e9cd 1200 	strd	r1, r2, [sp]
 80173bc:	4a0a      	ldr	r2, [pc, #40]	@ (80173e8 <_ZN8touchgfx12TextProgress8setValueEi+0x84>)
 80173be:	2108      	movs	r1, #8
 80173c0:	f007 f966 	bl	801e690 <_ZN8touchgfx7Unicode8snprintfEPttPKcz>
 80173c4:	f104 00b4 	add.w	r0, r4, #180	@ 0xb4
 80173c8:	f8c4 50f0 	str.w	r5, [r4, #240]	@ 0xf0
 80173cc:	b007      	add	sp, #28
 80173ce:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80173d2:	f005 b90b 	b.w	801c5ec <_ZNK8touchgfx8Drawable10invalidateEv>
 80173d6:	4603      	mov	r3, r0
 80173d8:	4a04      	ldr	r2, [pc, #16]	@ (80173ec <_ZN8touchgfx12TextProgress8setValueEi+0x88>)
 80173da:	2108      	movs	r1, #8
 80173dc:	4628      	mov	r0, r5
 80173de:	f007 f957 	bl	801e690 <_ZN8touchgfx7Unicode8snprintfEPttPKcz>
 80173e2:	e7ef      	b.n	80173c4 <_ZN8touchgfx12TextProgress8setValueEi+0x60>
 80173e4:	0802c6f4 	.word	0x0802c6f4
 80173e8:	0802d45f 	.word	0x0802d45f
 80173ec:	0802d467 	.word	0x0802d467

080173f0 <_ZN8touchgfx12TextProgress28setProgressIndicatorPositionEssss>:
 80173f0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80173f4:	461d      	mov	r5, r3
 80173f6:	f100 07b4 	add.w	r7, r0, #180	@ 0xb4
 80173fa:	2300      	movs	r3, #0
 80173fc:	f9bd 6020 	ldrsh.w	r6, [sp, #32]
 8017400:	4691      	mov	r9, r2
 8017402:	4604      	mov	r4, r0
 8017404:	f8c0 30b8 	str.w	r3, [r0, #184]	@ 0xb8
 8017408:	4688      	mov	r8, r1
 801740a:	4638      	mov	r0, r7
 801740c:	4629      	mov	r1, r5
 801740e:	f7ec fdc1 	bl	8003f94 <_ZN8touchgfx8Drawable8setWidthEs>
 8017412:	4631      	mov	r1, r6
 8017414:	4638      	mov	r0, r7
 8017416:	f7ec fdcc 	bl	8003fb2 <_ZN8touchgfx8Drawable9setHeightEs>
 801741a:	9608      	str	r6, [sp, #32]
 801741c:	462b      	mov	r3, r5
 801741e:	464a      	mov	r2, r9
 8017420:	4641      	mov	r1, r8
 8017422:	4620      	mov	r0, r4
 8017424:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8017428:	f000 b978 	b.w	801771c <_ZN8touchgfx25AbstractProgressIndicator28setProgressIndicatorPositionEssss>

0801742c <_ZN8touchgfx12TextProgressC1Ev>:
 801742c:	b510      	push	{r4, lr}
 801742e:	4604      	mov	r4, r0
 8017430:	f000 f9a0 	bl	8017774 <_ZN8touchgfx25AbstractProgressIndicatorC1Ev>
 8017434:	2201      	movs	r2, #1
 8017436:	4b20      	ldr	r3, [pc, #128]	@ (80174b8 <_ZN8touchgfx12TextProgressC1Ev+0x8c>)
 8017438:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 801743c:	f104 01b4 	add.w	r1, r4, #180	@ 0xb4
 8017440:	f884 20d9 	strb.w	r2, [r4, #217]	@ 0xd9
 8017444:	4a1d      	ldr	r2, [pc, #116]	@ (80174bc <_ZN8touchgfx12TextProgressC1Ev+0x90>)
 8017446:	6023      	str	r3, [r4, #0]
 8017448:	2300      	movs	r3, #0
 801744a:	f8c4 20dc 	str.w	r2, [r4, #220]	@ 0xdc
 801744e:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8017452:	f8a4 30b8 	strh.w	r3, [r4, #184]	@ 0xb8
 8017456:	f8a4 20e0 	strh.w	r2, [r4, #224]	@ 0xe0
 801745a:	f44f 027f 	mov.w	r2, #16711680	@ 0xff0000
 801745e:	f8a4 30ba 	strh.w	r3, [r4, #186]	@ 0xba
 8017462:	f8c4 20e8 	str.w	r2, [r4, #232]	@ 0xe8
 8017466:	4a16      	ldr	r2, [pc, #88]	@ (80174c0 <_ZN8touchgfx12TextProgressC1Ev+0x94>)
 8017468:	f8a4 30bc 	strh.w	r3, [r4, #188]	@ 0xbc
 801746c:	f8a4 30be 	strh.w	r3, [r4, #190]	@ 0xbe
 8017470:	f8a4 30c0 	strh.w	r3, [r4, #192]	@ 0xc0
 8017474:	f8a4 30c2 	strh.w	r3, [r4, #194]	@ 0xc2
 8017478:	f8a4 30c4 	strh.w	r3, [r4, #196]	@ 0xc4
 801747c:	f8a4 30c6 	strh.w	r3, [r4, #198]	@ 0xc6
 8017480:	f8c4 30d0 	str.w	r3, [r4, #208]	@ 0xd0
 8017484:	f8a4 30d4 	strh.w	r3, [r4, #212]	@ 0xd4
 8017488:	f8a4 30d6 	strh.w	r3, [r4, #214]	@ 0xd6
 801748c:	f884 30d8 	strb.w	r3, [r4, #216]	@ 0xd8
 8017490:	f8c4 30e4 	str.w	r3, [r4, #228]	@ 0xe4
 8017494:	f884 30ec 	strb.w	r3, [r4, #236]	@ 0xec
 8017498:	f884 30ed 	strb.w	r3, [r4, #237]	@ 0xed
 801749c:	f8c4 20b4 	str.w	r2, [r4, #180]	@ 0xb4
 80174a0:	f8c4 30f0 	str.w	r3, [r4, #240]	@ 0xf0
 80174a4:	f8a4 3106 	strh.w	r3, [r4, #262]	@ 0x106
 80174a8:	f8a4 30f4 	strh.w	r3, [r4, #244]	@ 0xf4
 80174ac:	e9c4 3332 	strd	r3, r3, [r4, #200]	@ 0xc8
 80174b0:	f000 fa1e 	bl	80178f0 <_ZN8touchgfx9Container3addERNS_8DrawableE>
 80174b4:	4620      	mov	r0, r4
 80174b6:	bd10      	pop	{r4, pc}
 80174b8:	0802d474 	.word	0x0802d474
 80174bc:	0802cd0c 	.word	0x0802cd0c
 80174c0:	0802e9ac 	.word	0x0802e9ac

080174c4 <_ZNK8touchgfx25AbstractProgressIndicator21getProgressIndicatorXEv>:
 80174c4:	f9b0 005c 	ldrsh.w	r0, [r0, #92]	@ 0x5c
 80174c8:	4770      	bx	lr

080174ca <_ZNK8touchgfx25AbstractProgressIndicator21getProgressIndicatorYEv>:
 80174ca:	f9b0 005e 	ldrsh.w	r0, [r0, #94]	@ 0x5e
 80174ce:	4770      	bx	lr

080174d0 <_ZNK8touchgfx25AbstractProgressIndicator25getProgressIndicatorWidthEv>:
 80174d0:	f9b0 0060 	ldrsh.w	r0, [r0, #96]	@ 0x60
 80174d4:	4770      	bx	lr

080174d6 <_ZNK8touchgfx25AbstractProgressIndicator26getProgressIndicatorHeightEv>:
 80174d6:	f9b0 0062 	ldrsh.w	r0, [r0, #98]	@ 0x62
 80174da:	4770      	bx	lr

080174dc <_ZNK8touchgfx25AbstractProgressIndicator8getRangeERiS1_RtS2_>:
 80174dc:	b510      	push	{r4, lr}
 80174de:	f8d0 4084 	ldr.w	r4, [r0, #132]	@ 0x84
 80174e2:	600c      	str	r4, [r1, #0]
 80174e4:	f8d0 1088 	ldr.w	r1, [r0, #136]	@ 0x88
 80174e8:	6011      	str	r1, [r2, #0]
 80174ea:	f8b0 2090 	ldrh.w	r2, [r0, #144]	@ 0x90
 80174ee:	801a      	strh	r2, [r3, #0]
 80174f0:	9b02      	ldr	r3, [sp, #8]
 80174f2:	f8b0 2092 	ldrh.w	r2, [r0, #146]	@ 0x92
 80174f6:	801a      	strh	r2, [r3, #0]
 80174f8:	bd10      	pop	{r4, pc}

080174fa <_ZNK8touchgfx25AbstractProgressIndicator8getRangeERiS1_Rt>:
 80174fa:	b510      	push	{r4, lr}
 80174fc:	f8d0 4084 	ldr.w	r4, [r0, #132]	@ 0x84
 8017500:	600c      	str	r4, [r1, #0]
 8017502:	f8d0 1088 	ldr.w	r1, [r0, #136]	@ 0x88
 8017506:	6011      	str	r1, [r2, #0]
 8017508:	f8b0 2090 	ldrh.w	r2, [r0, #144]	@ 0x90
 801750c:	801a      	strh	r2, [r3, #0]
 801750e:	bd10      	pop	{r4, pc}

08017510 <_ZNK8touchgfx25AbstractProgressIndicator8getRangeERiS1_>:
 8017510:	f8d0 3084 	ldr.w	r3, [r0, #132]	@ 0x84
 8017514:	600b      	str	r3, [r1, #0]
 8017516:	f8d0 3088 	ldr.w	r3, [r0, #136]	@ 0x88
 801751a:	6013      	str	r3, [r2, #0]
 801751c:	4770      	bx	lr

0801751e <_ZN8touchgfx25AbstractProgressIndicator17setEasingEquationEPFstsstE>:
 801751e:	f8c0 1094 	str.w	r1, [r0, #148]	@ 0x94
 8017522:	4770      	bx	lr

08017524 <_ZNK8touchgfx25AbstractProgressIndicator8getValueEv>:
 8017524:	f8d0 008c 	ldr.w	r0, [r0, #140]	@ 0x8c
 8017528:	4770      	bx	lr

0801752a <_ZN8touchgfx25AbstractProgressIndicator8setAlphaEh>:
 801752a:	f880 1054 	strb.w	r1, [r0, #84]	@ 0x54
 801752e:	4770      	bx	lr

08017530 <_ZNK8touchgfx25AbstractProgressIndicator8getAlphaEv>:
 8017530:	f890 0054 	ldrb.w	r0, [r0, #84]	@ 0x54
 8017534:	4770      	bx	lr

08017536 <_ZN8touchgfx25AbstractProgressIndicator11updateValueEit>:
 8017536:	b570      	push	{r4, r5, r6, lr}
 8017538:	f8d0 5084 	ldr.w	r5, [r0, #132]	@ 0x84
 801753c:	4604      	mov	r4, r0
 801753e:	4616      	mov	r6, r2
 8017540:	428d      	cmp	r5, r1
 8017542:	bfb8      	it	lt
 8017544:	460d      	movlt	r5, r1
 8017546:	f8d0 1088 	ldr.w	r1, [r0, #136]	@ 0x88
 801754a:	428d      	cmp	r5, r1
 801754c:	bfa8      	it	ge
 801754e:	460d      	movge	r5, r1
 8017550:	b99a      	cbnz	r2, 801757a <_ZN8touchgfx25AbstractProgressIndicator11updateValueEit+0x44>
 8017552:	6803      	ldr	r3, [r0, #0]
 8017554:	4629      	mov	r1, r5
 8017556:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 801755a:	4798      	blx	r3
 801755c:	f8d4 00b0 	ldr.w	r0, [r4, #176]	@ 0xb0
 8017560:	b358      	cbz	r0, 80175ba <_ZN8touchgfx25AbstractProgressIndicator11updateValueEit+0x84>
 8017562:	6803      	ldr	r3, [r0, #0]
 8017564:	68db      	ldr	r3, [r3, #12]
 8017566:	4798      	blx	r3
 8017568:	b338      	cbz	r0, 80175ba <_ZN8touchgfx25AbstractProgressIndicator11updateValueEit+0x84>
 801756a:	f8d4 00b0 	ldr.w	r0, [r4, #176]	@ 0xb0
 801756e:	4621      	mov	r1, r4
 8017570:	6803      	ldr	r3, [r0, #0]
 8017572:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8017576:	689b      	ldr	r3, [r3, #8]
 8017578:	4718      	bx	r3
 801757a:	f8d0 30a4 	ldr.w	r3, [r0, #164]	@ 0xa4
 801757e:	2b00      	cmp	r3, #0
 8017580:	dd07      	ble.n	8017592 <_ZN8touchgfx25AbstractProgressIndicator11updateValueEit+0x5c>
 8017582:	f004 f869 	bl	801b658 <_ZN8touchgfx11Application11getInstanceEv>
 8017586:	4621      	mov	r1, r4
 8017588:	f004 f89e 	bl	801b6c8 <_ZN8touchgfx11Application21unregisterTimerWidgetEPKNS_8DrawableE>
 801758c:	2300      	movs	r3, #0
 801758e:	f884 3098 	strb.w	r3, [r4, #152]	@ 0x98
 8017592:	6823      	ldr	r3, [r4, #0]
 8017594:	4620      	mov	r0, r4
 8017596:	f8d3 30b8 	ldr.w	r3, [r3, #184]	@ 0xb8
 801759a:	4798      	blx	r3
 801759c:	2300      	movs	r3, #0
 801759e:	f8c4 60a4 	str.w	r6, [r4, #164]	@ 0xa4
 80175a2:	f8c4 30a8 	str.w	r3, [r4, #168]	@ 0xa8
 80175a6:	e9c4 0527 	strd	r0, r5, [r4, #156]	@ 0x9c
 80175aa:	f004 f855 	bl	801b658 <_ZN8touchgfx11Application11getInstanceEv>
 80175ae:	4621      	mov	r1, r4
 80175b0:	f004 f858 	bl	801b664 <_ZN8touchgfx11Application19registerTimerWidgetEPNS_8DrawableE>
 80175b4:	2301      	movs	r3, #1
 80175b6:	f884 3098 	strb.w	r3, [r4, #152]	@ 0x98
 80175ba:	bd70      	pop	{r4, r5, r6, pc}

080175bc <_ZN8touchgfx25AbstractProgressIndicator8setValueEi>:
 80175bc:	b510      	push	{r4, lr}
 80175be:	f8d0 3084 	ldr.w	r3, [r0, #132]	@ 0x84
 80175c2:	4604      	mov	r4, r0
 80175c4:	4299      	cmp	r1, r3
 80175c6:	bfb8      	it	lt
 80175c8:	4619      	movlt	r1, r3
 80175ca:	f8d0 3088 	ldr.w	r3, [r0, #136]	@ 0x88
 80175ce:	4299      	cmp	r1, r3
 80175d0:	bfa8      	it	ge
 80175d2:	4619      	movge	r1, r3
 80175d4:	f8d0 308c 	ldr.w	r3, [r0, #140]	@ 0x8c
 80175d8:	428b      	cmp	r3, r1
 80175da:	d010      	beq.n	80175fe <_ZN8touchgfx25AbstractProgressIndicator8setValueEi+0x42>
 80175dc:	f8c0 108c 	str.w	r1, [r0, #140]	@ 0x8c
 80175e0:	f8d0 00ac 	ldr.w	r0, [r0, #172]	@ 0xac
 80175e4:	b158      	cbz	r0, 80175fe <_ZN8touchgfx25AbstractProgressIndicator8setValueEi+0x42>
 80175e6:	6803      	ldr	r3, [r0, #0]
 80175e8:	68db      	ldr	r3, [r3, #12]
 80175ea:	4798      	blx	r3
 80175ec:	b138      	cbz	r0, 80175fe <_ZN8touchgfx25AbstractProgressIndicator8setValueEi+0x42>
 80175ee:	f8d4 00ac 	ldr.w	r0, [r4, #172]	@ 0xac
 80175f2:	4621      	mov	r1, r4
 80175f4:	6803      	ldr	r3, [r0, #0]
 80175f6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80175fa:	689b      	ldr	r3, [r3, #8]
 80175fc:	4718      	bx	r3
 80175fe:	bd10      	pop	{r4, pc}

08017600 <_ZN8touchgfx25AbstractProgressIndicator8setRangeEiitt>:
 8017600:	4291      	cmp	r1, r2
 8017602:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8017606:	4604      	mov	r4, r0
 8017608:	460e      	mov	r6, r1
 801760a:	4615      	mov	r5, r2
 801760c:	4698      	mov	r8, r3
 801760e:	f8bd 7018 	ldrh.w	r7, [sp, #24]
 8017612:	db05      	blt.n	8017620 <_ZN8touchgfx25AbstractProgressIndicator8setRangeEiitt+0x20>
 8017614:	4b11      	ldr	r3, [pc, #68]	@ (801765c <_ZN8touchgfx25AbstractProgressIndicator8setRangeEiitt+0x5c>)
 8017616:	214b      	movs	r1, #75	@ 0x4b
 8017618:	4a11      	ldr	r2, [pc, #68]	@ (8017660 <_ZN8touchgfx25AbstractProgressIndicator8setRangeEiitt+0x60>)
 801761a:	4812      	ldr	r0, [pc, #72]	@ (8017664 <_ZN8touchgfx25AbstractProgressIndicator8setRangeEiitt+0x64>)
 801761c:	f013 f98a 	bl	802a934 <__assert_func>
 8017620:	6803      	ldr	r3, [r0, #0]
 8017622:	e9c0 1221 	strd	r1, r2, [r0, #132]	@ 0x84
 8017626:	f8d0 108c 	ldr.w	r1, [r0, #140]	@ 0x8c
 801762a:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 801762e:	4798      	blx	r3
 8017630:	f1b8 0f00 	cmp.w	r8, #0
 8017634:	d10c      	bne.n	8017650 <_ZN8touchgfx25AbstractProgressIndicator8setRangeEiitt+0x50>
 8017636:	1bad      	subs	r5, r5, r6
 8017638:	f8a4 5090 	strh.w	r5, [r4, #144]	@ 0x90
 801763c:	f8b4 3090 	ldrh.w	r3, [r4, #144]	@ 0x90
 8017640:	f8a4 7092 	strh.w	r7, [r4, #146]	@ 0x92
 8017644:	42bb      	cmp	r3, r7
 8017646:	d806      	bhi.n	8017656 <_ZN8touchgfx25AbstractProgressIndicator8setRangeEiitt+0x56>
 8017648:	4b07      	ldr	r3, [pc, #28]	@ (8017668 <_ZN8touchgfx25AbstractProgressIndicator8setRangeEiitt+0x68>)
 801764a:	2158      	movs	r1, #88	@ 0x58
 801764c:	4a04      	ldr	r2, [pc, #16]	@ (8017660 <_ZN8touchgfx25AbstractProgressIndicator8setRangeEiitt+0x60>)
 801764e:	e7e4      	b.n	801761a <_ZN8touchgfx25AbstractProgressIndicator8setRangeEiitt+0x1a>
 8017650:	f8a4 8090 	strh.w	r8, [r4, #144]	@ 0x90
 8017654:	e7f2      	b.n	801763c <_ZN8touchgfx25AbstractProgressIndicator8setRangeEiitt+0x3c>
 8017656:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801765a:	bf00      	nop
 801765c:	0802d554 	.word	0x0802d554
 8017660:	0802d6a0 	.word	0x0802d6a0
 8017664:	0802d55e 	.word	0x0802d55e
 8017668:	0802d5b5 	.word	0x0802d5b5

0801766c <_ZN8touchgfx25AbstractProgressIndicator15handleTickEventEv>:
 801766c:	b570      	push	{r4, r5, r6, lr}
 801766e:	f890 3098 	ldrb.w	r3, [r0, #152]	@ 0x98
 8017672:	4604      	mov	r4, r0
 8017674:	b3a3      	cbz	r3, 80176e0 <_ZN8touchgfx25AbstractProgressIndicator15handleTickEventEv+0x74>
 8017676:	f8d0 00a8 	ldr.w	r0, [r0, #168]	@ 0xa8
 801767a:	2100      	movs	r1, #0
 801767c:	f8d4 5094 	ldr.w	r5, [r4, #148]	@ 0x94
 8017680:	3001      	adds	r0, #1
 8017682:	e9d4 3227 	ldrd	r3, r2, [r4, #156]	@ 0x9c
 8017686:	f8c4 00a8 	str.w	r0, [r4, #168]	@ 0xa8
 801768a:	b280      	uxth	r0, r0
 801768c:	1ad2      	subs	r2, r2, r3
 801768e:	f8b4 30a4 	ldrh.w	r3, [r4, #164]	@ 0xa4
 8017692:	b212      	sxth	r2, r2
 8017694:	47a8      	blx	r5
 8017696:	f8d4 109c 	ldr.w	r1, [r4, #156]	@ 0x9c
 801769a:	6823      	ldr	r3, [r4, #0]
 801769c:	4401      	add	r1, r0
 801769e:	4620      	mov	r0, r4
 80176a0:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 80176a4:	4798      	blx	r3
 80176a6:	e9d4 3229 	ldrd	r3, r2, [r4, #164]	@ 0xa4
 80176aa:	429a      	cmp	r2, r3
 80176ac:	db18      	blt.n	80176e0 <_ZN8touchgfx25AbstractProgressIndicator15handleTickEventEv+0x74>
 80176ae:	2500      	movs	r5, #0
 80176b0:	e9c4 5529 	strd	r5, r5, [r4, #164]	@ 0xa4
 80176b4:	f003 ffd0 	bl	801b658 <_ZN8touchgfx11Application11getInstanceEv>
 80176b8:	4621      	mov	r1, r4
 80176ba:	f004 f805 	bl	801b6c8 <_ZN8touchgfx11Application21unregisterTimerWidgetEPKNS_8DrawableE>
 80176be:	f8d4 00b0 	ldr.w	r0, [r4, #176]	@ 0xb0
 80176c2:	f884 5098 	strb.w	r5, [r4, #152]	@ 0x98
 80176c6:	b158      	cbz	r0, 80176e0 <_ZN8touchgfx25AbstractProgressIndicator15handleTickEventEv+0x74>
 80176c8:	6803      	ldr	r3, [r0, #0]
 80176ca:	68db      	ldr	r3, [r3, #12]
 80176cc:	4798      	blx	r3
 80176ce:	b138      	cbz	r0, 80176e0 <_ZN8touchgfx25AbstractProgressIndicator15handleTickEventEv+0x74>
 80176d0:	f8d4 00b0 	ldr.w	r0, [r4, #176]	@ 0xb0
 80176d4:	4621      	mov	r1, r4
 80176d6:	6803      	ldr	r3, [r0, #0]
 80176d8:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 80176dc:	689b      	ldr	r3, [r3, #8]
 80176de:	4718      	bx	r3
 80176e0:	bd70      	pop	{r4, r5, r6, pc}

080176e2 <_ZNK8touchgfx25AbstractProgressIndicator11getProgressEt>:
 80176e2:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80176e4:	4604      	mov	r4, r0
 80176e6:	460d      	mov	r5, r1
 80176e8:	b1a9      	cbz	r1, 8017716 <_ZNK8touchgfx25AbstractProgressIndicator11getProgressEt+0x34>
 80176ea:	f8b0 6092 	ldrh.w	r6, [r0, #146]	@ 0x92
 80176ee:	ab01      	add	r3, sp, #4
 80176f0:	f8b4 1090 	ldrh.w	r1, [r4, #144]	@ 0x90
 80176f4:	f8d4 708c 	ldr.w	r7, [r4, #140]	@ 0x8c
 80176f8:	1b89      	subs	r1, r1, r6
 80176fa:	e9d0 0221 	ldrd	r0, r2, [r0, #132]	@ 0x84
 80176fe:	1a12      	subs	r2, r2, r0
 8017700:	1a38      	subs	r0, r7, r0
 8017702:	f005 f912 	bl	801c92a <_ZN8touchgfx6muldivElllRl>
 8017706:	4629      	mov	r1, r5
 8017708:	ab01      	add	r3, sp, #4
 801770a:	f8b4 2090 	ldrh.w	r2, [r4, #144]	@ 0x90
 801770e:	4430      	add	r0, r6
 8017710:	f005 f90b 	bl	801c92a <_ZN8touchgfx6muldivElllRl>
 8017714:	b285      	uxth	r5, r0
 8017716:	4628      	mov	r0, r5
 8017718:	b003      	add	sp, #12
 801771a:	bdf0      	pop	{r4, r5, r6, r7, pc}

0801771c <_ZN8touchgfx25AbstractProgressIndicator28setProgressIndicatorPositionEssss>:
 801771c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8017720:	4604      	mov	r4, r0
 8017722:	f9bd 7018 	ldrsh.w	r7, [sp, #24]
 8017726:	4698      	mov	r8, r3
 8017728:	460e      	mov	r6, r1
 801772a:	4615      	mov	r5, r2
 801772c:	f8a4 105c 	strh.w	r1, [r4, #92]	@ 0x5c
 8017730:	f8a4 205e 	strh.w	r2, [r4, #94]	@ 0x5e
 8017734:	4619      	mov	r1, r3
 8017736:	463a      	mov	r2, r7
 8017738:	3058      	adds	r0, #88	@ 0x58
 801773a:	f7ec fc69 	bl	8004010 <_ZN8touchgfx8Drawable14setWidthHeightEss>
 801773e:	4446      	add	r6, r8
 8017740:	f9b4 3008 	ldrsh.w	r3, [r4, #8]
 8017744:	443d      	add	r5, r7
 8017746:	42b3      	cmp	r3, r6
 8017748:	f9b4 300a 	ldrsh.w	r3, [r4, #10]
 801774c:	bfb8      	it	lt
 801774e:	8126      	strhlt	r6, [r4, #8]
 8017750:	42ab      	cmp	r3, r5
 8017752:	bfb8      	it	lt
 8017754:	8165      	strhlt	r5, [r4, #10]
 8017756:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0801775a <_ZN8touchgfx25AbstractProgressIndicator13setBackgroundERKNS_6BitmapE>:
 801775a:	b510      	push	{r4, lr}
 801775c:	4604      	mov	r4, r0
 801775e:	302c      	adds	r0, #44	@ 0x2c
 8017760:	f002 fa6b 	bl	8019c3a <_ZN8touchgfx5Image9setBitmapERKNS_6BitmapE>
 8017764:	f9b4 2036 	ldrsh.w	r2, [r4, #54]	@ 0x36
 8017768:	4620      	mov	r0, r4
 801776a:	f9b4 1034 	ldrsh.w	r1, [r4, #52]	@ 0x34
 801776e:	f7ec fc4f 	bl	8004010 <_ZN8touchgfx8Drawable14setWidthHeightEss>
 8017772:	bd10      	pop	{r4, pc}

08017774 <_ZN8touchgfx25AbstractProgressIndicatorC1Ev>:
 8017774:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8017776:	4604      	mov	r4, r0
 8017778:	2500      	movs	r5, #0
 801777a:	f7ec fb2d 	bl	8003dd8 <_ZN8touchgfx8DrawableC1Ev>
 801777e:	4b24      	ldr	r3, [pc, #144]	@ (8017810 <_ZN8touchgfx25AbstractProgressIndicatorC1Ev+0x9c>)
 8017780:	4626      	mov	r6, r4
 8017782:	f64f 77ff 	movw	r7, #65535	@ 0xffff
 8017786:	2226      	movs	r2, #38	@ 0x26
 8017788:	4629      	mov	r1, r5
 801778a:	62a5      	str	r5, [r4, #40]	@ 0x28
 801778c:	f846 3b2c 	str.w	r3, [r6], #44
 8017790:	4630      	mov	r0, r6
 8017792:	f8ad 7004 	strh.w	r7, [sp, #4]
 8017796:	f013 fad4 	bl	802ad42 <memset>
 801779a:	4630      	mov	r0, r6
 801779c:	f7ec fb1c 	bl	8003dd8 <_ZN8touchgfx8DrawableC1Ev>
 80177a0:	a902      	add	r1, sp, #8
 80177a2:	4b1c      	ldr	r3, [pc, #112]	@ (8017814 <_ZN8touchgfx25AbstractProgressIndicatorC1Ev+0xa0>)
 80177a4:	4630      	mov	r0, r6
 80177a6:	f884 7054 	strb.w	r7, [r4, #84]	@ 0x54
 80177aa:	f104 0758 	add.w	r7, r4, #88	@ 0x58
 80177ae:	62e3      	str	r3, [r4, #44]	@ 0x2c
 80177b0:	f831 3d04 	ldrh.w	r3, [r1, #-4]!
 80177b4:	f8a4 3052 	strh.w	r3, [r4, #82]	@ 0x52
 80177b8:	f002 fa3f 	bl	8019c3a <_ZN8touchgfx5Image9setBitmapERKNS_6BitmapE>
 80177bc:	4638      	mov	r0, r7
 80177be:	f7ec fb0b 	bl	8003dd8 <_ZN8touchgfx8DrawableC1Ev>
 80177c2:	4b15      	ldr	r3, [pc, #84]	@ (8017818 <_ZN8touchgfx25AbstractProgressIndicatorC1Ev+0xa4>)
 80177c4:	4629      	mov	r1, r5
 80177c6:	4630      	mov	r0, r6
 80177c8:	65a3      	str	r3, [r4, #88]	@ 0x58
 80177ca:	2364      	movs	r3, #100	@ 0x64
 80177cc:	f884 5098 	strb.w	r5, [r4, #152]	@ 0x98
 80177d0:	f8c4 3090 	str.w	r3, [r4, #144]	@ 0x90
 80177d4:	e9c4 3522 	strd	r3, r5, [r4, #136]	@ 0x88
 80177d8:	4b10      	ldr	r3, [pc, #64]	@ (801781c <_ZN8touchgfx25AbstractProgressIndicatorC1Ev+0xa8>)
 80177da:	e9c4 5520 	strd	r5, r5, [r4, #128]	@ 0x80
 80177de:	f8c4 3094 	str.w	r3, [r4, #148]	@ 0x94
 80177e2:	e9c4 5527 	strd	r5, r5, [r4, #156]	@ 0x9c
 80177e6:	e9c4 5529 	strd	r5, r5, [r4, #164]	@ 0xa4
 80177ea:	e9c4 552b 	strd	r5, r5, [r4, #172]	@ 0xac
 80177ee:	f7ec fb95 	bl	8003f1c <_ZN8touchgfx8Drawable4setXEs>
 80177f2:	4629      	mov	r1, r5
 80177f4:	4630      	mov	r0, r6
 80177f6:	f7ec fba0 	bl	8003f3a <_ZN8touchgfx8Drawable4setYEs>
 80177fa:	4631      	mov	r1, r6
 80177fc:	4620      	mov	r0, r4
 80177fe:	f000 f877 	bl	80178f0 <_ZN8touchgfx9Container3addERNS_8DrawableE>
 8017802:	4620      	mov	r0, r4
 8017804:	4639      	mov	r1, r7
 8017806:	f000 f873 	bl	80178f0 <_ZN8touchgfx9Container3addERNS_8DrawableE>
 801780a:	4620      	mov	r0, r4
 801780c:	b003      	add	sp, #12
 801780e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8017810:	0802d5d8 	.word	0x0802d5d8
 8017814:	0802eab8 	.word	0x0802eab8
 8017818:	0802d7cc 	.word	0x0802d7cc
 801781c:	0801cff3 	.word	0x0801cff3

08017820 <_ZN8touchgfx9Container8containsERKNS_8DrawableE>:
 8017820:	6a83      	ldr	r3, [r0, #40]	@ 0x28
 8017822:	2000      	movs	r0, #0
 8017824:	b12b      	cbz	r3, 8017832 <_ZN8touchgfx9Container8containsERKNS_8DrawableE+0x12>
 8017826:	b920      	cbnz	r0, 8017832 <_ZN8touchgfx9Container8containsERKNS_8DrawableE+0x12>
 8017828:	1a5a      	subs	r2, r3, r1
 801782a:	699b      	ldr	r3, [r3, #24]
 801782c:	4250      	negs	r0, r2
 801782e:	4150      	adcs	r0, r2
 8017830:	e7f8      	b.n	8017824 <_ZN8touchgfx9Container8containsERKNS_8DrawableE+0x4>
 8017832:	4770      	bx	lr

08017834 <_ZN8touchgfx9Container9removeAllEv>:
 8017834:	2200      	movs	r2, #0
 8017836:	6a83      	ldr	r3, [r0, #40]	@ 0x28
 8017838:	b123      	cbz	r3, 8017844 <_ZN8touchgfx9Container9removeAllEv+0x10>
 801783a:	6999      	ldr	r1, [r3, #24]
 801783c:	6281      	str	r1, [r0, #40]	@ 0x28
 801783e:	e9c3 2205 	strd	r2, r2, [r3, #20]
 8017842:	e7f8      	b.n	8017836 <_ZN8touchgfx9Container9removeAllEv+0x2>
 8017844:	4770      	bx	lr

08017846 <_ZN8touchgfx9Container6unlinkEv>:
 8017846:	2300      	movs	r3, #0
 8017848:	6283      	str	r3, [r0, #40]	@ 0x28
 801784a:	4770      	bx	lr

0801784c <_ZNK8touchgfx9Container12getSolidRectEv>:
 801784c:	2200      	movs	r2, #0
 801784e:	8002      	strh	r2, [r0, #0]
 8017850:	8042      	strh	r2, [r0, #2]
 8017852:	8082      	strh	r2, [r0, #4]
 8017854:	80c2      	strh	r2, [r0, #6]
 8017856:	4770      	bx	lr

08017858 <_ZN8touchgfx9Container20moveChildrenRelativeEss>:
 8017858:	b570      	push	{r4, r5, r6, lr}
 801785a:	460d      	mov	r5, r1
 801785c:	4616      	mov	r6, r2
 801785e:	6a84      	ldr	r4, [r0, #40]	@ 0x28
 8017860:	b13c      	cbz	r4, 8017872 <_ZN8touchgfx9Container20moveChildrenRelativeEss+0x1a>
 8017862:	6823      	ldr	r3, [r4, #0]
 8017864:	4620      	mov	r0, r4
 8017866:	4632      	mov	r2, r6
 8017868:	4629      	mov	r1, r5
 801786a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 801786c:	4798      	blx	r3
 801786e:	69a4      	ldr	r4, [r4, #24]
 8017870:	e7f6      	b.n	8017860 <_ZN8touchgfx9Container20moveChildrenRelativeEss+0x8>
 8017872:	bd70      	pop	{r4, r5, r6, pc}

08017874 <_ZN8touchgfx9Container12forEachChildEPNS_15GenericCallbackIRNS_8DrawableEvvEE>:
 8017874:	b538      	push	{r3, r4, r5, lr}
 8017876:	460d      	mov	r5, r1
 8017878:	6a84      	ldr	r4, [r0, #40]	@ 0x28
 801787a:	b134      	cbz	r4, 801788a <_ZN8touchgfx9Container12forEachChildEPNS_15GenericCallbackIRNS_8DrawableEvvEE+0x16>
 801787c:	682b      	ldr	r3, [r5, #0]
 801787e:	4621      	mov	r1, r4
 8017880:	4628      	mov	r0, r5
 8017882:	689b      	ldr	r3, [r3, #8]
 8017884:	4798      	blx	r3
 8017886:	69a4      	ldr	r4, [r4, #24]
 8017888:	e7f7      	b.n	801787a <_ZN8touchgfx9Container12forEachChildEPNS_15GenericCallbackIRNS_8DrawableEvvEE+0x6>
 801788a:	bd38      	pop	{r3, r4, r5, pc}

0801788c <_ZN8touchgfx9Container6removeERNS_8DrawableE>:
 801788c:	6a83      	ldr	r3, [r0, #40]	@ 0x28
 801788e:	b19b      	cbz	r3, 80178b8 <_ZN8touchgfx9Container6removeERNS_8DrawableE+0x2c>
 8017890:	428b      	cmp	r3, r1
 8017892:	d109      	bne.n	80178a8 <_ZN8touchgfx9Container6removeERNS_8DrawableE+0x1c>
 8017894:	699a      	ldr	r2, [r3, #24]
 8017896:	2100      	movs	r1, #0
 8017898:	6159      	str	r1, [r3, #20]
 801789a:	6282      	str	r2, [r0, #40]	@ 0x28
 801789c:	b902      	cbnz	r2, 80178a0 <_ZN8touchgfx9Container6removeERNS_8DrawableE+0x14>
 801789e:	4770      	bx	lr
 80178a0:	6199      	str	r1, [r3, #24]
 80178a2:	4770      	bx	lr
 80178a4:	4613      	mov	r3, r2
 80178a6:	b13a      	cbz	r2, 80178b8 <_ZN8touchgfx9Container6removeERNS_8DrawableE+0x2c>
 80178a8:	699a      	ldr	r2, [r3, #24]
 80178aa:	428a      	cmp	r2, r1
 80178ac:	d1fa      	bne.n	80178a4 <_ZN8touchgfx9Container6removeERNS_8DrawableE+0x18>
 80178ae:	698a      	ldr	r2, [r1, #24]
 80178b0:	619a      	str	r2, [r3, #24]
 80178b2:	2300      	movs	r3, #0
 80178b4:	e9c1 3305 	strd	r3, r3, [r1, #20]
 80178b8:	4770      	bx	lr

080178ba <_ZN8touchgfx9Container6insertEPNS_8DrawableERS1_>:
 80178ba:	b410      	push	{r4}
 80178bc:	6a83      	ldr	r3, [r0, #40]	@ 0x28
 80178be:	4604      	mov	r4, r0
 80178c0:	b92b      	cbnz	r3, 80178ce <_ZN8touchgfx9Container6insertEPNS_8DrawableERS1_+0x14>
 80178c2:	6803      	ldr	r3, [r0, #0]
 80178c4:	4611      	mov	r1, r2
 80178c6:	f85d 4b04 	ldr.w	r4, [sp], #4
 80178ca:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80178cc:	4718      	bx	r3
 80178ce:	b941      	cbnz	r1, 80178e2 <_ZN8touchgfx9Container6insertEPNS_8DrawableERS1_+0x28>
 80178d0:	6193      	str	r3, [r2, #24]
 80178d2:	6282      	str	r2, [r0, #40]	@ 0x28
 80178d4:	6154      	str	r4, [r2, #20]
 80178d6:	f85d 4b04 	ldr.w	r4, [sp], #4
 80178da:	4770      	bx	lr
 80178dc:	4603      	mov	r3, r0
 80178de:	2800      	cmp	r0, #0
 80178e0:	d0f9      	beq.n	80178d6 <_ZN8touchgfx9Container6insertEPNS_8DrawableERS1_+0x1c>
 80178e2:	4299      	cmp	r1, r3
 80178e4:	6998      	ldr	r0, [r3, #24]
 80178e6:	d1f9      	bne.n	80178dc <_ZN8touchgfx9Container6insertEPNS_8DrawableERS1_+0x22>
 80178e8:	6190      	str	r0, [r2, #24]
 80178ea:	618a      	str	r2, [r1, #24]
 80178ec:	e7f2      	b.n	80178d4 <_ZN8touchgfx9Container6insertEPNS_8DrawableERS1_+0x1a>
	...

080178f0 <_ZN8touchgfx9Container3addERNS_8DrawableE>:
 80178f0:	4288      	cmp	r0, r1
 80178f2:	b508      	push	{r3, lr}
 80178f4:	d105      	bne.n	8017902 <_ZN8touchgfx9Container3addERNS_8DrawableE+0x12>
 80178f6:	4b11      	ldr	r3, [pc, #68]	@ (801793c <_ZN8touchgfx9Container3addERNS_8DrawableE+0x4c>)
 80178f8:	2123      	movs	r1, #35	@ 0x23
 80178fa:	4a11      	ldr	r2, [pc, #68]	@ (8017940 <_ZN8touchgfx9Container3addERNS_8DrawableE+0x50>)
 80178fc:	4811      	ldr	r0, [pc, #68]	@ (8017944 <_ZN8touchgfx9Container3addERNS_8DrawableE+0x54>)
 80178fe:	f013 f819 	bl	802a934 <__assert_func>
 8017902:	694b      	ldr	r3, [r1, #20]
 8017904:	b11b      	cbz	r3, 801790e <_ZN8touchgfx9Container3addERNS_8DrawableE+0x1e>
 8017906:	4b10      	ldr	r3, [pc, #64]	@ (8017948 <_ZN8touchgfx9Container3addERNS_8DrawableE+0x58>)
 8017908:	2124      	movs	r1, #36	@ 0x24
 801790a:	4a0d      	ldr	r2, [pc, #52]	@ (8017940 <_ZN8touchgfx9Container3addERNS_8DrawableE+0x50>)
 801790c:	e7f6      	b.n	80178fc <_ZN8touchgfx9Container3addERNS_8DrawableE+0xc>
 801790e:	e9c1 0305 	strd	r0, r3, [r1, #20]
 8017912:	6a83      	ldr	r3, [r0, #40]	@ 0x28
 8017914:	b913      	cbnz	r3, 801791c <_ZN8touchgfx9Container3addERNS_8DrawableE+0x2c>
 8017916:	6281      	str	r1, [r0, #40]	@ 0x28
 8017918:	bd08      	pop	{r3, pc}
 801791a:	4613      	mov	r3, r2
 801791c:	699a      	ldr	r2, [r3, #24]
 801791e:	b12a      	cbz	r2, 801792c <_ZN8touchgfx9Container3addERNS_8DrawableE+0x3c>
 8017920:	428b      	cmp	r3, r1
 8017922:	d1fa      	bne.n	801791a <_ZN8touchgfx9Container3addERNS_8DrawableE+0x2a>
 8017924:	4b09      	ldr	r3, [pc, #36]	@ (801794c <_ZN8touchgfx9Container3addERNS_8DrawableE+0x5c>)
 8017926:	2135      	movs	r1, #53	@ 0x35
 8017928:	4a05      	ldr	r2, [pc, #20]	@ (8017940 <_ZN8touchgfx9Container3addERNS_8DrawableE+0x50>)
 801792a:	e7e7      	b.n	80178fc <_ZN8touchgfx9Container3addERNS_8DrawableE+0xc>
 801792c:	428b      	cmp	r3, r1
 801792e:	d103      	bne.n	8017938 <_ZN8touchgfx9Container3addERNS_8DrawableE+0x48>
 8017930:	4b06      	ldr	r3, [pc, #24]	@ (801794c <_ZN8touchgfx9Container3addERNS_8DrawableE+0x5c>)
 8017932:	2138      	movs	r1, #56	@ 0x38
 8017934:	4a02      	ldr	r2, [pc, #8]	@ (8017940 <_ZN8touchgfx9Container3addERNS_8DrawableE+0x50>)
 8017936:	e7e1      	b.n	80178fc <_ZN8touchgfx9Container3addERNS_8DrawableE+0xc>
 8017938:	6199      	str	r1, [r3, #24]
 801793a:	e7ed      	b.n	8017918 <_ZN8touchgfx9Container3addERNS_8DrawableE+0x28>
 801793c:	0802d6f9 	.word	0x0802d6f9
 8017940:	0802d850 	.word	0x0802d850
 8017944:	0802d725 	.word	0x0802d725
 8017948:	0802d758 	.word	0x0802d758
 801794c:	0802d78e 	.word	0x0802d78e

08017950 <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE>:
 8017950:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8017954:	461f      	mov	r7, r3
 8017956:	f890 3024 	ldrb.w	r3, [r0, #36]	@ 0x24
 801795a:	460d      	mov	r5, r1
 801795c:	4616      	mov	r6, r2
 801795e:	b103      	cbz	r3, 8017962 <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE+0x12>
 8017960:	6038      	str	r0, [r7, #0]
 8017962:	6a84      	ldr	r4, [r0, #40]	@ 0x28
 8017964:	b314      	cbz	r4, 80179ac <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE+0x5c>
 8017966:	f894 3025 	ldrb.w	r3, [r4, #37]	@ 0x25
 801796a:	b1eb      	cbz	r3, 80179a8 <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE+0x58>
 801796c:	f9b4 1004 	ldrsh.w	r1, [r4, #4]
 8017970:	428d      	cmp	r5, r1
 8017972:	db19      	blt.n	80179a8 <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE+0x58>
 8017974:	b289      	uxth	r1, r1
 8017976:	8923      	ldrh	r3, [r4, #8]
 8017978:	440b      	add	r3, r1
 801797a:	b21b      	sxth	r3, r3
 801797c:	429d      	cmp	r5, r3
 801797e:	da13      	bge.n	80179a8 <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE+0x58>
 8017980:	f9b4 2006 	ldrsh.w	r2, [r4, #6]
 8017984:	4296      	cmp	r6, r2
 8017986:	db0f      	blt.n	80179a8 <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE+0x58>
 8017988:	b292      	uxth	r2, r2
 801798a:	8963      	ldrh	r3, [r4, #10]
 801798c:	4413      	add	r3, r2
 801798e:	b21b      	sxth	r3, r3
 8017990:	429e      	cmp	r6, r3
 8017992:	da09      	bge.n	80179a8 <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE+0x58>
 8017994:	6823      	ldr	r3, [r4, #0]
 8017996:	1ab2      	subs	r2, r6, r2
 8017998:	1a69      	subs	r1, r5, r1
 801799a:	4620      	mov	r0, r4
 801799c:	f8d3 8020 	ldr.w	r8, [r3, #32]
 80179a0:	b212      	sxth	r2, r2
 80179a2:	463b      	mov	r3, r7
 80179a4:	b209      	sxth	r1, r1
 80179a6:	47c0      	blx	r8
 80179a8:	69a4      	ldr	r4, [r4, #24]
 80179aa:	e7db      	b.n	8017964 <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE+0x14>
 80179ac:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

080179b0 <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_>:
 80179b0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80179b4:	4c6d      	ldr	r4, [pc, #436]	@ (8017b6c <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_+0x1bc>)
 80179b6:	b0a1      	sub	sp, #132	@ 0x84
 80179b8:	4606      	mov	r6, r0
 80179ba:	6824      	ldr	r4, [r4, #0]
 80179bc:	9d2a      	ldr	r5, [sp, #168]	@ 0xa8
 80179be:	f894 9049 	ldrb.w	r9, [r4, #73]	@ 0x49
 80179c2:	2400      	movs	r4, #0
 80179c4:	9303      	str	r3, [sp, #12]
 80179c6:	802c      	strh	r4, [r5, #0]
 80179c8:	9d2b      	ldr	r5, [sp, #172]	@ 0xac
 80179ca:	802c      	strh	r4, [r5, #0]
 80179cc:	601c      	str	r4, [r3, #0]
 80179ce:	e9cd 1201 	strd	r1, r2, [sp, #4]
 80179d2:	f7ff ffbd 	bl	8017950 <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE>
 80179d6:	f1b9 0f03 	cmp.w	r9, #3
 80179da:	f340 80c1 	ble.w	8017b60 <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_+0x1b0>
 80179de:	4631      	mov	r1, r6
 80179e0:	a80c      	add	r0, sp, #48	@ 0x30
 80179e2:	f004 fe9b 	bl	801c71c <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 80179e6:	f9bd 3030 	ldrsh.w	r3, [sp, #48]	@ 0x30
 80179ea:	9306      	str	r3, [sp, #24]
 80179ec:	f9bd 3032 	ldrsh.w	r3, [sp, #50]	@ 0x32
 80179f0:	9307      	str	r3, [sp, #28]
 80179f2:	9b03      	ldr	r3, [sp, #12]
 80179f4:	f8d3 a000 	ldr.w	sl, [r3]
 80179f8:	f1ba 0f00 	cmp.w	sl, #0
 80179fc:	f000 80b3 	beq.w	8017b66 <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_+0x1b6>
 8017a00:	4651      	mov	r1, sl
 8017a02:	a810      	add	r0, sp, #64	@ 0x40
 8017a04:	f004 fe8a 	bl	801c71c <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 8017a08:	2002      	movs	r0, #2
 8017a0a:	f9bd 1044 	ldrsh.w	r1, [sp, #68]	@ 0x44
 8017a0e:	9b01      	ldr	r3, [sp, #4]
 8017a10:	9a06      	ldr	r2, [sp, #24]
 8017a12:	fb91 f1f0 	sdiv	r1, r1, r0
 8017a16:	189d      	adds	r5, r3, r2
 8017a18:	f9bd 3040 	ldrsh.w	r3, [sp, #64]	@ 0x40
 8017a1c:	9a07      	ldr	r2, [sp, #28]
 8017a1e:	4419      	add	r1, r3
 8017a20:	9b02      	ldr	r3, [sp, #8]
 8017a22:	4413      	add	r3, r2
 8017a24:	f9bd 2046 	ldrsh.w	r2, [sp, #70]	@ 0x46
 8017a28:	1a6d      	subs	r5, r5, r1
 8017a2a:	f9bd 1042 	ldrsh.w	r1, [sp, #66]	@ 0x42
 8017a2e:	fb92 f2f0 	sdiv	r2, r2, r0
 8017a32:	440a      	add	r2, r1
 8017a34:	1a9b      	subs	r3, r3, r2
 8017a36:	435b      	muls	r3, r3
 8017a38:	fb05 3505 	mla	r5, r5, r5, r3
 8017a3c:	4f4c      	ldr	r7, [pc, #304]	@ (8017b70 <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_+0x1c0>)
 8017a3e:	ac10      	add	r4, sp, #64	@ 0x40
 8017a40:	f1b9 0f0c 	cmp.w	r9, #12
 8017a44:	cf0f      	ldmia	r7!, {r0, r1, r2, r3}
 8017a46:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8017a48:	cf0f      	ldmia	r7!, {r0, r1, r2, r3}
 8017a4a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8017a4c:	cf0f      	ldmia	r7!, {r0, r1, r2, r3}
 8017a4e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8017a50:	e897 000f 	ldmia.w	r7, {r0, r1, r2, r3}
 8017a54:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 8017a58:	f04f 0303 	mov.w	r3, #3
 8017a5c:	bfd8      	it	le
 8017a5e:	f109 32ff 	addle.w	r2, r9, #4294967295
 8017a62:	f04f 0400 	mov.w	r4, #0
 8017a66:	f8cd 9000 	str.w	r9, [sp]
 8017a6a:	bfcc      	ite	gt
 8017a6c:	4698      	movgt	r8, r3
 8017a6e:	fb92 f8f3 	sdivle	r8, r2, r3
 8017a72:	1c63      	adds	r3, r4, #1
 8017a74:	aa10      	add	r2, sp, #64	@ 0x40
 8017a76:	f004 0401 	and.w	r4, r4, #1
 8017a7a:	f04f 0b00 	mov.w	fp, #0
 8017a7e:	9308      	str	r3, [sp, #32]
 8017a80:	9b00      	ldr	r3, [sp, #0]
 8017a82:	eb02 1444 	add.w	r4, r2, r4, lsl #5
 8017a86:	fb93 f3f8 	sdiv	r3, r3, r8
 8017a8a:	3404      	adds	r4, #4
 8017a8c:	b29b      	uxth	r3, r3
 8017a8e:	9304      	str	r3, [sp, #16]
 8017a90:	9a04      	ldr	r2, [sp, #16]
 8017a92:	f854 3c04 	ldr.w	r3, [r4, #-4]
 8017a96:	fb13 f302 	smulbb	r3, r3, r2
 8017a9a:	9a01      	ldr	r2, [sp, #4]
 8017a9c:	b29b      	uxth	r3, r3
 8017a9e:	1899      	adds	r1, r3, r2
 8017aa0:	9305      	str	r3, [sp, #20]
 8017aa2:	f9b6 3004 	ldrsh.w	r3, [r6, #4]
 8017aa6:	b209      	sxth	r1, r1
 8017aa8:	4299      	cmp	r1, r3
 8017aaa:	db4d      	blt.n	8017b48 <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_+0x198>
 8017aac:	8932      	ldrh	r2, [r6, #8]
 8017aae:	4413      	add	r3, r2
 8017ab0:	b21b      	sxth	r3, r3
 8017ab2:	4299      	cmp	r1, r3
 8017ab4:	da48      	bge.n	8017b48 <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_+0x198>
 8017ab6:	9b04      	ldr	r3, [sp, #16]
 8017ab8:	6827      	ldr	r7, [r4, #0]
 8017aba:	fb17 f703 	smulbb	r7, r7, r3
 8017abe:	9b02      	ldr	r3, [sp, #8]
 8017ac0:	b2bf      	uxth	r7, r7
 8017ac2:	18fa      	adds	r2, r7, r3
 8017ac4:	f9b6 3006 	ldrsh.w	r3, [r6, #6]
 8017ac8:	b212      	sxth	r2, r2
 8017aca:	429a      	cmp	r2, r3
 8017acc:	db3c      	blt.n	8017b48 <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_+0x198>
 8017ace:	8970      	ldrh	r0, [r6, #10]
 8017ad0:	4403      	add	r3, r0
 8017ad2:	b21b      	sxth	r3, r3
 8017ad4:	429a      	cmp	r2, r3
 8017ad6:	da37      	bge.n	8017b48 <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_+0x198>
 8017ad8:	2300      	movs	r3, #0
 8017ada:	4630      	mov	r0, r6
 8017adc:	930b      	str	r3, [sp, #44]	@ 0x2c
 8017ade:	ab0b      	add	r3, sp, #44	@ 0x2c
 8017ae0:	f7ff ff36 	bl	8017950 <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE>
 8017ae4:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 8017ae6:	b37a      	cbz	r2, 8017b48 <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_+0x198>
 8017ae8:	4552      	cmp	r2, sl
 8017aea:	d02d      	beq.n	8017b48 <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_+0x198>
 8017aec:	4611      	mov	r1, r2
 8017aee:	a80e      	add	r0, sp, #56	@ 0x38
 8017af0:	9209      	str	r2, [sp, #36]	@ 0x24
 8017af2:	f004 fe13 	bl	801c71c <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 8017af6:	f04f 0e02 	mov.w	lr, #2
 8017afa:	f9bd 103c 	ldrsh.w	r1, [sp, #60]	@ 0x3c
 8017afe:	9a06      	ldr	r2, [sp, #24]
 8017b00:	f9bd 0038 	ldrsh.w	r0, [sp, #56]	@ 0x38
 8017b04:	9b01      	ldr	r3, [sp, #4]
 8017b06:	f9bd c03e 	ldrsh.w	ip, [sp, #62]	@ 0x3e
 8017b0a:	4413      	add	r3, r2
 8017b0c:	9a07      	ldr	r2, [sp, #28]
 8017b0e:	fb91 f1fe 	sdiv	r1, r1, lr
 8017b12:	fb9c fcfe 	sdiv	ip, ip, lr
 8017b16:	4401      	add	r1, r0
 8017b18:	1a58      	subs	r0, r3, r1
 8017b1a:	9b02      	ldr	r3, [sp, #8]
 8017b1c:	f9bd 103a 	ldrsh.w	r1, [sp, #58]	@ 0x3a
 8017b20:	4413      	add	r3, r2
 8017b22:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8017b24:	448c      	add	ip, r1
 8017b26:	eba3 030c 	sub.w	r3, r3, ip
 8017b2a:	435b      	muls	r3, r3
 8017b2c:	fb00 3300 	mla	r3, r0, r0, r3
 8017b30:	42ab      	cmp	r3, r5
 8017b32:	d208      	bcs.n	8017b46 <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_+0x196>
 8017b34:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8017b36:	461d      	mov	r5, r3
 8017b38:	9803      	ldr	r0, [sp, #12]
 8017b3a:	6001      	str	r1, [r0, #0]
 8017b3c:	992a      	ldr	r1, [sp, #168]	@ 0xa8
 8017b3e:	9805      	ldr	r0, [sp, #20]
 8017b40:	8008      	strh	r0, [r1, #0]
 8017b42:	992b      	ldr	r1, [sp, #172]	@ 0xac
 8017b44:	800f      	strh	r7, [r1, #0]
 8017b46:	4692      	mov	sl, r2
 8017b48:	f10b 0b01 	add.w	fp, fp, #1
 8017b4c:	3408      	adds	r4, #8
 8017b4e:	f1bb 0f04 	cmp.w	fp, #4
 8017b52:	d19d      	bne.n	8017a90 <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_+0xe0>
 8017b54:	9b00      	ldr	r3, [sp, #0]
 8017b56:	9c08      	ldr	r4, [sp, #32]
 8017b58:	444b      	add	r3, r9
 8017b5a:	4544      	cmp	r4, r8
 8017b5c:	9300      	str	r3, [sp, #0]
 8017b5e:	d188      	bne.n	8017a72 <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_+0xc2>
 8017b60:	b021      	add	sp, #132	@ 0x84
 8017b62:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8017b66:	f04f 35ff 	mov.w	r5, #4294967295
 8017b6a:	e767      	b.n	8017a3c <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_+0x8c>
 8017b6c:	2400b880 	.word	0x2400b880
 8017b70:	0802c700 	.word	0x0802c700

08017b74 <_ZN8touchgfx4RectaNERKS0_>:
 8017b74:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8017b78:	f9b1 7000 	ldrsh.w	r7, [r1]
 8017b7c:	888c      	ldrh	r4, [r1, #4]
 8017b7e:	f9b0 9000 	ldrsh.w	r9, [r0]
 8017b82:	443c      	add	r4, r7
 8017b84:	b2a4      	uxth	r4, r4
 8017b86:	fa0f f884 	sxth.w	r8, r4
 8017b8a:	45c1      	cmp	r9, r8
 8017b8c:	da2f      	bge.n	8017bee <_ZN8touchgfx4RectaNERKS0_+0x7a>
 8017b8e:	8882      	ldrh	r2, [r0, #4]
 8017b90:	444a      	add	r2, r9
 8017b92:	b292      	uxth	r2, r2
 8017b94:	fa0f fe82 	sxth.w	lr, r2
 8017b98:	4577      	cmp	r7, lr
 8017b9a:	da28      	bge.n	8017bee <_ZN8touchgfx4RectaNERKS0_+0x7a>
 8017b9c:	f9b1 5002 	ldrsh.w	r5, [r1, #2]
 8017ba0:	88cb      	ldrh	r3, [r1, #6]
 8017ba2:	f9b0 6002 	ldrsh.w	r6, [r0, #2]
 8017ba6:	442b      	add	r3, r5
 8017ba8:	b21b      	sxth	r3, r3
 8017baa:	429e      	cmp	r6, r3
 8017bac:	da1f      	bge.n	8017bee <_ZN8touchgfx4RectaNERKS0_+0x7a>
 8017bae:	88c3      	ldrh	r3, [r0, #6]
 8017bb0:	4433      	add	r3, r6
 8017bb2:	b29b      	uxth	r3, r3
 8017bb4:	fa0f fc83 	sxth.w	ip, r3
 8017bb8:	4565      	cmp	r5, ip
 8017bba:	da18      	bge.n	8017bee <_ZN8touchgfx4RectaNERKS0_+0x7a>
 8017bbc:	454f      	cmp	r7, r9
 8017bbe:	bfb8      	it	lt
 8017bc0:	464f      	movlt	r7, r9
 8017bc2:	42b5      	cmp	r5, r6
 8017bc4:	bfb8      	it	lt
 8017bc6:	4635      	movlt	r5, r6
 8017bc8:	45f0      	cmp	r8, lr
 8017bca:	bfd8      	it	le
 8017bcc:	4622      	movle	r2, r4
 8017bce:	1bd2      	subs	r2, r2, r7
 8017bd0:	8082      	strh	r2, [r0, #4]
 8017bd2:	884a      	ldrh	r2, [r1, #2]
 8017bd4:	88c9      	ldrh	r1, [r1, #6]
 8017bd6:	8007      	strh	r7, [r0, #0]
 8017bd8:	440a      	add	r2, r1
 8017bda:	8045      	strh	r5, [r0, #2]
 8017bdc:	b292      	uxth	r2, r2
 8017bde:	b211      	sxth	r1, r2
 8017be0:	458c      	cmp	ip, r1
 8017be2:	bfa8      	it	ge
 8017be4:	4613      	movge	r3, r2
 8017be6:	1b5b      	subs	r3, r3, r5
 8017be8:	80c3      	strh	r3, [r0, #6]
 8017bea:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8017bee:	2300      	movs	r3, #0
 8017bf0:	8003      	strh	r3, [r0, #0]
 8017bf2:	8043      	strh	r3, [r0, #2]
 8017bf4:	8083      	strh	r3, [r0, #4]
 8017bf6:	80c3      	strh	r3, [r0, #6]
 8017bf8:	e7f7      	b.n	8017bea <_ZN8touchgfx4RectaNERKS0_+0x76>

08017bfa <_ZNK8touchgfx4Rect7isEmptyEv>:
 8017bfa:	f9b0 3004 	ldrsh.w	r3, [r0, #4]
 8017bfe:	2b00      	cmp	r3, #0
 8017c00:	dd06      	ble.n	8017c10 <_ZNK8touchgfx4Rect7isEmptyEv+0x16>
 8017c02:	f9b0 0006 	ldrsh.w	r0, [r0, #6]
 8017c06:	2800      	cmp	r0, #0
 8017c08:	bfcc      	ite	gt
 8017c0a:	2000      	movgt	r0, #0
 8017c0c:	2001      	movle	r0, #1
 8017c0e:	4770      	bx	lr
 8017c10:	2001      	movs	r0, #1
 8017c12:	4770      	bx	lr

08017c14 <_ZNK8touchgfx9Container16getContainedAreaEv>:
 8017c14:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8017c18:	2300      	movs	r3, #0
 8017c1a:	4604      	mov	r4, r0
 8017c1c:	6a8d      	ldr	r5, [r1, #40]	@ 0x28
 8017c1e:	8003      	strh	r3, [r0, #0]
 8017c20:	8043      	strh	r3, [r0, #2]
 8017c22:	8083      	strh	r3, [r0, #4]
 8017c24:	80c3      	strh	r3, [r0, #6]
 8017c26:	2d00      	cmp	r5, #0
 8017c28:	d040      	beq.n	8017cac <_ZNK8touchgfx9Container16getContainedAreaEv+0x98>
 8017c2a:	1d28      	adds	r0, r5, #4
 8017c2c:	f7ff ffe5 	bl	8017bfa <_ZNK8touchgfx4Rect7isEmptyEv>
 8017c30:	b988      	cbnz	r0, 8017c56 <_ZNK8touchgfx9Container16getContainedAreaEv+0x42>
 8017c32:	4620      	mov	r0, r4
 8017c34:	f7ff ffe1 	bl	8017bfa <_ZNK8touchgfx4Rect7isEmptyEv>
 8017c38:	f9b5 2004 	ldrsh.w	r2, [r5, #4]
 8017c3c:	f9b5 3006 	ldrsh.w	r3, [r5, #6]
 8017c40:	f9b5 e008 	ldrsh.w	lr, [r5, #8]
 8017c44:	f9b5 c00a 	ldrsh.w	ip, [r5, #10]
 8017c48:	b138      	cbz	r0, 8017c5a <_ZNK8touchgfx9Container16getContainedAreaEv+0x46>
 8017c4a:	8022      	strh	r2, [r4, #0]
 8017c4c:	8063      	strh	r3, [r4, #2]
 8017c4e:	f8a4 e004 	strh.w	lr, [r4, #4]
 8017c52:	f8a4 c006 	strh.w	ip, [r4, #6]
 8017c56:	69ad      	ldr	r5, [r5, #24]
 8017c58:	e7e5      	b.n	8017c26 <_ZNK8touchgfx9Container16getContainedAreaEv+0x12>
 8017c5a:	f9b4 0000 	ldrsh.w	r0, [r4]
 8017c5e:	f9b4 1002 	ldrsh.w	r1, [r4, #2]
 8017c62:	4290      	cmp	r0, r2
 8017c64:	4607      	mov	r7, r0
 8017c66:	f8b4 8004 	ldrh.w	r8, [r4, #4]
 8017c6a:	460e      	mov	r6, r1
 8017c6c:	bfa8      	it	ge
 8017c6e:	4617      	movge	r7, r2
 8017c70:	4299      	cmp	r1, r3
 8017c72:	4472      	add	r2, lr
 8017c74:	f8b4 e006 	ldrh.w	lr, [r4, #6]
 8017c78:	bfa8      	it	ge
 8017c7a:	461e      	movge	r6, r3
 8017c7c:	4440      	add	r0, r8
 8017c7e:	4471      	add	r1, lr
 8017c80:	4463      	add	r3, ip
 8017c82:	b200      	sxth	r0, r0
 8017c84:	8027      	strh	r7, [r4, #0]
 8017c86:	b212      	sxth	r2, r2
 8017c88:	8066      	strh	r6, [r4, #2]
 8017c8a:	b209      	sxth	r1, r1
 8017c8c:	b21b      	sxth	r3, r3
 8017c8e:	4290      	cmp	r0, r2
 8017c90:	bfac      	ite	ge
 8017c92:	ebc7 0200 	rsbge	r2, r7, r0
 8017c96:	ebc7 0202 	rsblt	r2, r7, r2
 8017c9a:	4299      	cmp	r1, r3
 8017c9c:	bfac      	ite	ge
 8017c9e:	ebc6 0301 	rsbge	r3, r6, r1
 8017ca2:	ebc6 0303 	rsblt	r3, r6, r3
 8017ca6:	80a2      	strh	r2, [r4, #4]
 8017ca8:	80e3      	strh	r3, [r4, #6]
 8017caa:	e7d4      	b.n	8017c56 <_ZNK8touchgfx9Container16getContainedAreaEv+0x42>
 8017cac:	4620      	mov	r0, r4
 8017cae:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08017cb2 <_ZNK8touchgfx9Container4drawERKNS_4RectE>:
 8017cb2:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 8017cb6:	f890 3025 	ldrb.w	r3, [r0, #37]	@ 0x25
 8017cba:	b383      	cbz	r3, 8017d1e <_ZNK8touchgfx9Container4drawERKNS_4RectE+0x6c>
 8017cbc:	6a84      	ldr	r4, [r0, #40]	@ 0x28
 8017cbe:	b374      	cbz	r4, 8017d1e <_ZNK8touchgfx9Container4drawERKNS_4RectE+0x6c>
 8017cc0:	f9b1 5000 	ldrsh.w	r5, [r1]
 8017cc4:	f9b1 6002 	ldrsh.w	r6, [r1, #2]
 8017cc8:	f9b1 7004 	ldrsh.w	r7, [r1, #4]
 8017ccc:	f9b1 8006 	ldrsh.w	r8, [r1, #6]
 8017cd0:	f894 3025 	ldrb.w	r3, [r4, #37]	@ 0x25
 8017cd4:	b303      	cbz	r3, 8017d18 <_ZNK8touchgfx9Container4drawERKNS_4RectE+0x66>
 8017cd6:	4668      	mov	r0, sp
 8017cd8:	1d21      	adds	r1, r4, #4
 8017cda:	f8ad 5000 	strh.w	r5, [sp]
 8017cde:	f8ad 6002 	strh.w	r6, [sp, #2]
 8017ce2:	f8ad 7004 	strh.w	r7, [sp, #4]
 8017ce6:	f8ad 8006 	strh.w	r8, [sp, #6]
 8017cea:	f7ff ff43 	bl	8017b74 <_ZN8touchgfx4RectaNERKS0_>
 8017cee:	4668      	mov	r0, sp
 8017cf0:	f7ff ff83 	bl	8017bfa <_ZNK8touchgfx4Rect7isEmptyEv>
 8017cf4:	b980      	cbnz	r0, 8017d18 <_ZNK8touchgfx9Container4drawERKNS_4RectE+0x66>
 8017cf6:	f8bd 3000 	ldrh.w	r3, [sp]
 8017cfa:	4669      	mov	r1, sp
 8017cfc:	88a2      	ldrh	r2, [r4, #4]
 8017cfe:	4620      	mov	r0, r4
 8017d00:	1a9b      	subs	r3, r3, r2
 8017d02:	88e2      	ldrh	r2, [r4, #6]
 8017d04:	f8ad 3000 	strh.w	r3, [sp]
 8017d08:	f8bd 3002 	ldrh.w	r3, [sp, #2]
 8017d0c:	1a9b      	subs	r3, r3, r2
 8017d0e:	f8ad 3002 	strh.w	r3, [sp, #2]
 8017d12:	6823      	ldr	r3, [r4, #0]
 8017d14:	689b      	ldr	r3, [r3, #8]
 8017d16:	4798      	blx	r3
 8017d18:	69a4      	ldr	r4, [r4, #24]
 8017d1a:	2c00      	cmp	r4, #0
 8017d1c:	d1d8      	bne.n	8017cd0 <_ZNK8touchgfx9Container4drawERKNS_4RectE+0x1e>
 8017d1e:	b002      	add	sp, #8
 8017d20:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08017d24 <_ZN8touchgfx9Container14setupDrawChainERKNS_4RectEPPNS_8DrawableE>:
 8017d24:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8017d26:	f890 3025 	ldrb.w	r3, [r0, #37]	@ 0x25
 8017d2a:	460d      	mov	r5, r1
 8017d2c:	4616      	mov	r6, r2
 8017d2e:	b323      	cbz	r3, 8017d7a <_ZN8touchgfx9Container14setupDrawChainERKNS_4RectEPPNS_8DrawableE+0x56>
 8017d30:	6a84      	ldr	r4, [r0, #40]	@ 0x28
 8017d32:	b314      	cbz	r4, 8017d7a <_ZN8touchgfx9Container14setupDrawChainERKNS_4RectEPPNS_8DrawableE+0x56>
 8017d34:	f894 3025 	ldrb.w	r3, [r4, #37]	@ 0x25
 8017d38:	b1eb      	cbz	r3, 8017d76 <_ZN8touchgfx9Container14setupDrawChainERKNS_4RectEPPNS_8DrawableE+0x52>
 8017d3a:	6828      	ldr	r0, [r5, #0]
 8017d3c:	466b      	mov	r3, sp
 8017d3e:	6869      	ldr	r1, [r5, #4]
 8017d40:	c303      	stmia	r3!, {r0, r1}
 8017d42:	4668      	mov	r0, sp
 8017d44:	1d21      	adds	r1, r4, #4
 8017d46:	f7ff ff15 	bl	8017b74 <_ZN8touchgfx4RectaNERKS0_>
 8017d4a:	4668      	mov	r0, sp
 8017d4c:	f7ff ff55 	bl	8017bfa <_ZNK8touchgfx4Rect7isEmptyEv>
 8017d50:	b988      	cbnz	r0, 8017d76 <_ZN8touchgfx9Container14setupDrawChainERKNS_4RectEPPNS_8DrawableE+0x52>
 8017d52:	f8bd 3000 	ldrh.w	r3, [sp]
 8017d56:	4669      	mov	r1, sp
 8017d58:	88a2      	ldrh	r2, [r4, #4]
 8017d5a:	4620      	mov	r0, r4
 8017d5c:	1a9b      	subs	r3, r3, r2
 8017d5e:	88e2      	ldrh	r2, [r4, #6]
 8017d60:	f8ad 3000 	strh.w	r3, [sp]
 8017d64:	f8bd 3002 	ldrh.w	r3, [sp, #2]
 8017d68:	1a9b      	subs	r3, r3, r2
 8017d6a:	4632      	mov	r2, r6
 8017d6c:	f8ad 3002 	strh.w	r3, [sp, #2]
 8017d70:	6823      	ldr	r3, [r4, #0]
 8017d72:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8017d74:	4798      	blx	r3
 8017d76:	69a4      	ldr	r4, [r4, #24]
 8017d78:	e7db      	b.n	8017d32 <_ZN8touchgfx9Container14setupDrawChainERKNS_4RectEPPNS_8DrawableE+0xe>
 8017d7a:	b002      	add	sp, #8
 8017d7c:	bd70      	pop	{r4, r5, r6, pc}

08017d7e <_ZNK8touchgfx6Slider15getIndicatorMinEv>:
 8017d7e:	f8b0 00ec 	ldrh.w	r0, [r0, #236]	@ 0xec
 8017d82:	4770      	bx	lr

08017d84 <_ZNK8touchgfx6Slider15getIndicatorMaxEv>:
 8017d84:	f8b0 00ee 	ldrh.w	r0, [r0, #238]	@ 0xee
 8017d88:	4770      	bx	lr

08017d8a <_ZNK8touchgfx6Slider11getMinValueEv>:
 8017d8a:	8e80      	ldrh	r0, [r0, #52]	@ 0x34
 8017d8c:	4770      	bx	lr

08017d8e <_ZNK8touchgfx6Slider11getMaxValueEv>:
 8017d8e:	8f00      	ldrh	r0, [r0, #56]	@ 0x38
 8017d90:	4770      	bx	lr

08017d92 <_ZN8touchgfx6Slider8setValueEi>:
 8017d92:	b570      	push	{r4, r5, r6, lr}
 8017d94:	6803      	ldr	r3, [r0, #0]
 8017d96:	4604      	mov	r4, r0
 8017d98:	e9d3 532a 	ldrd	r5, r3, [r3, #168]	@ 0xa8
 8017d9c:	4798      	blx	r3
 8017d9e:	4601      	mov	r1, r0
 8017da0:	462b      	mov	r3, r5
 8017da2:	4620      	mov	r0, r4
 8017da4:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8017da8:	4718      	bx	r3

08017daa <_ZNK8touchgfx6Slider15valueToPositionEi>:
 8017daa:	b538      	push	{r3, r4, r5, lr}
 8017dac:	e9d0 340d 	ldrd	r3, r4, [r0, #52]	@ 0x34
 8017db0:	4605      	mov	r5, r0
 8017db2:	428c      	cmp	r4, r1
 8017db4:	bfa8      	it	ge
 8017db6:	460c      	movge	r4, r1
 8017db8:	429c      	cmp	r4, r3
 8017dba:	bfac      	ite	ge
 8017dbc:	ebc3 0404 	rsbge	r4, r3, r4
 8017dc0:	ebc3 0403 	rsblt	r4, r3, r3
 8017dc4:	6803      	ldr	r3, [r0, #0]
 8017dc6:	f8d3 30b8 	ldr.w	r3, [r3, #184]	@ 0xb8
 8017dca:	4798      	blx	r3
 8017dcc:	682b      	ldr	r3, [r5, #0]
 8017dce:	fb00 4404 	mla	r4, r0, r4, r4
 8017dd2:	4628      	mov	r0, r5
 8017dd4:	f8d3 30bc 	ldr.w	r3, [r3, #188]	@ 0xbc
 8017dd8:	4798      	blx	r3
 8017dda:	f895 202c 	ldrb.w	r2, [r5, #44]	@ 0x2c
 8017dde:	f9b5 30ec 	ldrsh.w	r3, [r5, #236]	@ 0xec
 8017de2:	2a01      	cmp	r2, #1
 8017de4:	fb94 f0f0 	sdiv	r0, r4, r0
 8017de8:	bf08      	it	eq
 8017dea:	f9b5 20ee 	ldrsheq.w	r2, [r5, #238]	@ 0xee
 8017dee:	4418      	add	r0, r3
 8017df0:	bf04      	itt	eq
 8017df2:	1a10      	subeq	r0, r2, r0
 8017df4:	18c0      	addeq	r0, r0, r3
 8017df6:	b200      	sxth	r0, r0
 8017df8:	bd38      	pop	{r3, r4, r5, pc}

08017dfa <_ZNK8touchgfx6Slider15positionToValueEs>:
 8017dfa:	b570      	push	{r4, r5, r6, lr}
 8017dfc:	f9b0 30ec 	ldrsh.w	r3, [r0, #236]	@ 0xec
 8017e00:	4605      	mov	r5, r0
 8017e02:	460c      	mov	r4, r1
 8017e04:	428b      	cmp	r3, r1
 8017e06:	d109      	bne.n	8017e1c <_ZNK8touchgfx6Slider15positionToValueEs+0x22>
 8017e08:	6b40      	ldr	r0, [r0, #52]	@ 0x34
 8017e0a:	f895 302c 	ldrb.w	r3, [r5, #44]	@ 0x2c
 8017e0e:	2b01      	cmp	r3, #1
 8017e10:	bf01      	itttt	eq
 8017e12:	6bab      	ldreq	r3, [r5, #56]	@ 0x38
 8017e14:	1a18      	subeq	r0, r3, r0
 8017e16:	6b6b      	ldreq	r3, [r5, #52]	@ 0x34
 8017e18:	18c0      	addeq	r0, r0, r3
 8017e1a:	bd70      	pop	{r4, r5, r6, pc}
 8017e1c:	f9b0 30ee 	ldrsh.w	r3, [r0, #238]	@ 0xee
 8017e20:	428b      	cmp	r3, r1
 8017e22:	d101      	bne.n	8017e28 <_ZNK8touchgfx6Slider15positionToValueEs+0x2e>
 8017e24:	6b80      	ldr	r0, [r0, #56]	@ 0x38
 8017e26:	e7f0      	b.n	8017e0a <_ZNK8touchgfx6Slider15positionToValueEs+0x10>
 8017e28:	6803      	ldr	r3, [r0, #0]
 8017e2a:	f8d3 30b8 	ldr.w	r3, [r3, #184]	@ 0xb8
 8017e2e:	4798      	blx	r3
 8017e30:	682b      	ldr	r3, [r5, #0]
 8017e32:	f9b5 10ec 	ldrsh.w	r1, [r5, #236]	@ 0xec
 8017e36:	4606      	mov	r6, r0
 8017e38:	f8d3 30bc 	ldr.w	r3, [r3, #188]	@ 0xbc
 8017e3c:	4628      	mov	r0, r5
 8017e3e:	1a64      	subs	r4, r4, r1
 8017e40:	4798      	blx	r3
 8017e42:	2102      	movs	r1, #2
 8017e44:	682b      	ldr	r3, [r5, #0]
 8017e46:	fb96 f6f1 	sdiv	r6, r6, r1
 8017e4a:	fb00 6404 	mla	r4, r0, r4, r6
 8017e4e:	f8d3 30b8 	ldr.w	r3, [r3, #184]	@ 0xb8
 8017e52:	4628      	mov	r0, r5
 8017e54:	4798      	blx	r3
 8017e56:	6b6b      	ldr	r3, [r5, #52]	@ 0x34
 8017e58:	fb94 f0f0 	sdiv	r0, r4, r0
 8017e5c:	4418      	add	r0, r3
 8017e5e:	e7d4      	b.n	8017e0a <_ZNK8touchgfx6Slider15positionToValueEs+0x10>

08017e60 <_ZNK8touchgfx6Slider18getIndicatorRadiusEv>:
 8017e60:	f890 202c 	ldrb.w	r2, [r0, #44]	@ 0x2c
 8017e64:	2302      	movs	r3, #2
 8017e66:	b92a      	cbnz	r2, 8017e74 <_ZNK8touchgfx6Slider18getIndicatorRadiusEv+0x14>
 8017e68:	f9b0 009c 	ldrsh.w	r0, [r0, #156]	@ 0x9c
 8017e6c:	fb90 f0f3 	sdiv	r0, r0, r3
 8017e70:	b280      	uxth	r0, r0
 8017e72:	4770      	bx	lr
 8017e74:	f9b0 009e 	ldrsh.w	r0, [r0, #158]	@ 0x9e
 8017e78:	e7f8      	b.n	8017e6c <_ZNK8touchgfx6Slider18getIndicatorRadiusEv+0xc>

08017e7a <_ZN8touchgfx6Slider13setValueRangeEii>:
 8017e7a:	6b03      	ldr	r3, [r0, #48]	@ 0x30
 8017e7c:	428b      	cmp	r3, r1
 8017e7e:	b410      	push	{r4}
 8017e80:	db09      	blt.n	8017e96 <_ZN8touchgfx6Slider13setValueRangeEii+0x1c>
 8017e82:	4293      	cmp	r3, r2
 8017e84:	bfa8      	it	ge
 8017e86:	4613      	movge	r3, r2
 8017e88:	6804      	ldr	r4, [r0, #0]
 8017e8a:	f8d4 4094 	ldr.w	r4, [r4, #148]	@ 0x94
 8017e8e:	46a4      	mov	ip, r4
 8017e90:	f85d 4b04 	ldr.w	r4, [sp], #4
 8017e94:	4760      	bx	ip
 8017e96:	460b      	mov	r3, r1
 8017e98:	e7f6      	b.n	8017e88 <_ZN8touchgfx6Slider13setValueRangeEii+0xe>

08017e9a <_ZNK8touchgfx6Slider29getIndicatorPositionRangeSizeEv>:
 8017e9a:	f9b0 20ee 	ldrsh.w	r2, [r0, #238]	@ 0xee
 8017e9e:	f9b0 00ec 	ldrsh.w	r0, [r0, #236]	@ 0xec
 8017ea2:	1a10      	subs	r0, r2, r0
 8017ea4:	4770      	bx	lr

08017ea6 <_ZNK8touchgfx6Slider17getValueRangeSizeEv>:
 8017ea6:	e9d0 020d 	ldrd	r0, r2, [r0, #52]	@ 0x34
 8017eaa:	1a10      	subs	r0, r2, r0
 8017eac:	4770      	bx	lr
	...

08017eb0 <_ZN8touchgfx6Slider13setValueRangeEiii>:
 8017eb0:	4291      	cmp	r1, r2
 8017eb2:	b510      	push	{r4, lr}
 8017eb4:	db06      	blt.n	8017ec4 <_ZN8touchgfx6Slider13setValueRangeEiii+0x14>
 8017eb6:	4b08      	ldr	r3, [pc, #32]	@ (8017ed8 <_ZN8touchgfx6Slider13setValueRangeEiii+0x28>)
 8017eb8:	f240 110d 	movw	r1, #269	@ 0x10d
 8017ebc:	4a07      	ldr	r2, [pc, #28]	@ (8017edc <_ZN8touchgfx6Slider13setValueRangeEiii+0x2c>)
 8017ebe:	4808      	ldr	r0, [pc, #32]	@ (8017ee0 <_ZN8touchgfx6Slider13setValueRangeEiii+0x30>)
 8017ec0:	f012 fd38 	bl	802a934 <__assert_func>
 8017ec4:	e9c0 120d 	strd	r1, r2, [r0, #52]	@ 0x34
 8017ec8:	6802      	ldr	r2, [r0, #0]
 8017eca:	4619      	mov	r1, r3
 8017ecc:	f8d2 20a4 	ldr.w	r2, [r2, #164]	@ 0xa4
 8017ed0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8017ed4:	4710      	bx	r2
 8017ed6:	bf00      	nop
 8017ed8:	0802d96a 	.word	0x0802d96a
 8017edc:	0802dc0d 	.word	0x0802dc0d
 8017ee0:	0802d9c2 	.word	0x0802d9c2

08017ee4 <_ZN8touchgfx6Slider16handleClickEventERKNS_10ClickEventE>:
 8017ee4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8017ee8:	790b      	ldrb	r3, [r1, #4]
 8017eea:	4604      	mov	r4, r0
 8017eec:	460d      	mov	r5, r1
 8017eee:	b323      	cbz	r3, 8017f3a <_ZN8touchgfx6Slider16handleClickEventERKNS_10ClickEventE+0x56>
 8017ef0:	2b01      	cmp	r3, #1
 8017ef2:	d135      	bne.n	8017f60 <_ZN8touchgfx6Slider16handleClickEventERKNS_10ClickEventE+0x7c>
 8017ef4:	6823      	ldr	r3, [r4, #0]
 8017ef6:	f894 202c 	ldrb.w	r2, [r4, #44]	@ 0x2c
 8017efa:	f8d3 70a8 	ldr.w	r7, [r3, #168]	@ 0xa8
 8017efe:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8017f02:	2a00      	cmp	r2, #0
 8017f04:	d12a      	bne.n	8017f5c <_ZN8touchgfx6Slider16handleClickEventERKNS_10ClickEventE+0x78>
 8017f06:	88ee      	ldrh	r6, [r5, #6]
 8017f08:	4620      	mov	r0, r4
 8017f0a:	4798      	blx	r3
 8017f0c:	1a31      	subs	r1, r6, r0
 8017f0e:	4620      	mov	r0, r4
 8017f10:	b209      	sxth	r1, r1
 8017f12:	47b8      	blx	r7
 8017f14:	792b      	ldrb	r3, [r5, #4]
 8017f16:	2b01      	cmp	r3, #1
 8017f18:	d122      	bne.n	8017f60 <_ZN8touchgfx6Slider16handleClickEventERKNS_10ClickEventE+0x7c>
 8017f1a:	f8d4 00f4 	ldr.w	r0, [r4, #244]	@ 0xf4
 8017f1e:	b1f8      	cbz	r0, 8017f60 <_ZN8touchgfx6Slider16handleClickEventERKNS_10ClickEventE+0x7c>
 8017f20:	6803      	ldr	r3, [r0, #0]
 8017f22:	68db      	ldr	r3, [r3, #12]
 8017f24:	4798      	blx	r3
 8017f26:	b1d8      	cbz	r0, 8017f60 <_ZN8touchgfx6Slider16handleClickEventERKNS_10ClickEventE+0x7c>
 8017f28:	f8d4 00f4 	ldr.w	r0, [r4, #244]	@ 0xf4
 8017f2c:	4621      	mov	r1, r4
 8017f2e:	6b22      	ldr	r2, [r4, #48]	@ 0x30
 8017f30:	6803      	ldr	r3, [r0, #0]
 8017f32:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8017f36:	689b      	ldr	r3, [r3, #8]
 8017f38:	4718      	bx	r3
 8017f3a:	f8d0 00f0 	ldr.w	r0, [r0, #240]	@ 0xf0
 8017f3e:	2800      	cmp	r0, #0
 8017f40:	d0d8      	beq.n	8017ef4 <_ZN8touchgfx6Slider16handleClickEventERKNS_10ClickEventE+0x10>
 8017f42:	6803      	ldr	r3, [r0, #0]
 8017f44:	68db      	ldr	r3, [r3, #12]
 8017f46:	4798      	blx	r3
 8017f48:	2800      	cmp	r0, #0
 8017f4a:	d0d3      	beq.n	8017ef4 <_ZN8touchgfx6Slider16handleClickEventERKNS_10ClickEventE+0x10>
 8017f4c:	f8d4 00f0 	ldr.w	r0, [r4, #240]	@ 0xf0
 8017f50:	4621      	mov	r1, r4
 8017f52:	6b22      	ldr	r2, [r4, #48]	@ 0x30
 8017f54:	6803      	ldr	r3, [r0, #0]
 8017f56:	689b      	ldr	r3, [r3, #8]
 8017f58:	4798      	blx	r3
 8017f5a:	e7cb      	b.n	8017ef4 <_ZN8touchgfx6Slider16handleClickEventERKNS_10ClickEventE+0x10>
 8017f5c:	892e      	ldrh	r6, [r5, #8]
 8017f5e:	e7d3      	b.n	8017f08 <_ZN8touchgfx6Slider16handleClickEventERKNS_10ClickEventE+0x24>
 8017f60:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08017f64 <_ZN8touchgfx6Slider15handleDragEventERKNS_9DragEventE>:
 8017f64:	b570      	push	{r4, r5, r6, lr}
 8017f66:	6803      	ldr	r3, [r0, #0]
 8017f68:	4604      	mov	r4, r0
 8017f6a:	f890 202c 	ldrb.w	r2, [r0, #44]	@ 0x2c
 8017f6e:	f8d3 60a8 	ldr.w	r6, [r3, #168]	@ 0xa8
 8017f72:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8017f76:	b942      	cbnz	r2, 8017f8a <_ZN8touchgfx6Slider15handleDragEventERKNS_9DragEventE+0x26>
 8017f78:	894d      	ldrh	r5, [r1, #10]
 8017f7a:	4798      	blx	r3
 8017f7c:	1a29      	subs	r1, r5, r0
 8017f7e:	4633      	mov	r3, r6
 8017f80:	4620      	mov	r0, r4
 8017f82:	b209      	sxth	r1, r1
 8017f84:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8017f88:	4718      	bx	r3
 8017f8a:	898d      	ldrh	r5, [r1, #12]
 8017f8c:	e7f5      	b.n	8017f7a <_ZN8touchgfx6Slider15handleDragEventERKNS_9DragEventE+0x16>
	...

08017f90 <_ZN8touchgfx6Slider21setupHorizontalSliderEttttt>:
 8017f90:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8017f94:	f8bd 7030 	ldrh.w	r7, [sp, #48]	@ 0x30
 8017f98:	4604      	mov	r4, r0
 8017f9a:	f8bd 6034 	ldrh.w	r6, [sp, #52]	@ 0x34
 8017f9e:	4689      	mov	r9, r1
 8017fa0:	4690      	mov	r8, r2
 8017fa2:	461d      	mov	r5, r3
 8017fa4:	42b7      	cmp	r7, r6
 8017fa6:	d305      	bcc.n	8017fb4 <_ZN8touchgfx6Slider21setupHorizontalSliderEttttt+0x24>
 8017fa8:	4b26      	ldr	r3, [pc, #152]	@ (8018044 <_ZN8touchgfx6Slider21setupHorizontalSliderEttttt+0xb4>)
 8017faa:	2149      	movs	r1, #73	@ 0x49
 8017fac:	4a26      	ldr	r2, [pc, #152]	@ (8018048 <_ZN8touchgfx6Slider21setupHorizontalSliderEttttt+0xb8>)
 8017fae:	4827      	ldr	r0, [pc, #156]	@ (801804c <_ZN8touchgfx6Slider21setupHorizontalSliderEttttt+0xbc>)
 8017fb0:	f012 fcc0 	bl	802a934 <__assert_func>
 8017fb4:	f04f 0a00 	mov.w	sl, #0
 8017fb8:	b213      	sxth	r3, r2
 8017fba:	fa0f fb81 	sxth.w	fp, r1
 8017fbe:	303c      	adds	r0, #60	@ 0x3c
 8017fc0:	f800 ac10 	strb.w	sl, [r0, #-16]
 8017fc4:	461a      	mov	r2, r3
 8017fc6:	4659      	mov	r1, fp
 8017fc8:	9301      	str	r3, [sp, #4]
 8017fca:	f7eb ffc5 	bl	8003f58 <_ZN8touchgfx8Drawable5setXYEss>
 8017fce:	9b01      	ldr	r3, [sp, #4]
 8017fd0:	4659      	mov	r1, fp
 8017fd2:	f104 00c0 	add.w	r0, r4, #192	@ 0xc0
 8017fd6:	461a      	mov	r2, r3
 8017fd8:	f7eb ffbe 	bl	8003f58 <_ZN8touchgfx8Drawable5setXYEss>
 8017fdc:	4652      	mov	r2, sl
 8017fde:	4651      	mov	r1, sl
 8017fe0:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8017fe4:	f7eb ffb8 	bl	8003f58 <_ZN8touchgfx8Drawable5setXYEss>
 8017fe8:	f8b4 1044 	ldrh.w	r1, [r4, #68]	@ 0x44
 8017fec:	f8b4 2046 	ldrh.w	r2, [r4, #70]	@ 0x46
 8017ff0:	4620      	mov	r0, r4
 8017ff2:	4489      	add	r9, r1
 8017ff4:	f8b4 109c 	ldrh.w	r1, [r4, #156]	@ 0x9c
 8017ff8:	4490      	add	r8, r2
 8017ffa:	f8b4 209e 	ldrh.w	r2, [r4, #158]	@ 0x9e
 8017ffe:	4431      	add	r1, r6
 8018000:	fa1f f989 	uxth.w	r9, r9
 8018004:	442a      	add	r2, r5
 8018006:	fa1f f888 	uxth.w	r8, r8
 801800a:	b289      	uxth	r1, r1
 801800c:	f8a4 509a 	strh.w	r5, [r4, #154]	@ 0x9a
 8018010:	b292      	uxth	r2, r2
 8018012:	f8a4 70ec 	strh.w	r7, [r4, #236]	@ 0xec
 8018016:	4589      	cmp	r9, r1
 8018018:	f8a4 60ee 	strh.w	r6, [r4, #238]	@ 0xee
 801801c:	bf8c      	ite	hi
 801801e:	fa0f f189 	sxthhi.w	r1, r9
 8018022:	b209      	sxthls	r1, r1
 8018024:	4590      	cmp	r8, r2
 8018026:	bf8c      	ite	hi
 8018028:	fa0f f288 	sxthhi.w	r2, r8
 801802c:	b212      	sxthls	r2, r2
 801802e:	f7eb ffef 	bl	8004010 <_ZN8touchgfx8Drawable14setWidthHeightEss>
 8018032:	6823      	ldr	r3, [r4, #0]
 8018034:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 8018036:	4620      	mov	r0, r4
 8018038:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 801803c:	b003      	add	sp, #12
 801803e:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8018042:	4718      	bx	r3
 8018044:	0802da64 	.word	0x0802da64
 8018048:	0802dcae 	.word	0x0802dcae
 801804c:	0802d9c2 	.word	0x0802d9c2

08018050 <_ZN8touchgfx6Slider19setupVerticalSliderEttttt>:
 8018050:	e92d 4ff1 	stmdb	sp!, {r0, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8018054:	f8bd 7028 	ldrh.w	r7, [sp, #40]	@ 0x28
 8018058:	4604      	mov	r4, r0
 801805a:	f8bd 602c 	ldrh.w	r6, [sp, #44]	@ 0x2c
 801805e:	4689      	mov	r9, r1
 8018060:	4690      	mov	r8, r2
 8018062:	461d      	mov	r5, r3
 8018064:	42b7      	cmp	r7, r6
 8018066:	d305      	bcc.n	8018074 <_ZN8touchgfx6Slider19setupVerticalSliderEttttt+0x24>
 8018068:	4b22      	ldr	r3, [pc, #136]	@ (80180f4 <_ZN8touchgfx6Slider19setupVerticalSliderEttttt+0xa4>)
 801806a:	2164      	movs	r1, #100	@ 0x64
 801806c:	4a22      	ldr	r2, [pc, #136]	@ (80180f8 <_ZN8touchgfx6Slider19setupVerticalSliderEttttt+0xa8>)
 801806e:	4823      	ldr	r0, [pc, #140]	@ (80180fc <_ZN8touchgfx6Slider19setupVerticalSliderEttttt+0xac>)
 8018070:	f012 fc60 	bl	802a934 <__assert_func>
 8018074:	2301      	movs	r3, #1
 8018076:	fa0f fa81 	sxth.w	sl, r1
 801807a:	fa0f fb82 	sxth.w	fp, r2
 801807e:	303c      	adds	r0, #60	@ 0x3c
 8018080:	f800 3c10 	strb.w	r3, [r0, #-16]
 8018084:	4651      	mov	r1, sl
 8018086:	465a      	mov	r2, fp
 8018088:	f7eb ff66 	bl	8003f58 <_ZN8touchgfx8Drawable5setXYEss>
 801808c:	465a      	mov	r2, fp
 801808e:	4651      	mov	r1, sl
 8018090:	f104 00c0 	add.w	r0, r4, #192	@ 0xc0
 8018094:	f7eb ff60 	bl	8003f58 <_ZN8touchgfx8Drawable5setXYEss>
 8018098:	f8b4 1044 	ldrh.w	r1, [r4, #68]	@ 0x44
 801809c:	f8b4 2046 	ldrh.w	r2, [r4, #70]	@ 0x46
 80180a0:	4620      	mov	r0, r4
 80180a2:	4489      	add	r9, r1
 80180a4:	f8b4 109c 	ldrh.w	r1, [r4, #156]	@ 0x9c
 80180a8:	4490      	add	r8, r2
 80180aa:	f8b4 209e 	ldrh.w	r2, [r4, #158]	@ 0x9e
 80180ae:	4429      	add	r1, r5
 80180b0:	fa1f f989 	uxth.w	r9, r9
 80180b4:	4432      	add	r2, r6
 80180b6:	fa1f f888 	uxth.w	r8, r8
 80180ba:	b289      	uxth	r1, r1
 80180bc:	f8a4 5098 	strh.w	r5, [r4, #152]	@ 0x98
 80180c0:	b292      	uxth	r2, r2
 80180c2:	f8a4 70ec 	strh.w	r7, [r4, #236]	@ 0xec
 80180c6:	4589      	cmp	r9, r1
 80180c8:	f8a4 60ee 	strh.w	r6, [r4, #238]	@ 0xee
 80180cc:	bf8c      	ite	hi
 80180ce:	fa0f f189 	sxthhi.w	r1, r9
 80180d2:	b209      	sxthls	r1, r1
 80180d4:	4590      	cmp	r8, r2
 80180d6:	bf8c      	ite	hi
 80180d8:	fa0f f288 	sxthhi.w	r2, r8
 80180dc:	b212      	sxthls	r2, r2
 80180de:	f7eb ff97 	bl	8004010 <_ZN8touchgfx8Drawable14setWidthHeightEss>
 80180e2:	6823      	ldr	r3, [r4, #0]
 80180e4:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 80180e6:	4620      	mov	r0, r4
 80180e8:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 80180ec:	b001      	add	sp, #4
 80180ee:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80180f2:	4718      	bx	r3
 80180f4:	0802d9f2 	.word	0x0802d9f2
 80180f8:	0802dc49 	.word	0x0802dc49
 80180fc:	0802d9c2 	.word	0x0802d9c2

08018100 <_ZN8touchgfx6Slider23updateIndicatorPositionEs>:
 8018100:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8018104:	f9b0 80ec 	ldrsh.w	r8, [r0, #236]	@ 0xec
 8018108:	4604      	mov	r4, r0
 801810a:	3094      	adds	r0, #148	@ 0x94
 801810c:	4588      	cmp	r8, r1
 801810e:	f894 302c 	ldrb.w	r3, [r4, #44]	@ 0x2c
 8018112:	f104 06c0 	add.w	r6, r4, #192	@ 0xc0
 8018116:	bfb8      	it	lt
 8018118:	4688      	movlt	r8, r1
 801811a:	f9b0 105a 	ldrsh.w	r1, [r0, #90]	@ 0x5a
 801811e:	4588      	cmp	r8, r1
 8018120:	bfa8      	it	ge
 8018122:	4688      	movge	r8, r1
 8018124:	fa1f f788 	uxth.w	r7, r8
 8018128:	2b00      	cmp	r3, #0
 801812a:	d12f      	bne.n	801818c <_ZN8touchgfx6Slider23updateIndicatorPositionEs+0x8c>
 801812c:	f9b4 209a 	ldrsh.w	r2, [r4, #154]	@ 0x9a
 8018130:	4641      	mov	r1, r8
 8018132:	f7eb ffba 	bl	80040aa <_ZN8touchgfx8Drawable6moveToEss>
 8018136:	4630      	mov	r0, r6
 8018138:	f004 fa58 	bl	801c5ec <_ZNK8touchgfx8Drawable10invalidateEv>
 801813c:	f8b4 20c4 	ldrh.w	r2, [r4, #196]	@ 0xc4
 8018140:	6823      	ldr	r3, [r4, #0]
 8018142:	4620      	mov	r0, r4
 8018144:	1abf      	subs	r7, r7, r2
 8018146:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 801814a:	b2bf      	uxth	r7, r7
 801814c:	4798      	blx	r3
 801814e:	4407      	add	r7, r0
 8018150:	f8a4 70c8 	strh.w	r7, [r4, #200]	@ 0xc8
 8018154:	4630      	mov	r0, r6
 8018156:	f004 fa49 	bl	801c5ec <_ZNK8touchgfx8Drawable10invalidateEv>
 801815a:	6823      	ldr	r3, [r4, #0]
 801815c:	4641      	mov	r1, r8
 801815e:	4620      	mov	r0, r4
 8018160:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8018164:	4798      	blx	r3
 8018166:	6320      	str	r0, [r4, #48]	@ 0x30
 8018168:	f8d4 00f8 	ldr.w	r0, [r4, #248]	@ 0xf8
 801816c:	2800      	cmp	r0, #0
 801816e:	d03d      	beq.n	80181ec <_ZN8touchgfx6Slider23updateIndicatorPositionEs+0xec>
 8018170:	6803      	ldr	r3, [r0, #0]
 8018172:	68db      	ldr	r3, [r3, #12]
 8018174:	4798      	blx	r3
 8018176:	2800      	cmp	r0, #0
 8018178:	d038      	beq.n	80181ec <_ZN8touchgfx6Slider23updateIndicatorPositionEs+0xec>
 801817a:	f8d4 00f8 	ldr.w	r0, [r4, #248]	@ 0xf8
 801817e:	4621      	mov	r1, r4
 8018180:	6b22      	ldr	r2, [r4, #48]	@ 0x30
 8018182:	6803      	ldr	r3, [r0, #0]
 8018184:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8018188:	689b      	ldr	r3, [r3, #8]
 801818a:	4718      	bx	r3
 801818c:	4642      	mov	r2, r8
 801818e:	f9b4 1098 	ldrsh.w	r1, [r4, #152]	@ 0x98
 8018192:	f7eb ff8a 	bl	80040aa <_ZN8touchgfx8Drawable6moveToEss>
 8018196:	4630      	mov	r0, r6
 8018198:	f004 fa28 	bl	801c5ec <_ZNK8touchgfx8Drawable10invalidateEv>
 801819c:	f8b4 0042 	ldrh.w	r0, [r4, #66]	@ 0x42
 80181a0:	f8b4 5046 	ldrh.w	r5, [r4, #70]	@ 0x46
 80181a4:	6823      	ldr	r3, [r4, #0]
 80181a6:	4405      	add	r5, r0
 80181a8:	4620      	mov	r0, r4
 80181aa:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 80181ae:	b2ad      	uxth	r5, r5
 80181b0:	4798      	blx	r3
 80181b2:	6823      	ldr	r3, [r4, #0]
 80181b4:	1bed      	subs	r5, r5, r7
 80181b6:	f9b4 a0c4 	ldrsh.w	sl, [r4, #196]	@ 0xc4
 80181ba:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 80181be:	1a2d      	subs	r5, r5, r0
 80181c0:	4620      	mov	r0, r4
 80181c2:	4798      	blx	r3
 80181c4:	4438      	add	r0, r7
 80181c6:	b2ad      	uxth	r5, r5
 80181c8:	f9b4 90c8 	ldrsh.w	r9, [r4, #200]	@ 0xc8
 80181cc:	b202      	sxth	r2, r0
 80181ce:	4651      	mov	r1, sl
 80181d0:	4630      	mov	r0, r6
 80181d2:	f7eb fec1 	bl	8003f58 <_ZN8touchgfx8Drawable5setXYEss>
 80181d6:	4630      	mov	r0, r6
 80181d8:	b22a      	sxth	r2, r5
 80181da:	4649      	mov	r1, r9
 80181dc:	f7eb ff18 	bl	8004010 <_ZN8touchgfx8Drawable14setWidthHeightEss>
 80181e0:	f8b4 0072 	ldrh.w	r0, [r4, #114]	@ 0x72
 80181e4:	1a2d      	subs	r5, r5, r0
 80181e6:	f8a4 506e 	strh.w	r5, [r4, #110]	@ 0x6e
 80181ea:	e7b3      	b.n	8018154 <_ZN8touchgfx6Slider23updateIndicatorPositionEs+0x54>
 80181ec:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

080181f0 <_ZN8touchgfx6SliderC1Ev>:
 80181f0:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80181f4:	4604      	mov	r4, r0
 80181f6:	2500      	movs	r5, #0
 80181f8:	f7eb fdee 	bl	8003dd8 <_ZN8touchgfx8DrawableC1Ev>
 80181fc:	ae02      	add	r6, sp, #8
 80181fe:	4b28      	ldr	r3, [pc, #160]	@ (80182a0 <_ZN8touchgfx6SliderC1Ev+0xb0>)
 8018200:	f64f 77ff 	movw	r7, #65535	@ 0xffff
 8018204:	f04f 0b01 	mov.w	fp, #1
 8018208:	f104 093c 	add.w	r9, r4, #60	@ 0x3c
 801820c:	f104 0a68 	add.w	sl, r4, #104	@ 0x68
 8018210:	6023      	str	r3, [r4, #0]
 8018212:	f826 7d04 	strh.w	r7, [r6, #-4]!
 8018216:	4648      	mov	r0, r9
 8018218:	4631      	mov	r1, r6
 801821a:	62a5      	str	r5, [r4, #40]	@ 0x28
 801821c:	f884 502c 	strb.w	r5, [r4, #44]	@ 0x2c
 8018220:	f104 0894 	add.w	r8, r4, #148	@ 0x94
 8018224:	f8c4 b038 	str.w	fp, [r4, #56]	@ 0x38
 8018228:	e9c4 550c 	strd	r5, r5, [r4, #48]	@ 0x30
 801822c:	f7ed fb70 	bl	8005910 <_ZN8touchgfx5ImageC1ERKNS_6BitmapE>
 8018230:	4631      	mov	r1, r6
 8018232:	4650      	mov	r0, sl
 8018234:	f8ad 7004 	strh.w	r7, [sp, #4]
 8018238:	f7ed fb6a 	bl	8005910 <_ZN8touchgfx5ImageC1ERKNS_6BitmapE>
 801823c:	4631      	mov	r1, r6
 801823e:	f104 06c0 	add.w	r6, r4, #192	@ 0xc0
 8018242:	4640      	mov	r0, r8
 8018244:	f8ad 7004 	strh.w	r7, [sp, #4]
 8018248:	f7ed fb62 	bl	8005910 <_ZN8touchgfx5ImageC1ERKNS_6BitmapE>
 801824c:	4630      	mov	r0, r6
 801824e:	f7eb fdc3 	bl	8003dd8 <_ZN8touchgfx8DrawableC1Ev>
 8018252:	4b14      	ldr	r3, [pc, #80]	@ (80182a4 <_ZN8touchgfx6SliderC1Ev+0xb4>)
 8018254:	4651      	mov	r1, sl
 8018256:	4630      	mov	r0, r6
 8018258:	f8c4 30c0 	str.w	r3, [r4, #192]	@ 0xc0
 801825c:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8018260:	f8c4 50e8 	str.w	r5, [r4, #232]	@ 0xe8
 8018264:	f884 b024 	strb.w	fp, [r4, #36]	@ 0x24
 8018268:	e9c4 353b 	strd	r3, r5, [r4, #236]	@ 0xec
 801826c:	e9c4 553d 	strd	r5, r5, [r4, #244]	@ 0xf4
 8018270:	f7ff fb3e 	bl	80178f0 <_ZN8touchgfx9Container3addERNS_8DrawableE>
 8018274:	4649      	mov	r1, r9
 8018276:	4620      	mov	r0, r4
 8018278:	f7ff fb3a 	bl	80178f0 <_ZN8touchgfx9Container3addERNS_8DrawableE>
 801827c:	4631      	mov	r1, r6
 801827e:	4620      	mov	r0, r4
 8018280:	f7ff fb36 	bl	80178f0 <_ZN8touchgfx9Container3addERNS_8DrawableE>
 8018284:	4641      	mov	r1, r8
 8018286:	4620      	mov	r0, r4
 8018288:	f7ff fb32 	bl	80178f0 <_ZN8touchgfx9Container3addERNS_8DrawableE>
 801828c:	4620      	mov	r0, r4
 801828e:	2264      	movs	r2, #100	@ 0x64
 8018290:	4629      	mov	r1, r5
 8018292:	f7ff fdf2 	bl	8017e7a <_ZN8touchgfx6Slider13setValueRangeEii>
 8018296:	4620      	mov	r0, r4
 8018298:	b003      	add	sp, #12
 801829a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801829e:	bf00      	nop
 80182a0:	0802dae0 	.word	0x0802dae0
 80182a4:	0802d7cc 	.word	0x0802d7cc

080182a8 <_ZN8touchgfx6Slider10setBitmapsERKNS_6BitmapES3_S3_>:
 80182a8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80182ac:	4615      	mov	r5, r2
 80182ae:	4604      	mov	r4, r0
 80182b0:	4608      	mov	r0, r1
 80182b2:	460e      	mov	r6, r1
 80182b4:	461f      	mov	r7, r3
 80182b6:	f006 facb 	bl	801e850 <_ZNK8touchgfx6Bitmap8getWidthEv>
 80182ba:	4680      	mov	r8, r0
 80182bc:	4628      	mov	r0, r5
 80182be:	f006 fac7 	bl	801e850 <_ZNK8touchgfx6Bitmap8getWidthEv>
 80182c2:	4580      	cmp	r8, r0
 80182c4:	d005      	beq.n	80182d2 <_ZN8touchgfx6Slider10setBitmapsERKNS_6BitmapES3_S3_+0x2a>
 80182c6:	4b14      	ldr	r3, [pc, #80]	@ (8018318 <_ZN8touchgfx6Slider10setBitmapsERKNS_6BitmapES3_S3_+0x70>)
 80182c8:	213a      	movs	r1, #58	@ 0x3a
 80182ca:	4a14      	ldr	r2, [pc, #80]	@ (801831c <_ZN8touchgfx6Slider10setBitmapsERKNS_6BitmapES3_S3_+0x74>)
 80182cc:	4814      	ldr	r0, [pc, #80]	@ (8018320 <_ZN8touchgfx6Slider10setBitmapsERKNS_6BitmapES3_S3_+0x78>)
 80182ce:	f012 fb31 	bl	802a934 <__assert_func>
 80182d2:	4630      	mov	r0, r6
 80182d4:	f006 faf6 	bl	801e8c4 <_ZNK8touchgfx6Bitmap9getHeightEv>
 80182d8:	4680      	mov	r8, r0
 80182da:	4628      	mov	r0, r5
 80182dc:	f006 faf2 	bl	801e8c4 <_ZNK8touchgfx6Bitmap9getHeightEv>
 80182e0:	4580      	cmp	r8, r0
 80182e2:	d1f0      	bne.n	80182c6 <_ZN8touchgfx6Slider10setBitmapsERKNS_6BitmapES3_S3_+0x1e>
 80182e4:	4631      	mov	r1, r6
 80182e6:	f104 003c 	add.w	r0, r4, #60	@ 0x3c
 80182ea:	f001 fca6 	bl	8019c3a <_ZN8touchgfx5Image9setBitmapERKNS_6BitmapE>
 80182ee:	4629      	mov	r1, r5
 80182f0:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 80182f4:	f001 fca1 	bl	8019c3a <_ZN8touchgfx5Image9setBitmapERKNS_6BitmapE>
 80182f8:	4639      	mov	r1, r7
 80182fa:	f104 0094 	add.w	r0, r4, #148	@ 0x94
 80182fe:	f001 fc9c 	bl	8019c3a <_ZN8touchgfx5Image9setBitmapERKNS_6BitmapE>
 8018302:	f9b4 2072 	ldrsh.w	r2, [r4, #114]	@ 0x72
 8018306:	f9b4 1070 	ldrsh.w	r1, [r4, #112]	@ 0x70
 801830a:	f104 00c0 	add.w	r0, r4, #192	@ 0xc0
 801830e:	f7eb fe7f 	bl	8004010 <_ZN8touchgfx8Drawable14setWidthHeightEss>
 8018312:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8018316:	bf00      	nop
 8018318:	0802d88b 	.word	0x0802d88b
 801831c:	0802dba0 	.word	0x0802dba0
 8018320:	0802d9c2 	.word	0x0802d9c2

08018324 <_ZN8touchgfx3HAL15InvalidateCacheEv>:
 8018324:	4770      	bx	lr

08018326 <_ZN8touchgfx3HAL10FlushCacheEv>:
 8018326:	4770      	bx	lr

08018328 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEt>:
 8018328:	6803      	ldr	r3, [r0, #0]
 801832a:	b513      	push	{r0, r1, r4, lr}
 801832c:	f8d3 40a0 	ldr.w	r4, [r3, #160]	@ 0xa0
 8018330:	2300      	movs	r3, #0
 8018332:	e9cd 3300 	strd	r3, r3, [sp]
 8018336:	466b      	mov	r3, sp
 8018338:	47a0      	blx	r4
 801833a:	b002      	add	sp, #8
 801833c:	bd10      	pop	{r4, pc}

0801833e <_ZN8touchgfx3HAL16flushFrameBufferEv>:
 801833e:	2301      	movs	r3, #1
 8018340:	f880 304b 	strb.w	r3, [r0, #75]	@ 0x4b
 8018344:	f880 3069 	strb.w	r3, [r0, #105]	@ 0x69
 8018348:	4770      	bx	lr

0801834a <_ZN8touchgfx3HAL16flushFrameBufferERKNS_4RectE>:
 801834a:	2301      	movs	r3, #1
 801834c:	f880 304b 	strb.w	r3, [r0, #75]	@ 0x4b
 8018350:	f880 3069 	strb.w	r3, [r0, #105]	@ 0x69
 8018354:	4770      	bx	lr

08018356 <_ZN8touchgfx3HAL17allowDMATransfersEv>:
 8018356:	6843      	ldr	r3, [r0, #4]
 8018358:	2201      	movs	r2, #1
 801835a:	725a      	strb	r2, [r3, #9]
 801835c:	6840      	ldr	r0, [r0, #4]
 801835e:	6803      	ldr	r3, [r0, #0]
 8018360:	691b      	ldr	r3, [r3, #16]
 8018362:	4718      	bx	r3

08018364 <_ZN8touchgfx3HAL8flushDMAEv>:
 8018364:	6840      	ldr	r0, [r0, #4]
 8018366:	6803      	ldr	r3, [r0, #0]
 8018368:	689b      	ldr	r3, [r3, #8]
 801836a:	4718      	bx	r3

0801836c <_ZN8touchgfx3HAL8blitCopyEPKtttttthbtNS_6Bitmap12BitmapFormatES4_b>:
 801836c:	b530      	push	{r4, r5, lr}
 801836e:	b08b      	sub	sp, #44	@ 0x2c
 8018370:	6804      	ldr	r4, [r0, #0]
 8018372:	f89d 5058 	ldrb.w	r5, [sp, #88]	@ 0x58
 8018376:	9509      	str	r5, [sp, #36]	@ 0x24
 8018378:	f89d 5054 	ldrb.w	r5, [sp, #84]	@ 0x54
 801837c:	9508      	str	r5, [sp, #32]
 801837e:	f89d 5050 	ldrb.w	r5, [sp, #80]	@ 0x50
 8018382:	9507      	str	r5, [sp, #28]
 8018384:	f8bd 504c 	ldrh.w	r5, [sp, #76]	@ 0x4c
 8018388:	9506      	str	r5, [sp, #24]
 801838a:	f89d 5048 	ldrb.w	r5, [sp, #72]	@ 0x48
 801838e:	9505      	str	r5, [sp, #20]
 8018390:	f89d 5044 	ldrb.w	r5, [sp, #68]	@ 0x44
 8018394:	9504      	str	r5, [sp, #16]
 8018396:	f8bd 5040 	ldrh.w	r5, [sp, #64]	@ 0x40
 801839a:	9503      	str	r5, [sp, #12]
 801839c:	f8bd 503c 	ldrh.w	r5, [sp, #60]	@ 0x3c
 80183a0:	9502      	str	r5, [sp, #8]
 80183a2:	f8bd 5038 	ldrh.w	r5, [sp, #56]	@ 0x38
 80183a6:	e9cd 3500 	strd	r3, r5, [sp]
 80183aa:	4613      	mov	r3, r2
 80183ac:	6be4      	ldr	r4, [r4, #60]	@ 0x3c
 80183ae:	2200      	movs	r2, #0
 80183b0:	47a0      	blx	r4
 80183b2:	b00b      	add	sp, #44	@ 0x2c
 80183b4:	bd30      	pop	{r4, r5, pc}
	...

080183b8 <_ZN8touchgfx3HAL10beginFrameEv>:
 80183b8:	4b04      	ldr	r3, [pc, #16]	@ (80183cc <_ZN8touchgfx3HAL10beginFrameEv+0x14>)
 80183ba:	781b      	ldrb	r3, [r3, #0]
 80183bc:	b123      	cbz	r3, 80183c8 <_ZN8touchgfx3HAL10beginFrameEv+0x10>
 80183be:	f890 006a 	ldrb.w	r0, [r0, #106]	@ 0x6a
 80183c2:	f080 0001 	eor.w	r0, r0, #1
 80183c6:	4770      	bx	lr
 80183c8:	2001      	movs	r0, #1
 80183ca:	4770      	bx	lr
 80183cc:	2400b87e 	.word	0x2400b87e

080183d0 <_ZN8touchgfx3HAL8endFrameEv>:
 80183d0:	b510      	push	{r4, lr}
 80183d2:	4604      	mov	r4, r0
 80183d4:	6840      	ldr	r0, [r0, #4]
 80183d6:	6803      	ldr	r3, [r0, #0]
 80183d8:	689b      	ldr	r3, [r3, #8]
 80183da:	4798      	blx	r3
 80183dc:	f894 3069 	ldrb.w	r3, [r4, #105]	@ 0x69
 80183e0:	b113      	cbz	r3, 80183e8 <_ZN8touchgfx3HAL8endFrameEv+0x18>
 80183e2:	2301      	movs	r3, #1
 80183e4:	f884 306a 	strb.w	r3, [r4, #106]	@ 0x6a
 80183e8:	bd10      	pop	{r4, pc}

080183ea <_ZN8touchgfx3HAL10initializeEv>:
 80183ea:	b510      	push	{r4, lr}
 80183ec:	4604      	mov	r4, r0
 80183ee:	f7e9 fd2d 	bl	8001e4c <_ZN8touchgfx10OSWrappers10initializeEv>
 80183f2:	6860      	ldr	r0, [r4, #4]
 80183f4:	6803      	ldr	r3, [r0, #0]
 80183f6:	68db      	ldr	r3, [r3, #12]
 80183f8:	4798      	blx	r3
 80183fa:	68e0      	ldr	r0, [r4, #12]
 80183fc:	6803      	ldr	r3, [r0, #0]
 80183fe:	689b      	ldr	r3, [r3, #8]
 8018400:	4798      	blx	r3
 8018402:	6823      	ldr	r3, [r4, #0]
 8018404:	4620      	mov	r0, r4
 8018406:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8018408:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801840c:	4718      	bx	r3

0801840e <_ZN8touchgfx3HAL9taskEntryEv>:
 801840e:	b508      	push	{r3, lr}
 8018410:	6803      	ldr	r3, [r0, #0]
 8018412:	4604      	mov	r4, r0
 8018414:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8018416:	4798      	blx	r3
 8018418:	6823      	ldr	r3, [r4, #0]
 801841a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 801841c:	4620      	mov	r0, r4
 801841e:	4798      	blx	r3
 8018420:	f7e9 fd8a 	bl	8001f38 <_ZN8touchgfx10OSWrappers12waitForVSyncEv>
 8018424:	6823      	ldr	r3, [r4, #0]
 8018426:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8018428:	e7f8      	b.n	801841c <_ZN8touchgfx3HAL9taskEntryEv+0xe>
	...

0801842c <_ZN8touchgfx3HAL4tickEv>:
 801842c:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
 801842e:	6803      	ldr	r3, [r0, #0]
 8018430:	4604      	mov	r4, r0
 8018432:	4d5c      	ldr	r5, [pc, #368]	@ (80185a4 <_ZN8touchgfx3HAL4tickEv+0x178>)
 8018434:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 8018438:	4798      	blx	r3
 801843a:	2800      	cmp	r0, #0
 801843c:	f000 8097 	beq.w	801856e <_ZN8touchgfx3HAL4tickEv+0x142>
 8018440:	2001      	movs	r0, #1
 8018442:	2600      	movs	r6, #0
 8018444:	f7e9 fa40 	bl	80018c8 <_ZN8touchgfx4GPIO3setENS0_7GPIO_IDE>
 8018448:	f894 3066 	ldrb.w	r3, [r4, #102]	@ 0x66
 801844c:	f884 604b 	strb.w	r6, [r4, #75]	@ 0x4b
 8018450:	f884 3067 	strb.w	r3, [r4, #103]	@ 0x67
 8018454:	f894 3075 	ldrb.w	r3, [r4, #117]	@ 0x75
 8018458:	f884 6066 	strb.w	r6, [r4, #102]	@ 0x66
 801845c:	b133      	cbz	r3, 801846c <_ZN8touchgfx3HAL4tickEv+0x40>
 801845e:	6823      	ldr	r3, [r4, #0]
 8018460:	4620      	mov	r0, r4
 8018462:	f8d3 30bc 	ldr.w	r3, [r3, #188]	@ 0xbc
 8018466:	4798      	blx	r3
 8018468:	f884 6075 	strb.w	r6, [r4, #117]	@ 0x75
 801846c:	f894 304a 	ldrb.w	r3, [r4, #74]	@ 0x4a
 8018470:	2601      	movs	r6, #1
 8018472:	6862      	ldr	r2, [r4, #4]
 8018474:	f083 0301 	eor.w	r3, r3, #1
 8018478:	702e      	strb	r6, [r5, #0]
 801847a:	7253      	strb	r3, [r2, #9]
 801847c:	f003 f8ec 	bl	801b658 <_ZN8touchgfx11Application11getInstanceEv>
 8018480:	6803      	ldr	r3, [r0, #0]
 8018482:	4631      	mov	r1, r6
 8018484:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8018486:	4798      	blx	r3
 8018488:	f894 3067 	ldrb.w	r3, [r4, #103]	@ 0x67
 801848c:	b90b      	cbnz	r3, 8018492 <_ZN8touchgfx3HAL4tickEv+0x66>
 801848e:	f884 6067 	strb.w	r6, [r4, #103]	@ 0x67
 8018492:	f003 f8e1 	bl	801b658 <_ZN8touchgfx11Application11getInstanceEv>
 8018496:	6803      	ldr	r3, [r0, #0]
 8018498:	695b      	ldr	r3, [r3, #20]
 801849a:	4798      	blx	r3
 801849c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 801849e:	6803      	ldr	r3, [r0, #0]
 80184a0:	691b      	ldr	r3, [r3, #16]
 80184a2:	4798      	blx	r3
 80184a4:	f894 3067 	ldrb.w	r3, [r4, #103]	@ 0x67
 80184a8:	f894 2068 	ldrb.w	r2, [r4, #104]	@ 0x68
 80184ac:	3b01      	subs	r3, #1
 80184ae:	b2db      	uxtb	r3, r3
 80184b0:	f884 3067 	strb.w	r3, [r4, #103]	@ 0x67
 80184b4:	b10a      	cbz	r2, 80184ba <_ZN8touchgfx3HAL4tickEv+0x8e>
 80184b6:	2b00      	cmp	r3, #0
 80184b8:	d1eb      	bne.n	8018492 <_ZN8touchgfx3HAL4tickEv+0x66>
 80184ba:	4a3b      	ldr	r2, [pc, #236]	@ (80185a8 <_ZN8touchgfx3HAL4tickEv+0x17c>)
 80184bc:	f994 1064 	ldrsb.w	r1, [r4, #100]	@ 0x64
 80184c0:	7813      	ldrb	r3, [r2, #0]
 80184c2:	3301      	adds	r3, #1
 80184c4:	b25b      	sxtb	r3, r3
 80184c6:	4299      	cmp	r1, r3
 80184c8:	7013      	strb	r3, [r2, #0]
 80184ca:	dc10      	bgt.n	80184ee <_ZN8touchgfx3HAL4tickEv+0xc2>
 80184cc:	2300      	movs	r3, #0
 80184ce:	68e0      	ldr	r0, [r4, #12]
 80184d0:	a902      	add	r1, sp, #8
 80184d2:	7013      	strb	r3, [r2, #0]
 80184d4:	aa03      	add	r2, sp, #12
 80184d6:	6803      	ldr	r3, [r0, #0]
 80184d8:	68db      	ldr	r3, [r3, #12]
 80184da:	4798      	blx	r3
 80184dc:	6823      	ldr	r3, [r4, #0]
 80184de:	2800      	cmp	r0, #0
 80184e0:	d051      	beq.n	8018586 <_ZN8touchgfx3HAL4tickEv+0x15a>
 80184e2:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 80184e6:	4620      	mov	r0, r4
 80184e8:	e9dd 1202 	ldrd	r1, r2, [sp, #8]
 80184ec:	4798      	blx	r3
 80184ee:	2300      	movs	r3, #0
 80184f0:	6960      	ldr	r0, [r4, #20]
 80184f2:	f88d 3007 	strb.w	r3, [sp, #7]
 80184f6:	b158      	cbz	r0, 8018510 <_ZN8touchgfx3HAL4tickEv+0xe4>
 80184f8:	6803      	ldr	r3, [r0, #0]
 80184fa:	f10d 0107 	add.w	r1, sp, #7
 80184fe:	68db      	ldr	r3, [r3, #12]
 8018500:	4798      	blx	r3
 8018502:	b128      	cbz	r0, 8018510 <_ZN8touchgfx3HAL4tickEv+0xe4>
 8018504:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8018506:	f89d 1007 	ldrb.w	r1, [sp, #7]
 801850a:	6803      	ldr	r3, [r0, #0]
 801850c:	68db      	ldr	r3, [r3, #12]
 801850e:	4798      	blx	r3
 8018510:	f104 001c 	add.w	r0, r4, #28
 8018514:	f012 f926 	bl	802a764 <_ZN8touchgfx8Gestures4tickEv>
 8018518:	f894 306c 	ldrb.w	r3, [r4, #108]	@ 0x6c
 801851c:	b30b      	cbz	r3, 8018562 <_ZN8touchgfx3HAL4tickEv+0x136>
 801851e:	6920      	ldr	r0, [r4, #16]
 8018520:	6803      	ldr	r3, [r0, #0]
 8018522:	691b      	ldr	r3, [r3, #16]
 8018524:	4798      	blx	r3
 8018526:	6f23      	ldr	r3, [r4, #112]	@ 0x70
 8018528:	4606      	mov	r6, r0
 801852a:	b903      	cbnz	r3, 801852e <_ZN8touchgfx3HAL4tickEv+0x102>
 801852c:	6720      	str	r0, [r4, #112]	@ 0x70
 801852e:	6f23      	ldr	r3, [r4, #112]	@ 0x70
 8018530:	4a1e      	ldr	r2, [pc, #120]	@ (80185ac <_ZN8touchgfx3HAL4tickEv+0x180>)
 8018532:	1af3      	subs	r3, r6, r3
 8018534:	4293      	cmp	r3, r2
 8018536:	d914      	bls.n	8018562 <_ZN8touchgfx3HAL4tickEv+0x136>
 8018538:	6920      	ldr	r0, [r4, #16]
 801853a:	6803      	ldr	r3, [r0, #0]
 801853c:	699b      	ldr	r3, [r3, #24]
 801853e:	4798      	blx	r3
 8018540:	6f23      	ldr	r3, [r4, #112]	@ 0x70
 8018542:	2264      	movs	r2, #100	@ 0x64
 8018544:	1af3      	subs	r3, r6, r3
 8018546:	fbb3 f3f2 	udiv	r3, r3, r2
 801854a:	fbb0 f0f3 	udiv	r0, r0, r3
 801854e:	2800      	cmp	r0, #0
 8018550:	dc1e      	bgt.n	8018590 <_ZN8touchgfx3HAL4tickEv+0x164>
 8018552:	f884 2065 	strb.w	r2, [r4, #101]	@ 0x65
 8018556:	6920      	ldr	r0, [r4, #16]
 8018558:	2100      	movs	r1, #0
 801855a:	6803      	ldr	r3, [r0, #0]
 801855c:	69db      	ldr	r3, [r3, #28]
 801855e:	4798      	blx	r3
 8018560:	6726      	str	r6, [r4, #112]	@ 0x70
 8018562:	f003 f879 	bl	801b658 <_ZN8touchgfx11Application11getInstanceEv>
 8018566:	6803      	ldr	r3, [r0, #0]
 8018568:	2100      	movs	r1, #0
 801856a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 801856c:	4798      	blx	r3
 801856e:	6823      	ldr	r3, [r4, #0]
 8018570:	4620      	mov	r0, r4
 8018572:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 8018576:	4798      	blx	r3
 8018578:	2001      	movs	r0, #1
 801857a:	f7e9 f9c1 	bl	8001900 <_ZN8touchgfx4GPIO5clearENS0_7GPIO_IDE>
 801857e:	2300      	movs	r3, #0
 8018580:	702b      	strb	r3, [r5, #0]
 8018582:	b004      	add	sp, #16
 8018584:	bd70      	pop	{r4, r5, r6, pc}
 8018586:	f8d3 30b8 	ldr.w	r3, [r3, #184]	@ 0xb8
 801858a:	4620      	mov	r0, r4
 801858c:	4798      	blx	r3
 801858e:	e7ae      	b.n	80184ee <_ZN8touchgfx3HAL4tickEv+0xc2>
 8018590:	2863      	cmp	r0, #99	@ 0x63
 8018592:	bfcb      	itete	gt
 8018594:	2300      	movgt	r3, #0
 8018596:	f1c0 0064 	rsble	r0, r0, #100	@ 0x64
 801859a:	f884 3065 	strbgt.w	r3, [r4, #101]	@ 0x65
 801859e:	f884 0065 	strble.w	r0, [r4, #101]	@ 0x65
 80185a2:	e7d8      	b.n	8018556 <_ZN8touchgfx3HAL4tickEv+0x12a>
 80185a4:	2400b884 	.word	0x2400b884
 80185a8:	2400b885 	.word	0x2400b885
 80185ac:	05f5e100 	.word	0x05f5e100

080185b0 <_ZN8touchgfx3HAL17unlockFrameBufferEv>:
 80185b0:	f7e9 bc8e 	b.w	8001ed0 <_ZN8touchgfx10OSWrappers24giveFrameBufferSemaphoreEv>

080185b4 <_ZN8touchgfx3HAL21registerEventListenerERNS_15UIEventListenerE>:
 80185b4:	6581      	str	r1, [r0, #88]	@ 0x58
 80185b6:	301c      	adds	r0, #28
 80185b8:	f012 b8d2 	b.w	802a760 <_ZN8touchgfx8Gestures21registerEventListenerERNS_15UIEventListenerE>

080185bc <_ZN8touchgfx3HAL5touchEll>:
 80185bc:	b530      	push	{r4, r5, lr}
 80185be:	b087      	sub	sp, #28
 80185c0:	4604      	mov	r4, r0
 80185c2:	a804      	add	r0, sp, #16
 80185c4:	e9cd 1204 	strd	r1, r2, [sp, #16]
 80185c8:	f002 fe06 	bl	801b1d8 <_ZN8touchgfx16TouchCalibration14translatePointERNS_5PointE>
 80185cc:	9b04      	ldr	r3, [sp, #16]
 80185ce:	a906      	add	r1, sp, #24
 80185d0:	a803      	add	r0, sp, #12
 80185d2:	f8ad 300c 	strh.w	r3, [sp, #12]
 80185d6:	9b05      	ldr	r3, [sp, #20]
 80185d8:	f821 3d0a 	strh.w	r3, [r1, #-10]!
 80185dc:	f002 fe4e 	bl	801b27c <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERsS1_>
 80185e0:	f894 106b 	ldrb.w	r1, [r4, #107]	@ 0x6b
 80185e4:	f104 001c 	add.w	r0, r4, #28
 80185e8:	f8bd 200c 	ldrh.w	r2, [sp, #12]
 80185ec:	f8bd 300e 	ldrh.w	r3, [sp, #14]
 80185f0:	b189      	cbz	r1, 8018616 <_ZN8touchgfx3HAL5touchEll+0x5a>
 80185f2:	f8b4 5060 	ldrh.w	r5, [r4, #96]	@ 0x60
 80185f6:	9300      	str	r3, [sp, #0]
 80185f8:	4613      	mov	r3, r2
 80185fa:	f8b4 105c 	ldrh.w	r1, [r4, #92]	@ 0x5c
 80185fe:	462a      	mov	r2, r5
 8018600:	f012 f8be 	bl	802a780 <_ZN8touchgfx8Gestures17registerDragEventEtttt>
 8018604:	b128      	cbz	r0, 8018612 <_ZN8touchgfx3HAL5touchEll+0x56>
 8018606:	f9bd 300c 	ldrsh.w	r3, [sp, #12]
 801860a:	65e3      	str	r3, [r4, #92]	@ 0x5c
 801860c:	f9bd 300e 	ldrsh.w	r3, [sp, #14]
 8018610:	6623      	str	r3, [r4, #96]	@ 0x60
 8018612:	b007      	add	sp, #28
 8018614:	bd30      	pop	{r4, r5, pc}
 8018616:	f012 f8f7 	bl	802a808 <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt>
 801861a:	2301      	movs	r3, #1
 801861c:	f884 306b 	strb.w	r3, [r4, #107]	@ 0x6b
 8018620:	e7f1      	b.n	8018606 <_ZN8touchgfx3HAL5touchEll+0x4a>

08018622 <_ZN8touchgfx3HAL9blockCopyEPvPKvm>:
 8018622:	b510      	push	{r4, lr}
 8018624:	2b00      	cmp	r3, #0
 8018626:	d046      	beq.n	80186b6 <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x94>
 8018628:	ea81 0002 	eor.w	r0, r1, r2
 801862c:	07c4      	lsls	r4, r0, #31
 801862e:	d508      	bpl.n	8018642 <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x20>
 8018630:	440b      	add	r3, r1
 8018632:	3a01      	subs	r2, #1
 8018634:	428b      	cmp	r3, r1
 8018636:	d93e      	bls.n	80186b6 <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x94>
 8018638:	f812 0f01 	ldrb.w	r0, [r2, #1]!
 801863c:	f801 0b01 	strb.w	r0, [r1], #1
 8018640:	e7f8      	b.n	8018634 <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x12>
 8018642:	07d0      	lsls	r0, r2, #31
 8018644:	bf42      	ittt	mi
 8018646:	f812 0b01 	ldrbmi.w	r0, [r2], #1
 801864a:	f103 33ff 	addmi.w	r3, r3, #4294967295
 801864e:	f801 0b01 	strbmi.w	r0, [r1], #1
 8018652:	2b01      	cmp	r3, #1
 8018654:	d911      	bls.n	801867a <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x58>
 8018656:	ea81 0402 	eor.w	r4, r1, r2
 801865a:	4610      	mov	r0, r2
 801865c:	07a4      	lsls	r4, r4, #30
 801865e:	d022      	beq.n	80186a6 <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x84>
 8018660:	f023 0401 	bic.w	r4, r3, #1
 8018664:	440c      	add	r4, r1
 8018666:	428c      	cmp	r4, r1
 8018668:	4602      	mov	r2, r0
 801866a:	d904      	bls.n	8018676 <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x54>
 801866c:	8812      	ldrh	r2, [r2, #0]
 801866e:	3002      	adds	r0, #2
 8018670:	f821 2b02 	strh.w	r2, [r1], #2
 8018674:	e7f7      	b.n	8018666 <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x44>
 8018676:	f003 0301 	and.w	r3, r3, #1
 801867a:	f023 0003 	bic.w	r0, r3, #3
 801867e:	4408      	add	r0, r1
 8018680:	4288      	cmp	r0, r1
 8018682:	4614      	mov	r4, r2
 8018684:	d904      	bls.n	8018690 <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x6e>
 8018686:	6824      	ldr	r4, [r4, #0]
 8018688:	3204      	adds	r2, #4
 801868a:	f841 4b04 	str.w	r4, [r1], #4
 801868e:	e7f7      	b.n	8018680 <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x5e>
 8018690:	f003 0303 	and.w	r3, r3, #3
 8018694:	3a01      	subs	r2, #1
 8018696:	440b      	add	r3, r1
 8018698:	428b      	cmp	r3, r1
 801869a:	d90c      	bls.n	80186b6 <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x94>
 801869c:	f812 0f01 	ldrb.w	r0, [r2, #1]!
 80186a0:	f801 0b01 	strb.w	r0, [r1], #1
 80186a4:	e7f8      	b.n	8018698 <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x76>
 80186a6:	0790      	lsls	r0, r2, #30
 80186a8:	d0e7      	beq.n	801867a <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x58>
 80186aa:	f832 0b02 	ldrh.w	r0, [r2], #2
 80186ae:	3b02      	subs	r3, #2
 80186b0:	f821 0b02 	strh.w	r0, [r1], #2
 80186b4:	e7e1      	b.n	801867a <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x58>
 80186b6:	2001      	movs	r0, #1
 80186b8:	bd10      	pop	{r4, pc}

080186ba <_ZN8touchgfx3HAL7noTouchEv>:
 80186ba:	b510      	push	{r4, lr}
 80186bc:	f890 306b 	ldrb.w	r3, [r0, #107]	@ 0x6b
 80186c0:	4604      	mov	r4, r0
 80186c2:	b153      	cbz	r3, 80186da <_ZN8touchgfx3HAL7noTouchEv+0x20>
 80186c4:	f8b0 3060 	ldrh.w	r3, [r0, #96]	@ 0x60
 80186c8:	2101      	movs	r1, #1
 80186ca:	f8b0 205c 	ldrh.w	r2, [r0, #92]	@ 0x5c
 80186ce:	301c      	adds	r0, #28
 80186d0:	f012 f89a 	bl	802a808 <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt>
 80186d4:	2300      	movs	r3, #0
 80186d6:	f884 306b 	strb.w	r3, [r4, #107]	@ 0x6b
 80186da:	bd10      	pop	{r4, pc}

080186dc <_ZN8touchgfx3HAL27configurePartialFrameBufferEtttt>:
 80186dc:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80186e0:	4604      	mov	r4, r0
 80186e2:	6980      	ldr	r0, [r0, #24]
 80186e4:	b085      	sub	sp, #20
 80186e6:	460f      	mov	r7, r1
 80186e8:	4690      	mov	r8, r2
 80186ea:	4699      	mov	r9, r3
 80186ec:	b930      	cbnz	r0, 80186fc <_ZN8touchgfx3HAL27configurePartialFrameBufferEtttt+0x20>
 80186ee:	4b1c      	ldr	r3, [pc, #112]	@ (8018760 <_ZN8touchgfx3HAL27configurePartialFrameBufferEtttt+0x84>)
 80186f0:	f44f 71a5 	mov.w	r1, #330	@ 0x14a
 80186f4:	4a1b      	ldr	r2, [pc, #108]	@ (8018764 <_ZN8touchgfx3HAL27configurePartialFrameBufferEtttt+0x88>)
 80186f6:	481c      	ldr	r0, [pc, #112]	@ (8018768 <_ZN8touchgfx3HAL27configurePartialFrameBufferEtttt+0x8c>)
 80186f8:	f012 f91c 	bl	802a934 <__assert_func>
 80186fc:	ad04      	add	r5, sp, #16
 80186fe:	2600      	movs	r6, #0
 8018700:	f845 6d04 	str.w	r6, [r5, #-4]!
 8018704:	6806      	ldr	r6, [r0, #0]
 8018706:	9501      	str	r5, [sp, #4]
 8018708:	f8bd 5030 	ldrh.w	r5, [sp, #48]	@ 0x30
 801870c:	9500      	str	r5, [sp, #0]
 801870e:	6835      	ldr	r5, [r6, #0]
 8018710:	47a8      	blx	r5
 8018712:	4d16      	ldr	r5, [pc, #88]	@ (801876c <_ZN8touchgfx3HAL27configurePartialFrameBufferEtttt+0x90>)
 8018714:	4606      	mov	r6, r0
 8018716:	f8a5 9000 	strh.w	r9, [r5]
 801871a:	f7eb fd13 	bl	8004144 <_ZN8touchgfx3HAL3lcdEv>
 801871e:	6803      	ldr	r3, [r0, #0]
 8018720:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8018722:	4798      	blx	r3
 8018724:	2801      	cmp	r0, #1
 8018726:	d012      	beq.n	801874e <_ZN8touchgfx3HAL27configurePartialFrameBufferEtttt+0x72>
 8018728:	d306      	bcc.n	8018738 <_ZN8touchgfx3HAL27configurePartialFrameBufferEtttt+0x5c>
 801872a:	280d      	cmp	r0, #13
 801872c:	d80b      	bhi.n	8018746 <_ZN8touchgfx3HAL27configurePartialFrameBufferEtttt+0x6a>
 801872e:	4b10      	ldr	r3, [pc, #64]	@ (8018770 <_ZN8touchgfx3HAL27configurePartialFrameBufferEtttt+0x94>)
 8018730:	f240 1167 	movw	r1, #359	@ 0x167
 8018734:	4a0b      	ldr	r2, [pc, #44]	@ (8018764 <_ZN8touchgfx3HAL27configurePartialFrameBufferEtttt+0x88>)
 8018736:	e7de      	b.n	80186f6 <_ZN8touchgfx3HAL27configurePartialFrameBufferEtttt+0x1a>
 8018738:	882b      	ldrh	r3, [r5, #0]
 801873a:	fb08 7203 	mla	r2, r8, r3, r7
 801873e:	9b03      	ldr	r3, [sp, #12]
 8018740:	eba3 0342 	sub.w	r3, r3, r2, lsl #1
 8018744:	63e3      	str	r3, [r4, #60]	@ 0x3c
 8018746:	4630      	mov	r0, r6
 8018748:	b005      	add	sp, #20
 801874a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801874e:	882a      	ldrh	r2, [r5, #0]
 8018750:	9b03      	ldr	r3, [sp, #12]
 8018752:	fb08 7202 	mla	r2, r8, r2, r7
 8018756:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 801875a:	1a9a      	subs	r2, r3, r2
 801875c:	63e2      	str	r2, [r4, #60]	@ 0x3c
 801875e:	e7f2      	b.n	8018746 <_ZN8touchgfx3HAL27configurePartialFrameBufferEtttt+0x6a>
 8018760:	0802de82 	.word	0x0802de82
 8018764:	0802e213 	.word	0x0802e213
 8018768:	0802dec7 	.word	0x0802dec7
 801876c:	2400b87a 	.word	0x2400b87a
 8018770:	0802deed 	.word	0x0802deed

08018774 <_ZN8touchgfx3HAL8blitCopyEPKtttttthbb>:
 8018774:	b5f0      	push	{r4, r5, r6, r7, lr}
 8018776:	b08b      	sub	sp, #44	@ 0x2c
 8018778:	4617      	mov	r7, r2
 801877a:	4604      	mov	r4, r0
 801877c:	460e      	mov	r6, r1
 801877e:	461d      	mov	r5, r3
 8018780:	f7eb fce0 	bl	8004144 <_ZN8touchgfx3HAL3lcdEv>
 8018784:	6803      	ldr	r3, [r0, #0]
 8018786:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8018788:	4798      	blx	r3
 801878a:	f89d 3054 	ldrb.w	r3, [sp, #84]	@ 0x54
 801878e:	9007      	str	r0, [sp, #28]
 8018790:	4631      	mov	r1, r6
 8018792:	6822      	ldr	r2, [r4, #0]
 8018794:	e9cd 0308 	strd	r0, r3, [sp, #32]
 8018798:	4b0c      	ldr	r3, [pc, #48]	@ (80187cc <_ZN8touchgfx3HAL8blitCopyEPKtttttthbb+0x58>)
 801879a:	4620      	mov	r0, r4
 801879c:	881b      	ldrh	r3, [r3, #0]
 801879e:	9306      	str	r3, [sp, #24]
 80187a0:	f89d 3050 	ldrb.w	r3, [sp, #80]	@ 0x50
 80187a4:	9305      	str	r3, [sp, #20]
 80187a6:	f89d 304c 	ldrb.w	r3, [sp, #76]	@ 0x4c
 80187aa:	9304      	str	r3, [sp, #16]
 80187ac:	f8bd 3048 	ldrh.w	r3, [sp, #72]	@ 0x48
 80187b0:	9303      	str	r3, [sp, #12]
 80187b2:	f8bd 3044 	ldrh.w	r3, [sp, #68]	@ 0x44
 80187b6:	9302      	str	r3, [sp, #8]
 80187b8:	f8bd 3040 	ldrh.w	r3, [sp, #64]	@ 0x40
 80187bc:	e9cd 5300 	strd	r5, r3, [sp]
 80187c0:	463b      	mov	r3, r7
 80187c2:	6bd5      	ldr	r5, [r2, #60]	@ 0x3c
 80187c4:	2200      	movs	r2, #0
 80187c6:	47a8      	blx	r5
 80187c8:	b00b      	add	sp, #44	@ 0x2c
 80187ca:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80187cc:	2400b87a 	.word	0x2400b87a

080187d0 <_ZN8touchgfx3HAL16blitCopyARGB8888EPKtttttthb>:
 80187d0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80187d4:	4698      	mov	r8, r3
 80187d6:	6803      	ldr	r3, [r0, #0]
 80187d8:	b08b      	sub	sp, #44	@ 0x2c
 80187da:	4617      	mov	r7, r2
 80187dc:	6bdd      	ldr	r5, [r3, #60]	@ 0x3c
 80187de:	460e      	mov	r6, r1
 80187e0:	4b13      	ldr	r3, [pc, #76]	@ (8018830 <_ZN8touchgfx3HAL16blitCopyARGB8888EPKtttttthb+0x60>)
 80187e2:	4604      	mov	r4, r0
 80187e4:	f8b3 9000 	ldrh.w	r9, [r3]
 80187e8:	f7eb fcac 	bl	8004144 <_ZN8touchgfx3HAL3lcdEv>
 80187ec:	6803      	ldr	r3, [r0, #0]
 80187ee:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80187f0:	4798      	blx	r3
 80187f2:	f89d 3058 	ldrb.w	r3, [sp, #88]	@ 0x58
 80187f6:	2200      	movs	r2, #0
 80187f8:	4631      	mov	r1, r6
 80187fa:	e9cd 0308 	strd	r0, r3, [sp, #32]
 80187fe:	2302      	movs	r3, #2
 8018800:	4620      	mov	r0, r4
 8018802:	e9cd 9306 	strd	r9, r3, [sp, #24]
 8018806:	2301      	movs	r3, #1
 8018808:	9305      	str	r3, [sp, #20]
 801880a:	f89d 3054 	ldrb.w	r3, [sp, #84]	@ 0x54
 801880e:	9304      	str	r3, [sp, #16]
 8018810:	f8bd 3050 	ldrh.w	r3, [sp, #80]	@ 0x50
 8018814:	9303      	str	r3, [sp, #12]
 8018816:	f8bd 304c 	ldrh.w	r3, [sp, #76]	@ 0x4c
 801881a:	9302      	str	r3, [sp, #8]
 801881c:	f8bd 3048 	ldrh.w	r3, [sp, #72]	@ 0x48
 8018820:	e9cd 8300 	strd	r8, r3, [sp]
 8018824:	463b      	mov	r3, r7
 8018826:	47a8      	blx	r5
 8018828:	b00b      	add	sp, #44	@ 0x2c
 801882a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801882e:	bf00      	nop
 8018830:	2400b87a 	.word	0x2400b87a

08018834 <_ZN8touchgfx3HAL8blitFillENS_9colortypeEtttthb>:
 8018834:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8018838:	4698      	mov	r8, r3
 801883a:	6803      	ldr	r3, [r0, #0]
 801883c:	b087      	sub	sp, #28
 801883e:	460e      	mov	r6, r1
 8018840:	6d9d      	ldr	r5, [r3, #88]	@ 0x58
 8018842:	4617      	mov	r7, r2
 8018844:	4b0f      	ldr	r3, [pc, #60]	@ (8018884 <_ZN8touchgfx3HAL8blitFillENS_9colortypeEtttthb+0x50>)
 8018846:	4604      	mov	r4, r0
 8018848:	f8b3 9000 	ldrh.w	r9, [r3]
 801884c:	f7eb fc7a 	bl	8004144 <_ZN8touchgfx3HAL3lcdEv>
 8018850:	6803      	ldr	r3, [r0, #0]
 8018852:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8018854:	4798      	blx	r3
 8018856:	f89d 3044 	ldrb.w	r3, [sp, #68]	@ 0x44
 801885a:	463a      	mov	r2, r7
 801885c:	4631      	mov	r1, r6
 801885e:	f8cd 900c 	str.w	r9, [sp, #12]
 8018862:	e9cd 0304 	strd	r0, r3, [sp, #16]
 8018866:	f89d 3040 	ldrb.w	r3, [sp, #64]	@ 0x40
 801886a:	4620      	mov	r0, r4
 801886c:	9302      	str	r3, [sp, #8]
 801886e:	f8bd 303c 	ldrh.w	r3, [sp, #60]	@ 0x3c
 8018872:	9301      	str	r3, [sp, #4]
 8018874:	f8bd 3038 	ldrh.w	r3, [sp, #56]	@ 0x38
 8018878:	9300      	str	r3, [sp, #0]
 801887a:	4643      	mov	r3, r8
 801887c:	47a8      	blx	r5
 801887e:	b007      	add	sp, #28
 8018880:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8018884:	2400b87a 	.word	0x2400b87a

08018888 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE>:
 8018888:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801888c:	4604      	mov	r4, r0
 801888e:	b08f      	sub	sp, #60	@ 0x3c
 8018890:	4610      	mov	r0, r2
 8018892:	460d      	mov	r5, r1
 8018894:	4691      	mov	r9, r2
 8018896:	461e      	mov	r6, r3
 8018898:	f005 ff20 	bl	801e6dc <_ZN8touchgfx6Bitmap23dynamicBitmapGetAddressEt>
 801889c:	2800      	cmp	r0, #0
 801889e:	f000 809c 	beq.w	80189da <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x152>
 80188a2:	6823      	ldr	r3, [r4, #0]
 80188a4:	4620      	mov	r0, r4
 80188a6:	f8df b194 	ldr.w	fp, [pc, #404]	@ 8018a3c <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x1b4>
 80188aa:	f10d 0838 	add.w	r8, sp, #56	@ 0x38
 80188ae:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80188b0:	4798      	blx	r3
 80188b2:	6823      	ldr	r3, [r4, #0]
 80188b4:	4620      	mov	r0, r4
 80188b6:	f8df a188 	ldr.w	sl, [pc, #392]	@ 8018a40 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x1b8>
 80188ba:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80188bc:	4798      	blx	r3
 80188be:	f8bb 3000 	ldrh.w	r3, [fp]
 80188c2:	4f5b      	ldr	r7, [pc, #364]	@ (8018a30 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x1a8>)
 80188c4:	9301      	str	r3, [sp, #4]
 80188c6:	f8ba 3000 	ldrh.w	r3, [sl]
 80188ca:	f828 9d1c 	strh.w	r9, [r8, #-28]!
 80188ce:	4640      	mov	r0, r8
 80188d0:	9302      	str	r3, [sp, #8]
 80188d2:	883b      	ldrh	r3, [r7, #0]
 80188d4:	9303      	str	r3, [sp, #12]
 80188d6:	4b57      	ldr	r3, [pc, #348]	@ (8018a34 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x1ac>)
 80188d8:	881a      	ldrh	r2, [r3, #0]
 80188da:	9305      	str	r3, [sp, #20]
 80188dc:	9204      	str	r2, [sp, #16]
 80188de:	f005 ffb7 	bl	801e850 <_ZNK8touchgfx6Bitmap8getWidthEv>
 80188e2:	8038      	strh	r0, [r7, #0]
 80188e4:	4640      	mov	r0, r8
 80188e6:	f005 ffed 	bl	801e8c4 <_ZNK8touchgfx6Bitmap9getHeightEv>
 80188ea:	9b05      	ldr	r3, [sp, #20]
 80188ec:	8018      	strh	r0, [r3, #0]
 80188ee:	4b52      	ldr	r3, [pc, #328]	@ (8018a38 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x1b0>)
 80188f0:	781b      	ldrb	r3, [r3, #0]
 80188f2:	2b00      	cmp	r3, #0
 80188f4:	d174      	bne.n	80189e0 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x158>
 80188f6:	883b      	ldrh	r3, [r7, #0]
 80188f8:	f8aa 0000 	strh.w	r0, [sl]
 80188fc:	f8ab 3000 	strh.w	r3, [fp]
 8018900:	4648      	mov	r0, r9
 8018902:	e9d4 870f 	ldrd	r8, r7, [r4, #60]	@ 0x3c
 8018906:	f005 fee9 	bl	801e6dc <_ZN8touchgfx6Bitmap23dynamicBitmapGetAddressEt>
 801890a:	2200      	movs	r2, #0
 801890c:	e9c4 000f 	strd	r0, r0, [r4, #60]	@ 0x3c
 8018910:	4611      	mov	r1, r2
 8018912:	4628      	mov	r0, r5
 8018914:	f9b5 9004 	ldrsh.w	r9, [r5, #4]
 8018918:	f9b5 a006 	ldrsh.w	sl, [r5, #6]
 801891c:	f7eb fb1c 	bl	8003f58 <_ZN8touchgfx8Drawable5setXYEss>
 8018920:	2301      	movs	r3, #1
 8018922:	f895 b025 	ldrb.w	fp, [r5, #37]	@ 0x25
 8018926:	f885 3025 	strb.w	r3, [r5, #37]	@ 0x25
 801892a:	f9b6 3004 	ldrsh.w	r3, [r6, #4]
 801892e:	2b00      	cmp	r3, #0
 8018930:	dd5c      	ble.n	80189ec <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x164>
 8018932:	f9b6 3006 	ldrsh.w	r3, [r6, #6]
 8018936:	2b00      	cmp	r3, #0
 8018938:	dd58      	ble.n	80189ec <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x164>
 801893a:	462a      	mov	r2, r5
 801893c:	ab0a      	add	r3, sp, #40	@ 0x28
 801893e:	f852 0f04 	ldr.w	r0, [r2, #4]!
 8018942:	6851      	ldr	r1, [r2, #4]
 8018944:	c303      	stmia	r3!, {r0, r1}
 8018946:	4631      	mov	r1, r6
 8018948:	a80a      	add	r0, sp, #40	@ 0x28
 801894a:	f7ff f913 	bl	8017b74 <_ZN8touchgfx4RectaNERKS0_>
 801894e:	4b38      	ldr	r3, [pc, #224]	@ (8018a30 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x1a8>)
 8018950:	2100      	movs	r1, #0
 8018952:	f9b3 2000 	ldrsh.w	r2, [r3]
 8018956:	4b37      	ldr	r3, [pc, #220]	@ (8018a34 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x1ac>)
 8018958:	f8ad 2034 	strh.w	r2, [sp, #52]	@ 0x34
 801895c:	aa0a      	add	r2, sp, #40	@ 0x28
 801895e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8018962:	910c      	str	r1, [sp, #48]	@ 0x30
 8018964:	f8ad 3036 	strh.w	r3, [sp, #54]	@ 0x36
 8018968:	ab08      	add	r3, sp, #32
 801896a:	e892 0003 	ldmia.w	r2, {r0, r1}
 801896e:	e883 0003 	stmia.w	r3, {r0, r1}
 8018972:	4618      	mov	r0, r3
 8018974:	a90c      	add	r1, sp, #48	@ 0x30
 8018976:	f7ff f8fd 	bl	8017b74 <_ZN8touchgfx4RectaNERKS0_>
 801897a:	6ce3      	ldr	r3, [r4, #76]	@ 0x4c
 801897c:	2b00      	cmp	r3, #0
 801897e:	d13c      	bne.n	80189fa <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x172>
 8018980:	2000      	movs	r0, #0
 8018982:	f884 0076 	strb.w	r0, [r4, #118]	@ 0x76
 8018986:	2600      	movs	r6, #0
 8018988:	696b      	ldr	r3, [r5, #20]
 801898a:	a908      	add	r1, sp, #32
 801898c:	682a      	ldr	r2, [r5, #0]
 801898e:	4628      	mov	r0, r5
 8018990:	9305      	str	r3, [sp, #20]
 8018992:	616e      	str	r6, [r5, #20]
 8018994:	6892      	ldr	r2, [r2, #8]
 8018996:	4790      	blx	r2
 8018998:	9b05      	ldr	r3, [sp, #20]
 801899a:	4652      	mov	r2, sl
 801899c:	4649      	mov	r1, r9
 801899e:	616b      	str	r3, [r5, #20]
 80189a0:	4628      	mov	r0, r5
 80189a2:	f884 6076 	strb.w	r6, [r4, #118]	@ 0x76
 80189a6:	f885 b025 	strb.w	fp, [r5, #37]	@ 0x25
 80189aa:	f7eb fad5 	bl	8003f58 <_ZN8touchgfx8Drawable5setXYEss>
 80189ae:	9a01      	ldr	r2, [sp, #4]
 80189b0:	4b22      	ldr	r3, [pc, #136]	@ (8018a3c <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x1b4>)
 80189b2:	4620      	mov	r0, r4
 80189b4:	801a      	strh	r2, [r3, #0]
 80189b6:	9a02      	ldr	r2, [sp, #8]
 80189b8:	4b21      	ldr	r3, [pc, #132]	@ (8018a40 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x1b8>)
 80189ba:	801a      	strh	r2, [r3, #0]
 80189bc:	9a03      	ldr	r2, [sp, #12]
 80189be:	4b1c      	ldr	r3, [pc, #112]	@ (8018a30 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x1a8>)
 80189c0:	801a      	strh	r2, [r3, #0]
 80189c2:	4b1c      	ldr	r3, [pc, #112]	@ (8018a34 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x1ac>)
 80189c4:	9a04      	ldr	r2, [sp, #16]
 80189c6:	801a      	strh	r2, [r3, #0]
 80189c8:	6823      	ldr	r3, [r4, #0]
 80189ca:	e9c4 870f 	strd	r8, r7, [r4, #60]	@ 0x3c
 80189ce:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80189d0:	4798      	blx	r3
 80189d2:	6823      	ldr	r3, [r4, #0]
 80189d4:	4620      	mov	r0, r4
 80189d6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80189d8:	4798      	blx	r3
 80189da:	b00f      	add	sp, #60	@ 0x3c
 80189dc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80189e0:	883b      	ldrh	r3, [r7, #0]
 80189e2:	f8ab 0000 	strh.w	r0, [fp]
 80189e6:	f8aa 3000 	strh.w	r3, [sl]
 80189ea:	e789      	b.n	8018900 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x78>
 80189ec:	462a      	mov	r2, r5
 80189ee:	ab0a      	add	r3, sp, #40	@ 0x28
 80189f0:	f852 0f04 	ldr.w	r0, [r2, #4]!
 80189f4:	6851      	ldr	r1, [r2, #4]
 80189f6:	c303      	stmia	r3!, {r0, r1}
 80189f8:	e7a9      	b.n	801894e <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0xc6>
 80189fa:	a807      	add	r0, sp, #28
 80189fc:	f006 f8ba 	bl	801eb74 <_ZNK8touchgfx6Bitmap9getFormatEv>
 8018a00:	4606      	mov	r6, r0
 8018a02:	6ce0      	ldr	r0, [r4, #76]	@ 0x4c
 8018a04:	6803      	ldr	r3, [r0, #0]
 8018a06:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8018a08:	4798      	blx	r3
 8018a0a:	4286      	cmp	r6, r0
 8018a0c:	d1b8      	bne.n	8018980 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0xf8>
 8018a0e:	f7eb fb99 	bl	8004144 <_ZN8touchgfx3HAL3lcdEv>
 8018a12:	6803      	ldr	r3, [r0, #0]
 8018a14:	4606      	mov	r6, r0
 8018a16:	a807      	add	r0, sp, #28
 8018a18:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8018a1a:	9305      	str	r3, [sp, #20]
 8018a1c:	f006 f8aa 	bl	801eb74 <_ZNK8touchgfx6Bitmap9getFormatEv>
 8018a20:	9b05      	ldr	r3, [sp, #20]
 8018a22:	4601      	mov	r1, r0
 8018a24:	4630      	mov	r0, r6
 8018a26:	4798      	blx	r3
 8018a28:	f080 0001 	eor.w	r0, r0, #1
 8018a2c:	b2c0      	uxtb	r0, r0
 8018a2e:	e7a8      	b.n	8018982 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0xfa>
 8018a30:	2400b874 	.word	0x2400b874
 8018a34:	2400b876 	.word	0x2400b876
 8018a38:	2400b878 	.word	0x2400b878
 8018a3c:	2400b87a 	.word	0x2400b87a
 8018a40:	2400b87c 	.word	0x2400b87c

08018a44 <_ZN8touchgfx3HAL20getClientFrameBufferEv>:
 8018a44:	4b07      	ldr	r3, [pc, #28]	@ (8018a64 <_ZN8touchgfx3HAL20getClientFrameBufferEv+0x20>)
 8018a46:	b510      	push	{r4, lr}
 8018a48:	781b      	ldrb	r3, [r3, #0]
 8018a4a:	4604      	mov	r4, r0
 8018a4c:	b13b      	cbz	r3, 8018a5e <_ZN8touchgfx3HAL20getClientFrameBufferEv+0x1a>
 8018a4e:	6803      	ldr	r3, [r0, #0]
 8018a50:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8018a52:	4798      	blx	r3
 8018a54:	6be3      	ldr	r3, [r4, #60]	@ 0x3c
 8018a56:	4283      	cmp	r3, r0
 8018a58:	d101      	bne.n	8018a5e <_ZN8touchgfx3HAL20getClientFrameBufferEv+0x1a>
 8018a5a:	6c20      	ldr	r0, [r4, #64]	@ 0x40
 8018a5c:	bd10      	pop	{r4, pc}
 8018a5e:	6be0      	ldr	r0, [r4, #60]	@ 0x3c
 8018a60:	e7fc      	b.n	8018a5c <_ZN8touchgfx3HAL20getClientFrameBufferEv+0x18>
 8018a62:	bf00      	nop
 8018a64:	2400b87e 	.word	0x2400b87e

08018a68 <_ZN8touchgfx3HAL12blitCopyWordEPKttttttt>:
 8018a68:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8018a6c:	b088      	sub	sp, #32
 8018a6e:	4692      	mov	sl, r2
 8018a70:	461d      	mov	r5, r3
 8018a72:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8018a76:	f8bd 904c 	ldrh.w	r9, [sp, #76]	@ 0x4c
 8018a7a:	2400      	movs	r4, #0
 8018a7c:	f8bd 8040 	ldrh.w	r8, [sp, #64]	@ 0x40
 8018a80:	4606      	mov	r6, r0
 8018a82:	f8bd 7044 	ldrh.w	r7, [sp, #68]	@ 0x44
 8018a86:	fb09 a505 	mla	r5, r9, r5, sl
 8018a8a:	9403      	str	r4, [sp, #12]
 8018a8c:	f8ad 8014 	strh.w	r8, [sp, #20]
 8018a90:	f8ad 7016 	strh.w	r7, [sp, #22]
 8018a94:	f88d 401c 	strb.w	r4, [sp, #28]
 8018a98:	e9cd 3100 	strd	r3, r1, [sp]
 8018a9c:	f8bd 3048 	ldrh.w	r3, [sp, #72]	@ 0x48
 8018aa0:	f8ad 3018 	strh.w	r3, [sp, #24]
 8018aa4:	f7ff ffce 	bl	8018a44 <_ZN8touchgfx3HAL20getClientFrameBufferEv>
 8018aa8:	eb00 0545 	add.w	r5, r0, r5, lsl #1
 8018aac:	f8ad 901a 	strh.w	r9, [sp, #26]
 8018ab0:	f88d 401e 	strb.w	r4, [sp, #30]
 8018ab4:	9504      	str	r5, [sp, #16]
 8018ab6:	f88d 401d 	strb.w	r4, [sp, #29]
 8018aba:	f88d 401f 	strb.w	r4, [sp, #31]
 8018abe:	f1b8 0f00 	cmp.w	r8, #0
 8018ac2:	d000      	beq.n	8018ac6 <_ZN8touchgfx3HAL12blitCopyWordEPKttttttt+0x5e>
 8018ac4:	b937      	cbnz	r7, 8018ad4 <_ZN8touchgfx3HAL12blitCopyWordEPKttttttt+0x6c>
 8018ac6:	4b0d      	ldr	r3, [pc, #52]	@ (8018afc <_ZN8touchgfx3HAL12blitCopyWordEPKttttttt+0x94>)
 8018ac8:	f240 210b 	movw	r1, #523	@ 0x20b
 8018acc:	4a0c      	ldr	r2, [pc, #48]	@ (8018b00 <_ZN8touchgfx3HAL12blitCopyWordEPKttttttt+0x98>)
 8018ace:	480d      	ldr	r0, [pc, #52]	@ (8018b04 <_ZN8touchgfx3HAL12blitCopyWordEPKttttttt+0x9c>)
 8018ad0:	f011 ff30 	bl	802a934 <__assert_func>
 8018ad4:	6833      	ldr	r3, [r6, #0]
 8018ad6:	4630      	mov	r0, r6
 8018ad8:	9c00      	ldr	r4, [sp, #0]
 8018ada:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8018adc:	4798      	blx	r3
 8018ade:	4220      	tst	r0, r4
 8018ae0:	d104      	bne.n	8018aec <_ZN8touchgfx3HAL12blitCopyWordEPKttttttt+0x84>
 8018ae2:	4b09      	ldr	r3, [pc, #36]	@ (8018b08 <_ZN8touchgfx3HAL12blitCopyWordEPKttttttt+0xa0>)
 8018ae4:	f44f 7103 	mov.w	r1, #524	@ 0x20c
 8018ae8:	4a05      	ldr	r2, [pc, #20]	@ (8018b00 <_ZN8touchgfx3HAL12blitCopyWordEPKttttttt+0x98>)
 8018aea:	e7f0      	b.n	8018ace <_ZN8touchgfx3HAL12blitCopyWordEPKttttttt+0x66>
 8018aec:	6870      	ldr	r0, [r6, #4]
 8018aee:	4669      	mov	r1, sp
 8018af0:	6803      	ldr	r3, [r0, #0]
 8018af2:	685b      	ldr	r3, [r3, #4]
 8018af4:	4798      	blx	r3
 8018af6:	b008      	add	sp, #32
 8018af8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8018afc:	0802dd15 	.word	0x0802dd15
 8018b00:	0802e048 	.word	0x0802e048
 8018b04:	0802dec7 	.word	0x0802dec7
 8018b08:	0802dd4d 	.word	0x0802dd4d

08018b0c <_ZN8touchgfx3HAL12blitFillWordEtttttt>:
 8018b0c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8018b10:	b089      	sub	sp, #36	@ 0x24
 8018b12:	4693      	mov	fp, r2
 8018b14:	461d      	mov	r5, r3
 8018b16:	2400      	movs	r4, #0
 8018b18:	f8bd 9050 	ldrh.w	r9, [sp, #80]	@ 0x50
 8018b1c:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8018b20:	468a      	mov	sl, r1
 8018b22:	f8bd 8048 	ldrh.w	r8, [sp, #72]	@ 0x48
 8018b26:	fb09 b505 	mla	r5, r9, r5, fp
 8018b2a:	f8bd 704c 	ldrh.w	r7, [sp, #76]	@ 0x4c
 8018b2e:	4606      	mov	r6, r0
 8018b30:	9403      	str	r4, [sp, #12]
 8018b32:	e9cd 3400 	strd	r3, r4, [sp]
 8018b36:	f7ff ff85 	bl	8018a44 <_ZN8touchgfx3HAL20getClientFrameBufferEv>
 8018b3a:	f8ad 8014 	strh.w	r8, [sp, #20]
 8018b3e:	eb00 0545 	add.w	r5, r0, r5, lsl #1
 8018b42:	f8ad 7016 	strh.w	r7, [sp, #22]
 8018b46:	f8ad 4018 	strh.w	r4, [sp, #24]
 8018b4a:	9504      	str	r5, [sp, #16]
 8018b4c:	f8ad 901a 	strh.w	r9, [sp, #26]
 8018b50:	f8cd a00c 	str.w	sl, [sp, #12]
 8018b54:	f8ad 401c 	strh.w	r4, [sp, #28]
 8018b58:	f88d 401e 	strb.w	r4, [sp, #30]
 8018b5c:	f88d 401f 	strb.w	r4, [sp, #31]
 8018b60:	f1b8 0f00 	cmp.w	r8, #0
 8018b64:	d000      	beq.n	8018b68 <_ZN8touchgfx3HAL12blitFillWordEtttttt+0x5c>
 8018b66:	b937      	cbnz	r7, 8018b76 <_ZN8touchgfx3HAL12blitFillWordEtttttt+0x6a>
 8018b68:	4b0d      	ldr	r3, [pc, #52]	@ (8018ba0 <_ZN8touchgfx3HAL12blitFillWordEtttttt+0x94>)
 8018b6a:	f240 2121 	movw	r1, #545	@ 0x221
 8018b6e:	4a0d      	ldr	r2, [pc, #52]	@ (8018ba4 <_ZN8touchgfx3HAL12blitFillWordEtttttt+0x98>)
 8018b70:	480d      	ldr	r0, [pc, #52]	@ (8018ba8 <_ZN8touchgfx3HAL12blitFillWordEtttttt+0x9c>)
 8018b72:	f011 fedf 	bl	802a934 <__assert_func>
 8018b76:	6833      	ldr	r3, [r6, #0]
 8018b78:	4630      	mov	r0, r6
 8018b7a:	9c00      	ldr	r4, [sp, #0]
 8018b7c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8018b7e:	4798      	blx	r3
 8018b80:	4220      	tst	r0, r4
 8018b82:	d104      	bne.n	8018b8e <_ZN8touchgfx3HAL12blitFillWordEtttttt+0x82>
 8018b84:	4b09      	ldr	r3, [pc, #36]	@ (8018bac <_ZN8touchgfx3HAL12blitFillWordEtttttt+0xa0>)
 8018b86:	f240 2122 	movw	r1, #546	@ 0x222
 8018b8a:	4a06      	ldr	r2, [pc, #24]	@ (8018ba4 <_ZN8touchgfx3HAL12blitFillWordEtttttt+0x98>)
 8018b8c:	e7f0      	b.n	8018b70 <_ZN8touchgfx3HAL12blitFillWordEtttttt+0x64>
 8018b8e:	6870      	ldr	r0, [r6, #4]
 8018b90:	4669      	mov	r1, sp
 8018b92:	6803      	ldr	r3, [r0, #0]
 8018b94:	685b      	ldr	r3, [r3, #4]
 8018b96:	4798      	blx	r3
 8018b98:	b009      	add	sp, #36	@ 0x24
 8018b9a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8018b9e:	bf00      	nop
 8018ba0:	0802dd92 	.word	0x0802dd92
 8018ba4:	0802e0be 	.word	0x0802e0be
 8018ba8:	0802dec7 	.word	0x0802dec7
 8018bac:	0802ddca 	.word	0x0802ddca

08018bb0 <_ZNK8touchgfx3HAL11getBitDepthENS_6Bitmap12BitmapFormatE>:
 8018bb0:	b508      	push	{r3, lr}
 8018bb2:	290d      	cmp	r1, #13
 8018bb4:	d817      	bhi.n	8018be6 <_ZNK8touchgfx3HAL11getBitDepthENS_6Bitmap12BitmapFormatE+0x36>
 8018bb6:	e8df f001 	tbb	[pc, r1]
 8018bba:	090b      	.short	0x090b
 8018bbc:	0d0d0d07 	.word	0x0d0d0d07
 8018bc0:	1414140d 	.word	0x1414140d
 8018bc4:	0d0d1414 	.word	0x0d0d1414
 8018bc8:	2020      	movs	r0, #32
 8018bca:	bd08      	pop	{r3, pc}
 8018bcc:	2018      	movs	r0, #24
 8018bce:	e7fc      	b.n	8018bca <_ZNK8touchgfx3HAL11getBitDepthENS_6Bitmap12BitmapFormatE+0x1a>
 8018bd0:	2010      	movs	r0, #16
 8018bd2:	e7fa      	b.n	8018bca <_ZNK8touchgfx3HAL11getBitDepthENS_6Bitmap12BitmapFormatE+0x1a>
 8018bd4:	4b05      	ldr	r3, [pc, #20]	@ (8018bec <_ZNK8touchgfx3HAL11getBitDepthENS_6Bitmap12BitmapFormatE+0x3c>)
 8018bd6:	f240 2182 	movw	r1, #642	@ 0x282
 8018bda:	4a05      	ldr	r2, [pc, #20]	@ (8018bf0 <_ZNK8touchgfx3HAL11getBitDepthENS_6Bitmap12BitmapFormatE+0x40>)
 8018bdc:	4805      	ldr	r0, [pc, #20]	@ (8018bf4 <_ZNK8touchgfx3HAL11getBitDepthENS_6Bitmap12BitmapFormatE+0x44>)
 8018bde:	f011 fea9 	bl	802a934 <__assert_func>
 8018be2:	2008      	movs	r0, #8
 8018be4:	e7f1      	b.n	8018bca <_ZNK8touchgfx3HAL11getBitDepthENS_6Bitmap12BitmapFormatE+0x1a>
 8018be6:	2000      	movs	r0, #0
 8018be8:	e7ef      	b.n	8018bca <_ZNK8touchgfx3HAL11getBitDepthENS_6Bitmap12BitmapFormatE+0x1a>
 8018bea:	bf00      	nop
 8018bec:	0802df43 	.word	0x0802df43
 8018bf0:	0802e3e9 	.word	0x0802e3e9
 8018bf4:	0802dec7 	.word	0x0802dec7

08018bf8 <_ZNK8touchgfx3HAL13getDstAddressEttPttNS_6Bitmap12BitmapFormatE>:
 8018bf8:	b570      	push	{r4, r5, r6, lr}
 8018bfa:	460d      	mov	r5, r1
 8018bfc:	f89d 1014 	ldrb.w	r1, [sp, #20]
 8018c00:	4616      	mov	r6, r2
 8018c02:	461c      	mov	r4, r3
 8018c04:	f7ff ffd4 	bl	8018bb0 <_ZNK8touchgfx3HAL11getBitDepthENS_6Bitmap12BitmapFormatE>
 8018c08:	f8bd 1010 	ldrh.w	r1, [sp, #16]
 8018c0c:	10c0      	asrs	r0, r0, #3
 8018c0e:	fb06 5101 	mla	r1, r6, r1, r5
 8018c12:	fb00 4001 	mla	r0, r0, r1, r4
 8018c16:	bd70      	pop	{r4, r5, r6, pc}

08018c18 <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_b>:
 8018c18:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8018c1c:	b08a      	sub	sp, #40	@ 0x28
 8018c1e:	f04f 0c00 	mov.w	ip, #0
 8018c22:	4604      	mov	r4, r0
 8018c24:	469a      	mov	sl, r3
 8018c26:	f89d 5064 	ldrb.w	r5, [sp, #100]	@ 0x64
 8018c2a:	f8bd 704c 	ldrh.w	r7, [sp, #76]	@ 0x4c
 8018c2e:	2d0b      	cmp	r5, #11
 8018c30:	f8bd 6050 	ldrh.w	r6, [sp, #80]	@ 0x50
 8018c34:	f89d 3058 	ldrb.w	r3, [sp, #88]	@ 0x58
 8018c38:	f89d 005c 	ldrb.w	r0, [sp, #92]	@ 0x5c
 8018c3c:	f8bd 9060 	ldrh.w	r9, [sp, #96]	@ 0x60
 8018c40:	f89d 8068 	ldrb.w	r8, [sp, #104]	@ 0x68
 8018c44:	f8cd c014 	str.w	ip, [sp, #20]
 8018c48:	d12d      	bne.n	8018ca6 <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_b+0x8e>
 8018c4a:	2080      	movs	r0, #128	@ 0x80
 8018c4c:	9204      	str	r2, [sp, #16]
 8018c4e:	f8bd 2054 	ldrh.w	r2, [sp, #84]	@ 0x54
 8018c52:	f88d 3024 	strb.w	r3, [sp, #36]	@ 0x24
 8018c56:	f8ad 2020 	strh.w	r2, [sp, #32]
 8018c5a:	f8ad 701c 	strh.w	r7, [sp, #28]
 8018c5e:	f8ad 601e 	strh.w	r6, [sp, #30]
 8018c62:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8018c66:	4620      	mov	r0, r4
 8018c68:	f7ff feec 	bl	8018a44 <_ZN8touchgfx3HAL20getClientFrameBufferEv>
 8018c6c:	f8bd 2048 	ldrh.w	r2, [sp, #72]	@ 0x48
 8018c70:	4603      	mov	r3, r0
 8018c72:	4651      	mov	r1, sl
 8018c74:	4620      	mov	r0, r4
 8018c76:	e9cd 9800 	strd	r9, r8, [sp]
 8018c7a:	f7ff ffbd 	bl	8018bf8 <_ZNK8touchgfx3HAL13getDstAddressEttPttNS_6Bitmap12BitmapFormatE>
 8018c7e:	f89d 306c 	ldrb.w	r3, [sp, #108]	@ 0x6c
 8018c82:	9006      	str	r0, [sp, #24]
 8018c84:	f8ad 9022 	strh.w	r9, [sp, #34]	@ 0x22
 8018c88:	f88d 5025 	strb.w	r5, [sp, #37]	@ 0x25
 8018c8c:	f88d 8026 	strb.w	r8, [sp, #38]	@ 0x26
 8018c90:	f88d 3027 	strb.w	r3, [sp, #39]	@ 0x27
 8018c94:	b107      	cbz	r7, 8018c98 <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_b+0x80>
 8018c96:	b9d6      	cbnz	r6, 8018cce <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_b+0xb6>
 8018c98:	4b17      	ldr	r3, [pc, #92]	@ (8018cf8 <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_b+0xe0>)
 8018c9a:	f44f 71ea 	mov.w	r1, #468	@ 0x1d4
 8018c9e:	4a17      	ldr	r2, [pc, #92]	@ (8018cfc <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_b+0xe4>)
 8018ca0:	4817      	ldr	r0, [pc, #92]	@ (8018d00 <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_b+0xe8>)
 8018ca2:	f011 fe47 	bl	802a934 <__assert_func>
 8018ca6:	2d02      	cmp	r5, #2
 8018ca8:	d108      	bne.n	8018cbc <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_b+0xa4>
 8018caa:	2bff      	cmp	r3, #255	@ 0xff
 8018cac:	d104      	bne.n	8018cb8 <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_b+0xa0>
 8018cae:	2800      	cmp	r0, #0
 8018cb0:	bf14      	ite	ne
 8018cb2:	2040      	movne	r0, #64	@ 0x40
 8018cb4:	2020      	moveq	r0, #32
 8018cb6:	e7c9      	b.n	8018c4c <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_b+0x34>
 8018cb8:	2040      	movs	r0, #64	@ 0x40
 8018cba:	e7c7      	b.n	8018c4c <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_b+0x34>
 8018cbc:	2bff      	cmp	r3, #255	@ 0xff
 8018cbe:	d104      	bne.n	8018cca <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_b+0xb2>
 8018cc0:	2800      	cmp	r0, #0
 8018cc2:	bf14      	ite	ne
 8018cc4:	2004      	movne	r0, #4
 8018cc6:	2001      	moveq	r0, #1
 8018cc8:	e7c0      	b.n	8018c4c <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_b+0x34>
 8018cca:	2004      	movs	r0, #4
 8018ccc:	e7be      	b.n	8018c4c <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_b+0x34>
 8018cce:	6823      	ldr	r3, [r4, #0]
 8018cd0:	4620      	mov	r0, r4
 8018cd2:	9d02      	ldr	r5, [sp, #8]
 8018cd4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8018cd6:	4798      	blx	r3
 8018cd8:	4228      	tst	r0, r5
 8018cda:	d104      	bne.n	8018ce6 <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_b+0xce>
 8018cdc:	4b09      	ldr	r3, [pc, #36]	@ (8018d04 <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_b+0xec>)
 8018cde:	f240 11d5 	movw	r1, #469	@ 0x1d5
 8018ce2:	4a06      	ldr	r2, [pc, #24]	@ (8018cfc <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_b+0xe4>)
 8018ce4:	e7dc      	b.n	8018ca0 <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_b+0x88>
 8018ce6:	6860      	ldr	r0, [r4, #4]
 8018ce8:	a902      	add	r1, sp, #8
 8018cea:	6803      	ldr	r3, [r0, #0]
 8018cec:	685b      	ldr	r3, [r3, #4]
 8018cee:	4798      	blx	r3
 8018cf0:	b00a      	add	sp, #40	@ 0x28
 8018cf2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8018cf6:	bf00      	nop
 8018cf8:	0802dd15 	.word	0x0802dd15
 8018cfc:	0802e277 	.word	0x0802e277
 8018d00:	0802dec7 	.word	0x0802dec7
 8018d04:	0802dd4d 	.word	0x0802dd4d

08018d08 <_ZN8touchgfx3HAL8blitFillENS_9colortypeEtttthtNS_6Bitmap12BitmapFormatEb>:
 8018d08:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8018d0c:	b08b      	sub	sp, #44	@ 0x2c
 8018d0e:	469b      	mov	fp, r3
 8018d10:	4604      	mov	r4, r0
 8018d12:	4692      	mov	sl, r2
 8018d14:	f89d 7058 	ldrb.w	r7, [sp, #88]	@ 0x58
 8018d18:	2600      	movs	r6, #0
 8018d1a:	f89d 5060 	ldrb.w	r5, [sp, #96]	@ 0x60
 8018d1e:	4689      	mov	r9, r1
 8018d20:	2fff      	cmp	r7, #255	@ 0xff
 8018d22:	f8bd 805c 	ldrh.w	r8, [sp, #92]	@ 0x5c
 8018d26:	9605      	str	r6, [sp, #20]
 8018d28:	bf14      	ite	ne
 8018d2a:	2308      	movne	r3, #8
 8018d2c:	2302      	moveq	r3, #2
 8018d2e:	e9cd 3602 	strd	r3, r6, [sp, #8]
 8018d32:	f7ff fe87 	bl	8018a44 <_ZN8touchgfx3HAL20getClientFrameBufferEv>
 8018d36:	465a      	mov	r2, fp
 8018d38:	4603      	mov	r3, r0
 8018d3a:	4651      	mov	r1, sl
 8018d3c:	4620      	mov	r0, r4
 8018d3e:	e9cd 8500 	strd	r8, r5, [sp]
 8018d42:	f7ff ff59 	bl	8018bf8 <_ZNK8touchgfx3HAL13getDstAddressEttPttNS_6Bitmap12BitmapFormatE>
 8018d46:	f8bd 3050 	ldrh.w	r3, [sp, #80]	@ 0x50
 8018d4a:	f88d 5025 	strb.w	r5, [sp, #37]	@ 0x25
 8018d4e:	f8ad 301c 	strh.w	r3, [sp, #28]
 8018d52:	f8bd 3054 	ldrh.w	r3, [sp, #84]	@ 0x54
 8018d56:	f88d 5026 	strb.w	r5, [sp, #38]	@ 0x26
 8018d5a:	f8ad 301e 	strh.w	r3, [sp, #30]
 8018d5e:	f89d 3064 	ldrb.w	r3, [sp, #100]	@ 0x64
 8018d62:	9d02      	ldr	r5, [sp, #8]
 8018d64:	f88d 3027 	strb.w	r3, [sp, #39]	@ 0x27
 8018d68:	6823      	ldr	r3, [r4, #0]
 8018d6a:	9006      	str	r0, [sp, #24]
 8018d6c:	4620      	mov	r0, r4
 8018d6e:	f8ad 6020 	strh.w	r6, [sp, #32]
 8018d72:	f8ad 8022 	strh.w	r8, [sp, #34]	@ 0x22
 8018d76:	f8cd 9014 	str.w	r9, [sp, #20]
 8018d7a:	f88d 7024 	strb.w	r7, [sp, #36]	@ 0x24
 8018d7e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8018d80:	4798      	blx	r3
 8018d82:	4228      	tst	r0, r5
 8018d84:	d106      	bne.n	8018d94 <_ZN8touchgfx3HAL8blitFillENS_9colortypeEtttthtNS_6Bitmap12BitmapFormatEb+0x8c>
 8018d86:	4b07      	ldr	r3, [pc, #28]	@ (8018da4 <_ZN8touchgfx3HAL8blitFillENS_9colortypeEtttthtNS_6Bitmap12BitmapFormatEb+0x9c>)
 8018d88:	f240 2137 	movw	r1, #567	@ 0x237
 8018d8c:	4a06      	ldr	r2, [pc, #24]	@ (8018da8 <_ZN8touchgfx3HAL8blitFillENS_9colortypeEtttthtNS_6Bitmap12BitmapFormatEb+0xa0>)
 8018d8e:	4807      	ldr	r0, [pc, #28]	@ (8018dac <_ZN8touchgfx3HAL8blitFillENS_9colortypeEtttthtNS_6Bitmap12BitmapFormatEb+0xa4>)
 8018d90:	f011 fdd0 	bl	802a934 <__assert_func>
 8018d94:	6860      	ldr	r0, [r4, #4]
 8018d96:	a902      	add	r1, sp, #8
 8018d98:	6803      	ldr	r3, [r0, #0]
 8018d9a:	685b      	ldr	r3, [r3, #4]
 8018d9c:	4798      	blx	r3
 8018d9e:	b00b      	add	sp, #44	@ 0x2c
 8018da0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8018da4:	0802dd4d 	.word	0x0802dd4d
 8018da8:	0802e34e 	.word	0x0802e34e
 8018dac:	0802dec7 	.word	0x0802dec7

08018db0 <_ZNK8touchgfx3HAL13getDstAddressEttPt>:
 8018db0:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 8018db4:	461f      	mov	r7, r3
 8018db6:	4b0b      	ldr	r3, [pc, #44]	@ (8018de4 <_ZNK8touchgfx3HAL13getDstAddressEttPt+0x34>)
 8018db8:	460d      	mov	r5, r1
 8018dba:	4616      	mov	r6, r2
 8018dbc:	f8b3 8000 	ldrh.w	r8, [r3]
 8018dc0:	4604      	mov	r4, r0
 8018dc2:	f7eb f9bf 	bl	8004144 <_ZN8touchgfx3HAL3lcdEv>
 8018dc6:	6803      	ldr	r3, [r0, #0]
 8018dc8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8018dca:	4798      	blx	r3
 8018dcc:	463b      	mov	r3, r7
 8018dce:	4632      	mov	r2, r6
 8018dd0:	4629      	mov	r1, r5
 8018dd2:	e9cd 8000 	strd	r8, r0, [sp]
 8018dd6:	4620      	mov	r0, r4
 8018dd8:	f7ff ff0e 	bl	8018bf8 <_ZNK8touchgfx3HAL13getDstAddressEttPttNS_6Bitmap12BitmapFormatE>
 8018ddc:	b002      	add	sp, #8
 8018dde:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8018de2:	bf00      	nop
 8018de4:	2400b87a 	.word	0x2400b87a

08018de8 <_ZN8touchgfx3HAL13blitCopyGlyphEPKhtttttNS_9colortypeEhNS_14BlitOperationsEb>:
 8018de8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8018dec:	4698      	mov	r8, r3
 8018dee:	b088      	sub	sp, #32
 8018df0:	2300      	movs	r3, #0
 8018df2:	4617      	mov	r7, r2
 8018df4:	4604      	mov	r4, r0
 8018df6:	f8bd 6038 	ldrh.w	r6, [sp, #56]	@ 0x38
 8018dfa:	9303      	str	r3, [sp, #12]
 8018dfc:	f8bd 304c 	ldrh.w	r3, [sp, #76]	@ 0x4c
 8018e00:	f8bd 503c 	ldrh.w	r5, [sp, #60]	@ 0x3c
 8018e04:	f8ad 6014 	strh.w	r6, [sp, #20]
 8018e08:	f8ad 5016 	strh.w	r5, [sp, #22]
 8018e0c:	e9cd 3100 	strd	r3, r1, [sp]
 8018e10:	f8bd 3040 	ldrh.w	r3, [sp, #64]	@ 0x40
 8018e14:	f8ad 3018 	strh.w	r3, [sp, #24]
 8018e18:	f89d 3048 	ldrb.w	r3, [sp, #72]	@ 0x48
 8018e1c:	f88d 301c 	strb.w	r3, [sp, #28]
 8018e20:	f7ff fe10 	bl	8018a44 <_ZN8touchgfx3HAL20getClientFrameBufferEv>
 8018e24:	4642      	mov	r2, r8
 8018e26:	4603      	mov	r3, r0
 8018e28:	4639      	mov	r1, r7
 8018e2a:	4620      	mov	r0, r4
 8018e2c:	f7ff ffc0 	bl	8018db0 <_ZNK8touchgfx3HAL13getDstAddressEttPt>
 8018e30:	4b18      	ldr	r3, [pc, #96]	@ (8018e94 <_ZN8touchgfx3HAL13blitCopyGlyphEPKhtttttNS_9colortypeEhNS_14BlitOperationsEb+0xac>)
 8018e32:	9004      	str	r0, [sp, #16]
 8018e34:	881b      	ldrh	r3, [r3, #0]
 8018e36:	f8ad 301a 	strh.w	r3, [sp, #26]
 8018e3a:	f7eb f983 	bl	8004144 <_ZN8touchgfx3HAL3lcdEv>
 8018e3e:	6803      	ldr	r3, [r0, #0]
 8018e40:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8018e42:	4798      	blx	r3
 8018e44:	f88d 001e 	strb.w	r0, [sp, #30]
 8018e48:	f88d 001d 	strb.w	r0, [sp, #29]
 8018e4c:	b106      	cbz	r6, 8018e50 <_ZN8touchgfx3HAL13blitCopyGlyphEPKhtttttNS_9colortypeEhNS_14BlitOperationsEb+0x68>
 8018e4e:	b935      	cbnz	r5, 8018e5e <_ZN8touchgfx3HAL13blitCopyGlyphEPKhtttttNS_9colortypeEhNS_14BlitOperationsEb+0x76>
 8018e50:	4b11      	ldr	r3, [pc, #68]	@ (8018e98 <_ZN8touchgfx3HAL13blitCopyGlyphEPKhtttttNS_9colortypeEhNS_14BlitOperationsEb+0xb0>)
 8018e52:	f240 11f1 	movw	r1, #497	@ 0x1f1
 8018e56:	4a11      	ldr	r2, [pc, #68]	@ (8018e9c <_ZN8touchgfx3HAL13blitCopyGlyphEPKhtttttNS_9colortypeEhNS_14BlitOperationsEb+0xb4>)
 8018e58:	4811      	ldr	r0, [pc, #68]	@ (8018ea0 <_ZN8touchgfx3HAL13blitCopyGlyphEPKhtttttNS_9colortypeEhNS_14BlitOperationsEb+0xb8>)
 8018e5a:	f011 fd6b 	bl	802a934 <__assert_func>
 8018e5e:	6823      	ldr	r3, [r4, #0]
 8018e60:	4620      	mov	r0, r4
 8018e62:	9d00      	ldr	r5, [sp, #0]
 8018e64:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8018e66:	4798      	blx	r3
 8018e68:	4228      	tst	r0, r5
 8018e6a:	d104      	bne.n	8018e76 <_ZN8touchgfx3HAL13blitCopyGlyphEPKhtttttNS_9colortypeEhNS_14BlitOperationsEb+0x8e>
 8018e6c:	4b0d      	ldr	r3, [pc, #52]	@ (8018ea4 <_ZN8touchgfx3HAL13blitCopyGlyphEPKhtttttNS_9colortypeEhNS_14BlitOperationsEb+0xbc>)
 8018e6e:	f44f 71f9 	mov.w	r1, #498	@ 0x1f2
 8018e72:	4a0a      	ldr	r2, [pc, #40]	@ (8018e9c <_ZN8touchgfx3HAL13blitCopyGlyphEPKhtttttNS_9colortypeEhNS_14BlitOperationsEb+0xb4>)
 8018e74:	e7f0      	b.n	8018e58 <_ZN8touchgfx3HAL13blitCopyGlyphEPKhtttttNS_9colortypeEhNS_14BlitOperationsEb+0x70>
 8018e76:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 8018e78:	4669      	mov	r1, sp
 8018e7a:	6860      	ldr	r0, [r4, #4]
 8018e7c:	9303      	str	r3, [sp, #12]
 8018e7e:	f89d 3050 	ldrb.w	r3, [sp, #80]	@ 0x50
 8018e82:	f88d 301f 	strb.w	r3, [sp, #31]
 8018e86:	6803      	ldr	r3, [r0, #0]
 8018e88:	685b      	ldr	r3, [r3, #4]
 8018e8a:	4798      	blx	r3
 8018e8c:	b008      	add	sp, #32
 8018e8e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8018e92:	bf00      	nop
 8018e94:	2400b87a 	.word	0x2400b87a
 8018e98:	0802dd15 	.word	0x0802dd15
 8018e9c:	0802e123 	.word	0x0802e123
 8018ea0:	0802dec7 	.word	0x0802dec7
 8018ea4:	0802dd4d 	.word	0x0802dd4d

08018ea8 <_ZN8touchgfx3HAL20copyFBRegionToMemoryENS_4RectE>:
 8018ea8:	b5f0      	push	{r4, r5, r6, r7, lr}
 8018eaa:	b08b      	sub	sp, #44	@ 0x2c
 8018eac:	4604      	mov	r4, r0
 8018eae:	466b      	mov	r3, sp
 8018eb0:	e883 0006 	stmia.w	r3, {r1, r2}
 8018eb4:	4b20      	ldr	r3, [pc, #128]	@ (8018f38 <_ZN8touchgfx3HAL20copyFBRegionToMemoryENS_4RectE+0x90>)
 8018eb6:	781b      	ldrb	r3, [r3, #0]
 8018eb8:	b933      	cbnz	r3, 8018ec8 <_ZN8touchgfx3HAL20copyFBRegionToMemoryENS_4RectE+0x20>
 8018eba:	4b20      	ldr	r3, [pc, #128]	@ (8018f3c <_ZN8touchgfx3HAL20copyFBRegionToMemoryENS_4RectE+0x94>)
 8018ebc:	f44f 7112 	mov.w	r1, #584	@ 0x248
 8018ec0:	4a1f      	ldr	r2, [pc, #124]	@ (8018f40 <_ZN8touchgfx3HAL20copyFBRegionToMemoryENS_4RectE+0x98>)
 8018ec2:	4820      	ldr	r0, [pc, #128]	@ (8018f44 <_ZN8touchgfx3HAL20copyFBRegionToMemoryENS_4RectE+0x9c>)
 8018ec4:	f011 fd36 	bl	802a934 <__assert_func>
 8018ec8:	2301      	movs	r3, #1
 8018eca:	2500      	movs	r5, #0
 8018ecc:	f8bd 6000 	ldrh.w	r6, [sp]
 8018ed0:	9302      	str	r3, [sp, #8]
 8018ed2:	6803      	ldr	r3, [r0, #0]
 8018ed4:	f8bd 7002 	ldrh.w	r7, [sp, #2]
 8018ed8:	9505      	str	r5, [sp, #20]
 8018eda:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8018edc:	4798      	blx	r3
 8018ede:	463a      	mov	r2, r7
 8018ee0:	4631      	mov	r1, r6
 8018ee2:	4603      	mov	r3, r0
 8018ee4:	4620      	mov	r0, r4
 8018ee6:	f7ff ff63 	bl	8018db0 <_ZNK8touchgfx3HAL13getDstAddressEttPt>
 8018eea:	6c63      	ldr	r3, [r4, #68]	@ 0x44
 8018eec:	9003      	str	r0, [sp, #12]
 8018eee:	9306      	str	r3, [sp, #24]
 8018ef0:	f8bd 3004 	ldrh.w	r3, [sp, #4]
 8018ef4:	f8ad 301c 	strh.w	r3, [sp, #28]
 8018ef8:	f8bd 3006 	ldrh.w	r3, [sp, #6]
 8018efc:	f8ad 301e 	strh.w	r3, [sp, #30]
 8018f00:	4b11      	ldr	r3, [pc, #68]	@ (8018f48 <_ZN8touchgfx3HAL20copyFBRegionToMemoryENS_4RectE+0xa0>)
 8018f02:	881b      	ldrh	r3, [r3, #0]
 8018f04:	f8ad 3020 	strh.w	r3, [sp, #32]
 8018f08:	f8ad 3022 	strh.w	r3, [sp, #34]	@ 0x22
 8018f0c:	f7eb f91a 	bl	8004144 <_ZN8touchgfx3HAL3lcdEv>
 8018f10:	6803      	ldr	r3, [r0, #0]
 8018f12:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8018f14:	4798      	blx	r3
 8018f16:	23ff      	movs	r3, #255	@ 0xff
 8018f18:	f88d 0025 	strb.w	r0, [sp, #37]	@ 0x25
 8018f1c:	a902      	add	r1, sp, #8
 8018f1e:	f88d 0026 	strb.w	r0, [sp, #38]	@ 0x26
 8018f22:	6860      	ldr	r0, [r4, #4]
 8018f24:	f88d 3024 	strb.w	r3, [sp, #36]	@ 0x24
 8018f28:	f88d 5027 	strb.w	r5, [sp, #39]	@ 0x27
 8018f2c:	6803      	ldr	r3, [r0, #0]
 8018f2e:	685b      	ldr	r3, [r3, #4]
 8018f30:	4798      	blx	r3
 8018f32:	6c60      	ldr	r0, [r4, #68]	@ 0x44
 8018f34:	b00b      	add	sp, #44	@ 0x2c
 8018f36:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8018f38:	2400b87f 	.word	0x2400b87f
 8018f3c:	0802de14 	.word	0x0802de14
 8018f40:	0802e1cd 	.word	0x0802e1cd
 8018f44:	0802dec7 	.word	0x0802dec7
 8018f48:	2400b87a 	.word	0x2400b87a

08018f4c <_ZN8touchgfx3HAL20copyFBRegionToMemoryENS_4RectEPtm>:
 8018f4c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8018f50:	b08a      	sub	sp, #40	@ 0x28
 8018f52:	2600      	movs	r6, #0
 8018f54:	4604      	mov	r4, r0
 8018f56:	466d      	mov	r5, sp
 8018f58:	9605      	str	r6, [sp, #20]
 8018f5a:	e885 0006 	stmia.w	r5, {r1, r2}
 8018f5e:	461d      	mov	r5, r3
 8018f60:	2301      	movs	r3, #1
 8018f62:	f8bd 7000 	ldrh.w	r7, [sp]
 8018f66:	9302      	str	r3, [sp, #8]
 8018f68:	6803      	ldr	r3, [r0, #0]
 8018f6a:	f8bd 8002 	ldrh.w	r8, [sp, #2]
 8018f6e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8018f70:	4798      	blx	r3
 8018f72:	4642      	mov	r2, r8
 8018f74:	4639      	mov	r1, r7
 8018f76:	4603      	mov	r3, r0
 8018f78:	4620      	mov	r0, r4
 8018f7a:	f7ff ff19 	bl	8018db0 <_ZNK8touchgfx3HAL13getDstAddressEttPt>
 8018f7e:	f8bd 3004 	ldrh.w	r3, [sp, #4]
 8018f82:	9003      	str	r0, [sp, #12]
 8018f84:	f8ad 301c 	strh.w	r3, [sp, #28]
 8018f88:	f8bd 3006 	ldrh.w	r3, [sp, #6]
 8018f8c:	9506      	str	r5, [sp, #24]
 8018f8e:	f8ad 301e 	strh.w	r3, [sp, #30]
 8018f92:	4b0f      	ldr	r3, [pc, #60]	@ (8018fd0 <_ZN8touchgfx3HAL20copyFBRegionToMemoryENS_4RectEPtm+0x84>)
 8018f94:	881b      	ldrh	r3, [r3, #0]
 8018f96:	f8ad 3020 	strh.w	r3, [sp, #32]
 8018f9a:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8018f9c:	f8ad 3022 	strh.w	r3, [sp, #34]	@ 0x22
 8018fa0:	f7eb f8d0 	bl	8004144 <_ZN8touchgfx3HAL3lcdEv>
 8018fa4:	6803      	ldr	r3, [r0, #0]
 8018fa6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8018fa8:	4798      	blx	r3
 8018faa:	23ff      	movs	r3, #255	@ 0xff
 8018fac:	f88d 0025 	strb.w	r0, [sp, #37]	@ 0x25
 8018fb0:	a902      	add	r1, sp, #8
 8018fb2:	f88d 0026 	strb.w	r0, [sp, #38]	@ 0x26
 8018fb6:	6860      	ldr	r0, [r4, #4]
 8018fb8:	f88d 3024 	strb.w	r3, [sp, #36]	@ 0x24
 8018fbc:	f88d 6027 	strb.w	r6, [sp, #39]	@ 0x27
 8018fc0:	6803      	ldr	r3, [r0, #0]
 8018fc2:	685b      	ldr	r3, [r3, #4]
 8018fc4:	4798      	blx	r3
 8018fc6:	4628      	mov	r0, r5
 8018fc8:	b00a      	add	sp, #40	@ 0x28
 8018fca:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8018fce:	bf00      	nop
 8018fd0:	2400b87a 	.word	0x2400b87a

08018fd4 <_ZN8touchgfx3HAL16swapFrameBuffersEv>:
 8018fd4:	b570      	push	{r4, r5, r6, lr}
 8018fd6:	f890 306a 	ldrb.w	r3, [r0, #106]	@ 0x6a
 8018fda:	4604      	mov	r4, r0
 8018fdc:	b19b      	cbz	r3, 8019006 <_ZN8touchgfx3HAL16swapFrameBuffersEv+0x32>
 8018fde:	2002      	movs	r0, #2
 8018fe0:	f7e8 fcaa 	bl	8001938 <_ZN8touchgfx4GPIO6toggleENS0_7GPIO_IDE>
 8018fe4:	2300      	movs	r3, #0
 8018fe6:	4620      	mov	r0, r4
 8018fe8:	f884 306a 	strb.w	r3, [r4, #106]	@ 0x6a
 8018fec:	f884 3069 	strb.w	r3, [r4, #105]	@ 0x69
 8018ff0:	6823      	ldr	r3, [r4, #0]
 8018ff2:	f8d3 50b0 	ldr.w	r5, [r3, #176]	@ 0xb0
 8018ff6:	f7ff fd25 	bl	8018a44 <_ZN8touchgfx3HAL20getClientFrameBufferEv>
 8018ffa:	4601      	mov	r1, r0
 8018ffc:	4620      	mov	r0, r4
 8018ffe:	462b      	mov	r3, r5
 8019000:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8019004:	4718      	bx	r3
 8019006:	bd70      	pop	{r4, r5, r6, pc}

08019008 <_ZN8touchgfx3HAL18setRenderingMethodENS0_15RenderingMethodE>:
 8019008:	b538      	push	{r3, r4, r5, lr}
 801900a:	f890 2078 	ldrb.w	r2, [r0, #120]	@ 0x78
 801900e:	4604      	mov	r4, r0
 8019010:	460d      	mov	r5, r1
 8019012:	428a      	cmp	r2, r1
 8019014:	d008      	beq.n	8019028 <_ZN8touchgfx3HAL18setRenderingMethodENS0_15RenderingMethodE+0x20>
 8019016:	2a01      	cmp	r2, #1
 8019018:	6803      	ldr	r3, [r0, #0]
 801901a:	d106      	bne.n	801902a <_ZN8touchgfx3HAL18setRenderingMethodENS0_15RenderingMethodE+0x22>
 801901c:	b929      	cbnz	r1, 801902a <_ZN8touchgfx3HAL18setRenderingMethodENS0_15RenderingMethodE+0x22>
 801901e:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 8019022:	4798      	blx	r3
 8019024:	f884 5078 	strb.w	r5, [r4, #120]	@ 0x78
 8019028:	bd38      	pop	{r3, r4, r5, pc}
 801902a:	f8d3 30c4 	ldr.w	r3, [r3, #196]	@ 0xc4
 801902e:	4620      	mov	r0, r4
 8019030:	e7f7      	b.n	8019022 <_ZN8touchgfx3HAL18setRenderingMethodENS0_15RenderingMethodE+0x1a>
	...

08019034 <_ZN8touchgfx3HAL15lockFrameBufferEv>:
 8019034:	4b0d      	ldr	r3, [pc, #52]	@ (801906c <_ZN8touchgfx3HAL15lockFrameBufferEv+0x38>)
 8019036:	b510      	push	{r4, lr}
 8019038:	781b      	ldrb	r3, [r3, #0]
 801903a:	4604      	mov	r4, r0
 801903c:	b95b      	cbnz	r3, 8019056 <_ZN8touchgfx3HAL15lockFrameBufferEv+0x22>
 801903e:	f890 3048 	ldrb.w	r3, [r0, #72]	@ 0x48
 8019042:	2b02      	cmp	r3, #2
 8019044:	d007      	beq.n	8019056 <_ZN8touchgfx3HAL15lockFrameBufferEv+0x22>
 8019046:	6840      	ldr	r0, [r0, #4]
 8019048:	f000 f936 	bl	80192b8 <_ZN8touchgfx13DMA_Interface15isDmaQueueEmptyEv>
 801904c:	b118      	cbz	r0, 8019056 <_ZN8touchgfx3HAL15lockFrameBufferEv+0x22>
 801904e:	6862      	ldr	r2, [r4, #4]
 8019050:	7a53      	ldrb	r3, [r2, #9]
 8019052:	2b00      	cmp	r3, #0
 8019054:	d0fc      	beq.n	8019050 <_ZN8touchgfx3HAL15lockFrameBufferEv+0x1c>
 8019056:	f7e8 ff2d 	bl	8001eb4 <_ZN8touchgfx10OSWrappers24takeFrameBufferSemaphoreEv>
 801905a:	4620      	mov	r0, r4
 801905c:	2100      	movs	r1, #0
 801905e:	f7ff ffd3 	bl	8019008 <_ZN8touchgfx3HAL18setRenderingMethodENS0_15RenderingMethodE>
 8019062:	4620      	mov	r0, r4
 8019064:	f7ff fcee 	bl	8018a44 <_ZN8touchgfx3HAL20getClientFrameBufferEv>
 8019068:	bd10      	pop	{r4, pc}
 801906a:	bf00      	nop
 801906c:	2400b87e 	.word	0x2400b87e

08019070 <_ZN8touchgfx13DMA_Interface10initializeEv>:
 8019070:	4770      	bx	lr

08019072 <_ZN8touchgfx13DMA_Interface10getDMATypeEv>:
 8019072:	2000      	movs	r0, #0
 8019074:	4770      	bx	lr

08019076 <_ZN8touchgfx17LockFreeDMA_Queue7isEmptyEv>:
 8019076:	e9d0 2003 	ldrd	r2, r0, [r0, #12]
 801907a:	1a13      	subs	r3, r2, r0
 801907c:	4258      	negs	r0, r3
 801907e:	4158      	adcs	r0, r3
 8019080:	4770      	bx	lr

08019082 <_ZN8touchgfx17LockFreeDMA_Queue6isFullEv>:
 8019082:	e9d0 2303 	ldrd	r2, r3, [r0, #12]
 8019086:	1a9b      	subs	r3, r3, r2
 8019088:	2b00      	cmp	r3, #0
 801908a:	bfdc      	itt	le
 801908c:	6882      	ldrle	r2, [r0, #8]
 801908e:	189b      	addle	r3, r3, r2
 8019090:	2b01      	cmp	r3, #1
 8019092:	bfcc      	ite	gt
 8019094:	2000      	movgt	r0, #0
 8019096:	2001      	movle	r0, #1
 8019098:	4770      	bx	lr

0801909a <_ZN8touchgfx17LockFreeDMA_Queue5firstEv>:
 801909a:	6902      	ldr	r2, [r0, #16]
 801909c:	6840      	ldr	r0, [r0, #4]
 801909e:	eb00 1042 	add.w	r0, r0, r2, lsl #5
 80190a2:	4770      	bx	lr

080190a4 <_ZN8touchgfx13DMA_Interface13seedExecutionEv>:
 80190a4:	6803      	ldr	r3, [r0, #0]
 80190a6:	691b      	ldr	r3, [r3, #16]
 80190a8:	4718      	bx	r3

080190aa <_ZN8touchgfx13DMA_Interface11enableAlphaEh>:
 80190aa:	4770      	bx	lr

080190ac <_ZN8touchgfx13DMA_Interface12disableAlphaEv>:
 80190ac:	4770      	bx	lr
	...

080190b0 <_ZN8touchgfx13DMA_Interface7executeEv>:
 80190b0:	2301      	movs	r3, #1
 80190b2:	b570      	push	{r4, r5, r6, lr}
 80190b4:	7203      	strb	r3, [r0, #8]
 80190b6:	4604      	mov	r4, r0
 80190b8:	6840      	ldr	r0, [r0, #4]
 80190ba:	6803      	ldr	r3, [r0, #0]
 80190bc:	699b      	ldr	r3, [r3, #24]
 80190be:	4798      	blx	r3
 80190c0:	6803      	ldr	r3, [r0, #0]
 80190c2:	4605      	mov	r5, r0
 80190c4:	2b40      	cmp	r3, #64	@ 0x40
 80190c6:	d039      	beq.n	801913c <_ZN8touchgfx13DMA_Interface7executeEv+0x8c>
 80190c8:	d815      	bhi.n	80190f6 <_ZN8touchgfx13DMA_Interface7executeEv+0x46>
 80190ca:	2b04      	cmp	r3, #4
 80190cc:	d022      	beq.n	8019114 <_ZN8touchgfx13DMA_Interface7executeEv+0x64>
 80190ce:	d808      	bhi.n	80190e2 <_ZN8touchgfx13DMA_Interface7executeEv+0x32>
 80190d0:	2b01      	cmp	r3, #1
 80190d2:	d033      	beq.n	801913c <_ZN8touchgfx13DMA_Interface7executeEv+0x8c>
 80190d4:	2b02      	cmp	r3, #2
 80190d6:	d108      	bne.n	80190ea <_ZN8touchgfx13DMA_Interface7executeEv+0x3a>
 80190d8:	6823      	ldr	r3, [r4, #0]
 80190da:	4620      	mov	r0, r4
 80190dc:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80190de:	4798      	blx	r3
 80190e0:	e025      	b.n	801912e <_ZN8touchgfx13DMA_Interface7executeEv+0x7e>
 80190e2:	2b08      	cmp	r3, #8
 80190e4:	d01e      	beq.n	8019124 <_ZN8touchgfx13DMA_Interface7executeEv+0x74>
 80190e6:	2b20      	cmp	r3, #32
 80190e8:	d028      	beq.n	801913c <_ZN8touchgfx13DMA_Interface7executeEv+0x8c>
 80190ea:	4b17      	ldr	r3, [pc, #92]	@ (8019148 <_ZN8touchgfx13DMA_Interface7executeEv+0x98>)
 80190ec:	218b      	movs	r1, #139	@ 0x8b
 80190ee:	4a17      	ldr	r2, [pc, #92]	@ (801914c <_ZN8touchgfx13DMA_Interface7executeEv+0x9c>)
 80190f0:	4817      	ldr	r0, [pc, #92]	@ (8019150 <_ZN8touchgfx13DMA_Interface7executeEv+0xa0>)
 80190f2:	f011 fc1f 	bl	802a934 <__assert_func>
 80190f6:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80190fa:	d01f      	beq.n	801913c <_ZN8touchgfx13DMA_Interface7executeEv+0x8c>
 80190fc:	d804      	bhi.n	8019108 <_ZN8touchgfx13DMA_Interface7executeEv+0x58>
 80190fe:	2b80      	cmp	r3, #128	@ 0x80
 8019100:	d01c      	beq.n	801913c <_ZN8touchgfx13DMA_Interface7executeEv+0x8c>
 8019102:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8019106:	e7ef      	b.n	80190e8 <_ZN8touchgfx13DMA_Interface7executeEv+0x38>
 8019108:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 801910c:	d016      	beq.n	801913c <_ZN8touchgfx13DMA_Interface7executeEv+0x8c>
 801910e:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8019112:	e7e0      	b.n	80190d6 <_ZN8touchgfx13DMA_Interface7executeEv+0x26>
 8019114:	6823      	ldr	r3, [r4, #0]
 8019116:	7f01      	ldrb	r1, [r0, #28]
 8019118:	4620      	mov	r0, r4
 801911a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 801911c:	4798      	blx	r3
 801911e:	6823      	ldr	r3, [r4, #0]
 8019120:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8019122:	e006      	b.n	8019132 <_ZN8touchgfx13DMA_Interface7executeEv+0x82>
 8019124:	6823      	ldr	r3, [r4, #0]
 8019126:	7f01      	ldrb	r1, [r0, #28]
 8019128:	4620      	mov	r0, r4
 801912a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 801912c:	4798      	blx	r3
 801912e:	6823      	ldr	r3, [r4, #0]
 8019130:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8019132:	4629      	mov	r1, r5
 8019134:	4620      	mov	r0, r4
 8019136:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 801913a:	4718      	bx	r3
 801913c:	6823      	ldr	r3, [r4, #0]
 801913e:	4620      	mov	r0, r4
 8019140:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8019142:	4798      	blx	r3
 8019144:	e7eb      	b.n	801911e <_ZN8touchgfx13DMA_Interface7executeEv+0x6e>
 8019146:	bf00      	nop
 8019148:	0802e432 	.word	0x0802e432
 801914c:	0802e544 	.word	0x0802e544
 8019150:	0802e457 	.word	0x0802e457

08019154 <_ZN8touchgfx13DMA_Interface10addToQueueERKNS_6BlitOpE>:
 8019154:	b570      	push	{r4, r5, r6, lr}
 8019156:	4604      	mov	r4, r0
 8019158:	460e      	mov	r6, r1
 801915a:	6860      	ldr	r0, [r4, #4]
 801915c:	6803      	ldr	r3, [r0, #0]
 801915e:	685b      	ldr	r3, [r3, #4]
 8019160:	4798      	blx	r3
 8019162:	2800      	cmp	r0, #0
 8019164:	d1f9      	bne.n	801915a <_ZN8touchgfx13DMA_Interface10addToQueueERKNS_6BlitOpE+0x6>
 8019166:	4d0d      	ldr	r5, [pc, #52]	@ (801919c <_ZN8touchgfx13DMA_Interface10addToQueueERKNS_6BlitOpE+0x48>)
 8019168:	6828      	ldr	r0, [r5, #0]
 801916a:	6803      	ldr	r3, [r0, #0]
 801916c:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 801916e:	4798      	blx	r3
 8019170:	f7e8 feba 	bl	8001ee8 <_ZN8touchgfx10OSWrappers27tryTakeFrameBufferSemaphoreEv>
 8019174:	6828      	ldr	r0, [r5, #0]
 8019176:	2101      	movs	r1, #1
 8019178:	f7ff ff46 	bl	8019008 <_ZN8touchgfx3HAL18setRenderingMethodENS0_15RenderingMethodE>
 801917c:	6860      	ldr	r0, [r4, #4]
 801917e:	4631      	mov	r1, r6
 8019180:	6803      	ldr	r3, [r0, #0]
 8019182:	689b      	ldr	r3, [r3, #8]
 8019184:	4798      	blx	r3
 8019186:	6823      	ldr	r3, [r4, #0]
 8019188:	4620      	mov	r0, r4
 801918a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801918c:	4798      	blx	r3
 801918e:	6828      	ldr	r0, [r5, #0]
 8019190:	6803      	ldr	r3, [r0, #0]
 8019192:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8019196:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8019198:	4718      	bx	r3
 801919a:	bf00      	nop
 801919c:	2400b880 	.word	0x2400b880

080191a0 <_ZN8touchgfx13DMA_Interface27waitForFrameBufferSemaphoreEv>:
 80191a0:	b508      	push	{r3, lr}
 80191a2:	f7e8 fe87 	bl	8001eb4 <_ZN8touchgfx10OSWrappers24takeFrameBufferSemaphoreEv>
 80191a6:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 80191aa:	f7e8 be91 	b.w	8001ed0 <_ZN8touchgfx10OSWrappers24giveFrameBufferSemaphoreEv>

080191ae <_ZN8touchgfx13DMA_Interface5startEv>:
 80191ae:	b510      	push	{r4, lr}
 80191b0:	4604      	mov	r4, r0
 80191b2:	6840      	ldr	r0, [r0, #4]
 80191b4:	6803      	ldr	r3, [r0, #0]
 80191b6:	681b      	ldr	r3, [r3, #0]
 80191b8:	4798      	blx	r3
 80191ba:	b948      	cbnz	r0, 80191d0 <_ZN8touchgfx13DMA_Interface5startEv+0x22>
 80191bc:	7a63      	ldrb	r3, [r4, #9]
 80191be:	b13b      	cbz	r3, 80191d0 <_ZN8touchgfx13DMA_Interface5startEv+0x22>
 80191c0:	7a23      	ldrb	r3, [r4, #8]
 80191c2:	b92b      	cbnz	r3, 80191d0 <_ZN8touchgfx13DMA_Interface5startEv+0x22>
 80191c4:	6823      	ldr	r3, [r4, #0]
 80191c6:	4620      	mov	r0, r4
 80191c8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80191ca:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80191ce:	4718      	bx	r3
 80191d0:	bd10      	pop	{r4, pc}
	...

080191d4 <_ZN8touchgfx17LockFreeDMA_Queue10pushCopyOfERKNS_6BlitOpE>:
 80191d4:	b570      	push	{r4, r5, r6, lr}
 80191d6:	e9d0 2303 	ldrd	r2, r3, [r0, #12]
 80191da:	4606      	mov	r6, r0
 80191dc:	1a9b      	subs	r3, r3, r2
 80191de:	2b00      	cmp	r3, #0
 80191e0:	bfdc      	itt	le
 80191e2:	6880      	ldrle	r0, [r0, #8]
 80191e4:	181b      	addle	r3, r3, r0
 80191e6:	2b01      	cmp	r3, #1
 80191e8:	dd13      	ble.n	8019212 <_ZN8touchgfx17LockFreeDMA_Queue10pushCopyOfERKNS_6BlitOpE+0x3e>
 80191ea:	6874      	ldr	r4, [r6, #4]
 80191ec:	460d      	mov	r5, r1
 80191ee:	eb04 1442 	add.w	r4, r4, r2, lsl #5
 80191f2:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80191f4:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80191f6:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 80191fa:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 80191fe:	68f3      	ldr	r3, [r6, #12]
 8019200:	68b2      	ldr	r2, [r6, #8]
 8019202:	f3bf 8f5b 	dmb	ish
 8019206:	3301      	adds	r3, #1
 8019208:	429a      	cmp	r2, r3
 801920a:	bfd8      	it	le
 801920c:	1a9b      	suble	r3, r3, r2
 801920e:	60f3      	str	r3, [r6, #12]
 8019210:	bd70      	pop	{r4, r5, r6, pc}
 8019212:	4b03      	ldr	r3, [pc, #12]	@ (8019220 <_ZN8touchgfx17LockFreeDMA_Queue10pushCopyOfERKNS_6BlitOpE+0x4c>)
 8019214:	2139      	movs	r1, #57	@ 0x39
 8019216:	4a03      	ldr	r2, [pc, #12]	@ (8019224 <_ZN8touchgfx17LockFreeDMA_Queue10pushCopyOfERKNS_6BlitOpE+0x50>)
 8019218:	4803      	ldr	r0, [pc, #12]	@ (8019228 <_ZN8touchgfx17LockFreeDMA_Queue10pushCopyOfERKNS_6BlitOpE+0x54>)
 801921a:	f011 fb8b 	bl	802a934 <__assert_func>
 801921e:	bf00      	nop
 8019220:	0802e47d 	.word	0x0802e47d
 8019224:	0802e574 	.word	0x0802e574
 8019228:	0802e457 	.word	0x0802e457

0801922c <_ZN8touchgfx17LockFreeDMA_Queue3popEv>:
 801922c:	b510      	push	{r4, lr}
 801922e:	6803      	ldr	r3, [r0, #0]
 8019230:	4604      	mov	r4, r0
 8019232:	681b      	ldr	r3, [r3, #0]
 8019234:	4798      	blx	r3
 8019236:	b128      	cbz	r0, 8019244 <_ZN8touchgfx17LockFreeDMA_Queue3popEv+0x18>
 8019238:	4b07      	ldr	r3, [pc, #28]	@ (8019258 <_ZN8touchgfx17LockFreeDMA_Queue3popEv+0x2c>)
 801923a:	213f      	movs	r1, #63	@ 0x3f
 801923c:	4a07      	ldr	r2, [pc, #28]	@ (801925c <_ZN8touchgfx17LockFreeDMA_Queue3popEv+0x30>)
 801923e:	4808      	ldr	r0, [pc, #32]	@ (8019260 <_ZN8touchgfx17LockFreeDMA_Queue3popEv+0x34>)
 8019240:	f011 fb78 	bl	802a934 <__assert_func>
 8019244:	6923      	ldr	r3, [r4, #16]
 8019246:	68a2      	ldr	r2, [r4, #8]
 8019248:	f3bf 8f5b 	dmb	ish
 801924c:	3301      	adds	r3, #1
 801924e:	429a      	cmp	r2, r3
 8019250:	bfd8      	it	le
 8019252:	1a9b      	suble	r3, r3, r2
 8019254:	6123      	str	r3, [r4, #16]
 8019256:	bd10      	pop	{r4, pc}
 8019258:	0802e4a0 	.word	0x0802e4a0
 801925c:	0802e5c2 	.word	0x0802e5c2
 8019260:	0802e457 	.word	0x0802e457

08019264 <_ZN8touchgfx13DMA_Interface16executeCompletedEv>:
 8019264:	b570      	push	{r4, r5, r6, lr}
 8019266:	4604      	mov	r4, r0
 8019268:	6840      	ldr	r0, [r0, #4]
 801926a:	6803      	ldr	r3, [r0, #0]
 801926c:	681b      	ldr	r3, [r3, #0]
 801926e:	4798      	blx	r3
 8019270:	4605      	mov	r5, r0
 8019272:	b930      	cbnz	r0, 8019282 <_ZN8touchgfx13DMA_Interface16executeCompletedEv+0x1e>
 8019274:	7a23      	ldrb	r3, [r4, #8]
 8019276:	b123      	cbz	r3, 8019282 <_ZN8touchgfx13DMA_Interface16executeCompletedEv+0x1e>
 8019278:	6860      	ldr	r0, [r4, #4]
 801927a:	6803      	ldr	r3, [r0, #0]
 801927c:	695b      	ldr	r3, [r3, #20]
 801927e:	4798      	blx	r3
 8019280:	7225      	strb	r5, [r4, #8]
 8019282:	6860      	ldr	r0, [r4, #4]
 8019284:	6803      	ldr	r3, [r0, #0]
 8019286:	681b      	ldr	r3, [r3, #0]
 8019288:	4798      	blx	r3
 801928a:	b928      	cbnz	r0, 8019298 <_ZN8touchgfx13DMA_Interface16executeCompletedEv+0x34>
 801928c:	6823      	ldr	r3, [r4, #0]
 801928e:	4620      	mov	r0, r4
 8019290:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8019292:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8019296:	4718      	bx	r3
 8019298:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 801929c:	f7e8 be30 	b.w	8001f00 <_ZN8touchgfx10OSWrappers31giveFrameBufferSemaphoreFromISREv>

080192a0 <_ZN8touchgfx17LockFreeDMA_QueueC1EPNS_6BlitOpEi>:
 80192a0:	b510      	push	{r4, lr}
 80192a2:	6082      	str	r2, [r0, #8]
 80192a4:	2200      	movs	r2, #0
 80192a6:	4c03      	ldr	r4, [pc, #12]	@ (80192b4 <_ZN8touchgfx17LockFreeDMA_QueueC1EPNS_6BlitOpEi+0x14>)
 80192a8:	e9c0 2203 	strd	r2, r2, [r0, #12]
 80192ac:	e9c0 4100 	strd	r4, r1, [r0]
 80192b0:	bd10      	pop	{r4, pc}
 80192b2:	bf00      	nop
 80192b4:	0802e528 	.word	0x0802e528

080192b8 <_ZN8touchgfx13DMA_Interface15isDmaQueueEmptyEv>:
 80192b8:	6840      	ldr	r0, [r0, #4]
 80192ba:	6803      	ldr	r3, [r0, #0]
 80192bc:	681b      	ldr	r3, [r3, #0]
 80192be:	4718      	bx	r3

080192c0 <_ZNK8touchgfx14AbstractButton15getPressedStateEv>:
 80192c0:	f890 002c 	ldrb.w	r0, [r0, #44]	@ 0x2c
 80192c4:	4770      	bx	lr

080192c6 <_ZN8touchgfx14AbstractButton13executeActionEv>:
 80192c6:	b510      	push	{r4, lr}
 80192c8:	4604      	mov	r4, r0
 80192ca:	6a80      	ldr	r0, [r0, #40]	@ 0x28
 80192cc:	b150      	cbz	r0, 80192e4 <_ZN8touchgfx14AbstractButton13executeActionEv+0x1e>
 80192ce:	6803      	ldr	r3, [r0, #0]
 80192d0:	68db      	ldr	r3, [r3, #12]
 80192d2:	4798      	blx	r3
 80192d4:	b130      	cbz	r0, 80192e4 <_ZN8touchgfx14AbstractButton13executeActionEv+0x1e>
 80192d6:	6aa0      	ldr	r0, [r4, #40]	@ 0x28
 80192d8:	4621      	mov	r1, r4
 80192da:	6803      	ldr	r3, [r0, #0]
 80192dc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80192e0:	689b      	ldr	r3, [r3, #8]
 80192e2:	4718      	bx	r3
 80192e4:	bd10      	pop	{r4, pc}

080192e6 <_ZN8touchgfx14AbstractButton16handleClickEventERKNS_10ClickEventE>:
 80192e6:	790b      	ldrb	r3, [r1, #4]
 80192e8:	2b00      	cmp	r3, #0
 80192ea:	bf0c      	ite	eq
 80192ec:	2301      	moveq	r3, #1
 80192ee:	2300      	movne	r3, #0
 80192f0:	b570      	push	{r4, r5, r6, lr}
 80192f2:	4604      	mov	r4, r0
 80192f4:	f890 502c 	ldrb.w	r5, [r0, #44]	@ 0x2c
 80192f8:	460e      	mov	r6, r1
 80192fa:	f880 302c 	strb.w	r3, [r0, #44]	@ 0x2c
 80192fe:	d109      	bne.n	8019314 <_ZN8touchgfx14AbstractButton16handleClickEventERKNS_10ClickEventE+0x2e>
 8019300:	b14d      	cbz	r5, 8019316 <_ZN8touchgfx14AbstractButton16handleClickEventERKNS_10ClickEventE+0x30>
 8019302:	7933      	ldrb	r3, [r6, #4]
 8019304:	2b01      	cmp	r3, #1
 8019306:	d10c      	bne.n	8019322 <_ZN8touchgfx14AbstractButton16handleClickEventERKNS_10ClickEventE+0x3c>
 8019308:	6823      	ldr	r3, [r4, #0]
 801930a:	4620      	mov	r0, r4
 801930c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 801930e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8019312:	4718      	bx	r3
 8019314:	b12d      	cbz	r5, 8019322 <_ZN8touchgfx14AbstractButton16handleClickEventERKNS_10ClickEventE+0x3c>
 8019316:	6823      	ldr	r3, [r4, #0]
 8019318:	4620      	mov	r0, r4
 801931a:	695b      	ldr	r3, [r3, #20]
 801931c:	4798      	blx	r3
 801931e:	2d00      	cmp	r5, #0
 8019320:	d1ef      	bne.n	8019302 <_ZN8touchgfx14AbstractButton16handleClickEventERKNS_10ClickEventE+0x1c>
 8019322:	bd70      	pop	{r4, r5, r6, pc}

08019324 <_ZN8touchgfx12ToggleButton16handleClickEventERKNS_10ClickEventE>:
 8019324:	f890 302c 	ldrb.w	r3, [r0, #44]	@ 0x2c
 8019328:	b133      	cbz	r3, 8019338 <_ZN8touchgfx12ToggleButton16handleClickEventERKNS_10ClickEventE+0x14>
 801932a:	790b      	ldrb	r3, [r1, #4]
 801932c:	2b01      	cmp	r3, #1
 801932e:	bf01      	itttt	eq
 8019330:	8dc3      	ldrheq	r3, [r0, #46]	@ 0x2e
 8019332:	8e02      	ldrheq	r2, [r0, #48]	@ 0x30
 8019334:	8603      	strheq	r3, [r0, #48]	@ 0x30
 8019336:	85c2      	strheq	r2, [r0, #46]	@ 0x2e
 8019338:	f7ff bfd5 	b.w	80192e6 <_ZN8touchgfx14AbstractButton16handleClickEventERKNS_10ClickEventE>

0801933c <_ZN8touchgfx12ToggleButton10forceStateEb>:
 801933c:	b570      	push	{r4, r5, r6, lr}
 801933e:	4604      	mov	r4, r0
 8019340:	f100 0534 	add.w	r5, r0, #52	@ 0x34
 8019344:	b169      	cbz	r1, 8019362 <_ZN8touchgfx12ToggleButton10forceStateEb+0x26>
 8019346:	302e      	adds	r0, #46	@ 0x2e
 8019348:	f7f1 f820 	bl	800a38c <_ZNK8touchgfx6Bitmap5getIdEv>
 801934c:	4606      	mov	r6, r0
 801934e:	4628      	mov	r0, r5
 8019350:	f7f1 f81c 	bl	800a38c <_ZNK8touchgfx6Bitmap5getIdEv>
 8019354:	4286      	cmp	r6, r0
 8019356:	d003      	beq.n	8019360 <_ZN8touchgfx12ToggleButton10forceStateEb+0x24>
 8019358:	8de3      	ldrh	r3, [r4, #46]	@ 0x2e
 801935a:	8623      	strh	r3, [r4, #48]	@ 0x30
 801935c:	8ea3      	ldrh	r3, [r4, #52]	@ 0x34
 801935e:	85e3      	strh	r3, [r4, #46]	@ 0x2e
 8019360:	bd70      	pop	{r4, r5, r6, pc}
 8019362:	3030      	adds	r0, #48	@ 0x30
 8019364:	f7f1 f812 	bl	800a38c <_ZNK8touchgfx6Bitmap5getIdEv>
 8019368:	4606      	mov	r6, r0
 801936a:	4628      	mov	r0, r5
 801936c:	f7f1 f80e 	bl	800a38c <_ZNK8touchgfx6Bitmap5getIdEv>
 8019370:	4286      	cmp	r6, r0
 8019372:	bf1f      	itttt	ne
 8019374:	8e23      	ldrhne	r3, [r4, #48]	@ 0x30
 8019376:	85e3      	strhne	r3, [r4, #46]	@ 0x2e
 8019378:	8ea3      	ldrhne	r3, [r4, #52]	@ 0x34
 801937a:	8623      	strhne	r3, [r4, #48]	@ 0x30
 801937c:	e7f0      	b.n	8019360 <_ZN8touchgfx12ToggleButton10forceStateEb+0x24>

0801937e <_ZNK8touchgfx8TextArea12getSolidRectEv>:
 801937e:	2200      	movs	r2, #0
 8019380:	8002      	strh	r2, [r0, #0]
 8019382:	8042      	strh	r2, [r0, #2]
 8019384:	8082      	strh	r2, [r0, #4]
 8019386:	80c2      	strh	r2, [r0, #6]
 8019388:	4770      	bx	lr

0801938a <_ZN8touchgfx8TextArea13setXBaselineYEss>:
 801938a:	b570      	push	{r4, r5, r6, lr}
 801938c:	6803      	ldr	r3, [r0, #0]
 801938e:	4604      	mov	r4, r0
 8019390:	4615      	mov	r5, r2
 8019392:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8019394:	4798      	blx	r3
 8019396:	6823      	ldr	r3, [r4, #0]
 8019398:	4629      	mov	r1, r5
 801939a:	4620      	mov	r0, r4
 801939c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 801939e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 80193a2:	4718      	bx	r3

080193a4 <_ZNK8touchgfx8TextArea12getTextWidthEv>:
 80193a4:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80193a6:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 80193aa:	8d81      	ldrh	r1, [r0, #44]	@ 0x2c
 80193ac:	4299      	cmp	r1, r3
 80193ae:	d029      	beq.n	8019404 <_ZNK8touchgfx8TextArea12getTextWidthEv+0x60>
 80193b0:	4b15      	ldr	r3, [pc, #84]	@ (8019408 <_ZNK8touchgfx8TextArea12getTextWidthEv+0x64>)
 80193b2:	681b      	ldr	r3, [r3, #0]
 80193b4:	b92b      	cbnz	r3, 80193c2 <_ZNK8touchgfx8TextArea12getTextWidthEv+0x1e>
 80193b6:	4b15      	ldr	r3, [pc, #84]	@ (801940c <_ZNK8touchgfx8TextArea12getTextWidthEv+0x68>)
 80193b8:	21ae      	movs	r1, #174	@ 0xae
 80193ba:	4a15      	ldr	r2, [pc, #84]	@ (8019410 <_ZNK8touchgfx8TextArea12getTextWidthEv+0x6c>)
 80193bc:	4815      	ldr	r0, [pc, #84]	@ (8019414 <_ZNK8touchgfx8TextArea12getTextWidthEv+0x70>)
 80193be:	f011 fab9 	bl	802a934 <__assert_func>
 80193c2:	4a15      	ldr	r2, [pc, #84]	@ (8019418 <_ZNK8touchgfx8TextArea12getTextWidthEv+0x74>)
 80193c4:	8812      	ldrh	r2, [r2, #0]
 80193c6:	428a      	cmp	r2, r1
 80193c8:	d803      	bhi.n	80193d2 <_ZNK8touchgfx8TextArea12getTextWidthEv+0x2e>
 80193ca:	4b14      	ldr	r3, [pc, #80]	@ (801941c <_ZNK8touchgfx8TextArea12getTextWidthEv+0x78>)
 80193cc:	21af      	movs	r1, #175	@ 0xaf
 80193ce:	4a10      	ldr	r2, [pc, #64]	@ (8019410 <_ZNK8touchgfx8TextArea12getTextWidthEv+0x6c>)
 80193d0:	e7f4      	b.n	80193bc <_ZNK8touchgfx8TextArea12getTextWidthEv+0x18>
 80193d2:	eb03 0241 	add.w	r2, r3, r1, lsl #1
 80193d6:	f813 0011 	ldrb.w	r0, [r3, r1, lsl #1]
 80193da:	4b11      	ldr	r3, [pc, #68]	@ (8019420 <_ZNK8touchgfx8TextArea12getTextWidthEv+0x7c>)
 80193dc:	7854      	ldrb	r4, [r2, #1]
 80193de:	681b      	ldr	r3, [r3, #0]
 80193e0:	f3c4 0481 	ubfx	r4, r4, #2, #2
 80193e4:	f853 5020 	ldr.w	r5, [r3, r0, lsl #2]
 80193e8:	682b      	ldr	r3, [r5, #0]
 80193ea:	69de      	ldr	r6, [r3, #28]
 80193ec:	4b0d      	ldr	r3, [pc, #52]	@ (8019424 <_ZNK8touchgfx8TextArea12getTextWidthEv+0x80>)
 80193ee:	6818      	ldr	r0, [r3, #0]
 80193f0:	f7f0 fdc0 	bl	8009f74 <_ZNK8touchgfx5Texts7getTextEt>
 80193f4:	2300      	movs	r3, #0
 80193f6:	4602      	mov	r2, r0
 80193f8:	4621      	mov	r1, r4
 80193fa:	9300      	str	r3, [sp, #0]
 80193fc:	4628      	mov	r0, r5
 80193fe:	47b0      	blx	r6
 8019400:	b002      	add	sp, #8
 8019402:	bd70      	pop	{r4, r5, r6, pc}
 8019404:	2000      	movs	r0, #0
 8019406:	e7fb      	b.n	8019400 <_ZNK8touchgfx8TextArea12getTextWidthEv+0x5c>
 8019408:	2400b8d0 	.word	0x2400b8d0
 801940c:	0802e6d0 	.word	0x0802e6d0
 8019410:	0802e808 	.word	0x0802e808
 8019414:	0802e712 	.word	0x0802e712
 8019418:	2400b8d4 	.word	0x2400b8d4
 801941c:	0802e73b 	.word	0x0802e73b
 8019420:	2400b8d8 	.word	0x2400b8d8
 8019424:	2400b8dc 	.word	0x2400b8dc

08019428 <_ZN8touchgfx8TextArea12setBaselineYEs>:
 8019428:	b570      	push	{r4, r5, r6, lr}
 801942a:	6803      	ldr	r3, [r0, #0]
 801942c:	4604      	mov	r4, r0
 801942e:	b28d      	uxth	r5, r1
 8019430:	8d82      	ldrh	r2, [r0, #44]	@ 0x2c
 8019432:	6b1e      	ldr	r6, [r3, #48]	@ 0x30
 8019434:	4b10      	ldr	r3, [pc, #64]	@ (8019478 <_ZN8touchgfx8TextArea12setBaselineYEs+0x50>)
 8019436:	681b      	ldr	r3, [r3, #0]
 8019438:	b92b      	cbnz	r3, 8019446 <_ZN8touchgfx8TextArea12setBaselineYEs+0x1e>
 801943a:	4b10      	ldr	r3, [pc, #64]	@ (801947c <_ZN8touchgfx8TextArea12setBaselineYEs+0x54>)
 801943c:	21ae      	movs	r1, #174	@ 0xae
 801943e:	4a10      	ldr	r2, [pc, #64]	@ (8019480 <_ZN8touchgfx8TextArea12setBaselineYEs+0x58>)
 8019440:	4810      	ldr	r0, [pc, #64]	@ (8019484 <_ZN8touchgfx8TextArea12setBaselineYEs+0x5c>)
 8019442:	f011 fa77 	bl	802a934 <__assert_func>
 8019446:	4910      	ldr	r1, [pc, #64]	@ (8019488 <_ZN8touchgfx8TextArea12setBaselineYEs+0x60>)
 8019448:	8809      	ldrh	r1, [r1, #0]
 801944a:	4291      	cmp	r1, r2
 801944c:	d803      	bhi.n	8019456 <_ZN8touchgfx8TextArea12setBaselineYEs+0x2e>
 801944e:	4b0f      	ldr	r3, [pc, #60]	@ (801948c <_ZN8touchgfx8TextArea12setBaselineYEs+0x64>)
 8019450:	21af      	movs	r1, #175	@ 0xaf
 8019452:	4a0b      	ldr	r2, [pc, #44]	@ (8019480 <_ZN8touchgfx8TextArea12setBaselineYEs+0x58>)
 8019454:	e7f4      	b.n	8019440 <_ZN8touchgfx8TextArea12setBaselineYEs+0x18>
 8019456:	f813 2012 	ldrb.w	r2, [r3, r2, lsl #1]
 801945a:	4b0d      	ldr	r3, [pc, #52]	@ (8019490 <_ZN8touchgfx8TextArea12setBaselineYEs+0x68>)
 801945c:	681b      	ldr	r3, [r3, #0]
 801945e:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 8019462:	6803      	ldr	r3, [r0, #0]
 8019464:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8019466:	4798      	blx	r3
 8019468:	1a29      	subs	r1, r5, r0
 801946a:	4633      	mov	r3, r6
 801946c:	4620      	mov	r0, r4
 801946e:	b209      	sxth	r1, r1
 8019470:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8019474:	4718      	bx	r3
 8019476:	bf00      	nop
 8019478:	2400b8d0 	.word	0x2400b8d0
 801947c:	0802e6d0 	.word	0x0802e6d0
 8019480:	0802e808 	.word	0x0802e808
 8019484:	0802e712 	.word	0x0802e712
 8019488:	2400b8d4 	.word	0x2400b8d4
 801948c:	0802e73b 	.word	0x0802e73b
 8019490:	2400b8d8 	.word	0x2400b8d8

08019494 <_ZNK8touchgfx8TextArea4drawERKNS_4RectE>:
 8019494:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8019498:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 801949c:	8d83      	ldrh	r3, [r0, #44]	@ 0x2c
 801949e:	b08c      	sub	sp, #48	@ 0x30
 80194a0:	4604      	mov	r4, r0
 80194a2:	4293      	cmp	r3, r2
 80194a4:	4688      	mov	r8, r1
 80194a6:	d05f      	beq.n	8019568 <_ZNK8touchgfx8TextArea4drawERKNS_4RectE+0xd4>
 80194a8:	4e31      	ldr	r6, [pc, #196]	@ (8019570 <_ZNK8touchgfx8TextArea4drawERKNS_4RectE+0xdc>)
 80194aa:	6832      	ldr	r2, [r6, #0]
 80194ac:	b92a      	cbnz	r2, 80194ba <_ZNK8touchgfx8TextArea4drawERKNS_4RectE+0x26>
 80194ae:	4b31      	ldr	r3, [pc, #196]	@ (8019574 <_ZNK8touchgfx8TextArea4drawERKNS_4RectE+0xe0>)
 80194b0:	21ae      	movs	r1, #174	@ 0xae
 80194b2:	4a31      	ldr	r2, [pc, #196]	@ (8019578 <_ZNK8touchgfx8TextArea4drawERKNS_4RectE+0xe4>)
 80194b4:	4831      	ldr	r0, [pc, #196]	@ (801957c <_ZNK8touchgfx8TextArea4drawERKNS_4RectE+0xe8>)
 80194b6:	f011 fa3d 	bl	802a934 <__assert_func>
 80194ba:	4d31      	ldr	r5, [pc, #196]	@ (8019580 <_ZNK8touchgfx8TextArea4drawERKNS_4RectE+0xec>)
 80194bc:	8829      	ldrh	r1, [r5, #0]
 80194be:	4299      	cmp	r1, r3
 80194c0:	d803      	bhi.n	80194ca <_ZNK8touchgfx8TextArea4drawERKNS_4RectE+0x36>
 80194c2:	4b30      	ldr	r3, [pc, #192]	@ (8019584 <_ZNK8touchgfx8TextArea4drawERKNS_4RectE+0xf0>)
 80194c4:	21af      	movs	r1, #175	@ 0xaf
 80194c6:	4a2c      	ldr	r2, [pc, #176]	@ (8019578 <_ZNK8touchgfx8TextArea4drawERKNS_4RectE+0xe4>)
 80194c8:	e7f4      	b.n	80194b4 <_ZNK8touchgfx8TextArea4drawERKNS_4RectE+0x20>
 80194ca:	eb02 0143 	add.w	r1, r2, r3, lsl #1
 80194ce:	f812 2013 	ldrb.w	r2, [r2, r3, lsl #1]
 80194d2:	4b2d      	ldr	r3, [pc, #180]	@ (8019588 <_ZNK8touchgfx8TextArea4drawERKNS_4RectE+0xf4>)
 80194d4:	681b      	ldr	r3, [r3, #0]
 80194d6:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 80194da:	2a00      	cmp	r2, #0
 80194dc:	d044      	beq.n	8019568 <_ZNK8touchgfx8TextArea4drawERKNS_4RectE+0xd4>
 80194de:	784b      	ldrb	r3, [r1, #1]
 80194e0:	f890 c036 	ldrb.w	ip, [r0, #54]	@ 0x36
 80194e4:	f3c3 0a01 	ubfx	sl, r3, #0, #2
 80194e8:	f3c3 0381 	ubfx	r3, r3, #2, #2
 80194ec:	f9b0 e034 	ldrsh.w	lr, [r0, #52]	@ 0x34
 80194f0:	f88d 3021 	strb.w	r3, [sp, #33]	@ 0x21
 80194f4:	4b25      	ldr	r3, [pc, #148]	@ (801958c <_ZNK8touchgfx8TextArea4drawERKNS_4RectE+0xf8>)
 80194f6:	f890 9038 	ldrb.w	r9, [r0, #56]	@ 0x38
 80194fa:	681b      	ldr	r3, [r3, #0]
 80194fc:	f890 7037 	ldrb.w	r7, [r0, #55]	@ 0x37
 8019500:	f890 1039 	ldrb.w	r1, [r0, #57]	@ 0x39
 8019504:	9207      	str	r2, [sp, #28]
 8019506:	6b00      	ldr	r0, [r0, #48]	@ 0x30
 8019508:	f893 2076 	ldrb.w	r2, [r3, #118]	@ 0x76
 801950c:	f88d a020 	strb.w	sl, [sp, #32]
 8019510:	f88d 9022 	strb.w	r9, [sp, #34]	@ 0x22
 8019514:	9009      	str	r0, [sp, #36]	@ 0x24
 8019516:	f8ad e028 	strh.w	lr, [sp, #40]	@ 0x28
 801951a:	f88d c02a 	strb.w	ip, [sp, #42]	@ 0x2a
 801951e:	f88d 702b 	strb.w	r7, [sp, #43]	@ 0x2b
 8019522:	f88d 102c 	strb.w	r1, [sp, #44]	@ 0x2c
 8019526:	b10a      	cbz	r2, 801952c <_ZNK8touchgfx8TextArea4drawERKNS_4RectE+0x98>
 8019528:	6cdf      	ldr	r7, [r3, #76]	@ 0x4c
 801952a:	b907      	cbnz	r7, 801952e <_ZNK8touchgfx8TextArea4drawERKNS_4RectE+0x9a>
 801952c:	689f      	ldr	r7, [r3, #8]
 801952e:	f10d 0914 	add.w	r9, sp, #20
 8019532:	4621      	mov	r1, r4
 8019534:	4648      	mov	r0, r9
 8019536:	f003 f8f1 	bl	801c71c <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 801953a:	6833      	ldr	r3, [r6, #0]
 801953c:	2b00      	cmp	r3, #0
 801953e:	d0b6      	beq.n	80194ae <_ZNK8touchgfx8TextArea4drawERKNS_4RectE+0x1a>
 8019540:	8da1      	ldrh	r1, [r4, #44]	@ 0x2c
 8019542:	882b      	ldrh	r3, [r5, #0]
 8019544:	428b      	cmp	r3, r1
 8019546:	d9bc      	bls.n	80194c2 <_ZNK8touchgfx8TextArea4drawERKNS_4RectE+0x2e>
 8019548:	4b11      	ldr	r3, [pc, #68]	@ (8019590 <_ZNK8touchgfx8TextArea4drawERKNS_4RectE+0xfc>)
 801954a:	6818      	ldr	r0, [r3, #0]
 801954c:	f7f0 fd12 	bl	8009f74 <_ZNK8touchgfx5Texts7getTextEt>
 8019550:	2300      	movs	r3, #0
 8019552:	9001      	str	r0, [sp, #4]
 8019554:	4638      	mov	r0, r7
 8019556:	e9cd 3302 	strd	r3, r3, [sp, #8]
 801955a:	ab07      	add	r3, sp, #28
 801955c:	9300      	str	r3, [sp, #0]
 801955e:	4643      	mov	r3, r8
 8019560:	e899 0006 	ldmia.w	r9, {r1, r2}
 8019564:	f7f0 fc97 	bl	8009e96 <_ZN8touchgfx3LCD10drawStringENS_4RectERKS1_RKNS0_13StringVisualsEPKtz>
 8019568:	b00c      	add	sp, #48	@ 0x30
 801956a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801956e:	bf00      	nop
 8019570:	2400b8d0 	.word	0x2400b8d0
 8019574:	0802e6d0 	.word	0x0802e6d0
 8019578:	0802e808 	.word	0x0802e808
 801957c:	0802e712 	.word	0x0802e712
 8019580:	2400b8d4 	.word	0x2400b8d4
 8019584:	0802e73b 	.word	0x0802e73b
 8019588:	2400b8d8 	.word	0x2400b8d8
 801958c:	2400b880 	.word	0x2400b880
 8019590:	2400b8dc 	.word	0x2400b8dc

08019594 <_ZNK8touchgfx8TextArea19calculateTextHeightEPKtz>:
 8019594:	b40e      	push	{r1, r2, r3}
 8019596:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 801959a:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801959e:	8d83      	ldrh	r3, [r0, #44]	@ 0x2c
 80195a0:	b09c      	sub	sp, #112	@ 0x70
 80195a2:	4604      	mov	r4, r0
 80195a4:	4293      	cmp	r3, r2
 80195a6:	d06b      	beq.n	8019680 <_ZNK8touchgfx8TextArea19calculateTextHeightEPKtz+0xec>
 80195a8:	aa26      	add	r2, sp, #152	@ 0x98
 80195aa:	f8df a0e8 	ldr.w	sl, [pc, #232]	@ 8019694 <_ZNK8touchgfx8TextArea19calculateTextHeightEPKtz+0x100>
 80195ae:	9202      	str	r2, [sp, #8]
 80195b0:	f8da 2000 	ldr.w	r2, [sl]
 80195b4:	b92a      	cbnz	r2, 80195c2 <_ZNK8touchgfx8TextArea19calculateTextHeightEPKtz+0x2e>
 80195b6:	4b33      	ldr	r3, [pc, #204]	@ (8019684 <_ZNK8touchgfx8TextArea19calculateTextHeightEPKtz+0xf0>)
 80195b8:	21ae      	movs	r1, #174	@ 0xae
 80195ba:	4a33      	ldr	r2, [pc, #204]	@ (8019688 <_ZNK8touchgfx8TextArea19calculateTextHeightEPKtz+0xf4>)
 80195bc:	4833      	ldr	r0, [pc, #204]	@ (801968c <_ZNK8touchgfx8TextArea19calculateTextHeightEPKtz+0xf8>)
 80195be:	f011 f9b9 	bl	802a934 <__assert_func>
 80195c2:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8019698 <_ZNK8touchgfx8TextArea19calculateTextHeightEPKtz+0x104>
 80195c6:	f8b8 1000 	ldrh.w	r1, [r8]
 80195ca:	4299      	cmp	r1, r3
 80195cc:	d803      	bhi.n	80195d6 <_ZNK8touchgfx8TextArea19calculateTextHeightEPKtz+0x42>
 80195ce:	4b30      	ldr	r3, [pc, #192]	@ (8019690 <_ZNK8touchgfx8TextArea19calculateTextHeightEPKtz+0xfc>)
 80195d0:	21af      	movs	r1, #175	@ 0xaf
 80195d2:	4a2d      	ldr	r2, [pc, #180]	@ (8019688 <_ZNK8touchgfx8TextArea19calculateTextHeightEPKtz+0xf4>)
 80195d4:	e7f2      	b.n	80195bc <_ZNK8touchgfx8TextArea19calculateTextHeightEPKtz+0x28>
 80195d6:	f8df 90c4 	ldr.w	r9, [pc, #196]	@ 801969c <_ZNK8touchgfx8TextArea19calculateTextHeightEPKtz+0x108>
 80195da:	f812 2013 	ldrb.w	r2, [r2, r3, lsl #1]
 80195de:	f8d9 3000 	ldr.w	r3, [r9]
 80195e2:	f853 5022 	ldr.w	r5, [r3, r2, lsl #2]
 80195e6:	682b      	ldr	r3, [r5, #0]
 80195e8:	4628      	mov	r0, r5
 80195ea:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80195ec:	4798      	blx	r3
 80195ee:	4606      	mov	r6, r0
 80195f0:	b207      	sxth	r7, r0
 80195f2:	a803      	add	r0, sp, #12
 80195f4:	f003 fd2a 	bl	801d04c <_ZN8touchgfx12TextProviderC1Ev>
 80195f8:	682b      	ldr	r3, [r5, #0]
 80195fa:	4628      	mov	r0, r5
 80195fc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80195fe:	4798      	blx	r3
 8019600:	682b      	ldr	r3, [r5, #0]
 8019602:	4683      	mov	fp, r0
 8019604:	4628      	mov	r0, r5
 8019606:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8019608:	4798      	blx	r3
 801960a:	465b      	mov	r3, fp
 801960c:	9000      	str	r0, [sp, #0]
 801960e:	a803      	add	r0, sp, #12
 8019610:	9925      	ldr	r1, [sp, #148]	@ 0x94
 8019612:	9a02      	ldr	r2, [sp, #8]
 8019614:	f003 fd6d 	bl	801d0f2 <_ZN8touchgfx12TextProvider10initializeEPKtSt9__va_listS2_PKNS_24FontContextualFormsTableE>
 8019618:	f8da 3000 	ldr.w	r3, [sl]
 801961c:	f894 1039 	ldrb.w	r1, [r4, #57]	@ 0x39
 8019620:	2b00      	cmp	r3, #0
 8019622:	d0c8      	beq.n	80195b6 <_ZNK8touchgfx8TextArea19calculateTextHeightEPKtz+0x22>
 8019624:	8da2      	ldrh	r2, [r4, #44]	@ 0x2c
 8019626:	f8b8 0000 	ldrh.w	r0, [r8]
 801962a:	4290      	cmp	r0, r2
 801962c:	d9cf      	bls.n	80195ce <_ZNK8touchgfx8TextArea19calculateTextHeightEPKtz+0x3a>
 801962e:	eb03 0542 	add.w	r5, r3, r2, lsl #1
 8019632:	f813 0012 	ldrb.w	r0, [r3, r2, lsl #1]
 8019636:	f894 c037 	ldrb.w	ip, [r4, #55]	@ 0x37
 801963a:	786a      	ldrb	r2, [r5, #1]
 801963c:	8925      	ldrh	r5, [r4, #8]
 801963e:	f8d9 3000 	ldr.w	r3, [r9]
 8019642:	f3c2 0281 	ubfx	r2, r2, #2, #2
 8019646:	eba5 050c 	sub.w	r5, r5, ip
 801964a:	b22d      	sxth	r5, r5
 801964c:	9500      	str	r5, [sp, #0]
 801964e:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
 8019652:	a803      	add	r0, sp, #12
 8019654:	f001 fb5b 	bl	801ad0e <_ZN8touchgfx3LCD11getNumLinesERNS_12TextProviderENS_14WideTextActionEhPKNS_4FontEs>
 8019658:	f9b4 2034 	ldrsh.w	r2, [r4, #52]	@ 0x34
 801965c:	b203      	sxth	r3, r0
 801965e:	18b9      	adds	r1, r7, r2
 8019660:	2900      	cmp	r1, #0
 8019662:	dd0b      	ble.n	801967c <_ZNK8touchgfx8TextArea19calculateTextHeightEPKtz+0xe8>
 8019664:	3b01      	subs	r3, #1
 8019666:	fb13 f302 	smulbb	r3, r3, r2
 801966a:	fb16 3300 	smlabb	r3, r6, r0, r3
 801966e:	b21f      	sxth	r7, r3
 8019670:	4638      	mov	r0, r7
 8019672:	b01c      	add	sp, #112	@ 0x70
 8019674:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8019678:	b003      	add	sp, #12
 801967a:	4770      	bx	lr
 801967c:	2b00      	cmp	r3, #0
 801967e:	dcf7      	bgt.n	8019670 <_ZNK8touchgfx8TextArea19calculateTextHeightEPKtz+0xdc>
 8019680:	2700      	movs	r7, #0
 8019682:	e7f5      	b.n	8019670 <_ZNK8touchgfx8TextArea19calculateTextHeightEPKtz+0xdc>
 8019684:	0802e6d0 	.word	0x0802e6d0
 8019688:	0802e808 	.word	0x0802e808
 801968c:	0802e712 	.word	0x0802e712
 8019690:	0802e73b 	.word	0x0802e73b
 8019694:	2400b8d0 	.word	0x2400b8d0
 8019698:	2400b8d4 	.word	0x2400b8d4
 801969c:	2400b8d8 	.word	0x2400b8d8

080196a0 <_ZN8touchgfx8TextArea13getTextHeightEv>:
 80196a0:	b570      	push	{r4, r5, r6, lr}
 80196a2:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 80196a6:	8d81      	ldrh	r1, [r0, #44]	@ 0x2c
 80196a8:	4604      	mov	r4, r0
 80196aa:	4299      	cmp	r1, r3
 80196ac:	d01e      	beq.n	80196ec <_ZN8touchgfx8TextArea13getTextHeightEv+0x4c>
 80196ae:	6803      	ldr	r3, [r0, #0]
 80196b0:	6edd      	ldr	r5, [r3, #108]	@ 0x6c
 80196b2:	4b0f      	ldr	r3, [pc, #60]	@ (80196f0 <_ZN8touchgfx8TextArea13getTextHeightEv+0x50>)
 80196b4:	681b      	ldr	r3, [r3, #0]
 80196b6:	b92b      	cbnz	r3, 80196c4 <_ZN8touchgfx8TextArea13getTextHeightEv+0x24>
 80196b8:	4b0e      	ldr	r3, [pc, #56]	@ (80196f4 <_ZN8touchgfx8TextArea13getTextHeightEv+0x54>)
 80196ba:	21ae      	movs	r1, #174	@ 0xae
 80196bc:	4a0e      	ldr	r2, [pc, #56]	@ (80196f8 <_ZN8touchgfx8TextArea13getTextHeightEv+0x58>)
 80196be:	480f      	ldr	r0, [pc, #60]	@ (80196fc <_ZN8touchgfx8TextArea13getTextHeightEv+0x5c>)
 80196c0:	f011 f938 	bl	802a934 <__assert_func>
 80196c4:	4b0e      	ldr	r3, [pc, #56]	@ (8019700 <_ZN8touchgfx8TextArea13getTextHeightEv+0x60>)
 80196c6:	881b      	ldrh	r3, [r3, #0]
 80196c8:	428b      	cmp	r3, r1
 80196ca:	d803      	bhi.n	80196d4 <_ZN8touchgfx8TextArea13getTextHeightEv+0x34>
 80196cc:	4b0d      	ldr	r3, [pc, #52]	@ (8019704 <_ZN8touchgfx8TextArea13getTextHeightEv+0x64>)
 80196ce:	21af      	movs	r1, #175	@ 0xaf
 80196d0:	4a09      	ldr	r2, [pc, #36]	@ (80196f8 <_ZN8touchgfx8TextArea13getTextHeightEv+0x58>)
 80196d2:	e7f4      	b.n	80196be <_ZN8touchgfx8TextArea13getTextHeightEv+0x1e>
 80196d4:	4b0c      	ldr	r3, [pc, #48]	@ (8019708 <_ZN8touchgfx8TextArea13getTextHeightEv+0x68>)
 80196d6:	6818      	ldr	r0, [r3, #0]
 80196d8:	f7f0 fc4c 	bl	8009f74 <_ZNK8touchgfx5Texts7getTextEt>
 80196dc:	2300      	movs	r3, #0
 80196de:	4601      	mov	r1, r0
 80196e0:	46ac      	mov	ip, r5
 80196e2:	4620      	mov	r0, r4
 80196e4:	461a      	mov	r2, r3
 80196e6:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 80196ea:	4760      	bx	ip
 80196ec:	2000      	movs	r0, #0
 80196ee:	bd70      	pop	{r4, r5, r6, pc}
 80196f0:	2400b8d0 	.word	0x2400b8d0
 80196f4:	0802e6d0 	.word	0x0802e6d0
 80196f8:	0802e808 	.word	0x0802e808
 80196fc:	0802e712 	.word	0x0802e712
 8019700:	2400b8d4 	.word	0x2400b8d4
 8019704:	0802e73b 	.word	0x0802e73b
 8019708:	2400b8dc 	.word	0x2400b8dc

0801970c <_ZN8touchgfx8TextArea19resizeToCurrentTextEv>:
 801970c:	b538      	push	{r3, r4, r5, lr}
 801970e:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8019712:	8d82      	ldrh	r2, [r0, #44]	@ 0x2c
 8019714:	4604      	mov	r4, r0
 8019716:	429a      	cmp	r2, r3
 8019718:	d014      	beq.n	8019744 <_ZN8touchgfx8TextArea19resizeToCurrentTextEv+0x38>
 801971a:	6803      	ldr	r3, [r0, #0]
 801971c:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 801971e:	4798      	blx	r3
 8019720:	6823      	ldr	r3, [r4, #0]
 8019722:	4605      	mov	r5, r0
 8019724:	4620      	mov	r0, r4
 8019726:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8019728:	4798      	blx	r3
 801972a:	f894 3038 	ldrb.w	r3, [r4, #56]	@ 0x38
 801972e:	b22d      	sxth	r5, r5
 8019730:	4601      	mov	r1, r0
 8019732:	f013 0ffd 	tst.w	r3, #253	@ 0xfd
 8019736:	bf06      	itte	eq
 8019738:	4602      	moveq	r2, r0
 801973a:	4629      	moveq	r1, r5
 801973c:	462a      	movne	r2, r5
 801973e:	4620      	mov	r0, r4
 8019740:	f7ea fc66 	bl	8004010 <_ZN8touchgfx8Drawable14setWidthHeightEss>
 8019744:	bd38      	pop	{r3, r4, r5, pc}

08019746 <_ZN8touchgfx8TextArea12setTypedTextERKNS_9TypedTextE>:
 8019746:	888a      	ldrh	r2, [r1, #4]
 8019748:	8582      	strh	r2, [r0, #44]	@ 0x2c
 801974a:	f9b0 2008 	ldrsh.w	r2, [r0, #8]
 801974e:	b922      	cbnz	r2, 801975a <_ZN8touchgfx8TextArea12setTypedTextERKNS_9TypedTextE+0x14>
 8019750:	f9b0 300a 	ldrsh.w	r3, [r0, #10]
 8019754:	b90b      	cbnz	r3, 801975a <_ZN8touchgfx8TextArea12setTypedTextERKNS_9TypedTextE+0x14>
 8019756:	f7ff bfd9 	b.w	801970c <_ZN8touchgfx8TextArea19resizeToCurrentTextEv>
 801975a:	4770      	bx	lr

0801975c <_ZNK8touchgfx3Box12getSolidRectEv>:
 801975c:	2300      	movs	r3, #0
 801975e:	8083      	strh	r3, [r0, #4]
 8019760:	80c3      	strh	r3, [r0, #6]
 8019762:	8003      	strh	r3, [r0, #0]
 8019764:	8043      	strh	r3, [r0, #2]
 8019766:	f891 3026 	ldrb.w	r3, [r1, #38]	@ 0x26
 801976a:	2bff      	cmp	r3, #255	@ 0xff
 801976c:	bf01      	itttt	eq
 801976e:	890b      	ldrheq	r3, [r1, #8]
 8019770:	8083      	strheq	r3, [r0, #4]
 8019772:	894b      	ldrheq	r3, [r1, #10]
 8019774:	80c3      	strheq	r3, [r0, #6]
 8019776:	4770      	bx	lr

08019778 <_ZNK8touchgfx3Box4drawERKNS_4RectE>:
 8019778:	b537      	push	{r0, r1, r2, r4, r5, lr}
 801977a:	4604      	mov	r4, r0
 801977c:	466b      	mov	r3, sp
 801977e:	6808      	ldr	r0, [r1, #0]
 8019780:	6849      	ldr	r1, [r1, #4]
 8019782:	c303      	stmia	r3!, {r0, r1}
 8019784:	6823      	ldr	r3, [r4, #0]
 8019786:	4669      	mov	r1, sp
 8019788:	4620      	mov	r0, r4
 801978a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 801978c:	4798      	blx	r3
 801978e:	4b08      	ldr	r3, [pc, #32]	@ (80197b0 <_ZNK8touchgfx3Box4drawERKNS_4RectE+0x38>)
 8019790:	681b      	ldr	r3, [r3, #0]
 8019792:	f893 2076 	ldrb.w	r2, [r3, #118]	@ 0x76
 8019796:	b10a      	cbz	r2, 801979c <_ZNK8touchgfx3Box4drawERKNS_4RectE+0x24>
 8019798:	6cd8      	ldr	r0, [r3, #76]	@ 0x4c
 801979a:	b900      	cbnz	r0, 801979e <_ZNK8touchgfx3Box4drawERKNS_4RectE+0x26>
 801979c:	6898      	ldr	r0, [r3, #8]
 801979e:	6803      	ldr	r3, [r0, #0]
 80197a0:	4669      	mov	r1, sp
 80197a2:	6aa2      	ldr	r2, [r4, #40]	@ 0x28
 80197a4:	699d      	ldr	r5, [r3, #24]
 80197a6:	f894 3026 	ldrb.w	r3, [r4, #38]	@ 0x26
 80197aa:	47a8      	blx	r5
 80197ac:	b003      	add	sp, #12
 80197ae:	bd30      	pop	{r4, r5, pc}
 80197b0:	2400b880 	.word	0x2400b880

080197b4 <_ZN8touchgfx6Button10setBitmapsERKNS_6BitmapES3_>:
 80197b4:	b570      	push	{r4, r5, r6, lr}
 80197b6:	880b      	ldrh	r3, [r1, #0]
 80197b8:	4605      	mov	r5, r0
 80197ba:	4604      	mov	r4, r0
 80197bc:	85c3      	strh	r3, [r0, #46]	@ 0x2e
 80197be:	8813      	ldrh	r3, [r2, #0]
 80197c0:	f825 3f30 	strh.w	r3, [r5, #48]!
 80197c4:	4628      	mov	r0, r5
 80197c6:	f005 f843 	bl	801e850 <_ZNK8touchgfx6Bitmap8getWidthEv>
 80197ca:	4606      	mov	r6, r0
 80197cc:	4628      	mov	r0, r5
 80197ce:	f005 f879 	bl	801e8c4 <_ZNK8touchgfx6Bitmap9getHeightEv>
 80197d2:	6823      	ldr	r3, [r4, #0]
 80197d4:	4605      	mov	r5, r0
 80197d6:	b231      	sxth	r1, r6
 80197d8:	4620      	mov	r0, r4
 80197da:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80197dc:	4798      	blx	r3
 80197de:	6823      	ldr	r3, [r4, #0]
 80197e0:	b229      	sxth	r1, r5
 80197e2:	4620      	mov	r0, r4
 80197e4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80197e6:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 80197ea:	4718      	bx	r3

080197ec <_ZNK8touchgfx6Button12getSolidRectEv>:
 80197ec:	b510      	push	{r4, lr}
 80197ee:	f891 3032 	ldrb.w	r3, [r1, #50]	@ 0x32
 80197f2:	4604      	mov	r4, r0
 80197f4:	2bff      	cmp	r3, #255	@ 0xff
 80197f6:	d006      	beq.n	8019806 <_ZNK8touchgfx6Button12getSolidRectEv+0x1a>
 80197f8:	2300      	movs	r3, #0
 80197fa:	8003      	strh	r3, [r0, #0]
 80197fc:	8043      	strh	r3, [r0, #2]
 80197fe:	8083      	strh	r3, [r0, #4]
 8019800:	80c3      	strh	r3, [r0, #6]
 8019802:	4620      	mov	r0, r4
 8019804:	bd10      	pop	{r4, pc}
 8019806:	f891 302c 	ldrb.w	r3, [r1, #44]	@ 0x2c
 801980a:	b11b      	cbz	r3, 8019814 <_ZNK8touchgfx6Button12getSolidRectEv+0x28>
 801980c:	3130      	adds	r1, #48	@ 0x30
 801980e:	f005 f893 	bl	801e938 <_ZNK8touchgfx6Bitmap12getSolidRectEv>
 8019812:	e7f6      	b.n	8019802 <_ZNK8touchgfx6Button12getSolidRectEv+0x16>
 8019814:	312e      	adds	r1, #46	@ 0x2e
 8019816:	e7fa      	b.n	801980e <_ZNK8touchgfx6Button12getSolidRectEv+0x22>

08019818 <_ZNK8touchgfx6Button4drawERKNS_4RectE>:
 8019818:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801981c:	f890 302c 	ldrb.w	r3, [r0, #44]	@ 0x2c
 8019820:	b08a      	sub	sp, #40	@ 0x28
 8019822:	4604      	mov	r4, r0
 8019824:	4688      	mov	r8, r1
 8019826:	2b00      	cmp	r3, #0
 8019828:	d044      	beq.n	80198b4 <_ZNK8touchgfx6Button4drawERKNS_4RectE+0x9c>
 801982a:	8e03      	ldrh	r3, [r0, #48]	@ 0x30
 801982c:	a805      	add	r0, sp, #20
 801982e:	f8ad 3014 	strh.w	r3, [sp, #20]
 8019832:	f005 f80d 	bl	801e850 <_ZNK8touchgfx6Bitmap8getWidthEv>
 8019836:	4605      	mov	r5, r0
 8019838:	b206      	sxth	r6, r0
 801983a:	a805      	add	r0, sp, #20
 801983c:	f005 f842 	bl	801e8c4 <_ZNK8touchgfx6Bitmap9getHeightEv>
 8019840:	f9b8 2000 	ldrsh.w	r2, [r8]
 8019844:	f8b8 7004 	ldrh.w	r7, [r8, #4]
 8019848:	2300      	movs	r3, #0
 801984a:	fa0f fc80 	sxth.w	ip, r0
 801984e:	4417      	add	r7, r2
 8019850:	9306      	str	r3, [sp, #24]
 8019852:	b2bf      	uxth	r7, r7
 8019854:	fa0f fe87 	sxth.w	lr, r7
 8019858:	459e      	cmp	lr, r3
 801985a:	dd2d      	ble.n	80198b8 <_ZNK8touchgfx6Button4drawERKNS_4RectE+0xa0>
 801985c:	4296      	cmp	r6, r2
 801985e:	dd2b      	ble.n	80198b8 <_ZNK8touchgfx6Button4drawERKNS_4RectE+0xa0>
 8019860:	f9b8 3002 	ldrsh.w	r3, [r8, #2]
 8019864:	f8b8 1006 	ldrh.w	r1, [r8, #6]
 8019868:	4419      	add	r1, r3
 801986a:	b289      	uxth	r1, r1
 801986c:	fa0f f881 	sxth.w	r8, r1
 8019870:	f1b8 0f00 	cmp.w	r8, #0
 8019874:	dd20      	ble.n	80198b8 <_ZNK8touchgfx6Button4drawERKNS_4RectE+0xa0>
 8019876:	459c      	cmp	ip, r3
 8019878:	dd1e      	ble.n	80198b8 <_ZNK8touchgfx6Button4drawERKNS_4RectE+0xa0>
 801987a:	ea22 72e2 	bic.w	r2, r2, r2, asr #31
 801987e:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8019882:	4576      	cmp	r6, lr
 8019884:	bfa8      	it	ge
 8019886:	463d      	movge	r5, r7
 8019888:	45c4      	cmp	ip, r8
 801988a:	bfa8      	it	ge
 801988c:	4608      	movge	r0, r1
 801988e:	f8ad 2018 	strh.w	r2, [sp, #24]
 8019892:	1aad      	subs	r5, r5, r2
 8019894:	1ac0      	subs	r0, r0, r3
 8019896:	f8ad 301a 	strh.w	r3, [sp, #26]
 801989a:	f8ad 501c 	strh.w	r5, [sp, #28]
 801989e:	f8ad 001e 	strh.w	r0, [sp, #30]
 80198a2:	4b1f      	ldr	r3, [pc, #124]	@ (8019920 <_ZNK8touchgfx6Button4drawERKNS_4RectE+0x108>)
 80198a4:	681b      	ldr	r3, [r3, #0]
 80198a6:	b953      	cbnz	r3, 80198be <_ZNK8touchgfx6Button4drawERKNS_4RectE+0xa6>
 80198a8:	4b1e      	ldr	r3, [pc, #120]	@ (8019924 <_ZNK8touchgfx6Button4drawERKNS_4RectE+0x10c>)
 80198aa:	2187      	movs	r1, #135	@ 0x87
 80198ac:	4a1e      	ldr	r2, [pc, #120]	@ (8019928 <_ZNK8touchgfx6Button4drawERKNS_4RectE+0x110>)
 80198ae:	481f      	ldr	r0, [pc, #124]	@ (801992c <_ZNK8touchgfx6Button4drawERKNS_4RectE+0x114>)
 80198b0:	f011 f840 	bl	802a934 <__assert_func>
 80198b4:	8dc3      	ldrh	r3, [r0, #46]	@ 0x2e
 80198b6:	e7b9      	b.n	801982c <_ZNK8touchgfx6Button4drawERKNS_4RectE+0x14>
 80198b8:	2300      	movs	r3, #0
 80198ba:	9307      	str	r3, [sp, #28]
 80198bc:	e7f1      	b.n	80198a2 <_ZNK8touchgfx6Button4drawERKNS_4RectE+0x8a>
 80198be:	f8bd 2014 	ldrh.w	r2, [sp, #20]
 80198c2:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 80198c6:	429a      	cmp	r2, r3
 80198c8:	d026      	beq.n	8019918 <_ZNK8touchgfx6Button4drawERKNS_4RectE+0x100>
 80198ca:	f9bd 301c 	ldrsh.w	r3, [sp, #28]
 80198ce:	2b00      	cmp	r3, #0
 80198d0:	dd22      	ble.n	8019918 <_ZNK8touchgfx6Button4drawERKNS_4RectE+0x100>
 80198d2:	f9bd 301e 	ldrsh.w	r3, [sp, #30]
 80198d6:	2b00      	cmp	r3, #0
 80198d8:	dd1e      	ble.n	8019918 <_ZNK8touchgfx6Button4drawERKNS_4RectE+0x100>
 80198da:	2300      	movs	r3, #0
 80198dc:	a908      	add	r1, sp, #32
 80198de:	4620      	mov	r0, r4
 80198e0:	e9cd 3308 	strd	r3, r3, [sp, #32]
 80198e4:	6823      	ldr	r3, [r4, #0]
 80198e6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80198e8:	4798      	blx	r3
 80198ea:	4b11      	ldr	r3, [pc, #68]	@ (8019930 <_ZNK8touchgfx6Button4drawERKNS_4RectE+0x118>)
 80198ec:	681b      	ldr	r3, [r3, #0]
 80198ee:	f893 2076 	ldrb.w	r2, [r3, #118]	@ 0x76
 80198f2:	b10a      	cbz	r2, 80198f8 <_ZNK8touchgfx6Button4drawERKNS_4RectE+0xe0>
 80198f4:	6cd8      	ldr	r0, [r3, #76]	@ 0x4c
 80198f6:	b900      	cbnz	r0, 80198fa <_ZNK8touchgfx6Button4drawERKNS_4RectE+0xe2>
 80198f8:	6898      	ldr	r0, [r3, #8]
 80198fa:	2501      	movs	r5, #1
 80198fc:	6801      	ldr	r1, [r0, #0]
 80198fe:	f9bd 3022 	ldrsh.w	r3, [sp, #34]	@ 0x22
 8019902:	9502      	str	r5, [sp, #8]
 8019904:	f894 4032 	ldrb.w	r4, [r4, #50]	@ 0x32
 8019908:	f9bd 2020 	ldrsh.w	r2, [sp, #32]
 801990c:	9401      	str	r4, [sp, #4]
 801990e:	ac06      	add	r4, sp, #24
 8019910:	9400      	str	r4, [sp, #0]
 8019912:	688c      	ldr	r4, [r1, #8]
 8019914:	a905      	add	r1, sp, #20
 8019916:	47a0      	blx	r4
 8019918:	b00a      	add	sp, #40	@ 0x28
 801991a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801991e:	bf00      	nop
 8019920:	2400b908 	.word	0x2400b908
 8019924:	0802e89c 	.word	0x0802e89c
 8019928:	0802e970 	.word	0x0802e970
 801992c:	0802e8d8 	.word	0x0802e8d8
 8019930:	2400b880 	.word	0x2400b880

08019934 <_ZNK8touchgfx23TextAreaWithOneWildcard12getTextWidthEv>:
 8019934:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8019936:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 801993a:	8d81      	ldrh	r1, [r0, #44]	@ 0x2c
 801993c:	4606      	mov	r6, r0
 801993e:	4299      	cmp	r1, r3
 8019940:	d02a      	beq.n	8019998 <_ZNK8touchgfx23TextAreaWithOneWildcard12getTextWidthEv+0x64>
 8019942:	4b16      	ldr	r3, [pc, #88]	@ (801999c <_ZNK8touchgfx23TextAreaWithOneWildcard12getTextWidthEv+0x68>)
 8019944:	681b      	ldr	r3, [r3, #0]
 8019946:	b92b      	cbnz	r3, 8019954 <_ZNK8touchgfx23TextAreaWithOneWildcard12getTextWidthEv+0x20>
 8019948:	4b15      	ldr	r3, [pc, #84]	@ (80199a0 <_ZNK8touchgfx23TextAreaWithOneWildcard12getTextWidthEv+0x6c>)
 801994a:	21ae      	movs	r1, #174	@ 0xae
 801994c:	4a15      	ldr	r2, [pc, #84]	@ (80199a4 <_ZNK8touchgfx23TextAreaWithOneWildcard12getTextWidthEv+0x70>)
 801994e:	4816      	ldr	r0, [pc, #88]	@ (80199a8 <_ZNK8touchgfx23TextAreaWithOneWildcard12getTextWidthEv+0x74>)
 8019950:	f010 fff0 	bl	802a934 <__assert_func>
 8019954:	4a15      	ldr	r2, [pc, #84]	@ (80199ac <_ZNK8touchgfx23TextAreaWithOneWildcard12getTextWidthEv+0x78>)
 8019956:	8812      	ldrh	r2, [r2, #0]
 8019958:	428a      	cmp	r2, r1
 801995a:	d803      	bhi.n	8019964 <_ZNK8touchgfx23TextAreaWithOneWildcard12getTextWidthEv+0x30>
 801995c:	4b14      	ldr	r3, [pc, #80]	@ (80199b0 <_ZNK8touchgfx23TextAreaWithOneWildcard12getTextWidthEv+0x7c>)
 801995e:	21af      	movs	r1, #175	@ 0xaf
 8019960:	4a10      	ldr	r2, [pc, #64]	@ (80199a4 <_ZNK8touchgfx23TextAreaWithOneWildcard12getTextWidthEv+0x70>)
 8019962:	e7f4      	b.n	801994e <_ZNK8touchgfx23TextAreaWithOneWildcard12getTextWidthEv+0x1a>
 8019964:	eb03 0241 	add.w	r2, r3, r1, lsl #1
 8019968:	f813 0011 	ldrb.w	r0, [r3, r1, lsl #1]
 801996c:	4b11      	ldr	r3, [pc, #68]	@ (80199b4 <_ZNK8touchgfx23TextAreaWithOneWildcard12getTextWidthEv+0x80>)
 801996e:	7854      	ldrb	r4, [r2, #1]
 8019970:	681b      	ldr	r3, [r3, #0]
 8019972:	f3c4 0481 	ubfx	r4, r4, #2, #2
 8019976:	f853 5020 	ldr.w	r5, [r3, r0, lsl #2]
 801997a:	682b      	ldr	r3, [r5, #0]
 801997c:	69df      	ldr	r7, [r3, #28]
 801997e:	4b0e      	ldr	r3, [pc, #56]	@ (80199b8 <_ZNK8touchgfx23TextAreaWithOneWildcard12getTextWidthEv+0x84>)
 8019980:	6818      	ldr	r0, [r3, #0]
 8019982:	f7f0 faf7 	bl	8009f74 <_ZNK8touchgfx5Texts7getTextEt>
 8019986:	2300      	movs	r3, #0
 8019988:	4602      	mov	r2, r0
 801998a:	4621      	mov	r1, r4
 801998c:	9300      	str	r3, [sp, #0]
 801998e:	4628      	mov	r0, r5
 8019990:	6bf3      	ldr	r3, [r6, #60]	@ 0x3c
 8019992:	47b8      	blx	r7
 8019994:	b003      	add	sp, #12
 8019996:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8019998:	2000      	movs	r0, #0
 801999a:	e7fb      	b.n	8019994 <_ZNK8touchgfx23TextAreaWithOneWildcard12getTextWidthEv+0x60>
 801999c:	2400b8d0 	.word	0x2400b8d0
 80199a0:	0802e6d0 	.word	0x0802e6d0
 80199a4:	0802ea1c 	.word	0x0802ea1c
 80199a8:	0802e712 	.word	0x0802e712
 80199ac:	2400b8d4 	.word	0x2400b8d4
 80199b0:	0802e73b 	.word	0x0802e73b
 80199b4:	2400b8d8 	.word	0x2400b8d8
 80199b8:	2400b8dc 	.word	0x2400b8dc

080199bc <_ZN8touchgfx23TextAreaWithOneWildcard13getTextHeightEv>:
 80199bc:	b570      	push	{r4, r5, r6, lr}
 80199be:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 80199c2:	8d81      	ldrh	r1, [r0, #44]	@ 0x2c
 80199c4:	4604      	mov	r4, r0
 80199c6:	4299      	cmp	r1, r3
 80199c8:	d01e      	beq.n	8019a08 <_ZN8touchgfx23TextAreaWithOneWildcard13getTextHeightEv+0x4c>
 80199ca:	6803      	ldr	r3, [r0, #0]
 80199cc:	6edd      	ldr	r5, [r3, #108]	@ 0x6c
 80199ce:	4b0f      	ldr	r3, [pc, #60]	@ (8019a0c <_ZN8touchgfx23TextAreaWithOneWildcard13getTextHeightEv+0x50>)
 80199d0:	681b      	ldr	r3, [r3, #0]
 80199d2:	b92b      	cbnz	r3, 80199e0 <_ZN8touchgfx23TextAreaWithOneWildcard13getTextHeightEv+0x24>
 80199d4:	4b0e      	ldr	r3, [pc, #56]	@ (8019a10 <_ZN8touchgfx23TextAreaWithOneWildcard13getTextHeightEv+0x54>)
 80199d6:	21ae      	movs	r1, #174	@ 0xae
 80199d8:	4a0e      	ldr	r2, [pc, #56]	@ (8019a14 <_ZN8touchgfx23TextAreaWithOneWildcard13getTextHeightEv+0x58>)
 80199da:	480f      	ldr	r0, [pc, #60]	@ (8019a18 <_ZN8touchgfx23TextAreaWithOneWildcard13getTextHeightEv+0x5c>)
 80199dc:	f010 ffaa 	bl	802a934 <__assert_func>
 80199e0:	4b0e      	ldr	r3, [pc, #56]	@ (8019a1c <_ZN8touchgfx23TextAreaWithOneWildcard13getTextHeightEv+0x60>)
 80199e2:	881b      	ldrh	r3, [r3, #0]
 80199e4:	428b      	cmp	r3, r1
 80199e6:	d803      	bhi.n	80199f0 <_ZN8touchgfx23TextAreaWithOneWildcard13getTextHeightEv+0x34>
 80199e8:	4b0d      	ldr	r3, [pc, #52]	@ (8019a20 <_ZN8touchgfx23TextAreaWithOneWildcard13getTextHeightEv+0x64>)
 80199ea:	21af      	movs	r1, #175	@ 0xaf
 80199ec:	4a09      	ldr	r2, [pc, #36]	@ (8019a14 <_ZN8touchgfx23TextAreaWithOneWildcard13getTextHeightEv+0x58>)
 80199ee:	e7f4      	b.n	80199da <_ZN8touchgfx23TextAreaWithOneWildcard13getTextHeightEv+0x1e>
 80199f0:	4b0c      	ldr	r3, [pc, #48]	@ (8019a24 <_ZN8touchgfx23TextAreaWithOneWildcard13getTextHeightEv+0x68>)
 80199f2:	6818      	ldr	r0, [r3, #0]
 80199f4:	f7f0 fabe 	bl	8009f74 <_ZNK8touchgfx5Texts7getTextEt>
 80199f8:	6be2      	ldr	r2, [r4, #60]	@ 0x3c
 80199fa:	4601      	mov	r1, r0
 80199fc:	46ac      	mov	ip, r5
 80199fe:	4620      	mov	r0, r4
 8019a00:	2300      	movs	r3, #0
 8019a02:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8019a06:	4760      	bx	ip
 8019a08:	2000      	movs	r0, #0
 8019a0a:	bd70      	pop	{r4, r5, r6, pc}
 8019a0c:	2400b8d0 	.word	0x2400b8d0
 8019a10:	0802e6d0 	.word	0x0802e6d0
 8019a14:	0802ea1c 	.word	0x0802ea1c
 8019a18:	0802e712 	.word	0x0802e712
 8019a1c:	2400b8d4 	.word	0x2400b8d4
 8019a20:	0802e73b 	.word	0x0802e73b
 8019a24:	2400b8dc 	.word	0x2400b8dc

08019a28 <_ZNK8touchgfx23TextAreaWithOneWildcard4drawERKNS_4RectE>:
 8019a28:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8019a2c:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8019a30:	8d83      	ldrh	r3, [r0, #44]	@ 0x2c
 8019a32:	b08c      	sub	sp, #48	@ 0x30
 8019a34:	4604      	mov	r4, r0
 8019a36:	4293      	cmp	r3, r2
 8019a38:	460e      	mov	r6, r1
 8019a3a:	d05d      	beq.n	8019af8 <_ZNK8touchgfx23TextAreaWithOneWildcard4drawERKNS_4RectE+0xd0>
 8019a3c:	f8df 80dc 	ldr.w	r8, [pc, #220]	@ 8019b1c <_ZNK8touchgfx23TextAreaWithOneWildcard4drawERKNS_4RectE+0xf4>
 8019a40:	f8d8 2000 	ldr.w	r2, [r8]
 8019a44:	b92a      	cbnz	r2, 8019a52 <_ZNK8touchgfx23TextAreaWithOneWildcard4drawERKNS_4RectE+0x2a>
 8019a46:	4b2e      	ldr	r3, [pc, #184]	@ (8019b00 <_ZNK8touchgfx23TextAreaWithOneWildcard4drawERKNS_4RectE+0xd8>)
 8019a48:	21ae      	movs	r1, #174	@ 0xae
 8019a4a:	4a2e      	ldr	r2, [pc, #184]	@ (8019b04 <_ZNK8touchgfx23TextAreaWithOneWildcard4drawERKNS_4RectE+0xdc>)
 8019a4c:	482e      	ldr	r0, [pc, #184]	@ (8019b08 <_ZNK8touchgfx23TextAreaWithOneWildcard4drawERKNS_4RectE+0xe0>)
 8019a4e:	f010 ff71 	bl	802a934 <__assert_func>
 8019a52:	4f2e      	ldr	r7, [pc, #184]	@ (8019b0c <_ZNK8touchgfx23TextAreaWithOneWildcard4drawERKNS_4RectE+0xe4>)
 8019a54:	8839      	ldrh	r1, [r7, #0]
 8019a56:	4299      	cmp	r1, r3
 8019a58:	d803      	bhi.n	8019a62 <_ZNK8touchgfx23TextAreaWithOneWildcard4drawERKNS_4RectE+0x3a>
 8019a5a:	4b2d      	ldr	r3, [pc, #180]	@ (8019b10 <_ZNK8touchgfx23TextAreaWithOneWildcard4drawERKNS_4RectE+0xe8>)
 8019a5c:	21af      	movs	r1, #175	@ 0xaf
 8019a5e:	4a29      	ldr	r2, [pc, #164]	@ (8019b04 <_ZNK8touchgfx23TextAreaWithOneWildcard4drawERKNS_4RectE+0xdc>)
 8019a60:	e7f4      	b.n	8019a4c <_ZNK8touchgfx23TextAreaWithOneWildcard4drawERKNS_4RectE+0x24>
 8019a62:	eb02 0143 	add.w	r1, r2, r3, lsl #1
 8019a66:	f812 2013 	ldrb.w	r2, [r2, r3, lsl #1]
 8019a6a:	4b2a      	ldr	r3, [pc, #168]	@ (8019b14 <_ZNK8touchgfx23TextAreaWithOneWildcard4drawERKNS_4RectE+0xec>)
 8019a6c:	681b      	ldr	r3, [r3, #0]
 8019a6e:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8019a72:	2a00      	cmp	r2, #0
 8019a74:	d040      	beq.n	8019af8 <_ZNK8touchgfx23TextAreaWithOneWildcard4drawERKNS_4RectE+0xd0>
 8019a76:	784b      	ldrb	r3, [r1, #1]
 8019a78:	f890 5037 	ldrb.w	r5, [r0, #55]	@ 0x37
 8019a7c:	f890 1039 	ldrb.w	r1, [r0, #57]	@ 0x39
 8019a80:	f3c3 0a01 	ubfx	sl, r3, #0, #2
 8019a84:	f890 c036 	ldrb.w	ip, [r0, #54]	@ 0x36
 8019a88:	f3c3 0381 	ubfx	r3, r3, #2, #2
 8019a8c:	f9b0 e034 	ldrsh.w	lr, [r0, #52]	@ 0x34
 8019a90:	f890 9038 	ldrb.w	r9, [r0, #56]	@ 0x38
 8019a94:	f88d 502b 	strb.w	r5, [sp, #43]	@ 0x2b
 8019a98:	ad05      	add	r5, sp, #20
 8019a9a:	6b00      	ldr	r0, [r0, #48]	@ 0x30
 8019a9c:	f88d 3021 	strb.w	r3, [sp, #33]	@ 0x21
 8019aa0:	9207      	str	r2, [sp, #28]
 8019aa2:	f88d 9022 	strb.w	r9, [sp, #34]	@ 0x22
 8019aa6:	f8ad e028 	strh.w	lr, [sp, #40]	@ 0x28
 8019aaa:	f88d c02a 	strb.w	ip, [sp, #42]	@ 0x2a
 8019aae:	f88d 102c 	strb.w	r1, [sp, #44]	@ 0x2c
 8019ab2:	f88d a020 	strb.w	sl, [sp, #32]
 8019ab6:	9009      	str	r0, [sp, #36]	@ 0x24
 8019ab8:	f7ea fb44 	bl	8004144 <_ZN8touchgfx3HAL3lcdEv>
 8019abc:	4621      	mov	r1, r4
 8019abe:	4681      	mov	r9, r0
 8019ac0:	4628      	mov	r0, r5
 8019ac2:	f002 fe2b 	bl	801c71c <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 8019ac6:	f8d8 3000 	ldr.w	r3, [r8]
 8019aca:	2b00      	cmp	r3, #0
 8019acc:	d0bb      	beq.n	8019a46 <_ZNK8touchgfx23TextAreaWithOneWildcard4drawERKNS_4RectE+0x1e>
 8019ace:	8da1      	ldrh	r1, [r4, #44]	@ 0x2c
 8019ad0:	883b      	ldrh	r3, [r7, #0]
 8019ad2:	428b      	cmp	r3, r1
 8019ad4:	d9c1      	bls.n	8019a5a <_ZNK8touchgfx23TextAreaWithOneWildcard4drawERKNS_4RectE+0x32>
 8019ad6:	4b10      	ldr	r3, [pc, #64]	@ (8019b18 <_ZNK8touchgfx23TextAreaWithOneWildcard4drawERKNS_4RectE+0xf0>)
 8019ad8:	6818      	ldr	r0, [r3, #0]
 8019ada:	f7f0 fa4b 	bl	8009f74 <_ZNK8touchgfx5Texts7getTextEt>
 8019ade:	2300      	movs	r3, #0
 8019ae0:	9303      	str	r3, [sp, #12]
 8019ae2:	6be3      	ldr	r3, [r4, #60]	@ 0x3c
 8019ae4:	e9cd 0301 	strd	r0, r3, [sp, #4]
 8019ae8:	ab07      	add	r3, sp, #28
 8019aea:	4648      	mov	r0, r9
 8019aec:	9300      	str	r3, [sp, #0]
 8019aee:	4633      	mov	r3, r6
 8019af0:	e895 0006 	ldmia.w	r5, {r1, r2}
 8019af4:	f7f0 f9cf 	bl	8009e96 <_ZN8touchgfx3LCD10drawStringENS_4RectERKS1_RKNS0_13StringVisualsEPKtz>
 8019af8:	b00c      	add	sp, #48	@ 0x30
 8019afa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8019afe:	bf00      	nop
 8019b00:	0802e6d0 	.word	0x0802e6d0
 8019b04:	0802ea1c 	.word	0x0802ea1c
 8019b08:	0802e712 	.word	0x0802e712
 8019b0c:	2400b8d4 	.word	0x2400b8d4
 8019b10:	0802e73b 	.word	0x0802e73b
 8019b14:	2400b8d8 	.word	0x2400b8d8
 8019b18:	2400b8dc 	.word	0x2400b8dc
 8019b1c:	2400b8d0 	.word	0x2400b8d0

08019b20 <_ZNK8touchgfx13BoxWithBorder4drawERKNS_4RectE>:
 8019b20:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8019b24:	8e03      	ldrh	r3, [r0, #48]	@ 0x30
 8019b26:	4604      	mov	r4, r0
 8019b28:	460e      	mov	r6, r1
 8019b2a:	b08e      	sub	sp, #56	@ 0x38
 8019b2c:	b218      	sxth	r0, r3
 8019b2e:	8921      	ldrh	r1, [r4, #8]
 8019b30:	005b      	lsls	r3, r3, #1
 8019b32:	8962      	ldrh	r2, [r4, #10]
 8019b34:	f8ad 0000 	strh.w	r0, [sp]
 8019b38:	b29b      	uxth	r3, r3
 8019b3a:	f8ad 0002 	strh.w	r0, [sp, #2]
 8019b3e:	1ac9      	subs	r1, r1, r3
 8019b40:	1ad3      	subs	r3, r2, r3
 8019b42:	b209      	sxth	r1, r1
 8019b44:	b21b      	sxth	r3, r3
 8019b46:	2900      	cmp	r1, #0
 8019b48:	f8ad 1004 	strh.w	r1, [sp, #4]
 8019b4c:	f8ad 3006 	strh.w	r3, [sp, #6]
 8019b50:	dd5e      	ble.n	8019c10 <_ZNK8touchgfx13BoxWithBorder4drawERKNS_4RectE+0xf0>
 8019b52:	2b00      	cmp	r3, #0
 8019b54:	dd5c      	ble.n	8019c10 <_ZNK8touchgfx13BoxWithBorder4drawERKNS_4RectE+0xf0>
 8019b56:	6830      	ldr	r0, [r6, #0]
 8019b58:	ab02      	add	r3, sp, #8
 8019b5a:	6871      	ldr	r1, [r6, #4]
 8019b5c:	c303      	stmia	r3!, {r0, r1}
 8019b5e:	4669      	mov	r1, sp
 8019b60:	a802      	add	r0, sp, #8
 8019b62:	f7fe f807 	bl	8017b74 <_ZN8touchgfx4RectaNERKS0_>
 8019b66:	4620      	mov	r0, r4
 8019b68:	a902      	add	r1, sp, #8
 8019b6a:	f7ff fe05 	bl	8019778 <_ZNK8touchgfx3Box4drawERKNS_4RectE>
 8019b6e:	8e20      	ldrh	r0, [r4, #48]	@ 0x30
 8019b70:	2800      	cmp	r0, #0
 8019b72:	d05f      	beq.n	8019c34 <_ZNK8touchgfx13BoxWithBorder4drawERKNS_4RectE+0x114>
 8019b74:	8963      	ldrh	r3, [r4, #10]
 8019b76:	b202      	sxth	r2, r0
 8019b78:	f9b4 1008 	ldrsh.w	r1, [r4, #8]
 8019b7c:	2500      	movs	r5, #0
 8019b7e:	1a1f      	subs	r7, r3, r0
 8019b80:	eba3 0340 	sub.w	r3, r3, r0, lsl #1
 8019b84:	f8ad 101c 	strh.w	r1, [sp, #28]
 8019b88:	b21b      	sxth	r3, r3
 8019b8a:	f8ad 7022 	strh.w	r7, [sp, #34]	@ 0x22
 8019b8e:	f8ad 1024 	strh.w	r1, [sp, #36]	@ 0x24
 8019b92:	af04      	add	r7, sp, #16
 8019b94:	1a09      	subs	r1, r1, r0
 8019b96:	9506      	str	r5, [sp, #24]
 8019b98:	f8ad 201e 	strh.w	r2, [sp, #30]
 8019b9c:	f8ad 5020 	strh.w	r5, [sp, #32]
 8019ba0:	f8ad 2026 	strh.w	r2, [sp, #38]	@ 0x26
 8019ba4:	f8ad 5028 	strh.w	r5, [sp, #40]	@ 0x28
 8019ba8:	f8ad 202a 	strh.w	r2, [sp, #42]	@ 0x2a
 8019bac:	f8ad 202c 	strh.w	r2, [sp, #44]	@ 0x2c
 8019bb0:	f8ad 302e 	strh.w	r3, [sp, #46]	@ 0x2e
 8019bb4:	f8ad 1030 	strh.w	r1, [sp, #48]	@ 0x30
 8019bb8:	f8ad 2032 	strh.w	r2, [sp, #50]	@ 0x32
 8019bbc:	f8ad 2034 	strh.w	r2, [sp, #52]	@ 0x34
 8019bc0:	f8ad 3036 	strh.w	r3, [sp, #54]	@ 0x36
 8019bc4:	ab06      	add	r3, sp, #24
 8019bc6:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 8019bca:	e893 0003 	ldmia.w	r3, {r0, r1}
 8019bce:	e887 0003 	stmia.w	r7, {r0, r1}
 8019bd2:	4631      	mov	r1, r6
 8019bd4:	4638      	mov	r0, r7
 8019bd6:	f7fd ffcd 	bl	8017b74 <_ZN8touchgfx4RectaNERKS0_>
 8019bda:	f9bd 3014 	ldrsh.w	r3, [sp, #20]
 8019bde:	2b00      	cmp	r3, #0
 8019be0:	dd12      	ble.n	8019c08 <_ZNK8touchgfx13BoxWithBorder4drawERKNS_4RectE+0xe8>
 8019be2:	f9bd 3016 	ldrsh.w	r3, [sp, #22]
 8019be6:	2b00      	cmp	r3, #0
 8019be8:	dd0e      	ble.n	8019c08 <_ZNK8touchgfx13BoxWithBorder4drawERKNS_4RectE+0xe8>
 8019bea:	6823      	ldr	r3, [r4, #0]
 8019bec:	4639      	mov	r1, r7
 8019bee:	4620      	mov	r0, r4
 8019bf0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8019bf2:	4798      	blx	r3
 8019bf4:	f7ea faa6 	bl	8004144 <_ZN8touchgfx3HAL3lcdEv>
 8019bf8:	6803      	ldr	r3, [r0, #0]
 8019bfa:	6ae2      	ldr	r2, [r4, #44]	@ 0x2c
 8019bfc:	4639      	mov	r1, r7
 8019bfe:	f8d3 8018 	ldr.w	r8, [r3, #24]
 8019c02:	f894 3026 	ldrb.w	r3, [r4, #38]	@ 0x26
 8019c06:	47c0      	blx	r8
 8019c08:	3501      	adds	r5, #1
 8019c0a:	2d04      	cmp	r5, #4
 8019c0c:	d1da      	bne.n	8019bc4 <_ZNK8touchgfx13BoxWithBorder4drawERKNS_4RectE+0xa4>
 8019c0e:	e011      	b.n	8019c34 <_ZNK8touchgfx13BoxWithBorder4drawERKNS_4RectE+0x114>
 8019c10:	6830      	ldr	r0, [r6, #0]
 8019c12:	ab06      	add	r3, sp, #24
 8019c14:	6871      	ldr	r1, [r6, #4]
 8019c16:	c303      	stmia	r3!, {r0, r1}
 8019c18:	6823      	ldr	r3, [r4, #0]
 8019c1a:	a906      	add	r1, sp, #24
 8019c1c:	4620      	mov	r0, r4
 8019c1e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8019c20:	4798      	blx	r3
 8019c22:	f7ea fa8f 	bl	8004144 <_ZN8touchgfx3HAL3lcdEv>
 8019c26:	6803      	ldr	r3, [r0, #0]
 8019c28:	6ae2      	ldr	r2, [r4, #44]	@ 0x2c
 8019c2a:	a906      	add	r1, sp, #24
 8019c2c:	699d      	ldr	r5, [r3, #24]
 8019c2e:	f894 3026 	ldrb.w	r3, [r4, #38]	@ 0x26
 8019c32:	47a8      	blx	r5
 8019c34:	b00e      	add	sp, #56	@ 0x38
 8019c36:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08019c3a <_ZN8touchgfx5Image9setBitmapERKNS_6BitmapE>:
 8019c3a:	b570      	push	{r4, r5, r6, lr}
 8019c3c:	880b      	ldrh	r3, [r1, #0]
 8019c3e:	460d      	mov	r5, r1
 8019c40:	4604      	mov	r4, r0
 8019c42:	84c3      	strh	r3, [r0, #38]	@ 0x26
 8019c44:	4608      	mov	r0, r1
 8019c46:	f004 fe03 	bl	801e850 <_ZNK8touchgfx6Bitmap8getWidthEv>
 8019c4a:	4606      	mov	r6, r0
 8019c4c:	4628      	mov	r0, r5
 8019c4e:	f004 fe39 	bl	801e8c4 <_ZNK8touchgfx6Bitmap9getHeightEv>
 8019c52:	6823      	ldr	r3, [r4, #0]
 8019c54:	4605      	mov	r5, r0
 8019c56:	b231      	sxth	r1, r6
 8019c58:	4620      	mov	r0, r4
 8019c5a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8019c5c:	4798      	blx	r3
 8019c5e:	6823      	ldr	r3, [r4, #0]
 8019c60:	b229      	sxth	r1, r5
 8019c62:	4620      	mov	r0, r4
 8019c64:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8019c66:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8019c6a:	4718      	bx	r3

08019c6c <_ZNK8touchgfx5Image12getSolidRectEv>:
 8019c6c:	b510      	push	{r4, lr}
 8019c6e:	f891 3028 	ldrb.w	r3, [r1, #40]	@ 0x28
 8019c72:	4604      	mov	r4, r0
 8019c74:	2bff      	cmp	r3, #255	@ 0xff
 8019c76:	d006      	beq.n	8019c86 <_ZNK8touchgfx5Image12getSolidRectEv+0x1a>
 8019c78:	2300      	movs	r3, #0
 8019c7a:	8003      	strh	r3, [r0, #0]
 8019c7c:	8043      	strh	r3, [r0, #2]
 8019c7e:	8083      	strh	r3, [r0, #4]
 8019c80:	80c3      	strh	r3, [r0, #6]
 8019c82:	4620      	mov	r0, r4
 8019c84:	bd10      	pop	{r4, pc}
 8019c86:	3126      	adds	r1, #38	@ 0x26
 8019c88:	f004 fe56 	bl	801e938 <_ZNK8touchgfx6Bitmap12getSolidRectEv>
 8019c8c:	e7f9      	b.n	8019c82 <_ZNK8touchgfx5Image12getSolidRectEv+0x16>
	...

08019c90 <_ZNK8touchgfx5Image4drawERKNS_4RectE>:
 8019c90:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8019c94:	4604      	mov	r4, r0
 8019c96:	b088      	sub	sp, #32
 8019c98:	2500      	movs	r5, #0
 8019c9a:	460f      	mov	r7, r1
 8019c9c:	f854 3b26 	ldr.w	r3, [r4], #38
 8019ca0:	a904      	add	r1, sp, #16
 8019ca2:	4606      	mov	r6, r0
 8019ca4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8019ca6:	e9cd 5504 	strd	r5, r5, [sp, #16]
 8019caa:	4798      	blx	r3
 8019cac:	4620      	mov	r0, r4
 8019cae:	f004 fdcf 	bl	801e850 <_ZNK8touchgfx6Bitmap8getWidthEv>
 8019cb2:	4680      	mov	r8, r0
 8019cb4:	4620      	mov	r0, r4
 8019cb6:	f004 fe05 	bl	801e8c4 <_ZNK8touchgfx6Bitmap9getHeightEv>
 8019cba:	9506      	str	r5, [sp, #24]
 8019cbc:	ad06      	add	r5, sp, #24
 8019cbe:	f8ad 001e 	strh.w	r0, [sp, #30]
 8019cc2:	4639      	mov	r1, r7
 8019cc4:	f8ad 801c 	strh.w	r8, [sp, #28]
 8019cc8:	4628      	mov	r0, r5
 8019cca:	f7fd ff53 	bl	8017b74 <_ZN8touchgfx4RectaNERKS0_>
 8019cce:	f9bd 301c 	ldrsh.w	r3, [sp, #28]
 8019cd2:	2b00      	cmp	r3, #0
 8019cd4:	dd19      	ble.n	8019d0a <_ZNK8touchgfx5Image4drawERKNS_4RectE+0x7a>
 8019cd6:	f9bd 301e 	ldrsh.w	r3, [sp, #30]
 8019cda:	2b00      	cmp	r3, #0
 8019cdc:	dd15      	ble.n	8019d0a <_ZNK8touchgfx5Image4drawERKNS_4RectE+0x7a>
 8019cde:	4b0c      	ldr	r3, [pc, #48]	@ (8019d10 <_ZNK8touchgfx5Image4drawERKNS_4RectE+0x80>)
 8019ce0:	681b      	ldr	r3, [r3, #0]
 8019ce2:	f893 2076 	ldrb.w	r2, [r3, #118]	@ 0x76
 8019ce6:	b10a      	cbz	r2, 8019cec <_ZNK8touchgfx5Image4drawERKNS_4RectE+0x5c>
 8019ce8:	6cd8      	ldr	r0, [r3, #76]	@ 0x4c
 8019cea:	b900      	cbnz	r0, 8019cee <_ZNK8touchgfx5Image4drawERKNS_4RectE+0x5e>
 8019cec:	6898      	ldr	r0, [r3, #8]
 8019cee:	2701      	movs	r7, #1
 8019cf0:	6801      	ldr	r1, [r0, #0]
 8019cf2:	f9bd 3012 	ldrsh.w	r3, [sp, #18]
 8019cf6:	9702      	str	r7, [sp, #8]
 8019cf8:	f896 6028 	ldrb.w	r6, [r6, #40]	@ 0x28
 8019cfc:	f9bd 2010 	ldrsh.w	r2, [sp, #16]
 8019d00:	e9cd 5600 	strd	r5, r6, [sp]
 8019d04:	688d      	ldr	r5, [r1, #8]
 8019d06:	4621      	mov	r1, r4
 8019d08:	47a8      	blx	r5
 8019d0a:	b008      	add	sp, #32
 8019d0c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8019d10:	2400b880 	.word	0x2400b880

08019d14 <_ZN8touchgfx3LCD27supportDynamicBitmapDrawingENS_6Bitmap12BitmapFormatE>:
 8019d14:	b510      	push	{r4, lr}
 8019d16:	6803      	ldr	r3, [r0, #0]
 8019d18:	460c      	mov	r4, r1
 8019d1a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8019d1c:	4798      	blx	r3
 8019d1e:	1b03      	subs	r3, r0, r4
 8019d20:	4258      	negs	r0, r3
 8019d22:	4158      	adcs	r0, r3
 8019d24:	bd10      	pop	{r4, pc}
	...

08019d28 <_ZN8touchgfx3LCD15setDefaultColorENS_9colortypeE>:
 8019d28:	4b01      	ldr	r3, [pc, #4]	@ (8019d30 <_ZN8touchgfx3LCD15setDefaultColorENS_9colortypeE+0x8>)
 8019d2a:	6019      	str	r1, [r3, #0]
 8019d2c:	4770      	bx	lr
 8019d2e:	bf00      	nop
 8019d30:	2400b888 	.word	0x2400b888

08019d34 <_ZN8touchgfx3LCD18drawTextureMapQuadERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht>:
 8019d34:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8019d38:	4696      	mov	lr, r2
 8019d3a:	b097      	sub	sp, #92	@ 0x5c
 8019d3c:	4605      	mov	r5, r0
 8019d3e:	4614      	mov	r4, r2
 8019d40:	460e      	mov	r6, r1
 8019d42:	461f      	mov	r7, r3
 8019d44:	f10d 0c1c 	add.w	ip, sp, #28
 8019d48:	f8bd 8088 	ldrh.w	r8, [sp, #136]	@ 0x88
 8019d4c:	f89d 908c 	ldrb.w	r9, [sp, #140]	@ 0x8c
 8019d50:	f8bd a090 	ldrh.w	sl, [sp, #144]	@ 0x90
 8019d54:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 8019d58:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8019d5c:	f8de 3000 	ldr.w	r3, [lr]
 8019d60:	f104 0e14 	add.w	lr, r4, #20
 8019d64:	f8cc 3000 	str.w	r3, [ip]
 8019d68:	f10d 0c30 	add.w	ip, sp, #48	@ 0x30
 8019d6c:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 8019d70:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8019d74:	f8de 3000 	ldr.w	r3, [lr]
 8019d78:	f104 0e28 	add.w	lr, r4, #40	@ 0x28
 8019d7c:	f8cc 3000 	str.w	r3, [ip]
 8019d80:	f10d 0c44 	add.w	ip, sp, #68	@ 0x44
 8019d84:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 8019d88:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8019d8c:	f8de 3000 	ldr.w	r3, [lr]
 8019d90:	4631      	mov	r1, r6
 8019d92:	9a21      	ldr	r2, [sp, #132]	@ 0x84
 8019d94:	4628      	mov	r0, r5
 8019d96:	f8cc 3000 	str.w	r3, [ip]
 8019d9a:	682b      	ldr	r3, [r5, #0]
 8019d9c:	9201      	str	r2, [sp, #4]
 8019d9e:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 8019da0:	f8cd 8008 	str.w	r8, [sp, #8]
 8019da4:	9200      	str	r2, [sp, #0]
 8019da6:	aa07      	add	r2, sp, #28
 8019da8:	e9cd 9a03 	strd	r9, sl, [sp, #12]
 8019dac:	f8d3 b034 	ldr.w	fp, [r3, #52]	@ 0x34
 8019db0:	463b      	mov	r3, r7
 8019db2:	47d8      	blx	fp
 8019db4:	46a6      	mov	lr, r4
 8019db6:	f10d 0c1c 	add.w	ip, sp, #28
 8019dba:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 8019dbe:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8019dc2:	f8de 3000 	ldr.w	r3, [lr]
 8019dc6:	f104 0e28 	add.w	lr, r4, #40	@ 0x28
 8019dca:	343c      	adds	r4, #60	@ 0x3c
 8019dcc:	f8cc 3000 	str.w	r3, [ip]
 8019dd0:	f10d 0c30 	add.w	ip, sp, #48	@ 0x30
 8019dd4:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 8019dd8:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8019ddc:	f8de 3000 	ldr.w	r3, [lr]
 8019de0:	f8cc 3000 	str.w	r3, [ip]
 8019de4:	f10d 0c44 	add.w	ip, sp, #68	@ 0x44
 8019de8:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8019dea:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8019dee:	6823      	ldr	r3, [r4, #0]
 8019df0:	4631      	mov	r1, r6
 8019df2:	4628      	mov	r0, r5
 8019df4:	f8cc 3000 	str.w	r3, [ip]
 8019df8:	682b      	ldr	r3, [r5, #0]
 8019dfa:	e9cd 9a03 	strd	r9, sl, [sp, #12]
 8019dfe:	9a21      	ldr	r2, [sp, #132]	@ 0x84
 8019e00:	f8cd 8008 	str.w	r8, [sp, #8]
 8019e04:	9201      	str	r2, [sp, #4]
 8019e06:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 8019e08:	9200      	str	r2, [sp, #0]
 8019e0a:	aa07      	add	r2, sp, #28
 8019e0c:	6b5c      	ldr	r4, [r3, #52]	@ 0x34
 8019e0e:	463b      	mov	r3, r7
 8019e10:	47a0      	blx	r4
 8019e12:	b017      	add	sp, #92	@ 0x5c
 8019e14:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08019e18 <_ZN8touchgfx3LCD28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth>:
 8019e18:	2000      	movs	r0, #0
 8019e1a:	4770      	bx	lr

08019e1c <_ZN8touchgfx3LCD22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht>:
 8019e1c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8019e20:	b08d      	sub	sp, #52	@ 0x34
 8019e22:	4688      	mov	r8, r1
 8019e24:	f8d3 c000 	ldr.w	ip, [r3]
 8019e28:	9916      	ldr	r1, [sp, #88]	@ 0x58
 8019e2a:	f8bd 4070 	ldrh.w	r4, [sp, #112]	@ 0x70
 8019e2e:	680f      	ldr	r7, [r1, #0]
 8019e30:	ed92 4a09 	vldr	s8, [r2, #36]	@ 0x24
 8019e34:	eba7 070c 	sub.w	r7, r7, ip
 8019e38:	edd2 4a0b 	vldr	s9, [r2, #44]	@ 0x2c
 8019e3c:	edd3 6a07 	vldr	s13, [r3, #28]
 8019e40:	42bc      	cmp	r4, r7
 8019e42:	9918      	ldr	r1, [sp, #96]	@ 0x60
 8019e44:	f8dd a064 	ldr.w	sl, [sp, #100]	@ 0x64
 8019e48:	bfa8      	it	ge
 8019e4a:	463c      	movge	r4, r7
 8019e4c:	f9b1 9000 	ldrsh.w	r9, [r1]
 8019e50:	f9ba 1000 	ldrsh.w	r1, [sl]
 8019e54:	ee07 4a90 	vmov	s15, r4
 8019e58:	eb09 0e0c 	add.w	lr, r9, ip
 8019e5c:	edd3 1a0a 	vldr	s3, [r3, #40]	@ 0x28
 8019e60:	eeb8 5ae7 	vcvt.f32.s32	s10, s15
 8019e64:	edd2 7a0d 	vldr	s15, [r2, #52]	@ 0x34
 8019e68:	ed93 2a0d 	vldr	s4, [r3, #52]	@ 0x34
 8019e6c:	4571      	cmp	r1, lr
 8019e6e:	ee25 4a04 	vmul.f32	s8, s10, s8
 8019e72:	ee65 4a24 	vmul.f32	s9, s10, s9
 8019e76:	ee25 5a27 	vmul.f32	s10, s10, s15
 8019e7a:	eef7 7a00 	vmov.f32	s15, #112	@ 0x3f800000  1.0
 8019e7e:	ee71 0aa4 	vadd.f32	s1, s3, s9
 8019e82:	ee32 1a05 	vadd.f32	s2, s4, s10
 8019e86:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 8019e8a:	ee36 0a84 	vadd.f32	s0, s13, s8
 8019e8e:	ee61 1a87 	vmul.f32	s3, s3, s14
 8019e92:	ee22 2a07 	vmul.f32	s4, s4, s14
 8019e96:	f340 808c 	ble.w	8019fb2 <_ZN8touchgfx3LCD22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0x196>
 8019e9a:	eba1 060e 	sub.w	r6, r1, lr
 8019e9e:	fb96 f5f4 	sdiv	r5, r6, r4
 8019ea2:	ee07 5a10 	vmov	s14, r5
 8019ea6:	2d00      	cmp	r5, #0
 8019ea8:	fb04 6615 	mls	r6, r4, r5, r6
 8019eac:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8019eb0:	eea7 0a04 	vfma.f32	s0, s14, s8
 8019eb4:	eee7 0a24 	vfma.f32	s1, s14, s9
 8019eb8:	eea7 1a05 	vfma.f32	s2, s14, s10
 8019ebc:	dd12      	ble.n	8019ee4 <_ZN8touchgfx3LCD22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0xc8>
 8019ebe:	ee70 6a44 	vsub.f32	s13, s0, s8
 8019ec2:	ee70 1ae4 	vsub.f32	s3, s1, s9
 8019ec6:	ee31 2a45 	vsub.f32	s4, s2, s10
 8019eca:	eef5 6a40 	vcmp.f32	s13, #0.0
 8019ece:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8019ed2:	bf14      	ite	ne
 8019ed4:	ee87 7aa6 	vdivne.f32	s14, s15, s13
 8019ed8:	eeb0 7a67 	vmoveq.f32	s14, s15
 8019edc:	ee61 1a87 	vmul.f32	s3, s3, s14
 8019ee0:	ee22 2a07 	vmul.f32	s4, s4, s14
 8019ee4:	fb05 f204 	mul.w	r2, r5, r4
 8019ee8:	1abf      	subs	r7, r7, r2
 8019eea:	4494      	add	ip, r2
 8019eec:	f8ba 2004 	ldrh.w	r2, [sl, #4]
 8019ef0:	4411      	add	r1, r2
 8019ef2:	eb09 020c 	add.w	r2, r9, ip
 8019ef6:	b209      	sxth	r1, r1
 8019ef8:	443a      	add	r2, r7
 8019efa:	428a      	cmp	r2, r1
 8019efc:	bfc4      	itt	gt
 8019efe:	eba1 0209 	subgt.w	r2, r1, r9
 8019f02:	eba2 070c 	subgt.w	r7, r2, ip
 8019f06:	2f00      	cmp	r7, #0
 8019f08:	dd50      	ble.n	8019fac <_ZN8touchgfx3LCD22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0x190>
 8019f0a:	fb97 f1f4 	sdiv	r1, r7, r4
 8019f0e:	fb04 7211 	mls	r2, r4, r1, r7
 8019f12:	b90a      	cbnz	r2, 8019f18 <_ZN8touchgfx3LCD22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0xfc>
 8019f14:	3901      	subs	r1, #1
 8019f16:	4622      	mov	r2, r4
 8019f18:	eec7 3a80 	vdiv.f32	s7, s15, s0
 8019f1c:	6840      	ldr	r0, [r0, #4]
 8019f1e:	f89d b06c 	ldrb.w	fp, [sp, #108]	@ 0x6c
 8019f22:	44b6      	add	lr, r6
 8019f24:	f8d0 a000 	ldr.w	sl, [r0]
 8019f28:	2900      	cmp	r1, #0
 8019f2a:	bfcc      	ite	gt
 8019f2c:	46a1      	movgt	r9, r4
 8019f2e:	4691      	movle	r9, r2
 8019f30:	900b      	str	r0, [sp, #44]	@ 0x2c
 8019f32:	9817      	ldr	r0, [sp, #92]	@ 0x5c
 8019f34:	fb04 e505 	mla	r5, r4, r5, lr
 8019f38:	eef0 6a42 	vmov.f32	s13, s4
 8019f3c:	f8cd b024 	str.w	fp, [sp, #36]	@ 0x24
 8019f40:	9008      	str	r0, [sp, #32]
 8019f42:	eeb0 7a61 	vmov.f32	s14, s3
 8019f46:	9818      	ldr	r0, [sp, #96]	@ 0x60
 8019f48:	695b      	ldr	r3, [r3, #20]
 8019f4a:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 8019f4e:	f9b0 b002 	ldrsh.w	fp, [r0, #2]
 8019f52:	eebe 7ac8 	vcvt.s32.f32	s14, s14, #16
 8019f56:	980b      	ldr	r0, [sp, #44]	@ 0x2c
 8019f58:	445b      	add	r3, fp
 8019f5a:	9307      	str	r3, [sp, #28]
 8019f5c:	ee16 3a90 	vmov	r3, s13
 8019f60:	e9cd 8505 	strd	r8, r5, [sp, #20]
 8019f64:	ee60 2aa3 	vmul.f32	s5, s1, s7
 8019f68:	ee21 3a23 	vmul.f32	s6, s2, s7
 8019f6c:	ee72 7ae1 	vsub.f32	s15, s5, s3
 8019f70:	eefe 7ac8 	vcvt.s32.f32	s15, s15, #16
 8019f74:	ee17 7a90 	vmov	r7, s15
 8019f78:	ee73 7a42 	vsub.f32	s15, s6, s4
 8019f7c:	fb97 f7f4 	sdiv	r7, r7, r4
 8019f80:	eefe 7ac8 	vcvt.s32.f32	s15, s15, #16
 8019f84:	ee17 ca90 	vmov	ip, s15
 8019f88:	fb9c fcf4 	sdiv	ip, ip, r4
 8019f8c:	fb0c 3306 	mla	r3, ip, r6, r3
 8019f90:	9302      	str	r3, [sp, #8]
 8019f92:	ee17 3a10 	vmov	r3, s14
 8019f96:	e9cd 7c03 	strd	r7, ip, [sp, #12]
 8019f9a:	fb07 3706 	mla	r7, r7, r6, r3
 8019f9e:	eba9 0306 	sub.w	r3, r9, r6
 8019fa2:	e9cd 4700 	strd	r4, r7, [sp]
 8019fa6:	f8da 4008 	ldr.w	r4, [sl, #8]
 8019faa:	47a0      	blx	r4
 8019fac:	b00d      	add	sp, #52	@ 0x34
 8019fae:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8019fb2:	2500      	movs	r5, #0
 8019fb4:	462e      	mov	r6, r5
 8019fb6:	e799      	b.n	8019eec <_ZN8touchgfx3LCD22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0xd0>

08019fb8 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht>:
 8019fb8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8019fbc:	b0db      	sub	sp, #364	@ 0x16c
 8019fbe:	461d      	mov	r5, r3
 8019fc0:	4614      	mov	r4, r2
 8019fc2:	f8bd 3198 	ldrh.w	r3, [sp, #408]	@ 0x198
 8019fc6:	910f      	str	r1, [sp, #60]	@ 0x3c
 8019fc8:	4629      	mov	r1, r5
 8019fca:	930a      	str	r3, [sp, #40]	@ 0x28
 8019fcc:	f89d 319c 	ldrb.w	r3, [sp, #412]	@ 0x19c
 8019fd0:	9009      	str	r0, [sp, #36]	@ 0x24
 8019fd2:	930b      	str	r3, [sp, #44]	@ 0x2c
 8019fd4:	f8bd 31a0 	ldrh.w	r3, [sp, #416]	@ 0x1a0
 8019fd8:	f8dd b194 	ldr.w	fp, [sp, #404]	@ 0x194
 8019fdc:	9310      	str	r3, [sp, #64]	@ 0x40
 8019fde:	6803      	ldr	r3, [r0, #0]
 8019fe0:	6bdf      	ldr	r7, [r3, #60]	@ 0x3c
 8019fe2:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	@ 0x28
 8019fe6:	47b8      	blx	r7
 8019fe8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8019fea:	6058      	str	r0, [r3, #4]
 8019fec:	2800      	cmp	r0, #0
 8019fee:	f000 83a1 	beq.w	801a734 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x77c>
 8019ff2:	682b      	ldr	r3, [r5, #0]
 8019ff4:	eef2 7a04 	vmov.f32	s15, #36	@ 0x41200000  10.0
 8019ff8:	ed94 7a02 	vldr	s14, [r4, #8]
 8019ffc:	9314      	str	r3, [sp, #80]	@ 0x50
 8019ffe:	686b      	ldr	r3, [r5, #4]
 801a000:	eeb4 7ae7 	vcmpe.f32	s14, s15
 801a004:	9315      	str	r3, [sp, #84]	@ 0x54
 801a006:	4bc1      	ldr	r3, [pc, #772]	@ (801a30c <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x354>)
 801a008:	7819      	ldrb	r1, [r3, #0]
 801a00a:	e9d5 2302 	ldrd	r2, r3, [r5, #8]
 801a00e:	2900      	cmp	r1, #0
 801a010:	bf16      	itet	ne
 801a012:	4619      	movne	r1, r3
 801a014:	4611      	moveq	r1, r2
 801a016:	4613      	movne	r3, r2
 801a018:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801a01c:	9116      	str	r1, [sp, #88]	@ 0x58
 801a01e:	e9cd 3217 	strd	r3, r2, [sp, #92]	@ 0x5c
 801a022:	f240 8387 	bls.w	801a734 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x77c>
 801a026:	ed94 7a07 	vldr	s14, [r4, #28]
 801a02a:	eeb4 7ae7 	vcmpe.f32	s14, s15
 801a02e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801a032:	f240 837f 	bls.w	801a734 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x77c>
 801a036:	ed94 7a0c 	vldr	s14, [r4, #48]	@ 0x30
 801a03a:	eeb4 7ae7 	vcmpe.f32	s14, s15
 801a03e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801a042:	f240 8377 	bls.w	801a734 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x77c>
 801a046:	6822      	ldr	r2, [r4, #0]
 801a048:	4bb1      	ldr	r3, [pc, #708]	@ (801a310 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x358>)
 801a04a:	429a      	cmp	r2, r3
 801a04c:	f2c0 8372 	blt.w	801a734 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x77c>
 801a050:	49b0      	ldr	r1, [pc, #704]	@ (801a314 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x35c>)
 801a052:	6963      	ldr	r3, [r4, #20]
 801a054:	428a      	cmp	r2, r1
 801a056:	f300 836d 	bgt.w	801a734 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x77c>
 801a05a:	f503 331c 	add.w	r3, r3, #159744	@ 0x27000
 801a05e:	48ae      	ldr	r0, [pc, #696]	@ (801a318 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x360>)
 801a060:	33ff      	adds	r3, #255	@ 0xff
 801a062:	4283      	cmp	r3, r0
 801a064:	f200 8366 	bhi.w	801a734 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x77c>
 801a068:	6aa3      	ldr	r3, [r4, #40]	@ 0x28
 801a06a:	4dac      	ldr	r5, [pc, #688]	@ (801a31c <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x364>)
 801a06c:	f503 331c 	add.w	r3, r3, #159744	@ 0x27000
 801a070:	33ff      	adds	r3, #255	@ 0xff
 801a072:	42ab      	cmp	r3, r5
 801a074:	f200 835e 	bhi.w	801a734 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x77c>
 801a078:	6862      	ldr	r2, [r4, #4]
 801a07a:	f502 331c 	add.w	r3, r2, #159744	@ 0x27000
 801a07e:	33ff      	adds	r3, #255	@ 0xff
 801a080:	4283      	cmp	r3, r0
 801a082:	f200 8357 	bhi.w	801a734 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x77c>
 801a086:	69a1      	ldr	r1, [r4, #24]
 801a088:	f501 331c 	add.w	r3, r1, #159744	@ 0x27000
 801a08c:	33ff      	adds	r3, #255	@ 0xff
 801a08e:	4283      	cmp	r3, r0
 801a090:	f200 8350 	bhi.w	801a734 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x77c>
 801a094:	6ae3      	ldr	r3, [r4, #44]	@ 0x2c
 801a096:	f503 301c 	add.w	r0, r3, #159744	@ 0x27000
 801a09a:	30ff      	adds	r0, #255	@ 0xff
 801a09c:	42a8      	cmp	r0, r5
 801a09e:	f200 8349 	bhi.w	801a734 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x77c>
 801a0a2:	428a      	cmp	r2, r1
 801a0a4:	f280 8110 	bge.w	801a2c8 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x310>
 801a0a8:	429a      	cmp	r2, r3
 801a0aa:	f300 8119 	bgt.w	801a2e0 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x328>
 801a0ae:	4299      	cmp	r1, r3
 801a0b0:	f280 811d 	bge.w	801a2ee <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x336>
 801a0b4:	2502      	movs	r5, #2
 801a0b6:	2701      	movs	r7, #1
 801a0b8:	46a9      	mov	r9, r5
 801a0ba:	46b8      	mov	r8, r7
 801a0bc:	f04f 0a00 	mov.w	sl, #0
 801a0c0:	4621      	mov	r1, r4
 801a0c2:	a849      	add	r0, sp, #292	@ 0x124
 801a0c4:	f003 fd92 	bl	801dbec <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE>
 801a0c8:	4622      	mov	r2, r4
 801a0ca:	4653      	mov	r3, sl
 801a0cc:	a949      	add	r1, sp, #292	@ 0x124
 801a0ce:	f8cd 9000 	str.w	r9, [sp]
 801a0d2:	a819      	add	r0, sp, #100	@ 0x64
 801a0d4:	f003 feba 	bl	801de4c <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii>
 801a0d8:	4622      	mov	r2, r4
 801a0da:	4653      	mov	r3, sl
 801a0dc:	a949      	add	r1, sp, #292	@ 0x124
 801a0de:	f8cd 8000 	str.w	r8, [sp]
 801a0e2:	a829      	add	r0, sp, #164	@ 0xa4
 801a0e4:	f003 feb2 	bl	801de4c <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii>
 801a0e8:	4643      	mov	r3, r8
 801a0ea:	4622      	mov	r2, r4
 801a0ec:	a949      	add	r1, sp, #292	@ 0x124
 801a0ee:	f8cd 9000 	str.w	r9, [sp]
 801a0f2:	a839      	add	r0, sp, #228	@ 0xe4
 801a0f4:	f003 feaa 	bl	801de4c <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii>
 801a0f8:	42af      	cmp	r7, r5
 801a0fa:	af12      	add	r7, sp, #72	@ 0x48
 801a0fc:	bfb7      	itett	lt
 801a0fe:	2300      	movlt	r3, #0
 801a100:	2301      	movge	r3, #1
 801a102:	ad29      	addlt	r5, sp, #164	@ 0xa4
 801a104:	ac19      	addlt	r4, sp, #100	@ 0x64
 801a106:	bfb1      	iteee	lt
 801a108:	930e      	strlt	r3, [sp, #56]	@ 0x38
 801a10a:	ad19      	addge	r5, sp, #100	@ 0x64
 801a10c:	930e      	strge	r3, [sp, #56]	@ 0x38
 801a10e:	ac29      	addge	r4, sp, #164	@ 0xa4
 801a110:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 801a112:	e893 0003 	ldmia.w	r3, {r0, r1}
 801a116:	e887 0003 	stmia.w	r7, {r0, r1}
 801a11a:	b928      	cbnz	r0, 801a128 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x170>
 801a11c:	4b80      	ldr	r3, [pc, #512]	@ (801a320 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x368>)
 801a11e:	6818      	ldr	r0, [r3, #0]
 801a120:	6803      	ldr	r3, [r0, #0]
 801a122:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 801a124:	4798      	blx	r3
 801a126:	6038      	str	r0, [r7, #0]
 801a128:	9b64      	ldr	r3, [sp, #400]	@ 0x190
 801a12a:	f8bb 0006 	ldrh.w	r0, [fp, #6]
 801a12e:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 801a132:	9a2f      	ldr	r2, [sp, #188]	@ 0xbc
 801a134:	930c      	str	r3, [sp, #48]	@ 0x30
 801a136:	990c      	ldr	r1, [sp, #48]	@ 0x30
 801a138:	6963      	ldr	r3, [r4, #20]
 801a13a:	440b      	add	r3, r1
 801a13c:	f9bb 1002 	ldrsh.w	r1, [fp, #2]
 801a140:	4408      	add	r0, r1
 801a142:	b200      	sxth	r0, r0
 801a144:	4283      	cmp	r3, r0
 801a146:	900d      	str	r0, [sp, #52]	@ 0x34
 801a148:	f280 80dd 	bge.w	801a306 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x34e>
 801a14c:	428b      	cmp	r3, r1
 801a14e:	da08      	bge.n	801a162 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x1aa>
 801a150:	2a00      	cmp	r2, #0
 801a152:	dd06      	ble.n	801a162 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x1aa>
 801a154:	1acb      	subs	r3, r1, r3
 801a156:	429a      	cmp	r2, r3
 801a158:	f2c0 80e4 	blt.w	801a324 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x36c>
 801a15c:	2b00      	cmp	r3, #0
 801a15e:	f300 80e2 	bgt.w	801a326 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x36e>
 801a162:	6967      	ldr	r7, [r4, #20]
 801a164:	f10d 0850 	add.w	r8, sp, #80	@ 0x50
 801a168:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 801a16a:	443b      	add	r3, r7
 801a16c:	461f      	mov	r7, r3
 801a16e:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 801a170:	1bdf      	subs	r7, r3, r7
 801a172:	4297      	cmp	r7, r2
 801a174:	bfa8      	it	ge
 801a176:	4617      	movge	r7, r2
 801a178:	2f00      	cmp	r7, #0
 801a17a:	f340 8166 	ble.w	801a44a <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x492>
 801a17e:	9b64      	ldr	r3, [sp, #400]	@ 0x190
 801a180:	6829      	ldr	r1, [r5, #0]
 801a182:	f9b3 2000 	ldrsh.w	r2, [r3]
 801a186:	f9bb 3000 	ldrsh.w	r3, [fp]
 801a18a:	4411      	add	r1, r2
 801a18c:	6820      	ldr	r0, [r4, #0]
 801a18e:	4299      	cmp	r1, r3
 801a190:	dd1a      	ble.n	801a1c8 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x210>
 801a192:	f8bb 1004 	ldrh.w	r1, [fp, #4]
 801a196:	4402      	add	r2, r0
 801a198:	440b      	add	r3, r1
 801a19a:	b21b      	sxth	r3, r3
 801a19c:	429a      	cmp	r2, r3
 801a19e:	dc13      	bgt.n	801a1c8 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x210>
 801a1a0:	9a10      	ldr	r2, [sp, #64]	@ 0x40
 801a1a2:	a912      	add	r1, sp, #72	@ 0x48
 801a1a4:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801a1a6:	9809      	ldr	r0, [sp, #36]	@ 0x24
 801a1a8:	681b      	ldr	r3, [r3, #0]
 801a1aa:	9206      	str	r2, [sp, #24]
 801a1ac:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 801a1ae:	9500      	str	r5, [sp, #0]
 801a1b0:	9205      	str	r2, [sp, #20]
 801a1b2:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 801a1b4:	e9cd b203 	strd	fp, r2, [sp, #12]
 801a1b8:	9a64      	ldr	r2, [sp, #400]	@ 0x190
 801a1ba:	e9cd 8201 	strd	r8, r2, [sp, #4]
 801a1be:	aa49      	add	r2, sp, #292	@ 0x124
 801a1c0:	f8d3 9040 	ldr.w	r9, [r3, #64]	@ 0x40
 801a1c4:	4623      	mov	r3, r4
 801a1c6:	47c8      	blx	r9
 801a1c8:	ed94 7a0a 	vldr	s14, [r4, #40]	@ 0x28
 801a1cc:	edd4 7a0b 	vldr	s15, [r4, #44]	@ 0x2c
 801a1d0:	edd4 6a0e 	vldr	s13, [r4, #56]	@ 0x38
 801a1d4:	ee37 7a27 	vadd.f32	s14, s14, s15
 801a1d8:	edd4 7a0d 	vldr	s15, [r4, #52]	@ 0x34
 801a1dc:	68a1      	ldr	r1, [r4, #8]
 801a1de:	ee77 7aa6 	vadd.f32	s15, s15, s13
 801a1e2:	ed94 6a08 	vldr	s12, [r4, #32]
 801a1e6:	edd4 6a07 	vldr	s13, [r4, #28]
 801a1ea:	ed84 7a0a 	vstr	s14, [r4, #40]	@ 0x28
 801a1ee:	ee76 6a86 	vadd.f32	s13, s13, s12
 801a1f2:	edc4 7a0d 	vstr	s15, [r4, #52]	@ 0x34
 801a1f6:	e9d4 2300 	ldrd	r2, r3, [r4]
 801a1fa:	edc4 6a07 	vstr	s13, [r4, #28]
 801a1fe:	441a      	add	r2, r3
 801a200:	6963      	ldr	r3, [r4, #20]
 801a202:	3301      	adds	r3, #1
 801a204:	6022      	str	r2, [r4, #0]
 801a206:	6163      	str	r3, [r4, #20]
 801a208:	69a3      	ldr	r3, [r4, #24]
 801a20a:	3b01      	subs	r3, #1
 801a20c:	61a3      	str	r3, [r4, #24]
 801a20e:	6923      	ldr	r3, [r4, #16]
 801a210:	440b      	add	r3, r1
 801a212:	68e1      	ldr	r1, [r4, #12]
 801a214:	428b      	cmp	r3, r1
 801a216:	6123      	str	r3, [r4, #16]
 801a218:	db15      	blt.n	801a246 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x28e>
 801a21a:	ed94 6a09 	vldr	s12, [r4, #36]	@ 0x24
 801a21e:	3201      	adds	r2, #1
 801a220:	1a5b      	subs	r3, r3, r1
 801a222:	ee76 6a26 	vadd.f32	s13, s12, s13
 801a226:	6022      	str	r2, [r4, #0]
 801a228:	6123      	str	r3, [r4, #16]
 801a22a:	edc4 6a07 	vstr	s13, [r4, #28]
 801a22e:	edd4 6a0c 	vldr	s13, [r4, #48]	@ 0x30
 801a232:	ee36 7a87 	vadd.f32	s14, s13, s14
 801a236:	ed84 7a0a 	vstr	s14, [r4, #40]	@ 0x28
 801a23a:	ed94 7a0f 	vldr	s14, [r4, #60]	@ 0x3c
 801a23e:	ee77 7a27 	vadd.f32	s15, s14, s15
 801a242:	edc4 7a0d 	vstr	s15, [r4, #52]	@ 0x34
 801a246:	ed95 7a0a 	vldr	s14, [r5, #40]	@ 0x28
 801a24a:	edd5 7a0b 	vldr	s15, [r5, #44]	@ 0x2c
 801a24e:	edd5 6a0e 	vldr	s13, [r5, #56]	@ 0x38
 801a252:	ee37 7a27 	vadd.f32	s14, s14, s15
 801a256:	edd5 7a0d 	vldr	s15, [r5, #52]	@ 0x34
 801a25a:	68a9      	ldr	r1, [r5, #8]
 801a25c:	ee77 7aa6 	vadd.f32	s15, s15, s13
 801a260:	ed95 6a08 	vldr	s12, [r5, #32]
 801a264:	edd5 6a07 	vldr	s13, [r5, #28]
 801a268:	ed85 7a0a 	vstr	s14, [r5, #40]	@ 0x28
 801a26c:	ee76 6a86 	vadd.f32	s13, s13, s12
 801a270:	edc5 7a0d 	vstr	s15, [r5, #52]	@ 0x34
 801a274:	e9d5 2300 	ldrd	r2, r3, [r5]
 801a278:	edc5 6a07 	vstr	s13, [r5, #28]
 801a27c:	441a      	add	r2, r3
 801a27e:	696b      	ldr	r3, [r5, #20]
 801a280:	3301      	adds	r3, #1
 801a282:	602a      	str	r2, [r5, #0]
 801a284:	616b      	str	r3, [r5, #20]
 801a286:	69ab      	ldr	r3, [r5, #24]
 801a288:	3b01      	subs	r3, #1
 801a28a:	61ab      	str	r3, [r5, #24]
 801a28c:	692b      	ldr	r3, [r5, #16]
 801a28e:	440b      	add	r3, r1
 801a290:	68e9      	ldr	r1, [r5, #12]
 801a292:	428b      	cmp	r3, r1
 801a294:	612b      	str	r3, [r5, #16]
 801a296:	db15      	blt.n	801a2c4 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x30c>
 801a298:	ed95 6a09 	vldr	s12, [r5, #36]	@ 0x24
 801a29c:	3201      	adds	r2, #1
 801a29e:	1a5b      	subs	r3, r3, r1
 801a2a0:	ee76 6a26 	vadd.f32	s13, s12, s13
 801a2a4:	602a      	str	r2, [r5, #0]
 801a2a6:	612b      	str	r3, [r5, #16]
 801a2a8:	edc5 6a07 	vstr	s13, [r5, #28]
 801a2ac:	edd5 6a0c 	vldr	s13, [r5, #48]	@ 0x30
 801a2b0:	ee36 7a87 	vadd.f32	s14, s13, s14
 801a2b4:	ed85 7a0a 	vstr	s14, [r5, #40]	@ 0x28
 801a2b8:	ed95 7a0f 	vldr	s14, [r5, #60]	@ 0x3c
 801a2bc:	ee77 7a27 	vadd.f32	s15, s14, s15
 801a2c0:	edc5 7a0d 	vstr	s15, [r5, #52]	@ 0x34
 801a2c4:	3f01      	subs	r7, #1
 801a2c6:	e757      	b.n	801a178 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x1c0>
 801a2c8:	4299      	cmp	r1, r3
 801a2ca:	dc13      	bgt.n	801a2f4 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x33c>
 801a2cc:	429a      	cmp	r2, r3
 801a2ce:	da14      	bge.n	801a2fa <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x342>
 801a2d0:	2502      	movs	r5, #2
 801a2d2:	2703      	movs	r7, #3
 801a2d4:	f04f 0800 	mov.w	r8, #0
 801a2d8:	46a9      	mov	r9, r5
 801a2da:	f04f 0a01 	mov.w	sl, #1
 801a2de:	e6ef      	b.n	801a0c0 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x108>
 801a2e0:	2501      	movs	r5, #1
 801a2e2:	2700      	movs	r7, #0
 801a2e4:	46a9      	mov	r9, r5
 801a2e6:	46b8      	mov	r8, r7
 801a2e8:	f04f 0a02 	mov.w	sl, #2
 801a2ec:	e6e8      	b.n	801a0c0 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x108>
 801a2ee:	2501      	movs	r5, #1
 801a2f0:	2702      	movs	r7, #2
 801a2f2:	e6e1      	b.n	801a0b8 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x100>
 801a2f4:	2500      	movs	r5, #0
 801a2f6:	2701      	movs	r7, #1
 801a2f8:	e7f4      	b.n	801a2e4 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x32c>
 801a2fa:	2702      	movs	r7, #2
 801a2fc:	2503      	movs	r5, #3
 801a2fe:	f04f 0900 	mov.w	r9, #0
 801a302:	46b8      	mov	r8, r7
 801a304:	e7e9      	b.n	801a2da <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x322>
 801a306:	4613      	mov	r3, r2
 801a308:	e728      	b.n	801a15c <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x1a4>
 801a30a:	bf00      	nop
 801a30c:	2400b878 	.word	0x2400b878
 801a310:	fffd8f01 	.word	0xfffd8f01
 801a314:	00027100 	.word	0x00027100
 801a318:	0004e1ff 	.word	0x0004e1ff
 801a31c:	0004e1fe 	.word	0x0004e1fe
 801a320:	2400b880 	.word	0x2400b880
 801a324:	4613      	mov	r3, r2
 801a326:	992b      	ldr	r1, [sp, #172]	@ 0xac
 801a328:	469e      	mov	lr, r3
 801a32a:	9f2e      	ldr	r7, [sp, #184]	@ 0xb8
 801a32c:	469c      	mov	ip, r3
 801a32e:	9111      	str	r1, [sp, #68]	@ 0x44
 801a330:	f04f 0900 	mov.w	r9, #0
 801a334:	eddd 4a34 	vldr	s9, [sp, #208]	@ 0xd0
 801a338:	ed9d 7a33 	vldr	s14, [sp, #204]	@ 0xcc
 801a33c:	ed9d 4a37 	vldr	s8, [sp, #220]	@ 0xdc
 801a340:	eddd 7a36 	vldr	s15, [sp, #216]	@ 0xd8
 801a344:	eddd 3a31 	vldr	s7, [sp, #196]	@ 0xc4
 801a348:	eddd 6a30 	vldr	s13, [sp, #192]	@ 0xc0
 801a34c:	ed9d 5a32 	vldr	s10, [sp, #200]	@ 0xc8
 801a350:	eddd 5a35 	vldr	s11, [sp, #212]	@ 0xd4
 801a354:	ed9d 6a38 	vldr	s12, [sp, #224]	@ 0xe0
 801a358:	e9dd 0a29 	ldrd	r0, sl, [sp, #164]	@ 0xa4
 801a35c:	e9dd 812c 	ldrd	r8, r1, [sp, #176]	@ 0xb0
 801a360:	f1bc 0f00 	cmp.w	ip, #0
 801a364:	d147      	bne.n	801a3f6 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x43e>
 801a366:	eb03 0c07 	add.w	ip, r3, r7
 801a36a:	1ad7      	subs	r7, r2, r3
 801a36c:	f1b9 0f00 	cmp.w	r9, #0
 801a370:	d009      	beq.n	801a386 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x3ce>
 801a372:	9029      	str	r0, [sp, #164]	@ 0xa4
 801a374:	ed8d 7a33 	vstr	s14, [sp, #204]	@ 0xcc
 801a378:	edcd 7a36 	vstr	s15, [sp, #216]	@ 0xd8
 801a37c:	edcd 6a30 	vstr	s13, [sp, #192]	@ 0xc0
 801a380:	912d      	str	r1, [sp, #180]	@ 0xb4
 801a382:	e9cd c72e 	strd	ip, r7, [sp, #184]	@ 0xb8
 801a386:	991b      	ldr	r1, [sp, #108]	@ 0x6c
 801a388:	f04f 0800 	mov.w	r8, #0
 801a38c:	eddd 4a24 	vldr	s9, [sp, #144]	@ 0x90
 801a390:	9111      	str	r1, [sp, #68]	@ 0x44
 801a392:	eddd 6a23 	vldr	s13, [sp, #140]	@ 0x8c
 801a396:	ed9d 4a27 	vldr	s8, [sp, #156]	@ 0x9c
 801a39a:	ed9d 7a26 	vldr	s14, [sp, #152]	@ 0x98
 801a39e:	eddd 3a21 	vldr	s7, [sp, #132]	@ 0x84
 801a3a2:	eddd 7a20 	vldr	s15, [sp, #128]	@ 0x80
 801a3a6:	ed9d 5a22 	vldr	s10, [sp, #136]	@ 0x88
 801a3aa:	eddd 5a25 	vldr	s11, [sp, #148]	@ 0x94
 801a3ae:	ed9d 6a28 	vldr	s12, [sp, #160]	@ 0xa0
 801a3b2:	e9dd 0a19 	ldrd	r0, sl, [sp, #100]	@ 0x64
 801a3b6:	e9dd c71e 	ldrd	ip, r7, [sp, #120]	@ 0x78
 801a3ba:	e9dd 911c 	ldrd	r9, r1, [sp, #112]	@ 0x70
 801a3be:	f1be 0f00 	cmp.w	lr, #0
 801a3c2:	d031      	beq.n	801a428 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x470>
 801a3c4:	9e11      	ldr	r6, [sp, #68]	@ 0x44
 801a3c6:	4450      	add	r0, sl
 801a3c8:	ee76 6aa4 	vadd.f32	s13, s13, s9
 801a3cc:	4431      	add	r1, r6
 801a3ce:	ee37 7a04 	vadd.f32	s14, s14, s8
 801a3d2:	ee77 7aa3 	vadd.f32	s15, s15, s7
 801a3d6:	4549      	cmp	r1, r9
 801a3d8:	db08      	blt.n	801a3ec <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x434>
 801a3da:	ee77 7a85 	vadd.f32	s15, s15, s10
 801a3de:	3001      	adds	r0, #1
 801a3e0:	ee76 6aa5 	vadd.f32	s13, s13, s11
 801a3e4:	eba1 0109 	sub.w	r1, r1, r9
 801a3e8:	ee37 7a06 	vadd.f32	s14, s14, s12
 801a3ec:	f10e 3eff 	add.w	lr, lr, #4294967295
 801a3f0:	f04f 0801 	mov.w	r8, #1
 801a3f4:	e7e3      	b.n	801a3be <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x406>
 801a3f6:	9e11      	ldr	r6, [sp, #68]	@ 0x44
 801a3f8:	4450      	add	r0, sl
 801a3fa:	ee37 7a24 	vadd.f32	s14, s14, s9
 801a3fe:	4431      	add	r1, r6
 801a400:	ee77 7a84 	vadd.f32	s15, s15, s8
 801a404:	ee76 6aa3 	vadd.f32	s13, s13, s7
 801a408:	4541      	cmp	r1, r8
 801a40a:	db08      	blt.n	801a41e <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x466>
 801a40c:	ee76 6a85 	vadd.f32	s13, s13, s10
 801a410:	3001      	adds	r0, #1
 801a412:	ee37 7a25 	vadd.f32	s14, s14, s11
 801a416:	eba1 0108 	sub.w	r1, r1, r8
 801a41a:	ee77 7a86 	vadd.f32	s15, s15, s12
 801a41e:	f10c 3cff 	add.w	ip, ip, #4294967295
 801a422:	f04f 0901 	mov.w	r9, #1
 801a426:	e79b      	b.n	801a360 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x3a8>
 801a428:	449c      	add	ip, r3
 801a42a:	1aff      	subs	r7, r7, r3
 801a42c:	f1b8 0f00 	cmp.w	r8, #0
 801a430:	d009      	beq.n	801a446 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x48e>
 801a432:	9019      	str	r0, [sp, #100]	@ 0x64
 801a434:	edcd 6a23 	vstr	s13, [sp, #140]	@ 0x8c
 801a438:	ed8d 7a26 	vstr	s14, [sp, #152]	@ 0x98
 801a43c:	edcd 7a20 	vstr	s15, [sp, #128]	@ 0x80
 801a440:	911d      	str	r1, [sp, #116]	@ 0x74
 801a442:	e9cd c71e 	strd	ip, r7, [sp, #120]	@ 0x78
 801a446:	1ad2      	subs	r2, r2, r3
 801a448:	e68b      	b.n	801a162 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x1aa>
 801a44a:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 801a44c:	9a3f      	ldr	r2, [sp, #252]	@ 0xfc
 801a44e:	2b00      	cmp	r3, #0
 801a450:	f000 80d1 	beq.w	801a5f6 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x63e>
 801a454:	ad19      	add	r5, sp, #100	@ 0x64
 801a456:	ac39      	add	r4, sp, #228	@ 0xe4
 801a458:	9b64      	ldr	r3, [sp, #400]	@ 0x190
 801a45a:	f8bb 0006 	ldrh.w	r0, [fp, #6]
 801a45e:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 801a462:	930c      	str	r3, [sp, #48]	@ 0x30
 801a464:	990c      	ldr	r1, [sp, #48]	@ 0x30
 801a466:	6963      	ldr	r3, [r4, #20]
 801a468:	440b      	add	r3, r1
 801a46a:	f9bb 1002 	ldrsh.w	r1, [fp, #2]
 801a46e:	4408      	add	r0, r1
 801a470:	b200      	sxth	r0, r0
 801a472:	4283      	cmp	r3, r0
 801a474:	900d      	str	r0, [sp, #52]	@ 0x34
 801a476:	f280 80c1 	bge.w	801a5fc <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x644>
 801a47a:	428b      	cmp	r3, r1
 801a47c:	da08      	bge.n	801a490 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x4d8>
 801a47e:	2a00      	cmp	r2, #0
 801a480:	dd06      	ble.n	801a490 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x4d8>
 801a482:	1acb      	subs	r3, r1, r3
 801a484:	429a      	cmp	r2, r3
 801a486:	f2c0 80bb 	blt.w	801a600 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x648>
 801a48a:	2b00      	cmp	r3, #0
 801a48c:	f300 80b9 	bgt.w	801a602 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x64a>
 801a490:	6967      	ldr	r7, [r4, #20]
 801a492:	f10d 0850 	add.w	r8, sp, #80	@ 0x50
 801a496:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 801a498:	443b      	add	r3, r7
 801a49a:	461f      	mov	r7, r3
 801a49c:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 801a49e:	1bdf      	subs	r7, r3, r7
 801a4a0:	4297      	cmp	r7, r2
 801a4a2:	bfa8      	it	ge
 801a4a4:	4617      	movge	r7, r2
 801a4a6:	2f00      	cmp	r7, #0
 801a4a8:	f340 813c 	ble.w	801a724 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x76c>
 801a4ac:	9b64      	ldr	r3, [sp, #400]	@ 0x190
 801a4ae:	6829      	ldr	r1, [r5, #0]
 801a4b0:	f9b3 2000 	ldrsh.w	r2, [r3]
 801a4b4:	f9bb 3000 	ldrsh.w	r3, [fp]
 801a4b8:	4411      	add	r1, r2
 801a4ba:	6820      	ldr	r0, [r4, #0]
 801a4bc:	4299      	cmp	r1, r3
 801a4be:	dd1a      	ble.n	801a4f6 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x53e>
 801a4c0:	f8bb 1004 	ldrh.w	r1, [fp, #4]
 801a4c4:	4402      	add	r2, r0
 801a4c6:	440b      	add	r3, r1
 801a4c8:	b21b      	sxth	r3, r3
 801a4ca:	429a      	cmp	r2, r3
 801a4cc:	dc13      	bgt.n	801a4f6 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x53e>
 801a4ce:	9a10      	ldr	r2, [sp, #64]	@ 0x40
 801a4d0:	a912      	add	r1, sp, #72	@ 0x48
 801a4d2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801a4d4:	9809      	ldr	r0, [sp, #36]	@ 0x24
 801a4d6:	681b      	ldr	r3, [r3, #0]
 801a4d8:	9206      	str	r2, [sp, #24]
 801a4da:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 801a4dc:	9500      	str	r5, [sp, #0]
 801a4de:	9205      	str	r2, [sp, #20]
 801a4e0:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 801a4e2:	e9cd b203 	strd	fp, r2, [sp, #12]
 801a4e6:	9a64      	ldr	r2, [sp, #400]	@ 0x190
 801a4e8:	e9cd 8201 	strd	r8, r2, [sp, #4]
 801a4ec:	aa49      	add	r2, sp, #292	@ 0x124
 801a4ee:	f8d3 9040 	ldr.w	r9, [r3, #64]	@ 0x40
 801a4f2:	4623      	mov	r3, r4
 801a4f4:	47c8      	blx	r9
 801a4f6:	ed94 7a0a 	vldr	s14, [r4, #40]	@ 0x28
 801a4fa:	edd4 7a0b 	vldr	s15, [r4, #44]	@ 0x2c
 801a4fe:	edd4 6a0e 	vldr	s13, [r4, #56]	@ 0x38
 801a502:	ee37 7a27 	vadd.f32	s14, s14, s15
 801a506:	edd4 7a0d 	vldr	s15, [r4, #52]	@ 0x34
 801a50a:	68a1      	ldr	r1, [r4, #8]
 801a50c:	ee77 7aa6 	vadd.f32	s15, s15, s13
 801a510:	ed94 6a08 	vldr	s12, [r4, #32]
 801a514:	edd4 6a07 	vldr	s13, [r4, #28]
 801a518:	ed84 7a0a 	vstr	s14, [r4, #40]	@ 0x28
 801a51c:	ee76 6a86 	vadd.f32	s13, s13, s12
 801a520:	edc4 7a0d 	vstr	s15, [r4, #52]	@ 0x34
 801a524:	e9d4 2300 	ldrd	r2, r3, [r4]
 801a528:	edc4 6a07 	vstr	s13, [r4, #28]
 801a52c:	441a      	add	r2, r3
 801a52e:	6963      	ldr	r3, [r4, #20]
 801a530:	3301      	adds	r3, #1
 801a532:	6022      	str	r2, [r4, #0]
 801a534:	6163      	str	r3, [r4, #20]
 801a536:	69a3      	ldr	r3, [r4, #24]
 801a538:	3b01      	subs	r3, #1
 801a53a:	61a3      	str	r3, [r4, #24]
 801a53c:	6923      	ldr	r3, [r4, #16]
 801a53e:	440b      	add	r3, r1
 801a540:	68e1      	ldr	r1, [r4, #12]
 801a542:	428b      	cmp	r3, r1
 801a544:	6123      	str	r3, [r4, #16]
 801a546:	db15      	blt.n	801a574 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x5bc>
 801a548:	ed94 6a09 	vldr	s12, [r4, #36]	@ 0x24
 801a54c:	3201      	adds	r2, #1
 801a54e:	1a5b      	subs	r3, r3, r1
 801a550:	ee76 6a26 	vadd.f32	s13, s12, s13
 801a554:	6022      	str	r2, [r4, #0]
 801a556:	6123      	str	r3, [r4, #16]
 801a558:	edc4 6a07 	vstr	s13, [r4, #28]
 801a55c:	edd4 6a0c 	vldr	s13, [r4, #48]	@ 0x30
 801a560:	ee36 7a87 	vadd.f32	s14, s13, s14
 801a564:	ed84 7a0a 	vstr	s14, [r4, #40]	@ 0x28
 801a568:	ed94 7a0f 	vldr	s14, [r4, #60]	@ 0x3c
 801a56c:	ee77 7a27 	vadd.f32	s15, s14, s15
 801a570:	edc4 7a0d 	vstr	s15, [r4, #52]	@ 0x34
 801a574:	ed95 7a0a 	vldr	s14, [r5, #40]	@ 0x28
 801a578:	edd5 7a0b 	vldr	s15, [r5, #44]	@ 0x2c
 801a57c:	edd5 6a0e 	vldr	s13, [r5, #56]	@ 0x38
 801a580:	ee37 7a27 	vadd.f32	s14, s14, s15
 801a584:	edd5 7a0d 	vldr	s15, [r5, #52]	@ 0x34
 801a588:	68a9      	ldr	r1, [r5, #8]
 801a58a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 801a58e:	ed95 6a08 	vldr	s12, [r5, #32]
 801a592:	edd5 6a07 	vldr	s13, [r5, #28]
 801a596:	ed85 7a0a 	vstr	s14, [r5, #40]	@ 0x28
 801a59a:	ee76 6a86 	vadd.f32	s13, s13, s12
 801a59e:	edc5 7a0d 	vstr	s15, [r5, #52]	@ 0x34
 801a5a2:	e9d5 2300 	ldrd	r2, r3, [r5]
 801a5a6:	edc5 6a07 	vstr	s13, [r5, #28]
 801a5aa:	441a      	add	r2, r3
 801a5ac:	696b      	ldr	r3, [r5, #20]
 801a5ae:	3301      	adds	r3, #1
 801a5b0:	602a      	str	r2, [r5, #0]
 801a5b2:	616b      	str	r3, [r5, #20]
 801a5b4:	69ab      	ldr	r3, [r5, #24]
 801a5b6:	3b01      	subs	r3, #1
 801a5b8:	61ab      	str	r3, [r5, #24]
 801a5ba:	692b      	ldr	r3, [r5, #16]
 801a5bc:	440b      	add	r3, r1
 801a5be:	68e9      	ldr	r1, [r5, #12]
 801a5c0:	428b      	cmp	r3, r1
 801a5c2:	612b      	str	r3, [r5, #16]
 801a5c4:	db15      	blt.n	801a5f2 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x63a>
 801a5c6:	ed95 6a09 	vldr	s12, [r5, #36]	@ 0x24
 801a5ca:	3201      	adds	r2, #1
 801a5cc:	1a5b      	subs	r3, r3, r1
 801a5ce:	ee76 6a26 	vadd.f32	s13, s12, s13
 801a5d2:	602a      	str	r2, [r5, #0]
 801a5d4:	612b      	str	r3, [r5, #16]
 801a5d6:	edc5 6a07 	vstr	s13, [r5, #28]
 801a5da:	edd5 6a0c 	vldr	s13, [r5, #48]	@ 0x30
 801a5de:	ee36 7a87 	vadd.f32	s14, s13, s14
 801a5e2:	ed85 7a0a 	vstr	s14, [r5, #40]	@ 0x28
 801a5e6:	ed95 7a0f 	vldr	s14, [r5, #60]	@ 0x3c
 801a5ea:	ee77 7a27 	vadd.f32	s15, s14, s15
 801a5ee:	edc5 7a0d 	vstr	s15, [r5, #52]	@ 0x34
 801a5f2:	3f01      	subs	r7, #1
 801a5f4:	e757      	b.n	801a4a6 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x4ee>
 801a5f6:	ad39      	add	r5, sp, #228	@ 0xe4
 801a5f8:	ac19      	add	r4, sp, #100	@ 0x64
 801a5fa:	e72d      	b.n	801a458 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x4a0>
 801a5fc:	4613      	mov	r3, r2
 801a5fe:	e744      	b.n	801a48a <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x4d2>
 801a600:	4613      	mov	r3, r2
 801a602:	9e3b      	ldr	r6, [sp, #236]	@ 0xec
 801a604:	469e      	mov	lr, r3
 801a606:	f8dd c0f8 	ldr.w	ip, [sp, #248]	@ 0xf8
 801a60a:	461f      	mov	r7, r3
 801a60c:	ed9d 7a43 	vldr	s14, [sp, #268]	@ 0x10c
 801a610:	f04f 0900 	mov.w	r9, #0
 801a614:	eddd 4a44 	vldr	s9, [sp, #272]	@ 0x110
 801a618:	eddd 7a46 	vldr	s15, [sp, #280]	@ 0x118
 801a61c:	ed9d 4a47 	vldr	s8, [sp, #284]	@ 0x11c
 801a620:	eddd 6a40 	vldr	s13, [sp, #256]	@ 0x100
 801a624:	eddd 3a41 	vldr	s7, [sp, #260]	@ 0x104
 801a628:	993d      	ldr	r1, [sp, #244]	@ 0xf4
 801a62a:	f8dd 80f0 	ldr.w	r8, [sp, #240]	@ 0xf0
 801a62e:	ed9d 5a42 	vldr	s10, [sp, #264]	@ 0x108
 801a632:	eddd 5a45 	vldr	s11, [sp, #276]	@ 0x114
 801a636:	ed9d 6a48 	vldr	s12, [sp, #288]	@ 0x120
 801a63a:	960e      	str	r6, [sp, #56]	@ 0x38
 801a63c:	e9dd 0a39 	ldrd	r0, sl, [sp, #228]	@ 0xe4
 801a640:	2f00      	cmp	r7, #0
 801a642:	d146      	bne.n	801a6d2 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x71a>
 801a644:	449c      	add	ip, r3
 801a646:	1ad7      	subs	r7, r2, r3
 801a648:	f1b9 0f00 	cmp.w	r9, #0
 801a64c:	d009      	beq.n	801a662 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x6aa>
 801a64e:	9039      	str	r0, [sp, #228]	@ 0xe4
 801a650:	913d      	str	r1, [sp, #244]	@ 0xf4
 801a652:	edcd 6a40 	vstr	s13, [sp, #256]	@ 0x100
 801a656:	ed8d 7a43 	vstr	s14, [sp, #268]	@ 0x10c
 801a65a:	edcd 7a46 	vstr	s15, [sp, #280]	@ 0x118
 801a65e:	e9cd c73e 	strd	ip, r7, [sp, #248]	@ 0xf8
 801a662:	991b      	ldr	r1, [sp, #108]	@ 0x6c
 801a664:	f04f 0800 	mov.w	r8, #0
 801a668:	eddd 4a24 	vldr	s9, [sp, #144]	@ 0x90
 801a66c:	910e      	str	r1, [sp, #56]	@ 0x38
 801a66e:	eddd 6a23 	vldr	s13, [sp, #140]	@ 0x8c
 801a672:	ed9d 4a27 	vldr	s8, [sp, #156]	@ 0x9c
 801a676:	ed9d 7a26 	vldr	s14, [sp, #152]	@ 0x98
 801a67a:	eddd 3a21 	vldr	s7, [sp, #132]	@ 0x84
 801a67e:	eddd 7a20 	vldr	s15, [sp, #128]	@ 0x80
 801a682:	ed9d 5a22 	vldr	s10, [sp, #136]	@ 0x88
 801a686:	eddd 5a25 	vldr	s11, [sp, #148]	@ 0x94
 801a68a:	ed9d 6a28 	vldr	s12, [sp, #160]	@ 0xa0
 801a68e:	e9dd 0a19 	ldrd	r0, sl, [sp, #100]	@ 0x64
 801a692:	e9dd c71e 	ldrd	ip, r7, [sp, #120]	@ 0x78
 801a696:	e9dd 911c 	ldrd	r9, r1, [sp, #112]	@ 0x70
 801a69a:	f1be 0f00 	cmp.w	lr, #0
 801a69e:	d030      	beq.n	801a702 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x74a>
 801a6a0:	9e0e      	ldr	r6, [sp, #56]	@ 0x38
 801a6a2:	4450      	add	r0, sl
 801a6a4:	ee76 6aa4 	vadd.f32	s13, s13, s9
 801a6a8:	4431      	add	r1, r6
 801a6aa:	ee37 7a04 	vadd.f32	s14, s14, s8
 801a6ae:	ee77 7aa3 	vadd.f32	s15, s15, s7
 801a6b2:	4549      	cmp	r1, r9
 801a6b4:	db08      	blt.n	801a6c8 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x710>
 801a6b6:	ee77 7a85 	vadd.f32	s15, s15, s10
 801a6ba:	3001      	adds	r0, #1
 801a6bc:	ee76 6aa5 	vadd.f32	s13, s13, s11
 801a6c0:	eba1 0109 	sub.w	r1, r1, r9
 801a6c4:	ee37 7a06 	vadd.f32	s14, s14, s12
 801a6c8:	f10e 3eff 	add.w	lr, lr, #4294967295
 801a6cc:	f04f 0801 	mov.w	r8, #1
 801a6d0:	e7e3      	b.n	801a69a <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x6e2>
 801a6d2:	9e0e      	ldr	r6, [sp, #56]	@ 0x38
 801a6d4:	4450      	add	r0, sl
 801a6d6:	ee37 7a24 	vadd.f32	s14, s14, s9
 801a6da:	4431      	add	r1, r6
 801a6dc:	ee77 7a84 	vadd.f32	s15, s15, s8
 801a6e0:	ee76 6aa3 	vadd.f32	s13, s13, s7
 801a6e4:	4541      	cmp	r1, r8
 801a6e6:	db08      	blt.n	801a6fa <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x742>
 801a6e8:	ee76 6a85 	vadd.f32	s13, s13, s10
 801a6ec:	3001      	adds	r0, #1
 801a6ee:	ee37 7a25 	vadd.f32	s14, s14, s11
 801a6f2:	eba1 0108 	sub.w	r1, r1, r8
 801a6f6:	ee77 7a86 	vadd.f32	s15, s15, s12
 801a6fa:	3f01      	subs	r7, #1
 801a6fc:	f04f 0901 	mov.w	r9, #1
 801a700:	e79e      	b.n	801a640 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x688>
 801a702:	449c      	add	ip, r3
 801a704:	1aff      	subs	r7, r7, r3
 801a706:	f1b8 0f00 	cmp.w	r8, #0
 801a70a:	d009      	beq.n	801a720 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x768>
 801a70c:	9019      	str	r0, [sp, #100]	@ 0x64
 801a70e:	edcd 6a23 	vstr	s13, [sp, #140]	@ 0x8c
 801a712:	ed8d 7a26 	vstr	s14, [sp, #152]	@ 0x98
 801a716:	edcd 7a20 	vstr	s15, [sp, #128]	@ 0x80
 801a71a:	911d      	str	r1, [sp, #116]	@ 0x74
 801a71c:	e9cd c71e 	strd	ip, r7, [sp, #120]	@ 0x78
 801a720:	1ad2      	subs	r2, r2, r3
 801a722:	e6b5      	b.n	801a490 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x4d8>
 801a724:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 801a726:	681b      	ldr	r3, [r3, #0]
 801a728:	b923      	cbnz	r3, 801a734 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x77c>
 801a72a:	4b04      	ldr	r3, [pc, #16]	@ (801a73c <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x784>)
 801a72c:	6818      	ldr	r0, [r3, #0]
 801a72e:	6803      	ldr	r3, [r0, #0]
 801a730:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801a732:	4798      	blx	r3
 801a734:	b05b      	add	sp, #364	@ 0x16c
 801a736:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801a73a:	bf00      	nop
 801a73c:	2400b880 	.word	0x2400b880

0801a740 <_ZN8touchgfx3LCD22WideTextInternalStructC1ERNS_12TextProviderEthPKNS_4FontENS_14WideTextActionE>:
 801a740:	b570      	push	{r4, r5, r6, lr}
 801a742:	4604      	mov	r4, r0
 801a744:	2500      	movs	r5, #0
 801a746:	9804      	ldr	r0, [sp, #16]
 801a748:	7223      	strb	r3, [r4, #8]
 801a74a:	f89d 3014 	ldrb.w	r3, [sp, #20]
 801a74e:	8025      	strh	r5, [r4, #0]
 801a750:	6061      	str	r1, [r4, #4]
 801a752:	7263      	strb	r3, [r4, #9]
 801a754:	60e0      	str	r0, [r4, #12]
 801a756:	8222      	strh	r2, [r4, #16]
 801a758:	8265      	strh	r5, [r4, #18]
 801a75a:	82a5      	strh	r5, [r4, #20]
 801a75c:	82e5      	strh	r5, [r4, #22]
 801a75e:	8325      	strh	r5, [r4, #24]
 801a760:	8365      	strh	r5, [r4, #26]
 801a762:	83a5      	strh	r5, [r4, #28]
 801a764:	77a5      	strb	r5, [r4, #30]
 801a766:	6803      	ldr	r3, [r0, #0]
 801a768:	695b      	ldr	r3, [r3, #20]
 801a76a:	4798      	blx	r3
 801a76c:	4606      	mov	r6, r0
 801a76e:	b1f8      	cbz	r0, 801a7b0 <_ZN8touchgfx3LCD22WideTextInternalStructC1ERNS_12TextProviderEthPKNS_4FontENS_14WideTextActionE+0x70>
 801a770:	68e0      	ldr	r0, [r4, #12]
 801a772:	4631      	mov	r1, r6
 801a774:	6803      	ldr	r3, [r0, #0]
 801a776:	68db      	ldr	r3, [r3, #12]
 801a778:	4798      	blx	r3
 801a77a:	7b43      	ldrb	r3, [r0, #13]
 801a77c:	7a82      	ldrb	r2, [r0, #10]
 801a77e:	4605      	mov	r5, r0
 801a780:	005b      	lsls	r3, r3, #1
 801a782:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 801a786:	4313      	orrs	r3, r2
 801a788:	83a3      	strh	r3, [r4, #28]
 801a78a:	7a63      	ldrb	r3, [r4, #9]
 801a78c:	2b04      	cmp	r3, #4
 801a78e:	d10f      	bne.n	801a7b0 <_ZN8touchgfx3LCD22WideTextInternalStructC1ERNS_12TextProviderEthPKNS_4FontENS_14WideTextActionE+0x70>
 801a790:	68e0      	ldr	r0, [r4, #12]
 801a792:	462a      	mov	r2, r5
 801a794:	4631      	mov	r1, r6
 801a796:	6803      	ldr	r3, [r0, #0]
 801a798:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 801a79a:	4798      	blx	r3
 801a79c:	7b6b      	ldrb	r3, [r5, #13]
 801a79e:	005b      	lsls	r3, r3, #1
 801a7a0:	f403 7280 	and.w	r2, r3, #256	@ 0x100
 801a7a4:	7aab      	ldrb	r3, [r5, #10]
 801a7a6:	4313      	orrs	r3, r2
 801a7a8:	4418      	add	r0, r3
 801a7aa:	8ba3      	ldrh	r3, [r4, #28]
 801a7ac:	4418      	add	r0, r3
 801a7ae:	83a0      	strh	r0, [r4, #28]
 801a7b0:	4620      	mov	r0, r4
 801a7b2:	bd70      	pop	{r4, r5, r6, pc}

0801a7b4 <_ZN8touchgfx3LCD11stringWidthERNS_12TextProviderERKNS_4FontEih>:
 801a7b4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801a7b8:	2400      	movs	r4, #0
 801a7ba:	b085      	sub	sp, #20
 801a7bc:	4681      	mov	r9, r0
 801a7be:	4688      	mov	r8, r1
 801a7c0:	4692      	mov	sl, r2
 801a7c2:	469b      	mov	fp, r3
 801a7c4:	4627      	mov	r7, r4
 801a7c6:	4625      	mov	r5, r4
 801a7c8:	4626      	mov	r6, r4
 801a7ca:	4554      	cmp	r4, sl
 801a7cc:	da2a      	bge.n	801a824 <_ZN8touchgfx3LCD11stringWidthERNS_12TextProviderERKNS_4FontEih+0x70>
 801a7ce:	2300      	movs	r3, #0
 801a7d0:	9303      	str	r3, [sp, #12]
 801a7d2:	f64f 63ff 	movw	r3, #65279	@ 0xfeff
 801a7d6:	429d      	cmp	r5, r3
 801a7d8:	d004      	beq.n	801a7e4 <_ZN8touchgfx3LCD11stringWidthERNS_12TextProviderERKNS_4FontEih+0x30>
 801a7da:	f242 030b 	movw	r3, #8203	@ 0x200b
 801a7de:	429d      	cmp	r5, r3
 801a7e0:	bf18      	it	ne
 801a7e2:	462f      	movne	r7, r5
 801a7e4:	ab03      	add	r3, sp, #12
 801a7e6:	4642      	mov	r2, r8
 801a7e8:	4659      	mov	r1, fp
 801a7ea:	4648      	mov	r0, r9
 801a7ec:	f002 ff82 	bl	801d6f4 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE>
 801a7f0:	4605      	mov	r5, r0
 801a7f2:	b1b8      	cbz	r0, 801a824 <_ZN8touchgfx3LCD11stringWidthERNS_12TextProviderERKNS_4FontEih+0x70>
 801a7f4:	280a      	cmp	r0, #10
 801a7f6:	d015      	beq.n	801a824 <_ZN8touchgfx3LCD11stringWidthERNS_12TextProviderERKNS_4FontEih+0x70>
 801a7f8:	9a03      	ldr	r2, [sp, #12]
 801a7fa:	b18a      	cbz	r2, 801a820 <_ZN8touchgfx3LCD11stringWidthERNS_12TextProviderERKNS_4FontEih+0x6c>
 801a7fc:	7b50      	ldrb	r0, [r2, #13]
 801a7fe:	4639      	mov	r1, r7
 801a800:	7a93      	ldrb	r3, [r2, #10]
 801a802:	0040      	lsls	r0, r0, #1
 801a804:	8895      	ldrh	r5, [r2, #4]
 801a806:	f400 7080 	and.w	r0, r0, #256	@ 0x100
 801a80a:	4303      	orrs	r3, r0
 801a80c:	4640      	mov	r0, r8
 801a80e:	9301      	str	r3, [sp, #4]
 801a810:	f8d8 3000 	ldr.w	r3, [r8]
 801a814:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 801a816:	4798      	blx	r3
 801a818:	9b01      	ldr	r3, [sp, #4]
 801a81a:	4418      	add	r0, r3
 801a81c:	4406      	add	r6, r0
 801a81e:	b2b6      	uxth	r6, r6
 801a820:	3401      	adds	r4, #1
 801a822:	e7d2      	b.n	801a7ca <_ZN8touchgfx3LCD11stringWidthERNS_12TextProviderERKNS_4FontEih+0x16>
 801a824:	4630      	mov	r0, r6
 801a826:	b005      	add	sp, #20
 801a828:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0801a82c <_ZN8touchgfx3LCD10rotateRectERNS_4RectERKS1_NS_12TextRotationE>:
 801a82c:	2a02      	cmp	r2, #2
 801a82e:	b530      	push	{r4, r5, lr}
 801a830:	d011      	beq.n	801a856 <_ZN8touchgfx3LCD10rotateRectERNS_4RectERKS1_NS_12TextRotationE+0x2a>
 801a832:	2a03      	cmp	r2, #3
 801a834:	d01c      	beq.n	801a870 <_ZN8touchgfx3LCD10rotateRectERNS_4RectERKS1_NS_12TextRotationE+0x44>
 801a836:	2a01      	cmp	r2, #1
 801a838:	d10c      	bne.n	801a854 <_ZN8touchgfx3LCD10rotateRectERNS_4RectERKS1_NS_12TextRotationE+0x28>
 801a83a:	888b      	ldrh	r3, [r1, #4]
 801a83c:	f9b0 2004 	ldrsh.w	r2, [r0, #4]
 801a840:	8801      	ldrh	r1, [r0, #0]
 801a842:	1a9b      	subs	r3, r3, r2
 801a844:	8844      	ldrh	r4, [r0, #2]
 801a846:	1a5b      	subs	r3, r3, r1
 801a848:	f9b0 1006 	ldrsh.w	r1, [r0, #6]
 801a84c:	8004      	strh	r4, [r0, #0]
 801a84e:	8043      	strh	r3, [r0, #2]
 801a850:	8081      	strh	r1, [r0, #4]
 801a852:	80c2      	strh	r2, [r0, #6]
 801a854:	bd30      	pop	{r4, r5, pc}
 801a856:	88cb      	ldrh	r3, [r1, #6]
 801a858:	88c2      	ldrh	r2, [r0, #6]
 801a85a:	1a9b      	subs	r3, r3, r2
 801a85c:	8842      	ldrh	r2, [r0, #2]
 801a85e:	1a9b      	subs	r3, r3, r2
 801a860:	888a      	ldrh	r2, [r1, #4]
 801a862:	8881      	ldrh	r1, [r0, #4]
 801a864:	8043      	strh	r3, [r0, #2]
 801a866:	1a52      	subs	r2, r2, r1
 801a868:	8801      	ldrh	r1, [r0, #0]
 801a86a:	1a52      	subs	r2, r2, r1
 801a86c:	8002      	strh	r2, [r0, #0]
 801a86e:	e7f1      	b.n	801a854 <_ZN8touchgfx3LCD10rotateRectERNS_4RectERKS1_NS_12TextRotationE+0x28>
 801a870:	88cb      	ldrh	r3, [r1, #6]
 801a872:	f9b0 2006 	ldrsh.w	r2, [r0, #6]
 801a876:	8841      	ldrh	r1, [r0, #2]
 801a878:	1a9b      	subs	r3, r3, r2
 801a87a:	f9b0 5000 	ldrsh.w	r5, [r0]
 801a87e:	f9b0 4004 	ldrsh.w	r4, [r0, #4]
 801a882:	1a5b      	subs	r3, r3, r1
 801a884:	8045      	strh	r5, [r0, #2]
 801a886:	8082      	strh	r2, [r0, #4]
 801a888:	8003      	strh	r3, [r0, #0]
 801a88a:	80c4      	strh	r4, [r0, #6]
 801a88c:	e7e2      	b.n	801a854 <_ZN8touchgfx3LCD10rotateRectERNS_4RectERKS1_NS_12TextRotationE+0x28>

0801a88e <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib>:
 801a88e:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801a892:	b09f      	sub	sp, #124	@ 0x7c
 801a894:	9116      	str	r1, [sp, #88]	@ 0x58
 801a896:	9317      	str	r3, [sp, #92]	@ 0x5c
 801a898:	9929      	ldr	r1, [sp, #164]	@ 0xa4
 801a89a:	9b29      	ldr	r3, [sp, #164]	@ 0xa4
 801a89c:	8809      	ldrh	r1, [r1, #0]
 801a89e:	889b      	ldrh	r3, [r3, #4]
 801a8a0:	f8dd 80a8 	ldr.w	r8, [sp, #168]	@ 0xa8
 801a8a4:	440b      	add	r3, r1
 801a8a6:	9212      	str	r2, [sp, #72]	@ 0x48
 801a8a8:	f89d 20b8 	ldrb.w	r2, [sp, #184]	@ 0xb8
 801a8ac:	b21b      	sxth	r3, r3
 801a8ae:	9011      	str	r0, [sp, #68]	@ 0x44
 801a8b0:	f89d b0ac 	ldrb.w	fp, [sp, #172]	@ 0xac
 801a8b4:	9310      	str	r3, [sp, #64]	@ 0x40
 801a8b6:	f8d8 3000 	ldr.w	r3, [r8]
 801a8ba:	7a59      	ldrb	r1, [r3, #9]
 801a8bc:	7a1b      	ldrb	r3, [r3, #8]
 801a8be:	9114      	str	r1, [sp, #80]	@ 0x50
 801a8c0:	9315      	str	r3, [sp, #84]	@ 0x54
 801a8c2:	9b28      	ldr	r3, [sp, #160]	@ 0xa0
 801a8c4:	f9b3 5000 	ldrsh.w	r5, [r3]
 801a8c8:	2a00      	cmp	r2, #0
 801a8ca:	d067      	beq.n	801a99c <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x10e>
 801a8cc:	f898 3010 	ldrb.w	r3, [r8, #16]
 801a8d0:	9a2d      	ldr	r2, [sp, #180]	@ 0xb4
 801a8d2:	2b04      	cmp	r3, #4
 801a8d4:	bf14      	ite	ne
 801a8d6:	2301      	movne	r3, #1
 801a8d8:	2302      	moveq	r3, #2
 801a8da:	4413      	add	r3, r2
 801a8dc:	f04f 0900 	mov.w	r9, #0
 801a8e0:	930f      	str	r3, [sp, #60]	@ 0x3c
 801a8e2:	464c      	mov	r4, r9
 801a8e4:	f8cd 9038 	str.w	r9, [sp, #56]	@ 0x38
 801a8e8:	f8cd 9034 	str.w	r9, [sp, #52]	@ 0x34
 801a8ec:	e9dd 320e 	ldrd	r3, r2, [sp, #56]	@ 0x38
 801a8f0:	4293      	cmp	r3, r2
 801a8f2:	f280 808c 	bge.w	801aa0e <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x180>
 801a8f6:	2300      	movs	r3, #0
 801a8f8:	931c      	str	r3, [sp, #112]	@ 0x70
 801a8fa:	f64f 63ff 	movw	r3, #65279	@ 0xfeff
 801a8fe:	429c      	cmp	r4, r3
 801a900:	d006      	beq.n	801a910 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x82>
 801a902:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 801a904:	f242 020b 	movw	r2, #8203	@ 0x200b
 801a908:	4294      	cmp	r4, r2
 801a90a:	bf18      	it	ne
 801a90c:	4623      	movne	r3, r4
 801a90e:	930d      	str	r3, [sp, #52]	@ 0x34
 801a910:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 801a912:	992d      	ldr	r1, [sp, #180]	@ 0xb4
 801a914:	f8d8 2000 	ldr.w	r2, [r8]
 801a918:	428b      	cmp	r3, r1
 801a91a:	db41      	blt.n	801a9a0 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x112>
 801a91c:	6813      	ldr	r3, [r2, #0]
 801a91e:	4610      	mov	r0, r2
 801a920:	695b      	ldr	r3, [r3, #20]
 801a922:	4798      	blx	r3
 801a924:	4604      	mov	r4, r0
 801a926:	f8d8 0000 	ldr.w	r0, [r8]
 801a92a:	aa1d      	add	r2, sp, #116	@ 0x74
 801a92c:	4621      	mov	r1, r4
 801a92e:	6803      	ldr	r3, [r0, #0]
 801a930:	689e      	ldr	r6, [r3, #8]
 801a932:	f10d 036f 	add.w	r3, sp, #111	@ 0x6f
 801a936:	47b0      	blx	r6
 801a938:	901c      	str	r0, [sp, #112]	@ 0x70
 801a93a:	f64f 63ff 	movw	r3, #65279	@ 0xfeff
 801a93e:	429c      	cmp	r4, r3
 801a940:	f000 80ea 	beq.w	801ab18 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x28a>
 801a944:	f242 030b 	movw	r3, #8203	@ 0x200b
 801a948:	429c      	cmp	r4, r3
 801a94a:	f000 80e5 	beq.w	801ab18 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x28a>
 801a94e:	2c00      	cmp	r4, #0
 801a950:	f000 80f7 	beq.w	801ab42 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x2b4>
 801a954:	2c0a      	cmp	r4, #10
 801a956:	d060      	beq.n	801aa1a <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x18c>
 801a958:	9a1c      	ldr	r2, [sp, #112]	@ 0x70
 801a95a:	b36a      	cbz	r2, 801a9b8 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x12a>
 801a95c:	8894      	ldrh	r4, [r2, #4]
 801a95e:	f1bb 0f00 	cmp.w	fp, #0
 801a962:	d03b      	beq.n	801a9dc <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x14e>
 801a964:	f892 900d 	ldrb.w	r9, [r2, #13]
 801a968:	f1bb 0f01 	cmp.w	fp, #1
 801a96c:	ea4f 0949 	mov.w	r9, r9, lsl #1
 801a970:	f409 7380 	and.w	r3, r9, #256	@ 0x100
 801a974:	f892 900a 	ldrb.w	r9, [r2, #10]
 801a978:	ea49 0903 	orr.w	r9, r9, r3
 801a97c:	d134      	bne.n	801a9e8 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x15a>
 801a97e:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 801a980:	eba5 0509 	sub.w	r5, r5, r9
 801a984:	2b00      	cmp	r3, #0
 801a986:	d14f      	bne.n	801aa28 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x19a>
 801a988:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 801a98a:	eb09 0305 	add.w	r3, r9, r5
 801a98e:	4413      	add	r3, r2
 801a990:	9a29      	ldr	r2, [sp, #164]	@ 0xa4
 801a992:	f9b2 2000 	ldrsh.w	r2, [r2]
 801a996:	4293      	cmp	r3, r2
 801a998:	da51      	bge.n	801aa3e <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x1b0>
 801a99a:	e038      	b.n	801aa0e <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x180>
 801a99c:	9b2d      	ldr	r3, [sp, #180]	@ 0xb4
 801a99e:	e79d      	b.n	801a8dc <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x4e>
 801a9a0:	f10d 036f 	add.w	r3, sp, #111	@ 0x6f
 801a9a4:	4659      	mov	r1, fp
 801a9a6:	982c      	ldr	r0, [sp, #176]	@ 0xb0
 801a9a8:	9301      	str	r3, [sp, #4]
 801a9aa:	ab1d      	add	r3, sp, #116	@ 0x74
 801a9ac:	9300      	str	r3, [sp, #0]
 801a9ae:	ab1c      	add	r3, sp, #112	@ 0x70
 801a9b0:	f002 fef8 	bl	801d7a4 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeERPKhRh>
 801a9b4:	4604      	mov	r4, r0
 801a9b6:	e7c0      	b.n	801a93a <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0xac>
 801a9b8:	f8d8 0000 	ldr.w	r0, [r8]
 801a9bc:	6803      	ldr	r3, [r0, #0]
 801a9be:	691b      	ldr	r3, [r3, #16]
 801a9c0:	4798      	blx	r3
 801a9c2:	f64f 63ff 	movw	r3, #65279	@ 0xfeff
 801a9c6:	4298      	cmp	r0, r3
 801a9c8:	f000 80a6 	beq.w	801ab18 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x28a>
 801a9cc:	f242 030b 	movw	r3, #8203	@ 0x200b
 801a9d0:	4298      	cmp	r0, r3
 801a9d2:	f000 80a1 	beq.w	801ab18 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x28a>
 801a9d6:	f1bb 0f00 	cmp.w	fp, #0
 801a9da:	d100      	bne.n	801a9de <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x150>
 801a9dc:	444d      	add	r5, r9
 801a9de:	9a1c      	ldr	r2, [sp, #112]	@ 0x70
 801a9e0:	2a00      	cmp	r2, #0
 801a9e2:	d1bf      	bne.n	801a964 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0xd6>
 801a9e4:	4691      	mov	r9, r2
 801a9e6:	e097      	b.n	801ab18 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x28a>
 801a9e8:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 801a9ea:	2b00      	cmp	r3, #0
 801a9ec:	f000 80ab 	beq.w	801ab46 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x2b8>
 801a9f0:	f1bb 0f00 	cmp.w	fp, #0
 801a9f4:	d118      	bne.n	801aa28 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x19a>
 801a9f6:	f8d8 0000 	ldr.w	r0, [r8]
 801a9fa:	990d      	ldr	r1, [sp, #52]	@ 0x34
 801a9fc:	6803      	ldr	r3, [r0, #0]
 801a9fe:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 801aa00:	4798      	blx	r3
 801aa02:	4405      	add	r5, r0
 801aa04:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 801aa06:	9a10      	ldr	r2, [sp, #64]	@ 0x40
 801aa08:	1aeb      	subs	r3, r5, r3
 801aa0a:	4293      	cmp	r3, r2
 801aa0c:	dd17      	ble.n	801aa3e <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x1b0>
 801aa0e:	2c00      	cmp	r4, #0
 801aa10:	f000 8097 	beq.w	801ab42 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x2b4>
 801aa14:	2c0a      	cmp	r4, #10
 801aa16:	f040 8085 	bne.w	801ab24 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x296>
 801aa1a:	240a      	movs	r4, #10
 801aa1c:	fab4 f084 	clz	r0, r4
 801aa20:	0940      	lsrs	r0, r0, #5
 801aa22:	b01f      	add	sp, #124	@ 0x7c
 801aa24:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801aa28:	f8d8 0000 	ldr.w	r0, [r8]
 801aa2c:	990d      	ldr	r1, [sp, #52]	@ 0x34
 801aa2e:	6803      	ldr	r3, [r0, #0]
 801aa30:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 801aa32:	4798      	blx	r3
 801aa34:	f1bb 0f01 	cmp.w	fp, #1
 801aa38:	eba5 0500 	sub.w	r5, r5, r0
 801aa3c:	d0a4      	beq.n	801a988 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0xfa>
 801aa3e:	981c      	ldr	r0, [sp, #112]	@ 0x70
 801aa40:	9b29      	ldr	r3, [sp, #164]	@ 0xa4
 801aa42:	f990 1009 	ldrsb.w	r1, [r0, #9]
 801aa46:	f9b3 6000 	ldrsh.w	r6, [r3]
 801aa4a:	7b43      	ldrb	r3, [r0, #13]
 801aa4c:	4429      	add	r1, r5
 801aa4e:	015b      	lsls	r3, r3, #5
 801aa50:	f403 7280 	and.w	r2, r3, #256	@ 0x100
 801aa54:	7983      	ldrb	r3, [r0, #6]
 801aa56:	4313      	orrs	r3, r2
 801aa58:	440b      	add	r3, r1
 801aa5a:	42b3      	cmp	r3, r6
 801aa5c:	db5c      	blt.n	801ab18 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x28a>
 801aa5e:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 801aa60:	4299      	cmp	r1, r3
 801aa62:	da59      	bge.n	801ab18 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x28a>
 801aa64:	f8d8 0000 	ldr.w	r0, [r8]
 801aa68:	42ae      	cmp	r6, r5
 801aa6a:	6803      	ldr	r3, [r0, #0]
 801aa6c:	bfcc      	ite	gt
 801aa6e:	1b76      	subgt	r6, r6, r5
 801aa70:	2600      	movle	r6, #0
 801aa72:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801aa74:	bfc8      	it	gt
 801aa76:	b2b6      	uxthgt	r6, r6
 801aa78:	4798      	blx	r3
 801aa7a:	9b1c      	ldr	r3, [sp, #112]	@ 0x70
 801aa7c:	7b5a      	ldrb	r2, [r3, #13]
 801aa7e:	00d1      	lsls	r1, r2, #3
 801aa80:	f401 7780 	and.w	r7, r1, #256	@ 0x100
 801aa84:	7a19      	ldrb	r1, [r3, #8]
 801aa86:	4339      	orrs	r1, r7
 801aa88:	0657      	lsls	r7, r2, #25
 801aa8a:	9f17      	ldr	r7, [sp, #92]	@ 0x5c
 801aa8c:	bf48      	it	mi
 801aa8e:	f5a1 7100 	submi.w	r1, r1, #512	@ 0x200
 801aa92:	4407      	add	r7, r0
 801aa94:	bf48      	it	mi
 801aa96:	b209      	sxthmi	r1, r1
 801aa98:	1a7f      	subs	r7, r7, r1
 801aa9a:	9929      	ldr	r1, [sp, #164]	@ 0xa4
 801aa9c:	b2bf      	uxth	r7, r7
 801aa9e:	f9b1 1002 	ldrsh.w	r1, [r1, #2]
 801aaa2:	fa0f fa87 	sxth.w	sl, r7
 801aaa6:	4551      	cmp	r1, sl
 801aaa8:	dd3a      	ble.n	801ab20 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x292>
 801aaaa:	0112      	lsls	r2, r2, #4
 801aaac:	79d8      	ldrb	r0, [r3, #7]
 801aaae:	f402 7280 	and.w	r2, r2, #256	@ 0x100
 801aab2:	4302      	orrs	r2, r0
 801aab4:	4492      	add	sl, r2
 801aab6:	4551      	cmp	r1, sl
 801aab8:	dc2e      	bgt.n	801ab18 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x28a>
 801aaba:	1bcf      	subs	r7, r1, r7
 801aabc:	468a      	mov	sl, r1
 801aabe:	b2bf      	uxth	r7, r7
 801aac0:	9319      	str	r3, [sp, #100]	@ 0x64
 801aac2:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 801aac4:	f8d8 0000 	ldr.w	r0, [r8]
 801aac8:	681a      	ldr	r2, [r3, #0]
 801aaca:	6801      	ldr	r1, [r0, #0]
 801aacc:	6c53      	ldr	r3, [r2, #68]	@ 0x44
 801aace:	9a1d      	ldr	r2, [sp, #116]	@ 0x74
 801aad0:	9313      	str	r3, [sp, #76]	@ 0x4c
 801aad2:	9218      	str	r2, [sp, #96]	@ 0x60
 801aad4:	6b89      	ldr	r1, [r1, #56]	@ 0x38
 801aad6:	4788      	blx	r1
 801aad8:	f898 1006 	ldrb.w	r1, [r8, #6]
 801aadc:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 801aade:	910b      	str	r1, [sp, #44]	@ 0x2c
 801aae0:	f898 100e 	ldrb.w	r1, [r8, #14]
 801aae4:	9a18      	ldr	r2, [sp, #96]	@ 0x60
 801aae6:	910a      	str	r1, [sp, #40]	@ 0x28
 801aae8:	f89d 106f 	ldrb.w	r1, [sp, #111]	@ 0x6f
 801aaec:	9109      	str	r1, [sp, #36]	@ 0x24
 801aaee:	f8d8 1008 	ldr.w	r1, [r8, #8]
 801aaf2:	9305      	str	r3, [sp, #20]
 801aaf4:	9b29      	ldr	r3, [sp, #164]	@ 0xa4
 801aaf6:	9206      	str	r2, [sp, #24]
 801aaf8:	e9cd a601 	strd	sl, r6, [sp, #4]
 801aafc:	442e      	add	r6, r5
 801aafe:	e9cd 7303 	strd	r7, r3, [sp, #12]
 801ab02:	b236      	sxth	r6, r6
 801ab04:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 801ab06:	e9cd 0107 	strd	r0, r1, [sp, #28]
 801ab0a:	9600      	str	r6, [sp, #0]
 801ab0c:	9916      	ldr	r1, [sp, #88]	@ 0x58
 801ab0e:	681a      	ldr	r2, [r3, #0]
 801ab10:	9811      	ldr	r0, [sp, #68]	@ 0x44
 801ab12:	685b      	ldr	r3, [r3, #4]
 801ab14:	9e13      	ldr	r6, [sp, #76]	@ 0x4c
 801ab16:	47b0      	blx	r6
 801ab18:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 801ab1a:	3301      	adds	r3, #1
 801ab1c:	930e      	str	r3, [sp, #56]	@ 0x38
 801ab1e:	e6e5      	b.n	801a8ec <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x5e>
 801ab20:	2700      	movs	r7, #0
 801ab22:	e7cd      	b.n	801aac0 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x232>
 801ab24:	9d0e      	ldr	r5, [sp, #56]	@ 0x38
 801ab26:	3501      	adds	r5, #1
 801ab28:	9b2d      	ldr	r3, [sp, #180]	@ 0xb4
 801ab2a:	429d      	cmp	r5, r3
 801ab2c:	f6bf af76 	bge.w	801aa1c <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x18e>
 801ab30:	4659      	mov	r1, fp
 801ab32:	982c      	ldr	r0, [sp, #176]	@ 0xb0
 801ab34:	f7ef f8fe 	bl	8009d34 <_ZN8touchgfx12TextProvider15getNextLigatureEh>
 801ab38:	4604      	mov	r4, r0
 801ab3a:	b110      	cbz	r0, 801ab42 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x2b4>
 801ab3c:	280a      	cmp	r0, #10
 801ab3e:	d1f2      	bne.n	801ab26 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x298>
 801ab40:	e76b      	b.n	801aa1a <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x18c>
 801ab42:	2400      	movs	r4, #0
 801ab44:	e76a      	b.n	801aa1c <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x18e>
 801ab46:	f1bb 0f00 	cmp.w	fp, #0
 801ab4a:	f43f af5b 	beq.w	801aa04 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x176>
 801ab4e:	e776      	b.n	801aa3e <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x1b0>

0801ab50 <_ZN8touchgfx3LCD22WideTextInternalStruct7addWordEttt>:
 801ab50:	b530      	push	{r4, r5, lr}
 801ab52:	8a44      	ldrh	r4, [r0, #18]
 801ab54:	8ac5      	ldrh	r5, [r0, #22]
 801ab56:	82c3      	strh	r3, [r0, #22]
 801ab58:	442c      	add	r4, r5
 801ab5a:	1ae4      	subs	r4, r4, r3
 801ab5c:	8b03      	ldrh	r3, [r0, #24]
 801ab5e:	8244      	strh	r4, [r0, #18]
 801ab60:	8a84      	ldrh	r4, [r0, #20]
 801ab62:	4422      	add	r2, r4
 801ab64:	440c      	add	r4, r1
 801ab66:	1a59      	subs	r1, r3, r1
 801ab68:	8342      	strh	r2, [r0, #26]
 801ab6a:	8284      	strh	r4, [r0, #20]
 801ab6c:	8301      	strh	r1, [r0, #24]
 801ab6e:	bd30      	pop	{r4, r5, pc}

0801ab70 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb>:
 801ab70:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801ab74:	7a43      	ldrb	r3, [r0, #9]
 801ab76:	b087      	sub	sp, #28
 801ab78:	4604      	mov	r4, r0
 801ab7a:	460f      	mov	r7, r1
 801ab7c:	1eda      	subs	r2, r3, #3
 801ab7e:	b2d2      	uxtb	r2, r2
 801ab80:	2900      	cmp	r1, #0
 801ab82:	d036      	beq.n	801abf2 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x82>
 801ab84:	2a01      	cmp	r2, #1
 801ab86:	d932      	bls.n	801abee <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x7e>
 801ab88:	1e58      	subs	r0, r3, #1
 801ab8a:	f1d0 0b00 	rsbs	fp, r0, #0
 801ab8e:	eb4b 0b00 	adc.w	fp, fp, r0
 801ab92:	1e99      	subs	r1, r3, #2
 801ab94:	424b      	negs	r3, r1
 801ab96:	414b      	adcs	r3, r1
 801ab98:	9303      	str	r3, [sp, #12]
 801ab9a:	2300      	movs	r3, #0
 801ab9c:	e9cd 3301 	strd	r3, r3, [sp, #4]
 801aba0:	2500      	movs	r5, #0
 801aba2:	f242 0a0b 	movw	sl, #8203	@ 0x200b
 801aba6:	46a9      	mov	r9, r5
 801aba8:	8265      	strh	r5, [r4, #18]
 801abaa:	82a5      	strh	r5, [r4, #20]
 801abac:	2300      	movs	r3, #0
 801abae:	9305      	str	r3, [sp, #20]
 801abb0:	8823      	ldrh	r3, [r4, #0]
 801abb2:	2b20      	cmp	r3, #32
 801abb4:	d02b      	beq.n	801ac0e <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x9e>
 801abb6:	eba3 020a 	sub.w	r2, r3, sl
 801abba:	4256      	negs	r6, r2
 801abbc:	4156      	adcs	r6, r2
 801abbe:	f64f 62ff 	movw	r2, #65279	@ 0xfeff
 801abc2:	4293      	cmp	r3, r2
 801abc4:	d004      	beq.n	801abd0 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x60>
 801abc6:	4553      	cmp	r3, sl
 801abc8:	bf16      	itet	ne
 801abca:	4699      	movne	r9, r3
 801abcc:	2601      	moveq	r6, #1
 801abce:	2600      	movne	r6, #0
 801abd0:	ab05      	add	r3, sp, #20
 801abd2:	68e2      	ldr	r2, [r4, #12]
 801abd4:	7a21      	ldrb	r1, [r4, #8]
 801abd6:	6860      	ldr	r0, [r4, #4]
 801abd8:	f002 fd8c 	bl	801d6f4 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE>
 801abdc:	8020      	strh	r0, [r4, #0]
 801abde:	b9c8      	cbnz	r0, 801ac14 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0xa4>
 801abe0:	8b22      	ldrh	r2, [r4, #24]
 801abe2:	2300      	movs	r3, #0
 801abe4:	4611      	mov	r1, r2
 801abe6:	4620      	mov	r0, r4
 801abe8:	f7ff ffb2 	bl	801ab50 <_ZN8touchgfx3LCD22WideTextInternalStruct7addWordEttt>
 801abec:	e066      	b.n	801acbc <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x14c>
 801abee:	468b      	mov	fp, r1
 801abf0:	e7cf      	b.n	801ab92 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x22>
 801abf2:	3b01      	subs	r3, #1
 801abf4:	2a01      	cmp	r2, #1
 801abf6:	9103      	str	r1, [sp, #12]
 801abf8:	468b      	mov	fp, r1
 801abfa:	bf8c      	ite	hi
 801abfc:	2200      	movhi	r2, #0
 801abfe:	2201      	movls	r2, #1
 801ac00:	2b01      	cmp	r3, #1
 801ac02:	9202      	str	r2, [sp, #8]
 801ac04:	bf8c      	ite	hi
 801ac06:	2300      	movhi	r3, #0
 801ac08:	2301      	movls	r3, #1
 801ac0a:	9301      	str	r3, [sp, #4]
 801ac0c:	e7c8      	b.n	801aba0 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x30>
 801ac0e:	4699      	mov	r9, r3
 801ac10:	2601      	movs	r6, #1
 801ac12:	e7dd      	b.n	801abd0 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x60>
 801ac14:	8ae3      	ldrh	r3, [r4, #22]
 801ac16:	280a      	cmp	r0, #10
 801ac18:	f103 0301 	add.w	r3, r3, #1
 801ac1c:	82e3      	strh	r3, [r4, #22]
 801ac1e:	d0df      	beq.n	801abe0 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x70>
 801ac20:	9a05      	ldr	r2, [sp, #20]
 801ac22:	bb42      	cbnz	r2, 801ac76 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x106>
 801ac24:	f64f 63ff 	movw	r3, #65279	@ 0xfeff
 801ac28:	4298      	cmp	r0, r3
 801ac2a:	d001      	beq.n	801ac30 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0xc0>
 801ac2c:	4550      	cmp	r0, sl
 801ac2e:	d1bd      	bne.n	801abac <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x3c>
 801ac30:	8823      	ldrh	r3, [r4, #0]
 801ac32:	8b21      	ldrh	r1, [r4, #24]
 801ac34:	2b20      	cmp	r3, #32
 801ac36:	d001      	beq.n	801ac3c <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0xcc>
 801ac38:	4553      	cmp	r3, sl
 801ac3a:	d131      	bne.n	801aca0 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x130>
 801ac3c:	2e00      	cmp	r6, #0
 801ac3e:	bf0a      	itet	eq
 801ac40:	460d      	moveq	r5, r1
 801ac42:	4630      	movne	r0, r6
 801ac44:	2001      	moveq	r0, #1
 801ac46:	440a      	add	r2, r1
 801ac48:	8aa3      	ldrh	r3, [r4, #20]
 801ac4a:	f8b4 c010 	ldrh.w	ip, [r4, #16]
 801ac4e:	b292      	uxth	r2, r2
 801ac50:	8322      	strh	r2, [r4, #24]
 801ac52:	4413      	add	r3, r2
 801ac54:	2f00      	cmp	r7, #0
 801ac56:	d03a      	beq.n	801acce <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x15e>
 801ac58:	f1bb 0f00 	cmp.w	fp, #0
 801ac5c:	d102      	bne.n	801ac64 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0xf4>
 801ac5e:	9903      	ldr	r1, [sp, #12]
 801ac60:	b301      	cbz	r1, 801aca4 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x134>
 801ac62:	b1f8      	cbz	r0, 801aca4 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x134>
 801ac64:	8ba1      	ldrh	r1, [r4, #28]
 801ac66:	4419      	add	r1, r3
 801ac68:	458c      	cmp	ip, r1
 801ac6a:	da2a      	bge.n	801acc2 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x152>
 801ac6c:	8a61      	ldrh	r1, [r4, #18]
 801ac6e:	b341      	cbz	r1, 801acc2 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x152>
 801ac70:	4563      	cmp	r3, ip
 801ac72:	dd9b      	ble.n	801abac <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x3c>
 801ac74:	e01c      	b.n	801acb0 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x140>
 801ac76:	8893      	ldrh	r3, [r2, #4]
 801ac78:	4649      	mov	r1, r9
 801ac7a:	8023      	strh	r3, [r4, #0]
 801ac7c:	f892 800d 	ldrb.w	r8, [r2, #13]
 801ac80:	ea4f 0848 	mov.w	r8, r8, lsl #1
 801ac84:	f408 7080 	and.w	r0, r8, #256	@ 0x100
 801ac88:	f892 800a 	ldrb.w	r8, [r2, #10]
 801ac8c:	ea48 0800 	orr.w	r8, r8, r0
 801ac90:	68e0      	ldr	r0, [r4, #12]
 801ac92:	6803      	ldr	r3, [r0, #0]
 801ac94:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 801ac96:	4798      	blx	r3
 801ac98:	eb08 0200 	add.w	r2, r8, r0
 801ac9c:	b292      	uxth	r2, r2
 801ac9e:	e7c7      	b.n	801ac30 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0xc0>
 801aca0:	2000      	movs	r0, #0
 801aca2:	e7d0      	b.n	801ac46 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0xd6>
 801aca4:	4563      	cmp	r3, ip
 801aca6:	dd81      	ble.n	801abac <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x3c>
 801aca8:	8a63      	ldrh	r3, [r4, #18]
 801acaa:	2b00      	cmp	r3, #0
 801acac:	f43f af7e 	beq.w	801abac <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x3c>
 801acb0:	2301      	movs	r3, #1
 801acb2:	8ba2      	ldrh	r2, [r4, #28]
 801acb4:	77a3      	strb	r3, [r4, #30]
 801acb6:	8b63      	ldrh	r3, [r4, #26]
 801acb8:	4413      	add	r3, r2
 801acba:	8363      	strh	r3, [r4, #26]
 801acbc:	b007      	add	sp, #28
 801acbe:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801acc2:	2300      	movs	r3, #0
 801acc4:	4611      	mov	r1, r2
 801acc6:	4620      	mov	r0, r4
 801acc8:	f7ff ff42 	bl	801ab50 <_ZN8touchgfx3LCD22WideTextInternalStruct7addWordEttt>
 801accc:	e76e      	b.n	801abac <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x3c>
 801acce:	4563      	cmp	r3, ip
 801acd0:	dd14      	ble.n	801acfc <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x18c>
 801acd2:	9b02      	ldr	r3, [sp, #8]
 801acd4:	b113      	cbz	r3, 801acdc <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x16c>
 801acd6:	2301      	movs	r3, #1
 801acd8:	460a      	mov	r2, r1
 801acda:	e783      	b.n	801abe4 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x74>
 801acdc:	9b01      	ldr	r3, [sp, #4]
 801acde:	2b00      	cmp	r3, #0
 801ace0:	f43f af64 	beq.w	801abac <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x3c>
 801ace4:	2800      	cmp	r0, #0
 801ace6:	f47f af61 	bne.w	801abac <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x3c>
 801acea:	b116      	cbz	r6, 801acf2 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x182>
 801acec:	2301      	movs	r3, #1
 801acee:	462a      	mov	r2, r5
 801acf0:	e779      	b.n	801abe6 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x76>
 801acf2:	8a63      	ldrh	r3, [r4, #18]
 801acf4:	2b00      	cmp	r3, #0
 801acf6:	f43f af59 	beq.w	801abac <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x3c>
 801acfa:	e7df      	b.n	801acbc <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x14c>
 801acfc:	2800      	cmp	r0, #0
 801acfe:	f47f af55 	bne.w	801abac <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x3c>
 801ad02:	2e00      	cmp	r6, #0
 801ad04:	f43f af52 	beq.w	801abac <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x3c>
 801ad08:	2301      	movs	r3, #1
 801ad0a:	462a      	mov	r2, r5
 801ad0c:	e7db      	b.n	801acc6 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x156>

0801ad0e <_ZN8touchgfx3LCD11getNumLinesERNS_12TextProviderENS_14WideTextActionEhPKNS_4FontEs>:
 801ad0e:	b530      	push	{r4, r5, lr}
 801ad10:	4605      	mov	r5, r0
 801ad12:	b08b      	sub	sp, #44	@ 0x2c
 801ad14:	b191      	cbz	r1, 801ad3c <_ZN8touchgfx3LCD11getNumLinesERNS_12TextProviderENS_14WideTextActionEhPKNS_4FontEs+0x2e>
 801ad16:	2401      	movs	r4, #1
 801ad18:	e9cd 3100 	strd	r3, r1, [sp]
 801ad1c:	4613      	mov	r3, r2
 801ad1e:	4601      	mov	r1, r0
 801ad20:	f8bd 2038 	ldrh.w	r2, [sp, #56]	@ 0x38
 801ad24:	a802      	add	r0, sp, #8
 801ad26:	f7ff fd0b 	bl	801a740 <_ZN8touchgfx3LCD22WideTextInternalStructC1ERNS_12TextProviderEthPKNS_4FontENS_14WideTextActionE>
 801ad2a:	2100      	movs	r1, #0
 801ad2c:	a802      	add	r0, sp, #8
 801ad2e:	f7ff ff1f 	bl	801ab70 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb>
 801ad32:	f8bd 3008 	ldrh.w	r3, [sp, #8]
 801ad36:	b163      	cbz	r3, 801ad52 <_ZN8touchgfx3LCD11getNumLinesERNS_12TextProviderENS_14WideTextActionEhPKNS_4FontEs+0x44>
 801ad38:	3401      	adds	r4, #1
 801ad3a:	e7f6      	b.n	801ad2a <_ZN8touchgfx3LCD11getNumLinesERNS_12TextProviderENS_14WideTextActionEhPKNS_4FontEs+0x1c>
 801ad3c:	2401      	movs	r4, #1
 801ad3e:	f002 fdd3 	bl	801d8e8 <_ZN8touchgfx12TextProvider11getNextCharEv>
 801ad42:	280a      	cmp	r0, #10
 801ad44:	4628      	mov	r0, r5
 801ad46:	bf08      	it	eq
 801ad48:	3401      	addeq	r4, #1
 801ad4a:	f002 fdcd 	bl	801d8e8 <_ZN8touchgfx12TextProvider11getNextCharEv>
 801ad4e:	2800      	cmp	r0, #0
 801ad50:	d1f7      	bne.n	801ad42 <_ZN8touchgfx3LCD11getNumLinesERNS_12TextProviderENS_14WideTextActionEhPKNS_4FontEs+0x34>
 801ad52:	b2a0      	uxth	r0, r4
 801ad54:	b00b      	add	sp, #44	@ 0x2c
 801ad56:	bd30      	pop	{r4, r5, pc}

0801ad58 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list>:
 801ad58:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801ad5c:	b0e5      	sub	sp, #404	@ 0x194
 801ad5e:	4689      	mov	r9, r1
 801ad60:	461c      	mov	r4, r3
 801ad62:	f8dd a1b8 	ldr.w	sl, [sp, #440]	@ 0x1b8
 801ad66:	900a      	str	r0, [sp, #40]	@ 0x28
 801ad68:	f1ba 0f00 	cmp.w	sl, #0
 801ad6c:	f000 80b4 	beq.w	801aed8 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x180>
 801ad70:	681b      	ldr	r3, [r3, #0]
 801ad72:	2b00      	cmp	r3, #0
 801ad74:	f000 80b0 	beq.w	801aed8 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x180>
 801ad78:	7ba3      	ldrb	r3, [r4, #14]
 801ad7a:	2b00      	cmp	r3, #0
 801ad7c:	f000 80ac 	beq.w	801aed8 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x180>
 801ad80:	f10d 0834 	add.w	r8, sp, #52	@ 0x34
 801ad84:	6810      	ldr	r0, [r2, #0]
 801ad86:	6851      	ldr	r1, [r2, #4]
 801ad88:	2500      	movs	r5, #0
 801ad8a:	4643      	mov	r3, r8
 801ad8c:	f9b9 2004 	ldrsh.w	r2, [r9, #4]
 801ad90:	950f      	str	r5, [sp, #60]	@ 0x3c
 801ad92:	af19      	add	r7, sp, #100	@ 0x64
 801ad94:	f8ad 2040 	strh.w	r2, [sp, #64]	@ 0x40
 801ad98:	79a2      	ldrb	r2, [r4, #6]
 801ad9a:	c303      	stmia	r3!, {r0, r1}
 801ad9c:	f9b9 3006 	ldrsh.w	r3, [r9, #6]
 801ada0:	a90f      	add	r1, sp, #60	@ 0x3c
 801ada2:	4640      	mov	r0, r8
 801ada4:	f8ad 3042 	strh.w	r3, [sp, #66]	@ 0x42
 801ada8:	f7ff fd40 	bl	801a82c <_ZN8touchgfx3LCD10rotateRectERNS_4RectERKS1_NS_12TextRotationE>
 801adac:	a90f      	add	r1, sp, #60	@ 0x3c
 801adae:	79a2      	ldrb	r2, [r4, #6]
 801adb0:	4608      	mov	r0, r1
 801adb2:	f7ff fd3b 	bl	801a82c <_ZN8touchgfx3LCD10rotateRectERNS_4RectERKS1_NS_12TextRotationE>
 801adb6:	4638      	mov	r0, r7
 801adb8:	f002 f948 	bl	801d04c <_ZN8touchgfx12TextProviderC1Ev>
 801adbc:	6820      	ldr	r0, [r4, #0]
 801adbe:	6803      	ldr	r3, [r0, #0]
 801adc0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 801adc2:	4798      	blx	r3
 801adc4:	4606      	mov	r6, r0
 801adc6:	6820      	ldr	r0, [r4, #0]
 801adc8:	6803      	ldr	r3, [r0, #0]
 801adca:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 801adcc:	4798      	blx	r3
 801adce:	4633      	mov	r3, r6
 801add0:	9000      	str	r0, [sp, #0]
 801add2:	4651      	mov	r1, sl
 801add4:	9a6f      	ldr	r2, [sp, #444]	@ 0x1bc
 801add6:	4638      	mov	r0, r7
 801add8:	f002 f98b 	bl	801d0f2 <_ZN8touchgfx12TextProvider10initializeEPKtSt9__va_listS2_PKNS_24FontContextualFormsTableE>
 801addc:	7923      	ldrb	r3, [r4, #4]
 801adde:	6820      	ldr	r0, [r4, #0]
 801ade0:	9308      	str	r3, [sp, #32]
 801ade2:	6803      	ldr	r3, [r0, #0]
 801ade4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 801ade6:	4798      	blx	r3
 801ade8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801adec:	181e      	adds	r6, r3, r0
 801adee:	42ae      	cmp	r6, r5
 801adf0:	dd06      	ble.n	801ae00 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0xa8>
 801adf2:	f9b8 2002 	ldrsh.w	r2, [r8, #2]
 801adf6:	4282      	cmp	r2, r0
 801adf8:	bfa4      	itt	ge
 801adfa:	189d      	addge	r5, r3, r2
 801adfc:	fb95 f5f6 	sdivge	r5, r5, r6
 801ae00:	a832      	add	r0, sp, #200	@ 0xc8
 801ae02:	f002 f923 	bl	801d04c <_ZN8touchgfx12TextProviderC1Ev>
 801ae06:	7c23      	ldrb	r3, [r4, #16]
 801ae08:	b17b      	cbz	r3, 801ae2a <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0xd2>
 801ae0a:	6820      	ldr	r0, [r4, #0]
 801ae0c:	6803      	ldr	r3, [r0, #0]
 801ae0e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 801ae10:	4798      	blx	r3
 801ae12:	4683      	mov	fp, r0
 801ae14:	6820      	ldr	r0, [r4, #0]
 801ae16:	6803      	ldr	r3, [r0, #0]
 801ae18:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 801ae1a:	4798      	blx	r3
 801ae1c:	465b      	mov	r3, fp
 801ae1e:	9000      	str	r0, [sp, #0]
 801ae20:	4651      	mov	r1, sl
 801ae22:	9a6f      	ldr	r2, [sp, #444]	@ 0x1bc
 801ae24:	a832      	add	r0, sp, #200	@ 0xc8
 801ae26:	f002 f964 	bl	801d0f2 <_ZN8touchgfx12TextProvider10initializeEPKtSt9__va_listS2_PKNS_24FontContextualFormsTableE>
 801ae2a:	7be1      	ldrb	r1, [r4, #15]
 801ae2c:	a811      	add	r0, sp, #68	@ 0x44
 801ae2e:	f8bd 2040 	ldrh.w	r2, [sp, #64]	@ 0x40
 801ae32:	7963      	ldrb	r3, [r4, #5]
 801ae34:	1a52      	subs	r2, r2, r1
 801ae36:	7c21      	ldrb	r1, [r4, #16]
 801ae38:	9101      	str	r1, [sp, #4]
 801ae3a:	b292      	uxth	r2, r2
 801ae3c:	6821      	ldr	r1, [r4, #0]
 801ae3e:	9100      	str	r1, [sp, #0]
 801ae40:	a932      	add	r1, sp, #200	@ 0xc8
 801ae42:	f7ff fc7d 	bl	801a740 <_ZN8touchgfx3LCD22WideTextInternalStructC1ERNS_12TextProviderEthPKNS_4FontENS_14WideTextActionE>
 801ae46:	7c23      	ldrb	r3, [r4, #16]
 801ae48:	b9bb      	cbnz	r3, 801ae7a <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x122>
 801ae4a:	fa1f fa86 	uxth.w	sl, r6
 801ae4e:	2d00      	cmp	r5, #0
 801ae50:	dd45      	ble.n	801aede <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x186>
 801ae52:	4638      	mov	r0, r7
 801ae54:	f002 fd48 	bl	801d8e8 <_ZN8touchgfx12TextProvider11getNextCharEv>
 801ae58:	2800      	cmp	r0, #0
 801ae5a:	d03d      	beq.n	801aed8 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x180>
 801ae5c:	280a      	cmp	r0, #10
 801ae5e:	d1f6      	bne.n	801ae4e <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0xf6>
 801ae60:	f8bd 303e 	ldrh.w	r3, [sp, #62]	@ 0x3e
 801ae64:	3d01      	subs	r5, #1
 801ae66:	4453      	add	r3, sl
 801ae68:	f8ad 303e 	strh.w	r3, [sp, #62]	@ 0x3e
 801ae6c:	f8bd 3042 	ldrh.w	r3, [sp, #66]	@ 0x42
 801ae70:	eba3 030a 	sub.w	r3, r3, sl
 801ae74:	f8ad 3042 	strh.w	r3, [sp, #66]	@ 0x42
 801ae78:	e7e9      	b.n	801ae4e <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0xf6>
 801ae7a:	0073      	lsls	r3, r6, #1
 801ae7c:	f64f 7bff 	movw	fp, #65535	@ 0xffff
 801ae80:	fa1f fa86 	uxth.w	sl, r6
 801ae84:	9309      	str	r3, [sp, #36]	@ 0x24
 801ae86:	2d00      	cmp	r5, #0
 801ae88:	dd29      	ble.n	801aede <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x186>
 801ae8a:	f9bd 1042 	ldrsh.w	r1, [sp, #66]	@ 0x42
 801ae8e:	a811      	add	r0, sp, #68	@ 0x44
 801ae90:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801ae92:	428b      	cmp	r3, r1
 801ae94:	bfd4      	ite	le
 801ae96:	2100      	movle	r1, #0
 801ae98:	2101      	movgt	r1, #1
 801ae9a:	f7ff fe69 	bl	801ab70 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb>
 801ae9e:	f8bd 3056 	ldrh.w	r3, [sp, #86]	@ 0x56
 801aea2:	3b01      	subs	r3, #1
 801aea4:	b29b      	uxth	r3, r3
 801aea6:	455b      	cmp	r3, fp
 801aea8:	930b      	str	r3, [sp, #44]	@ 0x2c
 801aeaa:	d005      	beq.n	801aeb8 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x160>
 801aeac:	7961      	ldrb	r1, [r4, #5]
 801aeae:	4638      	mov	r0, r7
 801aeb0:	f7ee ff40 	bl	8009d34 <_ZN8touchgfx12TextProvider15getNextLigatureEh>
 801aeb4:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 801aeb6:	e7f4      	b.n	801aea2 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x14a>
 801aeb8:	f8bd 303e 	ldrh.w	r3, [sp, #62]	@ 0x3e
 801aebc:	3d01      	subs	r5, #1
 801aebe:	4453      	add	r3, sl
 801aec0:	f8ad 303e 	strh.w	r3, [sp, #62]	@ 0x3e
 801aec4:	f8bd 3042 	ldrh.w	r3, [sp, #66]	@ 0x42
 801aec8:	eba3 030a 	sub.w	r3, r3, sl
 801aecc:	f8ad 3042 	strh.w	r3, [sp, #66]	@ 0x42
 801aed0:	f8bd 3044 	ldrh.w	r3, [sp, #68]	@ 0x44
 801aed4:	2b00      	cmp	r3, #0
 801aed6:	d1d6      	bne.n	801ae86 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x12e>
 801aed8:	b065      	add	sp, #404	@ 0x194
 801aeda:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801aede:	ea4f 0a46 	mov.w	sl, r6, lsl #1
 801aee2:	ad4b      	add	r5, sp, #300	@ 0x12c
 801aee4:	f04f 0b00 	mov.w	fp, #0
 801aee8:	7c23      	ldrb	r3, [r4, #16]
 801aeea:	2b00      	cmp	r3, #0
 801aeec:	d067      	beq.n	801afbe <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x266>
 801aeee:	f9bd 1042 	ldrsh.w	r1, [sp, #66]	@ 0x42
 801aef2:	a811      	add	r0, sp, #68	@ 0x44
 801aef4:	458a      	cmp	sl, r1
 801aef6:	bfd4      	ite	le
 801aef8:	2100      	movle	r1, #0
 801aefa:	2101      	movgt	r1, #1
 801aefc:	f7ff fe38 	bl	801ab70 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb>
 801af00:	9b08      	ldr	r3, [sp, #32]
 801af02:	2b00      	cmp	r3, #0
 801af04:	d056      	beq.n	801afb4 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x25c>
 801af06:	7c23      	ldrb	r3, [r4, #16]
 801af08:	2264      	movs	r2, #100	@ 0x64
 801af0a:	4639      	mov	r1, r7
 801af0c:	4628      	mov	r0, r5
 801af0e:	9309      	str	r3, [sp, #36]	@ 0x24
 801af10:	f010 f83d 	bl	802af8e <memcpy>
 801af14:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801af16:	2b00      	cmp	r3, #0
 801af18:	d059      	beq.n	801afce <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x276>
 801af1a:	f9bd 305e 	ldrsh.w	r3, [sp, #94]	@ 0x5e
 801af1e:	7922      	ldrb	r2, [r4, #4]
 801af20:	2a01      	cmp	r2, #1
 801af22:	d13d      	bne.n	801afa0 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x248>
 801af24:	f9bd 0040 	ldrsh.w	r0, [sp, #64]	@ 0x40
 801af28:	1ac0      	subs	r0, r0, r3
 801af2a:	2302      	movs	r3, #2
 801af2c:	fb90 f0f3 	sdiv	r0, r0, r3
 801af30:	b200      	sxth	r0, r0
 801af32:	f8bd 303c 	ldrh.w	r3, [sp, #60]	@ 0x3c
 801af36:	4418      	add	r0, r3
 801af38:	7c23      	ldrb	r3, [r4, #16]
 801af3a:	f8ad 012c 	strh.w	r0, [sp, #300]	@ 0x12c
 801af3e:	2b00      	cmp	r3, #0
 801af40:	d03a      	beq.n	801afb8 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x260>
 801af42:	f8bd 2056 	ldrh.w	r2, [sp, #86]	@ 0x56
 801af46:	f89d 1062 	ldrb.w	r1, [sp, #98]	@ 0x62
 801af4a:	f9bd 303e 	ldrsh.w	r3, [sp, #62]	@ 0x3e
 801af4e:	9500      	str	r5, [sp, #0]
 801af50:	980a      	ldr	r0, [sp, #40]	@ 0x28
 801af52:	e9cd 2105 	strd	r2, r1, [sp, #20]
 801af56:	e9cd b703 	strd	fp, r7, [sp, #12]
 801af5a:	e9cd 8401 	strd	r8, r4, [sp, #4]
 801af5e:	464a      	mov	r2, r9
 801af60:	2100      	movs	r1, #0
 801af62:	f7ff fc94 	bl	801a88e <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib>
 801af66:	2800      	cmp	r0, #0
 801af68:	d1b6      	bne.n	801aed8 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x180>
 801af6a:	b2b2      	uxth	r2, r6
 801af6c:	f8bd 303e 	ldrh.w	r3, [sp, #62]	@ 0x3e
 801af70:	4611      	mov	r1, r2
 801af72:	4413      	add	r3, r2
 801af74:	f8bd 2042 	ldrh.w	r2, [sp, #66]	@ 0x42
 801af78:	b21b      	sxth	r3, r3
 801af7a:	1a52      	subs	r2, r2, r1
 801af7c:	7c21      	ldrb	r1, [r4, #16]
 801af7e:	f8ad 303e 	strh.w	r3, [sp, #62]	@ 0x3e
 801af82:	b212      	sxth	r2, r2
 801af84:	f8ad 2042 	strh.w	r2, [sp, #66]	@ 0x42
 801af88:	b109      	cbz	r1, 801af8e <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x236>
 801af8a:	42b2      	cmp	r2, r6
 801af8c:	dba4      	blt.n	801aed8 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x180>
 801af8e:	f8b8 2006 	ldrh.w	r2, [r8, #6]
 801af92:	f8b8 1002 	ldrh.w	r1, [r8, #2]
 801af96:	440a      	add	r2, r1
 801af98:	b212      	sxth	r2, r2
 801af9a:	4293      	cmp	r3, r2
 801af9c:	dda4      	ble.n	801aee8 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x190>
 801af9e:	e79b      	b.n	801aed8 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x180>
 801afa0:	2a02      	cmp	r2, #2
 801afa2:	d105      	bne.n	801afb0 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x258>
 801afa4:	7be2      	ldrb	r2, [r4, #15]
 801afa6:	f8bd 0040 	ldrh.w	r0, [sp, #64]	@ 0x40
 801afaa:	1a80      	subs	r0, r0, r2
 801afac:	1ac0      	subs	r0, r0, r3
 801afae:	e7bf      	b.n	801af30 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x1d8>
 801afb0:	2000      	movs	r0, #0
 801afb2:	e7be      	b.n	801af32 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x1da>
 801afb4:	7be0      	ldrb	r0, [r4, #15]
 801afb6:	e7bc      	b.n	801af32 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x1da>
 801afb8:	f647 72ff 	movw	r2, #32767	@ 0x7fff
 801afbc:	e7c3      	b.n	801af46 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x1ee>
 801afbe:	9b08      	ldr	r3, [sp, #32]
 801afc0:	2b00      	cmp	r3, #0
 801afc2:	d0f7      	beq.n	801afb4 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x25c>
 801afc4:	2264      	movs	r2, #100	@ 0x64
 801afc6:	4639      	mov	r1, r7
 801afc8:	4628      	mov	r0, r5
 801afca:	f00f ffe0 	bl	802af8e <memcpy>
 801afce:	2300      	movs	r3, #0
 801afd0:	f647 72ff 	movw	r2, #32767	@ 0x7fff
 801afd4:	6821      	ldr	r1, [r4, #0]
 801afd6:	4628      	mov	r0, r5
 801afd8:	f7ff fbec 	bl	801a7b4 <_ZN8touchgfx3LCD11stringWidthERNS_12TextProviderERKNS_4FontEih>
 801afdc:	b203      	sxth	r3, r0
 801afde:	e79e      	b.n	801af1e <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x1c6>

0801afe0 <_ZN8touchgfx3LCD5realXERKNS_4RectEssNS_12TextRotationE>:
 801afe0:	2b02      	cmp	r3, #2
 801afe2:	b510      	push	{r4, lr}
 801afe4:	f9b0 4000 	ldrsh.w	r4, [r0]
 801afe8:	d00b      	beq.n	801b002 <_ZN8touchgfx3LCD5realXERKNS_4RectEssNS_12TextRotationE+0x22>
 801afea:	2b03      	cmp	r3, #3
 801afec:	d00e      	beq.n	801b00c <_ZN8touchgfx3LCD5realXERKNS_4RectEssNS_12TextRotationE+0x2c>
 801afee:	2b01      	cmp	r3, #1
 801aff0:	d001      	beq.n	801aff6 <_ZN8touchgfx3LCD5realXERKNS_4RectEssNS_12TextRotationE+0x16>
 801aff2:	1860      	adds	r0, r4, r1
 801aff4:	bd10      	pop	{r4, pc}
 801aff6:	8880      	ldrh	r0, [r0, #4]
 801aff8:	4420      	add	r0, r4
 801affa:	b200      	sxth	r0, r0
 801affc:	1a80      	subs	r0, r0, r2
 801affe:	3801      	subs	r0, #1
 801b000:	e7f8      	b.n	801aff4 <_ZN8touchgfx3LCD5realXERKNS_4RectEssNS_12TextRotationE+0x14>
 801b002:	8880      	ldrh	r0, [r0, #4]
 801b004:	4420      	add	r0, r4
 801b006:	b200      	sxth	r0, r0
 801b008:	1a40      	subs	r0, r0, r1
 801b00a:	e7f8      	b.n	801affe <_ZN8touchgfx3LCD5realXERKNS_4RectEssNS_12TextRotationE+0x1e>
 801b00c:	18a0      	adds	r0, r4, r2
 801b00e:	e7f1      	b.n	801aff4 <_ZN8touchgfx3LCD5realXERKNS_4RectEssNS_12TextRotationE+0x14>

0801b010 <_ZN8touchgfx3LCD5realYERKNS_4RectEssNS_12TextRotationE>:
 801b010:	2b02      	cmp	r3, #2
 801b012:	b510      	push	{r4, lr}
 801b014:	f9b0 4002 	ldrsh.w	r4, [r0, #2]
 801b018:	d006      	beq.n	801b028 <_ZN8touchgfx3LCD5realYERKNS_4RectEssNS_12TextRotationE+0x18>
 801b01a:	2b03      	cmp	r3, #3
 801b01c:	d00a      	beq.n	801b034 <_ZN8touchgfx3LCD5realYERKNS_4RectEssNS_12TextRotationE+0x24>
 801b01e:	2b01      	cmp	r3, #1
 801b020:	bf14      	ite	ne
 801b022:	18a0      	addne	r0, r4, r2
 801b024:	1860      	addeq	r0, r4, r1
 801b026:	bd10      	pop	{r4, pc}
 801b028:	88c0      	ldrh	r0, [r0, #6]
 801b02a:	4420      	add	r0, r4
 801b02c:	b200      	sxth	r0, r0
 801b02e:	1a80      	subs	r0, r0, r2
 801b030:	3801      	subs	r0, #1
 801b032:	e7f8      	b.n	801b026 <_ZN8touchgfx3LCD5realYERKNS_4RectEssNS_12TextRotationE+0x16>
 801b034:	88c0      	ldrh	r0, [r0, #6]
 801b036:	4420      	add	r0, r4
 801b038:	b200      	sxth	r0, r0
 801b03a:	1a40      	subs	r0, r0, r1
 801b03c:	e7f8      	b.n	801b030 <_ZN8touchgfx3LCD5realYERKNS_4RectEssNS_12TextRotationE+0x20>
	...

0801b040 <_GLOBAL__sub_I__ZN8touchgfx3LCD12defaultColorE>:
 801b040:	4b01      	ldr	r3, [pc, #4]	@ (801b048 <_GLOBAL__sub_I__ZN8touchgfx3LCD12defaultColorE+0x8>)
 801b042:	2200      	movs	r2, #0
 801b044:	601a      	str	r2, [r3, #0]
 801b046:	4770      	bx	lr
 801b048:	2400b888 	.word	0x2400b888

0801b04c <_ZN8touchgfx16TouchCalibration4clzuEm>:
 801b04c:	4603      	mov	r3, r0
 801b04e:	b1c8      	cbz	r0, 801b084 <_ZN8touchgfx16TouchCalibration4clzuEm+0x38>
 801b050:	0c02      	lsrs	r2, r0, #16
 801b052:	0412      	lsls	r2, r2, #16
 801b054:	b9a2      	cbnz	r2, 801b080 <_ZN8touchgfx16TouchCalibration4clzuEm+0x34>
 801b056:	0403      	lsls	r3, r0, #16
 801b058:	2010      	movs	r0, #16
 801b05a:	f013 4f7f 	tst.w	r3, #4278190080	@ 0xff000000
 801b05e:	bf04      	itt	eq
 801b060:	021b      	lsleq	r3, r3, #8
 801b062:	3008      	addeq	r0, #8
 801b064:	f013 4f70 	tst.w	r3, #4026531840	@ 0xf0000000
 801b068:	bf04      	itt	eq
 801b06a:	011b      	lsleq	r3, r3, #4
 801b06c:	3004      	addeq	r0, #4
 801b06e:	f013 4f40 	tst.w	r3, #3221225472	@ 0xc0000000
 801b072:	bf04      	itt	eq
 801b074:	009b      	lsleq	r3, r3, #2
 801b076:	3002      	addeq	r0, #2
 801b078:	2b00      	cmp	r3, #0
 801b07a:	db04      	blt.n	801b086 <_ZN8touchgfx16TouchCalibration4clzuEm+0x3a>
 801b07c:	3001      	adds	r0, #1
 801b07e:	4770      	bx	lr
 801b080:	2000      	movs	r0, #0
 801b082:	e7ea      	b.n	801b05a <_ZN8touchgfx16TouchCalibration4clzuEm+0xe>
 801b084:	2020      	movs	r0, #32
 801b086:	4770      	bx	lr

0801b088 <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm>:
 801b088:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801b08c:	b087      	sub	sp, #28
 801b08e:	4681      	mov	r9, r0
 801b090:	4698      	mov	r8, r3
 801b092:	4610      	mov	r0, r2
 801b094:	460d      	mov	r5, r1
 801b096:	e9dd 4710 	ldrd	r4, r7, [sp, #64]	@ 0x40
 801b09a:	b981      	cbnz	r1, 801b0be <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm+0x36>
 801b09c:	b14b      	cbz	r3, 801b0b2 <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm+0x2a>
 801b09e:	460b      	mov	r3, r1
 801b0a0:	464a      	mov	r2, r9
 801b0a2:	4641      	mov	r1, r8
 801b0a4:	e9cd 4700 	strd	r4, r7, [sp]
 801b0a8:	f7ff ffee 	bl	801b088 <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm>
 801b0ac:	b007      	add	sp, #28
 801b0ae:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801b0b2:	f04f 33ff 	mov.w	r3, #4294967295
 801b0b6:	f06f 4000 	mvn.w	r0, #2147483648	@ 0x80000000
 801b0ba:	603b      	str	r3, [r7, #0]
 801b0bc:	e7f6      	b.n	801b0ac <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm+0x24>
 801b0be:	fa32 fa01 	lsrs.w	sl, r2, r1
 801b0c2:	d107      	bne.n	801b0d4 <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm+0x4c>
 801b0c4:	fb09 f602 	mul.w	r6, r9, r2
 801b0c8:	fbb6 f0f4 	udiv	r0, r6, r4
 801b0cc:	fb04 6610 	mls	r6, r4, r0, r6
 801b0d0:	603e      	str	r6, [r7, #0]
 801b0d2:	e7eb      	b.n	801b0ac <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm+0x24>
 801b0d4:	2601      	movs	r6, #1
 801b0d6:	fa09 fb01 	lsl.w	fp, r9, r1
 801b0da:	408e      	lsls	r6, r1
 801b0dc:	fbbb f3f4 	udiv	r3, fp, r4
 801b0e0:	3e01      	subs	r6, #1
 801b0e2:	9302      	str	r3, [sp, #8]
 801b0e4:	fb0a f303 	mul.w	r3, sl, r3
 801b0e8:	4016      	ands	r6, r2
 801b0ea:	9303      	str	r3, [sp, #12]
 801b0ec:	4630      	mov	r0, r6
 801b0ee:	f7ff ffad 	bl	801b04c <_ZN8touchgfx16TouchCalibration4clzuEm>
 801b0f2:	464a      	mov	r2, r9
 801b0f4:	460b      	mov	r3, r1
 801b0f6:	4601      	mov	r1, r0
 801b0f8:	4630      	mov	r0, r6
 801b0fa:	e9cd 4700 	strd	r4, r7, [sp]
 801b0fe:	f7ff ffc3 	bl	801b088 <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm>
 801b102:	9b02      	ldr	r3, [sp, #8]
 801b104:	4606      	mov	r6, r0
 801b106:	eb05 0108 	add.w	r1, r5, r8
 801b10a:	fb04 bb13 	mls	fp, r4, r3, fp
 801b10e:	4658      	mov	r0, fp
 801b110:	f7ff ff9c 	bl	801b04c <_ZN8touchgfx16TouchCalibration4clzuEm>
 801b114:	ab05      	add	r3, sp, #20
 801b116:	465a      	mov	r2, fp
 801b118:	e9cd 4300 	strd	r4, r3, [sp]
 801b11c:	4603      	mov	r3, r0
 801b11e:	4650      	mov	r0, sl
 801b120:	f7ff ffb2 	bl	801b088 <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm>
 801b124:	6839      	ldr	r1, [r7, #0]
 801b126:	9a05      	ldr	r2, [sp, #20]
 801b128:	9b03      	ldr	r3, [sp, #12]
 801b12a:	4411      	add	r1, r2
 801b12c:	fbb1 f2f4 	udiv	r2, r1, r4
 801b130:	18d3      	adds	r3, r2, r3
 801b132:	fb04 1412 	mls	r4, r4, r2, r1
 801b136:	441e      	add	r6, r3
 801b138:	603c      	str	r4, [r7, #0]
 801b13a:	4430      	add	r0, r6
 801b13c:	e7b6      	b.n	801b0ac <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm+0x24>

0801b13e <_ZN8touchgfx16TouchCalibration6muldivEllllRl>:
 801b13e:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 801b142:	b085      	sub	sp, #20
 801b144:	f1b0 0900 	subs.w	r9, r0, #0
 801b148:	461d      	mov	r5, r3
 801b14a:	4617      	mov	r7, r2
 801b14c:	9c0c      	ldr	r4, [sp, #48]	@ 0x30
 801b14e:	bfbb      	ittet	lt
 801b150:	f1c9 0900 	rsblt	r9, r9, #0
 801b154:	f04f 36ff 	movlt.w	r6, #4294967295
 801b158:	2601      	movge	r6, #1
 801b15a:	6823      	ldrlt	r3, [r4, #0]
 801b15c:	bfbc      	itt	lt
 801b15e:	425b      	neglt	r3, r3
 801b160:	6023      	strlt	r3, [r4, #0]
 801b162:	2a00      	cmp	r2, #0
 801b164:	da04      	bge.n	801b170 <_ZN8touchgfx16TouchCalibration6muldivEllllRl+0x32>
 801b166:	6823      	ldr	r3, [r4, #0]
 801b168:	4257      	negs	r7, r2
 801b16a:	4276      	negs	r6, r6
 801b16c:	425b      	negs	r3, r3
 801b16e:	6023      	str	r3, [r4, #0]
 801b170:	2d00      	cmp	r5, #0
 801b172:	4638      	mov	r0, r7
 801b174:	bfba      	itte	lt
 801b176:	426d      	neglt	r5, r5
 801b178:	f04f 38ff 	movlt.w	r8, #4294967295
 801b17c:	f04f 0801 	movge.w	r8, #1
 801b180:	f7ff ff64 	bl	801b04c <_ZN8touchgfx16TouchCalibration4clzuEm>
 801b184:	ab03      	add	r3, sp, #12
 801b186:	463a      	mov	r2, r7
 801b188:	e9cd 5300 	strd	r5, r3, [sp]
 801b18c:	4603      	mov	r3, r0
 801b18e:	4648      	mov	r0, r9
 801b190:	f7ff ff7a 	bl	801b088 <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm>
 801b194:	6823      	ldr	r3, [r4, #0]
 801b196:	9a03      	ldr	r2, [sp, #12]
 801b198:	4546      	cmp	r6, r8
 801b19a:	441a      	add	r2, r3
 801b19c:	fb92 f3f5 	sdiv	r3, r2, r5
 801b1a0:	4418      	add	r0, r3
 801b1a2:	fb05 2313 	mls	r3, r5, r3, r2
 801b1a6:	bf18      	it	ne
 801b1a8:	4240      	negne	r0, r0
 801b1aa:	1c72      	adds	r2, r6, #1
 801b1ac:	6023      	str	r3, [r4, #0]
 801b1ae:	d105      	bne.n	801b1bc <_ZN8touchgfx16TouchCalibration6muldivEllllRl+0x7e>
 801b1b0:	2b00      	cmp	r3, #0
 801b1b2:	f1c3 0200 	rsb	r2, r3, #0
 801b1b6:	db0b      	blt.n	801b1d0 <_ZN8touchgfx16TouchCalibration6muldivEllllRl+0x92>
 801b1b8:	6022      	str	r2, [r4, #0]
 801b1ba:	e006      	b.n	801b1ca <_ZN8touchgfx16TouchCalibration6muldivEllllRl+0x8c>
 801b1bc:	2e01      	cmp	r6, #1
 801b1be:	d104      	bne.n	801b1ca <_ZN8touchgfx16TouchCalibration6muldivEllllRl+0x8c>
 801b1c0:	2b00      	cmp	r3, #0
 801b1c2:	da02      	bge.n	801b1ca <_ZN8touchgfx16TouchCalibration6muldivEllllRl+0x8c>
 801b1c4:	442b      	add	r3, r5
 801b1c6:	3801      	subs	r0, #1
 801b1c8:	6023      	str	r3, [r4, #0]
 801b1ca:	b005      	add	sp, #20
 801b1cc:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801b1d0:	3801      	subs	r0, #1
 801b1d2:	1b52      	subs	r2, r2, r5
 801b1d4:	e7f0      	b.n	801b1b8 <_ZN8touchgfx16TouchCalibration6muldivEllllRl+0x7a>
	...

0801b1d8 <_ZN8touchgfx16TouchCalibration14translatePointERNS_5PointE>:
 801b1d8:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
 801b1dc:	4c1c      	ldr	r4, [pc, #112]	@ (801b250 <_ZN8touchgfx16TouchCalibration14translatePointERNS_5PointE+0x78>)
 801b1de:	4605      	mov	r5, r0
 801b1e0:	6807      	ldr	r7, [r0, #0]
 801b1e2:	69a3      	ldr	r3, [r4, #24]
 801b1e4:	b92b      	cbnz	r3, 801b1f2 <_ZN8touchgfx16TouchCalibration14translatePointERNS_5PointE+0x1a>
 801b1e6:	6840      	ldr	r0, [r0, #4]
 801b1e8:	e9c5 7000 	strd	r7, r0, [r5]
 801b1ec:	b004      	add	sp, #16
 801b1ee:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801b1f2:	f04f 0802 	mov.w	r8, #2
 801b1f6:	68a2      	ldr	r2, [r4, #8]
 801b1f8:	ae04      	add	r6, sp, #16
 801b1fa:	6820      	ldr	r0, [r4, #0]
 801b1fc:	fb93 f1f8 	sdiv	r1, r3, r8
 801b200:	440a      	add	r2, r1
 801b202:	69e1      	ldr	r1, [r4, #28]
 801b204:	f846 2d04 	str.w	r2, [r6, #-4]!
 801b208:	463a      	mov	r2, r7
 801b20a:	9600      	str	r6, [sp, #0]
 801b20c:	f7ff ff97 	bl	801b13e <_ZN8touchgfx16TouchCalibration6muldivEllllRl>
 801b210:	69a3      	ldr	r3, [r4, #24]
 801b212:	4607      	mov	r7, r0
 801b214:	686a      	ldr	r2, [r5, #4]
 801b216:	6a21      	ldr	r1, [r4, #32]
 801b218:	9600      	str	r6, [sp, #0]
 801b21a:	6860      	ldr	r0, [r4, #4]
 801b21c:	f7ff ff8f 	bl	801b13e <_ZN8touchgfx16TouchCalibration6muldivEllllRl>
 801b220:	69a3      	ldr	r3, [r4, #24]
 801b222:	6962      	ldr	r2, [r4, #20]
 801b224:	4407      	add	r7, r0
 801b226:	6a61      	ldr	r1, [r4, #36]	@ 0x24
 801b228:	9600      	str	r6, [sp, #0]
 801b22a:	68e0      	ldr	r0, [r4, #12]
 801b22c:	fb93 f8f8 	sdiv	r8, r3, r8
 801b230:	4442      	add	r2, r8
 801b232:	9203      	str	r2, [sp, #12]
 801b234:	682a      	ldr	r2, [r5, #0]
 801b236:	f7ff ff82 	bl	801b13e <_ZN8touchgfx16TouchCalibration6muldivEllllRl>
 801b23a:	4680      	mov	r8, r0
 801b23c:	9600      	str	r6, [sp, #0]
 801b23e:	69a3      	ldr	r3, [r4, #24]
 801b240:	686a      	ldr	r2, [r5, #4]
 801b242:	6aa1      	ldr	r1, [r4, #40]	@ 0x28
 801b244:	6920      	ldr	r0, [r4, #16]
 801b246:	f7ff ff7a 	bl	801b13e <_ZN8touchgfx16TouchCalibration6muldivEllllRl>
 801b24a:	4440      	add	r0, r8
 801b24c:	e7cc      	b.n	801b1e8 <_ZN8touchgfx16TouchCalibration14translatePointERNS_5PointE+0x10>
 801b24e:	bf00      	nop
 801b250:	2400b88c 	.word	0x2400b88c

0801b254 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERsS1_>:
 801b254:	4b07      	ldr	r3, [pc, #28]	@ (801b274 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERsS1_+0x20>)
 801b256:	781b      	ldrb	r3, [r3, #0]
 801b258:	2b01      	cmp	r3, #1
 801b25a:	d109      	bne.n	801b270 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERsS1_+0x1c>
 801b25c:	f9b1 3000 	ldrsh.w	r3, [r1]
 801b260:	f9b0 2000 	ldrsh.w	r2, [r0]
 801b264:	8003      	strh	r3, [r0, #0]
 801b266:	4b04      	ldr	r3, [pc, #16]	@ (801b278 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERsS1_+0x24>)
 801b268:	881b      	ldrh	r3, [r3, #0]
 801b26a:	3b01      	subs	r3, #1
 801b26c:	1a9b      	subs	r3, r3, r2
 801b26e:	800b      	strh	r3, [r1, #0]
 801b270:	4770      	bx	lr
 801b272:	bf00      	nop
 801b274:	2400b878 	.word	0x2400b878
 801b278:	2400b87c 	.word	0x2400b87c

0801b27c <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERsS1_>:
 801b27c:	4b07      	ldr	r3, [pc, #28]	@ (801b29c <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERsS1_+0x20>)
 801b27e:	b510      	push	{r4, lr}
 801b280:	781b      	ldrb	r3, [r3, #0]
 801b282:	2b01      	cmp	r3, #1
 801b284:	d108      	bne.n	801b298 <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERsS1_+0x1c>
 801b286:	4b06      	ldr	r3, [pc, #24]	@ (801b2a0 <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERsS1_+0x24>)
 801b288:	880c      	ldrh	r4, [r1, #0]
 801b28a:	881b      	ldrh	r3, [r3, #0]
 801b28c:	f9b0 2000 	ldrsh.w	r2, [r0]
 801b290:	3b01      	subs	r3, #1
 801b292:	1b1b      	subs	r3, r3, r4
 801b294:	8003      	strh	r3, [r0, #0]
 801b296:	800a      	strh	r2, [r1, #0]
 801b298:	bd10      	pop	{r4, pc}
 801b29a:	bf00      	nop
 801b29c:	2400b878 	.word	0x2400b878
 801b2a0:	2400b87c 	.word	0x2400b87c

0801b2a4 <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERNS_4RectE>:
 801b2a4:	4b0a      	ldr	r3, [pc, #40]	@ (801b2d0 <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERNS_4RectE+0x2c>)
 801b2a6:	b510      	push	{r4, lr}
 801b2a8:	781b      	ldrb	r3, [r3, #0]
 801b2aa:	2b01      	cmp	r3, #1
 801b2ac:	d10e      	bne.n	801b2cc <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERNS_4RectE+0x28>
 801b2ae:	f9b0 1006 	ldrsh.w	r1, [r0, #6]
 801b2b2:	8843      	ldrh	r3, [r0, #2]
 801b2b4:	f9b0 4000 	ldrsh.w	r4, [r0]
 801b2b8:	18ca      	adds	r2, r1, r3
 801b2ba:	4b06      	ldr	r3, [pc, #24]	@ (801b2d4 <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERNS_4RectE+0x30>)
 801b2bc:	8044      	strh	r4, [r0, #2]
 801b2be:	881b      	ldrh	r3, [r3, #0]
 801b2c0:	1a9b      	subs	r3, r3, r2
 801b2c2:	8003      	strh	r3, [r0, #0]
 801b2c4:	f9b0 3004 	ldrsh.w	r3, [r0, #4]
 801b2c8:	8081      	strh	r1, [r0, #4]
 801b2ca:	80c3      	strh	r3, [r0, #6]
 801b2cc:	bd10      	pop	{r4, pc}
 801b2ce:	bf00      	nop
 801b2d0:	2400b878 	.word	0x2400b878
 801b2d4:	2400b87c 	.word	0x2400b87c

0801b2d8 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>:
 801b2d8:	4b08      	ldr	r3, [pc, #32]	@ (801b2fc <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE+0x24>)
 801b2da:	781b      	ldrb	r3, [r3, #0]
 801b2dc:	2b01      	cmp	r3, #1
 801b2de:	d10c      	bne.n	801b2fa <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE+0x22>
 801b2e0:	8803      	ldrh	r3, [r0, #0]
 801b2e2:	f9b0 1004 	ldrsh.w	r1, [r0, #4]
 801b2e6:	8842      	ldrh	r2, [r0, #2]
 801b2e8:	8002      	strh	r2, [r0, #0]
 801b2ea:	185a      	adds	r2, r3, r1
 801b2ec:	4b04      	ldr	r3, [pc, #16]	@ (801b300 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE+0x28>)
 801b2ee:	881b      	ldrh	r3, [r3, #0]
 801b2f0:	1a9b      	subs	r3, r3, r2
 801b2f2:	8043      	strh	r3, [r0, #2]
 801b2f4:	88c3      	ldrh	r3, [r0, #6]
 801b2f6:	80c1      	strh	r1, [r0, #6]
 801b2f8:	8083      	strh	r3, [r0, #4]
 801b2fa:	4770      	bx	lr
 801b2fc:	2400b878 	.word	0x2400b878
 801b300:	2400b87c 	.word	0x2400b87c

0801b304 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERsS1_RKNS_4RectE>:
 801b304:	4b07      	ldr	r3, [pc, #28]	@ (801b324 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERsS1_RKNS_4RectE+0x20>)
 801b306:	b510      	push	{r4, lr}
 801b308:	781b      	ldrb	r3, [r3, #0]
 801b30a:	2b01      	cmp	r3, #1
 801b30c:	d108      	bne.n	801b320 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERsS1_RKNS_4RectE+0x1c>
 801b30e:	f9b1 3000 	ldrsh.w	r3, [r1]
 801b312:	f9b0 4000 	ldrsh.w	r4, [r0]
 801b316:	8003      	strh	r3, [r0, #0]
 801b318:	8893      	ldrh	r3, [r2, #4]
 801b31a:	3b01      	subs	r3, #1
 801b31c:	1b1b      	subs	r3, r3, r4
 801b31e:	800b      	strh	r3, [r1, #0]
 801b320:	bd10      	pop	{r4, pc}
 801b322:	bf00      	nop
 801b324:	2400b878 	.word	0x2400b878

0801b328 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>:
 801b328:	4b0a      	ldr	r3, [pc, #40]	@ (801b354 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_+0x2c>)
 801b32a:	460a      	mov	r2, r1
 801b32c:	b510      	push	{r4, lr}
 801b32e:	781b      	ldrb	r3, [r3, #0]
 801b330:	2b01      	cmp	r3, #1
 801b332:	d10d      	bne.n	801b350 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_+0x28>
 801b334:	8881      	ldrh	r1, [r0, #4]
 801b336:	8803      	ldrh	r3, [r0, #0]
 801b338:	440b      	add	r3, r1
 801b33a:	4601      	mov	r1, r0
 801b33c:	3b01      	subs	r3, #1
 801b33e:	f821 3b02 	strh.w	r3, [r1], #2
 801b342:	f7ff ffdf 	bl	801b304 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERsS1_RKNS_4RectE>
 801b346:	f9b0 3004 	ldrsh.w	r3, [r0, #4]
 801b34a:	88c2      	ldrh	r2, [r0, #6]
 801b34c:	80c3      	strh	r3, [r0, #6]
 801b34e:	8082      	strh	r2, [r0, #4]
 801b350:	bd10      	pop	{r4, pc}
 801b352:	bf00      	nop
 801b354:	2400b878 	.word	0x2400b878

0801b358 <_ZN8touchgfx11Application13requestRedrawEv>:
 801b358:	4b06      	ldr	r3, [pc, #24]	@ (801b374 <_ZN8touchgfx11Application13requestRedrawEv+0x1c>)
 801b35a:	2100      	movs	r1, #0
 801b35c:	f9b3 2000 	ldrsh.w	r2, [r3]
 801b360:	4b05      	ldr	r3, [pc, #20]	@ (801b378 <_ZN8touchgfx11Application13requestRedrawEv+0x20>)
 801b362:	f8c0 112c 	str.w	r1, [r0, #300]	@ 0x12c
 801b366:	f9b3 3000 	ldrsh.w	r3, [r3]
 801b36a:	f8a0 2130 	strh.w	r2, [r0, #304]	@ 0x130
 801b36e:	f8a0 3132 	strh.w	r3, [r0, #306]	@ 0x132
 801b372:	4770      	bx	lr
 801b374:	2400b874 	.word	0x2400b874
 801b378:	2400b876 	.word	0x2400b876

0801b37c <_ZN8touchgfx11Application16handleClickEventERKNS_10ClickEventE>:
 801b37c:	4b03      	ldr	r3, [pc, #12]	@ (801b38c <_ZN8touchgfx11Application16handleClickEventERKNS_10ClickEventE+0x10>)
 801b37e:	6818      	ldr	r0, [r3, #0]
 801b380:	b110      	cbz	r0, 801b388 <_ZN8touchgfx11Application16handleClickEventERKNS_10ClickEventE+0xc>
 801b382:	6803      	ldr	r3, [r0, #0]
 801b384:	699b      	ldr	r3, [r3, #24]
 801b386:	4718      	bx	r3
 801b388:	4770      	bx	lr
 801b38a:	bf00      	nop
 801b38c:	2400b8bc 	.word	0x2400b8bc

0801b390 <_ZN8touchgfx11Application29handlePendingScreenTransitionEv>:
 801b390:	4770      	bx	lr
	...

0801b394 <_ZN8touchgfx11Application4drawEv>:
 801b394:	4b09      	ldr	r3, [pc, #36]	@ (801b3bc <_ZN8touchgfx11Application4drawEv+0x28>)
 801b396:	b507      	push	{r0, r1, r2, lr}
 801b398:	f9b3 2000 	ldrsh.w	r2, [r3]
 801b39c:	2100      	movs	r1, #0
 801b39e:	4b08      	ldr	r3, [pc, #32]	@ (801b3c0 <_ZN8touchgfx11Application4drawEv+0x2c>)
 801b3a0:	9100      	str	r1, [sp, #0]
 801b3a2:	4669      	mov	r1, sp
 801b3a4:	f9b3 3000 	ldrsh.w	r3, [r3]
 801b3a8:	f8ad 2004 	strh.w	r2, [sp, #4]
 801b3ac:	f8ad 3006 	strh.w	r3, [sp, #6]
 801b3b0:	6803      	ldr	r3, [r0, #0]
 801b3b2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 801b3b4:	4798      	blx	r3
 801b3b6:	b003      	add	sp, #12
 801b3b8:	f85d fb04 	ldr.w	pc, [sp], #4
 801b3bc:	2400b874 	.word	0x2400b874
 801b3c0:	2400b876 	.word	0x2400b876

0801b3c4 <_ZN8touchgfx11Application15handleDragEventERKNS_9DragEventE>:
 801b3c4:	4b03      	ldr	r3, [pc, #12]	@ (801b3d4 <_ZN8touchgfx11Application15handleDragEventERKNS_9DragEventE+0x10>)
 801b3c6:	6818      	ldr	r0, [r3, #0]
 801b3c8:	b110      	cbz	r0, 801b3d0 <_ZN8touchgfx11Application15handleDragEventERKNS_9DragEventE+0xc>
 801b3ca:	6803      	ldr	r3, [r0, #0]
 801b3cc:	69db      	ldr	r3, [r3, #28]
 801b3ce:	4718      	bx	r3
 801b3d0:	4770      	bx	lr
 801b3d2:	bf00      	nop
 801b3d4:	2400b8bc 	.word	0x2400b8bc

0801b3d8 <_ZN8touchgfx11Application18handleGestureEventERKNS_12GestureEventE>:
 801b3d8:	4b03      	ldr	r3, [pc, #12]	@ (801b3e8 <_ZN8touchgfx11Application18handleGestureEventERKNS_12GestureEventE+0x10>)
 801b3da:	6818      	ldr	r0, [r3, #0]
 801b3dc:	b110      	cbz	r0, 801b3e4 <_ZN8touchgfx11Application18handleGestureEventERKNS_12GestureEventE+0xc>
 801b3de:	6803      	ldr	r3, [r0, #0]
 801b3e0:	6a1b      	ldr	r3, [r3, #32]
 801b3e2:	4718      	bx	r3
 801b3e4:	4770      	bx	lr
 801b3e6:	bf00      	nop
 801b3e8:	2400b8bc 	.word	0x2400b8bc

0801b3ec <_ZN8touchgfx11Application14handleKeyEventEh>:
 801b3ec:	4b03      	ldr	r3, [pc, #12]	@ (801b3fc <_ZN8touchgfx11Application14handleKeyEventEh+0x10>)
 801b3ee:	6818      	ldr	r0, [r3, #0]
 801b3f0:	b110      	cbz	r0, 801b3f8 <_ZN8touchgfx11Application14handleKeyEventEh+0xc>
 801b3f2:	6803      	ldr	r3, [r0, #0]
 801b3f4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 801b3f6:	4718      	bx	r3
 801b3f8:	4770      	bx	lr
 801b3fa:	bf00      	nop
 801b3fc:	2400b8bc 	.word	0x2400b8bc

0801b400 <_ZN8touchgfx11Application15handleTickEventEv>:
 801b400:	b570      	push	{r4, r5, r6, lr}
 801b402:	4d38      	ldr	r5, [pc, #224]	@ (801b4e4 <_ZN8touchgfx11Application15handleTickEventEv+0xe4>)
 801b404:	4604      	mov	r4, r0
 801b406:	6828      	ldr	r0, [r5, #0]
 801b408:	b140      	cbz	r0, 801b41c <_ZN8touchgfx11Application15handleTickEventEv+0x1c>
 801b40a:	7a03      	ldrb	r3, [r0, #8]
 801b40c:	b933      	cbnz	r3, 801b41c <_ZN8touchgfx11Application15handleTickEventEv+0x1c>
 801b40e:	f884 3135 	strb.w	r3, [r4, #309]	@ 0x135
 801b412:	6803      	ldr	r3, [r0, #0]
 801b414:	689b      	ldr	r3, [r3, #8]
 801b416:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 801b41a:	4718      	bx	r3
 801b41c:	f894 3135 	ldrb.w	r3, [r4, #309]	@ 0x135
 801b420:	b97b      	cbnz	r3, 801b442 <_ZN8touchgfx11Application15handleTickEventEv+0x42>
 801b422:	b170      	cbz	r0, 801b442 <_ZN8touchgfx11Application15handleTickEventEv+0x42>
 801b424:	7a03      	ldrb	r3, [r0, #8]
 801b426:	b163      	cbz	r3, 801b442 <_ZN8touchgfx11Application15handleTickEventEv+0x42>
 801b428:	4b2f      	ldr	r3, [pc, #188]	@ (801b4e8 <_ZN8touchgfx11Application15handleTickEventEv+0xe8>)
 801b42a:	6818      	ldr	r0, [r3, #0]
 801b42c:	b110      	cbz	r0, 801b434 <_ZN8touchgfx11Application15handleTickEventEv+0x34>
 801b42e:	6803      	ldr	r3, [r0, #0]
 801b430:	691b      	ldr	r3, [r3, #16]
 801b432:	4798      	blx	r3
 801b434:	6828      	ldr	r0, [r5, #0]
 801b436:	6803      	ldr	r3, [r0, #0]
 801b438:	68db      	ldr	r3, [r3, #12]
 801b43a:	4798      	blx	r3
 801b43c:	2301      	movs	r3, #1
 801b43e:	f884 3135 	strb.w	r3, [r4, #309]	@ 0x135
 801b442:	2500      	movs	r5, #0
 801b444:	f8b4 0084 	ldrh.w	r0, [r4, #132]	@ 0x84
 801b448:	42a8      	cmp	r0, r5
 801b44a:	dd0c      	ble.n	801b466 <_ZN8touchgfx11Application15handleTickEventEv+0x66>
 801b44c:	1963      	adds	r3, r4, r5
 801b44e:	f893 2088 	ldrb.w	r2, [r3, #136]	@ 0x88
 801b452:	b132      	cbz	r2, 801b462 <_ZN8touchgfx11Application15handleTickEventEv+0x62>
 801b454:	eb05 0245 	add.w	r2, r5, r5, lsl #1
 801b458:	4413      	add	r3, r2
 801b45a:	6858      	ldr	r0, [r3, #4]
 801b45c:	6803      	ldr	r3, [r0, #0]
 801b45e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 801b460:	4798      	blx	r3
 801b462:	3501      	adds	r5, #1
 801b464:	e7ee      	b.n	801b444 <_ZN8touchgfx11Application15handleTickEventEv+0x44>
 801b466:	2300      	movs	r3, #0
 801b468:	461a      	mov	r2, r3
 801b46a:	4298      	cmp	r0, r3
 801b46c:	d10f      	bne.n	801b48e <_ZN8touchgfx11Application15handleTickEventEv+0x8e>
 801b46e:	1d25      	adds	r5, r4, #4
 801b470:	f8b4 1084 	ldrh.w	r1, [r4, #132]	@ 0x84
 801b474:	4291      	cmp	r1, r2
 801b476:	dd2d      	ble.n	801b4d4 <_ZN8touchgfx11Application15handleTickEventEv+0xd4>
 801b478:	1e48      	subs	r0, r1, #1
 801b47a:	b280      	uxth	r0, r0
 801b47c:	4288      	cmp	r0, r1
 801b47e:	d31a      	bcc.n	801b4b6 <_ZN8touchgfx11Application15handleTickEventEv+0xb6>
 801b480:	4b1a      	ldr	r3, [pc, #104]	@ (801b4ec <_ZN8touchgfx11Application15handleTickEventEv+0xec>)
 801b482:	f240 11a9 	movw	r1, #425	@ 0x1a9
 801b486:	4a1a      	ldr	r2, [pc, #104]	@ (801b4f0 <_ZN8touchgfx11Application15handleTickEventEv+0xf0>)
 801b488:	481a      	ldr	r0, [pc, #104]	@ (801b4f4 <_ZN8touchgfx11Application15handleTickEventEv+0xf4>)
 801b48a:	f00f fa53 	bl	802a934 <__assert_func>
 801b48e:	18e1      	adds	r1, r4, r3
 801b490:	f891 5088 	ldrb.w	r5, [r1, #136]	@ 0x88
 801b494:	b16d      	cbz	r5, 801b4b2 <_ZN8touchgfx11Application15handleTickEventEv+0xb2>
 801b496:	429a      	cmp	r2, r3
 801b498:	d00a      	beq.n	801b4b0 <_ZN8touchgfx11Application15handleTickEventEv+0xb0>
 801b49a:	eb03 0643 	add.w	r6, r3, r3, lsl #1
 801b49e:	4431      	add	r1, r6
 801b4a0:	684e      	ldr	r6, [r1, #4]
 801b4a2:	b291      	uxth	r1, r2
 801b4a4:	eb04 0181 	add.w	r1, r4, r1, lsl #2
 801b4a8:	604e      	str	r6, [r1, #4]
 801b4aa:	18a1      	adds	r1, r4, r2
 801b4ac:	f881 5088 	strb.w	r5, [r1, #136]	@ 0x88
 801b4b0:	3201      	adds	r2, #1
 801b4b2:	3301      	adds	r3, #1
 801b4b4:	e7d9      	b.n	801b46a <_ZN8touchgfx11Application15handleTickEventEv+0x6a>
 801b4b6:	eb04 0380 	add.w	r3, r4, r0, lsl #2
 801b4ba:	eb05 0181 	add.w	r1, r5, r1, lsl #2
 801b4be:	3304      	adds	r3, #4
 801b4c0:	428b      	cmp	r3, r1
 801b4c2:	d004      	beq.n	801b4ce <_ZN8touchgfx11Application15handleTickEventEv+0xce>
 801b4c4:	f853 6f04 	ldr.w	r6, [r3, #4]!
 801b4c8:	f843 6c04 	str.w	r6, [r3, #-4]
 801b4cc:	e7f8      	b.n	801b4c0 <_ZN8touchgfx11Application15handleTickEventEv+0xc0>
 801b4ce:	f8a4 0084 	strh.w	r0, [r4, #132]	@ 0x84
 801b4d2:	e7cd      	b.n	801b470 <_ZN8touchgfx11Application15handleTickEventEv+0x70>
 801b4d4:	4b04      	ldr	r3, [pc, #16]	@ (801b4e8 <_ZN8touchgfx11Application15handleTickEventEv+0xe8>)
 801b4d6:	6818      	ldr	r0, [r3, #0]
 801b4d8:	b110      	cbz	r0, 801b4e0 <_ZN8touchgfx11Application15handleTickEventEv+0xe0>
 801b4da:	6803      	ldr	r3, [r0, #0]
 801b4dc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801b4de:	e79a      	b.n	801b416 <_ZN8touchgfx11Application15handleTickEventEv+0x16>
 801b4e0:	bd70      	pop	{r4, r5, r6, pc}
 801b4e2:	bf00      	nop
 801b4e4:	2400b8c0 	.word	0x2400b8c0
 801b4e8:	2400b8bc 	.word	0x2400b8bc
 801b4ec:	0802eb9c 	.word	0x0802eb9c
 801b4f0:	0802edf5 	.word	0x0802edf5
 801b4f4:	0802ebaa 	.word	0x0802ebaa

0801b4f8 <_ZN8touchgfx11Application12switchScreenEPNS_6ScreenE>:
 801b4f8:	b570      	push	{r4, r5, r6, lr}
 801b4fa:	4606      	mov	r6, r0
 801b4fc:	460c      	mov	r4, r1
 801b4fe:	b929      	cbnz	r1, 801b50c <_ZN8touchgfx11Application12switchScreenEPNS_6ScreenE+0x14>
 801b500:	4b0c      	ldr	r3, [pc, #48]	@ (801b534 <_ZN8touchgfx11Application12switchScreenEPNS_6ScreenE+0x3c>)
 801b502:	2167      	movs	r1, #103	@ 0x67
 801b504:	4a0c      	ldr	r2, [pc, #48]	@ (801b538 <_ZN8touchgfx11Application12switchScreenEPNS_6ScreenE+0x40>)
 801b506:	480d      	ldr	r0, [pc, #52]	@ (801b53c <_ZN8touchgfx11Application12switchScreenEPNS_6ScreenE+0x44>)
 801b508:	f00f fa14 	bl	802a934 <__assert_func>
 801b50c:	2300      	movs	r3, #0
 801b50e:	4d0c      	ldr	r5, [pc, #48]	@ (801b540 <_ZN8touchgfx11Application12switchScreenEPNS_6ScreenE+0x48>)
 801b510:	f8a0 3084 	strh.w	r3, [r0, #132]	@ 0x84
 801b514:	6828      	ldr	r0, [r5, #0]
 801b516:	b110      	cbz	r0, 801b51e <_ZN8touchgfx11Application12switchScreenEPNS_6ScreenE+0x26>
 801b518:	6803      	ldr	r3, [r0, #0]
 801b51a:	695b      	ldr	r3, [r3, #20]
 801b51c:	4798      	blx	r3
 801b51e:	602c      	str	r4, [r5, #0]
 801b520:	4620      	mov	r0, r4
 801b522:	6823      	ldr	r3, [r4, #0]
 801b524:	68db      	ldr	r3, [r3, #12]
 801b526:	4798      	blx	r3
 801b528:	6833      	ldr	r3, [r6, #0]
 801b52a:	4630      	mov	r0, r6
 801b52c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 801b52e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 801b532:	4718      	bx	r3
 801b534:	0802eb68 	.word	0x0802eb68
 801b538:	0802ec70 	.word	0x0802ec70
 801b53c:	0802eb72 	.word	0x0802eb72
 801b540:	2400b8bc 	.word	0x2400b8bc

0801b544 <_ZNK8touchgfx4Rect9intersectERKS0_>:
 801b544:	b510      	push	{r4, lr}
 801b546:	f9b1 4000 	ldrsh.w	r4, [r1]
 801b54a:	888a      	ldrh	r2, [r1, #4]
 801b54c:	f9b0 3000 	ldrsh.w	r3, [r0]
 801b550:	4422      	add	r2, r4
 801b552:	b212      	sxth	r2, r2
 801b554:	4293      	cmp	r3, r2
 801b556:	da15      	bge.n	801b584 <_ZNK8touchgfx4Rect9intersectERKS0_+0x40>
 801b558:	8882      	ldrh	r2, [r0, #4]
 801b55a:	4413      	add	r3, r2
 801b55c:	b21b      	sxth	r3, r3
 801b55e:	429c      	cmp	r4, r3
 801b560:	da10      	bge.n	801b584 <_ZNK8touchgfx4Rect9intersectERKS0_+0x40>
 801b562:	f9b1 3002 	ldrsh.w	r3, [r1, #2]
 801b566:	88c9      	ldrh	r1, [r1, #6]
 801b568:	f9b0 2002 	ldrsh.w	r2, [r0, #2]
 801b56c:	4419      	add	r1, r3
 801b56e:	b209      	sxth	r1, r1
 801b570:	428a      	cmp	r2, r1
 801b572:	da07      	bge.n	801b584 <_ZNK8touchgfx4Rect9intersectERKS0_+0x40>
 801b574:	88c0      	ldrh	r0, [r0, #6]
 801b576:	4410      	add	r0, r2
 801b578:	b200      	sxth	r0, r0
 801b57a:	4283      	cmp	r3, r0
 801b57c:	bfac      	ite	ge
 801b57e:	2000      	movge	r0, #0
 801b580:	2001      	movlt	r0, #1
 801b582:	bd10      	pop	{r4, pc}
 801b584:	2000      	movs	r0, #0
 801b586:	e7fc      	b.n	801b582 <_ZNK8touchgfx4Rect9intersectERKS0_+0x3e>

0801b588 <_ZNK8touchgfx4Rect8includesERKS0_>:
 801b588:	b570      	push	{r4, r5, r6, lr}
 801b58a:	f9b1 4000 	ldrsh.w	r4, [r1]
 801b58e:	f9b0 5000 	ldrsh.w	r5, [r0]
 801b592:	42ac      	cmp	r4, r5
 801b594:	db18      	blt.n	801b5c8 <_ZNK8touchgfx4Rect8includesERKS0_+0x40>
 801b596:	f9b1 2002 	ldrsh.w	r2, [r1, #2]
 801b59a:	f9b0 3002 	ldrsh.w	r3, [r0, #2]
 801b59e:	429a      	cmp	r2, r3
 801b5a0:	db12      	blt.n	801b5c8 <_ZNK8touchgfx4Rect8includesERKS0_+0x40>
 801b5a2:	8886      	ldrh	r6, [r0, #4]
 801b5a4:	4435      	add	r5, r6
 801b5a6:	888e      	ldrh	r6, [r1, #4]
 801b5a8:	4434      	add	r4, r6
 801b5aa:	b22d      	sxth	r5, r5
 801b5ac:	b224      	sxth	r4, r4
 801b5ae:	42a5      	cmp	r5, r4
 801b5b0:	db0a      	blt.n	801b5c8 <_ZNK8touchgfx4Rect8includesERKS0_+0x40>
 801b5b2:	88c0      	ldrh	r0, [r0, #6]
 801b5b4:	4418      	add	r0, r3
 801b5b6:	88cb      	ldrh	r3, [r1, #6]
 801b5b8:	441a      	add	r2, r3
 801b5ba:	b200      	sxth	r0, r0
 801b5bc:	b212      	sxth	r2, r2
 801b5be:	4290      	cmp	r0, r2
 801b5c0:	bfb4      	ite	lt
 801b5c2:	2000      	movlt	r0, #0
 801b5c4:	2001      	movge	r0, #1
 801b5c6:	bd70      	pop	{r4, r5, r6, pc}
 801b5c8:	2000      	movs	r0, #0
 801b5ca:	e7fc      	b.n	801b5c6 <_ZNK8touchgfx4Rect8includesERKS0_+0x3e>

0801b5cc <_ZN8touchgfx4Rect11expandToFitERKS0_>:
 801b5cc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801b5ce:	4604      	mov	r4, r0
 801b5d0:	4608      	mov	r0, r1
 801b5d2:	460d      	mov	r5, r1
 801b5d4:	f7fc fb11 	bl	8017bfa <_ZNK8touchgfx4Rect7isEmptyEv>
 801b5d8:	b978      	cbnz	r0, 801b5fa <_ZN8touchgfx4Rect11expandToFitERKS0_+0x2e>
 801b5da:	4620      	mov	r0, r4
 801b5dc:	f7fc fb0d 	bl	8017bfa <_ZNK8touchgfx4Rect7isEmptyEv>
 801b5e0:	f9b5 6000 	ldrsh.w	r6, [r5]
 801b5e4:	b150      	cbz	r0, 801b5fc <_ZN8touchgfx4Rect11expandToFitERKS0_+0x30>
 801b5e6:	8026      	strh	r6, [r4, #0]
 801b5e8:	f9b5 3002 	ldrsh.w	r3, [r5, #2]
 801b5ec:	8063      	strh	r3, [r4, #2]
 801b5ee:	f9b5 3004 	ldrsh.w	r3, [r5, #4]
 801b5f2:	80a3      	strh	r3, [r4, #4]
 801b5f4:	f9b5 3006 	ldrsh.w	r3, [r5, #6]
 801b5f8:	80e3      	strh	r3, [r4, #6]
 801b5fa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801b5fc:	f9b4 1000 	ldrsh.w	r1, [r4]
 801b600:	f9b5 2002 	ldrsh.w	r2, [r5, #2]
 801b604:	42b1      	cmp	r1, r6
 801b606:	f9b4 3002 	ldrsh.w	r3, [r4, #2]
 801b60a:	f8b5 c004 	ldrh.w	ip, [r5, #4]
 801b60e:	460f      	mov	r7, r1
 801b610:	88ed      	ldrh	r5, [r5, #6]
 801b612:	bfa8      	it	ge
 801b614:	4637      	movge	r7, r6
 801b616:	4293      	cmp	r3, r2
 801b618:	4618      	mov	r0, r3
 801b61a:	4466      	add	r6, ip
 801b61c:	f8b4 c004 	ldrh.w	ip, [r4, #4]
 801b620:	bfa8      	it	ge
 801b622:	4610      	movge	r0, r2
 801b624:	442a      	add	r2, r5
 801b626:	88e5      	ldrh	r5, [r4, #6]
 801b628:	4461      	add	r1, ip
 801b62a:	b236      	sxth	r6, r6
 801b62c:	8027      	strh	r7, [r4, #0]
 801b62e:	442b      	add	r3, r5
 801b630:	b209      	sxth	r1, r1
 801b632:	b212      	sxth	r2, r2
 801b634:	8060      	strh	r0, [r4, #2]
 801b636:	b21b      	sxth	r3, r3
 801b638:	428e      	cmp	r6, r1
 801b63a:	bfac      	ite	ge
 801b63c:	ebc7 0106 	rsbge	r1, r7, r6
 801b640:	ebc7 0101 	rsblt	r1, r7, r1
 801b644:	429a      	cmp	r2, r3
 801b646:	bfac      	ite	ge
 801b648:	ebc0 0202 	rsbge	r2, r0, r2
 801b64c:	ebc0 0203 	rsblt	r2, r0, r3
 801b650:	80a1      	strh	r1, [r4, #4]
 801b652:	80e2      	strh	r2, [r4, #6]
 801b654:	e7d1      	b.n	801b5fa <_ZN8touchgfx4Rect11expandToFitERKS0_+0x2e>
	...

0801b658 <_ZN8touchgfx11Application11getInstanceEv>:
 801b658:	4b01      	ldr	r3, [pc, #4]	@ (801b660 <_ZN8touchgfx11Application11getInstanceEv+0x8>)
 801b65a:	6818      	ldr	r0, [r3, #0]
 801b65c:	4770      	bx	lr
 801b65e:	bf00      	nop
 801b660:	2400b8cc 	.word	0x2400b8cc

0801b664 <_ZN8touchgfx11Application19registerTimerWidgetEPNS_8DrawableE>:
 801b664:	b570      	push	{r4, r5, r6, lr}
 801b666:	2200      	movs	r2, #0
 801b668:	f8b0 3084 	ldrh.w	r3, [r0, #132]	@ 0x84
 801b66c:	1d04      	adds	r4, r0, #4
 801b66e:	b295      	uxth	r5, r2
 801b670:	42ab      	cmp	r3, r5
 801b672:	d90e      	bls.n	801b692 <_ZN8touchgfx11Application19registerTimerWidgetEPNS_8DrawableE+0x2e>
 801b674:	f854 6b04 	ldr.w	r6, [r4], #4
 801b678:	4615      	mov	r5, r2
 801b67a:	3201      	adds	r2, #1
 801b67c:	428e      	cmp	r6, r1
 801b67e:	d1f6      	bne.n	801b66e <_ZN8touchgfx11Application19registerTimerWidgetEPNS_8DrawableE+0xa>
 801b680:	4428      	add	r0, r5
 801b682:	f890 3088 	ldrb.w	r3, [r0, #136]	@ 0x88
 801b686:	2bff      	cmp	r3, #255	@ 0xff
 801b688:	d002      	beq.n	801b690 <_ZN8touchgfx11Application19registerTimerWidgetEPNS_8DrawableE+0x2c>
 801b68a:	3301      	adds	r3, #1
 801b68c:	f880 3088 	strb.w	r3, [r0, #136]	@ 0x88
 801b690:	bd70      	pop	{r4, r5, r6, pc}
 801b692:	2b20      	cmp	r3, #32
 801b694:	d106      	bne.n	801b6a4 <_ZN8touchgfx11Application19registerTimerWidgetEPNS_8DrawableE+0x40>
 801b696:	4b09      	ldr	r3, [pc, #36]	@ (801b6bc <_ZN8touchgfx11Application19registerTimerWidgetEPNS_8DrawableE+0x58>)
 801b698:	f240 215f 	movw	r1, #607	@ 0x25f
 801b69c:	4a08      	ldr	r2, [pc, #32]	@ (801b6c0 <_ZN8touchgfx11Application19registerTimerWidgetEPNS_8DrawableE+0x5c>)
 801b69e:	4809      	ldr	r0, [pc, #36]	@ (801b6c4 <_ZN8touchgfx11Application19registerTimerWidgetEPNS_8DrawableE+0x60>)
 801b6a0:	f00f f948 	bl	802a934 <__assert_func>
 801b6a4:	18c2      	adds	r2, r0, r3
 801b6a6:	2401      	movs	r4, #1
 801b6a8:	f882 4088 	strb.w	r4, [r2, #136]	@ 0x88
 801b6ac:	191a      	adds	r2, r3, r4
 801b6ae:	f8a0 2084 	strh.w	r2, [r0, #132]	@ 0x84
 801b6b2:	eb00 0083 	add.w	r0, r0, r3, lsl #2
 801b6b6:	6041      	str	r1, [r0, #4]
 801b6b8:	e7ea      	b.n	801b690 <_ZN8touchgfx11Application19registerTimerWidgetEPNS_8DrawableE+0x2c>
 801b6ba:	bf00      	nop
 801b6bc:	0802ebd3 	.word	0x0802ebd3
 801b6c0:	0802ecb4 	.word	0x0802ecb4
 801b6c4:	0802eb72 	.word	0x0802eb72

0801b6c8 <_ZN8touchgfx11Application21unregisterTimerWidgetEPKNS_8DrawableE>:
 801b6c8:	b570      	push	{r4, r5, r6, lr}
 801b6ca:	2300      	movs	r3, #0
 801b6cc:	f8b0 6084 	ldrh.w	r6, [r0, #132]	@ 0x84
 801b6d0:	1d04      	adds	r4, r0, #4
 801b6d2:	b29a      	uxth	r2, r3
 801b6d4:	4296      	cmp	r6, r2
 801b6d6:	d90a      	bls.n	801b6ee <_ZN8touchgfx11Application21unregisterTimerWidgetEPKNS_8DrawableE+0x26>
 801b6d8:	f854 2b04 	ldr.w	r2, [r4], #4
 801b6dc:	428a      	cmp	r2, r1
 801b6de:	d107      	bne.n	801b6f0 <_ZN8touchgfx11Application21unregisterTimerWidgetEPKNS_8DrawableE+0x28>
 801b6e0:	18c5      	adds	r5, r0, r3
 801b6e2:	f895 2088 	ldrb.w	r2, [r5, #136]	@ 0x88
 801b6e6:	b11a      	cbz	r2, 801b6f0 <_ZN8touchgfx11Application21unregisterTimerWidgetEPKNS_8DrawableE+0x28>
 801b6e8:	3a01      	subs	r2, #1
 801b6ea:	f885 2088 	strb.w	r2, [r5, #136]	@ 0x88
 801b6ee:	bd70      	pop	{r4, r5, r6, pc}
 801b6f0:	3301      	adds	r3, #1
 801b6f2:	e7ee      	b.n	801b6d2 <_ZN8touchgfx11Application21unregisterTimerWidgetEPKNS_8DrawableE+0xa>

0801b6f4 <_ZN8touchgfx11Application20clearAllTimerWidgetsEv>:
 801b6f4:	2300      	movs	r3, #0
 801b6f6:	f100 0288 	add.w	r2, r0, #136	@ 0x88
 801b6fa:	30a8      	adds	r0, #168	@ 0xa8
 801b6fc:	f820 3c24 	strh.w	r3, [r0, #-36]
 801b700:	f802 3b01 	strb.w	r3, [r2], #1
 801b704:	4282      	cmp	r2, r0
 801b706:	d1fb      	bne.n	801b700 <_ZN8touchgfx11Application20clearAllTimerWidgetsEv+0xc>
 801b708:	4770      	bx	lr

0801b70a <_ZN8touchgfx6VectorINS_4RectELt8EEC1Ev>:
 801b70a:	4603      	mov	r3, r0
 801b70c:	f100 0140 	add.w	r1, r0, #64	@ 0x40
 801b710:	2200      	movs	r2, #0
 801b712:	801a      	strh	r2, [r3, #0]
 801b714:	3308      	adds	r3, #8
 801b716:	f823 2c06 	strh.w	r2, [r3, #-6]
 801b71a:	f823 2c04 	strh.w	r2, [r3, #-4]
 801b71e:	f823 2c02 	strh.w	r2, [r3, #-2]
 801b722:	428b      	cmp	r3, r1
 801b724:	d1f5      	bne.n	801b712 <_ZN8touchgfx6VectorINS_4RectELt8EEC1Ev+0x8>
 801b726:	f8a0 2040 	strh.w	r2, [r0, #64]	@ 0x40
 801b72a:	4770      	bx	lr

0801b72c <_ZN8touchgfx11ApplicationC1Ev>:
 801b72c:	b570      	push	{r4, r5, r6, lr}
 801b72e:	4b1a      	ldr	r3, [pc, #104]	@ (801b798 <_ZN8touchgfx11ApplicationC1Ev+0x6c>)
 801b730:	2500      	movs	r5, #0
 801b732:	4604      	mov	r4, r0
 801b734:	30a8      	adds	r0, #168	@ 0xa8
 801b736:	f840 3ca8 	str.w	r3, [r0, #-168]
 801b73a:	f820 5c24 	strh.w	r5, [r0, #-36]
 801b73e:	f7ff ffe4 	bl	801b70a <_ZN8touchgfx6VectorINS_4RectELt8EEC1Ev>
 801b742:	f104 00ea 	add.w	r0, r4, #234	@ 0xea
 801b746:	f7ff ffe0 	bl	801b70a <_ZN8touchgfx6VectorINS_4RectELt8EEC1Ev>
 801b74a:	f8a4 512c 	strh.w	r5, [r4, #300]	@ 0x12c
 801b74e:	f8a4 512e 	strh.w	r5, [r4, #302]	@ 0x12e
 801b752:	f8a4 5130 	strh.w	r5, [r4, #304]	@ 0x130
 801b756:	f8a4 5132 	strh.w	r5, [r4, #306]	@ 0x132
 801b75a:	f884 5134 	strb.w	r5, [r4, #308]	@ 0x134
 801b75e:	f884 5135 	strb.w	r5, [r4, #309]	@ 0x135
 801b762:	490e      	ldr	r1, [pc, #56]	@ (801b79c <_ZN8touchgfx11ApplicationC1Ev+0x70>)
 801b764:	480e      	ldr	r0, [pc, #56]	@ (801b7a0 <_ZN8touchgfx11ApplicationC1Ev+0x74>)
 801b766:	f00e ffa9 	bl	802a6bc <CRC_Lock>
 801b76a:	4e0e      	ldr	r6, [pc, #56]	@ (801b7a4 <_ZN8touchgfx11ApplicationC1Ev+0x78>)
 801b76c:	4b0e      	ldr	r3, [pc, #56]	@ (801b7a8 <_ZN8touchgfx11ApplicationC1Ev+0x7c>)
 801b76e:	b158      	cbz	r0, 801b788 <_ZN8touchgfx11ApplicationC1Ev+0x5c>
 801b770:	801d      	strh	r5, [r3, #0]
 801b772:	2300      	movs	r3, #0
 801b774:	4a0d      	ldr	r2, [pc, #52]	@ (801b7ac <_ZN8touchgfx11ApplicationC1Ev+0x80>)
 801b776:	4620      	mov	r0, r4
 801b778:	6013      	str	r3, [r2, #0]
 801b77a:	4a0d      	ldr	r2, [pc, #52]	@ (801b7b0 <_ZN8touchgfx11ApplicationC1Ev+0x84>)
 801b77c:	6033      	str	r3, [r6, #0]
 801b77e:	6013      	str	r3, [r2, #0]
 801b780:	f7ff ffb8 	bl	801b6f4 <_ZN8touchgfx11Application20clearAllTimerWidgetsEv>
 801b784:	4620      	mov	r0, r4
 801b786:	bd70      	pop	{r4, r5, r6, pc}
 801b788:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 801b78c:	2002      	movs	r0, #2
 801b78e:	801a      	strh	r2, [r3, #0]
 801b790:	6030      	str	r0, [r6, #0]
 801b792:	f001 fa81 	bl	801cc98 <_ZN8touchgfx6Screen4drawEv>
 801b796:	e7ec      	b.n	801b772 <_ZN8touchgfx11ApplicationC1Ev+0x46>
 801b798:	0802ec34 	.word	0x0802ec34
 801b79c:	b5e8b5cd 	.word	0xb5e8b5cd
 801b7a0:	f407a5c2 	.word	0xf407a5c2
 801b7a4:	2400b8bc 	.word	0x2400b8bc
 801b7a8:	24000056 	.word	0x24000056
 801b7ac:	2400b8cc 	.word	0x2400b8cc
 801b7b0:	2400b8c0 	.word	0x2400b8c0

0801b7b4 <_ZN8touchgfx6VectorINS_4RectELt8EE13quickRemoveAtEt>:
 801b7b4:	b510      	push	{r4, lr}
 801b7b6:	f8b0 3040 	ldrh.w	r3, [r0, #64]	@ 0x40
 801b7ba:	428b      	cmp	r3, r1
 801b7bc:	d806      	bhi.n	801b7cc <_ZN8touchgfx6VectorINS_4RectELt8EE13quickRemoveAtEt+0x18>
 801b7be:	4b0b      	ldr	r3, [pc, #44]	@ (801b7ec <_ZN8touchgfx6VectorINS_4RectELt8EE13quickRemoveAtEt+0x38>)
 801b7c0:	f44f 71de 	mov.w	r1, #444	@ 0x1bc
 801b7c4:	4a0a      	ldr	r2, [pc, #40]	@ (801b7f0 <_ZN8touchgfx6VectorINS_4RectELt8EE13quickRemoveAtEt+0x3c>)
 801b7c6:	480b      	ldr	r0, [pc, #44]	@ (801b7f4 <_ZN8touchgfx6VectorINS_4RectELt8EE13quickRemoveAtEt+0x40>)
 801b7c8:	f00f f8b4 	bl	802a934 <__assert_func>
 801b7cc:	3b01      	subs	r3, #1
 801b7ce:	b29b      	uxth	r3, r3
 801b7d0:	428b      	cmp	r3, r1
 801b7d2:	f8a0 3040 	strh.w	r3, [r0, #64]	@ 0x40
 801b7d6:	d908      	bls.n	801b7ea <_ZN8touchgfx6VectorINS_4RectELt8EE13quickRemoveAtEt+0x36>
 801b7d8:	eb00 03c3 	add.w	r3, r0, r3, lsl #3
 801b7dc:	eb00 04c1 	add.w	r4, r0, r1, lsl #3
 801b7e0:	681a      	ldr	r2, [r3, #0]
 801b7e2:	f840 2031 	str.w	r2, [r0, r1, lsl #3]
 801b7e6:	685a      	ldr	r2, [r3, #4]
 801b7e8:	6062      	str	r2, [r4, #4]
 801b7ea:	bd10      	pop	{r4, pc}
 801b7ec:	0802eb9c 	.word	0x0802eb9c
 801b7f0:	0802ecf9 	.word	0x0802ecf9
 801b7f4:	0802ebaa 	.word	0x0802ebaa

0801b7f8 <_ZN8touchgfx6VectorINS_4RectELt8EE3addES1_>:
 801b7f8:	b537      	push	{r0, r1, r2, r4, r5, lr}
 801b7fa:	466b      	mov	r3, sp
 801b7fc:	4604      	mov	r4, r0
 801b7fe:	e883 0006 	stmia.w	r3, {r1, r2}
 801b802:	f8b0 2040 	ldrh.w	r2, [r0, #64]	@ 0x40
 801b806:	2a07      	cmp	r2, #7
 801b808:	d906      	bls.n	801b818 <_ZN8touchgfx6VectorINS_4RectELt8EE3addES1_+0x20>
 801b80a:	4b09      	ldr	r3, [pc, #36]	@ (801b830 <_ZN8touchgfx6VectorINS_4RectELt8EE3addES1_+0x38>)
 801b80c:	f44f 71c1 	mov.w	r1, #386	@ 0x182
 801b810:	4a08      	ldr	r2, [pc, #32]	@ (801b834 <_ZN8touchgfx6VectorINS_4RectELt8EE3addES1_+0x3c>)
 801b812:	4809      	ldr	r0, [pc, #36]	@ (801b838 <_ZN8touchgfx6VectorINS_4RectELt8EE3addES1_+0x40>)
 801b814:	f00f f88e 	bl	802a934 <__assert_func>
 801b818:	1c51      	adds	r1, r2, #1
 801b81a:	eb00 05c2 	add.w	r5, r0, r2, lsl #3
 801b81e:	f8a0 1040 	strh.w	r1, [r0, #64]	@ 0x40
 801b822:	cb03      	ldmia	r3!, {r0, r1}
 801b824:	f844 0032 	str.w	r0, [r4, r2, lsl #3]
 801b828:	6069      	str	r1, [r5, #4]
 801b82a:	b003      	add	sp, #12
 801b82c:	bd30      	pop	{r4, r5, pc}
 801b82e:	bf00      	nop
 801b830:	0802ebfb 	.word	0x0802ebfb
 801b834:	0802ed8f 	.word	0x0802ed8f
 801b838:	0802ebaa 	.word	0x0802ebaa

0801b83c <_ZN8touchgfx11Application14invalidateAreaENS_4RectE>:
 801b83c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801b840:	b08d      	sub	sp, #52	@ 0x34
 801b842:	4683      	mov	fp, r0
 801b844:	ac08      	add	r4, sp, #32
 801b846:	4620      	mov	r0, r4
 801b848:	e884 0006 	stmia.w	r4, {r1, r2}
 801b84c:	f7fc f9d5 	bl	8017bfa <_ZNK8touchgfx4Rect7isEmptyEv>
 801b850:	2800      	cmp	r0, #0
 801b852:	d16a      	bne.n	801b92a <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0xee>
 801b854:	9402      	str	r4, [sp, #8]
 801b856:	f8bb 50e8 	ldrh.w	r5, [fp, #232]	@ 0xe8
 801b85a:	f10b 03a8 	add.w	r3, fp, #168	@ 0xa8
 801b85e:	2400      	movs	r4, #0
 801b860:	eb0b 06c5 	add.w	r6, fp, r5, lsl #3
 801b864:	9301      	str	r3, [sp, #4]
 801b866:	36a0      	adds	r6, #160	@ 0xa0
 801b868:	42a5      	cmp	r5, r4
 801b86a:	d00d      	beq.n	801b888 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x4c>
 801b86c:	eba6 01c4 	sub.w	r1, r6, r4, lsl #3
 801b870:	9802      	ldr	r0, [sp, #8]
 801b872:	f7ff fe89 	bl	801b588 <_ZNK8touchgfx4Rect8includesERKS0_>
 801b876:	b128      	cbz	r0, 801b884 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x48>
 801b878:	1e69      	subs	r1, r5, #1
 801b87a:	9801      	ldr	r0, [sp, #4]
 801b87c:	1b09      	subs	r1, r1, r4
 801b87e:	b289      	uxth	r1, r1
 801b880:	f7ff ff98 	bl	801b7b4 <_ZN8touchgfx6VectorINS_4RectELt8EE13quickRemoveAtEt>
 801b884:	3401      	adds	r4, #1
 801b886:	e7ef      	b.n	801b868 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x2c>
 801b888:	f8bb 70e8 	ldrh.w	r7, [fp, #232]	@ 0xe8
 801b88c:	1e7b      	subs	r3, r7, #1
 801b88e:	eb0b 0ac7 	add.w	sl, fp, r7, lsl #3
 801b892:	9703      	str	r7, [sp, #12]
 801b894:	9300      	str	r3, [sp, #0]
 801b896:	2400      	movs	r4, #0
 801b898:	4655      	mov	r5, sl
 801b89a:	9704      	str	r7, [sp, #16]
 801b89c:	4626      	mov	r6, r4
 801b89e:	9b04      	ldr	r3, [sp, #16]
 801b8a0:	2b00      	cmp	r3, #0
 801b8a2:	d078      	beq.n	801b996 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x15a>
 801b8a4:	9902      	ldr	r1, [sp, #8]
 801b8a6:	f105 00a0 	add.w	r0, r5, #160	@ 0xa0
 801b8aa:	f7ff fe4b 	bl	801b544 <_ZNK8touchgfx4Rect9intersectERKS0_>
 801b8ae:	b360      	cbz	r0, 801b90a <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0xce>
 801b8b0:	f9bd e020 	ldrsh.w	lr, [sp, #32]
 801b8b4:	f9b5 c0a0 	ldrsh.w	ip, [r5, #160]	@ 0xa0
 801b8b8:	f9bd 9022 	ldrsh.w	r9, [sp, #34]	@ 0x22
 801b8bc:	45e6      	cmp	lr, ip
 801b8be:	f9b5 80a2 	ldrsh.w	r8, [r5, #162]	@ 0xa2
 801b8c2:	db35      	blt.n	801b930 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0xf4>
 801b8c4:	f8bd 2024 	ldrh.w	r2, [sp, #36]	@ 0x24
 801b8c8:	f8b5 30a4 	ldrh.w	r3, [r5, #164]	@ 0xa4
 801b8cc:	4472      	add	r2, lr
 801b8ce:	4463      	add	r3, ip
 801b8d0:	b212      	sxth	r2, r2
 801b8d2:	b21b      	sxth	r3, r3
 801b8d4:	429a      	cmp	r2, r3
 801b8d6:	dc2b      	bgt.n	801b930 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0xf4>
 801b8d8:	fa1f f288 	uxth.w	r2, r8
 801b8dc:	f8b5 30a6 	ldrh.w	r3, [r5, #166]	@ 0xa6
 801b8e0:	45c1      	cmp	r9, r8
 801b8e2:	f8bd 1026 	ldrh.w	r1, [sp, #38]	@ 0x26
 801b8e6:	4413      	add	r3, r2
 801b8e8:	fa1f fc89 	uxth.w	ip, r9
 801b8ec:	b29b      	uxth	r3, r3
 801b8ee:	fa0f fe83 	sxth.w	lr, r3
 801b8f2:	db0f      	blt.n	801b914 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0xd8>
 801b8f4:	eba3 030c 	sub.w	r3, r3, ip
 801b8f8:	1ac9      	subs	r1, r1, r3
 801b8fa:	b209      	sxth	r1, r1
 801b8fc:	2900      	cmp	r1, #0
 801b8fe:	f8ad 1026 	strh.w	r1, [sp, #38]	@ 0x26
 801b902:	dd12      	ble.n	801b92a <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0xee>
 801b904:	f8ad e022 	strh.w	lr, [sp, #34]	@ 0x22
 801b908:	4604      	mov	r4, r0
 801b90a:	9b04      	ldr	r3, [sp, #16]
 801b90c:	3d08      	subs	r5, #8
 801b90e:	3b01      	subs	r3, #1
 801b910:	9304      	str	r3, [sp, #16]
 801b912:	e7c4      	b.n	801b89e <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x62>
 801b914:	4461      	add	r1, ip
 801b916:	b209      	sxth	r1, r1
 801b918:	4571      	cmp	r1, lr
 801b91a:	dc3a      	bgt.n	801b992 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x156>
 801b91c:	eba2 020c 	sub.w	r2, r2, ip
 801b920:	b212      	sxth	r2, r2
 801b922:	f8ad 2026 	strh.w	r2, [sp, #38]	@ 0x26
 801b926:	2a00      	cmp	r2, #0
 801b928:	dcee      	bgt.n	801b908 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0xcc>
 801b92a:	b00d      	add	sp, #52	@ 0x34
 801b92c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801b930:	45c1      	cmp	r9, r8
 801b932:	db2e      	blt.n	801b992 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x156>
 801b934:	f8bd 3026 	ldrh.w	r3, [sp, #38]	@ 0x26
 801b938:	4499      	add	r9, r3
 801b93a:	f8b5 30a6 	ldrh.w	r3, [r5, #166]	@ 0xa6
 801b93e:	4498      	add	r8, r3
 801b940:	fa0f f989 	sxth.w	r9, r9
 801b944:	fa0f f888 	sxth.w	r8, r8
 801b948:	45c1      	cmp	r9, r8
 801b94a:	dc22      	bgt.n	801b992 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x156>
 801b94c:	fa1f f28c 	uxth.w	r2, ip
 801b950:	f8b5 30a4 	ldrh.w	r3, [r5, #164]	@ 0xa4
 801b954:	45e6      	cmp	lr, ip
 801b956:	f8bd 1024 	ldrh.w	r1, [sp, #36]	@ 0x24
 801b95a:	4413      	add	r3, r2
 801b95c:	fa1f f88e 	uxth.w	r8, lr
 801b960:	b29b      	uxth	r3, r3
 801b962:	fa0f f983 	sxth.w	r9, r3
 801b966:	db0a      	blt.n	801b97e <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x142>
 801b968:	eba3 0308 	sub.w	r3, r3, r8
 801b96c:	1ac9      	subs	r1, r1, r3
 801b96e:	b209      	sxth	r1, r1
 801b970:	2900      	cmp	r1, #0
 801b972:	f8ad 1024 	strh.w	r1, [sp, #36]	@ 0x24
 801b976:	ddd8      	ble.n	801b92a <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0xee>
 801b978:	f8ad 9020 	strh.w	r9, [sp, #32]
 801b97c:	e7c4      	b.n	801b908 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0xcc>
 801b97e:	4441      	add	r1, r8
 801b980:	b209      	sxth	r1, r1
 801b982:	4549      	cmp	r1, r9
 801b984:	dc05      	bgt.n	801b992 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x156>
 801b986:	eba2 0208 	sub.w	r2, r2, r8
 801b98a:	b212      	sxth	r2, r2
 801b98c:	f8ad 2024 	strh.w	r2, [sp, #36]	@ 0x24
 801b990:	e7c9      	b.n	801b926 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0xea>
 801b992:	4606      	mov	r6, r0
 801b994:	e7b9      	b.n	801b90a <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0xce>
 801b996:	2c00      	cmp	r4, #0
 801b998:	f47f af7d 	bne.w	801b896 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x5a>
 801b99c:	2e00      	cmp	r6, #0
 801b99e:	f000 81dc 	beq.w	801bd5a <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x51e>
 801b9a2:	f9bd 7022 	ldrsh.w	r7, [sp, #34]	@ 0x22
 801b9a6:	4655      	mov	r5, sl
 801b9a8:	f9bd 6020 	ldrsh.w	r6, [sp, #32]
 801b9ac:	b2b9      	uxth	r1, r7
 801b9ae:	f8bd 2024 	ldrh.w	r2, [sp, #36]	@ 0x24
 801b9b2:	b2b3      	uxth	r3, r6
 801b9b4:	9104      	str	r1, [sp, #16]
 801b9b6:	9804      	ldr	r0, [sp, #16]
 801b9b8:	441a      	add	r2, r3
 801b9ba:	f8bd 1026 	ldrh.w	r1, [sp, #38]	@ 0x26
 801b9be:	b292      	uxth	r2, r2
 801b9c0:	4401      	add	r1, r0
 801b9c2:	fa0f f882 	sxth.w	r8, r2
 801b9c6:	b289      	uxth	r1, r1
 801b9c8:	9105      	str	r1, [sp, #20]
 801b9ca:	f9bd 9014 	ldrsh.w	r9, [sp, #20]
 801b9ce:	e9cd 2306 	strd	r2, r3, [sp, #24]
 801b9d2:	9b03      	ldr	r3, [sp, #12]
 801b9d4:	2b00      	cmp	r3, #0
 801b9d6:	d054      	beq.n	801ba82 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x246>
 801b9d8:	9902      	ldr	r1, [sp, #8]
 801b9da:	f105 00a0 	add.w	r0, r5, #160	@ 0xa0
 801b9de:	f7ff fdb1 	bl	801b544 <_ZNK8touchgfx4Rect9intersectERKS0_>
 801b9e2:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 801b9e6:	b1d8      	cbz	r0, 801ba20 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x1e4>
 801b9e8:	f9b5 e0a0 	ldrsh.w	lr, [r5, #160]	@ 0xa0
 801b9ec:	f9b5 10a2 	ldrsh.w	r1, [r5, #162]	@ 0xa2
 801b9f0:	4576      	cmp	r6, lr
 801b9f2:	dc26      	bgt.n	801ba42 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x206>
 801b9f4:	f8b5 c0a4 	ldrh.w	ip, [r5, #164]	@ 0xa4
 801b9f8:	44f4      	add	ip, lr
 801b9fa:	fa0f fc8c 	sxth.w	ip, ip
 801b9fe:	45e0      	cmp	r8, ip
 801ba00:	db1f      	blt.n	801ba42 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x206>
 801ba02:	428f      	cmp	r7, r1
 801ba04:	fa1f fc81 	uxth.w	ip, r1
 801ba08:	f8b5 10a6 	ldrh.w	r1, [r5, #166]	@ 0xa6
 801ba0c:	dc0f      	bgt.n	801ba2e <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x1f2>
 801ba0e:	9805      	ldr	r0, [sp, #20]
 801ba10:	f8a5 90a2 	strh.w	r9, [r5, #162]	@ 0xa2
 801ba14:	eba0 0c0c 	sub.w	ip, r0, ip
 801ba18:	eba1 010c 	sub.w	r1, r1, ip
 801ba1c:	f8a5 10a6 	strh.w	r1, [r5, #166]	@ 0xa6
 801ba20:	4620      	mov	r0, r4
 801ba22:	9903      	ldr	r1, [sp, #12]
 801ba24:	3d08      	subs	r5, #8
 801ba26:	4604      	mov	r4, r0
 801ba28:	3901      	subs	r1, #1
 801ba2a:	9103      	str	r1, [sp, #12]
 801ba2c:	e7cf      	b.n	801b9ce <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x192>
 801ba2e:	4461      	add	r1, ip
 801ba30:	b209      	sxth	r1, r1
 801ba32:	4549      	cmp	r1, r9
 801ba34:	dcf5      	bgt.n	801ba22 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x1e6>
 801ba36:	9904      	ldr	r1, [sp, #16]
 801ba38:	eba1 0c0c 	sub.w	ip, r1, ip
 801ba3c:	f8a5 c0a6 	strh.w	ip, [r5, #166]	@ 0xa6
 801ba40:	e7ee      	b.n	801ba20 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x1e4>
 801ba42:	428f      	cmp	r7, r1
 801ba44:	dced      	bgt.n	801ba22 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x1e6>
 801ba46:	f8b5 c0a6 	ldrh.w	ip, [r5, #166]	@ 0xa6
 801ba4a:	4461      	add	r1, ip
 801ba4c:	b209      	sxth	r1, r1
 801ba4e:	4589      	cmp	r9, r1
 801ba50:	dbe7      	blt.n	801ba22 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x1e6>
 801ba52:	4576      	cmp	r6, lr
 801ba54:	fa1f fc8e 	uxth.w	ip, lr
 801ba58:	f8b5 10a4 	ldrh.w	r1, [r5, #164]	@ 0xa4
 801ba5c:	dc08      	bgt.n	801ba70 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x234>
 801ba5e:	eba2 0c0c 	sub.w	ip, r2, ip
 801ba62:	f8a5 80a0 	strh.w	r8, [r5, #160]	@ 0xa0
 801ba66:	eba1 010c 	sub.w	r1, r1, ip
 801ba6a:	f8a5 10a4 	strh.w	r1, [r5, #164]	@ 0xa4
 801ba6e:	e7d7      	b.n	801ba20 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x1e4>
 801ba70:	4461      	add	r1, ip
 801ba72:	b209      	sxth	r1, r1
 801ba74:	4588      	cmp	r8, r1
 801ba76:	dbd4      	blt.n	801ba22 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x1e6>
 801ba78:	eba3 0c0c 	sub.w	ip, r3, ip
 801ba7c:	f8a5 c0a4 	strh.w	ip, [r5, #164]	@ 0xa4
 801ba80:	e7ce      	b.n	801ba20 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x1e4>
 801ba82:	2c00      	cmp	r4, #0
 801ba84:	f000 8169 	beq.w	801bd5a <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x51e>
 801ba88:	9b00      	ldr	r3, [sp, #0]
 801ba8a:	3301      	adds	r3, #1
 801ba8c:	f000 8165 	beq.w	801bd5a <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x51e>
 801ba90:	f10a 04a0 	add.w	r4, sl, #160	@ 0xa0
 801ba94:	9802      	ldr	r0, [sp, #8]
 801ba96:	4621      	mov	r1, r4
 801ba98:	f7ff fd76 	bl	801b588 <_ZNK8touchgfx4Rect8includesERKS0_>
 801ba9c:	b120      	cbz	r0, 801baa8 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x26c>
 801ba9e:	f8bd 1000 	ldrh.w	r1, [sp]
 801baa2:	9801      	ldr	r0, [sp, #4]
 801baa4:	f7ff fe86 	bl	801b7b4 <_ZN8touchgfx6VectorINS_4RectELt8EE13quickRemoveAtEt>
 801baa8:	9902      	ldr	r1, [sp, #8]
 801baaa:	4620      	mov	r0, r4
 801baac:	f7ff fd4a 	bl	801b544 <_ZNK8touchgfx4Rect9intersectERKS0_>
 801bab0:	2800      	cmp	r0, #0
 801bab2:	f000 809b 	beq.w	801bbec <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x3b0>
 801bab6:	f9bd 8020 	ldrsh.w	r8, [sp, #32]
 801baba:	f8bd 7024 	ldrh.w	r7, [sp, #36]	@ 0x24
 801babe:	fa1f f288 	uxth.w	r2, r8
 801bac2:	f9ba 40a0 	ldrsh.w	r4, [sl, #160]	@ 0xa0
 801bac6:	f8ba 30a4 	ldrh.w	r3, [sl, #164]	@ 0xa4
 801baca:	19d5      	adds	r5, r2, r7
 801bacc:	b2a1      	uxth	r1, r4
 801bace:	45a0      	cmp	r8, r4
 801bad0:	f9bd c022 	ldrsh.w	ip, [sp, #34]	@ 0x22
 801bad4:	fa1f f985 	uxth.w	r9, r5
 801bad8:	440b      	add	r3, r1
 801bada:	f9ba 00a2 	ldrsh.w	r0, [sl, #162]	@ 0xa2
 801bade:	fa0f f589 	sxth.w	r5, r9
 801bae2:	b29b      	uxth	r3, r3
 801bae4:	9503      	str	r5, [sp, #12]
 801bae6:	f8bb 50e8 	ldrh.w	r5, [fp, #232]	@ 0xe8
 801baea:	9507      	str	r5, [sp, #28]
 801baec:	f340 809d 	ble.w	801bc2a <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x3ee>
 801baf0:	1a52      	subs	r2, r2, r1
 801baf2:	4584      	cmp	ip, r0
 801baf4:	fa0f fe83 	sxth.w	lr, r3
 801baf8:	b292      	uxth	r2, r2
 801bafa:	b215      	sxth	r5, r2
 801bafc:	dd2f      	ble.n	801bb5e <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x322>
 801bafe:	9e00      	ldr	r6, [sp, #0]
 801bb00:	fa1f fc8c 	uxth.w	ip, ip
 801bb04:	b280      	uxth	r0, r0
 801bb06:	f8bd 1026 	ldrh.w	r1, [sp, #38]	@ 0x26
 801bb0a:	eb0b 08c6 	add.w	r8, fp, r6, lsl #3
 801bb0e:	9e03      	ldr	r6, [sp, #12]
 801bb10:	ebac 0300 	sub.w	r3, ip, r0
 801bb14:	448c      	add	ip, r1
 801bb16:	eba6 060e 	sub.w	r6, r6, lr
 801bb1a:	f8b8 e0ae 	ldrh.w	lr, [r8, #174]	@ 0xae
 801bb1e:	b29b      	uxth	r3, r3
 801bb20:	4470      	add	r0, lr
 801bb22:	fa0f fc8c 	sxth.w	ip, ip
 801bb26:	b21c      	sxth	r4, r3
 801bb28:	b200      	sxth	r0, r0
 801bb2a:	4366      	muls	r6, r4
 801bb2c:	ebac 0000 	sub.w	r0, ip, r0
 801bb30:	4368      	muls	r0, r5
 801bb32:	4286      	cmp	r6, r0
 801bb34:	db09      	blt.n	801bb4a <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x30e>
 801bb36:	f8b8 30a8 	ldrh.w	r3, [r8, #168]	@ 0xa8
 801bb3a:	f8a8 40ae 	strh.w	r4, [r8, #174]	@ 0xae
 801bb3e:	4417      	add	r7, r2
 801bb40:	f8ad 3020 	strh.w	r3, [sp, #32]
 801bb44:	f8ad 7024 	strh.w	r7, [sp, #36]	@ 0x24
 801bb48:	e685      	b.n	801b856 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x1a>
 801bb4a:	440b      	add	r3, r1
 801bb4c:	f8a8 50ac 	strh.w	r5, [r8, #172]	@ 0xac
 801bb50:	f8ad 3026 	strh.w	r3, [sp, #38]	@ 0x26
 801bb54:	f8b8 30aa 	ldrh.w	r3, [r8, #170]	@ 0xaa
 801bb58:	f8ad 3022 	strh.w	r3, [sp, #34]	@ 0x22
 801bb5c:	e67b      	b.n	801b856 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x1a>
 801bb5e:	9e03      	ldr	r6, [sp, #12]
 801bb60:	45b6      	cmp	lr, r6
 801bb62:	da28      	bge.n	801bbb6 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x37a>
 801bb64:	9b00      	ldr	r3, [sp, #0]
 801bb66:	eba6 060e 	sub.w	r6, r6, lr
 801bb6a:	f8bd 4026 	ldrh.w	r4, [sp, #38]	@ 0x26
 801bb6e:	eb0b 01c3 	add.w	r1, fp, r3, lsl #3
 801bb72:	eb04 030c 	add.w	r3, r4, ip
 801bb76:	fa1f f883 	uxth.w	r8, r3
 801bb7a:	f8b1 30ae 	ldrh.w	r3, [r1, #174]	@ 0xae
 801bb7e:	4403      	add	r3, r0
 801bb80:	fa0f f988 	sxth.w	r9, r8
 801bb84:	eba0 000c 	sub.w	r0, r0, ip
 801bb88:	eba3 0308 	sub.w	r3, r3, r8
 801bb8c:	4368      	muls	r0, r5
 801bb8e:	b29b      	uxth	r3, r3
 801bb90:	fa0f f883 	sxth.w	r8, r3
 801bb94:	fb08 f606 	mul.w	r6, r8, r6
 801bb98:	42b0      	cmp	r0, r6
 801bb9a:	dc06      	bgt.n	801bbaa <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x36e>
 801bb9c:	f8a1 90aa 	strh.w	r9, [r1, #170]	@ 0xaa
 801bba0:	f8a1 80ae 	strh.w	r8, [r1, #174]	@ 0xae
 801bba4:	f8b1 30a8 	ldrh.w	r3, [r1, #168]	@ 0xa8
 801bba8:	e7c9      	b.n	801bb3e <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x302>
 801bbaa:	4423      	add	r3, r4
 801bbac:	f8a1 50ac 	strh.w	r5, [r1, #172]	@ 0xac
 801bbb0:	f8ad 3026 	strh.w	r3, [sp, #38]	@ 0x26
 801bbb4:	e64f      	b.n	801b856 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x1a>
 801bbb6:	eba3 0309 	sub.w	r3, r3, r9
 801bbba:	9807      	ldr	r0, [sp, #28]
 801bbbc:	b29b      	uxth	r3, r3
 801bbbe:	2806      	cmp	r0, #6
 801bbc0:	fa0f fc83 	sxth.w	ip, r3
 801bbc4:	d818      	bhi.n	801bbf8 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x3bc>
 801bbc6:	4652      	mov	r2, sl
 801bbc8:	ab0a      	add	r3, sp, #40	@ 0x28
 801bbca:	f852 0fa0 	ldr.w	r0, [r2, #160]!
 801bbce:	6851      	ldr	r1, [r2, #4]
 801bbd0:	f8aa c0a4 	strh.w	ip, [sl, #164]	@ 0xa4
 801bbd4:	c303      	stmia	r3!, {r0, r1}
 801bbd6:	9b03      	ldr	r3, [sp, #12]
 801bbd8:	f8ad 502c 	strh.w	r5, [sp, #44]	@ 0x2c
 801bbdc:	f8aa 30a0 	strh.w	r3, [sl, #160]	@ 0xa0
 801bbe0:	ab0a      	add	r3, sp, #40	@ 0x28
 801bbe2:	9801      	ldr	r0, [sp, #4]
 801bbe4:	e893 0006 	ldmia.w	r3, {r1, r2}
 801bbe8:	f7ff fe06 	bl	801b7f8 <_ZN8touchgfx6VectorINS_4RectELt8EE3addES1_>
 801bbec:	9b00      	ldr	r3, [sp, #0]
 801bbee:	f1aa 0a08 	sub.w	sl, sl, #8
 801bbf2:	3b01      	subs	r3, #1
 801bbf4:	9300      	str	r3, [sp, #0]
 801bbf6:	e747      	b.n	801ba88 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x24c>
 801bbf8:	9800      	ldr	r0, [sp, #0]
 801bbfa:	45ac      	cmp	ip, r5
 801bbfc:	ea4f 00c0 	mov.w	r0, r0, lsl #3
 801bc00:	db0c      	blt.n	801bc1c <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x3e0>
 801bc02:	4417      	add	r7, r2
 801bc04:	4458      	add	r0, fp
 801bc06:	f8ad 4020 	strh.w	r4, [sp, #32]
 801bc0a:	b2bf      	uxth	r7, r7
 801bc0c:	f8a0 c0ac 	strh.w	ip, [r0, #172]	@ 0xac
 801bc10:	f8ad 7024 	strh.w	r7, [sp, #36]	@ 0x24
 801bc14:	440f      	add	r7, r1
 801bc16:	f8a0 70a8 	strh.w	r7, [r0, #168]	@ 0xa8
 801bc1a:	e61c      	b.n	801b856 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x1a>
 801bc1c:	4458      	add	r0, fp
 801bc1e:	f8a0 50ac 	strh.w	r5, [r0, #172]	@ 0xac
 801bc22:	443b      	add	r3, r7
 801bc24:	f8ad 3024 	strh.w	r3, [sp, #36]	@ 0x24
 801bc28:	e615      	b.n	801b856 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x1a>
 801bc2a:	fa1f f18c 	uxth.w	r1, ip
 801bc2e:	f8bd 5026 	ldrh.w	r5, [sp, #38]	@ 0x26
 801bc32:	b282      	uxth	r2, r0
 801bc34:	4584      	cmp	ip, r0
 801bc36:	eb01 0e05 	add.w	lr, r1, r5
 801bc3a:	9204      	str	r2, [sp, #16]
 801bc3c:	fa1f fe8e 	uxth.w	lr, lr
 801bc40:	9e04      	ldr	r6, [sp, #16]
 801bc42:	fa0f f28e 	sxth.w	r2, lr
 801bc46:	9205      	str	r2, [sp, #20]
 801bc48:	f8ba 20a6 	ldrh.w	r2, [sl, #166]	@ 0xa6
 801bc4c:	4432      	add	r2, r6
 801bc4e:	b292      	uxth	r2, r2
 801bc50:	9206      	str	r2, [sp, #24]
 801bc52:	da26      	bge.n	801bca2 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x466>
 801bc54:	eba3 0309 	sub.w	r3, r3, r9
 801bc58:	eba2 020e 	sub.w	r2, r2, lr
 801bc5c:	eba0 000c 	sub.w	r0, r0, ip
 801bc60:	eba4 0408 	sub.w	r4, r4, r8
 801bc64:	b29b      	uxth	r3, r3
 801bc66:	b292      	uxth	r2, r2
 801bc68:	fa0f fa83 	sxth.w	sl, r3
 801bc6c:	b211      	sxth	r1, r2
 801bc6e:	fb0a f000 	mul.w	r0, sl, r0
 801bc72:	434c      	muls	r4, r1
 801bc74:	42a0      	cmp	r0, r4
 801bc76:	9800      	ldr	r0, [sp, #0]
 801bc78:	ea4f 00c0 	mov.w	r0, r0, lsl #3
 801bc7c:	dc06      	bgt.n	801bc8c <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x450>
 801bc7e:	4458      	add	r0, fp
 801bc80:	9a05      	ldr	r2, [sp, #20]
 801bc82:	f8a0 10ae 	strh.w	r1, [r0, #174]	@ 0xae
 801bc86:	f8a0 20aa 	strh.w	r2, [r0, #170]	@ 0xaa
 801bc8a:	e7ca      	b.n	801bc22 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x3e6>
 801bc8c:	eb0b 0300 	add.w	r3, fp, r0
 801bc90:	9903      	ldr	r1, [sp, #12]
 801bc92:	f8a3 a0ac 	strh.w	sl, [r3, #172]	@ 0xac
 801bc96:	f8a3 10a8 	strh.w	r1, [r3, #168]	@ 0xa8
 801bc9a:	442a      	add	r2, r5
 801bc9c:	f8ad 2026 	strh.w	r2, [sp, #38]	@ 0x26
 801bca0:	e5d9      	b.n	801b856 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x1a>
 801bca2:	9e04      	ldr	r6, [sp, #16]
 801bca4:	9a03      	ldr	r2, [sp, #12]
 801bca6:	1b89      	subs	r1, r1, r6
 801bca8:	b21e      	sxth	r6, r3
 801bcaa:	b289      	uxth	r1, r1
 801bcac:	4296      	cmp	r6, r2
 801bcae:	fa0f fc81 	sxth.w	ip, r1
 801bcb2:	dd25      	ble.n	801bd00 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x4c4>
 801bcb4:	eba3 0309 	sub.w	r3, r3, r9
 801bcb8:	f9bd 2018 	ldrsh.w	r2, [sp, #24]
 801bcbc:	9e05      	ldr	r6, [sp, #20]
 801bcbe:	eba4 0408 	sub.w	r4, r4, r8
 801bcc2:	b29b      	uxth	r3, r3
 801bcc4:	eba6 0902 	sub.w	r9, r6, r2
 801bcc8:	fb0c f404 	mul.w	r4, ip, r4
 801bccc:	b218      	sxth	r0, r3
 801bcce:	9a00      	ldr	r2, [sp, #0]
 801bcd0:	fb00 f909 	mul.w	r9, r0, r9
 801bcd4:	00d2      	lsls	r2, r2, #3
 801bcd6:	454c      	cmp	r4, r9
 801bcd8:	db03      	blt.n	801bce2 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x4a6>
 801bcda:	445a      	add	r2, fp
 801bcdc:	f8a2 c0ae 	strh.w	ip, [r2, #174]	@ 0xae
 801bce0:	e79f      	b.n	801bc22 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x3e6>
 801bce2:	eb0b 0302 	add.w	r3, fp, r2
 801bce6:	9a03      	ldr	r2, [sp, #12]
 801bce8:	4429      	add	r1, r5
 801bcea:	f8a3 20a8 	strh.w	r2, [r3, #168]	@ 0xa8
 801bcee:	f8a3 00ac 	strh.w	r0, [r3, #172]	@ 0xac
 801bcf2:	f8b3 30aa 	ldrh.w	r3, [r3, #170]	@ 0xaa
 801bcf6:	f8ad 1026 	strh.w	r1, [sp, #38]	@ 0x26
 801bcfa:	f8ad 3022 	strh.w	r3, [sp, #34]	@ 0x22
 801bcfe:	e5aa      	b.n	801b856 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x1a>
 801bd00:	9b06      	ldr	r3, [sp, #24]
 801bd02:	9c07      	ldr	r4, [sp, #28]
 801bd04:	eba3 020e 	sub.w	r2, r3, lr
 801bd08:	2c06      	cmp	r4, #6
 801bd0a:	b292      	uxth	r2, r2
 801bd0c:	b213      	sxth	r3, r2
 801bd0e:	d80d      	bhi.n	801bd2c <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x4f0>
 801bd10:	4651      	mov	r1, sl
 801bd12:	aa0a      	add	r2, sp, #40	@ 0x28
 801bd14:	f851 0fa0 	ldr.w	r0, [r1, #160]!
 801bd18:	6849      	ldr	r1, [r1, #4]
 801bd1a:	f8aa 30a6 	strh.w	r3, [sl, #166]	@ 0xa6
 801bd1e:	9b05      	ldr	r3, [sp, #20]
 801bd20:	c203      	stmia	r2!, {r0, r1}
 801bd22:	f8aa 30a2 	strh.w	r3, [sl, #162]	@ 0xa2
 801bd26:	f8ad c02e 	strh.w	ip, [sp, #46]	@ 0x2e
 801bd2a:	e759      	b.n	801bbe0 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x3a4>
 801bd2c:	9c00      	ldr	r4, [sp, #0]
 801bd2e:	4563      	cmp	r3, ip
 801bd30:	ea4f 04c4 	mov.w	r4, r4, lsl #3
 801bd34:	db0d      	blt.n	801bd52 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x516>
 801bd36:	4429      	add	r1, r5
 801bd38:	9a04      	ldr	r2, [sp, #16]
 801bd3a:	445c      	add	r4, fp
 801bd3c:	f8ad 0022 	strh.w	r0, [sp, #34]	@ 0x22
 801bd40:	b289      	uxth	r1, r1
 801bd42:	f8a4 30ae 	strh.w	r3, [r4, #174]	@ 0xae
 801bd46:	f8ad 1026 	strh.w	r1, [sp, #38]	@ 0x26
 801bd4a:	4411      	add	r1, r2
 801bd4c:	f8a4 10aa 	strh.w	r1, [r4, #170]	@ 0xaa
 801bd50:	e581      	b.n	801b856 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x1a>
 801bd52:	445c      	add	r4, fp
 801bd54:	f8a4 c0ae 	strh.w	ip, [r4, #174]	@ 0xae
 801bd58:	e79f      	b.n	801bc9a <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x45e>
 801bd5a:	f8bb 70e8 	ldrh.w	r7, [fp, #232]	@ 0xe8
 801bd5e:	2f07      	cmp	r7, #7
 801bd60:	d806      	bhi.n	801bd70 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x534>
 801bd62:	ab08      	add	r3, sp, #32
 801bd64:	9801      	ldr	r0, [sp, #4]
 801bd66:	e893 0006 	ldmia.w	r3, {r1, r2}
 801bd6a:	f7ff fd45 	bl	801b7f8 <_ZN8touchgfx6VectorINS_4RectELt8EE3addES1_>
 801bd6e:	e5dc      	b.n	801b92a <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0xee>
 801bd70:	f107 39ff 	add.w	r9, r7, #4294967295
 801bd74:	f10b 03a8 	add.w	r3, fp, #168	@ 0xa8
 801bd78:	eb0b 07c7 	add.w	r7, fp, r7, lsl #3
 801bd7c:	f06f 4a00 	mvn.w	sl, #2147483648	@ 0x80000000
 801bd80:	f04f 35ff 	mov.w	r5, #4294967295
 801bd84:	2400      	movs	r4, #0
 801bd86:	9304      	str	r3, [sp, #16]
 801bd88:	f9b7 30a4 	ldrsh.w	r3, [r7, #164]	@ 0xa4
 801bd8c:	f109 32ff 	add.w	r2, r9, #4294967295
 801bd90:	9300      	str	r3, [sp, #0]
 801bd92:	4690      	mov	r8, r2
 801bd94:	f9b7 30a6 	ldrsh.w	r3, [r7, #166]	@ 0xa6
 801bd98:	9303      	str	r3, [sp, #12]
 801bd9a:	f107 03a0 	add.w	r3, r7, #160	@ 0xa0
 801bd9e:	f1b8 3fff 	cmp.w	r8, #4294967295
 801bda2:	6818      	ldr	r0, [r3, #0]
 801bda4:	f10d 0c28 	add.w	ip, sp, #40	@ 0x28
 801bda8:	9206      	str	r2, [sp, #24]
 801bdaa:	bf16      	itet	ne
 801bdac:	9904      	ldrne	r1, [sp, #16]
 801bdae:	f8dd e008 	ldreq.w	lr, [sp, #8]
 801bdb2:	eb01 0ec8 	addne.w	lr, r1, r8, lsl #3
 801bdb6:	9305      	str	r3, [sp, #20]
 801bdb8:	f8be 1006 	ldrh.w	r1, [lr, #6]
 801bdbc:	f8be 6004 	ldrh.w	r6, [lr, #4]
 801bdc0:	fb16 f601 	smulbb	r6, r6, r1
 801bdc4:	6859      	ldr	r1, [r3, #4]
 801bdc6:	e8ac 0003 	stmia.w	ip!, {r0, r1}
 801bdca:	4671      	mov	r1, lr
 801bdcc:	a80a      	add	r0, sp, #40	@ 0x28
 801bdce:	f7ff fbfd 	bl	801b5cc <_ZN8touchgfx4Rect11expandToFitERKS0_>
 801bdd2:	f8bd 002e 	ldrh.w	r0, [sp, #46]	@ 0x2e
 801bdd6:	f8bd 102c 	ldrh.w	r1, [sp, #44]	@ 0x2c
 801bdda:	9b03      	ldr	r3, [sp, #12]
 801bddc:	9a00      	ldr	r2, [sp, #0]
 801bdde:	fb11 f100 	smulbb	r1, r1, r0
 801bde2:	2008      	movs	r0, #8
 801bde4:	fb02 6603 	mla	r6, r2, r3, r6
 801bde8:	1b8e      	subs	r6, r1, r6
 801bdea:	fb91 f1f0 	sdiv	r1, r1, r0
 801bdee:	42b1      	cmp	r1, r6
 801bdf0:	dc21      	bgt.n	801be36 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x5fa>
 801bdf2:	4556      	cmp	r6, sl
 801bdf4:	e9dd 3205 	ldrd	r3, r2, [sp, #20]
 801bdf8:	da03      	bge.n	801be02 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x5c6>
 801bdfa:	b1e6      	cbz	r6, 801be36 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x5fa>
 801bdfc:	46b2      	mov	sl, r6
 801bdfe:	4645      	mov	r5, r8
 801be00:	464c      	mov	r4, r9
 801be02:	f108 38ff 	add.w	r8, r8, #4294967295
 801be06:	f118 0f02 	cmn.w	r8, #2
 801be0a:	d1c8      	bne.n	801bd9e <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x562>
 801be0c:	f1b2 3fff 	cmp.w	r2, #4294967295
 801be10:	f1a7 0708 	sub.w	r7, r7, #8
 801be14:	4691      	mov	r9, r2
 801be16:	d1b7      	bne.n	801bd88 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x54c>
 801be18:	9b01      	ldr	r3, [sp, #4]
 801be1a:	b2a6      	uxth	r6, r4
 801be1c:	00e4      	lsls	r4, r4, #3
 801be1e:	1918      	adds	r0, r3, r4
 801be20:	1c6b      	adds	r3, r5, #1
 801be22:	d10b      	bne.n	801be3c <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x600>
 801be24:	4601      	mov	r1, r0
 801be26:	9802      	ldr	r0, [sp, #8]
 801be28:	f7ff fbd0 	bl	801b5cc <_ZN8touchgfx4Rect11expandToFitERKS0_>
 801be2c:	4631      	mov	r1, r6
 801be2e:	9801      	ldr	r0, [sp, #4]
 801be30:	f7ff fcc0 	bl	801b7b4 <_ZN8touchgfx6VectorINS_4RectELt8EE13quickRemoveAtEt>
 801be34:	e50f      	b.n	801b856 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x1a>
 801be36:	4645      	mov	r5, r8
 801be38:	464c      	mov	r4, r9
 801be3a:	e7ed      	b.n	801be18 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x5dc>
 801be3c:	9b01      	ldr	r3, [sp, #4]
 801be3e:	00ed      	lsls	r5, r5, #3
 801be40:	445c      	add	r4, fp
 801be42:	1959      	adds	r1, r3, r5
 801be44:	445d      	add	r5, fp
 801be46:	f7ff fbc1 	bl	801b5cc <_ZN8touchgfx4Rect11expandToFitERKS0_>
 801be4a:	9b02      	ldr	r3, [sp, #8]
 801be4c:	cb03      	ldmia	r3!, {r0, r1}
 801be4e:	9b02      	ldr	r3, [sp, #8]
 801be50:	f8c5 00a8 	str.w	r0, [r5, #168]	@ 0xa8
 801be54:	f8c5 10ac 	str.w	r1, [r5, #172]	@ 0xac
 801be58:	f854 0fa8 	ldr.w	r0, [r4, #168]!
 801be5c:	6861      	ldr	r1, [r4, #4]
 801be5e:	c303      	stmia	r3!, {r0, r1}
 801be60:	e7e4      	b.n	801be2c <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x5f0>
	...

0801be64 <_ZN8touchgfx11Application4drawERNS_4RectE>:
 801be64:	4b1d      	ldr	r3, [pc, #116]	@ (801bedc <_ZN8touchgfx11Application4drawERNS_4RectE+0x78>)
 801be66:	b530      	push	{r4, r5, lr}
 801be68:	f9b3 2000 	ldrsh.w	r2, [r3]
 801be6c:	b085      	sub	sp, #20
 801be6e:	4b1c      	ldr	r3, [pc, #112]	@ (801bee0 <_ZN8touchgfx11Application4drawERNS_4RectE+0x7c>)
 801be70:	460c      	mov	r4, r1
 801be72:	2100      	movs	r1, #0
 801be74:	4605      	mov	r5, r0
 801be76:	f9b3 3000 	ldrsh.w	r3, [r3]
 801be7a:	6820      	ldr	r0, [r4, #0]
 801be7c:	9100      	str	r1, [sp, #0]
 801be7e:	f8ad 3006 	strh.w	r3, [sp, #6]
 801be82:	ab02      	add	r3, sp, #8
 801be84:	6861      	ldr	r1, [r4, #4]
 801be86:	f8ad 2004 	strh.w	r2, [sp, #4]
 801be8a:	c303      	stmia	r3!, {r0, r1}
 801be8c:	4669      	mov	r1, sp
 801be8e:	a802      	add	r0, sp, #8
 801be90:	f7fb fe70 	bl	8017b74 <_ZN8touchgfx4RectaNERKS0_>
 801be94:	ab02      	add	r3, sp, #8
 801be96:	cb03      	ldmia	r3!, {r0, r1}
 801be98:	4b12      	ldr	r3, [pc, #72]	@ (801bee4 <_ZN8touchgfx11Application4drawERNS_4RectE+0x80>)
 801be9a:	6020      	str	r0, [r4, #0]
 801be9c:	6818      	ldr	r0, [r3, #0]
 801be9e:	6061      	str	r1, [r4, #4]
 801bea0:	b138      	cbz	r0, 801beb2 <_ZN8touchgfx11Application4drawERNS_4RectE+0x4e>
 801bea2:	f895 3134 	ldrb.w	r3, [r5, #308]	@ 0x134
 801bea6:	b133      	cbz	r3, 801beb6 <_ZN8touchgfx11Application4drawERNS_4RectE+0x52>
 801bea8:	6821      	ldr	r1, [r4, #0]
 801beaa:	4628      	mov	r0, r5
 801beac:	6862      	ldr	r2, [r4, #4]
 801beae:	f7ff fcc5 	bl	801b83c <_ZN8touchgfx11Application14invalidateAreaENS_4RectE>
 801beb2:	b005      	add	sp, #20
 801beb4:	bd30      	pop	{r4, r5, pc}
 801beb6:	6803      	ldr	r3, [r0, #0]
 801beb8:	4621      	mov	r1, r4
 801beba:	689b      	ldr	r3, [r3, #8]
 801bebc:	4798      	blx	r3
 801bebe:	4b0a      	ldr	r3, [pc, #40]	@ (801bee8 <_ZN8touchgfx11Application4drawERNS_4RectE+0x84>)
 801bec0:	6818      	ldr	r0, [r3, #0]
 801bec2:	b118      	cbz	r0, 801becc <_ZN8touchgfx11Application4drawERNS_4RectE+0x68>
 801bec4:	6803      	ldr	r3, [r0, #0]
 801bec6:	4621      	mov	r1, r4
 801bec8:	689b      	ldr	r3, [r3, #8]
 801beca:	4798      	blx	r3
 801becc:	4b07      	ldr	r3, [pc, #28]	@ (801beec <_ZN8touchgfx11Application4drawERNS_4RectE+0x88>)
 801bece:	4621      	mov	r1, r4
 801bed0:	6818      	ldr	r0, [r3, #0]
 801bed2:	6803      	ldr	r3, [r0, #0]
 801bed4:	69db      	ldr	r3, [r3, #28]
 801bed6:	4798      	blx	r3
 801bed8:	e7eb      	b.n	801beb2 <_ZN8touchgfx11Application4drawERNS_4RectE+0x4e>
 801beda:	bf00      	nop
 801bedc:	2400b874 	.word	0x2400b874
 801bee0:	2400b876 	.word	0x2400b876
 801bee4:	2400b8bc 	.word	0x2400b8bc
 801bee8:	2400b8b8 	.word	0x2400b8b8
 801beec:	2400b880 	.word	0x2400b880

0801bef0 <_ZN8touchgfx11Application19cacheDrawOperationsEb>:
 801bef0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801bef4:	4604      	mov	r4, r0
 801bef6:	b09b      	sub	sp, #108	@ 0x6c
 801bef8:	f880 1134 	strb.w	r1, [r0, #308]	@ 0x134
 801befc:	b129      	cbz	r1, 801bf0a <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x1a>
 801befe:	2300      	movs	r3, #0
 801bf00:	f8a0 30e8 	strh.w	r3, [r0, #232]	@ 0xe8
 801bf04:	b01b      	add	sp, #108	@ 0x6c
 801bf06:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801bf0a:	f500 7696 	add.w	r6, r0, #300	@ 0x12c
 801bf0e:	4630      	mov	r0, r6
 801bf10:	f7fb fe73 	bl	8017bfa <_ZNK8touchgfx4Rect7isEmptyEv>
 801bf14:	4605      	mov	r5, r0
 801bf16:	b940      	cbnz	r0, 801bf2a <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x3a>
 801bf18:	4620      	mov	r0, r4
 801bf1a:	e896 0006 	ldmia.w	r6, {r1, r2}
 801bf1e:	f7ff fc8d 	bl	801b83c <_ZN8touchgfx11Application14invalidateAreaENS_4RectE>
 801bf22:	f8c4 512c 	str.w	r5, [r4, #300]	@ 0x12c
 801bf26:	f8c4 5130 	str.w	r5, [r4, #304]	@ 0x130
 801bf2a:	4ba6      	ldr	r3, [pc, #664]	@ (801c1c4 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x2d4>)
 801bf2c:	681b      	ldr	r3, [r3, #0]
 801bf2e:	b33b      	cbz	r3, 801bf80 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x90>
 801bf30:	4da5      	ldr	r5, [pc, #660]	@ (801c1c8 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x2d8>)
 801bf32:	4628      	mov	r0, r5
 801bf34:	f7fb fe61 	bl	8017bfa <_ZNK8touchgfx4Rect7isEmptyEv>
 801bf38:	4606      	mov	r6, r0
 801bf3a:	bb08      	cbnz	r0, 801bf80 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x90>
 801bf3c:	4628      	mov	r0, r5
 801bf3e:	f7ff f9b1 	bl	801b2a4 <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERNS_4RectE>
 801bf42:	6829      	ldr	r1, [r5, #0]
 801bf44:	686a      	ldr	r2, [r5, #4]
 801bf46:	4620      	mov	r0, r4
 801bf48:	f7ff fc78 	bl	801b83c <_ZN8touchgfx11Application14invalidateAreaENS_4RectE>
 801bf4c:	802e      	strh	r6, [r5, #0]
 801bf4e:	806e      	strh	r6, [r5, #2]
 801bf50:	80ae      	strh	r6, [r5, #4]
 801bf52:	80ee      	strh	r6, [r5, #6]
 801bf54:	4f9d      	ldr	r7, [pc, #628]	@ (801c1cc <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x2dc>)
 801bf56:	a809      	add	r0, sp, #36	@ 0x24
 801bf58:	f7ff fbd7 	bl	801b70a <_ZN8touchgfx6VectorINS_4RectELt8EEC1Ev>
 801bf5c:	883d      	ldrh	r5, [r7, #0]
 801bf5e:	462e      	mov	r6, r5
 801bf60:	f8b4 30e8 	ldrh.w	r3, [r4, #232]	@ 0xe8
 801bf64:	42b3      	cmp	r3, r6
 801bf66:	d910      	bls.n	801bf8a <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x9a>
 801bf68:	eb04 03c6 	add.w	r3, r4, r6, lsl #3
 801bf6c:	3601      	adds	r6, #1
 801bf6e:	a809      	add	r0, sp, #36	@ 0x24
 801bf70:	f8d3 10a8 	ldr.w	r1, [r3, #168]	@ 0xa8
 801bf74:	b2b6      	uxth	r6, r6
 801bf76:	f8d3 20ac 	ldr.w	r2, [r3, #172]	@ 0xac
 801bf7a:	f7ff fc3d 	bl	801b7f8 <_ZN8touchgfx6VectorINS_4RectELt8EE3addES1_>
 801bf7e:	e7ef      	b.n	801bf60 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x70>
 801bf80:	f8b4 30e8 	ldrh.w	r3, [r4, #232]	@ 0xe8
 801bf84:	2b00      	cmp	r3, #0
 801bf86:	d1e5      	bne.n	801bf54 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x64>
 801bf88:	e7bc      	b.n	801bf04 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x14>
 801bf8a:	462e      	mov	r6, r5
 801bf8c:	f8b4 312a 	ldrh.w	r3, [r4, #298]	@ 0x12a
 801bf90:	42b3      	cmp	r3, r6
 801bf92:	d90b      	bls.n	801bfac <_ZN8touchgfx11Application19cacheDrawOperationsEb+0xbc>
 801bf94:	eb04 03c6 	add.w	r3, r4, r6, lsl #3
 801bf98:	3601      	adds	r6, #1
 801bf9a:	4620      	mov	r0, r4
 801bf9c:	f8d3 10ea 	ldr.w	r1, [r3, #234]	@ 0xea
 801bfa0:	b2b6      	uxth	r6, r6
 801bfa2:	f8d3 20ee 	ldr.w	r2, [r3, #238]	@ 0xee
 801bfa6:	f7ff fc49 	bl	801b83c <_ZN8touchgfx11Application14invalidateAreaENS_4RectE>
 801bfaa:	e7ef      	b.n	801bf8c <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x9c>
 801bfac:	4a88      	ldr	r2, [pc, #544]	@ (801c1d0 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x2e0>)
 801bfae:	6813      	ldr	r3, [r2, #0]
 801bfb0:	4690      	mov	r8, r2
 801bfb2:	f893 3048 	ldrb.w	r3, [r3, #72]	@ 0x48
 801bfb6:	2b01      	cmp	r3, #1
 801bfb8:	f040 8094 	bne.w	801c0e4 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x1f4>
 801bfbc:	eb04 03c5 	add.w	r3, r4, r5, lsl #3
 801bfc0:	f8b4 00e8 	ldrh.w	r0, [r4, #232]	@ 0xe8
 801bfc4:	f04f 0900 	mov.w	r9, #0
 801bfc8:	33aa      	adds	r3, #170	@ 0xaa
 801bfca:	42a8      	cmp	r0, r5
 801bfcc:	f103 0308 	add.w	r3, r3, #8
 801bfd0:	dd0a      	ble.n	801bfe8 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0xf8>
 801bfd2:	f833 2c08 	ldrh.w	r2, [r3, #-8]
 801bfd6:	3501      	adds	r5, #1
 801bfd8:	f833 1c04 	ldrh.w	r1, [r3, #-4]
 801bfdc:	440a      	add	r2, r1
 801bfde:	b212      	sxth	r2, r2
 801bfe0:	4591      	cmp	r9, r2
 801bfe2:	bfb8      	it	lt
 801bfe4:	4691      	movlt	r9, r2
 801bfe6:	e7f0      	b.n	801bfca <_ZN8touchgfx11Application19cacheDrawOperationsEb+0xda>
 801bfe8:	4b7a      	ldr	r3, [pc, #488]	@ (801c1d4 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x2e4>)
 801bfea:	4e7b      	ldr	r6, [pc, #492]	@ (801c1d8 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x2e8>)
 801bfec:	881d      	ldrh	r5, [r3, #0]
 801bfee:	2300      	movs	r3, #0
 801bff0:	2d0f      	cmp	r5, #15
 801bff2:	bf8c      	ite	hi
 801bff4:	08ed      	lsrhi	r5, r5, #3
 801bff6:	2501      	movls	r5, #1
 801bff8:	e9cd 3305 	strd	r3, r3, [sp, #20]
 801bffc:	f8bd 3016 	ldrh.w	r3, [sp, #22]
 801c000:	f8bd 101a 	ldrh.w	r1, [sp, #26]
 801c004:	f8d8 0000 	ldr.w	r0, [r8]
 801c008:	440b      	add	r3, r1
 801c00a:	6802      	ldr	r2, [r0, #0]
 801c00c:	b21b      	sxth	r3, r3
 801c00e:	4599      	cmp	r9, r3
 801c010:	dd4b      	ble.n	801c0aa <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x1ba>
 801c012:	f8d2 3094 	ldr.w	r3, [r2, #148]	@ 0x94
 801c016:	4798      	blx	r3
 801c018:	f8bd 201a 	ldrh.w	r2, [sp, #26]
 801c01c:	f8bd 3016 	ldrh.w	r3, [sp, #22]
 801c020:	4413      	add	r3, r2
 801c022:	b21b      	sxth	r3, r3
 801c024:	195a      	adds	r2, r3, r5
 801c026:	4290      	cmp	r0, r2
 801c028:	da07      	bge.n	801c03a <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x14a>
 801c02a:	4581      	cmp	r9, r0
 801c02c:	dd05      	ble.n	801c03a <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x14a>
 801c02e:	4298      	cmp	r0, r3
 801c030:	da33      	bge.n	801c09a <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x1aa>
 801c032:	2b00      	cmp	r3, #0
 801c034:	dd31      	ble.n	801c09a <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x1aa>
 801c036:	4648      	mov	r0, r9
 801c038:	e004      	b.n	801c044 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x154>
 801c03a:	4298      	cmp	r0, r3
 801c03c:	dbfb      	blt.n	801c036 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x146>
 801c03e:	4548      	cmp	r0, r9
 801c040:	bfa8      	it	ge
 801c042:	4648      	movge	r0, r9
 801c044:	f9b6 2000 	ldrsh.w	r2, [r6]
 801c048:	2100      	movs	r1, #0
 801c04a:	1ac0      	subs	r0, r0, r3
 801c04c:	f8b7 a000 	ldrh.w	sl, [r7]
 801c050:	f8ad 1014 	strh.w	r1, [sp, #20]
 801c054:	f8ad 3016 	strh.w	r3, [sp, #22]
 801c058:	f8ad 2018 	strh.w	r2, [sp, #24]
 801c05c:	f8ad 001a 	strh.w	r0, [sp, #26]
 801c060:	f8b4 30e8 	ldrh.w	r3, [r4, #232]	@ 0xe8
 801c064:	4553      	cmp	r3, sl
 801c066:	d9c9      	bls.n	801bffc <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x10c>
 801c068:	eb04 02ca 	add.w	r2, r4, sl, lsl #3
 801c06c:	ab07      	add	r3, sp, #28
 801c06e:	f852 0fa8 	ldr.w	r0, [r2, #168]!
 801c072:	6851      	ldr	r1, [r2, #4]
 801c074:	c303      	stmia	r3!, {r0, r1}
 801c076:	a807      	add	r0, sp, #28
 801c078:	a905      	add	r1, sp, #20
 801c07a:	f7fb fd7b 	bl	8017b74 <_ZN8touchgfx4RectaNERKS0_>
 801c07e:	a807      	add	r0, sp, #28
 801c080:	f7fb fdbb 	bl	8017bfa <_ZNK8touchgfx4Rect7isEmptyEv>
 801c084:	b920      	cbnz	r0, 801c090 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x1a0>
 801c086:	6823      	ldr	r3, [r4, #0]
 801c088:	a907      	add	r1, sp, #28
 801c08a:	4620      	mov	r0, r4
 801c08c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 801c08e:	4798      	blx	r3
 801c090:	f10a 0a01 	add.w	sl, sl, #1
 801c094:	fa1f fa8a 	uxth.w	sl, sl
 801c098:	e7e2      	b.n	801c060 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x170>
 801c09a:	f8d8 0000 	ldr.w	r0, [r8]
 801c09e:	2101      	movs	r1, #1
 801c0a0:	6803      	ldr	r3, [r0, #0]
 801c0a2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 801c0a6:	4798      	blx	r3
 801c0a8:	e7a8      	b.n	801bffc <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x10c>
 801c0aa:	6a53      	ldr	r3, [r2, #36]	@ 0x24
 801c0ac:	4798      	blx	r3
 801c0ae:	4b4b      	ldr	r3, [pc, #300]	@ (801c1dc <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x2ec>)
 801c0b0:	781b      	ldrb	r3, [r3, #0]
 801c0b2:	2b00      	cmp	r3, #0
 801c0b4:	f43f af26 	beq.w	801bf04 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x14>
 801c0b8:	2300      	movs	r3, #0
 801c0ba:	883d      	ldrh	r5, [r7, #0]
 801c0bc:	34ea      	adds	r4, #234	@ 0xea
 801c0be:	f8a4 3040 	strh.w	r3, [r4, #64]	@ 0x40
 801c0c2:	f8bd 3064 	ldrh.w	r3, [sp, #100]	@ 0x64
 801c0c6:	42ab      	cmp	r3, r5
 801c0c8:	f67f af1c 	bls.w	801bf04 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x14>
 801c0cc:	ab1a      	add	r3, sp, #104	@ 0x68
 801c0ce:	4620      	mov	r0, r4
 801c0d0:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 801c0d4:	3501      	adds	r5, #1
 801c0d6:	3b44      	subs	r3, #68	@ 0x44
 801c0d8:	b2ad      	uxth	r5, r5
 801c0da:	e893 0006 	ldmia.w	r3, {r1, r2}
 801c0de:	f7ff fb8b 	bl	801b7f8 <_ZN8touchgfx6VectorINS_4RectELt8EE3addES1_>
 801c0e2:	e7ee      	b.n	801c0c2 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x1d2>
 801c0e4:	2b02      	cmp	r3, #2
 801c0e6:	f040 813d 	bne.w	801c364 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x474>
 801c0ea:	4b3d      	ldr	r3, [pc, #244]	@ (801c1e0 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x2f0>)
 801c0ec:	781b      	ldrb	r3, [r3, #0]
 801c0ee:	2b01      	cmp	r3, #1
 801c0f0:	d02c      	beq.n	801c14c <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x25c>
 801c0f2:	f104 0ba8 	add.w	fp, r4, #168	@ 0xa8
 801c0f6:	883a      	ldrh	r2, [r7, #0]
 801c0f8:	f8b4 10e8 	ldrh.w	r1, [r4, #232]	@ 0xe8
 801c0fc:	3201      	adds	r2, #1
 801c0fe:	b292      	uxth	r2, r2
 801c100:	2900      	cmp	r1, #0
 801c102:	d0d4      	beq.n	801c0ae <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x1be>
 801c104:	f8b4 50aa 	ldrh.w	r5, [r4, #170]	@ 0xaa
 801c108:	4610      	mov	r0, r2
 801c10a:	f8b4 30ae 	ldrh.w	r3, [r4, #174]	@ 0xae
 801c10e:	f04f 0a00 	mov.w	sl, #0
 801c112:	441d      	add	r5, r3
 801c114:	b22d      	sxth	r5, r5
 801c116:	b283      	uxth	r3, r0
 801c118:	ea4f 06ca 	mov.w	r6, sl, lsl #3
 801c11c:	4299      	cmp	r1, r3
 801c11e:	f240 80c3 	bls.w	801c2a8 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x3b8>
 801c122:	4426      	add	r6, r4
 801c124:	eb04 09c0 	add.w	r9, r4, r0, lsl #3
 801c128:	4684      	mov	ip, r0
 801c12a:	f9b6 30aa 	ldrsh.w	r3, [r6, #170]	@ 0xaa
 801c12e:	f9b9 e0aa 	ldrsh.w	lr, [r9, #170]	@ 0xaa
 801c132:	4573      	cmp	r3, lr
 801c134:	f340 80a5 	ble.w	801c282 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x392>
 801c138:	f8b9 50ae 	ldrh.w	r5, [r9, #174]	@ 0xae
 801c13c:	4475      	add	r5, lr
 801c13e:	b22d      	sxth	r5, r5
 801c140:	429d      	cmp	r5, r3
 801c142:	bfa8      	it	ge
 801c144:	461d      	movge	r5, r3
 801c146:	3001      	adds	r0, #1
 801c148:	46e2      	mov	sl, ip
 801c14a:	e7e4      	b.n	801c116 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x226>
 801c14c:	f104 09a8 	add.w	r9, r4, #168	@ 0xa8
 801c150:	f8b4 b0e8 	ldrh.w	fp, [r4, #232]	@ 0xe8
 801c154:	f1bb 0f00 	cmp.w	fp, #0
 801c158:	d0a9      	beq.n	801c0ae <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x1be>
 801c15a:	883b      	ldrh	r3, [r7, #0]
 801c15c:	2600      	movs	r6, #0
 801c15e:	f9b4 20a8 	ldrsh.w	r2, [r4, #168]	@ 0xa8
 801c162:	3301      	adds	r3, #1
 801c164:	b29b      	uxth	r3, r3
 801c166:	b299      	uxth	r1, r3
 801c168:	00f5      	lsls	r5, r6, #3
 801c16a:	458b      	cmp	fp, r1
 801c16c:	d93a      	bls.n	801c1e4 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x2f4>
 801c16e:	4425      	add	r5, r4
 801c170:	eb04 0ac3 	add.w	sl, r4, r3, lsl #3
 801c174:	469c      	mov	ip, r3
 801c176:	f8b5 10ac 	ldrh.w	r1, [r5, #172]	@ 0xac
 801c17a:	f8b5 00a8 	ldrh.w	r0, [r5, #168]	@ 0xa8
 801c17e:	f9ba e0a8 	ldrsh.w	lr, [sl, #168]	@ 0xa8
 801c182:	4408      	add	r0, r1
 801c184:	f8ba 10ac 	ldrh.w	r1, [sl, #172]	@ 0xac
 801c188:	4471      	add	r1, lr
 801c18a:	b200      	sxth	r0, r0
 801c18c:	b209      	sxth	r1, r1
 801c18e:	4288      	cmp	r0, r1
 801c190:	da06      	bge.n	801c1a0 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x2b0>
 801c192:	4586      	cmp	lr, r0
 801c194:	4672      	mov	r2, lr
 801c196:	bfb8      	it	lt
 801c198:	4602      	movlt	r2, r0
 801c19a:	3301      	adds	r3, #1
 801c19c:	4666      	mov	r6, ip
 801c19e:	e7e2      	b.n	801c166 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x276>
 801c1a0:	d10b      	bne.n	801c1ba <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x2ca>
 801c1a2:	f9b5 c0ae 	ldrsh.w	ip, [r5, #174]	@ 0xae
 801c1a6:	f9ba 10ae 	ldrsh.w	r1, [sl, #174]	@ 0xae
 801c1aa:	458c      	cmp	ip, r1
 801c1ac:	bfb4      	ite	lt
 801c1ae:	469c      	movlt	ip, r3
 801c1b0:	46b4      	movge	ip, r6
 801c1b2:	4572      	cmp	r2, lr
 801c1b4:	bfb8      	it	lt
 801c1b6:	4672      	movlt	r2, lr
 801c1b8:	e7ef      	b.n	801c19a <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x2aa>
 801c1ba:	428a      	cmp	r2, r1
 801c1bc:	46b4      	mov	ip, r6
 801c1be:	bfb8      	it	lt
 801c1c0:	460a      	movlt	r2, r1
 801c1c2:	e7ea      	b.n	801c19a <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x2aa>
 801c1c4:	2400b8b8 	.word	0x2400b8b8
 801c1c8:	2400b8c4 	.word	0x2400b8c4
 801c1cc:	24000056 	.word	0x24000056
 801c1d0:	2400b880 	.word	0x2400b880
 801c1d4:	2400b876 	.word	0x2400b876
 801c1d8:	2400b874 	.word	0x2400b874
 801c1dc:	2400b87e 	.word	0x2400b87e
 801c1e0:	2400b878 	.word	0x2400b878
 801c1e4:	1961      	adds	r1, r4, r5
 801c1e6:	ab07      	add	r3, sp, #28
 801c1e8:	f851 0fa8 	ldr.w	r0, [r1, #168]!
 801c1ec:	6849      	ldr	r1, [r1, #4]
 801c1ee:	c303      	stmia	r3!, {r0, r1}
 801c1f0:	f9bd 3020 	ldrsh.w	r3, [sp, #32]
 801c1f4:	a807      	add	r0, sp, #28
 801c1f6:	f8bd 101c 	ldrh.w	r1, [sp, #28]
 801c1fa:	2b13      	cmp	r3, #19
 801c1fc:	440b      	add	r3, r1
 801c1fe:	bfd8      	it	le
 801c200:	f9bd 201c 	ldrshle.w	r2, [sp, #28]
 801c204:	1a9b      	subs	r3, r3, r2
 801c206:	f8ad 201c 	strh.w	r2, [sp, #28]
 801c20a:	f8ad 3020 	strh.w	r3, [sp, #32]
 801c20e:	f7ff f863 	bl	801b2d8 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 801c212:	a807      	add	r0, sp, #28
 801c214:	f7fb fcf1 	bl	8017bfa <_ZNK8touchgfx4Rect7isEmptyEv>
 801c218:	2800      	cmp	r0, #0
 801c21a:	d199      	bne.n	801c150 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x260>
 801c21c:	f9bd c022 	ldrsh.w	ip, [sp, #34]	@ 0x22
 801c220:	4425      	add	r5, r4
 801c222:	f8d8 0000 	ldr.w	r0, [r8]
 801c226:	f1bc 0f14 	cmp.w	ip, #20
 801c22a:	f8bd 3020 	ldrh.w	r3, [sp, #32]
 801c22e:	f8d0 e000 	ldr.w	lr, [r0]
 801c232:	bfa8      	it	ge
 801c234:	f04f 0c14 	movge.w	ip, #20
 801c238:	f8bd 201e 	ldrh.w	r2, [sp, #30]
 801c23c:	f8bd 101c 	ldrh.w	r1, [sp, #28]
 801c240:	fa1f fc8c 	uxth.w	ip, ip
 801c244:	f8cd c000 	str.w	ip, [sp]
 801c248:	f8de a088 	ldr.w	sl, [lr, #136]	@ 0x88
 801c24c:	47d0      	blx	sl
 801c24e:	4682      	mov	sl, r0
 801c250:	f8ad 0022 	strh.w	r0, [sp, #34]	@ 0x22
 801c254:	a807      	add	r0, sp, #28
 801c256:	f7ff f825 	bl	801b2a4 <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERNS_4RectE>
 801c25a:	6823      	ldr	r3, [r4, #0]
 801c25c:	4620      	mov	r0, r4
 801c25e:	a907      	add	r1, sp, #28
 801c260:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 801c262:	4798      	blx	r3
 801c264:	f8b5 00ac 	ldrh.w	r0, [r5, #172]	@ 0xac
 801c268:	eba0 000a 	sub.w	r0, r0, sl
 801c26c:	b200      	sxth	r0, r0
 801c26e:	f8a5 00ac 	strh.w	r0, [r5, #172]	@ 0xac
 801c272:	2800      	cmp	r0, #0
 801c274:	f47f af6c 	bne.w	801c150 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x260>
 801c278:	b2b1      	uxth	r1, r6
 801c27a:	4648      	mov	r0, r9
 801c27c:	f7ff fa9a 	bl	801b7b4 <_ZN8touchgfx6VectorINS_4RectELt8EE13quickRemoveAtEt>
 801c280:	e766      	b.n	801c150 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x260>
 801c282:	d10c      	bne.n	801c29e <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x3ae>
 801c284:	f9b6 c0ac 	ldrsh.w	ip, [r6, #172]	@ 0xac
 801c288:	f9b9 60ac 	ldrsh.w	r6, [r9, #172]	@ 0xac
 801c28c:	45b4      	cmp	ip, r6
 801c28e:	bfb4      	ite	lt
 801c290:	4684      	movlt	ip, r0
 801c292:	46d4      	movge	ip, sl
 801c294:	f8b9 60ae 	ldrh.w	r6, [r9, #174]	@ 0xae
 801c298:	4433      	add	r3, r6
 801c29a:	b21b      	sxth	r3, r3
 801c29c:	e750      	b.n	801c140 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x250>
 801c29e:	4575      	cmp	r5, lr
 801c2a0:	46d4      	mov	ip, sl
 801c2a2:	bfa8      	it	ge
 801c2a4:	4675      	movge	r5, lr
 801c2a6:	e74e      	b.n	801c146 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x256>
 801c2a8:	eb0b 0006 	add.w	r0, fp, r6
 801c2ac:	4426      	add	r6, r4
 801c2ae:	f9b6 90ae 	ldrsh.w	r9, [r6, #174]	@ 0xae
 801c2b2:	f1b9 0f13 	cmp.w	r9, #19
 801c2b6:	bfdc      	itt	le
 801c2b8:	f8b6 50aa 	ldrhle.w	r5, [r6, #170]	@ 0xaa
 801c2bc:	444d      	addle	r5, r9
 801c2be:	e9cd 1202 	strd	r1, r2, [sp, #8]
 801c2c2:	bfd8      	it	le
 801c2c4:	b22d      	sxthle	r5, r5
 801c2c6:	f7fb fc98 	bl	8017bfa <_ZNK8touchgfx4Rect7isEmptyEv>
 801c2ca:	e9dd 1202 	ldrd	r1, r2, [sp, #8]
 801c2ce:	2800      	cmp	r0, #0
 801c2d0:	f47f af16 	bne.w	801c100 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x210>
 801c2d4:	f9b6 c0aa 	ldrsh.w	ip, [r6, #170]	@ 0xaa
 801c2d8:	fa1f f989 	uxth.w	r9, r9
 801c2dc:	f8ad 0022 	strh.w	r0, [sp, #34]	@ 0x22
 801c2e0:	eba5 050c 	sub.w	r5, r5, ip
 801c2e4:	fa1f f28c 	uxth.w	r2, ip
 801c2e8:	f9b6 10a8 	ldrsh.w	r1, [r6, #168]	@ 0xa8
 801c2ec:	eb02 0009 	add.w	r0, r2, r9
 801c2f0:	2d14      	cmp	r5, #20
 801c2f2:	f9b6 30ac 	ldrsh.w	r3, [r6, #172]	@ 0xac
 801c2f6:	bfa8      	it	ge
 801c2f8:	2514      	movge	r5, #20
 801c2fa:	b200      	sxth	r0, r0
 801c2fc:	f8ad 101c 	strh.w	r1, [sp, #28]
 801c300:	b289      	uxth	r1, r1
 801c302:	fa1f fe85 	uxth.w	lr, r5
 801c306:	eba0 000c 	sub.w	r0, r0, ip
 801c30a:	f8ad c01e 	strh.w	ip, [sp, #30]
 801c30e:	4586      	cmp	lr, r0
 801c310:	f8d8 0000 	ldr.w	r0, [r8]
 801c314:	f8ad 3020 	strh.w	r3, [sp, #32]
 801c318:	b29b      	uxth	r3, r3
 801c31a:	bfb8      	it	lt
 801c31c:	46f1      	movlt	r9, lr
 801c31e:	6805      	ldr	r5, [r0, #0]
 801c320:	f8cd 9000 	str.w	r9, [sp]
 801c324:	f8d5 5088 	ldr.w	r5, [r5, #136]	@ 0x88
 801c328:	47a8      	blx	r5
 801c32a:	6823      	ldr	r3, [r4, #0]
 801c32c:	f8ad 0022 	strh.w	r0, [sp, #34]	@ 0x22
 801c330:	a907      	add	r1, sp, #28
 801c332:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 801c334:	4620      	mov	r0, r4
 801c336:	4798      	blx	r3
 801c338:	f8bd 1022 	ldrh.w	r1, [sp, #34]	@ 0x22
 801c33c:	f8b6 30ae 	ldrh.w	r3, [r6, #174]	@ 0xae
 801c340:	f8b6 20aa 	ldrh.w	r2, [r6, #170]	@ 0xaa
 801c344:	1a5b      	subs	r3, r3, r1
 801c346:	440a      	add	r2, r1
 801c348:	b21b      	sxth	r3, r3
 801c34a:	f8a6 20aa 	strh.w	r2, [r6, #170]	@ 0xaa
 801c34e:	f8a6 30ae 	strh.w	r3, [r6, #174]	@ 0xae
 801c352:	2b00      	cmp	r3, #0
 801c354:	f47f aecf 	bne.w	801c0f6 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x206>
 801c358:	fa1f f18a 	uxth.w	r1, sl
 801c35c:	4658      	mov	r0, fp
 801c35e:	f7ff fa29 	bl	801b7b4 <_ZN8touchgfx6VectorINS_4RectELt8EE13quickRemoveAtEt>
 801c362:	e6c8      	b.n	801c0f6 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x206>
 801c364:	f8b4 30e8 	ldrh.w	r3, [r4, #232]	@ 0xe8
 801c368:	42ab      	cmp	r3, r5
 801c36a:	f67f aea0 	bls.w	801c0ae <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x1be>
 801c36e:	eb04 02c5 	add.w	r2, r4, r5, lsl #3
 801c372:	ab07      	add	r3, sp, #28
 801c374:	f852 0fa8 	ldr.w	r0, [r2, #168]!
 801c378:	6851      	ldr	r1, [r2, #4]
 801c37a:	c303      	stmia	r3!, {r0, r1}
 801c37c:	a807      	add	r0, sp, #28
 801c37e:	f7fb fc3c 	bl	8017bfa <_ZNK8touchgfx4Rect7isEmptyEv>
 801c382:	b920      	cbnz	r0, 801c38e <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x49e>
 801c384:	6823      	ldr	r3, [r4, #0]
 801c386:	a907      	add	r1, sp, #28
 801c388:	4620      	mov	r0, r4
 801c38a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 801c38c:	4798      	blx	r3
 801c38e:	3501      	adds	r5, #1
 801c390:	b2ad      	uxth	r5, r5
 801c392:	e7e7      	b.n	801c364 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x474>

0801c394 <_GLOBAL__sub_I__ZN8touchgfx11Application8instanceE>:
 801c394:	4b03      	ldr	r3, [pc, #12]	@ (801c3a4 <_GLOBAL__sub_I__ZN8touchgfx11Application8instanceE+0x10>)
 801c396:	2200      	movs	r2, #0
 801c398:	801a      	strh	r2, [r3, #0]
 801c39a:	805a      	strh	r2, [r3, #2]
 801c39c:	809a      	strh	r2, [r3, #4]
 801c39e:	80da      	strh	r2, [r3, #6]
 801c3a0:	4770      	bx	lr
 801c3a2:	bf00      	nop
 801c3a4:	2400b8c4 	.word	0x2400b8c4

0801c3a8 <_ZNK8touchgfx4Font17getStringWidthLTREhPKtSt9__va_list>:
 801c3a8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801c3ac:	b09d      	sub	sp, #116	@ 0x74
 801c3ae:	4606      	mov	r6, r0
 801c3b0:	4614      	mov	r4, r2
 801c3b2:	468a      	mov	sl, r1
 801c3b4:	a803      	add	r0, sp, #12
 801c3b6:	461d      	mov	r5, r3
 801c3b8:	f000 fe48 	bl	801d04c <_ZN8touchgfx12TextProviderC1Ev>
 801c3bc:	6833      	ldr	r3, [r6, #0]
 801c3be:	4630      	mov	r0, r6
 801c3c0:	f242 0b0b 	movw	fp, #8203	@ 0x200b
 801c3c4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 801c3c6:	4798      	blx	r3
 801c3c8:	6833      	ldr	r3, [r6, #0]
 801c3ca:	4607      	mov	r7, r0
 801c3cc:	4630      	mov	r0, r6
 801c3ce:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 801c3d0:	4798      	blx	r3
 801c3d2:	462a      	mov	r2, r5
 801c3d4:	2500      	movs	r5, #0
 801c3d6:	4621      	mov	r1, r4
 801c3d8:	9000      	str	r0, [sp, #0]
 801c3da:	463b      	mov	r3, r7
 801c3dc:	462c      	mov	r4, r5
 801c3de:	46a9      	mov	r9, r5
 801c3e0:	46a8      	mov	r8, r5
 801c3e2:	a803      	add	r0, sp, #12
 801c3e4:	f000 fe85 	bl	801d0f2 <_ZN8touchgfx12TextProvider10initializeEPKtSt9__va_listS2_PKNS_24FontContextualFormsTableE>
 801c3e8:	2300      	movs	r3, #0
 801c3ea:	9302      	str	r3, [sp, #8]
 801c3ec:	f64f 63ff 	movw	r3, #65279	@ 0xfeff
 801c3f0:	429c      	cmp	r4, r3
 801c3f2:	d002      	beq.n	801c3fa <_ZNK8touchgfx4Font17getStringWidthLTREhPKtSt9__va_list+0x52>
 801c3f4:	455c      	cmp	r4, fp
 801c3f6:	bf18      	it	ne
 801c3f8:	4625      	movne	r5, r4
 801c3fa:	ab02      	add	r3, sp, #8
 801c3fc:	4632      	mov	r2, r6
 801c3fe:	4651      	mov	r1, sl
 801c400:	a803      	add	r0, sp, #12
 801c402:	f001 f977 	bl	801d6f4 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE>
 801c406:	4604      	mov	r4, r0
 801c408:	b108      	cbz	r0, 801c40e <_ZNK8touchgfx4Font17getStringWidthLTREhPKtSt9__va_list+0x66>
 801c40a:	280a      	cmp	r0, #10
 801c40c:	d10a      	bne.n	801c424 <_ZNK8touchgfx4Font17getStringWidthLTREhPKtSt9__va_list+0x7c>
 801c40e:	45c1      	cmp	r9, r8
 801c410:	bf38      	it	cc
 801c412:	46c1      	movcc	r9, r8
 801c414:	f04f 0800 	mov.w	r8, #0
 801c418:	2c00      	cmp	r4, #0
 801c41a:	d1e5      	bne.n	801c3e8 <_ZNK8touchgfx4Font17getStringWidthLTREhPKtSt9__va_list+0x40>
 801c41c:	4648      	mov	r0, r9
 801c41e:	b01d      	add	sp, #116	@ 0x74
 801c420:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801c424:	9a02      	ldr	r2, [sp, #8]
 801c426:	2a00      	cmp	r2, #0
 801c428:	d0de      	beq.n	801c3e8 <_ZNK8touchgfx4Font17getStringWidthLTREhPKtSt9__va_list+0x40>
 801c42a:	7b57      	ldrb	r7, [r2, #13]
 801c42c:	4629      	mov	r1, r5
 801c42e:	6833      	ldr	r3, [r6, #0]
 801c430:	007f      	lsls	r7, r7, #1
 801c432:	8894      	ldrh	r4, [r2, #4]
 801c434:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 801c436:	f407 7080 	and.w	r0, r7, #256	@ 0x100
 801c43a:	7a97      	ldrb	r7, [r2, #10]
 801c43c:	4307      	orrs	r7, r0
 801c43e:	4630      	mov	r0, r6
 801c440:	4798      	blx	r3
 801c442:	4438      	add	r0, r7
 801c444:	4480      	add	r8, r0
 801c446:	fa1f f888 	uxth.w	r8, r8
 801c44a:	e7e5      	b.n	801c418 <_ZNK8touchgfx4Font17getStringWidthLTREhPKtSt9__va_list+0x70>

0801c44c <_ZNK8touchgfx4Font12getCharWidthEt>:
 801c44c:	b508      	push	{r3, lr}
 801c44e:	6803      	ldr	r3, [r0, #0]
 801c450:	68db      	ldr	r3, [r3, #12]
 801c452:	4798      	blx	r3
 801c454:	b128      	cbz	r0, 801c462 <_ZNK8touchgfx4Font12getCharWidthEt+0x16>
 801c456:	7b43      	ldrb	r3, [r0, #13]
 801c458:	7a80      	ldrb	r0, [r0, #10]
 801c45a:	005b      	lsls	r3, r3, #1
 801c45c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 801c460:	4318      	orrs	r0, r3
 801c462:	bd08      	pop	{r3, pc}

0801c464 <_ZNK8touchgfx4Font16getMaxTextHeightEPKtz>:
 801c464:	b40e      	push	{r1, r2, r3}
 801c466:	b5f0      	push	{r4, r5, r6, r7, lr}
 801c468:	b09e      	sub	sp, #120	@ 0x78
 801c46a:	4605      	mov	r5, r0
 801c46c:	ab23      	add	r3, sp, #140	@ 0x8c
 801c46e:	a805      	add	r0, sp, #20
 801c470:	f853 4b04 	ldr.w	r4, [r3], #4
 801c474:	9303      	str	r3, [sp, #12]
 801c476:	f000 fde9 	bl	801d04c <_ZN8touchgfx12TextProviderC1Ev>
 801c47a:	682b      	ldr	r3, [r5, #0]
 801c47c:	4628      	mov	r0, r5
 801c47e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 801c480:	4798      	blx	r3
 801c482:	682b      	ldr	r3, [r5, #0]
 801c484:	4606      	mov	r6, r0
 801c486:	4628      	mov	r0, r5
 801c488:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 801c48a:	4798      	blx	r3
 801c48c:	4633      	mov	r3, r6
 801c48e:	4621      	mov	r1, r4
 801c490:	ae1e      	add	r6, sp, #120	@ 0x78
 801c492:	2400      	movs	r4, #0
 801c494:	9000      	str	r0, [sp, #0]
 801c496:	9a03      	ldr	r2, [sp, #12]
 801c498:	a805      	add	r0, sp, #20
 801c49a:	f000 fe2a 	bl	801d0f2 <_ZN8touchgfx12TextProvider10initializeEPKtSt9__va_listS2_PKNS_24FontContextualFormsTableE>
 801c49e:	f846 4d68 	str.w	r4, [r6, #-104]!
 801c4a2:	462a      	mov	r2, r5
 801c4a4:	4633      	mov	r3, r6
 801c4a6:	4621      	mov	r1, r4
 801c4a8:	a805      	add	r0, sp, #20
 801c4aa:	f001 f923 	bl	801d6f4 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE>
 801c4ae:	b300      	cbz	r0, 801c4f2 <_ZNK8touchgfx4Font16getMaxTextHeightEPKtz+0x8e>
 801c4b0:	280a      	cmp	r0, #10
 801c4b2:	d01a      	beq.n	801c4ea <_ZNK8touchgfx4Font16getMaxTextHeightEPKtz+0x86>
 801c4b4:	9f04      	ldr	r7, [sp, #16]
 801c4b6:	b1c7      	cbz	r7, 801c4ea <_ZNK8touchgfx4Font16getMaxTextHeightEPKtz+0x86>
 801c4b8:	7b78      	ldrb	r0, [r7, #13]
 801c4ba:	7a3b      	ldrb	r3, [r7, #8]
 801c4bc:	00c1      	lsls	r1, r0, #3
 801c4be:	88aa      	ldrh	r2, [r5, #4]
 801c4c0:	f401 7180 	and.w	r1, r1, #256	@ 0x100
 801c4c4:	4319      	orrs	r1, r3
 801c4c6:	0643      	lsls	r3, r0, #25
 801c4c8:	ea4f 1000 	mov.w	r0, r0, lsl #4
 801c4cc:	bf48      	it	mi
 801c4ce:	f5a1 7300 	submi.w	r3, r1, #512	@ 0x200
 801c4d2:	f400 7080 	and.w	r0, r0, #256	@ 0x100
 801c4d6:	bf48      	it	mi
 801c4d8:	b219      	sxthmi	r1, r3
 801c4da:	79fb      	ldrb	r3, [r7, #7]
 801c4dc:	4303      	orrs	r3, r0
 801c4de:	4413      	add	r3, r2
 801c4e0:	1a5b      	subs	r3, r3, r1
 801c4e2:	b29b      	uxth	r3, r3
 801c4e4:	42a3      	cmp	r3, r4
 801c4e6:	bfc8      	it	gt
 801c4e8:	b21c      	sxthgt	r4, r3
 801c4ea:	4633      	mov	r3, r6
 801c4ec:	462a      	mov	r2, r5
 801c4ee:	2100      	movs	r1, #0
 801c4f0:	e7da      	b.n	801c4a8 <_ZNK8touchgfx4Font16getMaxTextHeightEPKtz+0x44>
 801c4f2:	b2a0      	uxth	r0, r4
 801c4f4:	b01e      	add	sp, #120	@ 0x78
 801c4f6:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 801c4fa:	b003      	add	sp, #12
 801c4fc:	4770      	bx	lr

0801c4fe <_ZNK8touchgfx4Font16getNumberOfLinesEPKtz>:
 801c4fe:	b40e      	push	{r1, r2, r3}
 801c500:	b570      	push	{r4, r5, r6, lr}
 801c502:	b09d      	sub	sp, #116	@ 0x74
 801c504:	4604      	mov	r4, r0
 801c506:	ab21      	add	r3, sp, #132	@ 0x84
 801c508:	a803      	add	r0, sp, #12
 801c50a:	f853 5b04 	ldr.w	r5, [r3], #4
 801c50e:	9302      	str	r3, [sp, #8]
 801c510:	f000 fd9c 	bl	801d04c <_ZN8touchgfx12TextProviderC1Ev>
 801c514:	6823      	ldr	r3, [r4, #0]
 801c516:	4620      	mov	r0, r4
 801c518:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 801c51a:	4798      	blx	r3
 801c51c:	6823      	ldr	r3, [r4, #0]
 801c51e:	4606      	mov	r6, r0
 801c520:	4620      	mov	r0, r4
 801c522:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 801c524:	2401      	movs	r4, #1
 801c526:	4798      	blx	r3
 801c528:	4633      	mov	r3, r6
 801c52a:	9000      	str	r0, [sp, #0]
 801c52c:	4629      	mov	r1, r5
 801c52e:	9a02      	ldr	r2, [sp, #8]
 801c530:	a803      	add	r0, sp, #12
 801c532:	f000 fdde 	bl	801d0f2 <_ZN8touchgfx12TextProvider10initializeEPKtSt9__va_listS2_PKNS_24FontContextualFormsTableE>
 801c536:	a803      	add	r0, sp, #12
 801c538:	f001 f9d6 	bl	801d8e8 <_ZN8touchgfx12TextProvider11getNextCharEv>
 801c53c:	b2a3      	uxth	r3, r4
 801c53e:	b138      	cbz	r0, 801c550 <_ZNK8touchgfx4Font16getNumberOfLinesEPKtz+0x52>
 801c540:	280a      	cmp	r0, #10
 801c542:	a803      	add	r0, sp, #12
 801c544:	bf04      	itt	eq
 801c546:	3301      	addeq	r3, #1
 801c548:	b21c      	sxtheq	r4, r3
 801c54a:	f001 f9cd 	bl	801d8e8 <_ZN8touchgfx12TextProvider11getNextCharEv>
 801c54e:	e7f5      	b.n	801c53c <_ZNK8touchgfx4Font16getNumberOfLinesEPKtz+0x3e>
 801c550:	4618      	mov	r0, r3
 801c552:	b01d      	add	sp, #116	@ 0x74
 801c554:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 801c558:	b003      	add	sp, #12
 801c55a:	4770      	bx	lr

0801c55c <_ZNK8touchgfx4Font15getSpacingAboveEPKtz>:
 801c55c:	b40e      	push	{r1, r2, r3}
 801c55e:	b5f0      	push	{r4, r5, r6, r7, lr}
 801c560:	b09e      	sub	sp, #120	@ 0x78
 801c562:	4604      	mov	r4, r0
 801c564:	ab23      	add	r3, sp, #140	@ 0x8c
 801c566:	a805      	add	r0, sp, #20
 801c568:	f853 5b04 	ldr.w	r5, [r3], #4
 801c56c:	9303      	str	r3, [sp, #12]
 801c56e:	f000 fd6d 	bl	801d04c <_ZN8touchgfx12TextProviderC1Ev>
 801c572:	6823      	ldr	r3, [r4, #0]
 801c574:	4620      	mov	r0, r4
 801c576:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 801c578:	4798      	blx	r3
 801c57a:	6823      	ldr	r3, [r4, #0]
 801c57c:	4606      	mov	r6, r0
 801c57e:	4620      	mov	r0, r4
 801c580:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 801c582:	4798      	blx	r3
 801c584:	4633      	mov	r3, r6
 801c586:	4629      	mov	r1, r5
 801c588:	9000      	str	r0, [sp, #0]
 801c58a:	9a03      	ldr	r2, [sp, #12]
 801c58c:	a805      	add	r0, sp, #20
 801c58e:	f000 fdb0 	bl	801d0f2 <_ZN8touchgfx12TextProvider10initializeEPKtSt9__va_listS2_PKNS_24FontContextualFormsTableE>
 801c592:	ad1e      	add	r5, sp, #120	@ 0x78
 801c594:	2100      	movs	r1, #0
 801c596:	26ff      	movs	r6, #255	@ 0xff
 801c598:	4622      	mov	r2, r4
 801c59a:	a805      	add	r0, sp, #20
 801c59c:	f845 1d68 	str.w	r1, [r5, #-104]!
 801c5a0:	462b      	mov	r3, r5
 801c5a2:	f001 f8a7 	bl	801d6f4 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE>
 801c5a6:	b1d8      	cbz	r0, 801c5e0 <_ZNK8touchgfx4Font15getSpacingAboveEPKtz+0x84>
 801c5a8:	280a      	cmp	r0, #10
 801c5aa:	d012      	beq.n	801c5d2 <_ZNK8touchgfx4Font15getSpacingAboveEPKtz+0x76>
 801c5ac:	9804      	ldr	r0, [sp, #16]
 801c5ae:	b180      	cbz	r0, 801c5d2 <_ZNK8touchgfx4Font15getSpacingAboveEPKtz+0x76>
 801c5b0:	7b47      	ldrb	r7, [r0, #13]
 801c5b2:	7922      	ldrb	r2, [r4, #4]
 801c5b4:	00fb      	lsls	r3, r7, #3
 801c5b6:	f403 7180 	and.w	r1, r3, #256	@ 0x100
 801c5ba:	7a03      	ldrb	r3, [r0, #8]
 801c5bc:	430b      	orrs	r3, r1
 801c5be:	0679      	lsls	r1, r7, #25
 801c5c0:	bf44      	itt	mi
 801c5c2:	f5a3 7300 	submi.w	r3, r3, #512	@ 0x200
 801c5c6:	b21b      	sxthmi	r3, r3
 801c5c8:	1ad3      	subs	r3, r2, r3
 801c5ca:	b2db      	uxtb	r3, r3
 801c5cc:	429e      	cmp	r6, r3
 801c5ce:	bf28      	it	cs
 801c5d0:	461e      	movcs	r6, r3
 801c5d2:	462b      	mov	r3, r5
 801c5d4:	4622      	mov	r2, r4
 801c5d6:	2100      	movs	r1, #0
 801c5d8:	a805      	add	r0, sp, #20
 801c5da:	f001 f88b 	bl	801d6f4 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE>
 801c5de:	e7e2      	b.n	801c5a6 <_ZNK8touchgfx4Font15getSpacingAboveEPKtz+0x4a>
 801c5e0:	4630      	mov	r0, r6
 801c5e2:	b01e      	add	sp, #120	@ 0x78
 801c5e4:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 801c5e8:	b003      	add	sp, #12
 801c5ea:	4770      	bx	lr

0801c5ec <_ZNK8touchgfx8Drawable10invalidateEv>:
 801c5ec:	b513      	push	{r0, r1, r4, lr}
 801c5ee:	6803      	ldr	r3, [r0, #0]
 801c5f0:	2400      	movs	r4, #0
 801c5f2:	f9b0 1008 	ldrsh.w	r1, [r0, #8]
 801c5f6:	f9b0 200a 	ldrsh.w	r2, [r0, #10]
 801c5fa:	f8ad 1004 	strh.w	r1, [sp, #4]
 801c5fe:	4669      	mov	r1, sp
 801c600:	691b      	ldr	r3, [r3, #16]
 801c602:	9400      	str	r4, [sp, #0]
 801c604:	f8ad 2006 	strh.w	r2, [sp, #6]
 801c608:	4798      	blx	r3
 801c60a:	b002      	add	sp, #8
 801c60c:	bd10      	pop	{r4, pc}

0801c60e <_ZN8touchgfx8Drawable20getSolidRectAbsoluteEv>:
 801c60e:	b538      	push	{r3, r4, r5, lr}
 801c610:	680b      	ldr	r3, [r1, #0]
 801c612:	460c      	mov	r4, r1
 801c614:	4605      	mov	r5, r0
 801c616:	68db      	ldr	r3, [r3, #12]
 801c618:	4798      	blx	r3
 801c61a:	6823      	ldr	r3, [r4, #0]
 801c61c:	4620      	mov	r0, r4
 801c61e:	4629      	mov	r1, r5
 801c620:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 801c622:	4798      	blx	r3
 801c624:	4628      	mov	r0, r5
 801c626:	bd38      	pop	{r3, r4, r5, pc}

0801c628 <_ZNK8touchgfx8Drawable23translateRectToAbsoluteERNS_4RectE>:
 801c628:	b410      	push	{r4}
 801c62a:	880a      	ldrh	r2, [r1, #0]
 801c62c:	8884      	ldrh	r4, [r0, #4]
 801c62e:	4422      	add	r2, r4
 801c630:	800a      	strh	r2, [r1, #0]
 801c632:	884a      	ldrh	r2, [r1, #2]
 801c634:	88c4      	ldrh	r4, [r0, #6]
 801c636:	4422      	add	r2, r4
 801c638:	804a      	strh	r2, [r1, #2]
 801c63a:	6940      	ldr	r0, [r0, #20]
 801c63c:	b120      	cbz	r0, 801c648 <_ZNK8touchgfx8Drawable23translateRectToAbsoluteERNS_4RectE+0x20>
 801c63e:	6803      	ldr	r3, [r0, #0]
 801c640:	f85d 4b04 	ldr.w	r4, [sp], #4
 801c644:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 801c646:	4718      	bx	r3
 801c648:	f85d 4b04 	ldr.w	r4, [sp], #4
 801c64c:	4770      	bx	lr

0801c64e <_ZNK8touchgfx8Drawable14getVisibleRectERNS_4RectE>:
 801c64e:	b570      	push	{r4, r5, r6, lr}
 801c650:	8882      	ldrh	r2, [r0, #4]
 801c652:	460c      	mov	r4, r1
 801c654:	880b      	ldrh	r3, [r1, #0]
 801c656:	4605      	mov	r5, r0
 801c658:	4413      	add	r3, r2
 801c65a:	800b      	strh	r3, [r1, #0]
 801c65c:	884b      	ldrh	r3, [r1, #2]
 801c65e:	88c2      	ldrh	r2, [r0, #6]
 801c660:	4413      	add	r3, r2
 801c662:	804b      	strh	r3, [r1, #2]
 801c664:	1d01      	adds	r1, r0, #4
 801c666:	4620      	mov	r0, r4
 801c668:	f7fb fa84 	bl	8017b74 <_ZN8touchgfx4RectaNERKS0_>
 801c66c:	f9b4 3004 	ldrsh.w	r3, [r4, #4]
 801c670:	2b00      	cmp	r3, #0
 801c672:	dd0b      	ble.n	801c68c <_ZNK8touchgfx8Drawable14getVisibleRectERNS_4RectE+0x3e>
 801c674:	f9b4 3006 	ldrsh.w	r3, [r4, #6]
 801c678:	2b00      	cmp	r3, #0
 801c67a:	dd07      	ble.n	801c68c <_ZNK8touchgfx8Drawable14getVisibleRectERNS_4RectE+0x3e>
 801c67c:	6968      	ldr	r0, [r5, #20]
 801c67e:	b128      	cbz	r0, 801c68c <_ZNK8touchgfx8Drawable14getVisibleRectERNS_4RectE+0x3e>
 801c680:	6803      	ldr	r3, [r0, #0]
 801c682:	4621      	mov	r1, r4
 801c684:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801c686:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 801c68a:	4718      	bx	r3
 801c68c:	bd70      	pop	{r4, r5, r6, pc}
	...

0801c690 <_ZNK8touchgfx8Drawable14invalidateRectERNS_4RectE>:
 801c690:	b570      	push	{r4, r5, r6, lr}
 801c692:	8882      	ldrh	r2, [r0, #4]
 801c694:	460c      	mov	r4, r1
 801c696:	880b      	ldrh	r3, [r1, #0]
 801c698:	4605      	mov	r5, r0
 801c69a:	4413      	add	r3, r2
 801c69c:	800b      	strh	r3, [r1, #0]
 801c69e:	884b      	ldrh	r3, [r1, #2]
 801c6a0:	88c2      	ldrh	r2, [r0, #6]
 801c6a2:	4413      	add	r3, r2
 801c6a4:	804b      	strh	r3, [r1, #2]
 801c6a6:	1d01      	adds	r1, r0, #4
 801c6a8:	4620      	mov	r0, r4
 801c6aa:	f7fb fa63 	bl	8017b74 <_ZN8touchgfx4RectaNERKS0_>
 801c6ae:	f9b4 3004 	ldrsh.w	r3, [r4, #4]
 801c6b2:	2b00      	cmp	r3, #0
 801c6b4:	dd15      	ble.n	801c6e2 <_ZNK8touchgfx8Drawable14invalidateRectERNS_4RectE+0x52>
 801c6b6:	f9b4 3006 	ldrsh.w	r3, [r4, #6]
 801c6ba:	2b00      	cmp	r3, #0
 801c6bc:	dd11      	ble.n	801c6e2 <_ZNK8touchgfx8Drawable14invalidateRectERNS_4RectE+0x52>
 801c6be:	6968      	ldr	r0, [r5, #20]
 801c6c0:	b128      	cbz	r0, 801c6ce <_ZNK8touchgfx8Drawable14invalidateRectERNS_4RectE+0x3e>
 801c6c2:	6803      	ldr	r3, [r0, #0]
 801c6c4:	691b      	ldr	r3, [r3, #16]
 801c6c6:	4621      	mov	r1, r4
 801c6c8:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 801c6cc:	4718      	bx	r3
 801c6ce:	4b05      	ldr	r3, [pc, #20]	@ (801c6e4 <_ZNK8touchgfx8Drawable14invalidateRectERNS_4RectE+0x54>)
 801c6d0:	681b      	ldr	r3, [r3, #0]
 801c6d2:	3304      	adds	r3, #4
 801c6d4:	429d      	cmp	r5, r3
 801c6d6:	d104      	bne.n	801c6e2 <_ZNK8touchgfx8Drawable14invalidateRectERNS_4RectE+0x52>
 801c6d8:	f7fe ffbe 	bl	801b658 <_ZN8touchgfx11Application11getInstanceEv>
 801c6dc:	6803      	ldr	r3, [r0, #0]
 801c6de:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 801c6e0:	e7f1      	b.n	801c6c6 <_ZNK8touchgfx8Drawable14invalidateRectERNS_4RectE+0x36>
 801c6e2:	bd70      	pop	{r4, r5, r6, pc}
 801c6e4:	2400b8bc 	.word	0x2400b8bc

0801c6e8 <_ZN8touchgfx8Drawable12moveRelativeEss>:
 801c6e8:	b570      	push	{r4, r5, r6, lr}
 801c6ea:	4604      	mov	r4, r0
 801c6ec:	4616      	mov	r6, r2
 801c6ee:	460d      	mov	r5, r1
 801c6f0:	b901      	cbnz	r1, 801c6f4 <_ZN8touchgfx8Drawable12moveRelativeEss+0xc>
 801c6f2:	b192      	cbz	r2, 801c71a <_ZN8touchgfx8Drawable12moveRelativeEss+0x32>
 801c6f4:	6823      	ldr	r3, [r4, #0]
 801c6f6:	4620      	mov	r0, r4
 801c6f8:	695b      	ldr	r3, [r3, #20]
 801c6fa:	4798      	blx	r3
 801c6fc:	88e2      	ldrh	r2, [r4, #6]
 801c6fe:	88a1      	ldrh	r1, [r4, #4]
 801c700:	4620      	mov	r0, r4
 801c702:	4432      	add	r2, r6
 801c704:	4429      	add	r1, r5
 801c706:	b212      	sxth	r2, r2
 801c708:	b209      	sxth	r1, r1
 801c70a:	f7e7 fc25 	bl	8003f58 <_ZN8touchgfx8Drawable5setXYEss>
 801c70e:	6823      	ldr	r3, [r4, #0]
 801c710:	4620      	mov	r0, r4
 801c712:	695b      	ldr	r3, [r3, #20]
 801c714:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 801c718:	4718      	bx	r3
 801c71a:	bd70      	pop	{r4, r5, r6, pc}

0801c71c <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>:
 801c71c:	b510      	push	{r4, lr}
 801c71e:	2300      	movs	r3, #0
 801c720:	4604      	mov	r4, r0
 801c722:	4608      	mov	r0, r1
 801c724:	f9b1 1008 	ldrsh.w	r1, [r1, #8]
 801c728:	8023      	strh	r3, [r4, #0]
 801c72a:	f9b0 200a 	ldrsh.w	r2, [r0, #10]
 801c72e:	8063      	strh	r3, [r4, #2]
 801c730:	6803      	ldr	r3, [r0, #0]
 801c732:	80a1      	strh	r1, [r4, #4]
 801c734:	4621      	mov	r1, r4
 801c736:	80e2      	strh	r2, [r4, #6]
 801c738:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 801c73a:	4798      	blx	r3
 801c73c:	4620      	mov	r0, r4
 801c73e:	bd10      	pop	{r4, pc}

0801c740 <_ZN8touchgfx9ConstFontC1EPKNS_9GlyphNodeEtthhhhhtt>:
 801c740:	b530      	push	{r4, r5, lr}
 801c742:	8083      	strh	r3, [r0, #4]
 801c744:	f89d 300c 	ldrb.w	r3, [sp, #12]
 801c748:	f89d 5010 	ldrb.w	r5, [sp, #16]
 801c74c:	7183      	strb	r3, [r0, #6]
 801c74e:	79c3      	ldrb	r3, [r0, #7]
 801c750:	6101      	str	r1, [r0, #16]
 801c752:	f365 0306 	bfi	r3, r5, #0, #7
 801c756:	f89d 5014 	ldrb.w	r5, [sp, #20]
 801c75a:	8282      	strh	r2, [r0, #20]
 801c75c:	f365 13c7 	bfi	r3, r5, #7, #1
 801c760:	71c3      	strb	r3, [r0, #7]
 801c762:	f89d 3018 	ldrb.w	r3, [sp, #24]
 801c766:	7203      	strb	r3, [r0, #8]
 801c768:	f89d 301c 	ldrb.w	r3, [sp, #28]
 801c76c:	7243      	strb	r3, [r0, #9]
 801c76e:	f8bd 3020 	ldrh.w	r3, [sp, #32]
 801c772:	8143      	strh	r3, [r0, #10]
 801c774:	f8bd 3024 	ldrh.w	r3, [sp, #36]	@ 0x24
 801c778:	8183      	strh	r3, [r0, #12]
 801c77a:	4b01      	ldr	r3, [pc, #4]	@ (801c780 <_ZN8touchgfx9ConstFontC1EPKNS_9GlyphNodeEtthhhhhtt+0x40>)
 801c77c:	6003      	str	r3, [r0, #0]
 801c77e:	bd30      	pop	{r4, r5, pc}
 801c780:	0802eef8 	.word	0x0802eef8

0801c784 <_ZNK8touchgfx9ConstFont4findEt>:
 801c784:	b5f0      	push	{r4, r5, r6, r7, lr}
 801c786:	6904      	ldr	r4, [r0, #16]
 801c788:	b3bc      	cbz	r4, 801c7fa <_ZNK8touchgfx9ConstFont4findEt+0x76>
 801c78a:	88a3      	ldrh	r3, [r4, #4]
 801c78c:	8a82      	ldrh	r2, [r0, #20]
 801c78e:	1acb      	subs	r3, r1, r3
 801c790:	f102 32ff 	add.w	r2, r2, #4294967295
 801c794:	d431      	bmi.n	801c7fa <_ZNK8touchgfx9ConstFont4findEt+0x76>
 801c796:	4293      	cmp	r3, r2
 801c798:	dd0c      	ble.n	801c7b4 <_ZNK8touchgfx9ConstFont4findEt+0x30>
 801c79a:	230e      	movs	r3, #14
 801c79c:	fb03 4302 	mla	r3, r3, r2, r4
 801c7a0:	889b      	ldrh	r3, [r3, #4]
 801c7a2:	1a5b      	subs	r3, r3, r1
 801c7a4:	1ad3      	subs	r3, r2, r3
 801c7a6:	429a      	cmp	r2, r3
 801c7a8:	db27      	blt.n	801c7fa <_ZNK8touchgfx9ConstFont4findEt+0x76>
 801c7aa:	2b00      	cmp	r3, #0
 801c7ac:	bfbc      	itt	lt
 801c7ae:	2302      	movlt	r3, #2
 801c7b0:	fb92 f3f3 	sdivlt	r3, r2, r3
 801c7b4:	2500      	movs	r5, #0
 801c7b6:	260e      	movs	r6, #14
 801c7b8:	4295      	cmp	r5, r2
 801c7ba:	dc1e      	bgt.n	801c7fa <_ZNK8touchgfx9ConstFont4findEt+0x76>
 801c7bc:	fb06 4003 	mla	r0, r6, r3, r4
 801c7c0:	8887      	ldrh	r7, [r0, #4]
 801c7c2:	42b9      	cmp	r1, r7
 801c7c4:	d01a      	beq.n	801c7fc <_ZNK8touchgfx9ConstFont4findEt+0x78>
 801c7c6:	d20d      	bcs.n	801c7e4 <_ZNK8touchgfx9ConstFont4findEt+0x60>
 801c7c8:	1e5a      	subs	r2, r3, #1
 801c7ca:	4295      	cmp	r5, r2
 801c7cc:	dc15      	bgt.n	801c7fa <_ZNK8touchgfx9ConstFont4findEt+0x76>
 801c7ce:	f830 3c0a 	ldrh.w	r3, [r0, #-10]
 801c7d2:	1a5b      	subs	r3, r3, r1
 801c7d4:	1ad3      	subs	r3, r2, r3
 801c7d6:	429a      	cmp	r2, r3
 801c7d8:	db0f      	blt.n	801c7fa <_ZNK8touchgfx9ConstFont4findEt+0x76>
 801c7da:	429d      	cmp	r5, r3
 801c7dc:	ddec      	ble.n	801c7b8 <_ZNK8touchgfx9ConstFont4findEt+0x34>
 801c7de:	1953      	adds	r3, r2, r5
 801c7e0:	105b      	asrs	r3, r3, #1
 801c7e2:	e7e9      	b.n	801c7b8 <_ZNK8touchgfx9ConstFont4findEt+0x34>
 801c7e4:	1c5d      	adds	r5, r3, #1
 801c7e6:	42aa      	cmp	r2, r5
 801c7e8:	db07      	blt.n	801c7fa <_ZNK8touchgfx9ConstFont4findEt+0x76>
 801c7ea:	8a43      	ldrh	r3, [r0, #18]
 801c7ec:	1acb      	subs	r3, r1, r3
 801c7ee:	442b      	add	r3, r5
 801c7f0:	429d      	cmp	r5, r3
 801c7f2:	dc02      	bgt.n	801c7fa <_ZNK8touchgfx9ConstFont4findEt+0x76>
 801c7f4:	429a      	cmp	r2, r3
 801c7f6:	dadf      	bge.n	801c7b8 <_ZNK8touchgfx9ConstFont4findEt+0x34>
 801c7f8:	e7f1      	b.n	801c7de <_ZNK8touchgfx9ConstFont4findEt+0x5a>
 801c7fa:	2000      	movs	r0, #0
 801c7fc:	bdf0      	pop	{r4, r5, r6, r7, pc}

0801c7fe <_ZNK8touchgfx9ConstFont8getGlyphEtRPKhRh>:
 801c7fe:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801c800:	4604      	mov	r4, r0
 801c802:	4617      	mov	r7, r2
 801c804:	461e      	mov	r6, r3
 801c806:	b911      	cbnz	r1, 801c80e <_ZNK8touchgfx9ConstFont8getGlyphEtRPKhRh+0x10>
 801c808:	2500      	movs	r5, #0
 801c80a:	4628      	mov	r0, r5
 801c80c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801c80e:	290a      	cmp	r1, #10
 801c810:	d0fa      	beq.n	801c808 <_ZNK8touchgfx9ConstFont8getGlyphEtRPKhRh+0xa>
 801c812:	f64f 62ff 	movw	r2, #65279	@ 0xfeff
 801c816:	4291      	cmp	r1, r2
 801c818:	d0f6      	beq.n	801c808 <_ZNK8touchgfx9ConstFont8getGlyphEtRPKhRh+0xa>
 801c81a:	f242 020b 	movw	r2, #8203	@ 0x200b
 801c81e:	4291      	cmp	r1, r2
 801c820:	d0f2      	beq.n	801c808 <_ZNK8touchgfx9ConstFont8getGlyphEtRPKhRh+0xa>
 801c822:	f7ff ffaf 	bl	801c784 <_ZNK8touchgfx9ConstFont4findEt>
 801c826:	4605      	mov	r5, r0
 801c828:	b950      	cbnz	r0, 801c840 <_ZNK8touchgfx9ConstFont8getGlyphEtRPKhRh+0x42>
 801c82a:	6823      	ldr	r3, [r4, #0]
 801c82c:	4620      	mov	r0, r4
 801c82e:	691b      	ldr	r3, [r3, #16]
 801c830:	4798      	blx	r3
 801c832:	4601      	mov	r1, r0
 801c834:	4620      	mov	r0, r4
 801c836:	f7ff ffa5 	bl	801c784 <_ZNK8touchgfx9ConstFont4findEt>
 801c83a:	4605      	mov	r5, r0
 801c83c:	2800      	cmp	r0, #0
 801c83e:	d0e3      	beq.n	801c808 <_ZNK8touchgfx9ConstFont8getGlyphEtRPKhRh+0xa>
 801c840:	6823      	ldr	r3, [r4, #0]
 801c842:	4629      	mov	r1, r5
 801c844:	4620      	mov	r0, r4
 801c846:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 801c848:	4798      	blx	r3
 801c84a:	6038      	str	r0, [r7, #0]
 801c84c:	6823      	ldr	r3, [r4, #0]
 801c84e:	4620      	mov	r0, r4
 801c850:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 801c852:	4798      	blx	r3
 801c854:	7030      	strb	r0, [r6, #0]
 801c856:	e7d8      	b.n	801c80a <_ZNK8touchgfx9ConstFont8getGlyphEtRPKhRh+0xc>

0801c858 <_ZN8touchgfx4clzuEm>:
 801c858:	4603      	mov	r3, r0
 801c85a:	b1c8      	cbz	r0, 801c890 <_ZN8touchgfx4clzuEm+0x38>
 801c85c:	0c02      	lsrs	r2, r0, #16
 801c85e:	0412      	lsls	r2, r2, #16
 801c860:	b9a2      	cbnz	r2, 801c88c <_ZN8touchgfx4clzuEm+0x34>
 801c862:	0403      	lsls	r3, r0, #16
 801c864:	2010      	movs	r0, #16
 801c866:	f013 4f7f 	tst.w	r3, #4278190080	@ 0xff000000
 801c86a:	bf04      	itt	eq
 801c86c:	021b      	lsleq	r3, r3, #8
 801c86e:	3008      	addeq	r0, #8
 801c870:	f013 4f70 	tst.w	r3, #4026531840	@ 0xf0000000
 801c874:	bf04      	itt	eq
 801c876:	011b      	lsleq	r3, r3, #4
 801c878:	3004      	addeq	r0, #4
 801c87a:	f013 4f40 	tst.w	r3, #3221225472	@ 0xc0000000
 801c87e:	bf04      	itt	eq
 801c880:	009b      	lsleq	r3, r3, #2
 801c882:	3002      	addeq	r0, #2
 801c884:	2b00      	cmp	r3, #0
 801c886:	db04      	blt.n	801c892 <_ZN8touchgfx4clzuEm+0x3a>
 801c888:	3001      	adds	r0, #1
 801c88a:	4770      	bx	lr
 801c88c:	2000      	movs	r0, #0
 801c88e:	e7ea      	b.n	801c866 <_ZN8touchgfx4clzuEm+0xe>
 801c890:	2020      	movs	r0, #32
 801c892:	4770      	bx	lr

0801c894 <_ZN8touchgfx7muldivuEmmmRm>:
 801c894:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801c898:	4680      	mov	r8, r0
 801c89a:	460f      	mov	r7, r1
 801c89c:	4615      	mov	r5, r2
 801c89e:	461e      	mov	r6, r3
 801c8a0:	f7ff ffda 	bl	801c858 <_ZN8touchgfx4clzuEm>
 801c8a4:	b998      	cbnz	r0, 801c8ce <_ZN8touchgfx7muldivuEmmmRm+0x3a>
 801c8a6:	4608      	mov	r0, r1
 801c8a8:	f7ff ffd6 	bl	801c858 <_ZN8touchgfx4clzuEm>
 801c8ac:	2800      	cmp	r0, #0
 801c8ae:	dd08      	ble.n	801c8c2 <_ZN8touchgfx7muldivuEmmmRm+0x2e>
 801c8b0:	4633      	mov	r3, r6
 801c8b2:	462a      	mov	r2, r5
 801c8b4:	4641      	mov	r1, r8
 801c8b6:	4638      	mov	r0, r7
 801c8b8:	f7ff ffec 	bl	801c894 <_ZN8touchgfx7muldivuEmmmRm>
 801c8bc:	b003      	add	sp, #12
 801c8be:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801c8c2:	f04f 33ff 	mov.w	r3, #4294967295
 801c8c6:	f06f 4000 	mvn.w	r0, #2147483648	@ 0x80000000
 801c8ca:	6033      	str	r3, [r6, #0]
 801c8cc:	e7f6      	b.n	801c8bc <_ZN8touchgfx7muldivuEmmmRm+0x28>
 801c8ce:	fa31 f900 	lsrs.w	r9, r1, r0
 801c8d2:	fb01 f308 	mul.w	r3, r1, r8
 801c8d6:	d105      	bne.n	801c8e4 <_ZN8touchgfx7muldivuEmmmRm+0x50>
 801c8d8:	fbb3 f0f5 	udiv	r0, r3, r5
 801c8dc:	fb05 3510 	mls	r5, r5, r0, r3
 801c8e0:	6035      	str	r5, [r6, #0]
 801c8e2:	e7eb      	b.n	801c8bc <_ZN8touchgfx7muldivuEmmmRm+0x28>
 801c8e4:	2301      	movs	r3, #1
 801c8e6:	fa08 fb00 	lsl.w	fp, r8, r0
 801c8ea:	462a      	mov	r2, r5
 801c8ec:	4641      	mov	r1, r8
 801c8ee:	fa03 f000 	lsl.w	r0, r3, r0
 801c8f2:	4633      	mov	r3, r6
 801c8f4:	fbbb faf5 	udiv	sl, fp, r5
 801c8f8:	3801      	subs	r0, #1
 801c8fa:	fb09 f40a 	mul.w	r4, r9, sl
 801c8fe:	4038      	ands	r0, r7
 801c900:	f7ff ffc8 	bl	801c894 <_ZN8touchgfx7muldivuEmmmRm>
 801c904:	462a      	mov	r2, r5
 801c906:	4607      	mov	r7, r0
 801c908:	ab01      	add	r3, sp, #4
 801c90a:	fb05 b11a 	mls	r1, r5, sl, fp
 801c90e:	4648      	mov	r0, r9
 801c910:	f7ff ffc0 	bl	801c894 <_ZN8touchgfx7muldivuEmmmRm>
 801c914:	9b01      	ldr	r3, [sp, #4]
 801c916:	6832      	ldr	r2, [r6, #0]
 801c918:	441a      	add	r2, r3
 801c91a:	fbb2 f3f5 	udiv	r3, r2, r5
 801c91e:	441c      	add	r4, r3
 801c920:	fb05 2513 	mls	r5, r5, r3, r2
 801c924:	443c      	add	r4, r7
 801c926:	4420      	add	r0, r4
 801c928:	e7da      	b.n	801c8e0 <_ZN8touchgfx7muldivuEmmmRm+0x4c>

0801c92a <_ZN8touchgfx6muldivElllRl>:
 801c92a:	b573      	push	{r0, r1, r4, r5, r6, lr}
 801c92c:	2800      	cmp	r0, #0
 801c92e:	461e      	mov	r6, r3
 801c930:	bfba      	itte	lt
 801c932:	4240      	neglt	r0, r0
 801c934:	f04f 34ff 	movlt.w	r4, #4294967295
 801c938:	2401      	movge	r4, #1
 801c93a:	2900      	cmp	r1, #0
 801c93c:	bfbc      	itt	lt
 801c93e:	4249      	neglt	r1, r1
 801c940:	4264      	neglt	r4, r4
 801c942:	2a00      	cmp	r2, #0
 801c944:	bfb6      	itet	lt
 801c946:	4265      	neglt	r5, r4
 801c948:	4625      	movge	r5, r4
 801c94a:	4252      	neglt	r2, r2
 801c94c:	4288      	cmp	r0, r1
 801c94e:	bfc2      	ittt	gt
 801c950:	4603      	movgt	r3, r0
 801c952:	4608      	movgt	r0, r1
 801c954:	4619      	movgt	r1, r3
 801c956:	ab01      	add	r3, sp, #4
 801c958:	f7ff ff9c 	bl	801c894 <_ZN8touchgfx7muldivuEmmmRm>
 801c95c:	9b01      	ldr	r3, [sp, #4]
 801c95e:	4368      	muls	r0, r5
 801c960:	435c      	muls	r4, r3
 801c962:	6034      	str	r4, [r6, #0]
 801c964:	b002      	add	sp, #8
 801c966:	bd70      	pop	{r4, r5, r6, pc}

0801c968 <_ZN8touchgfx10ClickEvent12getEventTypeEv>:
 801c968:	2000      	movs	r0, #0
 801c96a:	4770      	bx	lr

0801c96c <_ZN8touchgfx9DragEvent12getEventTypeEv>:
 801c96c:	2001      	movs	r0, #1
 801c96e:	4770      	bx	lr

0801c970 <_ZN8touchgfx12GestureEvent12getEventTypeEv>:
 801c970:	2002      	movs	r0, #2
 801c972:	4770      	bx	lr

0801c974 <_ZN8touchgfx12GestureEventD1Ev>:
 801c974:	4770      	bx	lr

0801c976 <_ZN8touchgfx9DragEventD1Ev>:
 801c976:	4770      	bx	lr

0801c978 <_ZN8touchgfx10ClickEventD1Ev>:
 801c978:	4770      	bx	lr

0801c97a <_ZN8touchgfx10ClickEventD0Ev>:
 801c97a:	b510      	push	{r4, lr}
 801c97c:	4604      	mov	r4, r0
 801c97e:	210c      	movs	r1, #12
 801c980:	f00d ffa9 	bl	802a8d6 <_ZdlPvj>
 801c984:	4620      	mov	r0, r4
 801c986:	bd10      	pop	{r4, pc}

0801c988 <_ZN8touchgfx9DragEventD0Ev>:
 801c988:	b510      	push	{r4, lr}
 801c98a:	4604      	mov	r4, r0
 801c98c:	2110      	movs	r1, #16
 801c98e:	f00d ffa2 	bl	802a8d6 <_ZdlPvj>
 801c992:	4620      	mov	r0, r4
 801c994:	bd10      	pop	{r4, pc}

0801c996 <_ZN8touchgfx12GestureEventD0Ev>:
 801c996:	b510      	push	{r4, lr}
 801c998:	4604      	mov	r4, r0
 801c99a:	210c      	movs	r1, #12
 801c99c:	f00d ff9b 	bl	802a8d6 <_ZdlPvj>
 801c9a0:	4620      	mov	r0, r4
 801c9a2:	bd10      	pop	{r4, pc}

0801c9a4 <_ZN8touchgfx6Screen18handleGestureEventERKNS_12GestureEventE>:
 801c9a4:	b530      	push	{r4, r5, lr}
 801c9a6:	460d      	mov	r5, r1
 801c9a8:	6b01      	ldr	r1, [r0, #48]	@ 0x30
 801c9aa:	b087      	sub	sp, #28
 801c9ac:	4604      	mov	r4, r0
 801c9ae:	b301      	cbz	r1, 801c9f2 <_ZN8touchgfx6Screen18handleGestureEventERKNS_12GestureEventE+0x4e>
 801c9b0:	a801      	add	r0, sp, #4
 801c9b2:	f7ff feb3 	bl	801c71c <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 801c9b6:	892a      	ldrh	r2, [r5, #8]
 801c9b8:	f8bd 3004 	ldrh.w	r3, [sp, #4]
 801c9bc:	7928      	ldrb	r0, [r5, #4]
 801c9be:	1ad2      	subs	r2, r2, r3
 801c9c0:	8ea3      	ldrh	r3, [r4, #52]	@ 0x34
 801c9c2:	f9b5 1006 	ldrsh.w	r1, [r5, #6]
 801c9c6:	441a      	add	r2, r3
 801c9c8:	896b      	ldrh	r3, [r5, #10]
 801c9ca:	f8bd 5006 	ldrh.w	r5, [sp, #6]
 801c9ce:	f88d 0010 	strb.w	r0, [sp, #16]
 801c9d2:	1b5b      	subs	r3, r3, r5
 801c9d4:	8ee5      	ldrh	r5, [r4, #54]	@ 0x36
 801c9d6:	6b20      	ldr	r0, [r4, #48]	@ 0x30
 801c9d8:	442b      	add	r3, r5
 801c9da:	4d07      	ldr	r5, [pc, #28]	@ (801c9f8 <_ZN8touchgfx6Screen18handleGestureEventERKNS_12GestureEventE+0x54>)
 801c9dc:	f8ad 1012 	strh.w	r1, [sp, #18]
 801c9e0:	a903      	add	r1, sp, #12
 801c9e2:	9503      	str	r5, [sp, #12]
 801c9e4:	f8ad 2014 	strh.w	r2, [sp, #20]
 801c9e8:	f8ad 3016 	strh.w	r3, [sp, #22]
 801c9ec:	6803      	ldr	r3, [r0, #0]
 801c9ee:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 801c9f0:	4798      	blx	r3
 801c9f2:	b007      	add	sp, #28
 801c9f4:	bd30      	pop	{r4, r5, pc}
 801c9f6:	bf00      	nop
 801c9f8:	0802ef78 	.word	0x0802ef78

0801c9fc <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE>:
 801c9fc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801ca00:	6b03      	ldr	r3, [r0, #48]	@ 0x30
 801ca02:	b08a      	sub	sp, #40	@ 0x28
 801ca04:	4604      	mov	r4, r0
 801ca06:	460d      	mov	r5, r1
 801ca08:	b113      	cbz	r3, 801ca10 <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE+0x14>
 801ca0a:	790b      	ldrb	r3, [r1, #4]
 801ca0c:	2b00      	cmp	r3, #0
 801ca0e:	d044      	beq.n	801ca9a <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE+0x9e>
 801ca10:	f104 0804 	add.w	r8, r4, #4
 801ca14:	a803      	add	r0, sp, #12
 801ca16:	4641      	mov	r1, r8
 801ca18:	f7ff fe80 	bl	801c71c <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 801ca1c:	792b      	ldrb	r3, [r5, #4]
 801ca1e:	f9bd 700c 	ldrsh.w	r7, [sp, #12]
 801ca22:	f9bd 600e 	ldrsh.w	r6, [sp, #14]
 801ca26:	b983      	cbnz	r3, 801ca4a <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE+0x4e>
 801ca28:	f104 0336 	add.w	r3, r4, #54	@ 0x36
 801ca2c:	892a      	ldrh	r2, [r5, #8]
 801ca2e:	88e9      	ldrh	r1, [r5, #6]
 801ca30:	4640      	mov	r0, r8
 801ca32:	1b92      	subs	r2, r2, r6
 801ca34:	9301      	str	r3, [sp, #4]
 801ca36:	1bc9      	subs	r1, r1, r7
 801ca38:	f104 0334 	add.w	r3, r4, #52	@ 0x34
 801ca3c:	b212      	sxth	r2, r2
 801ca3e:	9300      	str	r3, [sp, #0]
 801ca40:	b209      	sxth	r1, r1
 801ca42:	f104 0330 	add.w	r3, r4, #48	@ 0x30
 801ca46:	f7fa ffb3 	bl	80179b0 <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_>
 801ca4a:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 801ca4c:	b329      	cbz	r1, 801ca9a <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE+0x9e>
 801ca4e:	a805      	add	r0, sp, #20
 801ca50:	f7ff fe64 	bl	801c71c <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 801ca54:	f8bd 2014 	ldrh.w	r2, [sp, #20]
 801ca58:	792b      	ldrb	r3, [r5, #4]
 801ca5a:	a907      	add	r1, sp, #28
 801ca5c:	1abf      	subs	r7, r7, r2
 801ca5e:	88ea      	ldrh	r2, [r5, #6]
 801ca60:	6b20      	ldr	r0, [r4, #48]	@ 0x30
 801ca62:	4417      	add	r7, r2
 801ca64:	8ea2      	ldrh	r2, [r4, #52]	@ 0x34
 801ca66:	f88d 3020 	strb.w	r3, [sp, #32]
 801ca6a:	4417      	add	r7, r2
 801ca6c:	f8bd 2016 	ldrh.w	r2, [sp, #22]
 801ca70:	1ab6      	subs	r6, r6, r2
 801ca72:	892a      	ldrh	r2, [r5, #8]
 801ca74:	f8ad 7022 	strh.w	r7, [sp, #34]	@ 0x22
 801ca78:	4416      	add	r6, r2
 801ca7a:	8ee2      	ldrh	r2, [r4, #54]	@ 0x36
 801ca7c:	4416      	add	r6, r2
 801ca7e:	4a08      	ldr	r2, [pc, #32]	@ (801caa0 <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE+0xa4>)
 801ca80:	f8ad 6024 	strh.w	r6, [sp, #36]	@ 0x24
 801ca84:	2600      	movs	r6, #0
 801ca86:	9207      	str	r2, [sp, #28]
 801ca88:	f8ad 6026 	strh.w	r6, [sp, #38]	@ 0x26
 801ca8c:	6803      	ldr	r3, [r0, #0]
 801ca8e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 801ca90:	4798      	blx	r3
 801ca92:	792b      	ldrb	r3, [r5, #4]
 801ca94:	b10b      	cbz	r3, 801ca9a <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE+0x9e>
 801ca96:	e9c4 660c 	strd	r6, r6, [r4, #48]	@ 0x30
 801ca9a:	b00a      	add	sp, #40	@ 0x28
 801ca9c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801caa0:	0802ef50 	.word	0x0802ef50

0801caa4 <_ZN8touchgfx6Screen15handleDragEventERKNS_9DragEventE>:
 801caa4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801caa8:	460c      	mov	r4, r1
 801caaa:	6b01      	ldr	r1, [r0, #48]	@ 0x30
 801caac:	b088      	sub	sp, #32
 801caae:	4605      	mov	r5, r0
 801cab0:	2900      	cmp	r1, #0
 801cab2:	d06d      	beq.n	801cb90 <_ZN8touchgfx6Screen15handleDragEventERKNS_9DragEventE+0xec>
 801cab4:	4668      	mov	r0, sp
 801cab6:	f7ff fe31 	bl	801c71c <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 801caba:	8ea9      	ldrh	r1, [r5, #52]	@ 0x34
 801cabc:	88e3      	ldrh	r3, [r4, #6]
 801cabe:	f9bd 8000 	ldrsh.w	r8, [sp]
 801cac2:	440b      	add	r3, r1
 801cac4:	f9bd 7002 	ldrsh.w	r7, [sp, #2]
 801cac8:	b21b      	sxth	r3, r3
 801caca:	4543      	cmp	r3, r8
 801cacc:	db31      	blt.n	801cb32 <_ZN8touchgfx6Screen15handleDragEventERKNS_9DragEventE+0x8e>
 801cace:	f8bd c004 	ldrh.w	ip, [sp, #4]
 801cad2:	44c4      	add	ip, r8
 801cad4:	fa0f fc8c 	sxth.w	ip, ip
 801cad8:	4563      	cmp	r3, ip
 801cada:	da2a      	bge.n	801cb32 <_ZN8touchgfx6Screen15handleDragEventERKNS_9DragEventE+0x8e>
 801cadc:	8eea      	ldrh	r2, [r5, #54]	@ 0x36
 801cade:	8926      	ldrh	r6, [r4, #8]
 801cae0:	4416      	add	r6, r2
 801cae2:	b236      	sxth	r6, r6
 801cae4:	42be      	cmp	r6, r7
 801cae6:	db24      	blt.n	801cb32 <_ZN8touchgfx6Screen15handleDragEventERKNS_9DragEventE+0x8e>
 801cae8:	f8bd 0006 	ldrh.w	r0, [sp, #6]
 801caec:	4438      	add	r0, r7
 801caee:	b200      	sxth	r0, r0
 801caf0:	4286      	cmp	r6, r0
 801caf2:	da1e      	bge.n	801cb32 <_ZN8touchgfx6Screen15handleDragEventERKNS_9DragEventE+0x8e>
 801caf4:	8963      	ldrh	r3, [r4, #10]
 801caf6:	4419      	add	r1, r3
 801caf8:	b209      	sxth	r1, r1
 801cafa:	4541      	cmp	r1, r8
 801cafc:	db08      	blt.n	801cb10 <_ZN8touchgfx6Screen15handleDragEventERKNS_9DragEventE+0x6c>
 801cafe:	4561      	cmp	r1, ip
 801cb00:	da06      	bge.n	801cb10 <_ZN8touchgfx6Screen15handleDragEventERKNS_9DragEventE+0x6c>
 801cb02:	89a3      	ldrh	r3, [r4, #12]
 801cb04:	441a      	add	r2, r3
 801cb06:	b212      	sxth	r2, r2
 801cb08:	42ba      	cmp	r2, r7
 801cb0a:	db01      	blt.n	801cb10 <_ZN8touchgfx6Screen15handleDragEventERKNS_9DragEventE+0x6c>
 801cb0c:	4282      	cmp	r2, r0
 801cb0e:	db10      	blt.n	801cb32 <_ZN8touchgfx6Screen15handleDragEventERKNS_9DragEventE+0x8e>
 801cb10:	4b21      	ldr	r3, [pc, #132]	@ (801cb98 <_ZN8touchgfx6Screen15handleDragEventERKNS_9DragEventE+0xf4>)
 801cb12:	a904      	add	r1, sp, #16
 801cb14:	6b28      	ldr	r0, [r5, #48]	@ 0x30
 801cb16:	9304      	str	r3, [sp, #16]
 801cb18:	2302      	movs	r3, #2
 801cb1a:	f88d 3014 	strb.w	r3, [sp, #20]
 801cb1e:	2300      	movs	r3, #0
 801cb20:	f8ad 3016 	strh.w	r3, [sp, #22]
 801cb24:	f8ad 3018 	strh.w	r3, [sp, #24]
 801cb28:	f8ad 301a 	strh.w	r3, [sp, #26]
 801cb2c:	6803      	ldr	r3, [r0, #0]
 801cb2e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 801cb30:	4798      	blx	r3
 801cb32:	1d29      	adds	r1, r5, #4
 801cb34:	a802      	add	r0, sp, #8
 801cb36:	f7ff fdf1 	bl	801c71c <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 801cb3a:	f8bd 3008 	ldrh.w	r3, [sp, #8]
 801cb3e:	88e0      	ldrh	r0, [r4, #6]
 801cb40:	eba3 0808 	sub.w	r8, r3, r8
 801cb44:	f8bd 300a 	ldrh.w	r3, [sp, #10]
 801cb48:	7921      	ldrb	r1, [r4, #4]
 801cb4a:	fa1f f888 	uxth.w	r8, r8
 801cb4e:	1bdf      	subs	r7, r3, r7
 801cb50:	f8b5 c034 	ldrh.w	ip, [r5, #52]	@ 0x34
 801cb54:	b2bb      	uxth	r3, r7
 801cb56:	4440      	add	r0, r8
 801cb58:	8922      	ldrh	r2, [r4, #8]
 801cb5a:	8967      	ldrh	r7, [r4, #10]
 801cb5c:	4460      	add	r0, ip
 801cb5e:	89a4      	ldrh	r4, [r4, #12]
 801cb60:	441a      	add	r2, r3
 801cb62:	8eee      	ldrh	r6, [r5, #54]	@ 0x36
 801cb64:	44b8      	add	r8, r7
 801cb66:	4423      	add	r3, r4
 801cb68:	f8ad 0016 	strh.w	r0, [sp, #22]
 801cb6c:	4432      	add	r2, r6
 801cb6e:	44e0      	add	r8, ip
 801cb70:	4433      	add	r3, r6
 801cb72:	4c0a      	ldr	r4, [pc, #40]	@ (801cb9c <_ZN8touchgfx6Screen15handleDragEventERKNS_9DragEventE+0xf8>)
 801cb74:	6b28      	ldr	r0, [r5, #48]	@ 0x30
 801cb76:	f88d 1014 	strb.w	r1, [sp, #20]
 801cb7a:	a904      	add	r1, sp, #16
 801cb7c:	9404      	str	r4, [sp, #16]
 801cb7e:	f8ad 2018 	strh.w	r2, [sp, #24]
 801cb82:	f8ad 801a 	strh.w	r8, [sp, #26]
 801cb86:	f8ad 301c 	strh.w	r3, [sp, #28]
 801cb8a:	6803      	ldr	r3, [r0, #0]
 801cb8c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 801cb8e:	4798      	blx	r3
 801cb90:	b008      	add	sp, #32
 801cb92:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801cb96:	bf00      	nop
 801cb98:	0802ef50 	.word	0x0802ef50
 801cb9c:	0802ef64 	.word	0x0802ef64

0801cba0 <_ZN8touchgfx8Drawable20getCachedVisibleRectEv>:
 801cba0:	b537      	push	{r0, r1, r2, r4, r5, lr}
 801cba2:	4604      	mov	r4, r0
 801cba4:	f934 2f0c 	ldrsh.w	r2, [r4, #12]!
 801cba8:	3201      	adds	r2, #1
 801cbaa:	d112      	bne.n	801cbd2 <_ZN8touchgfx8Drawable20getCachedVisibleRectEv+0x32>
 801cbac:	2500      	movs	r5, #0
 801cbae:	f9b0 1008 	ldrsh.w	r1, [r0, #8]
 801cbb2:	f9b0 200a 	ldrsh.w	r2, [r0, #10]
 801cbb6:	6803      	ldr	r3, [r0, #0]
 801cbb8:	9500      	str	r5, [sp, #0]
 801cbba:	466d      	mov	r5, sp
 801cbbc:	f8ad 1004 	strh.w	r1, [sp, #4]
 801cbc0:	f8ad 2006 	strh.w	r2, [sp, #6]
 801cbc4:	4629      	mov	r1, r5
 801cbc6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801cbc8:	4798      	blx	r3
 801cbca:	e895 0003 	ldmia.w	r5, {r0, r1}
 801cbce:	e884 0003 	stmia.w	r4, {r0, r1}
 801cbd2:	4620      	mov	r0, r4
 801cbd4:	b003      	add	sp, #12
 801cbd6:	bd30      	pop	{r4, r5, pc}

0801cbd8 <_ZN8touchgfx8Drawable13getCachedAbsXEv>:
 801cbd8:	b513      	push	{r0, r1, r4, lr}
 801cbda:	f9b0 3020 	ldrsh.w	r3, [r0, #32]
 801cbde:	4604      	mov	r4, r0
 801cbe0:	3301      	adds	r3, #1
 801cbe2:	d109      	bne.n	801cbf8 <_ZN8touchgfx8Drawable13getCachedAbsXEv+0x20>
 801cbe4:	4601      	mov	r1, r0
 801cbe6:	4668      	mov	r0, sp
 801cbe8:	f7ff fd98 	bl	801c71c <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 801cbec:	f8bd 3000 	ldrh.w	r3, [sp]
 801cbf0:	8423      	strh	r3, [r4, #32]
 801cbf2:	f8bd 3002 	ldrh.w	r3, [sp, #2]
 801cbf6:	8463      	strh	r3, [r4, #34]	@ 0x22
 801cbf8:	f9b4 0020 	ldrsh.w	r0, [r4, #32]
 801cbfc:	b002      	add	sp, #8
 801cbfe:	bd10      	pop	{r4, pc}

0801cc00 <_ZN8touchgfx8Drawable13getCachedAbsYEv>:
 801cc00:	b513      	push	{r0, r1, r4, lr}
 801cc02:	f9b0 3022 	ldrsh.w	r3, [r0, #34]	@ 0x22
 801cc06:	4604      	mov	r4, r0
 801cc08:	3301      	adds	r3, #1
 801cc0a:	d109      	bne.n	801cc20 <_ZN8touchgfx8Drawable13getCachedAbsYEv+0x20>
 801cc0c:	4601      	mov	r1, r0
 801cc0e:	4668      	mov	r0, sp
 801cc10:	f7ff fd84 	bl	801c71c <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 801cc14:	f8bd 3000 	ldrh.w	r3, [sp]
 801cc18:	8423      	strh	r3, [r4, #32]
 801cc1a:	f8bd 3002 	ldrh.w	r3, [sp, #2]
 801cc1e:	8463      	strh	r3, [r4, #34]	@ 0x22
 801cc20:	f9b4 0022 	ldrsh.w	r0, [r4, #34]	@ 0x22
 801cc24:	b002      	add	sp, #8
 801cc26:	bd10      	pop	{r4, pc}

0801cc28 <_ZN8touchgfx6ScreenC1Ev>:
 801cc28:	b570      	push	{r4, r5, r6, lr}
 801cc2a:	4b17      	ldr	r3, [pc, #92]	@ (801cc88 <_ZN8touchgfx6ScreenC1Ev+0x60>)
 801cc2c:	4605      	mov	r5, r0
 801cc2e:	4a17      	ldr	r2, [pc, #92]	@ (801cc8c <_ZN8touchgfx6ScreenC1Ev+0x64>)
 801cc30:	2101      	movs	r1, #1
 801cc32:	f845 3b04 	str.w	r3, [r5], #4
 801cc36:	2300      	movs	r3, #0
 801cc38:	6042      	str	r2, [r0, #4]
 801cc3a:	4604      	mov	r4, r0
 801cc3c:	8103      	strh	r3, [r0, #8]
 801cc3e:	8143      	strh	r3, [r0, #10]
 801cc40:	8183      	strh	r3, [r0, #12]
 801cc42:	81c3      	strh	r3, [r0, #14]
 801cc44:	8203      	strh	r3, [r0, #16]
 801cc46:	8243      	strh	r3, [r0, #18]
 801cc48:	8283      	strh	r3, [r0, #20]
 801cc4a:	82c3      	strh	r3, [r0, #22]
 801cc4c:	6203      	str	r3, [r0, #32]
 801cc4e:	8483      	strh	r3, [r0, #36]	@ 0x24
 801cc50:	84c3      	strh	r3, [r0, #38]	@ 0x26
 801cc52:	f880 3028 	strb.w	r3, [r0, #40]	@ 0x28
 801cc56:	6343      	str	r3, [r0, #52]	@ 0x34
 801cc58:	f880 1029 	strb.w	r1, [r0, #41]	@ 0x29
 801cc5c:	f880 1038 	strb.w	r1, [r0, #56]	@ 0x38
 801cc60:	e9c0 3306 	strd	r3, r3, [r0, #24]
 801cc64:	e9c0 330b 	strd	r3, r3, [r0, #44]	@ 0x2c
 801cc68:	4b09      	ldr	r3, [pc, #36]	@ (801cc90 <_ZN8touchgfx6ScreenC1Ev+0x68>)
 801cc6a:	4628      	mov	r0, r5
 801cc6c:	f9b3 6000 	ldrsh.w	r6, [r3]
 801cc70:	6b53      	ldr	r3, [r2, #52]	@ 0x34
 801cc72:	4a08      	ldr	r2, [pc, #32]	@ (801cc94 <_ZN8touchgfx6ScreenC1Ev+0x6c>)
 801cc74:	f9b2 1000 	ldrsh.w	r1, [r2]
 801cc78:	4798      	blx	r3
 801cc7a:	6863      	ldr	r3, [r4, #4]
 801cc7c:	4628      	mov	r0, r5
 801cc7e:	4631      	mov	r1, r6
 801cc80:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 801cc82:	4798      	blx	r3
 801cc84:	4620      	mov	r0, r4
 801cc86:	bd70      	pop	{r4, r5, r6, pc}
 801cc88:	0802ef8c 	.word	0x0802ef8c
 801cc8c:	0802d7cc 	.word	0x0802d7cc
 801cc90:	2400b876 	.word	0x2400b876
 801cc94:	2400b874 	.word	0x2400b874

0801cc98 <_ZN8touchgfx6Screen4drawEv>:
 801cc98:	4b09      	ldr	r3, [pc, #36]	@ (801ccc0 <_ZN8touchgfx6Screen4drawEv+0x28>)
 801cc9a:	b507      	push	{r0, r1, r2, lr}
 801cc9c:	f9b3 2000 	ldrsh.w	r2, [r3]
 801cca0:	2100      	movs	r1, #0
 801cca2:	4b08      	ldr	r3, [pc, #32]	@ (801ccc4 <_ZN8touchgfx6Screen4drawEv+0x2c>)
 801cca4:	9100      	str	r1, [sp, #0]
 801cca6:	4669      	mov	r1, sp
 801cca8:	f9b3 3000 	ldrsh.w	r3, [r3]
 801ccac:	f8ad 2004 	strh.w	r2, [sp, #4]
 801ccb0:	f8ad 3006 	strh.w	r3, [sp, #6]
 801ccb4:	6803      	ldr	r3, [r0, #0]
 801ccb6:	689b      	ldr	r3, [r3, #8]
 801ccb8:	4798      	blx	r3
 801ccba:	b003      	add	sp, #12
 801ccbc:	f85d fb04 	ldr.w	pc, [sp], #4
 801ccc0:	2400b874 	.word	0x2400b874
 801ccc4:	2400b876 	.word	0x2400b876

0801ccc8 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE>:
 801ccc8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801cccc:	f9b1 3004 	ldrsh.w	r3, [r1, #4]
 801ccd0:	b089      	sub	sp, #36	@ 0x24
 801ccd2:	4680      	mov	r8, r0
 801ccd4:	460c      	mov	r4, r1
 801ccd6:	2b00      	cmp	r3, #0
 801ccd8:	4615      	mov	r5, r2
 801ccda:	dd0e      	ble.n	801ccfa <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x32>
 801ccdc:	f9b1 3006 	ldrsh.w	r3, [r1, #6]
 801cce0:	2b00      	cmp	r3, #0
 801cce2:	dd0a      	ble.n	801ccfa <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x32>
 801cce4:	4628      	mov	r0, r5
 801cce6:	f7ff ff5b 	bl	801cba0 <_ZN8touchgfx8Drawable20getCachedVisibleRectEv>
 801ccea:	4621      	mov	r1, r4
 801ccec:	f7fe fc2a 	bl	801b544 <_ZNK8touchgfx4Rect9intersectERKS0_>
 801ccf0:	69eb      	ldr	r3, [r5, #28]
 801ccf2:	b928      	cbnz	r0, 801cd00 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x38>
 801ccf4:	461d      	mov	r5, r3
 801ccf6:	2b00      	cmp	r3, #0
 801ccf8:	d1f4      	bne.n	801cce4 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x1c>
 801ccfa:	b009      	add	sp, #36	@ 0x24
 801ccfc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801cd00:	ae04      	add	r6, sp, #16
 801cd02:	2b00      	cmp	r3, #0
 801cd04:	f000 80b5 	beq.w	801ce72 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x1aa>
 801cd08:	682b      	ldr	r3, [r5, #0]
 801cd0a:	4629      	mov	r1, r5
 801cd0c:	a802      	add	r0, sp, #8
 801cd0e:	68db      	ldr	r3, [r3, #12]
 801cd10:	4798      	blx	r3
 801cd12:	4628      	mov	r0, r5
 801cd14:	f7ff ff60 	bl	801cbd8 <_ZN8touchgfx8Drawable13getCachedAbsXEv>
 801cd18:	f8bd 7008 	ldrh.w	r7, [sp, #8]
 801cd1c:	4407      	add	r7, r0
 801cd1e:	4628      	mov	r0, r5
 801cd20:	f7ff ff6e 	bl	801cc00 <_ZN8touchgfx8Drawable13getCachedAbsYEv>
 801cd24:	f8bd 300a 	ldrh.w	r3, [sp, #10]
 801cd28:	f9bd 200c 	ldrsh.w	r2, [sp, #12]
 801cd2c:	b23f      	sxth	r7, r7
 801cd2e:	4418      	add	r0, r3
 801cd30:	f9bd 300e 	ldrsh.w	r3, [sp, #14]
 801cd34:	4621      	mov	r1, r4
 801cd36:	f8ad 2014 	strh.w	r2, [sp, #20]
 801cd3a:	f8ad 0012 	strh.w	r0, [sp, #18]
 801cd3e:	4630      	mov	r0, r6
 801cd40:	f8ad 3016 	strh.w	r3, [sp, #22]
 801cd44:	f8ad 7010 	strh.w	r7, [sp, #16]
 801cd48:	f7fa ff14 	bl	8017b74 <_ZN8touchgfx4RectaNERKS0_>
 801cd4c:	4628      	mov	r0, r5
 801cd4e:	f7ff ff27 	bl	801cba0 <_ZN8touchgfx8Drawable20getCachedVisibleRectEv>
 801cd52:	ab06      	add	r3, sp, #24
 801cd54:	4602      	mov	r2, r0
 801cd56:	e896 0003 	ldmia.w	r6, {r0, r1}
 801cd5a:	e883 0003 	stmia.w	r3, {r0, r1}
 801cd5e:	4611      	mov	r1, r2
 801cd60:	4618      	mov	r0, r3
 801cd62:	f7fa ff07 	bl	8017b74 <_ZN8touchgfx4RectaNERKS0_>
 801cd66:	f9bd 3018 	ldrsh.w	r3, [sp, #24]
 801cd6a:	f9b4 1000 	ldrsh.w	r1, [r4]
 801cd6e:	f9bd a01a 	ldrsh.w	sl, [sp, #26]
 801cd72:	4299      	cmp	r1, r3
 801cd74:	f9bd b01c 	ldrsh.w	fp, [sp, #28]
 801cd78:	f9bd 901e 	ldrsh.w	r9, [sp, #30]
 801cd7c:	d10b      	bne.n	801cd96 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0xce>
 801cd7e:	f9b4 2002 	ldrsh.w	r2, [r4, #2]
 801cd82:	4552      	cmp	r2, sl
 801cd84:	d107      	bne.n	801cd96 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0xce>
 801cd86:	f9b4 2004 	ldrsh.w	r2, [r4, #4]
 801cd8a:	455a      	cmp	r2, fp
 801cd8c:	d103      	bne.n	801cd96 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0xce>
 801cd8e:	f9b4 2006 	ldrsh.w	r2, [r4, #6]
 801cd92:	454a      	cmp	r2, r9
 801cd94:	d06d      	beq.n	801ce72 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x1aa>
 801cd96:	f1bb 0f00 	cmp.w	fp, #0
 801cd9a:	dd65      	ble.n	801ce68 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x1a0>
 801cd9c:	f1b9 0f00 	cmp.w	r9, #0
 801cda0:	dd62      	ble.n	801ce68 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x1a0>
 801cda2:	f9b4 2002 	ldrsh.w	r2, [r4, #2]
 801cda6:	fa1f f08a 	uxth.w	r0, sl
 801cdaa:	4552      	cmp	r2, sl
 801cdac:	9000      	str	r0, [sp, #0]
 801cdae:	da12      	bge.n	801cdd6 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x10e>
 801cdb0:	9301      	str	r3, [sp, #4]
 801cdb2:	9b00      	ldr	r3, [sp, #0]
 801cdb4:	f9b4 0004 	ldrsh.w	r0, [r4, #4]
 801cdb8:	f8ad 2012 	strh.w	r2, [sp, #18]
 801cdbc:	1a9a      	subs	r2, r3, r2
 801cdbe:	f8ad 1010 	strh.w	r1, [sp, #16]
 801cdc2:	4631      	mov	r1, r6
 801cdc4:	f8ad 0014 	strh.w	r0, [sp, #20]
 801cdc8:	4640      	mov	r0, r8
 801cdca:	f8ad 2016 	strh.w	r2, [sp, #22]
 801cdce:	69ea      	ldr	r2, [r5, #28]
 801cdd0:	f7ff ff7a 	bl	801ccc8 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE>
 801cdd4:	9b01      	ldr	r3, [sp, #4]
 801cdd6:	f9b4 2000 	ldrsh.w	r2, [r4]
 801cdda:	b29f      	uxth	r7, r3
 801cddc:	429a      	cmp	r2, r3
 801cdde:	da0d      	bge.n	801cdfc <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x134>
 801cde0:	f8ad 2010 	strh.w	r2, [sp, #16]
 801cde4:	1aba      	subs	r2, r7, r2
 801cde6:	f8ad a012 	strh.w	sl, [sp, #18]
 801cdea:	4631      	mov	r1, r6
 801cdec:	f8ad 2014 	strh.w	r2, [sp, #20]
 801cdf0:	4640      	mov	r0, r8
 801cdf2:	f8ad 9016 	strh.w	r9, [sp, #22]
 801cdf6:	69ea      	ldr	r2, [r5, #28]
 801cdf8:	f7ff ff66 	bl	801ccc8 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE>
 801cdfc:	8822      	ldrh	r2, [r4, #0]
 801cdfe:	445f      	add	r7, fp
 801ce00:	88a3      	ldrh	r3, [r4, #4]
 801ce02:	b2bf      	uxth	r7, r7
 801ce04:	4413      	add	r3, r2
 801ce06:	b23a      	sxth	r2, r7
 801ce08:	b29b      	uxth	r3, r3
 801ce0a:	b219      	sxth	r1, r3
 801ce0c:	4291      	cmp	r1, r2
 801ce0e:	dd0d      	ble.n	801ce2c <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x164>
 801ce10:	1bdb      	subs	r3, r3, r7
 801ce12:	f8ad 2010 	strh.w	r2, [sp, #16]
 801ce16:	f8ad a012 	strh.w	sl, [sp, #18]
 801ce1a:	4631      	mov	r1, r6
 801ce1c:	f8ad 3014 	strh.w	r3, [sp, #20]
 801ce20:	4640      	mov	r0, r8
 801ce22:	f8ad 9016 	strh.w	r9, [sp, #22]
 801ce26:	69ea      	ldr	r2, [r5, #28]
 801ce28:	f7ff ff4e 	bl	801ccc8 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE>
 801ce2c:	88e2      	ldrh	r2, [r4, #6]
 801ce2e:	8863      	ldrh	r3, [r4, #2]
 801ce30:	4413      	add	r3, r2
 801ce32:	9a00      	ldr	r2, [sp, #0]
 801ce34:	444a      	add	r2, r9
 801ce36:	b29b      	uxth	r3, r3
 801ce38:	fa1f f982 	uxth.w	r9, r2
 801ce3c:	b219      	sxth	r1, r3
 801ce3e:	fa0f f289 	sxth.w	r2, r9
 801ce42:	428a      	cmp	r2, r1
 801ce44:	da15      	bge.n	801ce72 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x1aa>
 801ce46:	f9b4 1004 	ldrsh.w	r1, [r4, #4]
 801ce4a:	eba3 0309 	sub.w	r3, r3, r9
 801ce4e:	f9b4 0000 	ldrsh.w	r0, [r4]
 801ce52:	f8ad 1014 	strh.w	r1, [sp, #20]
 801ce56:	4631      	mov	r1, r6
 801ce58:	f8ad 0010 	strh.w	r0, [sp, #16]
 801ce5c:	f8ad 2012 	strh.w	r2, [sp, #18]
 801ce60:	f8ad 3016 	strh.w	r3, [sp, #22]
 801ce64:	69ea      	ldr	r2, [r5, #28]
 801ce66:	e001      	b.n	801ce6c <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x1a4>
 801ce68:	69ea      	ldr	r2, [r5, #28]
 801ce6a:	4621      	mov	r1, r4
 801ce6c:	4640      	mov	r0, r8
 801ce6e:	f7ff ff2b 	bl	801ccc8 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE>
 801ce72:	4628      	mov	r0, r5
 801ce74:	f7ff fe94 	bl	801cba0 <_ZN8touchgfx8Drawable20getCachedVisibleRectEv>
 801ce78:	6861      	ldr	r1, [r4, #4]
 801ce7a:	4602      	mov	r2, r0
 801ce7c:	4633      	mov	r3, r6
 801ce7e:	6820      	ldr	r0, [r4, #0]
 801ce80:	c303      	stmia	r3!, {r0, r1}
 801ce82:	4611      	mov	r1, r2
 801ce84:	4630      	mov	r0, r6
 801ce86:	f7fa fe75 	bl	8017b74 <_ZN8touchgfx4RectaNERKS0_>
 801ce8a:	f9bd 3014 	ldrsh.w	r3, [sp, #20]
 801ce8e:	2b00      	cmp	r3, #0
 801ce90:	f77f af33 	ble.w	801ccfa <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x32>
 801ce94:	f9bd 3016 	ldrsh.w	r3, [sp, #22]
 801ce98:	2b00      	cmp	r3, #0
 801ce9a:	f77f af2e 	ble.w	801ccfa <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x32>
 801ce9e:	4628      	mov	r0, r5
 801cea0:	f7ff fe9a 	bl	801cbd8 <_ZN8touchgfx8Drawable13getCachedAbsXEv>
 801cea4:	f8bd 3010 	ldrh.w	r3, [sp, #16]
 801cea8:	1a18      	subs	r0, r3, r0
 801ceaa:	f8ad 0010 	strh.w	r0, [sp, #16]
 801ceae:	4628      	mov	r0, r5
 801ceb0:	f7ff fea6 	bl	801cc00 <_ZN8touchgfx8Drawable13getCachedAbsYEv>
 801ceb4:	f8bd 3012 	ldrh.w	r3, [sp, #18]
 801ceb8:	4631      	mov	r1, r6
 801ceba:	1a18      	subs	r0, r3, r0
 801cebc:	f8ad 0012 	strh.w	r0, [sp, #18]
 801cec0:	4628      	mov	r0, r5
 801cec2:	682b      	ldr	r3, [r5, #0]
 801cec4:	689b      	ldr	r3, [r3, #8]
 801cec6:	4798      	blx	r3
 801cec8:	e717      	b.n	801ccfa <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x32>

0801ceca <_ZN8touchgfx6Screen9startSMOCERKNS_4RectE>:
 801ceca:	b570      	push	{r4, r5, r6, lr}
 801cecc:	1d06      	adds	r6, r0, #4
 801cece:	b086      	sub	sp, #24
 801ced0:	460c      	mov	r4, r1
 801ced2:	2300      	movs	r3, #0
 801ced4:	4631      	mov	r1, r6
 801ced6:	4605      	mov	r5, r0
 801ced8:	a802      	add	r0, sp, #8
 801ceda:	9301      	str	r3, [sp, #4]
 801cedc:	f7ff fc1e 	bl	801c71c <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 801cee0:	f8bd 3008 	ldrh.w	r3, [sp, #8]
 801cee4:	8822      	ldrh	r2, [r4, #0]
 801cee6:	f8bd 100a 	ldrh.w	r1, [sp, #10]
 801ceea:	1ad2      	subs	r2, r2, r3
 801ceec:	8863      	ldrh	r3, [r4, #2]
 801ceee:	f9b4 0004 	ldrsh.w	r0, [r4, #4]
 801cef2:	1a5b      	subs	r3, r3, r1
 801cef4:	f9b4 1006 	ldrsh.w	r1, [r4, #6]
 801cef8:	f8ad 2010 	strh.w	r2, [sp, #16]
 801cefc:	aa01      	add	r2, sp, #4
 801cefe:	f8ad 0014 	strh.w	r0, [sp, #20]
 801cf02:	4630      	mov	r0, r6
 801cf04:	f8ad 1016 	strh.w	r1, [sp, #22]
 801cf08:	a904      	add	r1, sp, #16
 801cf0a:	f8ad 3012 	strh.w	r3, [sp, #18]
 801cf0e:	f7fa ff09 	bl	8017d24 <_ZN8touchgfx9Container14setupDrawChainERKNS_4RectEPPNS_8DrawableE>
 801cf12:	9a01      	ldr	r2, [sp, #4]
 801cf14:	b11a      	cbz	r2, 801cf1e <_ZN8touchgfx6Screen9startSMOCERKNS_4RectE+0x54>
 801cf16:	4621      	mov	r1, r4
 801cf18:	4628      	mov	r0, r5
 801cf1a:	f7ff fed5 	bl	801ccc8 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE>
 801cf1e:	b006      	add	sp, #24
 801cf20:	bd70      	pop	{r4, r5, r6, pc}

0801cf22 <_ZN8touchgfx6Screen4drawERNS_4RectE>:
 801cf22:	4602      	mov	r2, r0
 801cf24:	b530      	push	{r4, r5, lr}
 801cf26:	4604      	mov	r4, r0
 801cf28:	b085      	sub	sp, #20
 801cf2a:	f852 0f08 	ldr.w	r0, [r2, #8]!
 801cf2e:	460d      	mov	r5, r1
 801cf30:	466b      	mov	r3, sp
 801cf32:	6851      	ldr	r1, [r2, #4]
 801cf34:	c303      	stmia	r3!, {r0, r1}
 801cf36:	4629      	mov	r1, r5
 801cf38:	4668      	mov	r0, sp
 801cf3a:	f7fa fe1b 	bl	8017b74 <_ZN8touchgfx4RectaNERKS0_>
 801cf3e:	f894 3038 	ldrb.w	r3, [r4, #56]	@ 0x38
 801cf42:	b12b      	cbz	r3, 801cf50 <_ZN8touchgfx6Screen4drawERNS_4RectE+0x2e>
 801cf44:	4669      	mov	r1, sp
 801cf46:	4620      	mov	r0, r4
 801cf48:	f7ff ffbf 	bl	801ceca <_ZN8touchgfx6Screen9startSMOCERKNS_4RectE>
 801cf4c:	b005      	add	sp, #20
 801cf4e:	bd30      	pop	{r4, r5, pc}
 801cf50:	3404      	adds	r4, #4
 801cf52:	a802      	add	r0, sp, #8
 801cf54:	4621      	mov	r1, r4
 801cf56:	f7ff fbe1 	bl	801c71c <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 801cf5a:	f8bd 3000 	ldrh.w	r3, [sp]
 801cf5e:	f8bd 2008 	ldrh.w	r2, [sp, #8]
 801cf62:	4669      	mov	r1, sp
 801cf64:	4620      	mov	r0, r4
 801cf66:	1a9b      	subs	r3, r3, r2
 801cf68:	f8bd 200a 	ldrh.w	r2, [sp, #10]
 801cf6c:	f8ad 3000 	strh.w	r3, [sp]
 801cf70:	f8bd 3002 	ldrh.w	r3, [sp, #2]
 801cf74:	1a9b      	subs	r3, r3, r2
 801cf76:	f8ad 3002 	strh.w	r3, [sp, #2]
 801cf7a:	f7fa fe9a 	bl	8017cb2 <_ZNK8touchgfx9Container4drawERKNS_4RectE>
 801cf7e:	e7e5      	b.n	801cf4c <_ZN8touchgfx6Screen4drawERNS_4RectE+0x2a>

0801cf80 <_ZN8touchgfx6Screen14bindTransitionERNS_10TransitionE>:
 801cf80:	460b      	mov	r3, r1
 801cf82:	680a      	ldr	r2, [r1, #0]
 801cf84:	1d01      	adds	r1, r0, #4
 801cf86:	6992      	ldr	r2, [r2, #24]
 801cf88:	4618      	mov	r0, r3
 801cf8a:	4710      	bx	r2

0801cf8c <_ZN8touchgfx15EasingEquations12cubicEaseOutEtsst>:
 801cf8c:	4298      	cmp	r0, r3
 801cf8e:	d200      	bcs.n	801cf92 <_ZN8touchgfx15EasingEquations12cubicEaseOutEtsst+0x6>
 801cf90:	b913      	cbnz	r3, 801cf98 <_ZN8touchgfx15EasingEquations12cubicEaseOutEtsst+0xc>
 801cf92:	440a      	add	r2, r1
 801cf94:	b210      	sxth	r0, r2
 801cf96:	4770      	bx	lr
 801cf98:	ee07 0a90 	vmov	s15, r0
 801cf9c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 801cfa0:	ee07 3a90 	vmov	s15, r3
 801cfa4:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 801cfa8:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 801cfac:	ee07 2a90 	vmov	s15, r2
 801cfb0:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 801cfb4:	eeb8 6ae7 	vcvt.f32.s32	s12, s15
 801cfb8:	ee07 1a90 	vmov	s15, r1
 801cfbc:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 801cfc0:	ee37 7a66 	vsub.f32	s14, s14, s13
 801cfc4:	ee67 5a07 	vmul.f32	s11, s14, s14
 801cfc8:	eee5 6a87 	vfma.f32	s13, s11, s14
 801cfcc:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 801cfd0:	eee6 7a26 	vfma.f32	s15, s12, s13
 801cfd4:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 801cfd8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801cfdc:	bfcc      	ite	gt
 801cfde:	ee77 7a87 	vaddgt.f32	s15, s15, s14
 801cfe2:	ee77 7ac7 	vsuble.f32	s15, s15, s14
 801cfe6:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 801cfea:	ee17 3a90 	vmov	r3, s15
 801cfee:	b218      	sxth	r0, r3
 801cff0:	4770      	bx	lr

0801cff2 <_ZN8touchgfx15EasingEquations14linearEaseNoneEtsst>:
 801cff2:	4298      	cmp	r0, r3
 801cff4:	d200      	bcs.n	801cff8 <_ZN8touchgfx15EasingEquations14linearEaseNoneEtsst+0x6>
 801cff6:	b913      	cbnz	r3, 801cffe <_ZN8touchgfx15EasingEquations14linearEaseNoneEtsst+0xc>
 801cff8:	440a      	add	r2, r1
 801cffa:	b210      	sxth	r0, r2
 801cffc:	4770      	bx	lr
 801cffe:	ee07 2a90 	vmov	s15, r2
 801d002:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 801d006:	ee07 0a90 	vmov	s15, r0
 801d00a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 801d00e:	ee67 7a27 	vmul.f32	s15, s14, s15
 801d012:	ee07 3a10 	vmov	s14, r3
 801d016:	eef8 6ac7 	vcvt.f32.s32	s13, s14
 801d01a:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 801d01e:	ee07 1a90 	vmov	s15, r1
 801d022:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 801d026:	ee77 7a27 	vadd.f32	s15, s14, s15
 801d02a:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 801d02e:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 801d032:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801d036:	bfcc      	ite	gt
 801d038:	ee77 7a87 	vaddgt.f32	s15, s15, s14
 801d03c:	ee77 7ac7 	vsuble.f32	s15, s15, s14
 801d040:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 801d044:	ee17 3a90 	vmov	r3, s15
 801d048:	b218      	sxth	r0, r3
 801d04a:	4770      	bx	lr

0801d04c <_ZN8touchgfx12TextProviderC1Ev>:
 801d04c:	b538      	push	{r3, r4, r5, lr}
 801d04e:	2500      	movs	r5, #0
 801d050:	2302      	movs	r3, #2
 801d052:	4604      	mov	r4, r0
 801d054:	220e      	movs	r2, #14
 801d056:	7403      	strb	r3, [r0, #16]
 801d058:	4629      	mov	r1, r5
 801d05a:	6145      	str	r5, [r0, #20]
 801d05c:	7605      	strb	r5, [r0, #24]
 801d05e:	83c5      	strh	r5, [r0, #30]
 801d060:	8405      	strh	r5, [r0, #32]
 801d062:	86c5      	strh	r5, [r0, #54]	@ 0x36
 801d064:	8705      	strh	r5, [r0, #56]	@ 0x38
 801d066:	87c5      	strh	r5, [r0, #62]	@ 0x3e
 801d068:	f8a0 5040 	strh.w	r5, [r0, #64]	@ 0x40
 801d06c:	e9c0 5500 	strd	r5, r5, [r0]
 801d070:	e9c0 5511 	strd	r5, r5, [r0, #68]	@ 0x44
 801d074:	304c      	adds	r0, #76	@ 0x4c
 801d076:	f00d fe64 	bl	802ad42 <memset>
 801d07a:	2301      	movs	r3, #1
 801d07c:	4620      	mov	r0, r4
 801d07e:	f8a4 505a 	strh.w	r5, [r4, #90]	@ 0x5a
 801d082:	f8a4 505c 	strh.w	r5, [r4, #92]	@ 0x5c
 801d086:	f8a4 505e 	strh.w	r5, [r4, #94]	@ 0x5e
 801d08a:	f884 3060 	strb.w	r3, [r4, #96]	@ 0x60
 801d08e:	f884 5061 	strb.w	r5, [r4, #97]	@ 0x61
 801d092:	f7ec fef5 	bl	8009e80 <_ZN8touchgfx12TextProvider18initializeInternalEv>
 801d096:	4620      	mov	r0, r4
 801d098:	bd38      	pop	{r3, r4, r5, pc}

0801d09a <_ZN8touchgfx12TextProvider19getNextCharInternalEv>:
 801d09a:	b530      	push	{r4, r5, lr}
 801d09c:	2500      	movs	r5, #0
 801d09e:	2401      	movs	r4, #1
 801d0a0:	6843      	ldr	r3, [r0, #4]
 801d0a2:	b913      	cbnz	r3, 801d0aa <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x10>
 801d0a4:	6803      	ldr	r3, [r0, #0]
 801d0a6:	b313      	cbz	r3, 801d0ee <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x54>
 801d0a8:	6043      	str	r3, [r0, #4]
 801d0aa:	7e03      	ldrb	r3, [r0, #24]
 801d0ac:	b143      	cbz	r3, 801d0c0 <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x26>
 801d0ae:	6943      	ldr	r3, [r0, #20]
 801d0b0:	b12b      	cbz	r3, 801d0be <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x24>
 801d0b2:	881a      	ldrh	r2, [r3, #0]
 801d0b4:	b11a      	cbz	r2, 801d0be <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x24>
 801d0b6:	1c9a      	adds	r2, r3, #2
 801d0b8:	6142      	str	r2, [r0, #20]
 801d0ba:	8818      	ldrh	r0, [r3, #0]
 801d0bc:	bd30      	pop	{r4, r5, pc}
 801d0be:	7605      	strb	r5, [r0, #24]
 801d0c0:	6843      	ldr	r3, [r0, #4]
 801d0c2:	8819      	ldrh	r1, [r3, #0]
 801d0c4:	b199      	cbz	r1, 801d0ee <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x54>
 801d0c6:	1c9a      	adds	r2, r3, #2
 801d0c8:	2902      	cmp	r1, #2
 801d0ca:	6042      	str	r2, [r0, #4]
 801d0cc:	d1f5      	bne.n	801d0ba <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x20>
 801d0ce:	7c03      	ldrb	r3, [r0, #16]
 801d0d0:	2b01      	cmp	r3, #1
 801d0d2:	d8e5      	bhi.n	801d0a0 <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x6>
 801d0d4:	1c5a      	adds	r2, r3, #1
 801d0d6:	3302      	adds	r3, #2
 801d0d8:	7402      	strb	r2, [r0, #16]
 801d0da:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
 801d0de:	6143      	str	r3, [r0, #20]
 801d0e0:	2b00      	cmp	r3, #0
 801d0e2:	d0dd      	beq.n	801d0a0 <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x6>
 801d0e4:	881b      	ldrh	r3, [r3, #0]
 801d0e6:	2b00      	cmp	r3, #0
 801d0e8:	d0da      	beq.n	801d0a0 <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x6>
 801d0ea:	7604      	strb	r4, [r0, #24]
 801d0ec:	e7d8      	b.n	801d0a0 <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x6>
 801d0ee:	2000      	movs	r0, #0
 801d0f0:	e7e4      	b.n	801d0bc <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x22>

0801d0f2 <_ZN8touchgfx12TextProvider10initializeEPKtSt9__va_listS2_PKNS_24FontContextualFormsTableE>:
 801d0f2:	b430      	push	{r4, r5}
 801d0f4:	6815      	ldr	r5, [r2, #0]
 801d0f6:	6085      	str	r5, [r0, #8]
 801d0f8:	6852      	ldr	r2, [r2, #4]
 801d0fa:	6443      	str	r3, [r0, #68]	@ 0x44
 801d0fc:	60c2      	str	r2, [r0, #12]
 801d0fe:	2200      	movs	r2, #0
 801d100:	9b02      	ldr	r3, [sp, #8]
 801d102:	7402      	strb	r2, [r0, #16]
 801d104:	6001      	str	r1, [r0, #0]
 801d106:	6483      	str	r3, [r0, #72]	@ 0x48
 801d108:	6042      	str	r2, [r0, #4]
 801d10a:	6142      	str	r2, [r0, #20]
 801d10c:	7602      	strb	r2, [r0, #24]
 801d10e:	8702      	strh	r2, [r0, #56]	@ 0x38
 801d110:	8402      	strh	r2, [r0, #32]
 801d112:	f8a0 2040 	strh.w	r2, [r0, #64]	@ 0x40
 801d116:	bc30      	pop	{r4, r5}
 801d118:	f7ec beb2 	b.w	8009e80 <_ZN8touchgfx12TextProvider18initializeInternalEv>

0801d11c <_ZN8touchgfx12TextProvider16adjustHindiGlyphEPKNS_9GlyphNodeE>:
 801d11c:	b5f0      	push	{r4, r5, r6, r7, lr}
 801d11e:	4605      	mov	r5, r0
 801d120:	4608      	mov	r0, r1
 801d122:	b1f1      	cbz	r1, 801d162 <_ZN8touchgfx12TextProvider16adjustHindiGlyphEPKNS_9GlyphNodeE+0x46>
 801d124:	f105 044c 	add.w	r4, r5, #76	@ 0x4c
 801d128:	460b      	mov	r3, r1
 801d12a:	f101 0708 	add.w	r7, r1, #8
 801d12e:	4622      	mov	r2, r4
 801d130:	6818      	ldr	r0, [r3, #0]
 801d132:	3308      	adds	r3, #8
 801d134:	f853 1c04 	ldr.w	r1, [r3, #-4]
 801d138:	4626      	mov	r6, r4
 801d13a:	42bb      	cmp	r3, r7
 801d13c:	c603      	stmia	r6!, {r0, r1}
 801d13e:	4634      	mov	r4, r6
 801d140:	d1f6      	bne.n	801d130 <_ZN8touchgfx12TextProvider16adjustHindiGlyphEPKNS_9GlyphNodeE+0x14>
 801d142:	6818      	ldr	r0, [r3, #0]
 801d144:	6030      	str	r0, [r6, #0]
 801d146:	4610      	mov	r0, r2
 801d148:	889b      	ldrh	r3, [r3, #4]
 801d14a:	80b3      	strh	r3, [r6, #4]
 801d14c:	f895 3059 	ldrb.w	r3, [r5, #89]	@ 0x59
 801d150:	015b      	lsls	r3, r3, #5
 801d152:	f403 7180 	and.w	r1, r3, #256	@ 0x100
 801d156:	f895 3052 	ldrb.w	r3, [r5, #82]	@ 0x52
 801d15a:	430b      	orrs	r3, r1
 801d15c:	425b      	negs	r3, r3
 801d15e:	f885 3055 	strb.w	r3, [r5, #85]	@ 0x55
 801d162:	bdf0      	pop	{r4, r5, r6, r7, pc}

0801d164 <_ZNK8touchgfx12TextProvider15thaiLookupGlyphEPKNS_9GlyphNodeEPKNS_4FontEt>:
 801d164:	b538      	push	{r3, r4, r5, lr}
 801d166:	460c      	mov	r4, r1
 801d168:	6811      	ldr	r1, [r2, #0]
 801d16a:	4610      	mov	r0, r2
 801d16c:	68cd      	ldr	r5, [r1, #12]
 801d16e:	4619      	mov	r1, r3
 801d170:	47a8      	blx	r5
 801d172:	2800      	cmp	r0, #0
 801d174:	bf08      	it	eq
 801d176:	4620      	moveq	r0, r4
 801d178:	bd38      	pop	{r3, r4, r5, pc}
	...

0801d17c <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE>:
 801d17c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801d17e:	4604      	mov	r4, r0
 801d180:	4615      	mov	r5, r2
 801d182:	4608      	mov	r0, r1
 801d184:	b93a      	cbnz	r2, 801d196 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x1a>
 801d186:	f8a4 205a 	strh.w	r2, [r4, #90]	@ 0x5a
 801d18a:	f8a4 205c 	strh.w	r2, [r4, #92]	@ 0x5c
 801d18e:	f8a4 205e 	strh.w	r2, [r4, #94]	@ 0x5e
 801d192:	4628      	mov	r0, r5
 801d194:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801d196:	f892 c00d 	ldrb.w	ip, [r2, #13]
 801d19a:	8893      	ldrh	r3, [r2, #4]
 801d19c:	ea4f 160c 	mov.w	r6, ip, lsl #4
 801d1a0:	f406 7280 	and.w	r2, r6, #256	@ 0x100
 801d1a4:	79ee      	ldrb	r6, [r5, #7]
 801d1a6:	4316      	orrs	r6, r2
 801d1a8:	f46f 6263 	mvn.w	r2, #3632	@ 0xe30
 801d1ac:	189a      	adds	r2, r3, r2
 801d1ae:	b2b7      	uxth	r7, r6
 801d1b0:	b291      	uxth	r1, r2
 801d1b2:	291d      	cmp	r1, #29
 801d1b4:	f200 8084 	bhi.w	801d2c0 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x144>
 801d1b8:	2201      	movs	r2, #1
 801d1ba:	10f6      	asrs	r6, r6, #3
 801d1bc:	408a      	lsls	r2, r1
 801d1be:	4978      	ldr	r1, [pc, #480]	@ (801d3a0 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x224>)
 801d1c0:	420a      	tst	r2, r1
 801d1c2:	d12e      	bne.n	801d222 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0xa6>
 801d1c4:	f412 7f60 	tst.w	r2, #896	@ 0x380
 801d1c8:	d07a      	beq.n	801d2c0 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x144>
 801d1ca:	f104 024c 	add.w	r2, r4, #76	@ 0x4c
 801d1ce:	462b      	mov	r3, r5
 801d1d0:	f105 0e08 	add.w	lr, r5, #8
 801d1d4:	4615      	mov	r5, r2
 801d1d6:	6818      	ldr	r0, [r3, #0]
 801d1d8:	3308      	adds	r3, #8
 801d1da:	f853 1c04 	ldr.w	r1, [r3, #-4]
 801d1de:	4694      	mov	ip, r2
 801d1e0:	4573      	cmp	r3, lr
 801d1e2:	e8ac 0003 	stmia.w	ip!, {r0, r1}
 801d1e6:	4662      	mov	r2, ip
 801d1e8:	d1f5      	bne.n	801d1d6 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x5a>
 801d1ea:	6818      	ldr	r0, [r3, #0]
 801d1ec:	f8cc 0000 	str.w	r0, [ip]
 801d1f0:	889b      	ldrh	r3, [r3, #4]
 801d1f2:	f8ac 3004 	strh.w	r3, [ip, #4]
 801d1f6:	b2b3      	uxth	r3, r6
 801d1f8:	f8b4 105c 	ldrh.w	r1, [r4, #92]	@ 0x5c
 801d1fc:	f894 0059 	ldrb.w	r0, [r4, #89]	@ 0x59
 801d200:	1aca      	subs	r2, r1, r3
 801d202:	1bcf      	subs	r7, r1, r7
 801d204:	f020 0060 	bic.w	r0, r0, #96	@ 0x60
 801d208:	b292      	uxth	r2, r2
 801d20a:	1afb      	subs	r3, r7, r3
 801d20c:	f884 2054 	strb.w	r2, [r4, #84]	@ 0x54
 801d210:	10d2      	asrs	r2, r2, #3
 801d212:	f002 0260 	and.w	r2, r2, #96	@ 0x60
 801d216:	4302      	orrs	r2, r0
 801d218:	f884 2059 	strb.w	r2, [r4, #89]	@ 0x59
 801d21c:	f8a4 305c 	strh.w	r3, [r4, #92]	@ 0x5c
 801d220:	e7b7      	b.n	801d192 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x16>
 801d222:	8f23      	ldrh	r3, [r4, #56]	@ 0x38
 801d224:	b92b      	cbnz	r3, 801d232 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0xb6>
 801d226:	4b5f      	ldr	r3, [pc, #380]	@ (801d3a4 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x228>)
 801d228:	21c0      	movs	r1, #192	@ 0xc0
 801d22a:	4a5f      	ldr	r2, [pc, #380]	@ (801d3a8 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x22c>)
 801d22c:	485f      	ldr	r0, [pc, #380]	@ (801d3ac <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x230>)
 801d22e:	f00d fb81 	bl	802a934 <__assert_func>
 801d232:	8ee3      	ldrh	r3, [r4, #54]	@ 0x36
 801d234:	eb04 0343 	add.w	r3, r4, r3, lsl #1
 801d238:	8c59      	ldrh	r1, [r3, #34]	@ 0x22
 801d23a:	f640 6333 	movw	r3, #3635	@ 0xe33
 801d23e:	4299      	cmp	r1, r3
 801d240:	d110      	bne.n	801d264 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0xe8>
 801d242:	6803      	ldr	r3, [r0, #0]
 801d244:	68db      	ldr	r3, [r3, #12]
 801d246:	4798      	blx	r3
 801d248:	7b41      	ldrb	r1, [r0, #13]
 801d24a:	00cb      	lsls	r3, r1, #3
 801d24c:	f403 7280 	and.w	r2, r3, #256	@ 0x100
 801d250:	7a03      	ldrb	r3, [r0, #8]
 801d252:	0648      	lsls	r0, r1, #25
 801d254:	ea43 0302 	orr.w	r3, r3, r2
 801d258:	bf44      	itt	mi
 801d25a:	f5a3 7300 	submi.w	r3, r3, #512	@ 0x200
 801d25e:	b21b      	sxthmi	r3, r3
 801d260:	f8a4 305a 	strh.w	r3, [r4, #90]	@ 0x5a
 801d264:	f8b4 305a 	ldrh.w	r3, [r4, #90]	@ 0x5a
 801d268:	462a      	mov	r2, r5
 801d26a:	f105 0c08 	add.w	ip, r5, #8
 801d26e:	443b      	add	r3, r7
 801d270:	4433      	add	r3, r6
 801d272:	f104 064c 	add.w	r6, r4, #76	@ 0x4c
 801d276:	b29b      	uxth	r3, r3
 801d278:	4635      	mov	r5, r6
 801d27a:	f8a4 305a 	strh.w	r3, [r4, #90]	@ 0x5a
 801d27e:	6810      	ldr	r0, [r2, #0]
 801d280:	3208      	adds	r2, #8
 801d282:	f852 1c04 	ldr.w	r1, [r2, #-4]
 801d286:	4637      	mov	r7, r6
 801d288:	4562      	cmp	r2, ip
 801d28a:	c703      	stmia	r7!, {r0, r1}
 801d28c:	463e      	mov	r6, r7
 801d28e:	d1f6      	bne.n	801d27e <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x102>
 801d290:	6810      	ldr	r0, [r2, #0]
 801d292:	6038      	str	r0, [r7, #0]
 801d294:	8892      	ldrh	r2, [r2, #4]
 801d296:	80ba      	strh	r2, [r7, #4]
 801d298:	f884 3054 	strb.w	r3, [r4, #84]	@ 0x54
 801d29c:	10db      	asrs	r3, r3, #3
 801d29e:	f894 2059 	ldrb.w	r2, [r4, #89]	@ 0x59
 801d2a2:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 801d2a6:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 801d2aa:	4313      	orrs	r3, r2
 801d2ac:	f894 205e 	ldrb.w	r2, [r4, #94]	@ 0x5e
 801d2b0:	f884 3059 	strb.w	r3, [r4, #89]	@ 0x59
 801d2b4:	f894 3055 	ldrb.w	r3, [r4, #85]	@ 0x55
 801d2b8:	1a9b      	subs	r3, r3, r2
 801d2ba:	f884 3055 	strb.w	r3, [r4, #85]	@ 0x55
 801d2be:	e768      	b.n	801d192 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x16>
 801d2c0:	f023 0204 	bic.w	r2, r3, #4
 801d2c4:	f640 611b 	movw	r1, #3611	@ 0xe1b
 801d2c8:	428a      	cmp	r2, r1
 801d2ca:	d003      	beq.n	801d2d4 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x158>
 801d2cc:	f640 621d 	movw	r2, #3613	@ 0xe1d
 801d2d0:	4293      	cmp	r3, r2
 801d2d2:	d120      	bne.n	801d316 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x19a>
 801d2d4:	3b01      	subs	r3, #1
 801d2d6:	4602      	mov	r2, r0
 801d2d8:	4629      	mov	r1, r5
 801d2da:	4620      	mov	r0, r4
 801d2dc:	b29b      	uxth	r3, r3
 801d2de:	f7ff ff41 	bl	801d164 <_ZNK8touchgfx12TextProvider15thaiLookupGlyphEPKNS_9GlyphNodeEPKNS_4FontEt>
 801d2e2:	7b41      	ldrb	r1, [r0, #13]
 801d2e4:	00cb      	lsls	r3, r1, #3
 801d2e6:	0649      	lsls	r1, r1, #25
 801d2e8:	f403 7280 	and.w	r2, r3, #256	@ 0x100
 801d2ec:	7a03      	ldrb	r3, [r0, #8]
 801d2ee:	ea43 0302 	orr.w	r3, r3, r2
 801d2f2:	bf44      	itt	mi
 801d2f4:	f5a3 7300 	submi.w	r3, r3, #512	@ 0x200
 801d2f8:	b21b      	sxthmi	r3, r3
 801d2fa:	f8a4 305a 	strh.w	r3, [r4, #90]	@ 0x5a
 801d2fe:	7b6b      	ldrb	r3, [r5, #13]
 801d300:	7aaa      	ldrb	r2, [r5, #10]
 801d302:	005b      	lsls	r3, r3, #1
 801d304:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 801d308:	4313      	orrs	r3, r2
 801d30a:	115a      	asrs	r2, r3, #5
 801d30c:	eb02 0393 	add.w	r3, r2, r3, lsr #2
 801d310:	f8a4 305e 	strh.w	r3, [r4, #94]	@ 0x5e
 801d314:	e035      	b.n	801d382 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x206>
 801d316:	ea4f 02cc 	mov.w	r2, ip, lsl #3
 801d31a:	f01c 0f40 	tst.w	ip, #64	@ 0x40
 801d31e:	f402 7180 	and.w	r1, r2, #256	@ 0x100
 801d322:	7a2a      	ldrb	r2, [r5, #8]
 801d324:	ea42 0201 	orr.w	r2, r2, r1
 801d328:	f640 6109 	movw	r1, #3593	@ 0xe09
 801d32c:	bf1c      	itt	ne
 801d32e:	f5a2 7200 	subne.w	r2, r2, #512	@ 0x200
 801d332:	b212      	sxthne	r2, r2
 801d334:	f8a4 205a 	strh.w	r2, [r4, #90]	@ 0x5a
 801d338:	f023 0210 	bic.w	r2, r3, #16
 801d33c:	428a      	cmp	r2, r1
 801d33e:	d003      	beq.n	801d348 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x1cc>
 801d340:	f640 6213 	movw	r2, #3603	@ 0xe13
 801d344:	4293      	cmp	r3, r2
 801d346:	d129      	bne.n	801d39c <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x220>
 801d348:	7b6e      	ldrb	r6, [r5, #13]
 801d34a:	4629      	mov	r1, r5
 801d34c:	0076      	lsls	r6, r6, #1
 801d34e:	f406 7280 	and.w	r2, r6, #256	@ 0x100
 801d352:	7aae      	ldrb	r6, [r5, #10]
 801d354:	4316      	orrs	r6, r2
 801d356:	f640 6213 	movw	r2, #3603	@ 0xe13
 801d35a:	4293      	cmp	r3, r2
 801d35c:	4602      	mov	r2, r0
 801d35e:	4620      	mov	r0, r4
 801d360:	bf16      	itet	ne
 801d362:	f103 33ff 	addne.w	r3, r3, #4294967295
 801d366:	f640 630c 	movweq	r3, #3596	@ 0xe0c
 801d36a:	b29b      	uxthne	r3, r3
 801d36c:	f7ff fefa 	bl	801d164 <_ZNK8touchgfx12TextProvider15thaiLookupGlyphEPKNS_9GlyphNodeEPKNS_4FontEt>
 801d370:	7b43      	ldrb	r3, [r0, #13]
 801d372:	7a82      	ldrb	r2, [r0, #10]
 801d374:	005b      	lsls	r3, r3, #1
 801d376:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 801d37a:	4313      	orrs	r3, r2
 801d37c:	1af6      	subs	r6, r6, r3
 801d37e:	f8a4 605e 	strh.w	r6, [r4, #94]	@ 0x5e
 801d382:	7b69      	ldrb	r1, [r5, #13]
 801d384:	00cb      	lsls	r3, r1, #3
 801d386:	f403 7280 	and.w	r2, r3, #256	@ 0x100
 801d38a:	7a2b      	ldrb	r3, [r5, #8]
 801d38c:	4313      	orrs	r3, r2
 801d38e:	064a      	lsls	r2, r1, #25
 801d390:	bf44      	itt	mi
 801d392:	f5a3 7300 	submi.w	r3, r3, #512	@ 0x200
 801d396:	b21b      	sxthmi	r3, r3
 801d398:	1bdb      	subs	r3, r3, r7
 801d39a:	e73f      	b.n	801d21c <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0xa0>
 801d39c:	2300      	movs	r3, #0
 801d39e:	e7b7      	b.n	801d310 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x194>
 801d3a0:	3fc00079 	.word	0x3fc00079
 801d3a4:	0802efb8 	.word	0x0802efb8
 801d3a8:	0802f22a 	.word	0x0802f22a
 801d3ac:	0802efc1 	.word	0x0802efc1

0801d3b0 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt>:
 801d3b0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 801d3b4:	4604      	mov	r4, r0
 801d3b6:	b942      	cbnz	r2, 801d3ca <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x1a>
 801d3b8:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 801d3bc:	f8a0 305a 	strh.w	r3, [r0, #90]	@ 0x5a
 801d3c0:	f8a0 305c 	strh.w	r3, [r0, #92]	@ 0x5c
 801d3c4:	f8a4 305e 	strh.w	r3, [r4, #94]	@ 0x5e
 801d3c8:	e046      	b.n	801d458 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xa8>
 801d3ca:	7b51      	ldrb	r1, [r2, #13]
 801d3cc:	8893      	ldrh	r3, [r2, #4]
 801d3ce:	010f      	lsls	r7, r1, #4
 801d3d0:	f407 7080 	and.w	r0, r7, #256	@ 0x100
 801d3d4:	79d7      	ldrb	r7, [r2, #7]
 801d3d6:	4307      	orrs	r7, r0
 801d3d8:	2f04      	cmp	r7, #4
 801d3da:	b2bd      	uxth	r5, r7
 801d3dc:	bfcc      	ite	gt
 801d3de:	08bf      	lsrgt	r7, r7, #2
 801d3e0:	2701      	movle	r7, #1
 801d3e2:	f5b3 6fdd 	cmp.w	r3, #1768	@ 0x6e8
 801d3e6:	f200 80ab 	bhi.w	801d540 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x190>
 801d3ea:	f240 60e7 	movw	r0, #1767	@ 0x6e7
 801d3ee:	4283      	cmp	r3, r0
 801d3f0:	d216      	bcs.n	801d420 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x70>
 801d3f2:	f240 605b 	movw	r0, #1627	@ 0x65b
 801d3f6:	4283      	cmp	r3, r0
 801d3f8:	d859      	bhi.n	801d4ae <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xfe>
 801d3fa:	f240 6057 	movw	r0, #1623	@ 0x657
 801d3fe:	4283      	cmp	r3, r0
 801d400:	d20e      	bcs.n	801d420 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x70>
 801d402:	f5b3 6fca 	cmp.w	r3, #1616	@ 0x650
 801d406:	d24a      	bcs.n	801d49e <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xee>
 801d408:	f240 604e 	movw	r0, #1614	@ 0x64e
 801d40c:	4283      	cmp	r3, r0
 801d40e:	d207      	bcs.n	801d420 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x70>
 801d410:	f240 601a 	movw	r0, #1562	@ 0x61a
 801d414:	4283      	cmp	r3, r0
 801d416:	d02a      	beq.n	801d46e <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xbe>
 801d418:	d821      	bhi.n	801d45e <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xae>
 801d41a:	f5b3 6fc2 	cmp.w	r3, #1552	@ 0x610
 801d41e:	d35b      	bcc.n	801d4d8 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x128>
 801d420:	f9b4 305a 	ldrsh.w	r3, [r4, #90]	@ 0x5a
 801d424:	f513 4f00 	cmn.w	r3, #32768	@ 0x8000
 801d428:	f040 80d0 	bne.w	801d5cc <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x21c>
 801d42c:	f9b4 005c 	ldrsh.w	r0, [r4, #92]	@ 0x5c
 801d430:	f510 4f00 	cmn.w	r0, #32768	@ 0x8000
 801d434:	f040 80ca 	bne.w	801d5cc <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x21c>
 801d438:	00cb      	lsls	r3, r1, #3
 801d43a:	0649      	lsls	r1, r1, #25
 801d43c:	f403 7080 	and.w	r0, r3, #256	@ 0x100
 801d440:	7a13      	ldrb	r3, [r2, #8]
 801d442:	ea43 0300 	orr.w	r3, r3, r0
 801d446:	bf44      	itt	mi
 801d448:	f5a3 7300 	submi.w	r3, r3, #512	@ 0x200
 801d44c:	b21b      	sxthmi	r3, r3
 801d44e:	f8a4 305a 	strh.w	r3, [r4, #90]	@ 0x5a
 801d452:	1b5d      	subs	r5, r3, r5
 801d454:	f8a4 505c 	strh.w	r5, [r4, #92]	@ 0x5c
 801d458:	4610      	mov	r0, r2
 801d45a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801d45e:	f240 604b 	movw	r0, #1611	@ 0x64b
 801d462:	4283      	cmp	r3, r0
 801d464:	d338      	bcc.n	801d4d8 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x128>
 801d466:	f240 604c 	movw	r0, #1612	@ 0x64c
 801d46a:	4283      	cmp	r3, r0
 801d46c:	d9d8      	bls.n	801d420 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x70>
 801d46e:	f9b4 005a 	ldrsh.w	r0, [r4, #90]	@ 0x5a
 801d472:	f9b4 305c 	ldrsh.w	r3, [r4, #92]	@ 0x5c
 801d476:	f510 4f00 	cmn.w	r0, #32768	@ 0x8000
 801d47a:	f040 80f2 	bne.w	801d662 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x2b2>
 801d47e:	f513 4f00 	cmn.w	r3, #32768	@ 0x8000
 801d482:	f040 80ee 	bne.w	801d662 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x2b2>
 801d486:	00cb      	lsls	r3, r1, #3
 801d488:	064e      	lsls	r6, r1, #25
 801d48a:	f403 7080 	and.w	r0, r3, #256	@ 0x100
 801d48e:	7a13      	ldrb	r3, [r2, #8]
 801d490:	ea43 0300 	orr.w	r3, r3, r0
 801d494:	bf44      	itt	mi
 801d496:	f5a3 7300 	submi.w	r3, r3, #512	@ 0x200
 801d49a:	b21b      	sxthmi	r3, r3
 801d49c:	e7d9      	b.n	801d452 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xa2>
 801d49e:	f240 6054 	movw	r0, #1620	@ 0x654
 801d4a2:	4283      	cmp	r3, r0
 801d4a4:	d8e3      	bhi.n	801d46e <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xbe>
 801d4a6:	f5b3 6fca 	cmp.w	r3, #1616	@ 0x650
 801d4aa:	d9e0      	bls.n	801d46e <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xbe>
 801d4ac:	e7b8      	b.n	801d420 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x70>
 801d4ae:	f240 6074 	movw	r0, #1652	@ 0x674
 801d4b2:	4283      	cmp	r3, r0
 801d4b4:	d0b4      	beq.n	801d420 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x70>
 801d4b6:	d82d      	bhi.n	801d514 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x164>
 801d4b8:	f240 605e 	movw	r0, #1630	@ 0x65e
 801d4bc:	4283      	cmp	r3, r0
 801d4be:	d804      	bhi.n	801d4ca <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x11a>
 801d4c0:	f240 605d 	movw	r0, #1629	@ 0x65d
 801d4c4:	4283      	cmp	r3, r0
 801d4c6:	d3d2      	bcc.n	801d46e <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xbe>
 801d4c8:	e7aa      	b.n	801d420 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x70>
 801d4ca:	f240 605f 	movw	r0, #1631	@ 0x65f
 801d4ce:	4283      	cmp	r3, r0
 801d4d0:	d0cd      	beq.n	801d46e <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xbe>
 801d4d2:	f5b3 6fce 	cmp.w	r3, #1648	@ 0x670
 801d4d6:	d0a3      	beq.n	801d420 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x70>
 801d4d8:	00cb      	lsls	r3, r1, #3
 801d4da:	0649      	lsls	r1, r1, #25
 801d4dc:	f403 7080 	and.w	r0, r3, #256	@ 0x100
 801d4e0:	7a13      	ldrb	r3, [r2, #8]
 801d4e2:	ea43 0300 	orr.w	r3, r3, r0
 801d4e6:	bf44      	itt	mi
 801d4e8:	f5a3 7300 	submi.w	r3, r3, #512	@ 0x200
 801d4ec:	b21b      	sxthmi	r3, r3
 801d4ee:	1b5d      	subs	r5, r3, r5
 801d4f0:	f8a4 305a 	strh.w	r3, [r4, #90]	@ 0x5a
 801d4f4:	f8a4 505c 	strh.w	r5, [r4, #92]	@ 0x5c
 801d4f8:	7b53      	ldrb	r3, [r2, #13]
 801d4fa:	015b      	lsls	r3, r3, #5
 801d4fc:	f403 7180 	and.w	r1, r3, #256	@ 0x100
 801d500:	7993      	ldrb	r3, [r2, #6]
 801d502:	430b      	orrs	r3, r1
 801d504:	2105      	movs	r1, #5
 801d506:	005b      	lsls	r3, r3, #1
 801d508:	fb93 f3f1 	sdiv	r3, r3, r1
 801d50c:	f992 1009 	ldrsb.w	r1, [r2, #9]
 801d510:	440b      	add	r3, r1
 801d512:	e757      	b.n	801d3c4 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x14>
 801d514:	f240 60e2 	movw	r0, #1762	@ 0x6e2
 801d518:	4283      	cmp	r3, r0
 801d51a:	d809      	bhi.n	801d530 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x180>
 801d51c:	f240 60df 	movw	r0, #1759	@ 0x6df
 801d520:	4283      	cmp	r3, r0
 801d522:	f4bf af7d 	bcs.w	801d420 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x70>
 801d526:	f2a3 63d6 	subw	r3, r3, #1750	@ 0x6d6
 801d52a:	2b05      	cmp	r3, #5
 801d52c:	d8d4      	bhi.n	801d4d8 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x128>
 801d52e:	e777      	b.n	801d420 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x70>
 801d530:	f240 60e3 	movw	r0, #1763	@ 0x6e3
 801d534:	4283      	cmp	r3, r0
 801d536:	d09a      	beq.n	801d46e <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xbe>
 801d538:	f240 60e4 	movw	r0, #1764	@ 0x6e4
 801d53c:	4283      	cmp	r3, r0
 801d53e:	e7ca      	b.n	801d4d6 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x126>
 801d540:	f5b3 6f0f 	cmp.w	r3, #2288	@ 0x8f0
 801d544:	d22b      	bcs.n	801d59e <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x1ee>
 801d546:	f640 00ed 	movw	r0, #2285	@ 0x8ed
 801d54a:	4283      	cmp	r3, r0
 801d54c:	d28f      	bcs.n	801d46e <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xbe>
 801d54e:	f640 00e5 	movw	r0, #2277	@ 0x8e5
 801d552:	4283      	cmp	r3, r0
 801d554:	d816      	bhi.n	801d584 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x1d4>
 801d556:	f640 00e4 	movw	r0, #2276	@ 0x8e4
 801d55a:	4283      	cmp	r3, r0
 801d55c:	f4bf af60 	bcs.w	801d420 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x70>
 801d560:	f240 60ec 	movw	r0, #1772	@ 0x6ec
 801d564:	4283      	cmp	r3, r0
 801d566:	d80a      	bhi.n	801d57e <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x1ce>
 801d568:	f240 60eb 	movw	r0, #1771	@ 0x6eb
 801d56c:	4283      	cmp	r3, r0
 801d56e:	f4bf af57 	bcs.w	801d420 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x70>
 801d572:	f240 60ea 	movw	r0, #1770	@ 0x6ea
 801d576:	4283      	cmp	r3, r0
 801d578:	f43f af79 	beq.w	801d46e <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xbe>
 801d57c:	e7ac      	b.n	801d4d8 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x128>
 801d57e:	f240 60ed 	movw	r0, #1773	@ 0x6ed
 801d582:	e7f8      	b.n	801d576 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x1c6>
 801d584:	f640 00e8 	movw	r0, #2280	@ 0x8e8
 801d588:	4283      	cmp	r3, r0
 801d58a:	d802      	bhi.n	801d592 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x1e2>
 801d58c:	f640 00e7 	movw	r0, #2279	@ 0x8e7
 801d590:	e798      	b.n	801d4c4 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x114>
 801d592:	f640 00e9 	movw	r0, #2281	@ 0x8e9
 801d596:	4283      	cmp	r3, r0
 801d598:	f47f af42 	bne.w	801d420 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x70>
 801d59c:	e767      	b.n	801d46e <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xbe>
 801d59e:	f640 00f6 	movw	r0, #2294	@ 0x8f6
 801d5a2:	4283      	cmp	r3, r0
 801d5a4:	f43f af63 	beq.w	801d46e <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xbe>
 801d5a8:	d802      	bhi.n	801d5b0 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x200>
 801d5aa:	f640 00f2 	movw	r0, #2290	@ 0x8f2
 801d5ae:	e7f2      	b.n	801d596 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x1e6>
 801d5b0:	f640 00fa 	movw	r0, #2298	@ 0x8fa
 801d5b4:	4283      	cmp	r3, r0
 801d5b6:	d805      	bhi.n	801d5c4 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x214>
 801d5b8:	f640 00f9 	movw	r0, #2297	@ 0x8f9
 801d5bc:	4283      	cmp	r3, r0
 801d5be:	f4ff af2f 	bcc.w	801d420 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x70>
 801d5c2:	e754      	b.n	801d46e <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xbe>
 801d5c4:	f640 00fe 	movw	r0, #2302	@ 0x8fe
 801d5c8:	4283      	cmp	r3, r0
 801d5ca:	e7af      	b.n	801d52c <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x17c>
 801d5cc:	f104 0c4c 	add.w	ip, r4, #76	@ 0x4c
 801d5d0:	4617      	mov	r7, r2
 801d5d2:	f102 0808 	add.w	r8, r2, #8
 801d5d6:	4666      	mov	r6, ip
 801d5d8:	6838      	ldr	r0, [r7, #0]
 801d5da:	3708      	adds	r7, #8
 801d5dc:	f857 1c04 	ldr.w	r1, [r7, #-4]
 801d5e0:	46e6      	mov	lr, ip
 801d5e2:	4547      	cmp	r7, r8
 801d5e4:	e8ae 0003 	stmia.w	lr!, {r0, r1}
 801d5e8:	46f4      	mov	ip, lr
 801d5ea:	d1f5      	bne.n	801d5d8 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x228>
 801d5ec:	6838      	ldr	r0, [r7, #0]
 801d5ee:	f8ce 0000 	str.w	r0, [lr]
 801d5f2:	88b9      	ldrh	r1, [r7, #4]
 801d5f4:	f8ae 1004 	strh.w	r1, [lr, #4]
 801d5f8:	f9b4 005e 	ldrsh.w	r0, [r4, #94]	@ 0x5e
 801d5fc:	f510 4f00 	cmn.w	r0, #32768	@ 0x8000
 801d600:	d009      	beq.n	801d616 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x266>
 801d602:	7b51      	ldrb	r1, [r2, #13]
 801d604:	7992      	ldrb	r2, [r2, #6]
 801d606:	0149      	lsls	r1, r1, #5
 801d608:	f401 7180 	and.w	r1, r1, #256	@ 0x100
 801d60c:	4311      	orrs	r1, r2
 801d60e:	eba0 0051 	sub.w	r0, r0, r1, lsr #1
 801d612:	f884 0055 	strb.w	r0, [r4, #85]	@ 0x55
 801d616:	f513 4f00 	cmn.w	r3, #32768	@ 0x8000
 801d61a:	d00d      	beq.n	801d638 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x288>
 801d61c:	442b      	add	r3, r5
 801d61e:	f894 2059 	ldrb.w	r2, [r4, #89]	@ 0x59
 801d622:	b29b      	uxth	r3, r3
 801d624:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 801d628:	f884 3054 	strb.w	r3, [r4, #84]	@ 0x54
 801d62c:	10db      	asrs	r3, r3, #3
 801d62e:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 801d632:	4313      	orrs	r3, r2
 801d634:	f884 3059 	strb.w	r3, [r4, #89]	@ 0x59
 801d638:	f894 1059 	ldrb.w	r1, [r4, #89]	@ 0x59
 801d63c:	00cb      	lsls	r3, r1, #3
 801d63e:	064f      	lsls	r7, r1, #25
 801d640:	f403 7280 	and.w	r2, r3, #256	@ 0x100
 801d644:	f894 3054 	ldrb.w	r3, [r4, #84]	@ 0x54
 801d648:	ea43 0302 	orr.w	r3, r3, r2
 801d64c:	bf44      	itt	mi
 801d64e:	f5a3 7300 	submi.w	r3, r3, #512	@ 0x200
 801d652:	b21b      	sxthmi	r3, r3
 801d654:	f8a4 305a 	strh.w	r3, [r4, #90]	@ 0x5a
 801d658:	1b5d      	subs	r5, r3, r5
 801d65a:	4632      	mov	r2, r6
 801d65c:	f8a4 505c 	strh.w	r5, [r4, #92]	@ 0x5c
 801d660:	e6fa      	b.n	801d458 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xa8>
 801d662:	f104 0e4c 	add.w	lr, r4, #76	@ 0x4c
 801d666:	4694      	mov	ip, r2
 801d668:	f102 0908 	add.w	r9, r2, #8
 801d66c:	4676      	mov	r6, lr
 801d66e:	f8dc 0000 	ldr.w	r0, [ip]
 801d672:	f10c 0c08 	add.w	ip, ip, #8
 801d676:	f85c 1c04 	ldr.w	r1, [ip, #-4]
 801d67a:	46f0      	mov	r8, lr
 801d67c:	45cc      	cmp	ip, r9
 801d67e:	e8a8 0003 	stmia.w	r8!, {r0, r1}
 801d682:	46c6      	mov	lr, r8
 801d684:	d1f3      	bne.n	801d66e <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x2be>
 801d686:	f8dc 0000 	ldr.w	r0, [ip]
 801d68a:	f8c8 0000 	str.w	r0, [r8]
 801d68e:	f8bc 1004 	ldrh.w	r1, [ip, #4]
 801d692:	f8a8 1004 	strh.w	r1, [r8, #4]
 801d696:	f9b4 005e 	ldrsh.w	r0, [r4, #94]	@ 0x5e
 801d69a:	f510 4f00 	cmn.w	r0, #32768	@ 0x8000
 801d69e:	d009      	beq.n	801d6b4 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x304>
 801d6a0:	7b51      	ldrb	r1, [r2, #13]
 801d6a2:	7992      	ldrb	r2, [r2, #6]
 801d6a4:	0149      	lsls	r1, r1, #5
 801d6a6:	f401 7180 	and.w	r1, r1, #256	@ 0x100
 801d6aa:	4311      	orrs	r1, r2
 801d6ac:	eba0 0051 	sub.w	r0, r0, r1, lsr #1
 801d6b0:	f884 0055 	strb.w	r0, [r4, #85]	@ 0x55
 801d6b4:	f513 4f00 	cmn.w	r3, #32768	@ 0x8000
 801d6b8:	d00d      	beq.n	801d6d6 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x326>
 801d6ba:	1bdb      	subs	r3, r3, r7
 801d6bc:	f894 2059 	ldrb.w	r2, [r4, #89]	@ 0x59
 801d6c0:	b29b      	uxth	r3, r3
 801d6c2:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 801d6c6:	f884 3054 	strb.w	r3, [r4, #84]	@ 0x54
 801d6ca:	10db      	asrs	r3, r3, #3
 801d6cc:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 801d6d0:	4313      	orrs	r3, r2
 801d6d2:	f884 3059 	strb.w	r3, [r4, #89]	@ 0x59
 801d6d6:	f894 1059 	ldrb.w	r1, [r4, #89]	@ 0x59
 801d6da:	00cb      	lsls	r3, r1, #3
 801d6dc:	0648      	lsls	r0, r1, #25
 801d6de:	f403 7280 	and.w	r2, r3, #256	@ 0x100
 801d6e2:	f894 3054 	ldrb.w	r3, [r4, #84]	@ 0x54
 801d6e6:	ea43 0302 	orr.w	r3, r3, r2
 801d6ea:	bf44      	itt	mi
 801d6ec:	f5a3 7300 	submi.w	r3, r3, #512	@ 0x200
 801d6f0:	b21b      	sxthmi	r3, r3
 801d6f2:	e7b1      	b.n	801d658 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x2a8>

0801d6f4 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE>:
 801d6f4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801d6f8:	461e      	mov	r6, r3
 801d6fa:	8f03      	ldrh	r3, [r0, #56]	@ 0x38
 801d6fc:	4604      	mov	r4, r0
 801d6fe:	4617      	mov	r7, r2
 801d700:	b92b      	cbnz	r3, 801d70e <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE+0x1a>
 801d702:	4b25      	ldr	r3, [pc, #148]	@ (801d798 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE+0xa4>)
 801d704:	21c0      	movs	r1, #192	@ 0xc0
 801d706:	4a25      	ldr	r2, [pc, #148]	@ (801d79c <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE+0xa8>)
 801d708:	4825      	ldr	r0, [pc, #148]	@ (801d7a0 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE+0xac>)
 801d70a:	f00d f913 	bl	802a934 <__assert_func>
 801d70e:	8ec3      	ldrh	r3, [r0, #54]	@ 0x36
 801d710:	eb00 0343 	add.w	r3, r0, r3, lsl #1
 801d714:	f8b3 8022 	ldrh.w	r8, [r3, #34]	@ 0x22
 801d718:	f7ec fb0c 	bl	8009d34 <_ZN8touchgfx12TextProvider15getNextLigatureEh>
 801d71c:	4605      	mov	r5, r0
 801d71e:	b918      	cbnz	r0, 801d728 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE+0x34>
 801d720:	6030      	str	r0, [r6, #0]
 801d722:	4628      	mov	r0, r5
 801d724:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801d728:	683b      	ldr	r3, [r7, #0]
 801d72a:	4601      	mov	r1, r0
 801d72c:	4638      	mov	r0, r7
 801d72e:	68db      	ldr	r3, [r3, #12]
 801d730:	4798      	blx	r3
 801d732:	f5a8 63c0 	sub.w	r3, r8, #1536	@ 0x600
 801d736:	4602      	mov	r2, r0
 801d738:	6030      	str	r0, [r6, #0]
 801d73a:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 801d73e:	d213      	bcs.n	801d768 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE+0x74>
 801d740:	4643      	mov	r3, r8
 801d742:	4639      	mov	r1, r7
 801d744:	4620      	mov	r0, r4
 801d746:	f7ff fe33 	bl	801d3b0 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt>
 801d74a:	6030      	str	r0, [r6, #0]
 801d74c:	6833      	ldr	r3, [r6, #0]
 801d74e:	b143      	cbz	r3, 801d762 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE+0x6e>
 801d750:	7b5a      	ldrb	r2, [r3, #13]
 801d752:	7a9b      	ldrb	r3, [r3, #10]
 801d754:	0052      	lsls	r2, r2, #1
 801d756:	f402 7280 	and.w	r2, r2, #256	@ 0x100
 801d75a:	4313      	orrs	r3, r2
 801d75c:	bf0c      	ite	eq
 801d75e:	2301      	moveq	r3, #1
 801d760:	2300      	movne	r3, #0
 801d762:	f884 3061 	strb.w	r3, [r4, #97]	@ 0x61
 801d766:	e7dc      	b.n	801d722 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE+0x2e>
 801d768:	f5a5 6360 	sub.w	r3, r5, #3584	@ 0xe00
 801d76c:	b29b      	uxth	r3, r3
 801d76e:	2b7f      	cmp	r3, #127	@ 0x7f
 801d770:	d804      	bhi.n	801d77c <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE+0x88>
 801d772:	4639      	mov	r1, r7
 801d774:	4620      	mov	r0, r4
 801d776:	f7ff fd01 	bl	801d17c <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE>
 801d77a:	e7e6      	b.n	801d74a <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE+0x56>
 801d77c:	f894 3061 	ldrb.w	r3, [r4, #97]	@ 0x61
 801d780:	2b00      	cmp	r3, #0
 801d782:	d0e3      	beq.n	801d74c <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE+0x58>
 801d784:	f640 1302 	movw	r3, #2306	@ 0x902
 801d788:	429d      	cmp	r5, r3
 801d78a:	d1df      	bne.n	801d74c <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE+0x58>
 801d78c:	4601      	mov	r1, r0
 801d78e:	4620      	mov	r0, r4
 801d790:	f7ff fcc4 	bl	801d11c <_ZN8touchgfx12TextProvider16adjustHindiGlyphEPKNS_9GlyphNodeE>
 801d794:	e7d9      	b.n	801d74a <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE+0x56>
 801d796:	bf00      	nop
 801d798:	0802efb8 	.word	0x0802efb8
 801d79c:	0802f22a 	.word	0x0802f22a
 801d7a0:	0802efc1 	.word	0x0802efc1

0801d7a4 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeERPKhRh>:
 801d7a4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801d7a8:	461e      	mov	r6, r3
 801d7aa:	8f03      	ldrh	r3, [r0, #56]	@ 0x38
 801d7ac:	4604      	mov	r4, r0
 801d7ae:	4617      	mov	r7, r2
 801d7b0:	b92b      	cbnz	r3, 801d7be <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeERPKhRh+0x1a>
 801d7b2:	4b26      	ldr	r3, [pc, #152]	@ (801d84c <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeERPKhRh+0xa8>)
 801d7b4:	21c0      	movs	r1, #192	@ 0xc0
 801d7b6:	4a26      	ldr	r2, [pc, #152]	@ (801d850 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeERPKhRh+0xac>)
 801d7b8:	4826      	ldr	r0, [pc, #152]	@ (801d854 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeERPKhRh+0xb0>)
 801d7ba:	f00d f8bb 	bl	802a934 <__assert_func>
 801d7be:	8ec3      	ldrh	r3, [r0, #54]	@ 0x36
 801d7c0:	eb00 0343 	add.w	r3, r0, r3, lsl #1
 801d7c4:	f8b3 8022 	ldrh.w	r8, [r3, #34]	@ 0x22
 801d7c8:	f7ec fab4 	bl	8009d34 <_ZN8touchgfx12TextProvider15getNextLigatureEh>
 801d7cc:	4605      	mov	r5, r0
 801d7ce:	b918      	cbnz	r0, 801d7d8 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeERPKhRh+0x34>
 801d7d0:	6030      	str	r0, [r6, #0]
 801d7d2:	4628      	mov	r0, r5
 801d7d4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801d7d8:	683b      	ldr	r3, [r7, #0]
 801d7da:	4601      	mov	r1, r0
 801d7dc:	4638      	mov	r0, r7
 801d7de:	f8d3 9008 	ldr.w	r9, [r3, #8]
 801d7e2:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 801d7e6:	47c8      	blx	r9
 801d7e8:	f5a8 63c0 	sub.w	r3, r8, #1536	@ 0x600
 801d7ec:	4602      	mov	r2, r0
 801d7ee:	6030      	str	r0, [r6, #0]
 801d7f0:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 801d7f4:	d213      	bcs.n	801d81e <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeERPKhRh+0x7a>
 801d7f6:	4643      	mov	r3, r8
 801d7f8:	4639      	mov	r1, r7
 801d7fa:	4620      	mov	r0, r4
 801d7fc:	f7ff fdd8 	bl	801d3b0 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt>
 801d800:	6030      	str	r0, [r6, #0]
 801d802:	6833      	ldr	r3, [r6, #0]
 801d804:	b143      	cbz	r3, 801d818 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeERPKhRh+0x74>
 801d806:	7b5a      	ldrb	r2, [r3, #13]
 801d808:	7a9b      	ldrb	r3, [r3, #10]
 801d80a:	0052      	lsls	r2, r2, #1
 801d80c:	f402 7280 	and.w	r2, r2, #256	@ 0x100
 801d810:	4313      	orrs	r3, r2
 801d812:	bf0c      	ite	eq
 801d814:	2301      	moveq	r3, #1
 801d816:	2300      	movne	r3, #0
 801d818:	f884 3061 	strb.w	r3, [r4, #97]	@ 0x61
 801d81c:	e7d9      	b.n	801d7d2 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeERPKhRh+0x2e>
 801d81e:	f5a5 6360 	sub.w	r3, r5, #3584	@ 0xe00
 801d822:	b29b      	uxth	r3, r3
 801d824:	2b7f      	cmp	r3, #127	@ 0x7f
 801d826:	d804      	bhi.n	801d832 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeERPKhRh+0x8e>
 801d828:	4639      	mov	r1, r7
 801d82a:	4620      	mov	r0, r4
 801d82c:	f7ff fca6 	bl	801d17c <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE>
 801d830:	e7e6      	b.n	801d800 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeERPKhRh+0x5c>
 801d832:	f894 3061 	ldrb.w	r3, [r4, #97]	@ 0x61
 801d836:	2b00      	cmp	r3, #0
 801d838:	d0e3      	beq.n	801d802 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeERPKhRh+0x5e>
 801d83a:	f640 1302 	movw	r3, #2306	@ 0x902
 801d83e:	429d      	cmp	r5, r3
 801d840:	d1df      	bne.n	801d802 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeERPKhRh+0x5e>
 801d842:	4601      	mov	r1, r0
 801d844:	4620      	mov	r0, r4
 801d846:	f7ff fc69 	bl	801d11c <_ZN8touchgfx12TextProvider16adjustHindiGlyphEPKNS_9GlyphNodeE>
 801d84a:	e7d9      	b.n	801d800 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeERPKhRh+0x5c>
 801d84c:	0802efb8 	.word	0x0802efb8
 801d850:	0802f22a 	.word	0x0802f22a
 801d854:	0802efc1 	.word	0x0802efc1

0801d858 <_ZN8touchgfx12TextProvider15fillInputBufferEv>:
 801d858:	b510      	push	{r4, lr}
 801d85a:	4604      	mov	r4, r0
 801d85c:	f8b4 1040 	ldrh.w	r1, [r4, #64]	@ 0x40
 801d860:	8f23      	ldrh	r3, [r4, #56]	@ 0x38
 801d862:	b9d9      	cbnz	r1, 801d89c <_ZN8touchgfx12TextProvider15fillInputBufferEv+0x44>
 801d864:	8f23      	ldrh	r3, [r4, #56]	@ 0x38
 801d866:	2b0a      	cmp	r3, #10
 801d868:	d037      	beq.n	801d8da <_ZN8touchgfx12TextProvider15fillInputBufferEv+0x82>
 801d86a:	4620      	mov	r0, r4
 801d86c:	f7ff fc15 	bl	801d09a <_ZN8touchgfx12TextProvider19getNextCharInternalEv>
 801d870:	8f23      	ldrh	r3, [r4, #56]	@ 0x38
 801d872:	2b09      	cmp	r3, #9
 801d874:	d906      	bls.n	801d884 <_ZN8touchgfx12TextProvider15fillInputBufferEv+0x2c>
 801d876:	4b19      	ldr	r3, [pc, #100]	@ (801d8dc <_ZN8touchgfx12TextProvider15fillInputBufferEv+0x84>)
 801d878:	f44f 7182 	mov.w	r1, #260	@ 0x104
 801d87c:	4a18      	ldr	r2, [pc, #96]	@ (801d8e0 <_ZN8touchgfx12TextProvider15fillInputBufferEv+0x88>)
 801d87e:	4819      	ldr	r0, [pc, #100]	@ (801d8e4 <_ZN8touchgfx12TextProvider15fillInputBufferEv+0x8c>)
 801d880:	f00d f858 	bl	802a934 <__assert_func>
 801d884:	1c5a      	adds	r2, r3, #1
 801d886:	8722      	strh	r2, [r4, #56]	@ 0x38
 801d888:	8ee2      	ldrh	r2, [r4, #54]	@ 0x36
 801d88a:	4413      	add	r3, r2
 801d88c:	b29b      	uxth	r3, r3
 801d88e:	2b09      	cmp	r3, #9
 801d890:	bf88      	it	hi
 801d892:	3b0a      	subhi	r3, #10
 801d894:	eb04 0343 	add.w	r3, r4, r3, lsl #1
 801d898:	8458      	strh	r0, [r3, #34]	@ 0x22
 801d89a:	e7e3      	b.n	801d864 <_ZN8touchgfx12TextProvider15fillInputBufferEv+0xc>
 801d89c:	2b0a      	cmp	r3, #10
 801d89e:	d01c      	beq.n	801d8da <_ZN8touchgfx12TextProvider15fillInputBufferEv+0x82>
 801d8a0:	8fe2      	ldrh	r2, [r4, #62]	@ 0x3e
 801d8a2:	3901      	subs	r1, #1
 801d8a4:	eb04 0042 	add.w	r0, r4, r2, lsl #1
 801d8a8:	8f40      	ldrh	r0, [r0, #58]	@ 0x3a
 801d8aa:	f8a4 1040 	strh.w	r1, [r4, #64]	@ 0x40
 801d8ae:	1c51      	adds	r1, r2, #1
 801d8b0:	b289      	uxth	r1, r1
 801d8b2:	2901      	cmp	r1, #1
 801d8b4:	bf8a      	itet	hi
 801d8b6:	f102 32ff 	addhi.w	r2, r2, #4294967295
 801d8ba:	87e1      	strhls	r1, [r4, #62]	@ 0x3e
 801d8bc:	87e2      	strhhi	r2, [r4, #62]	@ 0x3e
 801d8be:	2b09      	cmp	r3, #9
 801d8c0:	d8d9      	bhi.n	801d876 <_ZN8touchgfx12TextProvider15fillInputBufferEv+0x1e>
 801d8c2:	1c5a      	adds	r2, r3, #1
 801d8c4:	8722      	strh	r2, [r4, #56]	@ 0x38
 801d8c6:	8ee2      	ldrh	r2, [r4, #54]	@ 0x36
 801d8c8:	4413      	add	r3, r2
 801d8ca:	b29b      	uxth	r3, r3
 801d8cc:	2b09      	cmp	r3, #9
 801d8ce:	bf88      	it	hi
 801d8d0:	3b0a      	subhi	r3, #10
 801d8d2:	eb04 0343 	add.w	r3, r4, r3, lsl #1
 801d8d6:	8458      	strh	r0, [r3, #34]	@ 0x22
 801d8d8:	e7c0      	b.n	801d85c <_ZN8touchgfx12TextProvider15fillInputBufferEv+0x4>
 801d8da:	bd10      	pop	{r4, pc}
 801d8dc:	0802efed 	.word	0x0802efed
 801d8e0:	0802f380 	.word	0x0802f380
 801d8e4:	0802efc1 	.word	0x0802efc1

0801d8e8 <_ZN8touchgfx12TextProvider11getNextCharEv>:
 801d8e8:	b538      	push	{r3, r4, r5, lr}
 801d8ea:	8f02      	ldrh	r2, [r0, #56]	@ 0x38
 801d8ec:	4604      	mov	r4, r0
 801d8ee:	b92a      	cbnz	r2, 801d8fc <_ZN8touchgfx12TextProvider11getNextCharEv+0x14>
 801d8f0:	4b13      	ldr	r3, [pc, #76]	@ (801d940 <_ZN8touchgfx12TextProvider11getNextCharEv+0x58>)
 801d8f2:	21d5      	movs	r1, #213	@ 0xd5
 801d8f4:	4a13      	ldr	r2, [pc, #76]	@ (801d944 <_ZN8touchgfx12TextProvider11getNextCharEv+0x5c>)
 801d8f6:	4814      	ldr	r0, [pc, #80]	@ (801d948 <_ZN8touchgfx12TextProvider11getNextCharEv+0x60>)
 801d8f8:	f00d f81c 	bl	802a934 <__assert_func>
 801d8fc:	8ec3      	ldrh	r3, [r0, #54]	@ 0x36
 801d8fe:	3a01      	subs	r2, #1
 801d900:	eb00 0143 	add.w	r1, r0, r3, lsl #1
 801d904:	8c4d      	ldrh	r5, [r1, #34]	@ 0x22
 801d906:	8702      	strh	r2, [r0, #56]	@ 0x38
 801d908:	1c5a      	adds	r2, r3, #1
 801d90a:	b292      	uxth	r2, r2
 801d90c:	2a09      	cmp	r2, #9
 801d90e:	bf8a      	itet	hi
 801d910:	3b09      	subhi	r3, #9
 801d912:	86c2      	strhls	r2, [r0, #54]	@ 0x36
 801d914:	86c3      	strhhi	r3, [r0, #54]	@ 0x36
 801d916:	f7ff ff9f 	bl	801d858 <_ZN8touchgfx12TextProvider15fillInputBufferEv>
 801d91a:	8c23      	ldrh	r3, [r4, #32]
 801d91c:	2b01      	cmp	r3, #1
 801d91e:	bf9c      	itt	ls
 801d920:	3301      	addls	r3, #1
 801d922:	8423      	strhls	r3, [r4, #32]
 801d924:	8be3      	ldrh	r3, [r4, #30]
 801d926:	b90b      	cbnz	r3, 801d92c <_ZN8touchgfx12TextProvider11getNextCharEv+0x44>
 801d928:	2302      	movs	r3, #2
 801d92a:	83e3      	strh	r3, [r4, #30]
 801d92c:	8be3      	ldrh	r3, [r4, #30]
 801d92e:	4628      	mov	r0, r5
 801d930:	3b01      	subs	r3, #1
 801d932:	b29b      	uxth	r3, r3
 801d934:	83e3      	strh	r3, [r4, #30]
 801d936:	eb04 0443 	add.w	r4, r4, r3, lsl #1
 801d93a:	8365      	strh	r5, [r4, #26]
 801d93c:	bd38      	pop	{r3, r4, r5, pc}
 801d93e:	bf00      	nop
 801d940:	0802efb8 	.word	0x0802efb8
 801d944:	0802f2d5 	.word	0x0802f2d5
 801d948:	0802efc1 	.word	0x0802efc1

0801d94c <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt>:
 801d94c:	428a      	cmp	r2, r1
 801d94e:	b538      	push	{r3, r4, r5, lr}
 801d950:	8f04      	ldrh	r4, [r0, #56]	@ 0x38
 801d952:	d90c      	bls.n	801d96e <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt+0x22>
 801d954:	b92c      	cbnz	r4, 801d962 <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt+0x16>
 801d956:	4b1c      	ldr	r3, [pc, #112]	@ (801d9c8 <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt+0x7c>)
 801d958:	21e1      	movs	r1, #225	@ 0xe1
 801d95a:	4a1c      	ldr	r2, [pc, #112]	@ (801d9cc <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt+0x80>)
 801d95c:	481c      	ldr	r0, [pc, #112]	@ (801d9d0 <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt+0x84>)
 801d95e:	f00c ffe9 	bl	802a934 <__assert_func>
 801d962:	3c01      	subs	r4, #1
 801d964:	4b1b      	ldr	r3, [pc, #108]	@ (801d9d4 <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt+0x88>)
 801d966:	4a1c      	ldr	r2, [pc, #112]	@ (801d9d8 <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt+0x8c>)
 801d968:	21c5      	movs	r1, #197	@ 0xc5
 801d96a:	8704      	strh	r4, [r0, #56]	@ 0x38
 801d96c:	e7f6      	b.n	801d95c <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt+0x10>
 801d96e:	428c      	cmp	r4, r1
 801d970:	d203      	bcs.n	801d97a <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt+0x2e>
 801d972:	4b1a      	ldr	r3, [pc, #104]	@ (801d9dc <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt+0x90>)
 801d974:	21cb      	movs	r1, #203	@ 0xcb
 801d976:	4a1a      	ldr	r2, [pc, #104]	@ (801d9e0 <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt+0x94>)
 801d978:	e7f0      	b.n	801d95c <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt+0x10>
 801d97a:	1a64      	subs	r4, r4, r1
 801d97c:	250a      	movs	r5, #10
 801d97e:	8704      	strh	r4, [r0, #56]	@ 0x38
 801d980:	8ec4      	ldrh	r4, [r0, #54]	@ 0x36
 801d982:	4421      	add	r1, r4
 801d984:	b289      	uxth	r1, r1
 801d986:	2909      	cmp	r1, #9
 801d988:	bf88      	it	hi
 801d98a:	390a      	subhi	r1, #10
 801d98c:	86c1      	strh	r1, [r0, #54]	@ 0x36
 801d98e:	b1ba      	cbz	r2, 801d9c0 <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt+0x74>
 801d990:	3a01      	subs	r2, #1
 801d992:	8f01      	ldrh	r1, [r0, #56]	@ 0x38
 801d994:	b292      	uxth	r2, r2
 801d996:	2909      	cmp	r1, #9
 801d998:	f833 4012 	ldrh.w	r4, [r3, r2, lsl #1]
 801d99c:	d903      	bls.n	801d9a6 <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt+0x5a>
 801d99e:	4b11      	ldr	r3, [pc, #68]	@ (801d9e4 <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt+0x98>)
 801d9a0:	21e6      	movs	r1, #230	@ 0xe6
 801d9a2:	4a11      	ldr	r2, [pc, #68]	@ (801d9e8 <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt+0x9c>)
 801d9a4:	e7da      	b.n	801d95c <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt+0x10>
 801d9a6:	3101      	adds	r1, #1
 801d9a8:	8701      	strh	r1, [r0, #56]	@ 0x38
 801d9aa:	8ec1      	ldrh	r1, [r0, #54]	@ 0x36
 801d9ac:	b901      	cbnz	r1, 801d9b0 <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt+0x64>
 801d9ae:	86c5      	strh	r5, [r0, #54]	@ 0x36
 801d9b0:	8ec1      	ldrh	r1, [r0, #54]	@ 0x36
 801d9b2:	3901      	subs	r1, #1
 801d9b4:	b289      	uxth	r1, r1
 801d9b6:	86c1      	strh	r1, [r0, #54]	@ 0x36
 801d9b8:	eb00 0141 	add.w	r1, r0, r1, lsl #1
 801d9bc:	844c      	strh	r4, [r1, #34]	@ 0x22
 801d9be:	e7e6      	b.n	801d98e <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt+0x42>
 801d9c0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 801d9c4:	f7ff bf48 	b.w	801d858 <_ZN8touchgfx12TextProvider15fillInputBufferEv>
 801d9c8:	0802efb8 	.word	0x0802efb8
 801d9cc:	0802f0ae 	.word	0x0802f0ae
 801d9d0:	0802efc1 	.word	0x0802efc1
 801d9d4:	0802eff9 	.word	0x0802eff9
 801d9d8:	0802f158 	.word	0x0802f158
 801d9dc:	0802f007 	.word	0x0802f007
 801d9e0:	0802f42f 	.word	0x0802f42f
 801d9e4:	0802f013 	.word	0x0802f013
 801d9e8:	0802f026 	.word	0x0802f026

0801d9ec <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt>:
 801d9ec:	3a01      	subs	r2, #1
 801d9ee:	b570      	push	{r4, r5, r6, lr}
 801d9f0:	b292      	uxth	r2, r2
 801d9f2:	f64f 76ff 	movw	r6, #65535	@ 0xffff
 801d9f6:	42b2      	cmp	r2, r6
 801d9f8:	d019      	beq.n	801da2e <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt+0x42>
 801d9fa:	8c04      	ldrh	r4, [r0, #32]
 801d9fc:	f831 5b02 	ldrh.w	r5, [r1], #2
 801da00:	4294      	cmp	r4, r2
 801da02:	d805      	bhi.n	801da10 <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt+0x24>
 801da04:	4b19      	ldr	r3, [pc, #100]	@ (801da6c <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt+0x80>)
 801da06:	4a1a      	ldr	r2, [pc, #104]	@ (801da70 <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt+0x84>)
 801da08:	21c5      	movs	r1, #197	@ 0xc5
 801da0a:	481a      	ldr	r0, [pc, #104]	@ (801da74 <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt+0x88>)
 801da0c:	f00c ff92 	bl	802a934 <__assert_func>
 801da10:	8bc4      	ldrh	r4, [r0, #30]
 801da12:	4414      	add	r4, r2
 801da14:	3a01      	subs	r2, #1
 801da16:	b2a4      	uxth	r4, r4
 801da18:	b292      	uxth	r2, r2
 801da1a:	2c01      	cmp	r4, #1
 801da1c:	bf88      	it	hi
 801da1e:	3c02      	subhi	r4, #2
 801da20:	eb00 0444 	add.w	r4, r0, r4, lsl #1
 801da24:	8b64      	ldrh	r4, [r4, #26]
 801da26:	42ac      	cmp	r4, r5
 801da28:	d0e5      	beq.n	801d9f6 <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt+0xa>
 801da2a:	2000      	movs	r0, #0
 801da2c:	bd70      	pop	{r4, r5, r6, pc}
 801da2e:	f8bd 2010 	ldrh.w	r2, [sp, #16]
 801da32:	2400      	movs	r4, #0
 801da34:	4413      	add	r3, r2
 801da36:	b2a2      	uxth	r2, r4
 801da38:	429a      	cmp	r2, r3
 801da3a:	da14      	bge.n	801da66 <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt+0x7a>
 801da3c:	8f06      	ldrh	r6, [r0, #56]	@ 0x38
 801da3e:	f831 5014 	ldrh.w	r5, [r1, r4, lsl #1]
 801da42:	4296      	cmp	r6, r2
 801da44:	d802      	bhi.n	801da4c <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt+0x60>
 801da46:	4b09      	ldr	r3, [pc, #36]	@ (801da6c <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt+0x80>)
 801da48:	4a0b      	ldr	r2, [pc, #44]	@ (801da78 <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt+0x8c>)
 801da4a:	e7dd      	b.n	801da08 <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt+0x1c>
 801da4c:	8ec6      	ldrh	r6, [r0, #54]	@ 0x36
 801da4e:	3401      	adds	r4, #1
 801da50:	4432      	add	r2, r6
 801da52:	b292      	uxth	r2, r2
 801da54:	2a09      	cmp	r2, #9
 801da56:	bf88      	it	hi
 801da58:	3a0a      	subhi	r2, #10
 801da5a:	eb00 0242 	add.w	r2, r0, r2, lsl #1
 801da5e:	8c52      	ldrh	r2, [r2, #34]	@ 0x22
 801da60:	42aa      	cmp	r2, r5
 801da62:	d0e8      	beq.n	801da36 <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt+0x4a>
 801da64:	e7e1      	b.n	801da2a <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt+0x3e>
 801da66:	2001      	movs	r0, #1
 801da68:	e7e0      	b.n	801da2c <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt+0x40>
 801da6a:	bf00      	nop
 801da6c:	0802eff9 	.word	0x0802eff9
 801da70:	0802f4b3 	.word	0x0802f4b3
 801da74:	0802efc1 	.word	0x0802efc1
 801da78:	0802f158 	.word	0x0802f158

0801da7c <_ZN8touchgfx12TextProvider14applyGsubRulesEPKtt>:
 801da7c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801da80:	4605      	mov	r5, r0
 801da82:	4616      	mov	r6, r2
 801da84:	1c8c      	adds	r4, r1, #2
 801da86:	8809      	ldrh	r1, [r1, #0]
 801da88:	ea4f 3a11 	mov.w	sl, r1, lsr #12
 801da8c:	f834 301a 	ldrh.w	r3, [r4, sl, lsl #1]
 801da90:	42b3      	cmp	r3, r6
 801da92:	d124      	bne.n	801dade <_ZN8touchgfx12TextProvider14applyGsubRulesEPKtt+0x62>
 801da94:	f3c1 2903 	ubfx	r9, r1, #8, #4
 801da98:	f3c1 1803 	ubfx	r8, r1, #4, #4
 801da9c:	f001 070f 	and.w	r7, r1, #15
 801daa0:	4652      	mov	r2, sl
 801daa2:	f8cd 8000 	str.w	r8, [sp]
 801daa6:	464b      	mov	r3, r9
 801daa8:	4621      	mov	r1, r4
 801daaa:	4628      	mov	r0, r5
 801daac:	f7ff ff9e 	bl	801d9ec <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt>
 801dab0:	4683      	mov	fp, r0
 801dab2:	b168      	cbz	r0, 801dad0 <_ZN8touchgfx12TextProvider14applyGsubRulesEPKtt+0x54>
 801dab4:	eb0a 0109 	add.w	r1, sl, r9
 801dab8:	463a      	mov	r2, r7
 801daba:	4628      	mov	r0, r5
 801dabc:	4441      	add	r1, r8
 801dabe:	eb04 0341 	add.w	r3, r4, r1, lsl #1
 801dac2:	4649      	mov	r1, r9
 801dac4:	f7ff ff42 	bl	801d94c <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt>
 801dac8:	4658      	mov	r0, fp
 801daca:	b003      	add	sp, #12
 801dacc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801dad0:	eb07 010a 	add.w	r1, r7, sl
 801dad4:	4449      	add	r1, r9
 801dad6:	4441      	add	r1, r8
 801dad8:	eb04 0141 	add.w	r1, r4, r1, lsl #1
 801dadc:	e7d2      	b.n	801da84 <_ZN8touchgfx12TextProvider14applyGsubRulesEPKtt+0x8>
 801dade:	f04f 0b00 	mov.w	fp, #0
 801dae2:	e7f1      	b.n	801dac8 <_ZN8touchgfx12TextProvider14applyGsubRulesEPKtt+0x4c>

0801dae4 <_ZNK8touchgfx12TextProvider21gsubTableBinarySearchEtPKtt>:
 801dae4:	b570      	push	{r4, r5, r6, lr}
 801dae6:	8810      	ldrh	r0, [r2, #0]
 801dae8:	4298      	cmp	r0, r3
 801daea:	d817      	bhi.n	801db1c <_ZNK8touchgfx12TextProvider21gsubTableBinarySearchEtPKtt+0x38>
 801daec:	1e48      	subs	r0, r1, #1
 801daee:	f832 0020 	ldrh.w	r0, [r2, r0, lsl #2]
 801daf2:	4298      	cmp	r0, r3
 801daf4:	d312      	bcc.n	801db1c <_ZNK8touchgfx12TextProvider21gsubTableBinarySearchEtPKtt+0x38>
 801daf6:	2400      	movs	r4, #0
 801daf8:	428c      	cmp	r4, r1
 801dafa:	d20f      	bcs.n	801db1c <_ZNK8touchgfx12TextProvider21gsubTableBinarySearchEtPKtt+0x38>
 801dafc:	1860      	adds	r0, r4, r1
 801dafe:	1040      	asrs	r0, r0, #1
 801db00:	f832 6020 	ldrh.w	r6, [r2, r0, lsl #2]
 801db04:	0085      	lsls	r5, r0, #2
 801db06:	42b3      	cmp	r3, r6
 801db08:	d902      	bls.n	801db10 <_ZNK8touchgfx12TextProvider21gsubTableBinarySearchEtPKtt+0x2c>
 801db0a:	3001      	adds	r0, #1
 801db0c:	b284      	uxth	r4, r0
 801db0e:	e7f3      	b.n	801daf8 <_ZNK8touchgfx12TextProvider21gsubTableBinarySearchEtPKtt+0x14>
 801db10:	d201      	bcs.n	801db16 <_ZNK8touchgfx12TextProvider21gsubTableBinarySearchEtPKtt+0x32>
 801db12:	b281      	uxth	r1, r0
 801db14:	e7f0      	b.n	801daf8 <_ZNK8touchgfx12TextProvider21gsubTableBinarySearchEtPKtt+0x14>
 801db16:	442a      	add	r2, r5
 801db18:	8850      	ldrh	r0, [r2, #2]
 801db1a:	bd70      	pop	{r4, r5, r6, pc}
 801db1c:	2000      	movs	r0, #0
 801db1e:	e7fc      	b.n	801db1a <_ZNK8touchgfx12TextProvider21gsubTableBinarySearchEtPKtt+0x36>

0801db20 <_ZN8touchgfx12TextProvider16substituteGlyphsEv>:
 801db20:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801db24:	6c45      	ldr	r5, [r0, #68]	@ 0x44
 801db26:	4604      	mov	r4, r0
 801db28:	260b      	movs	r6, #11
 801db2a:	886f      	ldrh	r7, [r5, #2]
 801db2c:	087f      	lsrs	r7, r7, #1
 801db2e:	3e01      	subs	r6, #1
 801db30:	d01b      	beq.n	801db6a <_ZN8touchgfx12TextProvider16substituteGlyphsEv+0x4a>
 801db32:	8f23      	ldrh	r3, [r4, #56]	@ 0x38
 801db34:	b92b      	cbnz	r3, 801db42 <_ZN8touchgfx12TextProvider16substituteGlyphsEv+0x22>
 801db36:	4b0e      	ldr	r3, [pc, #56]	@ (801db70 <_ZN8touchgfx12TextProvider16substituteGlyphsEv+0x50>)
 801db38:	21c0      	movs	r1, #192	@ 0xc0
 801db3a:	4a0e      	ldr	r2, [pc, #56]	@ (801db74 <_ZN8touchgfx12TextProvider16substituteGlyphsEv+0x54>)
 801db3c:	480e      	ldr	r0, [pc, #56]	@ (801db78 <_ZN8touchgfx12TextProvider16substituteGlyphsEv+0x58>)
 801db3e:	f00c fef9 	bl	802a934 <__assert_func>
 801db42:	8ee3      	ldrh	r3, [r4, #54]	@ 0x36
 801db44:	462a      	mov	r2, r5
 801db46:	4639      	mov	r1, r7
 801db48:	4620      	mov	r0, r4
 801db4a:	eb04 0343 	add.w	r3, r4, r3, lsl #1
 801db4e:	f8b3 8022 	ldrh.w	r8, [r3, #34]	@ 0x22
 801db52:	4643      	mov	r3, r8
 801db54:	f7ff ffc6 	bl	801dae4 <_ZNK8touchgfx12TextProvider21gsubTableBinarySearchEtPKtt>
 801db58:	b138      	cbz	r0, 801db6a <_ZN8touchgfx12TextProvider16substituteGlyphsEv+0x4a>
 801db5a:	eb05 0140 	add.w	r1, r5, r0, lsl #1
 801db5e:	4642      	mov	r2, r8
 801db60:	4620      	mov	r0, r4
 801db62:	f7ff ff8b 	bl	801da7c <_ZN8touchgfx12TextProvider14applyGsubRulesEPKtt>
 801db66:	2800      	cmp	r0, #0
 801db68:	d1e1      	bne.n	801db2e <_ZN8touchgfx12TextProvider16substituteGlyphsEv+0xe>
 801db6a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801db6e:	bf00      	nop
 801db70:	0802efb8 	.word	0x0802efb8
 801db74:	0802f22a 	.word	0x0802f22a
 801db78:	0802efc1 	.word	0x0802efc1

0801db7c <_ZN8touchgfx8ceil28_4El>:
 801db7c:	f110 030f 	adds.w	r3, r0, #15
 801db80:	d401      	bmi.n	801db86 <_ZN8touchgfx8ceil28_4El+0xa>
 801db82:	1118      	asrs	r0, r3, #4
 801db84:	4770      	bx	lr
 801db86:	2210      	movs	r2, #16
 801db88:	f1c0 0001 	rsb	r0, r0, #1
 801db8c:	fb93 f3f2 	sdiv	r3, r3, r2
 801db90:	f010 000f 	ands.w	r0, r0, #15
 801db94:	bf18      	it	ne
 801db96:	2001      	movne	r0, #1
 801db98:	1a18      	subs	r0, r3, r0
 801db9a:	4770      	bx	lr

0801db9c <_ZN8touchgfx11floorDivModEllRlS0_>:
 801db9c:	2900      	cmp	r1, #0
 801db9e:	b538      	push	{r3, r4, r5, lr}
 801dba0:	dc05      	bgt.n	801dbae <_ZN8touchgfx11floorDivModEllRlS0_+0x12>
 801dba2:	4b0f      	ldr	r3, [pc, #60]	@ (801dbe0 <_ZN8touchgfx11floorDivModEllRlS0_+0x44>)
 801dba4:	21f7      	movs	r1, #247	@ 0xf7
 801dba6:	4a0f      	ldr	r2, [pc, #60]	@ (801dbe4 <_ZN8touchgfx11floorDivModEllRlS0_+0x48>)
 801dba8:	480f      	ldr	r0, [pc, #60]	@ (801dbe8 <_ZN8touchgfx11floorDivModEllRlS0_+0x4c>)
 801dbaa:	f00c fec3 	bl	802a934 <__assert_func>
 801dbae:	2800      	cmp	r0, #0
 801dbb0:	db06      	blt.n	801dbc0 <_ZN8touchgfx11floorDivModEllRlS0_+0x24>
 801dbb2:	fb90 f4f1 	sdiv	r4, r0, r1
 801dbb6:	fb01 0114 	mls	r1, r1, r4, r0
 801dbba:	6014      	str	r4, [r2, #0]
 801dbbc:	6019      	str	r1, [r3, #0]
 801dbbe:	bd38      	pop	{r3, r4, r5, pc}
 801dbc0:	4240      	negs	r0, r0
 801dbc2:	fb90 f4f1 	sdiv	r4, r0, r1
 801dbc6:	4265      	negs	r5, r4
 801dbc8:	fb01 0014 	mls	r0, r1, r4, r0
 801dbcc:	6015      	str	r5, [r2, #0]
 801dbce:	6018      	str	r0, [r3, #0]
 801dbd0:	2800      	cmp	r0, #0
 801dbd2:	d0f4      	beq.n	801dbbe <_ZN8touchgfx11floorDivModEllRlS0_+0x22>
 801dbd4:	6810      	ldr	r0, [r2, #0]
 801dbd6:	3801      	subs	r0, #1
 801dbd8:	6010      	str	r0, [r2, #0]
 801dbda:	6818      	ldr	r0, [r3, #0]
 801dbdc:	1a09      	subs	r1, r1, r0
 801dbde:	e7ed      	b.n	801dbbc <_ZN8touchgfx11floorDivModEllRlS0_+0x20>
 801dbe0:	0802f584 	.word	0x0802f584
 801dbe4:	0802f5c3 	.word	0x0802f5c3
 801dbe8:	0802f594 	.word	0x0802f594

0801dbec <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE>:
 801dbec:	b570      	push	{r4, r5, r6, lr}
 801dbee:	694a      	ldr	r2, [r1, #20]
 801dbf0:	6a8d      	ldr	r5, [r1, #40]	@ 0x28
 801dbf2:	684b      	ldr	r3, [r1, #4]
 801dbf4:	1b54      	subs	r4, r2, r5
 801dbf6:	6ace      	ldr	r6, [r1, #44]	@ 0x2c
 801dbf8:	f000 8106 	beq.w	801de08 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x21c>
 801dbfc:	1b9b      	subs	r3, r3, r6
 801dbfe:	d003      	beq.n	801dc08 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x1c>
 801dc00:	4363      	muls	r3, r4
 801dc02:	2210      	movs	r2, #16
 801dc04:	fb93 f3f2 	sdiv	r3, r3, r2
 801dc08:	680c      	ldr	r4, [r1, #0]
 801dc0a:	698a      	ldr	r2, [r1, #24]
 801dc0c:	1b65      	subs	r5, r4, r5
 801dc0e:	f000 80fd 	beq.w	801de0c <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x220>
 801dc12:	1b92      	subs	r2, r2, r6
 801dc14:	d003      	beq.n	801dc1e <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x32>
 801dc16:	436a      	muls	r2, r5
 801dc18:	2410      	movs	r4, #16
 801dc1a:	fb92 f2f4 	sdiv	r2, r2, r4
 801dc1e:	1a9b      	subs	r3, r3, r2
 801dc20:	ed9f 4a89 	vldr	s8, [pc, #548]	@ 801de48 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x25c>
 801dc24:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 801dc28:	460a      	mov	r2, r1
 801dc2a:	ee07 3a90 	vmov	s15, r3
 801dc2e:	f100 040c 	add.w	r4, r0, #12
 801dc32:	4603      	mov	r3, r0
 801dc34:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 801dc38:	ee67 7a84 	vmul.f32	s15, s15, s8
 801dc3c:	ee87 3a27 	vdiv.f32	s6, s14, s15
 801dc40:	eeb1 6a43 	vneg.f32	s12, s6
 801dc44:	edd2 7a02 	vldr	s15, [r2, #8]
 801dc48:	3214      	adds	r2, #20
 801dc4a:	eec7 6a27 	vdiv.f32	s13, s14, s15
 801dc4e:	ece3 6a01 	vstmia	r3!, {s13}
 801dc52:	429c      	cmp	r4, r3
 801dc54:	ed52 7a02 	vldr	s15, [r2, #-8]
 801dc58:	ee67 7aa6 	vmul.f32	s15, s15, s13
 801dc5c:	edc3 7a02 	vstr	s15, [r3, #8]
 801dc60:	ed52 7a01 	vldr	s15, [r2, #-4]
 801dc64:	ee67 7aa6 	vmul.f32	s15, s15, s13
 801dc68:	edc3 7a05 	vstr	s15, [r3, #20]
 801dc6c:	d1ea      	bne.n	801dc44 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x58>
 801dc6e:	6aca      	ldr	r2, [r1, #44]	@ 0x2c
 801dc70:	698b      	ldr	r3, [r1, #24]
 801dc72:	edd0 4a02 	vldr	s9, [r0, #8]
 801dc76:	1a9b      	subs	r3, r3, r2
 801dc78:	edd0 3a00 	vldr	s7, [r0]
 801dc7c:	edd0 6a01 	vldr	s13, [r0, #4]
 801dc80:	ee07 3a90 	vmov	s15, r3
 801dc84:	684b      	ldr	r3, [r1, #4]
 801dc86:	ee76 6ae4 	vsub.f32	s13, s13, s9
 801dc8a:	ed90 5a05 	vldr	s10, [r0, #20]
 801dc8e:	1a9b      	subs	r3, r3, r2
 801dc90:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 801dc94:	ee73 4ae4 	vsub.f32	s9, s7, s9
 801dc98:	ed90 2a03 	vldr	s4, [r0, #12]
 801dc9c:	ee07 3a10 	vmov	s14, r3
 801dca0:	edd0 5a04 	vldr	s11, [r0, #16]
 801dca4:	ee67 7a84 	vmul.f32	s15, s15, s8
 801dca8:	ed90 1a07 	vldr	s2, [r0, #28]
 801dcac:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 801dcb0:	edd0 2a06 	vldr	s5, [r0, #24]
 801dcb4:	ee75 5ac5 	vsub.f32	s11, s11, s10
 801dcb8:	ee64 7ae7 	vnmul.f32	s15, s9, s15
 801dcbc:	ee27 7a04 	vmul.f32	s14, s14, s8
 801dcc0:	ee32 5a45 	vsub.f32	s10, s4, s10
 801dcc4:	eee6 7a87 	vfma.f32	s15, s13, s14
 801dcc8:	ee67 7a83 	vmul.f32	s15, s15, s6
 801dccc:	edc0 7a09 	vstr	s15, [r0, #36]	@ 0x24
 801dcd0:	6a8c      	ldr	r4, [r1, #40]	@ 0x28
 801dcd2:	694a      	ldr	r2, [r1, #20]
 801dcd4:	1b13      	subs	r3, r2, r4
 801dcd6:	ee07 3a10 	vmov	s14, r3
 801dcda:	680b      	ldr	r3, [r1, #0]
 801dcdc:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 801dce0:	1b1b      	subs	r3, r3, r4
 801dce2:	ee27 7a04 	vmul.f32	s14, s14, s8
 801dce6:	ee64 4ac7 	vnmul.f32	s9, s9, s14
 801dcea:	ee07 3a10 	vmov	s14, r3
 801dcee:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 801dcf2:	ee27 7a04 	vmul.f32	s14, s14, s8
 801dcf6:	eee6 4a87 	vfma.f32	s9, s13, s14
 801dcfa:	ee64 4a86 	vmul.f32	s9, s9, s12
 801dcfe:	edc0 4a0a 	vstr	s9, [r0, #40]	@ 0x28
 801dd02:	6aca      	ldr	r2, [r1, #44]	@ 0x2c
 801dd04:	698b      	ldr	r3, [r1, #24]
 801dd06:	1a9b      	subs	r3, r3, r2
 801dd08:	ee06 3a90 	vmov	s13, r3
 801dd0c:	684b      	ldr	r3, [r1, #4]
 801dd0e:	1a9b      	subs	r3, r3, r2
 801dd10:	eef8 6ae6 	vcvt.f32.s32	s13, s13
 801dd14:	ee07 3a10 	vmov	s14, r3
 801dd18:	ee66 6a84 	vmul.f32	s13, s13, s8
 801dd1c:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 801dd20:	ee65 6a66 	vnmul.f32	s13, s10, s13
 801dd24:	ee27 7a04 	vmul.f32	s14, s14, s8
 801dd28:	eee5 6a87 	vfma.f32	s13, s11, s14
 801dd2c:	ee66 6a83 	vmul.f32	s13, s13, s6
 801dd30:	edc0 6a0b 	vstr	s13, [r0, #44]	@ 0x2c
 801dd34:	6a8c      	ldr	r4, [r1, #40]	@ 0x28
 801dd36:	694a      	ldr	r2, [r1, #20]
 801dd38:	1b13      	subs	r3, r2, r4
 801dd3a:	ee07 3a10 	vmov	s14, r3
 801dd3e:	680b      	ldr	r3, [r1, #0]
 801dd40:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 801dd44:	1b1b      	subs	r3, r3, r4
 801dd46:	ee27 7a04 	vmul.f32	s14, s14, s8
 801dd4a:	ee25 5a47 	vnmul.f32	s10, s10, s14
 801dd4e:	ee07 3a10 	vmov	s14, r3
 801dd52:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 801dd56:	ee27 7a04 	vmul.f32	s14, s14, s8
 801dd5a:	eea5 5a87 	vfma.f32	s10, s11, s14
 801dd5e:	edd0 5a08 	vldr	s11, [r0, #32]
 801dd62:	ee31 1a65 	vsub.f32	s2, s2, s11
 801dd66:	ee72 5ae5 	vsub.f32	s11, s5, s11
 801dd6a:	ee25 5a06 	vmul.f32	s10, s10, s12
 801dd6e:	ed80 5a0c 	vstr	s10, [r0, #48]	@ 0x30
 801dd72:	6aca      	ldr	r2, [r1, #44]	@ 0x2c
 801dd74:	698b      	ldr	r3, [r1, #24]
 801dd76:	1a9b      	subs	r3, r3, r2
 801dd78:	ee07 3a10 	vmov	s14, r3
 801dd7c:	684b      	ldr	r3, [r1, #4]
 801dd7e:	1a9b      	subs	r3, r3, r2
 801dd80:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 801dd84:	ee01 3a90 	vmov	s3, r3
 801dd88:	ee27 7a04 	vmul.f32	s14, s14, s8
 801dd8c:	eef8 1ae1 	vcvt.f32.s32	s3, s3
 801dd90:	ee25 7ac7 	vnmul.f32	s14, s11, s14
 801dd94:	ee61 1a84 	vmul.f32	s3, s3, s8
 801dd98:	eea1 7a21 	vfma.f32	s14, s2, s3
 801dd9c:	ee27 7a03 	vmul.f32	s14, s14, s6
 801dda0:	ed80 7a0d 	vstr	s14, [r0, #52]	@ 0x34
 801dda4:	6a8c      	ldr	r4, [r1, #40]	@ 0x28
 801dda6:	694a      	ldr	r2, [r1, #20]
 801dda8:	1b13      	subs	r3, r2, r4
 801ddaa:	ee03 3a10 	vmov	s6, r3
 801ddae:	680b      	ldr	r3, [r1, #0]
 801ddb0:	eeb8 3ac3 	vcvt.f32.s32	s6, s6
 801ddb4:	1b1b      	subs	r3, r3, r4
 801ddb6:	ee23 3a04 	vmul.f32	s6, s6, s8
 801ddba:	ee65 5ac3 	vnmul.f32	s11, s11, s6
 801ddbe:	ee03 3a10 	vmov	s6, r3
 801ddc2:	eeb8 3ac3 	vcvt.f32.s32	s6, s6
 801ddc6:	ee23 4a04 	vmul.f32	s8, s6, s8
 801ddca:	eee1 5a04 	vfma.f32	s11, s2, s8
 801ddce:	ee25 6a86 	vmul.f32	s12, s11, s12
 801ddd2:	ee62 5a67 	vnmul.f32	s11, s4, s15
 801ddd6:	ed80 6a0e 	vstr	s12, [r0, #56]	@ 0x38
 801ddda:	eee3 5aa6 	vfma.f32	s11, s7, s13
 801ddde:	eef5 5ac0 	vcmpe.f32	s11, #0.0
 801dde2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801dde6:	dd13      	ble.n	801de10 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x224>
 801dde8:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 801ddec:	ee62 7ae7 	vnmul.f32	s15, s5, s15
 801ddf0:	63c3      	str	r3, [r0, #60]	@ 0x3c
 801ddf2:	eee3 7a87 	vfma.f32	s15, s7, s14
 801ddf6:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 801ddfa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801ddfe:	dd15      	ble.n	801de2c <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x240>
 801de00:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 801de04:	6403      	str	r3, [r0, #64]	@ 0x40
 801de06:	bd70      	pop	{r4, r5, r6, pc}
 801de08:	4623      	mov	r3, r4
 801de0a:	e6fd      	b.n	801dc08 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x1c>
 801de0c:	462a      	mov	r2, r5
 801de0e:	e706      	b.n	801dc1e <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x32>
 801de10:	d502      	bpl.n	801de18 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x22c>
 801de12:	f647 73ff 	movw	r3, #32767	@ 0x7fff
 801de16:	e7e9      	b.n	801ddec <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x200>
 801de18:	ee22 2a64 	vnmul.f32	s4, s4, s9
 801de1c:	eea3 2a85 	vfma.f32	s4, s7, s10
 801de20:	eeb5 2ac0 	vcmpe.f32	s4, #0.0
 801de24:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801de28:	dade      	bge.n	801dde8 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x1fc>
 801de2a:	e7f2      	b.n	801de12 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x226>
 801de2c:	d502      	bpl.n	801de34 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x248>
 801de2e:	f647 73ff 	movw	r3, #32767	@ 0x7fff
 801de32:	e7e7      	b.n	801de04 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x218>
 801de34:	ee62 4ae4 	vnmul.f32	s9, s5, s9
 801de38:	eee3 4a86 	vfma.f32	s9, s7, s12
 801de3c:	eef5 4ac0 	vcmpe.f32	s9, #0.0
 801de40:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801de44:	dadc      	bge.n	801de00 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x214>
 801de46:	e7f2      	b.n	801de2e <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x242>
 801de48:	3d800000 	.word	0x3d800000

0801de4c <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii>:
 801de4c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801de50:	f04f 0814 	mov.w	r8, #20
 801de54:	4604      	mov	r4, r0
 801de56:	4617      	mov	r7, r2
 801de58:	460d      	mov	r5, r1
 801de5a:	fb08 f903 	mul.w	r9, r8, r3
 801de5e:	461e      	mov	r6, r3
 801de60:	eb02 0a09 	add.w	sl, r2, r9
 801de64:	f8da 0004 	ldr.w	r0, [sl, #4]
 801de68:	f7ff fe88 	bl	801db7c <_ZN8touchgfx8ceil28_4El>
 801de6c:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 801de6e:	6160      	str	r0, [r4, #20]
 801de70:	fb08 f803 	mul.w	r8, r8, r3
 801de74:	9001      	str	r0, [sp, #4]
 801de76:	eb07 0b08 	add.w	fp, r7, r8
 801de7a:	f8db 0004 	ldr.w	r0, [fp, #4]
 801de7e:	f7ff fe7d 	bl	801db7c <_ZN8touchgfx8ceil28_4El>
 801de82:	9a01      	ldr	r2, [sp, #4]
 801de84:	1a80      	subs	r0, r0, r2
 801de86:	61a0      	str	r0, [r4, #24]
 801de88:	2800      	cmp	r0, #0
 801de8a:	f000 8088 	beq.w	801df9e <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii+0x152>
 801de8e:	f857 3009 	ldr.w	r3, [r7, r9]
 801de92:	f857 c008 	ldr.w	ip, [r7, r8]
 801de96:	f8db 0004 	ldr.w	r0, [fp, #4]
 801de9a:	ebac 0c03 	sub.w	ip, ip, r3
 801de9e:	f8da 1004 	ldr.w	r1, [sl, #4]
 801dea2:	ea4f 1b0c 	mov.w	fp, ip, lsl #4
 801dea6:	1a40      	subs	r0, r0, r1
 801dea8:	fb0b f202 	mul.w	r2, fp, r2
 801deac:	ea4f 1800 	mov.w	r8, r0, lsl #4
 801deb0:	fb0c 2211 	mls	r2, ip, r1, r2
 801deb4:	4641      	mov	r1, r8
 801deb6:	fb00 2003 	mla	r0, r0, r3, r2
 801deba:	f104 0310 	add.w	r3, r4, #16
 801debe:	4622      	mov	r2, r4
 801dec0:	3801      	subs	r0, #1
 801dec2:	4440      	add	r0, r8
 801dec4:	f7ff fe6a 	bl	801db9c <_ZN8touchgfx11floorDivModEllRlS0_>
 801dec8:	f104 0308 	add.w	r3, r4, #8
 801decc:	1d22      	adds	r2, r4, #4
 801dece:	4641      	mov	r1, r8
 801ded0:	4658      	mov	r0, fp
 801ded2:	f7ff fe63 	bl	801db9c <_ZN8touchgfx11floorDivModEllRlS0_>
 801ded6:	f8c4 800c 	str.w	r8, [r4, #12]
 801deda:	6962      	ldr	r2, [r4, #20]
 801dedc:	f8da 3004 	ldr.w	r3, [sl, #4]
 801dee0:	eddf 6a31 	vldr	s13, [pc, #196]	@ 801dfa8 <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii+0x15c>
 801dee4:	ebc3 1302 	rsb	r3, r3, r2, lsl #4
 801dee8:	6822      	ldr	r2, [r4, #0]
 801deea:	ed95 6a0a 	vldr	s12, [r5, #40]	@ 0x28
 801deee:	ee07 3a10 	vmov	s14, r3
 801def2:	f857 3009 	ldr.w	r3, [r7, r9]
 801def6:	ebc3 1302 	rsb	r3, r3, r2, lsl #4
 801defa:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 801defe:	ee07 3a90 	vmov	s15, r3
 801df02:	eb05 0386 	add.w	r3, r5, r6, lsl #2
 801df06:	ee27 7a26 	vmul.f32	s14, s14, s13
 801df0a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 801df0e:	ee67 7aa6 	vmul.f32	s15, s15, s13
 801df12:	edd3 6a00 	vldr	s13, [r3]
 801df16:	eee6 6a07 	vfma.f32	s13, s12, s14
 801df1a:	ed95 6a09 	vldr	s12, [r5, #36]	@ 0x24
 801df1e:	eee6 6a27 	vfma.f32	s13, s12, s15
 801df22:	edc4 6a07 	vstr	s13, [r4, #28]
 801df26:	edd4 6a01 	vldr	s13, [r4, #4]
 801df2a:	edd5 5a09 	vldr	s11, [r5, #36]	@ 0x24
 801df2e:	eef8 6ae6 	vcvt.f32.s32	s13, s13
 801df32:	ed95 6a0a 	vldr	s12, [r5, #40]	@ 0x28
 801df36:	eea6 6aa5 	vfma.f32	s12, s13, s11
 801df3a:	ed84 6a08 	vstr	s12, [r4, #32]
 801df3e:	6a6a      	ldr	r2, [r5, #36]	@ 0x24
 801df40:	6262      	str	r2, [r4, #36]	@ 0x24
 801df42:	edd5 5a0c 	vldr	s11, [r5, #48]	@ 0x30
 801df46:	ed93 6a03 	vldr	s12, [r3, #12]
 801df4a:	eea5 6a87 	vfma.f32	s12, s11, s14
 801df4e:	edd5 5a0b 	vldr	s11, [r5, #44]	@ 0x2c
 801df52:	eea5 6aa7 	vfma.f32	s12, s11, s15
 801df56:	ed84 6a0a 	vstr	s12, [r4, #40]	@ 0x28
 801df5a:	edd5 5a0b 	vldr	s11, [r5, #44]	@ 0x2c
 801df5e:	ed95 6a0c 	vldr	s12, [r5, #48]	@ 0x30
 801df62:	eea6 6aa5 	vfma.f32	s12, s13, s11
 801df66:	ed84 6a0b 	vstr	s12, [r4, #44]	@ 0x2c
 801df6a:	6aea      	ldr	r2, [r5, #44]	@ 0x2c
 801df6c:	6322      	str	r2, [r4, #48]	@ 0x30
 801df6e:	ed93 6a06 	vldr	s12, [r3, #24]
 801df72:	edd5 5a0e 	vldr	s11, [r5, #56]	@ 0x38
 801df76:	eea5 6a87 	vfma.f32	s12, s11, s14
 801df7a:	eeb0 7a46 	vmov.f32	s14, s12
 801df7e:	ed95 6a0d 	vldr	s12, [r5, #52]	@ 0x34
 801df82:	eea6 7a27 	vfma.f32	s14, s12, s15
 801df86:	ed84 7a0d 	vstr	s14, [r4, #52]	@ 0x34
 801df8a:	ed95 7a0d 	vldr	s14, [r5, #52]	@ 0x34
 801df8e:	edd5 7a0e 	vldr	s15, [r5, #56]	@ 0x38
 801df92:	eee6 7a87 	vfma.f32	s15, s13, s14
 801df96:	edc4 7a0e 	vstr	s15, [r4, #56]	@ 0x38
 801df9a:	6b6b      	ldr	r3, [r5, #52]	@ 0x34
 801df9c:	63e3      	str	r3, [r4, #60]	@ 0x3c
 801df9e:	4620      	mov	r0, r4
 801dfa0:	b003      	add	sp, #12
 801dfa2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801dfa6:	bf00      	nop
 801dfa8:	3d800000 	.word	0x3d800000

0801dfac <_ZN8touchgfx7Unicode6strlenEPKt>:
 801dfac:	4602      	mov	r2, r0
 801dfae:	b148      	cbz	r0, 801dfc4 <_ZN8touchgfx7Unicode6strlenEPKt+0x18>
 801dfb0:	2300      	movs	r3, #0
 801dfb2:	b298      	uxth	r0, r3
 801dfb4:	3301      	adds	r3, #1
 801dfb6:	eb02 0143 	add.w	r1, r2, r3, lsl #1
 801dfba:	f831 1c02 	ldrh.w	r1, [r1, #-2]
 801dfbe:	2900      	cmp	r1, #0
 801dfc0:	d1f7      	bne.n	801dfb2 <_ZN8touchgfx7Unicode6strlenEPKt+0x6>
 801dfc2:	4770      	bx	lr
 801dfc4:	4770      	bx	lr

0801dfc6 <_ZN8touchgfx7Unicode7strncpyEPtPKct>:
 801dfc6:	b530      	push	{r4, r5, lr}
 801dfc8:	4604      	mov	r4, r0
 801dfca:	b159      	cbz	r1, 801dfe4 <_ZN8touchgfx7Unicode7strncpyEPtPKct+0x1e>
 801dfcc:	b148      	cbz	r0, 801dfe2 <_ZN8touchgfx7Unicode7strncpyEPtPKct+0x1c>
 801dfce:	2300      	movs	r3, #0
 801dfd0:	b298      	uxth	r0, r3
 801dfd2:	4282      	cmp	r2, r0
 801dfd4:	d905      	bls.n	801dfe2 <_ZN8touchgfx7Unicode7strncpyEPtPKct+0x1c>
 801dfd6:	5ccd      	ldrb	r5, [r1, r3]
 801dfd8:	f824 5013 	strh.w	r5, [r4, r3, lsl #1]
 801dfdc:	3301      	adds	r3, #1
 801dfde:	2d00      	cmp	r5, #0
 801dfe0:	d1f6      	bne.n	801dfd0 <_ZN8touchgfx7Unicode7strncpyEPtPKct+0xa>
 801dfe2:	bd30      	pop	{r4, r5, pc}
 801dfe4:	4608      	mov	r0, r1
 801dfe6:	e7fc      	b.n	801dfe2 <_ZN8touchgfx7Unicode7strncpyEPtPKct+0x1c>

0801dfe8 <_ZN8touchgfx7Unicode4utoaEmPtti.part.2>:
 801dfe8:	b5f0      	push	{r4, r5, r6, r7, lr}
 801dfea:	468c      	mov	ip, r1
 801dfec:	b08b      	sub	sp, #44	@ 0x2c
 801dfee:	2100      	movs	r1, #0
 801dff0:	ae01      	add	r6, sp, #4
 801dff2:	f88d 1024 	strb.w	r1, [sp, #36]	@ 0x24
 801dff6:	211f      	movs	r1, #31
 801dff8:	fbb0 f7f3 	udiv	r7, r0, r3
 801dffc:	fb03 0517 	mls	r5, r3, r7, r0
 801e000:	4638      	mov	r0, r7
 801e002:	b2ec      	uxtb	r4, r5
 801e004:	2d09      	cmp	r5, #9
 801e006:	bfd4      	ite	le
 801e008:	3430      	addle	r4, #48	@ 0x30
 801e00a:	3457      	addgt	r4, #87	@ 0x57
 801e00c:	b2e4      	uxtb	r4, r4
 801e00e:	558c      	strb	r4, [r1, r6]
 801e010:	1e4c      	subs	r4, r1, #1
 801e012:	b92f      	cbnz	r7, 801e020 <_ZN8touchgfx7Unicode4utoaEmPtti.part.2+0x38>
 801e014:	4431      	add	r1, r6
 801e016:	4660      	mov	r0, ip
 801e018:	f7ff ffd5 	bl	801dfc6 <_ZN8touchgfx7Unicode7strncpyEPtPKct>
 801e01c:	b00b      	add	sp, #44	@ 0x2c
 801e01e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801e020:	4621      	mov	r1, r4
 801e022:	e7e9      	b.n	801dff8 <_ZN8touchgfx7Unicode4utoaEmPtti.part.2+0x10>

0801e024 <_ZN8touchgfx7Unicode4itoaElPtti>:
 801e024:	b5f0      	push	{r4, r5, r6, r7, lr}
 801e026:	4607      	mov	r7, r0
 801e028:	b08b      	sub	sp, #44	@ 0x2c
 801e02a:	4608      	mov	r0, r1
 801e02c:	b341      	cbz	r1, 801e080 <_ZN8touchgfx7Unicode4itoaElPtti+0x5c>
 801e02e:	1e99      	subs	r1, r3, #2
 801e030:	2922      	cmp	r1, #34	@ 0x22
 801e032:	d825      	bhi.n	801e080 <_ZN8touchgfx7Unicode4itoaElPtti+0x5c>
 801e034:	2100      	movs	r1, #0
 801e036:	463c      	mov	r4, r7
 801e038:	261f      	movs	r6, #31
 801e03a:	f10d 0c04 	add.w	ip, sp, #4
 801e03e:	f88d 1024 	strb.w	r1, [sp, #36]	@ 0x24
 801e042:	1e71      	subs	r1, r6, #1
 801e044:	fb94 fef3 	sdiv	lr, r4, r3
 801e048:	fb03 441e 	mls	r4, r3, lr, r4
 801e04c:	ea84 75e4 	eor.w	r5, r4, r4, asr #31
 801e050:	eba5 75e4 	sub.w	r5, r5, r4, asr #31
 801e054:	b2ec      	uxtb	r4, r5
 801e056:	2d09      	cmp	r5, #9
 801e058:	bfd4      	ite	le
 801e05a:	3430      	addle	r4, #48	@ 0x30
 801e05c:	3457      	addgt	r4, #87	@ 0x57
 801e05e:	b2e4      	uxtb	r4, r4
 801e060:	f80c 4006 	strb.w	r4, [ip, r6]
 801e064:	4674      	mov	r4, lr
 801e066:	b96c      	cbnz	r4, 801e084 <_ZN8touchgfx7Unicode4itoaElPtti+0x60>
 801e068:	2f00      	cmp	r7, #0
 801e06a:	da05      	bge.n	801e078 <_ZN8touchgfx7Unicode4itoaElPtti+0x54>
 801e06c:	ab0a      	add	r3, sp, #40	@ 0x28
 801e06e:	4419      	add	r1, r3
 801e070:	232d      	movs	r3, #45	@ 0x2d
 801e072:	f801 3c24 	strb.w	r3, [r1, #-36]
 801e076:	1eb1      	subs	r1, r6, #2
 801e078:	3101      	adds	r1, #1
 801e07a:	4461      	add	r1, ip
 801e07c:	f7ff ffa3 	bl	801dfc6 <_ZN8touchgfx7Unicode7strncpyEPtPKct>
 801e080:	b00b      	add	sp, #44	@ 0x2c
 801e082:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801e084:	460e      	mov	r6, r1
 801e086:	e7dc      	b.n	801e042 <_ZN8touchgfx7Unicode4itoaElPtti+0x1e>

0801e088 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt>:
 801e088:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801e08c:	b085      	sub	sp, #20
 801e08e:	4691      	mov	r9, r2
 801e090:	6802      	ldr	r2, [r0, #0]
 801e092:	4688      	mov	r8, r1
 801e094:	461c      	mov	r4, r3
 801e096:	f89d 1040 	ldrb.w	r1, [sp, #64]	@ 0x40
 801e09a:	f89d 3048 	ldrb.w	r3, [sp, #72]	@ 0x48
 801e09e:	4683      	mov	fp, r0
 801e0a0:	4610      	mov	r0, r2
 801e0a2:	9103      	str	r1, [sp, #12]
 801e0a4:	9302      	str	r3, [sp, #8]
 801e0a6:	9201      	str	r2, [sp, #4]
 801e0a8:	f7ff ff80 	bl	801dfac <_ZN8touchgfx7Unicode6strlenEPKt>
 801e0ac:	f1b8 0f00 	cmp.w	r8, #0
 801e0b0:	bf0c      	ite	eq
 801e0b2:	4684      	moveq	ip, r0
 801e0b4:	f100 0c01 	addne.w	ip, r0, #1
 801e0b8:	f1b9 0f69 	cmp.w	r9, #105	@ 0x69
 801e0bc:	f89d 6038 	ldrb.w	r6, [sp, #56]	@ 0x38
 801e0c0:	9f0f      	ldr	r7, [sp, #60]	@ 0x3c
 801e0c2:	fa1f fc8c 	uxth.w	ip, ip
 801e0c6:	9d13      	ldr	r5, [sp, #76]	@ 0x4c
 801e0c8:	f8dd a054 	ldr.w	sl, [sp, #84]	@ 0x54
 801e0cc:	9903      	ldr	r1, [sp, #12]
 801e0ce:	e9dd 2301 	ldrd	r2, r3, [sp, #4]
 801e0d2:	d041      	beq.n	801e158 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0xd0>
 801e0d4:	d834      	bhi.n	801e140 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0xb8>
 801e0d6:	f1b9 0f63 	cmp.w	r9, #99	@ 0x63
 801e0da:	d059      	beq.n	801e190 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x108>
 801e0dc:	f1b9 0f64 	cmp.w	r9, #100	@ 0x64
 801e0e0:	d03a      	beq.n	801e158 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0xd0>
 801e0e2:	f1b9 0f58 	cmp.w	r9, #88	@ 0x58
 801e0e6:	d034      	beq.n	801e152 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0xca>
 801e0e8:	2400      	movs	r4, #0
 801e0ea:	f8bd 2050 	ldrh.w	r2, [sp, #80]	@ 0x50
 801e0ee:	3a01      	subs	r2, #1
 801e0f0:	b169      	cbz	r1, 801e10e <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x86>
 801e0f2:	9911      	ldr	r1, [sp, #68]	@ 0x44
 801e0f4:	458c      	cmp	ip, r1
 801e0f6:	da09      	bge.n	801e10c <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x84>
 801e0f8:	eba1 010c 	sub.w	r1, r1, ip
 801e0fc:	b289      	uxth	r1, r1
 801e0fe:	b933      	cbnz	r3, 801e10e <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x86>
 801e100:	2e00      	cmp	r6, #0
 801e102:	d051      	beq.n	801e1a8 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x120>
 801e104:	2800      	cmp	r0, #0
 801e106:	d04f      	beq.n	801e1a8 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x120>
 801e108:	440c      	add	r4, r1
 801e10a:	b2a4      	uxth	r4, r4
 801e10c:	2100      	movs	r1, #0
 801e10e:	682b      	ldr	r3, [r5, #0]
 801e110:	4293      	cmp	r3, r2
 801e112:	da07      	bge.n	801e124 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x9c>
 801e114:	f1b8 0f00 	cmp.w	r8, #0
 801e118:	d004      	beq.n	801e124 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x9c>
 801e11a:	f82a 8013 	strh.w	r8, [sl, r3, lsl #1]
 801e11e:	682b      	ldr	r3, [r5, #0]
 801e120:	3301      	adds	r3, #1
 801e122:	602b      	str	r3, [r5, #0]
 801e124:	2730      	movs	r7, #48	@ 0x30
 801e126:	2c00      	cmp	r4, #0
 801e128:	d04e      	beq.n	801e1c8 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x140>
 801e12a:	682e      	ldr	r6, [r5, #0]
 801e12c:	3c01      	subs	r4, #1
 801e12e:	42b2      	cmp	r2, r6
 801e130:	b2a4      	uxth	r4, r4
 801e132:	dd49      	ble.n	801e1c8 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x140>
 801e134:	f82a 7016 	strh.w	r7, [sl, r6, lsl #1]
 801e138:	682b      	ldr	r3, [r5, #0]
 801e13a:	3301      	adds	r3, #1
 801e13c:	602b      	str	r3, [r5, #0]
 801e13e:	e7f2      	b.n	801e126 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x9e>
 801e140:	f1b9 0f73 	cmp.w	r9, #115	@ 0x73
 801e144:	d01d      	beq.n	801e182 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0xfa>
 801e146:	f1b9 0f78 	cmp.w	r9, #120	@ 0x78
 801e14a:	d002      	beq.n	801e152 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0xca>
 801e14c:	f1b9 0f6f 	cmp.w	r9, #111	@ 0x6f
 801e150:	e7c9      	b.n	801e0e6 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x5e>
 801e152:	4684      	mov	ip, r0
 801e154:	f04f 0800 	mov.w	r8, #0
 801e158:	2c00      	cmp	r4, #0
 801e15a:	d0c6      	beq.n	801e0ea <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x62>
 801e15c:	b947      	cbnz	r7, 801e170 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0xe8>
 801e15e:	2801      	cmp	r0, #1
 801e160:	d106      	bne.n	801e170 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0xe8>
 801e162:	8814      	ldrh	r4, [r2, #0]
 801e164:	2c30      	cmp	r4, #48	@ 0x30
 801e166:	bf02      	ittt	eq
 801e168:	3202      	addeq	r2, #2
 801e16a:	4638      	moveq	r0, r7
 801e16c:	f8cb 2000 	streq.w	r2, [fp]
 801e170:	45bc      	cmp	ip, r7
 801e172:	da14      	bge.n	801e19e <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x116>
 801e174:	b2bf      	uxth	r7, r7
 801e176:	eba7 040c 	sub.w	r4, r7, ip
 801e17a:	46bc      	mov	ip, r7
 801e17c:	b2a4      	uxth	r4, r4
 801e17e:	2600      	movs	r6, #0
 801e180:	e7b3      	b.n	801e0ea <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x62>
 801e182:	4684      	mov	ip, r0
 801e184:	b16c      	cbz	r4, 801e1a2 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x11a>
 801e186:	42b8      	cmp	r0, r7
 801e188:	dd00      	ble.n	801e18c <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x104>
 801e18a:	b2b8      	uxth	r0, r7
 801e18c:	2400      	movs	r4, #0
 801e18e:	e003      	b.n	801e198 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x110>
 801e190:	f04f 0c01 	mov.w	ip, #1
 801e194:	2400      	movs	r4, #0
 801e196:	4660      	mov	r0, ip
 801e198:	4626      	mov	r6, r4
 801e19a:	46a0      	mov	r8, r4
 801e19c:	e7a5      	b.n	801e0ea <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x62>
 801e19e:	2400      	movs	r4, #0
 801e1a0:	e7ed      	b.n	801e17e <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0xf6>
 801e1a2:	4626      	mov	r6, r4
 801e1a4:	46a0      	mov	r8, r4
 801e1a6:	e7a0      	b.n	801e0ea <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x62>
 801e1a8:	2900      	cmp	r1, #0
 801e1aa:	d0b0      	beq.n	801e10e <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x86>
 801e1ac:	2720      	movs	r7, #32
 801e1ae:	682e      	ldr	r6, [r5, #0]
 801e1b0:	2900      	cmp	r1, #0
 801e1b2:	d0ac      	beq.n	801e10e <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x86>
 801e1b4:	3901      	subs	r1, #1
 801e1b6:	4296      	cmp	r6, r2
 801e1b8:	b289      	uxth	r1, r1
 801e1ba:	daa7      	bge.n	801e10c <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x84>
 801e1bc:	f82a 7016 	strh.w	r7, [sl, r6, lsl #1]
 801e1c0:	682b      	ldr	r3, [r5, #0]
 801e1c2:	3301      	adds	r3, #1
 801e1c4:	602b      	str	r3, [r5, #0]
 801e1c6:	e7f2      	b.n	801e1ae <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x126>
 801e1c8:	b188      	cbz	r0, 801e1ee <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x166>
 801e1ca:	682b      	ldr	r3, [r5, #0]
 801e1cc:	3801      	subs	r0, #1
 801e1ce:	429a      	cmp	r2, r3
 801e1d0:	b280      	uxth	r0, r0
 801e1d2:	dd0c      	ble.n	801e1ee <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x166>
 801e1d4:	f8db 3000 	ldr.w	r3, [fp]
 801e1d8:	1c9c      	adds	r4, r3, #2
 801e1da:	f8cb 4000 	str.w	r4, [fp]
 801e1de:	881c      	ldrh	r4, [r3, #0]
 801e1e0:	682b      	ldr	r3, [r5, #0]
 801e1e2:	f82a 4013 	strh.w	r4, [sl, r3, lsl #1]
 801e1e6:	682b      	ldr	r3, [r5, #0]
 801e1e8:	3301      	adds	r3, #1
 801e1ea:	602b      	str	r3, [r5, #0]
 801e1ec:	e7ec      	b.n	801e1c8 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x140>
 801e1ee:	2620      	movs	r6, #32
 801e1f0:	b151      	cbz	r1, 801e208 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x180>
 801e1f2:	6828      	ldr	r0, [r5, #0]
 801e1f4:	3901      	subs	r1, #1
 801e1f6:	4282      	cmp	r2, r0
 801e1f8:	b289      	uxth	r1, r1
 801e1fa:	dd05      	ble.n	801e208 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x180>
 801e1fc:	f82a 6010 	strh.w	r6, [sl, r0, lsl #1]
 801e200:	682b      	ldr	r3, [r5, #0]
 801e202:	3301      	adds	r3, #1
 801e204:	602b      	str	r3, [r5, #0]
 801e206:	e7f3      	b.n	801e1f0 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x168>
 801e208:	b005      	add	sp, #20
 801e20a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0801e20e <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_>:
 801e20e:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 801e212:	2400      	movs	r4, #0
 801e214:	e9dd 8c07 	ldrd	r8, ip, [sp, #28]
 801e218:	e9dd e609 	ldrd	lr, r6, [sp, #36]	@ 0x24
 801e21c:	e9dd 750b 	ldrd	r7, r5, [sp, #44]	@ 0x2c
 801e220:	8014      	strh	r4, [r2, #0]
 801e222:	701c      	strb	r4, [r3, #0]
 801e224:	f888 4000 	strb.w	r4, [r8]
 801e228:	f88c 4000 	strb.w	r4, [ip]
 801e22c:	f88e 4000 	strb.w	r4, [lr]
 801e230:	703c      	strb	r4, [r7, #0]
 801e232:	6804      	ldr	r4, [r0, #0]
 801e234:	b1a4      	cbz	r4, 801e260 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x52>
 801e236:	8824      	ldrh	r4, [r4, #0]
 801e238:	f04f 0901 	mov.w	r9, #1
 801e23c:	b314      	cbz	r4, 801e284 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x76>
 801e23e:	2c2b      	cmp	r4, #43	@ 0x2b
 801e240:	d001      	beq.n	801e246 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x38>
 801e242:	2c20      	cmp	r4, #32
 801e244:	d110      	bne.n	801e268 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x5a>
 801e246:	8014      	strh	r4, [r2, #0]
 801e248:	6804      	ldr	r4, [r0, #0]
 801e24a:	b10c      	cbz	r4, 801e250 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x42>
 801e24c:	3402      	adds	r4, #2
 801e24e:	6004      	str	r4, [r0, #0]
 801e250:	680c      	ldr	r4, [r1, #0]
 801e252:	b10c      	cbz	r4, 801e258 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x4a>
 801e254:	3401      	adds	r4, #1
 801e256:	600c      	str	r4, [r1, #0]
 801e258:	6804      	ldr	r4, [r0, #0]
 801e25a:	b17c      	cbz	r4, 801e27c <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x6e>
 801e25c:	8824      	ldrh	r4, [r4, #0]
 801e25e:	e7ed      	b.n	801e23c <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x2e>
 801e260:	680c      	ldr	r4, [r1, #0]
 801e262:	b17c      	cbz	r4, 801e284 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x76>
 801e264:	7824      	ldrb	r4, [r4, #0]
 801e266:	e7e7      	b.n	801e238 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x2a>
 801e268:	2c2d      	cmp	r4, #45	@ 0x2d
 801e26a:	d102      	bne.n	801e272 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x64>
 801e26c:	f883 9000 	strb.w	r9, [r3]
 801e270:	e7ea      	b.n	801e248 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x3a>
 801e272:	2c23      	cmp	r4, #35	@ 0x23
 801e274:	d107      	bne.n	801e286 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x78>
 801e276:	f888 9000 	strb.w	r9, [r8]
 801e27a:	e7e5      	b.n	801e248 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x3a>
 801e27c:	680c      	ldr	r4, [r1, #0]
 801e27e:	b10c      	cbz	r4, 801e284 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x76>
 801e280:	7824      	ldrb	r4, [r4, #0]
 801e282:	e7db      	b.n	801e23c <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x2e>
 801e284:	2400      	movs	r4, #0
 801e286:	f1a4 0330 	sub.w	r3, r4, #48	@ 0x30
 801e28a:	2b09      	cmp	r3, #9
 801e28c:	d901      	bls.n	801e292 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x84>
 801e28e:	2c2a      	cmp	r4, #42	@ 0x2a
 801e290:	d122      	bne.n	801e2d8 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0xca>
 801e292:	2301      	movs	r3, #1
 801e294:	2c30      	cmp	r4, #48	@ 0x30
 801e296:	f88e 3000 	strb.w	r3, [lr]
 801e29a:	d10d      	bne.n	801e2b8 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0xaa>
 801e29c:	f88c 3000 	strb.w	r3, [ip]
 801e2a0:	6803      	ldr	r3, [r0, #0]
 801e2a2:	b10b      	cbz	r3, 801e2a8 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x9a>
 801e2a4:	3302      	adds	r3, #2
 801e2a6:	6003      	str	r3, [r0, #0]
 801e2a8:	680b      	ldr	r3, [r1, #0]
 801e2aa:	b10b      	cbz	r3, 801e2b0 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0xa2>
 801e2ac:	3301      	adds	r3, #1
 801e2ae:	600b      	str	r3, [r1, #0]
 801e2b0:	6803      	ldr	r3, [r0, #0]
 801e2b2:	2b00      	cmp	r3, #0
 801e2b4:	d02f      	beq.n	801e316 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x108>
 801e2b6:	881c      	ldrh	r4, [r3, #0]
 801e2b8:	2c2a      	cmp	r4, #42	@ 0x2a
 801e2ba:	d135      	bne.n	801e328 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x11a>
 801e2bc:	f04f 33ff 	mov.w	r3, #4294967295
 801e2c0:	6033      	str	r3, [r6, #0]
 801e2c2:	6803      	ldr	r3, [r0, #0]
 801e2c4:	b10b      	cbz	r3, 801e2ca <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0xbc>
 801e2c6:	3302      	adds	r3, #2
 801e2c8:	6003      	str	r3, [r0, #0]
 801e2ca:	680b      	ldr	r3, [r1, #0]
 801e2cc:	b10b      	cbz	r3, 801e2d2 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0xc4>
 801e2ce:	3301      	adds	r3, #1
 801e2d0:	600b      	str	r3, [r1, #0]
 801e2d2:	6803      	ldr	r3, [r0, #0]
 801e2d4:	b31b      	cbz	r3, 801e31e <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x110>
 801e2d6:	881c      	ldrh	r4, [r3, #0]
 801e2d8:	2c2e      	cmp	r4, #46	@ 0x2e
 801e2da:	d11a      	bne.n	801e312 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x104>
 801e2dc:	2301      	movs	r3, #1
 801e2de:	703b      	strb	r3, [r7, #0]
 801e2e0:	6803      	ldr	r3, [r0, #0]
 801e2e2:	b10b      	cbz	r3, 801e2e8 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0xda>
 801e2e4:	3302      	adds	r3, #2
 801e2e6:	6003      	str	r3, [r0, #0]
 801e2e8:	680b      	ldr	r3, [r1, #0]
 801e2ea:	b10b      	cbz	r3, 801e2f0 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0xe2>
 801e2ec:	3301      	adds	r3, #1
 801e2ee:	600b      	str	r3, [r1, #0]
 801e2f0:	6803      	ldr	r3, [r0, #0]
 801e2f2:	2b00      	cmp	r3, #0
 801e2f4:	d036      	beq.n	801e364 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x156>
 801e2f6:	881b      	ldrh	r3, [r3, #0]
 801e2f8:	2b2a      	cmp	r3, #42	@ 0x2a
 801e2fa:	d137      	bne.n	801e36c <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x15e>
 801e2fc:	f04f 33ff 	mov.w	r3, #4294967295
 801e300:	602b      	str	r3, [r5, #0]
 801e302:	6803      	ldr	r3, [r0, #0]
 801e304:	b10b      	cbz	r3, 801e30a <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0xfc>
 801e306:	3302      	adds	r3, #2
 801e308:	6003      	str	r3, [r0, #0]
 801e30a:	680b      	ldr	r3, [r1, #0]
 801e30c:	b10b      	cbz	r3, 801e312 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x104>
 801e30e:	3301      	adds	r3, #1
 801e310:	600b      	str	r3, [r1, #0]
 801e312:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801e316:	680c      	ldr	r4, [r1, #0]
 801e318:	b134      	cbz	r4, 801e328 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x11a>
 801e31a:	7824      	ldrb	r4, [r4, #0]
 801e31c:	e7cc      	b.n	801e2b8 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0xaa>
 801e31e:	680b      	ldr	r3, [r1, #0]
 801e320:	2b00      	cmp	r3, #0
 801e322:	d0f6      	beq.n	801e312 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x104>
 801e324:	781c      	ldrb	r4, [r3, #0]
 801e326:	e7d7      	b.n	801e2d8 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0xca>
 801e328:	2300      	movs	r3, #0
 801e32a:	220a      	movs	r2, #10
 801e32c:	6033      	str	r3, [r6, #0]
 801e32e:	f1a4 0c30 	sub.w	ip, r4, #48	@ 0x30
 801e332:	fa1f f38c 	uxth.w	r3, ip
 801e336:	2b09      	cmp	r3, #9
 801e338:	d8ce      	bhi.n	801e2d8 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0xca>
 801e33a:	6833      	ldr	r3, [r6, #0]
 801e33c:	fb02 c303 	mla	r3, r2, r3, ip
 801e340:	6033      	str	r3, [r6, #0]
 801e342:	6803      	ldr	r3, [r0, #0]
 801e344:	b10b      	cbz	r3, 801e34a <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x13c>
 801e346:	3302      	adds	r3, #2
 801e348:	6003      	str	r3, [r0, #0]
 801e34a:	680b      	ldr	r3, [r1, #0]
 801e34c:	b10b      	cbz	r3, 801e352 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x144>
 801e34e:	3301      	adds	r3, #1
 801e350:	600b      	str	r3, [r1, #0]
 801e352:	6803      	ldr	r3, [r0, #0]
 801e354:	b10b      	cbz	r3, 801e35a <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x14c>
 801e356:	881c      	ldrh	r4, [r3, #0]
 801e358:	e7e9      	b.n	801e32e <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x120>
 801e35a:	680c      	ldr	r4, [r1, #0]
 801e35c:	2c00      	cmp	r4, #0
 801e35e:	d0e6      	beq.n	801e32e <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x120>
 801e360:	7824      	ldrb	r4, [r4, #0]
 801e362:	e7e4      	b.n	801e32e <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x120>
 801e364:	680b      	ldr	r3, [r1, #0]
 801e366:	b10b      	cbz	r3, 801e36c <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x15e>
 801e368:	781b      	ldrb	r3, [r3, #0]
 801e36a:	e7c5      	b.n	801e2f8 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0xea>
 801e36c:	2200      	movs	r2, #0
 801e36e:	240a      	movs	r4, #10
 801e370:	602a      	str	r2, [r5, #0]
 801e372:	3b30      	subs	r3, #48	@ 0x30
 801e374:	682a      	ldr	r2, [r5, #0]
 801e376:	b29e      	uxth	r6, r3
 801e378:	2e09      	cmp	r6, #9
 801e37a:	d813      	bhi.n	801e3a4 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x196>
 801e37c:	fb04 3302 	mla	r3, r4, r2, r3
 801e380:	602b      	str	r3, [r5, #0]
 801e382:	6803      	ldr	r3, [r0, #0]
 801e384:	b10b      	cbz	r3, 801e38a <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x17c>
 801e386:	3302      	adds	r3, #2
 801e388:	6003      	str	r3, [r0, #0]
 801e38a:	680b      	ldr	r3, [r1, #0]
 801e38c:	b10b      	cbz	r3, 801e392 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x184>
 801e38e:	3301      	adds	r3, #1
 801e390:	600b      	str	r3, [r1, #0]
 801e392:	6803      	ldr	r3, [r0, #0]
 801e394:	b10b      	cbz	r3, 801e39a <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x18c>
 801e396:	881b      	ldrh	r3, [r3, #0]
 801e398:	e7eb      	b.n	801e372 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x164>
 801e39a:	680b      	ldr	r3, [r1, #0]
 801e39c:	2b00      	cmp	r3, #0
 801e39e:	d0e8      	beq.n	801e372 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x164>
 801e3a0:	781b      	ldrb	r3, [r3, #0]
 801e3a2:	e7e6      	b.n	801e372 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x164>
 801e3a4:	2a06      	cmp	r2, #6
 801e3a6:	bfa8      	it	ge
 801e3a8:	2206      	movge	r2, #6
 801e3aa:	602a      	str	r2, [r5, #0]
 801e3ac:	e7b1      	b.n	801e312 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x104>

0801e3ae <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list>:
 801e3ae:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801e3b2:	b0a3      	sub	sp, #140	@ 0x8c
 801e3b4:	2600      	movs	r6, #0
 801e3b6:	4607      	mov	r7, r0
 801e3b8:	4688      	mov	r8, r1
 801e3ba:	f10d 0944 	add.w	r9, sp, #68	@ 0x44
 801e3be:	4631      	mov	r1, r6
 801e3c0:	9c2c      	ldr	r4, [sp, #176]	@ 0xb0
 801e3c2:	4648      	mov	r0, r9
 801e3c4:	960d      	str	r6, [sp, #52]	@ 0x34
 801e3c6:	e9cd 3208 	strd	r3, r2, [sp, #32]
 801e3ca:	2242      	movs	r2, #66	@ 0x42
 801e3cc:	f00c fcb9 	bl	802ad42 <memset>
 801e3d0:	b15f      	cbz	r7, 801e3ea <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x3c>
 801e3d2:	f108 3aff 	add.w	sl, r8, #4294967295
 801e3d6:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 801e3d8:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 801e3da:	b152      	cbz	r2, 801e3f2 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x44>
 801e3dc:	8812      	ldrh	r2, [r2, #0]
 801e3de:	b10a      	cbz	r2, 801e3e4 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x36>
 801e3e0:	459a      	cmp	sl, r3
 801e3e2:	dc2e      	bgt.n	801e442 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x94>
 801e3e4:	2200      	movs	r2, #0
 801e3e6:	f827 2013 	strh.w	r2, [r7, r3, lsl #1]
 801e3ea:	4638      	mov	r0, r7
 801e3ec:	b023      	add	sp, #140	@ 0x8c
 801e3ee:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801e3f2:	9a08      	ldr	r2, [sp, #32]
 801e3f4:	2a00      	cmp	r2, #0
 801e3f6:	d0f5      	beq.n	801e3e4 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x36>
 801e3f8:	7812      	ldrb	r2, [r2, #0]
 801e3fa:	e7f0      	b.n	801e3de <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x30>
 801e3fc:	2d00      	cmp	r5, #0
 801e3fe:	d0ea      	beq.n	801e3d6 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x28>
 801e400:	782a      	ldrb	r2, [r5, #0]
 801e402:	b142      	cbz	r2, 801e416 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x68>
 801e404:	2a25      	cmp	r2, #37	@ 0x25
 801e406:	d001      	beq.n	801e40c <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x5e>
 801e408:	459a      	cmp	sl, r3
 801e40a:	dc08      	bgt.n	801e41e <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x70>
 801e40c:	f1bb 0f00 	cmp.w	fp, #0
 801e410:	d121      	bne.n	801e456 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0xa8>
 801e412:	2d00      	cmp	r5, #0
 801e414:	d0df      	beq.n	801e3d6 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x28>
 801e416:	782a      	ldrb	r2, [r5, #0]
 801e418:	f04f 0b00 	mov.w	fp, #0
 801e41c:	e01d      	b.n	801e45a <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0xac>
 801e41e:	f1bb 0f00 	cmp.w	fp, #0
 801e422:	d077      	beq.n	801e514 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x166>
 801e424:	f8bb 2000 	ldrh.w	r2, [fp]
 801e428:	f827 2013 	strh.w	r2, [r7, r3, lsl #1]
 801e42c:	f1bb 0f00 	cmp.w	fp, #0
 801e430:	d002      	beq.n	801e438 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x8a>
 801e432:	f10b 0202 	add.w	r2, fp, #2
 801e436:	9209      	str	r2, [sp, #36]	@ 0x24
 801e438:	b10d      	cbz	r5, 801e43e <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x90>
 801e43a:	3501      	adds	r5, #1
 801e43c:	9508      	str	r5, [sp, #32]
 801e43e:	3301      	adds	r3, #1
 801e440:	930d      	str	r3, [sp, #52]	@ 0x34
 801e442:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 801e444:	e9dd 5b08 	ldrd	r5, fp, [sp, #32]
 801e448:	f1bb 0f00 	cmp.w	fp, #0
 801e44c:	d0d6      	beq.n	801e3fc <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x4e>
 801e44e:	f8bb 2000 	ldrh.w	r2, [fp]
 801e452:	2a00      	cmp	r2, #0
 801e454:	d1d6      	bne.n	801e404 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x56>
 801e456:	f8bb 2000 	ldrh.w	r2, [fp]
 801e45a:	2a00      	cmp	r2, #0
 801e45c:	d0bb      	beq.n	801e3d6 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x28>
 801e45e:	459a      	cmp	sl, r3
 801e460:	ddb9      	ble.n	801e3d6 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x28>
 801e462:	f8ad 6032 	strh.w	r6, [sp, #50]	@ 0x32
 801e466:	f88d 602d 	strb.w	r6, [sp, #45]	@ 0x2d
 801e46a:	f88d 602e 	strb.w	r6, [sp, #46]	@ 0x2e
 801e46e:	f88d 602f 	strb.w	r6, [sp, #47]	@ 0x2f
 801e472:	f88d 6030 	strb.w	r6, [sp, #48]	@ 0x30
 801e476:	960e      	str	r6, [sp, #56]	@ 0x38
 801e478:	f88d 6031 	strb.w	r6, [sp, #49]	@ 0x31
 801e47c:	960f      	str	r6, [sp, #60]	@ 0x3c
 801e47e:	f1bb 0f00 	cmp.w	fp, #0
 801e482:	d002      	beq.n	801e48a <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0xdc>
 801e484:	f10b 0302 	add.w	r3, fp, #2
 801e488:	9309      	str	r3, [sp, #36]	@ 0x24
 801e48a:	b10d      	cbz	r5, 801e490 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0xe2>
 801e48c:	1c6b      	adds	r3, r5, #1
 801e48e:	9308      	str	r3, [sp, #32]
 801e490:	ab0f      	add	r3, sp, #60	@ 0x3c
 801e492:	f10d 0232 	add.w	r2, sp, #50	@ 0x32
 801e496:	a908      	add	r1, sp, #32
 801e498:	a809      	add	r0, sp, #36	@ 0x24
 801e49a:	9305      	str	r3, [sp, #20]
 801e49c:	f10d 0331 	add.w	r3, sp, #49	@ 0x31
 801e4a0:	9304      	str	r3, [sp, #16]
 801e4a2:	ab0e      	add	r3, sp, #56	@ 0x38
 801e4a4:	9303      	str	r3, [sp, #12]
 801e4a6:	ab0c      	add	r3, sp, #48	@ 0x30
 801e4a8:	9302      	str	r3, [sp, #8]
 801e4aa:	f10d 032f 	add.w	r3, sp, #47	@ 0x2f
 801e4ae:	9301      	str	r3, [sp, #4]
 801e4b0:	f10d 032e 	add.w	r3, sp, #46	@ 0x2e
 801e4b4:	9300      	str	r3, [sp, #0]
 801e4b6:	f10d 032d 	add.w	r3, sp, #45	@ 0x2d
 801e4ba:	f7ff fea8 	bl	801e20e <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_>
 801e4be:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 801e4c0:	2b00      	cmp	r3, #0
 801e4c2:	bfbf      	itttt	lt
 801e4c4:	6823      	ldrlt	r3, [r4, #0]
 801e4c6:	3404      	addlt	r4, #4
 801e4c8:	ea23 73e3 	biclt.w	r3, r3, r3, asr #31
 801e4cc:	930e      	strlt	r3, [sp, #56]	@ 0x38
 801e4ce:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 801e4d0:	2b00      	cmp	r3, #0
 801e4d2:	bfbe      	ittt	lt
 801e4d4:	6823      	ldrlt	r3, [r4, #0]
 801e4d6:	3404      	addlt	r4, #4
 801e4d8:	ea23 73e3 	biclt.w	r3, r3, r3, asr #31
 801e4dc:	e9dd 2108 	ldrd	r2, r1, [sp, #32]
 801e4e0:	bfb8      	it	lt
 801e4e2:	930f      	strlt	r3, [sp, #60]	@ 0x3c
 801e4e4:	b1d9      	cbz	r1, 801e51e <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x170>
 801e4e6:	880b      	ldrh	r3, [r1, #0]
 801e4e8:	2b69      	cmp	r3, #105	@ 0x69
 801e4ea:	d01f      	beq.n	801e52c <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x17e>
 801e4ec:	d82f      	bhi.n	801e54e <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x1a0>
 801e4ee:	2b58      	cmp	r3, #88	@ 0x58
 801e4f0:	d01c      	beq.n	801e52c <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x17e>
 801e4f2:	d818      	bhi.n	801e526 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x178>
 801e4f4:	2b25      	cmp	r3, #37	@ 0x25
 801e4f6:	d034      	beq.n	801e562 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x1b4>
 801e4f8:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 801e4fa:	e9cd 5b08 	strd	r5, fp, [sp, #32]
 801e4fe:	f1bb 0f00 	cmp.w	fp, #0
 801e502:	f000 80b7 	beq.w	801e674 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x2c6>
 801e506:	f8bb 5000 	ldrh.w	r5, [fp]
 801e50a:	f827 5013 	strh.w	r5, [r7, r3, lsl #1]
 801e50e:	3301      	adds	r3, #1
 801e510:	930d      	str	r3, [sp, #52]	@ 0x34
 801e512:	e029      	b.n	801e568 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x1ba>
 801e514:	b10d      	cbz	r5, 801e51a <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x16c>
 801e516:	782a      	ldrb	r2, [r5, #0]
 801e518:	e786      	b.n	801e428 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x7a>
 801e51a:	462a      	mov	r2, r5
 801e51c:	e784      	b.n	801e428 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x7a>
 801e51e:	2a00      	cmp	r2, #0
 801e520:	d0ea      	beq.n	801e4f8 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x14a>
 801e522:	7813      	ldrb	r3, [r2, #0]
 801e524:	e7e0      	b.n	801e4e8 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x13a>
 801e526:	3b63      	subs	r3, #99	@ 0x63
 801e528:	2b01      	cmp	r3, #1
 801e52a:	d8e5      	bhi.n	801e4f8 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x14a>
 801e52c:	f8cd 9040 	str.w	r9, [sp, #64]	@ 0x40
 801e530:	b329      	cbz	r1, 801e57e <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x1d0>
 801e532:	880b      	ldrh	r3, [r1, #0]
 801e534:	2b69      	cmp	r3, #105	@ 0x69
 801e536:	d063      	beq.n	801e600 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x252>
 801e538:	d825      	bhi.n	801e586 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x1d8>
 801e53a:	2b63      	cmp	r3, #99	@ 0x63
 801e53c:	d038      	beq.n	801e5b0 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x202>
 801e53e:	2b64      	cmp	r3, #100	@ 0x64
 801e540:	d05e      	beq.n	801e600 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x252>
 801e542:	2b58      	cmp	r3, #88	@ 0x58
 801e544:	d07a      	beq.n	801e63c <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x28e>
 801e546:	f8ad 6044 	strh.w	r6, [sp, #68]	@ 0x44
 801e54a:	4625      	mov	r5, r4
 801e54c:	e036      	b.n	801e5bc <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x20e>
 801e54e:	2b73      	cmp	r3, #115	@ 0x73
 801e550:	d0ec      	beq.n	801e52c <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x17e>
 801e552:	d802      	bhi.n	801e55a <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x1ac>
 801e554:	2b6f      	cmp	r3, #111	@ 0x6f
 801e556:	d1cf      	bne.n	801e4f8 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x14a>
 801e558:	e7e8      	b.n	801e52c <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x17e>
 801e55a:	2b75      	cmp	r3, #117	@ 0x75
 801e55c:	d0e6      	beq.n	801e52c <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x17e>
 801e55e:	2b78      	cmp	r3, #120	@ 0x78
 801e560:	e7f9      	b.n	801e556 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x1a8>
 801e562:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 801e564:	f827 3012 	strh.w	r3, [r7, r2, lsl #1]
 801e568:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801e56a:	b10b      	cbz	r3, 801e570 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x1c2>
 801e56c:	3302      	adds	r3, #2
 801e56e:	9309      	str	r3, [sp, #36]	@ 0x24
 801e570:	9b08      	ldr	r3, [sp, #32]
 801e572:	2b00      	cmp	r3, #0
 801e574:	f43f af2f 	beq.w	801e3d6 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x28>
 801e578:	3301      	adds	r3, #1
 801e57a:	9308      	str	r3, [sp, #32]
 801e57c:	e72b      	b.n	801e3d6 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x28>
 801e57e:	2a00      	cmp	r2, #0
 801e580:	d0e1      	beq.n	801e546 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x198>
 801e582:	7813      	ldrb	r3, [r2, #0]
 801e584:	e7d6      	b.n	801e534 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x186>
 801e586:	2b73      	cmp	r3, #115	@ 0x73
 801e588:	d036      	beq.n	801e5f8 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x24a>
 801e58a:	d807      	bhi.n	801e59c <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x1ee>
 801e58c:	2b6f      	cmp	r3, #111	@ 0x6f
 801e58e:	d1da      	bne.n	801e546 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x198>
 801e590:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 801e592:	1d25      	adds	r5, r4, #4
 801e594:	2308      	movs	r3, #8
 801e596:	eba8 0202 	sub.w	r2, r8, r2
 801e59a:	e049      	b.n	801e630 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x282>
 801e59c:	2b75      	cmp	r3, #117	@ 0x75
 801e59e:	d042      	beq.n	801e626 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x278>
 801e5a0:	2b78      	cmp	r3, #120	@ 0x78
 801e5a2:	d1d0      	bne.n	801e546 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x198>
 801e5a4:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 801e5a6:	1d25      	adds	r5, r4, #4
 801e5a8:	2310      	movs	r3, #16
 801e5aa:	eba8 0202 	sub.w	r2, r8, r2
 801e5ae:	e03f      	b.n	801e630 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x282>
 801e5b0:	7823      	ldrb	r3, [r4, #0]
 801e5b2:	1d25      	adds	r5, r4, #4
 801e5b4:	f8ad 6046 	strh.w	r6, [sp, #70]	@ 0x46
 801e5b8:	f8ad 3044 	strh.w	r3, [sp, #68]	@ 0x44
 801e5bc:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801e5be:	f8bd 1032 	ldrh.w	r1, [sp, #50]	@ 0x32
 801e5c2:	2b00      	cmp	r3, #0
 801e5c4:	d051      	beq.n	801e66a <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x2bc>
 801e5c6:	881a      	ldrh	r2, [r3, #0]
 801e5c8:	a80d      	add	r0, sp, #52	@ 0x34
 801e5ca:	f89d 3031 	ldrb.w	r3, [sp, #49]	@ 0x31
 801e5ce:	462c      	mov	r4, r5
 801e5d0:	9005      	str	r0, [sp, #20]
 801e5d2:	f89d 002d 	ldrb.w	r0, [sp, #45]	@ 0x2d
 801e5d6:	9004      	str	r0, [sp, #16]
 801e5d8:	980e      	ldr	r0, [sp, #56]	@ 0x38
 801e5da:	9003      	str	r0, [sp, #12]
 801e5dc:	f89d 0030 	ldrb.w	r0, [sp, #48]	@ 0x30
 801e5e0:	9002      	str	r0, [sp, #8]
 801e5e2:	980f      	ldr	r0, [sp, #60]	@ 0x3c
 801e5e4:	9001      	str	r0, [sp, #4]
 801e5e6:	f89d 002f 	ldrb.w	r0, [sp, #47]	@ 0x2f
 801e5ea:	e9cd 8706 	strd	r8, r7, [sp, #24]
 801e5ee:	9000      	str	r0, [sp, #0]
 801e5f0:	a810      	add	r0, sp, #64	@ 0x40
 801e5f2:	f7ff fd49 	bl	801e088 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt>
 801e5f6:	e7b7      	b.n	801e568 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x1ba>
 801e5f8:	1d25      	adds	r5, r4, #4
 801e5fa:	6823      	ldr	r3, [r4, #0]
 801e5fc:	9310      	str	r3, [sp, #64]	@ 0x40
 801e5fe:	e7dd      	b.n	801e5bc <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x20e>
 801e600:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 801e602:	230a      	movs	r3, #10
 801e604:	4649      	mov	r1, r9
 801e606:	6820      	ldr	r0, [r4, #0]
 801e608:	eba8 0202 	sub.w	r2, r8, r2
 801e60c:	1d25      	adds	r5, r4, #4
 801e60e:	b292      	uxth	r2, r2
 801e610:	f7ff fd08 	bl	801e024 <_ZN8touchgfx7Unicode4itoaElPtti>
 801e614:	f8bd 3044 	ldrh.w	r3, [sp, #68]	@ 0x44
 801e618:	2b2d      	cmp	r3, #45	@ 0x2d
 801e61a:	d1cf      	bne.n	801e5bc <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x20e>
 801e61c:	f8ad 3032 	strh.w	r3, [sp, #50]	@ 0x32
 801e620:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 801e622:	3302      	adds	r3, #2
 801e624:	e7ea      	b.n	801e5fc <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x24e>
 801e626:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 801e628:	1d25      	adds	r5, r4, #4
 801e62a:	230a      	movs	r3, #10
 801e62c:	eba8 0202 	sub.w	r2, r8, r2
 801e630:	b292      	uxth	r2, r2
 801e632:	4649      	mov	r1, r9
 801e634:	6820      	ldr	r0, [r4, #0]
 801e636:	f7ff fcd7 	bl	801dfe8 <_ZN8touchgfx7Unicode4utoaEmPtti.part.2>
 801e63a:	e7bf      	b.n	801e5bc <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x20e>
 801e63c:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 801e63e:	2310      	movs	r3, #16
 801e640:	4649      	mov	r1, r9
 801e642:	6820      	ldr	r0, [r4, #0]
 801e644:	eba8 0202 	sub.w	r2, r8, r2
 801e648:	1d25      	adds	r5, r4, #4
 801e64a:	b292      	uxth	r2, r2
 801e64c:	f7ff fccc 	bl	801dfe8 <_ZN8touchgfx7Unicode4utoaEmPtti.part.2>
 801e650:	f10d 0242 	add.w	r2, sp, #66	@ 0x42
 801e654:	f832 3f02 	ldrh.w	r3, [r2, #2]!
 801e658:	2b00      	cmp	r3, #0
 801e65a:	d0af      	beq.n	801e5bc <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x20e>
 801e65c:	f1a3 0161 	sub.w	r1, r3, #97	@ 0x61
 801e660:	2919      	cmp	r1, #25
 801e662:	d8f7      	bhi.n	801e654 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x2a6>
 801e664:	3b20      	subs	r3, #32
 801e666:	8013      	strh	r3, [r2, #0]
 801e668:	e7f4      	b.n	801e654 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x2a6>
 801e66a:	9a08      	ldr	r2, [sp, #32]
 801e66c:	2a00      	cmp	r2, #0
 801e66e:	d0ab      	beq.n	801e5c8 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x21a>
 801e670:	7812      	ldrb	r2, [r2, #0]
 801e672:	e7a9      	b.n	801e5c8 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x21a>
 801e674:	2d00      	cmp	r5, #0
 801e676:	f43f af48 	beq.w	801e50a <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x15c>
 801e67a:	782d      	ldrb	r5, [r5, #0]
 801e67c:	e745      	b.n	801e50a <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x15c>

0801e67e <_ZN8touchgfx7Unicode9vsnprintfEPttPKcSt9__va_list>:
 801e67e:	b507      	push	{r0, r1, r2, lr}
 801e680:	9300      	str	r3, [sp, #0]
 801e682:	4613      	mov	r3, r2
 801e684:	2200      	movs	r2, #0
 801e686:	f7ff fe92 	bl	801e3ae <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list>
 801e68a:	b003      	add	sp, #12
 801e68c:	f85d fb04 	ldr.w	pc, [sp], #4

0801e690 <_ZN8touchgfx7Unicode8snprintfEPttPKcz>:
 801e690:	b40c      	push	{r2, r3}
 801e692:	b507      	push	{r0, r1, r2, lr}
 801e694:	ab04      	add	r3, sp, #16
 801e696:	f853 2b04 	ldr.w	r2, [r3], #4
 801e69a:	9301      	str	r3, [sp, #4]
 801e69c:	f7ff ffef 	bl	801e67e <_ZN8touchgfx7Unicode9vsnprintfEPttPKcSt9__va_list>
 801e6a0:	b003      	add	sp, #12
 801e6a2:	f85d eb04 	ldr.w	lr, [sp], #4
 801e6a6:	b002      	add	sp, #8
 801e6a8:	4770      	bx	lr
	...

0801e6ac <_ZN8touchgfx11FontManager15setFontProviderEPNS_12FontProviderE>:
 801e6ac:	4b01      	ldr	r3, [pc, #4]	@ (801e6b4 <_ZN8touchgfx11FontManager15setFontProviderEPNS_12FontProviderE+0x8>)
 801e6ae:	6018      	str	r0, [r3, #0]
 801e6b0:	4770      	bx	lr
 801e6b2:	bf00      	nop
 801e6b4:	2400b8e0 	.word	0x2400b8e0

0801e6b8 <_ZN8touchgfx6Bitmap15isDynamicBitmapEt>:
 801e6b8:	4b06      	ldr	r3, [pc, #24]	@ (801e6d4 <_ZN8touchgfx6Bitmap15isDynamicBitmapEt+0x1c>)
 801e6ba:	881a      	ldrh	r2, [r3, #0]
 801e6bc:	4282      	cmp	r2, r0
 801e6be:	d807      	bhi.n	801e6d0 <_ZN8touchgfx6Bitmap15isDynamicBitmapEt+0x18>
 801e6c0:	4b05      	ldr	r3, [pc, #20]	@ (801e6d8 <_ZN8touchgfx6Bitmap15isDynamicBitmapEt+0x20>)
 801e6c2:	881b      	ldrh	r3, [r3, #0]
 801e6c4:	4413      	add	r3, r2
 801e6c6:	4298      	cmp	r0, r3
 801e6c8:	bfac      	ite	ge
 801e6ca:	2000      	movge	r0, #0
 801e6cc:	2001      	movlt	r0, #1
 801e6ce:	4770      	bx	lr
 801e6d0:	2000      	movs	r0, #0
 801e6d2:	4770      	bx	lr
 801e6d4:	2400b900 	.word	0x2400b900
 801e6d8:	2400b904 	.word	0x2400b904

0801e6dc <_ZN8touchgfx6Bitmap23dynamicBitmapGetAddressEt>:
 801e6dc:	b508      	push	{r3, lr}
 801e6de:	4601      	mov	r1, r0
 801e6e0:	f7ff ffea 	bl	801e6b8 <_ZN8touchgfx6Bitmap15isDynamicBitmapEt>
 801e6e4:	b118      	cbz	r0, 801e6ee <_ZN8touchgfx6Bitmap23dynamicBitmapGetAddressEt+0x12>
 801e6e6:	4b02      	ldr	r3, [pc, #8]	@ (801e6f0 <_ZN8touchgfx6Bitmap23dynamicBitmapGetAddressEt+0x14>)
 801e6e8:	681b      	ldr	r3, [r3, #0]
 801e6ea:	f853 0021 	ldr.w	r0, [r3, r1, lsl #2]
 801e6ee:	bd08      	pop	{r3, pc}
 801e6f0:	2400b8e4 	.word	0x2400b8e4

0801e6f4 <_ZN8touchgfx6Bitmap10clearCacheEv>:
 801e6f4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801e6f8:	4d28      	ldr	r5, [pc, #160]	@ (801e79c <_ZN8touchgfx6Bitmap10clearCacheEv+0xa8>)
 801e6fa:	682b      	ldr	r3, [r5, #0]
 801e6fc:	2b00      	cmp	r3, #0
 801e6fe:	d04a      	beq.n	801e796 <_ZN8touchgfx6Bitmap10clearCacheEv+0xa2>
 801e700:	4a27      	ldr	r2, [pc, #156]	@ (801e7a0 <_ZN8touchgfx6Bitmap10clearCacheEv+0xac>)
 801e702:	4e28      	ldr	r6, [pc, #160]	@ (801e7a4 <_ZN8touchgfx6Bitmap10clearCacheEv+0xb0>)
 801e704:	8810      	ldrh	r0, [r2, #0]
 801e706:	f8b6 8000 	ldrh.w	r8, [r6]
 801e70a:	4c27      	ldr	r4, [pc, #156]	@ (801e7a8 <_ZN8touchgfx6Bitmap10clearCacheEv+0xb4>)
 801e70c:	4440      	add	r0, r8
 801e70e:	4f27      	ldr	r7, [pc, #156]	@ (801e7ac <_ZN8touchgfx6Bitmap10clearCacheEv+0xb8>)
 801e710:	1c41      	adds	r1, r0, #1
 801e712:	ea4f 0e80 	mov.w	lr, r0, lsl #2
 801e716:	f021 0101 	bic.w	r1, r1, #1
 801e71a:	eb03 020e 	add.w	r2, r3, lr
 801e71e:	0409      	lsls	r1, r1, #16
 801e720:	6022      	str	r2, [r4, #0]
 801e722:	0c09      	lsrs	r1, r1, #16
 801e724:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 801e728:	eb0e 010c 	add.w	r1, lr, ip
 801e72c:	185a      	adds	r2, r3, r1
 801e72e:	603a      	str	r2, [r7, #0]
 801e730:	220e      	movs	r2, #14
 801e732:	fb02 f208 	mul.w	r2, r2, r8
 801e736:	3203      	adds	r2, #3
 801e738:	f022 0203 	bic.w	r2, r2, #3
 801e73c:	4411      	add	r1, r2
 801e73e:	440b      	add	r3, r1
 801e740:	491b      	ldr	r1, [pc, #108]	@ (801e7b0 <_ZN8touchgfx6Bitmap10clearCacheEv+0xbc>)
 801e742:	600b      	str	r3, [r1, #0]
 801e744:	2300      	movs	r3, #0
 801e746:	491b      	ldr	r1, [pc, #108]	@ (801e7b4 <_ZN8touchgfx6Bitmap10clearCacheEv+0xc0>)
 801e748:	800b      	strh	r3, [r1, #0]
 801e74a:	491b      	ldr	r1, [pc, #108]	@ (801e7b8 <_ZN8touchgfx6Bitmap10clearCacheEv+0xc4>)
 801e74c:	6809      	ldr	r1, [r1, #0]
 801e74e:	eba1 010e 	sub.w	r1, r1, lr
 801e752:	eba1 010c 	sub.w	r1, r1, ip
 801e756:	469c      	mov	ip, r3
 801e758:	1a8a      	subs	r2, r1, r2
 801e75a:	4918      	ldr	r1, [pc, #96]	@ (801e7bc <_ZN8touchgfx6Bitmap10clearCacheEv+0xc8>)
 801e75c:	600a      	str	r2, [r1, #0]
 801e75e:	f64f 71ff 	movw	r1, #65535	@ 0xffff
 801e762:	4a17      	ldr	r2, [pc, #92]	@ (801e7c0 <_ZN8touchgfx6Bitmap10clearCacheEv+0xcc>)
 801e764:	8013      	strh	r3, [r2, #0]
 801e766:	4283      	cmp	r3, r0
 801e768:	d10d      	bne.n	801e786 <_ZN8touchgfx6Bitmap10clearCacheEv+0x92>
 801e76a:	8835      	ldrh	r5, [r6, #0]
 801e76c:	2300      	movs	r3, #0
 801e76e:	6838      	ldr	r0, [r7, #0]
 801e770:	240e      	movs	r4, #14
 801e772:	429d      	cmp	r5, r3
 801e774:	d90f      	bls.n	801e796 <_ZN8touchgfx6Bitmap10clearCacheEv+0xa2>
 801e776:	fb04 0203 	mla	r2, r4, r3, r0
 801e77a:	3301      	adds	r3, #1
 801e77c:	7b11      	ldrb	r1, [r2, #12]
 801e77e:	f36f 1145 	bfc	r1, #5, #1
 801e782:	7311      	strb	r1, [r2, #12]
 801e784:	e7f5      	b.n	801e772 <_ZN8touchgfx6Bitmap10clearCacheEv+0x7e>
 801e786:	682a      	ldr	r2, [r5, #0]
 801e788:	f842 c023 	str.w	ip, [r2, r3, lsl #2]
 801e78c:	6822      	ldr	r2, [r4, #0]
 801e78e:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
 801e792:	3301      	adds	r3, #1
 801e794:	e7e7      	b.n	801e766 <_ZN8touchgfx6Bitmap10clearCacheEv+0x72>
 801e796:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801e79a:	bf00      	nop
 801e79c:	2400b8e4 	.word	0x2400b8e4
 801e7a0:	2400b900 	.word	0x2400b900
 801e7a4:	2400b904 	.word	0x2400b904
 801e7a8:	2400b8f8 	.word	0x2400b8f8
 801e7ac:	2400b8e8 	.word	0x2400b8e8
 801e7b0:	2400b8f0 	.word	0x2400b8f0
 801e7b4:	2400b902 	.word	0x2400b902
 801e7b8:	2400b8ec 	.word	0x2400b8ec
 801e7bc:	2400b8fc 	.word	0x2400b8fc
 801e7c0:	2400b8f4 	.word	0x2400b8f4

0801e7c4 <_ZN8touchgfx6Bitmap8setCacheEPtmm>:
 801e7c4:	4b10      	ldr	r3, [pc, #64]	@ (801e808 <_ZN8touchgfx6Bitmap8setCacheEPtmm+0x44>)
 801e7c6:	b510      	push	{r4, lr}
 801e7c8:	681b      	ldr	r3, [r3, #0]
 801e7ca:	b9db      	cbnz	r3, 801e804 <_ZN8touchgfx6Bitmap8setCacheEPtmm+0x40>
 801e7cc:	b1d1      	cbz	r1, 801e804 <_ZN8touchgfx6Bitmap8setCacheEPtmm+0x40>
 801e7ce:	4b0f      	ldr	r3, [pc, #60]	@ (801e80c <_ZN8touchgfx6Bitmap8setCacheEPtmm+0x48>)
 801e7d0:	240e      	movs	r4, #14
 801e7d2:	801a      	strh	r2, [r3, #0]
 801e7d4:	b292      	uxth	r2, r2
 801e7d6:	4b0e      	ldr	r3, [pc, #56]	@ (801e810 <_ZN8touchgfx6Bitmap8setCacheEPtmm+0x4c>)
 801e7d8:	881b      	ldrh	r3, [r3, #0]
 801e7da:	4413      	add	r3, r2
 801e7dc:	4362      	muls	r2, r4
 801e7de:	2406      	movs	r4, #6
 801e7e0:	fb04 2203 	mla	r2, r4, r3, r2
 801e7e4:	428a      	cmp	r2, r1
 801e7e6:	d305      	bcc.n	801e7f4 <_ZN8touchgfx6Bitmap8setCacheEPtmm+0x30>
 801e7e8:	4b0a      	ldr	r3, [pc, #40]	@ (801e814 <_ZN8touchgfx6Bitmap8setCacheEPtmm+0x50>)
 801e7ea:	2135      	movs	r1, #53	@ 0x35
 801e7ec:	4a0a      	ldr	r2, [pc, #40]	@ (801e818 <_ZN8touchgfx6Bitmap8setCacheEPtmm+0x54>)
 801e7ee:	480b      	ldr	r0, [pc, #44]	@ (801e81c <_ZN8touchgfx6Bitmap8setCacheEPtmm+0x58>)
 801e7f0:	f00c f8a0 	bl	802a934 <__assert_func>
 801e7f4:	4b0a      	ldr	r3, [pc, #40]	@ (801e820 <_ZN8touchgfx6Bitmap8setCacheEPtmm+0x5c>)
 801e7f6:	6019      	str	r1, [r3, #0]
 801e7f8:	4b0a      	ldr	r3, [pc, #40]	@ (801e824 <_ZN8touchgfx6Bitmap8setCacheEPtmm+0x60>)
 801e7fa:	6018      	str	r0, [r3, #0]
 801e7fc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801e800:	f7ff bf78 	b.w	801e6f4 <_ZN8touchgfx6Bitmap10clearCacheEv>
 801e804:	bd10      	pop	{r4, pc}
 801e806:	bf00      	nop
 801e808:	2400b8f0 	.word	0x2400b8f0
 801e80c:	2400b904 	.word	0x2400b904
 801e810:	2400b900 	.word	0x2400b900
 801e814:	0802f661 	.word	0x0802f661
 801e818:	0802f6ba 	.word	0x0802f6ba
 801e81c:	0802f63c 	.word	0x0802f63c
 801e820:	2400b8ec 	.word	0x2400b8ec
 801e824:	2400b8e4 	.word	0x2400b8e4

0801e828 <_ZN8touchgfx6Bitmap22registerBitmapDatabaseEPKNS0_10BitmapDataEtPtmm>:
 801e828:	b470      	push	{r4, r5, r6}
 801e82a:	4c07      	ldr	r4, [pc, #28]	@ (801e848 <_ZN8touchgfx6Bitmap22registerBitmapDatabaseEPKNS0_10BitmapDataEtPtmm+0x20>)
 801e82c:	4605      	mov	r5, r0
 801e82e:	4610      	mov	r0, r2
 801e830:	9a03      	ldr	r2, [sp, #12]
 801e832:	6826      	ldr	r6, [r4, #0]
 801e834:	b936      	cbnz	r6, 801e844 <_ZN8touchgfx6Bitmap22registerBitmapDatabaseEPKNS0_10BitmapDataEtPtmm+0x1c>
 801e836:	6025      	str	r5, [r4, #0]
 801e838:	4c04      	ldr	r4, [pc, #16]	@ (801e84c <_ZN8touchgfx6Bitmap22registerBitmapDatabaseEPKNS0_10BitmapDataEtPtmm+0x24>)
 801e83a:	8021      	strh	r1, [r4, #0]
 801e83c:	4619      	mov	r1, r3
 801e83e:	bc70      	pop	{r4, r5, r6}
 801e840:	f7ff bfc0 	b.w	801e7c4 <_ZN8touchgfx6Bitmap8setCacheEPtmm>
 801e844:	bc70      	pop	{r4, r5, r6}
 801e846:	4770      	bx	lr
 801e848:	2400b908 	.word	0x2400b908
 801e84c:	2400b900 	.word	0x2400b900

0801e850 <_ZNK8touchgfx6Bitmap8getWidthEv>:
 801e850:	b508      	push	{r3, lr}
 801e852:	4b14      	ldr	r3, [pc, #80]	@ (801e8a4 <_ZNK8touchgfx6Bitmap8getWidthEv+0x54>)
 801e854:	6819      	ldr	r1, [r3, #0]
 801e856:	b931      	cbnz	r1, 801e866 <_ZNK8touchgfx6Bitmap8getWidthEv+0x16>
 801e858:	4b13      	ldr	r3, [pc, #76]	@ (801e8a8 <_ZNK8touchgfx6Bitmap8getWidthEv+0x58>)
 801e85a:	f240 4185 	movw	r1, #1157	@ 0x485
 801e85e:	4a13      	ldr	r2, [pc, #76]	@ (801e8ac <_ZNK8touchgfx6Bitmap8getWidthEv+0x5c>)
 801e860:	4813      	ldr	r0, [pc, #76]	@ (801e8b0 <_ZNK8touchgfx6Bitmap8getWidthEv+0x60>)
 801e862:	f00c f867 	bl	802a934 <__assert_func>
 801e866:	4a13      	ldr	r2, [pc, #76]	@ (801e8b4 <_ZNK8touchgfx6Bitmap8getWidthEv+0x64>)
 801e868:	8803      	ldrh	r3, [r0, #0]
 801e86a:	8812      	ldrh	r2, [r2, #0]
 801e86c:	4293      	cmp	r3, r2
 801e86e:	d204      	bcs.n	801e87a <_ZNK8touchgfx6Bitmap8getWidthEv+0x2a>
 801e870:	2214      	movs	r2, #20
 801e872:	fb02 1303 	mla	r3, r2, r3, r1
 801e876:	8918      	ldrh	r0, [r3, #8]
 801e878:	bd08      	pop	{r3, pc}
 801e87a:	490f      	ldr	r1, [pc, #60]	@ (801e8b8 <_ZNK8touchgfx6Bitmap8getWidthEv+0x68>)
 801e87c:	8809      	ldrh	r1, [r1, #0]
 801e87e:	4411      	add	r1, r2
 801e880:	428b      	cmp	r3, r1
 801e882:	da06      	bge.n	801e892 <_ZNK8touchgfx6Bitmap8getWidthEv+0x42>
 801e884:	1a9b      	subs	r3, r3, r2
 801e886:	4a0d      	ldr	r2, [pc, #52]	@ (801e8bc <_ZNK8touchgfx6Bitmap8getWidthEv+0x6c>)
 801e888:	210e      	movs	r1, #14
 801e88a:	6812      	ldr	r2, [r2, #0]
 801e88c:	fb01 2303 	mla	r3, r1, r3, r2
 801e890:	e7f1      	b.n	801e876 <_ZNK8touchgfx6Bitmap8getWidthEv+0x26>
 801e892:	f64f 72fe 	movw	r2, #65534	@ 0xfffe
 801e896:	4293      	cmp	r3, r2
 801e898:	bf0a      	itet	eq
 801e89a:	4b09      	ldreq	r3, [pc, #36]	@ (801e8c0 <_ZNK8touchgfx6Bitmap8getWidthEv+0x70>)
 801e89c:	2000      	movne	r0, #0
 801e89e:	8818      	ldrheq	r0, [r3, #0]
 801e8a0:	e7ea      	b.n	801e878 <_ZNK8touchgfx6Bitmap8getWidthEv+0x28>
 801e8a2:	bf00      	nop
 801e8a4:	2400b908 	.word	0x2400b908
 801e8a8:	0802e89c 	.word	0x0802e89c
 801e8ac:	0802f767 	.word	0x0802f767
 801e8b0:	0802f63c 	.word	0x0802f63c
 801e8b4:	2400b900 	.word	0x2400b900
 801e8b8:	2400b904 	.word	0x2400b904
 801e8bc:	2400b8e8 	.word	0x2400b8e8
 801e8c0:	2400b874 	.word	0x2400b874

0801e8c4 <_ZNK8touchgfx6Bitmap9getHeightEv>:
 801e8c4:	b508      	push	{r3, lr}
 801e8c6:	4b14      	ldr	r3, [pc, #80]	@ (801e918 <_ZNK8touchgfx6Bitmap9getHeightEv+0x54>)
 801e8c8:	6819      	ldr	r1, [r3, #0]
 801e8ca:	b931      	cbnz	r1, 801e8da <_ZNK8touchgfx6Bitmap9getHeightEv+0x16>
 801e8cc:	4b13      	ldr	r3, [pc, #76]	@ (801e91c <_ZNK8touchgfx6Bitmap9getHeightEv+0x58>)
 801e8ce:	f240 4199 	movw	r1, #1177	@ 0x499
 801e8d2:	4a13      	ldr	r2, [pc, #76]	@ (801e920 <_ZNK8touchgfx6Bitmap9getHeightEv+0x5c>)
 801e8d4:	4813      	ldr	r0, [pc, #76]	@ (801e924 <_ZNK8touchgfx6Bitmap9getHeightEv+0x60>)
 801e8d6:	f00c f82d 	bl	802a934 <__assert_func>
 801e8da:	4a13      	ldr	r2, [pc, #76]	@ (801e928 <_ZNK8touchgfx6Bitmap9getHeightEv+0x64>)
 801e8dc:	8803      	ldrh	r3, [r0, #0]
 801e8de:	8812      	ldrh	r2, [r2, #0]
 801e8e0:	4293      	cmp	r3, r2
 801e8e2:	d204      	bcs.n	801e8ee <_ZNK8touchgfx6Bitmap9getHeightEv+0x2a>
 801e8e4:	2214      	movs	r2, #20
 801e8e6:	fb02 1303 	mla	r3, r2, r3, r1
 801e8ea:	8958      	ldrh	r0, [r3, #10]
 801e8ec:	bd08      	pop	{r3, pc}
 801e8ee:	490f      	ldr	r1, [pc, #60]	@ (801e92c <_ZNK8touchgfx6Bitmap9getHeightEv+0x68>)
 801e8f0:	8809      	ldrh	r1, [r1, #0]
 801e8f2:	4411      	add	r1, r2
 801e8f4:	428b      	cmp	r3, r1
 801e8f6:	da06      	bge.n	801e906 <_ZNK8touchgfx6Bitmap9getHeightEv+0x42>
 801e8f8:	1a9b      	subs	r3, r3, r2
 801e8fa:	4a0d      	ldr	r2, [pc, #52]	@ (801e930 <_ZNK8touchgfx6Bitmap9getHeightEv+0x6c>)
 801e8fc:	210e      	movs	r1, #14
 801e8fe:	6812      	ldr	r2, [r2, #0]
 801e900:	fb01 2303 	mla	r3, r1, r3, r2
 801e904:	e7f1      	b.n	801e8ea <_ZNK8touchgfx6Bitmap9getHeightEv+0x26>
 801e906:	f64f 72fe 	movw	r2, #65534	@ 0xfffe
 801e90a:	4293      	cmp	r3, r2
 801e90c:	bf0a      	itet	eq
 801e90e:	4b09      	ldreq	r3, [pc, #36]	@ (801e934 <_ZNK8touchgfx6Bitmap9getHeightEv+0x70>)
 801e910:	2000      	movne	r0, #0
 801e912:	8818      	ldrheq	r0, [r3, #0]
 801e914:	e7ea      	b.n	801e8ec <_ZNK8touchgfx6Bitmap9getHeightEv+0x28>
 801e916:	bf00      	nop
 801e918:	2400b908 	.word	0x2400b908
 801e91c:	0802e89c 	.word	0x0802e89c
 801e920:	0802f793 	.word	0x0802f793
 801e924:	0802f63c 	.word	0x0802f63c
 801e928:	2400b900 	.word	0x2400b900
 801e92c:	2400b904 	.word	0x2400b904
 801e930:	2400b8e8 	.word	0x2400b8e8
 801e934:	2400b876 	.word	0x2400b876

0801e938 <_ZNK8touchgfx6Bitmap12getSolidRectEv>:
 801e938:	4b23      	ldr	r3, [pc, #140]	@ (801e9c8 <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x90>)
 801e93a:	b510      	push	{r4, lr}
 801e93c:	681c      	ldr	r4, [r3, #0]
 801e93e:	b934      	cbnz	r4, 801e94e <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x16>
 801e940:	4b22      	ldr	r3, [pc, #136]	@ (801e9cc <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x94>)
 801e942:	f240 41ad 	movw	r1, #1197	@ 0x4ad
 801e946:	4a22      	ldr	r2, [pc, #136]	@ (801e9d0 <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x98>)
 801e948:	4822      	ldr	r0, [pc, #136]	@ (801e9d4 <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x9c>)
 801e94a:	f00b fff3 	bl	802a934 <__assert_func>
 801e94e:	4a22      	ldr	r2, [pc, #136]	@ (801e9d8 <_ZNK8touchgfx6Bitmap12getSolidRectEv+0xa0>)
 801e950:	880b      	ldrh	r3, [r1, #0]
 801e952:	8812      	ldrh	r2, [r2, #0]
 801e954:	4293      	cmp	r3, r2
 801e956:	d211      	bcs.n	801e97c <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x44>
 801e958:	2214      	movs	r2, #20
 801e95a:	fb02 4303 	mla	r3, r2, r3, r4
 801e95e:	f9b3 400c 	ldrsh.w	r4, [r3, #12]
 801e962:	f9b3 100e 	ldrsh.w	r1, [r3, #14]
 801e966:	8a1a      	ldrh	r2, [r3, #16]
 801e968:	8a5b      	ldrh	r3, [r3, #18]
 801e96a:	f3c2 020c 	ubfx	r2, r2, #0, #13
 801e96e:	8004      	strh	r4, [r0, #0]
 801e970:	f3c3 030c 	ubfx	r3, r3, #0, #13
 801e974:	8041      	strh	r1, [r0, #2]
 801e976:	8082      	strh	r2, [r0, #4]
 801e978:	80c3      	strh	r3, [r0, #6]
 801e97a:	e00e      	b.n	801e99a <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x62>
 801e97c:	4917      	ldr	r1, [pc, #92]	@ (801e9dc <_ZNK8touchgfx6Bitmap12getSolidRectEv+0xa4>)
 801e97e:	8809      	ldrh	r1, [r1, #0]
 801e980:	4411      	add	r1, r2
 801e982:	428b      	cmp	r3, r1
 801e984:	da0a      	bge.n	801e99c <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x64>
 801e986:	1a9b      	subs	r3, r3, r2
 801e988:	4a15      	ldr	r2, [pc, #84]	@ (801e9e0 <_ZNK8touchgfx6Bitmap12getSolidRectEv+0xa8>)
 801e98a:	210e      	movs	r1, #14
 801e98c:	6812      	ldr	r2, [r2, #0]
 801e98e:	fb01 2303 	mla	r3, r1, r3, r2
 801e992:	681a      	ldr	r2, [r3, #0]
 801e994:	6002      	str	r2, [r0, #0]
 801e996:	685a      	ldr	r2, [r3, #4]
 801e998:	6042      	str	r2, [r0, #4]
 801e99a:	bd10      	pop	{r4, pc}
 801e99c:	f64f 72fe 	movw	r2, #65534	@ 0xfffe
 801e9a0:	4293      	cmp	r3, r2
 801e9a2:	d10b      	bne.n	801e9bc <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x84>
 801e9a4:	4b0f      	ldr	r3, [pc, #60]	@ (801e9e4 <_ZNK8touchgfx6Bitmap12getSolidRectEv+0xac>)
 801e9a6:	f9b3 1000 	ldrsh.w	r1, [r3]
 801e9aa:	4b0f      	ldr	r3, [pc, #60]	@ (801e9e8 <_ZNK8touchgfx6Bitmap12getSolidRectEv+0xb0>)
 801e9ac:	8081      	strh	r1, [r0, #4]
 801e9ae:	f9b3 2000 	ldrsh.w	r2, [r3]
 801e9b2:	2300      	movs	r3, #0
 801e9b4:	80c2      	strh	r2, [r0, #6]
 801e9b6:	8003      	strh	r3, [r0, #0]
 801e9b8:	8043      	strh	r3, [r0, #2]
 801e9ba:	e7ee      	b.n	801e99a <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x62>
 801e9bc:	2300      	movs	r3, #0
 801e9be:	8003      	strh	r3, [r0, #0]
 801e9c0:	8043      	strh	r3, [r0, #2]
 801e9c2:	8083      	strh	r3, [r0, #4]
 801e9c4:	e7d8      	b.n	801e978 <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x40>
 801e9c6:	bf00      	nop
 801e9c8:	2400b908 	.word	0x2400b908
 801e9cc:	0802e89c 	.word	0x0802e89c
 801e9d0:	0802f700 	.word	0x0802f700
 801e9d4:	0802f63c 	.word	0x0802f63c
 801e9d8:	2400b900 	.word	0x2400b900
 801e9dc:	2400b904 	.word	0x2400b904
 801e9e0:	2400b8e8 	.word	0x2400b8e8
 801e9e4:	2400b874 	.word	0x2400b874
 801e9e8:	2400b876 	.word	0x2400b876

0801e9ec <_ZNK8touchgfx6Bitmap20hasTransparentPixelsEv>:
 801e9ec:	4b18      	ldr	r3, [pc, #96]	@ (801ea50 <_ZNK8touchgfx6Bitmap20hasTransparentPixelsEv+0x64>)
 801e9ee:	681b      	ldr	r3, [r3, #0]
 801e9f0:	b34b      	cbz	r3, 801ea46 <_ZNK8touchgfx6Bitmap20hasTransparentPixelsEv+0x5a>
 801e9f2:	4a18      	ldr	r2, [pc, #96]	@ (801ea54 <_ZNK8touchgfx6Bitmap20hasTransparentPixelsEv+0x68>)
 801e9f4:	8800      	ldrh	r0, [r0, #0]
 801e9f6:	8812      	ldrh	r2, [r2, #0]
 801e9f8:	4290      	cmp	r0, r2
 801e9fa:	d211      	bcs.n	801ea20 <_ZNK8touchgfx6Bitmap20hasTransparentPixelsEv+0x34>
 801e9fc:	2214      	movs	r2, #20
 801e9fe:	fb02 3300 	mla	r3, r2, r0, r3
 801ea02:	8a1a      	ldrh	r2, [r3, #16]
 801ea04:	8919      	ldrh	r1, [r3, #8]
 801ea06:	f3c2 020c 	ubfx	r2, r2, #0, #13
 801ea0a:	428a      	cmp	r2, r1
 801ea0c:	db1d      	blt.n	801ea4a <_ZNK8touchgfx6Bitmap20hasTransparentPixelsEv+0x5e>
 801ea0e:	8a58      	ldrh	r0, [r3, #18]
 801ea10:	f3c0 000c 	ubfx	r0, r0, #0, #13
 801ea14:	895b      	ldrh	r3, [r3, #10]
 801ea16:	4298      	cmp	r0, r3
 801ea18:	bfac      	ite	ge
 801ea1a:	2000      	movge	r0, #0
 801ea1c:	2001      	movlt	r0, #1
 801ea1e:	4770      	bx	lr
 801ea20:	4b0d      	ldr	r3, [pc, #52]	@ (801ea58 <_ZNK8touchgfx6Bitmap20hasTransparentPixelsEv+0x6c>)
 801ea22:	881b      	ldrh	r3, [r3, #0]
 801ea24:	4413      	add	r3, r2
 801ea26:	4298      	cmp	r0, r3
 801ea28:	da0d      	bge.n	801ea46 <_ZNK8touchgfx6Bitmap20hasTransparentPixelsEv+0x5a>
 801ea2a:	4b0c      	ldr	r3, [pc, #48]	@ (801ea5c <_ZNK8touchgfx6Bitmap20hasTransparentPixelsEv+0x70>)
 801ea2c:	1a80      	subs	r0, r0, r2
 801ea2e:	220e      	movs	r2, #14
 801ea30:	681b      	ldr	r3, [r3, #0]
 801ea32:	fb02 3300 	mla	r3, r2, r0, r3
 801ea36:	f9b3 1004 	ldrsh.w	r1, [r3, #4]
 801ea3a:	891a      	ldrh	r2, [r3, #8]
 801ea3c:	4291      	cmp	r1, r2
 801ea3e:	db04      	blt.n	801ea4a <_ZNK8touchgfx6Bitmap20hasTransparentPixelsEv+0x5e>
 801ea40:	f9b3 0006 	ldrsh.w	r0, [r3, #6]
 801ea44:	e7e6      	b.n	801ea14 <_ZNK8touchgfx6Bitmap20hasTransparentPixelsEv+0x28>
 801ea46:	2000      	movs	r0, #0
 801ea48:	4770      	bx	lr
 801ea4a:	2001      	movs	r0, #1
 801ea4c:	4770      	bx	lr
 801ea4e:	bf00      	nop
 801ea50:	2400b908 	.word	0x2400b908
 801ea54:	2400b900 	.word	0x2400b900
 801ea58:	2400b904 	.word	0x2400b904
 801ea5c:	2400b8e8 	.word	0x2400b8e8

0801ea60 <_ZNK8touchgfx6Bitmap7getDataEv>:
 801ea60:	b508      	push	{r3, lr}
 801ea62:	4b12      	ldr	r3, [pc, #72]	@ (801eaac <_ZNK8touchgfx6Bitmap7getDataEv+0x4c>)
 801ea64:	6819      	ldr	r1, [r3, #0]
 801ea66:	b931      	cbnz	r1, 801ea76 <_ZNK8touchgfx6Bitmap7getDataEv+0x16>
 801ea68:	4b11      	ldr	r3, [pc, #68]	@ (801eab0 <_ZNK8touchgfx6Bitmap7getDataEv+0x50>)
 801ea6a:	f240 41d1 	movw	r1, #1233	@ 0x4d1
 801ea6e:	4a11      	ldr	r2, [pc, #68]	@ (801eab4 <_ZNK8touchgfx6Bitmap7getDataEv+0x54>)
 801ea70:	4811      	ldr	r0, [pc, #68]	@ (801eab8 <_ZNK8touchgfx6Bitmap7getDataEv+0x58>)
 801ea72:	f00b ff5f 	bl	802a934 <__assert_func>
 801ea76:	8803      	ldrh	r3, [r0, #0]
 801ea78:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 801ea7c:	4293      	cmp	r3, r2
 801ea7e:	d012      	beq.n	801eaa6 <_ZNK8touchgfx6Bitmap7getDataEv+0x46>
 801ea80:	f64f 72fe 	movw	r2, #65534	@ 0xfffe
 801ea84:	4293      	cmp	r3, r2
 801ea86:	d103      	bne.n	801ea90 <_ZNK8touchgfx6Bitmap7getDataEv+0x30>
 801ea88:	4b0c      	ldr	r3, [pc, #48]	@ (801eabc <_ZNK8touchgfx6Bitmap7getDataEv+0x5c>)
 801ea8a:	681b      	ldr	r3, [r3, #0]
 801ea8c:	6c58      	ldr	r0, [r3, #68]	@ 0x44
 801ea8e:	bd08      	pop	{r3, pc}
 801ea90:	4a0b      	ldr	r2, [pc, #44]	@ (801eac0 <_ZNK8touchgfx6Bitmap7getDataEv+0x60>)
 801ea92:	6812      	ldr	r2, [r2, #0]
 801ea94:	b11a      	cbz	r2, 801ea9e <_ZNK8touchgfx6Bitmap7getDataEv+0x3e>
 801ea96:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 801ea9a:	2800      	cmp	r0, #0
 801ea9c:	d1f7      	bne.n	801ea8e <_ZNK8touchgfx6Bitmap7getDataEv+0x2e>
 801ea9e:	2214      	movs	r2, #20
 801eaa0:	4353      	muls	r3, r2
 801eaa2:	58c8      	ldr	r0, [r1, r3]
 801eaa4:	e7f3      	b.n	801ea8e <_ZNK8touchgfx6Bitmap7getDataEv+0x2e>
 801eaa6:	2000      	movs	r0, #0
 801eaa8:	e7f1      	b.n	801ea8e <_ZNK8touchgfx6Bitmap7getDataEv+0x2e>
 801eaaa:	bf00      	nop
 801eaac:	2400b908 	.word	0x2400b908
 801eab0:	0802e89c 	.word	0x0802e89c
 801eab4:	0802f736 	.word	0x0802f736
 801eab8:	0802f63c 	.word	0x0802f63c
 801eabc:	2400b880 	.word	0x2400b880
 801eac0:	2400b8e4 	.word	0x2400b8e4

0801eac4 <_ZNK8touchgfx6Bitmap12getExtraDataEv>:
 801eac4:	8802      	ldrh	r2, [r0, #0]
 801eac6:	f64f 73fd 	movw	r3, #65533	@ 0xfffd
 801eaca:	429a      	cmp	r2, r3
 801eacc:	d845      	bhi.n	801eb5a <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x96>
 801eace:	4b24      	ldr	r3, [pc, #144]	@ (801eb60 <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x9c>)
 801ead0:	8818      	ldrh	r0, [r3, #0]
 801ead2:	4282      	cmp	r2, r0
 801ead4:	d221      	bcs.n	801eb1a <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x56>
 801ead6:	4b23      	ldr	r3, [pc, #140]	@ (801eb64 <_ZNK8touchgfx6Bitmap12getExtraDataEv+0xa0>)
 801ead8:	6819      	ldr	r1, [r3, #0]
 801eada:	2314      	movs	r3, #20
 801eadc:	fb03 1302 	mla	r3, r3, r2, r1
 801eae0:	6858      	ldr	r0, [r3, #4]
 801eae2:	2800      	cmp	r0, #0
 801eae4:	d03a      	beq.n	801eb5c <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x98>
 801eae6:	4920      	ldr	r1, [pc, #128]	@ (801eb68 <_ZNK8touchgfx6Bitmap12getExtraDataEv+0xa4>)
 801eae8:	6809      	ldr	r1, [r1, #0]
 801eaea:	2900      	cmp	r1, #0
 801eaec:	d036      	beq.n	801eb5c <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x98>
 801eaee:	f851 1022 	ldr.w	r1, [r1, r2, lsl #2]
 801eaf2:	2900      	cmp	r1, #0
 801eaf4:	d032      	beq.n	801eb5c <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x98>
 801eaf6:	891a      	ldrh	r2, [r3, #8]
 801eaf8:	8958      	ldrh	r0, [r3, #10]
 801eafa:	4350      	muls	r0, r2
 801eafc:	7c5a      	ldrb	r2, [r3, #17]
 801eafe:	7cdb      	ldrb	r3, [r3, #19]
 801eb00:	0952      	lsrs	r2, r2, #5
 801eb02:	f3c3 1342 	ubfx	r3, r3, #5, #3
 801eb06:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 801eb0a:	2b0b      	cmp	r3, #11
 801eb0c:	bf18      	it	ne
 801eb0e:	0040      	lslne	r0, r0, #1
 801eb10:	3003      	adds	r0, #3
 801eb12:	f020 0003 	bic.w	r0, r0, #3
 801eb16:	4408      	add	r0, r1
 801eb18:	4770      	bx	lr
 801eb1a:	4b14      	ldr	r3, [pc, #80]	@ (801eb6c <_ZNK8touchgfx6Bitmap12getExtraDataEv+0xa8>)
 801eb1c:	881b      	ldrh	r3, [r3, #0]
 801eb1e:	4403      	add	r3, r0
 801eb20:	429a      	cmp	r2, r3
 801eb22:	da1a      	bge.n	801eb5a <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x96>
 801eb24:	4b12      	ldr	r3, [pc, #72]	@ (801eb70 <_ZNK8touchgfx6Bitmap12getExtraDataEv+0xac>)
 801eb26:	1a10      	subs	r0, r2, r0
 801eb28:	210e      	movs	r1, #14
 801eb2a:	681b      	ldr	r3, [r3, #0]
 801eb2c:	fb01 3000 	mla	r0, r1, r0, r3
 801eb30:	7b03      	ldrb	r3, [r0, #12]
 801eb32:	f003 031f 	and.w	r3, r3, #31
 801eb36:	2b0b      	cmp	r3, #11
 801eb38:	d10b      	bne.n	801eb52 <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x8e>
 801eb3a:	8903      	ldrh	r3, [r0, #8]
 801eb3c:	8940      	ldrh	r0, [r0, #10]
 801eb3e:	4358      	muls	r0, r3
 801eb40:	4b09      	ldr	r3, [pc, #36]	@ (801eb68 <_ZNK8touchgfx6Bitmap12getExtraDataEv+0xa4>)
 801eb42:	3003      	adds	r0, #3
 801eb44:	6819      	ldr	r1, [r3, #0]
 801eb46:	f020 0303 	bic.w	r3, r0, #3
 801eb4a:	f851 0022 	ldr.w	r0, [r1, r2, lsl #2]
 801eb4e:	4418      	add	r0, r3
 801eb50:	4770      	bx	lr
 801eb52:	2b0d      	cmp	r3, #13
 801eb54:	d101      	bne.n	801eb5a <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x96>
 801eb56:	300d      	adds	r0, #13
 801eb58:	4770      	bx	lr
 801eb5a:	2000      	movs	r0, #0
 801eb5c:	4770      	bx	lr
 801eb5e:	bf00      	nop
 801eb60:	2400b900 	.word	0x2400b900
 801eb64:	2400b908 	.word	0x2400b908
 801eb68:	2400b8e4 	.word	0x2400b8e4
 801eb6c:	2400b904 	.word	0x2400b904
 801eb70:	2400b8e8 	.word	0x2400b8e8

0801eb74 <_ZNK8touchgfx6Bitmap9getFormatEv>:
 801eb74:	4b17      	ldr	r3, [pc, #92]	@ (801ebd4 <_ZNK8touchgfx6Bitmap9getFormatEv+0x60>)
 801eb76:	b510      	push	{r4, lr}
 801eb78:	6819      	ldr	r1, [r3, #0]
 801eb7a:	8803      	ldrh	r3, [r0, #0]
 801eb7c:	b1e9      	cbz	r1, 801ebba <_ZNK8touchgfx6Bitmap9getFormatEv+0x46>
 801eb7e:	4a16      	ldr	r2, [pc, #88]	@ (801ebd8 <_ZNK8touchgfx6Bitmap9getFormatEv+0x64>)
 801eb80:	8812      	ldrh	r2, [r2, #0]
 801eb82:	429a      	cmp	r2, r3
 801eb84:	d90a      	bls.n	801eb9c <_ZNK8touchgfx6Bitmap9getFormatEv+0x28>
 801eb86:	2214      	movs	r2, #20
 801eb88:	fb02 1303 	mla	r3, r2, r3, r1
 801eb8c:	7c58      	ldrb	r0, [r3, #17]
 801eb8e:	0942      	lsrs	r2, r0, #5
 801eb90:	7cd8      	ldrb	r0, [r3, #19]
 801eb92:	f3c0 1042 	ubfx	r0, r0, #5, #3
 801eb96:	ea40 00c2 	orr.w	r0, r0, r2, lsl #3
 801eb9a:	bd10      	pop	{r4, pc}
 801eb9c:	490f      	ldr	r1, [pc, #60]	@ (801ebdc <_ZNK8touchgfx6Bitmap9getFormatEv+0x68>)
 801eb9e:	8809      	ldrh	r1, [r1, #0]
 801eba0:	4411      	add	r1, r2
 801eba2:	428b      	cmp	r3, r1
 801eba4:	da09      	bge.n	801ebba <_ZNK8touchgfx6Bitmap9getFormatEv+0x46>
 801eba6:	1a9b      	subs	r3, r3, r2
 801eba8:	4a0d      	ldr	r2, [pc, #52]	@ (801ebe0 <_ZNK8touchgfx6Bitmap9getFormatEv+0x6c>)
 801ebaa:	210e      	movs	r1, #14
 801ebac:	6812      	ldr	r2, [r2, #0]
 801ebae:	fb01 2303 	mla	r3, r1, r3, r2
 801ebb2:	7b18      	ldrb	r0, [r3, #12]
 801ebb4:	f000 001f 	and.w	r0, r0, #31
 801ebb8:	e7ef      	b.n	801eb9a <_ZNK8touchgfx6Bitmap9getFormatEv+0x26>
 801ebba:	f64f 72fe 	movw	r2, #65534	@ 0xfffe
 801ebbe:	4293      	cmp	r3, r2
 801ebc0:	d106      	bne.n	801ebd0 <_ZNK8touchgfx6Bitmap9getFormatEv+0x5c>
 801ebc2:	f7e5 fabf 	bl	8004144 <_ZN8touchgfx3HAL3lcdEv>
 801ebc6:	6803      	ldr	r3, [r0, #0]
 801ebc8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801ebcc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801ebce:	4718      	bx	r3
 801ebd0:	2000      	movs	r0, #0
 801ebd2:	e7e2      	b.n	801eb9a <_ZNK8touchgfx6Bitmap9getFormatEv+0x26>
 801ebd4:	2400b908 	.word	0x2400b908
 801ebd8:	2400b900 	.word	0x2400b900
 801ebdc:	2400b904 	.word	0x2400b904
 801ebe0:	2400b8e8 	.word	0x2400b8e8

0801ebe4 <_ZNK8touchgfx8LCD16bpp8bitDepthEv>:
 801ebe4:	2010      	movs	r0, #16
 801ebe6:	4770      	bx	lr

0801ebe8 <_ZNK8touchgfx8LCD16bpp17framebufferFormatEv>:
 801ebe8:	2000      	movs	r0, #0
 801ebea:	4770      	bx	lr

0801ebec <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth>:
 801ebec:	2bff      	cmp	r3, #255	@ 0xff
 801ebee:	d050      	beq.n	801ec92 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0xa6>
 801ebf0:	2a0b      	cmp	r2, #11
 801ebf2:	d04a      	beq.n	801ec8a <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x9e>
 801ebf4:	d80e      	bhi.n	801ec14 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x28>
 801ebf6:	2a03      	cmp	r2, #3
 801ebf8:	d03f      	beq.n	801ec7a <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x8e>
 801ebfa:	d804      	bhi.n	801ec06 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x1a>
 801ebfc:	2a01      	cmp	r2, #1
 801ebfe:	d03e      	beq.n	801ec7e <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x92>
 801ec00:	d93f      	bls.n	801ec82 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x96>
 801ec02:	6b80      	ldr	r0, [r0, #56]	@ 0x38
 801ec04:	4770      	bx	lr
 801ec06:	2a09      	cmp	r2, #9
 801ec08:	d03f      	beq.n	801ec8a <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x9e>
 801ec0a:	d83c      	bhi.n	801ec86 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x9a>
 801ec0c:	2a08      	cmp	r2, #8
 801ec0e:	d03a      	beq.n	801ec86 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x9a>
 801ec10:	2000      	movs	r0, #0
 801ec12:	4770      	bx	lr
 801ec14:	2a2f      	cmp	r2, #47	@ 0x2f
 801ec16:	d024      	beq.n	801ec62 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x76>
 801ec18:	d80d      	bhi.n	801ec36 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x4a>
 801ec1a:	2a2d      	cmp	r2, #45	@ 0x2d
 801ec1c:	d014      	beq.n	801ec48 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x5c>
 801ec1e:	d826      	bhi.n	801ec6e <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x82>
 801ec20:	2a2c      	cmp	r2, #44	@ 0x2c
 801ec22:	d1f5      	bne.n	801ec10 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x24>
 801ec24:	684b      	ldr	r3, [r1, #4]
 801ec26:	781b      	ldrb	r3, [r3, #0]
 801ec28:	2b01      	cmp	r3, #1
 801ec2a:	d018      	beq.n	801ec5e <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x72>
 801ec2c:	d323      	bcc.n	801ec76 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x8a>
 801ec2e:	2b02      	cmp	r3, #2
 801ec30:	d1ee      	bne.n	801ec10 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x24>
 801ec32:	6880      	ldr	r0, [r0, #8]
 801ec34:	4770      	bx	lr
 801ec36:	2a31      	cmp	r2, #49	@ 0x31
 801ec38:	d004      	beq.n	801ec44 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x58>
 801ec3a:	d328      	bcc.n	801ec8e <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0xa2>
 801ec3c:	2a32      	cmp	r2, #50	@ 0x32
 801ec3e:	d026      	beq.n	801ec8e <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0xa2>
 801ec40:	2a33      	cmp	r2, #51	@ 0x33
 801ec42:	d1e5      	bne.n	801ec10 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x24>
 801ec44:	6f00      	ldr	r0, [r0, #112]	@ 0x70
 801ec46:	4770      	bx	lr
 801ec48:	684b      	ldr	r3, [r1, #4]
 801ec4a:	781b      	ldrb	r3, [r3, #0]
 801ec4c:	2b01      	cmp	r3, #1
 801ec4e:	d004      	beq.n	801ec5a <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x6e>
 801ec50:	d30b      	bcc.n	801ec6a <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x7e>
 801ec52:	2b02      	cmp	r3, #2
 801ec54:	d1dc      	bne.n	801ec10 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x24>
 801ec56:	6900      	ldr	r0, [r0, #16]
 801ec58:	4770      	bx	lr
 801ec5a:	6a00      	ldr	r0, [r0, #32]
 801ec5c:	4770      	bx	lr
 801ec5e:	6980      	ldr	r0, [r0, #24]
 801ec60:	4770      	bx	lr
 801ec62:	684b      	ldr	r3, [r1, #4]
 801ec64:	781b      	ldrb	r3, [r3, #0]
 801ec66:	2b00      	cmp	r3, #0
 801ec68:	d1d2      	bne.n	801ec10 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x24>
 801ec6a:	6b00      	ldr	r0, [r0, #48]	@ 0x30
 801ec6c:	4770      	bx	lr
 801ec6e:	684b      	ldr	r3, [r1, #4]
 801ec70:	781b      	ldrb	r3, [r3, #0]
 801ec72:	2b00      	cmp	r3, #0
 801ec74:	d1cc      	bne.n	801ec10 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x24>
 801ec76:	6a80      	ldr	r0, [r0, #40]	@ 0x28
 801ec78:	4770      	bx	lr
 801ec7a:	6c80      	ldr	r0, [r0, #72]	@ 0x48
 801ec7c:	4770      	bx	lr
 801ec7e:	6d00      	ldr	r0, [r0, #80]	@ 0x50
 801ec80:	4770      	bx	lr
 801ec82:	6c00      	ldr	r0, [r0, #64]	@ 0x40
 801ec84:	4770      	bx	lr
 801ec86:	6d80      	ldr	r0, [r0, #88]	@ 0x58
 801ec88:	4770      	bx	lr
 801ec8a:	6e00      	ldr	r0, [r0, #96]	@ 0x60
 801ec8c:	4770      	bx	lr
 801ec8e:	6e80      	ldr	r0, [r0, #104]	@ 0x68
 801ec90:	4770      	bx	lr
 801ec92:	2a0b      	cmp	r2, #11
 801ec94:	d049      	beq.n	801ed2a <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x13e>
 801ec96:	d80e      	bhi.n	801ecb6 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0xca>
 801ec98:	2a03      	cmp	r2, #3
 801ec9a:	d040      	beq.n	801ed1e <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x132>
 801ec9c:	d804      	bhi.n	801eca8 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0xbc>
 801ec9e:	2a01      	cmp	r2, #1
 801eca0:	d03f      	beq.n	801ed22 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x136>
 801eca2:	d940      	bls.n	801ed26 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x13a>
 801eca4:	6bc0      	ldr	r0, [r0, #60]	@ 0x3c
 801eca6:	4770      	bx	lr
 801eca8:	2a09      	cmp	r2, #9
 801ecaa:	d03e      	beq.n	801ed2a <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x13e>
 801ecac:	d801      	bhi.n	801ecb2 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0xc6>
 801ecae:	2a08      	cmp	r2, #8
 801ecb0:	d1ae      	bne.n	801ec10 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x24>
 801ecb2:	6dc0      	ldr	r0, [r0, #92]	@ 0x5c
 801ecb4:	4770      	bx	lr
 801ecb6:	2a2f      	cmp	r2, #47	@ 0x2f
 801ecb8:	d024      	beq.n	801ed04 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x118>
 801ecba:	d80d      	bhi.n	801ecd8 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0xec>
 801ecbc:	2a2d      	cmp	r2, #45	@ 0x2d
 801ecbe:	d014      	beq.n	801ecea <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0xfe>
 801ecc0:	d826      	bhi.n	801ed10 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x124>
 801ecc2:	2a2c      	cmp	r2, #44	@ 0x2c
 801ecc4:	d1a4      	bne.n	801ec10 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x24>
 801ecc6:	684b      	ldr	r3, [r1, #4]
 801ecc8:	781b      	ldrb	r3, [r3, #0]
 801ecca:	2b01      	cmp	r3, #1
 801eccc:	d018      	beq.n	801ed00 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x114>
 801ecce:	d324      	bcc.n	801ed1a <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x12e>
 801ecd0:	2b02      	cmp	r3, #2
 801ecd2:	d19d      	bne.n	801ec10 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x24>
 801ecd4:	68c0      	ldr	r0, [r0, #12]
 801ecd6:	4770      	bx	lr
 801ecd8:	2a31      	cmp	r2, #49	@ 0x31
 801ecda:	d004      	beq.n	801ece6 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0xfa>
 801ecdc:	d327      	bcc.n	801ed2e <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x142>
 801ecde:	2a32      	cmp	r2, #50	@ 0x32
 801ece0:	d025      	beq.n	801ed2e <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x142>
 801ece2:	2a33      	cmp	r2, #51	@ 0x33
 801ece4:	d194      	bne.n	801ec10 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x24>
 801ece6:	6f40      	ldr	r0, [r0, #116]	@ 0x74
 801ece8:	4770      	bx	lr
 801ecea:	684b      	ldr	r3, [r1, #4]
 801ecec:	781b      	ldrb	r3, [r3, #0]
 801ecee:	2b01      	cmp	r3, #1
 801ecf0:	d004      	beq.n	801ecfc <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x110>
 801ecf2:	d30b      	bcc.n	801ed0c <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x120>
 801ecf4:	2b02      	cmp	r3, #2
 801ecf6:	d18b      	bne.n	801ec10 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x24>
 801ecf8:	6940      	ldr	r0, [r0, #20]
 801ecfa:	4770      	bx	lr
 801ecfc:	6a40      	ldr	r0, [r0, #36]	@ 0x24
 801ecfe:	4770      	bx	lr
 801ed00:	69c0      	ldr	r0, [r0, #28]
 801ed02:	4770      	bx	lr
 801ed04:	684b      	ldr	r3, [r1, #4]
 801ed06:	781b      	ldrb	r3, [r3, #0]
 801ed08:	2b00      	cmp	r3, #0
 801ed0a:	d181      	bne.n	801ec10 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x24>
 801ed0c:	6b40      	ldr	r0, [r0, #52]	@ 0x34
 801ed0e:	4770      	bx	lr
 801ed10:	684b      	ldr	r3, [r1, #4]
 801ed12:	781b      	ldrb	r3, [r3, #0]
 801ed14:	2b00      	cmp	r3, #0
 801ed16:	f47f af7b 	bne.w	801ec10 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x24>
 801ed1a:	6ac0      	ldr	r0, [r0, #44]	@ 0x2c
 801ed1c:	4770      	bx	lr
 801ed1e:	6cc0      	ldr	r0, [r0, #76]	@ 0x4c
 801ed20:	4770      	bx	lr
 801ed22:	6d40      	ldr	r0, [r0, #84]	@ 0x54
 801ed24:	4770      	bx	lr
 801ed26:	6c40      	ldr	r0, [r0, #68]	@ 0x44
 801ed28:	4770      	bx	lr
 801ed2a:	6e40      	ldr	r0, [r0, #100]	@ 0x64
 801ed2c:	4770      	bx	lr
 801ed2e:	6ec0      	ldr	r0, [r0, #108]	@ 0x6c
 801ed30:	4770      	bx	lr

0801ed32 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 801ed32:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801ed36:	b087      	sub	sp, #28
 801ed38:	9815      	ldr	r0, [sp, #84]	@ 0x54
 801ed3a:	9205      	str	r2, [sp, #20]
 801ed3c:	f89d 2064 	ldrb.w	r2, [sp, #100]	@ 0x64
 801ed40:	9101      	str	r1, [sp, #4]
 801ed42:	9202      	str	r2, [sp, #8]
 801ed44:	6841      	ldr	r1, [r0, #4]
 801ed46:	f8dd e060 	ldr.w	lr, [sp, #96]	@ 0x60
 801ed4a:	e9dd 2416 	ldrd	r2, r4, [sp, #88]	@ 0x58
 801ed4e:	fb01 2404 	mla	r4, r1, r4, r2
 801ed52:	6802      	ldr	r2, [r0, #0]
 801ed54:	eb02 0444 	add.w	r4, r2, r4, lsl #1
 801ed58:	f8de 2000 	ldr.w	r2, [lr]
 801ed5c:	9203      	str	r2, [sp, #12]
 801ed5e:	f8de 2004 	ldr.w	r2, [lr, #4]
 801ed62:	3204      	adds	r2, #4
 801ed64:	9204      	str	r2, [sp, #16]
 801ed66:	9a02      	ldr	r2, [sp, #8]
 801ed68:	43d6      	mvns	r6, r2
 801ed6a:	b2f6      	uxtb	r6, r6
 801ed6c:	9a01      	ldr	r2, [sp, #4]
 801ed6e:	2a00      	cmp	r2, #0
 801ed70:	dc03      	bgt.n	801ed7a <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x48>
 801ed72:	9a05      	ldr	r2, [sp, #20]
 801ed74:	2a00      	cmp	r2, #0
 801ed76:	f340 8129 	ble.w	801efcc <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x29a>
 801ed7a:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 801ed7c:	f9be c008 	ldrsh.w	ip, [lr, #8]
 801ed80:	f502 4100 	add.w	r1, r2, #32768	@ 0x8000
 801ed84:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 801ed86:	f9be 700c 	ldrsh.w	r7, [lr, #12]
 801ed8a:	f502 4200 	add.w	r2, r2, #32768	@ 0x8000
 801ed8e:	2b00      	cmp	r3, #0
 801ed90:	dd0e      	ble.n	801edb0 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7e>
 801ed92:	1408      	asrs	r0, r1, #16
 801ed94:	d405      	bmi.n	801eda2 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x70>
 801ed96:	4560      	cmp	r0, ip
 801ed98:	da03      	bge.n	801eda2 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x70>
 801ed9a:	1410      	asrs	r0, r2, #16
 801ed9c:	d401      	bmi.n	801eda2 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x70>
 801ed9e:	42b8      	cmp	r0, r7
 801eda0:	db07      	blt.n	801edb2 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x80>
 801eda2:	9813      	ldr	r0, [sp, #76]	@ 0x4c
 801eda4:	3b01      	subs	r3, #1
 801eda6:	3402      	adds	r4, #2
 801eda8:	4401      	add	r1, r0
 801edaa:	9814      	ldr	r0, [sp, #80]	@ 0x50
 801edac:	4402      	add	r2, r0
 801edae:	e7ee      	b.n	801ed8e <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5c>
 801edb0:	d071      	beq.n	801ee96 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x164>
 801edb2:	1e58      	subs	r0, r3, #1
 801edb4:	9d13      	ldr	r5, [sp, #76]	@ 0x4c
 801edb6:	fb05 1500 	mla	r5, r5, r0, r1
 801edba:	142d      	asrs	r5, r5, #16
 801edbc:	d45f      	bmi.n	801ee7e <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x14c>
 801edbe:	4565      	cmp	r5, ip
 801edc0:	da5d      	bge.n	801ee7e <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x14c>
 801edc2:	9d14      	ldr	r5, [sp, #80]	@ 0x50
 801edc4:	fb05 2000 	mla	r0, r5, r0, r2
 801edc8:	1400      	asrs	r0, r0, #16
 801edca:	d458      	bmi.n	801ee7e <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x14c>
 801edcc:	42b8      	cmp	r0, r7
 801edce:	da56      	bge.n	801ee7e <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x14c>
 801edd0:	4699      	mov	r9, r3
 801edd2:	46a2      	mov	sl, r4
 801edd4:	f8bd b008 	ldrh.w	fp, [sp, #8]
 801edd8:	f1b9 0f00 	cmp.w	r9, #0
 801eddc:	dd57      	ble.n	801ee8e <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x15c>
 801edde:	ea4f 4c22 	mov.w	ip, r2, asr #16
 801ede2:	f9be 7008 	ldrsh.w	r7, [lr, #8]
 801ede6:	9803      	ldr	r0, [sp, #12]
 801ede8:	140d      	asrs	r5, r1, #16
 801edea:	f109 39ff 	add.w	r9, r9, #4294967295
 801edee:	fb07 000c 	mla	r0, r7, ip, r0
 801edf2:	5d40      	ldrb	r0, [r0, r5]
 801edf4:	9d04      	ldr	r5, [sp, #16]
 801edf6:	f835 0010 	ldrh.w	r0, [r5, r0, lsl #1]
 801edfa:	f8ba 5000 	ldrh.w	r5, [sl]
 801edfe:	ea4f 2c20 	mov.w	ip, r0, asr #8
 801ee02:	122f      	asrs	r7, r5, #8
 801ee04:	ea4f 08e5 	mov.w	r8, r5, asr #3
 801ee08:	f00c 0cf8 	and.w	ip, ip, #248	@ 0xf8
 801ee0c:	f007 07f8 	and.w	r7, r7, #248	@ 0xf8
 801ee10:	00ed      	lsls	r5, r5, #3
 801ee12:	f008 08fc 	and.w	r8, r8, #252	@ 0xfc
 801ee16:	fb17 f706 	smulbb	r7, r7, r6
 801ee1a:	b2ed      	uxtb	r5, r5
 801ee1c:	fb18 f806 	smulbb	r8, r8, r6
 801ee20:	fb0c 7c0b 	mla	ip, ip, fp, r7
 801ee24:	10c7      	asrs	r7, r0, #3
 801ee26:	fb15 f506 	smulbb	r5, r5, r6
 801ee2a:	00c0      	lsls	r0, r0, #3
 801ee2c:	f007 07fc 	and.w	r7, r7, #252	@ 0xfc
 801ee30:	fa1f fc8c 	uxth.w	ip, ip
 801ee34:	b2c0      	uxtb	r0, r0
 801ee36:	fb07 870b 	mla	r7, r7, fp, r8
 801ee3a:	fb00 500b 	mla	r0, r0, fp, r5
 801ee3e:	f10c 0501 	add.w	r5, ip, #1
 801ee42:	b2bf      	uxth	r7, r7
 801ee44:	b280      	uxth	r0, r0
 801ee46:	eb05 2c1c 	add.w	ip, r5, ip, lsr #8
 801ee4a:	f107 0801 	add.w	r8, r7, #1
 801ee4e:	1c45      	adds	r5, r0, #1
 801ee50:	eb08 2817 	add.w	r8, r8, r7, lsr #8
 801ee54:	f40c 4c78 	and.w	ip, ip, #63488	@ 0xf800
 801ee58:	eb05 2510 	add.w	r5, r5, r0, lsr #8
 801ee5c:	9813      	ldr	r0, [sp, #76]	@ 0x4c
 801ee5e:	ea4f 1858 	mov.w	r8, r8, lsr #5
 801ee62:	f3c5 25c4 	ubfx	r5, r5, #11, #5
 801ee66:	4401      	add	r1, r0
 801ee68:	f408 68fc 	and.w	r8, r8, #2016	@ 0x7e0
 801ee6c:	9814      	ldr	r0, [sp, #80]	@ 0x50
 801ee6e:	ea45 0c0c 	orr.w	ip, r5, ip
 801ee72:	4402      	add	r2, r0
 801ee74:	ea4c 0c08 	orr.w	ip, ip, r8
 801ee78:	f82a cb02 	strh.w	ip, [sl], #2
 801ee7c:	e7ac      	b.n	801edd8 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa6>
 801ee7e:	f04f 0800 	mov.w	r8, #0
 801ee82:	f8bd a008 	ldrh.w	sl, [sp, #8]
 801ee86:	eb03 0008 	add.w	r0, r3, r8
 801ee8a:	2800      	cmp	r0, #0
 801ee8c:	dc41      	bgt.n	801ef12 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1e0>
 801ee8e:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 801ee92:	eb04 0443 	add.w	r4, r4, r3, lsl #1
 801ee96:	9b01      	ldr	r3, [sp, #4]
 801ee98:	2b00      	cmp	r3, #0
 801ee9a:	f340 8097 	ble.w	801efcc <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x29a>
 801ee9e:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 801eea2:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 801eea4:	ee30 0a04 	vadd.f32	s0, s0, s8
 801eea8:	ee70 0aa4 	vadd.f32	s1, s1, s9
 801eeac:	eef0 6a62 	vmov.f32	s13, s5
 801eeb0:	eec7 7a00 	vdiv.f32	s15, s14, s0
 801eeb4:	ee31 1a05 	vadd.f32	s2, s2, s10
 801eeb8:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 801eebc:	edcd 6a11 	vstr	s13, [sp, #68]	@ 0x44
 801eec0:	eef0 6a43 	vmov.f32	s13, s6
 801eec4:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 801eec8:	edcd 6a12 	vstr	s13, [sp, #72]	@ 0x48
 801eecc:	ee20 7aa7 	vmul.f32	s14, s1, s15
 801eed0:	ee61 7a27 	vmul.f32	s15, s2, s15
 801eed4:	ee77 2a62 	vsub.f32	s5, s14, s5
 801eed8:	ee37 3ac3 	vsub.f32	s6, s15, s6
 801eedc:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 801eee0:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 801eee4:	ee12 2a90 	vmov	r2, s5
 801eee8:	eef0 2a47 	vmov.f32	s5, s14
 801eeec:	fb92 f3f3 	sdiv	r3, r2, r3
 801eef0:	ee13 2a10 	vmov	r2, s6
 801eef4:	9313      	str	r3, [sp, #76]	@ 0x4c
 801eef6:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 801eef8:	eeb0 3a67 	vmov.f32	s6, s15
 801eefc:	fb92 f3f3 	sdiv	r3, r2, r3
 801ef00:	9314      	str	r3, [sp, #80]	@ 0x50
 801ef02:	9b01      	ldr	r3, [sp, #4]
 801ef04:	9a05      	ldr	r2, [sp, #20]
 801ef06:	3b01      	subs	r3, #1
 801ef08:	9301      	str	r3, [sp, #4]
 801ef0a:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 801ef0c:	bf08      	it	eq
 801ef0e:	4613      	moveq	r3, r2
 801ef10:	e72c      	b.n	801ed6c <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3a>
 801ef12:	140f      	asrs	r7, r1, #16
 801ef14:	d453      	bmi.n	801efbe <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x28c>
 801ef16:	f8de 5008 	ldr.w	r5, [lr, #8]
 801ef1a:	42bd      	cmp	r5, r7
 801ef1c:	dd4f      	ble.n	801efbe <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x28c>
 801ef1e:	ea5f 4c22 	movs.w	ip, r2, asr #16
 801ef22:	d44c      	bmi.n	801efbe <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x28c>
 801ef24:	f8de 000c 	ldr.w	r0, [lr, #12]
 801ef28:	4560      	cmp	r0, ip
 801ef2a:	dd48      	ble.n	801efbe <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x28c>
 801ef2c:	9803      	ldr	r0, [sp, #12]
 801ef2e:	b22d      	sxth	r5, r5
 801ef30:	fb0c 0505 	mla	r5, ip, r5, r0
 801ef34:	5de8      	ldrb	r0, [r5, r7]
 801ef36:	9d04      	ldr	r5, [sp, #16]
 801ef38:	f835 0010 	ldrh.w	r0, [r5, r0, lsl #1]
 801ef3c:	f06f 0501 	mvn.w	r5, #1
 801ef40:	fb05 fb08 	mul.w	fp, r5, r8
 801ef44:	ea4f 2c20 	mov.w	ip, r0, asr #8
 801ef48:	f834 500b 	ldrh.w	r5, [r4, fp]
 801ef4c:	f00c 0cf8 	and.w	ip, ip, #248	@ 0xf8
 801ef50:	122f      	asrs	r7, r5, #8
 801ef52:	ea4f 09e5 	mov.w	r9, r5, asr #3
 801ef56:	f007 07f8 	and.w	r7, r7, #248	@ 0xf8
 801ef5a:	00ed      	lsls	r5, r5, #3
 801ef5c:	f009 09fc 	and.w	r9, r9, #252	@ 0xfc
 801ef60:	fb17 f706 	smulbb	r7, r7, r6
 801ef64:	b2ed      	uxtb	r5, r5
 801ef66:	fb19 f906 	smulbb	r9, r9, r6
 801ef6a:	fb0c 7c0a 	mla	ip, ip, sl, r7
 801ef6e:	10c7      	asrs	r7, r0, #3
 801ef70:	fb15 f506 	smulbb	r5, r5, r6
 801ef74:	00c0      	lsls	r0, r0, #3
 801ef76:	f007 07fc 	and.w	r7, r7, #252	@ 0xfc
 801ef7a:	fa1f fc8c 	uxth.w	ip, ip
 801ef7e:	b2c0      	uxtb	r0, r0
 801ef80:	fb07 970a 	mla	r7, r7, sl, r9
 801ef84:	fb00 500a 	mla	r0, r0, sl, r5
 801ef88:	f10c 0501 	add.w	r5, ip, #1
 801ef8c:	b2bf      	uxth	r7, r7
 801ef8e:	b280      	uxth	r0, r0
 801ef90:	eb05 2c1c 	add.w	ip, r5, ip, lsr #8
 801ef94:	f107 0901 	add.w	r9, r7, #1
 801ef98:	1c45      	adds	r5, r0, #1
 801ef9a:	eb09 2917 	add.w	r9, r9, r7, lsr #8
 801ef9e:	f40c 4c78 	and.w	ip, ip, #63488	@ 0xf800
 801efa2:	eb05 2510 	add.w	r5, r5, r0, lsr #8
 801efa6:	ea4f 1959 	mov.w	r9, r9, lsr #5
 801efaa:	f3c5 25c4 	ubfx	r5, r5, #11, #5
 801efae:	f409 69fc 	and.w	r9, r9, #2016	@ 0x7e0
 801efb2:	ea45 0c0c 	orr.w	ip, r5, ip
 801efb6:	ea4c 0c09 	orr.w	ip, ip, r9
 801efba:	f824 c00b 	strh.w	ip, [r4, fp]
 801efbe:	9813      	ldr	r0, [sp, #76]	@ 0x4c
 801efc0:	f108 38ff 	add.w	r8, r8, #4294967295
 801efc4:	4401      	add	r1, r0
 801efc6:	9814      	ldr	r0, [sp, #80]	@ 0x50
 801efc8:	4402      	add	r2, r0
 801efca:	e75c      	b.n	801ee86 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x154>
 801efcc:	b007      	add	sp, #28
 801efce:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0801efd2 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 801efd2:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801efd6:	b085      	sub	sp, #20
 801efd8:	4693      	mov	fp, r2
 801efda:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 801efde:	9e13      	ldr	r6, [sp, #76]	@ 0x4c
 801efe0:	9d16      	ldr	r5, [sp, #88]	@ 0x58
 801efe2:	6870      	ldr	r0, [r6, #4]
 801efe4:	9100      	str	r1, [sp, #0]
 801efe6:	e9dd 2414 	ldrd	r2, r4, [sp, #80]	@ 0x50
 801efea:	e9dd ec11 	ldrd	lr, ip, [sp, #68]	@ 0x44
 801efee:	fb00 2404 	mla	r4, r0, r4, r2
 801eff2:	6832      	ldr	r2, [r6, #0]
 801eff4:	eb02 0444 	add.w	r4, r2, r4, lsl #1
 801eff8:	682a      	ldr	r2, [r5, #0]
 801effa:	9201      	str	r2, [sp, #4]
 801effc:	686a      	ldr	r2, [r5, #4]
 801effe:	3204      	adds	r2, #4
 801f000:	9202      	str	r2, [sp, #8]
 801f002:	9a00      	ldr	r2, [sp, #0]
 801f004:	2a00      	cmp	r2, #0
 801f006:	dc03      	bgt.n	801f010 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3e>
 801f008:	f1bb 0f00 	cmp.w	fp, #0
 801f00c:	f340 80a0 	ble.w	801f150 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x17e>
 801f010:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 801f012:	f9b5 9008 	ldrsh.w	r9, [r5, #8]
 801f016:	f502 4000 	add.w	r0, r2, #32768	@ 0x8000
 801f01a:	9a10      	ldr	r2, [sp, #64]	@ 0x40
 801f01c:	f9b5 800c 	ldrsh.w	r8, [r5, #12]
 801f020:	f502 4200 	add.w	r2, r2, #32768	@ 0x8000
 801f024:	2b00      	cmp	r3, #0
 801f026:	dd0c      	ble.n	801f042 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x70>
 801f028:	1406      	asrs	r6, r0, #16
 801f02a:	d405      	bmi.n	801f038 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x66>
 801f02c:	454e      	cmp	r6, r9
 801f02e:	da03      	bge.n	801f038 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x66>
 801f030:	1416      	asrs	r6, r2, #16
 801f032:	d401      	bmi.n	801f038 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x66>
 801f034:	4546      	cmp	r6, r8
 801f036:	db05      	blt.n	801f044 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x72>
 801f038:	4470      	add	r0, lr
 801f03a:	4462      	add	r2, ip
 801f03c:	3b01      	subs	r3, #1
 801f03e:	3402      	adds	r4, #2
 801f040:	e7f0      	b.n	801f024 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x52>
 801f042:	d00f      	beq.n	801f064 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x92>
 801f044:	1e5e      	subs	r6, r3, #1
 801f046:	fb0e 0706 	mla	r7, lr, r6, r0
 801f04a:	143f      	asrs	r7, r7, #16
 801f04c:	d541      	bpl.n	801f0d2 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x100>
 801f04e:	eb04 0643 	add.w	r6, r4, r3, lsl #1
 801f052:	4698      	mov	r8, r3
 801f054:	9603      	str	r6, [sp, #12]
 801f056:	f1b8 0f00 	cmp.w	r8, #0
 801f05a:	dc59      	bgt.n	801f110 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x13e>
 801f05c:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 801f060:	eb04 0443 	add.w	r4, r4, r3, lsl #1
 801f064:	9b00      	ldr	r3, [sp, #0]
 801f066:	2b00      	cmp	r3, #0
 801f068:	dd72      	ble.n	801f150 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x17e>
 801f06a:	ee30 0a04 	vadd.f32	s0, s0, s8
 801f06e:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 801f070:	ee70 0aa4 	vadd.f32	s1, s1, s9
 801f074:	eeb0 6a62 	vmov.f32	s12, s5
 801f078:	eec6 7a80 	vdiv.f32	s15, s13, s0
 801f07c:	ee31 1a05 	vadd.f32	s2, s2, s10
 801f080:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 801f084:	ed8d 6a0f 	vstr	s12, [sp, #60]	@ 0x3c
 801f088:	eeb0 6a43 	vmov.f32	s12, s6
 801f08c:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 801f090:	ed8d 6a10 	vstr	s12, [sp, #64]	@ 0x40
 801f094:	ee20 7aa7 	vmul.f32	s14, s1, s15
 801f098:	ee61 7a27 	vmul.f32	s15, s2, s15
 801f09c:	ee77 2a62 	vsub.f32	s5, s14, s5
 801f0a0:	ee37 3ac3 	vsub.f32	s6, s15, s6
 801f0a4:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 801f0a8:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 801f0ac:	ee12 2a90 	vmov	r2, s5
 801f0b0:	eef0 2a47 	vmov.f32	s5, s14
 801f0b4:	fb92 fef3 	sdiv	lr, r2, r3
 801f0b8:	ee13 2a10 	vmov	r2, s6
 801f0bc:	eeb0 3a67 	vmov.f32	s6, s15
 801f0c0:	fb92 fcf3 	sdiv	ip, r2, r3
 801f0c4:	9b00      	ldr	r3, [sp, #0]
 801f0c6:	3b01      	subs	r3, #1
 801f0c8:	9300      	str	r3, [sp, #0]
 801f0ca:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 801f0cc:	bf08      	it	eq
 801f0ce:	465b      	moveq	r3, fp
 801f0d0:	e797      	b.n	801f002 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x30>
 801f0d2:	454f      	cmp	r7, r9
 801f0d4:	dabb      	bge.n	801f04e <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7c>
 801f0d6:	fb0c 2606 	mla	r6, ip, r6, r2
 801f0da:	1436      	asrs	r6, r6, #16
 801f0dc:	d4b7      	bmi.n	801f04e <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7c>
 801f0de:	4546      	cmp	r6, r8
 801f0e0:	dab5      	bge.n	801f04e <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7c>
 801f0e2:	461e      	mov	r6, r3
 801f0e4:	46a0      	mov	r8, r4
 801f0e6:	2e00      	cmp	r6, #0
 801f0e8:	ddb8      	ble.n	801f05c <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8a>
 801f0ea:	1417      	asrs	r7, r2, #16
 801f0ec:	f9b5 a008 	ldrsh.w	sl, [r5, #8]
 801f0f0:	9901      	ldr	r1, [sp, #4]
 801f0f2:	ea4f 4920 	mov.w	r9, r0, asr #16
 801f0f6:	4462      	add	r2, ip
 801f0f8:	4470      	add	r0, lr
 801f0fa:	fb0a 1707 	mla	r7, sl, r7, r1
 801f0fe:	9902      	ldr	r1, [sp, #8]
 801f100:	3e01      	subs	r6, #1
 801f102:	f817 7009 	ldrb.w	r7, [r7, r9]
 801f106:	f831 7017 	ldrh.w	r7, [r1, r7, lsl #1]
 801f10a:	f828 7b02 	strh.w	r7, [r8], #2
 801f10e:	e7ea      	b.n	801f0e6 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x114>
 801f110:	ea5f 4920 	movs.w	r9, r0, asr #16
 801f114:	d417      	bmi.n	801f146 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x174>
 801f116:	68ae      	ldr	r6, [r5, #8]
 801f118:	454e      	cmp	r6, r9
 801f11a:	dd14      	ble.n	801f146 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x174>
 801f11c:	ea5f 4a22 	movs.w	sl, r2, asr #16
 801f120:	d411      	bmi.n	801f146 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x174>
 801f122:	68ef      	ldr	r7, [r5, #12]
 801f124:	4557      	cmp	r7, sl
 801f126:	dd0e      	ble.n	801f146 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x174>
 801f128:	9f01      	ldr	r7, [sp, #4]
 801f12a:	b236      	sxth	r6, r6
 801f12c:	f06f 0101 	mvn.w	r1, #1
 801f130:	fb0a 7606 	mla	r6, sl, r6, r7
 801f134:	9f02      	ldr	r7, [sp, #8]
 801f136:	f816 6009 	ldrb.w	r6, [r6, r9]
 801f13a:	f837 7016 	ldrh.w	r7, [r7, r6, lsl #1]
 801f13e:	fb01 f608 	mul.w	r6, r1, r8
 801f142:	9903      	ldr	r1, [sp, #12]
 801f144:	538f      	strh	r7, [r1, r6]
 801f146:	4470      	add	r0, lr
 801f148:	4462      	add	r2, ip
 801f14a:	f108 38ff 	add.w	r8, r8, #4294967295
 801f14e:	e782      	b.n	801f056 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x84>
 801f150:	b005      	add	sp, #20
 801f152:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0801f156 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 801f156:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801f15a:	b087      	sub	sp, #28
 801f15c:	9c15      	ldr	r4, [sp, #84]	@ 0x54
 801f15e:	9205      	str	r2, [sp, #20]
 801f160:	f89d 2064 	ldrb.w	r2, [sp, #100]	@ 0x64
 801f164:	9102      	str	r1, [sp, #8]
 801f166:	9203      	str	r2, [sp, #12]
 801f168:	6861      	ldr	r1, [r4, #4]
 801f16a:	f8dd c060 	ldr.w	ip, [sp, #96]	@ 0x60
 801f16e:	e9dd 2016 	ldrd	r2, r0, [sp, #88]	@ 0x58
 801f172:	fb01 2000 	mla	r0, r1, r0, r2
 801f176:	6822      	ldr	r2, [r4, #0]
 801f178:	eb02 0240 	add.w	r2, r2, r0, lsl #1
 801f17c:	9200      	str	r2, [sp, #0]
 801f17e:	f8dc 2000 	ldr.w	r2, [ip]
 801f182:	9204      	str	r2, [sp, #16]
 801f184:	f8dc 2004 	ldr.w	r2, [ip, #4]
 801f188:	3204      	adds	r2, #4
 801f18a:	9201      	str	r2, [sp, #4]
 801f18c:	9a03      	ldr	r2, [sp, #12]
 801f18e:	43d5      	mvns	r5, r2
 801f190:	b2ed      	uxtb	r5, r5
 801f192:	9a02      	ldr	r2, [sp, #8]
 801f194:	2a00      	cmp	r2, #0
 801f196:	dc03      	bgt.n	801f1a0 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4a>
 801f198:	9a05      	ldr	r2, [sp, #20]
 801f19a:	2a00      	cmp	r2, #0
 801f19c:	f340 812c 	ble.w	801f3f8 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2a2>
 801f1a0:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 801f1a2:	f9bc e008 	ldrsh.w	lr, [ip, #8]
 801f1a6:	f502 4100 	add.w	r1, r2, #32768	@ 0x8000
 801f1aa:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 801f1ac:	f9bc 700c 	ldrsh.w	r7, [ip, #12]
 801f1b0:	f502 4200 	add.w	r2, r2, #32768	@ 0x8000
 801f1b4:	2b00      	cmp	r3, #0
 801f1b6:	dd10      	ble.n	801f1da <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x84>
 801f1b8:	140c      	asrs	r4, r1, #16
 801f1ba:	d405      	bmi.n	801f1c8 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x72>
 801f1bc:	4574      	cmp	r4, lr
 801f1be:	da03      	bge.n	801f1c8 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x72>
 801f1c0:	1414      	asrs	r4, r2, #16
 801f1c2:	d401      	bmi.n	801f1c8 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x72>
 801f1c4:	42bc      	cmp	r4, r7
 801f1c6:	db09      	blt.n	801f1dc <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x86>
 801f1c8:	9c13      	ldr	r4, [sp, #76]	@ 0x4c
 801f1ca:	3b01      	subs	r3, #1
 801f1cc:	9800      	ldr	r0, [sp, #0]
 801f1ce:	4421      	add	r1, r4
 801f1d0:	9c14      	ldr	r4, [sp, #80]	@ 0x50
 801f1d2:	3002      	adds	r0, #2
 801f1d4:	4422      	add	r2, r4
 801f1d6:	9000      	str	r0, [sp, #0]
 801f1d8:	e7ec      	b.n	801f1b4 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5e>
 801f1da:	d071      	beq.n	801f2c0 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x16a>
 801f1dc:	1e5c      	subs	r4, r3, #1
 801f1de:	9e13      	ldr	r6, [sp, #76]	@ 0x4c
 801f1e0:	fb06 1604 	mla	r6, r6, r4, r1
 801f1e4:	1436      	asrs	r6, r6, #16
 801f1e6:	d45d      	bmi.n	801f2a4 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x14e>
 801f1e8:	4576      	cmp	r6, lr
 801f1ea:	da5b      	bge.n	801f2a4 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x14e>
 801f1ec:	9e14      	ldr	r6, [sp, #80]	@ 0x50
 801f1ee:	fb06 2404 	mla	r4, r6, r4, r2
 801f1f2:	1424      	asrs	r4, r4, #16
 801f1f4:	d456      	bmi.n	801f2a4 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x14e>
 801f1f6:	42bc      	cmp	r4, r7
 801f1f8:	da54      	bge.n	801f2a4 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x14e>
 801f1fa:	4698      	mov	r8, r3
 801f1fc:	f8dd 9000 	ldr.w	r9, [sp]
 801f200:	f8bd a00c 	ldrh.w	sl, [sp, #12]
 801f204:	f1b8 0f00 	cmp.w	r8, #0
 801f208:	dd54      	ble.n	801f2b4 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x15e>
 801f20a:	f9bc 7008 	ldrsh.w	r7, [ip, #8]
 801f20e:	1414      	asrs	r4, r2, #16
 801f210:	9804      	ldr	r0, [sp, #16]
 801f212:	140e      	asrs	r6, r1, #16
 801f214:	f108 38ff 	add.w	r8, r8, #4294967295
 801f218:	fb07 0404 	mla	r4, r7, r4, r0
 801f21c:	9801      	ldr	r0, [sp, #4]
 801f21e:	f814 e006 	ldrb.w	lr, [r4, r6]
 801f222:	f8b9 4000 	ldrh.w	r4, [r9]
 801f226:	eb0e 0e4e 	add.w	lr, lr, lr, lsl #1
 801f22a:	1227      	asrs	r7, r4, #8
 801f22c:	eb00 0b0e 	add.w	fp, r0, lr
 801f230:	f810 e00e 	ldrb.w	lr, [r0, lr]
 801f234:	f007 07f8 	and.w	r7, r7, #248	@ 0xf8
 801f238:	9813      	ldr	r0, [sp, #76]	@ 0x4c
 801f23a:	f89b 6002 	ldrb.w	r6, [fp, #2]
 801f23e:	f89b b001 	ldrb.w	fp, [fp, #1]
 801f242:	4401      	add	r1, r0
 801f244:	fb16 f60a 	smulbb	r6, r6, sl
 801f248:	9814      	ldr	r0, [sp, #80]	@ 0x50
 801f24a:	fb1b fb0a 	smulbb	fp, fp, sl
 801f24e:	fb07 6705 	mla	r7, r7, r5, r6
 801f252:	10e6      	asrs	r6, r4, #3
 801f254:	00e4      	lsls	r4, r4, #3
 801f256:	4402      	add	r2, r0
 801f258:	f006 06fc 	and.w	r6, r6, #252	@ 0xfc
 801f25c:	b2bf      	uxth	r7, r7
 801f25e:	b2e4      	uxtb	r4, r4
 801f260:	fb06 b605 	mla	r6, r6, r5, fp
 801f264:	fb14 f405 	smulbb	r4, r4, r5
 801f268:	b2b6      	uxth	r6, r6
 801f26a:	fb0e 4e0a 	mla	lr, lr, sl, r4
 801f26e:	1c7c      	adds	r4, r7, #1
 801f270:	f106 0b01 	add.w	fp, r6, #1
 801f274:	fa1f fe8e 	uxth.w	lr, lr
 801f278:	eb04 2717 	add.w	r7, r4, r7, lsr #8
 801f27c:	f10e 0401 	add.w	r4, lr, #1
 801f280:	eb0b 2b16 	add.w	fp, fp, r6, lsr #8
 801f284:	f407 4778 	and.w	r7, r7, #63488	@ 0xf800
 801f288:	eb04 241e 	add.w	r4, r4, lr, lsr #8
 801f28c:	ea4f 1b5b 	mov.w	fp, fp, lsr #5
 801f290:	f3c4 24c4 	ubfx	r4, r4, #11, #5
 801f294:	f40b 6bfc 	and.w	fp, fp, #2016	@ 0x7e0
 801f298:	4327      	orrs	r7, r4
 801f29a:	ea47 070b 	orr.w	r7, r7, fp
 801f29e:	f829 7b02 	strh.w	r7, [r9], #2
 801f2a2:	e7af      	b.n	801f204 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xae>
 801f2a4:	f04f 0e00 	mov.w	lr, #0
 801f2a8:	f8bd 900c 	ldrh.w	r9, [sp, #12]
 801f2ac:	eb03 040e 	add.w	r4, r3, lr
 801f2b0:	2c00      	cmp	r4, #0
 801f2b2:	dc43      	bgt.n	801f33c <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1e6>
 801f2b4:	9a00      	ldr	r2, [sp, #0]
 801f2b6:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 801f2ba:	eb02 0343 	add.w	r3, r2, r3, lsl #1
 801f2be:	9300      	str	r3, [sp, #0]
 801f2c0:	9b02      	ldr	r3, [sp, #8]
 801f2c2:	2b00      	cmp	r3, #0
 801f2c4:	f340 8098 	ble.w	801f3f8 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2a2>
 801f2c8:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 801f2cc:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 801f2ce:	ee30 0a04 	vadd.f32	s0, s0, s8
 801f2d2:	ee70 0aa4 	vadd.f32	s1, s1, s9
 801f2d6:	eef0 6a62 	vmov.f32	s13, s5
 801f2da:	eec7 7a00 	vdiv.f32	s15, s14, s0
 801f2de:	ee31 1a05 	vadd.f32	s2, s2, s10
 801f2e2:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 801f2e6:	edcd 6a11 	vstr	s13, [sp, #68]	@ 0x44
 801f2ea:	eef0 6a43 	vmov.f32	s13, s6
 801f2ee:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 801f2f2:	edcd 6a12 	vstr	s13, [sp, #72]	@ 0x48
 801f2f6:	ee20 7aa7 	vmul.f32	s14, s1, s15
 801f2fa:	ee61 7a27 	vmul.f32	s15, s2, s15
 801f2fe:	ee77 2a62 	vsub.f32	s5, s14, s5
 801f302:	ee37 3ac3 	vsub.f32	s6, s15, s6
 801f306:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 801f30a:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 801f30e:	ee12 2a90 	vmov	r2, s5
 801f312:	eef0 2a47 	vmov.f32	s5, s14
 801f316:	fb92 f3f3 	sdiv	r3, r2, r3
 801f31a:	ee13 2a10 	vmov	r2, s6
 801f31e:	9313      	str	r3, [sp, #76]	@ 0x4c
 801f320:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 801f322:	eeb0 3a67 	vmov.f32	s6, s15
 801f326:	fb92 f3f3 	sdiv	r3, r2, r3
 801f32a:	9314      	str	r3, [sp, #80]	@ 0x50
 801f32c:	9b02      	ldr	r3, [sp, #8]
 801f32e:	9a05      	ldr	r2, [sp, #20]
 801f330:	3b01      	subs	r3, #1
 801f332:	9302      	str	r3, [sp, #8]
 801f334:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 801f336:	bf08      	it	eq
 801f338:	4613      	moveq	r3, r2
 801f33a:	e72a      	b.n	801f192 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3c>
 801f33c:	140f      	asrs	r7, r1, #16
 801f33e:	d454      	bmi.n	801f3ea <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x294>
 801f340:	f8dc 6008 	ldr.w	r6, [ip, #8]
 801f344:	42be      	cmp	r6, r7
 801f346:	dd50      	ble.n	801f3ea <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x294>
 801f348:	ea5f 4822 	movs.w	r8, r2, asr #16
 801f34c:	d44d      	bmi.n	801f3ea <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x294>
 801f34e:	f8dc 400c 	ldr.w	r4, [ip, #12]
 801f352:	4544      	cmp	r4, r8
 801f354:	dd49      	ble.n	801f3ea <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x294>
 801f356:	9c04      	ldr	r4, [sp, #16]
 801f358:	b236      	sxth	r6, r6
 801f35a:	f06f 0001 	mvn.w	r0, #1
 801f35e:	fb08 4606 	mla	r6, r8, r6, r4
 801f362:	9c01      	ldr	r4, [sp, #4]
 801f364:	fb00 fa0e 	mul.w	sl, r0, lr
 801f368:	9800      	ldr	r0, [sp, #0]
 801f36a:	f816 8007 	ldrb.w	r8, [r6, r7]
 801f36e:	eb08 0848 	add.w	r8, r8, r8, lsl #1
 801f372:	eb04 0b08 	add.w	fp, r4, r8
 801f376:	f830 400a 	ldrh.w	r4, [r0, sl]
 801f37a:	9801      	ldr	r0, [sp, #4]
 801f37c:	f89b 6002 	ldrb.w	r6, [fp, #2]
 801f380:	1227      	asrs	r7, r4, #8
 801f382:	f89b b001 	ldrb.w	fp, [fp, #1]
 801f386:	fb16 f609 	smulbb	r6, r6, r9
 801f38a:	f007 07f8 	and.w	r7, r7, #248	@ 0xf8
 801f38e:	f810 8008 	ldrb.w	r8, [r0, r8]
 801f392:	fb1b fb09 	smulbb	fp, fp, r9
 801f396:	fb07 6705 	mla	r7, r7, r5, r6
 801f39a:	10e6      	asrs	r6, r4, #3
 801f39c:	00e4      	lsls	r4, r4, #3
 801f39e:	9800      	ldr	r0, [sp, #0]
 801f3a0:	f006 06fc 	and.w	r6, r6, #252	@ 0xfc
 801f3a4:	b2bf      	uxth	r7, r7
 801f3a6:	b2e4      	uxtb	r4, r4
 801f3a8:	fb06 b605 	mla	r6, r6, r5, fp
 801f3ac:	fb14 f405 	smulbb	r4, r4, r5
 801f3b0:	b2b6      	uxth	r6, r6
 801f3b2:	fb08 4809 	mla	r8, r8, r9, r4
 801f3b6:	1c7c      	adds	r4, r7, #1
 801f3b8:	f106 0b01 	add.w	fp, r6, #1
 801f3bc:	fa1f f888 	uxth.w	r8, r8
 801f3c0:	eb04 2717 	add.w	r7, r4, r7, lsr #8
 801f3c4:	f108 0401 	add.w	r4, r8, #1
 801f3c8:	eb0b 2b16 	add.w	fp, fp, r6, lsr #8
 801f3cc:	f407 4778 	and.w	r7, r7, #63488	@ 0xf800
 801f3d0:	eb04 2418 	add.w	r4, r4, r8, lsr #8
 801f3d4:	ea4f 1b5b 	mov.w	fp, fp, lsr #5
 801f3d8:	f3c4 24c4 	ubfx	r4, r4, #11, #5
 801f3dc:	f40b 6bfc 	and.w	fp, fp, #2016	@ 0x7e0
 801f3e0:	4327      	orrs	r7, r4
 801f3e2:	ea47 070b 	orr.w	r7, r7, fp
 801f3e6:	f820 700a 	strh.w	r7, [r0, sl]
 801f3ea:	9813      	ldr	r0, [sp, #76]	@ 0x4c
 801f3ec:	f10e 3eff 	add.w	lr, lr, #4294967295
 801f3f0:	4401      	add	r1, r0
 801f3f2:	9814      	ldr	r0, [sp, #80]	@ 0x50
 801f3f4:	4402      	add	r2, r0
 801f3f6:	e759      	b.n	801f2ac <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x156>
 801f3f8:	b007      	add	sp, #28
 801f3fa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	...

0801f400 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 801f400:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801f404:	b085      	sub	sp, #20
 801f406:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 801f40a:	9e13      	ldr	r6, [sp, #76]	@ 0x4c
 801f40c:	9d16      	ldr	r5, [sp, #88]	@ 0x58
 801f40e:	9203      	str	r2, [sp, #12]
 801f410:	6870      	ldr	r0, [r6, #4]
 801f412:	686f      	ldr	r7, [r5, #4]
 801f414:	f8dd c044 	ldr.w	ip, [sp, #68]	@ 0x44
 801f418:	3704      	adds	r7, #4
 801f41a:	9101      	str	r1, [sp, #4]
 801f41c:	e9dd 2414 	ldrd	r2, r4, [sp, #80]	@ 0x50
 801f420:	fb00 2404 	mla	r4, r0, r4, r2
 801f424:	6832      	ldr	r2, [r6, #0]
 801f426:	eb02 0444 	add.w	r4, r2, r4, lsl #1
 801f42a:	682a      	ldr	r2, [r5, #0]
 801f42c:	9202      	str	r2, [sp, #8]
 801f42e:	9a01      	ldr	r2, [sp, #4]
 801f430:	2a00      	cmp	r2, #0
 801f432:	dc03      	bgt.n	801f43c <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3c>
 801f434:	9a03      	ldr	r2, [sp, #12]
 801f436:	2a00      	cmp	r2, #0
 801f438:	f340 80cc 	ble.w	801f5d4 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1d4>
 801f43c:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 801f43e:	f9b5 9008 	ldrsh.w	r9, [r5, #8]
 801f442:	f502 4000 	add.w	r0, r2, #32768	@ 0x8000
 801f446:	9a10      	ldr	r2, [sp, #64]	@ 0x40
 801f448:	f9b5 800c 	ldrsh.w	r8, [r5, #12]
 801f44c:	f502 4200 	add.w	r2, r2, #32768	@ 0x8000
 801f450:	2b00      	cmp	r3, #0
 801f452:	dd0d      	ble.n	801f470 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x70>
 801f454:	1406      	asrs	r6, r0, #16
 801f456:	d405      	bmi.n	801f464 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x64>
 801f458:	454e      	cmp	r6, r9
 801f45a:	da03      	bge.n	801f464 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x64>
 801f45c:	1416      	asrs	r6, r2, #16
 801f45e:	d401      	bmi.n	801f464 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x64>
 801f460:	4546      	cmp	r6, r8
 801f462:	db06      	blt.n	801f472 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x72>
 801f464:	9e12      	ldr	r6, [sp, #72]	@ 0x48
 801f466:	4460      	add	r0, ip
 801f468:	3b01      	subs	r3, #1
 801f46a:	3402      	adds	r4, #2
 801f46c:	4432      	add	r2, r6
 801f46e:	e7ef      	b.n	801f450 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x50>
 801f470:	d00f      	beq.n	801f492 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x92>
 801f472:	1e5e      	subs	r6, r3, #1
 801f474:	fb0c 0e06 	mla	lr, ip, r6, r0
 801f478:	ea5f 4e2e 	movs.w	lr, lr, asr #16
 801f47c:	d543      	bpl.n	801f506 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x106>
 801f47e:	4698      	mov	r8, r3
 801f480:	eb04 0a43 	add.w	sl, r4, r3, lsl #1
 801f484:	f1b8 0f00 	cmp.w	r8, #0
 801f488:	dc71      	bgt.n	801f56e <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x16e>
 801f48a:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 801f48e:	eb04 0443 	add.w	r4, r4, r3, lsl #1
 801f492:	9b01      	ldr	r3, [sp, #4]
 801f494:	2b00      	cmp	r3, #0
 801f496:	f340 809d 	ble.w	801f5d4 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1d4>
 801f49a:	ee30 0a04 	vadd.f32	s0, s0, s8
 801f49e:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 801f4a0:	ee70 0aa4 	vadd.f32	s1, s1, s9
 801f4a4:	eeb0 6a62 	vmov.f32	s12, s5
 801f4a8:	eec6 7a80 	vdiv.f32	s15, s13, s0
 801f4ac:	ee31 1a05 	vadd.f32	s2, s2, s10
 801f4b0:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 801f4b4:	ed8d 6a0f 	vstr	s12, [sp, #60]	@ 0x3c
 801f4b8:	eeb0 6a43 	vmov.f32	s12, s6
 801f4bc:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 801f4c0:	ed8d 6a10 	vstr	s12, [sp, #64]	@ 0x40
 801f4c4:	ee20 7aa7 	vmul.f32	s14, s1, s15
 801f4c8:	ee61 7a27 	vmul.f32	s15, s2, s15
 801f4cc:	ee77 2a62 	vsub.f32	s5, s14, s5
 801f4d0:	ee37 3ac3 	vsub.f32	s6, s15, s6
 801f4d4:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 801f4d8:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 801f4dc:	ee12 2a90 	vmov	r2, s5
 801f4e0:	eef0 2a47 	vmov.f32	s5, s14
 801f4e4:	fb92 fcf3 	sdiv	ip, r2, r3
 801f4e8:	ee13 2a10 	vmov	r2, s6
 801f4ec:	eeb0 3a67 	vmov.f32	s6, s15
 801f4f0:	fb92 f3f3 	sdiv	r3, r2, r3
 801f4f4:	9312      	str	r3, [sp, #72]	@ 0x48
 801f4f6:	9b01      	ldr	r3, [sp, #4]
 801f4f8:	9a03      	ldr	r2, [sp, #12]
 801f4fa:	3b01      	subs	r3, #1
 801f4fc:	9301      	str	r3, [sp, #4]
 801f4fe:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 801f500:	bf08      	it	eq
 801f502:	4613      	moveq	r3, r2
 801f504:	e793      	b.n	801f42e <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2e>
 801f506:	45ce      	cmp	lr, r9
 801f508:	dab9      	bge.n	801f47e <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7e>
 801f50a:	9912      	ldr	r1, [sp, #72]	@ 0x48
 801f50c:	fb01 2606 	mla	r6, r1, r6, r2
 801f510:	1436      	asrs	r6, r6, #16
 801f512:	d4b4      	bmi.n	801f47e <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7e>
 801f514:	4546      	cmp	r6, r8
 801f516:	dab2      	bge.n	801f47e <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7e>
 801f518:	4698      	mov	r8, r3
 801f51a:	46a2      	mov	sl, r4
 801f51c:	f1b8 0f00 	cmp.w	r8, #0
 801f520:	ddb3      	ble.n	801f48a <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8a>
 801f522:	f9b5 9008 	ldrsh.w	r9, [r5, #8]
 801f526:	1416      	asrs	r6, r2, #16
 801f528:	9902      	ldr	r1, [sp, #8]
 801f52a:	ea4f 4e20 	mov.w	lr, r0, asr #16
 801f52e:	f108 38ff 	add.w	r8, r8, #4294967295
 801f532:	4460      	add	r0, ip
 801f534:	fb09 1606 	mla	r6, r9, r6, r1
 801f538:	4928      	ldr	r1, [pc, #160]	@ (801f5dc <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1dc>)
 801f53a:	f816 e00e 	ldrb.w	lr, [r6, lr]
 801f53e:	eb0e 0e4e 	add.w	lr, lr, lr, lsl #1
 801f542:	eb07 0b0e 	add.w	fp, r7, lr
 801f546:	f89b 6001 	ldrb.w	r6, [fp, #1]
 801f54a:	f89b 9002 	ldrb.w	r9, [fp, #2]
 801f54e:	00f6      	lsls	r6, r6, #3
 801f550:	ea01 2909 	and.w	r9, r1, r9, lsl #8
 801f554:	9912      	ldr	r1, [sp, #72]	@ 0x48
 801f556:	f406 66fc 	and.w	r6, r6, #2016	@ 0x7e0
 801f55a:	440a      	add	r2, r1
 801f55c:	ea49 0606 	orr.w	r6, r9, r6
 801f560:	f817 900e 	ldrb.w	r9, [r7, lr]
 801f564:	ea46 06d9 	orr.w	r6, r6, r9, lsr #3
 801f568:	f82a 6b02 	strh.w	r6, [sl], #2
 801f56c:	e7d6      	b.n	801f51c <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x11c>
 801f56e:	ea5f 4920 	movs.w	r9, r0, asr #16
 801f572:	d429      	bmi.n	801f5c8 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1c8>
 801f574:	68ae      	ldr	r6, [r5, #8]
 801f576:	454e      	cmp	r6, r9
 801f578:	dd26      	ble.n	801f5c8 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1c8>
 801f57a:	ea5f 4b22 	movs.w	fp, r2, asr #16
 801f57e:	d423      	bmi.n	801f5c8 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1c8>
 801f580:	68e9      	ldr	r1, [r5, #12]
 801f582:	4559      	cmp	r1, fp
 801f584:	dd20      	ble.n	801f5c8 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1c8>
 801f586:	fa0f fe86 	sxth.w	lr, r6
 801f58a:	9902      	ldr	r1, [sp, #8]
 801f58c:	fb0b 1e0e 	mla	lr, fp, lr, r1
 801f590:	f06f 0101 	mvn.w	r1, #1
 801f594:	f81e e009 	ldrb.w	lr, [lr, r9]
 801f598:	fb01 f908 	mul.w	r9, r1, r8
 801f59c:	f2a1 71fe 	subw	r1, r1, #2046	@ 0x7fe
 801f5a0:	eb0e 0e4e 	add.w	lr, lr, lr, lsl #1
 801f5a4:	eb07 060e 	add.w	r6, r7, lr
 801f5a8:	f896 b002 	ldrb.w	fp, [r6, #2]
 801f5ac:	7876      	ldrb	r6, [r6, #1]
 801f5ae:	ea01 2b0b 	and.w	fp, r1, fp, lsl #8
 801f5b2:	00f6      	lsls	r6, r6, #3
 801f5b4:	f406 66fc 	and.w	r6, r6, #2016	@ 0x7e0
 801f5b8:	ea4b 0606 	orr.w	r6, fp, r6
 801f5bc:	f817 b00e 	ldrb.w	fp, [r7, lr]
 801f5c0:	ea46 06db 	orr.w	r6, r6, fp, lsr #3
 801f5c4:	f82a 6009 	strh.w	r6, [sl, r9]
 801f5c8:	9912      	ldr	r1, [sp, #72]	@ 0x48
 801f5ca:	4460      	add	r0, ip
 801f5cc:	f108 38ff 	add.w	r8, r8, #4294967295
 801f5d0:	440a      	add	r2, r1
 801f5d2:	e757      	b.n	801f484 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x84>
 801f5d4:	b005      	add	sp, #20
 801f5d6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801f5da:	bf00      	nop
 801f5dc:	fffff800 	.word	0xfffff800

0801f5e0 <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 801f5e0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801f5e4:	b087      	sub	sp, #28
 801f5e6:	468b      	mov	fp, r1
 801f5e8:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 801f5ec:	9815      	ldr	r0, [sp, #84]	@ 0x54
 801f5ee:	9204      	str	r2, [sp, #16]
 801f5f0:	f89d 2064 	ldrb.w	r2, [sp, #100]	@ 0x64
 801f5f4:	6841      	ldr	r1, [r0, #4]
 801f5f6:	9205      	str	r2, [sp, #20]
 801f5f8:	f8dd c060 	ldr.w	ip, [sp, #96]	@ 0x60
 801f5fc:	e9dd 2416 	ldrd	r2, r4, [sp, #88]	@ 0x58
 801f600:	fb01 2404 	mla	r4, r1, r4, r2
 801f604:	6802      	ldr	r2, [r0, #0]
 801f606:	eb02 0444 	add.w	r4, r2, r4, lsl #1
 801f60a:	f8dc 2000 	ldr.w	r2, [ip]
 801f60e:	9201      	str	r2, [sp, #4]
 801f610:	f8dc 2004 	ldr.w	r2, [ip, #4]
 801f614:	3204      	adds	r2, #4
 801f616:	9202      	str	r2, [sp, #8]
 801f618:	f1bb 0f00 	cmp.w	fp, #0
 801f61c:	dc03      	bgt.n	801f626 <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x46>
 801f61e:	9a04      	ldr	r2, [sp, #16]
 801f620:	2a00      	cmp	r2, #0
 801f622:	f340 8138 	ble.w	801f896 <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2b6>
 801f626:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 801f628:	f9bc 7008 	ldrsh.w	r7, [ip, #8]
 801f62c:	f502 4000 	add.w	r0, r2, #32768	@ 0x8000
 801f630:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 801f632:	f9bc 600c 	ldrsh.w	r6, [ip, #12]
 801f636:	f502 4100 	add.w	r1, r2, #32768	@ 0x8000
 801f63a:	2b00      	cmp	r3, #0
 801f63c:	dd0e      	ble.n	801f65c <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7c>
 801f63e:	1402      	asrs	r2, r0, #16
 801f640:	d405      	bmi.n	801f64e <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6e>
 801f642:	42ba      	cmp	r2, r7
 801f644:	da03      	bge.n	801f64e <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6e>
 801f646:	140a      	asrs	r2, r1, #16
 801f648:	d401      	bmi.n	801f64e <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6e>
 801f64a:	42b2      	cmp	r2, r6
 801f64c:	db07      	blt.n	801f65e <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7e>
 801f64e:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 801f650:	3b01      	subs	r3, #1
 801f652:	3402      	adds	r4, #2
 801f654:	4410      	add	r0, r2
 801f656:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 801f658:	4411      	add	r1, r2
 801f65a:	e7ee      	b.n	801f63a <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5a>
 801f65c:	d019      	beq.n	801f692 <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xb2>
 801f65e:	1e5a      	subs	r2, r3, #1
 801f660:	9d13      	ldr	r5, [sp, #76]	@ 0x4c
 801f662:	fb05 0502 	mla	r5, r5, r2, r0
 801f666:	142d      	asrs	r5, r5, #16
 801f668:	d409      	bmi.n	801f67e <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x9e>
 801f66a:	42bd      	cmp	r5, r7
 801f66c:	da07      	bge.n	801f67e <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x9e>
 801f66e:	9d14      	ldr	r5, [sp, #80]	@ 0x50
 801f670:	fb05 1202 	mla	r2, r5, r2, r1
 801f674:	1412      	asrs	r2, r2, #16
 801f676:	d402      	bmi.n	801f67e <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x9e>
 801f678:	42b2      	cmp	r2, r6
 801f67a:	f2c0 80ac 	blt.w	801f7d6 <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1f6>
 801f67e:	f04f 0e00 	mov.w	lr, #0
 801f682:	eb03 020e 	add.w	r2, r3, lr
 801f686:	2a00      	cmp	r2, #0
 801f688:	dc3e      	bgt.n	801f708 <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x128>
 801f68a:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 801f68e:	eb04 0443 	add.w	r4, r4, r3, lsl #1
 801f692:	f1bb 0f00 	cmp.w	fp, #0
 801f696:	f340 80fe 	ble.w	801f896 <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2b6>
 801f69a:	ee30 0a04 	vadd.f32	s0, s0, s8
 801f69e:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 801f6a0:	ee70 0aa4 	vadd.f32	s1, s1, s9
 801f6a4:	f1bb 0b01 	subs.w	fp, fp, #1
 801f6a8:	eeb0 6a62 	vmov.f32	s12, s5
 801f6ac:	eec6 7a80 	vdiv.f32	s15, s13, s0
 801f6b0:	ee31 1a05 	vadd.f32	s2, s2, s10
 801f6b4:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 801f6b8:	ed8d 6a11 	vstr	s12, [sp, #68]	@ 0x44
 801f6bc:	eeb0 6a43 	vmov.f32	s12, s6
 801f6c0:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 801f6c4:	ed8d 6a12 	vstr	s12, [sp, #72]	@ 0x48
 801f6c8:	ee20 7aa7 	vmul.f32	s14, s1, s15
 801f6cc:	ee61 7a27 	vmul.f32	s15, s2, s15
 801f6d0:	ee77 2a62 	vsub.f32	s5, s14, s5
 801f6d4:	ee37 3ac3 	vsub.f32	s6, s15, s6
 801f6d8:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 801f6dc:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 801f6e0:	ee12 2a90 	vmov	r2, s5
 801f6e4:	eef0 2a47 	vmov.f32	s5, s14
 801f6e8:	fb92 f3f3 	sdiv	r3, r2, r3
 801f6ec:	ee13 2a10 	vmov	r2, s6
 801f6f0:	9313      	str	r3, [sp, #76]	@ 0x4c
 801f6f2:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 801f6f4:	eeb0 3a67 	vmov.f32	s6, s15
 801f6f8:	fb92 f3f3 	sdiv	r3, r2, r3
 801f6fc:	9a04      	ldr	r2, [sp, #16]
 801f6fe:	9314      	str	r3, [sp, #80]	@ 0x50
 801f700:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 801f702:	bf08      	it	eq
 801f704:	4613      	moveq	r3, r2
 801f706:	e787      	b.n	801f618 <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x38>
 801f708:	1406      	asrs	r6, r0, #16
 801f70a:	d45d      	bmi.n	801f7c8 <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1e8>
 801f70c:	f8dc 5008 	ldr.w	r5, [ip, #8]
 801f710:	42b5      	cmp	r5, r6
 801f712:	dd59      	ble.n	801f7c8 <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1e8>
 801f714:	140f      	asrs	r7, r1, #16
 801f716:	d457      	bmi.n	801f7c8 <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1e8>
 801f718:	f8dc 200c 	ldr.w	r2, [ip, #12]
 801f71c:	42ba      	cmp	r2, r7
 801f71e:	dd53      	ble.n	801f7c8 <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1e8>
 801f720:	9a01      	ldr	r2, [sp, #4]
 801f722:	b22d      	sxth	r5, r5
 801f724:	fb07 2505 	mla	r5, r7, r5, r2
 801f728:	5daa      	ldrb	r2, [r5, r6]
 801f72a:	9d02      	ldr	r5, [sp, #8]
 801f72c:	f855 5022 	ldr.w	r5, [r5, r2, lsl #2]
 801f730:	0e2e      	lsrs	r6, r5, #24
 801f732:	d049      	beq.n	801f7c8 <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1e8>
 801f734:	f06f 0201 	mvn.w	r2, #1
 801f738:	f3c5 2a07 	ubfx	sl, r5, #8, #8
 801f73c:	fb02 f20e 	mul.w	r2, r2, lr
 801f740:	f834 8002 	ldrh.w	r8, [r4, r2]
 801f744:	9203      	str	r2, [sp, #12]
 801f746:	9a05      	ldr	r2, [sp, #20]
 801f748:	ea4f 2728 	mov.w	r7, r8, asr #8
 801f74c:	4356      	muls	r6, r2
 801f74e:	f007 07f8 	and.w	r7, r7, #248	@ 0xf8
 801f752:	1c72      	adds	r2, r6, #1
 801f754:	eb02 2226 	add.w	r2, r2, r6, asr #8
 801f758:	f3c5 4607 	ubfx	r6, r5, #16, #8
 801f75c:	b2ed      	uxtb	r5, r5
 801f75e:	1212      	asrs	r2, r2, #8
 801f760:	fa1f f982 	uxth.w	r9, r2
 801f764:	43d2      	mvns	r2, r2
 801f766:	fb16 f609 	smulbb	r6, r6, r9
 801f76a:	b2d2      	uxtb	r2, r2
 801f76c:	fb15 f509 	smulbb	r5, r5, r9
 801f770:	fb07 6702 	mla	r7, r7, r2, r6
 801f774:	ea4f 06e8 	mov.w	r6, r8, asr #3
 801f778:	fb1a fa09 	smulbb	sl, sl, r9
 801f77c:	ea4f 08c8 	mov.w	r8, r8, lsl #3
 801f780:	b2bf      	uxth	r7, r7
 801f782:	f006 06fc 	and.w	r6, r6, #252	@ 0xfc
 801f786:	fa5f f888 	uxtb.w	r8, r8
 801f78a:	fb06 a602 	mla	r6, r6, r2, sl
 801f78e:	fb08 5502 	mla	r5, r8, r2, r5
 801f792:	1c7a      	adds	r2, r7, #1
 801f794:	b2b6      	uxth	r6, r6
 801f796:	b2ad      	uxth	r5, r5
 801f798:	eb02 2717 	add.w	r7, r2, r7, lsr #8
 801f79c:	9a03      	ldr	r2, [sp, #12]
 801f79e:	f105 0a01 	add.w	sl, r5, #1
 801f7a2:	f407 4778 	and.w	r7, r7, #63488	@ 0xf800
 801f7a6:	eb0a 2a15 	add.w	sl, sl, r5, lsr #8
 801f7aa:	f3ca 2ac4 	ubfx	sl, sl, #11, #5
 801f7ae:	ea4a 0707 	orr.w	r7, sl, r7
 801f7b2:	f106 0a01 	add.w	sl, r6, #1
 801f7b6:	eb0a 2a16 	add.w	sl, sl, r6, lsr #8
 801f7ba:	ea4f 1a5a 	mov.w	sl, sl, lsr #5
 801f7be:	f40a 6afc 	and.w	sl, sl, #2016	@ 0x7e0
 801f7c2:	ea47 070a 	orr.w	r7, r7, sl
 801f7c6:	52a7      	strh	r7, [r4, r2]
 801f7c8:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 801f7ca:	f10e 3eff 	add.w	lr, lr, #4294967295
 801f7ce:	4410      	add	r0, r2
 801f7d0:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 801f7d2:	4411      	add	r1, r2
 801f7d4:	e755      	b.n	801f682 <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa2>
 801f7d6:	f04f 0800 	mov.w	r8, #0
 801f7da:	eba3 0208 	sub.w	r2, r3, r8
 801f7de:	2a00      	cmp	r2, #0
 801f7e0:	f77f af53 	ble.w	801f68a <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xaa>
 801f7e4:	f9bc 6008 	ldrsh.w	r6, [ip, #8]
 801f7e8:	140a      	asrs	r2, r1, #16
 801f7ea:	9f01      	ldr	r7, [sp, #4]
 801f7ec:	1405      	asrs	r5, r0, #16
 801f7ee:	fb06 7202 	mla	r2, r6, r2, r7
 801f7f2:	5d52      	ldrb	r2, [r2, r5]
 801f7f4:	9d02      	ldr	r5, [sp, #8]
 801f7f6:	f855 5022 	ldr.w	r5, [r5, r2, lsl #2]
 801f7fa:	0e2e      	lsrs	r6, r5, #24
 801f7fc:	d044      	beq.n	801f888 <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2a8>
 801f7fe:	9a05      	ldr	r2, [sp, #20]
 801f800:	f3c5 2a07 	ubfx	sl, r5, #8, #8
 801f804:	f834 e018 	ldrh.w	lr, [r4, r8, lsl #1]
 801f808:	4356      	muls	r6, r2
 801f80a:	ea4f 272e 	mov.w	r7, lr, asr #8
 801f80e:	1c72      	adds	r2, r6, #1
 801f810:	f007 07f8 	and.w	r7, r7, #248	@ 0xf8
 801f814:	eb02 2226 	add.w	r2, r2, r6, asr #8
 801f818:	f3c5 4607 	ubfx	r6, r5, #16, #8
 801f81c:	b2ed      	uxtb	r5, r5
 801f81e:	1212      	asrs	r2, r2, #8
 801f820:	fa1f f982 	uxth.w	r9, r2
 801f824:	43d2      	mvns	r2, r2
 801f826:	fb16 f609 	smulbb	r6, r6, r9
 801f82a:	b2d2      	uxtb	r2, r2
 801f82c:	fb15 f509 	smulbb	r5, r5, r9
 801f830:	fb07 6702 	mla	r7, r7, r2, r6
 801f834:	ea4f 06ee 	mov.w	r6, lr, asr #3
 801f838:	fb1a fa09 	smulbb	sl, sl, r9
 801f83c:	ea4f 0ece 	mov.w	lr, lr, lsl #3
 801f840:	b2bf      	uxth	r7, r7
 801f842:	f006 06fc 	and.w	r6, r6, #252	@ 0xfc
 801f846:	fa5f fe8e 	uxtb.w	lr, lr
 801f84a:	fb06 a602 	mla	r6, r6, r2, sl
 801f84e:	fb0e 5502 	mla	r5, lr, r2, r5
 801f852:	1c7a      	adds	r2, r7, #1
 801f854:	b2b6      	uxth	r6, r6
 801f856:	b2ad      	uxth	r5, r5
 801f858:	eb02 2717 	add.w	r7, r2, r7, lsr #8
 801f85c:	f105 0a01 	add.w	sl, r5, #1
 801f860:	f407 4778 	and.w	r7, r7, #63488	@ 0xf800
 801f864:	eb0a 2a15 	add.w	sl, sl, r5, lsr #8
 801f868:	f3ca 2ac4 	ubfx	sl, sl, #11, #5
 801f86c:	ea4a 0707 	orr.w	r7, sl, r7
 801f870:	f106 0a01 	add.w	sl, r6, #1
 801f874:	eb0a 2a16 	add.w	sl, sl, r6, lsr #8
 801f878:	ea4f 1a5a 	mov.w	sl, sl, lsr #5
 801f87c:	f40a 6afc 	and.w	sl, sl, #2016	@ 0x7e0
 801f880:	ea47 070a 	orr.w	r7, r7, sl
 801f884:	f824 7018 	strh.w	r7, [r4, r8, lsl #1]
 801f888:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 801f88a:	f108 0801 	add.w	r8, r8, #1
 801f88e:	4410      	add	r0, r2
 801f890:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 801f892:	4411      	add	r1, r2
 801f894:	e7a1      	b.n	801f7da <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1fa>
 801f896:	b007      	add	sp, #28
 801f898:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0801f89c <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 801f89c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801f8a0:	b085      	sub	sp, #20
 801f8a2:	468b      	mov	fp, r1
 801f8a4:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 801f8a8:	9813      	ldr	r0, [sp, #76]	@ 0x4c
 801f8aa:	9203      	str	r2, [sp, #12]
 801f8ac:	6841      	ldr	r1, [r0, #4]
 801f8ae:	f8dd e058 	ldr.w	lr, [sp, #88]	@ 0x58
 801f8b2:	e9dd 2414 	ldrd	r2, r4, [sp, #80]	@ 0x50
 801f8b6:	fb01 2404 	mla	r4, r1, r4, r2
 801f8ba:	6802      	ldr	r2, [r0, #0]
 801f8bc:	eb02 0444 	add.w	r4, r2, r4, lsl #1
 801f8c0:	f8de 2000 	ldr.w	r2, [lr]
 801f8c4:	9200      	str	r2, [sp, #0]
 801f8c6:	f8de 2004 	ldr.w	r2, [lr, #4]
 801f8ca:	3204      	adds	r2, #4
 801f8cc:	9201      	str	r2, [sp, #4]
 801f8ce:	f1bb 0f00 	cmp.w	fp, #0
 801f8d2:	dc03      	bgt.n	801f8dc <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x40>
 801f8d4:	9a03      	ldr	r2, [sp, #12]
 801f8d6:	2a00      	cmp	r2, #0
 801f8d8:	f340 8153 	ble.w	801fb82 <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2e6>
 801f8dc:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 801f8de:	f9be 7008 	ldrsh.w	r7, [lr, #8]
 801f8e2:	f502 4100 	add.w	r1, r2, #32768	@ 0x8000
 801f8e6:	9a10      	ldr	r2, [sp, #64]	@ 0x40
 801f8e8:	f9be 600c 	ldrsh.w	r6, [lr, #12]
 801f8ec:	f502 4200 	add.w	r2, r2, #32768	@ 0x8000
 801f8f0:	2b00      	cmp	r3, #0
 801f8f2:	dd0e      	ble.n	801f912 <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x76>
 801f8f4:	1408      	asrs	r0, r1, #16
 801f8f6:	d405      	bmi.n	801f904 <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x68>
 801f8f8:	42b8      	cmp	r0, r7
 801f8fa:	da03      	bge.n	801f904 <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x68>
 801f8fc:	1410      	asrs	r0, r2, #16
 801f8fe:	d401      	bmi.n	801f904 <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x68>
 801f900:	42b0      	cmp	r0, r6
 801f902:	db07      	blt.n	801f914 <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x78>
 801f904:	9811      	ldr	r0, [sp, #68]	@ 0x44
 801f906:	3b01      	subs	r3, #1
 801f908:	3402      	adds	r4, #2
 801f90a:	4401      	add	r1, r0
 801f90c:	9812      	ldr	r0, [sp, #72]	@ 0x48
 801f90e:	4402      	add	r2, r0
 801f910:	e7ee      	b.n	801f8f0 <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x54>
 801f912:	d017      	beq.n	801f944 <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa8>
 801f914:	1e58      	subs	r0, r3, #1
 801f916:	9d11      	ldr	r5, [sp, #68]	@ 0x44
 801f918:	fb05 1500 	mla	r5, r5, r0, r1
 801f91c:	142d      	asrs	r5, r5, #16
 801f91e:	d409      	bmi.n	801f934 <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x98>
 801f920:	42bd      	cmp	r5, r7
 801f922:	da07      	bge.n	801f934 <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x98>
 801f924:	9d12      	ldr	r5, [sp, #72]	@ 0x48
 801f926:	fb05 2000 	mla	r0, r5, r0, r2
 801f92a:	1400      	asrs	r0, r0, #16
 801f92c:	d402      	bmi.n	801f934 <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x98>
 801f92e:	42b0      	cmp	r0, r6
 801f930:	f2c0 80bc 	blt.w	801faac <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x210>
 801f934:	2600      	movs	r6, #0
 801f936:	1998      	adds	r0, r3, r6
 801f938:	2800      	cmp	r0, #0
 801f93a:	dc3e      	bgt.n	801f9ba <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x11e>
 801f93c:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 801f940:	eb04 0443 	add.w	r4, r4, r3, lsl #1
 801f944:	f1bb 0f00 	cmp.w	fp, #0
 801f948:	f340 811b 	ble.w	801fb82 <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2e6>
 801f94c:	ee30 0a04 	vadd.f32	s0, s0, s8
 801f950:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 801f952:	ee70 0aa4 	vadd.f32	s1, s1, s9
 801f956:	f1bb 0b01 	subs.w	fp, fp, #1
 801f95a:	eeb0 6a62 	vmov.f32	s12, s5
 801f95e:	eec6 7a80 	vdiv.f32	s15, s13, s0
 801f962:	ee31 1a05 	vadd.f32	s2, s2, s10
 801f966:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 801f96a:	ed8d 6a0f 	vstr	s12, [sp, #60]	@ 0x3c
 801f96e:	eeb0 6a43 	vmov.f32	s12, s6
 801f972:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 801f976:	ed8d 6a10 	vstr	s12, [sp, #64]	@ 0x40
 801f97a:	ee20 7aa7 	vmul.f32	s14, s1, s15
 801f97e:	ee61 7a27 	vmul.f32	s15, s2, s15
 801f982:	ee77 2a62 	vsub.f32	s5, s14, s5
 801f986:	ee37 3ac3 	vsub.f32	s6, s15, s6
 801f98a:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 801f98e:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 801f992:	ee12 2a90 	vmov	r2, s5
 801f996:	eef0 2a47 	vmov.f32	s5, s14
 801f99a:	fb92 f3f3 	sdiv	r3, r2, r3
 801f99e:	ee13 2a10 	vmov	r2, s6
 801f9a2:	9311      	str	r3, [sp, #68]	@ 0x44
 801f9a4:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 801f9a6:	eeb0 3a67 	vmov.f32	s6, s15
 801f9aa:	fb92 f3f3 	sdiv	r3, r2, r3
 801f9ae:	9a03      	ldr	r2, [sp, #12]
 801f9b0:	9312      	str	r3, [sp, #72]	@ 0x48
 801f9b2:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 801f9b4:	bf08      	it	eq
 801f9b6:	4613      	moveq	r3, r2
 801f9b8:	e789      	b.n	801f8ce <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x32>
 801f9ba:	140f      	asrs	r7, r1, #16
 801f9bc:	d426      	bmi.n	801fa0c <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x170>
 801f9be:	f8de 5008 	ldr.w	r5, [lr, #8]
 801f9c2:	42bd      	cmp	r5, r7
 801f9c4:	dd22      	ble.n	801fa0c <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x170>
 801f9c6:	ea5f 4c22 	movs.w	ip, r2, asr #16
 801f9ca:	d41f      	bmi.n	801fa0c <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x170>
 801f9cc:	f8de 000c 	ldr.w	r0, [lr, #12]
 801f9d0:	4560      	cmp	r0, ip
 801f9d2:	dd1b      	ble.n	801fa0c <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x170>
 801f9d4:	9800      	ldr	r0, [sp, #0]
 801f9d6:	b22d      	sxth	r5, r5
 801f9d8:	fb0c 0505 	mla	r5, ip, r5, r0
 801f9dc:	5de8      	ldrb	r0, [r5, r7]
 801f9de:	9d01      	ldr	r5, [sp, #4]
 801f9e0:	f855 0020 	ldr.w	r0, [r5, r0, lsl #2]
 801f9e4:	0e07      	lsrs	r7, r0, #24
 801f9e6:	2fff      	cmp	r7, #255	@ 0xff
 801f9e8:	d116      	bne.n	801fa18 <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x17c>
 801f9ea:	f06f 0501 	mvn.w	r5, #1
 801f9ee:	fb05 f706 	mul.w	r7, r5, r6
 801f9f2:	f2a5 75fe 	subw	r5, r5, #2046	@ 0x7fe
 801f9f6:	ea05 2c10 	and.w	ip, r5, r0, lsr #8
 801f9fa:	0945      	lsrs	r5, r0, #5
 801f9fc:	f3c0 00c4 	ubfx	r0, r0, #3, #5
 801fa00:	f405 65fc 	and.w	r5, r5, #2016	@ 0x7e0
 801fa04:	ea4c 0505 	orr.w	r5, ip, r5
 801fa08:	4305      	orrs	r5, r0
 801fa0a:	53e5      	strh	r5, [r4, r7]
 801fa0c:	9811      	ldr	r0, [sp, #68]	@ 0x44
 801fa0e:	3e01      	subs	r6, #1
 801fa10:	4401      	add	r1, r0
 801fa12:	9812      	ldr	r0, [sp, #72]	@ 0x48
 801fa14:	4402      	add	r2, r0
 801fa16:	e78e      	b.n	801f936 <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x9a>
 801fa18:	b2fd      	uxtb	r5, r7
 801fa1a:	2f00      	cmp	r7, #0
 801fa1c:	d0f6      	beq.n	801fa0c <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x170>
 801fa1e:	f06f 0701 	mvn.w	r7, #1
 801fa22:	fa1f f985 	uxth.w	r9, r5
 801fa26:	43ed      	mvns	r5, r5
 801fa28:	f3c0 2a07 	ubfx	sl, r0, #8, #8
 801fa2c:	4377      	muls	r7, r6
 801fa2e:	fb1a fa09 	smulbb	sl, sl, r9
 801fa32:	b2ed      	uxtb	r5, r5
 801fa34:	f834 8007 	ldrh.w	r8, [r4, r7]
 801fa38:	9702      	str	r7, [sp, #8]
 801fa3a:	f3c0 4707 	ubfx	r7, r0, #16, #8
 801fa3e:	ea4f 2c28 	mov.w	ip, r8, asr #8
 801fa42:	fb17 f709 	smulbb	r7, r7, r9
 801fa46:	b2c0      	uxtb	r0, r0
 801fa48:	f00c 0cf8 	and.w	ip, ip, #248	@ 0xf8
 801fa4c:	fb10 f009 	smulbb	r0, r0, r9
 801fa50:	fb0c 7c05 	mla	ip, ip, r5, r7
 801fa54:	ea4f 07e8 	mov.w	r7, r8, asr #3
 801fa58:	ea4f 08c8 	mov.w	r8, r8, lsl #3
 801fa5c:	fa1f fc8c 	uxth.w	ip, ip
 801fa60:	f007 07fc 	and.w	r7, r7, #252	@ 0xfc
 801fa64:	fa5f f888 	uxtb.w	r8, r8
 801fa68:	fb07 a705 	mla	r7, r7, r5, sl
 801fa6c:	fb08 0005 	mla	r0, r8, r5, r0
 801fa70:	f10c 0501 	add.w	r5, ip, #1
 801fa74:	b2bf      	uxth	r7, r7
 801fa76:	b280      	uxth	r0, r0
 801fa78:	eb05 2c1c 	add.w	ip, r5, ip, lsr #8
 801fa7c:	f100 0a01 	add.w	sl, r0, #1
 801fa80:	f40c 4c78 	and.w	ip, ip, #63488	@ 0xf800
 801fa84:	eb0a 2a10 	add.w	sl, sl, r0, lsr #8
 801fa88:	9802      	ldr	r0, [sp, #8]
 801fa8a:	f3ca 2ac4 	ubfx	sl, sl, #11, #5
 801fa8e:	ea4a 0c0c 	orr.w	ip, sl, ip
 801fa92:	f107 0a01 	add.w	sl, r7, #1
 801fa96:	eb0a 2a17 	add.w	sl, sl, r7, lsr #8
 801fa9a:	ea4f 1a5a 	mov.w	sl, sl, lsr #5
 801fa9e:	f40a 6afc 	and.w	sl, sl, #2016	@ 0x7e0
 801faa2:	ea4c 0c0a 	orr.w	ip, ip, sl
 801faa6:	f824 c000 	strh.w	ip, [r4, r0]
 801faaa:	e7af      	b.n	801fa0c <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x170>
 801faac:	f04f 0800 	mov.w	r8, #0
 801fab0:	eba3 0008 	sub.w	r0, r3, r8
 801fab4:	2800      	cmp	r0, #0
 801fab6:	f77f af41 	ble.w	801f93c <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa0>
 801faba:	f9be 6008 	ldrsh.w	r6, [lr, #8]
 801fabe:	1410      	asrs	r0, r2, #16
 801fac0:	9f00      	ldr	r7, [sp, #0]
 801fac2:	140d      	asrs	r5, r1, #16
 801fac4:	fb06 7000 	mla	r0, r6, r0, r7
 801fac8:	5d40      	ldrb	r0, [r0, r5]
 801faca:	9d01      	ldr	r5, [sp, #4]
 801facc:	f855 5020 	ldr.w	r5, [r5, r0, lsl #2]
 801fad0:	0e2e      	lsrs	r6, r5, #24
 801fad2:	2eff      	cmp	r6, #255	@ 0xff
 801fad4:	d112      	bne.n	801fafc <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x260>
 801fad6:	482c      	ldr	r0, [pc, #176]	@ (801fb88 <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2ec>)
 801fad8:	ea00 2615 	and.w	r6, r0, r5, lsr #8
 801fadc:	0968      	lsrs	r0, r5, #5
 801fade:	f3c5 05c4 	ubfx	r5, r5, #3, #5
 801fae2:	f400 60fc 	and.w	r0, r0, #2016	@ 0x7e0
 801fae6:	4330      	orrs	r0, r6
 801fae8:	4328      	orrs	r0, r5
 801faea:	f824 0018 	strh.w	r0, [r4, r8, lsl #1]
 801faee:	9811      	ldr	r0, [sp, #68]	@ 0x44
 801faf0:	f108 0801 	add.w	r8, r8, #1
 801faf4:	4401      	add	r1, r0
 801faf6:	9812      	ldr	r0, [sp, #72]	@ 0x48
 801faf8:	4402      	add	r2, r0
 801fafa:	e7d9      	b.n	801fab0 <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x214>
 801fafc:	b2f0      	uxtb	r0, r6
 801fafe:	2e00      	cmp	r6, #0
 801fb00:	d0f5      	beq.n	801faee <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x252>
 801fb02:	f834 c018 	ldrh.w	ip, [r4, r8, lsl #1]
 801fb06:	fa1f f980 	uxth.w	r9, r0
 801fb0a:	f3c5 4607 	ubfx	r6, r5, #16, #8
 801fb0e:	43c0      	mvns	r0, r0
 801fb10:	ea4f 272c 	mov.w	r7, ip, asr #8
 801fb14:	f3c5 2a07 	ubfx	sl, r5, #8, #8
 801fb18:	fb16 f609 	smulbb	r6, r6, r9
 801fb1c:	b2c0      	uxtb	r0, r0
 801fb1e:	f007 07f8 	and.w	r7, r7, #248	@ 0xf8
 801fb22:	b2ed      	uxtb	r5, r5
 801fb24:	fb1a fa09 	smulbb	sl, sl, r9
 801fb28:	fb07 6700 	mla	r7, r7, r0, r6
 801fb2c:	ea4f 06ec 	mov.w	r6, ip, asr #3
 801fb30:	fb15 f509 	smulbb	r5, r5, r9
 801fb34:	ea4f 0ccc 	mov.w	ip, ip, lsl #3
 801fb38:	b2bf      	uxth	r7, r7
 801fb3a:	f006 06fc 	and.w	r6, r6, #252	@ 0xfc
 801fb3e:	fa5f fc8c 	uxtb.w	ip, ip
 801fb42:	fb06 a600 	mla	r6, r6, r0, sl
 801fb46:	fb0c 5500 	mla	r5, ip, r0, r5
 801fb4a:	1c78      	adds	r0, r7, #1
 801fb4c:	b2b6      	uxth	r6, r6
 801fb4e:	b2ad      	uxth	r5, r5
 801fb50:	eb00 2717 	add.w	r7, r0, r7, lsr #8
 801fb54:	f105 0a01 	add.w	sl, r5, #1
 801fb58:	f407 4778 	and.w	r7, r7, #63488	@ 0xf800
 801fb5c:	eb0a 2a15 	add.w	sl, sl, r5, lsr #8
 801fb60:	f3ca 2ac4 	ubfx	sl, sl, #11, #5
 801fb64:	ea4a 0707 	orr.w	r7, sl, r7
 801fb68:	f106 0a01 	add.w	sl, r6, #1
 801fb6c:	eb0a 2a16 	add.w	sl, sl, r6, lsr #8
 801fb70:	ea4f 1a5a 	mov.w	sl, sl, lsr #5
 801fb74:	f40a 6afc 	and.w	sl, sl, #2016	@ 0x7e0
 801fb78:	ea47 070a 	orr.w	r7, r7, sl
 801fb7c:	f824 7018 	strh.w	r7, [r4, r8, lsl #1]
 801fb80:	e7b5      	b.n	801faee <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x252>
 801fb82:	b005      	add	sp, #20
 801fb84:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801fb88:	fffff800 	.word	0xfffff800

0801fb8c <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 801fb8c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801fb90:	b087      	sub	sp, #28
 801fb92:	468b      	mov	fp, r1
 801fb94:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 801fb98:	9c15      	ldr	r4, [sp, #84]	@ 0x54
 801fb9a:	9204      	str	r2, [sp, #16]
 801fb9c:	f89d 2064 	ldrb.w	r2, [sp, #100]	@ 0x64
 801fba0:	6861      	ldr	r1, [r4, #4]
 801fba2:	9205      	str	r2, [sp, #20]
 801fba4:	f8dd e060 	ldr.w	lr, [sp, #96]	@ 0x60
 801fba8:	e9dd 2016 	ldrd	r2, r0, [sp, #88]	@ 0x58
 801fbac:	fb01 2000 	mla	r0, r1, r0, r2
 801fbb0:	6822      	ldr	r2, [r4, #0]
 801fbb2:	eb02 0040 	add.w	r0, r2, r0, lsl #1
 801fbb6:	f8de 2000 	ldr.w	r2, [lr]
 801fbba:	9201      	str	r2, [sp, #4]
 801fbbc:	f8de 2004 	ldr.w	r2, [lr, #4]
 801fbc0:	9202      	str	r2, [sp, #8]
 801fbc2:	f1bb 0f00 	cmp.w	fp, #0
 801fbc6:	dc03      	bgt.n	801fbd0 <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x44>
 801fbc8:	9a04      	ldr	r2, [sp, #16]
 801fbca:	2a00      	cmp	r2, #0
 801fbcc:	f340 8142 	ble.w	801fe54 <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2c8>
 801fbd0:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 801fbd2:	f9be 7008 	ldrsh.w	r7, [lr, #8]
 801fbd6:	f502 4100 	add.w	r1, r2, #32768	@ 0x8000
 801fbda:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 801fbdc:	f9be 600c 	ldrsh.w	r6, [lr, #12]
 801fbe0:	f502 4200 	add.w	r2, r2, #32768	@ 0x8000
 801fbe4:	2b00      	cmp	r3, #0
 801fbe6:	dd0e      	ble.n	801fc06 <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7a>
 801fbe8:	140c      	asrs	r4, r1, #16
 801fbea:	d405      	bmi.n	801fbf8 <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6c>
 801fbec:	42bc      	cmp	r4, r7
 801fbee:	da03      	bge.n	801fbf8 <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6c>
 801fbf0:	1414      	asrs	r4, r2, #16
 801fbf2:	d401      	bmi.n	801fbf8 <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6c>
 801fbf4:	42b4      	cmp	r4, r6
 801fbf6:	db07      	blt.n	801fc08 <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7c>
 801fbf8:	9c13      	ldr	r4, [sp, #76]	@ 0x4c
 801fbfa:	3b01      	subs	r3, #1
 801fbfc:	3002      	adds	r0, #2
 801fbfe:	4421      	add	r1, r4
 801fc00:	9c14      	ldr	r4, [sp, #80]	@ 0x50
 801fc02:	4422      	add	r2, r4
 801fc04:	e7ee      	b.n	801fbe4 <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x58>
 801fc06:	d019      	beq.n	801fc3c <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xb0>
 801fc08:	1e5c      	subs	r4, r3, #1
 801fc0a:	9d13      	ldr	r5, [sp, #76]	@ 0x4c
 801fc0c:	fb05 1504 	mla	r5, r5, r4, r1
 801fc10:	142d      	asrs	r5, r5, #16
 801fc12:	d409      	bmi.n	801fc28 <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x9c>
 801fc14:	42bd      	cmp	r5, r7
 801fc16:	da07      	bge.n	801fc28 <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x9c>
 801fc18:	9d14      	ldr	r5, [sp, #80]	@ 0x50
 801fc1a:	fb05 2404 	mla	r4, r5, r4, r2
 801fc1e:	1424      	asrs	r4, r4, #16
 801fc20:	d402      	bmi.n	801fc28 <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x9c>
 801fc22:	42b4      	cmp	r4, r6
 801fc24:	f2c0 80b1 	blt.w	801fd8a <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1fe>
 801fc28:	f04f 0800 	mov.w	r8, #0
 801fc2c:	eb03 0408 	add.w	r4, r3, r8
 801fc30:	2c00      	cmp	r4, #0
 801fc32:	dc3e      	bgt.n	801fcb2 <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x126>
 801fc34:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 801fc38:	eb00 0043 	add.w	r0, r0, r3, lsl #1
 801fc3c:	f1bb 0f00 	cmp.w	fp, #0
 801fc40:	f340 8108 	ble.w	801fe54 <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2c8>
 801fc44:	ee30 0a04 	vadd.f32	s0, s0, s8
 801fc48:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 801fc4a:	ee70 0aa4 	vadd.f32	s1, s1, s9
 801fc4e:	f1bb 0b01 	subs.w	fp, fp, #1
 801fc52:	eeb0 6a62 	vmov.f32	s12, s5
 801fc56:	eec6 7a80 	vdiv.f32	s15, s13, s0
 801fc5a:	ee31 1a05 	vadd.f32	s2, s2, s10
 801fc5e:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 801fc62:	ed8d 6a11 	vstr	s12, [sp, #68]	@ 0x44
 801fc66:	eeb0 6a43 	vmov.f32	s12, s6
 801fc6a:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 801fc6e:	ed8d 6a12 	vstr	s12, [sp, #72]	@ 0x48
 801fc72:	ee20 7aa7 	vmul.f32	s14, s1, s15
 801fc76:	ee61 7a27 	vmul.f32	s15, s2, s15
 801fc7a:	ee77 2a62 	vsub.f32	s5, s14, s5
 801fc7e:	ee37 3ac3 	vsub.f32	s6, s15, s6
 801fc82:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 801fc86:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 801fc8a:	ee12 2a90 	vmov	r2, s5
 801fc8e:	eef0 2a47 	vmov.f32	s5, s14
 801fc92:	fb92 f3f3 	sdiv	r3, r2, r3
 801fc96:	ee13 2a10 	vmov	r2, s6
 801fc9a:	9313      	str	r3, [sp, #76]	@ 0x4c
 801fc9c:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 801fc9e:	eeb0 3a67 	vmov.f32	s6, s15
 801fca2:	fb92 f3f3 	sdiv	r3, r2, r3
 801fca6:	9a04      	ldr	r2, [sp, #16]
 801fca8:	9314      	str	r3, [sp, #80]	@ 0x50
 801fcaa:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 801fcac:	bf08      	it	eq
 801fcae:	4613      	moveq	r3, r2
 801fcb0:	e787      	b.n	801fbc2 <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x36>
 801fcb2:	140e      	asrs	r6, r1, #16
 801fcb4:	d462      	bmi.n	801fd7c <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1f0>
 801fcb6:	f8de 5008 	ldr.w	r5, [lr, #8]
 801fcba:	42b5      	cmp	r5, r6
 801fcbc:	dd5e      	ble.n	801fd7c <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1f0>
 801fcbe:	1417      	asrs	r7, r2, #16
 801fcc0:	d45c      	bmi.n	801fd7c <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1f0>
 801fcc2:	f8de 400c 	ldr.w	r4, [lr, #12]
 801fcc6:	42bc      	cmp	r4, r7
 801fcc8:	dd58      	ble.n	801fd7c <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1f0>
 801fcca:	b22d      	sxth	r5, r5
 801fccc:	9c02      	ldr	r4, [sp, #8]
 801fcce:	fb07 6505 	mla	r5, r7, r5, r6
 801fcd2:	5d66      	ldrb	r6, [r4, r5]
 801fcd4:	2e00      	cmp	r6, #0
 801fcd6:	d051      	beq.n	801fd7c <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1f0>
 801fcd8:	9c01      	ldr	r4, [sp, #4]
 801fcda:	f834 9015 	ldrh.w	r9, [r4, r5, lsl #1]
 801fcde:	f06f 0401 	mvn.w	r4, #1
 801fce2:	fb04 f408 	mul.w	r4, r4, r8
 801fce6:	ea4f 2c29 	mov.w	ip, r9, asr #8
 801fcea:	5b05      	ldrh	r5, [r0, r4]
 801fcec:	f00c 0cf8 	and.w	ip, ip, #248	@ 0xf8
 801fcf0:	9403      	str	r4, [sp, #12]
 801fcf2:	9c05      	ldr	r4, [sp, #20]
 801fcf4:	ea4f 0ae5 	mov.w	sl, r5, asr #3
 801fcf8:	4366      	muls	r6, r4
 801fcfa:	f00a 0afc 	and.w	sl, sl, #252	@ 0xfc
 801fcfe:	1c74      	adds	r4, r6, #1
 801fd00:	eb04 2416 	add.w	r4, r4, r6, lsr #8
 801fd04:	122e      	asrs	r6, r5, #8
 801fd06:	1224      	asrs	r4, r4, #8
 801fd08:	f006 06f8 	and.w	r6, r6, #248	@ 0xf8
 801fd0c:	00ed      	lsls	r5, r5, #3
 801fd0e:	b2a7      	uxth	r7, r4
 801fd10:	43e4      	mvns	r4, r4
 801fd12:	b2ed      	uxtb	r5, r5
 801fd14:	b2e4      	uxtb	r4, r4
 801fd16:	fb16 f604 	smulbb	r6, r6, r4
 801fd1a:	fb15 f504 	smulbb	r5, r5, r4
 801fd1e:	fb0c 6c07 	mla	ip, ip, r7, r6
 801fd22:	ea4f 06e9 	mov.w	r6, r9, asr #3
 801fd26:	fb1a fa04 	smulbb	sl, sl, r4
 801fd2a:	ea4f 09c9 	mov.w	r9, r9, lsl #3
 801fd2e:	fa1f fc8c 	uxth.w	ip, ip
 801fd32:	f006 06fc 	and.w	r6, r6, #252	@ 0xfc
 801fd36:	fa5f f989 	uxtb.w	r9, r9
 801fd3a:	fb06 a607 	mla	r6, r6, r7, sl
 801fd3e:	f10c 0401 	add.w	r4, ip, #1
 801fd42:	fb09 5507 	mla	r5, r9, r7, r5
 801fd46:	eb04 2c1c 	add.w	ip, r4, ip, lsr #8
 801fd4a:	9c03      	ldr	r4, [sp, #12]
 801fd4c:	b2ad      	uxth	r5, r5
 801fd4e:	b2b6      	uxth	r6, r6
 801fd50:	f40c 4c78 	and.w	ip, ip, #63488	@ 0xf800
 801fd54:	f105 0a01 	add.w	sl, r5, #1
 801fd58:	eb0a 2a15 	add.w	sl, sl, r5, lsr #8
 801fd5c:	f3ca 2ac4 	ubfx	sl, sl, #11, #5
 801fd60:	ea4a 0c0c 	orr.w	ip, sl, ip
 801fd64:	f106 0a01 	add.w	sl, r6, #1
 801fd68:	eb0a 2a16 	add.w	sl, sl, r6, lsr #8
 801fd6c:	ea4f 1a5a 	mov.w	sl, sl, lsr #5
 801fd70:	f40a 6afc 	and.w	sl, sl, #2016	@ 0x7e0
 801fd74:	ea4c 0c0a 	orr.w	ip, ip, sl
 801fd78:	f820 c004 	strh.w	ip, [r0, r4]
 801fd7c:	9c13      	ldr	r4, [sp, #76]	@ 0x4c
 801fd7e:	f108 38ff 	add.w	r8, r8, #4294967295
 801fd82:	4421      	add	r1, r4
 801fd84:	9c14      	ldr	r4, [sp, #80]	@ 0x50
 801fd86:	4422      	add	r2, r4
 801fd88:	e750      	b.n	801fc2c <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa0>
 801fd8a:	f04f 0900 	mov.w	r9, #0
 801fd8e:	eba3 0409 	sub.w	r4, r3, r9
 801fd92:	2c00      	cmp	r4, #0
 801fd94:	f77f af4e 	ble.w	801fc34 <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa8>
 801fd98:	f9be 6008 	ldrsh.w	r6, [lr, #8]
 801fd9c:	140d      	asrs	r5, r1, #16
 801fd9e:	1414      	asrs	r4, r2, #16
 801fda0:	fb06 5404 	mla	r4, r6, r4, r5
 801fda4:	9d02      	ldr	r5, [sp, #8]
 801fda6:	5d2e      	ldrb	r6, [r5, r4]
 801fda8:	2e00      	cmp	r6, #0
 801fdaa:	d04c      	beq.n	801fe46 <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2ba>
 801fdac:	9d01      	ldr	r5, [sp, #4]
 801fdae:	f835 8014 	ldrh.w	r8, [r5, r4, lsl #1]
 801fdb2:	9c05      	ldr	r4, [sp, #20]
 801fdb4:	f830 5019 	ldrh.w	r5, [r0, r9, lsl #1]
 801fdb8:	ea4f 2c28 	mov.w	ip, r8, asr #8
 801fdbc:	4366      	muls	r6, r4
 801fdbe:	ea4f 0ae5 	mov.w	sl, r5, asr #3
 801fdc2:	f00c 0cf8 	and.w	ip, ip, #248	@ 0xf8
 801fdc6:	1c74      	adds	r4, r6, #1
 801fdc8:	f00a 0afc 	and.w	sl, sl, #252	@ 0xfc
 801fdcc:	eb04 2416 	add.w	r4, r4, r6, lsr #8
 801fdd0:	122e      	asrs	r6, r5, #8
 801fdd2:	1224      	asrs	r4, r4, #8
 801fdd4:	f006 06f8 	and.w	r6, r6, #248	@ 0xf8
 801fdd8:	00ed      	lsls	r5, r5, #3
 801fdda:	b2a7      	uxth	r7, r4
 801fddc:	43e4      	mvns	r4, r4
 801fdde:	b2ed      	uxtb	r5, r5
 801fde0:	b2e4      	uxtb	r4, r4
 801fde2:	fb16 f604 	smulbb	r6, r6, r4
 801fde6:	fb15 f504 	smulbb	r5, r5, r4
 801fdea:	fb0c 6c07 	mla	ip, ip, r7, r6
 801fdee:	ea4f 06e8 	mov.w	r6, r8, asr #3
 801fdf2:	fb1a fa04 	smulbb	sl, sl, r4
 801fdf6:	ea4f 08c8 	mov.w	r8, r8, lsl #3
 801fdfa:	fa1f fc8c 	uxth.w	ip, ip
 801fdfe:	f006 06fc 	and.w	r6, r6, #252	@ 0xfc
 801fe02:	fa5f f888 	uxtb.w	r8, r8
 801fe06:	fb06 a607 	mla	r6, r6, r7, sl
 801fe0a:	f10c 0401 	add.w	r4, ip, #1
 801fe0e:	fb08 5507 	mla	r5, r8, r7, r5
 801fe12:	eb04 2c1c 	add.w	ip, r4, ip, lsr #8
 801fe16:	b2ad      	uxth	r5, r5
 801fe18:	b2b6      	uxth	r6, r6
 801fe1a:	f40c 4c78 	and.w	ip, ip, #63488	@ 0xf800
 801fe1e:	f105 0a01 	add.w	sl, r5, #1
 801fe22:	eb0a 2a15 	add.w	sl, sl, r5, lsr #8
 801fe26:	f3ca 2ac4 	ubfx	sl, sl, #11, #5
 801fe2a:	ea4a 0c0c 	orr.w	ip, sl, ip
 801fe2e:	f106 0a01 	add.w	sl, r6, #1
 801fe32:	eb0a 2a16 	add.w	sl, sl, r6, lsr #8
 801fe36:	ea4f 1a5a 	mov.w	sl, sl, lsr #5
 801fe3a:	f40a 6afc 	and.w	sl, sl, #2016	@ 0x7e0
 801fe3e:	ea4c 0c0a 	orr.w	ip, ip, sl
 801fe42:	f820 c019 	strh.w	ip, [r0, r9, lsl #1]
 801fe46:	9c13      	ldr	r4, [sp, #76]	@ 0x4c
 801fe48:	f109 0901 	add.w	r9, r9, #1
 801fe4c:	4421      	add	r1, r4
 801fe4e:	9c14      	ldr	r4, [sp, #80]	@ 0x50
 801fe50:	4422      	add	r2, r4
 801fe52:	e79c      	b.n	801fd8e <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x202>
 801fe54:	b007      	add	sp, #28
 801fe56:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0801fe5a <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 801fe5a:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801fe5e:	b085      	sub	sp, #20
 801fe60:	468b      	mov	fp, r1
 801fe62:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 801fe66:	9c13      	ldr	r4, [sp, #76]	@ 0x4c
 801fe68:	9203      	str	r2, [sp, #12]
 801fe6a:	6861      	ldr	r1, [r4, #4]
 801fe6c:	f8dd 8058 	ldr.w	r8, [sp, #88]	@ 0x58
 801fe70:	e9dd 2014 	ldrd	r2, r0, [sp, #80]	@ 0x50
 801fe74:	fb01 2000 	mla	r0, r1, r0, r2
 801fe78:	6822      	ldr	r2, [r4, #0]
 801fe7a:	eb02 0040 	add.w	r0, r2, r0, lsl #1
 801fe7e:	f8d8 2000 	ldr.w	r2, [r8]
 801fe82:	9200      	str	r2, [sp, #0]
 801fe84:	f8d8 2004 	ldr.w	r2, [r8, #4]
 801fe88:	9201      	str	r2, [sp, #4]
 801fe8a:	f1bb 0f00 	cmp.w	fp, #0
 801fe8e:	dc03      	bgt.n	801fe98 <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3e>
 801fe90:	9a03      	ldr	r2, [sp, #12]
 801fe92:	2a00      	cmp	r2, #0
 801fe94:	f340 8146 	ble.w	8020124 <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2ca>
 801fe98:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 801fe9a:	f9b8 7008 	ldrsh.w	r7, [r8, #8]
 801fe9e:	f502 4100 	add.w	r1, r2, #32768	@ 0x8000
 801fea2:	9a10      	ldr	r2, [sp, #64]	@ 0x40
 801fea4:	f9b8 600c 	ldrsh.w	r6, [r8, #12]
 801fea8:	f502 4200 	add.w	r2, r2, #32768	@ 0x8000
 801feac:	2b00      	cmp	r3, #0
 801feae:	dd0e      	ble.n	801fece <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x74>
 801feb0:	140c      	asrs	r4, r1, #16
 801feb2:	d405      	bmi.n	801fec0 <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x66>
 801feb4:	42bc      	cmp	r4, r7
 801feb6:	da03      	bge.n	801fec0 <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x66>
 801feb8:	1414      	asrs	r4, r2, #16
 801feba:	d401      	bmi.n	801fec0 <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x66>
 801febc:	42b4      	cmp	r4, r6
 801febe:	db07      	blt.n	801fed0 <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x76>
 801fec0:	9c11      	ldr	r4, [sp, #68]	@ 0x44
 801fec2:	3b01      	subs	r3, #1
 801fec4:	3002      	adds	r0, #2
 801fec6:	4421      	add	r1, r4
 801fec8:	9c12      	ldr	r4, [sp, #72]	@ 0x48
 801feca:	4422      	add	r2, r4
 801fecc:	e7ee      	b.n	801feac <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x52>
 801fece:	d017      	beq.n	801ff00 <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa6>
 801fed0:	1e5c      	subs	r4, r3, #1
 801fed2:	9d11      	ldr	r5, [sp, #68]	@ 0x44
 801fed4:	fb05 1504 	mla	r5, r5, r4, r1
 801fed8:	142d      	asrs	r5, r5, #16
 801feda:	d409      	bmi.n	801fef0 <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x96>
 801fedc:	42bd      	cmp	r5, r7
 801fede:	da07      	bge.n	801fef0 <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x96>
 801fee0:	9d12      	ldr	r5, [sp, #72]	@ 0x48
 801fee2:	fb05 2404 	mla	r4, r5, r4, r2
 801fee6:	1424      	asrs	r4, r4, #16
 801fee8:	d402      	bmi.n	801fef0 <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x96>
 801feea:	42b4      	cmp	r4, r6
 801feec:	f2c0 80b3 	blt.w	8020056 <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1fc>
 801fef0:	2600      	movs	r6, #0
 801fef2:	199c      	adds	r4, r3, r6
 801fef4:	2c00      	cmp	r4, #0
 801fef6:	dc3e      	bgt.n	801ff76 <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x11c>
 801fef8:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 801fefc:	eb00 0043 	add.w	r0, r0, r3, lsl #1
 801ff00:	f1bb 0f00 	cmp.w	fp, #0
 801ff04:	f340 810e 	ble.w	8020124 <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2ca>
 801ff08:	ee30 0a04 	vadd.f32	s0, s0, s8
 801ff0c:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 801ff0e:	ee70 0aa4 	vadd.f32	s1, s1, s9
 801ff12:	f1bb 0b01 	subs.w	fp, fp, #1
 801ff16:	eeb0 6a62 	vmov.f32	s12, s5
 801ff1a:	eec6 7a80 	vdiv.f32	s15, s13, s0
 801ff1e:	ee31 1a05 	vadd.f32	s2, s2, s10
 801ff22:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 801ff26:	ed8d 6a0f 	vstr	s12, [sp, #60]	@ 0x3c
 801ff2a:	eeb0 6a43 	vmov.f32	s12, s6
 801ff2e:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 801ff32:	ed8d 6a10 	vstr	s12, [sp, #64]	@ 0x40
 801ff36:	ee20 7aa7 	vmul.f32	s14, s1, s15
 801ff3a:	ee61 7a27 	vmul.f32	s15, s2, s15
 801ff3e:	ee77 2a62 	vsub.f32	s5, s14, s5
 801ff42:	ee37 3ac3 	vsub.f32	s6, s15, s6
 801ff46:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 801ff4a:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 801ff4e:	ee12 2a90 	vmov	r2, s5
 801ff52:	eef0 2a47 	vmov.f32	s5, s14
 801ff56:	fb92 f3f3 	sdiv	r3, r2, r3
 801ff5a:	ee13 2a10 	vmov	r2, s6
 801ff5e:	9311      	str	r3, [sp, #68]	@ 0x44
 801ff60:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 801ff62:	eeb0 3a67 	vmov.f32	s6, s15
 801ff66:	fb92 f3f3 	sdiv	r3, r2, r3
 801ff6a:	9a03      	ldr	r2, [sp, #12]
 801ff6c:	9312      	str	r3, [sp, #72]	@ 0x48
 801ff6e:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 801ff70:	bf08      	it	eq
 801ff72:	4613      	moveq	r3, r2
 801ff74:	e789      	b.n	801fe8a <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x30>
 801ff76:	140f      	asrs	r7, r1, #16
 801ff78:	d418      	bmi.n	801ffac <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x152>
 801ff7a:	f8d8 5008 	ldr.w	r5, [r8, #8]
 801ff7e:	42bd      	cmp	r5, r7
 801ff80:	dd14      	ble.n	801ffac <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x152>
 801ff82:	ea5f 4c22 	movs.w	ip, r2, asr #16
 801ff86:	d411      	bmi.n	801ffac <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x152>
 801ff88:	f8d8 400c 	ldr.w	r4, [r8, #12]
 801ff8c:	4564      	cmp	r4, ip
 801ff8e:	dd0d      	ble.n	801ffac <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x152>
 801ff90:	b22d      	sxth	r5, r5
 801ff92:	9c01      	ldr	r4, [sp, #4]
 801ff94:	fb0c 7505 	mla	r5, ip, r5, r7
 801ff98:	5d64      	ldrb	r4, [r4, r5]
 801ff9a:	2cff      	cmp	r4, #255	@ 0xff
 801ff9c:	d10c      	bne.n	801ffb8 <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x15e>
 801ff9e:	9c00      	ldr	r4, [sp, #0]
 801ffa0:	f834 5015 	ldrh.w	r5, [r4, r5, lsl #1]
 801ffa4:	f06f 0401 	mvn.w	r4, #1
 801ffa8:	4374      	muls	r4, r6
 801ffaa:	5305      	strh	r5, [r0, r4]
 801ffac:	9c11      	ldr	r4, [sp, #68]	@ 0x44
 801ffae:	3e01      	subs	r6, #1
 801ffb0:	4421      	add	r1, r4
 801ffb2:	9c12      	ldr	r4, [sp, #72]	@ 0x48
 801ffb4:	4422      	add	r2, r4
 801ffb6:	e79c      	b.n	801fef2 <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x98>
 801ffb8:	2c00      	cmp	r4, #0
 801ffba:	d0f7      	beq.n	801ffac <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x152>
 801ffbc:	9f00      	ldr	r7, [sp, #0]
 801ffbe:	fa1f fc84 	uxth.w	ip, r4
 801ffc2:	43e4      	mvns	r4, r4
 801ffc4:	f837 9015 	ldrh.w	r9, [r7, r5, lsl #1]
 801ffc8:	f06f 0501 	mvn.w	r5, #1
 801ffcc:	b2e4      	uxtb	r4, r4
 801ffce:	4375      	muls	r5, r6
 801ffd0:	ea4f 2e29 	mov.w	lr, r9, asr #8
 801ffd4:	9502      	str	r5, [sp, #8]
 801ffd6:	f00e 0ef8 	and.w	lr, lr, #248	@ 0xf8
 801ffda:	5b45      	ldrh	r5, [r0, r5]
 801ffdc:	122f      	asrs	r7, r5, #8
 801ffde:	ea4f 0ae5 	mov.w	sl, r5, asr #3
 801ffe2:	f007 07f8 	and.w	r7, r7, #248	@ 0xf8
 801ffe6:	00ed      	lsls	r5, r5, #3
 801ffe8:	f00a 0afc 	and.w	sl, sl, #252	@ 0xfc
 801ffec:	fb17 f704 	smulbb	r7, r7, r4
 801fff0:	b2ed      	uxtb	r5, r5
 801fff2:	fb1a fa04 	smulbb	sl, sl, r4
 801fff6:	fb0e 7e0c 	mla	lr, lr, ip, r7
 801fffa:	ea4f 07e9 	mov.w	r7, r9, asr #3
 801fffe:	fb15 f504 	smulbb	r5, r5, r4
 8020002:	ea4f 09c9 	mov.w	r9, r9, lsl #3
 8020006:	fa1f fe8e 	uxth.w	lr, lr
 802000a:	f007 07fc 	and.w	r7, r7, #252	@ 0xfc
 802000e:	fa5f f989 	uxtb.w	r9, r9
 8020012:	fb07 a70c 	mla	r7, r7, ip, sl
 8020016:	f10e 0401 	add.w	r4, lr, #1
 802001a:	fb09 550c 	mla	r5, r9, ip, r5
 802001e:	eb04 2e1e 	add.w	lr, r4, lr, lsr #8
 8020022:	9c02      	ldr	r4, [sp, #8]
 8020024:	b2ad      	uxth	r5, r5
 8020026:	b2bf      	uxth	r7, r7
 8020028:	f40e 4e78 	and.w	lr, lr, #63488	@ 0xf800
 802002c:	f105 0a01 	add.w	sl, r5, #1
 8020030:	eb0a 2a15 	add.w	sl, sl, r5, lsr #8
 8020034:	f3ca 2ac4 	ubfx	sl, sl, #11, #5
 8020038:	ea4a 0e0e 	orr.w	lr, sl, lr
 802003c:	f107 0a01 	add.w	sl, r7, #1
 8020040:	eb0a 2a17 	add.w	sl, sl, r7, lsr #8
 8020044:	ea4f 1a5a 	mov.w	sl, sl, lsr #5
 8020048:	f40a 6afc 	and.w	sl, sl, #2016	@ 0x7e0
 802004c:	ea4e 0e0a 	orr.w	lr, lr, sl
 8020050:	f820 e004 	strh.w	lr, [r0, r4]
 8020054:	e7aa      	b.n	801ffac <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x152>
 8020056:	f04f 0900 	mov.w	r9, #0
 802005a:	eba3 0409 	sub.w	r4, r3, r9
 802005e:	2c00      	cmp	r4, #0
 8020060:	f77f af4a 	ble.w	801fef8 <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x9e>
 8020064:	1414      	asrs	r4, r2, #16
 8020066:	f9b8 6008 	ldrsh.w	r6, [r8, #8]
 802006a:	140d      	asrs	r5, r1, #16
 802006c:	fb06 5504 	mla	r5, r6, r4, r5
 8020070:	9c01      	ldr	r4, [sp, #4]
 8020072:	5d64      	ldrb	r4, [r4, r5]
 8020074:	2cff      	cmp	r4, #255	@ 0xff
 8020076:	d10b      	bne.n	8020090 <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x236>
 8020078:	9c00      	ldr	r4, [sp, #0]
 802007a:	f834 4015 	ldrh.w	r4, [r4, r5, lsl #1]
 802007e:	f820 4019 	strh.w	r4, [r0, r9, lsl #1]
 8020082:	9c11      	ldr	r4, [sp, #68]	@ 0x44
 8020084:	f109 0901 	add.w	r9, r9, #1
 8020088:	4421      	add	r1, r4
 802008a:	9c12      	ldr	r4, [sp, #72]	@ 0x48
 802008c:	4422      	add	r2, r4
 802008e:	e7e4      	b.n	802005a <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x200>
 8020090:	2c00      	cmp	r4, #0
 8020092:	d0f6      	beq.n	8020082 <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x228>
 8020094:	9e00      	ldr	r6, [sp, #0]
 8020096:	b2a7      	uxth	r7, r4
 8020098:	43e4      	mvns	r4, r4
 802009a:	f836 e015 	ldrh.w	lr, [r6, r5, lsl #1]
 802009e:	f830 5019 	ldrh.w	r5, [r0, r9, lsl #1]
 80200a2:	b2e4      	uxtb	r4, r4
 80200a4:	ea4f 2c2e 	mov.w	ip, lr, asr #8
 80200a8:	122e      	asrs	r6, r5, #8
 80200aa:	ea4f 0ae5 	mov.w	sl, r5, asr #3
 80200ae:	f00c 0cf8 	and.w	ip, ip, #248	@ 0xf8
 80200b2:	f006 06f8 	and.w	r6, r6, #248	@ 0xf8
 80200b6:	00ed      	lsls	r5, r5, #3
 80200b8:	f00a 0afc 	and.w	sl, sl, #252	@ 0xfc
 80200bc:	fb16 f604 	smulbb	r6, r6, r4
 80200c0:	b2ed      	uxtb	r5, r5
 80200c2:	fb1a fa04 	smulbb	sl, sl, r4
 80200c6:	fb0c 6c07 	mla	ip, ip, r7, r6
 80200ca:	ea4f 06ee 	mov.w	r6, lr, asr #3
 80200ce:	fb15 f504 	smulbb	r5, r5, r4
 80200d2:	ea4f 0ece 	mov.w	lr, lr, lsl #3
 80200d6:	fa1f fc8c 	uxth.w	ip, ip
 80200da:	f006 06fc 	and.w	r6, r6, #252	@ 0xfc
 80200de:	fa5f fe8e 	uxtb.w	lr, lr
 80200e2:	fb06 a607 	mla	r6, r6, r7, sl
 80200e6:	f10c 0401 	add.w	r4, ip, #1
 80200ea:	fb0e 5507 	mla	r5, lr, r7, r5
 80200ee:	eb04 2c1c 	add.w	ip, r4, ip, lsr #8
 80200f2:	b2ad      	uxth	r5, r5
 80200f4:	b2b6      	uxth	r6, r6
 80200f6:	f40c 4c78 	and.w	ip, ip, #63488	@ 0xf800
 80200fa:	f105 0a01 	add.w	sl, r5, #1
 80200fe:	eb0a 2a15 	add.w	sl, sl, r5, lsr #8
 8020102:	f3ca 2ac4 	ubfx	sl, sl, #11, #5
 8020106:	ea4a 0c0c 	orr.w	ip, sl, ip
 802010a:	f106 0a01 	add.w	sl, r6, #1
 802010e:	eb0a 2a16 	add.w	sl, sl, r6, lsr #8
 8020112:	ea4f 1a5a 	mov.w	sl, sl, lsr #5
 8020116:	f40a 6afc 	and.w	sl, sl, #2016	@ 0x7e0
 802011a:	ea4c 0c0a 	orr.w	ip, ip, sl
 802011e:	f820 c019 	strh.w	ip, [r0, r9, lsl #1]
 8020122:	e7ae      	b.n	8020082 <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x228>
 8020124:	b005      	add	sp, #20
 8020126:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0802012a <_ZN8touchgfx8LCD16bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 802012a:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 802012e:	b085      	sub	sp, #20
 8020130:	9813      	ldr	r0, [sp, #76]	@ 0x4c
 8020132:	9203      	str	r2, [sp, #12]
 8020134:	f89d 205c 	ldrb.w	r2, [sp, #92]	@ 0x5c
 8020138:	9100      	str	r1, [sp, #0]
 802013a:	9201      	str	r2, [sp, #4]
 802013c:	6841      	ldr	r1, [r0, #4]
 802013e:	f8dd e058 	ldr.w	lr, [sp, #88]	@ 0x58
 8020142:	e9dd 2414 	ldrd	r2, r4, [sp, #80]	@ 0x50
 8020146:	fb01 2404 	mla	r4, r1, r4, r2
 802014a:	6802      	ldr	r2, [r0, #0]
 802014c:	eb02 0444 	add.w	r4, r2, r4, lsl #1
 8020150:	f8de 2000 	ldr.w	r2, [lr]
 8020154:	9202      	str	r2, [sp, #8]
 8020156:	9a01      	ldr	r2, [sp, #4]
 8020158:	43d6      	mvns	r6, r2
 802015a:	b2f6      	uxtb	r6, r6
 802015c:	9a00      	ldr	r2, [sp, #0]
 802015e:	2a00      	cmp	r2, #0
 8020160:	dc03      	bgt.n	802016a <_ZN8touchgfx8LCD16bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x40>
 8020162:	9a03      	ldr	r2, [sp, #12]
 8020164:	2a00      	cmp	r2, #0
 8020166:	f340 8124 	ble.w	80203b2 <_ZN8touchgfx8LCD16bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x288>
 802016a:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 802016c:	f9be c008 	ldrsh.w	ip, [lr, #8]
 8020170:	f502 4100 	add.w	r1, r2, #32768	@ 0x8000
 8020174:	9a10      	ldr	r2, [sp, #64]	@ 0x40
 8020176:	f9be 700c 	ldrsh.w	r7, [lr, #12]
 802017a:	f502 4200 	add.w	r2, r2, #32768	@ 0x8000
 802017e:	2b00      	cmp	r3, #0
 8020180:	dd0e      	ble.n	80201a0 <_ZN8touchgfx8LCD16bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x76>
 8020182:	1408      	asrs	r0, r1, #16
 8020184:	d405      	bmi.n	8020192 <_ZN8touchgfx8LCD16bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x68>
 8020186:	4560      	cmp	r0, ip
 8020188:	da03      	bge.n	8020192 <_ZN8touchgfx8LCD16bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x68>
 802018a:	1410      	asrs	r0, r2, #16
 802018c:	d401      	bmi.n	8020192 <_ZN8touchgfx8LCD16bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x68>
 802018e:	42b8      	cmp	r0, r7
 8020190:	db07      	blt.n	80201a2 <_ZN8touchgfx8LCD16bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x78>
 8020192:	9811      	ldr	r0, [sp, #68]	@ 0x44
 8020194:	3b01      	subs	r3, #1
 8020196:	3402      	adds	r4, #2
 8020198:	4401      	add	r1, r0
 802019a:	9812      	ldr	r0, [sp, #72]	@ 0x48
 802019c:	4402      	add	r2, r0
 802019e:	e7ee      	b.n	802017e <_ZN8touchgfx8LCD16bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x54>
 80201a0:	d06e      	beq.n	8020280 <_ZN8touchgfx8LCD16bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x156>
 80201a2:	1e58      	subs	r0, r3, #1
 80201a4:	9d11      	ldr	r5, [sp, #68]	@ 0x44
 80201a6:	fb05 1500 	mla	r5, r5, r0, r1
 80201aa:	142d      	asrs	r5, r5, #16
 80201ac:	d45c      	bmi.n	8020268 <_ZN8touchgfx8LCD16bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x13e>
 80201ae:	4565      	cmp	r5, ip
 80201b0:	da5a      	bge.n	8020268 <_ZN8touchgfx8LCD16bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x13e>
 80201b2:	9d12      	ldr	r5, [sp, #72]	@ 0x48
 80201b4:	fb05 2000 	mla	r0, r5, r0, r2
 80201b8:	1400      	asrs	r0, r0, #16
 80201ba:	d455      	bmi.n	8020268 <_ZN8touchgfx8LCD16bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x13e>
 80201bc:	42b8      	cmp	r0, r7
 80201be:	da53      	bge.n	8020268 <_ZN8touchgfx8LCD16bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x13e>
 80201c0:	4699      	mov	r9, r3
 80201c2:	46a2      	mov	sl, r4
 80201c4:	f8bd b004 	ldrh.w	fp, [sp, #4]
 80201c8:	f1b9 0f00 	cmp.w	r9, #0
 80201cc:	dd54      	ble.n	8020278 <_ZN8touchgfx8LCD16bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x14e>
 80201ce:	f9be 7008 	ldrsh.w	r7, [lr, #8]
 80201d2:	140d      	asrs	r5, r1, #16
 80201d4:	1410      	asrs	r0, r2, #16
 80201d6:	f109 39ff 	add.w	r9, r9, #4294967295
 80201da:	fb07 5000 	mla	r0, r7, r0, r5
 80201de:	9d02      	ldr	r5, [sp, #8]
 80201e0:	f835 0010 	ldrh.w	r0, [r5, r0, lsl #1]
 80201e4:	f8ba 5000 	ldrh.w	r5, [sl]
 80201e8:	ea4f 2c20 	mov.w	ip, r0, asr #8
 80201ec:	122f      	asrs	r7, r5, #8
 80201ee:	ea4f 08e5 	mov.w	r8, r5, asr #3
 80201f2:	f00c 0cf8 	and.w	ip, ip, #248	@ 0xf8
 80201f6:	f007 07f8 	and.w	r7, r7, #248	@ 0xf8
 80201fa:	00ed      	lsls	r5, r5, #3
 80201fc:	f008 08fc 	and.w	r8, r8, #252	@ 0xfc
 8020200:	fb17 f706 	smulbb	r7, r7, r6
 8020204:	b2ed      	uxtb	r5, r5
 8020206:	fb18 f806 	smulbb	r8, r8, r6
 802020a:	fb0c 7c0b 	mla	ip, ip, fp, r7
 802020e:	10c7      	asrs	r7, r0, #3
 8020210:	fb15 f506 	smulbb	r5, r5, r6
 8020214:	00c0      	lsls	r0, r0, #3
 8020216:	f007 07fc 	and.w	r7, r7, #252	@ 0xfc
 802021a:	fa1f fc8c 	uxth.w	ip, ip
 802021e:	b2c0      	uxtb	r0, r0
 8020220:	fb07 870b 	mla	r7, r7, fp, r8
 8020224:	fb00 500b 	mla	r0, r0, fp, r5
 8020228:	f10c 0501 	add.w	r5, ip, #1
 802022c:	b2bf      	uxth	r7, r7
 802022e:	b280      	uxth	r0, r0
 8020230:	eb05 2c1c 	add.w	ip, r5, ip, lsr #8
 8020234:	f107 0801 	add.w	r8, r7, #1
 8020238:	1c45      	adds	r5, r0, #1
 802023a:	eb08 2817 	add.w	r8, r8, r7, lsr #8
 802023e:	f40c 4c78 	and.w	ip, ip, #63488	@ 0xf800
 8020242:	eb05 2510 	add.w	r5, r5, r0, lsr #8
 8020246:	9811      	ldr	r0, [sp, #68]	@ 0x44
 8020248:	ea4f 1858 	mov.w	r8, r8, lsr #5
 802024c:	f3c5 25c4 	ubfx	r5, r5, #11, #5
 8020250:	4401      	add	r1, r0
 8020252:	f408 68fc 	and.w	r8, r8, #2016	@ 0x7e0
 8020256:	9812      	ldr	r0, [sp, #72]	@ 0x48
 8020258:	ea45 0c0c 	orr.w	ip, r5, ip
 802025c:	4402      	add	r2, r0
 802025e:	ea4c 0c08 	orr.w	ip, ip, r8
 8020262:	f82a cb02 	strh.w	ip, [sl], #2
 8020266:	e7af      	b.n	80201c8 <_ZN8touchgfx8LCD16bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x9e>
 8020268:	f04f 0800 	mov.w	r8, #0
 802026c:	f8bd a004 	ldrh.w	sl, [sp, #4]
 8020270:	eb03 0008 	add.w	r0, r3, r8
 8020274:	2800      	cmp	r0, #0
 8020276:	dc41      	bgt.n	80202fc <_ZN8touchgfx8LCD16bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1d2>
 8020278:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 802027c:	eb04 0443 	add.w	r4, r4, r3, lsl #1
 8020280:	9b00      	ldr	r3, [sp, #0]
 8020282:	2b00      	cmp	r3, #0
 8020284:	f340 8095 	ble.w	80203b2 <_ZN8touchgfx8LCD16bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x288>
 8020288:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 802028c:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 802028e:	ee30 0a04 	vadd.f32	s0, s0, s8
 8020292:	ee70 0aa4 	vadd.f32	s1, s1, s9
 8020296:	eef0 6a62 	vmov.f32	s13, s5
 802029a:	eec7 7a00 	vdiv.f32	s15, s14, s0
 802029e:	ee31 1a05 	vadd.f32	s2, s2, s10
 80202a2:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 80202a6:	edcd 6a0f 	vstr	s13, [sp, #60]	@ 0x3c
 80202aa:	eef0 6a43 	vmov.f32	s13, s6
 80202ae:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 80202b2:	edcd 6a10 	vstr	s13, [sp, #64]	@ 0x40
 80202b6:	ee20 7aa7 	vmul.f32	s14, s1, s15
 80202ba:	ee61 7a27 	vmul.f32	s15, s2, s15
 80202be:	ee77 2a62 	vsub.f32	s5, s14, s5
 80202c2:	ee37 3ac3 	vsub.f32	s6, s15, s6
 80202c6:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 80202ca:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 80202ce:	ee12 2a90 	vmov	r2, s5
 80202d2:	eef0 2a47 	vmov.f32	s5, s14
 80202d6:	fb92 f3f3 	sdiv	r3, r2, r3
 80202da:	ee13 2a10 	vmov	r2, s6
 80202de:	9311      	str	r3, [sp, #68]	@ 0x44
 80202e0:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80202e2:	eeb0 3a67 	vmov.f32	s6, s15
 80202e6:	fb92 f3f3 	sdiv	r3, r2, r3
 80202ea:	9312      	str	r3, [sp, #72]	@ 0x48
 80202ec:	9b00      	ldr	r3, [sp, #0]
 80202ee:	9a03      	ldr	r2, [sp, #12]
 80202f0:	3b01      	subs	r3, #1
 80202f2:	9300      	str	r3, [sp, #0]
 80202f4:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80202f6:	bf08      	it	eq
 80202f8:	4613      	moveq	r3, r2
 80202fa:	e72f      	b.n	802015c <_ZN8touchgfx8LCD16bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x32>
 80202fc:	140f      	asrs	r7, r1, #16
 80202fe:	d451      	bmi.n	80203a4 <_ZN8touchgfx8LCD16bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x27a>
 8020300:	f8de 5008 	ldr.w	r5, [lr, #8]
 8020304:	42bd      	cmp	r5, r7
 8020306:	dd4d      	ble.n	80203a4 <_ZN8touchgfx8LCD16bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x27a>
 8020308:	ea5f 4c22 	movs.w	ip, r2, asr #16
 802030c:	d44a      	bmi.n	80203a4 <_ZN8touchgfx8LCD16bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x27a>
 802030e:	f8de 000c 	ldr.w	r0, [lr, #12]
 8020312:	4560      	cmp	r0, ip
 8020314:	dd46      	ble.n	80203a4 <_ZN8touchgfx8LCD16bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x27a>
 8020316:	b22d      	sxth	r5, r5
 8020318:	9802      	ldr	r0, [sp, #8]
 802031a:	fb0c 7505 	mla	r5, ip, r5, r7
 802031e:	f830 0015 	ldrh.w	r0, [r0, r5, lsl #1]
 8020322:	f06f 0501 	mvn.w	r5, #1
 8020326:	fb05 fb08 	mul.w	fp, r5, r8
 802032a:	ea4f 2c20 	mov.w	ip, r0, asr #8
 802032e:	f834 500b 	ldrh.w	r5, [r4, fp]
 8020332:	f00c 0cf8 	and.w	ip, ip, #248	@ 0xf8
 8020336:	122f      	asrs	r7, r5, #8
 8020338:	ea4f 09e5 	mov.w	r9, r5, asr #3
 802033c:	f007 07f8 	and.w	r7, r7, #248	@ 0xf8
 8020340:	00ed      	lsls	r5, r5, #3
 8020342:	f009 09fc 	and.w	r9, r9, #252	@ 0xfc
 8020346:	fb17 f706 	smulbb	r7, r7, r6
 802034a:	b2ed      	uxtb	r5, r5
 802034c:	fb19 f906 	smulbb	r9, r9, r6
 8020350:	fb0c 7c0a 	mla	ip, ip, sl, r7
 8020354:	10c7      	asrs	r7, r0, #3
 8020356:	fb15 f506 	smulbb	r5, r5, r6
 802035a:	00c0      	lsls	r0, r0, #3
 802035c:	f007 07fc 	and.w	r7, r7, #252	@ 0xfc
 8020360:	fa1f fc8c 	uxth.w	ip, ip
 8020364:	b2c0      	uxtb	r0, r0
 8020366:	fb07 970a 	mla	r7, r7, sl, r9
 802036a:	fb00 500a 	mla	r0, r0, sl, r5
 802036e:	f10c 0501 	add.w	r5, ip, #1
 8020372:	b2bf      	uxth	r7, r7
 8020374:	b280      	uxth	r0, r0
 8020376:	eb05 2c1c 	add.w	ip, r5, ip, lsr #8
 802037a:	f107 0901 	add.w	r9, r7, #1
 802037e:	1c45      	adds	r5, r0, #1
 8020380:	eb09 2917 	add.w	r9, r9, r7, lsr #8
 8020384:	f40c 4c78 	and.w	ip, ip, #63488	@ 0xf800
 8020388:	eb05 2510 	add.w	r5, r5, r0, lsr #8
 802038c:	ea4f 1959 	mov.w	r9, r9, lsr #5
 8020390:	f3c5 25c4 	ubfx	r5, r5, #11, #5
 8020394:	f409 69fc 	and.w	r9, r9, #2016	@ 0x7e0
 8020398:	ea45 0c0c 	orr.w	ip, r5, ip
 802039c:	ea4c 0c09 	orr.w	ip, ip, r9
 80203a0:	f824 c00b 	strh.w	ip, [r4, fp]
 80203a4:	9811      	ldr	r0, [sp, #68]	@ 0x44
 80203a6:	f108 38ff 	add.w	r8, r8, #4294967295
 80203aa:	4401      	add	r1, r0
 80203ac:	9812      	ldr	r0, [sp, #72]	@ 0x48
 80203ae:	4402      	add	r2, r0
 80203b0:	e75e      	b.n	8020270 <_ZN8touchgfx8LCD16bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x146>
 80203b2:	b005      	add	sp, #20
 80203b4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

080203b8 <_ZN8touchgfx8LCD16bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 80203b8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80203bc:	b085      	sub	sp, #20
 80203be:	4693      	mov	fp, r2
 80203c0:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80203c4:	9e13      	ldr	r6, [sp, #76]	@ 0x4c
 80203c6:	9d16      	ldr	r5, [sp, #88]	@ 0x58
 80203c8:	6870      	ldr	r0, [r6, #4]
 80203ca:	9101      	str	r1, [sp, #4]
 80203cc:	e9dd 2414 	ldrd	r2, r4, [sp, #80]	@ 0x50
 80203d0:	e9dd ec11 	ldrd	lr, ip, [sp, #68]	@ 0x44
 80203d4:	fb00 2404 	mla	r4, r0, r4, r2
 80203d8:	6832      	ldr	r2, [r6, #0]
 80203da:	eb02 0444 	add.w	r4, r2, r4, lsl #1
 80203de:	682a      	ldr	r2, [r5, #0]
 80203e0:	9202      	str	r2, [sp, #8]
 80203e2:	9a01      	ldr	r2, [sp, #4]
 80203e4:	2a00      	cmp	r2, #0
 80203e6:	dc03      	bgt.n	80203f0 <_ZN8touchgfx8LCD16bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x38>
 80203e8:	f1bb 0f00 	cmp.w	fp, #0
 80203ec:	f340 809a 	ble.w	8020524 <_ZN8touchgfx8LCD16bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x16c>
 80203f0:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 80203f2:	f9b5 9008 	ldrsh.w	r9, [r5, #8]
 80203f6:	f502 4000 	add.w	r0, r2, #32768	@ 0x8000
 80203fa:	9a10      	ldr	r2, [sp, #64]	@ 0x40
 80203fc:	f9b5 800c 	ldrsh.w	r8, [r5, #12]
 8020400:	f502 4200 	add.w	r2, r2, #32768	@ 0x8000
 8020404:	2b00      	cmp	r3, #0
 8020406:	dd0c      	ble.n	8020422 <_ZN8touchgfx8LCD16bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6a>
 8020408:	1406      	asrs	r6, r0, #16
 802040a:	d405      	bmi.n	8020418 <_ZN8touchgfx8LCD16bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x60>
 802040c:	454e      	cmp	r6, r9
 802040e:	da03      	bge.n	8020418 <_ZN8touchgfx8LCD16bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x60>
 8020410:	1416      	asrs	r6, r2, #16
 8020412:	d401      	bmi.n	8020418 <_ZN8touchgfx8LCD16bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x60>
 8020414:	4546      	cmp	r6, r8
 8020416:	db05      	blt.n	8020424 <_ZN8touchgfx8LCD16bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6c>
 8020418:	4470      	add	r0, lr
 802041a:	4462      	add	r2, ip
 802041c:	3b01      	subs	r3, #1
 802041e:	3402      	adds	r4, #2
 8020420:	e7f0      	b.n	8020404 <_ZN8touchgfx8LCD16bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4c>
 8020422:	d00f      	beq.n	8020444 <_ZN8touchgfx8LCD16bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8c>
 8020424:	1e5e      	subs	r6, r3, #1
 8020426:	fb0e 0706 	mla	r7, lr, r6, r0
 802042a:	143f      	asrs	r7, r7, #16
 802042c:	d541      	bpl.n	80204b2 <_ZN8touchgfx8LCD16bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xfa>
 802042e:	eb04 0643 	add.w	r6, r4, r3, lsl #1
 8020432:	4698      	mov	r8, r3
 8020434:	9603      	str	r6, [sp, #12]
 8020436:	f1b8 0f00 	cmp.w	r8, #0
 802043a:	dc56      	bgt.n	80204ea <_ZN8touchgfx8LCD16bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x132>
 802043c:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8020440:	eb04 0443 	add.w	r4, r4, r3, lsl #1
 8020444:	9b01      	ldr	r3, [sp, #4]
 8020446:	2b00      	cmp	r3, #0
 8020448:	dd6c      	ble.n	8020524 <_ZN8touchgfx8LCD16bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x16c>
 802044a:	ee30 0a04 	vadd.f32	s0, s0, s8
 802044e:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8020450:	ee70 0aa4 	vadd.f32	s1, s1, s9
 8020454:	eeb0 6a62 	vmov.f32	s12, s5
 8020458:	eec6 7a80 	vdiv.f32	s15, s13, s0
 802045c:	ee31 1a05 	vadd.f32	s2, s2, s10
 8020460:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 8020464:	ed8d 6a0f 	vstr	s12, [sp, #60]	@ 0x3c
 8020468:	eeb0 6a43 	vmov.f32	s12, s6
 802046c:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 8020470:	ed8d 6a10 	vstr	s12, [sp, #64]	@ 0x40
 8020474:	ee20 7aa7 	vmul.f32	s14, s1, s15
 8020478:	ee61 7a27 	vmul.f32	s15, s2, s15
 802047c:	ee77 2a62 	vsub.f32	s5, s14, s5
 8020480:	ee37 3ac3 	vsub.f32	s6, s15, s6
 8020484:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 8020488:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 802048c:	ee12 2a90 	vmov	r2, s5
 8020490:	eef0 2a47 	vmov.f32	s5, s14
 8020494:	fb92 fef3 	sdiv	lr, r2, r3
 8020498:	ee13 2a10 	vmov	r2, s6
 802049c:	eeb0 3a67 	vmov.f32	s6, s15
 80204a0:	fb92 fcf3 	sdiv	ip, r2, r3
 80204a4:	9b01      	ldr	r3, [sp, #4]
 80204a6:	3b01      	subs	r3, #1
 80204a8:	9301      	str	r3, [sp, #4]
 80204aa:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80204ac:	bf08      	it	eq
 80204ae:	465b      	moveq	r3, fp
 80204b0:	e797      	b.n	80203e2 <_ZN8touchgfx8LCD16bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2a>
 80204b2:	454f      	cmp	r7, r9
 80204b4:	dabb      	bge.n	802042e <_ZN8touchgfx8LCD16bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x76>
 80204b6:	fb0c 2606 	mla	r6, ip, r6, r2
 80204ba:	1436      	asrs	r6, r6, #16
 80204bc:	d4b7      	bmi.n	802042e <_ZN8touchgfx8LCD16bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x76>
 80204be:	4546      	cmp	r6, r8
 80204c0:	dab5      	bge.n	802042e <_ZN8touchgfx8LCD16bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x76>
 80204c2:	461e      	mov	r6, r3
 80204c4:	46a0      	mov	r8, r4
 80204c6:	2e00      	cmp	r6, #0
 80204c8:	ddb8      	ble.n	802043c <_ZN8touchgfx8LCD16bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x84>
 80204ca:	1417      	asrs	r7, r2, #16
 80204cc:	f9b5 a008 	ldrsh.w	sl, [r5, #8]
 80204d0:	ea4f 4920 	mov.w	r9, r0, asr #16
 80204d4:	9902      	ldr	r1, [sp, #8]
 80204d6:	4470      	add	r0, lr
 80204d8:	4462      	add	r2, ip
 80204da:	fb0a 9707 	mla	r7, sl, r7, r9
 80204de:	3e01      	subs	r6, #1
 80204e0:	f831 7017 	ldrh.w	r7, [r1, r7, lsl #1]
 80204e4:	f828 7b02 	strh.w	r7, [r8], #2
 80204e8:	e7ed      	b.n	80204c6 <_ZN8touchgfx8LCD16bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x10e>
 80204ea:	ea5f 4920 	movs.w	r9, r0, asr #16
 80204ee:	d414      	bmi.n	802051a <_ZN8touchgfx8LCD16bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x162>
 80204f0:	68ae      	ldr	r6, [r5, #8]
 80204f2:	454e      	cmp	r6, r9
 80204f4:	dd11      	ble.n	802051a <_ZN8touchgfx8LCD16bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x162>
 80204f6:	ea5f 4a22 	movs.w	sl, r2, asr #16
 80204fa:	d40e      	bmi.n	802051a <_ZN8touchgfx8LCD16bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x162>
 80204fc:	68ef      	ldr	r7, [r5, #12]
 80204fe:	4557      	cmp	r7, sl
 8020500:	dd0b      	ble.n	802051a <_ZN8touchgfx8LCD16bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x162>
 8020502:	b236      	sxth	r6, r6
 8020504:	f06f 0101 	mvn.w	r1, #1
 8020508:	9f02      	ldr	r7, [sp, #8]
 802050a:	fb0a 9606 	mla	r6, sl, r6, r9
 802050e:	f837 7016 	ldrh.w	r7, [r7, r6, lsl #1]
 8020512:	fb01 f608 	mul.w	r6, r1, r8
 8020516:	9903      	ldr	r1, [sp, #12]
 8020518:	538f      	strh	r7, [r1, r6]
 802051a:	4470      	add	r0, lr
 802051c:	4462      	add	r2, ip
 802051e:	f108 38ff 	add.w	r8, r8, #4294967295
 8020522:	e788      	b.n	8020436 <_ZN8touchgfx8LCD16bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7e>
 8020524:	b005      	add	sp, #20
 8020526:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0802052a <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 802052a:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 802052e:	b087      	sub	sp, #28
 8020530:	468b      	mov	fp, r1
 8020532:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8020536:	9815      	ldr	r0, [sp, #84]	@ 0x54
 8020538:	9203      	str	r2, [sp, #12]
 802053a:	f89d 2064 	ldrb.w	r2, [sp, #100]	@ 0x64
 802053e:	6841      	ldr	r1, [r0, #4]
 8020540:	9204      	str	r2, [sp, #16]
 8020542:	f8dd 9060 	ldr.w	r9, [sp, #96]	@ 0x60
 8020546:	e9dd 2516 	ldrd	r2, r5, [sp, #88]	@ 0x58
 802054a:	fb01 2505 	mla	r5, r1, r5, r2
 802054e:	6802      	ldr	r2, [r0, #0]
 8020550:	eb02 0545 	add.w	r5, r2, r5, lsl #1
 8020554:	f8d9 2000 	ldr.w	r2, [r9]
 8020558:	9201      	str	r2, [sp, #4]
 802055a:	f1bb 0f00 	cmp.w	fp, #0
 802055e:	dc03      	bgt.n	8020568 <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3e>
 8020560:	9a03      	ldr	r2, [sp, #12]
 8020562:	2a00      	cmp	r2, #0
 8020564:	f340 8158 	ble.w	8020818 <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2ee>
 8020568:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 802056a:	f9b9 7008 	ldrsh.w	r7, [r9, #8]
 802056e:	f502 4000 	add.w	r0, r2, #32768	@ 0x8000
 8020572:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 8020574:	f9b9 600c 	ldrsh.w	r6, [r9, #12]
 8020578:	f502 4100 	add.w	r1, r2, #32768	@ 0x8000
 802057c:	2b00      	cmp	r3, #0
 802057e:	dd0e      	ble.n	802059e <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x74>
 8020580:	1402      	asrs	r2, r0, #16
 8020582:	d405      	bmi.n	8020590 <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x66>
 8020584:	42ba      	cmp	r2, r7
 8020586:	da03      	bge.n	8020590 <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x66>
 8020588:	140a      	asrs	r2, r1, #16
 802058a:	d401      	bmi.n	8020590 <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x66>
 802058c:	42b2      	cmp	r2, r6
 802058e:	db07      	blt.n	80205a0 <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x76>
 8020590:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 8020592:	3b01      	subs	r3, #1
 8020594:	3502      	adds	r5, #2
 8020596:	4410      	add	r0, r2
 8020598:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 802059a:	4411      	add	r1, r2
 802059c:	e7ee      	b.n	802057c <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x52>
 802059e:	d017      	beq.n	80205d0 <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa6>
 80205a0:	1e5a      	subs	r2, r3, #1
 80205a2:	9c13      	ldr	r4, [sp, #76]	@ 0x4c
 80205a4:	fb04 0402 	mla	r4, r4, r2, r0
 80205a8:	1424      	asrs	r4, r4, #16
 80205aa:	d409      	bmi.n	80205c0 <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x96>
 80205ac:	42bc      	cmp	r4, r7
 80205ae:	da07      	bge.n	80205c0 <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x96>
 80205b0:	9c14      	ldr	r4, [sp, #80]	@ 0x50
 80205b2:	fb04 1202 	mla	r2, r4, r2, r1
 80205b6:	1412      	asrs	r2, r2, #16
 80205b8:	d402      	bmi.n	80205c0 <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x96>
 80205ba:	42b2      	cmp	r2, r6
 80205bc:	f2c0 80bf 	blt.w	802073e <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x214>
 80205c0:	2700      	movs	r7, #0
 80205c2:	19da      	adds	r2, r3, r7
 80205c4:	2a00      	cmp	r2, #0
 80205c6:	dc3e      	bgt.n	8020646 <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x11c>
 80205c8:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 80205cc:	eb05 0543 	add.w	r5, r5, r3, lsl #1
 80205d0:	f1bb 0f00 	cmp.w	fp, #0
 80205d4:	f340 8120 	ble.w	8020818 <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2ee>
 80205d8:	ee30 0a04 	vadd.f32	s0, s0, s8
 80205dc:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 80205de:	ee70 0aa4 	vadd.f32	s1, s1, s9
 80205e2:	f1bb 0b01 	subs.w	fp, fp, #1
 80205e6:	eeb0 6a62 	vmov.f32	s12, s5
 80205ea:	eec6 7a80 	vdiv.f32	s15, s13, s0
 80205ee:	ee31 1a05 	vadd.f32	s2, s2, s10
 80205f2:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 80205f6:	ed8d 6a11 	vstr	s12, [sp, #68]	@ 0x44
 80205fa:	eeb0 6a43 	vmov.f32	s12, s6
 80205fe:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 8020602:	ed8d 6a12 	vstr	s12, [sp, #72]	@ 0x48
 8020606:	ee20 7aa7 	vmul.f32	s14, s1, s15
 802060a:	ee61 7a27 	vmul.f32	s15, s2, s15
 802060e:	ee77 2a62 	vsub.f32	s5, s14, s5
 8020612:	ee37 3ac3 	vsub.f32	s6, s15, s6
 8020616:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 802061a:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 802061e:	ee12 2a90 	vmov	r2, s5
 8020622:	eef0 2a47 	vmov.f32	s5, s14
 8020626:	fb92 f3f3 	sdiv	r3, r2, r3
 802062a:	ee13 2a10 	vmov	r2, s6
 802062e:	9313      	str	r3, [sp, #76]	@ 0x4c
 8020630:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8020632:	eeb0 3a67 	vmov.f32	s6, s15
 8020636:	fb92 f3f3 	sdiv	r3, r2, r3
 802063a:	9a03      	ldr	r2, [sp, #12]
 802063c:	9314      	str	r3, [sp, #80]	@ 0x50
 802063e:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8020640:	bf08      	it	eq
 8020642:	4613      	moveq	r3, r2
 8020644:	e789      	b.n	802055a <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x30>
 8020646:	1406      	asrs	r6, r0, #16
 8020648:	d42d      	bmi.n	80206a6 <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x17c>
 802064a:	f8d9 4008 	ldr.w	r4, [r9, #8]
 802064e:	42b4      	cmp	r4, r6
 8020650:	dd29      	ble.n	80206a6 <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x17c>
 8020652:	ea5f 4c21 	movs.w	ip, r1, asr #16
 8020656:	d426      	bmi.n	80206a6 <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x17c>
 8020658:	f8d9 200c 	ldr.w	r2, [r9, #12]
 802065c:	4562      	cmp	r2, ip
 802065e:	dd22      	ble.n	80206a6 <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x17c>
 8020660:	b224      	sxth	r4, r4
 8020662:	9a01      	ldr	r2, [sp, #4]
 8020664:	fb0c 6404 	mla	r4, ip, r4, r6
 8020668:	f852 4024 	ldr.w	r4, [r2, r4, lsl #2]
 802066c:	0e22      	lsrs	r2, r4, #24
 802066e:	d01a      	beq.n	80206a6 <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x17c>
 8020670:	9e04      	ldr	r6, [sp, #16]
 8020672:	4372      	muls	r2, r6
 8020674:	1c56      	adds	r6, r2, #1
 8020676:	eb06 2222 	add.w	r2, r6, r2, asr #8
 802067a:	0a26      	lsrs	r6, r4, #8
 802067c:	1212      	asrs	r2, r2, #8
 802067e:	9605      	str	r6, [sp, #20]
 8020680:	2aff      	cmp	r2, #255	@ 0xff
 8020682:	d116      	bne.n	80206b2 <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x188>
 8020684:	f06f 0201 	mvn.w	r2, #1
 8020688:	f426 66ff 	bic.w	r6, r6, #2040	@ 0x7f8
 802068c:	fb02 fc07 	mul.w	ip, r2, r7
 8020690:	0962      	lsrs	r2, r4, #5
 8020692:	f026 0607 	bic.w	r6, r6, #7
 8020696:	f3c4 04c4 	ubfx	r4, r4, #3, #5
 802069a:	f402 62fc 	and.w	r2, r2, #2016	@ 0x7e0
 802069e:	4316      	orrs	r6, r2
 80206a0:	4326      	orrs	r6, r4
 80206a2:	f825 600c 	strh.w	r6, [r5, ip]
 80206a6:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 80206a8:	3f01      	subs	r7, #1
 80206aa:	4410      	add	r0, r2
 80206ac:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 80206ae:	4411      	add	r1, r2
 80206b0:	e787      	b.n	80205c2 <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x98>
 80206b2:	f06f 0601 	mvn.w	r6, #1
 80206b6:	fa1f fa82 	uxth.w	sl, r2
 80206ba:	f3c4 4c07 	ubfx	ip, r4, #16, #8
 80206be:	43d2      	mvns	r2, r2
 80206c0:	437e      	muls	r6, r7
 80206c2:	b2e4      	uxtb	r4, r4
 80206c4:	fb1c fc0a 	smulbb	ip, ip, sl
 80206c8:	b2d2      	uxtb	r2, r2
 80206ca:	f835 8006 	ldrh.w	r8, [r5, r6]
 80206ce:	fb14 f40a 	smulbb	r4, r4, sl
 80206d2:	9602      	str	r6, [sp, #8]
 80206d4:	ea4f 2e28 	mov.w	lr, r8, asr #8
 80206d8:	f89d 6014 	ldrb.w	r6, [sp, #20]
 80206dc:	fb16 f60a 	smulbb	r6, r6, sl
 80206e0:	f00e 0ef8 	and.w	lr, lr, #248	@ 0xf8
 80206e4:	fb0e ce02 	mla	lr, lr, r2, ip
 80206e8:	ea4f 0ce8 	mov.w	ip, r8, asr #3
 80206ec:	ea4f 08c8 	mov.w	r8, r8, lsl #3
 80206f0:	fa1f fe8e 	uxth.w	lr, lr
 80206f4:	f00c 0cfc 	and.w	ip, ip, #252	@ 0xfc
 80206f8:	fa5f f888 	uxtb.w	r8, r8
 80206fc:	fb0c 6c02 	mla	ip, ip, r2, r6
 8020700:	fb08 4402 	mla	r4, r8, r2, r4
 8020704:	f10e 0201 	add.w	r2, lr, #1
 8020708:	fa1f fc8c 	uxth.w	ip, ip
 802070c:	b2a4      	uxth	r4, r4
 802070e:	eb02 2e1e 	add.w	lr, r2, lr, lsr #8
 8020712:	9a02      	ldr	r2, [sp, #8]
 8020714:	1c66      	adds	r6, r4, #1
 8020716:	f40e 4e78 	and.w	lr, lr, #63488	@ 0xf800
 802071a:	eb06 2614 	add.w	r6, r6, r4, lsr #8
 802071e:	f3c6 26c4 	ubfx	r6, r6, #11, #5
 8020722:	ea46 0e0e 	orr.w	lr, r6, lr
 8020726:	f10c 0601 	add.w	r6, ip, #1
 802072a:	eb06 261c 	add.w	r6, r6, ip, lsr #8
 802072e:	0976      	lsrs	r6, r6, #5
 8020730:	f406 66fc 	and.w	r6, r6, #2016	@ 0x7e0
 8020734:	ea4e 0e06 	orr.w	lr, lr, r6
 8020738:	f825 e002 	strh.w	lr, [r5, r2]
 802073c:	e7b3      	b.n	80206a6 <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x17c>
 802073e:	f04f 0800 	mov.w	r8, #0
 8020742:	eba3 0208 	sub.w	r2, r3, r8
 8020746:	2a00      	cmp	r2, #0
 8020748:	f77f af3e 	ble.w	80205c8 <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x9e>
 802074c:	1404      	asrs	r4, r0, #16
 802074e:	f9b9 6008 	ldrsh.w	r6, [r9, #8]
 8020752:	140a      	asrs	r2, r1, #16
 8020754:	fb06 4202 	mla	r2, r6, r2, r4
 8020758:	9c01      	ldr	r4, [sp, #4]
 802075a:	f854 4022 	ldr.w	r4, [r4, r2, lsl #2]
 802075e:	0e22      	lsrs	r2, r4, #24
 8020760:	d015      	beq.n	802078e <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x264>
 8020762:	9e04      	ldr	r6, [sp, #16]
 8020764:	4372      	muls	r2, r6
 8020766:	1c56      	adds	r6, r2, #1
 8020768:	eb06 2222 	add.w	r2, r6, r2, asr #8
 802076c:	0a26      	lsrs	r6, r4, #8
 802076e:	1212      	asrs	r2, r2, #8
 8020770:	2aff      	cmp	r2, #255	@ 0xff
 8020772:	d113      	bne.n	802079c <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x272>
 8020774:	0962      	lsrs	r2, r4, #5
 8020776:	f426 66ff 	bic.w	r6, r6, #2040	@ 0x7f8
 802077a:	f3c4 04c4 	ubfx	r4, r4, #3, #5
 802077e:	f402 62fc 	and.w	r2, r2, #2016	@ 0x7e0
 8020782:	f026 0607 	bic.w	r6, r6, #7
 8020786:	4316      	orrs	r6, r2
 8020788:	4326      	orrs	r6, r4
 802078a:	f825 6018 	strh.w	r6, [r5, r8, lsl #1]
 802078e:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 8020790:	f108 0801 	add.w	r8, r8, #1
 8020794:	4410      	add	r0, r2
 8020796:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 8020798:	4411      	add	r1, r2
 802079a:	e7d2      	b.n	8020742 <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x218>
 802079c:	f835 e018 	ldrh.w	lr, [r5, r8, lsl #1]
 80207a0:	fa1f fa82 	uxth.w	sl, r2
 80207a4:	f3c4 4707 	ubfx	r7, r4, #16, #8
 80207a8:	43d2      	mvns	r2, r2
 80207aa:	ea4f 2c2e 	mov.w	ip, lr, asr #8
 80207ae:	fb17 f70a 	smulbb	r7, r7, sl
 80207b2:	b2d2      	uxtb	r2, r2
 80207b4:	f00c 0cf8 	and.w	ip, ip, #248	@ 0xf8
 80207b8:	b2e4      	uxtb	r4, r4
 80207ba:	b2f6      	uxtb	r6, r6
 80207bc:	fb0c 7c02 	mla	ip, ip, r2, r7
 80207c0:	ea4f 07ee 	mov.w	r7, lr, asr #3
 80207c4:	fb14 f40a 	smulbb	r4, r4, sl
 80207c8:	ea4f 0ece 	mov.w	lr, lr, lsl #3
 80207cc:	fa1f fc8c 	uxth.w	ip, ip
 80207d0:	f007 07fc 	and.w	r7, r7, #252	@ 0xfc
 80207d4:	fb16 f60a 	smulbb	r6, r6, sl
 80207d8:	fa5f fe8e 	uxtb.w	lr, lr
 80207dc:	fb0e 4402 	mla	r4, lr, r2, r4
 80207e0:	fb07 6702 	mla	r7, r7, r2, r6
 80207e4:	f10c 0201 	add.w	r2, ip, #1
 80207e8:	b2a4      	uxth	r4, r4
 80207ea:	eb02 2c1c 	add.w	ip, r2, ip, lsr #8
 80207ee:	1c66      	adds	r6, r4, #1
 80207f0:	b2bf      	uxth	r7, r7
 80207f2:	f40c 4c78 	and.w	ip, ip, #63488	@ 0xf800
 80207f6:	eb06 2614 	add.w	r6, r6, r4, lsr #8
 80207fa:	f3c6 26c4 	ubfx	r6, r6, #11, #5
 80207fe:	ea46 0c0c 	orr.w	ip, r6, ip
 8020802:	1c7e      	adds	r6, r7, #1
 8020804:	eb06 2617 	add.w	r6, r6, r7, lsr #8
 8020808:	0976      	lsrs	r6, r6, #5
 802080a:	f406 66fc 	and.w	r6, r6, #2016	@ 0x7e0
 802080e:	ea4c 0c06 	orr.w	ip, ip, r6
 8020812:	f825 c018 	strh.w	ip, [r5, r8, lsl #1]
 8020816:	e7ba      	b.n	802078e <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x264>
 8020818:	b007      	add	sp, #28
 802081a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	...

08020820 <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 8020820:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8020824:	b085      	sub	sp, #20
 8020826:	468b      	mov	fp, r1
 8020828:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 802082c:	9813      	ldr	r0, [sp, #76]	@ 0x4c
 802082e:	9203      	str	r2, [sp, #12]
 8020830:	6841      	ldr	r1, [r0, #4]
 8020832:	f8dd 8058 	ldr.w	r8, [sp, #88]	@ 0x58
 8020836:	e9dd 2414 	ldrd	r2, r4, [sp, #80]	@ 0x50
 802083a:	fb01 2404 	mla	r4, r1, r4, r2
 802083e:	6802      	ldr	r2, [r0, #0]
 8020840:	eb02 0444 	add.w	r4, r2, r4, lsl #1
 8020844:	f8d8 2000 	ldr.w	r2, [r8]
 8020848:	9201      	str	r2, [sp, #4]
 802084a:	f1bb 0f00 	cmp.w	fp, #0
 802084e:	dc03      	bgt.n	8020858 <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x38>
 8020850:	9a03      	ldr	r2, [sp, #12]
 8020852:	2a00      	cmp	r2, #0
 8020854:	f340 814f 	ble.w	8020af6 <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2d6>
 8020858:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 802085a:	f9b8 7008 	ldrsh.w	r7, [r8, #8]
 802085e:	f502 4100 	add.w	r1, r2, #32768	@ 0x8000
 8020862:	9a10      	ldr	r2, [sp, #64]	@ 0x40
 8020864:	f9b8 600c 	ldrsh.w	r6, [r8, #12]
 8020868:	f502 4200 	add.w	r2, r2, #32768	@ 0x8000
 802086c:	2b00      	cmp	r3, #0
 802086e:	dd0e      	ble.n	802088e <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6e>
 8020870:	1408      	asrs	r0, r1, #16
 8020872:	d405      	bmi.n	8020880 <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x60>
 8020874:	42b8      	cmp	r0, r7
 8020876:	da03      	bge.n	8020880 <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x60>
 8020878:	1410      	asrs	r0, r2, #16
 802087a:	d401      	bmi.n	8020880 <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x60>
 802087c:	42b0      	cmp	r0, r6
 802087e:	db07      	blt.n	8020890 <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x70>
 8020880:	9811      	ldr	r0, [sp, #68]	@ 0x44
 8020882:	3b01      	subs	r3, #1
 8020884:	3402      	adds	r4, #2
 8020886:	4401      	add	r1, r0
 8020888:	9812      	ldr	r0, [sp, #72]	@ 0x48
 802088a:	4402      	add	r2, r0
 802088c:	e7ee      	b.n	802086c <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4c>
 802088e:	d017      	beq.n	80208c0 <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa0>
 8020890:	1e58      	subs	r0, r3, #1
 8020892:	9d11      	ldr	r5, [sp, #68]	@ 0x44
 8020894:	fb05 1500 	mla	r5, r5, r0, r1
 8020898:	142d      	asrs	r5, r5, #16
 802089a:	d409      	bmi.n	80208b0 <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x90>
 802089c:	42bd      	cmp	r5, r7
 802089e:	da07      	bge.n	80208b0 <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x90>
 80208a0:	9d12      	ldr	r5, [sp, #72]	@ 0x48
 80208a2:	fb05 2000 	mla	r0, r5, r0, r2
 80208a6:	1400      	asrs	r0, r0, #16
 80208a8:	d402      	bmi.n	80208b0 <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x90>
 80208aa:	42b0      	cmp	r0, r6
 80208ac:	f2c0 80ba 	blt.w	8020a24 <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x204>
 80208b0:	2600      	movs	r6, #0
 80208b2:	1998      	adds	r0, r3, r6
 80208b4:	2800      	cmp	r0, #0
 80208b6:	dc3e      	bgt.n	8020936 <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x116>
 80208b8:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 80208bc:	eb04 0443 	add.w	r4, r4, r3, lsl #1
 80208c0:	f1bb 0f00 	cmp.w	fp, #0
 80208c4:	f340 8117 	ble.w	8020af6 <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2d6>
 80208c8:	ee30 0a04 	vadd.f32	s0, s0, s8
 80208cc:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80208ce:	ee70 0aa4 	vadd.f32	s1, s1, s9
 80208d2:	f1bb 0b01 	subs.w	fp, fp, #1
 80208d6:	eeb0 6a62 	vmov.f32	s12, s5
 80208da:	eec6 7a80 	vdiv.f32	s15, s13, s0
 80208de:	ee31 1a05 	vadd.f32	s2, s2, s10
 80208e2:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 80208e6:	ed8d 6a0f 	vstr	s12, [sp, #60]	@ 0x3c
 80208ea:	eeb0 6a43 	vmov.f32	s12, s6
 80208ee:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 80208f2:	ed8d 6a10 	vstr	s12, [sp, #64]	@ 0x40
 80208f6:	ee20 7aa7 	vmul.f32	s14, s1, s15
 80208fa:	ee61 7a27 	vmul.f32	s15, s2, s15
 80208fe:	ee77 2a62 	vsub.f32	s5, s14, s5
 8020902:	ee37 3ac3 	vsub.f32	s6, s15, s6
 8020906:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 802090a:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 802090e:	ee12 2a90 	vmov	r2, s5
 8020912:	eef0 2a47 	vmov.f32	s5, s14
 8020916:	fb92 f3f3 	sdiv	r3, r2, r3
 802091a:	ee13 2a10 	vmov	r2, s6
 802091e:	9311      	str	r3, [sp, #68]	@ 0x44
 8020920:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8020922:	eeb0 3a67 	vmov.f32	s6, s15
 8020926:	fb92 f3f3 	sdiv	r3, r2, r3
 802092a:	9a03      	ldr	r2, [sp, #12]
 802092c:	9312      	str	r3, [sp, #72]	@ 0x48
 802092e:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8020930:	bf08      	it	eq
 8020932:	4613      	moveq	r3, r2
 8020934:	e789      	b.n	802084a <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2a>
 8020936:	140f      	asrs	r7, r1, #16
 8020938:	d424      	bmi.n	8020984 <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x164>
 802093a:	f8d8 5008 	ldr.w	r5, [r8, #8]
 802093e:	42bd      	cmp	r5, r7
 8020940:	dd20      	ble.n	8020984 <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x164>
 8020942:	ea5f 4c22 	movs.w	ip, r2, asr #16
 8020946:	d41d      	bmi.n	8020984 <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x164>
 8020948:	f8d8 000c 	ldr.w	r0, [r8, #12]
 802094c:	4560      	cmp	r0, ip
 802094e:	dd19      	ble.n	8020984 <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x164>
 8020950:	b22d      	sxth	r5, r5
 8020952:	9801      	ldr	r0, [sp, #4]
 8020954:	fb0c 7505 	mla	r5, ip, r5, r7
 8020958:	f850 0025 	ldr.w	r0, [r0, r5, lsl #2]
 802095c:	0e07      	lsrs	r7, r0, #24
 802095e:	2fff      	cmp	r7, #255	@ 0xff
 8020960:	d116      	bne.n	8020990 <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x170>
 8020962:	f06f 0501 	mvn.w	r5, #1
 8020966:	fb05 f706 	mul.w	r7, r5, r6
 802096a:	f2a5 75fe 	subw	r5, r5, #2046	@ 0x7fe
 802096e:	ea05 2c10 	and.w	ip, r5, r0, lsr #8
 8020972:	0945      	lsrs	r5, r0, #5
 8020974:	f3c0 00c4 	ubfx	r0, r0, #3, #5
 8020978:	f405 65fc 	and.w	r5, r5, #2016	@ 0x7e0
 802097c:	ea4c 0505 	orr.w	r5, ip, r5
 8020980:	4305      	orrs	r5, r0
 8020982:	53e5      	strh	r5, [r4, r7]
 8020984:	9811      	ldr	r0, [sp, #68]	@ 0x44
 8020986:	3e01      	subs	r6, #1
 8020988:	4401      	add	r1, r0
 802098a:	9812      	ldr	r0, [sp, #72]	@ 0x48
 802098c:	4402      	add	r2, r0
 802098e:	e790      	b.n	80208b2 <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x92>
 8020990:	b2fd      	uxtb	r5, r7
 8020992:	2f00      	cmp	r7, #0
 8020994:	d0f6      	beq.n	8020984 <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x164>
 8020996:	f06f 0701 	mvn.w	r7, #1
 802099a:	fa1f f985 	uxth.w	r9, r5
 802099e:	43ed      	mvns	r5, r5
 80209a0:	f3c0 2a07 	ubfx	sl, r0, #8, #8
 80209a4:	4377      	muls	r7, r6
 80209a6:	fb1a fa09 	smulbb	sl, sl, r9
 80209aa:	b2ed      	uxtb	r5, r5
 80209ac:	f834 e007 	ldrh.w	lr, [r4, r7]
 80209b0:	9702      	str	r7, [sp, #8]
 80209b2:	f3c0 4707 	ubfx	r7, r0, #16, #8
 80209b6:	ea4f 2c2e 	mov.w	ip, lr, asr #8
 80209ba:	fb17 f709 	smulbb	r7, r7, r9
 80209be:	b2c0      	uxtb	r0, r0
 80209c0:	f00c 0cf8 	and.w	ip, ip, #248	@ 0xf8
 80209c4:	fb10 f009 	smulbb	r0, r0, r9
 80209c8:	fb0c 7c05 	mla	ip, ip, r5, r7
 80209cc:	ea4f 07ee 	mov.w	r7, lr, asr #3
 80209d0:	ea4f 0ece 	mov.w	lr, lr, lsl #3
 80209d4:	fa1f fc8c 	uxth.w	ip, ip
 80209d8:	f007 07fc 	and.w	r7, r7, #252	@ 0xfc
 80209dc:	fa5f fe8e 	uxtb.w	lr, lr
 80209e0:	fb07 a705 	mla	r7, r7, r5, sl
 80209e4:	fb0e 0005 	mla	r0, lr, r5, r0
 80209e8:	f10c 0501 	add.w	r5, ip, #1
 80209ec:	b2bf      	uxth	r7, r7
 80209ee:	b280      	uxth	r0, r0
 80209f0:	eb05 2c1c 	add.w	ip, r5, ip, lsr #8
 80209f4:	f100 0a01 	add.w	sl, r0, #1
 80209f8:	f40c 4c78 	and.w	ip, ip, #63488	@ 0xf800
 80209fc:	eb0a 2a10 	add.w	sl, sl, r0, lsr #8
 8020a00:	9802      	ldr	r0, [sp, #8]
 8020a02:	f3ca 2ac4 	ubfx	sl, sl, #11, #5
 8020a06:	ea4a 0c0c 	orr.w	ip, sl, ip
 8020a0a:	f107 0a01 	add.w	sl, r7, #1
 8020a0e:	eb0a 2a17 	add.w	sl, sl, r7, lsr #8
 8020a12:	ea4f 1a5a 	mov.w	sl, sl, lsr #5
 8020a16:	f40a 6afc 	and.w	sl, sl, #2016	@ 0x7e0
 8020a1a:	ea4c 0c0a 	orr.w	ip, ip, sl
 8020a1e:	f824 c000 	strh.w	ip, [r4, r0]
 8020a22:	e7af      	b.n	8020984 <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x164>
 8020a24:	f04f 0e00 	mov.w	lr, #0
 8020a28:	eba3 000e 	sub.w	r0, r3, lr
 8020a2c:	2800      	cmp	r0, #0
 8020a2e:	f77f af43 	ble.w	80208b8 <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x98>
 8020a32:	f9b8 6008 	ldrsh.w	r6, [r8, #8]
 8020a36:	140d      	asrs	r5, r1, #16
 8020a38:	1410      	asrs	r0, r2, #16
 8020a3a:	fb06 5000 	mla	r0, r6, r0, r5
 8020a3e:	9d01      	ldr	r5, [sp, #4]
 8020a40:	f855 5020 	ldr.w	r5, [r5, r0, lsl #2]
 8020a44:	0e2e      	lsrs	r6, r5, #24
 8020a46:	2eff      	cmp	r6, #255	@ 0xff
 8020a48:	d112      	bne.n	8020a70 <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x250>
 8020a4a:	482c      	ldr	r0, [pc, #176]	@ (8020afc <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2dc>)
 8020a4c:	ea00 2615 	and.w	r6, r0, r5, lsr #8
 8020a50:	0968      	lsrs	r0, r5, #5
 8020a52:	f3c5 05c4 	ubfx	r5, r5, #3, #5
 8020a56:	f400 60fc 	and.w	r0, r0, #2016	@ 0x7e0
 8020a5a:	4330      	orrs	r0, r6
 8020a5c:	4328      	orrs	r0, r5
 8020a5e:	f824 001e 	strh.w	r0, [r4, lr, lsl #1]
 8020a62:	9811      	ldr	r0, [sp, #68]	@ 0x44
 8020a64:	f10e 0e01 	add.w	lr, lr, #1
 8020a68:	4401      	add	r1, r0
 8020a6a:	9812      	ldr	r0, [sp, #72]	@ 0x48
 8020a6c:	4402      	add	r2, r0
 8020a6e:	e7db      	b.n	8020a28 <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x208>
 8020a70:	b2f0      	uxtb	r0, r6
 8020a72:	2e00      	cmp	r6, #0
 8020a74:	d0f5      	beq.n	8020a62 <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x242>
 8020a76:	f834 c01e 	ldrh.w	ip, [r4, lr, lsl #1]
 8020a7a:	fa1f f980 	uxth.w	r9, r0
 8020a7e:	f3c5 4607 	ubfx	r6, r5, #16, #8
 8020a82:	43c0      	mvns	r0, r0
 8020a84:	ea4f 272c 	mov.w	r7, ip, asr #8
 8020a88:	f3c5 2a07 	ubfx	sl, r5, #8, #8
 8020a8c:	fb16 f609 	smulbb	r6, r6, r9
 8020a90:	b2c0      	uxtb	r0, r0
 8020a92:	f007 07f8 	and.w	r7, r7, #248	@ 0xf8
 8020a96:	b2ed      	uxtb	r5, r5
 8020a98:	fb1a fa09 	smulbb	sl, sl, r9
 8020a9c:	fb07 6700 	mla	r7, r7, r0, r6
 8020aa0:	ea4f 06ec 	mov.w	r6, ip, asr #3
 8020aa4:	fb15 f509 	smulbb	r5, r5, r9
 8020aa8:	ea4f 0ccc 	mov.w	ip, ip, lsl #3
 8020aac:	b2bf      	uxth	r7, r7
 8020aae:	f006 06fc 	and.w	r6, r6, #252	@ 0xfc
 8020ab2:	fa5f fc8c 	uxtb.w	ip, ip
 8020ab6:	fb06 a600 	mla	r6, r6, r0, sl
 8020aba:	fb0c 5500 	mla	r5, ip, r0, r5
 8020abe:	1c78      	adds	r0, r7, #1
 8020ac0:	b2b6      	uxth	r6, r6
 8020ac2:	b2ad      	uxth	r5, r5
 8020ac4:	eb00 2717 	add.w	r7, r0, r7, lsr #8
 8020ac8:	f105 0a01 	add.w	sl, r5, #1
 8020acc:	f407 4778 	and.w	r7, r7, #63488	@ 0xf800
 8020ad0:	eb0a 2a15 	add.w	sl, sl, r5, lsr #8
 8020ad4:	f3ca 2ac4 	ubfx	sl, sl, #11, #5
 8020ad8:	ea4a 0707 	orr.w	r7, sl, r7
 8020adc:	f106 0a01 	add.w	sl, r6, #1
 8020ae0:	eb0a 2a16 	add.w	sl, sl, r6, lsr #8
 8020ae4:	ea4f 1a5a 	mov.w	sl, sl, lsr #5
 8020ae8:	f40a 6afc 	and.w	sl, sl, #2016	@ 0x7e0
 8020aec:	ea47 070a 	orr.w	r7, r7, sl
 8020af0:	f824 701e 	strh.w	r7, [r4, lr, lsl #1]
 8020af4:	e7b5      	b.n	8020a62 <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x242>
 8020af6:	b005      	add	sp, #20
 8020af8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8020afc:	fffff800 	.word	0xfffff800

08020b00 <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 8020b00:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8020b04:	b087      	sub	sp, #28
 8020b06:	468b      	mov	fp, r1
 8020b08:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8020b0c:	9815      	ldr	r0, [sp, #84]	@ 0x54
 8020b0e:	9203      	str	r2, [sp, #12]
 8020b10:	f89d 2064 	ldrb.w	r2, [sp, #100]	@ 0x64
 8020b14:	6841      	ldr	r1, [r0, #4]
 8020b16:	9204      	str	r2, [sp, #16]
 8020b18:	f8dd 9060 	ldr.w	r9, [sp, #96]	@ 0x60
 8020b1c:	e9dd 2416 	ldrd	r2, r4, [sp, #88]	@ 0x58
 8020b20:	fb01 2404 	mla	r4, r1, r4, r2
 8020b24:	6802      	ldr	r2, [r0, #0]
 8020b26:	eb02 0444 	add.w	r4, r2, r4, lsl #1
 8020b2a:	f8d9 2008 	ldr.w	r2, [r9, #8]
 8020b2e:	3201      	adds	r2, #1
 8020b30:	f022 0201 	bic.w	r2, r2, #1
 8020b34:	9200      	str	r2, [sp, #0]
 8020b36:	f8d9 2000 	ldr.w	r2, [r9]
 8020b3a:	9201      	str	r2, [sp, #4]
 8020b3c:	f1bb 0f00 	cmp.w	fp, #0
 8020b40:	dc03      	bgt.n	8020b4a <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4a>
 8020b42:	9a03      	ldr	r2, [sp, #12]
 8020b44:	2a00      	cmp	r2, #0
 8020b46:	f340 816a 	ble.w	8020e1e <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x31e>
 8020b4a:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 8020b4c:	f9b9 7008 	ldrsh.w	r7, [r9, #8]
 8020b50:	f502 4000 	add.w	r0, r2, #32768	@ 0x8000
 8020b54:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 8020b56:	f9b9 600c 	ldrsh.w	r6, [r9, #12]
 8020b5a:	f502 4100 	add.w	r1, r2, #32768	@ 0x8000
 8020b5e:	2b00      	cmp	r3, #0
 8020b60:	dd0e      	ble.n	8020b80 <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x80>
 8020b62:	1402      	asrs	r2, r0, #16
 8020b64:	d405      	bmi.n	8020b72 <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x72>
 8020b66:	42ba      	cmp	r2, r7
 8020b68:	da03      	bge.n	8020b72 <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x72>
 8020b6a:	140a      	asrs	r2, r1, #16
 8020b6c:	d401      	bmi.n	8020b72 <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x72>
 8020b6e:	42b2      	cmp	r2, r6
 8020b70:	db07      	blt.n	8020b82 <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x82>
 8020b72:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 8020b74:	3b01      	subs	r3, #1
 8020b76:	3402      	adds	r4, #2
 8020b78:	4410      	add	r0, r2
 8020b7a:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 8020b7c:	4411      	add	r1, r2
 8020b7e:	e7ee      	b.n	8020b5e <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5e>
 8020b80:	d017      	beq.n	8020bb2 <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xb2>
 8020b82:	1e5a      	subs	r2, r3, #1
 8020b84:	9d13      	ldr	r5, [sp, #76]	@ 0x4c
 8020b86:	fb05 0502 	mla	r5, r5, r2, r0
 8020b8a:	142d      	asrs	r5, r5, #16
 8020b8c:	d409      	bmi.n	8020ba2 <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa2>
 8020b8e:	42bd      	cmp	r5, r7
 8020b90:	da07      	bge.n	8020ba2 <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa2>
 8020b92:	9d14      	ldr	r5, [sp, #80]	@ 0x50
 8020b94:	fb05 1202 	mla	r2, r5, r2, r1
 8020b98:	1412      	asrs	r2, r2, #16
 8020b9a:	d402      	bmi.n	8020ba2 <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa2>
 8020b9c:	42b2      	cmp	r2, r6
 8020b9e:	f2c0 80c8 	blt.w	8020d32 <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x232>
 8020ba2:	2700      	movs	r7, #0
 8020ba4:	19da      	adds	r2, r3, r7
 8020ba6:	2a00      	cmp	r2, #0
 8020ba8:	dc3e      	bgt.n	8020c28 <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x128>
 8020baa:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8020bae:	eb04 0443 	add.w	r4, r4, r3, lsl #1
 8020bb2:	f1bb 0f00 	cmp.w	fp, #0
 8020bb6:	f340 8132 	ble.w	8020e1e <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x31e>
 8020bba:	ee30 0a04 	vadd.f32	s0, s0, s8
 8020bbe:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8020bc0:	ee70 0aa4 	vadd.f32	s1, s1, s9
 8020bc4:	f1bb 0b01 	subs.w	fp, fp, #1
 8020bc8:	eeb0 6a62 	vmov.f32	s12, s5
 8020bcc:	eec6 7a80 	vdiv.f32	s15, s13, s0
 8020bd0:	ee31 1a05 	vadd.f32	s2, s2, s10
 8020bd4:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 8020bd8:	ed8d 6a11 	vstr	s12, [sp, #68]	@ 0x44
 8020bdc:	eeb0 6a43 	vmov.f32	s12, s6
 8020be0:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 8020be4:	ed8d 6a12 	vstr	s12, [sp, #72]	@ 0x48
 8020be8:	ee20 7aa7 	vmul.f32	s14, s1, s15
 8020bec:	ee61 7a27 	vmul.f32	s15, s2, s15
 8020bf0:	ee77 2a62 	vsub.f32	s5, s14, s5
 8020bf4:	ee37 3ac3 	vsub.f32	s6, s15, s6
 8020bf8:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 8020bfc:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 8020c00:	ee12 2a90 	vmov	r2, s5
 8020c04:	eef0 2a47 	vmov.f32	s5, s14
 8020c08:	fb92 f3f3 	sdiv	r3, r2, r3
 8020c0c:	ee13 2a10 	vmov	r2, s6
 8020c10:	9313      	str	r3, [sp, #76]	@ 0x4c
 8020c12:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8020c14:	eeb0 3a67 	vmov.f32	s6, s15
 8020c18:	fb92 f3f3 	sdiv	r3, r2, r3
 8020c1c:	9a03      	ldr	r2, [sp, #12]
 8020c1e:	9314      	str	r3, [sp, #80]	@ 0x50
 8020c20:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8020c22:	bf08      	it	eq
 8020c24:	4613      	moveq	r3, r2
 8020c26:	e789      	b.n	8020b3c <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3c>
 8020c28:	1405      	asrs	r5, r0, #16
 8020c2a:	d436      	bmi.n	8020c9a <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x19a>
 8020c2c:	f8d9 2008 	ldr.w	r2, [r9, #8]
 8020c30:	42aa      	cmp	r2, r5
 8020c32:	dd32      	ble.n	8020c9a <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x19a>
 8020c34:	140e      	asrs	r6, r1, #16
 8020c36:	d430      	bmi.n	8020c9a <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x19a>
 8020c38:	f8d9 200c 	ldr.w	r2, [r9, #12]
 8020c3c:	42b2      	cmp	r2, r6
 8020c3e:	dd2c      	ble.n	8020c9a <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x19a>
 8020c40:	9a00      	ldr	r2, [sp, #0]
 8020c42:	fb06 5502 	mla	r5, r6, r2, r5
 8020c46:	9e01      	ldr	r6, [sp, #4]
 8020c48:	086a      	lsrs	r2, r5, #1
 8020c4a:	5cb2      	ldrb	r2, [r6, r2]
 8020c4c:	07ee      	lsls	r6, r5, #31
 8020c4e:	bf54      	ite	pl
 8020c50:	f002 020f 	andpl.w	r2, r2, #15
 8020c54:	1112      	asrmi	r2, r2, #4
 8020c56:	eb02 1202 	add.w	r2, r2, r2, lsl #4
 8020c5a:	b2d2      	uxtb	r2, r2
 8020c5c:	b1ea      	cbz	r2, 8020c9a <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x19a>
 8020c5e:	9d04      	ldr	r5, [sp, #16]
 8020c60:	436a      	muls	r2, r5
 8020c62:	1c55      	adds	r5, r2, #1
 8020c64:	eb05 2222 	add.w	r2, r5, r2, asr #8
 8020c68:	4d6e      	ldr	r5, [pc, #440]	@ (8020e24 <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x324>)
 8020c6a:	1212      	asrs	r2, r2, #8
 8020c6c:	682d      	ldr	r5, [r5, #0]
 8020c6e:	2aff      	cmp	r2, #255	@ 0xff
 8020c70:	ea4f 2615 	mov.w	r6, r5, lsr #8
 8020c74:	9605      	str	r6, [sp, #20]
 8020c76:	d116      	bne.n	8020ca6 <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1a6>
 8020c78:	f06f 0201 	mvn.w	r2, #1
 8020c7c:	f426 66ff 	bic.w	r6, r6, #2040	@ 0x7f8
 8020c80:	fb02 fc07 	mul.w	ip, r2, r7
 8020c84:	096a      	lsrs	r2, r5, #5
 8020c86:	f026 0607 	bic.w	r6, r6, #7
 8020c8a:	f3c5 05c4 	ubfx	r5, r5, #3, #5
 8020c8e:	f402 62fc 	and.w	r2, r2, #2016	@ 0x7e0
 8020c92:	4316      	orrs	r6, r2
 8020c94:	432e      	orrs	r6, r5
 8020c96:	f824 600c 	strh.w	r6, [r4, ip]
 8020c9a:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 8020c9c:	3f01      	subs	r7, #1
 8020c9e:	4410      	add	r0, r2
 8020ca0:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 8020ca2:	4411      	add	r1, r2
 8020ca4:	e77e      	b.n	8020ba4 <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa4>
 8020ca6:	f06f 0601 	mvn.w	r6, #1
 8020caa:	fa1f fa82 	uxth.w	sl, r2
 8020cae:	f3c5 4c07 	ubfx	ip, r5, #16, #8
 8020cb2:	43d2      	mvns	r2, r2
 8020cb4:	437e      	muls	r6, r7
 8020cb6:	b2ed      	uxtb	r5, r5
 8020cb8:	fb1c fc0a 	smulbb	ip, ip, sl
 8020cbc:	b2d2      	uxtb	r2, r2
 8020cbe:	f834 8006 	ldrh.w	r8, [r4, r6]
 8020cc2:	fb15 f50a 	smulbb	r5, r5, sl
 8020cc6:	9602      	str	r6, [sp, #8]
 8020cc8:	ea4f 2e28 	mov.w	lr, r8, asr #8
 8020ccc:	f89d 6014 	ldrb.w	r6, [sp, #20]
 8020cd0:	fb16 f60a 	smulbb	r6, r6, sl
 8020cd4:	f00e 0ef8 	and.w	lr, lr, #248	@ 0xf8
 8020cd8:	fb0e ce02 	mla	lr, lr, r2, ip
 8020cdc:	ea4f 0ce8 	mov.w	ip, r8, asr #3
 8020ce0:	ea4f 08c8 	mov.w	r8, r8, lsl #3
 8020ce4:	fa1f fe8e 	uxth.w	lr, lr
 8020ce8:	f00c 0cfc 	and.w	ip, ip, #252	@ 0xfc
 8020cec:	fa5f f888 	uxtb.w	r8, r8
 8020cf0:	fb0c 6c02 	mla	ip, ip, r2, r6
 8020cf4:	fb08 5502 	mla	r5, r8, r2, r5
 8020cf8:	f10e 0201 	add.w	r2, lr, #1
 8020cfc:	fa1f fc8c 	uxth.w	ip, ip
 8020d00:	b2ad      	uxth	r5, r5
 8020d02:	eb02 2e1e 	add.w	lr, r2, lr, lsr #8
 8020d06:	9a02      	ldr	r2, [sp, #8]
 8020d08:	1c6e      	adds	r6, r5, #1
 8020d0a:	f40e 4e78 	and.w	lr, lr, #63488	@ 0xf800
 8020d0e:	eb06 2615 	add.w	r6, r6, r5, lsr #8
 8020d12:	f3c6 26c4 	ubfx	r6, r6, #11, #5
 8020d16:	ea46 0e0e 	orr.w	lr, r6, lr
 8020d1a:	f10c 0601 	add.w	r6, ip, #1
 8020d1e:	eb06 261c 	add.w	r6, r6, ip, lsr #8
 8020d22:	0976      	lsrs	r6, r6, #5
 8020d24:	f406 66fc 	and.w	r6, r6, #2016	@ 0x7e0
 8020d28:	ea4e 0e06 	orr.w	lr, lr, r6
 8020d2c:	f824 e002 	strh.w	lr, [r4, r2]
 8020d30:	e7b3      	b.n	8020c9a <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x19a>
 8020d32:	f04f 0800 	mov.w	r8, #0
 8020d36:	eba3 0208 	sub.w	r2, r3, r8
 8020d3a:	2a00      	cmp	r2, #0
 8020d3c:	f77f af35 	ble.w	8020baa <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xaa>
 8020d40:	1402      	asrs	r2, r0, #16
 8020d42:	9e00      	ldr	r6, [sp, #0]
 8020d44:	140d      	asrs	r5, r1, #16
 8020d46:	fb06 2505 	mla	r5, r6, r5, r2
 8020d4a:	9e01      	ldr	r6, [sp, #4]
 8020d4c:	086a      	lsrs	r2, r5, #1
 8020d4e:	07ed      	lsls	r5, r5, #31
 8020d50:	5cb2      	ldrb	r2, [r6, r2]
 8020d52:	bf54      	ite	pl
 8020d54:	f002 020f 	andpl.w	r2, r2, #15
 8020d58:	1112      	asrmi	r2, r2, #4
 8020d5a:	eb02 1202 	add.w	r2, r2, r2, lsl #4
 8020d5e:	b2d2      	uxtb	r2, r2
 8020d60:	b1c2      	cbz	r2, 8020d94 <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x294>
 8020d62:	9d04      	ldr	r5, [sp, #16]
 8020d64:	436a      	muls	r2, r5
 8020d66:	1c55      	adds	r5, r2, #1
 8020d68:	eb05 2222 	add.w	r2, r5, r2, asr #8
 8020d6c:	4d2d      	ldr	r5, [pc, #180]	@ (8020e24 <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x324>)
 8020d6e:	1212      	asrs	r2, r2, #8
 8020d70:	682e      	ldr	r6, [r5, #0]
 8020d72:	2aff      	cmp	r2, #255	@ 0xff
 8020d74:	ea4f 2516 	mov.w	r5, r6, lsr #8
 8020d78:	d113      	bne.n	8020da2 <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2a2>
 8020d7a:	0972      	lsrs	r2, r6, #5
 8020d7c:	f425 65ff 	bic.w	r5, r5, #2040	@ 0x7f8
 8020d80:	f3c6 06c4 	ubfx	r6, r6, #3, #5
 8020d84:	f402 62fc 	and.w	r2, r2, #2016	@ 0x7e0
 8020d88:	f025 0507 	bic.w	r5, r5, #7
 8020d8c:	4315      	orrs	r5, r2
 8020d8e:	4335      	orrs	r5, r6
 8020d90:	f824 5018 	strh.w	r5, [r4, r8, lsl #1]
 8020d94:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 8020d96:	f108 0801 	add.w	r8, r8, #1
 8020d9a:	4410      	add	r0, r2
 8020d9c:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 8020d9e:	4411      	add	r1, r2
 8020da0:	e7c9      	b.n	8020d36 <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x236>
 8020da2:	f834 e018 	ldrh.w	lr, [r4, r8, lsl #1]
 8020da6:	fa1f fa82 	uxth.w	sl, r2
 8020daa:	f3c6 4707 	ubfx	r7, r6, #16, #8
 8020dae:	43d2      	mvns	r2, r2
 8020db0:	ea4f 2c2e 	mov.w	ip, lr, asr #8
 8020db4:	fb17 f70a 	smulbb	r7, r7, sl
 8020db8:	b2d2      	uxtb	r2, r2
 8020dba:	f00c 0cf8 	and.w	ip, ip, #248	@ 0xf8
 8020dbe:	b2f6      	uxtb	r6, r6
 8020dc0:	b2ed      	uxtb	r5, r5
 8020dc2:	fb0c 7c02 	mla	ip, ip, r2, r7
 8020dc6:	ea4f 07ee 	mov.w	r7, lr, asr #3
 8020dca:	fb16 f60a 	smulbb	r6, r6, sl
 8020dce:	ea4f 0ece 	mov.w	lr, lr, lsl #3
 8020dd2:	fa1f fc8c 	uxth.w	ip, ip
 8020dd6:	f007 07fc 	and.w	r7, r7, #252	@ 0xfc
 8020dda:	fb15 f50a 	smulbb	r5, r5, sl
 8020dde:	fa5f fe8e 	uxtb.w	lr, lr
 8020de2:	fb0e 6602 	mla	r6, lr, r2, r6
 8020de6:	fb07 5702 	mla	r7, r7, r2, r5
 8020dea:	f10c 0201 	add.w	r2, ip, #1
 8020dee:	b2b6      	uxth	r6, r6
 8020df0:	eb02 2c1c 	add.w	ip, r2, ip, lsr #8
 8020df4:	1c75      	adds	r5, r6, #1
 8020df6:	b2bf      	uxth	r7, r7
 8020df8:	f40c 4c78 	and.w	ip, ip, #63488	@ 0xf800
 8020dfc:	eb05 2516 	add.w	r5, r5, r6, lsr #8
 8020e00:	f3c5 25c4 	ubfx	r5, r5, #11, #5
 8020e04:	ea45 0c0c 	orr.w	ip, r5, ip
 8020e08:	1c7d      	adds	r5, r7, #1
 8020e0a:	eb05 2517 	add.w	r5, r5, r7, lsr #8
 8020e0e:	096d      	lsrs	r5, r5, #5
 8020e10:	f405 65fc 	and.w	r5, r5, #2016	@ 0x7e0
 8020e14:	ea4c 0c05 	orr.w	ip, ip, r5
 8020e18:	f824 c018 	strh.w	ip, [r4, r8, lsl #1]
 8020e1c:	e7ba      	b.n	8020d94 <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x294>
 8020e1e:	b007      	add	sp, #28
 8020e20:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8020e24:	2400b888 	.word	0x2400b888

08020e28 <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 8020e28:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8020e2c:	b087      	sub	sp, #28
 8020e2e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8020e32:	f8df 8308 	ldr.w	r8, [pc, #776]	@ 802113c <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x314>
 8020e36:	9815      	ldr	r0, [sp, #84]	@ 0x54
 8020e38:	9101      	str	r1, [sp, #4]
 8020e3a:	9205      	str	r2, [sp, #20]
 8020e3c:	6841      	ldr	r1, [r0, #4]
 8020e3e:	f8dd b060 	ldr.w	fp, [sp, #96]	@ 0x60
 8020e42:	e9dd 2416 	ldrd	r2, r4, [sp, #88]	@ 0x58
 8020e46:	fb01 2404 	mla	r4, r1, r4, r2
 8020e4a:	6802      	ldr	r2, [r0, #0]
 8020e4c:	eb02 0444 	add.w	r4, r2, r4, lsl #1
 8020e50:	f8db 2008 	ldr.w	r2, [fp, #8]
 8020e54:	3201      	adds	r2, #1
 8020e56:	f022 0201 	bic.w	r2, r2, #1
 8020e5a:	9202      	str	r2, [sp, #8]
 8020e5c:	f8db 2000 	ldr.w	r2, [fp]
 8020e60:	9203      	str	r2, [sp, #12]
 8020e62:	9a01      	ldr	r2, [sp, #4]
 8020e64:	2a00      	cmp	r2, #0
 8020e66:	dc03      	bgt.n	8020e70 <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x48>
 8020e68:	9a05      	ldr	r2, [sp, #20]
 8020e6a:	2a00      	cmp	r2, #0
 8020e6c:	f340 8162 	ble.w	8021134 <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x30c>
 8020e70:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 8020e72:	f9bb 7008 	ldrsh.w	r7, [fp, #8]
 8020e76:	f502 4000 	add.w	r0, r2, #32768	@ 0x8000
 8020e7a:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 8020e7c:	f9bb 600c 	ldrsh.w	r6, [fp, #12]
 8020e80:	f502 4100 	add.w	r1, r2, #32768	@ 0x8000
 8020e84:	2b00      	cmp	r3, #0
 8020e86:	dd0e      	ble.n	8020ea6 <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7e>
 8020e88:	1402      	asrs	r2, r0, #16
 8020e8a:	d405      	bmi.n	8020e98 <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x70>
 8020e8c:	42ba      	cmp	r2, r7
 8020e8e:	da03      	bge.n	8020e98 <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x70>
 8020e90:	140a      	asrs	r2, r1, #16
 8020e92:	d401      	bmi.n	8020e98 <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x70>
 8020e94:	42b2      	cmp	r2, r6
 8020e96:	db07      	blt.n	8020ea8 <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x80>
 8020e98:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 8020e9a:	3b01      	subs	r3, #1
 8020e9c:	3402      	adds	r4, #2
 8020e9e:	4410      	add	r0, r2
 8020ea0:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 8020ea2:	4411      	add	r1, r2
 8020ea4:	e7ee      	b.n	8020e84 <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5c>
 8020ea6:	d017      	beq.n	8020ed8 <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xb0>
 8020ea8:	1e5a      	subs	r2, r3, #1
 8020eaa:	9d13      	ldr	r5, [sp, #76]	@ 0x4c
 8020eac:	fb05 0502 	mla	r5, r5, r2, r0
 8020eb0:	142d      	asrs	r5, r5, #16
 8020eb2:	d409      	bmi.n	8020ec8 <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa0>
 8020eb4:	42bd      	cmp	r5, r7
 8020eb6:	da07      	bge.n	8020ec8 <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa0>
 8020eb8:	9d14      	ldr	r5, [sp, #80]	@ 0x50
 8020eba:	fb05 1202 	mla	r2, r5, r2, r1
 8020ebe:	1412      	asrs	r2, r2, #16
 8020ec0:	d402      	bmi.n	8020ec8 <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa0>
 8020ec2:	42b2      	cmp	r2, r6
 8020ec4:	f2c0 80c3 	blt.w	802104e <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x226>
 8020ec8:	2500      	movs	r5, #0
 8020eca:	195a      	adds	r2, r3, r5
 8020ecc:	2a00      	cmp	r2, #0
 8020ece:	dc3f      	bgt.n	8020f50 <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x128>
 8020ed0:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8020ed4:	eb04 0443 	add.w	r4, r4, r3, lsl #1
 8020ed8:	9b01      	ldr	r3, [sp, #4]
 8020eda:	2b00      	cmp	r3, #0
 8020edc:	f340 812a 	ble.w	8021134 <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x30c>
 8020ee0:	ee30 0a04 	vadd.f32	s0, s0, s8
 8020ee4:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8020ee6:	ee70 0aa4 	vadd.f32	s1, s1, s9
 8020eea:	eeb0 6a62 	vmov.f32	s12, s5
 8020eee:	eec6 7a80 	vdiv.f32	s15, s13, s0
 8020ef2:	ee31 1a05 	vadd.f32	s2, s2, s10
 8020ef6:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 8020efa:	ed8d 6a11 	vstr	s12, [sp, #68]	@ 0x44
 8020efe:	eeb0 6a43 	vmov.f32	s12, s6
 8020f02:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 8020f06:	ed8d 6a12 	vstr	s12, [sp, #72]	@ 0x48
 8020f0a:	ee20 7aa7 	vmul.f32	s14, s1, s15
 8020f0e:	ee61 7a27 	vmul.f32	s15, s2, s15
 8020f12:	ee77 2a62 	vsub.f32	s5, s14, s5
 8020f16:	ee37 3ac3 	vsub.f32	s6, s15, s6
 8020f1a:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 8020f1e:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 8020f22:	ee12 2a90 	vmov	r2, s5
 8020f26:	eef0 2a47 	vmov.f32	s5, s14
 8020f2a:	fb92 f3f3 	sdiv	r3, r2, r3
 8020f2e:	ee13 2a10 	vmov	r2, s6
 8020f32:	9313      	str	r3, [sp, #76]	@ 0x4c
 8020f34:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8020f36:	eeb0 3a67 	vmov.f32	s6, s15
 8020f3a:	fb92 f3f3 	sdiv	r3, r2, r3
 8020f3e:	9314      	str	r3, [sp, #80]	@ 0x50
 8020f40:	9b01      	ldr	r3, [sp, #4]
 8020f42:	9a05      	ldr	r2, [sp, #20]
 8020f44:	3b01      	subs	r3, #1
 8020f46:	9301      	str	r3, [sp, #4]
 8020f48:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8020f4a:	bf08      	it	eq
 8020f4c:	4613      	moveq	r3, r2
 8020f4e:	e788      	b.n	8020e62 <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3a>
 8020f50:	1406      	asrs	r6, r0, #16
 8020f52:	d42c      	bmi.n	8020fae <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x186>
 8020f54:	f8db 2008 	ldr.w	r2, [fp, #8]
 8020f58:	42b2      	cmp	r2, r6
 8020f5a:	dd28      	ble.n	8020fae <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x186>
 8020f5c:	140f      	asrs	r7, r1, #16
 8020f5e:	d426      	bmi.n	8020fae <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x186>
 8020f60:	f8db 200c 	ldr.w	r2, [fp, #12]
 8020f64:	42ba      	cmp	r2, r7
 8020f66:	dd22      	ble.n	8020fae <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x186>
 8020f68:	9a02      	ldr	r2, [sp, #8]
 8020f6a:	fb07 6602 	mla	r6, r7, r2, r6
 8020f6e:	9f03      	ldr	r7, [sp, #12]
 8020f70:	0872      	lsrs	r2, r6, #1
 8020f72:	07f6      	lsls	r6, r6, #31
 8020f74:	5cba      	ldrb	r2, [r7, r2]
 8020f76:	bf54      	ite	pl
 8020f78:	f002 020f 	andpl.w	r2, r2, #15
 8020f7c:	1112      	asrmi	r2, r2, #4
 8020f7e:	eb02 1202 	add.w	r2, r2, r2, lsl #4
 8020f82:	b2d2      	uxtb	r2, r2
 8020f84:	2aff      	cmp	r2, #255	@ 0xff
 8020f86:	d118      	bne.n	8020fba <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x192>
 8020f88:	f06f 0601 	mvn.w	r6, #1
 8020f8c:	f8d8 2000 	ldr.w	r2, [r8]
 8020f90:	fb06 f705 	mul.w	r7, r6, r5
 8020f94:	f2a6 76fe 	subw	r6, r6, #2046	@ 0x7fe
 8020f98:	ea06 2c12 	and.w	ip, r6, r2, lsr #8
 8020f9c:	0956      	lsrs	r6, r2, #5
 8020f9e:	f3c2 02c4 	ubfx	r2, r2, #3, #5
 8020fa2:	f406 66fc 	and.w	r6, r6, #2016	@ 0x7e0
 8020fa6:	ea4c 0606 	orr.w	r6, ip, r6
 8020faa:	4316      	orrs	r6, r2
 8020fac:	53e6      	strh	r6, [r4, r7]
 8020fae:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 8020fb0:	3d01      	subs	r5, #1
 8020fb2:	4410      	add	r0, r2
 8020fb4:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 8020fb6:	4411      	add	r1, r2
 8020fb8:	e787      	b.n	8020eca <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa2>
 8020fba:	2a00      	cmp	r2, #0
 8020fbc:	d0f7      	beq.n	8020fae <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x186>
 8020fbe:	f06f 0601 	mvn.w	r6, #1
 8020fc2:	f8d8 c000 	ldr.w	ip, [r8]
 8020fc6:	fa1f f982 	uxth.w	r9, r2
 8020fca:	43d2      	mvns	r2, r2
 8020fcc:	436e      	muls	r6, r5
 8020fce:	f3cc 2a07 	ubfx	sl, ip, #8, #8
 8020fd2:	b2d2      	uxtb	r2, r2
 8020fd4:	f834 e006 	ldrh.w	lr, [r4, r6]
 8020fd8:	fb1a fa09 	smulbb	sl, sl, r9
 8020fdc:	9604      	str	r6, [sp, #16]
 8020fde:	f3cc 4607 	ubfx	r6, ip, #16, #8
 8020fe2:	ea4f 272e 	mov.w	r7, lr, asr #8
 8020fe6:	fb16 f609 	smulbb	r6, r6, r9
 8020fea:	fa5f fc8c 	uxtb.w	ip, ip
 8020fee:	f007 07f8 	and.w	r7, r7, #248	@ 0xf8
 8020ff2:	fb1c fc09 	smulbb	ip, ip, r9
 8020ff6:	fb07 6702 	mla	r7, r7, r2, r6
 8020ffa:	ea4f 06ee 	mov.w	r6, lr, asr #3
 8020ffe:	ea4f 0ece 	mov.w	lr, lr, lsl #3
 8021002:	b2bf      	uxth	r7, r7
 8021004:	f006 06fc 	and.w	r6, r6, #252	@ 0xfc
 8021008:	fa5f fe8e 	uxtb.w	lr, lr
 802100c:	fb06 a602 	mla	r6, r6, r2, sl
 8021010:	fb0e cc02 	mla	ip, lr, r2, ip
 8021014:	1c7a      	adds	r2, r7, #1
 8021016:	b2b6      	uxth	r6, r6
 8021018:	fa1f fc8c 	uxth.w	ip, ip
 802101c:	eb02 2717 	add.w	r7, r2, r7, lsr #8
 8021020:	9a04      	ldr	r2, [sp, #16]
 8021022:	f10c 0a01 	add.w	sl, ip, #1
 8021026:	f407 4778 	and.w	r7, r7, #63488	@ 0xf800
 802102a:	eb0a 2a1c 	add.w	sl, sl, ip, lsr #8
 802102e:	f3ca 2ac4 	ubfx	sl, sl, #11, #5
 8021032:	ea4a 0707 	orr.w	r7, sl, r7
 8021036:	f106 0a01 	add.w	sl, r6, #1
 802103a:	eb0a 2a16 	add.w	sl, sl, r6, lsr #8
 802103e:	ea4f 1a5a 	mov.w	sl, sl, lsr #5
 8021042:	f40a 6afc 	and.w	sl, sl, #2016	@ 0x7e0
 8021046:	ea47 070a 	orr.w	r7, r7, sl
 802104a:	52a7      	strh	r7, [r4, r2]
 802104c:	e7af      	b.n	8020fae <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x186>
 802104e:	f04f 0e00 	mov.w	lr, #0
 8021052:	eba3 020e 	sub.w	r2, r3, lr
 8021056:	2a00      	cmp	r2, #0
 8021058:	f77f af3a 	ble.w	8020ed0 <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa8>
 802105c:	1402      	asrs	r2, r0, #16
 802105e:	9e02      	ldr	r6, [sp, #8]
 8021060:	140d      	asrs	r5, r1, #16
 8021062:	fb06 2505 	mla	r5, r6, r5, r2
 8021066:	9e03      	ldr	r6, [sp, #12]
 8021068:	086a      	lsrs	r2, r5, #1
 802106a:	07ed      	lsls	r5, r5, #31
 802106c:	5cb2      	ldrb	r2, [r6, r2]
 802106e:	bf54      	ite	pl
 8021070:	f002 020f 	andpl.w	r2, r2, #15
 8021074:	1112      	asrmi	r2, r2, #4
 8021076:	eb02 1202 	add.w	r2, r2, r2, lsl #4
 802107a:	b2d2      	uxtb	r2, r2
 802107c:	2aff      	cmp	r2, #255	@ 0xff
 802107e:	d115      	bne.n	80210ac <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x284>
 8021080:	f8d8 5000 	ldr.w	r5, [r8]
 8021084:	f6a2 02ff 	subw	r2, r2, #2303	@ 0x8ff
 8021088:	ea02 2615 	and.w	r6, r2, r5, lsr #8
 802108c:	096a      	lsrs	r2, r5, #5
 802108e:	f3c5 05c4 	ubfx	r5, r5, #3, #5
 8021092:	f402 62fc 	and.w	r2, r2, #2016	@ 0x7e0
 8021096:	4332      	orrs	r2, r6
 8021098:	432a      	orrs	r2, r5
 802109a:	f824 201e 	strh.w	r2, [r4, lr, lsl #1]
 802109e:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 80210a0:	f10e 0e01 	add.w	lr, lr, #1
 80210a4:	4410      	add	r0, r2
 80210a6:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 80210a8:	4411      	add	r1, r2
 80210aa:	e7d2      	b.n	8021052 <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x22a>
 80210ac:	2a00      	cmp	r2, #0
 80210ae:	d0f6      	beq.n	802109e <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x276>
 80210b0:	f8d8 7000 	ldr.w	r7, [r8]
 80210b4:	fa1f f982 	uxth.w	r9, r2
 80210b8:	f834 c01e 	ldrh.w	ip, [r4, lr, lsl #1]
 80210bc:	43d2      	mvns	r2, r2
 80210be:	f3c7 4507 	ubfx	r5, r7, #16, #8
 80210c2:	f3c7 2a07 	ubfx	sl, r7, #8, #8
 80210c6:	ea4f 262c 	mov.w	r6, ip, asr #8
 80210ca:	fb15 f509 	smulbb	r5, r5, r9
 80210ce:	b2d2      	uxtb	r2, r2
 80210d0:	f006 06f8 	and.w	r6, r6, #248	@ 0xf8
 80210d4:	b2ff      	uxtb	r7, r7
 80210d6:	fb1a fa09 	smulbb	sl, sl, r9
 80210da:	fb06 5602 	mla	r6, r6, r2, r5
 80210de:	ea4f 05ec 	mov.w	r5, ip, asr #3
 80210e2:	fb17 f709 	smulbb	r7, r7, r9
 80210e6:	ea4f 0ccc 	mov.w	ip, ip, lsl #3
 80210ea:	b2b6      	uxth	r6, r6
 80210ec:	f005 05fc 	and.w	r5, r5, #252	@ 0xfc
 80210f0:	fa5f fc8c 	uxtb.w	ip, ip
 80210f4:	fb05 a502 	mla	r5, r5, r2, sl
 80210f8:	fb0c 7702 	mla	r7, ip, r2, r7
 80210fc:	1c72      	adds	r2, r6, #1
 80210fe:	b2ad      	uxth	r5, r5
 8021100:	b2bf      	uxth	r7, r7
 8021102:	eb02 2616 	add.w	r6, r2, r6, lsr #8
 8021106:	f107 0a01 	add.w	sl, r7, #1
 802110a:	f406 4678 	and.w	r6, r6, #63488	@ 0xf800
 802110e:	eb0a 2a17 	add.w	sl, sl, r7, lsr #8
 8021112:	f3ca 2ac4 	ubfx	sl, sl, #11, #5
 8021116:	ea4a 0606 	orr.w	r6, sl, r6
 802111a:	f105 0a01 	add.w	sl, r5, #1
 802111e:	eb0a 2a15 	add.w	sl, sl, r5, lsr #8
 8021122:	ea4f 1a5a 	mov.w	sl, sl, lsr #5
 8021126:	f40a 6afc 	and.w	sl, sl, #2016	@ 0x7e0
 802112a:	ea46 060a 	orr.w	r6, r6, sl
 802112e:	f824 601e 	strh.w	r6, [r4, lr, lsl #1]
 8021132:	e7b4      	b.n	802109e <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x276>
 8021134:	b007      	add	sp, #28
 8021136:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 802113a:	bf00      	nop
 802113c:	2400b888 	.word	0x2400b888

08021140 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGAD1Ev>:
 8021140:	4770      	bx	lr

08021142 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GAD1Ev>:
 8021142:	4770      	bx	lr

08021144 <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGAD1Ev>:
 8021144:	4770      	bx	lr

08021146 <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GAD1Ev>:
 8021146:	4770      	bx	lr

08021148 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGAD1Ev>:
 8021148:	4770      	bx	lr

0802114a <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GAD1Ev>:
 802114a:	4770      	bx	lr

0802114c <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGAD1Ev>:
 802114c:	4770      	bx	lr

0802114e <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GAD1Ev>:
 802114e:	4770      	bx	lr

08021150 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGAD1Ev>:
 8021150:	4770      	bx	lr

08021152 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GAD1Ev>:
 8021152:	4770      	bx	lr

08021154 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGAD1Ev>:
 8021154:	4770      	bx	lr

08021156 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GAD1Ev>:
 8021156:	4770      	bx	lr

08021158 <_ZN8touchgfx8LCD16bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGAD1Ev>:
 8021158:	4770      	bx	lr

0802115a <_ZN8touchgfx8LCD16bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GAD1Ev>:
 802115a:	4770      	bx	lr

0802115c <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGAD1Ev>:
 802115c:	4770      	bx	lr

0802115e <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GAD1Ev>:
 802115e:	4770      	bx	lr

08021160 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGAD1Ev>:
 8021160:	4770      	bx	lr

08021162 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GAD1Ev>:
 8021162:	4770      	bx	lr

08021164 <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGAD1Ev>:
 8021164:	4770      	bx	lr

08021166 <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GAD1Ev>:
 8021166:	4770      	bx	lr

08021168 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGAD1Ev>:
 8021168:	4770      	bx	lr

0802116a <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GAD1Ev>:
 802116a:	4770      	bx	lr

0802116c <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGAD1Ev>:
 802116c:	4770      	bx	lr

0802116e <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GAD1Ev>:
 802116e:	4770      	bx	lr

08021170 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGAD1Ev>:
 8021170:	4770      	bx	lr

08021172 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GAD1Ev>:
 8021172:	4770      	bx	lr

08021174 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGAD1Ev>:
 8021174:	4770      	bx	lr

08021176 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GAD1Ev>:
 8021176:	4770      	bx	lr

08021178 <_ZNK8touchgfx8LCD16bpp17framebufferStrideEv>:
 8021178:	b508      	push	{r3, lr}
 802117a:	4b06      	ldr	r3, [pc, #24]	@ (8021194 <_ZNK8touchgfx8LCD16bpp17framebufferStrideEv+0x1c>)
 802117c:	8818      	ldrh	r0, [r3, #0]
 802117e:	b928      	cbnz	r0, 802118c <_ZNK8touchgfx8LCD16bpp17framebufferStrideEv+0x14>
 8021180:	4b05      	ldr	r3, [pc, #20]	@ (8021198 <_ZNK8touchgfx8LCD16bpp17framebufferStrideEv+0x20>)
 8021182:	2150      	movs	r1, #80	@ 0x50
 8021184:	4a05      	ldr	r2, [pc, #20]	@ (802119c <_ZNK8touchgfx8LCD16bpp17framebufferStrideEv+0x24>)
 8021186:	4806      	ldr	r0, [pc, #24]	@ (80211a0 <_ZNK8touchgfx8LCD16bpp17framebufferStrideEv+0x28>)
 8021188:	f009 fbd4 	bl	802a934 <__assert_func>
 802118c:	0040      	lsls	r0, r0, #1
 802118e:	b280      	uxth	r0, r0
 8021190:	bd08      	pop	{r3, pc}
 8021192:	bf00      	nop
 8021194:	2400b87a 	.word	0x2400b87a
 8021198:	0802fb17 	.word	0x0802fb17
 802119c:	08030110 	.word	0x08030110
 80211a0:	0802fb59 	.word	0x0802fb59

080211a4 <_ZN8touchgfx8LCD16bpp8blitCopyEPKtRKNS_4RectES5_hb>:
 80211a4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80211a8:	b08b      	sub	sp, #44	@ 0x2c
 80211aa:	460f      	mov	r7, r1
 80211ac:	4616      	mov	r6, r2
 80211ae:	f89d b050 	ldrb.w	fp, [sp, #80]	@ 0x50
 80211b2:	f89d 4054 	ldrb.w	r4, [sp, #84]	@ 0x54
 80211b6:	f1bb 0f00 	cmp.w	fp, #0
 80211ba:	d049      	beq.n	8021250 <_ZN8touchgfx8LCD16bpp8blitCopyEPKtRKNS_4RectES5_hb+0xac>
 80211bc:	6810      	ldr	r0, [r2, #0]
 80211be:	ad06      	add	r5, sp, #24
 80211c0:	6851      	ldr	r1, [r2, #4]
 80211c2:	c503      	stmia	r5!, {r0, r1}
 80211c4:	6818      	ldr	r0, [r3, #0]
 80211c6:	ad08      	add	r5, sp, #32
 80211c8:	6859      	ldr	r1, [r3, #4]
 80211ca:	c503      	stmia	r5!, {r0, r1}
 80211cc:	a806      	add	r0, sp, #24
 80211ce:	f7fa f883 	bl	801b2d8 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 80211d2:	4631      	mov	r1, r6
 80211d4:	a808      	add	r0, sp, #32
 80211d6:	f7fa f8a7 	bl	801b328 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
 80211da:	f9bd 2020 	ldrsh.w	r2, [sp, #32]
 80211de:	f9bd 3022 	ldrsh.w	r3, [sp, #34]	@ 0x22
 80211e2:	f8bd 601c 	ldrh.w	r6, [sp, #28]
 80211e6:	f9bd 8024 	ldrsh.w	r8, [sp, #36]	@ 0x24
 80211ea:	fb16 2103 	smlabb	r1, r6, r3, r2
 80211ee:	f9bd 5026 	ldrsh.w	r5, [sp, #38]	@ 0x26
 80211f2:	eb07 0641 	add.w	r6, r7, r1, lsl #1
 80211f6:	f8bd 1018 	ldrh.w	r1, [sp, #24]
 80211fa:	4f5f      	ldr	r7, [pc, #380]	@ (8021378 <_ZN8touchgfx8LCD16bpp8blitCopyEPKtRKNS_4RectES5_hb+0x1d4>)
 80211fc:	440a      	add	r2, r1
 80211fe:	6838      	ldr	r0, [r7, #0]
 8021200:	46b9      	mov	r9, r7
 8021202:	f8ad 2020 	strh.w	r2, [sp, #32]
 8021206:	f8bd 201a 	ldrh.w	r2, [sp, #26]
 802120a:	4413      	add	r3, r2
 802120c:	f8ad 3022 	strh.w	r3, [sp, #34]	@ 0x22
 8021210:	6803      	ldr	r3, [r0, #0]
 8021212:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8021214:	4798      	blx	r3
 8021216:	f1bb 0fff 	cmp.w	fp, #255	@ 0xff
 802121a:	d01c      	beq.n	8021256 <_ZN8touchgfx8LCD16bpp8blitCopyEPKtRKNS_4RectES5_hb+0xb2>
 802121c:	f010 0f04 	tst.w	r0, #4
 8021220:	d01d      	beq.n	802125e <_ZN8touchgfx8LCD16bpp8blitCopyEPKtRKNS_4RectES5_hb+0xba>
 8021222:	f8d9 0000 	ldr.w	r0, [r9]
 8021226:	2700      	movs	r7, #0
 8021228:	b2ad      	uxth	r5, r5
 802122a:	f8bd 3022 	ldrh.w	r3, [sp, #34]	@ 0x22
 802122e:	6801      	ldr	r1, [r0, #0]
 8021230:	f8bd 2020 	ldrh.w	r2, [sp, #32]
 8021234:	f8cd b00c 	str.w	fp, [sp, #12]
 8021238:	9501      	str	r5, [sp, #4]
 802123a:	e9cd 4704 	strd	r4, r7, [sp, #16]
 802123e:	f8bd 401c 	ldrh.w	r4, [sp, #28]
 8021242:	9402      	str	r4, [sp, #8]
 8021244:	fa1f f488 	uxth.w	r4, r8
 8021248:	9400      	str	r4, [sp, #0]
 802124a:	6c4c      	ldr	r4, [r1, #68]	@ 0x44
 802124c:	4631      	mov	r1, r6
 802124e:	47a0      	blx	r4
 8021250:	b00b      	add	sp, #44	@ 0x2c
 8021252:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8021256:	b914      	cbnz	r4, 802125e <_ZN8touchgfx8LCD16bpp8blitCopyEPKtRKNS_4RectES5_hb+0xba>
 8021258:	f010 0f01 	tst.w	r0, #1
 802125c:	e7e0      	b.n	8021220 <_ZN8touchgfx8LCD16bpp8blitCopyEPKtRKNS_4RectES5_hb+0x7c>
 802125e:	f8d9 0000 	ldr.w	r0, [r9]
 8021262:	ea4f 0748 	mov.w	r7, r8, lsl #1
 8021266:	6803      	ldr	r3, [r0, #0]
 8021268:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 802126a:	4798      	blx	r3
 802126c:	4b43      	ldr	r3, [pc, #268]	@ (802137c <_ZN8touchgfx8LCD16bpp8blitCopyEPKtRKNS_4RectES5_hb+0x1d8>)
 802126e:	f9bd 4022 	ldrsh.w	r4, [sp, #34]	@ 0x22
 8021272:	f1bb 0fff 	cmp.w	fp, #255	@ 0xff
 8021276:	881a      	ldrh	r2, [r3, #0]
 8021278:	469a      	mov	sl, r3
 802127a:	f9bd 1020 	ldrsh.w	r1, [sp, #32]
 802127e:	fb05 f502 	mul.w	r5, r5, r2
 8021282:	fb02 1404 	mla	r4, r2, r4, r1
 8021286:	eb00 0444 	add.w	r4, r0, r4, lsl #1
 802128a:	d059      	beq.n	8021340 <_ZN8touchgfx8LCD16bpp8blitCopyEPKtRKNS_4RectES5_hb+0x19c>
 802128c:	f1cb 09ff 	rsb	r9, fp, #255	@ 0xff
 8021290:	eb04 0545 	add.w	r5, r4, r5, lsl #1
 8021294:	fa1f f28b 	uxth.w	r2, fp
 8021298:	469e      	mov	lr, r3
 802129a:	fa1f f989 	uxth.w	r9, r9
 802129e:	42ac      	cmp	r4, r5
 80212a0:	d264      	bcs.n	802136c <_ZN8touchgfx8LCD16bpp8blitCopyEPKtRKNS_4RectES5_hb+0x1c8>
 80212a2:	eb04 0a07 	add.w	sl, r4, r7
 80212a6:	4554      	cmp	r4, sl
 80212a8:	d23d      	bcs.n	8021326 <_ZN8touchgfx8LCD16bpp8blitCopyEPKtRKNS_4RectES5_hb+0x182>
 80212aa:	8821      	ldrh	r1, [r4, #0]
 80212ac:	f836 3b02 	ldrh.w	r3, [r6], #2
 80212b0:	1208      	asrs	r0, r1, #8
 80212b2:	ea4f 2c23 	mov.w	ip, r3, asr #8
 80212b6:	f000 00f8 	and.w	r0, r0, #248	@ 0xf8
 80212ba:	ea4f 0be1 	mov.w	fp, r1, asr #3
 80212be:	f00c 0cf8 	and.w	ip, ip, #248	@ 0xf8
 80212c2:	00c9      	lsls	r1, r1, #3
 80212c4:	fb10 f009 	smulbb	r0, r0, r9
 80212c8:	f00b 0bfc 	and.w	fp, fp, #252	@ 0xfc
 80212cc:	b2c9      	uxtb	r1, r1
 80212ce:	fb0c 0c02 	mla	ip, ip, r2, r0
 80212d2:	10d8      	asrs	r0, r3, #3
 80212d4:	fb1b fb09 	smulbb	fp, fp, r9
 80212d8:	00db      	lsls	r3, r3, #3
 80212da:	fa1f fc8c 	uxth.w	ip, ip
 80212de:	f000 00fc 	and.w	r0, r0, #252	@ 0xfc
 80212e2:	fb11 f109 	smulbb	r1, r1, r9
 80212e6:	b2db      	uxtb	r3, r3
 80212e8:	fb00 b002 	mla	r0, r0, r2, fp
 80212ec:	f10c 0b01 	add.w	fp, ip, #1
 80212f0:	fb03 1302 	mla	r3, r3, r2, r1
 80212f4:	eb0b 2c1c 	add.w	ip, fp, ip, lsr #8
 80212f8:	b29b      	uxth	r3, r3
 80212fa:	b280      	uxth	r0, r0
 80212fc:	f40c 4b78 	and.w	fp, ip, #63488	@ 0xf800
 8021300:	f103 0c01 	add.w	ip, r3, #1
 8021304:	eb0c 2c13 	add.w	ip, ip, r3, lsr #8
 8021308:	1c43      	adds	r3, r0, #1
 802130a:	eb03 2010 	add.w	r0, r3, r0, lsr #8
 802130e:	f3cc 2cc4 	ubfx	ip, ip, #11, #5
 8021312:	0940      	lsrs	r0, r0, #5
 8021314:	ea4c 0c0b 	orr.w	ip, ip, fp
 8021318:	f400 60fc 	and.w	r0, r0, #2016	@ 0x7e0
 802131c:	ea4c 0c00 	orr.w	ip, ip, r0
 8021320:	f824 cb02 	strh.w	ip, [r4], #2
 8021324:	e7bf      	b.n	80212a6 <_ZN8touchgfx8LCD16bpp8blitCopyEPKtRKNS_4RectES5_hb+0x102>
 8021326:	f8be 3000 	ldrh.w	r3, [lr]
 802132a:	eba3 0308 	sub.w	r3, r3, r8
 802132e:	eb04 0443 	add.w	r4, r4, r3, lsl #1
 8021332:	f9bd 301c 	ldrsh.w	r3, [sp, #28]
 8021336:	eba3 0308 	sub.w	r3, r3, r8
 802133a:	eb06 0643 	add.w	r6, r6, r3, lsl #1
 802133e:	e7ae      	b.n	802129e <_ZN8touchgfx8LCD16bpp8blitCopyEPKtRKNS_4RectES5_hb+0xfa>
 8021340:	eb04 0545 	add.w	r5, r4, r5, lsl #1
 8021344:	f8d9 0000 	ldr.w	r0, [r9]
 8021348:	42ac      	cmp	r4, r5
 802134a:	6803      	ldr	r3, [r0, #0]
 802134c:	d20e      	bcs.n	802136c <_ZN8touchgfx8LCD16bpp8blitCopyEPKtRKNS_4RectES5_hb+0x1c8>
 802134e:	f8d3 8034 	ldr.w	r8, [r3, #52]	@ 0x34
 8021352:	4632      	mov	r2, r6
 8021354:	463b      	mov	r3, r7
 8021356:	4621      	mov	r1, r4
 8021358:	47c0      	blx	r8
 802135a:	f8ba 3000 	ldrh.w	r3, [sl]
 802135e:	eb04 0443 	add.w	r4, r4, r3, lsl #1
 8021362:	f9bd 301c 	ldrsh.w	r3, [sp, #28]
 8021366:	eb06 0643 	add.w	r6, r6, r3, lsl #1
 802136a:	e7eb      	b.n	8021344 <_ZN8touchgfx8LCD16bpp8blitCopyEPKtRKNS_4RectES5_hb+0x1a0>
 802136c:	4b02      	ldr	r3, [pc, #8]	@ (8021378 <_ZN8touchgfx8LCD16bpp8blitCopyEPKtRKNS_4RectES5_hb+0x1d4>)
 802136e:	6818      	ldr	r0, [r3, #0]
 8021370:	6803      	ldr	r3, [r0, #0]
 8021372:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8021374:	4798      	blx	r3
 8021376:	e76b      	b.n	8021250 <_ZN8touchgfx8LCD16bpp8blitCopyEPKtRKNS_4RectES5_hb+0xac>
 8021378:	2400b880 	.word	0x2400b880
 802137c:	2400b87a 	.word	0x2400b87a

08021380 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGAD0Ev>:
 8021380:	b510      	push	{r4, lr}
 8021382:	4604      	mov	r4, r0
 8021384:	2104      	movs	r1, #4
 8021386:	f009 faa6 	bl	802a8d6 <_ZdlPvj>
 802138a:	4620      	mov	r0, r4
 802138c:	bd10      	pop	{r4, pc}

0802138e <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GAD0Ev>:
 802138e:	b510      	push	{r4, lr}
 8021390:	4604      	mov	r4, r0
 8021392:	2104      	movs	r1, #4
 8021394:	f009 fa9f 	bl	802a8d6 <_ZdlPvj>
 8021398:	4620      	mov	r0, r4
 802139a:	bd10      	pop	{r4, pc}

0802139c <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGAD0Ev>:
 802139c:	b510      	push	{r4, lr}
 802139e:	4604      	mov	r4, r0
 80213a0:	2104      	movs	r1, #4
 80213a2:	f009 fa98 	bl	802a8d6 <_ZdlPvj>
 80213a6:	4620      	mov	r0, r4
 80213a8:	bd10      	pop	{r4, pc}

080213aa <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GAD0Ev>:
 80213aa:	b510      	push	{r4, lr}
 80213ac:	4604      	mov	r4, r0
 80213ae:	2104      	movs	r1, #4
 80213b0:	f009 fa91 	bl	802a8d6 <_ZdlPvj>
 80213b4:	4620      	mov	r0, r4
 80213b6:	bd10      	pop	{r4, pc}

080213b8 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGAD0Ev>:
 80213b8:	b510      	push	{r4, lr}
 80213ba:	4604      	mov	r4, r0
 80213bc:	2104      	movs	r1, #4
 80213be:	f009 fa8a 	bl	802a8d6 <_ZdlPvj>
 80213c2:	4620      	mov	r0, r4
 80213c4:	bd10      	pop	{r4, pc}

080213c6 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GAD0Ev>:
 80213c6:	b510      	push	{r4, lr}
 80213c8:	4604      	mov	r4, r0
 80213ca:	2104      	movs	r1, #4
 80213cc:	f009 fa83 	bl	802a8d6 <_ZdlPvj>
 80213d0:	4620      	mov	r0, r4
 80213d2:	bd10      	pop	{r4, pc}

080213d4 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGAD0Ev>:
 80213d4:	b510      	push	{r4, lr}
 80213d6:	4604      	mov	r4, r0
 80213d8:	2104      	movs	r1, #4
 80213da:	f009 fa7c 	bl	802a8d6 <_ZdlPvj>
 80213de:	4620      	mov	r0, r4
 80213e0:	bd10      	pop	{r4, pc}

080213e2 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GAD0Ev>:
 80213e2:	b510      	push	{r4, lr}
 80213e4:	4604      	mov	r4, r0
 80213e6:	2104      	movs	r1, #4
 80213e8:	f009 fa75 	bl	802a8d6 <_ZdlPvj>
 80213ec:	4620      	mov	r0, r4
 80213ee:	bd10      	pop	{r4, pc}

080213f0 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGAD0Ev>:
 80213f0:	b510      	push	{r4, lr}
 80213f2:	4604      	mov	r4, r0
 80213f4:	2104      	movs	r1, #4
 80213f6:	f009 fa6e 	bl	802a8d6 <_ZdlPvj>
 80213fa:	4620      	mov	r0, r4
 80213fc:	bd10      	pop	{r4, pc}

080213fe <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GAD0Ev>:
 80213fe:	b510      	push	{r4, lr}
 8021400:	4604      	mov	r4, r0
 8021402:	2104      	movs	r1, #4
 8021404:	f009 fa67 	bl	802a8d6 <_ZdlPvj>
 8021408:	4620      	mov	r0, r4
 802140a:	bd10      	pop	{r4, pc}

0802140c <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGAD0Ev>:
 802140c:	b510      	push	{r4, lr}
 802140e:	4604      	mov	r4, r0
 8021410:	2104      	movs	r1, #4
 8021412:	f009 fa60 	bl	802a8d6 <_ZdlPvj>
 8021416:	4620      	mov	r0, r4
 8021418:	bd10      	pop	{r4, pc}

0802141a <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GAD0Ev>:
 802141a:	b510      	push	{r4, lr}
 802141c:	4604      	mov	r4, r0
 802141e:	2104      	movs	r1, #4
 8021420:	f009 fa59 	bl	802a8d6 <_ZdlPvj>
 8021424:	4620      	mov	r0, r4
 8021426:	bd10      	pop	{r4, pc}

08021428 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGAD0Ev>:
 8021428:	b510      	push	{r4, lr}
 802142a:	4604      	mov	r4, r0
 802142c:	2104      	movs	r1, #4
 802142e:	f009 fa52 	bl	802a8d6 <_ZdlPvj>
 8021432:	4620      	mov	r0, r4
 8021434:	bd10      	pop	{r4, pc}

08021436 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GAD0Ev>:
 8021436:	b510      	push	{r4, lr}
 8021438:	4604      	mov	r4, r0
 802143a:	2104      	movs	r1, #4
 802143c:	f009 fa4b 	bl	802a8d6 <_ZdlPvj>
 8021440:	4620      	mov	r0, r4
 8021442:	bd10      	pop	{r4, pc}

08021444 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGAD0Ev>:
 8021444:	b510      	push	{r4, lr}
 8021446:	4604      	mov	r4, r0
 8021448:	2104      	movs	r1, #4
 802144a:	f009 fa44 	bl	802a8d6 <_ZdlPvj>
 802144e:	4620      	mov	r0, r4
 8021450:	bd10      	pop	{r4, pc}

08021452 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GAD0Ev>:
 8021452:	b510      	push	{r4, lr}
 8021454:	4604      	mov	r4, r0
 8021456:	2104      	movs	r1, #4
 8021458:	f009 fa3d 	bl	802a8d6 <_ZdlPvj>
 802145c:	4620      	mov	r0, r4
 802145e:	bd10      	pop	{r4, pc}

08021460 <_ZN8touchgfx8LCD16bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGAD0Ev>:
 8021460:	b510      	push	{r4, lr}
 8021462:	4604      	mov	r4, r0
 8021464:	2104      	movs	r1, #4
 8021466:	f009 fa36 	bl	802a8d6 <_ZdlPvj>
 802146a:	4620      	mov	r0, r4
 802146c:	bd10      	pop	{r4, pc}

0802146e <_ZN8touchgfx8LCD16bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GAD0Ev>:
 802146e:	b510      	push	{r4, lr}
 8021470:	4604      	mov	r4, r0
 8021472:	2104      	movs	r1, #4
 8021474:	f009 fa2f 	bl	802a8d6 <_ZdlPvj>
 8021478:	4620      	mov	r0, r4
 802147a:	bd10      	pop	{r4, pc}

0802147c <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGAD0Ev>:
 802147c:	b510      	push	{r4, lr}
 802147e:	4604      	mov	r4, r0
 8021480:	2104      	movs	r1, #4
 8021482:	f009 fa28 	bl	802a8d6 <_ZdlPvj>
 8021486:	4620      	mov	r0, r4
 8021488:	bd10      	pop	{r4, pc}

0802148a <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GAD0Ev>:
 802148a:	b510      	push	{r4, lr}
 802148c:	4604      	mov	r4, r0
 802148e:	2104      	movs	r1, #4
 8021490:	f009 fa21 	bl	802a8d6 <_ZdlPvj>
 8021494:	4620      	mov	r0, r4
 8021496:	bd10      	pop	{r4, pc}

08021498 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGAD0Ev>:
 8021498:	b510      	push	{r4, lr}
 802149a:	4604      	mov	r4, r0
 802149c:	2104      	movs	r1, #4
 802149e:	f009 fa1a 	bl	802a8d6 <_ZdlPvj>
 80214a2:	4620      	mov	r0, r4
 80214a4:	bd10      	pop	{r4, pc}

080214a6 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GAD0Ev>:
 80214a6:	b510      	push	{r4, lr}
 80214a8:	4604      	mov	r4, r0
 80214aa:	2104      	movs	r1, #4
 80214ac:	f009 fa13 	bl	802a8d6 <_ZdlPvj>
 80214b0:	4620      	mov	r0, r4
 80214b2:	bd10      	pop	{r4, pc}

080214b4 <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGAD0Ev>:
 80214b4:	b510      	push	{r4, lr}
 80214b6:	4604      	mov	r4, r0
 80214b8:	2104      	movs	r1, #4
 80214ba:	f009 fa0c 	bl	802a8d6 <_ZdlPvj>
 80214be:	4620      	mov	r0, r4
 80214c0:	bd10      	pop	{r4, pc}

080214c2 <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GAD0Ev>:
 80214c2:	b510      	push	{r4, lr}
 80214c4:	4604      	mov	r4, r0
 80214c6:	2104      	movs	r1, #4
 80214c8:	f009 fa05 	bl	802a8d6 <_ZdlPvj>
 80214cc:	4620      	mov	r0, r4
 80214ce:	bd10      	pop	{r4, pc}

080214d0 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGAD0Ev>:
 80214d0:	b510      	push	{r4, lr}
 80214d2:	4604      	mov	r4, r0
 80214d4:	2104      	movs	r1, #4
 80214d6:	f009 f9fe 	bl	802a8d6 <_ZdlPvj>
 80214da:	4620      	mov	r0, r4
 80214dc:	bd10      	pop	{r4, pc}

080214de <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GAD0Ev>:
 80214de:	b510      	push	{r4, lr}
 80214e0:	4604      	mov	r4, r0
 80214e2:	2104      	movs	r1, #4
 80214e4:	f009 f9f7 	bl	802a8d6 <_ZdlPvj>
 80214e8:	4620      	mov	r0, r4
 80214ea:	bd10      	pop	{r4, pc}

080214ec <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGAD0Ev>:
 80214ec:	b510      	push	{r4, lr}
 80214ee:	4604      	mov	r4, r0
 80214f0:	2104      	movs	r1, #4
 80214f2:	f009 f9f0 	bl	802a8d6 <_ZdlPvj>
 80214f6:	4620      	mov	r0, r4
 80214f8:	bd10      	pop	{r4, pc}

080214fa <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GAD0Ev>:
 80214fa:	b510      	push	{r4, lr}
 80214fc:	4604      	mov	r4, r0
 80214fe:	2104      	movs	r1, #4
 8021500:	f009 f9e9 	bl	802a8d6 <_ZdlPvj>
 8021504:	4620      	mov	r0, r4
 8021506:	bd10      	pop	{r4, pc}

08021508 <_ZN8touchgfx8LCD16bpp8fillRectERKNS_4RectENS_9colortypeEh>:
 8021508:	b5f0      	push	{r4, r5, r6, r7, lr}
 802150a:	4606      	mov	r6, r0
 802150c:	b087      	sub	sp, #28
 802150e:	460c      	mov	r4, r1
 8021510:	4617      	mov	r7, r2
 8021512:	461d      	mov	r5, r3
 8021514:	b333      	cbz	r3, 8021564 <_ZN8touchgfx8LCD16bpp8fillRectERKNS_4RectENS_9colortypeEh+0x5c>
 8021516:	4608      	mov	r0, r1
 8021518:	f7f6 fb6f 	bl	8017bfa <_ZNK8touchgfx4Rect7isEmptyEv>
 802151c:	bb10      	cbnz	r0, 8021564 <_ZN8touchgfx8LCD16bpp8fillRectERKNS_4RectENS_9colortypeEh+0x5c>
 802151e:	6820      	ldr	r0, [r4, #0]
 8021520:	ab04      	add	r3, sp, #16
 8021522:	6861      	ldr	r1, [r4, #4]
 8021524:	4c1b      	ldr	r4, [pc, #108]	@ (8021594 <_ZN8touchgfx8LCD16bpp8fillRectERKNS_4RectENS_9colortypeEh+0x8c>)
 8021526:	c303      	stmia	r3!, {r0, r1}
 8021528:	a804      	add	r0, sp, #16
 802152a:	f7f9 fed5 	bl	801b2d8 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 802152e:	6820      	ldr	r0, [r4, #0]
 8021530:	6803      	ldr	r3, [r0, #0]
 8021532:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8021534:	4798      	blx	r3
 8021536:	2dff      	cmp	r5, #255	@ 0xff
 8021538:	d016      	beq.n	8021568 <_ZN8touchgfx8LCD16bpp8fillRectERKNS_4RectENS_9colortypeEh+0x60>
 802153a:	f010 0f08 	tst.w	r0, #8
 802153e:	6820      	ldr	r0, [r4, #0]
 8021540:	d015      	beq.n	802156e <_ZN8touchgfx8LCD16bpp8fillRectERKNS_4RectENS_9colortypeEh+0x66>
 8021542:	2400      	movs	r4, #0
 8021544:	6801      	ldr	r1, [r0, #0]
 8021546:	f8bd 3012 	ldrh.w	r3, [sp, #18]
 802154a:	f8bd 2010 	ldrh.w	r2, [sp, #16]
 802154e:	e9cd 5402 	strd	r5, r4, [sp, #8]
 8021552:	f8bd 4016 	ldrh.w	r4, [sp, #22]
 8021556:	9401      	str	r4, [sp, #4]
 8021558:	f8bd 4014 	ldrh.w	r4, [sp, #20]
 802155c:	9400      	str	r4, [sp, #0]
 802155e:	6dcc      	ldr	r4, [r1, #92]	@ 0x5c
 8021560:	4639      	mov	r1, r7
 8021562:	47a0      	blx	r4
 8021564:	b007      	add	sp, #28
 8021566:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8021568:	f010 0f02 	tst.w	r0, #2
 802156c:	e7e7      	b.n	802153e <_ZN8touchgfx8LCD16bpp8fillRectERKNS_4RectENS_9colortypeEh+0x36>
 802156e:	6803      	ldr	r3, [r0, #0]
 8021570:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8021572:	4798      	blx	r3
 8021574:	4b08      	ldr	r3, [pc, #32]	@ (8021598 <_ZN8touchgfx8LCD16bpp8fillRectERKNS_4RectENS_9colortypeEh+0x90>)
 8021576:	4601      	mov	r1, r0
 8021578:	4630      	mov	r0, r6
 802157a:	881a      	ldrh	r2, [r3, #0]
 802157c:	6833      	ldr	r3, [r6, #0]
 802157e:	e9cd 7500 	strd	r7, r5, [sp]
 8021582:	69dd      	ldr	r5, [r3, #28]
 8021584:	ab04      	add	r3, sp, #16
 8021586:	47a8      	blx	r5
 8021588:	6820      	ldr	r0, [r4, #0]
 802158a:	6803      	ldr	r3, [r0, #0]
 802158c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 802158e:	4798      	blx	r3
 8021590:	e7e8      	b.n	8021564 <_ZN8touchgfx8LCD16bpp8fillRectERKNS_4RectENS_9colortypeEh+0x5c>
 8021592:	bf00      	nop
 8021594:	2400b880 	.word	0x2400b880
 8021598:	2400b87a 	.word	0x2400b87a

0802159c <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t>:
 802159c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80215a0:	4f97      	ldr	r7, [pc, #604]	@ (8021800 <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x264>)
 80215a2:	4616      	mov	r6, r2
 80215a4:	b08f      	sub	sp, #60	@ 0x3c
 80215a6:	4604      	mov	r4, r0
 80215a8:	683a      	ldr	r2, [r7, #0]
 80215aa:	4689      	mov	r9, r1
 80215ac:	f892 2048 	ldrb.w	r2, [r2, #72]	@ 0x48
 80215b0:	2a02      	cmp	r2, #2
 80215b2:	d106      	bne.n	80215c2 <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x26>
 80215b4:	4b93      	ldr	r3, [pc, #588]	@ (8021804 <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x268>)
 80215b6:	f44f 7159 	mov.w	r1, #868	@ 0x364
 80215ba:	4a93      	ldr	r2, [pc, #588]	@ (8021808 <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x26c>)
 80215bc:	4893      	ldr	r0, [pc, #588]	@ (802180c <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x270>)
 80215be:	f009 f9b9 	bl	802a934 <__assert_func>
 80215c2:	ad0e      	add	r5, sp, #56	@ 0x38
 80215c4:	f825 3d24 	strh.w	r3, [r5, #-36]!
 80215c8:	4628      	mov	r0, r5
 80215ca:	f7fd fad3 	bl	801eb74 <_ZNK8touchgfx6Bitmap9getFormatEv>
 80215ce:	6823      	ldr	r3, [r4, #0]
 80215d0:	4680      	mov	r8, r0
 80215d2:	4620      	mov	r0, r4
 80215d4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80215d6:	4798      	blx	r3
 80215d8:	4580      	cmp	r8, r0
 80215da:	d004      	beq.n	80215e6 <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x4a>
 80215dc:	4b8c      	ldr	r3, [pc, #560]	@ (8021810 <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x274>)
 80215de:	f240 3166 	movw	r1, #870	@ 0x366
 80215e2:	4a89      	ldr	r2, [pc, #548]	@ (8021808 <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x26c>)
 80215e4:	e7ea      	b.n	80215bc <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x20>
 80215e6:	4628      	mov	r0, r5
 80215e8:	f7fd fa3a 	bl	801ea60 <_ZNK8touchgfx6Bitmap7getDataEv>
 80215ec:	4680      	mov	r8, r0
 80215ee:	b920      	cbnz	r0, 80215fa <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x5e>
 80215f0:	4b88      	ldr	r3, [pc, #544]	@ (8021814 <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x278>)
 80215f2:	f44f 715a 	mov.w	r1, #872	@ 0x368
 80215f6:	4a84      	ldr	r2, [pc, #528]	@ (8021808 <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x26c>)
 80215f8:	e7e0      	b.n	80215bc <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x20>
 80215fa:	6830      	ldr	r0, [r6, #0]
 80215fc:	ab06      	add	r3, sp, #24
 80215fe:	6871      	ldr	r1, [r6, #4]
 8021600:	f10d 0b20 	add.w	fp, sp, #32
 8021604:	f9b6 a000 	ldrsh.w	sl, [r6]
 8021608:	c303      	stmia	r3!, {r0, r1}
 802160a:	f8d9 1004 	ldr.w	r1, [r9, #4]
 802160e:	ab08      	add	r3, sp, #32
 8021610:	f8d9 0000 	ldr.w	r0, [r9]
 8021614:	f9b6 9002 	ldrsh.w	r9, [r6, #2]
 8021618:	c303      	stmia	r3!, {r0, r1}
 802161a:	4628      	mov	r0, r5
 802161c:	f7fd f918 	bl	801e850 <_ZNK8touchgfx6Bitmap8getWidthEv>
 8021620:	4606      	mov	r6, r0
 8021622:	4628      	mov	r0, r5
 8021624:	4d7c      	ldr	r5, [pc, #496]	@ (8021818 <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x27c>)
 8021626:	f7fd f94d 	bl	801e8c4 <_ZNK8touchgfx6Bitmap9getHeightEv>
 802162a:	f8ad 002e 	strh.w	r0, [sp, #46]	@ 0x2e
 802162e:	a806      	add	r0, sp, #24
 8021630:	f8ad a028 	strh.w	sl, [sp, #40]	@ 0x28
 8021634:	f8ad 902a 	strh.w	r9, [sp, #42]	@ 0x2a
 8021638:	f8ad 602c 	strh.w	r6, [sp, #44]	@ 0x2c
 802163c:	f7f9 fe4c 	bl	801b2d8 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 8021640:	4658      	mov	r0, fp
 8021642:	f7f9 fe49 	bl	801b2d8 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 8021646:	a80a      	add	r0, sp, #40	@ 0x28
 8021648:	f7f9 fe46 	bl	801b2d8 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 802164c:	4b73      	ldr	r3, [pc, #460]	@ (802181c <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x280>)
 802164e:	2100      	movs	r1, #0
 8021650:	f9b5 2000 	ldrsh.w	r2, [r5]
 8021654:	f9b3 3000 	ldrsh.w	r3, [r3]
 8021658:	4658      	mov	r0, fp
 802165a:	910c      	str	r1, [sp, #48]	@ 0x30
 802165c:	a90c      	add	r1, sp, #48	@ 0x30
 802165e:	f8ad 2034 	strh.w	r2, [sp, #52]	@ 0x34
 8021662:	f8ad 3036 	strh.w	r3, [sp, #54]	@ 0x36
 8021666:	f7f6 fa85 	bl	8017b74 <_ZN8touchgfx4RectaNERKS0_>
 802166a:	4658      	mov	r0, fp
 802166c:	f7f6 fac5 	bl	8017bfa <_ZNK8touchgfx4Rect7isEmptyEv>
 8021670:	2800      	cmp	r0, #0
 8021672:	f040 809a 	bne.w	80217aa <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x20e>
 8021676:	f9bd 0020 	ldrsh.w	r0, [sp, #32]
 802167a:	f9bd 1018 	ldrsh.w	r1, [sp, #24]
 802167e:	4288      	cmp	r0, r1
 8021680:	db38      	blt.n	80216f4 <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x158>
 8021682:	f9bd 2022 	ldrsh.w	r2, [sp, #34]	@ 0x22
 8021686:	f9bd 301a 	ldrsh.w	r3, [sp, #26]
 802168a:	429a      	cmp	r2, r3
 802168c:	db32      	blt.n	80216f4 <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x158>
 802168e:	f8bd 6024 	ldrh.w	r6, [sp, #36]	@ 0x24
 8021692:	4430      	add	r0, r6
 8021694:	f8bd 601c 	ldrh.w	r6, [sp, #28]
 8021698:	4431      	add	r1, r6
 802169a:	b200      	sxth	r0, r0
 802169c:	b209      	sxth	r1, r1
 802169e:	4288      	cmp	r0, r1
 80216a0:	dc28      	bgt.n	80216f4 <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x158>
 80216a2:	f8bd 1026 	ldrh.w	r1, [sp, #38]	@ 0x26
 80216a6:	440a      	add	r2, r1
 80216a8:	f8bd 101e 	ldrh.w	r1, [sp, #30]
 80216ac:	440b      	add	r3, r1
 80216ae:	b212      	sxth	r2, r2
 80216b0:	b21b      	sxth	r3, r3
 80216b2:	429a      	cmp	r2, r3
 80216b4:	dc1e      	bgt.n	80216f4 <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x158>
 80216b6:	6823      	ldr	r3, [r4, #0]
 80216b8:	4620      	mov	r0, r4
 80216ba:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80216bc:	4798      	blx	r3
 80216be:	4682      	mov	sl, r0
 80216c0:	6838      	ldr	r0, [r7, #0]
 80216c2:	6803      	ldr	r3, [r0, #0]
 80216c4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80216c6:	4798      	blx	r3
 80216c8:	f9bd 1028 	ldrsh.w	r1, [sp, #40]	@ 0x28
 80216cc:	f8bd 3020 	ldrh.w	r3, [sp, #32]
 80216d0:	f9bd 202c 	ldrsh.w	r2, [sp, #44]	@ 0x2c
 80216d4:	1a5b      	subs	r3, r3, r1
 80216d6:	b29b      	uxth	r3, r3
 80216d8:	b21c      	sxth	r4, r3
 80216da:	2c00      	cmp	r4, #0
 80216dc:	dc0f      	bgt.n	80216fe <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x162>
 80216de:	bf18      	it	ne
 80216e0:	f8ad 1020 	strhne.w	r1, [sp, #32]
 80216e4:	4644      	mov	r4, r8
 80216e6:	bf1e      	ittt	ne
 80216e8:	f8bd 1024 	ldrhne.w	r1, [sp, #36]	@ 0x24
 80216ec:	185b      	addne	r3, r3, r1
 80216ee:	f8ad 3024 	strhne.w	r3, [sp, #36]	@ 0x24
 80216f2:	e009      	b.n	8021708 <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x16c>
 80216f4:	4b4a      	ldr	r3, [pc, #296]	@ (8021820 <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x284>)
 80216f6:	f240 3176 	movw	r1, #886	@ 0x376
 80216fa:	4a43      	ldr	r2, [pc, #268]	@ (8021808 <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x26c>)
 80216fc:	e75e      	b.n	80215bc <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x20>
 80216fe:	1ad3      	subs	r3, r2, r3
 8021700:	eb08 0444 	add.w	r4, r8, r4, lsl #1
 8021704:	f8ad 302c 	strh.w	r3, [sp, #44]	@ 0x2c
 8021708:	f9bd 602a 	ldrsh.w	r6, [sp, #42]	@ 0x2a
 802170c:	f8bd 3022 	ldrh.w	r3, [sp, #34]	@ 0x22
 8021710:	1b9b      	subs	r3, r3, r6
 8021712:	b29b      	uxth	r3, r3
 8021714:	b219      	sxth	r1, r3
 8021716:	2900      	cmp	r1, #0
 8021718:	dd4b      	ble.n	80217b2 <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x216>
 802171a:	4351      	muls	r1, r2
 802171c:	eb04 0441 	add.w	r4, r4, r1, lsl #1
 8021720:	f8bd 102e 	ldrh.w	r1, [sp, #46]	@ 0x2e
 8021724:	1acb      	subs	r3, r1, r3
 8021726:	f8ad 302e 	strh.w	r3, [sp, #46]	@ 0x2e
 802172a:	f9bd 602c 	ldrsh.w	r6, [sp, #44]	@ 0x2c
 802172e:	2e00      	cmp	r6, #0
 8021730:	dd3b      	ble.n	80217aa <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x20e>
 8021732:	f9bd 302e 	ldrsh.w	r3, [sp, #46]	@ 0x2e
 8021736:	2b00      	cmp	r3, #0
 8021738:	dd37      	ble.n	80217aa <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x20e>
 802173a:	f9bd c022 	ldrsh.w	ip, [sp, #34]	@ 0x22
 802173e:	f9bd 1020 	ldrsh.w	r1, [sp, #32]
 8021742:	fb0a f90c 	mul.w	r9, sl, ip
 8021746:	eb09 0941 	add.w	r9, r9, r1, lsl #1
 802174a:	4481      	add	r9, r0
 802174c:	8828      	ldrh	r0, [r5, #0]
 802174e:	f9bd 5024 	ldrsh.w	r5, [sp, #36]	@ 0x24
 8021752:	1a41      	subs	r1, r0, r1
 8021754:	42ae      	cmp	r6, r5
 8021756:	bfa8      	it	ge
 8021758:	462e      	movge	r6, r5
 802175a:	f9bd 5026 	ldrsh.w	r5, [sp, #38]	@ 0x26
 802175e:	428e      	cmp	r6, r1
 8021760:	bfa8      	it	ge
 8021762:	460e      	movge	r6, r1
 8021764:	429d      	cmp	r5, r3
 8021766:	bfa8      	it	ge
 8021768:	461d      	movge	r5, r3
 802176a:	4b2c      	ldr	r3, [pc, #176]	@ (802181c <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x280>)
 802176c:	881b      	ldrh	r3, [r3, #0]
 802176e:	eba3 030c 	sub.w	r3, r3, ip
 8021772:	429d      	cmp	r5, r3
 8021774:	bfa8      	it	ge
 8021776:	461d      	movge	r5, r3
 8021778:	42b0      	cmp	r0, r6
 802177a:	d12c      	bne.n	80217d6 <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x23a>
 802177c:	4290      	cmp	r0, r2
 802177e:	d12a      	bne.n	80217d6 <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x23a>
 8021780:	6838      	ldr	r0, [r7, #0]
 8021782:	9203      	str	r2, [sp, #12]
 8021784:	6803      	ldr	r3, [r0, #0]
 8021786:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8021788:	4798      	blx	r3
 802178a:	07c3      	lsls	r3, r0, #31
 802178c:	d51a      	bpl.n	80217c4 <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x228>
 802178e:	9a03      	ldr	r2, [sp, #12]
 8021790:	6838      	ldr	r0, [r7, #0]
 8021792:	f8ad 5026 	strh.w	r5, [sp, #38]	@ 0x26
 8021796:	f8ad 2024 	strh.w	r2, [sp, #36]	@ 0x24
 802179a:	6803      	ldr	r3, [r0, #0]
 802179c:	9200      	str	r2, [sp, #0]
 802179e:	6e9d      	ldr	r5, [r3, #104]	@ 0x68
 80217a0:	4623      	mov	r3, r4
 80217a2:	e89b 0006 	ldmia.w	fp, {r1, r2}
 80217a6:	47a8      	blx	r5
 80217a8:	4680      	mov	r8, r0
 80217aa:	4640      	mov	r0, r8
 80217ac:	b00f      	add	sp, #60	@ 0x3c
 80217ae:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80217b2:	bf1f      	itttt	ne
 80217b4:	f8bd 1026 	ldrhne.w	r1, [sp, #38]	@ 0x26
 80217b8:	f8ad 6022 	strhne.w	r6, [sp, #34]	@ 0x22
 80217bc:	185b      	addne	r3, r3, r1
 80217be:	f8ad 3026 	strhne.w	r3, [sp, #38]	@ 0x26
 80217c2:	e7b2      	b.n	802172a <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x18e>
 80217c4:	6838      	ldr	r0, [r7, #0]
 80217c6:	464a      	mov	r2, r9
 80217c8:	4621      	mov	r1, r4
 80217ca:	6803      	ldr	r3, [r0, #0]
 80217cc:	6b5e      	ldr	r6, [r3, #52]	@ 0x34
 80217ce:	fb05 f30a 	mul.w	r3, r5, sl
 80217d2:	47b0      	blx	r6
 80217d4:	e7e9      	b.n	80217aa <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x20e>
 80217d6:	4355      	muls	r5, r2
 80217d8:	0076      	lsls	r6, r6, #1
 80217da:	ea4f 0b42 	mov.w	fp, r2, lsl #1
 80217de:	eb04 0345 	add.w	r3, r4, r5, lsl #1
 80217e2:	9303      	str	r3, [sp, #12]
 80217e4:	9b03      	ldr	r3, [sp, #12]
 80217e6:	429c      	cmp	r4, r3
 80217e8:	d2df      	bcs.n	80217aa <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x20e>
 80217ea:	6838      	ldr	r0, [r7, #0]
 80217ec:	464a      	mov	r2, r9
 80217ee:	4621      	mov	r1, r4
 80217f0:	44d1      	add	r9, sl
 80217f2:	6803      	ldr	r3, [r0, #0]
 80217f4:	445c      	add	r4, fp
 80217f6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80217f8:	461d      	mov	r5, r3
 80217fa:	4633      	mov	r3, r6
 80217fc:	47a8      	blx	r5
 80217fe:	e7f1      	b.n	80217e4 <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x248>
 8021800:	2400b880 	.word	0x2400b880
 8021804:	0802f90f 	.word	0x0802f90f
 8021808:	080301c0 	.word	0x080301c0
 802180c:	0802f9c1 	.word	0x0802f9c1
 8021810:	0802f9f3 	.word	0x0802f9f3
 8021814:	0802fa48 	.word	0x0802fa48
 8021818:	2400b87a 	.word	0x2400b87a
 802181c:	2400b87c 	.word	0x2400b87c
 8021820:	0802fa86 	.word	0x0802fa86

08021824 <_ZN8touchgfx8LCD16bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh>:
 8021824:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8021828:	f89d 7024 	ldrb.w	r7, [sp, #36]	@ 0x24
 802182c:	4688      	mov	r8, r1
 802182e:	4614      	mov	r4, r2
 8021830:	461d      	mov	r5, r3
 8021832:	9e08      	ldr	r6, [sp, #32]
 8021834:	2f00      	cmp	r7, #0
 8021836:	f000 80b4 	beq.w	80219a2 <_ZN8touchgfx8LCD16bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x17e>
 802183a:	4618      	mov	r0, r3
 802183c:	f7f6 f9dd 	bl	8017bfa <_ZNK8touchgfx4Rect7isEmptyEv>
 8021840:	2800      	cmp	r0, #0
 8021842:	f040 80ae 	bne.w	80219a2 <_ZN8touchgfx8LCD16bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x17e>
 8021846:	f9b5 1000 	ldrsh.w	r1, [r5]
 802184a:	2fff      	cmp	r7, #255	@ 0xff
 802184c:	f9b5 3002 	ldrsh.w	r3, [r5, #2]
 8021850:	f9b5 0004 	ldrsh.w	r0, [r5, #4]
 8021854:	fb04 1303 	mla	r3, r4, r3, r1
 8021858:	f9b5 5006 	ldrsh.w	r5, [r5, #6]
 802185c:	eba4 0200 	sub.w	r2, r4, r0
 8021860:	eb08 0143 	add.w	r1, r8, r3, lsl #1
 8021864:	fb04 f505 	mul.w	r5, r4, r5
 8021868:	ea4f 2816 	mov.w	r8, r6, lsr #8
 802186c:	eb01 0545 	add.w	r5, r1, r5, lsl #1
 8021870:	d04b      	beq.n	802190a <_ZN8touchgfx8LCD16bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0xe6>
 8021872:	b2bc      	uxth	r4, r7
 8021874:	f1c7 0cff 	rsb	ip, r7, #255	@ 0xff
 8021878:	f3c6 4e07 	ubfx	lr, r6, #16, #8
 802187c:	fa5f f788 	uxtb.w	r7, r8
 8021880:	b2f3      	uxtb	r3, r6
 8021882:	0040      	lsls	r0, r0, #1
 8021884:	fb0e fe04 	mul.w	lr, lr, r4
 8021888:	4367      	muls	r7, r4
 802188a:	ea4f 0842 	mov.w	r8, r2, lsl #1
 802188e:	4363      	muls	r3, r4
 8021890:	fa1f fc8c 	uxth.w	ip, ip
 8021894:	42a9      	cmp	r1, r5
 8021896:	f080 8084 	bcs.w	80219a2 <_ZN8touchgfx8LCD16bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x17e>
 802189a:	eb01 0900 	add.w	r9, r1, r0
 802189e:	4549      	cmp	r1, r9
 80218a0:	d231      	bcs.n	8021906 <_ZN8touchgfx8LCD16bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0xe2>
 80218a2:	880a      	ldrh	r2, [r1, #0]
 80218a4:	1214      	asrs	r4, r2, #8
 80218a6:	10d6      	asrs	r6, r2, #3
 80218a8:	f004 04f8 	and.w	r4, r4, #248	@ 0xf8
 80218ac:	00d2      	lsls	r2, r2, #3
 80218ae:	f006 06fc 	and.w	r6, r6, #252	@ 0xfc
 80218b2:	b2d2      	uxtb	r2, r2
 80218b4:	ea44 1454 	orr.w	r4, r4, r4, lsr #5
 80218b8:	ea42 1252 	orr.w	r2, r2, r2, lsr #5
 80218bc:	fb14 f40c 	smulbb	r4, r4, ip
 80218c0:	ea46 1696 	orr.w	r6, r6, r6, lsr #6
 80218c4:	fb12 f20c 	smulbb	r2, r2, ip
 80218c8:	fb16 f60c 	smulbb	r6, r6, ip
 80218cc:	4474      	add	r4, lr
 80218ce:	441a      	add	r2, r3
 80218d0:	b2a4      	uxth	r4, r4
 80218d2:	443e      	add	r6, r7
 80218d4:	b292      	uxth	r2, r2
 80218d6:	f104 0a01 	add.w	sl, r4, #1
 80218da:	b2b6      	uxth	r6, r6
 80218dc:	eb0a 2414 	add.w	r4, sl, r4, lsr #8
 80218e0:	f102 0a01 	add.w	sl, r2, #1
 80218e4:	eb0a 2212 	add.w	r2, sl, r2, lsr #8
 80218e8:	f404 4478 	and.w	r4, r4, #63488	@ 0xf800
 80218ec:	f3c2 22c4 	ubfx	r2, r2, #11, #5
 80218f0:	4322      	orrs	r2, r4
 80218f2:	1c74      	adds	r4, r6, #1
 80218f4:	eb04 2616 	add.w	r6, r4, r6, lsr #8
 80218f8:	0976      	lsrs	r6, r6, #5
 80218fa:	f406 66fc 	and.w	r6, r6, #2016	@ 0x7e0
 80218fe:	4332      	orrs	r2, r6
 8021900:	f821 2b02 	strh.w	r2, [r1], #2
 8021904:	e7cb      	b.n	802189e <_ZN8touchgfx8LCD16bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x7a>
 8021906:	4441      	add	r1, r8
 8021908:	e7c4      	b.n	8021894 <_ZN8touchgfx8LCD16bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x70>
 802190a:	0973      	lsrs	r3, r6, #5
 802190c:	4f26      	ldr	r7, [pc, #152]	@ (80219a8 <_ZN8touchgfx8LCD16bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x184>)
 802190e:	f3c6 06c4 	ubfx	r6, r6, #3, #5
 8021912:	f403 63fc 	and.w	r3, r3, #2016	@ 0x7e0
 8021916:	ea08 0707 	and.w	r7, r8, r7
 802191a:	433b      	orrs	r3, r7
 802191c:	4333      	orrs	r3, r6
 802191e:	07e6      	lsls	r6, r4, #31
 8021920:	b29b      	uxth	r3, r3
 8021922:	d50b      	bpl.n	802193c <_ZN8touchgfx8LCD16bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x118>
 8021924:	0040      	lsls	r0, r0, #1
 8021926:	0052      	lsls	r2, r2, #1
 8021928:	42a9      	cmp	r1, r5
 802192a:	d23a      	bcs.n	80219a2 <_ZN8touchgfx8LCD16bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x17e>
 802192c:	180c      	adds	r4, r1, r0
 802192e:	42a1      	cmp	r1, r4
 8021930:	d202      	bcs.n	8021938 <_ZN8touchgfx8LCD16bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x114>
 8021932:	f821 3b02 	strh.w	r3, [r1], #2
 8021936:	e7fa      	b.n	802192e <_ZN8touchgfx8LCD16bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x10a>
 8021938:	4411      	add	r1, r2
 802193a:	e7f5      	b.n	8021928 <_ZN8touchgfx8LCD16bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x104>
 802193c:	078f      	lsls	r7, r1, #30
 802193e:	d008      	beq.n	8021952 <_ZN8touchgfx8LCD16bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x12e>
 8021940:	0066      	lsls	r6, r4, #1
 8021942:	460a      	mov	r2, r1
 8021944:	42aa      	cmp	r2, r5
 8021946:	d202      	bcs.n	802194e <_ZN8touchgfx8LCD16bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x12a>
 8021948:	8013      	strh	r3, [r2, #0]
 802194a:	4432      	add	r2, r6
 802194c:	e7fa      	b.n	8021944 <_ZN8touchgfx8LCD16bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x120>
 802194e:	3102      	adds	r1, #2
 8021950:	3801      	subs	r0, #1
 8021952:	07c6      	lsls	r6, r0, #31
 8021954:	d50b      	bpl.n	802196e <_ZN8touchgfx8LCD16bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x14a>
 8021956:	f100 4200 	add.w	r2, r0, #2147483648	@ 0x80000000
 802195a:	0066      	lsls	r6, r4, #1
 802195c:	3a01      	subs	r2, #1
 802195e:	eb01 0242 	add.w	r2, r1, r2, lsl #1
 8021962:	42aa      	cmp	r2, r5
 8021964:	d202      	bcs.n	802196c <_ZN8touchgfx8LCD16bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x148>
 8021966:	8013      	strh	r3, [r2, #0]
 8021968:	4432      	add	r2, r6
 802196a:	e7fa      	b.n	8021962 <_ZN8touchgfx8LCD16bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x13e>
 802196c:	3801      	subs	r0, #1
 802196e:	b1c0      	cbz	r0, 80219a2 <_ZN8touchgfx8LCD16bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x17e>
 8021970:	1040      	asrs	r0, r0, #1
 8021972:	ea43 4303 	orr.w	r3, r3, r3, lsl #16
 8021976:	0080      	lsls	r0, r0, #2
 8021978:	0064      	lsls	r4, r4, #1
 802197a:	42a9      	cmp	r1, r5
 802197c:	d211      	bcs.n	80219a2 <_ZN8touchgfx8LCD16bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x17e>
 802197e:	078a      	lsls	r2, r1, #30
 8021980:	d006      	beq.n	8021990 <_ZN8touchgfx8LCD16bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x16c>
 8021982:	4b0a      	ldr	r3, [pc, #40]	@ (80219ac <_ZN8touchgfx8LCD16bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x188>)
 8021984:	f44f 6185 	mov.w	r1, #1064	@ 0x428
 8021988:	4a09      	ldr	r2, [pc, #36]	@ (80219b0 <_ZN8touchgfx8LCD16bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x18c>)
 802198a:	480a      	ldr	r0, [pc, #40]	@ (80219b4 <_ZN8touchgfx8LCD16bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x190>)
 802198c:	f008 ffd2 	bl	802a934 <__assert_func>
 8021990:	180e      	adds	r6, r1, r0
 8021992:	460a      	mov	r2, r1
 8021994:	42b2      	cmp	r2, r6
 8021996:	d202      	bcs.n	802199e <_ZN8touchgfx8LCD16bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x17a>
 8021998:	f842 3b04 	str.w	r3, [r2], #4
 802199c:	e7fa      	b.n	8021994 <_ZN8touchgfx8LCD16bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x170>
 802199e:	4421      	add	r1, r4
 80219a0:	e7eb      	b.n	802197a <_ZN8touchgfx8LCD16bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x156>
 80219a2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80219a6:	bf00      	nop
 80219a8:	00fff800 	.word	0x00fff800
 80219ac:	0802f7c0 	.word	0x0802f7c0
 80219b0:	0802fe0c 	.word	0x0802fe0c
 80219b4:	0802f9c1 	.word	0x0802f9c1

080219b8 <_ZN8touchgfx8LCD16bppC1Ev>:
 80219b8:	2200      	movs	r2, #0
 80219ba:	4910      	ldr	r1, [pc, #64]	@ (80219fc <_ZN8touchgfx8LCD16bppC1Ev+0x44>)
 80219bc:	6042      	str	r2, [r0, #4]
 80219be:	6001      	str	r1, [r0, #0]
 80219c0:	e9c0 2202 	strd	r2, r2, [r0, #8]
 80219c4:	e9c0 2204 	strd	r2, r2, [r0, #16]
 80219c8:	e9c0 2206 	strd	r2, r2, [r0, #24]
 80219cc:	e9c0 2208 	strd	r2, r2, [r0, #32]
 80219d0:	e9c0 220a 	strd	r2, r2, [r0, #40]	@ 0x28
 80219d4:	e9c0 220c 	strd	r2, r2, [r0, #48]	@ 0x30
 80219d8:	e9c0 220e 	strd	r2, r2, [r0, #56]	@ 0x38
 80219dc:	e9c0 2210 	strd	r2, r2, [r0, #64]	@ 0x40
 80219e0:	e9c0 2212 	strd	r2, r2, [r0, #72]	@ 0x48
 80219e4:	e9c0 2214 	strd	r2, r2, [r0, #80]	@ 0x50
 80219e8:	e9c0 2216 	strd	r2, r2, [r0, #88]	@ 0x58
 80219ec:	e9c0 2218 	strd	r2, r2, [r0, #96]	@ 0x60
 80219f0:	e9c0 221a 	strd	r2, r2, [r0, #104]	@ 0x68
 80219f4:	e9c0 221c 	strd	r2, r2, [r0, #112]	@ 0x70
 80219f8:	4770      	bx	lr
 80219fa:	bf00      	nop
 80219fc:	0802fdc4 	.word	0x0802fdc4

08021a00 <_ZN8touchgfx8LCD16bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h>:
 8021a00:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8021a04:	b08d      	sub	sp, #52	@ 0x34
 8021a06:	460d      	mov	r5, r1
 8021a08:	4604      	mov	r4, r0
 8021a0a:	4699      	mov	r9, r3
 8021a0c:	6808      	ldr	r0, [r1, #0]
 8021a0e:	ab08      	add	r3, sp, #32
 8021a10:	6849      	ldr	r1, [r1, #4]
 8021a12:	c303      	stmia	r3!, {r0, r1}
 8021a14:	6810      	ldr	r0, [r2, #0]
 8021a16:	ab0a      	add	r3, sp, #40	@ 0x28
 8021a18:	6851      	ldr	r1, [r2, #4]
 8021a1a:	c303      	stmia	r3!, {r0, r1}
 8021a1c:	a808      	add	r0, sp, #32
 8021a1e:	f7f9 fc5b 	bl	801b2d8 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 8021a22:	4629      	mov	r1, r5
 8021a24:	a80a      	add	r0, sp, #40	@ 0x28
 8021a26:	4d67      	ldr	r5, [pc, #412]	@ (8021bc4 <_ZN8touchgfx8LCD16bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x1c4>)
 8021a28:	f7f9 fc7e 	bl	801b328 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
 8021a2c:	f9bd 2028 	ldrsh.w	r2, [sp, #40]	@ 0x28
 8021a30:	f9bd 302a 	ldrsh.w	r3, [sp, #42]	@ 0x2a
 8021a34:	f8bd 1024 	ldrh.w	r1, [sp, #36]	@ 0x24
 8021a38:	6828      	ldr	r0, [r5, #0]
 8021a3a:	fb11 2103 	smlabb	r1, r1, r3, r2
 8021a3e:	f9bd 802c 	ldrsh.w	r8, [sp, #44]	@ 0x2c
 8021a42:	f9bd 602e 	ldrsh.w	r6, [sp, #46]	@ 0x2e
 8021a46:	eb04 0481 	add.w	r4, r4, r1, lsl #2
 8021a4a:	f8bd 1020 	ldrh.w	r1, [sp, #32]
 8021a4e:	440a      	add	r2, r1
 8021a50:	f8ad 2028 	strh.w	r2, [sp, #40]	@ 0x28
 8021a54:	f8bd 2022 	ldrh.w	r2, [sp, #34]	@ 0x22
 8021a58:	4413      	add	r3, r2
 8021a5a:	f8ad 302a 	strh.w	r3, [sp, #42]	@ 0x2a
 8021a5e:	6803      	ldr	r3, [r0, #0]
 8021a60:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8021a62:	4798      	blx	r3
 8021a64:	f1b9 0fff 	cmp.w	r9, #255	@ 0xff
 8021a68:	d119      	bne.n	8021a9e <_ZN8touchgfx8LCD16bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x9e>
 8021a6a:	f010 0f20 	tst.w	r0, #32
 8021a6e:	6828      	ldr	r0, [r5, #0]
 8021a70:	d018      	beq.n	8021aa4 <_ZN8touchgfx8LCD16bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0xa4>
 8021a72:	2500      	movs	r5, #0
 8021a74:	6801      	ldr	r1, [r0, #0]
 8021a76:	b2b6      	uxth	r6, r6
 8021a78:	f8bd 302a 	ldrh.w	r3, [sp, #42]	@ 0x2a
 8021a7c:	f8bd 2028 	ldrh.w	r2, [sp, #40]	@ 0x28
 8021a80:	9601      	str	r6, [sp, #4]
 8021a82:	e9cd 9503 	strd	r9, r5, [sp, #12]
 8021a86:	f8bd 5024 	ldrh.w	r5, [sp, #36]	@ 0x24
 8021a8a:	9502      	str	r5, [sp, #8]
 8021a8c:	fa1f f588 	uxth.w	r5, r8
 8021a90:	9500      	str	r5, [sp, #0]
 8021a92:	6d0d      	ldr	r5, [r1, #80]	@ 0x50
 8021a94:	4621      	mov	r1, r4
 8021a96:	47a8      	blx	r5
 8021a98:	b00d      	add	sp, #52	@ 0x34
 8021a9a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8021a9e:	f010 0f40 	tst.w	r0, #64	@ 0x40
 8021aa2:	e7e4      	b.n	8021a6e <_ZN8touchgfx8LCD16bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x6e>
 8021aa4:	6803      	ldr	r3, [r0, #0]
 8021aa6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8021aa8:	4798      	blx	r3
 8021aaa:	4947      	ldr	r1, [pc, #284]	@ (8021bc8 <_ZN8touchgfx8LCD16bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x1c8>)
 8021aac:	f9bd 202a 	ldrsh.w	r2, [sp, #42]	@ 0x2a
 8021ab0:	880b      	ldrh	r3, [r1, #0]
 8021ab2:	468a      	mov	sl, r1
 8021ab4:	f9bd 5028 	ldrsh.w	r5, [sp, #40]	@ 0x28
 8021ab8:	fb03 5202 	mla	r2, r3, r2, r5
 8021abc:	4373      	muls	r3, r6
 8021abe:	eb00 0042 	add.w	r0, r0, r2, lsl #1
 8021ac2:	eb00 0343 	add.w	r3, r0, r3, lsl #1
 8021ac6:	9307      	str	r3, [sp, #28]
 8021ac8:	ea4f 0348 	mov.w	r3, r8, lsl #1
 8021acc:	9306      	str	r3, [sp, #24]
 8021ace:	9b07      	ldr	r3, [sp, #28]
 8021ad0:	4298      	cmp	r0, r3
 8021ad2:	d270      	bcs.n	8021bb6 <_ZN8touchgfx8LCD16bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x1b6>
 8021ad4:	9b06      	ldr	r3, [sp, #24]
 8021ad6:	4621      	mov	r1, r4
 8021ad8:	eb00 0b03 	add.w	fp, r0, r3
 8021adc:	4558      	cmp	r0, fp
 8021ade:	d25d      	bcs.n	8021b9c <_ZN8touchgfx8LCD16bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x19c>
 8021ae0:	f851 4b04 	ldr.w	r4, [r1], #4
 8021ae4:	0e23      	lsrs	r3, r4, #24
 8021ae6:	d014      	beq.n	8021b12 <_ZN8touchgfx8LCD16bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x112>
 8021ae8:	2bff      	cmp	r3, #255	@ 0xff
 8021aea:	ea4f 2c14 	mov.w	ip, r4, lsr #8
 8021aee:	d112      	bne.n	8021b16 <_ZN8touchgfx8LCD16bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x116>
 8021af0:	f1b9 0fff 	cmp.w	r9, #255	@ 0xff
 8021af4:	d10f      	bne.n	8021b16 <_ZN8touchgfx8LCD16bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x116>
 8021af6:	0963      	lsrs	r3, r4, #5
 8021af8:	f42c 6cff 	bic.w	ip, ip, #2040	@ 0x7f8
 8021afc:	f3c4 04c4 	ubfx	r4, r4, #3, #5
 8021b00:	f403 63fc 	and.w	r3, r3, #2016	@ 0x7e0
 8021b04:	f02c 0c07 	bic.w	ip, ip, #7
 8021b08:	ea43 0c0c 	orr.w	ip, r3, ip
 8021b0c:	ea4c 0404 	orr.w	r4, ip, r4
 8021b10:	8004      	strh	r4, [r0, #0]
 8021b12:	3002      	adds	r0, #2
 8021b14:	e7e2      	b.n	8021adc <_ZN8touchgfx8LCD16bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0xdc>
 8021b16:	fb09 f303 	mul.w	r3, r9, r3
 8021b1a:	8807      	ldrh	r7, [r0, #0]
 8021b1c:	f3c4 4e07 	ubfx	lr, r4, #16, #8
 8021b20:	fa5f fc8c 	uxtb.w	ip, ip
 8021b24:	1c5a      	adds	r2, r3, #1
 8021b26:	123e      	asrs	r6, r7, #8
 8021b28:	10fd      	asrs	r5, r7, #3
 8021b2a:	eb02 2223 	add.w	r2, r2, r3, asr #8
 8021b2e:	f006 06f8 	and.w	r6, r6, #248	@ 0xf8
 8021b32:	00ff      	lsls	r7, r7, #3
 8021b34:	f005 05fc 	and.w	r5, r5, #252	@ 0xfc
 8021b38:	1212      	asrs	r2, r2, #8
 8021b3a:	ea46 1656 	orr.w	r6, r6, r6, lsr #5
 8021b3e:	b293      	uxth	r3, r2
 8021b40:	43d2      	mvns	r2, r2
 8021b42:	b2ff      	uxtb	r7, r7
 8021b44:	fb1e fe03 	smulbb	lr, lr, r3
 8021b48:	b2d2      	uxtb	r2, r2
 8021b4a:	fb1c fc03 	smulbb	ip, ip, r3
 8021b4e:	b2e4      	uxtb	r4, r4
 8021b50:	fb06 e602 	mla	r6, r6, r2, lr
 8021b54:	ea45 1595 	orr.w	r5, r5, r5, lsr #6
 8021b58:	fb14 f403 	smulbb	r4, r4, r3
 8021b5c:	ea47 1757 	orr.w	r7, r7, r7, lsr #5
 8021b60:	b2b6      	uxth	r6, r6
 8021b62:	fb05 c502 	mla	r5, r5, r2, ip
 8021b66:	fb07 4702 	mla	r7, r7, r2, r4
 8021b6a:	f106 0e01 	add.w	lr, r6, #1
 8021b6e:	b2ad      	uxth	r5, r5
 8021b70:	b2bf      	uxth	r7, r7
 8021b72:	eb0e 2616 	add.w	r6, lr, r6, lsr #8
 8021b76:	f105 0c01 	add.w	ip, r5, #1
 8021b7a:	f406 4e78 	and.w	lr, r6, #63488	@ 0xf800
 8021b7e:	1c7e      	adds	r6, r7, #1
 8021b80:	eb0c 2515 	add.w	r5, ip, r5, lsr #8
 8021b84:	eb06 2617 	add.w	r6, r6, r7, lsr #8
 8021b88:	096d      	lsrs	r5, r5, #5
 8021b8a:	f3c6 26c4 	ubfx	r6, r6, #11, #5
 8021b8e:	f405 65fc 	and.w	r5, r5, #2016	@ 0x7e0
 8021b92:	ea46 060e 	orr.w	r6, r6, lr
 8021b96:	432e      	orrs	r6, r5
 8021b98:	8006      	strh	r6, [r0, #0]
 8021b9a:	e7ba      	b.n	8021b12 <_ZN8touchgfx8LCD16bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x112>
 8021b9c:	f8ba 3000 	ldrh.w	r3, [sl]
 8021ba0:	f9bd 4024 	ldrsh.w	r4, [sp, #36]	@ 0x24
 8021ba4:	eba3 0308 	sub.w	r3, r3, r8
 8021ba8:	eba4 0408 	sub.w	r4, r4, r8
 8021bac:	eb00 0043 	add.w	r0, r0, r3, lsl #1
 8021bb0:	eb01 0484 	add.w	r4, r1, r4, lsl #2
 8021bb4:	e78b      	b.n	8021ace <_ZN8touchgfx8LCD16bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0xce>
 8021bb6:	4b03      	ldr	r3, [pc, #12]	@ (8021bc4 <_ZN8touchgfx8LCD16bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x1c4>)
 8021bb8:	6818      	ldr	r0, [r3, #0]
 8021bba:	6803      	ldr	r3, [r0, #0]
 8021bbc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8021bbe:	4798      	blx	r3
 8021bc0:	e76a      	b.n	8021a98 <_ZN8touchgfx8LCD16bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x98>
 8021bc2:	bf00      	nop
 8021bc4:	2400b880 	.word	0x2400b880
 8021bc8:	2400b87a 	.word	0x2400b87a

08021bcc <_ZN8touchgfx8LCD16bpp21blitCopyARGB8888SolidEPKmRKNS_4RectES5_>:
 8021bcc:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8021bd0:	b085      	sub	sp, #20
 8021bd2:	6810      	ldr	r0, [r2, #0]
 8021bd4:	460c      	mov	r4, r1
 8021bd6:	6851      	ldr	r1, [r2, #4]
 8021bd8:	466d      	mov	r5, sp
 8021bda:	4616      	mov	r6, r2
 8021bdc:	c503      	stmia	r5!, {r0, r1}
 8021bde:	6818      	ldr	r0, [r3, #0]
 8021be0:	6859      	ldr	r1, [r3, #4]
 8021be2:	c503      	stmia	r5!, {r0, r1}
 8021be4:	4668      	mov	r0, sp
 8021be6:	4d2e      	ldr	r5, [pc, #184]	@ (8021ca0 <_ZN8touchgfx8LCD16bpp21blitCopyARGB8888SolidEPKmRKNS_4RectES5_+0xd4>)
 8021be8:	f7f9 fb76 	bl	801b2d8 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 8021bec:	4631      	mov	r1, r6
 8021bee:	a802      	add	r0, sp, #8
 8021bf0:	4e2c      	ldr	r6, [pc, #176]	@ (8021ca4 <_ZN8touchgfx8LCD16bpp21blitCopyARGB8888SolidEPKmRKNS_4RectES5_+0xd8>)
 8021bf2:	f7f9 fb99 	bl	801b328 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
 8021bf6:	f9bd 2008 	ldrsh.w	r2, [sp, #8]
 8021bfa:	f9bd 300a 	ldrsh.w	r3, [sp, #10]
 8021bfe:	f8bd 1004 	ldrh.w	r1, [sp, #4]
 8021c02:	6828      	ldr	r0, [r5, #0]
 8021c04:	fb11 2103 	smlabb	r1, r1, r3, r2
 8021c08:	f9bd 700c 	ldrsh.w	r7, [sp, #12]
 8021c0c:	f9bd 800e 	ldrsh.w	r8, [sp, #14]
 8021c10:	eb04 0481 	add.w	r4, r4, r1, lsl #2
 8021c14:	f8bd 1000 	ldrh.w	r1, [sp]
 8021c18:	440a      	add	r2, r1
 8021c1a:	f8ad 2008 	strh.w	r2, [sp, #8]
 8021c1e:	f8bd 2002 	ldrh.w	r2, [sp, #2]
 8021c22:	4413      	add	r3, r2
 8021c24:	f8ad 300a 	strh.w	r3, [sp, #10]
 8021c28:	6803      	ldr	r3, [r0, #0]
 8021c2a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8021c2c:	4798      	blx	r3
 8021c2e:	8833      	ldrh	r3, [r6, #0]
 8021c30:	f9bd 200a 	ldrsh.w	r2, [sp, #10]
 8021c34:	ea4f 0c47 	mov.w	ip, r7, lsl #1
 8021c38:	f9bd 1008 	ldrsh.w	r1, [sp, #8]
 8021c3c:	f8df e068 	ldr.w	lr, [pc, #104]	@ 8021ca8 <_ZN8touchgfx8LCD16bpp21blitCopyARGB8888SolidEPKmRKNS_4RectES5_+0xdc>
 8021c40:	fb03 1202 	mla	r2, r3, r2, r1
 8021c44:	fb08 f303 	mul.w	r3, r8, r3
 8021c48:	eb00 0042 	add.w	r0, r0, r2, lsl #1
 8021c4c:	eb00 0343 	add.w	r3, r0, r3, lsl #1
 8021c50:	4298      	cmp	r0, r3
 8021c52:	d21d      	bcs.n	8021c90 <_ZN8touchgfx8LCD16bpp21blitCopyARGB8888SolidEPKmRKNS_4RectES5_+0xc4>
 8021c54:	eb00 080c 	add.w	r8, r0, ip
 8021c58:	4540      	cmp	r0, r8
 8021c5a:	d20f      	bcs.n	8021c7c <_ZN8touchgfx8LCD16bpp21blitCopyARGB8888SolidEPKmRKNS_4RectES5_+0xb0>
 8021c5c:	f854 1b04 	ldr.w	r1, [r4], #4
 8021c60:	ea4f 1951 	mov.w	r9, r1, lsr #5
 8021c64:	ea0e 2211 	and.w	r2, lr, r1, lsr #8
 8021c68:	f3c1 01c4 	ubfx	r1, r1, #3, #5
 8021c6c:	f409 69fc 	and.w	r9, r9, #2016	@ 0x7e0
 8021c70:	ea42 0209 	orr.w	r2, r2, r9
 8021c74:	430a      	orrs	r2, r1
 8021c76:	f820 2b02 	strh.w	r2, [r0], #2
 8021c7a:	e7ed      	b.n	8021c58 <_ZN8touchgfx8LCD16bpp21blitCopyARGB8888SolidEPKmRKNS_4RectES5_+0x8c>
 8021c7c:	8832      	ldrh	r2, [r6, #0]
 8021c7e:	1bd2      	subs	r2, r2, r7
 8021c80:	eb00 0042 	add.w	r0, r0, r2, lsl #1
 8021c84:	f9bd 2004 	ldrsh.w	r2, [sp, #4]
 8021c88:	1bd2      	subs	r2, r2, r7
 8021c8a:	eb04 0482 	add.w	r4, r4, r2, lsl #2
 8021c8e:	e7df      	b.n	8021c50 <_ZN8touchgfx8LCD16bpp21blitCopyARGB8888SolidEPKmRKNS_4RectES5_+0x84>
 8021c90:	6828      	ldr	r0, [r5, #0]
 8021c92:	6803      	ldr	r3, [r0, #0]
 8021c94:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8021c96:	4798      	blx	r3
 8021c98:	b005      	add	sp, #20
 8021c9a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8021c9e:	bf00      	nop
 8021ca0:	2400b880 	.word	0x2400b880
 8021ca4:	2400b87a 	.word	0x2400b87a
 8021ca8:	fffff800 	.word	0xfffff800

08021cac <_ZN8touchgfx8LCD16bpp14blitCopyRGB888EPKhRKNS_4RectES5_h>:
 8021cac:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8021cb0:	b08e      	sub	sp, #56	@ 0x38
 8021cb2:	460e      	mov	r6, r1
 8021cb4:	4604      	mov	r4, r0
 8021cb6:	461d      	mov	r5, r3
 8021cb8:	6808      	ldr	r0, [r1, #0]
 8021cba:	ab0a      	add	r3, sp, #40	@ 0x28
 8021cbc:	6849      	ldr	r1, [r1, #4]
 8021cbe:	f8df 81d4 	ldr.w	r8, [pc, #468]	@ 8021e94 <_ZN8touchgfx8LCD16bpp14blitCopyRGB888EPKhRKNS_4RectES5_h+0x1e8>
 8021cc2:	f8df 91d4 	ldr.w	r9, [pc, #468]	@ 8021e98 <_ZN8touchgfx8LCD16bpp14blitCopyRGB888EPKhRKNS_4RectES5_h+0x1ec>
 8021cc6:	c303      	stmia	r3!, {r0, r1}
 8021cc8:	6810      	ldr	r0, [r2, #0]
 8021cca:	ab0c      	add	r3, sp, #48	@ 0x30
 8021ccc:	6851      	ldr	r1, [r2, #4]
 8021cce:	c303      	stmia	r3!, {r0, r1}
 8021cd0:	a80a      	add	r0, sp, #40	@ 0x28
 8021cd2:	f7f9 fb01 	bl	801b2d8 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 8021cd6:	4631      	mov	r1, r6
 8021cd8:	a80c      	add	r0, sp, #48	@ 0x30
 8021cda:	f7f9 fb25 	bl	801b328 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
 8021cde:	f9bd 2030 	ldrsh.w	r2, [sp, #48]	@ 0x30
 8021ce2:	f9bd 3032 	ldrsh.w	r3, [sp, #50]	@ 0x32
 8021ce6:	f8bd 102c 	ldrh.w	r1, [sp, #44]	@ 0x2c
 8021cea:	f8d8 0000 	ldr.w	r0, [r8]
 8021cee:	fb11 2103 	smlabb	r1, r1, r3, r2
 8021cf2:	f9bd 7034 	ldrsh.w	r7, [sp, #52]	@ 0x34
 8021cf6:	f9bd 6036 	ldrsh.w	r6, [sp, #54]	@ 0x36
 8021cfa:	eb01 0141 	add.w	r1, r1, r1, lsl #1
 8021cfe:	440c      	add	r4, r1
 8021d00:	f8bd 1028 	ldrh.w	r1, [sp, #40]	@ 0x28
 8021d04:	440a      	add	r2, r1
 8021d06:	f8ad 2030 	strh.w	r2, [sp, #48]	@ 0x30
 8021d0a:	f8bd 202a 	ldrh.w	r2, [sp, #42]	@ 0x2a
 8021d0e:	4413      	add	r3, r2
 8021d10:	f8ad 3032 	strh.w	r3, [sp, #50]	@ 0x32
 8021d14:	6803      	ldr	r3, [r0, #0]
 8021d16:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8021d18:	4798      	blx	r3
 8021d1a:	2dff      	cmp	r5, #255	@ 0xff
 8021d1c:	d124      	bne.n	8021d68 <_ZN8touchgfx8LCD16bpp14blitCopyRGB888EPKhRKNS_4RectES5_h+0xbc>
 8021d1e:	f010 0f01 	tst.w	r0, #1
 8021d22:	f8d8 0000 	ldr.w	r0, [r8]
 8021d26:	d022      	beq.n	8021d6e <_ZN8touchgfx8LCD16bpp14blitCopyRGB888EPKhRKNS_4RectES5_h+0xc2>
 8021d28:	2100      	movs	r1, #0
 8021d2a:	f04f 0e01 	mov.w	lr, #1
 8021d2e:	f8d0 c000 	ldr.w	ip, [r0]
 8021d32:	b2b6      	uxth	r6, r6
 8021d34:	f8cd e018 	str.w	lr, [sp, #24]
 8021d38:	b2bf      	uxth	r7, r7
 8021d3a:	f8bd 3032 	ldrh.w	r3, [sp, #50]	@ 0x32
 8021d3e:	f8bd 2030 	ldrh.w	r2, [sp, #48]	@ 0x30
 8021d42:	e9cd 1107 	strd	r1, r1, [sp, #28]
 8021d46:	f8b9 e000 	ldrh.w	lr, [r9]
 8021d4a:	9503      	str	r5, [sp, #12]
 8021d4c:	9601      	str	r6, [sp, #4]
 8021d4e:	9700      	str	r7, [sp, #0]
 8021d50:	e9cd 1e04 	strd	r1, lr, [sp, #16]
 8021d54:	f8bd 102c 	ldrh.w	r1, [sp, #44]	@ 0x2c
 8021d58:	9102      	str	r1, [sp, #8]
 8021d5a:	4621      	mov	r1, r4
 8021d5c:	f8dc 5040 	ldr.w	r5, [ip, #64]	@ 0x40
 8021d60:	47a8      	blx	r5
 8021d62:	b00e      	add	sp, #56	@ 0x38
 8021d64:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8021d68:	f010 0f04 	tst.w	r0, #4
 8021d6c:	e7d9      	b.n	8021d22 <_ZN8touchgfx8LCD16bpp14blitCopyRGB888EPKhRKNS_4RectES5_h+0x76>
 8021d6e:	6803      	ldr	r3, [r0, #0]
 8021d70:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8021d72:	4798      	blx	r3
 8021d74:	f8b9 3000 	ldrh.w	r3, [r9]
 8021d78:	f9bd 2032 	ldrsh.w	r2, [sp, #50]	@ 0x32
 8021d7c:	ea4f 0e47 	mov.w	lr, r7, lsl #1
 8021d80:	f9bd 1030 	ldrsh.w	r1, [sp, #48]	@ 0x30
 8021d84:	435e      	muls	r6, r3
 8021d86:	f9bd c02c 	ldrsh.w	ip, [sp, #44]	@ 0x2c
 8021d8a:	2dff      	cmp	r5, #255	@ 0xff
 8021d8c:	fb03 1202 	mla	r2, r3, r2, r1
 8021d90:	ebac 0c07 	sub.w	ip, ip, r7
 8021d94:	eba3 0707 	sub.w	r7, r3, r7
 8021d98:	eb00 0042 	add.w	r0, r0, r2, lsl #1
 8021d9c:	eb0c 0c4c 	add.w	ip, ip, ip, lsl #1
 8021da0:	eb00 0646 	add.w	r6, r0, r6, lsl #1
 8021da4:	ea4f 0747 	mov.w	r7, r7, lsl #1
 8021da8:	d049      	beq.n	8021e3e <_ZN8touchgfx8LCD16bpp14blitCopyRGB888EPKhRKNS_4RectES5_h+0x192>
 8021daa:	43eb      	mvns	r3, r5
 8021dac:	fa1f f985 	uxth.w	r9, r5
 8021db0:	b2db      	uxtb	r3, r3
 8021db2:	42b0      	cmp	r0, r6
 8021db4:	d266      	bcs.n	8021e84 <_ZN8touchgfx8LCD16bpp14blitCopyRGB888EPKhRKNS_4RectES5_h+0x1d8>
 8021db6:	eb00 0a0e 	add.w	sl, r0, lr
 8021dba:	4550      	cmp	r0, sl
 8021dbc:	4621      	mov	r1, r4
 8021dbe:	f104 0403 	add.w	r4, r4, #3
 8021dc2:	d25b      	bcs.n	8021e7c <_ZN8touchgfx8LCD16bpp14blitCopyRGB888EPKhRKNS_4RectES5_h+0x1d0>
 8021dc4:	8802      	ldrh	r2, [r0, #0]
 8021dc6:	f814 1c01 	ldrb.w	r1, [r4, #-1]
 8021dca:	ea4f 2822 	mov.w	r8, r2, asr #8
 8021dce:	fb11 f109 	smulbb	r1, r1, r9
 8021dd2:	10d5      	asrs	r5, r2, #3
 8021dd4:	f008 08f8 	and.w	r8, r8, #248	@ 0xf8
 8021dd8:	00d2      	lsls	r2, r2, #3
 8021dda:	f005 05fc 	and.w	r5, r5, #252	@ 0xfc
 8021dde:	ea48 1858 	orr.w	r8, r8, r8, lsr #5
 8021de2:	ea45 1595 	orr.w	r5, r5, r5, lsr #6
 8021de6:	fb08 1803 	mla	r8, r8, r3, r1
 8021dea:	f814 1c02 	ldrb.w	r1, [r4, #-2]
 8021dee:	b2d2      	uxtb	r2, r2
 8021df0:	fb11 f109 	smulbb	r1, r1, r9
 8021df4:	fa1f f888 	uxth.w	r8, r8
 8021df8:	ea42 1252 	orr.w	r2, r2, r2, lsr #5
 8021dfc:	fb05 1503 	mla	r5, r5, r3, r1
 8021e00:	f814 1c03 	ldrb.w	r1, [r4, #-3]
 8021e04:	fb11 f109 	smulbb	r1, r1, r9
 8021e08:	b2ad      	uxth	r5, r5
 8021e0a:	fb02 1203 	mla	r2, r2, r3, r1
 8021e0e:	f108 0101 	add.w	r1, r8, #1
 8021e12:	b292      	uxth	r2, r2
 8021e14:	eb01 2818 	add.w	r8, r1, r8, lsr #8
 8021e18:	1c51      	adds	r1, r2, #1
 8021e1a:	f408 4878 	and.w	r8, r8, #63488	@ 0xf800
 8021e1e:	eb01 2212 	add.w	r2, r1, r2, lsr #8
 8021e22:	1c69      	adds	r1, r5, #1
 8021e24:	eb01 2515 	add.w	r5, r1, r5, lsr #8
 8021e28:	f3c2 22c4 	ubfx	r2, r2, #11, #5
 8021e2c:	096d      	lsrs	r5, r5, #5
 8021e2e:	ea42 0208 	orr.w	r2, r2, r8
 8021e32:	f405 65fc 	and.w	r5, r5, #2016	@ 0x7e0
 8021e36:	432a      	orrs	r2, r5
 8021e38:	f820 2b02 	strh.w	r2, [r0], #2
 8021e3c:	e7bd      	b.n	8021dba <_ZN8touchgfx8LCD16bpp14blitCopyRGB888EPKhRKNS_4RectES5_h+0x10e>
 8021e3e:	4a14      	ldr	r2, [pc, #80]	@ (8021e90 <_ZN8touchgfx8LCD16bpp14blitCopyRGB888EPKhRKNS_4RectES5_h+0x1e4>)
 8021e40:	42b0      	cmp	r0, r6
 8021e42:	d21f      	bcs.n	8021e84 <_ZN8touchgfx8LCD16bpp14blitCopyRGB888EPKhRKNS_4RectES5_h+0x1d8>
 8021e44:	eb00 050e 	add.w	r5, r0, lr
 8021e48:	42a8      	cmp	r0, r5
 8021e4a:	4621      	mov	r1, r4
 8021e4c:	f104 0403 	add.w	r4, r4, #3
 8021e50:	d210      	bcs.n	8021e74 <_ZN8touchgfx8LCD16bpp14blitCopyRGB888EPKhRKNS_4RectES5_h+0x1c8>
 8021e52:	f814 3c02 	ldrb.w	r3, [r4, #-2]
 8021e56:	f814 1c01 	ldrb.w	r1, [r4, #-1]
 8021e5a:	00db      	lsls	r3, r3, #3
 8021e5c:	ea02 2101 	and.w	r1, r2, r1, lsl #8
 8021e60:	f403 63fc 	and.w	r3, r3, #2016	@ 0x7e0
 8021e64:	430b      	orrs	r3, r1
 8021e66:	f814 1c03 	ldrb.w	r1, [r4, #-3]
 8021e6a:	ea43 03d1 	orr.w	r3, r3, r1, lsr #3
 8021e6e:	f820 3b02 	strh.w	r3, [r0], #2
 8021e72:	e7e9      	b.n	8021e48 <_ZN8touchgfx8LCD16bpp14blitCopyRGB888EPKhRKNS_4RectES5_h+0x19c>
 8021e74:	4438      	add	r0, r7
 8021e76:	eb01 040c 	add.w	r4, r1, ip
 8021e7a:	e7e1      	b.n	8021e40 <_ZN8touchgfx8LCD16bpp14blitCopyRGB888EPKhRKNS_4RectES5_h+0x194>
 8021e7c:	4438      	add	r0, r7
 8021e7e:	eb01 040c 	add.w	r4, r1, ip
 8021e82:	e796      	b.n	8021db2 <_ZN8touchgfx8LCD16bpp14blitCopyRGB888EPKhRKNS_4RectES5_h+0x106>
 8021e84:	4b03      	ldr	r3, [pc, #12]	@ (8021e94 <_ZN8touchgfx8LCD16bpp14blitCopyRGB888EPKhRKNS_4RectES5_h+0x1e8>)
 8021e86:	6818      	ldr	r0, [r3, #0]
 8021e88:	6803      	ldr	r3, [r0, #0]
 8021e8a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8021e8c:	4798      	blx	r3
 8021e8e:	e768      	b.n	8021d62 <_ZN8touchgfx8LCD16bpp14blitCopyRGB888EPKhRKNS_4RectES5_h+0xb6>
 8021e90:	fffff800 	.word	0xfffff800
 8021e94:	2400b880 	.word	0x2400b880
 8021e98:	2400b87a 	.word	0x2400b87a

08021e9c <_ZN8touchgfx8LCD16bpp8blitCopyEPKhNS_6Bitmap12BitmapFormatERKNS_4RectES7_hb>:
 8021e9c:	b570      	push	{r4, r5, r6, lr}
 8021e9e:	9c04      	ldr	r4, [sp, #16]
 8021ea0:	4605      	mov	r5, r0
 8021ea2:	f89d 6018 	ldrb.w	r6, [sp, #24]
 8021ea6:	4608      	mov	r0, r1
 8021ea8:	4619      	mov	r1, r3
 8021eaa:	f89d 3014 	ldrb.w	r3, [sp, #20]
 8021eae:	2a0d      	cmp	r2, #13
 8021eb0:	d825      	bhi.n	8021efe <_ZN8touchgfx8LCD16bpp8blitCopyEPKhNS_6Bitmap12BitmapFormatERKNS_4RectES7_hb+0x62>
 8021eb2:	e8df f002 	tbb	[pc, r2]
 8021eb6:	1807      	.short	0x1807
 8021eb8:	1d1d1d13 	.word	0x1d1d1d13
 8021ebc:	1d1d1d1d 	.word	0x1d1d1d1d
 8021ec0:	1d1d1d1d 	.word	0x1d1d1d1d
 8021ec4:	682a      	ldr	r2, [r5, #0]
 8021ec6:	e9cd 3604 	strd	r3, r6, [sp, #16]
 8021eca:	68d6      	ldr	r6, [r2, #12]
 8021ecc:	4623      	mov	r3, r4
 8021ece:	460a      	mov	r2, r1
 8021ed0:	4601      	mov	r1, r0
 8021ed2:	46b4      	mov	ip, r6
 8021ed4:	4628      	mov	r0, r5
 8021ed6:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8021eda:	4760      	bx	ip
 8021edc:	4622      	mov	r2, r4
 8021ede:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8021ee2:	f7ff bd8d 	b.w	8021a00 <_ZN8touchgfx8LCD16bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h>
 8021ee6:	4622      	mov	r2, r4
 8021ee8:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8021eec:	f7ff bede 	b.w	8021cac <_ZN8touchgfx8LCD16bpp14blitCopyRGB888EPKhRKNS_4RectES5_h>
 8021ef0:	4b03      	ldr	r3, [pc, #12]	@ (8021f00 <_ZN8touchgfx8LCD16bpp8blitCopyEPKhNS_6Bitmap12BitmapFormatERKNS_4RectES7_hb+0x64>)
 8021ef2:	f240 315d 	movw	r1, #861	@ 0x35d
 8021ef6:	4a03      	ldr	r2, [pc, #12]	@ (8021f04 <_ZN8touchgfx8LCD16bpp8blitCopyEPKhNS_6Bitmap12BitmapFormatERKNS_4RectES7_hb+0x68>)
 8021ef8:	4803      	ldr	r0, [pc, #12]	@ (8021f08 <_ZN8touchgfx8LCD16bpp8blitCopyEPKhNS_6Bitmap12BitmapFormatERKNS_4RectES7_hb+0x6c>)
 8021efa:	f008 fd1b 	bl	802a934 <__assert_func>
 8021efe:	bd70      	pop	{r4, r5, r6, pc}
 8021f00:	0802fae6 	.word	0x0802fae6
 8021f04:	08030246 	.word	0x08030246
 8021f08:	0802f9c1 	.word	0x0802f9c1

08021f0c <_ZN8touchgfx8LCD16bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h>:
 8021f0c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8021f10:	b093      	sub	sp, #76	@ 0x4c
 8021f12:	880e      	ldrh	r6, [r1, #0]
 8021f14:	4681      	mov	r9, r0
 8021f16:	4688      	mov	r8, r1
 8021f18:	4615      	mov	r5, r2
 8021f1a:	f89d a070 	ldrb.w	sl, [sp, #112]	@ 0x70
 8021f1e:	b136      	cbz	r6, 8021f2e <_ZN8touchgfx8LCD16bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x22>
 8021f20:	4b70      	ldr	r3, [pc, #448]	@ (80220e4 <_ZN8touchgfx8LCD16bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x1d8>)
 8021f22:	f44f 71c5 	mov.w	r1, #394	@ 0x18a
 8021f26:	4a70      	ldr	r2, [pc, #448]	@ (80220e8 <_ZN8touchgfx8LCD16bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x1dc>)
 8021f28:	4870      	ldr	r0, [pc, #448]	@ (80220ec <_ZN8touchgfx8LCD16bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x1e0>)
 8021f2a:	f008 fd03 	bl	802a934 <__assert_func>
 8021f2e:	6810      	ldr	r0, [r2, #0]
 8021f30:	ac0e      	add	r4, sp, #56	@ 0x38
 8021f32:	6851      	ldr	r1, [r2, #4]
 8021f34:	4f6e      	ldr	r7, [pc, #440]	@ (80220f0 <_ZN8touchgfx8LCD16bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x1e4>)
 8021f36:	f8df b1bc 	ldr.w	fp, [pc, #444]	@ 80220f4 <_ZN8touchgfx8LCD16bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x1e8>
 8021f3a:	c403      	stmia	r4!, {r0, r1}
 8021f3c:	6818      	ldr	r0, [r3, #0]
 8021f3e:	ac10      	add	r4, sp, #64	@ 0x40
 8021f40:	6859      	ldr	r1, [r3, #4]
 8021f42:	c403      	stmia	r4!, {r0, r1}
 8021f44:	a80e      	add	r0, sp, #56	@ 0x38
 8021f46:	f7f9 f9c7 	bl	801b2d8 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 8021f4a:	4629      	mov	r1, r5
 8021f4c:	a810      	add	r0, sp, #64	@ 0x40
 8021f4e:	f7f9 f9eb 	bl	801b328 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
 8021f52:	f9bd 2040 	ldrsh.w	r2, [sp, #64]	@ 0x40
 8021f56:	f9bd 3042 	ldrsh.w	r3, [sp, #66]	@ 0x42
 8021f5a:	f8bd 103c 	ldrh.w	r1, [sp, #60]	@ 0x3c
 8021f5e:	6838      	ldr	r0, [r7, #0]
 8021f60:	fb11 2103 	smlabb	r1, r1, r3, r2
 8021f64:	f9bd 4044 	ldrsh.w	r4, [sp, #68]	@ 0x44
 8021f68:	f9bd 5046 	ldrsh.w	r5, [sp, #70]	@ 0x46
 8021f6c:	4489      	add	r9, r1
 8021f6e:	f8bd 1038 	ldrh.w	r1, [sp, #56]	@ 0x38
 8021f72:	440a      	add	r2, r1
 8021f74:	f8ad 2040 	strh.w	r2, [sp, #64]	@ 0x40
 8021f78:	f8bd 203a 	ldrh.w	r2, [sp, #58]	@ 0x3a
 8021f7c:	4413      	add	r3, r2
 8021f7e:	f8ad 3042 	strh.w	r3, [sp, #66]	@ 0x42
 8021f82:	6803      	ldr	r3, [r0, #0]
 8021f84:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8021f86:	4798      	blx	r3
 8021f88:	f010 0f80 	tst.w	r0, #128	@ 0x80
 8021f8c:	6838      	ldr	r0, [r7, #0]
 8021f8e:	d01d      	beq.n	8021fcc <_ZN8touchgfx8LCD16bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0xc0>
 8021f90:	210b      	movs	r1, #11
 8021f92:	6802      	ldr	r2, [r0, #0]
 8021f94:	b2a4      	uxth	r4, r4
 8021f96:	f8bd 3040 	ldrh.w	r3, [sp, #64]	@ 0x40
 8021f9a:	9107      	str	r1, [sp, #28]
 8021f9c:	b2ad      	uxth	r5, r5
 8021f9e:	e9cd 6608 	strd	r6, r6, [sp, #32]
 8021fa2:	f8bb 1000 	ldrh.w	r1, [fp]
 8021fa6:	9502      	str	r5, [sp, #8]
 8021fa8:	9106      	str	r1, [sp, #24]
 8021faa:	2101      	movs	r1, #1
 8021fac:	9401      	str	r4, [sp, #4]
 8021fae:	e9cd a104 	strd	sl, r1, [sp, #16]
 8021fb2:	f8bd 103c 	ldrh.w	r1, [sp, #60]	@ 0x3c
 8021fb6:	9103      	str	r1, [sp, #12]
 8021fb8:	f8bd 1042 	ldrh.w	r1, [sp, #66]	@ 0x42
 8021fbc:	9100      	str	r1, [sp, #0]
 8021fbe:	4649      	mov	r1, r9
 8021fc0:	6bd4      	ldr	r4, [r2, #60]	@ 0x3c
 8021fc2:	4642      	mov	r2, r8
 8021fc4:	47a0      	blx	r4
 8021fc6:	b013      	add	sp, #76	@ 0x4c
 8021fc8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8021fcc:	6803      	ldr	r3, [r0, #0]
 8021fce:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8021fd0:	4798      	blx	r3
 8021fd2:	f8bb 3000 	ldrh.w	r3, [fp]
 8021fd6:	f9bd 2042 	ldrsh.w	r2, [sp, #66]	@ 0x42
 8021fda:	f04f 0e04 	mov.w	lr, #4
 8021fde:	f9bd 1040 	ldrsh.w	r1, [sp, #64]	@ 0x40
 8021fe2:	435d      	muls	r5, r3
 8021fe4:	fb03 1202 	mla	r2, r3, r2, r1
 8021fe8:	eb00 0042 	add.w	r0, r0, r2, lsl #1
 8021fec:	eb00 0245 	add.w	r2, r0, r5, lsl #1
 8021ff0:	920c      	str	r2, [sp, #48]	@ 0x30
 8021ff2:	f9bd 203c 	ldrsh.w	r2, [sp, #60]	@ 0x3c
 8021ff6:	1b12      	subs	r2, r2, r4
 8021ff8:	920d      	str	r2, [sp, #52]	@ 0x34
 8021ffa:	0062      	lsls	r2, r4, #1
 8021ffc:	1b1c      	subs	r4, r3, r4
 8021ffe:	920a      	str	r2, [sp, #40]	@ 0x28
 8022000:	0063      	lsls	r3, r4, #1
 8022002:	930b      	str	r3, [sp, #44]	@ 0x2c
 8022004:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8022006:	4298      	cmp	r0, r3
 8022008:	d266      	bcs.n	80220d8 <_ZN8touchgfx8LCD16bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x1cc>
 802200a:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 802200c:	eb00 0b03 	add.w	fp, r0, r3
 8022010:	4558      	cmp	r0, fp
 8022012:	d25c      	bcs.n	80220ce <_ZN8touchgfx8LCD16bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x1c2>
 8022014:	f819 3b01 	ldrb.w	r3, [r9], #1
 8022018:	fb1e e303 	smlabb	r3, lr, r3, lr
 802201c:	f858 2003 	ldr.w	r2, [r8, r3]
 8022020:	0e11      	lsrs	r1, r2, #24
 8022022:	d012      	beq.n	802204a <_ZN8touchgfx8LCD16bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x13e>
 8022024:	29ff      	cmp	r1, #255	@ 0xff
 8022026:	ea4f 2712 	mov.w	r7, r2, lsr #8
 802202a:	d110      	bne.n	802204e <_ZN8touchgfx8LCD16bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x142>
 802202c:	f1ba 0fff 	cmp.w	sl, #255	@ 0xff
 8022030:	d10d      	bne.n	802204e <_ZN8touchgfx8LCD16bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x142>
 8022032:	0953      	lsrs	r3, r2, #5
 8022034:	f427 67ff 	bic.w	r7, r7, #2040	@ 0x7f8
 8022038:	f3c2 02c4 	ubfx	r2, r2, #3, #5
 802203c:	f403 63fc 	and.w	r3, r3, #2016	@ 0x7e0
 8022040:	f027 0707 	bic.w	r7, r7, #7
 8022044:	431f      	orrs	r7, r3
 8022046:	433a      	orrs	r2, r7
 8022048:	8002      	strh	r2, [r0, #0]
 802204a:	3002      	adds	r0, #2
 802204c:	e7e0      	b.n	8022010 <_ZN8touchgfx8LCD16bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x104>
 802204e:	fb0a f101 	mul.w	r1, sl, r1
 8022052:	8806      	ldrh	r6, [r0, #0]
 8022054:	f3c2 4c07 	ubfx	ip, r2, #16, #8
 8022058:	b2d2      	uxtb	r2, r2
 802205a:	1c4b      	adds	r3, r1, #1
 802205c:	1235      	asrs	r5, r6, #8
 802205e:	10f4      	asrs	r4, r6, #3
 8022060:	eb03 2321 	add.w	r3, r3, r1, asr #8
 8022064:	f005 05f8 	and.w	r5, r5, #248	@ 0xf8
 8022068:	00f6      	lsls	r6, r6, #3
 802206a:	f004 04fc 	and.w	r4, r4, #252	@ 0xfc
 802206e:	121b      	asrs	r3, r3, #8
 8022070:	b2f6      	uxtb	r6, r6
 8022072:	b299      	uxth	r1, r3
 8022074:	43db      	mvns	r3, r3
 8022076:	ea45 1555 	orr.w	r5, r5, r5, lsr #5
 802207a:	fb1c fc01 	smulbb	ip, ip, r1
 802207e:	b2db      	uxtb	r3, r3
 8022080:	fb12 f201 	smulbb	r2, r2, r1
 8022084:	ea46 1656 	orr.w	r6, r6, r6, lsr #5
 8022088:	fb05 c503 	mla	r5, r5, r3, ip
 802208c:	b2ff      	uxtb	r7, r7
 802208e:	fb06 2203 	mla	r2, r6, r3, r2
 8022092:	ea44 1494 	orr.w	r4, r4, r4, lsr #6
 8022096:	fb17 f701 	smulbb	r7, r7, r1
 802209a:	b2ad      	uxth	r5, r5
 802209c:	b292      	uxth	r2, r2
 802209e:	fb04 7403 	mla	r4, r4, r3, r7
 80220a2:	f105 0c01 	add.w	ip, r5, #1
 80220a6:	1c57      	adds	r7, r2, #1
 80220a8:	eb0c 2515 	add.w	r5, ip, r5, lsr #8
 80220ac:	eb07 2712 	add.w	r7, r7, r2, lsr #8
 80220b0:	b2a4      	uxth	r4, r4
 80220b2:	f405 4578 	and.w	r5, r5, #63488	@ 0xf800
 80220b6:	f3c7 27c4 	ubfx	r7, r7, #11, #5
 80220ba:	433d      	orrs	r5, r7
 80220bc:	1c67      	adds	r7, r4, #1
 80220be:	eb07 2414 	add.w	r4, r7, r4, lsr #8
 80220c2:	0964      	lsrs	r4, r4, #5
 80220c4:	f404 64fc 	and.w	r4, r4, #2016	@ 0x7e0
 80220c8:	4325      	orrs	r5, r4
 80220ca:	8005      	strh	r5, [r0, #0]
 80220cc:	e7bd      	b.n	802204a <_ZN8touchgfx8LCD16bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x13e>
 80220ce:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80220d0:	4418      	add	r0, r3
 80220d2:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 80220d4:	4499      	add	r9, r3
 80220d6:	e795      	b.n	8022004 <_ZN8touchgfx8LCD16bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0xf8>
 80220d8:	4b05      	ldr	r3, [pc, #20]	@ (80220f0 <_ZN8touchgfx8LCD16bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x1e4>)
 80220da:	6818      	ldr	r0, [r3, #0]
 80220dc:	6803      	ldr	r3, [r0, #0]
 80220de:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80220e0:	4798      	blx	r3
 80220e2:	e770      	b.n	8021fc6 <_ZN8touchgfx8LCD16bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0xba>
 80220e4:	0802f8bf 	.word	0x0802f8bf
 80220e8:	08030017 	.word	0x08030017
 80220ec:	0802f9c1 	.word	0x0802f9c1
 80220f0:	2400b880 	.word	0x2400b880
 80220f4:	2400b87a 	.word	0x2400b87a

080220f8 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB565EPKhS2_RKNS_4RectES5_h>:
 80220f8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80220fc:	4614      	mov	r4, r2
 80220fe:	880a      	ldrh	r2, [r1, #0]
 8022100:	b087      	sub	sp, #28
 8022102:	4680      	mov	r8, r0
 8022104:	2a02      	cmp	r2, #2
 8022106:	460d      	mov	r5, r1
 8022108:	f89d 6040 	ldrb.w	r6, [sp, #64]	@ 0x40
 802210c:	d006      	beq.n	802211c <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB565EPKhS2_RKNS_4RectES5_h+0x24>
 802210e:	4b63      	ldr	r3, [pc, #396]	@ (802229c <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB565EPKhS2_RKNS_4RectES5_h+0x1a4>)
 8022110:	f240 11e1 	movw	r1, #481	@ 0x1e1
 8022114:	4a62      	ldr	r2, [pc, #392]	@ (80222a0 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB565EPKhS2_RKNS_4RectES5_h+0x1a8>)
 8022116:	4863      	ldr	r0, [pc, #396]	@ (80222a4 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB565EPKhS2_RKNS_4RectES5_h+0x1ac>)
 8022118:	f008 fc0c 	bl	802a934 <__assert_func>
 802211c:	2e00      	cmp	r6, #0
 802211e:	f000 80b9 	beq.w	8022294 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB565EPKhS2_RKNS_4RectES5_h+0x19c>
 8022122:	6820      	ldr	r0, [r4, #0]
 8022124:	af02      	add	r7, sp, #8
 8022126:	6861      	ldr	r1, [r4, #4]
 8022128:	c703      	stmia	r7!, {r0, r1}
 802212a:	6818      	ldr	r0, [r3, #0]
 802212c:	af04      	add	r7, sp, #16
 802212e:	6859      	ldr	r1, [r3, #4]
 8022130:	c703      	stmia	r7!, {r0, r1}
 8022132:	a802      	add	r0, sp, #8
 8022134:	f7f9 f8d0 	bl	801b2d8 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 8022138:	4621      	mov	r1, r4
 802213a:	a804      	add	r0, sp, #16
 802213c:	f7f9 f8f4 	bl	801b328 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
 8022140:	f9bd 2010 	ldrsh.w	r2, [sp, #16]
 8022144:	f9bd 3012 	ldrsh.w	r3, [sp, #18]
 8022148:	f8bd 400c 	ldrh.w	r4, [sp, #12]
 802214c:	f9bd 7016 	ldrsh.w	r7, [sp, #22]
 8022150:	fb14 2103 	smlabb	r1, r4, r3, r2
 8022154:	eb08 0401 	add.w	r4, r8, r1
 8022158:	f8bd 1008 	ldrh.w	r1, [sp, #8]
 802215c:	f9bd 8014 	ldrsh.w	r8, [sp, #20]
 8022160:	440a      	add	r2, r1
 8022162:	ea4f 0a48 	mov.w	sl, r8, lsl #1
 8022166:	f8ad 2010 	strh.w	r2, [sp, #16]
 802216a:	f8bd 200a 	ldrh.w	r2, [sp, #10]
 802216e:	4413      	add	r3, r2
 8022170:	f8ad 3012 	strh.w	r3, [sp, #18]
 8022174:	4b4c      	ldr	r3, [pc, #304]	@ (80222a8 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB565EPKhS2_RKNS_4RectES5_h+0x1b0>)
 8022176:	6818      	ldr	r0, [r3, #0]
 8022178:	6803      	ldr	r3, [r0, #0]
 802217a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 802217c:	4798      	blx	r3
 802217e:	4b4b      	ldr	r3, [pc, #300]	@ (80222ac <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB565EPKhS2_RKNS_4RectES5_h+0x1b4>)
 8022180:	f9bd 1012 	ldrsh.w	r1, [sp, #18]
 8022184:	2eff      	cmp	r6, #255	@ 0xff
 8022186:	881a      	ldrh	r2, [r3, #0]
 8022188:	f9bd c010 	ldrsh.w	ip, [sp, #16]
 802218c:	fb02 c101 	mla	r1, r2, r1, ip
 8022190:	fb02 f207 	mul.w	r2, r2, r7
 8022194:	eb00 0041 	add.w	r0, r0, r1, lsl #1
 8022198:	f105 0104 	add.w	r1, r5, #4
 802219c:	461d      	mov	r5, r3
 802219e:	d05a      	beq.n	8022256 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB565EPKhS2_RKNS_4RectES5_h+0x15e>
 80221a0:	f1c6 0eff 	rsb	lr, r6, #255	@ 0xff
 80221a4:	eb00 0242 	add.w	r2, r0, r2, lsl #1
 80221a8:	b2b6      	uxth	r6, r6
 80221aa:	9301      	str	r3, [sp, #4]
 80221ac:	fa1f fe8e 	uxth.w	lr, lr
 80221b0:	4282      	cmp	r2, r0
 80221b2:	d96a      	bls.n	802228a <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB565EPKhS2_RKNS_4RectES5_h+0x192>
 80221b4:	eb00 0b0a 	add.w	fp, r0, sl
 80221b8:	4583      	cmp	fp, r0
 80221ba:	d940      	bls.n	802223e <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB565EPKhS2_RKNS_4RectES5_h+0x146>
 80221bc:	8805      	ldrh	r5, [r0, #0]
 80221be:	f814 3b01 	ldrb.w	r3, [r4], #1
 80221c2:	122f      	asrs	r7, r5, #8
 80221c4:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 80221c8:	ea4f 09e5 	mov.w	r9, r5, asr #3
 80221cc:	f007 07f8 	and.w	r7, r7, #248	@ 0xf8
 80221d0:	00ed      	lsls	r5, r5, #3
 80221d2:	ea4f 2c23 	mov.w	ip, r3, asr #8
 80221d6:	f009 09fc 	and.w	r9, r9, #252	@ 0xfc
 80221da:	fb17 f70e 	smulbb	r7, r7, lr
 80221de:	b2ed      	uxtb	r5, r5
 80221e0:	fb19 f90e 	smulbb	r9, r9, lr
 80221e4:	f00c 0cf8 	and.w	ip, ip, #248	@ 0xf8
 80221e8:	fb15 f50e 	smulbb	r5, r5, lr
 80221ec:	fb0c 7c06 	mla	ip, ip, r6, r7
 80221f0:	10df      	asrs	r7, r3, #3
 80221f2:	00db      	lsls	r3, r3, #3
 80221f4:	fa1f fc8c 	uxth.w	ip, ip
 80221f8:	f007 07fc 	and.w	r7, r7, #252	@ 0xfc
 80221fc:	b2db      	uxtb	r3, r3
 80221fe:	fb07 9706 	mla	r7, r7, r6, r9
 8022202:	f10c 0901 	add.w	r9, ip, #1
 8022206:	fb03 5306 	mla	r3, r3, r6, r5
 802220a:	eb09 2c1c 	add.w	ip, r9, ip, lsr #8
 802220e:	b29b      	uxth	r3, r3
 8022210:	f40c 4978 	and.w	r9, ip, #63488	@ 0xf800
 8022214:	b2bf      	uxth	r7, r7
 8022216:	f103 0c01 	add.w	ip, r3, #1
 802221a:	eb0c 2c13 	add.w	ip, ip, r3, lsr #8
 802221e:	f3cc 2cc4 	ubfx	ip, ip, #11, #5
 8022222:	ea4c 0c09 	orr.w	ip, ip, r9
 8022226:	f107 0901 	add.w	r9, r7, #1
 802222a:	eb09 2717 	add.w	r7, r9, r7, lsr #8
 802222e:	097f      	lsrs	r7, r7, #5
 8022230:	f407 67fc 	and.w	r7, r7, #2016	@ 0x7e0
 8022234:	ea4c 0c07 	orr.w	ip, ip, r7
 8022238:	f820 cb02 	strh.w	ip, [r0], #2
 802223c:	e7bc      	b.n	80221b8 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB565EPKhS2_RKNS_4RectES5_h+0xc0>
 802223e:	9b01      	ldr	r3, [sp, #4]
 8022240:	881b      	ldrh	r3, [r3, #0]
 8022242:	eba3 0308 	sub.w	r3, r3, r8
 8022246:	eb00 0043 	add.w	r0, r0, r3, lsl #1
 802224a:	f9bd 300c 	ldrsh.w	r3, [sp, #12]
 802224e:	eba3 0308 	sub.w	r3, r3, r8
 8022252:	441c      	add	r4, r3
 8022254:	e7ac      	b.n	80221b0 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB565EPKhS2_RKNS_4RectES5_h+0xb8>
 8022256:	eb00 0242 	add.w	r2, r0, r2, lsl #1
 802225a:	4282      	cmp	r2, r0
 802225c:	d915      	bls.n	802228a <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB565EPKhS2_RKNS_4RectES5_h+0x192>
 802225e:	eb00 060a 	add.w	r6, r0, sl
 8022262:	4286      	cmp	r6, r0
 8022264:	d906      	bls.n	8022274 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB565EPKhS2_RKNS_4RectES5_h+0x17c>
 8022266:	f814 3b01 	ldrb.w	r3, [r4], #1
 802226a:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 802226e:	f820 3b02 	strh.w	r3, [r0], #2
 8022272:	e7f6      	b.n	8022262 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB565EPKhS2_RKNS_4RectES5_h+0x16a>
 8022274:	882b      	ldrh	r3, [r5, #0]
 8022276:	eba3 0308 	sub.w	r3, r3, r8
 802227a:	eb00 0043 	add.w	r0, r0, r3, lsl #1
 802227e:	f9bd 300c 	ldrsh.w	r3, [sp, #12]
 8022282:	eba3 0308 	sub.w	r3, r3, r8
 8022286:	441c      	add	r4, r3
 8022288:	e7e7      	b.n	802225a <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB565EPKhS2_RKNS_4RectES5_h+0x162>
 802228a:	4b07      	ldr	r3, [pc, #28]	@ (80222a8 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB565EPKhS2_RKNS_4RectES5_h+0x1b0>)
 802228c:	6818      	ldr	r0, [r3, #0]
 802228e:	6803      	ldr	r3, [r0, #0]
 8022290:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8022292:	4798      	blx	r3
 8022294:	b007      	add	sp, #28
 8022296:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 802229a:	bf00      	nop
 802229c:	0802f7ef 	.word	0x0802f7ef
 80222a0:	0802fe81 	.word	0x0802fe81
 80222a4:	0802f9c1 	.word	0x0802f9c1
 80222a8:	2400b880 	.word	0x2400b880
 80222ac:	2400b87a 	.word	0x2400b87a

080222b0 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h>:
 80222b0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80222b4:	f8b1 9000 	ldrh.w	r9, [r1]
 80222b8:	b091      	sub	sp, #68	@ 0x44
 80222ba:	4604      	mov	r4, r0
 80222bc:	460f      	mov	r7, r1
 80222be:	f1b9 0f01 	cmp.w	r9, #1
 80222c2:	4690      	mov	r8, r2
 80222c4:	f89d 5068 	ldrb.w	r5, [sp, #104]	@ 0x68
 80222c8:	d006      	beq.n	80222d8 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x28>
 80222ca:	4b84      	ldr	r3, [pc, #528]	@ (80224dc <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x22c>)
 80222cc:	f240 212f 	movw	r1, #559	@ 0x22f
 80222d0:	4a83      	ldr	r2, [pc, #524]	@ (80224e0 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x230>)
 80222d2:	4884      	ldr	r0, [pc, #528]	@ (80224e4 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x234>)
 80222d4:	f008 fb2e 	bl	802a934 <__assert_func>
 80222d8:	2d00      	cmp	r5, #0
 80222da:	d04f      	beq.n	802237c <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0xcc>
 80222dc:	6810      	ldr	r0, [r2, #0]
 80222de:	ae0c      	add	r6, sp, #48	@ 0x30
 80222e0:	6851      	ldr	r1, [r2, #4]
 80222e2:	f8df b208 	ldr.w	fp, [pc, #520]	@ 80224ec <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x23c>
 80222e6:	c603      	stmia	r6!, {r0, r1}
 80222e8:	6818      	ldr	r0, [r3, #0]
 80222ea:	ae0e      	add	r6, sp, #56	@ 0x38
 80222ec:	6859      	ldr	r1, [r3, #4]
 80222ee:	c603      	stmia	r6!, {r0, r1}
 80222f0:	a80c      	add	r0, sp, #48	@ 0x30
 80222f2:	f7f8 fff1 	bl	801b2d8 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 80222f6:	4641      	mov	r1, r8
 80222f8:	a80e      	add	r0, sp, #56	@ 0x38
 80222fa:	f8df 81f4 	ldr.w	r8, [pc, #500]	@ 80224f0 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x240>
 80222fe:	f7f9 f813 	bl	801b328 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
 8022302:	f9bd 2038 	ldrsh.w	r2, [sp, #56]	@ 0x38
 8022306:	f9bd 303a 	ldrsh.w	r3, [sp, #58]	@ 0x3a
 802230a:	f8bd 1034 	ldrh.w	r1, [sp, #52]	@ 0x34
 802230e:	f8db 0000 	ldr.w	r0, [fp]
 8022312:	fb11 2103 	smlabb	r1, r1, r3, r2
 8022316:	f9bd 603c 	ldrsh.w	r6, [sp, #60]	@ 0x3c
 802231a:	f9bd a03e 	ldrsh.w	sl, [sp, #62]	@ 0x3e
 802231e:	440c      	add	r4, r1
 8022320:	f8bd 1030 	ldrh.w	r1, [sp, #48]	@ 0x30
 8022324:	440a      	add	r2, r1
 8022326:	f8ad 2038 	strh.w	r2, [sp, #56]	@ 0x38
 802232a:	f8bd 2032 	ldrh.w	r2, [sp, #50]	@ 0x32
 802232e:	4413      	add	r3, r2
 8022330:	f8ad 303a 	strh.w	r3, [sp, #58]	@ 0x3a
 8022334:	6803      	ldr	r3, [r0, #0]
 8022336:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8022338:	4798      	blx	r3
 802233a:	f010 0f80 	tst.w	r0, #128	@ 0x80
 802233e:	f8db 0000 	ldr.w	r0, [fp]
 8022342:	d01e      	beq.n	8022382 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0xd2>
 8022344:	2200      	movs	r2, #0
 8022346:	6801      	ldr	r1, [r0, #0]
 8022348:	b2b6      	uxth	r6, r6
 802234a:	f8bd 3038 	ldrh.w	r3, [sp, #56]	@ 0x38
 802234e:	e9cd 2208 	strd	r2, r2, [sp, #32]
 8022352:	220b      	movs	r2, #11
 8022354:	9207      	str	r2, [sp, #28]
 8022356:	f8b8 2000 	ldrh.w	r2, [r8]
 802235a:	9504      	str	r5, [sp, #16]
 802235c:	9601      	str	r6, [sp, #4]
 802235e:	e9cd 9205 	strd	r9, r2, [sp, #20]
 8022362:	f8bd 2034 	ldrh.w	r2, [sp, #52]	@ 0x34
 8022366:	9203      	str	r2, [sp, #12]
 8022368:	fa1f f28a 	uxth.w	r2, sl
 802236c:	9202      	str	r2, [sp, #8]
 802236e:	f8bd 203a 	ldrh.w	r2, [sp, #58]	@ 0x3a
 8022372:	9200      	str	r2, [sp, #0]
 8022374:	463a      	mov	r2, r7
 8022376:	6bcd      	ldr	r5, [r1, #60]	@ 0x3c
 8022378:	4621      	mov	r1, r4
 802237a:	47a8      	blx	r5
 802237c:	b011      	add	sp, #68	@ 0x44
 802237e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8022382:	6803      	ldr	r3, [r0, #0]
 8022384:	ea4f 0946 	mov.w	r9, r6, lsl #1
 8022388:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 802238a:	4798      	blx	r3
 802238c:	f8b8 2000 	ldrh.w	r2, [r8]
 8022390:	f9bd 303a 	ldrsh.w	r3, [sp, #58]	@ 0x3a
 8022394:	2dff      	cmp	r5, #255	@ 0xff
 8022396:	f9bd 1038 	ldrsh.w	r1, [sp, #56]	@ 0x38
 802239a:	fb0a fa02 	mul.w	sl, sl, r2
 802239e:	fb02 1303 	mla	r3, r2, r3, r1
 80223a2:	eb00 0043 	add.w	r0, r0, r3, lsl #1
 80223a6:	d062      	beq.n	802246e <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x1be>
 80223a8:	ea6f 0c05 	mvn.w	ip, r5
 80223ac:	eb00 034a 	add.w	r3, r0, sl, lsl #1
 80223b0:	b2ad      	uxth	r5, r5
 80223b2:	f8cd 802c 	str.w	r8, [sp, #44]	@ 0x2c
 80223b6:	fa5f fc8c 	uxtb.w	ip, ip
 80223ba:	930a      	str	r3, [sp, #40]	@ 0x28
 80223bc:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80223be:	4298      	cmp	r0, r3
 80223c0:	f080 8085 	bcs.w	80224ce <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x21e>
 80223c4:	eb00 0b09 	add.w	fp, r0, r9
 80223c8:	4558      	cmp	r0, fp
 80223ca:	d246      	bcs.n	802245a <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x1aa>
 80223cc:	f814 eb01 	ldrb.w	lr, [r4], #1
 80223d0:	2303      	movs	r3, #3
 80223d2:	2204      	movs	r2, #4
 80223d4:	fb13 2e0e 	smlabb	lr, r3, lr, r2
 80223d8:	8803      	ldrh	r3, [r0, #0]
 80223da:	eb07 0a0e 	add.w	sl, r7, lr
 80223de:	1219      	asrs	r1, r3, #8
 80223e0:	10da      	asrs	r2, r3, #3
 80223e2:	f817 e00e 	ldrb.w	lr, [r7, lr]
 80223e6:	f89a 8002 	ldrb.w	r8, [sl, #2]
 80223ea:	f001 01f8 	and.w	r1, r1, #248	@ 0xf8
 80223ee:	00db      	lsls	r3, r3, #3
 80223f0:	f002 02fc 	and.w	r2, r2, #252	@ 0xfc
 80223f4:	fb18 f805 	smulbb	r8, r8, r5
 80223f8:	ea41 1151 	orr.w	r1, r1, r1, lsr #5
 80223fc:	fb1e fe05 	smulbb	lr, lr, r5
 8022400:	b2db      	uxtb	r3, r3
 8022402:	fb01 810c 	mla	r1, r1, ip, r8
 8022406:	f89a 8001 	ldrb.w	r8, [sl, #1]
 802240a:	ea42 1292 	orr.w	r2, r2, r2, lsr #6
 802240e:	fb18 f805 	smulbb	r8, r8, r5
 8022412:	ea43 1353 	orr.w	r3, r3, r3, lsr #5
 8022416:	b289      	uxth	r1, r1
 8022418:	fb02 820c 	mla	r2, r2, ip, r8
 802241c:	fb03 e30c 	mla	r3, r3, ip, lr
 8022420:	f101 0801 	add.w	r8, r1, #1
 8022424:	b292      	uxth	r2, r2
 8022426:	b29b      	uxth	r3, r3
 8022428:	eb08 2111 	add.w	r1, r8, r1, lsr #8
 802242c:	f102 0801 	add.w	r8, r2, #1
 8022430:	f103 0e01 	add.w	lr, r3, #1
 8022434:	eb08 2812 	add.w	r8, r8, r2, lsr #8
 8022438:	f401 4178 	and.w	r1, r1, #63488	@ 0xf800
 802243c:	eb0e 2e13 	add.w	lr, lr, r3, lsr #8
 8022440:	ea4f 1858 	mov.w	r8, r8, lsr #5
 8022444:	f3ce 2ec4 	ubfx	lr, lr, #11, #5
 8022448:	f408 68fc 	and.w	r8, r8, #2016	@ 0x7e0
 802244c:	ea4e 0101 	orr.w	r1, lr, r1
 8022450:	ea41 0108 	orr.w	r1, r1, r8
 8022454:	f820 1b02 	strh.w	r1, [r0], #2
 8022458:	e7b6      	b.n	80223c8 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x118>
 802245a:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 802245c:	881b      	ldrh	r3, [r3, #0]
 802245e:	1b9b      	subs	r3, r3, r6
 8022460:	eb00 0043 	add.w	r0, r0, r3, lsl #1
 8022464:	f9bd 3034 	ldrsh.w	r3, [sp, #52]	@ 0x34
 8022468:	1b9b      	subs	r3, r3, r6
 802246a:	441c      	add	r4, r3
 802246c:	e7a6      	b.n	80223bc <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x10c>
 802246e:	eb00 0a4a 	add.w	sl, r0, sl, lsl #1
 8022472:	2203      	movs	r2, #3
 8022474:	2504      	movs	r5, #4
 8022476:	491c      	ldr	r1, [pc, #112]	@ (80224e8 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x238>)
 8022478:	4550      	cmp	r0, sl
 802247a:	d228      	bcs.n	80224ce <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x21e>
 802247c:	eb00 0c09 	add.w	ip, r0, r9
 8022480:	4560      	cmp	r0, ip
 8022482:	4623      	mov	r3, r4
 8022484:	d219      	bcs.n	80224ba <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x20a>
 8022486:	f893 e000 	ldrb.w	lr, [r3]
 802248a:	3401      	adds	r4, #1
 802248c:	fb12 5e0e 	smlabb	lr, r2, lr, r5
 8022490:	eb07 0b0e 	add.w	fp, r7, lr
 8022494:	f817 e00e 	ldrb.w	lr, [r7, lr]
 8022498:	f89b 3002 	ldrb.w	r3, [fp, #2]
 802249c:	f89b b001 	ldrb.w	fp, [fp, #1]
 80224a0:	ea01 2303 	and.w	r3, r1, r3, lsl #8
 80224a4:	ea4f 0bcb 	mov.w	fp, fp, lsl #3
 80224a8:	f40b 6bfc 	and.w	fp, fp, #2016	@ 0x7e0
 80224ac:	ea43 030b 	orr.w	r3, r3, fp
 80224b0:	ea43 03de 	orr.w	r3, r3, lr, lsr #3
 80224b4:	f820 3b02 	strh.w	r3, [r0], #2
 80224b8:	e7e2      	b.n	8022480 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x1d0>
 80224ba:	f8b8 3000 	ldrh.w	r3, [r8]
 80224be:	1b9b      	subs	r3, r3, r6
 80224c0:	eb00 0043 	add.w	r0, r0, r3, lsl #1
 80224c4:	f9bd 3034 	ldrsh.w	r3, [sp, #52]	@ 0x34
 80224c8:	1b9b      	subs	r3, r3, r6
 80224ca:	441c      	add	r4, r3
 80224cc:	e7d4      	b.n	8022478 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x1c8>
 80224ce:	4b07      	ldr	r3, [pc, #28]	@ (80224ec <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x23c>)
 80224d0:	6818      	ldr	r0, [r3, #0]
 80224d2:	6803      	ldr	r3, [r0, #0]
 80224d4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80224d6:	4798      	blx	r3
 80224d8:	e750      	b.n	802237c <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0xcc>
 80224da:	bf00      	nop
 80224dc:	0802f83d 	.word	0x0802f83d
 80224e0:	0802ff0a 	.word	0x0802ff0a
 80224e4:	0802f9c1 	.word	0x0802f9c1
 80224e8:	fffff800 	.word	0xfffff800
 80224ec:	2400b880 	.word	0x2400b880
 80224f0:	2400b87a 	.word	0x2400b87a

080224f4 <_ZN8touchgfx8LCD16bpp10blitCopyL8EPKhS2_RKNS_4RectES5_h>:
 80224f4:	b430      	push	{r4, r5}
 80224f6:	780d      	ldrb	r5, [r1, #0]
 80224f8:	f89d 4008 	ldrb.w	r4, [sp, #8]
 80224fc:	2d01      	cmp	r5, #1
 80224fe:	d00a      	beq.n	8022516 <_ZN8touchgfx8LCD16bpp10blitCopyL8EPKhS2_RKNS_4RectES5_h+0x22>
 8022500:	d305      	bcc.n	802250e <_ZN8touchgfx8LCD16bpp10blitCopyL8EPKhS2_RKNS_4RectES5_h+0x1a>
 8022502:	2d02      	cmp	r5, #2
 8022504:	d10b      	bne.n	802251e <_ZN8touchgfx8LCD16bpp10blitCopyL8EPKhS2_RKNS_4RectES5_h+0x2a>
 8022506:	9402      	str	r4, [sp, #8]
 8022508:	bc30      	pop	{r4, r5}
 802250a:	f7ff bdf5 	b.w	80220f8 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB565EPKhS2_RKNS_4RectES5_h>
 802250e:	9402      	str	r4, [sp, #8]
 8022510:	bc30      	pop	{r4, r5}
 8022512:	f7ff bcfb 	b.w	8021f0c <_ZN8touchgfx8LCD16bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h>
 8022516:	9402      	str	r4, [sp, #8]
 8022518:	bc30      	pop	{r4, r5}
 802251a:	f7ff bec9 	b.w	80222b0 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h>
 802251e:	bc30      	pop	{r4, r5}
 8022520:	4770      	bx	lr
	...

08022524 <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h>:
 8022524:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8022528:	b087      	sub	sp, #28
 802252a:	4604      	mov	r4, r0
 802252c:	460e      	mov	r6, r1
 802252e:	6810      	ldr	r0, [r2, #0]
 8022530:	6851      	ldr	r1, [r2, #4]
 8022532:	ad02      	add	r5, sp, #8
 8022534:	4617      	mov	r7, r2
 8022536:	f89d a040 	ldrb.w	sl, [sp, #64]	@ 0x40
 802253a:	f8df 9230 	ldr.w	r9, [pc, #560]	@ 802276c <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h+0x248>
 802253e:	c503      	stmia	r5!, {r0, r1}
 8022540:	6818      	ldr	r0, [r3, #0]
 8022542:	ad04      	add	r5, sp, #16
 8022544:	6859      	ldr	r1, [r3, #4]
 8022546:	c503      	stmia	r5!, {r0, r1}
 8022548:	a802      	add	r0, sp, #8
 802254a:	f7f8 fec5 	bl	801b2d8 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 802254e:	4639      	mov	r1, r7
 8022550:	a804      	add	r0, sp, #16
 8022552:	f7f8 fee9 	bl	801b328 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
 8022556:	f9bd 2010 	ldrsh.w	r2, [sp, #16]
 802255a:	f9bd 3012 	ldrsh.w	r3, [sp, #18]
 802255e:	f8bd 100c 	ldrh.w	r1, [sp, #12]
 8022562:	f9bd 8014 	ldrsh.w	r8, [sp, #20]
 8022566:	fb11 2103 	smlabb	r1, r1, r3, r2
 802256a:	f9bd 5016 	ldrsh.w	r5, [sp, #22]
 802256e:	eb04 0441 	add.w	r4, r4, r1, lsl #1
 8022572:	440e      	add	r6, r1
 8022574:	f8bd 1008 	ldrh.w	r1, [sp, #8]
 8022578:	440a      	add	r2, r1
 802257a:	f8ad 2010 	strh.w	r2, [sp, #16]
 802257e:	f8bd 200a 	ldrh.w	r2, [sp, #10]
 8022582:	4413      	add	r3, r2
 8022584:	f8ad 3012 	strh.w	r3, [sp, #18]
 8022588:	4b77      	ldr	r3, [pc, #476]	@ (8022768 <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h+0x244>)
 802258a:	6818      	ldr	r0, [r3, #0]
 802258c:	6803      	ldr	r3, [r0, #0]
 802258e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8022590:	4798      	blx	r3
 8022592:	f8b9 b000 	ldrh.w	fp, [r9]
 8022596:	f9bd 3012 	ldrsh.w	r3, [sp, #18]
 802259a:	f1ba 0fff 	cmp.w	sl, #255	@ 0xff
 802259e:	f9bd 2010 	ldrsh.w	r2, [sp, #16]
 80225a2:	fb05 f50b 	mul.w	r5, r5, fp
 80225a6:	fb0b 2303 	mla	r3, fp, r3, r2
 80225aa:	eb00 0043 	add.w	r0, r0, r3, lsl #1
 80225ae:	ea4f 0348 	mov.w	r3, r8, lsl #1
 80225b2:	9300      	str	r3, [sp, #0]
 80225b4:	d069      	beq.n	802268a <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h+0x166>
 80225b6:	eb00 0b45 	add.w	fp, r0, r5, lsl #1
 80225ba:	4558      	cmp	r0, fp
 80225bc:	f080 80cc 	bcs.w	8022758 <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h+0x234>
 80225c0:	9b00      	ldr	r3, [sp, #0]
 80225c2:	4631      	mov	r1, r6
 80225c4:	18c3      	adds	r3, r0, r3
 80225c6:	9301      	str	r3, [sp, #4]
 80225c8:	9b01      	ldr	r3, [sp, #4]
 80225ca:	4298      	cmp	r0, r3
 80225cc:	d24f      	bcs.n	802266e <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h+0x14a>
 80225ce:	f811 2b01 	ldrb.w	r2, [r1], #1
 80225d2:	2a00      	cmp	r2, #0
 80225d4:	d048      	beq.n	8022668 <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h+0x144>
 80225d6:	fb0a f202 	mul.w	r2, sl, r2
 80225da:	1c53      	adds	r3, r2, #1
 80225dc:	eb03 2312 	add.w	r3, r3, r2, lsr #8
 80225e0:	121b      	asrs	r3, r3, #8
 80225e2:	d041      	beq.n	8022668 <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h+0x144>
 80225e4:	8802      	ldrh	r2, [r0, #0]
 80225e6:	b29e      	uxth	r6, r3
 80225e8:	f8b4 c000 	ldrh.w	ip, [r4]
 80225ec:	43db      	mvns	r3, r3
 80225ee:	1215      	asrs	r5, r2, #8
 80225f0:	b2db      	uxtb	r3, r3
 80225f2:	ea4f 272c 	mov.w	r7, ip, asr #8
 80225f6:	f005 05f8 	and.w	r5, r5, #248	@ 0xf8
 80225fa:	ea4f 0ee2 	mov.w	lr, r2, asr #3
 80225fe:	fb15 f503 	smulbb	r5, r5, r3
 8022602:	f007 07f8 	and.w	r7, r7, #248	@ 0xf8
 8022606:	00d2      	lsls	r2, r2, #3
 8022608:	f00e 0efc 	and.w	lr, lr, #252	@ 0xfc
 802260c:	fb07 5706 	mla	r7, r7, r6, r5
 8022610:	ea4f 05ec 	mov.w	r5, ip, asr #3
 8022614:	b2d2      	uxtb	r2, r2
 8022616:	ea4f 0ccc 	mov.w	ip, ip, lsl #3
 802261a:	f005 05fc 	and.w	r5, r5, #252	@ 0xfc
 802261e:	fb1e fe03 	smulbb	lr, lr, r3
 8022622:	b2bf      	uxth	r7, r7
 8022624:	fb12 f203 	smulbb	r2, r2, r3
 8022628:	fa5f fc8c 	uxtb.w	ip, ip
 802262c:	fb05 e506 	mla	r5, r5, r6, lr
 8022630:	f107 0e01 	add.w	lr, r7, #1
 8022634:	fb0c 2c06 	mla	ip, ip, r6, r2
 8022638:	eb0e 2717 	add.w	r7, lr, r7, lsr #8
 802263c:	fa1f fc8c 	uxth.w	ip, ip
 8022640:	f407 4e78 	and.w	lr, r7, #63488	@ 0xf800
 8022644:	b2ad      	uxth	r5, r5
 8022646:	f10c 0701 	add.w	r7, ip, #1
 802264a:	eb07 271c 	add.w	r7, r7, ip, lsr #8
 802264e:	f3c7 27c4 	ubfx	r7, r7, #11, #5
 8022652:	ea47 070e 	orr.w	r7, r7, lr
 8022656:	f105 0e01 	add.w	lr, r5, #1
 802265a:	eb0e 2515 	add.w	r5, lr, r5, lsr #8
 802265e:	096d      	lsrs	r5, r5, #5
 8022660:	f405 65fc 	and.w	r5, r5, #2016	@ 0x7e0
 8022664:	432f      	orrs	r7, r5
 8022666:	8007      	strh	r7, [r0, #0]
 8022668:	3002      	adds	r0, #2
 802266a:	3402      	adds	r4, #2
 802266c:	e7ac      	b.n	80225c8 <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h+0xa4>
 802266e:	f8b9 3000 	ldrh.w	r3, [r9]
 8022672:	f9bd 600c 	ldrsh.w	r6, [sp, #12]
 8022676:	eba3 0308 	sub.w	r3, r3, r8
 802267a:	eba6 0608 	sub.w	r6, r6, r8
 802267e:	eb00 0043 	add.w	r0, r0, r3, lsl #1
 8022682:	eb04 0446 	add.w	r4, r4, r6, lsl #1
 8022686:	440e      	add	r6, r1
 8022688:	e797      	b.n	80225ba <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h+0x96>
 802268a:	eb00 0545 	add.w	r5, r0, r5, lsl #1
 802268e:	42a8      	cmp	r0, r5
 8022690:	d262      	bcs.n	8022758 <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h+0x234>
 8022692:	9b00      	ldr	r3, [sp, #0]
 8022694:	4631      	mov	r1, r6
 8022696:	eb00 0b03 	add.w	fp, r0, r3
 802269a:	4558      	cmp	r0, fp
 802269c:	d24e      	bcs.n	802273c <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h+0x218>
 802269e:	f811 3b01 	ldrb.w	r3, [r1], #1
 80226a2:	b12b      	cbz	r3, 80226b0 <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h+0x18c>
 80226a4:	2bff      	cmp	r3, #255	@ 0xff
 80226a6:	f8b4 e000 	ldrh.w	lr, [r4]
 80226aa:	d104      	bne.n	80226b6 <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h+0x192>
 80226ac:	f8a0 e000 	strh.w	lr, [r0]
 80226b0:	3002      	adds	r0, #2
 80226b2:	3402      	adds	r4, #2
 80226b4:	e7f1      	b.n	802269a <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h+0x176>
 80226b6:	8802      	ldrh	r2, [r0, #0]
 80226b8:	b29f      	uxth	r7, r3
 80226ba:	43db      	mvns	r3, r3
 80226bc:	ea4f 2c2e 	mov.w	ip, lr, asr #8
 80226c0:	1216      	asrs	r6, r2, #8
 80226c2:	b2db      	uxtb	r3, r3
 80226c4:	f00c 0cf8 	and.w	ip, ip, #248	@ 0xf8
 80226c8:	f006 06f8 	and.w	r6, r6, #248	@ 0xf8
 80226cc:	ea4f 0ae2 	mov.w	sl, r2, asr #3
 80226d0:	00d2      	lsls	r2, r2, #3
 80226d2:	fb16 f603 	smulbb	r6, r6, r3
 80226d6:	f00a 0afc 	and.w	sl, sl, #252	@ 0xfc
 80226da:	b2d2      	uxtb	r2, r2
 80226dc:	fb0c 6c07 	mla	ip, ip, r7, r6
 80226e0:	ea4f 06ee 	mov.w	r6, lr, asr #3
 80226e4:	fb1a fa03 	smulbb	sl, sl, r3
 80226e8:	ea4f 0ece 	mov.w	lr, lr, lsl #3
 80226ec:	fa1f fc8c 	uxth.w	ip, ip
 80226f0:	f006 06fc 	and.w	r6, r6, #252	@ 0xfc
 80226f4:	fb12 f303 	smulbb	r3, r2, r3
 80226f8:	fa5f fe8e 	uxtb.w	lr, lr
 80226fc:	fb06 a607 	mla	r6, r6, r7, sl
 8022700:	f10c 0201 	add.w	r2, ip, #1
 8022704:	fb0e 3307 	mla	r3, lr, r7, r3
 8022708:	b2b6      	uxth	r6, r6
 802270a:	b29b      	uxth	r3, r3
 802270c:	eb02 2c1c 	add.w	ip, r2, ip, lsr #8
 8022710:	f106 0a01 	add.w	sl, r6, #1
 8022714:	f40c 4278 	and.w	r2, ip, #63488	@ 0xf800
 8022718:	f103 0c01 	add.w	ip, r3, #1
 802271c:	eb0a 2616 	add.w	r6, sl, r6, lsr #8
 8022720:	eb0c 2c13 	add.w	ip, ip, r3, lsr #8
 8022724:	0976      	lsrs	r6, r6, #5
 8022726:	f3cc 2cc4 	ubfx	ip, ip, #11, #5
 802272a:	f406 66fc 	and.w	r6, r6, #2016	@ 0x7e0
 802272e:	ea4c 0c02 	orr.w	ip, ip, r2
 8022732:	ea4c 0c06 	orr.w	ip, ip, r6
 8022736:	f8a0 c000 	strh.w	ip, [r0]
 802273a:	e7b9      	b.n	80226b0 <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h+0x18c>
 802273c:	f8b9 3000 	ldrh.w	r3, [r9]
 8022740:	f9bd 600c 	ldrsh.w	r6, [sp, #12]
 8022744:	eba3 0308 	sub.w	r3, r3, r8
 8022748:	eba6 0608 	sub.w	r6, r6, r8
 802274c:	eb00 0043 	add.w	r0, r0, r3, lsl #1
 8022750:	eb04 0446 	add.w	r4, r4, r6, lsl #1
 8022754:	440e      	add	r6, r1
 8022756:	e79a      	b.n	802268e <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h+0x16a>
 8022758:	4b03      	ldr	r3, [pc, #12]	@ (8022768 <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h+0x244>)
 802275a:	6818      	ldr	r0, [r3, #0]
 802275c:	6803      	ldr	r3, [r0, #0]
 802275e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8022760:	4798      	blx	r3
 8022762:	b007      	add	sp, #28
 8022764:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8022768:	2400b880 	.word	0x2400b880
 802276c:	2400b87a 	.word	0x2400b87a

08022770 <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb>:
 8022770:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8022774:	b089      	sub	sp, #36	@ 0x24
 8022776:	4682      	mov	sl, r0
 8022778:	460f      	mov	r7, r1
 802277a:	4691      	mov	r9, r2
 802277c:	f89d 604c 	ldrb.w	r6, [sp, #76]	@ 0x4c
 8022780:	4698      	mov	r8, r3
 8022782:	9c12      	ldr	r4, [sp, #72]	@ 0x48
 8022784:	2e00      	cmp	r6, #0
 8022786:	d03d      	beq.n	8022804 <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x94>
 8022788:	4608      	mov	r0, r1
 802278a:	f7fc f861 	bl	801e850 <_ZNK8touchgfx6Bitmap8getWidthEv>
 802278e:	4605      	mov	r5, r0
 8022790:	4638      	mov	r0, r7
 8022792:	f7fc f897 	bl	801e8c4 <_ZNK8touchgfx6Bitmap9getHeightEv>
 8022796:	f8ad 000e 	strh.w	r0, [sp, #14]
 802279a:	4638      	mov	r0, r7
 802279c:	f8ad 9008 	strh.w	r9, [sp, #8]
 80227a0:	f8ad 500c 	strh.w	r5, [sp, #12]
 80227a4:	f8ad 800a 	strh.w	r8, [sp, #10]
 80227a8:	f7fc f95a 	bl	801ea60 <_ZNK8touchgfx6Bitmap7getDataEv>
 80227ac:	4605      	mov	r5, r0
 80227ae:	4638      	mov	r0, r7
 80227b0:	f7fc f988 	bl	801eac4 <_ZNK8touchgfx6Bitmap12getExtraDataEv>
 80227b4:	4681      	mov	r9, r0
 80227b6:	4638      	mov	r0, r7
 80227b8:	f7fc f9dc 	bl	801eb74 <_ZNK8touchgfx6Bitmap9getFormatEv>
 80227bc:	280b      	cmp	r0, #11
 80227be:	f200 816f 	bhi.w	8022aa0 <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x330>
 80227c2:	e8df f010 	tbh	[pc, r0, lsl #1]
 80227c6:	00c3      	.short	0x00c3
 80227c8:	000c00b4 	.word	0x000c00b4
 80227cc:	016d016d 	.word	0x016d016d
 80227d0:	016d016d 	.word	0x016d016d
 80227d4:	016d016d 	.word	0x016d016d
 80227d8:	016d016d 	.word	0x016d016d
 80227dc:	00bb      	.short	0x00bb
 80227de:	4bb3      	ldr	r3, [pc, #716]	@ (8022aac <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x33c>)
 80227e0:	6818      	ldr	r0, [r3, #0]
 80227e2:	6803      	ldr	r3, [r0, #0]
 80227e4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80227e6:	4798      	blx	r3
 80227e8:	2eff      	cmp	r6, #255	@ 0xff
 80227ea:	d121      	bne.n	8022830 <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0xc0>
 80227ec:	0683      	lsls	r3, r0, #26
 80227ee:	d41f      	bmi.n	8022830 <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0xc0>
 80227f0:	4638      	mov	r0, r7
 80227f2:	f7fc f8fb 	bl	801e9ec <_ZNK8touchgfx6Bitmap20hasTransparentPixelsEv>
 80227f6:	b940      	cbnz	r0, 802280a <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x9a>
 80227f8:	4623      	mov	r3, r4
 80227fa:	aa02      	add	r2, sp, #8
 80227fc:	4629      	mov	r1, r5
 80227fe:	4650      	mov	r0, sl
 8022800:	f7ff f9e4 	bl	8021bcc <_ZN8touchgfx8LCD16bpp21blitCopyARGB8888SolidEPKmRKNS_4RectES5_>
 8022804:	b009      	add	sp, #36	@ 0x24
 8022806:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 802280a:	f10d 0818 	add.w	r8, sp, #24
 802280e:	4639      	mov	r1, r7
 8022810:	af04      	add	r7, sp, #16
 8022812:	4640      	mov	r0, r8
 8022814:	f7fc f890 	bl	801e938 <_ZNK8touchgfx6Bitmap12getSolidRectEv>
 8022818:	e898 0003 	ldmia.w	r8, {r0, r1}
 802281c:	e887 0003 	stmia.w	r7, {r0, r1}
 8022820:	4638      	mov	r0, r7
 8022822:	4621      	mov	r1, r4
 8022824:	f7f5 f9a6 	bl	8017b74 <_ZN8touchgfx4RectaNERKS0_>
 8022828:	4638      	mov	r0, r7
 802282a:	f7f5 f9e6 	bl	8017bfa <_ZNK8touchgfx4Rect7isEmptyEv>
 802282e:	b130      	cbz	r0, 802283e <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0xce>
 8022830:	4633      	mov	r3, r6
 8022832:	4622      	mov	r2, r4
 8022834:	a902      	add	r1, sp, #8
 8022836:	4628      	mov	r0, r5
 8022838:	f7ff f8e2 	bl	8021a00 <_ZN8touchgfx8LCD16bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h>
 802283c:	e7e2      	b.n	8022804 <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x94>
 802283e:	f9bd 3012 	ldrsh.w	r3, [sp, #18]
 8022842:	f9b4 2002 	ldrsh.w	r2, [r4, #2]
 8022846:	4293      	cmp	r3, r2
 8022848:	dd12      	ble.n	8022870 <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x100>
 802284a:	1a9b      	subs	r3, r3, r2
 802284c:	f9b4 0000 	ldrsh.w	r0, [r4]
 8022850:	f9b4 1004 	ldrsh.w	r1, [r4, #4]
 8022854:	f8ad 0018 	strh.w	r0, [sp, #24]
 8022858:	4628      	mov	r0, r5
 802285a:	f8ad 201a 	strh.w	r2, [sp, #26]
 802285e:	4642      	mov	r2, r8
 8022860:	f8ad 101c 	strh.w	r1, [sp, #28]
 8022864:	a902      	add	r1, sp, #8
 8022866:	f8ad 301e 	strh.w	r3, [sp, #30]
 802286a:	4633      	mov	r3, r6
 802286c:	f7ff f8c8 	bl	8021a00 <_ZN8touchgfx8LCD16bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h>
 8022870:	f9bd 3010 	ldrsh.w	r3, [sp, #16]
 8022874:	f9b4 2000 	ldrsh.w	r2, [r4]
 8022878:	4293      	cmp	r3, r2
 802287a:	dd12      	ble.n	80228a2 <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x132>
 802287c:	1a9b      	subs	r3, r3, r2
 802287e:	f9bd 0012 	ldrsh.w	r0, [sp, #18]
 8022882:	f9bd 1016 	ldrsh.w	r1, [sp, #22]
 8022886:	f8ad 2018 	strh.w	r2, [sp, #24]
 802288a:	4642      	mov	r2, r8
 802288c:	f8ad 001a 	strh.w	r0, [sp, #26]
 8022890:	4628      	mov	r0, r5
 8022892:	f8ad 301c 	strh.w	r3, [sp, #28]
 8022896:	23ff      	movs	r3, #255	@ 0xff
 8022898:	f8ad 101e 	strh.w	r1, [sp, #30]
 802289c:	a902      	add	r1, sp, #8
 802289e:	f7ff f8af 	bl	8021a00 <_ZN8touchgfx8LCD16bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h>
 80228a2:	463b      	mov	r3, r7
 80228a4:	aa02      	add	r2, sp, #8
 80228a6:	4629      	mov	r1, r5
 80228a8:	4650      	mov	r0, sl
 80228aa:	f7ff f98f 	bl	8021bcc <_ZN8touchgfx8LCD16bpp21blitCopyARGB8888SolidEPKmRKNS_4RectES5_>
 80228ae:	88a2      	ldrh	r2, [r4, #4]
 80228b0:	8823      	ldrh	r3, [r4, #0]
 80228b2:	f8bd 1014 	ldrh.w	r1, [sp, #20]
 80228b6:	4413      	add	r3, r2
 80228b8:	f8bd 2010 	ldrh.w	r2, [sp, #16]
 80228bc:	440a      	add	r2, r1
 80228be:	b29b      	uxth	r3, r3
 80228c0:	b292      	uxth	r2, r2
 80228c2:	b218      	sxth	r0, r3
 80228c4:	b211      	sxth	r1, r2
 80228c6:	4288      	cmp	r0, r1
 80228c8:	dd12      	ble.n	80228f0 <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x180>
 80228ca:	1a9b      	subs	r3, r3, r2
 80228cc:	f9bd 0016 	ldrsh.w	r0, [sp, #22]
 80228d0:	f9bd 6012 	ldrsh.w	r6, [sp, #18]
 80228d4:	4642      	mov	r2, r8
 80228d6:	f8ad 1018 	strh.w	r1, [sp, #24]
 80228da:	a902      	add	r1, sp, #8
 80228dc:	f8ad 301c 	strh.w	r3, [sp, #28]
 80228e0:	23ff      	movs	r3, #255	@ 0xff
 80228e2:	f8ad 001e 	strh.w	r0, [sp, #30]
 80228e6:	4628      	mov	r0, r5
 80228e8:	f8ad 601a 	strh.w	r6, [sp, #26]
 80228ec:	f7ff f888 	bl	8021a00 <_ZN8touchgfx8LCD16bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h>
 80228f0:	88e2      	ldrh	r2, [r4, #6]
 80228f2:	8863      	ldrh	r3, [r4, #2]
 80228f4:	f8bd 1016 	ldrh.w	r1, [sp, #22]
 80228f8:	4413      	add	r3, r2
 80228fa:	f8bd 2012 	ldrh.w	r2, [sp, #18]
 80228fe:	440a      	add	r2, r1
 8022900:	b29b      	uxth	r3, r3
 8022902:	b292      	uxth	r2, r2
 8022904:	b218      	sxth	r0, r3
 8022906:	b211      	sxth	r1, r2
 8022908:	4288      	cmp	r0, r1
 802290a:	f77f af7b 	ble.w	8022804 <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x94>
 802290e:	1a9b      	subs	r3, r3, r2
 8022910:	f9b4 6000 	ldrsh.w	r6, [r4]
 8022914:	f9b4 0004 	ldrsh.w	r0, [r4, #4]
 8022918:	4642      	mov	r2, r8
 802291a:	f8ad 301e 	strh.w	r3, [sp, #30]
 802291e:	23ff      	movs	r3, #255	@ 0xff
 8022920:	f8ad 6018 	strh.w	r6, [sp, #24]
 8022924:	f8ad 101a 	strh.w	r1, [sp, #26]
 8022928:	f8ad 001c 	strh.w	r0, [sp, #28]
 802292c:	e782      	b.n	8022834 <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0xc4>
 802292e:	4633      	mov	r3, r6
 8022930:	4622      	mov	r2, r4
 8022932:	a902      	add	r1, sp, #8
 8022934:	4628      	mov	r0, r5
 8022936:	f7ff f9b9 	bl	8021cac <_ZN8touchgfx8LCD16bpp14blitCopyRGB888EPKhRKNS_4RectES5_h>
 802293a:	e763      	b.n	8022804 <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x94>
 802293c:	9600      	str	r6, [sp, #0]
 802293e:	4623      	mov	r3, r4
 8022940:	aa02      	add	r2, sp, #8
 8022942:	4649      	mov	r1, r9
 8022944:	4628      	mov	r0, r5
 8022946:	f7ff fdd5 	bl	80224f4 <_ZN8touchgfx8LCD16bpp10blitCopyL8EPKhS2_RKNS_4RectES5_h>
 802294a:	e75b      	b.n	8022804 <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x94>
 802294c:	4638      	mov	r0, r7
 802294e:	f7fc f84d 	bl	801e9ec <_ZNK8touchgfx6Bitmap20hasTransparentPixelsEv>
 8022952:	b950      	cbnz	r0, 802296a <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x1fa>
 8022954:	f8da 3000 	ldr.w	r3, [sl]
 8022958:	aa02      	add	r2, sp, #8
 802295a:	4629      	mov	r1, r5
 802295c:	e9cd 6000 	strd	r6, r0, [sp]
 8022960:	4650      	mov	r0, sl
 8022962:	68de      	ldr	r6, [r3, #12]
 8022964:	4623      	mov	r3, r4
 8022966:	47b0      	blx	r6
 8022968:	e74c      	b.n	8022804 <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x94>
 802296a:	f10d 0818 	add.w	r8, sp, #24
 802296e:	4639      	mov	r1, r7
 8022970:	af04      	add	r7, sp, #16
 8022972:	4640      	mov	r0, r8
 8022974:	f7fb ffe0 	bl	801e938 <_ZNK8touchgfx6Bitmap12getSolidRectEv>
 8022978:	e898 0003 	ldmia.w	r8, {r0, r1}
 802297c:	e887 0003 	stmia.w	r7, {r0, r1}
 8022980:	4638      	mov	r0, r7
 8022982:	4621      	mov	r1, r4
 8022984:	f7f5 f8f6 	bl	8017b74 <_ZN8touchgfx4RectaNERKS0_>
 8022988:	4638      	mov	r0, r7
 802298a:	f7f5 f936 	bl	8017bfa <_ZNK8touchgfx4Rect7isEmptyEv>
 802298e:	b138      	cbz	r0, 80229a0 <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x230>
 8022990:	4623      	mov	r3, r4
 8022992:	9600      	str	r6, [sp, #0]
 8022994:	aa02      	add	r2, sp, #8
 8022996:	4649      	mov	r1, r9
 8022998:	4628      	mov	r0, r5
 802299a:	f7ff fdc3 	bl	8022524 <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h>
 802299e:	e731      	b.n	8022804 <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x94>
 80229a0:	f8da 3000 	ldr.w	r3, [sl]
 80229a4:	aa02      	add	r2, sp, #8
 80229a6:	4629      	mov	r1, r5
 80229a8:	e9cd 6000 	strd	r6, r0, [sp]
 80229ac:	4650      	mov	r0, sl
 80229ae:	f8d3 b00c 	ldr.w	fp, [r3, #12]
 80229b2:	463b      	mov	r3, r7
 80229b4:	47d8      	blx	fp
 80229b6:	f9bd 3012 	ldrsh.w	r3, [sp, #18]
 80229ba:	f9b4 2002 	ldrsh.w	r2, [r4, #2]
 80229be:	4293      	cmp	r3, r2
 80229c0:	dd13      	ble.n	80229ea <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x27a>
 80229c2:	f9b4 0000 	ldrsh.w	r0, [r4]
 80229c6:	1a9b      	subs	r3, r3, r2
 80229c8:	f9b4 1004 	ldrsh.w	r1, [r4, #4]
 80229cc:	f8ad 0018 	strh.w	r0, [sp, #24]
 80229d0:	4628      	mov	r0, r5
 80229d2:	f8ad 201a 	strh.w	r2, [sp, #26]
 80229d6:	aa02      	add	r2, sp, #8
 80229d8:	f8ad 101c 	strh.w	r1, [sp, #28]
 80229dc:	4649      	mov	r1, r9
 80229de:	f8ad 301e 	strh.w	r3, [sp, #30]
 80229e2:	4643      	mov	r3, r8
 80229e4:	9600      	str	r6, [sp, #0]
 80229e6:	f7ff fd9d 	bl	8022524 <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h>
 80229ea:	f9bd 3010 	ldrsh.w	r3, [sp, #16]
 80229ee:	f9b4 2000 	ldrsh.w	r2, [r4]
 80229f2:	4293      	cmp	r3, r2
 80229f4:	dd13      	ble.n	8022a1e <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x2ae>
 80229f6:	1a9b      	subs	r3, r3, r2
 80229f8:	f9bd 0012 	ldrsh.w	r0, [sp, #18]
 80229fc:	f9bd 1016 	ldrsh.w	r1, [sp, #22]
 8022a00:	f8ad 2018 	strh.w	r2, [sp, #24]
 8022a04:	aa02      	add	r2, sp, #8
 8022a06:	f8ad 001a 	strh.w	r0, [sp, #26]
 8022a0a:	4628      	mov	r0, r5
 8022a0c:	f8ad 301c 	strh.w	r3, [sp, #28]
 8022a10:	4643      	mov	r3, r8
 8022a12:	f8ad 101e 	strh.w	r1, [sp, #30]
 8022a16:	4649      	mov	r1, r9
 8022a18:	9600      	str	r6, [sp, #0]
 8022a1a:	f7ff fd83 	bl	8022524 <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h>
 8022a1e:	88a2      	ldrh	r2, [r4, #4]
 8022a20:	8823      	ldrh	r3, [r4, #0]
 8022a22:	f8bd 1014 	ldrh.w	r1, [sp, #20]
 8022a26:	4413      	add	r3, r2
 8022a28:	f8bd 2010 	ldrh.w	r2, [sp, #16]
 8022a2c:	440a      	add	r2, r1
 8022a2e:	b29b      	uxth	r3, r3
 8022a30:	b292      	uxth	r2, r2
 8022a32:	b218      	sxth	r0, r3
 8022a34:	b211      	sxth	r1, r2
 8022a36:	4288      	cmp	r0, r1
 8022a38:	dd13      	ble.n	8022a62 <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x2f2>
 8022a3a:	1a9b      	subs	r3, r3, r2
 8022a3c:	f9bd 0016 	ldrsh.w	r0, [sp, #22]
 8022a40:	f9bd 7012 	ldrsh.w	r7, [sp, #18]
 8022a44:	aa02      	add	r2, sp, #8
 8022a46:	f8ad 1018 	strh.w	r1, [sp, #24]
 8022a4a:	4649      	mov	r1, r9
 8022a4c:	f8ad 301c 	strh.w	r3, [sp, #28]
 8022a50:	4643      	mov	r3, r8
 8022a52:	f8ad 001e 	strh.w	r0, [sp, #30]
 8022a56:	4628      	mov	r0, r5
 8022a58:	9600      	str	r6, [sp, #0]
 8022a5a:	f8ad 701a 	strh.w	r7, [sp, #26]
 8022a5e:	f7ff fd61 	bl	8022524 <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h>
 8022a62:	88e2      	ldrh	r2, [r4, #6]
 8022a64:	8863      	ldrh	r3, [r4, #2]
 8022a66:	f8bd 1016 	ldrh.w	r1, [sp, #22]
 8022a6a:	4413      	add	r3, r2
 8022a6c:	f8bd 2012 	ldrh.w	r2, [sp, #18]
 8022a70:	440a      	add	r2, r1
 8022a72:	b29b      	uxth	r3, r3
 8022a74:	b292      	uxth	r2, r2
 8022a76:	b218      	sxth	r0, r3
 8022a78:	b211      	sxth	r1, r2
 8022a7a:	4288      	cmp	r0, r1
 8022a7c:	f77f aec2 	ble.w	8022804 <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x94>
 8022a80:	f9b4 7000 	ldrsh.w	r7, [r4]
 8022a84:	1a9b      	subs	r3, r3, r2
 8022a86:	f9b4 0004 	ldrsh.w	r0, [r4, #4]
 8022a8a:	f8ad 301e 	strh.w	r3, [sp, #30]
 8022a8e:	4643      	mov	r3, r8
 8022a90:	f8ad 7018 	strh.w	r7, [sp, #24]
 8022a94:	f8ad 101a 	strh.w	r1, [sp, #26]
 8022a98:	f8ad 001c 	strh.w	r0, [sp, #28]
 8022a9c:	9600      	str	r6, [sp, #0]
 8022a9e:	e779      	b.n	8022994 <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x224>
 8022aa0:	4b03      	ldr	r3, [pc, #12]	@ (8022ab0 <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x340>)
 8022aa2:	21b4      	movs	r1, #180	@ 0xb4
 8022aa4:	4a03      	ldr	r2, [pc, #12]	@ (8022ab4 <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x344>)
 8022aa6:	4804      	ldr	r0, [pc, #16]	@ (8022ab8 <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x348>)
 8022aa8:	f007 ff44 	bl	802a934 <__assert_func>
 8022aac:	2400b880 	.word	0x2400b880
 8022ab0:	0802f88b 	.word	0x0802f88b
 8022ab4:	0802ff93 	.word	0x0802ff93
 8022ab8:	0802f9c1 	.word	0x0802f9c1

08022abc <_ZN8touchgfx8LCD16bpp9nextPixelEbNS_12TextRotationE>:
 8022abc:	b508      	push	{r3, lr}
 8022abe:	b180      	cbz	r0, 8022ae2 <_ZN8touchgfx8LCD16bpp9nextPixelEbNS_12TextRotationE+0x26>
 8022ac0:	2902      	cmp	r1, #2
 8022ac2:	d014      	beq.n	8022aee <_ZN8touchgfx8LCD16bpp9nextPixelEbNS_12TextRotationE+0x32>
 8022ac4:	2903      	cmp	r1, #3
 8022ac6:	d01d      	beq.n	8022b04 <_ZN8touchgfx8LCD16bpp9nextPixelEbNS_12TextRotationE+0x48>
 8022ac8:	2901      	cmp	r1, #1
 8022aca:	d101      	bne.n	8022ad0 <_ZN8touchgfx8LCD16bpp9nextPixelEbNS_12TextRotationE+0x14>
 8022acc:	2001      	movs	r0, #1
 8022ace:	bd08      	pop	{r3, pc}
 8022ad0:	4b0e      	ldr	r3, [pc, #56]	@ (8022b0c <_ZN8touchgfx8LCD16bpp9nextPixelEbNS_12TextRotationE+0x50>)
 8022ad2:	8818      	ldrh	r0, [r3, #0]
 8022ad4:	b990      	cbnz	r0, 8022afc <_ZN8touchgfx8LCD16bpp9nextPixelEbNS_12TextRotationE+0x40>
 8022ad6:	4b0e      	ldr	r3, [pc, #56]	@ (8022b10 <_ZN8touchgfx8LCD16bpp9nextPixelEbNS_12TextRotationE+0x54>)
 8022ad8:	2150      	movs	r1, #80	@ 0x50
 8022ada:	4a0e      	ldr	r2, [pc, #56]	@ (8022b14 <_ZN8touchgfx8LCD16bpp9nextPixelEbNS_12TextRotationE+0x58>)
 8022adc:	480e      	ldr	r0, [pc, #56]	@ (8022b18 <_ZN8touchgfx8LCD16bpp9nextPixelEbNS_12TextRotationE+0x5c>)
 8022ade:	f007 ff29 	bl	802a934 <__assert_func>
 8022ae2:	2902      	cmp	r1, #2
 8022ae4:	d00e      	beq.n	8022b04 <_ZN8touchgfx8LCD16bpp9nextPixelEbNS_12TextRotationE+0x48>
 8022ae6:	2903      	cmp	r1, #3
 8022ae8:	d0f2      	beq.n	8022ad0 <_ZN8touchgfx8LCD16bpp9nextPixelEbNS_12TextRotationE+0x14>
 8022aea:	2901      	cmp	r1, #1
 8022aec:	d1ee      	bne.n	8022acc <_ZN8touchgfx8LCD16bpp9nextPixelEbNS_12TextRotationE+0x10>
 8022aee:	4b07      	ldr	r3, [pc, #28]	@ (8022b0c <_ZN8touchgfx8LCD16bpp9nextPixelEbNS_12TextRotationE+0x50>)
 8022af0:	8818      	ldrh	r0, [r3, #0]
 8022af2:	2800      	cmp	r0, #0
 8022af4:	d0ef      	beq.n	8022ad6 <_ZN8touchgfx8LCD16bpp9nextPixelEbNS_12TextRotationE+0x1a>
 8022af6:	f3c0 000e 	ubfx	r0, r0, #0, #15
 8022afa:	e7e8      	b.n	8022ace <_ZN8touchgfx8LCD16bpp9nextPixelEbNS_12TextRotationE+0x12>
 8022afc:	f3c0 000e 	ubfx	r0, r0, #0, #15
 8022b00:	4240      	negs	r0, r0
 8022b02:	e7e4      	b.n	8022ace <_ZN8touchgfx8LCD16bpp9nextPixelEbNS_12TextRotationE+0x12>
 8022b04:	f04f 30ff 	mov.w	r0, #4294967295
 8022b08:	e7e1      	b.n	8022ace <_ZN8touchgfx8LCD16bpp9nextPixelEbNS_12TextRotationE+0x12>
 8022b0a:	bf00      	nop
 8022b0c:	2400b87a 	.word	0x2400b87a
 8022b10:	0802fb17 	.word	0x0802fb17
 8022b14:	08030110 	.word	0x08030110
 8022b18:	0802fb59 	.word	0x0802fb59

08022b1c <_ZN8touchgfx8LCD16bpp8nextLineEbNS_12TextRotationE>:
 8022b1c:	b508      	push	{r3, lr}
 8022b1e:	b180      	cbz	r0, 8022b42 <_ZN8touchgfx8LCD16bpp8nextLineEbNS_12TextRotationE+0x26>
 8022b20:	2902      	cmp	r1, #2
 8022b22:	d014      	beq.n	8022b4e <_ZN8touchgfx8LCD16bpp8nextLineEbNS_12TextRotationE+0x32>
 8022b24:	2903      	cmp	r1, #3
 8022b26:	d018      	beq.n	8022b5a <_ZN8touchgfx8LCD16bpp8nextLineEbNS_12TextRotationE+0x3e>
 8022b28:	2901      	cmp	r1, #1
 8022b2a:	d001      	beq.n	8022b30 <_ZN8touchgfx8LCD16bpp8nextLineEbNS_12TextRotationE+0x14>
 8022b2c:	2001      	movs	r0, #1
 8022b2e:	e013      	b.n	8022b58 <_ZN8touchgfx8LCD16bpp8nextLineEbNS_12TextRotationE+0x3c>
 8022b30:	4b0e      	ldr	r3, [pc, #56]	@ (8022b6c <_ZN8touchgfx8LCD16bpp8nextLineEbNS_12TextRotationE+0x50>)
 8022b32:	8818      	ldrh	r0, [r3, #0]
 8022b34:	b970      	cbnz	r0, 8022b54 <_ZN8touchgfx8LCD16bpp8nextLineEbNS_12TextRotationE+0x38>
 8022b36:	4b0e      	ldr	r3, [pc, #56]	@ (8022b70 <_ZN8touchgfx8LCD16bpp8nextLineEbNS_12TextRotationE+0x54>)
 8022b38:	2150      	movs	r1, #80	@ 0x50
 8022b3a:	4a0e      	ldr	r2, [pc, #56]	@ (8022b74 <_ZN8touchgfx8LCD16bpp8nextLineEbNS_12TextRotationE+0x58>)
 8022b3c:	480e      	ldr	r0, [pc, #56]	@ (8022b78 <_ZN8touchgfx8LCD16bpp8nextLineEbNS_12TextRotationE+0x5c>)
 8022b3e:	f007 fef9 	bl	802a934 <__assert_func>
 8022b42:	2902      	cmp	r1, #2
 8022b44:	d009      	beq.n	8022b5a <_ZN8touchgfx8LCD16bpp8nextLineEbNS_12TextRotationE+0x3e>
 8022b46:	2903      	cmp	r1, #3
 8022b48:	d0f0      	beq.n	8022b2c <_ZN8touchgfx8LCD16bpp8nextLineEbNS_12TextRotationE+0x10>
 8022b4a:	2901      	cmp	r1, #1
 8022b4c:	d1f0      	bne.n	8022b30 <_ZN8touchgfx8LCD16bpp8nextLineEbNS_12TextRotationE+0x14>
 8022b4e:	f04f 30ff 	mov.w	r0, #4294967295
 8022b52:	e001      	b.n	8022b58 <_ZN8touchgfx8LCD16bpp8nextLineEbNS_12TextRotationE+0x3c>
 8022b54:	f3c0 000e 	ubfx	r0, r0, #0, #15
 8022b58:	bd08      	pop	{r3, pc}
 8022b5a:	4b04      	ldr	r3, [pc, #16]	@ (8022b6c <_ZN8touchgfx8LCD16bpp8nextLineEbNS_12TextRotationE+0x50>)
 8022b5c:	8818      	ldrh	r0, [r3, #0]
 8022b5e:	2800      	cmp	r0, #0
 8022b60:	d0e9      	beq.n	8022b36 <_ZN8touchgfx8LCD16bpp8nextLineEbNS_12TextRotationE+0x1a>
 8022b62:	f3c0 000e 	ubfx	r0, r0, #0, #15
 8022b66:	4240      	negs	r0, r0
 8022b68:	e7f6      	b.n	8022b58 <_ZN8touchgfx8LCD16bpp8nextLineEbNS_12TextRotationE+0x3c>
 8022b6a:	bf00      	nop
 8022b6c:	2400b87a 	.word	0x2400b87a
 8022b70:	0802fb17 	.word	0x0802fb17
 8022b74:	08030110 	.word	0x08030110
 8022b78:	0802fb59 	.word	0x0802fb59

08022b7c <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE>:
 8022b7c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8022b80:	b099      	sub	sp, #100	@ 0x64
 8022b82:	910b      	str	r1, [sp, #44]	@ 0x2c
 8022b84:	a914      	add	r1, sp, #80	@ 0x50
 8022b86:	f9bd 5088 	ldrsh.w	r5, [sp, #136]	@ 0x88
 8022b8a:	f8bd 6090 	ldrh.w	r6, [sp, #144]	@ 0x90
 8022b8e:	f8bd 7094 	ldrh.w	r7, [sp, #148]	@ 0x94
 8022b92:	f89d 80ac 	ldrb.w	r8, [sp, #172]	@ 0xac
 8022b96:	f89d a0b4 	ldrb.w	sl, [sp, #180]	@ 0xb4
 8022b9a:	e881 000c 	stmia.w	r1, {r2, r3}
 8022b9e:	f9bd 308c 	ldrsh.w	r3, [sp, #140]	@ 0x8c
 8022ba2:	e9dd 2126 	ldrd	r2, r1, [sp, #152]	@ 0x98
 8022ba6:	930a      	str	r3, [sp, #40]	@ 0x28
 8022ba8:	f89d 30a4 	ldrb.w	r3, [sp, #164]	@ 0xa4
 8022bac:	f891 900d 	ldrb.w	r9, [r1, #13]
 8022bb0:	9311      	str	r3, [sp, #68]	@ 0x44
 8022bb2:	f89d 30b0 	ldrb.w	r3, [sp, #176]	@ 0xb0
 8022bb6:	7988      	ldrb	r0, [r1, #6]
 8022bb8:	930c      	str	r3, [sp, #48]	@ 0x30
 8022bba:	ea4f 1349 	mov.w	r3, r9, lsl #5
 8022bbe:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8022bc2:	4303      	orrs	r3, r0
 8022bc4:	9309      	str	r3, [sp, #36]	@ 0x24
 8022bc6:	f000 81a1 	beq.w	8022f0c <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x390>
 8022bca:	ea4f 1909 	mov.w	r9, r9, lsl #4
 8022bce:	f409 7380 	and.w	r3, r9, #256	@ 0x100
 8022bd2:	f891 9007 	ldrb.w	r9, [r1, #7]
 8022bd6:	ea59 0903 	orrs.w	r9, r9, r3
 8022bda:	f000 8197 	beq.w	8022f0c <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x390>
 8022bde:	f991 3009 	ldrsb.w	r3, [r1, #9]
 8022be2:	b29b      	uxth	r3, r3
 8022be4:	2e00      	cmp	r6, #0
 8022be6:	f000 813a 	beq.w	8022e5e <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x2e2>
 8022bea:	1af6      	subs	r6, r6, r3
 8022bec:	b2b6      	uxth	r6, r6
 8022bee:	0433      	lsls	r3, r6, #16
 8022bf0:	d502      	bpl.n	8022bf8 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x7c>
 8022bf2:	1bad      	subs	r5, r5, r6
 8022bf4:	2600      	movs	r6, #0
 8022bf6:	b22d      	sxth	r5, r5
 8022bf8:	f9b2 1000 	ldrsh.w	r1, [r2]
 8022bfc:	a814      	add	r0, sp, #80	@ 0x50
 8022bfe:	f8bd 4024 	ldrh.w	r4, [sp, #36]	@ 0x24
 8022c02:	428d      	cmp	r5, r1
 8022c04:	b28b      	uxth	r3, r1
 8022c06:	f8cd 9034 	str.w	r9, [sp, #52]	@ 0x34
 8022c0a:	bfbf      	itttt	lt
 8022c0c:	18f6      	addlt	r6, r6, r3
 8022c0e:	1b75      	sublt	r5, r6, r5
 8022c10:	b2ae      	uxthlt	r6, r5
 8022c12:	460d      	movlt	r5, r1
 8022c14:	8891      	ldrh	r1, [r2, #4]
 8022c16:	440b      	add	r3, r1
 8022c18:	4629      	mov	r1, r5
 8022c1a:	b21b      	sxth	r3, r3
 8022c1c:	9310      	str	r3, [sp, #64]	@ 0x40
 8022c1e:	88d3      	ldrh	r3, [r2, #6]
 8022c20:	8852      	ldrh	r2, [r2, #2]
 8022c22:	4413      	add	r3, r2
 8022c24:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8022c26:	b21b      	sxth	r3, r3
 8022c28:	930f      	str	r3, [sp, #60]	@ 0x3c
 8022c2a:	4bbd      	ldr	r3, [pc, #756]	@ (8022f20 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x3a4>)
 8022c2c:	f893 b000 	ldrb.w	fp, [r3]
 8022c30:	f10b 3cff 	add.w	ip, fp, #4294967295
 8022c34:	f1dc 0300 	rsbs	r3, ip, #0
 8022c38:	eb43 030c 	adc.w	r3, r3, ip
 8022c3c:	930e      	str	r3, [sp, #56]	@ 0x38
 8022c3e:	4653      	mov	r3, sl
 8022c40:	f7f8 f9ce 	bl	801afe0 <_ZN8touchgfx3LCD5realXERKNS_4RectEssNS_12TextRotationE>
 8022c44:	4629      	mov	r1, r5
 8022c46:	f8ad 005c 	strh.w	r0, [sp, #92]	@ 0x5c
 8022c4a:	4653      	mov	r3, sl
 8022c4c:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8022c4e:	a814      	add	r0, sp, #80	@ 0x50
 8022c50:	f7f8 f9de 	bl	801b010 <_ZN8touchgfx3LCD5realYERKNS_4RectEssNS_12TextRotationE>
 8022c54:	a918      	add	r1, sp, #96	@ 0x60
 8022c56:	f821 0d02 	strh.w	r0, [r1, #-2]!
 8022c5a:	a817      	add	r0, sp, #92	@ 0x5c
 8022c5c:	f7f8 fafa 	bl	801b254 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERsS1_>
 8022c60:	f1ba 0f00 	cmp.w	sl, #0
 8022c64:	f040 80fe 	bne.w	8022e64 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x2e8>
 8022c68:	f1bb 0f01 	cmp.w	fp, #1
 8022c6c:	f040 8102 	bne.w	8022e74 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x2f8>
 8022c70:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 8022c72:	b153      	cbz	r3, 8022c8a <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x10e>
 8022c74:	2408      	movs	r4, #8
 8022c76:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8022c78:	fb94 f3f8 	sdiv	r3, r4, r8
 8022c7c:	1e5c      	subs	r4, r3, #1
 8022c7e:	4414      	add	r4, r2
 8022c80:	fb94 f4f3 	sdiv	r4, r4, r3
 8022c84:	fb14 f403 	smulbb	r4, r4, r3
 8022c88:	b2a4      	uxth	r4, r4
 8022c8a:	b906      	cbnz	r6, 8022c8e <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x112>
 8022c8c:	b16f      	cbz	r7, 8022caa <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x12e>
 8022c8e:	fb07 6304 	mla	r3, r7, r4, r6
 8022c92:	9928      	ldr	r1, [sp, #160]	@ 0xa0
 8022c94:	463a      	mov	r2, r7
 8022c96:	fb08 f303 	mul.w	r3, r8, r3
 8022c9a:	f003 0707 	and.w	r7, r3, #7
 8022c9e:	eb01 03d3 	add.w	r3, r1, r3, lsr #3
 8022ca2:	9328      	str	r3, [sp, #160]	@ 0xa0
 8022ca4:	eba9 0302 	sub.w	r3, r9, r2
 8022ca8:	930d      	str	r3, [sp, #52]	@ 0x34
 8022caa:	4651      	mov	r1, sl
 8022cac:	980e      	ldr	r0, [sp, #56]	@ 0x38
 8022cae:	f7ff ff05 	bl	8022abc <_ZN8touchgfx8LCD16bpp9nextPixelEbNS_12TextRotationE>
 8022cb2:	4651      	mov	r1, sl
 8022cb4:	4681      	mov	r9, r0
 8022cb6:	980e      	ldr	r0, [sp, #56]	@ 0x38
 8022cb8:	f7ff ff30 	bl	8022b1c <_ZN8touchgfx8LCD16bpp8nextLineEbNS_12TextRotationE>
 8022cbc:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8022cbe:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8022cc0:	4683      	mov	fp, r0
 8022cc2:	eba3 0a02 	sub.w	sl, r3, r2
 8022cc6:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8022cc8:	459a      	cmp	sl, r3
 8022cca:	bfa8      	it	ge
 8022ccc:	469a      	movge	sl, r3
 8022cce:	f1ba 0f00 	cmp.w	sl, #0
 8022cd2:	f340 811b 	ble.w	8022f0c <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x390>
 8022cd6:	1bad      	subs	r5, r5, r6
 8022cd8:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8022cda:	1b5d      	subs	r5, r3, r5
 8022cdc:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8022cde:	429d      	cmp	r5, r3
 8022ce0:	bfd4      	ite	le
 8022ce2:	ebc6 0605 	rsble	r6, r6, r5
 8022ce6:	ebc6 0603 	rsbgt	r6, r6, r3
 8022cea:	2e00      	cmp	r6, #0
 8022cec:	f340 810e 	ble.w	8022f0c <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x390>
 8022cf0:	1ba4      	subs	r4, r4, r6
 8022cf2:	fb08 f304 	mul.w	r3, r8, r4
 8022cf6:	930f      	str	r3, [sp, #60]	@ 0x3c
 8022cf8:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8022cfa:	2b00      	cmp	r3, #0
 8022cfc:	f040 810b 	bne.w	8022f16 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x39a>
 8022d00:	4b88      	ldr	r3, [pc, #544]	@ (8022f24 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x3a8>)
 8022d02:	6818      	ldr	r0, [r3, #0]
 8022d04:	6803      	ldr	r3, [r0, #0]
 8022d06:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8022d08:	4798      	blx	r3
 8022d0a:	2301      	movs	r3, #1
 8022d0c:	4a86      	ldr	r2, [pc, #536]	@ (8022f28 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x3ac>)
 8022d0e:	fa03 f308 	lsl.w	r3, r3, r8
 8022d12:	8811      	ldrh	r1, [r2, #0]
 8022d14:	f9bd 205c 	ldrsh.w	r2, [sp, #92]	@ 0x5c
 8022d18:	3b01      	subs	r3, #1
 8022d1a:	b2db      	uxtb	r3, r3
 8022d1c:	930e      	str	r3, [sp, #56]	@ 0x38
 8022d1e:	f9bd 305e 	ldrsh.w	r3, [sp, #94]	@ 0x5e
 8022d22:	fb01 2303 	mla	r3, r1, r3, r2
 8022d26:	eb00 0343 	add.w	r3, r0, r3, lsl #1
 8022d2a:	930a      	str	r3, [sp, #40]	@ 0x28
 8022d2c:	9b2a      	ldr	r3, [sp, #168]	@ 0xa8
 8022d2e:	f3c3 4307 	ubfx	r3, r3, #16, #8
 8022d32:	9313      	str	r3, [sp, #76]	@ 0x4c
 8022d34:	9b2a      	ldr	r3, [sp, #168]	@ 0xa8
 8022d36:	0a19      	lsrs	r1, r3, #8
 8022d38:	b2cb      	uxtb	r3, r1
 8022d3a:	9312      	str	r3, [sp, #72]	@ 0x48
 8022d3c:	9b2a      	ldr	r3, [sp, #168]	@ 0xa8
 8022d3e:	b2db      	uxtb	r3, r3
 8022d40:	9311      	str	r3, [sp, #68]	@ 0x44
 8022d42:	9b2a      	ldr	r3, [sp, #168]	@ 0xa8
 8022d44:	095a      	lsrs	r2, r3, #5
 8022d46:	4b79      	ldr	r3, [pc, #484]	@ (8022f2c <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x3b0>)
 8022d48:	f402 62fc 	and.w	r2, r2, #2016	@ 0x7e0
 8022d4c:	400b      	ands	r3, r1
 8022d4e:	4313      	orrs	r3, r2
 8022d50:	9a2a      	ldr	r2, [sp, #168]	@ 0xa8
 8022d52:	f3c2 02c4 	ubfx	r2, r2, #3, #5
 8022d56:	4313      	orrs	r3, r2
 8022d58:	b29b      	uxth	r3, r3
 8022d5a:	9310      	str	r3, [sp, #64]	@ 0x40
 8022d5c:	9b28      	ldr	r3, [sp, #160]	@ 0xa0
 8022d5e:	781a      	ldrb	r2, [r3, #0]
 8022d60:	ea4f 0349 	mov.w	r3, r9, lsl #1
 8022d64:	fb06 b919 	mls	r9, r6, r9, fp
 8022d68:	413a      	asrs	r2, r7
 8022d6a:	fb03 fb06 	mul.w	fp, r3, r6
 8022d6e:	930d      	str	r3, [sp, #52]	@ 0x34
 8022d70:	b2d2      	uxtb	r2, r2
 8022d72:	eb0b 0b49 	add.w	fp, fp, r9, lsl #1
 8022d76:	f11a 3aff 	adds.w	sl, sl, #4294967295
 8022d7a:	f0c0 80ea 	bcc.w	8022f52 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x3d6>
 8022d7e:	46b6      	mov	lr, r6
 8022d80:	f8dd c028 	ldr.w	ip, [sp, #40]	@ 0x28
 8022d84:	f11e 3eff 	adds.w	lr, lr, #4294967295
 8022d88:	f0c0 80d2 	bcc.w	8022f30 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x3b4>
 8022d8c:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8022d8e:	4013      	ands	r3, r2
 8022d90:	d055      	beq.n	8022e3e <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x2c2>
 8022d92:	20ff      	movs	r0, #255	@ 0xff
 8022d94:	990e      	ldr	r1, [sp, #56]	@ 0x38
 8022d96:	fb90 f1f1 	sdiv	r1, r0, r1
 8022d9a:	434b      	muls	r3, r1
 8022d9c:	2bfe      	cmp	r3, #254	@ 0xfe
 8022d9e:	dd03      	ble.n	8022da8 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x22c>
 8022da0:	990c      	ldr	r1, [sp, #48]	@ 0x30
 8022da2:	4281      	cmp	r1, r0
 8022da4:	f000 80b9 	beq.w	8022f1a <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x39e>
 8022da8:	990c      	ldr	r1, [sp, #48]	@ 0x30
 8022daa:	f8bc 4000 	ldrh.w	r4, [ip]
 8022dae:	fb11 f303 	smulbb	r3, r1, r3
 8022db2:	1220      	asrs	r0, r4, #8
 8022db4:	b29b      	uxth	r3, r3
 8022db6:	f000 00f8 	and.w	r0, r0, #248	@ 0xf8
 8022dba:	1c59      	adds	r1, r3, #1
 8022dbc:	ea40 1050 	orr.w	r0, r0, r0, lsr #5
 8022dc0:	eb01 2313 	add.w	r3, r1, r3, lsr #8
 8022dc4:	10e1      	asrs	r1, r4, #3
 8022dc6:	f3c3 2307 	ubfx	r3, r3, #8, #8
 8022dca:	00e4      	lsls	r4, r4, #3
 8022dcc:	f001 01fc 	and.w	r1, r1, #252	@ 0xfc
 8022dd0:	b29d      	uxth	r5, r3
 8022dd2:	43db      	mvns	r3, r3
 8022dd4:	ea41 1191 	orr.w	r1, r1, r1, lsr #6
 8022dd8:	b2db      	uxtb	r3, r3
 8022dda:	b2e4      	uxtb	r4, r4
 8022ddc:	9309      	str	r3, [sp, #36]	@ 0x24
 8022dde:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 8022de0:	ea44 1454 	orr.w	r4, r4, r4, lsr #5
 8022de4:	fb13 f905 	smulbb	r9, r3, r5
 8022de8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8022dea:	fb00 9003 	mla	r0, r0, r3, r9
 8022dee:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 8022df0:	fb13 f905 	smulbb	r9, r3, r5
 8022df4:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8022df6:	b280      	uxth	r0, r0
 8022df8:	fb01 9103 	mla	r1, r1, r3, r9
 8022dfc:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 8022dfe:	fb13 f505 	smulbb	r5, r3, r5
 8022e02:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8022e04:	b289      	uxth	r1, r1
 8022e06:	fb04 5403 	mla	r4, r4, r3, r5
 8022e0a:	1c43      	adds	r3, r0, #1
 8022e0c:	b2a4      	uxth	r4, r4
 8022e0e:	eb03 2010 	add.w	r0, r3, r0, lsr #8
 8022e12:	f104 0901 	add.w	r9, r4, #1
 8022e16:	f400 4078 	and.w	r0, r0, #63488	@ 0xf800
 8022e1a:	eb09 2914 	add.w	r9, r9, r4, lsr #8
 8022e1e:	f3c9 29c4 	ubfx	r9, r9, #11, #5
 8022e22:	ea49 0000 	orr.w	r0, r9, r0
 8022e26:	f101 0901 	add.w	r9, r1, #1
 8022e2a:	eb09 2911 	add.w	r9, r9, r1, lsr #8
 8022e2e:	ea4f 1959 	mov.w	r9, r9, lsr #5
 8022e32:	f409 69fc 	and.w	r9, r9, #2016	@ 0x7e0
 8022e36:	ea40 0009 	orr.w	r0, r0, r9
 8022e3a:	f8ac 0000 	strh.w	r0, [ip]
 8022e3e:	4447      	add	r7, r8
 8022e40:	b2bf      	uxth	r7, r7
 8022e42:	2f07      	cmp	r7, #7
 8022e44:	bf89      	itett	hi
 8022e46:	9b28      	ldrhi	r3, [sp, #160]	@ 0xa0
 8022e48:	fa42 f208 	asrls.w	r2, r2, r8
 8022e4c:	2700      	movhi	r7, #0
 8022e4e:	785a      	ldrbhi	r2, [r3, #1]
 8022e50:	bf8a      	itet	hi
 8022e52:	3301      	addhi	r3, #1
 8022e54:	b2d2      	uxtbls	r2, r2
 8022e56:	9328      	strhi	r3, [sp, #160]	@ 0xa0
 8022e58:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8022e5a:	449c      	add	ip, r3
 8022e5c:	e792      	b.n	8022d84 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x208>
 8022e5e:	441d      	add	r5, r3
 8022e60:	b22d      	sxth	r5, r5
 8022e62:	e6c9      	b.n	8022bf8 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x7c>
 8022e64:	f1ba 0f01 	cmp.w	sl, #1
 8022e68:	f47f af02 	bne.w	8022c70 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0xf4>
 8022e6c:	f1bb 0f01 	cmp.w	fp, #1
 8022e70:	f47f aefe 	bne.w	8022c70 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0xf4>
 8022e74:	f8df b0ac 	ldr.w	fp, [pc, #172]	@ 8022f24 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x3a8>
 8022e78:	f8db 0000 	ldr.w	r0, [fp]
 8022e7c:	6803      	ldr	r3, [r0, #0]
 8022e7e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8022e80:	4798      	blx	r3
 8022e82:	f410 7380 	ands.w	r3, r0, #256	@ 0x100
 8022e86:	465a      	mov	r2, fp
 8022e88:	d006      	beq.n	8022e98 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x31c>
 8022e8a:	f1b8 0f04 	cmp.w	r8, #4
 8022e8e:	d140      	bne.n	8022f12 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x396>
 8022e90:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 8022e92:	3300      	adds	r3, #0
 8022e94:	bf18      	it	ne
 8022e96:	2301      	movne	r3, #1
 8022e98:	0580      	lsls	r0, r0, #22
 8022e9a:	d563      	bpl.n	8022f64 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x3e8>
 8022e9c:	f1b8 0f08 	cmp.w	r8, #8
 8022ea0:	d160      	bne.n	8022f64 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x3e8>
 8022ea2:	2b00      	cmp	r3, #0
 8022ea4:	bf0c      	ite	eq
 8022ea6:	f44f 7100 	moveq.w	r1, #512	@ 0x200
 8022eaa:	f44f 7180 	movne.w	r1, #256	@ 0x100
 8022eae:	2e00      	cmp	r6, #0
 8022eb0:	f47f aede 	bne.w	8022c70 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0xf4>
 8022eb4:	2f00      	cmp	r7, #0
 8022eb6:	f47f aedb 	bne.w	8022c70 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0xf4>
 8022eba:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8022ebc:	9810      	ldr	r0, [sp, #64]	@ 0x40
 8022ebe:	18eb      	adds	r3, r5, r3
 8022ec0:	4283      	cmp	r3, r0
 8022ec2:	f73f aed5 	bgt.w	8022c70 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0xf4>
 8022ec6:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8022ec8:	980f      	ldr	r0, [sp, #60]	@ 0x3c
 8022eca:	444b      	add	r3, r9
 8022ecc:	4283      	cmp	r3, r0
 8022ece:	f73f aecf 	bgt.w	8022c70 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0xf4>
 8022ed2:	f1b8 0f08 	cmp.w	r8, #8
 8022ed6:	6810      	ldr	r0, [r2, #0]
 8022ed8:	f04f 0600 	mov.w	r6, #0
 8022edc:	f8bd 305e 	ldrh.w	r3, [sp, #94]	@ 0x5e
 8022ee0:	bf18      	it	ne
 8022ee2:	3401      	addne	r4, #1
 8022ee4:	6805      	ldr	r5, [r0, #0]
 8022ee6:	f8bd 205c 	ldrh.w	r2, [sp, #92]	@ 0x5c
 8022eea:	bf18      	it	ne
 8022eec:	f024 0401 	bicne.w	r4, r4, #1
 8022ef0:	e9cd 1605 	strd	r1, r6, [sp, #20]
 8022ef4:	990c      	ldr	r1, [sp, #48]	@ 0x30
 8022ef6:	bf18      	it	ne
 8022ef8:	b2a4      	uxthne	r4, r4
 8022efa:	9104      	str	r1, [sp, #16]
 8022efc:	992a      	ldr	r1, [sp, #168]	@ 0xa8
 8022efe:	e9cd 4900 	strd	r4, r9, [sp]
 8022f02:	e9cd 4102 	strd	r4, r1, [sp, #8]
 8022f06:	9928      	ldr	r1, [sp, #160]	@ 0xa0
 8022f08:	6d6c      	ldr	r4, [r5, #84]	@ 0x54
 8022f0a:	47a0      	blx	r4
 8022f0c:	b019      	add	sp, #100	@ 0x64
 8022f0e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8022f12:	2300      	movs	r3, #0
 8022f14:	e7c0      	b.n	8022e98 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x31c>
 8022f16:	980b      	ldr	r0, [sp, #44]	@ 0x2c
 8022f18:	e6f7      	b.n	8022d0a <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x18e>
 8022f1a:	9810      	ldr	r0, [sp, #64]	@ 0x40
 8022f1c:	e78d      	b.n	8022e3a <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x2be>
 8022f1e:	bf00      	nop
 8022f20:	2400b878 	.word	0x2400b878
 8022f24:	2400b880 	.word	0x2400b880
 8022f28:	2400b87a 	.word	0x2400b87a
 8022f2c:	00fff800 	.word	0x00fff800
 8022f30:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8022f32:	b153      	cbz	r3, 8022f4a <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x3ce>
 8022f34:	441f      	add	r7, r3
 8022f36:	9b28      	ldr	r3, [sp, #160]	@ 0xa0
 8022f38:	b2bf      	uxth	r7, r7
 8022f3a:	eb03 03d7 	add.w	r3, r3, r7, lsr #3
 8022f3e:	f007 0707 	and.w	r7, r7, #7
 8022f42:	781a      	ldrb	r2, [r3, #0]
 8022f44:	9328      	str	r3, [sp, #160]	@ 0xa0
 8022f46:	413a      	asrs	r2, r7
 8022f48:	b2d2      	uxtb	r2, r2
 8022f4a:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8022f4c:	445b      	add	r3, fp
 8022f4e:	930a      	str	r3, [sp, #40]	@ 0x28
 8022f50:	e711      	b.n	8022d76 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x1fa>
 8022f52:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8022f54:	2b00      	cmp	r3, #0
 8022f56:	d1d9      	bne.n	8022f0c <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x390>
 8022f58:	4b05      	ldr	r3, [pc, #20]	@ (8022f70 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x3f4>)
 8022f5a:	6818      	ldr	r0, [r3, #0]
 8022f5c:	6803      	ldr	r3, [r0, #0]
 8022f5e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8022f60:	4798      	blx	r3
 8022f62:	e7d3      	b.n	8022f0c <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x390>
 8022f64:	2b00      	cmp	r3, #0
 8022f66:	f43f ae83 	beq.w	8022c70 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0xf4>
 8022f6a:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8022f6e:	e79e      	b.n	8022eae <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x332>
 8022f70:	2400b880 	.word	0x2400b880

08022f74 <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB565_BilinearInterpolationEv>:
 8022f74:	b538      	push	{r3, r4, r5, lr}
 8022f76:	4c15      	ldr	r4, [pc, #84]	@ (8022fcc <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB565_BilinearInterpolationEv+0x58>)
 8022f78:	4605      	mov	r5, r0
 8022f7a:	7823      	ldrb	r3, [r4, #0]
 8022f7c:	f3bf 8f5b 	dmb	ish
 8022f80:	07da      	lsls	r2, r3, #31
 8022f82:	d40b      	bmi.n	8022f9c <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB565_BilinearInterpolationEv+0x28>
 8022f84:	4620      	mov	r0, r4
 8022f86:	f007 fca8 	bl	802a8da <__cxa_guard_acquire>
 8022f8a:	b138      	cbz	r0, 8022f9c <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB565_BilinearInterpolationEv+0x28>
 8022f8c:	4620      	mov	r0, r4
 8022f8e:	f007 fcb0 	bl	802a8f2 <__cxa_guard_release>
 8022f92:	4a0f      	ldr	r2, [pc, #60]	@ (8022fd0 <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB565_BilinearInterpolationEv+0x5c>)
 8022f94:	490f      	ldr	r1, [pc, #60]	@ (8022fd4 <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB565_BilinearInterpolationEv+0x60>)
 8022f96:	4810      	ldr	r0, [pc, #64]	@ (8022fd8 <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB565_BilinearInterpolationEv+0x64>)
 8022f98:	f007 fc98 	bl	802a8cc <__aeabi_atexit>
 8022f9c:	4c0f      	ldr	r4, [pc, #60]	@ (8022fdc <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB565_BilinearInterpolationEv+0x68>)
 8022f9e:	7823      	ldrb	r3, [r4, #0]
 8022fa0:	f3bf 8f5b 	dmb	ish
 8022fa4:	07db      	lsls	r3, r3, #31
 8022fa6:	d40b      	bmi.n	8022fc0 <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB565_BilinearInterpolationEv+0x4c>
 8022fa8:	4620      	mov	r0, r4
 8022faa:	f007 fc96 	bl	802a8da <__cxa_guard_acquire>
 8022fae:	b138      	cbz	r0, 8022fc0 <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB565_BilinearInterpolationEv+0x4c>
 8022fb0:	4620      	mov	r0, r4
 8022fb2:	f007 fc9e 	bl	802a8f2 <__cxa_guard_release>
 8022fb6:	4a06      	ldr	r2, [pc, #24]	@ (8022fd0 <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB565_BilinearInterpolationEv+0x5c>)
 8022fb8:	4909      	ldr	r1, [pc, #36]	@ (8022fe0 <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB565_BilinearInterpolationEv+0x6c>)
 8022fba:	480a      	ldr	r0, [pc, #40]	@ (8022fe4 <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB565_BilinearInterpolationEv+0x70>)
 8022fbc:	f007 fc86 	bl	802a8cc <__aeabi_atexit>
 8022fc0:	4b05      	ldr	r3, [pc, #20]	@ (8022fd8 <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB565_BilinearInterpolationEv+0x64>)
 8022fc2:	612b      	str	r3, [r5, #16]
 8022fc4:	4b07      	ldr	r3, [pc, #28]	@ (8022fe4 <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB565_BilinearInterpolationEv+0x70>)
 8022fc6:	616b      	str	r3, [r5, #20]
 8022fc8:	bd38      	pop	{r3, r4, r5, pc}
 8022fca:	bf00      	nop
 8022fcc:	2400b94c 	.word	0x2400b94c
 8022fd0:	24000000 	.word	0x24000000
 8022fd4:	08021173 	.word	0x08021173
 8022fd8:	24000098 	.word	0x24000098
 8022fdc:	2400b950 	.word	0x2400b950
 8022fe0:	08021171 	.word	0x08021171
 8022fe4:	2400009c 	.word	0x2400009c

08022fe8 <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB565_NearestNeighborEv>:
 8022fe8:	b538      	push	{r3, r4, r5, lr}
 8022fea:	4c15      	ldr	r4, [pc, #84]	@ (8023040 <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB565_NearestNeighborEv+0x58>)
 8022fec:	4605      	mov	r5, r0
 8022fee:	7823      	ldrb	r3, [r4, #0]
 8022ff0:	f3bf 8f5b 	dmb	ish
 8022ff4:	07da      	lsls	r2, r3, #31
 8022ff6:	d40b      	bmi.n	8023010 <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB565_NearestNeighborEv+0x28>
 8022ff8:	4620      	mov	r0, r4
 8022ffa:	f007 fc6e 	bl	802a8da <__cxa_guard_acquire>
 8022ffe:	b138      	cbz	r0, 8023010 <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB565_NearestNeighborEv+0x28>
 8023000:	4620      	mov	r0, r4
 8023002:	f007 fc76 	bl	802a8f2 <__cxa_guard_release>
 8023006:	4a0f      	ldr	r2, [pc, #60]	@ (8023044 <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB565_NearestNeighborEv+0x5c>)
 8023008:	490f      	ldr	r1, [pc, #60]	@ (8023048 <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB565_NearestNeighborEv+0x60>)
 802300a:	4810      	ldr	r0, [pc, #64]	@ (802304c <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB565_NearestNeighborEv+0x64>)
 802300c:	f007 fc5e 	bl	802a8cc <__aeabi_atexit>
 8023010:	4c0f      	ldr	r4, [pc, #60]	@ (8023050 <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB565_NearestNeighborEv+0x68>)
 8023012:	7823      	ldrb	r3, [r4, #0]
 8023014:	f3bf 8f5b 	dmb	ish
 8023018:	07db      	lsls	r3, r3, #31
 802301a:	d40b      	bmi.n	8023034 <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB565_NearestNeighborEv+0x4c>
 802301c:	4620      	mov	r0, r4
 802301e:	f007 fc5c 	bl	802a8da <__cxa_guard_acquire>
 8023022:	b138      	cbz	r0, 8023034 <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB565_NearestNeighborEv+0x4c>
 8023024:	4620      	mov	r0, r4
 8023026:	f007 fc64 	bl	802a8f2 <__cxa_guard_release>
 802302a:	4a06      	ldr	r2, [pc, #24]	@ (8023044 <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB565_NearestNeighborEv+0x5c>)
 802302c:	4909      	ldr	r1, [pc, #36]	@ (8023054 <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB565_NearestNeighborEv+0x6c>)
 802302e:	480a      	ldr	r0, [pc, #40]	@ (8023058 <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB565_NearestNeighborEv+0x70>)
 8023030:	f007 fc4c 	bl	802a8cc <__aeabi_atexit>
 8023034:	4b05      	ldr	r3, [pc, #20]	@ (802304c <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB565_NearestNeighborEv+0x64>)
 8023036:	60ab      	str	r3, [r5, #8]
 8023038:	4b07      	ldr	r3, [pc, #28]	@ (8023058 <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB565_NearestNeighborEv+0x70>)
 802303a:	60eb      	str	r3, [r5, #12]
 802303c:	bd38      	pop	{r3, r4, r5, pc}
 802303e:	bf00      	nop
 8023040:	2400b924 	.word	0x2400b924
 8023044:	24000000 	.word	0x24000000
 8023048:	08021177 	.word	0x08021177
 802304c:	24000070 	.word	0x24000070
 8023050:	2400b928 	.word	0x2400b928
 8023054:	08021175 	.word	0x08021175
 8023058:	24000074 	.word	0x24000074

0802305c <_ZN8touchgfx8LCD16bpp28enableTextureMapperL8_RGB565Ev>:
 802305c:	b510      	push	{r4, lr}
 802305e:	4604      	mov	r4, r0
 8023060:	f7ff ff88 	bl	8022f74 <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB565_BilinearInterpolationEv>
 8023064:	4620      	mov	r0, r4
 8023066:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 802306a:	f7ff bfbd 	b.w	8022fe8 <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB565_NearestNeighborEv>
	...

08023070 <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv>:
 8023070:	b538      	push	{r3, r4, r5, lr}
 8023072:	4c15      	ldr	r4, [pc, #84]	@ (80230c8 <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x58>)
 8023074:	4605      	mov	r5, r0
 8023076:	7823      	ldrb	r3, [r4, #0]
 8023078:	f3bf 8f5b 	dmb	ish
 802307c:	07da      	lsls	r2, r3, #31
 802307e:	d40b      	bmi.n	8023098 <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x28>
 8023080:	4620      	mov	r0, r4
 8023082:	f007 fc2a 	bl	802a8da <__cxa_guard_acquire>
 8023086:	b138      	cbz	r0, 8023098 <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x28>
 8023088:	4620      	mov	r0, r4
 802308a:	f007 fc32 	bl	802a8f2 <__cxa_guard_release>
 802308e:	4a0f      	ldr	r2, [pc, #60]	@ (80230cc <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x5c>)
 8023090:	490f      	ldr	r1, [pc, #60]	@ (80230d0 <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x60>)
 8023092:	4810      	ldr	r0, [pc, #64]	@ (80230d4 <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x64>)
 8023094:	f007 fc1a 	bl	802a8cc <__aeabi_atexit>
 8023098:	4c0f      	ldr	r4, [pc, #60]	@ (80230d8 <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x68>)
 802309a:	7823      	ldrb	r3, [r4, #0]
 802309c:	f3bf 8f5b 	dmb	ish
 80230a0:	07db      	lsls	r3, r3, #31
 80230a2:	d40b      	bmi.n	80230bc <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x4c>
 80230a4:	4620      	mov	r0, r4
 80230a6:	f007 fc18 	bl	802a8da <__cxa_guard_acquire>
 80230aa:	b138      	cbz	r0, 80230bc <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x4c>
 80230ac:	4620      	mov	r0, r4
 80230ae:	f007 fc20 	bl	802a8f2 <__cxa_guard_release>
 80230b2:	4a06      	ldr	r2, [pc, #24]	@ (80230cc <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x5c>)
 80230b4:	4909      	ldr	r1, [pc, #36]	@ (80230dc <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x6c>)
 80230b6:	480a      	ldr	r0, [pc, #40]	@ (80230e0 <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x70>)
 80230b8:	f007 fc08 	bl	802a8cc <__aeabi_atexit>
 80230bc:	4b05      	ldr	r3, [pc, #20]	@ (80230d4 <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x64>)
 80230be:	622b      	str	r3, [r5, #32]
 80230c0:	4b07      	ldr	r3, [pc, #28]	@ (80230e0 <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x70>)
 80230c2:	626b      	str	r3, [r5, #36]	@ 0x24
 80230c4:	bd38      	pop	{r3, r4, r5, pc}
 80230c6:	bf00      	nop
 80230c8:	2400b954 	.word	0x2400b954
 80230cc:	24000000 	.word	0x24000000
 80230d0:	0802116b 	.word	0x0802116b
 80230d4:	240000a0 	.word	0x240000a0
 80230d8:	2400b958 	.word	0x2400b958
 80230dc:	08021169 	.word	0x08021169
 80230e0:	240000a4 	.word	0x240000a4

080230e4 <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB888_NearestNeighborEv>:
 80230e4:	b538      	push	{r3, r4, r5, lr}
 80230e6:	4c15      	ldr	r4, [pc, #84]	@ (802313c <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x58>)
 80230e8:	4605      	mov	r5, r0
 80230ea:	7823      	ldrb	r3, [r4, #0]
 80230ec:	f3bf 8f5b 	dmb	ish
 80230f0:	07da      	lsls	r2, r3, #31
 80230f2:	d40b      	bmi.n	802310c <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x28>
 80230f4:	4620      	mov	r0, r4
 80230f6:	f007 fbf0 	bl	802a8da <__cxa_guard_acquire>
 80230fa:	b138      	cbz	r0, 802310c <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x28>
 80230fc:	4620      	mov	r0, r4
 80230fe:	f007 fbf8 	bl	802a8f2 <__cxa_guard_release>
 8023102:	4a0f      	ldr	r2, [pc, #60]	@ (8023140 <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x5c>)
 8023104:	490f      	ldr	r1, [pc, #60]	@ (8023144 <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x60>)
 8023106:	4810      	ldr	r0, [pc, #64]	@ (8023148 <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x64>)
 8023108:	f007 fbe0 	bl	802a8cc <__aeabi_atexit>
 802310c:	4c0f      	ldr	r4, [pc, #60]	@ (802314c <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x68>)
 802310e:	7823      	ldrb	r3, [r4, #0]
 8023110:	f3bf 8f5b 	dmb	ish
 8023114:	07db      	lsls	r3, r3, #31
 8023116:	d40b      	bmi.n	8023130 <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x4c>
 8023118:	4620      	mov	r0, r4
 802311a:	f007 fbde 	bl	802a8da <__cxa_guard_acquire>
 802311e:	b138      	cbz	r0, 8023130 <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x4c>
 8023120:	4620      	mov	r0, r4
 8023122:	f007 fbe6 	bl	802a8f2 <__cxa_guard_release>
 8023126:	4a06      	ldr	r2, [pc, #24]	@ (8023140 <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x5c>)
 8023128:	4909      	ldr	r1, [pc, #36]	@ (8023150 <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x6c>)
 802312a:	480a      	ldr	r0, [pc, #40]	@ (8023154 <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x70>)
 802312c:	f007 fbce 	bl	802a8cc <__aeabi_atexit>
 8023130:	4b05      	ldr	r3, [pc, #20]	@ (8023148 <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x64>)
 8023132:	61ab      	str	r3, [r5, #24]
 8023134:	4b07      	ldr	r3, [pc, #28]	@ (8023154 <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x70>)
 8023136:	61eb      	str	r3, [r5, #28]
 8023138:	bd38      	pop	{r3, r4, r5, pc}
 802313a:	bf00      	nop
 802313c:	2400b92c 	.word	0x2400b92c
 8023140:	24000000 	.word	0x24000000
 8023144:	0802116f 	.word	0x0802116f
 8023148:	24000078 	.word	0x24000078
 802314c:	2400b930 	.word	0x2400b930
 8023150:	0802116d 	.word	0x0802116d
 8023154:	2400007c 	.word	0x2400007c

08023158 <_ZN8touchgfx8LCD16bpp28enableTextureMapperL8_RGB888Ev>:
 8023158:	b510      	push	{r4, lr}
 802315a:	4604      	mov	r4, r0
 802315c:	f7ff ff88 	bl	8023070 <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv>
 8023160:	4620      	mov	r0, r4
 8023162:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8023166:	f7ff bfbd 	b.w	80230e4 <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB888_NearestNeighborEv>
	...

0802316c <_ZN8touchgfx8LCD16bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv>:
 802316c:	b538      	push	{r3, r4, r5, lr}
 802316e:	4c15      	ldr	r4, [pc, #84]	@ (80231c4 <_ZN8touchgfx8LCD16bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x58>)
 8023170:	4605      	mov	r5, r0
 8023172:	7823      	ldrb	r3, [r4, #0]
 8023174:	f3bf 8f5b 	dmb	ish
 8023178:	07da      	lsls	r2, r3, #31
 802317a:	d40b      	bmi.n	8023194 <_ZN8touchgfx8LCD16bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x28>
 802317c:	4620      	mov	r0, r4
 802317e:	f007 fbac 	bl	802a8da <__cxa_guard_acquire>
 8023182:	b138      	cbz	r0, 8023194 <_ZN8touchgfx8LCD16bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x28>
 8023184:	4620      	mov	r0, r4
 8023186:	f007 fbb4 	bl	802a8f2 <__cxa_guard_release>
 802318a:	4a0f      	ldr	r2, [pc, #60]	@ (80231c8 <_ZN8touchgfx8LCD16bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x5c>)
 802318c:	490f      	ldr	r1, [pc, #60]	@ (80231cc <_ZN8touchgfx8LCD16bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x60>)
 802318e:	4810      	ldr	r0, [pc, #64]	@ (80231d0 <_ZN8touchgfx8LCD16bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x64>)
 8023190:	f007 fb9c 	bl	802a8cc <__aeabi_atexit>
 8023194:	4c0f      	ldr	r4, [pc, #60]	@ (80231d4 <_ZN8touchgfx8LCD16bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x68>)
 8023196:	7823      	ldrb	r3, [r4, #0]
 8023198:	f3bf 8f5b 	dmb	ish
 802319c:	07db      	lsls	r3, r3, #31
 802319e:	d40b      	bmi.n	80231b8 <_ZN8touchgfx8LCD16bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x4c>
 80231a0:	4620      	mov	r0, r4
 80231a2:	f007 fb9a 	bl	802a8da <__cxa_guard_acquire>
 80231a6:	b138      	cbz	r0, 80231b8 <_ZN8touchgfx8LCD16bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x4c>
 80231a8:	4620      	mov	r0, r4
 80231aa:	f007 fba2 	bl	802a8f2 <__cxa_guard_release>
 80231ae:	4a06      	ldr	r2, [pc, #24]	@ (80231c8 <_ZN8touchgfx8LCD16bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x5c>)
 80231b0:	4909      	ldr	r1, [pc, #36]	@ (80231d8 <_ZN8touchgfx8LCD16bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x6c>)
 80231b2:	480a      	ldr	r0, [pc, #40]	@ (80231dc <_ZN8touchgfx8LCD16bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x70>)
 80231b4:	f007 fb8a 	bl	802a8cc <__aeabi_atexit>
 80231b8:	4b05      	ldr	r3, [pc, #20]	@ (80231d0 <_ZN8touchgfx8LCD16bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x64>)
 80231ba:	632b      	str	r3, [r5, #48]	@ 0x30
 80231bc:	4b07      	ldr	r3, [pc, #28]	@ (80231dc <_ZN8touchgfx8LCD16bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x70>)
 80231be:	636b      	str	r3, [r5, #52]	@ 0x34
 80231c0:	bd38      	pop	{r3, r4, r5, pc}
 80231c2:	bf00      	nop
 80231c4:	2400b964 	.word	0x2400b964
 80231c8:	24000000 	.word	0x24000000
 80231cc:	08021163 	.word	0x08021163
 80231d0:	240000b0 	.word	0x240000b0
 80231d4:	2400b968 	.word	0x2400b968
 80231d8:	08021161 	.word	0x08021161
 80231dc:	240000b4 	.word	0x240000b4

080231e0 <_ZN8touchgfx8LCD16bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv>:
 80231e0:	b538      	push	{r3, r4, r5, lr}
 80231e2:	4c15      	ldr	r4, [pc, #84]	@ (8023238 <_ZN8touchgfx8LCD16bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x58>)
 80231e4:	4605      	mov	r5, r0
 80231e6:	7823      	ldrb	r3, [r4, #0]
 80231e8:	f3bf 8f5b 	dmb	ish
 80231ec:	07da      	lsls	r2, r3, #31
 80231ee:	d40b      	bmi.n	8023208 <_ZN8touchgfx8LCD16bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x28>
 80231f0:	4620      	mov	r0, r4
 80231f2:	f007 fb72 	bl	802a8da <__cxa_guard_acquire>
 80231f6:	b138      	cbz	r0, 8023208 <_ZN8touchgfx8LCD16bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x28>
 80231f8:	4620      	mov	r0, r4
 80231fa:	f007 fb7a 	bl	802a8f2 <__cxa_guard_release>
 80231fe:	4a0f      	ldr	r2, [pc, #60]	@ (802323c <_ZN8touchgfx8LCD16bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x5c>)
 8023200:	490f      	ldr	r1, [pc, #60]	@ (8023240 <_ZN8touchgfx8LCD16bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x60>)
 8023202:	4810      	ldr	r0, [pc, #64]	@ (8023244 <_ZN8touchgfx8LCD16bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x64>)
 8023204:	f007 fb62 	bl	802a8cc <__aeabi_atexit>
 8023208:	4c0f      	ldr	r4, [pc, #60]	@ (8023248 <_ZN8touchgfx8LCD16bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x68>)
 802320a:	7823      	ldrb	r3, [r4, #0]
 802320c:	f3bf 8f5b 	dmb	ish
 8023210:	07db      	lsls	r3, r3, #31
 8023212:	d40b      	bmi.n	802322c <_ZN8touchgfx8LCD16bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x4c>
 8023214:	4620      	mov	r0, r4
 8023216:	f007 fb60 	bl	802a8da <__cxa_guard_acquire>
 802321a:	b138      	cbz	r0, 802322c <_ZN8touchgfx8LCD16bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x4c>
 802321c:	4620      	mov	r0, r4
 802321e:	f007 fb68 	bl	802a8f2 <__cxa_guard_release>
 8023222:	4a06      	ldr	r2, [pc, #24]	@ (802323c <_ZN8touchgfx8LCD16bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x5c>)
 8023224:	4909      	ldr	r1, [pc, #36]	@ (802324c <_ZN8touchgfx8LCD16bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x6c>)
 8023226:	480a      	ldr	r0, [pc, #40]	@ (8023250 <_ZN8touchgfx8LCD16bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x70>)
 8023228:	f007 fb50 	bl	802a8cc <__aeabi_atexit>
 802322c:	4b05      	ldr	r3, [pc, #20]	@ (8023244 <_ZN8touchgfx8LCD16bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x64>)
 802322e:	62ab      	str	r3, [r5, #40]	@ 0x28
 8023230:	4b07      	ldr	r3, [pc, #28]	@ (8023250 <_ZN8touchgfx8LCD16bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x70>)
 8023232:	62eb      	str	r3, [r5, #44]	@ 0x2c
 8023234:	bd38      	pop	{r3, r4, r5, pc}
 8023236:	bf00      	nop
 8023238:	2400b934 	.word	0x2400b934
 802323c:	24000000 	.word	0x24000000
 8023240:	08021167 	.word	0x08021167
 8023244:	24000080 	.word	0x24000080
 8023248:	2400b938 	.word	0x2400b938
 802324c:	08021165 	.word	0x08021165
 8023250:	24000084 	.word	0x24000084

08023254 <_ZN8touchgfx8LCD16bpp30enableTextureMapperL8_ARGB8888Ev>:
 8023254:	b510      	push	{r4, lr}
 8023256:	4604      	mov	r4, r0
 8023258:	f7ff ff88 	bl	802316c <_ZN8touchgfx8LCD16bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv>
 802325c:	4620      	mov	r0, r4
 802325e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8023262:	f7ff bfbd 	b.w	80231e0 <_ZN8touchgfx8LCD16bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv>
	...

08023268 <_ZN8touchgfx8LCD16bpp54enableTextureMapperRGB565_Opaque_BilinearInterpolationEv>:
 8023268:	b538      	push	{r3, r4, r5, lr}
 802326a:	4c15      	ldr	r4, [pc, #84]	@ (80232c0 <_ZN8touchgfx8LCD16bpp54enableTextureMapperRGB565_Opaque_BilinearInterpolationEv+0x58>)
 802326c:	4605      	mov	r5, r0
 802326e:	7823      	ldrb	r3, [r4, #0]
 8023270:	f3bf 8f5b 	dmb	ish
 8023274:	07da      	lsls	r2, r3, #31
 8023276:	d40b      	bmi.n	8023290 <_ZN8touchgfx8LCD16bpp54enableTextureMapperRGB565_Opaque_BilinearInterpolationEv+0x28>
 8023278:	4620      	mov	r0, r4
 802327a:	f007 fb2e 	bl	802a8da <__cxa_guard_acquire>
 802327e:	b138      	cbz	r0, 8023290 <_ZN8touchgfx8LCD16bpp54enableTextureMapperRGB565_Opaque_BilinearInterpolationEv+0x28>
 8023280:	4620      	mov	r0, r4
 8023282:	f007 fb36 	bl	802a8f2 <__cxa_guard_release>
 8023286:	4a0f      	ldr	r2, [pc, #60]	@ (80232c4 <_ZN8touchgfx8LCD16bpp54enableTextureMapperRGB565_Opaque_BilinearInterpolationEv+0x5c>)
 8023288:	490f      	ldr	r1, [pc, #60]	@ (80232c8 <_ZN8touchgfx8LCD16bpp54enableTextureMapperRGB565_Opaque_BilinearInterpolationEv+0x60>)
 802328a:	4810      	ldr	r0, [pc, #64]	@ (80232cc <_ZN8touchgfx8LCD16bpp54enableTextureMapperRGB565_Opaque_BilinearInterpolationEv+0x64>)
 802328c:	f007 fb1e 	bl	802a8cc <__aeabi_atexit>
 8023290:	4c0f      	ldr	r4, [pc, #60]	@ (80232d0 <_ZN8touchgfx8LCD16bpp54enableTextureMapperRGB565_Opaque_BilinearInterpolationEv+0x68>)
 8023292:	7823      	ldrb	r3, [r4, #0]
 8023294:	f3bf 8f5b 	dmb	ish
 8023298:	07db      	lsls	r3, r3, #31
 802329a:	d40b      	bmi.n	80232b4 <_ZN8touchgfx8LCD16bpp54enableTextureMapperRGB565_Opaque_BilinearInterpolationEv+0x4c>
 802329c:	4620      	mov	r0, r4
 802329e:	f007 fb1c 	bl	802a8da <__cxa_guard_acquire>
 80232a2:	b138      	cbz	r0, 80232b4 <_ZN8touchgfx8LCD16bpp54enableTextureMapperRGB565_Opaque_BilinearInterpolationEv+0x4c>
 80232a4:	4620      	mov	r0, r4
 80232a6:	f007 fb24 	bl	802a8f2 <__cxa_guard_release>
 80232aa:	4a06      	ldr	r2, [pc, #24]	@ (80232c4 <_ZN8touchgfx8LCD16bpp54enableTextureMapperRGB565_Opaque_BilinearInterpolationEv+0x5c>)
 80232ac:	4909      	ldr	r1, [pc, #36]	@ (80232d4 <_ZN8touchgfx8LCD16bpp54enableTextureMapperRGB565_Opaque_BilinearInterpolationEv+0x6c>)
 80232ae:	480a      	ldr	r0, [pc, #40]	@ (80232d8 <_ZN8touchgfx8LCD16bpp54enableTextureMapperRGB565_Opaque_BilinearInterpolationEv+0x70>)
 80232b0:	f007 fb0c 	bl	802a8cc <__aeabi_atexit>
 80232b4:	4b05      	ldr	r3, [pc, #20]	@ (80232cc <_ZN8touchgfx8LCD16bpp54enableTextureMapperRGB565_Opaque_BilinearInterpolationEv+0x64>)
 80232b6:	652b      	str	r3, [r5, #80]	@ 0x50
 80232b8:	4b07      	ldr	r3, [pc, #28]	@ (80232d8 <_ZN8touchgfx8LCD16bpp54enableTextureMapperRGB565_Opaque_BilinearInterpolationEv+0x70>)
 80232ba:	656b      	str	r3, [r5, #84]	@ 0x54
 80232bc:	bd38      	pop	{r3, r4, r5, pc}
 80232be:	bf00      	nop
 80232c0:	2400b96c 	.word	0x2400b96c
 80232c4:	24000000 	.word	0x24000000
 80232c8:	08021153 	.word	0x08021153
 80232cc:	240000b8 	.word	0x240000b8
 80232d0:	2400b970 	.word	0x2400b970
 80232d4:	08021151 	.word	0x08021151
 80232d8:	240000bc 	.word	0x240000bc

080232dc <_ZN8touchgfx8LCD16bpp57enableTextureMapperRGB565_NonOpaque_BilinearInterpolationEv>:
 80232dc:	b538      	push	{r3, r4, r5, lr}
 80232de:	4c15      	ldr	r4, [pc, #84]	@ (8023334 <_ZN8touchgfx8LCD16bpp57enableTextureMapperRGB565_NonOpaque_BilinearInterpolationEv+0x58>)
 80232e0:	4605      	mov	r5, r0
 80232e2:	7823      	ldrb	r3, [r4, #0]
 80232e4:	f3bf 8f5b 	dmb	ish
 80232e8:	07da      	lsls	r2, r3, #31
 80232ea:	d40b      	bmi.n	8023304 <_ZN8touchgfx8LCD16bpp57enableTextureMapperRGB565_NonOpaque_BilinearInterpolationEv+0x28>
 80232ec:	4620      	mov	r0, r4
 80232ee:	f007 faf4 	bl	802a8da <__cxa_guard_acquire>
 80232f2:	b138      	cbz	r0, 8023304 <_ZN8touchgfx8LCD16bpp57enableTextureMapperRGB565_NonOpaque_BilinearInterpolationEv+0x28>
 80232f4:	4620      	mov	r0, r4
 80232f6:	f007 fafc 	bl	802a8f2 <__cxa_guard_release>
 80232fa:	4a0f      	ldr	r2, [pc, #60]	@ (8023338 <_ZN8touchgfx8LCD16bpp57enableTextureMapperRGB565_NonOpaque_BilinearInterpolationEv+0x5c>)
 80232fc:	490f      	ldr	r1, [pc, #60]	@ (802333c <_ZN8touchgfx8LCD16bpp57enableTextureMapperRGB565_NonOpaque_BilinearInterpolationEv+0x60>)
 80232fe:	4810      	ldr	r0, [pc, #64]	@ (8023340 <_ZN8touchgfx8LCD16bpp57enableTextureMapperRGB565_NonOpaque_BilinearInterpolationEv+0x64>)
 8023300:	f007 fae4 	bl	802a8cc <__aeabi_atexit>
 8023304:	4c0f      	ldr	r4, [pc, #60]	@ (8023344 <_ZN8touchgfx8LCD16bpp57enableTextureMapperRGB565_NonOpaque_BilinearInterpolationEv+0x68>)
 8023306:	7823      	ldrb	r3, [r4, #0]
 8023308:	f3bf 8f5b 	dmb	ish
 802330c:	07db      	lsls	r3, r3, #31
 802330e:	d40b      	bmi.n	8023328 <_ZN8touchgfx8LCD16bpp57enableTextureMapperRGB565_NonOpaque_BilinearInterpolationEv+0x4c>
 8023310:	4620      	mov	r0, r4
 8023312:	f007 fae2 	bl	802a8da <__cxa_guard_acquire>
 8023316:	b138      	cbz	r0, 8023328 <_ZN8touchgfx8LCD16bpp57enableTextureMapperRGB565_NonOpaque_BilinearInterpolationEv+0x4c>
 8023318:	4620      	mov	r0, r4
 802331a:	f007 faea 	bl	802a8f2 <__cxa_guard_release>
 802331e:	4a06      	ldr	r2, [pc, #24]	@ (8023338 <_ZN8touchgfx8LCD16bpp57enableTextureMapperRGB565_NonOpaque_BilinearInterpolationEv+0x5c>)
 8023320:	4909      	ldr	r1, [pc, #36]	@ (8023348 <_ZN8touchgfx8LCD16bpp57enableTextureMapperRGB565_NonOpaque_BilinearInterpolationEv+0x6c>)
 8023322:	480a      	ldr	r0, [pc, #40]	@ (802334c <_ZN8touchgfx8LCD16bpp57enableTextureMapperRGB565_NonOpaque_BilinearInterpolationEv+0x70>)
 8023324:	f007 fad2 	bl	802a8cc <__aeabi_atexit>
 8023328:	4b05      	ldr	r3, [pc, #20]	@ (8023340 <_ZN8touchgfx8LCD16bpp57enableTextureMapperRGB565_NonOpaque_BilinearInterpolationEv+0x64>)
 802332a:	64ab      	str	r3, [r5, #72]	@ 0x48
 802332c:	4b07      	ldr	r3, [pc, #28]	@ (802334c <_ZN8touchgfx8LCD16bpp57enableTextureMapperRGB565_NonOpaque_BilinearInterpolationEv+0x70>)
 802332e:	64eb      	str	r3, [r5, #76]	@ 0x4c
 8023330:	bd38      	pop	{r3, r4, r5, pc}
 8023332:	bf00      	nop
 8023334:	2400b974 	.word	0x2400b974
 8023338:	24000000 	.word	0x24000000
 802333c:	08021157 	.word	0x08021157
 8023340:	240000c0 	.word	0x240000c0
 8023344:	2400b978 	.word	0x2400b978
 8023348:	08021155 	.word	0x08021155
 802334c:	240000c4 	.word	0x240000c4

08023350 <_ZN8touchgfx8LCD16bpp48enableTextureMapperRGB565_Opaque_NearestNeighborEv>:
 8023350:	b538      	push	{r3, r4, r5, lr}
 8023352:	4c15      	ldr	r4, [pc, #84]	@ (80233a8 <_ZN8touchgfx8LCD16bpp48enableTextureMapperRGB565_Opaque_NearestNeighborEv+0x58>)
 8023354:	4605      	mov	r5, r0
 8023356:	7823      	ldrb	r3, [r4, #0]
 8023358:	f3bf 8f5b 	dmb	ish
 802335c:	07da      	lsls	r2, r3, #31
 802335e:	d40b      	bmi.n	8023378 <_ZN8touchgfx8LCD16bpp48enableTextureMapperRGB565_Opaque_NearestNeighborEv+0x28>
 8023360:	4620      	mov	r0, r4
 8023362:	f007 faba 	bl	802a8da <__cxa_guard_acquire>
 8023366:	b138      	cbz	r0, 8023378 <_ZN8touchgfx8LCD16bpp48enableTextureMapperRGB565_Opaque_NearestNeighborEv+0x28>
 8023368:	4620      	mov	r0, r4
 802336a:	f007 fac2 	bl	802a8f2 <__cxa_guard_release>
 802336e:	4a0f      	ldr	r2, [pc, #60]	@ (80233ac <_ZN8touchgfx8LCD16bpp48enableTextureMapperRGB565_Opaque_NearestNeighborEv+0x5c>)
 8023370:	490f      	ldr	r1, [pc, #60]	@ (80233b0 <_ZN8touchgfx8LCD16bpp48enableTextureMapperRGB565_Opaque_NearestNeighborEv+0x60>)
 8023372:	4810      	ldr	r0, [pc, #64]	@ (80233b4 <_ZN8touchgfx8LCD16bpp48enableTextureMapperRGB565_Opaque_NearestNeighborEv+0x64>)
 8023374:	f007 faaa 	bl	802a8cc <__aeabi_atexit>
 8023378:	4c0f      	ldr	r4, [pc, #60]	@ (80233b8 <_ZN8touchgfx8LCD16bpp48enableTextureMapperRGB565_Opaque_NearestNeighborEv+0x68>)
 802337a:	7823      	ldrb	r3, [r4, #0]
 802337c:	f3bf 8f5b 	dmb	ish
 8023380:	07db      	lsls	r3, r3, #31
 8023382:	d40b      	bmi.n	802339c <_ZN8touchgfx8LCD16bpp48enableTextureMapperRGB565_Opaque_NearestNeighborEv+0x4c>
 8023384:	4620      	mov	r0, r4
 8023386:	f007 faa8 	bl	802a8da <__cxa_guard_acquire>
 802338a:	b138      	cbz	r0, 802339c <_ZN8touchgfx8LCD16bpp48enableTextureMapperRGB565_Opaque_NearestNeighborEv+0x4c>
 802338c:	4620      	mov	r0, r4
 802338e:	f007 fab0 	bl	802a8f2 <__cxa_guard_release>
 8023392:	4a06      	ldr	r2, [pc, #24]	@ (80233ac <_ZN8touchgfx8LCD16bpp48enableTextureMapperRGB565_Opaque_NearestNeighborEv+0x5c>)
 8023394:	4909      	ldr	r1, [pc, #36]	@ (80233bc <_ZN8touchgfx8LCD16bpp48enableTextureMapperRGB565_Opaque_NearestNeighborEv+0x6c>)
 8023396:	480a      	ldr	r0, [pc, #40]	@ (80233c0 <_ZN8touchgfx8LCD16bpp48enableTextureMapperRGB565_Opaque_NearestNeighborEv+0x70>)
 8023398:	f007 fa98 	bl	802a8cc <__aeabi_atexit>
 802339c:	4b05      	ldr	r3, [pc, #20]	@ (80233b4 <_ZN8touchgfx8LCD16bpp48enableTextureMapperRGB565_Opaque_NearestNeighborEv+0x64>)
 802339e:	642b      	str	r3, [r5, #64]	@ 0x40
 80233a0:	4b07      	ldr	r3, [pc, #28]	@ (80233c0 <_ZN8touchgfx8LCD16bpp48enableTextureMapperRGB565_Opaque_NearestNeighborEv+0x70>)
 80233a2:	646b      	str	r3, [r5, #68]	@ 0x44
 80233a4:	bd38      	pop	{r3, r4, r5, pc}
 80233a6:	bf00      	nop
 80233a8:	2400b93c 	.word	0x2400b93c
 80233ac:	24000000 	.word	0x24000000
 80233b0:	0802115b 	.word	0x0802115b
 80233b4:	24000088 	.word	0x24000088
 80233b8:	2400b940 	.word	0x2400b940
 80233bc:	08021159 	.word	0x08021159
 80233c0:	2400008c 	.word	0x2400008c

080233c4 <_ZN8touchgfx8LCD16bpp51enableTextureMapperRGB565_NonOpaque_NearestNeighborEv>:
 80233c4:	b538      	push	{r3, r4, r5, lr}
 80233c6:	4c15      	ldr	r4, [pc, #84]	@ (802341c <_ZN8touchgfx8LCD16bpp51enableTextureMapperRGB565_NonOpaque_NearestNeighborEv+0x58>)
 80233c8:	4605      	mov	r5, r0
 80233ca:	7823      	ldrb	r3, [r4, #0]
 80233cc:	f3bf 8f5b 	dmb	ish
 80233d0:	07da      	lsls	r2, r3, #31
 80233d2:	d40b      	bmi.n	80233ec <_ZN8touchgfx8LCD16bpp51enableTextureMapperRGB565_NonOpaque_NearestNeighborEv+0x28>
 80233d4:	4620      	mov	r0, r4
 80233d6:	f007 fa80 	bl	802a8da <__cxa_guard_acquire>
 80233da:	b138      	cbz	r0, 80233ec <_ZN8touchgfx8LCD16bpp51enableTextureMapperRGB565_NonOpaque_NearestNeighborEv+0x28>
 80233dc:	4620      	mov	r0, r4
 80233de:	f007 fa88 	bl	802a8f2 <__cxa_guard_release>
 80233e2:	4a0f      	ldr	r2, [pc, #60]	@ (8023420 <_ZN8touchgfx8LCD16bpp51enableTextureMapperRGB565_NonOpaque_NearestNeighborEv+0x5c>)
 80233e4:	490f      	ldr	r1, [pc, #60]	@ (8023424 <_ZN8touchgfx8LCD16bpp51enableTextureMapperRGB565_NonOpaque_NearestNeighborEv+0x60>)
 80233e6:	4810      	ldr	r0, [pc, #64]	@ (8023428 <_ZN8touchgfx8LCD16bpp51enableTextureMapperRGB565_NonOpaque_NearestNeighborEv+0x64>)
 80233e8:	f007 fa70 	bl	802a8cc <__aeabi_atexit>
 80233ec:	4c0f      	ldr	r4, [pc, #60]	@ (802342c <_ZN8touchgfx8LCD16bpp51enableTextureMapperRGB565_NonOpaque_NearestNeighborEv+0x68>)
 80233ee:	7823      	ldrb	r3, [r4, #0]
 80233f0:	f3bf 8f5b 	dmb	ish
 80233f4:	07db      	lsls	r3, r3, #31
 80233f6:	d40b      	bmi.n	8023410 <_ZN8touchgfx8LCD16bpp51enableTextureMapperRGB565_NonOpaque_NearestNeighborEv+0x4c>
 80233f8:	4620      	mov	r0, r4
 80233fa:	f007 fa6e 	bl	802a8da <__cxa_guard_acquire>
 80233fe:	b138      	cbz	r0, 8023410 <_ZN8touchgfx8LCD16bpp51enableTextureMapperRGB565_NonOpaque_NearestNeighborEv+0x4c>
 8023400:	4620      	mov	r0, r4
 8023402:	f007 fa76 	bl	802a8f2 <__cxa_guard_release>
 8023406:	4a06      	ldr	r2, [pc, #24]	@ (8023420 <_ZN8touchgfx8LCD16bpp51enableTextureMapperRGB565_NonOpaque_NearestNeighborEv+0x5c>)
 8023408:	4909      	ldr	r1, [pc, #36]	@ (8023430 <_ZN8touchgfx8LCD16bpp51enableTextureMapperRGB565_NonOpaque_NearestNeighborEv+0x6c>)
 802340a:	480a      	ldr	r0, [pc, #40]	@ (8023434 <_ZN8touchgfx8LCD16bpp51enableTextureMapperRGB565_NonOpaque_NearestNeighborEv+0x70>)
 802340c:	f007 fa5e 	bl	802a8cc <__aeabi_atexit>
 8023410:	4b05      	ldr	r3, [pc, #20]	@ (8023428 <_ZN8touchgfx8LCD16bpp51enableTextureMapperRGB565_NonOpaque_NearestNeighborEv+0x64>)
 8023412:	63ab      	str	r3, [r5, #56]	@ 0x38
 8023414:	4b07      	ldr	r3, [pc, #28]	@ (8023434 <_ZN8touchgfx8LCD16bpp51enableTextureMapperRGB565_NonOpaque_NearestNeighborEv+0x70>)
 8023416:	63eb      	str	r3, [r5, #60]	@ 0x3c
 8023418:	bd38      	pop	{r3, r4, r5, pc}
 802341a:	bf00      	nop
 802341c:	2400b95c 	.word	0x2400b95c
 8023420:	24000000 	.word	0x24000000
 8023424:	0802115f 	.word	0x0802115f
 8023428:	240000a8 	.word	0x240000a8
 802342c:	2400b960 	.word	0x2400b960
 8023430:	0802115d 	.word	0x0802115d
 8023434:	240000ac 	.word	0x240000ac

08023438 <_ZN8touchgfx8LCD16bpp25enableTextureMapperRGB565Ev>:
 8023438:	b510      	push	{r4, lr}
 802343a:	4604      	mov	r4, r0
 802343c:	f7ff ff14 	bl	8023268 <_ZN8touchgfx8LCD16bpp54enableTextureMapperRGB565_Opaque_BilinearInterpolationEv>
 8023440:	4620      	mov	r0, r4
 8023442:	f7ff ff85 	bl	8023350 <_ZN8touchgfx8LCD16bpp48enableTextureMapperRGB565_Opaque_NearestNeighborEv>
 8023446:	4620      	mov	r0, r4
 8023448:	f7ff ff48 	bl	80232dc <_ZN8touchgfx8LCD16bpp57enableTextureMapperRGB565_NonOpaque_BilinearInterpolationEv>
 802344c:	4620      	mov	r0, r4
 802344e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8023452:	f7ff bfb7 	b.w	80233c4 <_ZN8touchgfx8LCD16bpp51enableTextureMapperRGB565_NonOpaque_NearestNeighborEv>
	...

08023458 <_ZN8touchgfx8LCD16bpp49enableTextureMapperARGB8888_BilinearInterpolationEv>:
 8023458:	b538      	push	{r3, r4, r5, lr}
 802345a:	4c15      	ldr	r4, [pc, #84]	@ (80234b0 <_ZN8touchgfx8LCD16bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x58>)
 802345c:	4605      	mov	r5, r0
 802345e:	7823      	ldrb	r3, [r4, #0]
 8023460:	f3bf 8f5b 	dmb	ish
 8023464:	07da      	lsls	r2, r3, #31
 8023466:	d40b      	bmi.n	8023480 <_ZN8touchgfx8LCD16bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x28>
 8023468:	4620      	mov	r0, r4
 802346a:	f007 fa36 	bl	802a8da <__cxa_guard_acquire>
 802346e:	b138      	cbz	r0, 8023480 <_ZN8touchgfx8LCD16bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x28>
 8023470:	4620      	mov	r0, r4
 8023472:	f007 fa3e 	bl	802a8f2 <__cxa_guard_release>
 8023476:	4a0f      	ldr	r2, [pc, #60]	@ (80234b4 <_ZN8touchgfx8LCD16bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x5c>)
 8023478:	490f      	ldr	r1, [pc, #60]	@ (80234b8 <_ZN8touchgfx8LCD16bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x60>)
 802347a:	4810      	ldr	r0, [pc, #64]	@ (80234bc <_ZN8touchgfx8LCD16bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x64>)
 802347c:	f007 fa26 	bl	802a8cc <__aeabi_atexit>
 8023480:	4c0f      	ldr	r4, [pc, #60]	@ (80234c0 <_ZN8touchgfx8LCD16bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x68>)
 8023482:	7823      	ldrb	r3, [r4, #0]
 8023484:	f3bf 8f5b 	dmb	ish
 8023488:	07db      	lsls	r3, r3, #31
 802348a:	d40b      	bmi.n	80234a4 <_ZN8touchgfx8LCD16bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x4c>
 802348c:	4620      	mov	r0, r4
 802348e:	f007 fa24 	bl	802a8da <__cxa_guard_acquire>
 8023492:	b138      	cbz	r0, 80234a4 <_ZN8touchgfx8LCD16bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x4c>
 8023494:	4620      	mov	r0, r4
 8023496:	f007 fa2c 	bl	802a8f2 <__cxa_guard_release>
 802349a:	4a06      	ldr	r2, [pc, #24]	@ (80234b4 <_ZN8touchgfx8LCD16bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x5c>)
 802349c:	4909      	ldr	r1, [pc, #36]	@ (80234c4 <_ZN8touchgfx8LCD16bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x6c>)
 802349e:	480a      	ldr	r0, [pc, #40]	@ (80234c8 <_ZN8touchgfx8LCD16bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x70>)
 80234a0:	f007 fa14 	bl	802a8cc <__aeabi_atexit>
 80234a4:	4b05      	ldr	r3, [pc, #20]	@ (80234bc <_ZN8touchgfx8LCD16bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x64>)
 80234a6:	662b      	str	r3, [r5, #96]	@ 0x60
 80234a8:	4b07      	ldr	r3, [pc, #28]	@ (80234c8 <_ZN8touchgfx8LCD16bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x70>)
 80234aa:	666b      	str	r3, [r5, #100]	@ 0x64
 80234ac:	bd38      	pop	{r3, r4, r5, pc}
 80234ae:	bf00      	nop
 80234b0:	2400b944 	.word	0x2400b944
 80234b4:	24000000 	.word	0x24000000
 80234b8:	0802114b 	.word	0x0802114b
 80234bc:	24000090 	.word	0x24000090
 80234c0:	2400b948 	.word	0x2400b948
 80234c4:	08021149 	.word	0x08021149
 80234c8:	24000094 	.word	0x24000094

080234cc <_ZN8touchgfx8LCD16bpp43enableTextureMapperARGB8888_NearestNeighborEv>:
 80234cc:	b538      	push	{r3, r4, r5, lr}
 80234ce:	4c15      	ldr	r4, [pc, #84]	@ (8023524 <_ZN8touchgfx8LCD16bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x58>)
 80234d0:	4605      	mov	r5, r0
 80234d2:	7823      	ldrb	r3, [r4, #0]
 80234d4:	f3bf 8f5b 	dmb	ish
 80234d8:	07da      	lsls	r2, r3, #31
 80234da:	d40b      	bmi.n	80234f4 <_ZN8touchgfx8LCD16bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x28>
 80234dc:	4620      	mov	r0, r4
 80234de:	f007 f9fc 	bl	802a8da <__cxa_guard_acquire>
 80234e2:	b138      	cbz	r0, 80234f4 <_ZN8touchgfx8LCD16bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x28>
 80234e4:	4620      	mov	r0, r4
 80234e6:	f007 fa04 	bl	802a8f2 <__cxa_guard_release>
 80234ea:	4a0f      	ldr	r2, [pc, #60]	@ (8023528 <_ZN8touchgfx8LCD16bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x5c>)
 80234ec:	490f      	ldr	r1, [pc, #60]	@ (802352c <_ZN8touchgfx8LCD16bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x60>)
 80234ee:	4810      	ldr	r0, [pc, #64]	@ (8023530 <_ZN8touchgfx8LCD16bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x64>)
 80234f0:	f007 f9ec 	bl	802a8cc <__aeabi_atexit>
 80234f4:	4c0f      	ldr	r4, [pc, #60]	@ (8023534 <_ZN8touchgfx8LCD16bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x68>)
 80234f6:	7823      	ldrb	r3, [r4, #0]
 80234f8:	f3bf 8f5b 	dmb	ish
 80234fc:	07db      	lsls	r3, r3, #31
 80234fe:	d40b      	bmi.n	8023518 <_ZN8touchgfx8LCD16bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x4c>
 8023500:	4620      	mov	r0, r4
 8023502:	f007 f9ea 	bl	802a8da <__cxa_guard_acquire>
 8023506:	b138      	cbz	r0, 8023518 <_ZN8touchgfx8LCD16bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x4c>
 8023508:	4620      	mov	r0, r4
 802350a:	f007 f9f2 	bl	802a8f2 <__cxa_guard_release>
 802350e:	4a06      	ldr	r2, [pc, #24]	@ (8023528 <_ZN8touchgfx8LCD16bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x5c>)
 8023510:	4909      	ldr	r1, [pc, #36]	@ (8023538 <_ZN8touchgfx8LCD16bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x6c>)
 8023512:	480a      	ldr	r0, [pc, #40]	@ (802353c <_ZN8touchgfx8LCD16bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x70>)
 8023514:	f007 f9da 	bl	802a8cc <__aeabi_atexit>
 8023518:	4b05      	ldr	r3, [pc, #20]	@ (8023530 <_ZN8touchgfx8LCD16bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x64>)
 802351a:	65ab      	str	r3, [r5, #88]	@ 0x58
 802351c:	4b07      	ldr	r3, [pc, #28]	@ (802353c <_ZN8touchgfx8LCD16bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x70>)
 802351e:	65eb      	str	r3, [r5, #92]	@ 0x5c
 8023520:	bd38      	pop	{r3, r4, r5, pc}
 8023522:	bf00      	nop
 8023524:	2400b91c 	.word	0x2400b91c
 8023528:	24000000 	.word	0x24000000
 802352c:	0802114f 	.word	0x0802114f
 8023530:	24000068 	.word	0x24000068
 8023534:	2400b920 	.word	0x2400b920
 8023538:	0802114d 	.word	0x0802114d
 802353c:	2400006c 	.word	0x2400006c

08023540 <_ZN8touchgfx8LCD16bpp27enableTextureMapperARGB8888Ev>:
 8023540:	b510      	push	{r4, lr}
 8023542:	4604      	mov	r4, r0
 8023544:	f7ff ff88 	bl	8023458 <_ZN8touchgfx8LCD16bpp49enableTextureMapperARGB8888_BilinearInterpolationEv>
 8023548:	4620      	mov	r0, r4
 802354a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 802354e:	f7ff bfbd 	b.w	80234cc <_ZN8touchgfx8LCD16bpp43enableTextureMapperARGB8888_NearestNeighborEv>
	...

08023554 <_ZN8touchgfx8LCD16bpp43enableTextureMapperA4_BilinearInterpolationEv>:
 8023554:	b538      	push	{r3, r4, r5, lr}
 8023556:	4c15      	ldr	r4, [pc, #84]	@ (80235ac <_ZN8touchgfx8LCD16bpp43enableTextureMapperA4_BilinearInterpolationEv+0x58>)
 8023558:	4605      	mov	r5, r0
 802355a:	7823      	ldrb	r3, [r4, #0]
 802355c:	f3bf 8f5b 	dmb	ish
 8023560:	07da      	lsls	r2, r3, #31
 8023562:	d40b      	bmi.n	802357c <_ZN8touchgfx8LCD16bpp43enableTextureMapperA4_BilinearInterpolationEv+0x28>
 8023564:	4620      	mov	r0, r4
 8023566:	f007 f9b8 	bl	802a8da <__cxa_guard_acquire>
 802356a:	b138      	cbz	r0, 802357c <_ZN8touchgfx8LCD16bpp43enableTextureMapperA4_BilinearInterpolationEv+0x28>
 802356c:	4620      	mov	r0, r4
 802356e:	f007 f9c0 	bl	802a8f2 <__cxa_guard_release>
 8023572:	4a0f      	ldr	r2, [pc, #60]	@ (80235b0 <_ZN8touchgfx8LCD16bpp43enableTextureMapperA4_BilinearInterpolationEv+0x5c>)
 8023574:	490f      	ldr	r1, [pc, #60]	@ (80235b4 <_ZN8touchgfx8LCD16bpp43enableTextureMapperA4_BilinearInterpolationEv+0x60>)
 8023576:	4810      	ldr	r0, [pc, #64]	@ (80235b8 <_ZN8touchgfx8LCD16bpp43enableTextureMapperA4_BilinearInterpolationEv+0x64>)
 8023578:	f007 f9a8 	bl	802a8cc <__aeabi_atexit>
 802357c:	4c0f      	ldr	r4, [pc, #60]	@ (80235bc <_ZN8touchgfx8LCD16bpp43enableTextureMapperA4_BilinearInterpolationEv+0x68>)
 802357e:	7823      	ldrb	r3, [r4, #0]
 8023580:	f3bf 8f5b 	dmb	ish
 8023584:	07db      	lsls	r3, r3, #31
 8023586:	d40b      	bmi.n	80235a0 <_ZN8touchgfx8LCD16bpp43enableTextureMapperA4_BilinearInterpolationEv+0x4c>
 8023588:	4620      	mov	r0, r4
 802358a:	f007 f9a6 	bl	802a8da <__cxa_guard_acquire>
 802358e:	b138      	cbz	r0, 80235a0 <_ZN8touchgfx8LCD16bpp43enableTextureMapperA4_BilinearInterpolationEv+0x4c>
 8023590:	4620      	mov	r0, r4
 8023592:	f007 f9ae 	bl	802a8f2 <__cxa_guard_release>
 8023596:	4a06      	ldr	r2, [pc, #24]	@ (80235b0 <_ZN8touchgfx8LCD16bpp43enableTextureMapperA4_BilinearInterpolationEv+0x5c>)
 8023598:	4909      	ldr	r1, [pc, #36]	@ (80235c0 <_ZN8touchgfx8LCD16bpp43enableTextureMapperA4_BilinearInterpolationEv+0x6c>)
 802359a:	480a      	ldr	r0, [pc, #40]	@ (80235c4 <_ZN8touchgfx8LCD16bpp43enableTextureMapperA4_BilinearInterpolationEv+0x70>)
 802359c:	f007 f996 	bl	802a8cc <__aeabi_atexit>
 80235a0:	4b05      	ldr	r3, [pc, #20]	@ (80235b8 <_ZN8touchgfx8LCD16bpp43enableTextureMapperA4_BilinearInterpolationEv+0x64>)
 80235a2:	672b      	str	r3, [r5, #112]	@ 0x70
 80235a4:	4b07      	ldr	r3, [pc, #28]	@ (80235c4 <_ZN8touchgfx8LCD16bpp43enableTextureMapperA4_BilinearInterpolationEv+0x70>)
 80235a6:	676b      	str	r3, [r5, #116]	@ 0x74
 80235a8:	bd38      	pop	{r3, r4, r5, pc}
 80235aa:	bf00      	nop
 80235ac:	2400b914 	.word	0x2400b914
 80235b0:	24000000 	.word	0x24000000
 80235b4:	08021143 	.word	0x08021143
 80235b8:	24000060 	.word	0x24000060
 80235bc:	2400b918 	.word	0x2400b918
 80235c0:	08021141 	.word	0x08021141
 80235c4:	24000064 	.word	0x24000064

080235c8 <_ZN8touchgfx8LCD16bpp37enableTextureMapperA4_NearestNeighborEv>:
 80235c8:	b538      	push	{r3, r4, r5, lr}
 80235ca:	4c15      	ldr	r4, [pc, #84]	@ (8023620 <_ZN8touchgfx8LCD16bpp37enableTextureMapperA4_NearestNeighborEv+0x58>)
 80235cc:	4605      	mov	r5, r0
 80235ce:	7823      	ldrb	r3, [r4, #0]
 80235d0:	f3bf 8f5b 	dmb	ish
 80235d4:	07da      	lsls	r2, r3, #31
 80235d6:	d40b      	bmi.n	80235f0 <_ZN8touchgfx8LCD16bpp37enableTextureMapperA4_NearestNeighborEv+0x28>
 80235d8:	4620      	mov	r0, r4
 80235da:	f007 f97e 	bl	802a8da <__cxa_guard_acquire>
 80235de:	b138      	cbz	r0, 80235f0 <_ZN8touchgfx8LCD16bpp37enableTextureMapperA4_NearestNeighborEv+0x28>
 80235e0:	4620      	mov	r0, r4
 80235e2:	f007 f986 	bl	802a8f2 <__cxa_guard_release>
 80235e6:	4a0f      	ldr	r2, [pc, #60]	@ (8023624 <_ZN8touchgfx8LCD16bpp37enableTextureMapperA4_NearestNeighborEv+0x5c>)
 80235e8:	490f      	ldr	r1, [pc, #60]	@ (8023628 <_ZN8touchgfx8LCD16bpp37enableTextureMapperA4_NearestNeighborEv+0x60>)
 80235ea:	4810      	ldr	r0, [pc, #64]	@ (802362c <_ZN8touchgfx8LCD16bpp37enableTextureMapperA4_NearestNeighborEv+0x64>)
 80235ec:	f007 f96e 	bl	802a8cc <__aeabi_atexit>
 80235f0:	4c0f      	ldr	r4, [pc, #60]	@ (8023630 <_ZN8touchgfx8LCD16bpp37enableTextureMapperA4_NearestNeighborEv+0x68>)
 80235f2:	7823      	ldrb	r3, [r4, #0]
 80235f4:	f3bf 8f5b 	dmb	ish
 80235f8:	07db      	lsls	r3, r3, #31
 80235fa:	d40b      	bmi.n	8023614 <_ZN8touchgfx8LCD16bpp37enableTextureMapperA4_NearestNeighborEv+0x4c>
 80235fc:	4620      	mov	r0, r4
 80235fe:	f007 f96c 	bl	802a8da <__cxa_guard_acquire>
 8023602:	b138      	cbz	r0, 8023614 <_ZN8touchgfx8LCD16bpp37enableTextureMapperA4_NearestNeighborEv+0x4c>
 8023604:	4620      	mov	r0, r4
 8023606:	f007 f974 	bl	802a8f2 <__cxa_guard_release>
 802360a:	4a06      	ldr	r2, [pc, #24]	@ (8023624 <_ZN8touchgfx8LCD16bpp37enableTextureMapperA4_NearestNeighborEv+0x5c>)
 802360c:	4909      	ldr	r1, [pc, #36]	@ (8023634 <_ZN8touchgfx8LCD16bpp37enableTextureMapperA4_NearestNeighborEv+0x6c>)
 802360e:	480a      	ldr	r0, [pc, #40]	@ (8023638 <_ZN8touchgfx8LCD16bpp37enableTextureMapperA4_NearestNeighborEv+0x70>)
 8023610:	f007 f95c 	bl	802a8cc <__aeabi_atexit>
 8023614:	4b05      	ldr	r3, [pc, #20]	@ (802362c <_ZN8touchgfx8LCD16bpp37enableTextureMapperA4_NearestNeighborEv+0x64>)
 8023616:	66ab      	str	r3, [r5, #104]	@ 0x68
 8023618:	4b07      	ldr	r3, [pc, #28]	@ (8023638 <_ZN8touchgfx8LCD16bpp37enableTextureMapperA4_NearestNeighborEv+0x70>)
 802361a:	66eb      	str	r3, [r5, #108]	@ 0x6c
 802361c:	bd38      	pop	{r3, r4, r5, pc}
 802361e:	bf00      	nop
 8023620:	2400b90c 	.word	0x2400b90c
 8023624:	24000000 	.word	0x24000000
 8023628:	08021147 	.word	0x08021147
 802362c:	24000058 	.word	0x24000058
 8023630:	2400b910 	.word	0x2400b910
 8023634:	08021145 	.word	0x08021145
 8023638:	2400005c 	.word	0x2400005c

0802363c <_ZN8touchgfx8LCD16bpp21enableTextureMapperA4Ev>:
 802363c:	b510      	push	{r4, lr}
 802363e:	4604      	mov	r4, r0
 8023640:	f7ff ff88 	bl	8023554 <_ZN8touchgfx8LCD16bpp43enableTextureMapperA4_BilinearInterpolationEv>
 8023644:	4620      	mov	r0, r4
 8023646:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 802364a:	f7ff bfbd 	b.w	80235c8 <_ZN8touchgfx8LCD16bpp37enableTextureMapperA4_NearestNeighborEv>

0802364e <_ZN8touchgfx8LCD16bpp22enableTextureMapperAllEv>:
 802364e:	b510      	push	{r4, lr}
 8023650:	4604      	mov	r4, r0
 8023652:	f7ff fff3 	bl	802363c <_ZN8touchgfx8LCD16bpp21enableTextureMapperA4Ev>
 8023656:	4620      	mov	r0, r4
 8023658:	f7ff ff72 	bl	8023540 <_ZN8touchgfx8LCD16bpp27enableTextureMapperARGB8888Ev>
 802365c:	4620      	mov	r0, r4
 802365e:	f7ff fdf9 	bl	8023254 <_ZN8touchgfx8LCD16bpp30enableTextureMapperL8_ARGB8888Ev>
 8023662:	4620      	mov	r0, r4
 8023664:	f7ff fcfa 	bl	802305c <_ZN8touchgfx8LCD16bpp28enableTextureMapperL8_RGB565Ev>
 8023668:	4620      	mov	r0, r4
 802366a:	f7ff fd75 	bl	8023158 <_ZN8touchgfx8LCD16bpp28enableTextureMapperL8_RGB888Ev>
 802366e:	4620      	mov	r0, r4
 8023670:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8023674:	f7ff bee0 	b.w	8023438 <_ZN8touchgfx8LCD16bpp25enableTextureMapperRGB565Ev>

08023678 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKtssiihhh>:
 8023678:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 802367c:	e9dd 4e0c 	ldrd	r4, lr, [sp, #48]	@ 0x30
 8023680:	f9bd 8028 	ldrsh.w	r8, [sp, #40]	@ 0x28
 8023684:	f1be 0f00 	cmp.w	lr, #0
 8023688:	f9bd b02c 	ldrsh.w	fp, [sp, #44]	@ 0x2c
 802368c:	fb0e 4708 	mla	r7, lr, r8, r4
 8023690:	f89d 6038 	ldrb.w	r6, [sp, #56]	@ 0x38
 8023694:	f89d c03c 	ldrb.w	ip, [sp, #60]	@ 0x3c
 8023698:	f89d 5040 	ldrb.w	r5, [sp, #64]	@ 0x40
 802369c:	eb02 0a07 	add.w	sl, r2, r7
 80236a0:	8808      	ldrh	r0, [r1, #0]
 80236a2:	db37      	blt.n	8023714 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKtssiihhh+0x9c>
 80236a4:	45f3      	cmp	fp, lr
 80236a6:	dd35      	ble.n	8023714 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKtssiihhh+0x9c>
 80236a8:	2c00      	cmp	r4, #0
 80236aa:	db31      	blt.n	8023710 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKtssiihhh+0x98>
 80236ac:	45a0      	cmp	r8, r4
 80236ae:	dd2f      	ble.n	8023710 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKtssiihhh+0x98>
 80236b0:	5dd2      	ldrb	r2, [r2, r7]
 80236b2:	f833 9012 	ldrh.w	r9, [r3, r2, lsl #1]
 80236b6:	1c62      	adds	r2, r4, #1
 80236b8:	d42f      	bmi.n	802371a <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKtssiihhh+0xa2>
 80236ba:	4590      	cmp	r8, r2
 80236bc:	dd2d      	ble.n	802371a <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKtssiihhh+0xa2>
 80236be:	b366      	cbz	r6, 802371a <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKtssiihhh+0xa2>
 80236c0:	f89a 2001 	ldrb.w	r2, [sl, #1]
 80236c4:	f833 7012 	ldrh.w	r7, [r3, r2, lsl #1]
 80236c8:	f11e 0e01 	adds.w	lr, lr, #1
 80236cc:	d429      	bmi.n	8023722 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKtssiihhh+0xaa>
 80236ce:	45f3      	cmp	fp, lr
 80236d0:	dd27      	ble.n	8023722 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKtssiihhh+0xaa>
 80236d2:	f1bc 0f00 	cmp.w	ip, #0
 80236d6:	f000 80a1 	beq.w	802381c <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKtssiihhh+0x1a4>
 80236da:	2c00      	cmp	r4, #0
 80236dc:	db1f      	blt.n	802371e <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKtssiihhh+0xa6>
 80236de:	45a0      	cmp	r8, r4
 80236e0:	dd1d      	ble.n	802371e <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKtssiihhh+0xa6>
 80236e2:	f81a 2008 	ldrb.w	r2, [sl, r8]
 80236e6:	f833 e012 	ldrh.w	lr, [r3, r2, lsl #1]
 80236ea:	3401      	adds	r4, #1
 80236ec:	d41c      	bmi.n	8023728 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKtssiihhh+0xb0>
 80236ee:	45a0      	cmp	r8, r4
 80236f0:	dd1a      	ble.n	8023728 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKtssiihhh+0xb0>
 80236f2:	b1de      	cbz	r6, 802372c <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKtssiihhh+0xb4>
 80236f4:	44d0      	add	r8, sl
 80236f6:	f898 2001 	ldrb.w	r2, [r8, #1]
 80236fa:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 80236fe:	2e0f      	cmp	r6, #15
 8023700:	d915      	bls.n	802372e <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKtssiihhh+0xb6>
 8023702:	4b49      	ldr	r3, [pc, #292]	@ (8023828 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKtssiihhh+0x1b0>)
 8023704:	f44f 71ec 	mov.w	r1, #472	@ 0x1d8
 8023708:	4a48      	ldr	r2, [pc, #288]	@ (802382c <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKtssiihhh+0x1b4>)
 802370a:	4849      	ldr	r0, [pc, #292]	@ (8023830 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKtssiihhh+0x1b8>)
 802370c:	f007 f912 	bl	802a934 <__assert_func>
 8023710:	4681      	mov	r9, r0
 8023712:	e7d0      	b.n	80236b6 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKtssiihhh+0x3e>
 8023714:	4607      	mov	r7, r0
 8023716:	4681      	mov	r9, r0
 8023718:	e7d6      	b.n	80236c8 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKtssiihhh+0x50>
 802371a:	4607      	mov	r7, r0
 802371c:	e7d4      	b.n	80236c8 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKtssiihhh+0x50>
 802371e:	4686      	mov	lr, r0
 8023720:	e7e3      	b.n	80236ea <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKtssiihhh+0x72>
 8023722:	4603      	mov	r3, r0
 8023724:	4686      	mov	lr, r0
 8023726:	e7ea      	b.n	80236fe <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKtssiihhh+0x86>
 8023728:	4603      	mov	r3, r0
 802372a:	e7e8      	b.n	80236fe <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKtssiihhh+0x86>
 802372c:	4603      	mov	r3, r0
 802372e:	f1bc 0f0f 	cmp.w	ip, #15
 8023732:	d8e6      	bhi.n	8023702 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKtssiihhh+0x8a>
 8023734:	fb16 f80c 	smulbb	r8, r6, ip
 8023738:	ea4f 4409 	mov.w	r4, r9, lsl #16
 802373c:	ea4f 4a07 	mov.w	sl, r7, lsl #16
 8023740:	f429 69fc 	bic.w	r9, r9, #2016	@ 0x7e0
 8023744:	f004 64fc 	and.w	r4, r4, #132120576	@ 0x7e00000
 8023748:	ea4f 08e8 	mov.w	r8, r8, asr #3
 802374c:	f00a 6afc 	and.w	sl, sl, #132120576	@ 0x7e00000
 8023750:	f427 67fc 	bic.w	r7, r7, #2016	@ 0x7e0
 8023754:	ea44 0909 	orr.w	r9, r4, r9
 8023758:	f1cc 0410 	rsb	r4, ip, #16
 802375c:	041a      	lsls	r2, r3, #16
 802375e:	ea4a 0707 	orr.w	r7, sl, r7
 8023762:	1ba4      	subs	r4, r4, r6
 8023764:	ebc8 0646 	rsb	r6, r8, r6, lsl #1
 8023768:	f002 62fc 	and.w	r2, r2, #132120576	@ 0x7e00000
 802376c:	f423 63fc 	bic.w	r3, r3, #2016	@ 0x7e0
 8023770:	4377      	muls	r7, r6
 8023772:	eb08 0444 	add.w	r4, r8, r4, lsl #1
 8023776:	4313      	orrs	r3, r2
 8023778:	ea4f 420e 	mov.w	r2, lr, lsl #16
 802377c:	fb04 7409 	mla	r4, r4, r9, r7
 8023780:	ebc8 0c4c 	rsb	ip, r8, ip, lsl #1
 8023784:	f002 62fc 	and.w	r2, r2, #132120576	@ 0x7e00000
 8023788:	b2af      	uxth	r7, r5
 802378a:	fb08 4303 	mla	r3, r8, r3, r4
 802378e:	f42e 64fc 	bic.w	r4, lr, #2016	@ 0x7e0
 8023792:	43ed      	mvns	r5, r5
 8023794:	10c6      	asrs	r6, r0, #3
 8023796:	4322      	orrs	r2, r4
 8023798:	b2ed      	uxtb	r5, r5
 802379a:	f006 06fc 	and.w	r6, r6, #252	@ 0xfc
 802379e:	fb0c 3202 	mla	r2, ip, r2, r3
 80237a2:	fb16 f605 	smulbb	r6, r6, r5
 80237a6:	0d53      	lsrs	r3, r2, #21
 80237a8:	0952      	lsrs	r2, r2, #5
 80237aa:	f403 63fc 	and.w	r3, r3, #2016	@ 0x7e0
 80237ae:	f422 62fc 	bic.w	r2, r2, #2016	@ 0x7e0
 80237b2:	431a      	orrs	r2, r3
 80237b4:	b293      	uxth	r3, r2
 80237b6:	1202      	asrs	r2, r0, #8
 80237b8:	ea4f 2c23 	mov.w	ip, r3, asr #8
 80237bc:	f002 02f8 	and.w	r2, r2, #248	@ 0xf8
 80237c0:	00dc      	lsls	r4, r3, #3
 80237c2:	f00c 0cf8 	and.w	ip, ip, #248	@ 0xf8
 80237c6:	fb12 f205 	smulbb	r2, r2, r5
 80237ca:	b2e4      	uxtb	r4, r4
 80237cc:	fb0c 2c07 	mla	ip, ip, r7, r2
 80237d0:	10da      	asrs	r2, r3, #3
 80237d2:	00c3      	lsls	r3, r0, #3
 80237d4:	f002 02fc 	and.w	r2, r2, #252	@ 0xfc
 80237d8:	fa1f fc8c 	uxth.w	ip, ip
 80237dc:	b2db      	uxtb	r3, r3
 80237de:	fb02 6207 	mla	r2, r2, r7, r6
 80237e2:	fb13 f305 	smulbb	r3, r3, r5
 80237e6:	b296      	uxth	r6, r2
 80237e8:	fb04 3307 	mla	r3, r4, r7, r3
 80237ec:	b29a      	uxth	r2, r3
 80237ee:	f10c 0301 	add.w	r3, ip, #1
 80237f2:	eb03 2c1c 	add.w	ip, r3, ip, lsr #8
 80237f6:	1c53      	adds	r3, r2, #1
 80237f8:	eb03 2312 	add.w	r3, r3, r2, lsr #8
 80237fc:	1c72      	adds	r2, r6, #1
 80237fe:	f40c 4c78 	and.w	ip, ip, #63488	@ 0xf800
 8023802:	eb02 2216 	add.w	r2, r2, r6, lsr #8
 8023806:	f3c3 23c4 	ubfx	r3, r3, #11, #5
 802380a:	0952      	lsrs	r2, r2, #5
 802380c:	ea43 030c 	orr.w	r3, r3, ip
 8023810:	f402 62fc 	and.w	r2, r2, #2016	@ 0x7e0
 8023814:	4313      	orrs	r3, r2
 8023816:	800b      	strh	r3, [r1, #0]
 8023818:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 802381c:	2e0f      	cmp	r6, #15
 802381e:	f63f af70 	bhi.w	8023702 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKtssiihhh+0x8a>
 8023822:	4603      	mov	r3, r0
 8023824:	4686      	mov	lr, r0
 8023826:	e785      	b.n	8023734 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKtssiihhh+0xbc>
 8023828:	0802fad5 	.word	0x0802fad5
 802382c:	0803014b 	.word	0x0803014b
 8023830:	0802fb59 	.word	0x0802fb59

08023834 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 8023834:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8023838:	ed2d 8b08 	vpush	{d8-d11}
 802383c:	b099      	sub	sp, #100	@ 0x64
 802383e:	eeb0 aa40 	vmov.f32	s20, s0
 8023842:	eef0 9a60 	vmov.f32	s19, s1
 8023846:	9215      	str	r2, [sp, #84]	@ 0x54
 8023848:	eeb0 9a41 	vmov.f32	s18, s2
 802384c:	9a2f      	ldr	r2, [sp, #188]	@ 0xbc
 802384e:	eeb0 8a62 	vmov.f32	s16, s5
 8023852:	9309      	str	r3, [sp, #36]	@ 0x24
 8023854:	eef0 8a43 	vmov.f32	s17, s6
 8023858:	f89d 30cc 	ldrb.w	r3, [sp, #204]	@ 0xcc
 802385c:	eef0 ba44 	vmov.f32	s23, s8
 8023860:	9016      	str	r0, [sp, #88]	@ 0x58
 8023862:	eeb0 ba64 	vmov.f32	s22, s9
 8023866:	930d      	str	r3, [sp, #52]	@ 0x34
 8023868:	eef0 aa45 	vmov.f32	s21, s10
 802386c:	6850      	ldr	r0, [r2, #4]
 802386e:	910c      	str	r1, [sp, #48]	@ 0x30
 8023870:	6812      	ldr	r2, [r2, #0]
 8023872:	e9dd 1330 	ldrd	r1, r3, [sp, #192]	@ 0xc0
 8023876:	e9dd a52b 	ldrd	sl, r5, [sp, #172]	@ 0xac
 802387a:	fb00 1303 	mla	r3, r0, r3, r1
 802387e:	eb02 0843 	add.w	r8, r2, r3, lsl #1
 8023882:	9b32      	ldr	r3, [sp, #200]	@ 0xc8
 8023884:	681b      	ldr	r3, [r3, #0]
 8023886:	930b      	str	r3, [sp, #44]	@ 0x2c
 8023888:	9b32      	ldr	r3, [sp, #200]	@ 0xc8
 802388a:	685e      	ldr	r6, [r3, #4]
 802388c:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 802388e:	3604      	adds	r6, #4
 8023890:	43db      	mvns	r3, r3
 8023892:	b2db      	uxtb	r3, r3
 8023894:	930a      	str	r3, [sp, #40]	@ 0x28
 8023896:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8023898:	2b00      	cmp	r3, #0
 802389a:	dc03      	bgt.n	80238a4 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x70>
 802389c:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 802389e:	2b00      	cmp	r3, #0
 80238a0:	f340 8225 	ble.w	8023cee <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4ba>
 80238a4:	9b32      	ldr	r3, [sp, #200]	@ 0xc8
 80238a6:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 80238aa:	f9b3 200c 	ldrsh.w	r2, [r3, #12]
 80238ae:	1e48      	subs	r0, r1, #1
 80238b0:	1e57      	subs	r7, r2, #1
 80238b2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80238b4:	2b00      	cmp	r3, #0
 80238b6:	f340 80e3 	ble.w	8023a80 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x24c>
 80238ba:	ea5f 4c2a 	movs.w	ip, sl, asr #16
 80238be:	ea4f 4325 	mov.w	r3, r5, asr #16
 80238c2:	d406      	bmi.n	80238d2 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x9e>
 80238c4:	4584      	cmp	ip, r0
 80238c6:	da04      	bge.n	80238d2 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x9e>
 80238c8:	2b00      	cmp	r3, #0
 80238ca:	db02      	blt.n	80238d2 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x9e>
 80238cc:	42bb      	cmp	r3, r7
 80238ce:	f2c0 80d8 	blt.w	8023a82 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x24e>
 80238d2:	f11c 0c01 	adds.w	ip, ip, #1
 80238d6:	f100 80c9 	bmi.w	8023a6c <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x238>
 80238da:	4561      	cmp	r1, ip
 80238dc:	f2c0 80c6 	blt.w	8023a6c <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x238>
 80238e0:	3301      	adds	r3, #1
 80238e2:	f100 80c3 	bmi.w	8023a6c <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x238>
 80238e6:	429a      	cmp	r2, r3
 80238e8:	f2c0 80c0 	blt.w	8023a6c <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x238>
 80238ec:	f8dd b024 	ldr.w	fp, [sp, #36]	@ 0x24
 80238f0:	4647      	mov	r7, r8
 80238f2:	f1bb 0f00 	cmp.w	fp, #0
 80238f6:	f340 80e3 	ble.w	8023ac0 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x28c>
 80238fa:	9a32      	ldr	r2, [sp, #200]	@ 0xc8
 80238fc:	ea4f 4c25 	mov.w	ip, r5, asr #16
 8023900:	9b32      	ldr	r3, [sp, #200]	@ 0xc8
 8023902:	f3ca 3003 	ubfx	r0, sl, #12, #4
 8023906:	f8d2 e00c 	ldr.w	lr, [r2, #12]
 802390a:	ea5f 422a 	movs.w	r2, sl, asr #16
 802390e:	f3c5 3103 	ubfx	r1, r5, #12, #4
 8023912:	689b      	ldr	r3, [r3, #8]
 8023914:	f100 8121 	bmi.w	8023b5a <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x326>
 8023918:	f103 39ff 	add.w	r9, r3, #4294967295
 802391c:	454a      	cmp	r2, r9
 802391e:	f280 811c 	bge.w	8023b5a <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x326>
 8023922:	f1bc 0f00 	cmp.w	ip, #0
 8023926:	f2c0 8118 	blt.w	8023b5a <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x326>
 802392a:	f10e 39ff 	add.w	r9, lr, #4294967295
 802392e:	45cc      	cmp	ip, r9
 8023930:	f280 8113 	bge.w	8023b5a <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x326>
 8023934:	b21b      	sxth	r3, r3
 8023936:	9c0b      	ldr	r4, [sp, #44]	@ 0x2c
 8023938:	fb0c 2203 	mla	r2, ip, r3, r2
 802393c:	eb04 0902 	add.w	r9, r4, r2
 8023940:	5ca2      	ldrb	r2, [r4, r2]
 8023942:	f836 e012 	ldrh.w	lr, [r6, r2, lsl #1]
 8023946:	2800      	cmp	r0, #0
 8023948:	f000 80fe 	beq.w	8023b48 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x314>
 802394c:	f899 2001 	ldrb.w	r2, [r9, #1]
 8023950:	f836 2012 	ldrh.w	r2, [r6, r2, lsl #1]
 8023954:	9211      	str	r2, [sp, #68]	@ 0x44
 8023956:	b151      	cbz	r1, 802396e <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x13a>
 8023958:	eb09 0203 	add.w	r2, r9, r3
 802395c:	f819 3003 	ldrb.w	r3, [r9, r3]
 8023960:	f836 3013 	ldrh.w	r3, [r6, r3, lsl #1]
 8023964:	930f      	str	r3, [sp, #60]	@ 0x3c
 8023966:	7853      	ldrb	r3, [r2, #1]
 8023968:	f836 3013 	ldrh.w	r3, [r6, r3, lsl #1]
 802396c:	9312      	str	r3, [sp, #72]	@ 0x48
 802396e:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 8023970:	fb10 f201 	smulbb	r2, r0, r1
 8023974:	9c12      	ldr	r4, [sp, #72]	@ 0x48
 8023976:	ea4f 4c03 	mov.w	ip, r3, lsl #16
 802397a:	f423 63fc 	bic.w	r3, r3, #2016	@ 0x7e0
 802397e:	f424 64fc 	bic.w	r4, r4, #2016	@ 0x7e0
 8023982:	10d2      	asrs	r2, r2, #3
 8023984:	f00c 6cfc 	and.w	ip, ip, #132120576	@ 0x7e00000
 8023988:	ebc2 0940 	rsb	r9, r2, r0, lsl #1
 802398c:	ea4c 0c03 	orr.w	ip, ip, r3
 8023990:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 8023992:	041b      	lsls	r3, r3, #16
 8023994:	f003 63fc 	and.w	r3, r3, #132120576	@ 0x7e00000
 8023998:	4323      	orrs	r3, r4
 802399a:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 802399c:	4353      	muls	r3, r2
 802399e:	fb09 330c 	mla	r3, r9, ip, r3
 80239a2:	ea4f 4c0e 	mov.w	ip, lr, lsl #16
 80239a6:	f42e 6efc 	bic.w	lr, lr, #2016	@ 0x7e0
 80239aa:	f00c 6cfc 	and.w	ip, ip, #132120576	@ 0x7e00000
 80239ae:	ea4c 0e0e 	orr.w	lr, ip, lr
 80239b2:	f1c1 0c10 	rsb	ip, r1, #16
 80239b6:	ebac 0c00 	sub.w	ip, ip, r0
 80239ba:	eb02 0c4c 	add.w	ip, r2, ip, lsl #1
 80239be:	ebc2 0241 	rsb	r2, r2, r1, lsl #1
 80239c2:	fb0c 3c0e 	mla	ip, ip, lr, r3
 80239c6:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80239c8:	0418      	lsls	r0, r3, #16
 80239ca:	f423 63fc 	bic.w	r3, r3, #2016	@ 0x7e0
 80239ce:	f000 60fc 	and.w	r0, r0, #132120576	@ 0x7e00000
 80239d2:	4318      	orrs	r0, r3
 80239d4:	fb02 c200 	mla	r2, r2, r0, ip
 80239d8:	8838      	ldrh	r0, [r7, #0]
 80239da:	0d53      	lsrs	r3, r2, #21
 80239dc:	0952      	lsrs	r2, r2, #5
 80239de:	f403 63fc 	and.w	r3, r3, #2016	@ 0x7e0
 80239e2:	1201      	asrs	r1, r0, #8
 80239e4:	f422 62fc 	bic.w	r2, r2, #2016	@ 0x7e0
 80239e8:	ea4f 0ee0 	mov.w	lr, r0, asr #3
 80239ec:	f001 01f8 	and.w	r1, r1, #248	@ 0xf8
 80239f0:	00c0      	lsls	r0, r0, #3
 80239f2:	431a      	orrs	r2, r3
 80239f4:	f8bd 3034 	ldrh.w	r3, [sp, #52]	@ 0x34
 80239f8:	fb11 f104 	smulbb	r1, r1, r4
 80239fc:	f00e 0efc 	and.w	lr, lr, #252	@ 0xfc
 8023a00:	b292      	uxth	r2, r2
 8023a02:	fb1e fe04 	smulbb	lr, lr, r4
 8023a06:	b2c0      	uxtb	r0, r0
 8023a08:	ea4f 2c22 	mov.w	ip, r2, asr #8
 8023a0c:	fb10 f004 	smulbb	r0, r0, r4
 8023a10:	f00c 0cf8 	and.w	ip, ip, #248	@ 0xf8
 8023a14:	fb0c 1c03 	mla	ip, ip, r3, r1
 8023a18:	10d1      	asrs	r1, r2, #3
 8023a1a:	00d2      	lsls	r2, r2, #3
 8023a1c:	f001 01fc 	and.w	r1, r1, #252	@ 0xfc
 8023a20:	fa1f fc8c 	uxth.w	ip, ip
 8023a24:	b2d2      	uxtb	r2, r2
 8023a26:	fb01 e103 	mla	r1, r1, r3, lr
 8023a2a:	fb02 0303 	mla	r3, r2, r3, r0
 8023a2e:	b289      	uxth	r1, r1
 8023a30:	b29a      	uxth	r2, r3
 8023a32:	f10c 0301 	add.w	r3, ip, #1
 8023a36:	eb03 2c1c 	add.w	ip, r3, ip, lsr #8
 8023a3a:	1c53      	adds	r3, r2, #1
 8023a3c:	eb03 2312 	add.w	r3, r3, r2, lsr #8
 8023a40:	1c4a      	adds	r2, r1, #1
 8023a42:	f40c 4c78 	and.w	ip, ip, #63488	@ 0xf800
 8023a46:	eb02 2111 	add.w	r1, r2, r1, lsr #8
 8023a4a:	f3c3 23c4 	ubfx	r3, r3, #11, #5
 8023a4e:	0949      	lsrs	r1, r1, #5
 8023a50:	ea43 030c 	orr.w	r3, r3, ip
 8023a54:	f401 61fc 	and.w	r1, r1, #2016	@ 0x7e0
 8023a58:	430b      	orrs	r3, r1
 8023a5a:	803b      	strh	r3, [r7, #0]
 8023a5c:	9b2d      	ldr	r3, [sp, #180]	@ 0xb4
 8023a5e:	3702      	adds	r7, #2
 8023a60:	f10b 3bff 	add.w	fp, fp, #4294967295
 8023a64:	449a      	add	sl, r3
 8023a66:	9b2e      	ldr	r3, [sp, #184]	@ 0xb8
 8023a68:	441d      	add	r5, r3
 8023a6a:	e742      	b.n	80238f2 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xbe>
 8023a6c:	9b2d      	ldr	r3, [sp, #180]	@ 0xb4
 8023a6e:	f108 0802 	add.w	r8, r8, #2
 8023a72:	449a      	add	sl, r3
 8023a74:	9b2e      	ldr	r3, [sp, #184]	@ 0xb8
 8023a76:	441d      	add	r5, r3
 8023a78:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8023a7a:	3b01      	subs	r3, #1
 8023a7c:	9309      	str	r3, [sp, #36]	@ 0x24
 8023a7e:	e718      	b.n	80238b2 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7e>
 8023a80:	d023      	beq.n	8023aca <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x296>
 8023a82:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8023a84:	982d      	ldr	r0, [sp, #180]	@ 0xb4
 8023a86:	3b01      	subs	r3, #1
 8023a88:	fb00 a003 	mla	r0, r0, r3, sl
 8023a8c:	1400      	asrs	r0, r0, #16
 8023a8e:	f53f af2d 	bmi.w	80238ec <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xb8>
 8023a92:	3901      	subs	r1, #1
 8023a94:	4288      	cmp	r0, r1
 8023a96:	f6bf af29 	bge.w	80238ec <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xb8>
 8023a9a:	992e      	ldr	r1, [sp, #184]	@ 0xb8
 8023a9c:	fb01 5303 	mla	r3, r1, r3, r5
 8023aa0:	141b      	asrs	r3, r3, #16
 8023aa2:	f53f af23 	bmi.w	80238ec <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xb8>
 8023aa6:	3a01      	subs	r2, #1
 8023aa8:	4293      	cmp	r3, r2
 8023aaa:	f6bf af1f 	bge.w	80238ec <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xb8>
 8023aae:	f8dd e024 	ldr.w	lr, [sp, #36]	@ 0x24
 8023ab2:	f8bd 9034 	ldrh.w	r9, [sp, #52]	@ 0x34
 8023ab6:	f8cd 8038 	str.w	r8, [sp, #56]	@ 0x38
 8023aba:	f1be 0f00 	cmp.w	lr, #0
 8023abe:	dc6c      	bgt.n	8023b9a <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x366>
 8023ac0:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8023ac2:	ea23 74e3 	bic.w	r4, r3, r3, asr #31
 8023ac6:	eb08 0844 	add.w	r8, r8, r4, lsl #1
 8023aca:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8023acc:	2b00      	cmp	r3, #0
 8023ace:	f340 810e 	ble.w	8023cee <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4ba>
 8023ad2:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8023ad6:	9b2a      	ldr	r3, [sp, #168]	@ 0xa8
 8023ad8:	ee3a aa2b 	vadd.f32	s20, s20, s23
 8023adc:	ee79 9a8b 	vadd.f32	s19, s19, s22
 8023ae0:	eef0 6a48 	vmov.f32	s13, s16
 8023ae4:	eec7 7a0a 	vdiv.f32	s15, s14, s20
 8023ae8:	ee39 9a2a 	vadd.f32	s18, s18, s21
 8023aec:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 8023af0:	ee16 aa90 	vmov	sl, s13
 8023af4:	eef0 6a68 	vmov.f32	s13, s17
 8023af8:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 8023afc:	ee16 5a90 	vmov	r5, s13
 8023b00:	ee29 7aa7 	vmul.f32	s14, s19, s15
 8023b04:	ee69 7a27 	vmul.f32	s15, s18, s15
 8023b08:	ee37 8a48 	vsub.f32	s16, s14, s16
 8023b0c:	ee77 8ae8 	vsub.f32	s17, s15, s17
 8023b10:	eebe 8ac8 	vcvt.s32.f32	s16, s16, #16
 8023b14:	eefe 8ac8 	vcvt.s32.f32	s17, s17, #16
 8023b18:	ee18 2a10 	vmov	r2, s16
 8023b1c:	eeb0 8a47 	vmov.f32	s16, s14
 8023b20:	fb92 f3f3 	sdiv	r3, r2, r3
 8023b24:	ee18 2a90 	vmov	r2, s17
 8023b28:	932d      	str	r3, [sp, #180]	@ 0xb4
 8023b2a:	9b2a      	ldr	r3, [sp, #168]	@ 0xa8
 8023b2c:	eef0 8a67 	vmov.f32	s17, s15
 8023b30:	fb92 f3f3 	sdiv	r3, r2, r3
 8023b34:	932e      	str	r3, [sp, #184]	@ 0xb8
 8023b36:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8023b38:	9a15      	ldr	r2, [sp, #84]	@ 0x54
 8023b3a:	3b01      	subs	r3, #1
 8023b3c:	930c      	str	r3, [sp, #48]	@ 0x30
 8023b3e:	9b2a      	ldr	r3, [sp, #168]	@ 0xa8
 8023b40:	bf08      	it	eq
 8023b42:	4613      	moveq	r3, r2
 8023b44:	9309      	str	r3, [sp, #36]	@ 0x24
 8023b46:	e6a6      	b.n	8023896 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x62>
 8023b48:	2900      	cmp	r1, #0
 8023b4a:	f43f af10 	beq.w	802396e <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x13a>
 8023b4e:	f819 3003 	ldrb.w	r3, [r9, r3]
 8023b52:	f836 3013 	ldrh.w	r3, [r6, r3, lsl #1]
 8023b56:	930f      	str	r3, [sp, #60]	@ 0x3c
 8023b58:	e709      	b.n	802396e <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x13a>
 8023b5a:	f112 0901 	adds.w	r9, r2, #1
 8023b5e:	f53f af7d 	bmi.w	8023a5c <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x228>
 8023b62:	454b      	cmp	r3, r9
 8023b64:	f6ff af7a 	blt.w	8023a5c <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x228>
 8023b68:	f11c 0901 	adds.w	r9, ip, #1
 8023b6c:	f53f af76 	bmi.w	8023a5c <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x228>
 8023b70:	45ce      	cmp	lr, r9
 8023b72:	f6ff af73 	blt.w	8023a5c <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x228>
 8023b76:	9c0d      	ldr	r4, [sp, #52]	@ 0x34
 8023b78:	b21b      	sxth	r3, r3
 8023b7a:	9202      	str	r2, [sp, #8]
 8023b7c:	fa0f f28e 	sxth.w	r2, lr
 8023b80:	9300      	str	r3, [sp, #0]
 8023b82:	4633      	mov	r3, r6
 8023b84:	9201      	str	r2, [sp, #4]
 8023b86:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 8023b88:	e9cd 1405 	strd	r1, r4, [sp, #20]
 8023b8c:	e9cd c003 	strd	ip, r0, [sp, #12]
 8023b90:	4639      	mov	r1, r7
 8023b92:	9816      	ldr	r0, [sp, #88]	@ 0x58
 8023b94:	f7ff fd70 	bl	8023678 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKtssiihhh>
 8023b98:	e760      	b.n	8023a5c <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x228>
 8023b9a:	9b32      	ldr	r3, [sp, #200]	@ 0xc8
 8023b9c:	ea4f 422a 	mov.w	r2, sl, asr #16
 8023ba0:	1429      	asrs	r1, r5, #16
 8023ba2:	9c0b      	ldr	r4, [sp, #44]	@ 0x2c
 8023ba4:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8023ba8:	f3ca 3c03 	ubfx	ip, sl, #12, #4
 8023bac:	f3c5 3003 	ubfx	r0, r5, #12, #4
 8023bb0:	fb03 2101 	mla	r1, r3, r1, r2
 8023bb4:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 8023bb6:	440a      	add	r2, r1
 8023bb8:	5c61      	ldrb	r1, [r4, r1]
 8023bba:	f836 1011 	ldrh.w	r1, [r6, r1, lsl #1]
 8023bbe:	f1bc 0f00 	cmp.w	ip, #0
 8023bc2:	f000 808c 	beq.w	8023cde <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4aa>
 8023bc6:	7857      	ldrb	r7, [r2, #1]
 8023bc8:	f836 4017 	ldrh.w	r4, [r6, r7, lsl #1]
 8023bcc:	9413      	str	r4, [sp, #76]	@ 0x4c
 8023bce:	b140      	cbz	r0, 8023be2 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3ae>
 8023bd0:	18d7      	adds	r7, r2, r3
 8023bd2:	5cd3      	ldrb	r3, [r2, r3]
 8023bd4:	f836 3013 	ldrh.w	r3, [r6, r3, lsl #1]
 8023bd8:	9310      	str	r3, [sp, #64]	@ 0x40
 8023bda:	787b      	ldrb	r3, [r7, #1]
 8023bdc:	f836 3013 	ldrh.w	r3, [r6, r3, lsl #1]
 8023be0:	9314      	str	r3, [sp, #80]	@ 0x50
 8023be2:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 8023be4:	fb1c f200 	smulbb	r2, ip, r0
 8023be8:	9c14      	ldr	r4, [sp, #80]	@ 0x50
 8023bea:	f10e 3eff 	add.w	lr, lr, #4294967295
 8023bee:	041f      	lsls	r7, r3, #16
 8023bf0:	f423 63fc 	bic.w	r3, r3, #2016	@ 0x7e0
 8023bf4:	10d2      	asrs	r2, r2, #3
 8023bf6:	f424 6bfc 	bic.w	fp, r4, #2016	@ 0x7e0
 8023bfa:	f007 67fc 	and.w	r7, r7, #132120576	@ 0x7e00000
 8023bfe:	431f      	orrs	r7, r3
 8023c00:	ebc2 034c 	rsb	r3, r2, ip, lsl #1
 8023c04:	9317      	str	r3, [sp, #92]	@ 0x5c
 8023c06:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 8023c08:	9c17      	ldr	r4, [sp, #92]	@ 0x5c
 8023c0a:	041b      	lsls	r3, r3, #16
 8023c0c:	f003 63fc 	and.w	r3, r3, #132120576	@ 0x7e00000
 8023c10:	ea43 030b 	orr.w	r3, r3, fp
 8023c14:	ea4f 4b01 	mov.w	fp, r1, lsl #16
 8023c18:	f421 61fc 	bic.w	r1, r1, #2016	@ 0x7e0
 8023c1c:	4353      	muls	r3, r2
 8023c1e:	fb04 3707 	mla	r7, r4, r7, r3
 8023c22:	f00b 63fc 	and.w	r3, fp, #132120576	@ 0x7e00000
 8023c26:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 8023c28:	ea43 0b01 	orr.w	fp, r3, r1
 8023c2c:	f1c0 0110 	rsb	r1, r0, #16
 8023c30:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8023c32:	eba1 0c0c 	sub.w	ip, r1, ip
 8023c36:	eb02 0c4c 	add.w	ip, r2, ip, lsl #1
 8023c3a:	ebc2 0240 	rsb	r2, r2, r0, lsl #1
 8023c3e:	fb0c 770b 	mla	r7, ip, fp, r7
 8023c42:	ea4f 4c03 	mov.w	ip, r3, lsl #16
 8023c46:	f423 6bfc 	bic.w	fp, r3, #2016	@ 0x7e0
 8023c4a:	f00c 6cfc 	and.w	ip, ip, #132120576	@ 0x7e00000
 8023c4e:	ea4c 0c0b 	orr.w	ip, ip, fp
 8023c52:	fb02 770c 	mla	r7, r2, ip, r7
 8023c56:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8023c58:	0d79      	lsrs	r1, r7, #21
 8023c5a:	8812      	ldrh	r2, [r2, #0]
 8023c5c:	097f      	lsrs	r7, r7, #5
 8023c5e:	f401 61fc 	and.w	r1, r1, #2016	@ 0x7e0
 8023c62:	f427 67fc 	bic.w	r7, r7, #2016	@ 0x7e0
 8023c66:	430f      	orrs	r7, r1
 8023c68:	1211      	asrs	r1, r2, #8
 8023c6a:	b2bb      	uxth	r3, r7
 8023c6c:	f001 01f8 	and.w	r1, r1, #248	@ 0xf8
 8023c70:	10d7      	asrs	r7, r2, #3
 8023c72:	fb11 f104 	smulbb	r1, r1, r4
 8023c76:	1218      	asrs	r0, r3, #8
 8023c78:	00d2      	lsls	r2, r2, #3
 8023c7a:	f007 07fc 	and.w	r7, r7, #252	@ 0xfc
 8023c7e:	f000 00f8 	and.w	r0, r0, #248	@ 0xf8
 8023c82:	fb17 f704 	smulbb	r7, r7, r4
 8023c86:	b2d2      	uxtb	r2, r2
 8023c88:	fb00 1009 	mla	r0, r0, r9, r1
 8023c8c:	10d9      	asrs	r1, r3, #3
 8023c8e:	fb12 f204 	smulbb	r2, r2, r4
 8023c92:	00db      	lsls	r3, r3, #3
 8023c94:	f001 01fc 	and.w	r1, r1, #252	@ 0xfc
 8023c98:	b280      	uxth	r0, r0
 8023c9a:	b2db      	uxtb	r3, r3
 8023c9c:	fb01 7109 	mla	r1, r1, r9, r7
 8023ca0:	fb03 2309 	mla	r3, r3, r9, r2
 8023ca4:	1c42      	adds	r2, r0, #1
 8023ca6:	b289      	uxth	r1, r1
 8023ca8:	b29b      	uxth	r3, r3
 8023caa:	eb02 2010 	add.w	r0, r2, r0, lsr #8
 8023cae:	1c4f      	adds	r7, r1, #1
 8023cb0:	1c5a      	adds	r2, r3, #1
 8023cb2:	eb07 2111 	add.w	r1, r7, r1, lsr #8
 8023cb6:	f400 4078 	and.w	r0, r0, #63488	@ 0xf800
 8023cba:	eb02 2213 	add.w	r2, r2, r3, lsr #8
 8023cbe:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8023cc0:	0949      	lsrs	r1, r1, #5
 8023cc2:	f3c2 22c4 	ubfx	r2, r2, #11, #5
 8023cc6:	f401 61fc 	and.w	r1, r1, #2016	@ 0x7e0
 8023cca:	4310      	orrs	r0, r2
 8023ccc:	4308      	orrs	r0, r1
 8023cce:	f823 0b02 	strh.w	r0, [r3], #2
 8023cd2:	930e      	str	r3, [sp, #56]	@ 0x38
 8023cd4:	9b2d      	ldr	r3, [sp, #180]	@ 0xb4
 8023cd6:	449a      	add	sl, r3
 8023cd8:	9b2e      	ldr	r3, [sp, #184]	@ 0xb8
 8023cda:	441d      	add	r5, r3
 8023cdc:	e6ed      	b.n	8023aba <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x286>
 8023cde:	2800      	cmp	r0, #0
 8023ce0:	f43f af7f 	beq.w	8023be2 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3ae>
 8023ce4:	5cd3      	ldrb	r3, [r2, r3]
 8023ce6:	f836 3013 	ldrh.w	r3, [r6, r3, lsl #1]
 8023cea:	9310      	str	r3, [sp, #64]	@ 0x40
 8023cec:	e779      	b.n	8023be2 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3ae>
 8023cee:	b019      	add	sp, #100	@ 0x64
 8023cf0:	ecbd 8b08 	vpop	{d8-d11}
 8023cf4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08023cf8 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh>:
 8023cf8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8023cfc:	e9dd 560a 	ldrd	r5, r6, [sp, #40]	@ 0x28
 8023d00:	f9bd e020 	ldrsh.w	lr, [sp, #32]
 8023d04:	2e00      	cmp	r6, #0
 8023d06:	f9bd 9024 	ldrsh.w	r9, [sp, #36]	@ 0x24
 8023d0a:	fb06 570e 	mla	r7, r6, lr, r5
 8023d0e:	f89d 4030 	ldrb.w	r4, [sp, #48]	@ 0x30
 8023d12:	f89d c034 	ldrb.w	ip, [sp, #52]	@ 0x34
 8023d16:	eb02 0807 	add.w	r8, r2, r7
 8023d1a:	8808      	ldrh	r0, [r1, #0]
 8023d1c:	db38      	blt.n	8023d90 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x98>
 8023d1e:	45b1      	cmp	r9, r6
 8023d20:	dd36      	ble.n	8023d90 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x98>
 8023d22:	2d00      	cmp	r5, #0
 8023d24:	db32      	blt.n	8023d8c <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x94>
 8023d26:	45ae      	cmp	lr, r5
 8023d28:	dd30      	ble.n	8023d8c <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x94>
 8023d2a:	5dd2      	ldrb	r2, [r2, r7]
 8023d2c:	f833 7012 	ldrh.w	r7, [r3, r2, lsl #1]
 8023d30:	1c6a      	adds	r2, r5, #1
 8023d32:	d430      	bmi.n	8023d96 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x9e>
 8023d34:	4596      	cmp	lr, r2
 8023d36:	dd2e      	ble.n	8023d96 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x9e>
 8023d38:	b36c      	cbz	r4, 8023d96 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x9e>
 8023d3a:	f898 2001 	ldrb.w	r2, [r8, #1]
 8023d3e:	f833 2012 	ldrh.w	r2, [r3, r2, lsl #1]
 8023d42:	3601      	adds	r6, #1
 8023d44:	d42b      	bmi.n	8023d9e <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0xa6>
 8023d46:	45b1      	cmp	r9, r6
 8023d48:	dd29      	ble.n	8023d9e <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0xa6>
 8023d4a:	f1bc 0f00 	cmp.w	ip, #0
 8023d4e:	d028      	beq.n	8023da2 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0xaa>
 8023d50:	2d00      	cmp	r5, #0
 8023d52:	db22      	blt.n	8023d9a <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0xa2>
 8023d54:	45ae      	cmp	lr, r5
 8023d56:	dd20      	ble.n	8023d9a <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0xa2>
 8023d58:	f818 600e 	ldrb.w	r6, [r8, lr]
 8023d5c:	f833 6016 	ldrh.w	r6, [r3, r6, lsl #1]
 8023d60:	3501      	adds	r5, #1
 8023d62:	d407      	bmi.n	8023d74 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x7c>
 8023d64:	45ae      	cmp	lr, r5
 8023d66:	dd05      	ble.n	8023d74 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x7c>
 8023d68:	b134      	cbz	r4, 8023d78 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x80>
 8023d6a:	44c6      	add	lr, r8
 8023d6c:	f89e 0001 	ldrb.w	r0, [lr, #1]
 8023d70:	f833 0010 	ldrh.w	r0, [r3, r0, lsl #1]
 8023d74:	2c0f      	cmp	r4, #15
 8023d76:	d802      	bhi.n	8023d7e <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x86>
 8023d78:	f1bc 0f0f 	cmp.w	ip, #15
 8023d7c:	d914      	bls.n	8023da8 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0xb0>
 8023d7e:	4b26      	ldr	r3, [pc, #152]	@ (8023e18 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x120>)
 8023d80:	f44f 71ec 	mov.w	r1, #472	@ 0x1d8
 8023d84:	4a25      	ldr	r2, [pc, #148]	@ (8023e1c <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x124>)
 8023d86:	4826      	ldr	r0, [pc, #152]	@ (8023e20 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x128>)
 8023d88:	f006 fdd4 	bl	802a934 <__assert_func>
 8023d8c:	4607      	mov	r7, r0
 8023d8e:	e7cf      	b.n	8023d30 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x38>
 8023d90:	4602      	mov	r2, r0
 8023d92:	4607      	mov	r7, r0
 8023d94:	e7d5      	b.n	8023d42 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x4a>
 8023d96:	4602      	mov	r2, r0
 8023d98:	e7d3      	b.n	8023d42 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x4a>
 8023d9a:	4606      	mov	r6, r0
 8023d9c:	e7e0      	b.n	8023d60 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x68>
 8023d9e:	4606      	mov	r6, r0
 8023da0:	e7e8      	b.n	8023d74 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x7c>
 8023da2:	2c0f      	cmp	r4, #15
 8023da4:	d8eb      	bhi.n	8023d7e <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x86>
 8023da6:	4606      	mov	r6, r0
 8023da8:	fb14 f30c 	smulbb	r3, r4, ip
 8023dac:	043d      	lsls	r5, r7, #16
 8023dae:	ea4f 4e02 	mov.w	lr, r2, lsl #16
 8023db2:	f427 67fc 	bic.w	r7, r7, #2016	@ 0x7e0
 8023db6:	f005 65fc 	and.w	r5, r5, #132120576	@ 0x7e00000
 8023dba:	10db      	asrs	r3, r3, #3
 8023dbc:	f00e 6efc 	and.w	lr, lr, #132120576	@ 0x7e00000
 8023dc0:	f422 62fc 	bic.w	r2, r2, #2016	@ 0x7e0
 8023dc4:	432f      	orrs	r7, r5
 8023dc6:	f1cc 0510 	rsb	r5, ip, #16
 8023dca:	ea4e 0202 	orr.w	r2, lr, r2
 8023dce:	1b2d      	subs	r5, r5, r4
 8023dd0:	ebc3 0444 	rsb	r4, r3, r4, lsl #1
 8023dd4:	eb03 0545 	add.w	r5, r3, r5, lsl #1
 8023dd8:	4354      	muls	r4, r2
 8023dda:	fb05 4507 	mla	r5, r5, r7, r4
 8023dde:	0404      	lsls	r4, r0, #16
 8023de0:	f420 60fc 	bic.w	r0, r0, #2016	@ 0x7e0
 8023de4:	f004 64fc 	and.w	r4, r4, #132120576	@ 0x7e00000
 8023de8:	4320      	orrs	r0, r4
 8023dea:	fb03 5400 	mla	r4, r3, r0, r5
 8023dee:	0430      	lsls	r0, r6, #16
 8023df0:	f426 66fc 	bic.w	r6, r6, #2016	@ 0x7e0
 8023df4:	ebc3 034c 	rsb	r3, r3, ip, lsl #1
 8023df8:	f000 60fc 	and.w	r0, r0, #132120576	@ 0x7e00000
 8023dfc:	4330      	orrs	r0, r6
 8023dfe:	fb03 4000 	mla	r0, r3, r0, r4
 8023e02:	0d43      	lsrs	r3, r0, #21
 8023e04:	0940      	lsrs	r0, r0, #5
 8023e06:	f403 63fc 	and.w	r3, r3, #2016	@ 0x7e0
 8023e0a:	f420 60fc 	bic.w	r0, r0, #2016	@ 0x7e0
 8023e0e:	4318      	orrs	r0, r3
 8023e10:	8008      	strh	r0, [r1, #0]
 8023e12:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8023e16:	bf00      	nop
 8023e18:	0802fad5 	.word	0x0802fad5
 8023e1c:	0803014b 	.word	0x0803014b
 8023e20:	0802fb59 	.word	0x0802fb59

08023e24 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 8023e24:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8023e28:	ed2d 8b0a 	vpush	{d8-d12}
 8023e2c:	b093      	sub	sp, #76	@ 0x4c
 8023e2e:	eeb0 aa40 	vmov.f32	s20, s0
 8023e32:	eef0 9a60 	vmov.f32	s19, s1
 8023e36:	920f      	str	r2, [sp, #60]	@ 0x3c
 8023e38:	eeb0 9a41 	vmov.f32	s18, s2
 8023e3c:	9a2b      	ldr	r2, [sp, #172]	@ 0xac
 8023e3e:	eeb0 8a62 	vmov.f32	s16, s5
 8023e42:	9010      	str	r0, [sp, #64]	@ 0x40
 8023e44:	eef0 8a43 	vmov.f32	s17, s6
 8023e48:	6850      	ldr	r0, [r2, #4]
 8023e4a:	eeb0 ca44 	vmov.f32	s24, s8
 8023e4e:	9108      	str	r1, [sp, #32]
 8023e50:	eef0 ba64 	vmov.f32	s23, s9
 8023e54:	9306      	str	r3, [sp, #24]
 8023e56:	eeb0 ba45 	vmov.f32	s22, s10
 8023e5a:	6812      	ldr	r2, [r2, #0]
 8023e5c:	eef7 aa00 	vmov.f32	s21, #112	@ 0x3f800000  1.0
 8023e60:	e9dd 132c 	ldrd	r1, r3, [sp, #176]	@ 0xb0
 8023e64:	e9dd 4627 	ldrd	r4, r6, [sp, #156]	@ 0x9c
 8023e68:	fb00 1303 	mla	r3, r0, r3, r1
 8023e6c:	eb02 0943 	add.w	r9, r2, r3, lsl #1
 8023e70:	9b2e      	ldr	r3, [sp, #184]	@ 0xb8
 8023e72:	681b      	ldr	r3, [r3, #0]
 8023e74:	9307      	str	r3, [sp, #28]
 8023e76:	9b2e      	ldr	r3, [sp, #184]	@ 0xb8
 8023e78:	685f      	ldr	r7, [r3, #4]
 8023e7a:	3704      	adds	r7, #4
 8023e7c:	9b08      	ldr	r3, [sp, #32]
 8023e7e:	2b00      	cmp	r3, #0
 8023e80:	dc03      	bgt.n	8023e8a <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x66>
 8023e82:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8023e84:	2b00      	cmp	r3, #0
 8023e86:	f340 81b2 	ble.w	80241ee <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3ca>
 8023e8a:	9b2e      	ldr	r3, [sp, #184]	@ 0xb8
 8023e8c:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 8023e90:	f9b3 200c 	ldrsh.w	r2, [r3, #12]
 8023e94:	1e48      	subs	r0, r1, #1
 8023e96:	f102 3cff 	add.w	ip, r2, #4294967295
 8023e9a:	9b06      	ldr	r3, [sp, #24]
 8023e9c:	2b00      	cmp	r3, #0
 8023e9e:	f340 80a9 	ble.w	8023ff4 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1d0>
 8023ea2:	ea5f 4e24 	movs.w	lr, r4, asr #16
 8023ea6:	ea4f 4326 	mov.w	r3, r6, asr #16
 8023eaa:	d406      	bmi.n	8023eba <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x96>
 8023eac:	4586      	cmp	lr, r0
 8023eae:	da04      	bge.n	8023eba <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x96>
 8023eb0:	2b00      	cmp	r3, #0
 8023eb2:	db02      	blt.n	8023eba <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x96>
 8023eb4:	4563      	cmp	r3, ip
 8023eb6:	f2c0 809e 	blt.w	8023ff6 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1d2>
 8023eba:	f11e 0e01 	adds.w	lr, lr, #1
 8023ebe:	f100 808f 	bmi.w	8023fe0 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1bc>
 8023ec2:	4571      	cmp	r1, lr
 8023ec4:	f2c0 808c 	blt.w	8023fe0 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1bc>
 8023ec8:	3301      	adds	r3, #1
 8023eca:	f100 8089 	bmi.w	8023fe0 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1bc>
 8023ece:	429a      	cmp	r2, r3
 8023ed0:	f2c0 8086 	blt.w	8023fe0 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1bc>
 8023ed4:	f8dd b018 	ldr.w	fp, [sp, #24]
 8023ed8:	46c8      	mov	r8, r9
 8023eda:	f1bb 0f00 	cmp.w	fp, #0
 8023ede:	f340 80a6 	ble.w	802402e <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x20a>
 8023ee2:	9a2e      	ldr	r2, [sp, #184]	@ 0xb8
 8023ee4:	ea4f 4c26 	mov.w	ip, r6, asr #16
 8023ee8:	9b2e      	ldr	r3, [sp, #184]	@ 0xb8
 8023eea:	f3c4 3003 	ubfx	r0, r4, #12, #4
 8023eee:	f8d2 e00c 	ldr.w	lr, [r2, #12]
 8023ef2:	1422      	asrs	r2, r4, #16
 8023ef4:	f3c6 3103 	ubfx	r1, r6, #12, #4
 8023ef8:	689b      	ldr	r3, [r3, #8]
 8023efa:	f100 80e3 	bmi.w	80240c4 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2a0>
 8023efe:	f103 3aff 	add.w	sl, r3, #4294967295
 8023f02:	4552      	cmp	r2, sl
 8023f04:	f280 80de 	bge.w	80240c4 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2a0>
 8023f08:	f1bc 0f00 	cmp.w	ip, #0
 8023f0c:	f2c0 80da 	blt.w	80240c4 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2a0>
 8023f10:	f10e 3aff 	add.w	sl, lr, #4294967295
 8023f14:	45d4      	cmp	ip, sl
 8023f16:	f280 80d5 	bge.w	80240c4 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2a0>
 8023f1a:	b21b      	sxth	r3, r3
 8023f1c:	9d07      	ldr	r5, [sp, #28]
 8023f1e:	fb0c 2203 	mla	r2, ip, r3, r2
 8023f22:	eb05 0a02 	add.w	sl, r5, r2
 8023f26:	5caa      	ldrb	r2, [r5, r2]
 8023f28:	f837 e012 	ldrh.w	lr, [r7, r2, lsl #1]
 8023f2c:	2800      	cmp	r0, #0
 8023f2e:	f000 80c0 	beq.w	80240b2 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x28e>
 8023f32:	f89a 2001 	ldrb.w	r2, [sl, #1]
 8023f36:	f837 2012 	ldrh.w	r2, [r7, r2, lsl #1]
 8023f3a:	920b      	str	r2, [sp, #44]	@ 0x2c
 8023f3c:	b151      	cbz	r1, 8023f54 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x130>
 8023f3e:	eb0a 0203 	add.w	r2, sl, r3
 8023f42:	f81a 3003 	ldrb.w	r3, [sl, r3]
 8023f46:	f837 3013 	ldrh.w	r3, [r7, r3, lsl #1]
 8023f4a:	9309      	str	r3, [sp, #36]	@ 0x24
 8023f4c:	7853      	ldrb	r3, [r2, #1]
 8023f4e:	f837 3013 	ldrh.w	r3, [r7, r3, lsl #1]
 8023f52:	930c      	str	r3, [sp, #48]	@ 0x30
 8023f54:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8023f56:	fb10 f201 	smulbb	r2, r0, r1
 8023f5a:	9d0c      	ldr	r5, [sp, #48]	@ 0x30
 8023f5c:	ea4f 4c03 	mov.w	ip, r3, lsl #16
 8023f60:	f423 63fc 	bic.w	r3, r3, #2016	@ 0x7e0
 8023f64:	f425 65fc 	bic.w	r5, r5, #2016	@ 0x7e0
 8023f68:	10d2      	asrs	r2, r2, #3
 8023f6a:	f00c 6cfc 	and.w	ip, ip, #132120576	@ 0x7e00000
 8023f6e:	ebc2 0a40 	rsb	sl, r2, r0, lsl #1
 8023f72:	ea4c 0c03 	orr.w	ip, ip, r3
 8023f76:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8023f78:	041b      	lsls	r3, r3, #16
 8023f7a:	f003 63fc 	and.w	r3, r3, #132120576	@ 0x7e00000
 8023f7e:	432b      	orrs	r3, r5
 8023f80:	4353      	muls	r3, r2
 8023f82:	fb0a 330c 	mla	r3, sl, ip, r3
 8023f86:	ea4f 4c0e 	mov.w	ip, lr, lsl #16
 8023f8a:	f42e 6efc 	bic.w	lr, lr, #2016	@ 0x7e0
 8023f8e:	f00c 6cfc 	and.w	ip, ip, #132120576	@ 0x7e00000
 8023f92:	ea4c 0e0e 	orr.w	lr, ip, lr
 8023f96:	f1c1 0c10 	rsb	ip, r1, #16
 8023f9a:	ebac 0c00 	sub.w	ip, ip, r0
 8023f9e:	eb02 0c4c 	add.w	ip, r2, ip, lsl #1
 8023fa2:	ebc2 0241 	rsb	r2, r2, r1, lsl #1
 8023fa6:	fb0c 3c0e 	mla	ip, ip, lr, r3
 8023faa:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8023fac:	0418      	lsls	r0, r3, #16
 8023fae:	f423 63fc 	bic.w	r3, r3, #2016	@ 0x7e0
 8023fb2:	f000 60fc 	and.w	r0, r0, #132120576	@ 0x7e00000
 8023fb6:	4318      	orrs	r0, r3
 8023fb8:	fb02 c200 	mla	r2, r2, r0, ip
 8023fbc:	0d53      	lsrs	r3, r2, #21
 8023fbe:	0952      	lsrs	r2, r2, #5
 8023fc0:	f403 63fc 	and.w	r3, r3, #2016	@ 0x7e0
 8023fc4:	f422 62fc 	bic.w	r2, r2, #2016	@ 0x7e0
 8023fc8:	431a      	orrs	r2, r3
 8023fca:	f8a8 2000 	strh.w	r2, [r8]
 8023fce:	9b29      	ldr	r3, [sp, #164]	@ 0xa4
 8023fd0:	f108 0802 	add.w	r8, r8, #2
 8023fd4:	f10b 3bff 	add.w	fp, fp, #4294967295
 8023fd8:	441c      	add	r4, r3
 8023fda:	9b2a      	ldr	r3, [sp, #168]	@ 0xa8
 8023fdc:	441e      	add	r6, r3
 8023fde:	e77c      	b.n	8023eda <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xb6>
 8023fe0:	9b29      	ldr	r3, [sp, #164]	@ 0xa4
 8023fe2:	f109 0902 	add.w	r9, r9, #2
 8023fe6:	441c      	add	r4, r3
 8023fe8:	9b2a      	ldr	r3, [sp, #168]	@ 0xa8
 8023fea:	441e      	add	r6, r3
 8023fec:	9b06      	ldr	r3, [sp, #24]
 8023fee:	3b01      	subs	r3, #1
 8023ff0:	9306      	str	r3, [sp, #24]
 8023ff2:	e752      	b.n	8023e9a <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x76>
 8023ff4:	d020      	beq.n	8024038 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x214>
 8023ff6:	9b06      	ldr	r3, [sp, #24]
 8023ff8:	9829      	ldr	r0, [sp, #164]	@ 0xa4
 8023ffa:	3b01      	subs	r3, #1
 8023ffc:	fb00 4003 	mla	r0, r0, r3, r4
 8024000:	1400      	asrs	r0, r0, #16
 8024002:	f53f af67 	bmi.w	8023ed4 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xb0>
 8024006:	3901      	subs	r1, #1
 8024008:	4288      	cmp	r0, r1
 802400a:	f6bf af63 	bge.w	8023ed4 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xb0>
 802400e:	992a      	ldr	r1, [sp, #168]	@ 0xa8
 8024010:	fb01 6303 	mla	r3, r1, r3, r6
 8024014:	141b      	asrs	r3, r3, #16
 8024016:	f53f af5d 	bmi.w	8023ed4 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xb0>
 802401a:	3a01      	subs	r2, #1
 802401c:	4293      	cmp	r3, r2
 802401e:	f6bf af59 	bge.w	8023ed4 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xb0>
 8024022:	f8dd 8018 	ldr.w	r8, [sp, #24]
 8024026:	46ca      	mov	sl, r9
 8024028:	f1b8 0f00 	cmp.w	r8, #0
 802402c:	dc67      	bgt.n	80240fe <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2da>
 802402e:	9b06      	ldr	r3, [sp, #24]
 8024030:	ea23 75e3 	bic.w	r5, r3, r3, asr #31
 8024034:	eb09 0945 	add.w	r9, r9, r5, lsl #1
 8024038:	9b08      	ldr	r3, [sp, #32]
 802403a:	2b00      	cmp	r3, #0
 802403c:	f340 80d7 	ble.w	80241ee <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3ca>
 8024040:	ee3a aa0c 	vadd.f32	s20, s20, s24
 8024044:	9b26      	ldr	r3, [sp, #152]	@ 0x98
 8024046:	ee79 9aab 	vadd.f32	s19, s19, s23
 802404a:	eef0 6a48 	vmov.f32	s13, s16
 802404e:	eeca 7a8a 	vdiv.f32	s15, s21, s20
 8024052:	ee39 9a0b 	vadd.f32	s18, s18, s22
 8024056:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 802405a:	ee16 4a90 	vmov	r4, s13
 802405e:	eef0 6a68 	vmov.f32	s13, s17
 8024062:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 8024066:	ee16 6a90 	vmov	r6, s13
 802406a:	ee29 7aa7 	vmul.f32	s14, s19, s15
 802406e:	ee69 7a27 	vmul.f32	s15, s18, s15
 8024072:	ee37 8a48 	vsub.f32	s16, s14, s16
 8024076:	ee77 8ae8 	vsub.f32	s17, s15, s17
 802407a:	eebe 8ac8 	vcvt.s32.f32	s16, s16, #16
 802407e:	eefe 8ac8 	vcvt.s32.f32	s17, s17, #16
 8024082:	ee18 2a10 	vmov	r2, s16
 8024086:	eeb0 8a47 	vmov.f32	s16, s14
 802408a:	fb92 f3f3 	sdiv	r3, r2, r3
 802408e:	ee18 2a90 	vmov	r2, s17
 8024092:	9329      	str	r3, [sp, #164]	@ 0xa4
 8024094:	9b26      	ldr	r3, [sp, #152]	@ 0x98
 8024096:	eef0 8a67 	vmov.f32	s17, s15
 802409a:	fb92 f3f3 	sdiv	r3, r2, r3
 802409e:	932a      	str	r3, [sp, #168]	@ 0xa8
 80240a0:	9b08      	ldr	r3, [sp, #32]
 80240a2:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 80240a4:	3b01      	subs	r3, #1
 80240a6:	9308      	str	r3, [sp, #32]
 80240a8:	9b26      	ldr	r3, [sp, #152]	@ 0x98
 80240aa:	bf08      	it	eq
 80240ac:	4613      	moveq	r3, r2
 80240ae:	9306      	str	r3, [sp, #24]
 80240b0:	e6e4      	b.n	8023e7c <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x58>
 80240b2:	2900      	cmp	r1, #0
 80240b4:	f43f af4e 	beq.w	8023f54 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x130>
 80240b8:	f81a 3003 	ldrb.w	r3, [sl, r3]
 80240bc:	f837 3013 	ldrh.w	r3, [r7, r3, lsl #1]
 80240c0:	9309      	str	r3, [sp, #36]	@ 0x24
 80240c2:	e747      	b.n	8023f54 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x130>
 80240c4:	f112 0a01 	adds.w	sl, r2, #1
 80240c8:	d481      	bmi.n	8023fce <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1aa>
 80240ca:	4553      	cmp	r3, sl
 80240cc:	f6ff af7f 	blt.w	8023fce <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1aa>
 80240d0:	f11c 0a01 	adds.w	sl, ip, #1
 80240d4:	f53f af7b 	bmi.w	8023fce <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1aa>
 80240d8:	45d6      	cmp	lr, sl
 80240da:	f6ff af78 	blt.w	8023fce <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1aa>
 80240de:	b21b      	sxth	r3, r3
 80240e0:	e9cd 2c02 	strd	r2, ip, [sp, #8]
 80240e4:	fa0f f28e 	sxth.w	r2, lr
 80240e8:	9300      	str	r3, [sp, #0]
 80240ea:	463b      	mov	r3, r7
 80240ec:	9201      	str	r2, [sp, #4]
 80240ee:	9a07      	ldr	r2, [sp, #28]
 80240f0:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80240f4:	4641      	mov	r1, r8
 80240f6:	9810      	ldr	r0, [sp, #64]	@ 0x40
 80240f8:	f7ff fdfe 	bl	8023cf8 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh>
 80240fc:	e767      	b.n	8023fce <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1aa>
 80240fe:	9b2e      	ldr	r3, [sp, #184]	@ 0xb8
 8024100:	1422      	asrs	r2, r4, #16
 8024102:	1431      	asrs	r1, r6, #16
 8024104:	9d07      	ldr	r5, [sp, #28]
 8024106:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 802410a:	f3c4 3e03 	ubfx	lr, r4, #12, #4
 802410e:	f3c6 3003 	ubfx	r0, r6, #12, #4
 8024112:	fb03 2101 	mla	r1, r3, r1, r2
 8024116:	9a07      	ldr	r2, [sp, #28]
 8024118:	440a      	add	r2, r1
 802411a:	5c69      	ldrb	r1, [r5, r1]
 802411c:	f837 1011 	ldrh.w	r1, [r7, r1, lsl #1]
 8024120:	f1be 0f00 	cmp.w	lr, #0
 8024124:	d05c      	beq.n	80241e0 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3bc>
 8024126:	f892 c001 	ldrb.w	ip, [r2, #1]
 802412a:	f837 501c 	ldrh.w	r5, [r7, ip, lsl #1]
 802412e:	950d      	str	r5, [sp, #52]	@ 0x34
 8024130:	b150      	cbz	r0, 8024148 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x324>
 8024132:	eb02 0c03 	add.w	ip, r2, r3
 8024136:	5cd3      	ldrb	r3, [r2, r3]
 8024138:	f837 3013 	ldrh.w	r3, [r7, r3, lsl #1]
 802413c:	930a      	str	r3, [sp, #40]	@ 0x28
 802413e:	f89c 3001 	ldrb.w	r3, [ip, #1]
 8024142:	f837 3013 	ldrh.w	r3, [r7, r3, lsl #1]
 8024146:	930e      	str	r3, [sp, #56]	@ 0x38
 8024148:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 802414a:	fb1e f200 	smulbb	r2, lr, r0
 802414e:	9d0e      	ldr	r5, [sp, #56]	@ 0x38
 8024150:	f108 38ff 	add.w	r8, r8, #4294967295
 8024154:	ea4f 4c03 	mov.w	ip, r3, lsl #16
 8024158:	f423 63fc 	bic.w	r3, r3, #2016	@ 0x7e0
 802415c:	10d2      	asrs	r2, r2, #3
 802415e:	f425 6bfc 	bic.w	fp, r5, #2016	@ 0x7e0
 8024162:	f00c 6cfc 	and.w	ip, ip, #132120576	@ 0x7e00000
 8024166:	ea4c 0c03 	orr.w	ip, ip, r3
 802416a:	ebc2 034e 	rsb	r3, r2, lr, lsl #1
 802416e:	9311      	str	r3, [sp, #68]	@ 0x44
 8024170:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8024172:	9d11      	ldr	r5, [sp, #68]	@ 0x44
 8024174:	041b      	lsls	r3, r3, #16
 8024176:	f003 63fc 	and.w	r3, r3, #132120576	@ 0x7e00000
 802417a:	ea43 030b 	orr.w	r3, r3, fp
 802417e:	ea4f 4b01 	mov.w	fp, r1, lsl #16
 8024182:	f421 61fc 	bic.w	r1, r1, #2016	@ 0x7e0
 8024186:	4353      	muls	r3, r2
 8024188:	fb05 3c0c 	mla	ip, r5, ip, r3
 802418c:	f00b 63fc 	and.w	r3, fp, #132120576	@ 0x7e00000
 8024190:	ea43 0b01 	orr.w	fp, r3, r1
 8024194:	f1c0 0110 	rsb	r1, r0, #16
 8024198:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 802419a:	eba1 0e0e 	sub.w	lr, r1, lr
 802419e:	eb02 0e4e 	add.w	lr, r2, lr, lsl #1
 80241a2:	ebc2 0240 	rsb	r2, r2, r0, lsl #1
 80241a6:	fb0e cc0b 	mla	ip, lr, fp, ip
 80241aa:	ea4f 4b03 	mov.w	fp, r3, lsl #16
 80241ae:	f423 6efc 	bic.w	lr, r3, #2016	@ 0x7e0
 80241b2:	f00b 6bfc 	and.w	fp, fp, #132120576	@ 0x7e00000
 80241b6:	ea4b 0e0e 	orr.w	lr, fp, lr
 80241ba:	fb02 cc0e 	mla	ip, r2, lr, ip
 80241be:	ea4f 535c 	mov.w	r3, ip, lsr #21
 80241c2:	ea4f 1c5c 	mov.w	ip, ip, lsr #5
 80241c6:	f403 63fc 	and.w	r3, r3, #2016	@ 0x7e0
 80241ca:	f42c 6cfc 	bic.w	ip, ip, #2016	@ 0x7e0
 80241ce:	ea43 0c0c 	orr.w	ip, r3, ip
 80241d2:	9b29      	ldr	r3, [sp, #164]	@ 0xa4
 80241d4:	441c      	add	r4, r3
 80241d6:	9b2a      	ldr	r3, [sp, #168]	@ 0xa8
 80241d8:	f82a cb02 	strh.w	ip, [sl], #2
 80241dc:	441e      	add	r6, r3
 80241de:	e723      	b.n	8024028 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x204>
 80241e0:	2800      	cmp	r0, #0
 80241e2:	d0b1      	beq.n	8024148 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x324>
 80241e4:	5cd3      	ldrb	r3, [r2, r3]
 80241e6:	f837 3013 	ldrh.w	r3, [r7, r3, lsl #1]
 80241ea:	930a      	str	r3, [sp, #40]	@ 0x28
 80241ec:	e7ac      	b.n	8024148 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x324>
 80241ee:	b013      	add	sp, #76	@ 0x4c
 80241f0:	ecbd 8b0a 	vpop	{d8-d12}
 80241f4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

080241f8 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh>:
 80241f8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80241fc:	468b      	mov	fp, r1
 80241fe:	8809      	ldrh	r1, [r1, #0]
 8024200:	b089      	sub	sp, #36	@ 0x24
 8024202:	10cd      	asrs	r5, r1, #3
 8024204:	ea4f 2921 	mov.w	r9, r1, asr #8
 8024208:	f9bd e048 	ldrsh.w	lr, [sp, #72]	@ 0x48
 802420c:	00c9      	lsls	r1, r1, #3
 802420e:	f005 05fc 	and.w	r5, r5, #252	@ 0xfc
 8024212:	f009 09f8 	and.w	r9, r9, #248	@ 0xf8
 8024216:	9202      	str	r2, [sp, #8]
 8024218:	b2c9      	uxtb	r1, r1
 802421a:	9500      	str	r5, [sp, #0]
 802421c:	f9bd a04c 	ldrsh.w	sl, [sp, #76]	@ 0x4c
 8024220:	9101      	str	r1, [sp, #4]
 8024222:	9900      	ldr	r1, [sp, #0]
 8024224:	f89d 7058 	ldrb.w	r7, [sp, #88]	@ 0x58
 8024228:	0209      	lsls	r1, r1, #8
 802422a:	f89d 005c 	ldrb.w	r0, [sp, #92]	@ 0x5c
 802422e:	f89d c060 	ldrb.w	ip, [sp, #96]	@ 0x60
 8024232:	ea41 4109 	orr.w	r1, r1, r9, lsl #16
 8024236:	e9dd 6414 	ldrd	r6, r4, [sp, #80]	@ 0x50
 802423a:	fb04 650e 	mla	r5, r4, lr, r6
 802423e:	2c00      	cmp	r4, #0
 8024240:	eb02 0805 	add.w	r8, r2, r5
 8024244:	9a01      	ldr	r2, [sp, #4]
 8024246:	ea41 0102 	orr.w	r1, r1, r2
 802424a:	9107      	str	r1, [sp, #28]
 802424c:	db43      	blt.n	80242d6 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh+0xde>
 802424e:	45a2      	cmp	sl, r4
 8024250:	dd41      	ble.n	80242d6 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh+0xde>
 8024252:	2e00      	cmp	r6, #0
 8024254:	db3d      	blt.n	80242d2 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh+0xda>
 8024256:	45b6      	cmp	lr, r6
 8024258:	dd3b      	ble.n	80242d2 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh+0xda>
 802425a:	9a02      	ldr	r2, [sp, #8]
 802425c:	5d55      	ldrb	r5, [r2, r5]
 802425e:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8024262:	441d      	add	r5, r3
 8024264:	1c72      	adds	r2, r6, #1
 8024266:	d439      	bmi.n	80242dc <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh+0xe4>
 8024268:	4596      	cmp	lr, r2
 802426a:	dd37      	ble.n	80242dc <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh+0xe4>
 802426c:	2f00      	cmp	r7, #0
 802426e:	d035      	beq.n	80242dc <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh+0xe4>
 8024270:	f898 1001 	ldrb.w	r1, [r8, #1]
 8024274:	eb01 0141 	add.w	r1, r1, r1, lsl #1
 8024278:	4419      	add	r1, r3
 802427a:	3401      	adds	r4, #1
 802427c:	d432      	bmi.n	80242e4 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh+0xec>
 802427e:	45a2      	cmp	sl, r4
 8024280:	dd30      	ble.n	80242e4 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh+0xec>
 8024282:	b378      	cbz	r0, 80242e4 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh+0xec>
 8024284:	2e00      	cmp	r6, #0
 8024286:	db2b      	blt.n	80242e0 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh+0xe8>
 8024288:	45b6      	cmp	lr, r6
 802428a:	dd29      	ble.n	80242e0 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh+0xe8>
 802428c:	f818 400e 	ldrb.w	r4, [r8, lr]
 8024290:	eb04 0444 	add.w	r4, r4, r4, lsl #1
 8024294:	441c      	add	r4, r3
 8024296:	3601      	adds	r6, #1
 8024298:	d427      	bmi.n	80242ea <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh+0xf2>
 802429a:	45b6      	cmp	lr, r6
 802429c:	dd25      	ble.n	80242ea <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh+0xf2>
 802429e:	b327      	cbz	r7, 80242ea <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh+0xf2>
 80242a0:	44c6      	add	lr, r8
 80242a2:	f89e 2001 	ldrb.w	r2, [lr, #1]
 80242a6:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 80242aa:	4413      	add	r3, r2
 80242ac:	782a      	ldrb	r2, [r5, #0]
 80242ae:	2f0f      	cmp	r7, #15
 80242b0:	9202      	str	r2, [sp, #8]
 80242b2:	780a      	ldrb	r2, [r1, #0]
 80242b4:	9203      	str	r2, [sp, #12]
 80242b6:	7822      	ldrb	r2, [r4, #0]
 80242b8:	9204      	str	r2, [sp, #16]
 80242ba:	781a      	ldrb	r2, [r3, #0]
 80242bc:	9205      	str	r2, [sp, #20]
 80242be:	d801      	bhi.n	80242c4 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh+0xcc>
 80242c0:	280f      	cmp	r0, #15
 80242c2:	d914      	bls.n	80242ee <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh+0xf6>
 80242c4:	4b3f      	ldr	r3, [pc, #252]	@ (80243c4 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh+0x1cc>)
 80242c6:	f44f 71fb 	mov.w	r1, #502	@ 0x1f6
 80242ca:	4a3f      	ldr	r2, [pc, #252]	@ (80243c8 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh+0x1d0>)
 80242cc:	483f      	ldr	r0, [pc, #252]	@ (80243cc <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh+0x1d4>)
 80242ce:	f006 fb31 	bl	802a934 <__assert_func>
 80242d2:	ad07      	add	r5, sp, #28
 80242d4:	e7c6      	b.n	8024264 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh+0x6c>
 80242d6:	a907      	add	r1, sp, #28
 80242d8:	460d      	mov	r5, r1
 80242da:	e7ce      	b.n	802427a <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh+0x82>
 80242dc:	a907      	add	r1, sp, #28
 80242de:	e7cc      	b.n	802427a <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh+0x82>
 80242e0:	ac07      	add	r4, sp, #28
 80242e2:	e7d8      	b.n	8024296 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh+0x9e>
 80242e4:	ab07      	add	r3, sp, #28
 80242e6:	461c      	mov	r4, r3
 80242e8:	e7e0      	b.n	80242ac <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh+0xb4>
 80242ea:	ab07      	add	r3, sp, #28
 80242ec:	e7de      	b.n	80242ac <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh+0xb4>
 80242ee:	b2ba      	uxth	r2, r7
 80242f0:	f891 8002 	ldrb.w	r8, [r1, #2]
 80242f4:	b280      	uxth	r0, r0
 80242f6:	7849      	ldrb	r1, [r1, #1]
 80242f8:	78ae      	ldrb	r6, [r5, #2]
 80242fa:	fa1f f78c 	uxth.w	r7, ip
 80242fe:	fb02 fa00 	mul.w	sl, r2, r0
 8024302:	0112      	lsls	r2, r2, #4
 8024304:	786d      	ldrb	r5, [r5, #1]
 8024306:	ea6f 0c0c 	mvn.w	ip, ip
 802430a:	ebca 1000 	rsb	r0, sl, r0, lsl #4
 802430e:	f5c2 7e80 	rsb	lr, r2, #256	@ 0x100
 8024312:	eba2 020a 	sub.w	r2, r2, sl
 8024316:	fa5f fc8c 	uxtb.w	ip, ip
 802431a:	b280      	uxth	r0, r0
 802431c:	fb19 f90c 	smulbb	r9, r9, ip
 8024320:	b292      	uxth	r2, r2
 8024322:	ebae 0e00 	sub.w	lr, lr, r0
 8024326:	4351      	muls	r1, r2
 8024328:	fa1f fe8e 	uxth.w	lr, lr
 802432c:	fb02 f808 	mul.w	r8, r2, r8
 8024330:	fb0e 1505 	mla	r5, lr, r5, r1
 8024334:	7861      	ldrb	r1, [r4, #1]
 8024336:	fb0e 8806 	mla	r8, lr, r6, r8
 802433a:	78a6      	ldrb	r6, [r4, #2]
 802433c:	fb00 5501 	mla	r5, r0, r1, r5
 8024340:	7859      	ldrb	r1, [r3, #1]
 8024342:	fb00 8806 	mla	r8, r0, r6, r8
 8024346:	789e      	ldrb	r6, [r3, #2]
 8024348:	9b00      	ldr	r3, [sp, #0]
 802434a:	fb0a 5101 	mla	r1, sl, r1, r5
 802434e:	fb0a 8606 	mla	r6, sl, r6, r8
 8024352:	fb13 f50c 	smulbb	r5, r3, ip
 8024356:	9b03      	ldr	r3, [sp, #12]
 8024358:	f3c6 2607 	ubfx	r6, r6, #8, #8
 802435c:	f3c1 2107 	ubfx	r1, r1, #8, #8
 8024360:	435a      	muls	r2, r3
 8024362:	9b02      	ldr	r3, [sp, #8]
 8024364:	fb06 9607 	mla	r6, r6, r7, r9
 8024368:	fb0e 2203 	mla	r2, lr, r3, r2
 802436c:	9b04      	ldr	r3, [sp, #16]
 802436e:	b2b6      	uxth	r6, r6
 8024370:	fb01 5107 	mla	r1, r1, r7, r5
 8024374:	fb00 2003 	mla	r0, r0, r3, r2
 8024378:	9b05      	ldr	r3, [sp, #20]
 802437a:	f106 0901 	add.w	r9, r6, #1
 802437e:	b289      	uxth	r1, r1
 8024380:	fb0a 0a03 	mla	sl, sl, r3, r0
 8024384:	9b01      	ldr	r3, [sp, #4]
 8024386:	eb09 2616 	add.w	r6, r9, r6, lsr #8
 802438a:	1c4d      	adds	r5, r1, #1
 802438c:	fb13 fc0c 	smulbb	ip, r3, ip
 8024390:	f3ca 2a07 	ubfx	sl, sl, #8, #8
 8024394:	f406 4978 	and.w	r9, r6, #63488	@ 0xf800
 8024398:	eb05 2111 	add.w	r1, r5, r1, lsr #8
 802439c:	fb0a c707 	mla	r7, sl, r7, ip
 80243a0:	0949      	lsrs	r1, r1, #5
 80243a2:	b2bf      	uxth	r7, r7
 80243a4:	f401 61fc 	and.w	r1, r1, #2016	@ 0x7e0
 80243a8:	1c7e      	adds	r6, r7, #1
 80243aa:	eb06 2617 	add.w	r6, r6, r7, lsr #8
 80243ae:	f3c6 26c4 	ubfx	r6, r6, #11, #5
 80243b2:	ea46 0609 	orr.w	r6, r6, r9
 80243b6:	430e      	orrs	r6, r1
 80243b8:	f8ab 6000 	strh.w	r6, [fp]
 80243bc:	b009      	add	sp, #36	@ 0x24
 80243be:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80243c2:	bf00      	nop
 80243c4:	0802fad5 	.word	0x0802fad5
 80243c8:	080300a2 	.word	0x080300a2
 80243cc:	0802fb59 	.word	0x0802fb59

080243d0 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 80243d0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80243d4:	ed2d 8b08 	vpush	{d8-d11}
 80243d8:	b095      	sub	sp, #84	@ 0x54
 80243da:	eeb0 aa40 	vmov.f32	s20, s0
 80243de:	eef0 9a60 	vmov.f32	s19, s1
 80243e2:	9212      	str	r2, [sp, #72]	@ 0x48
 80243e4:	eeb0 9a41 	vmov.f32	s18, s2
 80243e8:	9a2b      	ldr	r2, [sp, #172]	@ 0xac
 80243ea:	eeb0 8a62 	vmov.f32	s16, s5
 80243ee:	9309      	str	r3, [sp, #36]	@ 0x24
 80243f0:	eef0 8a43 	vmov.f32	s17, s6
 80243f4:	f89d 30bc 	ldrb.w	r3, [sp, #188]	@ 0xbc
 80243f8:	eef0 ba44 	vmov.f32	s23, s8
 80243fc:	9013      	str	r0, [sp, #76]	@ 0x4c
 80243fe:	eeb0 ba64 	vmov.f32	s22, s9
 8024402:	930f      	str	r3, [sp, #60]	@ 0x3c
 8024404:	eef0 aa45 	vmov.f32	s21, s10
 8024408:	6850      	ldr	r0, [r2, #4]
 802440a:	910e      	str	r1, [sp, #56]	@ 0x38
 802440c:	6812      	ldr	r2, [r2, #0]
 802440e:	e9dd 132c 	ldrd	r1, r3, [sp, #176]	@ 0xb0
 8024412:	fb00 1303 	mla	r3, r0, r3, r1
 8024416:	eb02 0343 	add.w	r3, r2, r3, lsl #1
 802441a:	930a      	str	r3, [sp, #40]	@ 0x28
 802441c:	9b2e      	ldr	r3, [sp, #184]	@ 0xb8
 802441e:	681b      	ldr	r3, [r3, #0]
 8024420:	930d      	str	r3, [sp, #52]	@ 0x34
 8024422:	9b2e      	ldr	r3, [sp, #184]	@ 0xb8
 8024424:	685c      	ldr	r4, [r3, #4]
 8024426:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8024428:	3404      	adds	r4, #4
 802442a:	43db      	mvns	r3, r3
 802442c:	b2db      	uxtb	r3, r3
 802442e:	930b      	str	r3, [sp, #44]	@ 0x2c
 8024430:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8024432:	2b00      	cmp	r3, #0
 8024434:	dc03      	bgt.n	802443e <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6e>
 8024436:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 8024438:	2b00      	cmp	r3, #0
 802443a:	f340 8255 	ble.w	80248e8 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x518>
 802443e:	9b2e      	ldr	r3, [sp, #184]	@ 0xb8
 8024440:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 8024444:	f9b3 200c 	ldrsh.w	r2, [r3, #12]
 8024448:	1e48      	subs	r0, r1, #1
 802444a:	1e55      	subs	r5, r2, #1
 802444c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 802444e:	2b00      	cmp	r3, #0
 8024450:	f340 80f9 	ble.w	8024646 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x276>
 8024454:	9e27      	ldr	r6, [sp, #156]	@ 0x9c
 8024456:	9b28      	ldr	r3, [sp, #160]	@ 0xa0
 8024458:	1436      	asrs	r6, r6, #16
 802445a:	ea4f 4323 	mov.w	r3, r3, asr #16
 802445e:	d406      	bmi.n	802446e <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x9e>
 8024460:	4286      	cmp	r6, r0
 8024462:	da04      	bge.n	802446e <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x9e>
 8024464:	2b00      	cmp	r3, #0
 8024466:	db02      	blt.n	802446e <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x9e>
 8024468:	42ab      	cmp	r3, r5
 802446a:	f2c0 80ed 	blt.w	8024648 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x278>
 802446e:	3601      	adds	r6, #1
 8024470:	f100 80da 	bmi.w	8024628 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x258>
 8024474:	42b1      	cmp	r1, r6
 8024476:	f2c0 80d7 	blt.w	8024628 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x258>
 802447a:	3301      	adds	r3, #1
 802447c:	f100 80d4 	bmi.w	8024628 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x258>
 8024480:	429a      	cmp	r2, r3
 8024482:	f2c0 80d1 	blt.w	8024628 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x258>
 8024486:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8024488:	9311      	str	r3, [sp, #68]	@ 0x44
 802448a:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 802448c:	930c      	str	r3, [sp, #48]	@ 0x30
 802448e:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 8024490:	2b00      	cmp	r3, #0
 8024492:	f340 80fa 	ble.w	802468a <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2ba>
 8024496:	982e      	ldr	r0, [sp, #184]	@ 0xb8
 8024498:	9b28      	ldr	r3, [sp, #160]	@ 0xa0
 802449a:	9a28      	ldr	r2, [sp, #160]	@ 0xa0
 802449c:	68c6      	ldr	r6, [r0, #12]
 802449e:	141d      	asrs	r5, r3, #16
 80244a0:	9827      	ldr	r0, [sp, #156]	@ 0x9c
 80244a2:	f3c2 3103 	ubfx	r1, r2, #12, #4
 80244a6:	9b27      	ldr	r3, [sp, #156]	@ 0x9c
 80244a8:	9a2e      	ldr	r2, [sp, #184]	@ 0xb8
 80244aa:	1400      	asrs	r0, r0, #16
 80244ac:	f3c3 3303 	ubfx	r3, r3, #12, #4
 80244b0:	6892      	ldr	r2, [r2, #8]
 80244b2:	f100 813e 	bmi.w	8024732 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x362>
 80244b6:	1e57      	subs	r7, r2, #1
 80244b8:	42b8      	cmp	r0, r7
 80244ba:	f280 813a 	bge.w	8024732 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x362>
 80244be:	2d00      	cmp	r5, #0
 80244c0:	f2c0 8137 	blt.w	8024732 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x362>
 80244c4:	1e77      	subs	r7, r6, #1
 80244c6:	42bd      	cmp	r5, r7
 80244c8:	f280 8133 	bge.w	8024732 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x362>
 80244cc:	b212      	sxth	r2, r2
 80244ce:	fb05 0002 	mla	r0, r5, r2, r0
 80244d2:	9d0d      	ldr	r5, [sp, #52]	@ 0x34
 80244d4:	f815 a000 	ldrb.w	sl, [r5, r0]
 80244d8:	182e      	adds	r6, r5, r0
 80244da:	eb0a 0a4a 	add.w	sl, sl, sl, lsl #1
 80244de:	eb04 050a 	add.w	r5, r4, sl
 80244e2:	2b00      	cmp	r3, #0
 80244e4:	f000 8117 	beq.w	8024716 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x346>
 80244e8:	f896 c001 	ldrb.w	ip, [r6, #1]
 80244ec:	eb0c 0c4c 	add.w	ip, ip, ip, lsl #1
 80244f0:	44a4      	add	ip, r4
 80244f2:	2900      	cmp	r1, #0
 80244f4:	f000 8117 	beq.w	8024726 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x356>
 80244f8:	18b0      	adds	r0, r6, r2
 80244fa:	5cb2      	ldrb	r2, [r6, r2]
 80244fc:	7840      	ldrb	r0, [r0, #1]
 80244fe:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 8024502:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 8024506:	4422      	add	r2, r4
 8024508:	4420      	add	r0, r4
 802450a:	b29b      	uxth	r3, r3
 802450c:	f89c 7002 	ldrb.w	r7, [ip, #2]
 8024510:	b289      	uxth	r1, r1
 8024512:	f895 b002 	ldrb.w	fp, [r5, #2]
 8024516:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8024518:	fb03 f901 	mul.w	r9, r3, r1
 802451c:	011b      	lsls	r3, r3, #4
 802451e:	f8b6 e000 	ldrh.w	lr, [r6]
 8024522:	ebc9 1101 	rsb	r1, r9, r1, lsl #4
 8024526:	f5c3 7880 	rsb	r8, r3, #256	@ 0x100
 802452a:	eba3 0309 	sub.w	r3, r3, r9
 802452e:	f8bd 603c 	ldrh.w	r6, [sp, #60]	@ 0x3c
 8024532:	b289      	uxth	r1, r1
 8024534:	f814 a00a 	ldrb.w	sl, [r4, sl]
 8024538:	b29b      	uxth	r3, r3
 802453a:	eba8 0801 	sub.w	r8, r8, r1
 802453e:	435f      	muls	r7, r3
 8024540:	fa1f f888 	uxth.w	r8, r8
 8024544:	9310      	str	r3, [sp, #64]	@ 0x40
 8024546:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8024548:	fb08 770b 	mla	r7, r8, fp, r7
 802454c:	f892 b002 	ldrb.w	fp, [r2, #2]
 8024550:	fb01 770b 	mla	r7, r1, fp, r7
 8024554:	f890 b002 	ldrb.w	fp, [r0, #2]
 8024558:	fb09 770b 	mla	r7, r9, fp, r7
 802455c:	ea4f 2b2e 	mov.w	fp, lr, asr #8
 8024560:	f00b 0bf8 	and.w	fp, fp, #248	@ 0xf8
 8024564:	f3c7 2707 	ubfx	r7, r7, #8, #8
 8024568:	fb1b fb03 	smulbb	fp, fp, r3
 802456c:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 802456e:	fb07 b706 	mla	r7, r7, r6, fp
 8024572:	f895 b001 	ldrb.w	fp, [r5, #1]
 8024576:	f89c 5001 	ldrb.w	r5, [ip, #1]
 802457a:	f89c c000 	ldrb.w	ip, [ip]
 802457e:	b2bf      	uxth	r7, r7
 8024580:	435d      	muls	r5, r3
 8024582:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8024584:	fb08 550b 	mla	r5, r8, fp, r5
 8024588:	f892 b001 	ldrb.w	fp, [r2, #1]
 802458c:	fb01 550b 	mla	r5, r1, fp, r5
 8024590:	f890 b001 	ldrb.w	fp, [r0, #1]
 8024594:	fb09 550b 	mla	r5, r9, fp, r5
 8024598:	ea4f 0bee 	mov.w	fp, lr, asr #3
 802459c:	ea4f 0ece 	mov.w	lr, lr, lsl #3
 80245a0:	f00b 0bfc 	and.w	fp, fp, #252	@ 0xfc
 80245a4:	f3c5 2507 	ubfx	r5, r5, #8, #8
 80245a8:	fa5f fe8e 	uxtb.w	lr, lr
 80245ac:	fb1b fb03 	smulbb	fp, fp, r3
 80245b0:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 80245b2:	fb03 f30c 	mul.w	r3, r3, ip
 80245b6:	f892 c000 	ldrb.w	ip, [r2]
 80245ba:	fb05 b506 	mla	r5, r5, r6, fp
 80245be:	fb08 330a 	mla	r3, r8, sl, r3
 80245c2:	b2ad      	uxth	r5, r5
 80245c4:	fb01 330c 	mla	r3, r1, ip, r3
 80245c8:	f890 c000 	ldrb.w	ip, [r0]
 80245cc:	f105 0b01 	add.w	fp, r5, #1
 80245d0:	fb09 3c0c 	mla	ip, r9, ip, r3
 80245d4:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80245d6:	eb0b 2515 	add.w	r5, fp, r5, lsr #8
 80245da:	fb1e fe03 	smulbb	lr, lr, r3
 80245de:	f3cc 2c07 	ubfx	ip, ip, #8, #8
 80245e2:	1c7b      	adds	r3, r7, #1
 80245e4:	096d      	lsrs	r5, r5, #5
 80245e6:	fb0c e606 	mla	r6, ip, r6, lr
 80245ea:	eb03 2717 	add.w	r7, r3, r7, lsr #8
 80245ee:	f405 65fc 	and.w	r5, r5, #2016	@ 0x7e0
 80245f2:	b2b6      	uxth	r6, r6
 80245f4:	f407 4378 	and.w	r3, r7, #63488	@ 0xf800
 80245f8:	1c77      	adds	r7, r6, #1
 80245fa:	eb07 2716 	add.w	r7, r7, r6, lsr #8
 80245fe:	f3c7 27c4 	ubfx	r7, r7, #11, #5
 8024602:	431f      	orrs	r7, r3
 8024604:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8024606:	433d      	orrs	r5, r7
 8024608:	801d      	strh	r5, [r3, #0]
 802460a:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 802460c:	9a29      	ldr	r2, [sp, #164]	@ 0xa4
 802460e:	3302      	adds	r3, #2
 8024610:	930c      	str	r3, [sp, #48]	@ 0x30
 8024612:	9b27      	ldr	r3, [sp, #156]	@ 0x9c
 8024614:	4413      	add	r3, r2
 8024616:	9a2a      	ldr	r2, [sp, #168]	@ 0xa8
 8024618:	9327      	str	r3, [sp, #156]	@ 0x9c
 802461a:	9b28      	ldr	r3, [sp, #160]	@ 0xa0
 802461c:	4413      	add	r3, r2
 802461e:	9328      	str	r3, [sp, #160]	@ 0xa0
 8024620:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 8024622:	3b01      	subs	r3, #1
 8024624:	9311      	str	r3, [sp, #68]	@ 0x44
 8024626:	e732      	b.n	802448e <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xbe>
 8024628:	9b27      	ldr	r3, [sp, #156]	@ 0x9c
 802462a:	9e29      	ldr	r6, [sp, #164]	@ 0xa4
 802462c:	4433      	add	r3, r6
 802462e:	9e2a      	ldr	r6, [sp, #168]	@ 0xa8
 8024630:	9327      	str	r3, [sp, #156]	@ 0x9c
 8024632:	9b28      	ldr	r3, [sp, #160]	@ 0xa0
 8024634:	4433      	add	r3, r6
 8024636:	9328      	str	r3, [sp, #160]	@ 0xa0
 8024638:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 802463a:	3b01      	subs	r3, #1
 802463c:	9309      	str	r3, [sp, #36]	@ 0x24
 802463e:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8024640:	3302      	adds	r3, #2
 8024642:	930a      	str	r3, [sp, #40]	@ 0x28
 8024644:	e702      	b.n	802444c <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7c>
 8024646:	d027      	beq.n	8024698 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2c8>
 8024648:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 802464a:	9829      	ldr	r0, [sp, #164]	@ 0xa4
 802464c:	3b01      	subs	r3, #1
 802464e:	9d27      	ldr	r5, [sp, #156]	@ 0x9c
 8024650:	fb00 5003 	mla	r0, r0, r3, r5
 8024654:	1400      	asrs	r0, r0, #16
 8024656:	f53f af16 	bmi.w	8024486 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xb6>
 802465a:	3901      	subs	r1, #1
 802465c:	4288      	cmp	r0, r1
 802465e:	f6bf af12 	bge.w	8024486 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xb6>
 8024662:	992a      	ldr	r1, [sp, #168]	@ 0xa8
 8024664:	9828      	ldr	r0, [sp, #160]	@ 0xa0
 8024666:	fb01 0303 	mla	r3, r1, r3, r0
 802466a:	141b      	asrs	r3, r3, #16
 802466c:	f53f af0b 	bmi.w	8024486 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xb6>
 8024670:	3a01      	subs	r2, #1
 8024672:	4293      	cmp	r3, r2
 8024674:	f6bf af07 	bge.w	8024486 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xb6>
 8024678:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 802467a:	f8bd a03c 	ldrh.w	sl, [sp, #60]	@ 0x3c
 802467e:	9311      	str	r3, [sp, #68]	@ 0x44
 8024680:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8024682:	930c      	str	r3, [sp, #48]	@ 0x30
 8024684:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 8024686:	2b00      	cmp	r3, #0
 8024688:	dc70      	bgt.n	802476c <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x39c>
 802468a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 802468c:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 802468e:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8024692:	eb02 0343 	add.w	r3, r2, r3, lsl #1
 8024696:	930a      	str	r3, [sp, #40]	@ 0x28
 8024698:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 802469a:	2b00      	cmp	r3, #0
 802469c:	f340 8124 	ble.w	80248e8 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x518>
 80246a0:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 80246a4:	9b26      	ldr	r3, [sp, #152]	@ 0x98
 80246a6:	ee3a aa2b 	vadd.f32	s20, s20, s23
 80246aa:	ee79 9a8b 	vadd.f32	s19, s19, s22
 80246ae:	eef0 6a48 	vmov.f32	s13, s16
 80246b2:	eec7 7a0a 	vdiv.f32	s15, s14, s20
 80246b6:	ee39 9a2a 	vadd.f32	s18, s18, s21
 80246ba:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 80246be:	edcd 6a27 	vstr	s13, [sp, #156]	@ 0x9c
 80246c2:	eef0 6a68 	vmov.f32	s13, s17
 80246c6:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 80246ca:	edcd 6a28 	vstr	s13, [sp, #160]	@ 0xa0
 80246ce:	ee29 7aa7 	vmul.f32	s14, s19, s15
 80246d2:	ee69 7a27 	vmul.f32	s15, s18, s15
 80246d6:	ee37 8a48 	vsub.f32	s16, s14, s16
 80246da:	ee77 8ae8 	vsub.f32	s17, s15, s17
 80246de:	eebe 8ac8 	vcvt.s32.f32	s16, s16, #16
 80246e2:	eefe 8ac8 	vcvt.s32.f32	s17, s17, #16
 80246e6:	ee18 2a10 	vmov	r2, s16
 80246ea:	eeb0 8a47 	vmov.f32	s16, s14
 80246ee:	fb92 f3f3 	sdiv	r3, r2, r3
 80246f2:	ee18 2a90 	vmov	r2, s17
 80246f6:	9329      	str	r3, [sp, #164]	@ 0xa4
 80246f8:	9b26      	ldr	r3, [sp, #152]	@ 0x98
 80246fa:	eef0 8a67 	vmov.f32	s17, s15
 80246fe:	fb92 f3f3 	sdiv	r3, r2, r3
 8024702:	932a      	str	r3, [sp, #168]	@ 0xa8
 8024704:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8024706:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 8024708:	3b01      	subs	r3, #1
 802470a:	930e      	str	r3, [sp, #56]	@ 0x38
 802470c:	9b26      	ldr	r3, [sp, #152]	@ 0x98
 802470e:	bf08      	it	eq
 8024710:	4613      	moveq	r3, r2
 8024712:	9309      	str	r3, [sp, #36]	@ 0x24
 8024714:	e68c      	b.n	8024430 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x60>
 8024716:	b149      	cbz	r1, 802472c <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x35c>
 8024718:	5cb2      	ldrb	r2, [r6, r2]
 802471a:	4628      	mov	r0, r5
 802471c:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 8024720:	4422      	add	r2, r4
 8024722:	46ac      	mov	ip, r5
 8024724:	e6f1      	b.n	802450a <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x13a>
 8024726:	4628      	mov	r0, r5
 8024728:	462a      	mov	r2, r5
 802472a:	e6ee      	b.n	802450a <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x13a>
 802472c:	4628      	mov	r0, r5
 802472e:	462a      	mov	r2, r5
 8024730:	e7f7      	b.n	8024722 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x352>
 8024732:	1c47      	adds	r7, r0, #1
 8024734:	f53f af69 	bmi.w	802460a <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x23a>
 8024738:	42ba      	cmp	r2, r7
 802473a:	f6ff af66 	blt.w	802460a <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x23a>
 802473e:	1c6f      	adds	r7, r5, #1
 8024740:	f53f af63 	bmi.w	802460a <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x23a>
 8024744:	42be      	cmp	r6, r7
 8024746:	f6ff af60 	blt.w	802460a <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x23a>
 802474a:	9f0f      	ldr	r7, [sp, #60]	@ 0x3c
 802474c:	b236      	sxth	r6, r6
 802474e:	b212      	sxth	r2, r2
 8024750:	9002      	str	r0, [sp, #8]
 8024752:	9601      	str	r6, [sp, #4]
 8024754:	9200      	str	r2, [sp, #0]
 8024756:	9813      	ldr	r0, [sp, #76]	@ 0x4c
 8024758:	e9cd 1705 	strd	r1, r7, [sp, #20]
 802475c:	e9cd 5303 	strd	r5, r3, [sp, #12]
 8024760:	e9dd 120c 	ldrd	r1, r2, [sp, #48]	@ 0x30
 8024764:	4623      	mov	r3, r4
 8024766:	f7ff fd47 	bl	80241f8 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh>
 802476a:	e74e      	b.n	802460a <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x23a>
 802476c:	9a28      	ldr	r2, [sp, #160]	@ 0xa0
 802476e:	9828      	ldr	r0, [sp, #160]	@ 0xa0
 8024770:	f3c2 3103 	ubfx	r1, r2, #12, #4
 8024774:	9d27      	ldr	r5, [sp, #156]	@ 0x9c
 8024776:	9a2e      	ldr	r2, [sp, #184]	@ 0xb8
 8024778:	1400      	asrs	r0, r0, #16
 802477a:	142d      	asrs	r5, r5, #16
 802477c:	9b27      	ldr	r3, [sp, #156]	@ 0x9c
 802477e:	f9b2 2008 	ldrsh.w	r2, [r2, #8]
 8024782:	f3c3 3303 	ubfx	r3, r3, #12, #4
 8024786:	fb02 5000 	mla	r0, r2, r0, r5
 802478a:	9d0d      	ldr	r5, [sp, #52]	@ 0x34
 802478c:	f815 9000 	ldrb.w	r9, [r5, r0]
 8024790:	182e      	adds	r6, r5, r0
 8024792:	eb09 0949 	add.w	r9, r9, r9, lsl #1
 8024796:	eb04 0509 	add.w	r5, r4, r9
 802479a:	2b00      	cmp	r3, #0
 802479c:	f000 8096 	beq.w	80248cc <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4fc>
 80247a0:	7877      	ldrb	r7, [r6, #1]
 80247a2:	eb07 0747 	add.w	r7, r7, r7, lsl #1
 80247a6:	4427      	add	r7, r4
 80247a8:	2900      	cmp	r1, #0
 80247aa:	f000 8097 	beq.w	80248dc <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x50c>
 80247ae:	18b0      	adds	r0, r6, r2
 80247b0:	5cb2      	ldrb	r2, [r6, r2]
 80247b2:	7840      	ldrb	r0, [r0, #1]
 80247b4:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 80247b8:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 80247bc:	4422      	add	r2, r4
 80247be:	4420      	add	r0, r4
 80247c0:	b29b      	uxth	r3, r3
 80247c2:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 80247c4:	b289      	uxth	r1, r1
 80247c6:	f895 b002 	ldrb.w	fp, [r5, #2]
 80247ca:	f8b6 c000 	ldrh.w	ip, [r6]
 80247ce:	fb03 f801 	mul.w	r8, r3, r1
 80247d2:	011b      	lsls	r3, r3, #4
 80247d4:	78be      	ldrb	r6, [r7, #2]
 80247d6:	ebc8 1101 	rsb	r1, r8, r1, lsl #4
 80247da:	f5c3 7e80 	rsb	lr, r3, #256	@ 0x100
 80247de:	eba3 0308 	sub.w	r3, r3, r8
 80247e2:	f814 9009 	ldrb.w	r9, [r4, r9]
 80247e6:	b289      	uxth	r1, r1
 80247e8:	b29b      	uxth	r3, r3
 80247ea:	ebae 0e01 	sub.w	lr, lr, r1
 80247ee:	435e      	muls	r6, r3
 80247f0:	fa1f fe8e 	uxth.w	lr, lr
 80247f4:	9310      	str	r3, [sp, #64]	@ 0x40
 80247f6:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80247f8:	fb0e 660b 	mla	r6, lr, fp, r6
 80247fc:	f892 b002 	ldrb.w	fp, [r2, #2]
 8024800:	fb01 660b 	mla	r6, r1, fp, r6
 8024804:	f890 b002 	ldrb.w	fp, [r0, #2]
 8024808:	fb08 660b 	mla	r6, r8, fp, r6
 802480c:	ea4f 2b2c 	mov.w	fp, ip, asr #8
 8024810:	f00b 0bf8 	and.w	fp, fp, #248	@ 0xf8
 8024814:	f3c6 2607 	ubfx	r6, r6, #8, #8
 8024818:	fb1b fb03 	smulbb	fp, fp, r3
 802481c:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 802481e:	fb06 b60a 	mla	r6, r6, sl, fp
 8024822:	f895 b001 	ldrb.w	fp, [r5, #1]
 8024826:	787d      	ldrb	r5, [r7, #1]
 8024828:	783f      	ldrb	r7, [r7, #0]
 802482a:	b2b6      	uxth	r6, r6
 802482c:	435d      	muls	r5, r3
 802482e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8024830:	fb0e 550b 	mla	r5, lr, fp, r5
 8024834:	f892 b001 	ldrb.w	fp, [r2, #1]
 8024838:	fb01 550b 	mla	r5, r1, fp, r5
 802483c:	f890 b001 	ldrb.w	fp, [r0, #1]
 8024840:	fb08 550b 	mla	r5, r8, fp, r5
 8024844:	ea4f 0bec 	mov.w	fp, ip, asr #3
 8024848:	ea4f 0ccc 	mov.w	ip, ip, lsl #3
 802484c:	f00b 0bfc 	and.w	fp, fp, #252	@ 0xfc
 8024850:	f3c5 2507 	ubfx	r5, r5, #8, #8
 8024854:	fa5f fc8c 	uxtb.w	ip, ip
 8024858:	fb1b fb03 	smulbb	fp, fp, r3
 802485c:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 802485e:	437b      	muls	r3, r7
 8024860:	7817      	ldrb	r7, [r2, #0]
 8024862:	fb05 b50a 	mla	r5, r5, sl, fp
 8024866:	fb0e 3309 	mla	r3, lr, r9, r3
 802486a:	b2ad      	uxth	r5, r5
 802486c:	fb01 3307 	mla	r3, r1, r7, r3
 8024870:	7807      	ldrb	r7, [r0, #0]
 8024872:	f105 0b01 	add.w	fp, r5, #1
 8024876:	fb08 3707 	mla	r7, r8, r7, r3
 802487a:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 802487c:	eb0b 2515 	add.w	r5, fp, r5, lsr #8
 8024880:	fb1c fc03 	smulbb	ip, ip, r3
 8024884:	f3c7 2707 	ubfx	r7, r7, #8, #8
 8024888:	1c73      	adds	r3, r6, #1
 802488a:	096d      	lsrs	r5, r5, #5
 802488c:	fb07 c70a 	mla	r7, r7, sl, ip
 8024890:	eb03 2616 	add.w	r6, r3, r6, lsr #8
 8024894:	f405 65fc 	and.w	r5, r5, #2016	@ 0x7e0
 8024898:	b2bf      	uxth	r7, r7
 802489a:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 802489c:	f406 4678 	and.w	r6, r6, #63488	@ 0xf800
 80248a0:	1c7a      	adds	r2, r7, #1
 80248a2:	eb02 2217 	add.w	r2, r2, r7, lsr #8
 80248a6:	f3c2 22c4 	ubfx	r2, r2, #11, #5
 80248aa:	4316      	orrs	r6, r2
 80248ac:	9a29      	ldr	r2, [sp, #164]	@ 0xa4
 80248ae:	432e      	orrs	r6, r5
 80248b0:	f823 6b02 	strh.w	r6, [r3], #2
 80248b4:	930c      	str	r3, [sp, #48]	@ 0x30
 80248b6:	9b27      	ldr	r3, [sp, #156]	@ 0x9c
 80248b8:	4413      	add	r3, r2
 80248ba:	9a2a      	ldr	r2, [sp, #168]	@ 0xa8
 80248bc:	9327      	str	r3, [sp, #156]	@ 0x9c
 80248be:	9b28      	ldr	r3, [sp, #160]	@ 0xa0
 80248c0:	4413      	add	r3, r2
 80248c2:	9328      	str	r3, [sp, #160]	@ 0xa0
 80248c4:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 80248c6:	3b01      	subs	r3, #1
 80248c8:	9311      	str	r3, [sp, #68]	@ 0x44
 80248ca:	e6db      	b.n	8024684 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2b4>
 80248cc:	b149      	cbz	r1, 80248e2 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x512>
 80248ce:	5cb2      	ldrb	r2, [r6, r2]
 80248d0:	4628      	mov	r0, r5
 80248d2:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 80248d6:	4422      	add	r2, r4
 80248d8:	462f      	mov	r7, r5
 80248da:	e771      	b.n	80247c0 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3f0>
 80248dc:	4628      	mov	r0, r5
 80248de:	462a      	mov	r2, r5
 80248e0:	e76e      	b.n	80247c0 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3f0>
 80248e2:	4628      	mov	r0, r5
 80248e4:	462a      	mov	r2, r5
 80248e6:	e7f7      	b.n	80248d8 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x508>
 80248e8:	b015      	add	sp, #84	@ 0x54
 80248ea:	ecbd 8b08 	vpop	{d8-d11}
 80248ee:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	...

080248f4 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh>:
 80248f4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80248f8:	880e      	ldrh	r6, [r1, #0]
 80248fa:	b085      	sub	sp, #20
 80248fc:	4691      	mov	r9, r2
 80248fe:	0230      	lsls	r0, r6, #8
 8024900:	f9bd c038 	ldrsh.w	ip, [sp, #56]	@ 0x38
 8024904:	9101      	str	r1, [sp, #4]
 8024906:	f400 0b78 	and.w	fp, r0, #16252928	@ 0xf80000
 802490a:	0170      	lsls	r0, r6, #5
 802490c:	00f6      	lsls	r6, r6, #3
 802490e:	f9bd 803c 	ldrsh.w	r8, [sp, #60]	@ 0x3c
 8024912:	f400 407c 	and.w	r0, r0, #64512	@ 0xfc00
 8024916:	f89d 2048 	ldrb.w	r2, [sp, #72]	@ 0x48
 802491a:	b2f6      	uxtb	r6, r6
 802491c:	f89d 404c 	ldrb.w	r4, [sp, #76]	@ 0x4c
 8024920:	ea4b 0000 	orr.w	r0, fp, r0
 8024924:	e9dd 7510 	ldrd	r7, r5, [sp, #64]	@ 0x40
 8024928:	4306      	orrs	r6, r0
 802492a:	fb05 7a0c 	mla	sl, r5, ip, r7
 802492e:	2d00      	cmp	r5, #0
 8024930:	9603      	str	r6, [sp, #12]
 8024932:	eb09 0e0a 	add.w	lr, r9, sl
 8024936:	db42      	blt.n	80249be <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh+0xca>
 8024938:	45a8      	cmp	r8, r5
 802493a:	dd40      	ble.n	80249be <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh+0xca>
 802493c:	2f00      	cmp	r7, #0
 802493e:	db3c      	blt.n	80249ba <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh+0xc6>
 8024940:	45bc      	cmp	ip, r7
 8024942:	dd3a      	ble.n	80249ba <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh+0xc6>
 8024944:	f819 600a 	ldrb.w	r6, [r9, sl]
 8024948:	eb06 0646 	add.w	r6, r6, r6, lsl #1
 802494c:	441e      	add	r6, r3
 802494e:	1c78      	adds	r0, r7, #1
 8024950:	d438      	bmi.n	80249c4 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh+0xd0>
 8024952:	4584      	cmp	ip, r0
 8024954:	dd36      	ble.n	80249c4 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh+0xd0>
 8024956:	b3aa      	cbz	r2, 80249c4 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh+0xd0>
 8024958:	f89e 0001 	ldrb.w	r0, [lr, #1]
 802495c:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 8024960:	4418      	add	r0, r3
 8024962:	3501      	adds	r5, #1
 8024964:	d432      	bmi.n	80249cc <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh+0xd8>
 8024966:	45a8      	cmp	r8, r5
 8024968:	dd30      	ble.n	80249cc <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh+0xd8>
 802496a:	b37c      	cbz	r4, 80249cc <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh+0xd8>
 802496c:	2f00      	cmp	r7, #0
 802496e:	db2b      	blt.n	80249c8 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh+0xd4>
 8024970:	45bc      	cmp	ip, r7
 8024972:	dd29      	ble.n	80249c8 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh+0xd4>
 8024974:	f81e 500c 	ldrb.w	r5, [lr, ip]
 8024978:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 802497c:	441d      	add	r5, r3
 802497e:	3701      	adds	r7, #1
 8024980:	d427      	bmi.n	80249d2 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh+0xde>
 8024982:	45bc      	cmp	ip, r7
 8024984:	dd25      	ble.n	80249d2 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh+0xde>
 8024986:	b322      	cbz	r2, 80249d2 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh+0xde>
 8024988:	44f4      	add	ip, lr
 802498a:	f89c 7001 	ldrb.w	r7, [ip, #1]
 802498e:	eb07 0747 	add.w	r7, r7, r7, lsl #1
 8024992:	443b      	add	r3, r7
 8024994:	781f      	ldrb	r7, [r3, #0]
 8024996:	2a0f      	cmp	r2, #15
 8024998:	f896 9000 	ldrb.w	r9, [r6]
 802499c:	f890 a000 	ldrb.w	sl, [r0]
 80249a0:	4639      	mov	r1, r7
 80249a2:	f895 8000 	ldrb.w	r8, [r5]
 80249a6:	d801      	bhi.n	80249ac <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh+0xb8>
 80249a8:	2c0f      	cmp	r4, #15
 80249aa:	d914      	bls.n	80249d6 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh+0xe2>
 80249ac:	4b2c      	ldr	r3, [pc, #176]	@ (8024a60 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh+0x16c>)
 80249ae:	f44f 71fb 	mov.w	r1, #502	@ 0x1f6
 80249b2:	4a2c      	ldr	r2, [pc, #176]	@ (8024a64 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh+0x170>)
 80249b4:	482c      	ldr	r0, [pc, #176]	@ (8024a68 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh+0x174>)
 80249b6:	f005 ffbd 	bl	802a934 <__assert_func>
 80249ba:	ae03      	add	r6, sp, #12
 80249bc:	e7c7      	b.n	802494e <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh+0x5a>
 80249be:	a803      	add	r0, sp, #12
 80249c0:	4606      	mov	r6, r0
 80249c2:	e7ce      	b.n	8024962 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh+0x6e>
 80249c4:	a803      	add	r0, sp, #12
 80249c6:	e7cc      	b.n	8024962 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh+0x6e>
 80249c8:	ad03      	add	r5, sp, #12
 80249ca:	e7d8      	b.n	802497e <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh+0x8a>
 80249cc:	ab03      	add	r3, sp, #12
 80249ce:	461d      	mov	r5, r3
 80249d0:	e7e0      	b.n	8024994 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh+0xa0>
 80249d2:	ab03      	add	r3, sp, #12
 80249d4:	e7de      	b.n	8024994 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh+0xa0>
 80249d6:	b292      	uxth	r2, r2
 80249d8:	f890 c002 	ldrb.w	ip, [r0, #2]
 80249dc:	b2a4      	uxth	r4, r4
 80249de:	f896 b002 	ldrb.w	fp, [r6, #2]
 80249e2:	7840      	ldrb	r0, [r0, #1]
 80249e4:	fb02 fe04 	mul.w	lr, r2, r4
 80249e8:	0112      	lsls	r2, r2, #4
 80249ea:	7876      	ldrb	r6, [r6, #1]
 80249ec:	ebce 1404 	rsb	r4, lr, r4, lsl #4
 80249f0:	f5c2 7780 	rsb	r7, r2, #256	@ 0x100
 80249f4:	eba2 020e 	sub.w	r2, r2, lr
 80249f8:	b2a4      	uxth	r4, r4
 80249fa:	b292      	uxth	r2, r2
 80249fc:	1b3f      	subs	r7, r7, r4
 80249fe:	fb02 fc0c 	mul.w	ip, r2, ip
 8024a02:	b2bf      	uxth	r7, r7
 8024a04:	fb07 cc0b 	mla	ip, r7, fp, ip
 8024a08:	f895 b002 	ldrb.w	fp, [r5, #2]
 8024a0c:	fb04 cc0b 	mla	ip, r4, fp, ip
 8024a10:	f893 b002 	ldrb.w	fp, [r3, #2]
 8024a14:	785b      	ldrb	r3, [r3, #1]
 8024a16:	fb0e cc0b 	mla	ip, lr, fp, ip
 8024a1a:	f40c 4b78 	and.w	fp, ip, #63488	@ 0xf800
 8024a1e:	fb02 fc0a 	mul.w	ip, r2, sl
 8024a22:	4342      	muls	r2, r0
 8024a24:	7868      	ldrb	r0, [r5, #1]
 8024a26:	fb07 cc09 	mla	ip, r7, r9, ip
 8024a2a:	fb07 2206 	mla	r2, r7, r6, r2
 8024a2e:	fb04 cc08 	mla	ip, r4, r8, ip
 8024a32:	fb04 2400 	mla	r4, r4, r0, r2
 8024a36:	fb0e cc01 	mla	ip, lr, r1, ip
 8024a3a:	fb0e 4e03 	mla	lr, lr, r3, r4
 8024a3e:	9b01      	ldr	r3, [sp, #4]
 8024a40:	f3cc 2cc4 	ubfx	ip, ip, #11, #5
 8024a44:	ea4f 1e5e 	mov.w	lr, lr, lsr #5
 8024a48:	ea4c 0c0b 	orr.w	ip, ip, fp
 8024a4c:	f40e 6efc 	and.w	lr, lr, #2016	@ 0x7e0
 8024a50:	ea4c 0c0e 	orr.w	ip, ip, lr
 8024a54:	f8a3 c000 	strh.w	ip, [r3]
 8024a58:	b005      	add	sp, #20
 8024a5a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8024a5e:	bf00      	nop
 8024a60:	0802fad5 	.word	0x0802fad5
 8024a64:	080300a2 	.word	0x080300a2
 8024a68:	0802fb59 	.word	0x0802fb59

08024a6c <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 8024a6c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8024a70:	ed2d 8b08 	vpush	{d8-d11}
 8024a74:	b08f      	sub	sp, #60	@ 0x3c
 8024a76:	eeb0 aa40 	vmov.f32	s20, s0
 8024a7a:	eef0 9a60 	vmov.f32	s19, s1
 8024a7e:	920c      	str	r2, [sp, #48]	@ 0x30
 8024a80:	eeb0 9a41 	vmov.f32	s18, s2
 8024a84:	9a25      	ldr	r2, [sp, #148]	@ 0x94
 8024a86:	eeb0 8a62 	vmov.f32	s16, s5
 8024a8a:	900d      	str	r0, [sp, #52]	@ 0x34
 8024a8c:	eef0 8a43 	vmov.f32	s17, s6
 8024a90:	6850      	ldr	r0, [r2, #4]
 8024a92:	eef0 ba44 	vmov.f32	s23, s8
 8024a96:	910a      	str	r1, [sp, #40]	@ 0x28
 8024a98:	eeb0 ba64 	vmov.f32	s22, s9
 8024a9c:	9306      	str	r3, [sp, #24]
 8024a9e:	eef0 aa45 	vmov.f32	s21, s10
 8024aa2:	6812      	ldr	r2, [r2, #0]
 8024aa4:	e9dd 1326 	ldrd	r1, r3, [sp, #152]	@ 0x98
 8024aa8:	e9dd b521 	ldrd	fp, r5, [sp, #132]	@ 0x84
 8024aac:	fb00 1303 	mla	r3, r0, r3, r1
 8024ab0:	eb02 0343 	add.w	r3, r2, r3, lsl #1
 8024ab4:	9307      	str	r3, [sp, #28]
 8024ab6:	9b28      	ldr	r3, [sp, #160]	@ 0xa0
 8024ab8:	681b      	ldr	r3, [r3, #0]
 8024aba:	9308      	str	r3, [sp, #32]
 8024abc:	9b28      	ldr	r3, [sp, #160]	@ 0xa0
 8024abe:	685c      	ldr	r4, [r3, #4]
 8024ac0:	3404      	adds	r4, #4
 8024ac2:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8024ac4:	2b00      	cmp	r3, #0
 8024ac6:	dc03      	bgt.n	8024ad0 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x64>
 8024ac8:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8024aca:	2b00      	cmp	r3, #0
 8024acc:	f340 81d5 	ble.w	8024e7a <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x40e>
 8024ad0:	9b28      	ldr	r3, [sp, #160]	@ 0xa0
 8024ad2:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 8024ad6:	f9b3 200c 	ldrsh.w	r2, [r3, #12]
 8024ada:	1e48      	subs	r0, r1, #1
 8024adc:	1e56      	subs	r6, r2, #1
 8024ade:	9b06      	ldr	r3, [sp, #24]
 8024ae0:	2b00      	cmp	r3, #0
 8024ae2:	f340 80b6 	ble.w	8024c52 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1e6>
 8024ae6:	ea5f 472b 	movs.w	r7, fp, asr #16
 8024aea:	ea4f 4325 	mov.w	r3, r5, asr #16
 8024aee:	d406      	bmi.n	8024afe <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x92>
 8024af0:	4287      	cmp	r7, r0
 8024af2:	da04      	bge.n	8024afe <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x92>
 8024af4:	2b00      	cmp	r3, #0
 8024af6:	db02      	blt.n	8024afe <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x92>
 8024af8:	42b3      	cmp	r3, r6
 8024afa:	f2c0 80ab 	blt.w	8024c54 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1e8>
 8024afe:	3701      	adds	r7, #1
 8024b00:	f100 809c 	bmi.w	8024c3c <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1d0>
 8024b04:	42b9      	cmp	r1, r7
 8024b06:	f2c0 8099 	blt.w	8024c3c <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1d0>
 8024b0a:	3301      	adds	r3, #1
 8024b0c:	f100 8096 	bmi.w	8024c3c <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1d0>
 8024b10:	429a      	cmp	r2, r3
 8024b12:	f2c0 8093 	blt.w	8024c3c <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1d0>
 8024b16:	9b06      	ldr	r3, [sp, #24]
 8024b18:	930b      	str	r3, [sp, #44]	@ 0x2c
 8024b1a:	9b07      	ldr	r3, [sp, #28]
 8024b1c:	9309      	str	r3, [sp, #36]	@ 0x24
 8024b1e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8024b20:	2b00      	cmp	r3, #0
 8024b22:	f340 80b4 	ble.w	8024c8e <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x222>
 8024b26:	9828      	ldr	r0, [sp, #160]	@ 0xa0
 8024b28:	142e      	asrs	r6, r5, #16
 8024b2a:	9a28      	ldr	r2, [sp, #160]	@ 0xa0
 8024b2c:	f3cb 3303 	ubfx	r3, fp, #12, #4
 8024b30:	68c7      	ldr	r7, [r0, #12]
 8024b32:	ea5f 402b 	movs.w	r0, fp, asr #16
 8024b36:	f3c5 3103 	ubfx	r1, r5, #12, #4
 8024b3a:	6892      	ldr	r2, [r2, #8]
 8024b3c:	f100 80fb 	bmi.w	8024d36 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2ca>
 8024b40:	f102 3cff 	add.w	ip, r2, #4294967295
 8024b44:	4560      	cmp	r0, ip
 8024b46:	f280 80f6 	bge.w	8024d36 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2ca>
 8024b4a:	2e00      	cmp	r6, #0
 8024b4c:	f2c0 80f3 	blt.w	8024d36 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2ca>
 8024b50:	f107 3cff 	add.w	ip, r7, #4294967295
 8024b54:	4566      	cmp	r6, ip
 8024b56:	f280 80ee 	bge.w	8024d36 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2ca>
 8024b5a:	b212      	sxth	r2, r2
 8024b5c:	fb06 0002 	mla	r0, r6, r2, r0
 8024b60:	9e08      	ldr	r6, [sp, #32]
 8024b62:	1837      	adds	r7, r6, r0
 8024b64:	5c30      	ldrb	r0, [r6, r0]
 8024b66:	eb00 0840 	add.w	r8, r0, r0, lsl #1
 8024b6a:	eb04 0c08 	add.w	ip, r4, r8
 8024b6e:	2b00      	cmp	r3, #0
 8024b70:	f000 80d3 	beq.w	8024d1a <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2ae>
 8024b74:	787e      	ldrb	r6, [r7, #1]
 8024b76:	eb06 0646 	add.w	r6, r6, r6, lsl #1
 8024b7a:	4426      	add	r6, r4
 8024b7c:	2900      	cmp	r1, #0
 8024b7e:	f000 80d4 	beq.w	8024d2a <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2be>
 8024b82:	18b8      	adds	r0, r7, r2
 8024b84:	5cba      	ldrb	r2, [r7, r2]
 8024b86:	7840      	ldrb	r0, [r0, #1]
 8024b88:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 8024b8c:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 8024b90:	4422      	add	r2, r4
 8024b92:	4420      	add	r0, r4
 8024b94:	b29b      	uxth	r3, r3
 8024b96:	78b7      	ldrb	r7, [r6, #2]
 8024b98:	b289      	uxth	r1, r1
 8024b9a:	f89c a002 	ldrb.w	sl, [ip, #2]
 8024b9e:	f89c c001 	ldrb.w	ip, [ip, #1]
 8024ba2:	fb03 f901 	mul.w	r9, r3, r1
 8024ba6:	011b      	lsls	r3, r3, #4
 8024ba8:	ebc9 1101 	rsb	r1, r9, r1, lsl #4
 8024bac:	f5c3 7e80 	rsb	lr, r3, #256	@ 0x100
 8024bb0:	eba3 0309 	sub.w	r3, r3, r9
 8024bb4:	b289      	uxth	r1, r1
 8024bb6:	b29b      	uxth	r3, r3
 8024bb8:	ebae 0e01 	sub.w	lr, lr, r1
 8024bbc:	435f      	muls	r7, r3
 8024bbe:	fa1f fe8e 	uxth.w	lr, lr
 8024bc2:	fb0e 770a 	mla	r7, lr, sl, r7
 8024bc6:	f892 a002 	ldrb.w	sl, [r2, #2]
 8024bca:	fb01 770a 	mla	r7, r1, sl, r7
 8024bce:	f890 a002 	ldrb.w	sl, [r0, #2]
 8024bd2:	fb09 7a0a 	mla	sl, r9, sl, r7
 8024bd6:	f814 7008 	ldrb.w	r7, [r4, r8]
 8024bda:	f896 8000 	ldrb.w	r8, [r6]
 8024bde:	7876      	ldrb	r6, [r6, #1]
 8024be0:	f40a 4a78 	and.w	sl, sl, #63488	@ 0xf800
 8024be4:	fb03 f808 	mul.w	r8, r3, r8
 8024be8:	4373      	muls	r3, r6
 8024bea:	fb0e 8807 	mla	r8, lr, r7, r8
 8024bee:	7817      	ldrb	r7, [r2, #0]
 8024bf0:	fb0e 330c 	mla	r3, lr, ip, r3
 8024bf4:	fb01 8807 	mla	r8, r1, r7, r8
 8024bf8:	7807      	ldrb	r7, [r0, #0]
 8024bfa:	fb09 8707 	mla	r7, r9, r7, r8
 8024bfe:	f3c7 27c4 	ubfx	r7, r7, #11, #5
 8024c02:	ea47 070a 	orr.w	r7, r7, sl
 8024c06:	f892 a001 	ldrb.w	sl, [r2, #1]
 8024c0a:	fb01 310a 	mla	r1, r1, sl, r3
 8024c0e:	f890 a001 	ldrb.w	sl, [r0, #1]
 8024c12:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8024c14:	fb09 1a0a 	mla	sl, r9, sl, r1
 8024c18:	ea4f 1a5a 	mov.w	sl, sl, lsr #5
 8024c1c:	f40a 6afc 	and.w	sl, sl, #2016	@ 0x7e0
 8024c20:	ea47 070a 	orr.w	r7, r7, sl
 8024c24:	801f      	strh	r7, [r3, #0]
 8024c26:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8024c28:	3302      	adds	r3, #2
 8024c2a:	9309      	str	r3, [sp, #36]	@ 0x24
 8024c2c:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 8024c2e:	449b      	add	fp, r3
 8024c30:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 8024c32:	441d      	add	r5, r3
 8024c34:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8024c36:	3b01      	subs	r3, #1
 8024c38:	930b      	str	r3, [sp, #44]	@ 0x2c
 8024c3a:	e770      	b.n	8024b1e <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xb2>
 8024c3c:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 8024c3e:	449b      	add	fp, r3
 8024c40:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 8024c42:	441d      	add	r5, r3
 8024c44:	9b06      	ldr	r3, [sp, #24]
 8024c46:	3b01      	subs	r3, #1
 8024c48:	9306      	str	r3, [sp, #24]
 8024c4a:	9b07      	ldr	r3, [sp, #28]
 8024c4c:	3302      	adds	r3, #2
 8024c4e:	9307      	str	r3, [sp, #28]
 8024c50:	e745      	b.n	8024ade <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x72>
 8024c52:	d023      	beq.n	8024c9c <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x230>
 8024c54:	9b06      	ldr	r3, [sp, #24]
 8024c56:	9823      	ldr	r0, [sp, #140]	@ 0x8c
 8024c58:	3b01      	subs	r3, #1
 8024c5a:	fb00 b003 	mla	r0, r0, r3, fp
 8024c5e:	1400      	asrs	r0, r0, #16
 8024c60:	f53f af59 	bmi.w	8024b16 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xaa>
 8024c64:	3901      	subs	r1, #1
 8024c66:	4288      	cmp	r0, r1
 8024c68:	f6bf af55 	bge.w	8024b16 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xaa>
 8024c6c:	9924      	ldr	r1, [sp, #144]	@ 0x90
 8024c6e:	fb01 5303 	mla	r3, r1, r3, r5
 8024c72:	141b      	asrs	r3, r3, #16
 8024c74:	f53f af4f 	bmi.w	8024b16 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xaa>
 8024c78:	3a01      	subs	r2, #1
 8024c7a:	4293      	cmp	r3, r2
 8024c7c:	f6bf af4b 	bge.w	8024b16 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xaa>
 8024c80:	9b06      	ldr	r3, [sp, #24]
 8024c82:	9309      	str	r3, [sp, #36]	@ 0x24
 8024c84:	9b07      	ldr	r3, [sp, #28]
 8024c86:	930b      	str	r3, [sp, #44]	@ 0x2c
 8024c88:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8024c8a:	2b00      	cmp	r3, #0
 8024c8c:	dc70      	bgt.n	8024d70 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x304>
 8024c8e:	9b06      	ldr	r3, [sp, #24]
 8024c90:	9a07      	ldr	r2, [sp, #28]
 8024c92:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8024c96:	eb02 0343 	add.w	r3, r2, r3, lsl #1
 8024c9a:	9307      	str	r3, [sp, #28]
 8024c9c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8024c9e:	2b00      	cmp	r3, #0
 8024ca0:	f340 80eb 	ble.w	8024e7a <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x40e>
 8024ca4:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8024ca8:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 8024caa:	ee3a aa2b 	vadd.f32	s20, s20, s23
 8024cae:	ee79 9a8b 	vadd.f32	s19, s19, s22
 8024cb2:	eef0 6a48 	vmov.f32	s13, s16
 8024cb6:	eec7 7a0a 	vdiv.f32	s15, s14, s20
 8024cba:	ee39 9a2a 	vadd.f32	s18, s18, s21
 8024cbe:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 8024cc2:	ee16 ba90 	vmov	fp, s13
 8024cc6:	eef0 6a68 	vmov.f32	s13, s17
 8024cca:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 8024cce:	ee16 5a90 	vmov	r5, s13
 8024cd2:	ee29 7aa7 	vmul.f32	s14, s19, s15
 8024cd6:	ee69 7a27 	vmul.f32	s15, s18, s15
 8024cda:	ee37 8a48 	vsub.f32	s16, s14, s16
 8024cde:	ee77 8ae8 	vsub.f32	s17, s15, s17
 8024ce2:	eebe 8ac8 	vcvt.s32.f32	s16, s16, #16
 8024ce6:	eefe 8ac8 	vcvt.s32.f32	s17, s17, #16
 8024cea:	ee18 2a10 	vmov	r2, s16
 8024cee:	eeb0 8a47 	vmov.f32	s16, s14
 8024cf2:	fb92 f3f3 	sdiv	r3, r2, r3
 8024cf6:	ee18 2a90 	vmov	r2, s17
 8024cfa:	9323      	str	r3, [sp, #140]	@ 0x8c
 8024cfc:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 8024cfe:	eef0 8a67 	vmov.f32	s17, s15
 8024d02:	fb92 f3f3 	sdiv	r3, r2, r3
 8024d06:	9324      	str	r3, [sp, #144]	@ 0x90
 8024d08:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8024d0a:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 8024d0c:	3b01      	subs	r3, #1
 8024d0e:	930a      	str	r3, [sp, #40]	@ 0x28
 8024d10:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 8024d12:	bf08      	it	eq
 8024d14:	4613      	moveq	r3, r2
 8024d16:	9306      	str	r3, [sp, #24]
 8024d18:	e6d3      	b.n	8024ac2 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x56>
 8024d1a:	b149      	cbz	r1, 8024d30 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2c4>
 8024d1c:	5cba      	ldrb	r2, [r7, r2]
 8024d1e:	4660      	mov	r0, ip
 8024d20:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 8024d24:	4422      	add	r2, r4
 8024d26:	4666      	mov	r6, ip
 8024d28:	e734      	b.n	8024b94 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x128>
 8024d2a:	4660      	mov	r0, ip
 8024d2c:	4662      	mov	r2, ip
 8024d2e:	e731      	b.n	8024b94 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x128>
 8024d30:	4660      	mov	r0, ip
 8024d32:	4662      	mov	r2, ip
 8024d34:	e7f7      	b.n	8024d26 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2ba>
 8024d36:	f110 0c01 	adds.w	ip, r0, #1
 8024d3a:	f53f af74 	bmi.w	8024c26 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ba>
 8024d3e:	4562      	cmp	r2, ip
 8024d40:	f6ff af71 	blt.w	8024c26 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ba>
 8024d44:	f116 0c01 	adds.w	ip, r6, #1
 8024d48:	f53f af6d 	bmi.w	8024c26 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ba>
 8024d4c:	4567      	cmp	r7, ip
 8024d4e:	f6ff af6a 	blt.w	8024c26 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ba>
 8024d52:	b23f      	sxth	r7, r7
 8024d54:	b212      	sxth	r2, r2
 8024d56:	9701      	str	r7, [sp, #4]
 8024d58:	9200      	str	r2, [sp, #0]
 8024d5a:	e9cd 3104 	strd	r3, r1, [sp, #16]
 8024d5e:	e9cd 0602 	strd	r0, r6, [sp, #8]
 8024d62:	4623      	mov	r3, r4
 8024d64:	980d      	ldr	r0, [sp, #52]	@ 0x34
 8024d66:	e9dd 2108 	ldrd	r2, r1, [sp, #32]
 8024d6a:	f7ff fdc3 	bl	80248f4 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh>
 8024d6e:	e75a      	b.n	8024c26 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ba>
 8024d70:	9a28      	ldr	r2, [sp, #160]	@ 0xa0
 8024d72:	ea4f 462b 	mov.w	r6, fp, asr #16
 8024d76:	1428      	asrs	r0, r5, #16
 8024d78:	f3cb 3303 	ubfx	r3, fp, #12, #4
 8024d7c:	f9b2 2008 	ldrsh.w	r2, [r2, #8]
 8024d80:	f3c5 3103 	ubfx	r1, r5, #12, #4
 8024d84:	fb02 6000 	mla	r0, r2, r0, r6
 8024d88:	9e08      	ldr	r6, [sp, #32]
 8024d8a:	f816 8000 	ldrb.w	r8, [r6, r0]
 8024d8e:	1837      	adds	r7, r6, r0
 8024d90:	eb08 0848 	add.w	r8, r8, r8, lsl #1
 8024d94:	eb04 0c08 	add.w	ip, r4, r8
 8024d98:	2b00      	cmp	r3, #0
 8024d9a:	d060      	beq.n	8024e5e <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3f2>
 8024d9c:	787e      	ldrb	r6, [r7, #1]
 8024d9e:	eb06 0646 	add.w	r6, r6, r6, lsl #1
 8024da2:	4426      	add	r6, r4
 8024da4:	2900      	cmp	r1, #0
 8024da6:	d062      	beq.n	8024e6e <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x402>
 8024da8:	18b8      	adds	r0, r7, r2
 8024daa:	5cba      	ldrb	r2, [r7, r2]
 8024dac:	7840      	ldrb	r0, [r0, #1]
 8024dae:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 8024db2:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 8024db6:	4422      	add	r2, r4
 8024db8:	4420      	add	r0, r4
 8024dba:	b29b      	uxth	r3, r3
 8024dbc:	78b7      	ldrb	r7, [r6, #2]
 8024dbe:	b289      	uxth	r1, r1
 8024dc0:	f89c a002 	ldrb.w	sl, [ip, #2]
 8024dc4:	f89c c001 	ldrb.w	ip, [ip, #1]
 8024dc8:	fb03 f901 	mul.w	r9, r3, r1
 8024dcc:	011b      	lsls	r3, r3, #4
 8024dce:	ebc9 1101 	rsb	r1, r9, r1, lsl #4
 8024dd2:	f5c3 7e80 	rsb	lr, r3, #256	@ 0x100
 8024dd6:	eba3 0309 	sub.w	r3, r3, r9
 8024dda:	b289      	uxth	r1, r1
 8024ddc:	b29b      	uxth	r3, r3
 8024dde:	ebae 0e01 	sub.w	lr, lr, r1
 8024de2:	435f      	muls	r7, r3
 8024de4:	fa1f fe8e 	uxth.w	lr, lr
 8024de8:	fb0e 770a 	mla	r7, lr, sl, r7
 8024dec:	f892 a002 	ldrb.w	sl, [r2, #2]
 8024df0:	fb01 770a 	mla	r7, r1, sl, r7
 8024df4:	f890 a002 	ldrb.w	sl, [r0, #2]
 8024df8:	fb09 7a0a 	mla	sl, r9, sl, r7
 8024dfc:	f814 7008 	ldrb.w	r7, [r4, r8]
 8024e00:	f896 8000 	ldrb.w	r8, [r6]
 8024e04:	7876      	ldrb	r6, [r6, #1]
 8024e06:	f40a 4a78 	and.w	sl, sl, #63488	@ 0xf800
 8024e0a:	fb03 f808 	mul.w	r8, r3, r8
 8024e0e:	4373      	muls	r3, r6
 8024e10:	7856      	ldrb	r6, [r2, #1]
 8024e12:	fb0e 8807 	mla	r8, lr, r7, r8
 8024e16:	7817      	ldrb	r7, [r2, #0]
 8024e18:	fb0e 330c 	mla	r3, lr, ip, r3
 8024e1c:	fb01 8807 	mla	r8, r1, r7, r8
 8024e20:	7807      	ldrb	r7, [r0, #0]
 8024e22:	fb01 3306 	mla	r3, r1, r6, r3
 8024e26:	fb09 8707 	mla	r7, r9, r7, r8
 8024e2a:	f3c7 27c4 	ubfx	r7, r7, #11, #5
 8024e2e:	ea47 070a 	orr.w	r7, r7, sl
 8024e32:	f890 a001 	ldrb.w	sl, [r0, #1]
 8024e36:	fb09 3a0a 	mla	sl, r9, sl, r3
 8024e3a:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8024e3c:	ea4f 1a5a 	mov.w	sl, sl, lsr #5
 8024e40:	f40a 6afc 	and.w	sl, sl, #2016	@ 0x7e0
 8024e44:	ea47 070a 	orr.w	r7, r7, sl
 8024e48:	f823 7b02 	strh.w	r7, [r3], #2
 8024e4c:	930b      	str	r3, [sp, #44]	@ 0x2c
 8024e4e:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 8024e50:	449b      	add	fp, r3
 8024e52:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 8024e54:	441d      	add	r5, r3
 8024e56:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8024e58:	3b01      	subs	r3, #1
 8024e5a:	9309      	str	r3, [sp, #36]	@ 0x24
 8024e5c:	e714      	b.n	8024c88 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x21c>
 8024e5e:	b149      	cbz	r1, 8024e74 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x408>
 8024e60:	5cba      	ldrb	r2, [r7, r2]
 8024e62:	4660      	mov	r0, ip
 8024e64:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 8024e68:	4422      	add	r2, r4
 8024e6a:	4666      	mov	r6, ip
 8024e6c:	e7a5      	b.n	8024dba <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x34e>
 8024e6e:	4660      	mov	r0, ip
 8024e70:	4662      	mov	r2, ip
 8024e72:	e7a2      	b.n	8024dba <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x34e>
 8024e74:	4660      	mov	r0, ip
 8024e76:	4662      	mov	r2, ip
 8024e78:	e7f7      	b.n	8024e6a <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3fe>
 8024e7a:	b00f      	add	sp, #60	@ 0x3c
 8024e7c:	ecbd 8b08 	vpop	{d8-d11}
 8024e80:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08024e84 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh>:
 8024e84:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8024e88:	e9dd 540e 	ldrd	r5, r4, [sp, #56]	@ 0x38
 8024e8c:	f9bd c030 	ldrsh.w	ip, [sp, #48]	@ 0x30
 8024e90:	2c00      	cmp	r4, #0
 8024e92:	f9bd 8034 	ldrsh.w	r8, [sp, #52]	@ 0x34
 8024e96:	fb04 560c 	mla	r6, r4, ip, r5
 8024e9a:	f89d 0040 	ldrb.w	r0, [sp, #64]	@ 0x40
 8024e9e:	f89d 7044 	ldrb.w	r7, [sp, #68]	@ 0x44
 8024ea2:	eb02 0e06 	add.w	lr, r2, r6
 8024ea6:	db3d      	blt.n	8024f24 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0xa0>
 8024ea8:	45a0      	cmp	r8, r4
 8024eaa:	dd3b      	ble.n	8024f24 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0xa0>
 8024eac:	2d00      	cmp	r5, #0
 8024eae:	db37      	blt.n	8024f20 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0x9c>
 8024eb0:	45ac      	cmp	ip, r5
 8024eb2:	dd35      	ble.n	8024f20 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0x9c>
 8024eb4:	5d92      	ldrb	r2, [r2, r6]
 8024eb6:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8024eba:	1c6e      	adds	r6, r5, #1
 8024ebc:	d435      	bmi.n	8024f2a <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0xa6>
 8024ebe:	45b4      	cmp	ip, r6
 8024ec0:	dd33      	ble.n	8024f2a <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0xa6>
 8024ec2:	b3a0      	cbz	r0, 8024f2e <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0xaa>
 8024ec4:	f89e 6001 	ldrb.w	r6, [lr, #1]
 8024ec8:	f853 6026 	ldr.w	r6, [r3, r6, lsl #2]
 8024ecc:	3401      	adds	r4, #1
 8024ece:	d432      	bmi.n	8024f36 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0xb2>
 8024ed0:	45a0      	cmp	r8, r4
 8024ed2:	dd30      	ble.n	8024f36 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0xb2>
 8024ed4:	b397      	cbz	r7, 8024f3c <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0xb8>
 8024ed6:	2d00      	cmp	r5, #0
 8024ed8:	db2b      	blt.n	8024f32 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0xae>
 8024eda:	45ac      	cmp	ip, r5
 8024edc:	dd29      	ble.n	8024f32 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0xae>
 8024ede:	f81e 400c 	ldrb.w	r4, [lr, ip]
 8024ee2:	f853 4024 	ldr.w	r4, [r3, r4, lsl #2]
 8024ee6:	3501      	adds	r5, #1
 8024ee8:	d42b      	bmi.n	8024f42 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0xbe>
 8024eea:	45ac      	cmp	ip, r5
 8024eec:	dd29      	ble.n	8024f42 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0xbe>
 8024eee:	b350      	cbz	r0, 8024f46 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0xc2>
 8024ef0:	44f4      	add	ip, lr
 8024ef2:	f89c 5001 	ldrb.w	r5, [ip, #1]
 8024ef6:	f853 3025 	ldr.w	r3, [r3, r5, lsl #2]
 8024efa:	280f      	cmp	r0, #15
 8024efc:	ea4f 6b12 	mov.w	fp, r2, lsr #24
 8024f00:	ea4f 6a16 	mov.w	sl, r6, lsr #24
 8024f04:	ea4f 6914 	mov.w	r9, r4, lsr #24
 8024f08:	ea4f 6813 	mov.w	r8, r3, lsr #24
 8024f0c:	d801      	bhi.n	8024f12 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0x8e>
 8024f0e:	2f0f      	cmp	r7, #15
 8024f10:	d91b      	bls.n	8024f4a <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0xc6>
 8024f12:	4b8d      	ldr	r3, [pc, #564]	@ (8025148 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0x2c4>)
 8024f14:	f44f 71fb 	mov.w	r1, #502	@ 0x1f6
 8024f18:	4a8c      	ldr	r2, [pc, #560]	@ (802514c <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0x2c8>)
 8024f1a:	488d      	ldr	r0, [pc, #564]	@ (8025150 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0x2cc>)
 8024f1c:	f005 fd0a 	bl	802a934 <__assert_func>
 8024f20:	2200      	movs	r2, #0
 8024f22:	e7ca      	b.n	8024eba <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0x36>
 8024f24:	2600      	movs	r6, #0
 8024f26:	4632      	mov	r2, r6
 8024f28:	e7d0      	b.n	8024ecc <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0x48>
 8024f2a:	2600      	movs	r6, #0
 8024f2c:	e7ce      	b.n	8024ecc <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0x48>
 8024f2e:	4606      	mov	r6, r0
 8024f30:	e7cc      	b.n	8024ecc <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0x48>
 8024f32:	2400      	movs	r4, #0
 8024f34:	e7d7      	b.n	8024ee6 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0x62>
 8024f36:	2300      	movs	r3, #0
 8024f38:	461c      	mov	r4, r3
 8024f3a:	e7de      	b.n	8024efa <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0x76>
 8024f3c:	463b      	mov	r3, r7
 8024f3e:	463c      	mov	r4, r7
 8024f40:	e7db      	b.n	8024efa <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0x76>
 8024f42:	2300      	movs	r3, #0
 8024f44:	e7d9      	b.n	8024efa <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0x76>
 8024f46:	4603      	mov	r3, r0
 8024f48:	e7d7      	b.n	8024efa <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0x76>
 8024f4a:	b280      	uxth	r0, r0
 8024f4c:	b2bf      	uxth	r7, r7
 8024f4e:	fb07 fe00 	mul.w	lr, r7, r0
 8024f52:	0100      	lsls	r0, r0, #4
 8024f54:	ebce 1707 	rsb	r7, lr, r7, lsl #4
 8024f58:	eba0 0c0e 	sub.w	ip, r0, lr
 8024f5c:	f5c0 7580 	rsb	r5, r0, #256	@ 0x100
 8024f60:	b2bf      	uxth	r7, r7
 8024f62:	fa1f fc8c 	uxth.w	ip, ip
 8024f66:	1bed      	subs	r5, r5, r7
 8024f68:	fb0a f00c 	mul.w	r0, sl, ip
 8024f6c:	b2ad      	uxth	r5, r5
 8024f6e:	fb0b 0005 	mla	r0, fp, r5, r0
 8024f72:	fb07 0009 	mla	r0, r7, r9, r0
 8024f76:	fb0e 0008 	mla	r0, lr, r8, r0
 8024f7a:	f3c0 2007 	ubfx	r0, r0, #8, #8
 8024f7e:	9001      	str	r0, [sp, #4]
 8024f80:	2800      	cmp	r0, #0
 8024f82:	f000 80de 	beq.w	8025142 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0x2be>
 8024f86:	f1bb 0fff 	cmp.w	fp, #255	@ 0xff
 8024f8a:	d018      	beq.n	8024fbe <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0x13a>
 8024f8c:	f002 10ff 	and.w	r0, r2, #16711935	@ 0xff00ff
 8024f90:	f402 427f 	and.w	r2, r2, #65280	@ 0xff00
 8024f94:	fb0b f000 	mul.w	r0, fp, r0
 8024f98:	fb0b fb02 	mul.w	fp, fp, r2
 8024f9c:	0a02      	lsrs	r2, r0, #8
 8024f9e:	f100 1001 	add.w	r0, r0, #65537	@ 0x10001
 8024fa2:	f002 12ff 	and.w	r2, r2, #16711935	@ 0xff00ff
 8024fa6:	4402      	add	r2, r0
 8024fa8:	f50b 7080 	add.w	r0, fp, #256	@ 0x100
 8024fac:	eb00 201b 	add.w	r0, r0, fp, lsr #8
 8024fb0:	0a12      	lsrs	r2, r2, #8
 8024fb2:	0a00      	lsrs	r0, r0, #8
 8024fb4:	f002 12ff 	and.w	r2, r2, #16711935	@ 0xff00ff
 8024fb8:	f400 407f 	and.w	r0, r0, #65280	@ 0xff00
 8024fbc:	4302      	orrs	r2, r0
 8024fbe:	f1ba 0fff 	cmp.w	sl, #255	@ 0xff
 8024fc2:	d01a      	beq.n	8024ffa <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0x176>
 8024fc4:	f006 10ff 	and.w	r0, r6, #16711935	@ 0xff00ff
 8024fc8:	f406 467f 	and.w	r6, r6, #65280	@ 0xff00
 8024fcc:	fb0a f000 	mul.w	r0, sl, r0
 8024fd0:	fb0a fa06 	mul.w	sl, sl, r6
 8024fd4:	0a06      	lsrs	r6, r0, #8
 8024fd6:	f100 1001 	add.w	r0, r0, #65537	@ 0x10001
 8024fda:	f006 16ff 	and.w	r6, r6, #16711935	@ 0xff00ff
 8024fde:	4406      	add	r6, r0
 8024fe0:	f50a 7080 	add.w	r0, sl, #256	@ 0x100
 8024fe4:	eb00 2a1a 	add.w	sl, r0, sl, lsr #8
 8024fe8:	0a36      	lsrs	r6, r6, #8
 8024fea:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 8024fee:	f006 16ff 	and.w	r6, r6, #16711935	@ 0xff00ff
 8024ff2:	f40a 4a7f 	and.w	sl, sl, #65280	@ 0xff00
 8024ff6:	ea46 060a 	orr.w	r6, r6, sl
 8024ffa:	f1b9 0fff 	cmp.w	r9, #255	@ 0xff
 8024ffe:	d01b      	beq.n	8025038 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0x1b4>
 8025000:	f004 1aff 	and.w	sl, r4, #16711935	@ 0xff00ff
 8025004:	f404 447f 	and.w	r4, r4, #65280	@ 0xff00
 8025008:	fb09 fa0a 	mul.w	sl, r9, sl
 802500c:	fb09 f004 	mul.w	r0, r9, r4
 8025010:	ea4f 241a 	mov.w	r4, sl, lsr #8
 8025014:	f10a 1a01 	add.w	sl, sl, #65537	@ 0x10001
 8025018:	f500 7980 	add.w	r9, r0, #256	@ 0x100
 802501c:	f004 14ff 	and.w	r4, r4, #16711935	@ 0xff00ff
 8025020:	eb09 2910 	add.w	r9, r9, r0, lsr #8
 8025024:	4454      	add	r4, sl
 8025026:	ea4f 2919 	mov.w	r9, r9, lsr #8
 802502a:	0a24      	lsrs	r4, r4, #8
 802502c:	f409 497f 	and.w	r9, r9, #65280	@ 0xff00
 8025030:	f004 14ff 	and.w	r4, r4, #16711935	@ 0xff00ff
 8025034:	ea44 0409 	orr.w	r4, r4, r9
 8025038:	f1b8 0fff 	cmp.w	r8, #255	@ 0xff
 802503c:	d01b      	beq.n	8025076 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0x1f2>
 802503e:	f003 19ff 	and.w	r9, r3, #16711935	@ 0xff00ff
 8025042:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 8025046:	fb08 f909 	mul.w	r9, r8, r9
 802504a:	fb08 f003 	mul.w	r0, r8, r3
 802504e:	ea4f 2319 	mov.w	r3, r9, lsr #8
 8025052:	f109 1901 	add.w	r9, r9, #65537	@ 0x10001
 8025056:	f500 7880 	add.w	r8, r0, #256	@ 0x100
 802505a:	f003 13ff 	and.w	r3, r3, #16711935	@ 0xff00ff
 802505e:	eb08 2810 	add.w	r8, r8, r0, lsr #8
 8025062:	444b      	add	r3, r9
 8025064:	ea4f 2818 	mov.w	r8, r8, lsr #8
 8025068:	0a1b      	lsrs	r3, r3, #8
 802506a:	f408 487f 	and.w	r8, r8, #65280	@ 0xff00
 802506e:	f003 13ff 	and.w	r3, r3, #16711935	@ 0xff00ff
 8025072:	ea43 0308 	orr.w	r3, r3, r8
 8025076:	f006 18ff 	and.w	r8, r6, #16711935	@ 0xff00ff
 802507a:	f406 467f 	and.w	r6, r6, #65280	@ 0xff00
 802507e:	f002 19ff 	and.w	r9, r2, #16711935	@ 0xff00ff
 8025082:	f402 427f 	and.w	r2, r2, #65280	@ 0xff00
 8025086:	fb0c f808 	mul.w	r8, ip, r8
 802508a:	8808      	ldrh	r0, [r1, #0]
 802508c:	fb0c f606 	mul.w	r6, ip, r6
 8025090:	fb05 8909 	mla	r9, r5, r9, r8
 8025094:	f004 18ff 	and.w	r8, r4, #16711935	@ 0xff00ff
 8025098:	fb05 6502 	mla	r5, r5, r2, r6
 802509c:	f404 447f 	and.w	r4, r4, #65280	@ 0xff00
 80250a0:	fb07 9908 	mla	r9, r7, r8, r9
 80250a4:	f89d 6048 	ldrb.w	r6, [sp, #72]	@ 0x48
 80250a8:	fb07 5704 	mla	r7, r7, r4, r5
 80250ac:	f003 18ff 	and.w	r8, r3, #16711935	@ 0xff00ff
 80250b0:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 80250b4:	b2b6      	uxth	r6, r6
 80250b6:	fb0e 9808 	mla	r8, lr, r8, r9
 80250ba:	9a01      	ldr	r2, [sp, #4]
 80250bc:	fb0e 7e03 	mla	lr, lr, r3, r7
 80250c0:	1205      	asrs	r5, r0, #8
 80250c2:	4372      	muls	r2, r6
 80250c4:	ea4f 2818 	mov.w	r8, r8, lsr #8
 80250c8:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 80250cc:	f005 05f8 	and.w	r5, r5, #248	@ 0xf8
 80250d0:	1c53      	adds	r3, r2, #1
 80250d2:	f008 18ff 	and.w	r8, r8, #16711935	@ 0xff00ff
 80250d6:	f40e 4e7f 	and.w	lr, lr, #65280	@ 0xff00
 80250da:	eb03 2312 	add.w	r3, r3, r2, lsr #8
 80250de:	ea48 0e0e 	orr.w	lr, r8, lr
 80250e2:	ea6f 2313 	mvn.w	r3, r3, lsr #8
 80250e6:	ea4f 421e 	mov.w	r2, lr, lsr #16
 80250ea:	f3ce 2407 	ubfx	r4, lr, #8, #8
 80250ee:	b2db      	uxtb	r3, r3
 80250f0:	fb12 f206 	smulbb	r2, r2, r6
 80250f4:	fa5f fe8e 	uxtb.w	lr, lr
 80250f8:	fb14 f406 	smulbb	r4, r4, r6
 80250fc:	fb05 2503 	mla	r5, r5, r3, r2
 8025100:	10c2      	asrs	r2, r0, #3
 8025102:	fb1e fe06 	smulbb	lr, lr, r6
 8025106:	00c0      	lsls	r0, r0, #3
 8025108:	f002 02fc 	and.w	r2, r2, #252	@ 0xfc
 802510c:	b2ad      	uxth	r5, r5
 802510e:	b2c0      	uxtb	r0, r0
 8025110:	fb02 4203 	mla	r2, r2, r3, r4
 8025114:	fb00 e303 	mla	r3, r0, r3, lr
 8025118:	b294      	uxth	r4, r2
 802511a:	b298      	uxth	r0, r3
 802511c:	1c6b      	adds	r3, r5, #1
 802511e:	1c62      	adds	r2, r4, #1
 8025120:	eb03 2515 	add.w	r5, r3, r5, lsr #8
 8025124:	1c43      	adds	r3, r0, #1
 8025126:	eb02 2214 	add.w	r2, r2, r4, lsr #8
 802512a:	eb03 2310 	add.w	r3, r3, r0, lsr #8
 802512e:	f405 4578 	and.w	r5, r5, #63488	@ 0xf800
 8025132:	0952      	lsrs	r2, r2, #5
 8025134:	f3c3 23c4 	ubfx	r3, r3, #11, #5
 8025138:	f402 62fc 	and.w	r2, r2, #2016	@ 0x7e0
 802513c:	432b      	orrs	r3, r5
 802513e:	4313      	orrs	r3, r2
 8025140:	800b      	strh	r3, [r1, #0]
 8025142:	b003      	add	sp, #12
 8025144:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8025148:	0802fad5 	.word	0x0802fad5
 802514c:	080300a2 	.word	0x080300a2
 8025150:	0802fb59 	.word	0x0802fb59

08025154 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 8025154:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8025158:	ed2d 8b08 	vpush	{d8-d11}
 802515c:	b09f      	sub	sp, #124	@ 0x7c
 802515e:	eeb0 aa40 	vmov.f32	s20, s0
 8025162:	eef0 9a60 	vmov.f32	s19, s1
 8025166:	921b      	str	r2, [sp, #108]	@ 0x6c
 8025168:	eeb0 9a41 	vmov.f32	s18, s2
 802516c:	9a35      	ldr	r2, [sp, #212]	@ 0xd4
 802516e:	eeb0 8a62 	vmov.f32	s16, s5
 8025172:	9309      	str	r3, [sp, #36]	@ 0x24
 8025174:	eef0 8a43 	vmov.f32	s17, s6
 8025178:	f89d 30e4 	ldrb.w	r3, [sp, #228]	@ 0xe4
 802517c:	eef0 ba44 	vmov.f32	s23, s8
 8025180:	901d      	str	r0, [sp, #116]	@ 0x74
 8025182:	eeb0 ba64 	vmov.f32	s22, s9
 8025186:	931c      	str	r3, [sp, #112]	@ 0x70
 8025188:	eef0 aa45 	vmov.f32	s21, s10
 802518c:	6850      	ldr	r0, [r2, #4]
 802518e:	9119      	str	r1, [sp, #100]	@ 0x64
 8025190:	6812      	ldr	r2, [r2, #0]
 8025192:	9d32      	ldr	r5, [sp, #200]	@ 0xc8
 8025194:	e9dd 1336 	ldrd	r1, r3, [sp, #216]	@ 0xd8
 8025198:	fb00 1303 	mla	r3, r0, r3, r1
 802519c:	eb02 0343 	add.w	r3, r2, r3, lsl #1
 80251a0:	930c      	str	r3, [sp, #48]	@ 0x30
 80251a2:	9b38      	ldr	r3, [sp, #224]	@ 0xe0
 80251a4:	681b      	ldr	r3, [r3, #0]
 80251a6:	9312      	str	r3, [sp, #72]	@ 0x48
 80251a8:	9b38      	ldr	r3, [sp, #224]	@ 0xe0
 80251aa:	685e      	ldr	r6, [r3, #4]
 80251ac:	f8bd 3070 	ldrh.w	r3, [sp, #112]	@ 0x70
 80251b0:	3604      	adds	r6, #4
 80251b2:	930d      	str	r3, [sp, #52]	@ 0x34
 80251b4:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 80251b6:	2b00      	cmp	r3, #0
 80251b8:	dc03      	bgt.n	80251c2 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6e>
 80251ba:	9b1b      	ldr	r3, [sp, #108]	@ 0x6c
 80251bc:	2b00      	cmp	r3, #0
 80251be:	f340 8387 	ble.w	80258d0 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x77c>
 80251c2:	9b38      	ldr	r3, [sp, #224]	@ 0xe0
 80251c4:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 80251c8:	f9b3 200c 	ldrsh.w	r2, [r3, #12]
 80251cc:	1e48      	subs	r0, r1, #1
 80251ce:	1e57      	subs	r7, r2, #1
 80251d0:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80251d2:	2b00      	cmp	r3, #0
 80251d4:	f340 8194 	ble.w	8025500 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3ac>
 80251d8:	9c31      	ldr	r4, [sp, #196]	@ 0xc4
 80251da:	142b      	asrs	r3, r5, #16
 80251dc:	ea5f 4c24 	movs.w	ip, r4, asr #16
 80251e0:	d406      	bmi.n	80251f0 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x9c>
 80251e2:	4584      	cmp	ip, r0
 80251e4:	da04      	bge.n	80251f0 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x9c>
 80251e6:	2b00      	cmp	r3, #0
 80251e8:	db02      	blt.n	80251f0 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x9c>
 80251ea:	42bb      	cmp	r3, r7
 80251ec:	f2c0 8189 	blt.w	8025502 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3ae>
 80251f0:	f11c 0c01 	adds.w	ip, ip, #1
 80251f4:	f100 8177 	bmi.w	80254e6 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x392>
 80251f8:	4561      	cmp	r1, ip
 80251fa:	f2c0 8174 	blt.w	80254e6 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x392>
 80251fe:	3301      	adds	r3, #1
 8025200:	f100 8171 	bmi.w	80254e6 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x392>
 8025204:	429a      	cmp	r2, r3
 8025206:	f2c0 816e 	blt.w	80254e6 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x392>
 802520a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 802520c:	9f0c      	ldr	r7, [sp, #48]	@ 0x30
 802520e:	931a      	str	r3, [sp, #104]	@ 0x68
 8025210:	9b1a      	ldr	r3, [sp, #104]	@ 0x68
 8025212:	2b00      	cmp	r3, #0
 8025214:	f340 8193 	ble.w	802553e <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3ea>
 8025218:	9b31      	ldr	r3, [sp, #196]	@ 0xc4
 802521a:	ea4f 4c25 	mov.w	ip, r5, asr #16
 802521e:	f3c5 3103 	ubfx	r1, r5, #12, #4
 8025222:	f3c3 3203 	ubfx	r2, r3, #12, #4
 8025226:	9b38      	ldr	r3, [sp, #224]	@ 0xe0
 8025228:	e9d3 0e02 	ldrd	r0, lr, [r3, #8]
 802522c:	9b31      	ldr	r3, [sp, #196]	@ 0xc4
 802522e:	141b      	asrs	r3, r3, #16
 8025230:	f100 81d6 	bmi.w	80255e0 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x48c>
 8025234:	f100 38ff 	add.w	r8, r0, #4294967295
 8025238:	4543      	cmp	r3, r8
 802523a:	f280 81d1 	bge.w	80255e0 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x48c>
 802523e:	f1bc 0f00 	cmp.w	ip, #0
 8025242:	f2c0 81cd 	blt.w	80255e0 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x48c>
 8025246:	f10e 38ff 	add.w	r8, lr, #4294967295
 802524a:	45c4      	cmp	ip, r8
 802524c:	f280 81c8 	bge.w	80255e0 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x48c>
 8025250:	b200      	sxth	r0, r0
 8025252:	9c12      	ldr	r4, [sp, #72]	@ 0x48
 8025254:	fb0c 3300 	mla	r3, ip, r0, r3
 8025258:	eb04 0803 	add.w	r8, r4, r3
 802525c:	5ce3      	ldrb	r3, [r4, r3]
 802525e:	f856 3023 	ldr.w	r3, [r6, r3, lsl #2]
 8025262:	ea4f 6e13 	mov.w	lr, r3, lsr #24
 8025266:	2a00      	cmp	r2, #0
 8025268:	f000 81af 	beq.w	80255ca <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x476>
 802526c:	f898 c001 	ldrb.w	ip, [r8, #1]
 8025270:	f856 402c 	ldr.w	r4, [r6, ip, lsl #2]
 8025274:	940e      	str	r4, [sp, #56]	@ 0x38
 8025276:	0e24      	lsrs	r4, r4, #24
 8025278:	9415      	str	r4, [sp, #84]	@ 0x54
 802527a:	b179      	cbz	r1, 802529c <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x148>
 802527c:	eb08 0c00 	add.w	ip, r8, r0
 8025280:	f818 0000 	ldrb.w	r0, [r8, r0]
 8025284:	f856 0020 	ldr.w	r0, [r6, r0, lsl #2]
 8025288:	900a      	str	r0, [sp, #40]	@ 0x28
 802528a:	0e00      	lsrs	r0, r0, #24
 802528c:	9013      	str	r0, [sp, #76]	@ 0x4c
 802528e:	f89c 0001 	ldrb.w	r0, [ip, #1]
 8025292:	f856 0020 	ldr.w	r0, [r6, r0, lsl #2]
 8025296:	900f      	str	r0, [sp, #60]	@ 0x3c
 8025298:	0e00      	lsrs	r0, r0, #24
 802529a:	9016      	str	r0, [sp, #88]	@ 0x58
 802529c:	b292      	uxth	r2, r2
 802529e:	9815      	ldr	r0, [sp, #84]	@ 0x54
 80252a0:	b289      	uxth	r1, r1
 80252a2:	9c13      	ldr	r4, [sp, #76]	@ 0x4c
 80252a4:	fb02 f901 	mul.w	r9, r2, r1
 80252a8:	0112      	lsls	r2, r2, #4
 80252aa:	ebc9 1101 	rsb	r1, r9, r1, lsl #4
 80252ae:	eba2 0809 	sub.w	r8, r2, r9
 80252b2:	f5c2 7280 	rsb	r2, r2, #256	@ 0x100
 80252b6:	b289      	uxth	r1, r1
 80252b8:	fa1f f888 	uxth.w	r8, r8
 80252bc:	1a52      	subs	r2, r2, r1
 80252be:	fb08 f000 	mul.w	r0, r8, r0
 80252c2:	b292      	uxth	r2, r2
 80252c4:	fb02 000e 	mla	r0, r2, lr, r0
 80252c8:	fb01 0004 	mla	r0, r1, r4, r0
 80252cc:	9c16      	ldr	r4, [sp, #88]	@ 0x58
 80252ce:	fb09 0004 	mla	r0, r9, r4, r0
 80252d2:	f3c0 2007 	ubfx	r0, r0, #8, #8
 80252d6:	2800      	cmp	r0, #0
 80252d8:	f000 80fa 	beq.w	80254d0 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x37c>
 80252dc:	f1be 0fff 	cmp.w	lr, #255	@ 0xff
 80252e0:	d01b      	beq.n	802531a <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1c6>
 80252e2:	f003 1aff 	and.w	sl, r3, #16711935	@ 0xff00ff
 80252e6:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 80252ea:	fb0e fa0a 	mul.w	sl, lr, sl
 80252ee:	fb0e fe03 	mul.w	lr, lr, r3
 80252f2:	ea4f 231a 	mov.w	r3, sl, lsr #8
 80252f6:	f10a 1a01 	add.w	sl, sl, #65537	@ 0x10001
 80252fa:	f50e 7c80 	add.w	ip, lr, #256	@ 0x100
 80252fe:	f003 13ff 	and.w	r3, r3, #16711935	@ 0xff00ff
 8025302:	eb0c 2c1e 	add.w	ip, ip, lr, lsr #8
 8025306:	4453      	add	r3, sl
 8025308:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 802530c:	0a1b      	lsrs	r3, r3, #8
 802530e:	f40c 4c7f 	and.w	ip, ip, #65280	@ 0xff00
 8025312:	f003 13ff 	and.w	r3, r3, #16711935	@ 0xff00ff
 8025316:	ea43 030c 	orr.w	r3, r3, ip
 802531a:	9c15      	ldr	r4, [sp, #84]	@ 0x54
 802531c:	2cff      	cmp	r4, #255	@ 0xff
 802531e:	d021      	beq.n	8025364 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x210>
 8025320:	9c0e      	ldr	r4, [sp, #56]	@ 0x38
 8025322:	f004 1bff 	and.w	fp, r4, #16711935	@ 0xff00ff
 8025326:	9c15      	ldr	r4, [sp, #84]	@ 0x54
 8025328:	fb04 fb0b 	mul.w	fp, r4, fp
 802532c:	9c0e      	ldr	r4, [sp, #56]	@ 0x38
 802532e:	f404 4a7f 	and.w	sl, r4, #65280	@ 0xff00
 8025332:	9c15      	ldr	r4, [sp, #84]	@ 0x54
 8025334:	ea4f 2e1b 	mov.w	lr, fp, lsr #8
 8025338:	f10b 1b01 	add.w	fp, fp, #65537	@ 0x10001
 802533c:	fb04 fa0a 	mul.w	sl, r4, sl
 8025340:	f00e 1eff 	and.w	lr, lr, #16711935	@ 0xff00ff
 8025344:	f50a 7c80 	add.w	ip, sl, #256	@ 0x100
 8025348:	44de      	add	lr, fp
 802534a:	eb0c 2a1a 	add.w	sl, ip, sl, lsr #8
 802534e:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 8025352:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 8025356:	f00e 1eff 	and.w	lr, lr, #16711935	@ 0xff00ff
 802535a:	f40a 4a7f 	and.w	sl, sl, #65280	@ 0xff00
 802535e:	ea4e 040a 	orr.w	r4, lr, sl
 8025362:	940e      	str	r4, [sp, #56]	@ 0x38
 8025364:	9c13      	ldr	r4, [sp, #76]	@ 0x4c
 8025366:	2cff      	cmp	r4, #255	@ 0xff
 8025368:	d021      	beq.n	80253ae <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x25a>
 802536a:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 802536c:	f004 1bff 	and.w	fp, r4, #16711935	@ 0xff00ff
 8025370:	9c13      	ldr	r4, [sp, #76]	@ 0x4c
 8025372:	fb04 fb0b 	mul.w	fp, r4, fp
 8025376:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 8025378:	f404 4a7f 	and.w	sl, r4, #65280	@ 0xff00
 802537c:	9c13      	ldr	r4, [sp, #76]	@ 0x4c
 802537e:	ea4f 2e1b 	mov.w	lr, fp, lsr #8
 8025382:	f10b 1b01 	add.w	fp, fp, #65537	@ 0x10001
 8025386:	fb04 fa0a 	mul.w	sl, r4, sl
 802538a:	f00e 1eff 	and.w	lr, lr, #16711935	@ 0xff00ff
 802538e:	f50a 7c80 	add.w	ip, sl, #256	@ 0x100
 8025392:	44de      	add	lr, fp
 8025394:	eb0c 2a1a 	add.w	sl, ip, sl, lsr #8
 8025398:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 802539c:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 80253a0:	f00e 1eff 	and.w	lr, lr, #16711935	@ 0xff00ff
 80253a4:	f40a 4a7f 	and.w	sl, sl, #65280	@ 0xff00
 80253a8:	ea4e 040a 	orr.w	r4, lr, sl
 80253ac:	940a      	str	r4, [sp, #40]	@ 0x28
 80253ae:	9c16      	ldr	r4, [sp, #88]	@ 0x58
 80253b0:	2cff      	cmp	r4, #255	@ 0xff
 80253b2:	d021      	beq.n	80253f8 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2a4>
 80253b4:	9c0f      	ldr	r4, [sp, #60]	@ 0x3c
 80253b6:	f004 1bff 	and.w	fp, r4, #16711935	@ 0xff00ff
 80253ba:	9c16      	ldr	r4, [sp, #88]	@ 0x58
 80253bc:	fb04 fb0b 	mul.w	fp, r4, fp
 80253c0:	9c0f      	ldr	r4, [sp, #60]	@ 0x3c
 80253c2:	f404 4a7f 	and.w	sl, r4, #65280	@ 0xff00
 80253c6:	9c16      	ldr	r4, [sp, #88]	@ 0x58
 80253c8:	ea4f 2e1b 	mov.w	lr, fp, lsr #8
 80253cc:	f10b 1b01 	add.w	fp, fp, #65537	@ 0x10001
 80253d0:	fb04 fa0a 	mul.w	sl, r4, sl
 80253d4:	f00e 1eff 	and.w	lr, lr, #16711935	@ 0xff00ff
 80253d8:	f50a 7c80 	add.w	ip, sl, #256	@ 0x100
 80253dc:	44de      	add	lr, fp
 80253de:	eb0c 2a1a 	add.w	sl, ip, sl, lsr #8
 80253e2:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 80253e6:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 80253ea:	f00e 1eff 	and.w	lr, lr, #16711935	@ 0xff00ff
 80253ee:	f40a 4a7f 	and.w	sl, sl, #65280	@ 0xff00
 80253f2:	ea4e 040a 	orr.w	r4, lr, sl
 80253f6:	940f      	str	r4, [sp, #60]	@ 0x3c
 80253f8:	9c0e      	ldr	r4, [sp, #56]	@ 0x38
 80253fa:	f003 1eff 	and.w	lr, r3, #16711935	@ 0xff00ff
 80253fe:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 8025402:	f004 1cff 	and.w	ip, r4, #16711935	@ 0xff00ff
 8025406:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 8025408:	fb08 fc0c 	mul.w	ip, r8, ip
 802540c:	fb02 cc0e 	mla	ip, r2, lr, ip
 8025410:	f004 1eff 	and.w	lr, r4, #16711935	@ 0xff00ff
 8025414:	9c0f      	ldr	r4, [sp, #60]	@ 0x3c
 8025416:	fb01 cc0e 	mla	ip, r1, lr, ip
 802541a:	f004 1eff 	and.w	lr, r4, #16711935	@ 0xff00ff
 802541e:	9c0e      	ldr	r4, [sp, #56]	@ 0x38
 8025420:	fb09 cc0e 	mla	ip, r9, lr, ip
 8025424:	f404 4e7f 	and.w	lr, r4, #65280	@ 0xff00
 8025428:	9c0d      	ldr	r4, [sp, #52]	@ 0x34
 802542a:	fb08 f80e 	mul.w	r8, r8, lr
 802542e:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 8025432:	fb02 8303 	mla	r3, r2, r3, r8
 8025436:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8025438:	f00c 1cff 	and.w	ip, ip, #16711935	@ 0xff00ff
 802543c:	f402 4a7f 	and.w	sl, r2, #65280	@ 0xff00
 8025440:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 8025442:	fb01 330a 	mla	r3, r1, sl, r3
 8025446:	f402 417f 	and.w	r1, r2, #65280	@ 0xff00
 802544a:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 802544c:	fb09 3901 	mla	r9, r9, r1, r3
 8025450:	883b      	ldrh	r3, [r7, #0]
 8025452:	4342      	muls	r2, r0
 8025454:	ea4f 2919 	mov.w	r9, r9, lsr #8
 8025458:	1c50      	adds	r0, r2, #1
 802545a:	1219      	asrs	r1, r3, #8
 802545c:	f409 497f 	and.w	r9, r9, #65280	@ 0xff00
 8025460:	eb00 2012 	add.w	r0, r0, r2, lsr #8
 8025464:	f001 01f8 	and.w	r1, r1, #248	@ 0xf8
 8025468:	ea4c 0c09 	orr.w	ip, ip, r9
 802546c:	ea6f 2010 	mvn.w	r0, r0, lsr #8
 8025470:	ea4f 421c 	mov.w	r2, ip, lsr #16
 8025474:	f3cc 2e07 	ubfx	lr, ip, #8, #8
 8025478:	b2c0      	uxtb	r0, r0
 802547a:	fb12 f204 	smulbb	r2, r2, r4
 802547e:	fa5f fc8c 	uxtb.w	ip, ip
 8025482:	fb1e fe04 	smulbb	lr, lr, r4
 8025486:	fb01 2100 	mla	r1, r1, r0, r2
 802548a:	10da      	asrs	r2, r3, #3
 802548c:	fb1c fc04 	smulbb	ip, ip, r4
 8025490:	00db      	lsls	r3, r3, #3
 8025492:	b289      	uxth	r1, r1
 8025494:	f002 02fc 	and.w	r2, r2, #252	@ 0xfc
 8025498:	b2db      	uxtb	r3, r3
 802549a:	fb02 e200 	mla	r2, r2, r0, lr
 802549e:	fb03 c300 	mla	r3, r3, r0, ip
 80254a2:	b292      	uxth	r2, r2
 80254a4:	fa1f fc83 	uxth.w	ip, r3
 80254a8:	1c4b      	adds	r3, r1, #1
 80254aa:	eb03 2111 	add.w	r1, r3, r1, lsr #8
 80254ae:	f10c 0301 	add.w	r3, ip, #1
 80254b2:	eb03 231c 	add.w	r3, r3, ip, lsr #8
 80254b6:	f401 4178 	and.w	r1, r1, #63488	@ 0xf800
 80254ba:	f3c3 23c4 	ubfx	r3, r3, #11, #5
 80254be:	430b      	orrs	r3, r1
 80254c0:	1c51      	adds	r1, r2, #1
 80254c2:	eb01 2212 	add.w	r2, r1, r2, lsr #8
 80254c6:	0952      	lsrs	r2, r2, #5
 80254c8:	f402 62fc 	and.w	r2, r2, #2016	@ 0x7e0
 80254cc:	4313      	orrs	r3, r2
 80254ce:	803b      	strh	r3, [r7, #0]
 80254d0:	9b33      	ldr	r3, [sp, #204]	@ 0xcc
 80254d2:	3702      	adds	r7, #2
 80254d4:	9a31      	ldr	r2, [sp, #196]	@ 0xc4
 80254d6:	441a      	add	r2, r3
 80254d8:	9b34      	ldr	r3, [sp, #208]	@ 0xd0
 80254da:	441d      	add	r5, r3
 80254dc:	9b1a      	ldr	r3, [sp, #104]	@ 0x68
 80254de:	9231      	str	r2, [sp, #196]	@ 0xc4
 80254e0:	3b01      	subs	r3, #1
 80254e2:	931a      	str	r3, [sp, #104]	@ 0x68
 80254e4:	e694      	b.n	8025210 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xbc>
 80254e6:	9b33      	ldr	r3, [sp, #204]	@ 0xcc
 80254e8:	9c31      	ldr	r4, [sp, #196]	@ 0xc4
 80254ea:	441c      	add	r4, r3
 80254ec:	9b34      	ldr	r3, [sp, #208]	@ 0xd0
 80254ee:	441d      	add	r5, r3
 80254f0:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80254f2:	9431      	str	r4, [sp, #196]	@ 0xc4
 80254f4:	3b01      	subs	r3, #1
 80254f6:	9309      	str	r3, [sp, #36]	@ 0x24
 80254f8:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 80254fa:	3302      	adds	r3, #2
 80254fc:	930c      	str	r3, [sp, #48]	@ 0x30
 80254fe:	e667      	b.n	80251d0 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7c>
 8025500:	d024      	beq.n	802554c <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3f8>
 8025502:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8025504:	9833      	ldr	r0, [sp, #204]	@ 0xcc
 8025506:	3b01      	subs	r3, #1
 8025508:	9c31      	ldr	r4, [sp, #196]	@ 0xc4
 802550a:	fb00 4003 	mla	r0, r0, r3, r4
 802550e:	1400      	asrs	r0, r0, #16
 8025510:	f53f ae7b 	bmi.w	802520a <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xb6>
 8025514:	3901      	subs	r1, #1
 8025516:	4288      	cmp	r0, r1
 8025518:	f6bf ae77 	bge.w	802520a <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xb6>
 802551c:	9934      	ldr	r1, [sp, #208]	@ 0xd0
 802551e:	fb01 5303 	mla	r3, r1, r3, r5
 8025522:	141b      	asrs	r3, r3, #16
 8025524:	f53f ae71 	bmi.w	802520a <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xb6>
 8025528:	3a01      	subs	r2, #1
 802552a:	4293      	cmp	r3, r2
 802552c:	f6bf ae6d 	bge.w	802520a <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xb6>
 8025530:	f8dd b024 	ldr.w	fp, [sp, #36]	@ 0x24
 8025534:	f8dd 9030 	ldr.w	r9, [sp, #48]	@ 0x30
 8025538:	f1bb 0f00 	cmp.w	fp, #0
 802553c:	dc70      	bgt.n	8025620 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4cc>
 802553e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8025540:	ea23 74e3 	bic.w	r4, r3, r3, asr #31
 8025544:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8025546:	eb03 0344 	add.w	r3, r3, r4, lsl #1
 802554a:	930c      	str	r3, [sp, #48]	@ 0x30
 802554c:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 802554e:	2b00      	cmp	r3, #0
 8025550:	f340 81be 	ble.w	80258d0 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x77c>
 8025554:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8025558:	9b30      	ldr	r3, [sp, #192]	@ 0xc0
 802555a:	ee3a aa2b 	vadd.f32	s20, s20, s23
 802555e:	ee79 9a8b 	vadd.f32	s19, s19, s22
 8025562:	eef0 6a48 	vmov.f32	s13, s16
 8025566:	eec7 7a0a 	vdiv.f32	s15, s14, s20
 802556a:	ee39 9a2a 	vadd.f32	s18, s18, s21
 802556e:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 8025572:	edcd 6a31 	vstr	s13, [sp, #196]	@ 0xc4
 8025576:	eef0 6a68 	vmov.f32	s13, s17
 802557a:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 802557e:	ee16 5a90 	vmov	r5, s13
 8025582:	ee29 7aa7 	vmul.f32	s14, s19, s15
 8025586:	ee69 7a27 	vmul.f32	s15, s18, s15
 802558a:	ee37 8a48 	vsub.f32	s16, s14, s16
 802558e:	ee77 8ae8 	vsub.f32	s17, s15, s17
 8025592:	eebe 8ac8 	vcvt.s32.f32	s16, s16, #16
 8025596:	eefe 8ac8 	vcvt.s32.f32	s17, s17, #16
 802559a:	ee18 2a10 	vmov	r2, s16
 802559e:	eeb0 8a47 	vmov.f32	s16, s14
 80255a2:	fb92 f3f3 	sdiv	r3, r2, r3
 80255a6:	ee18 2a90 	vmov	r2, s17
 80255aa:	9333      	str	r3, [sp, #204]	@ 0xcc
 80255ac:	9b30      	ldr	r3, [sp, #192]	@ 0xc0
 80255ae:	eef0 8a67 	vmov.f32	s17, s15
 80255b2:	fb92 f3f3 	sdiv	r3, r2, r3
 80255b6:	9334      	str	r3, [sp, #208]	@ 0xd0
 80255b8:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 80255ba:	9a1b      	ldr	r2, [sp, #108]	@ 0x6c
 80255bc:	3b01      	subs	r3, #1
 80255be:	9319      	str	r3, [sp, #100]	@ 0x64
 80255c0:	9b30      	ldr	r3, [sp, #192]	@ 0xc0
 80255c2:	bf08      	it	eq
 80255c4:	4613      	moveq	r3, r2
 80255c6:	9309      	str	r3, [sp, #36]	@ 0x24
 80255c8:	e5f4      	b.n	80251b4 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x60>
 80255ca:	2900      	cmp	r1, #0
 80255cc:	f43f ae66 	beq.w	802529c <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x148>
 80255d0:	f818 0000 	ldrb.w	r0, [r8, r0]
 80255d4:	f856 0020 	ldr.w	r0, [r6, r0, lsl #2]
 80255d8:	900a      	str	r0, [sp, #40]	@ 0x28
 80255da:	0e00      	lsrs	r0, r0, #24
 80255dc:	9013      	str	r0, [sp, #76]	@ 0x4c
 80255de:	e65d      	b.n	802529c <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x148>
 80255e0:	f113 0801 	adds.w	r8, r3, #1
 80255e4:	f53f af74 	bmi.w	80254d0 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x37c>
 80255e8:	4540      	cmp	r0, r8
 80255ea:	f6ff af71 	blt.w	80254d0 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x37c>
 80255ee:	f11c 0801 	adds.w	r8, ip, #1
 80255f2:	f53f af6d 	bmi.w	80254d0 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x37c>
 80255f6:	45c6      	cmp	lr, r8
 80255f8:	f6ff af6a 	blt.w	80254d0 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x37c>
 80255fc:	9c1c      	ldr	r4, [sp, #112]	@ 0x70
 80255fe:	b200      	sxth	r0, r0
 8025600:	9302      	str	r3, [sp, #8]
 8025602:	fa0f f38e 	sxth.w	r3, lr
 8025606:	9000      	str	r0, [sp, #0]
 8025608:	9301      	str	r3, [sp, #4]
 802560a:	4633      	mov	r3, r6
 802560c:	981d      	ldr	r0, [sp, #116]	@ 0x74
 802560e:	e9cd 1405 	strd	r1, r4, [sp, #20]
 8025612:	e9cd c203 	strd	ip, r2, [sp, #12]
 8025616:	4639      	mov	r1, r7
 8025618:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 802561a:	f7ff fc33 	bl	8024e84 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh>
 802561e:	e757      	b.n	80254d0 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x37c>
 8025620:	9b31      	ldr	r3, [sp, #196]	@ 0xc4
 8025622:	f3c5 3003 	ubfx	r0, r5, #12, #4
 8025626:	9c31      	ldr	r4, [sp, #196]	@ 0xc4
 8025628:	f3c3 3203 	ubfx	r2, r3, #12, #4
 802562c:	9b38      	ldr	r3, [sp, #224]	@ 0xe0
 802562e:	1427      	asrs	r7, r4, #16
 8025630:	9c12      	ldr	r4, [sp, #72]	@ 0x48
 8025632:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 8025636:	142b      	asrs	r3, r5, #16
 8025638:	fb01 7303 	mla	r3, r1, r3, r7
 802563c:	18e7      	adds	r7, r4, r3
 802563e:	5ce3      	ldrb	r3, [r4, r3]
 8025640:	f856 3023 	ldr.w	r3, [r6, r3, lsl #2]
 8025644:	ea4f 6c13 	mov.w	ip, r3, lsr #24
 8025648:	2a00      	cmp	r2, #0
 802564a:	f000 8137 	beq.w	80258bc <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x768>
 802564e:	f897 e001 	ldrb.w	lr, [r7, #1]
 8025652:	f856 402e 	ldr.w	r4, [r6, lr, lsl #2]
 8025656:	9410      	str	r4, [sp, #64]	@ 0x40
 8025658:	0e24      	lsrs	r4, r4, #24
 802565a:	9417      	str	r4, [sp, #92]	@ 0x5c
 802565c:	b170      	cbz	r0, 802567c <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x528>
 802565e:	eb07 0e01 	add.w	lr, r7, r1
 8025662:	5c79      	ldrb	r1, [r7, r1]
 8025664:	f856 1021 	ldr.w	r1, [r6, r1, lsl #2]
 8025668:	910b      	str	r1, [sp, #44]	@ 0x2c
 802566a:	0e09      	lsrs	r1, r1, #24
 802566c:	9114      	str	r1, [sp, #80]	@ 0x50
 802566e:	f89e 1001 	ldrb.w	r1, [lr, #1]
 8025672:	f856 1021 	ldr.w	r1, [r6, r1, lsl #2]
 8025676:	9111      	str	r1, [sp, #68]	@ 0x44
 8025678:	0e09      	lsrs	r1, r1, #24
 802567a:	9118      	str	r1, [sp, #96]	@ 0x60
 802567c:	b292      	uxth	r2, r2
 802567e:	9917      	ldr	r1, [sp, #92]	@ 0x5c
 8025680:	b280      	uxth	r0, r0
 8025682:	9c14      	ldr	r4, [sp, #80]	@ 0x50
 8025684:	fb02 f800 	mul.w	r8, r2, r0
 8025688:	0112      	lsls	r2, r2, #4
 802568a:	ebc8 1000 	rsb	r0, r8, r0, lsl #4
 802568e:	eba2 0e08 	sub.w	lr, r2, r8
 8025692:	f5c2 7280 	rsb	r2, r2, #256	@ 0x100
 8025696:	b280      	uxth	r0, r0
 8025698:	fa1f fe8e 	uxth.w	lr, lr
 802569c:	1a12      	subs	r2, r2, r0
 802569e:	fb0e f101 	mul.w	r1, lr, r1
 80256a2:	b292      	uxth	r2, r2
 80256a4:	fb02 110c 	mla	r1, r2, ip, r1
 80256a8:	fb00 1104 	mla	r1, r0, r4, r1
 80256ac:	9c18      	ldr	r4, [sp, #96]	@ 0x60
 80256ae:	fb08 1104 	mla	r1, r8, r4, r1
 80256b2:	f3c1 2107 	ubfx	r1, r1, #8, #8
 80256b6:	2900      	cmp	r1, #0
 80256b8:	f000 80f5 	beq.w	80258a6 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x752>
 80256bc:	f1bc 0fff 	cmp.w	ip, #255	@ 0xff
 80256c0:	d019      	beq.n	80256f6 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5a2>
 80256c2:	f003 1aff 	and.w	sl, r3, #16711935	@ 0xff00ff
 80256c6:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 80256ca:	fb0c fa0a 	mul.w	sl, ip, sl
 80256ce:	fb0c fc03 	mul.w	ip, ip, r3
 80256d2:	ea4f 231a 	mov.w	r3, sl, lsr #8
 80256d6:	f10a 1a01 	add.w	sl, sl, #65537	@ 0x10001
 80256da:	f50c 7780 	add.w	r7, ip, #256	@ 0x100
 80256de:	f003 13ff 	and.w	r3, r3, #16711935	@ 0xff00ff
 80256e2:	eb07 271c 	add.w	r7, r7, ip, lsr #8
 80256e6:	4453      	add	r3, sl
 80256e8:	0a3f      	lsrs	r7, r7, #8
 80256ea:	0a1b      	lsrs	r3, r3, #8
 80256ec:	f407 477f 	and.w	r7, r7, #65280	@ 0xff00
 80256f0:	f003 13ff 	and.w	r3, r3, #16711935	@ 0xff00ff
 80256f4:	433b      	orrs	r3, r7
 80256f6:	9c17      	ldr	r4, [sp, #92]	@ 0x5c
 80256f8:	2cff      	cmp	r4, #255	@ 0xff
 80256fa:	d020      	beq.n	802573e <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5ea>
 80256fc:	9c10      	ldr	r4, [sp, #64]	@ 0x40
 80256fe:	f004 17ff 	and.w	r7, r4, #16711935	@ 0xff00ff
 8025702:	9c17      	ldr	r4, [sp, #92]	@ 0x5c
 8025704:	4367      	muls	r7, r4
 8025706:	9c10      	ldr	r4, [sp, #64]	@ 0x40
 8025708:	ea4f 2c17 	mov.w	ip, r7, lsr #8
 802570c:	f404 4a7f 	and.w	sl, r4, #65280	@ 0xff00
 8025710:	9c17      	ldr	r4, [sp, #92]	@ 0x5c
 8025712:	f107 1701 	add.w	r7, r7, #65537	@ 0x10001
 8025716:	f00c 1cff 	and.w	ip, ip, #16711935	@ 0xff00ff
 802571a:	fb04 fa0a 	mul.w	sl, r4, sl
 802571e:	44bc      	add	ip, r7
 8025720:	f50a 7780 	add.w	r7, sl, #256	@ 0x100
 8025724:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 8025728:	eb07 2a1a 	add.w	sl, r7, sl, lsr #8
 802572c:	f00c 1cff 	and.w	ip, ip, #16711935	@ 0xff00ff
 8025730:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 8025734:	f40a 4a7f 	and.w	sl, sl, #65280	@ 0xff00
 8025738:	ea4c 040a 	orr.w	r4, ip, sl
 802573c:	9410      	str	r4, [sp, #64]	@ 0x40
 802573e:	9c14      	ldr	r4, [sp, #80]	@ 0x50
 8025740:	2cff      	cmp	r4, #255	@ 0xff
 8025742:	d020      	beq.n	8025786 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x632>
 8025744:	9c0b      	ldr	r4, [sp, #44]	@ 0x2c
 8025746:	f004 17ff 	and.w	r7, r4, #16711935	@ 0xff00ff
 802574a:	9c14      	ldr	r4, [sp, #80]	@ 0x50
 802574c:	4367      	muls	r7, r4
 802574e:	9c0b      	ldr	r4, [sp, #44]	@ 0x2c
 8025750:	ea4f 2c17 	mov.w	ip, r7, lsr #8
 8025754:	f404 4a7f 	and.w	sl, r4, #65280	@ 0xff00
 8025758:	9c14      	ldr	r4, [sp, #80]	@ 0x50
 802575a:	f107 1701 	add.w	r7, r7, #65537	@ 0x10001
 802575e:	f00c 1cff 	and.w	ip, ip, #16711935	@ 0xff00ff
 8025762:	fb04 fa0a 	mul.w	sl, r4, sl
 8025766:	44bc      	add	ip, r7
 8025768:	f50a 7780 	add.w	r7, sl, #256	@ 0x100
 802576c:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 8025770:	eb07 2a1a 	add.w	sl, r7, sl, lsr #8
 8025774:	f00c 1cff 	and.w	ip, ip, #16711935	@ 0xff00ff
 8025778:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 802577c:	f40a 4a7f 	and.w	sl, sl, #65280	@ 0xff00
 8025780:	ea4c 040a 	orr.w	r4, ip, sl
 8025784:	940b      	str	r4, [sp, #44]	@ 0x2c
 8025786:	9c18      	ldr	r4, [sp, #96]	@ 0x60
 8025788:	2cff      	cmp	r4, #255	@ 0xff
 802578a:	d020      	beq.n	80257ce <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x67a>
 802578c:	9c11      	ldr	r4, [sp, #68]	@ 0x44
 802578e:	f004 17ff 	and.w	r7, r4, #16711935	@ 0xff00ff
 8025792:	9c18      	ldr	r4, [sp, #96]	@ 0x60
 8025794:	4367      	muls	r7, r4
 8025796:	9c11      	ldr	r4, [sp, #68]	@ 0x44
 8025798:	ea4f 2c17 	mov.w	ip, r7, lsr #8
 802579c:	f404 4a7f 	and.w	sl, r4, #65280	@ 0xff00
 80257a0:	9c18      	ldr	r4, [sp, #96]	@ 0x60
 80257a2:	f107 1701 	add.w	r7, r7, #65537	@ 0x10001
 80257a6:	f00c 1cff 	and.w	ip, ip, #16711935	@ 0xff00ff
 80257aa:	fb04 fa0a 	mul.w	sl, r4, sl
 80257ae:	44bc      	add	ip, r7
 80257b0:	f50a 7780 	add.w	r7, sl, #256	@ 0x100
 80257b4:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 80257b8:	eb07 2a1a 	add.w	sl, r7, sl, lsr #8
 80257bc:	f00c 1cff 	and.w	ip, ip, #16711935	@ 0xff00ff
 80257c0:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 80257c4:	f40a 4a7f 	and.w	sl, sl, #65280	@ 0xff00
 80257c8:	ea4c 040a 	orr.w	r4, ip, sl
 80257cc:	9411      	str	r4, [sp, #68]	@ 0x44
 80257ce:	9c10      	ldr	r4, [sp, #64]	@ 0x40
 80257d0:	f003 1cff 	and.w	ip, r3, #16711935	@ 0xff00ff
 80257d4:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 80257d8:	f004 17ff 	and.w	r7, r4, #16711935	@ 0xff00ff
 80257dc:	9c0b      	ldr	r4, [sp, #44]	@ 0x2c
 80257de:	fb0e f707 	mul.w	r7, lr, r7
 80257e2:	fb02 770c 	mla	r7, r2, ip, r7
 80257e6:	f004 1cff 	and.w	ip, r4, #16711935	@ 0xff00ff
 80257ea:	9c11      	ldr	r4, [sp, #68]	@ 0x44
 80257ec:	fb00 770c 	mla	r7, r0, ip, r7
 80257f0:	f004 1cff 	and.w	ip, r4, #16711935	@ 0xff00ff
 80257f4:	9c10      	ldr	r4, [sp, #64]	@ 0x40
 80257f6:	fb08 770c 	mla	r7, r8, ip, r7
 80257fa:	f404 4c7f 	and.w	ip, r4, #65280	@ 0xff00
 80257fe:	9c0d      	ldr	r4, [sp, #52]	@ 0x34
 8025800:	fb0e fe0c 	mul.w	lr, lr, ip
 8025804:	0a3f      	lsrs	r7, r7, #8
 8025806:	fb02 e303 	mla	r3, r2, r3, lr
 802580a:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 802580c:	f007 17ff 	and.w	r7, r7, #16711935	@ 0xff00ff
 8025810:	f402 4a7f 	and.w	sl, r2, #65280	@ 0xff00
 8025814:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 8025816:	fb00 330a 	mla	r3, r0, sl, r3
 802581a:	f402 4c7f 	and.w	ip, r2, #65280	@ 0xff00
 802581e:	f8b9 0000 	ldrh.w	r0, [r9]
 8025822:	fb08 3c0c 	mla	ip, r8, ip, r3
 8025826:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8025828:	1202      	asrs	r2, r0, #8
 802582a:	434b      	muls	r3, r1
 802582c:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 8025830:	f002 02f8 	and.w	r2, r2, #248	@ 0xf8
 8025834:	f40c 4c7f 	and.w	ip, ip, #65280	@ 0xff00
 8025838:	1c59      	adds	r1, r3, #1
 802583a:	ea47 070c 	orr.w	r7, r7, ip
 802583e:	eb01 2113 	add.w	r1, r1, r3, lsr #8
 8025842:	0c3b      	lsrs	r3, r7, #16
 8025844:	ea6f 2111 	mvn.w	r1, r1, lsr #8
 8025848:	f3c7 2c07 	ubfx	ip, r7, #8, #8
 802584c:	b2ff      	uxtb	r7, r7
 802584e:	fb13 f304 	smulbb	r3, r3, r4
 8025852:	b2c9      	uxtb	r1, r1
 8025854:	fb1c fc04 	smulbb	ip, ip, r4
 8025858:	fb02 3201 	mla	r2, r2, r1, r3
 802585c:	10c3      	asrs	r3, r0, #3
 802585e:	fb17 f704 	smulbb	r7, r7, r4
 8025862:	00c0      	lsls	r0, r0, #3
 8025864:	b292      	uxth	r2, r2
 8025866:	f003 03fc 	and.w	r3, r3, #252	@ 0xfc
 802586a:	b2c0      	uxtb	r0, r0
 802586c:	fb03 c301 	mla	r3, r3, r1, ip
 8025870:	f102 0c01 	add.w	ip, r2, #1
 8025874:	fb00 7001 	mla	r0, r0, r1, r7
 8025878:	eb0c 2212 	add.w	r2, ip, r2, lsr #8
 802587c:	b280      	uxth	r0, r0
 802587e:	f402 4c78 	and.w	ip, r2, #63488	@ 0xf800
 8025882:	b29b      	uxth	r3, r3
 8025884:	1c42      	adds	r2, r0, #1
 8025886:	eb02 2210 	add.w	r2, r2, r0, lsr #8
 802588a:	f3c2 22c4 	ubfx	r2, r2, #11, #5
 802588e:	ea42 020c 	orr.w	r2, r2, ip
 8025892:	f103 0c01 	add.w	ip, r3, #1
 8025896:	eb0c 2313 	add.w	r3, ip, r3, lsr #8
 802589a:	095b      	lsrs	r3, r3, #5
 802589c:	f403 63fc 	and.w	r3, r3, #2016	@ 0x7e0
 80258a0:	431a      	orrs	r2, r3
 80258a2:	f8a9 2000 	strh.w	r2, [r9]
 80258a6:	9b33      	ldr	r3, [sp, #204]	@ 0xcc
 80258a8:	f109 0902 	add.w	r9, r9, #2
 80258ac:	9a31      	ldr	r2, [sp, #196]	@ 0xc4
 80258ae:	f10b 3bff 	add.w	fp, fp, #4294967295
 80258b2:	441a      	add	r2, r3
 80258b4:	9b34      	ldr	r3, [sp, #208]	@ 0xd0
 80258b6:	9231      	str	r2, [sp, #196]	@ 0xc4
 80258b8:	441d      	add	r5, r3
 80258ba:	e63d      	b.n	8025538 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3e4>
 80258bc:	2800      	cmp	r0, #0
 80258be:	f43f aedd 	beq.w	802567c <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x528>
 80258c2:	5c79      	ldrb	r1, [r7, r1]
 80258c4:	f856 1021 	ldr.w	r1, [r6, r1, lsl #2]
 80258c8:	910b      	str	r1, [sp, #44]	@ 0x2c
 80258ca:	0e09      	lsrs	r1, r1, #24
 80258cc:	9114      	str	r1, [sp, #80]	@ 0x50
 80258ce:	e6d5      	b.n	802567c <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x528>
 80258d0:	b01f      	add	sp, #124	@ 0x7c
 80258d2:	ecbd 8b08 	vpop	{d8-d11}
 80258d6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	...

080258dc <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh>:
 80258dc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80258e0:	880e      	ldrh	r6, [r1, #0]
 80258e2:	b085      	sub	sp, #20
 80258e4:	4691      	mov	r9, r2
 80258e6:	ea4f 2826 	mov.w	r8, r6, asr #8
 80258ea:	f9bd c038 	ldrsh.w	ip, [sp, #56]	@ 0x38
 80258ee:	f9bd e03c 	ldrsh.w	lr, [sp, #60]	@ 0x3c
 80258f2:	f008 02f8 	and.w	r2, r8, #248	@ 0xf8
 80258f6:	ea4f 08e6 	mov.w	r8, r6, asr #3
 80258fa:	00f6      	lsls	r6, r6, #3
 80258fc:	f89d 0048 	ldrb.w	r0, [sp, #72]	@ 0x48
 8025900:	9200      	str	r2, [sp, #0]
 8025902:	f008 02fc 	and.w	r2, r8, #252	@ 0xfc
 8025906:	f89d 704c 	ldrb.w	r7, [sp, #76]	@ 0x4c
 802590a:	9201      	str	r2, [sp, #4]
 802590c:	b2f2      	uxtb	r2, r6
 802590e:	e9dd 5410 	ldrd	r5, r4, [sp, #64]	@ 0x40
 8025912:	9202      	str	r2, [sp, #8]
 8025914:	fb04 560c 	mla	r6, r4, ip, r5
 8025918:	2c00      	cmp	r4, #0
 802591a:	eb09 0806 	add.w	r8, r9, r6
 802591e:	db3f      	blt.n	80259a0 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0xc4>
 8025920:	45a6      	cmp	lr, r4
 8025922:	dd3d      	ble.n	80259a0 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0xc4>
 8025924:	2d00      	cmp	r5, #0
 8025926:	db39      	blt.n	802599c <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0xc0>
 8025928:	45ac      	cmp	ip, r5
 802592a:	dd37      	ble.n	802599c <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0xc0>
 802592c:	f819 2006 	ldrb.w	r2, [r9, r6]
 8025930:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8025934:	1c6e      	adds	r6, r5, #1
 8025936:	d436      	bmi.n	80259a6 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0xca>
 8025938:	45b4      	cmp	ip, r6
 802593a:	dd34      	ble.n	80259a6 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0xca>
 802593c:	b3a8      	cbz	r0, 80259aa <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0xce>
 802593e:	f898 6001 	ldrb.w	r6, [r8, #1]
 8025942:	f853 6026 	ldr.w	r6, [r3, r6, lsl #2]
 8025946:	3401      	adds	r4, #1
 8025948:	d433      	bmi.n	80259b2 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0xd6>
 802594a:	45a6      	cmp	lr, r4
 802594c:	dd31      	ble.n	80259b2 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0xd6>
 802594e:	b39f      	cbz	r7, 80259b8 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0xdc>
 8025950:	2d00      	cmp	r5, #0
 8025952:	eb08 0e0c 	add.w	lr, r8, ip
 8025956:	db2a      	blt.n	80259ae <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0xd2>
 8025958:	45ac      	cmp	ip, r5
 802595a:	dd28      	ble.n	80259ae <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0xd2>
 802595c:	f818 400c 	ldrb.w	r4, [r8, ip]
 8025960:	f853 4024 	ldr.w	r4, [r3, r4, lsl #2]
 8025964:	3501      	adds	r5, #1
 8025966:	d42a      	bmi.n	80259be <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0xe2>
 8025968:	45ac      	cmp	ip, r5
 802596a:	dd28      	ble.n	80259be <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0xe2>
 802596c:	b348      	cbz	r0, 80259c2 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0xe6>
 802596e:	f89e 5001 	ldrb.w	r5, [lr, #1]
 8025972:	f853 3025 	ldr.w	r3, [r3, r5, lsl #2]
 8025976:	280f      	cmp	r0, #15
 8025978:	ea4f 6b12 	mov.w	fp, r2, lsr #24
 802597c:	ea4f 6a16 	mov.w	sl, r6, lsr #24
 8025980:	ea4f 6914 	mov.w	r9, r4, lsr #24
 8025984:	ea4f 6813 	mov.w	r8, r3, lsr #24
 8025988:	d801      	bhi.n	802598e <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0xb2>
 802598a:	2f0f      	cmp	r7, #15
 802598c:	d91b      	bls.n	80259c6 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0xea>
 802598e:	4b7e      	ldr	r3, [pc, #504]	@ (8025b88 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0x2ac>)
 8025990:	f44f 71fb 	mov.w	r1, #502	@ 0x1f6
 8025994:	4a7d      	ldr	r2, [pc, #500]	@ (8025b8c <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0x2b0>)
 8025996:	487e      	ldr	r0, [pc, #504]	@ (8025b90 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0x2b4>)
 8025998:	f004 ffcc 	bl	802a934 <__assert_func>
 802599c:	2200      	movs	r2, #0
 802599e:	e7c9      	b.n	8025934 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0x58>
 80259a0:	2600      	movs	r6, #0
 80259a2:	4632      	mov	r2, r6
 80259a4:	e7cf      	b.n	8025946 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0x6a>
 80259a6:	2600      	movs	r6, #0
 80259a8:	e7cd      	b.n	8025946 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0x6a>
 80259aa:	4606      	mov	r6, r0
 80259ac:	e7cb      	b.n	8025946 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0x6a>
 80259ae:	2400      	movs	r4, #0
 80259b0:	e7d8      	b.n	8025964 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0x88>
 80259b2:	2300      	movs	r3, #0
 80259b4:	461c      	mov	r4, r3
 80259b6:	e7de      	b.n	8025976 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0x9a>
 80259b8:	463b      	mov	r3, r7
 80259ba:	463c      	mov	r4, r7
 80259bc:	e7db      	b.n	8025976 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0x9a>
 80259be:	2300      	movs	r3, #0
 80259c0:	e7d9      	b.n	8025976 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0x9a>
 80259c2:	4603      	mov	r3, r0
 80259c4:	e7d7      	b.n	8025976 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0x9a>
 80259c6:	b280      	uxth	r0, r0
 80259c8:	f1bb 0fff 	cmp.w	fp, #255	@ 0xff
 80259cc:	b2bf      	uxth	r7, r7
 80259ce:	fb00 fe07 	mul.w	lr, r0, r7
 80259d2:	ea4f 1000 	mov.w	r0, r0, lsl #4
 80259d6:	ebce 1707 	rsb	r7, lr, r7, lsl #4
 80259da:	eba0 0c0e 	sub.w	ip, r0, lr
 80259de:	f5c0 7580 	rsb	r5, r0, #256	@ 0x100
 80259e2:	b2bf      	uxth	r7, r7
 80259e4:	fa1f fc8c 	uxth.w	ip, ip
 80259e8:	eba5 0507 	sub.w	r5, r5, r7
 80259ec:	fb0c f00a 	mul.w	r0, ip, sl
 80259f0:	b2ad      	uxth	r5, r5
 80259f2:	fb05 000b 	mla	r0, r5, fp, r0
 80259f6:	fb07 0009 	mla	r0, r7, r9, r0
 80259fa:	fb0e 0008 	mla	r0, lr, r8, r0
 80259fe:	f3c0 2007 	ubfx	r0, r0, #8, #8
 8025a02:	9003      	str	r0, [sp, #12]
 8025a04:	d018      	beq.n	8025a38 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0x15c>
 8025a06:	f002 10ff 	and.w	r0, r2, #16711935	@ 0xff00ff
 8025a0a:	f402 427f 	and.w	r2, r2, #65280	@ 0xff00
 8025a0e:	fb0b f000 	mul.w	r0, fp, r0
 8025a12:	fb0b fb02 	mul.w	fp, fp, r2
 8025a16:	0a02      	lsrs	r2, r0, #8
 8025a18:	f100 1001 	add.w	r0, r0, #65537	@ 0x10001
 8025a1c:	f002 12ff 	and.w	r2, r2, #16711935	@ 0xff00ff
 8025a20:	4402      	add	r2, r0
 8025a22:	f50b 7080 	add.w	r0, fp, #256	@ 0x100
 8025a26:	eb00 201b 	add.w	r0, r0, fp, lsr #8
 8025a2a:	0a12      	lsrs	r2, r2, #8
 8025a2c:	0a00      	lsrs	r0, r0, #8
 8025a2e:	f002 12ff 	and.w	r2, r2, #16711935	@ 0xff00ff
 8025a32:	f400 407f 	and.w	r0, r0, #65280	@ 0xff00
 8025a36:	4302      	orrs	r2, r0
 8025a38:	f1ba 0fff 	cmp.w	sl, #255	@ 0xff
 8025a3c:	d019      	beq.n	8025a72 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0x196>
 8025a3e:	f006 1bff 	and.w	fp, r6, #16711935	@ 0xff00ff
 8025a42:	f406 467f 	and.w	r6, r6, #65280	@ 0xff00
 8025a46:	fb0a fb0b 	mul.w	fp, sl, fp
 8025a4a:	fb0a fa06 	mul.w	sl, sl, r6
 8025a4e:	ea4f 261b 	mov.w	r6, fp, lsr #8
 8025a52:	f10b 1b01 	add.w	fp, fp, #65537	@ 0x10001
 8025a56:	f50a 7080 	add.w	r0, sl, #256	@ 0x100
 8025a5a:	f006 16ff 	and.w	r6, r6, #16711935	@ 0xff00ff
 8025a5e:	eb00 201a 	add.w	r0, r0, sl, lsr #8
 8025a62:	445e      	add	r6, fp
 8025a64:	0a00      	lsrs	r0, r0, #8
 8025a66:	0a36      	lsrs	r6, r6, #8
 8025a68:	f400 407f 	and.w	r0, r0, #65280	@ 0xff00
 8025a6c:	f006 16ff 	and.w	r6, r6, #16711935	@ 0xff00ff
 8025a70:	4306      	orrs	r6, r0
 8025a72:	f1b9 0fff 	cmp.w	r9, #255	@ 0xff
 8025a76:	d019      	beq.n	8025aac <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0x1d0>
 8025a78:	f004 1aff 	and.w	sl, r4, #16711935	@ 0xff00ff
 8025a7c:	f404 447f 	and.w	r4, r4, #65280	@ 0xff00
 8025a80:	fb09 fa0a 	mul.w	sl, r9, sl
 8025a84:	fb09 f904 	mul.w	r9, r9, r4
 8025a88:	ea4f 241a 	mov.w	r4, sl, lsr #8
 8025a8c:	f10a 1a01 	add.w	sl, sl, #65537	@ 0x10001
 8025a90:	f509 7080 	add.w	r0, r9, #256	@ 0x100
 8025a94:	f004 14ff 	and.w	r4, r4, #16711935	@ 0xff00ff
 8025a98:	eb00 2019 	add.w	r0, r0, r9, lsr #8
 8025a9c:	4454      	add	r4, sl
 8025a9e:	0a00      	lsrs	r0, r0, #8
 8025aa0:	0a24      	lsrs	r4, r4, #8
 8025aa2:	f400 407f 	and.w	r0, r0, #65280	@ 0xff00
 8025aa6:	f004 14ff 	and.w	r4, r4, #16711935	@ 0xff00ff
 8025aaa:	4304      	orrs	r4, r0
 8025aac:	f1b8 0fff 	cmp.w	r8, #255	@ 0xff
 8025ab0:	d019      	beq.n	8025ae6 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0x20a>
 8025ab2:	f003 19ff 	and.w	r9, r3, #16711935	@ 0xff00ff
 8025ab6:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 8025aba:	fb08 f909 	mul.w	r9, r8, r9
 8025abe:	fb08 f803 	mul.w	r8, r8, r3
 8025ac2:	ea4f 2319 	mov.w	r3, r9, lsr #8
 8025ac6:	f109 1901 	add.w	r9, r9, #65537	@ 0x10001
 8025aca:	f508 7080 	add.w	r0, r8, #256	@ 0x100
 8025ace:	f003 13ff 	and.w	r3, r3, #16711935	@ 0xff00ff
 8025ad2:	eb00 2018 	add.w	r0, r0, r8, lsr #8
 8025ad6:	444b      	add	r3, r9
 8025ad8:	0a00      	lsrs	r0, r0, #8
 8025ada:	0a1b      	lsrs	r3, r3, #8
 8025adc:	f400 407f 	and.w	r0, r0, #65280	@ 0xff00
 8025ae0:	f003 13ff 	and.w	r3, r3, #16711935	@ 0xff00ff
 8025ae4:	4303      	orrs	r3, r0
 8025ae6:	f006 18ff 	and.w	r8, r6, #16711935	@ 0xff00ff
 8025aea:	f002 10ff 	and.w	r0, r2, #16711935	@ 0xff00ff
 8025aee:	f406 467f 	and.w	r6, r6, #65280	@ 0xff00
 8025af2:	f402 427f 	and.w	r2, r2, #65280	@ 0xff00
 8025af6:	fb0c f808 	mul.w	r8, ip, r8
 8025afa:	fb0c f606 	mul.w	r6, ip, r6
 8025afe:	fb05 8800 	mla	r8, r5, r0, r8
 8025b02:	f004 10ff 	and.w	r0, r4, #16711935	@ 0xff00ff
 8025b06:	fb05 6202 	mla	r2, r5, r2, r6
 8025b0a:	9d00      	ldr	r5, [sp, #0]
 8025b0c:	fb07 8800 	mla	r8, r7, r0, r8
 8025b10:	f003 10ff 	and.w	r0, r3, #16711935	@ 0xff00ff
 8025b14:	fb0e 8000 	mla	r0, lr, r0, r8
 8025b18:	0a00      	lsrs	r0, r0, #8
 8025b1a:	f000 18ff 	and.w	r8, r0, #16711935	@ 0xff00ff
 8025b1e:	f404 407f 	and.w	r0, r4, #65280	@ 0xff00
 8025b22:	fb07 2700 	mla	r7, r7, r0, r2
 8025b26:	f403 407f 	and.w	r0, r3, #65280	@ 0xff00
 8025b2a:	9b03      	ldr	r3, [sp, #12]
 8025b2c:	fb0e 7000 	mla	r0, lr, r0, r7
 8025b30:	9a02      	ldr	r2, [sp, #8]
 8025b32:	43dc      	mvns	r4, r3
 8025b34:	9b01      	ldr	r3, [sp, #4]
 8025b36:	0a00      	lsrs	r0, r0, #8
 8025b38:	b2e4      	uxtb	r4, r4
 8025b3a:	f400 407f 	and.w	r0, r0, #65280	@ 0xff00
 8025b3e:	4363      	muls	r3, r4
 8025b40:	4365      	muls	r5, r4
 8025b42:	ea48 0000 	orr.w	r0, r8, r0
 8025b46:	4362      	muls	r2, r4
 8025b48:	1c5e      	adds	r6, r3, #1
 8025b4a:	4614      	mov	r4, r2
 8025b4c:	1c6a      	adds	r2, r5, #1
 8025b4e:	eb06 2613 	add.w	r6, r6, r3, lsr #8
 8025b52:	eb02 2515 	add.w	r5, r2, r5, lsr #8
 8025b56:	0a03      	lsrs	r3, r0, #8
 8025b58:	0c02      	lsrs	r2, r0, #16
 8025b5a:	eb03 2316 	add.w	r3, r3, r6, lsr #8
 8025b5e:	eb02 2215 	add.w	r2, r2, r5, lsr #8
 8025b62:	00db      	lsls	r3, r3, #3
 8025b64:	0212      	lsls	r2, r2, #8
 8025b66:	f403 63fc 	and.w	r3, r3, #2016	@ 0x7e0
 8025b6a:	f402 4278 	and.w	r2, r2, #63488	@ 0xf800
 8025b6e:	4313      	orrs	r3, r2
 8025b70:	1c62      	adds	r2, r4, #1
 8025b72:	eb02 2414 	add.w	r4, r2, r4, lsr #8
 8025b76:	eb00 2014 	add.w	r0, r0, r4, lsr #8
 8025b7a:	f3c0 00c4 	ubfx	r0, r0, #3, #5
 8025b7e:	4318      	orrs	r0, r3
 8025b80:	8008      	strh	r0, [r1, #0]
 8025b82:	b005      	add	sp, #20
 8025b84:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8025b88:	0802fad5 	.word	0x0802fad5
 8025b8c:	080300a2 	.word	0x080300a2
 8025b90:	0802fb59 	.word	0x0802fb59

08025b94 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 8025b94:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8025b98:	ed2d 8b08 	vpush	{d8-d11}
 8025b9c:	b09b      	sub	sp, #108	@ 0x6c
 8025b9e:	eeb0 aa40 	vmov.f32	s20, s0
 8025ba2:	eef0 9a60 	vmov.f32	s19, s1
 8025ba6:	9218      	str	r2, [sp, #96]	@ 0x60
 8025ba8:	eeb0 9a41 	vmov.f32	s18, s2
 8025bac:	9a31      	ldr	r2, [sp, #196]	@ 0xc4
 8025bae:	eeb0 8a62 	vmov.f32	s16, s5
 8025bb2:	9019      	str	r0, [sp, #100]	@ 0x64
 8025bb4:	eef0 8a43 	vmov.f32	s17, s6
 8025bb8:	6850      	ldr	r0, [r2, #4]
 8025bba:	eef0 ba44 	vmov.f32	s23, s8
 8025bbe:	9116      	str	r1, [sp, #88]	@ 0x58
 8025bc0:	eeb0 ba64 	vmov.f32	s22, s9
 8025bc4:	9307      	str	r3, [sp, #28]
 8025bc6:	eef0 aa45 	vmov.f32	s21, s10
 8025bca:	6812      	ldr	r2, [r2, #0]
 8025bcc:	9d2e      	ldr	r5, [sp, #184]	@ 0xb8
 8025bce:	e9dd 1332 	ldrd	r1, r3, [sp, #200]	@ 0xc8
 8025bd2:	fb00 1303 	mla	r3, r0, r3, r1
 8025bd6:	eb02 0343 	add.w	r3, r2, r3, lsl #1
 8025bda:	930a      	str	r3, [sp, #40]	@ 0x28
 8025bdc:	9b34      	ldr	r3, [sp, #208]	@ 0xd0
 8025bde:	681b      	ldr	r3, [r3, #0]
 8025be0:	930f      	str	r3, [sp, #60]	@ 0x3c
 8025be2:	9b34      	ldr	r3, [sp, #208]	@ 0xd0
 8025be4:	685e      	ldr	r6, [r3, #4]
 8025be6:	3604      	adds	r6, #4
 8025be8:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 8025bea:	2b00      	cmp	r3, #0
 8025bec:	dc03      	bgt.n	8025bf6 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x62>
 8025bee:	9b18      	ldr	r3, [sp, #96]	@ 0x60
 8025bf0:	2b00      	cmp	r3, #0
 8025bf2:	f340 8373 	ble.w	80262dc <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x748>
 8025bf6:	9b34      	ldr	r3, [sp, #208]	@ 0xd0
 8025bf8:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 8025bfc:	f9b3 200c 	ldrsh.w	r2, [r3, #12]
 8025c00:	1e48      	subs	r0, r1, #1
 8025c02:	1e57      	subs	r7, r2, #1
 8025c04:	9b07      	ldr	r3, [sp, #28]
 8025c06:	2b00      	cmp	r3, #0
 8025c08:	f340 818f 	ble.w	8025f2a <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x396>
 8025c0c:	9c2d      	ldr	r4, [sp, #180]	@ 0xb4
 8025c0e:	142b      	asrs	r3, r5, #16
 8025c10:	ea5f 4c24 	movs.w	ip, r4, asr #16
 8025c14:	d406      	bmi.n	8025c24 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x90>
 8025c16:	4584      	cmp	ip, r0
 8025c18:	da04      	bge.n	8025c24 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x90>
 8025c1a:	2b00      	cmp	r3, #0
 8025c1c:	db02      	blt.n	8025c24 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x90>
 8025c1e:	42bb      	cmp	r3, r7
 8025c20:	f2c0 8184 	blt.w	8025f2c <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x398>
 8025c24:	f11c 0c01 	adds.w	ip, ip, #1
 8025c28:	f100 8172 	bmi.w	8025f10 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x37c>
 8025c2c:	4561      	cmp	r1, ip
 8025c2e:	f2c0 816f 	blt.w	8025f10 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x37c>
 8025c32:	3301      	adds	r3, #1
 8025c34:	f100 816c 	bmi.w	8025f10 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x37c>
 8025c38:	429a      	cmp	r2, r3
 8025c3a:	f2c0 8169 	blt.w	8025f10 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x37c>
 8025c3e:	9b07      	ldr	r3, [sp, #28]
 8025c40:	9f0a      	ldr	r7, [sp, #40]	@ 0x28
 8025c42:	9317      	str	r3, [sp, #92]	@ 0x5c
 8025c44:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 8025c46:	2b00      	cmp	r3, #0
 8025c48:	f340 818e 	ble.w	8025f68 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3d4>
 8025c4c:	9b2d      	ldr	r3, [sp, #180]	@ 0xb4
 8025c4e:	ea4f 4c25 	mov.w	ip, r5, asr #16
 8025c52:	f3c5 3003 	ubfx	r0, r5, #12, #4
 8025c56:	f3c3 3203 	ubfx	r2, r3, #12, #4
 8025c5a:	9b34      	ldr	r3, [sp, #208]	@ 0xd0
 8025c5c:	e9d3 1e02 	ldrd	r1, lr, [r3, #8]
 8025c60:	9b2d      	ldr	r3, [sp, #180]	@ 0xb4
 8025c62:	141b      	asrs	r3, r3, #16
 8025c64:	f100 81d1 	bmi.w	802600a <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x476>
 8025c68:	f101 38ff 	add.w	r8, r1, #4294967295
 8025c6c:	4543      	cmp	r3, r8
 8025c6e:	f280 81cc 	bge.w	802600a <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x476>
 8025c72:	f1bc 0f00 	cmp.w	ip, #0
 8025c76:	f2c0 81c8 	blt.w	802600a <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x476>
 8025c7a:	f10e 38ff 	add.w	r8, lr, #4294967295
 8025c7e:	45c4      	cmp	ip, r8
 8025c80:	f280 81c3 	bge.w	802600a <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x476>
 8025c84:	b209      	sxth	r1, r1
 8025c86:	9c0f      	ldr	r4, [sp, #60]	@ 0x3c
 8025c88:	fb0c 3301 	mla	r3, ip, r1, r3
 8025c8c:	eb04 0803 	add.w	r8, r4, r3
 8025c90:	5ce3      	ldrb	r3, [r4, r3]
 8025c92:	f856 3023 	ldr.w	r3, [r6, r3, lsl #2]
 8025c96:	ea4f 6e13 	mov.w	lr, r3, lsr #24
 8025c9a:	2a00      	cmp	r2, #0
 8025c9c:	f000 81aa 	beq.w	8025ff4 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x460>
 8025ca0:	f898 c001 	ldrb.w	ip, [r8, #1]
 8025ca4:	f856 402c 	ldr.w	r4, [r6, ip, lsl #2]
 8025ca8:	940b      	str	r4, [sp, #44]	@ 0x2c
 8025caa:	0e24      	lsrs	r4, r4, #24
 8025cac:	9412      	str	r4, [sp, #72]	@ 0x48
 8025cae:	b178      	cbz	r0, 8025cd0 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x13c>
 8025cb0:	eb08 0c01 	add.w	ip, r8, r1
 8025cb4:	f818 1001 	ldrb.w	r1, [r8, r1]
 8025cb8:	f856 1021 	ldr.w	r1, [r6, r1, lsl #2]
 8025cbc:	9108      	str	r1, [sp, #32]
 8025cbe:	0e09      	lsrs	r1, r1, #24
 8025cc0:	9110      	str	r1, [sp, #64]	@ 0x40
 8025cc2:	f89c 1001 	ldrb.w	r1, [ip, #1]
 8025cc6:	f856 1021 	ldr.w	r1, [r6, r1, lsl #2]
 8025cca:	910c      	str	r1, [sp, #48]	@ 0x30
 8025ccc:	0e09      	lsrs	r1, r1, #24
 8025cce:	9113      	str	r1, [sp, #76]	@ 0x4c
 8025cd0:	b292      	uxth	r2, r2
 8025cd2:	9912      	ldr	r1, [sp, #72]	@ 0x48
 8025cd4:	b280      	uxth	r0, r0
 8025cd6:	9c10      	ldr	r4, [sp, #64]	@ 0x40
 8025cd8:	fb02 f900 	mul.w	r9, r2, r0
 8025cdc:	0112      	lsls	r2, r2, #4
 8025cde:	ebc9 1000 	rsb	r0, r9, r0, lsl #4
 8025ce2:	eba2 0809 	sub.w	r8, r2, r9
 8025ce6:	f5c2 7280 	rsb	r2, r2, #256	@ 0x100
 8025cea:	b280      	uxth	r0, r0
 8025cec:	fa1f f888 	uxth.w	r8, r8
 8025cf0:	1a12      	subs	r2, r2, r0
 8025cf2:	fb08 f101 	mul.w	r1, r8, r1
 8025cf6:	b292      	uxth	r2, r2
 8025cf8:	fb02 110e 	mla	r1, r2, lr, r1
 8025cfc:	fb00 1104 	mla	r1, r0, r4, r1
 8025d00:	9c13      	ldr	r4, [sp, #76]	@ 0x4c
 8025d02:	fb09 1104 	mla	r1, r9, r4, r1
 8025d06:	f3c1 2107 	ubfx	r1, r1, #8, #8
 8025d0a:	2900      	cmp	r1, #0
 8025d0c:	f000 80f5 	beq.w	8025efa <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x366>
 8025d10:	f1be 0fff 	cmp.w	lr, #255	@ 0xff
 8025d14:	d01b      	beq.n	8025d4e <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ba>
 8025d16:	f003 1aff 	and.w	sl, r3, #16711935	@ 0xff00ff
 8025d1a:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 8025d1e:	fb0e fa0a 	mul.w	sl, lr, sl
 8025d22:	fb0e fe03 	mul.w	lr, lr, r3
 8025d26:	ea4f 231a 	mov.w	r3, sl, lsr #8
 8025d2a:	f10a 1a01 	add.w	sl, sl, #65537	@ 0x10001
 8025d2e:	f50e 7c80 	add.w	ip, lr, #256	@ 0x100
 8025d32:	f003 13ff 	and.w	r3, r3, #16711935	@ 0xff00ff
 8025d36:	eb0c 2c1e 	add.w	ip, ip, lr, lsr #8
 8025d3a:	4453      	add	r3, sl
 8025d3c:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 8025d40:	0a1b      	lsrs	r3, r3, #8
 8025d42:	f40c 4c7f 	and.w	ip, ip, #65280	@ 0xff00
 8025d46:	f003 13ff 	and.w	r3, r3, #16711935	@ 0xff00ff
 8025d4a:	ea43 030c 	orr.w	r3, r3, ip
 8025d4e:	9c12      	ldr	r4, [sp, #72]	@ 0x48
 8025d50:	2cff      	cmp	r4, #255	@ 0xff
 8025d52:	d021      	beq.n	8025d98 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x204>
 8025d54:	9c0b      	ldr	r4, [sp, #44]	@ 0x2c
 8025d56:	f004 1bff 	and.w	fp, r4, #16711935	@ 0xff00ff
 8025d5a:	9c12      	ldr	r4, [sp, #72]	@ 0x48
 8025d5c:	fb04 fb0b 	mul.w	fp, r4, fp
 8025d60:	9c0b      	ldr	r4, [sp, #44]	@ 0x2c
 8025d62:	f404 4a7f 	and.w	sl, r4, #65280	@ 0xff00
 8025d66:	9c12      	ldr	r4, [sp, #72]	@ 0x48
 8025d68:	ea4f 2e1b 	mov.w	lr, fp, lsr #8
 8025d6c:	f10b 1b01 	add.w	fp, fp, #65537	@ 0x10001
 8025d70:	fb04 fa0a 	mul.w	sl, r4, sl
 8025d74:	f00e 1eff 	and.w	lr, lr, #16711935	@ 0xff00ff
 8025d78:	f50a 7c80 	add.w	ip, sl, #256	@ 0x100
 8025d7c:	44de      	add	lr, fp
 8025d7e:	eb0c 2a1a 	add.w	sl, ip, sl, lsr #8
 8025d82:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 8025d86:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 8025d8a:	f00e 1eff 	and.w	lr, lr, #16711935	@ 0xff00ff
 8025d8e:	f40a 4a7f 	and.w	sl, sl, #65280	@ 0xff00
 8025d92:	ea4e 040a 	orr.w	r4, lr, sl
 8025d96:	940b      	str	r4, [sp, #44]	@ 0x2c
 8025d98:	9c10      	ldr	r4, [sp, #64]	@ 0x40
 8025d9a:	2cff      	cmp	r4, #255	@ 0xff
 8025d9c:	d021      	beq.n	8025de2 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x24e>
 8025d9e:	9c08      	ldr	r4, [sp, #32]
 8025da0:	f004 1bff 	and.w	fp, r4, #16711935	@ 0xff00ff
 8025da4:	9c10      	ldr	r4, [sp, #64]	@ 0x40
 8025da6:	fb04 fb0b 	mul.w	fp, r4, fp
 8025daa:	9c08      	ldr	r4, [sp, #32]
 8025dac:	f404 4a7f 	and.w	sl, r4, #65280	@ 0xff00
 8025db0:	9c10      	ldr	r4, [sp, #64]	@ 0x40
 8025db2:	ea4f 2e1b 	mov.w	lr, fp, lsr #8
 8025db6:	f10b 1b01 	add.w	fp, fp, #65537	@ 0x10001
 8025dba:	fb04 fa0a 	mul.w	sl, r4, sl
 8025dbe:	f00e 1eff 	and.w	lr, lr, #16711935	@ 0xff00ff
 8025dc2:	f50a 7c80 	add.w	ip, sl, #256	@ 0x100
 8025dc6:	44de      	add	lr, fp
 8025dc8:	eb0c 2a1a 	add.w	sl, ip, sl, lsr #8
 8025dcc:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 8025dd0:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 8025dd4:	f00e 1eff 	and.w	lr, lr, #16711935	@ 0xff00ff
 8025dd8:	f40a 4a7f 	and.w	sl, sl, #65280	@ 0xff00
 8025ddc:	ea4e 040a 	orr.w	r4, lr, sl
 8025de0:	9408      	str	r4, [sp, #32]
 8025de2:	9c13      	ldr	r4, [sp, #76]	@ 0x4c
 8025de4:	2cff      	cmp	r4, #255	@ 0xff
 8025de6:	d021      	beq.n	8025e2c <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x298>
 8025de8:	9c0c      	ldr	r4, [sp, #48]	@ 0x30
 8025dea:	f004 1bff 	and.w	fp, r4, #16711935	@ 0xff00ff
 8025dee:	9c13      	ldr	r4, [sp, #76]	@ 0x4c
 8025df0:	fb04 fb0b 	mul.w	fp, r4, fp
 8025df4:	9c0c      	ldr	r4, [sp, #48]	@ 0x30
 8025df6:	f404 4a7f 	and.w	sl, r4, #65280	@ 0xff00
 8025dfa:	9c13      	ldr	r4, [sp, #76]	@ 0x4c
 8025dfc:	ea4f 2e1b 	mov.w	lr, fp, lsr #8
 8025e00:	f10b 1b01 	add.w	fp, fp, #65537	@ 0x10001
 8025e04:	fb04 fa0a 	mul.w	sl, r4, sl
 8025e08:	f00e 1eff 	and.w	lr, lr, #16711935	@ 0xff00ff
 8025e0c:	f50a 7c80 	add.w	ip, sl, #256	@ 0x100
 8025e10:	44de      	add	lr, fp
 8025e12:	eb0c 2a1a 	add.w	sl, ip, sl, lsr #8
 8025e16:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 8025e1a:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 8025e1e:	f00e 1eff 	and.w	lr, lr, #16711935	@ 0xff00ff
 8025e22:	f40a 4a7f 	and.w	sl, sl, #65280	@ 0xff00
 8025e26:	ea4e 040a 	orr.w	r4, lr, sl
 8025e2a:	940c      	str	r4, [sp, #48]	@ 0x30
 8025e2c:	9c0b      	ldr	r4, [sp, #44]	@ 0x2c
 8025e2e:	f003 1eff 	and.w	lr, r3, #16711935	@ 0xff00ff
 8025e32:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 8025e36:	43c9      	mvns	r1, r1
 8025e38:	f004 1cff 	and.w	ip, r4, #16711935	@ 0xff00ff
 8025e3c:	9c08      	ldr	r4, [sp, #32]
 8025e3e:	fb08 fc0c 	mul.w	ip, r8, ip
 8025e42:	fb02 cc0e 	mla	ip, r2, lr, ip
 8025e46:	f004 1eff 	and.w	lr, r4, #16711935	@ 0xff00ff
 8025e4a:	9c0c      	ldr	r4, [sp, #48]	@ 0x30
 8025e4c:	fb00 cc0e 	mla	ip, r0, lr, ip
 8025e50:	f004 1eff 	and.w	lr, r4, #16711935	@ 0xff00ff
 8025e54:	9c0b      	ldr	r4, [sp, #44]	@ 0x2c
 8025e56:	fb09 cc0e 	mla	ip, r9, lr, ip
 8025e5a:	f404 4e7f 	and.w	lr, r4, #65280	@ 0xff00
 8025e5e:	fb08 f80e 	mul.w	r8, r8, lr
 8025e62:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 8025e66:	fa5f fe81 	uxtb.w	lr, r1
 8025e6a:	fb02 8303 	mla	r3, r2, r3, r8
 8025e6e:	9a08      	ldr	r2, [sp, #32]
 8025e70:	f8b7 8000 	ldrh.w	r8, [r7]
 8025e74:	f00c 1cff 	and.w	ip, ip, #16711935	@ 0xff00ff
 8025e78:	f402 4a7f 	and.w	sl, r2, #65280	@ 0xff00
 8025e7c:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 8025e7e:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8025e82:	fb00 330a 	mla	r3, r0, sl, r3
 8025e86:	f402 407f 	and.w	r0, r2, #65280	@ 0xff00
 8025e8a:	ea4f 2228 	mov.w	r2, r8, asr #8
 8025e8e:	fb09 3900 	mla	r9, r9, r0, r3
 8025e92:	ea4f 00e8 	mov.w	r0, r8, asr #3
 8025e96:	f002 02f8 	and.w	r2, r2, #248	@ 0xf8
 8025e9a:	b2c9      	uxtb	r1, r1
 8025e9c:	ea4f 2919 	mov.w	r9, r9, lsr #8
 8025ea0:	f000 00fc 	and.w	r0, r0, #252	@ 0xfc
 8025ea4:	fb02 f20e 	mul.w	r2, r2, lr
 8025ea8:	f409 497f 	and.w	r9, r9, #65280	@ 0xff00
 8025eac:	fb00 f00e 	mul.w	r0, r0, lr
 8025eb0:	1c53      	adds	r3, r2, #1
 8025eb2:	fb01 f10e 	mul.w	r1, r1, lr
 8025eb6:	ea4c 0c09 	orr.w	ip, ip, r9
 8025eba:	eb03 2212 	add.w	r2, r3, r2, lsr #8
 8025ebe:	ea4f 431c 	mov.w	r3, ip, lsr #16
 8025ec2:	eb03 2312 	add.w	r3, r3, r2, lsr #8
 8025ec6:	4a60      	ldr	r2, [pc, #384]	@ (8026048 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4b4>)
 8025ec8:	b2db      	uxtb	r3, r3
 8025eca:	ea02 2203 	and.w	r2, r2, r3, lsl #8
 8025ece:	1c43      	adds	r3, r0, #1
 8025ed0:	eb03 2010 	add.w	r0, r3, r0, lsr #8
 8025ed4:	ea4f 231c 	mov.w	r3, ip, lsr #8
 8025ed8:	eb03 2310 	add.w	r3, r3, r0, lsr #8
 8025edc:	00db      	lsls	r3, r3, #3
 8025ede:	f403 63fc 	and.w	r3, r3, #2016	@ 0x7e0
 8025ee2:	4313      	orrs	r3, r2
 8025ee4:	1c4a      	adds	r2, r1, #1
 8025ee6:	eb02 2111 	add.w	r1, r2, r1, lsr #8
 8025eea:	eb0c 2c11 	add.w	ip, ip, r1, lsr #8
 8025eee:	f3cc 0cc4 	ubfx	ip, ip, #3, #5
 8025ef2:	ea4c 0c03 	orr.w	ip, ip, r3
 8025ef6:	f8a7 c000 	strh.w	ip, [r7]
 8025efa:	9b2f      	ldr	r3, [sp, #188]	@ 0xbc
 8025efc:	3702      	adds	r7, #2
 8025efe:	9a2d      	ldr	r2, [sp, #180]	@ 0xb4
 8025f00:	441a      	add	r2, r3
 8025f02:	9b30      	ldr	r3, [sp, #192]	@ 0xc0
 8025f04:	441d      	add	r5, r3
 8025f06:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 8025f08:	922d      	str	r2, [sp, #180]	@ 0xb4
 8025f0a:	3b01      	subs	r3, #1
 8025f0c:	9317      	str	r3, [sp, #92]	@ 0x5c
 8025f0e:	e699      	b.n	8025c44 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xb0>
 8025f10:	9b2f      	ldr	r3, [sp, #188]	@ 0xbc
 8025f12:	9c2d      	ldr	r4, [sp, #180]	@ 0xb4
 8025f14:	441c      	add	r4, r3
 8025f16:	9b30      	ldr	r3, [sp, #192]	@ 0xc0
 8025f18:	441d      	add	r5, r3
 8025f1a:	9b07      	ldr	r3, [sp, #28]
 8025f1c:	942d      	str	r4, [sp, #180]	@ 0xb4
 8025f1e:	3b01      	subs	r3, #1
 8025f20:	9307      	str	r3, [sp, #28]
 8025f22:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8025f24:	3302      	adds	r3, #2
 8025f26:	930a      	str	r3, [sp, #40]	@ 0x28
 8025f28:	e66c      	b.n	8025c04 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x70>
 8025f2a:	d024      	beq.n	8025f76 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3e2>
 8025f2c:	9b07      	ldr	r3, [sp, #28]
 8025f2e:	982f      	ldr	r0, [sp, #188]	@ 0xbc
 8025f30:	3b01      	subs	r3, #1
 8025f32:	9c2d      	ldr	r4, [sp, #180]	@ 0xb4
 8025f34:	fb00 4003 	mla	r0, r0, r3, r4
 8025f38:	1400      	asrs	r0, r0, #16
 8025f3a:	f53f ae80 	bmi.w	8025c3e <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xaa>
 8025f3e:	3901      	subs	r1, #1
 8025f40:	4288      	cmp	r0, r1
 8025f42:	f6bf ae7c 	bge.w	8025c3e <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xaa>
 8025f46:	9930      	ldr	r1, [sp, #192]	@ 0xc0
 8025f48:	fb01 5303 	mla	r3, r1, r3, r5
 8025f4c:	141b      	asrs	r3, r3, #16
 8025f4e:	f53f ae76 	bmi.w	8025c3e <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xaa>
 8025f52:	3a01      	subs	r2, #1
 8025f54:	4293      	cmp	r3, r2
 8025f56:	f6bf ae72 	bge.w	8025c3e <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xaa>
 8025f5a:	f8dd b01c 	ldr.w	fp, [sp, #28]
 8025f5e:	f8dd 9028 	ldr.w	r9, [sp, #40]	@ 0x28
 8025f62:	f1bb 0f00 	cmp.w	fp, #0
 8025f66:	dc71      	bgt.n	802604c <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4b8>
 8025f68:	9b07      	ldr	r3, [sp, #28]
 8025f6a:	ea23 74e3 	bic.w	r4, r3, r3, asr #31
 8025f6e:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8025f70:	eb03 0344 	add.w	r3, r3, r4, lsl #1
 8025f74:	930a      	str	r3, [sp, #40]	@ 0x28
 8025f76:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 8025f78:	2b00      	cmp	r3, #0
 8025f7a:	f340 81af 	ble.w	80262dc <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x748>
 8025f7e:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8025f82:	9b2c      	ldr	r3, [sp, #176]	@ 0xb0
 8025f84:	ee3a aa2b 	vadd.f32	s20, s20, s23
 8025f88:	ee79 9a8b 	vadd.f32	s19, s19, s22
 8025f8c:	eef0 6a48 	vmov.f32	s13, s16
 8025f90:	eec7 7a0a 	vdiv.f32	s15, s14, s20
 8025f94:	ee39 9a2a 	vadd.f32	s18, s18, s21
 8025f98:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 8025f9c:	edcd 6a2d 	vstr	s13, [sp, #180]	@ 0xb4
 8025fa0:	eef0 6a68 	vmov.f32	s13, s17
 8025fa4:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 8025fa8:	ee16 5a90 	vmov	r5, s13
 8025fac:	ee29 7aa7 	vmul.f32	s14, s19, s15
 8025fb0:	ee69 7a27 	vmul.f32	s15, s18, s15
 8025fb4:	ee37 8a48 	vsub.f32	s16, s14, s16
 8025fb8:	ee77 8ae8 	vsub.f32	s17, s15, s17
 8025fbc:	eebe 8ac8 	vcvt.s32.f32	s16, s16, #16
 8025fc0:	eefe 8ac8 	vcvt.s32.f32	s17, s17, #16
 8025fc4:	ee18 2a10 	vmov	r2, s16
 8025fc8:	eeb0 8a47 	vmov.f32	s16, s14
 8025fcc:	fb92 f3f3 	sdiv	r3, r2, r3
 8025fd0:	ee18 2a90 	vmov	r2, s17
 8025fd4:	932f      	str	r3, [sp, #188]	@ 0xbc
 8025fd6:	9b2c      	ldr	r3, [sp, #176]	@ 0xb0
 8025fd8:	eef0 8a67 	vmov.f32	s17, s15
 8025fdc:	fb92 f3f3 	sdiv	r3, r2, r3
 8025fe0:	9330      	str	r3, [sp, #192]	@ 0xc0
 8025fe2:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 8025fe4:	9a18      	ldr	r2, [sp, #96]	@ 0x60
 8025fe6:	3b01      	subs	r3, #1
 8025fe8:	9316      	str	r3, [sp, #88]	@ 0x58
 8025fea:	9b2c      	ldr	r3, [sp, #176]	@ 0xb0
 8025fec:	bf08      	it	eq
 8025fee:	4613      	moveq	r3, r2
 8025ff0:	9307      	str	r3, [sp, #28]
 8025ff2:	e5f9      	b.n	8025be8 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x54>
 8025ff4:	2800      	cmp	r0, #0
 8025ff6:	f43f ae6b 	beq.w	8025cd0 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x13c>
 8025ffa:	f818 1001 	ldrb.w	r1, [r8, r1]
 8025ffe:	f856 1021 	ldr.w	r1, [r6, r1, lsl #2]
 8026002:	9108      	str	r1, [sp, #32]
 8026004:	0e09      	lsrs	r1, r1, #24
 8026006:	9110      	str	r1, [sp, #64]	@ 0x40
 8026008:	e662      	b.n	8025cd0 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x13c>
 802600a:	f113 0801 	adds.w	r8, r3, #1
 802600e:	f53f af74 	bmi.w	8025efa <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x366>
 8026012:	4541      	cmp	r1, r8
 8026014:	f6ff af71 	blt.w	8025efa <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x366>
 8026018:	f11c 0801 	adds.w	r8, ip, #1
 802601c:	f53f af6d 	bmi.w	8025efa <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x366>
 8026020:	45c6      	cmp	lr, r8
 8026022:	f6ff af6a 	blt.w	8025efa <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x366>
 8026026:	b209      	sxth	r1, r1
 8026028:	e9cd 3c02 	strd	r3, ip, [sp, #8]
 802602c:	fa0f f38e 	sxth.w	r3, lr
 8026030:	9100      	str	r1, [sp, #0]
 8026032:	4639      	mov	r1, r7
 8026034:	9301      	str	r3, [sp, #4]
 8026036:	4633      	mov	r3, r6
 8026038:	e9cd 2004 	strd	r2, r0, [sp, #16]
 802603c:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 802603e:	9819      	ldr	r0, [sp, #100]	@ 0x64
 8026040:	f7ff fc4c 	bl	80258dc <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh>
 8026044:	e759      	b.n	8025efa <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x366>
 8026046:	bf00      	nop
 8026048:	fffff800 	.word	0xfffff800
 802604c:	9b2d      	ldr	r3, [sp, #180]	@ 0xb4
 802604e:	f3c5 3003 	ubfx	r0, r5, #12, #4
 8026052:	9c2d      	ldr	r4, [sp, #180]	@ 0xb4
 8026054:	f3c3 3203 	ubfx	r2, r3, #12, #4
 8026058:	9b34      	ldr	r3, [sp, #208]	@ 0xd0
 802605a:	1427      	asrs	r7, r4, #16
 802605c:	9c0f      	ldr	r4, [sp, #60]	@ 0x3c
 802605e:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 8026062:	142b      	asrs	r3, r5, #16
 8026064:	fb01 7303 	mla	r3, r1, r3, r7
 8026068:	18e7      	adds	r7, r4, r3
 802606a:	5ce3      	ldrb	r3, [r4, r3]
 802606c:	f856 3023 	ldr.w	r3, [r6, r3, lsl #2]
 8026070:	ea4f 6c13 	mov.w	ip, r3, lsr #24
 8026074:	2a00      	cmp	r2, #0
 8026076:	f000 8127 	beq.w	80262c8 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x734>
 802607a:	f897 e001 	ldrb.w	lr, [r7, #1]
 802607e:	f856 402e 	ldr.w	r4, [r6, lr, lsl #2]
 8026082:	940d      	str	r4, [sp, #52]	@ 0x34
 8026084:	0e24      	lsrs	r4, r4, #24
 8026086:	9414      	str	r4, [sp, #80]	@ 0x50
 8026088:	b170      	cbz	r0, 80260a8 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x514>
 802608a:	eb07 0e01 	add.w	lr, r7, r1
 802608e:	5c79      	ldrb	r1, [r7, r1]
 8026090:	f856 1021 	ldr.w	r1, [r6, r1, lsl #2]
 8026094:	9109      	str	r1, [sp, #36]	@ 0x24
 8026096:	0e09      	lsrs	r1, r1, #24
 8026098:	9111      	str	r1, [sp, #68]	@ 0x44
 802609a:	f89e 1001 	ldrb.w	r1, [lr, #1]
 802609e:	f856 1021 	ldr.w	r1, [r6, r1, lsl #2]
 80260a2:	910e      	str	r1, [sp, #56]	@ 0x38
 80260a4:	0e09      	lsrs	r1, r1, #24
 80260a6:	9115      	str	r1, [sp, #84]	@ 0x54
 80260a8:	b292      	uxth	r2, r2
 80260aa:	9c11      	ldr	r4, [sp, #68]	@ 0x44
 80260ac:	b280      	uxth	r0, r0
 80260ae:	fb02 f800 	mul.w	r8, r2, r0
 80260b2:	0112      	lsls	r2, r2, #4
 80260b4:	ebc8 1000 	rsb	r0, r8, r0, lsl #4
 80260b8:	eba2 0e08 	sub.w	lr, r2, r8
 80260bc:	f5c2 7180 	rsb	r1, r2, #256	@ 0x100
 80260c0:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 80260c2:	b280      	uxth	r0, r0
 80260c4:	fa1f fe8e 	uxth.w	lr, lr
 80260c8:	1a09      	subs	r1, r1, r0
 80260ca:	fb0e f202 	mul.w	r2, lr, r2
 80260ce:	b289      	uxth	r1, r1
 80260d0:	fb01 220c 	mla	r2, r1, ip, r2
 80260d4:	fb00 2204 	mla	r2, r0, r4, r2
 80260d8:	9c15      	ldr	r4, [sp, #84]	@ 0x54
 80260da:	fb08 2204 	mla	r2, r8, r4, r2
 80260de:	f3c2 2207 	ubfx	r2, r2, #8, #8
 80260e2:	2a00      	cmp	r2, #0
 80260e4:	f000 80e5 	beq.w	80262b2 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x71e>
 80260e8:	f1bc 0fff 	cmp.w	ip, #255	@ 0xff
 80260ec:	d019      	beq.n	8026122 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x58e>
 80260ee:	f003 1aff 	and.w	sl, r3, #16711935	@ 0xff00ff
 80260f2:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 80260f6:	fb0c fa0a 	mul.w	sl, ip, sl
 80260fa:	fb0c fc03 	mul.w	ip, ip, r3
 80260fe:	ea4f 231a 	mov.w	r3, sl, lsr #8
 8026102:	f10a 1a01 	add.w	sl, sl, #65537	@ 0x10001
 8026106:	f50c 7780 	add.w	r7, ip, #256	@ 0x100
 802610a:	f003 13ff 	and.w	r3, r3, #16711935	@ 0xff00ff
 802610e:	eb07 271c 	add.w	r7, r7, ip, lsr #8
 8026112:	4453      	add	r3, sl
 8026114:	0a3f      	lsrs	r7, r7, #8
 8026116:	0a1b      	lsrs	r3, r3, #8
 8026118:	f407 477f 	and.w	r7, r7, #65280	@ 0xff00
 802611c:	f003 13ff 	and.w	r3, r3, #16711935	@ 0xff00ff
 8026120:	433b      	orrs	r3, r7
 8026122:	9c14      	ldr	r4, [sp, #80]	@ 0x50
 8026124:	2cff      	cmp	r4, #255	@ 0xff
 8026126:	d020      	beq.n	802616a <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5d6>
 8026128:	9c0d      	ldr	r4, [sp, #52]	@ 0x34
 802612a:	f004 17ff 	and.w	r7, r4, #16711935	@ 0xff00ff
 802612e:	9c14      	ldr	r4, [sp, #80]	@ 0x50
 8026130:	4367      	muls	r7, r4
 8026132:	9c0d      	ldr	r4, [sp, #52]	@ 0x34
 8026134:	ea4f 2c17 	mov.w	ip, r7, lsr #8
 8026138:	f404 4a7f 	and.w	sl, r4, #65280	@ 0xff00
 802613c:	9c14      	ldr	r4, [sp, #80]	@ 0x50
 802613e:	f107 1701 	add.w	r7, r7, #65537	@ 0x10001
 8026142:	f00c 1cff 	and.w	ip, ip, #16711935	@ 0xff00ff
 8026146:	fb04 fa0a 	mul.w	sl, r4, sl
 802614a:	44bc      	add	ip, r7
 802614c:	f50a 7780 	add.w	r7, sl, #256	@ 0x100
 8026150:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 8026154:	eb07 2a1a 	add.w	sl, r7, sl, lsr #8
 8026158:	f00c 1cff 	and.w	ip, ip, #16711935	@ 0xff00ff
 802615c:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 8026160:	f40a 4a7f 	and.w	sl, sl, #65280	@ 0xff00
 8026164:	ea4c 040a 	orr.w	r4, ip, sl
 8026168:	940d      	str	r4, [sp, #52]	@ 0x34
 802616a:	9c11      	ldr	r4, [sp, #68]	@ 0x44
 802616c:	2cff      	cmp	r4, #255	@ 0xff
 802616e:	d020      	beq.n	80261b2 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x61e>
 8026170:	9c09      	ldr	r4, [sp, #36]	@ 0x24
 8026172:	f004 17ff 	and.w	r7, r4, #16711935	@ 0xff00ff
 8026176:	9c11      	ldr	r4, [sp, #68]	@ 0x44
 8026178:	4367      	muls	r7, r4
 802617a:	9c09      	ldr	r4, [sp, #36]	@ 0x24
 802617c:	ea4f 2c17 	mov.w	ip, r7, lsr #8
 8026180:	f404 4a7f 	and.w	sl, r4, #65280	@ 0xff00
 8026184:	9c11      	ldr	r4, [sp, #68]	@ 0x44
 8026186:	f107 1701 	add.w	r7, r7, #65537	@ 0x10001
 802618a:	f00c 1cff 	and.w	ip, ip, #16711935	@ 0xff00ff
 802618e:	fb04 fa0a 	mul.w	sl, r4, sl
 8026192:	44bc      	add	ip, r7
 8026194:	f50a 7780 	add.w	r7, sl, #256	@ 0x100
 8026198:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 802619c:	eb07 2a1a 	add.w	sl, r7, sl, lsr #8
 80261a0:	f00c 1cff 	and.w	ip, ip, #16711935	@ 0xff00ff
 80261a4:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 80261a8:	f40a 4a7f 	and.w	sl, sl, #65280	@ 0xff00
 80261ac:	ea4c 040a 	orr.w	r4, ip, sl
 80261b0:	9409      	str	r4, [sp, #36]	@ 0x24
 80261b2:	9c15      	ldr	r4, [sp, #84]	@ 0x54
 80261b4:	2cff      	cmp	r4, #255	@ 0xff
 80261b6:	d020      	beq.n	80261fa <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x666>
 80261b8:	9c0e      	ldr	r4, [sp, #56]	@ 0x38
 80261ba:	f004 17ff 	and.w	r7, r4, #16711935	@ 0xff00ff
 80261be:	9c15      	ldr	r4, [sp, #84]	@ 0x54
 80261c0:	4367      	muls	r7, r4
 80261c2:	9c0e      	ldr	r4, [sp, #56]	@ 0x38
 80261c4:	ea4f 2c17 	mov.w	ip, r7, lsr #8
 80261c8:	f404 4a7f 	and.w	sl, r4, #65280	@ 0xff00
 80261cc:	9c15      	ldr	r4, [sp, #84]	@ 0x54
 80261ce:	f107 1701 	add.w	r7, r7, #65537	@ 0x10001
 80261d2:	f00c 1cff 	and.w	ip, ip, #16711935	@ 0xff00ff
 80261d6:	fb04 fa0a 	mul.w	sl, r4, sl
 80261da:	44bc      	add	ip, r7
 80261dc:	f50a 7780 	add.w	r7, sl, #256	@ 0x100
 80261e0:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 80261e4:	eb07 2a1a 	add.w	sl, r7, sl, lsr #8
 80261e8:	f00c 1cff 	and.w	ip, ip, #16711935	@ 0xff00ff
 80261ec:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 80261f0:	f40a 4a7f 	and.w	sl, sl, #65280	@ 0xff00
 80261f4:	ea4c 040a 	orr.w	r4, ip, sl
 80261f8:	940e      	str	r4, [sp, #56]	@ 0x38
 80261fa:	9c0d      	ldr	r4, [sp, #52]	@ 0x34
 80261fc:	f003 1cff 	and.w	ip, r3, #16711935	@ 0xff00ff
 8026200:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 8026204:	43d2      	mvns	r2, r2
 8026206:	f004 17ff 	and.w	r7, r4, #16711935	@ 0xff00ff
 802620a:	9c09      	ldr	r4, [sp, #36]	@ 0x24
 802620c:	b2d2      	uxtb	r2, r2
 802620e:	fb0e f707 	mul.w	r7, lr, r7
 8026212:	fb01 770c 	mla	r7, r1, ip, r7
 8026216:	f004 1cff 	and.w	ip, r4, #16711935	@ 0xff00ff
 802621a:	9c0e      	ldr	r4, [sp, #56]	@ 0x38
 802621c:	fb00 770c 	mla	r7, r0, ip, r7
 8026220:	f004 1cff 	and.w	ip, r4, #16711935	@ 0xff00ff
 8026224:	9c0d      	ldr	r4, [sp, #52]	@ 0x34
 8026226:	fb08 770c 	mla	r7, r8, ip, r7
 802622a:	f404 4c7f 	and.w	ip, r4, #65280	@ 0xff00
 802622e:	fb0e fe0c 	mul.w	lr, lr, ip
 8026232:	0a3f      	lsrs	r7, r7, #8
 8026234:	fb01 e303 	mla	r3, r1, r3, lr
 8026238:	9909      	ldr	r1, [sp, #36]	@ 0x24
 802623a:	f007 17ff 	and.w	r7, r7, #16711935	@ 0xff00ff
 802623e:	f401 4a7f 	and.w	sl, r1, #65280	@ 0xff00
 8026242:	990e      	ldr	r1, [sp, #56]	@ 0x38
 8026244:	fb00 330a 	mla	r3, r0, sl, r3
 8026248:	f401 4c7f 	and.w	ip, r1, #65280	@ 0xff00
 802624c:	fb08 3c0c 	mla	ip, r8, ip, r3
 8026250:	f8b9 3000 	ldrh.w	r3, [r9]
 8026254:	1218      	asrs	r0, r3, #8
 8026256:	10d9      	asrs	r1, r3, #3
 8026258:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 802625c:	f000 00f8 	and.w	r0, r0, #248	@ 0xf8
 8026260:	00db      	lsls	r3, r3, #3
 8026262:	f001 01fc 	and.w	r1, r1, #252	@ 0xfc
 8026266:	4350      	muls	r0, r2
 8026268:	f40c 4c7f 	and.w	ip, ip, #65280	@ 0xff00
 802626c:	b2db      	uxtb	r3, r3
 802626e:	4351      	muls	r1, r2
 8026270:	ea47 070c 	orr.w	r7, r7, ip
 8026274:	4353      	muls	r3, r2
 8026276:	1c42      	adds	r2, r0, #1
 8026278:	eb02 2010 	add.w	r0, r2, r0, lsr #8
 802627c:	0c3a      	lsrs	r2, r7, #16
 802627e:	eb02 2010 	add.w	r0, r2, r0, lsr #8
 8026282:	4a19      	ldr	r2, [pc, #100]	@ (80262e8 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x754>)
 8026284:	b2c0      	uxtb	r0, r0
 8026286:	ea02 2000 	and.w	r0, r2, r0, lsl #8
 802628a:	1c4a      	adds	r2, r1, #1
 802628c:	eb02 2111 	add.w	r1, r2, r1, lsr #8
 8026290:	0a3a      	lsrs	r2, r7, #8
 8026292:	eb02 2111 	add.w	r1, r2, r1, lsr #8
 8026296:	00c9      	lsls	r1, r1, #3
 8026298:	f401 61fc 	and.w	r1, r1, #2016	@ 0x7e0
 802629c:	4301      	orrs	r1, r0
 802629e:	1c58      	adds	r0, r3, #1
 80262a0:	eb00 2013 	add.w	r0, r0, r3, lsr #8
 80262a4:	eb07 2710 	add.w	r7, r7, r0, lsr #8
 80262a8:	f3c7 00c4 	ubfx	r0, r7, #3, #5
 80262ac:	4308      	orrs	r0, r1
 80262ae:	f8a9 0000 	strh.w	r0, [r9]
 80262b2:	9b2f      	ldr	r3, [sp, #188]	@ 0xbc
 80262b4:	f109 0902 	add.w	r9, r9, #2
 80262b8:	9a2d      	ldr	r2, [sp, #180]	@ 0xb4
 80262ba:	f10b 3bff 	add.w	fp, fp, #4294967295
 80262be:	441a      	add	r2, r3
 80262c0:	9b30      	ldr	r3, [sp, #192]	@ 0xc0
 80262c2:	922d      	str	r2, [sp, #180]	@ 0xb4
 80262c4:	441d      	add	r5, r3
 80262c6:	e64c      	b.n	8025f62 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3ce>
 80262c8:	2800      	cmp	r0, #0
 80262ca:	f43f aeed 	beq.w	80260a8 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x514>
 80262ce:	5c79      	ldrb	r1, [r7, r1]
 80262d0:	f856 1021 	ldr.w	r1, [r6, r1, lsl #2]
 80262d4:	9109      	str	r1, [sp, #36]	@ 0x24
 80262d6:	0e09      	lsrs	r1, r1, #24
 80262d8:	9111      	str	r1, [sp, #68]	@ 0x44
 80262da:	e6e5      	b.n	80260a8 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x514>
 80262dc:	b01b      	add	sp, #108	@ 0x6c
 80262de:	ecbd 8b08 	vpop	{d8-d11}
 80262e2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80262e6:	bf00      	nop
 80262e8:	fffff800 	.word	0xfffff800

080262ec <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh>:
 80262ec:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80262f0:	b085      	sub	sp, #20
 80262f2:	e9dd 7510 	ldrd	r7, r5, [sp, #64]	@ 0x40
 80262f6:	f9bd 6038 	ldrsh.w	r6, [sp, #56]	@ 0x38
 80262fa:	9103      	str	r1, [sp, #12]
 80262fc:	2d00      	cmp	r5, #0
 80262fe:	fb05 7106 	mla	r1, r5, r6, r7
 8026302:	f9bd 803c 	ldrsh.w	r8, [sp, #60]	@ 0x3c
 8026306:	f89d 0048 	ldrb.w	r0, [sp, #72]	@ 0x48
 802630a:	eb02 0441 	add.w	r4, r2, r1, lsl #1
 802630e:	f89d e04c 	ldrb.w	lr, [sp, #76]	@ 0x4c
 8026312:	eb03 0901 	add.w	r9, r3, r1
 8026316:	9401      	str	r4, [sp, #4]
 8026318:	f2c0 80c0 	blt.w	802649c <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0x1b0>
 802631c:	45a8      	cmp	r8, r5
 802631e:	f340 80bd 	ble.w	802649c <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0x1b0>
 8026322:	2f00      	cmp	r7, #0
 8026324:	f2c0 80b6 	blt.w	8026494 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0x1a8>
 8026328:	42be      	cmp	r6, r7
 802632a:	f340 80b3 	ble.w	8026494 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0x1a8>
 802632e:	f813 c001 	ldrb.w	ip, [r3, r1]
 8026332:	f832 1011 	ldrh.w	r1, [r2, r1, lsl #1]
 8026336:	f1bc 0fff 	cmp.w	ip, #255	@ 0xff
 802633a:	d019      	beq.n	8026370 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0x84>
 802633c:	f421 63fc 	bic.w	r3, r1, #2016	@ 0x7e0
 8026340:	ea4f 02ec 	mov.w	r2, ip, asr #3
 8026344:	435a      	muls	r2, r3
 8026346:	f401 63fc 	and.w	r3, r1, #2016	@ 0x7e0
 802634a:	f64f 011f 	movw	r1, #63519	@ 0xf81f
 802634e:	fb0c f403 	mul.w	r4, ip, r3
 8026352:	ea01 1352 	and.w	r3, r1, r2, lsr #5
 8026356:	f602 0201 	addw	r2, r2, #2049	@ 0x801
 802635a:	441a      	add	r2, r3
 802635c:	f104 0320 	add.w	r3, r4, #32
 8026360:	eb03 2314 	add.w	r3, r3, r4, lsr #8
 8026364:	ea01 1152 	and.w	r1, r1, r2, lsr #5
 8026368:	0a1b      	lsrs	r3, r3, #8
 802636a:	f403 63fc 	and.w	r3, r3, #2016	@ 0x7e0
 802636e:	4319      	orrs	r1, r3
 8026370:	b289      	uxth	r1, r1
 8026372:	1c7b      	adds	r3, r7, #1
 8026374:	f100 8097 	bmi.w	80264a6 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0x1ba>
 8026378:	429e      	cmp	r6, r3
 802637a:	f340 8094 	ble.w	80264a6 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0x1ba>
 802637e:	2800      	cmp	r0, #0
 8026380:	f000 8094 	beq.w	80264ac <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0x1c0>
 8026384:	f899 4001 	ldrb.w	r4, [r9, #1]
 8026388:	9b01      	ldr	r3, [sp, #4]
 802638a:	2cff      	cmp	r4, #255	@ 0xff
 802638c:	885b      	ldrh	r3, [r3, #2]
 802638e:	d01b      	beq.n	80263c8 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0xdc>
 8026390:	f423 62fc 	bic.w	r2, r3, #2016	@ 0x7e0
 8026394:	ea4f 0ae4 	mov.w	sl, r4, asr #3
 8026398:	f403 63fc 	and.w	r3, r3, #2016	@ 0x7e0
 802639c:	f64f 0b1f 	movw	fp, #63519	@ 0xf81f
 80263a0:	fb0a f202 	mul.w	r2, sl, r2
 80263a4:	fb04 fa03 	mul.w	sl, r4, r3
 80263a8:	ea0b 1352 	and.w	r3, fp, r2, lsr #5
 80263ac:	f602 0201 	addw	r2, r2, #2049	@ 0x801
 80263b0:	441a      	add	r2, r3
 80263b2:	f10a 0320 	add.w	r3, sl, #32
 80263b6:	eb03 231a 	add.w	r3, r3, sl, lsr #8
 80263ba:	ea0b 1b52 	and.w	fp, fp, r2, lsr #5
 80263be:	0a1b      	lsrs	r3, r3, #8
 80263c0:	f403 63fc 	and.w	r3, r3, #2016	@ 0x7e0
 80263c4:	ea4b 0303 	orr.w	r3, fp, r3
 80263c8:	b29b      	uxth	r3, r3
 80263ca:	3501      	adds	r5, #1
 80263cc:	d474      	bmi.n	80264b8 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0x1cc>
 80263ce:	45a8      	cmp	r8, r5
 80263d0:	dd72      	ble.n	80264b8 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0x1cc>
 80263d2:	f1be 0f00 	cmp.w	lr, #0
 80263d6:	f000 8120 	beq.w	802661a <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0x32e>
 80263da:	2f00      	cmp	r7, #0
 80263dc:	db69      	blt.n	80264b2 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0x1c6>
 80263de:	42be      	cmp	r6, r7
 80263e0:	dd67      	ble.n	80264b2 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0x1c6>
 80263e2:	f819 5006 	ldrb.w	r5, [r9, r6]
 80263e6:	9a01      	ldr	r2, [sp, #4]
 80263e8:	2dff      	cmp	r5, #255	@ 0xff
 80263ea:	f832 b016 	ldrh.w	fp, [r2, r6, lsl #1]
 80263ee:	d01c      	beq.n	802642a <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0x13e>
 80263f0:	f42b 62fc 	bic.w	r2, fp, #2016	@ 0x7e0
 80263f4:	ea4f 08e5 	mov.w	r8, r5, asr #3
 80263f8:	f40b 6bfc 	and.w	fp, fp, #2016	@ 0x7e0
 80263fc:	fb08 f802 	mul.w	r8, r8, r2
 8026400:	fb05 fa0b 	mul.w	sl, r5, fp
 8026404:	f64f 0b1f 	movw	fp, #63519	@ 0xf81f
 8026408:	ea0b 1258 	and.w	r2, fp, r8, lsr #5
 802640c:	f608 0801 	addw	r8, r8, #2049	@ 0x801
 8026410:	4490      	add	r8, r2
 8026412:	f10a 0220 	add.w	r2, sl, #32
 8026416:	eb02 2a1a 	add.w	sl, r2, sl, lsr #8
 802641a:	ea0b 1b58 	and.w	fp, fp, r8, lsr #5
 802641e:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 8026422:	f40a 6afc 	and.w	sl, sl, #2016	@ 0x7e0
 8026426:	ea4b 0b0a 	orr.w	fp, fp, sl
 802642a:	fa1f fb8b 	uxth.w	fp, fp
 802642e:	3701      	adds	r7, #1
 8026430:	d447      	bmi.n	80264c2 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0x1d6>
 8026432:	42be      	cmp	r6, r7
 8026434:	dd45      	ble.n	80264c2 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0x1d6>
 8026436:	2800      	cmp	r0, #0
 8026438:	d046      	beq.n	80264c8 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0x1dc>
 802643a:	3601      	adds	r6, #1
 802643c:	9a01      	ldr	r2, [sp, #4]
 802643e:	f819 7006 	ldrb.w	r7, [r9, r6]
 8026442:	f832 2016 	ldrh.w	r2, [r2, r6, lsl #1]
 8026446:	2fff      	cmp	r7, #255	@ 0xff
 8026448:	d01a      	beq.n	8026480 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0x194>
 802644a:	f422 66fc 	bic.w	r6, r2, #2016	@ 0x7e0
 802644e:	ea4f 08e7 	mov.w	r8, r7, asr #3
 8026452:	f402 62fc 	and.w	r2, r2, #2016	@ 0x7e0
 8026456:	fb08 f806 	mul.w	r8, r8, r6
 802645a:	fb07 f902 	mul.w	r9, r7, r2
 802645e:	f64f 021f 	movw	r2, #63519	@ 0xf81f
 8026462:	ea02 1658 	and.w	r6, r2, r8, lsr #5
 8026466:	f608 0801 	addw	r8, r8, #2049	@ 0x801
 802646a:	44b0      	add	r8, r6
 802646c:	f109 0620 	add.w	r6, r9, #32
 8026470:	eb06 2619 	add.w	r6, r6, r9, lsr #8
 8026474:	ea02 1258 	and.w	r2, r2, r8, lsr #5
 8026478:	0a36      	lsrs	r6, r6, #8
 802647a:	f406 66fc 	and.w	r6, r6, #2016	@ 0x7e0
 802647e:	4332      	orrs	r2, r6
 8026480:	b292      	uxth	r2, r2
 8026482:	280f      	cmp	r0, #15
 8026484:	d922      	bls.n	80264cc <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0x1e0>
 8026486:	4b69      	ldr	r3, [pc, #420]	@ (802662c <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0x340>)
 8026488:	f44f 71fb 	mov.w	r1, #502	@ 0x1f6
 802648c:	4a68      	ldr	r2, [pc, #416]	@ (8026630 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0x344>)
 802648e:	4869      	ldr	r0, [pc, #420]	@ (8026634 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0x348>)
 8026490:	f004 fa50 	bl	802a934 <__assert_func>
 8026494:	f04f 0c00 	mov.w	ip, #0
 8026498:	4661      	mov	r1, ip
 802649a:	e76a      	b.n	8026372 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0x86>
 802649c:	2400      	movs	r4, #0
 802649e:	46a4      	mov	ip, r4
 80264a0:	4623      	mov	r3, r4
 80264a2:	4621      	mov	r1, r4
 80264a4:	e791      	b.n	80263ca <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0xde>
 80264a6:	2400      	movs	r4, #0
 80264a8:	4623      	mov	r3, r4
 80264aa:	e78e      	b.n	80263ca <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0xde>
 80264ac:	4604      	mov	r4, r0
 80264ae:	4603      	mov	r3, r0
 80264b0:	e78b      	b.n	80263ca <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0xde>
 80264b2:	2500      	movs	r5, #0
 80264b4:	46ab      	mov	fp, r5
 80264b6:	e7ba      	b.n	802642e <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0x142>
 80264b8:	2700      	movs	r7, #0
 80264ba:	463d      	mov	r5, r7
 80264bc:	463a      	mov	r2, r7
 80264be:	46bb      	mov	fp, r7
 80264c0:	e7df      	b.n	8026482 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0x196>
 80264c2:	2700      	movs	r7, #0
 80264c4:	463a      	mov	r2, r7
 80264c6:	e7dc      	b.n	8026482 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0x196>
 80264c8:	4607      	mov	r7, r0
 80264ca:	4602      	mov	r2, r0
 80264cc:	f1be 0f0f 	cmp.w	lr, #15
 80264d0:	d8d9      	bhi.n	8026486 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0x19a>
 80264d2:	b286      	uxth	r6, r0
 80264d4:	fa1f f98e 	uxth.w	r9, lr
 80264d8:	ea4f 4a01 	mov.w	sl, r1, lsl #16
 80264dc:	f421 61fc 	bic.w	r1, r1, #2016	@ 0x7e0
 80264e0:	fb06 f809 	mul.w	r8, r6, r9
 80264e4:	0136      	lsls	r6, r6, #4
 80264e6:	f00a 6afc 	and.w	sl, sl, #132120576	@ 0x7e00000
 80264ea:	ebc8 1909 	rsb	r9, r8, r9, lsl #4
 80264ee:	9601      	str	r6, [sp, #4]
 80264f0:	ea4a 0101 	orr.w	r1, sl, r1
 80264f4:	ea4f 4a03 	mov.w	sl, r3, lsl #16
 80264f8:	fa1f f689 	uxth.w	r6, r9
 80264fc:	f423 63fc 	bic.w	r3, r3, #2016	@ 0x7e0
 8026500:	fb10 f90e 	smulbb	r9, r0, lr
 8026504:	f00a 6afc 	and.w	sl, sl, #132120576	@ 0x7e00000
 8026508:	9602      	str	r6, [sp, #8]
 802650a:	460e      	mov	r6, r1
 802650c:	ea4f 09e9 	mov.w	r9, r9, asr #3
 8026510:	f1ce 0110 	rsb	r1, lr, #16
 8026514:	ea4a 0303 	orr.w	r3, sl, r3
 8026518:	ea4f 4a02 	mov.w	sl, r2, lsl #16
 802651c:	1a09      	subs	r1, r1, r0
 802651e:	ebc9 0040 	rsb	r0, r9, r0, lsl #1
 8026522:	f00a 6afc 	and.w	sl, sl, #132120576	@ 0x7e00000
 8026526:	f422 62fc 	bic.w	r2, r2, #2016	@ 0x7e0
 802652a:	4343      	muls	r3, r0
 802652c:	eb09 0141 	add.w	r1, r9, r1, lsl #1
 8026530:	9801      	ldr	r0, [sp, #4]
 8026532:	ea4a 0202 	orr.w	r2, sl, r2
 8026536:	fb01 3106 	mla	r1, r1, r6, r3
 802653a:	9e02      	ldr	r6, [sp, #8]
 802653c:	f5c0 7080 	rsb	r0, r0, #256	@ 0x100
 8026540:	ea4f 4a0b 	mov.w	sl, fp, lsl #16
 8026544:	fb09 1302 	mla	r3, r9, r2, r1
 8026548:	f42b 6bfc 	bic.w	fp, fp, #2016	@ 0x7e0
 802654c:	1b80      	subs	r0, r0, r6
 802654e:	9e01      	ldr	r6, [sp, #4]
 8026550:	9a03      	ldr	r2, [sp, #12]
 8026552:	f00a 6afc 	and.w	sl, sl, #132120576	@ 0x7e00000
 8026556:	eba6 0608 	sub.w	r6, r6, r8
 802655a:	b280      	uxth	r0, r0
 802655c:	8811      	ldrh	r1, [r2, #0]
 802655e:	ea4a 0b0b 	orr.w	fp, sl, fp
 8026562:	b2b6      	uxth	r6, r6
 8026564:	f89d 2050 	ldrb.w	r2, [sp, #80]	@ 0x50
 8026568:	ebc9 0e4e 	rsb	lr, r9, lr, lsl #1
 802656c:	4374      	muls	r4, r6
 802656e:	b292      	uxth	r2, r2
 8026570:	fb0e 3e0b 	mla	lr, lr, fp, r3
 8026574:	fb0c 4400 	mla	r4, ip, r0, r4
 8026578:	9802      	ldr	r0, [sp, #8]
 802657a:	ea4f 535e 	mov.w	r3, lr, lsr #21
 802657e:	fb00 4505 	mla	r5, r0, r5, r4
 8026582:	ea4f 1e5e 	mov.w	lr, lr, lsr #5
 8026586:	f403 63fc 	and.w	r3, r3, #2016	@ 0x7e0
 802658a:	1208      	asrs	r0, r1, #8
 802658c:	fb08 5707 	mla	r7, r8, r7, r5
 8026590:	f42e 6efc 	bic.w	lr, lr, #2016	@ 0x7e0
 8026594:	f000 00f8 	and.w	r0, r0, #248	@ 0xf8
 8026598:	10cd      	asrs	r5, r1, #3
 802659a:	f3c7 2707 	ubfx	r7, r7, #8, #8
 802659e:	ea43 0e0e 	orr.w	lr, r3, lr
 80265a2:	f005 05fc 	and.w	r5, r5, #252	@ 0xfc
 80265a6:	4357      	muls	r7, r2
 80265a8:	fa1f f38e 	uxth.w	r3, lr
 80265ac:	f107 0801 	add.w	r8, r7, #1
 80265b0:	121c      	asrs	r4, r3, #8
 80265b2:	eb08 2717 	add.w	r7, r8, r7, lsr #8
 80265b6:	f004 04f8 	and.w	r4, r4, #248	@ 0xf8
 80265ba:	ea6f 2717 	mvn.w	r7, r7, lsr #8
 80265be:	b2ff      	uxtb	r7, r7
 80265c0:	fb10 f007 	smulbb	r0, r0, r7
 80265c4:	fb15 f507 	smulbb	r5, r5, r7
 80265c8:	fb04 0402 	mla	r4, r4, r2, r0
 80265cc:	10d8      	asrs	r0, r3, #3
 80265ce:	00db      	lsls	r3, r3, #3
 80265d0:	f000 00fc 	and.w	r0, r0, #252	@ 0xfc
 80265d4:	b2a4      	uxth	r4, r4
 80265d6:	fb00 5002 	mla	r0, r0, r2, r5
 80265da:	b2dd      	uxtb	r5, r3
 80265dc:	00cb      	lsls	r3, r1, #3
 80265de:	b280      	uxth	r0, r0
 80265e0:	b2db      	uxtb	r3, r3
 80265e2:	fb13 f307 	smulbb	r3, r3, r7
 80265e6:	fb05 3202 	mla	r2, r5, r2, r3
 80265ea:	1c63      	adds	r3, r4, #1
 80265ec:	b292      	uxth	r2, r2
 80265ee:	eb03 2414 	add.w	r4, r3, r4, lsr #8
 80265f2:	1c53      	adds	r3, r2, #1
 80265f4:	f404 4478 	and.w	r4, r4, #63488	@ 0xf800
 80265f8:	eb03 2312 	add.w	r3, r3, r2, lsr #8
 80265fc:	1c42      	adds	r2, r0, #1
 80265fe:	eb02 2010 	add.w	r0, r2, r0, lsr #8
 8026602:	f3c3 23c4 	ubfx	r3, r3, #11, #5
 8026606:	9a03      	ldr	r2, [sp, #12]
 8026608:	0940      	lsrs	r0, r0, #5
 802660a:	4323      	orrs	r3, r4
 802660c:	f400 60fc 	and.w	r0, r0, #2016	@ 0x7e0
 8026610:	4303      	orrs	r3, r0
 8026612:	8013      	strh	r3, [r2, #0]
 8026614:	b005      	add	sp, #20
 8026616:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 802661a:	280f      	cmp	r0, #15
 802661c:	f63f af33 	bhi.w	8026486 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0x19a>
 8026620:	4677      	mov	r7, lr
 8026622:	4675      	mov	r5, lr
 8026624:	4672      	mov	r2, lr
 8026626:	46f3      	mov	fp, lr
 8026628:	e753      	b.n	80264d2 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0x1e6>
 802662a:	bf00      	nop
 802662c:	0802fad5 	.word	0x0802fad5
 8026630:	080300a2 	.word	0x080300a2
 8026634:	0802fb59 	.word	0x0802fb59

08026638 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 8026638:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 802663c:	ed2d 8b08 	vpush	{d8-d11}
 8026640:	b097      	sub	sp, #92	@ 0x5c
 8026642:	eeb0 aa40 	vmov.f32	s20, s0
 8026646:	eef0 9a60 	vmov.f32	s19, s1
 802664a:	9214      	str	r2, [sp, #80]	@ 0x50
 802664c:	eeb0 9a41 	vmov.f32	s18, s2
 8026650:	9a2d      	ldr	r2, [sp, #180]	@ 0xb4
 8026652:	eeb0 8a62 	vmov.f32	s16, s5
 8026656:	9308      	str	r3, [sp, #32]
 8026658:	eef0 8a43 	vmov.f32	s17, s6
 802665c:	f89d 30c4 	ldrb.w	r3, [sp, #196]	@ 0xc4
 8026660:	eef0 ba44 	vmov.f32	s23, s8
 8026664:	9015      	str	r0, [sp, #84]	@ 0x54
 8026666:	eeb0 ba64 	vmov.f32	s22, s9
 802666a:	9312      	str	r3, [sp, #72]	@ 0x48
 802666c:	eef0 aa45 	vmov.f32	s21, s10
 8026670:	6850      	ldr	r0, [r2, #4]
 8026672:	9111      	str	r1, [sp, #68]	@ 0x44
 8026674:	6812      	ldr	r2, [r2, #0]
 8026676:	e9dd 132e 	ldrd	r1, r3, [sp, #184]	@ 0xb8
 802667a:	fb00 1303 	mla	r3, r0, r3, r1
 802667e:	eb02 0343 	add.w	r3, r2, r3, lsl #1
 8026682:	9309      	str	r3, [sp, #36]	@ 0x24
 8026684:	9b30      	ldr	r3, [sp, #192]	@ 0xc0
 8026686:	681b      	ldr	r3, [r3, #0]
 8026688:	930b      	str	r3, [sp, #44]	@ 0x2c
 802668a:	9b30      	ldr	r3, [sp, #192]	@ 0xc0
 802668c:	685b      	ldr	r3, [r3, #4]
 802668e:	930c      	str	r3, [sp, #48]	@ 0x30
 8026690:	f8bd 3048 	ldrh.w	r3, [sp, #72]	@ 0x48
 8026694:	930a      	str	r3, [sp, #40]	@ 0x28
 8026696:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 8026698:	2b00      	cmp	r3, #0
 802669a:	dc03      	bgt.n	80266a4 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6c>
 802669c:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 802669e:	2b00      	cmp	r3, #0
 80266a0:	f340 83cd 	ble.w	8026e3e <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x806>
 80266a4:	9b30      	ldr	r3, [sp, #192]	@ 0xc0
 80266a6:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 80266aa:	f9b3 200c 	ldrsh.w	r2, [r3, #12]
 80266ae:	1e48      	subs	r0, r1, #1
 80266b0:	1e55      	subs	r5, r2, #1
 80266b2:	9b08      	ldr	r3, [sp, #32]
 80266b4:	2b00      	cmp	r3, #0
 80266b6:	f340 81a5 	ble.w	8026a04 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3cc>
 80266ba:	9e29      	ldr	r6, [sp, #164]	@ 0xa4
 80266bc:	9b2a      	ldr	r3, [sp, #168]	@ 0xa8
 80266be:	1436      	asrs	r6, r6, #16
 80266c0:	ea4f 4323 	mov.w	r3, r3, asr #16
 80266c4:	d406      	bmi.n	80266d4 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x9c>
 80266c6:	4286      	cmp	r6, r0
 80266c8:	da04      	bge.n	80266d4 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x9c>
 80266ca:	2b00      	cmp	r3, #0
 80266cc:	db02      	blt.n	80266d4 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x9c>
 80266ce:	42ab      	cmp	r3, r5
 80266d0:	f2c0 8199 	blt.w	8026a06 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3ce>
 80266d4:	3601      	adds	r6, #1
 80266d6:	f100 8186 	bmi.w	80269e6 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3ae>
 80266da:	42b1      	cmp	r1, r6
 80266dc:	f2c0 8183 	blt.w	80269e6 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3ae>
 80266e0:	3301      	adds	r3, #1
 80266e2:	f100 8180 	bmi.w	80269e6 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3ae>
 80266e6:	429a      	cmp	r2, r3
 80266e8:	f2c0 817d 	blt.w	80269e6 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3ae>
 80266ec:	9b08      	ldr	r3, [sp, #32]
 80266ee:	f64f 061f 	movw	r6, #63519	@ 0xf81f
 80266f2:	9f09      	ldr	r7, [sp, #36]	@ 0x24
 80266f4:	9313      	str	r3, [sp, #76]	@ 0x4c
 80266f6:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 80266f8:	2b00      	cmp	r3, #0
 80266fa:	f340 81a6 	ble.w	8026a4a <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x412>
 80266fe:	9b2a      	ldr	r3, [sp, #168]	@ 0xa8
 8026700:	9d29      	ldr	r5, [sp, #164]	@ 0xa4
 8026702:	1418      	asrs	r0, r3, #16
 8026704:	9b29      	ldr	r3, [sp, #164]	@ 0xa4
 8026706:	142d      	asrs	r5, r5, #16
 8026708:	f3c3 3103 	ubfx	r1, r3, #12, #4
 802670c:	9b2a      	ldr	r3, [sp, #168]	@ 0xa8
 802670e:	f3c3 3c03 	ubfx	ip, r3, #12, #4
 8026712:	9b30      	ldr	r3, [sp, #192]	@ 0xc0
 8026714:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 8026718:	f100 81fa 	bmi.w	8026b10 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4d8>
 802671c:	f102 3eff 	add.w	lr, r2, #4294967295
 8026720:	4575      	cmp	r5, lr
 8026722:	f280 81f5 	bge.w	8026b10 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4d8>
 8026726:	2800      	cmp	r0, #0
 8026728:	f2c0 81f2 	blt.w	8026b10 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4d8>
 802672c:	f103 3eff 	add.w	lr, r3, #4294967295
 8026730:	4570      	cmp	r0, lr
 8026732:	f280 81ed 	bge.w	8026b10 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4d8>
 8026736:	b212      	sxth	r2, r2
 8026738:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 802673a:	fa1f fe81 	uxth.w	lr, r1
 802673e:	fb00 5002 	mla	r0, r0, r2, r5
 8026742:	ea4f 150e 	mov.w	r5, lr, lsl #4
 8026746:	eb03 0a00 	add.w	sl, r3, r0
 802674a:	f813 9000 	ldrb.w	r9, [r3, r0]
 802674e:	f5c5 7380 	rsb	r3, r5, #256	@ 0x100
 8026752:	f89a 8001 	ldrb.w	r8, [sl, #1]
 8026756:	b29b      	uxth	r3, r3
 8026758:	f1bc 0f00 	cmp.w	ip, #0
 802675c:	f000 81bb 	beq.w	8026ad6 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x49e>
 8026760:	f81a 4002 	ldrb.w	r4, [sl, r2]
 8026764:	eb0a 0b02 	add.w	fp, sl, r2
 8026768:	fa1f fa8c 	uxth.w	sl, ip
 802676c:	940d      	str	r4, [sp, #52]	@ 0x34
 802676e:	fb0a fe0e 	mul.w	lr, sl, lr
 8026772:	f89b 4001 	ldrb.w	r4, [fp, #1]
 8026776:	ebce 1a0a 	rsb	sl, lr, sl, lsl #4
 802677a:	eba5 050e 	sub.w	r5, r5, lr
 802677e:	940e      	str	r4, [sp, #56]	@ 0x38
 8026780:	fa1f fa8a 	uxth.w	sl, sl
 8026784:	9c0d      	ldr	r4, [sp, #52]	@ 0x34
 8026786:	b2ad      	uxth	r5, r5
 8026788:	eba3 030a 	sub.w	r3, r3, sl
 802678c:	fb08 f505 	mul.w	r5, r8, r5
 8026790:	b29b      	uxth	r3, r3
 8026792:	fb09 5303 	mla	r3, r9, r3, r5
 8026796:	fb0a 3304 	mla	r3, sl, r4, r3
 802679a:	9c0e      	ldr	r4, [sp, #56]	@ 0x38
 802679c:	fb0e 3304 	mla	r3, lr, r4, r3
 80267a0:	f3c3 2307 	ubfx	r3, r3, #8, #8
 80267a4:	2b00      	cmp	r3, #0
 80267a6:	f000 8111 	beq.w	80269cc <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x394>
 80267aa:	9c0b      	ldr	r4, [sp, #44]	@ 0x2c
 80267ac:	f1b9 0fff 	cmp.w	r9, #255	@ 0xff
 80267b0:	eb04 0540 	add.w	r5, r4, r0, lsl #1
 80267b4:	f834 0010 	ldrh.w	r0, [r4, r0, lsl #1]
 80267b8:	f000 8192 	beq.w	8026ae0 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4a8>
 80267bc:	f420 6efc 	bic.w	lr, r0, #2016	@ 0x7e0
 80267c0:	ea4f 0ae9 	mov.w	sl, r9, asr #3
 80267c4:	f400 60fc 	and.w	r0, r0, #2016	@ 0x7e0
 80267c8:	fb0a fe0e 	mul.w	lr, sl, lr
 80267cc:	fb09 f000 	mul.w	r0, r9, r0
 80267d0:	ea06 195e 	and.w	r9, r6, lr, lsr #5
 80267d4:	f60e 0e01 	addw	lr, lr, #2049	@ 0x801
 80267d8:	f100 0b20 	add.w	fp, r0, #32
 80267dc:	44ce      	add	lr, r9
 80267de:	eb0b 2910 	add.w	r9, fp, r0, lsr #8
 80267e2:	ea06 1e5e 	and.w	lr, r6, lr, lsr #5
 80267e6:	ea4f 2919 	mov.w	r9, r9, lsr #8
 80267ea:	f409 69fc 	and.w	r9, r9, #2016	@ 0x7e0
 80267ee:	ea4e 0909 	orr.w	r9, lr, r9
 80267f2:	f1b8 0fff 	cmp.w	r8, #255	@ 0xff
 80267f6:	8868      	ldrh	r0, [r5, #2]
 80267f8:	d019      	beq.n	802682e <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1f6>
 80267fa:	f420 6efc 	bic.w	lr, r0, #2016	@ 0x7e0
 80267fe:	ea4f 0ae8 	mov.w	sl, r8, asr #3
 8026802:	f400 60fc 	and.w	r0, r0, #2016	@ 0x7e0
 8026806:	fb0a fe0e 	mul.w	lr, sl, lr
 802680a:	fb08 f800 	mul.w	r8, r8, r0
 802680e:	ea06 105e 	and.w	r0, r6, lr, lsr #5
 8026812:	f60e 0e01 	addw	lr, lr, #2049	@ 0x801
 8026816:	f108 0b20 	add.w	fp, r8, #32
 802681a:	4486      	add	lr, r0
 802681c:	eb0b 2018 	add.w	r0, fp, r8, lsr #8
 8026820:	ea06 1e5e 	and.w	lr, r6, lr, lsr #5
 8026824:	0a00      	lsrs	r0, r0, #8
 8026826:	f400 60fc 	and.w	r0, r0, #2016	@ 0x7e0
 802682a:	ea4e 0000 	orr.w	r0, lr, r0
 802682e:	ea4f 4e09 	mov.w	lr, r9, lsl #16
 8026832:	f429 69fc 	bic.w	r9, r9, #2016	@ 0x7e0
 8026836:	ea4f 4a00 	mov.w	sl, r0, lsl #16
 802683a:	f420 60fc 	bic.w	r0, r0, #2016	@ 0x7e0
 802683e:	f00e 6efc 	and.w	lr, lr, #132120576	@ 0x7e00000
 8026842:	f00a 6afc 	and.w	sl, sl, #132120576	@ 0x7e00000
 8026846:	ea4e 0909 	orr.w	r9, lr, r9
 802684a:	ea4a 0000 	orr.w	r0, sl, r0
 802684e:	f1bc 0f00 	cmp.w	ip, #0
 8026852:	f000 8147 	beq.w	8026ae4 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4ac>
 8026856:	f102 4200 	add.w	r2, r2, #2147483648	@ 0x80000000
 802685a:	9c0d      	ldr	r4, [sp, #52]	@ 0x34
 802685c:	3a01      	subs	r2, #1
 802685e:	2cff      	cmp	r4, #255	@ 0xff
 8026860:	ea4f 0242 	mov.w	r2, r2, lsl #1
 8026864:	f102 0202 	add.w	r2, r2, #2
 8026868:	eb05 0e02 	add.w	lr, r5, r2
 802686c:	5aaa      	ldrh	r2, [r5, r2]
 802686e:	d018      	beq.n	80268a2 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x26a>
 8026870:	f422 65fc 	bic.w	r5, r2, #2016	@ 0x7e0
 8026874:	f402 62fc 	and.w	r2, r2, #2016	@ 0x7e0
 8026878:	ea4f 08e4 	mov.w	r8, r4, asr #3
 802687c:	fb04 fa02 	mul.w	sl, r4, r2
 8026880:	fb08 f805 	mul.w	r8, r8, r5
 8026884:	f10a 0520 	add.w	r5, sl, #32
 8026888:	ea06 1258 	and.w	r2, r6, r8, lsr #5
 802688c:	f608 0801 	addw	r8, r8, #2049	@ 0x801
 8026890:	eb05 251a 	add.w	r5, r5, sl, lsr #8
 8026894:	4442      	add	r2, r8
 8026896:	0a2d      	lsrs	r5, r5, #8
 8026898:	ea06 1252 	and.w	r2, r6, r2, lsr #5
 802689c:	f405 65fc 	and.w	r5, r5, #2016	@ 0x7e0
 80268a0:	432a      	orrs	r2, r5
 80268a2:	9c0e      	ldr	r4, [sp, #56]	@ 0x38
 80268a4:	f8be 5002 	ldrh.w	r5, [lr, #2]
 80268a8:	2cff      	cmp	r4, #255	@ 0xff
 80268aa:	d01a      	beq.n	80268e2 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2aa>
 80268ac:	f425 6efc 	bic.w	lr, r5, #2016	@ 0x7e0
 80268b0:	f405 65fc 	and.w	r5, r5, #2016	@ 0x7e0
 80268b4:	ea4f 08e4 	mov.w	r8, r4, asr #3
 80268b8:	fb04 fa05 	mul.w	sl, r4, r5
 80268bc:	fb08 f80e 	mul.w	r8, r8, lr
 80268c0:	f10a 0e20 	add.w	lr, sl, #32
 80268c4:	ea06 1558 	and.w	r5, r6, r8, lsr #5
 80268c8:	f608 0801 	addw	r8, r8, #2049	@ 0x801
 80268cc:	eb0e 2e1a 	add.w	lr, lr, sl, lsr #8
 80268d0:	4445      	add	r5, r8
 80268d2:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 80268d6:	ea06 1555 	and.w	r5, r6, r5, lsr #5
 80268da:	f40e 6efc 	and.w	lr, lr, #2016	@ 0x7e0
 80268de:	ea45 050e 	orr.w	r5, r5, lr
 80268e2:	fb1c fe01 	smulbb	lr, ip, r1
 80268e6:	f1cc 0810 	rsb	r8, ip, #16
 80268ea:	ea4f 4a02 	mov.w	sl, r2, lsl #16
 80268ee:	f422 62fc 	bic.w	r2, r2, #2016	@ 0x7e0
 80268f2:	ea4f 0eee 	mov.w	lr, lr, asr #3
 80268f6:	eba8 0801 	sub.w	r8, r8, r1
 80268fa:	ea4f 4b05 	mov.w	fp, r5, lsl #16
 80268fe:	f00a 6afc 	and.w	sl, sl, #132120576	@ 0x7e00000
 8026902:	ebce 0141 	rsb	r1, lr, r1, lsl #1
 8026906:	f425 65fc 	bic.w	r5, r5, #2016	@ 0x7e0
 802690a:	eb0e 0848 	add.w	r8, lr, r8, lsl #1
 802690e:	ea4a 0202 	orr.w	r2, sl, r2
 8026912:	4341      	muls	r1, r0
 8026914:	ebce 0c4c 	rsb	ip, lr, ip, lsl #1
 8026918:	f00b 6bfc 	and.w	fp, fp, #132120576	@ 0x7e00000
 802691c:	fb09 1108 	mla	r1, r9, r8, r1
 8026920:	ea4b 0505 	orr.w	r5, fp, r5
 8026924:	fb0c 1102 	mla	r1, ip, r2, r1
 8026928:	fb0e 1e05 	mla	lr, lr, r5, r1
 802692c:	ea4f 525e 	mov.w	r2, lr, lsr #21
 8026930:	ea4f 1e5e 	mov.w	lr, lr, lsr #5
 8026934:	f402 62fc 	and.w	r2, r2, #2016	@ 0x7e0
 8026938:	f42e 6efc 	bic.w	lr, lr, #2016	@ 0x7e0
 802693c:	ea42 0e0e 	orr.w	lr, r2, lr
 8026940:	fa1f f28e 	uxth.w	r2, lr
 8026944:	2bff      	cmp	r3, #255	@ 0xff
 8026946:	d103      	bne.n	8026950 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x318>
 8026948:	9912      	ldr	r1, [sp, #72]	@ 0x48
 802694a:	29ff      	cmp	r1, #255	@ 0xff
 802694c:	f000 80de 	beq.w	8026b0c <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4d4>
 8026950:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8026952:	1215      	asrs	r5, r2, #8
 8026954:	8838      	ldrh	r0, [r7, #0]
 8026956:	434b      	muls	r3, r1
 8026958:	f005 05f8 	and.w	r5, r5, #248	@ 0xf8
 802695c:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 802695e:	f103 0c01 	add.w	ip, r3, #1
 8026962:	eb0c 2323 	add.w	r3, ip, r3, asr #8
 8026966:	ea6f 2323 	mvn.w	r3, r3, asr #8
 802696a:	fa5f fc83 	uxtb.w	ip, r3
 802696e:	1203      	asrs	r3, r0, #8
 8026970:	f003 03f8 	and.w	r3, r3, #248	@ 0xf8
 8026974:	fb13 f30c 	smulbb	r3, r3, ip
 8026978:	fb05 3501 	mla	r5, r5, r1, r3
 802697c:	10c3      	asrs	r3, r0, #3
 802697e:	10d1      	asrs	r1, r2, #3
 8026980:	f003 03fc 	and.w	r3, r3, #252	@ 0xfc
 8026984:	00d2      	lsls	r2, r2, #3
 8026986:	f001 01fc 	and.w	r1, r1, #252	@ 0xfc
 802698a:	b2ad      	uxth	r5, r5
 802698c:	fb13 f30c 	smulbb	r3, r3, ip
 8026990:	b2d2      	uxtb	r2, r2
 8026992:	fb01 3104 	mla	r1, r1, r4, r3
 8026996:	00c3      	lsls	r3, r0, #3
 8026998:	b2db      	uxtb	r3, r3
 802699a:	b289      	uxth	r1, r1
 802699c:	fb13 f30c 	smulbb	r3, r3, ip
 80269a0:	fb02 3304 	mla	r3, r2, r4, r3
 80269a4:	b29a      	uxth	r2, r3
 80269a6:	1c6b      	adds	r3, r5, #1
 80269a8:	eb03 2515 	add.w	r5, r3, r5, lsr #8
 80269ac:	1c53      	adds	r3, r2, #1
 80269ae:	eb03 2312 	add.w	r3, r3, r2, lsr #8
 80269b2:	1c4a      	adds	r2, r1, #1
 80269b4:	f405 4578 	and.w	r5, r5, #63488	@ 0xf800
 80269b8:	eb02 2111 	add.w	r1, r2, r1, lsr #8
 80269bc:	f3c3 23c4 	ubfx	r3, r3, #11, #5
 80269c0:	0949      	lsrs	r1, r1, #5
 80269c2:	432b      	orrs	r3, r5
 80269c4:	f401 61fc 	and.w	r1, r1, #2016	@ 0x7e0
 80269c8:	430b      	orrs	r3, r1
 80269ca:	803b      	strh	r3, [r7, #0]
 80269cc:	9b29      	ldr	r3, [sp, #164]	@ 0xa4
 80269ce:	3702      	adds	r7, #2
 80269d0:	9a2b      	ldr	r2, [sp, #172]	@ 0xac
 80269d2:	4413      	add	r3, r2
 80269d4:	9a2a      	ldr	r2, [sp, #168]	@ 0xa8
 80269d6:	9329      	str	r3, [sp, #164]	@ 0xa4
 80269d8:	9b2c      	ldr	r3, [sp, #176]	@ 0xb0
 80269da:	441a      	add	r2, r3
 80269dc:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 80269de:	3b01      	subs	r3, #1
 80269e0:	922a      	str	r2, [sp, #168]	@ 0xa8
 80269e2:	9313      	str	r3, [sp, #76]	@ 0x4c
 80269e4:	e687      	b.n	80266f6 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xbe>
 80269e6:	9b29      	ldr	r3, [sp, #164]	@ 0xa4
 80269e8:	9e2b      	ldr	r6, [sp, #172]	@ 0xac
 80269ea:	9c2a      	ldr	r4, [sp, #168]	@ 0xa8
 80269ec:	4433      	add	r3, r6
 80269ee:	9329      	str	r3, [sp, #164]	@ 0xa4
 80269f0:	9b2c      	ldr	r3, [sp, #176]	@ 0xb0
 80269f2:	441c      	add	r4, r3
 80269f4:	9b08      	ldr	r3, [sp, #32]
 80269f6:	3b01      	subs	r3, #1
 80269f8:	942a      	str	r4, [sp, #168]	@ 0xa8
 80269fa:	9308      	str	r3, [sp, #32]
 80269fc:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80269fe:	3302      	adds	r3, #2
 8026a00:	9309      	str	r3, [sp, #36]	@ 0x24
 8026a02:	e656      	b.n	80266b2 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7a>
 8026a04:	d028      	beq.n	8026a58 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x420>
 8026a06:	9b08      	ldr	r3, [sp, #32]
 8026a08:	982b      	ldr	r0, [sp, #172]	@ 0xac
 8026a0a:	3b01      	subs	r3, #1
 8026a0c:	9d29      	ldr	r5, [sp, #164]	@ 0xa4
 8026a0e:	fb00 5003 	mla	r0, r0, r3, r5
 8026a12:	1400      	asrs	r0, r0, #16
 8026a14:	f53f ae6a 	bmi.w	80266ec <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xb4>
 8026a18:	3901      	subs	r1, #1
 8026a1a:	4288      	cmp	r0, r1
 8026a1c:	f6bf ae66 	bge.w	80266ec <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xb4>
 8026a20:	992c      	ldr	r1, [sp, #176]	@ 0xb0
 8026a22:	982a      	ldr	r0, [sp, #168]	@ 0xa8
 8026a24:	fb01 0303 	mla	r3, r1, r3, r0
 8026a28:	141b      	asrs	r3, r3, #16
 8026a2a:	f53f ae5f 	bmi.w	80266ec <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xb4>
 8026a2e:	3a01      	subs	r2, #1
 8026a30:	4293      	cmp	r3, r2
 8026a32:	f6bf ae5b 	bge.w	80266ec <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xb4>
 8026a36:	9b08      	ldr	r3, [sp, #32]
 8026a38:	f64f 061f 	movw	r6, #63519	@ 0xf81f
 8026a3c:	f8dd e024 	ldr.w	lr, [sp, #36]	@ 0x24
 8026a40:	9313      	str	r3, [sp, #76]	@ 0x4c
 8026a42:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 8026a44:	2b00      	cmp	r3, #0
 8026a46:	f300 8082 	bgt.w	8026b4e <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x516>
 8026a4a:	9b08      	ldr	r3, [sp, #32]
 8026a4c:	ea23 74e3 	bic.w	r4, r3, r3, asr #31
 8026a50:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8026a52:	eb03 0344 	add.w	r3, r3, r4, lsl #1
 8026a56:	9309      	str	r3, [sp, #36]	@ 0x24
 8026a58:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 8026a5a:	2b00      	cmp	r3, #0
 8026a5c:	f340 81ef 	ble.w	8026e3e <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x806>
 8026a60:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8026a64:	9b28      	ldr	r3, [sp, #160]	@ 0xa0
 8026a66:	ee3a aa2b 	vadd.f32	s20, s20, s23
 8026a6a:	ee79 9a8b 	vadd.f32	s19, s19, s22
 8026a6e:	eef0 6a48 	vmov.f32	s13, s16
 8026a72:	eec7 7a0a 	vdiv.f32	s15, s14, s20
 8026a76:	ee39 9a2a 	vadd.f32	s18, s18, s21
 8026a7a:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 8026a7e:	edcd 6a29 	vstr	s13, [sp, #164]	@ 0xa4
 8026a82:	eef0 6a68 	vmov.f32	s13, s17
 8026a86:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 8026a8a:	edcd 6a2a 	vstr	s13, [sp, #168]	@ 0xa8
 8026a8e:	ee29 7aa7 	vmul.f32	s14, s19, s15
 8026a92:	ee69 7a27 	vmul.f32	s15, s18, s15
 8026a96:	ee37 8a48 	vsub.f32	s16, s14, s16
 8026a9a:	ee77 8ae8 	vsub.f32	s17, s15, s17
 8026a9e:	eebe 8ac8 	vcvt.s32.f32	s16, s16, #16
 8026aa2:	eefe 8ac8 	vcvt.s32.f32	s17, s17, #16
 8026aa6:	ee18 2a10 	vmov	r2, s16
 8026aaa:	eeb0 8a47 	vmov.f32	s16, s14
 8026aae:	fb92 f3f3 	sdiv	r3, r2, r3
 8026ab2:	ee18 2a90 	vmov	r2, s17
 8026ab6:	932b      	str	r3, [sp, #172]	@ 0xac
 8026ab8:	9b28      	ldr	r3, [sp, #160]	@ 0xa0
 8026aba:	eef0 8a67 	vmov.f32	s17, s15
 8026abe:	fb92 f3f3 	sdiv	r3, r2, r3
 8026ac2:	932c      	str	r3, [sp, #176]	@ 0xb0
 8026ac4:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 8026ac6:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 8026ac8:	3b01      	subs	r3, #1
 8026aca:	9311      	str	r3, [sp, #68]	@ 0x44
 8026acc:	9b28      	ldr	r3, [sp, #160]	@ 0xa0
 8026ace:	bf08      	it	eq
 8026ad0:	4613      	moveq	r3, r2
 8026ad2:	9308      	str	r3, [sp, #32]
 8026ad4:	e5df      	b.n	8026696 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5e>
 8026ad6:	fb08 f505 	mul.w	r5, r8, r5
 8026ada:	fb09 5303 	mla	r3, r9, r3, r5
 8026ade:	e65f      	b.n	80267a0 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x168>
 8026ae0:	4681      	mov	r9, r0
 8026ae2:	e686      	b.n	80267f2 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ba>
 8026ae4:	f1c1 0210 	rsb	r2, r1, #16
 8026ae8:	4341      	muls	r1, r0
 8026aea:	fb09 1902 	mla	r9, r9, r2, r1
 8026aee:	ea4f 0949 	mov.w	r9, r9, lsl #1
 8026af2:	ea4f 5259 	mov.w	r2, r9, lsr #21
 8026af6:	ea4f 1959 	mov.w	r9, r9, lsr #5
 8026afa:	f402 62fc 	and.w	r2, r2, #2016	@ 0x7e0
 8026afe:	f429 69fc 	bic.w	r9, r9, #2016	@ 0x7e0
 8026b02:	ea42 0909 	orr.w	r9, r2, r9
 8026b06:	fa1f f289 	uxth.w	r2, r9
 8026b0a:	e71b      	b.n	8026944 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x30c>
 8026b0c:	803a      	strh	r2, [r7, #0]
 8026b0e:	e75d      	b.n	80269cc <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x394>
 8026b10:	f115 0e01 	adds.w	lr, r5, #1
 8026b14:	f53f af5a 	bmi.w	80269cc <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x394>
 8026b18:	4572      	cmp	r2, lr
 8026b1a:	f6ff af57 	blt.w	80269cc <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x394>
 8026b1e:	f110 0e01 	adds.w	lr, r0, #1
 8026b22:	f53f af53 	bmi.w	80269cc <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x394>
 8026b26:	4573      	cmp	r3, lr
 8026b28:	f6ff af50 	blt.w	80269cc <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x394>
 8026b2c:	9c12      	ldr	r4, [sp, #72]	@ 0x48
 8026b2e:	b21b      	sxth	r3, r3
 8026b30:	b212      	sxth	r2, r2
 8026b32:	9502      	str	r5, [sp, #8]
 8026b34:	9301      	str	r3, [sp, #4]
 8026b36:	9200      	str	r2, [sp, #0]
 8026b38:	e9cd 0103 	strd	r0, r1, [sp, #12]
 8026b3c:	e9cd c405 	strd	ip, r4, [sp, #20]
 8026b40:	e9dd 230b 	ldrd	r2, r3, [sp, #44]	@ 0x2c
 8026b44:	4639      	mov	r1, r7
 8026b46:	9815      	ldr	r0, [sp, #84]	@ 0x54
 8026b48:	f7ff fbd0 	bl	80262ec <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh>
 8026b4c:	e73e      	b.n	80269cc <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x394>
 8026b4e:	9b29      	ldr	r3, [sp, #164]	@ 0xa4
 8026b50:	f3c3 3203 	ubfx	r2, r3, #12, #4
 8026b54:	9b2a      	ldr	r3, [sp, #168]	@ 0xa8
 8026b56:	f3c3 3503 	ubfx	r5, r3, #12, #4
 8026b5a:	9b30      	ldr	r3, [sp, #192]	@ 0xc0
 8026b5c:	fa1f fc82 	uxth.w	ip, r2
 8026b60:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 8026b64:	9b2a      	ldr	r3, [sp, #168]	@ 0xa8
 8026b66:	ea4f 100c 	mov.w	r0, ip, lsl #4
 8026b6a:	141f      	asrs	r7, r3, #16
 8026b6c:	9b29      	ldr	r3, [sp, #164]	@ 0xa4
 8026b6e:	141b      	asrs	r3, r3, #16
 8026b70:	fb01 3707 	mla	r7, r1, r7, r3
 8026b74:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8026b76:	eb03 0a07 	add.w	sl, r3, r7
 8026b7a:	f813 9007 	ldrb.w	r9, [r3, r7]
 8026b7e:	f5c0 7380 	rsb	r3, r0, #256	@ 0x100
 8026b82:	f89a 8001 	ldrb.w	r8, [sl, #1]
 8026b86:	b29b      	uxth	r3, r3
 8026b88:	2d00      	cmp	r5, #0
 8026b8a:	f000 813d 	beq.w	8026e08 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7d0>
 8026b8e:	f81a 4001 	ldrb.w	r4, [sl, r1]
 8026b92:	eb0a 0b01 	add.w	fp, sl, r1
 8026b96:	fa1f fa85 	uxth.w	sl, r5
 8026b9a:	940f      	str	r4, [sp, #60]	@ 0x3c
 8026b9c:	fb0a fc0c 	mul.w	ip, sl, ip
 8026ba0:	f89b 4001 	ldrb.w	r4, [fp, #1]
 8026ba4:	ebcc 1a0a 	rsb	sl, ip, sl, lsl #4
 8026ba8:	eba0 000c 	sub.w	r0, r0, ip
 8026bac:	9410      	str	r4, [sp, #64]	@ 0x40
 8026bae:	fa1f fa8a 	uxth.w	sl, sl
 8026bb2:	b280      	uxth	r0, r0
 8026bb4:	eba3 030a 	sub.w	r3, r3, sl
 8026bb8:	fb08 f000 	mul.w	r0, r8, r0
 8026bbc:	b29b      	uxth	r3, r3
 8026bbe:	fb09 0303 	mla	r3, r9, r3, r0
 8026bc2:	980f      	ldr	r0, [sp, #60]	@ 0x3c
 8026bc4:	fb0a 3300 	mla	r3, sl, r0, r3
 8026bc8:	fb0c 3304 	mla	r3, ip, r4, r3
 8026bcc:	f3c3 2307 	ubfx	r3, r3, #8, #8
 8026bd0:	2b00      	cmp	r3, #0
 8026bd2:	f000 810b 	beq.w	8026dec <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7b4>
 8026bd6:	980b      	ldr	r0, [sp, #44]	@ 0x2c
 8026bd8:	f1b9 0fff 	cmp.w	r9, #255	@ 0xff
 8026bdc:	9c0b      	ldr	r4, [sp, #44]	@ 0x2c
 8026bde:	eb00 0047 	add.w	r0, r0, r7, lsl #1
 8026be2:	f834 7017 	ldrh.w	r7, [r4, r7, lsl #1]
 8026be6:	f000 8114 	beq.w	8026e12 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7da>
 8026bea:	f427 6cfc 	bic.w	ip, r7, #2016	@ 0x7e0
 8026bee:	ea4f 0ae9 	mov.w	sl, r9, asr #3
 8026bf2:	f407 67fc 	and.w	r7, r7, #2016	@ 0x7e0
 8026bf6:	fb0a fc0c 	mul.w	ip, sl, ip
 8026bfa:	fb09 f707 	mul.w	r7, r9, r7
 8026bfe:	ea06 195c 	and.w	r9, r6, ip, lsr #5
 8026c02:	f60c 0c01 	addw	ip, ip, #2049	@ 0x801
 8026c06:	f107 0b20 	add.w	fp, r7, #32
 8026c0a:	44cc      	add	ip, r9
 8026c0c:	eb0b 2917 	add.w	r9, fp, r7, lsr #8
 8026c10:	ea06 1c5c 	and.w	ip, r6, ip, lsr #5
 8026c14:	ea4f 2919 	mov.w	r9, r9, lsr #8
 8026c18:	f409 69fc 	and.w	r9, r9, #2016	@ 0x7e0
 8026c1c:	ea4c 0909 	orr.w	r9, ip, r9
 8026c20:	f1b8 0fff 	cmp.w	r8, #255	@ 0xff
 8026c24:	8847      	ldrh	r7, [r0, #2]
 8026c26:	d019      	beq.n	8026c5c <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x624>
 8026c28:	f427 6cfc 	bic.w	ip, r7, #2016	@ 0x7e0
 8026c2c:	ea4f 0ae8 	mov.w	sl, r8, asr #3
 8026c30:	f407 67fc 	and.w	r7, r7, #2016	@ 0x7e0
 8026c34:	fb0a fc0c 	mul.w	ip, sl, ip
 8026c38:	fb08 f807 	mul.w	r8, r8, r7
 8026c3c:	ea06 175c 	and.w	r7, r6, ip, lsr #5
 8026c40:	f60c 0c01 	addw	ip, ip, #2049	@ 0x801
 8026c44:	f108 0b20 	add.w	fp, r8, #32
 8026c48:	44bc      	add	ip, r7
 8026c4a:	eb0b 2718 	add.w	r7, fp, r8, lsr #8
 8026c4e:	ea06 1c5c 	and.w	ip, r6, ip, lsr #5
 8026c52:	0a3f      	lsrs	r7, r7, #8
 8026c54:	f407 67fc 	and.w	r7, r7, #2016	@ 0x7e0
 8026c58:	ea4c 0707 	orr.w	r7, ip, r7
 8026c5c:	ea4f 4c09 	mov.w	ip, r9, lsl #16
 8026c60:	f429 69fc 	bic.w	r9, r9, #2016	@ 0x7e0
 8026c64:	ea4f 4a07 	mov.w	sl, r7, lsl #16
 8026c68:	f427 67fc 	bic.w	r7, r7, #2016	@ 0x7e0
 8026c6c:	f00c 6cfc 	and.w	ip, ip, #132120576	@ 0x7e00000
 8026c70:	f00a 6afc 	and.w	sl, sl, #132120576	@ 0x7e00000
 8026c74:	ea4c 0909 	orr.w	r9, ip, r9
 8026c78:	ea4a 0707 	orr.w	r7, sl, r7
 8026c7c:	2d00      	cmp	r5, #0
 8026c7e:	f000 80ca 	beq.w	8026e16 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7de>
 8026c82:	f101 4100 	add.w	r1, r1, #2147483648	@ 0x80000000
 8026c86:	3901      	subs	r1, #1
 8026c88:	0049      	lsls	r1, r1, #1
 8026c8a:	3102      	adds	r1, #2
 8026c8c:	eb00 0c01 	add.w	ip, r0, r1
 8026c90:	5a41      	ldrh	r1, [r0, r1]
 8026c92:	980f      	ldr	r0, [sp, #60]	@ 0x3c
 8026c94:	28ff      	cmp	r0, #255	@ 0xff
 8026c96:	d019      	beq.n	8026ccc <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x694>
 8026c98:	f421 60fc 	bic.w	r0, r1, #2016	@ 0x7e0
 8026c9c:	9c0f      	ldr	r4, [sp, #60]	@ 0x3c
 8026c9e:	f401 61fc 	and.w	r1, r1, #2016	@ 0x7e0
 8026ca2:	ea4f 08e4 	mov.w	r8, r4, asr #3
 8026ca6:	fb04 fa01 	mul.w	sl, r4, r1
 8026caa:	fb08 f800 	mul.w	r8, r8, r0
 8026cae:	f10a 0020 	add.w	r0, sl, #32
 8026cb2:	ea06 1158 	and.w	r1, r6, r8, lsr #5
 8026cb6:	f608 0801 	addw	r8, r8, #2049	@ 0x801
 8026cba:	eb00 201a 	add.w	r0, r0, sl, lsr #8
 8026cbe:	4441      	add	r1, r8
 8026cc0:	0a00      	lsrs	r0, r0, #8
 8026cc2:	ea06 1151 	and.w	r1, r6, r1, lsr #5
 8026cc6:	f400 60fc 	and.w	r0, r0, #2016	@ 0x7e0
 8026cca:	4301      	orrs	r1, r0
 8026ccc:	9c10      	ldr	r4, [sp, #64]	@ 0x40
 8026cce:	f8bc 0002 	ldrh.w	r0, [ip, #2]
 8026cd2:	2cff      	cmp	r4, #255	@ 0xff
 8026cd4:	d01a      	beq.n	8026d0c <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6d4>
 8026cd6:	f420 6cfc 	bic.w	ip, r0, #2016	@ 0x7e0
 8026cda:	f400 60fc 	and.w	r0, r0, #2016	@ 0x7e0
 8026cde:	ea4f 08e4 	mov.w	r8, r4, asr #3
 8026ce2:	fb04 fa00 	mul.w	sl, r4, r0
 8026ce6:	fb08 f80c 	mul.w	r8, r8, ip
 8026cea:	f10a 0c20 	add.w	ip, sl, #32
 8026cee:	ea06 1058 	and.w	r0, r6, r8, lsr #5
 8026cf2:	f608 0801 	addw	r8, r8, #2049	@ 0x801
 8026cf6:	eb0c 2c1a 	add.w	ip, ip, sl, lsr #8
 8026cfa:	4440      	add	r0, r8
 8026cfc:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 8026d00:	ea06 1050 	and.w	r0, r6, r0, lsr #5
 8026d04:	f40c 6cfc 	and.w	ip, ip, #2016	@ 0x7e0
 8026d08:	ea40 000c 	orr.w	r0, r0, ip
 8026d0c:	fb15 fc02 	smulbb	ip, r5, r2
 8026d10:	f1c5 0810 	rsb	r8, r5, #16
 8026d14:	ea4f 4a01 	mov.w	sl, r1, lsl #16
 8026d18:	f421 61fc 	bic.w	r1, r1, #2016	@ 0x7e0
 8026d1c:	ea4f 0cec 	mov.w	ip, ip, asr #3
 8026d20:	eba8 0802 	sub.w	r8, r8, r2
 8026d24:	ea4f 4b00 	mov.w	fp, r0, lsl #16
 8026d28:	f00a 6afc 	and.w	sl, sl, #132120576	@ 0x7e00000
 8026d2c:	ebcc 0242 	rsb	r2, ip, r2, lsl #1
 8026d30:	f420 60fc 	bic.w	r0, r0, #2016	@ 0x7e0
 8026d34:	eb0c 0848 	add.w	r8, ip, r8, lsl #1
 8026d38:	ea4a 0101 	orr.w	r1, sl, r1
 8026d3c:	437a      	muls	r2, r7
 8026d3e:	ebcc 0545 	rsb	r5, ip, r5, lsl #1
 8026d42:	f00b 6bfc 	and.w	fp, fp, #132120576	@ 0x7e00000
 8026d46:	fb09 2208 	mla	r2, r9, r8, r2
 8026d4a:	ea4b 0000 	orr.w	r0, fp, r0
 8026d4e:	fb05 2201 	mla	r2, r5, r1, r2
 8026d52:	fb0c 2200 	mla	r2, ip, r0, r2
 8026d56:	0d57      	lsrs	r7, r2, #21
 8026d58:	0952      	lsrs	r2, r2, #5
 8026d5a:	f407 67fc 	and.w	r7, r7, #2016	@ 0x7e0
 8026d5e:	f422 62fc 	bic.w	r2, r2, #2016	@ 0x7e0
 8026d62:	433a      	orrs	r2, r7
 8026d64:	2bff      	cmp	r3, #255	@ 0xff
 8026d66:	b292      	uxth	r2, r2
 8026d68:	d102      	bne.n	8026d70 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x738>
 8026d6a:	9912      	ldr	r1, [sp, #72]	@ 0x48
 8026d6c:	29ff      	cmp	r1, #255	@ 0xff
 8026d6e:	d063      	beq.n	8026e38 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x800>
 8026d70:	980a      	ldr	r0, [sp, #40]	@ 0x28
 8026d72:	1215      	asrs	r5, r2, #8
 8026d74:	f8be 1000 	ldrh.w	r1, [lr]
 8026d78:	4343      	muls	r3, r0
 8026d7a:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 8026d7c:	10cf      	asrs	r7, r1, #3
 8026d7e:	f005 05f8 	and.w	r5, r5, #248	@ 0xf8
 8026d82:	1c58      	adds	r0, r3, #1
 8026d84:	f007 07fc 	and.w	r7, r7, #252	@ 0xfc
 8026d88:	eb00 2323 	add.w	r3, r0, r3, asr #8
 8026d8c:	1208      	asrs	r0, r1, #8
 8026d8e:	ea6f 2323 	mvn.w	r3, r3, asr #8
 8026d92:	00c9      	lsls	r1, r1, #3
 8026d94:	f000 00f8 	and.w	r0, r0, #248	@ 0xf8
 8026d98:	b2db      	uxtb	r3, r3
 8026d9a:	b2c9      	uxtb	r1, r1
 8026d9c:	fb10 f003 	smulbb	r0, r0, r3
 8026da0:	fb11 f103 	smulbb	r1, r1, r3
 8026da4:	fb05 0504 	mla	r5, r5, r4, r0
 8026da8:	10d0      	asrs	r0, r2, #3
 8026daa:	fb17 f703 	smulbb	r7, r7, r3
 8026dae:	00d2      	lsls	r2, r2, #3
 8026db0:	b2ad      	uxth	r5, r5
 8026db2:	f000 00fc 	and.w	r0, r0, #252	@ 0xfc
 8026db6:	b2d2      	uxtb	r2, r2
 8026db8:	fb00 7004 	mla	r0, r0, r4, r7
 8026dbc:	1c6b      	adds	r3, r5, #1
 8026dbe:	fb02 1204 	mla	r2, r2, r4, r1
 8026dc2:	eb03 2515 	add.w	r5, r3, r5, lsr #8
 8026dc6:	b292      	uxth	r2, r2
 8026dc8:	b280      	uxth	r0, r0
 8026dca:	f405 4578 	and.w	r5, r5, #63488	@ 0xf800
 8026dce:	1c57      	adds	r7, r2, #1
 8026dd0:	eb07 2712 	add.w	r7, r7, r2, lsr #8
 8026dd4:	f3c7 27c4 	ubfx	r7, r7, #11, #5
 8026dd8:	433d      	orrs	r5, r7
 8026dda:	1c47      	adds	r7, r0, #1
 8026ddc:	eb07 2710 	add.w	r7, r7, r0, lsr #8
 8026de0:	097f      	lsrs	r7, r7, #5
 8026de2:	f407 67fc 	and.w	r7, r7, #2016	@ 0x7e0
 8026de6:	433d      	orrs	r5, r7
 8026de8:	f8ae 5000 	strh.w	r5, [lr]
 8026dec:	9b29      	ldr	r3, [sp, #164]	@ 0xa4
 8026dee:	f10e 0e02 	add.w	lr, lr, #2
 8026df2:	9a2b      	ldr	r2, [sp, #172]	@ 0xac
 8026df4:	4413      	add	r3, r2
 8026df6:	9a2a      	ldr	r2, [sp, #168]	@ 0xa8
 8026df8:	9329      	str	r3, [sp, #164]	@ 0xa4
 8026dfa:	9b2c      	ldr	r3, [sp, #176]	@ 0xb0
 8026dfc:	441a      	add	r2, r3
 8026dfe:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 8026e00:	3b01      	subs	r3, #1
 8026e02:	922a      	str	r2, [sp, #168]	@ 0xa8
 8026e04:	9313      	str	r3, [sp, #76]	@ 0x4c
 8026e06:	e61c      	b.n	8026a42 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x40a>
 8026e08:	fb08 f000 	mul.w	r0, r8, r0
 8026e0c:	fb09 0303 	mla	r3, r9, r3, r0
 8026e10:	e6dc      	b.n	8026bcc <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x594>
 8026e12:	46b9      	mov	r9, r7
 8026e14:	e704      	b.n	8026c20 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5e8>
 8026e16:	f1c2 0110 	rsb	r1, r2, #16
 8026e1a:	437a      	muls	r2, r7
 8026e1c:	fb09 2901 	mla	r9, r9, r1, r2
 8026e20:	ea4f 0949 	mov.w	r9, r9, lsl #1
 8026e24:	ea4f 5059 	mov.w	r0, r9, lsr #21
 8026e28:	ea4f 1259 	mov.w	r2, r9, lsr #5
 8026e2c:	f400 60fc 	and.w	r0, r0, #2016	@ 0x7e0
 8026e30:	f422 62fc 	bic.w	r2, r2, #2016	@ 0x7e0
 8026e34:	4302      	orrs	r2, r0
 8026e36:	e795      	b.n	8026d64 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x72c>
 8026e38:	f8ae 2000 	strh.w	r2, [lr]
 8026e3c:	e7d6      	b.n	8026dec <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7b4>
 8026e3e:	b017      	add	sp, #92	@ 0x5c
 8026e40:	ecbd 8b08 	vpop	{d8-d11}
 8026e44:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08026e48 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh>:
 8026e48:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8026e4c:	b085      	sub	sp, #20
 8026e4e:	e9dd 7510 	ldrd	r7, r5, [sp, #64]	@ 0x40
 8026e52:	f9bd 6038 	ldrsh.w	r6, [sp, #56]	@ 0x38
 8026e56:	9103      	str	r1, [sp, #12]
 8026e58:	2d00      	cmp	r5, #0
 8026e5a:	fb05 7106 	mla	r1, r5, r6, r7
 8026e5e:	f9bd 803c 	ldrsh.w	r8, [sp, #60]	@ 0x3c
 8026e62:	f89d 0048 	ldrb.w	r0, [sp, #72]	@ 0x48
 8026e66:	eb03 0441 	add.w	r4, r3, r1, lsl #1
 8026e6a:	f89d e04c 	ldrb.w	lr, [sp, #76]	@ 0x4c
 8026e6e:	eb02 0901 	add.w	r9, r2, r1
 8026e72:	9401      	str	r4, [sp, #4]
 8026e74:	f2c0 80c0 	blt.w	8026ff8 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x1b0>
 8026e78:	45a8      	cmp	r8, r5
 8026e7a:	f340 80bd 	ble.w	8026ff8 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x1b0>
 8026e7e:	2f00      	cmp	r7, #0
 8026e80:	f2c0 80b6 	blt.w	8026ff0 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x1a8>
 8026e84:	42be      	cmp	r6, r7
 8026e86:	f340 80b3 	ble.w	8026ff0 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x1a8>
 8026e8a:	f812 c001 	ldrb.w	ip, [r2, r1]
 8026e8e:	f833 1011 	ldrh.w	r1, [r3, r1, lsl #1]
 8026e92:	f1bc 0fff 	cmp.w	ip, #255	@ 0xff
 8026e96:	d019      	beq.n	8026ecc <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x84>
 8026e98:	f421 63fc 	bic.w	r3, r1, #2016	@ 0x7e0
 8026e9c:	ea4f 02ec 	mov.w	r2, ip, asr #3
 8026ea0:	435a      	muls	r2, r3
 8026ea2:	f401 63fc 	and.w	r3, r1, #2016	@ 0x7e0
 8026ea6:	f64f 011f 	movw	r1, #63519	@ 0xf81f
 8026eaa:	fb0c f403 	mul.w	r4, ip, r3
 8026eae:	ea01 1352 	and.w	r3, r1, r2, lsr #5
 8026eb2:	f602 0201 	addw	r2, r2, #2049	@ 0x801
 8026eb6:	441a      	add	r2, r3
 8026eb8:	f104 0320 	add.w	r3, r4, #32
 8026ebc:	eb03 2314 	add.w	r3, r3, r4, lsr #8
 8026ec0:	ea01 1152 	and.w	r1, r1, r2, lsr #5
 8026ec4:	0a1b      	lsrs	r3, r3, #8
 8026ec6:	f403 63fc 	and.w	r3, r3, #2016	@ 0x7e0
 8026eca:	4319      	orrs	r1, r3
 8026ecc:	b289      	uxth	r1, r1
 8026ece:	1c7b      	adds	r3, r7, #1
 8026ed0:	f100 8097 	bmi.w	8027002 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x1ba>
 8026ed4:	429e      	cmp	r6, r3
 8026ed6:	f340 8094 	ble.w	8027002 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x1ba>
 8026eda:	2800      	cmp	r0, #0
 8026edc:	f000 8094 	beq.w	8027008 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x1c0>
 8026ee0:	f899 4001 	ldrb.w	r4, [r9, #1]
 8026ee4:	9b01      	ldr	r3, [sp, #4]
 8026ee6:	2cff      	cmp	r4, #255	@ 0xff
 8026ee8:	885b      	ldrh	r3, [r3, #2]
 8026eea:	d01b      	beq.n	8026f24 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0xdc>
 8026eec:	f423 62fc 	bic.w	r2, r3, #2016	@ 0x7e0
 8026ef0:	ea4f 0ae4 	mov.w	sl, r4, asr #3
 8026ef4:	f403 63fc 	and.w	r3, r3, #2016	@ 0x7e0
 8026ef8:	f64f 0b1f 	movw	fp, #63519	@ 0xf81f
 8026efc:	fb0a f202 	mul.w	r2, sl, r2
 8026f00:	fb04 fa03 	mul.w	sl, r4, r3
 8026f04:	ea0b 1352 	and.w	r3, fp, r2, lsr #5
 8026f08:	f602 0201 	addw	r2, r2, #2049	@ 0x801
 8026f0c:	441a      	add	r2, r3
 8026f0e:	f10a 0320 	add.w	r3, sl, #32
 8026f12:	eb03 231a 	add.w	r3, r3, sl, lsr #8
 8026f16:	ea0b 1b52 	and.w	fp, fp, r2, lsr #5
 8026f1a:	0a1b      	lsrs	r3, r3, #8
 8026f1c:	f403 63fc 	and.w	r3, r3, #2016	@ 0x7e0
 8026f20:	ea4b 0303 	orr.w	r3, fp, r3
 8026f24:	b29b      	uxth	r3, r3
 8026f26:	3501      	adds	r5, #1
 8026f28:	d474      	bmi.n	8027014 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x1cc>
 8026f2a:	45a8      	cmp	r8, r5
 8026f2c:	dd72      	ble.n	8027014 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x1cc>
 8026f2e:	f1be 0f00 	cmp.w	lr, #0
 8026f32:	f000 8110 	beq.w	8027156 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x30e>
 8026f36:	2f00      	cmp	r7, #0
 8026f38:	db69      	blt.n	802700e <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x1c6>
 8026f3a:	42be      	cmp	r6, r7
 8026f3c:	dd67      	ble.n	802700e <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x1c6>
 8026f3e:	f819 5006 	ldrb.w	r5, [r9, r6]
 8026f42:	9a01      	ldr	r2, [sp, #4]
 8026f44:	2dff      	cmp	r5, #255	@ 0xff
 8026f46:	f832 b016 	ldrh.w	fp, [r2, r6, lsl #1]
 8026f4a:	d01c      	beq.n	8026f86 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x13e>
 8026f4c:	f42b 62fc 	bic.w	r2, fp, #2016	@ 0x7e0
 8026f50:	ea4f 08e5 	mov.w	r8, r5, asr #3
 8026f54:	f40b 6bfc 	and.w	fp, fp, #2016	@ 0x7e0
 8026f58:	fb08 f802 	mul.w	r8, r8, r2
 8026f5c:	fb05 fa0b 	mul.w	sl, r5, fp
 8026f60:	f64f 0b1f 	movw	fp, #63519	@ 0xf81f
 8026f64:	ea0b 1258 	and.w	r2, fp, r8, lsr #5
 8026f68:	f608 0801 	addw	r8, r8, #2049	@ 0x801
 8026f6c:	4490      	add	r8, r2
 8026f6e:	f10a 0220 	add.w	r2, sl, #32
 8026f72:	eb02 2a1a 	add.w	sl, r2, sl, lsr #8
 8026f76:	ea0b 1b58 	and.w	fp, fp, r8, lsr #5
 8026f7a:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 8026f7e:	f40a 6afc 	and.w	sl, sl, #2016	@ 0x7e0
 8026f82:	ea4b 0b0a 	orr.w	fp, fp, sl
 8026f86:	fa1f fb8b 	uxth.w	fp, fp
 8026f8a:	3701      	adds	r7, #1
 8026f8c:	d447      	bmi.n	802701e <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x1d6>
 8026f8e:	42be      	cmp	r6, r7
 8026f90:	dd45      	ble.n	802701e <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x1d6>
 8026f92:	2800      	cmp	r0, #0
 8026f94:	d046      	beq.n	8027024 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x1dc>
 8026f96:	3601      	adds	r6, #1
 8026f98:	9a01      	ldr	r2, [sp, #4]
 8026f9a:	f819 7006 	ldrb.w	r7, [r9, r6]
 8026f9e:	f832 2016 	ldrh.w	r2, [r2, r6, lsl #1]
 8026fa2:	2fff      	cmp	r7, #255	@ 0xff
 8026fa4:	d01a      	beq.n	8026fdc <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x194>
 8026fa6:	f422 66fc 	bic.w	r6, r2, #2016	@ 0x7e0
 8026faa:	ea4f 08e7 	mov.w	r8, r7, asr #3
 8026fae:	f402 62fc 	and.w	r2, r2, #2016	@ 0x7e0
 8026fb2:	fb08 f806 	mul.w	r8, r8, r6
 8026fb6:	fb07 f902 	mul.w	r9, r7, r2
 8026fba:	f64f 021f 	movw	r2, #63519	@ 0xf81f
 8026fbe:	ea02 1658 	and.w	r6, r2, r8, lsr #5
 8026fc2:	f608 0801 	addw	r8, r8, #2049	@ 0x801
 8026fc6:	44b0      	add	r8, r6
 8026fc8:	f109 0620 	add.w	r6, r9, #32
 8026fcc:	eb06 2619 	add.w	r6, r6, r9, lsr #8
 8026fd0:	ea02 1258 	and.w	r2, r2, r8, lsr #5
 8026fd4:	0a36      	lsrs	r6, r6, #8
 8026fd6:	f406 66fc 	and.w	r6, r6, #2016	@ 0x7e0
 8026fda:	4332      	orrs	r2, r6
 8026fdc:	b292      	uxth	r2, r2
 8026fde:	280f      	cmp	r0, #15
 8026fe0:	d922      	bls.n	8027028 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x1e0>
 8026fe2:	4b61      	ldr	r3, [pc, #388]	@ (8027168 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x320>)
 8026fe4:	f44f 71fb 	mov.w	r1, #502	@ 0x1f6
 8026fe8:	4a60      	ldr	r2, [pc, #384]	@ (802716c <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x324>)
 8026fea:	4861      	ldr	r0, [pc, #388]	@ (8027170 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x328>)
 8026fec:	f003 fca2 	bl	802a934 <__assert_func>
 8026ff0:	f04f 0c00 	mov.w	ip, #0
 8026ff4:	4661      	mov	r1, ip
 8026ff6:	e76a      	b.n	8026ece <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x86>
 8026ff8:	2400      	movs	r4, #0
 8026ffa:	46a4      	mov	ip, r4
 8026ffc:	4623      	mov	r3, r4
 8026ffe:	4621      	mov	r1, r4
 8027000:	e791      	b.n	8026f26 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0xde>
 8027002:	2400      	movs	r4, #0
 8027004:	4623      	mov	r3, r4
 8027006:	e78e      	b.n	8026f26 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0xde>
 8027008:	4604      	mov	r4, r0
 802700a:	4603      	mov	r3, r0
 802700c:	e78b      	b.n	8026f26 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0xde>
 802700e:	2500      	movs	r5, #0
 8027010:	46ab      	mov	fp, r5
 8027012:	e7ba      	b.n	8026f8a <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x142>
 8027014:	2700      	movs	r7, #0
 8027016:	463d      	mov	r5, r7
 8027018:	463a      	mov	r2, r7
 802701a:	46bb      	mov	fp, r7
 802701c:	e7df      	b.n	8026fde <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x196>
 802701e:	2700      	movs	r7, #0
 8027020:	463a      	mov	r2, r7
 8027022:	e7dc      	b.n	8026fde <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x196>
 8027024:	4607      	mov	r7, r0
 8027026:	4602      	mov	r2, r0
 8027028:	f1be 0f0f 	cmp.w	lr, #15
 802702c:	d8d9      	bhi.n	8026fe2 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x19a>
 802702e:	b286      	uxth	r6, r0
 8027030:	fa1f f98e 	uxth.w	r9, lr
 8027034:	ea4f 4a01 	mov.w	sl, r1, lsl #16
 8027038:	f421 61fc 	bic.w	r1, r1, #2016	@ 0x7e0
 802703c:	fb06 f809 	mul.w	r8, r6, r9
 8027040:	0136      	lsls	r6, r6, #4
 8027042:	f00a 6afc 	and.w	sl, sl, #132120576	@ 0x7e00000
 8027046:	ebc8 1909 	rsb	r9, r8, r9, lsl #4
 802704a:	9601      	str	r6, [sp, #4]
 802704c:	ea4a 0101 	orr.w	r1, sl, r1
 8027050:	ea4f 4a03 	mov.w	sl, r3, lsl #16
 8027054:	fa1f f689 	uxth.w	r6, r9
 8027058:	f423 63fc 	bic.w	r3, r3, #2016	@ 0x7e0
 802705c:	fb10 f90e 	smulbb	r9, r0, lr
 8027060:	f00a 6afc 	and.w	sl, sl, #132120576	@ 0x7e00000
 8027064:	9602      	str	r6, [sp, #8]
 8027066:	460e      	mov	r6, r1
 8027068:	ea4f 09e9 	mov.w	r9, r9, asr #3
 802706c:	f1ce 0110 	rsb	r1, lr, #16
 8027070:	ea4a 0303 	orr.w	r3, sl, r3
 8027074:	ea4f 4a02 	mov.w	sl, r2, lsl #16
 8027078:	1a09      	subs	r1, r1, r0
 802707a:	ebc9 0040 	rsb	r0, r9, r0, lsl #1
 802707e:	f00a 6afc 	and.w	sl, sl, #132120576	@ 0x7e00000
 8027082:	f422 62fc 	bic.w	r2, r2, #2016	@ 0x7e0
 8027086:	4343      	muls	r3, r0
 8027088:	eb09 0141 	add.w	r1, r9, r1, lsl #1
 802708c:	ea4a 0202 	orr.w	r2, sl, r2
 8027090:	9802      	ldr	r0, [sp, #8]
 8027092:	fb01 3106 	mla	r1, r1, r6, r3
 8027096:	ea4f 4a0b 	mov.w	sl, fp, lsl #16
 802709a:	f42b 6bfc 	bic.w	fp, fp, #2016	@ 0x7e0
 802709e:	ebc9 0e4e 	rsb	lr, r9, lr, lsl #1
 80270a2:	fb09 1302 	mla	r3, r9, r2, r1
 80270a6:	9a03      	ldr	r2, [sp, #12]
 80270a8:	f00a 6afc 	and.w	sl, sl, #132120576	@ 0x7e00000
 80270ac:	8811      	ldrh	r1, [r2, #0]
 80270ae:	9a01      	ldr	r2, [sp, #4]
 80270b0:	ea4a 0b0b 	orr.w	fp, sl, fp
 80270b4:	f5c2 7280 	rsb	r2, r2, #256	@ 0x100
 80270b8:	fb0e 3e0b 	mla	lr, lr, fp, r3
 80270bc:	1a12      	subs	r2, r2, r0
 80270be:	9801      	ldr	r0, [sp, #4]
 80270c0:	ea4f 535e 	mov.w	r3, lr, lsr #21
 80270c4:	eba0 0608 	sub.w	r6, r0, r8
 80270c8:	b292      	uxth	r2, r2
 80270ca:	ea4f 1e5e 	mov.w	lr, lr, lsr #5
 80270ce:	f403 63fc 	and.w	r3, r3, #2016	@ 0x7e0
 80270d2:	b2b6      	uxth	r6, r6
 80270d4:	10c8      	asrs	r0, r1, #3
 80270d6:	f42e 6efc 	bic.w	lr, lr, #2016	@ 0x7e0
 80270da:	4374      	muls	r4, r6
 80270dc:	ea43 0e0e 	orr.w	lr, r3, lr
 80270e0:	f000 00fc 	and.w	r0, r0, #252	@ 0xfc
 80270e4:	fb0c 4402 	mla	r4, ip, r2, r4
 80270e8:	9a02      	ldr	r2, [sp, #8]
 80270ea:	fa1f f38e 	uxth.w	r3, lr
 80270ee:	fb02 4505 	mla	r5, r2, r5, r4
 80270f2:	120a      	asrs	r2, r1, #8
 80270f4:	00c9      	lsls	r1, r1, #3
 80270f6:	fb08 5707 	mla	r7, r8, r7, r5
 80270fa:	f002 02f8 	and.w	r2, r2, #248	@ 0xf8
 80270fe:	b2c9      	uxtb	r1, r1
 8027100:	ea6f 2727 	mvn.w	r7, r7, asr #8
 8027104:	b2ff      	uxtb	r7, r7
 8027106:	437a      	muls	r2, r7
 8027108:	4378      	muls	r0, r7
 802710a:	434f      	muls	r7, r1
 802710c:	1c51      	adds	r1, r2, #1
 802710e:	eb01 2112 	add.w	r1, r1, r2, lsr #8
 8027112:	121a      	asrs	r2, r3, #8
 8027114:	f022 0207 	bic.w	r2, r2, #7
 8027118:	eb02 2211 	add.w	r2, r2, r1, lsr #8
 802711c:	1c41      	adds	r1, r0, #1
 802711e:	eb01 2010 	add.w	r0, r1, r0, lsr #8
 8027122:	10d9      	asrs	r1, r3, #3
 8027124:	0212      	lsls	r2, r2, #8
 8027126:	f021 0103 	bic.w	r1, r1, #3
 802712a:	00db      	lsls	r3, r3, #3
 802712c:	f402 4278 	and.w	r2, r2, #63488	@ 0xf800
 8027130:	eb01 2110 	add.w	r1, r1, r0, lsr #8
 8027134:	00c9      	lsls	r1, r1, #3
 8027136:	f401 61fc 	and.w	r1, r1, #2016	@ 0x7e0
 802713a:	430a      	orrs	r2, r1
 802713c:	1c79      	adds	r1, r7, #1
 802713e:	eb01 2717 	add.w	r7, r1, r7, lsr #8
 8027142:	eb03 2317 	add.w	r3, r3, r7, lsr #8
 8027146:	f3c3 03c4 	ubfx	r3, r3, #3, #5
 802714a:	4313      	orrs	r3, r2
 802714c:	9a03      	ldr	r2, [sp, #12]
 802714e:	8013      	strh	r3, [r2, #0]
 8027150:	b005      	add	sp, #20
 8027152:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8027156:	280f      	cmp	r0, #15
 8027158:	f63f af43 	bhi.w	8026fe2 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x19a>
 802715c:	4677      	mov	r7, lr
 802715e:	4675      	mov	r5, lr
 8027160:	4672      	mov	r2, lr
 8027162:	46f3      	mov	fp, lr
 8027164:	e763      	b.n	802702e <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x1e6>
 8027166:	bf00      	nop
 8027168:	0802fad5 	.word	0x0802fad5
 802716c:	080300a2 	.word	0x080300a2
 8027170:	0802fb59 	.word	0x0802fb59

08027174 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 8027174:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8027178:	ed2d 8b08 	vpush	{d8-d11}
 802717c:	b093      	sub	sp, #76	@ 0x4c
 802717e:	eeb0 aa40 	vmov.f32	s20, s0
 8027182:	eef0 9a60 	vmov.f32	s19, s1
 8027186:	9210      	str	r2, [sp, #64]	@ 0x40
 8027188:	eeb0 9a41 	vmov.f32	s18, s2
 802718c:	9a29      	ldr	r2, [sp, #164]	@ 0xa4
 802718e:	eeb0 8a62 	vmov.f32	s16, s5
 8027192:	9011      	str	r0, [sp, #68]	@ 0x44
 8027194:	eef0 8a43 	vmov.f32	s17, s6
 8027198:	6850      	ldr	r0, [r2, #4]
 802719a:	eef0 ba44 	vmov.f32	s23, s8
 802719e:	910e      	str	r1, [sp, #56]	@ 0x38
 80271a0:	eeb0 ba64 	vmov.f32	s22, s9
 80271a4:	9306      	str	r3, [sp, #24]
 80271a6:	eef0 aa45 	vmov.f32	s21, s10
 80271aa:	6812      	ldr	r2, [r2, #0]
 80271ac:	e9dd 132a 	ldrd	r1, r3, [sp, #168]	@ 0xa8
 80271b0:	fb00 1303 	mla	r3, r0, r3, r1
 80271b4:	eb02 0343 	add.w	r3, r2, r3, lsl #1
 80271b8:	9307      	str	r3, [sp, #28]
 80271ba:	9b2c      	ldr	r3, [sp, #176]	@ 0xb0
 80271bc:	681b      	ldr	r3, [r3, #0]
 80271be:	9308      	str	r3, [sp, #32]
 80271c0:	9b2c      	ldr	r3, [sp, #176]	@ 0xb0
 80271c2:	685b      	ldr	r3, [r3, #4]
 80271c4:	9309      	str	r3, [sp, #36]	@ 0x24
 80271c6:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80271c8:	2b00      	cmp	r3, #0
 80271ca:	dc03      	bgt.n	80271d4 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x60>
 80271cc:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 80271ce:	2b00      	cmp	r3, #0
 80271d0:	f340 83b6 	ble.w	8027940 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7cc>
 80271d4:	9b2c      	ldr	r3, [sp, #176]	@ 0xb0
 80271d6:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 80271da:	f9b3 200c 	ldrsh.w	r2, [r3, #12]
 80271de:	1e48      	subs	r0, r1, #1
 80271e0:	1e55      	subs	r5, r2, #1
 80271e2:	9b06      	ldr	r3, [sp, #24]
 80271e4:	2b00      	cmp	r3, #0
 80271e6:	f340 8165 	ble.w	80274b4 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x340>
 80271ea:	9e25      	ldr	r6, [sp, #148]	@ 0x94
 80271ec:	9b26      	ldr	r3, [sp, #152]	@ 0x98
 80271ee:	1436      	asrs	r6, r6, #16
 80271f0:	ea4f 4323 	mov.w	r3, r3, asr #16
 80271f4:	d406      	bmi.n	8027204 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x90>
 80271f6:	4286      	cmp	r6, r0
 80271f8:	da04      	bge.n	8027204 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x90>
 80271fa:	2b00      	cmp	r3, #0
 80271fc:	db02      	blt.n	8027204 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x90>
 80271fe:	42ab      	cmp	r3, r5
 8027200:	f2c0 8159 	blt.w	80274b6 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x342>
 8027204:	3601      	adds	r6, #1
 8027206:	f100 8146 	bmi.w	8027496 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x322>
 802720a:	42b1      	cmp	r1, r6
 802720c:	f2c0 8143 	blt.w	8027496 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x322>
 8027210:	3301      	adds	r3, #1
 8027212:	f100 8140 	bmi.w	8027496 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x322>
 8027216:	429a      	cmp	r2, r3
 8027218:	f2c0 813d 	blt.w	8027496 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x322>
 802721c:	9b06      	ldr	r3, [sp, #24]
 802721e:	f64f 061f 	movw	r6, #63519	@ 0xf81f
 8027222:	9f07      	ldr	r7, [sp, #28]
 8027224:	930f      	str	r3, [sp, #60]	@ 0x3c
 8027226:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8027228:	2b00      	cmp	r3, #0
 802722a:	f340 8166 	ble.w	80274fa <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x386>
 802722e:	9b26      	ldr	r3, [sp, #152]	@ 0x98
 8027230:	9d25      	ldr	r5, [sp, #148]	@ 0x94
 8027232:	1418      	asrs	r0, r3, #16
 8027234:	9b25      	ldr	r3, [sp, #148]	@ 0x94
 8027236:	142d      	asrs	r5, r5, #16
 8027238:	f3c3 3103 	ubfx	r1, r3, #12, #4
 802723c:	9b26      	ldr	r3, [sp, #152]	@ 0x98
 802723e:	f3c3 3c03 	ubfx	ip, r3, #12, #4
 8027242:	9b2c      	ldr	r3, [sp, #176]	@ 0xb0
 8027244:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 8027248:	f100 81f0 	bmi.w	802762c <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4b8>
 802724c:	f102 3eff 	add.w	lr, r2, #4294967295
 8027250:	4575      	cmp	r5, lr
 8027252:	f280 81eb 	bge.w	802762c <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4b8>
 8027256:	2800      	cmp	r0, #0
 8027258:	f2c0 81e8 	blt.w	802762c <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4b8>
 802725c:	f103 3eff 	add.w	lr, r3, #4294967295
 8027260:	4570      	cmp	r0, lr
 8027262:	f280 81e3 	bge.w	802762c <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4b8>
 8027266:	b212      	sxth	r2, r2
 8027268:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 802726a:	fa1f fe81 	uxth.w	lr, r1
 802726e:	fb00 5002 	mla	r0, r0, r2, r5
 8027272:	ea4f 150e 	mov.w	r5, lr, lsl #4
 8027276:	eb03 0a00 	add.w	sl, r3, r0
 802727a:	f813 9000 	ldrb.w	r9, [r3, r0]
 802727e:	f5c5 7380 	rsb	r3, r5, #256	@ 0x100
 8027282:	f89a 8001 	ldrb.w	r8, [sl, #1]
 8027286:	b29b      	uxth	r3, r3
 8027288:	f1bc 0f00 	cmp.w	ip, #0
 802728c:	f000 817b 	beq.w	8027586 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x412>
 8027290:	f81a 4002 	ldrb.w	r4, [sl, r2]
 8027294:	eb0a 0b02 	add.w	fp, sl, r2
 8027298:	fa1f fa8c 	uxth.w	sl, ip
 802729c:	940a      	str	r4, [sp, #40]	@ 0x28
 802729e:	fb0a fe0e 	mul.w	lr, sl, lr
 80272a2:	f89b 4001 	ldrb.w	r4, [fp, #1]
 80272a6:	ebce 1a0a 	rsb	sl, lr, sl, lsl #4
 80272aa:	eba5 050e 	sub.w	r5, r5, lr
 80272ae:	940b      	str	r4, [sp, #44]	@ 0x2c
 80272b0:	fa1f fa8a 	uxth.w	sl, sl
 80272b4:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 80272b6:	b2ad      	uxth	r5, r5
 80272b8:	eba3 030a 	sub.w	r3, r3, sl
 80272bc:	fb08 f505 	mul.w	r5, r8, r5
 80272c0:	b29b      	uxth	r3, r3
 80272c2:	fb09 5303 	mla	r3, r9, r3, r5
 80272c6:	fb0a 3304 	mla	r3, sl, r4, r3
 80272ca:	9c0b      	ldr	r4, [sp, #44]	@ 0x2c
 80272cc:	fb0e 3304 	mla	r3, lr, r4, r3
 80272d0:	f3c3 2307 	ubfx	r3, r3, #8, #8
 80272d4:	2b00      	cmp	r3, #0
 80272d6:	f000 80d1 	beq.w	802747c <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x308>
 80272da:	9c08      	ldr	r4, [sp, #32]
 80272dc:	f1b9 0fff 	cmp.w	r9, #255	@ 0xff
 80272e0:	eb04 0540 	add.w	r5, r4, r0, lsl #1
 80272e4:	f834 0010 	ldrh.w	r0, [r4, r0, lsl #1]
 80272e8:	f000 8152 	beq.w	8027590 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x41c>
 80272ec:	f420 6efc 	bic.w	lr, r0, #2016	@ 0x7e0
 80272f0:	ea4f 0ae9 	mov.w	sl, r9, asr #3
 80272f4:	f400 60fc 	and.w	r0, r0, #2016	@ 0x7e0
 80272f8:	fb0a fe0e 	mul.w	lr, sl, lr
 80272fc:	fb09 f000 	mul.w	r0, r9, r0
 8027300:	ea06 195e 	and.w	r9, r6, lr, lsr #5
 8027304:	f60e 0e01 	addw	lr, lr, #2049	@ 0x801
 8027308:	f100 0b20 	add.w	fp, r0, #32
 802730c:	44ce      	add	lr, r9
 802730e:	eb0b 2910 	add.w	r9, fp, r0, lsr #8
 8027312:	ea06 1e5e 	and.w	lr, r6, lr, lsr #5
 8027316:	ea4f 2919 	mov.w	r9, r9, lsr #8
 802731a:	f409 69fc 	and.w	r9, r9, #2016	@ 0x7e0
 802731e:	ea4e 0909 	orr.w	r9, lr, r9
 8027322:	f1b8 0fff 	cmp.w	r8, #255	@ 0xff
 8027326:	8868      	ldrh	r0, [r5, #2]
 8027328:	d019      	beq.n	802735e <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ea>
 802732a:	f420 6efc 	bic.w	lr, r0, #2016	@ 0x7e0
 802732e:	ea4f 0ae8 	mov.w	sl, r8, asr #3
 8027332:	f400 60fc 	and.w	r0, r0, #2016	@ 0x7e0
 8027336:	fb0a fe0e 	mul.w	lr, sl, lr
 802733a:	fb08 f800 	mul.w	r8, r8, r0
 802733e:	ea06 105e 	and.w	r0, r6, lr, lsr #5
 8027342:	f60e 0e01 	addw	lr, lr, #2049	@ 0x801
 8027346:	f108 0b20 	add.w	fp, r8, #32
 802734a:	4486      	add	lr, r0
 802734c:	eb0b 2018 	add.w	r0, fp, r8, lsr #8
 8027350:	ea06 1e5e 	and.w	lr, r6, lr, lsr #5
 8027354:	0a00      	lsrs	r0, r0, #8
 8027356:	f400 60fc 	and.w	r0, r0, #2016	@ 0x7e0
 802735a:	ea4e 0000 	orr.w	r0, lr, r0
 802735e:	ea4f 4e09 	mov.w	lr, r9, lsl #16
 8027362:	f429 69fc 	bic.w	r9, r9, #2016	@ 0x7e0
 8027366:	ea4f 4a00 	mov.w	sl, r0, lsl #16
 802736a:	f420 60fc 	bic.w	r0, r0, #2016	@ 0x7e0
 802736e:	f00e 6efc 	and.w	lr, lr, #132120576	@ 0x7e00000
 8027372:	f00a 6afc 	and.w	sl, sl, #132120576	@ 0x7e00000
 8027376:	ea4e 0909 	orr.w	r9, lr, r9
 802737a:	ea4a 0000 	orr.w	r0, sl, r0
 802737e:	f1bc 0f00 	cmp.w	ip, #0
 8027382:	f000 8107 	beq.w	8027594 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x420>
 8027386:	f102 4200 	add.w	r2, r2, #2147483648	@ 0x80000000
 802738a:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 802738c:	3a01      	subs	r2, #1
 802738e:	2cff      	cmp	r4, #255	@ 0xff
 8027390:	ea4f 0242 	mov.w	r2, r2, lsl #1
 8027394:	f102 0202 	add.w	r2, r2, #2
 8027398:	eb05 0e02 	add.w	lr, r5, r2
 802739c:	5aaa      	ldrh	r2, [r5, r2]
 802739e:	d018      	beq.n	80273d2 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x25e>
 80273a0:	f422 65fc 	bic.w	r5, r2, #2016	@ 0x7e0
 80273a4:	f402 62fc 	and.w	r2, r2, #2016	@ 0x7e0
 80273a8:	ea4f 08e4 	mov.w	r8, r4, asr #3
 80273ac:	fb04 fa02 	mul.w	sl, r4, r2
 80273b0:	fb08 f805 	mul.w	r8, r8, r5
 80273b4:	f10a 0520 	add.w	r5, sl, #32
 80273b8:	ea06 1258 	and.w	r2, r6, r8, lsr #5
 80273bc:	f608 0801 	addw	r8, r8, #2049	@ 0x801
 80273c0:	eb05 251a 	add.w	r5, r5, sl, lsr #8
 80273c4:	4442      	add	r2, r8
 80273c6:	0a2d      	lsrs	r5, r5, #8
 80273c8:	ea06 1252 	and.w	r2, r6, r2, lsr #5
 80273cc:	f405 65fc 	and.w	r5, r5, #2016	@ 0x7e0
 80273d0:	432a      	orrs	r2, r5
 80273d2:	9c0b      	ldr	r4, [sp, #44]	@ 0x2c
 80273d4:	f8be 5002 	ldrh.w	r5, [lr, #2]
 80273d8:	2cff      	cmp	r4, #255	@ 0xff
 80273da:	d01a      	beq.n	8027412 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x29e>
 80273dc:	f425 6efc 	bic.w	lr, r5, #2016	@ 0x7e0
 80273e0:	f405 65fc 	and.w	r5, r5, #2016	@ 0x7e0
 80273e4:	ea4f 08e4 	mov.w	r8, r4, asr #3
 80273e8:	fb04 fa05 	mul.w	sl, r4, r5
 80273ec:	fb08 f80e 	mul.w	r8, r8, lr
 80273f0:	f10a 0e20 	add.w	lr, sl, #32
 80273f4:	ea06 1558 	and.w	r5, r6, r8, lsr #5
 80273f8:	f608 0801 	addw	r8, r8, #2049	@ 0x801
 80273fc:	eb0e 2e1a 	add.w	lr, lr, sl, lsr #8
 8027400:	4445      	add	r5, r8
 8027402:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 8027406:	ea06 1555 	and.w	r5, r6, r5, lsr #5
 802740a:	f40e 6efc 	and.w	lr, lr, #2016	@ 0x7e0
 802740e:	ea45 050e 	orr.w	r5, r5, lr
 8027412:	fb1c fe01 	smulbb	lr, ip, r1
 8027416:	f1cc 0810 	rsb	r8, ip, #16
 802741a:	ea4f 4a02 	mov.w	sl, r2, lsl #16
 802741e:	f422 62fc 	bic.w	r2, r2, #2016	@ 0x7e0
 8027422:	ea4f 0eee 	mov.w	lr, lr, asr #3
 8027426:	eba8 0801 	sub.w	r8, r8, r1
 802742a:	ea4f 4b05 	mov.w	fp, r5, lsl #16
 802742e:	f00a 6afc 	and.w	sl, sl, #132120576	@ 0x7e00000
 8027432:	ebce 0141 	rsb	r1, lr, r1, lsl #1
 8027436:	f425 65fc 	bic.w	r5, r5, #2016	@ 0x7e0
 802743a:	eb0e 0848 	add.w	r8, lr, r8, lsl #1
 802743e:	ea4a 0202 	orr.w	r2, sl, r2
 8027442:	4341      	muls	r1, r0
 8027444:	ebce 0c4c 	rsb	ip, lr, ip, lsl #1
 8027448:	f00b 6bfc 	and.w	fp, fp, #132120576	@ 0x7e00000
 802744c:	fb09 1108 	mla	r1, r9, r8, r1
 8027450:	ea4b 0505 	orr.w	r5, fp, r5
 8027454:	fb0c 1102 	mla	r1, ip, r2, r1
 8027458:	fb0e 1e05 	mla	lr, lr, r5, r1
 802745c:	ea4f 525e 	mov.w	r2, lr, lsr #21
 8027460:	ea4f 1e5e 	mov.w	lr, lr, lsr #5
 8027464:	f402 62fc 	and.w	r2, r2, #2016	@ 0x7e0
 8027468:	f42e 6efc 	bic.w	lr, lr, #2016	@ 0x7e0
 802746c:	ea42 0e0e 	orr.w	lr, r2, lr
 8027470:	fa1f f28e 	uxth.w	r2, lr
 8027474:	2bff      	cmp	r3, #255	@ 0xff
 8027476:	f040 80a1 	bne.w	80275bc <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x448>
 802747a:	803a      	strh	r2, [r7, #0]
 802747c:	9b25      	ldr	r3, [sp, #148]	@ 0x94
 802747e:	3702      	adds	r7, #2
 8027480:	9a27      	ldr	r2, [sp, #156]	@ 0x9c
 8027482:	4413      	add	r3, r2
 8027484:	9a26      	ldr	r2, [sp, #152]	@ 0x98
 8027486:	9325      	str	r3, [sp, #148]	@ 0x94
 8027488:	9b28      	ldr	r3, [sp, #160]	@ 0xa0
 802748a:	441a      	add	r2, r3
 802748c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 802748e:	3b01      	subs	r3, #1
 8027490:	9226      	str	r2, [sp, #152]	@ 0x98
 8027492:	930f      	str	r3, [sp, #60]	@ 0x3c
 8027494:	e6c7      	b.n	8027226 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xb2>
 8027496:	9b25      	ldr	r3, [sp, #148]	@ 0x94
 8027498:	9e27      	ldr	r6, [sp, #156]	@ 0x9c
 802749a:	9c26      	ldr	r4, [sp, #152]	@ 0x98
 802749c:	4433      	add	r3, r6
 802749e:	9325      	str	r3, [sp, #148]	@ 0x94
 80274a0:	9b28      	ldr	r3, [sp, #160]	@ 0xa0
 80274a2:	441c      	add	r4, r3
 80274a4:	9b06      	ldr	r3, [sp, #24]
 80274a6:	3b01      	subs	r3, #1
 80274a8:	9426      	str	r4, [sp, #152]	@ 0x98
 80274aa:	9306      	str	r3, [sp, #24]
 80274ac:	9b07      	ldr	r3, [sp, #28]
 80274ae:	3302      	adds	r3, #2
 80274b0:	9307      	str	r3, [sp, #28]
 80274b2:	e696      	b.n	80271e2 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6e>
 80274b4:	d028      	beq.n	8027508 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x394>
 80274b6:	9b06      	ldr	r3, [sp, #24]
 80274b8:	9827      	ldr	r0, [sp, #156]	@ 0x9c
 80274ba:	3b01      	subs	r3, #1
 80274bc:	9d25      	ldr	r5, [sp, #148]	@ 0x94
 80274be:	fb00 5003 	mla	r0, r0, r3, r5
 80274c2:	1400      	asrs	r0, r0, #16
 80274c4:	f53f aeaa 	bmi.w	802721c <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa8>
 80274c8:	3901      	subs	r1, #1
 80274ca:	4288      	cmp	r0, r1
 80274cc:	f6bf aea6 	bge.w	802721c <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa8>
 80274d0:	9928      	ldr	r1, [sp, #160]	@ 0xa0
 80274d2:	9826      	ldr	r0, [sp, #152]	@ 0x98
 80274d4:	fb01 0303 	mla	r3, r1, r3, r0
 80274d8:	141b      	asrs	r3, r3, #16
 80274da:	f53f ae9f 	bmi.w	802721c <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa8>
 80274de:	3a01      	subs	r2, #1
 80274e0:	4293      	cmp	r3, r2
 80274e2:	f6bf ae9b 	bge.w	802721c <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa8>
 80274e6:	9b06      	ldr	r3, [sp, #24]
 80274e8:	f64f 061f 	movw	r6, #63519	@ 0xf81f
 80274ec:	f8dd e01c 	ldr.w	lr, [sp, #28]
 80274f0:	930f      	str	r3, [sp, #60]	@ 0x3c
 80274f2:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80274f4:	2b00      	cmp	r3, #0
 80274f6:	f300 80b6 	bgt.w	8027666 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4f2>
 80274fa:	9b06      	ldr	r3, [sp, #24]
 80274fc:	ea23 74e3 	bic.w	r4, r3, r3, asr #31
 8027500:	9b07      	ldr	r3, [sp, #28]
 8027502:	eb03 0344 	add.w	r3, r3, r4, lsl #1
 8027506:	9307      	str	r3, [sp, #28]
 8027508:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 802750a:	2b00      	cmp	r3, #0
 802750c:	f340 8218 	ble.w	8027940 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7cc>
 8027510:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8027514:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 8027516:	ee3a aa2b 	vadd.f32	s20, s20, s23
 802751a:	ee79 9a8b 	vadd.f32	s19, s19, s22
 802751e:	eef0 6a48 	vmov.f32	s13, s16
 8027522:	eec7 7a0a 	vdiv.f32	s15, s14, s20
 8027526:	ee39 9a2a 	vadd.f32	s18, s18, s21
 802752a:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 802752e:	edcd 6a25 	vstr	s13, [sp, #148]	@ 0x94
 8027532:	eef0 6a68 	vmov.f32	s13, s17
 8027536:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 802753a:	edcd 6a26 	vstr	s13, [sp, #152]	@ 0x98
 802753e:	ee29 7aa7 	vmul.f32	s14, s19, s15
 8027542:	ee69 7a27 	vmul.f32	s15, s18, s15
 8027546:	ee37 8a48 	vsub.f32	s16, s14, s16
 802754a:	ee77 8ae8 	vsub.f32	s17, s15, s17
 802754e:	eebe 8ac8 	vcvt.s32.f32	s16, s16, #16
 8027552:	eefe 8ac8 	vcvt.s32.f32	s17, s17, #16
 8027556:	ee18 2a10 	vmov	r2, s16
 802755a:	eeb0 8a47 	vmov.f32	s16, s14
 802755e:	fb92 f3f3 	sdiv	r3, r2, r3
 8027562:	ee18 2a90 	vmov	r2, s17
 8027566:	9327      	str	r3, [sp, #156]	@ 0x9c
 8027568:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 802756a:	eef0 8a67 	vmov.f32	s17, s15
 802756e:	fb92 f3f3 	sdiv	r3, r2, r3
 8027572:	9328      	str	r3, [sp, #160]	@ 0xa0
 8027574:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8027576:	9a10      	ldr	r2, [sp, #64]	@ 0x40
 8027578:	3b01      	subs	r3, #1
 802757a:	930e      	str	r3, [sp, #56]	@ 0x38
 802757c:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 802757e:	bf08      	it	eq
 8027580:	4613      	moveq	r3, r2
 8027582:	9306      	str	r3, [sp, #24]
 8027584:	e61f      	b.n	80271c6 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x52>
 8027586:	fb08 f505 	mul.w	r5, r8, r5
 802758a:	fb09 5303 	mla	r3, r9, r3, r5
 802758e:	e69f      	b.n	80272d0 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x15c>
 8027590:	4681      	mov	r9, r0
 8027592:	e6c6      	b.n	8027322 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ae>
 8027594:	f1c1 0210 	rsb	r2, r1, #16
 8027598:	4341      	muls	r1, r0
 802759a:	fb09 1902 	mla	r9, r9, r2, r1
 802759e:	ea4f 0949 	mov.w	r9, r9, lsl #1
 80275a2:	ea4f 5259 	mov.w	r2, r9, lsr #21
 80275a6:	ea4f 1959 	mov.w	r9, r9, lsr #5
 80275aa:	f402 62fc 	and.w	r2, r2, #2016	@ 0x7e0
 80275ae:	f429 69fc 	bic.w	r9, r9, #2016	@ 0x7e0
 80275b2:	ea42 0909 	orr.w	r9, r2, r9
 80275b6:	fa1f f289 	uxth.w	r2, r9
 80275ba:	e75b      	b.n	8027474 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x300>
 80275bc:	f8b7 c000 	ldrh.w	ip, [r7]
 80275c0:	43db      	mvns	r3, r3
 80275c2:	ea4f 202c 	mov.w	r0, ip, asr #8
 80275c6:	fa5f fe83 	uxtb.w	lr, r3
 80275ca:	f000 00f8 	and.w	r0, r0, #248	@ 0xf8
 80275ce:	ea4f 05ec 	mov.w	r5, ip, asr #3
 80275d2:	ea4f 03cc 	mov.w	r3, ip, lsl #3
 80275d6:	fb00 f00e 	mul.w	r0, r0, lr
 80275da:	f005 05fc 	and.w	r5, r5, #252	@ 0xfc
 80275de:	b2db      	uxtb	r3, r3
 80275e0:	1c41      	adds	r1, r0, #1
 80275e2:	fb05 f50e 	mul.w	r5, r5, lr
 80275e6:	fb03 f30e 	mul.w	r3, r3, lr
 80275ea:	eb01 2010 	add.w	r0, r1, r0, lsr #8
 80275ee:	1211      	asrs	r1, r2, #8
 80275f0:	f021 0107 	bic.w	r1, r1, #7
 80275f4:	eb01 2110 	add.w	r1, r1, r0, lsr #8
 80275f8:	48d4      	ldr	r0, [pc, #848]	@ (802794c <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7d8>)
 80275fa:	b2c9      	uxtb	r1, r1
 80275fc:	ea00 2001 	and.w	r0, r0, r1, lsl #8
 8027600:	1c69      	adds	r1, r5, #1
 8027602:	eb01 2515 	add.w	r5, r1, r5, lsr #8
 8027606:	10d1      	asrs	r1, r2, #3
 8027608:	00d2      	lsls	r2, r2, #3
 802760a:	f021 0103 	bic.w	r1, r1, #3
 802760e:	eb01 2115 	add.w	r1, r1, r5, lsr #8
 8027612:	00c9      	lsls	r1, r1, #3
 8027614:	f401 61fc 	and.w	r1, r1, #2016	@ 0x7e0
 8027618:	4301      	orrs	r1, r0
 802761a:	1c58      	adds	r0, r3, #1
 802761c:	eb00 2313 	add.w	r3, r0, r3, lsr #8
 8027620:	eb02 2213 	add.w	r2, r2, r3, lsr #8
 8027624:	f3c2 02c4 	ubfx	r2, r2, #3, #5
 8027628:	430a      	orrs	r2, r1
 802762a:	e726      	b.n	802747a <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x306>
 802762c:	f115 0e01 	adds.w	lr, r5, #1
 8027630:	f53f af24 	bmi.w	802747c <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x308>
 8027634:	4572      	cmp	r2, lr
 8027636:	f6ff af21 	blt.w	802747c <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x308>
 802763a:	f110 0e01 	adds.w	lr, r0, #1
 802763e:	f53f af1d 	bmi.w	802747c <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x308>
 8027642:	4573      	cmp	r3, lr
 8027644:	f6ff af1a 	blt.w	802747c <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x308>
 8027648:	b21b      	sxth	r3, r3
 802764a:	b212      	sxth	r2, r2
 802764c:	9301      	str	r3, [sp, #4]
 802764e:	9200      	str	r2, [sp, #0]
 8027650:	e9cd 1c04 	strd	r1, ip, [sp, #16]
 8027654:	e9cd 5002 	strd	r5, r0, [sp, #8]
 8027658:	e9dd 3208 	ldrd	r3, r2, [sp, #32]
 802765c:	4639      	mov	r1, r7
 802765e:	9811      	ldr	r0, [sp, #68]	@ 0x44
 8027660:	f7ff fbf2 	bl	8026e48 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh>
 8027664:	e70a      	b.n	802747c <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x308>
 8027666:	9b25      	ldr	r3, [sp, #148]	@ 0x94
 8027668:	f3c3 3203 	ubfx	r2, r3, #12, #4
 802766c:	9b26      	ldr	r3, [sp, #152]	@ 0x98
 802766e:	f3c3 3503 	ubfx	r5, r3, #12, #4
 8027672:	9b2c      	ldr	r3, [sp, #176]	@ 0xb0
 8027674:	fa1f fc82 	uxth.w	ip, r2
 8027678:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 802767c:	9b26      	ldr	r3, [sp, #152]	@ 0x98
 802767e:	ea4f 100c 	mov.w	r0, ip, lsl #4
 8027682:	141f      	asrs	r7, r3, #16
 8027684:	9b25      	ldr	r3, [sp, #148]	@ 0x94
 8027686:	141b      	asrs	r3, r3, #16
 8027688:	fb01 3707 	mla	r7, r1, r7, r3
 802768c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 802768e:	eb03 0a07 	add.w	sl, r3, r7
 8027692:	f813 9007 	ldrb.w	r9, [r3, r7]
 8027696:	f5c0 7380 	rsb	r3, r0, #256	@ 0x100
 802769a:	f89a 8001 	ldrb.w	r8, [sl, #1]
 802769e:	b29b      	uxth	r3, r3
 80276a0:	2d00      	cmp	r5, #0
 80276a2:	f000 80fe 	beq.w	80278a2 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x72e>
 80276a6:	f81a 4001 	ldrb.w	r4, [sl, r1]
 80276aa:	eb0a 0b01 	add.w	fp, sl, r1
 80276ae:	fa1f fa85 	uxth.w	sl, r5
 80276b2:	940c      	str	r4, [sp, #48]	@ 0x30
 80276b4:	fb0a fc0c 	mul.w	ip, sl, ip
 80276b8:	f89b 4001 	ldrb.w	r4, [fp, #1]
 80276bc:	ebcc 1a0a 	rsb	sl, ip, sl, lsl #4
 80276c0:	eba0 000c 	sub.w	r0, r0, ip
 80276c4:	940d      	str	r4, [sp, #52]	@ 0x34
 80276c6:	fa1f fa8a 	uxth.w	sl, sl
 80276ca:	b280      	uxth	r0, r0
 80276cc:	eba3 030a 	sub.w	r3, r3, sl
 80276d0:	fb08 f000 	mul.w	r0, r8, r0
 80276d4:	b29b      	uxth	r3, r3
 80276d6:	fb09 0303 	mla	r3, r9, r3, r0
 80276da:	980c      	ldr	r0, [sp, #48]	@ 0x30
 80276dc:	fb0a 3300 	mla	r3, sl, r0, r3
 80276e0:	fb0c 3304 	mla	r3, ip, r4, r3
 80276e4:	f3c3 2307 	ubfx	r3, r3, #8, #8
 80276e8:	2b00      	cmp	r3, #0
 80276ea:	f000 80cc 	beq.w	8027886 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x712>
 80276ee:	9808      	ldr	r0, [sp, #32]
 80276f0:	f1b9 0fff 	cmp.w	r9, #255	@ 0xff
 80276f4:	9c08      	ldr	r4, [sp, #32]
 80276f6:	eb00 0047 	add.w	r0, r0, r7, lsl #1
 80276fa:	f834 7017 	ldrh.w	r7, [r4, r7, lsl #1]
 80276fe:	f000 80d5 	beq.w	80278ac <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x738>
 8027702:	f427 6cfc 	bic.w	ip, r7, #2016	@ 0x7e0
 8027706:	ea4f 0ae9 	mov.w	sl, r9, asr #3
 802770a:	f407 67fc 	and.w	r7, r7, #2016	@ 0x7e0
 802770e:	fb0a fc0c 	mul.w	ip, sl, ip
 8027712:	fb09 f707 	mul.w	r7, r9, r7
 8027716:	ea06 195c 	and.w	r9, r6, ip, lsr #5
 802771a:	f60c 0c01 	addw	ip, ip, #2049	@ 0x801
 802771e:	f107 0b20 	add.w	fp, r7, #32
 8027722:	44cc      	add	ip, r9
 8027724:	eb0b 2917 	add.w	r9, fp, r7, lsr #8
 8027728:	ea06 1c5c 	and.w	ip, r6, ip, lsr #5
 802772c:	ea4f 2919 	mov.w	r9, r9, lsr #8
 8027730:	f409 69fc 	and.w	r9, r9, #2016	@ 0x7e0
 8027734:	ea4c 0909 	orr.w	r9, ip, r9
 8027738:	f1b8 0fff 	cmp.w	r8, #255	@ 0xff
 802773c:	8847      	ldrh	r7, [r0, #2]
 802773e:	d019      	beq.n	8027774 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x600>
 8027740:	f427 6cfc 	bic.w	ip, r7, #2016	@ 0x7e0
 8027744:	ea4f 0ae8 	mov.w	sl, r8, asr #3
 8027748:	f407 67fc 	and.w	r7, r7, #2016	@ 0x7e0
 802774c:	fb0a fc0c 	mul.w	ip, sl, ip
 8027750:	fb08 f807 	mul.w	r8, r8, r7
 8027754:	ea06 175c 	and.w	r7, r6, ip, lsr #5
 8027758:	f60c 0c01 	addw	ip, ip, #2049	@ 0x801
 802775c:	f108 0b20 	add.w	fp, r8, #32
 8027760:	44bc      	add	ip, r7
 8027762:	eb0b 2718 	add.w	r7, fp, r8, lsr #8
 8027766:	ea06 1c5c 	and.w	ip, r6, ip, lsr #5
 802776a:	0a3f      	lsrs	r7, r7, #8
 802776c:	f407 67fc 	and.w	r7, r7, #2016	@ 0x7e0
 8027770:	ea4c 0707 	orr.w	r7, ip, r7
 8027774:	ea4f 4c09 	mov.w	ip, r9, lsl #16
 8027778:	f429 69fc 	bic.w	r9, r9, #2016	@ 0x7e0
 802777c:	ea4f 4a07 	mov.w	sl, r7, lsl #16
 8027780:	f427 67fc 	bic.w	r7, r7, #2016	@ 0x7e0
 8027784:	f00c 6cfc 	and.w	ip, ip, #132120576	@ 0x7e00000
 8027788:	f00a 6afc 	and.w	sl, sl, #132120576	@ 0x7e00000
 802778c:	ea4c 0909 	orr.w	r9, ip, r9
 8027790:	ea4a 0707 	orr.w	r7, sl, r7
 8027794:	2d00      	cmp	r5, #0
 8027796:	f000 808b 	beq.w	80278b0 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x73c>
 802779a:	f101 4100 	add.w	r1, r1, #2147483648	@ 0x80000000
 802779e:	3901      	subs	r1, #1
 80277a0:	0049      	lsls	r1, r1, #1
 80277a2:	3102      	adds	r1, #2
 80277a4:	eb00 0c01 	add.w	ip, r0, r1
 80277a8:	5a41      	ldrh	r1, [r0, r1]
 80277aa:	980c      	ldr	r0, [sp, #48]	@ 0x30
 80277ac:	28ff      	cmp	r0, #255	@ 0xff
 80277ae:	d019      	beq.n	80277e4 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x670>
 80277b0:	f421 60fc 	bic.w	r0, r1, #2016	@ 0x7e0
 80277b4:	9c0c      	ldr	r4, [sp, #48]	@ 0x30
 80277b6:	f401 61fc 	and.w	r1, r1, #2016	@ 0x7e0
 80277ba:	ea4f 08e4 	mov.w	r8, r4, asr #3
 80277be:	fb04 fa01 	mul.w	sl, r4, r1
 80277c2:	fb08 f800 	mul.w	r8, r8, r0
 80277c6:	f10a 0020 	add.w	r0, sl, #32
 80277ca:	ea06 1158 	and.w	r1, r6, r8, lsr #5
 80277ce:	f608 0801 	addw	r8, r8, #2049	@ 0x801
 80277d2:	eb00 201a 	add.w	r0, r0, sl, lsr #8
 80277d6:	4441      	add	r1, r8
 80277d8:	0a00      	lsrs	r0, r0, #8
 80277da:	ea06 1151 	and.w	r1, r6, r1, lsr #5
 80277de:	f400 60fc 	and.w	r0, r0, #2016	@ 0x7e0
 80277e2:	4301      	orrs	r1, r0
 80277e4:	9c0d      	ldr	r4, [sp, #52]	@ 0x34
 80277e6:	f8bc 0002 	ldrh.w	r0, [ip, #2]
 80277ea:	2cff      	cmp	r4, #255	@ 0xff
 80277ec:	d01a      	beq.n	8027824 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6b0>
 80277ee:	f420 6cfc 	bic.w	ip, r0, #2016	@ 0x7e0
 80277f2:	f400 60fc 	and.w	r0, r0, #2016	@ 0x7e0
 80277f6:	ea4f 08e4 	mov.w	r8, r4, asr #3
 80277fa:	fb04 fa00 	mul.w	sl, r4, r0
 80277fe:	fb08 f80c 	mul.w	r8, r8, ip
 8027802:	f10a 0c20 	add.w	ip, sl, #32
 8027806:	ea06 1058 	and.w	r0, r6, r8, lsr #5
 802780a:	f608 0801 	addw	r8, r8, #2049	@ 0x801
 802780e:	eb0c 2c1a 	add.w	ip, ip, sl, lsr #8
 8027812:	4440      	add	r0, r8
 8027814:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 8027818:	ea06 1050 	and.w	r0, r6, r0, lsr #5
 802781c:	f40c 6cfc 	and.w	ip, ip, #2016	@ 0x7e0
 8027820:	ea40 000c 	orr.w	r0, r0, ip
 8027824:	fb15 fc02 	smulbb	ip, r5, r2
 8027828:	f1c5 0810 	rsb	r8, r5, #16
 802782c:	ea4f 4a01 	mov.w	sl, r1, lsl #16
 8027830:	f421 61fc 	bic.w	r1, r1, #2016	@ 0x7e0
 8027834:	ea4f 0cec 	mov.w	ip, ip, asr #3
 8027838:	eba8 0802 	sub.w	r8, r8, r2
 802783c:	ea4f 4b00 	mov.w	fp, r0, lsl #16
 8027840:	f00a 6afc 	and.w	sl, sl, #132120576	@ 0x7e00000
 8027844:	ebcc 0242 	rsb	r2, ip, r2, lsl #1
 8027848:	f420 60fc 	bic.w	r0, r0, #2016	@ 0x7e0
 802784c:	eb0c 0848 	add.w	r8, ip, r8, lsl #1
 8027850:	ea4a 0101 	orr.w	r1, sl, r1
 8027854:	437a      	muls	r2, r7
 8027856:	ebcc 0545 	rsb	r5, ip, r5, lsl #1
 802785a:	f00b 6bfc 	and.w	fp, fp, #132120576	@ 0x7e00000
 802785e:	fb09 2208 	mla	r2, r9, r8, r2
 8027862:	ea4b 0000 	orr.w	r0, fp, r0
 8027866:	fb05 2201 	mla	r2, r5, r1, r2
 802786a:	fb0c 2200 	mla	r2, ip, r0, r2
 802786e:	0d57      	lsrs	r7, r2, #21
 8027870:	0952      	lsrs	r2, r2, #5
 8027872:	f407 67fc 	and.w	r7, r7, #2016	@ 0x7e0
 8027876:	f422 62fc 	bic.w	r2, r2, #2016	@ 0x7e0
 802787a:	433a      	orrs	r2, r7
 802787c:	2bff      	cmp	r3, #255	@ 0xff
 802787e:	b292      	uxth	r2, r2
 8027880:	d127      	bne.n	80278d2 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x75e>
 8027882:	f8ae 2000 	strh.w	r2, [lr]
 8027886:	9b25      	ldr	r3, [sp, #148]	@ 0x94
 8027888:	f10e 0e02 	add.w	lr, lr, #2
 802788c:	9a27      	ldr	r2, [sp, #156]	@ 0x9c
 802788e:	4413      	add	r3, r2
 8027890:	9a26      	ldr	r2, [sp, #152]	@ 0x98
 8027892:	9325      	str	r3, [sp, #148]	@ 0x94
 8027894:	9b28      	ldr	r3, [sp, #160]	@ 0xa0
 8027896:	441a      	add	r2, r3
 8027898:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 802789a:	3b01      	subs	r3, #1
 802789c:	9226      	str	r2, [sp, #152]	@ 0x98
 802789e:	930f      	str	r3, [sp, #60]	@ 0x3c
 80278a0:	e627      	b.n	80274f2 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x37e>
 80278a2:	fb08 f000 	mul.w	r0, r8, r0
 80278a6:	fb09 0303 	mla	r3, r9, r3, r0
 80278aa:	e71b      	b.n	80276e4 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x570>
 80278ac:	46b9      	mov	r9, r7
 80278ae:	e743      	b.n	8027738 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5c4>
 80278b0:	f1c2 0110 	rsb	r1, r2, #16
 80278b4:	437a      	muls	r2, r7
 80278b6:	fb09 2901 	mla	r9, r9, r1, r2
 80278ba:	ea4f 0949 	mov.w	r9, r9, lsl #1
 80278be:	ea4f 5059 	mov.w	r0, r9, lsr #21
 80278c2:	ea4f 1259 	mov.w	r2, r9, lsr #5
 80278c6:	f400 60fc 	and.w	r0, r0, #2016	@ 0x7e0
 80278ca:	f422 62fc 	bic.w	r2, r2, #2016	@ 0x7e0
 80278ce:	4302      	orrs	r2, r0
 80278d0:	e7d4      	b.n	802787c <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x708>
 80278d2:	f8be 7000 	ldrh.w	r7, [lr]
 80278d6:	43db      	mvns	r3, r3
 80278d8:	4c1c      	ldr	r4, [pc, #112]	@ (802794c <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7d8>)
 80278da:	1238      	asrs	r0, r7, #8
 80278dc:	fa5f fc83 	uxtb.w	ip, r3
 80278e0:	f000 00f8 	and.w	r0, r0, #248	@ 0xf8
 80278e4:	10fd      	asrs	r5, r7, #3
 80278e6:	00fb      	lsls	r3, r7, #3
 80278e8:	fb00 f00c 	mul.w	r0, r0, ip
 80278ec:	f005 05fc 	and.w	r5, r5, #252	@ 0xfc
 80278f0:	b2db      	uxtb	r3, r3
 80278f2:	fb05 f10c 	mul.w	r1, r5, ip
 80278f6:	1c45      	adds	r5, r0, #1
 80278f8:	fb03 f30c 	mul.w	r3, r3, ip
 80278fc:	eb05 2010 	add.w	r0, r5, r0, lsr #8
 8027900:	1215      	asrs	r5, r2, #8
 8027902:	f025 0507 	bic.w	r5, r5, #7
 8027906:	eb05 2010 	add.w	r0, r5, r0, lsr #8
 802790a:	1c4d      	adds	r5, r1, #1
 802790c:	eb05 2511 	add.w	r5, r5, r1, lsr #8
 8027910:	10d1      	asrs	r1, r2, #3
 8027912:	b2c0      	uxtb	r0, r0
 8027914:	f021 0103 	bic.w	r1, r1, #3
 8027918:	00d2      	lsls	r2, r2, #3
 802791a:	ea04 2000 	and.w	r0, r4, r0, lsl #8
 802791e:	eb01 2115 	add.w	r1, r1, r5, lsr #8
 8027922:	00c9      	lsls	r1, r1, #3
 8027924:	f401 61fc 	and.w	r1, r1, #2016	@ 0x7e0
 8027928:	4308      	orrs	r0, r1
 802792a:	1c59      	adds	r1, r3, #1
 802792c:	eb01 2313 	add.w	r3, r1, r3, lsr #8
 8027930:	eb02 2313 	add.w	r3, r2, r3, lsr #8
 8027934:	f3c3 03c4 	ubfx	r3, r3, #3, #5
 8027938:	4318      	orrs	r0, r3
 802793a:	f8ae 0000 	strh.w	r0, [lr]
 802793e:	e7a2      	b.n	8027886 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x712>
 8027940:	b013      	add	sp, #76	@ 0x4c
 8027942:	ecbd 8b08 	vpop	{d8-d11}
 8027946:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 802794a:	bf00      	nop
 802794c:	fffff800 	.word	0xfffff800

08027950 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtssiihhh>:
 8027950:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8027954:	e9dd 4c09 	ldrd	r4, ip, [sp, #36]	@ 0x24
 8027958:	f9bd a020 	ldrsh.w	sl, [sp, #32]
 802795c:	fb0c 4e03 	mla	lr, ip, r3, r4
 8027960:	f1bc 0f00 	cmp.w	ip, #0
 8027964:	f89d 702c 	ldrb.w	r7, [sp, #44]	@ 0x2c
 8027968:	f89d 6030 	ldrb.w	r6, [sp, #48]	@ 0x30
 802796c:	eb02 084e 	add.w	r8, r2, lr, lsl #1
 8027970:	f89d 5034 	ldrb.w	r5, [sp, #52]	@ 0x34
 8027974:	8808      	ldrh	r0, [r1, #0]
 8027976:	db2f      	blt.n	80279d8 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtssiihhh+0x88>
 8027978:	45e2      	cmp	sl, ip
 802797a:	dd2d      	ble.n	80279d8 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtssiihhh+0x88>
 802797c:	2c00      	cmp	r4, #0
 802797e:	db29      	blt.n	80279d4 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtssiihhh+0x84>
 8027980:	42a3      	cmp	r3, r4
 8027982:	dd27      	ble.n	80279d4 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtssiihhh+0x84>
 8027984:	f832 901e 	ldrh.w	r9, [r2, lr, lsl #1]
 8027988:	1c62      	adds	r2, r4, #1
 802798a:	d428      	bmi.n	80279de <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtssiihhh+0x8e>
 802798c:	4293      	cmp	r3, r2
 802798e:	dd26      	ble.n	80279de <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtssiihhh+0x8e>
 8027990:	b32f      	cbz	r7, 80279de <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtssiihhh+0x8e>
 8027992:	f8b8 e002 	ldrh.w	lr, [r8, #2]
 8027996:	f11c 0c01 	adds.w	ip, ip, #1
 802799a:	d424      	bmi.n	80279e6 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtssiihhh+0x96>
 802799c:	45e2      	cmp	sl, ip
 802799e:	dd22      	ble.n	80279e6 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtssiihhh+0x96>
 80279a0:	2e00      	cmp	r6, #0
 80279a2:	f000 809d 	beq.w	8027ae0 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtssiihhh+0x190>
 80279a6:	2c00      	cmp	r4, #0
 80279a8:	db1b      	blt.n	80279e2 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtssiihhh+0x92>
 80279aa:	42a3      	cmp	r3, r4
 80279ac:	dd19      	ble.n	80279e2 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtssiihhh+0x92>
 80279ae:	f838 c013 	ldrh.w	ip, [r8, r3, lsl #1]
 80279b2:	3401      	adds	r4, #1
 80279b4:	d41a      	bmi.n	80279ec <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtssiihhh+0x9c>
 80279b6:	42a3      	cmp	r3, r4
 80279b8:	dd18      	ble.n	80279ec <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtssiihhh+0x9c>
 80279ba:	b1cf      	cbz	r7, 80279f0 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtssiihhh+0xa0>
 80279bc:	3301      	adds	r3, #1
 80279be:	f838 3013 	ldrh.w	r3, [r8, r3, lsl #1]
 80279c2:	2f0f      	cmp	r7, #15
 80279c4:	d915      	bls.n	80279f2 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtssiihhh+0xa2>
 80279c6:	4b49      	ldr	r3, [pc, #292]	@ (8027aec <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtssiihhh+0x19c>)
 80279c8:	f44f 71ec 	mov.w	r1, #472	@ 0x1d8
 80279cc:	4a48      	ldr	r2, [pc, #288]	@ (8027af0 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtssiihhh+0x1a0>)
 80279ce:	4849      	ldr	r0, [pc, #292]	@ (8027af4 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtssiihhh+0x1a4>)
 80279d0:	f002 ffb0 	bl	802a934 <__assert_func>
 80279d4:	4681      	mov	r9, r0
 80279d6:	e7d7      	b.n	8027988 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtssiihhh+0x38>
 80279d8:	4686      	mov	lr, r0
 80279da:	4681      	mov	r9, r0
 80279dc:	e7db      	b.n	8027996 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtssiihhh+0x46>
 80279de:	4686      	mov	lr, r0
 80279e0:	e7d9      	b.n	8027996 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtssiihhh+0x46>
 80279e2:	4684      	mov	ip, r0
 80279e4:	e7e5      	b.n	80279b2 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtssiihhh+0x62>
 80279e6:	4603      	mov	r3, r0
 80279e8:	4684      	mov	ip, r0
 80279ea:	e7ea      	b.n	80279c2 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtssiihhh+0x72>
 80279ec:	4603      	mov	r3, r0
 80279ee:	e7e8      	b.n	80279c2 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtssiihhh+0x72>
 80279f0:	4603      	mov	r3, r0
 80279f2:	2e0f      	cmp	r6, #15
 80279f4:	d8e7      	bhi.n	80279c6 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtssiihhh+0x76>
 80279f6:	fb17 f806 	smulbb	r8, r7, r6
 80279fa:	ea4f 4409 	mov.w	r4, r9, lsl #16
 80279fe:	ea4f 4a0e 	mov.w	sl, lr, lsl #16
 8027a02:	f429 69fc 	bic.w	r9, r9, #2016	@ 0x7e0
 8027a06:	f004 64fc 	and.w	r4, r4, #132120576	@ 0x7e00000
 8027a0a:	ea4f 08e8 	mov.w	r8, r8, asr #3
 8027a0e:	f00a 6afc 	and.w	sl, sl, #132120576	@ 0x7e00000
 8027a12:	f42e 6efc 	bic.w	lr, lr, #2016	@ 0x7e0
 8027a16:	ea44 0909 	orr.w	r9, r4, r9
 8027a1a:	f1c6 0410 	rsb	r4, r6, #16
 8027a1e:	041a      	lsls	r2, r3, #16
 8027a20:	ea4a 0e0e 	orr.w	lr, sl, lr
 8027a24:	1be4      	subs	r4, r4, r7
 8027a26:	ebc8 0747 	rsb	r7, r8, r7, lsl #1
 8027a2a:	f002 62fc 	and.w	r2, r2, #132120576	@ 0x7e00000
 8027a2e:	f423 63fc 	bic.w	r3, r3, #2016	@ 0x7e0
 8027a32:	fb07 fe0e 	mul.w	lr, r7, lr
 8027a36:	eb08 0444 	add.w	r4, r8, r4, lsl #1
 8027a3a:	4313      	orrs	r3, r2
 8027a3c:	ea4f 420c 	mov.w	r2, ip, lsl #16
 8027a40:	fb04 e409 	mla	r4, r4, r9, lr
 8027a44:	ebc8 0646 	rsb	r6, r8, r6, lsl #1
 8027a48:	f002 62fc 	and.w	r2, r2, #132120576	@ 0x7e00000
 8027a4c:	b2af      	uxth	r7, r5
 8027a4e:	fb08 4303 	mla	r3, r8, r3, r4
 8027a52:	f42c 64fc 	bic.w	r4, ip, #2016	@ 0x7e0
 8027a56:	43ed      	mvns	r5, r5
 8027a58:	4322      	orrs	r2, r4
 8027a5a:	b2ed      	uxtb	r5, r5
 8027a5c:	fb06 3202 	mla	r2, r6, r2, r3
 8027a60:	10c6      	asrs	r6, r0, #3
 8027a62:	0d53      	lsrs	r3, r2, #21
 8027a64:	f006 06fc 	and.w	r6, r6, #252	@ 0xfc
 8027a68:	0952      	lsrs	r2, r2, #5
 8027a6a:	fb16 f605 	smulbb	r6, r6, r5
 8027a6e:	f403 63fc 	and.w	r3, r3, #2016	@ 0x7e0
 8027a72:	f422 62fc 	bic.w	r2, r2, #2016	@ 0x7e0
 8027a76:	431a      	orrs	r2, r3
 8027a78:	b293      	uxth	r3, r2
 8027a7a:	1202      	asrs	r2, r0, #8
 8027a7c:	ea4f 2c23 	mov.w	ip, r3, asr #8
 8027a80:	f002 02f8 	and.w	r2, r2, #248	@ 0xf8
 8027a84:	00dc      	lsls	r4, r3, #3
 8027a86:	f00c 0cf8 	and.w	ip, ip, #248	@ 0xf8
 8027a8a:	fb12 f205 	smulbb	r2, r2, r5
 8027a8e:	b2e4      	uxtb	r4, r4
 8027a90:	fb0c 2c07 	mla	ip, ip, r7, r2
 8027a94:	10da      	asrs	r2, r3, #3
 8027a96:	00c3      	lsls	r3, r0, #3
 8027a98:	f002 02fc 	and.w	r2, r2, #252	@ 0xfc
 8027a9c:	fa1f fc8c 	uxth.w	ip, ip
 8027aa0:	b2db      	uxtb	r3, r3
 8027aa2:	fb02 6207 	mla	r2, r2, r7, r6
 8027aa6:	fb13 f305 	smulbb	r3, r3, r5
 8027aaa:	b296      	uxth	r6, r2
 8027aac:	fb04 3307 	mla	r3, r4, r7, r3
 8027ab0:	b29a      	uxth	r2, r3
 8027ab2:	f10c 0301 	add.w	r3, ip, #1
 8027ab6:	eb03 2c1c 	add.w	ip, r3, ip, lsr #8
 8027aba:	1c53      	adds	r3, r2, #1
 8027abc:	eb03 2312 	add.w	r3, r3, r2, lsr #8
 8027ac0:	1c72      	adds	r2, r6, #1
 8027ac2:	f40c 4c78 	and.w	ip, ip, #63488	@ 0xf800
 8027ac6:	eb02 2216 	add.w	r2, r2, r6, lsr #8
 8027aca:	f3c3 23c4 	ubfx	r3, r3, #11, #5
 8027ace:	0952      	lsrs	r2, r2, #5
 8027ad0:	ea43 030c 	orr.w	r3, r3, ip
 8027ad4:	f402 62fc 	and.w	r2, r2, #2016	@ 0x7e0
 8027ad8:	4313      	orrs	r3, r2
 8027ada:	800b      	strh	r3, [r1, #0]
 8027adc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8027ae0:	2f0f      	cmp	r7, #15
 8027ae2:	f63f af70 	bhi.w	80279c6 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtssiihhh+0x76>
 8027ae6:	4603      	mov	r3, r0
 8027ae8:	4684      	mov	ip, r0
 8027aea:	e784      	b.n	80279f6 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtssiihhh+0xa6>
 8027aec:	0802fad5 	.word	0x0802fad5
 8027af0:	0803014b 	.word	0x0803014b
 8027af4:	0802fb59 	.word	0x0802fb59

08027af8 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 8027af8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8027afc:	ed2d 8b08 	vpush	{d8-d11}
 8027b00:	b093      	sub	sp, #76	@ 0x4c
 8027b02:	461d      	mov	r5, r3
 8027b04:	eeb0 aa40 	vmov.f32	s20, s0
 8027b08:	9b29      	ldr	r3, [sp, #164]	@ 0xa4
 8027b0a:	eef0 9a60 	vmov.f32	s19, s1
 8027b0e:	9210      	str	r2, [sp, #64]	@ 0x40
 8027b10:	eeb0 9a41 	vmov.f32	s18, s2
 8027b14:	f89d 20b4 	ldrb.w	r2, [sp, #180]	@ 0xb4
 8027b18:	eeb0 8a62 	vmov.f32	s16, s5
 8027b1c:	910a      	str	r1, [sp, #40]	@ 0x28
 8027b1e:	eef0 8a43 	vmov.f32	s17, s6
 8027b22:	920b      	str	r2, [sp, #44]	@ 0x2c
 8027b24:	eef0 ba44 	vmov.f32	s23, s8
 8027b28:	6859      	ldr	r1, [r3, #4]
 8027b2a:	eeb0 ba64 	vmov.f32	s22, s9
 8027b2e:	681b      	ldr	r3, [r3, #0]
 8027b30:	eef0 aa45 	vmov.f32	s21, s10
 8027b34:	9011      	str	r0, [sp, #68]	@ 0x44
 8027b36:	e9dd 272a 	ldrd	r2, r7, [sp, #168]	@ 0xa8
 8027b3a:	e9dd 4625 	ldrd	r4, r6, [sp, #148]	@ 0x94
 8027b3e:	fb01 2707 	mla	r7, r1, r7, r2
 8027b42:	eb03 0347 	add.w	r3, r3, r7, lsl #1
 8027b46:	9307      	str	r3, [sp, #28]
 8027b48:	9b2c      	ldr	r3, [sp, #176]	@ 0xb0
 8027b4a:	681b      	ldr	r3, [r3, #0]
 8027b4c:	9309      	str	r3, [sp, #36]	@ 0x24
 8027b4e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8027b50:	43db      	mvns	r3, r3
 8027b52:	b2db      	uxtb	r3, r3
 8027b54:	9308      	str	r3, [sp, #32]
 8027b56:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8027b58:	2b00      	cmp	r3, #0
 8027b5a:	dc03      	bgt.n	8027b64 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6c>
 8027b5c:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8027b5e:	2b00      	cmp	r3, #0
 8027b60:	f340 8205 	ble.w	8027f6e <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x476>
 8027b64:	9b2c      	ldr	r3, [sp, #176]	@ 0xb0
 8027b66:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 8027b6a:	f9b3 200c 	ldrsh.w	r2, [r3, #12]
 8027b6e:	1e48      	subs	r0, r1, #1
 8027b70:	f102 3cff 	add.w	ip, r2, #4294967295
 8027b74:	2d00      	cmp	r5, #0
 8027b76:	f340 80da 	ble.w	8027d2e <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x236>
 8027b7a:	ea5f 4e24 	movs.w	lr, r4, asr #16
 8027b7e:	ea4f 4326 	mov.w	r3, r6, asr #16
 8027b82:	d406      	bmi.n	8027b92 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x9a>
 8027b84:	4586      	cmp	lr, r0
 8027b86:	da04      	bge.n	8027b92 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x9a>
 8027b88:	2b00      	cmp	r3, #0
 8027b8a:	db02      	blt.n	8027b92 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x9a>
 8027b8c:	4563      	cmp	r3, ip
 8027b8e:	f2c0 80cf 	blt.w	8027d30 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x238>
 8027b92:	f11e 0e01 	adds.w	lr, lr, #1
 8027b96:	f100 80c1 	bmi.w	8027d1c <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x224>
 8027b9a:	4571      	cmp	r1, lr
 8027b9c:	f2c0 80be 	blt.w	8027d1c <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x224>
 8027ba0:	3301      	adds	r3, #1
 8027ba2:	f100 80bb 	bmi.w	8027d1c <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x224>
 8027ba6:	429a      	cmp	r2, r3
 8027ba8:	f2c0 80b8 	blt.w	8027d1c <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x224>
 8027bac:	46a9      	mov	r9, r5
 8027bae:	f8dd 801c 	ldr.w	r8, [sp, #28]
 8027bb2:	f1b9 0f00 	cmp.w	r9, #0
 8027bb6:	f340 80d8 	ble.w	8027d6a <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x272>
 8027bba:	9b2c      	ldr	r3, [sp, #176]	@ 0xb0
 8027bbc:	1421      	asrs	r1, r4, #16
 8027bbe:	ea4f 4026 	mov.w	r0, r6, asr #16
 8027bc2:	f3c4 3203 	ubfx	r2, r4, #12, #4
 8027bc6:	f3c6 3c03 	ubfx	ip, r6, #12, #4
 8027bca:	e9d3 e302 	ldrd	lr, r3, [r3, #8]
 8027bce:	f100 8112 	bmi.w	8027df6 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2fe>
 8027bd2:	f10e 3aff 	add.w	sl, lr, #4294967295
 8027bd6:	4551      	cmp	r1, sl
 8027bd8:	f280 810d 	bge.w	8027df6 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2fe>
 8027bdc:	2800      	cmp	r0, #0
 8027bde:	f2c0 810a 	blt.w	8027df6 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2fe>
 8027be2:	f103 3aff 	add.w	sl, r3, #4294967295
 8027be6:	4550      	cmp	r0, sl
 8027be8:	f280 8105 	bge.w	8027df6 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2fe>
 8027bec:	fa0f f38e 	sxth.w	r3, lr
 8027bf0:	fb00 1103 	mla	r1, r0, r3, r1
 8027bf4:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8027bf6:	eb00 0a41 	add.w	sl, r0, r1, lsl #1
 8027bfa:	f830 e011 	ldrh.w	lr, [r0, r1, lsl #1]
 8027bfe:	f8ba 1002 	ldrh.w	r1, [sl, #2]
 8027c02:	f1bc 0f00 	cmp.w	ip, #0
 8027c06:	d007      	beq.n	8027c18 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x120>
 8027c08:	005b      	lsls	r3, r3, #1
 8027c0a:	eb0a 0003 	add.w	r0, sl, r3
 8027c0e:	f83a 3003 	ldrh.w	r3, [sl, r3]
 8027c12:	930c      	str	r3, [sp, #48]	@ 0x30
 8027c14:	8843      	ldrh	r3, [r0, #2]
 8027c16:	930d      	str	r3, [sp, #52]	@ 0x34
 8027c18:	ea4f 400e 	mov.w	r0, lr, lsl #16
 8027c1c:	f42e 6efc 	bic.w	lr, lr, #2016	@ 0x7e0
 8027c20:	fb12 f30c 	smulbb	r3, r2, ip
 8027c24:	ea4f 4a01 	mov.w	sl, r1, lsl #16
 8027c28:	f000 60fc 	and.w	r0, r0, #132120576	@ 0x7e00000
 8027c2c:	f421 61fc 	bic.w	r1, r1, #2016	@ 0x7e0
 8027c30:	10db      	asrs	r3, r3, #3
 8027c32:	f00a 6afc 	and.w	sl, sl, #132120576	@ 0x7e00000
 8027c36:	ea40 000e 	orr.w	r0, r0, lr
 8027c3a:	f1cc 0e10 	rsb	lr, ip, #16
 8027c3e:	ea4a 0101 	orr.w	r1, sl, r1
 8027c42:	9f08      	ldr	r7, [sp, #32]
 8027c44:	ebae 0e02 	sub.w	lr, lr, r2
 8027c48:	ebc3 0242 	rsb	r2, r3, r2, lsl #1
 8027c4c:	eb03 0e4e 	add.w	lr, r3, lr, lsl #1
 8027c50:	4351      	muls	r1, r2
 8027c52:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 8027c54:	fb0e 1e00 	mla	lr, lr, r0, r1
 8027c58:	990c      	ldr	r1, [sp, #48]	@ 0x30
 8027c5a:	0410      	lsls	r0, r2, #16
 8027c5c:	f422 62fc 	bic.w	r2, r2, #2016	@ 0x7e0
 8027c60:	f000 60fc 	and.w	r0, r0, #132120576	@ 0x7e00000
 8027c64:	4310      	orrs	r0, r2
 8027c66:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 8027c68:	0412      	lsls	r2, r2, #16
 8027c6a:	fb03 e000 	mla	r0, r3, r0, lr
 8027c6e:	f421 6efc 	bic.w	lr, r1, #2016	@ 0x7e0
 8027c72:	ebc3 034c 	rsb	r3, r3, ip, lsl #1
 8027c76:	f002 62fc 	and.w	r2, r2, #132120576	@ 0x7e00000
 8027c7a:	ea42 020e 	orr.w	r2, r2, lr
 8027c7e:	fb03 0302 	mla	r3, r3, r2, r0
 8027c82:	f8b8 0000 	ldrh.w	r0, [r8]
 8027c86:	0d5a      	lsrs	r2, r3, #21
 8027c88:	095b      	lsrs	r3, r3, #5
 8027c8a:	f402 62fc 	and.w	r2, r2, #2016	@ 0x7e0
 8027c8e:	1201      	asrs	r1, r0, #8
 8027c90:	f423 63fc 	bic.w	r3, r3, #2016	@ 0x7e0
 8027c94:	ea4f 0ee0 	mov.w	lr, r0, asr #3
 8027c98:	f001 01f8 	and.w	r1, r1, #248	@ 0xf8
 8027c9c:	00c0      	lsls	r0, r0, #3
 8027c9e:	4313      	orrs	r3, r2
 8027ca0:	f8bd 202c 	ldrh.w	r2, [sp, #44]	@ 0x2c
 8027ca4:	fb11 f107 	smulbb	r1, r1, r7
 8027ca8:	b2c0      	uxtb	r0, r0
 8027caa:	b29b      	uxth	r3, r3
 8027cac:	f00e 0efc 	and.w	lr, lr, #252	@ 0xfc
 8027cb0:	fb10 f007 	smulbb	r0, r0, r7
 8027cb4:	fb1e fe07 	smulbb	lr, lr, r7
 8027cb8:	ea4f 2c23 	mov.w	ip, r3, asr #8
 8027cbc:	f00c 0cf8 	and.w	ip, ip, #248	@ 0xf8
 8027cc0:	fb0c 1c02 	mla	ip, ip, r2, r1
 8027cc4:	10d9      	asrs	r1, r3, #3
 8027cc6:	00db      	lsls	r3, r3, #3
 8027cc8:	fa1f fc8c 	uxth.w	ip, ip
 8027ccc:	f001 01fc 	and.w	r1, r1, #252	@ 0xfc
 8027cd0:	b2db      	uxtb	r3, r3
 8027cd2:	fb01 e102 	mla	r1, r1, r2, lr
 8027cd6:	fb03 0302 	mla	r3, r3, r2, r0
 8027cda:	b289      	uxth	r1, r1
 8027cdc:	b29a      	uxth	r2, r3
 8027cde:	f10c 0301 	add.w	r3, ip, #1
 8027ce2:	eb03 2c1c 	add.w	ip, r3, ip, lsr #8
 8027ce6:	1c53      	adds	r3, r2, #1
 8027ce8:	eb03 2312 	add.w	r3, r3, r2, lsr #8
 8027cec:	1c4a      	adds	r2, r1, #1
 8027cee:	f40c 4c78 	and.w	ip, ip, #63488	@ 0xf800
 8027cf2:	eb02 2111 	add.w	r1, r2, r1, lsr #8
 8027cf6:	f3c3 23c4 	ubfx	r3, r3, #11, #5
 8027cfa:	0949      	lsrs	r1, r1, #5
 8027cfc:	ea43 030c 	orr.w	r3, r3, ip
 8027d00:	f401 61fc 	and.w	r1, r1, #2016	@ 0x7e0
 8027d04:	430b      	orrs	r3, r1
 8027d06:	f8a8 3000 	strh.w	r3, [r8]
 8027d0a:	9b27      	ldr	r3, [sp, #156]	@ 0x9c
 8027d0c:	f108 0802 	add.w	r8, r8, #2
 8027d10:	f109 39ff 	add.w	r9, r9, #4294967295
 8027d14:	441c      	add	r4, r3
 8027d16:	9b28      	ldr	r3, [sp, #160]	@ 0xa0
 8027d18:	441e      	add	r6, r3
 8027d1a:	e74a      	b.n	8027bb2 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xba>
 8027d1c:	9b27      	ldr	r3, [sp, #156]	@ 0x9c
 8027d1e:	3d01      	subs	r5, #1
 8027d20:	441c      	add	r4, r3
 8027d22:	9b28      	ldr	r3, [sp, #160]	@ 0xa0
 8027d24:	441e      	add	r6, r3
 8027d26:	9b07      	ldr	r3, [sp, #28]
 8027d28:	3302      	adds	r3, #2
 8027d2a:	9307      	str	r3, [sp, #28]
 8027d2c:	e722      	b.n	8027b74 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7c>
 8027d2e:	d022      	beq.n	8027d76 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x27e>
 8027d30:	1e6b      	subs	r3, r5, #1
 8027d32:	9827      	ldr	r0, [sp, #156]	@ 0x9c
 8027d34:	fb00 4003 	mla	r0, r0, r3, r4
 8027d38:	1400      	asrs	r0, r0, #16
 8027d3a:	f53f af37 	bmi.w	8027bac <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xb4>
 8027d3e:	3901      	subs	r1, #1
 8027d40:	4288      	cmp	r0, r1
 8027d42:	f6bf af33 	bge.w	8027bac <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xb4>
 8027d46:	9928      	ldr	r1, [sp, #160]	@ 0xa0
 8027d48:	fb01 6303 	mla	r3, r1, r3, r6
 8027d4c:	141b      	asrs	r3, r3, #16
 8027d4e:	f53f af2d 	bmi.w	8027bac <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xb4>
 8027d52:	3a01      	subs	r2, #1
 8027d54:	4293      	cmp	r3, r2
 8027d56:	f6bf af29 	bge.w	8027bac <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xb4>
 8027d5a:	46a8      	mov	r8, r5
 8027d5c:	f8dd 901c 	ldr.w	r9, [sp, #28]
 8027d60:	f8bd a02c 	ldrh.w	sl, [sp, #44]	@ 0x2c
 8027d64:	f1b8 0f00 	cmp.w	r8, #0
 8027d68:	dc60      	bgt.n	8027e2c <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x334>
 8027d6a:	9b07      	ldr	r3, [sp, #28]
 8027d6c:	ea25 75e5 	bic.w	r5, r5, r5, asr #31
 8027d70:	eb03 0345 	add.w	r3, r3, r5, lsl #1
 8027d74:	9307      	str	r3, [sp, #28]
 8027d76:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8027d78:	2b00      	cmp	r3, #0
 8027d7a:	f340 80f8 	ble.w	8027f6e <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x476>
 8027d7e:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8027d82:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 8027d84:	ee3a aa2b 	vadd.f32	s20, s20, s23
 8027d88:	ee79 9a8b 	vadd.f32	s19, s19, s22
 8027d8c:	eef0 6a48 	vmov.f32	s13, s16
 8027d90:	eec7 7a0a 	vdiv.f32	s15, s14, s20
 8027d94:	ee39 9a2a 	vadd.f32	s18, s18, s21
 8027d98:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 8027d9c:	ee16 4a90 	vmov	r4, s13
 8027da0:	eef0 6a68 	vmov.f32	s13, s17
 8027da4:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 8027da8:	ee16 6a90 	vmov	r6, s13
 8027dac:	ee29 7aa7 	vmul.f32	s14, s19, s15
 8027db0:	ee69 7a27 	vmul.f32	s15, s18, s15
 8027db4:	ee37 8a48 	vsub.f32	s16, s14, s16
 8027db8:	ee77 8ae8 	vsub.f32	s17, s15, s17
 8027dbc:	eebe 8ac8 	vcvt.s32.f32	s16, s16, #16
 8027dc0:	eefe 8ac8 	vcvt.s32.f32	s17, s17, #16
 8027dc4:	ee18 2a10 	vmov	r2, s16
 8027dc8:	eeb0 8a47 	vmov.f32	s16, s14
 8027dcc:	fb92 f3f3 	sdiv	r3, r2, r3
 8027dd0:	ee18 2a90 	vmov	r2, s17
 8027dd4:	9327      	str	r3, [sp, #156]	@ 0x9c
 8027dd6:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 8027dd8:	eef0 8a67 	vmov.f32	s17, s15
 8027ddc:	fb92 f3f3 	sdiv	r3, r2, r3
 8027de0:	9328      	str	r3, [sp, #160]	@ 0xa0
 8027de2:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8027de4:	9a10      	ldr	r2, [sp, #64]	@ 0x40
 8027de6:	3b01      	subs	r3, #1
 8027de8:	930a      	str	r3, [sp, #40]	@ 0x28
 8027dea:	bf08      	it	eq
 8027dec:	4615      	moveq	r5, r2
 8027dee:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 8027df0:	bf18      	it	ne
 8027df2:	461d      	movne	r5, r3
 8027df4:	e6af      	b.n	8027b56 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5e>
 8027df6:	f111 0a01 	adds.w	sl, r1, #1
 8027dfa:	d486      	bmi.n	8027d0a <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x212>
 8027dfc:	45d6      	cmp	lr, sl
 8027dfe:	db84      	blt.n	8027d0a <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x212>
 8027e00:	f110 0a01 	adds.w	sl, r0, #1
 8027e04:	d481      	bmi.n	8027d0a <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x212>
 8027e06:	4553      	cmp	r3, sl
 8027e08:	f6ff af7f 	blt.w	8027d0a <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x212>
 8027e0c:	9f0b      	ldr	r7, [sp, #44]	@ 0x2c
 8027e0e:	b21b      	sxth	r3, r3
 8027e10:	9101      	str	r1, [sp, #4]
 8027e12:	4641      	mov	r1, r8
 8027e14:	9300      	str	r3, [sp, #0]
 8027e16:	fa0f f38e 	sxth.w	r3, lr
 8027e1a:	e9cd 0202 	strd	r0, r2, [sp, #8]
 8027e1e:	e9cd c704 	strd	ip, r7, [sp, #16]
 8027e22:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8027e24:	9811      	ldr	r0, [sp, #68]	@ 0x44
 8027e26:	f7ff fd93 	bl	8027950 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtssiihhh>
 8027e2a:	e76e      	b.n	8027d0a <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x212>
 8027e2c:	9b2c      	ldr	r3, [sp, #176]	@ 0xb0
 8027e2e:	1430      	asrs	r0, r6, #16
 8027e30:	9f09      	ldr	r7, [sp, #36]	@ 0x24
 8027e32:	f3c6 3e03 	ubfx	lr, r6, #12, #4
 8027e36:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 8027e3a:	1423      	asrs	r3, r4, #16
 8027e3c:	f3c4 3203 	ubfx	r2, r4, #12, #4
 8027e40:	fb01 3000 	mla	r0, r1, r0, r3
 8027e44:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8027e46:	eb03 0340 	add.w	r3, r3, r0, lsl #1
 8027e4a:	f837 c010 	ldrh.w	ip, [r7, r0, lsl #1]
 8027e4e:	8858      	ldrh	r0, [r3, #2]
 8027e50:	f1be 0f00 	cmp.w	lr, #0
 8027e54:	d00b      	beq.n	8027e6e <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x376>
 8027e56:	f101 4100 	add.w	r1, r1, #2147483648	@ 0x80000000
 8027e5a:	3901      	subs	r1, #1
 8027e5c:	0049      	lsls	r1, r1, #1
 8027e5e:	3102      	adds	r1, #2
 8027e60:	eb03 0b01 	add.w	fp, r3, r1
 8027e64:	5a5b      	ldrh	r3, [r3, r1]
 8027e66:	930e      	str	r3, [sp, #56]	@ 0x38
 8027e68:	f8bb 3002 	ldrh.w	r3, [fp, #2]
 8027e6c:	930f      	str	r3, [sp, #60]	@ 0x3c
 8027e6e:	ea4f 410c 	mov.w	r1, ip, lsl #16
 8027e72:	f42c 6cfc 	bic.w	ip, ip, #2016	@ 0x7e0
 8027e76:	fb12 f30e 	smulbb	r3, r2, lr
 8027e7a:	ea4f 4b00 	mov.w	fp, r0, lsl #16
 8027e7e:	f001 61fc 	and.w	r1, r1, #132120576	@ 0x7e00000
 8027e82:	f420 60fc 	bic.w	r0, r0, #2016	@ 0x7e0
 8027e86:	10db      	asrs	r3, r3, #3
 8027e88:	f00b 6bfc 	and.w	fp, fp, #132120576	@ 0x7e00000
 8027e8c:	ea41 010c 	orr.w	r1, r1, ip
 8027e90:	f1ce 0c10 	rsb	ip, lr, #16
 8027e94:	ea4b 0000 	orr.w	r0, fp, r0
 8027e98:	9f08      	ldr	r7, [sp, #32]
 8027e9a:	ebac 0c02 	sub.w	ip, ip, r2
 8027e9e:	ebc3 0242 	rsb	r2, r3, r2, lsl #1
 8027ea2:	f108 38ff 	add.w	r8, r8, #4294967295
 8027ea6:	4350      	muls	r0, r2
 8027ea8:	eb03 0c4c 	add.w	ip, r3, ip, lsl #1
 8027eac:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 8027eae:	fb0c 0c01 	mla	ip, ip, r1, r0
 8027eb2:	980e      	ldr	r0, [sp, #56]	@ 0x38
 8027eb4:	ea4f 4b02 	mov.w	fp, r2, lsl #16
 8027eb8:	f422 61fc 	bic.w	r1, r2, #2016	@ 0x7e0
 8027ebc:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8027ebe:	f420 60fc 	bic.w	r0, r0, #2016	@ 0x7e0
 8027ec2:	f00b 6bfc 	and.w	fp, fp, #132120576	@ 0x7e00000
 8027ec6:	0412      	lsls	r2, r2, #16
 8027ec8:	ea4b 0101 	orr.w	r1, fp, r1
 8027ecc:	f002 62fc 	and.w	r2, r2, #132120576	@ 0x7e00000
 8027ed0:	fb03 c101 	mla	r1, r3, r1, ip
 8027ed4:	ebc3 034e 	rsb	r3, r3, lr, lsl #1
 8027ed8:	4302      	orrs	r2, r0
 8027eda:	fb03 1202 	mla	r2, r3, r2, r1
 8027ede:	ea4f 5b52 	mov.w	fp, r2, lsr #21
 8027ee2:	0952      	lsrs	r2, r2, #5
 8027ee4:	f40b 6bfc 	and.w	fp, fp, #2016	@ 0x7e0
 8027ee8:	f422 63fc 	bic.w	r3, r2, #2016	@ 0x7e0
 8027eec:	f8b9 2000 	ldrh.w	r2, [r9]
 8027ef0:	ea4b 0303 	orr.w	r3, fp, r3
 8027ef4:	1211      	asrs	r1, r2, #8
 8027ef6:	ea4f 0ce2 	mov.w	ip, r2, asr #3
 8027efa:	b29b      	uxth	r3, r3
 8027efc:	f001 01f8 	and.w	r1, r1, #248	@ 0xf8
 8027f00:	00d2      	lsls	r2, r2, #3
 8027f02:	f00c 0cfc 	and.w	ip, ip, #252	@ 0xfc
 8027f06:	fb11 f107 	smulbb	r1, r1, r7
 8027f0a:	1218      	asrs	r0, r3, #8
 8027f0c:	fb1c fc07 	smulbb	ip, ip, r7
 8027f10:	b2d2      	uxtb	r2, r2
 8027f12:	f000 00f8 	and.w	r0, r0, #248	@ 0xf8
 8027f16:	fb12 f207 	smulbb	r2, r2, r7
 8027f1a:	fb00 100a 	mla	r0, r0, sl, r1
 8027f1e:	10d9      	asrs	r1, r3, #3
 8027f20:	00db      	lsls	r3, r3, #3
 8027f22:	f001 01fc 	and.w	r1, r1, #252	@ 0xfc
 8027f26:	b280      	uxth	r0, r0
 8027f28:	b2db      	uxtb	r3, r3
 8027f2a:	fb01 c10a 	mla	r1, r1, sl, ip
 8027f2e:	fb03 230a 	mla	r3, r3, sl, r2
 8027f32:	1c42      	adds	r2, r0, #1
 8027f34:	b289      	uxth	r1, r1
 8027f36:	b29b      	uxth	r3, r3
 8027f38:	eb02 2010 	add.w	r0, r2, r0, lsr #8
 8027f3c:	f101 0c01 	add.w	ip, r1, #1
 8027f40:	1c5a      	adds	r2, r3, #1
 8027f42:	eb0c 2c11 	add.w	ip, ip, r1, lsr #8
 8027f46:	f400 4078 	and.w	r0, r0, #63488	@ 0xf800
 8027f4a:	eb02 2213 	add.w	r2, r2, r3, lsr #8
 8027f4e:	9b27      	ldr	r3, [sp, #156]	@ 0x9c
 8027f50:	ea4f 1c5c 	mov.w	ip, ip, lsr #5
 8027f54:	f3c2 22c4 	ubfx	r2, r2, #11, #5
 8027f58:	441c      	add	r4, r3
 8027f5a:	f40c 6cfc 	and.w	ip, ip, #2016	@ 0x7e0
 8027f5e:	9b28      	ldr	r3, [sp, #160]	@ 0xa0
 8027f60:	4310      	orrs	r0, r2
 8027f62:	441e      	add	r6, r3
 8027f64:	ea40 000c 	orr.w	r0, r0, ip
 8027f68:	f829 0b02 	strh.w	r0, [r9], #2
 8027f6c:	e6fa      	b.n	8027d64 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x26c>
 8027f6e:	b013      	add	sp, #76	@ 0x4c
 8027f70:	ecbd 8b08 	vpop	{d8-d11}
 8027f74:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08027f78 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtssiihh>:
 8027f78:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8027f7c:	e9dd 5607 	ldrd	r5, r6, [sp, #28]
 8027f80:	f9bd 8018 	ldrsh.w	r8, [sp, #24]
 8027f84:	fb06 5c03 	mla	ip, r6, r3, r5
 8027f88:	2e00      	cmp	r6, #0
 8027f8a:	f89d 4024 	ldrb.w	r4, [sp, #36]	@ 0x24
 8027f8e:	f89d 7028 	ldrb.w	r7, [sp, #40]	@ 0x28
 8027f92:	eb02 0e4c 	add.w	lr, r2, ip, lsl #1
 8027f96:	8808      	ldrh	r0, [r1, #0]
 8027f98:	db2e      	blt.n	8027ff8 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtssiihh+0x80>
 8027f9a:	45b0      	cmp	r8, r6
 8027f9c:	dd2c      	ble.n	8027ff8 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtssiihh+0x80>
 8027f9e:	2d00      	cmp	r5, #0
 8027fa0:	db28      	blt.n	8027ff4 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtssiihh+0x7c>
 8027fa2:	42ab      	cmp	r3, r5
 8027fa4:	dd26      	ble.n	8027ff4 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtssiihh+0x7c>
 8027fa6:	f832 c01c 	ldrh.w	ip, [r2, ip, lsl #1]
 8027faa:	1c6a      	adds	r2, r5, #1
 8027fac:	d427      	bmi.n	8027ffe <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtssiihh+0x86>
 8027fae:	4293      	cmp	r3, r2
 8027fb0:	dd25      	ble.n	8027ffe <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtssiihh+0x86>
 8027fb2:	b324      	cbz	r4, 8027ffe <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtssiihh+0x86>
 8027fb4:	f8be 2002 	ldrh.w	r2, [lr, #2]
 8027fb8:	3601      	adds	r6, #1
 8027fba:	d424      	bmi.n	8028006 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtssiihh+0x8e>
 8027fbc:	45b0      	cmp	r8, r6
 8027fbe:	dd22      	ble.n	8028006 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtssiihh+0x8e>
 8027fc0:	b31f      	cbz	r7, 802800a <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtssiihh+0x92>
 8027fc2:	2d00      	cmp	r5, #0
 8027fc4:	db1d      	blt.n	8028002 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtssiihh+0x8a>
 8027fc6:	42ab      	cmp	r3, r5
 8027fc8:	dd1b      	ble.n	8028002 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtssiihh+0x8a>
 8027fca:	f83e 6013 	ldrh.w	r6, [lr, r3, lsl #1]
 8027fce:	3501      	adds	r5, #1
 8027fd0:	d405      	bmi.n	8027fde <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtssiihh+0x66>
 8027fd2:	42ab      	cmp	r3, r5
 8027fd4:	dd03      	ble.n	8027fde <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtssiihh+0x66>
 8027fd6:	b124      	cbz	r4, 8027fe2 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtssiihh+0x6a>
 8027fd8:	3301      	adds	r3, #1
 8027fda:	f83e 0013 	ldrh.w	r0, [lr, r3, lsl #1]
 8027fde:	2c0f      	cmp	r4, #15
 8027fe0:	d801      	bhi.n	8027fe6 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtssiihh+0x6e>
 8027fe2:	2f0f      	cmp	r7, #15
 8027fe4:	d914      	bls.n	8028010 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtssiihh+0x98>
 8027fe6:	4b27      	ldr	r3, [pc, #156]	@ (8028084 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtssiihh+0x10c>)
 8027fe8:	f44f 71ec 	mov.w	r1, #472	@ 0x1d8
 8027fec:	4a26      	ldr	r2, [pc, #152]	@ (8028088 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtssiihh+0x110>)
 8027fee:	4827      	ldr	r0, [pc, #156]	@ (802808c <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtssiihh+0x114>)
 8027ff0:	f002 fca0 	bl	802a934 <__assert_func>
 8027ff4:	4684      	mov	ip, r0
 8027ff6:	e7d8      	b.n	8027faa <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtssiihh+0x32>
 8027ff8:	4602      	mov	r2, r0
 8027ffa:	4684      	mov	ip, r0
 8027ffc:	e7dc      	b.n	8027fb8 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtssiihh+0x40>
 8027ffe:	4602      	mov	r2, r0
 8028000:	e7da      	b.n	8027fb8 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtssiihh+0x40>
 8028002:	4606      	mov	r6, r0
 8028004:	e7e3      	b.n	8027fce <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtssiihh+0x56>
 8028006:	4606      	mov	r6, r0
 8028008:	e7e9      	b.n	8027fde <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtssiihh+0x66>
 802800a:	2c0f      	cmp	r4, #15
 802800c:	d8eb      	bhi.n	8027fe6 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtssiihh+0x6e>
 802800e:	4606      	mov	r6, r0
 8028010:	fb14 f307 	smulbb	r3, r4, r7
 8028014:	ea4f 450c 	mov.w	r5, ip, lsl #16
 8028018:	ea4f 4e02 	mov.w	lr, r2, lsl #16
 802801c:	f42c 6cfc 	bic.w	ip, ip, #2016	@ 0x7e0
 8028020:	f005 65fc 	and.w	r5, r5, #132120576	@ 0x7e00000
 8028024:	10db      	asrs	r3, r3, #3
 8028026:	f00e 6efc 	and.w	lr, lr, #132120576	@ 0x7e00000
 802802a:	f422 62fc 	bic.w	r2, r2, #2016	@ 0x7e0
 802802e:	ea45 0c0c 	orr.w	ip, r5, ip
 8028032:	f1c7 0510 	rsb	r5, r7, #16
 8028036:	ea4e 0202 	orr.w	r2, lr, r2
 802803a:	ebc3 0747 	rsb	r7, r3, r7, lsl #1
 802803e:	1b2d      	subs	r5, r5, r4
 8028040:	ebc3 0444 	rsb	r4, r3, r4, lsl #1
 8028044:	eb03 0545 	add.w	r5, r3, r5, lsl #1
 8028048:	4354      	muls	r4, r2
 802804a:	fb05 450c 	mla	r5, r5, ip, r4
 802804e:	0404      	lsls	r4, r0, #16
 8028050:	f420 60fc 	bic.w	r0, r0, #2016	@ 0x7e0
 8028054:	f004 64fc 	and.w	r4, r4, #132120576	@ 0x7e00000
 8028058:	4320      	orrs	r0, r4
 802805a:	fb03 5400 	mla	r4, r3, r0, r5
 802805e:	0430      	lsls	r0, r6, #16
 8028060:	f426 66fc 	bic.w	r6, r6, #2016	@ 0x7e0
 8028064:	f000 60fc 	and.w	r0, r0, #132120576	@ 0x7e00000
 8028068:	4330      	orrs	r0, r6
 802806a:	fb07 4000 	mla	r0, r7, r0, r4
 802806e:	0d43      	lsrs	r3, r0, #21
 8028070:	0940      	lsrs	r0, r0, #5
 8028072:	f403 63fc 	and.w	r3, r3, #2016	@ 0x7e0
 8028076:	f420 60fc 	bic.w	r0, r0, #2016	@ 0x7e0
 802807a:	4318      	orrs	r0, r3
 802807c:	8008      	strh	r0, [r1, #0]
 802807e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8028082:	bf00      	nop
 8028084:	0802fad5 	.word	0x0802fad5
 8028088:	0803014b 	.word	0x0803014b
 802808c:	0802fb59 	.word	0x0802fb59

08028090 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 8028090:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8028094:	ed2d 8b08 	vpush	{d8-d11}
 8028098:	b08f      	sub	sp, #60	@ 0x3c
 802809a:	461d      	mov	r5, r3
 802809c:	eeb0 aa40 	vmov.f32	s20, s0
 80280a0:	9b25      	ldr	r3, [sp, #148]	@ 0x94
 80280a2:	eef0 9a60 	vmov.f32	s19, s1
 80280a6:	9107      	str	r1, [sp, #28]
 80280a8:	eeb0 9a41 	vmov.f32	s18, s2
 80280ac:	6859      	ldr	r1, [r3, #4]
 80280ae:	eeb0 8a62 	vmov.f32	s16, s5
 80280b2:	920c      	str	r2, [sp, #48]	@ 0x30
 80280b4:	eef0 8a43 	vmov.f32	s17, s6
 80280b8:	681b      	ldr	r3, [r3, #0]
 80280ba:	eef0 ba44 	vmov.f32	s23, s8
 80280be:	eeb0 ba64 	vmov.f32	s22, s9
 80280c2:	900d      	str	r0, [sp, #52]	@ 0x34
 80280c4:	eef0 aa45 	vmov.f32	s21, s10
 80280c8:	e9dd 2726 	ldrd	r2, r7, [sp, #152]	@ 0x98
 80280cc:	e9dd 4621 	ldrd	r4, r6, [sp, #132]	@ 0x84
 80280d0:	fb01 2707 	mla	r7, r1, r7, r2
 80280d4:	eb03 0747 	add.w	r7, r3, r7, lsl #1
 80280d8:	9b28      	ldr	r3, [sp, #160]	@ 0xa0
 80280da:	f8d3 8000 	ldr.w	r8, [r3]
 80280de:	9b07      	ldr	r3, [sp, #28]
 80280e0:	2b00      	cmp	r3, #0
 80280e2:	dc03      	bgt.n	80280ec <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5c>
 80280e4:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 80280e6:	2b00      	cmp	r3, #0
 80280e8:	f340 8182 	ble.w	80283f0 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x360>
 80280ec:	9b28      	ldr	r3, [sp, #160]	@ 0xa0
 80280ee:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 80280f2:	f9b3 200c 	ldrsh.w	r2, [r3, #12]
 80280f6:	1e48      	subs	r0, r1, #1
 80280f8:	f102 3cff 	add.w	ip, r2, #4294967295
 80280fc:	2d00      	cmp	r5, #0
 80280fe:	f340 809b 	ble.w	8028238 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1a8>
 8028102:	ea5f 4e24 	movs.w	lr, r4, asr #16
 8028106:	ea4f 4326 	mov.w	r3, r6, asr #16
 802810a:	d406      	bmi.n	802811a <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8a>
 802810c:	4586      	cmp	lr, r0
 802810e:	da04      	bge.n	802811a <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8a>
 8028110:	2b00      	cmp	r3, #0
 8028112:	db02      	blt.n	802811a <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8a>
 8028114:	4563      	cmp	r3, ip
 8028116:	f2c0 8090 	blt.w	802823a <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1aa>
 802811a:	f11e 0e01 	adds.w	lr, lr, #1
 802811e:	f100 8084 	bmi.w	802822a <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x19a>
 8028122:	4571      	cmp	r1, lr
 8028124:	f2c0 8081 	blt.w	802822a <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x19a>
 8028128:	3301      	adds	r3, #1
 802812a:	d47e      	bmi.n	802822a <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x19a>
 802812c:	429a      	cmp	r2, r3
 802812e:	db7c      	blt.n	802822a <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x19a>
 8028130:	46aa      	mov	sl, r5
 8028132:	46b9      	mov	r9, r7
 8028134:	f1ba 0f00 	cmp.w	sl, #0
 8028138:	f340 8099 	ble.w	802826e <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1de>
 802813c:	9b28      	ldr	r3, [sp, #160]	@ 0xa0
 802813e:	1421      	asrs	r1, r4, #16
 8028140:	ea4f 4026 	mov.w	r0, r6, asr #16
 8028144:	f3c4 3203 	ubfx	r2, r4, #12, #4
 8028148:	f3c6 3c03 	ubfx	ip, r6, #12, #4
 802814c:	e9d3 e302 	ldrd	lr, r3, [r3, #8]
 8028150:	f100 80d1 	bmi.w	80282f6 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x266>
 8028154:	f10e 3bff 	add.w	fp, lr, #4294967295
 8028158:	4559      	cmp	r1, fp
 802815a:	f280 80cc 	bge.w	80282f6 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x266>
 802815e:	2800      	cmp	r0, #0
 8028160:	f2c0 80c9 	blt.w	80282f6 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x266>
 8028164:	f103 3bff 	add.w	fp, r3, #4294967295
 8028168:	4558      	cmp	r0, fp
 802816a:	f280 80c4 	bge.w	80282f6 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x266>
 802816e:	fa0f fe8e 	sxth.w	lr, lr
 8028172:	fb00 110e 	mla	r1, r0, lr, r1
 8028176:	eb08 0041 	add.w	r0, r8, r1, lsl #1
 802817a:	f838 b011 	ldrh.w	fp, [r8, r1, lsl #1]
 802817e:	8841      	ldrh	r1, [r0, #2]
 8028180:	f1bc 0f00 	cmp.w	ip, #0
 8028184:	d00b      	beq.n	802819e <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x10e>
 8028186:	f10e 4300 	add.w	r3, lr, #2147483648	@ 0x80000000
 802818a:	3b01      	subs	r3, #1
 802818c:	005b      	lsls	r3, r3, #1
 802818e:	3302      	adds	r3, #2
 8028190:	eb00 0e03 	add.w	lr, r0, r3
 8028194:	5ac3      	ldrh	r3, [r0, r3]
 8028196:	9308      	str	r3, [sp, #32]
 8028198:	f8be 3002 	ldrh.w	r3, [lr, #2]
 802819c:	9309      	str	r3, [sp, #36]	@ 0x24
 802819e:	ea4f 400b 	mov.w	r0, fp, lsl #16
 80281a2:	f42b 6bfc 	bic.w	fp, fp, #2016	@ 0x7e0
 80281a6:	fb12 f30c 	smulbb	r3, r2, ip
 80281aa:	f1cc 0e10 	rsb	lr, ip, #16
 80281ae:	f000 60fc 	and.w	r0, r0, #132120576	@ 0x7e00000
 80281b2:	10db      	asrs	r3, r3, #3
 80281b4:	ebae 0e02 	sub.w	lr, lr, r2
 80281b8:	ea40 000b 	orr.w	r0, r0, fp
 80281bc:	ea4f 4b01 	mov.w	fp, r1, lsl #16
 80281c0:	f421 61fc 	bic.w	r1, r1, #2016	@ 0x7e0
 80281c4:	ebc3 0242 	rsb	r2, r3, r2, lsl #1
 80281c8:	f00b 6bfc 	and.w	fp, fp, #132120576	@ 0x7e00000
 80281cc:	eb03 0e4e 	add.w	lr, r3, lr, lsl #1
 80281d0:	ea4b 0101 	orr.w	r1, fp, r1
 80281d4:	4351      	muls	r1, r2
 80281d6:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80281d8:	fb0e 1e00 	mla	lr, lr, r0, r1
 80281dc:	0410      	lsls	r0, r2, #16
 80281de:	f422 62fc 	bic.w	r2, r2, #2016	@ 0x7e0
 80281e2:	9908      	ldr	r1, [sp, #32]
 80281e4:	f000 60fc 	and.w	r0, r0, #132120576	@ 0x7e00000
 80281e8:	4310      	orrs	r0, r2
 80281ea:	9a08      	ldr	r2, [sp, #32]
 80281ec:	0412      	lsls	r2, r2, #16
 80281ee:	fb03 e000 	mla	r0, r3, r0, lr
 80281f2:	f421 6efc 	bic.w	lr, r1, #2016	@ 0x7e0
 80281f6:	ebc3 034c 	rsb	r3, r3, ip, lsl #1
 80281fa:	f002 62fc 	and.w	r2, r2, #132120576	@ 0x7e00000
 80281fe:	ea42 020e 	orr.w	r2, r2, lr
 8028202:	fb03 0302 	mla	r3, r3, r2, r0
 8028206:	0d5a      	lsrs	r2, r3, #21
 8028208:	095b      	lsrs	r3, r3, #5
 802820a:	f402 62fc 	and.w	r2, r2, #2016	@ 0x7e0
 802820e:	f423 63fc 	bic.w	r3, r3, #2016	@ 0x7e0
 8028212:	4313      	orrs	r3, r2
 8028214:	f8a9 3000 	strh.w	r3, [r9]
 8028218:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 802821a:	f109 0902 	add.w	r9, r9, #2
 802821e:	f10a 3aff 	add.w	sl, sl, #4294967295
 8028222:	441c      	add	r4, r3
 8028224:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 8028226:	441e      	add	r6, r3
 8028228:	e784      	b.n	8028134 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa4>
 802822a:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 802822c:	3d01      	subs	r5, #1
 802822e:	3702      	adds	r7, #2
 8028230:	441c      	add	r4, r3
 8028232:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 8028234:	441e      	add	r6, r3
 8028236:	e761      	b.n	80280fc <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6c>
 8028238:	d01d      	beq.n	8028276 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1e6>
 802823a:	1e6b      	subs	r3, r5, #1
 802823c:	9823      	ldr	r0, [sp, #140]	@ 0x8c
 802823e:	fb00 4003 	mla	r0, r0, r3, r4
 8028242:	1400      	asrs	r0, r0, #16
 8028244:	f53f af74 	bmi.w	8028130 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa0>
 8028248:	3901      	subs	r1, #1
 802824a:	4288      	cmp	r0, r1
 802824c:	f6bf af70 	bge.w	8028130 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa0>
 8028250:	9924      	ldr	r1, [sp, #144]	@ 0x90
 8028252:	fb01 6303 	mla	r3, r1, r3, r6
 8028256:	141b      	asrs	r3, r3, #16
 8028258:	f53f af6a 	bmi.w	8028130 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa0>
 802825c:	3a01      	subs	r2, #1
 802825e:	4293      	cmp	r3, r2
 8028260:	f6bf af66 	bge.w	8028130 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa0>
 8028264:	46a9      	mov	r9, r5
 8028266:	46ba      	mov	sl, r7
 8028268:	f1b9 0f00 	cmp.w	r9, #0
 802826c:	dc5b      	bgt.n	8028326 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x296>
 802826e:	ea25 75e5 	bic.w	r5, r5, r5, asr #31
 8028272:	eb07 0745 	add.w	r7, r7, r5, lsl #1
 8028276:	9b07      	ldr	r3, [sp, #28]
 8028278:	2b00      	cmp	r3, #0
 802827a:	f340 80b9 	ble.w	80283f0 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x360>
 802827e:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8028282:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 8028284:	ee3a aa2b 	vadd.f32	s20, s20, s23
 8028288:	ee79 9a8b 	vadd.f32	s19, s19, s22
 802828c:	eef0 6a48 	vmov.f32	s13, s16
 8028290:	eec7 7a0a 	vdiv.f32	s15, s14, s20
 8028294:	ee39 9a2a 	vadd.f32	s18, s18, s21
 8028298:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 802829c:	ee16 4a90 	vmov	r4, s13
 80282a0:	eef0 6a68 	vmov.f32	s13, s17
 80282a4:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 80282a8:	ee16 6a90 	vmov	r6, s13
 80282ac:	ee29 7aa7 	vmul.f32	s14, s19, s15
 80282b0:	ee69 7a27 	vmul.f32	s15, s18, s15
 80282b4:	ee37 8a48 	vsub.f32	s16, s14, s16
 80282b8:	ee77 8ae8 	vsub.f32	s17, s15, s17
 80282bc:	eebe 8ac8 	vcvt.s32.f32	s16, s16, #16
 80282c0:	eefe 8ac8 	vcvt.s32.f32	s17, s17, #16
 80282c4:	ee18 2a10 	vmov	r2, s16
 80282c8:	eeb0 8a47 	vmov.f32	s16, s14
 80282cc:	fb92 f3f3 	sdiv	r3, r2, r3
 80282d0:	ee18 2a90 	vmov	r2, s17
 80282d4:	9323      	str	r3, [sp, #140]	@ 0x8c
 80282d6:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 80282d8:	eef0 8a67 	vmov.f32	s17, s15
 80282dc:	fb92 f3f3 	sdiv	r3, r2, r3
 80282e0:	9324      	str	r3, [sp, #144]	@ 0x90
 80282e2:	9b07      	ldr	r3, [sp, #28]
 80282e4:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 80282e6:	3b01      	subs	r3, #1
 80282e8:	9307      	str	r3, [sp, #28]
 80282ea:	bf08      	it	eq
 80282ec:	4615      	moveq	r5, r2
 80282ee:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 80282f0:	bf18      	it	ne
 80282f2:	461d      	movne	r5, r3
 80282f4:	e6f3      	b.n	80280de <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4e>
 80282f6:	f111 0b01 	adds.w	fp, r1, #1
 80282fa:	d48d      	bmi.n	8028218 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x188>
 80282fc:	45de      	cmp	lr, fp
 80282fe:	db8b      	blt.n	8028218 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x188>
 8028300:	f110 0b01 	adds.w	fp, r0, #1
 8028304:	d488      	bmi.n	8028218 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x188>
 8028306:	455b      	cmp	r3, fp
 8028308:	db86      	blt.n	8028218 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x188>
 802830a:	b21b      	sxth	r3, r3
 802830c:	e9cd 1001 	strd	r1, r0, [sp, #4]
 8028310:	e9cd 2c03 	strd	r2, ip, [sp, #12]
 8028314:	9300      	str	r3, [sp, #0]
 8028316:	4642      	mov	r2, r8
 8028318:	fa0f f38e 	sxth.w	r3, lr
 802831c:	4649      	mov	r1, r9
 802831e:	980d      	ldr	r0, [sp, #52]	@ 0x34
 8028320:	f7ff fe2a 	bl	8027f78 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtssiihh>
 8028324:	e778      	b.n	8028218 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x188>
 8028326:	9b28      	ldr	r3, [sp, #160]	@ 0xa0
 8028328:	1420      	asrs	r0, r4, #16
 802832a:	1431      	asrs	r1, r6, #16
 802832c:	f3c6 3e03 	ubfx	lr, r6, #12, #4
 8028330:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8028334:	f3c4 3203 	ubfx	r2, r4, #12, #4
 8028338:	fb03 0101 	mla	r1, r3, r1, r0
 802833c:	eb08 0041 	add.w	r0, r8, r1, lsl #1
 8028340:	f838 c011 	ldrh.w	ip, [r8, r1, lsl #1]
 8028344:	8841      	ldrh	r1, [r0, #2]
 8028346:	f1be 0f00 	cmp.w	lr, #0
 802834a:	d00b      	beq.n	8028364 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2d4>
 802834c:	f103 4300 	add.w	r3, r3, #2147483648	@ 0x80000000
 8028350:	3b01      	subs	r3, #1
 8028352:	005b      	lsls	r3, r3, #1
 8028354:	3302      	adds	r3, #2
 8028356:	eb00 0b03 	add.w	fp, r0, r3
 802835a:	5ac3      	ldrh	r3, [r0, r3]
 802835c:	930a      	str	r3, [sp, #40]	@ 0x28
 802835e:	f8bb 3002 	ldrh.w	r3, [fp, #2]
 8028362:	930b      	str	r3, [sp, #44]	@ 0x2c
 8028364:	ea4f 400c 	mov.w	r0, ip, lsl #16
 8028368:	f42c 6cfc 	bic.w	ip, ip, #2016	@ 0x7e0
 802836c:	fb12 f30e 	smulbb	r3, r2, lr
 8028370:	ea4f 4b01 	mov.w	fp, r1, lsl #16
 8028374:	f000 60fc 	and.w	r0, r0, #132120576	@ 0x7e00000
 8028378:	f421 61fc 	bic.w	r1, r1, #2016	@ 0x7e0
 802837c:	10db      	asrs	r3, r3, #3
 802837e:	f00b 6bfc 	and.w	fp, fp, #132120576	@ 0x7e00000
 8028382:	ea40 000c 	orr.w	r0, r0, ip
 8028386:	f1ce 0c10 	rsb	ip, lr, #16
 802838a:	ea4b 0101 	orr.w	r1, fp, r1
 802838e:	f109 39ff 	add.w	r9, r9, #4294967295
 8028392:	ebac 0c02 	sub.w	ip, ip, r2
 8028396:	ebc3 0242 	rsb	r2, r3, r2, lsl #1
 802839a:	eb03 0c4c 	add.w	ip, r3, ip, lsl #1
 802839e:	4351      	muls	r1, r2
 80283a0:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 80283a2:	fb0c 1c00 	mla	ip, ip, r0, r1
 80283a6:	990a      	ldr	r1, [sp, #40]	@ 0x28
 80283a8:	ea4f 4b02 	mov.w	fp, r2, lsl #16
 80283ac:	f422 60fc 	bic.w	r0, r2, #2016	@ 0x7e0
 80283b0:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 80283b2:	f00b 6bfc 	and.w	fp, fp, #132120576	@ 0x7e00000
 80283b6:	0412      	lsls	r2, r2, #16
 80283b8:	ea4b 0000 	orr.w	r0, fp, r0
 80283bc:	f421 6bfc 	bic.w	fp, r1, #2016	@ 0x7e0
 80283c0:	f002 62fc 	and.w	r2, r2, #132120576	@ 0x7e00000
 80283c4:	fb03 c000 	mla	r0, r3, r0, ip
 80283c8:	ebc3 034e 	rsb	r3, r3, lr, lsl #1
 80283cc:	ea42 0b0b 	orr.w	fp, r2, fp
 80283d0:	fb03 000b 	mla	r0, r3, fp, r0
 80283d4:	0d43      	lsrs	r3, r0, #21
 80283d6:	0940      	lsrs	r0, r0, #5
 80283d8:	f403 63fc 	and.w	r3, r3, #2016	@ 0x7e0
 80283dc:	f420 60fc 	bic.w	r0, r0, #2016	@ 0x7e0
 80283e0:	4318      	orrs	r0, r3
 80283e2:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 80283e4:	441c      	add	r4, r3
 80283e6:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 80283e8:	f82a 0b02 	strh.w	r0, [sl], #2
 80283ec:	441e      	add	r6, r3
 80283ee:	e73b      	b.n	8028268 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1d8>
 80283f0:	b00f      	add	sp, #60	@ 0x3c
 80283f2:	ecbd 8b08 	vpop	{d8-d11}
 80283f6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	...

080283fc <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh>:
 80283fc:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8028400:	e9dd 540d 	ldrd	r5, r4, [sp, #52]	@ 0x34
 8028404:	f9bd e030 	ldrsh.w	lr, [sp, #48]	@ 0x30
 8028408:	fb04 5603 	mla	r6, r4, r3, r5
 802840c:	2c00      	cmp	r4, #0
 802840e:	f89d 003c 	ldrb.w	r0, [sp, #60]	@ 0x3c
 8028412:	f89d 7040 	ldrb.w	r7, [sp, #64]	@ 0x40
 8028416:	eb02 0c86 	add.w	ip, r2, r6, lsl #2
 802841a:	db36      	blt.n	802848a <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0x8e>
 802841c:	45a6      	cmp	lr, r4
 802841e:	dd34      	ble.n	802848a <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0x8e>
 8028420:	2d00      	cmp	r5, #0
 8028422:	db30      	blt.n	8028486 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0x8a>
 8028424:	42ab      	cmp	r3, r5
 8028426:	dd2e      	ble.n	8028486 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0x8a>
 8028428:	f852 2026 	ldr.w	r2, [r2, r6, lsl #2]
 802842c:	1c6e      	adds	r6, r5, #1
 802842e:	d42f      	bmi.n	8028490 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0x94>
 8028430:	42b3      	cmp	r3, r6
 8028432:	dd2d      	ble.n	8028490 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0x94>
 8028434:	b370      	cbz	r0, 8028494 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0x98>
 8028436:	f8dc 6004 	ldr.w	r6, [ip, #4]
 802843a:	3401      	adds	r4, #1
 802843c:	d42e      	bmi.n	802849c <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0xa0>
 802843e:	45a6      	cmp	lr, r4
 8028440:	dd2c      	ble.n	802849c <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0xa0>
 8028442:	b377      	cbz	r7, 80284a2 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0xa6>
 8028444:	2d00      	cmp	r5, #0
 8028446:	db27      	blt.n	8028498 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0x9c>
 8028448:	42ab      	cmp	r3, r5
 802844a:	dd25      	ble.n	8028498 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0x9c>
 802844c:	f85c 4023 	ldr.w	r4, [ip, r3, lsl #2]
 8028450:	3501      	adds	r5, #1
 8028452:	d429      	bmi.n	80284a8 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0xac>
 8028454:	42ab      	cmp	r3, r5
 8028456:	dd27      	ble.n	80284a8 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0xac>
 8028458:	b340      	cbz	r0, 80284ac <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0xb0>
 802845a:	3301      	adds	r3, #1
 802845c:	f85c 3023 	ldr.w	r3, [ip, r3, lsl #2]
 8028460:	280f      	cmp	r0, #15
 8028462:	ea4f 6b12 	mov.w	fp, r2, lsr #24
 8028466:	ea4f 6a16 	mov.w	sl, r6, lsr #24
 802846a:	ea4f 6914 	mov.w	r9, r4, lsr #24
 802846e:	ea4f 6813 	mov.w	r8, r3, lsr #24
 8028472:	d801      	bhi.n	8028478 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0x7c>
 8028474:	2f0f      	cmp	r7, #15
 8028476:	d91b      	bls.n	80284b0 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0xb4>
 8028478:	4b8d      	ldr	r3, [pc, #564]	@ (80286b0 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0x2b4>)
 802847a:	f44f 71fb 	mov.w	r1, #502	@ 0x1f6
 802847e:	4a8d      	ldr	r2, [pc, #564]	@ (80286b4 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0x2b8>)
 8028480:	488d      	ldr	r0, [pc, #564]	@ (80286b8 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0x2bc>)
 8028482:	f002 fa57 	bl	802a934 <__assert_func>
 8028486:	2200      	movs	r2, #0
 8028488:	e7d0      	b.n	802842c <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0x30>
 802848a:	2600      	movs	r6, #0
 802848c:	4632      	mov	r2, r6
 802848e:	e7d4      	b.n	802843a <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0x3e>
 8028490:	2600      	movs	r6, #0
 8028492:	e7d2      	b.n	802843a <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0x3e>
 8028494:	4606      	mov	r6, r0
 8028496:	e7d0      	b.n	802843a <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0x3e>
 8028498:	2400      	movs	r4, #0
 802849a:	e7d9      	b.n	8028450 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0x54>
 802849c:	2300      	movs	r3, #0
 802849e:	461c      	mov	r4, r3
 80284a0:	e7de      	b.n	8028460 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0x64>
 80284a2:	463b      	mov	r3, r7
 80284a4:	463c      	mov	r4, r7
 80284a6:	e7db      	b.n	8028460 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0x64>
 80284a8:	2300      	movs	r3, #0
 80284aa:	e7d9      	b.n	8028460 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0x64>
 80284ac:	4603      	mov	r3, r0
 80284ae:	e7d7      	b.n	8028460 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0x64>
 80284b0:	b280      	uxth	r0, r0
 80284b2:	b2bf      	uxth	r7, r7
 80284b4:	fb07 fe00 	mul.w	lr, r7, r0
 80284b8:	0100      	lsls	r0, r0, #4
 80284ba:	ebce 1707 	rsb	r7, lr, r7, lsl #4
 80284be:	eba0 0c0e 	sub.w	ip, r0, lr
 80284c2:	f5c0 7580 	rsb	r5, r0, #256	@ 0x100
 80284c6:	b2bf      	uxth	r7, r7
 80284c8:	fa1f fc8c 	uxth.w	ip, ip
 80284cc:	1bed      	subs	r5, r5, r7
 80284ce:	fb0a f00c 	mul.w	r0, sl, ip
 80284d2:	b2ad      	uxth	r5, r5
 80284d4:	fb0b 0005 	mla	r0, fp, r5, r0
 80284d8:	fb07 0009 	mla	r0, r7, r9, r0
 80284dc:	fb0e 0008 	mla	r0, lr, r8, r0
 80284e0:	f3c0 2007 	ubfx	r0, r0, #8, #8
 80284e4:	9001      	str	r0, [sp, #4]
 80284e6:	2800      	cmp	r0, #0
 80284e8:	f000 80de 	beq.w	80286a8 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0x2ac>
 80284ec:	f1bb 0fff 	cmp.w	fp, #255	@ 0xff
 80284f0:	d018      	beq.n	8028524 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0x128>
 80284f2:	f002 10ff 	and.w	r0, r2, #16711935	@ 0xff00ff
 80284f6:	f402 427f 	and.w	r2, r2, #65280	@ 0xff00
 80284fa:	fb0b f000 	mul.w	r0, fp, r0
 80284fe:	fb0b fb02 	mul.w	fp, fp, r2
 8028502:	0a02      	lsrs	r2, r0, #8
 8028504:	f100 1001 	add.w	r0, r0, #65537	@ 0x10001
 8028508:	f002 12ff 	and.w	r2, r2, #16711935	@ 0xff00ff
 802850c:	4402      	add	r2, r0
 802850e:	f50b 7080 	add.w	r0, fp, #256	@ 0x100
 8028512:	eb00 201b 	add.w	r0, r0, fp, lsr #8
 8028516:	0a12      	lsrs	r2, r2, #8
 8028518:	0a00      	lsrs	r0, r0, #8
 802851a:	f002 12ff 	and.w	r2, r2, #16711935	@ 0xff00ff
 802851e:	f400 407f 	and.w	r0, r0, #65280	@ 0xff00
 8028522:	4302      	orrs	r2, r0
 8028524:	f1ba 0fff 	cmp.w	sl, #255	@ 0xff
 8028528:	d01a      	beq.n	8028560 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0x164>
 802852a:	f006 10ff 	and.w	r0, r6, #16711935	@ 0xff00ff
 802852e:	f406 467f 	and.w	r6, r6, #65280	@ 0xff00
 8028532:	fb0a f000 	mul.w	r0, sl, r0
 8028536:	fb0a fa06 	mul.w	sl, sl, r6
 802853a:	0a06      	lsrs	r6, r0, #8
 802853c:	f100 1001 	add.w	r0, r0, #65537	@ 0x10001
 8028540:	f006 16ff 	and.w	r6, r6, #16711935	@ 0xff00ff
 8028544:	4406      	add	r6, r0
 8028546:	f50a 7080 	add.w	r0, sl, #256	@ 0x100
 802854a:	eb00 2a1a 	add.w	sl, r0, sl, lsr #8
 802854e:	0a36      	lsrs	r6, r6, #8
 8028550:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 8028554:	f006 16ff 	and.w	r6, r6, #16711935	@ 0xff00ff
 8028558:	f40a 4a7f 	and.w	sl, sl, #65280	@ 0xff00
 802855c:	ea46 060a 	orr.w	r6, r6, sl
 8028560:	f1b9 0fff 	cmp.w	r9, #255	@ 0xff
 8028564:	d01b      	beq.n	802859e <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0x1a2>
 8028566:	f004 1aff 	and.w	sl, r4, #16711935	@ 0xff00ff
 802856a:	f404 447f 	and.w	r4, r4, #65280	@ 0xff00
 802856e:	fb09 fa0a 	mul.w	sl, r9, sl
 8028572:	fb09 f004 	mul.w	r0, r9, r4
 8028576:	ea4f 241a 	mov.w	r4, sl, lsr #8
 802857a:	f10a 1a01 	add.w	sl, sl, #65537	@ 0x10001
 802857e:	f500 7980 	add.w	r9, r0, #256	@ 0x100
 8028582:	f004 14ff 	and.w	r4, r4, #16711935	@ 0xff00ff
 8028586:	eb09 2910 	add.w	r9, r9, r0, lsr #8
 802858a:	4454      	add	r4, sl
 802858c:	ea4f 2919 	mov.w	r9, r9, lsr #8
 8028590:	0a24      	lsrs	r4, r4, #8
 8028592:	f409 497f 	and.w	r9, r9, #65280	@ 0xff00
 8028596:	f004 14ff 	and.w	r4, r4, #16711935	@ 0xff00ff
 802859a:	ea44 0409 	orr.w	r4, r4, r9
 802859e:	f1b8 0fff 	cmp.w	r8, #255	@ 0xff
 80285a2:	d01b      	beq.n	80285dc <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0x1e0>
 80285a4:	f003 19ff 	and.w	r9, r3, #16711935	@ 0xff00ff
 80285a8:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 80285ac:	fb08 f909 	mul.w	r9, r8, r9
 80285b0:	fb08 f003 	mul.w	r0, r8, r3
 80285b4:	ea4f 2319 	mov.w	r3, r9, lsr #8
 80285b8:	f109 1901 	add.w	r9, r9, #65537	@ 0x10001
 80285bc:	f500 7880 	add.w	r8, r0, #256	@ 0x100
 80285c0:	f003 13ff 	and.w	r3, r3, #16711935	@ 0xff00ff
 80285c4:	eb08 2810 	add.w	r8, r8, r0, lsr #8
 80285c8:	444b      	add	r3, r9
 80285ca:	ea4f 2818 	mov.w	r8, r8, lsr #8
 80285ce:	0a1b      	lsrs	r3, r3, #8
 80285d0:	f408 487f 	and.w	r8, r8, #65280	@ 0xff00
 80285d4:	f003 13ff 	and.w	r3, r3, #16711935	@ 0xff00ff
 80285d8:	ea43 0308 	orr.w	r3, r3, r8
 80285dc:	f006 18ff 	and.w	r8, r6, #16711935	@ 0xff00ff
 80285e0:	f406 467f 	and.w	r6, r6, #65280	@ 0xff00
 80285e4:	f002 19ff 	and.w	r9, r2, #16711935	@ 0xff00ff
 80285e8:	f402 427f 	and.w	r2, r2, #65280	@ 0xff00
 80285ec:	fb0c f808 	mul.w	r8, ip, r8
 80285f0:	8808      	ldrh	r0, [r1, #0]
 80285f2:	fb0c f606 	mul.w	r6, ip, r6
 80285f6:	fb05 8909 	mla	r9, r5, r9, r8
 80285fa:	f004 18ff 	and.w	r8, r4, #16711935	@ 0xff00ff
 80285fe:	fb05 6502 	mla	r5, r5, r2, r6
 8028602:	f404 447f 	and.w	r4, r4, #65280	@ 0xff00
 8028606:	fb07 9908 	mla	r9, r7, r8, r9
 802860a:	f89d 6044 	ldrb.w	r6, [sp, #68]	@ 0x44
 802860e:	fb07 5704 	mla	r7, r7, r4, r5
 8028612:	f003 18ff 	and.w	r8, r3, #16711935	@ 0xff00ff
 8028616:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 802861a:	b2b6      	uxth	r6, r6
 802861c:	fb0e 9808 	mla	r8, lr, r8, r9
 8028620:	9a01      	ldr	r2, [sp, #4]
 8028622:	fb0e 7e03 	mla	lr, lr, r3, r7
 8028626:	1205      	asrs	r5, r0, #8
 8028628:	4372      	muls	r2, r6
 802862a:	ea4f 2818 	mov.w	r8, r8, lsr #8
 802862e:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 8028632:	f005 05f8 	and.w	r5, r5, #248	@ 0xf8
 8028636:	1c53      	adds	r3, r2, #1
 8028638:	f008 18ff 	and.w	r8, r8, #16711935	@ 0xff00ff
 802863c:	f40e 4e7f 	and.w	lr, lr, #65280	@ 0xff00
 8028640:	eb03 2312 	add.w	r3, r3, r2, lsr #8
 8028644:	ea48 0e0e 	orr.w	lr, r8, lr
 8028648:	ea6f 2313 	mvn.w	r3, r3, lsr #8
 802864c:	ea4f 421e 	mov.w	r2, lr, lsr #16
 8028650:	f3ce 2407 	ubfx	r4, lr, #8, #8
 8028654:	b2db      	uxtb	r3, r3
 8028656:	fb12 f206 	smulbb	r2, r2, r6
 802865a:	fa5f fe8e 	uxtb.w	lr, lr
 802865e:	fb14 f406 	smulbb	r4, r4, r6
 8028662:	fb05 2503 	mla	r5, r5, r3, r2
 8028666:	10c2      	asrs	r2, r0, #3
 8028668:	fb1e fe06 	smulbb	lr, lr, r6
 802866c:	00c0      	lsls	r0, r0, #3
 802866e:	f002 02fc 	and.w	r2, r2, #252	@ 0xfc
 8028672:	b2ad      	uxth	r5, r5
 8028674:	b2c0      	uxtb	r0, r0
 8028676:	fb02 4203 	mla	r2, r2, r3, r4
 802867a:	fb00 e303 	mla	r3, r0, r3, lr
 802867e:	b294      	uxth	r4, r2
 8028680:	b298      	uxth	r0, r3
 8028682:	1c6b      	adds	r3, r5, #1
 8028684:	1c62      	adds	r2, r4, #1
 8028686:	eb03 2515 	add.w	r5, r3, r5, lsr #8
 802868a:	1c43      	adds	r3, r0, #1
 802868c:	eb02 2214 	add.w	r2, r2, r4, lsr #8
 8028690:	eb03 2310 	add.w	r3, r3, r0, lsr #8
 8028694:	f405 4578 	and.w	r5, r5, #63488	@ 0xf800
 8028698:	0952      	lsrs	r2, r2, #5
 802869a:	f3c3 23c4 	ubfx	r3, r3, #11, #5
 802869e:	f402 62fc 	and.w	r2, r2, #2016	@ 0x7e0
 80286a2:	432b      	orrs	r3, r5
 80286a4:	4313      	orrs	r3, r2
 80286a6:	800b      	strh	r3, [r1, #0]
 80286a8:	b003      	add	sp, #12
 80286aa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80286ae:	bf00      	nop
 80286b0:	0802fad5 	.word	0x0802fad5
 80286b4:	080300a2 	.word	0x080300a2
 80286b8:	0802fb59 	.word	0x0802fb59

080286bc <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 80286bc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80286c0:	ed2d 8b08 	vpush	{d8-d11}
 80286c4:	b09d      	sub	sp, #116	@ 0x74
 80286c6:	eeb0 aa40 	vmov.f32	s20, s0
 80286ca:	eef0 9a60 	vmov.f32	s19, s1
 80286ce:	9219      	str	r2, [sp, #100]	@ 0x64
 80286d0:	eeb0 9a41 	vmov.f32	s18, s2
 80286d4:	9a33      	ldr	r2, [sp, #204]	@ 0xcc
 80286d6:	eeb0 8a62 	vmov.f32	s16, s5
 80286da:	9307      	str	r3, [sp, #28]
 80286dc:	eef0 8a43 	vmov.f32	s17, s6
 80286e0:	f89d 30dc 	ldrb.w	r3, [sp, #220]	@ 0xdc
 80286e4:	eef0 ba44 	vmov.f32	s23, s8
 80286e8:	901b      	str	r0, [sp, #108]	@ 0x6c
 80286ea:	eeb0 ba64 	vmov.f32	s22, s9
 80286ee:	931a      	str	r3, [sp, #104]	@ 0x68
 80286f0:	eef0 aa45 	vmov.f32	s21, s10
 80286f4:	6850      	ldr	r0, [r2, #4]
 80286f6:	9117      	str	r1, [sp, #92]	@ 0x5c
 80286f8:	6812      	ldr	r2, [r2, #0]
 80286fa:	e9dd 1334 	ldrd	r1, r3, [sp, #208]	@ 0xd0
 80286fe:	e9dd 462f 	ldrd	r4, r6, [sp, #188]	@ 0xbc
 8028702:	fb00 1303 	mla	r3, r0, r3, r1
 8028706:	eb02 0343 	add.w	r3, r2, r3, lsl #1
 802870a:	930a      	str	r3, [sp, #40]	@ 0x28
 802870c:	9b36      	ldr	r3, [sp, #216]	@ 0xd8
 802870e:	681b      	ldr	r3, [r3, #0]
 8028710:	9310      	str	r3, [sp, #64]	@ 0x40
 8028712:	f8bd 3068 	ldrh.w	r3, [sp, #104]	@ 0x68
 8028716:	930b      	str	r3, [sp, #44]	@ 0x2c
 8028718:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 802871a:	2b00      	cmp	r3, #0
 802871c:	dc03      	bgt.n	8028726 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6a>
 802871e:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8028720:	2b00      	cmp	r3, #0
 8028722:	f340 8375 	ble.w	8028e10 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x754>
 8028726:	9b36      	ldr	r3, [sp, #216]	@ 0xd8
 8028728:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 802872c:	f9b3 200c 	ldrsh.w	r2, [r3, #12]
 8028730:	1e48      	subs	r0, r1, #1
 8028732:	1e57      	subs	r7, r2, #1
 8028734:	9b07      	ldr	r3, [sp, #28]
 8028736:	2b00      	cmp	r3, #0
 8028738:	f340 818e 	ble.w	8028a58 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x39c>
 802873c:	ea5f 4c24 	movs.w	ip, r4, asr #16
 8028740:	ea4f 4326 	mov.w	r3, r6, asr #16
 8028744:	d406      	bmi.n	8028754 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x98>
 8028746:	4584      	cmp	ip, r0
 8028748:	da04      	bge.n	8028754 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x98>
 802874a:	2b00      	cmp	r3, #0
 802874c:	db02      	blt.n	8028754 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x98>
 802874e:	42bb      	cmp	r3, r7
 8028750:	f2c0 8183 	blt.w	8028a5a <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x39e>
 8028754:	f11c 0c01 	adds.w	ip, ip, #1
 8028758:	f100 8173 	bmi.w	8028a42 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x386>
 802875c:	4561      	cmp	r1, ip
 802875e:	f2c0 8170 	blt.w	8028a42 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x386>
 8028762:	3301      	adds	r3, #1
 8028764:	f100 816d 	bmi.w	8028a42 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x386>
 8028768:	429a      	cmp	r2, r3
 802876a:	f2c0 816a 	blt.w	8028a42 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x386>
 802876e:	9b07      	ldr	r3, [sp, #28]
 8028770:	9f0a      	ldr	r7, [sp, #40]	@ 0x28
 8028772:	9318      	str	r3, [sp, #96]	@ 0x60
 8028774:	9b18      	ldr	r3, [sp, #96]	@ 0x60
 8028776:	2b00      	cmp	r3, #0
 8028778:	f340 818c 	ble.w	8028a94 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3d8>
 802877c:	9a36      	ldr	r2, [sp, #216]	@ 0xd8
 802877e:	ea4f 4c26 	mov.w	ip, r6, asr #16
 8028782:	9b36      	ldr	r3, [sp, #216]	@ 0xd8
 8028784:	f3c4 3003 	ubfx	r0, r4, #12, #4
 8028788:	f8d2 e00c 	ldr.w	lr, [r2, #12]
 802878c:	1422      	asrs	r2, r4, #16
 802878e:	f3c6 3103 	ubfx	r1, r6, #12, #4
 8028792:	689b      	ldr	r3, [r3, #8]
 8028794:	f100 81cd 	bmi.w	8028b32 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x476>
 8028798:	f103 38ff 	add.w	r8, r3, #4294967295
 802879c:	4542      	cmp	r2, r8
 802879e:	f280 81c8 	bge.w	8028b32 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x476>
 80287a2:	f1bc 0f00 	cmp.w	ip, #0
 80287a6:	f2c0 81c4 	blt.w	8028b32 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x476>
 80287aa:	f10e 38ff 	add.w	r8, lr, #4294967295
 80287ae:	45c4      	cmp	ip, r8
 80287b0:	f280 81bf 	bge.w	8028b32 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x476>
 80287b4:	b21b      	sxth	r3, r3
 80287b6:	9d10      	ldr	r5, [sp, #64]	@ 0x40
 80287b8:	fb0c 2203 	mla	r2, ip, r3, r2
 80287bc:	eb05 0882 	add.w	r8, r5, r2, lsl #2
 80287c0:	f855 2022 	ldr.w	r2, [r5, r2, lsl #2]
 80287c4:	ea4f 6e12 	mov.w	lr, r2, lsr #24
 80287c8:	2800      	cmp	r0, #0
 80287ca:	f000 81a9 	beq.w	8028b20 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x464>
 80287ce:	f8d8 5004 	ldr.w	r5, [r8, #4]
 80287d2:	950c      	str	r5, [sp, #48]	@ 0x30
 80287d4:	0e2d      	lsrs	r5, r5, #24
 80287d6:	9513      	str	r5, [sp, #76]	@ 0x4c
 80287d8:	b181      	cbz	r1, 80287fc <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x140>
 80287da:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 80287de:	3b01      	subs	r3, #1
 80287e0:	009b      	lsls	r3, r3, #2
 80287e2:	3304      	adds	r3, #4
 80287e4:	eb08 0c03 	add.w	ip, r8, r3
 80287e8:	f858 3003 	ldr.w	r3, [r8, r3]
 80287ec:	9308      	str	r3, [sp, #32]
 80287ee:	0e1b      	lsrs	r3, r3, #24
 80287f0:	9311      	str	r3, [sp, #68]	@ 0x44
 80287f2:	f8dc 3004 	ldr.w	r3, [ip, #4]
 80287f6:	930d      	str	r3, [sp, #52]	@ 0x34
 80287f8:	0e1b      	lsrs	r3, r3, #24
 80287fa:	9314      	str	r3, [sp, #80]	@ 0x50
 80287fc:	b280      	uxth	r0, r0
 80287fe:	9d11      	ldr	r5, [sp, #68]	@ 0x44
 8028800:	b289      	uxth	r1, r1
 8028802:	fb00 f901 	mul.w	r9, r0, r1
 8028806:	0100      	lsls	r0, r0, #4
 8028808:	ebc9 1101 	rsb	r1, r9, r1, lsl #4
 802880c:	eba0 0809 	sub.w	r8, r0, r9
 8028810:	f5c0 7380 	rsb	r3, r0, #256	@ 0x100
 8028814:	9813      	ldr	r0, [sp, #76]	@ 0x4c
 8028816:	b289      	uxth	r1, r1
 8028818:	fa1f f888 	uxth.w	r8, r8
 802881c:	1a5b      	subs	r3, r3, r1
 802881e:	fb08 f000 	mul.w	r0, r8, r0
 8028822:	b29b      	uxth	r3, r3
 8028824:	fb03 000e 	mla	r0, r3, lr, r0
 8028828:	fb01 0005 	mla	r0, r1, r5, r0
 802882c:	9d14      	ldr	r5, [sp, #80]	@ 0x50
 802882e:	fb09 0005 	mla	r0, r9, r5, r0
 8028832:	f3c0 2007 	ubfx	r0, r0, #8, #8
 8028836:	2800      	cmp	r0, #0
 8028838:	f000 80fa 	beq.w	8028a30 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x374>
 802883c:	f1be 0fff 	cmp.w	lr, #255	@ 0xff
 8028840:	d01b      	beq.n	802887a <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1be>
 8028842:	f002 1aff 	and.w	sl, r2, #16711935	@ 0xff00ff
 8028846:	f402 427f 	and.w	r2, r2, #65280	@ 0xff00
 802884a:	fb0e fa0a 	mul.w	sl, lr, sl
 802884e:	fb0e fe02 	mul.w	lr, lr, r2
 8028852:	ea4f 221a 	mov.w	r2, sl, lsr #8
 8028856:	f10a 1a01 	add.w	sl, sl, #65537	@ 0x10001
 802885a:	f50e 7c80 	add.w	ip, lr, #256	@ 0x100
 802885e:	f002 12ff 	and.w	r2, r2, #16711935	@ 0xff00ff
 8028862:	eb0c 2c1e 	add.w	ip, ip, lr, lsr #8
 8028866:	4452      	add	r2, sl
 8028868:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 802886c:	0a12      	lsrs	r2, r2, #8
 802886e:	f40c 4c7f 	and.w	ip, ip, #65280	@ 0xff00
 8028872:	f002 12ff 	and.w	r2, r2, #16711935	@ 0xff00ff
 8028876:	ea42 020c 	orr.w	r2, r2, ip
 802887a:	9d13      	ldr	r5, [sp, #76]	@ 0x4c
 802887c:	2dff      	cmp	r5, #255	@ 0xff
 802887e:	d021      	beq.n	80288c4 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x208>
 8028880:	9d0c      	ldr	r5, [sp, #48]	@ 0x30
 8028882:	f005 1bff 	and.w	fp, r5, #16711935	@ 0xff00ff
 8028886:	9d13      	ldr	r5, [sp, #76]	@ 0x4c
 8028888:	fb05 fb0b 	mul.w	fp, r5, fp
 802888c:	9d0c      	ldr	r5, [sp, #48]	@ 0x30
 802888e:	f405 4a7f 	and.w	sl, r5, #65280	@ 0xff00
 8028892:	9d13      	ldr	r5, [sp, #76]	@ 0x4c
 8028894:	ea4f 2e1b 	mov.w	lr, fp, lsr #8
 8028898:	f10b 1b01 	add.w	fp, fp, #65537	@ 0x10001
 802889c:	fb05 fa0a 	mul.w	sl, r5, sl
 80288a0:	f00e 1eff 	and.w	lr, lr, #16711935	@ 0xff00ff
 80288a4:	f50a 7c80 	add.w	ip, sl, #256	@ 0x100
 80288a8:	44de      	add	lr, fp
 80288aa:	eb0c 2a1a 	add.w	sl, ip, sl, lsr #8
 80288ae:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 80288b2:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 80288b6:	f00e 1eff 	and.w	lr, lr, #16711935	@ 0xff00ff
 80288ba:	f40a 4a7f 	and.w	sl, sl, #65280	@ 0xff00
 80288be:	ea4e 050a 	orr.w	r5, lr, sl
 80288c2:	950c      	str	r5, [sp, #48]	@ 0x30
 80288c4:	9d11      	ldr	r5, [sp, #68]	@ 0x44
 80288c6:	2dff      	cmp	r5, #255	@ 0xff
 80288c8:	d021      	beq.n	802890e <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x252>
 80288ca:	9d08      	ldr	r5, [sp, #32]
 80288cc:	f005 1bff 	and.w	fp, r5, #16711935	@ 0xff00ff
 80288d0:	9d11      	ldr	r5, [sp, #68]	@ 0x44
 80288d2:	fb05 fb0b 	mul.w	fp, r5, fp
 80288d6:	9d08      	ldr	r5, [sp, #32]
 80288d8:	f405 4a7f 	and.w	sl, r5, #65280	@ 0xff00
 80288dc:	9d11      	ldr	r5, [sp, #68]	@ 0x44
 80288de:	ea4f 2e1b 	mov.w	lr, fp, lsr #8
 80288e2:	f10b 1b01 	add.w	fp, fp, #65537	@ 0x10001
 80288e6:	fb05 fa0a 	mul.w	sl, r5, sl
 80288ea:	f00e 1eff 	and.w	lr, lr, #16711935	@ 0xff00ff
 80288ee:	f50a 7c80 	add.w	ip, sl, #256	@ 0x100
 80288f2:	44de      	add	lr, fp
 80288f4:	eb0c 2a1a 	add.w	sl, ip, sl, lsr #8
 80288f8:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 80288fc:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 8028900:	f00e 1eff 	and.w	lr, lr, #16711935	@ 0xff00ff
 8028904:	f40a 4a7f 	and.w	sl, sl, #65280	@ 0xff00
 8028908:	ea4e 050a 	orr.w	r5, lr, sl
 802890c:	9508      	str	r5, [sp, #32]
 802890e:	9d14      	ldr	r5, [sp, #80]	@ 0x50
 8028910:	2dff      	cmp	r5, #255	@ 0xff
 8028912:	d021      	beq.n	8028958 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x29c>
 8028914:	9d0d      	ldr	r5, [sp, #52]	@ 0x34
 8028916:	f005 1bff 	and.w	fp, r5, #16711935	@ 0xff00ff
 802891a:	9d14      	ldr	r5, [sp, #80]	@ 0x50
 802891c:	fb05 fb0b 	mul.w	fp, r5, fp
 8028920:	9d0d      	ldr	r5, [sp, #52]	@ 0x34
 8028922:	f405 4a7f 	and.w	sl, r5, #65280	@ 0xff00
 8028926:	9d14      	ldr	r5, [sp, #80]	@ 0x50
 8028928:	ea4f 2e1b 	mov.w	lr, fp, lsr #8
 802892c:	f10b 1b01 	add.w	fp, fp, #65537	@ 0x10001
 8028930:	fb05 fa0a 	mul.w	sl, r5, sl
 8028934:	f00e 1eff 	and.w	lr, lr, #16711935	@ 0xff00ff
 8028938:	f50a 7c80 	add.w	ip, sl, #256	@ 0x100
 802893c:	44de      	add	lr, fp
 802893e:	eb0c 2a1a 	add.w	sl, ip, sl, lsr #8
 8028942:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 8028946:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 802894a:	f00e 1eff 	and.w	lr, lr, #16711935	@ 0xff00ff
 802894e:	f40a 4a7f 	and.w	sl, sl, #65280	@ 0xff00
 8028952:	ea4e 050a 	orr.w	r5, lr, sl
 8028956:	950d      	str	r5, [sp, #52]	@ 0x34
 8028958:	9d0c      	ldr	r5, [sp, #48]	@ 0x30
 802895a:	f002 1eff 	and.w	lr, r2, #16711935	@ 0xff00ff
 802895e:	f402 427f 	and.w	r2, r2, #65280	@ 0xff00
 8028962:	f005 1cff 	and.w	ip, r5, #16711935	@ 0xff00ff
 8028966:	9d08      	ldr	r5, [sp, #32]
 8028968:	fb08 fc0c 	mul.w	ip, r8, ip
 802896c:	fb03 cc0e 	mla	ip, r3, lr, ip
 8028970:	f005 1eff 	and.w	lr, r5, #16711935	@ 0xff00ff
 8028974:	9d0d      	ldr	r5, [sp, #52]	@ 0x34
 8028976:	fb01 cc0e 	mla	ip, r1, lr, ip
 802897a:	f005 1eff 	and.w	lr, r5, #16711935	@ 0xff00ff
 802897e:	9d0c      	ldr	r5, [sp, #48]	@ 0x30
 8028980:	fb09 cc0e 	mla	ip, r9, lr, ip
 8028984:	f405 4e7f 	and.w	lr, r5, #65280	@ 0xff00
 8028988:	9d0b      	ldr	r5, [sp, #44]	@ 0x2c
 802898a:	fb08 f80e 	mul.w	r8, r8, lr
 802898e:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 8028992:	fb03 8202 	mla	r2, r3, r2, r8
 8028996:	9b08      	ldr	r3, [sp, #32]
 8028998:	f00c 1cff 	and.w	ip, ip, #16711935	@ 0xff00ff
 802899c:	f403 4a7f 	and.w	sl, r3, #65280	@ 0xff00
 80289a0:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 80289a2:	fb01 220a 	mla	r2, r1, sl, r2
 80289a6:	f403 417f 	and.w	r1, r3, #65280	@ 0xff00
 80289aa:	883b      	ldrh	r3, [r7, #0]
 80289ac:	fb09 2901 	mla	r9, r9, r1, r2
 80289b0:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 80289b2:	1219      	asrs	r1, r3, #8
 80289b4:	4342      	muls	r2, r0
 80289b6:	ea4f 2919 	mov.w	r9, r9, lsr #8
 80289ba:	f001 01f8 	and.w	r1, r1, #248	@ 0xf8
 80289be:	1c50      	adds	r0, r2, #1
 80289c0:	f409 497f 	and.w	r9, r9, #65280	@ 0xff00
 80289c4:	eb00 2012 	add.w	r0, r0, r2, lsr #8
 80289c8:	ea4c 0c09 	orr.w	ip, ip, r9
 80289cc:	ea6f 2010 	mvn.w	r0, r0, lsr #8
 80289d0:	ea4f 421c 	mov.w	r2, ip, lsr #16
 80289d4:	f3cc 2e07 	ubfx	lr, ip, #8, #8
 80289d8:	fa5f fc8c 	uxtb.w	ip, ip
 80289dc:	fb12 f205 	smulbb	r2, r2, r5
 80289e0:	b2c0      	uxtb	r0, r0
 80289e2:	fb1c fc05 	smulbb	ip, ip, r5
 80289e6:	fb01 2100 	mla	r1, r1, r0, r2
 80289ea:	10da      	asrs	r2, r3, #3
 80289ec:	fb1e fe05 	smulbb	lr, lr, r5
 80289f0:	00db      	lsls	r3, r3, #3
 80289f2:	b289      	uxth	r1, r1
 80289f4:	f002 02fc 	and.w	r2, r2, #252	@ 0xfc
 80289f8:	b2db      	uxtb	r3, r3
 80289fa:	fb02 e200 	mla	r2, r2, r0, lr
 80289fe:	fb03 c300 	mla	r3, r3, r0, ip
 8028a02:	b292      	uxth	r2, r2
 8028a04:	fa1f fc83 	uxth.w	ip, r3
 8028a08:	1c4b      	adds	r3, r1, #1
 8028a0a:	eb03 2111 	add.w	r1, r3, r1, lsr #8
 8028a0e:	f10c 0301 	add.w	r3, ip, #1
 8028a12:	eb03 231c 	add.w	r3, r3, ip, lsr #8
 8028a16:	f401 4178 	and.w	r1, r1, #63488	@ 0xf800
 8028a1a:	f3c3 23c4 	ubfx	r3, r3, #11, #5
 8028a1e:	430b      	orrs	r3, r1
 8028a20:	1c51      	adds	r1, r2, #1
 8028a22:	eb01 2212 	add.w	r2, r1, r2, lsr #8
 8028a26:	0952      	lsrs	r2, r2, #5
 8028a28:	f402 62fc 	and.w	r2, r2, #2016	@ 0x7e0
 8028a2c:	4313      	orrs	r3, r2
 8028a2e:	803b      	strh	r3, [r7, #0]
 8028a30:	9b31      	ldr	r3, [sp, #196]	@ 0xc4
 8028a32:	3702      	adds	r7, #2
 8028a34:	441c      	add	r4, r3
 8028a36:	9b32      	ldr	r3, [sp, #200]	@ 0xc8
 8028a38:	441e      	add	r6, r3
 8028a3a:	9b18      	ldr	r3, [sp, #96]	@ 0x60
 8028a3c:	3b01      	subs	r3, #1
 8028a3e:	9318      	str	r3, [sp, #96]	@ 0x60
 8028a40:	e698      	b.n	8028774 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xb8>
 8028a42:	9b31      	ldr	r3, [sp, #196]	@ 0xc4
 8028a44:	441c      	add	r4, r3
 8028a46:	9b32      	ldr	r3, [sp, #200]	@ 0xc8
 8028a48:	441e      	add	r6, r3
 8028a4a:	9b07      	ldr	r3, [sp, #28]
 8028a4c:	3b01      	subs	r3, #1
 8028a4e:	9307      	str	r3, [sp, #28]
 8028a50:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8028a52:	3302      	adds	r3, #2
 8028a54:	930a      	str	r3, [sp, #40]	@ 0x28
 8028a56:	e66d      	b.n	8028734 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x78>
 8028a58:	d023      	beq.n	8028aa2 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3e6>
 8028a5a:	9b07      	ldr	r3, [sp, #28]
 8028a5c:	9831      	ldr	r0, [sp, #196]	@ 0xc4
 8028a5e:	3b01      	subs	r3, #1
 8028a60:	fb00 4003 	mla	r0, r0, r3, r4
 8028a64:	1400      	asrs	r0, r0, #16
 8028a66:	f53f ae82 	bmi.w	802876e <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xb2>
 8028a6a:	3901      	subs	r1, #1
 8028a6c:	4288      	cmp	r0, r1
 8028a6e:	f6bf ae7e 	bge.w	802876e <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xb2>
 8028a72:	9932      	ldr	r1, [sp, #200]	@ 0xc8
 8028a74:	fb01 6303 	mla	r3, r1, r3, r6
 8028a78:	141b      	asrs	r3, r3, #16
 8028a7a:	f53f ae78 	bmi.w	802876e <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xb2>
 8028a7e:	3a01      	subs	r2, #1
 8028a80:	4293      	cmp	r3, r2
 8028a82:	f6bf ae74 	bge.w	802876e <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xb2>
 8028a86:	f8dd b01c 	ldr.w	fp, [sp, #28]
 8028a8a:	f8dd 9028 	ldr.w	r9, [sp, #40]	@ 0x28
 8028a8e:	f1bb 0f00 	cmp.w	fp, #0
 8028a92:	dc6c      	bgt.n	8028b6e <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4b2>
 8028a94:	9b07      	ldr	r3, [sp, #28]
 8028a96:	ea23 75e3 	bic.w	r5, r3, r3, asr #31
 8028a9a:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8028a9c:	eb03 0345 	add.w	r3, r3, r5, lsl #1
 8028aa0:	930a      	str	r3, [sp, #40]	@ 0x28
 8028aa2:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 8028aa4:	2b00      	cmp	r3, #0
 8028aa6:	f340 81b3 	ble.w	8028e10 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x754>
 8028aaa:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8028aae:	9b2e      	ldr	r3, [sp, #184]	@ 0xb8
 8028ab0:	ee3a aa2b 	vadd.f32	s20, s20, s23
 8028ab4:	ee79 9a8b 	vadd.f32	s19, s19, s22
 8028ab8:	eef0 6a48 	vmov.f32	s13, s16
 8028abc:	eec7 7a0a 	vdiv.f32	s15, s14, s20
 8028ac0:	ee39 9a2a 	vadd.f32	s18, s18, s21
 8028ac4:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 8028ac8:	ee16 4a90 	vmov	r4, s13
 8028acc:	eef0 6a68 	vmov.f32	s13, s17
 8028ad0:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 8028ad4:	ee16 6a90 	vmov	r6, s13
 8028ad8:	ee29 7aa7 	vmul.f32	s14, s19, s15
 8028adc:	ee69 7a27 	vmul.f32	s15, s18, s15
 8028ae0:	ee37 8a48 	vsub.f32	s16, s14, s16
 8028ae4:	ee77 8ae8 	vsub.f32	s17, s15, s17
 8028ae8:	eebe 8ac8 	vcvt.s32.f32	s16, s16, #16
 8028aec:	eefe 8ac8 	vcvt.s32.f32	s17, s17, #16
 8028af0:	ee18 2a10 	vmov	r2, s16
 8028af4:	eeb0 8a47 	vmov.f32	s16, s14
 8028af8:	fb92 f3f3 	sdiv	r3, r2, r3
 8028afc:	ee18 2a90 	vmov	r2, s17
 8028b00:	9331      	str	r3, [sp, #196]	@ 0xc4
 8028b02:	9b2e      	ldr	r3, [sp, #184]	@ 0xb8
 8028b04:	eef0 8a67 	vmov.f32	s17, s15
 8028b08:	fb92 f3f3 	sdiv	r3, r2, r3
 8028b0c:	9332      	str	r3, [sp, #200]	@ 0xc8
 8028b0e:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 8028b10:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 8028b12:	3b01      	subs	r3, #1
 8028b14:	9317      	str	r3, [sp, #92]	@ 0x5c
 8028b16:	9b2e      	ldr	r3, [sp, #184]	@ 0xb8
 8028b18:	bf08      	it	eq
 8028b1a:	4613      	moveq	r3, r2
 8028b1c:	9307      	str	r3, [sp, #28]
 8028b1e:	e5fb      	b.n	8028718 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5c>
 8028b20:	2900      	cmp	r1, #0
 8028b22:	f43f ae6b 	beq.w	80287fc <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x140>
 8028b26:	f858 3023 	ldr.w	r3, [r8, r3, lsl #2]
 8028b2a:	9308      	str	r3, [sp, #32]
 8028b2c:	0e1b      	lsrs	r3, r3, #24
 8028b2e:	9311      	str	r3, [sp, #68]	@ 0x44
 8028b30:	e664      	b.n	80287fc <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x140>
 8028b32:	f112 0801 	adds.w	r8, r2, #1
 8028b36:	f53f af7b 	bmi.w	8028a30 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x374>
 8028b3a:	4543      	cmp	r3, r8
 8028b3c:	f6ff af78 	blt.w	8028a30 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x374>
 8028b40:	f11c 0801 	adds.w	r8, ip, #1
 8028b44:	f53f af74 	bmi.w	8028a30 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x374>
 8028b48:	45c6      	cmp	lr, r8
 8028b4a:	f6ff af71 	blt.w	8028a30 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x374>
 8028b4e:	9d1a      	ldr	r5, [sp, #104]	@ 0x68
 8028b50:	b21b      	sxth	r3, r3
 8028b52:	9201      	str	r2, [sp, #4]
 8028b54:	fa0f f28e 	sxth.w	r2, lr
 8028b58:	e9cd 1504 	strd	r1, r5, [sp, #16]
 8028b5c:	e9cd c002 	strd	ip, r0, [sp, #8]
 8028b60:	9200      	str	r2, [sp, #0]
 8028b62:	4639      	mov	r1, r7
 8028b64:	9a10      	ldr	r2, [sp, #64]	@ 0x40
 8028b66:	981b      	ldr	r0, [sp, #108]	@ 0x6c
 8028b68:	f7ff fc48 	bl	80283fc <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh>
 8028b6c:	e760      	b.n	8028a30 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x374>
 8028b6e:	9b36      	ldr	r3, [sp, #216]	@ 0xd8
 8028b70:	1427      	asrs	r7, r4, #16
 8028b72:	9d10      	ldr	r5, [sp, #64]	@ 0x40
 8028b74:	f3c4 3203 	ubfx	r2, r4, #12, #4
 8028b78:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 8028b7c:	1433      	asrs	r3, r6, #16
 8028b7e:	f3c6 3003 	ubfx	r0, r6, #12, #4
 8028b82:	fb01 7303 	mla	r3, r1, r3, r7
 8028b86:	eb05 0783 	add.w	r7, r5, r3, lsl #2
 8028b8a:	f855 3023 	ldr.w	r3, [r5, r3, lsl #2]
 8028b8e:	ea4f 6c13 	mov.w	ip, r3, lsr #24
 8028b92:	2a00      	cmp	r2, #0
 8028b94:	f000 8133 	beq.w	8028dfe <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x742>
 8028b98:	687d      	ldr	r5, [r7, #4]
 8028b9a:	950e      	str	r5, [sp, #56]	@ 0x38
 8028b9c:	0e2d      	lsrs	r5, r5, #24
 8028b9e:	9515      	str	r5, [sp, #84]	@ 0x54
 8028ba0:	b178      	cbz	r0, 8028bc2 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x506>
 8028ba2:	f101 4180 	add.w	r1, r1, #1073741824	@ 0x40000000
 8028ba6:	3901      	subs	r1, #1
 8028ba8:	0089      	lsls	r1, r1, #2
 8028baa:	3104      	adds	r1, #4
 8028bac:	eb07 0e01 	add.w	lr, r7, r1
 8028bb0:	5879      	ldr	r1, [r7, r1]
 8028bb2:	9109      	str	r1, [sp, #36]	@ 0x24
 8028bb4:	0e09      	lsrs	r1, r1, #24
 8028bb6:	9112      	str	r1, [sp, #72]	@ 0x48
 8028bb8:	f8de 1004 	ldr.w	r1, [lr, #4]
 8028bbc:	910f      	str	r1, [sp, #60]	@ 0x3c
 8028bbe:	0e09      	lsrs	r1, r1, #24
 8028bc0:	9116      	str	r1, [sp, #88]	@ 0x58
 8028bc2:	b292      	uxth	r2, r2
 8028bc4:	9915      	ldr	r1, [sp, #84]	@ 0x54
 8028bc6:	b280      	uxth	r0, r0
 8028bc8:	9d12      	ldr	r5, [sp, #72]	@ 0x48
 8028bca:	fb02 f800 	mul.w	r8, r2, r0
 8028bce:	0112      	lsls	r2, r2, #4
 8028bd0:	ebc8 1000 	rsb	r0, r8, r0, lsl #4
 8028bd4:	eba2 0e08 	sub.w	lr, r2, r8
 8028bd8:	f5c2 7280 	rsb	r2, r2, #256	@ 0x100
 8028bdc:	b280      	uxth	r0, r0
 8028bde:	fa1f fe8e 	uxth.w	lr, lr
 8028be2:	1a12      	subs	r2, r2, r0
 8028be4:	fb0e f101 	mul.w	r1, lr, r1
 8028be8:	b292      	uxth	r2, r2
 8028bea:	fb02 110c 	mla	r1, r2, ip, r1
 8028bee:	fb00 1105 	mla	r1, r0, r5, r1
 8028bf2:	9d16      	ldr	r5, [sp, #88]	@ 0x58
 8028bf4:	fb08 1105 	mla	r1, r8, r5, r1
 8028bf8:	f3c1 2107 	ubfx	r1, r1, #8, #8
 8028bfc:	2900      	cmp	r1, #0
 8028bfe:	f000 80f5 	beq.w	8028dec <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x730>
 8028c02:	f1bc 0fff 	cmp.w	ip, #255	@ 0xff
 8028c06:	d019      	beq.n	8028c3c <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x580>
 8028c08:	f003 1aff 	and.w	sl, r3, #16711935	@ 0xff00ff
 8028c0c:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 8028c10:	fb0c fa0a 	mul.w	sl, ip, sl
 8028c14:	fb0c fc03 	mul.w	ip, ip, r3
 8028c18:	ea4f 231a 	mov.w	r3, sl, lsr #8
 8028c1c:	f10a 1a01 	add.w	sl, sl, #65537	@ 0x10001
 8028c20:	f50c 7780 	add.w	r7, ip, #256	@ 0x100
 8028c24:	f003 13ff 	and.w	r3, r3, #16711935	@ 0xff00ff
 8028c28:	eb07 271c 	add.w	r7, r7, ip, lsr #8
 8028c2c:	4453      	add	r3, sl
 8028c2e:	0a3f      	lsrs	r7, r7, #8
 8028c30:	0a1b      	lsrs	r3, r3, #8
 8028c32:	f407 477f 	and.w	r7, r7, #65280	@ 0xff00
 8028c36:	f003 13ff 	and.w	r3, r3, #16711935	@ 0xff00ff
 8028c3a:	433b      	orrs	r3, r7
 8028c3c:	9d15      	ldr	r5, [sp, #84]	@ 0x54
 8028c3e:	2dff      	cmp	r5, #255	@ 0xff
 8028c40:	d020      	beq.n	8028c84 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5c8>
 8028c42:	9d0e      	ldr	r5, [sp, #56]	@ 0x38
 8028c44:	f005 17ff 	and.w	r7, r5, #16711935	@ 0xff00ff
 8028c48:	9d15      	ldr	r5, [sp, #84]	@ 0x54
 8028c4a:	436f      	muls	r7, r5
 8028c4c:	9d0e      	ldr	r5, [sp, #56]	@ 0x38
 8028c4e:	ea4f 2c17 	mov.w	ip, r7, lsr #8
 8028c52:	f405 4a7f 	and.w	sl, r5, #65280	@ 0xff00
 8028c56:	9d15      	ldr	r5, [sp, #84]	@ 0x54
 8028c58:	f107 1701 	add.w	r7, r7, #65537	@ 0x10001
 8028c5c:	f00c 1cff 	and.w	ip, ip, #16711935	@ 0xff00ff
 8028c60:	fb05 fa0a 	mul.w	sl, r5, sl
 8028c64:	44bc      	add	ip, r7
 8028c66:	f50a 7780 	add.w	r7, sl, #256	@ 0x100
 8028c6a:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 8028c6e:	eb07 2a1a 	add.w	sl, r7, sl, lsr #8
 8028c72:	f00c 1cff 	and.w	ip, ip, #16711935	@ 0xff00ff
 8028c76:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 8028c7a:	f40a 4a7f 	and.w	sl, sl, #65280	@ 0xff00
 8028c7e:	ea4c 050a 	orr.w	r5, ip, sl
 8028c82:	950e      	str	r5, [sp, #56]	@ 0x38
 8028c84:	9d12      	ldr	r5, [sp, #72]	@ 0x48
 8028c86:	2dff      	cmp	r5, #255	@ 0xff
 8028c88:	d020      	beq.n	8028ccc <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x610>
 8028c8a:	9d09      	ldr	r5, [sp, #36]	@ 0x24
 8028c8c:	f005 17ff 	and.w	r7, r5, #16711935	@ 0xff00ff
 8028c90:	9d12      	ldr	r5, [sp, #72]	@ 0x48
 8028c92:	436f      	muls	r7, r5
 8028c94:	9d09      	ldr	r5, [sp, #36]	@ 0x24
 8028c96:	ea4f 2c17 	mov.w	ip, r7, lsr #8
 8028c9a:	f405 4a7f 	and.w	sl, r5, #65280	@ 0xff00
 8028c9e:	9d12      	ldr	r5, [sp, #72]	@ 0x48
 8028ca0:	f107 1701 	add.w	r7, r7, #65537	@ 0x10001
 8028ca4:	f00c 1cff 	and.w	ip, ip, #16711935	@ 0xff00ff
 8028ca8:	fb05 fa0a 	mul.w	sl, r5, sl
 8028cac:	44bc      	add	ip, r7
 8028cae:	f50a 7780 	add.w	r7, sl, #256	@ 0x100
 8028cb2:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 8028cb6:	eb07 2a1a 	add.w	sl, r7, sl, lsr #8
 8028cba:	f00c 1cff 	and.w	ip, ip, #16711935	@ 0xff00ff
 8028cbe:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 8028cc2:	f40a 4a7f 	and.w	sl, sl, #65280	@ 0xff00
 8028cc6:	ea4c 050a 	orr.w	r5, ip, sl
 8028cca:	9509      	str	r5, [sp, #36]	@ 0x24
 8028ccc:	9d16      	ldr	r5, [sp, #88]	@ 0x58
 8028cce:	2dff      	cmp	r5, #255	@ 0xff
 8028cd0:	d020      	beq.n	8028d14 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x658>
 8028cd2:	9d0f      	ldr	r5, [sp, #60]	@ 0x3c
 8028cd4:	f005 17ff 	and.w	r7, r5, #16711935	@ 0xff00ff
 8028cd8:	9d16      	ldr	r5, [sp, #88]	@ 0x58
 8028cda:	436f      	muls	r7, r5
 8028cdc:	9d0f      	ldr	r5, [sp, #60]	@ 0x3c
 8028cde:	ea4f 2c17 	mov.w	ip, r7, lsr #8
 8028ce2:	f405 4a7f 	and.w	sl, r5, #65280	@ 0xff00
 8028ce6:	9d16      	ldr	r5, [sp, #88]	@ 0x58
 8028ce8:	f107 1701 	add.w	r7, r7, #65537	@ 0x10001
 8028cec:	f00c 1cff 	and.w	ip, ip, #16711935	@ 0xff00ff
 8028cf0:	fb05 fa0a 	mul.w	sl, r5, sl
 8028cf4:	44bc      	add	ip, r7
 8028cf6:	f50a 7780 	add.w	r7, sl, #256	@ 0x100
 8028cfa:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 8028cfe:	eb07 2a1a 	add.w	sl, r7, sl, lsr #8
 8028d02:	f00c 1cff 	and.w	ip, ip, #16711935	@ 0xff00ff
 8028d06:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 8028d0a:	f40a 4a7f 	and.w	sl, sl, #65280	@ 0xff00
 8028d0e:	ea4c 050a 	orr.w	r5, ip, sl
 8028d12:	950f      	str	r5, [sp, #60]	@ 0x3c
 8028d14:	9d0e      	ldr	r5, [sp, #56]	@ 0x38
 8028d16:	f003 1cff 	and.w	ip, r3, #16711935	@ 0xff00ff
 8028d1a:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 8028d1e:	f005 17ff 	and.w	r7, r5, #16711935	@ 0xff00ff
 8028d22:	9d09      	ldr	r5, [sp, #36]	@ 0x24
 8028d24:	fb0e f707 	mul.w	r7, lr, r7
 8028d28:	fb02 770c 	mla	r7, r2, ip, r7
 8028d2c:	f005 1cff 	and.w	ip, r5, #16711935	@ 0xff00ff
 8028d30:	9d0f      	ldr	r5, [sp, #60]	@ 0x3c
 8028d32:	fb00 770c 	mla	r7, r0, ip, r7
 8028d36:	f005 1cff 	and.w	ip, r5, #16711935	@ 0xff00ff
 8028d3a:	9d0e      	ldr	r5, [sp, #56]	@ 0x38
 8028d3c:	fb08 770c 	mla	r7, r8, ip, r7
 8028d40:	f405 4c7f 	and.w	ip, r5, #65280	@ 0xff00
 8028d44:	9d0b      	ldr	r5, [sp, #44]	@ 0x2c
 8028d46:	fb0e fe0c 	mul.w	lr, lr, ip
 8028d4a:	0a3f      	lsrs	r7, r7, #8
 8028d4c:	fb02 e303 	mla	r3, r2, r3, lr
 8028d50:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8028d52:	f007 17ff 	and.w	r7, r7, #16711935	@ 0xff00ff
 8028d56:	f402 4a7f 	and.w	sl, r2, #65280	@ 0xff00
 8028d5a:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 8028d5c:	fb00 330a 	mla	r3, r0, sl, r3
 8028d60:	f402 4c7f 	and.w	ip, r2, #65280	@ 0xff00
 8028d64:	f8b9 0000 	ldrh.w	r0, [r9]
 8028d68:	fb08 3c0c 	mla	ip, r8, ip, r3
 8028d6c:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8028d6e:	1202      	asrs	r2, r0, #8
 8028d70:	4359      	muls	r1, r3
 8028d72:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 8028d76:	f002 02f8 	and.w	r2, r2, #248	@ 0xf8
 8028d7a:	f40c 4c7f 	and.w	ip, ip, #65280	@ 0xff00
 8028d7e:	1c4b      	adds	r3, r1, #1
 8028d80:	ea47 070c 	orr.w	r7, r7, ip
 8028d84:	eb03 2111 	add.w	r1, r3, r1, lsr #8
 8028d88:	0c3b      	lsrs	r3, r7, #16
 8028d8a:	ea6f 2111 	mvn.w	r1, r1, lsr #8
 8028d8e:	f3c7 2c07 	ubfx	ip, r7, #8, #8
 8028d92:	b2ff      	uxtb	r7, r7
 8028d94:	fb13 f305 	smulbb	r3, r3, r5
 8028d98:	b2c9      	uxtb	r1, r1
 8028d9a:	fb17 f705 	smulbb	r7, r7, r5
 8028d9e:	fb02 3201 	mla	r2, r2, r1, r3
 8028da2:	10c3      	asrs	r3, r0, #3
 8028da4:	fb1c fc05 	smulbb	ip, ip, r5
 8028da8:	00c0      	lsls	r0, r0, #3
 8028daa:	b292      	uxth	r2, r2
 8028dac:	f003 03fc 	and.w	r3, r3, #252	@ 0xfc
 8028db0:	b2c0      	uxtb	r0, r0
 8028db2:	fb03 c301 	mla	r3, r3, r1, ip
 8028db6:	fb00 7001 	mla	r0, r0, r1, r7
 8028dba:	1c51      	adds	r1, r2, #1
 8028dbc:	b29b      	uxth	r3, r3
 8028dbe:	b280      	uxth	r0, r0
 8028dc0:	eb01 2212 	add.w	r2, r1, r2, lsr #8
 8028dc4:	f100 0c01 	add.w	ip, r0, #1
 8028dc8:	f402 4278 	and.w	r2, r2, #63488	@ 0xf800
 8028dcc:	eb0c 2c10 	add.w	ip, ip, r0, lsr #8
 8028dd0:	f3cc 2cc4 	ubfx	ip, ip, #11, #5
 8028dd4:	ea4c 0202 	orr.w	r2, ip, r2
 8028dd8:	f103 0c01 	add.w	ip, r3, #1
 8028ddc:	eb0c 2313 	add.w	r3, ip, r3, lsr #8
 8028de0:	095b      	lsrs	r3, r3, #5
 8028de2:	f403 63fc 	and.w	r3, r3, #2016	@ 0x7e0
 8028de6:	431a      	orrs	r2, r3
 8028de8:	f8a9 2000 	strh.w	r2, [r9]
 8028dec:	9b31      	ldr	r3, [sp, #196]	@ 0xc4
 8028dee:	f109 0902 	add.w	r9, r9, #2
 8028df2:	f10b 3bff 	add.w	fp, fp, #4294967295
 8028df6:	441c      	add	r4, r3
 8028df8:	9b32      	ldr	r3, [sp, #200]	@ 0xc8
 8028dfa:	441e      	add	r6, r3
 8028dfc:	e647      	b.n	8028a8e <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3d2>
 8028dfe:	2800      	cmp	r0, #0
 8028e00:	f43f aedf 	beq.w	8028bc2 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x506>
 8028e04:	f857 1021 	ldr.w	r1, [r7, r1, lsl #2]
 8028e08:	9109      	str	r1, [sp, #36]	@ 0x24
 8028e0a:	0e09      	lsrs	r1, r1, #24
 8028e0c:	9112      	str	r1, [sp, #72]	@ 0x48
 8028e0e:	e6d8      	b.n	8028bc2 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x506>
 8028e10:	b01d      	add	sp, #116	@ 0x74
 8028e12:	ecbd 8b08 	vpop	{d8-d11}
 8028e16:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	...

08028e1c <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh>:
 8028e1c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8028e20:	e9dd 540d 	ldrd	r5, r4, [sp, #52]	@ 0x34
 8028e24:	f9bd e030 	ldrsh.w	lr, [sp, #48]	@ 0x30
 8028e28:	fb04 5603 	mla	r6, r4, r3, r5
 8028e2c:	2c00      	cmp	r4, #0
 8028e2e:	f89d 003c 	ldrb.w	r0, [sp, #60]	@ 0x3c
 8028e32:	f89d 7040 	ldrb.w	r7, [sp, #64]	@ 0x40
 8028e36:	eb02 0c86 	add.w	ip, r2, r6, lsl #2
 8028e3a:	db37      	blt.n	8028eac <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0x90>
 8028e3c:	45a6      	cmp	lr, r4
 8028e3e:	dd35      	ble.n	8028eac <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0x90>
 8028e40:	2d00      	cmp	r5, #0
 8028e42:	db31      	blt.n	8028ea8 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0x8c>
 8028e44:	42ab      	cmp	r3, r5
 8028e46:	dd2f      	ble.n	8028ea8 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0x8c>
 8028e48:	f852 2026 	ldr.w	r2, [r2, r6, lsl #2]
 8028e4c:	1c6e      	adds	r6, r5, #1
 8028e4e:	d430      	bmi.n	8028eb2 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0x96>
 8028e50:	42b3      	cmp	r3, r6
 8028e52:	dd2e      	ble.n	8028eb2 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0x96>
 8028e54:	b378      	cbz	r0, 8028eb6 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0x9a>
 8028e56:	f8dc 6004 	ldr.w	r6, [ip, #4]
 8028e5a:	3401      	adds	r4, #1
 8028e5c:	d42f      	bmi.n	8028ebe <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0xa2>
 8028e5e:	45a6      	cmp	lr, r4
 8028e60:	dd2d      	ble.n	8028ebe <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0xa2>
 8028e62:	b37f      	cbz	r7, 8028ec4 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0xa8>
 8028e64:	2d00      	cmp	r5, #0
 8028e66:	eb0c 0e83 	add.w	lr, ip, r3, lsl #2
 8028e6a:	db26      	blt.n	8028eba <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0x9e>
 8028e6c:	42ab      	cmp	r3, r5
 8028e6e:	dd24      	ble.n	8028eba <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0x9e>
 8028e70:	f85c 4023 	ldr.w	r4, [ip, r3, lsl #2]
 8028e74:	3501      	adds	r5, #1
 8028e76:	d428      	bmi.n	8028eca <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0xae>
 8028e78:	42ab      	cmp	r3, r5
 8028e7a:	dd26      	ble.n	8028eca <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0xae>
 8028e7c:	b338      	cbz	r0, 8028ece <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0xb2>
 8028e7e:	f8de 3004 	ldr.w	r3, [lr, #4]
 8028e82:	280f      	cmp	r0, #15
 8028e84:	ea4f 6b12 	mov.w	fp, r2, lsr #24
 8028e88:	ea4f 6a16 	mov.w	sl, r6, lsr #24
 8028e8c:	ea4f 6914 	mov.w	r9, r4, lsr #24
 8028e90:	ea4f 6813 	mov.w	r8, r3, lsr #24
 8028e94:	d801      	bhi.n	8028e9a <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0x7e>
 8028e96:	2f0f      	cmp	r7, #15
 8028e98:	d91b      	bls.n	8028ed2 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0xb6>
 8028e9a:	4b87      	ldr	r3, [pc, #540]	@ (80290b8 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0x29c>)
 8028e9c:	f44f 71fb 	mov.w	r1, #502	@ 0x1f6
 8028ea0:	4a86      	ldr	r2, [pc, #536]	@ (80290bc <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0x2a0>)
 8028ea2:	4887      	ldr	r0, [pc, #540]	@ (80290c0 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0x2a4>)
 8028ea4:	f001 fd46 	bl	802a934 <__assert_func>
 8028ea8:	2200      	movs	r2, #0
 8028eaa:	e7cf      	b.n	8028e4c <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0x30>
 8028eac:	2600      	movs	r6, #0
 8028eae:	4632      	mov	r2, r6
 8028eb0:	e7d3      	b.n	8028e5a <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0x3e>
 8028eb2:	2600      	movs	r6, #0
 8028eb4:	e7d1      	b.n	8028e5a <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0x3e>
 8028eb6:	4606      	mov	r6, r0
 8028eb8:	e7cf      	b.n	8028e5a <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0x3e>
 8028eba:	2400      	movs	r4, #0
 8028ebc:	e7da      	b.n	8028e74 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0x58>
 8028ebe:	2300      	movs	r3, #0
 8028ec0:	461c      	mov	r4, r3
 8028ec2:	e7de      	b.n	8028e82 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0x66>
 8028ec4:	463b      	mov	r3, r7
 8028ec6:	463c      	mov	r4, r7
 8028ec8:	e7db      	b.n	8028e82 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0x66>
 8028eca:	2300      	movs	r3, #0
 8028ecc:	e7d9      	b.n	8028e82 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0x66>
 8028ece:	4603      	mov	r3, r0
 8028ed0:	e7d7      	b.n	8028e82 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0x66>
 8028ed2:	b280      	uxth	r0, r0
 8028ed4:	b2bf      	uxth	r7, r7
 8028ed6:	fb07 fe00 	mul.w	lr, r7, r0
 8028eda:	0100      	lsls	r0, r0, #4
 8028edc:	ebce 1707 	rsb	r7, lr, r7, lsl #4
 8028ee0:	eba0 0c0e 	sub.w	ip, r0, lr
 8028ee4:	f5c0 7580 	rsb	r5, r0, #256	@ 0x100
 8028ee8:	b2bf      	uxth	r7, r7
 8028eea:	fa1f fc8c 	uxth.w	ip, ip
 8028eee:	1bed      	subs	r5, r5, r7
 8028ef0:	fb0c f00a 	mul.w	r0, ip, sl
 8028ef4:	b2ad      	uxth	r5, r5
 8028ef6:	fb0b 0005 	mla	r0, fp, r5, r0
 8028efa:	fb07 0009 	mla	r0, r7, r9, r0
 8028efe:	fb0e 0008 	mla	r0, lr, r8, r0
 8028f02:	f3c0 2007 	ubfx	r0, r0, #8, #8
 8028f06:	9001      	str	r0, [sp, #4]
 8028f08:	2800      	cmp	r0, #0
 8028f0a:	f000 80d1 	beq.w	80290b0 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0x294>
 8028f0e:	f1bb 0fff 	cmp.w	fp, #255	@ 0xff
 8028f12:	d018      	beq.n	8028f46 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0x12a>
 8028f14:	f002 10ff 	and.w	r0, r2, #16711935	@ 0xff00ff
 8028f18:	f402 427f 	and.w	r2, r2, #65280	@ 0xff00
 8028f1c:	fb0b f000 	mul.w	r0, fp, r0
 8028f20:	fb0b fb02 	mul.w	fp, fp, r2
 8028f24:	0a02      	lsrs	r2, r0, #8
 8028f26:	f100 1001 	add.w	r0, r0, #65537	@ 0x10001
 8028f2a:	f002 12ff 	and.w	r2, r2, #16711935	@ 0xff00ff
 8028f2e:	4402      	add	r2, r0
 8028f30:	f50b 7080 	add.w	r0, fp, #256	@ 0x100
 8028f34:	eb00 201b 	add.w	r0, r0, fp, lsr #8
 8028f38:	0a12      	lsrs	r2, r2, #8
 8028f3a:	0a00      	lsrs	r0, r0, #8
 8028f3c:	f002 12ff 	and.w	r2, r2, #16711935	@ 0xff00ff
 8028f40:	f400 407f 	and.w	r0, r0, #65280	@ 0xff00
 8028f44:	4302      	orrs	r2, r0
 8028f46:	f1ba 0fff 	cmp.w	sl, #255	@ 0xff
 8028f4a:	d01a      	beq.n	8028f82 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0x166>
 8028f4c:	f006 10ff 	and.w	r0, r6, #16711935	@ 0xff00ff
 8028f50:	f406 467f 	and.w	r6, r6, #65280	@ 0xff00
 8028f54:	fb0a f000 	mul.w	r0, sl, r0
 8028f58:	fb0a fa06 	mul.w	sl, sl, r6
 8028f5c:	0a06      	lsrs	r6, r0, #8
 8028f5e:	f100 1001 	add.w	r0, r0, #65537	@ 0x10001
 8028f62:	f006 16ff 	and.w	r6, r6, #16711935	@ 0xff00ff
 8028f66:	4406      	add	r6, r0
 8028f68:	f50a 7080 	add.w	r0, sl, #256	@ 0x100
 8028f6c:	eb00 2a1a 	add.w	sl, r0, sl, lsr #8
 8028f70:	0a36      	lsrs	r6, r6, #8
 8028f72:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 8028f76:	f006 16ff 	and.w	r6, r6, #16711935	@ 0xff00ff
 8028f7a:	f40a 4a7f 	and.w	sl, sl, #65280	@ 0xff00
 8028f7e:	ea46 060a 	orr.w	r6, r6, sl
 8028f82:	f1b9 0fff 	cmp.w	r9, #255	@ 0xff
 8028f86:	d01b      	beq.n	8028fc0 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0x1a4>
 8028f88:	f004 1aff 	and.w	sl, r4, #16711935	@ 0xff00ff
 8028f8c:	f404 447f 	and.w	r4, r4, #65280	@ 0xff00
 8028f90:	fb09 fa0a 	mul.w	sl, r9, sl
 8028f94:	fb09 f004 	mul.w	r0, r9, r4
 8028f98:	ea4f 241a 	mov.w	r4, sl, lsr #8
 8028f9c:	f10a 1a01 	add.w	sl, sl, #65537	@ 0x10001
 8028fa0:	f500 7980 	add.w	r9, r0, #256	@ 0x100
 8028fa4:	f004 14ff 	and.w	r4, r4, #16711935	@ 0xff00ff
 8028fa8:	eb09 2910 	add.w	r9, r9, r0, lsr #8
 8028fac:	4454      	add	r4, sl
 8028fae:	ea4f 2919 	mov.w	r9, r9, lsr #8
 8028fb2:	0a24      	lsrs	r4, r4, #8
 8028fb4:	f409 497f 	and.w	r9, r9, #65280	@ 0xff00
 8028fb8:	f004 14ff 	and.w	r4, r4, #16711935	@ 0xff00ff
 8028fbc:	ea44 0409 	orr.w	r4, r4, r9
 8028fc0:	f1b8 0fff 	cmp.w	r8, #255	@ 0xff
 8028fc4:	d01b      	beq.n	8028ffe <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0x1e2>
 8028fc6:	f003 19ff 	and.w	r9, r3, #16711935	@ 0xff00ff
 8028fca:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 8028fce:	fb08 f909 	mul.w	r9, r8, r9
 8028fd2:	fb08 f003 	mul.w	r0, r8, r3
 8028fd6:	ea4f 2319 	mov.w	r3, r9, lsr #8
 8028fda:	f109 1901 	add.w	r9, r9, #65537	@ 0x10001
 8028fde:	f500 7880 	add.w	r8, r0, #256	@ 0x100
 8028fe2:	f003 13ff 	and.w	r3, r3, #16711935	@ 0xff00ff
 8028fe6:	eb08 2810 	add.w	r8, r8, r0, lsr #8
 8028fea:	444b      	add	r3, r9
 8028fec:	ea4f 2818 	mov.w	r8, r8, lsr #8
 8028ff0:	0a1b      	lsrs	r3, r3, #8
 8028ff2:	f408 487f 	and.w	r8, r8, #65280	@ 0xff00
 8028ff6:	f003 13ff 	and.w	r3, r3, #16711935	@ 0xff00ff
 8028ffa:	ea43 0308 	orr.w	r3, r3, r8
 8028ffe:	f006 18ff 	and.w	r8, r6, #16711935	@ 0xff00ff
 8029002:	f406 467f 	and.w	r6, r6, #65280	@ 0xff00
 8029006:	f002 19ff 	and.w	r9, r2, #16711935	@ 0xff00ff
 802900a:	f402 427f 	and.w	r2, r2, #65280	@ 0xff00
 802900e:	fb0c f808 	mul.w	r8, ip, r8
 8029012:	8808      	ldrh	r0, [r1, #0]
 8029014:	fb0c f606 	mul.w	r6, ip, r6
 8029018:	fb05 8909 	mla	r9, r5, r9, r8
 802901c:	f004 18ff 	and.w	r8, r4, #16711935	@ 0xff00ff
 8029020:	fb05 6502 	mla	r5, r5, r2, r6
 8029024:	f404 447f 	and.w	r4, r4, #65280	@ 0xff00
 8029028:	fb07 9908 	mla	r9, r7, r8, r9
 802902c:	f003 18ff 	and.w	r8, r3, #16711935	@ 0xff00ff
 8029030:	fb07 5704 	mla	r7, r7, r4, r5
 8029034:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 8029038:	fb0e 9808 	mla	r8, lr, r8, r9
 802903c:	10c4      	asrs	r4, r0, #3
 802903e:	fb0e 7e03 	mla	lr, lr, r3, r7
 8029042:	9b01      	ldr	r3, [sp, #4]
 8029044:	ea4f 2818 	mov.w	r8, r8, lsr #8
 8029048:	f004 04fc 	and.w	r4, r4, #252	@ 0xfc
 802904c:	43da      	mvns	r2, r3
 802904e:	1203      	asrs	r3, r0, #8
 8029050:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 8029054:	f008 18ff 	and.w	r8, r8, #16711935	@ 0xff00ff
 8029058:	b2d2      	uxtb	r2, r2
 802905a:	f003 03f8 	and.w	r3, r3, #248	@ 0xf8
 802905e:	00c0      	lsls	r0, r0, #3
 8029060:	f40e 4e7f 	and.w	lr, lr, #65280	@ 0xff00
 8029064:	4353      	muls	r3, r2
 8029066:	b2c0      	uxtb	r0, r0
 8029068:	ea48 0e0e 	orr.w	lr, r8, lr
 802906c:	4354      	muls	r4, r2
 802906e:	4350      	muls	r0, r2
 8029070:	1c5a      	adds	r2, r3, #1
 8029072:	eb02 2213 	add.w	r2, r2, r3, lsr #8
 8029076:	ea4f 431e 	mov.w	r3, lr, lsr #16
 802907a:	eb03 2312 	add.w	r3, r3, r2, lsr #8
 802907e:	1c62      	adds	r2, r4, #1
 8029080:	eb02 2414 	add.w	r4, r2, r4, lsr #8
 8029084:	ea4f 221e 	mov.w	r2, lr, lsr #8
 8029088:	021b      	lsls	r3, r3, #8
 802908a:	eb02 2214 	add.w	r2, r2, r4, lsr #8
 802908e:	f403 4378 	and.w	r3, r3, #63488	@ 0xf800
 8029092:	00d2      	lsls	r2, r2, #3
 8029094:	f402 62fc 	and.w	r2, r2, #2016	@ 0x7e0
 8029098:	4313      	orrs	r3, r2
 802909a:	1c42      	adds	r2, r0, #1
 802909c:	eb02 2010 	add.w	r0, r2, r0, lsr #8
 80290a0:	eb0e 2e10 	add.w	lr, lr, r0, lsr #8
 80290a4:	f3ce 0ec4 	ubfx	lr, lr, #3, #5
 80290a8:	ea4e 0e03 	orr.w	lr, lr, r3
 80290ac:	f8a1 e000 	strh.w	lr, [r1]
 80290b0:	b003      	add	sp, #12
 80290b2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80290b6:	bf00      	nop
 80290b8:	0802fad5 	.word	0x0802fad5
 80290bc:	080300a2 	.word	0x080300a2
 80290c0:	0802fb59 	.word	0x0802fb59

080290c4 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 80290c4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80290c8:	ed2d 8b08 	vpush	{d8-d11}
 80290cc:	b09b      	sub	sp, #108	@ 0x6c
 80290ce:	eeb0 aa40 	vmov.f32	s20, s0
 80290d2:	eef0 9a60 	vmov.f32	s19, s1
 80290d6:	9218      	str	r2, [sp, #96]	@ 0x60
 80290d8:	eeb0 9a41 	vmov.f32	s18, s2
 80290dc:	9a31      	ldr	r2, [sp, #196]	@ 0xc4
 80290de:	eeb0 8a62 	vmov.f32	s16, s5
 80290e2:	9019      	str	r0, [sp, #100]	@ 0x64
 80290e4:	eef0 8a43 	vmov.f32	s17, s6
 80290e8:	6850      	ldr	r0, [r2, #4]
 80290ea:	eef0 ba44 	vmov.f32	s23, s8
 80290ee:	9116      	str	r1, [sp, #88]	@ 0x58
 80290f0:	eeb0 ba64 	vmov.f32	s22, s9
 80290f4:	9307      	str	r3, [sp, #28]
 80290f6:	eef0 aa45 	vmov.f32	s21, s10
 80290fa:	6812      	ldr	r2, [r2, #0]
 80290fc:	e9dd 1332 	ldrd	r1, r3, [sp, #200]	@ 0xc8
 8029100:	e9dd 462d 	ldrd	r4, r6, [sp, #180]	@ 0xb4
 8029104:	fb00 1303 	mla	r3, r0, r3, r1
 8029108:	eb02 0343 	add.w	r3, r2, r3, lsl #1
 802910c:	930a      	str	r3, [sp, #40]	@ 0x28
 802910e:	9b34      	ldr	r3, [sp, #208]	@ 0xd0
 8029110:	681b      	ldr	r3, [r3, #0]
 8029112:	930f      	str	r3, [sp, #60]	@ 0x3c
 8029114:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 8029116:	2b00      	cmp	r3, #0
 8029118:	dc03      	bgt.n	8029122 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5e>
 802911a:	9b18      	ldr	r3, [sp, #96]	@ 0x60
 802911c:	2b00      	cmp	r3, #0
 802911e:	f340 8387 	ble.w	8029830 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x76c>
 8029122:	9b34      	ldr	r3, [sp, #208]	@ 0xd0
 8029124:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 8029128:	f9b3 200c 	ldrsh.w	r2, [r3, #12]
 802912c:	1e48      	subs	r0, r1, #1
 802912e:	1e57      	subs	r7, r2, #1
 8029130:	9b07      	ldr	r3, [sp, #28]
 8029132:	2b00      	cmp	r3, #0
 8029134:	f340 8166 	ble.w	8029404 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x340>
 8029138:	ea5f 4c24 	movs.w	ip, r4, asr #16
 802913c:	ea4f 4326 	mov.w	r3, r6, asr #16
 8029140:	d406      	bmi.n	8029150 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8c>
 8029142:	4584      	cmp	ip, r0
 8029144:	da04      	bge.n	8029150 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8c>
 8029146:	2b00      	cmp	r3, #0
 8029148:	db02      	blt.n	8029150 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8c>
 802914a:	42bb      	cmp	r3, r7
 802914c:	f2c0 815b 	blt.w	8029406 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x342>
 8029150:	f11c 0c01 	adds.w	ip, ip, #1
 8029154:	f100 814b 	bmi.w	80293ee <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x32a>
 8029158:	4561      	cmp	r1, ip
 802915a:	f2c0 8148 	blt.w	80293ee <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x32a>
 802915e:	3301      	adds	r3, #1
 8029160:	f100 8145 	bmi.w	80293ee <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x32a>
 8029164:	429a      	cmp	r2, r3
 8029166:	f2c0 8142 	blt.w	80293ee <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x32a>
 802916a:	9b07      	ldr	r3, [sp, #28]
 802916c:	9f0a      	ldr	r7, [sp, #40]	@ 0x28
 802916e:	9317      	str	r3, [sp, #92]	@ 0x5c
 8029170:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 8029172:	2b00      	cmp	r3, #0
 8029174:	f340 8165 	ble.w	8029442 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x37e>
 8029178:	9a34      	ldr	r2, [sp, #208]	@ 0xd0
 802917a:	ea4f 4c26 	mov.w	ip, r6, asr #16
 802917e:	9b34      	ldr	r3, [sp, #208]	@ 0xd0
 8029180:	f3c4 3103 	ubfx	r1, r4, #12, #4
 8029184:	f8d2 e00c 	ldr.w	lr, [r2, #12]
 8029188:	1422      	asrs	r2, r4, #16
 802918a:	f3c6 3003 	ubfx	r0, r6, #12, #4
 802918e:	689b      	ldr	r3, [r3, #8]
 8029190:	f100 81d5 	bmi.w	802953e <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x47a>
 8029194:	f103 38ff 	add.w	r8, r3, #4294967295
 8029198:	4542      	cmp	r2, r8
 802919a:	f280 81d0 	bge.w	802953e <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x47a>
 802919e:	f1bc 0f00 	cmp.w	ip, #0
 80291a2:	f2c0 81cc 	blt.w	802953e <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x47a>
 80291a6:	f10e 38ff 	add.w	r8, lr, #4294967295
 80291aa:	45c4      	cmp	ip, r8
 80291ac:	f280 81c7 	bge.w	802953e <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x47a>
 80291b0:	b21b      	sxth	r3, r3
 80291b2:	9d0f      	ldr	r5, [sp, #60]	@ 0x3c
 80291b4:	fb0c 2203 	mla	r2, ip, r3, r2
 80291b8:	eb05 0882 	add.w	r8, r5, r2, lsl #2
 80291bc:	f855 2022 	ldr.w	r2, [r5, r2, lsl #2]
 80291c0:	ea4f 6e12 	mov.w	lr, r2, lsr #24
 80291c4:	2900      	cmp	r1, #0
 80291c6:	f000 8182 	beq.w	80294ce <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x40a>
 80291ca:	f8d8 5004 	ldr.w	r5, [r8, #4]
 80291ce:	950b      	str	r5, [sp, #44]	@ 0x2c
 80291d0:	0e2d      	lsrs	r5, r5, #24
 80291d2:	9512      	str	r5, [sp, #72]	@ 0x48
 80291d4:	b180      	cbz	r0, 80291f8 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x134>
 80291d6:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 80291da:	3b01      	subs	r3, #1
 80291dc:	009b      	lsls	r3, r3, #2
 80291de:	3304      	adds	r3, #4
 80291e0:	eb08 0c03 	add.w	ip, r8, r3
 80291e4:	f858 3003 	ldr.w	r3, [r8, r3]
 80291e8:	9308      	str	r3, [sp, #32]
 80291ea:	0e1b      	lsrs	r3, r3, #24
 80291ec:	9310      	str	r3, [sp, #64]	@ 0x40
 80291ee:	f8dc 3004 	ldr.w	r3, [ip, #4]
 80291f2:	930c      	str	r3, [sp, #48]	@ 0x30
 80291f4:	0e1b      	lsrs	r3, r3, #24
 80291f6:	9313      	str	r3, [sp, #76]	@ 0x4c
 80291f8:	b289      	uxth	r1, r1
 80291fa:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 80291fc:	b280      	uxth	r0, r0
 80291fe:	9d10      	ldr	r5, [sp, #64]	@ 0x40
 8029200:	fb01 f900 	mul.w	r9, r1, r0
 8029204:	0109      	lsls	r1, r1, #4
 8029206:	ebc9 1000 	rsb	r0, r9, r0, lsl #4
 802920a:	eba1 0809 	sub.w	r8, r1, r9
 802920e:	f5c1 7180 	rsb	r1, r1, #256	@ 0x100
 8029212:	b280      	uxth	r0, r0
 8029214:	fa1f f888 	uxth.w	r8, r8
 8029218:	1a09      	subs	r1, r1, r0
 802921a:	fb08 f303 	mul.w	r3, r8, r3
 802921e:	b289      	uxth	r1, r1
 8029220:	fb01 330e 	mla	r3, r1, lr, r3
 8029224:	fb00 3305 	mla	r3, r0, r5, r3
 8029228:	9d13      	ldr	r5, [sp, #76]	@ 0x4c
 802922a:	fb09 3305 	mla	r3, r9, r5, r3
 802922e:	f3c3 2307 	ubfx	r3, r3, #8, #8
 8029232:	2b00      	cmp	r3, #0
 8029234:	f000 80d2 	beq.w	80293dc <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x318>
 8029238:	f1be 0fff 	cmp.w	lr, #255	@ 0xff
 802923c:	d01b      	beq.n	8029276 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1b2>
 802923e:	f002 1aff 	and.w	sl, r2, #16711935	@ 0xff00ff
 8029242:	f402 427f 	and.w	r2, r2, #65280	@ 0xff00
 8029246:	fb0e fa0a 	mul.w	sl, lr, sl
 802924a:	fb0e fe02 	mul.w	lr, lr, r2
 802924e:	ea4f 221a 	mov.w	r2, sl, lsr #8
 8029252:	f10a 1a01 	add.w	sl, sl, #65537	@ 0x10001
 8029256:	f50e 7c80 	add.w	ip, lr, #256	@ 0x100
 802925a:	f002 12ff 	and.w	r2, r2, #16711935	@ 0xff00ff
 802925e:	eb0c 2c1e 	add.w	ip, ip, lr, lsr #8
 8029262:	4452      	add	r2, sl
 8029264:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 8029268:	0a12      	lsrs	r2, r2, #8
 802926a:	f40c 4c7f 	and.w	ip, ip, #65280	@ 0xff00
 802926e:	f002 12ff 	and.w	r2, r2, #16711935	@ 0xff00ff
 8029272:	ea42 020c 	orr.w	r2, r2, ip
 8029276:	9d12      	ldr	r5, [sp, #72]	@ 0x48
 8029278:	2dff      	cmp	r5, #255	@ 0xff
 802927a:	d021      	beq.n	80292c0 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1fc>
 802927c:	9d0b      	ldr	r5, [sp, #44]	@ 0x2c
 802927e:	f005 1bff 	and.w	fp, r5, #16711935	@ 0xff00ff
 8029282:	9d12      	ldr	r5, [sp, #72]	@ 0x48
 8029284:	fb05 fb0b 	mul.w	fp, r5, fp
 8029288:	9d0b      	ldr	r5, [sp, #44]	@ 0x2c
 802928a:	f405 4a7f 	and.w	sl, r5, #65280	@ 0xff00
 802928e:	9d12      	ldr	r5, [sp, #72]	@ 0x48
 8029290:	ea4f 2e1b 	mov.w	lr, fp, lsr #8
 8029294:	f10b 1b01 	add.w	fp, fp, #65537	@ 0x10001
 8029298:	fb05 fa0a 	mul.w	sl, r5, sl
 802929c:	f00e 1eff 	and.w	lr, lr, #16711935	@ 0xff00ff
 80292a0:	f50a 7c80 	add.w	ip, sl, #256	@ 0x100
 80292a4:	44de      	add	lr, fp
 80292a6:	eb0c 2a1a 	add.w	sl, ip, sl, lsr #8
 80292aa:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 80292ae:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 80292b2:	f00e 1eff 	and.w	lr, lr, #16711935	@ 0xff00ff
 80292b6:	f40a 4a7f 	and.w	sl, sl, #65280	@ 0xff00
 80292ba:	ea4e 050a 	orr.w	r5, lr, sl
 80292be:	950b      	str	r5, [sp, #44]	@ 0x2c
 80292c0:	9d10      	ldr	r5, [sp, #64]	@ 0x40
 80292c2:	2dff      	cmp	r5, #255	@ 0xff
 80292c4:	d021      	beq.n	802930a <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x246>
 80292c6:	9d08      	ldr	r5, [sp, #32]
 80292c8:	f005 1bff 	and.w	fp, r5, #16711935	@ 0xff00ff
 80292cc:	9d10      	ldr	r5, [sp, #64]	@ 0x40
 80292ce:	fb05 fb0b 	mul.w	fp, r5, fp
 80292d2:	9d08      	ldr	r5, [sp, #32]
 80292d4:	f405 4e7f 	and.w	lr, r5, #65280	@ 0xff00
 80292d8:	9d10      	ldr	r5, [sp, #64]	@ 0x40
 80292da:	fb05 fa0e 	mul.w	sl, r5, lr
 80292de:	ea4f 2e1b 	mov.w	lr, fp, lsr #8
 80292e2:	f10b 1b01 	add.w	fp, fp, #65537	@ 0x10001
 80292e6:	f00e 1eff 	and.w	lr, lr, #16711935	@ 0xff00ff
 80292ea:	f50a 7c80 	add.w	ip, sl, #256	@ 0x100
 80292ee:	44de      	add	lr, fp
 80292f0:	eb0c 2a1a 	add.w	sl, ip, sl, lsr #8
 80292f4:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 80292f8:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 80292fc:	f00e 1eff 	and.w	lr, lr, #16711935	@ 0xff00ff
 8029300:	f40a 4a7f 	and.w	sl, sl, #65280	@ 0xff00
 8029304:	ea4e 050a 	orr.w	r5, lr, sl
 8029308:	9508      	str	r5, [sp, #32]
 802930a:	9d13      	ldr	r5, [sp, #76]	@ 0x4c
 802930c:	2dff      	cmp	r5, #255	@ 0xff
 802930e:	d021      	beq.n	8029354 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x290>
 8029310:	9d0c      	ldr	r5, [sp, #48]	@ 0x30
 8029312:	f005 1bff 	and.w	fp, r5, #16711935	@ 0xff00ff
 8029316:	9d13      	ldr	r5, [sp, #76]	@ 0x4c
 8029318:	fb05 fb0b 	mul.w	fp, r5, fp
 802931c:	9d0c      	ldr	r5, [sp, #48]	@ 0x30
 802931e:	f405 4a7f 	and.w	sl, r5, #65280	@ 0xff00
 8029322:	9d13      	ldr	r5, [sp, #76]	@ 0x4c
 8029324:	ea4f 2e1b 	mov.w	lr, fp, lsr #8
 8029328:	f10b 1b01 	add.w	fp, fp, #65537	@ 0x10001
 802932c:	fb05 fa0a 	mul.w	sl, r5, sl
 8029330:	f00e 1eff 	and.w	lr, lr, #16711935	@ 0xff00ff
 8029334:	f50a 7c80 	add.w	ip, sl, #256	@ 0x100
 8029338:	44de      	add	lr, fp
 802933a:	eb0c 2a1a 	add.w	sl, ip, sl, lsr #8
 802933e:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 8029342:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 8029346:	f00e 1eff 	and.w	lr, lr, #16711935	@ 0xff00ff
 802934a:	f40a 4a7f 	and.w	sl, sl, #65280	@ 0xff00
 802934e:	ea4e 050a 	orr.w	r5, lr, sl
 8029352:	950c      	str	r5, [sp, #48]	@ 0x30
 8029354:	9d0b      	ldr	r5, [sp, #44]	@ 0x2c
 8029356:	f002 1eff 	and.w	lr, r2, #16711935	@ 0xff00ff
 802935a:	f402 427f 	and.w	r2, r2, #65280	@ 0xff00
 802935e:	2bff      	cmp	r3, #255	@ 0xff
 8029360:	f005 1cff 	and.w	ip, r5, #16711935	@ 0xff00ff
 8029364:	9d08      	ldr	r5, [sp, #32]
 8029366:	fb08 fc0c 	mul.w	ip, r8, ip
 802936a:	fb01 cc0e 	mla	ip, r1, lr, ip
 802936e:	f005 1eff 	and.w	lr, r5, #16711935	@ 0xff00ff
 8029372:	9d0c      	ldr	r5, [sp, #48]	@ 0x30
 8029374:	fb00 cc0e 	mla	ip, r0, lr, ip
 8029378:	f005 1eff 	and.w	lr, r5, #16711935	@ 0xff00ff
 802937c:	9d0b      	ldr	r5, [sp, #44]	@ 0x2c
 802937e:	fb09 cc0e 	mla	ip, r9, lr, ip
 8029382:	f405 4e7f 	and.w	lr, r5, #65280	@ 0xff00
 8029386:	fb08 f80e 	mul.w	r8, r8, lr
 802938a:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 802938e:	fb01 8202 	mla	r2, r1, r2, r8
 8029392:	9908      	ldr	r1, [sp, #32]
 8029394:	f00c 1cff 	and.w	ip, ip, #16711935	@ 0xff00ff
 8029398:	f401 4a7f 	and.w	sl, r1, #65280	@ 0xff00
 802939c:	990c      	ldr	r1, [sp, #48]	@ 0x30
 802939e:	fb00 220a 	mla	r2, r0, sl, r2
 80293a2:	f401 407f 	and.w	r0, r1, #65280	@ 0xff00
 80293a6:	fb09 2900 	mla	r9, r9, r0, r2
 80293aa:	ea4f 2919 	mov.w	r9, r9, lsr #8
 80293ae:	f409 497f 	and.w	r9, r9, #65280	@ 0xff00
 80293b2:	ea4c 0c09 	orr.w	ip, ip, r9
 80293b6:	ea4f 221c 	mov.w	r2, ip, lsr #8
 80293ba:	f040 8091 	bne.w	80294e0 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x41c>
 80293be:	ea4f 135c 	mov.w	r3, ip, lsr #5
 80293c2:	f422 62ff 	bic.w	r2, r2, #2040	@ 0x7f8
 80293c6:	f403 63fc 	and.w	r3, r3, #2016	@ 0x7e0
 80293ca:	f022 0207 	bic.w	r2, r2, #7
 80293ce:	431a      	orrs	r2, r3
 80293d0:	f3cc 0cc4 	ubfx	ip, ip, #3, #5
 80293d4:	ea4c 0c02 	orr.w	ip, ip, r2
 80293d8:	f8a7 c000 	strh.w	ip, [r7]
 80293dc:	9b2f      	ldr	r3, [sp, #188]	@ 0xbc
 80293de:	3702      	adds	r7, #2
 80293e0:	441c      	add	r4, r3
 80293e2:	9b30      	ldr	r3, [sp, #192]	@ 0xc0
 80293e4:	441e      	add	r6, r3
 80293e6:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 80293e8:	3b01      	subs	r3, #1
 80293ea:	9317      	str	r3, [sp, #92]	@ 0x5c
 80293ec:	e6c0      	b.n	8029170 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xac>
 80293ee:	9b2f      	ldr	r3, [sp, #188]	@ 0xbc
 80293f0:	441c      	add	r4, r3
 80293f2:	9b30      	ldr	r3, [sp, #192]	@ 0xc0
 80293f4:	441e      	add	r6, r3
 80293f6:	9b07      	ldr	r3, [sp, #28]
 80293f8:	3b01      	subs	r3, #1
 80293fa:	9307      	str	r3, [sp, #28]
 80293fc:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80293fe:	3302      	adds	r3, #2
 8029400:	930a      	str	r3, [sp, #40]	@ 0x28
 8029402:	e695      	b.n	8029130 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6c>
 8029404:	d024      	beq.n	8029450 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x38c>
 8029406:	9b07      	ldr	r3, [sp, #28]
 8029408:	982f      	ldr	r0, [sp, #188]	@ 0xbc
 802940a:	3b01      	subs	r3, #1
 802940c:	fb00 4003 	mla	r0, r0, r3, r4
 8029410:	1400      	asrs	r0, r0, #16
 8029412:	f53f aeaa 	bmi.w	802916a <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa6>
 8029416:	3901      	subs	r1, #1
 8029418:	4288      	cmp	r0, r1
 802941a:	f6bf aea6 	bge.w	802916a <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa6>
 802941e:	9930      	ldr	r1, [sp, #192]	@ 0xc0
 8029420:	fb01 6303 	mla	r3, r1, r3, r6
 8029424:	141b      	asrs	r3, r3, #16
 8029426:	f53f aea0 	bmi.w	802916a <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa6>
 802942a:	3a01      	subs	r2, #1
 802942c:	4293      	cmp	r3, r2
 802942e:	f6bf ae9c 	bge.w	802916a <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa6>
 8029432:	f8dd b01c 	ldr.w	fp, [sp, #28]
 8029436:	f8dd 8028 	ldr.w	r8, [sp, #40]	@ 0x28
 802943a:	f1bb 0f00 	cmp.w	fp, #0
 802943e:	f300 809a 	bgt.w	8029576 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4b2>
 8029442:	9b07      	ldr	r3, [sp, #28]
 8029444:	ea23 75e3 	bic.w	r5, r3, r3, asr #31
 8029448:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 802944a:	eb03 0345 	add.w	r3, r3, r5, lsl #1
 802944e:	930a      	str	r3, [sp, #40]	@ 0x28
 8029450:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 8029452:	2b00      	cmp	r3, #0
 8029454:	f340 81ec 	ble.w	8029830 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x76c>
 8029458:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 802945c:	9b2c      	ldr	r3, [sp, #176]	@ 0xb0
 802945e:	ee3a aa2b 	vadd.f32	s20, s20, s23
 8029462:	ee79 9a8b 	vadd.f32	s19, s19, s22
 8029466:	eef0 6a48 	vmov.f32	s13, s16
 802946a:	eec7 7a0a 	vdiv.f32	s15, s14, s20
 802946e:	ee39 9a2a 	vadd.f32	s18, s18, s21
 8029472:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 8029476:	ee16 4a90 	vmov	r4, s13
 802947a:	eef0 6a68 	vmov.f32	s13, s17
 802947e:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 8029482:	ee16 6a90 	vmov	r6, s13
 8029486:	ee29 7aa7 	vmul.f32	s14, s19, s15
 802948a:	ee69 7a27 	vmul.f32	s15, s18, s15
 802948e:	ee37 8a48 	vsub.f32	s16, s14, s16
 8029492:	ee77 8ae8 	vsub.f32	s17, s15, s17
 8029496:	eebe 8ac8 	vcvt.s32.f32	s16, s16, #16
 802949a:	eefe 8ac8 	vcvt.s32.f32	s17, s17, #16
 802949e:	ee18 2a10 	vmov	r2, s16
 80294a2:	eeb0 8a47 	vmov.f32	s16, s14
 80294a6:	fb92 f3f3 	sdiv	r3, r2, r3
 80294aa:	ee18 2a90 	vmov	r2, s17
 80294ae:	932f      	str	r3, [sp, #188]	@ 0xbc
 80294b0:	9b2c      	ldr	r3, [sp, #176]	@ 0xb0
 80294b2:	eef0 8a67 	vmov.f32	s17, s15
 80294b6:	fb92 f3f3 	sdiv	r3, r2, r3
 80294ba:	9330      	str	r3, [sp, #192]	@ 0xc0
 80294bc:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 80294be:	9a18      	ldr	r2, [sp, #96]	@ 0x60
 80294c0:	3b01      	subs	r3, #1
 80294c2:	9316      	str	r3, [sp, #88]	@ 0x58
 80294c4:	9b2c      	ldr	r3, [sp, #176]	@ 0xb0
 80294c6:	bf08      	it	eq
 80294c8:	4613      	moveq	r3, r2
 80294ca:	9307      	str	r3, [sp, #28]
 80294cc:	e622      	b.n	8029114 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x50>
 80294ce:	2800      	cmp	r0, #0
 80294d0:	f43f ae92 	beq.w	80291f8 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x134>
 80294d4:	f858 3023 	ldr.w	r3, [r8, r3, lsl #2]
 80294d8:	9308      	str	r3, [sp, #32]
 80294da:	0e1b      	lsrs	r3, r3, #24
 80294dc:	9310      	str	r3, [sp, #64]	@ 0x40
 80294de:	e68b      	b.n	80291f8 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x134>
 80294e0:	8839      	ldrh	r1, [r7, #0]
 80294e2:	43db      	mvns	r3, r3
 80294e4:	4dd5      	ldr	r5, [pc, #852]	@ (802983c <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x778>)
 80294e6:	ea4f 2e21 	mov.w	lr, r1, asr #8
 80294ea:	fa5f f883 	uxtb.w	r8, r3
 80294ee:	f00e 0ef8 	and.w	lr, lr, #248	@ 0xf8
 80294f2:	10c8      	asrs	r0, r1, #3
 80294f4:	00cb      	lsls	r3, r1, #3
 80294f6:	fb0e fe08 	mul.w	lr, lr, r8
 80294fa:	f000 00fc 	and.w	r0, r0, #252	@ 0xfc
 80294fe:	b2db      	uxtb	r3, r3
 8029500:	f10e 0101 	add.w	r1, lr, #1
 8029504:	fb00 f008 	mul.w	r0, r0, r8
 8029508:	fb03 f308 	mul.w	r3, r3, r8
 802950c:	eb01 2e1e 	add.w	lr, r1, lr, lsr #8
 8029510:	ea4f 411c 	mov.w	r1, ip, lsr #16
 8029514:	eb01 211e 	add.w	r1, r1, lr, lsr #8
 8029518:	f100 0e01 	add.w	lr, r0, #1
 802951c:	eb0e 2010 	add.w	r0, lr, r0, lsr #8
 8029520:	b2c9      	uxtb	r1, r1
 8029522:	eb02 2210 	add.w	r2, r2, r0, lsr #8
 8029526:	ea05 2101 	and.w	r1, r5, r1, lsl #8
 802952a:	00d2      	lsls	r2, r2, #3
 802952c:	f402 62fc 	and.w	r2, r2, #2016	@ 0x7e0
 8029530:	430a      	orrs	r2, r1
 8029532:	1c59      	adds	r1, r3, #1
 8029534:	eb01 2313 	add.w	r3, r1, r3, lsr #8
 8029538:	eb0c 2c13 	add.w	ip, ip, r3, lsr #8
 802953c:	e748      	b.n	80293d0 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x30c>
 802953e:	f112 0801 	adds.w	r8, r2, #1
 8029542:	f53f af4b 	bmi.w	80293dc <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x318>
 8029546:	4543      	cmp	r3, r8
 8029548:	f6ff af48 	blt.w	80293dc <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x318>
 802954c:	f11c 0801 	adds.w	r8, ip, #1
 8029550:	f53f af44 	bmi.w	80293dc <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x318>
 8029554:	45c6      	cmp	lr, r8
 8029556:	f6ff af41 	blt.w	80293dc <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x318>
 802955a:	b21b      	sxth	r3, r3
 802955c:	e9cd 2c01 	strd	r2, ip, [sp, #4]
 8029560:	fa0f f28e 	sxth.w	r2, lr
 8029564:	e9cd 1003 	strd	r1, r0, [sp, #12]
 8029568:	9200      	str	r2, [sp, #0]
 802956a:	4639      	mov	r1, r7
 802956c:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 802956e:	9819      	ldr	r0, [sp, #100]	@ 0x64
 8029570:	f7ff fc54 	bl	8028e1c <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh>
 8029574:	e732      	b.n	80293dc <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x318>
 8029576:	9b34      	ldr	r3, [sp, #208]	@ 0xd0
 8029578:	1421      	asrs	r1, r4, #16
 802957a:	9d0f      	ldr	r5, [sp, #60]	@ 0x3c
 802957c:	f3c4 3203 	ubfx	r2, r4, #12, #4
 8029580:	f9b3 7008 	ldrsh.w	r7, [r3, #8]
 8029584:	1433      	asrs	r3, r6, #16
 8029586:	f3c6 3003 	ubfx	r0, r6, #12, #4
 802958a:	fb07 1303 	mla	r3, r7, r3, r1
 802958e:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 8029590:	eb01 0183 	add.w	r1, r1, r3, lsl #2
 8029594:	f855 3023 	ldr.w	r3, [r5, r3, lsl #2]
 8029598:	ea4f 6c13 	mov.w	ip, r3, lsr #24
 802959c:	2a00      	cmp	r2, #0
 802959e:	f000 8108 	beq.w	80297b2 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6ee>
 80295a2:	684d      	ldr	r5, [r1, #4]
 80295a4:	950d      	str	r5, [sp, #52]	@ 0x34
 80295a6:	0e2d      	lsrs	r5, r5, #24
 80295a8:	9514      	str	r5, [sp, #80]	@ 0x50
 80295aa:	b178      	cbz	r0, 80295cc <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x508>
 80295ac:	f107 4780 	add.w	r7, r7, #1073741824	@ 0x40000000
 80295b0:	3f01      	subs	r7, #1
 80295b2:	00bf      	lsls	r7, r7, #2
 80295b4:	3704      	adds	r7, #4
 80295b6:	eb01 0e07 	add.w	lr, r1, r7
 80295ba:	59c9      	ldr	r1, [r1, r7]
 80295bc:	9109      	str	r1, [sp, #36]	@ 0x24
 80295be:	0e09      	lsrs	r1, r1, #24
 80295c0:	9111      	str	r1, [sp, #68]	@ 0x44
 80295c2:	f8de 1004 	ldr.w	r1, [lr, #4]
 80295c6:	910e      	str	r1, [sp, #56]	@ 0x38
 80295c8:	0e09      	lsrs	r1, r1, #24
 80295ca:	9115      	str	r1, [sp, #84]	@ 0x54
 80295cc:	b292      	uxth	r2, r2
 80295ce:	9d11      	ldr	r5, [sp, #68]	@ 0x44
 80295d0:	b280      	uxth	r0, r0
 80295d2:	fb02 f900 	mul.w	r9, r2, r0
 80295d6:	0112      	lsls	r2, r2, #4
 80295d8:	ebc9 1000 	rsb	r0, r9, r0, lsl #4
 80295dc:	eba2 0e09 	sub.w	lr, r2, r9
 80295e0:	f5c2 7180 	rsb	r1, r2, #256	@ 0x100
 80295e4:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 80295e6:	b280      	uxth	r0, r0
 80295e8:	fa1f fe8e 	uxth.w	lr, lr
 80295ec:	1a09      	subs	r1, r1, r0
 80295ee:	fb0e f202 	mul.w	r2, lr, r2
 80295f2:	b289      	uxth	r1, r1
 80295f4:	fb01 220c 	mla	r2, r1, ip, r2
 80295f8:	fb00 2205 	mla	r2, r0, r5, r2
 80295fc:	9d15      	ldr	r5, [sp, #84]	@ 0x54
 80295fe:	fb09 2205 	mla	r2, r9, r5, r2
 8029602:	f3c2 2207 	ubfx	r2, r2, #8, #8
 8029606:	2a00      	cmp	r2, #0
 8029608:	f000 80ca 	beq.w	80297a0 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6dc>
 802960c:	f1bc 0fff 	cmp.w	ip, #255	@ 0xff
 8029610:	d019      	beq.n	8029646 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x582>
 8029612:	f003 1aff 	and.w	sl, r3, #16711935	@ 0xff00ff
 8029616:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 802961a:	fb0c fa0a 	mul.w	sl, ip, sl
 802961e:	fb0c fc03 	mul.w	ip, ip, r3
 8029622:	ea4f 231a 	mov.w	r3, sl, lsr #8
 8029626:	f10a 1a01 	add.w	sl, sl, #65537	@ 0x10001
 802962a:	f50c 7780 	add.w	r7, ip, #256	@ 0x100
 802962e:	f003 13ff 	and.w	r3, r3, #16711935	@ 0xff00ff
 8029632:	eb07 271c 	add.w	r7, r7, ip, lsr #8
 8029636:	4453      	add	r3, sl
 8029638:	0a3f      	lsrs	r7, r7, #8
 802963a:	0a1b      	lsrs	r3, r3, #8
 802963c:	f407 477f 	and.w	r7, r7, #65280	@ 0xff00
 8029640:	f003 13ff 	and.w	r3, r3, #16711935	@ 0xff00ff
 8029644:	433b      	orrs	r3, r7
 8029646:	9d14      	ldr	r5, [sp, #80]	@ 0x50
 8029648:	2dff      	cmp	r5, #255	@ 0xff
 802964a:	d020      	beq.n	802968e <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5ca>
 802964c:	9d0d      	ldr	r5, [sp, #52]	@ 0x34
 802964e:	f005 17ff 	and.w	r7, r5, #16711935	@ 0xff00ff
 8029652:	9d14      	ldr	r5, [sp, #80]	@ 0x50
 8029654:	436f      	muls	r7, r5
 8029656:	9d0d      	ldr	r5, [sp, #52]	@ 0x34
 8029658:	ea4f 2c17 	mov.w	ip, r7, lsr #8
 802965c:	f405 4a7f 	and.w	sl, r5, #65280	@ 0xff00
 8029660:	9d14      	ldr	r5, [sp, #80]	@ 0x50
 8029662:	f107 1701 	add.w	r7, r7, #65537	@ 0x10001
 8029666:	f00c 1cff 	and.w	ip, ip, #16711935	@ 0xff00ff
 802966a:	fb05 fa0a 	mul.w	sl, r5, sl
 802966e:	44bc      	add	ip, r7
 8029670:	f50a 7780 	add.w	r7, sl, #256	@ 0x100
 8029674:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 8029678:	eb07 2a1a 	add.w	sl, r7, sl, lsr #8
 802967c:	f00c 1cff 	and.w	ip, ip, #16711935	@ 0xff00ff
 8029680:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 8029684:	f40a 4a7f 	and.w	sl, sl, #65280	@ 0xff00
 8029688:	ea4c 050a 	orr.w	r5, ip, sl
 802968c:	950d      	str	r5, [sp, #52]	@ 0x34
 802968e:	9d11      	ldr	r5, [sp, #68]	@ 0x44
 8029690:	2dff      	cmp	r5, #255	@ 0xff
 8029692:	d020      	beq.n	80296d6 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x612>
 8029694:	9d09      	ldr	r5, [sp, #36]	@ 0x24
 8029696:	f005 17ff 	and.w	r7, r5, #16711935	@ 0xff00ff
 802969a:	9d11      	ldr	r5, [sp, #68]	@ 0x44
 802969c:	436f      	muls	r7, r5
 802969e:	9d09      	ldr	r5, [sp, #36]	@ 0x24
 80296a0:	f405 4c7f 	and.w	ip, r5, #65280	@ 0xff00
 80296a4:	9d11      	ldr	r5, [sp, #68]	@ 0x44
 80296a6:	fb05 fa0c 	mul.w	sl, r5, ip
 80296aa:	ea4f 2c17 	mov.w	ip, r7, lsr #8
 80296ae:	f107 1701 	add.w	r7, r7, #65537	@ 0x10001
 80296b2:	f00c 1cff 	and.w	ip, ip, #16711935	@ 0xff00ff
 80296b6:	44bc      	add	ip, r7
 80296b8:	f50a 7780 	add.w	r7, sl, #256	@ 0x100
 80296bc:	eb07 2a1a 	add.w	sl, r7, sl, lsr #8
 80296c0:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 80296c4:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 80296c8:	f00c 1cff 	and.w	ip, ip, #16711935	@ 0xff00ff
 80296cc:	f40a 4a7f 	and.w	sl, sl, #65280	@ 0xff00
 80296d0:	ea4c 050a 	orr.w	r5, ip, sl
 80296d4:	9509      	str	r5, [sp, #36]	@ 0x24
 80296d6:	9d15      	ldr	r5, [sp, #84]	@ 0x54
 80296d8:	2dff      	cmp	r5, #255	@ 0xff
 80296da:	d020      	beq.n	802971e <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x65a>
 80296dc:	9d0e      	ldr	r5, [sp, #56]	@ 0x38
 80296de:	f005 17ff 	and.w	r7, r5, #16711935	@ 0xff00ff
 80296e2:	9d15      	ldr	r5, [sp, #84]	@ 0x54
 80296e4:	436f      	muls	r7, r5
 80296e6:	9d0e      	ldr	r5, [sp, #56]	@ 0x38
 80296e8:	ea4f 2c17 	mov.w	ip, r7, lsr #8
 80296ec:	f405 4a7f 	and.w	sl, r5, #65280	@ 0xff00
 80296f0:	9d15      	ldr	r5, [sp, #84]	@ 0x54
 80296f2:	f107 1701 	add.w	r7, r7, #65537	@ 0x10001
 80296f6:	f00c 1cff 	and.w	ip, ip, #16711935	@ 0xff00ff
 80296fa:	fb05 fa0a 	mul.w	sl, r5, sl
 80296fe:	44bc      	add	ip, r7
 8029700:	f50a 7780 	add.w	r7, sl, #256	@ 0x100
 8029704:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 8029708:	eb07 2a1a 	add.w	sl, r7, sl, lsr #8
 802970c:	f00c 1cff 	and.w	ip, ip, #16711935	@ 0xff00ff
 8029710:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 8029714:	f40a 4a7f 	and.w	sl, sl, #65280	@ 0xff00
 8029718:	ea4c 050a 	orr.w	r5, ip, sl
 802971c:	950e      	str	r5, [sp, #56]	@ 0x38
 802971e:	9d0d      	ldr	r5, [sp, #52]	@ 0x34
 8029720:	f003 1cff 	and.w	ip, r3, #16711935	@ 0xff00ff
 8029724:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 8029728:	2aff      	cmp	r2, #255	@ 0xff
 802972a:	f005 17ff 	and.w	r7, r5, #16711935	@ 0xff00ff
 802972e:	9d09      	ldr	r5, [sp, #36]	@ 0x24
 8029730:	fb0e f707 	mul.w	r7, lr, r7
 8029734:	fb01 770c 	mla	r7, r1, ip, r7
 8029738:	f005 1cff 	and.w	ip, r5, #16711935	@ 0xff00ff
 802973c:	9d0e      	ldr	r5, [sp, #56]	@ 0x38
 802973e:	fb00 770c 	mla	r7, r0, ip, r7
 8029742:	f005 1cff 	and.w	ip, r5, #16711935	@ 0xff00ff
 8029746:	9d0d      	ldr	r5, [sp, #52]	@ 0x34
 8029748:	fb09 770c 	mla	r7, r9, ip, r7
 802974c:	f405 4c7f 	and.w	ip, r5, #65280	@ 0xff00
 8029750:	fb0e fe0c 	mul.w	lr, lr, ip
 8029754:	ea4f 2717 	mov.w	r7, r7, lsr #8
 8029758:	fb01 e303 	mla	r3, r1, r3, lr
 802975c:	9909      	ldr	r1, [sp, #36]	@ 0x24
 802975e:	f007 17ff 	and.w	r7, r7, #16711935	@ 0xff00ff
 8029762:	f401 4a7f 	and.w	sl, r1, #65280	@ 0xff00
 8029766:	990e      	ldr	r1, [sp, #56]	@ 0x38
 8029768:	fb00 330a 	mla	r3, r0, sl, r3
 802976c:	f401 4c7f 	and.w	ip, r1, #65280	@ 0xff00
 8029770:	fb09 3c0c 	mla	ip, r9, ip, r3
 8029774:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 8029778:	f40c 4c7f 	and.w	ip, ip, #65280	@ 0xff00
 802977c:	ea47 070c 	orr.w	r7, r7, ip
 8029780:	ea4f 2317 	mov.w	r3, r7, lsr #8
 8029784:	d11e      	bne.n	80297c4 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x700>
 8029786:	097a      	lsrs	r2, r7, #5
 8029788:	f423 63ff 	bic.w	r3, r3, #2040	@ 0x7f8
 802978c:	f3c7 07c4 	ubfx	r7, r7, #3, #5
 8029790:	f402 62fc 	and.w	r2, r2, #2016	@ 0x7e0
 8029794:	f023 0307 	bic.w	r3, r3, #7
 8029798:	4313      	orrs	r3, r2
 802979a:	431f      	orrs	r7, r3
 802979c:	f8a8 7000 	strh.w	r7, [r8]
 80297a0:	9b2f      	ldr	r3, [sp, #188]	@ 0xbc
 80297a2:	f108 0802 	add.w	r8, r8, #2
 80297a6:	f10b 3bff 	add.w	fp, fp, #4294967295
 80297aa:	441c      	add	r4, r3
 80297ac:	9b30      	ldr	r3, [sp, #192]	@ 0xc0
 80297ae:	441e      	add	r6, r3
 80297b0:	e643      	b.n	802943a <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x376>
 80297b2:	2800      	cmp	r0, #0
 80297b4:	f43f af0a 	beq.w	80295cc <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x508>
 80297b8:	f851 1027 	ldr.w	r1, [r1, r7, lsl #2]
 80297bc:	9109      	str	r1, [sp, #36]	@ 0x24
 80297be:	0e09      	lsrs	r1, r1, #24
 80297c0:	9111      	str	r1, [sp, #68]	@ 0x44
 80297c2:	e703      	b.n	80295cc <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x508>
 80297c4:	f8b8 1000 	ldrh.w	r1, [r8]
 80297c8:	43d2      	mvns	r2, r2
 80297ca:	ea4f 2c21 	mov.w	ip, r1, asr #8
 80297ce:	fa5f fe82 	uxtb.w	lr, r2
 80297d2:	f00c 0cf8 	and.w	ip, ip, #248	@ 0xf8
 80297d6:	10c8      	asrs	r0, r1, #3
 80297d8:	00ca      	lsls	r2, r1, #3
 80297da:	fb0c fc0e 	mul.w	ip, ip, lr
 80297de:	f000 00fc 	and.w	r0, r0, #252	@ 0xfc
 80297e2:	b2d2      	uxtb	r2, r2
 80297e4:	f10c 0101 	add.w	r1, ip, #1
 80297e8:	fb00 f00e 	mul.w	r0, r0, lr
 80297ec:	fb02 f20e 	mul.w	r2, r2, lr
 80297f0:	eb01 2c1c 	add.w	ip, r1, ip, lsr #8
 80297f4:	0c39      	lsrs	r1, r7, #16
 80297f6:	eb01 2c1c 	add.w	ip, r1, ip, lsr #8
 80297fa:	4910      	ldr	r1, [pc, #64]	@ (802983c <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x778>)
 80297fc:	fa5f fc8c 	uxtb.w	ip, ip
 8029800:	ea01 2c0c 	and.w	ip, r1, ip, lsl #8
 8029804:	1c41      	adds	r1, r0, #1
 8029806:	eb01 2010 	add.w	r0, r1, r0, lsr #8
 802980a:	1c51      	adds	r1, r2, #1
 802980c:	eb03 2010 	add.w	r0, r3, r0, lsr #8
 8029810:	eb01 2212 	add.w	r2, r1, r2, lsr #8
 8029814:	00c0      	lsls	r0, r0, #3
 8029816:	eb07 2712 	add.w	r7, r7, r2, lsr #8
 802981a:	f400 60fc 	and.w	r0, r0, #2016	@ 0x7e0
 802981e:	f3c7 07c4 	ubfx	r7, r7, #3, #5
 8029822:	ea4c 0c00 	orr.w	ip, ip, r0
 8029826:	ea47 0c0c 	orr.w	ip, r7, ip
 802982a:	f8a8 c000 	strh.w	ip, [r8]
 802982e:	e7b7      	b.n	80297a0 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6dc>
 8029830:	b01b      	add	sp, #108	@ 0x6c
 8029832:	ecbd 8b08 	vpop	{d8-d11}
 8029836:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 802983a:	bf00      	nop
 802983c:	fffff800 	.word	0xfffff800

08029840 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh>:
 8029840:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8029844:	e9dd c40a 	ldrd	ip, r4, [sp, #40]	@ 0x28
 8029848:	f9bd 8020 	ldrsh.w	r8, [sp, #32]
 802984c:	2c00      	cmp	r4, #0
 802984e:	f9bd 9024 	ldrsh.w	r9, [sp, #36]	@ 0x24
 8029852:	f89d 5030 	ldrb.w	r5, [sp, #48]	@ 0x30
 8029856:	fb04 ce03 	mla	lr, r4, r3, ip
 802985a:	f89d 7034 	ldrb.w	r7, [sp, #52]	@ 0x34
 802985e:	db60      	blt.n	8029922 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0xe2>
 8029860:	45a1      	cmp	r9, r4
 8029862:	dd5e      	ble.n	8029922 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0xe2>
 8029864:	f1bc 0f00 	cmp.w	ip, #0
 8029868:	db59      	blt.n	802991e <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0xde>
 802986a:	45e0      	cmp	r8, ip
 802986c:	dd57      	ble.n	802991e <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0xde>
 802986e:	ea4f 005e 	mov.w	r0, lr, lsr #1
 8029872:	f01e 0f01 	tst.w	lr, #1
 8029876:	5c16      	ldrb	r6, [r2, r0]
 8029878:	bf0c      	ite	eq
 802987a:	f006 060f 	andeq.w	r6, r6, #15
 802987e:	1136      	asrne	r6, r6, #4
 8029880:	eb06 1606 	add.w	r6, r6, r6, lsl #4
 8029884:	b2f6      	uxtb	r6, r6
 8029886:	f11c 0001 	adds.w	r0, ip, #1
 802988a:	d44d      	bmi.n	8029928 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0xe8>
 802988c:	4580      	cmp	r8, r0
 802988e:	dd4b      	ble.n	8029928 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0xe8>
 8029890:	2d00      	cmp	r5, #0
 8029892:	d04b      	beq.n	802992c <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0xec>
 8029894:	f10e 0a01 	add.w	sl, lr, #1
 8029898:	ea4f 005a 	mov.w	r0, sl, lsr #1
 802989c:	f01a 0f01 	tst.w	sl, #1
 80298a0:	5c10      	ldrb	r0, [r2, r0]
 80298a2:	bf0c      	ite	eq
 80298a4:	f000 000f 	andeq.w	r0, r0, #15
 80298a8:	1100      	asrne	r0, r0, #4
 80298aa:	eb00 1000 	add.w	r0, r0, r0, lsl #4
 80298ae:	b2c0      	uxtb	r0, r0
 80298b0:	3401      	adds	r4, #1
 80298b2:	d43f      	bmi.n	8029934 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0xf4>
 80298b4:	45a1      	cmp	r9, r4
 80298b6:	dd3d      	ble.n	8029934 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0xf4>
 80298b8:	2f00      	cmp	r7, #0
 80298ba:	f000 80a8 	beq.w	8029a0e <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0x1ce>
 80298be:	f1bc 0f00 	cmp.w	ip, #0
 80298c2:	db35      	blt.n	8029930 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0xf0>
 80298c4:	45e0      	cmp	r8, ip
 80298c6:	dd33      	ble.n	8029930 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0xf0>
 80298c8:	eb03 090e 	add.w	r9, r3, lr
 80298cc:	ea4f 0459 	mov.w	r4, r9, lsr #1
 80298d0:	f019 0f01 	tst.w	r9, #1
 80298d4:	5d14      	ldrb	r4, [r2, r4]
 80298d6:	bf0c      	ite	eq
 80298d8:	f004 040f 	andeq.w	r4, r4, #15
 80298dc:	1124      	asrne	r4, r4, #4
 80298de:	eb04 1404 	add.w	r4, r4, r4, lsl #4
 80298e2:	b2e4      	uxtb	r4, r4
 80298e4:	f11c 0c01 	adds.w	ip, ip, #1
 80298e8:	d427      	bmi.n	802993a <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0xfa>
 80298ea:	45e0      	cmp	r8, ip
 80298ec:	dd25      	ble.n	802993a <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0xfa>
 80298ee:	b335      	cbz	r5, 802993e <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0xfe>
 80298f0:	3301      	adds	r3, #1
 80298f2:	449e      	add	lr, r3
 80298f4:	ea4f 035e 	mov.w	r3, lr, lsr #1
 80298f8:	f01e 0f01 	tst.w	lr, #1
 80298fc:	5cd2      	ldrb	r2, [r2, r3]
 80298fe:	bf0c      	ite	eq
 8029900:	f002 020f 	andeq.w	r2, r2, #15
 8029904:	1112      	asrne	r2, r2, #4
 8029906:	eb02 1202 	add.w	r2, r2, r2, lsl #4
 802990a:	b2d3      	uxtb	r3, r2
 802990c:	2d0f      	cmp	r5, #15
 802990e:	d917      	bls.n	8029940 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0x100>
 8029910:	4b42      	ldr	r3, [pc, #264]	@ (8029a1c <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0x1dc>)
 8029912:	f44f 71fb 	mov.w	r1, #502	@ 0x1f6
 8029916:	4a42      	ldr	r2, [pc, #264]	@ (8029a20 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0x1e0>)
 8029918:	4842      	ldr	r0, [pc, #264]	@ (8029a24 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0x1e4>)
 802991a:	f001 f80b 	bl	802a934 <__assert_func>
 802991e:	2600      	movs	r6, #0
 8029920:	e7b1      	b.n	8029886 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0x46>
 8029922:	2000      	movs	r0, #0
 8029924:	4606      	mov	r6, r0
 8029926:	e7c3      	b.n	80298b0 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0x70>
 8029928:	2000      	movs	r0, #0
 802992a:	e7c1      	b.n	80298b0 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0x70>
 802992c:	4628      	mov	r0, r5
 802992e:	e7bf      	b.n	80298b0 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0x70>
 8029930:	2400      	movs	r4, #0
 8029932:	e7d7      	b.n	80298e4 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0xa4>
 8029934:	2300      	movs	r3, #0
 8029936:	461c      	mov	r4, r3
 8029938:	e7e8      	b.n	802990c <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0xcc>
 802993a:	2300      	movs	r3, #0
 802993c:	e7e6      	b.n	802990c <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0xcc>
 802993e:	462b      	mov	r3, r5
 8029940:	2f0f      	cmp	r7, #15
 8029942:	d8e5      	bhi.n	8029910 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0xd0>
 8029944:	b2ad      	uxth	r5, r5
 8029946:	b2bf      	uxth	r7, r7
 8029948:	fb05 fc07 	mul.w	ip, r5, r7
 802994c:	012d      	lsls	r5, r5, #4
 802994e:	ebcc 1707 	rsb	r7, ip, r7, lsl #4
 8029952:	f5c5 7280 	rsb	r2, r5, #256	@ 0x100
 8029956:	eba5 050c 	sub.w	r5, r5, ip
 802995a:	b2bf      	uxth	r7, r7
 802995c:	b2ad      	uxth	r5, r5
 802995e:	1bd2      	subs	r2, r2, r7
 8029960:	4368      	muls	r0, r5
 8029962:	b292      	uxth	r2, r2
 8029964:	fb06 0002 	mla	r0, r6, r2, r0
 8029968:	fb07 0404 	mla	r4, r7, r4, r0
 802996c:	fb0c 4303 	mla	r3, ip, r3, r4
 8029970:	f3c3 2307 	ubfx	r3, r3, #8, #8
 8029974:	b1b3      	cbz	r3, 80299a4 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0x164>
 8029976:	f89d 2038 	ldrb.w	r2, [sp, #56]	@ 0x38
 802997a:	435a      	muls	r2, r3
 802997c:	1c53      	adds	r3, r2, #1
 802997e:	eb03 2312 	add.w	r3, r3, r2, lsr #8
 8029982:	4a29      	ldr	r2, [pc, #164]	@ (8029a28 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0x1e8>)
 8029984:	121b      	asrs	r3, r3, #8
 8029986:	6812      	ldr	r2, [r2, #0]
 8029988:	2bff      	cmp	r3, #255	@ 0xff
 802998a:	ea4f 2612 	mov.w	r6, r2, lsr #8
 802998e:	d10b      	bne.n	80299a8 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0x168>
 8029990:	0950      	lsrs	r0, r2, #5
 8029992:	4b26      	ldr	r3, [pc, #152]	@ (8029a2c <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0x1ec>)
 8029994:	f3c2 02c4 	ubfx	r2, r2, #3, #5
 8029998:	f400 60fc 	and.w	r0, r0, #2016	@ 0x7e0
 802999c:	4033      	ands	r3, r6
 802999e:	4318      	orrs	r0, r3
 80299a0:	4302      	orrs	r2, r0
 80299a2:	800a      	strh	r2, [r1, #0]
 80299a4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80299a8:	880d      	ldrh	r5, [r1, #0]
 80299aa:	b29f      	uxth	r7, r3
 80299ac:	f3c2 4007 	ubfx	r0, r2, #16, #8
 80299b0:	43db      	mvns	r3, r3
 80299b2:	122c      	asrs	r4, r5, #8
 80299b4:	fb10 f007 	smulbb	r0, r0, r7
 80299b8:	b2db      	uxtb	r3, r3
 80299ba:	f004 04f8 	and.w	r4, r4, #248	@ 0xf8
 80299be:	b2f6      	uxtb	r6, r6
 80299c0:	b2d2      	uxtb	r2, r2
 80299c2:	fb04 0403 	mla	r4, r4, r3, r0
 80299c6:	10e8      	asrs	r0, r5, #3
 80299c8:	fb12 f207 	smulbb	r2, r2, r7
 80299cc:	00ed      	lsls	r5, r5, #3
 80299ce:	f000 00fc 	and.w	r0, r0, #252	@ 0xfc
 80299d2:	b2a4      	uxth	r4, r4
 80299d4:	fb16 f607 	smulbb	r6, r6, r7
 80299d8:	b2ed      	uxtb	r5, r5
 80299da:	fb00 6603 	mla	r6, r0, r3, r6
 80299de:	fb05 2303 	mla	r3, r5, r3, r2
 80299e2:	b2b0      	uxth	r0, r6
 80299e4:	b29a      	uxth	r2, r3
 80299e6:	1c63      	adds	r3, r4, #1
 80299e8:	eb03 2414 	add.w	r4, r3, r4, lsr #8
 80299ec:	1c53      	adds	r3, r2, #1
 80299ee:	eb03 2312 	add.w	r3, r3, r2, lsr #8
 80299f2:	1c42      	adds	r2, r0, #1
 80299f4:	f404 4478 	and.w	r4, r4, #63488	@ 0xf800
 80299f8:	eb02 2010 	add.w	r0, r2, r0, lsr #8
 80299fc:	f3c3 23c4 	ubfx	r3, r3, #11, #5
 8029a00:	0940      	lsrs	r0, r0, #5
 8029a02:	4323      	orrs	r3, r4
 8029a04:	f400 60fc 	and.w	r0, r0, #2016	@ 0x7e0
 8029a08:	4303      	orrs	r3, r0
 8029a0a:	800b      	strh	r3, [r1, #0]
 8029a0c:	e7ca      	b.n	80299a4 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0x164>
 8029a0e:	2d0f      	cmp	r5, #15
 8029a10:	f63f af7e 	bhi.w	8029910 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0xd0>
 8029a14:	463b      	mov	r3, r7
 8029a16:	463c      	mov	r4, r7
 8029a18:	e794      	b.n	8029944 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0x104>
 8029a1a:	bf00      	nop
 8029a1c:	0802fad5 	.word	0x0802fad5
 8029a20:	080300a2 	.word	0x080300a2
 8029a24:	0802fb59 	.word	0x0802fb59
 8029a28:	2400b888 	.word	0x2400b888
 8029a2c:	00fff800 	.word	0x00fff800

08029a30 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 8029a30:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8029a34:	ed2d 8b08 	vpush	{d8-d11}
 8029a38:	b097      	sub	sp, #92	@ 0x5c
 8029a3a:	eeb0 aa40 	vmov.f32	s20, s0
 8029a3e:	eef0 9a60 	vmov.f32	s19, s1
 8029a42:	9214      	str	r2, [sp, #80]	@ 0x50
 8029a44:	eeb0 9a41 	vmov.f32	s18, s2
 8029a48:	9a2d      	ldr	r2, [sp, #180]	@ 0xb4
 8029a4a:	eeb0 8a62 	vmov.f32	s16, s5
 8029a4e:	9309      	str	r3, [sp, #36]	@ 0x24
 8029a50:	eef0 8a43 	vmov.f32	s17, s6
 8029a54:	f89d 30c4 	ldrb.w	r3, [sp, #196]	@ 0xc4
 8029a58:	eef0 ba44 	vmov.f32	s23, s8
 8029a5c:	9015      	str	r0, [sp, #84]	@ 0x54
 8029a5e:	eeb0 ba64 	vmov.f32	s22, s9
 8029a62:	6850      	ldr	r0, [r2, #4]
 8029a64:	eef0 aa45 	vmov.f32	s21, s10
 8029a68:	910d      	str	r1, [sp, #52]	@ 0x34
 8029a6a:	930f      	str	r3, [sp, #60]	@ 0x3c
 8029a6c:	6812      	ldr	r2, [r2, #0]
 8029a6e:	e9dd 132e 	ldrd	r1, r3, [sp, #184]	@ 0xb8
 8029a72:	e9dd 4629 	ldrd	r4, r6, [sp, #164]	@ 0xa4
 8029a76:	fb00 1303 	mla	r3, r0, r3, r1
 8029a7a:	eb02 0943 	add.w	r9, r2, r3, lsl #1
 8029a7e:	9b30      	ldr	r3, [sp, #192]	@ 0xc0
 8029a80:	689b      	ldr	r3, [r3, #8]
 8029a82:	3301      	adds	r3, #1
 8029a84:	f023 0301 	bic.w	r3, r3, #1
 8029a88:	930a      	str	r3, [sp, #40]	@ 0x28
 8029a8a:	9b30      	ldr	r3, [sp, #192]	@ 0xc0
 8029a8c:	681f      	ldr	r7, [r3, #0]
 8029a8e:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8029a90:	2b00      	cmp	r3, #0
 8029a92:	dc03      	bgt.n	8029a9c <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6c>
 8029a94:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 8029a96:	2b00      	cmp	r3, #0
 8029a98:	f340 8289 	ble.w	8029fae <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x57e>
 8029a9c:	9b30      	ldr	r3, [sp, #192]	@ 0xc0
 8029a9e:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 8029aa2:	f9b3 200c 	ldrsh.w	r2, [r3, #12]
 8029aa6:	1e48      	subs	r0, r1, #1
 8029aa8:	f102 3cff 	add.w	ip, r2, #4294967295
 8029aac:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8029aae:	2b00      	cmp	r3, #0
 8029ab0:	f340 80c5 	ble.w	8029c3e <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x20e>
 8029ab4:	ea5f 4e24 	movs.w	lr, r4, asr #16
 8029ab8:	ea4f 4326 	mov.w	r3, r6, asr #16
 8029abc:	d406      	bmi.n	8029acc <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x9c>
 8029abe:	4586      	cmp	lr, r0
 8029ac0:	da04      	bge.n	8029acc <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x9c>
 8029ac2:	2b00      	cmp	r3, #0
 8029ac4:	db02      	blt.n	8029acc <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x9c>
 8029ac6:	4563      	cmp	r3, ip
 8029ac8:	f2c0 80ba 	blt.w	8029c40 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x210>
 8029acc:	f11e 0e01 	adds.w	lr, lr, #1
 8029ad0:	f100 80ab 	bmi.w	8029c2a <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1fa>
 8029ad4:	4571      	cmp	r1, lr
 8029ad6:	f2c0 80a8 	blt.w	8029c2a <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1fa>
 8029ada:	3301      	adds	r3, #1
 8029adc:	f100 80a5 	bmi.w	8029c2a <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1fa>
 8029ae0:	429a      	cmp	r2, r3
 8029ae2:	f2c0 80a2 	blt.w	8029c2a <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1fa>
 8029ae6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8029ae8:	46c8      	mov	r8, r9
 8029aea:	f9bd a028 	ldrsh.w	sl, [sp, #40]	@ 0x28
 8029aee:	930e      	str	r3, [sp, #56]	@ 0x38
 8029af0:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8029af2:	2b00      	cmp	r3, #0
 8029af4:	f340 80c4 	ble.w	8029c80 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x250>
 8029af8:	9b30      	ldr	r3, [sp, #192]	@ 0xc0
 8029afa:	1430      	asrs	r0, r6, #16
 8029afc:	f3c4 3203 	ubfx	r2, r4, #12, #4
 8029b00:	f3c6 3103 	ubfx	r1, r6, #12, #4
 8029b04:	e9d3 ce02 	ldrd	ip, lr, [r3, #8]
 8029b08:	1423      	asrs	r3, r4, #16
 8029b0a:	f100 814f 	bmi.w	8029dac <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x37c>
 8029b0e:	f10c 3bff 	add.w	fp, ip, #4294967295
 8029b12:	455b      	cmp	r3, fp
 8029b14:	f280 814a 	bge.w	8029dac <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x37c>
 8029b18:	2800      	cmp	r0, #0
 8029b1a:	f2c0 8147 	blt.w	8029dac <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x37c>
 8029b1e:	f10e 3bff 	add.w	fp, lr, #4294967295
 8029b22:	4558      	cmp	r0, fp
 8029b24:	f280 8142 	bge.w	8029dac <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x37c>
 8029b28:	9d0a      	ldr	r5, [sp, #40]	@ 0x28
 8029b2a:	fb00 3305 	mla	r3, r0, r5, r3
 8029b2e:	0858      	lsrs	r0, r3, #1
 8029b30:	07dd      	lsls	r5, r3, #31
 8029b32:	f817 c000 	ldrb.w	ip, [r7, r0]
 8029b36:	bf54      	ite	pl
 8029b38:	f00c 0c0f 	andpl.w	ip, ip, #15
 8029b3c:	ea4f 1c2c 	movmi.w	ip, ip, asr #4
 8029b40:	eb0c 1c0c 	add.w	ip, ip, ip, lsl #4
 8029b44:	fa5f fc8c 	uxtb.w	ip, ip
 8029b48:	2a00      	cmp	r2, #0
 8029b4a:	f000 80dd 	beq.w	8029d08 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2d8>
 8029b4e:	1c58      	adds	r0, r3, #1
 8029b50:	ea4f 0e50 	mov.w	lr, r0, lsr #1
 8029b54:	07c0      	lsls	r0, r0, #31
 8029b56:	f817 e00e 	ldrb.w	lr, [r7, lr]
 8029b5a:	bf54      	ite	pl
 8029b5c:	f00e 0e0f 	andpl.w	lr, lr, #15
 8029b60:	ea4f 1e2e 	movmi.w	lr, lr, asr #4
 8029b64:	eb0e 1e0e 	add.w	lr, lr, lr, lsl #4
 8029b68:	fa5f f08e 	uxtb.w	r0, lr
 8029b6c:	9010      	str	r0, [sp, #64]	@ 0x40
 8029b6e:	b1d9      	cbz	r1, 8029ba8 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x178>
 8029b70:	4453      	add	r3, sl
 8029b72:	0858      	lsrs	r0, r3, #1
 8029b74:	07dd      	lsls	r5, r3, #31
 8029b76:	f103 0301 	add.w	r3, r3, #1
 8029b7a:	5c38      	ldrb	r0, [r7, r0]
 8029b7c:	bf54      	ite	pl
 8029b7e:	f000 000f 	andpl.w	r0, r0, #15
 8029b82:	1100      	asrmi	r0, r0, #4
 8029b84:	07dd      	lsls	r5, r3, #31
 8029b86:	eb00 1000 	add.w	r0, r0, r0, lsl #4
 8029b8a:	b2c0      	uxtb	r0, r0
 8029b8c:	900b      	str	r0, [sp, #44]	@ 0x2c
 8029b8e:	ea4f 0053 	mov.w	r0, r3, lsr #1
 8029b92:	f817 e000 	ldrb.w	lr, [r7, r0]
 8029b96:	bf54      	ite	pl
 8029b98:	f00e 030f 	andpl.w	r3, lr, #15
 8029b9c:	ea4f 132e 	movmi.w	r3, lr, asr #4
 8029ba0:	eb03 1303 	add.w	r3, r3, r3, lsl #4
 8029ba4:	b2db      	uxtb	r3, r3
 8029ba6:	9311      	str	r3, [sp, #68]	@ 0x44
 8029ba8:	b292      	uxth	r2, r2
 8029baa:	9d10      	ldr	r5, [sp, #64]	@ 0x40
 8029bac:	b289      	uxth	r1, r1
 8029bae:	fb02 f301 	mul.w	r3, r2, r1
 8029bb2:	0112      	lsls	r2, r2, #4
 8029bb4:	ebc3 1101 	rsb	r1, r3, r1, lsl #4
 8029bb8:	f5c2 7080 	rsb	r0, r2, #256	@ 0x100
 8029bbc:	1ad2      	subs	r2, r2, r3
 8029bbe:	b289      	uxth	r1, r1
 8029bc0:	b292      	uxth	r2, r2
 8029bc2:	1a40      	subs	r0, r0, r1
 8029bc4:	436a      	muls	r2, r5
 8029bc6:	b280      	uxth	r0, r0
 8029bc8:	fb0c 2c00 	mla	ip, ip, r0, r2
 8029bcc:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 8029bce:	fb01 c102 	mla	r1, r1, r2, ip
 8029bd2:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 8029bd4:	fb03 1302 	mla	r3, r3, r2, r1
 8029bd8:	f3c3 2307 	ubfx	r3, r3, #8, #8
 8029bdc:	b1db      	cbz	r3, 8029c16 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1e6>
 8029bde:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 8029be0:	4353      	muls	r3, r2
 8029be2:	1c5a      	adds	r2, r3, #1
 8029be4:	eb02 2313 	add.w	r3, r2, r3, lsr #8
 8029be8:	4ac6      	ldr	r2, [pc, #792]	@ (8029f04 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4d4>)
 8029bea:	121b      	asrs	r3, r3, #8
 8029bec:	6812      	ldr	r2, [r2, #0]
 8029bee:	2bff      	cmp	r3, #255	@ 0xff
 8029bf0:	ea4f 2c12 	mov.w	ip, r2, lsr #8
 8029bf4:	f040 8099 	bne.w	8029d2a <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2fa>
 8029bf8:	0953      	lsrs	r3, r2, #5
 8029bfa:	f42c 6cff 	bic.w	ip, ip, #2040	@ 0x7f8
 8029bfe:	f3c2 02c4 	ubfx	r2, r2, #3, #5
 8029c02:	f403 63fc 	and.w	r3, r3, #2016	@ 0x7e0
 8029c06:	f02c 0c07 	bic.w	ip, ip, #7
 8029c0a:	ea43 0c0c 	orr.w	ip, r3, ip
 8029c0e:	ea4c 0202 	orr.w	r2, ip, r2
 8029c12:	f8a8 2000 	strh.w	r2, [r8]
 8029c16:	9b2b      	ldr	r3, [sp, #172]	@ 0xac
 8029c18:	f108 0802 	add.w	r8, r8, #2
 8029c1c:	441c      	add	r4, r3
 8029c1e:	9b2c      	ldr	r3, [sp, #176]	@ 0xb0
 8029c20:	441e      	add	r6, r3
 8029c22:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8029c24:	3b01      	subs	r3, #1
 8029c26:	930e      	str	r3, [sp, #56]	@ 0x38
 8029c28:	e762      	b.n	8029af0 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xc0>
 8029c2a:	9b2b      	ldr	r3, [sp, #172]	@ 0xac
 8029c2c:	f109 0902 	add.w	r9, r9, #2
 8029c30:	441c      	add	r4, r3
 8029c32:	9b2c      	ldr	r3, [sp, #176]	@ 0xb0
 8029c34:	441e      	add	r6, r3
 8029c36:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8029c38:	3b01      	subs	r3, #1
 8029c3a:	9309      	str	r3, [sp, #36]	@ 0x24
 8029c3c:	e736      	b.n	8029aac <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7c>
 8029c3e:	d024      	beq.n	8029c8a <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x25a>
 8029c40:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8029c42:	982b      	ldr	r0, [sp, #172]	@ 0xac
 8029c44:	3b01      	subs	r3, #1
 8029c46:	fb00 4003 	mla	r0, r0, r3, r4
 8029c4a:	1400      	asrs	r0, r0, #16
 8029c4c:	f53f af4b 	bmi.w	8029ae6 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xb6>
 8029c50:	3901      	subs	r1, #1
 8029c52:	4288      	cmp	r0, r1
 8029c54:	f6bf af47 	bge.w	8029ae6 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xb6>
 8029c58:	992c      	ldr	r1, [sp, #176]	@ 0xb0
 8029c5a:	fb01 6303 	mla	r3, r1, r3, r6
 8029c5e:	141b      	asrs	r3, r3, #16
 8029c60:	f53f af41 	bmi.w	8029ae6 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xb6>
 8029c64:	3a01      	subs	r2, #1
 8029c66:	4293      	cmp	r3, r2
 8029c68:	f6bf af3d 	bge.w	8029ae6 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xb6>
 8029c6c:	f9bd 3028 	ldrsh.w	r3, [sp, #40]	@ 0x28
 8029c70:	46c8      	mov	r8, r9
 8029c72:	f8dd b024 	ldr.w	fp, [sp, #36]	@ 0x24
 8029c76:	930e      	str	r3, [sp, #56]	@ 0x38
 8029c78:	f1bb 0f00 	cmp.w	fp, #0
 8029c7c:	f300 80b7 	bgt.w	8029dee <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3be>
 8029c80:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8029c82:	ea23 75e3 	bic.w	r5, r3, r3, asr #31
 8029c86:	eb09 0945 	add.w	r9, r9, r5, lsl #1
 8029c8a:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8029c8c:	2b00      	cmp	r3, #0
 8029c8e:	f340 818e 	ble.w	8029fae <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x57e>
 8029c92:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8029c96:	9b28      	ldr	r3, [sp, #160]	@ 0xa0
 8029c98:	ee3a aa2b 	vadd.f32	s20, s20, s23
 8029c9c:	ee79 9a8b 	vadd.f32	s19, s19, s22
 8029ca0:	eef0 6a48 	vmov.f32	s13, s16
 8029ca4:	eec7 7a0a 	vdiv.f32	s15, s14, s20
 8029ca8:	ee39 9a2a 	vadd.f32	s18, s18, s21
 8029cac:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 8029cb0:	ee16 4a90 	vmov	r4, s13
 8029cb4:	eef0 6a68 	vmov.f32	s13, s17
 8029cb8:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 8029cbc:	ee16 6a90 	vmov	r6, s13
 8029cc0:	ee29 7aa7 	vmul.f32	s14, s19, s15
 8029cc4:	ee69 7a27 	vmul.f32	s15, s18, s15
 8029cc8:	ee37 8a48 	vsub.f32	s16, s14, s16
 8029ccc:	ee77 8ae8 	vsub.f32	s17, s15, s17
 8029cd0:	eebe 8ac8 	vcvt.s32.f32	s16, s16, #16
 8029cd4:	eefe 8ac8 	vcvt.s32.f32	s17, s17, #16
 8029cd8:	ee18 2a10 	vmov	r2, s16
 8029cdc:	eeb0 8a47 	vmov.f32	s16, s14
 8029ce0:	fb92 f3f3 	sdiv	r3, r2, r3
 8029ce4:	ee18 2a90 	vmov	r2, s17
 8029ce8:	932b      	str	r3, [sp, #172]	@ 0xac
 8029cea:	9b28      	ldr	r3, [sp, #160]	@ 0xa0
 8029cec:	eef0 8a67 	vmov.f32	s17, s15
 8029cf0:	fb92 f3f3 	sdiv	r3, r2, r3
 8029cf4:	932c      	str	r3, [sp, #176]	@ 0xb0
 8029cf6:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8029cf8:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 8029cfa:	3b01      	subs	r3, #1
 8029cfc:	930d      	str	r3, [sp, #52]	@ 0x34
 8029cfe:	9b28      	ldr	r3, [sp, #160]	@ 0xa0
 8029d00:	bf08      	it	eq
 8029d02:	4613      	moveq	r3, r2
 8029d04:	9309      	str	r3, [sp, #36]	@ 0x24
 8029d06:	e6c2      	b.n	8029a8e <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5e>
 8029d08:	2900      	cmp	r1, #0
 8029d0a:	f43f af4d 	beq.w	8029ba8 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x178>
 8029d0e:	eb0a 0003 	add.w	r0, sl, r3
 8029d12:	0843      	lsrs	r3, r0, #1
 8029d14:	07c0      	lsls	r0, r0, #31
 8029d16:	5cfb      	ldrb	r3, [r7, r3]
 8029d18:	bf54      	ite	pl
 8029d1a:	f003 030f 	andpl.w	r3, r3, #15
 8029d1e:	111b      	asrmi	r3, r3, #4
 8029d20:	eb03 1303 	add.w	r3, r3, r3, lsl #4
 8029d24:	b2db      	uxtb	r3, r3
 8029d26:	930b      	str	r3, [sp, #44]	@ 0x2c
 8029d28:	e73e      	b.n	8029ba8 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x178>
 8029d2a:	f8b8 e000 	ldrh.w	lr, [r8]
 8029d2e:	fa1f fb83 	uxth.w	fp, r3
 8029d32:	f3c2 4107 	ubfx	r1, r2, #16, #8
 8029d36:	43db      	mvns	r3, r3
 8029d38:	ea4f 202e 	mov.w	r0, lr, asr #8
 8029d3c:	fb11 f10b 	smulbb	r1, r1, fp
 8029d40:	b2db      	uxtb	r3, r3
 8029d42:	f000 00f8 	and.w	r0, r0, #248	@ 0xf8
 8029d46:	fa5f fc8c 	uxtb.w	ip, ip
 8029d4a:	b2d2      	uxtb	r2, r2
 8029d4c:	fb00 1003 	mla	r0, r0, r3, r1
 8029d50:	ea4f 01ee 	mov.w	r1, lr, asr #3
 8029d54:	fb1c fc0b 	smulbb	ip, ip, fp
 8029d58:	ea4f 0ece 	mov.w	lr, lr, lsl #3
 8029d5c:	b280      	uxth	r0, r0
 8029d5e:	f001 01fc 	and.w	r1, r1, #252	@ 0xfc
 8029d62:	fb12 fb0b 	smulbb	fp, r2, fp
 8029d66:	fa5f fe8e 	uxtb.w	lr, lr
 8029d6a:	fb01 cc03 	mla	ip, r1, r3, ip
 8029d6e:	fb0e bb03 	mla	fp, lr, r3, fp
 8029d72:	1c43      	adds	r3, r0, #1
 8029d74:	fa1f fc8c 	uxth.w	ip, ip
 8029d78:	fa1f fb8b 	uxth.w	fp, fp
 8029d7c:	eb03 2010 	add.w	r0, r3, r0, lsr #8
 8029d80:	f10c 0101 	add.w	r1, ip, #1
 8029d84:	f400 4378 	and.w	r3, r0, #63488	@ 0xf800
 8029d88:	f10b 0001 	add.w	r0, fp, #1
 8029d8c:	eb01 2c1c 	add.w	ip, r1, ip, lsr #8
 8029d90:	eb00 201b 	add.w	r0, r0, fp, lsr #8
 8029d94:	ea4f 1c5c 	mov.w	ip, ip, lsr #5
 8029d98:	f3c0 20c4 	ubfx	r0, r0, #11, #5
 8029d9c:	f40c 6cfc 	and.w	ip, ip, #2016	@ 0x7e0
 8029da0:	4318      	orrs	r0, r3
 8029da2:	ea40 000c 	orr.w	r0, r0, ip
 8029da6:	f8a8 0000 	strh.w	r0, [r8]
 8029daa:	e734      	b.n	8029c16 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1e6>
 8029dac:	f113 0b01 	adds.w	fp, r3, #1
 8029db0:	f53f af31 	bmi.w	8029c16 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1e6>
 8029db4:	45dc      	cmp	ip, fp
 8029db6:	f6ff af2e 	blt.w	8029c16 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1e6>
 8029dba:	f110 0b01 	adds.w	fp, r0, #1
 8029dbe:	f53f af2a 	bmi.w	8029c16 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1e6>
 8029dc2:	45de      	cmp	lr, fp
 8029dc4:	f6ff af27 	blt.w	8029c16 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1e6>
 8029dc8:	9302      	str	r3, [sp, #8]
 8029dca:	fa0f f38e 	sxth.w	r3, lr
 8029dce:	9d0f      	ldr	r5, [sp, #60]	@ 0x3c
 8029dd0:	9301      	str	r3, [sp, #4]
 8029dd2:	fa0f f38c 	sxth.w	r3, ip
 8029dd6:	e9cd 0203 	strd	r0, r2, [sp, #12]
 8029dda:	e9cd 1505 	strd	r1, r5, [sp, #20]
 8029dde:	9300      	str	r3, [sp, #0]
 8029de0:	463a      	mov	r2, r7
 8029de2:	4653      	mov	r3, sl
 8029de4:	4641      	mov	r1, r8
 8029de6:	9815      	ldr	r0, [sp, #84]	@ 0x54
 8029de8:	f7ff fd2a 	bl	8029840 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh>
 8029dec:	e713      	b.n	8029c16 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1e6>
 8029dee:	1422      	asrs	r2, r4, #16
 8029df0:	9d0a      	ldr	r5, [sp, #40]	@ 0x28
 8029df2:	1433      	asrs	r3, r6, #16
 8029df4:	f3c4 3103 	ubfx	r1, r4, #12, #4
 8029df8:	f3c6 3003 	ubfx	r0, r6, #12, #4
 8029dfc:	fb05 2303 	mla	r3, r5, r3, r2
 8029e00:	085a      	lsrs	r2, r3, #1
 8029e02:	07dd      	lsls	r5, r3, #31
 8029e04:	5cba      	ldrb	r2, [r7, r2]
 8029e06:	bf54      	ite	pl
 8029e08:	f002 020f 	andpl.w	r2, r2, #15
 8029e0c:	1112      	asrmi	r2, r2, #4
 8029e0e:	eb02 1202 	add.w	r2, r2, r2, lsl #4
 8029e12:	b2d2      	uxtb	r2, r2
 8029e14:	2900      	cmp	r1, #0
 8029e16:	d077      	beq.n	8029f08 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4d8>
 8029e18:	f103 0e01 	add.w	lr, r3, #1
 8029e1c:	ea4f 0c5e 	mov.w	ip, lr, lsr #1
 8029e20:	f01e 0f01 	tst.w	lr, #1
 8029e24:	f817 c00c 	ldrb.w	ip, [r7, ip]
 8029e28:	bf0c      	ite	eq
 8029e2a:	f00c 0c0f 	andeq.w	ip, ip, #15
 8029e2e:	ea4f 1c2c 	movne.w	ip, ip, asr #4
 8029e32:	eb0c 1c0c 	add.w	ip, ip, ip, lsl #4
 8029e36:	fa5f f58c 	uxtb.w	r5, ip
 8029e3a:	9512      	str	r5, [sp, #72]	@ 0x48
 8029e3c:	b308      	cbz	r0, 8029e82 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x452>
 8029e3e:	9d0e      	ldr	r5, [sp, #56]	@ 0x38
 8029e40:	442b      	add	r3, r5
 8029e42:	ea4f 0c53 	mov.w	ip, r3, lsr #1
 8029e46:	07dd      	lsls	r5, r3, #31
 8029e48:	f103 0301 	add.w	r3, r3, #1
 8029e4c:	f817 c00c 	ldrb.w	ip, [r7, ip]
 8029e50:	bf54      	ite	pl
 8029e52:	f00c 0c0f 	andpl.w	ip, ip, #15
 8029e56:	ea4f 1c2c 	movmi.w	ip, ip, asr #4
 8029e5a:	eb0c 1c0c 	add.w	ip, ip, ip, lsl #4
 8029e5e:	fa5f f58c 	uxtb.w	r5, ip
 8029e62:	ea4f 0c53 	mov.w	ip, r3, lsr #1
 8029e66:	950c      	str	r5, [sp, #48]	@ 0x30
 8029e68:	07dd      	lsls	r5, r3, #31
 8029e6a:	f817 c00c 	ldrb.w	ip, [r7, ip]
 8029e6e:	bf54      	ite	pl
 8029e70:	f00c 0c0f 	andpl.w	ip, ip, #15
 8029e74:	ea4f 1c2c 	movmi.w	ip, ip, asr #4
 8029e78:	eb0c 1c0c 	add.w	ip, ip, ip, lsl #4
 8029e7c:	fa5f f38c 	uxtb.w	r3, ip
 8029e80:	9313      	str	r3, [sp, #76]	@ 0x4c
 8029e82:	b289      	uxth	r1, r1
 8029e84:	9d12      	ldr	r5, [sp, #72]	@ 0x48
 8029e86:	b280      	uxth	r0, r0
 8029e88:	fb01 f300 	mul.w	r3, r1, r0
 8029e8c:	0109      	lsls	r1, r1, #4
 8029e8e:	ebc3 1000 	rsb	r0, r3, r0, lsl #4
 8029e92:	f5c1 7c80 	rsb	ip, r1, #256	@ 0x100
 8029e96:	1ac9      	subs	r1, r1, r3
 8029e98:	b280      	uxth	r0, r0
 8029e9a:	b289      	uxth	r1, r1
 8029e9c:	ebac 0c00 	sub.w	ip, ip, r0
 8029ea0:	4369      	muls	r1, r5
 8029ea2:	fa1f fc8c 	uxth.w	ip, ip
 8029ea6:	fb02 120c 	mla	r2, r2, ip, r1
 8029eaa:	990c      	ldr	r1, [sp, #48]	@ 0x30
 8029eac:	fb00 2001 	mla	r0, r0, r1, r2
 8029eb0:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 8029eb2:	fb03 0302 	mla	r3, r3, r2, r0
 8029eb6:	f3c3 2307 	ubfx	r3, r3, #8, #8
 8029eba:	b1d3      	cbz	r3, 8029ef2 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4c2>
 8029ebc:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 8029ebe:	4353      	muls	r3, r2
 8029ec0:	1c5a      	adds	r2, r3, #1
 8029ec2:	eb02 2313 	add.w	r3, r2, r3, lsr #8
 8029ec6:	4a0f      	ldr	r2, [pc, #60]	@ (8029f04 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4d4>)
 8029ec8:	121b      	asrs	r3, r3, #8
 8029eca:	6812      	ldr	r2, [r2, #0]
 8029ecc:	2bff      	cmp	r3, #255	@ 0xff
 8029ece:	ea4f 2c12 	mov.w	ip, r2, lsr #8
 8029ed2:	d12d      	bne.n	8029f30 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x500>
 8029ed4:	0953      	lsrs	r3, r2, #5
 8029ed6:	f42c 6cff 	bic.w	ip, ip, #2040	@ 0x7f8
 8029eda:	f3c2 02c4 	ubfx	r2, r2, #3, #5
 8029ede:	f403 63fc 	and.w	r3, r3, #2016	@ 0x7e0
 8029ee2:	f02c 0c07 	bic.w	ip, ip, #7
 8029ee6:	ea43 0c0c 	orr.w	ip, r3, ip
 8029eea:	ea4c 0202 	orr.w	r2, ip, r2
 8029eee:	f8a8 2000 	strh.w	r2, [r8]
 8029ef2:	9b2b      	ldr	r3, [sp, #172]	@ 0xac
 8029ef4:	f108 0802 	add.w	r8, r8, #2
 8029ef8:	f10b 3bff 	add.w	fp, fp, #4294967295
 8029efc:	441c      	add	r4, r3
 8029efe:	9b2c      	ldr	r3, [sp, #176]	@ 0xb0
 8029f00:	441e      	add	r6, r3
 8029f02:	e6b9      	b.n	8029c78 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x248>
 8029f04:	2400b888 	.word	0x2400b888
 8029f08:	2800      	cmp	r0, #0
 8029f0a:	d0ba      	beq.n	8029e82 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x452>
 8029f0c:	9d0e      	ldr	r5, [sp, #56]	@ 0x38
 8029f0e:	442b      	add	r3, r5
 8029f10:	ea4f 0c53 	mov.w	ip, r3, lsr #1
 8029f14:	07db      	lsls	r3, r3, #31
 8029f16:	f817 c00c 	ldrb.w	ip, [r7, ip]
 8029f1a:	bf54      	ite	pl
 8029f1c:	f00c 0c0f 	andpl.w	ip, ip, #15
 8029f20:	ea4f 1c2c 	movmi.w	ip, ip, asr #4
 8029f24:	eb0c 1c0c 	add.w	ip, ip, ip, lsl #4
 8029f28:	fa5f f38c 	uxtb.w	r3, ip
 8029f2c:	930c      	str	r3, [sp, #48]	@ 0x30
 8029f2e:	e7a8      	b.n	8029e82 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x452>
 8029f30:	f8b8 e000 	ldrh.w	lr, [r8]
 8029f34:	fa1f fa83 	uxth.w	sl, r3
 8029f38:	f3c2 4107 	ubfx	r1, r2, #16, #8
 8029f3c:	43db      	mvns	r3, r3
 8029f3e:	ea4f 202e 	mov.w	r0, lr, asr #8
 8029f42:	fb11 f10a 	smulbb	r1, r1, sl
 8029f46:	b2db      	uxtb	r3, r3
 8029f48:	f000 00f8 	and.w	r0, r0, #248	@ 0xf8
 8029f4c:	b2d2      	uxtb	r2, r2
 8029f4e:	fa5f fc8c 	uxtb.w	ip, ip
 8029f52:	fb00 1003 	mla	r0, r0, r3, r1
 8029f56:	ea4f 01ee 	mov.w	r1, lr, asr #3
 8029f5a:	fb12 f20a 	smulbb	r2, r2, sl
 8029f5e:	ea4f 0ece 	mov.w	lr, lr, lsl #3
 8029f62:	b280      	uxth	r0, r0
 8029f64:	f001 01fc 	and.w	r1, r1, #252	@ 0xfc
 8029f68:	fb1c fc0a 	smulbb	ip, ip, sl
 8029f6c:	fa5f fe8e 	uxtb.w	lr, lr
 8029f70:	fb0e 2203 	mla	r2, lr, r3, r2
 8029f74:	fb01 cc03 	mla	ip, r1, r3, ip
 8029f78:	1c43      	adds	r3, r0, #1
 8029f7a:	b292      	uxth	r2, r2
 8029f7c:	eb03 2010 	add.w	r0, r3, r0, lsr #8
 8029f80:	1c51      	adds	r1, r2, #1
 8029f82:	fa1f fc8c 	uxth.w	ip, ip
 8029f86:	f400 4078 	and.w	r0, r0, #63488	@ 0xf800
 8029f8a:	eb01 2112 	add.w	r1, r1, r2, lsr #8
 8029f8e:	f3c1 21c4 	ubfx	r1, r1, #11, #5
 8029f92:	4308      	orrs	r0, r1
 8029f94:	f10c 0101 	add.w	r1, ip, #1
 8029f98:	eb01 2c1c 	add.w	ip, r1, ip, lsr #8
 8029f9c:	ea4f 1c5c 	mov.w	ip, ip, lsr #5
 8029fa0:	f40c 6cfc 	and.w	ip, ip, #2016	@ 0x7e0
 8029fa4:	ea40 000c 	orr.w	r0, r0, ip
 8029fa8:	f8a8 0000 	strh.w	r0, [r8]
 8029fac:	e7a1      	b.n	8029ef2 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4c2>
 8029fae:	b017      	add	sp, #92	@ 0x5c
 8029fb0:	ecbd 8b08 	vpop	{d8-d11}
 8029fb4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08029fb8 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh>:
 8029fb8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8029fbc:	e9dd c40a 	ldrd	ip, r4, [sp, #40]	@ 0x28
 8029fc0:	f9bd 8020 	ldrsh.w	r8, [sp, #32]
 8029fc4:	2c00      	cmp	r4, #0
 8029fc6:	f9bd 9024 	ldrsh.w	r9, [sp, #36]	@ 0x24
 8029fca:	f89d 5030 	ldrb.w	r5, [sp, #48]	@ 0x30
 8029fce:	fb04 ce03 	mla	lr, r4, r3, ip
 8029fd2:	f89d 7034 	ldrb.w	r7, [sp, #52]	@ 0x34
 8029fd6:	db60      	blt.n	802a09a <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0xe2>
 8029fd8:	45a1      	cmp	r9, r4
 8029fda:	dd5e      	ble.n	802a09a <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0xe2>
 8029fdc:	f1bc 0f00 	cmp.w	ip, #0
 8029fe0:	db59      	blt.n	802a096 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0xde>
 8029fe2:	45e0      	cmp	r8, ip
 8029fe4:	dd57      	ble.n	802a096 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0xde>
 8029fe6:	ea4f 005e 	mov.w	r0, lr, lsr #1
 8029fea:	f01e 0f01 	tst.w	lr, #1
 8029fee:	5c16      	ldrb	r6, [r2, r0]
 8029ff0:	bf0c      	ite	eq
 8029ff2:	f006 060f 	andeq.w	r6, r6, #15
 8029ff6:	1136      	asrne	r6, r6, #4
 8029ff8:	eb06 1606 	add.w	r6, r6, r6, lsl #4
 8029ffc:	b2f6      	uxtb	r6, r6
 8029ffe:	f11c 0001 	adds.w	r0, ip, #1
 802a002:	d44d      	bmi.n	802a0a0 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0xe8>
 802a004:	4580      	cmp	r8, r0
 802a006:	dd4b      	ble.n	802a0a0 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0xe8>
 802a008:	2d00      	cmp	r5, #0
 802a00a:	d04b      	beq.n	802a0a4 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0xec>
 802a00c:	f10e 0a01 	add.w	sl, lr, #1
 802a010:	ea4f 005a 	mov.w	r0, sl, lsr #1
 802a014:	f01a 0f01 	tst.w	sl, #1
 802a018:	5c10      	ldrb	r0, [r2, r0]
 802a01a:	bf0c      	ite	eq
 802a01c:	f000 000f 	andeq.w	r0, r0, #15
 802a020:	1100      	asrne	r0, r0, #4
 802a022:	eb00 1000 	add.w	r0, r0, r0, lsl #4
 802a026:	b2c0      	uxtb	r0, r0
 802a028:	3401      	adds	r4, #1
 802a02a:	d43f      	bmi.n	802a0ac <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0xf4>
 802a02c:	45a1      	cmp	r9, r4
 802a02e:	dd3d      	ble.n	802a0ac <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0xf4>
 802a030:	2f00      	cmp	r7, #0
 802a032:	f000 8093 	beq.w	802a15c <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0x1a4>
 802a036:	f1bc 0f00 	cmp.w	ip, #0
 802a03a:	db35      	blt.n	802a0a8 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0xf0>
 802a03c:	45e0      	cmp	r8, ip
 802a03e:	dd33      	ble.n	802a0a8 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0xf0>
 802a040:	eb03 090e 	add.w	r9, r3, lr
 802a044:	ea4f 0459 	mov.w	r4, r9, lsr #1
 802a048:	f019 0f01 	tst.w	r9, #1
 802a04c:	5d14      	ldrb	r4, [r2, r4]
 802a04e:	bf0c      	ite	eq
 802a050:	f004 040f 	andeq.w	r4, r4, #15
 802a054:	1124      	asrne	r4, r4, #4
 802a056:	eb04 1404 	add.w	r4, r4, r4, lsl #4
 802a05a:	b2e4      	uxtb	r4, r4
 802a05c:	f11c 0c01 	adds.w	ip, ip, #1
 802a060:	d427      	bmi.n	802a0b2 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0xfa>
 802a062:	45e0      	cmp	r8, ip
 802a064:	dd25      	ble.n	802a0b2 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0xfa>
 802a066:	b335      	cbz	r5, 802a0b6 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0xfe>
 802a068:	3301      	adds	r3, #1
 802a06a:	449e      	add	lr, r3
 802a06c:	ea4f 035e 	mov.w	r3, lr, lsr #1
 802a070:	f01e 0f01 	tst.w	lr, #1
 802a074:	5cd2      	ldrb	r2, [r2, r3]
 802a076:	bf0c      	ite	eq
 802a078:	f002 020f 	andeq.w	r2, r2, #15
 802a07c:	1112      	asrne	r2, r2, #4
 802a07e:	eb02 1202 	add.w	r2, r2, r2, lsl #4
 802a082:	b2d3      	uxtb	r3, r2
 802a084:	2d0f      	cmp	r5, #15
 802a086:	d917      	bls.n	802a0b8 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0x100>
 802a088:	4b37      	ldr	r3, [pc, #220]	@ (802a168 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0x1b0>)
 802a08a:	f44f 71fb 	mov.w	r1, #502	@ 0x1f6
 802a08e:	4a37      	ldr	r2, [pc, #220]	@ (802a16c <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0x1b4>)
 802a090:	4837      	ldr	r0, [pc, #220]	@ (802a170 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0x1b8>)
 802a092:	f000 fc4f 	bl	802a934 <__assert_func>
 802a096:	2600      	movs	r6, #0
 802a098:	e7b1      	b.n	8029ffe <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0x46>
 802a09a:	2000      	movs	r0, #0
 802a09c:	4606      	mov	r6, r0
 802a09e:	e7c3      	b.n	802a028 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0x70>
 802a0a0:	2000      	movs	r0, #0
 802a0a2:	e7c1      	b.n	802a028 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0x70>
 802a0a4:	4628      	mov	r0, r5
 802a0a6:	e7bf      	b.n	802a028 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0x70>
 802a0a8:	2400      	movs	r4, #0
 802a0aa:	e7d7      	b.n	802a05c <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0xa4>
 802a0ac:	2300      	movs	r3, #0
 802a0ae:	461c      	mov	r4, r3
 802a0b0:	e7e8      	b.n	802a084 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0xcc>
 802a0b2:	2300      	movs	r3, #0
 802a0b4:	e7e6      	b.n	802a084 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0xcc>
 802a0b6:	462b      	mov	r3, r5
 802a0b8:	2f0f      	cmp	r7, #15
 802a0ba:	d8e5      	bhi.n	802a088 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0xd0>
 802a0bc:	b2ad      	uxth	r5, r5
 802a0be:	b2bf      	uxth	r7, r7
 802a0c0:	fb05 fc07 	mul.w	ip, r5, r7
 802a0c4:	012d      	lsls	r5, r5, #4
 802a0c6:	ebcc 1707 	rsb	r7, ip, r7, lsl #4
 802a0ca:	f5c5 7280 	rsb	r2, r5, #256	@ 0x100
 802a0ce:	eba5 050c 	sub.w	r5, r5, ip
 802a0d2:	b2bf      	uxth	r7, r7
 802a0d4:	b2ad      	uxth	r5, r5
 802a0d6:	1bd2      	subs	r2, r2, r7
 802a0d8:	4368      	muls	r0, r5
 802a0da:	b292      	uxth	r2, r2
 802a0dc:	fb06 0002 	mla	r0, r6, r2, r0
 802a0e0:	fb07 0404 	mla	r4, r7, r4, r0
 802a0e4:	fb0c 4303 	mla	r3, ip, r3, r4
 802a0e8:	f3c3 2307 	ubfx	r3, r3, #8, #8
 802a0ec:	b3a3      	cbz	r3, 802a158 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0x1a0>
 802a0ee:	4a21      	ldr	r2, [pc, #132]	@ (802a174 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0x1bc>)
 802a0f0:	880e      	ldrh	r6, [r1, #0]
 802a0f2:	6815      	ldr	r5, [r2, #0]
 802a0f4:	b29a      	uxth	r2, r3
 802a0f6:	1234      	asrs	r4, r6, #8
 802a0f8:	43db      	mvns	r3, r3
 802a0fa:	f3c5 4007 	ubfx	r0, r5, #16, #8
 802a0fe:	f3c5 2707 	ubfx	r7, r5, #8, #8
 802a102:	b2db      	uxtb	r3, r3
 802a104:	f004 04f8 	and.w	r4, r4, #248	@ 0xf8
 802a108:	fb10 f002 	smulbb	r0, r0, r2
 802a10c:	b2ed      	uxtb	r5, r5
 802a10e:	fb17 f702 	smulbb	r7, r7, r2
 802a112:	fb04 0403 	mla	r4, r4, r3, r0
 802a116:	10f0      	asrs	r0, r6, #3
 802a118:	fb15 f202 	smulbb	r2, r5, r2
 802a11c:	00f6      	lsls	r6, r6, #3
 802a11e:	f000 00fc 	and.w	r0, r0, #252	@ 0xfc
 802a122:	b2a4      	uxth	r4, r4
 802a124:	b2f6      	uxtb	r6, r6
 802a126:	fb00 7003 	mla	r0, r0, r3, r7
 802a12a:	fb06 2303 	mla	r3, r6, r3, r2
 802a12e:	b280      	uxth	r0, r0
 802a130:	b29a      	uxth	r2, r3
 802a132:	1c63      	adds	r3, r4, #1
 802a134:	eb03 2414 	add.w	r4, r3, r4, lsr #8
 802a138:	1c53      	adds	r3, r2, #1
 802a13a:	eb03 2312 	add.w	r3, r3, r2, lsr #8
 802a13e:	1c42      	adds	r2, r0, #1
 802a140:	f404 4478 	and.w	r4, r4, #63488	@ 0xf800
 802a144:	eb02 2010 	add.w	r0, r2, r0, lsr #8
 802a148:	f3c3 23c4 	ubfx	r3, r3, #11, #5
 802a14c:	0940      	lsrs	r0, r0, #5
 802a14e:	4323      	orrs	r3, r4
 802a150:	f400 60fc 	and.w	r0, r0, #2016	@ 0x7e0
 802a154:	4303      	orrs	r3, r0
 802a156:	800b      	strh	r3, [r1, #0]
 802a158:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 802a15c:	2d0f      	cmp	r5, #15
 802a15e:	d893      	bhi.n	802a088 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0xd0>
 802a160:	463b      	mov	r3, r7
 802a162:	463c      	mov	r4, r7
 802a164:	e7aa      	b.n	802a0bc <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0x104>
 802a166:	bf00      	nop
 802a168:	0802fad5 	.word	0x0802fad5
 802a16c:	080300a2 	.word	0x080300a2
 802a170:	0802fb59 	.word	0x0802fb59
 802a174:	2400b888 	.word	0x2400b888

0802a178 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 802a178:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 802a17c:	ed2d 8b08 	vpush	{d8-d11}
 802a180:	b093      	sub	sp, #76	@ 0x4c
 802a182:	461d      	mov	r5, r3
 802a184:	eeb0 aa40 	vmov.f32	s20, s0
 802a188:	920c      	str	r2, [sp, #48]	@ 0x30
 802a18a:	eef0 9a60 	vmov.f32	s19, s1
 802a18e:	9a29      	ldr	r2, [sp, #164]	@ 0xa4
 802a190:	eeb0 9a41 	vmov.f32	s18, s2
 802a194:	9011      	str	r0, [sp, #68]	@ 0x44
 802a196:	eeb0 8a62 	vmov.f32	s16, s5
 802a19a:	6850      	ldr	r0, [r2, #4]
 802a19c:	eef0 8a43 	vmov.f32	s17, s6
 802a1a0:	9107      	str	r1, [sp, #28]
 802a1a2:	eef0 ba44 	vmov.f32	s23, s8
 802a1a6:	6812      	ldr	r2, [r2, #0]
 802a1a8:	eeb0 ba64 	vmov.f32	s22, s9
 802a1ac:	eef0 aa45 	vmov.f32	s21, s10
 802a1b0:	e9dd 132a 	ldrd	r1, r3, [sp, #168]	@ 0xa8
 802a1b4:	e9dd 4625 	ldrd	r4, r6, [sp, #148]	@ 0x94
 802a1b8:	fb00 1303 	mla	r3, r0, r3, r1
 802a1bc:	eb02 0943 	add.w	r9, r2, r3, lsl #1
 802a1c0:	9b2c      	ldr	r3, [sp, #176]	@ 0xb0
 802a1c2:	689b      	ldr	r3, [r3, #8]
 802a1c4:	3301      	adds	r3, #1
 802a1c6:	f023 0301 	bic.w	r3, r3, #1
 802a1ca:	9306      	str	r3, [sp, #24]
 802a1cc:	9b2c      	ldr	r3, [sp, #176]	@ 0xb0
 802a1ce:	681f      	ldr	r7, [r3, #0]
 802a1d0:	9b07      	ldr	r3, [sp, #28]
 802a1d2:	2b00      	cmp	r3, #0
 802a1d4:	dc03      	bgt.n	802a1de <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x66>
 802a1d6:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 802a1d8:	2b00      	cmp	r3, #0
 802a1da:	f340 8267 	ble.w	802a6ac <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x534>
 802a1de:	9b2c      	ldr	r3, [sp, #176]	@ 0xb0
 802a1e0:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 802a1e4:	f9b3 200c 	ldrsh.w	r2, [r3, #12]
 802a1e8:	1e48      	subs	r0, r1, #1
 802a1ea:	f102 3cff 	add.w	ip, r2, #4294967295
 802a1ee:	2d00      	cmp	r5, #0
 802a1f0:	f340 80b7 	ble.w	802a362 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ea>
 802a1f4:	ea5f 4e24 	movs.w	lr, r4, asr #16
 802a1f8:	ea4f 4326 	mov.w	r3, r6, asr #16
 802a1fc:	d406      	bmi.n	802a20c <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x94>
 802a1fe:	4586      	cmp	lr, r0
 802a200:	da04      	bge.n	802a20c <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x94>
 802a202:	2b00      	cmp	r3, #0
 802a204:	db02      	blt.n	802a20c <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x94>
 802a206:	4563      	cmp	r3, ip
 802a208:	f2c0 80ac 	blt.w	802a364 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ec>
 802a20c:	f11e 0e01 	adds.w	lr, lr, #1
 802a210:	f100 809f 	bmi.w	802a352 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1da>
 802a214:	4571      	cmp	r1, lr
 802a216:	f2c0 809c 	blt.w	802a352 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1da>
 802a21a:	3301      	adds	r3, #1
 802a21c:	f100 8099 	bmi.w	802a352 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1da>
 802a220:	429a      	cmp	r2, r3
 802a222:	f2c0 8096 	blt.w	802a352 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1da>
 802a226:	46c8      	mov	r8, r9
 802a228:	f9bd a018 	ldrsh.w	sl, [sp, #24]
 802a22c:	9509      	str	r5, [sp, #36]	@ 0x24
 802a22e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 802a230:	2b00      	cmp	r3, #0
 802a232:	f340 80b5 	ble.w	802a3a0 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x228>
 802a236:	f3c4 3303 	ubfx	r3, r4, #12, #4
 802a23a:	1430      	asrs	r0, r6, #16
 802a23c:	f3c6 3103 	ubfx	r1, r6, #12, #4
 802a240:	9308      	str	r3, [sp, #32]
 802a242:	9b2c      	ldr	r3, [sp, #176]	@ 0xb0
 802a244:	e9d3 ce02 	ldrd	ip, lr, [r3, #8]
 802a248:	1423      	asrs	r3, r4, #16
 802a24a:	f100 813f 	bmi.w	802a4cc <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x354>
 802a24e:	f10c 3bff 	add.w	fp, ip, #4294967295
 802a252:	455b      	cmp	r3, fp
 802a254:	f280 813a 	bge.w	802a4cc <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x354>
 802a258:	2800      	cmp	r0, #0
 802a25a:	f2c0 8137 	blt.w	802a4cc <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x354>
 802a25e:	f10e 3bff 	add.w	fp, lr, #4294967295
 802a262:	4558      	cmp	r0, fp
 802a264:	f280 8132 	bge.w	802a4cc <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x354>
 802a268:	9a06      	ldr	r2, [sp, #24]
 802a26a:	fb00 3302 	mla	r3, r0, r2, r3
 802a26e:	0858      	lsrs	r0, r3, #1
 802a270:	07da      	lsls	r2, r3, #31
 802a272:	9a08      	ldr	r2, [sp, #32]
 802a274:	f817 c000 	ldrb.w	ip, [r7, r0]
 802a278:	bf54      	ite	pl
 802a27a:	f00c 0c0f 	andpl.w	ip, ip, #15
 802a27e:	ea4f 1c2c 	movmi.w	ip, ip, asr #4
 802a282:	eb0c 1c0c 	add.w	ip, ip, ip, lsl #4
 802a286:	fa5f fc8c 	uxtb.w	ip, ip
 802a28a:	2a00      	cmp	r2, #0
 802a28c:	f000 80cc 	beq.w	802a428 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2b0>
 802a290:	1c58      	adds	r0, r3, #1
 802a292:	ea4f 0e50 	mov.w	lr, r0, lsr #1
 802a296:	07c0      	lsls	r0, r0, #31
 802a298:	f817 e00e 	ldrb.w	lr, [r7, lr]
 802a29c:	bf54      	ite	pl
 802a29e:	f00e 0e0f 	andpl.w	lr, lr, #15
 802a2a2:	ea4f 1e2e 	movmi.w	lr, lr, asr #4
 802a2a6:	eb0e 1e0e 	add.w	lr, lr, lr, lsl #4
 802a2aa:	fa5f fe8e 	uxtb.w	lr, lr
 802a2ae:	f8cd e034 	str.w	lr, [sp, #52]	@ 0x34
 802a2b2:	b1b9      	cbz	r1, 802a2e4 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x16c>
 802a2b4:	4453      	add	r3, sl
 802a2b6:	0858      	lsrs	r0, r3, #1
 802a2b8:	07da      	lsls	r2, r3, #31
 802a2ba:	5c38      	ldrb	r0, [r7, r0]
 802a2bc:	bf54      	ite	pl
 802a2be:	f000 000f 	andpl.w	r0, r0, #15
 802a2c2:	1100      	asrmi	r0, r0, #4
 802a2c4:	eb00 1000 	add.w	r0, r0, r0, lsl #4
 802a2c8:	b2c0      	uxtb	r0, r0
 802a2ca:	900a      	str	r0, [sp, #40]	@ 0x28
 802a2cc:	1c58      	adds	r0, r3, #1
 802a2ce:	0843      	lsrs	r3, r0, #1
 802a2d0:	07c2      	lsls	r2, r0, #31
 802a2d2:	5cfb      	ldrb	r3, [r7, r3]
 802a2d4:	bf54      	ite	pl
 802a2d6:	f003 030f 	andpl.w	r3, r3, #15
 802a2da:	111b      	asrmi	r3, r3, #4
 802a2dc:	eb03 1303 	add.w	r3, r3, r3, lsl #4
 802a2e0:	b2db      	uxtb	r3, r3
 802a2e2:	930e      	str	r3, [sp, #56]	@ 0x38
 802a2e4:	f8bd 2020 	ldrh.w	r2, [sp, #32]
 802a2e8:	b289      	uxth	r1, r1
 802a2ea:	fb02 f301 	mul.w	r3, r2, r1
 802a2ee:	0112      	lsls	r2, r2, #4
 802a2f0:	ebc3 1101 	rsb	r1, r3, r1, lsl #4
 802a2f4:	f5c2 7080 	rsb	r0, r2, #256	@ 0x100
 802a2f8:	1ad2      	subs	r2, r2, r3
 802a2fa:	b289      	uxth	r1, r1
 802a2fc:	b292      	uxth	r2, r2
 802a2fe:	1a40      	subs	r0, r0, r1
 802a300:	fa1f fe80 	uxth.w	lr, r0
 802a304:	980d      	ldr	r0, [sp, #52]	@ 0x34
 802a306:	4342      	muls	r2, r0
 802a308:	fb0c 2c0e 	mla	ip, ip, lr, r2
 802a30c:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 802a30e:	fb01 c102 	mla	r1, r1, r2, ip
 802a312:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 802a314:	fb03 1302 	mla	r3, r3, r2, r1
 802a318:	f3c3 2307 	ubfx	r3, r3, #8, #8
 802a31c:	2bff      	cmp	r3, #255	@ 0xff
 802a31e:	f040 8094 	bne.w	802a44a <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2d2>
 802a322:	4bbf      	ldr	r3, [pc, #764]	@ (802a620 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4a8>)
 802a324:	681a      	ldr	r2, [r3, #0]
 802a326:	4bbf      	ldr	r3, [pc, #764]	@ (802a624 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4ac>)
 802a328:	0951      	lsrs	r1, r2, #5
 802a32a:	ea03 2312 	and.w	r3, r3, r2, lsr #8
 802a32e:	f3c2 02c4 	ubfx	r2, r2, #3, #5
 802a332:	f401 61fc 	and.w	r1, r1, #2016	@ 0x7e0
 802a336:	430b      	orrs	r3, r1
 802a338:	4313      	orrs	r3, r2
 802a33a:	f8a8 3000 	strh.w	r3, [r8]
 802a33e:	9b27      	ldr	r3, [sp, #156]	@ 0x9c
 802a340:	f108 0802 	add.w	r8, r8, #2
 802a344:	441c      	add	r4, r3
 802a346:	9b28      	ldr	r3, [sp, #160]	@ 0xa0
 802a348:	441e      	add	r6, r3
 802a34a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 802a34c:	3b01      	subs	r3, #1
 802a34e:	9309      	str	r3, [sp, #36]	@ 0x24
 802a350:	e76d      	b.n	802a22e <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xb6>
 802a352:	9b27      	ldr	r3, [sp, #156]	@ 0x9c
 802a354:	3d01      	subs	r5, #1
 802a356:	f109 0902 	add.w	r9, r9, #2
 802a35a:	441c      	add	r4, r3
 802a35c:	9b28      	ldr	r3, [sp, #160]	@ 0xa0
 802a35e:	441e      	add	r6, r3
 802a360:	e745      	b.n	802a1ee <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x76>
 802a362:	d021      	beq.n	802a3a8 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x230>
 802a364:	1e6b      	subs	r3, r5, #1
 802a366:	9827      	ldr	r0, [sp, #156]	@ 0x9c
 802a368:	fb00 4003 	mla	r0, r0, r3, r4
 802a36c:	1400      	asrs	r0, r0, #16
 802a36e:	f53f af5a 	bmi.w	802a226 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xae>
 802a372:	3901      	subs	r1, #1
 802a374:	4288      	cmp	r0, r1
 802a376:	f6bf af56 	bge.w	802a226 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xae>
 802a37a:	9928      	ldr	r1, [sp, #160]	@ 0xa0
 802a37c:	fb01 6303 	mla	r3, r1, r3, r6
 802a380:	141b      	asrs	r3, r3, #16
 802a382:	f53f af50 	bmi.w	802a226 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xae>
 802a386:	3a01      	subs	r2, #1
 802a388:	4293      	cmp	r3, r2
 802a38a:	f6bf af4c 	bge.w	802a226 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xae>
 802a38e:	f9bd 3018 	ldrsh.w	r3, [sp, #24]
 802a392:	46a8      	mov	r8, r5
 802a394:	46ce      	mov	lr, r9
 802a396:	9308      	str	r3, [sp, #32]
 802a398:	f1b8 0f00 	cmp.w	r8, #0
 802a39c:	f300 80b6 	bgt.w	802a50c <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x394>
 802a3a0:	ea25 75e5 	bic.w	r5, r5, r5, asr #31
 802a3a4:	eb09 0945 	add.w	r9, r9, r5, lsl #1
 802a3a8:	9b07      	ldr	r3, [sp, #28]
 802a3aa:	2b00      	cmp	r3, #0
 802a3ac:	f340 817e 	ble.w	802a6ac <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x534>
 802a3b0:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 802a3b4:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 802a3b6:	ee3a aa2b 	vadd.f32	s20, s20, s23
 802a3ba:	ee79 9a8b 	vadd.f32	s19, s19, s22
 802a3be:	eef0 6a48 	vmov.f32	s13, s16
 802a3c2:	eec7 7a0a 	vdiv.f32	s15, s14, s20
 802a3c6:	ee39 9a2a 	vadd.f32	s18, s18, s21
 802a3ca:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 802a3ce:	ee16 4a90 	vmov	r4, s13
 802a3d2:	eef0 6a68 	vmov.f32	s13, s17
 802a3d6:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 802a3da:	ee16 6a90 	vmov	r6, s13
 802a3de:	ee29 7aa7 	vmul.f32	s14, s19, s15
 802a3e2:	ee69 7a27 	vmul.f32	s15, s18, s15
 802a3e6:	ee37 8a48 	vsub.f32	s16, s14, s16
 802a3ea:	ee77 8ae8 	vsub.f32	s17, s15, s17
 802a3ee:	eebe 8ac8 	vcvt.s32.f32	s16, s16, #16
 802a3f2:	eefe 8ac8 	vcvt.s32.f32	s17, s17, #16
 802a3f6:	ee18 2a10 	vmov	r2, s16
 802a3fa:	eeb0 8a47 	vmov.f32	s16, s14
 802a3fe:	fb92 f3f3 	sdiv	r3, r2, r3
 802a402:	ee18 2a90 	vmov	r2, s17
 802a406:	9327      	str	r3, [sp, #156]	@ 0x9c
 802a408:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 802a40a:	eef0 8a67 	vmov.f32	s17, s15
 802a40e:	fb92 f3f3 	sdiv	r3, r2, r3
 802a412:	9328      	str	r3, [sp, #160]	@ 0xa0
 802a414:	9b07      	ldr	r3, [sp, #28]
 802a416:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 802a418:	3b01      	subs	r3, #1
 802a41a:	9307      	str	r3, [sp, #28]
 802a41c:	bf08      	it	eq
 802a41e:	4615      	moveq	r5, r2
 802a420:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 802a422:	bf18      	it	ne
 802a424:	461d      	movne	r5, r3
 802a426:	e6d3      	b.n	802a1d0 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x58>
 802a428:	2900      	cmp	r1, #0
 802a42a:	f43f af5b 	beq.w	802a2e4 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x16c>
 802a42e:	eb0a 0003 	add.w	r0, sl, r3
 802a432:	0843      	lsrs	r3, r0, #1
 802a434:	07c0      	lsls	r0, r0, #31
 802a436:	5cfb      	ldrb	r3, [r7, r3]
 802a438:	bf54      	ite	pl
 802a43a:	f003 030f 	andpl.w	r3, r3, #15
 802a43e:	111b      	asrmi	r3, r3, #4
 802a440:	eb03 1303 	add.w	r3, r3, r3, lsl #4
 802a444:	b2db      	uxtb	r3, r3
 802a446:	930a      	str	r3, [sp, #40]	@ 0x28
 802a448:	e74c      	b.n	802a2e4 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x16c>
 802a44a:	2b00      	cmp	r3, #0
 802a44c:	f43f af77 	beq.w	802a33e <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1c6>
 802a450:	4a73      	ldr	r2, [pc, #460]	@ (802a620 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4a8>)
 802a452:	fa1f fe83 	uxth.w	lr, r3
 802a456:	f8b8 c000 	ldrh.w	ip, [r8]
 802a45a:	43db      	mvns	r3, r3
 802a45c:	6810      	ldr	r0, [r2, #0]
 802a45e:	ea4f 212c 	mov.w	r1, ip, asr #8
 802a462:	f3c0 4207 	ubfx	r2, r0, #16, #8
 802a466:	b2db      	uxtb	r3, r3
 802a468:	f001 01f8 	and.w	r1, r1, #248	@ 0xf8
 802a46c:	f3c0 2b07 	ubfx	fp, r0, #8, #8
 802a470:	fb12 f20e 	smulbb	r2, r2, lr
 802a474:	b2c0      	uxtb	r0, r0
 802a476:	fb1b fb0e 	smulbb	fp, fp, lr
 802a47a:	fb01 2103 	mla	r1, r1, r3, r2
 802a47e:	ea4f 02ec 	mov.w	r2, ip, asr #3
 802a482:	fb10 fe0e 	smulbb	lr, r0, lr
 802a486:	ea4f 0ccc 	mov.w	ip, ip, lsl #3
 802a48a:	b289      	uxth	r1, r1
 802a48c:	f002 02fc 	and.w	r2, r2, #252	@ 0xfc
 802a490:	fa5f fc8c 	uxtb.w	ip, ip
 802a494:	fb02 b203 	mla	r2, r2, r3, fp
 802a498:	1c48      	adds	r0, r1, #1
 802a49a:	fb0c e303 	mla	r3, ip, r3, lr
 802a49e:	b292      	uxth	r2, r2
 802a4a0:	b29b      	uxth	r3, r3
 802a4a2:	eb00 2111 	add.w	r1, r0, r1, lsr #8
 802a4a6:	f102 0b01 	add.w	fp, r2, #1
 802a4aa:	f401 4078 	and.w	r0, r1, #63488	@ 0xf800
 802a4ae:	1c59      	adds	r1, r3, #1
 802a4b0:	eb0b 2212 	add.w	r2, fp, r2, lsr #8
 802a4b4:	eb01 2113 	add.w	r1, r1, r3, lsr #8
 802a4b8:	0952      	lsrs	r2, r2, #5
 802a4ba:	f3c1 21c4 	ubfx	r1, r1, #11, #5
 802a4be:	f402 62fc 	and.w	r2, r2, #2016	@ 0x7e0
 802a4c2:	4301      	orrs	r1, r0
 802a4c4:	4311      	orrs	r1, r2
 802a4c6:	f8a8 1000 	strh.w	r1, [r8]
 802a4ca:	e738      	b.n	802a33e <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1c6>
 802a4cc:	f113 0b01 	adds.w	fp, r3, #1
 802a4d0:	f53f af35 	bmi.w	802a33e <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1c6>
 802a4d4:	45dc      	cmp	ip, fp
 802a4d6:	f6ff af32 	blt.w	802a33e <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1c6>
 802a4da:	f110 0b01 	adds.w	fp, r0, #1
 802a4de:	f53f af2e 	bmi.w	802a33e <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1c6>
 802a4e2:	45de      	cmp	lr, fp
 802a4e4:	f6ff af2b 	blt.w	802a33e <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1c6>
 802a4e8:	9302      	str	r3, [sp, #8]
 802a4ea:	fa0f f38e 	sxth.w	r3, lr
 802a4ee:	9a08      	ldr	r2, [sp, #32]
 802a4f0:	9301      	str	r3, [sp, #4]
 802a4f2:	fa0f f38c 	sxth.w	r3, ip
 802a4f6:	9105      	str	r1, [sp, #20]
 802a4f8:	4641      	mov	r1, r8
 802a4fa:	9300      	str	r3, [sp, #0]
 802a4fc:	4653      	mov	r3, sl
 802a4fe:	e9cd 0203 	strd	r0, r2, [sp, #12]
 802a502:	463a      	mov	r2, r7
 802a504:	9811      	ldr	r0, [sp, #68]	@ 0x44
 802a506:	f7ff fd57 	bl	8029fb8 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh>
 802a50a:	e718      	b.n	802a33e <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1c6>
 802a50c:	1422      	asrs	r2, r4, #16
 802a50e:	9906      	ldr	r1, [sp, #24]
 802a510:	1433      	asrs	r3, r6, #16
 802a512:	f3c4 3003 	ubfx	r0, r4, #12, #4
 802a516:	f3c6 3c03 	ubfx	ip, r6, #12, #4
 802a51a:	fb01 2303 	mla	r3, r1, r3, r2
 802a51e:	085a      	lsrs	r2, r3, #1
 802a520:	07d9      	lsls	r1, r3, #31
 802a522:	5cba      	ldrb	r2, [r7, r2]
 802a524:	bf54      	ite	pl
 802a526:	f002 020f 	andpl.w	r2, r2, #15
 802a52a:	1112      	asrmi	r2, r2, #4
 802a52c:	eb02 1202 	add.w	r2, r2, r2, lsl #4
 802a530:	b2d2      	uxtb	r2, r2
 802a532:	2800      	cmp	r0, #0
 802a534:	d063      	beq.n	802a5fe <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x486>
 802a536:	f103 0a01 	add.w	sl, r3, #1
 802a53a:	ea4f 015a 	mov.w	r1, sl, lsr #1
 802a53e:	f01a 0f01 	tst.w	sl, #1
 802a542:	5c79      	ldrb	r1, [r7, r1]
 802a544:	bf0c      	ite	eq
 802a546:	f001 010f 	andeq.w	r1, r1, #15
 802a54a:	1109      	asrne	r1, r1, #4
 802a54c:	eb01 1101 	add.w	r1, r1, r1, lsl #4
 802a550:	b2c9      	uxtb	r1, r1
 802a552:	910f      	str	r1, [sp, #60]	@ 0x3c
 802a554:	f1bc 0f00 	cmp.w	ip, #0
 802a558:	d01a      	beq.n	802a590 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x418>
 802a55a:	9908      	ldr	r1, [sp, #32]
 802a55c:	440b      	add	r3, r1
 802a55e:	0859      	lsrs	r1, r3, #1
 802a560:	f013 0f01 	tst.w	r3, #1
 802a564:	f103 0301 	add.w	r3, r3, #1
 802a568:	5c79      	ldrb	r1, [r7, r1]
 802a56a:	bf0c      	ite	eq
 802a56c:	f001 010f 	andeq.w	r1, r1, #15
 802a570:	1109      	asrne	r1, r1, #4
 802a572:	eb01 1101 	add.w	r1, r1, r1, lsl #4
 802a576:	b2c9      	uxtb	r1, r1
 802a578:	910b      	str	r1, [sp, #44]	@ 0x2c
 802a57a:	0859      	lsrs	r1, r3, #1
 802a57c:	07db      	lsls	r3, r3, #31
 802a57e:	5c79      	ldrb	r1, [r7, r1]
 802a580:	bf54      	ite	pl
 802a582:	f001 010f 	andpl.w	r1, r1, #15
 802a586:	1109      	asrmi	r1, r1, #4
 802a588:	eb01 1101 	add.w	r1, r1, r1, lsl #4
 802a58c:	b2c9      	uxtb	r1, r1
 802a58e:	9110      	str	r1, [sp, #64]	@ 0x40
 802a590:	b280      	uxth	r0, r0
 802a592:	fa1f fc8c 	uxth.w	ip, ip
 802a596:	fb00 f30c 	mul.w	r3, r0, ip
 802a59a:	0100      	lsls	r0, r0, #4
 802a59c:	ebc3 1c0c 	rsb	ip, r3, ip, lsl #4
 802a5a0:	f5c0 7180 	rsb	r1, r0, #256	@ 0x100
 802a5a4:	1ac0      	subs	r0, r0, r3
 802a5a6:	fa1f fc8c 	uxth.w	ip, ip
 802a5aa:	b280      	uxth	r0, r0
 802a5ac:	eba1 010c 	sub.w	r1, r1, ip
 802a5b0:	fa1f fa81 	uxth.w	sl, r1
 802a5b4:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 802a5b6:	4348      	muls	r0, r1
 802a5b8:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 802a5ba:	fb02 020a 	mla	r2, r2, sl, r0
 802a5be:	fb0c 2c01 	mla	ip, ip, r1, r2
 802a5c2:	9a10      	ldr	r2, [sp, #64]	@ 0x40
 802a5c4:	fb03 c302 	mla	r3, r3, r2, ip
 802a5c8:	f3c3 2307 	ubfx	r3, r3, #8, #8
 802a5cc:	2bff      	cmp	r3, #255	@ 0xff
 802a5ce:	d12b      	bne.n	802a628 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4b0>
 802a5d0:	4b13      	ldr	r3, [pc, #76]	@ (802a620 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4a8>)
 802a5d2:	681a      	ldr	r2, [r3, #0]
 802a5d4:	4b13      	ldr	r3, [pc, #76]	@ (802a624 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4ac>)
 802a5d6:	0951      	lsrs	r1, r2, #5
 802a5d8:	ea03 2312 	and.w	r3, r3, r2, lsr #8
 802a5dc:	f3c2 02c4 	ubfx	r2, r2, #3, #5
 802a5e0:	f401 61fc 	and.w	r1, r1, #2016	@ 0x7e0
 802a5e4:	430b      	orrs	r3, r1
 802a5e6:	4313      	orrs	r3, r2
 802a5e8:	f8ae 3000 	strh.w	r3, [lr]
 802a5ec:	9b27      	ldr	r3, [sp, #156]	@ 0x9c
 802a5ee:	f10e 0e02 	add.w	lr, lr, #2
 802a5f2:	f108 38ff 	add.w	r8, r8, #4294967295
 802a5f6:	441c      	add	r4, r3
 802a5f8:	9b28      	ldr	r3, [sp, #160]	@ 0xa0
 802a5fa:	441e      	add	r6, r3
 802a5fc:	e6cc      	b.n	802a398 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x220>
 802a5fe:	f1bc 0f00 	cmp.w	ip, #0
 802a602:	d0c5      	beq.n	802a590 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x418>
 802a604:	9908      	ldr	r1, [sp, #32]
 802a606:	440b      	add	r3, r1
 802a608:	0859      	lsrs	r1, r3, #1
 802a60a:	07db      	lsls	r3, r3, #31
 802a60c:	5c79      	ldrb	r1, [r7, r1]
 802a60e:	bf54      	ite	pl
 802a610:	f001 010f 	andpl.w	r1, r1, #15
 802a614:	1109      	asrmi	r1, r1, #4
 802a616:	eb01 1101 	add.w	r1, r1, r1, lsl #4
 802a61a:	b2c9      	uxtb	r1, r1
 802a61c:	910b      	str	r1, [sp, #44]	@ 0x2c
 802a61e:	e7b7      	b.n	802a590 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x418>
 802a620:	2400b888 	.word	0x2400b888
 802a624:	fffff800 	.word	0xfffff800
 802a628:	2b00      	cmp	r3, #0
 802a62a:	d0df      	beq.n	802a5ec <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x474>
 802a62c:	4a22      	ldr	r2, [pc, #136]	@ (802a6b8 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x540>)
 802a62e:	fa1f fa83 	uxth.w	sl, r3
 802a632:	f8be c000 	ldrh.w	ip, [lr]
 802a636:	43db      	mvns	r3, r3
 802a638:	6810      	ldr	r0, [r2, #0]
 802a63a:	ea4f 212c 	mov.w	r1, ip, asr #8
 802a63e:	f3c0 4207 	ubfx	r2, r0, #16, #8
 802a642:	b2db      	uxtb	r3, r3
 802a644:	f001 01f8 	and.w	r1, r1, #248	@ 0xf8
 802a648:	f3c0 2b07 	ubfx	fp, r0, #8, #8
 802a64c:	fb12 f20a 	smulbb	r2, r2, sl
 802a650:	b2c0      	uxtb	r0, r0
 802a652:	fb1b fb0a 	smulbb	fp, fp, sl
 802a656:	fb01 2103 	mla	r1, r1, r3, r2
 802a65a:	ea4f 02ec 	mov.w	r2, ip, asr #3
 802a65e:	fb10 f00a 	smulbb	r0, r0, sl
 802a662:	ea4f 0ccc 	mov.w	ip, ip, lsl #3
 802a666:	b289      	uxth	r1, r1
 802a668:	f002 02fc 	and.w	r2, r2, #252	@ 0xfc
 802a66c:	fa5f fc8c 	uxtb.w	ip, ip
 802a670:	fb02 b203 	mla	r2, r2, r3, fp
 802a674:	fb0c 0003 	mla	r0, ip, r3, r0
 802a678:	1c4b      	adds	r3, r1, #1
 802a67a:	b292      	uxth	r2, r2
 802a67c:	b280      	uxth	r0, r0
 802a67e:	eb03 2111 	add.w	r1, r3, r1, lsr #8
 802a682:	f100 0b01 	add.w	fp, r0, #1
 802a686:	f401 4178 	and.w	r1, r1, #63488	@ 0xf800
 802a68a:	eb0b 2b10 	add.w	fp, fp, r0, lsr #8
 802a68e:	f3cb 2bc4 	ubfx	fp, fp, #11, #5
 802a692:	ea4b 0101 	orr.w	r1, fp, r1
 802a696:	f102 0b01 	add.w	fp, r2, #1
 802a69a:	eb0b 2212 	add.w	r2, fp, r2, lsr #8
 802a69e:	0952      	lsrs	r2, r2, #5
 802a6a0:	f402 62fc 	and.w	r2, r2, #2016	@ 0x7e0
 802a6a4:	4311      	orrs	r1, r2
 802a6a6:	f8ae 1000 	strh.w	r1, [lr]
 802a6aa:	e79f      	b.n	802a5ec <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x474>
 802a6ac:	b013      	add	sp, #76	@ 0x4c
 802a6ae:	ecbd 8b08 	vpop	{d8-d11}
 802a6b2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 802a6b6:	bf00      	nop
 802a6b8:	2400b888 	.word	0x2400b888

0802a6bc <CRC_Lock>:
 802a6bc:	4a20      	ldr	r2, [pc, #128]	@ (802a740 <CRC_Lock+0x84>)
 802a6be:	b530      	push	{r4, r5, lr}
 802a6c0:	6813      	ldr	r3, [r2, #0]
 802a6c2:	f64f 74f0 	movw	r4, #65520	@ 0xfff0
 802a6c6:	f24c 2540 	movw	r5, #49728	@ 0xc240
 802a6ca:	f023 0301 	bic.w	r3, r3, #1
 802a6ce:	6013      	str	r3, [r2, #0]
 802a6d0:	4b1c      	ldr	r3, [pc, #112]	@ (802a744 <CRC_Lock+0x88>)
 802a6d2:	681a      	ldr	r2, [r3, #0]
 802a6d4:	4022      	ands	r2, r4
 802a6d6:	42aa      	cmp	r2, r5
 802a6d8:	d005      	beq.n	802a6e6 <CRC_Lock+0x2a>
 802a6da:	681b      	ldr	r3, [r3, #0]
 802a6dc:	f24c 2270 	movw	r2, #49776	@ 0xc270
 802a6e0:	4023      	ands	r3, r4
 802a6e2:	4293      	cmp	r3, r2
 802a6e4:	d124      	bne.n	802a730 <CRC_Lock+0x74>
 802a6e6:	4b18      	ldr	r3, [pc, #96]	@ (802a748 <CRC_Lock+0x8c>)
 802a6e8:	681b      	ldr	r3, [r3, #0]
 802a6ea:	bb0b      	cbnz	r3, 802a730 <CRC_Lock+0x74>
 802a6ec:	4b17      	ldr	r3, [pc, #92]	@ (802a74c <CRC_Lock+0x90>)
 802a6ee:	681a      	ldr	r2, [r3, #0]
 802a6f0:	f3c2 020b 	ubfx	r2, r2, #0, #12
 802a6f4:	f5b2 6f8a 	cmp.w	r2, #1104	@ 0x450
 802a6f8:	d00d      	beq.n	802a716 <CRC_Lock+0x5a>
 802a6fa:	681a      	ldr	r2, [r3, #0]
 802a6fc:	f240 4483 	movw	r4, #1155	@ 0x483
 802a700:	f3c2 020b 	ubfx	r2, r2, #0, #12
 802a704:	42a2      	cmp	r2, r4
 802a706:	d006      	beq.n	802a716 <CRC_Lock+0x5a>
 802a708:	681b      	ldr	r3, [r3, #0]
 802a70a:	f240 4285 	movw	r2, #1157	@ 0x485
 802a70e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 802a712:	4293      	cmp	r3, r2
 802a714:	d10c      	bne.n	802a730 <CRC_Lock+0x74>
 802a716:	4b0e      	ldr	r3, [pc, #56]	@ (802a750 <CRC_Lock+0x94>)
 802a718:	2201      	movs	r2, #1
 802a71a:	601a      	str	r2, [r3, #0]
 802a71c:	681a      	ldr	r2, [r3, #0]
 802a71e:	2a00      	cmp	r2, #0
 802a720:	d1fc      	bne.n	802a71c <CRC_Lock+0x60>
 802a722:	4b0c      	ldr	r3, [pc, #48]	@ (802a754 <CRC_Lock+0x98>)
 802a724:	6018      	str	r0, [r3, #0]
 802a726:	6818      	ldr	r0, [r3, #0]
 802a728:	1a43      	subs	r3, r0, r1
 802a72a:	4258      	negs	r0, r3
 802a72c:	4158      	adcs	r0, r3
 802a72e:	bd30      	pop	{r4, r5, pc}
 802a730:	4b09      	ldr	r3, [pc, #36]	@ (802a758 <CRC_Lock+0x9c>)
 802a732:	2201      	movs	r2, #1
 802a734:	601a      	str	r2, [r3, #0]
 802a736:	681a      	ldr	r2, [r3, #0]
 802a738:	2a00      	cmp	r2, #0
 802a73a:	d1fc      	bne.n	802a736 <CRC_Lock+0x7a>
 802a73c:	4b07      	ldr	r3, [pc, #28]	@ (802a75c <CRC_Lock+0xa0>)
 802a73e:	e7f1      	b.n	802a724 <CRC_Lock+0x68>
 802a740:	e0002000 	.word	0xe0002000
 802a744:	e000ed00 	.word	0xe000ed00
 802a748:	e0042000 	.word	0xe0042000
 802a74c:	5c001000 	.word	0x5c001000
 802a750:	58024c08 	.word	0x58024c08
 802a754:	58024c00 	.word	0x58024c00
 802a758:	40023008 	.word	0x40023008
 802a75c:	40023000 	.word	0x40023000

0802a760 <_ZN8touchgfx8Gestures21registerEventListenerERNS_15UIEventListenerE>:
 802a760:	6101      	str	r1, [r0, #16]
 802a762:	4770      	bx	lr

0802a764 <_ZN8touchgfx8Gestures4tickEv>:
 802a764:	7b83      	ldrb	r3, [r0, #14]
 802a766:	b14b      	cbz	r3, 802a77c <_ZN8touchgfx8Gestures4tickEv+0x18>
 802a768:	8903      	ldrh	r3, [r0, #8]
 802a76a:	3301      	adds	r3, #1
 802a76c:	b29b      	uxth	r3, r3
 802a76e:	2b07      	cmp	r3, #7
 802a770:	8103      	strh	r3, [r0, #8]
 802a772:	bf81      	itttt	hi
 802a774:	2300      	movhi	r3, #0
 802a776:	8143      	strhhi	r3, [r0, #10]
 802a778:	8183      	strhhi	r3, [r0, #12]
 802a77a:	7383      	strbhi	r3, [r0, #14]
 802a77c:	4770      	bx	lr
	...

0802a780 <_ZN8touchgfx8Gestures17registerDragEventEtttt>:
 802a780:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
 802a784:	4604      	mov	r4, r0
 802a786:	4698      	mov	r8, r3
 802a788:	8880      	ldrh	r0, [r0, #4]
 802a78a:	4617      	mov	r7, r2
 802a78c:	4b1d      	ldr	r3, [pc, #116]	@ (802a804 <_ZN8touchgfx8Gestures17registerDragEventEtttt+0x84>)
 802a78e:	460e      	mov	r6, r1
 802a790:	f8ad 0006 	strh.w	r0, [sp, #6]
 802a794:	eba8 0000 	sub.w	r0, r8, r0
 802a798:	9300      	str	r3, [sp, #0]
 802a79a:	2300      	movs	r3, #0
 802a79c:	b280      	uxth	r0, r0
 802a79e:	8aa2      	ldrh	r2, [r4, #20]
 802a7a0:	f88d 3004 	strb.w	r3, [sp, #4]
 802a7a4:	b203      	sxth	r3, r0
 802a7a6:	f8bd 5028 	ldrh.w	r5, [sp, #40]	@ 0x28
 802a7aa:	88e1      	ldrh	r1, [r4, #6]
 802a7ac:	2b00      	cmp	r3, #0
 802a7ae:	f8ad 800a 	strh.w	r8, [sp, #10]
 802a7b2:	f8ad 1008 	strh.w	r1, [sp, #8]
 802a7b6:	bfb8      	it	lt
 802a7b8:	4240      	neglt	r0, r0
 802a7ba:	f8ad 500c 	strh.w	r5, [sp, #12]
 802a7be:	bfb8      	it	lt
 802a7c0:	b203      	sxthlt	r3, r0
 802a7c2:	4293      	cmp	r3, r2
 802a7c4:	dc08      	bgt.n	802a7d8 <_ZN8touchgfx8Gestures17registerDragEventEtttt+0x58>
 802a7c6:	1a69      	subs	r1, r5, r1
 802a7c8:	b289      	uxth	r1, r1
 802a7ca:	b20b      	sxth	r3, r1
 802a7cc:	2b00      	cmp	r3, #0
 802a7ce:	bfbc      	itt	lt
 802a7d0:	4249      	neglt	r1, r1
 802a7d2:	b20b      	sxthlt	r3, r1
 802a7d4:	429a      	cmp	r2, r3
 802a7d6:	da13      	bge.n	802a800 <_ZN8touchgfx8Gestures17registerDragEventEtttt+0x80>
 802a7d8:	6920      	ldr	r0, [r4, #16]
 802a7da:	4669      	mov	r1, sp
 802a7dc:	eba8 0606 	sub.w	r6, r8, r6
 802a7e0:	1bef      	subs	r7, r5, r7
 802a7e2:	6803      	ldr	r3, [r0, #0]
 802a7e4:	685b      	ldr	r3, [r3, #4]
 802a7e6:	4798      	blx	r3
 802a7e8:	2300      	movs	r3, #0
 802a7ea:	2001      	movs	r0, #1
 802a7ec:	8166      	strh	r6, [r4, #10]
 802a7ee:	8123      	strh	r3, [r4, #8]
 802a7f0:	81a7      	strh	r7, [r4, #12]
 802a7f2:	f8a4 8004 	strh.w	r8, [r4, #4]
 802a7f6:	80e5      	strh	r5, [r4, #6]
 802a7f8:	73a0      	strb	r0, [r4, #14]
 802a7fa:	b004      	add	sp, #16
 802a7fc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 802a800:	2000      	movs	r0, #0
 802a802:	e7fa      	b.n	802a7fa <_ZN8touchgfx8Gestures17registerDragEventEtttt+0x7a>
 802a804:	0802ef64 	.word	0x0802ef64

0802a808 <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt>:
 802a808:	b5f0      	push	{r4, r5, r6, r7, lr}
 802a80a:	461e      	mov	r6, r3
 802a80c:	1e4b      	subs	r3, r1, #1
 802a80e:	b085      	sub	sp, #20
 802a810:	4604      	mov	r4, r0
 802a812:	2b01      	cmp	r3, #1
 802a814:	460d      	mov	r5, r1
 802a816:	4617      	mov	r7, r2
 802a818:	d84b      	bhi.n	802a8b2 <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt+0xaa>
 802a81a:	f9b0 200a 	ldrsh.w	r2, [r0, #10]
 802a81e:	1cd3      	adds	r3, r2, #3
 802a820:	b29b      	uxth	r3, r3
 802a822:	2b06      	cmp	r3, #6
 802a824:	d916      	bls.n	802a854 <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt+0x4c>
 802a826:	f8df c0a0 	ldr.w	ip, [pc, #160]	@ 802a8c8 <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt+0xc0>
 802a82a:	f9b4 1004 	ldrsh.w	r1, [r4, #4]
 802a82e:	f8cd c004 	str.w	ip, [sp, #4]
 802a832:	f04f 0c00 	mov.w	ip, #0
 802a836:	f9b4 3006 	ldrsh.w	r3, [r4, #6]
 802a83a:	6900      	ldr	r0, [r0, #16]
 802a83c:	f8ad 100c 	strh.w	r1, [sp, #12]
 802a840:	a901      	add	r1, sp, #4
 802a842:	f88d c008 	strb.w	ip, [sp, #8]
 802a846:	f8ad 200a 	strh.w	r2, [sp, #10]
 802a84a:	f8ad 300e 	strh.w	r3, [sp, #14]
 802a84e:	6803      	ldr	r3, [r0, #0]
 802a850:	689b      	ldr	r3, [r3, #8]
 802a852:	4798      	blx	r3
 802a854:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 802a858:	1cd3      	adds	r3, r2, #3
 802a85a:	b29b      	uxth	r3, r3
 802a85c:	2b06      	cmp	r3, #6
 802a85e:	d916      	bls.n	802a88e <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt+0x86>
 802a860:	f8df c064 	ldr.w	ip, [pc, #100]	@ 802a8c8 <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt+0xc0>
 802a864:	f9b4 1004 	ldrsh.w	r1, [r4, #4]
 802a868:	f8cd c004 	str.w	ip, [sp, #4]
 802a86c:	f04f 0c01 	mov.w	ip, #1
 802a870:	f9b4 3006 	ldrsh.w	r3, [r4, #6]
 802a874:	6920      	ldr	r0, [r4, #16]
 802a876:	f8ad 100c 	strh.w	r1, [sp, #12]
 802a87a:	a901      	add	r1, sp, #4
 802a87c:	f88d c008 	strb.w	ip, [sp, #8]
 802a880:	f8ad 200a 	strh.w	r2, [sp, #10]
 802a884:	f8ad 300e 	strh.w	r3, [sp, #14]
 802a888:	6803      	ldr	r3, [r0, #0]
 802a88a:	689b      	ldr	r3, [r3, #8]
 802a88c:	4798      	blx	r3
 802a88e:	4b0d      	ldr	r3, [pc, #52]	@ (802a8c4 <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt+0xbc>)
 802a890:	a901      	add	r1, sp, #4
 802a892:	6920      	ldr	r0, [r4, #16]
 802a894:	9301      	str	r3, [sp, #4]
 802a896:	2300      	movs	r3, #0
 802a898:	f88d 5008 	strb.w	r5, [sp, #8]
 802a89c:	f8ad 700a 	strh.w	r7, [sp, #10]
 802a8a0:	f8ad 600c 	strh.w	r6, [sp, #12]
 802a8a4:	f8ad 300e 	strh.w	r3, [sp, #14]
 802a8a8:	6803      	ldr	r3, [r0, #0]
 802a8aa:	681b      	ldr	r3, [r3, #0]
 802a8ac:	4798      	blx	r3
 802a8ae:	b005      	add	sp, #20
 802a8b0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 802a8b2:	2900      	cmp	r1, #0
 802a8b4:	d1eb      	bne.n	802a88e <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt+0x86>
 802a8b6:	80a2      	strh	r2, [r4, #4]
 802a8b8:	80c6      	strh	r6, [r0, #6]
 802a8ba:	60a1      	str	r1, [r4, #8]
 802a8bc:	81a1      	strh	r1, [r4, #12]
 802a8be:	73a1      	strb	r1, [r4, #14]
 802a8c0:	e7e5      	b.n	802a88e <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt+0x86>
 802a8c2:	bf00      	nop
 802a8c4:	0802ef50 	.word	0x0802ef50
 802a8c8:	0802ef78 	.word	0x0802ef78

0802a8cc <__aeabi_atexit>:
 802a8cc:	460b      	mov	r3, r1
 802a8ce:	4601      	mov	r1, r0
 802a8d0:	4618      	mov	r0, r3
 802a8d2:	f000 b911 	b.w	802aaf8 <__cxa_atexit>

0802a8d6 <_ZdlPvj>:
 802a8d6:	f000 b812 	b.w	802a8fe <_ZdlPv>

0802a8da <__cxa_guard_acquire>:
 802a8da:	6802      	ldr	r2, [r0, #0]
 802a8dc:	07d2      	lsls	r2, r2, #31
 802a8de:	4603      	mov	r3, r0
 802a8e0:	d405      	bmi.n	802a8ee <__cxa_guard_acquire+0x14>
 802a8e2:	7842      	ldrb	r2, [r0, #1]
 802a8e4:	b102      	cbz	r2, 802a8e8 <__cxa_guard_acquire+0xe>
 802a8e6:	deff      	udf	#255	@ 0xff
 802a8e8:	2001      	movs	r0, #1
 802a8ea:	7058      	strb	r0, [r3, #1]
 802a8ec:	4770      	bx	lr
 802a8ee:	2000      	movs	r0, #0
 802a8f0:	4770      	bx	lr

0802a8f2 <__cxa_guard_release>:
 802a8f2:	2301      	movs	r3, #1
 802a8f4:	6003      	str	r3, [r0, #0]
 802a8f6:	4770      	bx	lr

0802a8f8 <__cxa_pure_virtual>:
 802a8f8:	b508      	push	{r3, lr}
 802a8fa:	f000 f80f 	bl	802a91c <_ZSt9terminatev>

0802a8fe <_ZdlPv>:
 802a8fe:	f000 b845 	b.w	802a98c <free>

0802a902 <_ZN10__cxxabiv111__terminateEPFvvE>:
 802a902:	b508      	push	{r3, lr}
 802a904:	4780      	blx	r0
 802a906:	f000 f80e 	bl	802a926 <abort>
	...

0802a90c <_ZSt13get_terminatev>:
 802a90c:	4b02      	ldr	r3, [pc, #8]	@ (802a918 <_ZSt13get_terminatev+0xc>)
 802a90e:	6818      	ldr	r0, [r3, #0]
 802a910:	f3bf 8f5b 	dmb	ish
 802a914:	4770      	bx	lr
 802a916:	bf00      	nop
 802a918:	240000c8 	.word	0x240000c8

0802a91c <_ZSt9terminatev>:
 802a91c:	b508      	push	{r3, lr}
 802a91e:	f7ff fff5 	bl	802a90c <_ZSt13get_terminatev>
 802a922:	f7ff ffee 	bl	802a902 <_ZN10__cxxabiv111__terminateEPFvvE>

0802a926 <abort>:
 802a926:	b508      	push	{r3, lr}
 802a928:	2006      	movs	r0, #6
 802a92a:	f000 fa3b 	bl	802ada4 <raise>
 802a92e:	2001      	movs	r0, #1
 802a930:	f7d6 fea2 	bl	8001678 <_exit>

0802a934 <__assert_func>:
 802a934:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 802a936:	4614      	mov	r4, r2
 802a938:	461a      	mov	r2, r3
 802a93a:	4b09      	ldr	r3, [pc, #36]	@ (802a960 <__assert_func+0x2c>)
 802a93c:	681b      	ldr	r3, [r3, #0]
 802a93e:	4605      	mov	r5, r0
 802a940:	68d8      	ldr	r0, [r3, #12]
 802a942:	b954      	cbnz	r4, 802a95a <__assert_func+0x26>
 802a944:	4b07      	ldr	r3, [pc, #28]	@ (802a964 <__assert_func+0x30>)
 802a946:	461c      	mov	r4, r3
 802a948:	e9cd 3401 	strd	r3, r4, [sp, #4]
 802a94c:	9100      	str	r1, [sp, #0]
 802a94e:	462b      	mov	r3, r5
 802a950:	4905      	ldr	r1, [pc, #20]	@ (802a968 <__assert_func+0x34>)
 802a952:	f000 f983 	bl	802ac5c <fiprintf>
 802a956:	f7ff ffe6 	bl	802a926 <abort>
 802a95a:	4b04      	ldr	r3, [pc, #16]	@ (802a96c <__assert_func+0x38>)
 802a95c:	e7f4      	b.n	802a948 <__assert_func+0x14>
 802a95e:	bf00      	nop
 802a960:	240000d8 	.word	0x240000d8
 802a964:	08030318 	.word	0x08030318
 802a968:	080302ea 	.word	0x080302ea
 802a96c:	080302dd 	.word	0x080302dd

0802a970 <atexit>:
 802a970:	2300      	movs	r3, #0
 802a972:	4601      	mov	r1, r0
 802a974:	461a      	mov	r2, r3
 802a976:	4618      	mov	r0, r3
 802a978:	f000 bb18 	b.w	802afac <__register_exitproc>

0802a97c <malloc>:
 802a97c:	4b02      	ldr	r3, [pc, #8]	@ (802a988 <malloc+0xc>)
 802a97e:	4601      	mov	r1, r0
 802a980:	6818      	ldr	r0, [r3, #0]
 802a982:	f000 b82d 	b.w	802a9e0 <_malloc_r>
 802a986:	bf00      	nop
 802a988:	240000d8 	.word	0x240000d8

0802a98c <free>:
 802a98c:	4b02      	ldr	r3, [pc, #8]	@ (802a998 <free+0xc>)
 802a98e:	4601      	mov	r1, r0
 802a990:	6818      	ldr	r0, [r3, #0]
 802a992:	f000 bb67 	b.w	802b064 <_free_r>
 802a996:	bf00      	nop
 802a998:	240000d8 	.word	0x240000d8

0802a99c <sbrk_aligned>:
 802a99c:	b570      	push	{r4, r5, r6, lr}
 802a99e:	4e0f      	ldr	r6, [pc, #60]	@ (802a9dc <sbrk_aligned+0x40>)
 802a9a0:	460c      	mov	r4, r1
 802a9a2:	6831      	ldr	r1, [r6, #0]
 802a9a4:	4605      	mov	r5, r0
 802a9a6:	b911      	cbnz	r1, 802a9ae <sbrk_aligned+0x12>
 802a9a8:	f000 faa2 	bl	802aef0 <_sbrk_r>
 802a9ac:	6030      	str	r0, [r6, #0]
 802a9ae:	4621      	mov	r1, r4
 802a9b0:	4628      	mov	r0, r5
 802a9b2:	f000 fa9d 	bl	802aef0 <_sbrk_r>
 802a9b6:	1c43      	adds	r3, r0, #1
 802a9b8:	d103      	bne.n	802a9c2 <sbrk_aligned+0x26>
 802a9ba:	f04f 34ff 	mov.w	r4, #4294967295
 802a9be:	4620      	mov	r0, r4
 802a9c0:	bd70      	pop	{r4, r5, r6, pc}
 802a9c2:	1cc4      	adds	r4, r0, #3
 802a9c4:	f024 0403 	bic.w	r4, r4, #3
 802a9c8:	42a0      	cmp	r0, r4
 802a9ca:	d0f8      	beq.n	802a9be <sbrk_aligned+0x22>
 802a9cc:	1a21      	subs	r1, r4, r0
 802a9ce:	4628      	mov	r0, r5
 802a9d0:	f000 fa8e 	bl	802aef0 <_sbrk_r>
 802a9d4:	3001      	adds	r0, #1
 802a9d6:	d1f2      	bne.n	802a9be <sbrk_aligned+0x22>
 802a9d8:	e7ef      	b.n	802a9ba <sbrk_aligned+0x1e>
 802a9da:	bf00      	nop
 802a9dc:	2400b97c 	.word	0x2400b97c

0802a9e0 <_malloc_r>:
 802a9e0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 802a9e4:	1ccd      	adds	r5, r1, #3
 802a9e6:	f025 0503 	bic.w	r5, r5, #3
 802a9ea:	3508      	adds	r5, #8
 802a9ec:	2d0c      	cmp	r5, #12
 802a9ee:	bf38      	it	cc
 802a9f0:	250c      	movcc	r5, #12
 802a9f2:	2d00      	cmp	r5, #0
 802a9f4:	4606      	mov	r6, r0
 802a9f6:	db01      	blt.n	802a9fc <_malloc_r+0x1c>
 802a9f8:	42a9      	cmp	r1, r5
 802a9fa:	d904      	bls.n	802aa06 <_malloc_r+0x26>
 802a9fc:	230c      	movs	r3, #12
 802a9fe:	6033      	str	r3, [r6, #0]
 802aa00:	2000      	movs	r0, #0
 802aa02:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 802aa06:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 802aadc <_malloc_r+0xfc>
 802aa0a:	f000 f869 	bl	802aae0 <__malloc_lock>
 802aa0e:	f8d8 3000 	ldr.w	r3, [r8]
 802aa12:	461c      	mov	r4, r3
 802aa14:	bb44      	cbnz	r4, 802aa68 <_malloc_r+0x88>
 802aa16:	4629      	mov	r1, r5
 802aa18:	4630      	mov	r0, r6
 802aa1a:	f7ff ffbf 	bl	802a99c <sbrk_aligned>
 802aa1e:	1c43      	adds	r3, r0, #1
 802aa20:	4604      	mov	r4, r0
 802aa22:	d158      	bne.n	802aad6 <_malloc_r+0xf6>
 802aa24:	f8d8 4000 	ldr.w	r4, [r8]
 802aa28:	4627      	mov	r7, r4
 802aa2a:	2f00      	cmp	r7, #0
 802aa2c:	d143      	bne.n	802aab6 <_malloc_r+0xd6>
 802aa2e:	2c00      	cmp	r4, #0
 802aa30:	d04b      	beq.n	802aaca <_malloc_r+0xea>
 802aa32:	6823      	ldr	r3, [r4, #0]
 802aa34:	4639      	mov	r1, r7
 802aa36:	4630      	mov	r0, r6
 802aa38:	eb04 0903 	add.w	r9, r4, r3
 802aa3c:	f000 fa58 	bl	802aef0 <_sbrk_r>
 802aa40:	4581      	cmp	r9, r0
 802aa42:	d142      	bne.n	802aaca <_malloc_r+0xea>
 802aa44:	6821      	ldr	r1, [r4, #0]
 802aa46:	1a6d      	subs	r5, r5, r1
 802aa48:	4629      	mov	r1, r5
 802aa4a:	4630      	mov	r0, r6
 802aa4c:	f7ff ffa6 	bl	802a99c <sbrk_aligned>
 802aa50:	3001      	adds	r0, #1
 802aa52:	d03a      	beq.n	802aaca <_malloc_r+0xea>
 802aa54:	6823      	ldr	r3, [r4, #0]
 802aa56:	442b      	add	r3, r5
 802aa58:	6023      	str	r3, [r4, #0]
 802aa5a:	f8d8 3000 	ldr.w	r3, [r8]
 802aa5e:	685a      	ldr	r2, [r3, #4]
 802aa60:	bb62      	cbnz	r2, 802aabc <_malloc_r+0xdc>
 802aa62:	f8c8 7000 	str.w	r7, [r8]
 802aa66:	e00f      	b.n	802aa88 <_malloc_r+0xa8>
 802aa68:	6822      	ldr	r2, [r4, #0]
 802aa6a:	1b52      	subs	r2, r2, r5
 802aa6c:	d420      	bmi.n	802aab0 <_malloc_r+0xd0>
 802aa6e:	2a0b      	cmp	r2, #11
 802aa70:	d917      	bls.n	802aaa2 <_malloc_r+0xc2>
 802aa72:	1961      	adds	r1, r4, r5
 802aa74:	42a3      	cmp	r3, r4
 802aa76:	6025      	str	r5, [r4, #0]
 802aa78:	bf18      	it	ne
 802aa7a:	6059      	strne	r1, [r3, #4]
 802aa7c:	6863      	ldr	r3, [r4, #4]
 802aa7e:	bf08      	it	eq
 802aa80:	f8c8 1000 	streq.w	r1, [r8]
 802aa84:	5162      	str	r2, [r4, r5]
 802aa86:	604b      	str	r3, [r1, #4]
 802aa88:	4630      	mov	r0, r6
 802aa8a:	f000 f82f 	bl	802aaec <__malloc_unlock>
 802aa8e:	f104 000b 	add.w	r0, r4, #11
 802aa92:	1d23      	adds	r3, r4, #4
 802aa94:	f020 0007 	bic.w	r0, r0, #7
 802aa98:	1ac2      	subs	r2, r0, r3
 802aa9a:	bf1c      	itt	ne
 802aa9c:	1a1b      	subne	r3, r3, r0
 802aa9e:	50a3      	strne	r3, [r4, r2]
 802aaa0:	e7af      	b.n	802aa02 <_malloc_r+0x22>
 802aaa2:	6862      	ldr	r2, [r4, #4]
 802aaa4:	42a3      	cmp	r3, r4
 802aaa6:	bf0c      	ite	eq
 802aaa8:	f8c8 2000 	streq.w	r2, [r8]
 802aaac:	605a      	strne	r2, [r3, #4]
 802aaae:	e7eb      	b.n	802aa88 <_malloc_r+0xa8>
 802aab0:	4623      	mov	r3, r4
 802aab2:	6864      	ldr	r4, [r4, #4]
 802aab4:	e7ae      	b.n	802aa14 <_malloc_r+0x34>
 802aab6:	463c      	mov	r4, r7
 802aab8:	687f      	ldr	r7, [r7, #4]
 802aaba:	e7b6      	b.n	802aa2a <_malloc_r+0x4a>
 802aabc:	461a      	mov	r2, r3
 802aabe:	685b      	ldr	r3, [r3, #4]
 802aac0:	42a3      	cmp	r3, r4
 802aac2:	d1fb      	bne.n	802aabc <_malloc_r+0xdc>
 802aac4:	2300      	movs	r3, #0
 802aac6:	6053      	str	r3, [r2, #4]
 802aac8:	e7de      	b.n	802aa88 <_malloc_r+0xa8>
 802aaca:	230c      	movs	r3, #12
 802aacc:	6033      	str	r3, [r6, #0]
 802aace:	4630      	mov	r0, r6
 802aad0:	f000 f80c 	bl	802aaec <__malloc_unlock>
 802aad4:	e794      	b.n	802aa00 <_malloc_r+0x20>
 802aad6:	6005      	str	r5, [r0, #0]
 802aad8:	e7d6      	b.n	802aa88 <_malloc_r+0xa8>
 802aada:	bf00      	nop
 802aadc:	2400b980 	.word	0x2400b980

0802aae0 <__malloc_lock>:
 802aae0:	4801      	ldr	r0, [pc, #4]	@ (802aae8 <__malloc_lock+0x8>)
 802aae2:	f000 ba52 	b.w	802af8a <__retarget_lock_acquire_recursive>
 802aae6:	bf00      	nop
 802aae8:	2400bac4 	.word	0x2400bac4

0802aaec <__malloc_unlock>:
 802aaec:	4801      	ldr	r0, [pc, #4]	@ (802aaf4 <__malloc_unlock+0x8>)
 802aaee:	f000 ba4d 	b.w	802af8c <__retarget_lock_release_recursive>
 802aaf2:	bf00      	nop
 802aaf4:	2400bac4 	.word	0x2400bac4

0802aaf8 <__cxa_atexit>:
 802aaf8:	b510      	push	{r4, lr}
 802aafa:	4604      	mov	r4, r0
 802aafc:	4804      	ldr	r0, [pc, #16]	@ (802ab10 <__cxa_atexit+0x18>)
 802aafe:	4613      	mov	r3, r2
 802ab00:	b120      	cbz	r0, 802ab0c <__cxa_atexit+0x14>
 802ab02:	460a      	mov	r2, r1
 802ab04:	2002      	movs	r0, #2
 802ab06:	4621      	mov	r1, r4
 802ab08:	f000 fa50 	bl	802afac <__register_exitproc>
 802ab0c:	bd10      	pop	{r4, pc}
 802ab0e:	bf00      	nop
 802ab10:	0802afad 	.word	0x0802afad

0802ab14 <std>:
 802ab14:	2300      	movs	r3, #0
 802ab16:	b510      	push	{r4, lr}
 802ab18:	4604      	mov	r4, r0
 802ab1a:	e9c0 3300 	strd	r3, r3, [r0]
 802ab1e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 802ab22:	6083      	str	r3, [r0, #8]
 802ab24:	8181      	strh	r1, [r0, #12]
 802ab26:	6643      	str	r3, [r0, #100]	@ 0x64
 802ab28:	81c2      	strh	r2, [r0, #14]
 802ab2a:	6183      	str	r3, [r0, #24]
 802ab2c:	4619      	mov	r1, r3
 802ab2e:	2208      	movs	r2, #8
 802ab30:	305c      	adds	r0, #92	@ 0x5c
 802ab32:	f000 f906 	bl	802ad42 <memset>
 802ab36:	4b0d      	ldr	r3, [pc, #52]	@ (802ab6c <std+0x58>)
 802ab38:	6263      	str	r3, [r4, #36]	@ 0x24
 802ab3a:	4b0d      	ldr	r3, [pc, #52]	@ (802ab70 <std+0x5c>)
 802ab3c:	62a3      	str	r3, [r4, #40]	@ 0x28
 802ab3e:	4b0d      	ldr	r3, [pc, #52]	@ (802ab74 <std+0x60>)
 802ab40:	62e3      	str	r3, [r4, #44]	@ 0x2c
 802ab42:	4b0d      	ldr	r3, [pc, #52]	@ (802ab78 <std+0x64>)
 802ab44:	6323      	str	r3, [r4, #48]	@ 0x30
 802ab46:	4b0d      	ldr	r3, [pc, #52]	@ (802ab7c <std+0x68>)
 802ab48:	6224      	str	r4, [r4, #32]
 802ab4a:	429c      	cmp	r4, r3
 802ab4c:	d006      	beq.n	802ab5c <std+0x48>
 802ab4e:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 802ab52:	4294      	cmp	r4, r2
 802ab54:	d002      	beq.n	802ab5c <std+0x48>
 802ab56:	33d0      	adds	r3, #208	@ 0xd0
 802ab58:	429c      	cmp	r4, r3
 802ab5a:	d105      	bne.n	802ab68 <std+0x54>
 802ab5c:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 802ab60:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 802ab64:	f000 ba10 	b.w	802af88 <__retarget_lock_init_recursive>
 802ab68:	bd10      	pop	{r4, pc}
 802ab6a:	bf00      	nop
 802ab6c:	0802acbd 	.word	0x0802acbd
 802ab70:	0802acdf 	.word	0x0802acdf
 802ab74:	0802ad17 	.word	0x0802ad17
 802ab78:	0802ad3b 	.word	0x0802ad3b
 802ab7c:	2400b984 	.word	0x2400b984

0802ab80 <stdio_exit_handler>:
 802ab80:	4a02      	ldr	r2, [pc, #8]	@ (802ab8c <stdio_exit_handler+0xc>)
 802ab82:	4903      	ldr	r1, [pc, #12]	@ (802ab90 <stdio_exit_handler+0x10>)
 802ab84:	4803      	ldr	r0, [pc, #12]	@ (802ab94 <stdio_exit_handler+0x14>)
 802ab86:	f000 b87b 	b.w	802ac80 <_fwalk_sglue>
 802ab8a:	bf00      	nop
 802ab8c:	240000cc 	.word	0x240000cc
 802ab90:	0802b7a1 	.word	0x0802b7a1
 802ab94:	240000dc 	.word	0x240000dc

0802ab98 <cleanup_stdio>:
 802ab98:	6841      	ldr	r1, [r0, #4]
 802ab9a:	4b0c      	ldr	r3, [pc, #48]	@ (802abcc <cleanup_stdio+0x34>)
 802ab9c:	4299      	cmp	r1, r3
 802ab9e:	b510      	push	{r4, lr}
 802aba0:	4604      	mov	r4, r0
 802aba2:	d001      	beq.n	802aba8 <cleanup_stdio+0x10>
 802aba4:	f000 fdfc 	bl	802b7a0 <_fflush_r>
 802aba8:	68a1      	ldr	r1, [r4, #8]
 802abaa:	4b09      	ldr	r3, [pc, #36]	@ (802abd0 <cleanup_stdio+0x38>)
 802abac:	4299      	cmp	r1, r3
 802abae:	d002      	beq.n	802abb6 <cleanup_stdio+0x1e>
 802abb0:	4620      	mov	r0, r4
 802abb2:	f000 fdf5 	bl	802b7a0 <_fflush_r>
 802abb6:	68e1      	ldr	r1, [r4, #12]
 802abb8:	4b06      	ldr	r3, [pc, #24]	@ (802abd4 <cleanup_stdio+0x3c>)
 802abba:	4299      	cmp	r1, r3
 802abbc:	d004      	beq.n	802abc8 <cleanup_stdio+0x30>
 802abbe:	4620      	mov	r0, r4
 802abc0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 802abc4:	f000 bdec 	b.w	802b7a0 <_fflush_r>
 802abc8:	bd10      	pop	{r4, pc}
 802abca:	bf00      	nop
 802abcc:	2400b984 	.word	0x2400b984
 802abd0:	2400b9ec 	.word	0x2400b9ec
 802abd4:	2400ba54 	.word	0x2400ba54

0802abd8 <global_stdio_init.part.0>:
 802abd8:	b510      	push	{r4, lr}
 802abda:	4b0b      	ldr	r3, [pc, #44]	@ (802ac08 <global_stdio_init.part.0+0x30>)
 802abdc:	4c0b      	ldr	r4, [pc, #44]	@ (802ac0c <global_stdio_init.part.0+0x34>)
 802abde:	4a0c      	ldr	r2, [pc, #48]	@ (802ac10 <global_stdio_init.part.0+0x38>)
 802abe0:	601a      	str	r2, [r3, #0]
 802abe2:	4620      	mov	r0, r4
 802abe4:	2200      	movs	r2, #0
 802abe6:	2104      	movs	r1, #4
 802abe8:	f7ff ff94 	bl	802ab14 <std>
 802abec:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 802abf0:	2201      	movs	r2, #1
 802abf2:	2109      	movs	r1, #9
 802abf4:	f7ff ff8e 	bl	802ab14 <std>
 802abf8:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 802abfc:	2202      	movs	r2, #2
 802abfe:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 802ac02:	2112      	movs	r1, #18
 802ac04:	f7ff bf86 	b.w	802ab14 <std>
 802ac08:	2400babc 	.word	0x2400babc
 802ac0c:	2400b984 	.word	0x2400b984
 802ac10:	0802ab81 	.word	0x0802ab81

0802ac14 <__sfp_lock_acquire>:
 802ac14:	4801      	ldr	r0, [pc, #4]	@ (802ac1c <__sfp_lock_acquire+0x8>)
 802ac16:	f000 b9b8 	b.w	802af8a <__retarget_lock_acquire_recursive>
 802ac1a:	bf00      	nop
 802ac1c:	2400bac6 	.word	0x2400bac6

0802ac20 <__sfp_lock_release>:
 802ac20:	4801      	ldr	r0, [pc, #4]	@ (802ac28 <__sfp_lock_release+0x8>)
 802ac22:	f000 b9b3 	b.w	802af8c <__retarget_lock_release_recursive>
 802ac26:	bf00      	nop
 802ac28:	2400bac6 	.word	0x2400bac6

0802ac2c <__sinit>:
 802ac2c:	b510      	push	{r4, lr}
 802ac2e:	4604      	mov	r4, r0
 802ac30:	f7ff fff0 	bl	802ac14 <__sfp_lock_acquire>
 802ac34:	6a23      	ldr	r3, [r4, #32]
 802ac36:	b11b      	cbz	r3, 802ac40 <__sinit+0x14>
 802ac38:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 802ac3c:	f7ff bff0 	b.w	802ac20 <__sfp_lock_release>
 802ac40:	4b04      	ldr	r3, [pc, #16]	@ (802ac54 <__sinit+0x28>)
 802ac42:	6223      	str	r3, [r4, #32]
 802ac44:	4b04      	ldr	r3, [pc, #16]	@ (802ac58 <__sinit+0x2c>)
 802ac46:	681b      	ldr	r3, [r3, #0]
 802ac48:	2b00      	cmp	r3, #0
 802ac4a:	d1f5      	bne.n	802ac38 <__sinit+0xc>
 802ac4c:	f7ff ffc4 	bl	802abd8 <global_stdio_init.part.0>
 802ac50:	e7f2      	b.n	802ac38 <__sinit+0xc>
 802ac52:	bf00      	nop
 802ac54:	0802ab99 	.word	0x0802ab99
 802ac58:	2400babc 	.word	0x2400babc

0802ac5c <fiprintf>:
 802ac5c:	b40e      	push	{r1, r2, r3}
 802ac5e:	b503      	push	{r0, r1, lr}
 802ac60:	4601      	mov	r1, r0
 802ac62:	ab03      	add	r3, sp, #12
 802ac64:	4805      	ldr	r0, [pc, #20]	@ (802ac7c <fiprintf+0x20>)
 802ac66:	f853 2b04 	ldr.w	r2, [r3], #4
 802ac6a:	6800      	ldr	r0, [r0, #0]
 802ac6c:	9301      	str	r3, [sp, #4]
 802ac6e:	f000 fa6d 	bl	802b14c <_vfiprintf_r>
 802ac72:	b002      	add	sp, #8
 802ac74:	f85d eb04 	ldr.w	lr, [sp], #4
 802ac78:	b003      	add	sp, #12
 802ac7a:	4770      	bx	lr
 802ac7c:	240000d8 	.word	0x240000d8

0802ac80 <_fwalk_sglue>:
 802ac80:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 802ac84:	4607      	mov	r7, r0
 802ac86:	4688      	mov	r8, r1
 802ac88:	4614      	mov	r4, r2
 802ac8a:	2600      	movs	r6, #0
 802ac8c:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 802ac90:	f1b9 0901 	subs.w	r9, r9, #1
 802ac94:	d505      	bpl.n	802aca2 <_fwalk_sglue+0x22>
 802ac96:	6824      	ldr	r4, [r4, #0]
 802ac98:	2c00      	cmp	r4, #0
 802ac9a:	d1f7      	bne.n	802ac8c <_fwalk_sglue+0xc>
 802ac9c:	4630      	mov	r0, r6
 802ac9e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 802aca2:	89ab      	ldrh	r3, [r5, #12]
 802aca4:	2b01      	cmp	r3, #1
 802aca6:	d907      	bls.n	802acb8 <_fwalk_sglue+0x38>
 802aca8:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 802acac:	3301      	adds	r3, #1
 802acae:	d003      	beq.n	802acb8 <_fwalk_sglue+0x38>
 802acb0:	4629      	mov	r1, r5
 802acb2:	4638      	mov	r0, r7
 802acb4:	47c0      	blx	r8
 802acb6:	4306      	orrs	r6, r0
 802acb8:	3568      	adds	r5, #104	@ 0x68
 802acba:	e7e9      	b.n	802ac90 <_fwalk_sglue+0x10>

0802acbc <__sread>:
 802acbc:	b510      	push	{r4, lr}
 802acbe:	460c      	mov	r4, r1
 802acc0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 802acc4:	f000 f8ee 	bl	802aea4 <_read_r>
 802acc8:	2800      	cmp	r0, #0
 802acca:	bfab      	itete	ge
 802accc:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 802acce:	89a3      	ldrhlt	r3, [r4, #12]
 802acd0:	181b      	addge	r3, r3, r0
 802acd2:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 802acd6:	bfac      	ite	ge
 802acd8:	6563      	strge	r3, [r4, #84]	@ 0x54
 802acda:	81a3      	strhlt	r3, [r4, #12]
 802acdc:	bd10      	pop	{r4, pc}

0802acde <__swrite>:
 802acde:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 802ace2:	461f      	mov	r7, r3
 802ace4:	898b      	ldrh	r3, [r1, #12]
 802ace6:	05db      	lsls	r3, r3, #23
 802ace8:	4605      	mov	r5, r0
 802acea:	460c      	mov	r4, r1
 802acec:	4616      	mov	r6, r2
 802acee:	d505      	bpl.n	802acfc <__swrite+0x1e>
 802acf0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 802acf4:	2302      	movs	r3, #2
 802acf6:	2200      	movs	r2, #0
 802acf8:	f000 f8c2 	bl	802ae80 <_lseek_r>
 802acfc:	89a3      	ldrh	r3, [r4, #12]
 802acfe:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 802ad02:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 802ad06:	81a3      	strh	r3, [r4, #12]
 802ad08:	4632      	mov	r2, r6
 802ad0a:	463b      	mov	r3, r7
 802ad0c:	4628      	mov	r0, r5
 802ad0e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 802ad12:	f000 b8fd 	b.w	802af10 <_write_r>

0802ad16 <__sseek>:
 802ad16:	b510      	push	{r4, lr}
 802ad18:	460c      	mov	r4, r1
 802ad1a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 802ad1e:	f000 f8af 	bl	802ae80 <_lseek_r>
 802ad22:	1c43      	adds	r3, r0, #1
 802ad24:	89a3      	ldrh	r3, [r4, #12]
 802ad26:	bf15      	itete	ne
 802ad28:	6560      	strne	r0, [r4, #84]	@ 0x54
 802ad2a:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 802ad2e:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 802ad32:	81a3      	strheq	r3, [r4, #12]
 802ad34:	bf18      	it	ne
 802ad36:	81a3      	strhne	r3, [r4, #12]
 802ad38:	bd10      	pop	{r4, pc}

0802ad3a <__sclose>:
 802ad3a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 802ad3e:	f000 b839 	b.w	802adb4 <_close_r>

0802ad42 <memset>:
 802ad42:	4402      	add	r2, r0
 802ad44:	4603      	mov	r3, r0
 802ad46:	4293      	cmp	r3, r2
 802ad48:	d100      	bne.n	802ad4c <memset+0xa>
 802ad4a:	4770      	bx	lr
 802ad4c:	f803 1b01 	strb.w	r1, [r3], #1
 802ad50:	e7f9      	b.n	802ad46 <memset+0x4>

0802ad52 <_raise_r>:
 802ad52:	291f      	cmp	r1, #31
 802ad54:	b538      	push	{r3, r4, r5, lr}
 802ad56:	4605      	mov	r5, r0
 802ad58:	460c      	mov	r4, r1
 802ad5a:	d904      	bls.n	802ad66 <_raise_r+0x14>
 802ad5c:	2316      	movs	r3, #22
 802ad5e:	6003      	str	r3, [r0, #0]
 802ad60:	f04f 30ff 	mov.w	r0, #4294967295
 802ad64:	bd38      	pop	{r3, r4, r5, pc}
 802ad66:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 802ad68:	b112      	cbz	r2, 802ad70 <_raise_r+0x1e>
 802ad6a:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 802ad6e:	b94b      	cbnz	r3, 802ad84 <_raise_r+0x32>
 802ad70:	4628      	mov	r0, r5
 802ad72:	f000 f8bb 	bl	802aeec <_getpid_r>
 802ad76:	4622      	mov	r2, r4
 802ad78:	4601      	mov	r1, r0
 802ad7a:	4628      	mov	r0, r5
 802ad7c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 802ad80:	f000 b8a2 	b.w	802aec8 <_kill_r>
 802ad84:	2b01      	cmp	r3, #1
 802ad86:	d00a      	beq.n	802ad9e <_raise_r+0x4c>
 802ad88:	1c59      	adds	r1, r3, #1
 802ad8a:	d103      	bne.n	802ad94 <_raise_r+0x42>
 802ad8c:	2316      	movs	r3, #22
 802ad8e:	6003      	str	r3, [r0, #0]
 802ad90:	2001      	movs	r0, #1
 802ad92:	e7e7      	b.n	802ad64 <_raise_r+0x12>
 802ad94:	2100      	movs	r1, #0
 802ad96:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 802ad9a:	4620      	mov	r0, r4
 802ad9c:	4798      	blx	r3
 802ad9e:	2000      	movs	r0, #0
 802ada0:	e7e0      	b.n	802ad64 <_raise_r+0x12>
	...

0802ada4 <raise>:
 802ada4:	4b02      	ldr	r3, [pc, #8]	@ (802adb0 <raise+0xc>)
 802ada6:	4601      	mov	r1, r0
 802ada8:	6818      	ldr	r0, [r3, #0]
 802adaa:	f7ff bfd2 	b.w	802ad52 <_raise_r>
 802adae:	bf00      	nop
 802adb0:	240000d8 	.word	0x240000d8

0802adb4 <_close_r>:
 802adb4:	b538      	push	{r3, r4, r5, lr}
 802adb6:	4d06      	ldr	r5, [pc, #24]	@ (802add0 <_close_r+0x1c>)
 802adb8:	2300      	movs	r3, #0
 802adba:	4604      	mov	r4, r0
 802adbc:	4608      	mov	r0, r1
 802adbe:	602b      	str	r3, [r5, #0]
 802adc0:	f7d6 fc82 	bl	80016c8 <_close>
 802adc4:	1c43      	adds	r3, r0, #1
 802adc6:	d102      	bne.n	802adce <_close_r+0x1a>
 802adc8:	682b      	ldr	r3, [r5, #0]
 802adca:	b103      	cbz	r3, 802adce <_close_r+0x1a>
 802adcc:	6023      	str	r3, [r4, #0]
 802adce:	bd38      	pop	{r3, r4, r5, pc}
 802add0:	2400bac0 	.word	0x2400bac0

0802add4 <_reclaim_reent>:
 802add4:	4b29      	ldr	r3, [pc, #164]	@ (802ae7c <_reclaim_reent+0xa8>)
 802add6:	681b      	ldr	r3, [r3, #0]
 802add8:	4283      	cmp	r3, r0
 802adda:	b570      	push	{r4, r5, r6, lr}
 802addc:	4604      	mov	r4, r0
 802adde:	d04b      	beq.n	802ae78 <_reclaim_reent+0xa4>
 802ade0:	69c3      	ldr	r3, [r0, #28]
 802ade2:	b1ab      	cbz	r3, 802ae10 <_reclaim_reent+0x3c>
 802ade4:	68db      	ldr	r3, [r3, #12]
 802ade6:	b16b      	cbz	r3, 802ae04 <_reclaim_reent+0x30>
 802ade8:	2500      	movs	r5, #0
 802adea:	69e3      	ldr	r3, [r4, #28]
 802adec:	68db      	ldr	r3, [r3, #12]
 802adee:	5959      	ldr	r1, [r3, r5]
 802adf0:	2900      	cmp	r1, #0
 802adf2:	d13b      	bne.n	802ae6c <_reclaim_reent+0x98>
 802adf4:	3504      	adds	r5, #4
 802adf6:	2d80      	cmp	r5, #128	@ 0x80
 802adf8:	d1f7      	bne.n	802adea <_reclaim_reent+0x16>
 802adfa:	69e3      	ldr	r3, [r4, #28]
 802adfc:	4620      	mov	r0, r4
 802adfe:	68d9      	ldr	r1, [r3, #12]
 802ae00:	f000 f930 	bl	802b064 <_free_r>
 802ae04:	69e3      	ldr	r3, [r4, #28]
 802ae06:	6819      	ldr	r1, [r3, #0]
 802ae08:	b111      	cbz	r1, 802ae10 <_reclaim_reent+0x3c>
 802ae0a:	4620      	mov	r0, r4
 802ae0c:	f000 f92a 	bl	802b064 <_free_r>
 802ae10:	6961      	ldr	r1, [r4, #20]
 802ae12:	b111      	cbz	r1, 802ae1a <_reclaim_reent+0x46>
 802ae14:	4620      	mov	r0, r4
 802ae16:	f000 f925 	bl	802b064 <_free_r>
 802ae1a:	69e1      	ldr	r1, [r4, #28]
 802ae1c:	b111      	cbz	r1, 802ae24 <_reclaim_reent+0x50>
 802ae1e:	4620      	mov	r0, r4
 802ae20:	f000 f920 	bl	802b064 <_free_r>
 802ae24:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 802ae26:	b111      	cbz	r1, 802ae2e <_reclaim_reent+0x5a>
 802ae28:	4620      	mov	r0, r4
 802ae2a:	f000 f91b 	bl	802b064 <_free_r>
 802ae2e:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 802ae30:	b111      	cbz	r1, 802ae38 <_reclaim_reent+0x64>
 802ae32:	4620      	mov	r0, r4
 802ae34:	f000 f916 	bl	802b064 <_free_r>
 802ae38:	6ba1      	ldr	r1, [r4, #56]	@ 0x38
 802ae3a:	b111      	cbz	r1, 802ae42 <_reclaim_reent+0x6e>
 802ae3c:	4620      	mov	r0, r4
 802ae3e:	f000 f911 	bl	802b064 <_free_r>
 802ae42:	6ca1      	ldr	r1, [r4, #72]	@ 0x48
 802ae44:	b111      	cbz	r1, 802ae4c <_reclaim_reent+0x78>
 802ae46:	4620      	mov	r0, r4
 802ae48:	f000 f90c 	bl	802b064 <_free_r>
 802ae4c:	6c61      	ldr	r1, [r4, #68]	@ 0x44
 802ae4e:	b111      	cbz	r1, 802ae56 <_reclaim_reent+0x82>
 802ae50:	4620      	mov	r0, r4
 802ae52:	f000 f907 	bl	802b064 <_free_r>
 802ae56:	6ae1      	ldr	r1, [r4, #44]	@ 0x2c
 802ae58:	b111      	cbz	r1, 802ae60 <_reclaim_reent+0x8c>
 802ae5a:	4620      	mov	r0, r4
 802ae5c:	f000 f902 	bl	802b064 <_free_r>
 802ae60:	6a23      	ldr	r3, [r4, #32]
 802ae62:	b14b      	cbz	r3, 802ae78 <_reclaim_reent+0xa4>
 802ae64:	4620      	mov	r0, r4
 802ae66:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 802ae6a:	4718      	bx	r3
 802ae6c:	680e      	ldr	r6, [r1, #0]
 802ae6e:	4620      	mov	r0, r4
 802ae70:	f000 f8f8 	bl	802b064 <_free_r>
 802ae74:	4631      	mov	r1, r6
 802ae76:	e7bb      	b.n	802adf0 <_reclaim_reent+0x1c>
 802ae78:	bd70      	pop	{r4, r5, r6, pc}
 802ae7a:	bf00      	nop
 802ae7c:	240000d8 	.word	0x240000d8

0802ae80 <_lseek_r>:
 802ae80:	b538      	push	{r3, r4, r5, lr}
 802ae82:	4d07      	ldr	r5, [pc, #28]	@ (802aea0 <_lseek_r+0x20>)
 802ae84:	4604      	mov	r4, r0
 802ae86:	4608      	mov	r0, r1
 802ae88:	4611      	mov	r1, r2
 802ae8a:	2200      	movs	r2, #0
 802ae8c:	602a      	str	r2, [r5, #0]
 802ae8e:	461a      	mov	r2, r3
 802ae90:	f7d6 fc41 	bl	8001716 <_lseek>
 802ae94:	1c43      	adds	r3, r0, #1
 802ae96:	d102      	bne.n	802ae9e <_lseek_r+0x1e>
 802ae98:	682b      	ldr	r3, [r5, #0]
 802ae9a:	b103      	cbz	r3, 802ae9e <_lseek_r+0x1e>
 802ae9c:	6023      	str	r3, [r4, #0]
 802ae9e:	bd38      	pop	{r3, r4, r5, pc}
 802aea0:	2400bac0 	.word	0x2400bac0

0802aea4 <_read_r>:
 802aea4:	b538      	push	{r3, r4, r5, lr}
 802aea6:	4d07      	ldr	r5, [pc, #28]	@ (802aec4 <_read_r+0x20>)
 802aea8:	4604      	mov	r4, r0
 802aeaa:	4608      	mov	r0, r1
 802aeac:	4611      	mov	r1, r2
 802aeae:	2200      	movs	r2, #0
 802aeb0:	602a      	str	r2, [r5, #0]
 802aeb2:	461a      	mov	r2, r3
 802aeb4:	f7d6 fbeb 	bl	800168e <_read>
 802aeb8:	1c43      	adds	r3, r0, #1
 802aeba:	d102      	bne.n	802aec2 <_read_r+0x1e>
 802aebc:	682b      	ldr	r3, [r5, #0]
 802aebe:	b103      	cbz	r3, 802aec2 <_read_r+0x1e>
 802aec0:	6023      	str	r3, [r4, #0]
 802aec2:	bd38      	pop	{r3, r4, r5, pc}
 802aec4:	2400bac0 	.word	0x2400bac0

0802aec8 <_kill_r>:
 802aec8:	b538      	push	{r3, r4, r5, lr}
 802aeca:	4d07      	ldr	r5, [pc, #28]	@ (802aee8 <_kill_r+0x20>)
 802aecc:	2300      	movs	r3, #0
 802aece:	4604      	mov	r4, r0
 802aed0:	4608      	mov	r0, r1
 802aed2:	4611      	mov	r1, r2
 802aed4:	602b      	str	r3, [r5, #0]
 802aed6:	f7d6 fbbf 	bl	8001658 <_kill>
 802aeda:	1c43      	adds	r3, r0, #1
 802aedc:	d102      	bne.n	802aee4 <_kill_r+0x1c>
 802aede:	682b      	ldr	r3, [r5, #0]
 802aee0:	b103      	cbz	r3, 802aee4 <_kill_r+0x1c>
 802aee2:	6023      	str	r3, [r4, #0]
 802aee4:	bd38      	pop	{r3, r4, r5, pc}
 802aee6:	bf00      	nop
 802aee8:	2400bac0 	.word	0x2400bac0

0802aeec <_getpid_r>:
 802aeec:	f7d6 bbac 	b.w	8001648 <_getpid>

0802aef0 <_sbrk_r>:
 802aef0:	b538      	push	{r3, r4, r5, lr}
 802aef2:	4d06      	ldr	r5, [pc, #24]	@ (802af0c <_sbrk_r+0x1c>)
 802aef4:	2300      	movs	r3, #0
 802aef6:	4604      	mov	r4, r0
 802aef8:	4608      	mov	r0, r1
 802aefa:	602b      	str	r3, [r5, #0]
 802aefc:	f7d6 fc18 	bl	8001730 <_sbrk>
 802af00:	1c43      	adds	r3, r0, #1
 802af02:	d102      	bne.n	802af0a <_sbrk_r+0x1a>
 802af04:	682b      	ldr	r3, [r5, #0]
 802af06:	b103      	cbz	r3, 802af0a <_sbrk_r+0x1a>
 802af08:	6023      	str	r3, [r4, #0]
 802af0a:	bd38      	pop	{r3, r4, r5, pc}
 802af0c:	2400bac0 	.word	0x2400bac0

0802af10 <_write_r>:
 802af10:	b538      	push	{r3, r4, r5, lr}
 802af12:	4d07      	ldr	r5, [pc, #28]	@ (802af30 <_write_r+0x20>)
 802af14:	4604      	mov	r4, r0
 802af16:	4608      	mov	r0, r1
 802af18:	4611      	mov	r1, r2
 802af1a:	2200      	movs	r2, #0
 802af1c:	602a      	str	r2, [r5, #0]
 802af1e:	461a      	mov	r2, r3
 802af20:	f7d5 fa9d 	bl	800045e <_write>
 802af24:	1c43      	adds	r3, r0, #1
 802af26:	d102      	bne.n	802af2e <_write_r+0x1e>
 802af28:	682b      	ldr	r3, [r5, #0]
 802af2a:	b103      	cbz	r3, 802af2e <_write_r+0x1e>
 802af2c:	6023      	str	r3, [r4, #0]
 802af2e:	bd38      	pop	{r3, r4, r5, pc}
 802af30:	2400bac0 	.word	0x2400bac0

0802af34 <__errno>:
 802af34:	4b01      	ldr	r3, [pc, #4]	@ (802af3c <__errno+0x8>)
 802af36:	6818      	ldr	r0, [r3, #0]
 802af38:	4770      	bx	lr
 802af3a:	bf00      	nop
 802af3c:	240000d8 	.word	0x240000d8

0802af40 <__libc_init_array>:
 802af40:	b570      	push	{r4, r5, r6, lr}
 802af42:	4d0d      	ldr	r5, [pc, #52]	@ (802af78 <__libc_init_array+0x38>)
 802af44:	4c0d      	ldr	r4, [pc, #52]	@ (802af7c <__libc_init_array+0x3c>)
 802af46:	1b64      	subs	r4, r4, r5
 802af48:	10a4      	asrs	r4, r4, #2
 802af4a:	2600      	movs	r6, #0
 802af4c:	42a6      	cmp	r6, r4
 802af4e:	d109      	bne.n	802af64 <__libc_init_array+0x24>
 802af50:	4d0b      	ldr	r5, [pc, #44]	@ (802af80 <__libc_init_array+0x40>)
 802af52:	4c0c      	ldr	r4, [pc, #48]	@ (802af84 <__libc_init_array+0x44>)
 802af54:	f000 fd64 	bl	802ba20 <_init>
 802af58:	1b64      	subs	r4, r4, r5
 802af5a:	10a4      	asrs	r4, r4, #2
 802af5c:	2600      	movs	r6, #0
 802af5e:	42a6      	cmp	r6, r4
 802af60:	d105      	bne.n	802af6e <__libc_init_array+0x2e>
 802af62:	bd70      	pop	{r4, r5, r6, pc}
 802af64:	f855 3b04 	ldr.w	r3, [r5], #4
 802af68:	4798      	blx	r3
 802af6a:	3601      	adds	r6, #1
 802af6c:	e7ee      	b.n	802af4c <__libc_init_array+0xc>
 802af6e:	f855 3b04 	ldr.w	r3, [r5], #4
 802af72:	4798      	blx	r3
 802af74:	3601      	adds	r6, #1
 802af76:	e7f2      	b.n	802af5e <__libc_init_array+0x1e>
 802af78:	08030384 	.word	0x08030384
 802af7c:	08030384 	.word	0x08030384
 802af80:	08030384 	.word	0x08030384
 802af84:	08030398 	.word	0x08030398

0802af88 <__retarget_lock_init_recursive>:
 802af88:	4770      	bx	lr

0802af8a <__retarget_lock_acquire_recursive>:
 802af8a:	4770      	bx	lr

0802af8c <__retarget_lock_release_recursive>:
 802af8c:	4770      	bx	lr

0802af8e <memcpy>:
 802af8e:	440a      	add	r2, r1
 802af90:	4291      	cmp	r1, r2
 802af92:	f100 33ff 	add.w	r3, r0, #4294967295
 802af96:	d100      	bne.n	802af9a <memcpy+0xc>
 802af98:	4770      	bx	lr
 802af9a:	b510      	push	{r4, lr}
 802af9c:	f811 4b01 	ldrb.w	r4, [r1], #1
 802afa0:	f803 4f01 	strb.w	r4, [r3, #1]!
 802afa4:	4291      	cmp	r1, r2
 802afa6:	d1f9      	bne.n	802af9c <memcpy+0xe>
 802afa8:	bd10      	pop	{r4, pc}
	...

0802afac <__register_exitproc>:
 802afac:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 802afb0:	4d27      	ldr	r5, [pc, #156]	@ (802b050 <__register_exitproc+0xa4>)
 802afb2:	4607      	mov	r7, r0
 802afb4:	6828      	ldr	r0, [r5, #0]
 802afb6:	4691      	mov	r9, r2
 802afb8:	460e      	mov	r6, r1
 802afba:	4698      	mov	r8, r3
 802afbc:	f7ff ffe5 	bl	802af8a <__retarget_lock_acquire_recursive>
 802afc0:	4a24      	ldr	r2, [pc, #144]	@ (802b054 <__register_exitproc+0xa8>)
 802afc2:	6814      	ldr	r4, [r2, #0]
 802afc4:	b93c      	cbnz	r4, 802afd6 <__register_exitproc+0x2a>
 802afc6:	4b24      	ldr	r3, [pc, #144]	@ (802b058 <__register_exitproc+0xac>)
 802afc8:	6013      	str	r3, [r2, #0]
 802afca:	4a24      	ldr	r2, [pc, #144]	@ (802b05c <__register_exitproc+0xb0>)
 802afcc:	b112      	cbz	r2, 802afd4 <__register_exitproc+0x28>
 802afce:	6812      	ldr	r2, [r2, #0]
 802afd0:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
 802afd4:	4c20      	ldr	r4, [pc, #128]	@ (802b058 <__register_exitproc+0xac>)
 802afd6:	6863      	ldr	r3, [r4, #4]
 802afd8:	2b1f      	cmp	r3, #31
 802afda:	dd06      	ble.n	802afea <__register_exitproc+0x3e>
 802afdc:	6828      	ldr	r0, [r5, #0]
 802afde:	f7ff ffd5 	bl	802af8c <__retarget_lock_release_recursive>
 802afe2:	f04f 30ff 	mov.w	r0, #4294967295
 802afe6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 802afea:	b32f      	cbz	r7, 802b038 <__register_exitproc+0x8c>
 802afec:	f8d4 0088 	ldr.w	r0, [r4, #136]	@ 0x88
 802aff0:	b968      	cbnz	r0, 802b00e <__register_exitproc+0x62>
 802aff2:	4b1b      	ldr	r3, [pc, #108]	@ (802b060 <__register_exitproc+0xb4>)
 802aff4:	2b00      	cmp	r3, #0
 802aff6:	d0f1      	beq.n	802afdc <__register_exitproc+0x30>
 802aff8:	f44f 7084 	mov.w	r0, #264	@ 0x108
 802affc:	f7ff fcbe 	bl	802a97c <malloc>
 802b000:	2800      	cmp	r0, #0
 802b002:	d0eb      	beq.n	802afdc <__register_exitproc+0x30>
 802b004:	2300      	movs	r3, #0
 802b006:	e9c0 3340 	strd	r3, r3, [r0, #256]	@ 0x100
 802b00a:	f8c4 0088 	str.w	r0, [r4, #136]	@ 0x88
 802b00e:	6863      	ldr	r3, [r4, #4]
 802b010:	f840 9023 	str.w	r9, [r0, r3, lsl #2]
 802b014:	2201      	movs	r2, #1
 802b016:	409a      	lsls	r2, r3
 802b018:	eb00 0183 	add.w	r1, r0, r3, lsl #2
 802b01c:	f8d0 3100 	ldr.w	r3, [r0, #256]	@ 0x100
 802b020:	4313      	orrs	r3, r2
 802b022:	f8c0 3100 	str.w	r3, [r0, #256]	@ 0x100
 802b026:	2f02      	cmp	r7, #2
 802b028:	f8c1 8080 	str.w	r8, [r1, #128]	@ 0x80
 802b02c:	bf02      	ittt	eq
 802b02e:	f8d0 3104 	ldreq.w	r3, [r0, #260]	@ 0x104
 802b032:	4313      	orreq	r3, r2
 802b034:	f8c0 3104 	streq.w	r3, [r0, #260]	@ 0x104
 802b038:	6863      	ldr	r3, [r4, #4]
 802b03a:	6828      	ldr	r0, [r5, #0]
 802b03c:	1c5a      	adds	r2, r3, #1
 802b03e:	3302      	adds	r3, #2
 802b040:	6062      	str	r2, [r4, #4]
 802b042:	f844 6023 	str.w	r6, [r4, r3, lsl #2]
 802b046:	f7ff ffa1 	bl	802af8c <__retarget_lock_release_recursive>
 802b04a:	2000      	movs	r0, #0
 802b04c:	e7cb      	b.n	802afe6 <__register_exitproc+0x3a>
 802b04e:	bf00      	nop
 802b050:	24000128 	.word	0x24000128
 802b054:	2400bb54 	.word	0x2400bb54
 802b058:	2400bac8 	.word	0x2400bac8
 802b05c:	0803031c 	.word	0x0803031c
 802b060:	0802a97d 	.word	0x0802a97d

0802b064 <_free_r>:
 802b064:	b538      	push	{r3, r4, r5, lr}
 802b066:	4605      	mov	r5, r0
 802b068:	2900      	cmp	r1, #0
 802b06a:	d041      	beq.n	802b0f0 <_free_r+0x8c>
 802b06c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 802b070:	1f0c      	subs	r4, r1, #4
 802b072:	2b00      	cmp	r3, #0
 802b074:	bfb8      	it	lt
 802b076:	18e4      	addlt	r4, r4, r3
 802b078:	f7ff fd32 	bl	802aae0 <__malloc_lock>
 802b07c:	4a1d      	ldr	r2, [pc, #116]	@ (802b0f4 <_free_r+0x90>)
 802b07e:	6813      	ldr	r3, [r2, #0]
 802b080:	b933      	cbnz	r3, 802b090 <_free_r+0x2c>
 802b082:	6063      	str	r3, [r4, #4]
 802b084:	6014      	str	r4, [r2, #0]
 802b086:	4628      	mov	r0, r5
 802b088:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 802b08c:	f7ff bd2e 	b.w	802aaec <__malloc_unlock>
 802b090:	42a3      	cmp	r3, r4
 802b092:	d908      	bls.n	802b0a6 <_free_r+0x42>
 802b094:	6820      	ldr	r0, [r4, #0]
 802b096:	1821      	adds	r1, r4, r0
 802b098:	428b      	cmp	r3, r1
 802b09a:	bf01      	itttt	eq
 802b09c:	6819      	ldreq	r1, [r3, #0]
 802b09e:	685b      	ldreq	r3, [r3, #4]
 802b0a0:	1809      	addeq	r1, r1, r0
 802b0a2:	6021      	streq	r1, [r4, #0]
 802b0a4:	e7ed      	b.n	802b082 <_free_r+0x1e>
 802b0a6:	461a      	mov	r2, r3
 802b0a8:	685b      	ldr	r3, [r3, #4]
 802b0aa:	b10b      	cbz	r3, 802b0b0 <_free_r+0x4c>
 802b0ac:	42a3      	cmp	r3, r4
 802b0ae:	d9fa      	bls.n	802b0a6 <_free_r+0x42>
 802b0b0:	6811      	ldr	r1, [r2, #0]
 802b0b2:	1850      	adds	r0, r2, r1
 802b0b4:	42a0      	cmp	r0, r4
 802b0b6:	d10b      	bne.n	802b0d0 <_free_r+0x6c>
 802b0b8:	6820      	ldr	r0, [r4, #0]
 802b0ba:	4401      	add	r1, r0
 802b0bc:	1850      	adds	r0, r2, r1
 802b0be:	4283      	cmp	r3, r0
 802b0c0:	6011      	str	r1, [r2, #0]
 802b0c2:	d1e0      	bne.n	802b086 <_free_r+0x22>
 802b0c4:	6818      	ldr	r0, [r3, #0]
 802b0c6:	685b      	ldr	r3, [r3, #4]
 802b0c8:	6053      	str	r3, [r2, #4]
 802b0ca:	4408      	add	r0, r1
 802b0cc:	6010      	str	r0, [r2, #0]
 802b0ce:	e7da      	b.n	802b086 <_free_r+0x22>
 802b0d0:	d902      	bls.n	802b0d8 <_free_r+0x74>
 802b0d2:	230c      	movs	r3, #12
 802b0d4:	602b      	str	r3, [r5, #0]
 802b0d6:	e7d6      	b.n	802b086 <_free_r+0x22>
 802b0d8:	6820      	ldr	r0, [r4, #0]
 802b0da:	1821      	adds	r1, r4, r0
 802b0dc:	428b      	cmp	r3, r1
 802b0de:	bf04      	itt	eq
 802b0e0:	6819      	ldreq	r1, [r3, #0]
 802b0e2:	685b      	ldreq	r3, [r3, #4]
 802b0e4:	6063      	str	r3, [r4, #4]
 802b0e6:	bf04      	itt	eq
 802b0e8:	1809      	addeq	r1, r1, r0
 802b0ea:	6021      	streq	r1, [r4, #0]
 802b0ec:	6054      	str	r4, [r2, #4]
 802b0ee:	e7ca      	b.n	802b086 <_free_r+0x22>
 802b0f0:	bd38      	pop	{r3, r4, r5, pc}
 802b0f2:	bf00      	nop
 802b0f4:	2400b980 	.word	0x2400b980

0802b0f8 <__sfputc_r>:
 802b0f8:	6893      	ldr	r3, [r2, #8]
 802b0fa:	3b01      	subs	r3, #1
 802b0fc:	2b00      	cmp	r3, #0
 802b0fe:	b410      	push	{r4}
 802b100:	6093      	str	r3, [r2, #8]
 802b102:	da08      	bge.n	802b116 <__sfputc_r+0x1e>
 802b104:	6994      	ldr	r4, [r2, #24]
 802b106:	42a3      	cmp	r3, r4
 802b108:	db01      	blt.n	802b10e <__sfputc_r+0x16>
 802b10a:	290a      	cmp	r1, #10
 802b10c:	d103      	bne.n	802b116 <__sfputc_r+0x1e>
 802b10e:	f85d 4b04 	ldr.w	r4, [sp], #4
 802b112:	f000 bb6d 	b.w	802b7f0 <__swbuf_r>
 802b116:	6813      	ldr	r3, [r2, #0]
 802b118:	1c58      	adds	r0, r3, #1
 802b11a:	6010      	str	r0, [r2, #0]
 802b11c:	7019      	strb	r1, [r3, #0]
 802b11e:	4608      	mov	r0, r1
 802b120:	f85d 4b04 	ldr.w	r4, [sp], #4
 802b124:	4770      	bx	lr

0802b126 <__sfputs_r>:
 802b126:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 802b128:	4606      	mov	r6, r0
 802b12a:	460f      	mov	r7, r1
 802b12c:	4614      	mov	r4, r2
 802b12e:	18d5      	adds	r5, r2, r3
 802b130:	42ac      	cmp	r4, r5
 802b132:	d101      	bne.n	802b138 <__sfputs_r+0x12>
 802b134:	2000      	movs	r0, #0
 802b136:	e007      	b.n	802b148 <__sfputs_r+0x22>
 802b138:	f814 1b01 	ldrb.w	r1, [r4], #1
 802b13c:	463a      	mov	r2, r7
 802b13e:	4630      	mov	r0, r6
 802b140:	f7ff ffda 	bl	802b0f8 <__sfputc_r>
 802b144:	1c43      	adds	r3, r0, #1
 802b146:	d1f3      	bne.n	802b130 <__sfputs_r+0xa>
 802b148:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0802b14c <_vfiprintf_r>:
 802b14c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 802b150:	460d      	mov	r5, r1
 802b152:	b09d      	sub	sp, #116	@ 0x74
 802b154:	4614      	mov	r4, r2
 802b156:	4698      	mov	r8, r3
 802b158:	4606      	mov	r6, r0
 802b15a:	b118      	cbz	r0, 802b164 <_vfiprintf_r+0x18>
 802b15c:	6a03      	ldr	r3, [r0, #32]
 802b15e:	b90b      	cbnz	r3, 802b164 <_vfiprintf_r+0x18>
 802b160:	f7ff fd64 	bl	802ac2c <__sinit>
 802b164:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 802b166:	07d9      	lsls	r1, r3, #31
 802b168:	d405      	bmi.n	802b176 <_vfiprintf_r+0x2a>
 802b16a:	89ab      	ldrh	r3, [r5, #12]
 802b16c:	059a      	lsls	r2, r3, #22
 802b16e:	d402      	bmi.n	802b176 <_vfiprintf_r+0x2a>
 802b170:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 802b172:	f7ff ff0a 	bl	802af8a <__retarget_lock_acquire_recursive>
 802b176:	89ab      	ldrh	r3, [r5, #12]
 802b178:	071b      	lsls	r3, r3, #28
 802b17a:	d501      	bpl.n	802b180 <_vfiprintf_r+0x34>
 802b17c:	692b      	ldr	r3, [r5, #16]
 802b17e:	b99b      	cbnz	r3, 802b1a8 <_vfiprintf_r+0x5c>
 802b180:	4629      	mov	r1, r5
 802b182:	4630      	mov	r0, r6
 802b184:	f000 fb72 	bl	802b86c <__swsetup_r>
 802b188:	b170      	cbz	r0, 802b1a8 <_vfiprintf_r+0x5c>
 802b18a:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 802b18c:	07dc      	lsls	r4, r3, #31
 802b18e:	d504      	bpl.n	802b19a <_vfiprintf_r+0x4e>
 802b190:	f04f 30ff 	mov.w	r0, #4294967295
 802b194:	b01d      	add	sp, #116	@ 0x74
 802b196:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 802b19a:	89ab      	ldrh	r3, [r5, #12]
 802b19c:	0598      	lsls	r0, r3, #22
 802b19e:	d4f7      	bmi.n	802b190 <_vfiprintf_r+0x44>
 802b1a0:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 802b1a2:	f7ff fef3 	bl	802af8c <__retarget_lock_release_recursive>
 802b1a6:	e7f3      	b.n	802b190 <_vfiprintf_r+0x44>
 802b1a8:	2300      	movs	r3, #0
 802b1aa:	9309      	str	r3, [sp, #36]	@ 0x24
 802b1ac:	2320      	movs	r3, #32
 802b1ae:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 802b1b2:	f8cd 800c 	str.w	r8, [sp, #12]
 802b1b6:	2330      	movs	r3, #48	@ 0x30
 802b1b8:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 802b368 <_vfiprintf_r+0x21c>
 802b1bc:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 802b1c0:	f04f 0901 	mov.w	r9, #1
 802b1c4:	4623      	mov	r3, r4
 802b1c6:	469a      	mov	sl, r3
 802b1c8:	f813 2b01 	ldrb.w	r2, [r3], #1
 802b1cc:	b10a      	cbz	r2, 802b1d2 <_vfiprintf_r+0x86>
 802b1ce:	2a25      	cmp	r2, #37	@ 0x25
 802b1d0:	d1f9      	bne.n	802b1c6 <_vfiprintf_r+0x7a>
 802b1d2:	ebba 0b04 	subs.w	fp, sl, r4
 802b1d6:	d00b      	beq.n	802b1f0 <_vfiprintf_r+0xa4>
 802b1d8:	465b      	mov	r3, fp
 802b1da:	4622      	mov	r2, r4
 802b1dc:	4629      	mov	r1, r5
 802b1de:	4630      	mov	r0, r6
 802b1e0:	f7ff ffa1 	bl	802b126 <__sfputs_r>
 802b1e4:	3001      	adds	r0, #1
 802b1e6:	f000 80a7 	beq.w	802b338 <_vfiprintf_r+0x1ec>
 802b1ea:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 802b1ec:	445a      	add	r2, fp
 802b1ee:	9209      	str	r2, [sp, #36]	@ 0x24
 802b1f0:	f89a 3000 	ldrb.w	r3, [sl]
 802b1f4:	2b00      	cmp	r3, #0
 802b1f6:	f000 809f 	beq.w	802b338 <_vfiprintf_r+0x1ec>
 802b1fa:	2300      	movs	r3, #0
 802b1fc:	f04f 32ff 	mov.w	r2, #4294967295
 802b200:	e9cd 2305 	strd	r2, r3, [sp, #20]
 802b204:	f10a 0a01 	add.w	sl, sl, #1
 802b208:	9304      	str	r3, [sp, #16]
 802b20a:	9307      	str	r3, [sp, #28]
 802b20c:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 802b210:	931a      	str	r3, [sp, #104]	@ 0x68
 802b212:	4654      	mov	r4, sl
 802b214:	2205      	movs	r2, #5
 802b216:	f814 1b01 	ldrb.w	r1, [r4], #1
 802b21a:	4853      	ldr	r0, [pc, #332]	@ (802b368 <_vfiprintf_r+0x21c>)
 802b21c:	f7d5 f860 	bl	80002e0 <memchr>
 802b220:	9a04      	ldr	r2, [sp, #16]
 802b222:	b9d8      	cbnz	r0, 802b25c <_vfiprintf_r+0x110>
 802b224:	06d1      	lsls	r1, r2, #27
 802b226:	bf44      	itt	mi
 802b228:	2320      	movmi	r3, #32
 802b22a:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 802b22e:	0713      	lsls	r3, r2, #28
 802b230:	bf44      	itt	mi
 802b232:	232b      	movmi	r3, #43	@ 0x2b
 802b234:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 802b238:	f89a 3000 	ldrb.w	r3, [sl]
 802b23c:	2b2a      	cmp	r3, #42	@ 0x2a
 802b23e:	d015      	beq.n	802b26c <_vfiprintf_r+0x120>
 802b240:	9a07      	ldr	r2, [sp, #28]
 802b242:	4654      	mov	r4, sl
 802b244:	2000      	movs	r0, #0
 802b246:	f04f 0c0a 	mov.w	ip, #10
 802b24a:	4621      	mov	r1, r4
 802b24c:	f811 3b01 	ldrb.w	r3, [r1], #1
 802b250:	3b30      	subs	r3, #48	@ 0x30
 802b252:	2b09      	cmp	r3, #9
 802b254:	d94b      	bls.n	802b2ee <_vfiprintf_r+0x1a2>
 802b256:	b1b0      	cbz	r0, 802b286 <_vfiprintf_r+0x13a>
 802b258:	9207      	str	r2, [sp, #28]
 802b25a:	e014      	b.n	802b286 <_vfiprintf_r+0x13a>
 802b25c:	eba0 0308 	sub.w	r3, r0, r8
 802b260:	fa09 f303 	lsl.w	r3, r9, r3
 802b264:	4313      	orrs	r3, r2
 802b266:	9304      	str	r3, [sp, #16]
 802b268:	46a2      	mov	sl, r4
 802b26a:	e7d2      	b.n	802b212 <_vfiprintf_r+0xc6>
 802b26c:	9b03      	ldr	r3, [sp, #12]
 802b26e:	1d19      	adds	r1, r3, #4
 802b270:	681b      	ldr	r3, [r3, #0]
 802b272:	9103      	str	r1, [sp, #12]
 802b274:	2b00      	cmp	r3, #0
 802b276:	bfbb      	ittet	lt
 802b278:	425b      	neglt	r3, r3
 802b27a:	f042 0202 	orrlt.w	r2, r2, #2
 802b27e:	9307      	strge	r3, [sp, #28]
 802b280:	9307      	strlt	r3, [sp, #28]
 802b282:	bfb8      	it	lt
 802b284:	9204      	strlt	r2, [sp, #16]
 802b286:	7823      	ldrb	r3, [r4, #0]
 802b288:	2b2e      	cmp	r3, #46	@ 0x2e
 802b28a:	d10a      	bne.n	802b2a2 <_vfiprintf_r+0x156>
 802b28c:	7863      	ldrb	r3, [r4, #1]
 802b28e:	2b2a      	cmp	r3, #42	@ 0x2a
 802b290:	d132      	bne.n	802b2f8 <_vfiprintf_r+0x1ac>
 802b292:	9b03      	ldr	r3, [sp, #12]
 802b294:	1d1a      	adds	r2, r3, #4
 802b296:	681b      	ldr	r3, [r3, #0]
 802b298:	9203      	str	r2, [sp, #12]
 802b29a:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 802b29e:	3402      	adds	r4, #2
 802b2a0:	9305      	str	r3, [sp, #20]
 802b2a2:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 802b378 <_vfiprintf_r+0x22c>
 802b2a6:	7821      	ldrb	r1, [r4, #0]
 802b2a8:	2203      	movs	r2, #3
 802b2aa:	4650      	mov	r0, sl
 802b2ac:	f7d5 f818 	bl	80002e0 <memchr>
 802b2b0:	b138      	cbz	r0, 802b2c2 <_vfiprintf_r+0x176>
 802b2b2:	9b04      	ldr	r3, [sp, #16]
 802b2b4:	eba0 000a 	sub.w	r0, r0, sl
 802b2b8:	2240      	movs	r2, #64	@ 0x40
 802b2ba:	4082      	lsls	r2, r0
 802b2bc:	4313      	orrs	r3, r2
 802b2be:	3401      	adds	r4, #1
 802b2c0:	9304      	str	r3, [sp, #16]
 802b2c2:	f814 1b01 	ldrb.w	r1, [r4], #1
 802b2c6:	4829      	ldr	r0, [pc, #164]	@ (802b36c <_vfiprintf_r+0x220>)
 802b2c8:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 802b2cc:	2206      	movs	r2, #6
 802b2ce:	f7d5 f807 	bl	80002e0 <memchr>
 802b2d2:	2800      	cmp	r0, #0
 802b2d4:	d03f      	beq.n	802b356 <_vfiprintf_r+0x20a>
 802b2d6:	4b26      	ldr	r3, [pc, #152]	@ (802b370 <_vfiprintf_r+0x224>)
 802b2d8:	bb1b      	cbnz	r3, 802b322 <_vfiprintf_r+0x1d6>
 802b2da:	9b03      	ldr	r3, [sp, #12]
 802b2dc:	3307      	adds	r3, #7
 802b2de:	f023 0307 	bic.w	r3, r3, #7
 802b2e2:	3308      	adds	r3, #8
 802b2e4:	9303      	str	r3, [sp, #12]
 802b2e6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 802b2e8:	443b      	add	r3, r7
 802b2ea:	9309      	str	r3, [sp, #36]	@ 0x24
 802b2ec:	e76a      	b.n	802b1c4 <_vfiprintf_r+0x78>
 802b2ee:	fb0c 3202 	mla	r2, ip, r2, r3
 802b2f2:	460c      	mov	r4, r1
 802b2f4:	2001      	movs	r0, #1
 802b2f6:	e7a8      	b.n	802b24a <_vfiprintf_r+0xfe>
 802b2f8:	2300      	movs	r3, #0
 802b2fa:	3401      	adds	r4, #1
 802b2fc:	9305      	str	r3, [sp, #20]
 802b2fe:	4619      	mov	r1, r3
 802b300:	f04f 0c0a 	mov.w	ip, #10
 802b304:	4620      	mov	r0, r4
 802b306:	f810 2b01 	ldrb.w	r2, [r0], #1
 802b30a:	3a30      	subs	r2, #48	@ 0x30
 802b30c:	2a09      	cmp	r2, #9
 802b30e:	d903      	bls.n	802b318 <_vfiprintf_r+0x1cc>
 802b310:	2b00      	cmp	r3, #0
 802b312:	d0c6      	beq.n	802b2a2 <_vfiprintf_r+0x156>
 802b314:	9105      	str	r1, [sp, #20]
 802b316:	e7c4      	b.n	802b2a2 <_vfiprintf_r+0x156>
 802b318:	fb0c 2101 	mla	r1, ip, r1, r2
 802b31c:	4604      	mov	r4, r0
 802b31e:	2301      	movs	r3, #1
 802b320:	e7f0      	b.n	802b304 <_vfiprintf_r+0x1b8>
 802b322:	ab03      	add	r3, sp, #12
 802b324:	9300      	str	r3, [sp, #0]
 802b326:	462a      	mov	r2, r5
 802b328:	4b12      	ldr	r3, [pc, #72]	@ (802b374 <_vfiprintf_r+0x228>)
 802b32a:	a904      	add	r1, sp, #16
 802b32c:	4630      	mov	r0, r6
 802b32e:	f3af 8000 	nop.w
 802b332:	4607      	mov	r7, r0
 802b334:	1c78      	adds	r0, r7, #1
 802b336:	d1d6      	bne.n	802b2e6 <_vfiprintf_r+0x19a>
 802b338:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 802b33a:	07d9      	lsls	r1, r3, #31
 802b33c:	d405      	bmi.n	802b34a <_vfiprintf_r+0x1fe>
 802b33e:	89ab      	ldrh	r3, [r5, #12]
 802b340:	059a      	lsls	r2, r3, #22
 802b342:	d402      	bmi.n	802b34a <_vfiprintf_r+0x1fe>
 802b344:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 802b346:	f7ff fe21 	bl	802af8c <__retarget_lock_release_recursive>
 802b34a:	89ab      	ldrh	r3, [r5, #12]
 802b34c:	065b      	lsls	r3, r3, #25
 802b34e:	f53f af1f 	bmi.w	802b190 <_vfiprintf_r+0x44>
 802b352:	9809      	ldr	r0, [sp, #36]	@ 0x24
 802b354:	e71e      	b.n	802b194 <_vfiprintf_r+0x48>
 802b356:	ab03      	add	r3, sp, #12
 802b358:	9300      	str	r3, [sp, #0]
 802b35a:	462a      	mov	r2, r5
 802b35c:	4b05      	ldr	r3, [pc, #20]	@ (802b374 <_vfiprintf_r+0x228>)
 802b35e:	a904      	add	r1, sp, #16
 802b360:	4630      	mov	r0, r6
 802b362:	f000 f879 	bl	802b458 <_printf_i>
 802b366:	e7e4      	b.n	802b332 <_vfiprintf_r+0x1e6>
 802b368:	08030320 	.word	0x08030320
 802b36c:	0803032a 	.word	0x0803032a
 802b370:	00000000 	.word	0x00000000
 802b374:	0802b127 	.word	0x0802b127
 802b378:	08030326 	.word	0x08030326

0802b37c <_printf_common>:
 802b37c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 802b380:	4616      	mov	r6, r2
 802b382:	4698      	mov	r8, r3
 802b384:	688a      	ldr	r2, [r1, #8]
 802b386:	690b      	ldr	r3, [r1, #16]
 802b388:	f8dd 9020 	ldr.w	r9, [sp, #32]
 802b38c:	4293      	cmp	r3, r2
 802b38e:	bfb8      	it	lt
 802b390:	4613      	movlt	r3, r2
 802b392:	6033      	str	r3, [r6, #0]
 802b394:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 802b398:	4607      	mov	r7, r0
 802b39a:	460c      	mov	r4, r1
 802b39c:	b10a      	cbz	r2, 802b3a2 <_printf_common+0x26>
 802b39e:	3301      	adds	r3, #1
 802b3a0:	6033      	str	r3, [r6, #0]
 802b3a2:	6823      	ldr	r3, [r4, #0]
 802b3a4:	0699      	lsls	r1, r3, #26
 802b3a6:	bf42      	ittt	mi
 802b3a8:	6833      	ldrmi	r3, [r6, #0]
 802b3aa:	3302      	addmi	r3, #2
 802b3ac:	6033      	strmi	r3, [r6, #0]
 802b3ae:	6825      	ldr	r5, [r4, #0]
 802b3b0:	f015 0506 	ands.w	r5, r5, #6
 802b3b4:	d106      	bne.n	802b3c4 <_printf_common+0x48>
 802b3b6:	f104 0a19 	add.w	sl, r4, #25
 802b3ba:	68e3      	ldr	r3, [r4, #12]
 802b3bc:	6832      	ldr	r2, [r6, #0]
 802b3be:	1a9b      	subs	r3, r3, r2
 802b3c0:	42ab      	cmp	r3, r5
 802b3c2:	dc26      	bgt.n	802b412 <_printf_common+0x96>
 802b3c4:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 802b3c8:	6822      	ldr	r2, [r4, #0]
 802b3ca:	3b00      	subs	r3, #0
 802b3cc:	bf18      	it	ne
 802b3ce:	2301      	movne	r3, #1
 802b3d0:	0692      	lsls	r2, r2, #26
 802b3d2:	d42b      	bmi.n	802b42c <_printf_common+0xb0>
 802b3d4:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 802b3d8:	4641      	mov	r1, r8
 802b3da:	4638      	mov	r0, r7
 802b3dc:	47c8      	blx	r9
 802b3de:	3001      	adds	r0, #1
 802b3e0:	d01e      	beq.n	802b420 <_printf_common+0xa4>
 802b3e2:	6823      	ldr	r3, [r4, #0]
 802b3e4:	6922      	ldr	r2, [r4, #16]
 802b3e6:	f003 0306 	and.w	r3, r3, #6
 802b3ea:	2b04      	cmp	r3, #4
 802b3ec:	bf02      	ittt	eq
 802b3ee:	68e5      	ldreq	r5, [r4, #12]
 802b3f0:	6833      	ldreq	r3, [r6, #0]
 802b3f2:	1aed      	subeq	r5, r5, r3
 802b3f4:	68a3      	ldr	r3, [r4, #8]
 802b3f6:	bf0c      	ite	eq
 802b3f8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 802b3fc:	2500      	movne	r5, #0
 802b3fe:	4293      	cmp	r3, r2
 802b400:	bfc4      	itt	gt
 802b402:	1a9b      	subgt	r3, r3, r2
 802b404:	18ed      	addgt	r5, r5, r3
 802b406:	2600      	movs	r6, #0
 802b408:	341a      	adds	r4, #26
 802b40a:	42b5      	cmp	r5, r6
 802b40c:	d11a      	bne.n	802b444 <_printf_common+0xc8>
 802b40e:	2000      	movs	r0, #0
 802b410:	e008      	b.n	802b424 <_printf_common+0xa8>
 802b412:	2301      	movs	r3, #1
 802b414:	4652      	mov	r2, sl
 802b416:	4641      	mov	r1, r8
 802b418:	4638      	mov	r0, r7
 802b41a:	47c8      	blx	r9
 802b41c:	3001      	adds	r0, #1
 802b41e:	d103      	bne.n	802b428 <_printf_common+0xac>
 802b420:	f04f 30ff 	mov.w	r0, #4294967295
 802b424:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 802b428:	3501      	adds	r5, #1
 802b42a:	e7c6      	b.n	802b3ba <_printf_common+0x3e>
 802b42c:	18e1      	adds	r1, r4, r3
 802b42e:	1c5a      	adds	r2, r3, #1
 802b430:	2030      	movs	r0, #48	@ 0x30
 802b432:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 802b436:	4422      	add	r2, r4
 802b438:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 802b43c:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 802b440:	3302      	adds	r3, #2
 802b442:	e7c7      	b.n	802b3d4 <_printf_common+0x58>
 802b444:	2301      	movs	r3, #1
 802b446:	4622      	mov	r2, r4
 802b448:	4641      	mov	r1, r8
 802b44a:	4638      	mov	r0, r7
 802b44c:	47c8      	blx	r9
 802b44e:	3001      	adds	r0, #1
 802b450:	d0e6      	beq.n	802b420 <_printf_common+0xa4>
 802b452:	3601      	adds	r6, #1
 802b454:	e7d9      	b.n	802b40a <_printf_common+0x8e>
	...

0802b458 <_printf_i>:
 802b458:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 802b45c:	7e0f      	ldrb	r7, [r1, #24]
 802b45e:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 802b460:	2f78      	cmp	r7, #120	@ 0x78
 802b462:	4691      	mov	r9, r2
 802b464:	4680      	mov	r8, r0
 802b466:	460c      	mov	r4, r1
 802b468:	469a      	mov	sl, r3
 802b46a:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 802b46e:	d807      	bhi.n	802b480 <_printf_i+0x28>
 802b470:	2f62      	cmp	r7, #98	@ 0x62
 802b472:	d80a      	bhi.n	802b48a <_printf_i+0x32>
 802b474:	2f00      	cmp	r7, #0
 802b476:	f000 80d2 	beq.w	802b61e <_printf_i+0x1c6>
 802b47a:	2f58      	cmp	r7, #88	@ 0x58
 802b47c:	f000 80b9 	beq.w	802b5f2 <_printf_i+0x19a>
 802b480:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 802b484:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 802b488:	e03a      	b.n	802b500 <_printf_i+0xa8>
 802b48a:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 802b48e:	2b15      	cmp	r3, #21
 802b490:	d8f6      	bhi.n	802b480 <_printf_i+0x28>
 802b492:	a101      	add	r1, pc, #4	@ (adr r1, 802b498 <_printf_i+0x40>)
 802b494:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 802b498:	0802b4f1 	.word	0x0802b4f1
 802b49c:	0802b505 	.word	0x0802b505
 802b4a0:	0802b481 	.word	0x0802b481
 802b4a4:	0802b481 	.word	0x0802b481
 802b4a8:	0802b481 	.word	0x0802b481
 802b4ac:	0802b481 	.word	0x0802b481
 802b4b0:	0802b505 	.word	0x0802b505
 802b4b4:	0802b481 	.word	0x0802b481
 802b4b8:	0802b481 	.word	0x0802b481
 802b4bc:	0802b481 	.word	0x0802b481
 802b4c0:	0802b481 	.word	0x0802b481
 802b4c4:	0802b605 	.word	0x0802b605
 802b4c8:	0802b52f 	.word	0x0802b52f
 802b4cc:	0802b5bf 	.word	0x0802b5bf
 802b4d0:	0802b481 	.word	0x0802b481
 802b4d4:	0802b481 	.word	0x0802b481
 802b4d8:	0802b627 	.word	0x0802b627
 802b4dc:	0802b481 	.word	0x0802b481
 802b4e0:	0802b52f 	.word	0x0802b52f
 802b4e4:	0802b481 	.word	0x0802b481
 802b4e8:	0802b481 	.word	0x0802b481
 802b4ec:	0802b5c7 	.word	0x0802b5c7
 802b4f0:	6833      	ldr	r3, [r6, #0]
 802b4f2:	1d1a      	adds	r2, r3, #4
 802b4f4:	681b      	ldr	r3, [r3, #0]
 802b4f6:	6032      	str	r2, [r6, #0]
 802b4f8:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 802b4fc:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 802b500:	2301      	movs	r3, #1
 802b502:	e09d      	b.n	802b640 <_printf_i+0x1e8>
 802b504:	6833      	ldr	r3, [r6, #0]
 802b506:	6820      	ldr	r0, [r4, #0]
 802b508:	1d19      	adds	r1, r3, #4
 802b50a:	6031      	str	r1, [r6, #0]
 802b50c:	0606      	lsls	r6, r0, #24
 802b50e:	d501      	bpl.n	802b514 <_printf_i+0xbc>
 802b510:	681d      	ldr	r5, [r3, #0]
 802b512:	e003      	b.n	802b51c <_printf_i+0xc4>
 802b514:	0645      	lsls	r5, r0, #25
 802b516:	d5fb      	bpl.n	802b510 <_printf_i+0xb8>
 802b518:	f9b3 5000 	ldrsh.w	r5, [r3]
 802b51c:	2d00      	cmp	r5, #0
 802b51e:	da03      	bge.n	802b528 <_printf_i+0xd0>
 802b520:	232d      	movs	r3, #45	@ 0x2d
 802b522:	426d      	negs	r5, r5
 802b524:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 802b528:	4859      	ldr	r0, [pc, #356]	@ (802b690 <_printf_i+0x238>)
 802b52a:	230a      	movs	r3, #10
 802b52c:	e011      	b.n	802b552 <_printf_i+0xfa>
 802b52e:	6821      	ldr	r1, [r4, #0]
 802b530:	6833      	ldr	r3, [r6, #0]
 802b532:	0608      	lsls	r0, r1, #24
 802b534:	f853 5b04 	ldr.w	r5, [r3], #4
 802b538:	d402      	bmi.n	802b540 <_printf_i+0xe8>
 802b53a:	0649      	lsls	r1, r1, #25
 802b53c:	bf48      	it	mi
 802b53e:	b2ad      	uxthmi	r5, r5
 802b540:	2f6f      	cmp	r7, #111	@ 0x6f
 802b542:	4853      	ldr	r0, [pc, #332]	@ (802b690 <_printf_i+0x238>)
 802b544:	6033      	str	r3, [r6, #0]
 802b546:	bf14      	ite	ne
 802b548:	230a      	movne	r3, #10
 802b54a:	2308      	moveq	r3, #8
 802b54c:	2100      	movs	r1, #0
 802b54e:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 802b552:	6866      	ldr	r6, [r4, #4]
 802b554:	60a6      	str	r6, [r4, #8]
 802b556:	2e00      	cmp	r6, #0
 802b558:	bfa2      	ittt	ge
 802b55a:	6821      	ldrge	r1, [r4, #0]
 802b55c:	f021 0104 	bicge.w	r1, r1, #4
 802b560:	6021      	strge	r1, [r4, #0]
 802b562:	b90d      	cbnz	r5, 802b568 <_printf_i+0x110>
 802b564:	2e00      	cmp	r6, #0
 802b566:	d04b      	beq.n	802b600 <_printf_i+0x1a8>
 802b568:	4616      	mov	r6, r2
 802b56a:	fbb5 f1f3 	udiv	r1, r5, r3
 802b56e:	fb03 5711 	mls	r7, r3, r1, r5
 802b572:	5dc7      	ldrb	r7, [r0, r7]
 802b574:	f806 7d01 	strb.w	r7, [r6, #-1]!
 802b578:	462f      	mov	r7, r5
 802b57a:	42bb      	cmp	r3, r7
 802b57c:	460d      	mov	r5, r1
 802b57e:	d9f4      	bls.n	802b56a <_printf_i+0x112>
 802b580:	2b08      	cmp	r3, #8
 802b582:	d10b      	bne.n	802b59c <_printf_i+0x144>
 802b584:	6823      	ldr	r3, [r4, #0]
 802b586:	07df      	lsls	r7, r3, #31
 802b588:	d508      	bpl.n	802b59c <_printf_i+0x144>
 802b58a:	6923      	ldr	r3, [r4, #16]
 802b58c:	6861      	ldr	r1, [r4, #4]
 802b58e:	4299      	cmp	r1, r3
 802b590:	bfde      	ittt	le
 802b592:	2330      	movle	r3, #48	@ 0x30
 802b594:	f806 3c01 	strble.w	r3, [r6, #-1]
 802b598:	f106 36ff 	addle.w	r6, r6, #4294967295
 802b59c:	1b92      	subs	r2, r2, r6
 802b59e:	6122      	str	r2, [r4, #16]
 802b5a0:	f8cd a000 	str.w	sl, [sp]
 802b5a4:	464b      	mov	r3, r9
 802b5a6:	aa03      	add	r2, sp, #12
 802b5a8:	4621      	mov	r1, r4
 802b5aa:	4640      	mov	r0, r8
 802b5ac:	f7ff fee6 	bl	802b37c <_printf_common>
 802b5b0:	3001      	adds	r0, #1
 802b5b2:	d14a      	bne.n	802b64a <_printf_i+0x1f2>
 802b5b4:	f04f 30ff 	mov.w	r0, #4294967295
 802b5b8:	b004      	add	sp, #16
 802b5ba:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 802b5be:	6823      	ldr	r3, [r4, #0]
 802b5c0:	f043 0320 	orr.w	r3, r3, #32
 802b5c4:	6023      	str	r3, [r4, #0]
 802b5c6:	4833      	ldr	r0, [pc, #204]	@ (802b694 <_printf_i+0x23c>)
 802b5c8:	2778      	movs	r7, #120	@ 0x78
 802b5ca:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 802b5ce:	6823      	ldr	r3, [r4, #0]
 802b5d0:	6831      	ldr	r1, [r6, #0]
 802b5d2:	061f      	lsls	r7, r3, #24
 802b5d4:	f851 5b04 	ldr.w	r5, [r1], #4
 802b5d8:	d402      	bmi.n	802b5e0 <_printf_i+0x188>
 802b5da:	065f      	lsls	r7, r3, #25
 802b5dc:	bf48      	it	mi
 802b5de:	b2ad      	uxthmi	r5, r5
 802b5e0:	6031      	str	r1, [r6, #0]
 802b5e2:	07d9      	lsls	r1, r3, #31
 802b5e4:	bf44      	itt	mi
 802b5e6:	f043 0320 	orrmi.w	r3, r3, #32
 802b5ea:	6023      	strmi	r3, [r4, #0]
 802b5ec:	b11d      	cbz	r5, 802b5f6 <_printf_i+0x19e>
 802b5ee:	2310      	movs	r3, #16
 802b5f0:	e7ac      	b.n	802b54c <_printf_i+0xf4>
 802b5f2:	4827      	ldr	r0, [pc, #156]	@ (802b690 <_printf_i+0x238>)
 802b5f4:	e7e9      	b.n	802b5ca <_printf_i+0x172>
 802b5f6:	6823      	ldr	r3, [r4, #0]
 802b5f8:	f023 0320 	bic.w	r3, r3, #32
 802b5fc:	6023      	str	r3, [r4, #0]
 802b5fe:	e7f6      	b.n	802b5ee <_printf_i+0x196>
 802b600:	4616      	mov	r6, r2
 802b602:	e7bd      	b.n	802b580 <_printf_i+0x128>
 802b604:	6833      	ldr	r3, [r6, #0]
 802b606:	6825      	ldr	r5, [r4, #0]
 802b608:	6961      	ldr	r1, [r4, #20]
 802b60a:	1d18      	adds	r0, r3, #4
 802b60c:	6030      	str	r0, [r6, #0]
 802b60e:	062e      	lsls	r6, r5, #24
 802b610:	681b      	ldr	r3, [r3, #0]
 802b612:	d501      	bpl.n	802b618 <_printf_i+0x1c0>
 802b614:	6019      	str	r1, [r3, #0]
 802b616:	e002      	b.n	802b61e <_printf_i+0x1c6>
 802b618:	0668      	lsls	r0, r5, #25
 802b61a:	d5fb      	bpl.n	802b614 <_printf_i+0x1bc>
 802b61c:	8019      	strh	r1, [r3, #0]
 802b61e:	2300      	movs	r3, #0
 802b620:	6123      	str	r3, [r4, #16]
 802b622:	4616      	mov	r6, r2
 802b624:	e7bc      	b.n	802b5a0 <_printf_i+0x148>
 802b626:	6833      	ldr	r3, [r6, #0]
 802b628:	1d1a      	adds	r2, r3, #4
 802b62a:	6032      	str	r2, [r6, #0]
 802b62c:	681e      	ldr	r6, [r3, #0]
 802b62e:	6862      	ldr	r2, [r4, #4]
 802b630:	2100      	movs	r1, #0
 802b632:	4630      	mov	r0, r6
 802b634:	f7d4 fe54 	bl	80002e0 <memchr>
 802b638:	b108      	cbz	r0, 802b63e <_printf_i+0x1e6>
 802b63a:	1b80      	subs	r0, r0, r6
 802b63c:	6060      	str	r0, [r4, #4]
 802b63e:	6863      	ldr	r3, [r4, #4]
 802b640:	6123      	str	r3, [r4, #16]
 802b642:	2300      	movs	r3, #0
 802b644:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 802b648:	e7aa      	b.n	802b5a0 <_printf_i+0x148>
 802b64a:	6923      	ldr	r3, [r4, #16]
 802b64c:	4632      	mov	r2, r6
 802b64e:	4649      	mov	r1, r9
 802b650:	4640      	mov	r0, r8
 802b652:	47d0      	blx	sl
 802b654:	3001      	adds	r0, #1
 802b656:	d0ad      	beq.n	802b5b4 <_printf_i+0x15c>
 802b658:	6823      	ldr	r3, [r4, #0]
 802b65a:	079b      	lsls	r3, r3, #30
 802b65c:	d413      	bmi.n	802b686 <_printf_i+0x22e>
 802b65e:	68e0      	ldr	r0, [r4, #12]
 802b660:	9b03      	ldr	r3, [sp, #12]
 802b662:	4298      	cmp	r0, r3
 802b664:	bfb8      	it	lt
 802b666:	4618      	movlt	r0, r3
 802b668:	e7a6      	b.n	802b5b8 <_printf_i+0x160>
 802b66a:	2301      	movs	r3, #1
 802b66c:	4632      	mov	r2, r6
 802b66e:	4649      	mov	r1, r9
 802b670:	4640      	mov	r0, r8
 802b672:	47d0      	blx	sl
 802b674:	3001      	adds	r0, #1
 802b676:	d09d      	beq.n	802b5b4 <_printf_i+0x15c>
 802b678:	3501      	adds	r5, #1
 802b67a:	68e3      	ldr	r3, [r4, #12]
 802b67c:	9903      	ldr	r1, [sp, #12]
 802b67e:	1a5b      	subs	r3, r3, r1
 802b680:	42ab      	cmp	r3, r5
 802b682:	dcf2      	bgt.n	802b66a <_printf_i+0x212>
 802b684:	e7eb      	b.n	802b65e <_printf_i+0x206>
 802b686:	2500      	movs	r5, #0
 802b688:	f104 0619 	add.w	r6, r4, #25
 802b68c:	e7f5      	b.n	802b67a <_printf_i+0x222>
 802b68e:	bf00      	nop
 802b690:	08030331 	.word	0x08030331
 802b694:	08030342 	.word	0x08030342

0802b698 <__sflush_r>:
 802b698:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 802b69c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 802b6a0:	0716      	lsls	r6, r2, #28
 802b6a2:	4605      	mov	r5, r0
 802b6a4:	460c      	mov	r4, r1
 802b6a6:	d454      	bmi.n	802b752 <__sflush_r+0xba>
 802b6a8:	684b      	ldr	r3, [r1, #4]
 802b6aa:	2b00      	cmp	r3, #0
 802b6ac:	dc02      	bgt.n	802b6b4 <__sflush_r+0x1c>
 802b6ae:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 802b6b0:	2b00      	cmp	r3, #0
 802b6b2:	dd48      	ble.n	802b746 <__sflush_r+0xae>
 802b6b4:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 802b6b6:	2e00      	cmp	r6, #0
 802b6b8:	d045      	beq.n	802b746 <__sflush_r+0xae>
 802b6ba:	2300      	movs	r3, #0
 802b6bc:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 802b6c0:	682f      	ldr	r7, [r5, #0]
 802b6c2:	6a21      	ldr	r1, [r4, #32]
 802b6c4:	602b      	str	r3, [r5, #0]
 802b6c6:	d030      	beq.n	802b72a <__sflush_r+0x92>
 802b6c8:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 802b6ca:	89a3      	ldrh	r3, [r4, #12]
 802b6cc:	0759      	lsls	r1, r3, #29
 802b6ce:	d505      	bpl.n	802b6dc <__sflush_r+0x44>
 802b6d0:	6863      	ldr	r3, [r4, #4]
 802b6d2:	1ad2      	subs	r2, r2, r3
 802b6d4:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 802b6d6:	b10b      	cbz	r3, 802b6dc <__sflush_r+0x44>
 802b6d8:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 802b6da:	1ad2      	subs	r2, r2, r3
 802b6dc:	2300      	movs	r3, #0
 802b6de:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 802b6e0:	6a21      	ldr	r1, [r4, #32]
 802b6e2:	4628      	mov	r0, r5
 802b6e4:	47b0      	blx	r6
 802b6e6:	1c43      	adds	r3, r0, #1
 802b6e8:	89a3      	ldrh	r3, [r4, #12]
 802b6ea:	d106      	bne.n	802b6fa <__sflush_r+0x62>
 802b6ec:	6829      	ldr	r1, [r5, #0]
 802b6ee:	291d      	cmp	r1, #29
 802b6f0:	d82b      	bhi.n	802b74a <__sflush_r+0xb2>
 802b6f2:	4a2a      	ldr	r2, [pc, #168]	@ (802b79c <__sflush_r+0x104>)
 802b6f4:	410a      	asrs	r2, r1
 802b6f6:	07d6      	lsls	r6, r2, #31
 802b6f8:	d427      	bmi.n	802b74a <__sflush_r+0xb2>
 802b6fa:	2200      	movs	r2, #0
 802b6fc:	6062      	str	r2, [r4, #4]
 802b6fe:	04d9      	lsls	r1, r3, #19
 802b700:	6922      	ldr	r2, [r4, #16]
 802b702:	6022      	str	r2, [r4, #0]
 802b704:	d504      	bpl.n	802b710 <__sflush_r+0x78>
 802b706:	1c42      	adds	r2, r0, #1
 802b708:	d101      	bne.n	802b70e <__sflush_r+0x76>
 802b70a:	682b      	ldr	r3, [r5, #0]
 802b70c:	b903      	cbnz	r3, 802b710 <__sflush_r+0x78>
 802b70e:	6560      	str	r0, [r4, #84]	@ 0x54
 802b710:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 802b712:	602f      	str	r7, [r5, #0]
 802b714:	b1b9      	cbz	r1, 802b746 <__sflush_r+0xae>
 802b716:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 802b71a:	4299      	cmp	r1, r3
 802b71c:	d002      	beq.n	802b724 <__sflush_r+0x8c>
 802b71e:	4628      	mov	r0, r5
 802b720:	f7ff fca0 	bl	802b064 <_free_r>
 802b724:	2300      	movs	r3, #0
 802b726:	6363      	str	r3, [r4, #52]	@ 0x34
 802b728:	e00d      	b.n	802b746 <__sflush_r+0xae>
 802b72a:	2301      	movs	r3, #1
 802b72c:	4628      	mov	r0, r5
 802b72e:	47b0      	blx	r6
 802b730:	4602      	mov	r2, r0
 802b732:	1c50      	adds	r0, r2, #1
 802b734:	d1c9      	bne.n	802b6ca <__sflush_r+0x32>
 802b736:	682b      	ldr	r3, [r5, #0]
 802b738:	2b00      	cmp	r3, #0
 802b73a:	d0c6      	beq.n	802b6ca <__sflush_r+0x32>
 802b73c:	2b1d      	cmp	r3, #29
 802b73e:	d001      	beq.n	802b744 <__sflush_r+0xac>
 802b740:	2b16      	cmp	r3, #22
 802b742:	d11e      	bne.n	802b782 <__sflush_r+0xea>
 802b744:	602f      	str	r7, [r5, #0]
 802b746:	2000      	movs	r0, #0
 802b748:	e022      	b.n	802b790 <__sflush_r+0xf8>
 802b74a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 802b74e:	b21b      	sxth	r3, r3
 802b750:	e01b      	b.n	802b78a <__sflush_r+0xf2>
 802b752:	690f      	ldr	r7, [r1, #16]
 802b754:	2f00      	cmp	r7, #0
 802b756:	d0f6      	beq.n	802b746 <__sflush_r+0xae>
 802b758:	0793      	lsls	r3, r2, #30
 802b75a:	680e      	ldr	r6, [r1, #0]
 802b75c:	bf08      	it	eq
 802b75e:	694b      	ldreq	r3, [r1, #20]
 802b760:	600f      	str	r7, [r1, #0]
 802b762:	bf18      	it	ne
 802b764:	2300      	movne	r3, #0
 802b766:	eba6 0807 	sub.w	r8, r6, r7
 802b76a:	608b      	str	r3, [r1, #8]
 802b76c:	f1b8 0f00 	cmp.w	r8, #0
 802b770:	dde9      	ble.n	802b746 <__sflush_r+0xae>
 802b772:	6a21      	ldr	r1, [r4, #32]
 802b774:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 802b776:	4643      	mov	r3, r8
 802b778:	463a      	mov	r2, r7
 802b77a:	4628      	mov	r0, r5
 802b77c:	47b0      	blx	r6
 802b77e:	2800      	cmp	r0, #0
 802b780:	dc08      	bgt.n	802b794 <__sflush_r+0xfc>
 802b782:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 802b786:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 802b78a:	81a3      	strh	r3, [r4, #12]
 802b78c:	f04f 30ff 	mov.w	r0, #4294967295
 802b790:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 802b794:	4407      	add	r7, r0
 802b796:	eba8 0800 	sub.w	r8, r8, r0
 802b79a:	e7e7      	b.n	802b76c <__sflush_r+0xd4>
 802b79c:	dfbffffe 	.word	0xdfbffffe

0802b7a0 <_fflush_r>:
 802b7a0:	b538      	push	{r3, r4, r5, lr}
 802b7a2:	690b      	ldr	r3, [r1, #16]
 802b7a4:	4605      	mov	r5, r0
 802b7a6:	460c      	mov	r4, r1
 802b7a8:	b913      	cbnz	r3, 802b7b0 <_fflush_r+0x10>
 802b7aa:	2500      	movs	r5, #0
 802b7ac:	4628      	mov	r0, r5
 802b7ae:	bd38      	pop	{r3, r4, r5, pc}
 802b7b0:	b118      	cbz	r0, 802b7ba <_fflush_r+0x1a>
 802b7b2:	6a03      	ldr	r3, [r0, #32]
 802b7b4:	b90b      	cbnz	r3, 802b7ba <_fflush_r+0x1a>
 802b7b6:	f7ff fa39 	bl	802ac2c <__sinit>
 802b7ba:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 802b7be:	2b00      	cmp	r3, #0
 802b7c0:	d0f3      	beq.n	802b7aa <_fflush_r+0xa>
 802b7c2:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 802b7c4:	07d0      	lsls	r0, r2, #31
 802b7c6:	d404      	bmi.n	802b7d2 <_fflush_r+0x32>
 802b7c8:	0599      	lsls	r1, r3, #22
 802b7ca:	d402      	bmi.n	802b7d2 <_fflush_r+0x32>
 802b7cc:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 802b7ce:	f7ff fbdc 	bl	802af8a <__retarget_lock_acquire_recursive>
 802b7d2:	4628      	mov	r0, r5
 802b7d4:	4621      	mov	r1, r4
 802b7d6:	f7ff ff5f 	bl	802b698 <__sflush_r>
 802b7da:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 802b7dc:	07da      	lsls	r2, r3, #31
 802b7de:	4605      	mov	r5, r0
 802b7e0:	d4e4      	bmi.n	802b7ac <_fflush_r+0xc>
 802b7e2:	89a3      	ldrh	r3, [r4, #12]
 802b7e4:	059b      	lsls	r3, r3, #22
 802b7e6:	d4e1      	bmi.n	802b7ac <_fflush_r+0xc>
 802b7e8:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 802b7ea:	f7ff fbcf 	bl	802af8c <__retarget_lock_release_recursive>
 802b7ee:	e7dd      	b.n	802b7ac <_fflush_r+0xc>

0802b7f0 <__swbuf_r>:
 802b7f0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 802b7f2:	460e      	mov	r6, r1
 802b7f4:	4614      	mov	r4, r2
 802b7f6:	4605      	mov	r5, r0
 802b7f8:	b118      	cbz	r0, 802b802 <__swbuf_r+0x12>
 802b7fa:	6a03      	ldr	r3, [r0, #32]
 802b7fc:	b90b      	cbnz	r3, 802b802 <__swbuf_r+0x12>
 802b7fe:	f7ff fa15 	bl	802ac2c <__sinit>
 802b802:	69a3      	ldr	r3, [r4, #24]
 802b804:	60a3      	str	r3, [r4, #8]
 802b806:	89a3      	ldrh	r3, [r4, #12]
 802b808:	071a      	lsls	r2, r3, #28
 802b80a:	d501      	bpl.n	802b810 <__swbuf_r+0x20>
 802b80c:	6923      	ldr	r3, [r4, #16]
 802b80e:	b943      	cbnz	r3, 802b822 <__swbuf_r+0x32>
 802b810:	4621      	mov	r1, r4
 802b812:	4628      	mov	r0, r5
 802b814:	f000 f82a 	bl	802b86c <__swsetup_r>
 802b818:	b118      	cbz	r0, 802b822 <__swbuf_r+0x32>
 802b81a:	f04f 37ff 	mov.w	r7, #4294967295
 802b81e:	4638      	mov	r0, r7
 802b820:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 802b822:	6823      	ldr	r3, [r4, #0]
 802b824:	6922      	ldr	r2, [r4, #16]
 802b826:	1a98      	subs	r0, r3, r2
 802b828:	6963      	ldr	r3, [r4, #20]
 802b82a:	b2f6      	uxtb	r6, r6
 802b82c:	4283      	cmp	r3, r0
 802b82e:	4637      	mov	r7, r6
 802b830:	dc05      	bgt.n	802b83e <__swbuf_r+0x4e>
 802b832:	4621      	mov	r1, r4
 802b834:	4628      	mov	r0, r5
 802b836:	f7ff ffb3 	bl	802b7a0 <_fflush_r>
 802b83a:	2800      	cmp	r0, #0
 802b83c:	d1ed      	bne.n	802b81a <__swbuf_r+0x2a>
 802b83e:	68a3      	ldr	r3, [r4, #8]
 802b840:	3b01      	subs	r3, #1
 802b842:	60a3      	str	r3, [r4, #8]
 802b844:	6823      	ldr	r3, [r4, #0]
 802b846:	1c5a      	adds	r2, r3, #1
 802b848:	6022      	str	r2, [r4, #0]
 802b84a:	701e      	strb	r6, [r3, #0]
 802b84c:	6962      	ldr	r2, [r4, #20]
 802b84e:	1c43      	adds	r3, r0, #1
 802b850:	429a      	cmp	r2, r3
 802b852:	d004      	beq.n	802b85e <__swbuf_r+0x6e>
 802b854:	89a3      	ldrh	r3, [r4, #12]
 802b856:	07db      	lsls	r3, r3, #31
 802b858:	d5e1      	bpl.n	802b81e <__swbuf_r+0x2e>
 802b85a:	2e0a      	cmp	r6, #10
 802b85c:	d1df      	bne.n	802b81e <__swbuf_r+0x2e>
 802b85e:	4621      	mov	r1, r4
 802b860:	4628      	mov	r0, r5
 802b862:	f7ff ff9d 	bl	802b7a0 <_fflush_r>
 802b866:	2800      	cmp	r0, #0
 802b868:	d0d9      	beq.n	802b81e <__swbuf_r+0x2e>
 802b86a:	e7d6      	b.n	802b81a <__swbuf_r+0x2a>

0802b86c <__swsetup_r>:
 802b86c:	b538      	push	{r3, r4, r5, lr}
 802b86e:	4b29      	ldr	r3, [pc, #164]	@ (802b914 <__swsetup_r+0xa8>)
 802b870:	4605      	mov	r5, r0
 802b872:	6818      	ldr	r0, [r3, #0]
 802b874:	460c      	mov	r4, r1
 802b876:	b118      	cbz	r0, 802b880 <__swsetup_r+0x14>
 802b878:	6a03      	ldr	r3, [r0, #32]
 802b87a:	b90b      	cbnz	r3, 802b880 <__swsetup_r+0x14>
 802b87c:	f7ff f9d6 	bl	802ac2c <__sinit>
 802b880:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 802b884:	0719      	lsls	r1, r3, #28
 802b886:	d422      	bmi.n	802b8ce <__swsetup_r+0x62>
 802b888:	06da      	lsls	r2, r3, #27
 802b88a:	d407      	bmi.n	802b89c <__swsetup_r+0x30>
 802b88c:	2209      	movs	r2, #9
 802b88e:	602a      	str	r2, [r5, #0]
 802b890:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 802b894:	81a3      	strh	r3, [r4, #12]
 802b896:	f04f 30ff 	mov.w	r0, #4294967295
 802b89a:	e033      	b.n	802b904 <__swsetup_r+0x98>
 802b89c:	0758      	lsls	r0, r3, #29
 802b89e:	d512      	bpl.n	802b8c6 <__swsetup_r+0x5a>
 802b8a0:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 802b8a2:	b141      	cbz	r1, 802b8b6 <__swsetup_r+0x4a>
 802b8a4:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 802b8a8:	4299      	cmp	r1, r3
 802b8aa:	d002      	beq.n	802b8b2 <__swsetup_r+0x46>
 802b8ac:	4628      	mov	r0, r5
 802b8ae:	f7ff fbd9 	bl	802b064 <_free_r>
 802b8b2:	2300      	movs	r3, #0
 802b8b4:	6363      	str	r3, [r4, #52]	@ 0x34
 802b8b6:	89a3      	ldrh	r3, [r4, #12]
 802b8b8:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 802b8bc:	81a3      	strh	r3, [r4, #12]
 802b8be:	2300      	movs	r3, #0
 802b8c0:	6063      	str	r3, [r4, #4]
 802b8c2:	6923      	ldr	r3, [r4, #16]
 802b8c4:	6023      	str	r3, [r4, #0]
 802b8c6:	89a3      	ldrh	r3, [r4, #12]
 802b8c8:	f043 0308 	orr.w	r3, r3, #8
 802b8cc:	81a3      	strh	r3, [r4, #12]
 802b8ce:	6923      	ldr	r3, [r4, #16]
 802b8d0:	b94b      	cbnz	r3, 802b8e6 <__swsetup_r+0x7a>
 802b8d2:	89a3      	ldrh	r3, [r4, #12]
 802b8d4:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 802b8d8:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 802b8dc:	d003      	beq.n	802b8e6 <__swsetup_r+0x7a>
 802b8de:	4621      	mov	r1, r4
 802b8e0:	4628      	mov	r0, r5
 802b8e2:	f000 f83f 	bl	802b964 <__smakebuf_r>
 802b8e6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 802b8ea:	f013 0201 	ands.w	r2, r3, #1
 802b8ee:	d00a      	beq.n	802b906 <__swsetup_r+0x9a>
 802b8f0:	2200      	movs	r2, #0
 802b8f2:	60a2      	str	r2, [r4, #8]
 802b8f4:	6962      	ldr	r2, [r4, #20]
 802b8f6:	4252      	negs	r2, r2
 802b8f8:	61a2      	str	r2, [r4, #24]
 802b8fa:	6922      	ldr	r2, [r4, #16]
 802b8fc:	b942      	cbnz	r2, 802b910 <__swsetup_r+0xa4>
 802b8fe:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 802b902:	d1c5      	bne.n	802b890 <__swsetup_r+0x24>
 802b904:	bd38      	pop	{r3, r4, r5, pc}
 802b906:	0799      	lsls	r1, r3, #30
 802b908:	bf58      	it	pl
 802b90a:	6962      	ldrpl	r2, [r4, #20]
 802b90c:	60a2      	str	r2, [r4, #8]
 802b90e:	e7f4      	b.n	802b8fa <__swsetup_r+0x8e>
 802b910:	2000      	movs	r0, #0
 802b912:	e7f7      	b.n	802b904 <__swsetup_r+0x98>
 802b914:	240000d8 	.word	0x240000d8

0802b918 <__swhatbuf_r>:
 802b918:	b570      	push	{r4, r5, r6, lr}
 802b91a:	460c      	mov	r4, r1
 802b91c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 802b920:	2900      	cmp	r1, #0
 802b922:	b096      	sub	sp, #88	@ 0x58
 802b924:	4615      	mov	r5, r2
 802b926:	461e      	mov	r6, r3
 802b928:	da0d      	bge.n	802b946 <__swhatbuf_r+0x2e>
 802b92a:	89a3      	ldrh	r3, [r4, #12]
 802b92c:	f013 0f80 	tst.w	r3, #128	@ 0x80
 802b930:	f04f 0100 	mov.w	r1, #0
 802b934:	bf14      	ite	ne
 802b936:	2340      	movne	r3, #64	@ 0x40
 802b938:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 802b93c:	2000      	movs	r0, #0
 802b93e:	6031      	str	r1, [r6, #0]
 802b940:	602b      	str	r3, [r5, #0]
 802b942:	b016      	add	sp, #88	@ 0x58
 802b944:	bd70      	pop	{r4, r5, r6, pc}
 802b946:	466a      	mov	r2, sp
 802b948:	f000 f848 	bl	802b9dc <_fstat_r>
 802b94c:	2800      	cmp	r0, #0
 802b94e:	dbec      	blt.n	802b92a <__swhatbuf_r+0x12>
 802b950:	9901      	ldr	r1, [sp, #4]
 802b952:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 802b956:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 802b95a:	4259      	negs	r1, r3
 802b95c:	4159      	adcs	r1, r3
 802b95e:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 802b962:	e7eb      	b.n	802b93c <__swhatbuf_r+0x24>

0802b964 <__smakebuf_r>:
 802b964:	898b      	ldrh	r3, [r1, #12]
 802b966:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 802b968:	079d      	lsls	r5, r3, #30
 802b96a:	4606      	mov	r6, r0
 802b96c:	460c      	mov	r4, r1
 802b96e:	d507      	bpl.n	802b980 <__smakebuf_r+0x1c>
 802b970:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 802b974:	6023      	str	r3, [r4, #0]
 802b976:	6123      	str	r3, [r4, #16]
 802b978:	2301      	movs	r3, #1
 802b97a:	6163      	str	r3, [r4, #20]
 802b97c:	b003      	add	sp, #12
 802b97e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 802b980:	ab01      	add	r3, sp, #4
 802b982:	466a      	mov	r2, sp
 802b984:	f7ff ffc8 	bl	802b918 <__swhatbuf_r>
 802b988:	9f00      	ldr	r7, [sp, #0]
 802b98a:	4605      	mov	r5, r0
 802b98c:	4639      	mov	r1, r7
 802b98e:	4630      	mov	r0, r6
 802b990:	f7ff f826 	bl	802a9e0 <_malloc_r>
 802b994:	b948      	cbnz	r0, 802b9aa <__smakebuf_r+0x46>
 802b996:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 802b99a:	059a      	lsls	r2, r3, #22
 802b99c:	d4ee      	bmi.n	802b97c <__smakebuf_r+0x18>
 802b99e:	f023 0303 	bic.w	r3, r3, #3
 802b9a2:	f043 0302 	orr.w	r3, r3, #2
 802b9a6:	81a3      	strh	r3, [r4, #12]
 802b9a8:	e7e2      	b.n	802b970 <__smakebuf_r+0xc>
 802b9aa:	89a3      	ldrh	r3, [r4, #12]
 802b9ac:	6020      	str	r0, [r4, #0]
 802b9ae:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 802b9b2:	81a3      	strh	r3, [r4, #12]
 802b9b4:	9b01      	ldr	r3, [sp, #4]
 802b9b6:	e9c4 0704 	strd	r0, r7, [r4, #16]
 802b9ba:	b15b      	cbz	r3, 802b9d4 <__smakebuf_r+0x70>
 802b9bc:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 802b9c0:	4630      	mov	r0, r6
 802b9c2:	f000 f81d 	bl	802ba00 <_isatty_r>
 802b9c6:	b128      	cbz	r0, 802b9d4 <__smakebuf_r+0x70>
 802b9c8:	89a3      	ldrh	r3, [r4, #12]
 802b9ca:	f023 0303 	bic.w	r3, r3, #3
 802b9ce:	f043 0301 	orr.w	r3, r3, #1
 802b9d2:	81a3      	strh	r3, [r4, #12]
 802b9d4:	89a3      	ldrh	r3, [r4, #12]
 802b9d6:	431d      	orrs	r5, r3
 802b9d8:	81a5      	strh	r5, [r4, #12]
 802b9da:	e7cf      	b.n	802b97c <__smakebuf_r+0x18>

0802b9dc <_fstat_r>:
 802b9dc:	b538      	push	{r3, r4, r5, lr}
 802b9de:	4d07      	ldr	r5, [pc, #28]	@ (802b9fc <_fstat_r+0x20>)
 802b9e0:	2300      	movs	r3, #0
 802b9e2:	4604      	mov	r4, r0
 802b9e4:	4608      	mov	r0, r1
 802b9e6:	4611      	mov	r1, r2
 802b9e8:	602b      	str	r3, [r5, #0]
 802b9ea:	f7d5 fe79 	bl	80016e0 <_fstat>
 802b9ee:	1c43      	adds	r3, r0, #1
 802b9f0:	d102      	bne.n	802b9f8 <_fstat_r+0x1c>
 802b9f2:	682b      	ldr	r3, [r5, #0]
 802b9f4:	b103      	cbz	r3, 802b9f8 <_fstat_r+0x1c>
 802b9f6:	6023      	str	r3, [r4, #0]
 802b9f8:	bd38      	pop	{r3, r4, r5, pc}
 802b9fa:	bf00      	nop
 802b9fc:	2400bac0 	.word	0x2400bac0

0802ba00 <_isatty_r>:
 802ba00:	b538      	push	{r3, r4, r5, lr}
 802ba02:	4d06      	ldr	r5, [pc, #24]	@ (802ba1c <_isatty_r+0x1c>)
 802ba04:	2300      	movs	r3, #0
 802ba06:	4604      	mov	r4, r0
 802ba08:	4608      	mov	r0, r1
 802ba0a:	602b      	str	r3, [r5, #0]
 802ba0c:	f7d5 fe78 	bl	8001700 <_isatty>
 802ba10:	1c43      	adds	r3, r0, #1
 802ba12:	d102      	bne.n	802ba1a <_isatty_r+0x1a>
 802ba14:	682b      	ldr	r3, [r5, #0]
 802ba16:	b103      	cbz	r3, 802ba1a <_isatty_r+0x1a>
 802ba18:	6023      	str	r3, [r4, #0]
 802ba1a:	bd38      	pop	{r3, r4, r5, pc}
 802ba1c:	2400bac0 	.word	0x2400bac0

0802ba20 <_init>:
 802ba20:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 802ba22:	bf00      	nop
 802ba24:	bcf8      	pop	{r3, r4, r5, r6, r7}
 802ba26:	bc08      	pop	{r3}
 802ba28:	469e      	mov	lr, r3
 802ba2a:	4770      	bx	lr

0802ba2c <_fini>:
 802ba2c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 802ba2e:	bf00      	nop
 802ba30:	bcf8      	pop	{r3, r4, r5, r6, r7}
 802ba32:	bc08      	pop	{r3}
 802ba34:	469e      	mov	lr, r3
 802ba36:	4770      	bx	lr
