
PhonPhot_Complete_CM7.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0002baa8  080002a0  080002a0  000012a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00004a0c  0802bd48  0802bd48  0002cd48  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 FontSearchFlashSection 00000028  08030754  08030754  00031754  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .ARM.extab    00000000  0803077c  0803077c  0018cae0  2**0
                  CONTENTS
  5 .ARM          00000008  0803077c  0803077c  0003177c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  6 .preinit_array 00000000  08030784  08030784  0018cae0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  7 .init_array   00000014  08030784  08030784  00031784  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .fini_array   00000008  08030798  08030798  00031798  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .data         0000012c  24000000  080307a0  00032000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 10 .bss          0000bb38  2400012c  080308cc  0003212c  2**2
                  ALLOC
 11 ._user_heap_stack 00002004  2400bc64  080308cc  00032c64  2**0
                  ALLOC
 12 .ARM.attributes 0000002e  00000000  00000000  0018cae0  2**0
                  CONTENTS, READONLY
 13 FontFlashSection 00000bd4  90000000  90000000  00034000  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
 14 TextFlashSection 0000021c  90000bd4  90000bd4  00034bd4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
 15 ExtFlashSection 00157cf0  90000df0  90000df0  00034df0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
 16 .ipc_data     00000050  30000000  30000000  00033000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 17 .debug_info   000b2aa1  00000000  00000000  0018cb0e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_abbrev 00015101  00000000  00000000  0023f5af  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_aranges 00004978  00000000  00000000  002546b0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_rnglists 00003514  00000000  00000000  00259028  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_macro  000132e8  00000000  00000000  0025c53c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line   0005674c  00000000  00000000  0026f824  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 23 .debug_str    001b8c2c  00000000  00000000  002c5f70  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 24 .comment      000000c2  00000000  00000000  0047eb9c  2**0
                  CONTENTS, READONLY
 25 .debug_frame  00013528  00000000  00000000  0047ec60  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 26 .debug_line_str 000000a5  00000000  00000000  00492188  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080002a0 <__do_global_dtors_aux>:
 80002a0:	b510      	push	{r4, lr}
 80002a2:	4c05      	ldr	r4, [pc, #20]	@ (80002b8 <__do_global_dtors_aux+0x18>)
 80002a4:	7823      	ldrb	r3, [r4, #0]
 80002a6:	b933      	cbnz	r3, 80002b6 <__do_global_dtors_aux+0x16>
 80002a8:	4b04      	ldr	r3, [pc, #16]	@ (80002bc <__do_global_dtors_aux+0x1c>)
 80002aa:	b113      	cbz	r3, 80002b2 <__do_global_dtors_aux+0x12>
 80002ac:	4804      	ldr	r0, [pc, #16]	@ (80002c0 <__do_global_dtors_aux+0x20>)
 80002ae:	f3af 8000 	nop.w
 80002b2:	2301      	movs	r3, #1
 80002b4:	7023      	strb	r3, [r4, #0]
 80002b6:	bd10      	pop	{r4, pc}
 80002b8:	2400012c 	.word	0x2400012c
 80002bc:	00000000 	.word	0x00000000
 80002c0:	0802bd30 	.word	0x0802bd30

080002c4 <frame_dummy>:
 80002c4:	b508      	push	{r3, lr}
 80002c6:	4b03      	ldr	r3, [pc, #12]	@ (80002d4 <frame_dummy+0x10>)
 80002c8:	b11b      	cbz	r3, 80002d2 <frame_dummy+0xe>
 80002ca:	4903      	ldr	r1, [pc, #12]	@ (80002d8 <frame_dummy+0x14>)
 80002cc:	4803      	ldr	r0, [pc, #12]	@ (80002dc <frame_dummy+0x18>)
 80002ce:	f3af 8000 	nop.w
 80002d2:	bd08      	pop	{r3, pc}
 80002d4:	00000000 	.word	0x00000000
 80002d8:	24000130 	.word	0x24000130
 80002dc:	0802bd30 	.word	0x0802bd30

080002e0 <memchr>:
 80002e0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80002e4:	2a10      	cmp	r2, #16
 80002e6:	db2b      	blt.n	8000340 <memchr+0x60>
 80002e8:	f010 0f07 	tst.w	r0, #7
 80002ec:	d008      	beq.n	8000300 <memchr+0x20>
 80002ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80002f2:	3a01      	subs	r2, #1
 80002f4:	428b      	cmp	r3, r1
 80002f6:	d02d      	beq.n	8000354 <memchr+0x74>
 80002f8:	f010 0f07 	tst.w	r0, #7
 80002fc:	b342      	cbz	r2, 8000350 <memchr+0x70>
 80002fe:	d1f6      	bne.n	80002ee <memchr+0xe>
 8000300:	b4f0      	push	{r4, r5, r6, r7}
 8000302:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000306:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800030a:	f022 0407 	bic.w	r4, r2, #7
 800030e:	f07f 0700 	mvns.w	r7, #0
 8000312:	2300      	movs	r3, #0
 8000314:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000318:	3c08      	subs	r4, #8
 800031a:	ea85 0501 	eor.w	r5, r5, r1
 800031e:	ea86 0601 	eor.w	r6, r6, r1
 8000322:	fa85 f547 	uadd8	r5, r5, r7
 8000326:	faa3 f587 	sel	r5, r3, r7
 800032a:	fa86 f647 	uadd8	r6, r6, r7
 800032e:	faa5 f687 	sel	r6, r5, r7
 8000332:	b98e      	cbnz	r6, 8000358 <memchr+0x78>
 8000334:	d1ee      	bne.n	8000314 <memchr+0x34>
 8000336:	bcf0      	pop	{r4, r5, r6, r7}
 8000338:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800033c:	f002 0207 	and.w	r2, r2, #7
 8000340:	b132      	cbz	r2, 8000350 <memchr+0x70>
 8000342:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000346:	3a01      	subs	r2, #1
 8000348:	ea83 0301 	eor.w	r3, r3, r1
 800034c:	b113      	cbz	r3, 8000354 <memchr+0x74>
 800034e:	d1f8      	bne.n	8000342 <memchr+0x62>
 8000350:	2000      	movs	r0, #0
 8000352:	4770      	bx	lr
 8000354:	3801      	subs	r0, #1
 8000356:	4770      	bx	lr
 8000358:	2d00      	cmp	r5, #0
 800035a:	bf06      	itte	eq
 800035c:	4635      	moveq	r5, r6
 800035e:	3803      	subeq	r0, #3
 8000360:	3807      	subne	r0, #7
 8000362:	f015 0f01 	tst.w	r5, #1
 8000366:	d107      	bne.n	8000378 <memchr+0x98>
 8000368:	3001      	adds	r0, #1
 800036a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800036e:	bf02      	ittt	eq
 8000370:	3001      	addeq	r0, #1
 8000372:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000376:	3001      	addeq	r0, #1
 8000378:	bcf0      	pop	{r4, r5, r6, r7}
 800037a:	3801      	subs	r0, #1
 800037c:	4770      	bx	lr
 800037e:	bf00      	nop

08000380 <IPCSetVoiceVolumeNormalized>:
{
  return shared_memory.voice_volume_normalized;
}

void IPCSetVoiceVolumeNormalized( float new_vol )
{
 8000380:	b480      	push	{r7}
 8000382:	b083      	sub	sp, #12
 8000384:	af00      	add	r7, sp, #0
 8000386:	ed87 0a01 	vstr	s0, [r7, #4]
  shared_memory.voice_volume_normalized = new_vol;
 800038a:	4a04      	ldr	r2, [pc, #16]	@ (800039c <IPCSetVoiceVolumeNormalized+0x1c>)
 800038c:	687b      	ldr	r3, [r7, #4]
 800038e:	6013      	str	r3, [r2, #0]
}
 8000390:	bf00      	nop
 8000392:	370c      	adds	r7, #12
 8000394:	46bd      	mov	sp, r7
 8000396:	f85d 7b04 	ldr.w	r7, [sp], #4
 800039a:	4770      	bx	lr
 800039c:	30000000 	.word	0x30000000

080003a0 <IPCSetVoiceMuteState>:
{
  return shared_memory.voice_mute_active;
}

void IPCSetVoiceMuteState( boolean_t new_state )
{
 80003a0:	b480      	push	{r7}
 80003a2:	b083      	sub	sp, #12
 80003a4:	af00      	add	r7, sp, #0
 80003a6:	4603      	mov	r3, r0
 80003a8:	71fb      	strb	r3, [r7, #7]
  shared_memory.voice_mute_active = new_state;
 80003aa:	4a04      	ldr	r2, [pc, #16]	@ (80003bc <IPCSetVoiceMuteState+0x1c>)
 80003ac:	79fb      	ldrb	r3, [r7, #7]
 80003ae:	7113      	strb	r3, [r2, #4]
}
 80003b0:	bf00      	nop
 80003b2:	370c      	adds	r7, #12
 80003b4:	46bd      	mov	sp, r7
 80003b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80003ba:	4770      	bx	lr
 80003bc:	30000000 	.word	0x30000000

080003c0 <IPCGetAnomalyDetectState>:

boolean_t IPCGetAnomalyDetectState( void )
{
 80003c0:	b480      	push	{r7}
 80003c2:	af00      	add	r7, sp, #0
  return shared_memory.anomaly_detection_active;
 80003c4:	4b03      	ldr	r3, [pc, #12]	@ (80003d4 <IPCGetAnomalyDetectState+0x14>)
 80003c6:	795b      	ldrb	r3, [r3, #5]
 80003c8:	b2db      	uxtb	r3, r3
}
 80003ca:	4618      	mov	r0, r3
 80003cc:	46bd      	mov	sp, r7
 80003ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80003d2:	4770      	bx	lr
 80003d4:	30000000 	.word	0x30000000

080003d8 <IPCGetAlarmMuteState>:
{
  shared_memory.anomaly_magnitude_db = new_mag;
}

boolean_t IPCGetAlarmMuteState( void )
{
 80003d8:	b480      	push	{r7}
 80003da:	af00      	add	r7, sp, #0
  return shared_memory.alarm_mute;
 80003dc:	4b03      	ldr	r3, [pc, #12]	@ (80003ec <IPCGetAlarmMuteState+0x14>)
 80003de:	799b      	ldrb	r3, [r3, #6]
 80003e0:	b2db      	uxtb	r3, r3
}
 80003e2:	4618      	mov	r0, r3
 80003e4:	46bd      	mov	sp, r7
 80003e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80003ea:	4770      	bx	lr
 80003ec:	30000000 	.word	0x30000000

080003f0 <IPCSetAlarmMuteState>:

void IPCSetAlarmMuteState( boolean_t new_state )
{
 80003f0:	b480      	push	{r7}
 80003f2:	b083      	sub	sp, #12
 80003f4:	af00      	add	r7, sp, #0
 80003f6:	4603      	mov	r3, r0
 80003f8:	71fb      	strb	r3, [r7, #7]
  shared_memory.alarm_mute = new_state;
 80003fa:	4a04      	ldr	r2, [pc, #16]	@ (800040c <IPCSetAlarmMuteState+0x1c>)
 80003fc:	79fb      	ldrb	r3, [r7, #7]
 80003fe:	7193      	strb	r3, [r2, #6]
}
 8000400:	bf00      	nop
 8000402:	370c      	adds	r7, #12
 8000404:	46bd      	mov	sp, r7
 8000406:	f85d 7b04 	ldr.w	r7, [sp], #4
 800040a:	4770      	bx	lr
 800040c:	30000000 	.word	0x30000000

08000410 <IPCGetPredictedRegion>:

int8_t IPCGetPredictedRegion( void )
{
 8000410:	b480      	push	{r7}
 8000412:	af00      	add	r7, sp, #0
	return shared_memory.predicted_region;
 8000414:	4b04      	ldr	r3, [pc, #16]	@ (8000428 <IPCGetPredictedRegion+0x18>)
 8000416:	f893 304b 	ldrb.w	r3, [r3, #75]	@ 0x4b
 800041a:	b25b      	sxtb	r3, r3
}
 800041c:	4618      	mov	r0, r3
 800041e:	46bd      	mov	sp, r7
 8000420:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000424:	4770      	bx	lr
 8000426:	bf00      	nop
 8000428:	30000000 	.word	0x30000000

0800042c <ITM_SendChar>:
           \li Is blocking when a debugger is connected, but the previous character sent has not been transmitted.
  \param [in]     ch  Character to transmit.
  \returns            Character to transmit.
 */
__STATIC_INLINE uint32_t ITM_SendChar (uint32_t ch)
{
 800042c:	b480      	push	{r7}
 800042e:	b083      	sub	sp, #12
 8000430:	af00      	add	r7, sp, #0
 8000432:	6078      	str	r0, [r7, #4]
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 8000434:	f04f 4360 	mov.w	r3, #3758096384	@ 0xe0000000
 8000438:	f8d3 3e80 	ldr.w	r3, [r3, #3712]	@ 0xe80
 800043c:	f003 0301 	and.w	r3, r3, #1
 8000440:	2b00      	cmp	r3, #0
 8000442:	d013      	beq.n	800046c <ITM_SendChar+0x40>
      ((ITM->TER & 1UL               ) != 0UL)   )     /* ITM Port #0 enabled */
 8000444:	f04f 4360 	mov.w	r3, #3758096384	@ 0xe0000000
 8000448:	f8d3 3e00 	ldr.w	r3, [r3, #3584]	@ 0xe00
 800044c:	f003 0301 	and.w	r3, r3, #1
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 8000450:	2b00      	cmp	r3, #0
 8000452:	d00b      	beq.n	800046c <ITM_SendChar+0x40>
  {
    while (ITM->PORT[0U].u32 == 0UL)
 8000454:	e000      	b.n	8000458 <ITM_SendChar+0x2c>
    {
      __NOP();
 8000456:	bf00      	nop
    while (ITM->PORT[0U].u32 == 0UL)
 8000458:	f04f 4360 	mov.w	r3, #3758096384	@ 0xe0000000
 800045c:	681b      	ldr	r3, [r3, #0]
 800045e:	2b00      	cmp	r3, #0
 8000460:	d0f9      	beq.n	8000456 <ITM_SendChar+0x2a>
    }
    ITM->PORT[0U].u8 = (uint8_t)ch;
 8000462:	f04f 4360 	mov.w	r3, #3758096384	@ 0xe0000000
 8000466:	687a      	ldr	r2, [r7, #4]
 8000468:	b2d2      	uxtb	r2, r2
 800046a:	701a      	strb	r2, [r3, #0]
  }
  return (ch);
 800046c:	687b      	ldr	r3, [r7, #4]
}
 800046e:	4618      	mov	r0, r3
 8000470:	370c      	adds	r7, #12
 8000472:	46bd      	mov	sp, r7
 8000474:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000478:	4770      	bx	lr

0800047a <_write>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int _write(int file, char *ptr, int len)
{
 800047a:	b580      	push	{r7, lr}
 800047c:	b086      	sub	sp, #24
 800047e:	af00      	add	r7, sp, #0
 8000480:	60f8      	str	r0, [r7, #12]
 8000482:	60b9      	str	r1, [r7, #8]
 8000484:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000486:	2300      	movs	r3, #0
 8000488:	617b      	str	r3, [r7, #20]
 800048a:	e009      	b.n	80004a0 <_write+0x26>
	{
		ITM_SendChar(*ptr++);
 800048c:	68bb      	ldr	r3, [r7, #8]
 800048e:	1c5a      	adds	r2, r3, #1
 8000490:	60ba      	str	r2, [r7, #8]
 8000492:	781b      	ldrb	r3, [r3, #0]
 8000494:	4618      	mov	r0, r3
 8000496:	f7ff ffc9 	bl	800042c <ITM_SendChar>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800049a:	697b      	ldr	r3, [r7, #20]
 800049c:	3301      	adds	r3, #1
 800049e:	617b      	str	r3, [r7, #20]
 80004a0:	697a      	ldr	r2, [r7, #20]
 80004a2:	687b      	ldr	r3, [r7, #4]
 80004a4:	429a      	cmp	r2, r3
 80004a6:	dbf1      	blt.n	800048c <_write+0x12>
	}
	return len;
 80004a8:	687b      	ldr	r3, [r7, #4]
}
 80004aa:	4618      	mov	r0, r3
 80004ac:	3718      	adds	r7, #24
 80004ae:	46bd      	mov	sp, r7
 80004b0:	bd80      	pop	{r7, pc}
	...

080004b4 <main>:


int main(void)
{
 80004b4:	b580      	push	{r7, lr}
 80004b6:	b084      	sub	sp, #16
 80004b8:	af00      	add	r7, sp, #0
/* USER CODE BEGIN Boot_Mode_Sequence_0 */
  int32_t timeout;
/* USER CODE END Boot_Mode_Sequence_0 */

  /* MPU Configuration--------------------------------------------------------*/
  MPU_Config();
 80004ba:	f000 fbab 	bl	8000c14 <MPU_Config>
  /* Enable D-Cache---------------------------------------------------------*/
  //SCB_EnableDCache();

/* USER CODE BEGIN Boot_Mode_Sequence_1 */
  /* Wait until CPU2 boots and enters in stop mode or timeout*/
  timeout = 0xFFFF;
 80004be:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 80004c2:	60fb      	str	r3, [r7, #12]
  while((__HAL_RCC_GET_FLAG(RCC_FLAG_D2CKRDY) != RESET) && (timeout-- > 0));
 80004c4:	bf00      	nop
 80004c6:	4b39      	ldr	r3, [pc, #228]	@ (80005ac <main+0xf8>)
 80004c8:	681b      	ldr	r3, [r3, #0]
 80004ca:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80004ce:	2b00      	cmp	r3, #0
 80004d0:	d004      	beq.n	80004dc <main+0x28>
 80004d2:	68fb      	ldr	r3, [r7, #12]
 80004d4:	1e5a      	subs	r2, r3, #1
 80004d6:	60fa      	str	r2, [r7, #12]
 80004d8:	2b00      	cmp	r3, #0
 80004da:	dcf4      	bgt.n	80004c6 <main+0x12>
  if ( timeout < 0 )
 80004dc:	68fb      	ldr	r3, [r7, #12]
 80004de:	2b00      	cmp	r3, #0
 80004e0:	da01      	bge.n	80004e6 <main+0x32>
  {
    Error_Handler();
 80004e2:	f000 fbe1 	bl	8000ca8 <Error_Handler>
  }
/* USER CODE END Boot_Mode_Sequence_1 */
  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80004e6:	f010 fd43 	bl	8010f70 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80004ea:	f000 f86d 	bl	80005c8 <SystemClock_Config>

  /* Configure the peripherals common clocks */
  PeriphCommonClock_Config();
 80004ee:	f000 f8f5 	bl	80006dc <PeriphCommonClock_Config>

  /* USER CODE BEGIN Boot_Mode_Sequence_2 */
  /* When system initialization is finished, Cortex-M7 will release Cortex-M4 by means of
  HSEM notification */
  /*HW semaphore Clock enable*/
  __HAL_RCC_HSEM_CLK_ENABLE();
 80004f2:	4b2e      	ldr	r3, [pc, #184]	@ (80005ac <main+0xf8>)
 80004f4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80004f8:	4a2c      	ldr	r2, [pc, #176]	@ (80005ac <main+0xf8>)
 80004fa:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 80004fe:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000502:	4b2a      	ldr	r3, [pc, #168]	@ (80005ac <main+0xf8>)
 8000504:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000508:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800050c:	60bb      	str	r3, [r7, #8]
 800050e:	68bb      	ldr	r3, [r7, #8]
  /*Take HSEM */
  HAL_HSEM_FastTake(HSEM_ID_0);
 8000510:	2000      	movs	r0, #0
 8000512:	f011 fc75 	bl	8011e00 <HAL_HSEM_FastTake>
  /*Release HSEM in order to notify the CPU2(CM4)*/
  HAL_HSEM_Release(HSEM_ID_0,0);
 8000516:	2100      	movs	r1, #0
 8000518:	2000      	movs	r0, #0
 800051a:	f011 fc8b 	bl	8011e34 <HAL_HSEM_Release>
  /* wait until CPU2 wakes up from stop mode */
  timeout = 0xFFFF;
 800051e:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8000522:	60fb      	str	r3, [r7, #12]
  while((__HAL_RCC_GET_FLAG(RCC_FLAG_D2CKRDY) == RESET) && (timeout-- > 0));
 8000524:	bf00      	nop
 8000526:	4b21      	ldr	r3, [pc, #132]	@ (80005ac <main+0xf8>)
 8000528:	681b      	ldr	r3, [r3, #0]
 800052a:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800052e:	2b00      	cmp	r3, #0
 8000530:	d104      	bne.n	800053c <main+0x88>
 8000532:	68fb      	ldr	r3, [r7, #12]
 8000534:	1e5a      	subs	r2, r3, #1
 8000536:	60fa      	str	r2, [r7, #12]
 8000538:	2b00      	cmp	r3, #0
 800053a:	dcf4      	bgt.n	8000526 <main+0x72>
  if ( timeout < 0 )
 800053c:	68fb      	ldr	r3, [r7, #12]
 800053e:	2b00      	cmp	r3, #0
 8000540:	da01      	bge.n	8000546 <main+0x92>
  {
    Error_Handler();
 8000542:	f000 fbb1 	bl	8000ca8 <Error_Handler>
  }
  /* USER CODE END Boot_Mode_Sequence_2 */

  /* USER CODE BEGIN SysInit */

  __HAL_RCC_DMA1_CLK_ENABLE();
 8000546:	4b19      	ldr	r3, [pc, #100]	@ (80005ac <main+0xf8>)
 8000548:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 800054c:	4a17      	ldr	r2, [pc, #92]	@ (80005ac <main+0xf8>)
 800054e:	f043 0301 	orr.w	r3, r3, #1
 8000552:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 8000556:	4b15      	ldr	r3, [pc, #84]	@ (80005ac <main+0xf8>)
 8000558:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 800055c:	f003 0301 	and.w	r3, r3, #1
 8000560:	607b      	str	r3, [r7, #4]
 8000562:	687b      	ldr	r3, [r7, #4]
  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000564:	f000 fa32 	bl	80009cc <MX_GPIO_Init>
  MX_QUADSPI_Init();
 8000568:	f000 f9ac 	bl	80008c4 <MX_QUADSPI_Init>
  MX_FMC_Init();
 800056c:	f000 f9d8 	bl	8000920 <MX_FMC_Init>
  MX_LTDC_Init();
 8000570:	f000 f924 	bl	80007bc <MX_LTDC_Init>
  MX_CRC_Init();
 8000574:	f000 f8e2 	bl	800073c <MX_CRC_Init>
  MX_DMA2D_Init();
 8000578:	f000 f902 	bl	8000780 <MX_DMA2D_Init>
  //MX_TIM4_Init();
  MX_TouchGFX_Init();
 800057c:	f001 f945 	bl	800180a <MX_TouchGFX_Init>
  // start/enable timer
  //TIM4->CR1 |= TIM_CR1_CEN;
  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 8000580:	f00a fc92 	bl	800aea8 <osKernelInitialize>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of defaultTask */
  defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);
 8000584:	4a0a      	ldr	r2, [pc, #40]	@ (80005b0 <main+0xfc>)
 8000586:	2100      	movs	r1, #0
 8000588:	480a      	ldr	r0, [pc, #40]	@ (80005b4 <main+0x100>)
 800058a:	f00a fcd7 	bl	800af3c <osThreadNew>
 800058e:	4603      	mov	r3, r0
 8000590:	4a09      	ldr	r2, [pc, #36]	@ (80005b8 <main+0x104>)
 8000592:	6013      	str	r3, [r2, #0]

  /* creation of TouchGFXTask */
  TouchGFXTaskHandle = osThreadNew(TouchGFX_Task, NULL, &TouchGFXTask_attributes);
 8000594:	4a09      	ldr	r2, [pc, #36]	@ (80005bc <main+0x108>)
 8000596:	2100      	movs	r1, #0
 8000598:	4809      	ldr	r0, [pc, #36]	@ (80005c0 <main+0x10c>)
 800059a:	f00a fccf 	bl	800af3c <osThreadNew>
 800059e:	4603      	mov	r3, r0
 80005a0:	4a08      	ldr	r2, [pc, #32]	@ (80005c4 <main+0x110>)
 80005a2:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 80005a4:	f00a fca4 	bl	800aef0 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80005a8:	bf00      	nop
 80005aa:	e7fd      	b.n	80005a8 <main+0xf4>
 80005ac:	58024400 	.word	0x58024400
 80005b0:	0802ca50 	.word	0x0802ca50
 80005b4:	08000c05 	.word	0x08000c05
 80005b8:	240002fc 	.word	0x240002fc
 80005bc:	0802ca74 	.word	0x0802ca74
 80005c0:	08001817 	.word	0x08001817
 80005c4:	24000300 	.word	0x24000300

080005c8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80005c8:	b580      	push	{r7, lr}
 80005ca:	b09c      	sub	sp, #112	@ 0x70
 80005cc:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80005ce:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80005d2:	224c      	movs	r2, #76	@ 0x4c
 80005d4:	2100      	movs	r1, #0
 80005d6:	4618      	mov	r0, r3
 80005d8:	f02a fd3b 	bl	802b052 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80005dc:	1d3b      	adds	r3, r7, #4
 80005de:	2220      	movs	r2, #32
 80005e0:	2100      	movs	r1, #0
 80005e2:	4618      	mov	r0, r3
 80005e4:	f02a fd35 	bl	802b052 <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_DIRECT_SMPS_SUPPLY);
 80005e8:	2004      	movs	r0, #4
 80005ea:	f012 ff9f 	bl	801352c <HAL_PWREx_ConfigSupply>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80005ee:	2300      	movs	r3, #0
 80005f0:	603b      	str	r3, [r7, #0]
 80005f2:	4b37      	ldr	r3, [pc, #220]	@ (80006d0 <SystemClock_Config+0x108>)
 80005f4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80005f6:	4a36      	ldr	r2, [pc, #216]	@ (80006d0 <SystemClock_Config+0x108>)
 80005f8:	f023 0301 	bic.w	r3, r3, #1
 80005fc:	62d3      	str	r3, [r2, #44]	@ 0x2c
 80005fe:	4b34      	ldr	r3, [pc, #208]	@ (80006d0 <SystemClock_Config+0x108>)
 8000600:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000602:	f003 0301 	and.w	r3, r3, #1
 8000606:	603b      	str	r3, [r7, #0]
 8000608:	4b32      	ldr	r3, [pc, #200]	@ (80006d4 <SystemClock_Config+0x10c>)
 800060a:	699b      	ldr	r3, [r3, #24]
 800060c:	4a31      	ldr	r2, [pc, #196]	@ (80006d4 <SystemClock_Config+0x10c>)
 800060e:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8000612:	6193      	str	r3, [r2, #24]
 8000614:	4b2f      	ldr	r3, [pc, #188]	@ (80006d4 <SystemClock_Config+0x10c>)
 8000616:	699b      	ldr	r3, [r3, #24]
 8000618:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 800061c:	603b      	str	r3, [r7, #0]
 800061e:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 8000620:	bf00      	nop
 8000622:	4b2c      	ldr	r3, [pc, #176]	@ (80006d4 <SystemClock_Config+0x10c>)
 8000624:	699b      	ldr	r3, [r3, #24]
 8000626:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800062a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800062e:	d1f8      	bne.n	8000622 <SystemClock_Config+0x5a>

  /** Macro to configure the PLL clock source
  */
  __HAL_RCC_PLL_PLLSOURCE_CONFIG(RCC_PLLSOURCE_HSE);
 8000630:	4b29      	ldr	r3, [pc, #164]	@ (80006d8 <SystemClock_Config+0x110>)
 8000632:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8000634:	f023 0303 	bic.w	r3, r3, #3
 8000638:	4a27      	ldr	r2, [pc, #156]	@ (80006d8 <SystemClock_Config+0x110>)
 800063a:	f043 0302 	orr.w	r3, r3, #2
 800063e:	6293      	str	r3, [r2, #40]	@ 0x28

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000640:	2301      	movs	r3, #1
 8000642:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000644:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8000648:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800064a:	2302      	movs	r3, #2
 800064c:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800064e:	2302      	movs	r3, #2
 8000650:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RCC_OscInitStruct.PLL.PLLM = 5;
 8000652:	2305      	movs	r3, #5
 8000654:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLN = 144;
 8000656:	2390      	movs	r3, #144	@ 0x90
 8000658:	657b      	str	r3, [r7, #84]	@ 0x54
  RCC_OscInitStruct.PLL.PLLP = 2;
 800065a:	2302      	movs	r3, #2
 800065c:	65bb      	str	r3, [r7, #88]	@ 0x58
  RCC_OscInitStruct.PLL.PLLQ = 4;
 800065e:	2304      	movs	r3, #4
 8000660:	65fb      	str	r3, [r7, #92]	@ 0x5c
  RCC_OscInitStruct.PLL.PLLR = 4;
 8000662:	2304      	movs	r3, #4
 8000664:	663b      	str	r3, [r7, #96]	@ 0x60
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_2;
 8000666:	2308      	movs	r3, #8
 8000668:	667b      	str	r3, [r7, #100]	@ 0x64
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 800066a:	2300      	movs	r3, #0
 800066c:	66bb      	str	r3, [r7, #104]	@ 0x68
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 800066e:	2300      	movs	r3, #0
 8000670:	66fb      	str	r3, [r7, #108]	@ 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000672:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000676:	4618      	mov	r0, r3
 8000678:	f013 fe94 	bl	80143a4 <HAL_RCC_OscConfig>
 800067c:	4603      	mov	r3, r0
 800067e:	2b00      	cmp	r3, #0
 8000680:	d001      	beq.n	8000686 <SystemClock_Config+0xbe>
  {
    Error_Handler();
 8000682:	f000 fb11 	bl	8000ca8 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000686:	233f      	movs	r3, #63	@ 0x3f
 8000688:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800068a:	2303      	movs	r3, #3
 800068c:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 800068e:	2300      	movs	r3, #0
 8000690:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV2;
 8000692:	2308      	movs	r3, #8
 8000694:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV2;
 8000696:	2340      	movs	r3, #64	@ 0x40
 8000698:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 800069a:	2340      	movs	r3, #64	@ 0x40
 800069c:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 800069e:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80006a2:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV2;
 80006a4:	2340      	movs	r3, #64	@ 0x40
 80006a6:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80006a8:	1d3b      	adds	r3, r7, #4
 80006aa:	2102      	movs	r1, #2
 80006ac:	4618      	mov	r0, r3
 80006ae:	f014 fad3 	bl	8014c58 <HAL_RCC_ClockConfig>
 80006b2:	4603      	mov	r3, r0
 80006b4:	2b00      	cmp	r3, #0
 80006b6:	d001      	beq.n	80006bc <SystemClock_Config+0xf4>
  {
    Error_Handler();
 80006b8:	f000 faf6 	bl	8000ca8 <Error_Handler>
  }
  HAL_RCC_MCOConfig(RCC_MCO1, RCC_MCO1SOURCE_HSI, RCC_MCODIV_1);
 80006bc:	f44f 2280 	mov.w	r2, #262144	@ 0x40000
 80006c0:	2100      	movs	r1, #0
 80006c2:	2000      	movs	r0, #0
 80006c4:	f014 fc7e 	bl	8014fc4 <HAL_RCC_MCOConfig>
}
 80006c8:	bf00      	nop
 80006ca:	3770      	adds	r7, #112	@ 0x70
 80006cc:	46bd      	mov	sp, r7
 80006ce:	bd80      	pop	{r7, pc}
 80006d0:	58000400 	.word	0x58000400
 80006d4:	58024800 	.word	0x58024800
 80006d8:	58024400 	.word	0x58024400

080006dc <PeriphCommonClock_Config>:
/**
  * @brief Peripherals Common Clock Configuration
  * @retval None
  */
void PeriphCommonClock_Config(void)
{
 80006dc:	b580      	push	{r7, lr}
 80006de:	b0b0      	sub	sp, #192	@ 0xc0
 80006e0:	af00      	add	r7, sp, #0
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80006e2:	463b      	mov	r3, r7
 80006e4:	22c0      	movs	r2, #192	@ 0xc0
 80006e6:	2100      	movs	r1, #0
 80006e8:	4618      	mov	r0, r3
 80006ea:	f02a fcb2 	bl	802b052 <memset>

  /** Initializes the peripherals clock
  */
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 80006ee:	f44f 2200 	mov.w	r2, #524288	@ 0x80000
 80006f2:	f04f 0300 	mov.w	r3, #0
 80006f6:	e9c7 2300 	strd	r2, r3, [r7]
  PeriphClkInitStruct.PLL2.PLL2M = 5;
 80006fa:	2305      	movs	r3, #5
 80006fc:	60bb      	str	r3, [r7, #8]
  PeriphClkInitStruct.PLL2.PLL2N = 100;
 80006fe:	2364      	movs	r3, #100	@ 0x64
 8000700:	60fb      	str	r3, [r7, #12]
  PeriphClkInitStruct.PLL2.PLL2P = 10;
 8000702:	230a      	movs	r3, #10
 8000704:	613b      	str	r3, [r7, #16]
  PeriphClkInitStruct.PLL2.PLL2Q = 10;
 8000706:	230a      	movs	r3, #10
 8000708:	617b      	str	r3, [r7, #20]
  PeriphClkInitStruct.PLL2.PLL2R = 2;
 800070a:	2302      	movs	r3, #2
 800070c:	61bb      	str	r3, [r7, #24]
  PeriphClkInitStruct.PLL2.PLL2RGE = RCC_PLL2VCIRANGE_2;
 800070e:	2380      	movs	r3, #128	@ 0x80
 8000710:	61fb      	str	r3, [r7, #28]
  PeriphClkInitStruct.PLL2.PLL2VCOSEL = RCC_PLL2VCOWIDE;
 8000712:	2300      	movs	r3, #0
 8000714:	623b      	str	r3, [r7, #32]
  PeriphClkInitStruct.PLL2.PLL2FRACN = 0;
 8000716:	2300      	movs	r3, #0
 8000718:	627b      	str	r3, [r7, #36]	@ 0x24
  PeriphClkInitStruct.AdcClockSelection = RCC_ADCCLKSOURCE_PLL2;
 800071a:	2300      	movs	r3, #0
 800071c:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000720:	463b      	mov	r3, r7
 8000722:	4618      	mov	r0, r3
 8000724:	f014 fed0 	bl	80154c8 <HAL_RCCEx_PeriphCLKConfig>
 8000728:	4603      	mov	r3, r0
 800072a:	2b00      	cmp	r3, #0
 800072c:	d001      	beq.n	8000732 <PeriphCommonClock_Config+0x56>
  {
    Error_Handler();
 800072e:	f000 fabb 	bl	8000ca8 <Error_Handler>
  }
}
 8000732:	bf00      	nop
 8000734:	37c0      	adds	r7, #192	@ 0xc0
 8000736:	46bd      	mov	sp, r7
 8000738:	bd80      	pop	{r7, pc}
	...

0800073c <MX_CRC_Init>:
  * @brief CRC Initialization Function
  * @param None
  * @retval None
  */
static void MX_CRC_Init(void)
{
 800073c:	b580      	push	{r7, lr}
 800073e:	af00      	add	r7, sp, #0
  /* USER CODE END CRC_Init 0 */

  /* USER CODE BEGIN CRC_Init 1 */

  /* USER CODE END CRC_Init 1 */
  hcrc.Instance = CRC;
 8000740:	4b0d      	ldr	r3, [pc, #52]	@ (8000778 <MX_CRC_Init+0x3c>)
 8000742:	4a0e      	ldr	r2, [pc, #56]	@ (800077c <MX_CRC_Init+0x40>)
 8000744:	601a      	str	r2, [r3, #0]
  hcrc.Init.DefaultPolynomialUse = DEFAULT_POLYNOMIAL_ENABLE;
 8000746:	4b0c      	ldr	r3, [pc, #48]	@ (8000778 <MX_CRC_Init+0x3c>)
 8000748:	2200      	movs	r2, #0
 800074a:	711a      	strb	r2, [r3, #4]
  hcrc.Init.DefaultInitValueUse = DEFAULT_INIT_VALUE_ENABLE;
 800074c:	4b0a      	ldr	r3, [pc, #40]	@ (8000778 <MX_CRC_Init+0x3c>)
 800074e:	2200      	movs	r2, #0
 8000750:	715a      	strb	r2, [r3, #5]
  hcrc.Init.InputDataInversionMode = CRC_INPUTDATA_INVERSION_NONE;
 8000752:	4b09      	ldr	r3, [pc, #36]	@ (8000778 <MX_CRC_Init+0x3c>)
 8000754:	2200      	movs	r2, #0
 8000756:	615a      	str	r2, [r3, #20]
  hcrc.Init.OutputDataInversionMode = CRC_OUTPUTDATA_INVERSION_DISABLE;
 8000758:	4b07      	ldr	r3, [pc, #28]	@ (8000778 <MX_CRC_Init+0x3c>)
 800075a:	2200      	movs	r2, #0
 800075c:	619a      	str	r2, [r3, #24]
  hcrc.InputDataFormat = CRC_INPUTDATA_FORMAT_BYTES;
 800075e:	4b06      	ldr	r3, [pc, #24]	@ (8000778 <MX_CRC_Init+0x3c>)
 8000760:	2201      	movs	r2, #1
 8000762:	621a      	str	r2, [r3, #32]
  if (HAL_CRC_Init(&hcrc) != HAL_OK)
 8000764:	4804      	ldr	r0, [pc, #16]	@ (8000778 <MX_CRC_Init+0x3c>)
 8000766:	f010 fdf9 	bl	801135c <HAL_CRC_Init>
 800076a:	4603      	mov	r3, r0
 800076c:	2b00      	cmp	r3, #0
 800076e:	d001      	beq.n	8000774 <MX_CRC_Init+0x38>
  {
    Error_Handler();
 8000770:	f000 fa9a 	bl	8000ca8 <Error_Handler>
  }
  /* USER CODE BEGIN CRC_Init 2 */

  /* USER CODE END CRC_Init 2 */

}
 8000774:	bf00      	nop
 8000776:	bd80      	pop	{r7, pc}
 8000778:	24000148 	.word	0x24000148
 800077c:	58024c00 	.word	0x58024c00

08000780 <MX_DMA2D_Init>:
  * @brief DMA2D Initialization Function
  * @param None
  * @retval None
  */
static void MX_DMA2D_Init(void)
{
 8000780:	b580      	push	{r7, lr}
 8000782:	af00      	add	r7, sp, #0
  /* USER CODE END DMA2D_Init 0 */

  /* USER CODE BEGIN DMA2D_Init 1 */

  /* USER CODE END DMA2D_Init 1 */
  hdma2d.Instance = DMA2D;
 8000784:	4b0b      	ldr	r3, [pc, #44]	@ (80007b4 <MX_DMA2D_Init+0x34>)
 8000786:	4a0c      	ldr	r2, [pc, #48]	@ (80007b8 <MX_DMA2D_Init+0x38>)
 8000788:	601a      	str	r2, [r3, #0]
  hdma2d.Init.Mode = DMA2D_R2M;
 800078a:	4b0a      	ldr	r3, [pc, #40]	@ (80007b4 <MX_DMA2D_Init+0x34>)
 800078c:	f44f 3240 	mov.w	r2, #196608	@ 0x30000
 8000790:	605a      	str	r2, [r3, #4]
  hdma2d.Init.ColorMode = DMA2D_OUTPUT_RGB565;
 8000792:	4b08      	ldr	r3, [pc, #32]	@ (80007b4 <MX_DMA2D_Init+0x34>)
 8000794:	2202      	movs	r2, #2
 8000796:	609a      	str	r2, [r3, #8]
  hdma2d.Init.OutputOffset = 0;
 8000798:	4b06      	ldr	r3, [pc, #24]	@ (80007b4 <MX_DMA2D_Init+0x34>)
 800079a:	2200      	movs	r2, #0
 800079c:	60da      	str	r2, [r3, #12]
  if (HAL_DMA2D_Init(&hdma2d) != HAL_OK)
 800079e:	4805      	ldr	r0, [pc, #20]	@ (80007b4 <MX_DMA2D_Init+0x34>)
 80007a0:	f010 fece 	bl	8011540 <HAL_DMA2D_Init>
 80007a4:	4603      	mov	r3, r0
 80007a6:	2b00      	cmp	r3, #0
 80007a8:	d001      	beq.n	80007ae <MX_DMA2D_Init+0x2e>
  {
    Error_Handler();
 80007aa:	f000 fa7d 	bl	8000ca8 <Error_Handler>
  }
  /* USER CODE BEGIN DMA2D_Init 2 */

  /* USER CODE END DMA2D_Init 2 */

}
 80007ae:	bf00      	nop
 80007b0:	bd80      	pop	{r7, pc}
 80007b2:	bf00      	nop
 80007b4:	2400016c 	.word	0x2400016c
 80007b8:	52001000 	.word	0x52001000

080007bc <MX_LTDC_Init>:
  * @brief LTDC Initialization Function
  * @param None
  * @retval None
  */
static void MX_LTDC_Init(void)
{
 80007bc:	b580      	push	{r7, lr}
 80007be:	b08e      	sub	sp, #56	@ 0x38
 80007c0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN LTDC_Init 0 */
  initLtdcClocks();
 80007c2:	f000 fa77 	bl	8000cb4 <initLtdcClocks>
  /* USER CODE END LTDC_Init 0 */

  LTDC_LayerCfgTypeDef pLayerCfg = {0};
 80007c6:	1d3b      	adds	r3, r7, #4
 80007c8:	2234      	movs	r2, #52	@ 0x34
 80007ca:	2100      	movs	r1, #0
 80007cc:	4618      	mov	r0, r3
 80007ce:	f02a fc40 	bl	802b052 <memset>

  /* USER CODE BEGIN LTDC_Init 1 */

  /* USER CODE END LTDC_Init 1 */
  hltdc.Instance = LTDC;
 80007d2:	4b3a      	ldr	r3, [pc, #232]	@ (80008bc <MX_LTDC_Init+0x100>)
 80007d4:	4a3a      	ldr	r2, [pc, #232]	@ (80008c0 <MX_LTDC_Init+0x104>)
 80007d6:	601a      	str	r2, [r3, #0]
  hltdc.Init.HSPolarity = LTDC_HSPOLARITY_AL;
 80007d8:	4b38      	ldr	r3, [pc, #224]	@ (80008bc <MX_LTDC_Init+0x100>)
 80007da:	2200      	movs	r2, #0
 80007dc:	605a      	str	r2, [r3, #4]
  hltdc.Init.VSPolarity = LTDC_VSPOLARITY_AL;
 80007de:	4b37      	ldr	r3, [pc, #220]	@ (80008bc <MX_LTDC_Init+0x100>)
 80007e0:	2200      	movs	r2, #0
 80007e2:	609a      	str	r2, [r3, #8]
  hltdc.Init.DEPolarity = LTDC_DEPOLARITY_AL;
 80007e4:	4b35      	ldr	r3, [pc, #212]	@ (80008bc <MX_LTDC_Init+0x100>)
 80007e6:	2200      	movs	r2, #0
 80007e8:	60da      	str	r2, [r3, #12]
  hltdc.Init.PCPolarity = LTDC_PCPOLARITY_IPC;
 80007ea:	4b34      	ldr	r3, [pc, #208]	@ (80008bc <MX_LTDC_Init+0x100>)
 80007ec:	2200      	movs	r2, #0
 80007ee:	611a      	str	r2, [r3, #16]
  hltdc.Init.HorizontalSync = 40;
 80007f0:	4b32      	ldr	r3, [pc, #200]	@ (80008bc <MX_LTDC_Init+0x100>)
 80007f2:	2228      	movs	r2, #40	@ 0x28
 80007f4:	615a      	str	r2, [r3, #20]
  hltdc.Init.VerticalSync = 9;
 80007f6:	4b31      	ldr	r3, [pc, #196]	@ (80008bc <MX_LTDC_Init+0x100>)
 80007f8:	2209      	movs	r2, #9
 80007fa:	619a      	str	r2, [r3, #24]
  hltdc.Init.AccumulatedHBP = 53;
 80007fc:	4b2f      	ldr	r3, [pc, #188]	@ (80008bc <MX_LTDC_Init+0x100>)
 80007fe:	2235      	movs	r2, #53	@ 0x35
 8000800:	61da      	str	r2, [r3, #28]
  hltdc.Init.AccumulatedVBP = 11;
 8000802:	4b2e      	ldr	r3, [pc, #184]	@ (80008bc <MX_LTDC_Init+0x100>)
 8000804:	220b      	movs	r2, #11
 8000806:	621a      	str	r2, [r3, #32]
  hltdc.Init.AccumulatedActiveW = 533;
 8000808:	4b2c      	ldr	r3, [pc, #176]	@ (80008bc <MX_LTDC_Init+0x100>)
 800080a:	f240 2215 	movw	r2, #533	@ 0x215
 800080e:	625a      	str	r2, [r3, #36]	@ 0x24
  hltdc.Init.AccumulatedActiveH = 283;
 8000810:	4b2a      	ldr	r3, [pc, #168]	@ (80008bc <MX_LTDC_Init+0x100>)
 8000812:	f240 121b 	movw	r2, #283	@ 0x11b
 8000816:	629a      	str	r2, [r3, #40]	@ 0x28
  hltdc.Init.TotalWidth = 565;
 8000818:	4b28      	ldr	r3, [pc, #160]	@ (80008bc <MX_LTDC_Init+0x100>)
 800081a:	f240 2235 	movw	r2, #565	@ 0x235
 800081e:	62da      	str	r2, [r3, #44]	@ 0x2c
  hltdc.Init.TotalHeigh = 285;
 8000820:	4b26      	ldr	r3, [pc, #152]	@ (80008bc <MX_LTDC_Init+0x100>)
 8000822:	f240 121d 	movw	r2, #285	@ 0x11d
 8000826:	631a      	str	r2, [r3, #48]	@ 0x30
  hltdc.Init.Backcolor.Blue = 0;
 8000828:	4b24      	ldr	r3, [pc, #144]	@ (80008bc <MX_LTDC_Init+0x100>)
 800082a:	2200      	movs	r2, #0
 800082c:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  hltdc.Init.Backcolor.Green = 0;
 8000830:	4b22      	ldr	r3, [pc, #136]	@ (80008bc <MX_LTDC_Init+0x100>)
 8000832:	2200      	movs	r2, #0
 8000834:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
  hltdc.Init.Backcolor.Red = 0;
 8000838:	4b20      	ldr	r3, [pc, #128]	@ (80008bc <MX_LTDC_Init+0x100>)
 800083a:	2200      	movs	r2, #0
 800083c:	f883 2036 	strb.w	r2, [r3, #54]	@ 0x36
  if (HAL_LTDC_Init(&hltdc) != HAL_OK)
 8000840:	481e      	ldr	r0, [pc, #120]	@ (80008bc <MX_LTDC_Init+0x100>)
 8000842:	f012 f977 	bl	8012b34 <HAL_LTDC_Init>
 8000846:	4603      	mov	r3, r0
 8000848:	2b00      	cmp	r3, #0
 800084a:	d001      	beq.n	8000850 <MX_LTDC_Init+0x94>
  {
    Error_Handler();
 800084c:	f000 fa2c 	bl	8000ca8 <Error_Handler>
  }
  pLayerCfg.WindowX0 = 0;
 8000850:	2300      	movs	r3, #0
 8000852:	607b      	str	r3, [r7, #4]
  pLayerCfg.WindowX1 = 480;
 8000854:	f44f 73f0 	mov.w	r3, #480	@ 0x1e0
 8000858:	60bb      	str	r3, [r7, #8]
  pLayerCfg.WindowY0 = 0;
 800085a:	2300      	movs	r3, #0
 800085c:	60fb      	str	r3, [r7, #12]
  pLayerCfg.WindowY1 = 272;
 800085e:	f44f 7388 	mov.w	r3, #272	@ 0x110
 8000862:	613b      	str	r3, [r7, #16]
  pLayerCfg.PixelFormat = LTDC_PIXEL_FORMAT_RGB565;
 8000864:	2302      	movs	r3, #2
 8000866:	617b      	str	r3, [r7, #20]
  pLayerCfg.Alpha = 255;
 8000868:	23ff      	movs	r3, #255	@ 0xff
 800086a:	61bb      	str	r3, [r7, #24]
  pLayerCfg.Alpha0 = 0;
 800086c:	2300      	movs	r3, #0
 800086e:	61fb      	str	r3, [r7, #28]
  pLayerCfg.BlendingFactor1 = LTDC_BLENDING_FACTOR1_CA;
 8000870:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8000874:	623b      	str	r3, [r7, #32]
  pLayerCfg.BlendingFactor2 = LTDC_BLENDING_FACTOR2_CA;
 8000876:	2305      	movs	r3, #5
 8000878:	627b      	str	r3, [r7, #36]	@ 0x24
  pLayerCfg.FBStartAdress = 0xD0000000;
 800087a:	f04f 4350 	mov.w	r3, #3489660928	@ 0xd0000000
 800087e:	62bb      	str	r3, [r7, #40]	@ 0x28
  pLayerCfg.ImageWidth = 480;
 8000880:	f44f 73f0 	mov.w	r3, #480	@ 0x1e0
 8000884:	62fb      	str	r3, [r7, #44]	@ 0x2c
  pLayerCfg.ImageHeight = 272;
 8000886:	f44f 7388 	mov.w	r3, #272	@ 0x110
 800088a:	633b      	str	r3, [r7, #48]	@ 0x30
  pLayerCfg.Backcolor.Blue = 0;
 800088c:	2300      	movs	r3, #0
 800088e:	f887 3034 	strb.w	r3, [r7, #52]	@ 0x34
  pLayerCfg.Backcolor.Green = 0;
 8000892:	2300      	movs	r3, #0
 8000894:	f887 3035 	strb.w	r3, [r7, #53]	@ 0x35
  pLayerCfg.Backcolor.Red = 0;
 8000898:	2300      	movs	r3, #0
 800089a:	f887 3036 	strb.w	r3, [r7, #54]	@ 0x36
  if (HAL_LTDC_ConfigLayer(&hltdc, &pLayerCfg, 0) != HAL_OK)
 800089e:	1d3b      	adds	r3, r7, #4
 80008a0:	2200      	movs	r2, #0
 80008a2:	4619      	mov	r1, r3
 80008a4:	4805      	ldr	r0, [pc, #20]	@ (80008bc <MX_LTDC_Init+0x100>)
 80008a6:	f012 facd 	bl	8012e44 <HAL_LTDC_ConfigLayer>
 80008aa:	4603      	mov	r3, r0
 80008ac:	2b00      	cmp	r3, #0
 80008ae:	d001      	beq.n	80008b4 <MX_LTDC_Init+0xf8>
  {
    Error_Handler();
 80008b0:	f000 f9fa 	bl	8000ca8 <Error_Handler>
  }
  /* USER CODE BEGIN LTDC_Init 2 */

  /* USER CODE END LTDC_Init 2 */

}
 80008b4:	bf00      	nop
 80008b6:	3738      	adds	r7, #56	@ 0x38
 80008b8:	46bd      	mov	sp, r7
 80008ba:	bd80      	pop	{r7, pc}
 80008bc:	240001d4 	.word	0x240001d4
 80008c0:	50001000 	.word	0x50001000

080008c4 <MX_QUADSPI_Init>:
  * @brief QUADSPI Initialization Function
  * @param None
  * @retval None
  */
static void MX_QUADSPI_Init(void)
{
 80008c4:	b580      	push	{r7, lr}
 80008c6:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN QUADSPI_Init 1 */

  /* USER CODE END QUADSPI_Init 1 */
  /* QUADSPI parameter configuration*/
  hqspi.Instance = QUADSPI;
 80008c8:	4b12      	ldr	r3, [pc, #72]	@ (8000914 <MX_QUADSPI_Init+0x50>)
 80008ca:	4a13      	ldr	r2, [pc, #76]	@ (8000918 <MX_QUADSPI_Init+0x54>)
 80008cc:	601a      	str	r2, [r3, #0]
  hqspi.Init.ClockPrescaler = 1;
 80008ce:	4b11      	ldr	r3, [pc, #68]	@ (8000914 <MX_QUADSPI_Init+0x50>)
 80008d0:	2201      	movs	r2, #1
 80008d2:	605a      	str	r2, [r3, #4]
  hqspi.Init.FifoThreshold = 1;
 80008d4:	4b0f      	ldr	r3, [pc, #60]	@ (8000914 <MX_QUADSPI_Init+0x50>)
 80008d6:	2201      	movs	r2, #1
 80008d8:	609a      	str	r2, [r3, #8]
  hqspi.Init.SampleShifting = QSPI_SAMPLE_SHIFTING_HALFCYCLE;
 80008da:	4b0e      	ldr	r3, [pc, #56]	@ (8000914 <MX_QUADSPI_Init+0x50>)
 80008dc:	2210      	movs	r2, #16
 80008de:	60da      	str	r2, [r3, #12]
  hqspi.Init.FlashSize = 26;
 80008e0:	4b0c      	ldr	r3, [pc, #48]	@ (8000914 <MX_QUADSPI_Init+0x50>)
 80008e2:	221a      	movs	r2, #26
 80008e4:	611a      	str	r2, [r3, #16]
  hqspi.Init.ChipSelectHighTime = QSPI_CS_HIGH_TIME_3_CYCLE;
 80008e6:	4b0b      	ldr	r3, [pc, #44]	@ (8000914 <MX_QUADSPI_Init+0x50>)
 80008e8:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80008ec:	615a      	str	r2, [r3, #20]
  hqspi.Init.ClockMode = QSPI_CLOCK_MODE_0;
 80008ee:	4b09      	ldr	r3, [pc, #36]	@ (8000914 <MX_QUADSPI_Init+0x50>)
 80008f0:	2200      	movs	r2, #0
 80008f2:	619a      	str	r2, [r3, #24]
  hqspi.Init.DualFlash = QSPI_DUALFLASH_ENABLE;
 80008f4:	4b07      	ldr	r3, [pc, #28]	@ (8000914 <MX_QUADSPI_Init+0x50>)
 80008f6:	2240      	movs	r2, #64	@ 0x40
 80008f8:	621a      	str	r2, [r3, #32]
  if (HAL_QSPI_Init(&hqspi) != HAL_OK)
 80008fa:	4806      	ldr	r0, [pc, #24]	@ (8000914 <MX_QUADSPI_Init+0x50>)
 80008fc:	f012 fe70 	bl	80135e0 <HAL_QSPI_Init>
 8000900:	4603      	mov	r3, r0
 8000902:	2b00      	cmp	r3, #0
 8000904:	d001      	beq.n	800090a <MX_QUADSPI_Init+0x46>
  {
    Error_Handler();
 8000906:	f000 f9cf 	bl	8000ca8 <Error_Handler>
  }
  /* USER CODE BEGIN QUADSPI_Init 2 */
  initBspQuadSpi(&Error_Handler);
 800090a:	4804      	ldr	r0, [pc, #16]	@ (800091c <MX_QUADSPI_Init+0x58>)
 800090c:	f000 fa46 	bl	8000d9c <initBspQuadSpi>
  /* USER CODE END QUADSPI_Init 2 */

}
 8000910:	bf00      	nop
 8000912:	bd80      	pop	{r7, pc}
 8000914:	2400027c 	.word	0x2400027c
 8000918:	52005000 	.word	0x52005000
 800091c:	08000ca9 	.word	0x08000ca9

08000920 <MX_FMC_Init>:

// }

/* FMC initialization function */
void MX_FMC_Init(void)
{
 8000920:	b580      	push	{r7, lr}
 8000922:	b088      	sub	sp, #32
 8000924:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN FMC_Init 0 */

  /* USER CODE END FMC_Init 0 */

  FMC_SDRAM_TimingTypeDef SdramTiming = {0};
 8000926:	1d3b      	adds	r3, r7, #4
 8000928:	2200      	movs	r2, #0
 800092a:	601a      	str	r2, [r3, #0]
 800092c:	605a      	str	r2, [r3, #4]
 800092e:	609a      	str	r2, [r3, #8]
 8000930:	60da      	str	r2, [r3, #12]
 8000932:	611a      	str	r2, [r3, #16]
 8000934:	615a      	str	r2, [r3, #20]
 8000936:	619a      	str	r2, [r3, #24]

  /* USER CODE END FMC_Init 1 */

  /** Perform the SDRAM2 memory initialization sequence
  */
  hsdram2.Instance = FMC_SDRAM_DEVICE;
 8000938:	4b21      	ldr	r3, [pc, #132]	@ (80009c0 <MX_FMC_Init+0xa0>)
 800093a:	4a22      	ldr	r2, [pc, #136]	@ (80009c4 <MX_FMC_Init+0xa4>)
 800093c:	601a      	str	r2, [r3, #0]
  /* hsdram2.Init */
  hsdram2.Init.SDBank = FMC_SDRAM_BANK2;
 800093e:	4b20      	ldr	r3, [pc, #128]	@ (80009c0 <MX_FMC_Init+0xa0>)
 8000940:	2201      	movs	r2, #1
 8000942:	605a      	str	r2, [r3, #4]
  hsdram2.Init.ColumnBitsNumber = FMC_SDRAM_COLUMN_BITS_NUM_8;
 8000944:	4b1e      	ldr	r3, [pc, #120]	@ (80009c0 <MX_FMC_Init+0xa0>)
 8000946:	2200      	movs	r2, #0
 8000948:	609a      	str	r2, [r3, #8]
  hsdram2.Init.RowBitsNumber = FMC_SDRAM_ROW_BITS_NUM_12;
 800094a:	4b1d      	ldr	r3, [pc, #116]	@ (80009c0 <MX_FMC_Init+0xa0>)
 800094c:	2204      	movs	r2, #4
 800094e:	60da      	str	r2, [r3, #12]
  hsdram2.Init.MemoryDataWidth = FMC_SDRAM_MEM_BUS_WIDTH_16;
 8000950:	4b1b      	ldr	r3, [pc, #108]	@ (80009c0 <MX_FMC_Init+0xa0>)
 8000952:	2210      	movs	r2, #16
 8000954:	611a      	str	r2, [r3, #16]
  hsdram2.Init.InternalBankNumber = FMC_SDRAM_INTERN_BANKS_NUM_4;
 8000956:	4b1a      	ldr	r3, [pc, #104]	@ (80009c0 <MX_FMC_Init+0xa0>)
 8000958:	2240      	movs	r2, #64	@ 0x40
 800095a:	615a      	str	r2, [r3, #20]
  hsdram2.Init.CASLatency = FMC_SDRAM_CAS_LATENCY_2;
 800095c:	4b18      	ldr	r3, [pc, #96]	@ (80009c0 <MX_FMC_Init+0xa0>)
 800095e:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8000962:	619a      	str	r2, [r3, #24]
  hsdram2.Init.WriteProtection = FMC_SDRAM_WRITE_PROTECTION_DISABLE;
 8000964:	4b16      	ldr	r3, [pc, #88]	@ (80009c0 <MX_FMC_Init+0xa0>)
 8000966:	2200      	movs	r2, #0
 8000968:	61da      	str	r2, [r3, #28]
  hsdram2.Init.SDClockPeriod = FMC_SDRAM_CLOCK_PERIOD_2;
 800096a:	4b15      	ldr	r3, [pc, #84]	@ (80009c0 <MX_FMC_Init+0xa0>)
 800096c:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8000970:	621a      	str	r2, [r3, #32]
  hsdram2.Init.ReadBurst = FMC_SDRAM_RBURST_ENABLE;
 8000972:	4b13      	ldr	r3, [pc, #76]	@ (80009c0 <MX_FMC_Init+0xa0>)
 8000974:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8000978:	625a      	str	r2, [r3, #36]	@ 0x24
  hsdram2.Init.ReadPipeDelay = FMC_SDRAM_RPIPE_DELAY_0;
 800097a:	4b11      	ldr	r3, [pc, #68]	@ (80009c0 <MX_FMC_Init+0xa0>)
 800097c:	2200      	movs	r2, #0
 800097e:	629a      	str	r2, [r3, #40]	@ 0x28
  /* SdramTiming */
  SdramTiming.LoadToActiveDelay = 2;
 8000980:	2302      	movs	r3, #2
 8000982:	607b      	str	r3, [r7, #4]
  SdramTiming.ExitSelfRefreshDelay = 6;
 8000984:	2306      	movs	r3, #6
 8000986:	60bb      	str	r3, [r7, #8]
  SdramTiming.SelfRefreshTime = 4;
 8000988:	2304      	movs	r3, #4
 800098a:	60fb      	str	r3, [r7, #12]
  SdramTiming.RowCycleDelay = 6;
 800098c:	2306      	movs	r3, #6
 800098e:	613b      	str	r3, [r7, #16]
  SdramTiming.WriteRecoveryTime = 2;
 8000990:	2302      	movs	r3, #2
 8000992:	617b      	str	r3, [r7, #20]
  SdramTiming.RPDelay = 2;
 8000994:	2302      	movs	r3, #2
 8000996:	61bb      	str	r3, [r7, #24]
  SdramTiming.RCDDelay = 2;
 8000998:	2302      	movs	r3, #2
 800099a:	61fb      	str	r3, [r7, #28]

  if (HAL_SDRAM_Init(&hsdram2, &SdramTiming) != HAL_OK)
 800099c:	1d3b      	adds	r3, r7, #4
 800099e:	4619      	mov	r1, r3
 80009a0:	4807      	ldr	r0, [pc, #28]	@ (80009c0 <MX_FMC_Init+0xa0>)
 80009a2:	f016 f8ff 	bl	8016ba4 <HAL_SDRAM_Init>
 80009a6:	4603      	mov	r3, r0
 80009a8:	2b00      	cmp	r3, #0
 80009aa:	d001      	beq.n	80009b0 <MX_FMC_Init+0x90>
  {
    Error_Handler( );
 80009ac:	f000 f97c 	bl	8000ca8 <Error_Handler>
  }

  /* USER CODE BEGIN FMC_Init 2 */
  initBspSdRam(&Error_Handler);
 80009b0:	4805      	ldr	r0, [pc, #20]	@ (80009c8 <MX_FMC_Init+0xa8>)
 80009b2:	f000 fa14 	bl	8000dde <initBspSdRam>
  /* USER CODE END FMC_Init 2 */
}
 80009b6:	bf00      	nop
 80009b8:	3720      	adds	r7, #32
 80009ba:	46bd      	mov	sp, r7
 80009bc:	bd80      	pop	{r7, pc}
 80009be:	bf00      	nop
 80009c0:	240002c8 	.word	0x240002c8
 80009c4:	52004140 	.word	0x52004140
 80009c8:	08000ca9 	.word	0x08000ca9

080009cc <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80009cc:	b580      	push	{r7, lr}
 80009ce:	b090      	sub	sp, #64	@ 0x40
 80009d0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80009d2:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 80009d6:	2200      	movs	r2, #0
 80009d8:	601a      	str	r2, [r3, #0]
 80009da:	605a      	str	r2, [r3, #4]
 80009dc:	609a      	str	r2, [r3, #8]
 80009de:	60da      	str	r2, [r3, #12]
 80009e0:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOK_CLK_ENABLE();
 80009e2:	4b81      	ldr	r3, [pc, #516]	@ (8000be8 <MX_GPIO_Init+0x21c>)
 80009e4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80009e8:	4a7f      	ldr	r2, [pc, #508]	@ (8000be8 <MX_GPIO_Init+0x21c>)
 80009ea:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80009ee:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80009f2:	4b7d      	ldr	r3, [pc, #500]	@ (8000be8 <MX_GPIO_Init+0x21c>)
 80009f4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80009f8:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80009fc:	62bb      	str	r3, [r7, #40]	@ 0x28
 80009fe:	6abb      	ldr	r3, [r7, #40]	@ 0x28
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8000a00:	4b79      	ldr	r3, [pc, #484]	@ (8000be8 <MX_GPIO_Init+0x21c>)
 8000a02:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000a06:	4a78      	ldr	r2, [pc, #480]	@ (8000be8 <MX_GPIO_Init+0x21c>)
 8000a08:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8000a0c:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000a10:	4b75      	ldr	r3, [pc, #468]	@ (8000be8 <MX_GPIO_Init+0x21c>)
 8000a12:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000a16:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8000a1a:	627b      	str	r3, [r7, #36]	@ 0x24
 8000a1c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
  __HAL_RCC_GPIOI_CLK_ENABLE();
 8000a1e:	4b72      	ldr	r3, [pc, #456]	@ (8000be8 <MX_GPIO_Init+0x21c>)
 8000a20:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000a24:	4a70      	ldr	r2, [pc, #448]	@ (8000be8 <MX_GPIO_Init+0x21c>)
 8000a26:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8000a2a:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000a2e:	4b6e      	ldr	r3, [pc, #440]	@ (8000be8 <MX_GPIO_Init+0x21c>)
 8000a30:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000a34:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8000a38:	623b      	str	r3, [r7, #32]
 8000a3a:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000a3c:	4b6a      	ldr	r3, [pc, #424]	@ (8000be8 <MX_GPIO_Init+0x21c>)
 8000a3e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000a42:	4a69      	ldr	r2, [pc, #420]	@ (8000be8 <MX_GPIO_Init+0x21c>)
 8000a44:	f043 0310 	orr.w	r3, r3, #16
 8000a48:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000a4c:	4b66      	ldr	r3, [pc, #408]	@ (8000be8 <MX_GPIO_Init+0x21c>)
 8000a4e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000a52:	f003 0310 	and.w	r3, r3, #16
 8000a56:	61fb      	str	r3, [r7, #28]
 8000a58:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOJ_CLK_ENABLE();
 8000a5a:	4b63      	ldr	r3, [pc, #396]	@ (8000be8 <MX_GPIO_Init+0x21c>)
 8000a5c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000a60:	4a61      	ldr	r2, [pc, #388]	@ (8000be8 <MX_GPIO_Init+0x21c>)
 8000a62:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8000a66:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000a6a:	4b5f      	ldr	r3, [pc, #380]	@ (8000be8 <MX_GPIO_Init+0x21c>)
 8000a6c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000a70:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8000a74:	61bb      	str	r3, [r7, #24]
 8000a76:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000a78:	4b5b      	ldr	r3, [pc, #364]	@ (8000be8 <MX_GPIO_Init+0x21c>)
 8000a7a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000a7e:	4a5a      	ldr	r2, [pc, #360]	@ (8000be8 <MX_GPIO_Init+0x21c>)
 8000a80:	f043 0308 	orr.w	r3, r3, #8
 8000a84:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000a88:	4b57      	ldr	r3, [pc, #348]	@ (8000be8 <MX_GPIO_Init+0x21c>)
 8000a8a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000a8e:	f003 0308 	and.w	r3, r3, #8
 8000a92:	617b      	str	r3, [r7, #20]
 8000a94:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000a96:	4b54      	ldr	r3, [pc, #336]	@ (8000be8 <MX_GPIO_Init+0x21c>)
 8000a98:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000a9c:	4a52      	ldr	r2, [pc, #328]	@ (8000be8 <MX_GPIO_Init+0x21c>)
 8000a9e:	f043 0304 	orr.w	r3, r3, #4
 8000aa2:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000aa6:	4b50      	ldr	r3, [pc, #320]	@ (8000be8 <MX_GPIO_Init+0x21c>)
 8000aa8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000aac:	f003 0304 	and.w	r3, r3, #4
 8000ab0:	613b      	str	r3, [r7, #16]
 8000ab2:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000ab4:	4b4c      	ldr	r3, [pc, #304]	@ (8000be8 <MX_GPIO_Init+0x21c>)
 8000ab6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000aba:	4a4b      	ldr	r2, [pc, #300]	@ (8000be8 <MX_GPIO_Init+0x21c>)
 8000abc:	f043 0301 	orr.w	r3, r3, #1
 8000ac0:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000ac4:	4b48      	ldr	r3, [pc, #288]	@ (8000be8 <MX_GPIO_Init+0x21c>)
 8000ac6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000aca:	f003 0301 	and.w	r3, r3, #1
 8000ace:	60fb      	str	r3, [r7, #12]
 8000ad0:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000ad2:	4b45      	ldr	r3, [pc, #276]	@ (8000be8 <MX_GPIO_Init+0x21c>)
 8000ad4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000ad8:	4a43      	ldr	r2, [pc, #268]	@ (8000be8 <MX_GPIO_Init+0x21c>)
 8000ada:	f043 0320 	orr.w	r3, r3, #32
 8000ade:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000ae2:	4b41      	ldr	r3, [pc, #260]	@ (8000be8 <MX_GPIO_Init+0x21c>)
 8000ae4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000ae8:	f003 0320 	and.w	r3, r3, #32
 8000aec:	60bb      	str	r3, [r7, #8]
 8000aee:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000af0:	4b3d      	ldr	r3, [pc, #244]	@ (8000be8 <MX_GPIO_Init+0x21c>)
 8000af2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000af6:	4a3c      	ldr	r2, [pc, #240]	@ (8000be8 <MX_GPIO_Init+0x21c>)
 8000af8:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000afc:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000b00:	4b39      	ldr	r3, [pc, #228]	@ (8000be8 <MX_GPIO_Init+0x21c>)
 8000b02:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000b06:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8000b0a:	607b      	str	r3, [r7, #4]
 8000b0c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000b0e:	4b36      	ldr	r3, [pc, #216]	@ (8000be8 <MX_GPIO_Init+0x21c>)
 8000b10:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000b14:	4a34      	ldr	r2, [pc, #208]	@ (8000be8 <MX_GPIO_Init+0x21c>)
 8000b16:	f043 0302 	orr.w	r3, r3, #2
 8000b1a:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000b1e:	4b32      	ldr	r3, [pc, #200]	@ (8000be8 <MX_GPIO_Init+0x21c>)
 8000b20:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000b24:	f003 0302 	and.w	r3, r3, #2
 8000b28:	603b      	str	r3, [r7, #0]
 8000b2a:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(D3_ImprGnD_GPIO_Port, D3_ImprGnD_Pin, GPIO_PIN_RESET);
 8000b2c:	2200      	movs	r2, #0
 8000b2e:	2140      	movs	r1, #64	@ 0x40
 8000b30:	482e      	ldr	r0, [pc, #184]	@ (8000bec <MX_GPIO_Init+0x220>)
 8000b32:	f011 f94b 	bl	8011dcc <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PI3 */
  GPIO_InitStruct.Pin = GPIO_PIN_3;
 8000b36:	2308      	movs	r3, #8
 8000b38:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000b3a:	2300      	movs	r3, #0
 8000b3c:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b3e:	2300      	movs	r3, #0
 8000b40:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 8000b42:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8000b46:	4619      	mov	r1, r3
 8000b48:	4829      	ldr	r0, [pc, #164]	@ (8000bf0 <MX_GPIO_Init+0x224>)
 8000b4a:	f010 fe6d 	bl	8011828 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA8 */
  GPIO_InitStruct.Pin = GPIO_PIN_8;
 8000b4e:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8000b52:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b54:	2302      	movs	r3, #2
 8000b56:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b58:	2300      	movs	r3, #0
 8000b5a:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b5c:	2300      	movs	r3, #0
 8000b5e:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF0_MCO;
 8000b60:	2300      	movs	r3, #0
 8000b62:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000b64:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8000b68:	4619      	mov	r1, r3
 8000b6a:	4820      	ldr	r0, [pc, #128]	@ (8000bec <MX_GPIO_Init+0x220>)
 8000b6c:	f010 fe5c 	bl	8011828 <HAL_GPIO_Init>

  /*Configure GPIO pin : D2_SWToggle_Pin */
  GPIO_InitStruct.Pin = D2_SWToggle_Pin;
 8000b70:	2308      	movs	r3, #8
 8000b72:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000b74:	2300      	movs	r3, #0
 8000b76:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000b78:	2301      	movs	r3, #1
 8000b7a:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(D2_SWToggle_GPIO_Port, &GPIO_InitStruct);
 8000b7c:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8000b80:	4619      	mov	r1, r3
 8000b82:	481c      	ldr	r0, [pc, #112]	@ (8000bf4 <MX_GPIO_Init+0x228>)
 8000b84:	f010 fe50 	bl	8011828 <HAL_GPIO_Init>

  /*Configure GPIO pin : D4_MoButton_Pin */
  GPIO_InitStruct.Pin = D4_MoButton_Pin;
 8000b88:	2302      	movs	r3, #2
 8000b8a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000b8c:	2300      	movs	r3, #0
 8000b8e:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000b90:	2301      	movs	r3, #1
 8000b92:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(D4_MoButton_GPIO_Port, &GPIO_InitStruct);
 8000b94:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8000b98:	4619      	mov	r1, r3
 8000b9a:	4817      	ldr	r0, [pc, #92]	@ (8000bf8 <MX_GPIO_Init+0x22c>)
 8000b9c:	f010 fe44 	bl	8011828 <HAL_GPIO_Init>

  /*Configure GPIO pin : D3_ImprGnD_Pin */
  GPIO_InitStruct.Pin = D3_ImprGnD_Pin;
 8000ba0:	2340      	movs	r3, #64	@ 0x40
 8000ba2:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000ba4:	2301      	movs	r3, #1
 8000ba6:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ba8:	2300      	movs	r3, #0
 8000baa:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000bac:	2300      	movs	r3, #0
 8000bae:	63bb      	str	r3, [r7, #56]	@ 0x38
  HAL_GPIO_Init(D3_ImprGnD_GPIO_Port, &GPIO_InitStruct);
 8000bb0:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8000bb4:	4619      	mov	r1, r3
 8000bb6:	480d      	ldr	r0, [pc, #52]	@ (8000bec <MX_GPIO_Init+0x220>)
 8000bb8:	f010 fe36 	bl	8011828 <HAL_GPIO_Init>

  // PE3, used for alarm LEDs
  // Use hal to set things
  GPIO_InitStruct.Pin = GPIO_PIN_3;
 8000bbc:	2308      	movs	r3, #8
 8000bbe:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000bc0:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8000bc4:	4619      	mov	r1, r3
 8000bc6:	480d      	ldr	r0, [pc, #52]	@ (8000bfc <MX_GPIO_Init+0x230>)
 8000bc8:	f010 fe2e 	bl	8011828 <HAL_GPIO_Init>

  // PH15, also used for alarm LEDs
  GPIO_InitStruct.Pin = GPIO_PIN_15;
 8000bcc:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8000bd0:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8000bd2:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8000bd6:	4619      	mov	r1, r3
 8000bd8:	4809      	ldr	r0, [pc, #36]	@ (8000c00 <MX_GPIO_Init+0x234>)
 8000bda:	f010 fe25 	bl	8011828 <HAL_GPIO_Init>
}
 8000bde:	bf00      	nop
 8000be0:	3740      	adds	r7, #64	@ 0x40
 8000be2:	46bd      	mov	sp, r7
 8000be4:	bd80      	pop	{r7, pc}
 8000be6:	bf00      	nop
 8000be8:	58024400 	.word	0x58024400
 8000bec:	58020000 	.word	0x58020000
 8000bf0:	58022000 	.word	0x58022000
 8000bf4:	58021800 	.word	0x58021800
 8000bf8:	58022800 	.word	0x58022800
 8000bfc:	58021000 	.word	0x58021000
 8000c00:	58021c00 	.word	0x58021c00

08000c04 <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void *argument)
{
 8000c04:	b580      	push	{r7, lr}
 8000c06:	b082      	sub	sp, #8
 8000c08:	af00      	add	r7, sp, #0
 8000c0a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 8000c0c:	2001      	movs	r0, #1
 8000c0e:	f00a fa27 	bl	800b060 <osDelay>
 8000c12:	e7fb      	b.n	8000c0c <StartDefaultTask+0x8>

08000c14 <MPU_Config>:
}

/* MPU Configuration */

void MPU_Config(void)
{
 8000c14:	b580      	push	{r7, lr}
 8000c16:	b084      	sub	sp, #16
 8000c18:	af00      	add	r7, sp, #0
  MPU_Region_InitTypeDef MPU_InitStruct = {0};
 8000c1a:	463b      	mov	r3, r7
 8000c1c:	2200      	movs	r2, #0
 8000c1e:	601a      	str	r2, [r3, #0]
 8000c20:	605a      	str	r2, [r3, #4]
 8000c22:	609a      	str	r2, [r3, #8]
 8000c24:	60da      	str	r2, [r3, #12]

  /* Disables the MPU */
  HAL_MPU_Disable();
 8000c26:	f010 fb1d 	bl	8011264 <HAL_MPU_Disable>

  /** Initializes and configures the Region and the memory to be protected
  */
  MPU_InitStruct.Enable = MPU_REGION_ENABLE;
 8000c2a:	2301      	movs	r3, #1
 8000c2c:	703b      	strb	r3, [r7, #0]
  MPU_InitStruct.Number = MPU_REGION_NUMBER0;
 8000c2e:	2300      	movs	r3, #0
 8000c30:	707b      	strb	r3, [r7, #1]
  MPU_InitStruct.BaseAddress = 0xD0000000;
 8000c32:	f04f 4350 	mov.w	r3, #3489660928	@ 0xd0000000
 8000c36:	607b      	str	r3, [r7, #4]
  MPU_InitStruct.Size = MPU_REGION_SIZE_1MB;
 8000c38:	2313      	movs	r3, #19
 8000c3a:	723b      	strb	r3, [r7, #8]
  MPU_InitStruct.SubRegionDisable = 0x0;
 8000c3c:	2300      	movs	r3, #0
 8000c3e:	727b      	strb	r3, [r7, #9]
  MPU_InitStruct.TypeExtField = MPU_TEX_LEVEL0;
 8000c40:	2300      	movs	r3, #0
 8000c42:	72bb      	strb	r3, [r7, #10]
  MPU_InitStruct.AccessPermission = MPU_REGION_FULL_ACCESS;
 8000c44:	2303      	movs	r3, #3
 8000c46:	72fb      	strb	r3, [r7, #11]
  MPU_InitStruct.DisableExec = MPU_INSTRUCTION_ACCESS_DISABLE;
 8000c48:	2301      	movs	r3, #1
 8000c4a:	733b      	strb	r3, [r7, #12]
  MPU_InitStruct.IsShareable = MPU_ACCESS_NOT_SHAREABLE;
 8000c4c:	2300      	movs	r3, #0
 8000c4e:	737b      	strb	r3, [r7, #13]
  MPU_InitStruct.IsCacheable = MPU_ACCESS_CACHEABLE;
 8000c50:	2301      	movs	r3, #1
 8000c52:	73bb      	strb	r3, [r7, #14]
  MPU_InitStruct.IsBufferable = MPU_ACCESS_BUFFERABLE;
 8000c54:	2301      	movs	r3, #1
 8000c56:	73fb      	strb	r3, [r7, #15]

  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 8000c58:	463b      	mov	r3, r7
 8000c5a:	4618      	mov	r0, r3
 8000c5c:	f010 fb3a 	bl	80112d4 <HAL_MPU_ConfigRegion>

  /** Initializes and configures the Region and the memory to be protected
  */
  MPU_InitStruct.Number = MPU_REGION_NUMBER1;
 8000c60:	2301      	movs	r3, #1
 8000c62:	707b      	strb	r3, [r7, #1]
  MPU_InitStruct.BaseAddress = 0x90000000;
 8000c64:	f04f 4310 	mov.w	r3, #2415919104	@ 0x90000000
 8000c68:	607b      	str	r3, [r7, #4]
  MPU_InitStruct.Size = MPU_REGION_SIZE_128MB;
 8000c6a:	231a      	movs	r3, #26
 8000c6c:	723b      	strb	r3, [r7, #8]

  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 8000c6e:	463b      	mov	r3, r7
 8000c70:	4618      	mov	r0, r3
 8000c72:	f010 fb2f 	bl	80112d4 <HAL_MPU_ConfigRegion>
  /* Enables the MPU */
  HAL_MPU_Enable(MPU_PRIVILEGED_DEFAULT);
 8000c76:	2004      	movs	r0, #4
 8000c78:	f010 fb0c 	bl	8011294 <HAL_MPU_Enable>

}
 8000c7c:	bf00      	nop
 8000c7e:	3710      	adds	r7, #16
 8000c80:	46bd      	mov	sp, r7
 8000c82:	bd80      	pop	{r7, pc}

08000c84 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000c84:	b580      	push	{r7, lr}
 8000c86:	b082      	sub	sp, #8
 8000c88:	af00      	add	r7, sp, #0
 8000c8a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 8000c8c:	687b      	ldr	r3, [r7, #4]
 8000c8e:	681b      	ldr	r3, [r3, #0]
 8000c90:	4a04      	ldr	r2, [pc, #16]	@ (8000ca4 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8000c92:	4293      	cmp	r3, r2
 8000c94:	d101      	bne.n	8000c9a <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8000c96:	f010 f9a7 	bl	8010fe8 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8000c9a:	bf00      	nop
 8000c9c:	3708      	adds	r7, #8
 8000c9e:	46bd      	mov	sp, r7
 8000ca0:	bd80      	pop	{r7, pc}
 8000ca2:	bf00      	nop
 8000ca4:	40001000 	.word	0x40001000

08000ca8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000ca8:	b480      	push	{r7}
 8000caa:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000cac:	b672      	cpsid	i
}
 8000cae:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000cb0:	bf00      	nop
 8000cb2:	e7fd      	b.n	8000cb0 <Error_Handler+0x8>

08000cb4 <initLtdcClocks>:

/**
 * @brief initLtdcClocks initialize LTDC clocks
 */
void initLtdcClocks(void)
{
 8000cb4:	b580      	push	{r7, lr}
 8000cb6:	b08c      	sub	sp, #48	@ 0x30
 8000cb8:	af00      	add	r7, sp, #0
   // enable the LTDC and DMA2D clocks
   __HAL_RCC_LTDC_CLK_ENABLE();
 8000cba:	4b36      	ldr	r3, [pc, #216]	@ (8000d94 <initLtdcClocks+0xe0>)
 8000cbc:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8000cc0:	4a34      	ldr	r2, [pc, #208]	@ (8000d94 <initLtdcClocks+0xe0>)
 8000cc2:	f043 0308 	orr.w	r3, r3, #8
 8000cc6:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
 8000cca:	4b32      	ldr	r3, [pc, #200]	@ (8000d94 <initLtdcClocks+0xe0>)
 8000ccc:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8000cd0:	f003 0308 	and.w	r3, r3, #8
 8000cd4:	61bb      	str	r3, [r7, #24]
 8000cd6:	69bb      	ldr	r3, [r7, #24]

   // enable GPIOs clock
   __HAL_RCC_GPIOI_CLK_ENABLE();
 8000cd8:	4b2e      	ldr	r3, [pc, #184]	@ (8000d94 <initLtdcClocks+0xe0>)
 8000cda:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000cde:	4a2d      	ldr	r2, [pc, #180]	@ (8000d94 <initLtdcClocks+0xe0>)
 8000ce0:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8000ce4:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000ce8:	4b2a      	ldr	r3, [pc, #168]	@ (8000d94 <initLtdcClocks+0xe0>)
 8000cea:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000cee:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8000cf2:	617b      	str	r3, [r7, #20]
 8000cf4:	697b      	ldr	r3, [r7, #20]
   __HAL_RCC_GPIOJ_CLK_ENABLE();
 8000cf6:	4b27      	ldr	r3, [pc, #156]	@ (8000d94 <initLtdcClocks+0xe0>)
 8000cf8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000cfc:	4a25      	ldr	r2, [pc, #148]	@ (8000d94 <initLtdcClocks+0xe0>)
 8000cfe:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8000d02:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000d06:	4b23      	ldr	r3, [pc, #140]	@ (8000d94 <initLtdcClocks+0xe0>)
 8000d08:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000d0c:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8000d10:	613b      	str	r3, [r7, #16]
 8000d12:	693b      	ldr	r3, [r7, #16]
   __HAL_RCC_GPIOK_CLK_ENABLE();
 8000d14:	4b1f      	ldr	r3, [pc, #124]	@ (8000d94 <initLtdcClocks+0xe0>)
 8000d16:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000d1a:	4a1e      	ldr	r2, [pc, #120]	@ (8000d94 <initLtdcClocks+0xe0>)
 8000d1c:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8000d20:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000d24:	4b1b      	ldr	r3, [pc, #108]	@ (8000d94 <initLtdcClocks+0xe0>)
 8000d26:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000d2a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8000d2e:	60fb      	str	r3, [r7, #12]
 8000d30:	68fb      	ldr	r3, [r7, #12]
   __HAL_RCC_GPIOH_CLK_ENABLE();
 8000d32:	4b18      	ldr	r3, [pc, #96]	@ (8000d94 <initLtdcClocks+0xe0>)
 8000d34:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000d38:	4a16      	ldr	r2, [pc, #88]	@ (8000d94 <initLtdcClocks+0xe0>)
 8000d3a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000d3e:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000d42:	4b14      	ldr	r3, [pc, #80]	@ (8000d94 <initLtdcClocks+0xe0>)
 8000d44:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000d48:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8000d4c:	60bb      	str	r3, [r7, #8]
 8000d4e:	68bb      	ldr	r3, [r7, #8]
   __HAL_RCC_GPIOD_CLK_ENABLE();
 8000d50:	4b10      	ldr	r3, [pc, #64]	@ (8000d94 <initLtdcClocks+0xe0>)
 8000d52:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000d56:	4a0f      	ldr	r2, [pc, #60]	@ (8000d94 <initLtdcClocks+0xe0>)
 8000d58:	f043 0308 	orr.w	r3, r3, #8
 8000d5c:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000d60:	4b0c      	ldr	r3, [pc, #48]	@ (8000d94 <initLtdcClocks+0xe0>)
 8000d62:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000d66:	f003 0308 	and.w	r3, r3, #8
 8000d6a:	607b      	str	r3, [r7, #4]
 8000d6c:	687b      	ldr	r3, [r7, #4]

   // LCD_DISP pin has to be manually controlled
   GPIO_InitTypeDef gpio_init_structure;
   gpio_init_structure.Pin = GPIO_PIN_7;
 8000d6e:	2380      	movs	r3, #128	@ 0x80
 8000d70:	61fb      	str	r3, [r7, #28]
   gpio_init_structure.Mode = GPIO_MODE_OUTPUT_PP;
 8000d72:	2301      	movs	r3, #1
 8000d74:	623b      	str	r3, [r7, #32]
   HAL_GPIO_Init(GPIOD, &gpio_init_structure);
 8000d76:	f107 031c 	add.w	r3, r7, #28
 8000d7a:	4619      	mov	r1, r3
 8000d7c:	4806      	ldr	r0, [pc, #24]	@ (8000d98 <initLtdcClocks+0xe4>)
 8000d7e:	f010 fd53 	bl	8011828 <HAL_GPIO_Init>

   // assert display enable LCD_DISP pin
   HAL_GPIO_WritePin(GPIOD, GPIO_PIN_7, GPIO_PIN_SET);
 8000d82:	2201      	movs	r2, #1
 8000d84:	2180      	movs	r1, #128	@ 0x80
 8000d86:	4804      	ldr	r0, [pc, #16]	@ (8000d98 <initLtdcClocks+0xe4>)
 8000d88:	f011 f820 	bl	8011dcc <HAL_GPIO_WritePin>
}
 8000d8c:	bf00      	nop
 8000d8e:	3730      	adds	r7, #48	@ 0x30
 8000d90:	46bd      	mov	sp, r7
 8000d92:	bd80      	pop	{r7, pc}
 8000d94:	58024400 	.word	0x58024400
 8000d98:	58020c00 	.word	0x58020c00

08000d9c <initBspQuadSpi>:
/**
 * @brief initBspQuadSpi initialize QSPI via BSP
 * @param error_handler callback to error handler
 */
void initBspQuadSpi(void (*error_handler)())
{
 8000d9c:	b580      	push	{r7, lr}
 8000d9e:	b084      	sub	sp, #16
 8000da0:	af00      	add	r7, sp, #0
 8000da2:	6078      	str	r0, [r7, #4]
   BSP_QSPI_Init_t init;

   init.InterfaceMode = MT25TL01G_QPI_MODE;
 8000da4:	2303      	movs	r3, #3
 8000da6:	733b      	strb	r3, [r7, #12]
   init.TransferRate = MT25TL01G_DTR_TRANSFER;
 8000da8:	2301      	movs	r3, #1
 8000daa:	737b      	strb	r3, [r7, #13]
   init.DualFlashMode = MT25TL01G_DUALFLASH_ENABLE;
 8000dac:	2340      	movs	r3, #64	@ 0x40
 8000dae:	73bb      	strb	r3, [r7, #14]

   if (BSP_QSPI_Init(0, &init) != BSP_ERROR_NONE)
 8000db0:	f107 030c 	add.w	r3, r7, #12
 8000db4:	4619      	mov	r1, r3
 8000db6:	2000      	movs	r0, #0
 8000db8:	f00f f894 	bl	800fee4 <BSP_QSPI_Init>
 8000dbc:	4603      	mov	r3, r0
 8000dbe:	2b00      	cmp	r3, #0
 8000dc0:	d001      	beq.n	8000dc6 <initBspQuadSpi+0x2a>
   {
      error_handler();
 8000dc2:	687b      	ldr	r3, [r7, #4]
 8000dc4:	4798      	blx	r3
   }

   if (BSP_QSPI_EnableMemoryMappedMode(0) != BSP_ERROR_NONE)
 8000dc6:	2000      	movs	r0, #0
 8000dc8:	f00f f966 	bl	8010098 <BSP_QSPI_EnableMemoryMappedMode>
 8000dcc:	4603      	mov	r3, r0
 8000dce:	2b00      	cmp	r3, #0
 8000dd0:	d001      	beq.n	8000dd6 <initBspQuadSpi+0x3a>
   {
      error_handler();
 8000dd2:	687b      	ldr	r3, [r7, #4]
 8000dd4:	4798      	blx	r3
   }
}
 8000dd6:	bf00      	nop
 8000dd8:	3710      	adds	r7, #16
 8000dda:	46bd      	mov	sp, r7
 8000ddc:	bd80      	pop	{r7, pc}

08000dde <initBspSdRam>:
/**
 * @brief initBspSdRam initialize SDRAM/FMC via BSP
 * @param error_handler callback to error handler
 */
void initBspSdRam(void (*error_handler)())
{
 8000dde:	b580      	push	{r7, lr}
 8000de0:	b082      	sub	sp, #8
 8000de2:	af00      	add	r7, sp, #0
 8000de4:	6078      	str	r0, [r7, #4]
   BSP_SDRAM_DeInit(0);
 8000de6:	2000      	movs	r0, #0
 8000de8:	f00f fcc4 	bl	8010774 <BSP_SDRAM_DeInit>

   if (BSP_SDRAM_Init(0) != BSP_ERROR_NONE)
 8000dec:	2000      	movs	r0, #0
 8000dee:	f00f fc65 	bl	80106bc <BSP_SDRAM_Init>
 8000df2:	4603      	mov	r3, r0
 8000df4:	2b00      	cmp	r3, #0
 8000df6:	d001      	beq.n	8000dfc <initBspSdRam+0x1e>
   {
      error_handler();
 8000df8:	687b      	ldr	r3, [r7, #4]
 8000dfa:	4798      	blx	r3
   }
}
 8000dfc:	bf00      	nop
 8000dfe:	3708      	adds	r7, #8
 8000e00:	46bd      	mov	sp, r7
 8000e02:	bd80      	pop	{r7, pc}

08000e04 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000e04:	b580      	push	{r7, lr}
 8000e06:	b082      	sub	sp, #8
 8000e08:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000e0a:	4b0c      	ldr	r3, [pc, #48]	@ (8000e3c <HAL_MspInit+0x38>)
 8000e0c:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8000e10:	4a0a      	ldr	r2, [pc, #40]	@ (8000e3c <HAL_MspInit+0x38>)
 8000e12:	f043 0302 	orr.w	r3, r3, #2
 8000e16:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 8000e1a:	4b08      	ldr	r3, [pc, #32]	@ (8000e3c <HAL_MspInit+0x38>)
 8000e1c:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8000e20:	f003 0302 	and.w	r3, r3, #2
 8000e24:	607b      	str	r3, [r7, #4]
 8000e26:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8000e28:	2200      	movs	r2, #0
 8000e2a:	210f      	movs	r1, #15
 8000e2c:	f06f 0001 	mvn.w	r0, #1
 8000e30:	f010 f9e2 	bl	80111f8 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000e34:	bf00      	nop
 8000e36:	3708      	adds	r7, #8
 8000e38:	46bd      	mov	sp, r7
 8000e3a:	bd80      	pop	{r7, pc}
 8000e3c:	58024400 	.word	0x58024400

08000e40 <HAL_CRC_MspInit>:
* This function configures the hardware resources used in this example
* @param hcrc: CRC handle pointer
* @retval None
*/
void HAL_CRC_MspInit(CRC_HandleTypeDef* hcrc)
{
 8000e40:	b480      	push	{r7}
 8000e42:	b085      	sub	sp, #20
 8000e44:	af00      	add	r7, sp, #0
 8000e46:	6078      	str	r0, [r7, #4]
  if(hcrc->Instance==CRC)
 8000e48:	687b      	ldr	r3, [r7, #4]
 8000e4a:	681b      	ldr	r3, [r3, #0]
 8000e4c:	4a0b      	ldr	r2, [pc, #44]	@ (8000e7c <HAL_CRC_MspInit+0x3c>)
 8000e4e:	4293      	cmp	r3, r2
 8000e50:	d10e      	bne.n	8000e70 <HAL_CRC_MspInit+0x30>
  {
  /* USER CODE BEGIN CRC_MspInit 0 */

  /* USER CODE END CRC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CRC_CLK_ENABLE();
 8000e52:	4b0b      	ldr	r3, [pc, #44]	@ (8000e80 <HAL_CRC_MspInit+0x40>)
 8000e54:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000e58:	4a09      	ldr	r2, [pc, #36]	@ (8000e80 <HAL_CRC_MspInit+0x40>)
 8000e5a:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8000e5e:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000e62:	4b07      	ldr	r3, [pc, #28]	@ (8000e80 <HAL_CRC_MspInit+0x40>)
 8000e64:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000e68:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8000e6c:	60fb      	str	r3, [r7, #12]
 8000e6e:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN CRC_MspInit 1 */

  /* USER CODE END CRC_MspInit 1 */
  }

}
 8000e70:	bf00      	nop
 8000e72:	3714      	adds	r7, #20
 8000e74:	46bd      	mov	sp, r7
 8000e76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e7a:	4770      	bx	lr
 8000e7c:	58024c00 	.word	0x58024c00
 8000e80:	58024400 	.word	0x58024400

08000e84 <HAL_DMA2D_MspInit>:
* This function configures the hardware resources used in this example
* @param hdma2d: DMA2D handle pointer
* @retval None
*/
void HAL_DMA2D_MspInit(DMA2D_HandleTypeDef* hdma2d)
{
 8000e84:	b580      	push	{r7, lr}
 8000e86:	b084      	sub	sp, #16
 8000e88:	af00      	add	r7, sp, #0
 8000e8a:	6078      	str	r0, [r7, #4]
  if(hdma2d->Instance==DMA2D)
 8000e8c:	687b      	ldr	r3, [r7, #4]
 8000e8e:	681b      	ldr	r3, [r3, #0]
 8000e90:	4a0e      	ldr	r2, [pc, #56]	@ (8000ecc <HAL_DMA2D_MspInit+0x48>)
 8000e92:	4293      	cmp	r3, r2
 8000e94:	d116      	bne.n	8000ec4 <HAL_DMA2D_MspInit+0x40>
  {
  /* USER CODE BEGIN DMA2D_MspInit 0 */

  /* USER CODE END DMA2D_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DMA2D_CLK_ENABLE();
 8000e96:	4b0e      	ldr	r3, [pc, #56]	@ (8000ed0 <HAL_DMA2D_MspInit+0x4c>)
 8000e98:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 8000e9c:	4a0c      	ldr	r2, [pc, #48]	@ (8000ed0 <HAL_DMA2D_MspInit+0x4c>)
 8000e9e:	f043 0310 	orr.w	r3, r3, #16
 8000ea2:	f8c2 30d4 	str.w	r3, [r2, #212]	@ 0xd4
 8000ea6:	4b0a      	ldr	r3, [pc, #40]	@ (8000ed0 <HAL_DMA2D_MspInit+0x4c>)
 8000ea8:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 8000eac:	f003 0310 	and.w	r3, r3, #16
 8000eb0:	60fb      	str	r3, [r7, #12]
 8000eb2:	68fb      	ldr	r3, [r7, #12]
    /* DMA2D interrupt Init */
    HAL_NVIC_SetPriority(DMA2D_IRQn, 5, 0);
 8000eb4:	2200      	movs	r2, #0
 8000eb6:	2105      	movs	r1, #5
 8000eb8:	205a      	movs	r0, #90	@ 0x5a
 8000eba:	f010 f99d 	bl	80111f8 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(DMA2D_IRQn);
 8000ebe:	205a      	movs	r0, #90	@ 0x5a
 8000ec0:	f010 f9b4 	bl	801122c <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN DMA2D_MspInit 1 */

  /* USER CODE END DMA2D_MspInit 1 */
  }

}
 8000ec4:	bf00      	nop
 8000ec6:	3710      	adds	r7, #16
 8000ec8:	46bd      	mov	sp, r7
 8000eca:	bd80      	pop	{r7, pc}
 8000ecc:	52001000 	.word	0x52001000
 8000ed0:	58024400 	.word	0x58024400

08000ed4 <HAL_LTDC_MspInit>:
* This function configures the hardware resources used in this example
* @param hltdc: LTDC handle pointer
* @retval None
*/
void HAL_LTDC_MspInit(LTDC_HandleTypeDef* hltdc)
{
 8000ed4:	b580      	push	{r7, lr}
 8000ed6:	b0be      	sub	sp, #248	@ 0xf8
 8000ed8:	af00      	add	r7, sp, #0
 8000eda:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000edc:	f107 03e4 	add.w	r3, r7, #228	@ 0xe4
 8000ee0:	2200      	movs	r2, #0
 8000ee2:	601a      	str	r2, [r3, #0]
 8000ee4:	605a      	str	r2, [r3, #4]
 8000ee6:	609a      	str	r2, [r3, #8]
 8000ee8:	60da      	str	r2, [r3, #12]
 8000eea:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000eec:	f107 0320 	add.w	r3, r7, #32
 8000ef0:	22c0      	movs	r2, #192	@ 0xc0
 8000ef2:	2100      	movs	r1, #0
 8000ef4:	4618      	mov	r0, r3
 8000ef6:	f02a f8ac 	bl	802b052 <memset>
  if(hltdc->Instance==LTDC)
 8000efa:	687b      	ldr	r3, [r7, #4]
 8000efc:	681b      	ldr	r3, [r3, #0]
 8000efe:	4a69      	ldr	r2, [pc, #420]	@ (80010a4 <HAL_LTDC_MspInit+0x1d0>)
 8000f00:	4293      	cmp	r3, r2
 8000f02:	f040 80cb 	bne.w	800109c <HAL_LTDC_MspInit+0x1c8>

  /* USER CODE END LTDC_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_LTDC;
 8000f06:	f04f 5200 	mov.w	r2, #536870912	@ 0x20000000
 8000f0a:	f04f 0300 	mov.w	r3, #0
 8000f0e:	e9c7 2308 	strd	r2, r3, [r7, #32]
    PeriphClkInitStruct.PLL3.PLL3M = 5;
 8000f12:	2305      	movs	r3, #5
 8000f14:	64bb      	str	r3, [r7, #72]	@ 0x48
    PeriphClkInitStruct.PLL3.PLL3N = 160;
 8000f16:	23a0      	movs	r3, #160	@ 0xa0
 8000f18:	64fb      	str	r3, [r7, #76]	@ 0x4c
    PeriphClkInitStruct.PLL3.PLL3P = 2;
 8000f1a:	2302      	movs	r3, #2
 8000f1c:	653b      	str	r3, [r7, #80]	@ 0x50
    PeriphClkInitStruct.PLL3.PLL3Q = 2;
 8000f1e:	2302      	movs	r3, #2
 8000f20:	657b      	str	r3, [r7, #84]	@ 0x54
    PeriphClkInitStruct.PLL3.PLL3R = 83;
 8000f22:	2353      	movs	r3, #83	@ 0x53
 8000f24:	65bb      	str	r3, [r7, #88]	@ 0x58
    PeriphClkInitStruct.PLL3.PLL3RGE = RCC_PLL3VCIRANGE_2;
 8000f26:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8000f2a:	65fb      	str	r3, [r7, #92]	@ 0x5c
    PeriphClkInitStruct.PLL3.PLL3VCOSEL = RCC_PLL3VCOWIDE;
 8000f2c:	2300      	movs	r3, #0
 8000f2e:	663b      	str	r3, [r7, #96]	@ 0x60
    PeriphClkInitStruct.PLL3.PLL3FRACN = 0;
 8000f30:	2300      	movs	r3, #0
 8000f32:	667b      	str	r3, [r7, #100]	@ 0x64
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000f34:	f107 0320 	add.w	r3, r7, #32
 8000f38:	4618      	mov	r0, r3
 8000f3a:	f014 fac5 	bl	80154c8 <HAL_RCCEx_PeriphCLKConfig>
 8000f3e:	4603      	mov	r3, r0
 8000f40:	2b00      	cmp	r3, #0
 8000f42:	d001      	beq.n	8000f48 <HAL_LTDC_MspInit+0x74>
    {
      Error_Handler();
 8000f44:	f7ff feb0 	bl	8000ca8 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_LTDC_CLK_ENABLE();
 8000f48:	4b57      	ldr	r3, [pc, #348]	@ (80010a8 <HAL_LTDC_MspInit+0x1d4>)
 8000f4a:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8000f4e:	4a56      	ldr	r2, [pc, #344]	@ (80010a8 <HAL_LTDC_MspInit+0x1d4>)
 8000f50:	f043 0308 	orr.w	r3, r3, #8
 8000f54:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
 8000f58:	4b53      	ldr	r3, [pc, #332]	@ (80010a8 <HAL_LTDC_MspInit+0x1d4>)
 8000f5a:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8000f5e:	f003 0308 	and.w	r3, r3, #8
 8000f62:	61fb      	str	r3, [r7, #28]
 8000f64:	69fb      	ldr	r3, [r7, #28]

    __HAL_RCC_GPIOK_CLK_ENABLE();
 8000f66:	4b50      	ldr	r3, [pc, #320]	@ (80010a8 <HAL_LTDC_MspInit+0x1d4>)
 8000f68:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000f6c:	4a4e      	ldr	r2, [pc, #312]	@ (80010a8 <HAL_LTDC_MspInit+0x1d4>)
 8000f6e:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8000f72:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000f76:	4b4c      	ldr	r3, [pc, #304]	@ (80010a8 <HAL_LTDC_MspInit+0x1d4>)
 8000f78:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000f7c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8000f80:	61bb      	str	r3, [r7, #24]
 8000f82:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOI_CLK_ENABLE();
 8000f84:	4b48      	ldr	r3, [pc, #288]	@ (80010a8 <HAL_LTDC_MspInit+0x1d4>)
 8000f86:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000f8a:	4a47      	ldr	r2, [pc, #284]	@ (80010a8 <HAL_LTDC_MspInit+0x1d4>)
 8000f8c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8000f90:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000f94:	4b44      	ldr	r3, [pc, #272]	@ (80010a8 <HAL_LTDC_MspInit+0x1d4>)
 8000f96:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000f9a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8000f9e:	617b      	str	r3, [r7, #20]
 8000fa0:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOJ_CLK_ENABLE();
 8000fa2:	4b41      	ldr	r3, [pc, #260]	@ (80010a8 <HAL_LTDC_MspInit+0x1d4>)
 8000fa4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000fa8:	4a3f      	ldr	r2, [pc, #252]	@ (80010a8 <HAL_LTDC_MspInit+0x1d4>)
 8000faa:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8000fae:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000fb2:	4b3d      	ldr	r3, [pc, #244]	@ (80010a8 <HAL_LTDC_MspInit+0x1d4>)
 8000fb4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000fb8:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8000fbc:	613b      	str	r3, [r7, #16]
 8000fbe:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOH_CLK_ENABLE();
 8000fc0:	4b39      	ldr	r3, [pc, #228]	@ (80010a8 <HAL_LTDC_MspInit+0x1d4>)
 8000fc2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000fc6:	4a38      	ldr	r2, [pc, #224]	@ (80010a8 <HAL_LTDC_MspInit+0x1d4>)
 8000fc8:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000fcc:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000fd0:	4b35      	ldr	r3, [pc, #212]	@ (80010a8 <HAL_LTDC_MspInit+0x1d4>)
 8000fd2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000fd6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8000fda:	60fb      	str	r3, [r7, #12]
 8000fdc:	68fb      	ldr	r3, [r7, #12]
    PJ5     ------> LTDC_R6
    PH9     ------> LTDC_R3
    PJ3     ------> LTDC_R4
    PJ4     ------> LTDC_R5
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_4|GPIO_PIN_6|GPIO_PIN_3
 8000fde:	23fc      	movs	r3, #252	@ 0xfc
 8000fe0:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
                          |GPIO_PIN_7|GPIO_PIN_2;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000fe4:	2302      	movs	r3, #2
 8000fe6:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fea:	2300      	movs	r3, #0
 8000fec:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000ff0:	2302      	movs	r3, #2
 8000ff2:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8000ff6:	230e      	movs	r3, #14
 8000ff8:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
    HAL_GPIO_Init(GPIOK, &GPIO_InitStruct);
 8000ffc:	f107 03e4 	add.w	r3, r7, #228	@ 0xe4
 8001000:	4619      	mov	r1, r3
 8001002:	482a      	ldr	r0, [pc, #168]	@ (80010ac <HAL_LTDC_MspInit+0x1d8>)
 8001004:	f010 fc10 	bl	8011828 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_0|GPIO_PIN_9|GPIO_PIN_12
 8001008:	f24d 2303 	movw	r3, #53763	@ 0xd203
 800100c:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
                          |GPIO_PIN_14|GPIO_PIN_15;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001010:	2302      	movs	r3, #2
 8001012:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001016:	2300      	movs	r3, #0
 8001018:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800101c:	2302      	movs	r3, #2
 800101e:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8001022:	230e      	movs	r3, #14
 8001024:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
    HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 8001028:	f107 03e4 	add.w	r3, r7, #228	@ 0xe4
 800102c:	4619      	mov	r1, r3
 800102e:	4820      	ldr	r0, [pc, #128]	@ (80010b0 <HAL_LTDC_MspInit+0x1dc>)
 8001030:	f010 fbfa 	bl	8011828 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_15|GPIO_PIN_14|GPIO_PIN_12|GPIO_PIN_13
 8001034:	f64f 73fb 	movw	r3, #65531	@ 0xfffb
 8001038:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
                          |GPIO_PIN_11|GPIO_PIN_10|GPIO_PIN_9|GPIO_PIN_0
                          |GPIO_PIN_8|GPIO_PIN_7|GPIO_PIN_6|GPIO_PIN_1
                          |GPIO_PIN_5|GPIO_PIN_3|GPIO_PIN_4;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800103c:	2302      	movs	r3, #2
 800103e:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001042:	2300      	movs	r3, #0
 8001044:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001048:	2302      	movs	r3, #2
 800104a:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 800104e:	230e      	movs	r3, #14
 8001050:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
    HAL_GPIO_Init(GPIOJ, &GPIO_InitStruct);
 8001054:	f107 03e4 	add.w	r3, r7, #228	@ 0xe4
 8001058:	4619      	mov	r1, r3
 800105a:	4816      	ldr	r0, [pc, #88]	@ (80010b4 <HAL_LTDC_MspInit+0x1e0>)
 800105c:	f010 fbe4 	bl	8011828 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8001060:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8001064:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001068:	2302      	movs	r3, #2
 800106a:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800106e:	2300      	movs	r3, #0
 8001070:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001074:	2302      	movs	r3, #2
 8001076:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 800107a:	230e      	movs	r3, #14
 800107c:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
    HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8001080:	f107 03e4 	add.w	r3, r7, #228	@ 0xe4
 8001084:	4619      	mov	r1, r3
 8001086:	480c      	ldr	r0, [pc, #48]	@ (80010b8 <HAL_LTDC_MspInit+0x1e4>)
 8001088:	f010 fbce 	bl	8011828 <HAL_GPIO_Init>

    /* LTDC interrupt Init */
    HAL_NVIC_SetPriority(LTDC_IRQn, 5, 0);
 800108c:	2200      	movs	r2, #0
 800108e:	2105      	movs	r1, #5
 8001090:	2058      	movs	r0, #88	@ 0x58
 8001092:	f010 f8b1 	bl	80111f8 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(LTDC_IRQn);
 8001096:	2058      	movs	r0, #88	@ 0x58
 8001098:	f010 f8c8 	bl	801122c <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN LTDC_MspInit 1 */

  /* USER CODE END LTDC_MspInit 1 */
  }

}
 800109c:	bf00      	nop
 800109e:	37f8      	adds	r7, #248	@ 0xf8
 80010a0:	46bd      	mov	sp, r7
 80010a2:	bd80      	pop	{r7, pc}
 80010a4:	50001000 	.word	0x50001000
 80010a8:	58024400 	.word	0x58024400
 80010ac:	58022800 	.word	0x58022800
 80010b0:	58022000 	.word	0x58022000
 80010b4:	58022400 	.word	0x58022400
 80010b8:	58021c00 	.word	0x58021c00

080010bc <HAL_QSPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hqspi: QSPI handle pointer
* @retval None
*/
void HAL_QSPI_MspInit(QSPI_HandleTypeDef* hqspi)
{
 80010bc:	b580      	push	{r7, lr}
 80010be:	b0be      	sub	sp, #248	@ 0xf8
 80010c0:	af00      	add	r7, sp, #0
 80010c2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80010c4:	f107 03e4 	add.w	r3, r7, #228	@ 0xe4
 80010c8:	2200      	movs	r2, #0
 80010ca:	601a      	str	r2, [r3, #0]
 80010cc:	605a      	str	r2, [r3, #4]
 80010ce:	609a      	str	r2, [r3, #8]
 80010d0:	60da      	str	r2, [r3, #12]
 80010d2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80010d4:	f107 0320 	add.w	r3, r7, #32
 80010d8:	22c0      	movs	r2, #192	@ 0xc0
 80010da:	2100      	movs	r1, #0
 80010dc:	4618      	mov	r0, r3
 80010de:	f029 ffb8 	bl	802b052 <memset>
  if(hqspi->Instance==QUADSPI)
 80010e2:	687b      	ldr	r3, [r7, #4]
 80010e4:	681b      	ldr	r3, [r3, #0]
 80010e6:	4a77      	ldr	r2, [pc, #476]	@ (80012c4 <HAL_QSPI_MspInit+0x208>)
 80010e8:	4293      	cmp	r3, r2
 80010ea:	f040 80e7 	bne.w	80012bc <HAL_QSPI_MspInit+0x200>

  /* USER CODE END QUADSPI_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_QSPI;
 80010ee:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 80010f2:	f04f 0300 	mov.w	r3, #0
 80010f6:	e9c7 2308 	strd	r2, r3, [r7, #32]
    PeriphClkInitStruct.QspiClockSelection = RCC_QSPICLKSOURCE_D1HCLK;
 80010fa:	2300      	movs	r3, #0
 80010fc:	66fb      	str	r3, [r7, #108]	@ 0x6c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80010fe:	f107 0320 	add.w	r3, r7, #32
 8001102:	4618      	mov	r0, r3
 8001104:	f014 f9e0 	bl	80154c8 <HAL_RCCEx_PeriphCLKConfig>
 8001108:	4603      	mov	r3, r0
 800110a:	2b00      	cmp	r3, #0
 800110c:	d001      	beq.n	8001112 <HAL_QSPI_MspInit+0x56>
    {
      Error_Handler();
 800110e:	f7ff fdcb 	bl	8000ca8 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_QSPI_CLK_ENABLE();
 8001112:	4b6d      	ldr	r3, [pc, #436]	@ (80012c8 <HAL_QSPI_MspInit+0x20c>)
 8001114:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 8001118:	4a6b      	ldr	r2, [pc, #428]	@ (80012c8 <HAL_QSPI_MspInit+0x20c>)
 800111a:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800111e:	f8c2 30d4 	str.w	r3, [r2, #212]	@ 0xd4
 8001122:	4b69      	ldr	r3, [pc, #420]	@ (80012c8 <HAL_QSPI_MspInit+0x20c>)
 8001124:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 8001128:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800112c:	61fb      	str	r3, [r7, #28]
 800112e:	69fb      	ldr	r3, [r7, #28]

    __HAL_RCC_GPIOG_CLK_ENABLE();
 8001130:	4b65      	ldr	r3, [pc, #404]	@ (80012c8 <HAL_QSPI_MspInit+0x20c>)
 8001132:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001136:	4a64      	ldr	r2, [pc, #400]	@ (80012c8 <HAL_QSPI_MspInit+0x20c>)
 8001138:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800113c:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001140:	4b61      	ldr	r3, [pc, #388]	@ (80012c8 <HAL_QSPI_MspInit+0x20c>)
 8001142:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001146:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800114a:	61bb      	str	r3, [r7, #24]
 800114c:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOF_CLK_ENABLE();
 800114e:	4b5e      	ldr	r3, [pc, #376]	@ (80012c8 <HAL_QSPI_MspInit+0x20c>)
 8001150:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001154:	4a5c      	ldr	r2, [pc, #368]	@ (80012c8 <HAL_QSPI_MspInit+0x20c>)
 8001156:	f043 0320 	orr.w	r3, r3, #32
 800115a:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 800115e:	4b5a      	ldr	r3, [pc, #360]	@ (80012c8 <HAL_QSPI_MspInit+0x20c>)
 8001160:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001164:	f003 0320 	and.w	r3, r3, #32
 8001168:	617b      	str	r3, [r7, #20]
 800116a:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOH_CLK_ENABLE();
 800116c:	4b56      	ldr	r3, [pc, #344]	@ (80012c8 <HAL_QSPI_MspInit+0x20c>)
 800116e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001172:	4a55      	ldr	r2, [pc, #340]	@ (80012c8 <HAL_QSPI_MspInit+0x20c>)
 8001174:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8001178:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 800117c:	4b52      	ldr	r3, [pc, #328]	@ (80012c8 <HAL_QSPI_MspInit+0x20c>)
 800117e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001182:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001186:	613b      	str	r3, [r7, #16]
 8001188:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 800118a:	4b4f      	ldr	r3, [pc, #316]	@ (80012c8 <HAL_QSPI_MspInit+0x20c>)
 800118c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001190:	4a4d      	ldr	r2, [pc, #308]	@ (80012c8 <HAL_QSPI_MspInit+0x20c>)
 8001192:	f043 0308 	orr.w	r3, r3, #8
 8001196:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 800119a:	4b4b      	ldr	r3, [pc, #300]	@ (80012c8 <HAL_QSPI_MspInit+0x20c>)
 800119c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80011a0:	f003 0308 	and.w	r3, r3, #8
 80011a4:	60fb      	str	r3, [r7, #12]
 80011a6:	68fb      	ldr	r3, [r7, #12]
    PF9     ------> QUADSPI_BK1_IO1
    PH2     ------> QUADSPI_BK2_IO0
    PH3     ------> QUADSPI_BK2_IO1
    PD11     ------> QUADSPI_BK1_IO0
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_14;
 80011a8:	f44f 4384 	mov.w	r3, #16896	@ 0x4200
 80011ac:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80011b0:	2302      	movs	r3, #2
 80011b2:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011b6:	2300      	movs	r3, #0
 80011b8:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80011bc:	2303      	movs	r3, #3
 80011be:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
    GPIO_InitStruct.Alternate = GPIO_AF9_QUADSPI;
 80011c2:	2309      	movs	r3, #9
 80011c4:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80011c8:	f107 03e4 	add.w	r3, r7, #228	@ 0xe4
 80011cc:	4619      	mov	r1, r3
 80011ce:	483f      	ldr	r0, [pc, #252]	@ (80012cc <HAL_QSPI_MspInit+0x210>)
 80011d0:	f010 fb2a 	bl	8011828 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_6;
 80011d4:	2340      	movs	r3, #64	@ 0x40
 80011d6:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80011da:	2302      	movs	r3, #2
 80011dc:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80011e0:	2301      	movs	r3, #1
 80011e2:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80011e6:	2303      	movs	r3, #3
 80011e8:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
    GPIO_InitStruct.Alternate = GPIO_AF10_QUADSPI;
 80011ec:	230a      	movs	r3, #10
 80011ee:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80011f2:	f107 03e4 	add.w	r3, r7, #228	@ 0xe4
 80011f6:	4619      	mov	r1, r3
 80011f8:	4834      	ldr	r0, [pc, #208]	@ (80012cc <HAL_QSPI_MspInit+0x210>)
 80011fa:	f010 fb15 	bl	8011828 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_10;
 80011fe:	f44f 6398 	mov.w	r3, #1216	@ 0x4c0
 8001202:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001206:	2302      	movs	r3, #2
 8001208:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800120c:	2300      	movs	r3, #0
 800120e:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001212:	2303      	movs	r3, #3
 8001214:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
    GPIO_InitStruct.Alternate = GPIO_AF9_QUADSPI;
 8001218:	2309      	movs	r3, #9
 800121a:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 800121e:	f107 03e4 	add.w	r3, r7, #228	@ 0xe4
 8001222:	4619      	mov	r1, r3
 8001224:	482a      	ldr	r0, [pc, #168]	@ (80012d0 <HAL_QSPI_MspInit+0x214>)
 8001226:	f010 faff 	bl	8011828 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_9;
 800122a:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800122e:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001232:	2302      	movs	r3, #2
 8001234:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001238:	2300      	movs	r3, #0
 800123a:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800123e:	2303      	movs	r3, #3
 8001240:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
    GPIO_InitStruct.Alternate = GPIO_AF10_QUADSPI;
 8001244:	230a      	movs	r3, #10
 8001246:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 800124a:	f107 03e4 	add.w	r3, r7, #228	@ 0xe4
 800124e:	4619      	mov	r1, r3
 8001250:	481f      	ldr	r0, [pc, #124]	@ (80012d0 <HAL_QSPI_MspInit+0x214>)
 8001252:	f010 fae9 	bl	8011828 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8001256:	230c      	movs	r3, #12
 8001258:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800125c:	2302      	movs	r3, #2
 800125e:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001262:	2300      	movs	r3, #0
 8001264:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001268:	2303      	movs	r3, #3
 800126a:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
    GPIO_InitStruct.Alternate = GPIO_AF9_QUADSPI;
 800126e:	2309      	movs	r3, #9
 8001270:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
    HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8001274:	f107 03e4 	add.w	r3, r7, #228	@ 0xe4
 8001278:	4619      	mov	r1, r3
 800127a:	4816      	ldr	r0, [pc, #88]	@ (80012d4 <HAL_QSPI_MspInit+0x218>)
 800127c:	f010 fad4 	bl	8011828 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_11;
 8001280:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8001284:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001288:	2302      	movs	r3, #2
 800128a:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800128e:	2300      	movs	r3, #0
 8001290:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001294:	2303      	movs	r3, #3
 8001296:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
    GPIO_InitStruct.Alternate = GPIO_AF9_QUADSPI;
 800129a:	2309      	movs	r3, #9
 800129c:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80012a0:	f107 03e4 	add.w	r3, r7, #228	@ 0xe4
 80012a4:	4619      	mov	r1, r3
 80012a6:	480c      	ldr	r0, [pc, #48]	@ (80012d8 <HAL_QSPI_MspInit+0x21c>)
 80012a8:	f010 fabe 	bl	8011828 <HAL_GPIO_Init>

    /* QUADSPI interrupt Init */
    HAL_NVIC_SetPriority(QUADSPI_IRQn, 5, 0);
 80012ac:	2200      	movs	r2, #0
 80012ae:	2105      	movs	r1, #5
 80012b0:	205c      	movs	r0, #92	@ 0x5c
 80012b2:	f00f ffa1 	bl	80111f8 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(QUADSPI_IRQn);
 80012b6:	205c      	movs	r0, #92	@ 0x5c
 80012b8:	f00f ffb8 	bl	801122c <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN QUADSPI_MspInit 1 */

  /* USER CODE END QUADSPI_MspInit 1 */
  }

}
 80012bc:	bf00      	nop
 80012be:	37f8      	adds	r7, #248	@ 0xf8
 80012c0:	46bd      	mov	sp, r7
 80012c2:	bd80      	pop	{r7, pc}
 80012c4:	52005000 	.word	0x52005000
 80012c8:	58024400 	.word	0x58024400
 80012cc:	58021800 	.word	0x58021800
 80012d0:	58021400 	.word	0x58021400
 80012d4:	58021c00 	.word	0x58021c00
 80012d8:	58020c00 	.word	0x58020c00

080012dc <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80012dc:	b480      	push	{r7}
 80012de:	b083      	sub	sp, #12
 80012e0:	af00      	add	r7, sp, #0
 80012e2:	6078      	str	r0, [r7, #4]
  // /* USER CODE BEGIN TIM4_MspInit 1 */

  // /* USER CODE END TIM4_MspInit 1 */
  // }

}
 80012e4:	bf00      	nop
 80012e6:	370c      	adds	r7, #12
 80012e8:	46bd      	mov	sp, r7
 80012ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012ee:	4770      	bx	lr

080012f0 <HAL_FMC_MspInit>:

}

static uint32_t FMC_Initialized = 0;

static void HAL_FMC_MspInit(void){
 80012f0:	b580      	push	{r7, lr}
 80012f2:	b0b8      	sub	sp, #224	@ 0xe0
 80012f4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FMC_MspInit 0 */

  /* USER CODE END FMC_MspInit 0 */
  GPIO_InitTypeDef GPIO_InitStruct ={0};
 80012f6:	f107 03cc 	add.w	r3, r7, #204	@ 0xcc
 80012fa:	2200      	movs	r2, #0
 80012fc:	601a      	str	r2, [r3, #0]
 80012fe:	605a      	str	r2, [r3, #4]
 8001300:	609a      	str	r2, [r3, #8]
 8001302:	60da      	str	r2, [r3, #12]
 8001304:	611a      	str	r2, [r3, #16]
  if (FMC_Initialized) {
 8001306:	4b51      	ldr	r3, [pc, #324]	@ (800144c <HAL_FMC_MspInit+0x15c>)
 8001308:	681b      	ldr	r3, [r3, #0]
 800130a:	2b00      	cmp	r3, #0
 800130c:	f040 8099 	bne.w	8001442 <HAL_FMC_MspInit+0x152>
    return;
  }
  FMC_Initialized = 1;
 8001310:	4b4e      	ldr	r3, [pc, #312]	@ (800144c <HAL_FMC_MspInit+0x15c>)
 8001312:	2201      	movs	r2, #1
 8001314:	601a      	str	r2, [r3, #0]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001316:	f107 0308 	add.w	r3, r7, #8
 800131a:	22c0      	movs	r2, #192	@ 0xc0
 800131c:	2100      	movs	r1, #0
 800131e:	4618      	mov	r0, r3
 8001320:	f029 fe97 	bl	802b052 <memset>

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_FMC;
 8001324:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8001328:	f04f 0300 	mov.w	r3, #0
 800132c:	e9c7 2302 	strd	r2, r3, [r7, #8]
    PeriphClkInitStruct.FmcClockSelection = RCC_FMCCLKSOURCE_D1HCLK;
 8001330:	2300      	movs	r3, #0
 8001332:	653b      	str	r3, [r7, #80]	@ 0x50
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001334:	f107 0308 	add.w	r3, r7, #8
 8001338:	4618      	mov	r0, r3
 800133a:	f014 f8c5 	bl	80154c8 <HAL_RCCEx_PeriphCLKConfig>
 800133e:	4603      	mov	r3, r0
 8001340:	2b00      	cmp	r3, #0
 8001342:	d001      	beq.n	8001348 <HAL_FMC_MspInit+0x58>
    {
      Error_Handler();
 8001344:	f7ff fcb0 	bl	8000ca8 <Error_Handler>
    }

  /* Peripheral clock enable */
  __HAL_RCC_FMC_CLK_ENABLE();
 8001348:	4b41      	ldr	r3, [pc, #260]	@ (8001450 <HAL_FMC_MspInit+0x160>)
 800134a:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 800134e:	4a40      	ldr	r2, [pc, #256]	@ (8001450 <HAL_FMC_MspInit+0x160>)
 8001350:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8001354:	f8c2 30d4 	str.w	r3, [r2, #212]	@ 0xd4
 8001358:	4b3d      	ldr	r3, [pc, #244]	@ (8001450 <HAL_FMC_MspInit+0x160>)
 800135a:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 800135e:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8001362:	607b      	str	r3, [r7, #4]
 8001364:	687b      	ldr	r3, [r7, #4]
  PE7   ------> FMC_D4
  PE14   ------> FMC_D11
  PH7   ------> FMC_SDCKE1
  PD8   ------> FMC_D13
  */
  GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_0|GPIO_PIN_10|GPIO_PIN_9
 8001366:	f64f 7383 	movw	r3, #65411	@ 0xff83
 800136a:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
                          |GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_15|GPIO_PIN_8
                          |GPIO_PIN_13|GPIO_PIN_7|GPIO_PIN_14;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800136e:	2302      	movs	r3, #2
 8001370:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001374:	2300      	movs	r3, #0
 8001376:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800137a:	2303      	movs	r3, #3
 800137c:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8001380:	230c      	movs	r3, #12
 8001382:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001386:	f107 03cc 	add.w	r3, r7, #204	@ 0xcc
 800138a:	4619      	mov	r1, r3
 800138c:	4831      	ldr	r0, [pc, #196]	@ (8001454 <HAL_FMC_MspInit+0x164>)
 800138e:	f010 fa4b 	bl	8011828 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = GPIO_PIN_15|GPIO_PIN_8|GPIO_PIN_5|GPIO_PIN_4
 8001392:	f248 1333 	movw	r3, #33075	@ 0x8133
 8001396:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
                          |GPIO_PIN_0|GPIO_PIN_1;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800139a:	2302      	movs	r3, #2
 800139c:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013a0:	2300      	movs	r3, #0
 80013a2:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80013a6:	2303      	movs	r3, #3
 80013a8:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 80013ac:	230c      	movs	r3, #12
 80013ae:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80013b2:	f107 03cc 	add.w	r3, r7, #204	@ 0xcc
 80013b6:	4619      	mov	r1, r3
 80013b8:	4827      	ldr	r0, [pc, #156]	@ (8001458 <HAL_FMC_MspInit+0x168>)
 80013ba:	f010 fa35 	bl	8011828 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_15|GPIO_PIN_14
 80013be:	f24c 7303 	movw	r3, #50947	@ 0xc703
 80013c2:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
                          |GPIO_PIN_10|GPIO_PIN_9|GPIO_PIN_8;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80013c6:	2302      	movs	r3, #2
 80013c8:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013cc:	2300      	movs	r3, #0
 80013ce:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80013d2:	2303      	movs	r3, #3
 80013d4:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 80013d8:	230c      	movs	r3, #12
 80013da:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80013de:	f107 03cc 	add.w	r3, r7, #204	@ 0xcc
 80013e2:	4619      	mov	r1, r3
 80013e4:	481d      	ldr	r0, [pc, #116]	@ (800145c <HAL_FMC_MspInit+0x16c>)
 80013e6:	f010 fa1f 	bl	8011828 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_1|GPIO_PIN_0|GPIO_PIN_3
 80013ea:	f64f 033f 	movw	r3, #63551	@ 0xf83f
 80013ee:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
                          |GPIO_PIN_5|GPIO_PIN_4|GPIO_PIN_13|GPIO_PIN_14
                          |GPIO_PIN_12|GPIO_PIN_15|GPIO_PIN_11;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80013f2:	2302      	movs	r3, #2
 80013f4:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013f8:	2300      	movs	r3, #0
 80013fa:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80013fe:	2303      	movs	r3, #3
 8001400:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8001404:	230c      	movs	r3, #12
 8001406:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 800140a:	f107 03cc 	add.w	r3, r7, #204	@ 0xcc
 800140e:	4619      	mov	r1, r3
 8001410:	4813      	ldr	r0, [pc, #76]	@ (8001460 <HAL_FMC_MspInit+0x170>)
 8001412:	f010 fa09 	bl	8011828 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 8001416:	23e0      	movs	r3, #224	@ 0xe0
 8001418:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800141c:	2302      	movs	r3, #2
 800141e:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001422:	2300      	movs	r3, #0
 8001424:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001428:	2303      	movs	r3, #3
 800142a:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 800142e:	230c      	movs	r3, #12
 8001430:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8001434:	f107 03cc 	add.w	r3, r7, #204	@ 0xcc
 8001438:	4619      	mov	r1, r3
 800143a:	480a      	ldr	r0, [pc, #40]	@ (8001464 <HAL_FMC_MspInit+0x174>)
 800143c:	f010 f9f4 	bl	8011828 <HAL_GPIO_Init>
 8001440:	e000      	b.n	8001444 <HAL_FMC_MspInit+0x154>
    return;
 8001442:	bf00      	nop

  /* USER CODE BEGIN FMC_MspInit 1 */

  /* USER CODE END FMC_MspInit 1 */
}
 8001444:	37e0      	adds	r7, #224	@ 0xe0
 8001446:	46bd      	mov	sp, r7
 8001448:	bd80      	pop	{r7, pc}
 800144a:	bf00      	nop
 800144c:	24000304 	.word	0x24000304
 8001450:	58024400 	.word	0x58024400
 8001454:	58021000 	.word	0x58021000
 8001458:	58021800 	.word	0x58021800
 800145c:	58020c00 	.word	0x58020c00
 8001460:	58021400 	.word	0x58021400
 8001464:	58021c00 	.word	0x58021c00

08001468 <HAL_SDRAM_MspInit>:

void HAL_SDRAM_MspInit(SDRAM_HandleTypeDef* hsdram){
 8001468:	b580      	push	{r7, lr}
 800146a:	b082      	sub	sp, #8
 800146c:	af00      	add	r7, sp, #0
 800146e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN SDRAM_MspInit 0 */

  /* USER CODE END SDRAM_MspInit 0 */
  HAL_FMC_MspInit();
 8001470:	f7ff ff3e 	bl	80012f0 <HAL_FMC_MspInit>
  /* USER CODE BEGIN SDRAM_MspInit 1 */

  /* USER CODE END SDRAM_MspInit 1 */
}
 8001474:	bf00      	nop
 8001476:	3708      	adds	r7, #8
 8001478:	46bd      	mov	sp, r7
 800147a:	bd80      	pop	{r7, pc}

0800147c <HAL_FMC_MspDeInit>:

static uint32_t FMC_DeInitialized = 0;

static void HAL_FMC_MspDeInit(void){
 800147c:	b580      	push	{r7, lr}
 800147e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FMC_MspDeInit 0 */

  /* USER CODE END FMC_MspDeInit 0 */
  if (FMC_DeInitialized) {
 8001480:	4b14      	ldr	r3, [pc, #80]	@ (80014d4 <HAL_FMC_MspDeInit+0x58>)
 8001482:	681b      	ldr	r3, [r3, #0]
 8001484:	2b00      	cmp	r3, #0
 8001486:	d123      	bne.n	80014d0 <HAL_FMC_MspDeInit+0x54>
    return;
  }
  FMC_DeInitialized = 1;
 8001488:	4b12      	ldr	r3, [pc, #72]	@ (80014d4 <HAL_FMC_MspDeInit+0x58>)
 800148a:	2201      	movs	r2, #1
 800148c:	601a      	str	r2, [r3, #0]
  /* Peripheral clock enable */
  __HAL_RCC_FMC_CLK_DISABLE();
 800148e:	4b12      	ldr	r3, [pc, #72]	@ (80014d8 <HAL_FMC_MspDeInit+0x5c>)
 8001490:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 8001494:	4a10      	ldr	r2, [pc, #64]	@ (80014d8 <HAL_FMC_MspDeInit+0x5c>)
 8001496:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800149a:	f8c2 30d4 	str.w	r3, [r2, #212]	@ 0xd4
  PE7   ------> FMC_D4
  PE14   ------> FMC_D11
  PH7   ------> FMC_SDCKE1
  PD8   ------> FMC_D13
  */
  HAL_GPIO_DeInit(GPIOE, GPIO_PIN_1|GPIO_PIN_0|GPIO_PIN_10|GPIO_PIN_9
 800149e:	f64f 7183 	movw	r1, #65411	@ 0xff83
 80014a2:	480e      	ldr	r0, [pc, #56]	@ (80014dc <HAL_FMC_MspDeInit+0x60>)
 80014a4:	f010 fb70 	bl	8011b88 <HAL_GPIO_DeInit>
                          |GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_15|GPIO_PIN_8
                          |GPIO_PIN_13|GPIO_PIN_7|GPIO_PIN_14);

  HAL_GPIO_DeInit(GPIOG, GPIO_PIN_15|GPIO_PIN_8|GPIO_PIN_5|GPIO_PIN_4
 80014a8:	f248 1133 	movw	r1, #33075	@ 0x8133
 80014ac:	480c      	ldr	r0, [pc, #48]	@ (80014e0 <HAL_FMC_MspDeInit+0x64>)
 80014ae:	f010 fb6b 	bl	8011b88 <HAL_GPIO_DeInit>
                          |GPIO_PIN_0|GPIO_PIN_1);

  HAL_GPIO_DeInit(GPIOD, GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_15|GPIO_PIN_14
 80014b2:	f24c 7103 	movw	r1, #50947	@ 0xc703
 80014b6:	480b      	ldr	r0, [pc, #44]	@ (80014e4 <HAL_FMC_MspDeInit+0x68>)
 80014b8:	f010 fb66 	bl	8011b88 <HAL_GPIO_DeInit>
                          |GPIO_PIN_10|GPIO_PIN_9|GPIO_PIN_8);

  HAL_GPIO_DeInit(GPIOF, GPIO_PIN_2|GPIO_PIN_1|GPIO_PIN_0|GPIO_PIN_3
 80014bc:	f64f 013f 	movw	r1, #63551	@ 0xf83f
 80014c0:	4809      	ldr	r0, [pc, #36]	@ (80014e8 <HAL_FMC_MspDeInit+0x6c>)
 80014c2:	f010 fb61 	bl	8011b88 <HAL_GPIO_DeInit>
                          |GPIO_PIN_5|GPIO_PIN_4|GPIO_PIN_13|GPIO_PIN_14
                          |GPIO_PIN_12|GPIO_PIN_15|GPIO_PIN_11);

  HAL_GPIO_DeInit(GPIOH, GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7);
 80014c6:	21e0      	movs	r1, #224	@ 0xe0
 80014c8:	4808      	ldr	r0, [pc, #32]	@ (80014ec <HAL_FMC_MspDeInit+0x70>)
 80014ca:	f010 fb5d 	bl	8011b88 <HAL_GPIO_DeInit>
 80014ce:	e000      	b.n	80014d2 <HAL_FMC_MspDeInit+0x56>
    return;
 80014d0:	bf00      	nop

  /* USER CODE BEGIN FMC_MspDeInit 1 */

  /* USER CODE END FMC_MspDeInit 1 */
}
 80014d2:	bd80      	pop	{r7, pc}
 80014d4:	24000308 	.word	0x24000308
 80014d8:	58024400 	.word	0x58024400
 80014dc:	58021000 	.word	0x58021000
 80014e0:	58021800 	.word	0x58021800
 80014e4:	58020c00 	.word	0x58020c00
 80014e8:	58021400 	.word	0x58021400
 80014ec:	58021c00 	.word	0x58021c00

080014f0 <HAL_SDRAM_MspDeInit>:

void HAL_SDRAM_MspDeInit(SDRAM_HandleTypeDef* hsdram){
 80014f0:	b580      	push	{r7, lr}
 80014f2:	b082      	sub	sp, #8
 80014f4:	af00      	add	r7, sp, #0
 80014f6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN SDRAM_MspDeInit 0 */

  /* USER CODE END SDRAM_MspDeInit 0 */
  HAL_FMC_MspDeInit();
 80014f8:	f7ff ffc0 	bl	800147c <HAL_FMC_MspDeInit>
  /* USER CODE BEGIN SDRAM_MspDeInit 1 */

  /* USER CODE END SDRAM_MspDeInit 1 */
}
 80014fc:	bf00      	nop
 80014fe:	3708      	adds	r7, #8
 8001500:	46bd      	mov	sp, r7
 8001502:	bd80      	pop	{r7, pc}

08001504 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001504:	b580      	push	{r7, lr}
 8001506:	b090      	sub	sp, #64	@ 0x40
 8001508:	af00      	add	r7, sp, #0
 800150a:	6078      	str	r0, [r7, #4]
  uint32_t              uwTimclock, uwAPB1Prescaler;

  uint32_t              uwPrescalerValue;
  uint32_t              pFLatency;
/*Configure the TIM6 IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800150c:	687b      	ldr	r3, [r7, #4]
 800150e:	2b0f      	cmp	r3, #15
 8001510:	d827      	bhi.n	8001562 <HAL_InitTick+0x5e>
  {
  HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority ,0U);
 8001512:	2200      	movs	r2, #0
 8001514:	6879      	ldr	r1, [r7, #4]
 8001516:	2036      	movs	r0, #54	@ 0x36
 8001518:	f00f fe6e 	bl	80111f8 <HAL_NVIC_SetPriority>

  /* Enable the TIM6 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 800151c:	2036      	movs	r0, #54	@ 0x36
 800151e:	f00f fe85 	bl	801122c <HAL_NVIC_EnableIRQ>
    uwTickPrio = TickPriority;
 8001522:	4a29      	ldr	r2, [pc, #164]	@ (80015c8 <HAL_InitTick+0xc4>)
 8001524:	687b      	ldr	r3, [r7, #4]
 8001526:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 8001528:	4b28      	ldr	r3, [pc, #160]	@ (80015cc <HAL_InitTick+0xc8>)
 800152a:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 800152e:	4a27      	ldr	r2, [pc, #156]	@ (80015cc <HAL_InitTick+0xc8>)
 8001530:	f043 0310 	orr.w	r3, r3, #16
 8001534:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 8001538:	4b24      	ldr	r3, [pc, #144]	@ (80015cc <HAL_InitTick+0xc8>)
 800153a:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 800153e:	f003 0310 	and.w	r3, r3, #16
 8001542:	60fb      	str	r3, [r7, #12]
 8001544:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8001546:	f107 0210 	add.w	r2, r7, #16
 800154a:	f107 0314 	add.w	r3, r7, #20
 800154e:	4611      	mov	r1, r2
 8001550:	4618      	mov	r0, r3
 8001552:	f013 ff77 	bl	8015444 <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 8001556:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001558:	63bb      	str	r3, [r7, #56]	@ 0x38
  /* Compute TIM6 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 800155a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800155c:	2b00      	cmp	r3, #0
 800155e:	d106      	bne.n	800156e <HAL_InitTick+0x6a>
 8001560:	e001      	b.n	8001566 <HAL_InitTick+0x62>
    return HAL_ERROR;
 8001562:	2301      	movs	r3, #1
 8001564:	e02b      	b.n	80015be <HAL_InitTick+0xba>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 8001566:	f013 ff41 	bl	80153ec <HAL_RCC_GetPCLK1Freq>
 800156a:	63f8      	str	r0, [r7, #60]	@ 0x3c
 800156c:	e004      	b.n	8001578 <HAL_InitTick+0x74>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 800156e:	f013 ff3d 	bl	80153ec <HAL_RCC_GetPCLK1Freq>
 8001572:	4603      	mov	r3, r0
 8001574:	005b      	lsls	r3, r3, #1
 8001576:	63fb      	str	r3, [r7, #60]	@ 0x3c
  }

  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8001578:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800157a:	4a15      	ldr	r2, [pc, #84]	@ (80015d0 <HAL_InitTick+0xcc>)
 800157c:	fba2 2303 	umull	r2, r3, r2, r3
 8001580:	0c9b      	lsrs	r3, r3, #18
 8001582:	3b01      	subs	r3, #1
 8001584:	637b      	str	r3, [r7, #52]	@ 0x34

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 8001586:	4b13      	ldr	r3, [pc, #76]	@ (80015d4 <HAL_InitTick+0xd0>)
 8001588:	4a13      	ldr	r2, [pc, #76]	@ (80015d8 <HAL_InitTick+0xd4>)
 800158a:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 800158c:	4b11      	ldr	r3, [pc, #68]	@ (80015d4 <HAL_InitTick+0xd0>)
 800158e:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8001592:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 8001594:	4a0f      	ldr	r2, [pc, #60]	@ (80015d4 <HAL_InitTick+0xd0>)
 8001596:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001598:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 800159a:	4b0e      	ldr	r3, [pc, #56]	@ (80015d4 <HAL_InitTick+0xd0>)
 800159c:	2200      	movs	r2, #0
 800159e:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 80015a0:	4b0c      	ldr	r3, [pc, #48]	@ (80015d4 <HAL_InitTick+0xd0>)
 80015a2:	2200      	movs	r2, #0
 80015a4:	609a      	str	r2, [r3, #8]

  if(HAL_TIM_Base_Init(&htim6) == HAL_OK)
 80015a6:	480b      	ldr	r0, [pc, #44]	@ (80015d4 <HAL_InitTick+0xd0>)
 80015a8:	f015 fbb1 	bl	8016d0e <HAL_TIM_Base_Init>
 80015ac:	4603      	mov	r3, r0
 80015ae:	2b00      	cmp	r3, #0
 80015b0:	d104      	bne.n	80015bc <HAL_InitTick+0xb8>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim6);
 80015b2:	4808      	ldr	r0, [pc, #32]	@ (80015d4 <HAL_InitTick+0xd0>)
 80015b4:	f015 fc02 	bl	8016dbc <HAL_TIM_Base_Start_IT>
 80015b8:	4603      	mov	r3, r0
 80015ba:	e000      	b.n	80015be <HAL_InitTick+0xba>
  }

  /* Return function status */
  return HAL_ERROR;
 80015bc:	2301      	movs	r3, #1
}
 80015be:	4618      	mov	r0, r3
 80015c0:	3740      	adds	r7, #64	@ 0x40
 80015c2:	46bd      	mov	sp, r7
 80015c4:	bd80      	pop	{r7, pc}
 80015c6:	bf00      	nop
 80015c8:	24000050 	.word	0x24000050
 80015cc:	58024400 	.word	0x58024400
 80015d0:	431bde83 	.word	0x431bde83
 80015d4:	2400030c 	.word	0x2400030c
 80015d8:	40001000 	.word	0x40001000

080015dc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80015dc:	b480      	push	{r7}
 80015de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80015e0:	bf00      	nop
 80015e2:	e7fd      	b.n	80015e0 <NMI_Handler+0x4>

080015e4 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80015e4:	b480      	push	{r7}
 80015e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80015e8:	bf00      	nop
 80015ea:	e7fd      	b.n	80015e8 <HardFault_Handler+0x4>

080015ec <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80015ec:	b480      	push	{r7}
 80015ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80015f0:	bf00      	nop
 80015f2:	e7fd      	b.n	80015f0 <MemManage_Handler+0x4>

080015f4 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80015f4:	b480      	push	{r7}
 80015f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80015f8:	bf00      	nop
 80015fa:	e7fd      	b.n	80015f8 <BusFault_Handler+0x4>

080015fc <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80015fc:	b480      	push	{r7}
 80015fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001600:	bf00      	nop
 8001602:	e7fd      	b.n	8001600 <UsageFault_Handler+0x4>

08001604 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001604:	b480      	push	{r7}
 8001606:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001608:	bf00      	nop
 800160a:	46bd      	mov	sp, r7
 800160c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001610:	4770      	bx	lr
	...

08001614 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1_CH1 and DAC1_CH2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8001614:	b580      	push	{r7, lr}
 8001616:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8001618:	4802      	ldr	r0, [pc, #8]	@ (8001624 <TIM6_DAC_IRQHandler+0x10>)
 800161a:	f015 fc47 	bl	8016eac <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 800161e:	bf00      	nop
 8001620:	bd80      	pop	{r7, pc}
 8001622:	bf00      	nop
 8001624:	2400030c 	.word	0x2400030c

08001628 <LTDC_IRQHandler>:

/**
  * @brief This function handles LTDC global interrupt.
  */
void LTDC_IRQHandler(void)
{
 8001628:	b580      	push	{r7, lr}
 800162a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN LTDC_IRQn 0 */

  /* USER CODE END LTDC_IRQn 0 */
  HAL_LTDC_IRQHandler(&hltdc);
 800162c:	4802      	ldr	r0, [pc, #8]	@ (8001638 <LTDC_IRQHandler+0x10>)
 800162e:	f011 fb51 	bl	8012cd4 <HAL_LTDC_IRQHandler>
  /* USER CODE BEGIN LTDC_IRQn 1 */

  /* USER CODE END LTDC_IRQn 1 */
}
 8001632:	bf00      	nop
 8001634:	bd80      	pop	{r7, pc}
 8001636:	bf00      	nop
 8001638:	240001d4 	.word	0x240001d4

0800163c <DMA2D_IRQHandler>:

/**
  * @brief This function handles DMA2D global interrupt.
  */
void DMA2D_IRQHandler(void)
{
 800163c:	b580      	push	{r7, lr}
 800163e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2D_IRQn 0 */

  /* USER CODE END DMA2D_IRQn 0 */
  HAL_DMA2D_IRQHandler(&hdma2d);
 8001640:	4802      	ldr	r0, [pc, #8]	@ (800164c <DMA2D_IRQHandler+0x10>)
 8001642:	f00f ffe1 	bl	8011608 <HAL_DMA2D_IRQHandler>
  /* USER CODE BEGIN DMA2D_IRQn 1 */

  /* USER CODE END DMA2D_IRQn 1 */
}
 8001646:	bf00      	nop
 8001648:	bd80      	pop	{r7, pc}
 800164a:	bf00      	nop
 800164c:	2400016c 	.word	0x2400016c

08001650 <QUADSPI_IRQHandler>:

/**
  * @brief This function handles QUADSPI global interrupt.
  */
void QUADSPI_IRQHandler(void)
{
 8001650:	b580      	push	{r7, lr}
 8001652:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN QUADSPI_IRQn 0 */

  /* USER CODE END QUADSPI_IRQn 0 */
  HAL_QSPI_IRQHandler(&hqspi);
 8001654:	4802      	ldr	r0, [pc, #8]	@ (8001660 <QUADSPI_IRQHandler+0x10>)
 8001656:	f012 f837 	bl	80136c8 <HAL_QSPI_IRQHandler>
  /* USER CODE BEGIN QUADSPI_IRQn 1 */

  /* USER CODE END QUADSPI_IRQn 1 */
}
 800165a:	bf00      	nop
 800165c:	bd80      	pop	{r7, pc}
 800165e:	bf00      	nop
 8001660:	2400027c 	.word	0x2400027c

08001664 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001664:	b480      	push	{r7}
 8001666:	af00      	add	r7, sp, #0
	return 1;
 8001668:	2301      	movs	r3, #1
}
 800166a:	4618      	mov	r0, r3
 800166c:	46bd      	mov	sp, r7
 800166e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001672:	4770      	bx	lr

08001674 <_kill>:

int _kill(int pid, int sig)
{
 8001674:	b580      	push	{r7, lr}
 8001676:	b082      	sub	sp, #8
 8001678:	af00      	add	r7, sp, #0
 800167a:	6078      	str	r0, [r7, #4]
 800167c:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 800167e:	f029 fde1 	bl	802b244 <__errno>
 8001682:	4603      	mov	r3, r0
 8001684:	2216      	movs	r2, #22
 8001686:	601a      	str	r2, [r3, #0]
	return -1;
 8001688:	f04f 33ff 	mov.w	r3, #4294967295
}
 800168c:	4618      	mov	r0, r3
 800168e:	3708      	adds	r7, #8
 8001690:	46bd      	mov	sp, r7
 8001692:	bd80      	pop	{r7, pc}

08001694 <_exit>:

void _exit (int status)
{
 8001694:	b580      	push	{r7, lr}
 8001696:	b082      	sub	sp, #8
 8001698:	af00      	add	r7, sp, #0
 800169a:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 800169c:	f04f 31ff 	mov.w	r1, #4294967295
 80016a0:	6878      	ldr	r0, [r7, #4]
 80016a2:	f7ff ffe7 	bl	8001674 <_kill>
	while (1) {}		/* Make sure we hang here */
 80016a6:	bf00      	nop
 80016a8:	e7fd      	b.n	80016a6 <_exit+0x12>

080016aa <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80016aa:	b580      	push	{r7, lr}
 80016ac:	b086      	sub	sp, #24
 80016ae:	af00      	add	r7, sp, #0
 80016b0:	60f8      	str	r0, [r7, #12]
 80016b2:	60b9      	str	r1, [r7, #8]
 80016b4:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80016b6:	2300      	movs	r3, #0
 80016b8:	617b      	str	r3, [r7, #20]
 80016ba:	e00a      	b.n	80016d2 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 80016bc:	f3af 8000 	nop.w
 80016c0:	4601      	mov	r1, r0
 80016c2:	68bb      	ldr	r3, [r7, #8]
 80016c4:	1c5a      	adds	r2, r3, #1
 80016c6:	60ba      	str	r2, [r7, #8]
 80016c8:	b2ca      	uxtb	r2, r1
 80016ca:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80016cc:	697b      	ldr	r3, [r7, #20]
 80016ce:	3301      	adds	r3, #1
 80016d0:	617b      	str	r3, [r7, #20]
 80016d2:	697a      	ldr	r2, [r7, #20]
 80016d4:	687b      	ldr	r3, [r7, #4]
 80016d6:	429a      	cmp	r2, r3
 80016d8:	dbf0      	blt.n	80016bc <_read+0x12>
	}

return len;
 80016da:	687b      	ldr	r3, [r7, #4]
}
 80016dc:	4618      	mov	r0, r3
 80016de:	3718      	adds	r7, #24
 80016e0:	46bd      	mov	sp, r7
 80016e2:	bd80      	pop	{r7, pc}

080016e4 <_close>:
	}
	return len;
}

int _close(int file)
{
 80016e4:	b480      	push	{r7}
 80016e6:	b083      	sub	sp, #12
 80016e8:	af00      	add	r7, sp, #0
 80016ea:	6078      	str	r0, [r7, #4]
	return -1;
 80016ec:	f04f 33ff 	mov.w	r3, #4294967295
}
 80016f0:	4618      	mov	r0, r3
 80016f2:	370c      	adds	r7, #12
 80016f4:	46bd      	mov	sp, r7
 80016f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016fa:	4770      	bx	lr

080016fc <_fstat>:


int _fstat(int file, struct stat *st)
{
 80016fc:	b480      	push	{r7}
 80016fe:	b083      	sub	sp, #12
 8001700:	af00      	add	r7, sp, #0
 8001702:	6078      	str	r0, [r7, #4]
 8001704:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8001706:	683b      	ldr	r3, [r7, #0]
 8001708:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 800170c:	605a      	str	r2, [r3, #4]
	return 0;
 800170e:	2300      	movs	r3, #0
}
 8001710:	4618      	mov	r0, r3
 8001712:	370c      	adds	r7, #12
 8001714:	46bd      	mov	sp, r7
 8001716:	f85d 7b04 	ldr.w	r7, [sp], #4
 800171a:	4770      	bx	lr

0800171c <_isatty>:

int _isatty(int file)
{
 800171c:	b480      	push	{r7}
 800171e:	b083      	sub	sp, #12
 8001720:	af00      	add	r7, sp, #0
 8001722:	6078      	str	r0, [r7, #4]
	return 1;
 8001724:	2301      	movs	r3, #1
}
 8001726:	4618      	mov	r0, r3
 8001728:	370c      	adds	r7, #12
 800172a:	46bd      	mov	sp, r7
 800172c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001730:	4770      	bx	lr

08001732 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001732:	b480      	push	{r7}
 8001734:	b085      	sub	sp, #20
 8001736:	af00      	add	r7, sp, #0
 8001738:	60f8      	str	r0, [r7, #12]
 800173a:	60b9      	str	r1, [r7, #8]
 800173c:	607a      	str	r2, [r7, #4]
	return 0;
 800173e:	2300      	movs	r3, #0
}
 8001740:	4618      	mov	r0, r3
 8001742:	3714      	adds	r7, #20
 8001744:	46bd      	mov	sp, r7
 8001746:	f85d 7b04 	ldr.w	r7, [sp], #4
 800174a:	4770      	bx	lr

0800174c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800174c:	b580      	push	{r7, lr}
 800174e:	b086      	sub	sp, #24
 8001750:	af00      	add	r7, sp, #0
 8001752:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001754:	4a14      	ldr	r2, [pc, #80]	@ (80017a8 <_sbrk+0x5c>)
 8001756:	4b15      	ldr	r3, [pc, #84]	@ (80017ac <_sbrk+0x60>)
 8001758:	1ad3      	subs	r3, r2, r3
 800175a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800175c:	697b      	ldr	r3, [r7, #20]
 800175e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001760:	4b13      	ldr	r3, [pc, #76]	@ (80017b0 <_sbrk+0x64>)
 8001762:	681b      	ldr	r3, [r3, #0]
 8001764:	2b00      	cmp	r3, #0
 8001766:	d102      	bne.n	800176e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001768:	4b11      	ldr	r3, [pc, #68]	@ (80017b0 <_sbrk+0x64>)
 800176a:	4a12      	ldr	r2, [pc, #72]	@ (80017b4 <_sbrk+0x68>)
 800176c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800176e:	4b10      	ldr	r3, [pc, #64]	@ (80017b0 <_sbrk+0x64>)
 8001770:	681a      	ldr	r2, [r3, #0]
 8001772:	687b      	ldr	r3, [r7, #4]
 8001774:	4413      	add	r3, r2
 8001776:	693a      	ldr	r2, [r7, #16]
 8001778:	429a      	cmp	r2, r3
 800177a:	d207      	bcs.n	800178c <_sbrk+0x40>
  {
    errno = ENOMEM;
 800177c:	f029 fd62 	bl	802b244 <__errno>
 8001780:	4603      	mov	r3, r0
 8001782:	220c      	movs	r2, #12
 8001784:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001786:	f04f 33ff 	mov.w	r3, #4294967295
 800178a:	e009      	b.n	80017a0 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800178c:	4b08      	ldr	r3, [pc, #32]	@ (80017b0 <_sbrk+0x64>)
 800178e:	681b      	ldr	r3, [r3, #0]
 8001790:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001792:	4b07      	ldr	r3, [pc, #28]	@ (80017b0 <_sbrk+0x64>)
 8001794:	681a      	ldr	r2, [r3, #0]
 8001796:	687b      	ldr	r3, [r7, #4]
 8001798:	4413      	add	r3, r2
 800179a:	4a05      	ldr	r2, [pc, #20]	@ (80017b0 <_sbrk+0x64>)
 800179c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800179e:	68fb      	ldr	r3, [r7, #12]
}
 80017a0:	4618      	mov	r0, r3
 80017a2:	3718      	adds	r7, #24
 80017a4:	46bd      	mov	sp, r7
 80017a6:	bd80      	pop	{r7, pc}
 80017a8:	24080000 	.word	0x24080000
 80017ac:	00001000 	.word	0x00001000
 80017b0:	24000358 	.word	0x24000358
 80017b4:	2400bc68 	.word	0x2400bc68

080017b8 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 80017b8:	f8df d034 	ldr.w	sp, [pc, #52]	@ 80017f0 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit
 80017bc:	f00c ffa6 	bl	800e70c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80017c0:	480c      	ldr	r0, [pc, #48]	@ (80017f4 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 80017c2:	490d      	ldr	r1, [pc, #52]	@ (80017f8 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 80017c4:	4a0d      	ldr	r2, [pc, #52]	@ (80017fc <LoopFillZerobss+0x1a>)
  movs r3, #0
 80017c6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80017c8:	e002      	b.n	80017d0 <LoopCopyDataInit>

080017ca <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80017ca:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80017cc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80017ce:	3304      	adds	r3, #4

080017d0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80017d0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80017d2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80017d4:	d3f9      	bcc.n	80017ca <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80017d6:	4a0a      	ldr	r2, [pc, #40]	@ (8001800 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 80017d8:	4c0a      	ldr	r4, [pc, #40]	@ (8001804 <LoopFillZerobss+0x22>)
  movs r3, #0
 80017da:	2300      	movs	r3, #0
  b LoopFillZerobss
 80017dc:	e001      	b.n	80017e2 <LoopFillZerobss>

080017de <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80017de:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80017e0:	3204      	adds	r2, #4

080017e2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80017e2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80017e4:	d3fb      	bcc.n	80017de <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80017e6:	f029 fd33 	bl	802b250 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80017ea:	f7fe fe63 	bl	80004b4 <main>
  bx  lr
 80017ee:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 80017f0:	24080000 	.word	0x24080000
  ldr r0, =_sdata
 80017f4:	24000000 	.word	0x24000000
  ldr r1, =_edata
 80017f8:	2400012c 	.word	0x2400012c
  ldr r2, =_sidata
 80017fc:	080307a0 	.word	0x080307a0
  ldr r2, =_sbss
 8001800:	2400012c 	.word	0x2400012c
  ldr r4, =_ebss
 8001804:	2400bc64 	.word	0x2400bc64

08001808 <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001808:	e7fe      	b.n	8001808 <ADC3_IRQHandler>

0800180a <MX_TouchGFX_Init>:

/**
 * Initialize TouchGFX application
 */
void MX_TouchGFX_Init(void)
{
 800180a:	b580      	push	{r7, lr}
 800180c:	af00      	add	r7, sp, #0
  // Calling forward to touchgfx_init in C++ domain
  touchgfx_init();
 800180e:	f001 fc5f 	bl	80030d0 <touchgfx_init>
}
 8001812:	bf00      	nop
 8001814:	bd80      	pop	{r7, pc}

08001816 <TouchGFX_Task>:

/**
 * TouchGFX application thread
 */
void TouchGFX_Task(void *argument)
{
 8001816:	b580      	push	{r7, lr}
 8001818:	b082      	sub	sp, #8
 800181a:	af00      	add	r7, sp, #0
 800181c:	6078      	str	r0, [r7, #4]
  // Calling forward to touchgfx_taskEntry in C++ domain
  touchgfx_taskEntry();
 800181e:	f001 fc81 	bl	8003124 <touchgfx_taskEntry>
}
 8001822:	bf00      	nop
 8001824:	3708      	adds	r7, #8
 8001826:	46bd      	mov	sp, r7
 8001828:	bd80      	pop	{r7, pc}
	...

0800182c <_ZN8touchgfx15TouchControllerD1Ev>:
/** Basic Touch Controller interface. */
class TouchController
{
public:
    /** Finalizes an instance of the TouchController class. */
    virtual ~TouchController()
 800182c:	b480      	push	{r7}
 800182e:	b083      	sub	sp, #12
 8001830:	af00      	add	r7, sp, #0
 8001832:	6078      	str	r0, [r7, #4]
    {
 8001834:	4a04      	ldr	r2, [pc, #16]	@ (8001848 <_ZN8touchgfx15TouchControllerD1Ev+0x1c>)
 8001836:	687b      	ldr	r3, [r7, #4]
 8001838:	601a      	str	r2, [r3, #0]
    }
 800183a:	687b      	ldr	r3, [r7, #4]
 800183c:	4618      	mov	r0, r3
 800183e:	370c      	adds	r7, #12
 8001840:	46bd      	mov	sp, r7
 8001842:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001846:	4770      	bx	lr
 8001848:	0802cab8 	.word	0x0802cab8

0800184c <_ZN8touchgfx15TouchControllerD0Ev>:
    virtual ~TouchController()
 800184c:	b580      	push	{r7, lr}
 800184e:	b082      	sub	sp, #8
 8001850:	af00      	add	r7, sp, #0
 8001852:	6078      	str	r0, [r7, #4]
    }
 8001854:	6878      	ldr	r0, [r7, #4]
 8001856:	f7ff ffe9 	bl	800182c <_ZN8touchgfx15TouchControllerD1Ev>
 800185a:	2104      	movs	r1, #4
 800185c:	6878      	ldr	r0, [r7, #4]
 800185e:	f029 f9c2 	bl	802abe6 <_ZdlPvj>
 8001862:	687b      	ldr	r3, [r7, #4]
 8001864:	4618      	mov	r0, r3
 8001866:	3708      	adds	r7, #8
 8001868:	46bd      	mov	sp, r7
 800186a:	bd80      	pop	{r7, pc}

0800186c <_ZN20STM32TouchController4initEv>:

#include <STM32TouchController.hpp>
#include "stm32h745i_touchcontroller.hpp"

void STM32TouchController::init()
{
 800186c:	b580      	push	{r7, lr}
 800186e:	b082      	sub	sp, #8
 8001870:	af00      	add	r7, sp, #0
 8001872:	6078      	str	r0, [r7, #4]
    /**
     * Initialize touch controller and driver
     *
     */
    STM32H745ITouchController::init();
 8001874:	f000 faa8 	bl	8001dc8 <_ZN25STM32H745ITouchController4initEv>
}
 8001878:	bf00      	nop
 800187a:	3708      	adds	r7, #8
 800187c:	46bd      	mov	sp, r7
 800187e:	bd80      	pop	{r7, pc}

08001880 <_ZN20STM32TouchController11sampleTouchERlS0_>:

bool STM32TouchController::sampleTouch(int32_t& x, int32_t& y)
{
 8001880:	b580      	push	{r7, lr}
 8001882:	b084      	sub	sp, #16
 8001884:	af00      	add	r7, sp, #0
 8001886:	60f8      	str	r0, [r7, #12]
 8001888:	60b9      	str	r1, [r7, #8]
 800188a:	607a      	str	r2, [r7, #4]
     *
     * This function is called by the TouchGFX framework.
     * By default sampleTouch is called every tick, this can be adjusted by HAL::setTouchSampleRate(int8_t);
     *
     */
    return STM32H745ITouchController::sampleTouch(x, y);
 800188c:	6879      	ldr	r1, [r7, #4]
 800188e:	68b8      	ldr	r0, [r7, #8]
 8001890:	f000 fabe 	bl	8001e10 <_ZN25STM32H745ITouchController11sampleTouchERlS0_>
 8001894:	4603      	mov	r3, r0
}
 8001896:	4618      	mov	r0, r3
 8001898:	3710      	adds	r7, #16
 800189a:	46bd      	mov	sp, r7
 800189c:	bd80      	pop	{r7, pc}
	...

080018a0 <_ZN20STM32TouchControllerD1Ev>:
 * @brief This class specializes TouchController Interface.
 *
 * @sa touchgfx::TouchController
 */

class STM32TouchController : public touchgfx::TouchController
 80018a0:	b580      	push	{r7, lr}
 80018a2:	b082      	sub	sp, #8
 80018a4:	af00      	add	r7, sp, #0
 80018a6:	6078      	str	r0, [r7, #4]
 80018a8:	4a05      	ldr	r2, [pc, #20]	@ (80018c0 <_ZN20STM32TouchControllerD1Ev+0x20>)
 80018aa:	687b      	ldr	r3, [r7, #4]
 80018ac:	601a      	str	r2, [r3, #0]
 80018ae:	687b      	ldr	r3, [r7, #4]
 80018b0:	4618      	mov	r0, r3
 80018b2:	f7ff ffbb 	bl	800182c <_ZN8touchgfx15TouchControllerD1Ev>
 80018b6:	687b      	ldr	r3, [r7, #4]
 80018b8:	4618      	mov	r0, r3
 80018ba:	3708      	adds	r7, #8
 80018bc:	46bd      	mov	sp, r7
 80018be:	bd80      	pop	{r7, pc}
 80018c0:	0802caa0 	.word	0x0802caa0

080018c4 <_ZN20STM32TouchControllerD0Ev>:
 80018c4:	b580      	push	{r7, lr}
 80018c6:	b082      	sub	sp, #8
 80018c8:	af00      	add	r7, sp, #0
 80018ca:	6078      	str	r0, [r7, #4]
 80018cc:	6878      	ldr	r0, [r7, #4]
 80018ce:	f7ff ffe7 	bl	80018a0 <_ZN20STM32TouchControllerD1Ev>
 80018d2:	2104      	movs	r1, #4
 80018d4:	6878      	ldr	r0, [r7, #4]
 80018d6:	f029 f986 	bl	802abe6 <_ZdlPvj>
 80018da:	687b      	ldr	r3, [r7, #4]
 80018dc:	4618      	mov	r0, r3
 80018de:	3708      	adds	r7, #8
 80018e0:	46bd      	mov	sp, r7
 80018e2:	bd80      	pop	{r7, pc}

080018e4 <_ZN8touchgfx4GPIO3setENS0_7GPIO_IDE>:

/*
 * Sets a pin high.
 */
void GPIO::set(GPIO_ID id)
{
 80018e4:	b480      	push	{r7}
 80018e6:	b083      	sub	sp, #12
 80018e8:	af00      	add	r7, sp, #0
 80018ea:	4603      	mov	r3, r0
 80018ec:	71fb      	strb	r3, [r7, #7]
    switch (id)
 80018ee:	79fb      	ldrb	r3, [r7, #7]
 80018f0:	2b03      	cmp	r3, #3
 80018f2:	d80c      	bhi.n	800190e <_ZN8touchgfx4GPIO3setENS0_7GPIO_IDE+0x2a>
 80018f4:	a201      	add	r2, pc, #4	@ (adr r2, 80018fc <_ZN8touchgfx4GPIO3setENS0_7GPIO_IDE+0x18>)
 80018f6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80018fa:	bf00      	nop
 80018fc:	0800190d 	.word	0x0800190d
 8001900:	0800190d 	.word	0x0800190d
 8001904:	0800190d 	.word	0x0800190d
 8001908:	0800190d 	.word	0x0800190d
    {
    case GPIO::VSYNC_FREQ:
#if defined(VSYNC_FREQ_GPIO_Port) && defined(VSYNC_FREQ_Pin)
        HAL_GPIO_WritePin(VSYNC_FREQ_GPIO_Port, VSYNC_FREQ_Pin, M_GPIO_PIN_SET(id));
#endif
        break;
 800190c:	bf00      	nop
#if defined(MCU_ACTIVE_GPIO_Port) && defined(MCU_ACTIVE_Pin)
        HAL_GPIO_WritePin(MCU_ACTIVE_GPIO_Port, MCU_ACTIVE_Pin, M_GPIO_PIN_SET(id));
#endif
        break;
    }
}
 800190e:	bf00      	nop
 8001910:	370c      	adds	r7, #12
 8001912:	46bd      	mov	sp, r7
 8001914:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001918:	4770      	bx	lr
 800191a:	bf00      	nop

0800191c <_ZN8touchgfx4GPIO5clearENS0_7GPIO_IDE>:

/*
 * Sets a pin low.
 */
void GPIO::clear(GPIO_ID id)
{
 800191c:	b480      	push	{r7}
 800191e:	b083      	sub	sp, #12
 8001920:	af00      	add	r7, sp, #0
 8001922:	4603      	mov	r3, r0
 8001924:	71fb      	strb	r3, [r7, #7]
    switch (id)
 8001926:	79fb      	ldrb	r3, [r7, #7]
 8001928:	2b03      	cmp	r3, #3
 800192a:	d80c      	bhi.n	8001946 <_ZN8touchgfx4GPIO5clearENS0_7GPIO_IDE+0x2a>
 800192c:	a201      	add	r2, pc, #4	@ (adr r2, 8001934 <_ZN8touchgfx4GPIO5clearENS0_7GPIO_IDE+0x18>)
 800192e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001932:	bf00      	nop
 8001934:	08001945 	.word	0x08001945
 8001938:	08001945 	.word	0x08001945
 800193c:	08001945 	.word	0x08001945
 8001940:	08001945 	.word	0x08001945
    {
    case GPIO::VSYNC_FREQ:
#if defined(VSYNC_FREQ_GPIO_Port) && defined(VSYNC_FREQ_Pin)
        HAL_GPIO_WritePin(VSYNC_FREQ_GPIO_Port, VSYNC_FREQ_Pin, M_GPIO_PIN_RESET(id));
#endif
        break;
 8001944:	bf00      	nop
#if defined(MCU_ACTIVE_GPIO_Port) && defined(MCU_ACTIVE_Pin)
        HAL_GPIO_WritePin(MCU_ACTIVE_GPIO_Port, MCU_ACTIVE_Pin, M_GPIO_PIN_RESET(id));
#endif
        break;
    }
}
 8001946:	bf00      	nop
 8001948:	370c      	adds	r7, #12
 800194a:	46bd      	mov	sp, r7
 800194c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001950:	4770      	bx	lr
 8001952:	bf00      	nop

08001954 <_ZN8touchgfx4GPIO6toggleENS0_7GPIO_IDE>:

/*
 * Toggles a pin.
 */
void GPIO::toggle(GPIO_ID id)
{
 8001954:	b480      	push	{r7}
 8001956:	b083      	sub	sp, #12
 8001958:	af00      	add	r7, sp, #0
 800195a:	4603      	mov	r3, r0
 800195c:	71fb      	strb	r3, [r7, #7]
    switch (id)
 800195e:	79fb      	ldrb	r3, [r7, #7]
 8001960:	2b03      	cmp	r3, #3
 8001962:	d80c      	bhi.n	800197e <_ZN8touchgfx4GPIO6toggleENS0_7GPIO_IDE+0x2a>
 8001964:	a201      	add	r2, pc, #4	@ (adr r2, 800196c <_ZN8touchgfx4GPIO6toggleENS0_7GPIO_IDE+0x18>)
 8001966:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800196a:	bf00      	nop
 800196c:	0800197d 	.word	0x0800197d
 8001970:	0800197d 	.word	0x0800197d
 8001974:	0800197d 	.word	0x0800197d
 8001978:	0800197d 	.word	0x0800197d
    {
    case GPIO::VSYNC_FREQ:
#if defined(VSYNC_FREQ_GPIO_Port) && defined(VSYNC_FREQ_Pin)
        HAL_GPIO_TogglePin(VSYNC_FREQ_GPIO_Port, VSYNC_FREQ_Pin);
#endif
        break;
 800197c:	bf00      	nop
#if defined(MCU_ACTIVE_GPIO_Port) && defined(MCU_ACTIVE_Pin)
        HAL_GPIO_TogglePin(MCU_ACTIVE_GPIO_Port, MCU_ACTIVE_Pin);
#endif
        break;
    }
}
 800197e:	bf00      	nop
 8001980:	370c      	adds	r7, #12
 8001982:	46bd      	mov	sp, r7
 8001984:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001988:	4770      	bx	lr
 800198a:	bf00      	nop

0800198c <_ZN8touchgfx3HALD1Ev>:
        DISPLAY_ROTATION = rotate0;
        nativeDisplayOrientation = ((width >= height) ? ORIENTATION_LANDSCAPE : ORIENTATION_PORTRAIT);
    }

    /** Finalizes an instance of the HAL class. */
    virtual ~HAL()
 800198c:	b480      	push	{r7}
 800198e:	b083      	sub	sp, #12
 8001990:	af00      	add	r7, sp, #0
 8001992:	6078      	str	r0, [r7, #4]
    {
 8001994:	4a04      	ldr	r2, [pc, #16]	@ (80019a8 <_ZN8touchgfx3HALD1Ev+0x1c>)
 8001996:	687b      	ldr	r3, [r7, #4]
 8001998:	601a      	str	r2, [r3, #0]
    }
 800199a:	687b      	ldr	r3, [r7, #4]
 800199c:	4618      	mov	r0, r3
 800199e:	370c      	adds	r7, #12
 80019a0:	46bd      	mov	sp, r7
 80019a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019a6:	4770      	bx	lr
 80019a8:	0802e380 	.word	0x0802e380

080019ac <_ZN8touchgfx3HALD0Ev>:
    virtual ~HAL()
 80019ac:	b580      	push	{r7, lr}
 80019ae:	b082      	sub	sp, #8
 80019b0:	af00      	add	r7, sp, #0
 80019b2:	6078      	str	r0, [r7, #4]
    }
 80019b4:	6878      	ldr	r0, [r7, #4]
 80019b6:	f7ff ffe9 	bl	800198c <_ZN8touchgfx3HALD1Ev>
 80019ba:	217c      	movs	r1, #124	@ 0x7c
 80019bc:	6878      	ldr	r0, [r7, #4]
 80019be:	f029 f912 	bl	802abe6 <_ZdlPvj>
 80019c2:	687b      	ldr	r3, [r7, #4]
 80019c4:	4618      	mov	r0, r3
 80019c6:	3708      	adds	r7, #8
 80019c8:	46bd      	mov	sp, r7
 80019ca:	bd80      	pop	{r7, pc}

080019cc <_ZN8touchgfx3HAL21setDisplayOrientationENS_18DisplayOrientationE>:
     *
     * @param  orientation The desired display orientation.
     *
     * @note A screen transition must occur before this takes effect!
     */
    virtual void setDisplayOrientation(DisplayOrientation orientation)
 80019cc:	b480      	push	{r7}
 80019ce:	b083      	sub	sp, #12
 80019d0:	af00      	add	r7, sp, #0
 80019d2:	6078      	str	r0, [r7, #4]
 80019d4:	460b      	mov	r3, r1
 80019d6:	70fb      	strb	r3, [r7, #3]
    {
        requestedOrientation = orientation;
 80019d8:	687b      	ldr	r3, [r7, #4]
 80019da:	78fa      	ldrb	r2, [r7, #3]
 80019dc:	f883 2074 	strb.w	r2, [r3, #116]	@ 0x74
        displayOrientationChangeRequested = true;
 80019e0:	687b      	ldr	r3, [r7, #4]
 80019e2:	2201      	movs	r2, #1
 80019e4:	f883 2075 	strb.w	r2, [r3, #117]	@ 0x75
    }
 80019e8:	bf00      	nop
 80019ea:	370c      	adds	r7, #12
 80019ec:	46bd      	mov	sp, r7
 80019ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019f2:	4770      	bx	lr

080019f4 <_ZN8touchgfx3HAL18setFrameBufferSizeEtt>:
     * @param   width   The width of the framebuffer.
     * @param   height  The height of the framebuffer.
     *
     * @see touchgfx_generic_init
     */
    virtual void setFrameBufferSize(uint16_t width, uint16_t height)
 80019f4:	b580      	push	{r7, lr}
 80019f6:	b082      	sub	sp, #8
 80019f8:	af00      	add	r7, sp, #0
 80019fa:	6078      	str	r0, [r7, #4]
 80019fc:	460b      	mov	r3, r1
 80019fe:	807b      	strh	r3, [r7, #2]
 8001a00:	4613      	mov	r3, r2
 8001a02:	803b      	strh	r3, [r7, #0]
    {
        assert(width >= DISPLAY_WIDTH && height >= DISPLAY_HEIGHT && "Framebuffer cannot be smaller than display");
 8001a04:	4b0c      	ldr	r3, [pc, #48]	@ (8001a38 <_ZN8touchgfx3HAL18setFrameBufferSizeEtt+0x44>)
 8001a06:	881b      	ldrh	r3, [r3, #0]
 8001a08:	887a      	ldrh	r2, [r7, #2]
 8001a0a:	429a      	cmp	r2, r3
 8001a0c:	d304      	bcc.n	8001a18 <_ZN8touchgfx3HAL18setFrameBufferSizeEtt+0x24>
 8001a0e:	4b0b      	ldr	r3, [pc, #44]	@ (8001a3c <_ZN8touchgfx3HAL18setFrameBufferSizeEtt+0x48>)
 8001a10:	881b      	ldrh	r3, [r3, #0]
 8001a12:	883a      	ldrh	r2, [r7, #0]
 8001a14:	429a      	cmp	r2, r3
 8001a16:	d205      	bcs.n	8001a24 <_ZN8touchgfx3HAL18setFrameBufferSizeEtt+0x30>
 8001a18:	4b09      	ldr	r3, [pc, #36]	@ (8001a40 <_ZN8touchgfx3HAL18setFrameBufferSizeEtt+0x4c>)
 8001a1a:	4a0a      	ldr	r2, [pc, #40]	@ (8001a44 <_ZN8touchgfx3HAL18setFrameBufferSizeEtt+0x50>)
 8001a1c:	219e      	movs	r1, #158	@ 0x9e
 8001a1e:	480a      	ldr	r0, [pc, #40]	@ (8001a48 <_ZN8touchgfx3HAL18setFrameBufferSizeEtt+0x54>)
 8001a20:	f029 f910 	bl	802ac44 <__assert_func>
        FRAME_BUFFER_WIDTH = width;
 8001a24:	4a09      	ldr	r2, [pc, #36]	@ (8001a4c <_ZN8touchgfx3HAL18setFrameBufferSizeEtt+0x58>)
 8001a26:	887b      	ldrh	r3, [r7, #2]
 8001a28:	8013      	strh	r3, [r2, #0]
        FRAME_BUFFER_HEIGHT = height;
 8001a2a:	4a09      	ldr	r2, [pc, #36]	@ (8001a50 <_ZN8touchgfx3HAL18setFrameBufferSizeEtt+0x5c>)
 8001a2c:	883b      	ldrh	r3, [r7, #0]
 8001a2e:	8013      	strh	r3, [r2, #0]
    }
 8001a30:	bf00      	nop
 8001a32:	3708      	adds	r7, #8
 8001a34:	46bd      	mov	sp, r7
 8001a36:	bd80      	pop	{r7, pc}
 8001a38:	2400b878 	.word	0x2400b878
 8001a3c:	2400b87a 	.word	0x2400b87a
 8001a40:	0802bd64 	.word	0x0802bd64
 8001a44:	0802bdc8 	.word	0x0802bdc8
 8001a48:	0802be0c 	.word	0x0802be0c
 8001a4c:	2400b87e 	.word	0x2400b87e
 8001a50:	2400b880 	.word	0x2400b880

08001a54 <_ZN8touchgfx3HAL11getBlitCapsEv>:
     *
     * @return a bitmask of the supported blitcaps.
     *
     * @see enableDMAAcceleration
     */
    virtual BlitOperations getBlitCaps()
 8001a54:	b580      	push	{r7, lr}
 8001a56:	b082      	sub	sp, #8
 8001a58:	af00      	add	r7, sp, #0
 8001a5a:	6078      	str	r0, [r7, #4]
    {
        if (useDMAAcceleration)
 8001a5c:	687b      	ldr	r3, [r7, #4]
 8001a5e:	f893 3077 	ldrb.w	r3, [r3, #119]	@ 0x77
 8001a62:	2b00      	cmp	r3, #0
 8001a64:	d009      	beq.n	8001a7a <_ZN8touchgfx3HAL11getBlitCapsEv+0x26>
        {
            return dma.getBlitCaps();
 8001a66:	687b      	ldr	r3, [r7, #4]
 8001a68:	685a      	ldr	r2, [r3, #4]
 8001a6a:	687b      	ldr	r3, [r7, #4]
 8001a6c:	685b      	ldr	r3, [r3, #4]
 8001a6e:	681b      	ldr	r3, [r3, #0]
 8001a70:	681b      	ldr	r3, [r3, #0]
 8001a72:	4610      	mov	r0, r2
 8001a74:	4798      	blx	r3
 8001a76:	4603      	mov	r3, r0
 8001a78:	e000      	b.n	8001a7c <_ZN8touchgfx3HAL11getBlitCapsEv+0x28>
        }
        return static_cast<BlitOperations>(0);
 8001a7a:	2300      	movs	r3, #0
    }
 8001a7c:	4618      	mov	r0, r3
 8001a7e:	3708      	adds	r7, #8
 8001a80:	46bd      	mov	sp, r7
 8001a82:	bd80      	pop	{r7, pc}

08001a84 <_ZN8touchgfx3HAL15backPorchExitedEv>:
    /**
     * Has to be called from within the LCD IRQ rutine when the Back Porch Exit is reached.
     *
     * Has to be called from within the LCD IRQ rutine when the Back Porch Exit is reached.
     */
    virtual void backPorchExited()
 8001a84:	b580      	push	{r7, lr}
 8001a86:	b082      	sub	sp, #8
 8001a88:	af00      	add	r7, sp, #0
 8001a8a:	6078      	str	r0, [r7, #4]
    {
        swapFrameBuffers();
 8001a8c:	6878      	ldr	r0, [r7, #4]
 8001a8e:	f017 fc29 	bl	80192e4 <_ZN8touchgfx3HAL16swapFrameBuffersEv>
        tick();
 8001a92:	687b      	ldr	r3, [r7, #4]
 8001a94:	681b      	ldr	r3, [r3, #0]
 8001a96:	33a4      	adds	r3, #164	@ 0xa4
 8001a98:	681b      	ldr	r3, [r3, #0]
 8001a9a:	6878      	ldr	r0, [r7, #4]
 8001a9c:	4798      	blx	r3
    }
 8001a9e:	bf00      	nop
 8001aa0:	3708      	adds	r7, #8
 8001aa2:	46bd      	mov	sp, r7
 8001aa4:	bd80      	pop	{r7, pc}

08001aa6 <_ZN8touchgfx3HAL9sampleKeyERh>:
     * @param [out] key Output parameter that will be set to the key value if a keypress was
     *                  detected.
     *
     * @return True if a keypress was detected and the "key" parameter is set to a value.
     */
    virtual bool sampleKey(uint8_t& key)
 8001aa6:	b480      	push	{r7}
 8001aa8:	b083      	sub	sp, #12
 8001aaa:	af00      	add	r7, sp, #0
 8001aac:	6078      	str	r0, [r7, #4]
 8001aae:	6039      	str	r1, [r7, #0]
    {
        return false;
 8001ab0:	2300      	movs	r3, #0
    }
 8001ab2:	4618      	mov	r0, r3
 8001ab4:	370c      	adds	r7, #12
 8001ab6:	46bd      	mov	sp, r7
 8001ab8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001abc:	4770      	bx	lr
	...

08001ac0 <_ZN8touchgfx3HAL28setFrameBufferStartAddressesEPvS1_S1_>:
     * @param [in] doubleBuffer     If non-null, buffer for double buffer data. If null double
     *                              buffering is disabled.
     * @param [in] animationStorage If non-null, the animation storage. If null animation storage
     *                              is disabled.
     */
    virtual void setFrameBufferStartAddresses(void* frameBuffer, void* doubleBuffer, void* animationStorage)
 8001ac0:	b580      	push	{r7, lr}
 8001ac2:	b084      	sub	sp, #16
 8001ac4:	af00      	add	r7, sp, #0
 8001ac6:	60f8      	str	r0, [r7, #12]
 8001ac8:	60b9      	str	r1, [r7, #8]
 8001aca:	607a      	str	r2, [r7, #4]
 8001acc:	603b      	str	r3, [r7, #0]
    {
        assert(frameBuffer != 0 && "A framebuffer address must be set");
 8001ace:	68bb      	ldr	r3, [r7, #8]
 8001ad0:	2b00      	cmp	r3, #0
 8001ad2:	d106      	bne.n	8001ae2 <_ZN8touchgfx3HAL28setFrameBufferStartAddressesEPvS1_S1_+0x22>
 8001ad4:	4b11      	ldr	r3, [pc, #68]	@ (8001b1c <_ZN8touchgfx3HAL28setFrameBufferStartAddressesEPvS1_S1_+0x5c>)
 8001ad6:	4a12      	ldr	r2, [pc, #72]	@ (8001b20 <_ZN8touchgfx3HAL28setFrameBufferStartAddressesEPvS1_S1_+0x60>)
 8001ad8:	f44f 712b 	mov.w	r1, #684	@ 0x2ac
 8001adc:	4811      	ldr	r0, [pc, #68]	@ (8001b24 <_ZN8touchgfx3HAL28setFrameBufferStartAddressesEPvS1_S1_+0x64>)
 8001ade:	f029 f8b1 	bl	802ac44 <__assert_func>
        frameBuffer0 = reinterpret_cast<uint16_t*>(frameBuffer);
 8001ae2:	68fb      	ldr	r3, [r7, #12]
 8001ae4:	68ba      	ldr	r2, [r7, #8]
 8001ae6:	63da      	str	r2, [r3, #60]	@ 0x3c
        frameBuffer1 = reinterpret_cast<uint16_t*>(doubleBuffer);
 8001ae8:	68fb      	ldr	r3, [r7, #12]
 8001aea:	687a      	ldr	r2, [r7, #4]
 8001aec:	641a      	str	r2, [r3, #64]	@ 0x40
        frameBuffer2 = reinterpret_cast<uint16_t*>(animationStorage);
 8001aee:	68fb      	ldr	r3, [r7, #12]
 8001af0:	683a      	ldr	r2, [r7, #0]
 8001af2:	645a      	str	r2, [r3, #68]	@ 0x44
        USE_DOUBLE_BUFFERING = doubleBuffer != 0;
 8001af4:	687b      	ldr	r3, [r7, #4]
 8001af6:	2b00      	cmp	r3, #0
 8001af8:	bf14      	ite	ne
 8001afa:	2301      	movne	r3, #1
 8001afc:	2300      	moveq	r3, #0
 8001afe:	b2da      	uxtb	r2, r3
 8001b00:	4b09      	ldr	r3, [pc, #36]	@ (8001b28 <_ZN8touchgfx3HAL28setFrameBufferStartAddressesEPvS1_S1_+0x68>)
 8001b02:	701a      	strb	r2, [r3, #0]
        USE_ANIMATION_STORAGE = animationStorage != 0;
 8001b04:	683b      	ldr	r3, [r7, #0]
 8001b06:	2b00      	cmp	r3, #0
 8001b08:	bf14      	ite	ne
 8001b0a:	2301      	movne	r3, #1
 8001b0c:	2300      	moveq	r3, #0
 8001b0e:	b2da      	uxtb	r2, r3
 8001b10:	4b06      	ldr	r3, [pc, #24]	@ (8001b2c <_ZN8touchgfx3HAL28setFrameBufferStartAddressesEPvS1_S1_+0x6c>)
 8001b12:	701a      	strb	r2, [r3, #0]
    }
 8001b14:	bf00      	nop
 8001b16:	3710      	adds	r7, #16
 8001b18:	46bd      	mov	sp, r7
 8001b1a:	bd80      	pop	{r7, pc}
 8001b1c:	0802be54 	.word	0x0802be54
 8001b20:	0802be8c 	.word	0x0802be8c
 8001b24:	0802be0c 	.word	0x0802be0c
 8001b28:	2400b882 	.word	0x2400b882
 8001b2c:	2400b883 	.word	0x2400b883

08001b30 <_ZNK8touchgfx3HAL18getFlashDataReaderEv>:
     * Gets the flash data reader. This method must be implemented in
     * subclasses that uses a FlashDataReader object.
     *
     * @return the FlashDataReader.
     */
    virtual FlashDataReader* getFlashDataReader() const
 8001b30:	b480      	push	{r7}
 8001b32:	b083      	sub	sp, #12
 8001b34:	af00      	add	r7, sp, #0
 8001b36:	6078      	str	r0, [r7, #4]
    {
        return 0;
 8001b38:	2300      	movs	r3, #0
    }
 8001b3a:	4618      	mov	r0, r3
 8001b3c:	370c      	adds	r7, #12
 8001b3e:	46bd      	mov	sp, r7
 8001b40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b44:	4770      	bx	lr

08001b46 <_ZN8touchgfx3HAL9taskDelayEt>:
     *
     * @param  ms Number of milliseconds to wait.
     *
     * @see registerTaskDelayFunction
     */
    virtual void taskDelay(uint16_t ms)
 8001b46:	b580      	push	{r7, lr}
 8001b48:	b082      	sub	sp, #8
 8001b4a:	af00      	add	r7, sp, #0
 8001b4c:	6078      	str	r0, [r7, #4]
 8001b4e:	460b      	mov	r3, r1
 8001b50:	807b      	strh	r3, [r7, #2]
    {
        if (taskDelayFunc)
 8001b52:	687b      	ldr	r3, [r7, #4]
 8001b54:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001b56:	2b00      	cmp	r3, #0
 8001b58:	d004      	beq.n	8001b64 <_ZN8touchgfx3HAL9taskDelayEt+0x1e>
        {
            taskDelayFunc(ms);
 8001b5a:	687b      	ldr	r3, [r7, #4]
 8001b5c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001b5e:	887a      	ldrh	r2, [r7, #2]
 8001b60:	4610      	mov	r0, r2
 8001b62:	4798      	blx	r3
        }
    }
 8001b64:	bf00      	nop
 8001b66:	3708      	adds	r7, #8
 8001b68:	46bd      	mov	sp, r7
 8001b6a:	bd80      	pop	{r7, pc}

08001b6c <_ZN8touchgfx3HAL17getTFTCurrentLineEv>:
     * getTFTCurrentLine function is never called and can be disregarded.
     *
     * @return In this default implementation, 0xFFFF is returned to signify "not
     *         implemented".
     */
    virtual uint16_t getTFTCurrentLine()
 8001b6c:	b480      	push	{r7}
 8001b6e:	b083      	sub	sp, #12
 8001b70:	af00      	add	r7, sp, #0
 8001b72:	6078      	str	r0, [r7, #4]
    {
        return 0xFFFFu;
 8001b74:	f64f 73ff 	movw	r3, #65535	@ 0xffff
    }
 8001b78:	4618      	mov	r0, r3
 8001b7a:	370c      	adds	r7, #12
 8001b7c:	46bd      	mov	sp, r7
 8001b7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b82:	4770      	bx	lr

08001b84 <_ZN8touchgfx3HAL10getDMATypeEv>:
     * Function for obtaining the DMA type of the concrete DMA implementation. As default,
     * will return DMA_TYPE_GENERIC type value.
     *
     * @return a DMAType value of the concrete DMA implementation.
     */
    virtual DMAType getDMAType()
 8001b84:	b580      	push	{r7, lr}
 8001b86:	b082      	sub	sp, #8
 8001b88:	af00      	add	r7, sp, #0
 8001b8a:	6078      	str	r0, [r7, #4]
    {
        return dma.getDMAType();
 8001b8c:	687b      	ldr	r3, [r7, #4]
 8001b8e:	685a      	ldr	r2, [r3, #4]
 8001b90:	687b      	ldr	r3, [r7, #4]
 8001b92:	685b      	ldr	r3, [r3, #4]
 8001b94:	681b      	ldr	r3, [r3, #0]
 8001b96:	3318      	adds	r3, #24
 8001b98:	681b      	ldr	r3, [r3, #0]
 8001b9a:	4610      	mov	r0, r2
 8001b9c:	4798      	blx	r3
 8001b9e:	4603      	mov	r3, r0
    }
 8001ba0:	4618      	mov	r0, r3
 8001ba2:	3708      	adds	r7, #8
 8001ba4:	46bd      	mov	sp, r7
 8001ba6:	bd80      	pop	{r7, pc}

08001ba8 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv>:

    /** Called by the touch driver to indicate that no touch is currently detected. */
    virtual void noTouch();

    /** Perform the actual display orientation change. */
    virtual void performDisplayOrientationChange()
 8001ba8:	b480      	push	{r7}
 8001baa:	b085      	sub	sp, #20
 8001bac:	af00      	add	r7, sp, #0
 8001bae:	6078      	str	r0, [r7, #4]
    {
        if (requestedOrientation != nativeDisplayOrientation)
 8001bb0:	687b      	ldr	r3, [r7, #4]
 8001bb2:	f893 2074 	ldrb.w	r2, [r3, #116]	@ 0x74
 8001bb6:	687b      	ldr	r3, [r7, #4]
 8001bb8:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 8001bbc:	429a      	cmp	r2, r3
 8001bbe:	d011      	beq.n	8001be4 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x3c>
        {
            if (DISPLAY_ROTATION == rotate0)
 8001bc0:	4b14      	ldr	r3, [pc, #80]	@ (8001c14 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x6c>)
 8001bc2:	781b      	ldrb	r3, [r3, #0]
 8001bc4:	2b00      	cmp	r3, #0
 8001bc6:	d11e      	bne.n	8001c06 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x5e>
            {
                const uint16_t tmp = DISPLAY_HEIGHT;
 8001bc8:	4b13      	ldr	r3, [pc, #76]	@ (8001c18 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x70>)
 8001bca:	881b      	ldrh	r3, [r3, #0]
 8001bcc:	81bb      	strh	r3, [r7, #12]
                DISPLAY_HEIGHT = DISPLAY_WIDTH;
 8001bce:	4b13      	ldr	r3, [pc, #76]	@ (8001c1c <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x74>)
 8001bd0:	881a      	ldrh	r2, [r3, #0]
 8001bd2:	4b11      	ldr	r3, [pc, #68]	@ (8001c18 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x70>)
 8001bd4:	801a      	strh	r2, [r3, #0]
                DISPLAY_WIDTH = tmp;
 8001bd6:	4a11      	ldr	r2, [pc, #68]	@ (8001c1c <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x74>)
 8001bd8:	89bb      	ldrh	r3, [r7, #12]
 8001bda:	8013      	strh	r3, [r2, #0]
                DISPLAY_ROTATION = rotate90;
 8001bdc:	4b0d      	ldr	r3, [pc, #52]	@ (8001c14 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x6c>)
 8001bde:	2201      	movs	r2, #1
 8001be0:	701a      	strb	r2, [r3, #0]
            const uint16_t tmp = DISPLAY_HEIGHT;
            DISPLAY_HEIGHT = DISPLAY_WIDTH;
            DISPLAY_WIDTH = tmp;
            DISPLAY_ROTATION = rotate0;
        }
    }
 8001be2:	e010      	b.n	8001c06 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x5e>
        else if (DISPLAY_ROTATION != rotate0)
 8001be4:	4b0b      	ldr	r3, [pc, #44]	@ (8001c14 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x6c>)
 8001be6:	781b      	ldrb	r3, [r3, #0]
 8001be8:	2b00      	cmp	r3, #0
 8001bea:	d00c      	beq.n	8001c06 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x5e>
            const uint16_t tmp = DISPLAY_HEIGHT;
 8001bec:	4b0a      	ldr	r3, [pc, #40]	@ (8001c18 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x70>)
 8001bee:	881b      	ldrh	r3, [r3, #0]
 8001bf0:	81fb      	strh	r3, [r7, #14]
            DISPLAY_HEIGHT = DISPLAY_WIDTH;
 8001bf2:	4b0a      	ldr	r3, [pc, #40]	@ (8001c1c <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x74>)
 8001bf4:	881a      	ldrh	r2, [r3, #0]
 8001bf6:	4b08      	ldr	r3, [pc, #32]	@ (8001c18 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x70>)
 8001bf8:	801a      	strh	r2, [r3, #0]
            DISPLAY_WIDTH = tmp;
 8001bfa:	4a08      	ldr	r2, [pc, #32]	@ (8001c1c <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x74>)
 8001bfc:	89fb      	ldrh	r3, [r7, #14]
 8001bfe:	8013      	strh	r3, [r2, #0]
            DISPLAY_ROTATION = rotate0;
 8001c00:	4b04      	ldr	r3, [pc, #16]	@ (8001c14 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x6c>)
 8001c02:	2200      	movs	r2, #0
 8001c04:	701a      	strb	r2, [r3, #0]
    }
 8001c06:	bf00      	nop
 8001c08:	3714      	adds	r7, #20
 8001c0a:	46bd      	mov	sp, r7
 8001c0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c10:	4770      	bx	lr
 8001c12:	bf00      	nop
 8001c14:	2400b87c 	.word	0x2400b87c
 8001c18:	2400b87a 	.word	0x2400b87a
 8001c1c:	2400b878 	.word	0x2400b878

08001c20 <_ZN20TouchGFXGeneratedHAL16flushFrameBufferEv>:
     *
     * This specialization is only in place to keep compilers happy. Base impl. will call the
     * Rect version.
     * @see HAL::flushFrameBuffer
     */
    virtual void flushFrameBuffer()
 8001c20:	b580      	push	{r7, lr}
 8001c22:	b082      	sub	sp, #8
 8001c24:	af00      	add	r7, sp, #0
 8001c26:	6078      	str	r0, [r7, #4]
    {
        HAL::flushFrameBuffer();
 8001c28:	687b      	ldr	r3, [r7, #4]
 8001c2a:	4618      	mov	r0, r3
 8001c2c:	f016 fd0f 	bl	801864e <_ZN8touchgfx3HAL16flushFrameBufferEv>
    }
 8001c30:	bf00      	nop
 8001c32:	3708      	adds	r7, #8
 8001c34:	46bd      	mov	sp, r7
 8001c36:	bd80      	pop	{r7, pc}

08001c38 <_ZN20TouchGFXGeneratedHALD1Ev>:
class TouchGFXGeneratedHAL : public touchgfx::HAL
 8001c38:	b580      	push	{r7, lr}
 8001c3a:	b082      	sub	sp, #8
 8001c3c:	af00      	add	r7, sp, #0
 8001c3e:	6078      	str	r0, [r7, #4]
 8001c40:	4a05      	ldr	r2, [pc, #20]	@ (8001c58 <_ZN20TouchGFXGeneratedHALD1Ev+0x20>)
 8001c42:	687b      	ldr	r3, [r7, #4]
 8001c44:	601a      	str	r2, [r3, #0]
 8001c46:	687b      	ldr	r3, [r7, #4]
 8001c48:	4618      	mov	r0, r3
 8001c4a:	f7ff fe9f 	bl	800198c <_ZN8touchgfx3HALD1Ev>
 8001c4e:	687b      	ldr	r3, [r7, #4]
 8001c50:	4618      	mov	r0, r3
 8001c52:	3708      	adds	r7, #8
 8001c54:	46bd      	mov	sp, r7
 8001c56:	bd80      	pop	{r7, pc}
 8001c58:	0802ce20 	.word	0x0802ce20

08001c5c <_ZN20TouchGFXGeneratedHALD0Ev>:
 8001c5c:	b580      	push	{r7, lr}
 8001c5e:	b082      	sub	sp, #8
 8001c60:	af00      	add	r7, sp, #0
 8001c62:	6078      	str	r0, [r7, #4]
 8001c64:	6878      	ldr	r0, [r7, #4]
 8001c66:	f7ff ffe7 	bl	8001c38 <_ZN20TouchGFXGeneratedHALD1Ev>
 8001c6a:	217c      	movs	r1, #124	@ 0x7c
 8001c6c:	6878      	ldr	r0, [r7, #4]
 8001c6e:	f028 ffba 	bl	802abe6 <_ZdlPvj>
 8001c72:	687b      	ldr	r3, [r7, #4]
 8001c74:	4618      	mov	r0, r3
 8001c76:	3708      	adds	r7, #8
 8001c78:	46bd      	mov	sp, r7
 8001c7a:	bd80      	pop	{r7, pc}

08001c7c <_ZN11TouchGFXHAL16flushFrameBufferEv>:
     *
     * This specialization is only in place to keep compilers happy. Base impl. will call the
     * Rect version.
     * @see HAL::flushFrameBuffer
     */
    virtual void flushFrameBuffer()
 8001c7c:	b580      	push	{r7, lr}
 8001c7e:	b082      	sub	sp, #8
 8001c80:	af00      	add	r7, sp, #0
 8001c82:	6078      	str	r0, [r7, #4]
    {
        TouchGFXGeneratedHAL::flushFrameBuffer();
 8001c84:	687b      	ldr	r3, [r7, #4]
 8001c86:	4618      	mov	r0, r3
 8001c88:	f7ff ffca 	bl	8001c20 <_ZN20TouchGFXGeneratedHAL16flushFrameBufferEv>
    }
 8001c8c:	bf00      	nop
 8001c8e:	3708      	adds	r7, #8
 8001c90:	46bd      	mov	sp, r7
 8001c92:	bd80      	pop	{r7, pc}

08001c94 <_ZN11TouchGFXHAL10initializeEv>:
/* USER CODE BEGIN TouchGFXHAL.cpp */

using namespace touchgfx;

void TouchGFXHAL::initialize()
{
 8001c94:	b580      	push	{r7, lr}
 8001c96:	b082      	sub	sp, #8
 8001c98:	af00      	add	r7, sp, #0
 8001c9a:	6078      	str	r0, [r7, #4]
    //
    // To overwrite the generated implementation, omit call to parent function
    // and implemented needed functionality here.
    // Please note, HAL::initialize() must be called to initialize the framework.

    TouchGFXGeneratedHAL::initialize();
 8001c9c:	687b      	ldr	r3, [r7, #4]
 8001c9e:	4618      	mov	r0, r3
 8001ca0:	f001 fd30 	bl	8003704 <_ZN20TouchGFXGeneratedHAL10initializeEv>
}
 8001ca4:	bf00      	nop
 8001ca6:	3708      	adds	r7, #8
 8001ca8:	46bd      	mov	sp, r7
 8001caa:	bd80      	pop	{r7, pc}

08001cac <_ZNK11TouchGFXHAL17getTFTFrameBufferEv>:
 * Gets the frame buffer address used by the TFT controller.
 *
 * @return The address of the frame buffer currently being displayed on the TFT.
 */
uint16_t* TouchGFXHAL::getTFTFrameBuffer() const
{
 8001cac:	b580      	push	{r7, lr}
 8001cae:	b082      	sub	sp, #8
 8001cb0:	af00      	add	r7, sp, #0
 8001cb2:	6078      	str	r0, [r7, #4]
    // Calling parent implementation of getTFTFrameBuffer().
    //
    // To overwrite the generated implementation, omit call to parent function
    // and implemented needed functionality here.

    return TouchGFXGeneratedHAL::getTFTFrameBuffer();
 8001cb4:	687b      	ldr	r3, [r7, #4]
 8001cb6:	4618      	mov	r0, r3
 8001cb8:	f001 fdbc 	bl	8003834 <_ZNK20TouchGFXGeneratedHAL17getTFTFrameBufferEv>
 8001cbc:	4603      	mov	r3, r0
}
 8001cbe:	4618      	mov	r0, r3
 8001cc0:	3708      	adds	r7, #8
 8001cc2:	46bd      	mov	sp, r7
 8001cc4:	bd80      	pop	{r7, pc}

08001cc6 <_ZN11TouchGFXHAL17setTFTFrameBufferEPt>:
 * Sets the frame buffer address used by the TFT controller.
 *
 * @param [in] address New frame buffer address.
 */
void TouchGFXHAL::setTFTFrameBuffer(uint16_t* address)
{
 8001cc6:	b580      	push	{r7, lr}
 8001cc8:	b082      	sub	sp, #8
 8001cca:	af00      	add	r7, sp, #0
 8001ccc:	6078      	str	r0, [r7, #4]
 8001cce:	6039      	str	r1, [r7, #0]
    // Calling parent implementation of setTFTFrameBuffer(uint16_t* address).
    //
    // To overwrite the generated implementation, omit call to parent function
    // and implemented needed functionality here.

    TouchGFXGeneratedHAL::setTFTFrameBuffer(address);
 8001cd0:	687b      	ldr	r3, [r7, #4]
 8001cd2:	6839      	ldr	r1, [r7, #0]
 8001cd4:	4618      	mov	r0, r3
 8001cd6:	f001 fdbb 	bl	8003850 <_ZN20TouchGFXGeneratedHAL17setTFTFrameBufferEPt>
}
 8001cda:	bf00      	nop
 8001cdc:	3708      	adds	r7, #8
 8001cde:	46bd      	mov	sp, r7
 8001ce0:	bd80      	pop	{r7, pc}

08001ce2 <_ZN11TouchGFXHAL16flushFrameBufferERKN8touchgfx4RectE>:
 * @param rect The area of the screen that has been drawn, expressed in absolute coordinates.
 *
 * @see flushFrameBuffer().
 */
void TouchGFXHAL::flushFrameBuffer(const touchgfx::Rect& rect)
{
 8001ce2:	b580      	push	{r7, lr}
 8001ce4:	b082      	sub	sp, #8
 8001ce6:	af00      	add	r7, sp, #0
 8001ce8:	6078      	str	r0, [r7, #4]
 8001cea:	6039      	str	r1, [r7, #0]
    // be called to notify the touchgfx framework that flush has been performed.
    // To calculate he start adress of rect,
    // use advanceFrameBufferToRect(uint8_t* fbPtr, const touchgfx::Rect& rect)
    // defined in TouchGFXGeneratedHAL.cpp

    TouchGFXGeneratedHAL::flushFrameBuffer(rect);
 8001cec:	687b      	ldr	r3, [r7, #4]
 8001cee:	6839      	ldr	r1, [r7, #0]
 8001cf0:	4618      	mov	r0, r3
 8001cf2:	f001 fdc3 	bl	800387c <_ZN20TouchGFXGeneratedHAL16flushFrameBufferERKN8touchgfx4RectE>
}
 8001cf6:	bf00      	nop
 8001cf8:	3708      	adds	r7, #8
 8001cfa:	46bd      	mov	sp, r7
 8001cfc:	bd80      	pop	{r7, pc}

08001cfe <_ZN11TouchGFXHAL9blockCopyEPvPKvm>:

bool TouchGFXHAL::blockCopy(void* RESTRICT dest, const void* RESTRICT src, uint32_t numBytes)
{
 8001cfe:	b580      	push	{r7, lr}
 8001d00:	b084      	sub	sp, #16
 8001d02:	af00      	add	r7, sp, #0
 8001d04:	60f8      	str	r0, [r7, #12]
 8001d06:	60b9      	str	r1, [r7, #8]
 8001d08:	607a      	str	r2, [r7, #4]
 8001d0a:	603b      	str	r3, [r7, #0]
    return TouchGFXGeneratedHAL::blockCopy(dest, src, numBytes);
 8001d0c:	68f8      	ldr	r0, [r7, #12]
 8001d0e:	683b      	ldr	r3, [r7, #0]
 8001d10:	687a      	ldr	r2, [r7, #4]
 8001d12:	68b9      	ldr	r1, [r7, #8]
 8001d14:	f001 fe08 	bl	8003928 <_ZN20TouchGFXGeneratedHAL9blockCopyEPvPKvm>
 8001d18:	4603      	mov	r3, r0
}
 8001d1a:	4618      	mov	r0, r3
 8001d1c:	3710      	adds	r7, #16
 8001d1e:	46bd      	mov	sp, r7
 8001d20:	bd80      	pop	{r7, pc}

08001d22 <_ZN11TouchGFXHAL19configureInterruptsEv>:
/**
 * Configures the interrupts relevant for TouchGFX. This primarily entails setting
 * the interrupt priorities for the DMA and LCD interrupts.
 */
void TouchGFXHAL::configureInterrupts()
{
 8001d22:	b580      	push	{r7, lr}
 8001d24:	b082      	sub	sp, #8
 8001d26:	af00      	add	r7, sp, #0
 8001d28:	6078      	str	r0, [r7, #4]
    // Calling parent implementation of configureInterrupts().
    //
    // To overwrite the generated implementation, omit call to parent function
    // and implemented needed functionality here.

    TouchGFXGeneratedHAL::configureInterrupts();
 8001d2a:	687b      	ldr	r3, [r7, #4]
 8001d2c:	4618      	mov	r0, r3
 8001d2e:	f001 fd0d 	bl	800374c <_ZN20TouchGFXGeneratedHAL19configureInterruptsEv>
}
 8001d32:	bf00      	nop
 8001d34:	3708      	adds	r7, #8
 8001d36:	46bd      	mov	sp, r7
 8001d38:	bd80      	pop	{r7, pc}

08001d3a <_ZN11TouchGFXHAL16enableInterruptsEv>:

/**
 * Used for enabling interrupts set in configureInterrupts()
 */
void TouchGFXHAL::enableInterrupts()
{
 8001d3a:	b580      	push	{r7, lr}
 8001d3c:	b082      	sub	sp, #8
 8001d3e:	af00      	add	r7, sp, #0
 8001d40:	6078      	str	r0, [r7, #4]
    // Calling parent implementation of enableInterrupts().
    //
    // To overwrite the generated implementation, omit call to parent function
    // and implemented needed functionality here.

    TouchGFXGeneratedHAL::enableInterrupts();
 8001d42:	687b      	ldr	r3, [r7, #4]
 8001d44:	4618      	mov	r0, r3
 8001d46:	f001 fd11 	bl	800376c <_ZN20TouchGFXGeneratedHAL16enableInterruptsEv>
}
 8001d4a:	bf00      	nop
 8001d4c:	3708      	adds	r7, #8
 8001d4e:	46bd      	mov	sp, r7
 8001d50:	bd80      	pop	{r7, pc}

08001d52 <_ZN11TouchGFXHAL17disableInterruptsEv>:

/**
 * Used for disabling interrupts set in configureInterrupts()
 */
void TouchGFXHAL::disableInterrupts()
{
 8001d52:	b580      	push	{r7, lr}
 8001d54:	b082      	sub	sp, #8
 8001d56:	af00      	add	r7, sp, #0
 8001d58:	6078      	str	r0, [r7, #4]
    // Calling parent implementation of disableInterrupts().
    //
    // To overwrite the generated implementation, omit call to parent function
    // and implemented needed functionality here.

    TouchGFXGeneratedHAL::disableInterrupts();
 8001d5a:	687b      	ldr	r3, [r7, #4]
 8001d5c:	4618      	mov	r0, r3
 8001d5e:	f001 fd13 	bl	8003788 <_ZN20TouchGFXGeneratedHAL17disableInterruptsEv>
}
 8001d62:	bf00      	nop
 8001d64:	3708      	adds	r7, #8
 8001d66:	46bd      	mov	sp, r7
 8001d68:	bd80      	pop	{r7, pc}

08001d6a <_ZN11TouchGFXHAL28enableLCDControllerInterruptEv>:
/**
 * Configure the LCD controller to fire interrupts at VSYNC. Called automatically
 * once TouchGFX initialization has completed.
 */
void TouchGFXHAL::enableLCDControllerInterrupt()
{
 8001d6a:	b580      	push	{r7, lr}
 8001d6c:	b082      	sub	sp, #8
 8001d6e:	af00      	add	r7, sp, #0
 8001d70:	6078      	str	r0, [r7, #4]
    // Calling parent implementation of enableLCDControllerInterrupt().
    //
    // To overwrite the generated implementation, omit call to parent function
    // and implemented needed functionality here.

    TouchGFXGeneratedHAL::enableLCDControllerInterrupt();
 8001d72:	687b      	ldr	r3, [r7, #4]
 8001d74:	4618      	mov	r0, r3
 8001d76:	f001 fd15 	bl	80037a4 <_ZN20TouchGFXGeneratedHAL28enableLCDControllerInterruptEv>
}
 8001d7a:	bf00      	nop
 8001d7c:	3708      	adds	r7, #8
 8001d7e:	46bd      	mov	sp, r7
 8001d80:	bd80      	pop	{r7, pc}
	...

08001d84 <_ZN11TouchGFXHALD1Ev>:
class TouchGFXHAL : public TouchGFXGeneratedHAL
 8001d84:	b580      	push	{r7, lr}
 8001d86:	b082      	sub	sp, #8
 8001d88:	af00      	add	r7, sp, #0
 8001d8a:	6078      	str	r0, [r7, #4]
 8001d8c:	4a05      	ldr	r2, [pc, #20]	@ (8001da4 <_ZN11TouchGFXHALD1Ev+0x20>)
 8001d8e:	687b      	ldr	r3, [r7, #4]
 8001d90:	601a      	str	r2, [r3, #0]
 8001d92:	687b      	ldr	r3, [r7, #4]
 8001d94:	4618      	mov	r0, r3
 8001d96:	f7ff ff4f 	bl	8001c38 <_ZN20TouchGFXGeneratedHALD1Ev>
 8001d9a:	687b      	ldr	r3, [r7, #4]
 8001d9c:	4618      	mov	r0, r3
 8001d9e:	3708      	adds	r7, #8
 8001da0:	46bd      	mov	sp, r7
 8001da2:	bd80      	pop	{r7, pc}
 8001da4:	0802cad0 	.word	0x0802cad0

08001da8 <_ZN11TouchGFXHALD0Ev>:
 8001da8:	b580      	push	{r7, lr}
 8001daa:	b082      	sub	sp, #8
 8001dac:	af00      	add	r7, sp, #0
 8001dae:	6078      	str	r0, [r7, #4]
 8001db0:	6878      	ldr	r0, [r7, #4]
 8001db2:	f7ff ffe7 	bl	8001d84 <_ZN11TouchGFXHALD1Ev>
 8001db6:	217c      	movs	r1, #124	@ 0x7c
 8001db8:	6878      	ldr	r0, [r7, #4]
 8001dba:	f028 ff14 	bl	802abe6 <_ZdlPvj>
 8001dbe:	687b      	ldr	r3, [r7, #4]
 8001dc0:	4618      	mov	r0, r3
 8001dc2:	3708      	adds	r7, #8
 8001dc4:	46bd      	mov	sp, r7
 8001dc6:	bd80      	pop	{r7, pc}

08001dc8 <_ZN25STM32H745ITouchController4initEv>:

/**
 * @brief initializes the touch controller
 */
void STM32H745ITouchController::init()
{
 8001dc8:	b580      	push	{r7, lr}
 8001dca:	b084      	sub	sp, #16
 8001dcc:	af00      	add	r7, sp, #0
    static const uint32_t width = 480;
    static const uint32_t height = 272;

    TS_Init_t config;
    config.Width = width;
 8001dce:	f44f 73f0 	mov.w	r3, #480	@ 0x1e0
 8001dd2:	603b      	str	r3, [r7, #0]
    config.Height = height;
 8001dd4:	f44f 7388 	mov.w	r3, #272	@ 0x110
 8001dd8:	607b      	str	r3, [r7, #4]
    config.Orientation = TS_SWAP_XY;
 8001dda:	2308      	movs	r3, #8
 8001ddc:	60bb      	str	r3, [r7, #8]
    config.Accuracy = 0;
 8001dde:	2300      	movs	r3, #0
 8001de0:	60fb      	str	r3, [r7, #12]

    if (BSP_TS_Init(0, &config) != BSP_ERROR_NONE)
 8001de2:	463b      	mov	r3, r7
 8001de4:	4619      	mov	r1, r3
 8001de6:	2000      	movs	r0, #0
 8001de8:	f00e fe4a 	bl	8010a80 <BSP_TS_Init>
 8001dec:	4603      	mov	r3, r0
 8001dee:	2b00      	cmp	r3, #0
 8001df0:	bf14      	ite	ne
 8001df2:	2301      	movne	r3, #1
 8001df4:	2300      	moveq	r3, #0
 8001df6:	b2db      	uxtb	r3, r3
 8001df8:	2b00      	cmp	r3, #0
 8001dfa:	d103      	bne.n	8001e04 <_ZN25STM32H745ITouchController4initEv+0x3c>
    {
        return;
    }

    _bsp_ts_initialized = true;
 8001dfc:	4b03      	ldr	r3, [pc, #12]	@ (8001e0c <_ZN25STM32H745ITouchController4initEv+0x44>)
 8001dfe:	2201      	movs	r2, #1
 8001e00:	701a      	strb	r2, [r3, #0]
 8001e02:	e000      	b.n	8001e06 <_ZN25STM32H745ITouchController4initEv+0x3e>
        return;
 8001e04:	bf00      	nop
}
 8001e06:	3710      	adds	r7, #16
 8001e08:	46bd      	mov	sp, r7
 8001e0a:	bd80      	pop	{r7, pc}
 8001e0c:	2400035c 	.word	0x2400035c

08001e10 <_ZN25STM32H745ITouchController11sampleTouchERlS0_>:
 * @param x touch x coordinate
 * @param y touch y coordinate
 * @return \c true if a touch event was detected, else \c false
 */
bool STM32H745ITouchController::sampleTouch(int32_t& x, int32_t& y)
{
 8001e10:	b580      	push	{r7, lr}
 8001e12:	b082      	sub	sp, #8
 8001e14:	af00      	add	r7, sp, #0
 8001e16:	6078      	str	r0, [r7, #4]
 8001e18:	6039      	str	r1, [r7, #0]
    static TS_State_t state;

    if (!_bsp_ts_initialized)
 8001e1a:	4b11      	ldr	r3, [pc, #68]	@ (8001e60 <_ZN25STM32H745ITouchController11sampleTouchERlS0_+0x50>)
 8001e1c:	781b      	ldrb	r3, [r3, #0]
 8001e1e:	f083 0301 	eor.w	r3, r3, #1
 8001e22:	b2db      	uxtb	r3, r3
 8001e24:	2b00      	cmp	r3, #0
 8001e26:	d001      	beq.n	8001e2c <_ZN25STM32H745ITouchController11sampleTouchERlS0_+0x1c>
    {
        return false;
 8001e28:	2300      	movs	r3, #0
 8001e2a:	e014      	b.n	8001e56 <_ZN25STM32H745ITouchController11sampleTouchERlS0_+0x46>
    }

    BSP_TS_GetState(0, &state);
 8001e2c:	490d      	ldr	r1, [pc, #52]	@ (8001e64 <_ZN25STM32H745ITouchController11sampleTouchERlS0_+0x54>)
 8001e2e:	2000      	movs	r0, #0
 8001e30:	f00e fee2 	bl	8010bf8 <BSP_TS_GetState>

    if (!state.TouchDetected)
 8001e34:	4b0b      	ldr	r3, [pc, #44]	@ (8001e64 <_ZN25STM32H745ITouchController11sampleTouchERlS0_+0x54>)
 8001e36:	681b      	ldr	r3, [r3, #0]
 8001e38:	2b00      	cmp	r3, #0
 8001e3a:	d101      	bne.n	8001e40 <_ZN25STM32H745ITouchController11sampleTouchERlS0_+0x30>
    {
        return false;
 8001e3c:	2300      	movs	r3, #0
 8001e3e:	e00a      	b.n	8001e56 <_ZN25STM32H745ITouchController11sampleTouchERlS0_+0x46>
    }

    x = state.TouchX;
 8001e40:	4b08      	ldr	r3, [pc, #32]	@ (8001e64 <_ZN25STM32H745ITouchController11sampleTouchERlS0_+0x54>)
 8001e42:	685b      	ldr	r3, [r3, #4]
 8001e44:	461a      	mov	r2, r3
 8001e46:	687b      	ldr	r3, [r7, #4]
 8001e48:	601a      	str	r2, [r3, #0]
    y = state.TouchY;
 8001e4a:	4b06      	ldr	r3, [pc, #24]	@ (8001e64 <_ZN25STM32H745ITouchController11sampleTouchERlS0_+0x54>)
 8001e4c:	689b      	ldr	r3, [r3, #8]
 8001e4e:	461a      	mov	r2, r3
 8001e50:	683b      	ldr	r3, [r7, #0]
 8001e52:	601a      	str	r2, [r3, #0]
    return true;
 8001e54:	2301      	movs	r3, #1
}
 8001e56:	4618      	mov	r0, r3
 8001e58:	3708      	adds	r7, #8
 8001e5a:	46bd      	mov	sp, r7
 8001e5c:	bd80      	pop	{r7, pc}
 8001e5e:	bf00      	nop
 8001e60:	2400035c 	.word	0x2400035c
 8001e64:	24000360 	.word	0x24000360

08001e68 <_ZN8touchgfx10OSWrappers10initializeEv>:

/*
 * Initialize frame buffer semaphore and queue/mutex for VSYNC signal.
 */
void OSWrappers::initialize()
{
 8001e68:	b580      	push	{r7, lr}
 8001e6a:	af00      	add	r7, sp, #0
    // Create a queue of length 1
    frame_buffer_sem = osSemaphoreNew(1, 1, NULL); // Binary semaphore
 8001e6c:	2200      	movs	r2, #0
 8001e6e:	2101      	movs	r1, #1
 8001e70:	2001      	movs	r0, #1
 8001e72:	f009 f910 	bl	800b096 <osSemaphoreNew>
 8001e76:	4603      	mov	r3, r0
 8001e78:	4a0f      	ldr	r2, [pc, #60]	@ (8001eb8 <_ZN8touchgfx10OSWrappers10initializeEv+0x50>)
 8001e7a:	6013      	str	r3, [r2, #0]
    assert((frame_buffer_sem != NULL) && "Creation of framebuffer semaphore failed");
 8001e7c:	4b0e      	ldr	r3, [pc, #56]	@ (8001eb8 <_ZN8touchgfx10OSWrappers10initializeEv+0x50>)
 8001e7e:	681b      	ldr	r3, [r3, #0]
 8001e80:	2b00      	cmp	r3, #0
 8001e82:	d105      	bne.n	8001e90 <_ZN8touchgfx10OSWrappers10initializeEv+0x28>
 8001e84:	4b0d      	ldr	r3, [pc, #52]	@ (8001ebc <_ZN8touchgfx10OSWrappers10initializeEv+0x54>)
 8001e86:	4a0e      	ldr	r2, [pc, #56]	@ (8001ec0 <_ZN8touchgfx10OSWrappers10initializeEv+0x58>)
 8001e88:	2128      	movs	r1, #40	@ 0x28
 8001e8a:	480e      	ldr	r0, [pc, #56]	@ (8001ec4 <_ZN8touchgfx10OSWrappers10initializeEv+0x5c>)
 8001e8c:	f028 feda 	bl	802ac44 <__assert_func>

    // Create a queue of length 1
    vsync_queue = osMessageQueueNew(1, 4, NULL);
 8001e90:	2200      	movs	r2, #0
 8001e92:	2104      	movs	r1, #4
 8001e94:	2001      	movs	r0, #1
 8001e96:	f009 fa1d 	bl	800b2d4 <osMessageQueueNew>
 8001e9a:	4603      	mov	r3, r0
 8001e9c:	4a0a      	ldr	r2, [pc, #40]	@ (8001ec8 <_ZN8touchgfx10OSWrappers10initializeEv+0x60>)
 8001e9e:	6013      	str	r3, [r2, #0]
    assert((vsync_queue != NULL) && "Creation of vsync message queue failed");
 8001ea0:	4b09      	ldr	r3, [pc, #36]	@ (8001ec8 <_ZN8touchgfx10OSWrappers10initializeEv+0x60>)
 8001ea2:	681b      	ldr	r3, [r3, #0]
 8001ea4:	2b00      	cmp	r3, #0
 8001ea6:	d105      	bne.n	8001eb4 <_ZN8touchgfx10OSWrappers10initializeEv+0x4c>
 8001ea8:	4b08      	ldr	r3, [pc, #32]	@ (8001ecc <_ZN8touchgfx10OSWrappers10initializeEv+0x64>)
 8001eaa:	4a05      	ldr	r2, [pc, #20]	@ (8001ec0 <_ZN8touchgfx10OSWrappers10initializeEv+0x58>)
 8001eac:	212c      	movs	r1, #44	@ 0x2c
 8001eae:	4805      	ldr	r0, [pc, #20]	@ (8001ec4 <_ZN8touchgfx10OSWrappers10initializeEv+0x5c>)
 8001eb0:	f028 fec8 	bl	802ac44 <__assert_func>
}
 8001eb4:	bf00      	nop
 8001eb6:	bd80      	pop	{r7, pc}
 8001eb8:	2400036c 	.word	0x2400036c
 8001ebc:	0802bedc 	.word	0x0802bedc
 8001ec0:	0802bf28 	.word	0x0802bf28
 8001ec4:	0802bf58 	.word	0x0802bf58
 8001ec8:	24000370 	.word	0x24000370
 8001ecc:	0802bfe8 	.word	0x0802bfe8

08001ed0 <_ZN8touchgfx10OSWrappers24takeFrameBufferSemaphoreEv>:

/*
 * Take the frame buffer semaphore. Blocks until semaphore is available.
 */
void OSWrappers::takeFrameBufferSemaphore()
{
 8001ed0:	b580      	push	{r7, lr}
 8001ed2:	af00      	add	r7, sp, #0
    osSemaphoreAcquire(frame_buffer_sem, osWaitForever);
 8001ed4:	4b04      	ldr	r3, [pc, #16]	@ (8001ee8 <_ZN8touchgfx10OSWrappers24takeFrameBufferSemaphoreEv+0x18>)
 8001ed6:	681b      	ldr	r3, [r3, #0]
 8001ed8:	f04f 31ff 	mov.w	r1, #4294967295
 8001edc:	4618      	mov	r0, r3
 8001ede:	f009 f963 	bl	800b1a8 <osSemaphoreAcquire>
}
 8001ee2:	bf00      	nop
 8001ee4:	bd80      	pop	{r7, pc}
 8001ee6:	bf00      	nop
 8001ee8:	2400036c 	.word	0x2400036c

08001eec <_ZN8touchgfx10OSWrappers24giveFrameBufferSemaphoreEv>:

/*
 * Release the frame buffer semaphore.
 */
void OSWrappers::giveFrameBufferSemaphore()
{
 8001eec:	b580      	push	{r7, lr}
 8001eee:	af00      	add	r7, sp, #0
    osSemaphoreRelease(frame_buffer_sem);
 8001ef0:	4b03      	ldr	r3, [pc, #12]	@ (8001f00 <_ZN8touchgfx10OSWrappers24giveFrameBufferSemaphoreEv+0x14>)
 8001ef2:	681b      	ldr	r3, [r3, #0]
 8001ef4:	4618      	mov	r0, r3
 8001ef6:	f009 f9a9 	bl	800b24c <osSemaphoreRelease>
}
 8001efa:	bf00      	nop
 8001efc:	bd80      	pop	{r7, pc}
 8001efe:	bf00      	nop
 8001f00:	2400036c 	.word	0x2400036c

08001f04 <_ZN8touchgfx10OSWrappers27tryTakeFrameBufferSemaphoreEv>:
 *
 * Note must return immediately! This function does not care who has the taken the semaphore,
 * it only serves to make sure that the semaphore is taken by someone.
 */
void OSWrappers::tryTakeFrameBufferSemaphore()
{
 8001f04:	b580      	push	{r7, lr}
 8001f06:	af00      	add	r7, sp, #0
    osSemaphoreAcquire(frame_buffer_sem, 0);
 8001f08:	4b03      	ldr	r3, [pc, #12]	@ (8001f18 <_ZN8touchgfx10OSWrappers27tryTakeFrameBufferSemaphoreEv+0x14>)
 8001f0a:	681b      	ldr	r3, [r3, #0]
 8001f0c:	2100      	movs	r1, #0
 8001f0e:	4618      	mov	r0, r3
 8001f10:	f009 f94a 	bl	800b1a8 <osSemaphoreAcquire>
}
 8001f14:	bf00      	nop
 8001f16:	bd80      	pop	{r7, pc}
 8001f18:	2400036c 	.word	0x2400036c

08001f1c <_ZN8touchgfx10OSWrappers31giveFrameBufferSemaphoreFromISREv>:
 *
 * Release the frame buffer semaphore in a way that is safe in interrupt context.
 * Called from ISR.
 */
void OSWrappers::giveFrameBufferSemaphoreFromISR()
{
 8001f1c:	b580      	push	{r7, lr}
 8001f1e:	af00      	add	r7, sp, #0
    osSemaphoreRelease(frame_buffer_sem);
 8001f20:	4b03      	ldr	r3, [pc, #12]	@ (8001f30 <_ZN8touchgfx10OSWrappers31giveFrameBufferSemaphoreFromISREv+0x14>)
 8001f22:	681b      	ldr	r3, [r3, #0]
 8001f24:	4618      	mov	r0, r3
 8001f26:	f009 f991 	bl	800b24c <osSemaphoreRelease>
}
 8001f2a:	bf00      	nop
 8001f2c:	bd80      	pop	{r7, pc}
 8001f2e:	bf00      	nop
 8001f30:	2400036c 	.word	0x2400036c

08001f34 <_ZN8touchgfx10OSWrappers11signalVSyncEv>:
 *
 * Note This function is called from an ISR, and should (depending on OS) trigger a
 * scheduling.
 */
void OSWrappers::signalVSync()
{
 8001f34:	b580      	push	{r7, lr}
 8001f36:	af00      	add	r7, sp, #0
    osMessageQueuePut(vsync_queue, &dummy, 0, 0);
 8001f38:	4b04      	ldr	r3, [pc, #16]	@ (8001f4c <_ZN8touchgfx10OSWrappers11signalVSyncEv+0x18>)
 8001f3a:	6818      	ldr	r0, [r3, #0]
 8001f3c:	2300      	movs	r3, #0
 8001f3e:	2200      	movs	r2, #0
 8001f40:	4903      	ldr	r1, [pc, #12]	@ (8001f50 <_ZN8touchgfx10OSWrappers11signalVSyncEv+0x1c>)
 8001f42:	f009 fa3b 	bl	800b3bc <osMessageQueuePut>
}
 8001f46:	bf00      	nop
 8001f48:	bd80      	pop	{r7, pc}
 8001f4a:	bf00      	nop
 8001f4c:	24000370 	.word	0x24000370
 8001f50:	24000004 	.word	0x24000004

08001f54 <_ZN8touchgfx10OSWrappers12waitForVSyncEv>:
 *
 * Note This function must first clear the mutex/queue and then wait for the next one to
 * occur.
 */
void OSWrappers::waitForVSync()
{
 8001f54:	b580      	push	{r7, lr}
 8001f56:	b082      	sub	sp, #8
 8001f58:	af00      	add	r7, sp, #0
    uint32_t dummyGet;
    // First make sure the queue is empty, by trying to remove an element with 0 timeout.
    osMessageQueueGet(vsync_queue, &dummyGet, 0, 0);
 8001f5a:	4b09      	ldr	r3, [pc, #36]	@ (8001f80 <_ZN8touchgfx10OSWrappers12waitForVSyncEv+0x2c>)
 8001f5c:	6818      	ldr	r0, [r3, #0]
 8001f5e:	1d39      	adds	r1, r7, #4
 8001f60:	2300      	movs	r3, #0
 8001f62:	2200      	movs	r2, #0
 8001f64:	f009 fa8a 	bl	800b47c <osMessageQueueGet>

    // Then, wait for next VSYNC to occur.
    osMessageQueueGet(vsync_queue, &dummyGet, 0, osWaitForever);
 8001f68:	4b05      	ldr	r3, [pc, #20]	@ (8001f80 <_ZN8touchgfx10OSWrappers12waitForVSyncEv+0x2c>)
 8001f6a:	6818      	ldr	r0, [r3, #0]
 8001f6c:	1d39      	adds	r1, r7, #4
 8001f6e:	f04f 33ff 	mov.w	r3, #4294967295
 8001f72:	2200      	movs	r2, #0
 8001f74:	f009 fa82 	bl	800b47c <osMessageQueueGet>
}
 8001f78:	bf00      	nop
 8001f7a:	3708      	adds	r7, #8
 8001f7c:	46bd      	mov	sp, r7
 8001f7e:	bd80      	pop	{r7, pc}
 8001f80:	24000370 	.word	0x24000370

08001f84 <__NVIC_EnableIRQ>:
{
 8001f84:	b480      	push	{r7}
 8001f86:	b083      	sub	sp, #12
 8001f88:	af00      	add	r7, sp, #0
 8001f8a:	4603      	mov	r3, r0
 8001f8c:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8001f8e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001f92:	2b00      	cmp	r3, #0
 8001f94:	db0b      	blt.n	8001fae <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001f96:	88fb      	ldrh	r3, [r7, #6]
 8001f98:	f003 021f 	and.w	r2, r3, #31
 8001f9c:	4907      	ldr	r1, [pc, #28]	@ (8001fbc <__NVIC_EnableIRQ+0x38>)
 8001f9e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001fa2:	095b      	lsrs	r3, r3, #5
 8001fa4:	2001      	movs	r0, #1
 8001fa6:	fa00 f202 	lsl.w	r2, r0, r2
 8001faa:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8001fae:	bf00      	nop
 8001fb0:	370c      	adds	r7, #12
 8001fb2:	46bd      	mov	sp, r7
 8001fb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fb8:	4770      	bx	lr
 8001fba:	bf00      	nop
 8001fbc:	e000e100 	.word	0xe000e100

08001fc0 <__NVIC_DisableIRQ>:
{
 8001fc0:	b480      	push	{r7}
 8001fc2:	b083      	sub	sp, #12
 8001fc4:	af00      	add	r7, sp, #0
 8001fc6:	4603      	mov	r3, r0
 8001fc8:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8001fca:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001fce:	2b00      	cmp	r3, #0
 8001fd0:	db12      	blt.n	8001ff8 <__NVIC_DisableIRQ+0x38>
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001fd2:	88fb      	ldrh	r3, [r7, #6]
 8001fd4:	f003 021f 	and.w	r2, r3, #31
 8001fd8:	490a      	ldr	r1, [pc, #40]	@ (8002004 <__NVIC_DisableIRQ+0x44>)
 8001fda:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001fde:	095b      	lsrs	r3, r3, #5
 8001fe0:	2001      	movs	r0, #1
 8001fe2:	fa00 f202 	lsl.w	r2, r0, r2
 8001fe6:	3320      	adds	r3, #32
 8001fe8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8001fec:	f3bf 8f4f 	dsb	sy
}
 8001ff0:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8001ff2:	f3bf 8f6f 	isb	sy
}
 8001ff6:	bf00      	nop
}
 8001ff8:	bf00      	nop
 8001ffa:	370c      	adds	r7, #12
 8001ffc:	46bd      	mov	sp, r7
 8001ffe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002002:	4770      	bx	lr
 8002004:	e000e100 	.word	0xe000e100

08002008 <_ZN8touchgfx9colortypeC1Ev>:
 * extract a 24/32-bit color from this type, use the getColor32 function.
 */
struct colortype
{
    /** Default constructor. Creates a black (0) color. */
    colortype()
 8002008:	b480      	push	{r7}
 800200a:	b083      	sub	sp, #12
 800200c:	af00      	add	r7, sp, #0
 800200e:	6078      	str	r0, [r7, #4]
        : color(0)
 8002010:	687b      	ldr	r3, [r7, #4]
 8002012:	2200      	movs	r2, #0
 8002014:	601a      	str	r2, [r3, #0]
    {
    }
 8002016:	687b      	ldr	r3, [r7, #4]
 8002018:	4618      	mov	r0, r3
 800201a:	370c      	adds	r7, #12
 800201c:	46bd      	mov	sp, r7
 800201e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002022:	4770      	bx	lr

08002024 <_ZNK8touchgfx9colortypecvmEv>:
    /**
     * Cast that converts the given colortype to an uint32_t.
     *
     * @return The result of the operation.
     */
    operator uint32_t() const
 8002024:	b480      	push	{r7}
 8002026:	b083      	sub	sp, #12
 8002028:	af00      	add	r7, sp, #0
 800202a:	6078      	str	r0, [r7, #4]
    {
        return color;
 800202c:	687b      	ldr	r3, [r7, #4]
 800202e:	681b      	ldr	r3, [r3, #0]
    }
 8002030:	4618      	mov	r0, r3
 8002032:	370c      	adds	r7, #12
 8002034:	46bd      	mov	sp, r7
 8002036:	f85d 7b04 	ldr.w	r7, [sp], #4
 800203a:	4770      	bx	lr

0800203c <_ZN8touchgfx9DMA_QueueD1Ev>:
     * @param  op The blitop to add.
     */
    virtual void pushCopyOf(const BlitOp& op) = 0;

    /** Finalizes an instance of the DMA_Queue class. */
    virtual ~DMA_Queue()
 800203c:	b480      	push	{r7}
 800203e:	b083      	sub	sp, #12
 8002040:	af00      	add	r7, sp, #0
 8002042:	6078      	str	r0, [r7, #4]
    {
 8002044:	4a04      	ldr	r2, [pc, #16]	@ (8002058 <_ZN8touchgfx9DMA_QueueD1Ev+0x1c>)
 8002046:	687b      	ldr	r3, [r7, #4]
 8002048:	601a      	str	r2, [r3, #0]
    }
 800204a:	687b      	ldr	r3, [r7, #4]
 800204c:	4618      	mov	r0, r3
 800204e:	370c      	adds	r7, #12
 8002050:	46bd      	mov	sp, r7
 8002052:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002056:	4770      	bx	lr
 8002058:	0802cbf0 	.word	0x0802cbf0

0800205c <_ZN8touchgfx9DMA_QueueD0Ev>:
    virtual ~DMA_Queue()
 800205c:	b580      	push	{r7, lr}
 800205e:	b082      	sub	sp, #8
 8002060:	af00      	add	r7, sp, #0
 8002062:	6078      	str	r0, [r7, #4]
    }
 8002064:	6878      	ldr	r0, [r7, #4]
 8002066:	f7ff ffe9 	bl	800203c <_ZN8touchgfx9DMA_QueueD1Ev>
 800206a:	2104      	movs	r1, #4
 800206c:	6878      	ldr	r0, [r7, #4]
 800206e:	f028 fdba 	bl	802abe6 <_ZdlPvj>
 8002072:	687b      	ldr	r3, [r7, #4]
 8002074:	4618      	mov	r0, r3
 8002076:	3708      	adds	r7, #8
 8002078:	46bd      	mov	sp, r7
 800207a:	bd80      	pop	{r7, pc}

0800207c <_ZN8touchgfx13DMA_Interface5flushEv>:
     * @param  op The operation to add.
     */
    virtual void addToQueue(const BlitOp& op);

    /** This function blocks until all DMA transfers in the queue have been completed. */
    virtual void flush()
 800207c:	b580      	push	{r7, lr}
 800207e:	b082      	sub	sp, #8
 8002080:	af00      	add	r7, sp, #0
 8002082:	6078      	str	r0, [r7, #4]
    {
        waitForFrameBufferSemaphore();
 8002084:	687b      	ldr	r3, [r7, #4]
 8002086:	681b      	ldr	r3, [r3, #0]
 8002088:	3344      	adds	r3, #68	@ 0x44
 800208a:	681b      	ldr	r3, [r3, #0]
 800208c:	6878      	ldr	r0, [r7, #4]
 800208e:	4798      	blx	r3
    }
 8002090:	bf00      	nop
 8002092:	3708      	adds	r7, #8
 8002094:	46bd      	mov	sp, r7
 8002096:	bd80      	pop	{r7, pc}

08002098 <_ZN8touchgfx13DMA_InterfaceD1Ev>:
    {
        return DMA_TYPE_GENERIC;
    }

    /** Finalizes an instance of the DMA_Interface class. */
    virtual ~DMA_Interface()
 8002098:	b480      	push	{r7}
 800209a:	b083      	sub	sp, #12
 800209c:	af00      	add	r7, sp, #0
 800209e:	6078      	str	r0, [r7, #4]
    {
 80020a0:	4a04      	ldr	r2, [pc, #16]	@ (80020b4 <_ZN8touchgfx13DMA_InterfaceD1Ev+0x1c>)
 80020a2:	687b      	ldr	r3, [r7, #4]
 80020a4:	601a      	str	r2, [r3, #0]
    }
 80020a6:	687b      	ldr	r3, [r7, #4]
 80020a8:	4618      	mov	r0, r3
 80020aa:	370c      	adds	r7, #12
 80020ac:	46bd      	mov	sp, r7
 80020ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020b2:	4770      	bx	lr
 80020b4:	0802e8d8 	.word	0x0802e8d8

080020b8 <_ZN8touchgfx13DMA_InterfaceD0Ev>:
    virtual ~DMA_Interface()
 80020b8:	b580      	push	{r7, lr}
 80020ba:	b082      	sub	sp, #8
 80020bc:	af00      	add	r7, sp, #0
 80020be:	6078      	str	r0, [r7, #4]
    }
 80020c0:	6878      	ldr	r0, [r7, #4]
 80020c2:	f7ff ffe9 	bl	8002098 <_ZN8touchgfx13DMA_InterfaceD1Ev>
 80020c6:	210c      	movs	r1, #12
 80020c8:	6878      	ldr	r0, [r7, #4]
 80020ca:	f028 fd8c 	bl	802abe6 <_ZdlPvj>
 80020ce:	687b      	ldr	r3, [r7, #4]
 80020d0:	4618      	mov	r0, r3
 80020d2:	3708      	adds	r7, #8
 80020d4:	46bd      	mov	sp, r7
 80020d6:	bd80      	pop	{r7, pc}

080020d8 <_ZN8touchgfx13DMA_InterfaceC1ERNS_9DMA_QueueE>:
    /**
     * Constructs a DMA Interface object.
     *
     * @param [in] dmaQueue Reference to the queue of DMA operations.
     */
    DMA_Interface(DMA_Queue& dmaQueue)
 80020d8:	b480      	push	{r7}
 80020da:	b083      	sub	sp, #12
 80020dc:	af00      	add	r7, sp, #0
 80020de:	6078      	str	r0, [r7, #4]
 80020e0:	6039      	str	r1, [r7, #0]
        : queue(dmaQueue), isRunning(false), isAllowed(false)
 80020e2:	4a09      	ldr	r2, [pc, #36]	@ (8002108 <_ZN8touchgfx13DMA_InterfaceC1ERNS_9DMA_QueueE+0x30>)
 80020e4:	687b      	ldr	r3, [r7, #4]
 80020e6:	601a      	str	r2, [r3, #0]
 80020e8:	687b      	ldr	r3, [r7, #4]
 80020ea:	683a      	ldr	r2, [r7, #0]
 80020ec:	605a      	str	r2, [r3, #4]
 80020ee:	687b      	ldr	r3, [r7, #4]
 80020f0:	2200      	movs	r2, #0
 80020f2:	721a      	strb	r2, [r3, #8]
 80020f4:	687b      	ldr	r3, [r7, #4]
 80020f6:	2200      	movs	r2, #0
 80020f8:	725a      	strb	r2, [r3, #9]
    {
    }
 80020fa:	687b      	ldr	r3, [r7, #4]
 80020fc:	4618      	mov	r0, r3
 80020fe:	370c      	adds	r7, #12
 8002100:	46bd      	mov	sp, r7
 8002102:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002106:	4770      	bx	lr
 8002108:	0802e8d8 	.word	0x0802e8d8

0800210c <_ZN8STM32DMA10getDMATypeEv>:
     *        Function for obtaining the DMA type of the concrete DMA_Interface implementation.
     *        As default, will return DMA_TYPE_CHROMART type value.
     *
     * @return a DMAType value of the concrete DMA_Interface implementation.
     */
    virtual touchgfx::DMAType getDMAType(void)
 800210c:	b480      	push	{r7}
 800210e:	b083      	sub	sp, #12
 8002110:	af00      	add	r7, sp, #0
 8002112:	6078      	str	r0, [r7, #4]
    {
        return touchgfx::DMA_TYPE_CHROMART;
 8002114:	2301      	movs	r3, #1
    }
 8002116:	4618      	mov	r0, r3
 8002118:	370c      	adds	r7, #12
 800211a:	46bd      	mov	sp, r7
 800211c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002120:	4770      	bx	lr

08002122 <_ZN8STM32DMA18signalDMAInterruptEv>:
     *
     * @brief Raises a DMA interrupt signal.
     *
     *        Raises a DMA interrupt signal.
     */
    virtual void signalDMAInterrupt()
 8002122:	b580      	push	{r7, lr}
 8002124:	b082      	sub	sp, #8
 8002126:	af00      	add	r7, sp, #0
 8002128:	6078      	str	r0, [r7, #4]
    {
        executeCompleted();
 800212a:	687a      	ldr	r2, [r7, #4]
 800212c:	687b      	ldr	r3, [r7, #4]
 800212e:	681b      	ldr	r3, [r3, #0]
 8002130:	3328      	adds	r3, #40	@ 0x28
 8002132:	681b      	ldr	r3, [r3, #0]
 8002134:	4610      	mov	r0, r2
 8002136:	4798      	blx	r3
    }
 8002138:	bf00      	nop
 800213a:	3708      	adds	r7, #8
 800213c:	46bd      	mov	sp, r7
 800213e:	bd80      	pop	{r7, pc}

08002140 <_ZN8touchgfx3HAL11getInstanceEv>:
    static HAL* getInstance()
 8002140:	b480      	push	{r7}
 8002142:	af00      	add	r7, sp, #0
        return instance;
 8002144:	4b03      	ldr	r3, [pc, #12]	@ (8002154 <_ZN8touchgfx3HAL11getInstanceEv+0x14>)
 8002146:	681b      	ldr	r3, [r3, #0]
    }
 8002148:	4618      	mov	r0, r3
 800214a:	46bd      	mov	sp, r7
 800214c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002150:	4770      	bx	lr
 8002152:	bf00      	nop
 8002154:	2400b884 	.word	0x2400b884

08002158 <_ZN8touchgfx3HAL18signalDMAInterruptEv>:
    void signalDMAInterrupt()
 8002158:	b580      	push	{r7, lr}
 800215a:	b082      	sub	sp, #8
 800215c:	af00      	add	r7, sp, #0
 800215e:	6078      	str	r0, [r7, #4]
        dma.signalDMAInterrupt();
 8002160:	687b      	ldr	r3, [r7, #4]
 8002162:	685a      	ldr	r2, [r3, #4]
 8002164:	687b      	ldr	r3, [r7, #4]
 8002166:	685b      	ldr	r3, [r3, #4]
 8002168:	681b      	ldr	r3, [r3, #0]
 800216a:	3314      	adds	r3, #20
 800216c:	681b      	ldr	r3, [r3, #0]
 800216e:	4610      	mov	r0, r2
 8002170:	4798      	blx	r3
    }
 8002172:	bf00      	nop
 8002174:	3708      	adds	r7, #8
 8002176:	46bd      	mov	sp, r7
 8002178:	bd80      	pop	{r7, pc}

0800217a <DMA2D_XferCpltCallback>:

extern "C" DMA2D_HandleTypeDef hdma2d;

extern "C" {
    static void DMA2D_XferCpltCallback(DMA2D_HandleTypeDef* handle)
    {
 800217a:	b580      	push	{r7, lr}
 800217c:	b082      	sub	sp, #8
 800217e:	af00      	add	r7, sp, #0
 8002180:	6078      	str	r0, [r7, #4]
        (void)handle; // Unused argument
        HAL::getInstance()->signalDMAInterrupt();
 8002182:	f7ff ffdd 	bl	8002140 <_ZN8touchgfx3HAL11getInstanceEv>
 8002186:	4603      	mov	r3, r0
 8002188:	4618      	mov	r0, r3
 800218a:	f7ff ffe5 	bl	8002158 <_ZN8touchgfx3HAL18signalDMAInterruptEv>
    }
 800218e:	bf00      	nop
 8002190:	3708      	adds	r7, #8
 8002192:	46bd      	mov	sp, r7
 8002194:	bd80      	pop	{r7, pc}

08002196 <_ZN8touchgfx6BlitOpC1Ev>:

/**
 * BlitOp instances carry the required information for performing operations on the LCD
 * (framebuffer) using DMA.
 */
struct BlitOp
 8002196:	b580      	push	{r7, lr}
 8002198:	b082      	sub	sp, #8
 800219a:	af00      	add	r7, sp, #0
 800219c:	6078      	str	r0, [r7, #4]
 800219e:	687b      	ldr	r3, [r7, #4]
 80021a0:	330c      	adds	r3, #12
 80021a2:	4618      	mov	r0, r3
 80021a4:	f7ff ff30 	bl	8002008 <_ZN8touchgfx9colortypeC1Ev>
 80021a8:	687b      	ldr	r3, [r7, #4]
 80021aa:	4618      	mov	r0, r3
 80021ac:	3708      	adds	r7, #8
 80021ae:	46bd      	mov	sp, r7
 80021b0:	bd80      	pop	{r7, pc}
	...

080021b4 <_ZN8STM32DMAC1Ev>:
}

STM32DMA::STM32DMA()
 80021b4:	b5b0      	push	{r4, r5, r7, lr}
 80021b6:	b082      	sub	sp, #8
 80021b8:	af00      	add	r7, sp, #0
 80021ba:	6078      	str	r0, [r7, #4]
    : DMA_Interface(dma_queue), dma_queue(queue_storage, sizeof(queue_storage) / sizeof(queue_storage[0]))
 80021bc:	687a      	ldr	r2, [r7, #4]
 80021be:	687b      	ldr	r3, [r7, #4]
 80021c0:	330c      	adds	r3, #12
 80021c2:	4619      	mov	r1, r3
 80021c4:	4610      	mov	r0, r2
 80021c6:	f7ff ff87 	bl	80020d8 <_ZN8touchgfx13DMA_InterfaceC1ERNS_9DMA_QueueE>
 80021ca:	4a0e      	ldr	r2, [pc, #56]	@ (8002204 <_ZN8STM32DMAC1Ev+0x50>)
 80021cc:	687b      	ldr	r3, [r7, #4]
 80021ce:	601a      	str	r2, [r3, #0]
 80021d0:	687b      	ldr	r3, [r7, #4]
 80021d2:	f103 000c 	add.w	r0, r3, #12
 80021d6:	687b      	ldr	r3, [r7, #4]
 80021d8:	3320      	adds	r3, #32
 80021da:	2260      	movs	r2, #96	@ 0x60
 80021dc:	4619      	mov	r1, r3
 80021de:	f017 f9e7 	bl	80195b0 <_ZN8touchgfx17LockFreeDMA_QueueC1EPNS_6BlitOpEi>
 80021e2:	687b      	ldr	r3, [r7, #4]
 80021e4:	3320      	adds	r3, #32
 80021e6:	245f      	movs	r4, #95	@ 0x5f
 80021e8:	461d      	mov	r5, r3
 80021ea:	e004      	b.n	80021f6 <_ZN8STM32DMAC1Ev+0x42>
 80021ec:	4628      	mov	r0, r5
 80021ee:	f7ff ffd2 	bl	8002196 <_ZN8touchgfx6BlitOpC1Ev>
 80021f2:	3c01      	subs	r4, #1
 80021f4:	3520      	adds	r5, #32
 80021f6:	2c00      	cmp	r4, #0
 80021f8:	daf8      	bge.n	80021ec <_ZN8STM32DMAC1Ev+0x38>
{
}
 80021fa:	687b      	ldr	r3, [r7, #4]
 80021fc:	4618      	mov	r0, r3
 80021fe:	3708      	adds	r7, #8
 8002200:	46bd      	mov	sp, r7
 8002202:	bdb0      	pop	{r4, r5, r7, pc}
 8002204:	0802cba0 	.word	0x0802cba0

08002208 <_ZN8STM32DMAD1Ev>:

STM32DMA::~STM32DMA()
 8002208:	b580      	push	{r7, lr}
 800220a:	b082      	sub	sp, #8
 800220c:	af00      	add	r7, sp, #0
 800220e:	6078      	str	r0, [r7, #4]
 8002210:	4a09      	ldr	r2, [pc, #36]	@ (8002238 <_ZN8STM32DMAD1Ev+0x30>)
 8002212:	687b      	ldr	r3, [r7, #4]
 8002214:	601a      	str	r2, [r3, #0]
{
    /* Disable DMA2D global Interrupt */
    NVIC_DisableIRQ(DMA2D_IRQn);
 8002216:	205a      	movs	r0, #90	@ 0x5a
 8002218:	f7ff fed2 	bl	8001fc0 <__NVIC_DisableIRQ>
}
 800221c:	687b      	ldr	r3, [r7, #4]
 800221e:	330c      	adds	r3, #12
 8002220:	4618      	mov	r0, r3
 8002222:	f000 fabf 	bl	80027a4 <_ZN8touchgfx17LockFreeDMA_QueueD1Ev>
 8002226:	687b      	ldr	r3, [r7, #4]
 8002228:	4618      	mov	r0, r3
 800222a:	f7ff ff35 	bl	8002098 <_ZN8touchgfx13DMA_InterfaceD1Ev>
 800222e:	687b      	ldr	r3, [r7, #4]
 8002230:	4618      	mov	r0, r3
 8002232:	3708      	adds	r7, #8
 8002234:	46bd      	mov	sp, r7
 8002236:	bd80      	pop	{r7, pc}
 8002238:	0802cba0 	.word	0x0802cba0

0800223c <_ZN8STM32DMAD0Ev>:
STM32DMA::~STM32DMA()
 800223c:	b580      	push	{r7, lr}
 800223e:	b082      	sub	sp, #8
 8002240:	af00      	add	r7, sp, #0
 8002242:	6078      	str	r0, [r7, #4]
}
 8002244:	6878      	ldr	r0, [r7, #4]
 8002246:	f7ff ffdf 	bl	8002208 <_ZN8STM32DMAD1Ev>
 800224a:	f44f 6142 	mov.w	r1, #3104	@ 0xc20
 800224e:	6878      	ldr	r0, [r7, #4]
 8002250:	f028 fcc9 	bl	802abe6 <_ZdlPvj>
 8002254:	687b      	ldr	r3, [r7, #4]
 8002256:	4618      	mov	r0, r3
 8002258:	3708      	adds	r7, #8
 800225a:	46bd      	mov	sp, r7
 800225c:	bd80      	pop	{r7, pc}
	...

08002260 <_ZN8STM32DMA10initializeEv>:

void STM32DMA::initialize()
{
 8002260:	b580      	push	{r7, lr}
 8002262:	b084      	sub	sp, #16
 8002264:	af00      	add	r7, sp, #0
 8002266:	6078      	str	r0, [r7, #4]
    /* Ensure DMA2D Clock is enabled */
    __HAL_RCC_DMA2D_CLK_ENABLE();
 8002268:	4b12      	ldr	r3, [pc, #72]	@ (80022b4 <_ZN8STM32DMA10initializeEv+0x54>)
 800226a:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 800226e:	4a11      	ldr	r2, [pc, #68]	@ (80022b4 <_ZN8STM32DMA10initializeEv+0x54>)
 8002270:	f043 0310 	orr.w	r3, r3, #16
 8002274:	f8c2 30d4 	str.w	r3, [r2, #212]	@ 0xd4
 8002278:	4b0e      	ldr	r3, [pc, #56]	@ (80022b4 <_ZN8STM32DMA10initializeEv+0x54>)
 800227a:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 800227e:	f003 0310 	and.w	r3, r3, #16
 8002282:	60fb      	str	r3, [r7, #12]
 8002284:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_DMA2D_FORCE_RESET();
 8002286:	4b0b      	ldr	r3, [pc, #44]	@ (80022b4 <_ZN8STM32DMA10initializeEv+0x54>)
 8002288:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800228a:	4a0a      	ldr	r2, [pc, #40]	@ (80022b4 <_ZN8STM32DMA10initializeEv+0x54>)
 800228c:	f043 0310 	orr.w	r3, r3, #16
 8002290:	67d3      	str	r3, [r2, #124]	@ 0x7c
    __HAL_RCC_DMA2D_RELEASE_RESET();
 8002292:	4b08      	ldr	r3, [pc, #32]	@ (80022b4 <_ZN8STM32DMA10initializeEv+0x54>)
 8002294:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8002296:	4a07      	ldr	r2, [pc, #28]	@ (80022b4 <_ZN8STM32DMA10initializeEv+0x54>)
 8002298:	f023 0310 	bic.w	r3, r3, #16
 800229c:	67d3      	str	r3, [r2, #124]	@ 0x7c

    /* Add transfer complete callback function */
    hdma2d.XferCpltCallback = DMA2D_XferCpltCallback;
 800229e:	4b06      	ldr	r3, [pc, #24]	@ (80022b8 <_ZN8STM32DMA10initializeEv+0x58>)
 80022a0:	4a06      	ldr	r2, [pc, #24]	@ (80022bc <_ZN8STM32DMA10initializeEv+0x5c>)
 80022a2:	621a      	str	r2, [r3, #32]

    /* Enable DMA2D global Interrupt */
    NVIC_EnableIRQ(DMA2D_IRQn);
 80022a4:	205a      	movs	r0, #90	@ 0x5a
 80022a6:	f7ff fe6d 	bl	8001f84 <__NVIC_EnableIRQ>
}
 80022aa:	bf00      	nop
 80022ac:	3710      	adds	r7, #16
 80022ae:	46bd      	mov	sp, r7
 80022b0:	bd80      	pop	{r7, pc}
 80022b2:	bf00      	nop
 80022b4:	58024400 	.word	0x58024400
 80022b8:	2400016c 	.word	0x2400016c
 80022bc:	0800217b 	.word	0x0800217b

080022c0 <_ZN8STM32DMA22getChromARTInputFormatEN8touchgfx6Bitmap12BitmapFormatE>:

inline uint32_t STM32DMA::getChromARTInputFormat(Bitmap::BitmapFormat format)
{
 80022c0:	b580      	push	{r7, lr}
 80022c2:	b084      	sub	sp, #16
 80022c4:	af00      	add	r7, sp, #0
 80022c6:	6078      	str	r0, [r7, #4]
 80022c8:	460b      	mov	r3, r1
 80022ca:	70fb      	strb	r3, [r7, #3]
    // Default color mode set to ARGB8888
    uint32_t dma2dColorMode = DMA2D_INPUT_ARGB8888;
 80022cc:	2300      	movs	r3, #0
 80022ce:	60fb      	str	r3, [r7, #12]

    switch (format)
 80022d0:	78fb      	ldrb	r3, [r7, #3]
 80022d2:	2b0b      	cmp	r3, #11
 80022d4:	d826      	bhi.n	8002324 <_ZN8STM32DMA22getChromARTInputFormatEN8touchgfx6Bitmap12BitmapFormatE+0x64>
 80022d6:	a201      	add	r2, pc, #4	@ (adr r2, 80022dc <_ZN8STM32DMA22getChromARTInputFormatEN8touchgfx6Bitmap12BitmapFormatE+0x1c>)
 80022d8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80022dc:	08002319 	.word	0x08002319
 80022e0:	08002313 	.word	0x08002313
 80022e4:	0800230d 	.word	0x0800230d
 80022e8:	08002325 	.word	0x08002325
 80022ec:	08002325 	.word	0x08002325
 80022f0:	08002325 	.word	0x08002325
 80022f4:	08002325 	.word	0x08002325
 80022f8:	0800231f 	.word	0x0800231f
 80022fc:	0800231f 	.word	0x0800231f
 8002300:	0800231f 	.word	0x0800231f
 8002304:	0800231f 	.word	0x0800231f
 8002308:	0800231f 	.word	0x0800231f
    {
    case Bitmap::ARGB8888: /* DMA2D input mode set to 32bit ARGB */
        dma2dColorMode = DMA2D_INPUT_ARGB8888;
 800230c:	2300      	movs	r3, #0
 800230e:	60fb      	str	r3, [r7, #12]
        break;
 8002310:	e00e      	b.n	8002330 <_ZN8STM32DMA22getChromARTInputFormatEN8touchgfx6Bitmap12BitmapFormatE+0x70>
    case Bitmap::RGB888: /* DMA2D input mode set to 24bit RGB */
        dma2dColorMode = DMA2D_INPUT_RGB888;
 8002312:	2301      	movs	r3, #1
 8002314:	60fb      	str	r3, [r7, #12]
        break;
 8002316:	e00b      	b.n	8002330 <_ZN8STM32DMA22getChromARTInputFormatEN8touchgfx6Bitmap12BitmapFormatE+0x70>
    case Bitmap::RGB565: /* DMA2D input mode set to 16bit RGB */
        dma2dColorMode = DMA2D_INPUT_RGB565;
 8002318:	2302      	movs	r3, #2
 800231a:	60fb      	str	r3, [r7, #12]
        break;
 800231c:	e008      	b.n	8002330 <_ZN8STM32DMA22getChromARTInputFormatEN8touchgfx6Bitmap12BitmapFormatE+0x70>
    case Bitmap::ARGB2222: /* Fall through */
    case Bitmap::ABGR2222: /* Fall through */
    case Bitmap::RGBA2222: /* Fall through */
    case Bitmap::BGRA2222: /* Fall through */
    case Bitmap::L8:       /* DMA2D input mode set to 8bit Color Look up table*/
        dma2dColorMode = DMA2D_INPUT_L8;
 800231e:	2305      	movs	r3, #5
 8002320:	60fb      	str	r3, [r7, #12]
        break;
 8002322:	e005      	b.n	8002330 <_ZN8STM32DMA22getChromARTInputFormatEN8touchgfx6Bitmap12BitmapFormatE+0x70>
    case Bitmap::BW:     /* Fall through */
    case Bitmap::BW_RLE: /* Fall through */
    case Bitmap::GRAY4:  /* Fall through */
    case Bitmap::GRAY2:  /* Fall through */
    default:             /* Unsupported input format for DMA2D */
        assert(0 && "Unsupported Format!");
 8002324:	4b05      	ldr	r3, [pc, #20]	@ (800233c <_ZN8STM32DMA22getChromARTInputFormatEN8touchgfx6Bitmap12BitmapFormatE+0x7c>)
 8002326:	4a06      	ldr	r2, [pc, #24]	@ (8002340 <_ZN8STM32DMA22getChromARTInputFormatEN8touchgfx6Bitmap12BitmapFormatE+0x80>)
 8002328:	2166      	movs	r1, #102	@ 0x66
 800232a:	4806      	ldr	r0, [pc, #24]	@ (8002344 <_ZN8STM32DMA22getChromARTInputFormatEN8touchgfx6Bitmap12BitmapFormatE+0x84>)
 800232c:	f028 fc8a 	bl	802ac44 <__assert_func>
        break;
    }

    return dma2dColorMode;
 8002330:	68fb      	ldr	r3, [r7, #12]
}
 8002332:	4618      	mov	r0, r3
 8002334:	3710      	adds	r7, #16
 8002336:	46bd      	mov	sp, r7
 8002338:	bd80      	pop	{r7, pc}
 800233a:	bf00      	nop
 800233c:	0802c02c 	.word	0x0802c02c
 8002340:	0802c048 	.word	0x0802c048
 8002344:	0802c094 	.word	0x0802c094

08002348 <_ZN8STM32DMA23getChromARTOutputFormatEN8touchgfx6Bitmap12BitmapFormatE>:

inline uint32_t STM32DMA::getChromARTOutputFormat(Bitmap::BitmapFormat format)
{
 8002348:	b580      	push	{r7, lr}
 800234a:	b084      	sub	sp, #16
 800234c:	af00      	add	r7, sp, #0
 800234e:	6078      	str	r0, [r7, #4]
 8002350:	460b      	mov	r3, r1
 8002352:	70fb      	strb	r3, [r7, #3]
    // Default color mode set to ARGB8888
    uint32_t dma2dColorMode = DMA2D_OUTPUT_ARGB8888;
 8002354:	2300      	movs	r3, #0
 8002356:	60fb      	str	r3, [r7, #12]

    switch (format)
 8002358:	78fb      	ldrb	r3, [r7, #3]
 800235a:	2b0a      	cmp	r3, #10
 800235c:	d821      	bhi.n	80023a2 <_ZN8STM32DMA23getChromARTOutputFormatEN8touchgfx6Bitmap12BitmapFormatE+0x5a>
 800235e:	a201      	add	r2, pc, #4	@ (adr r2, 8002364 <_ZN8STM32DMA23getChromARTOutputFormatEN8touchgfx6Bitmap12BitmapFormatE+0x1c>)
 8002360:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002364:	0800239d 	.word	0x0800239d
 8002368:	08002397 	.word	0x08002397
 800236c:	08002391 	.word	0x08002391
 8002370:	080023a3 	.word	0x080023a3
 8002374:	080023a3 	.word	0x080023a3
 8002378:	080023a3 	.word	0x080023a3
 800237c:	080023a3 	.word	0x080023a3
 8002380:	08002397 	.word	0x08002397
 8002384:	08002397 	.word	0x08002397
 8002388:	08002397 	.word	0x08002397
 800238c:	08002397 	.word	0x08002397
    {
    case Bitmap::ARGB8888: /* DMA2D output mode set to 32bit ARGB */
        dma2dColorMode = DMA2D_OUTPUT_ARGB8888;
 8002390:	2300      	movs	r3, #0
 8002392:	60fb      	str	r3, [r7, #12]
        break;
 8002394:	e00b      	b.n	80023ae <_ZN8STM32DMA23getChromARTOutputFormatEN8touchgfx6Bitmap12BitmapFormatE+0x66>
    case Bitmap::RGB888:   /* Fall through */
    case Bitmap::ARGB2222: /* Fall through */
    case Bitmap::ABGR2222: /* Fall through */
    case Bitmap::RGBA2222: /* Fall through */
    case Bitmap::BGRA2222: /* DMA2D output mode set to 24bit RGB */
        dma2dColorMode = DMA2D_OUTPUT_RGB888;
 8002396:	2301      	movs	r3, #1
 8002398:	60fb      	str	r3, [r7, #12]
        break;
 800239a:	e008      	b.n	80023ae <_ZN8STM32DMA23getChromARTOutputFormatEN8touchgfx6Bitmap12BitmapFormatE+0x66>
    case Bitmap::RGB565: /* DMA2D output mode set to 16bit RGB */
        dma2dColorMode = DMA2D_OUTPUT_RGB565;
 800239c:	2302      	movs	r3, #2
 800239e:	60fb      	str	r3, [r7, #12]
        break;
 80023a0:	e005      	b.n	80023ae <_ZN8STM32DMA23getChromARTOutputFormatEN8touchgfx6Bitmap12BitmapFormatE+0x66>
    case Bitmap::BW:     /* Fall through */
    case Bitmap::BW_RLE: /* Fall through */
    case Bitmap::GRAY4:  /* Fall through */
    case Bitmap::GRAY2:  /* Fall through */
    default:             /* Unsupported output format for DMA2D */
        assert(0 && "Unsupported Format!");
 80023a2:	4b05      	ldr	r3, [pc, #20]	@ (80023b8 <_ZN8STM32DMA23getChromARTOutputFormatEN8touchgfx6Bitmap12BitmapFormatE+0x70>)
 80023a4:	4a05      	ldr	r2, [pc, #20]	@ (80023bc <_ZN8STM32DMA23getChromARTOutputFormatEN8touchgfx6Bitmap12BitmapFormatE+0x74>)
 80023a6:	2187      	movs	r1, #135	@ 0x87
 80023a8:	4805      	ldr	r0, [pc, #20]	@ (80023c0 <_ZN8STM32DMA23getChromARTOutputFormatEN8touchgfx6Bitmap12BitmapFormatE+0x78>)
 80023aa:	f028 fc4b 	bl	802ac44 <__assert_func>
        break;
    }

    return dma2dColorMode;
 80023ae:	68fb      	ldr	r3, [r7, #12]
}
 80023b0:	4618      	mov	r0, r3
 80023b2:	3710      	adds	r7, #16
 80023b4:	46bd      	mov	sp, r7
 80023b6:	bd80      	pop	{r7, pc}
 80023b8:	0802c02c 	.word	0x0802c02c
 80023bc:	0802c124 	.word	0x0802c124
 80023c0:	0802c094 	.word	0x0802c094

080023c4 <_ZN8STM32DMA11getBlitCapsEv>:

BlitOperations STM32DMA::getBlitCaps()
{
 80023c4:	b480      	push	{r7}
 80023c6:	b083      	sub	sp, #12
 80023c8:	af00      	add	r7, sp, #0
 80023ca:	6078      	str	r0, [r7, #4]
                                       | BLIT_OP_COPY_L8
                                       | BLIT_OP_COPY_WITH_ALPHA
                                       | BLIT_OP_COPY_ARGB8888
                                       | BLIT_OP_COPY_ARGB8888_WITH_ALPHA
                                       | BLIT_OP_COPY_A4
                                       | BLIT_OP_COPY_A8);
 80023cc:	f240 33ef 	movw	r3, #1007	@ 0x3ef
}
 80023d0:	4618      	mov	r0, r3
 80023d2:	370c      	adds	r7, #12
 80023d4:	46bd      	mov	sp, r7
 80023d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023da:	4770      	bx	lr

080023dc <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE>:
 * BLIT_OP_COPY_ARGB8888_WITH_ALPHA
 * BLIT_OP_COPY_A4
 * BLIT_OP_COPY_A8
 */
void STM32DMA::setupDataCopy(const BlitOp& blitOp)
{
 80023dc:	b590      	push	{r4, r7, lr}
 80023de:	b089      	sub	sp, #36	@ 0x24
 80023e0:	af00      	add	r7, sp, #0
 80023e2:	6078      	str	r0, [r7, #4]
 80023e4:	6039      	str	r1, [r7, #0]
    uint32_t dma2dForegroundColorMode = getChromARTInputFormat(static_cast<Bitmap::BitmapFormat>(blitOp.srcFormat));
 80023e6:	683b      	ldr	r3, [r7, #0]
 80023e8:	7f5b      	ldrb	r3, [r3, #29]
 80023ea:	4619      	mov	r1, r3
 80023ec:	6878      	ldr	r0, [r7, #4]
 80023ee:	f7ff ff67 	bl	80022c0 <_ZN8STM32DMA22getChromARTInputFormatEN8touchgfx6Bitmap12BitmapFormatE>
 80023f2:	61b8      	str	r0, [r7, #24]
    uint32_t dma2dBackgroundColorMode = getChromARTInputFormat(static_cast<Bitmap::BitmapFormat>(blitOp.dstFormat));
 80023f4:	683b      	ldr	r3, [r7, #0]
 80023f6:	7f9b      	ldrb	r3, [r3, #30]
 80023f8:	4619      	mov	r1, r3
 80023fa:	6878      	ldr	r0, [r7, #4]
 80023fc:	f7ff ff60 	bl	80022c0 <_ZN8STM32DMA22getChromARTInputFormatEN8touchgfx6Bitmap12BitmapFormatE>
 8002400:	6178      	str	r0, [r7, #20]
    uint32_t dma2dOutputColorMode = getChromARTOutputFormat(static_cast<Bitmap::BitmapFormat>(blitOp.dstFormat));
 8002402:	683b      	ldr	r3, [r7, #0]
 8002404:	7f9b      	ldrb	r3, [r3, #30]
 8002406:	4619      	mov	r1, r3
 8002408:	6878      	ldr	r0, [r7, #4]
 800240a:	f7ff ff9d 	bl	8002348 <_ZN8STM32DMA23getChromARTOutputFormatEN8touchgfx6Bitmap12BitmapFormatE>
 800240e:	6138      	str	r0, [r7, #16]

    /* DMA2D OOR register configuration ------------------------------------------*/
    WRITE_REG(DMA2D->OOR, blitOp.dstLoopStride - blitOp.nSteps);
 8002410:	683b      	ldr	r3, [r7, #0]
 8002412:	8b5b      	ldrh	r3, [r3, #26]
 8002414:	461a      	mov	r2, r3
 8002416:	683b      	ldr	r3, [r7, #0]
 8002418:	8a9b      	ldrh	r3, [r3, #20]
 800241a:	1ad2      	subs	r2, r2, r3
 800241c:	4b93      	ldr	r3, [pc, #588]	@ (800266c <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x290>)
 800241e:	641a      	str	r2, [r3, #64]	@ 0x40

    /* DMA2D BGOR register configuration -------------------------------------*/
    WRITE_REG(DMA2D->BGOR, blitOp.dstLoopStride - blitOp.nSteps);
 8002420:	683b      	ldr	r3, [r7, #0]
 8002422:	8b5b      	ldrh	r3, [r3, #26]
 8002424:	461a      	mov	r2, r3
 8002426:	683b      	ldr	r3, [r7, #0]
 8002428:	8a9b      	ldrh	r3, [r3, #20]
 800242a:	1ad2      	subs	r2, r2, r3
 800242c:	4b8f      	ldr	r3, [pc, #572]	@ (800266c <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x290>)
 800242e:	619a      	str	r2, [r3, #24]

    /* DMA2D FGOR register configuration -------------------------------------*/
    WRITE_REG(DMA2D->FGOR, blitOp.srcLoopStride - blitOp.nSteps);
 8002430:	683b      	ldr	r3, [r7, #0]
 8002432:	8b1b      	ldrh	r3, [r3, #24]
 8002434:	461a      	mov	r2, r3
 8002436:	683b      	ldr	r3, [r7, #0]
 8002438:	8a9b      	ldrh	r3, [r3, #20]
 800243a:	1ad2      	subs	r2, r2, r3
 800243c:	4b8b      	ldr	r3, [pc, #556]	@ (800266c <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x290>)
 800243e:	611a      	str	r2, [r3, #16]

    /* DMA2D OPFCCR register configuration ---------------------------------------*/
    WRITE_REG(DMA2D->OPFCCR, dma2dOutputColorMode);
 8002440:	4a8a      	ldr	r2, [pc, #552]	@ (800266c <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x290>)
 8002442:	693b      	ldr	r3, [r7, #16]
 8002444:	6353      	str	r3, [r2, #52]	@ 0x34

    /* Configure DMA2D data size */
    WRITE_REG(DMA2D->NLR, (blitOp.nLoops | (blitOp.nSteps << DMA2D_NLR_PL_Pos)));
 8002446:	683b      	ldr	r3, [r7, #0]
 8002448:	8adb      	ldrh	r3, [r3, #22]
 800244a:	461a      	mov	r2, r3
 800244c:	683b      	ldr	r3, [r7, #0]
 800244e:	8a9b      	ldrh	r3, [r3, #20]
 8002450:	041b      	lsls	r3, r3, #16
 8002452:	431a      	orrs	r2, r3
 8002454:	4b85      	ldr	r3, [pc, #532]	@ (800266c <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x290>)
 8002456:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Configure DMA2D destination address */
    WRITE_REG(DMA2D->OMAR, reinterpret_cast<uint32_t>(blitOp.pDst));
 8002458:	683b      	ldr	r3, [r7, #0]
 800245a:	691a      	ldr	r2, [r3, #16]
 800245c:	4b83      	ldr	r3, [pc, #524]	@ (800266c <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x290>)
 800245e:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Configure DMA2D source address */
    WRITE_REG(DMA2D->FGMAR, reinterpret_cast<uint32_t>(blitOp.pSrc));
 8002460:	683b      	ldr	r3, [r7, #0]
 8002462:	685a      	ldr	r2, [r3, #4]
 8002464:	4b81      	ldr	r3, [pc, #516]	@ (800266c <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x290>)
 8002466:	60da      	str	r2, [r3, #12]

    switch (blitOp.operation)
 8002468:	683b      	ldr	r3, [r7, #0]
 800246a:	681b      	ldr	r3, [r3, #0]
 800246c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8002470:	d035      	beq.n	80024de <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x102>
 8002472:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8002476:	f200 80dd 	bhi.w	8002634 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x258>
 800247a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800247e:	d014      	beq.n	80024aa <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0xce>
 8002480:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8002484:	f200 80d6 	bhi.w	8002634 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x258>
 8002488:	2b80      	cmp	r3, #128	@ 0x80
 800248a:	d056      	beq.n	800253a <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x15e>
 800248c:	2b80      	cmp	r3, #128	@ 0x80
 800248e:	f200 80d1 	bhi.w	8002634 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x258>
 8002492:	2b40      	cmp	r3, #64	@ 0x40
 8002494:	f000 80ba 	beq.w	800260c <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x230>
 8002498:	2b40      	cmp	r3, #64	@ 0x40
 800249a:	f200 80cb 	bhi.w	8002634 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x258>
 800249e:	2b04      	cmp	r3, #4
 80024a0:	d037      	beq.n	8002512 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x136>
 80024a2:	2b20      	cmp	r3, #32
 80024a4:	f000 80b2 	beq.w	800260c <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x230>
 80024a8:	e0c4      	b.n	8002634 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x258>
    {
    case BLIT_OP_COPY_A4:
        /* Set DMA2D color mode and alpha mode */
        WRITE_REG(DMA2D->FGPFCCR, DMA2D_INPUT_A4 | (DMA2D_COMBINE_ALPHA << DMA2D_BGPFCCR_AM_Pos) | (blitOp.alpha << 24));
 80024aa:	683b      	ldr	r3, [r7, #0]
 80024ac:	7f1b      	ldrb	r3, [r3, #28]
 80024ae:	061a      	lsls	r2, r3, #24
 80024b0:	496e      	ldr	r1, [pc, #440]	@ (800266c <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x290>)
 80024b2:	4b6f      	ldr	r3, [pc, #444]	@ (8002670 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x294>)
 80024b4:	4313      	orrs	r3, r2
 80024b6:	61cb      	str	r3, [r1, #28]

        /* set DMA2D foreground color */
        WRITE_REG(DMA2D->FGCOLR, blitOp.color);
 80024b8:	683b      	ldr	r3, [r7, #0]
 80024ba:	330c      	adds	r3, #12
 80024bc:	4c6b      	ldr	r4, [pc, #428]	@ (800266c <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x290>)
 80024be:	4618      	mov	r0, r3
 80024c0:	f7ff fdb0 	bl	8002024 <_ZNK8touchgfx9colortypecvmEv>
 80024c4:	4603      	mov	r3, r0
 80024c6:	6223      	str	r3, [r4, #32]

        /* Write DMA2D BGPFCCR register */
        WRITE_REG(DMA2D->BGPFCCR, dma2dBackgroundColorMode | (DMA2D_NO_MODIF_ALPHA << DMA2D_BGPFCCR_AM_Pos));
 80024c8:	4a68      	ldr	r2, [pc, #416]	@ (800266c <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x290>)
 80024ca:	697b      	ldr	r3, [r7, #20]
 80024cc:	6253      	str	r3, [r2, #36]	@ 0x24

        /* Configure DMA2D Stream source2 address */
        WRITE_REG(DMA2D->BGMAR, reinterpret_cast<uint32_t>(blitOp.pDst));
 80024ce:	683b      	ldr	r3, [r7, #0]
 80024d0:	691a      	ldr	r2, [r3, #16]
 80024d2:	4b66      	ldr	r3, [pc, #408]	@ (800266c <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x290>)
 80024d4:	615a      	str	r2, [r3, #20]

        /* Set DMA2D mode */
        WRITE_REG(DMA2D->CR, DMA2D_M2M_BLEND | DMA2D_IT_TC | DMA2D_CR_START);
 80024d6:	4b65      	ldr	r3, [pc, #404]	@ (800266c <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x290>)
 80024d8:	4a66      	ldr	r2, [pc, #408]	@ (8002674 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x298>)
 80024da:	601a      	str	r2, [r3, #0]
        break;
 80024dc:	e0c2      	b.n	8002664 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x288>
    case BLIT_OP_COPY_A8:
        /* Set DMA2D color mode and alpha mode */
        WRITE_REG(DMA2D->FGPFCCR, DMA2D_INPUT_A8 | (DMA2D_COMBINE_ALPHA << DMA2D_BGPFCCR_AM_Pos) | (blitOp.alpha << 24));
 80024de:	683b      	ldr	r3, [r7, #0]
 80024e0:	7f1b      	ldrb	r3, [r3, #28]
 80024e2:	061a      	lsls	r2, r3, #24
 80024e4:	4961      	ldr	r1, [pc, #388]	@ (800266c <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x290>)
 80024e6:	4b64      	ldr	r3, [pc, #400]	@ (8002678 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x29c>)
 80024e8:	4313      	orrs	r3, r2
 80024ea:	61cb      	str	r3, [r1, #28]

        /* set DMA2D foreground color */
        WRITE_REG(DMA2D->FGCOLR, blitOp.color);
 80024ec:	683b      	ldr	r3, [r7, #0]
 80024ee:	330c      	adds	r3, #12
 80024f0:	4c5e      	ldr	r4, [pc, #376]	@ (800266c <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x290>)
 80024f2:	4618      	mov	r0, r3
 80024f4:	f7ff fd96 	bl	8002024 <_ZNK8touchgfx9colortypecvmEv>
 80024f8:	4603      	mov	r3, r0
 80024fa:	6223      	str	r3, [r4, #32]

        /* Write DMA2D BGPFCCR register */
        WRITE_REG(DMA2D->BGPFCCR, dma2dBackgroundColorMode | (DMA2D_NO_MODIF_ALPHA << DMA2D_BGPFCCR_AM_Pos));
 80024fc:	4a5b      	ldr	r2, [pc, #364]	@ (800266c <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x290>)
 80024fe:	697b      	ldr	r3, [r7, #20]
 8002500:	6253      	str	r3, [r2, #36]	@ 0x24

        /* Configure DMA2D Stream source2 address */
        WRITE_REG(DMA2D->BGMAR, reinterpret_cast<uint32_t>(blitOp.pDst));
 8002502:	683b      	ldr	r3, [r7, #0]
 8002504:	691a      	ldr	r2, [r3, #16]
 8002506:	4b59      	ldr	r3, [pc, #356]	@ (800266c <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x290>)
 8002508:	615a      	str	r2, [r3, #20]

        /* Set DMA2D mode */
        WRITE_REG(DMA2D->CR, DMA2D_M2M_BLEND | DMA2D_IT_TC | DMA2D_CR_START);
 800250a:	4b58      	ldr	r3, [pc, #352]	@ (800266c <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x290>)
 800250c:	4a59      	ldr	r2, [pc, #356]	@ (8002674 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x298>)
 800250e:	601a      	str	r2, [r3, #0]
        break;
 8002510:	e0a8      	b.n	8002664 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x288>
    case BLIT_OP_COPY_WITH_ALPHA:
        /* Set DMA2D color mode and alpha mode */
        WRITE_REG(DMA2D->FGPFCCR, dma2dForegroundColorMode | (DMA2D_COMBINE_ALPHA << DMA2D_BGPFCCR_AM_Pos) | (blitOp.alpha << 24));
 8002512:	683b      	ldr	r3, [r7, #0]
 8002514:	7f1b      	ldrb	r3, [r3, #28]
 8002516:	061a      	lsls	r2, r3, #24
 8002518:	69bb      	ldr	r3, [r7, #24]
 800251a:	4313      	orrs	r3, r2
 800251c:	4a53      	ldr	r2, [pc, #332]	@ (800266c <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x290>)
 800251e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002522:	61d3      	str	r3, [r2, #28]

        /* Write DMA2D BGPFCCR register */
        WRITE_REG(DMA2D->BGPFCCR, dma2dBackgroundColorMode | (DMA2D_NO_MODIF_ALPHA << DMA2D_BGPFCCR_AM_Pos));
 8002524:	4a51      	ldr	r2, [pc, #324]	@ (800266c <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x290>)
 8002526:	697b      	ldr	r3, [r7, #20]
 8002528:	6253      	str	r3, [r2, #36]	@ 0x24

        /* Configure DMA2D Stream source2 address */
        WRITE_REG(DMA2D->BGMAR, reinterpret_cast<uint32_t>(blitOp.pDst));
 800252a:	683b      	ldr	r3, [r7, #0]
 800252c:	691a      	ldr	r2, [r3, #16]
 800252e:	4b4f      	ldr	r3, [pc, #316]	@ (800266c <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x290>)
 8002530:	615a      	str	r2, [r3, #20]

        /* Set DMA2D mode */
        WRITE_REG(DMA2D->CR, DMA2D_M2M_BLEND | DMA2D_IT_TC | DMA2D_CR_START);
 8002532:	4b4e      	ldr	r3, [pc, #312]	@ (800266c <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x290>)
 8002534:	4a4f      	ldr	r2, [pc, #316]	@ (8002674 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x298>)
 8002536:	601a      	str	r2, [r3, #0]
        break;
 8002538:	e094      	b.n	8002664 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x288>
    case BLIT_OP_COPY_L8:
        {
            bool blend = true;
 800253a:	2301      	movs	r3, #1
 800253c:	77fb      	strb	r3, [r7, #31]
            const clutData_t* const palette = reinterpret_cast<const clutData_t*>(blitOp.pClut);
 800253e:	683b      	ldr	r3, [r7, #0]
 8002540:	689b      	ldr	r3, [r3, #8]
 8002542:	60fb      	str	r3, [r7, #12]

            /* Write foreground CLUT memory address */
            WRITE_REG(DMA2D->FGCMAR, reinterpret_cast<uint32_t>(&palette->data));
 8002544:	68fb      	ldr	r3, [r7, #12]
 8002546:	1d1a      	adds	r2, r3, #4
 8002548:	4b48      	ldr	r3, [pc, #288]	@ (800266c <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x290>)
 800254a:	62da      	str	r2, [r3, #44]	@ 0x2c

            /* Set DMA2D color mode and alpha mode */
            WRITE_REG(DMA2D->FGPFCCR, dma2dForegroundColorMode | (DMA2D_COMBINE_ALPHA << DMA2D_BGPFCCR_AM_Pos) | (blitOp.alpha << 24));
 800254c:	683b      	ldr	r3, [r7, #0]
 800254e:	7f1b      	ldrb	r3, [r3, #28]
 8002550:	061a      	lsls	r2, r3, #24
 8002552:	69bb      	ldr	r3, [r7, #24]
 8002554:	4313      	orrs	r3, r2
 8002556:	4a45      	ldr	r2, [pc, #276]	@ (800266c <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x290>)
 8002558:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800255c:	61d3      	str	r3, [r2, #28]

            /* Write DMA2D BGPFCCR register */
            WRITE_REG(DMA2D->BGPFCCR, dma2dBackgroundColorMode | (DMA2D_NO_MODIF_ALPHA << DMA2D_BGPFCCR_AM_Pos));
 800255e:	4a43      	ldr	r2, [pc, #268]	@ (800266c <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x290>)
 8002560:	697b      	ldr	r3, [r7, #20]
 8002562:	6253      	str	r3, [r2, #36]	@ 0x24

            /* Configure DMA2D Stream source2 address */
            WRITE_REG(DMA2D->BGMAR, reinterpret_cast<uint32_t>(blitOp.pDst));
 8002564:	683b      	ldr	r3, [r7, #0]
 8002566:	691a      	ldr	r2, [r3, #16]
 8002568:	4b40      	ldr	r3, [pc, #256]	@ (800266c <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x290>)
 800256a:	615a      	str	r2, [r3, #20]

            /* Configure CLUT */
            switch ((Bitmap::ClutFormat)palette->format)
 800256c:	68fb      	ldr	r3, [r7, #12]
 800256e:	881b      	ldrh	r3, [r3, #0]
 8002570:	b2db      	uxtb	r3, r3
 8002572:	2b00      	cmp	r3, #0
 8002574:	d002      	beq.n	800257c <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x1a0>
 8002576:	2b01      	cmp	r3, #1
 8002578:	d00d      	beq.n	8002596 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x1ba>
 800257a:	e020      	b.n	80025be <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x1e2>
            {
            case Bitmap::CLUT_FORMAT_L8_ARGB8888:
                /* Write foreground CLUT size and CLUT color mode */
                MODIFY_REG(DMA2D->FGPFCCR, (DMA2D_FGPFCCR_CS | DMA2D_FGPFCCR_CCM), (((palette->size - 1) << DMA2D_FGPFCCR_CS_Pos) | (DMA2D_CCM_ARGB8888 << DMA2D_FGPFCCR_CCM_Pos)));
 800257c:	4b3b      	ldr	r3, [pc, #236]	@ (800266c <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x290>)
 800257e:	69da      	ldr	r2, [r3, #28]
 8002580:	4b3e      	ldr	r3, [pc, #248]	@ (800267c <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x2a0>)
 8002582:	4013      	ands	r3, r2
 8002584:	68fa      	ldr	r2, [r7, #12]
 8002586:	8852      	ldrh	r2, [r2, #2]
 8002588:	3a01      	subs	r2, #1
 800258a:	0212      	lsls	r2, r2, #8
 800258c:	4611      	mov	r1, r2
 800258e:	4a37      	ldr	r2, [pc, #220]	@ (800266c <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x290>)
 8002590:	430b      	orrs	r3, r1
 8002592:	61d3      	str	r3, [r2, #28]
                break;
 8002594:	e01a      	b.n	80025cc <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x1f0>
            case Bitmap::CLUT_FORMAT_L8_RGB888:
                if(blitOp.alpha == 255)
 8002596:	683b      	ldr	r3, [r7, #0]
 8002598:	7f1b      	ldrb	r3, [r3, #28]
 800259a:	2bff      	cmp	r3, #255	@ 0xff
 800259c:	d101      	bne.n	80025a2 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x1c6>
                {
                  blend = false;
 800259e:	2300      	movs	r3, #0
 80025a0:	77fb      	strb	r3, [r7, #31]
                }
                MODIFY_REG(DMA2D->FGPFCCR, (DMA2D_FGPFCCR_CS | DMA2D_FGPFCCR_CCM), (((palette->size - 1) << DMA2D_FGPFCCR_CS_Pos) | (DMA2D_CCM_RGB888 << DMA2D_FGPFCCR_CCM_Pos)));
 80025a2:	4b32      	ldr	r3, [pc, #200]	@ (800266c <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x290>)
 80025a4:	69da      	ldr	r2, [r3, #28]
 80025a6:	4b35      	ldr	r3, [pc, #212]	@ (800267c <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x2a0>)
 80025a8:	4013      	ands	r3, r2
 80025aa:	68fa      	ldr	r2, [r7, #12]
 80025ac:	8852      	ldrh	r2, [r2, #2]
 80025ae:	3a01      	subs	r2, #1
 80025b0:	0212      	lsls	r2, r2, #8
 80025b2:	4313      	orrs	r3, r2
 80025b4:	4a2d      	ldr	r2, [pc, #180]	@ (800266c <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x290>)
 80025b6:	f043 0310 	orr.w	r3, r3, #16
 80025ba:	61d3      	str	r3, [r2, #28]
                break;
 80025bc:	e006      	b.n	80025cc <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x1f0>

            case Bitmap::CLUT_FORMAT_L8_RGB565:
            default:
                assert(0 && "Unsupported format");
 80025be:	4b30      	ldr	r3, [pc, #192]	@ (8002680 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x2a4>)
 80025c0:	4a30      	ldr	r2, [pc, #192]	@ (8002684 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x2a8>)
 80025c2:	f240 1111 	movw	r1, #273	@ 0x111
 80025c6:	4830      	ldr	r0, [pc, #192]	@ (8002688 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x2ac>)
 80025c8:	f028 fb3c 	bl	802ac44 <__assert_func>
                break;
            }

            /* Enable the CLUT loading for the foreground */
            SET_BIT(DMA2D->FGPFCCR, DMA2D_FGPFCCR_START);
 80025cc:	4b27      	ldr	r3, [pc, #156]	@ (800266c <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x290>)
 80025ce:	69db      	ldr	r3, [r3, #28]
 80025d0:	4a26      	ldr	r2, [pc, #152]	@ (800266c <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x290>)
 80025d2:	f043 0320 	orr.w	r3, r3, #32
 80025d6:	61d3      	str	r3, [r2, #28]

            while ((READ_REG(DMA2D->FGPFCCR) & DMA2D_FGPFCCR_START) != 0U)
 80025d8:	bf00      	nop
 80025da:	4b24      	ldr	r3, [pc, #144]	@ (800266c <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x290>)
 80025dc:	69db      	ldr	r3, [r3, #28]
 80025de:	f003 0320 	and.w	r3, r3, #32
 80025e2:	2b00      	cmp	r3, #0
 80025e4:	bf14      	ite	ne
 80025e6:	2301      	movne	r3, #1
 80025e8:	2300      	moveq	r3, #0
 80025ea:	b2db      	uxtb	r3, r3
 80025ec:	2b00      	cmp	r3, #0
 80025ee:	d1f4      	bne.n	80025da <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x1fe>
            {
            }
            DMA2D->IFCR = (DMA2D_FLAG_CTC);
 80025f0:	4b1e      	ldr	r3, [pc, #120]	@ (800266c <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x290>)
 80025f2:	2210      	movs	r2, #16
 80025f4:	609a      	str	r2, [r3, #8]

            /* Set DMA2D mode */
            if(blend)
 80025f6:	7ffb      	ldrb	r3, [r7, #31]
 80025f8:	2b00      	cmp	r3, #0
 80025fa:	d003      	beq.n	8002604 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x228>
            {
                WRITE_REG(DMA2D->CR, DMA2D_M2M_BLEND | DMA2D_IT_TC | DMA2D_CR_START);
 80025fc:	4b1b      	ldr	r3, [pc, #108]	@ (800266c <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x290>)
 80025fe:	4a1d      	ldr	r2, [pc, #116]	@ (8002674 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x298>)
 8002600:	601a      	str	r2, [r3, #0]
            else
            {
                WRITE_REG(DMA2D->CR, DMA2D_M2M_PFC | DMA2D_IT_TC | DMA2D_CR_START);
            }
        }
      break;
 8002602:	e02f      	b.n	8002664 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x288>
                WRITE_REG(DMA2D->CR, DMA2D_M2M_PFC | DMA2D_IT_TC | DMA2D_CR_START);
 8002604:	4b19      	ldr	r3, [pc, #100]	@ (800266c <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x290>)
 8002606:	4a21      	ldr	r2, [pc, #132]	@ (800268c <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x2b0>)
 8002608:	601a      	str	r2, [r3, #0]
      break;
 800260a:	e02b      	b.n	8002664 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x288>
    case BLIT_OP_COPY_ARGB8888:
    case BLIT_OP_COPY_ARGB8888_WITH_ALPHA:
        /* Set DMA2D color mode and alpha mode */
        WRITE_REG(DMA2D->FGPFCCR, dma2dForegroundColorMode | (DMA2D_COMBINE_ALPHA << DMA2D_BGPFCCR_AM_Pos) | (blitOp.alpha << 24));
 800260c:	683b      	ldr	r3, [r7, #0]
 800260e:	7f1b      	ldrb	r3, [r3, #28]
 8002610:	061a      	lsls	r2, r3, #24
 8002612:	69bb      	ldr	r3, [r7, #24]
 8002614:	4313      	orrs	r3, r2
 8002616:	4a15      	ldr	r2, [pc, #84]	@ (800266c <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x290>)
 8002618:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800261c:	61d3      	str	r3, [r2, #28]

        /* Write DMA2D BGPFCCR register */
        WRITE_REG(DMA2D->BGPFCCR, dma2dBackgroundColorMode | (DMA2D_NO_MODIF_ALPHA << DMA2D_BGPFCCR_AM_Pos));
 800261e:	4a13      	ldr	r2, [pc, #76]	@ (800266c <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x290>)
 8002620:	697b      	ldr	r3, [r7, #20]
 8002622:	6253      	str	r3, [r2, #36]	@ 0x24

        /* Configure DMA2D Stream source2 address */
        WRITE_REG(DMA2D->BGMAR, reinterpret_cast<uint32_t>(blitOp.pDst));
 8002624:	683b      	ldr	r3, [r7, #0]
 8002626:	691a      	ldr	r2, [r3, #16]
 8002628:	4b10      	ldr	r3, [pc, #64]	@ (800266c <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x290>)
 800262a:	615a      	str	r2, [r3, #20]

        /* Set DMA2D mode */
        WRITE_REG(DMA2D->CR, DMA2D_M2M_BLEND | DMA2D_IT_TC | DMA2D_CR_START);
 800262c:	4b0f      	ldr	r3, [pc, #60]	@ (800266c <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x290>)
 800262e:	4a11      	ldr	r2, [pc, #68]	@ (8002674 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x298>)
 8002630:	601a      	str	r2, [r3, #0]
        break;
 8002632:	e017      	b.n	8002664 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x288>
    default: /* BLIT_OP_COPY */
        /* Set DMA2D color mode and alpha mode */
        WRITE_REG(DMA2D->FGPFCCR, dma2dForegroundColorMode | (DMA2D_COMBINE_ALPHA << DMA2D_BGPFCCR_AM_Pos) | (blitOp.alpha << 24));
 8002634:	683b      	ldr	r3, [r7, #0]
 8002636:	7f1b      	ldrb	r3, [r3, #28]
 8002638:	061a      	lsls	r2, r3, #24
 800263a:	69bb      	ldr	r3, [r7, #24]
 800263c:	4313      	orrs	r3, r2
 800263e:	4a0b      	ldr	r2, [pc, #44]	@ (800266c <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x290>)
 8002640:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002644:	61d3      	str	r3, [r2, #28]

        /* Perform pixel-format-conversion (PFC) If Bitmap format is not same format as framebuffer format */
        if (blitOp.srcFormat != blitOp.dstFormat)
 8002646:	683b      	ldr	r3, [r7, #0]
 8002648:	7f5a      	ldrb	r2, [r3, #29]
 800264a:	683b      	ldr	r3, [r7, #0]
 800264c:	7f9b      	ldrb	r3, [r3, #30]
 800264e:	429a      	cmp	r2, r3
 8002650:	d003      	beq.n	800265a <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x27e>
        {
            /* Start DMA2D : PFC Mode */
            WRITE_REG(DMA2D->CR, DMA2D_M2M_PFC | DMA2D_IT_TC | DMA2D_CR_START);
 8002652:	4b06      	ldr	r3, [pc, #24]	@ (800266c <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x290>)
 8002654:	4a0d      	ldr	r2, [pc, #52]	@ (800268c <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x2b0>)
 8002656:	601a      	str	r2, [r3, #0]
        else
        {
            /* Start DMA2D : M2M Mode */
            WRITE_REG(DMA2D->CR, DMA2D_M2M | DMA2D_IT_TC | DMA2D_CR_START);
        }
        break;
 8002658:	e003      	b.n	8002662 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x286>
            WRITE_REG(DMA2D->CR, DMA2D_M2M | DMA2D_IT_TC | DMA2D_CR_START);
 800265a:	4b04      	ldr	r3, [pc, #16]	@ (800266c <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x290>)
 800265c:	f240 2201 	movw	r2, #513	@ 0x201
 8002660:	601a      	str	r2, [r3, #0]
        break;
 8002662:	bf00      	nop
    }
}
 8002664:	bf00      	nop
 8002666:	3724      	adds	r7, #36	@ 0x24
 8002668:	46bd      	mov	sp, r7
 800266a:	bd90      	pop	{r4, r7, pc}
 800266c:	52001000 	.word	0x52001000
 8002670:	0002000a 	.word	0x0002000a
 8002674:	00020201 	.word	0x00020201
 8002678:	00020009 	.word	0x00020009
 800267c:	ffff00ef 	.word	0xffff00ef
 8002680:	0802c170 	.word	0x0802c170
 8002684:	0802c18c 	.word	0x0802c18c
 8002688:	0802c094 	.word	0x0802c094
 800268c:	00010201 	.word	0x00010201

08002690 <_ZN8STM32DMA13setupDataFillERKN8touchgfx6BlitOpE>:
 * void STM32DMA::setupDataFill(const BlitOp& blitOp) handles blit operation of
 * BLIT_OP_FILL
 * BLIT_OP_FILL_WITH_ALPHA
 */
void STM32DMA::setupDataFill(const BlitOp& blitOp)
{
 8002690:	b590      	push	{r4, r7, lr}
 8002692:	b085      	sub	sp, #20
 8002694:	af00      	add	r7, sp, #0
 8002696:	6078      	str	r0, [r7, #4]
 8002698:	6039      	str	r1, [r7, #0]
    uint32_t dma2dOutputColorMode = getChromARTOutputFormat(static_cast<Bitmap::BitmapFormat>(blitOp.dstFormat));
 800269a:	683b      	ldr	r3, [r7, #0]
 800269c:	7f9b      	ldrb	r3, [r3, #30]
 800269e:	4619      	mov	r1, r3
 80026a0:	6878      	ldr	r0, [r7, #4]
 80026a2:	f7ff fe51 	bl	8002348 <_ZN8STM32DMA23getChromARTOutputFormatEN8touchgfx6Bitmap12BitmapFormatE>
 80026a6:	60f8      	str	r0, [r7, #12]

    /* DMA2D OPFCCR register configuration ---------------------------------------*/
    WRITE_REG(DMA2D->OPFCCR, dma2dOutputColorMode);
 80026a8:	4a3a      	ldr	r2, [pc, #232]	@ (8002794 <_ZN8STM32DMA13setupDataFillERKN8touchgfx6BlitOpE+0x104>)
 80026aa:	68fb      	ldr	r3, [r7, #12]
 80026ac:	6353      	str	r3, [r2, #52]	@ 0x34

    /* Configure DMA2D data size */
    WRITE_REG(DMA2D->NLR, (blitOp.nLoops | (blitOp.nSteps << DMA2D_NLR_PL_Pos)));
 80026ae:	683b      	ldr	r3, [r7, #0]
 80026b0:	8adb      	ldrh	r3, [r3, #22]
 80026b2:	461a      	mov	r2, r3
 80026b4:	683b      	ldr	r3, [r7, #0]
 80026b6:	8a9b      	ldrh	r3, [r3, #20]
 80026b8:	041b      	lsls	r3, r3, #16
 80026ba:	431a      	orrs	r2, r3
 80026bc:	4b35      	ldr	r3, [pc, #212]	@ (8002794 <_ZN8STM32DMA13setupDataFillERKN8touchgfx6BlitOpE+0x104>)
 80026be:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Configure DMA2D destination address */
    WRITE_REG(DMA2D->OMAR, reinterpret_cast<uint32_t>(blitOp.pDst));
 80026c0:	683b      	ldr	r3, [r7, #0]
 80026c2:	691a      	ldr	r2, [r3, #16]
 80026c4:	4b33      	ldr	r3, [pc, #204]	@ (8002794 <_ZN8STM32DMA13setupDataFillERKN8touchgfx6BlitOpE+0x104>)
 80026c6:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* DMA2D OOR register configuration ------------------------------------------*/
    WRITE_REG(DMA2D->OOR, blitOp.dstLoopStride - blitOp.nSteps);
 80026c8:	683b      	ldr	r3, [r7, #0]
 80026ca:	8b5b      	ldrh	r3, [r3, #26]
 80026cc:	461a      	mov	r2, r3
 80026ce:	683b      	ldr	r3, [r7, #0]
 80026d0:	8a9b      	ldrh	r3, [r3, #20]
 80026d2:	1ad2      	subs	r2, r2, r3
 80026d4:	4b2f      	ldr	r3, [pc, #188]	@ (8002794 <_ZN8STM32DMA13setupDataFillERKN8touchgfx6BlitOpE+0x104>)
 80026d6:	641a      	str	r2, [r3, #64]	@ 0x40

    if (blitOp.operation == BLIT_OP_FILL_WITH_ALPHA)
 80026d8:	683b      	ldr	r3, [r7, #0]
 80026da:	681b      	ldr	r3, [r3, #0]
 80026dc:	2b08      	cmp	r3, #8
 80026de:	d12d      	bne.n	800273c <_ZN8STM32DMA13setupDataFillERKN8touchgfx6BlitOpE+0xac>
    {
        /* DMA2D BGOR register configuration -------------------------------------*/
        WRITE_REG(DMA2D->BGOR, blitOp.dstLoopStride - blitOp.nSteps);
 80026e0:	683b      	ldr	r3, [r7, #0]
 80026e2:	8b5b      	ldrh	r3, [r3, #26]
 80026e4:	461a      	mov	r2, r3
 80026e6:	683b      	ldr	r3, [r7, #0]
 80026e8:	8a9b      	ldrh	r3, [r3, #20]
 80026ea:	1ad2      	subs	r2, r2, r3
 80026ec:	4b29      	ldr	r3, [pc, #164]	@ (8002794 <_ZN8STM32DMA13setupDataFillERKN8touchgfx6BlitOpE+0x104>)
 80026ee:	619a      	str	r2, [r3, #24]

        /* DMA2D FGOR register configuration -------------------------------------*/
        WRITE_REG(DMA2D->FGOR, blitOp.dstLoopStride - blitOp.nSteps);
 80026f0:	683b      	ldr	r3, [r7, #0]
 80026f2:	8b5b      	ldrh	r3, [r3, #26]
 80026f4:	461a      	mov	r2, r3
 80026f6:	683b      	ldr	r3, [r7, #0]
 80026f8:	8a9b      	ldrh	r3, [r3, #20]
 80026fa:	1ad2      	subs	r2, r2, r3
 80026fc:	4b25      	ldr	r3, [pc, #148]	@ (8002794 <_ZN8STM32DMA13setupDataFillERKN8touchgfx6BlitOpE+0x104>)
 80026fe:	611a      	str	r2, [r3, #16]

        /* Write DMA2D BGPFCCR register */
        WRITE_REG(DMA2D->BGPFCCR, dma2dOutputColorMode | (DMA2D_NO_MODIF_ALPHA << DMA2D_BGPFCCR_AM_Pos));
 8002700:	4a24      	ldr	r2, [pc, #144]	@ (8002794 <_ZN8STM32DMA13setupDataFillERKN8touchgfx6BlitOpE+0x104>)
 8002702:	68fb      	ldr	r3, [r7, #12]
 8002704:	6253      	str	r3, [r2, #36]	@ 0x24

        /* Write DMA2D FGPFCCR register */
        WRITE_REG(DMA2D->FGPFCCR, CM_A8 | (DMA2D_REPLACE_ALPHA << DMA2D_BGPFCCR_AM_Pos) | ((blitOp.alpha << 24) & DMA2D_BGPFCCR_ALPHA));
 8002706:	683b      	ldr	r3, [r7, #0]
 8002708:	7f1b      	ldrb	r3, [r3, #28]
 800270a:	061a      	lsls	r2, r3, #24
 800270c:	4921      	ldr	r1, [pc, #132]	@ (8002794 <_ZN8STM32DMA13setupDataFillERKN8touchgfx6BlitOpE+0x104>)
 800270e:	4b22      	ldr	r3, [pc, #136]	@ (8002798 <_ZN8STM32DMA13setupDataFillERKN8touchgfx6BlitOpE+0x108>)
 8002710:	4313      	orrs	r3, r2
 8002712:	61cb      	str	r3, [r1, #28]

        /* DMA2D FGCOLR register configuration -------------------------------------*/
        WRITE_REG(DMA2D->FGCOLR, blitOp.color);
 8002714:	683b      	ldr	r3, [r7, #0]
 8002716:	330c      	adds	r3, #12
 8002718:	4c1e      	ldr	r4, [pc, #120]	@ (8002794 <_ZN8STM32DMA13setupDataFillERKN8touchgfx6BlitOpE+0x104>)
 800271a:	4618      	mov	r0, r3
 800271c:	f7ff fc82 	bl	8002024 <_ZNK8touchgfx9colortypecvmEv>
 8002720:	4603      	mov	r3, r0
 8002722:	6223      	str	r3, [r4, #32]

        /* Configure DMA2D Stream source2 address */
        WRITE_REG(DMA2D->BGMAR, reinterpret_cast<uint32_t>(blitOp.pDst));
 8002724:	683b      	ldr	r3, [r7, #0]
 8002726:	691a      	ldr	r2, [r3, #16]
 8002728:	4b1a      	ldr	r3, [pc, #104]	@ (8002794 <_ZN8STM32DMA13setupDataFillERKN8touchgfx6BlitOpE+0x104>)
 800272a:	615a      	str	r2, [r3, #20]

        /* Configure DMA2D source address */
        WRITE_REG(DMA2D->FGMAR, reinterpret_cast<uint32_t>(blitOp.pDst));
 800272c:	683b      	ldr	r3, [r7, #0]
 800272e:	691a      	ldr	r2, [r3, #16]
 8002730:	4b18      	ldr	r3, [pc, #96]	@ (8002794 <_ZN8STM32DMA13setupDataFillERKN8touchgfx6BlitOpE+0x104>)
 8002732:	60da      	str	r2, [r3, #12]

        /* Enable the Peripheral and Enable the transfer complete interrupt */
        WRITE_REG(DMA2D->CR, (DMA2D_IT_TC | DMA2D_CR_START | DMA2D_M2M_BLEND));
 8002734:	4b17      	ldr	r3, [pc, #92]	@ (8002794 <_ZN8STM32DMA13setupDataFillERKN8touchgfx6BlitOpE+0x104>)
 8002736:	4a19      	ldr	r2, [pc, #100]	@ (800279c <_ZN8STM32DMA13setupDataFillERKN8touchgfx6BlitOpE+0x10c>)
 8002738:	601a      	str	r2, [r3, #0]
        WRITE_REG(DMA2D->OCOLR, ((blitOp.color >> 8) & 0xF800) | ((blitOp.color >> 5) & 0x07E0) | ((blitOp.color >> 3) & 0x001F));

        /* Enable the Peripheral and Enable the transfer complete interrupt */
        WRITE_REG(DMA2D->CR, (DMA2D_IT_TC | DMA2D_CR_START | DMA2D_R2M));
    }
}
 800273a:	e027      	b.n	800278c <_ZN8STM32DMA13setupDataFillERKN8touchgfx6BlitOpE+0xfc>
        WRITE_REG(DMA2D->FGPFCCR, dma2dOutputColorMode | (DMA2D_NO_MODIF_ALPHA << DMA2D_BGPFCCR_AM_Pos));
 800273c:	4a15      	ldr	r2, [pc, #84]	@ (8002794 <_ZN8STM32DMA13setupDataFillERKN8touchgfx6BlitOpE+0x104>)
 800273e:	68fb      	ldr	r3, [r7, #12]
 8002740:	61d3      	str	r3, [r2, #28]
        WRITE_REG(DMA2D->FGOR, 0);
 8002742:	4b14      	ldr	r3, [pc, #80]	@ (8002794 <_ZN8STM32DMA13setupDataFillERKN8touchgfx6BlitOpE+0x104>)
 8002744:	2200      	movs	r2, #0
 8002746:	611a      	str	r2, [r3, #16]
        WRITE_REG(DMA2D->OCOLR, ((blitOp.color >> 8) & 0xF800) | ((blitOp.color >> 5) & 0x07E0) | ((blitOp.color >> 3) & 0x001F));
 8002748:	683b      	ldr	r3, [r7, #0]
 800274a:	330c      	adds	r3, #12
 800274c:	4618      	mov	r0, r3
 800274e:	f7ff fc69 	bl	8002024 <_ZNK8touchgfx9colortypecvmEv>
 8002752:	4603      	mov	r3, r0
 8002754:	0a1b      	lsrs	r3, r3, #8
 8002756:	f403 4478 	and.w	r4, r3, #63488	@ 0xf800
 800275a:	683b      	ldr	r3, [r7, #0]
 800275c:	330c      	adds	r3, #12
 800275e:	4618      	mov	r0, r3
 8002760:	f7ff fc60 	bl	8002024 <_ZNK8touchgfx9colortypecvmEv>
 8002764:	4603      	mov	r3, r0
 8002766:	095b      	lsrs	r3, r3, #5
 8002768:	f403 63fc 	and.w	r3, r3, #2016	@ 0x7e0
 800276c:	431c      	orrs	r4, r3
 800276e:	683b      	ldr	r3, [r7, #0]
 8002770:	330c      	adds	r3, #12
 8002772:	4618      	mov	r0, r3
 8002774:	f7ff fc56 	bl	8002024 <_ZNK8touchgfx9colortypecvmEv>
 8002778:	4603      	mov	r3, r0
 800277a:	08db      	lsrs	r3, r3, #3
 800277c:	f003 031f 	and.w	r3, r3, #31
 8002780:	4a04      	ldr	r2, [pc, #16]	@ (8002794 <_ZN8STM32DMA13setupDataFillERKN8touchgfx6BlitOpE+0x104>)
 8002782:	4323      	orrs	r3, r4
 8002784:	6393      	str	r3, [r2, #56]	@ 0x38
        WRITE_REG(DMA2D->CR, (DMA2D_IT_TC | DMA2D_CR_START | DMA2D_R2M));
 8002786:	4b03      	ldr	r3, [pc, #12]	@ (8002794 <_ZN8STM32DMA13setupDataFillERKN8touchgfx6BlitOpE+0x104>)
 8002788:	4a05      	ldr	r2, [pc, #20]	@ (80027a0 <_ZN8STM32DMA13setupDataFillERKN8touchgfx6BlitOpE+0x110>)
 800278a:	601a      	str	r2, [r3, #0]
}
 800278c:	bf00      	nop
 800278e:	3714      	adds	r7, #20
 8002790:	46bd      	mov	sp, r7
 8002792:	bd90      	pop	{r4, r7, pc}
 8002794:	52001000 	.word	0x52001000
 8002798:	00010009 	.word	0x00010009
 800279c:	00020201 	.word	0x00020201
 80027a0:	00030201 	.word	0x00030201

080027a4 <_ZN8touchgfx17LockFreeDMA_QueueD1Ev>:
class LockFreeDMA_Queue : public DMA_Queue
 80027a4:	b580      	push	{r7, lr}
 80027a6:	b082      	sub	sp, #8
 80027a8:	af00      	add	r7, sp, #0
 80027aa:	6078      	str	r0, [r7, #4]
 80027ac:	4a05      	ldr	r2, [pc, #20]	@ (80027c4 <_ZN8touchgfx17LockFreeDMA_QueueD1Ev+0x20>)
 80027ae:	687b      	ldr	r3, [r7, #4]
 80027b0:	601a      	str	r2, [r3, #0]
 80027b2:	687b      	ldr	r3, [r7, #4]
 80027b4:	4618      	mov	r0, r3
 80027b6:	f7ff fc41 	bl	800203c <_ZN8touchgfx9DMA_QueueD1Ev>
 80027ba:	687b      	ldr	r3, [r7, #4]
 80027bc:	4618      	mov	r0, r3
 80027be:	3708      	adds	r7, #8
 80027c0:	46bd      	mov	sp, r7
 80027c2:	bd80      	pop	{r7, pc}
 80027c4:	0802e928 	.word	0x0802e928

080027c8 <_ZN8touchgfx17LockFreeDMA_QueueD0Ev>:
 80027c8:	b580      	push	{r7, lr}
 80027ca:	b082      	sub	sp, #8
 80027cc:	af00      	add	r7, sp, #0
 80027ce:	6078      	str	r0, [r7, #4]
 80027d0:	6878      	ldr	r0, [r7, #4]
 80027d2:	f7ff ffe7 	bl	80027a4 <_ZN8touchgfx17LockFreeDMA_QueueD1Ev>
 80027d6:	2114      	movs	r1, #20
 80027d8:	6878      	ldr	r0, [r7, #4]
 80027da:	f028 fa04 	bl	802abe6 <_ZdlPvj>
 80027de:	687b      	ldr	r3, [r7, #4]
 80027e0:	4618      	mov	r0, r3
 80027e2:	3708      	adds	r7, #8
 80027e4:	46bd      	mov	sp, r7
 80027e6:	bd80      	pop	{r7, pc}

080027e8 <_ZN8touchgfx4RectC1Ev>:
/** Class representing a Rectangle with a few convenient methods. */
class Rect
{
public:
    /** Default constructor. Resulting in an empty Rect with coordinates 0,0. */
    Rect()
 80027e8:	b480      	push	{r7}
 80027ea:	b083      	sub	sp, #12
 80027ec:	af00      	add	r7, sp, #0
 80027ee:	6078      	str	r0, [r7, #4]
        : x(0), y(0), width(0), height(0)
 80027f0:	687b      	ldr	r3, [r7, #4]
 80027f2:	2200      	movs	r2, #0
 80027f4:	801a      	strh	r2, [r3, #0]
 80027f6:	687b      	ldr	r3, [r7, #4]
 80027f8:	2200      	movs	r2, #0
 80027fa:	805a      	strh	r2, [r3, #2]
 80027fc:	687b      	ldr	r3, [r7, #4]
 80027fe:	2200      	movs	r2, #0
 8002800:	809a      	strh	r2, [r3, #4]
 8002802:	687b      	ldr	r3, [r7, #4]
 8002804:	2200      	movs	r2, #0
 8002806:	80da      	strh	r2, [r3, #6]
    {
    }
 8002808:	687b      	ldr	r3, [r7, #4]
 800280a:	4618      	mov	r0, r3
 800280c:	370c      	adds	r7, #12
 800280e:	46bd      	mov	sp, r7
 8002810:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002814:	4770      	bx	lr
	...

08002818 <_ZN8touchgfx9TypedText13registerTextsEPKNS_5TextsE>:
     * Registers an array of texts. This function is called automatically from
     * touchgfx_generic_init(). Should not be called under normal circumstances.
     *
     * @param  t The array of texts.
     */
    static void registerTexts(const Texts* t)
 8002818:	b480      	push	{r7}
 800281a:	b083      	sub	sp, #12
 800281c:	af00      	add	r7, sp, #0
 800281e:	6078      	str	r0, [r7, #4]
    {
        texts = t;
 8002820:	4a04      	ldr	r2, [pc, #16]	@ (8002834 <_ZN8touchgfx9TypedText13registerTextsEPKNS_5TextsE+0x1c>)
 8002822:	687b      	ldr	r3, [r7, #4]
 8002824:	6013      	str	r3, [r2, #0]
    }
 8002826:	bf00      	nop
 8002828:	370c      	adds	r7, #12
 800282a:	46bd      	mov	sp, r7
 800282c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002830:	4770      	bx	lr
 8002832:	bf00      	nop
 8002834:	2400b8e0 	.word	0x2400b8e0

08002838 <_ZN8touchgfx12FontProviderD1Ev>:
     * @return The font with a font id of fontId.
     */
    virtual Font* getFont(FontId fontId) = 0;

    /** Finalizes an instance of the FontProvider class. */
    virtual ~FontProvider()
 8002838:	b480      	push	{r7}
 800283a:	b083      	sub	sp, #12
 800283c:	af00      	add	r7, sp, #0
 800283e:	6078      	str	r0, [r7, #4]
    {
 8002840:	4a04      	ldr	r2, [pc, #16]	@ (8002854 <_ZN8touchgfx12FontProviderD1Ev+0x1c>)
 8002842:	687b      	ldr	r3, [r7, #4]
 8002844:	601a      	str	r2, [r3, #0]
    }
 8002846:	687b      	ldr	r3, [r7, #4]
 8002848:	4618      	mov	r0, r3
 800284a:	370c      	adds	r7, #12
 800284c:	46bd      	mov	sp, r7
 800284e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002852:	4770      	bx	lr
 8002854:	0802ce0c 	.word	0x0802ce0c

08002858 <_ZN8touchgfx12FontProviderD0Ev>:
    virtual ~FontProvider()
 8002858:	b580      	push	{r7, lr}
 800285a:	b082      	sub	sp, #8
 800285c:	af00      	add	r7, sp, #0
 800285e:	6078      	str	r0, [r7, #4]
    }
 8002860:	6878      	ldr	r0, [r7, #4]
 8002862:	f7ff ffe9 	bl	8002838 <_ZN8touchgfx12FontProviderD1Ev>
 8002866:	2104      	movs	r1, #4
 8002868:	6878      	ldr	r0, [r7, #4]
 800286a:	f028 f9bc 	bl	802abe6 <_ZdlPvj>
 800286e:	687b      	ldr	r3, [r7, #4]
 8002870:	4618      	mov	r0, r3
 8002872:	3708      	adds	r7, #8
 8002874:	46bd      	mov	sp, r7
 8002876:	bd80      	pop	{r7, pc}

08002878 <_ZN8touchgfx7MVPHeapC1ERNS_17AbstractPartitionES2_S2_RNS_14MVPApplicationE>:
     * @param [in] scr  A memory partition containing enough memory to hold the largest view.
     * @param [in] tra  A memory partition containing enough memory to hold the largest
     *                  transition.
     * @param [in] app  A reference to the MVPApplication instance.
     */
    MVPHeap(AbstractPartition& pres,
 8002878:	b480      	push	{r7}
 800287a:	b085      	sub	sp, #20
 800287c:	af00      	add	r7, sp, #0
 800287e:	60f8      	str	r0, [r7, #12]
 8002880:	60b9      	str	r1, [r7, #8]
 8002882:	607a      	str	r2, [r7, #4]
 8002884:	603b      	str	r3, [r7, #0]
            AbstractPartition& tra,
            MVPApplication& app)
        : presenterStorage(pres),
          screenStorage(scr),
          transitionStorage(tra),
          frontendApplication(app)
 8002886:	4a0b      	ldr	r2, [pc, #44]	@ (80028b4 <_ZN8touchgfx7MVPHeapC1ERNS_17AbstractPartitionES2_S2_RNS_14MVPApplicationE+0x3c>)
 8002888:	68fb      	ldr	r3, [r7, #12]
 800288a:	601a      	str	r2, [r3, #0]
        : presenterStorage(pres),
 800288c:	68fb      	ldr	r3, [r7, #12]
 800288e:	68ba      	ldr	r2, [r7, #8]
 8002890:	605a      	str	r2, [r3, #4]
          screenStorage(scr),
 8002892:	68fb      	ldr	r3, [r7, #12]
 8002894:	687a      	ldr	r2, [r7, #4]
 8002896:	609a      	str	r2, [r3, #8]
          transitionStorage(tra),
 8002898:	68fb      	ldr	r3, [r7, #12]
 800289a:	683a      	ldr	r2, [r7, #0]
 800289c:	60da      	str	r2, [r3, #12]
          frontendApplication(app)
 800289e:	68fb      	ldr	r3, [r7, #12]
 80028a0:	69ba      	ldr	r2, [r7, #24]
 80028a2:	611a      	str	r2, [r3, #16]
    {
    }
 80028a4:	68fb      	ldr	r3, [r7, #12]
 80028a6:	4618      	mov	r0, r3
 80028a8:	3714      	adds	r7, #20
 80028aa:	46bd      	mov	sp, r7
 80028ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028b0:	4770      	bx	lr
 80028b2:	bf00      	nop
 80028b4:	0802cdfc 	.word	0x0802cdfc

080028b8 <_ZN8touchgfx7MVPHeapD1Ev>:

    /** Finalizes an instance of the MVPHeap class. */
    virtual ~MVPHeap()
 80028b8:	b480      	push	{r7}
 80028ba:	b083      	sub	sp, #12
 80028bc:	af00      	add	r7, sp, #0
 80028be:	6078      	str	r0, [r7, #4]
    {
 80028c0:	4a04      	ldr	r2, [pc, #16]	@ (80028d4 <_ZN8touchgfx7MVPHeapD1Ev+0x1c>)
 80028c2:	687b      	ldr	r3, [r7, #4]
 80028c4:	601a      	str	r2, [r3, #0]
    }
 80028c6:	687b      	ldr	r3, [r7, #4]
 80028c8:	4618      	mov	r0, r3
 80028ca:	370c      	adds	r7, #12
 80028cc:	46bd      	mov	sp, r7
 80028ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028d2:	4770      	bx	lr
 80028d4:	0802cdfc 	.word	0x0802cdfc

080028d8 <_ZN8touchgfx7MVPHeapD0Ev>:
    virtual ~MVPHeap()
 80028d8:	b580      	push	{r7, lr}
 80028da:	b082      	sub	sp, #8
 80028dc:	af00      	add	r7, sp, #0
 80028de:	6078      	str	r0, [r7, #4]
    }
 80028e0:	6878      	ldr	r0, [r7, #4]
 80028e2:	f7ff ffe9 	bl	80028b8 <_ZN8touchgfx7MVPHeapD1Ev>
 80028e6:	2114      	movs	r1, #20
 80028e8:	6878      	ldr	r0, [r7, #4]
 80028ea:	f028 f97c 	bl	802abe6 <_ZdlPvj>
 80028ee:	687b      	ldr	r3, [r7, #4]
 80028f0:	4618      	mov	r0, r3
 80028f2:	3708      	adds	r7, #8
 80028f4:	46bd      	mov	sp, r7
 80028f6:	bd80      	pop	{r7, pc}

080028f8 <_ZN8touchgfx15UIEventListener16handleClickEventERKNS_10ClickEventE>:
     * This handler is invoked when a mouse click or display touch event has been detected
     * by the system.
     *
     * @param  event The event data.
     */
    virtual void handleClickEvent(const ClickEvent& event)
 80028f8:	b480      	push	{r7}
 80028fa:	b083      	sub	sp, #12
 80028fc:	af00      	add	r7, sp, #0
 80028fe:	6078      	str	r0, [r7, #4]
 8002900:	6039      	str	r1, [r7, #0]
    {
    }
 8002902:	bf00      	nop
 8002904:	370c      	adds	r7, #12
 8002906:	46bd      	mov	sp, r7
 8002908:	f85d 7b04 	ldr.w	r7, [sp], #4
 800290c:	4770      	bx	lr

0800290e <_ZN8touchgfx15UIEventListener15handleDragEventERKNS_9DragEventE>:
    /**
     * This handler is invoked when a drag event has been detected by the system.
     *
     * @param  event The event data.
     */
    virtual void handleDragEvent(const DragEvent& event)
 800290e:	b480      	push	{r7}
 8002910:	b083      	sub	sp, #12
 8002912:	af00      	add	r7, sp, #0
 8002914:	6078      	str	r0, [r7, #4]
 8002916:	6039      	str	r1, [r7, #0]
    {
    }
 8002918:	bf00      	nop
 800291a:	370c      	adds	r7, #12
 800291c:	46bd      	mov	sp, r7
 800291e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002922:	4770      	bx	lr

08002924 <_ZN8touchgfx15UIEventListener18handleGestureEventERKNS_12GestureEventE>:
    /**
     * This handler is invoked when a gesture event has been detected by the system.
     *
     * @param  event The event data.
     */
    virtual void handleGestureEvent(const GestureEvent& event)
 8002924:	b480      	push	{r7}
 8002926:	b083      	sub	sp, #12
 8002928:	af00      	add	r7, sp, #0
 800292a:	6078      	str	r0, [r7, #4]
 800292c:	6039      	str	r1, [r7, #0]
    {
    }
 800292e:	bf00      	nop
 8002930:	370c      	adds	r7, #12
 8002932:	46bd      	mov	sp, r7
 8002934:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002938:	4770      	bx	lr

0800293a <_ZN8touchgfx15UIEventListener14handleKeyEventEh>:
    /**
     * This handler is invoked when a key (or button) event has been detected by the system.
     *
     * @param  c The key or button pressed.
     */
    virtual void handleKeyEvent(uint8_t c)
 800293a:	b480      	push	{r7}
 800293c:	b083      	sub	sp, #12
 800293e:	af00      	add	r7, sp, #0
 8002940:	6078      	str	r0, [r7, #4]
 8002942:	460b      	mov	r3, r1
 8002944:	70fb      	strb	r3, [r7, #3]
    {
    }
 8002946:	bf00      	nop
 8002948:	370c      	adds	r7, #12
 800294a:	46bd      	mov	sp, r7
 800294c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002950:	4770      	bx	lr

08002952 <_ZN8touchgfx15UIEventListener15handleTickEventEv>:

    /**
     * This handler is invoked when a system tick event has been generated. The system tick
     * period is configured in the HAL.
     */
    virtual void handleTickEvent()
 8002952:	b480      	push	{r7}
 8002954:	b083      	sub	sp, #12
 8002956:	af00      	add	r7, sp, #0
 8002958:	6078      	str	r0, [r7, #4]
    {
    }
 800295a:	bf00      	nop
 800295c:	370c      	adds	r7, #12
 800295e:	46bd      	mov	sp, r7
 8002960:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002964:	4770      	bx	lr

08002966 <_ZN8touchgfx15UIEventListener29handlePendingScreenTransitionEv>:

    /** This handler is invoked when a change screen event is pending. */
    virtual void handlePendingScreenTransition()
 8002966:	b480      	push	{r7}
 8002968:	b083      	sub	sp, #12
 800296a:	af00      	add	r7, sp, #0
 800296c:	6078      	str	r0, [r7, #4]
    {
    }
 800296e:	bf00      	nop
 8002970:	370c      	adds	r7, #12
 8002972:	46bd      	mov	sp, r7
 8002974:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002978:	4770      	bx	lr
	...

0800297c <_ZN8touchgfx15UIEventListenerD1Ev>:

    /** Finalizes an instance of the UIEventListener class. */
    virtual ~UIEventListener()
 800297c:	b480      	push	{r7}
 800297e:	b083      	sub	sp, #12
 8002980:	af00      	add	r7, sp, #0
 8002982:	6078      	str	r0, [r7, #4]
    {
 8002984:	4a04      	ldr	r2, [pc, #16]	@ (8002998 <_ZN8touchgfx15UIEventListenerD1Ev+0x1c>)
 8002986:	687b      	ldr	r3, [r7, #4]
 8002988:	601a      	str	r2, [r3, #0]
    }
 800298a:	687b      	ldr	r3, [r7, #4]
 800298c:	4618      	mov	r0, r3
 800298e:	370c      	adds	r7, #12
 8002990:	46bd      	mov	sp, r7
 8002992:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002996:	4770      	bx	lr
 8002998:	0802cdd4 	.word	0x0802cdd4

0800299c <_ZN8touchgfx15UIEventListenerD0Ev>:
    virtual ~UIEventListener()
 800299c:	b580      	push	{r7, lr}
 800299e:	b082      	sub	sp, #8
 80029a0:	af00      	add	r7, sp, #0
 80029a2:	6078      	str	r0, [r7, #4]
    }
 80029a4:	6878      	ldr	r0, [r7, #4]
 80029a6:	f7ff ffe9 	bl	800297c <_ZN8touchgfx15UIEventListenerD1Ev>
 80029aa:	2104      	movs	r1, #4
 80029ac:	6878      	ldr	r0, [r7, #4]
 80029ae:	f028 f91a 	bl	802abe6 <_ZdlPvj>
 80029b2:	687b      	ldr	r3, [r7, #4]
 80029b4:	4618      	mov	r0, r3
 80029b6:	3708      	adds	r7, #8
 80029b8:	46bd      	mov	sp, r7
 80029ba:	bd80      	pop	{r7, pc}

080029bc <_ZN8touchgfx3LCDD1Ev>:
        : textureMapperClass(0)
    {
    }

    /** Finalizes an instance of the LCD class. */
    virtual ~LCD()
 80029bc:	b480      	push	{r7}
 80029be:	b083      	sub	sp, #12
 80029c0:	af00      	add	r7, sp, #0
 80029c2:	6078      	str	r0, [r7, #4]
    {
 80029c4:	4a04      	ldr	r2, [pc, #16]	@ (80029d8 <_ZN8touchgfx3LCDD1Ev+0x1c>)
 80029c6:	687b      	ldr	r3, [r7, #4]
 80029c8:	601a      	str	r2, [r3, #0]
    }
 80029ca:	687b      	ldr	r3, [r7, #4]
 80029cc:	4618      	mov	r0, r3
 80029ce:	370c      	adds	r7, #12
 80029d0:	46bd      	mov	sp, r7
 80029d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029d6:	4770      	bx	lr
 80029d8:	0802ef20 	.word	0x0802ef20

080029dc <_ZN8touchgfx3LCDD0Ev>:
    virtual ~LCD()
 80029dc:	b580      	push	{r7, lr}
 80029de:	b082      	sub	sp, #8
 80029e0:	af00      	add	r7, sp, #0
 80029e2:	6078      	str	r0, [r7, #4]
    }
 80029e4:	6878      	ldr	r0, [r7, #4]
 80029e6:	f7ff ffe9 	bl	80029bc <_ZN8touchgfx3LCDD1Ev>
 80029ea:	2108      	movs	r1, #8
 80029ec:	6878      	ldr	r0, [r7, #4]
 80029ee:	f028 f8fa 	bl	802abe6 <_ZdlPvj>
 80029f2:	687b      	ldr	r3, [r7, #4]
 80029f4:	4618      	mov	r0, r3
 80029f6:	3708      	adds	r7, #8
 80029f8:	46bd      	mov	sp, r7
 80029fa:	bd80      	pop	{r7, pc}

080029fc <_ZN8touchgfx11Application15appSwitchScreenEh>:
     * means to switch screen from places that does not have access to a pointer to the new
     * screen. Base implementation is empty.
     *
     * @param screenId An id that maps to the desired screen.
     */
    virtual void appSwitchScreen(uint8_t screenId)
 80029fc:	b480      	push	{r7}
 80029fe:	b083      	sub	sp, #12
 8002a00:	af00      	add	r7, sp, #0
 8002a02:	6078      	str	r0, [r7, #4]
 8002a04:	460b      	mov	r3, r1
 8002a06:	70fb      	strb	r3, [r7, #3]
    {
    }
 8002a08:	bf00      	nop
 8002a0a:	370c      	adds	r7, #12
 8002a0c:	46bd      	mov	sp, r7
 8002a0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a12:	4770      	bx	lr

08002a14 <_ZN8touchgfx11Application13requestRedrawERNS_4RectE>:
    /**
     * An application specific function for requesting redraw of given Rect.
     *
     * @param [in,out] rect The Rect that must be redrawn.
     */
    virtual void requestRedraw(Rect& rect)
 8002a14:	b480      	push	{r7}
 8002a16:	b083      	sub	sp, #12
 8002a18:	af00      	add	r7, sp, #0
 8002a1a:	6078      	str	r0, [r7, #4]
 8002a1c:	6039      	str	r1, [r7, #0]
    {
        redraw = rect;
 8002a1e:	687b      	ldr	r3, [r7, #4]
 8002a20:	683a      	ldr	r2, [r7, #0]
 8002a22:	f503 7396 	add.w	r3, r3, #300	@ 0x12c
 8002a26:	6810      	ldr	r0, [r2, #0]
 8002a28:	6851      	ldr	r1, [r2, #4]
 8002a2a:	c303      	stmia	r3!, {r0, r1}
    }
 8002a2c:	bf00      	nop
 8002a2e:	370c      	adds	r7, #12
 8002a30:	46bd      	mov	sp, r7
 8002a32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a36:	4770      	bx	lr

08002a38 <_ZN8touchgfx15GenericCallbackIvvvED1Ev>:
template <>
class GenericCallback<void>
{
public:
    /** Finalizes an instance of the GenericCallback<void> class. */
    virtual ~GenericCallback()
 8002a38:	b480      	push	{r7}
 8002a3a:	b083      	sub	sp, #12
 8002a3c:	af00      	add	r7, sp, #0
 8002a3e:	6078      	str	r0, [r7, #4]
    {
 8002a40:	4a04      	ldr	r2, [pc, #16]	@ (8002a54 <_ZN8touchgfx15GenericCallbackIvvvED1Ev+0x1c>)
 8002a42:	687b      	ldr	r3, [r7, #4]
 8002a44:	601a      	str	r2, [r3, #0]
    }
 8002a46:	687b      	ldr	r3, [r7, #4]
 8002a48:	4618      	mov	r0, r3
 8002a4a:	370c      	adds	r7, #12
 8002a4c:	46bd      	mov	sp, r7
 8002a4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a52:	4770      	bx	lr
 8002a54:	0802cdbc 	.word	0x0802cdbc

08002a58 <_ZN8touchgfx15GenericCallbackIvvvED0Ev>:
    virtual ~GenericCallback()
 8002a58:	b580      	push	{r7, lr}
 8002a5a:	b082      	sub	sp, #8
 8002a5c:	af00      	add	r7, sp, #0
 8002a5e:	6078      	str	r0, [r7, #4]
    }
 8002a60:	6878      	ldr	r0, [r7, #4]
 8002a62:	f7ff ffe9 	bl	8002a38 <_ZN8touchgfx15GenericCallbackIvvvED1Ev>
 8002a66:	2104      	movs	r1, #4
 8002a68:	6878      	ldr	r0, [r7, #4]
 8002a6a:	f028 f8bc 	bl	802abe6 <_ZdlPvj>
 8002a6e:	687b      	ldr	r3, [r7, #4]
 8002a70:	4618      	mov	r0, r3
 8002a72:	3708      	adds	r7, #8
 8002a74:	46bd      	mov	sp, r7
 8002a76:	bd80      	pop	{r7, pc}

08002a78 <_ZN8touchgfx8Gestures9DragStateC1Ev>:
    static const uint8_t MIN_VELOCITY_AT_RELEASE_BEFORE_SWIPE = 3;

    /** Defines the state of a drag. */
    struct DragState
    {
        DragState()
 8002a78:	b480      	push	{r7}
 8002a7a:	b083      	sub	sp, #12
 8002a7c:	af00      	add	r7, sp, #0
 8002a7e:	6078      	str	r0, [r7, #4]
            : startX(0),
 8002a80:	687b      	ldr	r3, [r7, #4]
 8002a82:	2200      	movs	r2, #0
 8002a84:	801a      	strh	r2, [r3, #0]
              startY(0),
 8002a86:	687b      	ldr	r3, [r7, #4]
 8002a88:	2200      	movs	r2, #0
 8002a8a:	805a      	strh	r2, [r3, #2]
              downX(0),
 8002a8c:	687b      	ldr	r3, [r7, #4]
 8002a8e:	2200      	movs	r2, #0
 8002a90:	809a      	strh	r2, [r3, #4]
              downY(0),
 8002a92:	687b      	ldr	r3, [r7, #4]
 8002a94:	2200      	movs	r2, #0
 8002a96:	80da      	strh	r2, [r3, #6]
              tickCount(0),
 8002a98:	687b      	ldr	r3, [r7, #4]
 8002a9a:	2200      	movs	r2, #0
 8002a9c:	811a      	strh	r2, [r3, #8]
              velocityX(0),
 8002a9e:	687b      	ldr	r3, [r7, #4]
 8002aa0:	2200      	movs	r2, #0
 8002aa2:	815a      	strh	r2, [r3, #10]
              velocityY(0),
 8002aa4:	687b      	ldr	r3, [r7, #4]
 8002aa6:	2200      	movs	r2, #0
 8002aa8:	819a      	strh	r2, [r3, #12]
              inProgress(false)
 8002aaa:	687b      	ldr	r3, [r7, #4]
 8002aac:	2200      	movs	r2, #0
 8002aae:	739a      	strb	r2, [r3, #14]
        {
        }
 8002ab0:	687b      	ldr	r3, [r7, #4]
 8002ab2:	4618      	mov	r0, r3
 8002ab4:	370c      	adds	r7, #12
 8002ab6:	46bd      	mov	sp, r7
 8002ab8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002abc:	4770      	bx	lr

08002abe <_ZN8touchgfx8GesturesC1Ev>:
        bool inProgress;    ///< Whether a drag is in progress or not
    };

public:
    /** Default constructor. Does nothing. */
    Gestures()
 8002abe:	b580      	push	{r7, lr}
 8002ac0:	b082      	sub	sp, #8
 8002ac2:	af00      	add	r7, sp, #0
 8002ac4:	6078      	str	r0, [r7, #4]
        : drag(), listener(0), dragThresholdValue(0)
 8002ac6:	687b      	ldr	r3, [r7, #4]
 8002ac8:	4618      	mov	r0, r3
 8002aca:	f7ff ffd5 	bl	8002a78 <_ZN8touchgfx8Gestures9DragStateC1Ev>
 8002ace:	687b      	ldr	r3, [r7, #4]
 8002ad0:	2200      	movs	r2, #0
 8002ad2:	611a      	str	r2, [r3, #16]
 8002ad4:	687b      	ldr	r3, [r7, #4]
 8002ad6:	2200      	movs	r2, #0
 8002ad8:	829a      	strh	r2, [r3, #20]
    {
    }
 8002ada:	687b      	ldr	r3, [r7, #4]
 8002adc:	4618      	mov	r0, r3
 8002ade:	3708      	adds	r7, #8
 8002ae0:	46bd      	mov	sp, r7
 8002ae2:	bd80      	pop	{r7, pc}

08002ae4 <_ZN8touchgfx3HALC1ERNS_13DMA_InterfaceERNS_3LCDERNS_15TouchControllerEtt>:
    HAL(DMA_Interface& dmaInterface, LCD& display, TouchController& touchCtrl, uint16_t width, uint16_t height)
 8002ae4:	b580      	push	{r7, lr}
 8002ae6:	b084      	sub	sp, #16
 8002ae8:	af00      	add	r7, sp, #0
 8002aea:	60f8      	str	r0, [r7, #12]
 8002aec:	60b9      	str	r1, [r7, #8]
 8002aee:	607a      	str	r2, [r7, #4]
 8002af0:	603b      	str	r3, [r7, #0]
          lastRenderMethod(HARDWARE)
 8002af2:	4a55      	ldr	r2, [pc, #340]	@ (8002c48 <_ZN8touchgfx3HALC1ERNS_13DMA_InterfaceERNS_3LCDERNS_15TouchControllerEtt+0x164>)
 8002af4:	68fb      	ldr	r3, [r7, #12]
 8002af6:	601a      	str	r2, [r3, #0]
        : dma(dmaInterface),
 8002af8:	68fb      	ldr	r3, [r7, #12]
 8002afa:	68ba      	ldr	r2, [r7, #8]
 8002afc:	605a      	str	r2, [r3, #4]
          lcdRef(display),
 8002afe:	68fb      	ldr	r3, [r7, #12]
 8002b00:	687a      	ldr	r2, [r7, #4]
 8002b02:	609a      	str	r2, [r3, #8]
          touchController(touchCtrl),
 8002b04:	68fb      	ldr	r3, [r7, #12]
 8002b06:	683a      	ldr	r2, [r7, #0]
 8002b08:	60da      	str	r2, [r3, #12]
          mcuInstrumentation(0),
 8002b0a:	68fb      	ldr	r3, [r7, #12]
 8002b0c:	2200      	movs	r2, #0
 8002b0e:	611a      	str	r2, [r3, #16]
          buttonController(0),
 8002b10:	68fb      	ldr	r3, [r7, #12]
 8002b12:	2200      	movs	r2, #0
 8002b14:	615a      	str	r2, [r3, #20]
          frameBufferAllocator(0),
 8002b16:	68fb      	ldr	r3, [r7, #12]
 8002b18:	2200      	movs	r2, #0
 8002b1a:	619a      	str	r2, [r3, #24]
          gestures(),
 8002b1c:	68fb      	ldr	r3, [r7, #12]
 8002b1e:	331c      	adds	r3, #28
 8002b20:	4618      	mov	r0, r3
 8002b22:	f7ff ffcc 	bl	8002abe <_ZN8touchgfx8GesturesC1Ev>
          nativeDisplayOrientation(ORIENTATION_LANDSCAPE),
 8002b26:	68fb      	ldr	r3, [r7, #12]
 8002b28:	2200      	movs	r2, #0
 8002b2a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
          taskDelayFunc(0),
 8002b2e:	68fb      	ldr	r3, [r7, #12]
 8002b30:	2200      	movs	r2, #0
 8002b32:	639a      	str	r2, [r3, #56]	@ 0x38
          frameBuffer0(0),
 8002b34:	68fb      	ldr	r3, [r7, #12]
 8002b36:	2200      	movs	r2, #0
 8002b38:	63da      	str	r2, [r3, #60]	@ 0x3c
          frameBuffer1(0),
 8002b3a:	68fb      	ldr	r3, [r7, #12]
 8002b3c:	2200      	movs	r2, #0
 8002b3e:	641a      	str	r2, [r3, #64]	@ 0x40
          frameBuffer2(0),
 8002b40:	68fb      	ldr	r3, [r7, #12]
 8002b42:	2200      	movs	r2, #0
 8002b44:	645a      	str	r2, [r3, #68]	@ 0x44
          refreshStrategy(REFRESH_STRATEGY_DEFAULT),
 8002b46:	68fb      	ldr	r3, [r7, #12]
 8002b48:	2200      	movs	r2, #0
 8002b4a:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48
          fingerSize(1),
 8002b4e:	68fb      	ldr	r3, [r7, #12]
 8002b50:	2201      	movs	r2, #1
 8002b52:	f883 2049 	strb.w	r2, [r3, #73]	@ 0x49
          lockDMAToPorch(false),
 8002b56:	68fb      	ldr	r3, [r7, #12]
 8002b58:	2200      	movs	r2, #0
 8002b5a:	f883 204a 	strb.w	r2, [r3, #74]	@ 0x4a
          frameBufferUpdatedThisFrame(false),
 8002b5e:	68fb      	ldr	r3, [r7, #12]
 8002b60:	2200      	movs	r2, #0
 8002b62:	f883 204b 	strb.w	r2, [r3, #75]	@ 0x4b
          auxiliaryLCD(0),
 8002b66:	68fb      	ldr	r3, [r7, #12]
 8002b68:	2200      	movs	r2, #0
 8002b6a:	64da      	str	r2, [r3, #76]	@ 0x4c
          partialFrameBufferRect(),
 8002b6c:	68fb      	ldr	r3, [r7, #12]
 8002b6e:	3350      	adds	r3, #80	@ 0x50
 8002b70:	4618      	mov	r0, r3
 8002b72:	f7ff fe39 	bl	80027e8 <_ZN8touchgfx4RectC1Ev>
          listener(0),
 8002b76:	68fb      	ldr	r3, [r7, #12]
 8002b78:	2200      	movs	r2, #0
 8002b7a:	659a      	str	r2, [r3, #88]	@ 0x58
          lastX(0),
 8002b7c:	68fb      	ldr	r3, [r7, #12]
 8002b7e:	2200      	movs	r2, #0
 8002b80:	65da      	str	r2, [r3, #92]	@ 0x5c
          lastY(0),
 8002b82:	68fb      	ldr	r3, [r7, #12]
 8002b84:	2200      	movs	r2, #0
 8002b86:	661a      	str	r2, [r3, #96]	@ 0x60
          touchSampleRate(1),
 8002b88:	68fb      	ldr	r3, [r7, #12]
 8002b8a:	2201      	movs	r2, #1
 8002b8c:	f883 2064 	strb.w	r2, [r3, #100]	@ 0x64
          mcuLoadPct(0),
 8002b90:	68fb      	ldr	r3, [r7, #12]
 8002b92:	2200      	movs	r2, #0
 8002b94:	f883 2065 	strb.w	r2, [r3, #101]	@ 0x65
          vSyncCnt(0),
 8002b98:	68fb      	ldr	r3, [r7, #12]
 8002b9a:	2200      	movs	r2, #0
 8002b9c:	f883 2066 	strb.w	r2, [r3, #102]	@ 0x66
          vSyncForFrame(1),
 8002ba0:	68fb      	ldr	r3, [r7, #12]
 8002ba2:	2201      	movs	r2, #1
 8002ba4:	f883 2067 	strb.w	r2, [r3, #103]	@ 0x67
          vSyncCompensationEnabled(false),
 8002ba8:	68fb      	ldr	r3, [r7, #12]
 8002baa:	2200      	movs	r2, #0
 8002bac:	f883 2068 	strb.w	r2, [r3, #104]	@ 0x68
          clientDirty(false),
 8002bb0:	68fb      	ldr	r3, [r7, #12]
 8002bb2:	2200      	movs	r2, #0
 8002bb4:	f883 2069 	strb.w	r2, [r3, #105]	@ 0x69
          swapRequested(false),
 8002bb8:	68fb      	ldr	r3, [r7, #12]
 8002bba:	2200      	movs	r2, #0
 8002bbc:	f883 206a 	strb.w	r2, [r3, #106]	@ 0x6a
          lastTouched(false),
 8002bc0:	68fb      	ldr	r3, [r7, #12]
 8002bc2:	2200      	movs	r2, #0
 8002bc4:	f883 206b 	strb.w	r2, [r3, #107]	@ 0x6b
          updateMCULoad(0),
 8002bc8:	68fb      	ldr	r3, [r7, #12]
 8002bca:	2200      	movs	r2, #0
 8002bcc:	f883 206c 	strb.w	r2, [r3, #108]	@ 0x6c
          cc_begin(0),
 8002bd0:	68fb      	ldr	r3, [r7, #12]
 8002bd2:	2200      	movs	r2, #0
 8002bd4:	671a      	str	r2, [r3, #112]	@ 0x70
          requestedOrientation(ORIENTATION_LANDSCAPE),
 8002bd6:	68fb      	ldr	r3, [r7, #12]
 8002bd8:	2200      	movs	r2, #0
 8002bda:	f883 2074 	strb.w	r2, [r3, #116]	@ 0x74
          displayOrientationChangeRequested(false),
 8002bde:	68fb      	ldr	r3, [r7, #12]
 8002be0:	2200      	movs	r2, #0
 8002be2:	f883 2075 	strb.w	r2, [r3, #117]	@ 0x75
          useAuxiliaryLCD(false),
 8002be6:	68fb      	ldr	r3, [r7, #12]
 8002be8:	2200      	movs	r2, #0
 8002bea:	f883 2076 	strb.w	r2, [r3, #118]	@ 0x76
          useDMAAcceleration(true),
 8002bee:	68fb      	ldr	r3, [r7, #12]
 8002bf0:	2201      	movs	r2, #1
 8002bf2:	f883 2077 	strb.w	r2, [r3, #119]	@ 0x77
          lastRenderMethod(HARDWARE)
 8002bf6:	68fb      	ldr	r3, [r7, #12]
 8002bf8:	2201      	movs	r2, #1
 8002bfa:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78
        instance = this;
 8002bfe:	4a13      	ldr	r2, [pc, #76]	@ (8002c4c <_ZN8touchgfx3HALC1ERNS_13DMA_InterfaceERNS_3LCDERNS_15TouchControllerEtt+0x168>)
 8002c00:	68fb      	ldr	r3, [r7, #12]
 8002c02:	6013      	str	r3, [r2, #0]
        FRAME_BUFFER_WIDTH = DISPLAY_WIDTH = width;
 8002c04:	4a12      	ldr	r2, [pc, #72]	@ (8002c50 <_ZN8touchgfx3HALC1ERNS_13DMA_InterfaceERNS_3LCDERNS_15TouchControllerEtt+0x16c>)
 8002c06:	8b3b      	ldrh	r3, [r7, #24]
 8002c08:	8013      	strh	r3, [r2, #0]
 8002c0a:	4b11      	ldr	r3, [pc, #68]	@ (8002c50 <_ZN8touchgfx3HALC1ERNS_13DMA_InterfaceERNS_3LCDERNS_15TouchControllerEtt+0x16c>)
 8002c0c:	881a      	ldrh	r2, [r3, #0]
 8002c0e:	4b11      	ldr	r3, [pc, #68]	@ (8002c54 <_ZN8touchgfx3HALC1ERNS_13DMA_InterfaceERNS_3LCDERNS_15TouchControllerEtt+0x170>)
 8002c10:	801a      	strh	r2, [r3, #0]
        FRAME_BUFFER_HEIGHT = DISPLAY_HEIGHT = height;
 8002c12:	4a11      	ldr	r2, [pc, #68]	@ (8002c58 <_ZN8touchgfx3HALC1ERNS_13DMA_InterfaceERNS_3LCDERNS_15TouchControllerEtt+0x174>)
 8002c14:	8bbb      	ldrh	r3, [r7, #28]
 8002c16:	8013      	strh	r3, [r2, #0]
 8002c18:	4b0f      	ldr	r3, [pc, #60]	@ (8002c58 <_ZN8touchgfx3HALC1ERNS_13DMA_InterfaceERNS_3LCDERNS_15TouchControllerEtt+0x174>)
 8002c1a:	881a      	ldrh	r2, [r3, #0]
 8002c1c:	4b0f      	ldr	r3, [pc, #60]	@ (8002c5c <_ZN8touchgfx3HALC1ERNS_13DMA_InterfaceERNS_3LCDERNS_15TouchControllerEtt+0x178>)
 8002c1e:	801a      	strh	r2, [r3, #0]
        DISPLAY_ROTATION = rotate0;
 8002c20:	4b0f      	ldr	r3, [pc, #60]	@ (8002c60 <_ZN8touchgfx3HALC1ERNS_13DMA_InterfaceERNS_3LCDERNS_15TouchControllerEtt+0x17c>)
 8002c22:	2200      	movs	r2, #0
 8002c24:	701a      	strb	r2, [r3, #0]
        nativeDisplayOrientation = ((width >= height) ? ORIENTATION_LANDSCAPE : ORIENTATION_PORTRAIT);
 8002c26:	8b3a      	ldrh	r2, [r7, #24]
 8002c28:	8bbb      	ldrh	r3, [r7, #28]
 8002c2a:	429a      	cmp	r2, r3
 8002c2c:	bf34      	ite	cc
 8002c2e:	2301      	movcc	r3, #1
 8002c30:	2300      	movcs	r3, #0
 8002c32:	b2db      	uxtb	r3, r3
 8002c34:	461a      	mov	r2, r3
 8002c36:	68fb      	ldr	r3, [r7, #12]
 8002c38:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    }
 8002c3c:	68fb      	ldr	r3, [r7, #12]
 8002c3e:	4618      	mov	r0, r3
 8002c40:	3710      	adds	r7, #16
 8002c42:	46bd      	mov	sp, r7
 8002c44:	bd80      	pop	{r7, pc}
 8002c46:	bf00      	nop
 8002c48:	0802e380 	.word	0x0802e380
 8002c4c:	2400b884 	.word	0x2400b884
 8002c50:	2400b878 	.word	0x2400b878
 8002c54:	2400b87e 	.word	0x2400b87e
 8002c58:	2400b87a 	.word	0x2400b87a
 8002c5c:	2400b880 	.word	0x2400b880
 8002c60:	2400b87c 	.word	0x2400b87c

08002c64 <_ZN8touchgfx11ApplicationD1Ev>:
class Application : public UIEventListener
 8002c64:	b580      	push	{r7, lr}
 8002c66:	b082      	sub	sp, #8
 8002c68:	af00      	add	r7, sp, #0
 8002c6a:	6078      	str	r0, [r7, #4]
 8002c6c:	4a05      	ldr	r2, [pc, #20]	@ (8002c84 <_ZN8touchgfx11ApplicationD1Ev+0x20>)
 8002c6e:	687b      	ldr	r3, [r7, #4]
 8002c70:	601a      	str	r2, [r3, #0]
 8002c72:	687b      	ldr	r3, [r7, #4]
 8002c74:	4618      	mov	r0, r3
 8002c76:	f7ff fe81 	bl	800297c <_ZN8touchgfx15UIEventListenerD1Ev>
 8002c7a:	687b      	ldr	r3, [r7, #4]
 8002c7c:	4618      	mov	r0, r3
 8002c7e:	3708      	adds	r7, #8
 8002c80:	46bd      	mov	sp, r7
 8002c82:	bd80      	pop	{r7, pc}
 8002c84:	0802f034 	.word	0x0802f034

08002c88 <_ZN8touchgfx11ApplicationD0Ev>:
 8002c88:	b580      	push	{r7, lr}
 8002c8a:	b082      	sub	sp, #8
 8002c8c:	af00      	add	r7, sp, #0
 8002c8e:	6078      	str	r0, [r7, #4]
 8002c90:	6878      	ldr	r0, [r7, #4]
 8002c92:	f7ff ffe7 	bl	8002c64 <_ZN8touchgfx11ApplicationD1Ev>
 8002c96:	f44f 719c 	mov.w	r1, #312	@ 0x138
 8002c9a:	6878      	ldr	r0, [r7, #4]
 8002c9c:	f027 ffa3 	bl	802abe6 <_ZdlPvj>
 8002ca0:	687b      	ldr	r3, [r7, #4]
 8002ca2:	4618      	mov	r0, r3
 8002ca4:	3708      	adds	r7, #8
 8002ca6:	46bd      	mov	sp, r7
 8002ca8:	bd80      	pop	{r7, pc}

08002caa <_ZN8touchgfx14MVPApplication29handlePendingScreenTransitionEv>:
    /**
     * Handles the pending screen transition.
     *
     * Delegates the work to evaluatePendingScreenTransition()
     */
    virtual void handlePendingScreenTransition()
 8002caa:	b580      	push	{r7, lr}
 8002cac:	b082      	sub	sp, #8
 8002cae:	af00      	add	r7, sp, #0
 8002cb0:	6078      	str	r0, [r7, #4]
    {
        evaluatePendingScreenTransition();
 8002cb2:	6878      	ldr	r0, [r7, #4]
 8002cb4:	f000 f804 	bl	8002cc0 <_ZN8touchgfx14MVPApplication31evaluatePendingScreenTransitionEv>
    }
 8002cb8:	bf00      	nop
 8002cba:	3708      	adds	r7, #8
 8002cbc:	46bd      	mov	sp, r7
 8002cbe:	bd80      	pop	{r7, pc}

08002cc0 <_ZN8touchgfx14MVPApplication31evaluatePendingScreenTransitionEv>:

    /**
     * Evaluates the pending Callback instances. If a callback is valid, it is executed and
     * a Screen transition is executed.
     */
    void evaluatePendingScreenTransition()
 8002cc0:	b580      	push	{r7, lr}
 8002cc2:	b082      	sub	sp, #8
 8002cc4:	af00      	add	r7, sp, #0
 8002cc6:	6078      	str	r0, [r7, #4]
    {
        if (pendingScreenTransitionCallback && pendingScreenTransitionCallback->isValid())
 8002cc8:	687b      	ldr	r3, [r7, #4]
 8002cca:	f8d3 313c 	ldr.w	r3, [r3, #316]	@ 0x13c
 8002cce:	2b00      	cmp	r3, #0
 8002cd0:	d00f      	beq.n	8002cf2 <_ZN8touchgfx14MVPApplication31evaluatePendingScreenTransitionEv+0x32>
 8002cd2:	687b      	ldr	r3, [r7, #4]
 8002cd4:	f8d3 213c 	ldr.w	r2, [r3, #316]	@ 0x13c
 8002cd8:	687b      	ldr	r3, [r7, #4]
 8002cda:	f8d3 313c 	ldr.w	r3, [r3, #316]	@ 0x13c
 8002cde:	681b      	ldr	r3, [r3, #0]
 8002ce0:	330c      	adds	r3, #12
 8002ce2:	681b      	ldr	r3, [r3, #0]
 8002ce4:	4610      	mov	r0, r2
 8002ce6:	4798      	blx	r3
 8002ce8:	4603      	mov	r3, r0
 8002cea:	2b00      	cmp	r3, #0
 8002cec:	d001      	beq.n	8002cf2 <_ZN8touchgfx14MVPApplication31evaluatePendingScreenTransitionEv+0x32>
 8002cee:	2301      	movs	r3, #1
 8002cf0:	e000      	b.n	8002cf4 <_ZN8touchgfx14MVPApplication31evaluatePendingScreenTransitionEv+0x34>
 8002cf2:	2300      	movs	r3, #0
 8002cf4:	2b00      	cmp	r3, #0
 8002cf6:	d00e      	beq.n	8002d16 <_ZN8touchgfx14MVPApplication31evaluatePendingScreenTransitionEv+0x56>
        {
            pendingScreenTransitionCallback->execute();
 8002cf8:	687b      	ldr	r3, [r7, #4]
 8002cfa:	f8d3 213c 	ldr.w	r2, [r3, #316]	@ 0x13c
 8002cfe:	687b      	ldr	r3, [r7, #4]
 8002d00:	f8d3 313c 	ldr.w	r3, [r3, #316]	@ 0x13c
 8002d04:	681b      	ldr	r3, [r3, #0]
 8002d06:	3308      	adds	r3, #8
 8002d08:	681b      	ldr	r3, [r3, #0]
 8002d0a:	4610      	mov	r0, r2
 8002d0c:	4798      	blx	r3
            pendingScreenTransitionCallback = 0;
 8002d0e:	687b      	ldr	r3, [r7, #4]
 8002d10:	2200      	movs	r2, #0
 8002d12:	f8c3 213c 	str.w	r2, [r3, #316]	@ 0x13c
        }
    }
 8002d16:	bf00      	nop
 8002d18:	3708      	adds	r7, #8
 8002d1a:	46bd      	mov	sp, r7
 8002d1c:	bd80      	pop	{r7, pc}
	...

08002d20 <_ZN8touchgfx14MVPApplicationD1Ev>:
class MVPApplication : public Application
 8002d20:	b580      	push	{r7, lr}
 8002d22:	b082      	sub	sp, #8
 8002d24:	af00      	add	r7, sp, #0
 8002d26:	6078      	str	r0, [r7, #4]
 8002d28:	4a05      	ldr	r2, [pc, #20]	@ (8002d40 <_ZN8touchgfx14MVPApplicationD1Ev+0x20>)
 8002d2a:	687b      	ldr	r3, [r7, #4]
 8002d2c:	601a      	str	r2, [r3, #0]
 8002d2e:	687b      	ldr	r3, [r7, #4]
 8002d30:	4618      	mov	r0, r3
 8002d32:	f7ff ff97 	bl	8002c64 <_ZN8touchgfx11ApplicationD1Ev>
 8002d36:	687b      	ldr	r3, [r7, #4]
 8002d38:	4618      	mov	r0, r3
 8002d3a:	3708      	adds	r7, #8
 8002d3c:	46bd      	mov	sp, r7
 8002d3e:	bd80      	pop	{r7, pc}
 8002d40:	0802cd78 	.word	0x0802cd78

08002d44 <_ZN8touchgfx14MVPApplicationD0Ev>:
 8002d44:	b580      	push	{r7, lr}
 8002d46:	b082      	sub	sp, #8
 8002d48:	af00      	add	r7, sp, #0
 8002d4a:	6078      	str	r0, [r7, #4]
 8002d4c:	6878      	ldr	r0, [r7, #4]
 8002d4e:	f7ff ffe7 	bl	8002d20 <_ZN8touchgfx14MVPApplicationD1Ev>
 8002d52:	f44f 71a0 	mov.w	r1, #320	@ 0x140
 8002d56:	6878      	ldr	r0, [r7, #4]
 8002d58:	f027 ff45 	bl	802abe6 <_ZdlPvj>
 8002d5c:	687b      	ldr	r3, [r7, #4]
 8002d5e:	4618      	mov	r0, r3
 8002d60:	3708      	adds	r7, #8
 8002d62:	46bd      	mov	sp, r7
 8002d64:	bd80      	pop	{r7, pc}
	...

08002d68 <_ZN23FrontendApplicationBaseD1Ev>:

class FrontendApplicationBase : public touchgfx::MVPApplication
{
public:
    FrontendApplicationBase(Model& m, FrontendHeap& heap);
    virtual ~FrontendApplicationBase() { }
 8002d68:	b580      	push	{r7, lr}
 8002d6a:	b082      	sub	sp, #8
 8002d6c:	af00      	add	r7, sp, #0
 8002d6e:	6078      	str	r0, [r7, #4]
 8002d70:	4a08      	ldr	r2, [pc, #32]	@ (8002d94 <_ZN23FrontendApplicationBaseD1Ev+0x2c>)
 8002d72:	687b      	ldr	r3, [r7, #4]
 8002d74:	601a      	str	r2, [r3, #0]
 8002d76:	687b      	ldr	r3, [r7, #4]
 8002d78:	f503 73a0 	add.w	r3, r3, #320	@ 0x140
 8002d7c:	4618      	mov	r0, r3
 8002d7e:	f000 fb09 	bl	8003394 <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvED1Ev>
 8002d82:	687b      	ldr	r3, [r7, #4]
 8002d84:	4618      	mov	r0, r3
 8002d86:	f7ff ffcb 	bl	8002d20 <_ZN8touchgfx14MVPApplicationD1Ev>
 8002d8a:	687b      	ldr	r3, [r7, #4]
 8002d8c:	4618      	mov	r0, r3
 8002d8e:	3708      	adds	r7, #8
 8002d90:	46bd      	mov	sp, r7
 8002d92:	bd80      	pop	{r7, pc}
 8002d94:	0802cd1c 	.word	0x0802cd1c

08002d98 <_ZN23FrontendApplicationBaseD0Ev>:
 8002d98:	b580      	push	{r7, lr}
 8002d9a:	b082      	sub	sp, #8
 8002d9c:	af00      	add	r7, sp, #0
 8002d9e:	6078      	str	r0, [r7, #4]
 8002da0:	6878      	ldr	r0, [r7, #4]
 8002da2:	f7ff ffe1 	bl	8002d68 <_ZN23FrontendApplicationBaseD1Ev>
 8002da6:	f44f 71ac 	mov.w	r1, #344	@ 0x158
 8002daa:	6878      	ldr	r0, [r7, #4]
 8002dac:	f027 ff1b 	bl	802abe6 <_ZdlPvj>
 8002db0:	687b      	ldr	r3, [r7, #4]
 8002db2:	4618      	mov	r0, r3
 8002db4:	3708      	adds	r7, #8
 8002db6:	46bd      	mov	sp, r7
 8002db8:	bd80      	pop	{r7, pc}
	...

08002dbc <_ZN19FrontendApplicationD1Ev>:

class FrontendApplication : public FrontendApplicationBase
{
public:
    FrontendApplication(Model& m, FrontendHeap& heap);
    virtual ~FrontendApplication() { }
 8002dbc:	b580      	push	{r7, lr}
 8002dbe:	b082      	sub	sp, #8
 8002dc0:	af00      	add	r7, sp, #0
 8002dc2:	6078      	str	r0, [r7, #4]
 8002dc4:	4a05      	ldr	r2, [pc, #20]	@ (8002ddc <_ZN19FrontendApplicationD1Ev+0x20>)
 8002dc6:	687b      	ldr	r3, [r7, #4]
 8002dc8:	601a      	str	r2, [r3, #0]
 8002dca:	687b      	ldr	r3, [r7, #4]
 8002dcc:	4618      	mov	r0, r3
 8002dce:	f7ff ffcb 	bl	8002d68 <_ZN23FrontendApplicationBaseD1Ev>
 8002dd2:	687b      	ldr	r3, [r7, #4]
 8002dd4:	4618      	mov	r0, r3
 8002dd6:	3708      	adds	r7, #8
 8002dd8:	46bd      	mov	sp, r7
 8002dda:	bd80      	pop	{r7, pc}
 8002ddc:	0802ccd8 	.word	0x0802ccd8

08002de0 <_ZN19FrontendApplicationD0Ev>:
 8002de0:	b580      	push	{r7, lr}
 8002de2:	b082      	sub	sp, #8
 8002de4:	af00      	add	r7, sp, #0
 8002de6:	6078      	str	r0, [r7, #4]
 8002de8:	6878      	ldr	r0, [r7, #4]
 8002dea:	f7ff ffe7 	bl	8002dbc <_ZN19FrontendApplicationD1Ev>
 8002dee:	f44f 71ac 	mov.w	r1, #344	@ 0x158
 8002df2:	6878      	ldr	r0, [r7, #4]
 8002df4:	f027 fef7 	bl	802abe6 <_ZdlPvj>
 8002df8:	687b      	ldr	r3, [r7, #4]
 8002dfa:	4618      	mov	r0, r3
 8002dfc:	3708      	adds	r7, #8
 8002dfe:	46bd      	mov	sp, r7
 8002e00:	bd80      	pop	{r7, pc}

08002e02 <_ZN19FrontendApplication15handleTickEventEv>:

    virtual void handleTickEvent()
 8002e02:	b580      	push	{r7, lr}
 8002e04:	b082      	sub	sp, #8
 8002e06:	af00      	add	r7, sp, #0
 8002e08:	6078      	str	r0, [r7, #4]
    {
        model.tick();
 8002e0a:	687b      	ldr	r3, [r7, #4]
 8002e0c:	f8d3 3154 	ldr.w	r3, [r3, #340]	@ 0x154
 8002e10:	4618      	mov	r0, r3
 8002e12:	f007 ff23 	bl	800ac5c <_ZN5Model4tickEv>
        FrontendApplicationBase::handleTickEvent();
 8002e16:	687b      	ldr	r3, [r7, #4]
 8002e18:	4618      	mov	r0, r3
 8002e1a:	f018 fc79 	bl	801b710 <_ZN8touchgfx11Application15handleTickEventEv>
    }
 8002e1e:	bf00      	nop
 8002e20:	3708      	adds	r7, #8
 8002e22:	46bd      	mov	sp, r7
 8002e24:	bd80      	pop	{r7, pc}

08002e26 <_ZN16FrontendHeapBase15gotoStartScreenER19FrontendApplication>:
    /**
     * Determine (compile time) the Transition type of largest size.
     */
    typedef touchgfx::meta::select_type_maxsize< GeneratedTransitionTypes >::type MaxGeneratedTransitionType;

    virtual void gotoStartScreen(FrontendApplication& app)
 8002e26:	b580      	push	{r7, lr}
 8002e28:	b082      	sub	sp, #8
 8002e2a:	af00      	add	r7, sp, #0
 8002e2c:	6078      	str	r0, [r7, #4]
 8002e2e:	6039      	str	r1, [r7, #0]
    {
        app.gotoMainScreenNoTransition();
 8002e30:	683b      	ldr	r3, [r7, #0]
 8002e32:	4618      	mov	r0, r3
 8002e34:	f001 fb1e 	bl	8004474 <_ZN23FrontendApplicationBase26gotoMainScreenNoTransitionEv>
    }
 8002e38:	bf00      	nop
 8002e3a:	3708      	adds	r7, #8
 8002e3c:	46bd      	mov	sp, r7
 8002e3e:	bd80      	pop	{r7, pc}

08002e40 <_ZN16FrontendHeapBaseC1ERN8touchgfx17AbstractPartitionES2_S2_R19FrontendApplication>:
protected:
    FrontendHeapBase(touchgfx::AbstractPartition& presenters, touchgfx::AbstractPartition& views, touchgfx::AbstractPartition& transitions, FrontendApplication& app)
 8002e40:	b580      	push	{r7, lr}
 8002e42:	b086      	sub	sp, #24
 8002e44:	af02      	add	r7, sp, #8
 8002e46:	60f8      	str	r0, [r7, #12]
 8002e48:	60b9      	str	r1, [r7, #8]
 8002e4a:	607a      	str	r2, [r7, #4]
 8002e4c:	603b      	str	r3, [r7, #0]
        : MVPHeap(presenters, views, transitions, app)
 8002e4e:	68f8      	ldr	r0, [r7, #12]
 8002e50:	69bb      	ldr	r3, [r7, #24]
 8002e52:	9300      	str	r3, [sp, #0]
 8002e54:	683b      	ldr	r3, [r7, #0]
 8002e56:	687a      	ldr	r2, [r7, #4]
 8002e58:	68b9      	ldr	r1, [r7, #8]
 8002e5a:	f7ff fd0d 	bl	8002878 <_ZN8touchgfx7MVPHeapC1ERNS_17AbstractPartitionES2_S2_RNS_14MVPApplicationE>
 8002e5e:	4a04      	ldr	r2, [pc, #16]	@ (8002e70 <_ZN16FrontendHeapBaseC1ERN8touchgfx17AbstractPartitionES2_S2_R19FrontendApplication+0x30>)
 8002e60:	68fb      	ldr	r3, [r7, #12]
 8002e62:	601a      	str	r2, [r3, #0]
    {

    }
 8002e64:	68fb      	ldr	r3, [r7, #12]
 8002e66:	4618      	mov	r0, r3
 8002e68:	3710      	adds	r7, #16
 8002e6a:	46bd      	mov	sp, r7
 8002e6c:	bd80      	pop	{r7, pc}
 8002e6e:	bf00      	nop
 8002e70:	0802ccc4 	.word	0x0802ccc4

08002e74 <__tcf_0>:
            > > CombinedTransitionTypes;
    typedef meta::select_type_maxsize< CombinedTransitionTypes >::type MaxTransitionType;

    static FrontendHeap& getInstance()
    {
        static FrontendHeap instance;
 8002e74:	b580      	push	{r7, lr}
 8002e76:	af00      	add	r7, sp, #0
 8002e78:	4801      	ldr	r0, [pc, #4]	@ (8002e80 <__tcf_0+0xc>)
 8002e7a:	f000 f95d 	bl	8003138 <_ZN12FrontendHeapD1Ev>
 8002e7e:	bd80      	pop	{r7, pc}
 8002e80:	24000374 	.word	0x24000374

08002e84 <_ZN12FrontendHeap11getInstanceEv>:
    static FrontendHeap& getInstance()
 8002e84:	b580      	push	{r7, lr}
 8002e86:	af00      	add	r7, sp, #0
        static FrontendHeap instance;
 8002e88:	4b11      	ldr	r3, [pc, #68]	@ (8002ed0 <_ZN12FrontendHeap11getInstanceEv+0x4c>)
 8002e8a:	681b      	ldr	r3, [r3, #0]
 8002e8c:	f3bf 8f5b 	dmb	ish
 8002e90:	f003 0301 	and.w	r3, r3, #1
 8002e94:	2b00      	cmp	r3, #0
 8002e96:	bf0c      	ite	eq
 8002e98:	2301      	moveq	r3, #1
 8002e9a:	2300      	movne	r3, #0
 8002e9c:	b2db      	uxtb	r3, r3
 8002e9e:	2b00      	cmp	r3, #0
 8002ea0:	d013      	beq.n	8002eca <_ZN12FrontendHeap11getInstanceEv+0x46>
 8002ea2:	480b      	ldr	r0, [pc, #44]	@ (8002ed0 <_ZN12FrontendHeap11getInstanceEv+0x4c>)
 8002ea4:	f027 fea1 	bl	802abea <__cxa_guard_acquire>
 8002ea8:	4603      	mov	r3, r0
 8002eaa:	2b00      	cmp	r3, #0
 8002eac:	bf14      	ite	ne
 8002eae:	2301      	movne	r3, #1
 8002eb0:	2300      	moveq	r3, #0
 8002eb2:	b2db      	uxtb	r3, r3
 8002eb4:	2b00      	cmp	r3, #0
 8002eb6:	d008      	beq.n	8002eca <_ZN12FrontendHeap11getInstanceEv+0x46>
 8002eb8:	4806      	ldr	r0, [pc, #24]	@ (8002ed4 <_ZN12FrontendHeap11getInstanceEv+0x50>)
 8002eba:	f000 f867 	bl	8002f8c <_ZN12FrontendHeapC1Ev>
 8002ebe:	4806      	ldr	r0, [pc, #24]	@ (8002ed8 <_ZN12FrontendHeap11getInstanceEv+0x54>)
 8002ec0:	f027 fede 	bl	802ac80 <atexit>
 8002ec4:	4802      	ldr	r0, [pc, #8]	@ (8002ed0 <_ZN12FrontendHeap11getInstanceEv+0x4c>)
 8002ec6:	f027 fe9c 	bl	802ac02 <__cxa_guard_release>
        return instance;
 8002eca:	4b02      	ldr	r3, [pc, #8]	@ (8002ed4 <_ZN12FrontendHeap11getInstanceEv+0x50>)
    }
 8002ecc:	4618      	mov	r0, r3
 8002ece:	bd80      	pop	{r7, pc}
 8002ed0:	2400105c 	.word	0x2400105c
 8002ed4:	24000374 	.word	0x24000374
 8002ed8:	08002e75 	.word	0x08002e75

08002edc <_ZN16FrontendHeapBaseD1Ev>:
class FrontendHeapBase : public touchgfx::MVPHeap
 8002edc:	b580      	push	{r7, lr}
 8002ede:	b082      	sub	sp, #8
 8002ee0:	af00      	add	r7, sp, #0
 8002ee2:	6078      	str	r0, [r7, #4]
 8002ee4:	4a05      	ldr	r2, [pc, #20]	@ (8002efc <_ZN16FrontendHeapBaseD1Ev+0x20>)
 8002ee6:	687b      	ldr	r3, [r7, #4]
 8002ee8:	601a      	str	r2, [r3, #0]
 8002eea:	687b      	ldr	r3, [r7, #4]
 8002eec:	4618      	mov	r0, r3
 8002eee:	f7ff fce3 	bl	80028b8 <_ZN8touchgfx7MVPHeapD1Ev>
 8002ef2:	687b      	ldr	r3, [r7, #4]
 8002ef4:	4618      	mov	r0, r3
 8002ef6:	3708      	adds	r7, #8
 8002ef8:	46bd      	mov	sp, r7
 8002efa:	bd80      	pop	{r7, pc}
 8002efc:	0802ccc4 	.word	0x0802ccc4

08002f00 <_ZN16FrontendHeapBaseD0Ev>:
 8002f00:	b580      	push	{r7, lr}
 8002f02:	b082      	sub	sp, #8
 8002f04:	af00      	add	r7, sp, #0
 8002f06:	6078      	str	r0, [r7, #4]
 8002f08:	6878      	ldr	r0, [r7, #4]
 8002f0a:	f7ff ffe7 	bl	8002edc <_ZN16FrontendHeapBaseD1Ev>
 8002f0e:	2114      	movs	r1, #20
 8002f10:	6878      	ldr	r0, [r7, #4]
 8002f12:	f027 fe68 	bl	802abe6 <_ZdlPvj>
 8002f16:	687b      	ldr	r3, [r7, #4]
 8002f18:	4618      	mov	r0, r3
 8002f1a:	3708      	adds	r7, #8
 8002f1c:	46bd      	mov	sp, r7
 8002f1e:	bd80      	pop	{r7, pc}

08002f20 <_ZN8touchgfx9PartitionINS_4meta8TypeListI25Localize_AnomalyPresenterNS2_INS1_3NilES4_EEEELt1EEC1Ev>:
 * @tparam NUMBER_OF_ELEMENTS Type of the number of elements.
 *
 * @see AbstractPartition
 */
template <typename ListOfTypes, uint16_t NUMBER_OF_ELEMENTS>
class Partition : public AbstractPartition
 8002f20:	b580      	push	{r7, lr}
 8002f22:	b082      	sub	sp, #8
 8002f24:	af00      	add	r7, sp, #0
 8002f26:	6078      	str	r0, [r7, #4]
 8002f28:	687b      	ldr	r3, [r7, #4]
 8002f2a:	4618      	mov	r0, r3
 8002f2c:	f014 fb68 	bl	8017600 <_ZN8touchgfx17AbstractPartitionC1Ev>
 8002f30:	4a03      	ldr	r2, [pc, #12]	@ (8002f40 <_ZN8touchgfx9PartitionINS_4meta8TypeListI25Localize_AnomalyPresenterNS2_INS1_3NilES4_EEEELt1EEC1Ev+0x20>)
 8002f32:	687b      	ldr	r3, [r7, #4]
 8002f34:	601a      	str	r2, [r3, #0]
 8002f36:	687b      	ldr	r3, [r7, #4]
 8002f38:	4618      	mov	r0, r3
 8002f3a:	3708      	adds	r7, #8
 8002f3c:	46bd      	mov	sp, r7
 8002f3e:	bd80      	pop	{r7, pc}
 8002f40:	0802cc90 	.word	0x0802cc90

08002f44 <_ZN8touchgfx9PartitionINS_4meta8TypeListI8MainViewNS2_INS1_3NilES4_EEEELt1EEC1Ev>:
 8002f44:	b580      	push	{r7, lr}
 8002f46:	b082      	sub	sp, #8
 8002f48:	af00      	add	r7, sp, #0
 8002f4a:	6078      	str	r0, [r7, #4]
 8002f4c:	687b      	ldr	r3, [r7, #4]
 8002f4e:	4618      	mov	r0, r3
 8002f50:	f014 fb56 	bl	8017600 <_ZN8touchgfx17AbstractPartitionC1Ev>
 8002f54:	4a03      	ldr	r2, [pc, #12]	@ (8002f64 <_ZN8touchgfx9PartitionINS_4meta8TypeListI8MainViewNS2_INS1_3NilES4_EEEELt1EEC1Ev+0x20>)
 8002f56:	687b      	ldr	r3, [r7, #4]
 8002f58:	601a      	str	r2, [r3, #0]
 8002f5a:	687b      	ldr	r3, [r7, #4]
 8002f5c:	4618      	mov	r0, r3
 8002f5e:	3708      	adds	r7, #8
 8002f60:	46bd      	mov	sp, r7
 8002f62:	bd80      	pop	{r7, pc}
 8002f64:	0802cc5c 	.word	0x0802cc5c

08002f68 <_ZN8touchgfx9PartitionINS_4meta8TypeListINS_14WipeTransitionILNS_9DirectionE1EEENS2_INS1_3NilES6_EEEELt1EEC1Ev>:
 8002f68:	b580      	push	{r7, lr}
 8002f6a:	b082      	sub	sp, #8
 8002f6c:	af00      	add	r7, sp, #0
 8002f6e:	6078      	str	r0, [r7, #4]
 8002f70:	687b      	ldr	r3, [r7, #4]
 8002f72:	4618      	mov	r0, r3
 8002f74:	f014 fb44 	bl	8017600 <_ZN8touchgfx17AbstractPartitionC1Ev>
 8002f78:	4a03      	ldr	r2, [pc, #12]	@ (8002f88 <_ZN8touchgfx9PartitionINS_4meta8TypeListINS_14WipeTransitionILNS_9DirectionE1EEENS2_INS1_3NilES6_EEEELt1EEC1Ev+0x20>)
 8002f7a:	687b      	ldr	r3, [r7, #4]
 8002f7c:	601a      	str	r2, [r3, #0]
 8002f7e:	687b      	ldr	r3, [r7, #4]
 8002f80:	4618      	mov	r0, r3
 8002f82:	3708      	adds	r7, #8
 8002f84:	46bd      	mov	sp, r7
 8002f86:	bd80      	pop	{r7, pc}
 8002f88:	0802cc28 	.word	0x0802cc28

08002f8c <_ZN12FrontendHeapC1Ev>:
    Partition< CombinedTransitionTypes, 1 > transitions;
    FrontendApplication app;
    Model model;

private:
    FrontendHeap() : FrontendHeapBase(presenters, views, transitions, app),
 8002f8c:	b590      	push	{r4, r7, lr}
 8002f8e:	b085      	sub	sp, #20
 8002f90:	af02      	add	r7, sp, #8
 8002f92:	6078      	str	r0, [r7, #4]
        app(model, *this)
 8002f94:	6878      	ldr	r0, [r7, #4]
 8002f96:	687b      	ldr	r3, [r7, #4]
 8002f98:	f103 0114 	add.w	r1, r3, #20
 8002f9c:	687b      	ldr	r3, [r7, #4]
 8002f9e:	f103 022c 	add.w	r2, r3, #44	@ 0x2c
 8002fa2:	687b      	ldr	r3, [r7, #4]
 8002fa4:	f603 344c 	addw	r4, r3, #2892	@ 0xb4c
    FrontendHeap() : FrontendHeapBase(presenters, views, transitions, app),
 8002fa8:	687b      	ldr	r3, [r7, #4]
 8002faa:	f603 338c 	addw	r3, r3, #2956	@ 0xb8c
        app(model, *this)
 8002fae:	9300      	str	r3, [sp, #0]
 8002fb0:	4623      	mov	r3, r4
 8002fb2:	f7ff ff45 	bl	8002e40 <_ZN16FrontendHeapBaseC1ERN8touchgfx17AbstractPartitionES2_S2_R19FrontendApplication>
 8002fb6:	4a18      	ldr	r2, [pc, #96]	@ (8003018 <_ZN12FrontendHeapC1Ev+0x8c>)
 8002fb8:	687b      	ldr	r3, [r7, #4]
 8002fba:	601a      	str	r2, [r3, #0]
 8002fbc:	687b      	ldr	r3, [r7, #4]
 8002fbe:	3314      	adds	r3, #20
 8002fc0:	4618      	mov	r0, r3
 8002fc2:	f7ff ffad 	bl	8002f20 <_ZN8touchgfx9PartitionINS_4meta8TypeListI25Localize_AnomalyPresenterNS2_INS1_3NilES4_EEEELt1EEC1Ev>
 8002fc6:	687b      	ldr	r3, [r7, #4]
 8002fc8:	332c      	adds	r3, #44	@ 0x2c
 8002fca:	4618      	mov	r0, r3
 8002fcc:	f7ff ffba 	bl	8002f44 <_ZN8touchgfx9PartitionINS_4meta8TypeListI8MainViewNS2_INS1_3NilES4_EEEELt1EEC1Ev>
 8002fd0:	687b      	ldr	r3, [r7, #4]
 8002fd2:	f603 334c 	addw	r3, r3, #2892	@ 0xb4c
 8002fd6:	4618      	mov	r0, r3
 8002fd8:	f7ff ffc6 	bl	8002f68 <_ZN8touchgfx9PartitionINS_4meta8TypeListINS_14WipeTransitionILNS_9DirectionE1EEENS2_INS1_3NilES6_EEEELt1EEC1Ev>
 8002fdc:	687b      	ldr	r3, [r7, #4]
 8002fde:	f603 308c 	addw	r0, r3, #2956	@ 0xb8c
 8002fe2:	687b      	ldr	r3, [r7, #4]
 8002fe4:	f603 43e4 	addw	r3, r3, #3300	@ 0xce4
 8002fe8:	687a      	ldr	r2, [r7, #4]
 8002fea:	4619      	mov	r1, r3
 8002fec:	f007 f840 	bl	800a070 <_ZN19FrontendApplicationC1ER5ModelR12FrontendHeap>
 8002ff0:	687b      	ldr	r3, [r7, #4]
 8002ff2:	f603 43e4 	addw	r3, r3, #3300	@ 0xce4
 8002ff6:	4618      	mov	r0, r3
 8002ff8:	f007 fe22 	bl	800ac40 <_ZN5ModelC1Ev>
    {
        gotoStartScreen(app);
 8002ffc:	687a      	ldr	r2, [r7, #4]
 8002ffe:	687b      	ldr	r3, [r7, #4]
 8003000:	f603 338c 	addw	r3, r3, #2956	@ 0xb8c
 8003004:	4619      	mov	r1, r3
 8003006:	4610      	mov	r0, r2
 8003008:	f7ff ff0d 	bl	8002e26 <_ZN16FrontendHeapBase15gotoStartScreenER19FrontendApplication>
    }
 800300c:	687b      	ldr	r3, [r7, #4]
 800300e:	4618      	mov	r0, r3
 8003010:	370c      	adds	r7, #12
 8003012:	46bd      	mov	sp, r7
 8003014:	bd90      	pop	{r4, r7, pc}
 8003016:	bf00      	nop
 8003018:	0802cc14 	.word	0x0802cc14

0800301c <_ZN20TouchGFXGeneratedHALC1ERN8touchgfx13DMA_InterfaceERNS0_3LCDERNS0_15TouchControllerEtt>:
    TouchGFXGeneratedHAL(touchgfx::DMA_Interface& dma, touchgfx::LCD& display, touchgfx::TouchController& tc, uint16_t width, uint16_t height) :
 800301c:	b580      	push	{r7, lr}
 800301e:	b086      	sub	sp, #24
 8003020:	af02      	add	r7, sp, #8
 8003022:	60f8      	str	r0, [r7, #12]
 8003024:	60b9      	str	r1, [r7, #8]
 8003026:	607a      	str	r2, [r7, #4]
 8003028:	603b      	str	r3, [r7, #0]
        touchgfx::HAL(dma, display, tc, width, height)
 800302a:	68f8      	ldr	r0, [r7, #12]
 800302c:	8bbb      	ldrh	r3, [r7, #28]
 800302e:	9301      	str	r3, [sp, #4]
 8003030:	8b3b      	ldrh	r3, [r7, #24]
 8003032:	9300      	str	r3, [sp, #0]
 8003034:	683b      	ldr	r3, [r7, #0]
 8003036:	687a      	ldr	r2, [r7, #4]
 8003038:	68b9      	ldr	r1, [r7, #8]
 800303a:	f7ff fd53 	bl	8002ae4 <_ZN8touchgfx3HALC1ERNS_13DMA_InterfaceERNS_3LCDERNS_15TouchControllerEtt>
 800303e:	4a04      	ldr	r2, [pc, #16]	@ (8003050 <_ZN20TouchGFXGeneratedHALC1ERN8touchgfx13DMA_InterfaceERNS0_3LCDERNS0_15TouchControllerEtt+0x34>)
 8003040:	68fb      	ldr	r3, [r7, #12]
 8003042:	601a      	str	r2, [r3, #0]
    }
 8003044:	68fb      	ldr	r3, [r7, #12]
 8003046:	4618      	mov	r0, r3
 8003048:	3710      	adds	r7, #16
 800304a:	46bd      	mov	sp, r7
 800304c:	bd80      	pop	{r7, pc}
 800304e:	bf00      	nop
 8003050:	0802ce20 	.word	0x0802ce20

08003054 <_ZN11TouchGFXHALC1ERN8touchgfx13DMA_InterfaceERNS0_3LCDERNS0_15TouchControllerEtt>:
    TouchGFXHAL(touchgfx::DMA_Interface& dma, touchgfx::LCD& display, touchgfx::TouchController& tc, uint16_t width, uint16_t height) : TouchGFXGeneratedHAL(dma, display, tc, width, height)
 8003054:	b580      	push	{r7, lr}
 8003056:	b086      	sub	sp, #24
 8003058:	af02      	add	r7, sp, #8
 800305a:	60f8      	str	r0, [r7, #12]
 800305c:	60b9      	str	r1, [r7, #8]
 800305e:	607a      	str	r2, [r7, #4]
 8003060:	603b      	str	r3, [r7, #0]
 8003062:	68f8      	ldr	r0, [r7, #12]
 8003064:	8bbb      	ldrh	r3, [r7, #28]
 8003066:	9301      	str	r3, [sp, #4]
 8003068:	8b3b      	ldrh	r3, [r7, #24]
 800306a:	9300      	str	r3, [sp, #0]
 800306c:	683b      	ldr	r3, [r7, #0]
 800306e:	687a      	ldr	r2, [r7, #4]
 8003070:	68b9      	ldr	r1, [r7, #8]
 8003072:	f7ff ffd3 	bl	800301c <_ZN20TouchGFXGeneratedHALC1ERN8touchgfx13DMA_InterfaceERNS0_3LCDERNS0_15TouchControllerEtt>
 8003076:	4a04      	ldr	r2, [pc, #16]	@ (8003088 <_ZN11TouchGFXHALC1ERN8touchgfx13DMA_InterfaceERNS0_3LCDERNS0_15TouchControllerEtt+0x34>)
 8003078:	68fb      	ldr	r3, [r7, #12]
 800307a:	601a      	str	r2, [r3, #0]
    }
 800307c:	68fb      	ldr	r3, [r7, #12]
 800307e:	4618      	mov	r0, r3
 8003080:	3710      	adds	r7, #16
 8003082:	46bd      	mov	sp, r7
 8003084:	bd80      	pop	{r7, pc}
 8003086:	bf00      	nop
 8003088:	0802cad0 	.word	0x0802cad0

0800308c <_ZN8touchgfx15TouchControllerC1Ev>:
class TouchController
 800308c:	b480      	push	{r7}
 800308e:	b083      	sub	sp, #12
 8003090:	af00      	add	r7, sp, #0
 8003092:	6078      	str	r0, [r7, #4]
 8003094:	4a04      	ldr	r2, [pc, #16]	@ (80030a8 <_ZN8touchgfx15TouchControllerC1Ev+0x1c>)
 8003096:	687b      	ldr	r3, [r7, #4]
 8003098:	601a      	str	r2, [r3, #0]
 800309a:	687b      	ldr	r3, [r7, #4]
 800309c:	4618      	mov	r0, r3
 800309e:	370c      	adds	r7, #12
 80030a0:	46bd      	mov	sp, r7
 80030a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030a6:	4770      	bx	lr
 80030a8:	0802cab8 	.word	0x0802cab8

080030ac <_ZN20STM32TouchControllerC1Ev>:
{
public:

    STM32TouchController() {}
 80030ac:	b580      	push	{r7, lr}
 80030ae:	b082      	sub	sp, #8
 80030b0:	af00      	add	r7, sp, #0
 80030b2:	6078      	str	r0, [r7, #4]
 80030b4:	687b      	ldr	r3, [r7, #4]
 80030b6:	4618      	mov	r0, r3
 80030b8:	f7ff ffe8 	bl	800308c <_ZN8touchgfx15TouchControllerC1Ev>
 80030bc:	4a03      	ldr	r2, [pc, #12]	@ (80030cc <_ZN20STM32TouchControllerC1Ev+0x20>)
 80030be:	687b      	ldr	r3, [r7, #4]
 80030c0:	601a      	str	r2, [r3, #0]
 80030c2:	687b      	ldr	r3, [r7, #4]
 80030c4:	4618      	mov	r0, r3
 80030c6:	3708      	adds	r7, #8
 80030c8:	46bd      	mov	sp, r7
 80030ca:	bd80      	pop	{r7, pc}
 80030cc:	0802caa0 	.word	0x0802caa0

080030d0 <touchgfx_init>:
static ApplicationFontProvider fontProvider;
static Texts texts;
static TouchGFXHAL hal(dma, display, tc, 480, 272);

void touchgfx_init()
{
 80030d0:	b590      	push	{r4, r7, lr}
 80030d2:	b085      	sub	sp, #20
 80030d4:	af02      	add	r7, sp, #8
    Bitmap::registerBitmapDatabase(BitmapDatabase::getInstance(), BitmapDatabase::getInstanceSize());
 80030d6:	f000 fd59 	bl	8003b8c <_ZN14BitmapDatabase11getInstanceEv>
 80030da:	4604      	mov	r4, r0
 80030dc:	f000 fd60 	bl	8003ba0 <_ZN14BitmapDatabase15getInstanceSizeEv>
 80030e0:	4603      	mov	r3, r0
 80030e2:	4619      	mov	r1, r3
 80030e4:	2300      	movs	r3, #0
 80030e6:	9300      	str	r3, [sp, #0]
 80030e8:	2300      	movs	r3, #0
 80030ea:	2200      	movs	r2, #0
 80030ec:	4620      	mov	r0, r4
 80030ee:	f01b fd23 	bl	801eb38 <_ZN8touchgfx6Bitmap22registerBitmapDatabaseEPKNS0_10BitmapDataEtPtmm>
    TypedText::registerTexts(&texts);
 80030f2:	4809      	ldr	r0, [pc, #36]	@ (8003118 <touchgfx_init+0x48>)
 80030f4:	f7ff fb90 	bl	8002818 <_ZN8touchgfx9TypedText13registerTextsEPKNS_5TextsE>
    Texts::setLanguage(0);
 80030f8:	2000      	movs	r0, #0
 80030fa:	f006 ff03 	bl	8009f04 <_ZN8touchgfx5Texts11setLanguageEt>

    FontManager::setFontProvider(&fontProvider);
 80030fe:	4807      	ldr	r0, [pc, #28]	@ (800311c <touchgfx_init+0x4c>)
 8003100:	f01b fc5c 	bl	801e9bc <_ZN8touchgfx11FontManager15setFontProviderEPNS_12FontProviderE>

    FrontendHeap& heap = FrontendHeap::getInstance();
 8003104:	f7ff febe 	bl	8002e84 <_ZN12FrontendHeap11getInstanceEv>
 8003108:	6078      	str	r0, [r7, #4]
    (void)heap;

    /*
     * Initialize TouchGFX
     */
    hal.initialize();
 800310a:	4805      	ldr	r0, [pc, #20]	@ (8003120 <touchgfx_init+0x50>)
 800310c:	f7fe fdc2 	bl	8001c94 <_ZN11TouchGFXHAL10initializeEv>
}
 8003110:	bf00      	nop
 8003112:	370c      	adds	r7, #12
 8003114:	46bd      	mov	sp, r7
 8003116:	bd90      	pop	{r4, r7, pc}
 8003118:	24001cfc 	.word	0x24001cfc
 800311c:	24000008 	.word	0x24000008
 8003120:	24001d00 	.word	0x24001d00

08003124 <touchgfx_taskEntry>:

void touchgfx_taskEntry()
{
 8003124:	b580      	push	{r7, lr}
 8003126:	af00      	add	r7, sp, #0
     * Main event loop. Will wait for VSYNC signal, and then process next frame. Call
     * this function from your GUI task.
     *
     * Note This function never returns
     */
    hal.taskEntry();
 8003128:	4802      	ldr	r0, [pc, #8]	@ (8003134 <touchgfx_taskEntry+0x10>)
 800312a:	f015 faf8 	bl	801871e <_ZN8touchgfx3HAL9taskEntryEv>
}
 800312e:	bf00      	nop
 8003130:	bd80      	pop	{r7, pc}
 8003132:	bf00      	nop
 8003134:	24001d00 	.word	0x24001d00

08003138 <_ZN12FrontendHeapD1Ev>:
class FrontendHeap : public FrontendHeapBase
 8003138:	b580      	push	{r7, lr}
 800313a:	b082      	sub	sp, #8
 800313c:	af00      	add	r7, sp, #0
 800313e:	6078      	str	r0, [r7, #4]
 8003140:	4a10      	ldr	r2, [pc, #64]	@ (8003184 <_ZN12FrontendHeapD1Ev+0x4c>)
 8003142:	687b      	ldr	r3, [r7, #4]
 8003144:	601a      	str	r2, [r3, #0]
 8003146:	687b      	ldr	r3, [r7, #4]
 8003148:	f603 338c 	addw	r3, r3, #2956	@ 0xb8c
 800314c:	4618      	mov	r0, r3
 800314e:	f7ff fe35 	bl	8002dbc <_ZN19FrontendApplicationD1Ev>
 8003152:	687b      	ldr	r3, [r7, #4]
 8003154:	f603 334c 	addw	r3, r3, #2892	@ 0xb4c
 8003158:	4618      	mov	r0, r3
 800315a:	f000 f827 	bl	80031ac <_ZN8touchgfx9PartitionINS_4meta8TypeListINS_14WipeTransitionILNS_9DirectionE1EEENS2_INS1_3NilES6_EEEELt1EED1Ev>
 800315e:	687b      	ldr	r3, [r7, #4]
 8003160:	332c      	adds	r3, #44	@ 0x2c
 8003162:	4618      	mov	r0, r3
 8003164:	f000 f844 	bl	80031f0 <_ZN8touchgfx9PartitionINS_4meta8TypeListI8MainViewNS2_INS1_3NilES4_EEEELt1EED1Ev>
 8003168:	687b      	ldr	r3, [r7, #4]
 800316a:	3314      	adds	r3, #20
 800316c:	4618      	mov	r0, r3
 800316e:	f000 f863 	bl	8003238 <_ZN8touchgfx9PartitionINS_4meta8TypeListI25Localize_AnomalyPresenterNS2_INS1_3NilES4_EEEELt1EED1Ev>
 8003172:	687b      	ldr	r3, [r7, #4]
 8003174:	4618      	mov	r0, r3
 8003176:	f7ff feb1 	bl	8002edc <_ZN16FrontendHeapBaseD1Ev>
 800317a:	687b      	ldr	r3, [r7, #4]
 800317c:	4618      	mov	r0, r3
 800317e:	3708      	adds	r7, #8
 8003180:	46bd      	mov	sp, r7
 8003182:	bd80      	pop	{r7, pc}
 8003184:	0802cc14 	.word	0x0802cc14

08003188 <_ZN12FrontendHeapD0Ev>:
 8003188:	b580      	push	{r7, lr}
 800318a:	b082      	sub	sp, #8
 800318c:	af00      	add	r7, sp, #0
 800318e:	6078      	str	r0, [r7, #4]
 8003190:	6878      	ldr	r0, [r7, #4]
 8003192:	f7ff ffd1 	bl	8003138 <_ZN12FrontendHeapD1Ev>
 8003196:	f640 41e8 	movw	r1, #3304	@ 0xce8
 800319a:	6878      	ldr	r0, [r7, #4]
 800319c:	f027 fd23 	bl	802abe6 <_ZdlPvj>
 80031a0:	687b      	ldr	r3, [r7, #4]
 80031a2:	4618      	mov	r0, r3
 80031a4:	3708      	adds	r7, #8
 80031a6:	46bd      	mov	sp, r7
 80031a8:	bd80      	pop	{r7, pc}
	...

080031ac <_ZN8touchgfx9PartitionINS_4meta8TypeListINS_14WipeTransitionILNS_9DirectionE1EEENS2_INS1_3NilES6_EEEELt1EED1Ev>:
 80031ac:	b580      	push	{r7, lr}
 80031ae:	b082      	sub	sp, #8
 80031b0:	af00      	add	r7, sp, #0
 80031b2:	6078      	str	r0, [r7, #4]
 80031b4:	4a05      	ldr	r2, [pc, #20]	@ (80031cc <_ZN8touchgfx9PartitionINS_4meta8TypeListINS_14WipeTransitionILNS_9DirectionE1EEENS2_INS1_3NilES6_EEEELt1EED1Ev+0x20>)
 80031b6:	687b      	ldr	r3, [r7, #4]
 80031b8:	601a      	str	r2, [r3, #0]
 80031ba:	687b      	ldr	r3, [r7, #4]
 80031bc:	4618      	mov	r0, r3
 80031be:	f014 fa1d 	bl	80175fc <_ZN8touchgfx17AbstractPartitionD1Ev>
 80031c2:	687b      	ldr	r3, [r7, #4]
 80031c4:	4618      	mov	r0, r3
 80031c6:	3708      	adds	r7, #8
 80031c8:	46bd      	mov	sp, r7
 80031ca:	bd80      	pop	{r7, pc}
 80031cc:	0802cc28 	.word	0x0802cc28

080031d0 <_ZN8touchgfx9PartitionINS_4meta8TypeListINS_14WipeTransitionILNS_9DirectionE1EEENS2_INS1_3NilES6_EEEELt1EED0Ev>:
 80031d0:	b580      	push	{r7, lr}
 80031d2:	b082      	sub	sp, #8
 80031d4:	af00      	add	r7, sp, #0
 80031d6:	6078      	str	r0, [r7, #4]
 80031d8:	6878      	ldr	r0, [r7, #4]
 80031da:	f7ff ffe7 	bl	80031ac <_ZN8touchgfx9PartitionINS_4meta8TypeListINS_14WipeTransitionILNS_9DirectionE1EEENS2_INS1_3NilES6_EEEELt1EED1Ev>
 80031de:	2140      	movs	r1, #64	@ 0x40
 80031e0:	6878      	ldr	r0, [r7, #4]
 80031e2:	f027 fd00 	bl	802abe6 <_ZdlPvj>
 80031e6:	687b      	ldr	r3, [r7, #4]
 80031e8:	4618      	mov	r0, r3
 80031ea:	3708      	adds	r7, #8
 80031ec:	46bd      	mov	sp, r7
 80031ee:	bd80      	pop	{r7, pc}

080031f0 <_ZN8touchgfx9PartitionINS_4meta8TypeListI8MainViewNS2_INS1_3NilES4_EEEELt1EED1Ev>:
 80031f0:	b580      	push	{r7, lr}
 80031f2:	b082      	sub	sp, #8
 80031f4:	af00      	add	r7, sp, #0
 80031f6:	6078      	str	r0, [r7, #4]
 80031f8:	4a05      	ldr	r2, [pc, #20]	@ (8003210 <_ZN8touchgfx9PartitionINS_4meta8TypeListI8MainViewNS2_INS1_3NilES4_EEEELt1EED1Ev+0x20>)
 80031fa:	687b      	ldr	r3, [r7, #4]
 80031fc:	601a      	str	r2, [r3, #0]
 80031fe:	687b      	ldr	r3, [r7, #4]
 8003200:	4618      	mov	r0, r3
 8003202:	f014 f9fb 	bl	80175fc <_ZN8touchgfx17AbstractPartitionD1Ev>
 8003206:	687b      	ldr	r3, [r7, #4]
 8003208:	4618      	mov	r0, r3
 800320a:	3708      	adds	r7, #8
 800320c:	46bd      	mov	sp, r7
 800320e:	bd80      	pop	{r7, pc}
 8003210:	0802cc5c 	.word	0x0802cc5c

08003214 <_ZN8touchgfx9PartitionINS_4meta8TypeListI8MainViewNS2_INS1_3NilES4_EEEELt1EED0Ev>:
 8003214:	b580      	push	{r7, lr}
 8003216:	b082      	sub	sp, #8
 8003218:	af00      	add	r7, sp, #0
 800321a:	6078      	str	r0, [r7, #4]
 800321c:	6878      	ldr	r0, [r7, #4]
 800321e:	f7ff ffe7 	bl	80031f0 <_ZN8touchgfx9PartitionINS_4meta8TypeListI8MainViewNS2_INS1_3NilES4_EEEELt1EED1Ev>
 8003222:	f44f 6132 	mov.w	r1, #2848	@ 0xb20
 8003226:	6878      	ldr	r0, [r7, #4]
 8003228:	f027 fcdd 	bl	802abe6 <_ZdlPvj>
 800322c:	687b      	ldr	r3, [r7, #4]
 800322e:	4618      	mov	r0, r3
 8003230:	3708      	adds	r7, #8
 8003232:	46bd      	mov	sp, r7
 8003234:	bd80      	pop	{r7, pc}
	...

08003238 <_ZN8touchgfx9PartitionINS_4meta8TypeListI25Localize_AnomalyPresenterNS2_INS1_3NilES4_EEEELt1EED1Ev>:
 8003238:	b580      	push	{r7, lr}
 800323a:	b082      	sub	sp, #8
 800323c:	af00      	add	r7, sp, #0
 800323e:	6078      	str	r0, [r7, #4]
 8003240:	4a05      	ldr	r2, [pc, #20]	@ (8003258 <_ZN8touchgfx9PartitionINS_4meta8TypeListI25Localize_AnomalyPresenterNS2_INS1_3NilES4_EEEELt1EED1Ev+0x20>)
 8003242:	687b      	ldr	r3, [r7, #4]
 8003244:	601a      	str	r2, [r3, #0]
 8003246:	687b      	ldr	r3, [r7, #4]
 8003248:	4618      	mov	r0, r3
 800324a:	f014 f9d7 	bl	80175fc <_ZN8touchgfx17AbstractPartitionD1Ev>
 800324e:	687b      	ldr	r3, [r7, #4]
 8003250:	4618      	mov	r0, r3
 8003252:	3708      	adds	r7, #8
 8003254:	46bd      	mov	sp, r7
 8003256:	bd80      	pop	{r7, pc}
 8003258:	0802cc90 	.word	0x0802cc90

0800325c <_ZN8touchgfx9PartitionINS_4meta8TypeListI25Localize_AnomalyPresenterNS2_INS1_3NilES4_EEEELt1EED0Ev>:
 800325c:	b580      	push	{r7, lr}
 800325e:	b082      	sub	sp, #8
 8003260:	af00      	add	r7, sp, #0
 8003262:	6078      	str	r0, [r7, #4]
 8003264:	6878      	ldr	r0, [r7, #4]
 8003266:	f7ff ffe7 	bl	8003238 <_ZN8touchgfx9PartitionINS_4meta8TypeListI25Localize_AnomalyPresenterNS2_INS1_3NilES4_EEEELt1EED1Ev>
 800326a:	2118      	movs	r1, #24
 800326c:	6878      	ldr	r0, [r7, #4]
 800326e:	f027 fcba 	bl	802abe6 <_ZdlPvj>
 8003272:	687b      	ldr	r3, [r7, #4]
 8003274:	4618      	mov	r0, r3
 8003276:	3708      	adds	r7, #8
 8003278:	46bd      	mov	sp, r7
 800327a:	bd80      	pop	{r7, pc}

0800327c <_ZN23ApplicationFontProviderD1Ev>:
    static const touchgfx::FontId TYPOGRAPHY_01 = 0; // verdana_20_4bpp
    static const touchgfx::FontId TYPOGRAPHY_02 = 4; // verdanab_12_4bpp
    static const uint16_t NUMBER_OF_FONTS = 5;
};

class ApplicationFontProvider : public touchgfx::FontProvider
 800327c:	b580      	push	{r7, lr}
 800327e:	b082      	sub	sp, #8
 8003280:	af00      	add	r7, sp, #0
 8003282:	6078      	str	r0, [r7, #4]
 8003284:	4a05      	ldr	r2, [pc, #20]	@ (800329c <_ZN23ApplicationFontProviderD1Ev+0x20>)
 8003286:	687b      	ldr	r3, [r7, #4]
 8003288:	601a      	str	r2, [r3, #0]
 800328a:	687b      	ldr	r3, [r7, #4]
 800328c:	4618      	mov	r0, r3
 800328e:	f7ff fad3 	bl	8002838 <_ZN8touchgfx12FontProviderD1Ev>
 8003292:	687b      	ldr	r3, [r7, #4]
 8003294:	4618      	mov	r0, r3
 8003296:	3708      	adds	r7, #8
 8003298:	46bd      	mov	sp, r7
 800329a:	bd80      	pop	{r7, pc}
 800329c:	0802cef0 	.word	0x0802cef0

080032a0 <_ZN23ApplicationFontProviderD0Ev>:
 80032a0:	b580      	push	{r7, lr}
 80032a2:	b082      	sub	sp, #8
 80032a4:	af00      	add	r7, sp, #0
 80032a6:	6078      	str	r0, [r7, #4]
 80032a8:	6878      	ldr	r0, [r7, #4]
 80032aa:	f7ff ffe7 	bl	800327c <_ZN23ApplicationFontProviderD1Ev>
 80032ae:	2104      	movs	r1, #4
 80032b0:	6878      	ldr	r0, [r7, #4]
 80032b2:	f027 fc98 	bl	802abe6 <_ZdlPvj>
 80032b6:	687b      	ldr	r3, [r7, #4]
 80032b8:	4618      	mov	r0, r3
 80032ba:	3708      	adds	r7, #8
 80032bc:	46bd      	mov	sp, r7
 80032be:	bd80      	pop	{r7, pc}

080032c0 <_ZN8touchgfx8LCD16bppD1Ev>:
 *
 * @see LCD
 *
 * @note All coordinates are expected to be in absolute coordinates!
 */
class LCD16bpp : public LCD
 80032c0:	b580      	push	{r7, lr}
 80032c2:	b082      	sub	sp, #8
 80032c4:	af00      	add	r7, sp, #0
 80032c6:	6078      	str	r0, [r7, #4]
 80032c8:	4a05      	ldr	r2, [pc, #20]	@ (80032e0 <_ZN8touchgfx8LCD16bppD1Ev+0x20>)
 80032ca:	687b      	ldr	r3, [r7, #4]
 80032cc:	601a      	str	r2, [r3, #0]
 80032ce:	687b      	ldr	r3, [r7, #4]
 80032d0:	4618      	mov	r0, r3
 80032d2:	f7ff fb73 	bl	80029bc <_ZN8touchgfx3LCDD1Ev>
 80032d6:	687b      	ldr	r3, [r7, #4]
 80032d8:	4618      	mov	r0, r3
 80032da:	3708      	adds	r7, #8
 80032dc:	46bd      	mov	sp, r7
 80032de:	bd80      	pop	{r7, pc}
 80032e0:	080301c4 	.word	0x080301c4

080032e4 <_ZN8touchgfx8LCD16bppD0Ev>:
 80032e4:	b580      	push	{r7, lr}
 80032e6:	b082      	sub	sp, #8
 80032e8:	af00      	add	r7, sp, #0
 80032ea:	6078      	str	r0, [r7, #4]
 80032ec:	6878      	ldr	r0, [r7, #4]
 80032ee:	f7ff ffe7 	bl	80032c0 <_ZN8touchgfx8LCD16bppD1Ev>
 80032f2:	2178      	movs	r1, #120	@ 0x78
 80032f4:	6878      	ldr	r0, [r7, #4]
 80032f6:	f027 fc76 	bl	802abe6 <_ZdlPvj>
 80032fa:	687b      	ldr	r3, [r7, #4]
 80032fc:	4618      	mov	r0, r3
 80032fe:	3708      	adds	r7, #8
 8003300:	46bd      	mov	sp, r7
 8003302:	bd80      	pop	{r7, pc}

08003304 <_Z41__static_initialization_and_destruction_0ii>:
 8003304:	b580      	push	{r7, lr}
 8003306:	b084      	sub	sp, #16
 8003308:	af02      	add	r7, sp, #8
 800330a:	6078      	str	r0, [r7, #4]
 800330c:	6039      	str	r1, [r7, #0]
 800330e:	687b      	ldr	r3, [r7, #4]
 8003310:	2b01      	cmp	r3, #1
 8003312:	d119      	bne.n	8003348 <_Z41__static_initialization_and_destruction_0ii+0x44>
 8003314:	683b      	ldr	r3, [r7, #0]
 8003316:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800331a:	4293      	cmp	r3, r2
 800331c:	d114      	bne.n	8003348 <_Z41__static_initialization_and_destruction_0ii+0x44>
static STM32TouchController tc;
 800331e:	4818      	ldr	r0, [pc, #96]	@ (8003380 <_Z41__static_initialization_and_destruction_0ii+0x7c>)
 8003320:	f7ff fec4 	bl	80030ac <_ZN20STM32TouchControllerC1Ev>
static STM32DMA dma;
 8003324:	4817      	ldr	r0, [pc, #92]	@ (8003384 <_Z41__static_initialization_and_destruction_0ii+0x80>)
 8003326:	f7fe ff45 	bl	80021b4 <_ZN8STM32DMAC1Ev>
static LCD16bpp display;
 800332a:	4817      	ldr	r0, [pc, #92]	@ (8003388 <_Z41__static_initialization_and_destruction_0ii+0x84>)
 800332c:	f01e fccc 	bl	8021cc8 <_ZN8touchgfx8LCD16bppC1Ev>
static TouchGFXHAL hal(dma, display, tc, 480, 272);
 8003330:	f44f 7388 	mov.w	r3, #272	@ 0x110
 8003334:	9301      	str	r3, [sp, #4]
 8003336:	f44f 73f0 	mov.w	r3, #480	@ 0x1e0
 800333a:	9300      	str	r3, [sp, #0]
 800333c:	4b10      	ldr	r3, [pc, #64]	@ (8003380 <_Z41__static_initialization_and_destruction_0ii+0x7c>)
 800333e:	4a12      	ldr	r2, [pc, #72]	@ (8003388 <_Z41__static_initialization_and_destruction_0ii+0x84>)
 8003340:	4910      	ldr	r1, [pc, #64]	@ (8003384 <_Z41__static_initialization_and_destruction_0ii+0x80>)
 8003342:	4812      	ldr	r0, [pc, #72]	@ (800338c <_Z41__static_initialization_and_destruction_0ii+0x88>)
 8003344:	f7ff fe86 	bl	8003054 <_ZN11TouchGFXHALC1ERN8touchgfx13DMA_InterfaceERNS0_3LCDERNS0_15TouchControllerEtt>
 8003348:	687b      	ldr	r3, [r7, #4]
 800334a:	2b00      	cmp	r3, #0
 800334c:	d113      	bne.n	8003376 <_Z41__static_initialization_and_destruction_0ii+0x72>
 800334e:	683b      	ldr	r3, [r7, #0]
 8003350:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8003354:	4293      	cmp	r3, r2
 8003356:	d10e      	bne.n	8003376 <_Z41__static_initialization_and_destruction_0ii+0x72>
 8003358:	480c      	ldr	r0, [pc, #48]	@ (800338c <_Z41__static_initialization_and_destruction_0ii+0x88>)
 800335a:	f7fe fd13 	bl	8001d84 <_ZN11TouchGFXHALD1Ev>
static ApplicationFontProvider fontProvider;
 800335e:	480c      	ldr	r0, [pc, #48]	@ (8003390 <_Z41__static_initialization_and_destruction_0ii+0x8c>)
 8003360:	f7ff ff8c 	bl	800327c <_ZN23ApplicationFontProviderD1Ev>
static LCD16bpp display;
 8003364:	4808      	ldr	r0, [pc, #32]	@ (8003388 <_Z41__static_initialization_and_destruction_0ii+0x84>)
 8003366:	f7ff ffab 	bl	80032c0 <_ZN8touchgfx8LCD16bppD1Ev>
static STM32DMA dma;
 800336a:	4806      	ldr	r0, [pc, #24]	@ (8003384 <_Z41__static_initialization_and_destruction_0ii+0x80>)
 800336c:	f7fe ff4c 	bl	8002208 <_ZN8STM32DMAD1Ev>
static STM32TouchController tc;
 8003370:	4803      	ldr	r0, [pc, #12]	@ (8003380 <_Z41__static_initialization_and_destruction_0ii+0x7c>)
 8003372:	f7fe fa95 	bl	80018a0 <_ZN20STM32TouchControllerD1Ev>
}
 8003376:	bf00      	nop
 8003378:	3708      	adds	r7, #8
 800337a:	46bd      	mov	sp, r7
 800337c:	bd80      	pop	{r7, pc}
 800337e:	bf00      	nop
 8003380:	24001060 	.word	0x24001060
 8003384:	24001064 	.word	0x24001064
 8003388:	24001c84 	.word	0x24001c84
 800338c:	24001d00 	.word	0x24001d00
 8003390:	24000008 	.word	0x24000008

08003394 <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvED1Ev>:
 *
 * @note The member function to call must return void. The function can have zero, one, two or
 *       three arguments of any type.
 */
template <class dest_type>
struct Callback<dest_type, void, void, void> : public GenericCallback<>
 8003394:	b580      	push	{r7, lr}
 8003396:	b082      	sub	sp, #8
 8003398:	af00      	add	r7, sp, #0
 800339a:	6078      	str	r0, [r7, #4]
 800339c:	4a05      	ldr	r2, [pc, #20]	@ (80033b4 <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvED1Ev+0x20>)
 800339e:	687b      	ldr	r3, [r7, #4]
 80033a0:	601a      	str	r2, [r3, #0]
 80033a2:	687b      	ldr	r3, [r7, #4]
 80033a4:	4618      	mov	r0, r3
 80033a6:	f7ff fb47 	bl	8002a38 <_ZN8touchgfx15GenericCallbackIvvvED1Ev>
 80033aa:	687b      	ldr	r3, [r7, #4]
 80033ac:	4618      	mov	r0, r3
 80033ae:	3708      	adds	r7, #8
 80033b0:	46bd      	mov	sp, r7
 80033b2:	bd80      	pop	{r7, pc}
 80033b4:	0802cd60 	.word	0x0802cd60

080033b8 <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvED0Ev>:
 80033b8:	b580      	push	{r7, lr}
 80033ba:	b082      	sub	sp, #8
 80033bc:	af00      	add	r7, sp, #0
 80033be:	6078      	str	r0, [r7, #4]
 80033c0:	6878      	ldr	r0, [r7, #4]
 80033c2:	f7ff ffe7 	bl	8003394 <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvED1Ev>
 80033c6:	2110      	movs	r1, #16
 80033c8:	6878      	ldr	r0, [r7, #4]
 80033ca:	f027 fc0c 	bl	802abe6 <_ZdlPvj>
 80033ce:	687b      	ldr	r3, [r7, #4]
 80033d0:	4618      	mov	r0, r3
 80033d2:	3708      	adds	r7, #8
 80033d4:	46bd      	mov	sp, r7
 80033d6:	bd80      	pop	{r7, pc}

080033d8 <_ZNK8touchgfx9PartitionINS_4meta8TypeListINS_14WipeTransitionILNS_9DirectionE1EEENS2_INS1_3NilES6_EEEELt1EE8capacityEv>:
    {
        INTS_PR_ELEMENT = (sizeof(typename meta::select_type_maxsize<SupportedTypesList>::type) + sizeof(int) - 1) / sizeof(int),
        SIZE_OF_ELEMENT = INTS_PR_ELEMENT * sizeof(int)
    };

    virtual uint16_t capacity() const
 80033d8:	b480      	push	{r7}
 80033da:	b083      	sub	sp, #12
 80033dc:	af00      	add	r7, sp, #0
 80033de:	6078      	str	r0, [r7, #4]
    {
        return NUMBER_OF_ELEMENTS;
 80033e0:	2301      	movs	r3, #1
    }
 80033e2:	4618      	mov	r0, r3
 80033e4:	370c      	adds	r7, #12
 80033e6:	46bd      	mov	sp, r7
 80033e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033ec:	4770      	bx	lr

080033ee <_ZN8touchgfx9PartitionINS_4meta8TypeListINS_14WipeTransitionILNS_9DirectionE1EEENS2_INS1_3NilES6_EEEELt1EE12element_sizeEv>:

    virtual uint32_t element_size()
 80033ee:	b480      	push	{r7}
 80033f0:	b083      	sub	sp, #12
 80033f2:	af00      	add	r7, sp, #0
 80033f4:	6078      	str	r0, [r7, #4]
    {
        return sizeof(stBlocks[0]);
 80033f6:	2338      	movs	r3, #56	@ 0x38
    }
 80033f8:	4618      	mov	r0, r3
 80033fa:	370c      	adds	r7, #12
 80033fc:	46bd      	mov	sp, r7
 80033fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003402:	4770      	bx	lr

08003404 <_ZN8touchgfx9PartitionINS_4meta8TypeListINS_14WipeTransitionILNS_9DirectionE1EEENS2_INS1_3NilES6_EEEELt1EE7elementEt>:

protected:
    virtual void* element(uint16_t index)
 8003404:	b480      	push	{r7}
 8003406:	b083      	sub	sp, #12
 8003408:	af00      	add	r7, sp, #0
 800340a:	6078      	str	r0, [r7, #4]
 800340c:	460b      	mov	r3, r1
 800340e:	807b      	strh	r3, [r7, #2]
    {
        return &stBlocks[index];
 8003410:	887a      	ldrh	r2, [r7, #2]
 8003412:	4613      	mov	r3, r2
 8003414:	00db      	lsls	r3, r3, #3
 8003416:	1a9b      	subs	r3, r3, r2
 8003418:	00db      	lsls	r3, r3, #3
 800341a:	3308      	adds	r3, #8
 800341c:	687a      	ldr	r2, [r7, #4]
 800341e:	4413      	add	r3, r2
    }
 8003420:	4618      	mov	r0, r3
 8003422:	370c      	adds	r7, #12
 8003424:	46bd      	mov	sp, r7
 8003426:	f85d 7b04 	ldr.w	r7, [sp], #4
 800342a:	4770      	bx	lr

0800342c <_ZNK8touchgfx9PartitionINS_4meta8TypeListINS_14WipeTransitionILNS_9DirectionE1EEENS2_INS1_3NilES6_EEEELt1EE7elementEt>:

    virtual const void* element(uint16_t index) const
 800342c:	b480      	push	{r7}
 800342e:	b083      	sub	sp, #12
 8003430:	af00      	add	r7, sp, #0
 8003432:	6078      	str	r0, [r7, #4]
 8003434:	460b      	mov	r3, r1
 8003436:	807b      	strh	r3, [r7, #2]
    {
        return &stBlocks[index];
 8003438:	887a      	ldrh	r2, [r7, #2]
 800343a:	4613      	mov	r3, r2
 800343c:	00db      	lsls	r3, r3, #3
 800343e:	1a9b      	subs	r3, r3, r2
 8003440:	00db      	lsls	r3, r3, #3
 8003442:	3308      	adds	r3, #8
 8003444:	687a      	ldr	r2, [r7, #4]
 8003446:	4413      	add	r3, r2
    }
 8003448:	4618      	mov	r0, r3
 800344a:	370c      	adds	r7, #12
 800344c:	46bd      	mov	sp, r7
 800344e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003452:	4770      	bx	lr

08003454 <_ZNK8touchgfx9PartitionINS_4meta8TypeListI8MainViewNS2_INS1_3NilES4_EEEELt1EE8capacityEv>:
    virtual uint16_t capacity() const
 8003454:	b480      	push	{r7}
 8003456:	b083      	sub	sp, #12
 8003458:	af00      	add	r7, sp, #0
 800345a:	6078      	str	r0, [r7, #4]
        return NUMBER_OF_ELEMENTS;
 800345c:	2301      	movs	r3, #1
    }
 800345e:	4618      	mov	r0, r3
 8003460:	370c      	adds	r7, #12
 8003462:	46bd      	mov	sp, r7
 8003464:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003468:	4770      	bx	lr

0800346a <_ZN8touchgfx9PartitionINS_4meta8TypeListI8MainViewNS2_INS1_3NilES4_EEEELt1EE12element_sizeEv>:
    virtual uint32_t element_size()
 800346a:	b480      	push	{r7}
 800346c:	b083      	sub	sp, #12
 800346e:	af00      	add	r7, sp, #0
 8003470:	6078      	str	r0, [r7, #4]
        return sizeof(stBlocks[0]);
 8003472:	f640 3318 	movw	r3, #2840	@ 0xb18
    }
 8003476:	4618      	mov	r0, r3
 8003478:	370c      	adds	r7, #12
 800347a:	46bd      	mov	sp, r7
 800347c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003480:	4770      	bx	lr

08003482 <_ZN8touchgfx9PartitionINS_4meta8TypeListI8MainViewNS2_INS1_3NilES4_EEEELt1EE7elementEt>:
    virtual void* element(uint16_t index)
 8003482:	b480      	push	{r7}
 8003484:	b083      	sub	sp, #12
 8003486:	af00      	add	r7, sp, #0
 8003488:	6078      	str	r0, [r7, #4]
 800348a:	460b      	mov	r3, r1
 800348c:	807b      	strh	r3, [r7, #2]
        return &stBlocks[index];
 800348e:	887b      	ldrh	r3, [r7, #2]
 8003490:	f640 3218 	movw	r2, #2840	@ 0xb18
 8003494:	fb02 f303 	mul.w	r3, r2, r3
 8003498:	3308      	adds	r3, #8
 800349a:	687a      	ldr	r2, [r7, #4]
 800349c:	4413      	add	r3, r2
    }
 800349e:	4618      	mov	r0, r3
 80034a0:	370c      	adds	r7, #12
 80034a2:	46bd      	mov	sp, r7
 80034a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034a8:	4770      	bx	lr

080034aa <_ZNK8touchgfx9PartitionINS_4meta8TypeListI8MainViewNS2_INS1_3NilES4_EEEELt1EE7elementEt>:
    virtual const void* element(uint16_t index) const
 80034aa:	b480      	push	{r7}
 80034ac:	b083      	sub	sp, #12
 80034ae:	af00      	add	r7, sp, #0
 80034b0:	6078      	str	r0, [r7, #4]
 80034b2:	460b      	mov	r3, r1
 80034b4:	807b      	strh	r3, [r7, #2]
        return &stBlocks[index];
 80034b6:	887b      	ldrh	r3, [r7, #2]
 80034b8:	f640 3218 	movw	r2, #2840	@ 0xb18
 80034bc:	fb02 f303 	mul.w	r3, r2, r3
 80034c0:	3308      	adds	r3, #8
 80034c2:	687a      	ldr	r2, [r7, #4]
 80034c4:	4413      	add	r3, r2
    }
 80034c6:	4618      	mov	r0, r3
 80034c8:	370c      	adds	r7, #12
 80034ca:	46bd      	mov	sp, r7
 80034cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034d0:	4770      	bx	lr

080034d2 <_ZNK8touchgfx9PartitionINS_4meta8TypeListI25Localize_AnomalyPresenterNS2_INS1_3NilES4_EEEELt1EE8capacityEv>:
    virtual uint16_t capacity() const
 80034d2:	b480      	push	{r7}
 80034d4:	b083      	sub	sp, #12
 80034d6:	af00      	add	r7, sp, #0
 80034d8:	6078      	str	r0, [r7, #4]
        return NUMBER_OF_ELEMENTS;
 80034da:	2301      	movs	r3, #1
    }
 80034dc:	4618      	mov	r0, r3
 80034de:	370c      	adds	r7, #12
 80034e0:	46bd      	mov	sp, r7
 80034e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034e6:	4770      	bx	lr

080034e8 <_ZN8touchgfx9PartitionINS_4meta8TypeListI25Localize_AnomalyPresenterNS2_INS1_3NilES4_EEEELt1EE12element_sizeEv>:
    virtual uint32_t element_size()
 80034e8:	b480      	push	{r7}
 80034ea:	b083      	sub	sp, #12
 80034ec:	af00      	add	r7, sp, #0
 80034ee:	6078      	str	r0, [r7, #4]
        return sizeof(stBlocks[0]);
 80034f0:	2310      	movs	r3, #16
    }
 80034f2:	4618      	mov	r0, r3
 80034f4:	370c      	adds	r7, #12
 80034f6:	46bd      	mov	sp, r7
 80034f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034fc:	4770      	bx	lr

080034fe <_ZN8touchgfx9PartitionINS_4meta8TypeListI25Localize_AnomalyPresenterNS2_INS1_3NilES4_EEEELt1EE7elementEt>:
    virtual void* element(uint16_t index)
 80034fe:	b480      	push	{r7}
 8003500:	b083      	sub	sp, #12
 8003502:	af00      	add	r7, sp, #0
 8003504:	6078      	str	r0, [r7, #4]
 8003506:	460b      	mov	r3, r1
 8003508:	807b      	strh	r3, [r7, #2]
        return &stBlocks[index];
 800350a:	887b      	ldrh	r3, [r7, #2]
 800350c:	011b      	lsls	r3, r3, #4
 800350e:	3308      	adds	r3, #8
 8003510:	687a      	ldr	r2, [r7, #4]
 8003512:	4413      	add	r3, r2
    }
 8003514:	4618      	mov	r0, r3
 8003516:	370c      	adds	r7, #12
 8003518:	46bd      	mov	sp, r7
 800351a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800351e:	4770      	bx	lr

08003520 <_ZNK8touchgfx9PartitionINS_4meta8TypeListI25Localize_AnomalyPresenterNS2_INS1_3NilES4_EEEELt1EE7elementEt>:
    virtual const void* element(uint16_t index) const
 8003520:	b480      	push	{r7}
 8003522:	b083      	sub	sp, #12
 8003524:	af00      	add	r7, sp, #0
 8003526:	6078      	str	r0, [r7, #4]
 8003528:	460b      	mov	r3, r1
 800352a:	807b      	strh	r3, [r7, #2]
        return &stBlocks[index];
 800352c:	887b      	ldrh	r3, [r7, #2]
 800352e:	011b      	lsls	r3, r3, #4
 8003530:	3308      	adds	r3, #8
 8003532:	687a      	ldr	r2, [r7, #4]
 8003534:	4413      	add	r3, r2
    }
 8003536:	4618      	mov	r0, r3
 8003538:	370c      	adds	r7, #12
 800353a:	46bd      	mov	sp, r7
 800353c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003540:	4770      	bx	lr

08003542 <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvE7executeEv>:

    /**
     * Calls the member function. Do not call execute unless isValid() returns true (ie. a
     * pointer to the object and the function has been set).
     */
    virtual void execute()
 8003542:	b580      	push	{r7, lr}
 8003544:	b082      	sub	sp, #8
 8003546:	af00      	add	r7, sp, #0
 8003548:	6078      	str	r0, [r7, #4]
    {
        (pobject->*pmemfun_0)();
 800354a:	687b      	ldr	r3, [r7, #4]
 800354c:	685b      	ldr	r3, [r3, #4]
 800354e:	687a      	ldr	r2, [r7, #4]
 8003550:	68d2      	ldr	r2, [r2, #12]
 8003552:	1052      	asrs	r2, r2, #1
 8003554:	1899      	adds	r1, r3, r2
 8003556:	687b      	ldr	r3, [r7, #4]
 8003558:	68db      	ldr	r3, [r3, #12]
 800355a:	f003 0301 	and.w	r3, r3, #1
 800355e:	2b00      	cmp	r3, #0
 8003560:	d102      	bne.n	8003568 <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvE7executeEv+0x26>
 8003562:	687b      	ldr	r3, [r7, #4]
 8003564:	689b      	ldr	r3, [r3, #8]
 8003566:	e00a      	b.n	800357e <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvE7executeEv+0x3c>
 8003568:	687b      	ldr	r3, [r7, #4]
 800356a:	685b      	ldr	r3, [r3, #4]
 800356c:	687a      	ldr	r2, [r7, #4]
 800356e:	68d2      	ldr	r2, [r2, #12]
 8003570:	1052      	asrs	r2, r2, #1
 8003572:	4413      	add	r3, r2
 8003574:	681b      	ldr	r3, [r3, #0]
 8003576:	687a      	ldr	r2, [r7, #4]
 8003578:	6892      	ldr	r2, [r2, #8]
 800357a:	4413      	add	r3, r2
 800357c:	681b      	ldr	r3, [r3, #0]
 800357e:	4608      	mov	r0, r1
 8003580:	4798      	blx	r3
    }
 8003582:	bf00      	nop
 8003584:	3708      	adds	r7, #8
 8003586:	46bd      	mov	sp, r7
 8003588:	bd80      	pop	{r7, pc}

0800358a <_ZNK8touchgfx8CallbackI23FrontendApplicationBasevvvE7isValidEv>:
    /**
     * Function to check whether the Callback has been initialized with values.
     *
     * @return true If the callback is valid (i.e. safe to call execute).
     */
    virtual bool isValid() const
 800358a:	b480      	push	{r7}
 800358c:	b083      	sub	sp, #12
 800358e:	af00      	add	r7, sp, #0
 8003590:	6078      	str	r0, [r7, #4]
    {
        return (pobject != 0) && (pmemfun_0 != 0);
 8003592:	687b      	ldr	r3, [r7, #4]
 8003594:	685b      	ldr	r3, [r3, #4]
 8003596:	2b00      	cmp	r3, #0
 8003598:	d010      	beq.n	80035bc <_ZNK8touchgfx8CallbackI23FrontendApplicationBasevvvE7isValidEv+0x32>
 800359a:	687b      	ldr	r3, [r7, #4]
 800359c:	689b      	ldr	r3, [r3, #8]
 800359e:	2b00      	cmp	r3, #0
 80035a0:	d107      	bne.n	80035b2 <_ZNK8touchgfx8CallbackI23FrontendApplicationBasevvvE7isValidEv+0x28>
 80035a2:	687b      	ldr	r3, [r7, #4]
 80035a4:	68db      	ldr	r3, [r3, #12]
 80035a6:	f003 0301 	and.w	r3, r3, #1
 80035aa:	2b00      	cmp	r3, #0
 80035ac:	d101      	bne.n	80035b2 <_ZNK8touchgfx8CallbackI23FrontendApplicationBasevvvE7isValidEv+0x28>
 80035ae:	2301      	movs	r3, #1
 80035b0:	e000      	b.n	80035b4 <_ZNK8touchgfx8CallbackI23FrontendApplicationBasevvvE7isValidEv+0x2a>
 80035b2:	2300      	movs	r3, #0
 80035b4:	2b01      	cmp	r3, #1
 80035b6:	d001      	beq.n	80035bc <_ZNK8touchgfx8CallbackI23FrontendApplicationBasevvvE7isValidEv+0x32>
 80035b8:	2301      	movs	r3, #1
 80035ba:	e000      	b.n	80035be <_ZNK8touchgfx8CallbackI23FrontendApplicationBasevvvE7isValidEv+0x34>
 80035bc:	2300      	movs	r3, #0
    }
 80035be:	4618      	mov	r0, r3
 80035c0:	370c      	adds	r7, #12
 80035c2:	46bd      	mov	sp, r7
 80035c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035c8:	4770      	bx	lr

080035ca <_GLOBAL__sub_I_touchgfx_init>:
 80035ca:	b580      	push	{r7, lr}
 80035cc:	af00      	add	r7, sp, #0
 80035ce:	f64f 71ff 	movw	r1, #65535	@ 0xffff
 80035d2:	2001      	movs	r0, #1
 80035d4:	f7ff fe96 	bl	8003304 <_Z41__static_initialization_and_destruction_0ii>
 80035d8:	bd80      	pop	{r7, pc}

080035da <_GLOBAL__sub_D_touchgfx_init>:
 80035da:	b580      	push	{r7, lr}
 80035dc:	af00      	add	r7, sp, #0
 80035de:	f64f 71ff 	movw	r1, #65535	@ 0xffff
 80035e2:	2000      	movs	r0, #0
 80035e4:	f7ff fe8e 	bl	8003304 <_Z41__static_initialization_and_destruction_0ii>
 80035e8:	bd80      	pop	{r7, pc}

080035ea <_ZN8touchgfx3HAL17frontPorchEnteredEv>:
    void frontPorchEntered()
 80035ea:	b580      	push	{r7, lr}
 80035ec:	b082      	sub	sp, #8
 80035ee:	af00      	add	r7, sp, #0
 80035f0:	6078      	str	r0, [r7, #4]
        allowDMATransfers();
 80035f2:	687b      	ldr	r3, [r7, #4]
 80035f4:	681b      	ldr	r3, [r3, #0]
 80035f6:	3320      	adds	r3, #32
 80035f8:	681b      	ldr	r3, [r3, #0]
 80035fa:	6878      	ldr	r0, [r7, #4]
 80035fc:	4798      	blx	r3
    }
 80035fe:	bf00      	nop
 8003600:	3708      	adds	r7, #8
 8003602:	46bd      	mov	sp, r7
 8003604:	bd80      	pop	{r7, pc}

08003606 <_ZN8touchgfx3HAL5vSyncEv>:
    void vSync()
 8003606:	b480      	push	{r7}
 8003608:	b083      	sub	sp, #12
 800360a:	af00      	add	r7, sp, #0
 800360c:	6078      	str	r0, [r7, #4]
        vSyncCnt++;
 800360e:	687b      	ldr	r3, [r7, #4]
 8003610:	f893 3066 	ldrb.w	r3, [r3, #102]	@ 0x66
 8003614:	3301      	adds	r3, #1
 8003616:	b2da      	uxtb	r2, r3
 8003618:	687b      	ldr	r3, [r7, #4]
 800361a:	f883 2066 	strb.w	r2, [r3, #102]	@ 0x66
    }
 800361e:	bf00      	nop
 8003620:	370c      	adds	r7, #12
 8003622:	46bd      	mov	sp, r7
 8003624:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003628:	4770      	bx	lr
	...

0800362c <__NVIC_EnableIRQ>:
{
 800362c:	b480      	push	{r7}
 800362e:	b083      	sub	sp, #12
 8003630:	af00      	add	r7, sp, #0
 8003632:	4603      	mov	r3, r0
 8003634:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8003636:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800363a:	2b00      	cmp	r3, #0
 800363c:	db0b      	blt.n	8003656 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800363e:	88fb      	ldrh	r3, [r7, #6]
 8003640:	f003 021f 	and.w	r2, r3, #31
 8003644:	4907      	ldr	r1, [pc, #28]	@ (8003664 <__NVIC_EnableIRQ+0x38>)
 8003646:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800364a:	095b      	lsrs	r3, r3, #5
 800364c:	2001      	movs	r0, #1
 800364e:	fa00 f202 	lsl.w	r2, r0, r2
 8003652:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8003656:	bf00      	nop
 8003658:	370c      	adds	r7, #12
 800365a:	46bd      	mov	sp, r7
 800365c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003660:	4770      	bx	lr
 8003662:	bf00      	nop
 8003664:	e000e100 	.word	0xe000e100

08003668 <__NVIC_DisableIRQ>:
{
 8003668:	b480      	push	{r7}
 800366a:	b083      	sub	sp, #12
 800366c:	af00      	add	r7, sp, #0
 800366e:	4603      	mov	r3, r0
 8003670:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8003672:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8003676:	2b00      	cmp	r3, #0
 8003678:	db12      	blt.n	80036a0 <__NVIC_DisableIRQ+0x38>
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800367a:	88fb      	ldrh	r3, [r7, #6]
 800367c:	f003 021f 	and.w	r2, r3, #31
 8003680:	490a      	ldr	r1, [pc, #40]	@ (80036ac <__NVIC_DisableIRQ+0x44>)
 8003682:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8003686:	095b      	lsrs	r3, r3, #5
 8003688:	2001      	movs	r0, #1
 800368a:	fa00 f202 	lsl.w	r2, r0, r2
 800368e:	3320      	adds	r3, #32
 8003690:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  __ASM volatile ("dsb 0xF":::"memory");
 8003694:	f3bf 8f4f 	dsb	sy
}
 8003698:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 800369a:	f3bf 8f6f 	isb	sy
}
 800369e:	bf00      	nop
}
 80036a0:	bf00      	nop
 80036a2:	370c      	adds	r7, #12
 80036a4:	46bd      	mov	sp, r7
 80036a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036aa:	4770      	bx	lr
 80036ac:	e000e100 	.word	0xe000e100

080036b0 <__NVIC_SetPriority>:
{
 80036b0:	b480      	push	{r7}
 80036b2:	b083      	sub	sp, #12
 80036b4:	af00      	add	r7, sp, #0
 80036b6:	4603      	mov	r3, r0
 80036b8:	6039      	str	r1, [r7, #0]
 80036ba:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 80036bc:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80036c0:	2b00      	cmp	r3, #0
 80036c2:	db0a      	blt.n	80036da <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80036c4:	683b      	ldr	r3, [r7, #0]
 80036c6:	b2da      	uxtb	r2, r3
 80036c8:	490c      	ldr	r1, [pc, #48]	@ (80036fc <__NVIC_SetPriority+0x4c>)
 80036ca:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80036ce:	0112      	lsls	r2, r2, #4
 80036d0:	b2d2      	uxtb	r2, r2
 80036d2:	440b      	add	r3, r1
 80036d4:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 80036d8:	e00a      	b.n	80036f0 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80036da:	683b      	ldr	r3, [r7, #0]
 80036dc:	b2da      	uxtb	r2, r3
 80036de:	4908      	ldr	r1, [pc, #32]	@ (8003700 <__NVIC_SetPriority+0x50>)
 80036e0:	88fb      	ldrh	r3, [r7, #6]
 80036e2:	f003 030f 	and.w	r3, r3, #15
 80036e6:	3b04      	subs	r3, #4
 80036e8:	0112      	lsls	r2, r2, #4
 80036ea:	b2d2      	uxtb	r2, r2
 80036ec:	440b      	add	r3, r1
 80036ee:	761a      	strb	r2, [r3, #24]
}
 80036f0:	bf00      	nop
 80036f2:	370c      	adds	r7, #12
 80036f4:	46bd      	mov	sp, r7
 80036f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036fa:	4770      	bx	lr
 80036fc:	e000e100 	.word	0xe000e100
 8003700:	e000ed00 	.word	0xe000ed00

08003704 <_ZN20TouchGFXGeneratedHAL10initializeEv>:
    static uint16_t lcd_int_active_line;
    static uint16_t lcd_int_porch_line;
}

void TouchGFXGeneratedHAL::initialize()
{
 8003704:	b5b0      	push	{r4, r5, r7, lr}
 8003706:	b082      	sub	sp, #8
 8003708:	af00      	add	r7, sp, #0
 800370a:	6078      	str	r0, [r7, #4]
    HAL::initialize();
 800370c:	687b      	ldr	r3, [r7, #4]
 800370e:	4618      	mov	r0, r3
 8003710:	f014 fff3 	bl	80186fa <_ZN8touchgfx3HAL10initializeEv>
    registerEventListener(*(Application::getInstance()));
 8003714:	687d      	ldr	r5, [r7, #4]
 8003716:	687b      	ldr	r3, [r7, #4]
 8003718:	681b      	ldr	r3, [r3, #0]
 800371a:	3360      	adds	r3, #96	@ 0x60
 800371c:	681c      	ldr	r4, [r3, #0]
 800371e:	f018 f923 	bl	801b968 <_ZN8touchgfx11Application11getInstanceEv>
 8003722:	4603      	mov	r3, r0
 8003724:	4619      	mov	r1, r3
 8003726:	4628      	mov	r0, r5
 8003728:	47a0      	blx	r4
    setFrameBufferStartAddresses((void*)0xD0000000, (void*)0xD0200000, (void*)0);
 800372a:	6878      	ldr	r0, [r7, #4]
 800372c:	687b      	ldr	r3, [r7, #4]
 800372e:	681b      	ldr	r3, [r3, #0]
 8003730:	3384      	adds	r3, #132	@ 0x84
 8003732:	681c      	ldr	r4, [r3, #0]
 8003734:	2300      	movs	r3, #0
 8003736:	4a04      	ldr	r2, [pc, #16]	@ (8003748 <_ZN20TouchGFXGeneratedHAL10initializeEv+0x44>)
 8003738:	f04f 4150 	mov.w	r1, #3489660928	@ 0xd0000000
 800373c:	47a0      	blx	r4
}
 800373e:	bf00      	nop
 8003740:	3708      	adds	r7, #8
 8003742:	46bd      	mov	sp, r7
 8003744:	bdb0      	pop	{r4, r5, r7, pc}
 8003746:	bf00      	nop
 8003748:	d0200000 	.word	0xd0200000

0800374c <_ZN20TouchGFXGeneratedHAL19configureInterruptsEv>:

void TouchGFXGeneratedHAL::configureInterrupts()
{
 800374c:	b580      	push	{r7, lr}
 800374e:	b082      	sub	sp, #8
 8003750:	af00      	add	r7, sp, #0
 8003752:	6078      	str	r0, [r7, #4]
    NVIC_SetPriority(DMA2D_IRQn, 9);
 8003754:	2109      	movs	r1, #9
 8003756:	205a      	movs	r0, #90	@ 0x5a
 8003758:	f7ff ffaa 	bl	80036b0 <__NVIC_SetPriority>
    NVIC_SetPriority(LTDC_IRQn, 9);
 800375c:	2109      	movs	r1, #9
 800375e:	2058      	movs	r0, #88	@ 0x58
 8003760:	f7ff ffa6 	bl	80036b0 <__NVIC_SetPriority>
}
 8003764:	bf00      	nop
 8003766:	3708      	adds	r7, #8
 8003768:	46bd      	mov	sp, r7
 800376a:	bd80      	pop	{r7, pc}

0800376c <_ZN20TouchGFXGeneratedHAL16enableInterruptsEv>:

void TouchGFXGeneratedHAL::enableInterrupts()
{
 800376c:	b580      	push	{r7, lr}
 800376e:	b082      	sub	sp, #8
 8003770:	af00      	add	r7, sp, #0
 8003772:	6078      	str	r0, [r7, #4]
    NVIC_EnableIRQ(DMA2D_IRQn);
 8003774:	205a      	movs	r0, #90	@ 0x5a
 8003776:	f7ff ff59 	bl	800362c <__NVIC_EnableIRQ>
    NVIC_EnableIRQ(LTDC_IRQn);
 800377a:	2058      	movs	r0, #88	@ 0x58
 800377c:	f7ff ff56 	bl	800362c <__NVIC_EnableIRQ>
}
 8003780:	bf00      	nop
 8003782:	3708      	adds	r7, #8
 8003784:	46bd      	mov	sp, r7
 8003786:	bd80      	pop	{r7, pc}

08003788 <_ZN20TouchGFXGeneratedHAL17disableInterruptsEv>:

void TouchGFXGeneratedHAL::disableInterrupts()
{
 8003788:	b580      	push	{r7, lr}
 800378a:	b082      	sub	sp, #8
 800378c:	af00      	add	r7, sp, #0
 800378e:	6078      	str	r0, [r7, #4]
    NVIC_DisableIRQ(DMA2D_IRQn);
 8003790:	205a      	movs	r0, #90	@ 0x5a
 8003792:	f7ff ff69 	bl	8003668 <__NVIC_DisableIRQ>
    NVIC_DisableIRQ(LTDC_IRQn);
 8003796:	2058      	movs	r0, #88	@ 0x58
 8003798:	f7ff ff66 	bl	8003668 <__NVIC_DisableIRQ>
}
 800379c:	bf00      	nop
 800379e:	3708      	adds	r7, #8
 80037a0:	46bd      	mov	sp, r7
 80037a2:	bd80      	pop	{r7, pc}

080037a4 <_ZN20TouchGFXGeneratedHAL28enableLCDControllerInterruptEv>:

void TouchGFXGeneratedHAL::enableLCDControllerInterrupt()
{
 80037a4:	b480      	push	{r7}
 80037a6:	b083      	sub	sp, #12
 80037a8:	af00      	add	r7, sp, #0
 80037aa:	6078      	str	r0, [r7, #4]
    lcd_int_active_line = (LTDC->BPCR & 0x7FF) - 1;
 80037ac:	4b11      	ldr	r3, [pc, #68]	@ (80037f4 <_ZN20TouchGFXGeneratedHAL28enableLCDControllerInterruptEv+0x50>)
 80037ae:	68db      	ldr	r3, [r3, #12]
 80037b0:	b29b      	uxth	r3, r3
 80037b2:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80037b6:	b29b      	uxth	r3, r3
 80037b8:	3b01      	subs	r3, #1
 80037ba:	b29a      	uxth	r2, r3
 80037bc:	4b0e      	ldr	r3, [pc, #56]	@ (80037f8 <_ZN20TouchGFXGeneratedHAL28enableLCDControllerInterruptEv+0x54>)
 80037be:	801a      	strh	r2, [r3, #0]
    lcd_int_porch_line = (LTDC->AWCR & 0x7FF) - 1;
 80037c0:	4b0c      	ldr	r3, [pc, #48]	@ (80037f4 <_ZN20TouchGFXGeneratedHAL28enableLCDControllerInterruptEv+0x50>)
 80037c2:	691b      	ldr	r3, [r3, #16]
 80037c4:	b29b      	uxth	r3, r3
 80037c6:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80037ca:	b29b      	uxth	r3, r3
 80037cc:	3b01      	subs	r3, #1
 80037ce:	b29a      	uxth	r2, r3
 80037d0:	4b0a      	ldr	r3, [pc, #40]	@ (80037fc <_ZN20TouchGFXGeneratedHAL28enableLCDControllerInterruptEv+0x58>)
 80037d2:	801a      	strh	r2, [r3, #0]

    /* Sets the Line Interrupt position */
    LTDC->LIPCR = lcd_int_active_line;
 80037d4:	4b08      	ldr	r3, [pc, #32]	@ (80037f8 <_ZN20TouchGFXGeneratedHAL28enableLCDControllerInterruptEv+0x54>)
 80037d6:	881a      	ldrh	r2, [r3, #0]
 80037d8:	4b06      	ldr	r3, [pc, #24]	@ (80037f4 <_ZN20TouchGFXGeneratedHAL28enableLCDControllerInterruptEv+0x50>)
 80037da:	641a      	str	r2, [r3, #64]	@ 0x40
    /* Line Interrupt Enable            */
    LTDC->IER |= LTDC_IER_LIE;
 80037dc:	4b05      	ldr	r3, [pc, #20]	@ (80037f4 <_ZN20TouchGFXGeneratedHAL28enableLCDControllerInterruptEv+0x50>)
 80037de:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80037e0:	4a04      	ldr	r2, [pc, #16]	@ (80037f4 <_ZN20TouchGFXGeneratedHAL28enableLCDControllerInterruptEv+0x50>)
 80037e2:	f043 0301 	orr.w	r3, r3, #1
 80037e6:	6353      	str	r3, [r2, #52]	@ 0x34
}
 80037e8:	bf00      	nop
 80037ea:	370c      	adds	r7, #12
 80037ec:	46bd      	mov	sp, r7
 80037ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037f2:	4770      	bx	lr
 80037f4:	50001000 	.word	0x50001000
 80037f8:	24001d7c 	.word	0x24001d7c
 80037fc:	24001d7e 	.word	0x24001d7e

08003800 <_ZN20TouchGFXGeneratedHAL10beginFrameEv>:

bool TouchGFXGeneratedHAL::beginFrame()
{
 8003800:	b580      	push	{r7, lr}
 8003802:	b082      	sub	sp, #8
 8003804:	af00      	add	r7, sp, #0
 8003806:	6078      	str	r0, [r7, #4]
    return HAL::beginFrame();
 8003808:	687b      	ldr	r3, [r7, #4]
 800380a:	4618      	mov	r0, r3
 800380c:	f014 ff5c 	bl	80186c8 <_ZN8touchgfx3HAL10beginFrameEv>
 8003810:	4603      	mov	r3, r0
}
 8003812:	4618      	mov	r0, r3
 8003814:	3708      	adds	r7, #8
 8003816:	46bd      	mov	sp, r7
 8003818:	bd80      	pop	{r7, pc}

0800381a <_ZN20TouchGFXGeneratedHAL8endFrameEv>:

void TouchGFXGeneratedHAL::endFrame()
{
 800381a:	b580      	push	{r7, lr}
 800381c:	b082      	sub	sp, #8
 800381e:	af00      	add	r7, sp, #0
 8003820:	6078      	str	r0, [r7, #4]
    HAL::endFrame();
 8003822:	687b      	ldr	r3, [r7, #4]
 8003824:	4618      	mov	r0, r3
 8003826:	f014 ff5b 	bl	80186e0 <_ZN8touchgfx3HAL8endFrameEv>

}
 800382a:	bf00      	nop
 800382c:	3708      	adds	r7, #8
 800382e:	46bd      	mov	sp, r7
 8003830:	bd80      	pop	{r7, pc}
	...

08003834 <_ZNK20TouchGFXGeneratedHAL17getTFTFrameBufferEv>:

uint16_t* TouchGFXGeneratedHAL::getTFTFrameBuffer() const
{
 8003834:	b480      	push	{r7}
 8003836:	b083      	sub	sp, #12
 8003838:	af00      	add	r7, sp, #0
 800383a:	6078      	str	r0, [r7, #4]
    return (uint16_t*)LTDC_Layer1->CFBAR;
 800383c:	4b03      	ldr	r3, [pc, #12]	@ (800384c <_ZNK20TouchGFXGeneratedHAL17getTFTFrameBufferEv+0x18>)
 800383e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
}
 8003840:	4618      	mov	r0, r3
 8003842:	370c      	adds	r7, #12
 8003844:	46bd      	mov	sp, r7
 8003846:	f85d 7b04 	ldr.w	r7, [sp], #4
 800384a:	4770      	bx	lr
 800384c:	50001084 	.word	0x50001084

08003850 <_ZN20TouchGFXGeneratedHAL17setTFTFrameBufferEPt>:

void TouchGFXGeneratedHAL::setTFTFrameBuffer(uint16_t* adr)
{
 8003850:	b480      	push	{r7}
 8003852:	b083      	sub	sp, #12
 8003854:	af00      	add	r7, sp, #0
 8003856:	6078      	str	r0, [r7, #4]
 8003858:	6039      	str	r1, [r7, #0]
    LTDC_Layer1->CFBAR = (uint32_t)adr;
 800385a:	4a06      	ldr	r2, [pc, #24]	@ (8003874 <_ZN20TouchGFXGeneratedHAL17setTFTFrameBufferEPt+0x24>)
 800385c:	683b      	ldr	r3, [r7, #0]
 800385e:	6293      	str	r3, [r2, #40]	@ 0x28

    /* Reload immediate */
    LTDC->SRCR = (uint32_t)LTDC_SRCR_IMR;
 8003860:	4b05      	ldr	r3, [pc, #20]	@ (8003878 <_ZN20TouchGFXGeneratedHAL17setTFTFrameBufferEPt+0x28>)
 8003862:	2201      	movs	r2, #1
 8003864:	625a      	str	r2, [r3, #36]	@ 0x24
}
 8003866:	bf00      	nop
 8003868:	370c      	adds	r7, #12
 800386a:	46bd      	mov	sp, r7
 800386c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003870:	4770      	bx	lr
 8003872:	bf00      	nop
 8003874:	50001084 	.word	0x50001084
 8003878:	50001000 	.word	0x50001000

0800387c <_ZN20TouchGFXGeneratedHAL16flushFrameBufferERKN8touchgfx4RectE>:

void TouchGFXGeneratedHAL::flushFrameBuffer(const touchgfx::Rect& rect)
{
 800387c:	b580      	push	{r7, lr}
 800387e:	b086      	sub	sp, #24
 8003880:	af00      	add	r7, sp, #0
 8003882:	6078      	str	r0, [r7, #4]
 8003884:	6039      	str	r1, [r7, #0]
    HAL::flushFrameBuffer(rect);
 8003886:	687b      	ldr	r3, [r7, #4]
 8003888:	6839      	ldr	r1, [r7, #0]
 800388a:	4618      	mov	r0, r3
 800388c:	f014 fee5 	bl	801865a <_ZN8touchgfx3HAL16flushFrameBufferERKNS_4RectE>
    // If the framebuffer is placed in Write Through cached memory (e.g. SRAM) then
    // the DCache must be flushed prior to DMA2D accessing it. That's done
    // using the function SCB_CleanInvalidateDCache(). Remember to enable "CPU Cache" in the
    // "System Core" settings for "Cortex M7" in CubeMX in order for this function call to work.
    if (SCB->CCR & SCB_CCR_DC_Msk)
 8003890:	4b24      	ldr	r3, [pc, #144]	@ (8003924 <_ZN20TouchGFXGeneratedHAL16flushFrameBufferERKN8touchgfx4RectE+0xa8>)
 8003892:	695b      	ldr	r3, [r3, #20]
 8003894:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003898:	2b00      	cmp	r3, #0
 800389a:	bf14      	ite	ne
 800389c:	2301      	movne	r3, #1
 800389e:	2300      	moveq	r3, #0
 80038a0:	b2db      	uxtb	r3, r3
 80038a2:	2b00      	cmp	r3, #0
 80038a4:	d03a      	beq.n	800391c <_ZN20TouchGFXGeneratedHAL16flushFrameBufferERKN8touchgfx4RectE+0xa0>
    SCB->CSSELR = 0U;                       /* select Level 1 data cache */
 80038a6:	4b1f      	ldr	r3, [pc, #124]	@ (8003924 <_ZN20TouchGFXGeneratedHAL16flushFrameBufferERKN8touchgfx4RectE+0xa8>)
 80038a8:	2200      	movs	r2, #0
 80038aa:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  __ASM volatile ("dsb 0xF":::"memory");
 80038ae:	f3bf 8f4f 	dsb	sy
}
 80038b2:	bf00      	nop
    ccsidr = SCB->CCSIDR;
 80038b4:	4b1b      	ldr	r3, [pc, #108]	@ (8003924 <_ZN20TouchGFXGeneratedHAL16flushFrameBufferERKN8touchgfx4RectE+0xa8>)
 80038b6:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80038ba:	617b      	str	r3, [r7, #20]
    sets = (uint32_t)(CCSIDR_SETS(ccsidr));
 80038bc:	697b      	ldr	r3, [r7, #20]
 80038be:	0b5b      	lsrs	r3, r3, #13
 80038c0:	f3c3 030e 	ubfx	r3, r3, #0, #15
 80038c4:	613b      	str	r3, [r7, #16]
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
 80038c6:	697b      	ldr	r3, [r7, #20]
 80038c8:	08db      	lsrs	r3, r3, #3
 80038ca:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80038ce:	60fb      	str	r3, [r7, #12]
        SCB->DCCISW = (((sets << SCB_DCCISW_SET_Pos) & SCB_DCCISW_SET_Msk) |
 80038d0:	693b      	ldr	r3, [r7, #16]
 80038d2:	015a      	lsls	r2, r3, #5
 80038d4:	f643 73e0 	movw	r3, #16352	@ 0x3fe0
 80038d8:	4013      	ands	r3, r2
                       ((ways << SCB_DCCISW_WAY_Pos) & SCB_DCCISW_WAY_Msk)  );
 80038da:	68fa      	ldr	r2, [r7, #12]
 80038dc:	0792      	lsls	r2, r2, #30
        SCB->DCCISW = (((sets << SCB_DCCISW_SET_Pos) & SCB_DCCISW_SET_Msk) |
 80038de:	4911      	ldr	r1, [pc, #68]	@ (8003924 <_ZN20TouchGFXGeneratedHAL16flushFrameBufferERKN8touchgfx4RectE+0xa8>)
 80038e0:	4313      	orrs	r3, r2
 80038e2:	f8c1 3274 	str.w	r3, [r1, #628]	@ 0x274
      } while (ways-- != 0U);
 80038e6:	68fb      	ldr	r3, [r7, #12]
 80038e8:	1e5a      	subs	r2, r3, #1
 80038ea:	60fa      	str	r2, [r7, #12]
 80038ec:	2b00      	cmp	r3, #0
 80038ee:	bf14      	ite	ne
 80038f0:	2301      	movne	r3, #1
 80038f2:	2300      	moveq	r3, #0
 80038f4:	b2db      	uxtb	r3, r3
 80038f6:	2b00      	cmp	r3, #0
 80038f8:	d1ea      	bne.n	80038d0 <_ZN20TouchGFXGeneratedHAL16flushFrameBufferERKN8touchgfx4RectE+0x54>
    } while(sets-- != 0U);
 80038fa:	693b      	ldr	r3, [r7, #16]
 80038fc:	1e5a      	subs	r2, r3, #1
 80038fe:	613a      	str	r2, [r7, #16]
 8003900:	2b00      	cmp	r3, #0
 8003902:	bf14      	ite	ne
 8003904:	2301      	movne	r3, #1
 8003906:	2300      	moveq	r3, #0
 8003908:	b2db      	uxtb	r3, r3
 800390a:	2b00      	cmp	r3, #0
 800390c:	d1db      	bne.n	80038c6 <_ZN20TouchGFXGeneratedHAL16flushFrameBufferERKN8touchgfx4RectE+0x4a>
  __ASM volatile ("dsb 0xF":::"memory");
 800390e:	f3bf 8f4f 	dsb	sy
}
 8003912:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8003914:	f3bf 8f6f 	isb	sy
}
 8003918:	bf00      	nop
}
 800391a:	bf00      	nop
    {
        SCB_CleanInvalidateDCache();
    }
}
 800391c:	bf00      	nop
 800391e:	3718      	adds	r7, #24
 8003920:	46bd      	mov	sp, r7
 8003922:	bd80      	pop	{r7, pc}
 8003924:	e000ed00 	.word	0xe000ed00

08003928 <_ZN20TouchGFXGeneratedHAL9blockCopyEPvPKvm>:

bool TouchGFXGeneratedHAL::blockCopy(void* RESTRICT dest, const void* RESTRICT src, uint32_t numBytes)
{
 8003928:	b580      	push	{r7, lr}
 800392a:	b084      	sub	sp, #16
 800392c:	af00      	add	r7, sp, #0
 800392e:	60f8      	str	r0, [r7, #12]
 8003930:	60b9      	str	r1, [r7, #8]
 8003932:	607a      	str	r2, [r7, #4]
 8003934:	603b      	str	r3, [r7, #0]
    return HAL::blockCopy(dest, src, numBytes);
 8003936:	68f8      	ldr	r0, [r7, #12]
 8003938:	683b      	ldr	r3, [r7, #0]
 800393a:	687a      	ldr	r2, [r7, #4]
 800393c:	68b9      	ldr	r1, [r7, #8]
 800393e:	f014 fff8 	bl	8018932 <_ZN8touchgfx3HAL9blockCopyEPvPKvm>
 8003942:	4603      	mov	r3, r0
}
 8003944:	4618      	mov	r0, r3
 8003946:	3710      	adds	r7, #16
 8003948:	46bd      	mov	sp, r7
 800394a:	bd80      	pop	{r7, pc}

0800394c <_ZN20TouchGFXGeneratedHAL15InvalidateCacheEv>:

void TouchGFXGeneratedHAL::InvalidateCache()
{
 800394c:	b480      	push	{r7}
 800394e:	b087      	sub	sp, #28
 8003950:	af00      	add	r7, sp, #0
 8003952:	6078      	str	r0, [r7, #4]
    // If the framebuffer is placed in Write Through cached memory (e.g. SRAM) then
    // the DCache must be flushed prior to DMA2D accessing it. That's done
    // using the function SCB_CleanInvalidateDCache(). Remember to enable "CPU Cache" in the
    // "System Core" settings for "Cortex M7" in CubeMX in order for this function call to work.
    if (SCB->CCR & SCB_CCR_DC_Msk)
 8003954:	4b25      	ldr	r3, [pc, #148]	@ (80039ec <_ZN20TouchGFXGeneratedHAL15InvalidateCacheEv+0xa0>)
 8003956:	695b      	ldr	r3, [r3, #20]
 8003958:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800395c:	2b00      	cmp	r3, #0
 800395e:	bf14      	ite	ne
 8003960:	2301      	movne	r3, #1
 8003962:	2300      	moveq	r3, #0
 8003964:	b2db      	uxtb	r3, r3
 8003966:	2b00      	cmp	r3, #0
 8003968:	d03a      	beq.n	80039e0 <_ZN20TouchGFXGeneratedHAL15InvalidateCacheEv+0x94>
    SCB->CSSELR = 0U;                       /* select Level 1 data cache */
 800396a:	4b20      	ldr	r3, [pc, #128]	@ (80039ec <_ZN20TouchGFXGeneratedHAL15InvalidateCacheEv+0xa0>)
 800396c:	2200      	movs	r2, #0
 800396e:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  __ASM volatile ("dsb 0xF":::"memory");
 8003972:	f3bf 8f4f 	dsb	sy
}
 8003976:	bf00      	nop
    ccsidr = SCB->CCSIDR;
 8003978:	4b1c      	ldr	r3, [pc, #112]	@ (80039ec <_ZN20TouchGFXGeneratedHAL15InvalidateCacheEv+0xa0>)
 800397a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800397e:	617b      	str	r3, [r7, #20]
    sets = (uint32_t)(CCSIDR_SETS(ccsidr));
 8003980:	697b      	ldr	r3, [r7, #20]
 8003982:	0b5b      	lsrs	r3, r3, #13
 8003984:	f3c3 030e 	ubfx	r3, r3, #0, #15
 8003988:	613b      	str	r3, [r7, #16]
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
 800398a:	697b      	ldr	r3, [r7, #20]
 800398c:	08db      	lsrs	r3, r3, #3
 800398e:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003992:	60fb      	str	r3, [r7, #12]
        SCB->DCCISW = (((sets << SCB_DCCISW_SET_Pos) & SCB_DCCISW_SET_Msk) |
 8003994:	693b      	ldr	r3, [r7, #16]
 8003996:	015a      	lsls	r2, r3, #5
 8003998:	f643 73e0 	movw	r3, #16352	@ 0x3fe0
 800399c:	4013      	ands	r3, r2
                       ((ways << SCB_DCCISW_WAY_Pos) & SCB_DCCISW_WAY_Msk)  );
 800399e:	68fa      	ldr	r2, [r7, #12]
 80039a0:	0792      	lsls	r2, r2, #30
        SCB->DCCISW = (((sets << SCB_DCCISW_SET_Pos) & SCB_DCCISW_SET_Msk) |
 80039a2:	4912      	ldr	r1, [pc, #72]	@ (80039ec <_ZN20TouchGFXGeneratedHAL15InvalidateCacheEv+0xa0>)
 80039a4:	4313      	orrs	r3, r2
 80039a6:	f8c1 3274 	str.w	r3, [r1, #628]	@ 0x274
      } while (ways-- != 0U);
 80039aa:	68fb      	ldr	r3, [r7, #12]
 80039ac:	1e5a      	subs	r2, r3, #1
 80039ae:	60fa      	str	r2, [r7, #12]
 80039b0:	2b00      	cmp	r3, #0
 80039b2:	bf14      	ite	ne
 80039b4:	2301      	movne	r3, #1
 80039b6:	2300      	moveq	r3, #0
 80039b8:	b2db      	uxtb	r3, r3
 80039ba:	2b00      	cmp	r3, #0
 80039bc:	d1ea      	bne.n	8003994 <_ZN20TouchGFXGeneratedHAL15InvalidateCacheEv+0x48>
    } while(sets-- != 0U);
 80039be:	693b      	ldr	r3, [r7, #16]
 80039c0:	1e5a      	subs	r2, r3, #1
 80039c2:	613a      	str	r2, [r7, #16]
 80039c4:	2b00      	cmp	r3, #0
 80039c6:	bf14      	ite	ne
 80039c8:	2301      	movne	r3, #1
 80039ca:	2300      	moveq	r3, #0
 80039cc:	b2db      	uxtb	r3, r3
 80039ce:	2b00      	cmp	r3, #0
 80039d0:	d1db      	bne.n	800398a <_ZN20TouchGFXGeneratedHAL15InvalidateCacheEv+0x3e>
  __ASM volatile ("dsb 0xF":::"memory");
 80039d2:	f3bf 8f4f 	dsb	sy
}
 80039d6:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 80039d8:	f3bf 8f6f 	isb	sy
}
 80039dc:	bf00      	nop
}
 80039de:	bf00      	nop
    {
        SCB_CleanInvalidateDCache();
    }
}
 80039e0:	bf00      	nop
 80039e2:	371c      	adds	r7, #28
 80039e4:	46bd      	mov	sp, r7
 80039e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039ea:	4770      	bx	lr
 80039ec:	e000ed00 	.word	0xe000ed00

080039f0 <_ZN20TouchGFXGeneratedHAL10FlushCacheEv>:

void TouchGFXGeneratedHAL::FlushCache()
{
 80039f0:	b480      	push	{r7}
 80039f2:	b087      	sub	sp, #28
 80039f4:	af00      	add	r7, sp, #0
 80039f6:	6078      	str	r0, [r7, #4]
    // If the framebuffer is placed in Write Through cached memory (e.g. SRAM) then
    // the DCache must be flushed prior to DMA2D accessing it. That's done
    // using the function SCB_CleanInvalidateDCache(). Remember to enable "CPU Cache" in the
    // "System Core" settings for "Cortex M7" in CubeMX in order for this function call to work.
    if (SCB->CCR & SCB_CCR_DC_Msk)
 80039f8:	4b25      	ldr	r3, [pc, #148]	@ (8003a90 <_ZN20TouchGFXGeneratedHAL10FlushCacheEv+0xa0>)
 80039fa:	695b      	ldr	r3, [r3, #20]
 80039fc:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003a00:	2b00      	cmp	r3, #0
 8003a02:	bf14      	ite	ne
 8003a04:	2301      	movne	r3, #1
 8003a06:	2300      	moveq	r3, #0
 8003a08:	b2db      	uxtb	r3, r3
 8003a0a:	2b00      	cmp	r3, #0
 8003a0c:	d03a      	beq.n	8003a84 <_ZN20TouchGFXGeneratedHAL10FlushCacheEv+0x94>
    SCB->CSSELR = 0U;                       /* select Level 1 data cache */
 8003a0e:	4b20      	ldr	r3, [pc, #128]	@ (8003a90 <_ZN20TouchGFXGeneratedHAL10FlushCacheEv+0xa0>)
 8003a10:	2200      	movs	r2, #0
 8003a12:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  __ASM volatile ("dsb 0xF":::"memory");
 8003a16:	f3bf 8f4f 	dsb	sy
}
 8003a1a:	bf00      	nop
    ccsidr = SCB->CCSIDR;
 8003a1c:	4b1c      	ldr	r3, [pc, #112]	@ (8003a90 <_ZN20TouchGFXGeneratedHAL10FlushCacheEv+0xa0>)
 8003a1e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8003a22:	617b      	str	r3, [r7, #20]
    sets = (uint32_t)(CCSIDR_SETS(ccsidr));
 8003a24:	697b      	ldr	r3, [r7, #20]
 8003a26:	0b5b      	lsrs	r3, r3, #13
 8003a28:	f3c3 030e 	ubfx	r3, r3, #0, #15
 8003a2c:	613b      	str	r3, [r7, #16]
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
 8003a2e:	697b      	ldr	r3, [r7, #20]
 8003a30:	08db      	lsrs	r3, r3, #3
 8003a32:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003a36:	60fb      	str	r3, [r7, #12]
        SCB->DCCISW = (((sets << SCB_DCCISW_SET_Pos) & SCB_DCCISW_SET_Msk) |
 8003a38:	693b      	ldr	r3, [r7, #16]
 8003a3a:	015a      	lsls	r2, r3, #5
 8003a3c:	f643 73e0 	movw	r3, #16352	@ 0x3fe0
 8003a40:	4013      	ands	r3, r2
                       ((ways << SCB_DCCISW_WAY_Pos) & SCB_DCCISW_WAY_Msk)  );
 8003a42:	68fa      	ldr	r2, [r7, #12]
 8003a44:	0792      	lsls	r2, r2, #30
        SCB->DCCISW = (((sets << SCB_DCCISW_SET_Pos) & SCB_DCCISW_SET_Msk) |
 8003a46:	4912      	ldr	r1, [pc, #72]	@ (8003a90 <_ZN20TouchGFXGeneratedHAL10FlushCacheEv+0xa0>)
 8003a48:	4313      	orrs	r3, r2
 8003a4a:	f8c1 3274 	str.w	r3, [r1, #628]	@ 0x274
      } while (ways-- != 0U);
 8003a4e:	68fb      	ldr	r3, [r7, #12]
 8003a50:	1e5a      	subs	r2, r3, #1
 8003a52:	60fa      	str	r2, [r7, #12]
 8003a54:	2b00      	cmp	r3, #0
 8003a56:	bf14      	ite	ne
 8003a58:	2301      	movne	r3, #1
 8003a5a:	2300      	moveq	r3, #0
 8003a5c:	b2db      	uxtb	r3, r3
 8003a5e:	2b00      	cmp	r3, #0
 8003a60:	d1ea      	bne.n	8003a38 <_ZN20TouchGFXGeneratedHAL10FlushCacheEv+0x48>
    } while(sets-- != 0U);
 8003a62:	693b      	ldr	r3, [r7, #16]
 8003a64:	1e5a      	subs	r2, r3, #1
 8003a66:	613a      	str	r2, [r7, #16]
 8003a68:	2b00      	cmp	r3, #0
 8003a6a:	bf14      	ite	ne
 8003a6c:	2301      	movne	r3, #1
 8003a6e:	2300      	moveq	r3, #0
 8003a70:	b2db      	uxtb	r3, r3
 8003a72:	2b00      	cmp	r3, #0
 8003a74:	d1db      	bne.n	8003a2e <_ZN20TouchGFXGeneratedHAL10FlushCacheEv+0x3e>
  __ASM volatile ("dsb 0xF":::"memory");
 8003a76:	f3bf 8f4f 	dsb	sy
}
 8003a7a:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8003a7c:	f3bf 8f6f 	isb	sy
}
 8003a80:	bf00      	nop
}
 8003a82:	bf00      	nop
    {
        SCB_CleanInvalidateDCache();
    }
}
 8003a84:	bf00      	nop
 8003a86:	371c      	adds	r7, #28
 8003a88:	46bd      	mov	sp, r7
 8003a8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a8e:	4770      	bx	lr
 8003a90:	e000ed00 	.word	0xe000ed00

08003a94 <HAL_LTDC_LineEventCallback>:

extern "C"
{
    void HAL_LTDC_LineEventCallback(LTDC_HandleTypeDef* hltdc)
    {
 8003a94:	b580      	push	{r7, lr}
 8003a96:	b082      	sub	sp, #8
 8003a98:	af00      	add	r7, sp, #0
 8003a9a:	6078      	str	r0, [r7, #4]
        if (LTDC->LIPCR == lcd_int_active_line)
 8003a9c:	4b1a      	ldr	r3, [pc, #104]	@ (8003b08 <HAL_LTDC_LineEventCallback+0x74>)
 8003a9e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003aa0:	4a1a      	ldr	r2, [pc, #104]	@ (8003b0c <HAL_LTDC_LineEventCallback+0x78>)
 8003aa2:	8812      	ldrh	r2, [r2, #0]
 8003aa4:	4293      	cmp	r3, r2
 8003aa6:	bf0c      	ite	eq
 8003aa8:	2301      	moveq	r3, #1
 8003aaa:	2300      	movne	r3, #0
 8003aac:	b2db      	uxtb	r3, r3
 8003aae:	2b00      	cmp	r3, #0
 8003ab0:	d017      	beq.n	8003ae2 <HAL_LTDC_LineEventCallback+0x4e>
        {
            //entering active area
            HAL_LTDC_ProgramLineEvent(hltdc, lcd_int_porch_line);
 8003ab2:	4b17      	ldr	r3, [pc, #92]	@ (8003b10 <HAL_LTDC_LineEventCallback+0x7c>)
 8003ab4:	881b      	ldrh	r3, [r3, #0]
 8003ab6:	4619      	mov	r1, r3
 8003ab8:	6878      	ldr	r0, [r7, #4]
 8003aba:	f00f fa01 	bl	8012ec0 <HAL_LTDC_ProgramLineEvent>
            HAL::getInstance()->vSync();
 8003abe:	f7fe fb3f 	bl	8002140 <_ZN8touchgfx3HAL11getInstanceEv>
 8003ac2:	4603      	mov	r3, r0
 8003ac4:	4618      	mov	r0, r3
 8003ac6:	f7ff fd9e 	bl	8003606 <_ZN8touchgfx3HAL5vSyncEv>
            OSWrappers::signalVSync();
 8003aca:	f7fe fa33 	bl	8001f34 <_ZN8touchgfx10OSWrappers11signalVSyncEv>
            // Swap frame buffers immediately instead of waiting for the task to be scheduled in.
            // Note: task will also swap when it wakes up, but that operation is guarded and will not have
            // any effect if already swapped.
            HAL::getInstance()->swapFrameBuffers();
 8003ace:	f7fe fb37 	bl	8002140 <_ZN8touchgfx3HAL11getInstanceEv>
 8003ad2:	4603      	mov	r3, r0
 8003ad4:	4618      	mov	r0, r3
 8003ad6:	f015 fc05 	bl	80192e4 <_ZN8touchgfx3HAL16swapFrameBuffersEv>
            GPIO::set(GPIO::VSYNC_FREQ);
 8003ada:	2000      	movs	r0, #0
 8003adc:	f7fd ff02 	bl	80018e4 <_ZN8touchgfx4GPIO3setENS0_7GPIO_IDE>
            //exiting active area
            HAL_LTDC_ProgramLineEvent(hltdc, lcd_int_active_line);
            GPIO::clear(GPIO::VSYNC_FREQ);
            HAL::getInstance()->frontPorchEntered();
        }
    }
 8003ae0:	e00e      	b.n	8003b00 <HAL_LTDC_LineEventCallback+0x6c>
            HAL_LTDC_ProgramLineEvent(hltdc, lcd_int_active_line);
 8003ae2:	4b0a      	ldr	r3, [pc, #40]	@ (8003b0c <HAL_LTDC_LineEventCallback+0x78>)
 8003ae4:	881b      	ldrh	r3, [r3, #0]
 8003ae6:	4619      	mov	r1, r3
 8003ae8:	6878      	ldr	r0, [r7, #4]
 8003aea:	f00f f9e9 	bl	8012ec0 <HAL_LTDC_ProgramLineEvent>
            GPIO::clear(GPIO::VSYNC_FREQ);
 8003aee:	2000      	movs	r0, #0
 8003af0:	f7fd ff14 	bl	800191c <_ZN8touchgfx4GPIO5clearENS0_7GPIO_IDE>
            HAL::getInstance()->frontPorchEntered();
 8003af4:	f7fe fb24 	bl	8002140 <_ZN8touchgfx3HAL11getInstanceEv>
 8003af8:	4603      	mov	r3, r0
 8003afa:	4618      	mov	r0, r3
 8003afc:	f7ff fd75 	bl	80035ea <_ZN8touchgfx3HAL17frontPorchEnteredEv>
    }
 8003b00:	bf00      	nop
 8003b02:	3708      	adds	r7, #8
 8003b04:	46bd      	mov	sp, r7
 8003b06:	bd80      	pop	{r7, pc}
 8003b08:	50001000 	.word	0x50001000
 8003b0c:	24001d7c 	.word	0x24001d7c
 8003b10:	24001d7e 	.word	0x24001d7e

08003b14 <_ZN23ApplicationFontProvider7getFontEt>:
#include <fonts/ApplicationFontProvider.hpp>
#include <fonts/GeneratedFont.hpp>
#include <texts/TypedTextDatabase.hpp>

touchgfx::Font* ApplicationFontProvider::getFont(touchgfx::FontId typography)
{
 8003b14:	b580      	push	{r7, lr}
 8003b16:	b082      	sub	sp, #8
 8003b18:	af00      	add	r7, sp, #0
 8003b1a:	6078      	str	r0, [r7, #4]
 8003b1c:	460b      	mov	r3, r1
 8003b1e:	807b      	strh	r3, [r7, #2]
    switch (typography)
 8003b20:	887b      	ldrh	r3, [r7, #2]
 8003b22:	2b05      	cmp	r3, #5
 8003b24:	d82c      	bhi.n	8003b80 <_ZN23ApplicationFontProvider7getFontEt+0x6c>
 8003b26:	a201      	add	r2, pc, #4	@ (adr r2, 8003b2c <_ZN23ApplicationFontProvider7getFontEt+0x18>)
 8003b28:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003b2c:	08003b45 	.word	0x08003b45
 8003b30:	08003b4f 	.word	0x08003b4f
 8003b34:	08003b59 	.word	0x08003b59
 8003b38:	08003b63 	.word	0x08003b63
 8003b3c:	08003b6d 	.word	0x08003b6d
 8003b40:	08003b77 	.word	0x08003b77
    {
    case Typography::DEFAULT:
        // verdana_20_4bpp
        return const_cast<touchgfx::Font*>(TypedTextDatabase::getFonts()[0]);
 8003b44:	f006 fa56 	bl	8009ff4 <_ZN17TypedTextDatabase8getFontsEv>
 8003b48:	4603      	mov	r3, r0
 8003b4a:	681b      	ldr	r3, [r3, #0]
 8003b4c:	e019      	b.n	8003b82 <_ZN23ApplicationFontProvider7getFontEt+0x6e>
    case Typography::LARGE:
        // verdana_40_4bpp
        return const_cast<touchgfx::Font*>(TypedTextDatabase::getFonts()[1]);
 8003b4e:	f006 fa51 	bl	8009ff4 <_ZN17TypedTextDatabase8getFontsEv>
 8003b52:	4603      	mov	r3, r0
 8003b54:	685b      	ldr	r3, [r3, #4]
 8003b56:	e014      	b.n	8003b82 <_ZN23ApplicationFontProvider7getFontEt+0x6e>
    case Typography::SMALL:
        // verdanab_8_4bpp
        return const_cast<touchgfx::Font*>(TypedTextDatabase::getFonts()[2]);
 8003b58:	f006 fa4c 	bl	8009ff4 <_ZN17TypedTextDatabase8getFontsEv>
 8003b5c:	4603      	mov	r3, r0
 8003b5e:	689b      	ldr	r3, [r3, #8]
 8003b60:	e00f      	b.n	8003b82 <_ZN23ApplicationFontProvider7getFontEt+0x6e>
    case Typography::TYPOGRAPHY_00:
        // verdanab_10_4bpp
        return const_cast<touchgfx::Font*>(TypedTextDatabase::getFonts()[3]);
 8003b62:	f006 fa47 	bl	8009ff4 <_ZN17TypedTextDatabase8getFontsEv>
 8003b66:	4603      	mov	r3, r0
 8003b68:	68db      	ldr	r3, [r3, #12]
 8003b6a:	e00a      	b.n	8003b82 <_ZN23ApplicationFontProvider7getFontEt+0x6e>
    case Typography::TYPOGRAPHY_01:
        // verdana_20_4bpp
        return const_cast<touchgfx::Font*>(TypedTextDatabase::getFonts()[0]);
 8003b6c:	f006 fa42 	bl	8009ff4 <_ZN17TypedTextDatabase8getFontsEv>
 8003b70:	4603      	mov	r3, r0
 8003b72:	681b      	ldr	r3, [r3, #0]
 8003b74:	e005      	b.n	8003b82 <_ZN23ApplicationFontProvider7getFontEt+0x6e>
    case Typography::TYPOGRAPHY_02:
        // verdanab_12_4bpp
        return const_cast<touchgfx::Font*>(TypedTextDatabase::getFonts()[4]);
 8003b76:	f006 fa3d 	bl	8009ff4 <_ZN17TypedTextDatabase8getFontsEv>
 8003b7a:	4603      	mov	r3, r0
 8003b7c:	691b      	ldr	r3, [r3, #16]
 8003b7e:	e000      	b.n	8003b82 <_ZN23ApplicationFontProvider7getFontEt+0x6e>
    default:
        return 0;
 8003b80:	2300      	movs	r3, #0
    }
}
 8003b82:	4618      	mov	r0, r3
 8003b84:	3708      	adds	r7, #8
 8003b86:	46bd      	mov	sp, r7
 8003b88:	bd80      	pop	{r7, pc}
 8003b8a:	bf00      	nop

08003b8c <_ZN14BitmapDatabase11getInstanceEv>:
};

namespace BitmapDatabase
{
const touchgfx::Bitmap::BitmapData* getInstance()
{
 8003b8c:	b480      	push	{r7}
 8003b8e:	af00      	add	r7, sp, #0
    return bitmap_database;
 8003b90:	4b02      	ldr	r3, [pc, #8]	@ (8003b9c <_ZN14BitmapDatabase11getInstanceEv+0x10>)
}
 8003b92:	4618      	mov	r0, r3
 8003b94:	46bd      	mov	sp, r7
 8003b96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b9a:	4770      	bx	lr
 8003b9c:	0802cefc 	.word	0x0802cefc

08003ba0 <_ZN14BitmapDatabase15getInstanceSizeEv>:

uint16_t getInstanceSize()
{
 8003ba0:	b480      	push	{r7}
 8003ba2:	af00      	add	r7, sp, #0
    return (uint16_t)(sizeof(bitmap_database) / sizeof(touchgfx::Bitmap::BitmapData));
 8003ba4:	231a      	movs	r3, #26
}
 8003ba6:	4618      	mov	r0, r3
 8003ba8:	46bd      	mov	sp, r7
 8003baa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bae:	4770      	bx	lr

08003bb0 <_ZN8touchgfx4FontD1Ev>:
 */
class Font
{
public:
    /** Finalizes an instance of the Font class. */
    virtual ~Font()
 8003bb0:	b480      	push	{r7}
 8003bb2:	b083      	sub	sp, #12
 8003bb4:	af00      	add	r7, sp, #0
 8003bb6:	6078      	str	r0, [r7, #4]
    {
 8003bb8:	4a04      	ldr	r2, [pc, #16]	@ (8003bcc <_ZN8touchgfx4FontD1Ev+0x1c>)
 8003bba:	687b      	ldr	r3, [r7, #4]
 8003bbc:	601a      	str	r2, [r3, #0]
    }
 8003bbe:	687b      	ldr	r3, [r7, #4]
 8003bc0:	4618      	mov	r0, r3
 8003bc2:	370c      	adds	r7, #12
 8003bc4:	46bd      	mov	sp, r7
 8003bc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bca:	4770      	bx	lr
 8003bcc:	0802d490 	.word	0x0802d490

08003bd0 <_ZN8touchgfx4FontD0Ev>:
    virtual ~Font()
 8003bd0:	b580      	push	{r7, lr}
 8003bd2:	b082      	sub	sp, #8
 8003bd4:	af00      	add	r7, sp, #0
 8003bd6:	6078      	str	r0, [r7, #4]
    }
 8003bd8:	6878      	ldr	r0, [r7, #4]
 8003bda:	f7ff ffe9 	bl	8003bb0 <_ZN8touchgfx4FontD1Ev>
 8003bde:	2110      	movs	r1, #16
 8003be0:	6878      	ldr	r0, [r7, #4]
 8003be2:	f027 f800 	bl	802abe6 <_ZdlPvj>
 8003be6:	687b      	ldr	r3, [r7, #4]
 8003be8:	4618      	mov	r0, r3
 8003bea:	3708      	adds	r7, #8
 8003bec:	46bd      	mov	sp, r7
 8003bee:	bd80      	pop	{r7, pc}

08003bf0 <_ZNK8touchgfx4Font8getGlyphEt>:
     *
     * @return A pointer to the glyph node or null if the glyph was not found.
     *
     * @see TextProvider::getNextLigature
     */
    virtual const GlyphNode* getGlyph(Unicode::UnicodeChar unicode) const
 8003bf0:	b590      	push	{r4, r7, lr}
 8003bf2:	b087      	sub	sp, #28
 8003bf4:	af00      	add	r7, sp, #0
 8003bf6:	6078      	str	r0, [r7, #4]
 8003bf8:	460b      	mov	r3, r1
 8003bfa:	807b      	strh	r3, [r7, #2]
    {
        if (unicode == 0)
 8003bfc:	887b      	ldrh	r3, [r7, #2]
 8003bfe:	2b00      	cmp	r3, #0
 8003c00:	d101      	bne.n	8003c06 <_ZNK8touchgfx4Font8getGlyphEt+0x16>
        {
            return 0;
 8003c02:	2300      	movs	r3, #0
 8003c04:	e010      	b.n	8003c28 <_ZNK8touchgfx4Font8getGlyphEt+0x38>
        }
        const uint8_t* dummyPixelDataPointer = 0;
 8003c06:	2300      	movs	r3, #0
 8003c08:	613b      	str	r3, [r7, #16]
        uint8_t bitsPerPixelDummy = 0;
 8003c0a:	2300      	movs	r3, #0
 8003c0c:	73fb      	strb	r3, [r7, #15]
        const GlyphNode* glyph = getGlyph(unicode, dummyPixelDataPointer, bitsPerPixelDummy);
 8003c0e:	687b      	ldr	r3, [r7, #4]
 8003c10:	681b      	ldr	r3, [r3, #0]
 8003c12:	3308      	adds	r3, #8
 8003c14:	681c      	ldr	r4, [r3, #0]
 8003c16:	f107 030f 	add.w	r3, r7, #15
 8003c1a:	f107 0210 	add.w	r2, r7, #16
 8003c1e:	8879      	ldrh	r1, [r7, #2]
 8003c20:	6878      	ldr	r0, [r7, #4]
 8003c22:	47a0      	blx	r4
 8003c24:	6178      	str	r0, [r7, #20]
        return glyph;
 8003c26:	697b      	ldr	r3, [r7, #20]
    }
 8003c28:	4618      	mov	r0, r3
 8003c2a:	371c      	adds	r7, #28
 8003c2c:	46bd      	mov	sp, r7
 8003c2e:	bd90      	pop	{r4, r7, pc}

08003c30 <_ZNK8touchgfx4Font15getFallbackCharEv>:
     * used when no glyph is available for some character. If 0 (zero) is returned, there is
     * no default character.
     *
     * @return The default character for the typography in case no glyph is available.
     */
    virtual Unicode::UnicodeChar getFallbackChar() const
 8003c30:	b480      	push	{r7}
 8003c32:	b083      	sub	sp, #12
 8003c34:	af00      	add	r7, sp, #0
 8003c36:	6078      	str	r0, [r7, #4]
    {
        return fallbackCharacter;
 8003c38:	687b      	ldr	r3, [r7, #4]
 8003c3a:	895b      	ldrh	r3, [r3, #10]
    }
 8003c3c:	4618      	mov	r0, r3
 8003c3e:	370c      	adds	r7, #12
 8003c40:	46bd      	mov	sp, r7
 8003c42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c46:	4770      	bx	lr

08003c48 <_ZNK8touchgfx4Font15getEllipsisCharEv>:
     *
     * @return The ellipsis character for the typography.
     *
     * @see TextArea::setWideTextAction
     */
    virtual Unicode::UnicodeChar getEllipsisChar() const
 8003c48:	b480      	push	{r7}
 8003c4a:	b083      	sub	sp, #12
 8003c4c:	af00      	add	r7, sp, #0
 8003c4e:	6078      	str	r0, [r7, #4]
    {
        return ellipsisCharacter;
 8003c50:	687b      	ldr	r3, [r7, #4]
 8003c52:	899b      	ldrh	r3, [r3, #12]
    }
 8003c54:	4618      	mov	r0, r3
 8003c56:	370c      	adds	r7, #12
 8003c58:	46bd      	mov	sp, r7
 8003c5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c5e:	4770      	bx	lr

08003c60 <_ZNK8touchgfx4Font13getFontHeightEv>:
     * @return The height in pixels of this font.
     *
     * @note It is not sufficient to allocate text areas with this height. Use
     *       getMinimumTextHeight for this.
     */
    FORCE_INLINE_FUNCTION virtual uint16_t getFontHeight() const
 8003c60:	b480      	push	{r7}
 8003c62:	b083      	sub	sp, #12
 8003c64:	af00      	add	r7, sp, #0
 8003c66:	6078      	str	r0, [r7, #4]
    {
        return fontHeight;
 8003c68:	687b      	ldr	r3, [r7, #4]
 8003c6a:	889b      	ldrh	r3, [r3, #4]
    }
 8003c6c:	4618      	mov	r0, r3
 8003c6e:	370c      	adds	r7, #12
 8003c70:	46bd      	mov	sp, r7
 8003c72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c76:	4770      	bx	lr

08003c78 <_ZNK8touchgfx4Font20getMinimumTextHeightEv>:
     * account that certain characters (eg 'g') have pixels below the baseline, thus making
     * the text height larger than the font height.
     *
     * @return The minimum height needed for a text field that uses this font.
     */
    FORCE_INLINE_FUNCTION virtual uint16_t getMinimumTextHeight() const
 8003c78:	b480      	push	{r7}
 8003c7a:	b083      	sub	sp, #12
 8003c7c:	af00      	add	r7, sp, #0
 8003c7e:	6078      	str	r0, [r7, #4]
    {
        return fontHeight + pixelsBelowBaseline;
 8003c80:	687b      	ldr	r3, [r7, #4]
 8003c82:	889b      	ldrh	r3, [r3, #4]
 8003c84:	687a      	ldr	r2, [r7, #4]
 8003c86:	7992      	ldrb	r2, [r2, #6]
 8003c88:	4413      	add	r3, r2
 8003c8a:	b29b      	uxth	r3, r3
    }
 8003c8c:	4618      	mov	r0, r3
 8003c8e:	370c      	adds	r7, #12
 8003c90:	46bd      	mov	sp, r7
 8003c92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c96:	4770      	bx	lr

08003c98 <_ZNK8touchgfx4Font15getBitsPerPixelEv>:
    /**
     * Gets bits per pixel for this font.
     *
     * @return The number of bits used per pixel in this font.
     */
    FORCE_INLINE_FUNCTION virtual uint8_t getBitsPerPixel() const
 8003c98:	b480      	push	{r7}
 8003c9a:	b083      	sub	sp, #12
 8003c9c:	af00      	add	r7, sp, #0
 8003c9e:	6078      	str	r0, [r7, #4]
    {
        return bPerPixel;
 8003ca0:	687b      	ldr	r3, [r7, #4]
 8003ca2:	79db      	ldrb	r3, [r3, #7]
 8003ca4:	f3c3 0306 	ubfx	r3, r3, #0, #7
 8003ca8:	b2db      	uxtb	r3, r3
    }
 8003caa:	4618      	mov	r0, r3
 8003cac:	370c      	adds	r7, #12
 8003cae:	46bd      	mov	sp, r7
 8003cb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cb4:	4770      	bx	lr

08003cb6 <_ZNK8touchgfx4Font15getByteAlignRowEv>:
    /**
     * Are the glyphs saved with each glyph row byte aligned?
     *
     * @return True if each glyph row is stored byte aligned, false otherwise.
     */
    FORCE_INLINE_FUNCTION virtual uint8_t getByteAlignRow() const
 8003cb6:	b480      	push	{r7}
 8003cb8:	b083      	sub	sp, #12
 8003cba:	af00      	add	r7, sp, #0
 8003cbc:	6078      	str	r0, [r7, #4]
    {
        return bAlignRow;
 8003cbe:	687b      	ldr	r3, [r7, #4]
 8003cc0:	79db      	ldrb	r3, [r3, #7]
 8003cc2:	f3c3 13c0 	ubfx	r3, r3, #7, #1
 8003cc6:	b2db      	uxtb	r3, r3
    }
 8003cc8:	4618      	mov	r0, r3
 8003cca:	370c      	adds	r7, #12
 8003ccc:	46bd      	mov	sp, r7
 8003cce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cd2:	4770      	bx	lr

08003cd4 <_ZN8touchgfx9ConstFontD1Ev>:
 *
 * @see Font
 *
 * @note Pure virtual class. Create an application-specific implementation of getPixelData().
 */
class ConstFont : public Font
 8003cd4:	b580      	push	{r7, lr}
 8003cd6:	b082      	sub	sp, #8
 8003cd8:	af00      	add	r7, sp, #0
 8003cda:	6078      	str	r0, [r7, #4]
 8003cdc:	4a05      	ldr	r2, [pc, #20]	@ (8003cf4 <_ZN8touchgfx9ConstFontD1Ev+0x20>)
 8003cde:	687b      	ldr	r3, [r7, #4]
 8003ce0:	601a      	str	r2, [r3, #0]
 8003ce2:	687b      	ldr	r3, [r7, #4]
 8003ce4:	4618      	mov	r0, r3
 8003ce6:	f7ff ff63 	bl	8003bb0 <_ZN8touchgfx4FontD1Ev>
 8003cea:	687b      	ldr	r3, [r7, #4]
 8003cec:	4618      	mov	r0, r3
 8003cee:	3708      	adds	r7, #8
 8003cf0:	46bd      	mov	sp, r7
 8003cf2:	bd80      	pop	{r7, pc}
 8003cf4:	0802f2f8 	.word	0x0802f2f8

08003cf8 <_ZN8touchgfx9ConstFontD0Ev>:
 8003cf8:	b580      	push	{r7, lr}
 8003cfa:	b082      	sub	sp, #8
 8003cfc:	af00      	add	r7, sp, #0
 8003cfe:	6078      	str	r0, [r7, #4]
 8003d00:	6878      	ldr	r0, [r7, #4]
 8003d02:	f7ff ffe7 	bl	8003cd4 <_ZN8touchgfx9ConstFontD1Ev>
 8003d06:	2118      	movs	r1, #24
 8003d08:	6878      	ldr	r0, [r7, #4]
 8003d0a:	f026 ff6c 	bl	802abe6 <_ZdlPvj>
 8003d0e:	687b      	ldr	r3, [r7, #4]
 8003d10:	4618      	mov	r0, r3
 8003d12:	3708      	adds	r7, #8
 8003d14:	46bd      	mov	sp, r7
 8003d16:	bd80      	pop	{r7, pc}

08003d18 <_ZN8touchgfx13GeneratedFontD1Ev>:
 * An GeneratedFont has both glyph table and glyph data placed in a flash which
 * supports random access read (i.e. not a NAND flash)
 *
 * @see ConstFont
 */
class GeneratedFont : public ConstFont
 8003d18:	b580      	push	{r7, lr}
 8003d1a:	b082      	sub	sp, #8
 8003d1c:	af00      	add	r7, sp, #0
 8003d1e:	6078      	str	r0, [r7, #4]
 8003d20:	4a05      	ldr	r2, [pc, #20]	@ (8003d38 <_ZN8touchgfx13GeneratedFontD1Ev+0x20>)
 8003d22:	687b      	ldr	r3, [r7, #4]
 8003d24:	601a      	str	r2, [r3, #0]
 8003d26:	687b      	ldr	r3, [r7, #4]
 8003d28:	4618      	mov	r0, r3
 8003d2a:	f7ff ffd3 	bl	8003cd4 <_ZN8touchgfx9ConstFontD1Ev>
 8003d2e:	687b      	ldr	r3, [r7, #4]
 8003d30:	4618      	mov	r0, r3
 8003d32:	3708      	adds	r7, #8
 8003d34:	46bd      	mov	sp, r7
 8003d36:	bd80      	pop	{r7, pc}
 8003d38:	0802d2d8 	.word	0x0802d2d8

08003d3c <_ZN8touchgfx13GeneratedFontD0Ev>:
 8003d3c:	b580      	push	{r7, lr}
 8003d3e:	b082      	sub	sp, #8
 8003d40:	af00      	add	r7, sp, #0
 8003d42:	6078      	str	r0, [r7, #4]
 8003d44:	6878      	ldr	r0, [r7, #4]
 8003d46:	f7ff ffe7 	bl	8003d18 <_ZN8touchgfx13GeneratedFontD1Ev>
 8003d4a:	2128      	movs	r1, #40	@ 0x28
 8003d4c:	6878      	ldr	r0, [r7, #4]
 8003d4e:	f026 ff4a 	bl	802abe6 <_ZdlPvj>
 8003d52:	687b      	ldr	r3, [r7, #4]
 8003d54:	4618      	mov	r0, r3
 8003d56:	3708      	adds	r7, #8
 8003d58:	46bd      	mov	sp, r7
 8003d5a:	bd80      	pop	{r7, pc}

08003d5c <_ZN8touchgfx9TypedTextD1Ev>:
    virtual ~TypedText()
 8003d5c:	b480      	push	{r7}
 8003d5e:	b083      	sub	sp, #12
 8003d60:	af00      	add	r7, sp, #0
 8003d62:	6078      	str	r0, [r7, #4]
    {
 8003d64:	4a04      	ldr	r2, [pc, #16]	@ (8003d78 <_ZN8touchgfx9TypedTextD1Ev+0x1c>)
 8003d66:	687b      	ldr	r3, [r7, #4]
 8003d68:	601a      	str	r2, [r3, #0]
    }
 8003d6a:	687b      	ldr	r3, [r7, #4]
 8003d6c:	4618      	mov	r0, r3
 8003d6e:	370c      	adds	r7, #12
 8003d70:	46bd      	mov	sp, r7
 8003d72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d76:	4770      	bx	lr
 8003d78:	0802d10c 	.word	0x0802d10c

08003d7c <_ZN8touchgfx9TypedTextD0Ev>:
    virtual ~TypedText()
 8003d7c:	b580      	push	{r7, lr}
 8003d7e:	b082      	sub	sp, #8
 8003d80:	af00      	add	r7, sp, #0
 8003d82:	6078      	str	r0, [r7, #4]
    }
 8003d84:	6878      	ldr	r0, [r7, #4]
 8003d86:	f7ff ffe9 	bl	8003d5c <_ZN8touchgfx9TypedTextD1Ev>
 8003d8a:	2108      	movs	r1, #8
 8003d8c:	6878      	ldr	r0, [r7, #4]
 8003d8e:	f026 ff2a 	bl	802abe6 <_ZdlPvj>
 8003d92:	687b      	ldr	r3, [r7, #4]
 8003d94:	4618      	mov	r0, r3
 8003d96:	3708      	adds	r7, #8
 8003d98:	46bd      	mov	sp, r7
 8003d9a:	bd80      	pop	{r7, pc}

08003d9c <_ZnwjPv>:
#endif // __cpp_sized_deallocation
#endif // __cpp_aligned_new

// Default placement versions of operator new.
_GLIBCXX_NODISCARD inline void* operator new(std::size_t, void* __p) _GLIBCXX_USE_NOEXCEPT
{ return __p; }
 8003d9c:	b480      	push	{r7}
 8003d9e:	b083      	sub	sp, #12
 8003da0:	af00      	add	r7, sp, #0
 8003da2:	6078      	str	r0, [r7, #4]
 8003da4:	6039      	str	r1, [r7, #0]
 8003da6:	683b      	ldr	r3, [r7, #0]
 8003da8:	4618      	mov	r0, r3
 8003daa:	370c      	adds	r7, #12
 8003dac:	46bd      	mov	sp, r7
 8003dae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003db2:	4770      	bx	lr

08003db4 <_ZN8touchgfx4RectC1Essss>:
     * @param  x      The x coordinate.
     * @param  y      The y coordinate.
     * @param  width  The width.
     * @param  height The height.
     */
    Rect(int16_t x, int16_t y, int16_t width, int16_t height)
 8003db4:	b480      	push	{r7}
 8003db6:	b085      	sub	sp, #20
 8003db8:	af00      	add	r7, sp, #0
 8003dba:	60f8      	str	r0, [r7, #12]
 8003dbc:	4608      	mov	r0, r1
 8003dbe:	4611      	mov	r1, r2
 8003dc0:	461a      	mov	r2, r3
 8003dc2:	4603      	mov	r3, r0
 8003dc4:	817b      	strh	r3, [r7, #10]
 8003dc6:	460b      	mov	r3, r1
 8003dc8:	813b      	strh	r3, [r7, #8]
 8003dca:	4613      	mov	r3, r2
 8003dcc:	80fb      	strh	r3, [r7, #6]
        : x(x), y(y), width(width), height(height)
 8003dce:	68fb      	ldr	r3, [r7, #12]
 8003dd0:	897a      	ldrh	r2, [r7, #10]
 8003dd2:	801a      	strh	r2, [r3, #0]
 8003dd4:	68fb      	ldr	r3, [r7, #12]
 8003dd6:	893a      	ldrh	r2, [r7, #8]
 8003dd8:	805a      	strh	r2, [r3, #2]
 8003dda:	68fb      	ldr	r3, [r7, #12]
 8003ddc:	88fa      	ldrh	r2, [r7, #6]
 8003dde:	809a      	strh	r2, [r3, #4]
 8003de0:	68fb      	ldr	r3, [r7, #12]
 8003de2:	8b3a      	ldrh	r2, [r7, #24]
 8003de4:	80da      	strh	r2, [r3, #6]
    {
    }
 8003de6:	68fb      	ldr	r3, [r7, #12]
 8003de8:	4618      	mov	r0, r3
 8003dea:	3714      	adds	r7, #20
 8003dec:	46bd      	mov	sp, r7
 8003dee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003df2:	4770      	bx	lr

08003df4 <_ZN8touchgfx8DrawableC1Ev>:
 */
class Drawable
{
public:
    /** Initializes a new instance of the Drawable class. */
    Drawable()
 8003df4:	b580      	push	{r7, lr}
 8003df6:	b082      	sub	sp, #8
 8003df8:	af00      	add	r7, sp, #0
 8003dfa:	6078      	str	r0, [r7, #4]
          nextSibling(0),
          nextDrawChainElement(0),
          cachedAbsX(0),
          cachedAbsY(0),
          touchable(false),
          visible(true)
 8003dfc:	4a14      	ldr	r2, [pc, #80]	@ (8003e50 <_ZN8touchgfx8DrawableC1Ev+0x5c>)
 8003dfe:	687b      	ldr	r3, [r7, #4]
 8003e00:	601a      	str	r2, [r3, #0]
        : rect(),
 8003e02:	687b      	ldr	r3, [r7, #4]
 8003e04:	3304      	adds	r3, #4
 8003e06:	4618      	mov	r0, r3
 8003e08:	f7fe fcee 	bl	80027e8 <_ZN8touchgfx4RectC1Ev>
          cachedVisibleRect(),
 8003e0c:	687b      	ldr	r3, [r7, #4]
 8003e0e:	330c      	adds	r3, #12
 8003e10:	4618      	mov	r0, r3
 8003e12:	f7fe fce9 	bl	80027e8 <_ZN8touchgfx4RectC1Ev>
          parent(0),
 8003e16:	687b      	ldr	r3, [r7, #4]
 8003e18:	2200      	movs	r2, #0
 8003e1a:	615a      	str	r2, [r3, #20]
          nextSibling(0),
 8003e1c:	687b      	ldr	r3, [r7, #4]
 8003e1e:	2200      	movs	r2, #0
 8003e20:	619a      	str	r2, [r3, #24]
          nextDrawChainElement(0),
 8003e22:	687b      	ldr	r3, [r7, #4]
 8003e24:	2200      	movs	r2, #0
 8003e26:	61da      	str	r2, [r3, #28]
          cachedAbsX(0),
 8003e28:	687b      	ldr	r3, [r7, #4]
 8003e2a:	2200      	movs	r2, #0
 8003e2c:	841a      	strh	r2, [r3, #32]
          cachedAbsY(0),
 8003e2e:	687b      	ldr	r3, [r7, #4]
 8003e30:	2200      	movs	r2, #0
 8003e32:	845a      	strh	r2, [r3, #34]	@ 0x22
          touchable(false),
 8003e34:	687b      	ldr	r3, [r7, #4]
 8003e36:	2200      	movs	r2, #0
 8003e38:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
          visible(true)
 8003e3c:	687b      	ldr	r3, [r7, #4]
 8003e3e:	2201      	movs	r2, #1
 8003e40:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
    {
    }
 8003e44:	687b      	ldr	r3, [r7, #4]
 8003e46:	4618      	mov	r0, r3
 8003e48:	3708      	adds	r7, #8
 8003e4a:	46bd      	mov	sp, r7
 8003e4c:	bd80      	pop	{r7, pc}
 8003e4e:	bf00      	nop
 8003e50:	0802f294 	.word	0x0802f294

08003e54 <_ZN8touchgfx8DrawableD1Ev>:

    /** Finalizes an instance of the Drawable class. */
    virtual ~Drawable()
 8003e54:	b480      	push	{r7}
 8003e56:	b083      	sub	sp, #12
 8003e58:	af00      	add	r7, sp, #0
 8003e5a:	6078      	str	r0, [r7, #4]
    {
 8003e5c:	4a04      	ldr	r2, [pc, #16]	@ (8003e70 <_ZN8touchgfx8DrawableD1Ev+0x1c>)
 8003e5e:	687b      	ldr	r3, [r7, #4]
 8003e60:	601a      	str	r2, [r3, #0]
    }
 8003e62:	687b      	ldr	r3, [r7, #4]
 8003e64:	4618      	mov	r0, r3
 8003e66:	370c      	adds	r7, #12
 8003e68:	46bd      	mov	sp, r7
 8003e6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e6e:	4770      	bx	lr
 8003e70:	0802f294 	.word	0x0802f294

08003e74 <_ZN8touchgfx8DrawableD0Ev>:
    virtual ~Drawable()
 8003e74:	b580      	push	{r7, lr}
 8003e76:	b082      	sub	sp, #8
 8003e78:	af00      	add	r7, sp, #0
 8003e7a:	6078      	str	r0, [r7, #4]
    }
 8003e7c:	6878      	ldr	r0, [r7, #4]
 8003e7e:	f7ff ffe9 	bl	8003e54 <_ZN8touchgfx8DrawableD1Ev>
 8003e82:	2128      	movs	r1, #40	@ 0x28
 8003e84:	6878      	ldr	r0, [r7, #4]
 8003e86:	f026 feae 	bl	802abe6 <_ZdlPvj>
 8003e8a:	687b      	ldr	r3, [r7, #4]
 8003e8c:	4618      	mov	r0, r3
 8003e8e:	3708      	adds	r7, #8
 8003e90:	46bd      	mov	sp, r7
 8003e92:	bd80      	pop	{r7, pc}

08003e94 <_ZN8touchgfx8Drawable13getFirstChildEv>:
     * Function for obtaining the first child of this drawable if any.
     *
     * @return A pointer on the first child drawable if any.
     * @see Container::getFirstChild
     */
    virtual Drawable* getFirstChild()
 8003e94:	b480      	push	{r7}
 8003e96:	b083      	sub	sp, #12
 8003e98:	af00      	add	r7, sp, #0
 8003e9a:	6078      	str	r0, [r7, #4]
    {
        return 0;
 8003e9c:	2300      	movs	r3, #0
    }
 8003e9e:	4618      	mov	r0, r3
 8003ea0:	370c      	adds	r7, #12
 8003ea2:	46bd      	mov	sp, r7
 8003ea4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ea8:	4770      	bx	lr

08003eaa <_ZNK8touchgfx8Drawable7getRectEv>:
     * @return The rectangle this Drawable covers expressed in coordinates relative to its
     *         parent.
     *
     * @see getAbsoluteRect
     */
    const Rect& getRect() const
 8003eaa:	b480      	push	{r7}
 8003eac:	b083      	sub	sp, #12
 8003eae:	af00      	add	r7, sp, #0
 8003eb0:	6078      	str	r0, [r7, #4]
    {
        return rect;
 8003eb2:	687b      	ldr	r3, [r7, #4]
 8003eb4:	3304      	adds	r3, #4
    }
 8003eb6:	4618      	mov	r0, r3
 8003eb8:	370c      	adds	r7, #12
 8003eba:	46bd      	mov	sp, r7
 8003ebc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ec0:	4770      	bx	lr

08003ec2 <_ZN8touchgfx8Drawable11setPositionEssss>:
     * @param  width  The width of this Drawable.
     * @param  height The height of this Drawable.
     *
     * @note For most Drawable widgets, changing this does normally not automatically yield a redraw.
     */
    void setPosition(int16_t x, int16_t y, int16_t width, int16_t height)
 8003ec2:	b580      	push	{r7, lr}
 8003ec4:	b084      	sub	sp, #16
 8003ec6:	af00      	add	r7, sp, #0
 8003ec8:	60f8      	str	r0, [r7, #12]
 8003eca:	4608      	mov	r0, r1
 8003ecc:	4611      	mov	r1, r2
 8003ece:	461a      	mov	r2, r3
 8003ed0:	4603      	mov	r3, r0
 8003ed2:	817b      	strh	r3, [r7, #10]
 8003ed4:	460b      	mov	r3, r1
 8003ed6:	813b      	strh	r3, [r7, #8]
 8003ed8:	4613      	mov	r3, r2
 8003eda:	80fb      	strh	r3, [r7, #6]
    {
        setXY(x, y);
 8003edc:	f9b7 2008 	ldrsh.w	r2, [r7, #8]
 8003ee0:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 8003ee4:	4619      	mov	r1, r3
 8003ee6:	68f8      	ldr	r0, [r7, #12]
 8003ee8:	f000 f844 	bl	8003f74 <_ZN8touchgfx8Drawable5setXYEss>
        setWidthHeight(width, height);
 8003eec:	f9b7 2018 	ldrsh.w	r2, [r7, #24]
 8003ef0:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8003ef4:	4619      	mov	r1, r3
 8003ef6:	68f8      	ldr	r0, [r7, #12]
 8003ef8:	f000 f898 	bl	800402c <_ZN8touchgfx8Drawable14setWidthHeightEss>
    }
 8003efc:	bf00      	nop
 8003efe:	3710      	adds	r7, #16
 8003f00:	46bd      	mov	sp, r7
 8003f02:	bd80      	pop	{r7, pc}

08003f04 <_ZNK8touchgfx8Drawable4getYEv>:
    /**
     * Gets the y coordinate of this Drawable, relative to its parent.
     *
     * @return The y value, relative to the parent.
     */
    int16_t getY() const
 8003f04:	b480      	push	{r7}
 8003f06:	b083      	sub	sp, #12
 8003f08:	af00      	add	r7, sp, #0
 8003f0a:	6078      	str	r0, [r7, #4]
    {
        return rect.y;
 8003f0c:	687b      	ldr	r3, [r7, #4]
 8003f0e:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
    }
 8003f12:	4618      	mov	r0, r3
 8003f14:	370c      	adds	r7, #12
 8003f16:	46bd      	mov	sp, r7
 8003f18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f1c:	4770      	bx	lr

08003f1e <_ZNK8touchgfx8Drawable9getHeightEv>:
    /**
     * Gets the height of this Drawable.
     *
     * @return The height of this Drawable.
     */
    int16_t getHeight() const
 8003f1e:	b480      	push	{r7}
 8003f20:	b083      	sub	sp, #12
 8003f22:	af00      	add	r7, sp, #0
 8003f24:	6078      	str	r0, [r7, #4]
    {
        return rect.height;
 8003f26:	687b      	ldr	r3, [r7, #4]
 8003f28:	f9b3 300a 	ldrsh.w	r3, [r3, #10]
    }
 8003f2c:	4618      	mov	r0, r3
 8003f2e:	370c      	adds	r7, #12
 8003f30:	46bd      	mov	sp, r7
 8003f32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f36:	4770      	bx	lr

08003f38 <_ZN8touchgfx8Drawable4setXEs>:
     *
     * @param  x The new x value, relative to the parent. A negative value is allowed.
     *
     * @note For most Drawable widgets, changing this does normally not automatically yield a redraw.
     */
    virtual void setX(int16_t x)
 8003f38:	b480      	push	{r7}
 8003f3a:	b083      	sub	sp, #12
 8003f3c:	af00      	add	r7, sp, #0
 8003f3e:	6078      	str	r0, [r7, #4]
 8003f40:	460b      	mov	r3, r1
 8003f42:	807b      	strh	r3, [r7, #2]
    {
        rect.x = x;
 8003f44:	687b      	ldr	r3, [r7, #4]
 8003f46:	887a      	ldrh	r2, [r7, #2]
 8003f48:	809a      	strh	r2, [r3, #4]
    }
 8003f4a:	bf00      	nop
 8003f4c:	370c      	adds	r7, #12
 8003f4e:	46bd      	mov	sp, r7
 8003f50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f54:	4770      	bx	lr

08003f56 <_ZN8touchgfx8Drawable4setYEs>:
     *
     * @param  y The new y value, relative to the parent. A negative value is allowed.
     *
     * @note For most Drawable widgets, changing this does normally not automatically yield a redraw.
     */
    virtual void setY(int16_t y)
 8003f56:	b480      	push	{r7}
 8003f58:	b083      	sub	sp, #12
 8003f5a:	af00      	add	r7, sp, #0
 8003f5c:	6078      	str	r0, [r7, #4]
 8003f5e:	460b      	mov	r3, r1
 8003f60:	807b      	strh	r3, [r7, #2]
    {
        rect.y = y;
 8003f62:	687b      	ldr	r3, [r7, #4]
 8003f64:	887a      	ldrh	r2, [r7, #2]
 8003f66:	80da      	strh	r2, [r3, #6]
    }
 8003f68:	bf00      	nop
 8003f6a:	370c      	adds	r7, #12
 8003f6c:	46bd      	mov	sp, r7
 8003f6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f72:	4770      	bx	lr

08003f74 <_ZN8touchgfx8Drawable5setXYEss>:
     *
     * @see moveTo
     *
     * @note For most Drawable widgets, changing this does normally not automatically yield a redraw.
     */
    void setXY(int16_t x, int16_t y)
 8003f74:	b580      	push	{r7, lr}
 8003f76:	b082      	sub	sp, #8
 8003f78:	af00      	add	r7, sp, #0
 8003f7a:	6078      	str	r0, [r7, #4]
 8003f7c:	460b      	mov	r3, r1
 8003f7e:	807b      	strh	r3, [r7, #2]
 8003f80:	4613      	mov	r3, r2
 8003f82:	803b      	strh	r3, [r7, #0]
    {
        setX(x);
 8003f84:	687b      	ldr	r3, [r7, #4]
 8003f86:	681b      	ldr	r3, [r3, #0]
 8003f88:	332c      	adds	r3, #44	@ 0x2c
 8003f8a:	681b      	ldr	r3, [r3, #0]
 8003f8c:	f9b7 2002 	ldrsh.w	r2, [r7, #2]
 8003f90:	4611      	mov	r1, r2
 8003f92:	6878      	ldr	r0, [r7, #4]
 8003f94:	4798      	blx	r3
        setY(y);
 8003f96:	687b      	ldr	r3, [r7, #4]
 8003f98:	681b      	ldr	r3, [r3, #0]
 8003f9a:	3330      	adds	r3, #48	@ 0x30
 8003f9c:	681b      	ldr	r3, [r3, #0]
 8003f9e:	f9b7 2000 	ldrsh.w	r2, [r7]
 8003fa2:	4611      	mov	r1, r2
 8003fa4:	6878      	ldr	r0, [r7, #4]
 8003fa6:	4798      	blx	r3
    }
 8003fa8:	bf00      	nop
 8003faa:	3708      	adds	r7, #8
 8003fac:	46bd      	mov	sp, r7
 8003fae:	bd80      	pop	{r7, pc}

08003fb0 <_ZN8touchgfx8Drawable8setWidthEs>:
     *
     * @param  width The new width.
     *
     * @note For most Drawable widgets, changing this does normally not automatically yield a redraw.
     */
    virtual void setWidth(int16_t width)
 8003fb0:	b480      	push	{r7}
 8003fb2:	b083      	sub	sp, #12
 8003fb4:	af00      	add	r7, sp, #0
 8003fb6:	6078      	str	r0, [r7, #4]
 8003fb8:	460b      	mov	r3, r1
 8003fba:	807b      	strh	r3, [r7, #2]
    {
        rect.width = width;
 8003fbc:	687b      	ldr	r3, [r7, #4]
 8003fbe:	887a      	ldrh	r2, [r7, #2]
 8003fc0:	811a      	strh	r2, [r3, #8]
    }
 8003fc2:	bf00      	nop
 8003fc4:	370c      	adds	r7, #12
 8003fc6:	46bd      	mov	sp, r7
 8003fc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fcc:	4770      	bx	lr

08003fce <_ZN8touchgfx8Drawable9setHeightEs>:
     *
     * @param  height The new height.
     *
     * @note For most Drawable widgets, changing this does normally not automatically yield a redraw.
     */
    virtual void setHeight(int16_t height)
 8003fce:	b480      	push	{r7}
 8003fd0:	b083      	sub	sp, #12
 8003fd2:	af00      	add	r7, sp, #0
 8003fd4:	6078      	str	r0, [r7, #4]
 8003fd6:	460b      	mov	r3, r1
 8003fd8:	807b      	strh	r3, [r7, #2]
    {
        rect.height = height;
 8003fda:	687b      	ldr	r3, [r7, #4]
 8003fdc:	887a      	ldrh	r2, [r7, #2]
 8003fde:	815a      	strh	r2, [r3, #10]
    }
 8003fe0:	bf00      	nop
 8003fe2:	370c      	adds	r7, #12
 8003fe4:	46bd      	mov	sp, r7
 8003fe6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fea:	4770      	bx	lr

08003fec <_ZN8touchgfx8Drawable20childGeometryChangedEv>:
    /**
     * This function can be called on parent nodes to signal that the size or position of
     * one or more of its children has changed. Currently only used in ScrollableContainer
     * to redraw scrollbars when the size of the scrolling contents changes.
     */
    virtual void childGeometryChanged()
 8003fec:	b480      	push	{r7}
 8003fee:	b083      	sub	sp, #12
 8003ff0:	af00      	add	r7, sp, #0
 8003ff2:	6078      	str	r0, [r7, #4]
    {
    }
 8003ff4:	bf00      	nop
 8003ff6:	370c      	adds	r7, #12
 8003ff8:	46bd      	mov	sp, r7
 8003ffa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ffe:	4770      	bx	lr

08004000 <_ZN8touchgfx8Drawable16handleClickEventERKNS_10ClickEventE>:
     * ignores the event. The event is only received if the Drawable is touchable and
     * visible.
     *
     * @param  event The ClickEvent received from the HAL.
     */
    virtual void handleClickEvent(const ClickEvent& event)
 8004000:	b480      	push	{r7}
 8004002:	b083      	sub	sp, #12
 8004004:	af00      	add	r7, sp, #0
 8004006:	6078      	str	r0, [r7, #4]
 8004008:	6039      	str	r1, [r7, #0]
    {
    }
 800400a:	bf00      	nop
 800400c:	370c      	adds	r7, #12
 800400e:	46bd      	mov	sp, r7
 8004010:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004014:	4770      	bx	lr

08004016 <_ZN8touchgfx8Drawable18handleGestureEventERKNS_12GestureEventE>:
     * ignores the event. The event is only received if the Drawable is touchable and
     * visible.
     *
     * @param  event The GestureEvent received from the HAL.
     */
    virtual void handleGestureEvent(const GestureEvent& event)
 8004016:	b480      	push	{r7}
 8004018:	b083      	sub	sp, #12
 800401a:	af00      	add	r7, sp, #0
 800401c:	6078      	str	r0, [r7, #4]
 800401e:	6039      	str	r1, [r7, #0]
    {
    }
 8004020:	bf00      	nop
 8004022:	370c      	adds	r7, #12
 8004024:	46bd      	mov	sp, r7
 8004026:	f85d 7b04 	ldr.w	r7, [sp], #4
 800402a:	4770      	bx	lr

0800402c <_ZN8touchgfx8Drawable14setWidthHeightEss>:
     * coordinates).
     *
     * @param  width  The width.
     * @param  height The height.
     */
    void setWidthHeight(int16_t width, int16_t height)
 800402c:	b580      	push	{r7, lr}
 800402e:	b082      	sub	sp, #8
 8004030:	af00      	add	r7, sp, #0
 8004032:	6078      	str	r0, [r7, #4]
 8004034:	460b      	mov	r3, r1
 8004036:	807b      	strh	r3, [r7, #2]
 8004038:	4613      	mov	r3, r2
 800403a:	803b      	strh	r3, [r7, #0]
    {
        setWidth(width);
 800403c:	687b      	ldr	r3, [r7, #4]
 800403e:	681b      	ldr	r3, [r3, #0]
 8004040:	3334      	adds	r3, #52	@ 0x34
 8004042:	681b      	ldr	r3, [r3, #0]
 8004044:	f9b7 2002 	ldrsh.w	r2, [r7, #2]
 8004048:	4611      	mov	r1, r2
 800404a:	6878      	ldr	r0, [r7, #4]
 800404c:	4798      	blx	r3
        setHeight(height);
 800404e:	687b      	ldr	r3, [r7, #4]
 8004050:	681b      	ldr	r3, [r3, #0]
 8004052:	3338      	adds	r3, #56	@ 0x38
 8004054:	681b      	ldr	r3, [r3, #0]
 8004056:	f9b7 2000 	ldrsh.w	r2, [r7]
 800405a:	4611      	mov	r1, r2
 800405c:	6878      	ldr	r0, [r7, #4]
 800405e:	4798      	blx	r3
    }
 8004060:	bf00      	nop
 8004062:	3708      	adds	r7, #8
 8004064:	46bd      	mov	sp, r7
 8004066:	bd80      	pop	{r7, pc}

08004068 <_ZN8touchgfx8Drawable15handleDragEventERKNS_9DragEventE>:
     * ignores the event. The event is only received if the drawable is touchable and
     * visible.
     *
     * @param  event The DragEvent received from the HAL.
     */
    virtual void handleDragEvent(const DragEvent& event)
 8004068:	b480      	push	{r7}
 800406a:	b083      	sub	sp, #12
 800406c:	af00      	add	r7, sp, #0
 800406e:	6078      	str	r0, [r7, #4]
 8004070:	6039      	str	r1, [r7, #0]
    {
    }
 8004072:	bf00      	nop
 8004074:	370c      	adds	r7, #12
 8004076:	46bd      	mov	sp, r7
 8004078:	f85d 7b04 	ldr.w	r7, [sp], #4
 800407c:	4770      	bx	lr

0800407e <_ZN8touchgfx8Drawable15handleTickEventEv>:
     * Called periodically by the framework if the Drawable instance has subscribed to timer
     * ticks.
     *
     * @see Application::registerTimerWidget
     */
    virtual void handleTickEvent()
 800407e:	b480      	push	{r7}
 8004080:	b083      	sub	sp, #12
 8004082:	af00      	add	r7, sp, #0
 8004084:	6078      	str	r0, [r7, #4]
    {
    }
 8004086:	bf00      	nop
 8004088:	370c      	adds	r7, #12
 800408a:	46bd      	mov	sp, r7
 800408c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004090:	4770      	bx	lr

08004092 <_ZNK8touchgfx8Drawable9isVisibleEv>:
     *
     * @return true if the Drawable is visible.
     *
     * @see setVisible
     */
    bool isVisible() const
 8004092:	b480      	push	{r7}
 8004094:	b083      	sub	sp, #12
 8004096:	af00      	add	r7, sp, #0
 8004098:	6078      	str	r0, [r7, #4]
    {
        return visible;
 800409a:	687b      	ldr	r3, [r7, #4]
 800409c:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
    }
 80040a0:	4618      	mov	r0, r3
 80040a2:	370c      	adds	r7, #12
 80040a4:	46bd      	mov	sp, r7
 80040a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040aa:	4770      	bx	lr

080040ac <_ZNK8touchgfx8Drawable11isTouchableEv>:
     *
     * @return True if touch events are received.
     *
     * @see setTouchable
     */
    bool isTouchable() const
 80040ac:	b480      	push	{r7}
 80040ae:	b083      	sub	sp, #12
 80040b0:	af00      	add	r7, sp, #0
 80040b2:	6078      	str	r0, [r7, #4]
    {
        return touchable;
 80040b4:	687b      	ldr	r3, [r7, #4]
 80040b6:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
    }
 80040ba:	4618      	mov	r0, r3
 80040bc:	370c      	adds	r7, #12
 80040be:	46bd      	mov	sp, r7
 80040c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040c4:	4770      	bx	lr

080040c6 <_ZN8touchgfx8Drawable6moveToEss>:
     *
     * @see moveRelative, setXY
     *
     * @note Will redraw the appropriate areas of the screen.
     */
    virtual void moveTo(int16_t x, int16_t y)
 80040c6:	b580      	push	{r7, lr}
 80040c8:	b082      	sub	sp, #8
 80040ca:	af00      	add	r7, sp, #0
 80040cc:	6078      	str	r0, [r7, #4]
 80040ce:	460b      	mov	r3, r1
 80040d0:	807b      	strh	r3, [r7, #2]
 80040d2:	4613      	mov	r3, r2
 80040d4:	803b      	strh	r3, [r7, #0]
    {
        moveRelative(x - rect.x, y - rect.y);
 80040d6:	687b      	ldr	r3, [r7, #4]
 80040d8:	681b      	ldr	r3, [r3, #0]
 80040da:	3350      	adds	r3, #80	@ 0x50
 80040dc:	681b      	ldr	r3, [r3, #0]
 80040de:	8879      	ldrh	r1, [r7, #2]
 80040e0:	687a      	ldr	r2, [r7, #4]
 80040e2:	f9b2 2004 	ldrsh.w	r2, [r2, #4]
 80040e6:	b292      	uxth	r2, r2
 80040e8:	1a8a      	subs	r2, r1, r2
 80040ea:	b292      	uxth	r2, r2
 80040ec:	b210      	sxth	r0, r2
 80040ee:	8839      	ldrh	r1, [r7, #0]
 80040f0:	687a      	ldr	r2, [r7, #4]
 80040f2:	f9b2 2006 	ldrsh.w	r2, [r2, #6]
 80040f6:	b292      	uxth	r2, r2
 80040f8:	1a8a      	subs	r2, r1, r2
 80040fa:	b292      	uxth	r2, r2
 80040fc:	b212      	sxth	r2, r2
 80040fe:	4601      	mov	r1, r0
 8004100:	6878      	ldr	r0, [r7, #4]
 8004102:	4798      	blx	r3
    }
 8004104:	bf00      	nop
 8004106:	3708      	adds	r7, #8
 8004108:	46bd      	mov	sp, r7
 800410a:	bd80      	pop	{r7, pc}

0800410c <_ZN8touchgfx8Drawable19resetDrawChainCacheEv>:
     *
     * Reset cached coordinate data.
     *
     * @note For TouchGFX internal use only.
     */
    void resetDrawChainCache()
 800410c:	b480      	push	{r7}
 800410e:	b083      	sub	sp, #12
 8004110:	af00      	add	r7, sp, #0
 8004112:	6078      	str	r0, [r7, #4]
    {
        // Resetting the cached indicators
        cachedVisibleRect.x = UNCACHED_INDICATOR;
 8004114:	687b      	ldr	r3, [r7, #4]
 8004116:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800411a:	819a      	strh	r2, [r3, #12]
        cachedAbsX = UNCACHED_INDICATOR;
 800411c:	687b      	ldr	r3, [r7, #4]
 800411e:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8004122:	841a      	strh	r2, [r3, #32]
        cachedAbsY = UNCACHED_INDICATOR;
 8004124:	687b      	ldr	r3, [r7, #4]
 8004126:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800412a:	845a      	strh	r2, [r3, #34]	@ 0x22
    }
 800412c:	bf00      	nop
 800412e:	370c      	adds	r7, #12
 8004130:	46bd      	mov	sp, r7
 8004132:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004136:	4770      	bx	lr

08004138 <_ZN8touchgfx8Drawable14setupDrawChainERKNS_4RectEPPS0_>:
     * @param          invalidatedArea     Include drawables that intersect with this area only.
     * @param [in,out] nextPreviousElement Modifiable element in linked list.
     *
     * @note For TouchGFX internal use only.
     */
    virtual void setupDrawChain(const Rect& invalidatedArea, Drawable** nextPreviousElement)
 8004138:	b580      	push	{r7, lr}
 800413a:	b084      	sub	sp, #16
 800413c:	af00      	add	r7, sp, #0
 800413e:	60f8      	str	r0, [r7, #12]
 8004140:	60b9      	str	r1, [r7, #8]
 8004142:	607a      	str	r2, [r7, #4]
    {
        resetDrawChainCache();
 8004144:	68f8      	ldr	r0, [r7, #12]
 8004146:	f7ff ffe1 	bl	800410c <_ZN8touchgfx8Drawable19resetDrawChainCacheEv>
        nextDrawChainElement = *nextPreviousElement;
 800414a:	687b      	ldr	r3, [r7, #4]
 800414c:	681a      	ldr	r2, [r3, #0]
 800414e:	68fb      	ldr	r3, [r7, #12]
 8004150:	61da      	str	r2, [r3, #28]
        *nextPreviousElement = this;
 8004152:	687b      	ldr	r3, [r7, #4]
 8004154:	68fa      	ldr	r2, [r7, #12]
 8004156:	601a      	str	r2, [r3, #0]
    }
 8004158:	bf00      	nop
 800415a:	3710      	adds	r7, #16
 800415c:	46bd      	mov	sp, r7
 800415e:	bd80      	pop	{r7, pc}

08004160 <_ZN8touchgfx3HAL3lcdEv>:
    static LCD& lcd()
 8004160:	b480      	push	{r7}
 8004162:	af00      	add	r7, sp, #0
        if (instance->useAuxiliaryLCD && instance->auxiliaryLCD)
 8004164:	4b0b      	ldr	r3, [pc, #44]	@ (8004194 <_ZN8touchgfx3HAL3lcdEv+0x34>)
 8004166:	681b      	ldr	r3, [r3, #0]
 8004168:	f893 3076 	ldrb.w	r3, [r3, #118]	@ 0x76
 800416c:	2b00      	cmp	r3, #0
 800416e:	d008      	beq.n	8004182 <_ZN8touchgfx3HAL3lcdEv+0x22>
 8004170:	4b08      	ldr	r3, [pc, #32]	@ (8004194 <_ZN8touchgfx3HAL3lcdEv+0x34>)
 8004172:	681b      	ldr	r3, [r3, #0]
 8004174:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004176:	2b00      	cmp	r3, #0
 8004178:	d003      	beq.n	8004182 <_ZN8touchgfx3HAL3lcdEv+0x22>
            return *instance->auxiliaryLCD;
 800417a:	4b06      	ldr	r3, [pc, #24]	@ (8004194 <_ZN8touchgfx3HAL3lcdEv+0x34>)
 800417c:	681b      	ldr	r3, [r3, #0]
 800417e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004180:	e002      	b.n	8004188 <_ZN8touchgfx3HAL3lcdEv+0x28>
        return instance->lcdRef;
 8004182:	4b04      	ldr	r3, [pc, #16]	@ (8004194 <_ZN8touchgfx3HAL3lcdEv+0x34>)
 8004184:	681b      	ldr	r3, [r3, #0]
 8004186:	689b      	ldr	r3, [r3, #8]
    }
 8004188:	4618      	mov	r0, r3
 800418a:	46bd      	mov	sp, r7
 800418c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004190:	4770      	bx	lr
 8004192:	bf00      	nop
 8004194:	2400b884 	.word	0x2400b884

08004198 <_ZN8touchgfx10TransitionC1Ev>:
 */
class Transition
{
public:
    /** Initializes a new instance of the Transition class. */
    Transition()
 8004198:	b480      	push	{r7}
 800419a:	b083      	sub	sp, #12
 800419c:	af00      	add	r7, sp, #0
 800419e:	6078      	str	r0, [r7, #4]
        : screenContainer(0), done(false)
 80041a0:	4a07      	ldr	r2, [pc, #28]	@ (80041c0 <_ZN8touchgfx10TransitionC1Ev+0x28>)
 80041a2:	687b      	ldr	r3, [r7, #4]
 80041a4:	601a      	str	r2, [r3, #0]
 80041a6:	687b      	ldr	r3, [r7, #4]
 80041a8:	2200      	movs	r2, #0
 80041aa:	605a      	str	r2, [r3, #4]
 80041ac:	687b      	ldr	r3, [r7, #4]
 80041ae:	2200      	movs	r2, #0
 80041b0:	721a      	strb	r2, [r3, #8]
    {
    }
 80041b2:	687b      	ldr	r3, [r7, #4]
 80041b4:	4618      	mov	r0, r3
 80041b6:	370c      	adds	r7, #12
 80041b8:	46bd      	mov	sp, r7
 80041ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041be:	4770      	bx	lr
 80041c0:	0802d2b4 	.word	0x0802d2b4

080041c4 <_ZN8touchgfx10TransitionD1Ev>:

    /** Finalizes an instance of the Transition class. */
    virtual ~Transition()
 80041c4:	b480      	push	{r7}
 80041c6:	b083      	sub	sp, #12
 80041c8:	af00      	add	r7, sp, #0
 80041ca:	6078      	str	r0, [r7, #4]
    {
 80041cc:	4a04      	ldr	r2, [pc, #16]	@ (80041e0 <_ZN8touchgfx10TransitionD1Ev+0x1c>)
 80041ce:	687b      	ldr	r3, [r7, #4]
 80041d0:	601a      	str	r2, [r3, #0]
    }
 80041d2:	687b      	ldr	r3, [r7, #4]
 80041d4:	4618      	mov	r0, r3
 80041d6:	370c      	adds	r7, #12
 80041d8:	46bd      	mov	sp, r7
 80041da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041de:	4770      	bx	lr
 80041e0:	0802d2b4 	.word	0x0802d2b4

080041e4 <_ZN8touchgfx10TransitionD0Ev>:
    virtual ~Transition()
 80041e4:	b580      	push	{r7, lr}
 80041e6:	b082      	sub	sp, #8
 80041e8:	af00      	add	r7, sp, #0
 80041ea:	6078      	str	r0, [r7, #4]
    }
 80041ec:	6878      	ldr	r0, [r7, #4]
 80041ee:	f7ff ffe9 	bl	80041c4 <_ZN8touchgfx10TransitionD1Ev>
 80041f2:	210c      	movs	r1, #12
 80041f4:	6878      	ldr	r0, [r7, #4]
 80041f6:	f026 fcf6 	bl	802abe6 <_ZdlPvj>
 80041fa:	687b      	ldr	r3, [r7, #4]
 80041fc:	4618      	mov	r0, r3
 80041fe:	3708      	adds	r7, #8
 8004200:	46bd      	mov	sp, r7
 8004202:	bd80      	pop	{r7, pc}

08004204 <_ZN8touchgfx10Transition15handleTickEventEv>:

    /** Called for every tick when transitioning. */
    virtual void handleTickEvent()
 8004204:	b480      	push	{r7}
 8004206:	b083      	sub	sp, #12
 8004208:	af00      	add	r7, sp, #0
 800420a:	6078      	str	r0, [r7, #4]
    {
    }
 800420c:	bf00      	nop
 800420e:	370c      	adds	r7, #12
 8004210:	46bd      	mov	sp, r7
 8004212:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004216:	4770      	bx	lr

08004218 <_ZN8touchgfx10Transition8tearDownEv>:

    /**
     * Tears down the Animation. Called before the destructor is called, when the
     * application changes the transition.
     */
    virtual void tearDown()
 8004218:	b480      	push	{r7}
 800421a:	b083      	sub	sp, #12
 800421c:	af00      	add	r7, sp, #0
 800421e:	6078      	str	r0, [r7, #4]
    {
    }
 8004220:	bf00      	nop
 8004222:	370c      	adds	r7, #12
 8004224:	46bd      	mov	sp, r7
 8004226:	f85d 7b04 	ldr.w	r7, [sp], #4
 800422a:	4770      	bx	lr

0800422c <_ZN8touchgfx10Transition4initEv>:

    /**
     * Initializes the transition. Called after the constructor is called, when the
     * application changes the transition.
     */
    virtual void init()
 800422c:	b480      	push	{r7}
 800422e:	b083      	sub	sp, #12
 8004230:	af00      	add	r7, sp, #0
 8004232:	6078      	str	r0, [r7, #4]
    {
    }
 8004234:	bf00      	nop
 8004236:	370c      	adds	r7, #12
 8004238:	46bd      	mov	sp, r7
 800423a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800423e:	4770      	bx	lr

08004240 <_ZN8touchgfx10Transition10invalidateEv>:
    /**
     * Invalidates the screen when starting the Transition. Default is
     * to invalidate the whole screen. Subclasses can do partial
     * invalidation.
     */
    virtual void invalidate()
 8004240:	b580      	push	{r7, lr}
 8004242:	b082      	sub	sp, #8
 8004244:	af00      	add	r7, sp, #0
 8004246:	6078      	str	r0, [r7, #4]
    {
        Application::getInstance()->draw();
 8004248:	f017 fb8e 	bl	801b968 <_ZN8touchgfx11Application11getInstanceEv>
 800424c:	4603      	mov	r3, r0
 800424e:	681a      	ldr	r2, [r3, #0]
 8004250:	3230      	adds	r2, #48	@ 0x30
 8004252:	6812      	ldr	r2, [r2, #0]
 8004254:	4618      	mov	r0, r3
 8004256:	4790      	blx	r2
    }
 8004258:	bf00      	nop
 800425a:	3708      	adds	r7, #8
 800425c:	46bd      	mov	sp, r7
 800425e:	bd80      	pop	{r7, pc}

08004260 <_ZN8touchgfx10Transition18setScreenContainerERNS_9ContainerE>:
     * Sets the Screen Container. Is used by Screen to enable the transition to access the
     * Container.
     *
     * @param [in] cont The Container the transition should have access to.
     */
    virtual void setScreenContainer(Container& cont)
 8004260:	b480      	push	{r7}
 8004262:	b083      	sub	sp, #12
 8004264:	af00      	add	r7, sp, #0
 8004266:	6078      	str	r0, [r7, #4]
 8004268:	6039      	str	r1, [r7, #0]
    {
        screenContainer = &cont;
 800426a:	687b      	ldr	r3, [r7, #4]
 800426c:	683a      	ldr	r2, [r7, #0]
 800426e:	605a      	str	r2, [r3, #4]
    }
 8004270:	bf00      	nop
 8004272:	370c      	adds	r7, #12
 8004274:	46bd      	mov	sp, r7
 8004276:	f85d 7b04 	ldr.w	r7, [sp], #4
 800427a:	4770      	bx	lr

0800427c <_ZN8touchgfx14MVPApplicationC1Ev>:
    MVPApplication()
 800427c:	b580      	push	{r7, lr}
 800427e:	b082      	sub	sp, #8
 8004280:	af00      	add	r7, sp, #0
 8004282:	6078      	str	r0, [r7, #4]
          pendingScreenTransitionCallback(0)
 8004284:	687b      	ldr	r3, [r7, #4]
 8004286:	4618      	mov	r0, r3
 8004288:	f017 fbd8 	bl	801ba3c <_ZN8touchgfx11ApplicationC1Ev>
 800428c:	4a09      	ldr	r2, [pc, #36]	@ (80042b4 <_ZN8touchgfx14MVPApplicationC1Ev+0x38>)
 800428e:	687b      	ldr	r3, [r7, #4]
 8004290:	601a      	str	r2, [r3, #0]
        : currentPresenter(0),
 8004292:	687b      	ldr	r3, [r7, #4]
 8004294:	2200      	movs	r2, #0
 8004296:	f8c3 2138 	str.w	r2, [r3, #312]	@ 0x138
          pendingScreenTransitionCallback(0)
 800429a:	687b      	ldr	r3, [r7, #4]
 800429c:	2200      	movs	r2, #0
 800429e:	f8c3 213c 	str.w	r2, [r3, #316]	@ 0x13c
        instance = this;
 80042a2:	687b      	ldr	r3, [r7, #4]
 80042a4:	4a04      	ldr	r2, [pc, #16]	@ (80042b8 <_ZN8touchgfx14MVPApplicationC1Ev+0x3c>)
 80042a6:	6013      	str	r3, [r2, #0]
    }
 80042a8:	687b      	ldr	r3, [r7, #4]
 80042aa:	4618      	mov	r0, r3
 80042ac:	3708      	adds	r7, #8
 80042ae:	46bd      	mov	sp, r7
 80042b0:	bd80      	pop	{r7, pc}
 80042b2:	bf00      	nop
 80042b4:	0802cd78 	.word	0x0802cd78
 80042b8:	2400b8d0 	.word	0x2400b8d0

080042bc <_ZN5Model4bindEP13ModelListener>:

    /**
     * Sets the modelListener to point to the currently active presenter. Called automatically
     * when switching screen.
     */
    void bind(ModelListener* listener)
 80042bc:	b480      	push	{r7}
 80042be:	b083      	sub	sp, #12
 80042c0:	af00      	add	r7, sp, #0
 80042c2:	6078      	str	r0, [r7, #4]
 80042c4:	6039      	str	r1, [r7, #0]
    {
        modelListener = listener;
 80042c6:	687b      	ldr	r3, [r7, #4]
 80042c8:	683a      	ldr	r2, [r7, #0]
 80042ca:	601a      	str	r2, [r3, #0]
    }
 80042cc:	bf00      	nop
 80042ce:	370c      	adds	r7, #12
 80042d0:	46bd      	mov	sp, r7
 80042d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042d6:	4770      	bx	lr

080042d8 <_ZN8touchgfx12NoTransition15handleTickEventEv>:
 */
class NoTransition : public Transition
{
public:
    /** Indicates that the transition is done after the first tick. */
    virtual void handleTickEvent()
 80042d8:	b480      	push	{r7}
 80042da:	b083      	sub	sp, #12
 80042dc:	af00      	add	r7, sp, #0
 80042de:	6078      	str	r0, [r7, #4]
    {
        done = true;
 80042e0:	687b      	ldr	r3, [r7, #4]
 80042e2:	2201      	movs	r2, #1
 80042e4:	721a      	strb	r2, [r3, #8]
    }
 80042e6:	bf00      	nop
 80042e8:	370c      	adds	r7, #12
 80042ea:	46bd      	mov	sp, r7
 80042ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042f0:	4770      	bx	lr

080042f2 <_ZN8touchgfx6Widget12getLastChildEssPPNS_8DrawableE>:
     *
     * @param       x    Not used since this Widget is the only "child".
     * @param       y    Not used since this Widget is the only "child".
     * @param [out] last Result, the address of the actual instance of the Widget.
     */
    virtual void getLastChild(int16_t x, int16_t y, Drawable** last)
 80042f2:	b580      	push	{r7, lr}
 80042f4:	b084      	sub	sp, #16
 80042f6:	af00      	add	r7, sp, #0
 80042f8:	60f8      	str	r0, [r7, #12]
 80042fa:	607b      	str	r3, [r7, #4]
 80042fc:	460b      	mov	r3, r1
 80042fe:	817b      	strh	r3, [r7, #10]
 8004300:	4613      	mov	r3, r2
 8004302:	813b      	strh	r3, [r7, #8]
    {
        (void)x;
        (void)y;
        if (isVisible() && isTouchable())
 8004304:	68fb      	ldr	r3, [r7, #12]
 8004306:	4618      	mov	r0, r3
 8004308:	f7ff fec3 	bl	8004092 <_ZNK8touchgfx8Drawable9isVisibleEv>
 800430c:	4603      	mov	r3, r0
 800430e:	2b00      	cmp	r3, #0
 8004310:	d008      	beq.n	8004324 <_ZN8touchgfx6Widget12getLastChildEssPPNS_8DrawableE+0x32>
 8004312:	68fb      	ldr	r3, [r7, #12]
 8004314:	4618      	mov	r0, r3
 8004316:	f7ff fec9 	bl	80040ac <_ZNK8touchgfx8Drawable11isTouchableEv>
 800431a:	4603      	mov	r3, r0
 800431c:	2b00      	cmp	r3, #0
 800431e:	d001      	beq.n	8004324 <_ZN8touchgfx6Widget12getLastChildEssPPNS_8DrawableE+0x32>
 8004320:	2301      	movs	r3, #1
 8004322:	e000      	b.n	8004326 <_ZN8touchgfx6Widget12getLastChildEssPPNS_8DrawableE+0x34>
 8004324:	2300      	movs	r3, #0
 8004326:	2b00      	cmp	r3, #0
 8004328:	d002      	beq.n	8004330 <_ZN8touchgfx6Widget12getLastChildEssPPNS_8DrawableE+0x3e>
        {
            *last = this;
 800432a:	68fa      	ldr	r2, [r7, #12]
 800432c:	687b      	ldr	r3, [r7, #4]
 800432e:	601a      	str	r2, [r3, #0]
        }
    }
 8004330:	bf00      	nop
 8004332:	3710      	adds	r7, #16
 8004334:	46bd      	mov	sp, r7
 8004336:	bd80      	pop	{r7, pc}

08004338 <_ZN13ModelListener4bindEP5Model>:

    /**
     * Sets the model pointer to point to the Model object. Called automatically
     * when switching screen.
     */
    void bind(Model* m)
 8004338:	b480      	push	{r7}
 800433a:	b083      	sub	sp, #12
 800433c:	af00      	add	r7, sp, #0
 800433e:	6078      	str	r0, [r7, #4]
 8004340:	6039      	str	r1, [r7, #0]
    {
        model = m;
 8004342:	687b      	ldr	r3, [r7, #4]
 8004344:	683a      	ldr	r2, [r7, #0]
 8004346:	605a      	str	r2, [r3, #4]
    }
 8004348:	bf00      	nop
 800434a:	370c      	adds	r7, #12
 800434c:	46bd      	mov	sp, r7
 800434e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004352:	4770      	bx	lr

08004354 <_ZN8touchgfx6WidgetC1Ev>:
class Widget : public Drawable
 8004354:	b580      	push	{r7, lr}
 8004356:	b082      	sub	sp, #8
 8004358:	af00      	add	r7, sp, #0
 800435a:	6078      	str	r0, [r7, #4]
 800435c:	687b      	ldr	r3, [r7, #4]
 800435e:	4618      	mov	r0, r3
 8004360:	f7ff fd48 	bl	8003df4 <_ZN8touchgfx8DrawableC1Ev>
 8004364:	4a03      	ldr	r2, [pc, #12]	@ (8004374 <_ZN8touchgfx6WidgetC1Ev+0x20>)
 8004366:	687b      	ldr	r3, [r7, #4]
 8004368:	601a      	str	r2, [r3, #0]
 800436a:	687b      	ldr	r3, [r7, #4]
 800436c:	4618      	mov	r0, r3
 800436e:	3708      	adds	r7, #8
 8004370:	46bd      	mov	sp, r7
 8004372:	bd80      	pop	{r7, pc}
 8004374:	0802d22c 	.word	0x0802d22c

08004378 <_ZN8touchgfx6WidgetD1Ev>:
 8004378:	b580      	push	{r7, lr}
 800437a:	b082      	sub	sp, #8
 800437c:	af00      	add	r7, sp, #0
 800437e:	6078      	str	r0, [r7, #4]
 8004380:	4a05      	ldr	r2, [pc, #20]	@ (8004398 <_ZN8touchgfx6WidgetD1Ev+0x20>)
 8004382:	687b      	ldr	r3, [r7, #4]
 8004384:	601a      	str	r2, [r3, #0]
 8004386:	687b      	ldr	r3, [r7, #4]
 8004388:	4618      	mov	r0, r3
 800438a:	f7ff fd63 	bl	8003e54 <_ZN8touchgfx8DrawableD1Ev>
 800438e:	687b      	ldr	r3, [r7, #4]
 8004390:	4618      	mov	r0, r3
 8004392:	3708      	adds	r7, #8
 8004394:	46bd      	mov	sp, r7
 8004396:	bd80      	pop	{r7, pc}
 8004398:	0802d22c 	.word	0x0802d22c

0800439c <_ZN8touchgfx6WidgetD0Ev>:
 800439c:	b580      	push	{r7, lr}
 800439e:	b082      	sub	sp, #8
 80043a0:	af00      	add	r7, sp, #0
 80043a2:	6078      	str	r0, [r7, #4]
 80043a4:	6878      	ldr	r0, [r7, #4]
 80043a6:	f7ff ffe7 	bl	8004378 <_ZN8touchgfx6WidgetD1Ev>
 80043aa:	2128      	movs	r1, #40	@ 0x28
 80043ac:	6878      	ldr	r0, [r7, #4]
 80043ae:	f026 fc1a 	bl	802abe6 <_ZdlPvj>
 80043b2:	687b      	ldr	r3, [r7, #4]
 80043b4:	4618      	mov	r0, r3
 80043b6:	3708      	adds	r7, #8
 80043b8:	46bd      	mov	sp, r7
 80043ba:	bd80      	pop	{r7, pc}

080043bc <_ZN23FrontendApplicationBaseC1ER5ModelR12FrontendHeap>:
#include <gui/localize_anomaly_screen/Localize_AnomalyView.hpp>
#include <gui/localize_anomaly_screen/Localize_AnomalyPresenter.hpp>

using namespace touchgfx;

FrontendApplicationBase::FrontendApplicationBase(Model& m, FrontendHeap& heap)
 80043bc:	b580      	push	{r7, lr}
 80043be:	b084      	sub	sp, #16
 80043c0:	af00      	add	r7, sp, #0
 80043c2:	60f8      	str	r0, [r7, #12]
 80043c4:	60b9      	str	r1, [r7, #8]
 80043c6:	607a      	str	r2, [r7, #4]
    : touchgfx::MVPApplication(),
      transitionCallback(),
      frontendHeap(heap),
      model(m)
 80043c8:	68fb      	ldr	r3, [r7, #12]
 80043ca:	4618      	mov	r0, r3
 80043cc:	f7ff ff56 	bl	800427c <_ZN8touchgfx14MVPApplicationC1Ev>
 80043d0:	4a13      	ldr	r2, [pc, #76]	@ (8004420 <_ZN23FrontendApplicationBaseC1ER5ModelR12FrontendHeap+0x64>)
 80043d2:	68fb      	ldr	r3, [r7, #12]
 80043d4:	601a      	str	r2, [r3, #0]
      transitionCallback(),
 80043d6:	68fb      	ldr	r3, [r7, #12]
 80043d8:	f503 73a0 	add.w	r3, r3, #320	@ 0x140
 80043dc:	4618      	mov	r0, r3
 80043de:	f000 f92b 	bl	8004638 <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvEC1Ev>
      frontendHeap(heap),
 80043e2:	68fb      	ldr	r3, [r7, #12]
 80043e4:	687a      	ldr	r2, [r7, #4]
 80043e6:	f8c3 2150 	str.w	r2, [r3, #336]	@ 0x150
      model(m)
 80043ea:	68fb      	ldr	r3, [r7, #12]
 80043ec:	68ba      	ldr	r2, [r7, #8]
 80043ee:	f8c3 2154 	str.w	r2, [r3, #340]	@ 0x154
{
    touchgfx::HAL::getInstance()->setDisplayOrientation(touchgfx::ORIENTATION_LANDSCAPE);
 80043f2:	f7fd fea5 	bl	8002140 <_ZN8touchgfx3HAL11getInstanceEv>
 80043f6:	4603      	mov	r3, r0
 80043f8:	681a      	ldr	r2, [r3, #0]
 80043fa:	3208      	adds	r2, #8
 80043fc:	6812      	ldr	r2, [r2, #0]
 80043fe:	2100      	movs	r1, #0
 8004400:	4618      	mov	r0, r3
 8004402:	4790      	blx	r2
    touchgfx::Texts::setLanguage(GB);
 8004404:	2000      	movs	r0, #0
 8004406:	f005 fd7d 	bl	8009f04 <_ZN8touchgfx5Texts11setLanguageEt>
    reinterpret_cast<touchgfx::LCD16bpp&>(touchgfx::HAL::lcd()).enableTextureMapperAll();
 800440a:	f7ff fea9 	bl	8004160 <_ZN8touchgfx3HAL3lcdEv>
 800440e:	4603      	mov	r3, r0
 8004410:	4618      	mov	r0, r3
 8004412:	f01f faa4 	bl	802395e <_ZN8touchgfx8LCD16bpp22enableTextureMapperAllEv>
}
 8004416:	68fb      	ldr	r3, [r7, #12]
 8004418:	4618      	mov	r0, r3
 800441a:	3710      	adds	r7, #16
 800441c:	46bd      	mov	sp, r7
 800441e:	bd80      	pop	{r7, pc}
 8004420:	0802cd1c 	.word	0x0802cd1c

08004424 <_ZN8touchgfx15GenericCallbackIvvvEaSERKS1_>:
class GenericCallback<void>
 8004424:	b480      	push	{r7}
 8004426:	b083      	sub	sp, #12
 8004428:	af00      	add	r7, sp, #0
 800442a:	6078      	str	r0, [r7, #4]
 800442c:	6039      	str	r1, [r7, #0]
 800442e:	687b      	ldr	r3, [r7, #4]
 8004430:	4618      	mov	r0, r3
 8004432:	370c      	adds	r7, #12
 8004434:	46bd      	mov	sp, r7
 8004436:	f85d 7b04 	ldr.w	r7, [sp], #4
 800443a:	4770      	bx	lr

0800443c <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvEaSEOS2_>:
struct Callback<dest_type, void, void, void> : public GenericCallback<>
 800443c:	b580      	push	{r7, lr}
 800443e:	b082      	sub	sp, #8
 8004440:	af00      	add	r7, sp, #0
 8004442:	6078      	str	r0, [r7, #4]
 8004444:	6039      	str	r1, [r7, #0]
 8004446:	687b      	ldr	r3, [r7, #4]
 8004448:	683a      	ldr	r2, [r7, #0]
 800444a:	4611      	mov	r1, r2
 800444c:	4618      	mov	r0, r3
 800444e:	f7ff ffe9 	bl	8004424 <_ZN8touchgfx15GenericCallbackIvvvEaSERKS1_>
 8004452:	683b      	ldr	r3, [r7, #0]
 8004454:	685a      	ldr	r2, [r3, #4]
 8004456:	687b      	ldr	r3, [r7, #4]
 8004458:	605a      	str	r2, [r3, #4]
 800445a:	687b      	ldr	r3, [r7, #4]
 800445c:	683a      	ldr	r2, [r7, #0]
 800445e:	3308      	adds	r3, #8
 8004460:	3208      	adds	r2, #8
 8004462:	e892 0003 	ldmia.w	r2, {r0, r1}
 8004466:	e883 0003 	stmia.w	r3, {r0, r1}
 800446a:	687b      	ldr	r3, [r7, #4]
 800446c:	4618      	mov	r0, r3
 800446e:	3708      	adds	r7, #8
 8004470:	46bd      	mov	sp, r7
 8004472:	bd80      	pop	{r7, pc}

08004474 <_ZN23FrontendApplicationBase26gotoMainScreenNoTransitionEv>:
 */

// Main

void FrontendApplicationBase::gotoMainScreenNoTransition()
{
 8004474:	b590      	push	{r4, r7, lr}
 8004476:	b089      	sub	sp, #36	@ 0x24
 8004478:	af00      	add	r7, sp, #0
 800447a:	6078      	str	r0, [r7, #4]
    transitionCallback = touchgfx::Callback<FrontendApplicationBase>(this, &FrontendApplication::gotoMainScreenNoTransitionImpl);
 800447c:	687b      	ldr	r3, [r7, #4]
 800447e:	f503 74a0 	add.w	r4, r3, #320	@ 0x140
 8004482:	4b10      	ldr	r3, [pc, #64]	@ (80044c4 <_ZN23FrontendApplicationBase26gotoMainScreenNoTransitionEv+0x50>)
 8004484:	61bb      	str	r3, [r7, #24]
 8004486:	2300      	movs	r3, #0
 8004488:	61fb      	str	r3, [r7, #28]
 800448a:	f107 0008 	add.w	r0, r7, #8
 800448e:	f107 0318 	add.w	r3, r7, #24
 8004492:	cb0c      	ldmia	r3, {r2, r3}
 8004494:	6879      	ldr	r1, [r7, #4]
 8004496:	f000 f8eb 	bl	8004670 <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvEC1EPS1_MS1_FvvE>
 800449a:	f107 0308 	add.w	r3, r7, #8
 800449e:	4619      	mov	r1, r3
 80044a0:	4620      	mov	r0, r4
 80044a2:	f7ff ffcb 	bl	800443c <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvEaSEOS2_>
 80044a6:	f107 0308 	add.w	r3, r7, #8
 80044aa:	4618      	mov	r0, r3
 80044ac:	f7fe ff72 	bl	8003394 <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvED1Ev>
    pendingScreenTransitionCallback = &transitionCallback;
 80044b0:	687b      	ldr	r3, [r7, #4]
 80044b2:	f503 72a0 	add.w	r2, r3, #320	@ 0x140
 80044b6:	687b      	ldr	r3, [r7, #4]
 80044b8:	f8c3 213c 	str.w	r2, [r3, #316]	@ 0x13c
}
 80044bc:	bf00      	nop
 80044be:	3724      	adds	r7, #36	@ 0x24
 80044c0:	46bd      	mov	sp, r7
 80044c2:	bd90      	pop	{r4, r7, pc}
 80044c4:	080044c9 	.word	0x080044c9

080044c8 <_ZN23FrontendApplicationBase30gotoMainScreenNoTransitionImplEv>:

void FrontendApplicationBase::gotoMainScreenNoTransitionImpl()
{
 80044c8:	b580      	push	{r7, lr}
 80044ca:	b084      	sub	sp, #16
 80044cc:	af02      	add	r7, sp, #8
 80044ce:	6078      	str	r0, [r7, #4]
    touchgfx::makeTransition<MainView, MainPresenter, touchgfx::NoTransition, Model >(&currentScreen, &currentPresenter, frontendHeap, &currentTransition, &model);
 80044d0:	687b      	ldr	r3, [r7, #4]
 80044d2:	f503 719c 	add.w	r1, r3, #312	@ 0x138
 80044d6:	687b      	ldr	r3, [r7, #4]
 80044d8:	f8d3 3150 	ldr.w	r3, [r3, #336]	@ 0x150
 80044dc:	461a      	mov	r2, r3
 80044de:	687b      	ldr	r3, [r7, #4]
 80044e0:	f8d3 3154 	ldr.w	r3, [r3, #340]	@ 0x154
 80044e4:	9300      	str	r3, [sp, #0]
 80044e6:	4b04      	ldr	r3, [pc, #16]	@ (80044f8 <_ZN23FrontendApplicationBase30gotoMainScreenNoTransitionImplEv+0x30>)
 80044e8:	4804      	ldr	r0, [pc, #16]	@ (80044fc <_ZN23FrontendApplicationBase30gotoMainScreenNoTransitionImplEv+0x34>)
 80044ea:	f000 f8f3 	bl	80046d4 <_ZN8touchgfx14makeTransitionI8MainView13MainPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_>
}
 80044ee:	bf00      	nop
 80044f0:	3708      	adds	r7, #8
 80044f2:	46bd      	mov	sp, r7
 80044f4:	bd80      	pop	{r7, pc}
 80044f6:	bf00      	nop
 80044f8:	2400b8c4 	.word	0x2400b8c4
 80044fc:	2400b8c0 	.word	0x2400b8c0

08004500 <_ZN23FrontendApplicationBase33gotoMainScreenWipeTransitionSouthEv>:

void FrontendApplicationBase::gotoMainScreenWipeTransitionSouth()
{
 8004500:	b590      	push	{r4, r7, lr}
 8004502:	b089      	sub	sp, #36	@ 0x24
 8004504:	af00      	add	r7, sp, #0
 8004506:	6078      	str	r0, [r7, #4]
    transitionCallback = touchgfx::Callback<FrontendApplicationBase>(this, &FrontendApplication::gotoMainScreenWipeTransitionSouthImpl);
 8004508:	687b      	ldr	r3, [r7, #4]
 800450a:	f503 74a0 	add.w	r4, r3, #320	@ 0x140
 800450e:	4b10      	ldr	r3, [pc, #64]	@ (8004550 <_ZN23FrontendApplicationBase33gotoMainScreenWipeTransitionSouthEv+0x50>)
 8004510:	61bb      	str	r3, [r7, #24]
 8004512:	2300      	movs	r3, #0
 8004514:	61fb      	str	r3, [r7, #28]
 8004516:	f107 0008 	add.w	r0, r7, #8
 800451a:	f107 0318 	add.w	r3, r7, #24
 800451e:	cb0c      	ldmia	r3, {r2, r3}
 8004520:	6879      	ldr	r1, [r7, #4]
 8004522:	f000 f8a5 	bl	8004670 <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvEC1EPS1_MS1_FvvE>
 8004526:	f107 0308 	add.w	r3, r7, #8
 800452a:	4619      	mov	r1, r3
 800452c:	4620      	mov	r0, r4
 800452e:	f7ff ff85 	bl	800443c <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvEaSEOS2_>
 8004532:	f107 0308 	add.w	r3, r7, #8
 8004536:	4618      	mov	r0, r3
 8004538:	f7fe ff2c 	bl	8003394 <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvED1Ev>
    pendingScreenTransitionCallback = &transitionCallback;
 800453c:	687b      	ldr	r3, [r7, #4]
 800453e:	f503 72a0 	add.w	r2, r3, #320	@ 0x140
 8004542:	687b      	ldr	r3, [r7, #4]
 8004544:	f8c3 213c 	str.w	r2, [r3, #316]	@ 0x13c
}
 8004548:	bf00      	nop
 800454a:	3724      	adds	r7, #36	@ 0x24
 800454c:	46bd      	mov	sp, r7
 800454e:	bd90      	pop	{r4, r7, pc}
 8004550:	08004555 	.word	0x08004555

08004554 <_ZN23FrontendApplicationBase37gotoMainScreenWipeTransitionSouthImplEv>:

void FrontendApplicationBase::gotoMainScreenWipeTransitionSouthImpl()
{
 8004554:	b580      	push	{r7, lr}
 8004556:	b084      	sub	sp, #16
 8004558:	af02      	add	r7, sp, #8
 800455a:	6078      	str	r0, [r7, #4]
    touchgfx::makeTransition<MainView, MainPresenter, touchgfx::WipeTransition<SOUTH>, Model >(&currentScreen, &currentPresenter, frontendHeap, &currentTransition, &model);
 800455c:	687b      	ldr	r3, [r7, #4]
 800455e:	f503 719c 	add.w	r1, r3, #312	@ 0x138
 8004562:	687b      	ldr	r3, [r7, #4]
 8004564:	f8d3 3150 	ldr.w	r3, [r3, #336]	@ 0x150
 8004568:	461a      	mov	r2, r3
 800456a:	687b      	ldr	r3, [r7, #4]
 800456c:	f8d3 3154 	ldr.w	r3, [r3, #340]	@ 0x154
 8004570:	9300      	str	r3, [sp, #0]
 8004572:	4b04      	ldr	r3, [pc, #16]	@ (8004584 <_ZN23FrontendApplicationBase37gotoMainScreenWipeTransitionSouthImplEv+0x30>)
 8004574:	4804      	ldr	r0, [pc, #16]	@ (8004588 <_ZN23FrontendApplicationBase37gotoMainScreenWipeTransitionSouthImplEv+0x34>)
 8004576:	f000 f9c7 	bl	8004908 <_ZN8touchgfx14makeTransitionI8MainView13MainPresenterNS_14WipeTransitionILNS_9DirectionE1EEE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_>
}
 800457a:	bf00      	nop
 800457c:	3708      	adds	r7, #8
 800457e:	46bd      	mov	sp, r7
 8004580:	bd80      	pop	{r7, pc}
 8004582:	bf00      	nop
 8004584:	2400b8c4 	.word	0x2400b8c4
 8004588:	2400b8c0 	.word	0x2400b8c0

0800458c <_ZN23FrontendApplicationBase45gotoLocalize_AnomalyScreenWipeTransitionNorthEv>:

// Localize_Anomaly

void FrontendApplicationBase::gotoLocalize_AnomalyScreenWipeTransitionNorth()
{
 800458c:	b590      	push	{r4, r7, lr}
 800458e:	b089      	sub	sp, #36	@ 0x24
 8004590:	af00      	add	r7, sp, #0
 8004592:	6078      	str	r0, [r7, #4]
    transitionCallback = touchgfx::Callback<FrontendApplicationBase>(this, &FrontendApplication::gotoLocalize_AnomalyScreenWipeTransitionNorthImpl);
 8004594:	687b      	ldr	r3, [r7, #4]
 8004596:	f503 74a0 	add.w	r4, r3, #320	@ 0x140
 800459a:	4b10      	ldr	r3, [pc, #64]	@ (80045dc <_ZN23FrontendApplicationBase45gotoLocalize_AnomalyScreenWipeTransitionNorthEv+0x50>)
 800459c:	61bb      	str	r3, [r7, #24]
 800459e:	2300      	movs	r3, #0
 80045a0:	61fb      	str	r3, [r7, #28]
 80045a2:	f107 0008 	add.w	r0, r7, #8
 80045a6:	f107 0318 	add.w	r3, r7, #24
 80045aa:	cb0c      	ldmia	r3, {r2, r3}
 80045ac:	6879      	ldr	r1, [r7, #4]
 80045ae:	f000 f85f 	bl	8004670 <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvEC1EPS1_MS1_FvvE>
 80045b2:	f107 0308 	add.w	r3, r7, #8
 80045b6:	4619      	mov	r1, r3
 80045b8:	4620      	mov	r0, r4
 80045ba:	f7ff ff3f 	bl	800443c <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvEaSEOS2_>
 80045be:	f107 0308 	add.w	r3, r7, #8
 80045c2:	4618      	mov	r0, r3
 80045c4:	f7fe fee6 	bl	8003394 <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvED1Ev>
    pendingScreenTransitionCallback = &transitionCallback;
 80045c8:	687b      	ldr	r3, [r7, #4]
 80045ca:	f503 72a0 	add.w	r2, r3, #320	@ 0x140
 80045ce:	687b      	ldr	r3, [r7, #4]
 80045d0:	f8c3 213c 	str.w	r2, [r3, #316]	@ 0x13c
}
 80045d4:	bf00      	nop
 80045d6:	3724      	adds	r7, #36	@ 0x24
 80045d8:	46bd      	mov	sp, r7
 80045da:	bd90      	pop	{r4, r7, pc}
 80045dc:	080045e1 	.word	0x080045e1

080045e0 <_ZN23FrontendApplicationBase49gotoLocalize_AnomalyScreenWipeTransitionNorthImplEv>:

void FrontendApplicationBase::gotoLocalize_AnomalyScreenWipeTransitionNorthImpl()
{
 80045e0:	b580      	push	{r7, lr}
 80045e2:	b084      	sub	sp, #16
 80045e4:	af02      	add	r7, sp, #8
 80045e6:	6078      	str	r0, [r7, #4]
    touchgfx::makeTransition<Localize_AnomalyView, Localize_AnomalyPresenter, touchgfx::WipeTransition<NORTH>, Model >(&currentScreen, &currentPresenter, frontendHeap, &currentTransition, &model);
 80045e8:	687b      	ldr	r3, [r7, #4]
 80045ea:	f503 719c 	add.w	r1, r3, #312	@ 0x138
 80045ee:	687b      	ldr	r3, [r7, #4]
 80045f0:	f8d3 3150 	ldr.w	r3, [r3, #336]	@ 0x150
 80045f4:	461a      	mov	r2, r3
 80045f6:	687b      	ldr	r3, [r7, #4]
 80045f8:	f8d3 3154 	ldr.w	r3, [r3, #340]	@ 0x154
 80045fc:	9300      	str	r3, [sp, #0]
 80045fe:	4b04      	ldr	r3, [pc, #16]	@ (8004610 <_ZN23FrontendApplicationBase49gotoLocalize_AnomalyScreenWipeTransitionNorthImplEv+0x30>)
 8004600:	4804      	ldr	r0, [pc, #16]	@ (8004614 <_ZN23FrontendApplicationBase49gotoLocalize_AnomalyScreenWipeTransitionNorthImplEv+0x34>)
 8004602:	f000 fa9d 	bl	8004b40 <_ZN8touchgfx14makeTransitionI20Localize_AnomalyView25Localize_AnomalyPresenterNS_14WipeTransitionILNS_9DirectionE0EEE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_>
}
 8004606:	bf00      	nop
 8004608:	3708      	adds	r7, #8
 800460a:	46bd      	mov	sp, r7
 800460c:	bd80      	pop	{r7, pc}
 800460e:	bf00      	nop
 8004610:	2400b8c4 	.word	0x2400b8c4
 8004614:	2400b8c0 	.word	0x2400b8c0

08004618 <_ZN8touchgfx15GenericCallbackIvvvEC1Ev>:
class GenericCallback<void>
 8004618:	b480      	push	{r7}
 800461a:	b083      	sub	sp, #12
 800461c:	af00      	add	r7, sp, #0
 800461e:	6078      	str	r0, [r7, #4]
 8004620:	4a04      	ldr	r2, [pc, #16]	@ (8004634 <_ZN8touchgfx15GenericCallbackIvvvEC1Ev+0x1c>)
 8004622:	687b      	ldr	r3, [r7, #4]
 8004624:	601a      	str	r2, [r3, #0]
 8004626:	687b      	ldr	r3, [r7, #4]
 8004628:	4618      	mov	r0, r3
 800462a:	370c      	adds	r7, #12
 800462c:	46bd      	mov	sp, r7
 800462e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004632:	4770      	bx	lr
 8004634:	0802cdbc 	.word	0x0802cdbc

08004638 <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvEC1Ev>:
    Callback()
 8004638:	b580      	push	{r7, lr}
 800463a:	b082      	sub	sp, #8
 800463c:	af00      	add	r7, sp, #0
 800463e:	6078      	str	r0, [r7, #4]
        : pobject(0), pmemfun_0(0)
 8004640:	687b      	ldr	r3, [r7, #4]
 8004642:	4618      	mov	r0, r3
 8004644:	f7ff ffe8 	bl	8004618 <_ZN8touchgfx15GenericCallbackIvvvEC1Ev>
 8004648:	4a08      	ldr	r2, [pc, #32]	@ (800466c <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvEC1Ev+0x34>)
 800464a:	687b      	ldr	r3, [r7, #4]
 800464c:	601a      	str	r2, [r3, #0]
 800464e:	687b      	ldr	r3, [r7, #4]
 8004650:	2200      	movs	r2, #0
 8004652:	605a      	str	r2, [r3, #4]
 8004654:	687b      	ldr	r3, [r7, #4]
 8004656:	2200      	movs	r2, #0
 8004658:	609a      	str	r2, [r3, #8]
 800465a:	687b      	ldr	r3, [r7, #4]
 800465c:	2200      	movs	r2, #0
 800465e:	60da      	str	r2, [r3, #12]
    }
 8004660:	687b      	ldr	r3, [r7, #4]
 8004662:	4618      	mov	r0, r3
 8004664:	3708      	adds	r7, #8
 8004666:	46bd      	mov	sp, r7
 8004668:	bd80      	pop	{r7, pc}
 800466a:	bf00      	nop
 800466c:	0802cd60 	.word	0x0802cd60

08004670 <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvEC1EPS1_MS1_FvvE>:
    Callback(dest_type* pobject, void (dest_type::*pmemfun_0)())
 8004670:	b580      	push	{r7, lr}
 8004672:	b084      	sub	sp, #16
 8004674:	af00      	add	r7, sp, #0
 8004676:	60f8      	str	r0, [r7, #12]
 8004678:	60b9      	str	r1, [r7, #8]
 800467a:	4639      	mov	r1, r7
 800467c:	e881 000c 	stmia.w	r1, {r2, r3}
        : pobject(pobject), pmemfun_0(pmemfun_0)
 8004680:	68fb      	ldr	r3, [r7, #12]
 8004682:	4618      	mov	r0, r3
 8004684:	f7ff ffc8 	bl	8004618 <_ZN8touchgfx15GenericCallbackIvvvEC1Ev>
 8004688:	4a08      	ldr	r2, [pc, #32]	@ (80046ac <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvEC1EPS1_MS1_FvvE+0x3c>)
 800468a:	68fb      	ldr	r3, [r7, #12]
 800468c:	601a      	str	r2, [r3, #0]
 800468e:	68fb      	ldr	r3, [r7, #12]
 8004690:	68ba      	ldr	r2, [r7, #8]
 8004692:	605a      	str	r2, [r3, #4]
 8004694:	68fb      	ldr	r3, [r7, #12]
 8004696:	3308      	adds	r3, #8
 8004698:	463a      	mov	r2, r7
 800469a:	e892 0003 	ldmia.w	r2, {r0, r1}
 800469e:	e883 0003 	stmia.w	r3, {r0, r1}
    }
 80046a2:	68fb      	ldr	r3, [r7, #12]
 80046a4:	4618      	mov	r0, r3
 80046a6:	3710      	adds	r7, #16
 80046a8:	46bd      	mov	sp, r7
 80046aa:	bd80      	pop	{r7, pc}
 80046ac:	0802cd60 	.word	0x0802cd60

080046b0 <_ZN8touchgfx12NoTransitionC1Ev>:
class NoTransition : public Transition
 80046b0:	b580      	push	{r7, lr}
 80046b2:	b082      	sub	sp, #8
 80046b4:	af00      	add	r7, sp, #0
 80046b6:	6078      	str	r0, [r7, #4]
 80046b8:	687b      	ldr	r3, [r7, #4]
 80046ba:	4618      	mov	r0, r3
 80046bc:	f7ff fd6c 	bl	8004198 <_ZN8touchgfx10TransitionC1Ev>
 80046c0:	4a03      	ldr	r2, [pc, #12]	@ (80046d0 <_ZN8touchgfx12NoTransitionC1Ev+0x20>)
 80046c2:	687b      	ldr	r3, [r7, #4]
 80046c4:	601a      	str	r2, [r3, #0]
 80046c6:	687b      	ldr	r3, [r7, #4]
 80046c8:	4618      	mov	r0, r3
 80046ca:	3708      	adds	r7, #8
 80046cc:	46bd      	mov	sp, r7
 80046ce:	bd80      	pop	{r7, pc}
 80046d0:	0802d290 	.word	0x0802d290

080046d4 <_ZN8touchgfx14makeTransitionI8MainView13MainPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_>:
 *
 * @return Pointer to the new Presenter of the requested type. Incidentally it will be the same
 *         value as the old presenter due to memory reuse.
 */
template <class ScreenType, class PresenterType, class TransType, class ModelType>
PresenterType* makeTransition(Screen** currentScreen, Presenter** currentPresenter, MVPHeap& heap, Transition** currentTrans, ModelType* model)
 80046d4:	b590      	push	{r4, r7, lr}
 80046d6:	b08f      	sub	sp, #60	@ 0x3c
 80046d8:	af00      	add	r7, sp, #0
 80046da:	60f8      	str	r0, [r7, #12]
 80046dc:	60b9      	str	r1, [r7, #8]
 80046de:	607a      	str	r2, [r7, #4]
 80046e0:	603b      	str	r3, [r7, #0]
{
    assert(sizeof(ScreenType) <= heap.screenStorage.element_size() && "View allocation error: Check that all views are added to FrontendHeap::ViewTypes");
 80046e2:	687b      	ldr	r3, [r7, #4]
 80046e4:	689a      	ldr	r2, [r3, #8]
 80046e6:	687b      	ldr	r3, [r7, #4]
 80046e8:	689b      	ldr	r3, [r3, #8]
 80046ea:	681b      	ldr	r3, [r3, #0]
 80046ec:	3320      	adds	r3, #32
 80046ee:	681b      	ldr	r3, [r3, #0]
 80046f0:	4610      	mov	r0, r2
 80046f2:	4798      	blx	r3
 80046f4:	4603      	mov	r3, r0
 80046f6:	f640 3217 	movw	r2, #2839	@ 0xb17
 80046fa:	4293      	cmp	r3, r2
 80046fc:	d805      	bhi.n	800470a <_ZN8touchgfx14makeTransitionI8MainView13MainPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x36>
 80046fe:	4b7d      	ldr	r3, [pc, #500]	@ (80048f4 <_ZN8touchgfx14makeTransitionI8MainView13MainPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x220>)
 8004700:	4a7d      	ldr	r2, [pc, #500]	@ (80048f8 <_ZN8touchgfx14makeTransitionI8MainView13MainPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x224>)
 8004702:	21a3      	movs	r1, #163	@ 0xa3
 8004704:	487d      	ldr	r0, [pc, #500]	@ (80048fc <_ZN8touchgfx14makeTransitionI8MainView13MainPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x228>)
 8004706:	f026 fa9d 	bl	802ac44 <__assert_func>
    assert(sizeof(PresenterType) <= heap.presenterStorage.element_size() && "Presenter allocation error: Check that all presenters are added to FrontendHeap::PresenterTypes");
 800470a:	687b      	ldr	r3, [r7, #4]
 800470c:	685a      	ldr	r2, [r3, #4]
 800470e:	687b      	ldr	r3, [r7, #4]
 8004710:	685b      	ldr	r3, [r3, #4]
 8004712:	681b      	ldr	r3, [r3, #0]
 8004714:	3320      	adds	r3, #32
 8004716:	681b      	ldr	r3, [r3, #0]
 8004718:	4610      	mov	r0, r2
 800471a:	4798      	blx	r3
 800471c:	4603      	mov	r3, r0
 800471e:	2b0f      	cmp	r3, #15
 8004720:	d805      	bhi.n	800472e <_ZN8touchgfx14makeTransitionI8MainView13MainPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x5a>
 8004722:	4b77      	ldr	r3, [pc, #476]	@ (8004900 <_ZN8touchgfx14makeTransitionI8MainView13MainPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x22c>)
 8004724:	4a74      	ldr	r2, [pc, #464]	@ (80048f8 <_ZN8touchgfx14makeTransitionI8MainView13MainPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x224>)
 8004726:	21a4      	movs	r1, #164	@ 0xa4
 8004728:	4874      	ldr	r0, [pc, #464]	@ (80048fc <_ZN8touchgfx14makeTransitionI8MainView13MainPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x228>)
 800472a:	f026 fa8b 	bl	802ac44 <__assert_func>
    assert(sizeof(TransType) <= heap.transitionStorage.element_size() && "Transition allocation error: Check that all transitions are added to FrontendHeap::TransitionTypes");
 800472e:	687b      	ldr	r3, [r7, #4]
 8004730:	68da      	ldr	r2, [r3, #12]
 8004732:	687b      	ldr	r3, [r7, #4]
 8004734:	68db      	ldr	r3, [r3, #12]
 8004736:	681b      	ldr	r3, [r3, #0]
 8004738:	3320      	adds	r3, #32
 800473a:	681b      	ldr	r3, [r3, #0]
 800473c:	4610      	mov	r0, r2
 800473e:	4798      	blx	r3
 8004740:	4603      	mov	r3, r0
 8004742:	2b0b      	cmp	r3, #11
 8004744:	d805      	bhi.n	8004752 <_ZN8touchgfx14makeTransitionI8MainView13MainPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x7e>
 8004746:	4b6f      	ldr	r3, [pc, #444]	@ (8004904 <_ZN8touchgfx14makeTransitionI8MainView13MainPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x230>)
 8004748:	4a6b      	ldr	r2, [pc, #428]	@ (80048f8 <_ZN8touchgfx14makeTransitionI8MainView13MainPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x224>)
 800474a:	21a5      	movs	r1, #165	@ 0xa5
 800474c:	486b      	ldr	r0, [pc, #428]	@ (80048fc <_ZN8touchgfx14makeTransitionI8MainView13MainPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x228>)
 800474e:	f026 fa79 	bl	802ac44 <__assert_func>
 8004752:	68fb      	ldr	r3, [r7, #12]
 8004754:	62bb      	str	r3, [r7, #40]	@ 0x28
 8004756:	68bb      	ldr	r3, [r7, #8]
 8004758:	627b      	str	r3, [r7, #36]	@ 0x24
 800475a:	683b      	ldr	r3, [r7, #0]
 800475c:	623b      	str	r3, [r7, #32]
    Application::getInstance()->clearAllTimerWidgets();
 800475e:	f017 f903 	bl	801b968 <_ZN8touchgfx11Application11getInstanceEv>
 8004762:	4603      	mov	r3, r0
 8004764:	4618      	mov	r0, r3
 8004766:	f017 f94d 	bl	801ba04 <_ZN8touchgfx11Application20clearAllTimerWidgetsEv>
    if (*currentTrans)
 800476a:	6a3b      	ldr	r3, [r7, #32]
 800476c:	681b      	ldr	r3, [r3, #0]
 800476e:	2b00      	cmp	r3, #0
 8004770:	d008      	beq.n	8004784 <_ZN8touchgfx14makeTransitionI8MainView13MainPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0xb0>
        (*currentTrans)->tearDown();
 8004772:	6a3b      	ldr	r3, [r7, #32]
 8004774:	681a      	ldr	r2, [r3, #0]
 8004776:	6a3b      	ldr	r3, [r7, #32]
 8004778:	681b      	ldr	r3, [r3, #0]
 800477a:	681b      	ldr	r3, [r3, #0]
 800477c:	330c      	adds	r3, #12
 800477e:	681b      	ldr	r3, [r3, #0]
 8004780:	4610      	mov	r0, r2
 8004782:	4798      	blx	r3
    if (*currentTrans)
 8004784:	6a3b      	ldr	r3, [r7, #32]
 8004786:	681b      	ldr	r3, [r3, #0]
 8004788:	2b00      	cmp	r3, #0
 800478a:	d007      	beq.n	800479c <_ZN8touchgfx14makeTransitionI8MainView13MainPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0xc8>
        (*currentTrans)->~Transition();
 800478c:	6a3b      	ldr	r3, [r7, #32]
 800478e:	681a      	ldr	r2, [r3, #0]
 8004790:	6a3b      	ldr	r3, [r7, #32]
 8004792:	681b      	ldr	r3, [r3, #0]
 8004794:	681b      	ldr	r3, [r3, #0]
 8004796:	681b      	ldr	r3, [r3, #0]
 8004798:	4610      	mov	r0, r2
 800479a:	4798      	blx	r3
    if (*currentScreen)
 800479c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800479e:	681b      	ldr	r3, [r3, #0]
 80047a0:	2b00      	cmp	r3, #0
 80047a2:	d008      	beq.n	80047b6 <_ZN8touchgfx14makeTransitionI8MainView13MainPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0xe2>
        (*currentScreen)->tearDownScreen();
 80047a4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80047a6:	681a      	ldr	r2, [r3, #0]
 80047a8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80047aa:	681b      	ldr	r3, [r3, #0]
 80047ac:	681b      	ldr	r3, [r3, #0]
 80047ae:	3314      	adds	r3, #20
 80047b0:	681b      	ldr	r3, [r3, #0]
 80047b2:	4610      	mov	r0, r2
 80047b4:	4798      	blx	r3
    if (*currentPresenter)
 80047b6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80047b8:	681b      	ldr	r3, [r3, #0]
 80047ba:	2b00      	cmp	r3, #0
 80047bc:	d008      	beq.n	80047d0 <_ZN8touchgfx14makeTransitionI8MainView13MainPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0xfc>
        (*currentPresenter)->deactivate();
 80047be:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80047c0:	681a      	ldr	r2, [r3, #0]
 80047c2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80047c4:	681b      	ldr	r3, [r3, #0]
 80047c6:	681b      	ldr	r3, [r3, #0]
 80047c8:	3304      	adds	r3, #4
 80047ca:	681b      	ldr	r3, [r3, #0]
 80047cc:	4610      	mov	r0, r2
 80047ce:	4798      	blx	r3
    if (*currentScreen)
 80047d0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80047d2:	681b      	ldr	r3, [r3, #0]
 80047d4:	2b00      	cmp	r3, #0
 80047d6:	d007      	beq.n	80047e8 <_ZN8touchgfx14makeTransitionI8MainView13MainPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x114>
        (*currentScreen)->~Screen();
 80047d8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80047da:	681a      	ldr	r2, [r3, #0]
 80047dc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80047de:	681b      	ldr	r3, [r3, #0]
 80047e0:	681b      	ldr	r3, [r3, #0]
 80047e2:	681b      	ldr	r3, [r3, #0]
 80047e4:	4610      	mov	r0, r2
 80047e6:	4798      	blx	r3
    if (*currentPresenter)
 80047e8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80047ea:	681b      	ldr	r3, [r3, #0]
 80047ec:	2b00      	cmp	r3, #0
 80047ee:	d008      	beq.n	8004802 <_ZN8touchgfx14makeTransitionI8MainView13MainPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x12e>
        (*currentPresenter)->~Presenter();
 80047f0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80047f2:	681a      	ldr	r2, [r3, #0]
 80047f4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80047f6:	681b      	ldr	r3, [r3, #0]
 80047f8:	681b      	ldr	r3, [r3, #0]
 80047fa:	3308      	adds	r3, #8
 80047fc:	681b      	ldr	r3, [r3, #0]
 80047fe:	4610      	mov	r0, r2
 8004800:	4798      	blx	r3
}
 8004802:	bf00      	nop

    prepareTransition(currentScreen, currentPresenter, currentTrans);

    TransType* newTransition = new (&heap.transitionStorage.at<TransType>(0)) TransType;
 8004804:	687b      	ldr	r3, [r7, #4]
 8004806:	68db      	ldr	r3, [r3, #12]
 8004808:	2100      	movs	r1, #0
 800480a:	4618      	mov	r0, r3
 800480c:	f000 fab2 	bl	8004d74 <_ZN8touchgfx17AbstractPartition2atINS_12NoTransitionEEERT_t>
 8004810:	4603      	mov	r3, r0
 8004812:	4619      	mov	r1, r3
 8004814:	200c      	movs	r0, #12
 8004816:	f7ff fac1 	bl	8003d9c <_ZnwjPv>
 800481a:	4604      	mov	r4, r0
 800481c:	4620      	mov	r0, r4
 800481e:	f7ff ff47 	bl	80046b0 <_ZN8touchgfx12NoTransitionC1Ev>
 8004822:	637c      	str	r4, [r7, #52]	@ 0x34
    ScreenType* newScreen = new (&heap.screenStorage.at<ScreenType>(0)) ScreenType;
 8004824:	687b      	ldr	r3, [r7, #4]
 8004826:	689b      	ldr	r3, [r3, #8]
 8004828:	2100      	movs	r1, #0
 800482a:	4618      	mov	r0, r3
 800482c:	f000 fab5 	bl	8004d9a <_ZN8touchgfx17AbstractPartition2atI8MainViewEERT_t>
 8004830:	4603      	mov	r3, r0
 8004832:	4619      	mov	r1, r3
 8004834:	f640 3018 	movw	r0, #2840	@ 0xb18
 8004838:	f7ff fab0 	bl	8003d9c <_ZnwjPv>
 800483c:	4604      	mov	r4, r0
 800483e:	4620      	mov	r0, r4
 8004840:	f005 ff68 	bl	800a714 <_ZN8MainViewC1Ev>
 8004844:	633c      	str	r4, [r7, #48]	@ 0x30
    PresenterType* newPresenter = new (&heap.presenterStorage.at<PresenterType>(0)) PresenterType(*newScreen);
 8004846:	687b      	ldr	r3, [r7, #4]
 8004848:	685b      	ldr	r3, [r3, #4]
 800484a:	2100      	movs	r1, #0
 800484c:	4618      	mov	r0, r3
 800484e:	f000 fab7 	bl	8004dc0 <_ZN8touchgfx17AbstractPartition2atI13MainPresenterEERT_t>
 8004852:	4603      	mov	r3, r0
 8004854:	4619      	mov	r1, r3
 8004856:	2010      	movs	r0, #16
 8004858:	f7ff faa0 	bl	8003d9c <_ZnwjPv>
 800485c:	4604      	mov	r4, r0
 800485e:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8004860:	4620      	mov	r0, r4
 8004862:	f005 fec9 	bl	800a5f8 <_ZN13MainPresenterC1ER8MainView>
 8004866:	62fc      	str	r4, [r7, #44]	@ 0x2c
    *currentTrans = newTransition;
 8004868:	683b      	ldr	r3, [r7, #0]
 800486a:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800486c:	601a      	str	r2, [r3, #0]
    *currentPresenter = newPresenter;
 800486e:	68bb      	ldr	r3, [r7, #8]
 8004870:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8004872:	601a      	str	r2, [r3, #0]
    *currentScreen = newScreen;
 8004874:	68fb      	ldr	r3, [r7, #12]
 8004876:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8004878:	601a      	str	r2, [r3, #0]
    model->bind(newPresenter);
 800487a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800487c:	2b00      	cmp	r3, #0
 800487e:	d002      	beq.n	8004886 <_ZN8touchgfx14makeTransitionI8MainView13MainPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x1b2>
 8004880:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004882:	3304      	adds	r3, #4
 8004884:	e000      	b.n	8004888 <_ZN8touchgfx14makeTransitionI8MainView13MainPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x1b4>
 8004886:	2300      	movs	r3, #0
 8004888:	4619      	mov	r1, r3
 800488a:	6cb8      	ldr	r0, [r7, #72]	@ 0x48
 800488c:	f7ff fd16 	bl	80042bc <_ZN5Model4bindEP13ModelListener>
    newPresenter->bind(model);
 8004890:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004892:	3304      	adds	r3, #4
 8004894:	6cb9      	ldr	r1, [r7, #72]	@ 0x48
 8004896:	4618      	mov	r0, r3
 8004898:	f7ff fd4e 	bl	8004338 <_ZN13ModelListener4bindEP5Model>
    newScreen->bind(*newPresenter);
 800489c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800489e:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80048a0:	4618      	mov	r0, r3
 80048a2:	f000 faa0 	bl	8004de6 <_ZN8touchgfx4ViewI13MainPresenterE4bindERS1_>
 80048a6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80048a8:	61fb      	str	r3, [r7, #28]
 80048aa:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80048ac:	61bb      	str	r3, [r7, #24]
 80048ae:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80048b0:	617b      	str	r3, [r7, #20]
    newScreen->setupScreen();
 80048b2:	69fb      	ldr	r3, [r7, #28]
 80048b4:	681b      	ldr	r3, [r3, #0]
 80048b6:	330c      	adds	r3, #12
 80048b8:	681b      	ldr	r3, [r3, #0]
 80048ba:	69f8      	ldr	r0, [r7, #28]
 80048bc:	4798      	blx	r3
    newPresenter->activate();
 80048be:	69bb      	ldr	r3, [r7, #24]
 80048c0:	681b      	ldr	r3, [r3, #0]
 80048c2:	681b      	ldr	r3, [r3, #0]
 80048c4:	69b8      	ldr	r0, [r7, #24]
 80048c6:	4798      	blx	r3
    newScreen->bindTransition(*newTransition);
 80048c8:	6979      	ldr	r1, [r7, #20]
 80048ca:	69f8      	ldr	r0, [r7, #28]
 80048cc:	f018 fce0 	bl	801d290 <_ZN8touchgfx6Screen14bindTransitionERNS_10TransitionE>
    newTransition->init();
 80048d0:	697b      	ldr	r3, [r7, #20]
 80048d2:	681b      	ldr	r3, [r3, #0]
 80048d4:	3310      	adds	r3, #16
 80048d6:	681b      	ldr	r3, [r3, #0]
 80048d8:	6978      	ldr	r0, [r7, #20]
 80048da:	4798      	blx	r3
    newTransition->invalidate();
 80048dc:	697b      	ldr	r3, [r7, #20]
 80048de:	681b      	ldr	r3, [r3, #0]
 80048e0:	3314      	adds	r3, #20
 80048e2:	681b      	ldr	r3, [r3, #0]
 80048e4:	6978      	ldr	r0, [r7, #20]
 80048e6:	4798      	blx	r3
}
 80048e8:	bf00      	nop

    finalizeTransition((Screen*)newScreen, (Presenter*)newPresenter, (Transition*)newTransition);

    return newPresenter;
 80048ea:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
}
 80048ec:	4618      	mov	r0, r3
 80048ee:	373c      	adds	r7, #60	@ 0x3c
 80048f0:	46bd      	mov	sp, r7
 80048f2:	bd90      	pop	{r4, r7, pc}
 80048f4:	0802c1cc 	.word	0x0802c1cc
 80048f8:	0802c25c 	.word	0x0802c25c
 80048fc:	0802c328 	.word	0x0802c328
 8004900:	0802c370 	.word	0x0802c370
 8004904:	0802c414 	.word	0x0802c414

08004908 <_ZN8touchgfx14makeTransitionI8MainView13MainPresenterNS_14WipeTransitionILNS_9DirectionE1EEE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_>:
PresenterType* makeTransition(Screen** currentScreen, Presenter** currentPresenter, MVPHeap& heap, Transition** currentTrans, ModelType* model)
 8004908:	b590      	push	{r4, r7, lr}
 800490a:	b08f      	sub	sp, #60	@ 0x3c
 800490c:	af00      	add	r7, sp, #0
 800490e:	60f8      	str	r0, [r7, #12]
 8004910:	60b9      	str	r1, [r7, #8]
 8004912:	607a      	str	r2, [r7, #4]
 8004914:	603b      	str	r3, [r7, #0]
    assert(sizeof(ScreenType) <= heap.screenStorage.element_size() && "View allocation error: Check that all views are added to FrontendHeap::ViewTypes");
 8004916:	687b      	ldr	r3, [r7, #4]
 8004918:	689a      	ldr	r2, [r3, #8]
 800491a:	687b      	ldr	r3, [r7, #4]
 800491c:	689b      	ldr	r3, [r3, #8]
 800491e:	681b      	ldr	r3, [r3, #0]
 8004920:	3320      	adds	r3, #32
 8004922:	681b      	ldr	r3, [r3, #0]
 8004924:	4610      	mov	r0, r2
 8004926:	4798      	blx	r3
 8004928:	4603      	mov	r3, r0
 800492a:	f640 3217 	movw	r2, #2839	@ 0xb17
 800492e:	4293      	cmp	r3, r2
 8004930:	d805      	bhi.n	800493e <_ZN8touchgfx14makeTransitionI8MainView13MainPresenterNS_14WipeTransitionILNS_9DirectionE1EEE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x36>
 8004932:	4b7e      	ldr	r3, [pc, #504]	@ (8004b2c <_ZN8touchgfx14makeTransitionI8MainView13MainPresenterNS_14WipeTransitionILNS_9DirectionE1EEE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x224>)
 8004934:	4a7e      	ldr	r2, [pc, #504]	@ (8004b30 <_ZN8touchgfx14makeTransitionI8MainView13MainPresenterNS_14WipeTransitionILNS_9DirectionE1EEE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x228>)
 8004936:	21a3      	movs	r1, #163	@ 0xa3
 8004938:	487e      	ldr	r0, [pc, #504]	@ (8004b34 <_ZN8touchgfx14makeTransitionI8MainView13MainPresenterNS_14WipeTransitionILNS_9DirectionE1EEE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x22c>)
 800493a:	f026 f983 	bl	802ac44 <__assert_func>
    assert(sizeof(PresenterType) <= heap.presenterStorage.element_size() && "Presenter allocation error: Check that all presenters are added to FrontendHeap::PresenterTypes");
 800493e:	687b      	ldr	r3, [r7, #4]
 8004940:	685a      	ldr	r2, [r3, #4]
 8004942:	687b      	ldr	r3, [r7, #4]
 8004944:	685b      	ldr	r3, [r3, #4]
 8004946:	681b      	ldr	r3, [r3, #0]
 8004948:	3320      	adds	r3, #32
 800494a:	681b      	ldr	r3, [r3, #0]
 800494c:	4610      	mov	r0, r2
 800494e:	4798      	blx	r3
 8004950:	4603      	mov	r3, r0
 8004952:	2b0f      	cmp	r3, #15
 8004954:	d805      	bhi.n	8004962 <_ZN8touchgfx14makeTransitionI8MainView13MainPresenterNS_14WipeTransitionILNS_9DirectionE1EEE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x5a>
 8004956:	4b78      	ldr	r3, [pc, #480]	@ (8004b38 <_ZN8touchgfx14makeTransitionI8MainView13MainPresenterNS_14WipeTransitionILNS_9DirectionE1EEE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x230>)
 8004958:	4a75      	ldr	r2, [pc, #468]	@ (8004b30 <_ZN8touchgfx14makeTransitionI8MainView13MainPresenterNS_14WipeTransitionILNS_9DirectionE1EEE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x228>)
 800495a:	21a4      	movs	r1, #164	@ 0xa4
 800495c:	4875      	ldr	r0, [pc, #468]	@ (8004b34 <_ZN8touchgfx14makeTransitionI8MainView13MainPresenterNS_14WipeTransitionILNS_9DirectionE1EEE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x22c>)
 800495e:	f026 f971 	bl	802ac44 <__assert_func>
    assert(sizeof(TransType) <= heap.transitionStorage.element_size() && "Transition allocation error: Check that all transitions are added to FrontendHeap::TransitionTypes");
 8004962:	687b      	ldr	r3, [r7, #4]
 8004964:	68da      	ldr	r2, [r3, #12]
 8004966:	687b      	ldr	r3, [r7, #4]
 8004968:	68db      	ldr	r3, [r3, #12]
 800496a:	681b      	ldr	r3, [r3, #0]
 800496c:	3320      	adds	r3, #32
 800496e:	681b      	ldr	r3, [r3, #0]
 8004970:	4610      	mov	r0, r2
 8004972:	4798      	blx	r3
 8004974:	4603      	mov	r3, r0
 8004976:	2b37      	cmp	r3, #55	@ 0x37
 8004978:	d805      	bhi.n	8004986 <_ZN8touchgfx14makeTransitionI8MainView13MainPresenterNS_14WipeTransitionILNS_9DirectionE1EEE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x7e>
 800497a:	4b70      	ldr	r3, [pc, #448]	@ (8004b3c <_ZN8touchgfx14makeTransitionI8MainView13MainPresenterNS_14WipeTransitionILNS_9DirectionE1EEE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x234>)
 800497c:	4a6c      	ldr	r2, [pc, #432]	@ (8004b30 <_ZN8touchgfx14makeTransitionI8MainView13MainPresenterNS_14WipeTransitionILNS_9DirectionE1EEE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x228>)
 800497e:	21a5      	movs	r1, #165	@ 0xa5
 8004980:	486c      	ldr	r0, [pc, #432]	@ (8004b34 <_ZN8touchgfx14makeTransitionI8MainView13MainPresenterNS_14WipeTransitionILNS_9DirectionE1EEE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x22c>)
 8004982:	f026 f95f 	bl	802ac44 <__assert_func>
 8004986:	68fb      	ldr	r3, [r7, #12]
 8004988:	62bb      	str	r3, [r7, #40]	@ 0x28
 800498a:	68bb      	ldr	r3, [r7, #8]
 800498c:	627b      	str	r3, [r7, #36]	@ 0x24
 800498e:	683b      	ldr	r3, [r7, #0]
 8004990:	623b      	str	r3, [r7, #32]
    Application::getInstance()->clearAllTimerWidgets();
 8004992:	f016 ffe9 	bl	801b968 <_ZN8touchgfx11Application11getInstanceEv>
 8004996:	4603      	mov	r3, r0
 8004998:	4618      	mov	r0, r3
 800499a:	f017 f833 	bl	801ba04 <_ZN8touchgfx11Application20clearAllTimerWidgetsEv>
    if (*currentTrans)
 800499e:	6a3b      	ldr	r3, [r7, #32]
 80049a0:	681b      	ldr	r3, [r3, #0]
 80049a2:	2b00      	cmp	r3, #0
 80049a4:	d008      	beq.n	80049b8 <_ZN8touchgfx14makeTransitionI8MainView13MainPresenterNS_14WipeTransitionILNS_9DirectionE1EEE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0xb0>
        (*currentTrans)->tearDown();
 80049a6:	6a3b      	ldr	r3, [r7, #32]
 80049a8:	681a      	ldr	r2, [r3, #0]
 80049aa:	6a3b      	ldr	r3, [r7, #32]
 80049ac:	681b      	ldr	r3, [r3, #0]
 80049ae:	681b      	ldr	r3, [r3, #0]
 80049b0:	330c      	adds	r3, #12
 80049b2:	681b      	ldr	r3, [r3, #0]
 80049b4:	4610      	mov	r0, r2
 80049b6:	4798      	blx	r3
    if (*currentTrans)
 80049b8:	6a3b      	ldr	r3, [r7, #32]
 80049ba:	681b      	ldr	r3, [r3, #0]
 80049bc:	2b00      	cmp	r3, #0
 80049be:	d007      	beq.n	80049d0 <_ZN8touchgfx14makeTransitionI8MainView13MainPresenterNS_14WipeTransitionILNS_9DirectionE1EEE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0xc8>
        (*currentTrans)->~Transition();
 80049c0:	6a3b      	ldr	r3, [r7, #32]
 80049c2:	681a      	ldr	r2, [r3, #0]
 80049c4:	6a3b      	ldr	r3, [r7, #32]
 80049c6:	681b      	ldr	r3, [r3, #0]
 80049c8:	681b      	ldr	r3, [r3, #0]
 80049ca:	681b      	ldr	r3, [r3, #0]
 80049cc:	4610      	mov	r0, r2
 80049ce:	4798      	blx	r3
    if (*currentScreen)
 80049d0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80049d2:	681b      	ldr	r3, [r3, #0]
 80049d4:	2b00      	cmp	r3, #0
 80049d6:	d008      	beq.n	80049ea <_ZN8touchgfx14makeTransitionI8MainView13MainPresenterNS_14WipeTransitionILNS_9DirectionE1EEE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0xe2>
        (*currentScreen)->tearDownScreen();
 80049d8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80049da:	681a      	ldr	r2, [r3, #0]
 80049dc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80049de:	681b      	ldr	r3, [r3, #0]
 80049e0:	681b      	ldr	r3, [r3, #0]
 80049e2:	3314      	adds	r3, #20
 80049e4:	681b      	ldr	r3, [r3, #0]
 80049e6:	4610      	mov	r0, r2
 80049e8:	4798      	blx	r3
    if (*currentPresenter)
 80049ea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80049ec:	681b      	ldr	r3, [r3, #0]
 80049ee:	2b00      	cmp	r3, #0
 80049f0:	d008      	beq.n	8004a04 <_ZN8touchgfx14makeTransitionI8MainView13MainPresenterNS_14WipeTransitionILNS_9DirectionE1EEE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0xfc>
        (*currentPresenter)->deactivate();
 80049f2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80049f4:	681a      	ldr	r2, [r3, #0]
 80049f6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80049f8:	681b      	ldr	r3, [r3, #0]
 80049fa:	681b      	ldr	r3, [r3, #0]
 80049fc:	3304      	adds	r3, #4
 80049fe:	681b      	ldr	r3, [r3, #0]
 8004a00:	4610      	mov	r0, r2
 8004a02:	4798      	blx	r3
    if (*currentScreen)
 8004a04:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004a06:	681b      	ldr	r3, [r3, #0]
 8004a08:	2b00      	cmp	r3, #0
 8004a0a:	d007      	beq.n	8004a1c <_ZN8touchgfx14makeTransitionI8MainView13MainPresenterNS_14WipeTransitionILNS_9DirectionE1EEE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x114>
        (*currentScreen)->~Screen();
 8004a0c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004a0e:	681a      	ldr	r2, [r3, #0]
 8004a10:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004a12:	681b      	ldr	r3, [r3, #0]
 8004a14:	681b      	ldr	r3, [r3, #0]
 8004a16:	681b      	ldr	r3, [r3, #0]
 8004a18:	4610      	mov	r0, r2
 8004a1a:	4798      	blx	r3
    if (*currentPresenter)
 8004a1c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004a1e:	681b      	ldr	r3, [r3, #0]
 8004a20:	2b00      	cmp	r3, #0
 8004a22:	d008      	beq.n	8004a36 <_ZN8touchgfx14makeTransitionI8MainView13MainPresenterNS_14WipeTransitionILNS_9DirectionE1EEE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x12e>
        (*currentPresenter)->~Presenter();
 8004a24:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004a26:	681a      	ldr	r2, [r3, #0]
 8004a28:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004a2a:	681b      	ldr	r3, [r3, #0]
 8004a2c:	681b      	ldr	r3, [r3, #0]
 8004a2e:	3308      	adds	r3, #8
 8004a30:	681b      	ldr	r3, [r3, #0]
 8004a32:	4610      	mov	r0, r2
 8004a34:	4798      	blx	r3
}
 8004a36:	bf00      	nop
    TransType* newTransition = new (&heap.transitionStorage.at<TransType>(0)) TransType;
 8004a38:	687b      	ldr	r3, [r7, #4]
 8004a3a:	68db      	ldr	r3, [r3, #12]
 8004a3c:	2100      	movs	r1, #0
 8004a3e:	4618      	mov	r0, r3
 8004a40:	f000 f9df 	bl	8004e02 <_ZN8touchgfx17AbstractPartition2atINS_14WipeTransitionILNS_9DirectionE1EEEEERT_t>
 8004a44:	4603      	mov	r3, r0
 8004a46:	4619      	mov	r1, r3
 8004a48:	2038      	movs	r0, #56	@ 0x38
 8004a4a:	f7ff f9a7 	bl	8003d9c <_ZnwjPv>
 8004a4e:	4604      	mov	r4, r0
 8004a50:	2114      	movs	r1, #20
 8004a52:	4620      	mov	r0, r4
 8004a54:	f000 fa1c 	bl	8004e90 <_ZN8touchgfx14WipeTransitionILNS_9DirectionE1EEC1Eh>
 8004a58:	637c      	str	r4, [r7, #52]	@ 0x34
    ScreenType* newScreen = new (&heap.screenStorage.at<ScreenType>(0)) ScreenType;
 8004a5a:	687b      	ldr	r3, [r7, #4]
 8004a5c:	689b      	ldr	r3, [r3, #8]
 8004a5e:	2100      	movs	r1, #0
 8004a60:	4618      	mov	r0, r3
 8004a62:	f000 f99a 	bl	8004d9a <_ZN8touchgfx17AbstractPartition2atI8MainViewEERT_t>
 8004a66:	4603      	mov	r3, r0
 8004a68:	4619      	mov	r1, r3
 8004a6a:	f640 3018 	movw	r0, #2840	@ 0xb18
 8004a6e:	f7ff f995 	bl	8003d9c <_ZnwjPv>
 8004a72:	4604      	mov	r4, r0
 8004a74:	4620      	mov	r0, r4
 8004a76:	f005 fe4d 	bl	800a714 <_ZN8MainViewC1Ev>
 8004a7a:	633c      	str	r4, [r7, #48]	@ 0x30
    PresenterType* newPresenter = new (&heap.presenterStorage.at<PresenterType>(0)) PresenterType(*newScreen);
 8004a7c:	687b      	ldr	r3, [r7, #4]
 8004a7e:	685b      	ldr	r3, [r3, #4]
 8004a80:	2100      	movs	r1, #0
 8004a82:	4618      	mov	r0, r3
 8004a84:	f000 f99c 	bl	8004dc0 <_ZN8touchgfx17AbstractPartition2atI13MainPresenterEERT_t>
 8004a88:	4603      	mov	r3, r0
 8004a8a:	4619      	mov	r1, r3
 8004a8c:	2010      	movs	r0, #16
 8004a8e:	f7ff f985 	bl	8003d9c <_ZnwjPv>
 8004a92:	4604      	mov	r4, r0
 8004a94:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8004a96:	4620      	mov	r0, r4
 8004a98:	f005 fdae 	bl	800a5f8 <_ZN13MainPresenterC1ER8MainView>
 8004a9c:	62fc      	str	r4, [r7, #44]	@ 0x2c
    *currentTrans = newTransition;
 8004a9e:	683b      	ldr	r3, [r7, #0]
 8004aa0:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8004aa2:	601a      	str	r2, [r3, #0]
    *currentPresenter = newPresenter;
 8004aa4:	68bb      	ldr	r3, [r7, #8]
 8004aa6:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8004aa8:	601a      	str	r2, [r3, #0]
    *currentScreen = newScreen;
 8004aaa:	68fb      	ldr	r3, [r7, #12]
 8004aac:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8004aae:	601a      	str	r2, [r3, #0]
    model->bind(newPresenter);
 8004ab0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004ab2:	2b00      	cmp	r3, #0
 8004ab4:	d002      	beq.n	8004abc <_ZN8touchgfx14makeTransitionI8MainView13MainPresenterNS_14WipeTransitionILNS_9DirectionE1EEE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x1b4>
 8004ab6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004ab8:	3304      	adds	r3, #4
 8004aba:	e000      	b.n	8004abe <_ZN8touchgfx14makeTransitionI8MainView13MainPresenterNS_14WipeTransitionILNS_9DirectionE1EEE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x1b6>
 8004abc:	2300      	movs	r3, #0
 8004abe:	4619      	mov	r1, r3
 8004ac0:	6cb8      	ldr	r0, [r7, #72]	@ 0x48
 8004ac2:	f7ff fbfb 	bl	80042bc <_ZN5Model4bindEP13ModelListener>
    newPresenter->bind(model);
 8004ac6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004ac8:	3304      	adds	r3, #4
 8004aca:	6cb9      	ldr	r1, [r7, #72]	@ 0x48
 8004acc:	4618      	mov	r0, r3
 8004ace:	f7ff fc33 	bl	8004338 <_ZN13ModelListener4bindEP5Model>
    newScreen->bind(*newPresenter);
 8004ad2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004ad4:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8004ad6:	4618      	mov	r0, r3
 8004ad8:	f000 f985 	bl	8004de6 <_ZN8touchgfx4ViewI13MainPresenterE4bindERS1_>
 8004adc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004ade:	61fb      	str	r3, [r7, #28]
 8004ae0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004ae2:	61bb      	str	r3, [r7, #24]
 8004ae4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004ae6:	617b      	str	r3, [r7, #20]
    newScreen->setupScreen();
 8004ae8:	69fb      	ldr	r3, [r7, #28]
 8004aea:	681b      	ldr	r3, [r3, #0]
 8004aec:	330c      	adds	r3, #12
 8004aee:	681b      	ldr	r3, [r3, #0]
 8004af0:	69f8      	ldr	r0, [r7, #28]
 8004af2:	4798      	blx	r3
    newPresenter->activate();
 8004af4:	69bb      	ldr	r3, [r7, #24]
 8004af6:	681b      	ldr	r3, [r3, #0]
 8004af8:	681b      	ldr	r3, [r3, #0]
 8004afa:	69b8      	ldr	r0, [r7, #24]
 8004afc:	4798      	blx	r3
    newScreen->bindTransition(*newTransition);
 8004afe:	6979      	ldr	r1, [r7, #20]
 8004b00:	69f8      	ldr	r0, [r7, #28]
 8004b02:	f018 fbc5 	bl	801d290 <_ZN8touchgfx6Screen14bindTransitionERNS_10TransitionE>
    newTransition->init();
 8004b06:	697b      	ldr	r3, [r7, #20]
 8004b08:	681b      	ldr	r3, [r3, #0]
 8004b0a:	3310      	adds	r3, #16
 8004b0c:	681b      	ldr	r3, [r3, #0]
 8004b0e:	6978      	ldr	r0, [r7, #20]
 8004b10:	4798      	blx	r3
    newTransition->invalidate();
 8004b12:	697b      	ldr	r3, [r7, #20]
 8004b14:	681b      	ldr	r3, [r3, #0]
 8004b16:	3314      	adds	r3, #20
 8004b18:	681b      	ldr	r3, [r3, #0]
 8004b1a:	6978      	ldr	r0, [r7, #20]
 8004b1c:	4798      	blx	r3
}
 8004b1e:	bf00      	nop
    return newPresenter;
 8004b20:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
}
 8004b22:	4618      	mov	r0, r3
 8004b24:	373c      	adds	r7, #60	@ 0x3c
 8004b26:	46bd      	mov	sp, r7
 8004b28:	bd90      	pop	{r4, r7, pc}
 8004b2a:	bf00      	nop
 8004b2c:	0802c1cc 	.word	0x0802c1cc
 8004b30:	0802c4b8 	.word	0x0802c4b8
 8004b34:	0802c328 	.word	0x0802c328
 8004b38:	0802c370 	.word	0x0802c370
 8004b3c:	0802c414 	.word	0x0802c414

08004b40 <_ZN8touchgfx14makeTransitionI20Localize_AnomalyView25Localize_AnomalyPresenterNS_14WipeTransitionILNS_9DirectionE0EEE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_>:
PresenterType* makeTransition(Screen** currentScreen, Presenter** currentPresenter, MVPHeap& heap, Transition** currentTrans, ModelType* model)
 8004b40:	b590      	push	{r4, r7, lr}
 8004b42:	b08f      	sub	sp, #60	@ 0x3c
 8004b44:	af00      	add	r7, sp, #0
 8004b46:	60f8      	str	r0, [r7, #12]
 8004b48:	60b9      	str	r1, [r7, #8]
 8004b4a:	607a      	str	r2, [r7, #4]
 8004b4c:	603b      	str	r3, [r7, #0]
    assert(sizeof(ScreenType) <= heap.screenStorage.element_size() && "View allocation error: Check that all views are added to FrontendHeap::ViewTypes");
 8004b4e:	687b      	ldr	r3, [r7, #4]
 8004b50:	689a      	ldr	r2, [r3, #8]
 8004b52:	687b      	ldr	r3, [r7, #4]
 8004b54:	689b      	ldr	r3, [r3, #8]
 8004b56:	681b      	ldr	r3, [r3, #0]
 8004b58:	3320      	adds	r3, #32
 8004b5a:	681b      	ldr	r3, [r3, #0]
 8004b5c:	4610      	mov	r0, r2
 8004b5e:	4798      	blx	r3
 8004b60:	4603      	mov	r3, r0
 8004b62:	f5b3 7f70 	cmp.w	r3, #960	@ 0x3c0
 8004b66:	d205      	bcs.n	8004b74 <_ZN8touchgfx14makeTransitionI20Localize_AnomalyView25Localize_AnomalyPresenterNS_14WipeTransitionILNS_9DirectionE0EEE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x34>
 8004b68:	4b7d      	ldr	r3, [pc, #500]	@ (8004d60 <_ZN8touchgfx14makeTransitionI20Localize_AnomalyView25Localize_AnomalyPresenterNS_14WipeTransitionILNS_9DirectionE0EEE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x220>)
 8004b6a:	4a7e      	ldr	r2, [pc, #504]	@ (8004d64 <_ZN8touchgfx14makeTransitionI20Localize_AnomalyView25Localize_AnomalyPresenterNS_14WipeTransitionILNS_9DirectionE0EEE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x224>)
 8004b6c:	21a3      	movs	r1, #163	@ 0xa3
 8004b6e:	487e      	ldr	r0, [pc, #504]	@ (8004d68 <_ZN8touchgfx14makeTransitionI20Localize_AnomalyView25Localize_AnomalyPresenterNS_14WipeTransitionILNS_9DirectionE0EEE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x228>)
 8004b70:	f026 f868 	bl	802ac44 <__assert_func>
    assert(sizeof(PresenterType) <= heap.presenterStorage.element_size() && "Presenter allocation error: Check that all presenters are added to FrontendHeap::PresenterTypes");
 8004b74:	687b      	ldr	r3, [r7, #4]
 8004b76:	685a      	ldr	r2, [r3, #4]
 8004b78:	687b      	ldr	r3, [r7, #4]
 8004b7a:	685b      	ldr	r3, [r3, #4]
 8004b7c:	681b      	ldr	r3, [r3, #0]
 8004b7e:	3320      	adds	r3, #32
 8004b80:	681b      	ldr	r3, [r3, #0]
 8004b82:	4610      	mov	r0, r2
 8004b84:	4798      	blx	r3
 8004b86:	4603      	mov	r3, r0
 8004b88:	2b0f      	cmp	r3, #15
 8004b8a:	d805      	bhi.n	8004b98 <_ZN8touchgfx14makeTransitionI20Localize_AnomalyView25Localize_AnomalyPresenterNS_14WipeTransitionILNS_9DirectionE0EEE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x58>
 8004b8c:	4b77      	ldr	r3, [pc, #476]	@ (8004d6c <_ZN8touchgfx14makeTransitionI20Localize_AnomalyView25Localize_AnomalyPresenterNS_14WipeTransitionILNS_9DirectionE0EEE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x22c>)
 8004b8e:	4a75      	ldr	r2, [pc, #468]	@ (8004d64 <_ZN8touchgfx14makeTransitionI20Localize_AnomalyView25Localize_AnomalyPresenterNS_14WipeTransitionILNS_9DirectionE0EEE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x224>)
 8004b90:	21a4      	movs	r1, #164	@ 0xa4
 8004b92:	4875      	ldr	r0, [pc, #468]	@ (8004d68 <_ZN8touchgfx14makeTransitionI20Localize_AnomalyView25Localize_AnomalyPresenterNS_14WipeTransitionILNS_9DirectionE0EEE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x228>)
 8004b94:	f026 f856 	bl	802ac44 <__assert_func>
    assert(sizeof(TransType) <= heap.transitionStorage.element_size() && "Transition allocation error: Check that all transitions are added to FrontendHeap::TransitionTypes");
 8004b98:	687b      	ldr	r3, [r7, #4]
 8004b9a:	68da      	ldr	r2, [r3, #12]
 8004b9c:	687b      	ldr	r3, [r7, #4]
 8004b9e:	68db      	ldr	r3, [r3, #12]
 8004ba0:	681b      	ldr	r3, [r3, #0]
 8004ba2:	3320      	adds	r3, #32
 8004ba4:	681b      	ldr	r3, [r3, #0]
 8004ba6:	4610      	mov	r0, r2
 8004ba8:	4798      	blx	r3
 8004baa:	4603      	mov	r3, r0
 8004bac:	2b37      	cmp	r3, #55	@ 0x37
 8004bae:	d805      	bhi.n	8004bbc <_ZN8touchgfx14makeTransitionI20Localize_AnomalyView25Localize_AnomalyPresenterNS_14WipeTransitionILNS_9DirectionE0EEE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x7c>
 8004bb0:	4b6f      	ldr	r3, [pc, #444]	@ (8004d70 <_ZN8touchgfx14makeTransitionI20Localize_AnomalyView25Localize_AnomalyPresenterNS_14WipeTransitionILNS_9DirectionE0EEE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x230>)
 8004bb2:	4a6c      	ldr	r2, [pc, #432]	@ (8004d64 <_ZN8touchgfx14makeTransitionI20Localize_AnomalyView25Localize_AnomalyPresenterNS_14WipeTransitionILNS_9DirectionE0EEE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x224>)
 8004bb4:	21a5      	movs	r1, #165	@ 0xa5
 8004bb6:	486c      	ldr	r0, [pc, #432]	@ (8004d68 <_ZN8touchgfx14makeTransitionI20Localize_AnomalyView25Localize_AnomalyPresenterNS_14WipeTransitionILNS_9DirectionE0EEE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x228>)
 8004bb8:	f026 f844 	bl	802ac44 <__assert_func>
 8004bbc:	68fb      	ldr	r3, [r7, #12]
 8004bbe:	62bb      	str	r3, [r7, #40]	@ 0x28
 8004bc0:	68bb      	ldr	r3, [r7, #8]
 8004bc2:	627b      	str	r3, [r7, #36]	@ 0x24
 8004bc4:	683b      	ldr	r3, [r7, #0]
 8004bc6:	623b      	str	r3, [r7, #32]
    Application::getInstance()->clearAllTimerWidgets();
 8004bc8:	f016 fece 	bl	801b968 <_ZN8touchgfx11Application11getInstanceEv>
 8004bcc:	4603      	mov	r3, r0
 8004bce:	4618      	mov	r0, r3
 8004bd0:	f016 ff18 	bl	801ba04 <_ZN8touchgfx11Application20clearAllTimerWidgetsEv>
    if (*currentTrans)
 8004bd4:	6a3b      	ldr	r3, [r7, #32]
 8004bd6:	681b      	ldr	r3, [r3, #0]
 8004bd8:	2b00      	cmp	r3, #0
 8004bda:	d008      	beq.n	8004bee <_ZN8touchgfx14makeTransitionI20Localize_AnomalyView25Localize_AnomalyPresenterNS_14WipeTransitionILNS_9DirectionE0EEE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0xae>
        (*currentTrans)->tearDown();
 8004bdc:	6a3b      	ldr	r3, [r7, #32]
 8004bde:	681a      	ldr	r2, [r3, #0]
 8004be0:	6a3b      	ldr	r3, [r7, #32]
 8004be2:	681b      	ldr	r3, [r3, #0]
 8004be4:	681b      	ldr	r3, [r3, #0]
 8004be6:	330c      	adds	r3, #12
 8004be8:	681b      	ldr	r3, [r3, #0]
 8004bea:	4610      	mov	r0, r2
 8004bec:	4798      	blx	r3
    if (*currentTrans)
 8004bee:	6a3b      	ldr	r3, [r7, #32]
 8004bf0:	681b      	ldr	r3, [r3, #0]
 8004bf2:	2b00      	cmp	r3, #0
 8004bf4:	d007      	beq.n	8004c06 <_ZN8touchgfx14makeTransitionI20Localize_AnomalyView25Localize_AnomalyPresenterNS_14WipeTransitionILNS_9DirectionE0EEE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0xc6>
        (*currentTrans)->~Transition();
 8004bf6:	6a3b      	ldr	r3, [r7, #32]
 8004bf8:	681a      	ldr	r2, [r3, #0]
 8004bfa:	6a3b      	ldr	r3, [r7, #32]
 8004bfc:	681b      	ldr	r3, [r3, #0]
 8004bfe:	681b      	ldr	r3, [r3, #0]
 8004c00:	681b      	ldr	r3, [r3, #0]
 8004c02:	4610      	mov	r0, r2
 8004c04:	4798      	blx	r3
    if (*currentScreen)
 8004c06:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004c08:	681b      	ldr	r3, [r3, #0]
 8004c0a:	2b00      	cmp	r3, #0
 8004c0c:	d008      	beq.n	8004c20 <_ZN8touchgfx14makeTransitionI20Localize_AnomalyView25Localize_AnomalyPresenterNS_14WipeTransitionILNS_9DirectionE0EEE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0xe0>
        (*currentScreen)->tearDownScreen();
 8004c0e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004c10:	681a      	ldr	r2, [r3, #0]
 8004c12:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004c14:	681b      	ldr	r3, [r3, #0]
 8004c16:	681b      	ldr	r3, [r3, #0]
 8004c18:	3314      	adds	r3, #20
 8004c1a:	681b      	ldr	r3, [r3, #0]
 8004c1c:	4610      	mov	r0, r2
 8004c1e:	4798      	blx	r3
    if (*currentPresenter)
 8004c20:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004c22:	681b      	ldr	r3, [r3, #0]
 8004c24:	2b00      	cmp	r3, #0
 8004c26:	d008      	beq.n	8004c3a <_ZN8touchgfx14makeTransitionI20Localize_AnomalyView25Localize_AnomalyPresenterNS_14WipeTransitionILNS_9DirectionE0EEE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0xfa>
        (*currentPresenter)->deactivate();
 8004c28:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004c2a:	681a      	ldr	r2, [r3, #0]
 8004c2c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004c2e:	681b      	ldr	r3, [r3, #0]
 8004c30:	681b      	ldr	r3, [r3, #0]
 8004c32:	3304      	adds	r3, #4
 8004c34:	681b      	ldr	r3, [r3, #0]
 8004c36:	4610      	mov	r0, r2
 8004c38:	4798      	blx	r3
    if (*currentScreen)
 8004c3a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004c3c:	681b      	ldr	r3, [r3, #0]
 8004c3e:	2b00      	cmp	r3, #0
 8004c40:	d007      	beq.n	8004c52 <_ZN8touchgfx14makeTransitionI20Localize_AnomalyView25Localize_AnomalyPresenterNS_14WipeTransitionILNS_9DirectionE0EEE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x112>
        (*currentScreen)->~Screen();
 8004c42:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004c44:	681a      	ldr	r2, [r3, #0]
 8004c46:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004c48:	681b      	ldr	r3, [r3, #0]
 8004c4a:	681b      	ldr	r3, [r3, #0]
 8004c4c:	681b      	ldr	r3, [r3, #0]
 8004c4e:	4610      	mov	r0, r2
 8004c50:	4798      	blx	r3
    if (*currentPresenter)
 8004c52:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004c54:	681b      	ldr	r3, [r3, #0]
 8004c56:	2b00      	cmp	r3, #0
 8004c58:	d008      	beq.n	8004c6c <_ZN8touchgfx14makeTransitionI20Localize_AnomalyView25Localize_AnomalyPresenterNS_14WipeTransitionILNS_9DirectionE0EEE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x12c>
        (*currentPresenter)->~Presenter();
 8004c5a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004c5c:	681a      	ldr	r2, [r3, #0]
 8004c5e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004c60:	681b      	ldr	r3, [r3, #0]
 8004c62:	681b      	ldr	r3, [r3, #0]
 8004c64:	3308      	adds	r3, #8
 8004c66:	681b      	ldr	r3, [r3, #0]
 8004c68:	4610      	mov	r0, r2
 8004c6a:	4798      	blx	r3
}
 8004c6c:	bf00      	nop
    TransType* newTransition = new (&heap.transitionStorage.at<TransType>(0)) TransType;
 8004c6e:	687b      	ldr	r3, [r7, #4]
 8004c70:	68db      	ldr	r3, [r3, #12]
 8004c72:	2100      	movs	r1, #0
 8004c74:	4618      	mov	r0, r3
 8004c76:	f000 f94d 	bl	8004f14 <_ZN8touchgfx17AbstractPartition2atINS_14WipeTransitionILNS_9DirectionE0EEEEERT_t>
 8004c7a:	4603      	mov	r3, r0
 8004c7c:	4619      	mov	r1, r3
 8004c7e:	2038      	movs	r0, #56	@ 0x38
 8004c80:	f7ff f88c 	bl	8003d9c <_ZnwjPv>
 8004c84:	4604      	mov	r4, r0
 8004c86:	2114      	movs	r1, #20
 8004c88:	4620      	mov	r0, r4
 8004c8a:	f000 f98b 	bl	8004fa4 <_ZN8touchgfx14WipeTransitionILNS_9DirectionE0EEC1Eh>
 8004c8e:	637c      	str	r4, [r7, #52]	@ 0x34
    ScreenType* newScreen = new (&heap.screenStorage.at<ScreenType>(0)) ScreenType;
 8004c90:	687b      	ldr	r3, [r7, #4]
 8004c92:	689b      	ldr	r3, [r3, #8]
 8004c94:	2100      	movs	r1, #0
 8004c96:	4618      	mov	r0, r3
 8004c98:	f000 f9c6 	bl	8005028 <_ZN8touchgfx17AbstractPartition2atI20Localize_AnomalyViewEERT_t>
 8004c9c:	4603      	mov	r3, r0
 8004c9e:	4619      	mov	r1, r3
 8004ca0:	f44f 7070 	mov.w	r0, #960	@ 0x3c0
 8004ca4:	f7ff f87a 	bl	8003d9c <_ZnwjPv>
 8004ca8:	4604      	mov	r4, r0
 8004caa:	4620      	mov	r0, r4
 8004cac:	f005 fafa 	bl	800a2a4 <_ZN20Localize_AnomalyViewC1Ev>
 8004cb0:	633c      	str	r4, [r7, #48]	@ 0x30
    PresenterType* newPresenter = new (&heap.presenterStorage.at<PresenterType>(0)) PresenterType(*newScreen);
 8004cb2:	687b      	ldr	r3, [r7, #4]
 8004cb4:	685b      	ldr	r3, [r3, #4]
 8004cb6:	2100      	movs	r1, #0
 8004cb8:	4618      	mov	r0, r3
 8004cba:	f000 f9c8 	bl	800504e <_ZN8touchgfx17AbstractPartition2atI25Localize_AnomalyPresenterEERT_t>
 8004cbe:	4603      	mov	r3, r0
 8004cc0:	4619      	mov	r1, r3
 8004cc2:	2010      	movs	r0, #16
 8004cc4:	f7ff f86a 	bl	8003d9c <_ZnwjPv>
 8004cc8:	4604      	mov	r4, r0
 8004cca:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8004ccc:	4620      	mov	r0, r4
 8004cce:	f005 fa91 	bl	800a1f4 <_ZN25Localize_AnomalyPresenterC1ER20Localize_AnomalyView>
 8004cd2:	62fc      	str	r4, [r7, #44]	@ 0x2c
    *currentTrans = newTransition;
 8004cd4:	683b      	ldr	r3, [r7, #0]
 8004cd6:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8004cd8:	601a      	str	r2, [r3, #0]
    *currentPresenter = newPresenter;
 8004cda:	68bb      	ldr	r3, [r7, #8]
 8004cdc:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8004cde:	601a      	str	r2, [r3, #0]
    *currentScreen = newScreen;
 8004ce0:	68fb      	ldr	r3, [r7, #12]
 8004ce2:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8004ce4:	601a      	str	r2, [r3, #0]
    model->bind(newPresenter);
 8004ce6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004ce8:	2b00      	cmp	r3, #0
 8004cea:	d002      	beq.n	8004cf2 <_ZN8touchgfx14makeTransitionI20Localize_AnomalyView25Localize_AnomalyPresenterNS_14WipeTransitionILNS_9DirectionE0EEE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x1b2>
 8004cec:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004cee:	3304      	adds	r3, #4
 8004cf0:	e000      	b.n	8004cf4 <_ZN8touchgfx14makeTransitionI20Localize_AnomalyView25Localize_AnomalyPresenterNS_14WipeTransitionILNS_9DirectionE0EEE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x1b4>
 8004cf2:	2300      	movs	r3, #0
 8004cf4:	4619      	mov	r1, r3
 8004cf6:	6cb8      	ldr	r0, [r7, #72]	@ 0x48
 8004cf8:	f7ff fae0 	bl	80042bc <_ZN5Model4bindEP13ModelListener>
    newPresenter->bind(model);
 8004cfc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004cfe:	3304      	adds	r3, #4
 8004d00:	6cb9      	ldr	r1, [r7, #72]	@ 0x48
 8004d02:	4618      	mov	r0, r3
 8004d04:	f7ff fb18 	bl	8004338 <_ZN13ModelListener4bindEP5Model>
    newScreen->bind(*newPresenter);
 8004d08:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004d0a:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8004d0c:	4618      	mov	r0, r3
 8004d0e:	f000 f9b1 	bl	8005074 <_ZN8touchgfx4ViewI25Localize_AnomalyPresenterE4bindERS1_>
 8004d12:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004d14:	61fb      	str	r3, [r7, #28]
 8004d16:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004d18:	61bb      	str	r3, [r7, #24]
 8004d1a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004d1c:	617b      	str	r3, [r7, #20]
    newScreen->setupScreen();
 8004d1e:	69fb      	ldr	r3, [r7, #28]
 8004d20:	681b      	ldr	r3, [r3, #0]
 8004d22:	330c      	adds	r3, #12
 8004d24:	681b      	ldr	r3, [r3, #0]
 8004d26:	69f8      	ldr	r0, [r7, #28]
 8004d28:	4798      	blx	r3
    newPresenter->activate();
 8004d2a:	69bb      	ldr	r3, [r7, #24]
 8004d2c:	681b      	ldr	r3, [r3, #0]
 8004d2e:	681b      	ldr	r3, [r3, #0]
 8004d30:	69b8      	ldr	r0, [r7, #24]
 8004d32:	4798      	blx	r3
    newScreen->bindTransition(*newTransition);
 8004d34:	6979      	ldr	r1, [r7, #20]
 8004d36:	69f8      	ldr	r0, [r7, #28]
 8004d38:	f018 faaa 	bl	801d290 <_ZN8touchgfx6Screen14bindTransitionERNS_10TransitionE>
    newTransition->init();
 8004d3c:	697b      	ldr	r3, [r7, #20]
 8004d3e:	681b      	ldr	r3, [r3, #0]
 8004d40:	3310      	adds	r3, #16
 8004d42:	681b      	ldr	r3, [r3, #0]
 8004d44:	6978      	ldr	r0, [r7, #20]
 8004d46:	4798      	blx	r3
    newTransition->invalidate();
 8004d48:	697b      	ldr	r3, [r7, #20]
 8004d4a:	681b      	ldr	r3, [r3, #0]
 8004d4c:	3314      	adds	r3, #20
 8004d4e:	681b      	ldr	r3, [r3, #0]
 8004d50:	6978      	ldr	r0, [r7, #20]
 8004d52:	4798      	blx	r3
}
 8004d54:	bf00      	nop
    return newPresenter;
 8004d56:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
}
 8004d58:	4618      	mov	r0, r3
 8004d5a:	373c      	adds	r7, #60	@ 0x3c
 8004d5c:	46bd      	mov	sp, r7
 8004d5e:	bd90      	pop	{r4, r7, pc}
 8004d60:	0802c1cc 	.word	0x0802c1cc
 8004d64:	0802c598 	.word	0x0802c598
 8004d68:	0802c328 	.word	0x0802c328
 8004d6c:	0802c370 	.word	0x0802c370
 8004d70:	0802c414 	.word	0x0802c414

08004d74 <_ZN8touchgfx17AbstractPartition2atINS_12NoTransitionEEERT_t>:
     * @param  index The index into the Partition storage where the returned object is located.
     *
     * @return A typed reference to the object at the specified index.
     */
    template <typename T>
    T& at(const uint16_t index)
 8004d74:	b580      	push	{r7, lr}
 8004d76:	b082      	sub	sp, #8
 8004d78:	af00      	add	r7, sp, #0
 8004d7a:	6078      	str	r0, [r7, #4]
 8004d7c:	460b      	mov	r3, r1
 8004d7e:	807b      	strh	r3, [r7, #2]
    {
        return *static_cast<T*>(element(index));
 8004d80:	687b      	ldr	r3, [r7, #4]
 8004d82:	681b      	ldr	r3, [r3, #0]
 8004d84:	3324      	adds	r3, #36	@ 0x24
 8004d86:	681b      	ldr	r3, [r3, #0]
 8004d88:	887a      	ldrh	r2, [r7, #2]
 8004d8a:	4611      	mov	r1, r2
 8004d8c:	6878      	ldr	r0, [r7, #4]
 8004d8e:	4798      	blx	r3
 8004d90:	4603      	mov	r3, r0
    }
 8004d92:	4618      	mov	r0, r3
 8004d94:	3708      	adds	r7, #8
 8004d96:	46bd      	mov	sp, r7
 8004d98:	bd80      	pop	{r7, pc}

08004d9a <_ZN8touchgfx17AbstractPartition2atI8MainViewEERT_t>:
    T& at(const uint16_t index)
 8004d9a:	b580      	push	{r7, lr}
 8004d9c:	b082      	sub	sp, #8
 8004d9e:	af00      	add	r7, sp, #0
 8004da0:	6078      	str	r0, [r7, #4]
 8004da2:	460b      	mov	r3, r1
 8004da4:	807b      	strh	r3, [r7, #2]
        return *static_cast<T*>(element(index));
 8004da6:	687b      	ldr	r3, [r7, #4]
 8004da8:	681b      	ldr	r3, [r3, #0]
 8004daa:	3324      	adds	r3, #36	@ 0x24
 8004dac:	681b      	ldr	r3, [r3, #0]
 8004dae:	887a      	ldrh	r2, [r7, #2]
 8004db0:	4611      	mov	r1, r2
 8004db2:	6878      	ldr	r0, [r7, #4]
 8004db4:	4798      	blx	r3
 8004db6:	4603      	mov	r3, r0
    }
 8004db8:	4618      	mov	r0, r3
 8004dba:	3708      	adds	r7, #8
 8004dbc:	46bd      	mov	sp, r7
 8004dbe:	bd80      	pop	{r7, pc}

08004dc0 <_ZN8touchgfx17AbstractPartition2atI13MainPresenterEERT_t>:
    T& at(const uint16_t index)
 8004dc0:	b580      	push	{r7, lr}
 8004dc2:	b082      	sub	sp, #8
 8004dc4:	af00      	add	r7, sp, #0
 8004dc6:	6078      	str	r0, [r7, #4]
 8004dc8:	460b      	mov	r3, r1
 8004dca:	807b      	strh	r3, [r7, #2]
        return *static_cast<T*>(element(index));
 8004dcc:	687b      	ldr	r3, [r7, #4]
 8004dce:	681b      	ldr	r3, [r3, #0]
 8004dd0:	3324      	adds	r3, #36	@ 0x24
 8004dd2:	681b      	ldr	r3, [r3, #0]
 8004dd4:	887a      	ldrh	r2, [r7, #2]
 8004dd6:	4611      	mov	r1, r2
 8004dd8:	6878      	ldr	r0, [r7, #4]
 8004dda:	4798      	blx	r3
 8004ddc:	4603      	mov	r3, r0
    }
 8004dde:	4618      	mov	r0, r3
 8004de0:	3708      	adds	r7, #8
 8004de2:	46bd      	mov	sp, r7
 8004de4:	bd80      	pop	{r7, pc}

08004de6 <_ZN8touchgfx4ViewI13MainPresenterE4bindERS1_>:
     * Binds an instance of a specific Presenter type (subclass) to the View instance. This
     * function is called automatically when a new presenter/view pair is activated.
     *
     * @param [in] presenter The specific Presenter to be associated with the View.
     */
    void bind(T& presenter)
 8004de6:	b480      	push	{r7}
 8004de8:	b083      	sub	sp, #12
 8004dea:	af00      	add	r7, sp, #0
 8004dec:	6078      	str	r0, [r7, #4]
 8004dee:	6039      	str	r1, [r7, #0]
    {
        this->presenter = &presenter;
 8004df0:	687b      	ldr	r3, [r7, #4]
 8004df2:	683a      	ldr	r2, [r7, #0]
 8004df4:	63da      	str	r2, [r3, #60]	@ 0x3c
    }
 8004df6:	bf00      	nop
 8004df8:	370c      	adds	r7, #12
 8004dfa:	46bd      	mov	sp, r7
 8004dfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e00:	4770      	bx	lr

08004e02 <_ZN8touchgfx17AbstractPartition2atINS_14WipeTransitionILNS_9DirectionE1EEEEERT_t>:
    T& at(const uint16_t index)
 8004e02:	b580      	push	{r7, lr}
 8004e04:	b082      	sub	sp, #8
 8004e06:	af00      	add	r7, sp, #0
 8004e08:	6078      	str	r0, [r7, #4]
 8004e0a:	460b      	mov	r3, r1
 8004e0c:	807b      	strh	r3, [r7, #2]
        return *static_cast<T*>(element(index));
 8004e0e:	687b      	ldr	r3, [r7, #4]
 8004e10:	681b      	ldr	r3, [r3, #0]
 8004e12:	3324      	adds	r3, #36	@ 0x24
 8004e14:	681b      	ldr	r3, [r3, #0]
 8004e16:	887a      	ldrh	r2, [r7, #2]
 8004e18:	4611      	mov	r1, r2
 8004e1a:	6878      	ldr	r0, [r7, #4]
 8004e1c:	4798      	blx	r3
 8004e1e:	4603      	mov	r3, r0
    }
 8004e20:	4618      	mov	r0, r3
 8004e22:	3708      	adds	r7, #8
 8004e24:	46bd      	mov	sp, r7
 8004e26:	bd80      	pop	{r7, pc}

08004e28 <_ZN8touchgfx14WipeTransitionILNS_9DirectionE1EE13FullSolidRectC1Ev>:
{
public:
    /**
     * A Widget that reports solid and but does not draw anything.
     */
    class FullSolidRect : public Widget
 8004e28:	b580      	push	{r7, lr}
 8004e2a:	b082      	sub	sp, #8
 8004e2c:	af00      	add	r7, sp, #0
 8004e2e:	6078      	str	r0, [r7, #4]
 8004e30:	687b      	ldr	r3, [r7, #4]
 8004e32:	4618      	mov	r0, r3
 8004e34:	f7ff fa8e 	bl	8004354 <_ZN8touchgfx6WidgetC1Ev>
 8004e38:	4a03      	ldr	r2, [pc, #12]	@ (8004e48 <_ZN8touchgfx14WipeTransitionILNS_9DirectionE1EE13FullSolidRectC1Ev+0x20>)
 8004e3a:	687b      	ldr	r3, [r7, #4]
 8004e3c:	601a      	str	r2, [r3, #0]
 8004e3e:	687b      	ldr	r3, [r7, #4]
 8004e40:	4618      	mov	r0, r3
 8004e42:	3708      	adds	r7, #8
 8004e44:	46bd      	mov	sp, r7
 8004e46:	bd80      	pop	{r7, pc}
 8004e48:	0802d140 	.word	0x0802d140

08004e4c <_ZN8touchgfx14WipeTransitionILNS_9DirectionE1EE13FullSolidRectD1Ev>:
 8004e4c:	b580      	push	{r7, lr}
 8004e4e:	b082      	sub	sp, #8
 8004e50:	af00      	add	r7, sp, #0
 8004e52:	6078      	str	r0, [r7, #4]
 8004e54:	4a05      	ldr	r2, [pc, #20]	@ (8004e6c <_ZN8touchgfx14WipeTransitionILNS_9DirectionE1EE13FullSolidRectD1Ev+0x20>)
 8004e56:	687b      	ldr	r3, [r7, #4]
 8004e58:	601a      	str	r2, [r3, #0]
 8004e5a:	687b      	ldr	r3, [r7, #4]
 8004e5c:	4618      	mov	r0, r3
 8004e5e:	f7ff fa8b 	bl	8004378 <_ZN8touchgfx6WidgetD1Ev>
 8004e62:	687b      	ldr	r3, [r7, #4]
 8004e64:	4618      	mov	r0, r3
 8004e66:	3708      	adds	r7, #8
 8004e68:	46bd      	mov	sp, r7
 8004e6a:	bd80      	pop	{r7, pc}
 8004e6c:	0802d140 	.word	0x0802d140

08004e70 <_ZN8touchgfx14WipeTransitionILNS_9DirectionE1EE13FullSolidRectD0Ev>:
 8004e70:	b580      	push	{r7, lr}
 8004e72:	b082      	sub	sp, #8
 8004e74:	af00      	add	r7, sp, #0
 8004e76:	6078      	str	r0, [r7, #4]
 8004e78:	6878      	ldr	r0, [r7, #4]
 8004e7a:	f7ff ffe7 	bl	8004e4c <_ZN8touchgfx14WipeTransitionILNS_9DirectionE1EE13FullSolidRectD1Ev>
 8004e7e:	2128      	movs	r1, #40	@ 0x28
 8004e80:	6878      	ldr	r0, [r7, #4]
 8004e82:	f025 feb0 	bl	802abe6 <_ZdlPvj>
 8004e86:	687b      	ldr	r3, [r7, #4]
 8004e88:	4618      	mov	r0, r3
 8004e8a:	3708      	adds	r7, #8
 8004e8c:	46bd      	mov	sp, r7
 8004e8e:	bd80      	pop	{r7, pc}

08004e90 <_ZN8touchgfx14WipeTransitionILNS_9DirectionE1EEC1Eh>:
    /**
     * Initializes a new instance of the WipeTransition class.
     *
     * @param  transitionSteps (Optional) Number of steps in the transition animation.
     */
    WipeTransition(const uint8_t transitionSteps = 20)
 8004e90:	b580      	push	{r7, lr}
 8004e92:	b084      	sub	sp, #16
 8004e94:	af02      	add	r7, sp, #8
 8004e96:	6078      	str	r0, [r7, #4]
 8004e98:	460b      	mov	r3, r1
 8004e9a:	70fb      	strb	r3, [r7, #3]
        : Transition(),
          animationSteps(transitionSteps),
          animationCounter(0),
          calculatedValue(0),
          solid()
 8004e9c:	687b      	ldr	r3, [r7, #4]
 8004e9e:	4618      	mov	r0, r3
 8004ea0:	f7ff f97a 	bl	8004198 <_ZN8touchgfx10TransitionC1Ev>
 8004ea4:	4a18      	ldr	r2, [pc, #96]	@ (8004f08 <_ZN8touchgfx14WipeTransitionILNS_9DirectionE1EEC1Eh+0x78>)
 8004ea6:	687b      	ldr	r3, [r7, #4]
 8004ea8:	601a      	str	r2, [r3, #0]
          animationSteps(transitionSteps),
 8004eaa:	687b      	ldr	r3, [r7, #4]
 8004eac:	78fa      	ldrb	r2, [r7, #3]
 8004eae:	725a      	strb	r2, [r3, #9]
          animationCounter(0),
 8004eb0:	687b      	ldr	r3, [r7, #4]
 8004eb2:	2200      	movs	r2, #0
 8004eb4:	729a      	strb	r2, [r3, #10]
          calculatedValue(0),
 8004eb6:	687b      	ldr	r3, [r7, #4]
 8004eb8:	2200      	movs	r2, #0
 8004eba:	81da      	strh	r2, [r3, #14]
          solid()
 8004ebc:	687b      	ldr	r3, [r7, #4]
 8004ebe:	3310      	adds	r3, #16
 8004ec0:	2228      	movs	r2, #40	@ 0x28
 8004ec2:	2100      	movs	r1, #0
 8004ec4:	4618      	mov	r0, r3
 8004ec6:	f026 f8c4 	bl	802b052 <memset>
 8004eca:	687b      	ldr	r3, [r7, #4]
 8004ecc:	3310      	adds	r3, #16
 8004ece:	4618      	mov	r0, r3
 8004ed0:	f7ff ffaa 	bl	8004e28 <_ZN8touchgfx14WipeTransitionILNS_9DirectionE1EE13FullSolidRectC1Ev>
        case WEST:
            targetValue = HAL::DISPLAY_WIDTH;
            break;
        case NORTH:
        case SOUTH:
            targetValue = HAL::DISPLAY_HEIGHT;
 8004ed4:	4b0d      	ldr	r3, [pc, #52]	@ (8004f0c <_ZN8touchgfx14WipeTransitionILNS_9DirectionE1EEC1Eh+0x7c>)
 8004ed6:	881b      	ldrh	r3, [r3, #0]
 8004ed8:	b21a      	sxth	r2, r3
 8004eda:	687b      	ldr	r3, [r7, #4]
 8004edc:	819a      	strh	r2, [r3, #12]
            break;
 8004ede:	bf00      	nop
            // Nothing to do here
            break;
        }

        // Ensure that the solid area covers the entire screen
        solid.setPosition(0, 0, HAL::DISPLAY_WIDTH, HAL::DISPLAY_HEIGHT);
 8004ee0:	687b      	ldr	r3, [r7, #4]
 8004ee2:	f103 0010 	add.w	r0, r3, #16
 8004ee6:	4b0a      	ldr	r3, [pc, #40]	@ (8004f10 <_ZN8touchgfx14WipeTransitionILNS_9DirectionE1EEC1Eh+0x80>)
 8004ee8:	881b      	ldrh	r3, [r3, #0]
 8004eea:	b21a      	sxth	r2, r3
 8004eec:	4b07      	ldr	r3, [pc, #28]	@ (8004f0c <_ZN8touchgfx14WipeTransitionILNS_9DirectionE1EEC1Eh+0x7c>)
 8004eee:	881b      	ldrh	r3, [r3, #0]
 8004ef0:	b21b      	sxth	r3, r3
 8004ef2:	9300      	str	r3, [sp, #0]
 8004ef4:	4613      	mov	r3, r2
 8004ef6:	2200      	movs	r2, #0
 8004ef8:	2100      	movs	r1, #0
 8004efa:	f7fe ffe2 	bl	8003ec2 <_ZN8touchgfx8Drawable11setPositionEssss>
    }
 8004efe:	687b      	ldr	r3, [r7, #4]
 8004f00:	4618      	mov	r0, r3
 8004f02:	3708      	adds	r7, #8
 8004f04:	46bd      	mov	sp, r7
 8004f06:	bd80      	pop	{r7, pc}
 8004f08:	0802d11c 	.word	0x0802d11c
 8004f0c:	2400b87a 	.word	0x2400b87a
 8004f10:	2400b878 	.word	0x2400b878

08004f14 <_ZN8touchgfx17AbstractPartition2atINS_14WipeTransitionILNS_9DirectionE0EEEEERT_t>:
    T& at(const uint16_t index)
 8004f14:	b580      	push	{r7, lr}
 8004f16:	b082      	sub	sp, #8
 8004f18:	af00      	add	r7, sp, #0
 8004f1a:	6078      	str	r0, [r7, #4]
 8004f1c:	460b      	mov	r3, r1
 8004f1e:	807b      	strh	r3, [r7, #2]
        return *static_cast<T*>(element(index));
 8004f20:	687b      	ldr	r3, [r7, #4]
 8004f22:	681b      	ldr	r3, [r3, #0]
 8004f24:	3324      	adds	r3, #36	@ 0x24
 8004f26:	681b      	ldr	r3, [r3, #0]
 8004f28:	887a      	ldrh	r2, [r7, #2]
 8004f2a:	4611      	mov	r1, r2
 8004f2c:	6878      	ldr	r0, [r7, #4]
 8004f2e:	4798      	blx	r3
 8004f30:	4603      	mov	r3, r0
    }
 8004f32:	4618      	mov	r0, r3
 8004f34:	3708      	adds	r7, #8
 8004f36:	46bd      	mov	sp, r7
 8004f38:	bd80      	pop	{r7, pc}
	...

08004f3c <_ZN8touchgfx14WipeTransitionILNS_9DirectionE0EE13FullSolidRectC1Ev>:
    class FullSolidRect : public Widget
 8004f3c:	b580      	push	{r7, lr}
 8004f3e:	b082      	sub	sp, #8
 8004f40:	af00      	add	r7, sp, #0
 8004f42:	6078      	str	r0, [r7, #4]
 8004f44:	687b      	ldr	r3, [r7, #4]
 8004f46:	4618      	mov	r0, r3
 8004f48:	f7ff fa04 	bl	8004354 <_ZN8touchgfx6WidgetC1Ev>
 8004f4c:	4a03      	ldr	r2, [pc, #12]	@ (8004f5c <_ZN8touchgfx14WipeTransitionILNS_9DirectionE0EE13FullSolidRectC1Ev+0x20>)
 8004f4e:	687b      	ldr	r3, [r7, #4]
 8004f50:	601a      	str	r2, [r3, #0]
 8004f52:	687b      	ldr	r3, [r7, #4]
 8004f54:	4618      	mov	r0, r3
 8004f56:	3708      	adds	r7, #8
 8004f58:	46bd      	mov	sp, r7
 8004f5a:	bd80      	pop	{r7, pc}
 8004f5c:	0802d1c8 	.word	0x0802d1c8

08004f60 <_ZN8touchgfx14WipeTransitionILNS_9DirectionE0EE13FullSolidRectD1Ev>:
 8004f60:	b580      	push	{r7, lr}
 8004f62:	b082      	sub	sp, #8
 8004f64:	af00      	add	r7, sp, #0
 8004f66:	6078      	str	r0, [r7, #4]
 8004f68:	4a05      	ldr	r2, [pc, #20]	@ (8004f80 <_ZN8touchgfx14WipeTransitionILNS_9DirectionE0EE13FullSolidRectD1Ev+0x20>)
 8004f6a:	687b      	ldr	r3, [r7, #4]
 8004f6c:	601a      	str	r2, [r3, #0]
 8004f6e:	687b      	ldr	r3, [r7, #4]
 8004f70:	4618      	mov	r0, r3
 8004f72:	f7ff fa01 	bl	8004378 <_ZN8touchgfx6WidgetD1Ev>
 8004f76:	687b      	ldr	r3, [r7, #4]
 8004f78:	4618      	mov	r0, r3
 8004f7a:	3708      	adds	r7, #8
 8004f7c:	46bd      	mov	sp, r7
 8004f7e:	bd80      	pop	{r7, pc}
 8004f80:	0802d1c8 	.word	0x0802d1c8

08004f84 <_ZN8touchgfx14WipeTransitionILNS_9DirectionE0EE13FullSolidRectD0Ev>:
 8004f84:	b580      	push	{r7, lr}
 8004f86:	b082      	sub	sp, #8
 8004f88:	af00      	add	r7, sp, #0
 8004f8a:	6078      	str	r0, [r7, #4]
 8004f8c:	6878      	ldr	r0, [r7, #4]
 8004f8e:	f7ff ffe7 	bl	8004f60 <_ZN8touchgfx14WipeTransitionILNS_9DirectionE0EE13FullSolidRectD1Ev>
 8004f92:	2128      	movs	r1, #40	@ 0x28
 8004f94:	6878      	ldr	r0, [r7, #4]
 8004f96:	f025 fe26 	bl	802abe6 <_ZdlPvj>
 8004f9a:	687b      	ldr	r3, [r7, #4]
 8004f9c:	4618      	mov	r0, r3
 8004f9e:	3708      	adds	r7, #8
 8004fa0:	46bd      	mov	sp, r7
 8004fa2:	bd80      	pop	{r7, pc}

08004fa4 <_ZN8touchgfx14WipeTransitionILNS_9DirectionE0EEC1Eh>:
    WipeTransition(const uint8_t transitionSteps = 20)
 8004fa4:	b580      	push	{r7, lr}
 8004fa6:	b084      	sub	sp, #16
 8004fa8:	af02      	add	r7, sp, #8
 8004faa:	6078      	str	r0, [r7, #4]
 8004fac:	460b      	mov	r3, r1
 8004fae:	70fb      	strb	r3, [r7, #3]
          solid()
 8004fb0:	687b      	ldr	r3, [r7, #4]
 8004fb2:	4618      	mov	r0, r3
 8004fb4:	f7ff f8f0 	bl	8004198 <_ZN8touchgfx10TransitionC1Ev>
 8004fb8:	4a18      	ldr	r2, [pc, #96]	@ (800501c <_ZN8touchgfx14WipeTransitionILNS_9DirectionE0EEC1Eh+0x78>)
 8004fba:	687b      	ldr	r3, [r7, #4]
 8004fbc:	601a      	str	r2, [r3, #0]
          animationSteps(transitionSteps),
 8004fbe:	687b      	ldr	r3, [r7, #4]
 8004fc0:	78fa      	ldrb	r2, [r7, #3]
 8004fc2:	725a      	strb	r2, [r3, #9]
          animationCounter(0),
 8004fc4:	687b      	ldr	r3, [r7, #4]
 8004fc6:	2200      	movs	r2, #0
 8004fc8:	729a      	strb	r2, [r3, #10]
          calculatedValue(0),
 8004fca:	687b      	ldr	r3, [r7, #4]
 8004fcc:	2200      	movs	r2, #0
 8004fce:	81da      	strh	r2, [r3, #14]
          solid()
 8004fd0:	687b      	ldr	r3, [r7, #4]
 8004fd2:	3310      	adds	r3, #16
 8004fd4:	2228      	movs	r2, #40	@ 0x28
 8004fd6:	2100      	movs	r1, #0
 8004fd8:	4618      	mov	r0, r3
 8004fda:	f026 f83a 	bl	802b052 <memset>
 8004fde:	687b      	ldr	r3, [r7, #4]
 8004fe0:	3310      	adds	r3, #16
 8004fe2:	4618      	mov	r0, r3
 8004fe4:	f7ff ffaa 	bl	8004f3c <_ZN8touchgfx14WipeTransitionILNS_9DirectionE0EE13FullSolidRectC1Ev>
            targetValue = HAL::DISPLAY_HEIGHT;
 8004fe8:	4b0d      	ldr	r3, [pc, #52]	@ (8005020 <_ZN8touchgfx14WipeTransitionILNS_9DirectionE0EEC1Eh+0x7c>)
 8004fea:	881b      	ldrh	r3, [r3, #0]
 8004fec:	b21a      	sxth	r2, r3
 8004fee:	687b      	ldr	r3, [r7, #4]
 8004ff0:	819a      	strh	r2, [r3, #12]
            break;
 8004ff2:	bf00      	nop
        solid.setPosition(0, 0, HAL::DISPLAY_WIDTH, HAL::DISPLAY_HEIGHT);
 8004ff4:	687b      	ldr	r3, [r7, #4]
 8004ff6:	f103 0010 	add.w	r0, r3, #16
 8004ffa:	4b0a      	ldr	r3, [pc, #40]	@ (8005024 <_ZN8touchgfx14WipeTransitionILNS_9DirectionE0EEC1Eh+0x80>)
 8004ffc:	881b      	ldrh	r3, [r3, #0]
 8004ffe:	b21a      	sxth	r2, r3
 8005000:	4b07      	ldr	r3, [pc, #28]	@ (8005020 <_ZN8touchgfx14WipeTransitionILNS_9DirectionE0EEC1Eh+0x7c>)
 8005002:	881b      	ldrh	r3, [r3, #0]
 8005004:	b21b      	sxth	r3, r3
 8005006:	9300      	str	r3, [sp, #0]
 8005008:	4613      	mov	r3, r2
 800500a:	2200      	movs	r2, #0
 800500c:	2100      	movs	r1, #0
 800500e:	f7fe ff58 	bl	8003ec2 <_ZN8touchgfx8Drawable11setPositionEssss>
    }
 8005012:	687b      	ldr	r3, [r7, #4]
 8005014:	4618      	mov	r0, r3
 8005016:	3708      	adds	r7, #8
 8005018:	46bd      	mov	sp, r7
 800501a:	bd80      	pop	{r7, pc}
 800501c:	0802d1a4 	.word	0x0802d1a4
 8005020:	2400b87a 	.word	0x2400b87a
 8005024:	2400b878 	.word	0x2400b878

08005028 <_ZN8touchgfx17AbstractPartition2atI20Localize_AnomalyViewEERT_t>:
    T& at(const uint16_t index)
 8005028:	b580      	push	{r7, lr}
 800502a:	b082      	sub	sp, #8
 800502c:	af00      	add	r7, sp, #0
 800502e:	6078      	str	r0, [r7, #4]
 8005030:	460b      	mov	r3, r1
 8005032:	807b      	strh	r3, [r7, #2]
        return *static_cast<T*>(element(index));
 8005034:	687b      	ldr	r3, [r7, #4]
 8005036:	681b      	ldr	r3, [r3, #0]
 8005038:	3324      	adds	r3, #36	@ 0x24
 800503a:	681b      	ldr	r3, [r3, #0]
 800503c:	887a      	ldrh	r2, [r7, #2]
 800503e:	4611      	mov	r1, r2
 8005040:	6878      	ldr	r0, [r7, #4]
 8005042:	4798      	blx	r3
 8005044:	4603      	mov	r3, r0
    }
 8005046:	4618      	mov	r0, r3
 8005048:	3708      	adds	r7, #8
 800504a:	46bd      	mov	sp, r7
 800504c:	bd80      	pop	{r7, pc}

0800504e <_ZN8touchgfx17AbstractPartition2atI25Localize_AnomalyPresenterEERT_t>:
    T& at(const uint16_t index)
 800504e:	b580      	push	{r7, lr}
 8005050:	b082      	sub	sp, #8
 8005052:	af00      	add	r7, sp, #0
 8005054:	6078      	str	r0, [r7, #4]
 8005056:	460b      	mov	r3, r1
 8005058:	807b      	strh	r3, [r7, #2]
        return *static_cast<T*>(element(index));
 800505a:	687b      	ldr	r3, [r7, #4]
 800505c:	681b      	ldr	r3, [r3, #0]
 800505e:	3324      	adds	r3, #36	@ 0x24
 8005060:	681b      	ldr	r3, [r3, #0]
 8005062:	887a      	ldrh	r2, [r7, #2]
 8005064:	4611      	mov	r1, r2
 8005066:	6878      	ldr	r0, [r7, #4]
 8005068:	4798      	blx	r3
 800506a:	4603      	mov	r3, r0
    }
 800506c:	4618      	mov	r0, r3
 800506e:	3708      	adds	r7, #8
 8005070:	46bd      	mov	sp, r7
 8005072:	bd80      	pop	{r7, pc}

08005074 <_ZN8touchgfx4ViewI25Localize_AnomalyPresenterE4bindERS1_>:
    void bind(T& presenter)
 8005074:	b480      	push	{r7}
 8005076:	b083      	sub	sp, #12
 8005078:	af00      	add	r7, sp, #0
 800507a:	6078      	str	r0, [r7, #4]
 800507c:	6039      	str	r1, [r7, #0]
        this->presenter = &presenter;
 800507e:	687b      	ldr	r3, [r7, #4]
 8005080:	683a      	ldr	r2, [r7, #0]
 8005082:	63da      	str	r2, [r3, #60]	@ 0x3c
    }
 8005084:	bf00      	nop
 8005086:	370c      	adds	r7, #12
 8005088:	46bd      	mov	sp, r7
 800508a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800508e:	4770      	bx	lr

08005090 <_ZN8touchgfx14WipeTransitionILNS_9DirectionE1EED1Ev>:
class WipeTransition : public Transition
 8005090:	b580      	push	{r7, lr}
 8005092:	b082      	sub	sp, #8
 8005094:	af00      	add	r7, sp, #0
 8005096:	6078      	str	r0, [r7, #4]
 8005098:	4a08      	ldr	r2, [pc, #32]	@ (80050bc <_ZN8touchgfx14WipeTransitionILNS_9DirectionE1EED1Ev+0x2c>)
 800509a:	687b      	ldr	r3, [r7, #4]
 800509c:	601a      	str	r2, [r3, #0]
 800509e:	687b      	ldr	r3, [r7, #4]
 80050a0:	3310      	adds	r3, #16
 80050a2:	4618      	mov	r0, r3
 80050a4:	f7ff fed2 	bl	8004e4c <_ZN8touchgfx14WipeTransitionILNS_9DirectionE1EE13FullSolidRectD1Ev>
 80050a8:	687b      	ldr	r3, [r7, #4]
 80050aa:	4618      	mov	r0, r3
 80050ac:	f7ff f88a 	bl	80041c4 <_ZN8touchgfx10TransitionD1Ev>
 80050b0:	687b      	ldr	r3, [r7, #4]
 80050b2:	4618      	mov	r0, r3
 80050b4:	3708      	adds	r7, #8
 80050b6:	46bd      	mov	sp, r7
 80050b8:	bd80      	pop	{r7, pc}
 80050ba:	bf00      	nop
 80050bc:	0802d11c 	.word	0x0802d11c

080050c0 <_ZN8touchgfx14WipeTransitionILNS_9DirectionE1EED0Ev>:
 80050c0:	b580      	push	{r7, lr}
 80050c2:	b082      	sub	sp, #8
 80050c4:	af00      	add	r7, sp, #0
 80050c6:	6078      	str	r0, [r7, #4]
 80050c8:	6878      	ldr	r0, [r7, #4]
 80050ca:	f7ff ffe1 	bl	8005090 <_ZN8touchgfx14WipeTransitionILNS_9DirectionE1EED1Ev>
 80050ce:	2138      	movs	r1, #56	@ 0x38
 80050d0:	6878      	ldr	r0, [r7, #4]
 80050d2:	f025 fd88 	bl	802abe6 <_ZdlPvj>
 80050d6:	687b      	ldr	r3, [r7, #4]
 80050d8:	4618      	mov	r0, r3
 80050da:	3708      	adds	r7, #8
 80050dc:	46bd      	mov	sp, r7
 80050de:	bd80      	pop	{r7, pc}

080050e0 <_ZN8touchgfx14WipeTransitionILNS_9DirectionE0EED1Ev>:
 80050e0:	b580      	push	{r7, lr}
 80050e2:	b082      	sub	sp, #8
 80050e4:	af00      	add	r7, sp, #0
 80050e6:	6078      	str	r0, [r7, #4]
 80050e8:	4a08      	ldr	r2, [pc, #32]	@ (800510c <_ZN8touchgfx14WipeTransitionILNS_9DirectionE0EED1Ev+0x2c>)
 80050ea:	687b      	ldr	r3, [r7, #4]
 80050ec:	601a      	str	r2, [r3, #0]
 80050ee:	687b      	ldr	r3, [r7, #4]
 80050f0:	3310      	adds	r3, #16
 80050f2:	4618      	mov	r0, r3
 80050f4:	f7ff ff34 	bl	8004f60 <_ZN8touchgfx14WipeTransitionILNS_9DirectionE0EE13FullSolidRectD1Ev>
 80050f8:	687b      	ldr	r3, [r7, #4]
 80050fa:	4618      	mov	r0, r3
 80050fc:	f7ff f862 	bl	80041c4 <_ZN8touchgfx10TransitionD1Ev>
 8005100:	687b      	ldr	r3, [r7, #4]
 8005102:	4618      	mov	r0, r3
 8005104:	3708      	adds	r7, #8
 8005106:	46bd      	mov	sp, r7
 8005108:	bd80      	pop	{r7, pc}
 800510a:	bf00      	nop
 800510c:	0802d1a4 	.word	0x0802d1a4

08005110 <_ZN8touchgfx14WipeTransitionILNS_9DirectionE0EED0Ev>:
 8005110:	b580      	push	{r7, lr}
 8005112:	b082      	sub	sp, #8
 8005114:	af00      	add	r7, sp, #0
 8005116:	6078      	str	r0, [r7, #4]
 8005118:	6878      	ldr	r0, [r7, #4]
 800511a:	f7ff ffe1 	bl	80050e0 <_ZN8touchgfx14WipeTransitionILNS_9DirectionE0EED1Ev>
 800511e:	2138      	movs	r1, #56	@ 0x38
 8005120:	6878      	ldr	r0, [r7, #4]
 8005122:	f025 fd60 	bl	802abe6 <_ZdlPvj>
 8005126:	687b      	ldr	r3, [r7, #4]
 8005128:	4618      	mov	r0, r3
 800512a:	3708      	adds	r7, #8
 800512c:	46bd      	mov	sp, r7
 800512e:	bd80      	pop	{r7, pc}

08005130 <_ZN8touchgfx12NoTransitionD1Ev>:
 8005130:	b580      	push	{r7, lr}
 8005132:	b082      	sub	sp, #8
 8005134:	af00      	add	r7, sp, #0
 8005136:	6078      	str	r0, [r7, #4]
 8005138:	4a05      	ldr	r2, [pc, #20]	@ (8005150 <_ZN8touchgfx12NoTransitionD1Ev+0x20>)
 800513a:	687b      	ldr	r3, [r7, #4]
 800513c:	601a      	str	r2, [r3, #0]
 800513e:	687b      	ldr	r3, [r7, #4]
 8005140:	4618      	mov	r0, r3
 8005142:	f7ff f83f 	bl	80041c4 <_ZN8touchgfx10TransitionD1Ev>
 8005146:	687b      	ldr	r3, [r7, #4]
 8005148:	4618      	mov	r0, r3
 800514a:	3708      	adds	r7, #8
 800514c:	46bd      	mov	sp, r7
 800514e:	bd80      	pop	{r7, pc}
 8005150:	0802d290 	.word	0x0802d290

08005154 <_ZN8touchgfx12NoTransitionD0Ev>:
 8005154:	b580      	push	{r7, lr}
 8005156:	b082      	sub	sp, #8
 8005158:	af00      	add	r7, sp, #0
 800515a:	6078      	str	r0, [r7, #4]
 800515c:	6878      	ldr	r0, [r7, #4]
 800515e:	f7ff ffe7 	bl	8005130 <_ZN8touchgfx12NoTransitionD1Ev>
 8005162:	210c      	movs	r1, #12
 8005164:	6878      	ldr	r0, [r7, #4]
 8005166:	f025 fd3e 	bl	802abe6 <_ZdlPvj>
 800516a:	687b      	ldr	r3, [r7, #4]
 800516c:	4618      	mov	r0, r3
 800516e:	3708      	adds	r7, #8
 8005170:	46bd      	mov	sp, r7
 8005172:	bd80      	pop	{r7, pc}

08005174 <_ZN8touchgfx14WipeTransitionILNS_9DirectionE1EE15handleTickEventEv>:

    /**
     * Handles the tick event when transitioning. It uncovers and
     * invalidates increasing parts of the new screen elements.
     */
    virtual void handleTickEvent()
 8005174:	b590      	push	{r4, r7, lr}
 8005176:	b093      	sub	sp, #76	@ 0x4c
 8005178:	af02      	add	r7, sp, #8
 800517a:	6078      	str	r0, [r7, #4]
    {
        Transition::handleTickEvent();
 800517c:	687b      	ldr	r3, [r7, #4]
 800517e:	4618      	mov	r0, r3
 8005180:	f7ff f840 	bl	8004204 <_ZN8touchgfx10Transition15handleTickEventEv>
        animationCounter++;
 8005184:	687b      	ldr	r3, [r7, #4]
 8005186:	7a9b      	ldrb	r3, [r3, #10]
 8005188:	3301      	adds	r3, #1
 800518a:	b2da      	uxtb	r2, r3
 800518c:	687b      	ldr	r3, [r7, #4]
 800518e:	729a      	strb	r2, [r3, #10]

        // Calculate new position or stop animation
        if (animationCounter <= (animationSteps))
 8005190:	687b      	ldr	r3, [r7, #4]
 8005192:	7a9a      	ldrb	r2, [r3, #10]
 8005194:	687b      	ldr	r3, [r7, #4]
 8005196:	7a5b      	ldrb	r3, [r3, #9]
 8005198:	429a      	cmp	r2, r3
 800519a:	d82a      	bhi.n	80051f2 <_ZN8touchgfx14WipeTransitionILNS_9DirectionE1EE15handleTickEventEv+0x7e>
        {
            // Calculate value in [0;targetValue]
            calculatedValue = EasingEquations::cubicEaseOut(animationCounter, 0, targetValue, animationSteps);
 800519c:	687b      	ldr	r3, [r7, #4]
 800519e:	7a9b      	ldrb	r3, [r3, #10]
 80051a0:	4618      	mov	r0, r3
 80051a2:	687b      	ldr	r3, [r7, #4]
 80051a4:	f9b3 200c 	ldrsh.w	r2, [r3, #12]
 80051a8:	687b      	ldr	r3, [r7, #4]
 80051aa:	7a5b      	ldrb	r3, [r3, #9]
 80051ac:	2100      	movs	r1, #0
 80051ae:	f018 f875 	bl	801d29c <_ZN8touchgfx15EasingEquations12cubicEaseOutEtsst>
 80051b2:	4603      	mov	r3, r0
 80051b4:	461a      	mov	r2, r3
 80051b6:	687b      	ldr	r3, [r7, #4]
 80051b8:	81da      	strh	r2, [r3, #14]

            // Note: Result of "calculatedValue & 1" is compiler dependent for negative values of calculatedValue
            if (calculatedValue % 2)
 80051ba:	687b      	ldr	r3, [r7, #4]
 80051bc:	f9b3 300e 	ldrsh.w	r3, [r3, #14]
 80051c0:	b29b      	uxth	r3, r3
 80051c2:	f003 0301 	and.w	r3, r3, #1
 80051c6:	b29b      	uxth	r3, r3
 80051c8:	2b00      	cmp	r3, #0
 80051ca:	d019      	beq.n	8005200 <_ZN8touchgfx14WipeTransitionILNS_9DirectionE1EE15handleTickEventEv+0x8c>
            {
                // Optimization: calculatedValue is odd, add 1/-1 to move drawables modulo 32 bits in framebuffer
                calculatedValue += (calculatedValue > 0 ? 1 : -1);
 80051cc:	687b      	ldr	r3, [r7, #4]
 80051ce:	f9b3 300e 	ldrsh.w	r3, [r3, #14]
 80051d2:	b29b      	uxth	r3, r3
 80051d4:	687a      	ldr	r2, [r7, #4]
 80051d6:	f9b2 200e 	ldrsh.w	r2, [r2, #14]
 80051da:	2a00      	cmp	r2, #0
 80051dc:	dd01      	ble.n	80051e2 <_ZN8touchgfx14WipeTransitionILNS_9DirectionE1EE15handleTickEventEv+0x6e>
 80051de:	2201      	movs	r2, #1
 80051e0:	e001      	b.n	80051e6 <_ZN8touchgfx14WipeTransitionILNS_9DirectionE1EE15handleTickEventEv+0x72>
 80051e2:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80051e6:	4413      	add	r3, r2
 80051e8:	b29b      	uxth	r3, r3
 80051ea:	b21a      	sxth	r2, r3
 80051ec:	687b      	ldr	r3, [r7, #4]
 80051ee:	81da      	strh	r2, [r3, #14]
 80051f0:	e006      	b.n	8005200 <_ZN8touchgfx14WipeTransitionILNS_9DirectionE1EE15handleTickEventEv+0x8c>
            }
        }
        else
        {
            // Final step: stop the animation
            done = true;
 80051f2:	687b      	ldr	r3, [r7, #4]
 80051f4:	2201      	movs	r2, #1
 80051f6:	721a      	strb	r2, [r3, #8]
            animationCounter = 0;
 80051f8:	687b      	ldr	r3, [r7, #4]
 80051fa:	2200      	movs	r2, #0
 80051fc:	729a      	strb	r2, [r3, #10]
            return;
 80051fe:	e07e      	b.n	80052fe <_ZN8touchgfx14WipeTransitionILNS_9DirectionE1EE15handleTickEventEv+0x18a>
                break;
            }
        case SOUTH:
            {
                // Cover must have height of remaining part
                const uint16_t prevSolidHeight = solid.getHeight();
 8005200:	687b      	ldr	r3, [r7, #4]
 8005202:	3310      	adds	r3, #16
 8005204:	4618      	mov	r0, r3
 8005206:	f7fe fe8a 	bl	8003f1e <_ZNK8touchgfx8Drawable9getHeightEv>
 800520a:	4603      	mov	r3, r0
 800520c:	877b      	strh	r3, [r7, #58]	@ 0x3a
                solid.setHeight(HAL::DISPLAY_HEIGHT - calculatedValue);
 800520e:	687b      	ldr	r3, [r7, #4]
 8005210:	f103 0010 	add.w	r0, r3, #16
 8005214:	4b3b      	ldr	r3, [pc, #236]	@ (8005304 <_ZN8touchgfx14WipeTransitionILNS_9DirectionE1EE15handleTickEventEv+0x190>)
 8005216:	881a      	ldrh	r2, [r3, #0]
 8005218:	687b      	ldr	r3, [r7, #4]
 800521a:	f9b3 300e 	ldrsh.w	r3, [r3, #14]
 800521e:	b29b      	uxth	r3, r3
 8005220:	1ad3      	subs	r3, r2, r3
 8005222:	b29b      	uxth	r3, r3
 8005224:	b21b      	sxth	r3, r3
 8005226:	4619      	mov	r1, r3
 8005228:	f7fe fed1 	bl	8003fce <_ZN8touchgfx8Drawable9setHeightEs>

                // Invalidate the uncovered part
                const uint16_t delta = prevSolidHeight - solid.getHeight();
 800522c:	687b      	ldr	r3, [r7, #4]
 800522e:	3310      	adds	r3, #16
 8005230:	4618      	mov	r0, r3
 8005232:	f7fe fe74 	bl	8003f1e <_ZNK8touchgfx8Drawable9getHeightEv>
 8005236:	4603      	mov	r3, r0
 8005238:	b29b      	uxth	r3, r3
 800523a:	8f7a      	ldrh	r2, [r7, #58]	@ 0x3a
 800523c:	1ad3      	subs	r3, r2, r3
 800523e:	873b      	strh	r3, [r7, #56]	@ 0x38
                Rect r(0, solid.getHeight(), HAL::DISPLAY_WIDTH, delta);
 8005240:	687b      	ldr	r3, [r7, #4]
 8005242:	3310      	adds	r3, #16
 8005244:	4618      	mov	r0, r3
 8005246:	f7fe fe6a 	bl	8003f1e <_ZNK8touchgfx8Drawable9getHeightEv>
 800524a:	4603      	mov	r3, r0
 800524c:	4619      	mov	r1, r3
 800524e:	4b2e      	ldr	r3, [pc, #184]	@ (8005308 <_ZN8touchgfx14WipeTransitionILNS_9DirectionE1EE15handleTickEventEv+0x194>)
 8005250:	881b      	ldrh	r3, [r3, #0]
 8005252:	b21a      	sxth	r2, r3
 8005254:	f9b7 3038 	ldrsh.w	r3, [r7, #56]	@ 0x38
 8005258:	f107 0018 	add.w	r0, r7, #24
 800525c:	9300      	str	r3, [sp, #0]
 800525e:	4613      	mov	r3, r2
 8005260:	460a      	mov	r2, r1
 8005262:	2100      	movs	r1, #0
 8005264:	f7fe fda6 	bl	8003db4 <_ZN8touchgfx4RectC1Essss>
                screenContainer->invalidateRect(r);
 8005268:	687b      	ldr	r3, [r7, #4]
 800526a:	685b      	ldr	r3, [r3, #4]
 800526c:	4618      	mov	r0, r3
 800526e:	687b      	ldr	r3, [r7, #4]
 8005270:	685b      	ldr	r3, [r3, #4]
 8005272:	681b      	ldr	r3, [r3, #0]
 8005274:	3310      	adds	r3, #16
 8005276:	681b      	ldr	r3, [r3, #0]
 8005278:	f107 0218 	add.w	r2, r7, #24
 800527c:	4611      	mov	r1, r2
 800527e:	4798      	blx	r3
                break;
 8005280:	bf00      	nop
        //
        // In the first tick WipeTransition cover "calculatedValue"
        // pixels vertically or horizontally depending on the speed of
        // the transition, so there's no need to transfer that. The
        // solid Widget covers the rest, so we copy those pixels.
        if (animationCounter == 1 && HAL::USE_DOUBLE_BUFFERING)
 8005282:	687b      	ldr	r3, [r7, #4]
 8005284:	7a9b      	ldrb	r3, [r3, #10]
 8005286:	2b01      	cmp	r3, #1
 8005288:	d139      	bne.n	80052fe <_ZN8touchgfx14WipeTransitionILNS_9DirectionE1EE15handleTickEventEv+0x18a>
 800528a:	4b20      	ldr	r3, [pc, #128]	@ (800530c <_ZN8touchgfx14WipeTransitionILNS_9DirectionE1EE15handleTickEventEv+0x198>)
 800528c:	781b      	ldrb	r3, [r3, #0]
 800528e:	2b00      	cmp	r3, #0
 8005290:	d035      	beq.n	80052fe <_ZN8touchgfx14WipeTransitionILNS_9DirectionE1EE15handleTickEventEv+0x18a>
        {
            Rect rect = solid.getRect(); // Part to copy between buffers
 8005292:	687b      	ldr	r3, [r7, #4]
 8005294:	3310      	adds	r3, #16
 8005296:	4618      	mov	r0, r3
 8005298:	f7fe fe07 	bl	8003eaa <_ZNK8touchgfx8Drawable7getRectEv>
 800529c:	4602      	mov	r2, r0
 800529e:	f107 0310 	add.w	r3, r7, #16
 80052a2:	6810      	ldr	r0, [r2, #0]
 80052a4:	6851      	ldr	r1, [r2, #4]
 80052a6:	c303      	stmia	r3!, {r0, r1}

            // Get the currently displayed framebuffer
            uint16_t* tftFb = HAL::getInstance()->getTFTFrameBuffer();
 80052a8:	f7fc ff4a 	bl	8002140 <_ZN8touchgfx3HAL11getInstanceEv>
 80052ac:	4603      	mov	r3, r0
 80052ae:	681a      	ldr	r2, [r3, #0]
 80052b0:	3230      	adds	r2, #48	@ 0x30
 80052b2:	6812      	ldr	r2, [r2, #0]
 80052b4:	4618      	mov	r0, r3
 80052b6:	4790      	blx	r2
 80052b8:	63f8      	str	r0, [r7, #60]	@ 0x3c

            Rect source;
 80052ba:	f107 0308 	add.w	r3, r7, #8
 80052be:	4618      	mov	r0, r3
 80052c0:	f7fd fa92 	bl	80027e8 <_ZN8touchgfx4RectC1Ev>
            source.x = 0;
 80052c4:	2300      	movs	r3, #0
 80052c6:	813b      	strh	r3, [r7, #8]
            source.y = 0;
 80052c8:	2300      	movs	r3, #0
 80052ca:	817b      	strh	r3, [r7, #10]
            source.width = HAL::DISPLAY_WIDTH;
 80052cc:	4b0e      	ldr	r3, [pc, #56]	@ (8005308 <_ZN8touchgfx14WipeTransitionILNS_9DirectionE1EE15handleTickEventEv+0x194>)
 80052ce:	881b      	ldrh	r3, [r3, #0]
 80052d0:	b21b      	sxth	r3, r3
 80052d2:	81bb      	strh	r3, [r7, #12]
            source.height = HAL::DISPLAY_HEIGHT;
 80052d4:	4b0b      	ldr	r3, [pc, #44]	@ (8005304 <_ZN8touchgfx14WipeTransitionILNS_9DirectionE1EE15handleTickEventEv+0x190>)
 80052d6:	881b      	ldrh	r3, [r3, #0]
 80052d8:	b21b      	sxth	r3, r3
 80052da:	81fb      	strh	r3, [r7, #14]

            // Copy rect from tft to client framebuffer
            HAL::getInstance()->lcd().blitCopy((const uint16_t*)tftFb, source, rect, 255, false);
 80052dc:	f7fc ff30 	bl	8002140 <_ZN8touchgfx3HAL11getInstanceEv>
 80052e0:	f7fe ff3e 	bl	8004160 <_ZN8touchgfx3HAL3lcdEv>
 80052e4:	6803      	ldr	r3, [r0, #0]
 80052e6:	330c      	adds	r3, #12
 80052e8:	681c      	ldr	r4, [r3, #0]
 80052ea:	f107 0310 	add.w	r3, r7, #16
 80052ee:	f107 0208 	add.w	r2, r7, #8
 80052f2:	2100      	movs	r1, #0
 80052f4:	9101      	str	r1, [sp, #4]
 80052f6:	21ff      	movs	r1, #255	@ 0xff
 80052f8:	9100      	str	r1, [sp, #0]
 80052fa:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 80052fc:	47a0      	blx	r4
        }
    }
 80052fe:	3744      	adds	r7, #68	@ 0x44
 8005300:	46bd      	mov	sp, r7
 8005302:	bd90      	pop	{r4, r7, pc}
 8005304:	2400b87a 	.word	0x2400b87a
 8005308:	2400b878 	.word	0x2400b878
 800530c:	2400b882 	.word	0x2400b882

08005310 <_ZN8touchgfx14WipeTransitionILNS_9DirectionE1EE8tearDownEv>:

    virtual void tearDown()
 8005310:	b580      	push	{r7, lr}
 8005312:	b082      	sub	sp, #8
 8005314:	af00      	add	r7, sp, #0
 8005316:	6078      	str	r0, [r7, #4]
    {
        screenContainer->remove(solid);
 8005318:	687b      	ldr	r3, [r7, #4]
 800531a:	6858      	ldr	r0, [r3, #4]
 800531c:	687b      	ldr	r3, [r7, #4]
 800531e:	685b      	ldr	r3, [r3, #4]
 8005320:	681b      	ldr	r3, [r3, #0]
 8005322:	3360      	adds	r3, #96	@ 0x60
 8005324:	681b      	ldr	r3, [r3, #0]
 8005326:	687a      	ldr	r2, [r7, #4]
 8005328:	3210      	adds	r2, #16
 800532a:	4611      	mov	r1, r2
 800532c:	4798      	blx	r3
    }
 800532e:	bf00      	nop
 8005330:	3708      	adds	r7, #8
 8005332:	46bd      	mov	sp, r7
 8005334:	bd80      	pop	{r7, pc}

08005336 <_ZN8touchgfx14WipeTransitionILNS_9DirectionE1EE4initEv>:

    virtual void init()
 8005336:	b580      	push	{r7, lr}
 8005338:	b082      	sub	sp, #8
 800533a:	af00      	add	r7, sp, #0
 800533c:	6078      	str	r0, [r7, #4]
    {
        Transition::init();
 800533e:	687b      	ldr	r3, [r7, #4]
 8005340:	4618      	mov	r0, r3
 8005342:	f7fe ff73 	bl	800422c <_ZN8touchgfx10Transition4initEv>
        // Add the solid (and not-drawing-anything) widget on top to cover the other widgets
        screenContainer->add(solid);
 8005346:	687b      	ldr	r3, [r7, #4]
 8005348:	6858      	ldr	r0, [r3, #4]
 800534a:	687b      	ldr	r3, [r7, #4]
 800534c:	685b      	ldr	r3, [r3, #4]
 800534e:	681b      	ldr	r3, [r3, #0]
 8005350:	335c      	adds	r3, #92	@ 0x5c
 8005352:	681b      	ldr	r3, [r3, #0]
 8005354:	687a      	ldr	r2, [r7, #4]
 8005356:	3210      	adds	r2, #16
 8005358:	4611      	mov	r1, r2
 800535a:	4798      	blx	r3
    }
 800535c:	bf00      	nop
 800535e:	3708      	adds	r7, #8
 8005360:	46bd      	mov	sp, r7
 8005362:	bd80      	pop	{r7, pc}

08005364 <_ZN8touchgfx14WipeTransitionILNS_9DirectionE1EE10invalidateEv>:

    /**
     * Wipe transition does not require an invalidation. Invalidation
     * is handled by the class. Do no invalidation initially.
     */
    virtual void invalidate()
 8005364:	b480      	push	{r7}
 8005366:	b083      	sub	sp, #12
 8005368:	af00      	add	r7, sp, #0
 800536a:	6078      	str	r0, [r7, #4]
    {
    }
 800536c:	bf00      	nop
 800536e:	370c      	adds	r7, #12
 8005370:	46bd      	mov	sp, r7
 8005372:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005376:	4770      	bx	lr

08005378 <_ZNK8touchgfx14WipeTransitionILNS_9DirectionE1EE13FullSolidRect4drawERKNS_4RectE>:
        virtual void draw(const Rect& area) const
 8005378:	b480      	push	{r7}
 800537a:	b083      	sub	sp, #12
 800537c:	af00      	add	r7, sp, #0
 800537e:	6078      	str	r0, [r7, #4]
 8005380:	6039      	str	r1, [r7, #0]
        }
 8005382:	bf00      	nop
 8005384:	370c      	adds	r7, #12
 8005386:	46bd      	mov	sp, r7
 8005388:	f85d 7b04 	ldr.w	r7, [sp], #4
 800538c:	4770      	bx	lr

0800538e <_ZNK8touchgfx14WipeTransitionILNS_9DirectionE1EE13FullSolidRect12getSolidRectEv>:
        virtual Rect getSolidRect() const
 800538e:	b580      	push	{r7, lr}
 8005390:	b084      	sub	sp, #16
 8005392:	af02      	add	r7, sp, #8
 8005394:	6078      	str	r0, [r7, #4]
 8005396:	6039      	str	r1, [r7, #0]
            return Rect(0U, 0U, rect.width, rect.height);
 8005398:	683b      	ldr	r3, [r7, #0]
 800539a:	f9b3 2008 	ldrsh.w	r2, [r3, #8]
 800539e:	683b      	ldr	r3, [r7, #0]
 80053a0:	f9b3 300a 	ldrsh.w	r3, [r3, #10]
 80053a4:	9300      	str	r3, [sp, #0]
 80053a6:	4613      	mov	r3, r2
 80053a8:	2200      	movs	r2, #0
 80053aa:	2100      	movs	r1, #0
 80053ac:	6878      	ldr	r0, [r7, #4]
 80053ae:	f7fe fd01 	bl	8003db4 <_ZN8touchgfx4RectC1Essss>
        }
 80053b2:	6878      	ldr	r0, [r7, #4]
 80053b4:	3708      	adds	r7, #8
 80053b6:	46bd      	mov	sp, r7
 80053b8:	bd80      	pop	{r7, pc}
	...

080053bc <_ZN8touchgfx14WipeTransitionILNS_9DirectionE0EE15handleTickEventEv>:
    virtual void handleTickEvent()
 80053bc:	b590      	push	{r4, r7, lr}
 80053be:	b093      	sub	sp, #76	@ 0x4c
 80053c0:	af02      	add	r7, sp, #8
 80053c2:	6078      	str	r0, [r7, #4]
        Transition::handleTickEvent();
 80053c4:	687b      	ldr	r3, [r7, #4]
 80053c6:	4618      	mov	r0, r3
 80053c8:	f7fe ff1c 	bl	8004204 <_ZN8touchgfx10Transition15handleTickEventEv>
        animationCounter++;
 80053cc:	687b      	ldr	r3, [r7, #4]
 80053ce:	7a9b      	ldrb	r3, [r3, #10]
 80053d0:	3301      	adds	r3, #1
 80053d2:	b2da      	uxtb	r2, r3
 80053d4:	687b      	ldr	r3, [r7, #4]
 80053d6:	729a      	strb	r2, [r3, #10]
        if (animationCounter <= (animationSteps))
 80053d8:	687b      	ldr	r3, [r7, #4]
 80053da:	7a9a      	ldrb	r2, [r3, #10]
 80053dc:	687b      	ldr	r3, [r7, #4]
 80053de:	7a5b      	ldrb	r3, [r3, #9]
 80053e0:	429a      	cmp	r2, r3
 80053e2:	d82a      	bhi.n	800543a <_ZN8touchgfx14WipeTransitionILNS_9DirectionE0EE15handleTickEventEv+0x7e>
            calculatedValue = EasingEquations::cubicEaseOut(animationCounter, 0, targetValue, animationSteps);
 80053e4:	687b      	ldr	r3, [r7, #4]
 80053e6:	7a9b      	ldrb	r3, [r3, #10]
 80053e8:	4618      	mov	r0, r3
 80053ea:	687b      	ldr	r3, [r7, #4]
 80053ec:	f9b3 200c 	ldrsh.w	r2, [r3, #12]
 80053f0:	687b      	ldr	r3, [r7, #4]
 80053f2:	7a5b      	ldrb	r3, [r3, #9]
 80053f4:	2100      	movs	r1, #0
 80053f6:	f017 ff51 	bl	801d29c <_ZN8touchgfx15EasingEquations12cubicEaseOutEtsst>
 80053fa:	4603      	mov	r3, r0
 80053fc:	461a      	mov	r2, r3
 80053fe:	687b      	ldr	r3, [r7, #4]
 8005400:	81da      	strh	r2, [r3, #14]
            if (calculatedValue % 2)
 8005402:	687b      	ldr	r3, [r7, #4]
 8005404:	f9b3 300e 	ldrsh.w	r3, [r3, #14]
 8005408:	b29b      	uxth	r3, r3
 800540a:	f003 0301 	and.w	r3, r3, #1
 800540e:	b29b      	uxth	r3, r3
 8005410:	2b00      	cmp	r3, #0
 8005412:	d019      	beq.n	8005448 <_ZN8touchgfx14WipeTransitionILNS_9DirectionE0EE15handleTickEventEv+0x8c>
                calculatedValue += (calculatedValue > 0 ? 1 : -1);
 8005414:	687b      	ldr	r3, [r7, #4]
 8005416:	f9b3 300e 	ldrsh.w	r3, [r3, #14]
 800541a:	b29b      	uxth	r3, r3
 800541c:	687a      	ldr	r2, [r7, #4]
 800541e:	f9b2 200e 	ldrsh.w	r2, [r2, #14]
 8005422:	2a00      	cmp	r2, #0
 8005424:	dd01      	ble.n	800542a <_ZN8touchgfx14WipeTransitionILNS_9DirectionE0EE15handleTickEventEv+0x6e>
 8005426:	2201      	movs	r2, #1
 8005428:	e001      	b.n	800542e <_ZN8touchgfx14WipeTransitionILNS_9DirectionE0EE15handleTickEventEv+0x72>
 800542a:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800542e:	4413      	add	r3, r2
 8005430:	b29b      	uxth	r3, r3
 8005432:	b21a      	sxth	r2, r3
 8005434:	687b      	ldr	r3, [r7, #4]
 8005436:	81da      	strh	r2, [r3, #14]
 8005438:	e006      	b.n	8005448 <_ZN8touchgfx14WipeTransitionILNS_9DirectionE0EE15handleTickEventEv+0x8c>
            done = true;
 800543a:	687b      	ldr	r3, [r7, #4]
 800543c:	2201      	movs	r2, #1
 800543e:	721a      	strb	r2, [r3, #8]
            animationCounter = 0;
 8005440:	687b      	ldr	r3, [r7, #4]
 8005442:	2200      	movs	r2, #0
 8005444:	729a      	strb	r2, [r3, #10]
            return;
 8005446:	e07f      	b.n	8005548 <_ZN8touchgfx14WipeTransitionILNS_9DirectionE0EE15handleTickEventEv+0x18c>
                const uint16_t prevSolidPos = solid.getY();
 8005448:	687b      	ldr	r3, [r7, #4]
 800544a:	3310      	adds	r3, #16
 800544c:	4618      	mov	r0, r3
 800544e:	f7fe fd59 	bl	8003f04 <_ZNK8touchgfx8Drawable4getYEv>
 8005452:	4603      	mov	r3, r0
 8005454:	877b      	strh	r3, [r7, #58]	@ 0x3a
                solid.setHeight(HAL::DISPLAY_HEIGHT - calculatedValue);
 8005456:	687b      	ldr	r3, [r7, #4]
 8005458:	f103 0010 	add.w	r0, r3, #16
 800545c:	4b3c      	ldr	r3, [pc, #240]	@ (8005550 <_ZN8touchgfx14WipeTransitionILNS_9DirectionE0EE15handleTickEventEv+0x194>)
 800545e:	881a      	ldrh	r2, [r3, #0]
 8005460:	687b      	ldr	r3, [r7, #4]
 8005462:	f9b3 300e 	ldrsh.w	r3, [r3, #14]
 8005466:	b29b      	uxth	r3, r3
 8005468:	1ad3      	subs	r3, r2, r3
 800546a:	b29b      	uxth	r3, r3
 800546c:	b21b      	sxth	r3, r3
 800546e:	4619      	mov	r1, r3
 8005470:	f7fe fdad 	bl	8003fce <_ZN8touchgfx8Drawable9setHeightEs>
                solid.setY(calculatedValue);
 8005474:	687b      	ldr	r3, [r7, #4]
 8005476:	f103 0210 	add.w	r2, r3, #16
 800547a:	687b      	ldr	r3, [r7, #4]
 800547c:	f9b3 300e 	ldrsh.w	r3, [r3, #14]
 8005480:	4619      	mov	r1, r3
 8005482:	4610      	mov	r0, r2
 8005484:	f7fe fd67 	bl	8003f56 <_ZN8touchgfx8Drawable4setYEs>
                const uint16_t delta = calculatedValue - prevSolidPos;
 8005488:	687b      	ldr	r3, [r7, #4]
 800548a:	f9b3 300e 	ldrsh.w	r3, [r3, #14]
 800548e:	b29a      	uxth	r2, r3
 8005490:	8f7b      	ldrh	r3, [r7, #58]	@ 0x3a
 8005492:	1ad3      	subs	r3, r2, r3
 8005494:	873b      	strh	r3, [r7, #56]	@ 0x38
                Rect r(0, prevSolidPos, HAL::DISPLAY_WIDTH, delta);
 8005496:	f9b7 203a 	ldrsh.w	r2, [r7, #58]	@ 0x3a
 800549a:	4b2e      	ldr	r3, [pc, #184]	@ (8005554 <_ZN8touchgfx14WipeTransitionILNS_9DirectionE0EE15handleTickEventEv+0x198>)
 800549c:	881b      	ldrh	r3, [r3, #0]
 800549e:	b219      	sxth	r1, r3
 80054a0:	f9b7 3038 	ldrsh.w	r3, [r7, #56]	@ 0x38
 80054a4:	f107 0020 	add.w	r0, r7, #32
 80054a8:	9300      	str	r3, [sp, #0]
 80054aa:	460b      	mov	r3, r1
 80054ac:	2100      	movs	r1, #0
 80054ae:	f7fe fc81 	bl	8003db4 <_ZN8touchgfx4RectC1Essss>
                screenContainer->invalidateRect(r);
 80054b2:	687b      	ldr	r3, [r7, #4]
 80054b4:	685b      	ldr	r3, [r3, #4]
 80054b6:	4618      	mov	r0, r3
 80054b8:	687b      	ldr	r3, [r7, #4]
 80054ba:	685b      	ldr	r3, [r3, #4]
 80054bc:	681b      	ldr	r3, [r3, #0]
 80054be:	3310      	adds	r3, #16
 80054c0:	681b      	ldr	r3, [r3, #0]
 80054c2:	f107 0220 	add.w	r2, r7, #32
 80054c6:	4611      	mov	r1, r2
 80054c8:	4798      	blx	r3
                break;
 80054ca:	bf00      	nop
        if (animationCounter == 1 && HAL::USE_DOUBLE_BUFFERING)
 80054cc:	687b      	ldr	r3, [r7, #4]
 80054ce:	7a9b      	ldrb	r3, [r3, #10]
 80054d0:	2b01      	cmp	r3, #1
 80054d2:	d139      	bne.n	8005548 <_ZN8touchgfx14WipeTransitionILNS_9DirectionE0EE15handleTickEventEv+0x18c>
 80054d4:	4b20      	ldr	r3, [pc, #128]	@ (8005558 <_ZN8touchgfx14WipeTransitionILNS_9DirectionE0EE15handleTickEventEv+0x19c>)
 80054d6:	781b      	ldrb	r3, [r3, #0]
 80054d8:	2b00      	cmp	r3, #0
 80054da:	d035      	beq.n	8005548 <_ZN8touchgfx14WipeTransitionILNS_9DirectionE0EE15handleTickEventEv+0x18c>
            Rect rect = solid.getRect(); // Part to copy between buffers
 80054dc:	687b      	ldr	r3, [r7, #4]
 80054de:	3310      	adds	r3, #16
 80054e0:	4618      	mov	r0, r3
 80054e2:	f7fe fce2 	bl	8003eaa <_ZNK8touchgfx8Drawable7getRectEv>
 80054e6:	4602      	mov	r2, r0
 80054e8:	f107 0310 	add.w	r3, r7, #16
 80054ec:	6810      	ldr	r0, [r2, #0]
 80054ee:	6851      	ldr	r1, [r2, #4]
 80054f0:	c303      	stmia	r3!, {r0, r1}
            uint16_t* tftFb = HAL::getInstance()->getTFTFrameBuffer();
 80054f2:	f7fc fe25 	bl	8002140 <_ZN8touchgfx3HAL11getInstanceEv>
 80054f6:	4603      	mov	r3, r0
 80054f8:	681a      	ldr	r2, [r3, #0]
 80054fa:	3230      	adds	r2, #48	@ 0x30
 80054fc:	6812      	ldr	r2, [r2, #0]
 80054fe:	4618      	mov	r0, r3
 8005500:	4790      	blx	r2
 8005502:	63f8      	str	r0, [r7, #60]	@ 0x3c
            Rect source;
 8005504:	f107 0308 	add.w	r3, r7, #8
 8005508:	4618      	mov	r0, r3
 800550a:	f7fd f96d 	bl	80027e8 <_ZN8touchgfx4RectC1Ev>
            source.x = 0;
 800550e:	2300      	movs	r3, #0
 8005510:	813b      	strh	r3, [r7, #8]
            source.y = 0;
 8005512:	2300      	movs	r3, #0
 8005514:	817b      	strh	r3, [r7, #10]
            source.width = HAL::DISPLAY_WIDTH;
 8005516:	4b0f      	ldr	r3, [pc, #60]	@ (8005554 <_ZN8touchgfx14WipeTransitionILNS_9DirectionE0EE15handleTickEventEv+0x198>)
 8005518:	881b      	ldrh	r3, [r3, #0]
 800551a:	b21b      	sxth	r3, r3
 800551c:	81bb      	strh	r3, [r7, #12]
            source.height = HAL::DISPLAY_HEIGHT;
 800551e:	4b0c      	ldr	r3, [pc, #48]	@ (8005550 <_ZN8touchgfx14WipeTransitionILNS_9DirectionE0EE15handleTickEventEv+0x194>)
 8005520:	881b      	ldrh	r3, [r3, #0]
 8005522:	b21b      	sxth	r3, r3
 8005524:	81fb      	strh	r3, [r7, #14]
            HAL::getInstance()->lcd().blitCopy((const uint16_t*)tftFb, source, rect, 255, false);
 8005526:	f7fc fe0b 	bl	8002140 <_ZN8touchgfx3HAL11getInstanceEv>
 800552a:	f7fe fe19 	bl	8004160 <_ZN8touchgfx3HAL3lcdEv>
 800552e:	6803      	ldr	r3, [r0, #0]
 8005530:	330c      	adds	r3, #12
 8005532:	681c      	ldr	r4, [r3, #0]
 8005534:	f107 0310 	add.w	r3, r7, #16
 8005538:	f107 0208 	add.w	r2, r7, #8
 800553c:	2100      	movs	r1, #0
 800553e:	9101      	str	r1, [sp, #4]
 8005540:	21ff      	movs	r1, #255	@ 0xff
 8005542:	9100      	str	r1, [sp, #0]
 8005544:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8005546:	47a0      	blx	r4
    }
 8005548:	3744      	adds	r7, #68	@ 0x44
 800554a:	46bd      	mov	sp, r7
 800554c:	bd90      	pop	{r4, r7, pc}
 800554e:	bf00      	nop
 8005550:	2400b87a 	.word	0x2400b87a
 8005554:	2400b878 	.word	0x2400b878
 8005558:	2400b882 	.word	0x2400b882

0800555c <_ZN8touchgfx14WipeTransitionILNS_9DirectionE0EE8tearDownEv>:
    virtual void tearDown()
 800555c:	b580      	push	{r7, lr}
 800555e:	b082      	sub	sp, #8
 8005560:	af00      	add	r7, sp, #0
 8005562:	6078      	str	r0, [r7, #4]
        screenContainer->remove(solid);
 8005564:	687b      	ldr	r3, [r7, #4]
 8005566:	6858      	ldr	r0, [r3, #4]
 8005568:	687b      	ldr	r3, [r7, #4]
 800556a:	685b      	ldr	r3, [r3, #4]
 800556c:	681b      	ldr	r3, [r3, #0]
 800556e:	3360      	adds	r3, #96	@ 0x60
 8005570:	681b      	ldr	r3, [r3, #0]
 8005572:	687a      	ldr	r2, [r7, #4]
 8005574:	3210      	adds	r2, #16
 8005576:	4611      	mov	r1, r2
 8005578:	4798      	blx	r3
    }
 800557a:	bf00      	nop
 800557c:	3708      	adds	r7, #8
 800557e:	46bd      	mov	sp, r7
 8005580:	bd80      	pop	{r7, pc}

08005582 <_ZN8touchgfx14WipeTransitionILNS_9DirectionE0EE4initEv>:
    virtual void init()
 8005582:	b580      	push	{r7, lr}
 8005584:	b082      	sub	sp, #8
 8005586:	af00      	add	r7, sp, #0
 8005588:	6078      	str	r0, [r7, #4]
        Transition::init();
 800558a:	687b      	ldr	r3, [r7, #4]
 800558c:	4618      	mov	r0, r3
 800558e:	f7fe fe4d 	bl	800422c <_ZN8touchgfx10Transition4initEv>
        screenContainer->add(solid);
 8005592:	687b      	ldr	r3, [r7, #4]
 8005594:	6858      	ldr	r0, [r3, #4]
 8005596:	687b      	ldr	r3, [r7, #4]
 8005598:	685b      	ldr	r3, [r3, #4]
 800559a:	681b      	ldr	r3, [r3, #0]
 800559c:	335c      	adds	r3, #92	@ 0x5c
 800559e:	681b      	ldr	r3, [r3, #0]
 80055a0:	687a      	ldr	r2, [r7, #4]
 80055a2:	3210      	adds	r2, #16
 80055a4:	4611      	mov	r1, r2
 80055a6:	4798      	blx	r3
    }
 80055a8:	bf00      	nop
 80055aa:	3708      	adds	r7, #8
 80055ac:	46bd      	mov	sp, r7
 80055ae:	bd80      	pop	{r7, pc}

080055b0 <_ZN8touchgfx14WipeTransitionILNS_9DirectionE0EE10invalidateEv>:
    virtual void invalidate()
 80055b0:	b480      	push	{r7}
 80055b2:	b083      	sub	sp, #12
 80055b4:	af00      	add	r7, sp, #0
 80055b6:	6078      	str	r0, [r7, #4]
    }
 80055b8:	bf00      	nop
 80055ba:	370c      	adds	r7, #12
 80055bc:	46bd      	mov	sp, r7
 80055be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055c2:	4770      	bx	lr

080055c4 <_ZNK8touchgfx14WipeTransitionILNS_9DirectionE0EE13FullSolidRect4drawERKNS_4RectE>:
        virtual void draw(const Rect& area) const
 80055c4:	b480      	push	{r7}
 80055c6:	b083      	sub	sp, #12
 80055c8:	af00      	add	r7, sp, #0
 80055ca:	6078      	str	r0, [r7, #4]
 80055cc:	6039      	str	r1, [r7, #0]
        }
 80055ce:	bf00      	nop
 80055d0:	370c      	adds	r7, #12
 80055d2:	46bd      	mov	sp, r7
 80055d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055d8:	4770      	bx	lr

080055da <_ZNK8touchgfx14WipeTransitionILNS_9DirectionE0EE13FullSolidRect12getSolidRectEv>:
        virtual Rect getSolidRect() const
 80055da:	b580      	push	{r7, lr}
 80055dc:	b084      	sub	sp, #16
 80055de:	af02      	add	r7, sp, #8
 80055e0:	6078      	str	r0, [r7, #4]
 80055e2:	6039      	str	r1, [r7, #0]
            return Rect(0U, 0U, rect.width, rect.height);
 80055e4:	683b      	ldr	r3, [r7, #0]
 80055e6:	f9b3 2008 	ldrsh.w	r2, [r3, #8]
 80055ea:	683b      	ldr	r3, [r7, #0]
 80055ec:	f9b3 300a 	ldrsh.w	r3, [r3, #10]
 80055f0:	9300      	str	r3, [sp, #0]
 80055f2:	4613      	mov	r3, r2
 80055f4:	2200      	movs	r2, #0
 80055f6:	2100      	movs	r1, #0
 80055f8:	6878      	ldr	r0, [r7, #4]
 80055fa:	f7fe fbdb 	bl	8003db4 <_ZN8touchgfx4RectC1Essss>
        }
 80055fe:	6878      	ldr	r0, [r7, #4]
 8005600:	3708      	adds	r7, #8
 8005602:	46bd      	mov	sp, r7
 8005604:	bd80      	pop	{r7, pc}

08005606 <_ZNK8touchgfx13GeneratedFont12getGSUBTableEv>:
    /**
     * Gets GSUB table.
     *
     * @return The GSUB table or null if font has GSUB no table
     */
    virtual const uint16_t* getGSUBTable() const
 8005606:	b480      	push	{r7}
 8005608:	b083      	sub	sp, #12
 800560a:	af00      	add	r7, sp, #0
 800560c:	6078      	str	r0, [r7, #4]
    {
        return gsubTable;
 800560e:	687b      	ldr	r3, [r7, #4]
 8005610:	6a1b      	ldr	r3, [r3, #32]
    }
 8005612:	4618      	mov	r0, r3
 8005614:	370c      	adds	r7, #12
 8005616:	46bd      	mov	sp, r7
 8005618:	f85d 7b04 	ldr.w	r7, [sp], #4
 800561c:	4770      	bx	lr

0800561e <_ZNK8touchgfx13GeneratedFont23getContextualFormsTableEv>:
    /**
     * Gets the contextual forms table used in arabic fonts.
     *
     * @return The FontContextualFormsTable or null if the font has no table.
     */
    virtual const FontContextualFormsTable* getContextualFormsTable() const
 800561e:	b480      	push	{r7}
 8005620:	b083      	sub	sp, #12
 8005622:	af00      	add	r7, sp, #0
 8005624:	6078      	str	r0, [r7, #4]
    {
        return arabicTable;
 8005626:	687b      	ldr	r3, [r7, #4]
 8005628:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
    }
 800562a:	4618      	mov	r0, r3
 800562c:	370c      	adds	r7, #12
 800562e:	46bd      	mov	sp, r7
 8005630:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005634:	4770      	bx	lr
	...

08005638 <_ZN8touchgfx13GeneratedFontC1EPKNS_9GlyphNodeEtthhhhhPKPKhPKNS_11KerningNodeEttPKtPKNS_24FontContextualFormsTableE>:

#include <fonts/GeneratedFont.hpp>

namespace touchgfx
{
GeneratedFont::GeneratedFont(const GlyphNode* list, uint16_t size, uint16_t height, uint8_t pixBelowBase, uint8_t bitsPerPixel, uint8_t byteAlignRow, uint8_t maxLeft, uint8_t maxRight, const uint8_t* const* glyphDataInternalFlash, const KerningNode* kerningList, const Unicode::UnicodeChar fallbackChar, const Unicode::UnicodeChar ellipsisChar, const uint16_t* const gsubData, const FontContextualFormsTable* formsTable)
 8005638:	b580      	push	{r7, lr}
 800563a:	b08c      	sub	sp, #48	@ 0x30
 800563c:	af08      	add	r7, sp, #32
 800563e:	60f8      	str	r0, [r7, #12]
 8005640:	60b9      	str	r1, [r7, #8]
 8005642:	4611      	mov	r1, r2
 8005644:	461a      	mov	r2, r3
 8005646:	460b      	mov	r3, r1
 8005648:	80fb      	strh	r3, [r7, #6]
 800564a:	4613      	mov	r3, r2
 800564c:	80bb      	strh	r3, [r7, #4]
    : ConstFont(list, size, height, pixBelowBase, bitsPerPixel, byteAlignRow, maxLeft, maxRight, fallbackChar, ellipsisChar),
      glyphData(glyphDataInternalFlash),
      kerningData(kerningList),
      gsubTable(gsubData),
      arabicTable(formsTable)
 800564e:	68f8      	ldr	r0, [r7, #12]
 8005650:	88b9      	ldrh	r1, [r7, #4]
 8005652:	88fa      	ldrh	r2, [r7, #6]
 8005654:	8f3b      	ldrh	r3, [r7, #56]	@ 0x38
 8005656:	9306      	str	r3, [sp, #24]
 8005658:	8ebb      	ldrh	r3, [r7, #52]	@ 0x34
 800565a:	9305      	str	r3, [sp, #20]
 800565c:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8005660:	9304      	str	r3, [sp, #16]
 8005662:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8005666:	9303      	str	r3, [sp, #12]
 8005668:	f897 3020 	ldrb.w	r3, [r7, #32]
 800566c:	9302      	str	r3, [sp, #8]
 800566e:	7f3b      	ldrb	r3, [r7, #28]
 8005670:	9301      	str	r3, [sp, #4]
 8005672:	7e3b      	ldrb	r3, [r7, #24]
 8005674:	9300      	str	r3, [sp, #0]
 8005676:	460b      	mov	r3, r1
 8005678:	68b9      	ldr	r1, [r7, #8]
 800567a:	f017 f9e9 	bl	801ca50 <_ZN8touchgfx9ConstFontC1EPKNS_9GlyphNodeEtthhhhhtt>
 800567e:	4a0a      	ldr	r2, [pc, #40]	@ (80056a8 <_ZN8touchgfx13GeneratedFontC1EPKNS_9GlyphNodeEtthhhhhPKPKhPKNS_11KerningNodeEttPKtPKNS_24FontContextualFormsTableE+0x70>)
 8005680:	68fb      	ldr	r3, [r7, #12]
 8005682:	601a      	str	r2, [r3, #0]
      glyphData(glyphDataInternalFlash),
 8005684:	68fb      	ldr	r3, [r7, #12]
 8005686:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8005688:	619a      	str	r2, [r3, #24]
      kerningData(kerningList),
 800568a:	68fb      	ldr	r3, [r7, #12]
 800568c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800568e:	61da      	str	r2, [r3, #28]
      gsubTable(gsubData),
 8005690:	68fb      	ldr	r3, [r7, #12]
 8005692:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8005694:	621a      	str	r2, [r3, #32]
      arabicTable(formsTable)
 8005696:	68fb      	ldr	r3, [r7, #12]
 8005698:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800569a:	625a      	str	r2, [r3, #36]	@ 0x24
{
}
 800569c:	68fb      	ldr	r3, [r7, #12]
 800569e:	4618      	mov	r0, r3
 80056a0:	3710      	adds	r7, #16
 80056a2:	46bd      	mov	sp, r7
 80056a4:	bd80      	pop	{r7, pc}
 80056a6:	bf00      	nop
 80056a8:	0802d2d8 	.word	0x0802d2d8

080056ac <_ZNK8touchgfx13GeneratedFont12getPixelDataEPKNS_9GlyphNodeE>:

const uint8_t* GeneratedFont::getPixelData(const GlyphNode* glyph) const
{
 80056ac:	b480      	push	{r7}
 80056ae:	b085      	sub	sp, #20
 80056b0:	af00      	add	r7, sp, #0
 80056b2:	6078      	str	r0, [r7, #4]
 80056b4:	6039      	str	r1, [r7, #0]
    const uint8_t* const* table = (const uint8_t* const*)glyphData;
 80056b6:	687b      	ldr	r3, [r7, #4]
 80056b8:	699b      	ldr	r3, [r3, #24]
 80056ba:	60fb      	str	r3, [r7, #12]
    return &(table[glyph->unicode / 2048][glyph->dataOffset]);
 80056bc:	683b      	ldr	r3, [r7, #0]
 80056be:	889b      	ldrh	r3, [r3, #4]
 80056c0:	0adb      	lsrs	r3, r3, #11
 80056c2:	b29b      	uxth	r3, r3
 80056c4:	009b      	lsls	r3, r3, #2
 80056c6:	68fa      	ldr	r2, [r7, #12]
 80056c8:	4413      	add	r3, r2
 80056ca:	681a      	ldr	r2, [r3, #0]
 80056cc:	683b      	ldr	r3, [r7, #0]
 80056ce:	681b      	ldr	r3, [r3, #0]
 80056d0:	4413      	add	r3, r2
}
 80056d2:	4618      	mov	r0, r3
 80056d4:	3714      	adds	r7, #20
 80056d6:	46bd      	mov	sp, r7
 80056d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056dc:	4770      	bx	lr

080056de <_ZNK8touchgfx13GeneratedFont10getKerningEtPKNS_9GlyphNodeE>:

int8_t GeneratedFont::getKerning(Unicode::UnicodeChar prevChar, const GlyphNode* glyph) const
{
 80056de:	b480      	push	{r7}
 80056e0:	b089      	sub	sp, #36	@ 0x24
 80056e2:	af00      	add	r7, sp, #0
 80056e4:	60f8      	str	r0, [r7, #12]
 80056e6:	460b      	mov	r3, r1
 80056e8:	607a      	str	r2, [r7, #4]
 80056ea:	817b      	strh	r3, [r7, #10]
    if (!glyph || glyph->kerningTableSize == 0)
 80056ec:	687b      	ldr	r3, [r7, #4]
 80056ee:	2b00      	cmp	r3, #0
 80056f0:	d003      	beq.n	80056fa <_ZNK8touchgfx13GeneratedFont10getKerningEtPKNS_9GlyphNodeE+0x1c>
 80056f2:	687b      	ldr	r3, [r7, #4]
 80056f4:	7b1b      	ldrb	r3, [r3, #12]
 80056f6:	2b00      	cmp	r3, #0
 80056f8:	d101      	bne.n	80056fe <_ZNK8touchgfx13GeneratedFont10getKerningEtPKNS_9GlyphNodeE+0x20>
    {
        return 0;
 80056fa:	2300      	movs	r3, #0
 80056fc:	e031      	b.n	8005762 <_ZNK8touchgfx13GeneratedFont10getKerningEtPKNS_9GlyphNodeE+0x84>
    }

    const KerningNode* kerndata = kerningData + glyph->kerningTablePos();
 80056fe:	68fb      	ldr	r3, [r7, #12]
 8005700:	69da      	ldr	r2, [r3, #28]
 8005702:	687b      	ldr	r3, [r7, #4]
 8005704:	617b      	str	r3, [r7, #20]
        return ((flags & GLYPH_DATA_KERNINGTABLEPOS_BIT8_10) << 8) | _kerningTablePos;
 8005706:	697b      	ldr	r3, [r7, #20]
 8005708:	7b5b      	ldrb	r3, [r3, #13]
 800570a:	021b      	lsls	r3, r3, #8
 800570c:	b21b      	sxth	r3, r3
 800570e:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8005712:	b219      	sxth	r1, r3
 8005714:	697b      	ldr	r3, [r7, #20]
 8005716:	7adb      	ldrb	r3, [r3, #11]
 8005718:	b21b      	sxth	r3, r3
 800571a:	430b      	orrs	r3, r1
 800571c:	b21b      	sxth	r3, r3
 800571e:	b29b      	uxth	r3, r3
 8005720:	009b      	lsls	r3, r3, #2
 8005722:	4413      	add	r3, r2
 8005724:	61fb      	str	r3, [r7, #28]
    for (uint16_t i = glyph->kerningTableSize; i > 0; i--, kerndata++)
 8005726:	687b      	ldr	r3, [r7, #4]
 8005728:	7b1b      	ldrb	r3, [r3, #12]
 800572a:	837b      	strh	r3, [r7, #26]
 800572c:	e013      	b.n	8005756 <_ZNK8touchgfx13GeneratedFont10getKerningEtPKNS_9GlyphNodeE+0x78>
    {
        if (prevChar == kerndata->unicodePrevChar)
 800572e:	69fb      	ldr	r3, [r7, #28]
 8005730:	881b      	ldrh	r3, [r3, #0]
 8005732:	897a      	ldrh	r2, [r7, #10]
 8005734:	429a      	cmp	r2, r3
 8005736:	d103      	bne.n	8005740 <_ZNK8touchgfx13GeneratedFont10getKerningEtPKNS_9GlyphNodeE+0x62>
        {
            return kerndata->distance;
 8005738:	69fb      	ldr	r3, [r7, #28]
 800573a:	f993 3002 	ldrsb.w	r3, [r3, #2]
 800573e:	e010      	b.n	8005762 <_ZNK8touchgfx13GeneratedFont10getKerningEtPKNS_9GlyphNodeE+0x84>
        }
        if (prevChar < kerndata->unicodePrevChar)
 8005740:	69fb      	ldr	r3, [r7, #28]
 8005742:	881b      	ldrh	r3, [r3, #0]
 8005744:	897a      	ldrh	r2, [r7, #10]
 8005746:	429a      	cmp	r2, r3
 8005748:	d309      	bcc.n	800575e <_ZNK8touchgfx13GeneratedFont10getKerningEtPKNS_9GlyphNodeE+0x80>
    for (uint16_t i = glyph->kerningTableSize; i > 0; i--, kerndata++)
 800574a:	8b7b      	ldrh	r3, [r7, #26]
 800574c:	3b01      	subs	r3, #1
 800574e:	837b      	strh	r3, [r7, #26]
 8005750:	69fb      	ldr	r3, [r7, #28]
 8005752:	3304      	adds	r3, #4
 8005754:	61fb      	str	r3, [r7, #28]
 8005756:	8b7b      	ldrh	r3, [r7, #26]
 8005758:	2b00      	cmp	r3, #0
 800575a:	d1e8      	bne.n	800572e <_ZNK8touchgfx13GeneratedFont10getKerningEtPKNS_9GlyphNodeE+0x50>
 800575c:	e000      	b.n	8005760 <_ZNK8touchgfx13GeneratedFont10getKerningEtPKNS_9GlyphNodeE+0x82>
        {
            break;
 800575e:	bf00      	nop
        }
    }
    return 0;
 8005760:	2300      	movs	r3, #0
}
 8005762:	4618      	mov	r0, r3
 8005764:	3724      	adds	r7, #36	@ 0x24
 8005766:	46bd      	mov	sp, r7
 8005768:	f85d 7b04 	ldr.w	r7, [sp], #4
 800576c:	4770      	bx	lr

0800576e <_ZN8touchgfx9colortypeC1Em>:
    colortype(uint32_t col)
 800576e:	b480      	push	{r7}
 8005770:	b083      	sub	sp, #12
 8005772:	af00      	add	r7, sp, #0
 8005774:	6078      	str	r0, [r7, #4]
 8005776:	6039      	str	r1, [r7, #0]
        : color(col)
 8005778:	687b      	ldr	r3, [r7, #4]
 800577a:	683a      	ldr	r2, [r7, #0]
 800577c:	601a      	str	r2, [r3, #0]
    }
 800577e:	687b      	ldr	r3, [r7, #4]
 8005780:	4618      	mov	r0, r3
 8005782:	370c      	adds	r7, #12
 8005784:	46bd      	mov	sp, r7
 8005786:	f85d 7b04 	ldr.w	r7, [sp], #4
 800578a:	4770      	bx	lr

0800578c <_ZN8touchgfx6BitmapC1Et>:
     * Creates and binds a Bitmap instance to the corresponding entry in the BitmapData
     * array.
     *
     * @param  id (Optional) The unique bitmap identifier.
     */
    Bitmap(const BitmapId id = BITMAP_INVALID)
 800578c:	b480      	push	{r7}
 800578e:	b083      	sub	sp, #12
 8005790:	af00      	add	r7, sp, #0
 8005792:	6078      	str	r0, [r7, #4]
 8005794:	460b      	mov	r3, r1
 8005796:	807b      	strh	r3, [r7, #2]
        : bitmapId(id)
 8005798:	687b      	ldr	r3, [r7, #4]
 800579a:	887a      	ldrh	r2, [r7, #2]
 800579c:	801a      	strh	r2, [r3, #0]
    {
    }
 800579e:	687b      	ldr	r3, [r7, #4]
 80057a0:	4618      	mov	r0, r3
 80057a2:	370c      	adds	r7, #12
 80057a4:	46bd      	mov	sp, r7
 80057a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057aa:	4770      	bx	lr

080057ac <_ZN8touchgfx8Drawable12setTouchableEb>:
    void setTouchable(bool touch)
 80057ac:	b480      	push	{r7}
 80057ae:	b083      	sub	sp, #12
 80057b0:	af00      	add	r7, sp, #0
 80057b2:	6078      	str	r0, [r7, #4]
 80057b4:	460b      	mov	r3, r1
 80057b6:	70fb      	strb	r3, [r7, #3]
        touchable = touch;
 80057b8:	687b      	ldr	r3, [r7, #4]
 80057ba:	78fa      	ldrb	r2, [r7, #3]
 80057bc:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
    }
 80057c0:	bf00      	nop
 80057c2:	370c      	adds	r7, #12
 80057c4:	46bd      	mov	sp, r7
 80057c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057ca:	4770      	bx	lr

080057cc <_ZN8touchgfx9ContainerC1Ev>:
 * @see Drawable
 */
class Container : public Drawable
{
public:
    Container()
 80057cc:	b580      	push	{r7, lr}
 80057ce:	b082      	sub	sp, #8
 80057d0:	af00      	add	r7, sp, #0
 80057d2:	6078      	str	r0, [r7, #4]
        : Drawable(),
          firstChild(0)
 80057d4:	687b      	ldr	r3, [r7, #4]
 80057d6:	4618      	mov	r0, r3
 80057d8:	f7fe fb0c 	bl	8003df4 <_ZN8touchgfx8DrawableC1Ev>
 80057dc:	4a05      	ldr	r2, [pc, #20]	@ (80057f4 <_ZN8touchgfx9ContainerC1Ev+0x28>)
 80057de:	687b      	ldr	r3, [r7, #4]
 80057e0:	601a      	str	r2, [r3, #0]
 80057e2:	687b      	ldr	r3, [r7, #4]
 80057e4:	2200      	movs	r2, #0
 80057e6:	629a      	str	r2, [r3, #40]	@ 0x28
    {
    }
 80057e8:	687b      	ldr	r3, [r7, #4]
 80057ea:	4618      	mov	r0, r3
 80057ec:	3708      	adds	r7, #8
 80057ee:	46bd      	mov	sp, r7
 80057f0:	bd80      	pop	{r7, pc}
 80057f2:	bf00      	nop
 80057f4:	0802dbcc 	.word	0x0802dbcc

080057f8 <_ZN8touchgfx6ScreenD1Ev>:
public:
    /** Initializes a new instance of the Screen class. */
    Screen();

    /** Finalizes an instance of the Screen class. */
    virtual ~Screen()
 80057f8:	b580      	push	{r7, lr}
 80057fa:	b082      	sub	sp, #8
 80057fc:	af00      	add	r7, sp, #0
 80057fe:	6078      	str	r0, [r7, #4]
    {
 8005800:	4a06      	ldr	r2, [pc, #24]	@ (800581c <_ZN8touchgfx6ScreenD1Ev+0x24>)
 8005802:	687b      	ldr	r3, [r7, #4]
 8005804:	601a      	str	r2, [r3, #0]
    }
 8005806:	687b      	ldr	r3, [r7, #4]
 8005808:	3304      	adds	r3, #4
 800580a:	4618      	mov	r0, r3
 800580c:	f001 f822 	bl	8006854 <_ZN8touchgfx9ContainerD1Ev>
 8005810:	687b      	ldr	r3, [r7, #4]
 8005812:	4618      	mov	r0, r3
 8005814:	3708      	adds	r7, #8
 8005816:	46bd      	mov	sp, r7
 8005818:	bd80      	pop	{r7, pc}
 800581a:	bf00      	nop
 800581c:	0802f38c 	.word	0x0802f38c

08005820 <_ZN8touchgfx6ScreenD0Ev>:
    virtual ~Screen()
 8005820:	b580      	push	{r7, lr}
 8005822:	b082      	sub	sp, #8
 8005824:	af00      	add	r7, sp, #0
 8005826:	6078      	str	r0, [r7, #4]
    }
 8005828:	6878      	ldr	r0, [r7, #4]
 800582a:	f7ff ffe5 	bl	80057f8 <_ZN8touchgfx6ScreenD1Ev>
 800582e:	213c      	movs	r1, #60	@ 0x3c
 8005830:	6878      	ldr	r0, [r7, #4]
 8005832:	f025 f9d8 	bl	802abe6 <_ZdlPvj>
 8005836:	687b      	ldr	r3, [r7, #4]
 8005838:	4618      	mov	r0, r3
 800583a:	3708      	adds	r7, #8
 800583c:	46bd      	mov	sp, r7
 800583e:	bd80      	pop	{r7, pc}

08005840 <_ZN8touchgfx6Screen11setupScreenEv>:
     * version does nothing, but place any screen specific initialization code in an
     * overridden version.
     *
     * @see Application::switchScreen
     */
    virtual void setupScreen()
 8005840:	b480      	push	{r7}
 8005842:	b083      	sub	sp, #12
 8005844:	af00      	add	r7, sp, #0
 8005846:	6078      	str	r0, [r7, #4]
    {
    }
 8005848:	bf00      	nop
 800584a:	370c      	adds	r7, #12
 800584c:	46bd      	mov	sp, r7
 800584e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005852:	4770      	bx	lr

08005854 <_ZN8touchgfx6Screen15afterTransitionEv>:
     * version does nothing, but override to do screen specific initialization code that has
     * to be done after the transition to the screen.
     *
     * @see Application::handleTickEvent
     */
    virtual void afterTransition()
 8005854:	b480      	push	{r7}
 8005856:	b083      	sub	sp, #12
 8005858:	af00      	add	r7, sp, #0
 800585a:	6078      	str	r0, [r7, #4]
    {
    }
 800585c:	bf00      	nop
 800585e:	370c      	adds	r7, #12
 8005860:	46bd      	mov	sp, r7
 8005862:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005866:	4770      	bx	lr

08005868 <_ZN8touchgfx6Screen14tearDownScreenEv>:
     * Base version does nothing, but place any screen specific cleanup code in an
     * overridden version.
     *
     * @see Application::switchScreen
     */
    virtual void tearDownScreen()
 8005868:	b480      	push	{r7}
 800586a:	b083      	sub	sp, #12
 800586c:	af00      	add	r7, sp, #0
 800586e:	6078      	str	r0, [r7, #4]
    {
    }
 8005870:	bf00      	nop
 8005872:	370c      	adds	r7, #12
 8005874:	46bd      	mov	sp, r7
 8005876:	f85d 7b04 	ldr.w	r7, [sp], #4
 800587a:	4770      	bx	lr

0800587c <_ZN8touchgfx6Screen15handleTickEventEv>:

    /**
     * Called by the Application on the current screen with a frequency of
     * Application::TICK_INTERVAL_MS.
     */
    virtual void handleTickEvent()
 800587c:	b480      	push	{r7}
 800587e:	b083      	sub	sp, #12
 8005880:	af00      	add	r7, sp, #0
 8005882:	6078      	str	r0, [r7, #4]
    {
    }
 8005884:	bf00      	nop
 8005886:	370c      	adds	r7, #12
 8005888:	46bd      	mov	sp, r7
 800588a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800588e:	4770      	bx	lr

08005890 <_ZN8touchgfx6Screen14handleKeyEventEh>:
     * Called by the Application on the reception of a "key", the meaning of which is
     * platform/application specific. Default implementation does nothing.
     *
     * @param  key The key to handle.
     */
    virtual void handleKeyEvent(uint8_t key)
 8005890:	b480      	push	{r7}
 8005892:	b083      	sub	sp, #12
 8005894:	af00      	add	r7, sp, #0
 8005896:	6078      	str	r0, [r7, #4]
 8005898:	460b      	mov	r3, r1
 800589a:	70fb      	strb	r3, [r7, #3]
    {
    }
 800589c:	bf00      	nop
 800589e:	370c      	adds	r7, #12
 80058a0:	46bd      	mov	sp, r7
 80058a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058a6:	4770      	bx	lr

080058a8 <_ZN8touchgfx6Screen3addERNS_8DrawableE>:
     * @param [in] d The Drawable to add.
     *
     * @note Must not be called with a Drawable that was already added to the screen. If in doubt,
     *       call remove() first.
     */
    void add(Drawable& d)
 80058a8:	b580      	push	{r7, lr}
 80058aa:	b082      	sub	sp, #8
 80058ac:	af00      	add	r7, sp, #0
 80058ae:	6078      	str	r0, [r7, #4]
 80058b0:	6039      	str	r1, [r7, #0]
    {
        container.add(d);
 80058b2:	687b      	ldr	r3, [r7, #4]
 80058b4:	3304      	adds	r3, #4
 80058b6:	6839      	ldr	r1, [r7, #0]
 80058b8:	4618      	mov	r0, r3
 80058ba:	f012 f9a1 	bl	8017c00 <_ZN8touchgfx9Container3addERNS_8DrawableE>
    }
 80058be:	bf00      	nop
 80058c0:	3708      	adds	r7, #8
 80058c2:	46bd      	mov	sp, r7
 80058c4:	bd80      	pop	{r7, pc}
	...

080058c8 <_ZN8touchgfx3BoxC1Ev>:
 */
class Box : public Widget
{
public:
    /** Construct a new Box with a default alpha value of 255 (solid) */
    Box()
 80058c8:	b580      	push	{r7, lr}
 80058ca:	b082      	sub	sp, #8
 80058cc:	af00      	add	r7, sp, #0
 80058ce:	6078      	str	r0, [r7, #4]
        : Widget(), alpha(255), color(0)
 80058d0:	687b      	ldr	r3, [r7, #4]
 80058d2:	4618      	mov	r0, r3
 80058d4:	2326      	movs	r3, #38	@ 0x26
 80058d6:	461a      	mov	r2, r3
 80058d8:	2100      	movs	r1, #0
 80058da:	f025 fbba 	bl	802b052 <memset>
 80058de:	687b      	ldr	r3, [r7, #4]
 80058e0:	4618      	mov	r0, r3
 80058e2:	f7fe fd37 	bl	8004354 <_ZN8touchgfx6WidgetC1Ev>
 80058e6:	4a09      	ldr	r2, [pc, #36]	@ (800590c <_ZN8touchgfx3BoxC1Ev+0x44>)
 80058e8:	687b      	ldr	r3, [r7, #4]
 80058ea:	601a      	str	r2, [r3, #0]
 80058ec:	687b      	ldr	r3, [r7, #4]
 80058ee:	22ff      	movs	r2, #255	@ 0xff
 80058f0:	f883 2026 	strb.w	r2, [r3, #38]	@ 0x26
 80058f4:	687b      	ldr	r3, [r7, #4]
 80058f6:	3328      	adds	r3, #40	@ 0x28
 80058f8:	2100      	movs	r1, #0
 80058fa:	4618      	mov	r0, r3
 80058fc:	f7ff ff37 	bl	800576e <_ZN8touchgfx9colortypeC1Em>
    {
    }
 8005900:	687b      	ldr	r3, [r7, #4]
 8005902:	4618      	mov	r0, r3
 8005904:	3708      	adds	r7, #8
 8005906:	46bd      	mov	sp, r7
 8005908:	bd80      	pop	{r7, pc}
 800590a:	bf00      	nop
 800590c:	0802ec40 	.word	0x0802ec40

08005910 <_ZN8touchgfx3Box8setColorENS_9colortypeE>:
     *
     * @param  color The color of the box.
     *
     * @see getColor, Color::getColorFrom24BitRGB
     */
    void setColor(colortype color)
 8005910:	b480      	push	{r7}
 8005912:	b083      	sub	sp, #12
 8005914:	af00      	add	r7, sp, #0
 8005916:	6078      	str	r0, [r7, #4]
 8005918:	6039      	str	r1, [r7, #0]
    {
        this->color = color;
 800591a:	687b      	ldr	r3, [r7, #4]
 800591c:	683a      	ldr	r2, [r7, #0]
 800591e:	629a      	str	r2, [r3, #40]	@ 0x28
    }
 8005920:	bf00      	nop
 8005922:	370c      	adds	r7, #12
 8005924:	46bd      	mov	sp, r7
 8005926:	f85d 7b04 	ldr.w	r7, [sp], #4
 800592a:	4770      	bx	lr

0800592c <_ZN8touchgfx5ImageC1ERKNS_6BitmapE>:
     *
     * @param  bitmap (Optional) The bitmap to display.
     *
     * @see setBitmap
     */
    Image(const Bitmap& bitmap = Bitmap())
 800592c:	b580      	push	{r7, lr}
 800592e:	b082      	sub	sp, #8
 8005930:	af00      	add	r7, sp, #0
 8005932:	6078      	str	r0, [r7, #4]
 8005934:	6039      	str	r1, [r7, #0]
        : Widget(), bitmap(bitmap), alpha(255)
 8005936:	687b      	ldr	r3, [r7, #4]
 8005938:	4618      	mov	r0, r3
 800593a:	2326      	movs	r3, #38	@ 0x26
 800593c:	461a      	mov	r2, r3
 800593e:	2100      	movs	r1, #0
 8005940:	f025 fb87 	bl	802b052 <memset>
 8005944:	687b      	ldr	r3, [r7, #4]
 8005946:	4618      	mov	r0, r3
 8005948:	f7fe fd04 	bl	8004354 <_ZN8touchgfx6WidgetC1Ev>
 800594c:	4a09      	ldr	r2, [pc, #36]	@ (8005974 <_ZN8touchgfx5ImageC1ERKNS_6BitmapE+0x48>)
 800594e:	687b      	ldr	r3, [r7, #4]
 8005950:	601a      	str	r2, [r3, #0]
 8005952:	687b      	ldr	r3, [r7, #4]
 8005954:	683a      	ldr	r2, [r7, #0]
 8005956:	8812      	ldrh	r2, [r2, #0]
 8005958:	84da      	strh	r2, [r3, #38]	@ 0x26
 800595a:	687b      	ldr	r3, [r7, #4]
 800595c:	22ff      	movs	r2, #255	@ 0xff
 800595e:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
    {
        Image::setBitmap(bitmap);
 8005962:	6839      	ldr	r1, [r7, #0]
 8005964:	6878      	ldr	r0, [r7, #4]
 8005966:	f014 faf0 	bl	8019f4a <_ZN8touchgfx5Image9setBitmapERKNS_6BitmapE>
    }
 800596a:	687b      	ldr	r3, [r7, #4]
 800596c:	4618      	mov	r0, r3
 800596e:	3708      	adds	r7, #8
 8005970:	46bd      	mov	sp, r7
 8005972:	bd80      	pop	{r7, pc}
 8005974:	0802eeb8 	.word	0x0802eeb8

08005978 <_ZN8touchgfx3BoxD1Ev>:
class Box : public Widget
 8005978:	b580      	push	{r7, lr}
 800597a:	b082      	sub	sp, #8
 800597c:	af00      	add	r7, sp, #0
 800597e:	6078      	str	r0, [r7, #4]
 8005980:	4a05      	ldr	r2, [pc, #20]	@ (8005998 <_ZN8touchgfx3BoxD1Ev+0x20>)
 8005982:	687b      	ldr	r3, [r7, #4]
 8005984:	601a      	str	r2, [r3, #0]
 8005986:	687b      	ldr	r3, [r7, #4]
 8005988:	4618      	mov	r0, r3
 800598a:	f7fe fcf5 	bl	8004378 <_ZN8touchgfx6WidgetD1Ev>
 800598e:	687b      	ldr	r3, [r7, #4]
 8005990:	4618      	mov	r0, r3
 8005992:	3708      	adds	r7, #8
 8005994:	46bd      	mov	sp, r7
 8005996:	bd80      	pop	{r7, pc}
 8005998:	0802ec40 	.word	0x0802ec40

0800599c <_ZN8touchgfx3BoxD0Ev>:
 800599c:	b580      	push	{r7, lr}
 800599e:	b082      	sub	sp, #8
 80059a0:	af00      	add	r7, sp, #0
 80059a2:	6078      	str	r0, [r7, #4]
 80059a4:	6878      	ldr	r0, [r7, #4]
 80059a6:	f7ff ffe7 	bl	8005978 <_ZN8touchgfx3BoxD1Ev>
 80059aa:	212c      	movs	r1, #44	@ 0x2c
 80059ac:	6878      	ldr	r0, [r7, #4]
 80059ae:	f025 f91a 	bl	802abe6 <_ZdlPvj>
 80059b2:	687b      	ldr	r3, [r7, #4]
 80059b4:	4618      	mov	r0, r3
 80059b6:	3708      	adds	r7, #8
 80059b8:	46bd      	mov	sp, r7
 80059ba:	bd80      	pop	{r7, pc}

080059bc <_ZN8touchgfx13BoxWithBorderC1Ev>:
 * BoxWithBorder will function just like a Box.
 */
class BoxWithBorder : public Box
{
public:
    BoxWithBorder()
 80059bc:	b580      	push	{r7, lr}
 80059be:	b082      	sub	sp, #8
 80059c0:	af00      	add	r7, sp, #0
 80059c2:	6078      	str	r0, [r7, #4]
        : Box(), borderColor(0), borderSize(0)
 80059c4:	687b      	ldr	r3, [r7, #4]
 80059c6:	4618      	mov	r0, r3
 80059c8:	f7ff ff7e 	bl	80058c8 <_ZN8touchgfx3BoxC1Ev>
 80059cc:	4a08      	ldr	r2, [pc, #32]	@ (80059f0 <_ZN8touchgfx13BoxWithBorderC1Ev+0x34>)
 80059ce:	687b      	ldr	r3, [r7, #4]
 80059d0:	601a      	str	r2, [r3, #0]
 80059d2:	687b      	ldr	r3, [r7, #4]
 80059d4:	332c      	adds	r3, #44	@ 0x2c
 80059d6:	2100      	movs	r1, #0
 80059d8:	4618      	mov	r0, r3
 80059da:	f7ff fec8 	bl	800576e <_ZN8touchgfx9colortypeC1Em>
 80059de:	687b      	ldr	r3, [r7, #4]
 80059e0:	2200      	movs	r2, #0
 80059e2:	861a      	strh	r2, [r3, #48]	@ 0x30
    {
    }
 80059e4:	687b      	ldr	r3, [r7, #4]
 80059e6:	4618      	mov	r0, r3
 80059e8:	3708      	adds	r7, #8
 80059ea:	46bd      	mov	sp, r7
 80059ec:	bd80      	pop	{r7, pc}
 80059ee:	bf00      	nop
 80059f0:	0802ee54 	.word	0x0802ee54

080059f4 <_ZN8touchgfx13BoxWithBorder14setBorderColorENS_9colortypeE>:
     * Sets the color of the border drawn along the edge of the BoxWithBorder.
     *
     * @param  color The color of the border.
     * @see setColor, getBorderColor, Color::getColorFrom24BitRGB
     */
    void setBorderColor(colortype color)
 80059f4:	b480      	push	{r7}
 80059f6:	b083      	sub	sp, #12
 80059f8:	af00      	add	r7, sp, #0
 80059fa:	6078      	str	r0, [r7, #4]
 80059fc:	6039      	str	r1, [r7, #0]
    {
        borderColor = color;
 80059fe:	687b      	ldr	r3, [r7, #4]
 8005a00:	683a      	ldr	r2, [r7, #0]
 8005a02:	62da      	str	r2, [r3, #44]	@ 0x2c
    }
 8005a04:	bf00      	nop
 8005a06:	370c      	adds	r7, #12
 8005a08:	46bd      	mov	sp, r7
 8005a0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a0e:	4770      	bx	lr

08005a10 <_ZN8touchgfx13BoxWithBorder13setBorderSizeEt>:
     *
     * @param  size The width of the border.
     *
     * @see getBorderSize
     */
    void setBorderSize(uint16_t size)
 8005a10:	b480      	push	{r7}
 8005a12:	b083      	sub	sp, #12
 8005a14:	af00      	add	r7, sp, #0
 8005a16:	6078      	str	r0, [r7, #4]
 8005a18:	460b      	mov	r3, r1
 8005a1a:	807b      	strh	r3, [r7, #2]
    {
        borderSize = size;
 8005a1c:	687b      	ldr	r3, [r7, #4]
 8005a1e:	887a      	ldrh	r2, [r7, #2]
 8005a20:	861a      	strh	r2, [r3, #48]	@ 0x30
    }
 8005a22:	bf00      	nop
 8005a24:	370c      	adds	r7, #12
 8005a26:	46bd      	mov	sp, r7
 8005a28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a2c:	4770      	bx	lr
	...

08005a30 <_ZN8touchgfx9TypedTextC1Et>:
    explicit TypedText(const TypedTextId id = TYPED_TEXT_INVALID)
 8005a30:	b480      	push	{r7}
 8005a32:	b083      	sub	sp, #12
 8005a34:	af00      	add	r7, sp, #0
 8005a36:	6078      	str	r0, [r7, #4]
 8005a38:	460b      	mov	r3, r1
 8005a3a:	807b      	strh	r3, [r7, #2]
        : typedTextId(id)
 8005a3c:	4a06      	ldr	r2, [pc, #24]	@ (8005a58 <_ZN8touchgfx9TypedTextC1Et+0x28>)
 8005a3e:	687b      	ldr	r3, [r7, #4]
 8005a40:	601a      	str	r2, [r3, #0]
 8005a42:	687b      	ldr	r3, [r7, #4]
 8005a44:	887a      	ldrh	r2, [r7, #2]
 8005a46:	809a      	strh	r2, [r3, #4]
    }
 8005a48:	687b      	ldr	r3, [r7, #4]
 8005a4a:	4618      	mov	r0, r3
 8005a4c:	370c      	adds	r7, #12
 8005a4e:	46bd      	mov	sp, r7
 8005a50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a54:	4770      	bx	lr
 8005a56:	bf00      	nop
 8005a58:	0802d10c 	.word	0x0802d10c

08005a5c <_ZN8touchgfx8TextAreaC1Ev>:
 *       the pointer remains valid when drawing.
 */
class TextArea : public Widget
{
public:
    TextArea()
 8005a5c:	b580      	push	{r7, lr}
 8005a5e:	b082      	sub	sp, #8
 8005a60:	af00      	add	r7, sp, #0
 8005a62:	6078      	str	r0, [r7, #4]
        : Widget(), typedText(TYPED_TEXT_INVALID), color(0), linespace(0), alpha(255), indentation(0), rotation(TEXT_ROTATE_0), wideTextAction(WIDE_TEXT_NONE)
 8005a64:	687b      	ldr	r3, [r7, #4]
 8005a66:	4618      	mov	r0, r3
 8005a68:	2326      	movs	r3, #38	@ 0x26
 8005a6a:	461a      	mov	r2, r3
 8005a6c:	2100      	movs	r1, #0
 8005a6e:	f025 faf0 	bl	802b052 <memset>
 8005a72:	687b      	ldr	r3, [r7, #4]
 8005a74:	4618      	mov	r0, r3
 8005a76:	f7fe fc6d 	bl	8004354 <_ZN8touchgfx6WidgetC1Ev>
 8005a7a:	4a14      	ldr	r2, [pc, #80]	@ (8005acc <_ZN8touchgfx8TextAreaC1Ev+0x70>)
 8005a7c:	687b      	ldr	r3, [r7, #4]
 8005a7e:	601a      	str	r2, [r3, #0]
 8005a80:	687b      	ldr	r3, [r7, #4]
 8005a82:	3328      	adds	r3, #40	@ 0x28
 8005a84:	f64f 71ff 	movw	r1, #65535	@ 0xffff
 8005a88:	4618      	mov	r0, r3
 8005a8a:	f7ff ffd1 	bl	8005a30 <_ZN8touchgfx9TypedTextC1Et>
 8005a8e:	687b      	ldr	r3, [r7, #4]
 8005a90:	3330      	adds	r3, #48	@ 0x30
 8005a92:	2100      	movs	r1, #0
 8005a94:	4618      	mov	r0, r3
 8005a96:	f7ff fe6a 	bl	800576e <_ZN8touchgfx9colortypeC1Em>
 8005a9a:	687b      	ldr	r3, [r7, #4]
 8005a9c:	2200      	movs	r2, #0
 8005a9e:	869a      	strh	r2, [r3, #52]	@ 0x34
 8005aa0:	687b      	ldr	r3, [r7, #4]
 8005aa2:	22ff      	movs	r2, #255	@ 0xff
 8005aa4:	f883 2036 	strb.w	r2, [r3, #54]	@ 0x36
 8005aa8:	687b      	ldr	r3, [r7, #4]
 8005aaa:	2200      	movs	r2, #0
 8005aac:	f883 2037 	strb.w	r2, [r3, #55]	@ 0x37
 8005ab0:	687b      	ldr	r3, [r7, #4]
 8005ab2:	2200      	movs	r2, #0
 8005ab4:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
 8005ab8:	687b      	ldr	r3, [r7, #4]
 8005aba:	2200      	movs	r2, #0
 8005abc:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39
    {
    }
 8005ac0:	687b      	ldr	r3, [r7, #4]
 8005ac2:	4618      	mov	r0, r3
 8005ac4:	3708      	adds	r7, #8
 8005ac6:	46bd      	mov	sp, r7
 8005ac8:	bd80      	pop	{r7, pc}
 8005aca:	bf00      	nop
 8005acc:	0802eb98 	.word	0x0802eb98

08005ad0 <_ZN8touchgfx14AbstractButtonC1Ev>:
 */
class AbstractButton : public Widget
{
public:
    /** Sets this Widget touchable so the user can interact with buttons. */
    AbstractButton()
 8005ad0:	b580      	push	{r7, lr}
 8005ad2:	b082      	sub	sp, #8
 8005ad4:	af00      	add	r7, sp, #0
 8005ad6:	6078      	str	r0, [r7, #4]
        : Widget(), action(), pressed(false)
 8005ad8:	687b      	ldr	r3, [r7, #4]
 8005ada:	4618      	mov	r0, r3
 8005adc:	2326      	movs	r3, #38	@ 0x26
 8005ade:	461a      	mov	r2, r3
 8005ae0:	2100      	movs	r1, #0
 8005ae2:	f025 fab6 	bl	802b052 <memset>
 8005ae6:	687b      	ldr	r3, [r7, #4]
 8005ae8:	4618      	mov	r0, r3
 8005aea:	f7fe fc33 	bl	8004354 <_ZN8touchgfx6WidgetC1Ev>
 8005aee:	4a0a      	ldr	r2, [pc, #40]	@ (8005b18 <_ZN8touchgfx14AbstractButtonC1Ev+0x48>)
 8005af0:	687b      	ldr	r3, [r7, #4]
 8005af2:	601a      	str	r2, [r3, #0]
 8005af4:	687b      	ldr	r3, [r7, #4]
 8005af6:	2200      	movs	r2, #0
 8005af8:	629a      	str	r2, [r3, #40]	@ 0x28
 8005afa:	687b      	ldr	r3, [r7, #4]
 8005afc:	2200      	movs	r2, #0
 8005afe:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c
    {
        setTouchable(true);
 8005b02:	687b      	ldr	r3, [r7, #4]
 8005b04:	2101      	movs	r1, #1
 8005b06:	4618      	mov	r0, r3
 8005b08:	f7ff fe50 	bl	80057ac <_ZN8touchgfx8Drawable12setTouchableEb>
    }
 8005b0c:	687b      	ldr	r3, [r7, #4]
 8005b0e:	4618      	mov	r0, r3
 8005b10:	3708      	adds	r7, #8
 8005b12:	46bd      	mov	sp, r7
 8005b14:	bd80      	pop	{r7, pc}
 8005b16:	bf00      	nop
 8005b18:	0802e9fc 	.word	0x0802e9fc

08005b1c <_ZN8touchgfx14AbstractButton9setActionERNS_15GenericCallbackIRKS0_vvEE>:
     * @param  callback The callback to be executed. The callback will be executed with a
     *                  reference to the AbstractButton.
     *
     * @see GenericCallback, handleClickEvent, ClickEvent
     */
    void setAction(GenericCallback<const AbstractButton&>& callback)
 8005b1c:	b480      	push	{r7}
 8005b1e:	b083      	sub	sp, #12
 8005b20:	af00      	add	r7, sp, #0
 8005b22:	6078      	str	r0, [r7, #4]
 8005b24:	6039      	str	r1, [r7, #0]
    {
        action = &callback;
 8005b26:	687b      	ldr	r3, [r7, #4]
 8005b28:	683a      	ldr	r2, [r7, #0]
 8005b2a:	629a      	str	r2, [r3, #40]	@ 0x28
    }
 8005b2c:	bf00      	nop
 8005b2e:	370c      	adds	r7, #12
 8005b30:	46bd      	mov	sp, r7
 8005b32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b36:	4770      	bx	lr

08005b38 <_ZN8touchgfx14AbstractButtonD1Ev>:
class AbstractButton : public Widget
 8005b38:	b580      	push	{r7, lr}
 8005b3a:	b082      	sub	sp, #8
 8005b3c:	af00      	add	r7, sp, #0
 8005b3e:	6078      	str	r0, [r7, #4]
 8005b40:	4a05      	ldr	r2, [pc, #20]	@ (8005b58 <_ZN8touchgfx14AbstractButtonD1Ev+0x20>)
 8005b42:	687b      	ldr	r3, [r7, #4]
 8005b44:	601a      	str	r2, [r3, #0]
 8005b46:	687b      	ldr	r3, [r7, #4]
 8005b48:	4618      	mov	r0, r3
 8005b4a:	f7fe fc15 	bl	8004378 <_ZN8touchgfx6WidgetD1Ev>
 8005b4e:	687b      	ldr	r3, [r7, #4]
 8005b50:	4618      	mov	r0, r3
 8005b52:	3708      	adds	r7, #8
 8005b54:	46bd      	mov	sp, r7
 8005b56:	bd80      	pop	{r7, pc}
 8005b58:	0802e9fc 	.word	0x0802e9fc

08005b5c <_ZN8touchgfx14AbstractButtonD0Ev>:
 8005b5c:	b580      	push	{r7, lr}
 8005b5e:	b082      	sub	sp, #8
 8005b60:	af00      	add	r7, sp, #0
 8005b62:	6078      	str	r0, [r7, #4]
 8005b64:	6878      	ldr	r0, [r7, #4]
 8005b66:	f7ff ffe7 	bl	8005b38 <_ZN8touchgfx14AbstractButtonD1Ev>
 8005b6a:	2130      	movs	r1, #48	@ 0x30
 8005b6c:	6878      	ldr	r0, [r7, #4]
 8005b6e:	f025 f83a 	bl	802abe6 <_ZdlPvj>
 8005b72:	687b      	ldr	r3, [r7, #4]
 8005b74:	4618      	mov	r0, r3
 8005b76:	3708      	adds	r7, #8
 8005b78:	46bd      	mov	sp, r7
 8005b7a:	bd80      	pop	{r7, pc}

08005b7c <_ZN8touchgfx6ButtonC1Ev>:
 * pressed state.
 */
class Button : public AbstractButton
{
public:
    Button()
 8005b7c:	b580      	push	{r7, lr}
 8005b7e:	b082      	sub	sp, #8
 8005b80:	af00      	add	r7, sp, #0
 8005b82:	6078      	str	r0, [r7, #4]
        : AbstractButton(), up(), down(), alpha(255)
 8005b84:	687b      	ldr	r3, [r7, #4]
 8005b86:	4618      	mov	r0, r3
 8005b88:	f7ff ffa2 	bl	8005ad0 <_ZN8touchgfx14AbstractButtonC1Ev>
 8005b8c:	4a0c      	ldr	r2, [pc, #48]	@ (8005bc0 <_ZN8touchgfx6ButtonC1Ev+0x44>)
 8005b8e:	687b      	ldr	r3, [r7, #4]
 8005b90:	601a      	str	r2, [r3, #0]
 8005b92:	687b      	ldr	r3, [r7, #4]
 8005b94:	332e      	adds	r3, #46	@ 0x2e
 8005b96:	f64f 71ff 	movw	r1, #65535	@ 0xffff
 8005b9a:	4618      	mov	r0, r3
 8005b9c:	f7ff fdf6 	bl	800578c <_ZN8touchgfx6BitmapC1Et>
 8005ba0:	687b      	ldr	r3, [r7, #4]
 8005ba2:	3330      	adds	r3, #48	@ 0x30
 8005ba4:	f64f 71ff 	movw	r1, #65535	@ 0xffff
 8005ba8:	4618      	mov	r0, r3
 8005baa:	f7ff fdef 	bl	800578c <_ZN8touchgfx6BitmapC1Et>
 8005bae:	687b      	ldr	r3, [r7, #4]
 8005bb0:	22ff      	movs	r2, #255	@ 0xff
 8005bb2:	f883 2032 	strb.w	r2, [r3, #50]	@ 0x32
    {
    }
 8005bb6:	687b      	ldr	r3, [r7, #4]
 8005bb8:	4618      	mov	r0, r3
 8005bba:	3708      	adds	r7, #8
 8005bbc:	46bd      	mov	sp, r7
 8005bbe:	bd80      	pop	{r7, pc}
 8005bc0:	0802ed08 	.word	0x0802ed08

08005bc4 <_ZN8touchgfx4ViewI25Localize_AnomalyPresenterED1Ev>:
class View : public Screen
 8005bc4:	b580      	push	{r7, lr}
 8005bc6:	b082      	sub	sp, #8
 8005bc8:	af00      	add	r7, sp, #0
 8005bca:	6078      	str	r0, [r7, #4]
 8005bcc:	4a05      	ldr	r2, [pc, #20]	@ (8005be4 <_ZN8touchgfx4ViewI25Localize_AnomalyPresenterED1Ev+0x20>)
 8005bce:	687b      	ldr	r3, [r7, #4]
 8005bd0:	601a      	str	r2, [r3, #0]
 8005bd2:	687b      	ldr	r3, [r7, #4]
 8005bd4:	4618      	mov	r0, r3
 8005bd6:	f7ff fe0f 	bl	80057f8 <_ZN8touchgfx6ScreenD1Ev>
 8005bda:	687b      	ldr	r3, [r7, #4]
 8005bdc:	4618      	mov	r0, r3
 8005bde:	3708      	adds	r7, #8
 8005be0:	46bd      	mov	sp, r7
 8005be2:	bd80      	pop	{r7, pc}
 8005be4:	0802d380 	.word	0x0802d380

08005be8 <_ZN8touchgfx4ViewI25Localize_AnomalyPresenterED0Ev>:
 8005be8:	b580      	push	{r7, lr}
 8005bea:	b082      	sub	sp, #8
 8005bec:	af00      	add	r7, sp, #0
 8005bee:	6078      	str	r0, [r7, #4]
 8005bf0:	6878      	ldr	r0, [r7, #4]
 8005bf2:	f7ff ffe7 	bl	8005bc4 <_ZN8touchgfx4ViewI25Localize_AnomalyPresenterED1Ev>
 8005bf6:	2140      	movs	r1, #64	@ 0x40
 8005bf8:	6878      	ldr	r0, [r7, #4]
 8005bfa:	f024 fff4 	bl	802abe6 <_ZdlPvj>
 8005bfe:	687b      	ldr	r3, [r7, #4]
 8005c00:	4618      	mov	r0, r3
 8005c02:	3708      	adds	r7, #8
 8005c04:	46bd      	mov	sp, r7
 8005c06:	bd80      	pop	{r7, pc}

08005c08 <_ZN24Localize_AnomalyViewBaseD1Ev>:

class Localize_AnomalyViewBase : public touchgfx::View<Localize_AnomalyPresenter>
{
public:
    Localize_AnomalyViewBase();
    virtual ~Localize_AnomalyViewBase() {}
 8005c08:	b580      	push	{r7, lr}
 8005c0a:	b082      	sub	sp, #8
 8005c0c:	af00      	add	r7, sp, #0
 8005c0e:	6078      	str	r0, [r7, #4]
 8005c10:	4a3c      	ldr	r2, [pc, #240]	@ (8005d04 <_ZN24Localize_AnomalyViewBaseD1Ev+0xfc>)
 8005c12:	687b      	ldr	r3, [r7, #4]
 8005c14:	601a      	str	r2, [r3, #0]
 8005c16:	687b      	ldr	r3, [r7, #4]
 8005c18:	f503 736c 	add.w	r3, r3, #944	@ 0x3b0
 8005c1c:	4618      	mov	r0, r3
 8005c1e:	f000 fdf7 	bl	8006810 <_ZN8touchgfx8CallbackI24Localize_AnomalyViewBaseRKNS_14AbstractButtonEvvED1Ev>
 8005c22:	687b      	ldr	r3, [r7, #4]
 8005c24:	f503 735d 	add.w	r3, r3, #884	@ 0x374
 8005c28:	4618      	mov	r0, r3
 8005c2a:	f000 fe79 	bl	8006920 <_ZN8touchgfx8TextAreaD1Ev>
 8005c2e:	687b      	ldr	r3, [r7, #4]
 8005c30:	f503 7350 	add.w	r3, r3, #832	@ 0x340
 8005c34:	4618      	mov	r0, r3
 8005c36:	f000 fe51 	bl	80068dc <_ZN8touchgfx13BoxWithBorderD1Ev>
 8005c3a:	687b      	ldr	r3, [r7, #4]
 8005c3c:	f503 7345 	add.w	r3, r3, #788	@ 0x314
 8005c40:	4618      	mov	r0, r3
 8005c42:	f000 fe07 	bl	8006854 <_ZN8touchgfx9ContainerD1Ev>
 8005c46:	687b      	ldr	r3, [r7, #4]
 8005c48:	f503 733a 	add.w	r3, r3, #744	@ 0x2e8
 8005c4c:	4618      	mov	r0, r3
 8005c4e:	f000 fe23 	bl	8006898 <_ZN8touchgfx5ImageD1Ev>
 8005c52:	687b      	ldr	r3, [r7, #4]
 8005c54:	f503 732d 	add.w	r3, r3, #692	@ 0x2b4
 8005c58:	4618      	mov	r0, r3
 8005c5a:	f000 fe3f 	bl	80068dc <_ZN8touchgfx13BoxWithBorderD1Ev>
 8005c5e:	687b      	ldr	r3, [r7, #4]
 8005c60:	f503 7322 	add.w	r3, r3, #648	@ 0x288
 8005c64:	4618      	mov	r0, r3
 8005c66:	f000 fdf5 	bl	8006854 <_ZN8touchgfx9ContainerD1Ev>
 8005c6a:	687b      	ldr	r3, [r7, #4]
 8005c6c:	f503 7315 	add.w	r3, r3, #596	@ 0x254
 8005c70:	4618      	mov	r0, r3
 8005c72:	f000 fe33 	bl	80068dc <_ZN8touchgfx13BoxWithBorderD1Ev>
 8005c76:	687b      	ldr	r3, [r7, #4]
 8005c78:	f503 730a 	add.w	r3, r3, #552	@ 0x228
 8005c7c:	4618      	mov	r0, r3
 8005c7e:	f000 fde9 	bl	8006854 <_ZN8touchgfx9ContainerD1Ev>
 8005c82:	687b      	ldr	r3, [r7, #4]
 8005c84:	f503 73fa 	add.w	r3, r3, #500	@ 0x1f4
 8005c88:	4618      	mov	r0, r3
 8005c8a:	f000 fe71 	bl	8006970 <_ZN8touchgfx6ButtonD1Ev>
 8005c8e:	687b      	ldr	r3, [r7, #4]
 8005c90:	f503 73dc 	add.w	r3, r3, #440	@ 0x1b8
 8005c94:	4618      	mov	r0, r3
 8005c96:	f000 fe43 	bl	8006920 <_ZN8touchgfx8TextAreaD1Ev>
 8005c9a:	687b      	ldr	r3, [r7, #4]
 8005c9c:	f503 73c2 	add.w	r3, r3, #388	@ 0x184
 8005ca0:	4618      	mov	r0, r3
 8005ca2:	f000 fe1b 	bl	80068dc <_ZN8touchgfx13BoxWithBorderD1Ev>
 8005ca6:	687b      	ldr	r3, [r7, #4]
 8005ca8:	f503 73ac 	add.w	r3, r3, #344	@ 0x158
 8005cac:	4618      	mov	r0, r3
 8005cae:	f000 fdd1 	bl	8006854 <_ZN8touchgfx9ContainerD1Ev>
 8005cb2:	687b      	ldr	r3, [r7, #4]
 8005cb4:	f503 7392 	add.w	r3, r3, #292	@ 0x124
 8005cb8:	4618      	mov	r0, r3
 8005cba:	f000 fe0f 	bl	80068dc <_ZN8touchgfx13BoxWithBorderD1Ev>
 8005cbe:	687b      	ldr	r3, [r7, #4]
 8005cc0:	33f8      	adds	r3, #248	@ 0xf8
 8005cc2:	4618      	mov	r0, r3
 8005cc4:	f000 fdc6 	bl	8006854 <_ZN8touchgfx9ContainerD1Ev>
 8005cc8:	687b      	ldr	r3, [r7, #4]
 8005cca:	33c4      	adds	r3, #196	@ 0xc4
 8005ccc:	4618      	mov	r0, r3
 8005cce:	f000 fe05 	bl	80068dc <_ZN8touchgfx13BoxWithBorderD1Ev>
 8005cd2:	687b      	ldr	r3, [r7, #4]
 8005cd4:	3398      	adds	r3, #152	@ 0x98
 8005cd6:	4618      	mov	r0, r3
 8005cd8:	f000 fdbc 	bl	8006854 <_ZN8touchgfx9ContainerD1Ev>
 8005cdc:	687b      	ldr	r3, [r7, #4]
 8005cde:	336c      	adds	r3, #108	@ 0x6c
 8005ce0:	4618      	mov	r0, r3
 8005ce2:	f000 fdd9 	bl	8006898 <_ZN8touchgfx5ImageD1Ev>
 8005ce6:	687b      	ldr	r3, [r7, #4]
 8005ce8:	3340      	adds	r3, #64	@ 0x40
 8005cea:	4618      	mov	r0, r3
 8005cec:	f7ff fe44 	bl	8005978 <_ZN8touchgfx3BoxD1Ev>
 8005cf0:	687b      	ldr	r3, [r7, #4]
 8005cf2:	4618      	mov	r0, r3
 8005cf4:	f7ff ff66 	bl	8005bc4 <_ZN8touchgfx4ViewI25Localize_AnomalyPresenterED1Ev>
 8005cf8:	687b      	ldr	r3, [r7, #4]
 8005cfa:	4618      	mov	r0, r3
 8005cfc:	3708      	adds	r7, #8
 8005cfe:	46bd      	mov	sp, r7
 8005d00:	bd80      	pop	{r7, pc}
 8005d02:	bf00      	nop
 8005d04:	0802d330 	.word	0x0802d330

08005d08 <_ZN24Localize_AnomalyViewBaseD0Ev>:
 8005d08:	b580      	push	{r7, lr}
 8005d0a:	b082      	sub	sp, #8
 8005d0c:	af00      	add	r7, sp, #0
 8005d0e:	6078      	str	r0, [r7, #4]
 8005d10:	6878      	ldr	r0, [r7, #4]
 8005d12:	f7ff ff79 	bl	8005c08 <_ZN24Localize_AnomalyViewBaseD1Ev>
 8005d16:	f44f 7170 	mov.w	r1, #960	@ 0x3c0
 8005d1a:	6878      	ldr	r0, [r7, #4]
 8005d1c:	f024 ff63 	bl	802abe6 <_ZdlPvj>
 8005d20:	687b      	ldr	r3, [r7, #4]
 8005d22:	4618      	mov	r0, r3
 8005d24:	3708      	adds	r7, #8
 8005d26:	46bd      	mov	sp, r7
 8005d28:	bd80      	pop	{r7, pc}

08005d2a <_ZN24Localize_AnomalyViewBase12update_imageEv>:
    virtual void handleKeyEvent(uint8_t key);

    /*
     * Virtual Action Handlers
     */
    virtual void update_image()
 8005d2a:	b480      	push	{r7}
 8005d2c:	b083      	sub	sp, #12
 8005d2e:	af00      	add	r7, sp, #0
 8005d30:	6078      	str	r0, [r7, #4]
    {
        // Override and implement this function in Localize_Anomaly
    }
 8005d32:	bf00      	nop
 8005d34:	370c      	adds	r7, #12
 8005d36:	46bd      	mov	sp, r7
 8005d38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d3c:	4770      	bx	lr

08005d3e <_ZN24Localize_AnomalyViewBase11applicationEv>:

protected:
    FrontendApplication& application() {
 8005d3e:	b580      	push	{r7, lr}
 8005d40:	b082      	sub	sp, #8
 8005d42:	af00      	add	r7, sp, #0
 8005d44:	6078      	str	r0, [r7, #4]
        return *static_cast<FrontendApplication*>(touchgfx::Application::getInstance());
 8005d46:	f015 fe0f 	bl	801b968 <_ZN8touchgfx11Application11getInstanceEv>
 8005d4a:	4603      	mov	r3, r0
    }
 8005d4c:	4618      	mov	r0, r3
 8005d4e:	3708      	adds	r7, #8
 8005d50:	46bd      	mov	sp, r7
 8005d52:	bd80      	pop	{r7, pc}

08005d54 <_ZN24Localize_AnomalyViewBaseC1Ev>:
#include <gui_generated/localize_anomaly_screen/Localize_AnomalyViewBase.hpp>
#include <touchgfx/Color.hpp>
#include <BitmapDatabase.hpp>
#include <texts/TextKeysAndLanguages.hpp>

Localize_AnomalyViewBase::Localize_AnomalyViewBase() :
 8005d54:	b590      	push	{r4, r7, lr}
 8005d56:	b0b5      	sub	sp, #212	@ 0xd4
 8005d58:	af02      	add	r7, sp, #8
 8005d5a:	6078      	str	r0, [r7, #4]
    buttonCallback(this, &Localize_AnomalyViewBase::buttonCallbackHandler)
 8005d5c:	687b      	ldr	r3, [r7, #4]
 8005d5e:	4618      	mov	r0, r3
 8005d60:	f000 fcf0 	bl	8006744 <_ZN8touchgfx4ViewI25Localize_AnomalyPresenterEC1Ev>
 8005d64:	4ae0      	ldr	r2, [pc, #896]	@ (80060e8 <_ZN24Localize_AnomalyViewBaseC1Ev+0x394>)
 8005d66:	687b      	ldr	r3, [r7, #4]
 8005d68:	601a      	str	r2, [r3, #0]
 8005d6a:	687b      	ldr	r3, [r7, #4]
 8005d6c:	3340      	adds	r3, #64	@ 0x40
 8005d6e:	4618      	mov	r0, r3
 8005d70:	f7ff fdaa 	bl	80058c8 <_ZN8touchgfx3BoxC1Ev>
 8005d74:	687b      	ldr	r3, [r7, #4]
 8005d76:	f103 046c 	add.w	r4, r3, #108	@ 0x6c
 8005d7a:	f107 0314 	add.w	r3, r7, #20
 8005d7e:	f64f 71ff 	movw	r1, #65535	@ 0xffff
 8005d82:	4618      	mov	r0, r3
 8005d84:	f7ff fd02 	bl	800578c <_ZN8touchgfx6BitmapC1Et>
 8005d88:	f107 0314 	add.w	r3, r7, #20
 8005d8c:	4619      	mov	r1, r3
 8005d8e:	4620      	mov	r0, r4
 8005d90:	f7ff fdcc 	bl	800592c <_ZN8touchgfx5ImageC1ERKNS_6BitmapE>
 8005d94:	687b      	ldr	r3, [r7, #4]
 8005d96:	3398      	adds	r3, #152	@ 0x98
 8005d98:	4618      	mov	r0, r3
 8005d9a:	f7ff fd17 	bl	80057cc <_ZN8touchgfx9ContainerC1Ev>
 8005d9e:	687b      	ldr	r3, [r7, #4]
 8005da0:	33c4      	adds	r3, #196	@ 0xc4
 8005da2:	4618      	mov	r0, r3
 8005da4:	f7ff fe0a 	bl	80059bc <_ZN8touchgfx13BoxWithBorderC1Ev>
 8005da8:	687b      	ldr	r3, [r7, #4]
 8005daa:	33f8      	adds	r3, #248	@ 0xf8
 8005dac:	4618      	mov	r0, r3
 8005dae:	f7ff fd0d 	bl	80057cc <_ZN8touchgfx9ContainerC1Ev>
 8005db2:	687b      	ldr	r3, [r7, #4]
 8005db4:	f503 7392 	add.w	r3, r3, #292	@ 0x124
 8005db8:	4618      	mov	r0, r3
 8005dba:	f7ff fdff 	bl	80059bc <_ZN8touchgfx13BoxWithBorderC1Ev>
 8005dbe:	687b      	ldr	r3, [r7, #4]
 8005dc0:	f503 73ac 	add.w	r3, r3, #344	@ 0x158
 8005dc4:	4618      	mov	r0, r3
 8005dc6:	f7ff fd01 	bl	80057cc <_ZN8touchgfx9ContainerC1Ev>
 8005dca:	687b      	ldr	r3, [r7, #4]
 8005dcc:	f503 73c2 	add.w	r3, r3, #388	@ 0x184
 8005dd0:	4618      	mov	r0, r3
 8005dd2:	f7ff fdf3 	bl	80059bc <_ZN8touchgfx13BoxWithBorderC1Ev>
 8005dd6:	687b      	ldr	r3, [r7, #4]
 8005dd8:	f503 73dc 	add.w	r3, r3, #440	@ 0x1b8
 8005ddc:	4618      	mov	r0, r3
 8005dde:	f7ff fe3d 	bl	8005a5c <_ZN8touchgfx8TextAreaC1Ev>
 8005de2:	687b      	ldr	r3, [r7, #4]
 8005de4:	f503 73fa 	add.w	r3, r3, #500	@ 0x1f4
 8005de8:	4618      	mov	r0, r3
 8005dea:	f7ff fec7 	bl	8005b7c <_ZN8touchgfx6ButtonC1Ev>
 8005dee:	687b      	ldr	r3, [r7, #4]
 8005df0:	f503 730a 	add.w	r3, r3, #552	@ 0x228
 8005df4:	4618      	mov	r0, r3
 8005df6:	f7ff fce9 	bl	80057cc <_ZN8touchgfx9ContainerC1Ev>
 8005dfa:	687b      	ldr	r3, [r7, #4]
 8005dfc:	f503 7315 	add.w	r3, r3, #596	@ 0x254
 8005e00:	4618      	mov	r0, r3
 8005e02:	f7ff fddb 	bl	80059bc <_ZN8touchgfx13BoxWithBorderC1Ev>
 8005e06:	687b      	ldr	r3, [r7, #4]
 8005e08:	f503 7322 	add.w	r3, r3, #648	@ 0x288
 8005e0c:	4618      	mov	r0, r3
 8005e0e:	f7ff fcdd 	bl	80057cc <_ZN8touchgfx9ContainerC1Ev>
 8005e12:	687b      	ldr	r3, [r7, #4]
 8005e14:	f503 732d 	add.w	r3, r3, #692	@ 0x2b4
 8005e18:	4618      	mov	r0, r3
 8005e1a:	f7ff fdcf 	bl	80059bc <_ZN8touchgfx13BoxWithBorderC1Ev>
 8005e1e:	687b      	ldr	r3, [r7, #4]
 8005e20:	f503 743a 	add.w	r4, r3, #744	@ 0x2e8
 8005e24:	f107 0318 	add.w	r3, r7, #24
 8005e28:	f64f 71ff 	movw	r1, #65535	@ 0xffff
 8005e2c:	4618      	mov	r0, r3
 8005e2e:	f7ff fcad 	bl	800578c <_ZN8touchgfx6BitmapC1Et>
 8005e32:	f107 0318 	add.w	r3, r7, #24
 8005e36:	4619      	mov	r1, r3
 8005e38:	4620      	mov	r0, r4
 8005e3a:	f7ff fd77 	bl	800592c <_ZN8touchgfx5ImageC1ERKNS_6BitmapE>
 8005e3e:	687b      	ldr	r3, [r7, #4]
 8005e40:	f503 7345 	add.w	r3, r3, #788	@ 0x314
 8005e44:	4618      	mov	r0, r3
 8005e46:	f7ff fcc1 	bl	80057cc <_ZN8touchgfx9ContainerC1Ev>
 8005e4a:	687b      	ldr	r3, [r7, #4]
 8005e4c:	f503 7350 	add.w	r3, r3, #832	@ 0x340
 8005e50:	4618      	mov	r0, r3
 8005e52:	f7ff fdb3 	bl	80059bc <_ZN8touchgfx13BoxWithBorderC1Ev>
 8005e56:	687b      	ldr	r3, [r7, #4]
 8005e58:	f503 735d 	add.w	r3, r3, #884	@ 0x374
 8005e5c:	4618      	mov	r0, r3
 8005e5e:	f7ff fdfd 	bl	8005a5c <_ZN8touchgfx8TextAreaC1Ev>
 8005e62:	687b      	ldr	r3, [r7, #4]
 8005e64:	f503 706c 	add.w	r0, r3, #944	@ 0x3b0
 8005e68:	4ba0      	ldr	r3, [pc, #640]	@ (80060ec <_ZN24Localize_AnomalyViewBaseC1Ev+0x398>)
 8005e6a:	61fb      	str	r3, [r7, #28]
 8005e6c:	2300      	movs	r3, #0
 8005e6e:	623b      	str	r3, [r7, #32]
 8005e70:	f107 031c 	add.w	r3, r7, #28
 8005e74:	cb0c      	ldmia	r3, {r2, r3}
 8005e76:	6879      	ldr	r1, [r7, #4]
 8005e78:	f000 fc8a 	bl	8006790 <_ZN8touchgfx8CallbackI24Localize_AnomalyViewBaseRKNS_14AbstractButtonEvvEC1EPS1_MS1_FvS4_E>
{

    __background.setPosition(0, 0, 480, 272);
 8005e7c:	687b      	ldr	r3, [r7, #4]
 8005e7e:	f103 0040 	add.w	r0, r3, #64	@ 0x40
 8005e82:	f44f 7388 	mov.w	r3, #272	@ 0x110
 8005e86:	9300      	str	r3, [sp, #0]
 8005e88:	f44f 73f0 	mov.w	r3, #480	@ 0x1e0
 8005e8c:	2200      	movs	r2, #0
 8005e8e:	2100      	movs	r1, #0
 8005e90:	f7fe f817 	bl	8003ec2 <_ZN8touchgfx8Drawable11setPositionEssss>
    __background.setColor(touchgfx::Color::getColorFromRGB(0, 0, 0));
 8005e94:	687b      	ldr	r3, [r7, #4]
 8005e96:	f103 0440 	add.w	r4, r3, #64	@ 0x40
 8005e9a:	2300      	movs	r3, #0
 8005e9c:	f887 3082 	strb.w	r3, [r7, #130]	@ 0x82
 8005ea0:	2300      	movs	r3, #0
 8005ea2:	f887 3081 	strb.w	r3, [r7, #129]	@ 0x81
 8005ea6:	2300      	movs	r3, #0
 8005ea8:	f887 3080 	strb.w	r3, [r7, #128]	@ 0x80
     *
     * @return The color representation depending on LCD color format.
     */
    FORCE_INLINE_FUNCTION static colortype getColorFromRGB(uint8_t red, uint8_t green, uint8_t blue)
    {
        return 0xFF000000 | (red << 16) | (green << 8) | (blue);
 8005eac:	f897 3082 	ldrb.w	r3, [r7, #130]	@ 0x82
 8005eb0:	041a      	lsls	r2, r3, #16
 8005eb2:	f897 3081 	ldrb.w	r3, [r7, #129]	@ 0x81
 8005eb6:	021b      	lsls	r3, r3, #8
 8005eb8:	431a      	orrs	r2, r3
 8005eba:	f897 3080 	ldrb.w	r3, [r7, #128]	@ 0x80
 8005ebe:	4313      	orrs	r3, r2
 8005ec0:	f043 427f 	orr.w	r2, r3, #4278190080	@ 0xff000000
 8005ec4:	f107 037c 	add.w	r3, r7, #124	@ 0x7c
 8005ec8:	4611      	mov	r1, r2
 8005eca:	4618      	mov	r0, r3
 8005ecc:	f7ff fc4f 	bl	800576e <_ZN8touchgfx9colortypeC1Em>
 8005ed0:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8005ed2:	4619      	mov	r1, r3
 8005ed4:	4620      	mov	r0, r4
 8005ed6:	f7ff fd1b 	bl	8005910 <_ZN8touchgfx3Box8setColorENS_9colortypeE>

    Main_Background.setXY(0, 0);
 8005eda:	687b      	ldr	r3, [r7, #4]
 8005edc:	336c      	adds	r3, #108	@ 0x6c
 8005ede:	2200      	movs	r2, #0
 8005ee0:	2100      	movs	r1, #0
 8005ee2:	4618      	mov	r0, r3
 8005ee4:	f7fe f846 	bl	8003f74 <_ZN8touchgfx8Drawable5setXYEss>
    Main_Background.setBitmap(touchgfx::Bitmap(BITMAP_BACKGROUND_1_ID));
 8005ee8:	687b      	ldr	r3, [r7, #4]
 8005eea:	f103 046c 	add.w	r4, r3, #108	@ 0x6c
 8005eee:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8005ef2:	2100      	movs	r1, #0
 8005ef4:	4618      	mov	r0, r3
 8005ef6:	f7ff fc49 	bl	800578c <_ZN8touchgfx6BitmapC1Et>
 8005efa:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8005efe:	4619      	mov	r1, r3
 8005f00:	4620      	mov	r0, r4
 8005f02:	f014 f822 	bl	8019f4a <_ZN8touchgfx5Image9setBitmapERKNS_6BitmapE>

    Button_Panel.setPosition(10, 187, 460, 77);
 8005f06:	687b      	ldr	r3, [r7, #4]
 8005f08:	f103 0098 	add.w	r0, r3, #152	@ 0x98
 8005f0c:	234d      	movs	r3, #77	@ 0x4d
 8005f0e:	9300      	str	r3, [sp, #0]
 8005f10:	f44f 73e6 	mov.w	r3, #460	@ 0x1cc
 8005f14:	22bb      	movs	r2, #187	@ 0xbb
 8005f16:	210a      	movs	r1, #10
 8005f18:	f7fd ffd3 	bl	8003ec2 <_ZN8touchgfx8Drawable11setPositionEssss>

    Button_Panel_Background.setPosition(0, 0, 460, 77);
 8005f1c:	687b      	ldr	r3, [r7, #4]
 8005f1e:	f103 00c4 	add.w	r0, r3, #196	@ 0xc4
 8005f22:	234d      	movs	r3, #77	@ 0x4d
 8005f24:	9300      	str	r3, [sp, #0]
 8005f26:	f44f 73e6 	mov.w	r3, #460	@ 0x1cc
 8005f2a:	2200      	movs	r2, #0
 8005f2c:	2100      	movs	r1, #0
 8005f2e:	f7fd ffc8 	bl	8003ec2 <_ZN8touchgfx8Drawable11setPositionEssss>
    Button_Panel_Background.setColor(touchgfx::Color::getColorFromRGB(78, 137, 174));
 8005f32:	687b      	ldr	r3, [r7, #4]
 8005f34:	f103 04c4 	add.w	r4, r3, #196	@ 0xc4
 8005f38:	234e      	movs	r3, #78	@ 0x4e
 8005f3a:	f887 3085 	strb.w	r3, [r7, #133]	@ 0x85
 8005f3e:	2389      	movs	r3, #137	@ 0x89
 8005f40:	f887 3084 	strb.w	r3, [r7, #132]	@ 0x84
 8005f44:	23ae      	movs	r3, #174	@ 0xae
 8005f46:	f887 3083 	strb.w	r3, [r7, #131]	@ 0x83
 8005f4a:	f897 3085 	ldrb.w	r3, [r7, #133]	@ 0x85
 8005f4e:	041a      	lsls	r2, r3, #16
 8005f50:	f897 3084 	ldrb.w	r3, [r7, #132]	@ 0x84
 8005f54:	021b      	lsls	r3, r3, #8
 8005f56:	431a      	orrs	r2, r3
 8005f58:	f897 3083 	ldrb.w	r3, [r7, #131]	@ 0x83
 8005f5c:	4313      	orrs	r3, r2
 8005f5e:	f043 427f 	orr.w	r2, r3, #4278190080	@ 0xff000000
 8005f62:	f107 0378 	add.w	r3, r7, #120	@ 0x78
 8005f66:	4611      	mov	r1, r2
 8005f68:	4618      	mov	r0, r3
 8005f6a:	f7ff fc00 	bl	800576e <_ZN8touchgfx9colortypeC1Em>
 8005f6e:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8005f70:	4619      	mov	r1, r3
 8005f72:	4620      	mov	r0, r4
 8005f74:	f7ff fccc 	bl	8005910 <_ZN8touchgfx3Box8setColorENS_9colortypeE>
    Button_Panel_Background.setBorderColor(touchgfx::Color::getColorFromRGB(237, 102, 99));
 8005f78:	687b      	ldr	r3, [r7, #4]
 8005f7a:	f103 04c4 	add.w	r4, r3, #196	@ 0xc4
 8005f7e:	23ed      	movs	r3, #237	@ 0xed
 8005f80:	f887 3088 	strb.w	r3, [r7, #136]	@ 0x88
 8005f84:	2366      	movs	r3, #102	@ 0x66
 8005f86:	f887 3087 	strb.w	r3, [r7, #135]	@ 0x87
 8005f8a:	2363      	movs	r3, #99	@ 0x63
 8005f8c:	f887 3086 	strb.w	r3, [r7, #134]	@ 0x86
 8005f90:	f897 3088 	ldrb.w	r3, [r7, #136]	@ 0x88
 8005f94:	041a      	lsls	r2, r3, #16
 8005f96:	f897 3087 	ldrb.w	r3, [r7, #135]	@ 0x87
 8005f9a:	021b      	lsls	r3, r3, #8
 8005f9c:	431a      	orrs	r2, r3
 8005f9e:	f897 3086 	ldrb.w	r3, [r7, #134]	@ 0x86
 8005fa2:	4313      	orrs	r3, r2
 8005fa4:	f043 427f 	orr.w	r2, r3, #4278190080	@ 0xff000000
 8005fa8:	f107 0374 	add.w	r3, r7, #116	@ 0x74
 8005fac:	4611      	mov	r1, r2
 8005fae:	4618      	mov	r0, r3
 8005fb0:	f7ff fbdd 	bl	800576e <_ZN8touchgfx9colortypeC1Em>
 8005fb4:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8005fb6:	4619      	mov	r1, r3
 8005fb8:	4620      	mov	r0, r4
 8005fba:	f7ff fd1b 	bl	80059f4 <_ZN8touchgfx13BoxWithBorder14setBorderColorENS_9colortypeE>
    Button_Panel_Background.setBorderSize(5);
 8005fbe:	687b      	ldr	r3, [r7, #4]
 8005fc0:	33c4      	adds	r3, #196	@ 0xc4
 8005fc2:	2105      	movs	r1, #5
 8005fc4:	4618      	mov	r0, r3
 8005fc6:	f7ff fd23 	bl	8005a10 <_ZN8touchgfx13BoxWithBorder13setBorderSizeEt>
    Button_Panel.add(Button_Panel_Background);
 8005fca:	687b      	ldr	r3, [r7, #4]
 8005fcc:	f103 0298 	add.w	r2, r3, #152	@ 0x98
 8005fd0:	687b      	ldr	r3, [r7, #4]
 8005fd2:	33c4      	adds	r3, #196	@ 0xc4
 8005fd4:	4619      	mov	r1, r3
 8005fd6:	4610      	mov	r0, r2
 8005fd8:	f011 fe12 	bl	8017c00 <_ZN8touchgfx9Container3addERNS_8DrawableE>

    Anomaly_Detection_Panel.setPosition(5, 4, 450, 73);
 8005fdc:	687b      	ldr	r3, [r7, #4]
 8005fde:	f103 00f8 	add.w	r0, r3, #248	@ 0xf8
 8005fe2:	2349      	movs	r3, #73	@ 0x49
 8005fe4:	9300      	str	r3, [sp, #0]
 8005fe6:	f44f 73e1 	mov.w	r3, #450	@ 0x1c2
 8005fea:	2204      	movs	r2, #4
 8005fec:	2105      	movs	r1, #5
 8005fee:	f7fd ff68 	bl	8003ec2 <_ZN8touchgfx8Drawable11setPositionEssss>

    Anomaly_Detection_Background.setPosition(0, 1, 450, 67);
 8005ff2:	687b      	ldr	r3, [r7, #4]
 8005ff4:	f503 7092 	add.w	r0, r3, #292	@ 0x124
 8005ff8:	2343      	movs	r3, #67	@ 0x43
 8005ffa:	9300      	str	r3, [sp, #0]
 8005ffc:	f44f 73e1 	mov.w	r3, #450	@ 0x1c2
 8006000:	2201      	movs	r2, #1
 8006002:	2100      	movs	r1, #0
 8006004:	f7fd ff5d 	bl	8003ec2 <_ZN8touchgfx8Drawable11setPositionEssss>
    Anomaly_Detection_Background.setColor(touchgfx::Color::getColorFromRGB(67, 101, 139));
 8006008:	687b      	ldr	r3, [r7, #4]
 800600a:	f503 7492 	add.w	r4, r3, #292	@ 0x124
 800600e:	2343      	movs	r3, #67	@ 0x43
 8006010:	f887 308b 	strb.w	r3, [r7, #139]	@ 0x8b
 8006014:	2365      	movs	r3, #101	@ 0x65
 8006016:	f887 308a 	strb.w	r3, [r7, #138]	@ 0x8a
 800601a:	238b      	movs	r3, #139	@ 0x8b
 800601c:	f887 3089 	strb.w	r3, [r7, #137]	@ 0x89
 8006020:	f897 308b 	ldrb.w	r3, [r7, #139]	@ 0x8b
 8006024:	041a      	lsls	r2, r3, #16
 8006026:	f897 308a 	ldrb.w	r3, [r7, #138]	@ 0x8a
 800602a:	021b      	lsls	r3, r3, #8
 800602c:	431a      	orrs	r2, r3
 800602e:	f897 3089 	ldrb.w	r3, [r7, #137]	@ 0x89
 8006032:	4313      	orrs	r3, r2
 8006034:	f043 427f 	orr.w	r2, r3, #4278190080	@ 0xff000000
 8006038:	f107 0370 	add.w	r3, r7, #112	@ 0x70
 800603c:	4611      	mov	r1, r2
 800603e:	4618      	mov	r0, r3
 8006040:	f7ff fb95 	bl	800576e <_ZN8touchgfx9colortypeC1Em>
 8006044:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8006046:	4619      	mov	r1, r3
 8006048:	4620      	mov	r0, r4
 800604a:	f7ff fc61 	bl	8005910 <_ZN8touchgfx3Box8setColorENS_9colortypeE>
    Anomaly_Detection_Background.setBorderColor(touchgfx::Color::getColorFromRGB(0, 0, 0));
 800604e:	687b      	ldr	r3, [r7, #4]
 8006050:	f503 7492 	add.w	r4, r3, #292	@ 0x124
 8006054:	2300      	movs	r3, #0
 8006056:	f887 308e 	strb.w	r3, [r7, #142]	@ 0x8e
 800605a:	2300      	movs	r3, #0
 800605c:	f887 308d 	strb.w	r3, [r7, #141]	@ 0x8d
 8006060:	2300      	movs	r3, #0
 8006062:	f887 308c 	strb.w	r3, [r7, #140]	@ 0x8c
 8006066:	f897 308e 	ldrb.w	r3, [r7, #142]	@ 0x8e
 800606a:	041a      	lsls	r2, r3, #16
 800606c:	f897 308d 	ldrb.w	r3, [r7, #141]	@ 0x8d
 8006070:	021b      	lsls	r3, r3, #8
 8006072:	431a      	orrs	r2, r3
 8006074:	f897 308c 	ldrb.w	r3, [r7, #140]	@ 0x8c
 8006078:	4313      	orrs	r3, r2
 800607a:	f043 427f 	orr.w	r2, r3, #4278190080	@ 0xff000000
 800607e:	f107 036c 	add.w	r3, r7, #108	@ 0x6c
 8006082:	4611      	mov	r1, r2
 8006084:	4618      	mov	r0, r3
 8006086:	f7ff fb72 	bl	800576e <_ZN8touchgfx9colortypeC1Em>
 800608a:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800608c:	4619      	mov	r1, r3
 800608e:	4620      	mov	r0, r4
 8006090:	f7ff fcb0 	bl	80059f4 <_ZN8touchgfx13BoxWithBorder14setBorderColorENS_9colortypeE>
    Anomaly_Detection_Background.setBorderSize(2);
 8006094:	687b      	ldr	r3, [r7, #4]
 8006096:	f503 7392 	add.w	r3, r3, #292	@ 0x124
 800609a:	2102      	movs	r1, #2
 800609c:	4618      	mov	r0, r3
 800609e:	f7ff fcb7 	bl	8005a10 <_ZN8touchgfx13BoxWithBorder13setBorderSizeEt>
    Anomaly_Detection_Panel.add(Anomaly_Detection_Background);
 80060a2:	687b      	ldr	r3, [r7, #4]
 80060a4:	f103 02f8 	add.w	r2, r3, #248	@ 0xf8
 80060a8:	687b      	ldr	r3, [r7, #4]
 80060aa:	f503 7392 	add.w	r3, r3, #292	@ 0x124
 80060ae:	4619      	mov	r1, r3
 80060b0:	4610      	mov	r0, r2
 80060b2:	f011 fda5 	bl	8017c00 <_ZN8touchgfx9Container3addERNS_8DrawableE>
    Button_Panel.add(Anomaly_Detection_Panel);
 80060b6:	687b      	ldr	r3, [r7, #4]
 80060b8:	f103 0298 	add.w	r2, r3, #152	@ 0x98
 80060bc:	687b      	ldr	r3, [r7, #4]
 80060be:	33f8      	adds	r3, #248	@ 0xf8
 80060c0:	4619      	mov	r1, r3
 80060c2:	4610      	mov	r0, r2
 80060c4:	f011 fd9c 	bl	8017c00 <_ZN8touchgfx9Container3addERNS_8DrawableE>

    Alarm_Mute_Indicator_Textbox_1_1_1.setPosition(142, 47, 177, 20);
 80060c8:	687b      	ldr	r3, [r7, #4]
 80060ca:	f503 70ac 	add.w	r0, r3, #344	@ 0x158
 80060ce:	2314      	movs	r3, #20
 80060d0:	9300      	str	r3, [sp, #0]
 80060d2:	23b1      	movs	r3, #177	@ 0xb1
 80060d4:	222f      	movs	r2, #47	@ 0x2f
 80060d6:	218e      	movs	r1, #142	@ 0x8e
 80060d8:	f7fd fef3 	bl	8003ec2 <_ZN8touchgfx8Drawable11setPositionEssss>

    AnomalyDetection_Border_1_1_1_1.setPosition(0, 3, 177, 17);
 80060dc:	687b      	ldr	r3, [r7, #4]
 80060de:	f503 70c2 	add.w	r0, r3, #388	@ 0x184
 80060e2:	2311      	movs	r3, #17
 80060e4:	e004      	b.n	80060f0 <_ZN24Localize_AnomalyViewBaseC1Ev+0x39c>
 80060e6:	bf00      	nop
 80060e8:	0802d330 	.word	0x0802d330
 80060ec:	080066f1 	.word	0x080066f1
 80060f0:	9300      	str	r3, [sp, #0]
 80060f2:	23b1      	movs	r3, #177	@ 0xb1
 80060f4:	2203      	movs	r2, #3
 80060f6:	2100      	movs	r1, #0
 80060f8:	f7fd fee3 	bl	8003ec2 <_ZN8touchgfx8Drawable11setPositionEssss>
    AnomalyDetection_Border_1_1_1_1.setColor(touchgfx::Color::getColorFromRGB(0, 0, 0));
 80060fc:	687b      	ldr	r3, [r7, #4]
 80060fe:	f503 74c2 	add.w	r4, r3, #388	@ 0x184
 8006102:	2300      	movs	r3, #0
 8006104:	f887 3091 	strb.w	r3, [r7, #145]	@ 0x91
 8006108:	2300      	movs	r3, #0
 800610a:	f887 3090 	strb.w	r3, [r7, #144]	@ 0x90
 800610e:	2300      	movs	r3, #0
 8006110:	f887 308f 	strb.w	r3, [r7, #143]	@ 0x8f
 8006114:	f897 3091 	ldrb.w	r3, [r7, #145]	@ 0x91
 8006118:	041a      	lsls	r2, r3, #16
 800611a:	f897 3090 	ldrb.w	r3, [r7, #144]	@ 0x90
 800611e:	021b      	lsls	r3, r3, #8
 8006120:	431a      	orrs	r2, r3
 8006122:	f897 308f 	ldrb.w	r3, [r7, #143]	@ 0x8f
 8006126:	4313      	orrs	r3, r2
 8006128:	f043 427f 	orr.w	r2, r3, #4278190080	@ 0xff000000
 800612c:	f107 0368 	add.w	r3, r7, #104	@ 0x68
 8006130:	4611      	mov	r1, r2
 8006132:	4618      	mov	r0, r3
 8006134:	f7ff fb1b 	bl	800576e <_ZN8touchgfx9colortypeC1Em>
 8006138:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800613a:	4619      	mov	r1, r3
 800613c:	4620      	mov	r0, r4
 800613e:	f7ff fbe7 	bl	8005910 <_ZN8touchgfx3Box8setColorENS_9colortypeE>
    AnomalyDetection_Border_1_1_1_1.setBorderColor(touchgfx::Color::getColorFromRGB(237, 102, 99));
 8006142:	687b      	ldr	r3, [r7, #4]
 8006144:	f503 74c2 	add.w	r4, r3, #388	@ 0x184
 8006148:	23ed      	movs	r3, #237	@ 0xed
 800614a:	f887 3094 	strb.w	r3, [r7, #148]	@ 0x94
 800614e:	2366      	movs	r3, #102	@ 0x66
 8006150:	f887 3093 	strb.w	r3, [r7, #147]	@ 0x93
 8006154:	2363      	movs	r3, #99	@ 0x63
 8006156:	f887 3092 	strb.w	r3, [r7, #146]	@ 0x92
 800615a:	f897 3094 	ldrb.w	r3, [r7, #148]	@ 0x94
 800615e:	041a      	lsls	r2, r3, #16
 8006160:	f897 3093 	ldrb.w	r3, [r7, #147]	@ 0x93
 8006164:	021b      	lsls	r3, r3, #8
 8006166:	431a      	orrs	r2, r3
 8006168:	f897 3092 	ldrb.w	r3, [r7, #146]	@ 0x92
 800616c:	4313      	orrs	r3, r2
 800616e:	f043 427f 	orr.w	r2, r3, #4278190080	@ 0xff000000
 8006172:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 8006176:	4611      	mov	r1, r2
 8006178:	4618      	mov	r0, r3
 800617a:	f7ff faf8 	bl	800576e <_ZN8touchgfx9colortypeC1Em>
 800617e:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8006180:	4619      	mov	r1, r3
 8006182:	4620      	mov	r0, r4
 8006184:	f7ff fc36 	bl	80059f4 <_ZN8touchgfx13BoxWithBorder14setBorderColorENS_9colortypeE>
    AnomalyDetection_Border_1_1_1_1.setBorderSize(3);
 8006188:	687b      	ldr	r3, [r7, #4]
 800618a:	f503 73c2 	add.w	r3, r3, #388	@ 0x184
 800618e:	2103      	movs	r1, #3
 8006190:	4618      	mov	r0, r3
 8006192:	f7ff fc3d 	bl	8005a10 <_ZN8touchgfx13BoxWithBorder13setBorderSizeEt>
    Alarm_Mute_Indicator_Textbox_1_1_1.add(AnomalyDetection_Border_1_1_1_1);
 8006196:	687b      	ldr	r3, [r7, #4]
 8006198:	f503 72ac 	add.w	r2, r3, #344	@ 0x158
 800619c:	687b      	ldr	r3, [r7, #4]
 800619e:	f503 73c2 	add.w	r3, r3, #388	@ 0x184
 80061a2:	4619      	mov	r1, r3
 80061a4:	4610      	mov	r0, r2
 80061a6:	f011 fd2b 	bl	8017c00 <_ZN8touchgfx9Container3addERNS_8DrawableE>

    AnomalyDetection_Text.setXY(7, 5);
 80061aa:	687b      	ldr	r3, [r7, #4]
 80061ac:	f503 73dc 	add.w	r3, r3, #440	@ 0x1b8
 80061b0:	2205      	movs	r2, #5
 80061b2:	2107      	movs	r1, #7
 80061b4:	4618      	mov	r0, r3
 80061b6:	f7fd fedd 	bl	8003f74 <_ZN8touchgfx8Drawable5setXYEss>
    AnomalyDetection_Text.setColor(touchgfx::Color::getColorFromRGB(255, 255, 255));
 80061ba:	687b      	ldr	r3, [r7, #4]
 80061bc:	f503 74dc 	add.w	r4, r3, #440	@ 0x1b8
 80061c0:	23ff      	movs	r3, #255	@ 0xff
 80061c2:	f887 3097 	strb.w	r3, [r7, #151]	@ 0x97
 80061c6:	23ff      	movs	r3, #255	@ 0xff
 80061c8:	f887 3096 	strb.w	r3, [r7, #150]	@ 0x96
 80061cc:	23ff      	movs	r3, #255	@ 0xff
 80061ce:	f887 3095 	strb.w	r3, [r7, #149]	@ 0x95
 80061d2:	f897 3097 	ldrb.w	r3, [r7, #151]	@ 0x97
 80061d6:	041a      	lsls	r2, r3, #16
 80061d8:	f897 3096 	ldrb.w	r3, [r7, #150]	@ 0x96
 80061dc:	021b      	lsls	r3, r3, #8
 80061de:	431a      	orrs	r2, r3
 80061e0:	f897 3095 	ldrb.w	r3, [r7, #149]	@ 0x95
 80061e4:	4313      	orrs	r3, r2
 80061e6:	f043 427f 	orr.w	r2, r3, #4278190080	@ 0xff000000
 80061ea:	f107 0360 	add.w	r3, r7, #96	@ 0x60
 80061ee:	4611      	mov	r1, r2
 80061f0:	4618      	mov	r0, r3
 80061f2:	f7ff fabc 	bl	800576e <_ZN8touchgfx9colortypeC1Em>
 80061f6:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80061f8:	f8c7 4098 	str.w	r4, [r7, #152]	@ 0x98
 80061fc:	613b      	str	r3, [r7, #16]
     *
     * @param  color The color to use.
     */
    FORCE_INLINE_FUNCTION void setColor(colortype color)
    {
        this->color = color;
 80061fe:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8006202:	693a      	ldr	r2, [r7, #16]
 8006204:	631a      	str	r2, [r3, #48]	@ 0x30
    }
 8006206:	bf00      	nop
    AnomalyDetection_Text.setLinespacing(0);
 8006208:	687b      	ldr	r3, [r7, #4]
 800620a:	f503 73dc 	add.w	r3, r3, #440	@ 0x1b8
 800620e:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8006212:	2300      	movs	r3, #0
 8006214:	f8a7 309e 	strh.w	r3, [r7, #158]	@ 0x9e
     *
     * @see getLinespacing
     */
    FORCE_INLINE_FUNCTION void setLinespacing(int16_t space)
    {
        linespace = space;
 8006218:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 800621c:	f8b7 209e 	ldrh.w	r2, [r7, #158]	@ 0x9e
 8006220:	869a      	strh	r2, [r3, #52]	@ 0x34
    }
 8006222:	bf00      	nop
    AnomalyDetection_Text.setTypedText(touchgfx::TypedText(T___SINGLEUSE_6CIV));
 8006224:	687b      	ldr	r3, [r7, #4]
 8006226:	f503 74dc 	add.w	r4, r3, #440	@ 0x1b8
 800622a:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 800622e:	2107      	movs	r1, #7
 8006230:	4618      	mov	r0, r3
 8006232:	f7ff fbfd 	bl	8005a30 <_ZN8touchgfx9TypedTextC1Et>
 8006236:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 800623a:	4619      	mov	r1, r3
 800623c:	4620      	mov	r0, r4
 800623e:	f013 fc0a 	bl	8019a56 <_ZN8touchgfx8TextArea12setTypedTextERKNS_9TypedTextE>
 8006242:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8006246:	4618      	mov	r0, r3
 8006248:	f7fd fd88 	bl	8003d5c <_ZN8touchgfx9TypedTextD1Ev>
    Alarm_Mute_Indicator_Textbox_1_1_1.add(AnomalyDetection_Text);
 800624c:	687b      	ldr	r3, [r7, #4]
 800624e:	f503 72ac 	add.w	r2, r3, #344	@ 0x158
 8006252:	687b      	ldr	r3, [r7, #4]
 8006254:	f503 73dc 	add.w	r3, r3, #440	@ 0x1b8
 8006258:	4619      	mov	r1, r3
 800625a:	4610      	mov	r0, r2
 800625c:	f011 fcd0 	bl	8017c00 <_ZN8touchgfx9Container3addERNS_8DrawableE>
    Button_Panel.add(Alarm_Mute_Indicator_Textbox_1_1_1);
 8006260:	687b      	ldr	r3, [r7, #4]
 8006262:	f103 0298 	add.w	r2, r3, #152	@ 0x98
 8006266:	687b      	ldr	r3, [r7, #4]
 8006268:	f503 73ac 	add.w	r3, r3, #344	@ 0x158
 800626c:	4619      	mov	r1, r3
 800626e:	4610      	mov	r0, r2
 8006270:	f011 fcc6 	bl	8017c00 <_ZN8touchgfx9Container3addERNS_8DrawableE>

    Localize_Button.setXY(188, 15);
 8006274:	687b      	ldr	r3, [r7, #4]
 8006276:	f503 73fa 	add.w	r3, r3, #500	@ 0x1f4
 800627a:	220f      	movs	r2, #15
 800627c:	21bc      	movs	r1, #188	@ 0xbc
 800627e:	4618      	mov	r0, r3
 8006280:	f7fd fe78 	bl	8003f74 <_ZN8touchgfx8Drawable5setXYEss>
    Localize_Button.setBitmaps(touchgfx::Bitmap(BITMAP_RECT_BUTTON_UNPRESSED_ID), touchgfx::Bitmap(BITMAP_RECT_BUTTON_PRESSED_ID));
 8006284:	687b      	ldr	r3, [r7, #4]
 8006286:	f503 74fa 	add.w	r4, r3, #500	@ 0x1f4
 800628a:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 800628e:	2103      	movs	r1, #3
 8006290:	4618      	mov	r0, r3
 8006292:	f7ff fa7b 	bl	800578c <_ZN8touchgfx6BitmapC1Et>
 8006296:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 800629a:	2102      	movs	r1, #2
 800629c:	4618      	mov	r0, r3
 800629e:	f7ff fa75 	bl	800578c <_ZN8touchgfx6BitmapC1Et>
 80062a2:	f107 0234 	add.w	r2, r7, #52	@ 0x34
 80062a6:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 80062aa:	4619      	mov	r1, r3
 80062ac:	4620      	mov	r0, r4
 80062ae:	f013 fc09 	bl	8019ac4 <_ZN8touchgfx6Button10setBitmapsERKNS_6BitmapES3_>
    Localize_Button.setAction(buttonCallback);
 80062b2:	687b      	ldr	r3, [r7, #4]
 80062b4:	f503 72fa 	add.w	r2, r3, #500	@ 0x1f4
 80062b8:	687b      	ldr	r3, [r7, #4]
 80062ba:	f503 736c 	add.w	r3, r3, #944	@ 0x3b0
 80062be:	4619      	mov	r1, r3
 80062c0:	4610      	mov	r0, r2
 80062c2:	f7ff fc2b 	bl	8005b1c <_ZN8touchgfx14AbstractButton9setActionERNS_15GenericCallbackIRKS0_vvEE>
    Button_Panel.add(Localize_Button);
 80062c6:	687b      	ldr	r3, [r7, #4]
 80062c8:	f103 0298 	add.w	r2, r3, #152	@ 0x98
 80062cc:	687b      	ldr	r3, [r7, #4]
 80062ce:	f503 73fa 	add.w	r3, r3, #500	@ 0x1f4
 80062d2:	4619      	mov	r1, r3
 80062d4:	4610      	mov	r0, r2
 80062d6:	f011 fc93 	bl	8017c00 <_ZN8touchgfx9Container3addERNS_8DrawableE>

    Message_panel.setPosition(10, 8, 460, 194);
 80062da:	687b      	ldr	r3, [r7, #4]
 80062dc:	f503 700a 	add.w	r0, r3, #552	@ 0x228
 80062e0:	23c2      	movs	r3, #194	@ 0xc2
 80062e2:	9300      	str	r3, [sp, #0]
 80062e4:	f44f 73e6 	mov.w	r3, #460	@ 0x1cc
 80062e8:	2208      	movs	r2, #8
 80062ea:	210a      	movs	r1, #10
 80062ec:	f7fd fde9 	bl	8003ec2 <_ZN8touchgfx8Drawable11setPositionEssss>

    Button_Panel_Background_1.setPosition(0, 0, 460, 183);
 80062f0:	687b      	ldr	r3, [r7, #4]
 80062f2:	f503 7015 	add.w	r0, r3, #596	@ 0x254
 80062f6:	23b7      	movs	r3, #183	@ 0xb7
 80062f8:	9300      	str	r3, [sp, #0]
 80062fa:	f44f 73e6 	mov.w	r3, #460	@ 0x1cc
 80062fe:	2200      	movs	r2, #0
 8006300:	2100      	movs	r1, #0
 8006302:	f7fd fdde 	bl	8003ec2 <_ZN8touchgfx8Drawable11setPositionEssss>
    Button_Panel_Background_1.setColor(touchgfx::Color::getColorFromRGB(78, 137, 174));
 8006306:	687b      	ldr	r3, [r7, #4]
 8006308:	f503 7415 	add.w	r4, r3, #596	@ 0x254
 800630c:	234e      	movs	r3, #78	@ 0x4e
 800630e:	f887 30a9 	strb.w	r3, [r7, #169]	@ 0xa9
 8006312:	2389      	movs	r3, #137	@ 0x89
 8006314:	f887 30a8 	strb.w	r3, [r7, #168]	@ 0xa8
 8006318:	23ae      	movs	r3, #174	@ 0xae
 800631a:	f887 30a7 	strb.w	r3, [r7, #167]	@ 0xa7
 800631e:	f897 30a9 	ldrb.w	r3, [r7, #169]	@ 0xa9
 8006322:	041a      	lsls	r2, r3, #16
 8006324:	f897 30a8 	ldrb.w	r3, [r7, #168]	@ 0xa8
 8006328:	021b      	lsls	r3, r3, #8
 800632a:	431a      	orrs	r2, r3
 800632c:	f897 30a7 	ldrb.w	r3, [r7, #167]	@ 0xa7
 8006330:	4313      	orrs	r3, r2
 8006332:	f043 427f 	orr.w	r2, r3, #4278190080	@ 0xff000000
 8006336:	f107 035c 	add.w	r3, r7, #92	@ 0x5c
 800633a:	4611      	mov	r1, r2
 800633c:	4618      	mov	r0, r3
 800633e:	f7ff fa16 	bl	800576e <_ZN8touchgfx9colortypeC1Em>
 8006342:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8006344:	4619      	mov	r1, r3
 8006346:	4620      	mov	r0, r4
 8006348:	f7ff fae2 	bl	8005910 <_ZN8touchgfx3Box8setColorENS_9colortypeE>
    Button_Panel_Background_1.setBorderColor(touchgfx::Color::getColorFromRGB(237, 102, 99));
 800634c:	687b      	ldr	r3, [r7, #4]
 800634e:	f503 7415 	add.w	r4, r3, #596	@ 0x254
 8006352:	23ed      	movs	r3, #237	@ 0xed
 8006354:	f887 30ac 	strb.w	r3, [r7, #172]	@ 0xac
 8006358:	2366      	movs	r3, #102	@ 0x66
 800635a:	f887 30ab 	strb.w	r3, [r7, #171]	@ 0xab
 800635e:	2363      	movs	r3, #99	@ 0x63
 8006360:	f887 30aa 	strb.w	r3, [r7, #170]	@ 0xaa
 8006364:	f897 30ac 	ldrb.w	r3, [r7, #172]	@ 0xac
 8006368:	041a      	lsls	r2, r3, #16
 800636a:	f897 30ab 	ldrb.w	r3, [r7, #171]	@ 0xab
 800636e:	021b      	lsls	r3, r3, #8
 8006370:	431a      	orrs	r2, r3
 8006372:	f897 30aa 	ldrb.w	r3, [r7, #170]	@ 0xaa
 8006376:	4313      	orrs	r3, r2
 8006378:	f043 427f 	orr.w	r2, r3, #4278190080	@ 0xff000000
 800637c:	f107 0358 	add.w	r3, r7, #88	@ 0x58
 8006380:	4611      	mov	r1, r2
 8006382:	4618      	mov	r0, r3
 8006384:	f7ff f9f3 	bl	800576e <_ZN8touchgfx9colortypeC1Em>
 8006388:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800638a:	4619      	mov	r1, r3
 800638c:	4620      	mov	r0, r4
 800638e:	f7ff fb31 	bl	80059f4 <_ZN8touchgfx13BoxWithBorder14setBorderColorENS_9colortypeE>
    Button_Panel_Background_1.setBorderSize(5);
 8006392:	687b      	ldr	r3, [r7, #4]
 8006394:	f503 7315 	add.w	r3, r3, #596	@ 0x254
 8006398:	2105      	movs	r1, #5
 800639a:	4618      	mov	r0, r3
 800639c:	f7ff fb38 	bl	8005a10 <_ZN8touchgfx13BoxWithBorder13setBorderSizeEt>
    Message_panel.add(Button_Panel_Background_1);
 80063a0:	687b      	ldr	r3, [r7, #4]
 80063a2:	f503 720a 	add.w	r2, r3, #552	@ 0x228
 80063a6:	687b      	ldr	r3, [r7, #4]
 80063a8:	f503 7315 	add.w	r3, r3, #596	@ 0x254
 80063ac:	4619      	mov	r1, r3
 80063ae:	4610      	mov	r0, r2
 80063b0:	f011 fc26 	bl	8017c00 <_ZN8touchgfx9Container3addERNS_8DrawableE>

    Message_Board_Panel_1.setPosition(5, 4, 450, 175);
 80063b4:	687b      	ldr	r3, [r7, #4]
 80063b6:	f503 7022 	add.w	r0, r3, #648	@ 0x288
 80063ba:	23af      	movs	r3, #175	@ 0xaf
 80063bc:	9300      	str	r3, [sp, #0]
 80063be:	f44f 73e1 	mov.w	r3, #450	@ 0x1c2
 80063c2:	2204      	movs	r2, #4
 80063c4:	2105      	movs	r1, #5
 80063c6:	f7fd fd7c 	bl	8003ec2 <_ZN8touchgfx8Drawable11setPositionEssss>

    MessageBoard_Background_1.setPosition(0, 0, 450, 175);
 80063ca:	687b      	ldr	r3, [r7, #4]
 80063cc:	f503 702d 	add.w	r0, r3, #692	@ 0x2b4
 80063d0:	23af      	movs	r3, #175	@ 0xaf
 80063d2:	9300      	str	r3, [sp, #0]
 80063d4:	f44f 73e1 	mov.w	r3, #450	@ 0x1c2
 80063d8:	2200      	movs	r2, #0
 80063da:	2100      	movs	r1, #0
 80063dc:	f7fd fd71 	bl	8003ec2 <_ZN8touchgfx8Drawable11setPositionEssss>
    MessageBoard_Background_1.setColor(touchgfx::Color::getColorFromRGB(67, 101, 139));
 80063e0:	687b      	ldr	r3, [r7, #4]
 80063e2:	f503 742d 	add.w	r4, r3, #692	@ 0x2b4
 80063e6:	2343      	movs	r3, #67	@ 0x43
 80063e8:	f887 30af 	strb.w	r3, [r7, #175]	@ 0xaf
 80063ec:	2365      	movs	r3, #101	@ 0x65
 80063ee:	f887 30ae 	strb.w	r3, [r7, #174]	@ 0xae
 80063f2:	238b      	movs	r3, #139	@ 0x8b
 80063f4:	f887 30ad 	strb.w	r3, [r7, #173]	@ 0xad
 80063f8:	f897 30af 	ldrb.w	r3, [r7, #175]	@ 0xaf
 80063fc:	041a      	lsls	r2, r3, #16
 80063fe:	f897 30ae 	ldrb.w	r3, [r7, #174]	@ 0xae
 8006402:	021b      	lsls	r3, r3, #8
 8006404:	431a      	orrs	r2, r3
 8006406:	f897 30ad 	ldrb.w	r3, [r7, #173]	@ 0xad
 800640a:	4313      	orrs	r3, r2
 800640c:	f043 427f 	orr.w	r2, r3, #4278190080	@ 0xff000000
 8006410:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8006414:	4611      	mov	r1, r2
 8006416:	4618      	mov	r0, r3
 8006418:	f7ff f9a9 	bl	800576e <_ZN8touchgfx9colortypeC1Em>
 800641c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800641e:	4619      	mov	r1, r3
 8006420:	4620      	mov	r0, r4
 8006422:	f7ff fa75 	bl	8005910 <_ZN8touchgfx3Box8setColorENS_9colortypeE>
    MessageBoard_Background_1.setBorderColor(touchgfx::Color::getColorFromRGB(0, 0, 0));
 8006426:	687b      	ldr	r3, [r7, #4]
 8006428:	f503 742d 	add.w	r4, r3, #692	@ 0x2b4
 800642c:	2300      	movs	r3, #0
 800642e:	f887 30b2 	strb.w	r3, [r7, #178]	@ 0xb2
 8006432:	2300      	movs	r3, #0
 8006434:	f887 30b1 	strb.w	r3, [r7, #177]	@ 0xb1
 8006438:	2300      	movs	r3, #0
 800643a:	f887 30b0 	strb.w	r3, [r7, #176]	@ 0xb0
 800643e:	f897 30b2 	ldrb.w	r3, [r7, #178]	@ 0xb2
 8006442:	041a      	lsls	r2, r3, #16
 8006444:	f897 30b1 	ldrb.w	r3, [r7, #177]	@ 0xb1
 8006448:	021b      	lsls	r3, r3, #8
 800644a:	431a      	orrs	r2, r3
 800644c:	f897 30b0 	ldrb.w	r3, [r7, #176]	@ 0xb0
 8006450:	4313      	orrs	r3, r2
 8006452:	f043 427f 	orr.w	r2, r3, #4278190080	@ 0xff000000
 8006456:	f107 0350 	add.w	r3, r7, #80	@ 0x50
 800645a:	4611      	mov	r1, r2
 800645c:	4618      	mov	r0, r3
 800645e:	f7ff f986 	bl	800576e <_ZN8touchgfx9colortypeC1Em>
 8006462:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8006464:	4619      	mov	r1, r3
 8006466:	4620      	mov	r0, r4
 8006468:	f7ff fac4 	bl	80059f4 <_ZN8touchgfx13BoxWithBorder14setBorderColorENS_9colortypeE>
    MessageBoard_Background_1.setBorderSize(2);
 800646c:	687b      	ldr	r3, [r7, #4]
 800646e:	f503 732d 	add.w	r3, r3, #692	@ 0x2b4
 8006472:	2102      	movs	r1, #2
 8006474:	4618      	mov	r0, r3
 8006476:	f7ff facb 	bl	8005a10 <_ZN8touchgfx13BoxWithBorder13setBorderSizeEt>
    Message_Board_Panel_1.add(MessageBoard_Background_1);
 800647a:	687b      	ldr	r3, [r7, #4]
 800647c:	f503 7222 	add.w	r2, r3, #648	@ 0x288
 8006480:	687b      	ldr	r3, [r7, #4]
 8006482:	f503 732d 	add.w	r3, r3, #692	@ 0x2b4
 8006486:	4619      	mov	r1, r3
 8006488:	4610      	mov	r0, r2
 800648a:	f011 fbb9 	bl	8017c00 <_ZN8touchgfx9Container3addERNS_8DrawableE>

    Directional_Vector.setXY(95, 9);
 800648e:	687b      	ldr	r3, [r7, #4]
 8006490:	f503 733a 	add.w	r3, r3, #744	@ 0x2e8
 8006494:	2209      	movs	r2, #9
 8006496:	215f      	movs	r1, #95	@ 0x5f
 8006498:	4618      	mov	r0, r3
 800649a:	f7fd fd6b 	bl	8003f74 <_ZN8touchgfx8Drawable5setXYEss>
    Directional_Vector.setBitmap(touchgfx::Bitmap(BITMAP_VECTOR_IMAGE_ID));
 800649e:	687b      	ldr	r3, [r7, #4]
 80064a0:	f503 743a 	add.w	r4, r3, #744	@ 0x2e8
 80064a4:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 80064a8:	2118      	movs	r1, #24
 80064aa:	4618      	mov	r0, r3
 80064ac:	f7ff f96e 	bl	800578c <_ZN8touchgfx6BitmapC1Et>
 80064b0:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 80064b4:	4619      	mov	r1, r3
 80064b6:	4620      	mov	r0, r4
 80064b8:	f013 fd47 	bl	8019f4a <_ZN8touchgfx5Image9setBitmapERKNS_6BitmapE>
    Message_Board_Panel_1.add(Directional_Vector);
 80064bc:	687b      	ldr	r3, [r7, #4]
 80064be:	f503 7222 	add.w	r2, r3, #648	@ 0x288
 80064c2:	687b      	ldr	r3, [r7, #4]
 80064c4:	f503 733a 	add.w	r3, r3, #744	@ 0x2e8
 80064c8:	4619      	mov	r1, r3
 80064ca:	4610      	mov	r0, r2
 80064cc:	f011 fb98 	bl	8017c00 <_ZN8touchgfx9Container3addERNS_8DrawableE>

    Message_Board_Textbox_1.setPosition(167, 0, 117, 20);
 80064d0:	687b      	ldr	r3, [r7, #4]
 80064d2:	f503 7045 	add.w	r0, r3, #788	@ 0x314
 80064d6:	2314      	movs	r3, #20
 80064d8:	9300      	str	r3, [sp, #0]
 80064da:	2375      	movs	r3, #117	@ 0x75
 80064dc:	2200      	movs	r2, #0
 80064de:	21a7      	movs	r1, #167	@ 0xa7
 80064e0:	f7fd fcef 	bl	8003ec2 <_ZN8touchgfx8Drawable11setPositionEssss>

    MessageBoard_Border_1_1.setPosition(0, 3, 117, 17);
 80064e4:	687b      	ldr	r3, [r7, #4]
 80064e6:	f503 7050 	add.w	r0, r3, #832	@ 0x340
 80064ea:	2311      	movs	r3, #17
 80064ec:	9300      	str	r3, [sp, #0]
 80064ee:	2375      	movs	r3, #117	@ 0x75
 80064f0:	2203      	movs	r2, #3
 80064f2:	2100      	movs	r1, #0
 80064f4:	f7fd fce5 	bl	8003ec2 <_ZN8touchgfx8Drawable11setPositionEssss>
    MessageBoard_Border_1_1.setColor(touchgfx::Color::getColorFromRGB(0, 0, 0));
 80064f8:	687b      	ldr	r3, [r7, #4]
 80064fa:	f503 7450 	add.w	r4, r3, #832	@ 0x340
 80064fe:	2300      	movs	r3, #0
 8006500:	f887 30b5 	strb.w	r3, [r7, #181]	@ 0xb5
 8006504:	2300      	movs	r3, #0
 8006506:	f887 30b4 	strb.w	r3, [r7, #180]	@ 0xb4
 800650a:	2300      	movs	r3, #0
 800650c:	f887 30b3 	strb.w	r3, [r7, #179]	@ 0xb3
 8006510:	f897 30b5 	ldrb.w	r3, [r7, #181]	@ 0xb5
 8006514:	041a      	lsls	r2, r3, #16
 8006516:	f897 30b4 	ldrb.w	r3, [r7, #180]	@ 0xb4
 800651a:	021b      	lsls	r3, r3, #8
 800651c:	431a      	orrs	r2, r3
 800651e:	f897 30b3 	ldrb.w	r3, [r7, #179]	@ 0xb3
 8006522:	4313      	orrs	r3, r2
 8006524:	f043 427f 	orr.w	r2, r3, #4278190080	@ 0xff000000
 8006528:	f107 034c 	add.w	r3, r7, #76	@ 0x4c
 800652c:	4611      	mov	r1, r2
 800652e:	4618      	mov	r0, r3
 8006530:	f7ff f91d 	bl	800576e <_ZN8touchgfx9colortypeC1Em>
 8006534:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8006536:	4619      	mov	r1, r3
 8006538:	4620      	mov	r0, r4
 800653a:	f7ff f9e9 	bl	8005910 <_ZN8touchgfx3Box8setColorENS_9colortypeE>
    MessageBoard_Border_1_1.setBorderColor(touchgfx::Color::getColorFromRGB(237, 102, 99));
 800653e:	687b      	ldr	r3, [r7, #4]
 8006540:	f503 7450 	add.w	r4, r3, #832	@ 0x340
 8006544:	23ed      	movs	r3, #237	@ 0xed
 8006546:	f887 30b8 	strb.w	r3, [r7, #184]	@ 0xb8
 800654a:	2366      	movs	r3, #102	@ 0x66
 800654c:	f887 30b7 	strb.w	r3, [r7, #183]	@ 0xb7
 8006550:	2363      	movs	r3, #99	@ 0x63
 8006552:	f887 30b6 	strb.w	r3, [r7, #182]	@ 0xb6
 8006556:	f897 30b8 	ldrb.w	r3, [r7, #184]	@ 0xb8
 800655a:	041a      	lsls	r2, r3, #16
 800655c:	f897 30b7 	ldrb.w	r3, [r7, #183]	@ 0xb7
 8006560:	021b      	lsls	r3, r3, #8
 8006562:	431a      	orrs	r2, r3
 8006564:	f897 30b6 	ldrb.w	r3, [r7, #182]	@ 0xb6
 8006568:	4313      	orrs	r3, r2
 800656a:	f043 427f 	orr.w	r2, r3, #4278190080	@ 0xff000000
 800656e:	f107 0348 	add.w	r3, r7, #72	@ 0x48
 8006572:	4611      	mov	r1, r2
 8006574:	4618      	mov	r0, r3
 8006576:	f7ff f8fa 	bl	800576e <_ZN8touchgfx9colortypeC1Em>
 800657a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800657c:	4619      	mov	r1, r3
 800657e:	4620      	mov	r0, r4
 8006580:	f7ff fa38 	bl	80059f4 <_ZN8touchgfx13BoxWithBorder14setBorderColorENS_9colortypeE>
    MessageBoard_Border_1_1.setBorderSize(3);
 8006584:	687b      	ldr	r3, [r7, #4]
 8006586:	f503 7350 	add.w	r3, r3, #832	@ 0x340
 800658a:	2103      	movs	r1, #3
 800658c:	4618      	mov	r0, r3
 800658e:	f7ff fa3f 	bl	8005a10 <_ZN8touchgfx13BoxWithBorder13setBorderSizeEt>
    Message_Board_Textbox_1.add(MessageBoard_Border_1_1);
 8006592:	687b      	ldr	r3, [r7, #4]
 8006594:	f503 7245 	add.w	r2, r3, #788	@ 0x314
 8006598:	687b      	ldr	r3, [r7, #4]
 800659a:	f503 7350 	add.w	r3, r3, #832	@ 0x340
 800659e:	4619      	mov	r1, r3
 80065a0:	4610      	mov	r0, r2
 80065a2:	f011 fb2d 	bl	8017c00 <_ZN8touchgfx9Container3addERNS_8DrawableE>

    MessageBoard_Text_1.setXY(4, 5);
 80065a6:	687b      	ldr	r3, [r7, #4]
 80065a8:	f503 735d 	add.w	r3, r3, #884	@ 0x374
 80065ac:	2205      	movs	r2, #5
 80065ae:	2104      	movs	r1, #4
 80065b0:	4618      	mov	r0, r3
 80065b2:	f7fd fcdf 	bl	8003f74 <_ZN8touchgfx8Drawable5setXYEss>
    MessageBoard_Text_1.setColor(touchgfx::Color::getColorFromRGB(255, 255, 255));
 80065b6:	687b      	ldr	r3, [r7, #4]
 80065b8:	f503 745d 	add.w	r4, r3, #884	@ 0x374
 80065bc:	23ff      	movs	r3, #255	@ 0xff
 80065be:	f887 30bb 	strb.w	r3, [r7, #187]	@ 0xbb
 80065c2:	23ff      	movs	r3, #255	@ 0xff
 80065c4:	f887 30ba 	strb.w	r3, [r7, #186]	@ 0xba
 80065c8:	23ff      	movs	r3, #255	@ 0xff
 80065ca:	f887 30b9 	strb.w	r3, [r7, #185]	@ 0xb9
 80065ce:	f897 30bb 	ldrb.w	r3, [r7, #187]	@ 0xbb
 80065d2:	041a      	lsls	r2, r3, #16
 80065d4:	f897 30ba 	ldrb.w	r3, [r7, #186]	@ 0xba
 80065d8:	021b      	lsls	r3, r3, #8
 80065da:	431a      	orrs	r2, r3
 80065dc:	f897 30b9 	ldrb.w	r3, [r7, #185]	@ 0xb9
 80065e0:	4313      	orrs	r3, r2
 80065e2:	f043 427f 	orr.w	r2, r3, #4278190080	@ 0xff000000
 80065e6:	f107 0344 	add.w	r3, r7, #68	@ 0x44
 80065ea:	4611      	mov	r1, r2
 80065ec:	4618      	mov	r0, r3
 80065ee:	f7ff f8be 	bl	800576e <_ZN8touchgfx9colortypeC1Em>
 80065f2:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80065f4:	f8c7 40bc 	str.w	r4, [r7, #188]	@ 0xbc
 80065f8:	60fb      	str	r3, [r7, #12]
        this->color = color;
 80065fa:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 80065fe:	68fa      	ldr	r2, [r7, #12]
 8006600:	631a      	str	r2, [r3, #48]	@ 0x30
    }
 8006602:	bf00      	nop
    MessageBoard_Text_1.setLinespacing(0);
 8006604:	687b      	ldr	r3, [r7, #4]
 8006606:	f503 735d 	add.w	r3, r3, #884	@ 0x374
 800660a:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 800660e:	2300      	movs	r3, #0
 8006610:	f8a7 30c2 	strh.w	r3, [r7, #194]	@ 0xc2
        linespace = space;
 8006614:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8006618:	f8b7 20c2 	ldrh.w	r2, [r7, #194]	@ 0xc2
 800661c:	869a      	strh	r2, [r3, #52]	@ 0x34
    }
 800661e:	bf00      	nop
    MessageBoard_Text_1.setTypedText(touchgfx::TypedText(T___SINGLEUSE_HV8G));
 8006620:	687b      	ldr	r3, [r7, #4]
 8006622:	f503 745d 	add.w	r4, r3, #884	@ 0x374
 8006626:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 800662a:	2108      	movs	r1, #8
 800662c:	4618      	mov	r0, r3
 800662e:	f7ff f9ff 	bl	8005a30 <_ZN8touchgfx9TypedTextC1Et>
 8006632:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 8006636:	4619      	mov	r1, r3
 8006638:	4620      	mov	r0, r4
 800663a:	f013 fa0c 	bl	8019a56 <_ZN8touchgfx8TextArea12setTypedTextERKNS_9TypedTextE>
 800663e:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 8006642:	4618      	mov	r0, r3
 8006644:	f7fd fb8a 	bl	8003d5c <_ZN8touchgfx9TypedTextD1Ev>
    Message_Board_Textbox_1.add(MessageBoard_Text_1);
 8006648:	687b      	ldr	r3, [r7, #4]
 800664a:	f503 7245 	add.w	r2, r3, #788	@ 0x314
 800664e:	687b      	ldr	r3, [r7, #4]
 8006650:	f503 735d 	add.w	r3, r3, #884	@ 0x374
 8006654:	4619      	mov	r1, r3
 8006656:	4610      	mov	r0, r2
 8006658:	f011 fad2 	bl	8017c00 <_ZN8touchgfx9Container3addERNS_8DrawableE>
    Message_Board_Panel_1.add(Message_Board_Textbox_1);
 800665c:	687b      	ldr	r3, [r7, #4]
 800665e:	f503 7222 	add.w	r2, r3, #648	@ 0x288
 8006662:	687b      	ldr	r3, [r7, #4]
 8006664:	f503 7345 	add.w	r3, r3, #788	@ 0x314
 8006668:	4619      	mov	r1, r3
 800666a:	4610      	mov	r0, r2
 800666c:	f011 fac8 	bl	8017c00 <_ZN8touchgfx9Container3addERNS_8DrawableE>
    Message_panel.add(Message_Board_Panel_1);
 8006670:	687b      	ldr	r3, [r7, #4]
 8006672:	f503 720a 	add.w	r2, r3, #552	@ 0x228
 8006676:	687b      	ldr	r3, [r7, #4]
 8006678:	f503 7322 	add.w	r3, r3, #648	@ 0x288
 800667c:	4619      	mov	r1, r3
 800667e:	4610      	mov	r0, r2
 8006680:	f011 fabe 	bl	8017c00 <_ZN8touchgfx9Container3addERNS_8DrawableE>

    add(__background);
 8006684:	687a      	ldr	r2, [r7, #4]
 8006686:	687b      	ldr	r3, [r7, #4]
 8006688:	3340      	adds	r3, #64	@ 0x40
 800668a:	4619      	mov	r1, r3
 800668c:	4610      	mov	r0, r2
 800668e:	f7ff f90b 	bl	80058a8 <_ZN8touchgfx6Screen3addERNS_8DrawableE>
    add(Main_Background);
 8006692:	687a      	ldr	r2, [r7, #4]
 8006694:	687b      	ldr	r3, [r7, #4]
 8006696:	336c      	adds	r3, #108	@ 0x6c
 8006698:	4619      	mov	r1, r3
 800669a:	4610      	mov	r0, r2
 800669c:	f7ff f904 	bl	80058a8 <_ZN8touchgfx6Screen3addERNS_8DrawableE>
    add(Button_Panel);
 80066a0:	687a      	ldr	r2, [r7, #4]
 80066a2:	687b      	ldr	r3, [r7, #4]
 80066a4:	3398      	adds	r3, #152	@ 0x98
 80066a6:	4619      	mov	r1, r3
 80066a8:	4610      	mov	r0, r2
 80066aa:	f7ff f8fd 	bl	80058a8 <_ZN8touchgfx6Screen3addERNS_8DrawableE>
    add(Message_panel);
 80066ae:	687a      	ldr	r2, [r7, #4]
 80066b0:	687b      	ldr	r3, [r7, #4]
 80066b2:	f503 730a 	add.w	r3, r3, #552	@ 0x228
 80066b6:	4619      	mov	r1, r3
 80066b8:	4610      	mov	r0, r2
 80066ba:	f7ff f8f5 	bl	80058a8 <_ZN8touchgfx6Screen3addERNS_8DrawableE>
}
 80066be:	687b      	ldr	r3, [r7, #4]
 80066c0:	4618      	mov	r0, r3
 80066c2:	37cc      	adds	r7, #204	@ 0xcc
 80066c4:	46bd      	mov	sp, r7
 80066c6:	bd90      	pop	{r4, r7, pc}

080066c8 <_ZN24Localize_AnomalyViewBase11setupScreenEv>:

void Localize_AnomalyViewBase::setupScreen()
{
 80066c8:	b480      	push	{r7}
 80066ca:	b083      	sub	sp, #12
 80066cc:	af00      	add	r7, sp, #0
 80066ce:	6078      	str	r0, [r7, #4]

}
 80066d0:	bf00      	nop
 80066d2:	370c      	adds	r7, #12
 80066d4:	46bd      	mov	sp, r7
 80066d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066da:	4770      	bx	lr

080066dc <_ZN24Localize_AnomalyViewBase15afterTransitionEv>:

//Called when the screen transition ends
void Localize_AnomalyViewBase::afterTransition()
{
 80066dc:	b480      	push	{r7}
 80066de:	b083      	sub	sp, #12
 80066e0:	af00      	add	r7, sp, #0
 80066e2:	6078      	str	r0, [r7, #4]
    //Interaction1
    //When screen transition ends call virtual function
    //Call function1
    //function1();
}
 80066e4:	bf00      	nop
 80066e6:	370c      	adds	r7, #12
 80066e8:	46bd      	mov	sp, r7
 80066ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066ee:	4770      	bx	lr

080066f0 <_ZN24Localize_AnomalyViewBase21buttonCallbackHandlerERKN8touchgfx14AbstractButtonE>:

void Localize_AnomalyViewBase::buttonCallbackHandler(const touchgfx::AbstractButton& src)
{
 80066f0:	b580      	push	{r7, lr}
 80066f2:	b082      	sub	sp, #8
 80066f4:	af00      	add	r7, sp, #0
 80066f6:	6078      	str	r0, [r7, #4]
 80066f8:	6039      	str	r1, [r7, #0]
    if (&src == &Localize_Button)
 80066fa:	687b      	ldr	r3, [r7, #4]
 80066fc:	f503 73fa 	add.w	r3, r3, #500	@ 0x1f4
 8006700:	683a      	ldr	r2, [r7, #0]
 8006702:	429a      	cmp	r2, r3
 8006704:	d106      	bne.n	8006714 <_ZN24Localize_AnomalyViewBase21buttonCallbackHandlerERKN8touchgfx14AbstractButtonE+0x24>
    {
        //Switch_Main_Screen
        //When Localize_Button clicked change screen to Main
        //Go to Main with screen transition towards South
        application().gotoMainScreenWipeTransitionSouth();
 8006706:	6878      	ldr	r0, [r7, #4]
 8006708:	f7ff fb19 	bl	8005d3e <_ZN24Localize_AnomalyViewBase11applicationEv>
 800670c:	4603      	mov	r3, r0
 800670e:	4618      	mov	r0, r3
 8006710:	f7fd fef6 	bl	8004500 <_ZN23FrontendApplicationBase33gotoMainScreenWipeTransitionSouthEv>
    }
}
 8006714:	bf00      	nop
 8006716:	3708      	adds	r7, #8
 8006718:	46bd      	mov	sp, r7
 800671a:	bd80      	pop	{r7, pc}

0800671c <_ZN24Localize_AnomalyViewBase14handleKeyEventEh>:

//Handles when a key is pressed
void Localize_AnomalyViewBase::handleKeyEvent(uint8_t key)
{
 800671c:	b580      	push	{r7, lr}
 800671e:	b082      	sub	sp, #8
 8006720:	af00      	add	r7, sp, #0
 8006722:	6078      	str	r0, [r7, #4]
 8006724:	460b      	mov	r3, r1
 8006726:	70fb      	strb	r3, [r7, #3]
    if(82 == key)
 8006728:	78fb      	ldrb	r3, [r7, #3]
 800672a:	2b52      	cmp	r3, #82	@ 0x52
 800672c:	d105      	bne.n	800673a <_ZN24Localize_AnomalyViewBase14handleKeyEventEh+0x1e>
    {
        //Anomaly_Alert_Handler
        //When hardware button 87 clicked call virtual function
        //Call update_anomaly_alert
        update_image();
 800672e:	687b      	ldr	r3, [r7, #4]
 8006730:	681b      	ldr	r3, [r3, #0]
 8006732:	332c      	adds	r3, #44	@ 0x2c
 8006734:	681b      	ldr	r3, [r3, #0]
 8006736:	6878      	ldr	r0, [r7, #4]
 8006738:	4798      	blx	r3
    }

}
 800673a:	bf00      	nop
 800673c:	3708      	adds	r7, #8
 800673e:	46bd      	mov	sp, r7
 8006740:	bd80      	pop	{r7, pc}
	...

08006744 <_ZN8touchgfx4ViewI25Localize_AnomalyPresenterEC1Ev>:
    View()
 8006744:	b580      	push	{r7, lr}
 8006746:	b082      	sub	sp, #8
 8006748:	af00      	add	r7, sp, #0
 800674a:	6078      	str	r0, [r7, #4]
        : presenter(0)
 800674c:	687b      	ldr	r3, [r7, #4]
 800674e:	4618      	mov	r0, r3
 8006750:	f016 fbf2 	bl	801cf38 <_ZN8touchgfx6ScreenC1Ev>
 8006754:	4a05      	ldr	r2, [pc, #20]	@ (800676c <_ZN8touchgfx4ViewI25Localize_AnomalyPresenterEC1Ev+0x28>)
 8006756:	687b      	ldr	r3, [r7, #4]
 8006758:	601a      	str	r2, [r3, #0]
 800675a:	687b      	ldr	r3, [r7, #4]
 800675c:	2200      	movs	r2, #0
 800675e:	63da      	str	r2, [r3, #60]	@ 0x3c
    }
 8006760:	687b      	ldr	r3, [r7, #4]
 8006762:	4618      	mov	r0, r3
 8006764:	3708      	adds	r7, #8
 8006766:	46bd      	mov	sp, r7
 8006768:	bd80      	pop	{r7, pc}
 800676a:	bf00      	nop
 800676c:	0802d380 	.word	0x0802d380

08006770 <_ZN8touchgfx15GenericCallbackIRKNS_14AbstractButtonEvvEC1Ev>:
class GenericCallback<T1, void, void>
 8006770:	b480      	push	{r7}
 8006772:	b083      	sub	sp, #12
 8006774:	af00      	add	r7, sp, #0
 8006776:	6078      	str	r0, [r7, #4]
 8006778:	4a04      	ldr	r2, [pc, #16]	@ (800678c <_ZN8touchgfx15GenericCallbackIRKNS_14AbstractButtonEvvEC1Ev+0x1c>)
 800677a:	687b      	ldr	r3, [r7, #4]
 800677c:	601a      	str	r2, [r3, #0]
 800677e:	687b      	ldr	r3, [r7, #4]
 8006780:	4618      	mov	r0, r3
 8006782:	370c      	adds	r7, #12
 8006784:	46bd      	mov	sp, r7
 8006786:	f85d 7b04 	ldr.w	r7, [sp], #4
 800678a:	4770      	bx	lr
 800678c:	0802d3b4 	.word	0x0802d3b4

08006790 <_ZN8touchgfx8CallbackI24Localize_AnomalyViewBaseRKNS_14AbstractButtonEvvEC1EPS1_MS1_FvS4_E>:
    Callback(dest_type* pobject, void (dest_type::*pmemfun_1)(T1))
 8006790:	b580      	push	{r7, lr}
 8006792:	b084      	sub	sp, #16
 8006794:	af00      	add	r7, sp, #0
 8006796:	60f8      	str	r0, [r7, #12]
 8006798:	60b9      	str	r1, [r7, #8]
 800679a:	4639      	mov	r1, r7
 800679c:	e881 000c 	stmia.w	r1, {r2, r3}
        : pobject(pobject), pmemfun_1(pmemfun_1)
 80067a0:	68fb      	ldr	r3, [r7, #12]
 80067a2:	4618      	mov	r0, r3
 80067a4:	f7ff ffe4 	bl	8006770 <_ZN8touchgfx15GenericCallbackIRKNS_14AbstractButtonEvvEC1Ev>
 80067a8:	4a08      	ldr	r2, [pc, #32]	@ (80067cc <_ZN8touchgfx8CallbackI24Localize_AnomalyViewBaseRKNS_14AbstractButtonEvvEC1EPS1_MS1_FvS4_E+0x3c>)
 80067aa:	68fb      	ldr	r3, [r7, #12]
 80067ac:	601a      	str	r2, [r3, #0]
 80067ae:	68fb      	ldr	r3, [r7, #12]
 80067b0:	68ba      	ldr	r2, [r7, #8]
 80067b2:	605a      	str	r2, [r3, #4]
 80067b4:	68fb      	ldr	r3, [r7, #12]
 80067b6:	3308      	adds	r3, #8
 80067b8:	463a      	mov	r2, r7
 80067ba:	e892 0003 	ldmia.w	r2, {r0, r1}
 80067be:	e883 0003 	stmia.w	r3, {r0, r1}
    }
 80067c2:	68fb      	ldr	r3, [r7, #12]
 80067c4:	4618      	mov	r0, r3
 80067c6:	3710      	adds	r7, #16
 80067c8:	46bd      	mov	sp, r7
 80067ca:	bd80      	pop	{r7, pc}
 80067cc:	0802d368 	.word	0x0802d368

080067d0 <_ZN8touchgfx15GenericCallbackIRKNS_14AbstractButtonEvvED1Ev>:
    virtual ~GenericCallback()
 80067d0:	b480      	push	{r7}
 80067d2:	b083      	sub	sp, #12
 80067d4:	af00      	add	r7, sp, #0
 80067d6:	6078      	str	r0, [r7, #4]
    }
 80067d8:	4a04      	ldr	r2, [pc, #16]	@ (80067ec <_ZN8touchgfx15GenericCallbackIRKNS_14AbstractButtonEvvED1Ev+0x1c>)
 80067da:	687b      	ldr	r3, [r7, #4]
 80067dc:	601a      	str	r2, [r3, #0]
 80067de:	687b      	ldr	r3, [r7, #4]
 80067e0:	4618      	mov	r0, r3
 80067e2:	370c      	adds	r7, #12
 80067e4:	46bd      	mov	sp, r7
 80067e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067ea:	4770      	bx	lr
 80067ec:	0802d3b4 	.word	0x0802d3b4

080067f0 <_ZN8touchgfx15GenericCallbackIRKNS_14AbstractButtonEvvED0Ev>:
    virtual ~GenericCallback()
 80067f0:	b580      	push	{r7, lr}
 80067f2:	b082      	sub	sp, #8
 80067f4:	af00      	add	r7, sp, #0
 80067f6:	6078      	str	r0, [r7, #4]
    }
 80067f8:	6878      	ldr	r0, [r7, #4]
 80067fa:	f7ff ffe9 	bl	80067d0 <_ZN8touchgfx15GenericCallbackIRKNS_14AbstractButtonEvvED1Ev>
 80067fe:	2104      	movs	r1, #4
 8006800:	6878      	ldr	r0, [r7, #4]
 8006802:	f024 f9f0 	bl	802abe6 <_ZdlPvj>
 8006806:	687b      	ldr	r3, [r7, #4]
 8006808:	4618      	mov	r0, r3
 800680a:	3708      	adds	r7, #8
 800680c:	46bd      	mov	sp, r7
 800680e:	bd80      	pop	{r7, pc}

08006810 <_ZN8touchgfx8CallbackI24Localize_AnomalyViewBaseRKNS_14AbstractButtonEvvED1Ev>:
struct Callback<dest_type, T1, void, void> : public GenericCallback<T1>
 8006810:	b580      	push	{r7, lr}
 8006812:	b082      	sub	sp, #8
 8006814:	af00      	add	r7, sp, #0
 8006816:	6078      	str	r0, [r7, #4]
 8006818:	4a05      	ldr	r2, [pc, #20]	@ (8006830 <_ZN8touchgfx8CallbackI24Localize_AnomalyViewBaseRKNS_14AbstractButtonEvvED1Ev+0x20>)
 800681a:	687b      	ldr	r3, [r7, #4]
 800681c:	601a      	str	r2, [r3, #0]
 800681e:	687b      	ldr	r3, [r7, #4]
 8006820:	4618      	mov	r0, r3
 8006822:	f7ff ffd5 	bl	80067d0 <_ZN8touchgfx15GenericCallbackIRKNS_14AbstractButtonEvvED1Ev>
 8006826:	687b      	ldr	r3, [r7, #4]
 8006828:	4618      	mov	r0, r3
 800682a:	3708      	adds	r7, #8
 800682c:	46bd      	mov	sp, r7
 800682e:	bd80      	pop	{r7, pc}
 8006830:	0802d368 	.word	0x0802d368

08006834 <_ZN8touchgfx8CallbackI24Localize_AnomalyViewBaseRKNS_14AbstractButtonEvvED0Ev>:
 8006834:	b580      	push	{r7, lr}
 8006836:	b082      	sub	sp, #8
 8006838:	af00      	add	r7, sp, #0
 800683a:	6078      	str	r0, [r7, #4]
 800683c:	6878      	ldr	r0, [r7, #4]
 800683e:	f7ff ffe7 	bl	8006810 <_ZN8touchgfx8CallbackI24Localize_AnomalyViewBaseRKNS_14AbstractButtonEvvED1Ev>
 8006842:	2110      	movs	r1, #16
 8006844:	6878      	ldr	r0, [r7, #4]
 8006846:	f024 f9ce 	bl	802abe6 <_ZdlPvj>
 800684a:	687b      	ldr	r3, [r7, #4]
 800684c:	4618      	mov	r0, r3
 800684e:	3708      	adds	r7, #8
 8006850:	46bd      	mov	sp, r7
 8006852:	bd80      	pop	{r7, pc}

08006854 <_ZN8touchgfx9ContainerD1Ev>:
class Container : public Drawable
 8006854:	b580      	push	{r7, lr}
 8006856:	b082      	sub	sp, #8
 8006858:	af00      	add	r7, sp, #0
 800685a:	6078      	str	r0, [r7, #4]
 800685c:	4a05      	ldr	r2, [pc, #20]	@ (8006874 <_ZN8touchgfx9ContainerD1Ev+0x20>)
 800685e:	687b      	ldr	r3, [r7, #4]
 8006860:	601a      	str	r2, [r3, #0]
 8006862:	687b      	ldr	r3, [r7, #4]
 8006864:	4618      	mov	r0, r3
 8006866:	f7fd faf5 	bl	8003e54 <_ZN8touchgfx8DrawableD1Ev>
 800686a:	687b      	ldr	r3, [r7, #4]
 800686c:	4618      	mov	r0, r3
 800686e:	3708      	adds	r7, #8
 8006870:	46bd      	mov	sp, r7
 8006872:	bd80      	pop	{r7, pc}
 8006874:	0802dbcc 	.word	0x0802dbcc

08006878 <_ZN8touchgfx9ContainerD0Ev>:
 8006878:	b580      	push	{r7, lr}
 800687a:	b082      	sub	sp, #8
 800687c:	af00      	add	r7, sp, #0
 800687e:	6078      	str	r0, [r7, #4]
 8006880:	6878      	ldr	r0, [r7, #4]
 8006882:	f7ff ffe7 	bl	8006854 <_ZN8touchgfx9ContainerD1Ev>
 8006886:	212c      	movs	r1, #44	@ 0x2c
 8006888:	6878      	ldr	r0, [r7, #4]
 800688a:	f024 f9ac 	bl	802abe6 <_ZdlPvj>
 800688e:	687b      	ldr	r3, [r7, #4]
 8006890:	4618      	mov	r0, r3
 8006892:	3708      	adds	r7, #8
 8006894:	46bd      	mov	sp, r7
 8006896:	bd80      	pop	{r7, pc}

08006898 <_ZN8touchgfx5ImageD1Ev>:
class Image : public Widget
 8006898:	b580      	push	{r7, lr}
 800689a:	b082      	sub	sp, #8
 800689c:	af00      	add	r7, sp, #0
 800689e:	6078      	str	r0, [r7, #4]
 80068a0:	4a05      	ldr	r2, [pc, #20]	@ (80068b8 <_ZN8touchgfx5ImageD1Ev+0x20>)
 80068a2:	687b      	ldr	r3, [r7, #4]
 80068a4:	601a      	str	r2, [r3, #0]
 80068a6:	687b      	ldr	r3, [r7, #4]
 80068a8:	4618      	mov	r0, r3
 80068aa:	f7fd fd65 	bl	8004378 <_ZN8touchgfx6WidgetD1Ev>
 80068ae:	687b      	ldr	r3, [r7, #4]
 80068b0:	4618      	mov	r0, r3
 80068b2:	3708      	adds	r7, #8
 80068b4:	46bd      	mov	sp, r7
 80068b6:	bd80      	pop	{r7, pc}
 80068b8:	0802eeb8 	.word	0x0802eeb8

080068bc <_ZN8touchgfx5ImageD0Ev>:
 80068bc:	b580      	push	{r7, lr}
 80068be:	b082      	sub	sp, #8
 80068c0:	af00      	add	r7, sp, #0
 80068c2:	6078      	str	r0, [r7, #4]
 80068c4:	6878      	ldr	r0, [r7, #4]
 80068c6:	f7ff ffe7 	bl	8006898 <_ZN8touchgfx5ImageD1Ev>
 80068ca:	212c      	movs	r1, #44	@ 0x2c
 80068cc:	6878      	ldr	r0, [r7, #4]
 80068ce:	f024 f98a 	bl	802abe6 <_ZdlPvj>
 80068d2:	687b      	ldr	r3, [r7, #4]
 80068d4:	4618      	mov	r0, r3
 80068d6:	3708      	adds	r7, #8
 80068d8:	46bd      	mov	sp, r7
 80068da:	bd80      	pop	{r7, pc}

080068dc <_ZN8touchgfx13BoxWithBorderD1Ev>:
class BoxWithBorder : public Box
 80068dc:	b580      	push	{r7, lr}
 80068de:	b082      	sub	sp, #8
 80068e0:	af00      	add	r7, sp, #0
 80068e2:	6078      	str	r0, [r7, #4]
 80068e4:	4a05      	ldr	r2, [pc, #20]	@ (80068fc <_ZN8touchgfx13BoxWithBorderD1Ev+0x20>)
 80068e6:	687b      	ldr	r3, [r7, #4]
 80068e8:	601a      	str	r2, [r3, #0]
 80068ea:	687b      	ldr	r3, [r7, #4]
 80068ec:	4618      	mov	r0, r3
 80068ee:	f7ff f843 	bl	8005978 <_ZN8touchgfx3BoxD1Ev>
 80068f2:	687b      	ldr	r3, [r7, #4]
 80068f4:	4618      	mov	r0, r3
 80068f6:	3708      	adds	r7, #8
 80068f8:	46bd      	mov	sp, r7
 80068fa:	bd80      	pop	{r7, pc}
 80068fc:	0802ee54 	.word	0x0802ee54

08006900 <_ZN8touchgfx13BoxWithBorderD0Ev>:
 8006900:	b580      	push	{r7, lr}
 8006902:	b082      	sub	sp, #8
 8006904:	af00      	add	r7, sp, #0
 8006906:	6078      	str	r0, [r7, #4]
 8006908:	6878      	ldr	r0, [r7, #4]
 800690a:	f7ff ffe7 	bl	80068dc <_ZN8touchgfx13BoxWithBorderD1Ev>
 800690e:	2134      	movs	r1, #52	@ 0x34
 8006910:	6878      	ldr	r0, [r7, #4]
 8006912:	f024 f968 	bl	802abe6 <_ZdlPvj>
 8006916:	687b      	ldr	r3, [r7, #4]
 8006918:	4618      	mov	r0, r3
 800691a:	3708      	adds	r7, #8
 800691c:	46bd      	mov	sp, r7
 800691e:	bd80      	pop	{r7, pc}

08006920 <_ZN8touchgfx8TextAreaD1Ev>:
class TextArea : public Widget
 8006920:	b580      	push	{r7, lr}
 8006922:	b082      	sub	sp, #8
 8006924:	af00      	add	r7, sp, #0
 8006926:	6078      	str	r0, [r7, #4]
 8006928:	4a08      	ldr	r2, [pc, #32]	@ (800694c <_ZN8touchgfx8TextAreaD1Ev+0x2c>)
 800692a:	687b      	ldr	r3, [r7, #4]
 800692c:	601a      	str	r2, [r3, #0]
 800692e:	687b      	ldr	r3, [r7, #4]
 8006930:	3328      	adds	r3, #40	@ 0x28
 8006932:	4618      	mov	r0, r3
 8006934:	f7fd fa12 	bl	8003d5c <_ZN8touchgfx9TypedTextD1Ev>
 8006938:	687b      	ldr	r3, [r7, #4]
 800693a:	4618      	mov	r0, r3
 800693c:	f7fd fd1c 	bl	8004378 <_ZN8touchgfx6WidgetD1Ev>
 8006940:	687b      	ldr	r3, [r7, #4]
 8006942:	4618      	mov	r0, r3
 8006944:	3708      	adds	r7, #8
 8006946:	46bd      	mov	sp, r7
 8006948:	bd80      	pop	{r7, pc}
 800694a:	bf00      	nop
 800694c:	0802eb98 	.word	0x0802eb98

08006950 <_ZN8touchgfx8TextAreaD0Ev>:
 8006950:	b580      	push	{r7, lr}
 8006952:	b082      	sub	sp, #8
 8006954:	af00      	add	r7, sp, #0
 8006956:	6078      	str	r0, [r7, #4]
 8006958:	6878      	ldr	r0, [r7, #4]
 800695a:	f7ff ffe1 	bl	8006920 <_ZN8touchgfx8TextAreaD1Ev>
 800695e:	213c      	movs	r1, #60	@ 0x3c
 8006960:	6878      	ldr	r0, [r7, #4]
 8006962:	f024 f940 	bl	802abe6 <_ZdlPvj>
 8006966:	687b      	ldr	r3, [r7, #4]
 8006968:	4618      	mov	r0, r3
 800696a:	3708      	adds	r7, #8
 800696c:	46bd      	mov	sp, r7
 800696e:	bd80      	pop	{r7, pc}

08006970 <_ZN8touchgfx6ButtonD1Ev>:
class Button : public AbstractButton
 8006970:	b580      	push	{r7, lr}
 8006972:	b082      	sub	sp, #8
 8006974:	af00      	add	r7, sp, #0
 8006976:	6078      	str	r0, [r7, #4]
 8006978:	4a05      	ldr	r2, [pc, #20]	@ (8006990 <_ZN8touchgfx6ButtonD1Ev+0x20>)
 800697a:	687b      	ldr	r3, [r7, #4]
 800697c:	601a      	str	r2, [r3, #0]
 800697e:	687b      	ldr	r3, [r7, #4]
 8006980:	4618      	mov	r0, r3
 8006982:	f7ff f8d9 	bl	8005b38 <_ZN8touchgfx14AbstractButtonD1Ev>
 8006986:	687b      	ldr	r3, [r7, #4]
 8006988:	4618      	mov	r0, r3
 800698a:	3708      	adds	r7, #8
 800698c:	46bd      	mov	sp, r7
 800698e:	bd80      	pop	{r7, pc}
 8006990:	0802ed08 	.word	0x0802ed08

08006994 <_ZN8touchgfx6ButtonD0Ev>:
 8006994:	b580      	push	{r7, lr}
 8006996:	b082      	sub	sp, #8
 8006998:	af00      	add	r7, sp, #0
 800699a:	6078      	str	r0, [r7, #4]
 800699c:	6878      	ldr	r0, [r7, #4]
 800699e:	f7ff ffe7 	bl	8006970 <_ZN8touchgfx6ButtonD1Ev>
 80069a2:	2134      	movs	r1, #52	@ 0x34
 80069a4:	6878      	ldr	r0, [r7, #4]
 80069a6:	f024 f91e 	bl	802abe6 <_ZdlPvj>
 80069aa:	687b      	ldr	r3, [r7, #4]
 80069ac:	4618      	mov	r0, r3
 80069ae:	3708      	adds	r7, #8
 80069b0:	46bd      	mov	sp, r7
 80069b2:	bd80      	pop	{r7, pc}

080069b4 <_ZN8touchgfx8CallbackI24Localize_AnomalyViewBaseRKNS_14AbstractButtonEvvE7executeES4_>:
    virtual void execute(T1 t1)
 80069b4:	b580      	push	{r7, lr}
 80069b6:	b082      	sub	sp, #8
 80069b8:	af00      	add	r7, sp, #0
 80069ba:	6078      	str	r0, [r7, #4]
 80069bc:	6039      	str	r1, [r7, #0]
        (pobject->*pmemfun_1)(t1);
 80069be:	687b      	ldr	r3, [r7, #4]
 80069c0:	685b      	ldr	r3, [r3, #4]
 80069c2:	687a      	ldr	r2, [r7, #4]
 80069c4:	68d2      	ldr	r2, [r2, #12]
 80069c6:	1052      	asrs	r2, r2, #1
 80069c8:	1898      	adds	r0, r3, r2
 80069ca:	687b      	ldr	r3, [r7, #4]
 80069cc:	68db      	ldr	r3, [r3, #12]
 80069ce:	f003 0301 	and.w	r3, r3, #1
 80069d2:	2b00      	cmp	r3, #0
 80069d4:	d102      	bne.n	80069dc <_ZN8touchgfx8CallbackI24Localize_AnomalyViewBaseRKNS_14AbstractButtonEvvE7executeES4_+0x28>
 80069d6:	687b      	ldr	r3, [r7, #4]
 80069d8:	689b      	ldr	r3, [r3, #8]
 80069da:	e00a      	b.n	80069f2 <_ZN8touchgfx8CallbackI24Localize_AnomalyViewBaseRKNS_14AbstractButtonEvvE7executeES4_+0x3e>
 80069dc:	687b      	ldr	r3, [r7, #4]
 80069de:	685b      	ldr	r3, [r3, #4]
 80069e0:	687a      	ldr	r2, [r7, #4]
 80069e2:	68d2      	ldr	r2, [r2, #12]
 80069e4:	1052      	asrs	r2, r2, #1
 80069e6:	4413      	add	r3, r2
 80069e8:	681b      	ldr	r3, [r3, #0]
 80069ea:	687a      	ldr	r2, [r7, #4]
 80069ec:	6892      	ldr	r2, [r2, #8]
 80069ee:	4413      	add	r3, r2
 80069f0:	681b      	ldr	r3, [r3, #0]
 80069f2:	6839      	ldr	r1, [r7, #0]
 80069f4:	4798      	blx	r3
    }
 80069f6:	bf00      	nop
 80069f8:	3708      	adds	r7, #8
 80069fa:	46bd      	mov	sp, r7
 80069fc:	bd80      	pop	{r7, pc}

080069fe <_ZNK8touchgfx8CallbackI24Localize_AnomalyViewBaseRKNS_14AbstractButtonEvvE7isValidEv>:
    virtual bool isValid() const
 80069fe:	b480      	push	{r7}
 8006a00:	b083      	sub	sp, #12
 8006a02:	af00      	add	r7, sp, #0
 8006a04:	6078      	str	r0, [r7, #4]
        return (pobject != 0) && (pmemfun_1 != 0);
 8006a06:	687b      	ldr	r3, [r7, #4]
 8006a08:	685b      	ldr	r3, [r3, #4]
 8006a0a:	2b00      	cmp	r3, #0
 8006a0c:	d010      	beq.n	8006a30 <_ZNK8touchgfx8CallbackI24Localize_AnomalyViewBaseRKNS_14AbstractButtonEvvE7isValidEv+0x32>
 8006a0e:	687b      	ldr	r3, [r7, #4]
 8006a10:	689b      	ldr	r3, [r3, #8]
 8006a12:	2b00      	cmp	r3, #0
 8006a14:	d107      	bne.n	8006a26 <_ZNK8touchgfx8CallbackI24Localize_AnomalyViewBaseRKNS_14AbstractButtonEvvE7isValidEv+0x28>
 8006a16:	687b      	ldr	r3, [r7, #4]
 8006a18:	68db      	ldr	r3, [r3, #12]
 8006a1a:	f003 0301 	and.w	r3, r3, #1
 8006a1e:	2b00      	cmp	r3, #0
 8006a20:	d101      	bne.n	8006a26 <_ZNK8touchgfx8CallbackI24Localize_AnomalyViewBaseRKNS_14AbstractButtonEvvE7isValidEv+0x28>
 8006a22:	2301      	movs	r3, #1
 8006a24:	e000      	b.n	8006a28 <_ZNK8touchgfx8CallbackI24Localize_AnomalyViewBaseRKNS_14AbstractButtonEvvE7isValidEv+0x2a>
 8006a26:	2300      	movs	r3, #0
 8006a28:	2b01      	cmp	r3, #1
 8006a2a:	d001      	beq.n	8006a30 <_ZNK8touchgfx8CallbackI24Localize_AnomalyViewBaseRKNS_14AbstractButtonEvvE7isValidEv+0x32>
 8006a2c:	2301      	movs	r3, #1
 8006a2e:	e000      	b.n	8006a32 <_ZNK8touchgfx8CallbackI24Localize_AnomalyViewBaseRKNS_14AbstractButtonEvvE7isValidEv+0x34>
 8006a30:	2300      	movs	r3, #0
    }
 8006a32:	4618      	mov	r0, r3
 8006a34:	370c      	adds	r7, #12
 8006a36:	46bd      	mov	sp, r7
 8006a38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a3c:	4770      	bx	lr

08006a3e <_ZN8touchgfx8Drawable10setVisibleEb>:
    void setVisible(bool vis)
 8006a3e:	b480      	push	{r7}
 8006a40:	b083      	sub	sp, #12
 8006a42:	af00      	add	r7, sp, #0
 8006a44:	6078      	str	r0, [r7, #4]
 8006a46:	460b      	mov	r3, r1
 8006a48:	70fb      	strb	r3, [r7, #3]
        visible = vis;
 8006a4a:	687b      	ldr	r3, [r7, #4]
 8006a4c:	78fa      	ldrb	r2, [r7, #3]
 8006a4e:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
    }
 8006a52:	bf00      	nop
 8006a54:	370c      	adds	r7, #12
 8006a56:	46bd      	mov	sp, r7
 8006a58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a5c:	4770      	bx	lr

08006a5e <_ZN8touchgfx6Slider19setNewValueCallbackERNS_15GenericCallbackIRKS0_ivEE>:
     * @param  callback The callback to be executed. The callback will be given a reference
     *                  to the Slider and the current value of the slider.
     *
     * @see GenericCallback
     */
    void setNewValueCallback(GenericCallback<const Slider&, int>& callback)
 8006a5e:	b480      	push	{r7}
 8006a60:	b083      	sub	sp, #12
 8006a62:	af00      	add	r7, sp, #0
 8006a64:	6078      	str	r0, [r7, #4]
 8006a66:	6039      	str	r1, [r7, #0]
    {
        newValueCallback = &callback;
 8006a68:	687b      	ldr	r3, [r7, #4]
 8006a6a:	683a      	ldr	r2, [r7, #0]
 8006a6c:	f8c3 20f8 	str.w	r2, [r3, #248]	@ 0xf8
    }
 8006a70:	bf00      	nop
 8006a72:	370c      	adds	r7, #12
 8006a74:	46bd      	mov	sp, r7
 8006a76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a7a:	4770      	bx	lr

08006a7c <_ZN8touchgfx12ToggleButton10setBitmapsERKNS_6BitmapES3_>:
 * when it is subsequently pressed, it will pop back out.
 */
class ToggleButton : public Button
{
public:
    virtual void setBitmaps(const Bitmap& bitmapReleased, const Bitmap& bitmapPressed)
 8006a7c:	b580      	push	{r7, lr}
 8006a7e:	b084      	sub	sp, #16
 8006a80:	af00      	add	r7, sp, #0
 8006a82:	60f8      	str	r0, [r7, #12]
 8006a84:	60b9      	str	r1, [r7, #8]
 8006a86:	607a      	str	r2, [r7, #4]
    {
        originalPressed = bitmapPressed;
 8006a88:	68fb      	ldr	r3, [r7, #12]
 8006a8a:	687a      	ldr	r2, [r7, #4]
 8006a8c:	8812      	ldrh	r2, [r2, #0]
 8006a8e:	869a      	strh	r2, [r3, #52]	@ 0x34
        Button::setBitmaps(bitmapReleased, bitmapPressed);
 8006a90:	68fb      	ldr	r3, [r7, #12]
 8006a92:	687a      	ldr	r2, [r7, #4]
 8006a94:	68b9      	ldr	r1, [r7, #8]
 8006a96:	4618      	mov	r0, r3
 8006a98:	f013 f814 	bl	8019ac4 <_ZN8touchgfx6Button10setBitmapsERKNS_6BitmapES3_>
    }
 8006a9c:	bf00      	nop
 8006a9e:	3710      	adds	r7, #16
 8006aa0:	46bd      	mov	sp, r7
 8006aa2:	bd80      	pop	{r7, pc}

08006aa4 <_ZN8touchgfx4ViewI13MainPresenterED1Ev>:
class View : public Screen
 8006aa4:	b580      	push	{r7, lr}
 8006aa6:	b082      	sub	sp, #8
 8006aa8:	af00      	add	r7, sp, #0
 8006aaa:	6078      	str	r0, [r7, #4]
 8006aac:	4a05      	ldr	r2, [pc, #20]	@ (8006ac4 <_ZN8touchgfx4ViewI13MainPresenterED1Ev+0x20>)
 8006aae:	687b      	ldr	r3, [r7, #4]
 8006ab0:	601a      	str	r2, [r3, #0]
 8006ab2:	687b      	ldr	r3, [r7, #4]
 8006ab4:	4618      	mov	r0, r3
 8006ab6:	f7fe fe9f 	bl	80057f8 <_ZN8touchgfx6ScreenD1Ev>
 8006aba:	687b      	ldr	r3, [r7, #4]
 8006abc:	4618      	mov	r0, r3
 8006abe:	3708      	adds	r7, #8
 8006ac0:	46bd      	mov	sp, r7
 8006ac2:	bd80      	pop	{r7, pc}
 8006ac4:	0802d444 	.word	0x0802d444

08006ac8 <_ZN8touchgfx4ViewI13MainPresenterED0Ev>:
 8006ac8:	b580      	push	{r7, lr}
 8006aca:	b082      	sub	sp, #8
 8006acc:	af00      	add	r7, sp, #0
 8006ace:	6078      	str	r0, [r7, #4]
 8006ad0:	6878      	ldr	r0, [r7, #4]
 8006ad2:	f7ff ffe7 	bl	8006aa4 <_ZN8touchgfx4ViewI13MainPresenterED1Ev>
 8006ad6:	2140      	movs	r1, #64	@ 0x40
 8006ad8:	6878      	ldr	r0, [r7, #4]
 8006ada:	f024 f884 	bl	802abe6 <_ZdlPvj>
 8006ade:	687b      	ldr	r3, [r7, #4]
 8006ae0:	4618      	mov	r0, r3
 8006ae2:	3708      	adds	r7, #8
 8006ae4:	46bd      	mov	sp, r7
 8006ae6:	bd80      	pop	{r7, pc}

08006ae8 <_ZN12MainViewBaseD1Ev>:

class MainViewBase : public touchgfx::View<MainPresenter>
{
public:
    MainViewBase();
    virtual ~MainViewBase() {}
 8006ae8:	b580      	push	{r7, lr}
 8006aea:	b082      	sub	sp, #8
 8006aec:	af00      	add	r7, sp, #0
 8006aee:	6078      	str	r0, [r7, #4]
 8006af0:	4a93      	ldr	r2, [pc, #588]	@ (8006d40 <_ZN12MainViewBaseD1Ev+0x258>)
 8006af2:	687b      	ldr	r3, [r7, #4]
 8006af4:	601a      	str	r2, [r3, #0]
 8006af6:	687b      	ldr	r3, [r7, #4]
 8006af8:	f603 3308 	addw	r3, r3, #2824	@ 0xb08
 8006afc:	4618      	mov	r0, r3
 8006afe:	f002 fd77 	bl	80095f0 <_ZN8touchgfx8CallbackI12MainViewBaseRKNS_6SliderEivED1Ev>
 8006b02:	687b      	ldr	r3, [r7, #4]
 8006b04:	f603 23f8 	addw	r3, r3, #2808	@ 0xaf8
 8006b08:	4618      	mov	r0, r3
 8006b0a:	f002 fd93 	bl	8009634 <_ZN8touchgfx8CallbackI12MainViewBaseRKNS_14AbstractButtonEvvED1Ev>
 8006b0e:	687b      	ldr	r3, [r7, #4]
 8006b10:	f603 23bc 	addw	r3, r3, #2748	@ 0xabc
 8006b14:	4618      	mov	r0, r3
 8006b16:	f7ff ff03 	bl	8006920 <_ZN8touchgfx8TextAreaD1Ev>
 8006b1a:	687b      	ldr	r3, [r7, #4]
 8006b1c:	f603 2388 	addw	r3, r3, #2696	@ 0xa88
 8006b20:	4618      	mov	r0, r3
 8006b22:	f7ff fedb 	bl	80068dc <_ZN8touchgfx13BoxWithBorderD1Ev>
 8006b26:	687b      	ldr	r3, [r7, #4]
 8006b28:	f603 235c 	addw	r3, r3, #2652	@ 0xa5c
 8006b2c:	4618      	mov	r0, r3
 8006b2e:	f7ff fe91 	bl	8006854 <_ZN8touchgfx9ContainerD1Ev>
 8006b32:	687b      	ldr	r3, [r7, #4]
 8006b34:	f603 2328 	addw	r3, r3, #2600	@ 0xa28
 8006b38:	4618      	mov	r0, r3
 8006b3a:	f7ff ff19 	bl	8006970 <_ZN8touchgfx6ButtonD1Ev>
 8006b3e:	687b      	ldr	r3, [r7, #4]
 8006b40:	f603 13f4 	addw	r3, r3, #2548	@ 0x9f4
 8006b44:	4618      	mov	r0, r3
 8006b46:	f7ff ff13 	bl	8006970 <_ZN8touchgfx6ButtonD1Ev>
 8006b4a:	687b      	ldr	r3, [r7, #4]
 8006b4c:	f603 13c8 	addw	r3, r3, #2504	@ 0x9c8
 8006b50:	4618      	mov	r0, r3
 8006b52:	f7ff fea1 	bl	8006898 <_ZN8touchgfx5ImageD1Ev>
 8006b56:	687b      	ldr	r3, [r7, #4]
 8006b58:	f603 139c 	addw	r3, r3, #2460	@ 0x99c
 8006b5c:	4618      	mov	r0, r3
 8006b5e:	f7ff fe9b 	bl	8006898 <_ZN8touchgfx5ImageD1Ev>
 8006b62:	687b      	ldr	r3, [r7, #4]
 8006b64:	f503 6316 	add.w	r3, r3, #2400	@ 0x960
 8006b68:	4618      	mov	r0, r3
 8006b6a:	f7ff fed9 	bl	8006920 <_ZN8touchgfx8TextAreaD1Ev>
 8006b6e:	687b      	ldr	r3, [r7, #4]
 8006b70:	f603 132c 	addw	r3, r3, #2348	@ 0x92c
 8006b74:	4618      	mov	r0, r3
 8006b76:	f7ff feb1 	bl	80068dc <_ZN8touchgfx13BoxWithBorderD1Ev>
 8006b7a:	687b      	ldr	r3, [r7, #4]
 8006b7c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006b80:	4618      	mov	r0, r3
 8006b82:	f7ff fe67 	bl	8006854 <_ZN8touchgfx9ContainerD1Ev>
 8006b86:	687b      	ldr	r3, [r7, #4]
 8006b88:	f603 03c4 	addw	r3, r3, #2244	@ 0x8c4
 8006b8c:	4618      	mov	r0, r3
 8006b8e:	f7ff fec7 	bl	8006920 <_ZN8touchgfx8TextAreaD1Ev>
 8006b92:	687b      	ldr	r3, [r7, #4]
 8006b94:	f603 0388 	addw	r3, r3, #2184	@ 0x888
 8006b98:	4618      	mov	r0, r3
 8006b9a:	f7ff fec1 	bl	8006920 <_ZN8touchgfx8TextAreaD1Ev>
 8006b9e:	687b      	ldr	r3, [r7, #4]
 8006ba0:	f603 0354 	addw	r3, r3, #2132	@ 0x854
 8006ba4:	4618      	mov	r0, r3
 8006ba6:	f7ff fe99 	bl	80068dc <_ZN8touchgfx13BoxWithBorderD1Ev>
 8006baa:	687b      	ldr	r3, [r7, #4]
 8006bac:	f503 6302 	add.w	r3, r3, #2080	@ 0x820
 8006bb0:	4618      	mov	r0, r3
 8006bb2:	f7ff fe93 	bl	80068dc <_ZN8touchgfx13BoxWithBorderD1Ev>
 8006bb6:	687b      	ldr	r3, [r7, #4]
 8006bb8:	f203 73f4 	addw	r3, r3, #2036	@ 0x7f4
 8006bbc:	4618      	mov	r0, r3
 8006bbe:	f7ff fe49 	bl	8006854 <_ZN8touchgfx9ContainerD1Ev>
 8006bc2:	687b      	ldr	r3, [r7, #4]
 8006bc4:	f503 63f7 	add.w	r3, r3, #1976	@ 0x7b8
 8006bc8:	4618      	mov	r0, r3
 8006bca:	f7ff fea9 	bl	8006920 <_ZN8touchgfx8TextAreaD1Ev>
 8006bce:	687b      	ldr	r3, [r7, #4]
 8006bd0:	f203 737c 	addw	r3, r3, #1916	@ 0x77c
 8006bd4:	4618      	mov	r0, r3
 8006bd6:	f7ff fea3 	bl	8006920 <_ZN8touchgfx8TextAreaD1Ev>
 8006bda:	687b      	ldr	r3, [r7, #4]
 8006bdc:	f503 63e9 	add.w	r3, r3, #1864	@ 0x748
 8006be0:	4618      	mov	r0, r3
 8006be2:	f7ff fe7b 	bl	80068dc <_ZN8touchgfx13BoxWithBorderD1Ev>
 8006be6:	687b      	ldr	r3, [r7, #4]
 8006be8:	f203 7314 	addw	r3, r3, #1812	@ 0x714
 8006bec:	4618      	mov	r0, r3
 8006bee:	f7ff fe75 	bl	80068dc <_ZN8touchgfx13BoxWithBorderD1Ev>
 8006bf2:	687b      	ldr	r3, [r7, #4]
 8006bf4:	f503 63dd 	add.w	r3, r3, #1768	@ 0x6e8
 8006bf8:	4618      	mov	r0, r3
 8006bfa:	f7ff fe2b 	bl	8006854 <_ZN8touchgfx9ContainerD1Ev>
 8006bfe:	687b      	ldr	r3, [r7, #4]
 8006c00:	f203 63ac 	addw	r3, r3, #1708	@ 0x6ac
 8006c04:	4618      	mov	r0, r3
 8006c06:	f7ff fe8b 	bl	8006920 <_ZN8touchgfx8TextAreaD1Ev>
 8006c0a:	687b      	ldr	r3, [r7, #4]
 8006c0c:	f503 63cf 	add.w	r3, r3, #1656	@ 0x678
 8006c10:	4618      	mov	r0, r3
 8006c12:	f7ff fe63 	bl	80068dc <_ZN8touchgfx13BoxWithBorderD1Ev>
 8006c16:	687b      	ldr	r3, [r7, #4]
 8006c18:	f203 634c 	addw	r3, r3, #1612	@ 0x64c
 8006c1c:	4618      	mov	r0, r3
 8006c1e:	f7ff fe19 	bl	8006854 <_ZN8touchgfx9ContainerD1Ev>
 8006c22:	687b      	ldr	r3, [r7, #4]
 8006c24:	f503 63c3 	add.w	r3, r3, #1560	@ 0x618
 8006c28:	4618      	mov	r0, r3
 8006c2a:	f7ff fe57 	bl	80068dc <_ZN8touchgfx13BoxWithBorderD1Ev>
 8006c2e:	687b      	ldr	r3, [r7, #4]
 8006c30:	f203 53ec 	addw	r3, r3, #1516	@ 0x5ec
 8006c34:	4618      	mov	r0, r3
 8006c36:	f7ff fe0d 	bl	8006854 <_ZN8touchgfx9ContainerD1Ev>
 8006c3a:	687b      	ldr	r3, [r7, #4]
 8006c3c:	f503 63b7 	add.w	r3, r3, #1464	@ 0x5b8
 8006c40:	4618      	mov	r0, r3
 8006c42:	f7ff fe4b 	bl	80068dc <_ZN8touchgfx13BoxWithBorderD1Ev>
 8006c46:	687b      	ldr	r3, [r7, #4]
 8006c48:	f203 538c 	addw	r3, r3, #1420	@ 0x58c
 8006c4c:	4618      	mov	r0, r3
 8006c4e:	f7ff fe01 	bl	8006854 <_ZN8touchgfx9ContainerD1Ev>
 8006c52:	687b      	ldr	r3, [r7, #4]
 8006c54:	f503 63ab 	add.w	r3, r3, #1368	@ 0x558
 8006c58:	4618      	mov	r0, r3
 8006c5a:	f7ff fe3f 	bl	80068dc <_ZN8touchgfx13BoxWithBorderD1Ev>
 8006c5e:	687b      	ldr	r3, [r7, #4]
 8006c60:	f203 532c 	addw	r3, r3, #1324	@ 0x52c
 8006c64:	4618      	mov	r0, r3
 8006c66:	f7ff fdf5 	bl	8006854 <_ZN8touchgfx9ContainerD1Ev>
 8006c6a:	687b      	ldr	r3, [r7, #4]
 8006c6c:	f203 43f4 	addw	r3, r3, #1268	@ 0x4f4
 8006c70:	4618      	mov	r0, r3
 8006c72:	f002 fdaf 	bl	80097d4 <_ZN8touchgfx12ToggleButtonD1Ev>
 8006c76:	687b      	ldr	r3, [r7, #4]
 8006c78:	f503 737e 	add.w	r3, r3, #1016	@ 0x3f8
 8006c7c:	4618      	mov	r0, r3
 8006c7e:	f002 fd73 	bl	8009768 <_ZN8touchgfx6SliderD1Ev>
 8006c82:	687b      	ldr	r3, [r7, #4]
 8006c84:	f503 736f 	add.w	r3, r3, #956	@ 0x3bc
 8006c88:	4618      	mov	r0, r3
 8006c8a:	f7ff fe49 	bl	8006920 <_ZN8touchgfx8TextAreaD1Ev>
 8006c8e:	687b      	ldr	r3, [r7, #4]
 8006c90:	f503 7362 	add.w	r3, r3, #904	@ 0x388
 8006c94:	4618      	mov	r0, r3
 8006c96:	f7ff fe21 	bl	80068dc <_ZN8touchgfx13BoxWithBorderD1Ev>
 8006c9a:	687b      	ldr	r3, [r7, #4]
 8006c9c:	f503 7357 	add.w	r3, r3, #860	@ 0x35c
 8006ca0:	4618      	mov	r0, r3
 8006ca2:	f7ff fdd7 	bl	8006854 <_ZN8touchgfx9ContainerD1Ev>
 8006ca6:	687b      	ldr	r3, [r7, #4]
 8006ca8:	f503 7315 	add.w	r3, r3, #596	@ 0x254
 8006cac:	4618      	mov	r0, r3
 8006cae:	f002 fd31 	bl	8009714 <_ZN8touchgfx12TextProgressD1Ev>
 8006cb2:	687b      	ldr	r3, [r7, #4]
 8006cb4:	f503 7308 	add.w	r3, r3, #544	@ 0x220
 8006cb8:	4618      	mov	r0, r3
 8006cba:	f7ff fe0f 	bl	80068dc <_ZN8touchgfx13BoxWithBorderD1Ev>
 8006cbe:	687b      	ldr	r3, [r7, #4]
 8006cc0:	f503 73fa 	add.w	r3, r3, #500	@ 0x1f4
 8006cc4:	4618      	mov	r0, r3
 8006cc6:	f7ff fdc5 	bl	8006854 <_ZN8touchgfx9ContainerD1Ev>
 8006cca:	687b      	ldr	r3, [r7, #4]
 8006ccc:	f503 73dc 	add.w	r3, r3, #440	@ 0x1b8
 8006cd0:	4618      	mov	r0, r3
 8006cd2:	f7ff fe25 	bl	8006920 <_ZN8touchgfx8TextAreaD1Ev>
 8006cd6:	687b      	ldr	r3, [r7, #4]
 8006cd8:	f503 73c2 	add.w	r3, r3, #388	@ 0x184
 8006cdc:	4618      	mov	r0, r3
 8006cde:	f7ff fdfd 	bl	80068dc <_ZN8touchgfx13BoxWithBorderD1Ev>
 8006ce2:	687b      	ldr	r3, [r7, #4]
 8006ce4:	f503 73ac 	add.w	r3, r3, #344	@ 0x158
 8006ce8:	4618      	mov	r0, r3
 8006cea:	f7ff fdb3 	bl	8006854 <_ZN8touchgfx9ContainerD1Ev>
 8006cee:	687b      	ldr	r3, [r7, #4]
 8006cf0:	f503 7392 	add.w	r3, r3, #292	@ 0x124
 8006cf4:	4618      	mov	r0, r3
 8006cf6:	f7ff fdf1 	bl	80068dc <_ZN8touchgfx13BoxWithBorderD1Ev>
 8006cfa:	687b      	ldr	r3, [r7, #4]
 8006cfc:	33f8      	adds	r3, #248	@ 0xf8
 8006cfe:	4618      	mov	r0, r3
 8006d00:	f7ff fda8 	bl	8006854 <_ZN8touchgfx9ContainerD1Ev>
 8006d04:	687b      	ldr	r3, [r7, #4]
 8006d06:	33c4      	adds	r3, #196	@ 0xc4
 8006d08:	4618      	mov	r0, r3
 8006d0a:	f7ff fde7 	bl	80068dc <_ZN8touchgfx13BoxWithBorderD1Ev>
 8006d0e:	687b      	ldr	r3, [r7, #4]
 8006d10:	3398      	adds	r3, #152	@ 0x98
 8006d12:	4618      	mov	r0, r3
 8006d14:	f7ff fd9e 	bl	8006854 <_ZN8touchgfx9ContainerD1Ev>
 8006d18:	687b      	ldr	r3, [r7, #4]
 8006d1a:	336c      	adds	r3, #108	@ 0x6c
 8006d1c:	4618      	mov	r0, r3
 8006d1e:	f7ff fdbb 	bl	8006898 <_ZN8touchgfx5ImageD1Ev>
 8006d22:	687b      	ldr	r3, [r7, #4]
 8006d24:	3340      	adds	r3, #64	@ 0x40
 8006d26:	4618      	mov	r0, r3
 8006d28:	f7fe fe26 	bl	8005978 <_ZN8touchgfx3BoxD1Ev>
 8006d2c:	687b      	ldr	r3, [r7, #4]
 8006d2e:	4618      	mov	r0, r3
 8006d30:	f7ff feb8 	bl	8006aa4 <_ZN8touchgfx4ViewI13MainPresenterED1Ev>
 8006d34:	687b      	ldr	r3, [r7, #4]
 8006d36:	4618      	mov	r0, r3
 8006d38:	3708      	adds	r7, #8
 8006d3a:	46bd      	mov	sp, r7
 8006d3c:	bd80      	pop	{r7, pc}
 8006d3e:	bf00      	nop
 8006d40:	0802d3cc 	.word	0x0802d3cc

08006d44 <_ZN12MainViewBaseD0Ev>:
 8006d44:	b580      	push	{r7, lr}
 8006d46:	b082      	sub	sp, #8
 8006d48:	af00      	add	r7, sp, #0
 8006d4a:	6078      	str	r0, [r7, #4]
 8006d4c:	6878      	ldr	r0, [r7, #4]
 8006d4e:	f7ff fecb 	bl	8006ae8 <_ZN12MainViewBaseD1Ev>
 8006d52:	f640 3118 	movw	r1, #2840	@ 0xb18
 8006d56:	6878      	ldr	r0, [r7, #4]
 8006d58:	f023 ff45 	bl	802abe6 <_ZdlPvj>
 8006d5c:	687b      	ldr	r3, [r7, #4]
 8006d5e:	4618      	mov	r0, r3
 8006d60:	3708      	adds	r7, #8
 8006d62:	46bd      	mov	sp, r7
 8006d64:	bd80      	pop	{r7, pc}

08006d66 <_ZN12MainViewBase17set_volume_sliderEi>:
    virtual void handleKeyEvent(uint8_t key);

    /*
     * Virtual Action Handlers
     */
    virtual void set_volume_slider(int value)
 8006d66:	b480      	push	{r7}
 8006d68:	b083      	sub	sp, #12
 8006d6a:	af00      	add	r7, sp, #0
 8006d6c:	6078      	str	r0, [r7, #4]
 8006d6e:	6039      	str	r1, [r7, #0]
    {
        // Override and implement this function in Main
    }
 8006d70:	bf00      	nop
 8006d72:	370c      	adds	r7, #12
 8006d74:	46bd      	mov	sp, r7
 8006d76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d7a:	4770      	bx	lr

08006d7c <_ZN12MainViewBase20update_anomaly_alertEv>:

    virtual void update_anomaly_alert()
 8006d7c:	b480      	push	{r7}
 8006d7e:	b083      	sub	sp, #12
 8006d80:	af00      	add	r7, sp, #0
 8006d82:	6078      	str	r0, [r7, #4]
    {
        // Override and implement this function in Main
    }
 8006d84:	bf00      	nop
 8006d86:	370c      	adds	r7, #12
 8006d88:	46bd      	mov	sp, r7
 8006d8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d8e:	4770      	bx	lr

08006d90 <_ZN12MainViewBase12toggle_voiceEv>:

    virtual void toggle_voice()
 8006d90:	b480      	push	{r7}
 8006d92:	b083      	sub	sp, #12
 8006d94:	af00      	add	r7, sp, #0
 8006d96:	6078      	str	r0, [r7, #4]
    {
        // Override and implement this function in Main
    }
 8006d98:	bf00      	nop
 8006d9a:	370c      	adds	r7, #12
 8006d9c:	46bd      	mov	sp, r7
 8006d9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006da2:	4770      	bx	lr

08006da4 <_ZN12MainViewBase18alert_mute_pressedEv>:

    virtual void alert_mute_pressed()
 8006da4:	b480      	push	{r7}
 8006da6:	b083      	sub	sp, #12
 8006da8:	af00      	add	r7, sp, #0
 8006daa:	6078      	str	r0, [r7, #4]
    {
        // Override and implement this function in Main
    }
 8006dac:	bf00      	nop
 8006dae:	370c      	adds	r7, #12
 8006db0:	46bd      	mov	sp, r7
 8006db2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006db6:	4770      	bx	lr

08006db8 <_ZN12MainViewBase18set_volume_encoderEv>:

    virtual void set_volume_encoder()
 8006db8:	b480      	push	{r7}
 8006dba:	b083      	sub	sp, #12
 8006dbc:	af00      	add	r7, sp, #0
 8006dbe:	6078      	str	r0, [r7, #4]
    {
        // Override and implement this function in Main
    }
 8006dc0:	bf00      	nop
 8006dc2:	370c      	adds	r7, #12
 8006dc4:	46bd      	mov	sp, r7
 8006dc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006dca:	4770      	bx	lr

08006dcc <_ZN12MainViewBase11applicationEv>:

protected:
    FrontendApplication& application() {
 8006dcc:	b580      	push	{r7, lr}
 8006dce:	b082      	sub	sp, #8
 8006dd0:	af00      	add	r7, sp, #0
 8006dd2:	6078      	str	r0, [r7, #4]
        return *static_cast<FrontendApplication*>(touchgfx::Application::getInstance());
 8006dd4:	f014 fdc8 	bl	801b968 <_ZN8touchgfx11Application11getInstanceEv>
 8006dd8:	4603      	mov	r3, r0
    }
 8006dda:	4618      	mov	r0, r3
 8006ddc:	3708      	adds	r7, #8
 8006dde:	46bd      	mov	sp, r7
 8006de0:	bd80      	pop	{r7, pc}
	...

08006de4 <_ZN8touchgfx12ToggleButtonC1Ev>:
class ToggleButton : public Button
 8006de4:	b580      	push	{r7, lr}
 8006de6:	b082      	sub	sp, #8
 8006de8:	af00      	add	r7, sp, #0
 8006dea:	6078      	str	r0, [r7, #4]
 8006dec:	687b      	ldr	r3, [r7, #4]
 8006dee:	4618      	mov	r0, r3
 8006df0:	f7fe fec4 	bl	8005b7c <_ZN8touchgfx6ButtonC1Ev>
 8006df4:	4a07      	ldr	r2, [pc, #28]	@ (8006e14 <_ZN8touchgfx12ToggleButtonC1Ev+0x30>)
 8006df6:	687b      	ldr	r3, [r7, #4]
 8006df8:	601a      	str	r2, [r3, #0]
 8006dfa:	687b      	ldr	r3, [r7, #4]
 8006dfc:	3334      	adds	r3, #52	@ 0x34
 8006dfe:	f64f 71ff 	movw	r1, #65535	@ 0xffff
 8006e02:	4618      	mov	r0, r3
 8006e04:	f7fe fcc2 	bl	800578c <_ZN8touchgfx6BitmapC1Et>
 8006e08:	687b      	ldr	r3, [r7, #4]
 8006e0a:	4618      	mov	r0, r3
 8006e0c:	3708      	adds	r7, #8
 8006e0e:	46bd      	mov	sp, r7
 8006e10:	bd80      	pop	{r7, pc}
 8006e12:	bf00      	nop
 8006e14:	0802ea68 	.word	0x0802ea68

08006e18 <_ZN12MainViewBaseC1Ev>:
#include <gui_generated/main_screen/MainViewBase.hpp>
#include <touchgfx/Color.hpp>
#include <BitmapDatabase.hpp>
#include <texts/TextKeysAndLanguages.hpp>

MainViewBase::MainViewBase() :
 8006e18:	b590      	push	{r4, r7, lr}
 8006e1a:	f5ad 7d1d 	sub.w	sp, sp, #628	@ 0x274
 8006e1e:	af02      	add	r7, sp, #8
 8006e20:	f507 731a 	add.w	r3, r7, #616	@ 0x268
 8006e24:	f5a3 7319 	sub.w	r3, r3, #612	@ 0x264
 8006e28:	6018      	str	r0, [r3, #0]
    buttonCallback(this, &MainViewBase::buttonCallbackHandler),
    sliderValueChangedCallback(this, &MainViewBase::sliderValueChangedCallbackHandler)
 8006e2a:	f507 731a 	add.w	r3, r7, #616	@ 0x268
 8006e2e:	f5a3 7319 	sub.w	r3, r3, #612	@ 0x264
 8006e32:	681b      	ldr	r3, [r3, #0]
 8006e34:	4618      	mov	r0, r3
 8006e36:	f002 fb55 	bl	80094e4 <_ZN8touchgfx4ViewI13MainPresenterEC1Ev>
 8006e3a:	4ae7      	ldr	r2, [pc, #924]	@ (80071d8 <_ZN12MainViewBaseC1Ev+0x3c0>)
 8006e3c:	f507 731a 	add.w	r3, r7, #616	@ 0x268
 8006e40:	f5a3 7319 	sub.w	r3, r3, #612	@ 0x264
 8006e44:	681b      	ldr	r3, [r3, #0]
 8006e46:	601a      	str	r2, [r3, #0]
 8006e48:	f507 731a 	add.w	r3, r7, #616	@ 0x268
 8006e4c:	f5a3 7319 	sub.w	r3, r3, #612	@ 0x264
 8006e50:	681b      	ldr	r3, [r3, #0]
 8006e52:	3340      	adds	r3, #64	@ 0x40
 8006e54:	4618      	mov	r0, r3
 8006e56:	f7fe fd37 	bl	80058c8 <_ZN8touchgfx3BoxC1Ev>
 8006e5a:	f507 731a 	add.w	r3, r7, #616	@ 0x268
 8006e5e:	f5a3 7319 	sub.w	r3, r3, #612	@ 0x264
 8006e62:	681b      	ldr	r3, [r3, #0]
 8006e64:	f103 046c 	add.w	r4, r3, #108	@ 0x6c
 8006e68:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8006e6c:	f64f 71ff 	movw	r1, #65535	@ 0xffff
 8006e70:	4618      	mov	r0, r3
 8006e72:	f7fe fc8b 	bl	800578c <_ZN8touchgfx6BitmapC1Et>
 8006e76:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8006e7a:	4619      	mov	r1, r3
 8006e7c:	4620      	mov	r0, r4
 8006e7e:	f7fe fd55 	bl	800592c <_ZN8touchgfx5ImageC1ERKNS_6BitmapE>
 8006e82:	f507 731a 	add.w	r3, r7, #616	@ 0x268
 8006e86:	f5a3 7319 	sub.w	r3, r3, #612	@ 0x264
 8006e8a:	681b      	ldr	r3, [r3, #0]
 8006e8c:	3398      	adds	r3, #152	@ 0x98
 8006e8e:	4618      	mov	r0, r3
 8006e90:	f7fe fc9c 	bl	80057cc <_ZN8touchgfx9ContainerC1Ev>
 8006e94:	f507 731a 	add.w	r3, r7, #616	@ 0x268
 8006e98:	f5a3 7319 	sub.w	r3, r3, #612	@ 0x264
 8006e9c:	681b      	ldr	r3, [r3, #0]
 8006e9e:	33c4      	adds	r3, #196	@ 0xc4
 8006ea0:	4618      	mov	r0, r3
 8006ea2:	f7fe fd8b 	bl	80059bc <_ZN8touchgfx13BoxWithBorderC1Ev>
 8006ea6:	f507 731a 	add.w	r3, r7, #616	@ 0x268
 8006eaa:	f5a3 7319 	sub.w	r3, r3, #612	@ 0x264
 8006eae:	681b      	ldr	r3, [r3, #0]
 8006eb0:	33f8      	adds	r3, #248	@ 0xf8
 8006eb2:	4618      	mov	r0, r3
 8006eb4:	f7fe fc8a 	bl	80057cc <_ZN8touchgfx9ContainerC1Ev>
 8006eb8:	f507 731a 	add.w	r3, r7, #616	@ 0x268
 8006ebc:	f5a3 7319 	sub.w	r3, r3, #612	@ 0x264
 8006ec0:	681b      	ldr	r3, [r3, #0]
 8006ec2:	f503 7392 	add.w	r3, r3, #292	@ 0x124
 8006ec6:	4618      	mov	r0, r3
 8006ec8:	f7fe fd78 	bl	80059bc <_ZN8touchgfx13BoxWithBorderC1Ev>
 8006ecc:	f507 731a 	add.w	r3, r7, #616	@ 0x268
 8006ed0:	f5a3 7319 	sub.w	r3, r3, #612	@ 0x264
 8006ed4:	681b      	ldr	r3, [r3, #0]
 8006ed6:	f503 73ac 	add.w	r3, r3, #344	@ 0x158
 8006eda:	4618      	mov	r0, r3
 8006edc:	f7fe fc76 	bl	80057cc <_ZN8touchgfx9ContainerC1Ev>
 8006ee0:	f507 731a 	add.w	r3, r7, #616	@ 0x268
 8006ee4:	f5a3 7319 	sub.w	r3, r3, #612	@ 0x264
 8006ee8:	681b      	ldr	r3, [r3, #0]
 8006eea:	f503 73c2 	add.w	r3, r3, #388	@ 0x184
 8006eee:	4618      	mov	r0, r3
 8006ef0:	f7fe fd64 	bl	80059bc <_ZN8touchgfx13BoxWithBorderC1Ev>
 8006ef4:	f507 731a 	add.w	r3, r7, #616	@ 0x268
 8006ef8:	f5a3 7319 	sub.w	r3, r3, #612	@ 0x264
 8006efc:	681b      	ldr	r3, [r3, #0]
 8006efe:	f503 73dc 	add.w	r3, r3, #440	@ 0x1b8
 8006f02:	4618      	mov	r0, r3
 8006f04:	f7fe fdaa 	bl	8005a5c <_ZN8touchgfx8TextAreaC1Ev>
 8006f08:	f507 731a 	add.w	r3, r7, #616	@ 0x268
 8006f0c:	f5a3 7319 	sub.w	r3, r3, #612	@ 0x264
 8006f10:	681b      	ldr	r3, [r3, #0]
 8006f12:	f503 73fa 	add.w	r3, r3, #500	@ 0x1f4
 8006f16:	4618      	mov	r0, r3
 8006f18:	f7fe fc58 	bl	80057cc <_ZN8touchgfx9ContainerC1Ev>
 8006f1c:	f507 731a 	add.w	r3, r7, #616	@ 0x268
 8006f20:	f5a3 7319 	sub.w	r3, r3, #612	@ 0x264
 8006f24:	681b      	ldr	r3, [r3, #0]
 8006f26:	f503 7308 	add.w	r3, r3, #544	@ 0x220
 8006f2a:	4618      	mov	r0, r3
 8006f2c:	f7fe fd46 	bl	80059bc <_ZN8touchgfx13BoxWithBorderC1Ev>
 8006f30:	f507 731a 	add.w	r3, r7, #616	@ 0x268
 8006f34:	f5a3 7319 	sub.w	r3, r3, #612	@ 0x264
 8006f38:	681b      	ldr	r3, [r3, #0]
 8006f3a:	f503 7315 	add.w	r3, r3, #596	@ 0x254
 8006f3e:	4618      	mov	r0, r3
 8006f40:	f010 fbfc 	bl	801773c <_ZN8touchgfx12TextProgressC1Ev>
 8006f44:	f507 731a 	add.w	r3, r7, #616	@ 0x268
 8006f48:	f5a3 7319 	sub.w	r3, r3, #612	@ 0x264
 8006f4c:	681b      	ldr	r3, [r3, #0]
 8006f4e:	f503 7357 	add.w	r3, r3, #860	@ 0x35c
 8006f52:	4618      	mov	r0, r3
 8006f54:	f7fe fc3a 	bl	80057cc <_ZN8touchgfx9ContainerC1Ev>
 8006f58:	f507 731a 	add.w	r3, r7, #616	@ 0x268
 8006f5c:	f5a3 7319 	sub.w	r3, r3, #612	@ 0x264
 8006f60:	681b      	ldr	r3, [r3, #0]
 8006f62:	f503 7362 	add.w	r3, r3, #904	@ 0x388
 8006f66:	4618      	mov	r0, r3
 8006f68:	f7fe fd28 	bl	80059bc <_ZN8touchgfx13BoxWithBorderC1Ev>
 8006f6c:	f507 731a 	add.w	r3, r7, #616	@ 0x268
 8006f70:	f5a3 7319 	sub.w	r3, r3, #612	@ 0x264
 8006f74:	681b      	ldr	r3, [r3, #0]
 8006f76:	f503 736f 	add.w	r3, r3, #956	@ 0x3bc
 8006f7a:	4618      	mov	r0, r3
 8006f7c:	f7fe fd6e 	bl	8005a5c <_ZN8touchgfx8TextAreaC1Ev>
 8006f80:	f507 731a 	add.w	r3, r7, #616	@ 0x268
 8006f84:	f5a3 7319 	sub.w	r3, r3, #612	@ 0x264
 8006f88:	681b      	ldr	r3, [r3, #0]
 8006f8a:	f503 737e 	add.w	r3, r3, #1016	@ 0x3f8
 8006f8e:	4618      	mov	r0, r3
 8006f90:	f011 fab6 	bl	8018500 <_ZN8touchgfx6SliderC1Ev>
 8006f94:	f507 731a 	add.w	r3, r7, #616	@ 0x268
 8006f98:	f5a3 7319 	sub.w	r3, r3, #612	@ 0x264
 8006f9c:	681b      	ldr	r3, [r3, #0]
 8006f9e:	f203 43f4 	addw	r3, r3, #1268	@ 0x4f4
 8006fa2:	4618      	mov	r0, r3
 8006fa4:	f7ff ff1e 	bl	8006de4 <_ZN8touchgfx12ToggleButtonC1Ev>
 8006fa8:	f507 731a 	add.w	r3, r7, #616	@ 0x268
 8006fac:	f5a3 7319 	sub.w	r3, r3, #612	@ 0x264
 8006fb0:	681b      	ldr	r3, [r3, #0]
 8006fb2:	f203 532c 	addw	r3, r3, #1324	@ 0x52c
 8006fb6:	4618      	mov	r0, r3
 8006fb8:	f7fe fc08 	bl	80057cc <_ZN8touchgfx9ContainerC1Ev>
 8006fbc:	f507 731a 	add.w	r3, r7, #616	@ 0x268
 8006fc0:	f5a3 7319 	sub.w	r3, r3, #612	@ 0x264
 8006fc4:	681b      	ldr	r3, [r3, #0]
 8006fc6:	f503 63ab 	add.w	r3, r3, #1368	@ 0x558
 8006fca:	4618      	mov	r0, r3
 8006fcc:	f7fe fcf6 	bl	80059bc <_ZN8touchgfx13BoxWithBorderC1Ev>
 8006fd0:	f507 731a 	add.w	r3, r7, #616	@ 0x268
 8006fd4:	f5a3 7319 	sub.w	r3, r3, #612	@ 0x264
 8006fd8:	681b      	ldr	r3, [r3, #0]
 8006fda:	f203 538c 	addw	r3, r3, #1420	@ 0x58c
 8006fde:	4618      	mov	r0, r3
 8006fe0:	f7fe fbf4 	bl	80057cc <_ZN8touchgfx9ContainerC1Ev>
 8006fe4:	f507 731a 	add.w	r3, r7, #616	@ 0x268
 8006fe8:	f5a3 7319 	sub.w	r3, r3, #612	@ 0x264
 8006fec:	681b      	ldr	r3, [r3, #0]
 8006fee:	f503 63b7 	add.w	r3, r3, #1464	@ 0x5b8
 8006ff2:	4618      	mov	r0, r3
 8006ff4:	f7fe fce2 	bl	80059bc <_ZN8touchgfx13BoxWithBorderC1Ev>
 8006ff8:	f507 731a 	add.w	r3, r7, #616	@ 0x268
 8006ffc:	f5a3 7319 	sub.w	r3, r3, #612	@ 0x264
 8007000:	681b      	ldr	r3, [r3, #0]
 8007002:	f203 53ec 	addw	r3, r3, #1516	@ 0x5ec
 8007006:	4618      	mov	r0, r3
 8007008:	f7fe fbe0 	bl	80057cc <_ZN8touchgfx9ContainerC1Ev>
 800700c:	f507 731a 	add.w	r3, r7, #616	@ 0x268
 8007010:	f5a3 7319 	sub.w	r3, r3, #612	@ 0x264
 8007014:	681b      	ldr	r3, [r3, #0]
 8007016:	f503 63c3 	add.w	r3, r3, #1560	@ 0x618
 800701a:	4618      	mov	r0, r3
 800701c:	f7fe fcce 	bl	80059bc <_ZN8touchgfx13BoxWithBorderC1Ev>
 8007020:	f507 731a 	add.w	r3, r7, #616	@ 0x268
 8007024:	f5a3 7319 	sub.w	r3, r3, #612	@ 0x264
 8007028:	681b      	ldr	r3, [r3, #0]
 800702a:	f203 634c 	addw	r3, r3, #1612	@ 0x64c
 800702e:	4618      	mov	r0, r3
 8007030:	f7fe fbcc 	bl	80057cc <_ZN8touchgfx9ContainerC1Ev>
 8007034:	f507 731a 	add.w	r3, r7, #616	@ 0x268
 8007038:	f5a3 7319 	sub.w	r3, r3, #612	@ 0x264
 800703c:	681b      	ldr	r3, [r3, #0]
 800703e:	f503 63cf 	add.w	r3, r3, #1656	@ 0x678
 8007042:	4618      	mov	r0, r3
 8007044:	f7fe fcba 	bl	80059bc <_ZN8touchgfx13BoxWithBorderC1Ev>
 8007048:	f507 731a 	add.w	r3, r7, #616	@ 0x268
 800704c:	f5a3 7319 	sub.w	r3, r3, #612	@ 0x264
 8007050:	681b      	ldr	r3, [r3, #0]
 8007052:	f203 63ac 	addw	r3, r3, #1708	@ 0x6ac
 8007056:	4618      	mov	r0, r3
 8007058:	f7fe fd00 	bl	8005a5c <_ZN8touchgfx8TextAreaC1Ev>
 800705c:	f507 731a 	add.w	r3, r7, #616	@ 0x268
 8007060:	f5a3 7319 	sub.w	r3, r3, #612	@ 0x264
 8007064:	681b      	ldr	r3, [r3, #0]
 8007066:	f503 63dd 	add.w	r3, r3, #1768	@ 0x6e8
 800706a:	4618      	mov	r0, r3
 800706c:	f7fe fbae 	bl	80057cc <_ZN8touchgfx9ContainerC1Ev>
 8007070:	f507 731a 	add.w	r3, r7, #616	@ 0x268
 8007074:	f5a3 7319 	sub.w	r3, r3, #612	@ 0x264
 8007078:	681b      	ldr	r3, [r3, #0]
 800707a:	f203 7314 	addw	r3, r3, #1812	@ 0x714
 800707e:	4618      	mov	r0, r3
 8007080:	f7fe fc9c 	bl	80059bc <_ZN8touchgfx13BoxWithBorderC1Ev>
 8007084:	f507 731a 	add.w	r3, r7, #616	@ 0x268
 8007088:	f5a3 7319 	sub.w	r3, r3, #612	@ 0x264
 800708c:	681b      	ldr	r3, [r3, #0]
 800708e:	f503 63e9 	add.w	r3, r3, #1864	@ 0x748
 8007092:	4618      	mov	r0, r3
 8007094:	f7fe fc92 	bl	80059bc <_ZN8touchgfx13BoxWithBorderC1Ev>
 8007098:	f507 731a 	add.w	r3, r7, #616	@ 0x268
 800709c:	f5a3 7319 	sub.w	r3, r3, #612	@ 0x264
 80070a0:	681b      	ldr	r3, [r3, #0]
 80070a2:	f203 737c 	addw	r3, r3, #1916	@ 0x77c
 80070a6:	4618      	mov	r0, r3
 80070a8:	f7fe fcd8 	bl	8005a5c <_ZN8touchgfx8TextAreaC1Ev>
 80070ac:	f507 731a 	add.w	r3, r7, #616	@ 0x268
 80070b0:	f5a3 7319 	sub.w	r3, r3, #612	@ 0x264
 80070b4:	681b      	ldr	r3, [r3, #0]
 80070b6:	f503 63f7 	add.w	r3, r3, #1976	@ 0x7b8
 80070ba:	4618      	mov	r0, r3
 80070bc:	f7fe fcce 	bl	8005a5c <_ZN8touchgfx8TextAreaC1Ev>
 80070c0:	f507 731a 	add.w	r3, r7, #616	@ 0x268
 80070c4:	f5a3 7319 	sub.w	r3, r3, #612	@ 0x264
 80070c8:	681b      	ldr	r3, [r3, #0]
 80070ca:	f203 73f4 	addw	r3, r3, #2036	@ 0x7f4
 80070ce:	4618      	mov	r0, r3
 80070d0:	f7fe fb7c 	bl	80057cc <_ZN8touchgfx9ContainerC1Ev>
 80070d4:	f507 731a 	add.w	r3, r7, #616	@ 0x268
 80070d8:	f5a3 7319 	sub.w	r3, r3, #612	@ 0x264
 80070dc:	681b      	ldr	r3, [r3, #0]
 80070de:	f503 6302 	add.w	r3, r3, #2080	@ 0x820
 80070e2:	4618      	mov	r0, r3
 80070e4:	f7fe fc6a 	bl	80059bc <_ZN8touchgfx13BoxWithBorderC1Ev>
 80070e8:	f507 731a 	add.w	r3, r7, #616	@ 0x268
 80070ec:	f5a3 7319 	sub.w	r3, r3, #612	@ 0x264
 80070f0:	681b      	ldr	r3, [r3, #0]
 80070f2:	f603 0354 	addw	r3, r3, #2132	@ 0x854
 80070f6:	4618      	mov	r0, r3
 80070f8:	f7fe fc60 	bl	80059bc <_ZN8touchgfx13BoxWithBorderC1Ev>
 80070fc:	f507 731a 	add.w	r3, r7, #616	@ 0x268
 8007100:	f5a3 7319 	sub.w	r3, r3, #612	@ 0x264
 8007104:	681b      	ldr	r3, [r3, #0]
 8007106:	f603 0388 	addw	r3, r3, #2184	@ 0x888
 800710a:	4618      	mov	r0, r3
 800710c:	f7fe fca6 	bl	8005a5c <_ZN8touchgfx8TextAreaC1Ev>
 8007110:	f507 731a 	add.w	r3, r7, #616	@ 0x268
 8007114:	f5a3 7319 	sub.w	r3, r3, #612	@ 0x264
 8007118:	681b      	ldr	r3, [r3, #0]
 800711a:	f603 03c4 	addw	r3, r3, #2244	@ 0x8c4
 800711e:	4618      	mov	r0, r3
 8007120:	f7fe fc9c 	bl	8005a5c <_ZN8touchgfx8TextAreaC1Ev>
 8007124:	f507 731a 	add.w	r3, r7, #616	@ 0x268
 8007128:	f5a3 7319 	sub.w	r3, r3, #612	@ 0x264
 800712c:	681b      	ldr	r3, [r3, #0]
 800712e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007132:	4618      	mov	r0, r3
 8007134:	f7fe fb4a 	bl	80057cc <_ZN8touchgfx9ContainerC1Ev>
 8007138:	f507 731a 	add.w	r3, r7, #616	@ 0x268
 800713c:	f5a3 7319 	sub.w	r3, r3, #612	@ 0x264
 8007140:	681b      	ldr	r3, [r3, #0]
 8007142:	f603 132c 	addw	r3, r3, #2348	@ 0x92c
 8007146:	4618      	mov	r0, r3
 8007148:	f7fe fc38 	bl	80059bc <_ZN8touchgfx13BoxWithBorderC1Ev>
 800714c:	f507 731a 	add.w	r3, r7, #616	@ 0x268
 8007150:	f5a3 7319 	sub.w	r3, r3, #612	@ 0x264
 8007154:	681b      	ldr	r3, [r3, #0]
 8007156:	f503 6316 	add.w	r3, r3, #2400	@ 0x960
 800715a:	4618      	mov	r0, r3
 800715c:	f7fe fc7e 	bl	8005a5c <_ZN8touchgfx8TextAreaC1Ev>
 8007160:	f507 731a 	add.w	r3, r7, #616	@ 0x268
 8007164:	f5a3 7319 	sub.w	r3, r3, #612	@ 0x264
 8007168:	681b      	ldr	r3, [r3, #0]
 800716a:	f603 149c 	addw	r4, r3, #2460	@ 0x99c
 800716e:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 8007172:	f64f 71ff 	movw	r1, #65535	@ 0xffff
 8007176:	4618      	mov	r0, r3
 8007178:	f7fe fb08 	bl	800578c <_ZN8touchgfx6BitmapC1Et>
 800717c:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 8007180:	4619      	mov	r1, r3
 8007182:	4620      	mov	r0, r4
 8007184:	f7fe fbd2 	bl	800592c <_ZN8touchgfx5ImageC1ERKNS_6BitmapE>
 8007188:	f507 731a 	add.w	r3, r7, #616	@ 0x268
 800718c:	f5a3 7319 	sub.w	r3, r3, #612	@ 0x264
 8007190:	681b      	ldr	r3, [r3, #0]
 8007192:	f603 14c8 	addw	r4, r3, #2504	@ 0x9c8
 8007196:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 800719a:	f64f 71ff 	movw	r1, #65535	@ 0xffff
 800719e:	4618      	mov	r0, r3
 80071a0:	f7fe faf4 	bl	800578c <_ZN8touchgfx6BitmapC1Et>
 80071a4:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 80071a8:	4619      	mov	r1, r3
 80071aa:	4620      	mov	r0, r4
 80071ac:	f7fe fbbe 	bl	800592c <_ZN8touchgfx5ImageC1ERKNS_6BitmapE>
 80071b0:	f507 731a 	add.w	r3, r7, #616	@ 0x268
 80071b4:	f5a3 7319 	sub.w	r3, r3, #612	@ 0x264
 80071b8:	681b      	ldr	r3, [r3, #0]
 80071ba:	f603 13f4 	addw	r3, r3, #2548	@ 0x9f4
 80071be:	4618      	mov	r0, r3
 80071c0:	f7fe fcdc 	bl	8005b7c <_ZN8touchgfx6ButtonC1Ev>
 80071c4:	f507 731a 	add.w	r3, r7, #616	@ 0x268
 80071c8:	f5a3 7319 	sub.w	r3, r3, #612	@ 0x264
 80071cc:	681b      	ldr	r3, [r3, #0]
 80071ce:	f603 2328 	addw	r3, r3, #2600	@ 0xa28
 80071d2:	4618      	mov	r0, r3
 80071d4:	e002      	b.n	80071dc <_ZN12MainViewBaseC1Ev+0x3c4>
 80071d6:	bf00      	nop
 80071d8:	0802d3cc 	.word	0x0802d3cc
 80071dc:	f7fe fcce 	bl	8005b7c <_ZN8touchgfx6ButtonC1Ev>
 80071e0:	f507 731a 	add.w	r3, r7, #616	@ 0x268
 80071e4:	f5a3 7319 	sub.w	r3, r3, #612	@ 0x264
 80071e8:	681b      	ldr	r3, [r3, #0]
 80071ea:	f603 235c 	addw	r3, r3, #2652	@ 0xa5c
 80071ee:	4618      	mov	r0, r3
 80071f0:	f7fe faec 	bl	80057cc <_ZN8touchgfx9ContainerC1Ev>
 80071f4:	f507 731a 	add.w	r3, r7, #616	@ 0x268
 80071f8:	f5a3 7319 	sub.w	r3, r3, #612	@ 0x264
 80071fc:	681b      	ldr	r3, [r3, #0]
 80071fe:	f603 2388 	addw	r3, r3, #2696	@ 0xa88
 8007202:	4618      	mov	r0, r3
 8007204:	f7fe fbda 	bl	80059bc <_ZN8touchgfx13BoxWithBorderC1Ev>
 8007208:	f507 731a 	add.w	r3, r7, #616	@ 0x268
 800720c:	f5a3 7319 	sub.w	r3, r3, #612	@ 0x264
 8007210:	681b      	ldr	r3, [r3, #0]
 8007212:	f603 23bc 	addw	r3, r3, #2748	@ 0xabc
 8007216:	4618      	mov	r0, r3
 8007218:	f7fe fc20 	bl	8005a5c <_ZN8touchgfx8TextAreaC1Ev>
    buttonCallback(this, &MainViewBase::buttonCallbackHandler),
 800721c:	f507 731a 	add.w	r3, r7, #616	@ 0x268
 8007220:	f5a3 7319 	sub.w	r3, r3, #612	@ 0x264
 8007224:	681b      	ldr	r3, [r3, #0]
 8007226:	f603 20f8 	addw	r0, r3, #2808	@ 0xaf8
 800722a:	f507 731a 	add.w	r3, r7, #616	@ 0x268
 800722e:	f5a3 730b 	sub.w	r3, r3, #556	@ 0x22c
 8007232:	4ae9      	ldr	r2, [pc, #932]	@ (80075d8 <_ZN12MainViewBaseC1Ev+0x7c0>)
 8007234:	601a      	str	r2, [r3, #0]
 8007236:	f507 731a 	add.w	r3, r7, #616	@ 0x268
 800723a:	f5a3 730b 	sub.w	r3, r3, #556	@ 0x22c
 800723e:	2200      	movs	r2, #0
 8007240:	605a      	str	r2, [r3, #4]
 8007242:	f507 731a 	add.w	r3, r7, #616	@ 0x268
 8007246:	f5a3 730b 	sub.w	r3, r3, #556	@ 0x22c
 800724a:	f507 721a 	add.w	r2, r7, #616	@ 0x268
 800724e:	f5a2 7119 	sub.w	r1, r2, #612	@ 0x264
 8007252:	cb0c      	ldmia	r3, {r2, r3}
 8007254:	6809      	ldr	r1, [r1, #0]
 8007256:	f002 f95b 	bl	8009510 <_ZN8touchgfx8CallbackI12MainViewBaseRKNS_14AbstractButtonEvvEC1EPS1_MS1_FvS4_E>
    sliderValueChangedCallback(this, &MainViewBase::sliderValueChangedCallbackHandler)
 800725a:	f507 731a 	add.w	r3, r7, #616	@ 0x268
 800725e:	f5a3 7319 	sub.w	r3, r3, #612	@ 0x264
 8007262:	681b      	ldr	r3, [r3, #0]
 8007264:	f603 3008 	addw	r0, r3, #2824	@ 0xb08
 8007268:	f507 731a 	add.w	r3, r7, #616	@ 0x268
 800726c:	f5a3 7309 	sub.w	r3, r3, #548	@ 0x224
 8007270:	4ada      	ldr	r2, [pc, #872]	@ (80075dc <_ZN12MainViewBaseC1Ev+0x7c4>)
 8007272:	601a      	str	r2, [r3, #0]
 8007274:	f507 731a 	add.w	r3, r7, #616	@ 0x268
 8007278:	f5a3 7309 	sub.w	r3, r3, #548	@ 0x224
 800727c:	2200      	movs	r2, #0
 800727e:	605a      	str	r2, [r3, #4]
 8007280:	f507 731a 	add.w	r3, r7, #616	@ 0x268
 8007284:	f5a3 7309 	sub.w	r3, r3, #548	@ 0x224
 8007288:	f507 721a 	add.w	r2, r7, #616	@ 0x268
 800728c:	f5a2 7119 	sub.w	r1, r2, #612	@ 0x264
 8007290:	cb0c      	ldmia	r3, {r2, r3}
 8007292:	6809      	ldr	r1, [r1, #0]
 8007294:	f002 f96c 	bl	8009570 <_ZN8touchgfx8CallbackI12MainViewBaseRKNS_6SliderEivEC1EPS1_MS1_FvS4_iE>
{

    __background.setPosition(0, 0, 480, 272);
 8007298:	f507 731a 	add.w	r3, r7, #616	@ 0x268
 800729c:	f5a3 7319 	sub.w	r3, r3, #612	@ 0x264
 80072a0:	681b      	ldr	r3, [r3, #0]
 80072a2:	f103 0040 	add.w	r0, r3, #64	@ 0x40
 80072a6:	f44f 7388 	mov.w	r3, #272	@ 0x110
 80072aa:	9300      	str	r3, [sp, #0]
 80072ac:	f44f 73f0 	mov.w	r3, #480	@ 0x1e0
 80072b0:	2200      	movs	r2, #0
 80072b2:	2100      	movs	r1, #0
 80072b4:	f7fc fe05 	bl	8003ec2 <_ZN8touchgfx8Drawable11setPositionEssss>
    __background.setColor(touchgfx::Color::getColorFromRGB(0, 0, 0));
 80072b8:	f507 731a 	add.w	r3, r7, #616	@ 0x268
 80072bc:	f5a3 7319 	sub.w	r3, r3, #612	@ 0x264
 80072c0:	681b      	ldr	r3, [r3, #0]
 80072c2:	f103 0440 	add.w	r4, r3, #64	@ 0x40
 80072c6:	2300      	movs	r3, #0
 80072c8:	f887 3176 	strb.w	r3, [r7, #374]	@ 0x176
 80072cc:	2300      	movs	r3, #0
 80072ce:	f887 3175 	strb.w	r3, [r7, #373]	@ 0x175
 80072d2:	2300      	movs	r3, #0
 80072d4:	f887 3174 	strb.w	r3, [r7, #372]	@ 0x174
 80072d8:	f897 3176 	ldrb.w	r3, [r7, #374]	@ 0x176
 80072dc:	041a      	lsls	r2, r3, #16
 80072de:	f897 3175 	ldrb.w	r3, [r7, #373]	@ 0x175
 80072e2:	021b      	lsls	r3, r3, #8
 80072e4:	431a      	orrs	r2, r3
 80072e6:	f897 3174 	ldrb.w	r3, [r7, #372]	@ 0x174
 80072ea:	4313      	orrs	r3, r2
 80072ec:	f043 427f 	orr.w	r2, r3, #4278190080	@ 0xff000000
 80072f0:	f507 73b8 	add.w	r3, r7, #368	@ 0x170
 80072f4:	4611      	mov	r1, r2
 80072f6:	4618      	mov	r0, r3
 80072f8:	f7fe fa39 	bl	800576e <_ZN8touchgfx9colortypeC1Em>
 80072fc:	f8d7 3170 	ldr.w	r3, [r7, #368]	@ 0x170
 8007300:	4619      	mov	r1, r3
 8007302:	4620      	mov	r0, r4
 8007304:	f7fe fb04 	bl	8005910 <_ZN8touchgfx3Box8setColorENS_9colortypeE>

    Main_Background.setXY(0, 0);
 8007308:	f507 731a 	add.w	r3, r7, #616	@ 0x268
 800730c:	f5a3 7319 	sub.w	r3, r3, #612	@ 0x264
 8007310:	681b      	ldr	r3, [r3, #0]
 8007312:	336c      	adds	r3, #108	@ 0x6c
 8007314:	2200      	movs	r2, #0
 8007316:	2100      	movs	r1, #0
 8007318:	4618      	mov	r0, r3
 800731a:	f7fc fe2b 	bl	8003f74 <_ZN8touchgfx8Drawable5setXYEss>
    Main_Background.setBitmap(touchgfx::Bitmap(BITMAP_BACKGROUND_1_ID));
 800731e:	f507 731a 	add.w	r3, r7, #616	@ 0x268
 8007322:	f5a3 7319 	sub.w	r3, r3, #612	@ 0x264
 8007326:	681b      	ldr	r3, [r3, #0]
 8007328:	f103 046c 	add.w	r4, r3, #108	@ 0x6c
 800732c:	f107 034c 	add.w	r3, r7, #76	@ 0x4c
 8007330:	2100      	movs	r1, #0
 8007332:	4618      	mov	r0, r3
 8007334:	f7fe fa2a 	bl	800578c <_ZN8touchgfx6BitmapC1Et>
 8007338:	f107 034c 	add.w	r3, r7, #76	@ 0x4c
 800733c:	4619      	mov	r1, r3
 800733e:	4620      	mov	r0, r4
 8007340:	f012 fe03 	bl	8019f4a <_ZN8touchgfx5Image9setBitmapERKNS_6BitmapE>

    Button_Panel.setPosition(10, 94, 460, 170);
 8007344:	f507 731a 	add.w	r3, r7, #616	@ 0x268
 8007348:	f5a3 7319 	sub.w	r3, r3, #612	@ 0x264
 800734c:	681b      	ldr	r3, [r3, #0]
 800734e:	f103 0098 	add.w	r0, r3, #152	@ 0x98
 8007352:	23aa      	movs	r3, #170	@ 0xaa
 8007354:	9300      	str	r3, [sp, #0]
 8007356:	f44f 73e6 	mov.w	r3, #460	@ 0x1cc
 800735a:	225e      	movs	r2, #94	@ 0x5e
 800735c:	210a      	movs	r1, #10
 800735e:	f7fc fdb0 	bl	8003ec2 <_ZN8touchgfx8Drawable11setPositionEssss>

    Button_Panel_Background.setPosition(0, 18, 460, 153);
 8007362:	f507 731a 	add.w	r3, r7, #616	@ 0x268
 8007366:	f5a3 7319 	sub.w	r3, r3, #612	@ 0x264
 800736a:	681b      	ldr	r3, [r3, #0]
 800736c:	f103 00c4 	add.w	r0, r3, #196	@ 0xc4
 8007370:	2399      	movs	r3, #153	@ 0x99
 8007372:	9300      	str	r3, [sp, #0]
 8007374:	f44f 73e6 	mov.w	r3, #460	@ 0x1cc
 8007378:	2212      	movs	r2, #18
 800737a:	2100      	movs	r1, #0
 800737c:	f7fc fda1 	bl	8003ec2 <_ZN8touchgfx8Drawable11setPositionEssss>
    Button_Panel_Background.setColor(touchgfx::Color::getColorFromRGB(78, 137, 174));
 8007380:	f507 731a 	add.w	r3, r7, #616	@ 0x268
 8007384:	f5a3 7319 	sub.w	r3, r3, #612	@ 0x264
 8007388:	681b      	ldr	r3, [r3, #0]
 800738a:	f103 04c4 	add.w	r4, r3, #196	@ 0xc4
 800738e:	234e      	movs	r3, #78	@ 0x4e
 8007390:	f887 3179 	strb.w	r3, [r7, #377]	@ 0x179
 8007394:	2389      	movs	r3, #137	@ 0x89
 8007396:	f887 3178 	strb.w	r3, [r7, #376]	@ 0x178
 800739a:	23ae      	movs	r3, #174	@ 0xae
 800739c:	f887 3177 	strb.w	r3, [r7, #375]	@ 0x177
 80073a0:	f897 3179 	ldrb.w	r3, [r7, #377]	@ 0x179
 80073a4:	041a      	lsls	r2, r3, #16
 80073a6:	f897 3178 	ldrb.w	r3, [r7, #376]	@ 0x178
 80073aa:	021b      	lsls	r3, r3, #8
 80073ac:	431a      	orrs	r2, r3
 80073ae:	f897 3177 	ldrb.w	r3, [r7, #375]	@ 0x177
 80073b2:	4313      	orrs	r3, r2
 80073b4:	f043 427f 	orr.w	r2, r3, #4278190080	@ 0xff000000
 80073b8:	f507 73b6 	add.w	r3, r7, #364	@ 0x16c
 80073bc:	4611      	mov	r1, r2
 80073be:	4618      	mov	r0, r3
 80073c0:	f7fe f9d5 	bl	800576e <_ZN8touchgfx9colortypeC1Em>
 80073c4:	f8d7 316c 	ldr.w	r3, [r7, #364]	@ 0x16c
 80073c8:	4619      	mov	r1, r3
 80073ca:	4620      	mov	r0, r4
 80073cc:	f7fe faa0 	bl	8005910 <_ZN8touchgfx3Box8setColorENS_9colortypeE>
    Button_Panel_Background.setBorderColor(touchgfx::Color::getColorFromRGB(237, 102, 99));
 80073d0:	f507 731a 	add.w	r3, r7, #616	@ 0x268
 80073d4:	f5a3 7319 	sub.w	r3, r3, #612	@ 0x264
 80073d8:	681b      	ldr	r3, [r3, #0]
 80073da:	f103 04c4 	add.w	r4, r3, #196	@ 0xc4
 80073de:	23ed      	movs	r3, #237	@ 0xed
 80073e0:	f887 317c 	strb.w	r3, [r7, #380]	@ 0x17c
 80073e4:	2366      	movs	r3, #102	@ 0x66
 80073e6:	f887 317b 	strb.w	r3, [r7, #379]	@ 0x17b
 80073ea:	2363      	movs	r3, #99	@ 0x63
 80073ec:	f887 317a 	strb.w	r3, [r7, #378]	@ 0x17a
 80073f0:	f897 317c 	ldrb.w	r3, [r7, #380]	@ 0x17c
 80073f4:	041a      	lsls	r2, r3, #16
 80073f6:	f897 317b 	ldrb.w	r3, [r7, #379]	@ 0x17b
 80073fa:	021b      	lsls	r3, r3, #8
 80073fc:	431a      	orrs	r2, r3
 80073fe:	f897 317a 	ldrb.w	r3, [r7, #378]	@ 0x17a
 8007402:	4313      	orrs	r3, r2
 8007404:	f043 427f 	orr.w	r2, r3, #4278190080	@ 0xff000000
 8007408:	f507 73b4 	add.w	r3, r7, #360	@ 0x168
 800740c:	4611      	mov	r1, r2
 800740e:	4618      	mov	r0, r3
 8007410:	f7fe f9ad 	bl	800576e <_ZN8touchgfx9colortypeC1Em>
 8007414:	f507 731a 	add.w	r3, r7, #616	@ 0x268
 8007418:	f5a3 7380 	sub.w	r3, r3, #256	@ 0x100
 800741c:	681b      	ldr	r3, [r3, #0]
 800741e:	4619      	mov	r1, r3
 8007420:	4620      	mov	r0, r4
 8007422:	f7fe fae7 	bl	80059f4 <_ZN8touchgfx13BoxWithBorder14setBorderColorENS_9colortypeE>
    Button_Panel_Background.setBorderSize(5);
 8007426:	f507 731a 	add.w	r3, r7, #616	@ 0x268
 800742a:	f5a3 7319 	sub.w	r3, r3, #612	@ 0x264
 800742e:	681b      	ldr	r3, [r3, #0]
 8007430:	33c4      	adds	r3, #196	@ 0xc4
 8007432:	2105      	movs	r1, #5
 8007434:	4618      	mov	r0, r3
 8007436:	f7fe faeb 	bl	8005a10 <_ZN8touchgfx13BoxWithBorder13setBorderSizeEt>
    Button_Panel.add(Button_Panel_Background);
 800743a:	f507 731a 	add.w	r3, r7, #616	@ 0x268
 800743e:	f5a3 7319 	sub.w	r3, r3, #612	@ 0x264
 8007442:	681b      	ldr	r3, [r3, #0]
 8007444:	f103 0298 	add.w	r2, r3, #152	@ 0x98
 8007448:	f507 731a 	add.w	r3, r7, #616	@ 0x268
 800744c:	f5a3 7319 	sub.w	r3, r3, #612	@ 0x264
 8007450:	681b      	ldr	r3, [r3, #0]
 8007452:	33c4      	adds	r3, #196	@ 0xc4
 8007454:	4619      	mov	r1, r3
 8007456:	4610      	mov	r0, r2
 8007458:	f010 fbd2 	bl	8017c00 <_ZN8touchgfx9Container3addERNS_8DrawableE>

    Voice_Comm_Panel.setPosition(5, 84, 450, 82);
 800745c:	f507 731a 	add.w	r3, r7, #616	@ 0x268
 8007460:	f5a3 7319 	sub.w	r3, r3, #612	@ 0x264
 8007464:	681b      	ldr	r3, [r3, #0]
 8007466:	f103 00f8 	add.w	r0, r3, #248	@ 0xf8
 800746a:	2352      	movs	r3, #82	@ 0x52
 800746c:	9300      	str	r3, [sp, #0]
 800746e:	f44f 73e1 	mov.w	r3, #450	@ 0x1c2
 8007472:	2254      	movs	r2, #84	@ 0x54
 8007474:	2105      	movs	r1, #5
 8007476:	f7fc fd24 	bl	8003ec2 <_ZN8touchgfx8Drawable11setPositionEssss>

    Voice_Comm_Background.setPosition(0, 0, 450, 82);
 800747a:	f507 731a 	add.w	r3, r7, #616	@ 0x268
 800747e:	f5a3 7319 	sub.w	r3, r3, #612	@ 0x264
 8007482:	681b      	ldr	r3, [r3, #0]
 8007484:	f503 7092 	add.w	r0, r3, #292	@ 0x124
 8007488:	2352      	movs	r3, #82	@ 0x52
 800748a:	9300      	str	r3, [sp, #0]
 800748c:	f44f 73e1 	mov.w	r3, #450	@ 0x1c2
 8007490:	2200      	movs	r2, #0
 8007492:	2100      	movs	r1, #0
 8007494:	f7fc fd15 	bl	8003ec2 <_ZN8touchgfx8Drawable11setPositionEssss>
    Voice_Comm_Background.setColor(touchgfx::Color::getColorFromRGB(67, 101, 139));
 8007498:	f507 731a 	add.w	r3, r7, #616	@ 0x268
 800749c:	f5a3 7319 	sub.w	r3, r3, #612	@ 0x264
 80074a0:	681b      	ldr	r3, [r3, #0]
 80074a2:	f503 7492 	add.w	r4, r3, #292	@ 0x124
 80074a6:	2343      	movs	r3, #67	@ 0x43
 80074a8:	f887 317f 	strb.w	r3, [r7, #383]	@ 0x17f
 80074ac:	2365      	movs	r3, #101	@ 0x65
 80074ae:	f887 317e 	strb.w	r3, [r7, #382]	@ 0x17e
 80074b2:	238b      	movs	r3, #139	@ 0x8b
 80074b4:	f887 317d 	strb.w	r3, [r7, #381]	@ 0x17d
 80074b8:	f897 317f 	ldrb.w	r3, [r7, #383]	@ 0x17f
 80074bc:	041a      	lsls	r2, r3, #16
 80074be:	f897 317e 	ldrb.w	r3, [r7, #382]	@ 0x17e
 80074c2:	021b      	lsls	r3, r3, #8
 80074c4:	431a      	orrs	r2, r3
 80074c6:	f897 317d 	ldrb.w	r3, [r7, #381]	@ 0x17d
 80074ca:	4313      	orrs	r3, r2
 80074cc:	f043 427f 	orr.w	r2, r3, #4278190080	@ 0xff000000
 80074d0:	f507 73b2 	add.w	r3, r7, #356	@ 0x164
 80074d4:	4611      	mov	r1, r2
 80074d6:	4618      	mov	r0, r3
 80074d8:	f7fe f949 	bl	800576e <_ZN8touchgfx9colortypeC1Em>
 80074dc:	f507 731a 	add.w	r3, r7, #616	@ 0x268
 80074e0:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80074e4:	681b      	ldr	r3, [r3, #0]
 80074e6:	4619      	mov	r1, r3
 80074e8:	4620      	mov	r0, r4
 80074ea:	f7fe fa11 	bl	8005910 <_ZN8touchgfx3Box8setColorENS_9colortypeE>
    Voice_Comm_Background.setBorderColor(touchgfx::Color::getColorFromRGB(0, 0, 0));
 80074ee:	f507 731a 	add.w	r3, r7, #616	@ 0x268
 80074f2:	f5a3 7319 	sub.w	r3, r3, #612	@ 0x264
 80074f6:	681b      	ldr	r3, [r3, #0]
 80074f8:	f503 7492 	add.w	r4, r3, #292	@ 0x124
 80074fc:	2300      	movs	r3, #0
 80074fe:	f887 3182 	strb.w	r3, [r7, #386]	@ 0x182
 8007502:	2300      	movs	r3, #0
 8007504:	f887 3181 	strb.w	r3, [r7, #385]	@ 0x181
 8007508:	2300      	movs	r3, #0
 800750a:	f887 3180 	strb.w	r3, [r7, #384]	@ 0x180
 800750e:	f897 3182 	ldrb.w	r3, [r7, #386]	@ 0x182
 8007512:	041a      	lsls	r2, r3, #16
 8007514:	f897 3181 	ldrb.w	r3, [r7, #385]	@ 0x181
 8007518:	021b      	lsls	r3, r3, #8
 800751a:	431a      	orrs	r2, r3
 800751c:	f897 3180 	ldrb.w	r3, [r7, #384]	@ 0x180
 8007520:	4313      	orrs	r3, r2
 8007522:	f043 427f 	orr.w	r2, r3, #4278190080	@ 0xff000000
 8007526:	f507 73b0 	add.w	r3, r7, #352	@ 0x160
 800752a:	4611      	mov	r1, r2
 800752c:	4618      	mov	r0, r3
 800752e:	f7fe f91e 	bl	800576e <_ZN8touchgfx9colortypeC1Em>
 8007532:	f507 731a 	add.w	r3, r7, #616	@ 0x268
 8007536:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800753a:	681b      	ldr	r3, [r3, #0]
 800753c:	4619      	mov	r1, r3
 800753e:	4620      	mov	r0, r4
 8007540:	f7fe fa58 	bl	80059f4 <_ZN8touchgfx13BoxWithBorder14setBorderColorENS_9colortypeE>
    Voice_Comm_Background.setBorderSize(2);
 8007544:	f507 731a 	add.w	r3, r7, #616	@ 0x268
 8007548:	f5a3 7319 	sub.w	r3, r3, #612	@ 0x264
 800754c:	681b      	ldr	r3, [r3, #0]
 800754e:	f503 7392 	add.w	r3, r3, #292	@ 0x124
 8007552:	2102      	movs	r1, #2
 8007554:	4618      	mov	r0, r3
 8007556:	f7fe fa5b 	bl	8005a10 <_ZN8touchgfx13BoxWithBorder13setBorderSizeEt>
    Voice_Comm_Panel.add(Voice_Comm_Background);
 800755a:	f507 731a 	add.w	r3, r7, #616	@ 0x268
 800755e:	f5a3 7319 	sub.w	r3, r3, #612	@ 0x264
 8007562:	681b      	ldr	r3, [r3, #0]
 8007564:	f103 02f8 	add.w	r2, r3, #248	@ 0xf8
 8007568:	f507 731a 	add.w	r3, r7, #616	@ 0x268
 800756c:	f5a3 7319 	sub.w	r3, r3, #612	@ 0x264
 8007570:	681b      	ldr	r3, [r3, #0]
 8007572:	f503 7392 	add.w	r3, r3, #292	@ 0x124
 8007576:	4619      	mov	r1, r3
 8007578:	4610      	mov	r0, r2
 800757a:	f010 fb41 	bl	8017c00 <_ZN8touchgfx9Container3addERNS_8DrawableE>

    Voicecomm_Textbox.setPosition(157, 0, 137, 20);
 800757e:	f507 731a 	add.w	r3, r7, #616	@ 0x268
 8007582:	f5a3 7319 	sub.w	r3, r3, #612	@ 0x264
 8007586:	681b      	ldr	r3, [r3, #0]
 8007588:	f503 70ac 	add.w	r0, r3, #344	@ 0x158
 800758c:	2314      	movs	r3, #20
 800758e:	9300      	str	r3, [sp, #0]
 8007590:	2389      	movs	r3, #137	@ 0x89
 8007592:	2200      	movs	r2, #0
 8007594:	219d      	movs	r1, #157	@ 0x9d
 8007596:	f7fc fc94 	bl	8003ec2 <_ZN8touchgfx8Drawable11setPositionEssss>

    Voicecomm_Border.setPosition(-1, 3, 138, 17);
 800759a:	f507 731a 	add.w	r3, r7, #616	@ 0x268
 800759e:	f5a3 7319 	sub.w	r3, r3, #612	@ 0x264
 80075a2:	681b      	ldr	r3, [r3, #0]
 80075a4:	f503 70c2 	add.w	r0, r3, #388	@ 0x184
 80075a8:	2311      	movs	r3, #17
 80075aa:	9300      	str	r3, [sp, #0]
 80075ac:	238a      	movs	r3, #138	@ 0x8a
 80075ae:	2203      	movs	r2, #3
 80075b0:	f04f 31ff 	mov.w	r1, #4294967295
 80075b4:	f7fc fc85 	bl	8003ec2 <_ZN8touchgfx8Drawable11setPositionEssss>
    Voicecomm_Border.setColor(touchgfx::Color::getColorFromRGB(0, 0, 0));
 80075b8:	f507 731a 	add.w	r3, r7, #616	@ 0x268
 80075bc:	f5a3 7319 	sub.w	r3, r3, #612	@ 0x264
 80075c0:	681b      	ldr	r3, [r3, #0]
 80075c2:	f503 74c2 	add.w	r4, r3, #388	@ 0x184
 80075c6:	2300      	movs	r3, #0
 80075c8:	f887 3185 	strb.w	r3, [r7, #389]	@ 0x185
 80075cc:	2300      	movs	r3, #0
 80075ce:	f887 3184 	strb.w	r3, [r7, #388]	@ 0x184
 80075d2:	2300      	movs	r3, #0
 80075d4:	e004      	b.n	80075e0 <_ZN12MainViewBaseC1Ev+0x7c8>
 80075d6:	bf00      	nop
 80075d8:	08009455 	.word	0x08009455
 80075dc:	080094b5 	.word	0x080094b5
 80075e0:	f887 3183 	strb.w	r3, [r7, #387]	@ 0x183
 80075e4:	f897 3185 	ldrb.w	r3, [r7, #389]	@ 0x185
 80075e8:	041a      	lsls	r2, r3, #16
 80075ea:	f897 3184 	ldrb.w	r3, [r7, #388]	@ 0x184
 80075ee:	021b      	lsls	r3, r3, #8
 80075f0:	431a      	orrs	r2, r3
 80075f2:	f897 3183 	ldrb.w	r3, [r7, #387]	@ 0x183
 80075f6:	4313      	orrs	r3, r2
 80075f8:	f043 427f 	orr.w	r2, r3, #4278190080	@ 0xff000000
 80075fc:	f507 73ae 	add.w	r3, r7, #348	@ 0x15c
 8007600:	4611      	mov	r1, r2
 8007602:	4618      	mov	r0, r3
 8007604:	f7fe f8b3 	bl	800576e <_ZN8touchgfx9colortypeC1Em>
 8007608:	f507 731a 	add.w	r3, r7, #616	@ 0x268
 800760c:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8007610:	681b      	ldr	r3, [r3, #0]
 8007612:	4619      	mov	r1, r3
 8007614:	4620      	mov	r0, r4
 8007616:	f7fe f97b 	bl	8005910 <_ZN8touchgfx3Box8setColorENS_9colortypeE>
    Voicecomm_Border.setBorderColor(touchgfx::Color::getColorFromRGB(237, 102, 99));
 800761a:	f507 731a 	add.w	r3, r7, #616	@ 0x268
 800761e:	f5a3 7319 	sub.w	r3, r3, #612	@ 0x264
 8007622:	681b      	ldr	r3, [r3, #0]
 8007624:	f503 74c2 	add.w	r4, r3, #388	@ 0x184
 8007628:	23ed      	movs	r3, #237	@ 0xed
 800762a:	f887 3188 	strb.w	r3, [r7, #392]	@ 0x188
 800762e:	2366      	movs	r3, #102	@ 0x66
 8007630:	f887 3187 	strb.w	r3, [r7, #391]	@ 0x187
 8007634:	2363      	movs	r3, #99	@ 0x63
 8007636:	f887 3186 	strb.w	r3, [r7, #390]	@ 0x186
 800763a:	f897 3188 	ldrb.w	r3, [r7, #392]	@ 0x188
 800763e:	041a      	lsls	r2, r3, #16
 8007640:	f897 3187 	ldrb.w	r3, [r7, #391]	@ 0x187
 8007644:	021b      	lsls	r3, r3, #8
 8007646:	431a      	orrs	r2, r3
 8007648:	f897 3186 	ldrb.w	r3, [r7, #390]	@ 0x186
 800764c:	4313      	orrs	r3, r2
 800764e:	f043 427f 	orr.w	r2, r3, #4278190080	@ 0xff000000
 8007652:	f507 73ac 	add.w	r3, r7, #344	@ 0x158
 8007656:	4611      	mov	r1, r2
 8007658:	4618      	mov	r0, r3
 800765a:	f7fe f888 	bl	800576e <_ZN8touchgfx9colortypeC1Em>
 800765e:	f507 731a 	add.w	r3, r7, #616	@ 0x268
 8007662:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 8007666:	681b      	ldr	r3, [r3, #0]
 8007668:	4619      	mov	r1, r3
 800766a:	4620      	mov	r0, r4
 800766c:	f7fe f9c2 	bl	80059f4 <_ZN8touchgfx13BoxWithBorder14setBorderColorENS_9colortypeE>
    Voicecomm_Border.setBorderSize(3);
 8007670:	f507 731a 	add.w	r3, r7, #616	@ 0x268
 8007674:	f5a3 7319 	sub.w	r3, r3, #612	@ 0x264
 8007678:	681b      	ldr	r3, [r3, #0]
 800767a:	f503 73c2 	add.w	r3, r3, #388	@ 0x184
 800767e:	2103      	movs	r1, #3
 8007680:	4618      	mov	r0, r3
 8007682:	f7fe f9c5 	bl	8005a10 <_ZN8touchgfx13BoxWithBorder13setBorderSizeEt>
    Voicecomm_Textbox.add(Voicecomm_Border);
 8007686:	f507 731a 	add.w	r3, r7, #616	@ 0x268
 800768a:	f5a3 7319 	sub.w	r3, r3, #612	@ 0x264
 800768e:	681b      	ldr	r3, [r3, #0]
 8007690:	f503 72ac 	add.w	r2, r3, #344	@ 0x158
 8007694:	f507 731a 	add.w	r3, r7, #616	@ 0x268
 8007698:	f5a3 7319 	sub.w	r3, r3, #612	@ 0x264
 800769c:	681b      	ldr	r3, [r3, #0]
 800769e:	f503 73c2 	add.w	r3, r3, #388	@ 0x184
 80076a2:	4619      	mov	r1, r3
 80076a4:	4610      	mov	r0, r2
 80076a6:	f010 faab 	bl	8017c00 <_ZN8touchgfx9Container3addERNS_8DrawableE>

    Voicecomm_Text.setXY(7, 5);
 80076aa:	f507 731a 	add.w	r3, r7, #616	@ 0x268
 80076ae:	f5a3 7319 	sub.w	r3, r3, #612	@ 0x264
 80076b2:	681b      	ldr	r3, [r3, #0]
 80076b4:	f503 73dc 	add.w	r3, r3, #440	@ 0x1b8
 80076b8:	2205      	movs	r2, #5
 80076ba:	2107      	movs	r1, #7
 80076bc:	4618      	mov	r0, r3
 80076be:	f7fc fc59 	bl	8003f74 <_ZN8touchgfx8Drawable5setXYEss>
    Voicecomm_Text.setColor(touchgfx::Color::getColorFromRGB(255, 255, 255));
 80076c2:	f507 731a 	add.w	r3, r7, #616	@ 0x268
 80076c6:	f5a3 7319 	sub.w	r3, r3, #612	@ 0x264
 80076ca:	681b      	ldr	r3, [r3, #0]
 80076cc:	f503 74dc 	add.w	r4, r3, #440	@ 0x1b8
 80076d0:	23ff      	movs	r3, #255	@ 0xff
 80076d2:	f887 318b 	strb.w	r3, [r7, #395]	@ 0x18b
 80076d6:	23ff      	movs	r3, #255	@ 0xff
 80076d8:	f887 318a 	strb.w	r3, [r7, #394]	@ 0x18a
 80076dc:	23ff      	movs	r3, #255	@ 0xff
 80076de:	f887 3189 	strb.w	r3, [r7, #393]	@ 0x189
 80076e2:	f897 318b 	ldrb.w	r3, [r7, #395]	@ 0x18b
 80076e6:	041a      	lsls	r2, r3, #16
 80076e8:	f897 318a 	ldrb.w	r3, [r7, #394]	@ 0x18a
 80076ec:	021b      	lsls	r3, r3, #8
 80076ee:	431a      	orrs	r2, r3
 80076f0:	f897 3189 	ldrb.w	r3, [r7, #393]	@ 0x189
 80076f4:	4313      	orrs	r3, r2
 80076f6:	f043 427f 	orr.w	r2, r3, #4278190080	@ 0xff000000
 80076fa:	f507 73aa 	add.w	r3, r7, #340	@ 0x154
 80076fe:	4611      	mov	r1, r2
 8007700:	4618      	mov	r0, r3
 8007702:	f7fe f834 	bl	800576e <_ZN8touchgfx9colortypeC1Em>
 8007706:	f507 731a 	add.w	r3, r7, #616	@ 0x268
 800770a:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 800770e:	681b      	ldr	r3, [r3, #0]
 8007710:	461a      	mov	r2, r3
 8007712:	f8c7 418c 	str.w	r4, [r7, #396]	@ 0x18c
 8007716:	f507 731a 	add.w	r3, r7, #616	@ 0x268
 800771a:	f5a3 730f 	sub.w	r3, r3, #572	@ 0x23c
 800771e:	601a      	str	r2, [r3, #0]
        this->color = color;
 8007720:	f8d7 318c 	ldr.w	r3, [r7, #396]	@ 0x18c
 8007724:	f507 721a 	add.w	r2, r7, #616	@ 0x268
 8007728:	f5a2 720f 	sub.w	r2, r2, #572	@ 0x23c
 800772c:	6812      	ldr	r2, [r2, #0]
 800772e:	631a      	str	r2, [r3, #48]	@ 0x30
    }
 8007730:	bf00      	nop
    Voicecomm_Text.setLinespacing(0);
 8007732:	f507 731a 	add.w	r3, r7, #616	@ 0x268
 8007736:	f5a3 7319 	sub.w	r3, r3, #612	@ 0x264
 800773a:	681b      	ldr	r3, [r3, #0]
 800773c:	f503 73dc 	add.w	r3, r3, #440	@ 0x1b8
 8007740:	f8c7 3194 	str.w	r3, [r7, #404]	@ 0x194
 8007744:	2300      	movs	r3, #0
 8007746:	f8a7 3192 	strh.w	r3, [r7, #402]	@ 0x192
        linespace = space;
 800774a:	f8d7 3194 	ldr.w	r3, [r7, #404]	@ 0x194
 800774e:	f8b7 2192 	ldrh.w	r2, [r7, #402]	@ 0x192
 8007752:	869a      	strh	r2, [r3, #52]	@ 0x34
    }
 8007754:	bf00      	nop
    Voicecomm_Text.setTypedText(touchgfx::TypedText(T___SINGLEUSE_2Q8N));
 8007756:	f507 731a 	add.w	r3, r7, #616	@ 0x268
 800775a:	f5a3 7319 	sub.w	r3, r3, #612	@ 0x264
 800775e:	681b      	ldr	r3, [r3, #0]
 8007760:	f503 74dc 	add.w	r4, r3, #440	@ 0x1b8
 8007764:	f107 0350 	add.w	r3, r7, #80	@ 0x50
 8007768:	2101      	movs	r1, #1
 800776a:	4618      	mov	r0, r3
 800776c:	f7fe f960 	bl	8005a30 <_ZN8touchgfx9TypedTextC1Et>
 8007770:	f107 0350 	add.w	r3, r7, #80	@ 0x50
 8007774:	4619      	mov	r1, r3
 8007776:	4620      	mov	r0, r4
 8007778:	f012 f96d 	bl	8019a56 <_ZN8touchgfx8TextArea12setTypedTextERKNS_9TypedTextE>
 800777c:	f107 0350 	add.w	r3, r7, #80	@ 0x50
 8007780:	4618      	mov	r0, r3
 8007782:	f7fc faeb 	bl	8003d5c <_ZN8touchgfx9TypedTextD1Ev>
    Voicecomm_Textbox.add(Voicecomm_Text);
 8007786:	f507 731a 	add.w	r3, r7, #616	@ 0x268
 800778a:	f5a3 7319 	sub.w	r3, r3, #612	@ 0x264
 800778e:	681b      	ldr	r3, [r3, #0]
 8007790:	f503 72ac 	add.w	r2, r3, #344	@ 0x158
 8007794:	f507 731a 	add.w	r3, r7, #616	@ 0x268
 8007798:	f5a3 7319 	sub.w	r3, r3, #612	@ 0x264
 800779c:	681b      	ldr	r3, [r3, #0]
 800779e:	f503 73dc 	add.w	r3, r3, #440	@ 0x1b8
 80077a2:	4619      	mov	r1, r3
 80077a4:	4610      	mov	r0, r2
 80077a6:	f010 fa2b 	bl	8017c00 <_ZN8touchgfx9Container3addERNS_8DrawableE>
    Voice_Comm_Panel.add(Voicecomm_Textbox);
 80077aa:	f507 731a 	add.w	r3, r7, #616	@ 0x268
 80077ae:	f5a3 7319 	sub.w	r3, r3, #612	@ 0x264
 80077b2:	681b      	ldr	r3, [r3, #0]
 80077b4:	f103 02f8 	add.w	r2, r3, #248	@ 0xf8
 80077b8:	f507 731a 	add.w	r3, r7, #616	@ 0x268
 80077bc:	f5a3 7319 	sub.w	r3, r3, #612	@ 0x264
 80077c0:	681b      	ldr	r3, [r3, #0]
 80077c2:	f503 73ac 	add.w	r3, r3, #344	@ 0x158
 80077c6:	4619      	mov	r1, r3
 80077c8:	4610      	mov	r0, r2
 80077ca:	f010 fa19 	bl	8017c00 <_ZN8touchgfx9Container3addERNS_8DrawableE>

    Volume_Textbox.setPosition(143, 58, 70, 16);
 80077ce:	f507 731a 	add.w	r3, r7, #616	@ 0x268
 80077d2:	f5a3 7319 	sub.w	r3, r3, #612	@ 0x264
 80077d6:	681b      	ldr	r3, [r3, #0]
 80077d8:	f503 70fa 	add.w	r0, r3, #500	@ 0x1f4
 80077dc:	2310      	movs	r3, #16
 80077de:	9300      	str	r3, [sp, #0]
 80077e0:	2346      	movs	r3, #70	@ 0x46
 80077e2:	223a      	movs	r2, #58	@ 0x3a
 80077e4:	218f      	movs	r1, #143	@ 0x8f
 80077e6:	f7fc fb6c 	bl	8003ec2 <_ZN8touchgfx8Drawable11setPositionEssss>

    Volume_Text_Border.setPosition(0, 0, 70, 16);
 80077ea:	f507 731a 	add.w	r3, r7, #616	@ 0x268
 80077ee:	f5a3 7319 	sub.w	r3, r3, #612	@ 0x264
 80077f2:	681b      	ldr	r3, [r3, #0]
 80077f4:	f503 7008 	add.w	r0, r3, #544	@ 0x220
 80077f8:	2310      	movs	r3, #16
 80077fa:	9300      	str	r3, [sp, #0]
 80077fc:	2346      	movs	r3, #70	@ 0x46
 80077fe:	2200      	movs	r2, #0
 8007800:	2100      	movs	r1, #0
 8007802:	f7fc fb5e 	bl	8003ec2 <_ZN8touchgfx8Drawable11setPositionEssss>
    Volume_Text_Border.setColor(touchgfx::Color::getColorFromRGB(0, 0, 0));
 8007806:	f507 731a 	add.w	r3, r7, #616	@ 0x268
 800780a:	f5a3 7319 	sub.w	r3, r3, #612	@ 0x264
 800780e:	681b      	ldr	r3, [r3, #0]
 8007810:	f503 7408 	add.w	r4, r3, #544	@ 0x220
 8007814:	2300      	movs	r3, #0
 8007816:	f887 319c 	strb.w	r3, [r7, #412]	@ 0x19c
 800781a:	2300      	movs	r3, #0
 800781c:	f887 319b 	strb.w	r3, [r7, #411]	@ 0x19b
 8007820:	2300      	movs	r3, #0
 8007822:	f887 319a 	strb.w	r3, [r7, #410]	@ 0x19a
 8007826:	f897 319c 	ldrb.w	r3, [r7, #412]	@ 0x19c
 800782a:	041a      	lsls	r2, r3, #16
 800782c:	f897 319b 	ldrb.w	r3, [r7, #411]	@ 0x19b
 8007830:	021b      	lsls	r3, r3, #8
 8007832:	431a      	orrs	r2, r3
 8007834:	f897 319a 	ldrb.w	r3, [r7, #410]	@ 0x19a
 8007838:	4313      	orrs	r3, r2
 800783a:	f043 427f 	orr.w	r2, r3, #4278190080	@ 0xff000000
 800783e:	f507 73a8 	add.w	r3, r7, #336	@ 0x150
 8007842:	4611      	mov	r1, r2
 8007844:	4618      	mov	r0, r3
 8007846:	f7fd ff92 	bl	800576e <_ZN8touchgfx9colortypeC1Em>
 800784a:	f507 731a 	add.w	r3, r7, #616	@ 0x268
 800784e:	f5a3 738c 	sub.w	r3, r3, #280	@ 0x118
 8007852:	681b      	ldr	r3, [r3, #0]
 8007854:	4619      	mov	r1, r3
 8007856:	4620      	mov	r0, r4
 8007858:	f7fe f85a 	bl	8005910 <_ZN8touchgfx3Box8setColorENS_9colortypeE>
    Volume_Text_Border.setBorderColor(touchgfx::Color::getColorFromRGB(237, 102, 99));
 800785c:	f507 731a 	add.w	r3, r7, #616	@ 0x268
 8007860:	f5a3 7319 	sub.w	r3, r3, #612	@ 0x264
 8007864:	681b      	ldr	r3, [r3, #0]
 8007866:	f503 7408 	add.w	r4, r3, #544	@ 0x220
 800786a:	23ed      	movs	r3, #237	@ 0xed
 800786c:	f887 319f 	strb.w	r3, [r7, #415]	@ 0x19f
 8007870:	2366      	movs	r3, #102	@ 0x66
 8007872:	f887 319e 	strb.w	r3, [r7, #414]	@ 0x19e
 8007876:	2363      	movs	r3, #99	@ 0x63
 8007878:	f887 319d 	strb.w	r3, [r7, #413]	@ 0x19d
 800787c:	f897 319f 	ldrb.w	r3, [r7, #415]	@ 0x19f
 8007880:	041a      	lsls	r2, r3, #16
 8007882:	f897 319e 	ldrb.w	r3, [r7, #414]	@ 0x19e
 8007886:	021b      	lsls	r3, r3, #8
 8007888:	431a      	orrs	r2, r3
 800788a:	f897 319d 	ldrb.w	r3, [r7, #413]	@ 0x19d
 800788e:	4313      	orrs	r3, r2
 8007890:	f043 427f 	orr.w	r2, r3, #4278190080	@ 0xff000000
 8007894:	f507 73a6 	add.w	r3, r7, #332	@ 0x14c
 8007898:	4611      	mov	r1, r2
 800789a:	4618      	mov	r0, r3
 800789c:	f7fd ff67 	bl	800576e <_ZN8touchgfx9colortypeC1Em>
 80078a0:	f507 731a 	add.w	r3, r7, #616	@ 0x268
 80078a4:	f5a3 738e 	sub.w	r3, r3, #284	@ 0x11c
 80078a8:	681b      	ldr	r3, [r3, #0]
 80078aa:	4619      	mov	r1, r3
 80078ac:	4620      	mov	r0, r4
 80078ae:	f7fe f8a1 	bl	80059f4 <_ZN8touchgfx13BoxWithBorder14setBorderColorENS_9colortypeE>
    Volume_Text_Border.setBorderSize(3);
 80078b2:	f507 731a 	add.w	r3, r7, #616	@ 0x268
 80078b6:	f5a3 7319 	sub.w	r3, r3, #612	@ 0x264
 80078ba:	681b      	ldr	r3, [r3, #0]
 80078bc:	f503 7308 	add.w	r3, r3, #544	@ 0x220
 80078c0:	2103      	movs	r1, #3
 80078c2:	4618      	mov	r0, r3
 80078c4:	f7fe f8a4 	bl	8005a10 <_ZN8touchgfx13BoxWithBorder13setBorderSizeEt>
    Volume_Textbox.add(Volume_Text_Border);
 80078c8:	f507 731a 	add.w	r3, r7, #616	@ 0x268
 80078cc:	f5a3 7319 	sub.w	r3, r3, #612	@ 0x264
 80078d0:	681b      	ldr	r3, [r3, #0]
 80078d2:	f503 72fa 	add.w	r2, r3, #500	@ 0x1f4
 80078d6:	f507 731a 	add.w	r3, r7, #616	@ 0x268
 80078da:	f5a3 7319 	sub.w	r3, r3, #612	@ 0x264
 80078de:	681b      	ldr	r3, [r3, #0]
 80078e0:	f503 7308 	add.w	r3, r3, #544	@ 0x220
 80078e4:	4619      	mov	r1, r3
 80078e6:	4610      	mov	r0, r2
 80078e8:	f010 f98a 	bl	8017c00 <_ZN8touchgfx9Container3addERNS_8DrawableE>

    textProgress1.setXY(3, 3);
 80078ec:	f507 731a 	add.w	r3, r7, #616	@ 0x268
 80078f0:	f5a3 7319 	sub.w	r3, r3, #612	@ 0x264
 80078f4:	681b      	ldr	r3, [r3, #0]
 80078f6:	f503 7315 	add.w	r3, r3, #596	@ 0x254
 80078fa:	2203      	movs	r2, #3
 80078fc:	2103      	movs	r1, #3
 80078fe:	4618      	mov	r0, r3
 8007900:	f7fc fb38 	bl	8003f74 <_ZN8touchgfx8Drawable5setXYEss>
    textProgress1.setProgressIndicatorPosition(0, 0, 64, 20);
 8007904:	f507 731a 	add.w	r3, r7, #616	@ 0x268
 8007908:	f5a3 7319 	sub.w	r3, r3, #612	@ 0x264
 800790c:	681b      	ldr	r3, [r3, #0]
 800790e:	f503 7015 	add.w	r0, r3, #596	@ 0x254
 8007912:	2314      	movs	r3, #20
 8007914:	9300      	str	r3, [sp, #0]
 8007916:	2340      	movs	r3, #64	@ 0x40
 8007918:	2200      	movs	r2, #0
 800791a:	2100      	movs	r1, #0
 800791c:	f00f fef0 	bl	8017700 <_ZN8touchgfx12TextProgress28setProgressIndicatorPositionEssss>
    textProgress1.setRange(0, 100);
 8007920:	f507 731a 	add.w	r3, r7, #616	@ 0x268
 8007924:	f5a3 7319 	sub.w	r3, r3, #612	@ 0x264
 8007928:	681b      	ldr	r3, [r3, #0]
 800792a:	f503 7015 	add.w	r0, r3, #596	@ 0x254
 800792e:	2300      	movs	r3, #0
 8007930:	9300      	str	r3, [sp, #0]
 8007932:	2300      	movs	r3, #0
 8007934:	2264      	movs	r2, #100	@ 0x64
 8007936:	2100      	movs	r1, #0
 8007938:	f00f ffea 	bl	8017910 <_ZN8touchgfx25AbstractProgressIndicator8setRangeEiitt>
    textProgress1.setColor(touchgfx::Color::getColorFromRGB(255, 255, 255));
 800793c:	f507 731a 	add.w	r3, r7, #616	@ 0x268
 8007940:	f5a3 7319 	sub.w	r3, r3, #612	@ 0x264
 8007944:	681b      	ldr	r3, [r3, #0]
 8007946:	f503 7415 	add.w	r4, r3, #596	@ 0x254
 800794a:	23ff      	movs	r3, #255	@ 0xff
 800794c:	f887 31a2 	strb.w	r3, [r7, #418]	@ 0x1a2
 8007950:	23ff      	movs	r3, #255	@ 0xff
 8007952:	f887 31a1 	strb.w	r3, [r7, #417]	@ 0x1a1
 8007956:	23ff      	movs	r3, #255	@ 0xff
 8007958:	f887 31a0 	strb.w	r3, [r7, #416]	@ 0x1a0
 800795c:	f897 31a2 	ldrb.w	r3, [r7, #418]	@ 0x1a2
 8007960:	041a      	lsls	r2, r3, #16
 8007962:	f897 31a1 	ldrb.w	r3, [r7, #417]	@ 0x1a1
 8007966:	021b      	lsls	r3, r3, #8
 8007968:	431a      	orrs	r2, r3
 800796a:	f897 31a0 	ldrb.w	r3, [r7, #416]	@ 0x1a0
 800796e:	4313      	orrs	r3, r2
 8007970:	f043 427f 	orr.w	r2, r3, #4278190080	@ 0xff000000
 8007974:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
 8007978:	4611      	mov	r1, r2
 800797a:	4618      	mov	r0, r3
 800797c:	f7fd fef7 	bl	800576e <_ZN8touchgfx9colortypeC1Em>
 8007980:	f507 731a 	add.w	r3, r7, #616	@ 0x268
 8007984:	f5a3 7390 	sub.w	r3, r3, #288	@ 0x120
 8007988:	681b      	ldr	r3, [r3, #0]
 800798a:	4619      	mov	r1, r3
 800798c:	4620      	mov	r0, r4
 800798e:	f00f fe49 	bl	8017624 <_ZN8touchgfx12TextProgress8setColorENS_9colortypeE>
    textProgress1.setNumberOfDecimals(0);
 8007992:	f507 731a 	add.w	r3, r7, #616	@ 0x268
 8007996:	f5a3 7319 	sub.w	r3, r3, #612	@ 0x264
 800799a:	681b      	ldr	r3, [r3, #0]
 800799c:	f503 7315 	add.w	r3, r3, #596	@ 0x254
 80079a0:	2100      	movs	r1, #0
 80079a2:	4618      	mov	r0, r3
 80079a4:	f00f fe44 	bl	8017630 <_ZN8touchgfx12TextProgress19setNumberOfDecimalsEt>
    textProgress1.setTypedText(touchgfx::TypedText(T___SINGLEUSE_F9M9));
 80079a8:	f507 731a 	add.w	r3, r7, #616	@ 0x268
 80079ac:	f5a3 7319 	sub.w	r3, r3, #612	@ 0x264
 80079b0:	681b      	ldr	r3, [r3, #0]
 80079b2:	f503 7415 	add.w	r4, r3, #596	@ 0x254
 80079b6:	f107 0358 	add.w	r3, r7, #88	@ 0x58
 80079ba:	2109      	movs	r1, #9
 80079bc:	4618      	mov	r0, r3
 80079be:	f7fe f837 	bl	8005a30 <_ZN8touchgfx9TypedTextC1Et>
 80079c2:	f107 0358 	add.w	r3, r7, #88	@ 0x58
 80079c6:	4619      	mov	r1, r3
 80079c8:	4620      	mov	r0, r4
 80079ca:	f00f fe47 	bl	801765c <_ZN8touchgfx12TextProgress12setTypedTextERKNS_9TypedTextE>
 80079ce:	f107 0358 	add.w	r3, r7, #88	@ 0x58
 80079d2:	4618      	mov	r0, r3
 80079d4:	f7fc f9c2 	bl	8003d5c <_ZN8touchgfx9TypedTextD1Ev>
    textProgress1.setBackground(touchgfx::Bitmap(BITMAP_VOLUME_BACKGROUND2_ID));
 80079d8:	f507 731a 	add.w	r3, r7, #616	@ 0x268
 80079dc:	f5a3 7319 	sub.w	r3, r3, #612	@ 0x264
 80079e0:	681b      	ldr	r3, [r3, #0]
 80079e2:	f503 7415 	add.w	r4, r3, #596	@ 0x254
 80079e6:	f107 0360 	add.w	r3, r7, #96	@ 0x60
 80079ea:	2119      	movs	r1, #25
 80079ec:	4618      	mov	r0, r3
 80079ee:	f7fd fecd 	bl	800578c <_ZN8touchgfx6BitmapC1Et>
 80079f2:	f107 0360 	add.w	r3, r7, #96	@ 0x60
 80079f6:	4619      	mov	r1, r3
 80079f8:	4620      	mov	r0, r4
 80079fa:	f010 f836 	bl	8017a6a <_ZN8touchgfx25AbstractProgressIndicator13setBackgroundERKNS_6BitmapE>
    textProgress1.setValue(50);
 80079fe:	f507 731a 	add.w	r3, r7, #616	@ 0x268
 8007a02:	f5a3 7319 	sub.w	r3, r3, #612	@ 0x264
 8007a06:	681b      	ldr	r3, [r3, #0]
 8007a08:	f503 7315 	add.w	r3, r3, #596	@ 0x254
 8007a0c:	2132      	movs	r1, #50	@ 0x32
 8007a0e:	4618      	mov	r0, r3
 8007a10:	f00f fe30 	bl	8017674 <_ZN8touchgfx12TextProgress8setValueEi>
    Volume_Textbox.add(textProgress1);
 8007a14:	f507 731a 	add.w	r3, r7, #616	@ 0x268
 8007a18:	f5a3 7319 	sub.w	r3, r3, #612	@ 0x264
 8007a1c:	681b      	ldr	r3, [r3, #0]
 8007a1e:	f503 72fa 	add.w	r2, r3, #500	@ 0x1f4
 8007a22:	f507 731a 	add.w	r3, r7, #616	@ 0x268
 8007a26:	f5a3 7319 	sub.w	r3, r3, #612	@ 0x264
 8007a2a:	681b      	ldr	r3, [r3, #0]
 8007a2c:	f503 7315 	add.w	r3, r3, #596	@ 0x254
 8007a30:	4619      	mov	r1, r3
 8007a32:	4610      	mov	r0, r2
 8007a34:	f010 f8e4 	bl	8017c00 <_ZN8touchgfx9Container3addERNS_8DrawableE>
    Voice_Comm_Panel.add(Volume_Textbox);
 8007a38:	f507 731a 	add.w	r3, r7, #616	@ 0x268
 8007a3c:	f5a3 7319 	sub.w	r3, r3, #612	@ 0x264
 8007a40:	681b      	ldr	r3, [r3, #0]
 8007a42:	f103 02f8 	add.w	r2, r3, #248	@ 0xf8
 8007a46:	f507 731a 	add.w	r3, r7, #616	@ 0x268
 8007a4a:	f5a3 7319 	sub.w	r3, r3, #612	@ 0x264
 8007a4e:	681b      	ldr	r3, [r3, #0]
 8007a50:	f503 73fa 	add.w	r3, r3, #500	@ 0x1f4
 8007a54:	4619      	mov	r1, r3
 8007a56:	4610      	mov	r0, r2
 8007a58:	f010 f8d2 	bl	8017c00 <_ZN8touchgfx9Container3addERNS_8DrawableE>

    Toggle_Textbox.setPosition(388, 58, 39, 17);
 8007a5c:	f507 731a 	add.w	r3, r7, #616	@ 0x268
 8007a60:	f5a3 7319 	sub.w	r3, r3, #612	@ 0x264
 8007a64:	681b      	ldr	r3, [r3, #0]
 8007a66:	f503 7057 	add.w	r0, r3, #860	@ 0x35c
 8007a6a:	2311      	movs	r3, #17
 8007a6c:	9300      	str	r3, [sp, #0]
 8007a6e:	2327      	movs	r3, #39	@ 0x27
 8007a70:	223a      	movs	r2, #58	@ 0x3a
 8007a72:	f44f 71c2 	mov.w	r1, #388	@ 0x184
 8007a76:	f7fc fa24 	bl	8003ec2 <_ZN8touchgfx8Drawable11setPositionEssss>

    Toggle_Text_Border.setPosition(0, 0, 38, 16);
 8007a7a:	f507 731a 	add.w	r3, r7, #616	@ 0x268
 8007a7e:	f5a3 7319 	sub.w	r3, r3, #612	@ 0x264
 8007a82:	681b      	ldr	r3, [r3, #0]
 8007a84:	f503 7062 	add.w	r0, r3, #904	@ 0x388
 8007a88:	2310      	movs	r3, #16
 8007a8a:	9300      	str	r3, [sp, #0]
 8007a8c:	2326      	movs	r3, #38	@ 0x26
 8007a8e:	2200      	movs	r2, #0
 8007a90:	2100      	movs	r1, #0
 8007a92:	f7fc fa16 	bl	8003ec2 <_ZN8touchgfx8Drawable11setPositionEssss>
    Toggle_Text_Border.setColor(touchgfx::Color::getColorFromRGB(0, 0, 0));
 8007a96:	f507 731a 	add.w	r3, r7, #616	@ 0x268
 8007a9a:	f5a3 7319 	sub.w	r3, r3, #612	@ 0x264
 8007a9e:	681b      	ldr	r3, [r3, #0]
 8007aa0:	f503 7462 	add.w	r4, r3, #904	@ 0x388
 8007aa4:	2300      	movs	r3, #0
 8007aa6:	f887 31a5 	strb.w	r3, [r7, #421]	@ 0x1a5
 8007aaa:	2300      	movs	r3, #0
 8007aac:	f887 31a4 	strb.w	r3, [r7, #420]	@ 0x1a4
 8007ab0:	2300      	movs	r3, #0
 8007ab2:	f887 31a3 	strb.w	r3, [r7, #419]	@ 0x1a3
 8007ab6:	f897 31a5 	ldrb.w	r3, [r7, #421]	@ 0x1a5
 8007aba:	041a      	lsls	r2, r3, #16
 8007abc:	f897 31a4 	ldrb.w	r3, [r7, #420]	@ 0x1a4
 8007ac0:	021b      	lsls	r3, r3, #8
 8007ac2:	431a      	orrs	r2, r3
 8007ac4:	f897 31a3 	ldrb.w	r3, [r7, #419]	@ 0x1a3
 8007ac8:	4313      	orrs	r3, r2
 8007aca:	f043 427f 	orr.w	r2, r3, #4278190080	@ 0xff000000
 8007ace:	f507 73a2 	add.w	r3, r7, #324	@ 0x144
 8007ad2:	4611      	mov	r1, r2
 8007ad4:	4618      	mov	r0, r3
 8007ad6:	f7fd fe4a 	bl	800576e <_ZN8touchgfx9colortypeC1Em>
 8007ada:	f507 731a 	add.w	r3, r7, #616	@ 0x268
 8007ade:	f5a3 7392 	sub.w	r3, r3, #292	@ 0x124
 8007ae2:	681b      	ldr	r3, [r3, #0]
 8007ae4:	4619      	mov	r1, r3
 8007ae6:	4620      	mov	r0, r4
 8007ae8:	f7fd ff12 	bl	8005910 <_ZN8touchgfx3Box8setColorENS_9colortypeE>
    Toggle_Text_Border.setBorderColor(touchgfx::Color::getColorFromRGB(237, 102, 99));
 8007aec:	f507 731a 	add.w	r3, r7, #616	@ 0x268
 8007af0:	f5a3 7319 	sub.w	r3, r3, #612	@ 0x264
 8007af4:	681b      	ldr	r3, [r3, #0]
 8007af6:	f503 7462 	add.w	r4, r3, #904	@ 0x388
 8007afa:	23ed      	movs	r3, #237	@ 0xed
 8007afc:	f887 31a8 	strb.w	r3, [r7, #424]	@ 0x1a8
 8007b00:	2366      	movs	r3, #102	@ 0x66
 8007b02:	f887 31a7 	strb.w	r3, [r7, #423]	@ 0x1a7
 8007b06:	2363      	movs	r3, #99	@ 0x63
 8007b08:	f887 31a6 	strb.w	r3, [r7, #422]	@ 0x1a6
 8007b0c:	f897 31a8 	ldrb.w	r3, [r7, #424]	@ 0x1a8
 8007b10:	041a      	lsls	r2, r3, #16
 8007b12:	f897 31a7 	ldrb.w	r3, [r7, #423]	@ 0x1a7
 8007b16:	021b      	lsls	r3, r3, #8
 8007b18:	431a      	orrs	r2, r3
 8007b1a:	f897 31a6 	ldrb.w	r3, [r7, #422]	@ 0x1a6
 8007b1e:	4313      	orrs	r3, r2
 8007b20:	f043 427f 	orr.w	r2, r3, #4278190080	@ 0xff000000
 8007b24:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 8007b28:	4611      	mov	r1, r2
 8007b2a:	4618      	mov	r0, r3
 8007b2c:	f7fd fe1f 	bl	800576e <_ZN8touchgfx9colortypeC1Em>
 8007b30:	f507 731a 	add.w	r3, r7, #616	@ 0x268
 8007b34:	f5a3 7394 	sub.w	r3, r3, #296	@ 0x128
 8007b38:	681b      	ldr	r3, [r3, #0]
 8007b3a:	4619      	mov	r1, r3
 8007b3c:	4620      	mov	r0, r4
 8007b3e:	f7fd ff59 	bl	80059f4 <_ZN8touchgfx13BoxWithBorder14setBorderColorENS_9colortypeE>
    Toggle_Text_Border.setBorderSize(3);
 8007b42:	f507 731a 	add.w	r3, r7, #616	@ 0x268
 8007b46:	f5a3 7319 	sub.w	r3, r3, #612	@ 0x264
 8007b4a:	681b      	ldr	r3, [r3, #0]
 8007b4c:	f503 7362 	add.w	r3, r3, #904	@ 0x388
 8007b50:	2103      	movs	r1, #3
 8007b52:	4618      	mov	r0, r3
 8007b54:	f7fd ff5c 	bl	8005a10 <_ZN8touchgfx13BoxWithBorder13setBorderSizeEt>
    Toggle_Textbox.add(Toggle_Text_Border);
 8007b58:	f507 731a 	add.w	r3, r7, #616	@ 0x268
 8007b5c:	f5a3 7319 	sub.w	r3, r3, #612	@ 0x264
 8007b60:	681b      	ldr	r3, [r3, #0]
 8007b62:	f503 7257 	add.w	r2, r3, #860	@ 0x35c
 8007b66:	f507 731a 	add.w	r3, r7, #616	@ 0x268
 8007b6a:	f5a3 7319 	sub.w	r3, r3, #612	@ 0x264
 8007b6e:	681b      	ldr	r3, [r3, #0]
 8007b70:	f503 7362 	add.w	r3, r3, #904	@ 0x388
 8007b74:	4619      	mov	r1, r3
 8007b76:	4610      	mov	r0, r2
 8007b78:	f010 f842 	bl	8017c00 <_ZN8touchgfx9Container3addERNS_8DrawableE>

    Toggle_Text.setXY(4, 3);
 8007b7c:	f507 731a 	add.w	r3, r7, #616	@ 0x268
 8007b80:	f5a3 7319 	sub.w	r3, r3, #612	@ 0x264
 8007b84:	681b      	ldr	r3, [r3, #0]
 8007b86:	f503 736f 	add.w	r3, r3, #956	@ 0x3bc
 8007b8a:	2203      	movs	r2, #3
 8007b8c:	2104      	movs	r1, #4
 8007b8e:	4618      	mov	r0, r3
 8007b90:	f7fc f9f0 	bl	8003f74 <_ZN8touchgfx8Drawable5setXYEss>
    Toggle_Text.setColor(touchgfx::Color::getColorFromRGB(255, 255, 255));
 8007b94:	f507 731a 	add.w	r3, r7, #616	@ 0x268
 8007b98:	f5a3 7319 	sub.w	r3, r3, #612	@ 0x264
 8007b9c:	681b      	ldr	r3, [r3, #0]
 8007b9e:	f503 746f 	add.w	r4, r3, #956	@ 0x3bc
 8007ba2:	23ff      	movs	r3, #255	@ 0xff
 8007ba4:	f887 31ab 	strb.w	r3, [r7, #427]	@ 0x1ab
 8007ba8:	23ff      	movs	r3, #255	@ 0xff
 8007baa:	f887 31aa 	strb.w	r3, [r7, #426]	@ 0x1aa
 8007bae:	23ff      	movs	r3, #255	@ 0xff
 8007bb0:	f887 31a9 	strb.w	r3, [r7, #425]	@ 0x1a9
 8007bb4:	f897 31ab 	ldrb.w	r3, [r7, #427]	@ 0x1ab
 8007bb8:	041a      	lsls	r2, r3, #16
 8007bba:	f897 31aa 	ldrb.w	r3, [r7, #426]	@ 0x1aa
 8007bbe:	021b      	lsls	r3, r3, #8
 8007bc0:	431a      	orrs	r2, r3
 8007bc2:	f897 31a9 	ldrb.w	r3, [r7, #425]	@ 0x1a9
 8007bc6:	4313      	orrs	r3, r2
 8007bc8:	f043 427f 	orr.w	r2, r3, #4278190080	@ 0xff000000
 8007bcc:	f507 739e 	add.w	r3, r7, #316	@ 0x13c
 8007bd0:	4611      	mov	r1, r2
 8007bd2:	4618      	mov	r0, r3
 8007bd4:	f7fd fdcb 	bl	800576e <_ZN8touchgfx9colortypeC1Em>
 8007bd8:	f507 731a 	add.w	r3, r7, #616	@ 0x268
 8007bdc:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8007be0:	681b      	ldr	r3, [r3, #0]
 8007be2:	461a      	mov	r2, r3
 8007be4:	f8c7 41ac 	str.w	r4, [r7, #428]	@ 0x1ac
 8007be8:	f507 731a 	add.w	r3, r7, #616	@ 0x268
 8007bec:	f5a3 7310 	sub.w	r3, r3, #576	@ 0x240
 8007bf0:	601a      	str	r2, [r3, #0]
        this->color = color;
 8007bf2:	f8d7 31ac 	ldr.w	r3, [r7, #428]	@ 0x1ac
 8007bf6:	f507 721a 	add.w	r2, r7, #616	@ 0x268
 8007bfa:	f5a2 7210 	sub.w	r2, r2, #576	@ 0x240
 8007bfe:	6812      	ldr	r2, [r2, #0]
 8007c00:	631a      	str	r2, [r3, #48]	@ 0x30
    }
 8007c02:	bf00      	nop
    Toggle_Text.setLinespacing(0);
 8007c04:	f507 731a 	add.w	r3, r7, #616	@ 0x268
 8007c08:	f5a3 7319 	sub.w	r3, r3, #612	@ 0x264
 8007c0c:	681b      	ldr	r3, [r3, #0]
 8007c0e:	f503 736f 	add.w	r3, r3, #956	@ 0x3bc
 8007c12:	f8c7 31b4 	str.w	r3, [r7, #436]	@ 0x1b4
 8007c16:	2300      	movs	r3, #0
 8007c18:	f8a7 31b2 	strh.w	r3, [r7, #434]	@ 0x1b2
        linespace = space;
 8007c1c:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
 8007c20:	f8b7 21b2 	ldrh.w	r2, [r7, #434]	@ 0x1b2
 8007c24:	869a      	strh	r2, [r3, #52]	@ 0x34
    }
 8007c26:	bf00      	nop
    Toggle_Text.setTypedText(touchgfx::TypedText(T___SINGLEUSE_P64J));
 8007c28:	f507 731a 	add.w	r3, r7, #616	@ 0x268
 8007c2c:	f5a3 7319 	sub.w	r3, r3, #612	@ 0x264
 8007c30:	681b      	ldr	r3, [r3, #0]
 8007c32:	f503 746f 	add.w	r4, r3, #956	@ 0x3bc
 8007c36:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 8007c3a:	2100      	movs	r1, #0
 8007c3c:	4618      	mov	r0, r3
 8007c3e:	f7fd fef7 	bl	8005a30 <_ZN8touchgfx9TypedTextC1Et>
 8007c42:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 8007c46:	4619      	mov	r1, r3
 8007c48:	4620      	mov	r0, r4
 8007c4a:	f011 ff04 	bl	8019a56 <_ZN8touchgfx8TextArea12setTypedTextERKNS_9TypedTextE>
 8007c4e:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 8007c52:	4618      	mov	r0, r3
 8007c54:	f7fc f882 	bl	8003d5c <_ZN8touchgfx9TypedTextD1Ev>
    Toggle_Textbox.add(Toggle_Text);
 8007c58:	f507 731a 	add.w	r3, r7, #616	@ 0x268
 8007c5c:	f5a3 7319 	sub.w	r3, r3, #612	@ 0x264
 8007c60:	681b      	ldr	r3, [r3, #0]
 8007c62:	f503 7257 	add.w	r2, r3, #860	@ 0x35c
 8007c66:	f507 731a 	add.w	r3, r7, #616	@ 0x268
 8007c6a:	f5a3 7319 	sub.w	r3, r3, #612	@ 0x264
 8007c6e:	681b      	ldr	r3, [r3, #0]
 8007c70:	f503 736f 	add.w	r3, r3, #956	@ 0x3bc
 8007c74:	4619      	mov	r1, r3
 8007c76:	4610      	mov	r0, r2
 8007c78:	f00f ffc2 	bl	8017c00 <_ZN8touchgfx9Container3addERNS_8DrawableE>
    Voice_Comm_Panel.add(Toggle_Textbox);
 8007c7c:	f507 731a 	add.w	r3, r7, #616	@ 0x268
 8007c80:	f5a3 7319 	sub.w	r3, r3, #612	@ 0x264
 8007c84:	681b      	ldr	r3, [r3, #0]
 8007c86:	f103 02f8 	add.w	r2, r3, #248	@ 0xf8
 8007c8a:	f507 731a 	add.w	r3, r7, #616	@ 0x268
 8007c8e:	f5a3 7319 	sub.w	r3, r3, #612	@ 0x264
 8007c92:	681b      	ldr	r3, [r3, #0]
 8007c94:	f503 7357 	add.w	r3, r3, #860	@ 0x35c
 8007c98:	4619      	mov	r1, r3
 8007c9a:	4610      	mov	r0, r2
 8007c9c:	f00f ffb0 	bl	8017c00 <_ZN8touchgfx9Container3addERNS_8DrawableE>

    Volume_Slider.setXY(8, 25);
 8007ca0:	f507 731a 	add.w	r3, r7, #616	@ 0x268
 8007ca4:	f5a3 7319 	sub.w	r3, r3, #612	@ 0x264
 8007ca8:	681b      	ldr	r3, [r3, #0]
 8007caa:	f503 737e 	add.w	r3, r3, #1016	@ 0x3f8
 8007cae:	2219      	movs	r2, #25
 8007cb0:	2108      	movs	r1, #8
 8007cb2:	4618      	mov	r0, r3
 8007cb4:	f7fc f95e 	bl	8003f74 <_ZN8touchgfx8Drawable5setXYEss>
    Volume_Slider.setBitmaps(touchgfx::Bitmap(BITMAP_SLIDER_DARK_ID), touchgfx::Bitmap(BITMAP_SLIDER_LIGHT_ID), touchgfx::Bitmap(BITMAP_UNPRESSED_BUTTON_ID));
 8007cb8:	f507 731a 	add.w	r3, r7, #616	@ 0x268
 8007cbc:	f5a3 7319 	sub.w	r3, r3, #612	@ 0x264
 8007cc0:	681b      	ldr	r3, [r3, #0]
 8007cc2:	f503 747e 	add.w	r4, r3, #1016	@ 0x3f8
 8007cc6:	f107 036c 	add.w	r3, r7, #108	@ 0x6c
 8007cca:	2110      	movs	r1, #16
 8007ccc:	4618      	mov	r0, r3
 8007cce:	f7fd fd5d 	bl	800578c <_ZN8touchgfx6BitmapC1Et>
 8007cd2:	f107 0370 	add.w	r3, r7, #112	@ 0x70
 8007cd6:	2111      	movs	r1, #17
 8007cd8:	4618      	mov	r0, r3
 8007cda:	f7fd fd57 	bl	800578c <_ZN8touchgfx6BitmapC1Et>
 8007cde:	f107 0374 	add.w	r3, r7, #116	@ 0x74
 8007ce2:	2117      	movs	r1, #23
 8007ce4:	4618      	mov	r0, r3
 8007ce6:	f7fd fd51 	bl	800578c <_ZN8touchgfx6BitmapC1Et>
 8007cea:	f107 0374 	add.w	r3, r7, #116	@ 0x74
 8007cee:	f107 0270 	add.w	r2, r7, #112	@ 0x70
 8007cf2:	f107 016c 	add.w	r1, r7, #108	@ 0x6c
 8007cf6:	4620      	mov	r0, r4
 8007cf8:	f010 fc5e 	bl	80185b8 <_ZN8touchgfx6Slider10setBitmapsERKNS_6BitmapES3_S3_>
    Volume_Slider.setupHorizontalSlider(2, 9, 0, 0, 310);
 8007cfc:	f507 731a 	add.w	r3, r7, #616	@ 0x268
 8007d00:	f5a3 7319 	sub.w	r3, r3, #612	@ 0x264
 8007d04:	681b      	ldr	r3, [r3, #0]
 8007d06:	f503 707e 	add.w	r0, r3, #1016	@ 0x3f8
 8007d0a:	f44f 739b 	mov.w	r3, #310	@ 0x136
 8007d0e:	9301      	str	r3, [sp, #4]
 8007d10:	2300      	movs	r3, #0
 8007d12:	9300      	str	r3, [sp, #0]
 8007d14:	2300      	movs	r3, #0
 8007d16:	2209      	movs	r2, #9
 8007d18:	2102      	movs	r1, #2
 8007d1a:	f010 fac1 	bl	80182a0 <_ZN8touchgfx6Slider21setupHorizontalSliderEttttt>
    Volume_Slider.setValueRange(0, 100);
 8007d1e:	f507 731a 	add.w	r3, r7, #616	@ 0x268
 8007d22:	f5a3 7319 	sub.w	r3, r3, #612	@ 0x264
 8007d26:	681b      	ldr	r3, [r3, #0]
 8007d28:	f503 737e 	add.w	r3, r3, #1016	@ 0x3f8
 8007d2c:	2264      	movs	r2, #100	@ 0x64
 8007d2e:	2100      	movs	r1, #0
 8007d30:	4618      	mov	r0, r3
 8007d32:	f010 fa2a 	bl	801818a <_ZN8touchgfx6Slider13setValueRangeEii>
    Volume_Slider.setValue(50);
 8007d36:	f507 731a 	add.w	r3, r7, #616	@ 0x268
 8007d3a:	f5a3 7319 	sub.w	r3, r3, #612	@ 0x264
 8007d3e:	681b      	ldr	r3, [r3, #0]
 8007d40:	f503 737e 	add.w	r3, r3, #1016	@ 0x3f8
 8007d44:	2132      	movs	r1, #50	@ 0x32
 8007d46:	4618      	mov	r0, r3
 8007d48:	f010 f9ab 	bl	80180a2 <_ZN8touchgfx6Slider8setValueEi>
    Volume_Slider.setNewValueCallback(sliderValueChangedCallback);
 8007d4c:	f507 731a 	add.w	r3, r7, #616	@ 0x268
 8007d50:	f5a3 7319 	sub.w	r3, r3, #612	@ 0x264
 8007d54:	681b      	ldr	r3, [r3, #0]
 8007d56:	f503 727e 	add.w	r2, r3, #1016	@ 0x3f8
 8007d5a:	f507 731a 	add.w	r3, r7, #616	@ 0x268
 8007d5e:	f5a3 7319 	sub.w	r3, r3, #612	@ 0x264
 8007d62:	681b      	ldr	r3, [r3, #0]
 8007d64:	f603 3308 	addw	r3, r3, #2824	@ 0xb08
 8007d68:	4619      	mov	r1, r3
 8007d6a:	4610      	mov	r0, r2
 8007d6c:	f7fe fe77 	bl	8006a5e <_ZN8touchgfx6Slider19setNewValueCallbackERNS_15GenericCallbackIRKS0_ivEE>
    Voice_Comm_Panel.add(Volume_Slider);
 8007d70:	f507 731a 	add.w	r3, r7, #616	@ 0x268
 8007d74:	f5a3 7319 	sub.w	r3, r3, #612	@ 0x264
 8007d78:	681b      	ldr	r3, [r3, #0]
 8007d7a:	f103 02f8 	add.w	r2, r3, #248	@ 0xf8
 8007d7e:	f507 731a 	add.w	r3, r7, #616	@ 0x268
 8007d82:	f5a3 7319 	sub.w	r3, r3, #612	@ 0x264
 8007d86:	681b      	ldr	r3, [r3, #0]
 8007d88:	f503 737e 	add.w	r3, r3, #1016	@ 0x3f8
 8007d8c:	4619      	mov	r1, r3
 8007d8e:	4610      	mov	r0, r2
 8007d90:	f00f ff36 	bl	8017c00 <_ZN8touchgfx9Container3addERNS_8DrawableE>

    Voice_Toggle_Button.setXY(372, 23);
 8007d94:	f507 731a 	add.w	r3, r7, #616	@ 0x268
 8007d98:	f5a3 7319 	sub.w	r3, r3, #612	@ 0x264
 8007d9c:	681b      	ldr	r3, [r3, #0]
 8007d9e:	f203 43f4 	addw	r3, r3, #1268	@ 0x4f4
 8007da2:	2217      	movs	r2, #23
 8007da4:	f44f 71ba 	mov.w	r1, #372	@ 0x174
 8007da8:	4618      	mov	r0, r3
 8007daa:	f7fc f8e3 	bl	8003f74 <_ZN8touchgfx8Drawable5setXYEss>
    Voice_Toggle_Button.setBitmaps(touchgfx::Bitmap(BITMAP_TOGGLE_BUTTON_ON2_ID), touchgfx::Bitmap(BITMAP_TOGGLE_BUTTON_OFF2_ID));
 8007dae:	f507 731a 	add.w	r3, r7, #616	@ 0x268
 8007db2:	f5a3 7319 	sub.w	r3, r3, #612	@ 0x264
 8007db6:	681b      	ldr	r3, [r3, #0]
 8007db8:	f203 44f4 	addw	r4, r3, #1268	@ 0x4f4
 8007dbc:	f107 0378 	add.w	r3, r7, #120	@ 0x78
 8007dc0:	2116      	movs	r1, #22
 8007dc2:	4618      	mov	r0, r3
 8007dc4:	f7fd fce2 	bl	800578c <_ZN8touchgfx6BitmapC1Et>
 8007dc8:	f107 037c 	add.w	r3, r7, #124	@ 0x7c
 8007dcc:	2114      	movs	r1, #20
 8007dce:	4618      	mov	r0, r3
 8007dd0:	f7fd fcdc 	bl	800578c <_ZN8touchgfx6BitmapC1Et>
 8007dd4:	f107 027c 	add.w	r2, r7, #124	@ 0x7c
 8007dd8:	f107 0378 	add.w	r3, r7, #120	@ 0x78
 8007ddc:	4619      	mov	r1, r3
 8007dde:	4620      	mov	r0, r4
 8007de0:	f7fe fe4c 	bl	8006a7c <_ZN8touchgfx12ToggleButton10setBitmapsERKNS_6BitmapES3_>
    Voice_Toggle_Button.setAction(buttonCallback);
 8007de4:	f507 731a 	add.w	r3, r7, #616	@ 0x268
 8007de8:	f5a3 7319 	sub.w	r3, r3, #612	@ 0x264
 8007dec:	681b      	ldr	r3, [r3, #0]
 8007dee:	f203 42f4 	addw	r2, r3, #1268	@ 0x4f4
 8007df2:	f507 731a 	add.w	r3, r7, #616	@ 0x268
 8007df6:	f5a3 7319 	sub.w	r3, r3, #612	@ 0x264
 8007dfa:	681b      	ldr	r3, [r3, #0]
 8007dfc:	f603 23f8 	addw	r3, r3, #2808	@ 0xaf8
 8007e00:	4619      	mov	r1, r3
 8007e02:	4610      	mov	r0, r2
 8007e04:	f7fd fe8a 	bl	8005b1c <_ZN8touchgfx14AbstractButton9setActionERNS_15GenericCallbackIRKS0_vvEE>
    Voice_Comm_Panel.add(Voice_Toggle_Button);
 8007e08:	f507 731a 	add.w	r3, r7, #616	@ 0x268
 8007e0c:	f5a3 7319 	sub.w	r3, r3, #612	@ 0x264
 8007e10:	681b      	ldr	r3, [r3, #0]
 8007e12:	f103 02f8 	add.w	r2, r3, #248	@ 0xf8
 8007e16:	f507 731a 	add.w	r3, r7, #616	@ 0x268
 8007e1a:	f5a3 7319 	sub.w	r3, r3, #612	@ 0x264
 8007e1e:	681b      	ldr	r3, [r3, #0]
 8007e20:	f203 43f4 	addw	r3, r3, #1268	@ 0x4f4
 8007e24:	4619      	mov	r1, r3
 8007e26:	4610      	mov	r0, r2
 8007e28:	f00f feea 	bl	8017c00 <_ZN8touchgfx9Container3addERNS_8DrawableE>
    Button_Panel.add(Voice_Comm_Panel);
 8007e2c:	f507 731a 	add.w	r3, r7, #616	@ 0x268
 8007e30:	f5a3 7319 	sub.w	r3, r3, #612	@ 0x264
 8007e34:	681b      	ldr	r3, [r3, #0]
 8007e36:	f103 0298 	add.w	r2, r3, #152	@ 0x98
 8007e3a:	f507 731a 	add.w	r3, r7, #616	@ 0x268
 8007e3e:	f5a3 7319 	sub.w	r3, r3, #612	@ 0x264
 8007e42:	681b      	ldr	r3, [r3, #0]
 8007e44:	33f8      	adds	r3, #248	@ 0xf8
 8007e46:	4619      	mov	r1, r3
 8007e48:	4610      	mov	r0, r2
 8007e4a:	f00f fed9 	bl	8017c00 <_ZN8touchgfx9Container3addERNS_8DrawableE>

    Anomaly_Detection_Panel.setPosition(5, 23, 450, 67);
 8007e4e:	f507 731a 	add.w	r3, r7, #616	@ 0x268
 8007e52:	f5a3 7319 	sub.w	r3, r3, #612	@ 0x264
 8007e56:	681b      	ldr	r3, [r3, #0]
 8007e58:	f203 502c 	addw	r0, r3, #1324	@ 0x52c
 8007e5c:	2343      	movs	r3, #67	@ 0x43
 8007e5e:	9300      	str	r3, [sp, #0]
 8007e60:	f44f 73e1 	mov.w	r3, #450	@ 0x1c2
 8007e64:	2217      	movs	r2, #23
 8007e66:	2105      	movs	r1, #5
 8007e68:	f7fc f82b 	bl	8003ec2 <_ZN8touchgfx8Drawable11setPositionEssss>

    Anomaly_Detection_Background.setPosition(0, 0, 450, 63);
 8007e6c:	f507 731a 	add.w	r3, r7, #616	@ 0x268
 8007e70:	f5a3 7319 	sub.w	r3, r3, #612	@ 0x264
 8007e74:	681b      	ldr	r3, [r3, #0]
 8007e76:	f503 60ab 	add.w	r0, r3, #1368	@ 0x558
 8007e7a:	233f      	movs	r3, #63	@ 0x3f
 8007e7c:	9300      	str	r3, [sp, #0]
 8007e7e:	f44f 73e1 	mov.w	r3, #450	@ 0x1c2
 8007e82:	2200      	movs	r2, #0
 8007e84:	2100      	movs	r1, #0
 8007e86:	f7fc f81c 	bl	8003ec2 <_ZN8touchgfx8Drawable11setPositionEssss>
    Anomaly_Detection_Background.setColor(touchgfx::Color::getColorFromRGB(67, 101, 139));
 8007e8a:	f507 731a 	add.w	r3, r7, #616	@ 0x268
 8007e8e:	f5a3 7319 	sub.w	r3, r3, #612	@ 0x264
 8007e92:	681b      	ldr	r3, [r3, #0]
 8007e94:	f503 64ab 	add.w	r4, r3, #1368	@ 0x558
 8007e98:	2343      	movs	r3, #67	@ 0x43
 8007e9a:	f887 31bb 	strb.w	r3, [r7, #443]	@ 0x1bb
 8007e9e:	2365      	movs	r3, #101	@ 0x65
 8007ea0:	f887 31ba 	strb.w	r3, [r7, #442]	@ 0x1ba
 8007ea4:	238b      	movs	r3, #139	@ 0x8b
 8007ea6:	f887 31b9 	strb.w	r3, [r7, #441]	@ 0x1b9
 8007eaa:	f897 31bb 	ldrb.w	r3, [r7, #443]	@ 0x1bb
 8007eae:	041a      	lsls	r2, r3, #16
 8007eb0:	f897 31ba 	ldrb.w	r3, [r7, #442]	@ 0x1ba
 8007eb4:	021b      	lsls	r3, r3, #8
 8007eb6:	431a      	orrs	r2, r3
 8007eb8:	f897 31b9 	ldrb.w	r3, [r7, #441]	@ 0x1b9
 8007ebc:	4313      	orrs	r3, r2
 8007ebe:	f043 427f 	orr.w	r2, r3, #4278190080	@ 0xff000000
 8007ec2:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8007ec6:	4611      	mov	r1, r2
 8007ec8:	4618      	mov	r0, r3
 8007eca:	f7fd fc50 	bl	800576e <_ZN8touchgfx9colortypeC1Em>
 8007ece:	f507 731a 	add.w	r3, r7, #616	@ 0x268
 8007ed2:	f5a3 7398 	sub.w	r3, r3, #304	@ 0x130
 8007ed6:	681b      	ldr	r3, [r3, #0]
 8007ed8:	4619      	mov	r1, r3
 8007eda:	4620      	mov	r0, r4
 8007edc:	f7fd fd18 	bl	8005910 <_ZN8touchgfx3Box8setColorENS_9colortypeE>
    Anomaly_Detection_Background.setBorderColor(touchgfx::Color::getColorFromRGB(0, 0, 0));
 8007ee0:	f507 731a 	add.w	r3, r7, #616	@ 0x268
 8007ee4:	f5a3 7319 	sub.w	r3, r3, #612	@ 0x264
 8007ee8:	681b      	ldr	r3, [r3, #0]
 8007eea:	f503 64ab 	add.w	r4, r3, #1368	@ 0x558
 8007eee:	2300      	movs	r3, #0
 8007ef0:	f887 31be 	strb.w	r3, [r7, #446]	@ 0x1be
 8007ef4:	2300      	movs	r3, #0
 8007ef6:	f887 31bd 	strb.w	r3, [r7, #445]	@ 0x1bd
 8007efa:	2300      	movs	r3, #0
 8007efc:	f887 31bc 	strb.w	r3, [r7, #444]	@ 0x1bc
 8007f00:	f897 31be 	ldrb.w	r3, [r7, #446]	@ 0x1be
 8007f04:	041a      	lsls	r2, r3, #16
 8007f06:	f897 31bd 	ldrb.w	r3, [r7, #445]	@ 0x1bd
 8007f0a:	021b      	lsls	r3, r3, #8
 8007f0c:	431a      	orrs	r2, r3
 8007f0e:	f897 31bc 	ldrb.w	r3, [r7, #444]	@ 0x1bc
 8007f12:	4313      	orrs	r3, r2
 8007f14:	f043 427f 	orr.w	r2, r3, #4278190080	@ 0xff000000
 8007f18:	f507 739a 	add.w	r3, r7, #308	@ 0x134
 8007f1c:	4611      	mov	r1, r2
 8007f1e:	4618      	mov	r0, r3
 8007f20:	f7fd fc25 	bl	800576e <_ZN8touchgfx9colortypeC1Em>
 8007f24:	f507 731a 	add.w	r3, r7, #616	@ 0x268
 8007f28:	f5a3 739a 	sub.w	r3, r3, #308	@ 0x134
 8007f2c:	681b      	ldr	r3, [r3, #0]
 8007f2e:	4619      	mov	r1, r3
 8007f30:	4620      	mov	r0, r4
 8007f32:	f7fd fd5f 	bl	80059f4 <_ZN8touchgfx13BoxWithBorder14setBorderColorENS_9colortypeE>
    Anomaly_Detection_Background.setBorderSize(2);
 8007f36:	f507 731a 	add.w	r3, r7, #616	@ 0x268
 8007f3a:	f5a3 7319 	sub.w	r3, r3, #612	@ 0x264
 8007f3e:	681b      	ldr	r3, [r3, #0]
 8007f40:	f503 63ab 	add.w	r3, r3, #1368	@ 0x558
 8007f44:	2102      	movs	r1, #2
 8007f46:	4618      	mov	r0, r3
 8007f48:	f7fd fd62 	bl	8005a10 <_ZN8touchgfx13BoxWithBorder13setBorderSizeEt>
    Anomaly_Detection_Panel.add(Anomaly_Detection_Background);
 8007f4c:	f507 731a 	add.w	r3, r7, #616	@ 0x268
 8007f50:	f5a3 7319 	sub.w	r3, r3, #612	@ 0x264
 8007f54:	681b      	ldr	r3, [r3, #0]
 8007f56:	f203 522c 	addw	r2, r3, #1324	@ 0x52c
 8007f5a:	f507 731a 	add.w	r3, r7, #616	@ 0x268
 8007f5e:	f5a3 7319 	sub.w	r3, r3, #612	@ 0x264
 8007f62:	681b      	ldr	r3, [r3, #0]
 8007f64:	f503 63ab 	add.w	r3, r3, #1368	@ 0x558
 8007f68:	4619      	mov	r1, r3
 8007f6a:	4610      	mov	r0, r2
 8007f6c:	f00f fe48 	bl	8017c00 <_ZN8touchgfx9Container3addERNS_8DrawableE>
    Button_Panel.add(Anomaly_Detection_Panel);
 8007f70:	f507 731a 	add.w	r3, r7, #616	@ 0x268
 8007f74:	f5a3 7319 	sub.w	r3, r3, #612	@ 0x264
 8007f78:	681b      	ldr	r3, [r3, #0]
 8007f7a:	f103 0298 	add.w	r2, r3, #152	@ 0x98
 8007f7e:	f507 731a 	add.w	r3, r7, #616	@ 0x268
 8007f82:	f5a3 7319 	sub.w	r3, r3, #612	@ 0x264
 8007f86:	681b      	ldr	r3, [r3, #0]
 8007f88:	f203 532c 	addw	r3, r3, #1324	@ 0x52c
 8007f8c:	4619      	mov	r1, r3
 8007f8e:	4610      	mov	r0, r2
 8007f90:	f00f fe36 	bl	8017c00 <_ZN8touchgfx9Container3addERNS_8DrawableE>

    Message_panel.setPosition(10, 8, 460, 109);
 8007f94:	f507 731a 	add.w	r3, r7, #616	@ 0x268
 8007f98:	f5a3 7319 	sub.w	r3, r3, #612	@ 0x264
 8007f9c:	681b      	ldr	r3, [r3, #0]
 8007f9e:	f203 508c 	addw	r0, r3, #1420	@ 0x58c
 8007fa2:	236d      	movs	r3, #109	@ 0x6d
 8007fa4:	9300      	str	r3, [sp, #0]
 8007fa6:	f44f 73e6 	mov.w	r3, #460	@ 0x1cc
 8007faa:	2208      	movs	r2, #8
 8007fac:	210a      	movs	r1, #10
 8007fae:	f7fb ff88 	bl	8003ec2 <_ZN8touchgfx8Drawable11setPositionEssss>

    Button_Panel_Background_1.setPosition(0, 0, 460, 109);
 8007fb2:	f507 731a 	add.w	r3, r7, #616	@ 0x268
 8007fb6:	f5a3 7319 	sub.w	r3, r3, #612	@ 0x264
 8007fba:	681b      	ldr	r3, [r3, #0]
 8007fbc:	f503 60b7 	add.w	r0, r3, #1464	@ 0x5b8
 8007fc0:	236d      	movs	r3, #109	@ 0x6d
 8007fc2:	9300      	str	r3, [sp, #0]
 8007fc4:	f44f 73e6 	mov.w	r3, #460	@ 0x1cc
 8007fc8:	2200      	movs	r2, #0
 8007fca:	2100      	movs	r1, #0
 8007fcc:	f7fb ff79 	bl	8003ec2 <_ZN8touchgfx8Drawable11setPositionEssss>
    Button_Panel_Background_1.setColor(touchgfx::Color::getColorFromRGB(78, 137, 174));
 8007fd0:	f507 731a 	add.w	r3, r7, #616	@ 0x268
 8007fd4:	f5a3 7319 	sub.w	r3, r3, #612	@ 0x264
 8007fd8:	681b      	ldr	r3, [r3, #0]
 8007fda:	f503 64b7 	add.w	r4, r3, #1464	@ 0x5b8
 8007fde:	234e      	movs	r3, #78	@ 0x4e
 8007fe0:	f887 31c1 	strb.w	r3, [r7, #449]	@ 0x1c1
 8007fe4:	2389      	movs	r3, #137	@ 0x89
 8007fe6:	f887 31c0 	strb.w	r3, [r7, #448]	@ 0x1c0
 8007fea:	23ae      	movs	r3, #174	@ 0xae
 8007fec:	f887 31bf 	strb.w	r3, [r7, #447]	@ 0x1bf
 8007ff0:	f897 31c1 	ldrb.w	r3, [r7, #449]	@ 0x1c1
 8007ff4:	041a      	lsls	r2, r3, #16
 8007ff6:	f897 31c0 	ldrb.w	r3, [r7, #448]	@ 0x1c0
 8007ffa:	021b      	lsls	r3, r3, #8
 8007ffc:	431a      	orrs	r2, r3
 8007ffe:	f897 31bf 	ldrb.w	r3, [r7, #447]	@ 0x1bf
 8008002:	4313      	orrs	r3, r2
 8008004:	f043 427f 	orr.w	r2, r3, #4278190080	@ 0xff000000
 8008008:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800800c:	4611      	mov	r1, r2
 800800e:	4618      	mov	r0, r3
 8008010:	f7fd fbad 	bl	800576e <_ZN8touchgfx9colortypeC1Em>
 8008014:	f507 731a 	add.w	r3, r7, #616	@ 0x268
 8008018:	f5a3 739c 	sub.w	r3, r3, #312	@ 0x138
 800801c:	681b      	ldr	r3, [r3, #0]
 800801e:	4619      	mov	r1, r3
 8008020:	4620      	mov	r0, r4
 8008022:	f7fd fc75 	bl	8005910 <_ZN8touchgfx3Box8setColorENS_9colortypeE>
    Button_Panel_Background_1.setBorderColor(touchgfx::Color::getColorFromRGB(237, 102, 99));
 8008026:	f507 731a 	add.w	r3, r7, #616	@ 0x268
 800802a:	f5a3 7319 	sub.w	r3, r3, #612	@ 0x264
 800802e:	681b      	ldr	r3, [r3, #0]
 8008030:	f503 64b7 	add.w	r4, r3, #1464	@ 0x5b8
 8008034:	23ed      	movs	r3, #237	@ 0xed
 8008036:	f887 31c4 	strb.w	r3, [r7, #452]	@ 0x1c4
 800803a:	2366      	movs	r3, #102	@ 0x66
 800803c:	f887 31c3 	strb.w	r3, [r7, #451]	@ 0x1c3
 8008040:	2363      	movs	r3, #99	@ 0x63
 8008042:	f887 31c2 	strb.w	r3, [r7, #450]	@ 0x1c2
 8008046:	f897 31c4 	ldrb.w	r3, [r7, #452]	@ 0x1c4
 800804a:	041a      	lsls	r2, r3, #16
 800804c:	f897 31c3 	ldrb.w	r3, [r7, #451]	@ 0x1c3
 8008050:	021b      	lsls	r3, r3, #8
 8008052:	431a      	orrs	r2, r3
 8008054:	f897 31c2 	ldrb.w	r3, [r7, #450]	@ 0x1c2
 8008058:	4313      	orrs	r3, r2
 800805a:	f043 427f 	orr.w	r2, r3, #4278190080	@ 0xff000000
 800805e:	f507 7396 	add.w	r3, r7, #300	@ 0x12c
 8008062:	4611      	mov	r1, r2
 8008064:	4618      	mov	r0, r3
 8008066:	f7fd fb82 	bl	800576e <_ZN8touchgfx9colortypeC1Em>
 800806a:	f507 731a 	add.w	r3, r7, #616	@ 0x268
 800806e:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 8008072:	681b      	ldr	r3, [r3, #0]
 8008074:	4619      	mov	r1, r3
 8008076:	4620      	mov	r0, r4
 8008078:	f7fd fcbc 	bl	80059f4 <_ZN8touchgfx13BoxWithBorder14setBorderColorENS_9colortypeE>
    Button_Panel_Background_1.setBorderSize(5);
 800807c:	f507 731a 	add.w	r3, r7, #616	@ 0x268
 8008080:	f5a3 7319 	sub.w	r3, r3, #612	@ 0x264
 8008084:	681b      	ldr	r3, [r3, #0]
 8008086:	f503 63b7 	add.w	r3, r3, #1464	@ 0x5b8
 800808a:	2105      	movs	r1, #5
 800808c:	4618      	mov	r0, r3
 800808e:	f7fd fcbf 	bl	8005a10 <_ZN8touchgfx13BoxWithBorder13setBorderSizeEt>
    Message_panel.add(Button_Panel_Background_1);
 8008092:	f507 731a 	add.w	r3, r7, #616	@ 0x268
 8008096:	f5a3 7319 	sub.w	r3, r3, #612	@ 0x264
 800809a:	681b      	ldr	r3, [r3, #0]
 800809c:	f203 528c 	addw	r2, r3, #1420	@ 0x58c
 80080a0:	f507 731a 	add.w	r3, r7, #616	@ 0x268
 80080a4:	f5a3 7319 	sub.w	r3, r3, #612	@ 0x264
 80080a8:	681b      	ldr	r3, [r3, #0]
 80080aa:	f503 63b7 	add.w	r3, r3, #1464	@ 0x5b8
 80080ae:	4619      	mov	r1, r3
 80080b0:	4610      	mov	r0, r2
 80080b2:	f00f fda5 	bl	8017c00 <_ZN8touchgfx9Container3addERNS_8DrawableE>

    Message_Board_Panel_1.setPosition(5, 4, 450, 100);
 80080b6:	f507 731a 	add.w	r3, r7, #616	@ 0x268
 80080ba:	f5a3 7319 	sub.w	r3, r3, #612	@ 0x264
 80080be:	681b      	ldr	r3, [r3, #0]
 80080c0:	f203 50ec 	addw	r0, r3, #1516	@ 0x5ec
 80080c4:	2364      	movs	r3, #100	@ 0x64
 80080c6:	9300      	str	r3, [sp, #0]
 80080c8:	f44f 73e1 	mov.w	r3, #450	@ 0x1c2
 80080cc:	2204      	movs	r2, #4
 80080ce:	2105      	movs	r1, #5
 80080d0:	f7fb fef7 	bl	8003ec2 <_ZN8touchgfx8Drawable11setPositionEssss>

    MessageBoard_Background_1.setPosition(0, 0, 450, 100);
 80080d4:	f507 731a 	add.w	r3, r7, #616	@ 0x268
 80080d8:	f5a3 7319 	sub.w	r3, r3, #612	@ 0x264
 80080dc:	681b      	ldr	r3, [r3, #0]
 80080de:	f503 60c3 	add.w	r0, r3, #1560	@ 0x618
 80080e2:	2364      	movs	r3, #100	@ 0x64
 80080e4:	9300      	str	r3, [sp, #0]
 80080e6:	f44f 73e1 	mov.w	r3, #450	@ 0x1c2
 80080ea:	2200      	movs	r2, #0
 80080ec:	2100      	movs	r1, #0
 80080ee:	f7fb fee8 	bl	8003ec2 <_ZN8touchgfx8Drawable11setPositionEssss>
    MessageBoard_Background_1.setColor(touchgfx::Color::getColorFromRGB(67, 101, 139));
 80080f2:	f507 731a 	add.w	r3, r7, #616	@ 0x268
 80080f6:	f5a3 7319 	sub.w	r3, r3, #612	@ 0x264
 80080fa:	681b      	ldr	r3, [r3, #0]
 80080fc:	f503 64c3 	add.w	r4, r3, #1560	@ 0x618
 8008100:	2343      	movs	r3, #67	@ 0x43
 8008102:	f887 31c7 	strb.w	r3, [r7, #455]	@ 0x1c7
 8008106:	2365      	movs	r3, #101	@ 0x65
 8008108:	f887 31c6 	strb.w	r3, [r7, #454]	@ 0x1c6
 800810c:	238b      	movs	r3, #139	@ 0x8b
 800810e:	f887 31c5 	strb.w	r3, [r7, #453]	@ 0x1c5
 8008112:	f897 31c7 	ldrb.w	r3, [r7, #455]	@ 0x1c7
 8008116:	041a      	lsls	r2, r3, #16
 8008118:	f897 31c6 	ldrb.w	r3, [r7, #454]	@ 0x1c6
 800811c:	021b      	lsls	r3, r3, #8
 800811e:	431a      	orrs	r2, r3
 8008120:	f897 31c5 	ldrb.w	r3, [r7, #453]	@ 0x1c5
 8008124:	4313      	orrs	r3, r2
 8008126:	f043 427f 	orr.w	r2, r3, #4278190080	@ 0xff000000
 800812a:	f507 7394 	add.w	r3, r7, #296	@ 0x128
 800812e:	4611      	mov	r1, r2
 8008130:	4618      	mov	r0, r3
 8008132:	f7fd fb1c 	bl	800576e <_ZN8touchgfx9colortypeC1Em>
 8008136:	f507 731a 	add.w	r3, r7, #616	@ 0x268
 800813a:	f5a3 73a0 	sub.w	r3, r3, #320	@ 0x140
 800813e:	681b      	ldr	r3, [r3, #0]
 8008140:	4619      	mov	r1, r3
 8008142:	4620      	mov	r0, r4
 8008144:	f7fd fbe4 	bl	8005910 <_ZN8touchgfx3Box8setColorENS_9colortypeE>
    MessageBoard_Background_1.setBorderColor(touchgfx::Color::getColorFromRGB(0, 0, 0));
 8008148:	f507 731a 	add.w	r3, r7, #616	@ 0x268
 800814c:	f5a3 7319 	sub.w	r3, r3, #612	@ 0x264
 8008150:	681b      	ldr	r3, [r3, #0]
 8008152:	f503 64c3 	add.w	r4, r3, #1560	@ 0x618
 8008156:	2300      	movs	r3, #0
 8008158:	f887 31ca 	strb.w	r3, [r7, #458]	@ 0x1ca
 800815c:	2300      	movs	r3, #0
 800815e:	f887 31c9 	strb.w	r3, [r7, #457]	@ 0x1c9
 8008162:	2300      	movs	r3, #0
 8008164:	f887 31c8 	strb.w	r3, [r7, #456]	@ 0x1c8
 8008168:	f897 31ca 	ldrb.w	r3, [r7, #458]	@ 0x1ca
 800816c:	041a      	lsls	r2, r3, #16
 800816e:	f897 31c9 	ldrb.w	r3, [r7, #457]	@ 0x1c9
 8008172:	021b      	lsls	r3, r3, #8
 8008174:	431a      	orrs	r2, r3
 8008176:	f897 31c8 	ldrb.w	r3, [r7, #456]	@ 0x1c8
 800817a:	4313      	orrs	r3, r2
 800817c:	f043 427f 	orr.w	r2, r3, #4278190080	@ 0xff000000
 8008180:	f507 7392 	add.w	r3, r7, #292	@ 0x124
 8008184:	4611      	mov	r1, r2
 8008186:	4618      	mov	r0, r3
 8008188:	f7fd faf1 	bl	800576e <_ZN8touchgfx9colortypeC1Em>
 800818c:	f507 731a 	add.w	r3, r7, #616	@ 0x268
 8008190:	f5a3 73a2 	sub.w	r3, r3, #324	@ 0x144
 8008194:	681b      	ldr	r3, [r3, #0]
 8008196:	4619      	mov	r1, r3
 8008198:	4620      	mov	r0, r4
 800819a:	f7fd fc2b 	bl	80059f4 <_ZN8touchgfx13BoxWithBorder14setBorderColorENS_9colortypeE>
    MessageBoard_Background_1.setBorderSize(2);
 800819e:	f507 731a 	add.w	r3, r7, #616	@ 0x268
 80081a2:	f5a3 7319 	sub.w	r3, r3, #612	@ 0x264
 80081a6:	681b      	ldr	r3, [r3, #0]
 80081a8:	f503 63c3 	add.w	r3, r3, #1560	@ 0x618
 80081ac:	2102      	movs	r1, #2
 80081ae:	4618      	mov	r0, r3
 80081b0:	f7fd fc2e 	bl	8005a10 <_ZN8touchgfx13BoxWithBorder13setBorderSizeEt>
    Message_Board_Panel_1.add(MessageBoard_Background_1);
 80081b4:	f507 731a 	add.w	r3, r7, #616	@ 0x268
 80081b8:	f5a3 7319 	sub.w	r3, r3, #612	@ 0x264
 80081bc:	681b      	ldr	r3, [r3, #0]
 80081be:	f203 52ec 	addw	r2, r3, #1516	@ 0x5ec
 80081c2:	f507 731a 	add.w	r3, r7, #616	@ 0x268
 80081c6:	f5a3 7319 	sub.w	r3, r3, #612	@ 0x264
 80081ca:	681b      	ldr	r3, [r3, #0]
 80081cc:	f503 63c3 	add.w	r3, r3, #1560	@ 0x618
 80081d0:	4619      	mov	r1, r3
 80081d2:	4610      	mov	r0, r2
 80081d4:	f00f fd14 	bl	8017c00 <_ZN8touchgfx9Container3addERNS_8DrawableE>

    Message_Board_Textbox_1.setPosition(176, 0, 99, 20);
 80081d8:	f507 731a 	add.w	r3, r7, #616	@ 0x268
 80081dc:	f5a3 7319 	sub.w	r3, r3, #612	@ 0x264
 80081e0:	681b      	ldr	r3, [r3, #0]
 80081e2:	f203 604c 	addw	r0, r3, #1612	@ 0x64c
 80081e6:	2314      	movs	r3, #20
 80081e8:	9300      	str	r3, [sp, #0]
 80081ea:	2363      	movs	r3, #99	@ 0x63
 80081ec:	2200      	movs	r2, #0
 80081ee:	21b0      	movs	r1, #176	@ 0xb0
 80081f0:	f7fb fe67 	bl	8003ec2 <_ZN8touchgfx8Drawable11setPositionEssss>

    MessageBoard_Border_1_1.setPosition(0, 3, 99, 17);
 80081f4:	f507 731a 	add.w	r3, r7, #616	@ 0x268
 80081f8:	f5a3 7319 	sub.w	r3, r3, #612	@ 0x264
 80081fc:	681b      	ldr	r3, [r3, #0]
 80081fe:	f503 60cf 	add.w	r0, r3, #1656	@ 0x678
 8008202:	2311      	movs	r3, #17
 8008204:	9300      	str	r3, [sp, #0]
 8008206:	2363      	movs	r3, #99	@ 0x63
 8008208:	2203      	movs	r2, #3
 800820a:	2100      	movs	r1, #0
 800820c:	f7fb fe59 	bl	8003ec2 <_ZN8touchgfx8Drawable11setPositionEssss>
    MessageBoard_Border_1_1.setColor(touchgfx::Color::getColorFromRGB(0, 0, 0));
 8008210:	f507 731a 	add.w	r3, r7, #616	@ 0x268
 8008214:	f5a3 7319 	sub.w	r3, r3, #612	@ 0x264
 8008218:	681b      	ldr	r3, [r3, #0]
 800821a:	f503 64cf 	add.w	r4, r3, #1656	@ 0x678
 800821e:	2300      	movs	r3, #0
 8008220:	f887 31cd 	strb.w	r3, [r7, #461]	@ 0x1cd
 8008224:	2300      	movs	r3, #0
 8008226:	f887 31cc 	strb.w	r3, [r7, #460]	@ 0x1cc
 800822a:	2300      	movs	r3, #0
 800822c:	f887 31cb 	strb.w	r3, [r7, #459]	@ 0x1cb
 8008230:	f897 31cd 	ldrb.w	r3, [r7, #461]	@ 0x1cd
 8008234:	041a      	lsls	r2, r3, #16
 8008236:	f897 31cc 	ldrb.w	r3, [r7, #460]	@ 0x1cc
 800823a:	021b      	lsls	r3, r3, #8
 800823c:	431a      	orrs	r2, r3
 800823e:	f897 31cb 	ldrb.w	r3, [r7, #459]	@ 0x1cb
 8008242:	4313      	orrs	r3, r2
 8008244:	f043 427f 	orr.w	r2, r3, #4278190080	@ 0xff000000
 8008248:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 800824c:	4611      	mov	r1, r2
 800824e:	4618      	mov	r0, r3
 8008250:	f7fd fa8d 	bl	800576e <_ZN8touchgfx9colortypeC1Em>
 8008254:	f507 731a 	add.w	r3, r7, #616	@ 0x268
 8008258:	f5a3 73a4 	sub.w	r3, r3, #328	@ 0x148
 800825c:	681b      	ldr	r3, [r3, #0]
 800825e:	4619      	mov	r1, r3
 8008260:	4620      	mov	r0, r4
 8008262:	f7fd fb55 	bl	8005910 <_ZN8touchgfx3Box8setColorENS_9colortypeE>
    MessageBoard_Border_1_1.setBorderColor(touchgfx::Color::getColorFromRGB(237, 102, 99));
 8008266:	f507 731a 	add.w	r3, r7, #616	@ 0x268
 800826a:	f5a3 7319 	sub.w	r3, r3, #612	@ 0x264
 800826e:	681b      	ldr	r3, [r3, #0]
 8008270:	f503 64cf 	add.w	r4, r3, #1656	@ 0x678
 8008274:	23ed      	movs	r3, #237	@ 0xed
 8008276:	f887 31d0 	strb.w	r3, [r7, #464]	@ 0x1d0
 800827a:	2366      	movs	r3, #102	@ 0x66
 800827c:	f887 31cf 	strb.w	r3, [r7, #463]	@ 0x1cf
 8008280:	2363      	movs	r3, #99	@ 0x63
 8008282:	f887 31ce 	strb.w	r3, [r7, #462]	@ 0x1ce
 8008286:	f897 31d0 	ldrb.w	r3, [r7, #464]	@ 0x1d0
 800828a:	041a      	lsls	r2, r3, #16
 800828c:	f897 31cf 	ldrb.w	r3, [r7, #463]	@ 0x1cf
 8008290:	021b      	lsls	r3, r3, #8
 8008292:	431a      	orrs	r2, r3
 8008294:	f897 31ce 	ldrb.w	r3, [r7, #462]	@ 0x1ce
 8008298:	4313      	orrs	r3, r2
 800829a:	f043 427f 	orr.w	r2, r3, #4278190080	@ 0xff000000
 800829e:	f507 738e 	add.w	r3, r7, #284	@ 0x11c
 80082a2:	4611      	mov	r1, r2
 80082a4:	4618      	mov	r0, r3
 80082a6:	f7fd fa62 	bl	800576e <_ZN8touchgfx9colortypeC1Em>
 80082aa:	f507 731a 	add.w	r3, r7, #616	@ 0x268
 80082ae:	f5a3 73a6 	sub.w	r3, r3, #332	@ 0x14c
 80082b2:	681b      	ldr	r3, [r3, #0]
 80082b4:	4619      	mov	r1, r3
 80082b6:	4620      	mov	r0, r4
 80082b8:	f7fd fb9c 	bl	80059f4 <_ZN8touchgfx13BoxWithBorder14setBorderColorENS_9colortypeE>
    MessageBoard_Border_1_1.setBorderSize(3);
 80082bc:	f507 731a 	add.w	r3, r7, #616	@ 0x268
 80082c0:	f5a3 7319 	sub.w	r3, r3, #612	@ 0x264
 80082c4:	681b      	ldr	r3, [r3, #0]
 80082c6:	f503 63cf 	add.w	r3, r3, #1656	@ 0x678
 80082ca:	2103      	movs	r1, #3
 80082cc:	4618      	mov	r0, r3
 80082ce:	f7fd fb9f 	bl	8005a10 <_ZN8touchgfx13BoxWithBorder13setBorderSizeEt>
    Message_Board_Textbox_1.add(MessageBoard_Border_1_1);
 80082d2:	f507 731a 	add.w	r3, r7, #616	@ 0x268
 80082d6:	f5a3 7319 	sub.w	r3, r3, #612	@ 0x264
 80082da:	681b      	ldr	r3, [r3, #0]
 80082dc:	f203 624c 	addw	r2, r3, #1612	@ 0x64c
 80082e0:	f507 731a 	add.w	r3, r7, #616	@ 0x268
 80082e4:	f5a3 7319 	sub.w	r3, r3, #612	@ 0x264
 80082e8:	681b      	ldr	r3, [r3, #0]
 80082ea:	f503 63cf 	add.w	r3, r3, #1656	@ 0x678
 80082ee:	4619      	mov	r1, r3
 80082f0:	4610      	mov	r0, r2
 80082f2:	f00f fc85 	bl	8017c00 <_ZN8touchgfx9Container3addERNS_8DrawableE>

    MessageBoard_Text_1.setXY(7, 5);
 80082f6:	f507 731a 	add.w	r3, r7, #616	@ 0x268
 80082fa:	f5a3 7319 	sub.w	r3, r3, #612	@ 0x264
 80082fe:	681b      	ldr	r3, [r3, #0]
 8008300:	f203 63ac 	addw	r3, r3, #1708	@ 0x6ac
 8008304:	2205      	movs	r2, #5
 8008306:	2107      	movs	r1, #7
 8008308:	4618      	mov	r0, r3
 800830a:	f7fb fe33 	bl	8003f74 <_ZN8touchgfx8Drawable5setXYEss>
    MessageBoard_Text_1.setColor(touchgfx::Color::getColorFromRGB(255, 255, 255));
 800830e:	f507 731a 	add.w	r3, r7, #616	@ 0x268
 8008312:	f5a3 7319 	sub.w	r3, r3, #612	@ 0x264
 8008316:	681b      	ldr	r3, [r3, #0]
 8008318:	f203 64ac 	addw	r4, r3, #1708	@ 0x6ac
 800831c:	23ff      	movs	r3, #255	@ 0xff
 800831e:	f887 31d3 	strb.w	r3, [r7, #467]	@ 0x1d3
 8008322:	23ff      	movs	r3, #255	@ 0xff
 8008324:	f887 31d2 	strb.w	r3, [r7, #466]	@ 0x1d2
 8008328:	23ff      	movs	r3, #255	@ 0xff
 800832a:	f887 31d1 	strb.w	r3, [r7, #465]	@ 0x1d1
 800832e:	f897 31d3 	ldrb.w	r3, [r7, #467]	@ 0x1d3
 8008332:	041a      	lsls	r2, r3, #16
 8008334:	f897 31d2 	ldrb.w	r3, [r7, #466]	@ 0x1d2
 8008338:	021b      	lsls	r3, r3, #8
 800833a:	431a      	orrs	r2, r3
 800833c:	f897 31d1 	ldrb.w	r3, [r7, #465]	@ 0x1d1
 8008340:	4313      	orrs	r3, r2
 8008342:	f043 427f 	orr.w	r2, r3, #4278190080	@ 0xff000000
 8008346:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 800834a:	4611      	mov	r1, r2
 800834c:	4618      	mov	r0, r3
 800834e:	f7fd fa0e 	bl	800576e <_ZN8touchgfx9colortypeC1Em>
 8008352:	f507 731a 	add.w	r3, r7, #616	@ 0x268
 8008356:	f5a3 73a8 	sub.w	r3, r3, #336	@ 0x150
 800835a:	681b      	ldr	r3, [r3, #0]
 800835c:	461a      	mov	r2, r3
 800835e:	f8c7 41d4 	str.w	r4, [r7, #468]	@ 0x1d4
 8008362:	f507 731a 	add.w	r3, r7, #616	@ 0x268
 8008366:	f5a3 7311 	sub.w	r3, r3, #580	@ 0x244
 800836a:	601a      	str	r2, [r3, #0]
        this->color = color;
 800836c:	f8d7 31d4 	ldr.w	r3, [r7, #468]	@ 0x1d4
 8008370:	f507 721a 	add.w	r2, r7, #616	@ 0x268
 8008374:	f5a2 7211 	sub.w	r2, r2, #580	@ 0x244
 8008378:	6812      	ldr	r2, [r2, #0]
 800837a:	631a      	str	r2, [r3, #48]	@ 0x30
    }
 800837c:	bf00      	nop
    MessageBoard_Text_1.setLinespacing(0);
 800837e:	f507 731a 	add.w	r3, r7, #616	@ 0x268
 8008382:	f5a3 7319 	sub.w	r3, r3, #612	@ 0x264
 8008386:	681b      	ldr	r3, [r3, #0]
 8008388:	f203 63ac 	addw	r3, r3, #1708	@ 0x6ac
 800838c:	f8c7 31dc 	str.w	r3, [r7, #476]	@ 0x1dc
 8008390:	2300      	movs	r3, #0
 8008392:	f8a7 31da 	strh.w	r3, [r7, #474]	@ 0x1da
        linespace = space;
 8008396:	f8d7 31dc 	ldr.w	r3, [r7, #476]	@ 0x1dc
 800839a:	f8b7 21da 	ldrh.w	r2, [r7, #474]	@ 0x1da
 800839e:	869a      	strh	r2, [r3, #52]	@ 0x34
    }
 80083a0:	bf00      	nop
    MessageBoard_Text_1.setTypedText(touchgfx::TypedText(T___SINGLEUSE_0Y28));
 80083a2:	f507 731a 	add.w	r3, r7, #616	@ 0x268
 80083a6:	f5a3 7319 	sub.w	r3, r3, #612	@ 0x264
 80083aa:	681b      	ldr	r3, [r3, #0]
 80083ac:	f203 64ac 	addw	r4, r3, #1708	@ 0x6ac
 80083b0:	f107 0380 	add.w	r3, r7, #128	@ 0x80
 80083b4:	2102      	movs	r1, #2
 80083b6:	4618      	mov	r0, r3
 80083b8:	f7fd fb3a 	bl	8005a30 <_ZN8touchgfx9TypedTextC1Et>
 80083bc:	f107 0380 	add.w	r3, r7, #128	@ 0x80
 80083c0:	4619      	mov	r1, r3
 80083c2:	4620      	mov	r0, r4
 80083c4:	f011 fb47 	bl	8019a56 <_ZN8touchgfx8TextArea12setTypedTextERKNS_9TypedTextE>
 80083c8:	f107 0380 	add.w	r3, r7, #128	@ 0x80
 80083cc:	4618      	mov	r0, r3
 80083ce:	f7fb fcc5 	bl	8003d5c <_ZN8touchgfx9TypedTextD1Ev>
    Message_Board_Textbox_1.add(MessageBoard_Text_1);
 80083d2:	f507 731a 	add.w	r3, r7, #616	@ 0x268
 80083d6:	f5a3 7319 	sub.w	r3, r3, #612	@ 0x264
 80083da:	681b      	ldr	r3, [r3, #0]
 80083dc:	f203 624c 	addw	r2, r3, #1612	@ 0x64c
 80083e0:	f507 731a 	add.w	r3, r7, #616	@ 0x268
 80083e4:	f5a3 7319 	sub.w	r3, r3, #612	@ 0x264
 80083e8:	681b      	ldr	r3, [r3, #0]
 80083ea:	f203 63ac 	addw	r3, r3, #1708	@ 0x6ac
 80083ee:	4619      	mov	r1, r3
 80083f0:	4610      	mov	r0, r2
 80083f2:	f00f fc05 	bl	8017c00 <_ZN8touchgfx9Container3addERNS_8DrawableE>
    Message_Board_Panel_1.add(Message_Board_Textbox_1);
 80083f6:	f507 731a 	add.w	r3, r7, #616	@ 0x268
 80083fa:	f5a3 7319 	sub.w	r3, r3, #612	@ 0x264
 80083fe:	681b      	ldr	r3, [r3, #0]
 8008400:	f203 52ec 	addw	r2, r3, #1516	@ 0x5ec
 8008404:	f507 731a 	add.w	r3, r7, #616	@ 0x268
 8008408:	f5a3 7319 	sub.w	r3, r3, #612	@ 0x264
 800840c:	681b      	ldr	r3, [r3, #0]
 800840e:	f203 634c 	addw	r3, r3, #1612	@ 0x64c
 8008412:	4619      	mov	r1, r3
 8008414:	4610      	mov	r0, r2
 8008416:	f00f fbf3 	bl	8017c00 <_ZN8touchgfx9Container3addERNS_8DrawableE>

    VoiceComm_Textbox_1.setPosition(294, 0, 114, 98);
 800841a:	f507 731a 	add.w	r3, r7, #616	@ 0x268
 800841e:	f5a3 7319 	sub.w	r3, r3, #612	@ 0x264
 8008422:	681b      	ldr	r3, [r3, #0]
 8008424:	f503 60dd 	add.w	r0, r3, #1768	@ 0x6e8
 8008428:	2362      	movs	r3, #98	@ 0x62
 800842a:	9300      	str	r3, [sp, #0]
 800842c:	2372      	movs	r3, #114	@ 0x72
 800842e:	2200      	movs	r2, #0
 8008430:	f44f 7193 	mov.w	r1, #294	@ 0x126
 8008434:	f7fb fd45 	bl	8003ec2 <_ZN8touchgfx8Drawable11setPositionEssss>

    VoiceCommMess_Background.setPosition(2, 2, 112, 96);
 8008438:	f507 731a 	add.w	r3, r7, #616	@ 0x268
 800843c:	f5a3 7319 	sub.w	r3, r3, #612	@ 0x264
 8008440:	681b      	ldr	r3, [r3, #0]
 8008442:	f203 7014 	addw	r0, r3, #1812	@ 0x714
 8008446:	2360      	movs	r3, #96	@ 0x60
 8008448:	9300      	str	r3, [sp, #0]
 800844a:	2370      	movs	r3, #112	@ 0x70
 800844c:	2202      	movs	r2, #2
 800844e:	2102      	movs	r1, #2
 8008450:	f7fb fd37 	bl	8003ec2 <_ZN8touchgfx8Drawable11setPositionEssss>
    VoiceCommMess_Background.setColor(touchgfx::Color::getColorFromRGB(237, 102, 99));
 8008454:	f507 731a 	add.w	r3, r7, #616	@ 0x268
 8008458:	f5a3 7319 	sub.w	r3, r3, #612	@ 0x264
 800845c:	681b      	ldr	r3, [r3, #0]
 800845e:	f203 7414 	addw	r4, r3, #1812	@ 0x714
 8008462:	23ed      	movs	r3, #237	@ 0xed
 8008464:	f887 31e3 	strb.w	r3, [r7, #483]	@ 0x1e3
 8008468:	2366      	movs	r3, #102	@ 0x66
 800846a:	f887 31e2 	strb.w	r3, [r7, #482]	@ 0x1e2
 800846e:	2363      	movs	r3, #99	@ 0x63
 8008470:	f887 31e1 	strb.w	r3, [r7, #481]	@ 0x1e1
 8008474:	f897 31e3 	ldrb.w	r3, [r7, #483]	@ 0x1e3
 8008478:	041a      	lsls	r2, r3, #16
 800847a:	f897 31e2 	ldrb.w	r3, [r7, #482]	@ 0x1e2
 800847e:	021b      	lsls	r3, r3, #8
 8008480:	431a      	orrs	r2, r3
 8008482:	f897 31e1 	ldrb.w	r3, [r7, #481]	@ 0x1e1
 8008486:	4313      	orrs	r3, r2
 8008488:	f043 427f 	orr.w	r2, r3, #4278190080	@ 0xff000000
 800848c:	f507 738a 	add.w	r3, r7, #276	@ 0x114
 8008490:	4611      	mov	r1, r2
 8008492:	4618      	mov	r0, r3
 8008494:	f7fd f96b 	bl	800576e <_ZN8touchgfx9colortypeC1Em>
 8008498:	f507 731a 	add.w	r3, r7, #616	@ 0x268
 800849c:	f5a3 73aa 	sub.w	r3, r3, #340	@ 0x154
 80084a0:	681b      	ldr	r3, [r3, #0]
 80084a2:	4619      	mov	r1, r3
 80084a4:	4620      	mov	r0, r4
 80084a6:	f7fd fa33 	bl	8005910 <_ZN8touchgfx3Box8setColorENS_9colortypeE>
    VoiceCommMess_Background.setBorderColor(touchgfx::Color::getColorFromRGB(0, 0, 0));
 80084aa:	f507 731a 	add.w	r3, r7, #616	@ 0x268
 80084ae:	f5a3 7319 	sub.w	r3, r3, #612	@ 0x264
 80084b2:	681b      	ldr	r3, [r3, #0]
 80084b4:	f203 7414 	addw	r4, r3, #1812	@ 0x714
 80084b8:	2300      	movs	r3, #0
 80084ba:	f887 31e6 	strb.w	r3, [r7, #486]	@ 0x1e6
 80084be:	2300      	movs	r3, #0
 80084c0:	f887 31e5 	strb.w	r3, [r7, #485]	@ 0x1e5
 80084c4:	2300      	movs	r3, #0
 80084c6:	f887 31e4 	strb.w	r3, [r7, #484]	@ 0x1e4
 80084ca:	f897 31e6 	ldrb.w	r3, [r7, #486]	@ 0x1e6
 80084ce:	041a      	lsls	r2, r3, #16
 80084d0:	f897 31e5 	ldrb.w	r3, [r7, #485]	@ 0x1e5
 80084d4:	021b      	lsls	r3, r3, #8
 80084d6:	431a      	orrs	r2, r3
 80084d8:	f897 31e4 	ldrb.w	r3, [r7, #484]	@ 0x1e4
 80084dc:	4313      	orrs	r3, r2
 80084de:	f043 427f 	orr.w	r2, r3, #4278190080	@ 0xff000000
 80084e2:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 80084e6:	4611      	mov	r1, r2
 80084e8:	4618      	mov	r0, r3
 80084ea:	f7fd f940 	bl	800576e <_ZN8touchgfx9colortypeC1Em>
 80084ee:	f507 731a 	add.w	r3, r7, #616	@ 0x268
 80084f2:	f5a3 73ac 	sub.w	r3, r3, #344	@ 0x158
 80084f6:	681b      	ldr	r3, [r3, #0]
 80084f8:	4619      	mov	r1, r3
 80084fa:	4620      	mov	r0, r4
 80084fc:	f7fd fa7a 	bl	80059f4 <_ZN8touchgfx13BoxWithBorder14setBorderColorENS_9colortypeE>
    VoiceCommMess_Background.setBorderSize(3);
 8008500:	f507 731a 	add.w	r3, r7, #616	@ 0x268
 8008504:	f5a3 7319 	sub.w	r3, r3, #612	@ 0x264
 8008508:	681b      	ldr	r3, [r3, #0]
 800850a:	f203 7314 	addw	r3, r3, #1812	@ 0x714
 800850e:	2103      	movs	r1, #3
 8008510:	4618      	mov	r0, r3
 8008512:	f7fd fa7d 	bl	8005a10 <_ZN8touchgfx13BoxWithBorder13setBorderSizeEt>
    VoiceComm_Textbox_1.add(VoiceCommMess_Background);
 8008516:	f507 731a 	add.w	r3, r7, #616	@ 0x268
 800851a:	f5a3 7319 	sub.w	r3, r3, #612	@ 0x264
 800851e:	681b      	ldr	r3, [r3, #0]
 8008520:	f503 62dd 	add.w	r2, r3, #1768	@ 0x6e8
 8008524:	f507 731a 	add.w	r3, r7, #616	@ 0x268
 8008528:	f5a3 7319 	sub.w	r3, r3, #612	@ 0x264
 800852c:	681b      	ldr	r3, [r3, #0]
 800852e:	f203 7314 	addw	r3, r3, #1812	@ 0x714
 8008532:	4619      	mov	r1, r3
 8008534:	4610      	mov	r0, r2
 8008536:	f00f fb63 	bl	8017c00 <_ZN8touchgfx9Container3addERNS_8DrawableE>

    VoiceCommMess_Background2.setPosition(16, 10, 84, 80);
 800853a:	f507 731a 	add.w	r3, r7, #616	@ 0x268
 800853e:	f5a3 7319 	sub.w	r3, r3, #612	@ 0x264
 8008542:	681b      	ldr	r3, [r3, #0]
 8008544:	f503 60e9 	add.w	r0, r3, #1864	@ 0x748
 8008548:	2350      	movs	r3, #80	@ 0x50
 800854a:	9300      	str	r3, [sp, #0]
 800854c:	2354      	movs	r3, #84	@ 0x54
 800854e:	220a      	movs	r2, #10
 8008550:	2110      	movs	r1, #16
 8008552:	f7fb fcb6 	bl	8003ec2 <_ZN8touchgfx8Drawable11setPositionEssss>
    VoiceCommMess_Background2.setColor(touchgfx::Color::getColorFromRGB(0, 0, 0));
 8008556:	f507 731a 	add.w	r3, r7, #616	@ 0x268
 800855a:	f5a3 7319 	sub.w	r3, r3, #612	@ 0x264
 800855e:	681b      	ldr	r3, [r3, #0]
 8008560:	f503 64e9 	add.w	r4, r3, #1864	@ 0x748
 8008564:	2300      	movs	r3, #0
 8008566:	f887 31e9 	strb.w	r3, [r7, #489]	@ 0x1e9
 800856a:	2300      	movs	r3, #0
 800856c:	f887 31e8 	strb.w	r3, [r7, #488]	@ 0x1e8
 8008570:	2300      	movs	r3, #0
 8008572:	f887 31e7 	strb.w	r3, [r7, #487]	@ 0x1e7
 8008576:	f897 31e9 	ldrb.w	r3, [r7, #489]	@ 0x1e9
 800857a:	041a      	lsls	r2, r3, #16
 800857c:	f897 31e8 	ldrb.w	r3, [r7, #488]	@ 0x1e8
 8008580:	021b      	lsls	r3, r3, #8
 8008582:	431a      	orrs	r2, r3
 8008584:	f897 31e7 	ldrb.w	r3, [r7, #487]	@ 0x1e7
 8008588:	4313      	orrs	r3, r2
 800858a:	f043 427f 	orr.w	r2, r3, #4278190080	@ 0xff000000
 800858e:	f507 7386 	add.w	r3, r7, #268	@ 0x10c
 8008592:	4611      	mov	r1, r2
 8008594:	4618      	mov	r0, r3
 8008596:	f7fd f8ea 	bl	800576e <_ZN8touchgfx9colortypeC1Em>
 800859a:	f507 731a 	add.w	r3, r7, #616	@ 0x268
 800859e:	f5a3 73ae 	sub.w	r3, r3, #348	@ 0x15c
 80085a2:	681b      	ldr	r3, [r3, #0]
 80085a4:	4619      	mov	r1, r3
 80085a6:	4620      	mov	r0, r4
 80085a8:	f7fd f9b2 	bl	8005910 <_ZN8touchgfx3Box8setColorENS_9colortypeE>
    VoiceCommMess_Background2.setBorderColor(touchgfx::Color::getColorFromRGB(67, 101, 139));
 80085ac:	f507 731a 	add.w	r3, r7, #616	@ 0x268
 80085b0:	f5a3 7319 	sub.w	r3, r3, #612	@ 0x264
 80085b4:	681b      	ldr	r3, [r3, #0]
 80085b6:	f503 64e9 	add.w	r4, r3, #1864	@ 0x748
 80085ba:	2343      	movs	r3, #67	@ 0x43
 80085bc:	f887 31ec 	strb.w	r3, [r7, #492]	@ 0x1ec
 80085c0:	2365      	movs	r3, #101	@ 0x65
 80085c2:	f887 31eb 	strb.w	r3, [r7, #491]	@ 0x1eb
 80085c6:	238b      	movs	r3, #139	@ 0x8b
 80085c8:	f887 31ea 	strb.w	r3, [r7, #490]	@ 0x1ea
 80085cc:	f897 31ec 	ldrb.w	r3, [r7, #492]	@ 0x1ec
 80085d0:	041a      	lsls	r2, r3, #16
 80085d2:	f897 31eb 	ldrb.w	r3, [r7, #491]	@ 0x1eb
 80085d6:	021b      	lsls	r3, r3, #8
 80085d8:	431a      	orrs	r2, r3
 80085da:	f897 31ea 	ldrb.w	r3, [r7, #490]	@ 0x1ea
 80085de:	4313      	orrs	r3, r2
 80085e0:	f043 427f 	orr.w	r2, r3, #4278190080	@ 0xff000000
 80085e4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80085e8:	4611      	mov	r1, r2
 80085ea:	4618      	mov	r0, r3
 80085ec:	f7fd f8bf 	bl	800576e <_ZN8touchgfx9colortypeC1Em>
 80085f0:	f507 731a 	add.w	r3, r7, #616	@ 0x268
 80085f4:	f5a3 73b0 	sub.w	r3, r3, #352	@ 0x160
 80085f8:	681b      	ldr	r3, [r3, #0]
 80085fa:	4619      	mov	r1, r3
 80085fc:	4620      	mov	r0, r4
 80085fe:	f7fd f9f9 	bl	80059f4 <_ZN8touchgfx13BoxWithBorder14setBorderColorENS_9colortypeE>
    VoiceCommMess_Background2.setBorderSize(3);
 8008602:	f507 731a 	add.w	r3, r7, #616	@ 0x268
 8008606:	f5a3 7319 	sub.w	r3, r3, #612	@ 0x264
 800860a:	681b      	ldr	r3, [r3, #0]
 800860c:	f503 63e9 	add.w	r3, r3, #1864	@ 0x748
 8008610:	2103      	movs	r1, #3
 8008612:	4618      	mov	r0, r3
 8008614:	f7fd f9fc 	bl	8005a10 <_ZN8touchgfx13BoxWithBorder13setBorderSizeEt>
    VoiceComm_Textbox_1.add(VoiceCommMess_Background2);
 8008618:	f507 731a 	add.w	r3, r7, #616	@ 0x268
 800861c:	f5a3 7319 	sub.w	r3, r3, #612	@ 0x264
 8008620:	681b      	ldr	r3, [r3, #0]
 8008622:	f503 62dd 	add.w	r2, r3, #1768	@ 0x6e8
 8008626:	f507 731a 	add.w	r3, r7, #616	@ 0x268
 800862a:	f5a3 7319 	sub.w	r3, r3, #612	@ 0x264
 800862e:	681b      	ldr	r3, [r3, #0]
 8008630:	f503 63e9 	add.w	r3, r3, #1864	@ 0x748
 8008634:	4619      	mov	r1, r3
 8008636:	4610      	mov	r0, r2
 8008638:	f00f fae2 	bl	8017c00 <_ZN8touchgfx9Container3addERNS_8DrawableE>

    VoiceCommMess_Text_On.setXY(36, 13);
 800863c:	f507 731a 	add.w	r3, r7, #616	@ 0x268
 8008640:	f5a3 7319 	sub.w	r3, r3, #612	@ 0x264
 8008644:	681b      	ldr	r3, [r3, #0]
 8008646:	f203 737c 	addw	r3, r3, #1916	@ 0x77c
 800864a:	220d      	movs	r2, #13
 800864c:	2124      	movs	r1, #36	@ 0x24
 800864e:	4618      	mov	r0, r3
 8008650:	f7fb fc90 	bl	8003f74 <_ZN8touchgfx8Drawable5setXYEss>
    VoiceCommMess_Text_On.setColor(touchgfx::Color::getColorFromRGB(255, 255, 255));
 8008654:	f507 731a 	add.w	r3, r7, #616	@ 0x268
 8008658:	f5a3 7319 	sub.w	r3, r3, #612	@ 0x264
 800865c:	681b      	ldr	r3, [r3, #0]
 800865e:	f203 747c 	addw	r4, r3, #1916	@ 0x77c
 8008662:	23ff      	movs	r3, #255	@ 0xff
 8008664:	f887 31ef 	strb.w	r3, [r7, #495]	@ 0x1ef
 8008668:	23ff      	movs	r3, #255	@ 0xff
 800866a:	f887 31ee 	strb.w	r3, [r7, #494]	@ 0x1ee
 800866e:	23ff      	movs	r3, #255	@ 0xff
 8008670:	f887 31ed 	strb.w	r3, [r7, #493]	@ 0x1ed
 8008674:	f897 31ef 	ldrb.w	r3, [r7, #495]	@ 0x1ef
 8008678:	041a      	lsls	r2, r3, #16
 800867a:	f897 31ee 	ldrb.w	r3, [r7, #494]	@ 0x1ee
 800867e:	021b      	lsls	r3, r3, #8
 8008680:	431a      	orrs	r2, r3
 8008682:	f897 31ed 	ldrb.w	r3, [r7, #493]	@ 0x1ed
 8008686:	4313      	orrs	r3, r2
 8008688:	f043 427f 	orr.w	r2, r3, #4278190080	@ 0xff000000
 800868c:	f507 7382 	add.w	r3, r7, #260	@ 0x104
 8008690:	4611      	mov	r1, r2
 8008692:	4618      	mov	r0, r3
 8008694:	f7fd f86b 	bl	800576e <_ZN8touchgfx9colortypeC1Em>
 8008698:	f507 731a 	add.w	r3, r7, #616	@ 0x268
 800869c:	f5a3 73b2 	sub.w	r3, r3, #356	@ 0x164
 80086a0:	681b      	ldr	r3, [r3, #0]
 80086a2:	461a      	mov	r2, r3
 80086a4:	f8c7 41f0 	str.w	r4, [r7, #496]	@ 0x1f0
 80086a8:	f507 731a 	add.w	r3, r7, #616	@ 0x268
 80086ac:	f5a3 7312 	sub.w	r3, r3, #584	@ 0x248
 80086b0:	601a      	str	r2, [r3, #0]
        this->color = color;
 80086b2:	f8d7 31f0 	ldr.w	r3, [r7, #496]	@ 0x1f0
 80086b6:	f507 721a 	add.w	r2, r7, #616	@ 0x268
 80086ba:	f5a2 7212 	sub.w	r2, r2, #584	@ 0x248
 80086be:	6812      	ldr	r2, [r2, #0]
 80086c0:	631a      	str	r2, [r3, #48]	@ 0x30
    }
 80086c2:	bf00      	nop
    VoiceCommMess_Text_On.setLinespacing(0);
 80086c4:	f507 731a 	add.w	r3, r7, #616	@ 0x268
 80086c8:	f5a3 7319 	sub.w	r3, r3, #612	@ 0x264
 80086cc:	681b      	ldr	r3, [r3, #0]
 80086ce:	f203 737c 	addw	r3, r3, #1916	@ 0x77c
 80086d2:	f8c7 31f8 	str.w	r3, [r7, #504]	@ 0x1f8
 80086d6:	2300      	movs	r3, #0
 80086d8:	f8a7 31f6 	strh.w	r3, [r7, #502]	@ 0x1f6
        linespace = space;
 80086dc:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 80086e0:	f8b7 21f6 	ldrh.w	r2, [r7, #502]	@ 0x1f6
 80086e4:	869a      	strh	r2, [r3, #52]	@ 0x34
    }
 80086e6:	bf00      	nop
    VoiceCommMess_Text_On.setTypedText(touchgfx::TypedText(T___SINGLEUSE_LNSV));
 80086e8:	f507 731a 	add.w	r3, r7, #616	@ 0x268
 80086ec:	f5a3 7319 	sub.w	r3, r3, #612	@ 0x264
 80086f0:	681b      	ldr	r3, [r3, #0]
 80086f2:	f203 747c 	addw	r4, r3, #1916	@ 0x77c
 80086f6:	f107 0388 	add.w	r3, r7, #136	@ 0x88
 80086fa:	2105      	movs	r1, #5
 80086fc:	4618      	mov	r0, r3
 80086fe:	f7fd f997 	bl	8005a30 <_ZN8touchgfx9TypedTextC1Et>
 8008702:	f107 0388 	add.w	r3, r7, #136	@ 0x88
 8008706:	4619      	mov	r1, r3
 8008708:	4620      	mov	r0, r4
 800870a:	f011 f9a4 	bl	8019a56 <_ZN8touchgfx8TextArea12setTypedTextERKNS_9TypedTextE>
 800870e:	f107 0388 	add.w	r3, r7, #136	@ 0x88
 8008712:	4618      	mov	r0, r3
 8008714:	f7fb fb22 	bl	8003d5c <_ZN8touchgfx9TypedTextD1Ev>
    VoiceComm_Textbox_1.add(VoiceCommMess_Text_On);
 8008718:	f507 731a 	add.w	r3, r7, #616	@ 0x268
 800871c:	f5a3 7319 	sub.w	r3, r3, #612	@ 0x264
 8008720:	681b      	ldr	r3, [r3, #0]
 8008722:	f503 62dd 	add.w	r2, r3, #1768	@ 0x6e8
 8008726:	f507 731a 	add.w	r3, r7, #616	@ 0x268
 800872a:	f5a3 7319 	sub.w	r3, r3, #612	@ 0x264
 800872e:	681b      	ldr	r3, [r3, #0]
 8008730:	f203 737c 	addw	r3, r3, #1916	@ 0x77c
 8008734:	4619      	mov	r1, r3
 8008736:	4610      	mov	r0, r2
 8008738:	f00f fa62 	bl	8017c00 <_ZN8touchgfx9Container3addERNS_8DrawableE>

    VoiceCommMess_Text_Off.setXY(36, 13);
 800873c:	f507 731a 	add.w	r3, r7, #616	@ 0x268
 8008740:	f5a3 7319 	sub.w	r3, r3, #612	@ 0x264
 8008744:	681b      	ldr	r3, [r3, #0]
 8008746:	f503 63f7 	add.w	r3, r3, #1976	@ 0x7b8
 800874a:	220d      	movs	r2, #13
 800874c:	2124      	movs	r1, #36	@ 0x24
 800874e:	4618      	mov	r0, r3
 8008750:	f7fb fc10 	bl	8003f74 <_ZN8touchgfx8Drawable5setXYEss>
    VoiceCommMess_Text_Off.setVisible(false);
 8008754:	f507 731a 	add.w	r3, r7, #616	@ 0x268
 8008758:	f5a3 7319 	sub.w	r3, r3, #612	@ 0x264
 800875c:	681b      	ldr	r3, [r3, #0]
 800875e:	f503 63f7 	add.w	r3, r3, #1976	@ 0x7b8
 8008762:	2100      	movs	r1, #0
 8008764:	4618      	mov	r0, r3
 8008766:	f7fe f96a 	bl	8006a3e <_ZN8touchgfx8Drawable10setVisibleEb>
    VoiceCommMess_Text_Off.setColor(touchgfx::Color::getColorFromRGB(255, 255, 255));
 800876a:	f507 731a 	add.w	r3, r7, #616	@ 0x268
 800876e:	f5a3 7319 	sub.w	r3, r3, #612	@ 0x264
 8008772:	681b      	ldr	r3, [r3, #0]
 8008774:	f503 64f7 	add.w	r4, r3, #1976	@ 0x7b8
 8008778:	23ff      	movs	r3, #255	@ 0xff
 800877a:	f887 31ff 	strb.w	r3, [r7, #511]	@ 0x1ff
 800877e:	23ff      	movs	r3, #255	@ 0xff
 8008780:	f887 31fe 	strb.w	r3, [r7, #510]	@ 0x1fe
 8008784:	23ff      	movs	r3, #255	@ 0xff
 8008786:	f887 31fd 	strb.w	r3, [r7, #509]	@ 0x1fd
 800878a:	f897 31ff 	ldrb.w	r3, [r7, #511]	@ 0x1ff
 800878e:	041a      	lsls	r2, r3, #16
 8008790:	f897 31fe 	ldrb.w	r3, [r7, #510]	@ 0x1fe
 8008794:	021b      	lsls	r3, r3, #8
 8008796:	431a      	orrs	r2, r3
 8008798:	f897 31fd 	ldrb.w	r3, [r7, #509]	@ 0x1fd
 800879c:	4313      	orrs	r3, r2
 800879e:	f043 427f 	orr.w	r2, r3, #4278190080	@ 0xff000000
 80087a2:	f507 7380 	add.w	r3, r7, #256	@ 0x100
 80087a6:	4611      	mov	r1, r2
 80087a8:	4618      	mov	r0, r3
 80087aa:	f7fc ffe0 	bl	800576e <_ZN8touchgfx9colortypeC1Em>
 80087ae:	f507 731a 	add.w	r3, r7, #616	@ 0x268
 80087b2:	f5a3 73b4 	sub.w	r3, r3, #360	@ 0x168
 80087b6:	681b      	ldr	r3, [r3, #0]
 80087b8:	461a      	mov	r2, r3
 80087ba:	f8c7 4200 	str.w	r4, [r7, #512]	@ 0x200
 80087be:	f507 731a 	add.w	r3, r7, #616	@ 0x268
 80087c2:	f5a3 7313 	sub.w	r3, r3, #588	@ 0x24c
 80087c6:	601a      	str	r2, [r3, #0]
        this->color = color;
 80087c8:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 80087cc:	f507 721a 	add.w	r2, r7, #616	@ 0x268
 80087d0:	f5a2 7213 	sub.w	r2, r2, #588	@ 0x24c
 80087d4:	6812      	ldr	r2, [r2, #0]
 80087d6:	631a      	str	r2, [r3, #48]	@ 0x30
    }
 80087d8:	bf00      	nop
    VoiceCommMess_Text_Off.setLinespacing(0);
 80087da:	f507 731a 	add.w	r3, r7, #616	@ 0x268
 80087de:	f5a3 7319 	sub.w	r3, r3, #612	@ 0x264
 80087e2:	681b      	ldr	r3, [r3, #0]
 80087e4:	f503 63f7 	add.w	r3, r3, #1976	@ 0x7b8
 80087e8:	f8c7 3208 	str.w	r3, [r7, #520]	@ 0x208
 80087ec:	2300      	movs	r3, #0
 80087ee:	f8a7 3206 	strh.w	r3, [r7, #518]	@ 0x206
        linespace = space;
 80087f2:	f8d7 3208 	ldr.w	r3, [r7, #520]	@ 0x208
 80087f6:	f8b7 2206 	ldrh.w	r2, [r7, #518]	@ 0x206
 80087fa:	869a      	strh	r2, [r3, #52]	@ 0x34
    }
 80087fc:	bf00      	nop
    VoiceCommMess_Text_Off.setTypedText(touchgfx::TypedText(T___SINGLEUSE_GO11));
 80087fe:	f507 731a 	add.w	r3, r7, #616	@ 0x268
 8008802:	f5a3 7319 	sub.w	r3, r3, #612	@ 0x264
 8008806:	681b      	ldr	r3, [r3, #0]
 8008808:	f503 64f7 	add.w	r4, r3, #1976	@ 0x7b8
 800880c:	f107 0390 	add.w	r3, r7, #144	@ 0x90
 8008810:	210a      	movs	r1, #10
 8008812:	4618      	mov	r0, r3
 8008814:	f7fd f90c 	bl	8005a30 <_ZN8touchgfx9TypedTextC1Et>
 8008818:	f107 0390 	add.w	r3, r7, #144	@ 0x90
 800881c:	4619      	mov	r1, r3
 800881e:	4620      	mov	r0, r4
 8008820:	f011 f919 	bl	8019a56 <_ZN8touchgfx8TextArea12setTypedTextERKNS_9TypedTextE>
 8008824:	f107 0390 	add.w	r3, r7, #144	@ 0x90
 8008828:	4618      	mov	r0, r3
 800882a:	f7fb fa97 	bl	8003d5c <_ZN8touchgfx9TypedTextD1Ev>
    VoiceComm_Textbox_1.add(VoiceCommMess_Text_Off);
 800882e:	f507 731a 	add.w	r3, r7, #616	@ 0x268
 8008832:	f5a3 7319 	sub.w	r3, r3, #612	@ 0x264
 8008836:	681b      	ldr	r3, [r3, #0]
 8008838:	f503 62dd 	add.w	r2, r3, #1768	@ 0x6e8
 800883c:	f507 731a 	add.w	r3, r7, #616	@ 0x268
 8008840:	f5a3 7319 	sub.w	r3, r3, #612	@ 0x264
 8008844:	681b      	ldr	r3, [r3, #0]
 8008846:	f503 63f7 	add.w	r3, r3, #1976	@ 0x7b8
 800884a:	4619      	mov	r1, r3
 800884c:	4610      	mov	r0, r2
 800884e:	f00f f9d7 	bl	8017c00 <_ZN8touchgfx9Container3addERNS_8DrawableE>
    Message_Board_Panel_1.add(VoiceComm_Textbox_1);
 8008852:	f507 731a 	add.w	r3, r7, #616	@ 0x268
 8008856:	f5a3 7319 	sub.w	r3, r3, #612	@ 0x264
 800885a:	681b      	ldr	r3, [r3, #0]
 800885c:	f203 52ec 	addw	r2, r3, #1516	@ 0x5ec
 8008860:	f507 731a 	add.w	r3, r7, #616	@ 0x268
 8008864:	f5a3 7319 	sub.w	r3, r3, #612	@ 0x264
 8008868:	681b      	ldr	r3, [r3, #0]
 800886a:	f503 63dd 	add.w	r3, r3, #1768	@ 0x6e8
 800886e:	4619      	mov	r1, r3
 8008870:	4610      	mov	r0, r2
 8008872:	f00f f9c5 	bl	8017c00 <_ZN8touchgfx9Container3addERNS_8DrawableE>

    AnomalyWarning_Textbox_1_1.setPosition(42, 0, 117, 98);
 8008876:	f507 731a 	add.w	r3, r7, #616	@ 0x268
 800887a:	f5a3 7319 	sub.w	r3, r3, #612	@ 0x264
 800887e:	681b      	ldr	r3, [r3, #0]
 8008880:	f203 70f4 	addw	r0, r3, #2036	@ 0x7f4
 8008884:	2362      	movs	r3, #98	@ 0x62
 8008886:	9300      	str	r3, [sp, #0]
 8008888:	2375      	movs	r3, #117	@ 0x75
 800888a:	2200      	movs	r2, #0
 800888c:	212a      	movs	r1, #42	@ 0x2a
 800888e:	f7fb fb18 	bl	8003ec2 <_ZN8touchgfx8Drawable11setPositionEssss>

    MessageBoard_Border_1_1_1_2.setPosition(2, 2, 115, 96);
 8008892:	f507 731a 	add.w	r3, r7, #616	@ 0x268
 8008896:	f5a3 7319 	sub.w	r3, r3, #612	@ 0x264
 800889a:	681b      	ldr	r3, [r3, #0]
 800889c:	f503 6002 	add.w	r0, r3, #2080	@ 0x820
 80088a0:	2360      	movs	r3, #96	@ 0x60
 80088a2:	9300      	str	r3, [sp, #0]
 80088a4:	2373      	movs	r3, #115	@ 0x73
 80088a6:	2202      	movs	r2, #2
 80088a8:	2102      	movs	r1, #2
 80088aa:	f7fb fb0a 	bl	8003ec2 <_ZN8touchgfx8Drawable11setPositionEssss>
    MessageBoard_Border_1_1_1_2.setColor(touchgfx::Color::getColorFromRGB(237, 102, 99));
 80088ae:	f507 731a 	add.w	r3, r7, #616	@ 0x268
 80088b2:	f5a3 7319 	sub.w	r3, r3, #612	@ 0x264
 80088b6:	681b      	ldr	r3, [r3, #0]
 80088b8:	f503 6402 	add.w	r4, r3, #2080	@ 0x820
 80088bc:	23ed      	movs	r3, #237	@ 0xed
 80088be:	f887 320f 	strb.w	r3, [r7, #527]	@ 0x20f
 80088c2:	2366      	movs	r3, #102	@ 0x66
 80088c4:	f887 320e 	strb.w	r3, [r7, #526]	@ 0x20e
 80088c8:	2363      	movs	r3, #99	@ 0x63
 80088ca:	f887 320d 	strb.w	r3, [r7, #525]	@ 0x20d
 80088ce:	f897 320f 	ldrb.w	r3, [r7, #527]	@ 0x20f
 80088d2:	041a      	lsls	r2, r3, #16
 80088d4:	f897 320e 	ldrb.w	r3, [r7, #526]	@ 0x20e
 80088d8:	021b      	lsls	r3, r3, #8
 80088da:	431a      	orrs	r2, r3
 80088dc:	f897 320d 	ldrb.w	r3, [r7, #525]	@ 0x20d
 80088e0:	4313      	orrs	r3, r2
 80088e2:	f043 427f 	orr.w	r2, r3, #4278190080	@ 0xff000000
 80088e6:	f107 03fc 	add.w	r3, r7, #252	@ 0xfc
 80088ea:	4611      	mov	r1, r2
 80088ec:	4618      	mov	r0, r3
 80088ee:	f7fc ff3e 	bl	800576e <_ZN8touchgfx9colortypeC1Em>
 80088f2:	f507 731a 	add.w	r3, r7, #616	@ 0x268
 80088f6:	f5a3 73b6 	sub.w	r3, r3, #364	@ 0x16c
 80088fa:	681b      	ldr	r3, [r3, #0]
 80088fc:	4619      	mov	r1, r3
 80088fe:	4620      	mov	r0, r4
 8008900:	f7fd f806 	bl	8005910 <_ZN8touchgfx3Box8setColorENS_9colortypeE>
    MessageBoard_Border_1_1_1_2.setBorderColor(touchgfx::Color::getColorFromRGB(0, 0, 0));
 8008904:	f507 731a 	add.w	r3, r7, #616	@ 0x268
 8008908:	f5a3 7319 	sub.w	r3, r3, #612	@ 0x264
 800890c:	681b      	ldr	r3, [r3, #0]
 800890e:	f503 6402 	add.w	r4, r3, #2080	@ 0x820
 8008912:	2300      	movs	r3, #0
 8008914:	f887 3212 	strb.w	r3, [r7, #530]	@ 0x212
 8008918:	2300      	movs	r3, #0
 800891a:	f887 3211 	strb.w	r3, [r7, #529]	@ 0x211
 800891e:	2300      	movs	r3, #0
 8008920:	f887 3210 	strb.w	r3, [r7, #528]	@ 0x210
 8008924:	f897 3212 	ldrb.w	r3, [r7, #530]	@ 0x212
 8008928:	041a      	lsls	r2, r3, #16
 800892a:	f897 3211 	ldrb.w	r3, [r7, #529]	@ 0x211
 800892e:	021b      	lsls	r3, r3, #8
 8008930:	431a      	orrs	r2, r3
 8008932:	f897 3210 	ldrb.w	r3, [r7, #528]	@ 0x210
 8008936:	4313      	orrs	r3, r2
 8008938:	f043 427f 	orr.w	r2, r3, #4278190080	@ 0xff000000
 800893c:	f107 03f8 	add.w	r3, r7, #248	@ 0xf8
 8008940:	4611      	mov	r1, r2
 8008942:	4618      	mov	r0, r3
 8008944:	f7fc ff13 	bl	800576e <_ZN8touchgfx9colortypeC1Em>
 8008948:	f507 731a 	add.w	r3, r7, #616	@ 0x268
 800894c:	f5a3 73b8 	sub.w	r3, r3, #368	@ 0x170
 8008950:	681b      	ldr	r3, [r3, #0]
 8008952:	4619      	mov	r1, r3
 8008954:	4620      	mov	r0, r4
 8008956:	f7fd f84d 	bl	80059f4 <_ZN8touchgfx13BoxWithBorder14setBorderColorENS_9colortypeE>
    MessageBoard_Border_1_1_1_2.setBorderSize(3);
 800895a:	f507 731a 	add.w	r3, r7, #616	@ 0x268
 800895e:	f5a3 7319 	sub.w	r3, r3, #612	@ 0x264
 8008962:	681b      	ldr	r3, [r3, #0]
 8008964:	f503 6302 	add.w	r3, r3, #2080	@ 0x820
 8008968:	2103      	movs	r1, #3
 800896a:	4618      	mov	r0, r3
 800896c:	f7fd f850 	bl	8005a10 <_ZN8touchgfx13BoxWithBorder13setBorderSizeEt>
    AnomalyWarning_Textbox_1_1.add(MessageBoard_Border_1_1_1_2);
 8008970:	f507 731a 	add.w	r3, r7, #616	@ 0x268
 8008974:	f5a3 7319 	sub.w	r3, r3, #612	@ 0x264
 8008978:	681b      	ldr	r3, [r3, #0]
 800897a:	f203 72f4 	addw	r2, r3, #2036	@ 0x7f4
 800897e:	f507 731a 	add.w	r3, r7, #616	@ 0x268
 8008982:	f5a3 7319 	sub.w	r3, r3, #612	@ 0x264
 8008986:	681b      	ldr	r3, [r3, #0]
 8008988:	f503 6302 	add.w	r3, r3, #2080	@ 0x820
 800898c:	4619      	mov	r1, r3
 800898e:	4610      	mov	r0, r2
 8008990:	f00f f936 	bl	8017c00 <_ZN8touchgfx9Container3addERNS_8DrawableE>

    MessageBoard_Border_1_1_1_1_1.setPosition(16, 10, 89, 80);
 8008994:	f507 731a 	add.w	r3, r7, #616	@ 0x268
 8008998:	f5a3 7319 	sub.w	r3, r3, #612	@ 0x264
 800899c:	681b      	ldr	r3, [r3, #0]
 800899e:	f603 0054 	addw	r0, r3, #2132	@ 0x854
 80089a2:	2350      	movs	r3, #80	@ 0x50
 80089a4:	9300      	str	r3, [sp, #0]
 80089a6:	2359      	movs	r3, #89	@ 0x59
 80089a8:	220a      	movs	r2, #10
 80089aa:	2110      	movs	r1, #16
 80089ac:	f7fb fa89 	bl	8003ec2 <_ZN8touchgfx8Drawable11setPositionEssss>
    MessageBoard_Border_1_1_1_1_1.setColor(touchgfx::Color::getColorFromRGB(0, 0, 0));
 80089b0:	f507 731a 	add.w	r3, r7, #616	@ 0x268
 80089b4:	f5a3 7319 	sub.w	r3, r3, #612	@ 0x264
 80089b8:	681b      	ldr	r3, [r3, #0]
 80089ba:	f603 0454 	addw	r4, r3, #2132	@ 0x854
 80089be:	2300      	movs	r3, #0
 80089c0:	f887 3215 	strb.w	r3, [r7, #533]	@ 0x215
 80089c4:	2300      	movs	r3, #0
 80089c6:	f887 3214 	strb.w	r3, [r7, #532]	@ 0x214
 80089ca:	2300      	movs	r3, #0
 80089cc:	f887 3213 	strb.w	r3, [r7, #531]	@ 0x213
 80089d0:	f897 3215 	ldrb.w	r3, [r7, #533]	@ 0x215
 80089d4:	041a      	lsls	r2, r3, #16
 80089d6:	f897 3214 	ldrb.w	r3, [r7, #532]	@ 0x214
 80089da:	021b      	lsls	r3, r3, #8
 80089dc:	431a      	orrs	r2, r3
 80089de:	f897 3213 	ldrb.w	r3, [r7, #531]	@ 0x213
 80089e2:	4313      	orrs	r3, r2
 80089e4:	f043 427f 	orr.w	r2, r3, #4278190080	@ 0xff000000
 80089e8:	f107 03f4 	add.w	r3, r7, #244	@ 0xf4
 80089ec:	4611      	mov	r1, r2
 80089ee:	4618      	mov	r0, r3
 80089f0:	f7fc febd 	bl	800576e <_ZN8touchgfx9colortypeC1Em>
 80089f4:	f507 731a 	add.w	r3, r7, #616	@ 0x268
 80089f8:	f5a3 73ba 	sub.w	r3, r3, #372	@ 0x174
 80089fc:	681b      	ldr	r3, [r3, #0]
 80089fe:	4619      	mov	r1, r3
 8008a00:	4620      	mov	r0, r4
 8008a02:	f7fc ff85 	bl	8005910 <_ZN8touchgfx3Box8setColorENS_9colortypeE>
    MessageBoard_Border_1_1_1_1_1.setBorderColor(touchgfx::Color::getColorFromRGB(67, 101, 139));
 8008a06:	f507 731a 	add.w	r3, r7, #616	@ 0x268
 8008a0a:	f5a3 7319 	sub.w	r3, r3, #612	@ 0x264
 8008a0e:	681b      	ldr	r3, [r3, #0]
 8008a10:	f603 0454 	addw	r4, r3, #2132	@ 0x854
 8008a14:	2343      	movs	r3, #67	@ 0x43
 8008a16:	f887 3218 	strb.w	r3, [r7, #536]	@ 0x218
 8008a1a:	2365      	movs	r3, #101	@ 0x65
 8008a1c:	f887 3217 	strb.w	r3, [r7, #535]	@ 0x217
 8008a20:	238b      	movs	r3, #139	@ 0x8b
 8008a22:	f887 3216 	strb.w	r3, [r7, #534]	@ 0x216
 8008a26:	f897 3218 	ldrb.w	r3, [r7, #536]	@ 0x218
 8008a2a:	041a      	lsls	r2, r3, #16
 8008a2c:	f897 3217 	ldrb.w	r3, [r7, #535]	@ 0x217
 8008a30:	021b      	lsls	r3, r3, #8
 8008a32:	431a      	orrs	r2, r3
 8008a34:	f897 3216 	ldrb.w	r3, [r7, #534]	@ 0x216
 8008a38:	4313      	orrs	r3, r2
 8008a3a:	f043 427f 	orr.w	r2, r3, #4278190080	@ 0xff000000
 8008a3e:	f107 03f0 	add.w	r3, r7, #240	@ 0xf0
 8008a42:	4611      	mov	r1, r2
 8008a44:	4618      	mov	r0, r3
 8008a46:	f7fc fe92 	bl	800576e <_ZN8touchgfx9colortypeC1Em>
 8008a4a:	f507 731a 	add.w	r3, r7, #616	@ 0x268
 8008a4e:	f5a3 73bc 	sub.w	r3, r3, #376	@ 0x178
 8008a52:	681b      	ldr	r3, [r3, #0]
 8008a54:	4619      	mov	r1, r3
 8008a56:	4620      	mov	r0, r4
 8008a58:	f7fc ffcc 	bl	80059f4 <_ZN8touchgfx13BoxWithBorder14setBorderColorENS_9colortypeE>
    MessageBoard_Border_1_1_1_1_1.setBorderSize(3);
 8008a5c:	f507 731a 	add.w	r3, r7, #616	@ 0x268
 8008a60:	f5a3 7319 	sub.w	r3, r3, #612	@ 0x264
 8008a64:	681b      	ldr	r3, [r3, #0]
 8008a66:	f603 0354 	addw	r3, r3, #2132	@ 0x854
 8008a6a:	2103      	movs	r1, #3
 8008a6c:	4618      	mov	r0, r3
 8008a6e:	f7fc ffcf 	bl	8005a10 <_ZN8touchgfx13BoxWithBorder13setBorderSizeEt>
    AnomalyWarning_Textbox_1_1.add(MessageBoard_Border_1_1_1_1_1);
 8008a72:	f507 731a 	add.w	r3, r7, #616	@ 0x268
 8008a76:	f5a3 7319 	sub.w	r3, r3, #612	@ 0x264
 8008a7a:	681b      	ldr	r3, [r3, #0]
 8008a7c:	f203 72f4 	addw	r2, r3, #2036	@ 0x7f4
 8008a80:	f507 731a 	add.w	r3, r7, #616	@ 0x268
 8008a84:	f5a3 7319 	sub.w	r3, r3, #612	@ 0x264
 8008a88:	681b      	ldr	r3, [r3, #0]
 8008a8a:	f603 0354 	addw	r3, r3, #2132	@ 0x854
 8008a8e:	4619      	mov	r1, r3
 8008a90:	4610      	mov	r0, r2
 8008a92:	f00f f8b5 	bl	8017c00 <_ZN8touchgfx9Container3addERNS_8DrawableE>

    MessageBoard_Message_1.setXY(29, 13);
 8008a96:	f507 731a 	add.w	r3, r7, #616	@ 0x268
 8008a9a:	f5a3 7319 	sub.w	r3, r3, #612	@ 0x264
 8008a9e:	681b      	ldr	r3, [r3, #0]
 8008aa0:	f603 0388 	addw	r3, r3, #2184	@ 0x888
 8008aa4:	220d      	movs	r2, #13
 8008aa6:	211d      	movs	r1, #29
 8008aa8:	4618      	mov	r0, r3
 8008aaa:	f7fb fa63 	bl	8003f74 <_ZN8touchgfx8Drawable5setXYEss>
    MessageBoard_Message_1.setColor(touchgfx::Color::getColorFromRGB(255, 255, 255));
 8008aae:	f507 731a 	add.w	r3, r7, #616	@ 0x268
 8008ab2:	f5a3 7319 	sub.w	r3, r3, #612	@ 0x264
 8008ab6:	681b      	ldr	r3, [r3, #0]
 8008ab8:	f603 0488 	addw	r4, r3, #2184	@ 0x888
 8008abc:	23ff      	movs	r3, #255	@ 0xff
 8008abe:	f887 321b 	strb.w	r3, [r7, #539]	@ 0x21b
 8008ac2:	23ff      	movs	r3, #255	@ 0xff
 8008ac4:	f887 321a 	strb.w	r3, [r7, #538]	@ 0x21a
 8008ac8:	23ff      	movs	r3, #255	@ 0xff
 8008aca:	f887 3219 	strb.w	r3, [r7, #537]	@ 0x219
 8008ace:	f897 321b 	ldrb.w	r3, [r7, #539]	@ 0x21b
 8008ad2:	041a      	lsls	r2, r3, #16
 8008ad4:	f897 321a 	ldrb.w	r3, [r7, #538]	@ 0x21a
 8008ad8:	021b      	lsls	r3, r3, #8
 8008ada:	431a      	orrs	r2, r3
 8008adc:	f897 3219 	ldrb.w	r3, [r7, #537]	@ 0x219
 8008ae0:	4313      	orrs	r3, r2
 8008ae2:	f043 427f 	orr.w	r2, r3, #4278190080	@ 0xff000000
 8008ae6:	f107 03ec 	add.w	r3, r7, #236	@ 0xec
 8008aea:	4611      	mov	r1, r2
 8008aec:	4618      	mov	r0, r3
 8008aee:	f7fc fe3e 	bl	800576e <_ZN8touchgfx9colortypeC1Em>
 8008af2:	f507 731a 	add.w	r3, r7, #616	@ 0x268
 8008af6:	f5a3 73be 	sub.w	r3, r3, #380	@ 0x17c
 8008afa:	681b      	ldr	r3, [r3, #0]
 8008afc:	461a      	mov	r2, r3
 8008afe:	f8c7 421c 	str.w	r4, [r7, #540]	@ 0x21c
 8008b02:	f507 731a 	add.w	r3, r7, #616	@ 0x268
 8008b06:	f5a3 7314 	sub.w	r3, r3, #592	@ 0x250
 8008b0a:	601a      	str	r2, [r3, #0]
        this->color = color;
 8008b0c:	f8d7 321c 	ldr.w	r3, [r7, #540]	@ 0x21c
 8008b10:	f507 721a 	add.w	r2, r7, #616	@ 0x268
 8008b14:	f5a2 7214 	sub.w	r2, r2, #592	@ 0x250
 8008b18:	6812      	ldr	r2, [r2, #0]
 8008b1a:	631a      	str	r2, [r3, #48]	@ 0x30
    }
 8008b1c:	bf00      	nop
    MessageBoard_Message_1.setLinespacing(0);
 8008b1e:	f507 731a 	add.w	r3, r7, #616	@ 0x268
 8008b22:	f5a3 7319 	sub.w	r3, r3, #612	@ 0x264
 8008b26:	681b      	ldr	r3, [r3, #0]
 8008b28:	f603 0388 	addw	r3, r3, #2184	@ 0x888
 8008b2c:	f8c7 3224 	str.w	r3, [r7, #548]	@ 0x224
 8008b30:	2300      	movs	r3, #0
 8008b32:	f8a7 3222 	strh.w	r3, [r7, #546]	@ 0x222
        linespace = space;
 8008b36:	f8d7 3224 	ldr.w	r3, [r7, #548]	@ 0x224
 8008b3a:	f8b7 2222 	ldrh.w	r2, [r7, #546]	@ 0x222
 8008b3e:	869a      	strh	r2, [r3, #52]	@ 0x34
    }
 8008b40:	bf00      	nop
    MessageBoard_Message_1.setTypedText(touchgfx::TypedText(T___SINGLEUSE_RLM0));
 8008b42:	f507 731a 	add.w	r3, r7, #616	@ 0x268
 8008b46:	f5a3 7319 	sub.w	r3, r3, #612	@ 0x264
 8008b4a:	681b      	ldr	r3, [r3, #0]
 8008b4c:	f603 0488 	addw	r4, r3, #2184	@ 0x888
 8008b50:	f107 0398 	add.w	r3, r7, #152	@ 0x98
 8008b54:	2106      	movs	r1, #6
 8008b56:	4618      	mov	r0, r3
 8008b58:	f7fc ff6a 	bl	8005a30 <_ZN8touchgfx9TypedTextC1Et>
 8008b5c:	f107 0398 	add.w	r3, r7, #152	@ 0x98
 8008b60:	4619      	mov	r1, r3
 8008b62:	4620      	mov	r0, r4
 8008b64:	f010 ff77 	bl	8019a56 <_ZN8touchgfx8TextArea12setTypedTextERKNS_9TypedTextE>
 8008b68:	f107 0398 	add.w	r3, r7, #152	@ 0x98
 8008b6c:	4618      	mov	r0, r3
 8008b6e:	f7fb f8f5 	bl	8003d5c <_ZN8touchgfx9TypedTextD1Ev>
    AnomalyWarning_Textbox_1_1.add(MessageBoard_Message_1);
 8008b72:	f507 731a 	add.w	r3, r7, #616	@ 0x268
 8008b76:	f5a3 7319 	sub.w	r3, r3, #612	@ 0x264
 8008b7a:	681b      	ldr	r3, [r3, #0]
 8008b7c:	f203 72f4 	addw	r2, r3, #2036	@ 0x7f4
 8008b80:	f507 731a 	add.w	r3, r7, #616	@ 0x268
 8008b84:	f5a3 7319 	sub.w	r3, r3, #612	@ 0x264
 8008b88:	681b      	ldr	r3, [r3, #0]
 8008b8a:	f603 0388 	addw	r3, r3, #2184	@ 0x888
 8008b8e:	4619      	mov	r1, r3
 8008b90:	4610      	mov	r0, r2
 8008b92:	f00f f835 	bl	8017c00 <_ZN8touchgfx9Container3addERNS_8DrawableE>

    MessageBoard_Message_Muted.setXY(30, 13);
 8008b96:	f507 731a 	add.w	r3, r7, #616	@ 0x268
 8008b9a:	f5a3 7319 	sub.w	r3, r3, #612	@ 0x264
 8008b9e:	681b      	ldr	r3, [r3, #0]
 8008ba0:	f603 03c4 	addw	r3, r3, #2244	@ 0x8c4
 8008ba4:	220d      	movs	r2, #13
 8008ba6:	211e      	movs	r1, #30
 8008ba8:	4618      	mov	r0, r3
 8008baa:	f7fb f9e3 	bl	8003f74 <_ZN8touchgfx8Drawable5setXYEss>
    MessageBoard_Message_Muted.setVisible(false);
 8008bae:	f507 731a 	add.w	r3, r7, #616	@ 0x268
 8008bb2:	f5a3 7319 	sub.w	r3, r3, #612	@ 0x264
 8008bb6:	681b      	ldr	r3, [r3, #0]
 8008bb8:	f603 03c4 	addw	r3, r3, #2244	@ 0x8c4
 8008bbc:	2100      	movs	r1, #0
 8008bbe:	4618      	mov	r0, r3
 8008bc0:	f7fd ff3d 	bl	8006a3e <_ZN8touchgfx8Drawable10setVisibleEb>
    MessageBoard_Message_Muted.setColor(touchgfx::Color::getColorFromRGB(255, 255, 255));
 8008bc4:	f507 731a 	add.w	r3, r7, #616	@ 0x268
 8008bc8:	f5a3 7319 	sub.w	r3, r3, #612	@ 0x264
 8008bcc:	681b      	ldr	r3, [r3, #0]
 8008bce:	f603 04c4 	addw	r4, r3, #2244	@ 0x8c4
 8008bd2:	23ff      	movs	r3, #255	@ 0xff
 8008bd4:	f887 322b 	strb.w	r3, [r7, #555]	@ 0x22b
 8008bd8:	23ff      	movs	r3, #255	@ 0xff
 8008bda:	f887 322a 	strb.w	r3, [r7, #554]	@ 0x22a
 8008bde:	23ff      	movs	r3, #255	@ 0xff
 8008be0:	f887 3229 	strb.w	r3, [r7, #553]	@ 0x229
 8008be4:	f897 322b 	ldrb.w	r3, [r7, #555]	@ 0x22b
 8008be8:	041a      	lsls	r2, r3, #16
 8008bea:	f897 322a 	ldrb.w	r3, [r7, #554]	@ 0x22a
 8008bee:	021b      	lsls	r3, r3, #8
 8008bf0:	431a      	orrs	r2, r3
 8008bf2:	f897 3229 	ldrb.w	r3, [r7, #553]	@ 0x229
 8008bf6:	4313      	orrs	r3, r2
 8008bf8:	f043 427f 	orr.w	r2, r3, #4278190080	@ 0xff000000
 8008bfc:	f107 03e8 	add.w	r3, r7, #232	@ 0xe8
 8008c00:	4611      	mov	r1, r2
 8008c02:	4618      	mov	r0, r3
 8008c04:	f7fc fdb3 	bl	800576e <_ZN8touchgfx9colortypeC1Em>
 8008c08:	f507 731a 	add.w	r3, r7, #616	@ 0x268
 8008c0c:	f5a3 73c0 	sub.w	r3, r3, #384	@ 0x180
 8008c10:	681b      	ldr	r3, [r3, #0]
 8008c12:	461a      	mov	r2, r3
 8008c14:	f8c7 422c 	str.w	r4, [r7, #556]	@ 0x22c
 8008c18:	f507 731a 	add.w	r3, r7, #616	@ 0x268
 8008c1c:	f5a3 7315 	sub.w	r3, r3, #596	@ 0x254
 8008c20:	601a      	str	r2, [r3, #0]
        this->color = color;
 8008c22:	f8d7 322c 	ldr.w	r3, [r7, #556]	@ 0x22c
 8008c26:	f507 721a 	add.w	r2, r7, #616	@ 0x268
 8008c2a:	f5a2 7215 	sub.w	r2, r2, #596	@ 0x254
 8008c2e:	6812      	ldr	r2, [r2, #0]
 8008c30:	631a      	str	r2, [r3, #48]	@ 0x30
    }
 8008c32:	bf00      	nop
    MessageBoard_Message_Muted.setLinespacing(0);
 8008c34:	f507 731a 	add.w	r3, r7, #616	@ 0x268
 8008c38:	f5a3 7319 	sub.w	r3, r3, #612	@ 0x264
 8008c3c:	681b      	ldr	r3, [r3, #0]
 8008c3e:	f603 03c4 	addw	r3, r3, #2244	@ 0x8c4
 8008c42:	f8c7 3234 	str.w	r3, [r7, #564]	@ 0x234
 8008c46:	2300      	movs	r3, #0
 8008c48:	f8a7 3232 	strh.w	r3, [r7, #562]	@ 0x232
        linespace = space;
 8008c4c:	f8d7 3234 	ldr.w	r3, [r7, #564]	@ 0x234
 8008c50:	f8b7 2232 	ldrh.w	r2, [r7, #562]	@ 0x232
 8008c54:	869a      	strh	r2, [r3, #52]	@ 0x34
    }
 8008c56:	bf00      	nop
    MessageBoard_Message_Muted.setTypedText(touchgfx::TypedText(T___SINGLEUSE_RFKN));
 8008c58:	f507 731a 	add.w	r3, r7, #616	@ 0x268
 8008c5c:	f5a3 7319 	sub.w	r3, r3, #612	@ 0x264
 8008c60:	681b      	ldr	r3, [r3, #0]
 8008c62:	f603 04c4 	addw	r4, r3, #2244	@ 0x8c4
 8008c66:	f107 03a0 	add.w	r3, r7, #160	@ 0xa0
 8008c6a:	210b      	movs	r1, #11
 8008c6c:	4618      	mov	r0, r3
 8008c6e:	f7fc fedf 	bl	8005a30 <_ZN8touchgfx9TypedTextC1Et>
 8008c72:	f107 03a0 	add.w	r3, r7, #160	@ 0xa0
 8008c76:	4619      	mov	r1, r3
 8008c78:	4620      	mov	r0, r4
 8008c7a:	f010 feec 	bl	8019a56 <_ZN8touchgfx8TextArea12setTypedTextERKNS_9TypedTextE>
 8008c7e:	f107 03a0 	add.w	r3, r7, #160	@ 0xa0
 8008c82:	4618      	mov	r0, r3
 8008c84:	f7fb f86a 	bl	8003d5c <_ZN8touchgfx9TypedTextD1Ev>
    AnomalyWarning_Textbox_1_1.add(MessageBoard_Message_Muted);
 8008c88:	f507 731a 	add.w	r3, r7, #616	@ 0x268
 8008c8c:	f5a3 7319 	sub.w	r3, r3, #612	@ 0x264
 8008c90:	681b      	ldr	r3, [r3, #0]
 8008c92:	f203 72f4 	addw	r2, r3, #2036	@ 0x7f4
 8008c96:	f507 731a 	add.w	r3, r7, #616	@ 0x268
 8008c9a:	f5a3 7319 	sub.w	r3, r3, #612	@ 0x264
 8008c9e:	681b      	ldr	r3, [r3, #0]
 8008ca0:	f603 03c4 	addw	r3, r3, #2244	@ 0x8c4
 8008ca4:	4619      	mov	r1, r3
 8008ca6:	4610      	mov	r0, r2
 8008ca8:	f00e ffaa 	bl	8017c00 <_ZN8touchgfx9Container3addERNS_8DrawableE>
    Message_Board_Panel_1.add(AnomalyWarning_Textbox_1_1);
 8008cac:	f507 731a 	add.w	r3, r7, #616	@ 0x268
 8008cb0:	f5a3 7319 	sub.w	r3, r3, #612	@ 0x264
 8008cb4:	681b      	ldr	r3, [r3, #0]
 8008cb6:	f203 52ec 	addw	r2, r3, #1516	@ 0x5ec
 8008cba:	f507 731a 	add.w	r3, r7, #616	@ 0x268
 8008cbe:	f5a3 7319 	sub.w	r3, r3, #612	@ 0x264
 8008cc2:	681b      	ldr	r3, [r3, #0]
 8008cc4:	f203 73f4 	addw	r3, r3, #2036	@ 0x7f4
 8008cc8:	4619      	mov	r1, r3
 8008cca:	4610      	mov	r0, r2
 8008ccc:	f00e ff98 	bl	8017c00 <_ZN8touchgfx9Container3addERNS_8DrawableE>
    Message_panel.add(Message_Board_Panel_1);
 8008cd0:	f507 731a 	add.w	r3, r7, #616	@ 0x268
 8008cd4:	f5a3 7319 	sub.w	r3, r3, #612	@ 0x264
 8008cd8:	681b      	ldr	r3, [r3, #0]
 8008cda:	f203 528c 	addw	r2, r3, #1420	@ 0x58c
 8008cde:	f507 731a 	add.w	r3, r7, #616	@ 0x268
 8008ce2:	f5a3 7319 	sub.w	r3, r3, #612	@ 0x264
 8008ce6:	681b      	ldr	r3, [r3, #0]
 8008ce8:	f203 53ec 	addw	r3, r3, #1516	@ 0x5ec
 8008cec:	4619      	mov	r1, r3
 8008cee:	4610      	mov	r0, r2
 8008cf0:	f00e ff86 	bl	8017c00 <_ZN8touchgfx9Container3addERNS_8DrawableE>

    Alarm_Mute_Indicator_Textbox_1_1.setPosition(64, 117, 129, 20);
 8008cf4:	f507 731a 	add.w	r3, r7, #616	@ 0x268
 8008cf8:	f5a3 7319 	sub.w	r3, r3, #612	@ 0x264
 8008cfc:	681b      	ldr	r3, [r3, #0]
 8008cfe:	f503 6010 	add.w	r0, r3, #2304	@ 0x900
 8008d02:	2314      	movs	r3, #20
 8008d04:	9300      	str	r3, [sp, #0]
 8008d06:	2381      	movs	r3, #129	@ 0x81
 8008d08:	2275      	movs	r2, #117	@ 0x75
 8008d0a:	2140      	movs	r1, #64	@ 0x40
 8008d0c:	f7fb f8d9 	bl	8003ec2 <_ZN8touchgfx8Drawable11setPositionEssss>

    AnomalyDetection_Border_1_1_1.setPosition(0, 3, 129, 17);
 8008d10:	f507 731a 	add.w	r3, r7, #616	@ 0x268
 8008d14:	f5a3 7319 	sub.w	r3, r3, #612	@ 0x264
 8008d18:	681b      	ldr	r3, [r3, #0]
 8008d1a:	f603 102c 	addw	r0, r3, #2348	@ 0x92c
 8008d1e:	2311      	movs	r3, #17
 8008d20:	9300      	str	r3, [sp, #0]
 8008d22:	2381      	movs	r3, #129	@ 0x81
 8008d24:	2203      	movs	r2, #3
 8008d26:	2100      	movs	r1, #0
 8008d28:	f7fb f8cb 	bl	8003ec2 <_ZN8touchgfx8Drawable11setPositionEssss>
    AnomalyDetection_Border_1_1_1.setColor(touchgfx::Color::getColorFromRGB(0, 0, 0));
 8008d2c:	f507 731a 	add.w	r3, r7, #616	@ 0x268
 8008d30:	f5a3 7319 	sub.w	r3, r3, #612	@ 0x264
 8008d34:	681b      	ldr	r3, [r3, #0]
 8008d36:	f603 142c 	addw	r4, r3, #2348	@ 0x92c
 8008d3a:	2300      	movs	r3, #0
 8008d3c:	f887 323d 	strb.w	r3, [r7, #573]	@ 0x23d
 8008d40:	2300      	movs	r3, #0
 8008d42:	f887 323c 	strb.w	r3, [r7, #572]	@ 0x23c
 8008d46:	2300      	movs	r3, #0
 8008d48:	f887 323b 	strb.w	r3, [r7, #571]	@ 0x23b
 8008d4c:	f897 323d 	ldrb.w	r3, [r7, #573]	@ 0x23d
 8008d50:	041a      	lsls	r2, r3, #16
 8008d52:	f897 323c 	ldrb.w	r3, [r7, #572]	@ 0x23c
 8008d56:	021b      	lsls	r3, r3, #8
 8008d58:	431a      	orrs	r2, r3
 8008d5a:	f897 323b 	ldrb.w	r3, [r7, #571]	@ 0x23b
 8008d5e:	4313      	orrs	r3, r2
 8008d60:	f043 427f 	orr.w	r2, r3, #4278190080	@ 0xff000000
 8008d64:	f107 03e4 	add.w	r3, r7, #228	@ 0xe4
 8008d68:	4611      	mov	r1, r2
 8008d6a:	4618      	mov	r0, r3
 8008d6c:	f7fc fcff 	bl	800576e <_ZN8touchgfx9colortypeC1Em>
 8008d70:	f507 731a 	add.w	r3, r7, #616	@ 0x268
 8008d74:	f5a3 73c2 	sub.w	r3, r3, #388	@ 0x184
 8008d78:	681b      	ldr	r3, [r3, #0]
 8008d7a:	4619      	mov	r1, r3
 8008d7c:	4620      	mov	r0, r4
 8008d7e:	f7fc fdc7 	bl	8005910 <_ZN8touchgfx3Box8setColorENS_9colortypeE>
    AnomalyDetection_Border_1_1_1.setBorderColor(touchgfx::Color::getColorFromRGB(237, 102, 99));
 8008d82:	f507 731a 	add.w	r3, r7, #616	@ 0x268
 8008d86:	f5a3 7319 	sub.w	r3, r3, #612	@ 0x264
 8008d8a:	681b      	ldr	r3, [r3, #0]
 8008d8c:	f603 142c 	addw	r4, r3, #2348	@ 0x92c
 8008d90:	23ed      	movs	r3, #237	@ 0xed
 8008d92:	f887 3240 	strb.w	r3, [r7, #576]	@ 0x240
 8008d96:	2366      	movs	r3, #102	@ 0x66
 8008d98:	f887 323f 	strb.w	r3, [r7, #575]	@ 0x23f
 8008d9c:	2363      	movs	r3, #99	@ 0x63
 8008d9e:	f887 323e 	strb.w	r3, [r7, #574]	@ 0x23e
 8008da2:	f897 3240 	ldrb.w	r3, [r7, #576]	@ 0x240
 8008da6:	041a      	lsls	r2, r3, #16
 8008da8:	f897 323f 	ldrb.w	r3, [r7, #575]	@ 0x23f
 8008dac:	021b      	lsls	r3, r3, #8
 8008dae:	431a      	orrs	r2, r3
 8008db0:	f897 323e 	ldrb.w	r3, [r7, #574]	@ 0x23e
 8008db4:	4313      	orrs	r3, r2
 8008db6:	f043 427f 	orr.w	r2, r3, #4278190080	@ 0xff000000
 8008dba:	f107 03e0 	add.w	r3, r7, #224	@ 0xe0
 8008dbe:	4611      	mov	r1, r2
 8008dc0:	4618      	mov	r0, r3
 8008dc2:	f7fc fcd4 	bl	800576e <_ZN8touchgfx9colortypeC1Em>
 8008dc6:	f507 731a 	add.w	r3, r7, #616	@ 0x268
 8008dca:	f5a3 73c4 	sub.w	r3, r3, #392	@ 0x188
 8008dce:	681b      	ldr	r3, [r3, #0]
 8008dd0:	4619      	mov	r1, r3
 8008dd2:	4620      	mov	r0, r4
 8008dd4:	f7fc fe0e 	bl	80059f4 <_ZN8touchgfx13BoxWithBorder14setBorderColorENS_9colortypeE>
    AnomalyDetection_Border_1_1_1.setBorderSize(3);
 8008dd8:	f507 731a 	add.w	r3, r7, #616	@ 0x268
 8008ddc:	f5a3 7319 	sub.w	r3, r3, #612	@ 0x264
 8008de0:	681b      	ldr	r3, [r3, #0]
 8008de2:	f603 132c 	addw	r3, r3, #2348	@ 0x92c
 8008de6:	2103      	movs	r1, #3
 8008de8:	4618      	mov	r0, r3
 8008dea:	f7fc fe11 	bl	8005a10 <_ZN8touchgfx13BoxWithBorder13setBorderSizeEt>
    Alarm_Mute_Indicator_Textbox_1_1.add(AnomalyDetection_Border_1_1_1);
 8008dee:	f507 731a 	add.w	r3, r7, #616	@ 0x268
 8008df2:	f5a3 7319 	sub.w	r3, r3, #612	@ 0x264
 8008df6:	681b      	ldr	r3, [r3, #0]
 8008df8:	f503 6210 	add.w	r2, r3, #2304	@ 0x900
 8008dfc:	f507 731a 	add.w	r3, r7, #616	@ 0x268
 8008e00:	f5a3 7319 	sub.w	r3, r3, #612	@ 0x264
 8008e04:	681b      	ldr	r3, [r3, #0]
 8008e06:	f603 132c 	addw	r3, r3, #2348	@ 0x92c
 8008e0a:	4619      	mov	r1, r3
 8008e0c:	4610      	mov	r0, r2
 8008e0e:	f00e fef7 	bl	8017c00 <_ZN8touchgfx9Container3addERNS_8DrawableE>

    AnomalyDetection_Text_1_1.setXY(9, 5);
 8008e12:	f507 731a 	add.w	r3, r7, #616	@ 0x268
 8008e16:	f5a3 7319 	sub.w	r3, r3, #612	@ 0x264
 8008e1a:	681b      	ldr	r3, [r3, #0]
 8008e1c:	f503 6316 	add.w	r3, r3, #2400	@ 0x960
 8008e20:	2205      	movs	r2, #5
 8008e22:	2109      	movs	r1, #9
 8008e24:	4618      	mov	r0, r3
 8008e26:	f7fb f8a5 	bl	8003f74 <_ZN8touchgfx8Drawable5setXYEss>
    AnomalyDetection_Text_1_1.setColor(touchgfx::Color::getColorFromRGB(255, 255, 255));
 8008e2a:	f507 731a 	add.w	r3, r7, #616	@ 0x268
 8008e2e:	f5a3 7319 	sub.w	r3, r3, #612	@ 0x264
 8008e32:	681b      	ldr	r3, [r3, #0]
 8008e34:	f503 6416 	add.w	r4, r3, #2400	@ 0x960
 8008e38:	23ff      	movs	r3, #255	@ 0xff
 8008e3a:	f887 3243 	strb.w	r3, [r7, #579]	@ 0x243
 8008e3e:	23ff      	movs	r3, #255	@ 0xff
 8008e40:	f887 3242 	strb.w	r3, [r7, #578]	@ 0x242
 8008e44:	23ff      	movs	r3, #255	@ 0xff
 8008e46:	f887 3241 	strb.w	r3, [r7, #577]	@ 0x241
 8008e4a:	f897 3243 	ldrb.w	r3, [r7, #579]	@ 0x243
 8008e4e:	041a      	lsls	r2, r3, #16
 8008e50:	f897 3242 	ldrb.w	r3, [r7, #578]	@ 0x242
 8008e54:	021b      	lsls	r3, r3, #8
 8008e56:	431a      	orrs	r2, r3
 8008e58:	f897 3241 	ldrb.w	r3, [r7, #577]	@ 0x241
 8008e5c:	4313      	orrs	r3, r2
 8008e5e:	f043 427f 	orr.w	r2, r3, #4278190080	@ 0xff000000
 8008e62:	f107 03dc 	add.w	r3, r7, #220	@ 0xdc
 8008e66:	4611      	mov	r1, r2
 8008e68:	4618      	mov	r0, r3
 8008e6a:	f7fc fc80 	bl	800576e <_ZN8touchgfx9colortypeC1Em>
 8008e6e:	f507 731a 	add.w	r3, r7, #616	@ 0x268
 8008e72:	f5a3 73c6 	sub.w	r3, r3, #396	@ 0x18c
 8008e76:	681b      	ldr	r3, [r3, #0]
 8008e78:	461a      	mov	r2, r3
 8008e7a:	f8c7 4244 	str.w	r4, [r7, #580]	@ 0x244
 8008e7e:	f507 731a 	add.w	r3, r7, #616	@ 0x268
 8008e82:	f5a3 7316 	sub.w	r3, r3, #600	@ 0x258
 8008e86:	601a      	str	r2, [r3, #0]
        this->color = color;
 8008e88:	f8d7 3244 	ldr.w	r3, [r7, #580]	@ 0x244
 8008e8c:	f507 721a 	add.w	r2, r7, #616	@ 0x268
 8008e90:	f5a2 7216 	sub.w	r2, r2, #600	@ 0x258
 8008e94:	6812      	ldr	r2, [r2, #0]
 8008e96:	631a      	str	r2, [r3, #48]	@ 0x30
    }
 8008e98:	bf00      	nop
    AnomalyDetection_Text_1_1.setLinespacing(0);
 8008e9a:	f507 731a 	add.w	r3, r7, #616	@ 0x268
 8008e9e:	f5a3 7319 	sub.w	r3, r3, #612	@ 0x264
 8008ea2:	681b      	ldr	r3, [r3, #0]
 8008ea4:	f503 6316 	add.w	r3, r3, #2400	@ 0x960
 8008ea8:	f8c7 324c 	str.w	r3, [r7, #588]	@ 0x24c
 8008eac:	2300      	movs	r3, #0
 8008eae:	f8a7 324a 	strh.w	r3, [r7, #586]	@ 0x24a
        linespace = space;
 8008eb2:	f8d7 324c 	ldr.w	r3, [r7, #588]	@ 0x24c
 8008eb6:	f8b7 224a 	ldrh.w	r2, [r7, #586]	@ 0x24a
 8008eba:	869a      	strh	r2, [r3, #52]	@ 0x34
    }
 8008ebc:	bf00      	nop
    AnomalyDetection_Text_1_1.setTypedText(touchgfx::TypedText(T___SINGLEUSE_BBOL));
 8008ebe:	f507 731a 	add.w	r3, r7, #616	@ 0x268
 8008ec2:	f5a3 7319 	sub.w	r3, r3, #612	@ 0x264
 8008ec6:	681b      	ldr	r3, [r3, #0]
 8008ec8:	f503 6416 	add.w	r4, r3, #2400	@ 0x960
 8008ecc:	f107 03a8 	add.w	r3, r7, #168	@ 0xa8
 8008ed0:	2103      	movs	r1, #3
 8008ed2:	4618      	mov	r0, r3
 8008ed4:	f7fc fdac 	bl	8005a30 <_ZN8touchgfx9TypedTextC1Et>
 8008ed8:	f107 03a8 	add.w	r3, r7, #168	@ 0xa8
 8008edc:	4619      	mov	r1, r3
 8008ede:	4620      	mov	r0, r4
 8008ee0:	f010 fdb9 	bl	8019a56 <_ZN8touchgfx8TextArea12setTypedTextERKNS_9TypedTextE>
 8008ee4:	f107 03a8 	add.w	r3, r7, #168	@ 0xa8
 8008ee8:	4618      	mov	r0, r3
 8008eea:	f7fa ff37 	bl	8003d5c <_ZN8touchgfx9TypedTextD1Ev>
    Alarm_Mute_Indicator_Textbox_1_1.add(AnomalyDetection_Text_1_1);
 8008eee:	f507 731a 	add.w	r3, r7, #616	@ 0x268
 8008ef2:	f5a3 7319 	sub.w	r3, r3, #612	@ 0x264
 8008ef6:	681b      	ldr	r3, [r3, #0]
 8008ef8:	f503 6210 	add.w	r2, r3, #2304	@ 0x900
 8008efc:	f507 731a 	add.w	r3, r7, #616	@ 0x268
 8008f00:	f5a3 7319 	sub.w	r3, r3, #612	@ 0x264
 8008f04:	681b      	ldr	r3, [r3, #0]
 8008f06:	f503 6316 	add.w	r3, r3, #2400	@ 0x960
 8008f0a:	4619      	mov	r1, r3
 8008f0c:	4610      	mov	r0, r2
 8008f0e:	f00e fe77 	bl	8017c00 <_ZN8touchgfx9Container3addERNS_8DrawableE>

    Disabled_Button2.setXY(92, 140);
 8008f12:	f507 731a 	add.w	r3, r7, #616	@ 0x268
 8008f16:	f5a3 7319 	sub.w	r3, r3, #612	@ 0x264
 8008f1a:	681b      	ldr	r3, [r3, #0]
 8008f1c:	f603 139c 	addw	r3, r3, #2460	@ 0x99c
 8008f20:	228c      	movs	r2, #140	@ 0x8c
 8008f22:	215c      	movs	r1, #92	@ 0x5c
 8008f24:	4618      	mov	r0, r3
 8008f26:	f7fb f825 	bl	8003f74 <_ZN8touchgfx8Drawable5setXYEss>
    Disabled_Button2.setBitmap(touchgfx::Bitmap(BITMAP_RECT_BUTTON_PRESSED_ID));
 8008f2a:	f507 731a 	add.w	r3, r7, #616	@ 0x268
 8008f2e:	f5a3 7319 	sub.w	r3, r3, #612	@ 0x264
 8008f32:	681b      	ldr	r3, [r3, #0]
 8008f34:	f603 149c 	addw	r4, r3, #2460	@ 0x99c
 8008f38:	f107 03b0 	add.w	r3, r7, #176	@ 0xb0
 8008f3c:	2102      	movs	r1, #2
 8008f3e:	4618      	mov	r0, r3
 8008f40:	f7fc fc24 	bl	800578c <_ZN8touchgfx6BitmapC1Et>
 8008f44:	f107 03b0 	add.w	r3, r7, #176	@ 0xb0
 8008f48:	4619      	mov	r1, r3
 8008f4a:	4620      	mov	r0, r4
 8008f4c:	f010 fffd 	bl	8019f4a <_ZN8touchgfx5Image9setBitmapERKNS_6BitmapE>

    Disabled_Button1.setXY(309, 141);
 8008f50:	f507 731a 	add.w	r3, r7, #616	@ 0x268
 8008f54:	f5a3 7319 	sub.w	r3, r3, #612	@ 0x264
 8008f58:	681b      	ldr	r3, [r3, #0]
 8008f5a:	f603 13c8 	addw	r3, r3, #2504	@ 0x9c8
 8008f5e:	228d      	movs	r2, #141	@ 0x8d
 8008f60:	f240 1135 	movw	r1, #309	@ 0x135
 8008f64:	4618      	mov	r0, r3
 8008f66:	f7fb f805 	bl	8003f74 <_ZN8touchgfx8Drawable5setXYEss>
    Disabled_Button1.setBitmap(touchgfx::Bitmap(BITMAP_RECT_BUTTON_PRESSED_ID));
 8008f6a:	f507 731a 	add.w	r3, r7, #616	@ 0x268
 8008f6e:	f5a3 7319 	sub.w	r3, r3, #612	@ 0x264
 8008f72:	681b      	ldr	r3, [r3, #0]
 8008f74:	f603 14c8 	addw	r4, r3, #2504	@ 0x9c8
 8008f78:	f107 03b4 	add.w	r3, r7, #180	@ 0xb4
 8008f7c:	2102      	movs	r1, #2
 8008f7e:	4618      	mov	r0, r3
 8008f80:	f7fc fc04 	bl	800578c <_ZN8touchgfx6BitmapC1Et>
 8008f84:	f107 03b4 	add.w	r3, r7, #180	@ 0xb4
 8008f88:	4619      	mov	r1, r3
 8008f8a:	4620      	mov	r0, r4
 8008f8c:	f010 ffdd 	bl	8019f4a <_ZN8touchgfx5Image9setBitmapERKNS_6BitmapE>

    Alert_Mute_Button.setXY(92, 140);
 8008f90:	f507 731a 	add.w	r3, r7, #616	@ 0x268
 8008f94:	f5a3 7319 	sub.w	r3, r3, #612	@ 0x264
 8008f98:	681b      	ldr	r3, [r3, #0]
 8008f9a:	f603 13f4 	addw	r3, r3, #2548	@ 0x9f4
 8008f9e:	228c      	movs	r2, #140	@ 0x8c
 8008fa0:	215c      	movs	r1, #92	@ 0x5c
 8008fa2:	4618      	mov	r0, r3
 8008fa4:	f7fa ffe6 	bl	8003f74 <_ZN8touchgfx8Drawable5setXYEss>
    Alert_Mute_Button.setBitmaps(touchgfx::Bitmap(BITMAP_RECT_BUTTON_UNPRESSED_ID), touchgfx::Bitmap(BITMAP_RECT_BUTTON_PRESSED_ID));
 8008fa8:	f507 731a 	add.w	r3, r7, #616	@ 0x268
 8008fac:	f5a3 7319 	sub.w	r3, r3, #612	@ 0x264
 8008fb0:	681b      	ldr	r3, [r3, #0]
 8008fb2:	f603 14f4 	addw	r4, r3, #2548	@ 0x9f4
 8008fb6:	f107 03b8 	add.w	r3, r7, #184	@ 0xb8
 8008fba:	2103      	movs	r1, #3
 8008fbc:	4618      	mov	r0, r3
 8008fbe:	f7fc fbe5 	bl	800578c <_ZN8touchgfx6BitmapC1Et>
 8008fc2:	f107 03bc 	add.w	r3, r7, #188	@ 0xbc
 8008fc6:	2102      	movs	r1, #2
 8008fc8:	4618      	mov	r0, r3
 8008fca:	f7fc fbdf 	bl	800578c <_ZN8touchgfx6BitmapC1Et>
 8008fce:	f107 02bc 	add.w	r2, r7, #188	@ 0xbc
 8008fd2:	f107 03b8 	add.w	r3, r7, #184	@ 0xb8
 8008fd6:	4619      	mov	r1, r3
 8008fd8:	4620      	mov	r0, r4
 8008fda:	f010 fd73 	bl	8019ac4 <_ZN8touchgfx6Button10setBitmapsERKNS_6BitmapES3_>
    Alert_Mute_Button.setAction(buttonCallback);
 8008fde:	f507 731a 	add.w	r3, r7, #616	@ 0x268
 8008fe2:	f5a3 7319 	sub.w	r3, r3, #612	@ 0x264
 8008fe6:	681b      	ldr	r3, [r3, #0]
 8008fe8:	f603 12f4 	addw	r2, r3, #2548	@ 0x9f4
 8008fec:	f507 731a 	add.w	r3, r7, #616	@ 0x268
 8008ff0:	f5a3 7319 	sub.w	r3, r3, #612	@ 0x264
 8008ff4:	681b      	ldr	r3, [r3, #0]
 8008ff6:	f603 23f8 	addw	r3, r3, #2808	@ 0xaf8
 8008ffa:	4619      	mov	r1, r3
 8008ffc:	4610      	mov	r0, r2
 8008ffe:	f7fc fd8d 	bl	8005b1c <_ZN8touchgfx14AbstractButton9setActionERNS_15GenericCallbackIRKS0_vvEE>

    Localize_Button.setXY(309, 140);
 8009002:	f507 731a 	add.w	r3, r7, #616	@ 0x268
 8009006:	f5a3 7319 	sub.w	r3, r3, #612	@ 0x264
 800900a:	681b      	ldr	r3, [r3, #0]
 800900c:	f603 2328 	addw	r3, r3, #2600	@ 0xa28
 8009010:	228c      	movs	r2, #140	@ 0x8c
 8009012:	f240 1135 	movw	r1, #309	@ 0x135
 8009016:	4618      	mov	r0, r3
 8009018:	f7fa ffac 	bl	8003f74 <_ZN8touchgfx8Drawable5setXYEss>
    Localize_Button.setBitmaps(touchgfx::Bitmap(BITMAP_RECT_BUTTON_UNPRESSED_ID), touchgfx::Bitmap(BITMAP_RECT_BUTTON_PRESSED_ID));
 800901c:	f507 731a 	add.w	r3, r7, #616	@ 0x268
 8009020:	f5a3 7319 	sub.w	r3, r3, #612	@ 0x264
 8009024:	681b      	ldr	r3, [r3, #0]
 8009026:	f603 2428 	addw	r4, r3, #2600	@ 0xa28
 800902a:	f107 03c0 	add.w	r3, r7, #192	@ 0xc0
 800902e:	2103      	movs	r1, #3
 8009030:	4618      	mov	r0, r3
 8009032:	f7fc fbab 	bl	800578c <_ZN8touchgfx6BitmapC1Et>
 8009036:	f107 03c4 	add.w	r3, r7, #196	@ 0xc4
 800903a:	2102      	movs	r1, #2
 800903c:	4618      	mov	r0, r3
 800903e:	f7fc fba5 	bl	800578c <_ZN8touchgfx6BitmapC1Et>
 8009042:	f107 02c4 	add.w	r2, r7, #196	@ 0xc4
 8009046:	f107 03c0 	add.w	r3, r7, #192	@ 0xc0
 800904a:	4619      	mov	r1, r3
 800904c:	4620      	mov	r0, r4
 800904e:	f010 fd39 	bl	8019ac4 <_ZN8touchgfx6Button10setBitmapsERKNS_6BitmapES3_>
    Localize_Button.setAction(buttonCallback);
 8009052:	f507 731a 	add.w	r3, r7, #616	@ 0x268
 8009056:	f5a3 7319 	sub.w	r3, r3, #612	@ 0x264
 800905a:	681b      	ldr	r3, [r3, #0]
 800905c:	f603 2228 	addw	r2, r3, #2600	@ 0xa28
 8009060:	f507 731a 	add.w	r3, r7, #616	@ 0x268
 8009064:	f5a3 7319 	sub.w	r3, r3, #612	@ 0x264
 8009068:	681b      	ldr	r3, [r3, #0]
 800906a:	f603 23f8 	addw	r3, r3, #2808	@ 0xaf8
 800906e:	4619      	mov	r1, r3
 8009070:	4610      	mov	r0, r2
 8009072:	f7fc fd53 	bl	8005b1c <_ZN8touchgfx14AbstractButton9setActionERNS_15GenericCallbackIRKS0_vvEE>

    Alarm_Mute_Indicator_Textbox_1_1_1.setPosition(283, 117, 129, 20);
 8009076:	f507 731a 	add.w	r3, r7, #616	@ 0x268
 800907a:	f5a3 7319 	sub.w	r3, r3, #612	@ 0x264
 800907e:	681b      	ldr	r3, [r3, #0]
 8009080:	f603 205c 	addw	r0, r3, #2652	@ 0xa5c
 8009084:	2314      	movs	r3, #20
 8009086:	9300      	str	r3, [sp, #0]
 8009088:	2381      	movs	r3, #129	@ 0x81
 800908a:	2275      	movs	r2, #117	@ 0x75
 800908c:	f240 111b 	movw	r1, #283	@ 0x11b
 8009090:	f7fa ff17 	bl	8003ec2 <_ZN8touchgfx8Drawable11setPositionEssss>

    AnomalyDetection_Border_1_1_1_1.setPosition(0, 3, 129, 17);
 8009094:	f507 731a 	add.w	r3, r7, #616	@ 0x268
 8009098:	f5a3 7319 	sub.w	r3, r3, #612	@ 0x264
 800909c:	681b      	ldr	r3, [r3, #0]
 800909e:	f603 2088 	addw	r0, r3, #2696	@ 0xa88
 80090a2:	2311      	movs	r3, #17
 80090a4:	9300      	str	r3, [sp, #0]
 80090a6:	2381      	movs	r3, #129	@ 0x81
 80090a8:	2203      	movs	r2, #3
 80090aa:	2100      	movs	r1, #0
 80090ac:	f7fa ff09 	bl	8003ec2 <_ZN8touchgfx8Drawable11setPositionEssss>
    AnomalyDetection_Border_1_1_1_1.setColor(touchgfx::Color::getColorFromRGB(0, 0, 0));
 80090b0:	f507 731a 	add.w	r3, r7, #616	@ 0x268
 80090b4:	f5a3 7319 	sub.w	r3, r3, #612	@ 0x264
 80090b8:	681b      	ldr	r3, [r3, #0]
 80090ba:	f603 2488 	addw	r4, r3, #2696	@ 0xa88
 80090be:	2300      	movs	r3, #0
 80090c0:	f887 3255 	strb.w	r3, [r7, #597]	@ 0x255
 80090c4:	2300      	movs	r3, #0
 80090c6:	f887 3254 	strb.w	r3, [r7, #596]	@ 0x254
 80090ca:	2300      	movs	r3, #0
 80090cc:	f887 3253 	strb.w	r3, [r7, #595]	@ 0x253
 80090d0:	f897 3255 	ldrb.w	r3, [r7, #597]	@ 0x255
 80090d4:	041a      	lsls	r2, r3, #16
 80090d6:	f897 3254 	ldrb.w	r3, [r7, #596]	@ 0x254
 80090da:	021b      	lsls	r3, r3, #8
 80090dc:	431a      	orrs	r2, r3
 80090de:	f897 3253 	ldrb.w	r3, [r7, #595]	@ 0x253
 80090e2:	4313      	orrs	r3, r2
 80090e4:	f043 427f 	orr.w	r2, r3, #4278190080	@ 0xff000000
 80090e8:	f107 03d8 	add.w	r3, r7, #216	@ 0xd8
 80090ec:	4611      	mov	r1, r2
 80090ee:	4618      	mov	r0, r3
 80090f0:	f7fc fb3d 	bl	800576e <_ZN8touchgfx9colortypeC1Em>
 80090f4:	f507 731a 	add.w	r3, r7, #616	@ 0x268
 80090f8:	f5a3 73c8 	sub.w	r3, r3, #400	@ 0x190
 80090fc:	681b      	ldr	r3, [r3, #0]
 80090fe:	4619      	mov	r1, r3
 8009100:	4620      	mov	r0, r4
 8009102:	f7fc fc05 	bl	8005910 <_ZN8touchgfx3Box8setColorENS_9colortypeE>
    AnomalyDetection_Border_1_1_1_1.setBorderColor(touchgfx::Color::getColorFromRGB(237, 102, 99));
 8009106:	f507 731a 	add.w	r3, r7, #616	@ 0x268
 800910a:	f5a3 7319 	sub.w	r3, r3, #612	@ 0x264
 800910e:	681b      	ldr	r3, [r3, #0]
 8009110:	f603 2488 	addw	r4, r3, #2696	@ 0xa88
 8009114:	23ed      	movs	r3, #237	@ 0xed
 8009116:	f887 3258 	strb.w	r3, [r7, #600]	@ 0x258
 800911a:	2366      	movs	r3, #102	@ 0x66
 800911c:	f887 3257 	strb.w	r3, [r7, #599]	@ 0x257
 8009120:	2363      	movs	r3, #99	@ 0x63
 8009122:	f887 3256 	strb.w	r3, [r7, #598]	@ 0x256
 8009126:	f897 3258 	ldrb.w	r3, [r7, #600]	@ 0x258
 800912a:	041a      	lsls	r2, r3, #16
 800912c:	f897 3257 	ldrb.w	r3, [r7, #599]	@ 0x257
 8009130:	021b      	lsls	r3, r3, #8
 8009132:	431a      	orrs	r2, r3
 8009134:	f897 3256 	ldrb.w	r3, [r7, #598]	@ 0x256
 8009138:	4313      	orrs	r3, r2
 800913a:	f043 427f 	orr.w	r2, r3, #4278190080	@ 0xff000000
 800913e:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 8009142:	4611      	mov	r1, r2
 8009144:	4618      	mov	r0, r3
 8009146:	f7fc fb12 	bl	800576e <_ZN8touchgfx9colortypeC1Em>
 800914a:	f507 731a 	add.w	r3, r7, #616	@ 0x268
 800914e:	f5a3 73ca 	sub.w	r3, r3, #404	@ 0x194
 8009152:	681b      	ldr	r3, [r3, #0]
 8009154:	4619      	mov	r1, r3
 8009156:	4620      	mov	r0, r4
 8009158:	f7fc fc4c 	bl	80059f4 <_ZN8touchgfx13BoxWithBorder14setBorderColorENS_9colortypeE>
    AnomalyDetection_Border_1_1_1_1.setBorderSize(3);
 800915c:	f507 731a 	add.w	r3, r7, #616	@ 0x268
 8009160:	f5a3 7319 	sub.w	r3, r3, #612	@ 0x264
 8009164:	681b      	ldr	r3, [r3, #0]
 8009166:	f603 2388 	addw	r3, r3, #2696	@ 0xa88
 800916a:	2103      	movs	r1, #3
 800916c:	4618      	mov	r0, r3
 800916e:	f7fc fc4f 	bl	8005a10 <_ZN8touchgfx13BoxWithBorder13setBorderSizeEt>
    Alarm_Mute_Indicator_Textbox_1_1_1.add(AnomalyDetection_Border_1_1_1_1);
 8009172:	f507 731a 	add.w	r3, r7, #616	@ 0x268
 8009176:	f5a3 7319 	sub.w	r3, r3, #612	@ 0x264
 800917a:	681b      	ldr	r3, [r3, #0]
 800917c:	f603 225c 	addw	r2, r3, #2652	@ 0xa5c
 8009180:	f507 731a 	add.w	r3, r7, #616	@ 0x268
 8009184:	f5a3 7319 	sub.w	r3, r3, #612	@ 0x264
 8009188:	681b      	ldr	r3, [r3, #0]
 800918a:	f603 2388 	addw	r3, r3, #2696	@ 0xa88
 800918e:	4619      	mov	r1, r3
 8009190:	4610      	mov	r0, r2
 8009192:	f00e fd35 	bl	8017c00 <_ZN8touchgfx9Container3addERNS_8DrawableE>

    AnomalyDetection_Text_1_1_1.setXY(15, 5);
 8009196:	f507 731a 	add.w	r3, r7, #616	@ 0x268
 800919a:	f5a3 7319 	sub.w	r3, r3, #612	@ 0x264
 800919e:	681b      	ldr	r3, [r3, #0]
 80091a0:	f603 23bc 	addw	r3, r3, #2748	@ 0xabc
 80091a4:	2205      	movs	r2, #5
 80091a6:	210f      	movs	r1, #15
 80091a8:	4618      	mov	r0, r3
 80091aa:	f7fa fee3 	bl	8003f74 <_ZN8touchgfx8Drawable5setXYEss>
    AnomalyDetection_Text_1_1_1.setColor(touchgfx::Color::getColorFromRGB(255, 255, 255));
 80091ae:	f507 731a 	add.w	r3, r7, #616	@ 0x268
 80091b2:	f5a3 7319 	sub.w	r3, r3, #612	@ 0x264
 80091b6:	681b      	ldr	r3, [r3, #0]
 80091b8:	f603 24bc 	addw	r4, r3, #2748	@ 0xabc
 80091bc:	23ff      	movs	r3, #255	@ 0xff
 80091be:	f887 325b 	strb.w	r3, [r7, #603]	@ 0x25b
 80091c2:	23ff      	movs	r3, #255	@ 0xff
 80091c4:	f887 325a 	strb.w	r3, [r7, #602]	@ 0x25a
 80091c8:	23ff      	movs	r3, #255	@ 0xff
 80091ca:	f887 3259 	strb.w	r3, [r7, #601]	@ 0x259
 80091ce:	f897 325b 	ldrb.w	r3, [r7, #603]	@ 0x25b
 80091d2:	041a      	lsls	r2, r3, #16
 80091d4:	f897 325a 	ldrb.w	r3, [r7, #602]	@ 0x25a
 80091d8:	021b      	lsls	r3, r3, #8
 80091da:	431a      	orrs	r2, r3
 80091dc:	f897 3259 	ldrb.w	r3, [r7, #601]	@ 0x259
 80091e0:	4313      	orrs	r3, r2
 80091e2:	f043 427f 	orr.w	r2, r3, #4278190080	@ 0xff000000
 80091e6:	f107 03d0 	add.w	r3, r7, #208	@ 0xd0
 80091ea:	4611      	mov	r1, r2
 80091ec:	4618      	mov	r0, r3
 80091ee:	f7fc fabe 	bl	800576e <_ZN8touchgfx9colortypeC1Em>
 80091f2:	f507 731a 	add.w	r3, r7, #616	@ 0x268
 80091f6:	f5a3 73cc 	sub.w	r3, r3, #408	@ 0x198
 80091fa:	681b      	ldr	r3, [r3, #0]
 80091fc:	461a      	mov	r2, r3
 80091fe:	f8c7 425c 	str.w	r4, [r7, #604]	@ 0x25c
 8009202:	f507 731a 	add.w	r3, r7, #616	@ 0x268
 8009206:	f5a3 7317 	sub.w	r3, r3, #604	@ 0x25c
 800920a:	601a      	str	r2, [r3, #0]
        this->color = color;
 800920c:	f8d7 325c 	ldr.w	r3, [r7, #604]	@ 0x25c
 8009210:	f507 721a 	add.w	r2, r7, #616	@ 0x268
 8009214:	f5a2 7217 	sub.w	r2, r2, #604	@ 0x25c
 8009218:	6812      	ldr	r2, [r2, #0]
 800921a:	631a      	str	r2, [r3, #48]	@ 0x30
    }
 800921c:	bf00      	nop
    AnomalyDetection_Text_1_1_1.setLinespacing(0);
 800921e:	f507 731a 	add.w	r3, r7, #616	@ 0x268
 8009222:	f5a3 7319 	sub.w	r3, r3, #612	@ 0x264
 8009226:	681b      	ldr	r3, [r3, #0]
 8009228:	f603 23bc 	addw	r3, r3, #2748	@ 0xabc
 800922c:	f8c7 3264 	str.w	r3, [r7, #612]	@ 0x264
 8009230:	2300      	movs	r3, #0
 8009232:	f8a7 3262 	strh.w	r3, [r7, #610]	@ 0x262
        linespace = space;
 8009236:	f8d7 3264 	ldr.w	r3, [r7, #612]	@ 0x264
 800923a:	f8b7 2262 	ldrh.w	r2, [r7, #610]	@ 0x262
 800923e:	869a      	strh	r2, [r3, #52]	@ 0x34
    }
 8009240:	bf00      	nop
    AnomalyDetection_Text_1_1_1.setTypedText(touchgfx::TypedText(T___SINGLEUSE_V6ST));
 8009242:	f507 731a 	add.w	r3, r7, #616	@ 0x268
 8009246:	f5a3 7319 	sub.w	r3, r3, #612	@ 0x264
 800924a:	681b      	ldr	r3, [r3, #0]
 800924c:	f603 24bc 	addw	r4, r3, #2748	@ 0xabc
 8009250:	f107 03c8 	add.w	r3, r7, #200	@ 0xc8
 8009254:	2104      	movs	r1, #4
 8009256:	4618      	mov	r0, r3
 8009258:	f7fc fbea 	bl	8005a30 <_ZN8touchgfx9TypedTextC1Et>
 800925c:	f107 03c8 	add.w	r3, r7, #200	@ 0xc8
 8009260:	4619      	mov	r1, r3
 8009262:	4620      	mov	r0, r4
 8009264:	f010 fbf7 	bl	8019a56 <_ZN8touchgfx8TextArea12setTypedTextERKNS_9TypedTextE>
 8009268:	f107 03c8 	add.w	r3, r7, #200	@ 0xc8
 800926c:	4618      	mov	r0, r3
 800926e:	f7fa fd75 	bl	8003d5c <_ZN8touchgfx9TypedTextD1Ev>
    Alarm_Mute_Indicator_Textbox_1_1_1.add(AnomalyDetection_Text_1_1_1);
 8009272:	f507 731a 	add.w	r3, r7, #616	@ 0x268
 8009276:	f5a3 7319 	sub.w	r3, r3, #612	@ 0x264
 800927a:	681b      	ldr	r3, [r3, #0]
 800927c:	f603 225c 	addw	r2, r3, #2652	@ 0xa5c
 8009280:	f507 731a 	add.w	r3, r7, #616	@ 0x268
 8009284:	f5a3 7319 	sub.w	r3, r3, #612	@ 0x264
 8009288:	681b      	ldr	r3, [r3, #0]
 800928a:	f603 23bc 	addw	r3, r3, #2748	@ 0xabc
 800928e:	4619      	mov	r1, r3
 8009290:	4610      	mov	r0, r2
 8009292:	f00e fcb5 	bl	8017c00 <_ZN8touchgfx9Container3addERNS_8DrawableE>

    add(__background);
 8009296:	f507 731a 	add.w	r3, r7, #616	@ 0x268
 800929a:	f5a3 7319 	sub.w	r3, r3, #612	@ 0x264
 800929e:	681a      	ldr	r2, [r3, #0]
 80092a0:	f507 731a 	add.w	r3, r7, #616	@ 0x268
 80092a4:	f5a3 7319 	sub.w	r3, r3, #612	@ 0x264
 80092a8:	681b      	ldr	r3, [r3, #0]
 80092aa:	3340      	adds	r3, #64	@ 0x40
 80092ac:	4619      	mov	r1, r3
 80092ae:	4610      	mov	r0, r2
 80092b0:	f7fc fafa 	bl	80058a8 <_ZN8touchgfx6Screen3addERNS_8DrawableE>
    add(Main_Background);
 80092b4:	f507 731a 	add.w	r3, r7, #616	@ 0x268
 80092b8:	f5a3 7319 	sub.w	r3, r3, #612	@ 0x264
 80092bc:	681a      	ldr	r2, [r3, #0]
 80092be:	f507 731a 	add.w	r3, r7, #616	@ 0x268
 80092c2:	f5a3 7319 	sub.w	r3, r3, #612	@ 0x264
 80092c6:	681b      	ldr	r3, [r3, #0]
 80092c8:	336c      	adds	r3, #108	@ 0x6c
 80092ca:	4619      	mov	r1, r3
 80092cc:	4610      	mov	r0, r2
 80092ce:	f7fc faeb 	bl	80058a8 <_ZN8touchgfx6Screen3addERNS_8DrawableE>
    add(Button_Panel);
 80092d2:	f507 731a 	add.w	r3, r7, #616	@ 0x268
 80092d6:	f5a3 7319 	sub.w	r3, r3, #612	@ 0x264
 80092da:	681a      	ldr	r2, [r3, #0]
 80092dc:	f507 731a 	add.w	r3, r7, #616	@ 0x268
 80092e0:	f5a3 7319 	sub.w	r3, r3, #612	@ 0x264
 80092e4:	681b      	ldr	r3, [r3, #0]
 80092e6:	3398      	adds	r3, #152	@ 0x98
 80092e8:	4619      	mov	r1, r3
 80092ea:	4610      	mov	r0, r2
 80092ec:	f7fc fadc 	bl	80058a8 <_ZN8touchgfx6Screen3addERNS_8DrawableE>
    add(Message_panel);
 80092f0:	f507 731a 	add.w	r3, r7, #616	@ 0x268
 80092f4:	f5a3 7319 	sub.w	r3, r3, #612	@ 0x264
 80092f8:	681a      	ldr	r2, [r3, #0]
 80092fa:	f507 731a 	add.w	r3, r7, #616	@ 0x268
 80092fe:	f5a3 7319 	sub.w	r3, r3, #612	@ 0x264
 8009302:	681b      	ldr	r3, [r3, #0]
 8009304:	f203 538c 	addw	r3, r3, #1420	@ 0x58c
 8009308:	4619      	mov	r1, r3
 800930a:	4610      	mov	r0, r2
 800930c:	f7fc facc 	bl	80058a8 <_ZN8touchgfx6Screen3addERNS_8DrawableE>
    add(Alarm_Mute_Indicator_Textbox_1_1);
 8009310:	f507 731a 	add.w	r3, r7, #616	@ 0x268
 8009314:	f5a3 7319 	sub.w	r3, r3, #612	@ 0x264
 8009318:	681a      	ldr	r2, [r3, #0]
 800931a:	f507 731a 	add.w	r3, r7, #616	@ 0x268
 800931e:	f5a3 7319 	sub.w	r3, r3, #612	@ 0x264
 8009322:	681b      	ldr	r3, [r3, #0]
 8009324:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8009328:	4619      	mov	r1, r3
 800932a:	4610      	mov	r0, r2
 800932c:	f7fc fabc 	bl	80058a8 <_ZN8touchgfx6Screen3addERNS_8DrawableE>
    add(Disabled_Button2);
 8009330:	f507 731a 	add.w	r3, r7, #616	@ 0x268
 8009334:	f5a3 7319 	sub.w	r3, r3, #612	@ 0x264
 8009338:	681a      	ldr	r2, [r3, #0]
 800933a:	f507 731a 	add.w	r3, r7, #616	@ 0x268
 800933e:	f5a3 7319 	sub.w	r3, r3, #612	@ 0x264
 8009342:	681b      	ldr	r3, [r3, #0]
 8009344:	f603 139c 	addw	r3, r3, #2460	@ 0x99c
 8009348:	4619      	mov	r1, r3
 800934a:	4610      	mov	r0, r2
 800934c:	f7fc faac 	bl	80058a8 <_ZN8touchgfx6Screen3addERNS_8DrawableE>
    add(Disabled_Button1);
 8009350:	f507 731a 	add.w	r3, r7, #616	@ 0x268
 8009354:	f5a3 7319 	sub.w	r3, r3, #612	@ 0x264
 8009358:	681a      	ldr	r2, [r3, #0]
 800935a:	f507 731a 	add.w	r3, r7, #616	@ 0x268
 800935e:	f5a3 7319 	sub.w	r3, r3, #612	@ 0x264
 8009362:	681b      	ldr	r3, [r3, #0]
 8009364:	f603 13c8 	addw	r3, r3, #2504	@ 0x9c8
 8009368:	4619      	mov	r1, r3
 800936a:	4610      	mov	r0, r2
 800936c:	f7fc fa9c 	bl	80058a8 <_ZN8touchgfx6Screen3addERNS_8DrawableE>
    add(Alert_Mute_Button);
 8009370:	f507 731a 	add.w	r3, r7, #616	@ 0x268
 8009374:	f5a3 7319 	sub.w	r3, r3, #612	@ 0x264
 8009378:	681a      	ldr	r2, [r3, #0]
 800937a:	f507 731a 	add.w	r3, r7, #616	@ 0x268
 800937e:	f5a3 7319 	sub.w	r3, r3, #612	@ 0x264
 8009382:	681b      	ldr	r3, [r3, #0]
 8009384:	f603 13f4 	addw	r3, r3, #2548	@ 0x9f4
 8009388:	4619      	mov	r1, r3
 800938a:	4610      	mov	r0, r2
 800938c:	f7fc fa8c 	bl	80058a8 <_ZN8touchgfx6Screen3addERNS_8DrawableE>
    add(Localize_Button);
 8009390:	f507 731a 	add.w	r3, r7, #616	@ 0x268
 8009394:	f5a3 7319 	sub.w	r3, r3, #612	@ 0x264
 8009398:	681a      	ldr	r2, [r3, #0]
 800939a:	f507 731a 	add.w	r3, r7, #616	@ 0x268
 800939e:	f5a3 7319 	sub.w	r3, r3, #612	@ 0x264
 80093a2:	681b      	ldr	r3, [r3, #0]
 80093a4:	f603 2328 	addw	r3, r3, #2600	@ 0xa28
 80093a8:	4619      	mov	r1, r3
 80093aa:	4610      	mov	r0, r2
 80093ac:	f7fc fa7c 	bl	80058a8 <_ZN8touchgfx6Screen3addERNS_8DrawableE>
    add(Alarm_Mute_Indicator_Textbox_1_1_1);
 80093b0:	f507 731a 	add.w	r3, r7, #616	@ 0x268
 80093b4:	f5a3 7319 	sub.w	r3, r3, #612	@ 0x264
 80093b8:	681a      	ldr	r2, [r3, #0]
 80093ba:	f507 731a 	add.w	r3, r7, #616	@ 0x268
 80093be:	f5a3 7319 	sub.w	r3, r3, #612	@ 0x264
 80093c2:	681b      	ldr	r3, [r3, #0]
 80093c4:	f603 235c 	addw	r3, r3, #2652	@ 0xa5c
 80093c8:	4619      	mov	r1, r3
 80093ca:	4610      	mov	r0, r2
 80093cc:	f7fc fa6c 	bl	80058a8 <_ZN8touchgfx6Screen3addERNS_8DrawableE>
}
 80093d0:	f507 731a 	add.w	r3, r7, #616	@ 0x268
 80093d4:	f5a3 7319 	sub.w	r3, r3, #612	@ 0x264
 80093d8:	681b      	ldr	r3, [r3, #0]
 80093da:	4618      	mov	r0, r3
 80093dc:	f507 771b 	add.w	r7, r7, #620	@ 0x26c
 80093e0:	46bd      	mov	sp, r7
 80093e2:	bd90      	pop	{r4, r7, pc}

080093e4 <_ZN12MainViewBase11setupScreenEv>:

void MainViewBase::setupScreen()
{
 80093e4:	b480      	push	{r7}
 80093e6:	b083      	sub	sp, #12
 80093e8:	af00      	add	r7, sp, #0
 80093ea:	6078      	str	r0, [r7, #4]

}
 80093ec:	bf00      	nop
 80093ee:	370c      	adds	r7, #12
 80093f0:	46bd      	mov	sp, r7
 80093f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80093f6:	4770      	bx	lr

080093f8 <_ZN12MainViewBase14handleKeyEventEh>:

//Handles when a key is pressed
void MainViewBase::handleKeyEvent(uint8_t key)
{
 80093f8:	b580      	push	{r7, lr}
 80093fa:	b082      	sub	sp, #8
 80093fc:	af00      	add	r7, sp, #0
 80093fe:	6078      	str	r0, [r7, #4]
 8009400:	460b      	mov	r3, r1
 8009402:	70fb      	strb	r3, [r7, #3]
    if(87 == key)
 8009404:	78fb      	ldrb	r3, [r7, #3]
 8009406:	2b57      	cmp	r3, #87	@ 0x57
 8009408:	d105      	bne.n	8009416 <_ZN12MainViewBase14handleKeyEventEh+0x1e>
    {
        //Anomaly_Alert_Handler
        //When hardware button 87 clicked call virtual function
        //Call update_anomaly_alert
        update_anomaly_alert();
 800940a:	687b      	ldr	r3, [r7, #4]
 800940c:	681b      	ldr	r3, [r3, #0]
 800940e:	3330      	adds	r3, #48	@ 0x30
 8009410:	681b      	ldr	r3, [r3, #0]
 8009412:	6878      	ldr	r0, [r7, #4]
 8009414:	4798      	blx	r3
    }
    if(88 == key)
 8009416:	78fb      	ldrb	r3, [r7, #3]
 8009418:	2b58      	cmp	r3, #88	@ 0x58
 800941a:	d105      	bne.n	8009428 <_ZN12MainViewBase14handleKeyEventEh+0x30>
    {
        //Set_Volume_Rotary_Encoder
        //When hardware button 88 clicked call virtual function
        //Call set_volume_encoder
        set_volume_encoder();
 800941c:	687b      	ldr	r3, [r7, #4]
 800941e:	681b      	ldr	r3, [r3, #0]
 8009420:	333c      	adds	r3, #60	@ 0x3c
 8009422:	681b      	ldr	r3, [r3, #0]
 8009424:	6878      	ldr	r0, [r7, #4]
 8009426:	4798      	blx	r3
    }
    if(89 == key)
 8009428:	78fb      	ldrb	r3, [r7, #3]
 800942a:	2b59      	cmp	r3, #89	@ 0x59
 800942c:	d105      	bne.n	800943a <_ZN12MainViewBase14handleKeyEventEh+0x42>
    {
        //Toggle_Voice_SW
        //When hardware button 89 clicked call virtual function
        //Call toggle_voice
        toggle_voice();
 800942e:	687b      	ldr	r3, [r7, #4]
 8009430:	681b      	ldr	r3, [r3, #0]
 8009432:	3334      	adds	r3, #52	@ 0x34
 8009434:	681b      	ldr	r3, [r3, #0]
 8009436:	6878      	ldr	r0, [r7, #4]
 8009438:	4798      	blx	r3
    }
    if(90 == key)
 800943a:	78fb      	ldrb	r3, [r7, #3]
 800943c:	2b5a      	cmp	r3, #90	@ 0x5a
 800943e:	d105      	bne.n	800944c <_ZN12MainViewBase14handleKeyEventEh+0x54>
    {
        //Alert_Mute_Pressed_Button
        //When hardware button 90 clicked call virtual function
        //Call alert_mute_pressed
        alert_mute_pressed();
 8009440:	687b      	ldr	r3, [r7, #4]
 8009442:	681b      	ldr	r3, [r3, #0]
 8009444:	3338      	adds	r3, #56	@ 0x38
 8009446:	681b      	ldr	r3, [r3, #0]
 8009448:	6878      	ldr	r0, [r7, #4]
 800944a:	4798      	blx	r3
    }
}
 800944c:	bf00      	nop
 800944e:	3708      	adds	r7, #8
 8009450:	46bd      	mov	sp, r7
 8009452:	bd80      	pop	{r7, pc}

08009454 <_ZN12MainViewBase21buttonCallbackHandlerERKN8touchgfx14AbstractButtonE>:

void MainViewBase::buttonCallbackHandler(const touchgfx::AbstractButton& src)
{
 8009454:	b580      	push	{r7, lr}
 8009456:	b082      	sub	sp, #8
 8009458:	af00      	add	r7, sp, #0
 800945a:	6078      	str	r0, [r7, #4]
 800945c:	6039      	str	r1, [r7, #0]
    if (&src == &Voice_Toggle_Button)
 800945e:	687b      	ldr	r3, [r7, #4]
 8009460:	f203 43f4 	addw	r3, r3, #1268	@ 0x4f4
 8009464:	683a      	ldr	r2, [r7, #0]
 8009466:	429a      	cmp	r2, r3
 8009468:	d106      	bne.n	8009478 <_ZN12MainViewBase21buttonCallbackHandlerERKN8touchgfx14AbstractButtonE+0x24>
    {
        //Toggle_Voice
        //When Voice_Toggle_Button clicked call virtual function
        //Call toggle_voice
        toggle_voice();
 800946a:	687b      	ldr	r3, [r7, #4]
 800946c:	681b      	ldr	r3, [r3, #0]
 800946e:	3334      	adds	r3, #52	@ 0x34
 8009470:	681b      	ldr	r3, [r3, #0]
 8009472:	6878      	ldr	r0, [r7, #4]
 8009474:	4798      	blx	r3
        //Switch_To_Anomaly_Screen
        //When Localize_Button clicked change screen to Localize_Anomaly
        //Go to Localize_Anomaly with screen transition towards North
        application().gotoLocalize_AnomalyScreenWipeTransitionNorth();
    }
}
 8009476:	e019      	b.n	80094ac <_ZN12MainViewBase21buttonCallbackHandlerERKN8touchgfx14AbstractButtonE+0x58>
    else if (&src == &Alert_Mute_Button)
 8009478:	687b      	ldr	r3, [r7, #4]
 800947a:	f603 13f4 	addw	r3, r3, #2548	@ 0x9f4
 800947e:	683a      	ldr	r2, [r7, #0]
 8009480:	429a      	cmp	r2, r3
 8009482:	d106      	bne.n	8009492 <_ZN12MainViewBase21buttonCallbackHandlerERKN8touchgfx14AbstractButtonE+0x3e>
        alert_mute_pressed();
 8009484:	687b      	ldr	r3, [r7, #4]
 8009486:	681b      	ldr	r3, [r3, #0]
 8009488:	3338      	adds	r3, #56	@ 0x38
 800948a:	681b      	ldr	r3, [r3, #0]
 800948c:	6878      	ldr	r0, [r7, #4]
 800948e:	4798      	blx	r3
}
 8009490:	e00c      	b.n	80094ac <_ZN12MainViewBase21buttonCallbackHandlerERKN8touchgfx14AbstractButtonE+0x58>
    else if (&src == &Localize_Button)
 8009492:	687b      	ldr	r3, [r7, #4]
 8009494:	f603 2328 	addw	r3, r3, #2600	@ 0xa28
 8009498:	683a      	ldr	r2, [r7, #0]
 800949a:	429a      	cmp	r2, r3
 800949c:	d106      	bne.n	80094ac <_ZN12MainViewBase21buttonCallbackHandlerERKN8touchgfx14AbstractButtonE+0x58>
        application().gotoLocalize_AnomalyScreenWipeTransitionNorth();
 800949e:	6878      	ldr	r0, [r7, #4]
 80094a0:	f7fd fc94 	bl	8006dcc <_ZN12MainViewBase11applicationEv>
 80094a4:	4603      	mov	r3, r0
 80094a6:	4618      	mov	r0, r3
 80094a8:	f7fb f870 	bl	800458c <_ZN23FrontendApplicationBase45gotoLocalize_AnomalyScreenWipeTransitionNorthEv>
}
 80094ac:	bf00      	nop
 80094ae:	3708      	adds	r7, #8
 80094b0:	46bd      	mov	sp, r7
 80094b2:	bd80      	pop	{r7, pc}

080094b4 <_ZN12MainViewBase33sliderValueChangedCallbackHandlerERKN8touchgfx6SliderEi>:

void MainViewBase::sliderValueChangedCallbackHandler(const touchgfx::Slider& src, int value)
{
 80094b4:	b580      	push	{r7, lr}
 80094b6:	b084      	sub	sp, #16
 80094b8:	af00      	add	r7, sp, #0
 80094ba:	60f8      	str	r0, [r7, #12]
 80094bc:	60b9      	str	r1, [r7, #8]
 80094be:	607a      	str	r2, [r7, #4]
    if (&src == &Volume_Slider)
 80094c0:	68fb      	ldr	r3, [r7, #12]
 80094c2:	f503 737e 	add.w	r3, r3, #1016	@ 0x3f8
 80094c6:	68ba      	ldr	r2, [r7, #8]
 80094c8:	429a      	cmp	r2, r3
 80094ca:	d106      	bne.n	80094da <_ZN12MainViewBase33sliderValueChangedCallbackHandlerERKN8touchgfx6SliderEi+0x26>
    {
        //Set_Volume_Slider
        //When Volume_Slider value changed call virtual function
        //Call set_volume_slider
        set_volume_slider(value);
 80094cc:	68fb      	ldr	r3, [r7, #12]
 80094ce:	681b      	ldr	r3, [r3, #0]
 80094d0:	332c      	adds	r3, #44	@ 0x2c
 80094d2:	681b      	ldr	r3, [r3, #0]
 80094d4:	6879      	ldr	r1, [r7, #4]
 80094d6:	68f8      	ldr	r0, [r7, #12]
 80094d8:	4798      	blx	r3
    }
}
 80094da:	bf00      	nop
 80094dc:	3710      	adds	r7, #16
 80094de:	46bd      	mov	sp, r7
 80094e0:	bd80      	pop	{r7, pc}
	...

080094e4 <_ZN8touchgfx4ViewI13MainPresenterEC1Ev>:
    View()
 80094e4:	b580      	push	{r7, lr}
 80094e6:	b082      	sub	sp, #8
 80094e8:	af00      	add	r7, sp, #0
 80094ea:	6078      	str	r0, [r7, #4]
        : presenter(0)
 80094ec:	687b      	ldr	r3, [r7, #4]
 80094ee:	4618      	mov	r0, r3
 80094f0:	f013 fd22 	bl	801cf38 <_ZN8touchgfx6ScreenC1Ev>
 80094f4:	4a05      	ldr	r2, [pc, #20]	@ (800950c <_ZN8touchgfx4ViewI13MainPresenterEC1Ev+0x28>)
 80094f6:	687b      	ldr	r3, [r7, #4]
 80094f8:	601a      	str	r2, [r3, #0]
 80094fa:	687b      	ldr	r3, [r7, #4]
 80094fc:	2200      	movs	r2, #0
 80094fe:	63da      	str	r2, [r3, #60]	@ 0x3c
    }
 8009500:	687b      	ldr	r3, [r7, #4]
 8009502:	4618      	mov	r0, r3
 8009504:	3708      	adds	r7, #8
 8009506:	46bd      	mov	sp, r7
 8009508:	bd80      	pop	{r7, pc}
 800950a:	bf00      	nop
 800950c:	0802d444 	.word	0x0802d444

08009510 <_ZN8touchgfx8CallbackI12MainViewBaseRKNS_14AbstractButtonEvvEC1EPS1_MS1_FvS4_E>:
    Callback(dest_type* pobject, void (dest_type::*pmemfun_1)(T1))
 8009510:	b580      	push	{r7, lr}
 8009512:	b084      	sub	sp, #16
 8009514:	af00      	add	r7, sp, #0
 8009516:	60f8      	str	r0, [r7, #12]
 8009518:	60b9      	str	r1, [r7, #8]
 800951a:	4639      	mov	r1, r7
 800951c:	e881 000c 	stmia.w	r1, {r2, r3}
        : pobject(pobject), pmemfun_1(pmemfun_1)
 8009520:	68fb      	ldr	r3, [r7, #12]
 8009522:	4618      	mov	r0, r3
 8009524:	f7fd f924 	bl	8006770 <_ZN8touchgfx15GenericCallbackIRKNS_14AbstractButtonEvvEC1Ev>
 8009528:	4a08      	ldr	r2, [pc, #32]	@ (800954c <_ZN8touchgfx8CallbackI12MainViewBaseRKNS_14AbstractButtonEvvEC1EPS1_MS1_FvS4_E+0x3c>)
 800952a:	68fb      	ldr	r3, [r7, #12]
 800952c:	601a      	str	r2, [r3, #0]
 800952e:	68fb      	ldr	r3, [r7, #12]
 8009530:	68ba      	ldr	r2, [r7, #8]
 8009532:	605a      	str	r2, [r3, #4]
 8009534:	68fb      	ldr	r3, [r7, #12]
 8009536:	3308      	adds	r3, #8
 8009538:	463a      	mov	r2, r7
 800953a:	e892 0003 	ldmia.w	r2, {r0, r1}
 800953e:	e883 0003 	stmia.w	r3, {r0, r1}
    }
 8009542:	68fb      	ldr	r3, [r7, #12]
 8009544:	4618      	mov	r0, r3
 8009546:	3710      	adds	r7, #16
 8009548:	46bd      	mov	sp, r7
 800954a:	bd80      	pop	{r7, pc}
 800954c:	0802d42c 	.word	0x0802d42c

08009550 <_ZN8touchgfx15GenericCallbackIRKNS_6SliderEivEC1Ev>:
class GenericCallback<T1, T2, void>
 8009550:	b480      	push	{r7}
 8009552:	b083      	sub	sp, #12
 8009554:	af00      	add	r7, sp, #0
 8009556:	6078      	str	r0, [r7, #4]
 8009558:	4a04      	ldr	r2, [pc, #16]	@ (800956c <_ZN8touchgfx15GenericCallbackIRKNS_6SliderEivEC1Ev+0x1c>)
 800955a:	687b      	ldr	r3, [r7, #4]
 800955c:	601a      	str	r2, [r3, #0]
 800955e:	687b      	ldr	r3, [r7, #4]
 8009560:	4618      	mov	r0, r3
 8009562:	370c      	adds	r7, #12
 8009564:	46bd      	mov	sp, r7
 8009566:	f85d 7b04 	ldr.w	r7, [sp], #4
 800956a:	4770      	bx	lr
 800956c:	0802d478 	.word	0x0802d478

08009570 <_ZN8touchgfx8CallbackI12MainViewBaseRKNS_6SliderEivEC1EPS1_MS1_FvS4_iE>:
    Callback(dest_type* pobject, void (dest_type::*pmemfun_2)(T1, T2))
 8009570:	b580      	push	{r7, lr}
 8009572:	b084      	sub	sp, #16
 8009574:	af00      	add	r7, sp, #0
 8009576:	60f8      	str	r0, [r7, #12]
 8009578:	60b9      	str	r1, [r7, #8]
 800957a:	4639      	mov	r1, r7
 800957c:	e881 000c 	stmia.w	r1, {r2, r3}
        : pobject(pobject), pmemfun_2(pmemfun_2)
 8009580:	68fb      	ldr	r3, [r7, #12]
 8009582:	4618      	mov	r0, r3
 8009584:	f7ff ffe4 	bl	8009550 <_ZN8touchgfx15GenericCallbackIRKNS_6SliderEivEC1Ev>
 8009588:	4a08      	ldr	r2, [pc, #32]	@ (80095ac <_ZN8touchgfx8CallbackI12MainViewBaseRKNS_6SliderEivEC1EPS1_MS1_FvS4_iE+0x3c>)
 800958a:	68fb      	ldr	r3, [r7, #12]
 800958c:	601a      	str	r2, [r3, #0]
 800958e:	68fb      	ldr	r3, [r7, #12]
 8009590:	68ba      	ldr	r2, [r7, #8]
 8009592:	605a      	str	r2, [r3, #4]
 8009594:	68fb      	ldr	r3, [r7, #12]
 8009596:	3308      	adds	r3, #8
 8009598:	463a      	mov	r2, r7
 800959a:	e892 0003 	ldmia.w	r2, {r0, r1}
 800959e:	e883 0003 	stmia.w	r3, {r0, r1}
    }
 80095a2:	68fb      	ldr	r3, [r7, #12]
 80095a4:	4618      	mov	r0, r3
 80095a6:	3710      	adds	r7, #16
 80095a8:	46bd      	mov	sp, r7
 80095aa:	bd80      	pop	{r7, pc}
 80095ac:	0802d414 	.word	0x0802d414

080095b0 <_ZN8touchgfx15GenericCallbackIRKNS_6SliderEivED1Ev>:
    virtual ~GenericCallback()
 80095b0:	b480      	push	{r7}
 80095b2:	b083      	sub	sp, #12
 80095b4:	af00      	add	r7, sp, #0
 80095b6:	6078      	str	r0, [r7, #4]
    }
 80095b8:	4a04      	ldr	r2, [pc, #16]	@ (80095cc <_ZN8touchgfx15GenericCallbackIRKNS_6SliderEivED1Ev+0x1c>)
 80095ba:	687b      	ldr	r3, [r7, #4]
 80095bc:	601a      	str	r2, [r3, #0]
 80095be:	687b      	ldr	r3, [r7, #4]
 80095c0:	4618      	mov	r0, r3
 80095c2:	370c      	adds	r7, #12
 80095c4:	46bd      	mov	sp, r7
 80095c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80095ca:	4770      	bx	lr
 80095cc:	0802d478 	.word	0x0802d478

080095d0 <_ZN8touchgfx15GenericCallbackIRKNS_6SliderEivED0Ev>:
    virtual ~GenericCallback()
 80095d0:	b580      	push	{r7, lr}
 80095d2:	b082      	sub	sp, #8
 80095d4:	af00      	add	r7, sp, #0
 80095d6:	6078      	str	r0, [r7, #4]
    }
 80095d8:	6878      	ldr	r0, [r7, #4]
 80095da:	f7ff ffe9 	bl	80095b0 <_ZN8touchgfx15GenericCallbackIRKNS_6SliderEivED1Ev>
 80095de:	2104      	movs	r1, #4
 80095e0:	6878      	ldr	r0, [r7, #4]
 80095e2:	f021 fb00 	bl	802abe6 <_ZdlPvj>
 80095e6:	687b      	ldr	r3, [r7, #4]
 80095e8:	4618      	mov	r0, r3
 80095ea:	3708      	adds	r7, #8
 80095ec:	46bd      	mov	sp, r7
 80095ee:	bd80      	pop	{r7, pc}

080095f0 <_ZN8touchgfx8CallbackI12MainViewBaseRKNS_6SliderEivED1Ev>:
struct Callback<dest_type, T1, T2, void> : public GenericCallback<T1, T2>
 80095f0:	b580      	push	{r7, lr}
 80095f2:	b082      	sub	sp, #8
 80095f4:	af00      	add	r7, sp, #0
 80095f6:	6078      	str	r0, [r7, #4]
 80095f8:	4a05      	ldr	r2, [pc, #20]	@ (8009610 <_ZN8touchgfx8CallbackI12MainViewBaseRKNS_6SliderEivED1Ev+0x20>)
 80095fa:	687b      	ldr	r3, [r7, #4]
 80095fc:	601a      	str	r2, [r3, #0]
 80095fe:	687b      	ldr	r3, [r7, #4]
 8009600:	4618      	mov	r0, r3
 8009602:	f7ff ffd5 	bl	80095b0 <_ZN8touchgfx15GenericCallbackIRKNS_6SliderEivED1Ev>
 8009606:	687b      	ldr	r3, [r7, #4]
 8009608:	4618      	mov	r0, r3
 800960a:	3708      	adds	r7, #8
 800960c:	46bd      	mov	sp, r7
 800960e:	bd80      	pop	{r7, pc}
 8009610:	0802d414 	.word	0x0802d414

08009614 <_ZN8touchgfx8CallbackI12MainViewBaseRKNS_6SliderEivED0Ev>:
 8009614:	b580      	push	{r7, lr}
 8009616:	b082      	sub	sp, #8
 8009618:	af00      	add	r7, sp, #0
 800961a:	6078      	str	r0, [r7, #4]
 800961c:	6878      	ldr	r0, [r7, #4]
 800961e:	f7ff ffe7 	bl	80095f0 <_ZN8touchgfx8CallbackI12MainViewBaseRKNS_6SliderEivED1Ev>
 8009622:	2110      	movs	r1, #16
 8009624:	6878      	ldr	r0, [r7, #4]
 8009626:	f021 fade 	bl	802abe6 <_ZdlPvj>
 800962a:	687b      	ldr	r3, [r7, #4]
 800962c:	4618      	mov	r0, r3
 800962e:	3708      	adds	r7, #8
 8009630:	46bd      	mov	sp, r7
 8009632:	bd80      	pop	{r7, pc}

08009634 <_ZN8touchgfx8CallbackI12MainViewBaseRKNS_14AbstractButtonEvvED1Ev>:
struct Callback<dest_type, T1, void, void> : public GenericCallback<T1>
 8009634:	b580      	push	{r7, lr}
 8009636:	b082      	sub	sp, #8
 8009638:	af00      	add	r7, sp, #0
 800963a:	6078      	str	r0, [r7, #4]
 800963c:	4a05      	ldr	r2, [pc, #20]	@ (8009654 <_ZN8touchgfx8CallbackI12MainViewBaseRKNS_14AbstractButtonEvvED1Ev+0x20>)
 800963e:	687b      	ldr	r3, [r7, #4]
 8009640:	601a      	str	r2, [r3, #0]
 8009642:	687b      	ldr	r3, [r7, #4]
 8009644:	4618      	mov	r0, r3
 8009646:	f7fd f8c3 	bl	80067d0 <_ZN8touchgfx15GenericCallbackIRKNS_14AbstractButtonEvvED1Ev>
 800964a:	687b      	ldr	r3, [r7, #4]
 800964c:	4618      	mov	r0, r3
 800964e:	3708      	adds	r7, #8
 8009650:	46bd      	mov	sp, r7
 8009652:	bd80      	pop	{r7, pc}
 8009654:	0802d42c 	.word	0x0802d42c

08009658 <_ZN8touchgfx8CallbackI12MainViewBaseRKNS_14AbstractButtonEvvED0Ev>:
 8009658:	b580      	push	{r7, lr}
 800965a:	b082      	sub	sp, #8
 800965c:	af00      	add	r7, sp, #0
 800965e:	6078      	str	r0, [r7, #4]
 8009660:	6878      	ldr	r0, [r7, #4]
 8009662:	f7ff ffe7 	bl	8009634 <_ZN8touchgfx8CallbackI12MainViewBaseRKNS_14AbstractButtonEvvED1Ev>
 8009666:	2110      	movs	r1, #16
 8009668:	6878      	ldr	r0, [r7, #4]
 800966a:	f021 fabc 	bl	802abe6 <_ZdlPvj>
 800966e:	687b      	ldr	r3, [r7, #4]
 8009670:	4618      	mov	r0, r3
 8009672:	3708      	adds	r7, #8
 8009674:	46bd      	mov	sp, r7
 8009676:	bd80      	pop	{r7, pc}

08009678 <_ZN8touchgfx25AbstractProgressIndicatorD1Ev>:
 * to implement a progress indicator. For more specific implementations see classes that
 * inherit from AbstractProgressIndicator.
 *
 * @see BoxProgress, CircleProgress, ImageProgress, LineProgress, TextProgress
 */
class AbstractProgressIndicator : public Container
 8009678:	b580      	push	{r7, lr}
 800967a:	b082      	sub	sp, #8
 800967c:	af00      	add	r7, sp, #0
 800967e:	6078      	str	r0, [r7, #4]
 8009680:	4a0a      	ldr	r2, [pc, #40]	@ (80096ac <_ZN8touchgfx25AbstractProgressIndicatorD1Ev+0x34>)
 8009682:	687b      	ldr	r3, [r7, #4]
 8009684:	601a      	str	r2, [r3, #0]
 8009686:	687b      	ldr	r3, [r7, #4]
 8009688:	3358      	adds	r3, #88	@ 0x58
 800968a:	4618      	mov	r0, r3
 800968c:	f7fd f8e2 	bl	8006854 <_ZN8touchgfx9ContainerD1Ev>
 8009690:	687b      	ldr	r3, [r7, #4]
 8009692:	332c      	adds	r3, #44	@ 0x2c
 8009694:	4618      	mov	r0, r3
 8009696:	f7fd f8ff 	bl	8006898 <_ZN8touchgfx5ImageD1Ev>
 800969a:	687b      	ldr	r3, [r7, #4]
 800969c:	4618      	mov	r0, r3
 800969e:	f7fd f8d9 	bl	8006854 <_ZN8touchgfx9ContainerD1Ev>
 80096a2:	687b      	ldr	r3, [r7, #4]
 80096a4:	4618      	mov	r0, r3
 80096a6:	3708      	adds	r7, #8
 80096a8:	46bd      	mov	sp, r7
 80096aa:	bd80      	pop	{r7, pc}
 80096ac:	0802d9d8 	.word	0x0802d9d8

080096b0 <_ZN8touchgfx25AbstractProgressIndicatorD0Ev>:
 80096b0:	b580      	push	{r7, lr}
 80096b2:	b082      	sub	sp, #8
 80096b4:	af00      	add	r7, sp, #0
 80096b6:	6078      	str	r0, [r7, #4]
 80096b8:	6878      	ldr	r0, [r7, #4]
 80096ba:	f7ff ffdd 	bl	8009678 <_ZN8touchgfx25AbstractProgressIndicatorD1Ev>
 80096be:	21b4      	movs	r1, #180	@ 0xb4
 80096c0:	6878      	ldr	r0, [r7, #4]
 80096c2:	f021 fa90 	bl	802abe6 <_ZdlPvj>
 80096c6:	687b      	ldr	r3, [r7, #4]
 80096c8:	4618      	mov	r0, r3
 80096ca:	3708      	adds	r7, #8
 80096cc:	46bd      	mov	sp, r7
 80096ce:	bd80      	pop	{r7, pc}

080096d0 <_ZN8touchgfx23TextAreaWithOneWildcardD1Ev>:
 * expected to contain a wildcard &lt;placeholder> from the text.
 *
 * @note the text converter tool converts the <...> to ascii value 2 which is then being
 *       replaced by a wildcard text.
 */
class TextAreaWithOneWildcard : public TextArea
 80096d0:	b580      	push	{r7, lr}
 80096d2:	b082      	sub	sp, #8
 80096d4:	af00      	add	r7, sp, #0
 80096d6:	6078      	str	r0, [r7, #4]
 80096d8:	4a05      	ldr	r2, [pc, #20]	@ (80096f0 <_ZN8touchgfx23TextAreaWithOneWildcardD1Ev+0x20>)
 80096da:	687b      	ldr	r3, [r7, #4]
 80096dc:	601a      	str	r2, [r3, #0]
 80096de:	687b      	ldr	r3, [r7, #4]
 80096e0:	4618      	mov	r0, r3
 80096e2:	f7fd f91d 	bl	8006920 <_ZN8touchgfx8TextAreaD1Ev>
 80096e6:	687b      	ldr	r3, [r7, #4]
 80096e8:	4618      	mov	r0, r3
 80096ea:	3708      	adds	r7, #8
 80096ec:	46bd      	mov	sp, r7
 80096ee:	bd80      	pop	{r7, pc}
 80096f0:	0802edac 	.word	0x0802edac

080096f4 <_ZN8touchgfx23TextAreaWithOneWildcardD0Ev>:
 80096f4:	b580      	push	{r7, lr}
 80096f6:	b082      	sub	sp, #8
 80096f8:	af00      	add	r7, sp, #0
 80096fa:	6078      	str	r0, [r7, #4]
 80096fc:	6878      	ldr	r0, [r7, #4]
 80096fe:	f7ff ffe7 	bl	80096d0 <_ZN8touchgfx23TextAreaWithOneWildcardD1Ev>
 8009702:	2140      	movs	r1, #64	@ 0x40
 8009704:	6878      	ldr	r0, [r7, #4]
 8009706:	f021 fa6e 	bl	802abe6 <_ZdlPvj>
 800970a:	687b      	ldr	r3, [r7, #4]
 800970c:	4618      	mov	r0, r3
 800970e:	3708      	adds	r7, #8
 8009710:	46bd      	mov	sp, r7
 8009712:	bd80      	pop	{r7, pc}

08009714 <_ZN8touchgfx12TextProgressD1Ev>:
/**
 * A text progress will display progress as a number with a given number of decimals.
 *
 * @note The implementation does not use floating point variables to calculate the progress.
 */
class TextProgress : public AbstractProgressIndicator
 8009714:	b580      	push	{r7, lr}
 8009716:	b082      	sub	sp, #8
 8009718:	af00      	add	r7, sp, #0
 800971a:	6078      	str	r0, [r7, #4]
 800971c:	4a08      	ldr	r2, [pc, #32]	@ (8009740 <_ZN8touchgfx12TextProgressD1Ev+0x2c>)
 800971e:	687b      	ldr	r3, [r7, #4]
 8009720:	601a      	str	r2, [r3, #0]
 8009722:	687b      	ldr	r3, [r7, #4]
 8009724:	33b4      	adds	r3, #180	@ 0xb4
 8009726:	4618      	mov	r0, r3
 8009728:	f7ff ffd2 	bl	80096d0 <_ZN8touchgfx23TextAreaWithOneWildcardD1Ev>
 800972c:	687b      	ldr	r3, [r7, #4]
 800972e:	4618      	mov	r0, r3
 8009730:	f7ff ffa2 	bl	8009678 <_ZN8touchgfx25AbstractProgressIndicatorD1Ev>
 8009734:	687b      	ldr	r3, [r7, #4]
 8009736:	4618      	mov	r0, r3
 8009738:	3708      	adds	r7, #8
 800973a:	46bd      	mov	sp, r7
 800973c:	bd80      	pop	{r7, pc}
 800973e:	bf00      	nop
 8009740:	0802d874 	.word	0x0802d874

08009744 <_ZN8touchgfx12TextProgressD0Ev>:
 8009744:	b580      	push	{r7, lr}
 8009746:	b082      	sub	sp, #8
 8009748:	af00      	add	r7, sp, #0
 800974a:	6078      	str	r0, [r7, #4]
 800974c:	6878      	ldr	r0, [r7, #4]
 800974e:	f7ff ffe1 	bl	8009714 <_ZN8touchgfx12TextProgressD1Ev>
 8009752:	f44f 7184 	mov.w	r1, #264	@ 0x108
 8009756:	6878      	ldr	r0, [r7, #4]
 8009758:	f021 fa45 	bl	802abe6 <_ZdlPvj>
 800975c:	687b      	ldr	r3, [r7, #4]
 800975e:	4618      	mov	r0, r3
 8009760:	3708      	adds	r7, #8
 8009762:	46bd      	mov	sp, r7
 8009764:	bd80      	pop	{r7, pc}
	...

08009768 <_ZN8touchgfx6SliderD1Ev>:
class Slider : public Container
 8009768:	b580      	push	{r7, lr}
 800976a:	b082      	sub	sp, #8
 800976c:	af00      	add	r7, sp, #0
 800976e:	6078      	str	r0, [r7, #4]
 8009770:	4a0f      	ldr	r2, [pc, #60]	@ (80097b0 <_ZN8touchgfx6SliderD1Ev+0x48>)
 8009772:	687b      	ldr	r3, [r7, #4]
 8009774:	601a      	str	r2, [r3, #0]
 8009776:	687b      	ldr	r3, [r7, #4]
 8009778:	33c0      	adds	r3, #192	@ 0xc0
 800977a:	4618      	mov	r0, r3
 800977c:	f7fd f86a 	bl	8006854 <_ZN8touchgfx9ContainerD1Ev>
 8009780:	687b      	ldr	r3, [r7, #4]
 8009782:	3394      	adds	r3, #148	@ 0x94
 8009784:	4618      	mov	r0, r3
 8009786:	f7fd f887 	bl	8006898 <_ZN8touchgfx5ImageD1Ev>
 800978a:	687b      	ldr	r3, [r7, #4]
 800978c:	3368      	adds	r3, #104	@ 0x68
 800978e:	4618      	mov	r0, r3
 8009790:	f7fd f882 	bl	8006898 <_ZN8touchgfx5ImageD1Ev>
 8009794:	687b      	ldr	r3, [r7, #4]
 8009796:	333c      	adds	r3, #60	@ 0x3c
 8009798:	4618      	mov	r0, r3
 800979a:	f7fd f87d 	bl	8006898 <_ZN8touchgfx5ImageD1Ev>
 800979e:	687b      	ldr	r3, [r7, #4]
 80097a0:	4618      	mov	r0, r3
 80097a2:	f7fd f857 	bl	8006854 <_ZN8touchgfx9ContainerD1Ev>
 80097a6:	687b      	ldr	r3, [r7, #4]
 80097a8:	4618      	mov	r0, r3
 80097aa:	3708      	adds	r7, #8
 80097ac:	46bd      	mov	sp, r7
 80097ae:	bd80      	pop	{r7, pc}
 80097b0:	0802dee0 	.word	0x0802dee0

080097b4 <_ZN8touchgfx6SliderD0Ev>:
 80097b4:	b580      	push	{r7, lr}
 80097b6:	b082      	sub	sp, #8
 80097b8:	af00      	add	r7, sp, #0
 80097ba:	6078      	str	r0, [r7, #4]
 80097bc:	6878      	ldr	r0, [r7, #4]
 80097be:	f7ff ffd3 	bl	8009768 <_ZN8touchgfx6SliderD1Ev>
 80097c2:	21fc      	movs	r1, #252	@ 0xfc
 80097c4:	6878      	ldr	r0, [r7, #4]
 80097c6:	f021 fa0e 	bl	802abe6 <_ZdlPvj>
 80097ca:	687b      	ldr	r3, [r7, #4]
 80097cc:	4618      	mov	r0, r3
 80097ce:	3708      	adds	r7, #8
 80097d0:	46bd      	mov	sp, r7
 80097d2:	bd80      	pop	{r7, pc}

080097d4 <_ZN8touchgfx12ToggleButtonD1Ev>:
 80097d4:	b580      	push	{r7, lr}
 80097d6:	b082      	sub	sp, #8
 80097d8:	af00      	add	r7, sp, #0
 80097da:	6078      	str	r0, [r7, #4]
 80097dc:	4a05      	ldr	r2, [pc, #20]	@ (80097f4 <_ZN8touchgfx12ToggleButtonD1Ev+0x20>)
 80097de:	687b      	ldr	r3, [r7, #4]
 80097e0:	601a      	str	r2, [r3, #0]
 80097e2:	687b      	ldr	r3, [r7, #4]
 80097e4:	4618      	mov	r0, r3
 80097e6:	f7fd f8c3 	bl	8006970 <_ZN8touchgfx6ButtonD1Ev>
 80097ea:	687b      	ldr	r3, [r7, #4]
 80097ec:	4618      	mov	r0, r3
 80097ee:	3708      	adds	r7, #8
 80097f0:	46bd      	mov	sp, r7
 80097f2:	bd80      	pop	{r7, pc}
 80097f4:	0802ea68 	.word	0x0802ea68

080097f8 <_ZN8touchgfx12ToggleButtonD0Ev>:
 80097f8:	b580      	push	{r7, lr}
 80097fa:	b082      	sub	sp, #8
 80097fc:	af00      	add	r7, sp, #0
 80097fe:	6078      	str	r0, [r7, #4]
 8009800:	6878      	ldr	r0, [r7, #4]
 8009802:	f7ff ffe7 	bl	80097d4 <_ZN8touchgfx12ToggleButtonD1Ev>
 8009806:	2138      	movs	r1, #56	@ 0x38
 8009808:	6878      	ldr	r0, [r7, #4]
 800980a:	f021 f9ec 	bl	802abe6 <_ZdlPvj>
 800980e:	687b      	ldr	r3, [r7, #4]
 8009810:	4618      	mov	r0, r3
 8009812:	3708      	adds	r7, #8
 8009814:	46bd      	mov	sp, r7
 8009816:	bd80      	pop	{r7, pc}

08009818 <_ZN8touchgfx8CallbackI12MainViewBaseRKNS_6SliderEivE7executeES4_i>:
    virtual void execute(T1 t1, T2 t2)
 8009818:	b580      	push	{r7, lr}
 800981a:	b084      	sub	sp, #16
 800981c:	af00      	add	r7, sp, #0
 800981e:	60f8      	str	r0, [r7, #12]
 8009820:	60b9      	str	r1, [r7, #8]
 8009822:	607a      	str	r2, [r7, #4]
        (pobject->*pmemfun_2)(t1, t2);
 8009824:	68fb      	ldr	r3, [r7, #12]
 8009826:	685b      	ldr	r3, [r3, #4]
 8009828:	68fa      	ldr	r2, [r7, #12]
 800982a:	68d2      	ldr	r2, [r2, #12]
 800982c:	1052      	asrs	r2, r2, #1
 800982e:	1898      	adds	r0, r3, r2
 8009830:	68fb      	ldr	r3, [r7, #12]
 8009832:	68db      	ldr	r3, [r3, #12]
 8009834:	f003 0301 	and.w	r3, r3, #1
 8009838:	2b00      	cmp	r3, #0
 800983a:	d102      	bne.n	8009842 <_ZN8touchgfx8CallbackI12MainViewBaseRKNS_6SliderEivE7executeES4_i+0x2a>
 800983c:	68fb      	ldr	r3, [r7, #12]
 800983e:	689b      	ldr	r3, [r3, #8]
 8009840:	e00a      	b.n	8009858 <_ZN8touchgfx8CallbackI12MainViewBaseRKNS_6SliderEivE7executeES4_i+0x40>
 8009842:	68fb      	ldr	r3, [r7, #12]
 8009844:	685b      	ldr	r3, [r3, #4]
 8009846:	68fa      	ldr	r2, [r7, #12]
 8009848:	68d2      	ldr	r2, [r2, #12]
 800984a:	1052      	asrs	r2, r2, #1
 800984c:	4413      	add	r3, r2
 800984e:	681b      	ldr	r3, [r3, #0]
 8009850:	68fa      	ldr	r2, [r7, #12]
 8009852:	6892      	ldr	r2, [r2, #8]
 8009854:	4413      	add	r3, r2
 8009856:	681b      	ldr	r3, [r3, #0]
 8009858:	687a      	ldr	r2, [r7, #4]
 800985a:	68b9      	ldr	r1, [r7, #8]
 800985c:	4798      	blx	r3
    }
 800985e:	bf00      	nop
 8009860:	3710      	adds	r7, #16
 8009862:	46bd      	mov	sp, r7
 8009864:	bd80      	pop	{r7, pc}

08009866 <_ZNK8touchgfx8CallbackI12MainViewBaseRKNS_6SliderEivE7isValidEv>:
    virtual bool isValid() const
 8009866:	b480      	push	{r7}
 8009868:	b083      	sub	sp, #12
 800986a:	af00      	add	r7, sp, #0
 800986c:	6078      	str	r0, [r7, #4]
        return (pobject != 0) && (pmemfun_2 != 0);
 800986e:	687b      	ldr	r3, [r7, #4]
 8009870:	685b      	ldr	r3, [r3, #4]
 8009872:	2b00      	cmp	r3, #0
 8009874:	d010      	beq.n	8009898 <_ZNK8touchgfx8CallbackI12MainViewBaseRKNS_6SliderEivE7isValidEv+0x32>
 8009876:	687b      	ldr	r3, [r7, #4]
 8009878:	689b      	ldr	r3, [r3, #8]
 800987a:	2b00      	cmp	r3, #0
 800987c:	d107      	bne.n	800988e <_ZNK8touchgfx8CallbackI12MainViewBaseRKNS_6SliderEivE7isValidEv+0x28>
 800987e:	687b      	ldr	r3, [r7, #4]
 8009880:	68db      	ldr	r3, [r3, #12]
 8009882:	f003 0301 	and.w	r3, r3, #1
 8009886:	2b00      	cmp	r3, #0
 8009888:	d101      	bne.n	800988e <_ZNK8touchgfx8CallbackI12MainViewBaseRKNS_6SliderEivE7isValidEv+0x28>
 800988a:	2301      	movs	r3, #1
 800988c:	e000      	b.n	8009890 <_ZNK8touchgfx8CallbackI12MainViewBaseRKNS_6SliderEivE7isValidEv+0x2a>
 800988e:	2300      	movs	r3, #0
 8009890:	2b01      	cmp	r3, #1
 8009892:	d001      	beq.n	8009898 <_ZNK8touchgfx8CallbackI12MainViewBaseRKNS_6SliderEivE7isValidEv+0x32>
 8009894:	2301      	movs	r3, #1
 8009896:	e000      	b.n	800989a <_ZNK8touchgfx8CallbackI12MainViewBaseRKNS_6SliderEivE7isValidEv+0x34>
 8009898:	2300      	movs	r3, #0
    }
 800989a:	4618      	mov	r0, r3
 800989c:	370c      	adds	r7, #12
 800989e:	46bd      	mov	sp, r7
 80098a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80098a4:	4770      	bx	lr

080098a6 <_ZN8touchgfx8CallbackI12MainViewBaseRKNS_14AbstractButtonEvvE7executeES4_>:
    virtual void execute(T1 t1)
 80098a6:	b580      	push	{r7, lr}
 80098a8:	b082      	sub	sp, #8
 80098aa:	af00      	add	r7, sp, #0
 80098ac:	6078      	str	r0, [r7, #4]
 80098ae:	6039      	str	r1, [r7, #0]
        (pobject->*pmemfun_1)(t1);
 80098b0:	687b      	ldr	r3, [r7, #4]
 80098b2:	685b      	ldr	r3, [r3, #4]
 80098b4:	687a      	ldr	r2, [r7, #4]
 80098b6:	68d2      	ldr	r2, [r2, #12]
 80098b8:	1052      	asrs	r2, r2, #1
 80098ba:	1898      	adds	r0, r3, r2
 80098bc:	687b      	ldr	r3, [r7, #4]
 80098be:	68db      	ldr	r3, [r3, #12]
 80098c0:	f003 0301 	and.w	r3, r3, #1
 80098c4:	2b00      	cmp	r3, #0
 80098c6:	d102      	bne.n	80098ce <_ZN8touchgfx8CallbackI12MainViewBaseRKNS_14AbstractButtonEvvE7executeES4_+0x28>
 80098c8:	687b      	ldr	r3, [r7, #4]
 80098ca:	689b      	ldr	r3, [r3, #8]
 80098cc:	e00a      	b.n	80098e4 <_ZN8touchgfx8CallbackI12MainViewBaseRKNS_14AbstractButtonEvvE7executeES4_+0x3e>
 80098ce:	687b      	ldr	r3, [r7, #4]
 80098d0:	685b      	ldr	r3, [r3, #4]
 80098d2:	687a      	ldr	r2, [r7, #4]
 80098d4:	68d2      	ldr	r2, [r2, #12]
 80098d6:	1052      	asrs	r2, r2, #1
 80098d8:	4413      	add	r3, r2
 80098da:	681b      	ldr	r3, [r3, #0]
 80098dc:	687a      	ldr	r2, [r7, #4]
 80098de:	6892      	ldr	r2, [r2, #8]
 80098e0:	4413      	add	r3, r2
 80098e2:	681b      	ldr	r3, [r3, #0]
 80098e4:	6839      	ldr	r1, [r7, #0]
 80098e6:	4798      	blx	r3
    }
 80098e8:	bf00      	nop
 80098ea:	3708      	adds	r7, #8
 80098ec:	46bd      	mov	sp, r7
 80098ee:	bd80      	pop	{r7, pc}

080098f0 <_ZNK8touchgfx8CallbackI12MainViewBaseRKNS_14AbstractButtonEvvE7isValidEv>:
    virtual bool isValid() const
 80098f0:	b480      	push	{r7}
 80098f2:	b083      	sub	sp, #12
 80098f4:	af00      	add	r7, sp, #0
 80098f6:	6078      	str	r0, [r7, #4]
        return (pobject != 0) && (pmemfun_1 != 0);
 80098f8:	687b      	ldr	r3, [r7, #4]
 80098fa:	685b      	ldr	r3, [r3, #4]
 80098fc:	2b00      	cmp	r3, #0
 80098fe:	d010      	beq.n	8009922 <_ZNK8touchgfx8CallbackI12MainViewBaseRKNS_14AbstractButtonEvvE7isValidEv+0x32>
 8009900:	687b      	ldr	r3, [r7, #4]
 8009902:	689b      	ldr	r3, [r3, #8]
 8009904:	2b00      	cmp	r3, #0
 8009906:	d107      	bne.n	8009918 <_ZNK8touchgfx8CallbackI12MainViewBaseRKNS_14AbstractButtonEvvE7isValidEv+0x28>
 8009908:	687b      	ldr	r3, [r7, #4]
 800990a:	68db      	ldr	r3, [r3, #12]
 800990c:	f003 0301 	and.w	r3, r3, #1
 8009910:	2b00      	cmp	r3, #0
 8009912:	d101      	bne.n	8009918 <_ZNK8touchgfx8CallbackI12MainViewBaseRKNS_14AbstractButtonEvvE7isValidEv+0x28>
 8009914:	2301      	movs	r3, #1
 8009916:	e000      	b.n	800991a <_ZNK8touchgfx8CallbackI12MainViewBaseRKNS_14AbstractButtonEvvE7isValidEv+0x2a>
 8009918:	2300      	movs	r3, #0
 800991a:	2b01      	cmp	r3, #1
 800991c:	d001      	beq.n	8009922 <_ZNK8touchgfx8CallbackI12MainViewBaseRKNS_14AbstractButtonEvvE7isValidEv+0x32>
 800991e:	2301      	movs	r3, #1
 8009920:	e000      	b.n	8009924 <_ZNK8touchgfx8CallbackI12MainViewBaseRKNS_14AbstractButtonEvvE7isValidEv+0x34>
 8009922:	2300      	movs	r3, #0
    }
 8009924:	4618      	mov	r0, r3
 8009926:	370c      	adds	r7, #12
 8009928:	46bd      	mov	sp, r7
 800992a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800992e:	4770      	bx	lr

08009930 <__tcf_0>:
KEEP extern const touchgfx::KerningNode kerning_verdana_20_4bpp[] FONT_KERNING_LOCATION_FLASH_ATTRIBUTE;
touchgfx::GeneratedFont& getFont_verdana_20_4bpp();

touchgfx::GeneratedFont& getFont_verdana_20_4bpp()
{
    static touchgfx::GeneratedFont verdana_20_4bpp(glyphs_verdana_20_4bpp, 1, 20, 0, 4, 1, 0, 0, unicodes_verdana_20_4bpp, kerning_verdana_20_4bpp, 63, 0, 0, 0);
 8009930:	b580      	push	{r7, lr}
 8009932:	af00      	add	r7, sp, #0
 8009934:	4801      	ldr	r0, [pc, #4]	@ (800993c <__tcf_0+0xc>)
 8009936:	f7fa f9ef 	bl	8003d18 <_ZN8touchgfx13GeneratedFontD1Ev>
 800993a:	bd80      	pop	{r7, pc}
 800993c:	24001d80 	.word	0x24001d80

08009940 <_Z23getFont_verdana_20_4bppv>:
{
 8009940:	b580      	push	{r7, lr}
 8009942:	b08c      	sub	sp, #48	@ 0x30
 8009944:	af0c      	add	r7, sp, #48	@ 0x30
    static touchgfx::GeneratedFont verdana_20_4bpp(glyphs_verdana_20_4bpp, 1, 20, 0, 4, 1, 0, 0, unicodes_verdana_20_4bpp, kerning_verdana_20_4bpp, 63, 0, 0, 0);
 8009946:	4b1f      	ldr	r3, [pc, #124]	@ (80099c4 <_Z23getFont_verdana_20_4bppv+0x84>)
 8009948:	681b      	ldr	r3, [r3, #0]
 800994a:	f3bf 8f5b 	dmb	ish
 800994e:	f003 0301 	and.w	r3, r3, #1
 8009952:	2b00      	cmp	r3, #0
 8009954:	bf0c      	ite	eq
 8009956:	2301      	moveq	r3, #1
 8009958:	2300      	movne	r3, #0
 800995a:	b2db      	uxtb	r3, r3
 800995c:	2b00      	cmp	r3, #0
 800995e:	d02c      	beq.n	80099ba <_Z23getFont_verdana_20_4bppv+0x7a>
 8009960:	4818      	ldr	r0, [pc, #96]	@ (80099c4 <_Z23getFont_verdana_20_4bppv+0x84>)
 8009962:	f021 f942 	bl	802abea <__cxa_guard_acquire>
 8009966:	4603      	mov	r3, r0
 8009968:	2b00      	cmp	r3, #0
 800996a:	bf14      	ite	ne
 800996c:	2301      	movne	r3, #1
 800996e:	2300      	moveq	r3, #0
 8009970:	b2db      	uxtb	r3, r3
 8009972:	2b00      	cmp	r3, #0
 8009974:	d021      	beq.n	80099ba <_Z23getFont_verdana_20_4bppv+0x7a>
 8009976:	2300      	movs	r3, #0
 8009978:	930a      	str	r3, [sp, #40]	@ 0x28
 800997a:	2300      	movs	r3, #0
 800997c:	9309      	str	r3, [sp, #36]	@ 0x24
 800997e:	2300      	movs	r3, #0
 8009980:	9308      	str	r3, [sp, #32]
 8009982:	233f      	movs	r3, #63	@ 0x3f
 8009984:	9307      	str	r3, [sp, #28]
 8009986:	4b10      	ldr	r3, [pc, #64]	@ (80099c8 <_Z23getFont_verdana_20_4bppv+0x88>)
 8009988:	9306      	str	r3, [sp, #24]
 800998a:	4b10      	ldr	r3, [pc, #64]	@ (80099cc <_Z23getFont_verdana_20_4bppv+0x8c>)
 800998c:	9305      	str	r3, [sp, #20]
 800998e:	2300      	movs	r3, #0
 8009990:	9304      	str	r3, [sp, #16]
 8009992:	2300      	movs	r3, #0
 8009994:	9303      	str	r3, [sp, #12]
 8009996:	2301      	movs	r3, #1
 8009998:	9302      	str	r3, [sp, #8]
 800999a:	2304      	movs	r3, #4
 800999c:	9301      	str	r3, [sp, #4]
 800999e:	2300      	movs	r3, #0
 80099a0:	9300      	str	r3, [sp, #0]
 80099a2:	2314      	movs	r3, #20
 80099a4:	2201      	movs	r2, #1
 80099a6:	490a      	ldr	r1, [pc, #40]	@ (80099d0 <_Z23getFont_verdana_20_4bppv+0x90>)
 80099a8:	480a      	ldr	r0, [pc, #40]	@ (80099d4 <_Z23getFont_verdana_20_4bppv+0x94>)
 80099aa:	f7fb fe45 	bl	8005638 <_ZN8touchgfx13GeneratedFontC1EPKNS_9GlyphNodeEtthhhhhPKPKhPKNS_11KerningNodeEttPKtPKNS_24FontContextualFormsTableE>
 80099ae:	480a      	ldr	r0, [pc, #40]	@ (80099d8 <_Z23getFont_verdana_20_4bppv+0x98>)
 80099b0:	f021 f966 	bl	802ac80 <atexit>
 80099b4:	4803      	ldr	r0, [pc, #12]	@ (80099c4 <_Z23getFont_verdana_20_4bppv+0x84>)
 80099b6:	f021 f924 	bl	802ac02 <__cxa_guard_release>
    return verdana_20_4bpp;
 80099ba:	4b06      	ldr	r3, [pc, #24]	@ (80099d4 <_Z23getFont_verdana_20_4bppv+0x94>)
}
 80099bc:	4618      	mov	r0, r3
 80099be:	46bd      	mov	sp, r7
 80099c0:	bd80      	pop	{r7, pc}
 80099c2:	bf00      	nop
 80099c4:	24001da8 	.word	0x24001da8
 80099c8:	08030754 	.word	0x08030754
 80099cc:	08030768 	.word	0x08030768
 80099d0:	900007ec 	.word	0x900007ec
 80099d4:	24001d80 	.word	0x24001d80
 80099d8:	08009931 	.word	0x08009931

080099dc <__tcf_0>:
KEEP extern const touchgfx::KerningNode kerning_verdana_40_4bpp[] FONT_KERNING_LOCATION_FLASH_ATTRIBUTE;
touchgfx::GeneratedFont& getFont_verdana_40_4bpp();

touchgfx::GeneratedFont& getFont_verdana_40_4bpp()
{
    static touchgfx::GeneratedFont verdana_40_4bpp(glyphs_verdana_40_4bpp, 1, 40, 0, 4, 1, 0, 0, unicodes_verdana_40_4bpp, kerning_verdana_40_4bpp, 63, 0, 0, 0);
 80099dc:	b580      	push	{r7, lr}
 80099de:	af00      	add	r7, sp, #0
 80099e0:	4801      	ldr	r0, [pc, #4]	@ (80099e8 <__tcf_0+0xc>)
 80099e2:	f7fa f999 	bl	8003d18 <_ZN8touchgfx13GeneratedFontD1Ev>
 80099e6:	bd80      	pop	{r7, pc}
 80099e8:	24001dac 	.word	0x24001dac

080099ec <_Z23getFont_verdana_40_4bppv>:
{
 80099ec:	b580      	push	{r7, lr}
 80099ee:	b08c      	sub	sp, #48	@ 0x30
 80099f0:	af0c      	add	r7, sp, #48	@ 0x30
    static touchgfx::GeneratedFont verdana_40_4bpp(glyphs_verdana_40_4bpp, 1, 40, 0, 4, 1, 0, 0, unicodes_verdana_40_4bpp, kerning_verdana_40_4bpp, 63, 0, 0, 0);
 80099f2:	4b1f      	ldr	r3, [pc, #124]	@ (8009a70 <_Z23getFont_verdana_40_4bppv+0x84>)
 80099f4:	681b      	ldr	r3, [r3, #0]
 80099f6:	f3bf 8f5b 	dmb	ish
 80099fa:	f003 0301 	and.w	r3, r3, #1
 80099fe:	2b00      	cmp	r3, #0
 8009a00:	bf0c      	ite	eq
 8009a02:	2301      	moveq	r3, #1
 8009a04:	2300      	movne	r3, #0
 8009a06:	b2db      	uxtb	r3, r3
 8009a08:	2b00      	cmp	r3, #0
 8009a0a:	d02c      	beq.n	8009a66 <_Z23getFont_verdana_40_4bppv+0x7a>
 8009a0c:	4818      	ldr	r0, [pc, #96]	@ (8009a70 <_Z23getFont_verdana_40_4bppv+0x84>)
 8009a0e:	f021 f8ec 	bl	802abea <__cxa_guard_acquire>
 8009a12:	4603      	mov	r3, r0
 8009a14:	2b00      	cmp	r3, #0
 8009a16:	bf14      	ite	ne
 8009a18:	2301      	movne	r3, #1
 8009a1a:	2300      	moveq	r3, #0
 8009a1c:	b2db      	uxtb	r3, r3
 8009a1e:	2b00      	cmp	r3, #0
 8009a20:	d021      	beq.n	8009a66 <_Z23getFont_verdana_40_4bppv+0x7a>
 8009a22:	2300      	movs	r3, #0
 8009a24:	930a      	str	r3, [sp, #40]	@ 0x28
 8009a26:	2300      	movs	r3, #0
 8009a28:	9309      	str	r3, [sp, #36]	@ 0x24
 8009a2a:	2300      	movs	r3, #0
 8009a2c:	9308      	str	r3, [sp, #32]
 8009a2e:	233f      	movs	r3, #63	@ 0x3f
 8009a30:	9307      	str	r3, [sp, #28]
 8009a32:	4b10      	ldr	r3, [pc, #64]	@ (8009a74 <_Z23getFont_verdana_40_4bppv+0x88>)
 8009a34:	9306      	str	r3, [sp, #24]
 8009a36:	4b10      	ldr	r3, [pc, #64]	@ (8009a78 <_Z23getFont_verdana_40_4bppv+0x8c>)
 8009a38:	9305      	str	r3, [sp, #20]
 8009a3a:	2300      	movs	r3, #0
 8009a3c:	9304      	str	r3, [sp, #16]
 8009a3e:	2300      	movs	r3, #0
 8009a40:	9303      	str	r3, [sp, #12]
 8009a42:	2301      	movs	r3, #1
 8009a44:	9302      	str	r3, [sp, #8]
 8009a46:	2304      	movs	r3, #4
 8009a48:	9301      	str	r3, [sp, #4]
 8009a4a:	2300      	movs	r3, #0
 8009a4c:	9300      	str	r3, [sp, #0]
 8009a4e:	2328      	movs	r3, #40	@ 0x28
 8009a50:	2201      	movs	r2, #1
 8009a52:	490a      	ldr	r1, [pc, #40]	@ (8009a7c <_Z23getFont_verdana_40_4bppv+0x90>)
 8009a54:	480a      	ldr	r0, [pc, #40]	@ (8009a80 <_Z23getFont_verdana_40_4bppv+0x94>)
 8009a56:	f7fb fdef 	bl	8005638 <_ZN8touchgfx13GeneratedFontC1EPKNS_9GlyphNodeEtthhhhhPKPKhPKNS_11KerningNodeEttPKtPKNS_24FontContextualFormsTableE>
 8009a5a:	480a      	ldr	r0, [pc, #40]	@ (8009a84 <_Z23getFont_verdana_40_4bppv+0x98>)
 8009a5c:	f021 f910 	bl	802ac80 <atexit>
 8009a60:	4803      	ldr	r0, [pc, #12]	@ (8009a70 <_Z23getFont_verdana_40_4bppv+0x84>)
 8009a62:	f021 f8ce 	bl	802ac02 <__cxa_guard_release>
    return verdana_40_4bpp;
 8009a66:	4b06      	ldr	r3, [pc, #24]	@ (8009a80 <_Z23getFont_verdana_40_4bppv+0x94>)
}
 8009a68:	4618      	mov	r0, r3
 8009a6a:	46bd      	mov	sp, r7
 8009a6c:	bd80      	pop	{r7, pc}
 8009a6e:	bf00      	nop
 8009a70:	24001dd4 	.word	0x24001dd4
 8009a74:	08030758 	.word	0x08030758
 8009a78:	0803076c 	.word	0x0803076c
 8009a7c:	900007fc 	.word	0x900007fc
 8009a80:	24001dac 	.word	0x24001dac
 8009a84:	080099dd 	.word	0x080099dd

08009a88 <__tcf_0>:
KEEP extern const touchgfx::KerningNode kerning_verdanab_10_4bpp[] FONT_KERNING_LOCATION_FLASH_ATTRIBUTE;
touchgfx::GeneratedFont& getFont_verdanab_10_4bpp();

touchgfx::GeneratedFont& getFont_verdanab_10_4bpp()
{
    static touchgfx::GeneratedFont verdanab_10_4bpp(glyphs_verdanab_10_4bpp, 26, 10, 2, 4, 1, 0, 1, unicodes_verdanab_10_4bpp, kerning_verdanab_10_4bpp, 63, 0, 0, 0);
 8009a88:	b580      	push	{r7, lr}
 8009a8a:	af00      	add	r7, sp, #0
 8009a8c:	4801      	ldr	r0, [pc, #4]	@ (8009a94 <__tcf_0+0xc>)
 8009a8e:	f7fa f943 	bl	8003d18 <_ZN8touchgfx13GeneratedFontD1Ev>
 8009a92:	bd80      	pop	{r7, pc}
 8009a94:	24001dd8 	.word	0x24001dd8

08009a98 <_Z24getFont_verdanab_10_4bppv>:
{
 8009a98:	b580      	push	{r7, lr}
 8009a9a:	b08c      	sub	sp, #48	@ 0x30
 8009a9c:	af0c      	add	r7, sp, #48	@ 0x30
    static touchgfx::GeneratedFont verdanab_10_4bpp(glyphs_verdanab_10_4bpp, 26, 10, 2, 4, 1, 0, 1, unicodes_verdanab_10_4bpp, kerning_verdanab_10_4bpp, 63, 0, 0, 0);
 8009a9e:	4b1f      	ldr	r3, [pc, #124]	@ (8009b1c <_Z24getFont_verdanab_10_4bppv+0x84>)
 8009aa0:	681b      	ldr	r3, [r3, #0]
 8009aa2:	f3bf 8f5b 	dmb	ish
 8009aa6:	f003 0301 	and.w	r3, r3, #1
 8009aaa:	2b00      	cmp	r3, #0
 8009aac:	bf0c      	ite	eq
 8009aae:	2301      	moveq	r3, #1
 8009ab0:	2300      	movne	r3, #0
 8009ab2:	b2db      	uxtb	r3, r3
 8009ab4:	2b00      	cmp	r3, #0
 8009ab6:	d02c      	beq.n	8009b12 <_Z24getFont_verdanab_10_4bppv+0x7a>
 8009ab8:	4818      	ldr	r0, [pc, #96]	@ (8009b1c <_Z24getFont_verdanab_10_4bppv+0x84>)
 8009aba:	f021 f896 	bl	802abea <__cxa_guard_acquire>
 8009abe:	4603      	mov	r3, r0
 8009ac0:	2b00      	cmp	r3, #0
 8009ac2:	bf14      	ite	ne
 8009ac4:	2301      	movne	r3, #1
 8009ac6:	2300      	moveq	r3, #0
 8009ac8:	b2db      	uxtb	r3, r3
 8009aca:	2b00      	cmp	r3, #0
 8009acc:	d021      	beq.n	8009b12 <_Z24getFont_verdanab_10_4bppv+0x7a>
 8009ace:	2300      	movs	r3, #0
 8009ad0:	930a      	str	r3, [sp, #40]	@ 0x28
 8009ad2:	2300      	movs	r3, #0
 8009ad4:	9309      	str	r3, [sp, #36]	@ 0x24
 8009ad6:	2300      	movs	r3, #0
 8009ad8:	9308      	str	r3, [sp, #32]
 8009ada:	233f      	movs	r3, #63	@ 0x3f
 8009adc:	9307      	str	r3, [sp, #28]
 8009ade:	4b10      	ldr	r3, [pc, #64]	@ (8009b20 <_Z24getFont_verdanab_10_4bppv+0x88>)
 8009ae0:	9306      	str	r3, [sp, #24]
 8009ae2:	4b10      	ldr	r3, [pc, #64]	@ (8009b24 <_Z24getFont_verdanab_10_4bppv+0x8c>)
 8009ae4:	9305      	str	r3, [sp, #20]
 8009ae6:	2301      	movs	r3, #1
 8009ae8:	9304      	str	r3, [sp, #16]
 8009aea:	2300      	movs	r3, #0
 8009aec:	9303      	str	r3, [sp, #12]
 8009aee:	2301      	movs	r3, #1
 8009af0:	9302      	str	r3, [sp, #8]
 8009af2:	2304      	movs	r3, #4
 8009af4:	9301      	str	r3, [sp, #4]
 8009af6:	2302      	movs	r3, #2
 8009af8:	9300      	str	r3, [sp, #0]
 8009afa:	230a      	movs	r3, #10
 8009afc:	221a      	movs	r2, #26
 8009afe:	490a      	ldr	r1, [pc, #40]	@ (8009b28 <_Z24getFont_verdanab_10_4bppv+0x90>)
 8009b00:	480a      	ldr	r0, [pc, #40]	@ (8009b2c <_Z24getFont_verdanab_10_4bppv+0x94>)
 8009b02:	f7fb fd99 	bl	8005638 <_ZN8touchgfx13GeneratedFontC1EPKNS_9GlyphNodeEtthhhhhPKPKhPKNS_11KerningNodeEttPKtPKNS_24FontContextualFormsTableE>
 8009b06:	480a      	ldr	r0, [pc, #40]	@ (8009b30 <_Z24getFont_verdanab_10_4bppv+0x98>)
 8009b08:	f021 f8ba 	bl	802ac80 <atexit>
 8009b0c:	4803      	ldr	r0, [pc, #12]	@ (8009b1c <_Z24getFont_verdanab_10_4bppv+0x84>)
 8009b0e:	f021 f878 	bl	802ac02 <__cxa_guard_release>
    return verdanab_10_4bpp;
 8009b12:	4b06      	ldr	r3, [pc, #24]	@ (8009b2c <_Z24getFont_verdanab_10_4bppv+0x94>)
}
 8009b14:	4618      	mov	r0, r3
 8009b16:	46bd      	mov	sp, r7
 8009b18:	bd80      	pop	{r7, pc}
 8009b1a:	bf00      	nop
 8009b1c:	24001e00 	.word	0x24001e00
 8009b20:	0803075c 	.word	0x0803075c
 8009b24:	08030770 	.word	0x08030770
 8009b28:	9000080c 	.word	0x9000080c
 8009b2c:	24001dd8 	.word	0x24001dd8
 8009b30:	08009a89 	.word	0x08009a89

08009b34 <__tcf_0>:
KEEP extern const touchgfx::KerningNode kerning_verdanab_12_4bpp[] FONT_KERNING_LOCATION_FLASH_ATTRIBUTE;
touchgfx::GeneratedFont& getFont_verdanab_12_4bpp();

touchgfx::GeneratedFont& getFont_verdanab_12_4bpp()
{
    static touchgfx::GeneratedFont verdanab_12_4bpp(glyphs_verdanab_12_4bpp, 21, 12, 2, 4, 1, 0, 1, unicodes_verdanab_12_4bpp, kerning_verdanab_12_4bpp, 63, 0, 0, 0);
 8009b34:	b580      	push	{r7, lr}
 8009b36:	af00      	add	r7, sp, #0
 8009b38:	4801      	ldr	r0, [pc, #4]	@ (8009b40 <__tcf_0+0xc>)
 8009b3a:	f7fa f8ed 	bl	8003d18 <_ZN8touchgfx13GeneratedFontD1Ev>
 8009b3e:	bd80      	pop	{r7, pc}
 8009b40:	24001e04 	.word	0x24001e04

08009b44 <_Z24getFont_verdanab_12_4bppv>:
{
 8009b44:	b580      	push	{r7, lr}
 8009b46:	b08c      	sub	sp, #48	@ 0x30
 8009b48:	af0c      	add	r7, sp, #48	@ 0x30
    static touchgfx::GeneratedFont verdanab_12_4bpp(glyphs_verdanab_12_4bpp, 21, 12, 2, 4, 1, 0, 1, unicodes_verdanab_12_4bpp, kerning_verdanab_12_4bpp, 63, 0, 0, 0);
 8009b4a:	4b1f      	ldr	r3, [pc, #124]	@ (8009bc8 <_Z24getFont_verdanab_12_4bppv+0x84>)
 8009b4c:	681b      	ldr	r3, [r3, #0]
 8009b4e:	f3bf 8f5b 	dmb	ish
 8009b52:	f003 0301 	and.w	r3, r3, #1
 8009b56:	2b00      	cmp	r3, #0
 8009b58:	bf0c      	ite	eq
 8009b5a:	2301      	moveq	r3, #1
 8009b5c:	2300      	movne	r3, #0
 8009b5e:	b2db      	uxtb	r3, r3
 8009b60:	2b00      	cmp	r3, #0
 8009b62:	d02c      	beq.n	8009bbe <_Z24getFont_verdanab_12_4bppv+0x7a>
 8009b64:	4818      	ldr	r0, [pc, #96]	@ (8009bc8 <_Z24getFont_verdanab_12_4bppv+0x84>)
 8009b66:	f021 f840 	bl	802abea <__cxa_guard_acquire>
 8009b6a:	4603      	mov	r3, r0
 8009b6c:	2b00      	cmp	r3, #0
 8009b6e:	bf14      	ite	ne
 8009b70:	2301      	movne	r3, #1
 8009b72:	2300      	moveq	r3, #0
 8009b74:	b2db      	uxtb	r3, r3
 8009b76:	2b00      	cmp	r3, #0
 8009b78:	d021      	beq.n	8009bbe <_Z24getFont_verdanab_12_4bppv+0x7a>
 8009b7a:	2300      	movs	r3, #0
 8009b7c:	930a      	str	r3, [sp, #40]	@ 0x28
 8009b7e:	2300      	movs	r3, #0
 8009b80:	9309      	str	r3, [sp, #36]	@ 0x24
 8009b82:	2300      	movs	r3, #0
 8009b84:	9308      	str	r3, [sp, #32]
 8009b86:	233f      	movs	r3, #63	@ 0x3f
 8009b88:	9307      	str	r3, [sp, #28]
 8009b8a:	4b10      	ldr	r3, [pc, #64]	@ (8009bcc <_Z24getFont_verdanab_12_4bppv+0x88>)
 8009b8c:	9306      	str	r3, [sp, #24]
 8009b8e:	4b10      	ldr	r3, [pc, #64]	@ (8009bd0 <_Z24getFont_verdanab_12_4bppv+0x8c>)
 8009b90:	9305      	str	r3, [sp, #20]
 8009b92:	2301      	movs	r3, #1
 8009b94:	9304      	str	r3, [sp, #16]
 8009b96:	2300      	movs	r3, #0
 8009b98:	9303      	str	r3, [sp, #12]
 8009b9a:	2301      	movs	r3, #1
 8009b9c:	9302      	str	r3, [sp, #8]
 8009b9e:	2304      	movs	r3, #4
 8009ba0:	9301      	str	r3, [sp, #4]
 8009ba2:	2302      	movs	r3, #2
 8009ba4:	9300      	str	r3, [sp, #0]
 8009ba6:	230c      	movs	r3, #12
 8009ba8:	2215      	movs	r2, #21
 8009baa:	490a      	ldr	r1, [pc, #40]	@ (8009bd4 <_Z24getFont_verdanab_12_4bppv+0x90>)
 8009bac:	480a      	ldr	r0, [pc, #40]	@ (8009bd8 <_Z24getFont_verdanab_12_4bppv+0x94>)
 8009bae:	f7fb fd43 	bl	8005638 <_ZN8touchgfx13GeneratedFontC1EPKNS_9GlyphNodeEtthhhhhPKPKhPKNS_11KerningNodeEttPKtPKNS_24FontContextualFormsTableE>
 8009bb2:	480a      	ldr	r0, [pc, #40]	@ (8009bdc <_Z24getFont_verdanab_12_4bppv+0x98>)
 8009bb4:	f021 f864 	bl	802ac80 <atexit>
 8009bb8:	4803      	ldr	r0, [pc, #12]	@ (8009bc8 <_Z24getFont_verdanab_12_4bppv+0x84>)
 8009bba:	f021 f822 	bl	802ac02 <__cxa_guard_release>
    return verdanab_12_4bpp;
 8009bbe:	4b06      	ldr	r3, [pc, #24]	@ (8009bd8 <_Z24getFont_verdanab_12_4bppv+0x94>)
}
 8009bc0:	4618      	mov	r0, r3
 8009bc2:	46bd      	mov	sp, r7
 8009bc4:	bd80      	pop	{r7, pc}
 8009bc6:	bf00      	nop
 8009bc8:	24001e2c 	.word	0x24001e2c
 8009bcc:	08030760 	.word	0x08030760
 8009bd0:	08030774 	.word	0x08030774
 8009bd4:	90000978 	.word	0x90000978
 8009bd8:	24001e04 	.word	0x24001e04
 8009bdc:	08009b35 	.word	0x08009b35

08009be0 <__tcf_0>:
KEEP extern const touchgfx::KerningNode kerning_verdanab_8_4bpp[] FONT_KERNING_LOCATION_FLASH_ATTRIBUTE;
touchgfx::GeneratedFont& getFont_verdanab_8_4bpp();

touchgfx::GeneratedFont& getFont_verdanab_8_4bpp()
{
    static touchgfx::GeneratedFont verdanab_8_4bpp(glyphs_verdanab_8_4bpp, 22, 8, 2, 4, 1, 0, 1, unicodes_verdanab_8_4bpp, kerning_verdanab_8_4bpp, 63, 0, 0, 0);
 8009be0:	b580      	push	{r7, lr}
 8009be2:	af00      	add	r7, sp, #0
 8009be4:	4801      	ldr	r0, [pc, #4]	@ (8009bec <__tcf_0+0xc>)
 8009be6:	f7fa f897 	bl	8003d18 <_ZN8touchgfx13GeneratedFontD1Ev>
 8009bea:	bd80      	pop	{r7, pc}
 8009bec:	24001e30 	.word	0x24001e30

08009bf0 <_Z23getFont_verdanab_8_4bppv>:
{
 8009bf0:	b580      	push	{r7, lr}
 8009bf2:	b08c      	sub	sp, #48	@ 0x30
 8009bf4:	af0c      	add	r7, sp, #48	@ 0x30
    static touchgfx::GeneratedFont verdanab_8_4bpp(glyphs_verdanab_8_4bpp, 22, 8, 2, 4, 1, 0, 1, unicodes_verdanab_8_4bpp, kerning_verdanab_8_4bpp, 63, 0, 0, 0);
 8009bf6:	4b1f      	ldr	r3, [pc, #124]	@ (8009c74 <_Z23getFont_verdanab_8_4bppv+0x84>)
 8009bf8:	681b      	ldr	r3, [r3, #0]
 8009bfa:	f3bf 8f5b 	dmb	ish
 8009bfe:	f003 0301 	and.w	r3, r3, #1
 8009c02:	2b00      	cmp	r3, #0
 8009c04:	bf0c      	ite	eq
 8009c06:	2301      	moveq	r3, #1
 8009c08:	2300      	movne	r3, #0
 8009c0a:	b2db      	uxtb	r3, r3
 8009c0c:	2b00      	cmp	r3, #0
 8009c0e:	d02c      	beq.n	8009c6a <_Z23getFont_verdanab_8_4bppv+0x7a>
 8009c10:	4818      	ldr	r0, [pc, #96]	@ (8009c74 <_Z23getFont_verdanab_8_4bppv+0x84>)
 8009c12:	f020 ffea 	bl	802abea <__cxa_guard_acquire>
 8009c16:	4603      	mov	r3, r0
 8009c18:	2b00      	cmp	r3, #0
 8009c1a:	bf14      	ite	ne
 8009c1c:	2301      	movne	r3, #1
 8009c1e:	2300      	moveq	r3, #0
 8009c20:	b2db      	uxtb	r3, r3
 8009c22:	2b00      	cmp	r3, #0
 8009c24:	d021      	beq.n	8009c6a <_Z23getFont_verdanab_8_4bppv+0x7a>
 8009c26:	2300      	movs	r3, #0
 8009c28:	930a      	str	r3, [sp, #40]	@ 0x28
 8009c2a:	2300      	movs	r3, #0
 8009c2c:	9309      	str	r3, [sp, #36]	@ 0x24
 8009c2e:	2300      	movs	r3, #0
 8009c30:	9308      	str	r3, [sp, #32]
 8009c32:	233f      	movs	r3, #63	@ 0x3f
 8009c34:	9307      	str	r3, [sp, #28]
 8009c36:	4b10      	ldr	r3, [pc, #64]	@ (8009c78 <_Z23getFont_verdanab_8_4bppv+0x88>)
 8009c38:	9306      	str	r3, [sp, #24]
 8009c3a:	4b10      	ldr	r3, [pc, #64]	@ (8009c7c <_Z23getFont_verdanab_8_4bppv+0x8c>)
 8009c3c:	9305      	str	r3, [sp, #20]
 8009c3e:	2301      	movs	r3, #1
 8009c40:	9304      	str	r3, [sp, #16]
 8009c42:	2300      	movs	r3, #0
 8009c44:	9303      	str	r3, [sp, #12]
 8009c46:	2301      	movs	r3, #1
 8009c48:	9302      	str	r3, [sp, #8]
 8009c4a:	2304      	movs	r3, #4
 8009c4c:	9301      	str	r3, [sp, #4]
 8009c4e:	2302      	movs	r3, #2
 8009c50:	9300      	str	r3, [sp, #0]
 8009c52:	2308      	movs	r3, #8
 8009c54:	2216      	movs	r2, #22
 8009c56:	490a      	ldr	r1, [pc, #40]	@ (8009c80 <_Z23getFont_verdanab_8_4bppv+0x90>)
 8009c58:	480a      	ldr	r0, [pc, #40]	@ (8009c84 <_Z23getFont_verdanab_8_4bppv+0x94>)
 8009c5a:	f7fb fced 	bl	8005638 <_ZN8touchgfx13GeneratedFontC1EPKNS_9GlyphNodeEtthhhhhPKPKhPKNS_11KerningNodeEttPKtPKNS_24FontContextualFormsTableE>
 8009c5e:	480a      	ldr	r0, [pc, #40]	@ (8009c88 <_Z23getFont_verdanab_8_4bppv+0x98>)
 8009c60:	f021 f80e 	bl	802ac80 <atexit>
 8009c64:	4803      	ldr	r0, [pc, #12]	@ (8009c74 <_Z23getFont_verdanab_8_4bppv+0x84>)
 8009c66:	f020 ffcc 	bl	802ac02 <__cxa_guard_release>
    return verdanab_8_4bpp;
 8009c6a:	4b06      	ldr	r3, [pc, #24]	@ (8009c84 <_Z23getFont_verdanab_8_4bppv+0x94>)
}
 8009c6c:	4618      	mov	r0, r3
 8009c6e:	46bd      	mov	sp, r7
 8009c70:	bd80      	pop	{r7, pc}
 8009c72:	bf00      	nop
 8009c74:	24001e58 	.word	0x24001e58
 8009c78:	08030764 	.word	0x08030764
 8009c7c:	08030778 	.word	0x08030778
 8009c80:	90000aa0 	.word	0x90000aa0
 8009c84:	24001e30 	.word	0x24001e30
 8009c88:	08009be1 	.word	0x08009be1

08009c8c <_ZNK8touchgfx4Font10getKerningEtPKNS_9GlyphNodeE>:
     * @param  prevChar The Unicode value of the previous character.
     * @param  glyph    the glyph object for the current character.
     *
     * @return The kerning distance between prevChar and glyph char.
     */
    virtual int8_t getKerning(Unicode::UnicodeChar prevChar, const GlyphNode* glyph) const
 8009c8c:	b480      	push	{r7}
 8009c8e:	b085      	sub	sp, #20
 8009c90:	af00      	add	r7, sp, #0
 8009c92:	60f8      	str	r0, [r7, #12]
 8009c94:	460b      	mov	r3, r1
 8009c96:	607a      	str	r2, [r7, #4]
 8009c98:	817b      	strh	r3, [r7, #10]
    {
        return 0;
 8009c9a:	2300      	movs	r3, #0
    }
 8009c9c:	4618      	mov	r0, r3
 8009c9e:	3714      	adds	r7, #20
 8009ca0:	46bd      	mov	sp, r7
 8009ca2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ca6:	4770      	bx	lr

08009ca8 <_ZNK8touchgfx4Font12getGSUBTableEv>:
    /**
     * Gets GSUB table. Currently only used for Devanagari fonts.
     *
     * @return The GSUB table or null if font has GSUB no table.
     */
    virtual const uint16_t* getGSUBTable() const
 8009ca8:	b480      	push	{r7}
 8009caa:	b083      	sub	sp, #12
 8009cac:	af00      	add	r7, sp, #0
 8009cae:	6078      	str	r0, [r7, #4]
    {
        return 0;
 8009cb0:	2300      	movs	r3, #0
    }
 8009cb2:	4618      	mov	r0, r3
 8009cb4:	370c      	adds	r7, #12
 8009cb6:	46bd      	mov	sp, r7
 8009cb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009cbc:	4770      	bx	lr

08009cbe <_ZNK8touchgfx4Font23getContextualFormsTableEv>:
    /**
     * Gets the contextual forms table used in arabic fonts.
     *
     * @return The FontContextualFormsTable or null if the font has no table.
     */
    virtual const FontContextualFormsTable* getContextualFormsTable() const
 8009cbe:	b480      	push	{r7}
 8009cc0:	b083      	sub	sp, #12
 8009cc2:	af00      	add	r7, sp, #0
 8009cc4:	6078      	str	r0, [r7, #4]
    {
        return 0;
 8009cc6:	2300      	movs	r3, #0
    }
 8009cc8:	4618      	mov	r0, r3
 8009cca:	370c      	adds	r7, #12
 8009ccc:	46bd      	mov	sp, r7
 8009cce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009cd2:	4770      	bx	lr

08009cd4 <_ZN8touchgfx9TypedText25registerTypedTextDatabaseEPKNS0_13TypedTextDataEPKPKNS_4FontEt>:
    static void registerTypedTextDatabase(const TypedTextData* data, const Font* const* f, const uint16_t n)
 8009cd4:	b480      	push	{r7}
 8009cd6:	b085      	sub	sp, #20
 8009cd8:	af00      	add	r7, sp, #0
 8009cda:	60f8      	str	r0, [r7, #12]
 8009cdc:	60b9      	str	r1, [r7, #8]
 8009cde:	4613      	mov	r3, r2
 8009ce0:	80fb      	strh	r3, [r7, #6]
        typedTexts = data;
 8009ce2:	4a07      	ldr	r2, [pc, #28]	@ (8009d00 <_ZN8touchgfx9TypedText25registerTypedTextDatabaseEPKNS0_13TypedTextDataEPKPKNS_4FontEt+0x2c>)
 8009ce4:	68fb      	ldr	r3, [r7, #12]
 8009ce6:	6013      	str	r3, [r2, #0]
        fonts = f;
 8009ce8:	4a06      	ldr	r2, [pc, #24]	@ (8009d04 <_ZN8touchgfx9TypedText25registerTypedTextDatabaseEPKNS0_13TypedTextDataEPKPKNS_4FontEt+0x30>)
 8009cea:	68bb      	ldr	r3, [r7, #8]
 8009cec:	6013      	str	r3, [r2, #0]
        numberOfTypedTexts = n;
 8009cee:	4a06      	ldr	r2, [pc, #24]	@ (8009d08 <_ZN8touchgfx9TypedText25registerTypedTextDatabaseEPKNS0_13TypedTextDataEPKPKNS_4FontEt+0x34>)
 8009cf0:	88fb      	ldrh	r3, [r7, #6]
 8009cf2:	8013      	strh	r3, [r2, #0]
    }
 8009cf4:	bf00      	nop
 8009cf6:	3714      	adds	r7, #20
 8009cf8:	46bd      	mov	sp, r7
 8009cfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009cfe:	4770      	bx	lr
 8009d00:	2400b8d4 	.word	0x2400b8d4
 8009d04:	2400b8dc 	.word	0x2400b8dc
 8009d08:	2400b8d8 	.word	0x2400b8d8

08009d0c <_ZNK8touchgfx4Font14getStringWidthEPKtz>:
#include <touchgfx/hal/HAL.hpp>
#include <touchgfx/lcd/LCD.hpp>
#include <texts/TypedTextDatabase.hpp>

uint16_t touchgfx::Font::getStringWidth(const touchgfx::Unicode::UnicodeChar* text, ...) const
{
 8009d0c:	b40e      	push	{r1, r2, r3}
 8009d0e:	b580      	push	{r7, lr}
 8009d10:	b085      	sub	sp, #20
 8009d12:	af00      	add	r7, sp, #0
 8009d14:	6078      	str	r0, [r7, #4]
    va_list pArg;
    va_start(pArg, text);
 8009d16:	f107 0320 	add.w	r3, r7, #32
 8009d1a:	60bb      	str	r3, [r7, #8]
    uint16_t width = getStringWidthLTR(TEXT_DIRECTION_LTR, text, pArg);
 8009d1c:	68bb      	ldr	r3, [r7, #8]
 8009d1e:	69fa      	ldr	r2, [r7, #28]
 8009d20:	2100      	movs	r1, #0
 8009d22:	6878      	ldr	r0, [r7, #4]
 8009d24:	f012 fcc8 	bl	801c6b8 <_ZNK8touchgfx4Font17getStringWidthLTREhPKtSt9__va_list>
 8009d28:	4603      	mov	r3, r0
 8009d2a:	81fb      	strh	r3, [r7, #14]
    va_end(pArg);
    return width;
 8009d2c:	89fb      	ldrh	r3, [r7, #14]
}
 8009d2e:	4618      	mov	r0, r3
 8009d30:	3714      	adds	r7, #20
 8009d32:	46bd      	mov	sp, r7
 8009d34:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8009d38:	b003      	add	sp, #12
 8009d3a:	4770      	bx	lr

08009d3c <_ZNK8touchgfx4Font14getStringWidthEhPKtz>:

uint16_t touchgfx::Font::getStringWidth(touchgfx::TextDirection textDirection, const touchgfx::Unicode::UnicodeChar* text, ...) const
{
 8009d3c:	b40c      	push	{r2, r3}
 8009d3e:	b580      	push	{r7, lr}
 8009d40:	b084      	sub	sp, #16
 8009d42:	af00      	add	r7, sp, #0
 8009d44:	6078      	str	r0, [r7, #4]
 8009d46:	460b      	mov	r3, r1
 8009d48:	70fb      	strb	r3, [r7, #3]
    va_list pArg;
    va_start(pArg, text);
 8009d4a:	f107 031c 	add.w	r3, r7, #28
 8009d4e:	60bb      	str	r3, [r7, #8]
    uint16_t width = getStringWidthLTR(textDirection, text, pArg);
 8009d50:	78f9      	ldrb	r1, [r7, #3]
 8009d52:	68bb      	ldr	r3, [r7, #8]
 8009d54:	69ba      	ldr	r2, [r7, #24]
 8009d56:	6878      	ldr	r0, [r7, #4]
 8009d58:	f012 fcae 	bl	801c6b8 <_ZNK8touchgfx4Font17getStringWidthLTREhPKtSt9__va_list>
 8009d5c:	4603      	mov	r3, r0
 8009d5e:	81fb      	strh	r3, [r7, #14]
    va_end(pArg);
    return width;
 8009d60:	89fb      	ldrh	r3, [r7, #14]
}
 8009d62:	4618      	mov	r0, r3
 8009d64:	3710      	adds	r7, #16
 8009d66:	46bd      	mov	sp, r7
 8009d68:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8009d6c:	b002      	add	sp, #8
 8009d6e:	4770      	bx	lr

08009d70 <_ZN8touchgfx12TextProvider15getNextLigatureEh>:

touchgfx::Unicode::UnicodeChar touchgfx::TextProvider::getNextLigature(TextDirection direction)
{
 8009d70:	b580      	push	{r7, lr}
 8009d72:	b08a      	sub	sp, #40	@ 0x28
 8009d74:	af00      	add	r7, sp, #0
 8009d76:	6078      	str	r0, [r7, #4]
 8009d78:	460b      	mov	r3, r1
 8009d7a:	70fb      	strb	r3, [r7, #3]
    if (fontGsubTable && nextCharacters.peekChar())
 8009d7c:	687b      	ldr	r3, [r7, #4]
 8009d7e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8009d80:	2b00      	cmp	r3, #0
 8009d82:	d016      	beq.n	8009db2 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x42>
 8009d84:	687b      	ldr	r3, [r7, #4]
 8009d86:	3322      	adds	r3, #34	@ 0x22
 8009d88:	627b      	str	r3, [r7, #36]	@ 0x24
        {
            return used == size;
        }
        FORCE_INLINE_FUNCTION Unicode::UnicodeChar peekChar()
        {
            assert(used > 0);
 8009d8a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009d8c:	8adb      	ldrh	r3, [r3, #22]
 8009d8e:	2b00      	cmp	r3, #0
 8009d90:	d105      	bne.n	8009d9e <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x2e>
 8009d92:	4b43      	ldr	r3, [pc, #268]	@ (8009ea0 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x130>)
 8009d94:	4a43      	ldr	r2, [pc, #268]	@ (8009ea4 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x134>)
 8009d96:	21c0      	movs	r1, #192	@ 0xc0
 8009d98:	4843      	ldr	r0, [pc, #268]	@ (8009ea8 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x138>)
 8009d9a:	f020 ff53 	bl	802ac44 <__assert_func>
            return buffer[pos];
 8009d9e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009da0:	8a9b      	ldrh	r3, [r3, #20]
 8009da2:	461a      	mov	r2, r3
 8009da4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009da6:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 8009daa:	2b00      	cmp	r3, #0
 8009dac:	d001      	beq.n	8009db2 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x42>
 8009dae:	2301      	movs	r3, #1
 8009db0:	e000      	b.n	8009db4 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x44>
 8009db2:	2300      	movs	r3, #0
 8009db4:	2b00      	cmp	r3, #0
 8009db6:	d06a      	beq.n	8009e8e <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x11e>
    {
        substituteGlyphs();
 8009db8:	6878      	ldr	r0, [r7, #4]
 8009dba:	f014 f839 	bl	801de30 <_ZN8touchgfx12TextProvider16substituteGlyphsEv>
        if (nextCharacters.peekChar(1) == 0x093F) // Hindi I-matra
 8009dbe:	687b      	ldr	r3, [r7, #4]
 8009dc0:	3322      	adds	r3, #34	@ 0x22
 8009dc2:	623b      	str	r3, [r7, #32]
 8009dc4:	2301      	movs	r3, #1
 8009dc6:	83fb      	strh	r3, [r7, #30]
        }
        FORCE_INLINE_FUNCTION Unicode::UnicodeChar peekChar(uint16_t offset)
        {
            assert(offset < used);
 8009dc8:	6a3b      	ldr	r3, [r7, #32]
 8009dca:	8adb      	ldrh	r3, [r3, #22]
 8009dcc:	8bfa      	ldrh	r2, [r7, #30]
 8009dce:	429a      	cmp	r2, r3
 8009dd0:	d305      	bcc.n	8009dde <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x6e>
 8009dd2:	4b36      	ldr	r3, [pc, #216]	@ (8009eac <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x13c>)
 8009dd4:	4a36      	ldr	r2, [pc, #216]	@ (8009eb0 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x140>)
 8009dd6:	21c5      	movs	r1, #197	@ 0xc5
 8009dd8:	4833      	ldr	r0, [pc, #204]	@ (8009ea8 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x138>)
 8009dda:	f020 ff33 	bl	802ac44 <__assert_func>
            const uint16_t index = pos + offset;
 8009dde:	6a3b      	ldr	r3, [r7, #32]
 8009de0:	8a9a      	ldrh	r2, [r3, #20]
 8009de2:	8bfb      	ldrh	r3, [r7, #30]
 8009de4:	4413      	add	r3, r2
 8009de6:	83bb      	strh	r3, [r7, #28]
            return buffer[index < size ? index : index - size];
 8009de8:	8bbb      	ldrh	r3, [r7, #28]
 8009dea:	2b09      	cmp	r3, #9
 8009dec:	d801      	bhi.n	8009df2 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x82>
 8009dee:	8bbb      	ldrh	r3, [r7, #28]
 8009df0:	e001      	b.n	8009df6 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x86>
 8009df2:	8bbb      	ldrh	r3, [r7, #28]
 8009df4:	3b0a      	subs	r3, #10
 8009df6:	6a3a      	ldr	r2, [r7, #32]
 8009df8:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8009dfc:	f640 123f 	movw	r2, #2367	@ 0x93f
 8009e00:	4293      	cmp	r3, r2
 8009e02:	bf0c      	ite	eq
 8009e04:	2301      	moveq	r3, #1
 8009e06:	2300      	movne	r3, #0
 8009e08:	b2db      	uxtb	r3, r3
 8009e0a:	2b00      	cmp	r3, #0
 8009e0c:	d03f      	beq.n	8009e8e <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x11e>
        {
            nextCharacters.replaceAt1(nextCharacters.peekChar());
 8009e0e:	687b      	ldr	r3, [r7, #4]
 8009e10:	3322      	adds	r3, #34	@ 0x22
 8009e12:	687a      	ldr	r2, [r7, #4]
 8009e14:	3222      	adds	r2, #34	@ 0x22
 8009e16:	60ba      	str	r2, [r7, #8]
            assert(used > 0);
 8009e18:	68ba      	ldr	r2, [r7, #8]
 8009e1a:	8ad2      	ldrh	r2, [r2, #22]
 8009e1c:	2a00      	cmp	r2, #0
 8009e1e:	d105      	bne.n	8009e2c <_ZN8touchgfx12TextProvider15getNextLigatureEh+0xbc>
 8009e20:	4b1f      	ldr	r3, [pc, #124]	@ (8009ea0 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x130>)
 8009e22:	4a20      	ldr	r2, [pc, #128]	@ (8009ea4 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x134>)
 8009e24:	21c0      	movs	r1, #192	@ 0xc0
 8009e26:	4820      	ldr	r0, [pc, #128]	@ (8009ea8 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x138>)
 8009e28:	f020 ff0c 	bl	802ac44 <__assert_func>
            return buffer[pos];
 8009e2c:	68ba      	ldr	r2, [r7, #8]
 8009e2e:	8a92      	ldrh	r2, [r2, #20]
 8009e30:	4611      	mov	r1, r2
 8009e32:	68ba      	ldr	r2, [r7, #8]
 8009e34:	f832 2011 	ldrh.w	r2, [r2, r1, lsl #1]
 8009e38:	613b      	str	r3, [r7, #16]
 8009e3a:	4613      	mov	r3, r2
 8009e3c:	81fb      	strh	r3, [r7, #14]
        {
            buffer[pos] = newChar;
        }
        FORCE_INLINE_FUNCTION void replaceAt1(Unicode::UnicodeChar newChar)
        {
            assert(used > 1);
 8009e3e:	693b      	ldr	r3, [r7, #16]
 8009e40:	8adb      	ldrh	r3, [r3, #22]
 8009e42:	2b01      	cmp	r3, #1
 8009e44:	d806      	bhi.n	8009e54 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0xe4>
 8009e46:	4b1b      	ldr	r3, [pc, #108]	@ (8009eb4 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x144>)
 8009e48:	4a1b      	ldr	r2, [pc, #108]	@ (8009eb8 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x148>)
 8009e4a:	f240 110d 	movw	r1, #269	@ 0x10d
 8009e4e:	4816      	ldr	r0, [pc, #88]	@ (8009ea8 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x138>)
 8009e50:	f020 fef8 	bl	802ac44 <__assert_func>
            const uint16_t index = pos + 1;
 8009e54:	693b      	ldr	r3, [r7, #16]
 8009e56:	8a9b      	ldrh	r3, [r3, #20]
 8009e58:	3301      	adds	r3, #1
 8009e5a:	81bb      	strh	r3, [r7, #12]
            buffer[index < size ? index : 0] = newChar;
 8009e5c:	89bb      	ldrh	r3, [r7, #12]
 8009e5e:	2b09      	cmp	r3, #9
 8009e60:	d801      	bhi.n	8009e66 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0xf6>
 8009e62:	89bb      	ldrh	r3, [r7, #12]
 8009e64:	e000      	b.n	8009e68 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0xf8>
 8009e66:	2300      	movs	r3, #0
 8009e68:	693a      	ldr	r2, [r7, #16]
 8009e6a:	89f9      	ldrh	r1, [r7, #14]
 8009e6c:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
        }
 8009e70:	bf00      	nop
            nextCharacters.replaceAt0(0x093F);
 8009e72:	687b      	ldr	r3, [r7, #4]
 8009e74:	3322      	adds	r3, #34	@ 0x22
 8009e76:	61bb      	str	r3, [r7, #24]
 8009e78:	f640 133f 	movw	r3, #2367	@ 0x93f
 8009e7c:	82fb      	strh	r3, [r7, #22]
            buffer[pos] = newChar;
 8009e7e:	69bb      	ldr	r3, [r7, #24]
 8009e80:	8a9b      	ldrh	r3, [r3, #20]
 8009e82:	4619      	mov	r1, r3
 8009e84:	69bb      	ldr	r3, [r7, #24]
 8009e86:	8afa      	ldrh	r2, [r7, #22]
 8009e88:	f823 2011 	strh.w	r2, [r3, r1, lsl #1]
        }
 8009e8c:	bf00      	nop
        }
    }
    return getNextChar();
 8009e8e:	6878      	ldr	r0, [r7, #4]
 8009e90:	f013 feb2 	bl	801dbf8 <_ZN8touchgfx12TextProvider11getNextCharEv>
 8009e94:	4603      	mov	r3, r0
}
 8009e96:	4618      	mov	r0, r3
 8009e98:	3728      	adds	r7, #40	@ 0x28
 8009e9a:	46bd      	mov	sp, r7
 8009e9c:	bd80      	pop	{r7, pc}
 8009e9e:	bf00      	nop
 8009ea0:	0802c690 	.word	0x0802c690
 8009ea4:	0802c69c 	.word	0x0802c69c
 8009ea8:	0802c748 	.word	0x0802c748
 8009eac:	0802c794 	.word	0x0802c794
 8009eb0:	0802c7a4 	.word	0x0802c7a4
 8009eb4:	0802c878 	.word	0x0802c878
 8009eb8:	0802c884 	.word	0x0802c884

08009ebc <_ZN8touchgfx12TextProvider18initializeInternalEv>:

void touchgfx::TextProvider::initializeInternal()
{
 8009ebc:	b580      	push	{r7, lr}
 8009ebe:	b082      	sub	sp, #8
 8009ec0:	af00      	add	r7, sp, #0
 8009ec2:	6078      	str	r0, [r7, #4]
    fillInputBuffer();
 8009ec4:	6878      	ldr	r0, [r7, #4]
 8009ec6:	f013 fe4f 	bl	801db68 <_ZN8touchgfx12TextProvider15fillInputBufferEv>
}
 8009eca:	bf00      	nop
 8009ecc:	3708      	adds	r7, #8
 8009ece:	46bd      	mov	sp, r7
 8009ed0:	bd80      	pop	{r7, pc}

08009ed2 <_ZN8touchgfx3LCD10drawStringENS_4RectERKS1_RKNS0_13StringVisualsEPKtz>:

void touchgfx::LCD::drawString(touchgfx::Rect widgetArea, const touchgfx::Rect& invalidatedArea, const touchgfx::LCD::StringVisuals& stringVisuals, const touchgfx::Unicode::UnicodeChar* format, ...)
{
 8009ed2:	b580      	push	{r7, lr}
 8009ed4:	b088      	sub	sp, #32
 8009ed6:	af02      	add	r7, sp, #8
 8009ed8:	60f8      	str	r0, [r7, #12]
 8009eda:	1d38      	adds	r0, r7, #4
 8009edc:	e880 0006 	stmia.w	r0, {r1, r2}
 8009ee0:	603b      	str	r3, [r7, #0]
    va_list pArg;
    va_start(pArg, format);
 8009ee2:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8009ee6:	617b      	str	r3, [r7, #20]
    drawStringLTR(widgetArea, invalidatedArea, stringVisuals, format, pArg);
 8009ee8:	1d39      	adds	r1, r7, #4
 8009eea:	697b      	ldr	r3, [r7, #20]
 8009eec:	9301      	str	r3, [sp, #4]
 8009eee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009ef0:	9300      	str	r3, [sp, #0]
 8009ef2:	6a3b      	ldr	r3, [r7, #32]
 8009ef4:	683a      	ldr	r2, [r7, #0]
 8009ef6:	68f8      	ldr	r0, [r7, #12]
 8009ef8:	f011 f8b6 	bl	801b068 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list>
    va_end(pArg);
}
 8009efc:	bf00      	nop
 8009efe:	3718      	adds	r7, #24
 8009f00:	46bd      	mov	sp, r7
 8009f02:	bd80      	pop	{r7, pc}

08009f04 <_ZN8touchgfx5Texts11setLanguageEt>:
touchgfx::LanguageId touchgfx::Texts::currentLanguage = static_cast<touchgfx::LanguageId>(0);
static const touchgfx::Unicode::UnicodeChar* currentLanguagePtr = 0;
static const uint32_t* currentLanguageIndices = 0;

void touchgfx::Texts::setLanguage(touchgfx::LanguageId id)
{
 8009f04:	b590      	push	{r4, r7, lr}
 8009f06:	b085      	sub	sp, #20
 8009f08:	af00      	add	r7, sp, #0
 8009f0a:	4603      	mov	r3, r0
 8009f0c:	80fb      	strh	r3, [r7, #6]
    const touchgfx::TypedText::TypedTextData* currentLanguageTypedText = 0;
 8009f0e:	2300      	movs	r3, #0
 8009f10:	60fb      	str	r3, [r7, #12]
    if (id < 1)
 8009f12:	88fb      	ldrh	r3, [r7, #6]
 8009f14:	2b00      	cmp	r3, #0
 8009f16:	d127      	bne.n	8009f68 <_ZN8touchgfx5Texts11setLanguageEt+0x64>
    {
        if (languagesArray[id] != 0)
 8009f18:	88fb      	ldrh	r3, [r7, #6]
 8009f1a:	4a1e      	ldr	r2, [pc, #120]	@ (8009f94 <_ZN8touchgfx5Texts11setLanguageEt+0x90>)
 8009f1c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8009f20:	2b00      	cmp	r3, #0
 8009f22:	d016      	beq.n	8009f52 <_ZN8touchgfx5Texts11setLanguageEt+0x4e>
        {
            // Dynamic translation is added
            const TranslationHeader* translation = languagesArray[id];
 8009f24:	88fb      	ldrh	r3, [r7, #6]
 8009f26:	4a1b      	ldr	r2, [pc, #108]	@ (8009f94 <_ZN8touchgfx5Texts11setLanguageEt+0x90>)
 8009f28:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8009f2c:	60bb      	str	r3, [r7, #8]
            currentLanguagePtr = (const touchgfx::Unicode::UnicodeChar*)(((const uint8_t*)translation) + translation->offset_to_texts);
 8009f2e:	68bb      	ldr	r3, [r7, #8]
 8009f30:	681b      	ldr	r3, [r3, #0]
 8009f32:	68ba      	ldr	r2, [r7, #8]
 8009f34:	4413      	add	r3, r2
 8009f36:	4a18      	ldr	r2, [pc, #96]	@ (8009f98 <_ZN8touchgfx5Texts11setLanguageEt+0x94>)
 8009f38:	6013      	str	r3, [r2, #0]
            currentLanguageIndices = (const uint32_t*)(((const uint8_t*)translation) + translation->offset_to_indices);
 8009f3a:	68bb      	ldr	r3, [r7, #8]
 8009f3c:	685b      	ldr	r3, [r3, #4]
 8009f3e:	68ba      	ldr	r2, [r7, #8]
 8009f40:	4413      	add	r3, r2
 8009f42:	4a16      	ldr	r2, [pc, #88]	@ (8009f9c <_ZN8touchgfx5Texts11setLanguageEt+0x98>)
 8009f44:	6013      	str	r3, [r2, #0]
            currentLanguageTypedText = (const touchgfx::TypedText::TypedTextData*)(((const uint8_t*)translation) + translation->offset_to_typedtext);
 8009f46:	68bb      	ldr	r3, [r7, #8]
 8009f48:	689b      	ldr	r3, [r3, #8]
 8009f4a:	68ba      	ldr	r2, [r7, #8]
 8009f4c:	4413      	add	r3, r2
 8009f4e:	60fb      	str	r3, [r7, #12]
 8009f50:	e00a      	b.n	8009f68 <_ZN8touchgfx5Texts11setLanguageEt+0x64>
        }
        else
        {
            // Compiled and linked in languages
            currentLanguagePtr = texts_all_languages;
 8009f52:	4b11      	ldr	r3, [pc, #68]	@ (8009f98 <_ZN8touchgfx5Texts11setLanguageEt+0x94>)
 8009f54:	4a12      	ldr	r2, [pc, #72]	@ (8009fa0 <_ZN8touchgfx5Texts11setLanguageEt+0x9c>)
 8009f56:	601a      	str	r2, [r3, #0]
            currentLanguageIndices = staticLanguageIndices[id];
 8009f58:	4a12      	ldr	r2, [pc, #72]	@ (8009fa4 <_ZN8touchgfx5Texts11setLanguageEt+0xa0>)
 8009f5a:	4b10      	ldr	r3, [pc, #64]	@ (8009f9c <_ZN8touchgfx5Texts11setLanguageEt+0x98>)
 8009f5c:	601a      	str	r2, [r3, #0]
            currentLanguageTypedText = typedTextDatabaseArray[id];
 8009f5e:	88fb      	ldrh	r3, [r7, #6]
 8009f60:	4a11      	ldr	r2, [pc, #68]	@ (8009fa8 <_ZN8touchgfx5Texts11setLanguageEt+0xa4>)
 8009f62:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8009f66:	60fb      	str	r3, [r7, #12]
        }
    }

    if (currentLanguageTypedText)
 8009f68:	68fb      	ldr	r3, [r7, #12]
 8009f6a:	2b00      	cmp	r3, #0
 8009f6c:	d00d      	beq.n	8009f8a <_ZN8touchgfx5Texts11setLanguageEt+0x86>
    {
        currentLanguage = id;
 8009f6e:	4a0f      	ldr	r2, [pc, #60]	@ (8009fac <_ZN8touchgfx5Texts11setLanguageEt+0xa8>)
 8009f70:	88fb      	ldrh	r3, [r7, #6]
 8009f72:	8013      	strh	r3, [r2, #0]
        touchgfx::TypedText::registerTypedTextDatabase(currentLanguageTypedText,
                                                       TypedTextDatabase::getFonts(), TypedTextDatabase::getInstanceSize());
 8009f74:	f000 f83e 	bl	8009ff4 <_ZN17TypedTextDatabase8getFontsEv>
 8009f78:	4604      	mov	r4, r0
        touchgfx::TypedText::registerTypedTextDatabase(currentLanguageTypedText,
 8009f7a:	f000 f833 	bl	8009fe4 <_ZN17TypedTextDatabase15getInstanceSizeEv>
 8009f7e:	4603      	mov	r3, r0
 8009f80:	461a      	mov	r2, r3
 8009f82:	4621      	mov	r1, r4
 8009f84:	68f8      	ldr	r0, [r7, #12]
 8009f86:	f7ff fea5 	bl	8009cd4 <_ZN8touchgfx9TypedText25registerTypedTextDatabaseEPKNS0_13TypedTextDataEPKPKNS_4FontEt>
    }
}
 8009f8a:	bf00      	nop
 8009f8c:	3714      	adds	r7, #20
 8009f8e:	46bd      	mov	sp, r7
 8009f90:	bd90      	pop	{r4, r7, pc}
 8009f92:	bf00      	nop
 8009f94:	24001e5c 	.word	0x24001e5c
 8009f98:	24001e64 	.word	0x24001e64
 8009f9c:	24001e68 	.word	0x24001e68
 8009fa0:	90000c04 	.word	0x90000c04
 8009fa4:	90000bd4 	.word	0x90000bd4
 8009fa8:	90000dec 	.word	0x90000dec
 8009fac:	24001e60 	.word	0x24001e60

08009fb0 <_ZNK8touchgfx5Texts7getTextEt>:
{
    languagesArray[id] = (const TranslationHeader*)translation;
}

const touchgfx::Unicode::UnicodeChar* touchgfx::Texts::getText(TypedTextId id) const
{
 8009fb0:	b480      	push	{r7}
 8009fb2:	b083      	sub	sp, #12
 8009fb4:	af00      	add	r7, sp, #0
 8009fb6:	6078      	str	r0, [r7, #4]
 8009fb8:	460b      	mov	r3, r1
 8009fba:	807b      	strh	r3, [r7, #2]
    return &currentLanguagePtr[currentLanguageIndices[id]];
 8009fbc:	4b07      	ldr	r3, [pc, #28]	@ (8009fdc <_ZNK8touchgfx5Texts7getTextEt+0x2c>)
 8009fbe:	681a      	ldr	r2, [r3, #0]
 8009fc0:	4b07      	ldr	r3, [pc, #28]	@ (8009fe0 <_ZNK8touchgfx5Texts7getTextEt+0x30>)
 8009fc2:	6819      	ldr	r1, [r3, #0]
 8009fc4:	887b      	ldrh	r3, [r7, #2]
 8009fc6:	009b      	lsls	r3, r3, #2
 8009fc8:	440b      	add	r3, r1
 8009fca:	681b      	ldr	r3, [r3, #0]
 8009fcc:	005b      	lsls	r3, r3, #1
 8009fce:	4413      	add	r3, r2
}
 8009fd0:	4618      	mov	r0, r3
 8009fd2:	370c      	adds	r7, #12
 8009fd4:	46bd      	mov	sp, r7
 8009fd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009fda:	4770      	bx	lr
 8009fdc:	24001e64 	.word	0x24001e64
 8009fe0:	24001e68 	.word	0x24001e68

08009fe4 <_ZN17TypedTextDatabase15getInstanceSizeEv>:
{
    return typedTextDatabaseArray[id];
}

uint16_t getInstanceSize()
{
 8009fe4:	b480      	push	{r7}
 8009fe6:	af00      	add	r7, sp, #0
    return sizeof(typedText_database_DEFAULT) / sizeof(touchgfx::TypedText::TypedTextData);
 8009fe8:	230c      	movs	r3, #12
}
 8009fea:	4618      	mov	r0, r3
 8009fec:	46bd      	mov	sp, r7
 8009fee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ff2:	4770      	bx	lr

08009ff4 <_ZN17TypedTextDatabase8getFontsEv>:

const touchgfx::Font** getFonts()
{
 8009ff4:	b480      	push	{r7}
 8009ff6:	af00      	add	r7, sp, #0
    return touchgfx_fonts;
 8009ff8:	4b02      	ldr	r3, [pc, #8]	@ (800a004 <_ZN17TypedTextDatabase8getFontsEv+0x10>)
}
 8009ffa:	4618      	mov	r0, r3
 8009ffc:	46bd      	mov	sp, r7
 8009ffe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a002:	4770      	bx	lr
 800a004:	24001e6c 	.word	0x24001e6c

0800a008 <_Z41__static_initialization_and_destruction_0ii>:
    case 4:
        touchgfx_fonts[4] = &(getFont_verdanab_12_4bpp());
        break;
    }
}
} // namespace TypedTextDatabase
 800a008:	b580      	push	{r7, lr}
 800a00a:	b082      	sub	sp, #8
 800a00c:	af00      	add	r7, sp, #0
 800a00e:	6078      	str	r0, [r7, #4]
 800a010:	6039      	str	r1, [r7, #0]
 800a012:	687b      	ldr	r3, [r7, #4]
 800a014:	2b01      	cmp	r3, #1
 800a016:	d11d      	bne.n	800a054 <_Z41__static_initialization_and_destruction_0ii+0x4c>
 800a018:	683b      	ldr	r3, [r7, #0]
 800a01a:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800a01e:	4293      	cmp	r3, r2
 800a020:	d118      	bne.n	800a054 <_Z41__static_initialization_and_destruction_0ii+0x4c>
    &(getFont_verdana_20_4bpp()),
 800a022:	f7ff fc8d 	bl	8009940 <_Z23getFont_verdana_20_4bppv>
 800a026:	4603      	mov	r3, r0
};
 800a028:	4a0c      	ldr	r2, [pc, #48]	@ (800a05c <_Z41__static_initialization_and_destruction_0ii+0x54>)
 800a02a:	6013      	str	r3, [r2, #0]
    &(getFont_verdana_40_4bpp()),
 800a02c:	f7ff fcde 	bl	80099ec <_Z23getFont_verdana_40_4bppv>
 800a030:	4603      	mov	r3, r0
};
 800a032:	4a0a      	ldr	r2, [pc, #40]	@ (800a05c <_Z41__static_initialization_and_destruction_0ii+0x54>)
 800a034:	6053      	str	r3, [r2, #4]
    &(getFont_verdanab_8_4bpp()),
 800a036:	f7ff fddb 	bl	8009bf0 <_Z23getFont_verdanab_8_4bppv>
 800a03a:	4603      	mov	r3, r0
};
 800a03c:	4a07      	ldr	r2, [pc, #28]	@ (800a05c <_Z41__static_initialization_and_destruction_0ii+0x54>)
 800a03e:	6093      	str	r3, [r2, #8]
    &(getFont_verdanab_10_4bpp()),
 800a040:	f7ff fd2a 	bl	8009a98 <_Z24getFont_verdanab_10_4bppv>
 800a044:	4603      	mov	r3, r0
};
 800a046:	4a05      	ldr	r2, [pc, #20]	@ (800a05c <_Z41__static_initialization_and_destruction_0ii+0x54>)
 800a048:	60d3      	str	r3, [r2, #12]
    &(getFont_verdanab_12_4bpp())
 800a04a:	f7ff fd7b 	bl	8009b44 <_Z24getFont_verdanab_12_4bppv>
 800a04e:	4603      	mov	r3, r0
};
 800a050:	4a02      	ldr	r2, [pc, #8]	@ (800a05c <_Z41__static_initialization_and_destruction_0ii+0x54>)
 800a052:	6113      	str	r3, [r2, #16]
} // namespace TypedTextDatabase
 800a054:	bf00      	nop
 800a056:	3708      	adds	r7, #8
 800a058:	46bd      	mov	sp, r7
 800a05a:	bd80      	pop	{r7, pc}
 800a05c:	24001e6c 	.word	0x24001e6c

0800a060 <_GLOBAL__sub_I_touchgfx_fonts>:
 800a060:	b580      	push	{r7, lr}
 800a062:	af00      	add	r7, sp, #0
 800a064:	f64f 71ff 	movw	r1, #65535	@ 0xffff
 800a068:	2001      	movs	r0, #1
 800a06a:	f7ff ffcd 	bl	800a008 <_Z41__static_initialization_and_destruction_0ii>
 800a06e:	bd80      	pop	{r7, pc}

0800a070 <_ZN19FrontendApplicationC1ER5ModelR12FrontendHeap>:
#include <gui/common/FrontendApplication.hpp>

FrontendApplication::FrontendApplication(Model& m, FrontendHeap& heap)
 800a070:	b580      	push	{r7, lr}
 800a072:	b084      	sub	sp, #16
 800a074:	af00      	add	r7, sp, #0
 800a076:	60f8      	str	r0, [r7, #12]
 800a078:	60b9      	str	r1, [r7, #8]
 800a07a:	607a      	str	r2, [r7, #4]
    : FrontendApplicationBase(m, heap)
 800a07c:	68fb      	ldr	r3, [r7, #12]
 800a07e:	687a      	ldr	r2, [r7, #4]
 800a080:	68b9      	ldr	r1, [r7, #8]
 800a082:	4618      	mov	r0, r3
 800a084:	f7fa f99a 	bl	80043bc <_ZN23FrontendApplicationBaseC1ER5ModelR12FrontendHeap>
 800a088:	4a03      	ldr	r2, [pc, #12]	@ (800a098 <_ZN19FrontendApplicationC1ER5ModelR12FrontendHeap+0x28>)
 800a08a:	68fb      	ldr	r3, [r7, #12]
 800a08c:	601a      	str	r2, [r3, #0]
{
}
 800a08e:	68fb      	ldr	r3, [r7, #12]
 800a090:	4618      	mov	r0, r3
 800a092:	3710      	adds	r7, #16
 800a094:	46bd      	mov	sp, r7
 800a096:	bd80      	pop	{r7, pc}
 800a098:	0802ccd8 	.word	0x0802ccd8

0800a09c <_ZN8touchgfx9Presenter8activateEv>:
     * Place initialization code for the Presenter here.
     *
     * The activate function is called automatically when a screen transition causes this
     * Presenter to become active. Place initialization code for the Presenter here.
     */
    virtual void activate()
 800a09c:	b480      	push	{r7}
 800a09e:	b083      	sub	sp, #12
 800a0a0:	af00      	add	r7, sp, #0
 800a0a2:	6078      	str	r0, [r7, #4]
    {
    }
 800a0a4:	bf00      	nop
 800a0a6:	370c      	adds	r7, #12
 800a0a8:	46bd      	mov	sp, r7
 800a0aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a0ae:	4770      	bx	lr

0800a0b0 <_ZN8touchgfx9Presenter10deactivateEv>:
     * Place cleanup code for the Presenter here.
     *
     * The deactivate function is called automatically when a screen transition causes this
     * Presenter to become inactive. Place cleanup code for the Presenter here.
     */
    virtual void deactivate()
 800a0b0:	b480      	push	{r7}
 800a0b2:	b083      	sub	sp, #12
 800a0b4:	af00      	add	r7, sp, #0
 800a0b6:	6078      	str	r0, [r7, #4]
    {
    }
 800a0b8:	bf00      	nop
 800a0ba:	370c      	adds	r7, #12
 800a0bc:	46bd      	mov	sp, r7
 800a0be:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a0c2:	4770      	bx	lr

0800a0c4 <_ZN8touchgfx9PresenterD1Ev>:

    /** Finalizes an instance of the Presenter class. */
    virtual ~Presenter()
 800a0c4:	b480      	push	{r7}
 800a0c6:	b083      	sub	sp, #12
 800a0c8:	af00      	add	r7, sp, #0
 800a0ca:	6078      	str	r0, [r7, #4]
    {
 800a0cc:	4a04      	ldr	r2, [pc, #16]	@ (800a0e0 <_ZN8touchgfx9PresenterD1Ev+0x1c>)
 800a0ce:	687b      	ldr	r3, [r7, #4]
 800a0d0:	601a      	str	r2, [r3, #0]
    }
 800a0d2:	687b      	ldr	r3, [r7, #4]
 800a0d4:	4618      	mov	r0, r3
 800a0d6:	370c      	adds	r7, #12
 800a0d8:	46bd      	mov	sp, r7
 800a0da:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a0de:	4770      	bx	lr
 800a0e0:	0802d51c 	.word	0x0802d51c

0800a0e4 <_ZN8touchgfx9PresenterD0Ev>:
    virtual ~Presenter()
 800a0e4:	b580      	push	{r7, lr}
 800a0e6:	b082      	sub	sp, #8
 800a0e8:	af00      	add	r7, sp, #0
 800a0ea:	6078      	str	r0, [r7, #4]
    }
 800a0ec:	6878      	ldr	r0, [r7, #4]
 800a0ee:	f7ff ffe9 	bl	800a0c4 <_ZN8touchgfx9PresenterD1Ev>
 800a0f2:	2104      	movs	r1, #4
 800a0f4:	6878      	ldr	r0, [r7, #4]
 800a0f6:	f020 fd76 	bl	802abe6 <_ZdlPvj>
 800a0fa:	687b      	ldr	r3, [r7, #4]
 800a0fc:	4618      	mov	r0, r3
 800a0fe:	3708      	adds	r7, #8
 800a100:	46bd      	mov	sp, r7
 800a102:	bd80      	pop	{r7, pc}

0800a104 <_ZN8touchgfx9PresenterC1Ev>:

protected:
    /** Initializes a new instance of the Presenter class. */
    Presenter()
 800a104:	b480      	push	{r7}
 800a106:	b083      	sub	sp, #12
 800a108:	af00      	add	r7, sp, #0
 800a10a:	6078      	str	r0, [r7, #4]
    {
 800a10c:	4a04      	ldr	r2, [pc, #16]	@ (800a120 <_ZN8touchgfx9PresenterC1Ev+0x1c>)
 800a10e:	687b      	ldr	r3, [r7, #4]
 800a110:	601a      	str	r2, [r3, #0]
    }
 800a112:	687b      	ldr	r3, [r7, #4]
 800a114:	4618      	mov	r0, r3
 800a116:	370c      	adds	r7, #12
 800a118:	46bd      	mov	sp, r7
 800a11a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a11e:	4770      	bx	lr
 800a120:	0802d51c 	.word	0x0802d51c

0800a124 <_ZN13ModelListenerC1Ev>:
    ModelListener() : model(0) {}
 800a124:	b480      	push	{r7}
 800a126:	b083      	sub	sp, #12
 800a128:	af00      	add	r7, sp, #0
 800a12a:	6078      	str	r0, [r7, #4]
 800a12c:	4a06      	ldr	r2, [pc, #24]	@ (800a148 <_ZN13ModelListenerC1Ev+0x24>)
 800a12e:	687b      	ldr	r3, [r7, #4]
 800a130:	601a      	str	r2, [r3, #0]
 800a132:	687b      	ldr	r3, [r7, #4]
 800a134:	2200      	movs	r2, #0
 800a136:	605a      	str	r2, [r3, #4]
 800a138:	687b      	ldr	r3, [r7, #4]
 800a13a:	4618      	mov	r0, r3
 800a13c:	370c      	adds	r7, #12
 800a13e:	46bd      	mov	sp, r7
 800a140:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a144:	4770      	bx	lr
 800a146:	bf00      	nop
 800a148:	0802d50c 	.word	0x0802d50c

0800a14c <_ZN13ModelListenerD1Ev>:
    virtual ~ModelListener() {}
 800a14c:	b480      	push	{r7}
 800a14e:	b083      	sub	sp, #12
 800a150:	af00      	add	r7, sp, #0
 800a152:	6078      	str	r0, [r7, #4]
 800a154:	4a04      	ldr	r2, [pc, #16]	@ (800a168 <_ZN13ModelListenerD1Ev+0x1c>)
 800a156:	687b      	ldr	r3, [r7, #4]
 800a158:	601a      	str	r2, [r3, #0]
 800a15a:	687b      	ldr	r3, [r7, #4]
 800a15c:	4618      	mov	r0, r3
 800a15e:	370c      	adds	r7, #12
 800a160:	46bd      	mov	sp, r7
 800a162:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a166:	4770      	bx	lr
 800a168:	0802d50c 	.word	0x0802d50c

0800a16c <_ZN13ModelListenerD0Ev>:
 800a16c:	b580      	push	{r7, lr}
 800a16e:	b082      	sub	sp, #8
 800a170:	af00      	add	r7, sp, #0
 800a172:	6078      	str	r0, [r7, #4]
 800a174:	6878      	ldr	r0, [r7, #4]
 800a176:	f7ff ffe9 	bl	800a14c <_ZN13ModelListenerD1Ev>
 800a17a:	2108      	movs	r1, #8
 800a17c:	6878      	ldr	r0, [r7, #4]
 800a17e:	f020 fd32 	bl	802abe6 <_ZdlPvj>
 800a182:	687b      	ldr	r3, [r7, #4]
 800a184:	4618      	mov	r0, r3
 800a186:	3708      	adds	r7, #8
 800a188:	46bd      	mov	sp, r7
 800a18a:	bd80      	pop	{r7, pc}

0800a18c <_ZN25Localize_AnomalyPresenterD1Ev>:
     * The deactivate function is called automatically when this screen is "switched out"
     * (ie. made inactive). Teardown functionality can be placed here.
     */
    virtual void deactivate();

    virtual ~Localize_AnomalyPresenter() {};
 800a18c:	b580      	push	{r7, lr}
 800a18e:	b082      	sub	sp, #8
 800a190:	af00      	add	r7, sp, #0
 800a192:	6078      	str	r0, [r7, #4]
 800a194:	4a09      	ldr	r2, [pc, #36]	@ (800a1bc <_ZN25Localize_AnomalyPresenterD1Ev+0x30>)
 800a196:	687b      	ldr	r3, [r7, #4]
 800a198:	601a      	str	r2, [r3, #0]
 800a19a:	4a09      	ldr	r2, [pc, #36]	@ (800a1c0 <_ZN25Localize_AnomalyPresenterD1Ev+0x34>)
 800a19c:	687b      	ldr	r3, [r7, #4]
 800a19e:	605a      	str	r2, [r3, #4]
 800a1a0:	687b      	ldr	r3, [r7, #4]
 800a1a2:	3304      	adds	r3, #4
 800a1a4:	4618      	mov	r0, r3
 800a1a6:	f7ff ffd1 	bl	800a14c <_ZN13ModelListenerD1Ev>
 800a1aa:	687b      	ldr	r3, [r7, #4]
 800a1ac:	4618      	mov	r0, r3
 800a1ae:	f7ff ff89 	bl	800a0c4 <_ZN8touchgfx9PresenterD1Ev>
 800a1b2:	687b      	ldr	r3, [r7, #4]
 800a1b4:	4618      	mov	r0, r3
 800a1b6:	3708      	adds	r7, #8
 800a1b8:	46bd      	mov	sp, r7
 800a1ba:	bd80      	pop	{r7, pc}
 800a1bc:	0802d4e4 	.word	0x0802d4e4
 800a1c0:	0802d4fc 	.word	0x0802d4fc

0800a1c4 <_ZThn4_N25Localize_AnomalyPresenterD1Ev>:
 800a1c4:	f1a0 0004 	sub.w	r0, r0, #4
 800a1c8:	e7e0      	b.n	800a18c <_ZN25Localize_AnomalyPresenterD1Ev>
 800a1ca:	bf00      	nop

0800a1cc <_ZN25Localize_AnomalyPresenterD0Ev>:
 800a1cc:	b580      	push	{r7, lr}
 800a1ce:	b082      	sub	sp, #8
 800a1d0:	af00      	add	r7, sp, #0
 800a1d2:	6078      	str	r0, [r7, #4]
 800a1d4:	6878      	ldr	r0, [r7, #4]
 800a1d6:	f7ff ffd9 	bl	800a18c <_ZN25Localize_AnomalyPresenterD1Ev>
 800a1da:	2110      	movs	r1, #16
 800a1dc:	6878      	ldr	r0, [r7, #4]
 800a1de:	f020 fd02 	bl	802abe6 <_ZdlPvj>
 800a1e2:	687b      	ldr	r3, [r7, #4]
 800a1e4:	4618      	mov	r0, r3
 800a1e6:	3708      	adds	r7, #8
 800a1e8:	46bd      	mov	sp, r7
 800a1ea:	bd80      	pop	{r7, pc}

0800a1ec <_ZThn4_N25Localize_AnomalyPresenterD0Ev>:
 800a1ec:	f1a0 0004 	sub.w	r0, r0, #4
 800a1f0:	e7ec      	b.n	800a1cc <_ZN25Localize_AnomalyPresenterD0Ev>
	...

0800a1f4 <_ZN25Localize_AnomalyPresenterC1ER20Localize_AnomalyView>:
#include <gui/localize_anomaly_screen/Localize_AnomalyView.hpp>
#include <gui/localize_anomaly_screen/Localize_AnomalyPresenter.hpp>

Localize_AnomalyPresenter::Localize_AnomalyPresenter(Localize_AnomalyView& v)
 800a1f4:	b580      	push	{r7, lr}
 800a1f6:	b082      	sub	sp, #8
 800a1f8:	af00      	add	r7, sp, #0
 800a1fa:	6078      	str	r0, [r7, #4]
 800a1fc:	6039      	str	r1, [r7, #0]
    : view(v)
 800a1fe:	687b      	ldr	r3, [r7, #4]
 800a200:	4618      	mov	r0, r3
 800a202:	f7ff ff7f 	bl	800a104 <_ZN8touchgfx9PresenterC1Ev>
 800a206:	687b      	ldr	r3, [r7, #4]
 800a208:	3304      	adds	r3, #4
 800a20a:	4618      	mov	r0, r3
 800a20c:	f7ff ff8a 	bl	800a124 <_ZN13ModelListenerC1Ev>
 800a210:	4a06      	ldr	r2, [pc, #24]	@ (800a22c <_ZN25Localize_AnomalyPresenterC1ER20Localize_AnomalyView+0x38>)
 800a212:	687b      	ldr	r3, [r7, #4]
 800a214:	601a      	str	r2, [r3, #0]
 800a216:	4a06      	ldr	r2, [pc, #24]	@ (800a230 <_ZN25Localize_AnomalyPresenterC1ER20Localize_AnomalyView+0x3c>)
 800a218:	687b      	ldr	r3, [r7, #4]
 800a21a:	605a      	str	r2, [r3, #4]
 800a21c:	687b      	ldr	r3, [r7, #4]
 800a21e:	683a      	ldr	r2, [r7, #0]
 800a220:	60da      	str	r2, [r3, #12]
{

}
 800a222:	687b      	ldr	r3, [r7, #4]
 800a224:	4618      	mov	r0, r3
 800a226:	3708      	adds	r7, #8
 800a228:	46bd      	mov	sp, r7
 800a22a:	bd80      	pop	{r7, pc}
 800a22c:	0802d4e4 	.word	0x0802d4e4
 800a230:	0802d4fc 	.word	0x0802d4fc

0800a234 <_ZN25Localize_AnomalyPresenter8activateEv>:

void Localize_AnomalyPresenter::activate()
{
 800a234:	b480      	push	{r7}
 800a236:	b083      	sub	sp, #12
 800a238:	af00      	add	r7, sp, #0
 800a23a:	6078      	str	r0, [r7, #4]

}
 800a23c:	bf00      	nop
 800a23e:	370c      	adds	r7, #12
 800a240:	46bd      	mov	sp, r7
 800a242:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a246:	4770      	bx	lr

0800a248 <_ZN25Localize_AnomalyPresenter10deactivateEv>:

void Localize_AnomalyPresenter::deactivate()
{
 800a248:	b480      	push	{r7}
 800a24a:	b083      	sub	sp, #12
 800a24c:	af00      	add	r7, sp, #0
 800a24e:	6078      	str	r0, [r7, #4]

}
 800a250:	bf00      	nop
 800a252:	370c      	adds	r7, #12
 800a254:	46bd      	mov	sp, r7
 800a256:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a25a:	4770      	bx	lr

0800a25c <_ZN20Localize_AnomalyViewD1Ev>:

class Localize_AnomalyView : public Localize_AnomalyViewBase
{
public:
    Localize_AnomalyView();
    virtual ~Localize_AnomalyView() {}
 800a25c:	b580      	push	{r7, lr}
 800a25e:	b082      	sub	sp, #8
 800a260:	af00      	add	r7, sp, #0
 800a262:	6078      	str	r0, [r7, #4]
 800a264:	4a05      	ldr	r2, [pc, #20]	@ (800a27c <_ZN20Localize_AnomalyViewD1Ev+0x20>)
 800a266:	687b      	ldr	r3, [r7, #4]
 800a268:	601a      	str	r2, [r3, #0]
 800a26a:	687b      	ldr	r3, [r7, #4]
 800a26c:	4618      	mov	r0, r3
 800a26e:	f7fb fccb 	bl	8005c08 <_ZN24Localize_AnomalyViewBaseD1Ev>
 800a272:	687b      	ldr	r3, [r7, #4]
 800a274:	4618      	mov	r0, r3
 800a276:	3708      	adds	r7, #8
 800a278:	46bd      	mov	sp, r7
 800a27a:	bd80      	pop	{r7, pc}
 800a27c:	0802d534 	.word	0x0802d534

0800a280 <_ZN20Localize_AnomalyViewD0Ev>:
 800a280:	b580      	push	{r7, lr}
 800a282:	b082      	sub	sp, #8
 800a284:	af00      	add	r7, sp, #0
 800a286:	6078      	str	r0, [r7, #4]
 800a288:	6878      	ldr	r0, [r7, #4]
 800a28a:	f7ff ffe7 	bl	800a25c <_ZN20Localize_AnomalyViewD1Ev>
 800a28e:	f44f 7170 	mov.w	r1, #960	@ 0x3c0
 800a292:	6878      	ldr	r0, [r7, #4]
 800a294:	f020 fca7 	bl	802abe6 <_ZdlPvj>
 800a298:	687b      	ldr	r3, [r7, #4]
 800a29a:	4618      	mov	r0, r3
 800a29c:	3708      	adds	r7, #8
 800a29e:	46bd      	mov	sp, r7
 800a2a0:	bd80      	pop	{r7, pc}
	...

0800a2a4 <_ZN20Localize_AnomalyViewC1Ev>:
	REGION_10,
	REGION_11,
	REGION_12,
	};

Localize_AnomalyView::Localize_AnomalyView()
 800a2a4:	b580      	push	{r7, lr}
 800a2a6:	b082      	sub	sp, #8
 800a2a8:	af00      	add	r7, sp, #0
 800a2aa:	6078      	str	r0, [r7, #4]
 800a2ac:	687b      	ldr	r3, [r7, #4]
 800a2ae:	4618      	mov	r0, r3
 800a2b0:	f7fb fd50 	bl	8005d54 <_ZN24Localize_AnomalyViewBaseC1Ev>
 800a2b4:	4a03      	ldr	r2, [pc, #12]	@ (800a2c4 <_ZN20Localize_AnomalyViewC1Ev+0x20>)
 800a2b6:	687b      	ldr	r3, [r7, #4]
 800a2b8:	601a      	str	r2, [r3, #0]
{

}
 800a2ba:	687b      	ldr	r3, [r7, #4]
 800a2bc:	4618      	mov	r0, r3
 800a2be:	3708      	adds	r7, #8
 800a2c0:	46bd      	mov	sp, r7
 800a2c2:	bd80      	pop	{r7, pc}
 800a2c4:	0802d534 	.word	0x0802d534

0800a2c8 <_ZN20Localize_AnomalyView11setupScreenEv>:

void Localize_AnomalyView::setupScreen()
{
 800a2c8:	b580      	push	{r7, lr}
 800a2ca:	b082      	sub	sp, #8
 800a2cc:	af00      	add	r7, sp, #0
 800a2ce:	6078      	str	r0, [r7, #4]
    Localize_AnomalyViewBase::setupScreen();
 800a2d0:	687b      	ldr	r3, [r7, #4]
 800a2d2:	4618      	mov	r0, r3
 800a2d4:	f7fc f9f8 	bl	80066c8 <_ZN24Localize_AnomalyViewBase11setupScreenEv>
}
 800a2d8:	bf00      	nop
 800a2da:	3708      	adds	r7, #8
 800a2dc:	46bd      	mov	sp, r7
 800a2de:	bd80      	pop	{r7, pc}

0800a2e0 <_ZN20Localize_AnomalyView14tearDownScreenEv>:

void Localize_AnomalyView::tearDownScreen()
{
 800a2e0:	b580      	push	{r7, lr}
 800a2e2:	b082      	sub	sp, #8
 800a2e4:	af00      	add	r7, sp, #0
 800a2e6:	6078      	str	r0, [r7, #4]
    Localize_AnomalyViewBase::tearDownScreen();
 800a2e8:	687b      	ldr	r3, [r7, #4]
 800a2ea:	4618      	mov	r0, r3
 800a2ec:	f7fb fabc 	bl	8005868 <_ZN8touchgfx6Screen14tearDownScreenEv>
}
 800a2f0:	bf00      	nop
 800a2f2:	3708      	adds	r7, #8
 800a2f4:	46bd      	mov	sp, r7
 800a2f6:	bd80      	pop	{r7, pc}

0800a2f8 <_ZN20Localize_AnomalyView12update_imageEv>:

// Gets value from IPC, if changed, re-draw image on localize_anomaly_screen
void Localize_AnomalyView::update_image()
{
 800a2f8:	b590      	push	{r4, r7, lr}
 800a2fa:	b08f      	sub	sp, #60	@ 0x3c
 800a2fc:	af00      	add	r7, sp, #0
 800a2fe:	6078      	str	r0, [r7, #4]
	prev_region = curr_region;
 800a300:	4ba1      	ldr	r3, [pc, #644]	@ (800a588 <_ZN20Localize_AnomalyView12update_imageEv+0x290>)
 800a302:	f993 2000 	ldrsb.w	r2, [r3]
 800a306:	4ba1      	ldr	r3, [pc, #644]	@ (800a58c <_ZN20Localize_AnomalyView12update_imageEv+0x294>)
 800a308:	701a      	strb	r2, [r3, #0]
	curr_region = IPCGetPredictedRegion();
 800a30a:	f7f6 f881 	bl	8000410 <IPCGetPredictedRegion>
 800a30e:	4603      	mov	r3, r0
 800a310:	461a      	mov	r2, r3
 800a312:	4b9d      	ldr	r3, [pc, #628]	@ (800a588 <_ZN20Localize_AnomalyView12update_imageEv+0x290>)
 800a314:	701a      	strb	r2, [r3, #0]

	if(curr_region != prev_region)
 800a316:	4b9c      	ldr	r3, [pc, #624]	@ (800a588 <_ZN20Localize_AnomalyView12update_imageEv+0x290>)
 800a318:	f993 2000 	ldrsb.w	r2, [r3]
 800a31c:	4b9b      	ldr	r3, [pc, #620]	@ (800a58c <_ZN20Localize_AnomalyView12update_imageEv+0x294>)
 800a31e:	f993 3000 	ldrsb.w	r3, [r3]
 800a322:	429a      	cmp	r2, r3
 800a324:	f000 812b 	beq.w	800a57e <_ZN20Localize_AnomalyView12update_imageEv+0x286>
	{

		switch(curr_region)
 800a328:	4b97      	ldr	r3, [pc, #604]	@ (800a588 <_ZN20Localize_AnomalyView12update_imageEv+0x290>)
 800a32a:	f993 3000 	ldrsb.w	r3, [r3]
 800a32e:	3b01      	subs	r3, #1
 800a330:	2b0b      	cmp	r3, #11
 800a332:	f200 8123 	bhi.w	800a57c <_ZN20Localize_AnomalyView12update_imageEv+0x284>
 800a336:	a201      	add	r2, pc, #4	@ (adr r2, 800a33c <_ZN20Localize_AnomalyView12update_imageEv+0x44>)
 800a338:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a33c:	0800a36d 	.word	0x0800a36d
 800a340:	0800a399 	.word	0x0800a399
 800a344:	0800a3c5 	.word	0x0800a3c5
 800a348:	0800a3f1 	.word	0x0800a3f1
 800a34c:	0800a41d 	.word	0x0800a41d
 800a350:	0800a449 	.word	0x0800a449
 800a354:	0800a475 	.word	0x0800a475
 800a358:	0800a4a1 	.word	0x0800a4a1
 800a35c:	0800a4cd 	.word	0x0800a4cd
 800a360:	0800a4f9 	.word	0x0800a4f9
 800a364:	0800a525 	.word	0x0800a525
 800a368:	0800a551 	.word	0x0800a551
		{

			case REGION_1:
				  Directional_Vector.setBitmap(Bitmap(BITMAP_RR1_ID));
 800a36c:	687b      	ldr	r3, [r7, #4]
 800a36e:	f503 743a 	add.w	r4, r3, #744	@ 0x2e8
 800a372:	f107 0308 	add.w	r3, r7, #8
 800a376:	2104      	movs	r1, #4
 800a378:	4618      	mov	r0, r3
 800a37a:	f7fb fa07 	bl	800578c <_ZN8touchgfx6BitmapC1Et>
 800a37e:	f107 0308 	add.w	r3, r7, #8
 800a382:	4619      	mov	r1, r3
 800a384:	4620      	mov	r0, r4
 800a386:	f00f fde0 	bl	8019f4a <_ZN8touchgfx5Image9setBitmapERKNS_6BitmapE>
				  Directional_Vector.invalidate();
 800a38a:	687b      	ldr	r3, [r7, #4]
 800a38c:	f503 733a 	add.w	r3, r3, #744	@ 0x2e8
 800a390:	4618      	mov	r0, r3
 800a392:	f012 fab3 	bl	801c8fc <_ZNK8touchgfx8Drawable10invalidateEv>
				  break;
 800a396:	e0f2      	b.n	800a57e <_ZN20Localize_AnomalyView12update_imageEv+0x286>
			case REGION_2:
				  Directional_Vector.setBitmap(Bitmap(BITMAP_RR2_ID));
 800a398:	687b      	ldr	r3, [r7, #4]
 800a39a:	f503 743a 	add.w	r4, r3, #744	@ 0x2e8
 800a39e:	f107 030c 	add.w	r3, r7, #12
 800a3a2:	2108      	movs	r1, #8
 800a3a4:	4618      	mov	r0, r3
 800a3a6:	f7fb f9f1 	bl	800578c <_ZN8touchgfx6BitmapC1Et>
 800a3aa:	f107 030c 	add.w	r3, r7, #12
 800a3ae:	4619      	mov	r1, r3
 800a3b0:	4620      	mov	r0, r4
 800a3b2:	f00f fdca 	bl	8019f4a <_ZN8touchgfx5Image9setBitmapERKNS_6BitmapE>
				  Directional_Vector.invalidate();
 800a3b6:	687b      	ldr	r3, [r7, #4]
 800a3b8:	f503 733a 	add.w	r3, r3, #744	@ 0x2e8
 800a3bc:	4618      	mov	r0, r3
 800a3be:	f012 fa9d 	bl	801c8fc <_ZNK8touchgfx8Drawable10invalidateEv>
				  break;
 800a3c2:	e0dc      	b.n	800a57e <_ZN20Localize_AnomalyView12update_imageEv+0x286>
			case REGION_3:
				  Directional_Vector.setBitmap(Bitmap(BITMAP_RR3_ID));
 800a3c4:	687b      	ldr	r3, [r7, #4]
 800a3c6:	f503 743a 	add.w	r4, r3, #744	@ 0x2e8
 800a3ca:	f107 0310 	add.w	r3, r7, #16
 800a3ce:	2109      	movs	r1, #9
 800a3d0:	4618      	mov	r0, r3
 800a3d2:	f7fb f9db 	bl	800578c <_ZN8touchgfx6BitmapC1Et>
 800a3d6:	f107 0310 	add.w	r3, r7, #16
 800a3da:	4619      	mov	r1, r3
 800a3dc:	4620      	mov	r0, r4
 800a3de:	f00f fdb4 	bl	8019f4a <_ZN8touchgfx5Image9setBitmapERKNS_6BitmapE>
				  Directional_Vector.invalidate();
 800a3e2:	687b      	ldr	r3, [r7, #4]
 800a3e4:	f503 733a 	add.w	r3, r3, #744	@ 0x2e8
 800a3e8:	4618      	mov	r0, r3
 800a3ea:	f012 fa87 	bl	801c8fc <_ZNK8touchgfx8Drawable10invalidateEv>
				  break;
 800a3ee:	e0c6      	b.n	800a57e <_ZN20Localize_AnomalyView12update_imageEv+0x286>
			case REGION_4:
				  Directional_Vector.setBitmap(Bitmap(BITMAP_RR4_ID));
 800a3f0:	687b      	ldr	r3, [r7, #4]
 800a3f2:	f503 743a 	add.w	r4, r3, #744	@ 0x2e8
 800a3f6:	f107 0314 	add.w	r3, r7, #20
 800a3fa:	210a      	movs	r1, #10
 800a3fc:	4618      	mov	r0, r3
 800a3fe:	f7fb f9c5 	bl	800578c <_ZN8touchgfx6BitmapC1Et>
 800a402:	f107 0314 	add.w	r3, r7, #20
 800a406:	4619      	mov	r1, r3
 800a408:	4620      	mov	r0, r4
 800a40a:	f00f fd9e 	bl	8019f4a <_ZN8touchgfx5Image9setBitmapERKNS_6BitmapE>
				  Directional_Vector.invalidate();
 800a40e:	687b      	ldr	r3, [r7, #4]
 800a410:	f503 733a 	add.w	r3, r3, #744	@ 0x2e8
 800a414:	4618      	mov	r0, r3
 800a416:	f012 fa71 	bl	801c8fc <_ZNK8touchgfx8Drawable10invalidateEv>
				  break;
 800a41a:	e0b0      	b.n	800a57e <_ZN20Localize_AnomalyView12update_imageEv+0x286>
			case REGION_5:
				  Directional_Vector.setBitmap(Bitmap(BITMAP_RR5_ID));
 800a41c:	687b      	ldr	r3, [r7, #4]
 800a41e:	f503 743a 	add.w	r4, r3, #744	@ 0x2e8
 800a422:	f107 0318 	add.w	r3, r7, #24
 800a426:	210b      	movs	r1, #11
 800a428:	4618      	mov	r0, r3
 800a42a:	f7fb f9af 	bl	800578c <_ZN8touchgfx6BitmapC1Et>
 800a42e:	f107 0318 	add.w	r3, r7, #24
 800a432:	4619      	mov	r1, r3
 800a434:	4620      	mov	r0, r4
 800a436:	f00f fd88 	bl	8019f4a <_ZN8touchgfx5Image9setBitmapERKNS_6BitmapE>
				  Directional_Vector.invalidate();
 800a43a:	687b      	ldr	r3, [r7, #4]
 800a43c:	f503 733a 	add.w	r3, r3, #744	@ 0x2e8
 800a440:	4618      	mov	r0, r3
 800a442:	f012 fa5b 	bl	801c8fc <_ZNK8touchgfx8Drawable10invalidateEv>
				  break;
 800a446:	e09a      	b.n	800a57e <_ZN20Localize_AnomalyView12update_imageEv+0x286>
			case REGION_6:
				  Directional_Vector.setBitmap(Bitmap(BITMAP_RR6_ID));
 800a448:	687b      	ldr	r3, [r7, #4]
 800a44a:	f503 743a 	add.w	r4, r3, #744	@ 0x2e8
 800a44e:	f107 031c 	add.w	r3, r7, #28
 800a452:	210c      	movs	r1, #12
 800a454:	4618      	mov	r0, r3
 800a456:	f7fb f999 	bl	800578c <_ZN8touchgfx6BitmapC1Et>
 800a45a:	f107 031c 	add.w	r3, r7, #28
 800a45e:	4619      	mov	r1, r3
 800a460:	4620      	mov	r0, r4
 800a462:	f00f fd72 	bl	8019f4a <_ZN8touchgfx5Image9setBitmapERKNS_6BitmapE>
				  Directional_Vector.invalidate();
 800a466:	687b      	ldr	r3, [r7, #4]
 800a468:	f503 733a 	add.w	r3, r3, #744	@ 0x2e8
 800a46c:	4618      	mov	r0, r3
 800a46e:	f012 fa45 	bl	801c8fc <_ZNK8touchgfx8Drawable10invalidateEv>
				  break;
 800a472:	e084      	b.n	800a57e <_ZN20Localize_AnomalyView12update_imageEv+0x286>
			case REGION_7:
				  Directional_Vector.setBitmap(Bitmap(BITMAP_RR7_ID));
 800a474:	687b      	ldr	r3, [r7, #4]
 800a476:	f503 743a 	add.w	r4, r3, #744	@ 0x2e8
 800a47a:	f107 0320 	add.w	r3, r7, #32
 800a47e:	210d      	movs	r1, #13
 800a480:	4618      	mov	r0, r3
 800a482:	f7fb f983 	bl	800578c <_ZN8touchgfx6BitmapC1Et>
 800a486:	f107 0320 	add.w	r3, r7, #32
 800a48a:	4619      	mov	r1, r3
 800a48c:	4620      	mov	r0, r4
 800a48e:	f00f fd5c 	bl	8019f4a <_ZN8touchgfx5Image9setBitmapERKNS_6BitmapE>
				  Directional_Vector.invalidate();
 800a492:	687b      	ldr	r3, [r7, #4]
 800a494:	f503 733a 	add.w	r3, r3, #744	@ 0x2e8
 800a498:	4618      	mov	r0, r3
 800a49a:	f012 fa2f 	bl	801c8fc <_ZNK8touchgfx8Drawable10invalidateEv>
				  break;
 800a49e:	e06e      	b.n	800a57e <_ZN20Localize_AnomalyView12update_imageEv+0x286>
			case REGION_8:
				  Directional_Vector.setBitmap(Bitmap(BITMAP_RR8_ID));
 800a4a0:	687b      	ldr	r3, [r7, #4]
 800a4a2:	f503 743a 	add.w	r4, r3, #744	@ 0x2e8
 800a4a6:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800a4aa:	210e      	movs	r1, #14
 800a4ac:	4618      	mov	r0, r3
 800a4ae:	f7fb f96d 	bl	800578c <_ZN8touchgfx6BitmapC1Et>
 800a4b2:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800a4b6:	4619      	mov	r1, r3
 800a4b8:	4620      	mov	r0, r4
 800a4ba:	f00f fd46 	bl	8019f4a <_ZN8touchgfx5Image9setBitmapERKNS_6BitmapE>
				  Directional_Vector.invalidate();
 800a4be:	687b      	ldr	r3, [r7, #4]
 800a4c0:	f503 733a 	add.w	r3, r3, #744	@ 0x2e8
 800a4c4:	4618      	mov	r0, r3
 800a4c6:	f012 fa19 	bl	801c8fc <_ZNK8touchgfx8Drawable10invalidateEv>
				  break;
 800a4ca:	e058      	b.n	800a57e <_ZN20Localize_AnomalyView12update_imageEv+0x286>
			case REGION_9:
				  Directional_Vector.setBitmap(Bitmap(BITMAP_RR9_ID));
 800a4cc:	687b      	ldr	r3, [r7, #4]
 800a4ce:	f503 743a 	add.w	r4, r3, #744	@ 0x2e8
 800a4d2:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 800a4d6:	210f      	movs	r1, #15
 800a4d8:	4618      	mov	r0, r3
 800a4da:	f7fb f957 	bl	800578c <_ZN8touchgfx6BitmapC1Et>
 800a4de:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 800a4e2:	4619      	mov	r1, r3
 800a4e4:	4620      	mov	r0, r4
 800a4e6:	f00f fd30 	bl	8019f4a <_ZN8touchgfx5Image9setBitmapERKNS_6BitmapE>
				  Directional_Vector.invalidate();
 800a4ea:	687b      	ldr	r3, [r7, #4]
 800a4ec:	f503 733a 	add.w	r3, r3, #744	@ 0x2e8
 800a4f0:	4618      	mov	r0, r3
 800a4f2:	f012 fa03 	bl	801c8fc <_ZNK8touchgfx8Drawable10invalidateEv>
				  break;
 800a4f6:	e042      	b.n	800a57e <_ZN20Localize_AnomalyView12update_imageEv+0x286>
			case REGION_10:
				  Directional_Vector.setBitmap(Bitmap(BITMAP_RR10_ID));
 800a4f8:	687b      	ldr	r3, [r7, #4]
 800a4fa:	f503 743a 	add.w	r4, r3, #744	@ 0x2e8
 800a4fe:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 800a502:	2105      	movs	r1, #5
 800a504:	4618      	mov	r0, r3
 800a506:	f7fb f941 	bl	800578c <_ZN8touchgfx6BitmapC1Et>
 800a50a:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 800a50e:	4619      	mov	r1, r3
 800a510:	4620      	mov	r0, r4
 800a512:	f00f fd1a 	bl	8019f4a <_ZN8touchgfx5Image9setBitmapERKNS_6BitmapE>
				  Directional_Vector.invalidate();
 800a516:	687b      	ldr	r3, [r7, #4]
 800a518:	f503 733a 	add.w	r3, r3, #744	@ 0x2e8
 800a51c:	4618      	mov	r0, r3
 800a51e:	f012 f9ed 	bl	801c8fc <_ZNK8touchgfx8Drawable10invalidateEv>
				  break;
 800a522:	e02c      	b.n	800a57e <_ZN20Localize_AnomalyView12update_imageEv+0x286>
			case REGION_11:
				  Directional_Vector.setBitmap(Bitmap(BITMAP_RR11_ID));
 800a524:	687b      	ldr	r3, [r7, #4]
 800a526:	f503 743a 	add.w	r4, r3, #744	@ 0x2e8
 800a52a:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 800a52e:	2106      	movs	r1, #6
 800a530:	4618      	mov	r0, r3
 800a532:	f7fb f92b 	bl	800578c <_ZN8touchgfx6BitmapC1Et>
 800a536:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 800a53a:	4619      	mov	r1, r3
 800a53c:	4620      	mov	r0, r4
 800a53e:	f00f fd04 	bl	8019f4a <_ZN8touchgfx5Image9setBitmapERKNS_6BitmapE>
				  Directional_Vector.invalidate();
 800a542:	687b      	ldr	r3, [r7, #4]
 800a544:	f503 733a 	add.w	r3, r3, #744	@ 0x2e8
 800a548:	4618      	mov	r0, r3
 800a54a:	f012 f9d7 	bl	801c8fc <_ZNK8touchgfx8Drawable10invalidateEv>
				  break;
 800a54e:	e016      	b.n	800a57e <_ZN20Localize_AnomalyView12update_imageEv+0x286>
			case REGION_12:
				  Directional_Vector.setBitmap(Bitmap(BITMAP_RR12_ID));
 800a550:	687b      	ldr	r3, [r7, #4]
 800a552:	f503 743a 	add.w	r4, r3, #744	@ 0x2e8
 800a556:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 800a55a:	2107      	movs	r1, #7
 800a55c:	4618      	mov	r0, r3
 800a55e:	f7fb f915 	bl	800578c <_ZN8touchgfx6BitmapC1Et>
 800a562:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 800a566:	4619      	mov	r1, r3
 800a568:	4620      	mov	r0, r4
 800a56a:	f00f fcee 	bl	8019f4a <_ZN8touchgfx5Image9setBitmapERKNS_6BitmapE>
				  Directional_Vector.invalidate();
 800a56e:	687b      	ldr	r3, [r7, #4]
 800a570:	f503 733a 	add.w	r3, r3, #744	@ 0x2e8
 800a574:	4618      	mov	r0, r3
 800a576:	f012 f9c1 	bl	801c8fc <_ZNK8touchgfx8Drawable10invalidateEv>
				  break;
 800a57a:	e000      	b.n	800a57e <_ZN20Localize_AnomalyView12update_imageEv+0x286>
			default: break;
 800a57c:	bf00      	nop
		}
	}
}
 800a57e:	bf00      	nop
 800a580:	373c      	adds	r7, #60	@ 0x3c
 800a582:	46bd      	mov	sp, r7
 800a584:	bd90      	pop	{r4, r7, pc}
 800a586:	bf00      	nop
 800a588:	24001e80 	.word	0x24001e80
 800a58c:	24001e81 	.word	0x24001e81

0800a590 <_ZN13MainPresenterD1Ev>:
     * The deactivate function is called automatically when this screen is "switched out"
     * (ie. made inactive). Teardown functionality can be placed here.
     */
    virtual void deactivate();

    virtual ~MainPresenter() {};
 800a590:	b580      	push	{r7, lr}
 800a592:	b082      	sub	sp, #8
 800a594:	af00      	add	r7, sp, #0
 800a596:	6078      	str	r0, [r7, #4]
 800a598:	4a09      	ldr	r2, [pc, #36]	@ (800a5c0 <_ZN13MainPresenterD1Ev+0x30>)
 800a59a:	687b      	ldr	r3, [r7, #4]
 800a59c:	601a      	str	r2, [r3, #0]
 800a59e:	4a09      	ldr	r2, [pc, #36]	@ (800a5c4 <_ZN13MainPresenterD1Ev+0x34>)
 800a5a0:	687b      	ldr	r3, [r7, #4]
 800a5a2:	605a      	str	r2, [r3, #4]
 800a5a4:	687b      	ldr	r3, [r7, #4]
 800a5a6:	3304      	adds	r3, #4
 800a5a8:	4618      	mov	r0, r3
 800a5aa:	f7ff fdcf 	bl	800a14c <_ZN13ModelListenerD1Ev>
 800a5ae:	687b      	ldr	r3, [r7, #4]
 800a5b0:	4618      	mov	r0, r3
 800a5b2:	f7ff fd87 	bl	800a0c4 <_ZN8touchgfx9PresenterD1Ev>
 800a5b6:	687b      	ldr	r3, [r7, #4]
 800a5b8:	4618      	mov	r0, r3
 800a5ba:	3708      	adds	r7, #8
 800a5bc:	46bd      	mov	sp, r7
 800a5be:	bd80      	pop	{r7, pc}
 800a5c0:	0802d56c 	.word	0x0802d56c
 800a5c4:	0802d584 	.word	0x0802d584

0800a5c8 <_ZThn4_N13MainPresenterD1Ev>:
 800a5c8:	f1a0 0004 	sub.w	r0, r0, #4
 800a5cc:	e7e0      	b.n	800a590 <_ZN13MainPresenterD1Ev>
 800a5ce:	bf00      	nop

0800a5d0 <_ZN13MainPresenterD0Ev>:
 800a5d0:	b580      	push	{r7, lr}
 800a5d2:	b082      	sub	sp, #8
 800a5d4:	af00      	add	r7, sp, #0
 800a5d6:	6078      	str	r0, [r7, #4]
 800a5d8:	6878      	ldr	r0, [r7, #4]
 800a5da:	f7ff ffd9 	bl	800a590 <_ZN13MainPresenterD1Ev>
 800a5de:	2110      	movs	r1, #16
 800a5e0:	6878      	ldr	r0, [r7, #4]
 800a5e2:	f020 fb00 	bl	802abe6 <_ZdlPvj>
 800a5e6:	687b      	ldr	r3, [r7, #4]
 800a5e8:	4618      	mov	r0, r3
 800a5ea:	3708      	adds	r7, #8
 800a5ec:	46bd      	mov	sp, r7
 800a5ee:	bd80      	pop	{r7, pc}

0800a5f0 <_ZThn4_N13MainPresenterD0Ev>:
 800a5f0:	f1a0 0004 	sub.w	r0, r0, #4
 800a5f4:	e7ec      	b.n	800a5d0 <_ZN13MainPresenterD0Ev>
	...

0800a5f8 <_ZN13MainPresenterC1ER8MainView>:
#include <gui/main_screen/MainView.hpp>
#include <gui/main_screen/MainPresenter.hpp>

MainPresenter::MainPresenter(MainView& v)
 800a5f8:	b580      	push	{r7, lr}
 800a5fa:	b082      	sub	sp, #8
 800a5fc:	af00      	add	r7, sp, #0
 800a5fe:	6078      	str	r0, [r7, #4]
 800a600:	6039      	str	r1, [r7, #0]
    : view(v)
 800a602:	687b      	ldr	r3, [r7, #4]
 800a604:	4618      	mov	r0, r3
 800a606:	f7ff fd7d 	bl	800a104 <_ZN8touchgfx9PresenterC1Ev>
 800a60a:	687b      	ldr	r3, [r7, #4]
 800a60c:	3304      	adds	r3, #4
 800a60e:	4618      	mov	r0, r3
 800a610:	f7ff fd88 	bl	800a124 <_ZN13ModelListenerC1Ev>
 800a614:	4a06      	ldr	r2, [pc, #24]	@ (800a630 <_ZN13MainPresenterC1ER8MainView+0x38>)
 800a616:	687b      	ldr	r3, [r7, #4]
 800a618:	601a      	str	r2, [r3, #0]
 800a61a:	4a06      	ldr	r2, [pc, #24]	@ (800a634 <_ZN13MainPresenterC1ER8MainView+0x3c>)
 800a61c:	687b      	ldr	r3, [r7, #4]
 800a61e:	605a      	str	r2, [r3, #4]
 800a620:	687b      	ldr	r3, [r7, #4]
 800a622:	683a      	ldr	r2, [r7, #0]
 800a624:	60da      	str	r2, [r3, #12]
{
}
 800a626:	687b      	ldr	r3, [r7, #4]
 800a628:	4618      	mov	r0, r3
 800a62a:	3708      	adds	r7, #8
 800a62c:	46bd      	mov	sp, r7
 800a62e:	bd80      	pop	{r7, pc}
 800a630:	0802d56c 	.word	0x0802d56c
 800a634:	0802d584 	.word	0x0802d584

0800a638 <_ZN13MainPresenter8activateEv>:

void MainPresenter::activate()
{
 800a638:	b480      	push	{r7}
 800a63a:	b083      	sub	sp, #12
 800a63c:	af00      	add	r7, sp, #0
 800a63e:	6078      	str	r0, [r7, #4]
}
 800a640:	bf00      	nop
 800a642:	370c      	adds	r7, #12
 800a644:	46bd      	mov	sp, r7
 800a646:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a64a:	4770      	bx	lr

0800a64c <_ZN13MainPresenter10deactivateEv>:

void MainPresenter::deactivate()
{
 800a64c:	b480      	push	{r7}
 800a64e:	b083      	sub	sp, #12
 800a650:	af00      	add	r7, sp, #0
 800a652:	6078      	str	r0, [r7, #4]
}
 800a654:	bf00      	nop
 800a656:	370c      	adds	r7, #12
 800a658:	46bd      	mov	sp, r7
 800a65a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a65e:	4770      	bx	lr

0800a660 <_ZNK8touchgfx6Bitmap5getIdEv>:
    /**
     * Gets the id of this Bitmap.
     *
     * @return The id of this Bitmap.
     */
    BitmapId getId() const
 800a660:	b580      	push	{r7, lr}
 800a662:	b082      	sub	sp, #8
 800a664:	af00      	add	r7, sp, #0
 800a666:	6078      	str	r0, [r7, #4]
    {
        assert(bitmaps != 0 && "Bitmap database has not been initialized.");
 800a668:	4b07      	ldr	r3, [pc, #28]	@ (800a688 <_ZNK8touchgfx6Bitmap5getIdEv+0x28>)
 800a66a:	681b      	ldr	r3, [r3, #0]
 800a66c:	2b00      	cmp	r3, #0
 800a66e:	d105      	bne.n	800a67c <_ZNK8touchgfx6Bitmap5getIdEv+0x1c>
 800a670:	4b06      	ldr	r3, [pc, #24]	@ (800a68c <_ZNK8touchgfx6Bitmap5getIdEv+0x2c>)
 800a672:	4a07      	ldr	r2, [pc, #28]	@ (800a690 <_ZNK8touchgfx6Bitmap5getIdEv+0x30>)
 800a674:	2187      	movs	r1, #135	@ 0x87
 800a676:	4807      	ldr	r0, [pc, #28]	@ (800a694 <_ZNK8touchgfx6Bitmap5getIdEv+0x34>)
 800a678:	f020 fae4 	bl	802ac44 <__assert_func>
        return bitmapId;
 800a67c:	687b      	ldr	r3, [r7, #4]
 800a67e:	881b      	ldrh	r3, [r3, #0]
    }
 800a680:	4618      	mov	r0, r3
 800a682:	3708      	adds	r7, #8
 800a684:	46bd      	mov	sp, r7
 800a686:	bd80      	pop	{r7, pc}
 800a688:	2400b90c 	.word	0x2400b90c
 800a68c:	0802c938 	.word	0x0802c938
 800a690:	0802c974 	.word	0x0802c974
 800a694:	0802c9a8 	.word	0x0802c9a8

0800a698 <_ZNK8touchgfx12ToggleButton8getStateEv>:
     * Gets the state of the ToggleButton as set with forceState.
     *
     * @return True if the button has been toggled, i.e. the pressed state is shown when the
     *         button is not pressed.
     */
    bool getState() const
 800a698:	b590      	push	{r4, r7, lr}
 800a69a:	b083      	sub	sp, #12
 800a69c:	af00      	add	r7, sp, #0
 800a69e:	6078      	str	r0, [r7, #4]
    {
        return up.getId() == originalPressed.getId();
 800a6a0:	687b      	ldr	r3, [r7, #4]
 800a6a2:	332e      	adds	r3, #46	@ 0x2e
 800a6a4:	4618      	mov	r0, r3
 800a6a6:	f7ff ffdb 	bl	800a660 <_ZNK8touchgfx6Bitmap5getIdEv>
 800a6aa:	4603      	mov	r3, r0
 800a6ac:	461c      	mov	r4, r3
 800a6ae:	687b      	ldr	r3, [r7, #4]
 800a6b0:	3334      	adds	r3, #52	@ 0x34
 800a6b2:	4618      	mov	r0, r3
 800a6b4:	f7ff ffd4 	bl	800a660 <_ZNK8touchgfx6Bitmap5getIdEv>
 800a6b8:	4603      	mov	r3, r0
 800a6ba:	429c      	cmp	r4, r3
 800a6bc:	bf0c      	ite	eq
 800a6be:	2301      	moveq	r3, #1
 800a6c0:	2300      	movne	r3, #0
 800a6c2:	b2db      	uxtb	r3, r3
    }
 800a6c4:	4618      	mov	r0, r3
 800a6c6:	370c      	adds	r7, #12
 800a6c8:	46bd      	mov	sp, r7
 800a6ca:	bd90      	pop	{r4, r7, pc}

0800a6cc <_ZN8MainViewD1Ev>:

class MainView : public MainViewBase
{
public:
    MainView();
    virtual ~MainView() {}
 800a6cc:	b580      	push	{r7, lr}
 800a6ce:	b082      	sub	sp, #8
 800a6d0:	af00      	add	r7, sp, #0
 800a6d2:	6078      	str	r0, [r7, #4]
 800a6d4:	4a05      	ldr	r2, [pc, #20]	@ (800a6ec <_ZN8MainViewD1Ev+0x20>)
 800a6d6:	687b      	ldr	r3, [r7, #4]
 800a6d8:	601a      	str	r2, [r3, #0]
 800a6da:	687b      	ldr	r3, [r7, #4]
 800a6dc:	4618      	mov	r0, r3
 800a6de:	f7fc fa03 	bl	8006ae8 <_ZN12MainViewBaseD1Ev>
 800a6e2:	687b      	ldr	r3, [r7, #4]
 800a6e4:	4618      	mov	r0, r3
 800a6e6:	3708      	adds	r7, #8
 800a6e8:	46bd      	mov	sp, r7
 800a6ea:	bd80      	pop	{r7, pc}
 800a6ec:	0802d594 	.word	0x0802d594

0800a6f0 <_ZN8MainViewD0Ev>:
 800a6f0:	b580      	push	{r7, lr}
 800a6f2:	b082      	sub	sp, #8
 800a6f4:	af00      	add	r7, sp, #0
 800a6f6:	6078      	str	r0, [r7, #4]
 800a6f8:	6878      	ldr	r0, [r7, #4]
 800a6fa:	f7ff ffe7 	bl	800a6cc <_ZN8MainViewD1Ev>
 800a6fe:	f640 3118 	movw	r1, #2840	@ 0xb18
 800a702:	6878      	ldr	r0, [r7, #4]
 800a704:	f020 fa6f 	bl	802abe6 <_ZdlPvj>
 800a708:	687b      	ldr	r3, [r7, #4]
 800a70a:	4618      	mov	r0, r3
 800a70c:	3708      	adds	r7, #8
 800a70e:	46bd      	mov	sp, r7
 800a710:	bd80      	pop	{r7, pc}
	...

0800a714 <_ZN8MainViewC1Ev>:
#include "ipc_interface.h"

systemState state;
int currentDelta = 0;

MainView::MainView()
 800a714:	b580      	push	{r7, lr}
 800a716:	b082      	sub	sp, #8
 800a718:	af00      	add	r7, sp, #0
 800a71a:	6078      	str	r0, [r7, #4]
 800a71c:	687b      	ldr	r3, [r7, #4]
 800a71e:	4618      	mov	r0, r3
 800a720:	f7fc fb7a 	bl	8006e18 <_ZN12MainViewBaseC1Ev>
 800a724:	4a03      	ldr	r2, [pc, #12]	@ (800a734 <_ZN8MainViewC1Ev+0x20>)
 800a726:	687b      	ldr	r3, [r7, #4]
 800a728:	601a      	str	r2, [r3, #0]
{
}
 800a72a:	687b      	ldr	r3, [r7, #4]
 800a72c:	4618      	mov	r0, r3
 800a72e:	3708      	adds	r7, #8
 800a730:	46bd      	mov	sp, r7
 800a732:	bd80      	pop	{r7, pc}
 800a734:	0802d594 	.word	0x0802d594

0800a738 <_ZN8MainView11setupScreenEv>:

void MainView::setupScreen()
{
 800a738:	b580      	push	{r7, lr}
 800a73a:	b082      	sub	sp, #8
 800a73c:	af00      	add	r7, sp, #0
 800a73e:	6078      	str	r0, [r7, #4]
	//setup voiceToggle
	if(!state.voiceToggle) {
 800a740:	4b60      	ldr	r3, [pc, #384]	@ (800a8c4 <_ZN8MainView11setupScreenEv+0x18c>)
 800a742:	791b      	ldrb	r3, [r3, #4]
 800a744:	f083 0301 	eor.w	r3, r3, #1
 800a748:	b2db      	uxtb	r3, r3
 800a74a:	2b00      	cmp	r3, #0
 800a74c:	d026      	beq.n	800a79c <_ZN8MainView11setupScreenEv+0x64>
		VoiceCommMess_Text_On.setVisible(false);
 800a74e:	687b      	ldr	r3, [r7, #4]
 800a750:	f203 737c 	addw	r3, r3, #1916	@ 0x77c
 800a754:	2100      	movs	r1, #0
 800a756:	4618      	mov	r0, r3
 800a758:	f7fc f971 	bl	8006a3e <_ZN8touchgfx8Drawable10setVisibleEb>
		VoiceCommMess_Text_Off.setVisible(true);
 800a75c:	687b      	ldr	r3, [r7, #4]
 800a75e:	f503 63f7 	add.w	r3, r3, #1976	@ 0x7b8
 800a762:	2101      	movs	r1, #1
 800a764:	4618      	mov	r0, r3
 800a766:	f7fc f96a 	bl	8006a3e <_ZN8touchgfx8Drawable10setVisibleEb>

		VoiceCommMess_Text_On.invalidate();
 800a76a:	687b      	ldr	r3, [r7, #4]
 800a76c:	f203 737c 	addw	r3, r3, #1916	@ 0x77c
 800a770:	4618      	mov	r0, r3
 800a772:	f012 f8c3 	bl	801c8fc <_ZNK8touchgfx8Drawable10invalidateEv>
		VoiceCommMess_Text_Off.invalidate();
 800a776:	687b      	ldr	r3, [r7, #4]
 800a778:	f503 63f7 	add.w	r3, r3, #1976	@ 0x7b8
 800a77c:	4618      	mov	r0, r3
 800a77e:	f012 f8bd 	bl	801c8fc <_ZNK8touchgfx8Drawable10invalidateEv>

		Voice_Toggle_Button.forceState(true);
 800a782:	687b      	ldr	r3, [r7, #4]
 800a784:	f203 43f4 	addw	r3, r3, #1268	@ 0x4f4
 800a788:	2101      	movs	r1, #1
 800a78a:	4618      	mov	r0, r3
 800a78c:	f00e ff5e 	bl	801964c <_ZN8touchgfx12ToggleButton10forceStateEb>
		Voice_Toggle_Button.invalidate();
 800a790:	687b      	ldr	r3, [r7, #4]
 800a792:	f203 43f4 	addw	r3, r3, #1268	@ 0x4f4
 800a796:	4618      	mov	r0, r3
 800a798:	f012 f8b0 	bl	801c8fc <_ZNK8touchgfx8Drawable10invalidateEv>
	}

	//setup volume
	textProgress1.setValue(state.volume);
 800a79c:	687b      	ldr	r3, [r7, #4]
 800a79e:	f503 7315 	add.w	r3, r3, #596	@ 0x254
 800a7a2:	4a48      	ldr	r2, [pc, #288]	@ (800a8c4 <_ZN8MainView11setupScreenEv+0x18c>)
 800a7a4:	6812      	ldr	r2, [r2, #0]
 800a7a6:	4611      	mov	r1, r2
 800a7a8:	4618      	mov	r0, r3
 800a7aa:	f00c ff63 	bl	8017674 <_ZN8touchgfx12TextProgress8setValueEi>
	Volume_Slider.setValue(state.volume);
 800a7ae:	687b      	ldr	r3, [r7, #4]
 800a7b0:	f503 737e 	add.w	r3, r3, #1016	@ 0x3f8
 800a7b4:	4a43      	ldr	r2, [pc, #268]	@ (800a8c4 <_ZN8MainView11setupScreenEv+0x18c>)
 800a7b6:	6812      	ldr	r2, [r2, #0]
 800a7b8:	4611      	mov	r1, r2
 800a7ba:	4618      	mov	r0, r3
 800a7bc:	f00d fc71 	bl	80180a2 <_ZN8touchgfx6Slider8setValueEi>
	Volume_Slider.invalidate();
 800a7c0:	687b      	ldr	r3, [r7, #4]
 800a7c2:	f503 737e 	add.w	r3, r3, #1016	@ 0x3f8
 800a7c6:	4618      	mov	r0, r3
 800a7c8:	f012 f898 	bl	801c8fc <_ZNK8touchgfx8Drawable10invalidateEv>

	//setup anomaly message
	AnomalyWarning_Textbox_1_1.setVisible(state.anomalyDetected);
 800a7cc:	687b      	ldr	r3, [r7, #4]
 800a7ce:	f203 73f4 	addw	r3, r3, #2036	@ 0x7f4
 800a7d2:	4a3c      	ldr	r2, [pc, #240]	@ (800a8c4 <_ZN8MainView11setupScreenEv+0x18c>)
 800a7d4:	7952      	ldrb	r2, [r2, #5]
 800a7d6:	b2d2      	uxtb	r2, r2
 800a7d8:	4611      	mov	r1, r2
 800a7da:	4618      	mov	r0, r3
 800a7dc:	f7fc f92f 	bl	8006a3e <_ZN8touchgfx8Drawable10setVisibleEb>
	AnomalyWarning_Textbox_1_1.invalidate();
 800a7e0:	687b      	ldr	r3, [r7, #4]
 800a7e2:	f203 73f4 	addw	r3, r3, #2036	@ 0x7f4
 800a7e6:	4618      	mov	r0, r3
 800a7e8:	f012 f888 	bl	801c8fc <_ZNK8touchgfx8Drawable10invalidateEv>

	MessageBoard_Message_1.setVisible(state.alert);
 800a7ec:	687b      	ldr	r3, [r7, #4]
 800a7ee:	f603 0388 	addw	r3, r3, #2184	@ 0x888
 800a7f2:	4a34      	ldr	r2, [pc, #208]	@ (800a8c4 <_ZN8MainView11setupScreenEv+0x18c>)
 800a7f4:	7992      	ldrb	r2, [r2, #6]
 800a7f6:	4611      	mov	r1, r2
 800a7f8:	4618      	mov	r0, r3
 800a7fa:	f7fc f920 	bl	8006a3e <_ZN8touchgfx8Drawable10setVisibleEb>
	MessageBoard_Message_1.invalidate();
 800a7fe:	687b      	ldr	r3, [r7, #4]
 800a800:	f603 0388 	addw	r3, r3, #2184	@ 0x888
 800a804:	4618      	mov	r0, r3
 800a806:	f012 f879 	bl	801c8fc <_ZNK8touchgfx8Drawable10invalidateEv>
	MessageBoard_Message_Muted.setVisible(!state.alert);
 800a80a:	687b      	ldr	r3, [r7, #4]
 800a80c:	f603 02c4 	addw	r2, r3, #2244	@ 0x8c4
 800a810:	4b2c      	ldr	r3, [pc, #176]	@ (800a8c4 <_ZN8MainView11setupScreenEv+0x18c>)
 800a812:	799b      	ldrb	r3, [r3, #6]
 800a814:	f083 0301 	eor.w	r3, r3, #1
 800a818:	b2db      	uxtb	r3, r3
 800a81a:	4619      	mov	r1, r3
 800a81c:	4610      	mov	r0, r2
 800a81e:	f7fc f90e 	bl	8006a3e <_ZN8touchgfx8Drawable10setVisibleEb>
	MessageBoard_Message_Muted.invalidate();
 800a822:	687b      	ldr	r3, [r7, #4]
 800a824:	f603 03c4 	addw	r3, r3, #2244	@ 0x8c4
 800a828:	4618      	mov	r0, r3
 800a82a:	f012 f867 	bl	801c8fc <_ZNK8touchgfx8Drawable10invalidateEv>

	//Set buttons
	Localize_Button.setVisible(state.anomalyDetected);
 800a82e:	687b      	ldr	r3, [r7, #4]
 800a830:	f603 2328 	addw	r3, r3, #2600	@ 0xa28
 800a834:	4a23      	ldr	r2, [pc, #140]	@ (800a8c4 <_ZN8MainView11setupScreenEv+0x18c>)
 800a836:	7952      	ldrb	r2, [r2, #5]
 800a838:	b2d2      	uxtb	r2, r2
 800a83a:	4611      	mov	r1, r2
 800a83c:	4618      	mov	r0, r3
 800a83e:	f7fc f8fe 	bl	8006a3e <_ZN8touchgfx8Drawable10setVisibleEb>
	Localize_Button.invalidate();
 800a842:	687b      	ldr	r3, [r7, #4]
 800a844:	f603 2328 	addw	r3, r3, #2600	@ 0xa28
 800a848:	4618      	mov	r0, r3
 800a84a:	f012 f857 	bl	801c8fc <_ZNK8touchgfx8Drawable10invalidateEv>
	Alert_Mute_Button.setVisible(state.anomalyDetected);
 800a84e:	687b      	ldr	r3, [r7, #4]
 800a850:	f603 13f4 	addw	r3, r3, #2548	@ 0x9f4
 800a854:	4a1b      	ldr	r2, [pc, #108]	@ (800a8c4 <_ZN8MainView11setupScreenEv+0x18c>)
 800a856:	7952      	ldrb	r2, [r2, #5]
 800a858:	b2d2      	uxtb	r2, r2
 800a85a:	4611      	mov	r1, r2
 800a85c:	4618      	mov	r0, r3
 800a85e:	f7fc f8ee 	bl	8006a3e <_ZN8touchgfx8Drawable10setVisibleEb>
	Alert_Mute_Button.invalidate();
 800a862:	687b      	ldr	r3, [r7, #4]
 800a864:	f603 13f4 	addw	r3, r3, #2548	@ 0x9f4
 800a868:	4618      	mov	r0, r3
 800a86a:	f012 f847 	bl	801c8fc <_ZNK8touchgfx8Drawable10invalidateEv>

	//Set disabled button images
	Disabled_Button1.setVisible(!state.anomalyDetected);
 800a86e:	687b      	ldr	r3, [r7, #4]
 800a870:	f603 12c8 	addw	r2, r3, #2504	@ 0x9c8
 800a874:	4b13      	ldr	r3, [pc, #76]	@ (800a8c4 <_ZN8MainView11setupScreenEv+0x18c>)
 800a876:	795b      	ldrb	r3, [r3, #5]
 800a878:	b2db      	uxtb	r3, r3
 800a87a:	f083 0301 	eor.w	r3, r3, #1
 800a87e:	b2db      	uxtb	r3, r3
 800a880:	4619      	mov	r1, r3
 800a882:	4610      	mov	r0, r2
 800a884:	f7fc f8db 	bl	8006a3e <_ZN8touchgfx8Drawable10setVisibleEb>
	Disabled_Button1.invalidate();
 800a888:	687b      	ldr	r3, [r7, #4]
 800a88a:	f603 13c8 	addw	r3, r3, #2504	@ 0x9c8
 800a88e:	4618      	mov	r0, r3
 800a890:	f012 f834 	bl	801c8fc <_ZNK8touchgfx8Drawable10invalidateEv>
	Disabled_Button2.setVisible(!state.anomalyDetected);
 800a894:	687b      	ldr	r3, [r7, #4]
 800a896:	f603 129c 	addw	r2, r3, #2460	@ 0x99c
 800a89a:	4b0a      	ldr	r3, [pc, #40]	@ (800a8c4 <_ZN8MainView11setupScreenEv+0x18c>)
 800a89c:	795b      	ldrb	r3, [r3, #5]
 800a89e:	b2db      	uxtb	r3, r3
 800a8a0:	f083 0301 	eor.w	r3, r3, #1
 800a8a4:	b2db      	uxtb	r3, r3
 800a8a6:	4619      	mov	r1, r3
 800a8a8:	4610      	mov	r0, r2
 800a8aa:	f7fc f8c8 	bl	8006a3e <_ZN8touchgfx8Drawable10setVisibleEb>
	Disabled_Button2.invalidate();
 800a8ae:	687b      	ldr	r3, [r7, #4]
 800a8b0:	f603 139c 	addw	r3, r3, #2460	@ 0x99c
 800a8b4:	4618      	mov	r0, r3
 800a8b6:	f012 f821 	bl	801c8fc <_ZNK8touchgfx8Drawable10invalidateEv>
}
 800a8ba:	bf00      	nop
 800a8bc:	3708      	adds	r7, #8
 800a8be:	46bd      	mov	sp, r7
 800a8c0:	bd80      	pop	{r7, pc}
 800a8c2:	bf00      	nop
 800a8c4:	2400000c 	.word	0x2400000c

0800a8c8 <_ZN8MainView14tearDownScreenEv>:

void MainView::tearDownScreen()
{
 800a8c8:	b480      	push	{r7}
 800a8ca:	b083      	sub	sp, #12
 800a8cc:	af00      	add	r7, sp, #0
 800a8ce:	6078      	str	r0, [r7, #4]
}
 800a8d0:	bf00      	nop
 800a8d2:	370c      	adds	r7, #12
 800a8d4:	46bd      	mov	sp, r7
 800a8d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a8da:	4770      	bx	lr

0800a8dc <_ZN8MainView17set_volume_sliderEi>:

void MainView::set_volume_slider(int value) {
 800a8dc:	b580      	push	{r7, lr}
 800a8de:	b082      	sub	sp, #8
 800a8e0:	af00      	add	r7, sp, #0
 800a8e2:	6078      	str	r0, [r7, #4]
 800a8e4:	6039      	str	r1, [r7, #0]
	state.volume = value;
 800a8e6:	4a0e      	ldr	r2, [pc, #56]	@ (800a920 <_ZN8MainView17set_volume_sliderEi+0x44>)
 800a8e8:	683b      	ldr	r3, [r7, #0]
 800a8ea:	6013      	str	r3, [r2, #0]
	textProgress1.setValue(value);
 800a8ec:	687b      	ldr	r3, [r7, #4]
 800a8ee:	f503 7315 	add.w	r3, r3, #596	@ 0x254
 800a8f2:	6839      	ldr	r1, [r7, #0]
 800a8f4:	4618      	mov	r0, r3
 800a8f6:	f00c febd 	bl	8017674 <_ZN8touchgfx12TextProgress8setValueEi>

  // update IPC voice volume, normalized 0.0f to 1.0f
  IPCSetVoiceVolumeNormalized( (float)state.volume/100.0f );
 800a8fa:	4b09      	ldr	r3, [pc, #36]	@ (800a920 <_ZN8MainView17set_volume_sliderEi+0x44>)
 800a8fc:	681b      	ldr	r3, [r3, #0]
 800a8fe:	ee07 3a90 	vmov	s15, r3
 800a902:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800a906:	eddf 6a07 	vldr	s13, [pc, #28]	@ 800a924 <_ZN8MainView17set_volume_sliderEi+0x48>
 800a90a:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 800a90e:	eeb0 0a47 	vmov.f32	s0, s14
 800a912:	f7f5 fd35 	bl	8000380 <IPCSetVoiceVolumeNormalized>
}
 800a916:	bf00      	nop
 800a918:	3708      	adds	r7, #8
 800a91a:	46bd      	mov	sp, r7
 800a91c:	bd80      	pop	{r7, pc}
 800a91e:	bf00      	nop
 800a920:	2400000c 	.word	0x2400000c
 800a924:	42c80000 	.word	0x42c80000

0800a928 <_ZN8MainView18set_volume_encoderEv>:

void MainView::set_volume_encoder() {
 800a928:	b580      	push	{r7, lr}
 800a92a:	b084      	sub	sp, #16
 800a92c:	af00      	add	r7, sp, #0
 800a92e:	6078      	str	r0, [r7, #4]
	int tempVolume = state.volume + currentDelta;
 800a930:	4b1e      	ldr	r3, [pc, #120]	@ (800a9ac <_ZN8MainView18set_volume_encoderEv+0x84>)
 800a932:	681a      	ldr	r2, [r3, #0]
 800a934:	4b1e      	ldr	r3, [pc, #120]	@ (800a9b0 <_ZN8MainView18set_volume_encoderEv+0x88>)
 800a936:	681b      	ldr	r3, [r3, #0]
 800a938:	4413      	add	r3, r2
 800a93a:	60fb      	str	r3, [r7, #12]
	if(tempVolume > 100) {
 800a93c:	68fb      	ldr	r3, [r7, #12]
 800a93e:	2b64      	cmp	r3, #100	@ 0x64
 800a940:	dd02      	ble.n	800a948 <_ZN8MainView18set_volume_encoderEv+0x20>
		tempVolume = 100;
 800a942:	2364      	movs	r3, #100	@ 0x64
 800a944:	60fb      	str	r3, [r7, #12]
 800a946:	e004      	b.n	800a952 <_ZN8MainView18set_volume_encoderEv+0x2a>
	}
	else if(tempVolume < 0) {
 800a948:	68fb      	ldr	r3, [r7, #12]
 800a94a:	2b00      	cmp	r3, #0
 800a94c:	da01      	bge.n	800a952 <_ZN8MainView18set_volume_encoderEv+0x2a>
		tempVolume = 0;
 800a94e:	2300      	movs	r3, #0
 800a950:	60fb      	str	r3, [r7, #12]
	}
	state.volume = tempVolume;
 800a952:	4a16      	ldr	r2, [pc, #88]	@ (800a9ac <_ZN8MainView18set_volume_encoderEv+0x84>)
 800a954:	68fb      	ldr	r3, [r7, #12]
 800a956:	6013      	str	r3, [r2, #0]

	// update IPC voice volume, normalized 0.0f to 1.0f
	IPCSetVoiceVolumeNormalized( (float)state.volume/100.0f );
 800a958:	4b14      	ldr	r3, [pc, #80]	@ (800a9ac <_ZN8MainView18set_volume_encoderEv+0x84>)
 800a95a:	681b      	ldr	r3, [r3, #0]
 800a95c:	ee07 3a90 	vmov	s15, r3
 800a960:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800a964:	eddf 6a13 	vldr	s13, [pc, #76]	@ 800a9b4 <_ZN8MainView18set_volume_encoderEv+0x8c>
 800a968:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 800a96c:	eeb0 0a47 	vmov.f32	s0, s14
 800a970:	f7f5 fd06 	bl	8000380 <IPCSetVoiceVolumeNormalized>

	//setup volume
	textProgress1.setValue(state.volume);
 800a974:	687b      	ldr	r3, [r7, #4]
 800a976:	f503 7315 	add.w	r3, r3, #596	@ 0x254
 800a97a:	4a0c      	ldr	r2, [pc, #48]	@ (800a9ac <_ZN8MainView18set_volume_encoderEv+0x84>)
 800a97c:	6812      	ldr	r2, [r2, #0]
 800a97e:	4611      	mov	r1, r2
 800a980:	4618      	mov	r0, r3
 800a982:	f00c fe77 	bl	8017674 <_ZN8touchgfx12TextProgress8setValueEi>
	Volume_Slider.setValue(state.volume);
 800a986:	687b      	ldr	r3, [r7, #4]
 800a988:	f503 737e 	add.w	r3, r3, #1016	@ 0x3f8
 800a98c:	4a07      	ldr	r2, [pc, #28]	@ (800a9ac <_ZN8MainView18set_volume_encoderEv+0x84>)
 800a98e:	6812      	ldr	r2, [r2, #0]
 800a990:	4611      	mov	r1, r2
 800a992:	4618      	mov	r0, r3
 800a994:	f00d fb85 	bl	80180a2 <_ZN8touchgfx6Slider8setValueEi>
	Volume_Slider.invalidate();
 800a998:	687b      	ldr	r3, [r7, #4]
 800a99a:	f503 737e 	add.w	r3, r3, #1016	@ 0x3f8
 800a99e:	4618      	mov	r0, r3
 800a9a0:	f011 ffac 	bl	801c8fc <_ZNK8touchgfx8Drawable10invalidateEv>

}
 800a9a4:	bf00      	nop
 800a9a6:	3710      	adds	r7, #16
 800a9a8:	46bd      	mov	sp, r7
 800a9aa:	bd80      	pop	{r7, pc}
 800a9ac:	2400000c 	.word	0x2400000c
 800a9b0:	24001e84 	.word	0x24001e84
 800a9b4:	42c80000 	.word	0x42c80000

0800a9b8 <_ZN8MainView12toggle_voiceEv>:

/*
 * Virtual function called when either toggle button is pressed
 */
void MainView::toggle_voice() {
 800a9b8:	b580      	push	{r7, lr}
 800a9ba:	b082      	sub	sp, #8
 800a9bc:	af00      	add	r7, sp, #0
 800a9be:	6078      	str	r0, [r7, #4]
	//Toggle voiceToggle variable
	state.voiceToggle = !state.voiceToggle;
 800a9c0:	4b37      	ldr	r3, [pc, #220]	@ (800aaa0 <_ZN8MainView12toggle_voiceEv+0xe8>)
 800a9c2:	791b      	ldrb	r3, [r3, #4]
 800a9c4:	f083 0301 	eor.w	r3, r3, #1
 800a9c8:	b2da      	uxtb	r2, r3
 800a9ca:	4b35      	ldr	r3, [pc, #212]	@ (800aaa0 <_ZN8MainView12toggle_voiceEv+0xe8>)
 800a9cc:	711a      	strb	r2, [r3, #4]

	// update IPC, mute state is !voiceToggle
	IPCSetVoiceMuteState( (boolean_t)!state.voiceToggle );
 800a9ce:	4b34      	ldr	r3, [pc, #208]	@ (800aaa0 <_ZN8MainView12toggle_voiceEv+0xe8>)
 800a9d0:	791b      	ldrb	r3, [r3, #4]
 800a9d2:	f083 0301 	eor.w	r3, r3, #1
 800a9d6:	b2db      	uxtb	r3, r3
 800a9d8:	4618      	mov	r0, r3
 800a9da:	f7f5 fce1 	bl	80003a0 <IPCSetVoiceMuteState>

	//Update GUI accordingly
	if(state.voiceToggle) {
 800a9de:	4b30      	ldr	r3, [pc, #192]	@ (800aaa0 <_ZN8MainView12toggle_voiceEv+0xe8>)
 800a9e0:	791b      	ldrb	r3, [r3, #4]
 800a9e2:	2b00      	cmp	r3, #0
 800a9e4:	d01a      	beq.n	800aa1c <_ZN8MainView12toggle_voiceEv+0x64>
		VoiceCommMess_Text_On.setVisible(true);
 800a9e6:	687b      	ldr	r3, [r7, #4]
 800a9e8:	f203 737c 	addw	r3, r3, #1916	@ 0x77c
 800a9ec:	2101      	movs	r1, #1
 800a9ee:	4618      	mov	r0, r3
 800a9f0:	f7fc f825 	bl	8006a3e <_ZN8touchgfx8Drawable10setVisibleEb>
		VoiceCommMess_Text_Off.setVisible(false);
 800a9f4:	687b      	ldr	r3, [r7, #4]
 800a9f6:	f503 63f7 	add.w	r3, r3, #1976	@ 0x7b8
 800a9fa:	2100      	movs	r1, #0
 800a9fc:	4618      	mov	r0, r3
 800a9fe:	f7fc f81e 	bl	8006a3e <_ZN8touchgfx8Drawable10setVisibleEb>

		VoiceCommMess_Text_On.invalidate();
 800aa02:	687b      	ldr	r3, [r7, #4]
 800aa04:	f203 737c 	addw	r3, r3, #1916	@ 0x77c
 800aa08:	4618      	mov	r0, r3
 800aa0a:	f011 ff77 	bl	801c8fc <_ZNK8touchgfx8Drawable10invalidateEv>
		VoiceCommMess_Text_Off.invalidate();
 800aa0e:	687b      	ldr	r3, [r7, #4]
 800aa10:	f503 63f7 	add.w	r3, r3, #1976	@ 0x7b8
 800aa14:	4618      	mov	r0, r3
 800aa16:	f011 ff71 	bl	801c8fc <_ZNK8touchgfx8Drawable10invalidateEv>
 800aa1a:	e019      	b.n	800aa50 <_ZN8MainView12toggle_voiceEv+0x98>

	} else {
		VoiceCommMess_Text_On.setVisible(false);
 800aa1c:	687b      	ldr	r3, [r7, #4]
 800aa1e:	f203 737c 	addw	r3, r3, #1916	@ 0x77c
 800aa22:	2100      	movs	r1, #0
 800aa24:	4618      	mov	r0, r3
 800aa26:	f7fc f80a 	bl	8006a3e <_ZN8touchgfx8Drawable10setVisibleEb>
		VoiceCommMess_Text_Off.setVisible(true);
 800aa2a:	687b      	ldr	r3, [r7, #4]
 800aa2c:	f503 63f7 	add.w	r3, r3, #1976	@ 0x7b8
 800aa30:	2101      	movs	r1, #1
 800aa32:	4618      	mov	r0, r3
 800aa34:	f7fc f803 	bl	8006a3e <_ZN8touchgfx8Drawable10setVisibleEb>

		VoiceCommMess_Text_On.invalidate();
 800aa38:	687b      	ldr	r3, [r7, #4]
 800aa3a:	f203 737c 	addw	r3, r3, #1916	@ 0x77c
 800aa3e:	4618      	mov	r0, r3
 800aa40:	f011 ff5c 	bl	801c8fc <_ZNK8touchgfx8Drawable10invalidateEv>
		VoiceCommMess_Text_Off.invalidate();
 800aa44:	687b      	ldr	r3, [r7, #4]
 800aa46:	f503 63f7 	add.w	r3, r3, #1976	@ 0x7b8
 800aa4a:	4618      	mov	r0, r3
 800aa4c:	f011 ff56 	bl	801c8fc <_ZNK8touchgfx8Drawable10invalidateEv>
	}

	if(Voice_Toggle_Button.getState() == state.voiceToggle) {
 800aa50:	687b      	ldr	r3, [r7, #4]
 800aa52:	f203 43f4 	addw	r3, r3, #1268	@ 0x4f4
 800aa56:	4618      	mov	r0, r3
 800aa58:	f7ff fe1e 	bl	800a698 <_ZNK8touchgfx12ToggleButton8getStateEv>
 800aa5c:	4603      	mov	r3, r0
 800aa5e:	461a      	mov	r2, r3
 800aa60:	4b0f      	ldr	r3, [pc, #60]	@ (800aaa0 <_ZN8MainView12toggle_voiceEv+0xe8>)
 800aa62:	791b      	ldrb	r3, [r3, #4]
 800aa64:	429a      	cmp	r2, r3
 800aa66:	bf0c      	ite	eq
 800aa68:	2301      	moveq	r3, #1
 800aa6a:	2300      	movne	r3, #0
 800aa6c:	b2db      	uxtb	r3, r3
 800aa6e:	2b00      	cmp	r3, #0
 800aa70:	d011      	beq.n	800aa96 <_ZN8MainView12toggle_voiceEv+0xde>
		Voice_Toggle_Button.forceState(!state.voiceToggle);
 800aa72:	687b      	ldr	r3, [r7, #4]
 800aa74:	f203 42f4 	addw	r2, r3, #1268	@ 0x4f4
 800aa78:	4b09      	ldr	r3, [pc, #36]	@ (800aaa0 <_ZN8MainView12toggle_voiceEv+0xe8>)
 800aa7a:	791b      	ldrb	r3, [r3, #4]
 800aa7c:	f083 0301 	eor.w	r3, r3, #1
 800aa80:	b2db      	uxtb	r3, r3
 800aa82:	4619      	mov	r1, r3
 800aa84:	4610      	mov	r0, r2
 800aa86:	f00e fde1 	bl	801964c <_ZN8touchgfx12ToggleButton10forceStateEb>
		Voice_Toggle_Button.invalidate();
 800aa8a:	687b      	ldr	r3, [r7, #4]
 800aa8c:	f203 43f4 	addw	r3, r3, #1268	@ 0x4f4
 800aa90:	4618      	mov	r0, r3
 800aa92:	f011 ff33 	bl	801c8fc <_ZNK8touchgfx8Drawable10invalidateEv>
	}
}
 800aa96:	bf00      	nop
 800aa98:	3708      	adds	r7, #8
 800aa9a:	46bd      	mov	sp, r7
 800aa9c:	bd80      	pop	{r7, pc}
 800aa9e:	bf00      	nop
 800aaa0:	2400000c 	.word	0x2400000c

0800aaa4 <_ZN8MainView20update_anomaly_alertEv>:

void MainView::update_anomaly_alert() {
 800aaa4:	b580      	push	{r7, lr}
 800aaa6:	b082      	sub	sp, #8
 800aaa8:	af00      	add	r7, sp, #0
 800aaaa:	6078      	str	r0, [r7, #4]
  // a direct cast to bool doesnt work here, need a conditional
	state.anomalyDetected = (IPCGetAnomalyDetectState( ) != 0 ? true : false);
 800aaac:	f7f5 fc88 	bl	80003c0 <IPCGetAnomalyDetectState>
 800aab0:	4603      	mov	r3, r0
 800aab2:	2b00      	cmp	r3, #0
 800aab4:	bf14      	ite	ne
 800aab6:	2301      	movne	r3, #1
 800aab8:	2300      	moveq	r3, #0
 800aaba:	b2da      	uxtb	r2, r3
 800aabc:	4b40      	ldr	r3, [pc, #256]	@ (800abc0 <_ZN8MainView20update_anomaly_alertEv+0x11c>)
 800aabe:	715a      	strb	r2, [r3, #5]
	state.alert = state.anomalyDetected;
 800aac0:	4b3f      	ldr	r3, [pc, #252]	@ (800abc0 <_ZN8MainView20update_anomaly_alertEv+0x11c>)
 800aac2:	795b      	ldrb	r3, [r3, #5]
 800aac4:	b2da      	uxtb	r2, r3
 800aac6:	4b3e      	ldr	r3, [pc, #248]	@ (800abc0 <_ZN8MainView20update_anomaly_alertEv+0x11c>)
 800aac8:	719a      	strb	r2, [r3, #6]

	//Set alert message
	AnomalyWarning_Textbox_1_1.setVisible(state.anomalyDetected);
 800aaca:	687b      	ldr	r3, [r7, #4]
 800aacc:	f203 73f4 	addw	r3, r3, #2036	@ 0x7f4
 800aad0:	4a3b      	ldr	r2, [pc, #236]	@ (800abc0 <_ZN8MainView20update_anomaly_alertEv+0x11c>)
 800aad2:	7952      	ldrb	r2, [r2, #5]
 800aad4:	b2d2      	uxtb	r2, r2
 800aad6:	4611      	mov	r1, r2
 800aad8:	4618      	mov	r0, r3
 800aada:	f7fb ffb0 	bl	8006a3e <_ZN8touchgfx8Drawable10setVisibleEb>
	AnomalyWarning_Textbox_1_1.invalidate();
 800aade:	687b      	ldr	r3, [r7, #4]
 800aae0:	f203 73f4 	addw	r3, r3, #2036	@ 0x7f4
 800aae4:	4618      	mov	r0, r3
 800aae6:	f011 ff09 	bl	801c8fc <_ZNK8touchgfx8Drawable10invalidateEv>

	//Set text of alert message
	MessageBoard_Message_1.setVisible(state.alert);
 800aaea:	687b      	ldr	r3, [r7, #4]
 800aaec:	f603 0388 	addw	r3, r3, #2184	@ 0x888
 800aaf0:	4a33      	ldr	r2, [pc, #204]	@ (800abc0 <_ZN8MainView20update_anomaly_alertEv+0x11c>)
 800aaf2:	7992      	ldrb	r2, [r2, #6]
 800aaf4:	4611      	mov	r1, r2
 800aaf6:	4618      	mov	r0, r3
 800aaf8:	f7fb ffa1 	bl	8006a3e <_ZN8touchgfx8Drawable10setVisibleEb>
	MessageBoard_Message_1.invalidate();
 800aafc:	687b      	ldr	r3, [r7, #4]
 800aafe:	f603 0388 	addw	r3, r3, #2184	@ 0x888
 800ab02:	4618      	mov	r0, r3
 800ab04:	f011 fefa 	bl	801c8fc <_ZNK8touchgfx8Drawable10invalidateEv>
	MessageBoard_Message_Muted.setVisible(!state.alert);
 800ab08:	687b      	ldr	r3, [r7, #4]
 800ab0a:	f603 02c4 	addw	r2, r3, #2244	@ 0x8c4
 800ab0e:	4b2c      	ldr	r3, [pc, #176]	@ (800abc0 <_ZN8MainView20update_anomaly_alertEv+0x11c>)
 800ab10:	799b      	ldrb	r3, [r3, #6]
 800ab12:	f083 0301 	eor.w	r3, r3, #1
 800ab16:	b2db      	uxtb	r3, r3
 800ab18:	4619      	mov	r1, r3
 800ab1a:	4610      	mov	r0, r2
 800ab1c:	f7fb ff8f 	bl	8006a3e <_ZN8touchgfx8Drawable10setVisibleEb>
	MessageBoard_Message_Muted.invalidate();
 800ab20:	687b      	ldr	r3, [r7, #4]
 800ab22:	f603 03c4 	addw	r3, r3, #2244	@ 0x8c4
 800ab26:	4618      	mov	r0, r3
 800ab28:	f011 fee8 	bl	801c8fc <_ZNK8touchgfx8Drawable10invalidateEv>

	//Set buttons
	Localize_Button.setVisible(state.anomalyDetected);
 800ab2c:	687b      	ldr	r3, [r7, #4]
 800ab2e:	f603 2328 	addw	r3, r3, #2600	@ 0xa28
 800ab32:	4a23      	ldr	r2, [pc, #140]	@ (800abc0 <_ZN8MainView20update_anomaly_alertEv+0x11c>)
 800ab34:	7952      	ldrb	r2, [r2, #5]
 800ab36:	b2d2      	uxtb	r2, r2
 800ab38:	4611      	mov	r1, r2
 800ab3a:	4618      	mov	r0, r3
 800ab3c:	f7fb ff7f 	bl	8006a3e <_ZN8touchgfx8Drawable10setVisibleEb>
	Localize_Button.invalidate();
 800ab40:	687b      	ldr	r3, [r7, #4]
 800ab42:	f603 2328 	addw	r3, r3, #2600	@ 0xa28
 800ab46:	4618      	mov	r0, r3
 800ab48:	f011 fed8 	bl	801c8fc <_ZNK8touchgfx8Drawable10invalidateEv>
	Alert_Mute_Button.setVisible(state.anomalyDetected);
 800ab4c:	687b      	ldr	r3, [r7, #4]
 800ab4e:	f603 13f4 	addw	r3, r3, #2548	@ 0x9f4
 800ab52:	4a1b      	ldr	r2, [pc, #108]	@ (800abc0 <_ZN8MainView20update_anomaly_alertEv+0x11c>)
 800ab54:	7952      	ldrb	r2, [r2, #5]
 800ab56:	b2d2      	uxtb	r2, r2
 800ab58:	4611      	mov	r1, r2
 800ab5a:	4618      	mov	r0, r3
 800ab5c:	f7fb ff6f 	bl	8006a3e <_ZN8touchgfx8Drawable10setVisibleEb>
	Alert_Mute_Button.invalidate();
 800ab60:	687b      	ldr	r3, [r7, #4]
 800ab62:	f603 13f4 	addw	r3, r3, #2548	@ 0x9f4
 800ab66:	4618      	mov	r0, r3
 800ab68:	f011 fec8 	bl	801c8fc <_ZNK8touchgfx8Drawable10invalidateEv>

	//Set disabled button images
	Disabled_Button1.setVisible(!state.anomalyDetected);
 800ab6c:	687b      	ldr	r3, [r7, #4]
 800ab6e:	f603 12c8 	addw	r2, r3, #2504	@ 0x9c8
 800ab72:	4b13      	ldr	r3, [pc, #76]	@ (800abc0 <_ZN8MainView20update_anomaly_alertEv+0x11c>)
 800ab74:	795b      	ldrb	r3, [r3, #5]
 800ab76:	b2db      	uxtb	r3, r3
 800ab78:	f083 0301 	eor.w	r3, r3, #1
 800ab7c:	b2db      	uxtb	r3, r3
 800ab7e:	4619      	mov	r1, r3
 800ab80:	4610      	mov	r0, r2
 800ab82:	f7fb ff5c 	bl	8006a3e <_ZN8touchgfx8Drawable10setVisibleEb>
	Disabled_Button1.invalidate();
 800ab86:	687b      	ldr	r3, [r7, #4]
 800ab88:	f603 13c8 	addw	r3, r3, #2504	@ 0x9c8
 800ab8c:	4618      	mov	r0, r3
 800ab8e:	f011 feb5 	bl	801c8fc <_ZNK8touchgfx8Drawable10invalidateEv>
	Disabled_Button2.setVisible(!state.anomalyDetected);
 800ab92:	687b      	ldr	r3, [r7, #4]
 800ab94:	f603 129c 	addw	r2, r3, #2460	@ 0x99c
 800ab98:	4b09      	ldr	r3, [pc, #36]	@ (800abc0 <_ZN8MainView20update_anomaly_alertEv+0x11c>)
 800ab9a:	795b      	ldrb	r3, [r3, #5]
 800ab9c:	b2db      	uxtb	r3, r3
 800ab9e:	f083 0301 	eor.w	r3, r3, #1
 800aba2:	b2db      	uxtb	r3, r3
 800aba4:	4619      	mov	r1, r3
 800aba6:	4610      	mov	r0, r2
 800aba8:	f7fb ff49 	bl	8006a3e <_ZN8touchgfx8Drawable10setVisibleEb>
	Disabled_Button2.invalidate();
 800abac:	687b      	ldr	r3, [r7, #4]
 800abae:	f603 139c 	addw	r3, r3, #2460	@ 0x99c
 800abb2:	4618      	mov	r0, r3
 800abb4:	f011 fea2 	bl	801c8fc <_ZNK8touchgfx8Drawable10invalidateEv>
}
 800abb8:	bf00      	nop
 800abba:	3708      	adds	r7, #8
 800abbc:	46bd      	mov	sp, r7
 800abbe:	bd80      	pop	{r7, pc}
 800abc0:	2400000c 	.word	0x2400000c

0800abc4 <_ZN8MainView18alert_mute_pressedEv>:

void MainView::alert_mute_pressed() {
 800abc4:	b580      	push	{r7, lr}
 800abc6:	b082      	sub	sp, #8
 800abc8:	af00      	add	r7, sp, #0
 800abca:	6078      	str	r0, [r7, #4]
  // toggle IPC mute, doesnt matter if alarm is not active, output audio sets it active on new event
  IPCSetAlarmMuteState( (boolean_t)!IPCGetAlarmMuteState( ) );
 800abcc:	f7f5 fc04 	bl	80003d8 <IPCGetAlarmMuteState>
 800abd0:	4603      	mov	r3, r0
 800abd2:	2b00      	cmp	r3, #0
 800abd4:	bf0c      	ite	eq
 800abd6:	2301      	moveq	r3, #1
 800abd8:	2300      	movne	r3, #0
 800abda:	b2db      	uxtb	r3, r3
 800abdc:	4618      	mov	r0, r3
 800abde:	f7f5 fc07 	bl	80003f0 <IPCSetAlarmMuteState>

	if(state.alert) {
 800abe2:	4b16      	ldr	r3, [pc, #88]	@ (800ac3c <_ZN8MainView18alert_mute_pressedEv+0x78>)
 800abe4:	799b      	ldrb	r3, [r3, #6]
 800abe6:	2b00      	cmp	r3, #0
 800abe8:	d023      	beq.n	800ac32 <_ZN8MainView18alert_mute_pressedEv+0x6e>
		state.alert = false;
 800abea:	4b14      	ldr	r3, [pc, #80]	@ (800ac3c <_ZN8MainView18alert_mute_pressedEv+0x78>)
 800abec:	2200      	movs	r2, #0
 800abee:	719a      	strb	r2, [r3, #6]

		MessageBoard_Message_1.setVisible(state.alert);
 800abf0:	687b      	ldr	r3, [r7, #4]
 800abf2:	f603 0388 	addw	r3, r3, #2184	@ 0x888
 800abf6:	4a11      	ldr	r2, [pc, #68]	@ (800ac3c <_ZN8MainView18alert_mute_pressedEv+0x78>)
 800abf8:	7992      	ldrb	r2, [r2, #6]
 800abfa:	4611      	mov	r1, r2
 800abfc:	4618      	mov	r0, r3
 800abfe:	f7fb ff1e 	bl	8006a3e <_ZN8touchgfx8Drawable10setVisibleEb>
		MessageBoard_Message_1.invalidate();
 800ac02:	687b      	ldr	r3, [r7, #4]
 800ac04:	f603 0388 	addw	r3, r3, #2184	@ 0x888
 800ac08:	4618      	mov	r0, r3
 800ac0a:	f011 fe77 	bl	801c8fc <_ZNK8touchgfx8Drawable10invalidateEv>
		MessageBoard_Message_Muted.setVisible(!state.alert);
 800ac0e:	687b      	ldr	r3, [r7, #4]
 800ac10:	f603 02c4 	addw	r2, r3, #2244	@ 0x8c4
 800ac14:	4b09      	ldr	r3, [pc, #36]	@ (800ac3c <_ZN8MainView18alert_mute_pressedEv+0x78>)
 800ac16:	799b      	ldrb	r3, [r3, #6]
 800ac18:	f083 0301 	eor.w	r3, r3, #1
 800ac1c:	b2db      	uxtb	r3, r3
 800ac1e:	4619      	mov	r1, r3
 800ac20:	4610      	mov	r0, r2
 800ac22:	f7fb ff0c 	bl	8006a3e <_ZN8touchgfx8Drawable10setVisibleEb>
		MessageBoard_Message_Muted.invalidate();
 800ac26:	687b      	ldr	r3, [r7, #4]
 800ac28:	f603 03c4 	addw	r3, r3, #2244	@ 0x8c4
 800ac2c:	4618      	mov	r0, r3
 800ac2e:	f011 fe65 	bl	801c8fc <_ZNK8touchgfx8Drawable10invalidateEv>
	}
}
 800ac32:	bf00      	nop
 800ac34:	3708      	adds	r7, #8
 800ac36:	46bd      	mov	sp, r7
 800ac38:	bd80      	pop	{r7, pc}
 800ac3a:	bf00      	nop
 800ac3c:	2400000c 	.word	0x2400000c

0800ac40 <_ZN5ModelC1Ev>:
#include "ipc_interface.h"

//#include "main.h"
boolean_t led1 = TRUE;
extern int currentDelta;
Model::Model() : modelListener(0)
 800ac40:	b480      	push	{r7}
 800ac42:	b083      	sub	sp, #12
 800ac44:	af00      	add	r7, sp, #0
 800ac46:	6078      	str	r0, [r7, #4]
 800ac48:	687b      	ldr	r3, [r7, #4]
 800ac4a:	2200      	movs	r2, #0
 800ac4c:	601a      	str	r2, [r3, #0]
{

}
 800ac4e:	687b      	ldr	r3, [r7, #4]
 800ac50:	4618      	mov	r0, r3
 800ac52:	370c      	adds	r7, #12
 800ac54:	46bd      	mov	sp, r7
 800ac56:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac5a:	4770      	bx	lr

0800ac5c <_ZN5Model4tickEv>:

int8_t predicted_region_previous, predicted_region_current = 0;

uint16_t encoderCount = 0;
void Model::tick()
{
 800ac5c:	b580      	push	{r7, lr}
 800ac5e:	b084      	sub	sp, #16
 800ac60:	af00      	add	r7, sp, #0
 800ac62:	6078      	str	r0, [r7, #4]
  // update anomaly detect state from IPC
  anomaly_detect_state_previous = anomaly_detect_state_current;
 800ac64:	4b61      	ldr	r3, [pc, #388]	@ (800adec <_ZN5Model4tickEv+0x190>)
 800ac66:	781a      	ldrb	r2, [r3, #0]
 800ac68:	4b61      	ldr	r3, [pc, #388]	@ (800adf0 <_ZN5Model4tickEv+0x194>)
 800ac6a:	701a      	strb	r2, [r3, #0]
  // a direct cast to bool doesnt work here, need a conditional
  anomaly_detect_state_current = ((int)IPCGetAnomalyDetectState( ) != 0 ? true : false);
 800ac6c:	f7f5 fba8 	bl	80003c0 <IPCGetAnomalyDetectState>
 800ac70:	4603      	mov	r3, r0
 800ac72:	2b00      	cmp	r3, #0
 800ac74:	bf14      	ite	ne
 800ac76:	2301      	movne	r3, #1
 800ac78:	2300      	moveq	r3, #0
 800ac7a:	b2da      	uxtb	r2, r3
 800ac7c:	4b5b      	ldr	r3, [pc, #364]	@ (800adec <_ZN5Model4tickEv+0x190>)
 800ac7e:	701a      	strb	r2, [r3, #0]

  // only update GUI on change of state
  if ( anomaly_detect_state_current != anomaly_detect_state_previous )
 800ac80:	4b5a      	ldr	r3, [pc, #360]	@ (800adec <_ZN5Model4tickEv+0x190>)
 800ac82:	781a      	ldrb	r2, [r3, #0]
 800ac84:	4b5a      	ldr	r3, [pc, #360]	@ (800adf0 <_ZN5Model4tickEv+0x194>)
 800ac86:	781b      	ldrb	r3, [r3, #0]
 800ac88:	429a      	cmp	r2, r3
 800ac8a:	d009      	beq.n	800aca0 <_ZN5Model4tickEv+0x44>
  {
    static_cast<FrontendApplication*>(Application::getInstance())->handleKeyEvent(87);
 800ac8c:	f010 fe6c 	bl	801b968 <_ZN8touchgfx11Application11getInstanceEv>
 800ac90:	4603      	mov	r3, r0
 800ac92:	461a      	mov	r2, r3
 800ac94:	6813      	ldr	r3, [r2, #0]
 800ac96:	330c      	adds	r3, #12
 800ac98:	681b      	ldr	r3, [r3, #0]
 800ac9a:	2157      	movs	r1, #87	@ 0x57
 800ac9c:	4610      	mov	r0, r2
 800ac9e:	4798      	blx	r3
  }

  // update anomaly detect state from IPC
  predicted_region_previous = predicted_region_current;
 800aca0:	4b54      	ldr	r3, [pc, #336]	@ (800adf4 <_ZN5Model4tickEv+0x198>)
 800aca2:	f993 2000 	ldrsb.w	r2, [r3]
 800aca6:	4b54      	ldr	r3, [pc, #336]	@ (800adf8 <_ZN5Model4tickEv+0x19c>)
 800aca8:	701a      	strb	r2, [r3, #0]
  // a direct cast to bool doesnt work here, need a conditional
  predicted_region_current = (IPCGetPredictedRegion());
 800acaa:	f7f5 fbb1 	bl	8000410 <IPCGetPredictedRegion>
 800acae:	4603      	mov	r3, r0
 800acb0:	461a      	mov	r2, r3
 800acb2:	4b50      	ldr	r3, [pc, #320]	@ (800adf4 <_ZN5Model4tickEv+0x198>)
 800acb4:	701a      	strb	r2, [r3, #0]

  //if(predicted_region_current != predicted_region_previous)
  if(predicted_region_current != 100)
 800acb6:	4b4f      	ldr	r3, [pc, #316]	@ (800adf4 <_ZN5Model4tickEv+0x198>)
 800acb8:	f993 3000 	ldrsb.w	r3, [r3]
 800acbc:	2b64      	cmp	r3, #100	@ 0x64
 800acbe:	d009      	beq.n	800acd4 <_ZN5Model4tickEv+0x78>
  {
    static_cast<FrontendApplication*>(Application::getInstance())->handleKeyEvent(82);
 800acc0:	f010 fe52 	bl	801b968 <_ZN8touchgfx11Application11getInstanceEv>
 800acc4:	4603      	mov	r3, r0
 800acc6:	461a      	mov	r2, r3
 800acc8:	6813      	ldr	r3, [r2, #0]
 800acca:	330c      	adds	r3, #12
 800accc:	681b      	ldr	r3, [r3, #0]
 800acce:	2152      	movs	r1, #82	@ 0x52
 800acd0:	4610      	mov	r0, r2
 800acd2:	4798      	blx	r3
  // Actuate and toggle alarm LEDS
  // * Originally went for series LEDs with center tap by driving output, but they remain lit even without output active,
  //     so added another output to conditionally provide 3v3 to the series
  // TODO - Might as well use one output for each LED, instead of the current kind of fixed arrangement
  // TODO - This level of hardware access should NOT be here, but it's 2 days to FDR and I'm long out of patience
  if ( anomaly_detect_state_current )
 800acd4:	4b45      	ldr	r3, [pc, #276]	@ (800adec <_ZN5Model4tickEv+0x190>)
 800acd6:	781b      	ldrb	r3, [r3, #0]
 800acd8:	2b00      	cmp	r3, #0
 800acda:	d028      	beq.n	800ad2e <_ZN5Model4tickEv+0xd2>
  {
    // enable the driving output
    GPIOH->BSRR |= 1 << 15;
 800acdc:	4b47      	ldr	r3, [pc, #284]	@ (800adfc <_ZN5Model4tickEv+0x1a0>)
 800acde:	699b      	ldr	r3, [r3, #24]
 800ace0:	4a46      	ldr	r2, [pc, #280]	@ (800adfc <_ZN5Model4tickEv+0x1a0>)
 800ace2:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800ace6:	6193      	str	r3, [r2, #24]

    // half second on, half second off for each
    // wiring so that one or the other is on
    if ( HAL_GetTick( ) % 1000 < 500 )
 800ace8:	f006 f992 	bl	8011010 <HAL_GetTick>
 800acec:	4602      	mov	r2, r0
 800acee:	4b44      	ldr	r3, [pc, #272]	@ (800ae00 <_ZN5Model4tickEv+0x1a4>)
 800acf0:	fba3 1302 	umull	r1, r3, r3, r2
 800acf4:	099b      	lsrs	r3, r3, #6
 800acf6:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 800acfa:	fb01 f303 	mul.w	r3, r1, r3
 800acfe:	1ad3      	subs	r3, r2, r3
 800ad00:	f240 12f3 	movw	r2, #499	@ 0x1f3
 800ad04:	4293      	cmp	r3, r2
 800ad06:	bf94      	ite	ls
 800ad08:	2301      	movls	r3, #1
 800ad0a:	2300      	movhi	r3, #0
 800ad0c:	b2db      	uxtb	r3, r3
 800ad0e:	2b00      	cmp	r3, #0
 800ad10:	d006      	beq.n	800ad20 <_ZN5Model4tickEv+0xc4>
    {
      GPIOE->BSRR |= 1 << 3;
 800ad12:	4b3c      	ldr	r3, [pc, #240]	@ (800ae04 <_ZN5Model4tickEv+0x1a8>)
 800ad14:	699b      	ldr	r3, [r3, #24]
 800ad16:	4a3b      	ldr	r2, [pc, #236]	@ (800ae04 <_ZN5Model4tickEv+0x1a8>)
 800ad18:	f043 0308 	orr.w	r3, r3, #8
 800ad1c:	6193      	str	r3, [r2, #24]
 800ad1e:	e012      	b.n	800ad46 <_ZN5Model4tickEv+0xea>
    }
    else
    {
      GPIOE->BSRR |= 1 << (3 + 16);
 800ad20:	4b38      	ldr	r3, [pc, #224]	@ (800ae04 <_ZN5Model4tickEv+0x1a8>)
 800ad22:	699b      	ldr	r3, [r3, #24]
 800ad24:	4a37      	ldr	r2, [pc, #220]	@ (800ae04 <_ZN5Model4tickEv+0x1a8>)
 800ad26:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 800ad2a:	6193      	str	r3, [r2, #24]
 800ad2c:	e00b      	b.n	800ad46 <_ZN5Model4tickEv+0xea>
    }
  }
  else
  {
    // disable outputs driving LEDs
    GPIOH->BSRR |= 1 << (15 + 16);
 800ad2e:	4b33      	ldr	r3, [pc, #204]	@ (800adfc <_ZN5Model4tickEv+0x1a0>)
 800ad30:	699b      	ldr	r3, [r3, #24]
 800ad32:	4a32      	ldr	r2, [pc, #200]	@ (800adfc <_ZN5Model4tickEv+0x1a0>)
 800ad34:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 800ad38:	6193      	str	r3, [r2, #24]
    GPIOE->BSRR |= 1 << (3 + 16);
 800ad3a:	4b32      	ldr	r3, [pc, #200]	@ (800ae04 <_ZN5Model4tickEv+0x1a8>)
 800ad3c:	699b      	ldr	r3, [r3, #24]
 800ad3e:	4a31      	ldr	r2, [pc, #196]	@ (800ae04 <_ZN5Model4tickEv+0x1a8>)
 800ad40:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 800ad44:	6193      	str	r3, [r2, #24]
  }

  // voice mute
	bool currentSWStatus = HAL_GPIO_ReadPin(GPIOG, GPIO_PIN_3);
 800ad46:	2108      	movs	r1, #8
 800ad48:	482f      	ldr	r0, [pc, #188]	@ (800ae08 <_ZN5Model4tickEv+0x1ac>)
 800ad4a:	f007 f827 	bl	8011d9c <HAL_GPIO_ReadPin>
 800ad4e:	4603      	mov	r3, r0
 800ad50:	2b00      	cmp	r3, #0
 800ad52:	bf14      	ite	ne
 800ad54:	2301      	movne	r3, #1
 800ad56:	2300      	moveq	r3, #0
 800ad58:	73fb      	strb	r3, [r7, #15]
    if(currentSWStatus != swStatus){
 800ad5a:	4b2c      	ldr	r3, [pc, #176]	@ (800ae0c <_ZN5Model4tickEv+0x1b0>)
 800ad5c:	781b      	ldrb	r3, [r3, #0]
 800ad5e:	7bfa      	ldrb	r2, [r7, #15]
 800ad60:	429a      	cmp	r2, r3
 800ad62:	d017      	beq.n	800ad94 <_ZN5Model4tickEv+0x138>
	   swStatus = currentSWStatus;
 800ad64:	4a29      	ldr	r2, [pc, #164]	@ (800ae0c <_ZN5Model4tickEv+0x1b0>)
 800ad66:	7bfb      	ldrb	r3, [r7, #15]
 800ad68:	7013      	strb	r3, [r2, #0]
	   if(swFilter) {
 800ad6a:	4b29      	ldr	r3, [pc, #164]	@ (800ae10 <_ZN5Model4tickEv+0x1b4>)
 800ad6c:	781b      	ldrb	r3, [r3, #0]
 800ad6e:	2b00      	cmp	r3, #0
 800ad70:	d009      	beq.n	800ad86 <_ZN5Model4tickEv+0x12a>
		   static_cast<FrontendApplication*>(Application::getInstance())->handleKeyEvent(89);
 800ad72:	f010 fdf9 	bl	801b968 <_ZN8touchgfx11Application11getInstanceEv>
 800ad76:	4603      	mov	r3, r0
 800ad78:	461a      	mov	r2, r3
 800ad7a:	6813      	ldr	r3, [r2, #0]
 800ad7c:	330c      	adds	r3, #12
 800ad7e:	681b      	ldr	r3, [r3, #0]
 800ad80:	2159      	movs	r1, #89	@ 0x59
 800ad82:	4610      	mov	r0, r2
 800ad84:	4798      	blx	r3
	   }
	   swFilter = !swFilter;
 800ad86:	4b22      	ldr	r3, [pc, #136]	@ (800ae10 <_ZN5Model4tickEv+0x1b4>)
 800ad88:	781b      	ldrb	r3, [r3, #0]
 800ad8a:	f083 0301 	eor.w	r3, r3, #1
 800ad8e:	b2da      	uxtb	r2, r3
 800ad90:	4b1f      	ldr	r3, [pc, #124]	@ (800ae10 <_ZN5Model4tickEv+0x1b4>)
 800ad92:	701a      	strb	r2, [r3, #0]
	}

  // alarm mute button
	bool currentMuteStatus = HAL_GPIO_ReadPin(GPIOK, GPIO_PIN_1);
 800ad94:	2102      	movs	r1, #2
 800ad96:	481f      	ldr	r0, [pc, #124]	@ (800ae14 <_ZN5Model4tickEv+0x1b8>)
 800ad98:	f007 f800 	bl	8011d9c <HAL_GPIO_ReadPin>
 800ad9c:	4603      	mov	r3, r0
 800ad9e:	2b00      	cmp	r3, #0
 800ada0:	bf14      	ite	ne
 800ada2:	2301      	movne	r3, #1
 800ada4:	2300      	moveq	r3, #0
 800ada6:	73bb      	strb	r3, [r7, #14]
    if(currentMuteStatus != muteStatus){
 800ada8:	4b1b      	ldr	r3, [pc, #108]	@ (800ae18 <_ZN5Model4tickEv+0x1bc>)
 800adaa:	781b      	ldrb	r3, [r3, #0]
 800adac:	7bba      	ldrb	r2, [r7, #14]
 800adae:	429a      	cmp	r2, r3
 800adb0:	d017      	beq.n	800ade2 <_ZN5Model4tickEv+0x186>
	   muteStatus = currentMuteStatus;
 800adb2:	4a19      	ldr	r2, [pc, #100]	@ (800ae18 <_ZN5Model4tickEv+0x1bc>)
 800adb4:	7bbb      	ldrb	r3, [r7, #14]
 800adb6:	7013      	strb	r3, [r2, #0]
	   if(muteFilter) {
 800adb8:	4b18      	ldr	r3, [pc, #96]	@ (800ae1c <_ZN5Model4tickEv+0x1c0>)
 800adba:	781b      	ldrb	r3, [r3, #0]
 800adbc:	2b00      	cmp	r3, #0
 800adbe:	d009      	beq.n	800add4 <_ZN5Model4tickEv+0x178>
		   static_cast<FrontendApplication*>(Application::getInstance())->handleKeyEvent(90);
 800adc0:	f010 fdd2 	bl	801b968 <_ZN8touchgfx11Application11getInstanceEv>
 800adc4:	4603      	mov	r3, r0
 800adc6:	461a      	mov	r2, r3
 800adc8:	6813      	ldr	r3, [r2, #0]
 800adca:	330c      	adds	r3, #12
 800adcc:	681b      	ldr	r3, [r3, #0]
 800adce:	215a      	movs	r1, #90	@ 0x5a
 800add0:	4610      	mov	r0, r2
 800add2:	4798      	blx	r3
	   }
	   muteFilter = !muteFilter;
 800add4:	4b11      	ldr	r3, [pc, #68]	@ (800ae1c <_ZN5Model4tickEv+0x1c0>)
 800add6:	781b      	ldrb	r3, [r3, #0]
 800add8:	f083 0301 	eor.w	r3, r3, #1
 800addc:	b2da      	uxtb	r2, r3
 800adde:	4b0f      	ldr	r3, [pc, #60]	@ (800ae1c <_ZN5Model4tickEv+0x1c0>)
 800ade0:	701a      	strb	r2, [r3, #0]
  //   encoderCount = TIM4->CNT;
  //   currentDelta = encoderDelta * 2;

  //   static_cast<FrontendApplication*>(Application::getInstance())->handleKeyEvent(88);
  // }
}
 800ade2:	bf00      	nop
 800ade4:	3710      	adds	r7, #16
 800ade6:	46bd      	mov	sp, r7
 800ade8:	bd80      	pop	{r7, pc}
 800adea:	bf00      	nop
 800adec:	24001e8d 	.word	0x24001e8d
 800adf0:	24001e8c 	.word	0x24001e8c
 800adf4:	24001e8f 	.word	0x24001e8f
 800adf8:	24001e8e 	.word	0x24001e8e
 800adfc:	58021c00 	.word	0x58021c00
 800ae00:	10624dd3 	.word	0x10624dd3
 800ae04:	58021000 	.word	0x58021000
 800ae08:	58021800 	.word	0x58021800
 800ae0c:	24001e88 	.word	0x24001e88
 800ae10:	24001e89 	.word	0x24001e89
 800ae14:	58022800 	.word	0x58022800
 800ae18:	24001e8a 	.word	0x24001e8a
 800ae1c:	24001e8b 	.word	0x24001e8b

0800ae20 <__NVIC_SetPriority>:
{
 800ae20:	b480      	push	{r7}
 800ae22:	b083      	sub	sp, #12
 800ae24:	af00      	add	r7, sp, #0
 800ae26:	4603      	mov	r3, r0
 800ae28:	6039      	str	r1, [r7, #0]
 800ae2a:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 800ae2c:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800ae30:	2b00      	cmp	r3, #0
 800ae32:	db0a      	blt.n	800ae4a <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800ae34:	683b      	ldr	r3, [r7, #0]
 800ae36:	b2da      	uxtb	r2, r3
 800ae38:	490c      	ldr	r1, [pc, #48]	@ (800ae6c <__NVIC_SetPriority+0x4c>)
 800ae3a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800ae3e:	0112      	lsls	r2, r2, #4
 800ae40:	b2d2      	uxtb	r2, r2
 800ae42:	440b      	add	r3, r1
 800ae44:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 800ae48:	e00a      	b.n	800ae60 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800ae4a:	683b      	ldr	r3, [r7, #0]
 800ae4c:	b2da      	uxtb	r2, r3
 800ae4e:	4908      	ldr	r1, [pc, #32]	@ (800ae70 <__NVIC_SetPriority+0x50>)
 800ae50:	88fb      	ldrh	r3, [r7, #6]
 800ae52:	f003 030f 	and.w	r3, r3, #15
 800ae56:	3b04      	subs	r3, #4
 800ae58:	0112      	lsls	r2, r2, #4
 800ae5a:	b2d2      	uxtb	r2, r2
 800ae5c:	440b      	add	r3, r1
 800ae5e:	761a      	strb	r2, [r3, #24]
}
 800ae60:	bf00      	nop
 800ae62:	370c      	adds	r7, #12
 800ae64:	46bd      	mov	sp, r7
 800ae66:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae6a:	4770      	bx	lr
 800ae6c:	e000e100 	.word	0xe000e100
 800ae70:	e000ed00 	.word	0xe000ed00

0800ae74 <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 800ae74:	b580      	push	{r7, lr}
 800ae76:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 800ae78:	4b05      	ldr	r3, [pc, #20]	@ (800ae90 <SysTick_Handler+0x1c>)
 800ae7a:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 800ae7c:	f002 ff0a 	bl	800dc94 <xTaskGetSchedulerState>
 800ae80:	4603      	mov	r3, r0
 800ae82:	2b01      	cmp	r3, #1
 800ae84:	d001      	beq.n	800ae8a <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 800ae86:	f000 ffef 	bl	800be68 <xPortSysTickHandler>
  }
}
 800ae8a:	bf00      	nop
 800ae8c:	bd80      	pop	{r7, pc}
 800ae8e:	bf00      	nop
 800ae90:	e000e010 	.word	0xe000e010

0800ae94 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 800ae94:	b580      	push	{r7, lr}
 800ae96:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 800ae98:	2100      	movs	r1, #0
 800ae9a:	f06f 0004 	mvn.w	r0, #4
 800ae9e:	f7ff ffbf 	bl	800ae20 <__NVIC_SetPriority>
#endif
}
 800aea2:	bf00      	nop
 800aea4:	bd80      	pop	{r7, pc}
	...

0800aea8 <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 800aea8:	b480      	push	{r7}
 800aeaa:	b083      	sub	sp, #12
 800aeac:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800aeae:	f3ef 8305 	mrs	r3, IPSR
 800aeb2:	603b      	str	r3, [r7, #0]
  return(result);
 800aeb4:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 800aeb6:	2b00      	cmp	r3, #0
 800aeb8:	d003      	beq.n	800aec2 <osKernelInitialize+0x1a>
    stat = osErrorISR;
 800aeba:	f06f 0305 	mvn.w	r3, #5
 800aebe:	607b      	str	r3, [r7, #4]
 800aec0:	e00c      	b.n	800aedc <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 800aec2:	4b0a      	ldr	r3, [pc, #40]	@ (800aeec <osKernelInitialize+0x44>)
 800aec4:	681b      	ldr	r3, [r3, #0]
 800aec6:	2b00      	cmp	r3, #0
 800aec8:	d105      	bne.n	800aed6 <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 800aeca:	4b08      	ldr	r3, [pc, #32]	@ (800aeec <osKernelInitialize+0x44>)
 800aecc:	2201      	movs	r2, #1
 800aece:	601a      	str	r2, [r3, #0]
      stat = osOK;
 800aed0:	2300      	movs	r3, #0
 800aed2:	607b      	str	r3, [r7, #4]
 800aed4:	e002      	b.n	800aedc <osKernelInitialize+0x34>
    } else {
      stat = osError;
 800aed6:	f04f 33ff 	mov.w	r3, #4294967295
 800aeda:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 800aedc:	687b      	ldr	r3, [r7, #4]
}
 800aede:	4618      	mov	r0, r3
 800aee0:	370c      	adds	r7, #12
 800aee2:	46bd      	mov	sp, r7
 800aee4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aee8:	4770      	bx	lr
 800aeea:	bf00      	nop
 800aeec:	24001e90 	.word	0x24001e90

0800aef0 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 800aef0:	b580      	push	{r7, lr}
 800aef2:	b082      	sub	sp, #8
 800aef4:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800aef6:	f3ef 8305 	mrs	r3, IPSR
 800aefa:	603b      	str	r3, [r7, #0]
  return(result);
 800aefc:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 800aefe:	2b00      	cmp	r3, #0
 800af00:	d003      	beq.n	800af0a <osKernelStart+0x1a>
    stat = osErrorISR;
 800af02:	f06f 0305 	mvn.w	r3, #5
 800af06:	607b      	str	r3, [r7, #4]
 800af08:	e010      	b.n	800af2c <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 800af0a:	4b0b      	ldr	r3, [pc, #44]	@ (800af38 <osKernelStart+0x48>)
 800af0c:	681b      	ldr	r3, [r3, #0]
 800af0e:	2b01      	cmp	r3, #1
 800af10:	d109      	bne.n	800af26 <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 800af12:	f7ff ffbf 	bl	800ae94 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 800af16:	4b08      	ldr	r3, [pc, #32]	@ (800af38 <osKernelStart+0x48>)
 800af18:	2202      	movs	r2, #2
 800af1a:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 800af1c:	f002 fa56 	bl	800d3cc <vTaskStartScheduler>
      stat = osOK;
 800af20:	2300      	movs	r3, #0
 800af22:	607b      	str	r3, [r7, #4]
 800af24:	e002      	b.n	800af2c <osKernelStart+0x3c>
    } else {
      stat = osError;
 800af26:	f04f 33ff 	mov.w	r3, #4294967295
 800af2a:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 800af2c:	687b      	ldr	r3, [r7, #4]
}
 800af2e:	4618      	mov	r0, r3
 800af30:	3708      	adds	r7, #8
 800af32:	46bd      	mov	sp, r7
 800af34:	bd80      	pop	{r7, pc}
 800af36:	bf00      	nop
 800af38:	24001e90 	.word	0x24001e90

0800af3c <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 800af3c:	b580      	push	{r7, lr}
 800af3e:	b08e      	sub	sp, #56	@ 0x38
 800af40:	af04      	add	r7, sp, #16
 800af42:	60f8      	str	r0, [r7, #12]
 800af44:	60b9      	str	r1, [r7, #8]
 800af46:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 800af48:	2300      	movs	r3, #0
 800af4a:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800af4c:	f3ef 8305 	mrs	r3, IPSR
 800af50:	617b      	str	r3, [r7, #20]
  return(result);
 800af52:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 800af54:	2b00      	cmp	r3, #0
 800af56:	d17e      	bne.n	800b056 <osThreadNew+0x11a>
 800af58:	68fb      	ldr	r3, [r7, #12]
 800af5a:	2b00      	cmp	r3, #0
 800af5c:	d07b      	beq.n	800b056 <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 800af5e:	2380      	movs	r3, #128	@ 0x80
 800af60:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 800af62:	2318      	movs	r3, #24
 800af64:	61fb      	str	r3, [r7, #28]

    name = NULL;
 800af66:	2300      	movs	r3, #0
 800af68:	627b      	str	r3, [r7, #36]	@ 0x24
    mem  = -1;
 800af6a:	f04f 33ff 	mov.w	r3, #4294967295
 800af6e:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 800af70:	687b      	ldr	r3, [r7, #4]
 800af72:	2b00      	cmp	r3, #0
 800af74:	d045      	beq.n	800b002 <osThreadNew+0xc6>
      if (attr->name != NULL) {
 800af76:	687b      	ldr	r3, [r7, #4]
 800af78:	681b      	ldr	r3, [r3, #0]
 800af7a:	2b00      	cmp	r3, #0
 800af7c:	d002      	beq.n	800af84 <osThreadNew+0x48>
        name = attr->name;
 800af7e:	687b      	ldr	r3, [r7, #4]
 800af80:	681b      	ldr	r3, [r3, #0]
 800af82:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (attr->priority != osPriorityNone) {
 800af84:	687b      	ldr	r3, [r7, #4]
 800af86:	699b      	ldr	r3, [r3, #24]
 800af88:	2b00      	cmp	r3, #0
 800af8a:	d002      	beq.n	800af92 <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 800af8c:	687b      	ldr	r3, [r7, #4]
 800af8e:	699b      	ldr	r3, [r3, #24]
 800af90:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 800af92:	69fb      	ldr	r3, [r7, #28]
 800af94:	2b00      	cmp	r3, #0
 800af96:	d008      	beq.n	800afaa <osThreadNew+0x6e>
 800af98:	69fb      	ldr	r3, [r7, #28]
 800af9a:	2b38      	cmp	r3, #56	@ 0x38
 800af9c:	d805      	bhi.n	800afaa <osThreadNew+0x6e>
 800af9e:	687b      	ldr	r3, [r7, #4]
 800afa0:	685b      	ldr	r3, [r3, #4]
 800afa2:	f003 0301 	and.w	r3, r3, #1
 800afa6:	2b00      	cmp	r3, #0
 800afa8:	d001      	beq.n	800afae <osThreadNew+0x72>
        return (NULL);
 800afaa:	2300      	movs	r3, #0
 800afac:	e054      	b.n	800b058 <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 800afae:	687b      	ldr	r3, [r7, #4]
 800afb0:	695b      	ldr	r3, [r3, #20]
 800afb2:	2b00      	cmp	r3, #0
 800afb4:	d003      	beq.n	800afbe <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 800afb6:	687b      	ldr	r3, [r7, #4]
 800afb8:	695b      	ldr	r3, [r3, #20]
 800afba:	089b      	lsrs	r3, r3, #2
 800afbc:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800afbe:	687b      	ldr	r3, [r7, #4]
 800afc0:	689b      	ldr	r3, [r3, #8]
 800afc2:	2b00      	cmp	r3, #0
 800afc4:	d00e      	beq.n	800afe4 <osThreadNew+0xa8>
 800afc6:	687b      	ldr	r3, [r7, #4]
 800afc8:	68db      	ldr	r3, [r3, #12]
 800afca:	2ba7      	cmp	r3, #167	@ 0xa7
 800afcc:	d90a      	bls.n	800afe4 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800afce:	687b      	ldr	r3, [r7, #4]
 800afd0:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800afd2:	2b00      	cmp	r3, #0
 800afd4:	d006      	beq.n	800afe4 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800afd6:	687b      	ldr	r3, [r7, #4]
 800afd8:	695b      	ldr	r3, [r3, #20]
 800afda:	2b00      	cmp	r3, #0
 800afdc:	d002      	beq.n	800afe4 <osThreadNew+0xa8>
        mem = 1;
 800afde:	2301      	movs	r3, #1
 800afe0:	61bb      	str	r3, [r7, #24]
 800afe2:	e010      	b.n	800b006 <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 800afe4:	687b      	ldr	r3, [r7, #4]
 800afe6:	689b      	ldr	r3, [r3, #8]
 800afe8:	2b00      	cmp	r3, #0
 800afea:	d10c      	bne.n	800b006 <osThreadNew+0xca>
 800afec:	687b      	ldr	r3, [r7, #4]
 800afee:	68db      	ldr	r3, [r3, #12]
 800aff0:	2b00      	cmp	r3, #0
 800aff2:	d108      	bne.n	800b006 <osThreadNew+0xca>
 800aff4:	687b      	ldr	r3, [r7, #4]
 800aff6:	691b      	ldr	r3, [r3, #16]
 800aff8:	2b00      	cmp	r3, #0
 800affa:	d104      	bne.n	800b006 <osThreadNew+0xca>
          mem = 0;
 800affc:	2300      	movs	r3, #0
 800affe:	61bb      	str	r3, [r7, #24]
 800b000:	e001      	b.n	800b006 <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 800b002:	2300      	movs	r3, #0
 800b004:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 800b006:	69bb      	ldr	r3, [r7, #24]
 800b008:	2b01      	cmp	r3, #1
 800b00a:	d110      	bne.n	800b02e <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 800b00c:	687b      	ldr	r3, [r7, #4]
 800b00e:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 800b010:	687a      	ldr	r2, [r7, #4]
 800b012:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 800b014:	9202      	str	r2, [sp, #8]
 800b016:	9301      	str	r3, [sp, #4]
 800b018:	69fb      	ldr	r3, [r7, #28]
 800b01a:	9300      	str	r3, [sp, #0]
 800b01c:	68bb      	ldr	r3, [r7, #8]
 800b01e:	6a3a      	ldr	r2, [r7, #32]
 800b020:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800b022:	68f8      	ldr	r0, [r7, #12]
 800b024:	f001 ffde 	bl	800cfe4 <xTaskCreateStatic>
 800b028:	4603      	mov	r3, r0
 800b02a:	613b      	str	r3, [r7, #16]
 800b02c:	e013      	b.n	800b056 <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 800b02e:	69bb      	ldr	r3, [r7, #24]
 800b030:	2b00      	cmp	r3, #0
 800b032:	d110      	bne.n	800b056 <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 800b034:	6a3b      	ldr	r3, [r7, #32]
 800b036:	b29a      	uxth	r2, r3
 800b038:	f107 0310 	add.w	r3, r7, #16
 800b03c:	9301      	str	r3, [sp, #4]
 800b03e:	69fb      	ldr	r3, [r7, #28]
 800b040:	9300      	str	r3, [sp, #0]
 800b042:	68bb      	ldr	r3, [r7, #8]
 800b044:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800b046:	68f8      	ldr	r0, [r7, #12]
 800b048:	f002 f82c 	bl	800d0a4 <xTaskCreate>
 800b04c:	4603      	mov	r3, r0
 800b04e:	2b01      	cmp	r3, #1
 800b050:	d001      	beq.n	800b056 <osThreadNew+0x11a>
            hTask = NULL;
 800b052:	2300      	movs	r3, #0
 800b054:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 800b056:	693b      	ldr	r3, [r7, #16]
}
 800b058:	4618      	mov	r0, r3
 800b05a:	3728      	adds	r7, #40	@ 0x28
 800b05c:	46bd      	mov	sp, r7
 800b05e:	bd80      	pop	{r7, pc}

0800b060 <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 800b060:	b580      	push	{r7, lr}
 800b062:	b084      	sub	sp, #16
 800b064:	af00      	add	r7, sp, #0
 800b066:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800b068:	f3ef 8305 	mrs	r3, IPSR
 800b06c:	60bb      	str	r3, [r7, #8]
  return(result);
 800b06e:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 800b070:	2b00      	cmp	r3, #0
 800b072:	d003      	beq.n	800b07c <osDelay+0x1c>
    stat = osErrorISR;
 800b074:	f06f 0305 	mvn.w	r3, #5
 800b078:	60fb      	str	r3, [r7, #12]
 800b07a:	e007      	b.n	800b08c <osDelay+0x2c>
  }
  else {
    stat = osOK;
 800b07c:	2300      	movs	r3, #0
 800b07e:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 800b080:	687b      	ldr	r3, [r7, #4]
 800b082:	2b00      	cmp	r3, #0
 800b084:	d002      	beq.n	800b08c <osDelay+0x2c>
      vTaskDelay(ticks);
 800b086:	6878      	ldr	r0, [r7, #4]
 800b088:	f002 f96a 	bl	800d360 <vTaskDelay>
    }
  }

  return (stat);
 800b08c:	68fb      	ldr	r3, [r7, #12]
}
 800b08e:	4618      	mov	r0, r3
 800b090:	3710      	adds	r7, #16
 800b092:	46bd      	mov	sp, r7
 800b094:	bd80      	pop	{r7, pc}

0800b096 <osSemaphoreNew>:
}
#endif /* (configUSE_OS2_MUTEX == 1) */

/*---------------------------------------------------------------------------*/

osSemaphoreId_t osSemaphoreNew (uint32_t max_count, uint32_t initial_count, const osSemaphoreAttr_t *attr) {
 800b096:	b580      	push	{r7, lr}
 800b098:	b08a      	sub	sp, #40	@ 0x28
 800b09a:	af02      	add	r7, sp, #8
 800b09c:	60f8      	str	r0, [r7, #12]
 800b09e:	60b9      	str	r1, [r7, #8]
 800b0a0:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hSemaphore = NULL;
 800b0a2:	2300      	movs	r3, #0
 800b0a4:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800b0a6:	f3ef 8305 	mrs	r3, IPSR
 800b0aa:	613b      	str	r3, [r7, #16]
  return(result);
 800b0ac:	693b      	ldr	r3, [r7, #16]

  if (!IS_IRQ() && (max_count > 0U) && (initial_count <= max_count)) {
 800b0ae:	2b00      	cmp	r3, #0
 800b0b0:	d175      	bne.n	800b19e <osSemaphoreNew+0x108>
 800b0b2:	68fb      	ldr	r3, [r7, #12]
 800b0b4:	2b00      	cmp	r3, #0
 800b0b6:	d072      	beq.n	800b19e <osSemaphoreNew+0x108>
 800b0b8:	68ba      	ldr	r2, [r7, #8]
 800b0ba:	68fb      	ldr	r3, [r7, #12]
 800b0bc:	429a      	cmp	r2, r3
 800b0be:	d86e      	bhi.n	800b19e <osSemaphoreNew+0x108>
    mem = -1;
 800b0c0:	f04f 33ff 	mov.w	r3, #4294967295
 800b0c4:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 800b0c6:	687b      	ldr	r3, [r7, #4]
 800b0c8:	2b00      	cmp	r3, #0
 800b0ca:	d015      	beq.n	800b0f8 <osSemaphoreNew+0x62>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticSemaphore_t))) {
 800b0cc:	687b      	ldr	r3, [r7, #4]
 800b0ce:	689b      	ldr	r3, [r3, #8]
 800b0d0:	2b00      	cmp	r3, #0
 800b0d2:	d006      	beq.n	800b0e2 <osSemaphoreNew+0x4c>
 800b0d4:	687b      	ldr	r3, [r7, #4]
 800b0d6:	68db      	ldr	r3, [r3, #12]
 800b0d8:	2b4f      	cmp	r3, #79	@ 0x4f
 800b0da:	d902      	bls.n	800b0e2 <osSemaphoreNew+0x4c>
        mem = 1;
 800b0dc:	2301      	movs	r3, #1
 800b0de:	61bb      	str	r3, [r7, #24]
 800b0e0:	e00c      	b.n	800b0fc <osSemaphoreNew+0x66>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 800b0e2:	687b      	ldr	r3, [r7, #4]
 800b0e4:	689b      	ldr	r3, [r3, #8]
 800b0e6:	2b00      	cmp	r3, #0
 800b0e8:	d108      	bne.n	800b0fc <osSemaphoreNew+0x66>
 800b0ea:	687b      	ldr	r3, [r7, #4]
 800b0ec:	68db      	ldr	r3, [r3, #12]
 800b0ee:	2b00      	cmp	r3, #0
 800b0f0:	d104      	bne.n	800b0fc <osSemaphoreNew+0x66>
          mem = 0;
 800b0f2:	2300      	movs	r3, #0
 800b0f4:	61bb      	str	r3, [r7, #24]
 800b0f6:	e001      	b.n	800b0fc <osSemaphoreNew+0x66>
        }
      }
    }
    else {
      mem = 0;
 800b0f8:	2300      	movs	r3, #0
 800b0fa:	61bb      	str	r3, [r7, #24]
    }

    if (mem != -1) {
 800b0fc:	69bb      	ldr	r3, [r7, #24]
 800b0fe:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b102:	d04c      	beq.n	800b19e <osSemaphoreNew+0x108>
      if (max_count == 1U) {
 800b104:	68fb      	ldr	r3, [r7, #12]
 800b106:	2b01      	cmp	r3, #1
 800b108:	d128      	bne.n	800b15c <osSemaphoreNew+0xc6>
        if (mem == 1) {
 800b10a:	69bb      	ldr	r3, [r7, #24]
 800b10c:	2b01      	cmp	r3, #1
 800b10e:	d10a      	bne.n	800b126 <osSemaphoreNew+0x90>
          #if (configSUPPORT_STATIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateBinaryStatic ((StaticSemaphore_t *)attr->cb_mem);
 800b110:	687b      	ldr	r3, [r7, #4]
 800b112:	689b      	ldr	r3, [r3, #8]
 800b114:	2203      	movs	r2, #3
 800b116:	9200      	str	r2, [sp, #0]
 800b118:	2200      	movs	r2, #0
 800b11a:	2100      	movs	r1, #0
 800b11c:	2001      	movs	r0, #1
 800b11e:	f000 ff9f 	bl	800c060 <xQueueGenericCreateStatic>
 800b122:	61f8      	str	r0, [r7, #28]
 800b124:	e005      	b.n	800b132 <osSemaphoreNew+0x9c>
          #endif
        }
        else {
          #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateBinary();
 800b126:	2203      	movs	r2, #3
 800b128:	2100      	movs	r1, #0
 800b12a:	2001      	movs	r0, #1
 800b12c:	f001 f815 	bl	800c15a <xQueueGenericCreate>
 800b130:	61f8      	str	r0, [r7, #28]
          #endif
        }

        if ((hSemaphore != NULL) && (initial_count != 0U)) {
 800b132:	69fb      	ldr	r3, [r7, #28]
 800b134:	2b00      	cmp	r3, #0
 800b136:	d022      	beq.n	800b17e <osSemaphoreNew+0xe8>
 800b138:	68bb      	ldr	r3, [r7, #8]
 800b13a:	2b00      	cmp	r3, #0
 800b13c:	d01f      	beq.n	800b17e <osSemaphoreNew+0xe8>
          if (xSemaphoreGive (hSemaphore) != pdPASS) {
 800b13e:	2300      	movs	r3, #0
 800b140:	2200      	movs	r2, #0
 800b142:	2100      	movs	r1, #0
 800b144:	69f8      	ldr	r0, [r7, #28]
 800b146:	f001 f8d5 	bl	800c2f4 <xQueueGenericSend>
 800b14a:	4603      	mov	r3, r0
 800b14c:	2b01      	cmp	r3, #1
 800b14e:	d016      	beq.n	800b17e <osSemaphoreNew+0xe8>
            vSemaphoreDelete (hSemaphore);
 800b150:	69f8      	ldr	r0, [r7, #28]
 800b152:	f001 fd73 	bl	800cc3c <vQueueDelete>
            hSemaphore = NULL;
 800b156:	2300      	movs	r3, #0
 800b158:	61fb      	str	r3, [r7, #28]
 800b15a:	e010      	b.n	800b17e <osSemaphoreNew+0xe8>
          }
        }
      }
      else {
        if (mem == 1) {
 800b15c:	69bb      	ldr	r3, [r7, #24]
 800b15e:	2b01      	cmp	r3, #1
 800b160:	d108      	bne.n	800b174 <osSemaphoreNew+0xde>
          #if (configSUPPORT_STATIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateCountingStatic (max_count, initial_count, (StaticSemaphore_t *)attr->cb_mem);
 800b162:	687b      	ldr	r3, [r7, #4]
 800b164:	689b      	ldr	r3, [r3, #8]
 800b166:	461a      	mov	r2, r3
 800b168:	68b9      	ldr	r1, [r7, #8]
 800b16a:	68f8      	ldr	r0, [r7, #12]
 800b16c:	f001 f853 	bl	800c216 <xQueueCreateCountingSemaphoreStatic>
 800b170:	61f8      	str	r0, [r7, #28]
 800b172:	e004      	b.n	800b17e <osSemaphoreNew+0xe8>
          #endif
        }
        else {
          #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateCounting (max_count, initial_count);
 800b174:	68b9      	ldr	r1, [r7, #8]
 800b176:	68f8      	ldr	r0, [r7, #12]
 800b178:	f001 f886 	bl	800c288 <xQueueCreateCountingSemaphore>
 800b17c:	61f8      	str	r0, [r7, #28]
          #endif
        }
      }
      
      #if (configQUEUE_REGISTRY_SIZE > 0)
      if (hSemaphore != NULL) {
 800b17e:	69fb      	ldr	r3, [r7, #28]
 800b180:	2b00      	cmp	r3, #0
 800b182:	d00c      	beq.n	800b19e <osSemaphoreNew+0x108>
        if (attr != NULL) {
 800b184:	687b      	ldr	r3, [r7, #4]
 800b186:	2b00      	cmp	r3, #0
 800b188:	d003      	beq.n	800b192 <osSemaphoreNew+0xfc>
          name = attr->name;
 800b18a:	687b      	ldr	r3, [r7, #4]
 800b18c:	681b      	ldr	r3, [r3, #0]
 800b18e:	617b      	str	r3, [r7, #20]
 800b190:	e001      	b.n	800b196 <osSemaphoreNew+0x100>
        } else {
          name = NULL;
 800b192:	2300      	movs	r3, #0
 800b194:	617b      	str	r3, [r7, #20]
        }
        vQueueAddToRegistry (hSemaphore, name);
 800b196:	6979      	ldr	r1, [r7, #20]
 800b198:	69f8      	ldr	r0, [r7, #28]
 800b19a:	f001 fe9b 	bl	800ced4 <vQueueAddToRegistry>
      }
      #endif
    }
  }

  return ((osSemaphoreId_t)hSemaphore);
 800b19e:	69fb      	ldr	r3, [r7, #28]
}
 800b1a0:	4618      	mov	r0, r3
 800b1a2:	3720      	adds	r7, #32
 800b1a4:	46bd      	mov	sp, r7
 800b1a6:	bd80      	pop	{r7, pc}

0800b1a8 <osSemaphoreAcquire>:

osStatus_t osSemaphoreAcquire (osSemaphoreId_t semaphore_id, uint32_t timeout) {
 800b1a8:	b580      	push	{r7, lr}
 800b1aa:	b086      	sub	sp, #24
 800b1ac:	af00      	add	r7, sp, #0
 800b1ae:	6078      	str	r0, [r7, #4]
 800b1b0:	6039      	str	r1, [r7, #0]
  SemaphoreHandle_t hSemaphore = (SemaphoreHandle_t)semaphore_id;
 800b1b2:	687b      	ldr	r3, [r7, #4]
 800b1b4:	613b      	str	r3, [r7, #16]
  osStatus_t stat;
  BaseType_t yield;

  stat = osOK;
 800b1b6:	2300      	movs	r3, #0
 800b1b8:	617b      	str	r3, [r7, #20]

  if (hSemaphore == NULL) {
 800b1ba:	693b      	ldr	r3, [r7, #16]
 800b1bc:	2b00      	cmp	r3, #0
 800b1be:	d103      	bne.n	800b1c8 <osSemaphoreAcquire+0x20>
    stat = osErrorParameter;
 800b1c0:	f06f 0303 	mvn.w	r3, #3
 800b1c4:	617b      	str	r3, [r7, #20]
 800b1c6:	e039      	b.n	800b23c <osSemaphoreAcquire+0x94>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800b1c8:	f3ef 8305 	mrs	r3, IPSR
 800b1cc:	60fb      	str	r3, [r7, #12]
  return(result);
 800b1ce:	68fb      	ldr	r3, [r7, #12]
  }
  else if (IS_IRQ()) {
 800b1d0:	2b00      	cmp	r3, #0
 800b1d2:	d022      	beq.n	800b21a <osSemaphoreAcquire+0x72>
    if (timeout != 0U) {
 800b1d4:	683b      	ldr	r3, [r7, #0]
 800b1d6:	2b00      	cmp	r3, #0
 800b1d8:	d003      	beq.n	800b1e2 <osSemaphoreAcquire+0x3a>
      stat = osErrorParameter;
 800b1da:	f06f 0303 	mvn.w	r3, #3
 800b1de:	617b      	str	r3, [r7, #20]
 800b1e0:	e02c      	b.n	800b23c <osSemaphoreAcquire+0x94>
    }
    else {
      yield = pdFALSE;
 800b1e2:	2300      	movs	r3, #0
 800b1e4:	60bb      	str	r3, [r7, #8]

      if (xSemaphoreTakeFromISR (hSemaphore, &yield) != pdPASS) {
 800b1e6:	f107 0308 	add.w	r3, r7, #8
 800b1ea:	461a      	mov	r2, r3
 800b1ec:	2100      	movs	r1, #0
 800b1ee:	6938      	ldr	r0, [r7, #16]
 800b1f0:	f001 fca2 	bl	800cb38 <xQueueReceiveFromISR>
 800b1f4:	4603      	mov	r3, r0
 800b1f6:	2b01      	cmp	r3, #1
 800b1f8:	d003      	beq.n	800b202 <osSemaphoreAcquire+0x5a>
        stat = osErrorResource;
 800b1fa:	f06f 0302 	mvn.w	r3, #2
 800b1fe:	617b      	str	r3, [r7, #20]
 800b200:	e01c      	b.n	800b23c <osSemaphoreAcquire+0x94>
      } else {
        portYIELD_FROM_ISR (yield);
 800b202:	68bb      	ldr	r3, [r7, #8]
 800b204:	2b00      	cmp	r3, #0
 800b206:	d019      	beq.n	800b23c <osSemaphoreAcquire+0x94>
 800b208:	4b0f      	ldr	r3, [pc, #60]	@ (800b248 <osSemaphoreAcquire+0xa0>)
 800b20a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800b20e:	601a      	str	r2, [r3, #0]
 800b210:	f3bf 8f4f 	dsb	sy
 800b214:	f3bf 8f6f 	isb	sy
 800b218:	e010      	b.n	800b23c <osSemaphoreAcquire+0x94>
      }
    }
  }
  else {
    if (xSemaphoreTake (hSemaphore, (TickType_t)timeout) != pdPASS) {
 800b21a:	6839      	ldr	r1, [r7, #0]
 800b21c:	6938      	ldr	r0, [r7, #16]
 800b21e:	f001 fb7b 	bl	800c918 <xQueueSemaphoreTake>
 800b222:	4603      	mov	r3, r0
 800b224:	2b01      	cmp	r3, #1
 800b226:	d009      	beq.n	800b23c <osSemaphoreAcquire+0x94>
      if (timeout != 0U) {
 800b228:	683b      	ldr	r3, [r7, #0]
 800b22a:	2b00      	cmp	r3, #0
 800b22c:	d003      	beq.n	800b236 <osSemaphoreAcquire+0x8e>
        stat = osErrorTimeout;
 800b22e:	f06f 0301 	mvn.w	r3, #1
 800b232:	617b      	str	r3, [r7, #20]
 800b234:	e002      	b.n	800b23c <osSemaphoreAcquire+0x94>
      } else {
        stat = osErrorResource;
 800b236:	f06f 0302 	mvn.w	r3, #2
 800b23a:	617b      	str	r3, [r7, #20]
      }
    }
  }

  return (stat);
 800b23c:	697b      	ldr	r3, [r7, #20]
}
 800b23e:	4618      	mov	r0, r3
 800b240:	3718      	adds	r7, #24
 800b242:	46bd      	mov	sp, r7
 800b244:	bd80      	pop	{r7, pc}
 800b246:	bf00      	nop
 800b248:	e000ed04 	.word	0xe000ed04

0800b24c <osSemaphoreRelease>:

osStatus_t osSemaphoreRelease (osSemaphoreId_t semaphore_id) {
 800b24c:	b580      	push	{r7, lr}
 800b24e:	b086      	sub	sp, #24
 800b250:	af00      	add	r7, sp, #0
 800b252:	6078      	str	r0, [r7, #4]
  SemaphoreHandle_t hSemaphore = (SemaphoreHandle_t)semaphore_id;
 800b254:	687b      	ldr	r3, [r7, #4]
 800b256:	613b      	str	r3, [r7, #16]
  osStatus_t stat;
  BaseType_t yield;

  stat = osOK;
 800b258:	2300      	movs	r3, #0
 800b25a:	617b      	str	r3, [r7, #20]

  if (hSemaphore == NULL) {
 800b25c:	693b      	ldr	r3, [r7, #16]
 800b25e:	2b00      	cmp	r3, #0
 800b260:	d103      	bne.n	800b26a <osSemaphoreRelease+0x1e>
    stat = osErrorParameter;
 800b262:	f06f 0303 	mvn.w	r3, #3
 800b266:	617b      	str	r3, [r7, #20]
 800b268:	e02c      	b.n	800b2c4 <osSemaphoreRelease+0x78>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800b26a:	f3ef 8305 	mrs	r3, IPSR
 800b26e:	60fb      	str	r3, [r7, #12]
  return(result);
 800b270:	68fb      	ldr	r3, [r7, #12]
  }
  else if (IS_IRQ()) {
 800b272:	2b00      	cmp	r3, #0
 800b274:	d01a      	beq.n	800b2ac <osSemaphoreRelease+0x60>
    yield = pdFALSE;
 800b276:	2300      	movs	r3, #0
 800b278:	60bb      	str	r3, [r7, #8]

    if (xSemaphoreGiveFromISR (hSemaphore, &yield) != pdTRUE) {
 800b27a:	f107 0308 	add.w	r3, r7, #8
 800b27e:	4619      	mov	r1, r3
 800b280:	6938      	ldr	r0, [r7, #16]
 800b282:	f001 f9d7 	bl	800c634 <xQueueGiveFromISR>
 800b286:	4603      	mov	r3, r0
 800b288:	2b01      	cmp	r3, #1
 800b28a:	d003      	beq.n	800b294 <osSemaphoreRelease+0x48>
      stat = osErrorResource;
 800b28c:	f06f 0302 	mvn.w	r3, #2
 800b290:	617b      	str	r3, [r7, #20]
 800b292:	e017      	b.n	800b2c4 <osSemaphoreRelease+0x78>
    } else {
      portYIELD_FROM_ISR (yield);
 800b294:	68bb      	ldr	r3, [r7, #8]
 800b296:	2b00      	cmp	r3, #0
 800b298:	d014      	beq.n	800b2c4 <osSemaphoreRelease+0x78>
 800b29a:	4b0d      	ldr	r3, [pc, #52]	@ (800b2d0 <osSemaphoreRelease+0x84>)
 800b29c:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800b2a0:	601a      	str	r2, [r3, #0]
 800b2a2:	f3bf 8f4f 	dsb	sy
 800b2a6:	f3bf 8f6f 	isb	sy
 800b2aa:	e00b      	b.n	800b2c4 <osSemaphoreRelease+0x78>
    }
  }
  else {
    if (xSemaphoreGive (hSemaphore) != pdPASS) {
 800b2ac:	2300      	movs	r3, #0
 800b2ae:	2200      	movs	r2, #0
 800b2b0:	2100      	movs	r1, #0
 800b2b2:	6938      	ldr	r0, [r7, #16]
 800b2b4:	f001 f81e 	bl	800c2f4 <xQueueGenericSend>
 800b2b8:	4603      	mov	r3, r0
 800b2ba:	2b01      	cmp	r3, #1
 800b2bc:	d002      	beq.n	800b2c4 <osSemaphoreRelease+0x78>
      stat = osErrorResource;
 800b2be:	f06f 0302 	mvn.w	r3, #2
 800b2c2:	617b      	str	r3, [r7, #20]
    }
  }

  return (stat);
 800b2c4:	697b      	ldr	r3, [r7, #20]
}
 800b2c6:	4618      	mov	r0, r3
 800b2c8:	3718      	adds	r7, #24
 800b2ca:	46bd      	mov	sp, r7
 800b2cc:	bd80      	pop	{r7, pc}
 800b2ce:	bf00      	nop
 800b2d0:	e000ed04 	.word	0xe000ed04

0800b2d4 <osMessageQueueNew>:
  return (stat);
}

/*---------------------------------------------------------------------------*/

osMessageQueueId_t osMessageQueueNew (uint32_t msg_count, uint32_t msg_size, const osMessageQueueAttr_t *attr) {
 800b2d4:	b580      	push	{r7, lr}
 800b2d6:	b08a      	sub	sp, #40	@ 0x28
 800b2d8:	af02      	add	r7, sp, #8
 800b2da:	60f8      	str	r0, [r7, #12]
 800b2dc:	60b9      	str	r1, [r7, #8]
 800b2de:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hQueue = NULL;
 800b2e0:	2300      	movs	r3, #0
 800b2e2:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800b2e4:	f3ef 8305 	mrs	r3, IPSR
 800b2e8:	613b      	str	r3, [r7, #16]
  return(result);
 800b2ea:	693b      	ldr	r3, [r7, #16]

  if (!IS_IRQ() && (msg_count > 0U) && (msg_size > 0U)) {
 800b2ec:	2b00      	cmp	r3, #0
 800b2ee:	d15f      	bne.n	800b3b0 <osMessageQueueNew+0xdc>
 800b2f0:	68fb      	ldr	r3, [r7, #12]
 800b2f2:	2b00      	cmp	r3, #0
 800b2f4:	d05c      	beq.n	800b3b0 <osMessageQueueNew+0xdc>
 800b2f6:	68bb      	ldr	r3, [r7, #8]
 800b2f8:	2b00      	cmp	r3, #0
 800b2fa:	d059      	beq.n	800b3b0 <osMessageQueueNew+0xdc>
    mem = -1;
 800b2fc:	f04f 33ff 	mov.w	r3, #4294967295
 800b300:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 800b302:	687b      	ldr	r3, [r7, #4]
 800b304:	2b00      	cmp	r3, #0
 800b306:	d029      	beq.n	800b35c <osMessageQueueNew+0x88>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 800b308:	687b      	ldr	r3, [r7, #4]
 800b30a:	689b      	ldr	r3, [r3, #8]
 800b30c:	2b00      	cmp	r3, #0
 800b30e:	d012      	beq.n	800b336 <osMessageQueueNew+0x62>
 800b310:	687b      	ldr	r3, [r7, #4]
 800b312:	68db      	ldr	r3, [r3, #12]
 800b314:	2b4f      	cmp	r3, #79	@ 0x4f
 800b316:	d90e      	bls.n	800b336 <osMessageQueueNew+0x62>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 800b318:	687b      	ldr	r3, [r7, #4]
 800b31a:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 800b31c:	2b00      	cmp	r3, #0
 800b31e:	d00a      	beq.n	800b336 <osMessageQueueNew+0x62>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 800b320:	687b      	ldr	r3, [r7, #4]
 800b322:	695a      	ldr	r2, [r3, #20]
 800b324:	68fb      	ldr	r3, [r7, #12]
 800b326:	68b9      	ldr	r1, [r7, #8]
 800b328:	fb01 f303 	mul.w	r3, r1, r3
 800b32c:	429a      	cmp	r2, r3
 800b32e:	d302      	bcc.n	800b336 <osMessageQueueNew+0x62>
        mem = 1;
 800b330:	2301      	movs	r3, #1
 800b332:	61bb      	str	r3, [r7, #24]
 800b334:	e014      	b.n	800b360 <osMessageQueueNew+0x8c>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 800b336:	687b      	ldr	r3, [r7, #4]
 800b338:	689b      	ldr	r3, [r3, #8]
 800b33a:	2b00      	cmp	r3, #0
 800b33c:	d110      	bne.n	800b360 <osMessageQueueNew+0x8c>
 800b33e:	687b      	ldr	r3, [r7, #4]
 800b340:	68db      	ldr	r3, [r3, #12]
 800b342:	2b00      	cmp	r3, #0
 800b344:	d10c      	bne.n	800b360 <osMessageQueueNew+0x8c>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 800b346:	687b      	ldr	r3, [r7, #4]
 800b348:	691b      	ldr	r3, [r3, #16]
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 800b34a:	2b00      	cmp	r3, #0
 800b34c:	d108      	bne.n	800b360 <osMessageQueueNew+0x8c>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 800b34e:	687b      	ldr	r3, [r7, #4]
 800b350:	695b      	ldr	r3, [r3, #20]
 800b352:	2b00      	cmp	r3, #0
 800b354:	d104      	bne.n	800b360 <osMessageQueueNew+0x8c>
          mem = 0;
 800b356:	2300      	movs	r3, #0
 800b358:	61bb      	str	r3, [r7, #24]
 800b35a:	e001      	b.n	800b360 <osMessageQueueNew+0x8c>
        }
      }
    }
    else {
      mem = 0;
 800b35c:	2300      	movs	r3, #0
 800b35e:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 800b360:	69bb      	ldr	r3, [r7, #24]
 800b362:	2b01      	cmp	r3, #1
 800b364:	d10b      	bne.n	800b37e <osMessageQueueNew+0xaa>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hQueue = xQueueCreateStatic (msg_count, msg_size, attr->mq_mem, attr->cb_mem);
 800b366:	687b      	ldr	r3, [r7, #4]
 800b368:	691a      	ldr	r2, [r3, #16]
 800b36a:	687b      	ldr	r3, [r7, #4]
 800b36c:	689b      	ldr	r3, [r3, #8]
 800b36e:	2100      	movs	r1, #0
 800b370:	9100      	str	r1, [sp, #0]
 800b372:	68b9      	ldr	r1, [r7, #8]
 800b374:	68f8      	ldr	r0, [r7, #12]
 800b376:	f000 fe73 	bl	800c060 <xQueueGenericCreateStatic>
 800b37a:	61f8      	str	r0, [r7, #28]
 800b37c:	e008      	b.n	800b390 <osMessageQueueNew+0xbc>
      #endif
    }
    else {
      if (mem == 0) {
 800b37e:	69bb      	ldr	r3, [r7, #24]
 800b380:	2b00      	cmp	r3, #0
 800b382:	d105      	bne.n	800b390 <osMessageQueueNew+0xbc>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          hQueue = xQueueCreate (msg_count, msg_size);
 800b384:	2200      	movs	r2, #0
 800b386:	68b9      	ldr	r1, [r7, #8]
 800b388:	68f8      	ldr	r0, [r7, #12]
 800b38a:	f000 fee6 	bl	800c15a <xQueueGenericCreate>
 800b38e:	61f8      	str	r0, [r7, #28]
        #endif
      }
    }

    #if (configQUEUE_REGISTRY_SIZE > 0)
    if (hQueue != NULL) {
 800b390:	69fb      	ldr	r3, [r7, #28]
 800b392:	2b00      	cmp	r3, #0
 800b394:	d00c      	beq.n	800b3b0 <osMessageQueueNew+0xdc>
      if (attr != NULL) {
 800b396:	687b      	ldr	r3, [r7, #4]
 800b398:	2b00      	cmp	r3, #0
 800b39a:	d003      	beq.n	800b3a4 <osMessageQueueNew+0xd0>
        name = attr->name;
 800b39c:	687b      	ldr	r3, [r7, #4]
 800b39e:	681b      	ldr	r3, [r3, #0]
 800b3a0:	617b      	str	r3, [r7, #20]
 800b3a2:	e001      	b.n	800b3a8 <osMessageQueueNew+0xd4>
      } else {
        name = NULL;
 800b3a4:	2300      	movs	r3, #0
 800b3a6:	617b      	str	r3, [r7, #20]
      }
      vQueueAddToRegistry (hQueue, name);
 800b3a8:	6979      	ldr	r1, [r7, #20]
 800b3aa:	69f8      	ldr	r0, [r7, #28]
 800b3ac:	f001 fd92 	bl	800ced4 <vQueueAddToRegistry>
    }
    #endif

  }

  return ((osMessageQueueId_t)hQueue);
 800b3b0:	69fb      	ldr	r3, [r7, #28]
}
 800b3b2:	4618      	mov	r0, r3
 800b3b4:	3720      	adds	r7, #32
 800b3b6:	46bd      	mov	sp, r7
 800b3b8:	bd80      	pop	{r7, pc}
	...

0800b3bc <osMessageQueuePut>:

osStatus_t osMessageQueuePut (osMessageQueueId_t mq_id, const void *msg_ptr, uint8_t msg_prio, uint32_t timeout) {
 800b3bc:	b580      	push	{r7, lr}
 800b3be:	b088      	sub	sp, #32
 800b3c0:	af00      	add	r7, sp, #0
 800b3c2:	60f8      	str	r0, [r7, #12]
 800b3c4:	60b9      	str	r1, [r7, #8]
 800b3c6:	603b      	str	r3, [r7, #0]
 800b3c8:	4613      	mov	r3, r2
 800b3ca:	71fb      	strb	r3, [r7, #7]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 800b3cc:	68fb      	ldr	r3, [r7, #12]
 800b3ce:	61bb      	str	r3, [r7, #24]
  osStatus_t stat;
  BaseType_t yield;

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;
 800b3d0:	2300      	movs	r3, #0
 800b3d2:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800b3d4:	f3ef 8305 	mrs	r3, IPSR
 800b3d8:	617b      	str	r3, [r7, #20]
  return(result);
 800b3da:	697b      	ldr	r3, [r7, #20]

  if (IS_IRQ()) {
 800b3dc:	2b00      	cmp	r3, #0
 800b3de:	d028      	beq.n	800b432 <osMessageQueuePut+0x76>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 800b3e0:	69bb      	ldr	r3, [r7, #24]
 800b3e2:	2b00      	cmp	r3, #0
 800b3e4:	d005      	beq.n	800b3f2 <osMessageQueuePut+0x36>
 800b3e6:	68bb      	ldr	r3, [r7, #8]
 800b3e8:	2b00      	cmp	r3, #0
 800b3ea:	d002      	beq.n	800b3f2 <osMessageQueuePut+0x36>
 800b3ec:	683b      	ldr	r3, [r7, #0]
 800b3ee:	2b00      	cmp	r3, #0
 800b3f0:	d003      	beq.n	800b3fa <osMessageQueuePut+0x3e>
      stat = osErrorParameter;
 800b3f2:	f06f 0303 	mvn.w	r3, #3
 800b3f6:	61fb      	str	r3, [r7, #28]
 800b3f8:	e038      	b.n	800b46c <osMessageQueuePut+0xb0>
    }
    else {
      yield = pdFALSE;
 800b3fa:	2300      	movs	r3, #0
 800b3fc:	613b      	str	r3, [r7, #16]

      if (xQueueSendToBackFromISR (hQueue, msg_ptr, &yield) != pdTRUE) {
 800b3fe:	f107 0210 	add.w	r2, r7, #16
 800b402:	2300      	movs	r3, #0
 800b404:	68b9      	ldr	r1, [r7, #8]
 800b406:	69b8      	ldr	r0, [r7, #24]
 800b408:	f001 f876 	bl	800c4f8 <xQueueGenericSendFromISR>
 800b40c:	4603      	mov	r3, r0
 800b40e:	2b01      	cmp	r3, #1
 800b410:	d003      	beq.n	800b41a <osMessageQueuePut+0x5e>
        stat = osErrorResource;
 800b412:	f06f 0302 	mvn.w	r3, #2
 800b416:	61fb      	str	r3, [r7, #28]
 800b418:	e028      	b.n	800b46c <osMessageQueuePut+0xb0>
      } else {
        portYIELD_FROM_ISR (yield);
 800b41a:	693b      	ldr	r3, [r7, #16]
 800b41c:	2b00      	cmp	r3, #0
 800b41e:	d025      	beq.n	800b46c <osMessageQueuePut+0xb0>
 800b420:	4b15      	ldr	r3, [pc, #84]	@ (800b478 <osMessageQueuePut+0xbc>)
 800b422:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800b426:	601a      	str	r2, [r3, #0]
 800b428:	f3bf 8f4f 	dsb	sy
 800b42c:	f3bf 8f6f 	isb	sy
 800b430:	e01c      	b.n	800b46c <osMessageQueuePut+0xb0>
      }
    }
  }
  else {
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 800b432:	69bb      	ldr	r3, [r7, #24]
 800b434:	2b00      	cmp	r3, #0
 800b436:	d002      	beq.n	800b43e <osMessageQueuePut+0x82>
 800b438:	68bb      	ldr	r3, [r7, #8]
 800b43a:	2b00      	cmp	r3, #0
 800b43c:	d103      	bne.n	800b446 <osMessageQueuePut+0x8a>
      stat = osErrorParameter;
 800b43e:	f06f 0303 	mvn.w	r3, #3
 800b442:	61fb      	str	r3, [r7, #28]
 800b444:	e012      	b.n	800b46c <osMessageQueuePut+0xb0>
    }
    else {
      if (xQueueSendToBack (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 800b446:	2300      	movs	r3, #0
 800b448:	683a      	ldr	r2, [r7, #0]
 800b44a:	68b9      	ldr	r1, [r7, #8]
 800b44c:	69b8      	ldr	r0, [r7, #24]
 800b44e:	f000 ff51 	bl	800c2f4 <xQueueGenericSend>
 800b452:	4603      	mov	r3, r0
 800b454:	2b01      	cmp	r3, #1
 800b456:	d009      	beq.n	800b46c <osMessageQueuePut+0xb0>
        if (timeout != 0U) {
 800b458:	683b      	ldr	r3, [r7, #0]
 800b45a:	2b00      	cmp	r3, #0
 800b45c:	d003      	beq.n	800b466 <osMessageQueuePut+0xaa>
          stat = osErrorTimeout;
 800b45e:	f06f 0301 	mvn.w	r3, #1
 800b462:	61fb      	str	r3, [r7, #28]
 800b464:	e002      	b.n	800b46c <osMessageQueuePut+0xb0>
        } else {
          stat = osErrorResource;
 800b466:	f06f 0302 	mvn.w	r3, #2
 800b46a:	61fb      	str	r3, [r7, #28]
        }
      }
    }
  }

  return (stat);
 800b46c:	69fb      	ldr	r3, [r7, #28]
}
 800b46e:	4618      	mov	r0, r3
 800b470:	3720      	adds	r7, #32
 800b472:	46bd      	mov	sp, r7
 800b474:	bd80      	pop	{r7, pc}
 800b476:	bf00      	nop
 800b478:	e000ed04 	.word	0xe000ed04

0800b47c <osMessageQueueGet>:

osStatus_t osMessageQueueGet (osMessageQueueId_t mq_id, void *msg_ptr, uint8_t *msg_prio, uint32_t timeout) {
 800b47c:	b580      	push	{r7, lr}
 800b47e:	b088      	sub	sp, #32
 800b480:	af00      	add	r7, sp, #0
 800b482:	60f8      	str	r0, [r7, #12]
 800b484:	60b9      	str	r1, [r7, #8]
 800b486:	607a      	str	r2, [r7, #4]
 800b488:	603b      	str	r3, [r7, #0]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 800b48a:	68fb      	ldr	r3, [r7, #12]
 800b48c:	61bb      	str	r3, [r7, #24]
  osStatus_t stat;
  BaseType_t yield;

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;
 800b48e:	2300      	movs	r3, #0
 800b490:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800b492:	f3ef 8305 	mrs	r3, IPSR
 800b496:	617b      	str	r3, [r7, #20]
  return(result);
 800b498:	697b      	ldr	r3, [r7, #20]

  if (IS_IRQ()) {
 800b49a:	2b00      	cmp	r3, #0
 800b49c:	d028      	beq.n	800b4f0 <osMessageQueueGet+0x74>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 800b49e:	69bb      	ldr	r3, [r7, #24]
 800b4a0:	2b00      	cmp	r3, #0
 800b4a2:	d005      	beq.n	800b4b0 <osMessageQueueGet+0x34>
 800b4a4:	68bb      	ldr	r3, [r7, #8]
 800b4a6:	2b00      	cmp	r3, #0
 800b4a8:	d002      	beq.n	800b4b0 <osMessageQueueGet+0x34>
 800b4aa:	683b      	ldr	r3, [r7, #0]
 800b4ac:	2b00      	cmp	r3, #0
 800b4ae:	d003      	beq.n	800b4b8 <osMessageQueueGet+0x3c>
      stat = osErrorParameter;
 800b4b0:	f06f 0303 	mvn.w	r3, #3
 800b4b4:	61fb      	str	r3, [r7, #28]
 800b4b6:	e037      	b.n	800b528 <osMessageQueueGet+0xac>
    }
    else {
      yield = pdFALSE;
 800b4b8:	2300      	movs	r3, #0
 800b4ba:	613b      	str	r3, [r7, #16]

      if (xQueueReceiveFromISR (hQueue, msg_ptr, &yield) != pdPASS) {
 800b4bc:	f107 0310 	add.w	r3, r7, #16
 800b4c0:	461a      	mov	r2, r3
 800b4c2:	68b9      	ldr	r1, [r7, #8]
 800b4c4:	69b8      	ldr	r0, [r7, #24]
 800b4c6:	f001 fb37 	bl	800cb38 <xQueueReceiveFromISR>
 800b4ca:	4603      	mov	r3, r0
 800b4cc:	2b01      	cmp	r3, #1
 800b4ce:	d003      	beq.n	800b4d8 <osMessageQueueGet+0x5c>
        stat = osErrorResource;
 800b4d0:	f06f 0302 	mvn.w	r3, #2
 800b4d4:	61fb      	str	r3, [r7, #28]
 800b4d6:	e027      	b.n	800b528 <osMessageQueueGet+0xac>
      } else {
        portYIELD_FROM_ISR (yield);
 800b4d8:	693b      	ldr	r3, [r7, #16]
 800b4da:	2b00      	cmp	r3, #0
 800b4dc:	d024      	beq.n	800b528 <osMessageQueueGet+0xac>
 800b4de:	4b15      	ldr	r3, [pc, #84]	@ (800b534 <osMessageQueueGet+0xb8>)
 800b4e0:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800b4e4:	601a      	str	r2, [r3, #0]
 800b4e6:	f3bf 8f4f 	dsb	sy
 800b4ea:	f3bf 8f6f 	isb	sy
 800b4ee:	e01b      	b.n	800b528 <osMessageQueueGet+0xac>
      }
    }
  }
  else {
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 800b4f0:	69bb      	ldr	r3, [r7, #24]
 800b4f2:	2b00      	cmp	r3, #0
 800b4f4:	d002      	beq.n	800b4fc <osMessageQueueGet+0x80>
 800b4f6:	68bb      	ldr	r3, [r7, #8]
 800b4f8:	2b00      	cmp	r3, #0
 800b4fa:	d103      	bne.n	800b504 <osMessageQueueGet+0x88>
      stat = osErrorParameter;
 800b4fc:	f06f 0303 	mvn.w	r3, #3
 800b500:	61fb      	str	r3, [r7, #28]
 800b502:	e011      	b.n	800b528 <osMessageQueueGet+0xac>
    }
    else {
      if (xQueueReceive (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 800b504:	683a      	ldr	r2, [r7, #0]
 800b506:	68b9      	ldr	r1, [r7, #8]
 800b508:	69b8      	ldr	r0, [r7, #24]
 800b50a:	f001 f923 	bl	800c754 <xQueueReceive>
 800b50e:	4603      	mov	r3, r0
 800b510:	2b01      	cmp	r3, #1
 800b512:	d009      	beq.n	800b528 <osMessageQueueGet+0xac>
        if (timeout != 0U) {
 800b514:	683b      	ldr	r3, [r7, #0]
 800b516:	2b00      	cmp	r3, #0
 800b518:	d003      	beq.n	800b522 <osMessageQueueGet+0xa6>
          stat = osErrorTimeout;
 800b51a:	f06f 0301 	mvn.w	r3, #1
 800b51e:	61fb      	str	r3, [r7, #28]
 800b520:	e002      	b.n	800b528 <osMessageQueueGet+0xac>
        } else {
          stat = osErrorResource;
 800b522:	f06f 0302 	mvn.w	r3, #2
 800b526:	61fb      	str	r3, [r7, #28]
        }
      }
    }
  }

  return (stat);
 800b528:	69fb      	ldr	r3, [r7, #28]
}
 800b52a:	4618      	mov	r0, r3
 800b52c:	3720      	adds	r7, #32
 800b52e:	46bd      	mov	sp, r7
 800b530:	bd80      	pop	{r7, pc}
 800b532:	bf00      	nop
 800b534:	e000ed04 	.word	0xe000ed04

0800b538 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 800b538:	b480      	push	{r7}
 800b53a:	b085      	sub	sp, #20
 800b53c:	af00      	add	r7, sp, #0
 800b53e:	60f8      	str	r0, [r7, #12]
 800b540:	60b9      	str	r1, [r7, #8]
 800b542:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 800b544:	68fb      	ldr	r3, [r7, #12]
 800b546:	4a07      	ldr	r2, [pc, #28]	@ (800b564 <vApplicationGetIdleTaskMemory+0x2c>)
 800b548:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 800b54a:	68bb      	ldr	r3, [r7, #8]
 800b54c:	4a06      	ldr	r2, [pc, #24]	@ (800b568 <vApplicationGetIdleTaskMemory+0x30>)
 800b54e:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 800b550:	687b      	ldr	r3, [r7, #4]
 800b552:	2280      	movs	r2, #128	@ 0x80
 800b554:	601a      	str	r2, [r3, #0]
}
 800b556:	bf00      	nop
 800b558:	3714      	adds	r7, #20
 800b55a:	46bd      	mov	sp, r7
 800b55c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b560:	4770      	bx	lr
 800b562:	bf00      	nop
 800b564:	24001e94 	.word	0x24001e94
 800b568:	24001f3c 	.word	0x24001f3c

0800b56c <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 800b56c:	b480      	push	{r7}
 800b56e:	b085      	sub	sp, #20
 800b570:	af00      	add	r7, sp, #0
 800b572:	60f8      	str	r0, [r7, #12]
 800b574:	60b9      	str	r1, [r7, #8]
 800b576:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 800b578:	68fb      	ldr	r3, [r7, #12]
 800b57a:	4a07      	ldr	r2, [pc, #28]	@ (800b598 <vApplicationGetTimerTaskMemory+0x2c>)
 800b57c:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 800b57e:	68bb      	ldr	r3, [r7, #8]
 800b580:	4a06      	ldr	r2, [pc, #24]	@ (800b59c <vApplicationGetTimerTaskMemory+0x30>)
 800b582:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 800b584:	687b      	ldr	r3, [r7, #4]
 800b586:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800b58a:	601a      	str	r2, [r3, #0]
}
 800b58c:	bf00      	nop
 800b58e:	3714      	adds	r7, #20
 800b590:	46bd      	mov	sp, r7
 800b592:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b596:	4770      	bx	lr
 800b598:	2400213c 	.word	0x2400213c
 800b59c:	240021e4 	.word	0x240021e4

0800b5a0 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800b5a0:	b580      	push	{r7, lr}
 800b5a2:	b08a      	sub	sp, #40	@ 0x28
 800b5a4:	af00      	add	r7, sp, #0
 800b5a6:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 800b5a8:	2300      	movs	r3, #0
 800b5aa:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 800b5ac:	f001 ff7e 	bl	800d4ac <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800b5b0:	4b5c      	ldr	r3, [pc, #368]	@ (800b724 <pvPortMalloc+0x184>)
 800b5b2:	681b      	ldr	r3, [r3, #0]
 800b5b4:	2b00      	cmp	r3, #0
 800b5b6:	d101      	bne.n	800b5bc <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 800b5b8:	f000 f924 	bl	800b804 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800b5bc:	4b5a      	ldr	r3, [pc, #360]	@ (800b728 <pvPortMalloc+0x188>)
 800b5be:	681a      	ldr	r2, [r3, #0]
 800b5c0:	687b      	ldr	r3, [r7, #4]
 800b5c2:	4013      	ands	r3, r2
 800b5c4:	2b00      	cmp	r3, #0
 800b5c6:	f040 8095 	bne.w	800b6f4 <pvPortMalloc+0x154>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800b5ca:	687b      	ldr	r3, [r7, #4]
 800b5cc:	2b00      	cmp	r3, #0
 800b5ce:	d01e      	beq.n	800b60e <pvPortMalloc+0x6e>
			{
				xWantedSize += xHeapStructSize;
 800b5d0:	2208      	movs	r2, #8
 800b5d2:	687b      	ldr	r3, [r7, #4]
 800b5d4:	4413      	add	r3, r2
 800b5d6:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800b5d8:	687b      	ldr	r3, [r7, #4]
 800b5da:	f003 0307 	and.w	r3, r3, #7
 800b5de:	2b00      	cmp	r3, #0
 800b5e0:	d015      	beq.n	800b60e <pvPortMalloc+0x6e>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800b5e2:	687b      	ldr	r3, [r7, #4]
 800b5e4:	f023 0307 	bic.w	r3, r3, #7
 800b5e8:	3308      	adds	r3, #8
 800b5ea:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 800b5ec:	687b      	ldr	r3, [r7, #4]
 800b5ee:	f003 0307 	and.w	r3, r3, #7
 800b5f2:	2b00      	cmp	r3, #0
 800b5f4:	d00b      	beq.n	800b60e <pvPortMalloc+0x6e>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 800b5f6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b5fa:	f383 8811 	msr	BASEPRI, r3
 800b5fe:	f3bf 8f6f 	isb	sy
 800b602:	f3bf 8f4f 	dsb	sy
 800b606:	617b      	str	r3, [r7, #20]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 800b608:	bf00      	nop
 800b60a:	bf00      	nop
 800b60c:	e7fd      	b.n	800b60a <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800b60e:	687b      	ldr	r3, [r7, #4]
 800b610:	2b00      	cmp	r3, #0
 800b612:	d06f      	beq.n	800b6f4 <pvPortMalloc+0x154>
 800b614:	4b45      	ldr	r3, [pc, #276]	@ (800b72c <pvPortMalloc+0x18c>)
 800b616:	681b      	ldr	r3, [r3, #0]
 800b618:	687a      	ldr	r2, [r7, #4]
 800b61a:	429a      	cmp	r2, r3
 800b61c:	d86a      	bhi.n	800b6f4 <pvPortMalloc+0x154>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800b61e:	4b44      	ldr	r3, [pc, #272]	@ (800b730 <pvPortMalloc+0x190>)
 800b620:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800b622:	4b43      	ldr	r3, [pc, #268]	@ (800b730 <pvPortMalloc+0x190>)
 800b624:	681b      	ldr	r3, [r3, #0]
 800b626:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800b628:	e004      	b.n	800b634 <pvPortMalloc+0x94>
				{
					pxPreviousBlock = pxBlock;
 800b62a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b62c:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800b62e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b630:	681b      	ldr	r3, [r3, #0]
 800b632:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800b634:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b636:	685b      	ldr	r3, [r3, #4]
 800b638:	687a      	ldr	r2, [r7, #4]
 800b63a:	429a      	cmp	r2, r3
 800b63c:	d903      	bls.n	800b646 <pvPortMalloc+0xa6>
 800b63e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b640:	681b      	ldr	r3, [r3, #0]
 800b642:	2b00      	cmp	r3, #0
 800b644:	d1f1      	bne.n	800b62a <pvPortMalloc+0x8a>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800b646:	4b37      	ldr	r3, [pc, #220]	@ (800b724 <pvPortMalloc+0x184>)
 800b648:	681b      	ldr	r3, [r3, #0]
 800b64a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800b64c:	429a      	cmp	r2, r3
 800b64e:	d051      	beq.n	800b6f4 <pvPortMalloc+0x154>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800b650:	6a3b      	ldr	r3, [r7, #32]
 800b652:	681b      	ldr	r3, [r3, #0]
 800b654:	2208      	movs	r2, #8
 800b656:	4413      	add	r3, r2
 800b658:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800b65a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b65c:	681a      	ldr	r2, [r3, #0]
 800b65e:	6a3b      	ldr	r3, [r7, #32]
 800b660:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800b662:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b664:	685a      	ldr	r2, [r3, #4]
 800b666:	687b      	ldr	r3, [r7, #4]
 800b668:	1ad2      	subs	r2, r2, r3
 800b66a:	2308      	movs	r3, #8
 800b66c:	005b      	lsls	r3, r3, #1
 800b66e:	429a      	cmp	r2, r3
 800b670:	d920      	bls.n	800b6b4 <pvPortMalloc+0x114>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800b672:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800b674:	687b      	ldr	r3, [r7, #4]
 800b676:	4413      	add	r3, r2
 800b678:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800b67a:	69bb      	ldr	r3, [r7, #24]
 800b67c:	f003 0307 	and.w	r3, r3, #7
 800b680:	2b00      	cmp	r3, #0
 800b682:	d00b      	beq.n	800b69c <pvPortMalloc+0xfc>
	__asm volatile
 800b684:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b688:	f383 8811 	msr	BASEPRI, r3
 800b68c:	f3bf 8f6f 	isb	sy
 800b690:	f3bf 8f4f 	dsb	sy
 800b694:	613b      	str	r3, [r7, #16]
}
 800b696:	bf00      	nop
 800b698:	bf00      	nop
 800b69a:	e7fd      	b.n	800b698 <pvPortMalloc+0xf8>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800b69c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b69e:	685a      	ldr	r2, [r3, #4]
 800b6a0:	687b      	ldr	r3, [r7, #4]
 800b6a2:	1ad2      	subs	r2, r2, r3
 800b6a4:	69bb      	ldr	r3, [r7, #24]
 800b6a6:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800b6a8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b6aa:	687a      	ldr	r2, [r7, #4]
 800b6ac:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800b6ae:	69b8      	ldr	r0, [r7, #24]
 800b6b0:	f000 f90a 	bl	800b8c8 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800b6b4:	4b1d      	ldr	r3, [pc, #116]	@ (800b72c <pvPortMalloc+0x18c>)
 800b6b6:	681a      	ldr	r2, [r3, #0]
 800b6b8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b6ba:	685b      	ldr	r3, [r3, #4]
 800b6bc:	1ad3      	subs	r3, r2, r3
 800b6be:	4a1b      	ldr	r2, [pc, #108]	@ (800b72c <pvPortMalloc+0x18c>)
 800b6c0:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800b6c2:	4b1a      	ldr	r3, [pc, #104]	@ (800b72c <pvPortMalloc+0x18c>)
 800b6c4:	681a      	ldr	r2, [r3, #0]
 800b6c6:	4b1b      	ldr	r3, [pc, #108]	@ (800b734 <pvPortMalloc+0x194>)
 800b6c8:	681b      	ldr	r3, [r3, #0]
 800b6ca:	429a      	cmp	r2, r3
 800b6cc:	d203      	bcs.n	800b6d6 <pvPortMalloc+0x136>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800b6ce:	4b17      	ldr	r3, [pc, #92]	@ (800b72c <pvPortMalloc+0x18c>)
 800b6d0:	681b      	ldr	r3, [r3, #0]
 800b6d2:	4a18      	ldr	r2, [pc, #96]	@ (800b734 <pvPortMalloc+0x194>)
 800b6d4:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800b6d6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b6d8:	685a      	ldr	r2, [r3, #4]
 800b6da:	4b13      	ldr	r3, [pc, #76]	@ (800b728 <pvPortMalloc+0x188>)
 800b6dc:	681b      	ldr	r3, [r3, #0]
 800b6de:	431a      	orrs	r2, r3
 800b6e0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b6e2:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800b6e4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b6e6:	2200      	movs	r2, #0
 800b6e8:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 800b6ea:	4b13      	ldr	r3, [pc, #76]	@ (800b738 <pvPortMalloc+0x198>)
 800b6ec:	681b      	ldr	r3, [r3, #0]
 800b6ee:	3301      	adds	r3, #1
 800b6f0:	4a11      	ldr	r2, [pc, #68]	@ (800b738 <pvPortMalloc+0x198>)
 800b6f2:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 800b6f4:	f001 fee8 	bl	800d4c8 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800b6f8:	69fb      	ldr	r3, [r7, #28]
 800b6fa:	f003 0307 	and.w	r3, r3, #7
 800b6fe:	2b00      	cmp	r3, #0
 800b700:	d00b      	beq.n	800b71a <pvPortMalloc+0x17a>
	__asm volatile
 800b702:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b706:	f383 8811 	msr	BASEPRI, r3
 800b70a:	f3bf 8f6f 	isb	sy
 800b70e:	f3bf 8f4f 	dsb	sy
 800b712:	60fb      	str	r3, [r7, #12]
}
 800b714:	bf00      	nop
 800b716:	bf00      	nop
 800b718:	e7fd      	b.n	800b716 <pvPortMalloc+0x176>
	return pvReturn;
 800b71a:	69fb      	ldr	r3, [r7, #28]
}
 800b71c:	4618      	mov	r0, r3
 800b71e:	3728      	adds	r7, #40	@ 0x28
 800b720:	46bd      	mov	sp, r7
 800b722:	bd80      	pop	{r7, pc}
 800b724:	2400a5ec 	.word	0x2400a5ec
 800b728:	2400a600 	.word	0x2400a600
 800b72c:	2400a5f0 	.word	0x2400a5f0
 800b730:	2400a5e4 	.word	0x2400a5e4
 800b734:	2400a5f4 	.word	0x2400a5f4
 800b738:	2400a5f8 	.word	0x2400a5f8

0800b73c <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 800b73c:	b580      	push	{r7, lr}
 800b73e:	b086      	sub	sp, #24
 800b740:	af00      	add	r7, sp, #0
 800b742:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 800b744:	687b      	ldr	r3, [r7, #4]
 800b746:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800b748:	687b      	ldr	r3, [r7, #4]
 800b74a:	2b00      	cmp	r3, #0
 800b74c:	d04f      	beq.n	800b7ee <vPortFree+0xb2>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800b74e:	2308      	movs	r3, #8
 800b750:	425b      	negs	r3, r3
 800b752:	697a      	ldr	r2, [r7, #20]
 800b754:	4413      	add	r3, r2
 800b756:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800b758:	697b      	ldr	r3, [r7, #20]
 800b75a:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800b75c:	693b      	ldr	r3, [r7, #16]
 800b75e:	685a      	ldr	r2, [r3, #4]
 800b760:	4b25      	ldr	r3, [pc, #148]	@ (800b7f8 <vPortFree+0xbc>)
 800b762:	681b      	ldr	r3, [r3, #0]
 800b764:	4013      	ands	r3, r2
 800b766:	2b00      	cmp	r3, #0
 800b768:	d10b      	bne.n	800b782 <vPortFree+0x46>
	__asm volatile
 800b76a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b76e:	f383 8811 	msr	BASEPRI, r3
 800b772:	f3bf 8f6f 	isb	sy
 800b776:	f3bf 8f4f 	dsb	sy
 800b77a:	60fb      	str	r3, [r7, #12]
}
 800b77c:	bf00      	nop
 800b77e:	bf00      	nop
 800b780:	e7fd      	b.n	800b77e <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800b782:	693b      	ldr	r3, [r7, #16]
 800b784:	681b      	ldr	r3, [r3, #0]
 800b786:	2b00      	cmp	r3, #0
 800b788:	d00b      	beq.n	800b7a2 <vPortFree+0x66>
	__asm volatile
 800b78a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b78e:	f383 8811 	msr	BASEPRI, r3
 800b792:	f3bf 8f6f 	isb	sy
 800b796:	f3bf 8f4f 	dsb	sy
 800b79a:	60bb      	str	r3, [r7, #8]
}
 800b79c:	bf00      	nop
 800b79e:	bf00      	nop
 800b7a0:	e7fd      	b.n	800b79e <vPortFree+0x62>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800b7a2:	693b      	ldr	r3, [r7, #16]
 800b7a4:	685a      	ldr	r2, [r3, #4]
 800b7a6:	4b14      	ldr	r3, [pc, #80]	@ (800b7f8 <vPortFree+0xbc>)
 800b7a8:	681b      	ldr	r3, [r3, #0]
 800b7aa:	4013      	ands	r3, r2
 800b7ac:	2b00      	cmp	r3, #0
 800b7ae:	d01e      	beq.n	800b7ee <vPortFree+0xb2>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 800b7b0:	693b      	ldr	r3, [r7, #16]
 800b7b2:	681b      	ldr	r3, [r3, #0]
 800b7b4:	2b00      	cmp	r3, #0
 800b7b6:	d11a      	bne.n	800b7ee <vPortFree+0xb2>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800b7b8:	693b      	ldr	r3, [r7, #16]
 800b7ba:	685a      	ldr	r2, [r3, #4]
 800b7bc:	4b0e      	ldr	r3, [pc, #56]	@ (800b7f8 <vPortFree+0xbc>)
 800b7be:	681b      	ldr	r3, [r3, #0]
 800b7c0:	43db      	mvns	r3, r3
 800b7c2:	401a      	ands	r2, r3
 800b7c4:	693b      	ldr	r3, [r7, #16]
 800b7c6:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 800b7c8:	f001 fe70 	bl	800d4ac <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800b7cc:	693b      	ldr	r3, [r7, #16]
 800b7ce:	685a      	ldr	r2, [r3, #4]
 800b7d0:	4b0a      	ldr	r3, [pc, #40]	@ (800b7fc <vPortFree+0xc0>)
 800b7d2:	681b      	ldr	r3, [r3, #0]
 800b7d4:	4413      	add	r3, r2
 800b7d6:	4a09      	ldr	r2, [pc, #36]	@ (800b7fc <vPortFree+0xc0>)
 800b7d8:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800b7da:	6938      	ldr	r0, [r7, #16]
 800b7dc:	f000 f874 	bl	800b8c8 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 800b7e0:	4b07      	ldr	r3, [pc, #28]	@ (800b800 <vPortFree+0xc4>)
 800b7e2:	681b      	ldr	r3, [r3, #0]
 800b7e4:	3301      	adds	r3, #1
 800b7e6:	4a06      	ldr	r2, [pc, #24]	@ (800b800 <vPortFree+0xc4>)
 800b7e8:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 800b7ea:	f001 fe6d 	bl	800d4c8 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800b7ee:	bf00      	nop
 800b7f0:	3718      	adds	r7, #24
 800b7f2:	46bd      	mov	sp, r7
 800b7f4:	bd80      	pop	{r7, pc}
 800b7f6:	bf00      	nop
 800b7f8:	2400a600 	.word	0x2400a600
 800b7fc:	2400a5f0 	.word	0x2400a5f0
 800b800:	2400a5fc 	.word	0x2400a5fc

0800b804 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 800b804:	b480      	push	{r7}
 800b806:	b085      	sub	sp, #20
 800b808:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800b80a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800b80e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 800b810:	4b27      	ldr	r3, [pc, #156]	@ (800b8b0 <prvHeapInit+0xac>)
 800b812:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800b814:	68fb      	ldr	r3, [r7, #12]
 800b816:	f003 0307 	and.w	r3, r3, #7
 800b81a:	2b00      	cmp	r3, #0
 800b81c:	d00c      	beq.n	800b838 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800b81e:	68fb      	ldr	r3, [r7, #12]
 800b820:	3307      	adds	r3, #7
 800b822:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800b824:	68fb      	ldr	r3, [r7, #12]
 800b826:	f023 0307 	bic.w	r3, r3, #7
 800b82a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800b82c:	68ba      	ldr	r2, [r7, #8]
 800b82e:	68fb      	ldr	r3, [r7, #12]
 800b830:	1ad3      	subs	r3, r2, r3
 800b832:	4a1f      	ldr	r2, [pc, #124]	@ (800b8b0 <prvHeapInit+0xac>)
 800b834:	4413      	add	r3, r2
 800b836:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 800b838:	68fb      	ldr	r3, [r7, #12]
 800b83a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800b83c:	4a1d      	ldr	r2, [pc, #116]	@ (800b8b4 <prvHeapInit+0xb0>)
 800b83e:	687b      	ldr	r3, [r7, #4]
 800b840:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800b842:	4b1c      	ldr	r3, [pc, #112]	@ (800b8b4 <prvHeapInit+0xb0>)
 800b844:	2200      	movs	r2, #0
 800b846:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 800b848:	687b      	ldr	r3, [r7, #4]
 800b84a:	68ba      	ldr	r2, [r7, #8]
 800b84c:	4413      	add	r3, r2
 800b84e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 800b850:	2208      	movs	r2, #8
 800b852:	68fb      	ldr	r3, [r7, #12]
 800b854:	1a9b      	subs	r3, r3, r2
 800b856:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800b858:	68fb      	ldr	r3, [r7, #12]
 800b85a:	f023 0307 	bic.w	r3, r3, #7
 800b85e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 800b860:	68fb      	ldr	r3, [r7, #12]
 800b862:	4a15      	ldr	r2, [pc, #84]	@ (800b8b8 <prvHeapInit+0xb4>)
 800b864:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 800b866:	4b14      	ldr	r3, [pc, #80]	@ (800b8b8 <prvHeapInit+0xb4>)
 800b868:	681b      	ldr	r3, [r3, #0]
 800b86a:	2200      	movs	r2, #0
 800b86c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800b86e:	4b12      	ldr	r3, [pc, #72]	@ (800b8b8 <prvHeapInit+0xb4>)
 800b870:	681b      	ldr	r3, [r3, #0]
 800b872:	2200      	movs	r2, #0
 800b874:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800b876:	687b      	ldr	r3, [r7, #4]
 800b878:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800b87a:	683b      	ldr	r3, [r7, #0]
 800b87c:	68fa      	ldr	r2, [r7, #12]
 800b87e:	1ad2      	subs	r2, r2, r3
 800b880:	683b      	ldr	r3, [r7, #0]
 800b882:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800b884:	4b0c      	ldr	r3, [pc, #48]	@ (800b8b8 <prvHeapInit+0xb4>)
 800b886:	681a      	ldr	r2, [r3, #0]
 800b888:	683b      	ldr	r3, [r7, #0]
 800b88a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800b88c:	683b      	ldr	r3, [r7, #0]
 800b88e:	685b      	ldr	r3, [r3, #4]
 800b890:	4a0a      	ldr	r2, [pc, #40]	@ (800b8bc <prvHeapInit+0xb8>)
 800b892:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800b894:	683b      	ldr	r3, [r7, #0]
 800b896:	685b      	ldr	r3, [r3, #4]
 800b898:	4a09      	ldr	r2, [pc, #36]	@ (800b8c0 <prvHeapInit+0xbc>)
 800b89a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800b89c:	4b09      	ldr	r3, [pc, #36]	@ (800b8c4 <prvHeapInit+0xc0>)
 800b89e:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 800b8a2:	601a      	str	r2, [r3, #0]
}
 800b8a4:	bf00      	nop
 800b8a6:	3714      	adds	r7, #20
 800b8a8:	46bd      	mov	sp, r7
 800b8aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b8ae:	4770      	bx	lr
 800b8b0:	240025e4 	.word	0x240025e4
 800b8b4:	2400a5e4 	.word	0x2400a5e4
 800b8b8:	2400a5ec 	.word	0x2400a5ec
 800b8bc:	2400a5f4 	.word	0x2400a5f4
 800b8c0:	2400a5f0 	.word	0x2400a5f0
 800b8c4:	2400a600 	.word	0x2400a600

0800b8c8 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 800b8c8:	b480      	push	{r7}
 800b8ca:	b085      	sub	sp, #20
 800b8cc:	af00      	add	r7, sp, #0
 800b8ce:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800b8d0:	4b28      	ldr	r3, [pc, #160]	@ (800b974 <prvInsertBlockIntoFreeList+0xac>)
 800b8d2:	60fb      	str	r3, [r7, #12]
 800b8d4:	e002      	b.n	800b8dc <prvInsertBlockIntoFreeList+0x14>
 800b8d6:	68fb      	ldr	r3, [r7, #12]
 800b8d8:	681b      	ldr	r3, [r3, #0]
 800b8da:	60fb      	str	r3, [r7, #12]
 800b8dc:	68fb      	ldr	r3, [r7, #12]
 800b8de:	681b      	ldr	r3, [r3, #0]
 800b8e0:	687a      	ldr	r2, [r7, #4]
 800b8e2:	429a      	cmp	r2, r3
 800b8e4:	d8f7      	bhi.n	800b8d6 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800b8e6:	68fb      	ldr	r3, [r7, #12]
 800b8e8:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800b8ea:	68fb      	ldr	r3, [r7, #12]
 800b8ec:	685b      	ldr	r3, [r3, #4]
 800b8ee:	68ba      	ldr	r2, [r7, #8]
 800b8f0:	4413      	add	r3, r2
 800b8f2:	687a      	ldr	r2, [r7, #4]
 800b8f4:	429a      	cmp	r2, r3
 800b8f6:	d108      	bne.n	800b90a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800b8f8:	68fb      	ldr	r3, [r7, #12]
 800b8fa:	685a      	ldr	r2, [r3, #4]
 800b8fc:	687b      	ldr	r3, [r7, #4]
 800b8fe:	685b      	ldr	r3, [r3, #4]
 800b900:	441a      	add	r2, r3
 800b902:	68fb      	ldr	r3, [r7, #12]
 800b904:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800b906:	68fb      	ldr	r3, [r7, #12]
 800b908:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800b90a:	687b      	ldr	r3, [r7, #4]
 800b90c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800b90e:	687b      	ldr	r3, [r7, #4]
 800b910:	685b      	ldr	r3, [r3, #4]
 800b912:	68ba      	ldr	r2, [r7, #8]
 800b914:	441a      	add	r2, r3
 800b916:	68fb      	ldr	r3, [r7, #12]
 800b918:	681b      	ldr	r3, [r3, #0]
 800b91a:	429a      	cmp	r2, r3
 800b91c:	d118      	bne.n	800b950 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800b91e:	68fb      	ldr	r3, [r7, #12]
 800b920:	681a      	ldr	r2, [r3, #0]
 800b922:	4b15      	ldr	r3, [pc, #84]	@ (800b978 <prvInsertBlockIntoFreeList+0xb0>)
 800b924:	681b      	ldr	r3, [r3, #0]
 800b926:	429a      	cmp	r2, r3
 800b928:	d00d      	beq.n	800b946 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800b92a:	687b      	ldr	r3, [r7, #4]
 800b92c:	685a      	ldr	r2, [r3, #4]
 800b92e:	68fb      	ldr	r3, [r7, #12]
 800b930:	681b      	ldr	r3, [r3, #0]
 800b932:	685b      	ldr	r3, [r3, #4]
 800b934:	441a      	add	r2, r3
 800b936:	687b      	ldr	r3, [r7, #4]
 800b938:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800b93a:	68fb      	ldr	r3, [r7, #12]
 800b93c:	681b      	ldr	r3, [r3, #0]
 800b93e:	681a      	ldr	r2, [r3, #0]
 800b940:	687b      	ldr	r3, [r7, #4]
 800b942:	601a      	str	r2, [r3, #0]
 800b944:	e008      	b.n	800b958 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800b946:	4b0c      	ldr	r3, [pc, #48]	@ (800b978 <prvInsertBlockIntoFreeList+0xb0>)
 800b948:	681a      	ldr	r2, [r3, #0]
 800b94a:	687b      	ldr	r3, [r7, #4]
 800b94c:	601a      	str	r2, [r3, #0]
 800b94e:	e003      	b.n	800b958 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800b950:	68fb      	ldr	r3, [r7, #12]
 800b952:	681a      	ldr	r2, [r3, #0]
 800b954:	687b      	ldr	r3, [r7, #4]
 800b956:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800b958:	68fa      	ldr	r2, [r7, #12]
 800b95a:	687b      	ldr	r3, [r7, #4]
 800b95c:	429a      	cmp	r2, r3
 800b95e:	d002      	beq.n	800b966 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800b960:	68fb      	ldr	r3, [r7, #12]
 800b962:	687a      	ldr	r2, [r7, #4]
 800b964:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800b966:	bf00      	nop
 800b968:	3714      	adds	r7, #20
 800b96a:	46bd      	mov	sp, r7
 800b96c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b970:	4770      	bx	lr
 800b972:	bf00      	nop
 800b974:	2400a5e4 	.word	0x2400a5e4
 800b978:	2400a5ec 	.word	0x2400a5ec

0800b97c <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 800b97c:	b480      	push	{r7}
 800b97e:	b083      	sub	sp, #12
 800b980:	af00      	add	r7, sp, #0
 800b982:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800b984:	687b      	ldr	r3, [r7, #4]
 800b986:	f103 0208 	add.w	r2, r3, #8
 800b98a:	687b      	ldr	r3, [r7, #4]
 800b98c:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800b98e:	687b      	ldr	r3, [r7, #4]
 800b990:	f04f 32ff 	mov.w	r2, #4294967295
 800b994:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800b996:	687b      	ldr	r3, [r7, #4]
 800b998:	f103 0208 	add.w	r2, r3, #8
 800b99c:	687b      	ldr	r3, [r7, #4]
 800b99e:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800b9a0:	687b      	ldr	r3, [r7, #4]
 800b9a2:	f103 0208 	add.w	r2, r3, #8
 800b9a6:	687b      	ldr	r3, [r7, #4]
 800b9a8:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800b9aa:	687b      	ldr	r3, [r7, #4]
 800b9ac:	2200      	movs	r2, #0
 800b9ae:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 800b9b0:	bf00      	nop
 800b9b2:	370c      	adds	r7, #12
 800b9b4:	46bd      	mov	sp, r7
 800b9b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b9ba:	4770      	bx	lr

0800b9bc <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 800b9bc:	b480      	push	{r7}
 800b9be:	b083      	sub	sp, #12
 800b9c0:	af00      	add	r7, sp, #0
 800b9c2:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 800b9c4:	687b      	ldr	r3, [r7, #4]
 800b9c6:	2200      	movs	r2, #0
 800b9c8:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800b9ca:	bf00      	nop
 800b9cc:	370c      	adds	r7, #12
 800b9ce:	46bd      	mov	sp, r7
 800b9d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b9d4:	4770      	bx	lr

0800b9d6 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800b9d6:	b480      	push	{r7}
 800b9d8:	b085      	sub	sp, #20
 800b9da:	af00      	add	r7, sp, #0
 800b9dc:	6078      	str	r0, [r7, #4]
 800b9de:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 800b9e0:	687b      	ldr	r3, [r7, #4]
 800b9e2:	685b      	ldr	r3, [r3, #4]
 800b9e4:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800b9e6:	683b      	ldr	r3, [r7, #0]
 800b9e8:	68fa      	ldr	r2, [r7, #12]
 800b9ea:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 800b9ec:	68fb      	ldr	r3, [r7, #12]
 800b9ee:	689a      	ldr	r2, [r3, #8]
 800b9f0:	683b      	ldr	r3, [r7, #0]
 800b9f2:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 800b9f4:	68fb      	ldr	r3, [r7, #12]
 800b9f6:	689b      	ldr	r3, [r3, #8]
 800b9f8:	683a      	ldr	r2, [r7, #0]
 800b9fa:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 800b9fc:	68fb      	ldr	r3, [r7, #12]
 800b9fe:	683a      	ldr	r2, [r7, #0]
 800ba00:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 800ba02:	683b      	ldr	r3, [r7, #0]
 800ba04:	687a      	ldr	r2, [r7, #4]
 800ba06:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800ba08:	687b      	ldr	r3, [r7, #4]
 800ba0a:	681b      	ldr	r3, [r3, #0]
 800ba0c:	1c5a      	adds	r2, r3, #1
 800ba0e:	687b      	ldr	r3, [r7, #4]
 800ba10:	601a      	str	r2, [r3, #0]
}
 800ba12:	bf00      	nop
 800ba14:	3714      	adds	r7, #20
 800ba16:	46bd      	mov	sp, r7
 800ba18:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ba1c:	4770      	bx	lr

0800ba1e <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800ba1e:	b480      	push	{r7}
 800ba20:	b085      	sub	sp, #20
 800ba22:	af00      	add	r7, sp, #0
 800ba24:	6078      	str	r0, [r7, #4]
 800ba26:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 800ba28:	683b      	ldr	r3, [r7, #0]
 800ba2a:	681b      	ldr	r3, [r3, #0]
 800ba2c:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 800ba2e:	68bb      	ldr	r3, [r7, #8]
 800ba30:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ba34:	d103      	bne.n	800ba3e <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 800ba36:	687b      	ldr	r3, [r7, #4]
 800ba38:	691b      	ldr	r3, [r3, #16]
 800ba3a:	60fb      	str	r3, [r7, #12]
 800ba3c:	e00c      	b.n	800ba58 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 800ba3e:	687b      	ldr	r3, [r7, #4]
 800ba40:	3308      	adds	r3, #8
 800ba42:	60fb      	str	r3, [r7, #12]
 800ba44:	e002      	b.n	800ba4c <vListInsert+0x2e>
 800ba46:	68fb      	ldr	r3, [r7, #12]
 800ba48:	685b      	ldr	r3, [r3, #4]
 800ba4a:	60fb      	str	r3, [r7, #12]
 800ba4c:	68fb      	ldr	r3, [r7, #12]
 800ba4e:	685b      	ldr	r3, [r3, #4]
 800ba50:	681b      	ldr	r3, [r3, #0]
 800ba52:	68ba      	ldr	r2, [r7, #8]
 800ba54:	429a      	cmp	r2, r3
 800ba56:	d2f6      	bcs.n	800ba46 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 800ba58:	68fb      	ldr	r3, [r7, #12]
 800ba5a:	685a      	ldr	r2, [r3, #4]
 800ba5c:	683b      	ldr	r3, [r7, #0]
 800ba5e:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 800ba60:	683b      	ldr	r3, [r7, #0]
 800ba62:	685b      	ldr	r3, [r3, #4]
 800ba64:	683a      	ldr	r2, [r7, #0]
 800ba66:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 800ba68:	683b      	ldr	r3, [r7, #0]
 800ba6a:	68fa      	ldr	r2, [r7, #12]
 800ba6c:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 800ba6e:	68fb      	ldr	r3, [r7, #12]
 800ba70:	683a      	ldr	r2, [r7, #0]
 800ba72:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 800ba74:	683b      	ldr	r3, [r7, #0]
 800ba76:	687a      	ldr	r2, [r7, #4]
 800ba78:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800ba7a:	687b      	ldr	r3, [r7, #4]
 800ba7c:	681b      	ldr	r3, [r3, #0]
 800ba7e:	1c5a      	adds	r2, r3, #1
 800ba80:	687b      	ldr	r3, [r7, #4]
 800ba82:	601a      	str	r2, [r3, #0]
}
 800ba84:	bf00      	nop
 800ba86:	3714      	adds	r7, #20
 800ba88:	46bd      	mov	sp, r7
 800ba8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ba8e:	4770      	bx	lr

0800ba90 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 800ba90:	b480      	push	{r7}
 800ba92:	b085      	sub	sp, #20
 800ba94:	af00      	add	r7, sp, #0
 800ba96:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 800ba98:	687b      	ldr	r3, [r7, #4]
 800ba9a:	691b      	ldr	r3, [r3, #16]
 800ba9c:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800ba9e:	687b      	ldr	r3, [r7, #4]
 800baa0:	685b      	ldr	r3, [r3, #4]
 800baa2:	687a      	ldr	r2, [r7, #4]
 800baa4:	6892      	ldr	r2, [r2, #8]
 800baa6:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 800baa8:	687b      	ldr	r3, [r7, #4]
 800baaa:	689b      	ldr	r3, [r3, #8]
 800baac:	687a      	ldr	r2, [r7, #4]
 800baae:	6852      	ldr	r2, [r2, #4]
 800bab0:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800bab2:	68fb      	ldr	r3, [r7, #12]
 800bab4:	685b      	ldr	r3, [r3, #4]
 800bab6:	687a      	ldr	r2, [r7, #4]
 800bab8:	429a      	cmp	r2, r3
 800baba:	d103      	bne.n	800bac4 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 800babc:	687b      	ldr	r3, [r7, #4]
 800babe:	689a      	ldr	r2, [r3, #8]
 800bac0:	68fb      	ldr	r3, [r7, #12]
 800bac2:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 800bac4:	687b      	ldr	r3, [r7, #4]
 800bac6:	2200      	movs	r2, #0
 800bac8:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 800baca:	68fb      	ldr	r3, [r7, #12]
 800bacc:	681b      	ldr	r3, [r3, #0]
 800bace:	1e5a      	subs	r2, r3, #1
 800bad0:	68fb      	ldr	r3, [r7, #12]
 800bad2:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 800bad4:	68fb      	ldr	r3, [r7, #12]
 800bad6:	681b      	ldr	r3, [r3, #0]
}
 800bad8:	4618      	mov	r0, r3
 800bada:	3714      	adds	r7, #20
 800badc:	46bd      	mov	sp, r7
 800bade:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bae2:	4770      	bx	lr

0800bae4 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 800bae4:	b480      	push	{r7}
 800bae6:	b085      	sub	sp, #20
 800bae8:	af00      	add	r7, sp, #0
 800baea:	60f8      	str	r0, [r7, #12]
 800baec:	60b9      	str	r1, [r7, #8]
 800baee:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 800baf0:	68fb      	ldr	r3, [r7, #12]
 800baf2:	3b04      	subs	r3, #4
 800baf4:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800baf6:	68fb      	ldr	r3, [r7, #12]
 800baf8:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 800bafc:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800bafe:	68fb      	ldr	r3, [r7, #12]
 800bb00:	3b04      	subs	r3, #4
 800bb02:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800bb04:	68bb      	ldr	r3, [r7, #8]
 800bb06:	f023 0201 	bic.w	r2, r3, #1
 800bb0a:	68fb      	ldr	r3, [r7, #12]
 800bb0c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800bb0e:	68fb      	ldr	r3, [r7, #12]
 800bb10:	3b04      	subs	r3, #4
 800bb12:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800bb14:	4a0c      	ldr	r2, [pc, #48]	@ (800bb48 <pxPortInitialiseStack+0x64>)
 800bb16:	68fb      	ldr	r3, [r7, #12]
 800bb18:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800bb1a:	68fb      	ldr	r3, [r7, #12]
 800bb1c:	3b14      	subs	r3, #20
 800bb1e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800bb20:	687a      	ldr	r2, [r7, #4]
 800bb22:	68fb      	ldr	r3, [r7, #12]
 800bb24:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800bb26:	68fb      	ldr	r3, [r7, #12]
 800bb28:	3b04      	subs	r3, #4
 800bb2a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 800bb2c:	68fb      	ldr	r3, [r7, #12]
 800bb2e:	f06f 0202 	mvn.w	r2, #2
 800bb32:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800bb34:	68fb      	ldr	r3, [r7, #12]
 800bb36:	3b20      	subs	r3, #32
 800bb38:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800bb3a:	68fb      	ldr	r3, [r7, #12]
}
 800bb3c:	4618      	mov	r0, r3
 800bb3e:	3714      	adds	r7, #20
 800bb40:	46bd      	mov	sp, r7
 800bb42:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bb46:	4770      	bx	lr
 800bb48:	0800bb4d 	.word	0x0800bb4d

0800bb4c <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800bb4c:	b480      	push	{r7}
 800bb4e:	b085      	sub	sp, #20
 800bb50:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 800bb52:	2300      	movs	r3, #0
 800bb54:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800bb56:	4b13      	ldr	r3, [pc, #76]	@ (800bba4 <prvTaskExitError+0x58>)
 800bb58:	681b      	ldr	r3, [r3, #0]
 800bb5a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800bb5e:	d00b      	beq.n	800bb78 <prvTaskExitError+0x2c>
	__asm volatile
 800bb60:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800bb64:	f383 8811 	msr	BASEPRI, r3
 800bb68:	f3bf 8f6f 	isb	sy
 800bb6c:	f3bf 8f4f 	dsb	sy
 800bb70:	60fb      	str	r3, [r7, #12]
}
 800bb72:	bf00      	nop
 800bb74:	bf00      	nop
 800bb76:	e7fd      	b.n	800bb74 <prvTaskExitError+0x28>
	__asm volatile
 800bb78:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800bb7c:	f383 8811 	msr	BASEPRI, r3
 800bb80:	f3bf 8f6f 	isb	sy
 800bb84:	f3bf 8f4f 	dsb	sy
 800bb88:	60bb      	str	r3, [r7, #8]
}
 800bb8a:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800bb8c:	bf00      	nop
 800bb8e:	687b      	ldr	r3, [r7, #4]
 800bb90:	2b00      	cmp	r3, #0
 800bb92:	d0fc      	beq.n	800bb8e <prvTaskExitError+0x42>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800bb94:	bf00      	nop
 800bb96:	bf00      	nop
 800bb98:	3714      	adds	r7, #20
 800bb9a:	46bd      	mov	sp, r7
 800bb9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bba0:	4770      	bx	lr
 800bba2:	bf00      	nop
 800bba4:	24000014 	.word	0x24000014
	...

0800bbb0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 800bbb0:	4b07      	ldr	r3, [pc, #28]	@ (800bbd0 <pxCurrentTCBConst2>)
 800bbb2:	6819      	ldr	r1, [r3, #0]
 800bbb4:	6808      	ldr	r0, [r1, #0]
 800bbb6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bbba:	f380 8809 	msr	PSP, r0
 800bbbe:	f3bf 8f6f 	isb	sy
 800bbc2:	f04f 0000 	mov.w	r0, #0
 800bbc6:	f380 8811 	msr	BASEPRI, r0
 800bbca:	4770      	bx	lr
 800bbcc:	f3af 8000 	nop.w

0800bbd0 <pxCurrentTCBConst2>:
 800bbd0:	2400a64c 	.word	0x2400a64c
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 800bbd4:	bf00      	nop
 800bbd6:	bf00      	nop

0800bbd8 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 800bbd8:	4808      	ldr	r0, [pc, #32]	@ (800bbfc <prvPortStartFirstTask+0x24>)
 800bbda:	6800      	ldr	r0, [r0, #0]
 800bbdc:	6800      	ldr	r0, [r0, #0]
 800bbde:	f380 8808 	msr	MSP, r0
 800bbe2:	f04f 0000 	mov.w	r0, #0
 800bbe6:	f380 8814 	msr	CONTROL, r0
 800bbea:	b662      	cpsie	i
 800bbec:	b661      	cpsie	f
 800bbee:	f3bf 8f4f 	dsb	sy
 800bbf2:	f3bf 8f6f 	isb	sy
 800bbf6:	df00      	svc	0
 800bbf8:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800bbfa:	bf00      	nop
 800bbfc:	e000ed08 	.word	0xe000ed08

0800bc00 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 800bc00:	b580      	push	{r7, lr}
 800bc02:	b086      	sub	sp, #24
 800bc04:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 800bc06:	4b47      	ldr	r3, [pc, #284]	@ (800bd24 <xPortStartScheduler+0x124>)
 800bc08:	681b      	ldr	r3, [r3, #0]
 800bc0a:	4a47      	ldr	r2, [pc, #284]	@ (800bd28 <xPortStartScheduler+0x128>)
 800bc0c:	4293      	cmp	r3, r2
 800bc0e:	d10b      	bne.n	800bc28 <xPortStartScheduler+0x28>
	__asm volatile
 800bc10:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800bc14:	f383 8811 	msr	BASEPRI, r3
 800bc18:	f3bf 8f6f 	isb	sy
 800bc1c:	f3bf 8f4f 	dsb	sy
 800bc20:	613b      	str	r3, [r7, #16]
}
 800bc22:	bf00      	nop
 800bc24:	bf00      	nop
 800bc26:	e7fd      	b.n	800bc24 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 800bc28:	4b3e      	ldr	r3, [pc, #248]	@ (800bd24 <xPortStartScheduler+0x124>)
 800bc2a:	681b      	ldr	r3, [r3, #0]
 800bc2c:	4a3f      	ldr	r2, [pc, #252]	@ (800bd2c <xPortStartScheduler+0x12c>)
 800bc2e:	4293      	cmp	r3, r2
 800bc30:	d10b      	bne.n	800bc4a <xPortStartScheduler+0x4a>
	__asm volatile
 800bc32:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800bc36:	f383 8811 	msr	BASEPRI, r3
 800bc3a:	f3bf 8f6f 	isb	sy
 800bc3e:	f3bf 8f4f 	dsb	sy
 800bc42:	60fb      	str	r3, [r7, #12]
}
 800bc44:	bf00      	nop
 800bc46:	bf00      	nop
 800bc48:	e7fd      	b.n	800bc46 <xPortStartScheduler+0x46>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800bc4a:	4b39      	ldr	r3, [pc, #228]	@ (800bd30 <xPortStartScheduler+0x130>)
 800bc4c:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800bc4e:	697b      	ldr	r3, [r7, #20]
 800bc50:	781b      	ldrb	r3, [r3, #0]
 800bc52:	b2db      	uxtb	r3, r3
 800bc54:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800bc56:	697b      	ldr	r3, [r7, #20]
 800bc58:	22ff      	movs	r2, #255	@ 0xff
 800bc5a:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800bc5c:	697b      	ldr	r3, [r7, #20]
 800bc5e:	781b      	ldrb	r3, [r3, #0]
 800bc60:	b2db      	uxtb	r3, r3
 800bc62:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800bc64:	78fb      	ldrb	r3, [r7, #3]
 800bc66:	b2db      	uxtb	r3, r3
 800bc68:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 800bc6c:	b2da      	uxtb	r2, r3
 800bc6e:	4b31      	ldr	r3, [pc, #196]	@ (800bd34 <xPortStartScheduler+0x134>)
 800bc70:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800bc72:	4b31      	ldr	r3, [pc, #196]	@ (800bd38 <xPortStartScheduler+0x138>)
 800bc74:	2207      	movs	r2, #7
 800bc76:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800bc78:	e009      	b.n	800bc8e <xPortStartScheduler+0x8e>
		{
			ulMaxPRIGROUPValue--;
 800bc7a:	4b2f      	ldr	r3, [pc, #188]	@ (800bd38 <xPortStartScheduler+0x138>)
 800bc7c:	681b      	ldr	r3, [r3, #0]
 800bc7e:	3b01      	subs	r3, #1
 800bc80:	4a2d      	ldr	r2, [pc, #180]	@ (800bd38 <xPortStartScheduler+0x138>)
 800bc82:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 800bc84:	78fb      	ldrb	r3, [r7, #3]
 800bc86:	b2db      	uxtb	r3, r3
 800bc88:	005b      	lsls	r3, r3, #1
 800bc8a:	b2db      	uxtb	r3, r3
 800bc8c:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800bc8e:	78fb      	ldrb	r3, [r7, #3]
 800bc90:	b2db      	uxtb	r3, r3
 800bc92:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800bc96:	2b80      	cmp	r3, #128	@ 0x80
 800bc98:	d0ef      	beq.n	800bc7a <xPortStartScheduler+0x7a>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800bc9a:	4b27      	ldr	r3, [pc, #156]	@ (800bd38 <xPortStartScheduler+0x138>)
 800bc9c:	681b      	ldr	r3, [r3, #0]
 800bc9e:	f1c3 0307 	rsb	r3, r3, #7
 800bca2:	2b04      	cmp	r3, #4
 800bca4:	d00b      	beq.n	800bcbe <xPortStartScheduler+0xbe>
	__asm volatile
 800bca6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800bcaa:	f383 8811 	msr	BASEPRI, r3
 800bcae:	f3bf 8f6f 	isb	sy
 800bcb2:	f3bf 8f4f 	dsb	sy
 800bcb6:	60bb      	str	r3, [r7, #8]
}
 800bcb8:	bf00      	nop
 800bcba:	bf00      	nop
 800bcbc:	e7fd      	b.n	800bcba <xPortStartScheduler+0xba>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800bcbe:	4b1e      	ldr	r3, [pc, #120]	@ (800bd38 <xPortStartScheduler+0x138>)
 800bcc0:	681b      	ldr	r3, [r3, #0]
 800bcc2:	021b      	lsls	r3, r3, #8
 800bcc4:	4a1c      	ldr	r2, [pc, #112]	@ (800bd38 <xPortStartScheduler+0x138>)
 800bcc6:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800bcc8:	4b1b      	ldr	r3, [pc, #108]	@ (800bd38 <xPortStartScheduler+0x138>)
 800bcca:	681b      	ldr	r3, [r3, #0]
 800bccc:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 800bcd0:	4a19      	ldr	r2, [pc, #100]	@ (800bd38 <xPortStartScheduler+0x138>)
 800bcd2:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800bcd4:	687b      	ldr	r3, [r7, #4]
 800bcd6:	b2da      	uxtb	r2, r3
 800bcd8:	697b      	ldr	r3, [r7, #20]
 800bcda:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800bcdc:	4b17      	ldr	r3, [pc, #92]	@ (800bd3c <xPortStartScheduler+0x13c>)
 800bcde:	681b      	ldr	r3, [r3, #0]
 800bce0:	4a16      	ldr	r2, [pc, #88]	@ (800bd3c <xPortStartScheduler+0x13c>)
 800bce2:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 800bce6:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800bce8:	4b14      	ldr	r3, [pc, #80]	@ (800bd3c <xPortStartScheduler+0x13c>)
 800bcea:	681b      	ldr	r3, [r3, #0]
 800bcec:	4a13      	ldr	r2, [pc, #76]	@ (800bd3c <xPortStartScheduler+0x13c>)
 800bcee:	f043 4370 	orr.w	r3, r3, #4026531840	@ 0xf0000000
 800bcf2:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800bcf4:	f000 f8da 	bl	800beac <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 800bcf8:	4b11      	ldr	r3, [pc, #68]	@ (800bd40 <xPortStartScheduler+0x140>)
 800bcfa:	2200      	movs	r2, #0
 800bcfc:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 800bcfe:	f000 f8f9 	bl	800bef4 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800bd02:	4b10      	ldr	r3, [pc, #64]	@ (800bd44 <xPortStartScheduler+0x144>)
 800bd04:	681b      	ldr	r3, [r3, #0]
 800bd06:	4a0f      	ldr	r2, [pc, #60]	@ (800bd44 <xPortStartScheduler+0x144>)
 800bd08:	f043 4340 	orr.w	r3, r3, #3221225472	@ 0xc0000000
 800bd0c:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800bd0e:	f7ff ff63 	bl	800bbd8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800bd12:	f001 fd41 	bl	800d798 <vTaskSwitchContext>
	prvTaskExitError();
 800bd16:	f7ff ff19 	bl	800bb4c <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800bd1a:	2300      	movs	r3, #0
}
 800bd1c:	4618      	mov	r0, r3
 800bd1e:	3718      	adds	r7, #24
 800bd20:	46bd      	mov	sp, r7
 800bd22:	bd80      	pop	{r7, pc}
 800bd24:	e000ed00 	.word	0xe000ed00
 800bd28:	410fc271 	.word	0x410fc271
 800bd2c:	410fc270 	.word	0x410fc270
 800bd30:	e000e400 	.word	0xe000e400
 800bd34:	2400a604 	.word	0x2400a604
 800bd38:	2400a608 	.word	0x2400a608
 800bd3c:	e000ed20 	.word	0xe000ed20
 800bd40:	24000014 	.word	0x24000014
 800bd44:	e000ef34 	.word	0xe000ef34

0800bd48 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800bd48:	b480      	push	{r7}
 800bd4a:	b083      	sub	sp, #12
 800bd4c:	af00      	add	r7, sp, #0
	__asm volatile
 800bd4e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800bd52:	f383 8811 	msr	BASEPRI, r3
 800bd56:	f3bf 8f6f 	isb	sy
 800bd5a:	f3bf 8f4f 	dsb	sy
 800bd5e:	607b      	str	r3, [r7, #4]
}
 800bd60:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800bd62:	4b10      	ldr	r3, [pc, #64]	@ (800bda4 <vPortEnterCritical+0x5c>)
 800bd64:	681b      	ldr	r3, [r3, #0]
 800bd66:	3301      	adds	r3, #1
 800bd68:	4a0e      	ldr	r2, [pc, #56]	@ (800bda4 <vPortEnterCritical+0x5c>)
 800bd6a:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800bd6c:	4b0d      	ldr	r3, [pc, #52]	@ (800bda4 <vPortEnterCritical+0x5c>)
 800bd6e:	681b      	ldr	r3, [r3, #0]
 800bd70:	2b01      	cmp	r3, #1
 800bd72:	d110      	bne.n	800bd96 <vPortEnterCritical+0x4e>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 800bd74:	4b0c      	ldr	r3, [pc, #48]	@ (800bda8 <vPortEnterCritical+0x60>)
 800bd76:	681b      	ldr	r3, [r3, #0]
 800bd78:	b2db      	uxtb	r3, r3
 800bd7a:	2b00      	cmp	r3, #0
 800bd7c:	d00b      	beq.n	800bd96 <vPortEnterCritical+0x4e>
	__asm volatile
 800bd7e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800bd82:	f383 8811 	msr	BASEPRI, r3
 800bd86:	f3bf 8f6f 	isb	sy
 800bd8a:	f3bf 8f4f 	dsb	sy
 800bd8e:	603b      	str	r3, [r7, #0]
}
 800bd90:	bf00      	nop
 800bd92:	bf00      	nop
 800bd94:	e7fd      	b.n	800bd92 <vPortEnterCritical+0x4a>
	}
}
 800bd96:	bf00      	nop
 800bd98:	370c      	adds	r7, #12
 800bd9a:	46bd      	mov	sp, r7
 800bd9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bda0:	4770      	bx	lr
 800bda2:	bf00      	nop
 800bda4:	24000014 	.word	0x24000014
 800bda8:	e000ed04 	.word	0xe000ed04

0800bdac <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800bdac:	b480      	push	{r7}
 800bdae:	b083      	sub	sp, #12
 800bdb0:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800bdb2:	4b12      	ldr	r3, [pc, #72]	@ (800bdfc <vPortExitCritical+0x50>)
 800bdb4:	681b      	ldr	r3, [r3, #0]
 800bdb6:	2b00      	cmp	r3, #0
 800bdb8:	d10b      	bne.n	800bdd2 <vPortExitCritical+0x26>
	__asm volatile
 800bdba:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800bdbe:	f383 8811 	msr	BASEPRI, r3
 800bdc2:	f3bf 8f6f 	isb	sy
 800bdc6:	f3bf 8f4f 	dsb	sy
 800bdca:	607b      	str	r3, [r7, #4]
}
 800bdcc:	bf00      	nop
 800bdce:	bf00      	nop
 800bdd0:	e7fd      	b.n	800bdce <vPortExitCritical+0x22>
	uxCriticalNesting--;
 800bdd2:	4b0a      	ldr	r3, [pc, #40]	@ (800bdfc <vPortExitCritical+0x50>)
 800bdd4:	681b      	ldr	r3, [r3, #0]
 800bdd6:	3b01      	subs	r3, #1
 800bdd8:	4a08      	ldr	r2, [pc, #32]	@ (800bdfc <vPortExitCritical+0x50>)
 800bdda:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800bddc:	4b07      	ldr	r3, [pc, #28]	@ (800bdfc <vPortExitCritical+0x50>)
 800bdde:	681b      	ldr	r3, [r3, #0]
 800bde0:	2b00      	cmp	r3, #0
 800bde2:	d105      	bne.n	800bdf0 <vPortExitCritical+0x44>
 800bde4:	2300      	movs	r3, #0
 800bde6:	603b      	str	r3, [r7, #0]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 800bde8:	683b      	ldr	r3, [r7, #0]
 800bdea:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 800bdee:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 800bdf0:	bf00      	nop
 800bdf2:	370c      	adds	r7, #12
 800bdf4:	46bd      	mov	sp, r7
 800bdf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bdfa:	4770      	bx	lr
 800bdfc:	24000014 	.word	0x24000014

0800be00 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 800be00:	f3ef 8009 	mrs	r0, PSP
 800be04:	f3bf 8f6f 	isb	sy
 800be08:	4b15      	ldr	r3, [pc, #84]	@ (800be60 <pxCurrentTCBConst>)
 800be0a:	681a      	ldr	r2, [r3, #0]
 800be0c:	f01e 0f10 	tst.w	lr, #16
 800be10:	bf08      	it	eq
 800be12:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 800be16:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800be1a:	6010      	str	r0, [r2, #0]
 800be1c:	e92d 0009 	stmdb	sp!, {r0, r3}
 800be20:	f04f 0050 	mov.w	r0, #80	@ 0x50
 800be24:	f380 8811 	msr	BASEPRI, r0
 800be28:	f3bf 8f4f 	dsb	sy
 800be2c:	f3bf 8f6f 	isb	sy
 800be30:	f001 fcb2 	bl	800d798 <vTaskSwitchContext>
 800be34:	f04f 0000 	mov.w	r0, #0
 800be38:	f380 8811 	msr	BASEPRI, r0
 800be3c:	bc09      	pop	{r0, r3}
 800be3e:	6819      	ldr	r1, [r3, #0]
 800be40:	6808      	ldr	r0, [r1, #0]
 800be42:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800be46:	f01e 0f10 	tst.w	lr, #16
 800be4a:	bf08      	it	eq
 800be4c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 800be50:	f380 8809 	msr	PSP, r0
 800be54:	f3bf 8f6f 	isb	sy
 800be58:	4770      	bx	lr
 800be5a:	bf00      	nop
 800be5c:	f3af 8000 	nop.w

0800be60 <pxCurrentTCBConst>:
 800be60:	2400a64c 	.word	0x2400a64c
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 800be64:	bf00      	nop
 800be66:	bf00      	nop

0800be68 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 800be68:	b580      	push	{r7, lr}
 800be6a:	b082      	sub	sp, #8
 800be6c:	af00      	add	r7, sp, #0
	__asm volatile
 800be6e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800be72:	f383 8811 	msr	BASEPRI, r3
 800be76:	f3bf 8f6f 	isb	sy
 800be7a:	f3bf 8f4f 	dsb	sy
 800be7e:	607b      	str	r3, [r7, #4]
}
 800be80:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 800be82:	f001 fbcf 	bl	800d624 <xTaskIncrementTick>
 800be86:	4603      	mov	r3, r0
 800be88:	2b00      	cmp	r3, #0
 800be8a:	d003      	beq.n	800be94 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800be8c:	4b06      	ldr	r3, [pc, #24]	@ (800bea8 <xPortSysTickHandler+0x40>)
 800be8e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800be92:	601a      	str	r2, [r3, #0]
 800be94:	2300      	movs	r3, #0
 800be96:	603b      	str	r3, [r7, #0]
	__asm volatile
 800be98:	683b      	ldr	r3, [r7, #0]
 800be9a:	f383 8811 	msr	BASEPRI, r3
}
 800be9e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 800bea0:	bf00      	nop
 800bea2:	3708      	adds	r7, #8
 800bea4:	46bd      	mov	sp, r7
 800bea6:	bd80      	pop	{r7, pc}
 800bea8:	e000ed04 	.word	0xe000ed04

0800beac <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800beac:	b480      	push	{r7}
 800beae:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 800beb0:	4b0b      	ldr	r3, [pc, #44]	@ (800bee0 <vPortSetupTimerInterrupt+0x34>)
 800beb2:	2200      	movs	r2, #0
 800beb4:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 800beb6:	4b0b      	ldr	r3, [pc, #44]	@ (800bee4 <vPortSetupTimerInterrupt+0x38>)
 800beb8:	2200      	movs	r2, #0
 800beba:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800bebc:	4b0a      	ldr	r3, [pc, #40]	@ (800bee8 <vPortSetupTimerInterrupt+0x3c>)
 800bebe:	681b      	ldr	r3, [r3, #0]
 800bec0:	4a0a      	ldr	r2, [pc, #40]	@ (800beec <vPortSetupTimerInterrupt+0x40>)
 800bec2:	fba2 2303 	umull	r2, r3, r2, r3
 800bec6:	099b      	lsrs	r3, r3, #6
 800bec8:	4a09      	ldr	r2, [pc, #36]	@ (800bef0 <vPortSetupTimerInterrupt+0x44>)
 800beca:	3b01      	subs	r3, #1
 800becc:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800bece:	4b04      	ldr	r3, [pc, #16]	@ (800bee0 <vPortSetupTimerInterrupt+0x34>)
 800bed0:	2207      	movs	r2, #7
 800bed2:	601a      	str	r2, [r3, #0]
}
 800bed4:	bf00      	nop
 800bed6:	46bd      	mov	sp, r7
 800bed8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bedc:	4770      	bx	lr
 800bede:	bf00      	nop
 800bee0:	e000e010 	.word	0xe000e010
 800bee4:	e000e018 	.word	0xe000e018
 800bee8:	24000018 	.word	0x24000018
 800beec:	10624dd3 	.word	0x10624dd3
 800bef0:	e000e014 	.word	0xe000e014

0800bef4 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 800bef4:	f8df 000c 	ldr.w	r0, [pc, #12]	@ 800bf04 <vPortEnableVFP+0x10>
 800bef8:	6801      	ldr	r1, [r0, #0]
 800befa:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800befe:	6001      	str	r1, [r0, #0]
 800bf00:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 800bf02:	bf00      	nop
 800bf04:	e000ed88 	.word	0xe000ed88

0800bf08 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 800bf08:	b480      	push	{r7}
 800bf0a:	b085      	sub	sp, #20
 800bf0c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800bf0e:	f3ef 8305 	mrs	r3, IPSR
 800bf12:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 800bf14:	68fb      	ldr	r3, [r7, #12]
 800bf16:	2b0f      	cmp	r3, #15
 800bf18:	d915      	bls.n	800bf46 <vPortValidateInterruptPriority+0x3e>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800bf1a:	4a18      	ldr	r2, [pc, #96]	@ (800bf7c <vPortValidateInterruptPriority+0x74>)
 800bf1c:	68fb      	ldr	r3, [r7, #12]
 800bf1e:	4413      	add	r3, r2
 800bf20:	781b      	ldrb	r3, [r3, #0]
 800bf22:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 800bf24:	4b16      	ldr	r3, [pc, #88]	@ (800bf80 <vPortValidateInterruptPriority+0x78>)
 800bf26:	781b      	ldrb	r3, [r3, #0]
 800bf28:	7afa      	ldrb	r2, [r7, #11]
 800bf2a:	429a      	cmp	r2, r3
 800bf2c:	d20b      	bcs.n	800bf46 <vPortValidateInterruptPriority+0x3e>
	__asm volatile
 800bf2e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800bf32:	f383 8811 	msr	BASEPRI, r3
 800bf36:	f3bf 8f6f 	isb	sy
 800bf3a:	f3bf 8f4f 	dsb	sy
 800bf3e:	607b      	str	r3, [r7, #4]
}
 800bf40:	bf00      	nop
 800bf42:	bf00      	nop
 800bf44:	e7fd      	b.n	800bf42 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800bf46:	4b0f      	ldr	r3, [pc, #60]	@ (800bf84 <vPortValidateInterruptPriority+0x7c>)
 800bf48:	681b      	ldr	r3, [r3, #0]
 800bf4a:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 800bf4e:	4b0e      	ldr	r3, [pc, #56]	@ (800bf88 <vPortValidateInterruptPriority+0x80>)
 800bf50:	681b      	ldr	r3, [r3, #0]
 800bf52:	429a      	cmp	r2, r3
 800bf54:	d90b      	bls.n	800bf6e <vPortValidateInterruptPriority+0x66>
	__asm volatile
 800bf56:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800bf5a:	f383 8811 	msr	BASEPRI, r3
 800bf5e:	f3bf 8f6f 	isb	sy
 800bf62:	f3bf 8f4f 	dsb	sy
 800bf66:	603b      	str	r3, [r7, #0]
}
 800bf68:	bf00      	nop
 800bf6a:	bf00      	nop
 800bf6c:	e7fd      	b.n	800bf6a <vPortValidateInterruptPriority+0x62>
	}
 800bf6e:	bf00      	nop
 800bf70:	3714      	adds	r7, #20
 800bf72:	46bd      	mov	sp, r7
 800bf74:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bf78:	4770      	bx	lr
 800bf7a:	bf00      	nop
 800bf7c:	e000e3f0 	.word	0xe000e3f0
 800bf80:	2400a604 	.word	0x2400a604
 800bf84:	e000ed0c 	.word	0xe000ed0c
 800bf88:	2400a608 	.word	0x2400a608

0800bf8c <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 800bf8c:	b580      	push	{r7, lr}
 800bf8e:	b084      	sub	sp, #16
 800bf90:	af00      	add	r7, sp, #0
 800bf92:	6078      	str	r0, [r7, #4]
 800bf94:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 800bf96:	687b      	ldr	r3, [r7, #4]
 800bf98:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800bf9a:	68fb      	ldr	r3, [r7, #12]
 800bf9c:	2b00      	cmp	r3, #0
 800bf9e:	d10b      	bne.n	800bfb8 <xQueueGenericReset+0x2c>
	__asm volatile
 800bfa0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800bfa4:	f383 8811 	msr	BASEPRI, r3
 800bfa8:	f3bf 8f6f 	isb	sy
 800bfac:	f3bf 8f4f 	dsb	sy
 800bfb0:	60bb      	str	r3, [r7, #8]
}
 800bfb2:	bf00      	nop
 800bfb4:	bf00      	nop
 800bfb6:	e7fd      	b.n	800bfb4 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 800bfb8:	f7ff fec6 	bl	800bd48 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800bfbc:	68fb      	ldr	r3, [r7, #12]
 800bfbe:	681a      	ldr	r2, [r3, #0]
 800bfc0:	68fb      	ldr	r3, [r7, #12]
 800bfc2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800bfc4:	68f9      	ldr	r1, [r7, #12]
 800bfc6:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 800bfc8:	fb01 f303 	mul.w	r3, r1, r3
 800bfcc:	441a      	add	r2, r3
 800bfce:	68fb      	ldr	r3, [r7, #12]
 800bfd0:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 800bfd2:	68fb      	ldr	r3, [r7, #12]
 800bfd4:	2200      	movs	r2, #0
 800bfd6:	639a      	str	r2, [r3, #56]	@ 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 800bfd8:	68fb      	ldr	r3, [r7, #12]
 800bfda:	681a      	ldr	r2, [r3, #0]
 800bfdc:	68fb      	ldr	r3, [r7, #12]
 800bfde:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800bfe0:	68fb      	ldr	r3, [r7, #12]
 800bfe2:	681a      	ldr	r2, [r3, #0]
 800bfe4:	68fb      	ldr	r3, [r7, #12]
 800bfe6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800bfe8:	3b01      	subs	r3, #1
 800bfea:	68f9      	ldr	r1, [r7, #12]
 800bfec:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 800bfee:	fb01 f303 	mul.w	r3, r1, r3
 800bff2:	441a      	add	r2, r3
 800bff4:	68fb      	ldr	r3, [r7, #12]
 800bff6:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 800bff8:	68fb      	ldr	r3, [r7, #12]
 800bffa:	22ff      	movs	r2, #255	@ 0xff
 800bffc:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 800c000:	68fb      	ldr	r3, [r7, #12]
 800c002:	22ff      	movs	r2, #255	@ 0xff
 800c004:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

		if( xNewQueue == pdFALSE )
 800c008:	683b      	ldr	r3, [r7, #0]
 800c00a:	2b00      	cmp	r3, #0
 800c00c:	d114      	bne.n	800c038 <xQueueGenericReset+0xac>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800c00e:	68fb      	ldr	r3, [r7, #12]
 800c010:	691b      	ldr	r3, [r3, #16]
 800c012:	2b00      	cmp	r3, #0
 800c014:	d01a      	beq.n	800c04c <xQueueGenericReset+0xc0>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800c016:	68fb      	ldr	r3, [r7, #12]
 800c018:	3310      	adds	r3, #16
 800c01a:	4618      	mov	r0, r3
 800c01c:	f001 fc74 	bl	800d908 <xTaskRemoveFromEventList>
 800c020:	4603      	mov	r3, r0
 800c022:	2b00      	cmp	r3, #0
 800c024:	d012      	beq.n	800c04c <xQueueGenericReset+0xc0>
				{
					queueYIELD_IF_USING_PREEMPTION();
 800c026:	4b0d      	ldr	r3, [pc, #52]	@ (800c05c <xQueueGenericReset+0xd0>)
 800c028:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800c02c:	601a      	str	r2, [r3, #0]
 800c02e:	f3bf 8f4f 	dsb	sy
 800c032:	f3bf 8f6f 	isb	sy
 800c036:	e009      	b.n	800c04c <xQueueGenericReset+0xc0>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 800c038:	68fb      	ldr	r3, [r7, #12]
 800c03a:	3310      	adds	r3, #16
 800c03c:	4618      	mov	r0, r3
 800c03e:	f7ff fc9d 	bl	800b97c <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 800c042:	68fb      	ldr	r3, [r7, #12]
 800c044:	3324      	adds	r3, #36	@ 0x24
 800c046:	4618      	mov	r0, r3
 800c048:	f7ff fc98 	bl	800b97c <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 800c04c:	f7ff feae 	bl	800bdac <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 800c050:	2301      	movs	r3, #1
}
 800c052:	4618      	mov	r0, r3
 800c054:	3710      	adds	r7, #16
 800c056:	46bd      	mov	sp, r7
 800c058:	bd80      	pop	{r7, pc}
 800c05a:	bf00      	nop
 800c05c:	e000ed04 	.word	0xe000ed04

0800c060 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 800c060:	b580      	push	{r7, lr}
 800c062:	b08e      	sub	sp, #56	@ 0x38
 800c064:	af02      	add	r7, sp, #8
 800c066:	60f8      	str	r0, [r7, #12]
 800c068:	60b9      	str	r1, [r7, #8]
 800c06a:	607a      	str	r2, [r7, #4]
 800c06c:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800c06e:	68fb      	ldr	r3, [r7, #12]
 800c070:	2b00      	cmp	r3, #0
 800c072:	d10b      	bne.n	800c08c <xQueueGenericCreateStatic+0x2c>
	__asm volatile
 800c074:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c078:	f383 8811 	msr	BASEPRI, r3
 800c07c:	f3bf 8f6f 	isb	sy
 800c080:	f3bf 8f4f 	dsb	sy
 800c084:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 800c086:	bf00      	nop
 800c088:	bf00      	nop
 800c08a:	e7fd      	b.n	800c088 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 800c08c:	683b      	ldr	r3, [r7, #0]
 800c08e:	2b00      	cmp	r3, #0
 800c090:	d10b      	bne.n	800c0aa <xQueueGenericCreateStatic+0x4a>
	__asm volatile
 800c092:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c096:	f383 8811 	msr	BASEPRI, r3
 800c09a:	f3bf 8f6f 	isb	sy
 800c09e:	f3bf 8f4f 	dsb	sy
 800c0a2:	627b      	str	r3, [r7, #36]	@ 0x24
}
 800c0a4:	bf00      	nop
 800c0a6:	bf00      	nop
 800c0a8:	e7fd      	b.n	800c0a6 <xQueueGenericCreateStatic+0x46>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 800c0aa:	687b      	ldr	r3, [r7, #4]
 800c0ac:	2b00      	cmp	r3, #0
 800c0ae:	d002      	beq.n	800c0b6 <xQueueGenericCreateStatic+0x56>
 800c0b0:	68bb      	ldr	r3, [r7, #8]
 800c0b2:	2b00      	cmp	r3, #0
 800c0b4:	d001      	beq.n	800c0ba <xQueueGenericCreateStatic+0x5a>
 800c0b6:	2301      	movs	r3, #1
 800c0b8:	e000      	b.n	800c0bc <xQueueGenericCreateStatic+0x5c>
 800c0ba:	2300      	movs	r3, #0
 800c0bc:	2b00      	cmp	r3, #0
 800c0be:	d10b      	bne.n	800c0d8 <xQueueGenericCreateStatic+0x78>
	__asm volatile
 800c0c0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c0c4:	f383 8811 	msr	BASEPRI, r3
 800c0c8:	f3bf 8f6f 	isb	sy
 800c0cc:	f3bf 8f4f 	dsb	sy
 800c0d0:	623b      	str	r3, [r7, #32]
}
 800c0d2:	bf00      	nop
 800c0d4:	bf00      	nop
 800c0d6:	e7fd      	b.n	800c0d4 <xQueueGenericCreateStatic+0x74>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 800c0d8:	687b      	ldr	r3, [r7, #4]
 800c0da:	2b00      	cmp	r3, #0
 800c0dc:	d102      	bne.n	800c0e4 <xQueueGenericCreateStatic+0x84>
 800c0de:	68bb      	ldr	r3, [r7, #8]
 800c0e0:	2b00      	cmp	r3, #0
 800c0e2:	d101      	bne.n	800c0e8 <xQueueGenericCreateStatic+0x88>
 800c0e4:	2301      	movs	r3, #1
 800c0e6:	e000      	b.n	800c0ea <xQueueGenericCreateStatic+0x8a>
 800c0e8:	2300      	movs	r3, #0
 800c0ea:	2b00      	cmp	r3, #0
 800c0ec:	d10b      	bne.n	800c106 <xQueueGenericCreateStatic+0xa6>
	__asm volatile
 800c0ee:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c0f2:	f383 8811 	msr	BASEPRI, r3
 800c0f6:	f3bf 8f6f 	isb	sy
 800c0fa:	f3bf 8f4f 	dsb	sy
 800c0fe:	61fb      	str	r3, [r7, #28]
}
 800c100:	bf00      	nop
 800c102:	bf00      	nop
 800c104:	e7fd      	b.n	800c102 <xQueueGenericCreateStatic+0xa2>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 800c106:	2350      	movs	r3, #80	@ 0x50
 800c108:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 800c10a:	697b      	ldr	r3, [r7, #20]
 800c10c:	2b50      	cmp	r3, #80	@ 0x50
 800c10e:	d00b      	beq.n	800c128 <xQueueGenericCreateStatic+0xc8>
	__asm volatile
 800c110:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c114:	f383 8811 	msr	BASEPRI, r3
 800c118:	f3bf 8f6f 	isb	sy
 800c11c:	f3bf 8f4f 	dsb	sy
 800c120:	61bb      	str	r3, [r7, #24]
}
 800c122:	bf00      	nop
 800c124:	bf00      	nop
 800c126:	e7fd      	b.n	800c124 <xQueueGenericCreateStatic+0xc4>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 800c128:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800c12a:	683b      	ldr	r3, [r7, #0]
 800c12c:	62fb      	str	r3, [r7, #44]	@ 0x2c

		if( pxNewQueue != NULL )
 800c12e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c130:	2b00      	cmp	r3, #0
 800c132:	d00d      	beq.n	800c150 <xQueueGenericCreateStatic+0xf0>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 800c134:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c136:	2201      	movs	r2, #1
 800c138:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800c13c:	f897 2038 	ldrb.w	r2, [r7, #56]	@ 0x38
 800c140:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c142:	9300      	str	r3, [sp, #0]
 800c144:	4613      	mov	r3, r2
 800c146:	687a      	ldr	r2, [r7, #4]
 800c148:	68b9      	ldr	r1, [r7, #8]
 800c14a:	68f8      	ldr	r0, [r7, #12]
 800c14c:	f000 f840 	bl	800c1d0 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800c150:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
	}
 800c152:	4618      	mov	r0, r3
 800c154:	3730      	adds	r7, #48	@ 0x30
 800c156:	46bd      	mov	sp, r7
 800c158:	bd80      	pop	{r7, pc}

0800c15a <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 800c15a:	b580      	push	{r7, lr}
 800c15c:	b08a      	sub	sp, #40	@ 0x28
 800c15e:	af02      	add	r7, sp, #8
 800c160:	60f8      	str	r0, [r7, #12]
 800c162:	60b9      	str	r1, [r7, #8]
 800c164:	4613      	mov	r3, r2
 800c166:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800c168:	68fb      	ldr	r3, [r7, #12]
 800c16a:	2b00      	cmp	r3, #0
 800c16c:	d10b      	bne.n	800c186 <xQueueGenericCreate+0x2c>
	__asm volatile
 800c16e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c172:	f383 8811 	msr	BASEPRI, r3
 800c176:	f3bf 8f6f 	isb	sy
 800c17a:	f3bf 8f4f 	dsb	sy
 800c17e:	613b      	str	r3, [r7, #16]
}
 800c180:	bf00      	nop
 800c182:	bf00      	nop
 800c184:	e7fd      	b.n	800c182 <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800c186:	68fb      	ldr	r3, [r7, #12]
 800c188:	68ba      	ldr	r2, [r7, #8]
 800c18a:	fb02 f303 	mul.w	r3, r2, r3
 800c18e:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 800c190:	69fb      	ldr	r3, [r7, #28]
 800c192:	3350      	adds	r3, #80	@ 0x50
 800c194:	4618      	mov	r0, r3
 800c196:	f7ff fa03 	bl	800b5a0 <pvPortMalloc>
 800c19a:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 800c19c:	69bb      	ldr	r3, [r7, #24]
 800c19e:	2b00      	cmp	r3, #0
 800c1a0:	d011      	beq.n	800c1c6 <xQueueGenericCreate+0x6c>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 800c1a2:	69bb      	ldr	r3, [r7, #24]
 800c1a4:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800c1a6:	697b      	ldr	r3, [r7, #20]
 800c1a8:	3350      	adds	r3, #80	@ 0x50
 800c1aa:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 800c1ac:	69bb      	ldr	r3, [r7, #24]
 800c1ae:	2200      	movs	r2, #0
 800c1b0:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800c1b4:	79fa      	ldrb	r2, [r7, #7]
 800c1b6:	69bb      	ldr	r3, [r7, #24]
 800c1b8:	9300      	str	r3, [sp, #0]
 800c1ba:	4613      	mov	r3, r2
 800c1bc:	697a      	ldr	r2, [r7, #20]
 800c1be:	68b9      	ldr	r1, [r7, #8]
 800c1c0:	68f8      	ldr	r0, [r7, #12]
 800c1c2:	f000 f805 	bl	800c1d0 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800c1c6:	69bb      	ldr	r3, [r7, #24]
	}
 800c1c8:	4618      	mov	r0, r3
 800c1ca:	3720      	adds	r7, #32
 800c1cc:	46bd      	mov	sp, r7
 800c1ce:	bd80      	pop	{r7, pc}

0800c1d0 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 800c1d0:	b580      	push	{r7, lr}
 800c1d2:	b084      	sub	sp, #16
 800c1d4:	af00      	add	r7, sp, #0
 800c1d6:	60f8      	str	r0, [r7, #12]
 800c1d8:	60b9      	str	r1, [r7, #8]
 800c1da:	607a      	str	r2, [r7, #4]
 800c1dc:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 800c1de:	68bb      	ldr	r3, [r7, #8]
 800c1e0:	2b00      	cmp	r3, #0
 800c1e2:	d103      	bne.n	800c1ec <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 800c1e4:	69bb      	ldr	r3, [r7, #24]
 800c1e6:	69ba      	ldr	r2, [r7, #24]
 800c1e8:	601a      	str	r2, [r3, #0]
 800c1ea:	e002      	b.n	800c1f2 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 800c1ec:	69bb      	ldr	r3, [r7, #24]
 800c1ee:	687a      	ldr	r2, [r7, #4]
 800c1f0:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 800c1f2:	69bb      	ldr	r3, [r7, #24]
 800c1f4:	68fa      	ldr	r2, [r7, #12]
 800c1f6:	63da      	str	r2, [r3, #60]	@ 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 800c1f8:	69bb      	ldr	r3, [r7, #24]
 800c1fa:	68ba      	ldr	r2, [r7, #8]
 800c1fc:	641a      	str	r2, [r3, #64]	@ 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800c1fe:	2101      	movs	r1, #1
 800c200:	69b8      	ldr	r0, [r7, #24]
 800c202:	f7ff fec3 	bl	800bf8c <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 800c206:	69bb      	ldr	r3, [r7, #24]
 800c208:	78fa      	ldrb	r2, [r7, #3]
 800c20a:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 800c20e:	bf00      	nop
 800c210:	3710      	adds	r7, #16
 800c212:	46bd      	mov	sp, r7
 800c214:	bd80      	pop	{r7, pc}

0800c216 <xQueueCreateCountingSemaphoreStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateCountingSemaphoreStatic( const UBaseType_t uxMaxCount, const UBaseType_t uxInitialCount, StaticQueue_t *pxStaticQueue )
	{
 800c216:	b580      	push	{r7, lr}
 800c218:	b08a      	sub	sp, #40	@ 0x28
 800c21a:	af02      	add	r7, sp, #8
 800c21c:	60f8      	str	r0, [r7, #12]
 800c21e:	60b9      	str	r1, [r7, #8]
 800c220:	607a      	str	r2, [r7, #4]
	QueueHandle_t xHandle;

		configASSERT( uxMaxCount != 0 );
 800c222:	68fb      	ldr	r3, [r7, #12]
 800c224:	2b00      	cmp	r3, #0
 800c226:	d10b      	bne.n	800c240 <xQueueCreateCountingSemaphoreStatic+0x2a>
	__asm volatile
 800c228:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c22c:	f383 8811 	msr	BASEPRI, r3
 800c230:	f3bf 8f6f 	isb	sy
 800c234:	f3bf 8f4f 	dsb	sy
 800c238:	61bb      	str	r3, [r7, #24]
}
 800c23a:	bf00      	nop
 800c23c:	bf00      	nop
 800c23e:	e7fd      	b.n	800c23c <xQueueCreateCountingSemaphoreStatic+0x26>
		configASSERT( uxInitialCount <= uxMaxCount );
 800c240:	68ba      	ldr	r2, [r7, #8]
 800c242:	68fb      	ldr	r3, [r7, #12]
 800c244:	429a      	cmp	r2, r3
 800c246:	d90b      	bls.n	800c260 <xQueueCreateCountingSemaphoreStatic+0x4a>
	__asm volatile
 800c248:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c24c:	f383 8811 	msr	BASEPRI, r3
 800c250:	f3bf 8f6f 	isb	sy
 800c254:	f3bf 8f4f 	dsb	sy
 800c258:	617b      	str	r3, [r7, #20]
}
 800c25a:	bf00      	nop
 800c25c:	bf00      	nop
 800c25e:	e7fd      	b.n	800c25c <xQueueCreateCountingSemaphoreStatic+0x46>

		xHandle = xQueueGenericCreateStatic( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, NULL, pxStaticQueue, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 800c260:	2302      	movs	r3, #2
 800c262:	9300      	str	r3, [sp, #0]
 800c264:	687b      	ldr	r3, [r7, #4]
 800c266:	2200      	movs	r2, #0
 800c268:	2100      	movs	r1, #0
 800c26a:	68f8      	ldr	r0, [r7, #12]
 800c26c:	f7ff fef8 	bl	800c060 <xQueueGenericCreateStatic>
 800c270:	61f8      	str	r0, [r7, #28]

		if( xHandle != NULL )
 800c272:	69fb      	ldr	r3, [r7, #28]
 800c274:	2b00      	cmp	r3, #0
 800c276:	d002      	beq.n	800c27e <xQueueCreateCountingSemaphoreStatic+0x68>
		{
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 800c278:	69fb      	ldr	r3, [r7, #28]
 800c27a:	68ba      	ldr	r2, [r7, #8]
 800c27c:	639a      	str	r2, [r3, #56]	@ 0x38
		else
		{
			traceCREATE_COUNTING_SEMAPHORE_FAILED();
		}

		return xHandle;
 800c27e:	69fb      	ldr	r3, [r7, #28]
	}
 800c280:	4618      	mov	r0, r3
 800c282:	3720      	adds	r7, #32
 800c284:	46bd      	mov	sp, r7
 800c286:	bd80      	pop	{r7, pc}

0800c288 <xQueueCreateCountingSemaphore>:
/*-----------------------------------------------------------*/

#if( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateCountingSemaphore( const UBaseType_t uxMaxCount, const UBaseType_t uxInitialCount )
	{
 800c288:	b580      	push	{r7, lr}
 800c28a:	b086      	sub	sp, #24
 800c28c:	af00      	add	r7, sp, #0
 800c28e:	6078      	str	r0, [r7, #4]
 800c290:	6039      	str	r1, [r7, #0]
	QueueHandle_t xHandle;

		configASSERT( uxMaxCount != 0 );
 800c292:	687b      	ldr	r3, [r7, #4]
 800c294:	2b00      	cmp	r3, #0
 800c296:	d10b      	bne.n	800c2b0 <xQueueCreateCountingSemaphore+0x28>
	__asm volatile
 800c298:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c29c:	f383 8811 	msr	BASEPRI, r3
 800c2a0:	f3bf 8f6f 	isb	sy
 800c2a4:	f3bf 8f4f 	dsb	sy
 800c2a8:	613b      	str	r3, [r7, #16]
}
 800c2aa:	bf00      	nop
 800c2ac:	bf00      	nop
 800c2ae:	e7fd      	b.n	800c2ac <xQueueCreateCountingSemaphore+0x24>
		configASSERT( uxInitialCount <= uxMaxCount );
 800c2b0:	683a      	ldr	r2, [r7, #0]
 800c2b2:	687b      	ldr	r3, [r7, #4]
 800c2b4:	429a      	cmp	r2, r3
 800c2b6:	d90b      	bls.n	800c2d0 <xQueueCreateCountingSemaphore+0x48>
	__asm volatile
 800c2b8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c2bc:	f383 8811 	msr	BASEPRI, r3
 800c2c0:	f3bf 8f6f 	isb	sy
 800c2c4:	f3bf 8f4f 	dsb	sy
 800c2c8:	60fb      	str	r3, [r7, #12]
}
 800c2ca:	bf00      	nop
 800c2cc:	bf00      	nop
 800c2ce:	e7fd      	b.n	800c2cc <xQueueCreateCountingSemaphore+0x44>

		xHandle = xQueueGenericCreate( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 800c2d0:	2202      	movs	r2, #2
 800c2d2:	2100      	movs	r1, #0
 800c2d4:	6878      	ldr	r0, [r7, #4]
 800c2d6:	f7ff ff40 	bl	800c15a <xQueueGenericCreate>
 800c2da:	6178      	str	r0, [r7, #20]

		if( xHandle != NULL )
 800c2dc:	697b      	ldr	r3, [r7, #20]
 800c2de:	2b00      	cmp	r3, #0
 800c2e0:	d002      	beq.n	800c2e8 <xQueueCreateCountingSemaphore+0x60>
		{
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 800c2e2:	697b      	ldr	r3, [r7, #20]
 800c2e4:	683a      	ldr	r2, [r7, #0]
 800c2e6:	639a      	str	r2, [r3, #56]	@ 0x38
		else
		{
			traceCREATE_COUNTING_SEMAPHORE_FAILED();
		}

		return xHandle;
 800c2e8:	697b      	ldr	r3, [r7, #20]
	}
 800c2ea:	4618      	mov	r0, r3
 800c2ec:	3718      	adds	r7, #24
 800c2ee:	46bd      	mov	sp, r7
 800c2f0:	bd80      	pop	{r7, pc}
	...

0800c2f4 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 800c2f4:	b580      	push	{r7, lr}
 800c2f6:	b08e      	sub	sp, #56	@ 0x38
 800c2f8:	af00      	add	r7, sp, #0
 800c2fa:	60f8      	str	r0, [r7, #12]
 800c2fc:	60b9      	str	r1, [r7, #8]
 800c2fe:	607a      	str	r2, [r7, #4]
 800c300:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 800c302:	2300      	movs	r3, #0
 800c304:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800c306:	68fb      	ldr	r3, [r7, #12]
 800c308:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 800c30a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c30c:	2b00      	cmp	r3, #0
 800c30e:	d10b      	bne.n	800c328 <xQueueGenericSend+0x34>
	__asm volatile
 800c310:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c314:	f383 8811 	msr	BASEPRI, r3
 800c318:	f3bf 8f6f 	isb	sy
 800c31c:	f3bf 8f4f 	dsb	sy
 800c320:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 800c322:	bf00      	nop
 800c324:	bf00      	nop
 800c326:	e7fd      	b.n	800c324 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800c328:	68bb      	ldr	r3, [r7, #8]
 800c32a:	2b00      	cmp	r3, #0
 800c32c:	d103      	bne.n	800c336 <xQueueGenericSend+0x42>
 800c32e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c330:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800c332:	2b00      	cmp	r3, #0
 800c334:	d101      	bne.n	800c33a <xQueueGenericSend+0x46>
 800c336:	2301      	movs	r3, #1
 800c338:	e000      	b.n	800c33c <xQueueGenericSend+0x48>
 800c33a:	2300      	movs	r3, #0
 800c33c:	2b00      	cmp	r3, #0
 800c33e:	d10b      	bne.n	800c358 <xQueueGenericSend+0x64>
	__asm volatile
 800c340:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c344:	f383 8811 	msr	BASEPRI, r3
 800c348:	f3bf 8f6f 	isb	sy
 800c34c:	f3bf 8f4f 	dsb	sy
 800c350:	627b      	str	r3, [r7, #36]	@ 0x24
}
 800c352:	bf00      	nop
 800c354:	bf00      	nop
 800c356:	e7fd      	b.n	800c354 <xQueueGenericSend+0x60>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800c358:	683b      	ldr	r3, [r7, #0]
 800c35a:	2b02      	cmp	r3, #2
 800c35c:	d103      	bne.n	800c366 <xQueueGenericSend+0x72>
 800c35e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c360:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800c362:	2b01      	cmp	r3, #1
 800c364:	d101      	bne.n	800c36a <xQueueGenericSend+0x76>
 800c366:	2301      	movs	r3, #1
 800c368:	e000      	b.n	800c36c <xQueueGenericSend+0x78>
 800c36a:	2300      	movs	r3, #0
 800c36c:	2b00      	cmp	r3, #0
 800c36e:	d10b      	bne.n	800c388 <xQueueGenericSend+0x94>
	__asm volatile
 800c370:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c374:	f383 8811 	msr	BASEPRI, r3
 800c378:	f3bf 8f6f 	isb	sy
 800c37c:	f3bf 8f4f 	dsb	sy
 800c380:	623b      	str	r3, [r7, #32]
}
 800c382:	bf00      	nop
 800c384:	bf00      	nop
 800c386:	e7fd      	b.n	800c384 <xQueueGenericSend+0x90>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800c388:	f001 fc84 	bl	800dc94 <xTaskGetSchedulerState>
 800c38c:	4603      	mov	r3, r0
 800c38e:	2b00      	cmp	r3, #0
 800c390:	d102      	bne.n	800c398 <xQueueGenericSend+0xa4>
 800c392:	687b      	ldr	r3, [r7, #4]
 800c394:	2b00      	cmp	r3, #0
 800c396:	d101      	bne.n	800c39c <xQueueGenericSend+0xa8>
 800c398:	2301      	movs	r3, #1
 800c39a:	e000      	b.n	800c39e <xQueueGenericSend+0xaa>
 800c39c:	2300      	movs	r3, #0
 800c39e:	2b00      	cmp	r3, #0
 800c3a0:	d10b      	bne.n	800c3ba <xQueueGenericSend+0xc6>
	__asm volatile
 800c3a2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c3a6:	f383 8811 	msr	BASEPRI, r3
 800c3aa:	f3bf 8f6f 	isb	sy
 800c3ae:	f3bf 8f4f 	dsb	sy
 800c3b2:	61fb      	str	r3, [r7, #28]
}
 800c3b4:	bf00      	nop
 800c3b6:	bf00      	nop
 800c3b8:	e7fd      	b.n	800c3b6 <xQueueGenericSend+0xc2>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800c3ba:	f7ff fcc5 	bl	800bd48 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800c3be:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c3c0:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800c3c2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c3c4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800c3c6:	429a      	cmp	r2, r3
 800c3c8:	d302      	bcc.n	800c3d0 <xQueueGenericSend+0xdc>
 800c3ca:	683b      	ldr	r3, [r7, #0]
 800c3cc:	2b02      	cmp	r3, #2
 800c3ce:	d129      	bne.n	800c424 <xQueueGenericSend+0x130>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800c3d0:	683a      	ldr	r2, [r7, #0]
 800c3d2:	68b9      	ldr	r1, [r7, #8]
 800c3d4:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800c3d6:	f000 fc6d 	bl	800ccb4 <prvCopyDataToQueue>
 800c3da:	62f8      	str	r0, [r7, #44]	@ 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800c3dc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c3de:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800c3e0:	2b00      	cmp	r3, #0
 800c3e2:	d010      	beq.n	800c406 <xQueueGenericSend+0x112>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800c3e4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c3e6:	3324      	adds	r3, #36	@ 0x24
 800c3e8:	4618      	mov	r0, r3
 800c3ea:	f001 fa8d 	bl	800d908 <xTaskRemoveFromEventList>
 800c3ee:	4603      	mov	r3, r0
 800c3f0:	2b00      	cmp	r3, #0
 800c3f2:	d013      	beq.n	800c41c <xQueueGenericSend+0x128>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 800c3f4:	4b3f      	ldr	r3, [pc, #252]	@ (800c4f4 <xQueueGenericSend+0x200>)
 800c3f6:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800c3fa:	601a      	str	r2, [r3, #0]
 800c3fc:	f3bf 8f4f 	dsb	sy
 800c400:	f3bf 8f6f 	isb	sy
 800c404:	e00a      	b.n	800c41c <xQueueGenericSend+0x128>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 800c406:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c408:	2b00      	cmp	r3, #0
 800c40a:	d007      	beq.n	800c41c <xQueueGenericSend+0x128>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 800c40c:	4b39      	ldr	r3, [pc, #228]	@ (800c4f4 <xQueueGenericSend+0x200>)
 800c40e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800c412:	601a      	str	r2, [r3, #0]
 800c414:	f3bf 8f4f 	dsb	sy
 800c418:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 800c41c:	f7ff fcc6 	bl	800bdac <vPortExitCritical>
				return pdPASS;
 800c420:	2301      	movs	r3, #1
 800c422:	e063      	b.n	800c4ec <xQueueGenericSend+0x1f8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800c424:	687b      	ldr	r3, [r7, #4]
 800c426:	2b00      	cmp	r3, #0
 800c428:	d103      	bne.n	800c432 <xQueueGenericSend+0x13e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800c42a:	f7ff fcbf 	bl	800bdac <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 800c42e:	2300      	movs	r3, #0
 800c430:	e05c      	b.n	800c4ec <xQueueGenericSend+0x1f8>
				}
				else if( xEntryTimeSet == pdFALSE )
 800c432:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800c434:	2b00      	cmp	r3, #0
 800c436:	d106      	bne.n	800c446 <xQueueGenericSend+0x152>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800c438:	f107 0314 	add.w	r3, r7, #20
 800c43c:	4618      	mov	r0, r3
 800c43e:	f001 fac7 	bl	800d9d0 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800c442:	2301      	movs	r3, #1
 800c444:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800c446:	f7ff fcb1 	bl	800bdac <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800c44a:	f001 f82f 	bl	800d4ac <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800c44e:	f7ff fc7b 	bl	800bd48 <vPortEnterCritical>
 800c452:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c454:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800c458:	b25b      	sxtb	r3, r3
 800c45a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c45e:	d103      	bne.n	800c468 <xQueueGenericSend+0x174>
 800c460:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c462:	2200      	movs	r2, #0
 800c464:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800c468:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c46a:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800c46e:	b25b      	sxtb	r3, r3
 800c470:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c474:	d103      	bne.n	800c47e <xQueueGenericSend+0x18a>
 800c476:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c478:	2200      	movs	r2, #0
 800c47a:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800c47e:	f7ff fc95 	bl	800bdac <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800c482:	1d3a      	adds	r2, r7, #4
 800c484:	f107 0314 	add.w	r3, r7, #20
 800c488:	4611      	mov	r1, r2
 800c48a:	4618      	mov	r0, r3
 800c48c:	f001 fab6 	bl	800d9fc <xTaskCheckForTimeOut>
 800c490:	4603      	mov	r3, r0
 800c492:	2b00      	cmp	r3, #0
 800c494:	d124      	bne.n	800c4e0 <xQueueGenericSend+0x1ec>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 800c496:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800c498:	f000 fd04 	bl	800cea4 <prvIsQueueFull>
 800c49c:	4603      	mov	r3, r0
 800c49e:	2b00      	cmp	r3, #0
 800c4a0:	d018      	beq.n	800c4d4 <xQueueGenericSend+0x1e0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800c4a2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c4a4:	3310      	adds	r3, #16
 800c4a6:	687a      	ldr	r2, [r7, #4]
 800c4a8:	4611      	mov	r1, r2
 800c4aa:	4618      	mov	r0, r3
 800c4ac:	f001 f9da 	bl	800d864 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 800c4b0:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800c4b2:	f000 fc8f 	bl	800cdd4 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 800c4b6:	f001 f807 	bl	800d4c8 <xTaskResumeAll>
 800c4ba:	4603      	mov	r3, r0
 800c4bc:	2b00      	cmp	r3, #0
 800c4be:	f47f af7c 	bne.w	800c3ba <xQueueGenericSend+0xc6>
				{
					portYIELD_WITHIN_API();
 800c4c2:	4b0c      	ldr	r3, [pc, #48]	@ (800c4f4 <xQueueGenericSend+0x200>)
 800c4c4:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800c4c8:	601a      	str	r2, [r3, #0]
 800c4ca:	f3bf 8f4f 	dsb	sy
 800c4ce:	f3bf 8f6f 	isb	sy
 800c4d2:	e772      	b.n	800c3ba <xQueueGenericSend+0xc6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 800c4d4:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800c4d6:	f000 fc7d 	bl	800cdd4 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800c4da:	f000 fff5 	bl	800d4c8 <xTaskResumeAll>
 800c4de:	e76c      	b.n	800c3ba <xQueueGenericSend+0xc6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 800c4e0:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800c4e2:	f000 fc77 	bl	800cdd4 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800c4e6:	f000 ffef 	bl	800d4c8 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 800c4ea:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 800c4ec:	4618      	mov	r0, r3
 800c4ee:	3738      	adds	r7, #56	@ 0x38
 800c4f0:	46bd      	mov	sp, r7
 800c4f2:	bd80      	pop	{r7, pc}
 800c4f4:	e000ed04 	.word	0xe000ed04

0800c4f8 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 800c4f8:	b580      	push	{r7, lr}
 800c4fa:	b090      	sub	sp, #64	@ 0x40
 800c4fc:	af00      	add	r7, sp, #0
 800c4fe:	60f8      	str	r0, [r7, #12]
 800c500:	60b9      	str	r1, [r7, #8]
 800c502:	607a      	str	r2, [r7, #4]
 800c504:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800c506:	68fb      	ldr	r3, [r7, #12]
 800c508:	63bb      	str	r3, [r7, #56]	@ 0x38

	configASSERT( pxQueue );
 800c50a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c50c:	2b00      	cmp	r3, #0
 800c50e:	d10b      	bne.n	800c528 <xQueueGenericSendFromISR+0x30>
	__asm volatile
 800c510:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c514:	f383 8811 	msr	BASEPRI, r3
 800c518:	f3bf 8f6f 	isb	sy
 800c51c:	f3bf 8f4f 	dsb	sy
 800c520:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 800c522:	bf00      	nop
 800c524:	bf00      	nop
 800c526:	e7fd      	b.n	800c524 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800c528:	68bb      	ldr	r3, [r7, #8]
 800c52a:	2b00      	cmp	r3, #0
 800c52c:	d103      	bne.n	800c536 <xQueueGenericSendFromISR+0x3e>
 800c52e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c530:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800c532:	2b00      	cmp	r3, #0
 800c534:	d101      	bne.n	800c53a <xQueueGenericSendFromISR+0x42>
 800c536:	2301      	movs	r3, #1
 800c538:	e000      	b.n	800c53c <xQueueGenericSendFromISR+0x44>
 800c53a:	2300      	movs	r3, #0
 800c53c:	2b00      	cmp	r3, #0
 800c53e:	d10b      	bne.n	800c558 <xQueueGenericSendFromISR+0x60>
	__asm volatile
 800c540:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c544:	f383 8811 	msr	BASEPRI, r3
 800c548:	f3bf 8f6f 	isb	sy
 800c54c:	f3bf 8f4f 	dsb	sy
 800c550:	627b      	str	r3, [r7, #36]	@ 0x24
}
 800c552:	bf00      	nop
 800c554:	bf00      	nop
 800c556:	e7fd      	b.n	800c554 <xQueueGenericSendFromISR+0x5c>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800c558:	683b      	ldr	r3, [r7, #0]
 800c55a:	2b02      	cmp	r3, #2
 800c55c:	d103      	bne.n	800c566 <xQueueGenericSendFromISR+0x6e>
 800c55e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c560:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800c562:	2b01      	cmp	r3, #1
 800c564:	d101      	bne.n	800c56a <xQueueGenericSendFromISR+0x72>
 800c566:	2301      	movs	r3, #1
 800c568:	e000      	b.n	800c56c <xQueueGenericSendFromISR+0x74>
 800c56a:	2300      	movs	r3, #0
 800c56c:	2b00      	cmp	r3, #0
 800c56e:	d10b      	bne.n	800c588 <xQueueGenericSendFromISR+0x90>
	__asm volatile
 800c570:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c574:	f383 8811 	msr	BASEPRI, r3
 800c578:	f3bf 8f6f 	isb	sy
 800c57c:	f3bf 8f4f 	dsb	sy
 800c580:	623b      	str	r3, [r7, #32]
}
 800c582:	bf00      	nop
 800c584:	bf00      	nop
 800c586:	e7fd      	b.n	800c584 <xQueueGenericSendFromISR+0x8c>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800c588:	f7ff fcbe 	bl	800bf08 <vPortValidateInterruptPriority>
	__asm volatile
 800c58c:	f3ef 8211 	mrs	r2, BASEPRI
 800c590:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c594:	f383 8811 	msr	BASEPRI, r3
 800c598:	f3bf 8f6f 	isb	sy
 800c59c:	f3bf 8f4f 	dsb	sy
 800c5a0:	61fa      	str	r2, [r7, #28]
 800c5a2:	61bb      	str	r3, [r7, #24]
	return ulOriginalBASEPRI;
 800c5a4:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800c5a6:	637b      	str	r3, [r7, #52]	@ 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800c5a8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c5aa:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800c5ac:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c5ae:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800c5b0:	429a      	cmp	r2, r3
 800c5b2:	d302      	bcc.n	800c5ba <xQueueGenericSendFromISR+0xc2>
 800c5b4:	683b      	ldr	r3, [r7, #0]
 800c5b6:	2b02      	cmp	r3, #2
 800c5b8:	d12f      	bne.n	800c61a <xQueueGenericSendFromISR+0x122>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800c5ba:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c5bc:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800c5c0:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 800c5c4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c5c6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800c5c8:	62fb      	str	r3, [r7, #44]	@ 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800c5ca:	683a      	ldr	r2, [r7, #0]
 800c5cc:	68b9      	ldr	r1, [r7, #8]
 800c5ce:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 800c5d0:	f000 fb70 	bl	800ccb4 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800c5d4:	f997 3033 	ldrsb.w	r3, [r7, #51]	@ 0x33
 800c5d8:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c5dc:	d112      	bne.n	800c604 <xQueueGenericSendFromISR+0x10c>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800c5de:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c5e0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800c5e2:	2b00      	cmp	r3, #0
 800c5e4:	d016      	beq.n	800c614 <xQueueGenericSendFromISR+0x11c>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800c5e6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c5e8:	3324      	adds	r3, #36	@ 0x24
 800c5ea:	4618      	mov	r0, r3
 800c5ec:	f001 f98c 	bl	800d908 <xTaskRemoveFromEventList>
 800c5f0:	4603      	mov	r3, r0
 800c5f2:	2b00      	cmp	r3, #0
 800c5f4:	d00e      	beq.n	800c614 <xQueueGenericSendFromISR+0x11c>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800c5f6:	687b      	ldr	r3, [r7, #4]
 800c5f8:	2b00      	cmp	r3, #0
 800c5fa:	d00b      	beq.n	800c614 <xQueueGenericSendFromISR+0x11c>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800c5fc:	687b      	ldr	r3, [r7, #4]
 800c5fe:	2201      	movs	r2, #1
 800c600:	601a      	str	r2, [r3, #0]
 800c602:	e007      	b.n	800c614 <xQueueGenericSendFromISR+0x11c>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800c604:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 800c608:	3301      	adds	r3, #1
 800c60a:	b2db      	uxtb	r3, r3
 800c60c:	b25a      	sxtb	r2, r3
 800c60e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c610:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
			}

			xReturn = pdPASS;
 800c614:	2301      	movs	r3, #1
 800c616:	63fb      	str	r3, [r7, #60]	@ 0x3c
		{
 800c618:	e001      	b.n	800c61e <xQueueGenericSendFromISR+0x126>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800c61a:	2300      	movs	r3, #0
 800c61c:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800c61e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800c620:	617b      	str	r3, [r7, #20]
	__asm volatile
 800c622:	697b      	ldr	r3, [r7, #20]
 800c624:	f383 8811 	msr	BASEPRI, r3
}
 800c628:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800c62a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
}
 800c62c:	4618      	mov	r0, r3
 800c62e:	3740      	adds	r7, #64	@ 0x40
 800c630:	46bd      	mov	sp, r7
 800c632:	bd80      	pop	{r7, pc}

0800c634 <xQueueGiveFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGiveFromISR( QueueHandle_t xQueue, BaseType_t * const pxHigherPriorityTaskWoken )
{
 800c634:	b580      	push	{r7, lr}
 800c636:	b08e      	sub	sp, #56	@ 0x38
 800c638:	af00      	add	r7, sp, #0
 800c63a:	6078      	str	r0, [r7, #4]
 800c63c:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800c63e:	687b      	ldr	r3, [r7, #4]
 800c640:	633b      	str	r3, [r7, #48]	@ 0x30
	item size is 0.  Don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */

	configASSERT( pxQueue );
 800c642:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c644:	2b00      	cmp	r3, #0
 800c646:	d10b      	bne.n	800c660 <xQueueGiveFromISR+0x2c>
	__asm volatile
 800c648:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c64c:	f383 8811 	msr	BASEPRI, r3
 800c650:	f3bf 8f6f 	isb	sy
 800c654:	f3bf 8f4f 	dsb	sy
 800c658:	623b      	str	r3, [r7, #32]
}
 800c65a:	bf00      	nop
 800c65c:	bf00      	nop
 800c65e:	e7fd      	b.n	800c65c <xQueueGiveFromISR+0x28>

	/* xQueueGenericSendFromISR() should be used instead of xQueueGiveFromISR()
	if the item size is not 0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 800c660:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c662:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800c664:	2b00      	cmp	r3, #0
 800c666:	d00b      	beq.n	800c680 <xQueueGiveFromISR+0x4c>
	__asm volatile
 800c668:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c66c:	f383 8811 	msr	BASEPRI, r3
 800c670:	f3bf 8f6f 	isb	sy
 800c674:	f3bf 8f4f 	dsb	sy
 800c678:	61fb      	str	r3, [r7, #28]
}
 800c67a:	bf00      	nop
 800c67c:	bf00      	nop
 800c67e:	e7fd      	b.n	800c67c <xQueueGiveFromISR+0x48>

	/* Normally a mutex would not be given from an interrupt, especially if
	there is a mutex holder, as priority inheritance makes no sense for an
	interrupts, only tasks. */
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->u.xSemaphore.xMutexHolder != NULL ) ) );
 800c680:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c682:	681b      	ldr	r3, [r3, #0]
 800c684:	2b00      	cmp	r3, #0
 800c686:	d103      	bne.n	800c690 <xQueueGiveFromISR+0x5c>
 800c688:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c68a:	689b      	ldr	r3, [r3, #8]
 800c68c:	2b00      	cmp	r3, #0
 800c68e:	d101      	bne.n	800c694 <xQueueGiveFromISR+0x60>
 800c690:	2301      	movs	r3, #1
 800c692:	e000      	b.n	800c696 <xQueueGiveFromISR+0x62>
 800c694:	2300      	movs	r3, #0
 800c696:	2b00      	cmp	r3, #0
 800c698:	d10b      	bne.n	800c6b2 <xQueueGiveFromISR+0x7e>
	__asm volatile
 800c69a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c69e:	f383 8811 	msr	BASEPRI, r3
 800c6a2:	f3bf 8f6f 	isb	sy
 800c6a6:	f3bf 8f4f 	dsb	sy
 800c6aa:	61bb      	str	r3, [r7, #24]
}
 800c6ac:	bf00      	nop
 800c6ae:	bf00      	nop
 800c6b0:	e7fd      	b.n	800c6ae <xQueueGiveFromISR+0x7a>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800c6b2:	f7ff fc29 	bl	800bf08 <vPortValidateInterruptPriority>
	__asm volatile
 800c6b6:	f3ef 8211 	mrs	r2, BASEPRI
 800c6ba:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c6be:	f383 8811 	msr	BASEPRI, r3
 800c6c2:	f3bf 8f6f 	isb	sy
 800c6c6:	f3bf 8f4f 	dsb	sy
 800c6ca:	617a      	str	r2, [r7, #20]
 800c6cc:	613b      	str	r3, [r7, #16]
	return ulOriginalBASEPRI;
 800c6ce:	697b      	ldr	r3, [r7, #20]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800c6d0:	62fb      	str	r3, [r7, #44]	@ 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800c6d2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c6d4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800c6d6:	62bb      	str	r3, [r7, #40]	@ 0x28

		/* When the queue is used to implement a semaphore no data is ever
		moved through the queue but it is still valid to see if the queue 'has
		space'. */
		if( uxMessagesWaiting < pxQueue->uxLength )
 800c6d8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c6da:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800c6dc:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800c6de:	429a      	cmp	r2, r3
 800c6e0:	d22b      	bcs.n	800c73a <xQueueGiveFromISR+0x106>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800c6e2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c6e4:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800c6e8:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
			holder - and if there is a mutex holder then the mutex cannot be
			given from an ISR.  As this is the ISR version of the function it
			can be assumed there is no mutex holder and no need to determine if
			priority disinheritance is needed.  Simply increase the count of
			messages (semaphores) available. */
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800c6ec:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c6ee:	1c5a      	adds	r2, r3, #1
 800c6f0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c6f2:	639a      	str	r2, [r3, #56]	@ 0x38

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800c6f4:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 800c6f8:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c6fc:	d112      	bne.n	800c724 <xQueueGiveFromISR+0xf0>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800c6fe:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c700:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800c702:	2b00      	cmp	r3, #0
 800c704:	d016      	beq.n	800c734 <xQueueGiveFromISR+0x100>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800c706:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c708:	3324      	adds	r3, #36	@ 0x24
 800c70a:	4618      	mov	r0, r3
 800c70c:	f001 f8fc 	bl	800d908 <xTaskRemoveFromEventList>
 800c710:	4603      	mov	r3, r0
 800c712:	2b00      	cmp	r3, #0
 800c714:	d00e      	beq.n	800c734 <xQueueGiveFromISR+0x100>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800c716:	683b      	ldr	r3, [r7, #0]
 800c718:	2b00      	cmp	r3, #0
 800c71a:	d00b      	beq.n	800c734 <xQueueGiveFromISR+0x100>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800c71c:	683b      	ldr	r3, [r7, #0]
 800c71e:	2201      	movs	r2, #1
 800c720:	601a      	str	r2, [r3, #0]
 800c722:	e007      	b.n	800c734 <xQueueGiveFromISR+0x100>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800c724:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800c728:	3301      	adds	r3, #1
 800c72a:	b2db      	uxtb	r3, r3
 800c72c:	b25a      	sxtb	r2, r3
 800c72e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c730:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
			}

			xReturn = pdPASS;
 800c734:	2301      	movs	r3, #1
 800c736:	637b      	str	r3, [r7, #52]	@ 0x34
 800c738:	e001      	b.n	800c73e <xQueueGiveFromISR+0x10a>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800c73a:	2300      	movs	r3, #0
 800c73c:	637b      	str	r3, [r7, #52]	@ 0x34
 800c73e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c740:	60fb      	str	r3, [r7, #12]
	__asm volatile
 800c742:	68fb      	ldr	r3, [r7, #12]
 800c744:	f383 8811 	msr	BASEPRI, r3
}
 800c748:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800c74a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
}
 800c74c:	4618      	mov	r0, r3
 800c74e:	3738      	adds	r7, #56	@ 0x38
 800c750:	46bd      	mov	sp, r7
 800c752:	bd80      	pop	{r7, pc}

0800c754 <xQueueReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 800c754:	b580      	push	{r7, lr}
 800c756:	b08c      	sub	sp, #48	@ 0x30
 800c758:	af00      	add	r7, sp, #0
 800c75a:	60f8      	str	r0, [r7, #12]
 800c75c:	60b9      	str	r1, [r7, #8]
 800c75e:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 800c760:	2300      	movs	r3, #0
 800c762:	62fb      	str	r3, [r7, #44]	@ 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800c764:	68fb      	ldr	r3, [r7, #12]
 800c766:	62bb      	str	r3, [r7, #40]	@ 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800c768:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c76a:	2b00      	cmp	r3, #0
 800c76c:	d10b      	bne.n	800c786 <xQueueReceive+0x32>
	__asm volatile
 800c76e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c772:	f383 8811 	msr	BASEPRI, r3
 800c776:	f3bf 8f6f 	isb	sy
 800c77a:	f3bf 8f4f 	dsb	sy
 800c77e:	623b      	str	r3, [r7, #32]
}
 800c780:	bf00      	nop
 800c782:	bf00      	nop
 800c784:	e7fd      	b.n	800c782 <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800c786:	68bb      	ldr	r3, [r7, #8]
 800c788:	2b00      	cmp	r3, #0
 800c78a:	d103      	bne.n	800c794 <xQueueReceive+0x40>
 800c78c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c78e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800c790:	2b00      	cmp	r3, #0
 800c792:	d101      	bne.n	800c798 <xQueueReceive+0x44>
 800c794:	2301      	movs	r3, #1
 800c796:	e000      	b.n	800c79a <xQueueReceive+0x46>
 800c798:	2300      	movs	r3, #0
 800c79a:	2b00      	cmp	r3, #0
 800c79c:	d10b      	bne.n	800c7b6 <xQueueReceive+0x62>
	__asm volatile
 800c79e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c7a2:	f383 8811 	msr	BASEPRI, r3
 800c7a6:	f3bf 8f6f 	isb	sy
 800c7aa:	f3bf 8f4f 	dsb	sy
 800c7ae:	61fb      	str	r3, [r7, #28]
}
 800c7b0:	bf00      	nop
 800c7b2:	bf00      	nop
 800c7b4:	e7fd      	b.n	800c7b2 <xQueueReceive+0x5e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800c7b6:	f001 fa6d 	bl	800dc94 <xTaskGetSchedulerState>
 800c7ba:	4603      	mov	r3, r0
 800c7bc:	2b00      	cmp	r3, #0
 800c7be:	d102      	bne.n	800c7c6 <xQueueReceive+0x72>
 800c7c0:	687b      	ldr	r3, [r7, #4]
 800c7c2:	2b00      	cmp	r3, #0
 800c7c4:	d101      	bne.n	800c7ca <xQueueReceive+0x76>
 800c7c6:	2301      	movs	r3, #1
 800c7c8:	e000      	b.n	800c7cc <xQueueReceive+0x78>
 800c7ca:	2300      	movs	r3, #0
 800c7cc:	2b00      	cmp	r3, #0
 800c7ce:	d10b      	bne.n	800c7e8 <xQueueReceive+0x94>
	__asm volatile
 800c7d0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c7d4:	f383 8811 	msr	BASEPRI, r3
 800c7d8:	f3bf 8f6f 	isb	sy
 800c7dc:	f3bf 8f4f 	dsb	sy
 800c7e0:	61bb      	str	r3, [r7, #24]
}
 800c7e2:	bf00      	nop
 800c7e4:	bf00      	nop
 800c7e6:	e7fd      	b.n	800c7e4 <xQueueReceive+0x90>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800c7e8:	f7ff faae 	bl	800bd48 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800c7ec:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c7ee:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800c7f0:	627b      	str	r3, [r7, #36]	@ 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800c7f2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c7f4:	2b00      	cmp	r3, #0
 800c7f6:	d01f      	beq.n	800c838 <xQueueReceive+0xe4>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 800c7f8:	68b9      	ldr	r1, [r7, #8]
 800c7fa:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800c7fc:	f000 fac4 	bl	800cd88 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800c800:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c802:	1e5a      	subs	r2, r3, #1
 800c804:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c806:	639a      	str	r2, [r3, #56]	@ 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800c808:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c80a:	691b      	ldr	r3, [r3, #16]
 800c80c:	2b00      	cmp	r3, #0
 800c80e:	d00f      	beq.n	800c830 <xQueueReceive+0xdc>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800c810:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c812:	3310      	adds	r3, #16
 800c814:	4618      	mov	r0, r3
 800c816:	f001 f877 	bl	800d908 <xTaskRemoveFromEventList>
 800c81a:	4603      	mov	r3, r0
 800c81c:	2b00      	cmp	r3, #0
 800c81e:	d007      	beq.n	800c830 <xQueueReceive+0xdc>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800c820:	4b3c      	ldr	r3, [pc, #240]	@ (800c914 <xQueueReceive+0x1c0>)
 800c822:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800c826:	601a      	str	r2, [r3, #0]
 800c828:	f3bf 8f4f 	dsb	sy
 800c82c:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800c830:	f7ff fabc 	bl	800bdac <vPortExitCritical>
				return pdPASS;
 800c834:	2301      	movs	r3, #1
 800c836:	e069      	b.n	800c90c <xQueueReceive+0x1b8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800c838:	687b      	ldr	r3, [r7, #4]
 800c83a:	2b00      	cmp	r3, #0
 800c83c:	d103      	bne.n	800c846 <xQueueReceive+0xf2>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800c83e:	f7ff fab5 	bl	800bdac <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800c842:	2300      	movs	r3, #0
 800c844:	e062      	b.n	800c90c <xQueueReceive+0x1b8>
				}
				else if( xEntryTimeSet == pdFALSE )
 800c846:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c848:	2b00      	cmp	r3, #0
 800c84a:	d106      	bne.n	800c85a <xQueueReceive+0x106>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800c84c:	f107 0310 	add.w	r3, r7, #16
 800c850:	4618      	mov	r0, r3
 800c852:	f001 f8bd 	bl	800d9d0 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800c856:	2301      	movs	r3, #1
 800c858:	62fb      	str	r3, [r7, #44]	@ 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800c85a:	f7ff faa7 	bl	800bdac <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800c85e:	f000 fe25 	bl	800d4ac <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800c862:	f7ff fa71 	bl	800bd48 <vPortEnterCritical>
 800c866:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c868:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800c86c:	b25b      	sxtb	r3, r3
 800c86e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c872:	d103      	bne.n	800c87c <xQueueReceive+0x128>
 800c874:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c876:	2200      	movs	r2, #0
 800c878:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800c87c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c87e:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800c882:	b25b      	sxtb	r3, r3
 800c884:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c888:	d103      	bne.n	800c892 <xQueueReceive+0x13e>
 800c88a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c88c:	2200      	movs	r2, #0
 800c88e:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800c892:	f7ff fa8b 	bl	800bdac <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800c896:	1d3a      	adds	r2, r7, #4
 800c898:	f107 0310 	add.w	r3, r7, #16
 800c89c:	4611      	mov	r1, r2
 800c89e:	4618      	mov	r0, r3
 800c8a0:	f001 f8ac 	bl	800d9fc <xTaskCheckForTimeOut>
 800c8a4:	4603      	mov	r3, r0
 800c8a6:	2b00      	cmp	r3, #0
 800c8a8:	d123      	bne.n	800c8f2 <xQueueReceive+0x19e>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800c8aa:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800c8ac:	f000 fae4 	bl	800ce78 <prvIsQueueEmpty>
 800c8b0:	4603      	mov	r3, r0
 800c8b2:	2b00      	cmp	r3, #0
 800c8b4:	d017      	beq.n	800c8e6 <xQueueReceive+0x192>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800c8b6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c8b8:	3324      	adds	r3, #36	@ 0x24
 800c8ba:	687a      	ldr	r2, [r7, #4]
 800c8bc:	4611      	mov	r1, r2
 800c8be:	4618      	mov	r0, r3
 800c8c0:	f000 ffd0 	bl	800d864 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800c8c4:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800c8c6:	f000 fa85 	bl	800cdd4 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800c8ca:	f000 fdfd 	bl	800d4c8 <xTaskResumeAll>
 800c8ce:	4603      	mov	r3, r0
 800c8d0:	2b00      	cmp	r3, #0
 800c8d2:	d189      	bne.n	800c7e8 <xQueueReceive+0x94>
				{
					portYIELD_WITHIN_API();
 800c8d4:	4b0f      	ldr	r3, [pc, #60]	@ (800c914 <xQueueReceive+0x1c0>)
 800c8d6:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800c8da:	601a      	str	r2, [r3, #0]
 800c8dc:	f3bf 8f4f 	dsb	sy
 800c8e0:	f3bf 8f6f 	isb	sy
 800c8e4:	e780      	b.n	800c7e8 <xQueueReceive+0x94>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 800c8e6:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800c8e8:	f000 fa74 	bl	800cdd4 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800c8ec:	f000 fdec 	bl	800d4c8 <xTaskResumeAll>
 800c8f0:	e77a      	b.n	800c7e8 <xQueueReceive+0x94>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 800c8f2:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800c8f4:	f000 fa6e 	bl	800cdd4 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800c8f8:	f000 fde6 	bl	800d4c8 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800c8fc:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800c8fe:	f000 fabb 	bl	800ce78 <prvIsQueueEmpty>
 800c902:	4603      	mov	r3, r0
 800c904:	2b00      	cmp	r3, #0
 800c906:	f43f af6f 	beq.w	800c7e8 <xQueueReceive+0x94>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800c90a:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800c90c:	4618      	mov	r0, r3
 800c90e:	3730      	adds	r7, #48	@ 0x30
 800c910:	46bd      	mov	sp, r7
 800c912:	bd80      	pop	{r7, pc}
 800c914:	e000ed04 	.word	0xe000ed04

0800c918 <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 800c918:	b580      	push	{r7, lr}
 800c91a:	b08e      	sub	sp, #56	@ 0x38
 800c91c:	af00      	add	r7, sp, #0
 800c91e:	6078      	str	r0, [r7, #4]
 800c920:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 800c922:	2300      	movs	r3, #0
 800c924:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800c926:	687b      	ldr	r3, [r7, #4]
 800c928:	62fb      	str	r3, [r7, #44]	@ 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 800c92a:	2300      	movs	r3, #0
 800c92c:	633b      	str	r3, [r7, #48]	@ 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800c92e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c930:	2b00      	cmp	r3, #0
 800c932:	d10b      	bne.n	800c94c <xQueueSemaphoreTake+0x34>
	__asm volatile
 800c934:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c938:	f383 8811 	msr	BASEPRI, r3
 800c93c:	f3bf 8f6f 	isb	sy
 800c940:	f3bf 8f4f 	dsb	sy
 800c944:	623b      	str	r3, [r7, #32]
}
 800c946:	bf00      	nop
 800c948:	bf00      	nop
 800c94a:	e7fd      	b.n	800c948 <xQueueSemaphoreTake+0x30>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 800c94c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c94e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800c950:	2b00      	cmp	r3, #0
 800c952:	d00b      	beq.n	800c96c <xQueueSemaphoreTake+0x54>
	__asm volatile
 800c954:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c958:	f383 8811 	msr	BASEPRI, r3
 800c95c:	f3bf 8f6f 	isb	sy
 800c960:	f3bf 8f4f 	dsb	sy
 800c964:	61fb      	str	r3, [r7, #28]
}
 800c966:	bf00      	nop
 800c968:	bf00      	nop
 800c96a:	e7fd      	b.n	800c968 <xQueueSemaphoreTake+0x50>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800c96c:	f001 f992 	bl	800dc94 <xTaskGetSchedulerState>
 800c970:	4603      	mov	r3, r0
 800c972:	2b00      	cmp	r3, #0
 800c974:	d102      	bne.n	800c97c <xQueueSemaphoreTake+0x64>
 800c976:	683b      	ldr	r3, [r7, #0]
 800c978:	2b00      	cmp	r3, #0
 800c97a:	d101      	bne.n	800c980 <xQueueSemaphoreTake+0x68>
 800c97c:	2301      	movs	r3, #1
 800c97e:	e000      	b.n	800c982 <xQueueSemaphoreTake+0x6a>
 800c980:	2300      	movs	r3, #0
 800c982:	2b00      	cmp	r3, #0
 800c984:	d10b      	bne.n	800c99e <xQueueSemaphoreTake+0x86>
	__asm volatile
 800c986:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c98a:	f383 8811 	msr	BASEPRI, r3
 800c98e:	f3bf 8f6f 	isb	sy
 800c992:	f3bf 8f4f 	dsb	sy
 800c996:	61bb      	str	r3, [r7, #24]
}
 800c998:	bf00      	nop
 800c99a:	bf00      	nop
 800c99c:	e7fd      	b.n	800c99a <xQueueSemaphoreTake+0x82>
	/*lint -save -e904 This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800c99e:	f7ff f9d3 	bl	800bd48 <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 800c9a2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c9a4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800c9a6:	62bb      	str	r3, [r7, #40]	@ 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 800c9a8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c9aa:	2b00      	cmp	r3, #0
 800c9ac:	d024      	beq.n	800c9f8 <xQueueSemaphoreTake+0xe0>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 800c9ae:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c9b0:	1e5a      	subs	r2, r3, #1
 800c9b2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c9b4:	639a      	str	r2, [r3, #56]	@ 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800c9b6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c9b8:	681b      	ldr	r3, [r3, #0]
 800c9ba:	2b00      	cmp	r3, #0
 800c9bc:	d104      	bne.n	800c9c8 <xQueueSemaphoreTake+0xb0>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 800c9be:	f001 fae3 	bl	800df88 <pvTaskIncrementMutexHeldCount>
 800c9c2:	4602      	mov	r2, r0
 800c9c4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c9c6:	609a      	str	r2, [r3, #8]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800c9c8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c9ca:	691b      	ldr	r3, [r3, #16]
 800c9cc:	2b00      	cmp	r3, #0
 800c9ce:	d00f      	beq.n	800c9f0 <xQueueSemaphoreTake+0xd8>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800c9d0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c9d2:	3310      	adds	r3, #16
 800c9d4:	4618      	mov	r0, r3
 800c9d6:	f000 ff97 	bl	800d908 <xTaskRemoveFromEventList>
 800c9da:	4603      	mov	r3, r0
 800c9dc:	2b00      	cmp	r3, #0
 800c9de:	d007      	beq.n	800c9f0 <xQueueSemaphoreTake+0xd8>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800c9e0:	4b54      	ldr	r3, [pc, #336]	@ (800cb34 <xQueueSemaphoreTake+0x21c>)
 800c9e2:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800c9e6:	601a      	str	r2, [r3, #0]
 800c9e8:	f3bf 8f4f 	dsb	sy
 800c9ec:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800c9f0:	f7ff f9dc 	bl	800bdac <vPortExitCritical>
				return pdPASS;
 800c9f4:	2301      	movs	r3, #1
 800c9f6:	e098      	b.n	800cb2a <xQueueSemaphoreTake+0x212>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800c9f8:	683b      	ldr	r3, [r7, #0]
 800c9fa:	2b00      	cmp	r3, #0
 800c9fc:	d112      	bne.n	800ca24 <xQueueSemaphoreTake+0x10c>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 800c9fe:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ca00:	2b00      	cmp	r3, #0
 800ca02:	d00b      	beq.n	800ca1c <xQueueSemaphoreTake+0x104>
	__asm volatile
 800ca04:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ca08:	f383 8811 	msr	BASEPRI, r3
 800ca0c:	f3bf 8f6f 	isb	sy
 800ca10:	f3bf 8f4f 	dsb	sy
 800ca14:	617b      	str	r3, [r7, #20]
}
 800ca16:	bf00      	nop
 800ca18:	bf00      	nop
 800ca1a:	e7fd      	b.n	800ca18 <xQueueSemaphoreTake+0x100>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 800ca1c:	f7ff f9c6 	bl	800bdac <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800ca20:	2300      	movs	r3, #0
 800ca22:	e082      	b.n	800cb2a <xQueueSemaphoreTake+0x212>
				}
				else if( xEntryTimeSet == pdFALSE )
 800ca24:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800ca26:	2b00      	cmp	r3, #0
 800ca28:	d106      	bne.n	800ca38 <xQueueSemaphoreTake+0x120>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800ca2a:	f107 030c 	add.w	r3, r7, #12
 800ca2e:	4618      	mov	r0, r3
 800ca30:	f000 ffce 	bl	800d9d0 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800ca34:	2301      	movs	r3, #1
 800ca36:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800ca38:	f7ff f9b8 	bl	800bdac <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 800ca3c:	f000 fd36 	bl	800d4ac <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800ca40:	f7ff f982 	bl	800bd48 <vPortEnterCritical>
 800ca44:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ca46:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800ca4a:	b25b      	sxtb	r3, r3
 800ca4c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ca50:	d103      	bne.n	800ca5a <xQueueSemaphoreTake+0x142>
 800ca52:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ca54:	2200      	movs	r2, #0
 800ca56:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800ca5a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ca5c:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800ca60:	b25b      	sxtb	r3, r3
 800ca62:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ca66:	d103      	bne.n	800ca70 <xQueueSemaphoreTake+0x158>
 800ca68:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ca6a:	2200      	movs	r2, #0
 800ca6c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800ca70:	f7ff f99c 	bl	800bdac <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800ca74:	463a      	mov	r2, r7
 800ca76:	f107 030c 	add.w	r3, r7, #12
 800ca7a:	4611      	mov	r1, r2
 800ca7c:	4618      	mov	r0, r3
 800ca7e:	f000 ffbd 	bl	800d9fc <xTaskCheckForTimeOut>
 800ca82:	4603      	mov	r3, r0
 800ca84:	2b00      	cmp	r3, #0
 800ca86:	d132      	bne.n	800caee <xQueueSemaphoreTake+0x1d6>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800ca88:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800ca8a:	f000 f9f5 	bl	800ce78 <prvIsQueueEmpty>
 800ca8e:	4603      	mov	r3, r0
 800ca90:	2b00      	cmp	r3, #0
 800ca92:	d026      	beq.n	800cae2 <xQueueSemaphoreTake+0x1ca>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800ca94:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ca96:	681b      	ldr	r3, [r3, #0]
 800ca98:	2b00      	cmp	r3, #0
 800ca9a:	d109      	bne.n	800cab0 <xQueueSemaphoreTake+0x198>
					{
						taskENTER_CRITICAL();
 800ca9c:	f7ff f954 	bl	800bd48 <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 800caa0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800caa2:	689b      	ldr	r3, [r3, #8]
 800caa4:	4618      	mov	r0, r3
 800caa6:	f001 f913 	bl	800dcd0 <xTaskPriorityInherit>
 800caaa:	6338      	str	r0, [r7, #48]	@ 0x30
						}
						taskEXIT_CRITICAL();
 800caac:	f7ff f97e 	bl	800bdac <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800cab0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800cab2:	3324      	adds	r3, #36	@ 0x24
 800cab4:	683a      	ldr	r2, [r7, #0]
 800cab6:	4611      	mov	r1, r2
 800cab8:	4618      	mov	r0, r3
 800caba:	f000 fed3 	bl	800d864 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800cabe:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800cac0:	f000 f988 	bl	800cdd4 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800cac4:	f000 fd00 	bl	800d4c8 <xTaskResumeAll>
 800cac8:	4603      	mov	r3, r0
 800caca:	2b00      	cmp	r3, #0
 800cacc:	f47f af67 	bne.w	800c99e <xQueueSemaphoreTake+0x86>
				{
					portYIELD_WITHIN_API();
 800cad0:	4b18      	ldr	r3, [pc, #96]	@ (800cb34 <xQueueSemaphoreTake+0x21c>)
 800cad2:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800cad6:	601a      	str	r2, [r3, #0]
 800cad8:	f3bf 8f4f 	dsb	sy
 800cadc:	f3bf 8f6f 	isb	sy
 800cae0:	e75d      	b.n	800c99e <xQueueSemaphoreTake+0x86>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 800cae2:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800cae4:	f000 f976 	bl	800cdd4 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800cae8:	f000 fcee 	bl	800d4c8 <xTaskResumeAll>
 800caec:	e757      	b.n	800c99e <xQueueSemaphoreTake+0x86>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 800caee:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800caf0:	f000 f970 	bl	800cdd4 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800caf4:	f000 fce8 	bl	800d4c8 <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800caf8:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800cafa:	f000 f9bd 	bl	800ce78 <prvIsQueueEmpty>
 800cafe:	4603      	mov	r3, r0
 800cb00:	2b00      	cmp	r3, #0
 800cb02:	f43f af4c 	beq.w	800c99e <xQueueSemaphoreTake+0x86>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 800cb06:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800cb08:	2b00      	cmp	r3, #0
 800cb0a:	d00d      	beq.n	800cb28 <xQueueSemaphoreTake+0x210>
					{
						taskENTER_CRITICAL();
 800cb0c:	f7ff f91c 	bl	800bd48 <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 800cb10:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800cb12:	f000 f8b7 	bl	800cc84 <prvGetDisinheritPriorityAfterTimeout>
 800cb16:	6278      	str	r0, [r7, #36]	@ 0x24
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 800cb18:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800cb1a:	689b      	ldr	r3, [r3, #8]
 800cb1c:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800cb1e:	4618      	mov	r0, r3
 800cb20:	f001 f9ae 	bl	800de80 <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 800cb24:	f7ff f942 	bl	800bdac <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800cb28:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800cb2a:	4618      	mov	r0, r3
 800cb2c:	3738      	adds	r7, #56	@ 0x38
 800cb2e:	46bd      	mov	sp, r7
 800cb30:	bd80      	pop	{r7, pc}
 800cb32:	bf00      	nop
 800cb34:	e000ed04 	.word	0xe000ed04

0800cb38 <xQueueReceiveFromISR>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 800cb38:	b580      	push	{r7, lr}
 800cb3a:	b08e      	sub	sp, #56	@ 0x38
 800cb3c:	af00      	add	r7, sp, #0
 800cb3e:	60f8      	str	r0, [r7, #12]
 800cb40:	60b9      	str	r1, [r7, #8]
 800cb42:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800cb44:	68fb      	ldr	r3, [r7, #12]
 800cb46:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 800cb48:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800cb4a:	2b00      	cmp	r3, #0
 800cb4c:	d10b      	bne.n	800cb66 <xQueueReceiveFromISR+0x2e>
	__asm volatile
 800cb4e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800cb52:	f383 8811 	msr	BASEPRI, r3
 800cb56:	f3bf 8f6f 	isb	sy
 800cb5a:	f3bf 8f4f 	dsb	sy
 800cb5e:	623b      	str	r3, [r7, #32]
}
 800cb60:	bf00      	nop
 800cb62:	bf00      	nop
 800cb64:	e7fd      	b.n	800cb62 <xQueueReceiveFromISR+0x2a>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800cb66:	68bb      	ldr	r3, [r7, #8]
 800cb68:	2b00      	cmp	r3, #0
 800cb6a:	d103      	bne.n	800cb74 <xQueueReceiveFromISR+0x3c>
 800cb6c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800cb6e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800cb70:	2b00      	cmp	r3, #0
 800cb72:	d101      	bne.n	800cb78 <xQueueReceiveFromISR+0x40>
 800cb74:	2301      	movs	r3, #1
 800cb76:	e000      	b.n	800cb7a <xQueueReceiveFromISR+0x42>
 800cb78:	2300      	movs	r3, #0
 800cb7a:	2b00      	cmp	r3, #0
 800cb7c:	d10b      	bne.n	800cb96 <xQueueReceiveFromISR+0x5e>
	__asm volatile
 800cb7e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800cb82:	f383 8811 	msr	BASEPRI, r3
 800cb86:	f3bf 8f6f 	isb	sy
 800cb8a:	f3bf 8f4f 	dsb	sy
 800cb8e:	61fb      	str	r3, [r7, #28]
}
 800cb90:	bf00      	nop
 800cb92:	bf00      	nop
 800cb94:	e7fd      	b.n	800cb92 <xQueueReceiveFromISR+0x5a>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800cb96:	f7ff f9b7 	bl	800bf08 <vPortValidateInterruptPriority>
	__asm volatile
 800cb9a:	f3ef 8211 	mrs	r2, BASEPRI
 800cb9e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800cba2:	f383 8811 	msr	BASEPRI, r3
 800cba6:	f3bf 8f6f 	isb	sy
 800cbaa:	f3bf 8f4f 	dsb	sy
 800cbae:	61ba      	str	r2, [r7, #24]
 800cbb0:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 800cbb2:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800cbb4:	62fb      	str	r3, [r7, #44]	@ 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800cbb6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800cbb8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800cbba:	62bb      	str	r3, [r7, #40]	@ 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800cbbc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800cbbe:	2b00      	cmp	r3, #0
 800cbc0:	d02f      	beq.n	800cc22 <xQueueReceiveFromISR+0xea>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 800cbc2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800cbc4:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800cbc8:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 800cbcc:	68b9      	ldr	r1, [r7, #8]
 800cbce:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800cbd0:	f000 f8da 	bl	800cd88 <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800cbd4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800cbd6:	1e5a      	subs	r2, r3, #1
 800cbd8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800cbda:	639a      	str	r2, [r3, #56]	@ 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 800cbdc:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 800cbe0:	f1b3 3fff 	cmp.w	r3, #4294967295
 800cbe4:	d112      	bne.n	800cc0c <xQueueReceiveFromISR+0xd4>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800cbe6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800cbe8:	691b      	ldr	r3, [r3, #16]
 800cbea:	2b00      	cmp	r3, #0
 800cbec:	d016      	beq.n	800cc1c <xQueueReceiveFromISR+0xe4>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800cbee:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800cbf0:	3310      	adds	r3, #16
 800cbf2:	4618      	mov	r0, r3
 800cbf4:	f000 fe88 	bl	800d908 <xTaskRemoveFromEventList>
 800cbf8:	4603      	mov	r3, r0
 800cbfa:	2b00      	cmp	r3, #0
 800cbfc:	d00e      	beq.n	800cc1c <xQueueReceiveFromISR+0xe4>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 800cbfe:	687b      	ldr	r3, [r7, #4]
 800cc00:	2b00      	cmp	r3, #0
 800cc02:	d00b      	beq.n	800cc1c <xQueueReceiveFromISR+0xe4>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 800cc04:	687b      	ldr	r3, [r7, #4]
 800cc06:	2201      	movs	r2, #1
 800cc08:	601a      	str	r2, [r3, #0]
 800cc0a:	e007      	b.n	800cc1c <xQueueReceiveFromISR+0xe4>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 800cc0c:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800cc10:	3301      	adds	r3, #1
 800cc12:	b2db      	uxtb	r3, r3
 800cc14:	b25a      	sxtb	r2, r3
 800cc16:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800cc18:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
			}

			xReturn = pdPASS;
 800cc1c:	2301      	movs	r3, #1
 800cc1e:	637b      	str	r3, [r7, #52]	@ 0x34
 800cc20:	e001      	b.n	800cc26 <xQueueReceiveFromISR+0xee>
		}
		else
		{
			xReturn = pdFAIL;
 800cc22:	2300      	movs	r3, #0
 800cc24:	637b      	str	r3, [r7, #52]	@ 0x34
 800cc26:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800cc28:	613b      	str	r3, [r7, #16]
	__asm volatile
 800cc2a:	693b      	ldr	r3, [r7, #16]
 800cc2c:	f383 8811 	msr	BASEPRI, r3
}
 800cc30:	bf00      	nop
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800cc32:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
}
 800cc34:	4618      	mov	r0, r3
 800cc36:	3738      	adds	r7, #56	@ 0x38
 800cc38:	46bd      	mov	sp, r7
 800cc3a:	bd80      	pop	{r7, pc}

0800cc3c <vQueueDelete>:
	return uxReturn;
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
/*-----------------------------------------------------------*/

void vQueueDelete( QueueHandle_t xQueue )
{
 800cc3c:	b580      	push	{r7, lr}
 800cc3e:	b084      	sub	sp, #16
 800cc40:	af00      	add	r7, sp, #0
 800cc42:	6078      	str	r0, [r7, #4]
Queue_t * const pxQueue = xQueue;
 800cc44:	687b      	ldr	r3, [r7, #4]
 800cc46:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800cc48:	68fb      	ldr	r3, [r7, #12]
 800cc4a:	2b00      	cmp	r3, #0
 800cc4c:	d10b      	bne.n	800cc66 <vQueueDelete+0x2a>
	__asm volatile
 800cc4e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800cc52:	f383 8811 	msr	BASEPRI, r3
 800cc56:	f3bf 8f6f 	isb	sy
 800cc5a:	f3bf 8f4f 	dsb	sy
 800cc5e:	60bb      	str	r3, [r7, #8]
}
 800cc60:	bf00      	nop
 800cc62:	bf00      	nop
 800cc64:	e7fd      	b.n	800cc62 <vQueueDelete+0x26>
	traceQUEUE_DELETE( pxQueue );

	#if ( configQUEUE_REGISTRY_SIZE > 0 )
	{
		vQueueUnregisterQueue( pxQueue );
 800cc66:	68f8      	ldr	r0, [r7, #12]
 800cc68:	f000 f95e 	bl	800cf28 <vQueueUnregisterQueue>
	}
	#elif( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )
	{
		/* The queue could have been allocated statically or dynamically, so
		check before attempting to free the memory. */
		if( pxQueue->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
 800cc6c:	68fb      	ldr	r3, [r7, #12]
 800cc6e:	f893 3046 	ldrb.w	r3, [r3, #70]	@ 0x46
 800cc72:	2b00      	cmp	r3, #0
 800cc74:	d102      	bne.n	800cc7c <vQueueDelete+0x40>
		{
			vPortFree( pxQueue );
 800cc76:	68f8      	ldr	r0, [r7, #12]
 800cc78:	f7fe fd60 	bl	800b73c <vPortFree>
		/* The queue must have been statically allocated, so is not going to be
		deleted.  Avoid compiler warnings about the unused parameter. */
		( void ) pxQueue;
	}
	#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
}
 800cc7c:	bf00      	nop
 800cc7e:	3710      	adds	r7, #16
 800cc80:	46bd      	mov	sp, r7
 800cc82:	bd80      	pop	{r7, pc}

0800cc84 <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 800cc84:	b480      	push	{r7}
 800cc86:	b085      	sub	sp, #20
 800cc88:	af00      	add	r7, sp, #0
 800cc8a:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 800cc8c:	687b      	ldr	r3, [r7, #4]
 800cc8e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800cc90:	2b00      	cmp	r3, #0
 800cc92:	d006      	beq.n	800cca2 <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 800cc94:	687b      	ldr	r3, [r7, #4]
 800cc96:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800cc98:	681b      	ldr	r3, [r3, #0]
 800cc9a:	f1c3 0338 	rsb	r3, r3, #56	@ 0x38
 800cc9e:	60fb      	str	r3, [r7, #12]
 800cca0:	e001      	b.n	800cca6 <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 800cca2:	2300      	movs	r3, #0
 800cca4:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 800cca6:	68fb      	ldr	r3, [r7, #12]
	}
 800cca8:	4618      	mov	r0, r3
 800ccaa:	3714      	adds	r7, #20
 800ccac:	46bd      	mov	sp, r7
 800ccae:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ccb2:	4770      	bx	lr

0800ccb4 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 800ccb4:	b580      	push	{r7, lr}
 800ccb6:	b086      	sub	sp, #24
 800ccb8:	af00      	add	r7, sp, #0
 800ccba:	60f8      	str	r0, [r7, #12]
 800ccbc:	60b9      	str	r1, [r7, #8]
 800ccbe:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 800ccc0:	2300      	movs	r3, #0
 800ccc2:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800ccc4:	68fb      	ldr	r3, [r7, #12]
 800ccc6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800ccc8:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800ccca:	68fb      	ldr	r3, [r7, #12]
 800cccc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800ccce:	2b00      	cmp	r3, #0
 800ccd0:	d10d      	bne.n	800ccee <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800ccd2:	68fb      	ldr	r3, [r7, #12]
 800ccd4:	681b      	ldr	r3, [r3, #0]
 800ccd6:	2b00      	cmp	r3, #0
 800ccd8:	d14d      	bne.n	800cd76 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 800ccda:	68fb      	ldr	r3, [r7, #12]
 800ccdc:	689b      	ldr	r3, [r3, #8]
 800ccde:	4618      	mov	r0, r3
 800cce0:	f001 f85e 	bl	800dda0 <xTaskPriorityDisinherit>
 800cce4:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 800cce6:	68fb      	ldr	r3, [r7, #12]
 800cce8:	2200      	movs	r2, #0
 800ccea:	609a      	str	r2, [r3, #8]
 800ccec:	e043      	b.n	800cd76 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 800ccee:	687b      	ldr	r3, [r7, #4]
 800ccf0:	2b00      	cmp	r3, #0
 800ccf2:	d119      	bne.n	800cd28 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800ccf4:	68fb      	ldr	r3, [r7, #12]
 800ccf6:	6858      	ldr	r0, [r3, #4]
 800ccf8:	68fb      	ldr	r3, [r7, #12]
 800ccfa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800ccfc:	461a      	mov	r2, r3
 800ccfe:	68b9      	ldr	r1, [r7, #8]
 800cd00:	f01e facd 	bl	802b29e <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800cd04:	68fb      	ldr	r3, [r7, #12]
 800cd06:	685a      	ldr	r2, [r3, #4]
 800cd08:	68fb      	ldr	r3, [r7, #12]
 800cd0a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800cd0c:	441a      	add	r2, r3
 800cd0e:	68fb      	ldr	r3, [r7, #12]
 800cd10:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800cd12:	68fb      	ldr	r3, [r7, #12]
 800cd14:	685a      	ldr	r2, [r3, #4]
 800cd16:	68fb      	ldr	r3, [r7, #12]
 800cd18:	689b      	ldr	r3, [r3, #8]
 800cd1a:	429a      	cmp	r2, r3
 800cd1c:	d32b      	bcc.n	800cd76 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 800cd1e:	68fb      	ldr	r3, [r7, #12]
 800cd20:	681a      	ldr	r2, [r3, #0]
 800cd22:	68fb      	ldr	r3, [r7, #12]
 800cd24:	605a      	str	r2, [r3, #4]
 800cd26:	e026      	b.n	800cd76 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 800cd28:	68fb      	ldr	r3, [r7, #12]
 800cd2a:	68d8      	ldr	r0, [r3, #12]
 800cd2c:	68fb      	ldr	r3, [r7, #12]
 800cd2e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800cd30:	461a      	mov	r2, r3
 800cd32:	68b9      	ldr	r1, [r7, #8]
 800cd34:	f01e fab3 	bl	802b29e <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 800cd38:	68fb      	ldr	r3, [r7, #12]
 800cd3a:	68da      	ldr	r2, [r3, #12]
 800cd3c:	68fb      	ldr	r3, [r7, #12]
 800cd3e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800cd40:	425b      	negs	r3, r3
 800cd42:	441a      	add	r2, r3
 800cd44:	68fb      	ldr	r3, [r7, #12]
 800cd46:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800cd48:	68fb      	ldr	r3, [r7, #12]
 800cd4a:	68da      	ldr	r2, [r3, #12]
 800cd4c:	68fb      	ldr	r3, [r7, #12]
 800cd4e:	681b      	ldr	r3, [r3, #0]
 800cd50:	429a      	cmp	r2, r3
 800cd52:	d207      	bcs.n	800cd64 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 800cd54:	68fb      	ldr	r3, [r7, #12]
 800cd56:	689a      	ldr	r2, [r3, #8]
 800cd58:	68fb      	ldr	r3, [r7, #12]
 800cd5a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800cd5c:	425b      	negs	r3, r3
 800cd5e:	441a      	add	r2, r3
 800cd60:	68fb      	ldr	r3, [r7, #12]
 800cd62:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 800cd64:	687b      	ldr	r3, [r7, #4]
 800cd66:	2b02      	cmp	r3, #2
 800cd68:	d105      	bne.n	800cd76 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800cd6a:	693b      	ldr	r3, [r7, #16]
 800cd6c:	2b00      	cmp	r3, #0
 800cd6e:	d002      	beq.n	800cd76 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 800cd70:	693b      	ldr	r3, [r7, #16]
 800cd72:	3b01      	subs	r3, #1
 800cd74:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800cd76:	693b      	ldr	r3, [r7, #16]
 800cd78:	1c5a      	adds	r2, r3, #1
 800cd7a:	68fb      	ldr	r3, [r7, #12]
 800cd7c:	639a      	str	r2, [r3, #56]	@ 0x38

	return xReturn;
 800cd7e:	697b      	ldr	r3, [r7, #20]
}
 800cd80:	4618      	mov	r0, r3
 800cd82:	3718      	adds	r7, #24
 800cd84:	46bd      	mov	sp, r7
 800cd86:	bd80      	pop	{r7, pc}

0800cd88 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 800cd88:	b580      	push	{r7, lr}
 800cd8a:	b082      	sub	sp, #8
 800cd8c:	af00      	add	r7, sp, #0
 800cd8e:	6078      	str	r0, [r7, #4]
 800cd90:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800cd92:	687b      	ldr	r3, [r7, #4]
 800cd94:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800cd96:	2b00      	cmp	r3, #0
 800cd98:	d018      	beq.n	800cdcc <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800cd9a:	687b      	ldr	r3, [r7, #4]
 800cd9c:	68da      	ldr	r2, [r3, #12]
 800cd9e:	687b      	ldr	r3, [r7, #4]
 800cda0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800cda2:	441a      	add	r2, r3
 800cda4:	687b      	ldr	r3, [r7, #4]
 800cda6:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 800cda8:	687b      	ldr	r3, [r7, #4]
 800cdaa:	68da      	ldr	r2, [r3, #12]
 800cdac:	687b      	ldr	r3, [r7, #4]
 800cdae:	689b      	ldr	r3, [r3, #8]
 800cdb0:	429a      	cmp	r2, r3
 800cdb2:	d303      	bcc.n	800cdbc <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 800cdb4:	687b      	ldr	r3, [r7, #4]
 800cdb6:	681a      	ldr	r2, [r3, #0]
 800cdb8:	687b      	ldr	r3, [r7, #4]
 800cdba:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800cdbc:	687b      	ldr	r3, [r7, #4]
 800cdbe:	68d9      	ldr	r1, [r3, #12]
 800cdc0:	687b      	ldr	r3, [r7, #4]
 800cdc2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800cdc4:	461a      	mov	r2, r3
 800cdc6:	6838      	ldr	r0, [r7, #0]
 800cdc8:	f01e fa69 	bl	802b29e <memcpy>
	}
}
 800cdcc:	bf00      	nop
 800cdce:	3708      	adds	r7, #8
 800cdd0:	46bd      	mov	sp, r7
 800cdd2:	bd80      	pop	{r7, pc}

0800cdd4 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 800cdd4:	b580      	push	{r7, lr}
 800cdd6:	b084      	sub	sp, #16
 800cdd8:	af00      	add	r7, sp, #0
 800cdda:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 800cddc:	f7fe ffb4 	bl	800bd48 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 800cde0:	687b      	ldr	r3, [r7, #4]
 800cde2:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800cde6:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800cde8:	e011      	b.n	800ce0e <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800cdea:	687b      	ldr	r3, [r7, #4]
 800cdec:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800cdee:	2b00      	cmp	r3, #0
 800cdf0:	d012      	beq.n	800ce18 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800cdf2:	687b      	ldr	r3, [r7, #4]
 800cdf4:	3324      	adds	r3, #36	@ 0x24
 800cdf6:	4618      	mov	r0, r3
 800cdf8:	f000 fd86 	bl	800d908 <xTaskRemoveFromEventList>
 800cdfc:	4603      	mov	r3, r0
 800cdfe:	2b00      	cmp	r3, #0
 800ce00:	d001      	beq.n	800ce06 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 800ce02:	f000 fe5f 	bl	800dac4 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 800ce06:	7bfb      	ldrb	r3, [r7, #15]
 800ce08:	3b01      	subs	r3, #1
 800ce0a:	b2db      	uxtb	r3, r3
 800ce0c:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800ce0e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800ce12:	2b00      	cmp	r3, #0
 800ce14:	dce9      	bgt.n	800cdea <prvUnlockQueue+0x16>
 800ce16:	e000      	b.n	800ce1a <prvUnlockQueue+0x46>
					break;
 800ce18:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 800ce1a:	687b      	ldr	r3, [r7, #4]
 800ce1c:	22ff      	movs	r2, #255	@ 0xff
 800ce1e:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
	}
	taskEXIT_CRITICAL();
 800ce22:	f7fe ffc3 	bl	800bdac <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 800ce26:	f7fe ff8f 	bl	800bd48 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 800ce2a:	687b      	ldr	r3, [r7, #4]
 800ce2c:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800ce30:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 800ce32:	e011      	b.n	800ce58 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800ce34:	687b      	ldr	r3, [r7, #4]
 800ce36:	691b      	ldr	r3, [r3, #16]
 800ce38:	2b00      	cmp	r3, #0
 800ce3a:	d012      	beq.n	800ce62 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800ce3c:	687b      	ldr	r3, [r7, #4]
 800ce3e:	3310      	adds	r3, #16
 800ce40:	4618      	mov	r0, r3
 800ce42:	f000 fd61 	bl	800d908 <xTaskRemoveFromEventList>
 800ce46:	4603      	mov	r3, r0
 800ce48:	2b00      	cmp	r3, #0
 800ce4a:	d001      	beq.n	800ce50 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 800ce4c:	f000 fe3a 	bl	800dac4 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 800ce50:	7bbb      	ldrb	r3, [r7, #14]
 800ce52:	3b01      	subs	r3, #1
 800ce54:	b2db      	uxtb	r3, r3
 800ce56:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 800ce58:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800ce5c:	2b00      	cmp	r3, #0
 800ce5e:	dce9      	bgt.n	800ce34 <prvUnlockQueue+0x60>
 800ce60:	e000      	b.n	800ce64 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 800ce62:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 800ce64:	687b      	ldr	r3, [r7, #4]
 800ce66:	22ff      	movs	r2, #255	@ 0xff
 800ce68:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
	}
	taskEXIT_CRITICAL();
 800ce6c:	f7fe ff9e 	bl	800bdac <vPortExitCritical>
}
 800ce70:	bf00      	nop
 800ce72:	3710      	adds	r7, #16
 800ce74:	46bd      	mov	sp, r7
 800ce76:	bd80      	pop	{r7, pc}

0800ce78 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 800ce78:	b580      	push	{r7, lr}
 800ce7a:	b084      	sub	sp, #16
 800ce7c:	af00      	add	r7, sp, #0
 800ce7e:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800ce80:	f7fe ff62 	bl	800bd48 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 800ce84:	687b      	ldr	r3, [r7, #4]
 800ce86:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800ce88:	2b00      	cmp	r3, #0
 800ce8a:	d102      	bne.n	800ce92 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 800ce8c:	2301      	movs	r3, #1
 800ce8e:	60fb      	str	r3, [r7, #12]
 800ce90:	e001      	b.n	800ce96 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 800ce92:	2300      	movs	r3, #0
 800ce94:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800ce96:	f7fe ff89 	bl	800bdac <vPortExitCritical>

	return xReturn;
 800ce9a:	68fb      	ldr	r3, [r7, #12]
}
 800ce9c:	4618      	mov	r0, r3
 800ce9e:	3710      	adds	r7, #16
 800cea0:	46bd      	mov	sp, r7
 800cea2:	bd80      	pop	{r7, pc}

0800cea4 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 800cea4:	b580      	push	{r7, lr}
 800cea6:	b084      	sub	sp, #16
 800cea8:	af00      	add	r7, sp, #0
 800ceaa:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800ceac:	f7fe ff4c 	bl	800bd48 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 800ceb0:	687b      	ldr	r3, [r7, #4]
 800ceb2:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800ceb4:	687b      	ldr	r3, [r7, #4]
 800ceb6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800ceb8:	429a      	cmp	r2, r3
 800ceba:	d102      	bne.n	800cec2 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 800cebc:	2301      	movs	r3, #1
 800cebe:	60fb      	str	r3, [r7, #12]
 800cec0:	e001      	b.n	800cec6 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 800cec2:	2300      	movs	r3, #0
 800cec4:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800cec6:	f7fe ff71 	bl	800bdac <vPortExitCritical>

	return xReturn;
 800ceca:	68fb      	ldr	r3, [r7, #12]
}
 800cecc:	4618      	mov	r0, r3
 800cece:	3710      	adds	r7, #16
 800ced0:	46bd      	mov	sp, r7
 800ced2:	bd80      	pop	{r7, pc}

0800ced4 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 800ced4:	b480      	push	{r7}
 800ced6:	b085      	sub	sp, #20
 800ced8:	af00      	add	r7, sp, #0
 800ceda:	6078      	str	r0, [r7, #4]
 800cedc:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800cede:	2300      	movs	r3, #0
 800cee0:	60fb      	str	r3, [r7, #12]
 800cee2:	e014      	b.n	800cf0e <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 800cee4:	4a0f      	ldr	r2, [pc, #60]	@ (800cf24 <vQueueAddToRegistry+0x50>)
 800cee6:	68fb      	ldr	r3, [r7, #12]
 800cee8:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 800ceec:	2b00      	cmp	r3, #0
 800ceee:	d10b      	bne.n	800cf08 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 800cef0:	490c      	ldr	r1, [pc, #48]	@ (800cf24 <vQueueAddToRegistry+0x50>)
 800cef2:	68fb      	ldr	r3, [r7, #12]
 800cef4:	683a      	ldr	r2, [r7, #0]
 800cef6:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 800cefa:	4a0a      	ldr	r2, [pc, #40]	@ (800cf24 <vQueueAddToRegistry+0x50>)
 800cefc:	68fb      	ldr	r3, [r7, #12]
 800cefe:	00db      	lsls	r3, r3, #3
 800cf00:	4413      	add	r3, r2
 800cf02:	687a      	ldr	r2, [r7, #4]
 800cf04:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 800cf06:	e006      	b.n	800cf16 <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800cf08:	68fb      	ldr	r3, [r7, #12]
 800cf0a:	3301      	adds	r3, #1
 800cf0c:	60fb      	str	r3, [r7, #12]
 800cf0e:	68fb      	ldr	r3, [r7, #12]
 800cf10:	2b07      	cmp	r3, #7
 800cf12:	d9e7      	bls.n	800cee4 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 800cf14:	bf00      	nop
 800cf16:	bf00      	nop
 800cf18:	3714      	adds	r7, #20
 800cf1a:	46bd      	mov	sp, r7
 800cf1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cf20:	4770      	bx	lr
 800cf22:	bf00      	nop
 800cf24:	2400a60c 	.word	0x2400a60c

0800cf28 <vQueueUnregisterQueue>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueUnregisterQueue( QueueHandle_t xQueue )
	{
 800cf28:	b480      	push	{r7}
 800cf2a:	b085      	sub	sp, #20
 800cf2c:	af00      	add	r7, sp, #0
 800cf2e:	6078      	str	r0, [r7, #4]
	UBaseType_t ux;

		/* See if the handle of the queue being unregistered in actually in the
		registry. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800cf30:	2300      	movs	r3, #0
 800cf32:	60fb      	str	r3, [r7, #12]
 800cf34:	e016      	b.n	800cf64 <vQueueUnregisterQueue+0x3c>
		{
			if( xQueueRegistry[ ux ].xHandle == xQueue )
 800cf36:	4a10      	ldr	r2, [pc, #64]	@ (800cf78 <vQueueUnregisterQueue+0x50>)
 800cf38:	68fb      	ldr	r3, [r7, #12]
 800cf3a:	00db      	lsls	r3, r3, #3
 800cf3c:	4413      	add	r3, r2
 800cf3e:	685b      	ldr	r3, [r3, #4]
 800cf40:	687a      	ldr	r2, [r7, #4]
 800cf42:	429a      	cmp	r2, r3
 800cf44:	d10b      	bne.n	800cf5e <vQueueUnregisterQueue+0x36>
			{
				/* Set the name to NULL to show that this slot if free again. */
				xQueueRegistry[ ux ].pcQueueName = NULL;
 800cf46:	4a0c      	ldr	r2, [pc, #48]	@ (800cf78 <vQueueUnregisterQueue+0x50>)
 800cf48:	68fb      	ldr	r3, [r7, #12]
 800cf4a:	2100      	movs	r1, #0
 800cf4c:	f842 1033 	str.w	r1, [r2, r3, lsl #3]

				/* Set the handle to NULL to ensure the same queue handle cannot
				appear in the registry twice if it is added, removed, then
				added again. */
				xQueueRegistry[ ux ].xHandle = ( QueueHandle_t ) 0;
 800cf50:	4a09      	ldr	r2, [pc, #36]	@ (800cf78 <vQueueUnregisterQueue+0x50>)
 800cf52:	68fb      	ldr	r3, [r7, #12]
 800cf54:	00db      	lsls	r3, r3, #3
 800cf56:	4413      	add	r3, r2
 800cf58:	2200      	movs	r2, #0
 800cf5a:	605a      	str	r2, [r3, #4]
				break;
 800cf5c:	e006      	b.n	800cf6c <vQueueUnregisterQueue+0x44>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800cf5e:	68fb      	ldr	r3, [r7, #12]
 800cf60:	3301      	adds	r3, #1
 800cf62:	60fb      	str	r3, [r7, #12]
 800cf64:	68fb      	ldr	r3, [r7, #12]
 800cf66:	2b07      	cmp	r3, #7
 800cf68:	d9e5      	bls.n	800cf36 <vQueueUnregisterQueue+0xe>
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

	} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
 800cf6a:	bf00      	nop
 800cf6c:	bf00      	nop
 800cf6e:	3714      	adds	r7, #20
 800cf70:	46bd      	mov	sp, r7
 800cf72:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cf76:	4770      	bx	lr
 800cf78:	2400a60c 	.word	0x2400a60c

0800cf7c <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800cf7c:	b580      	push	{r7, lr}
 800cf7e:	b086      	sub	sp, #24
 800cf80:	af00      	add	r7, sp, #0
 800cf82:	60f8      	str	r0, [r7, #12]
 800cf84:	60b9      	str	r1, [r7, #8]
 800cf86:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 800cf88:	68fb      	ldr	r3, [r7, #12]
 800cf8a:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 800cf8c:	f7fe fedc 	bl	800bd48 <vPortEnterCritical>
 800cf90:	697b      	ldr	r3, [r7, #20]
 800cf92:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800cf96:	b25b      	sxtb	r3, r3
 800cf98:	f1b3 3fff 	cmp.w	r3, #4294967295
 800cf9c:	d103      	bne.n	800cfa6 <vQueueWaitForMessageRestricted+0x2a>
 800cf9e:	697b      	ldr	r3, [r7, #20]
 800cfa0:	2200      	movs	r2, #0
 800cfa2:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800cfa6:	697b      	ldr	r3, [r7, #20]
 800cfa8:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800cfac:	b25b      	sxtb	r3, r3
 800cfae:	f1b3 3fff 	cmp.w	r3, #4294967295
 800cfb2:	d103      	bne.n	800cfbc <vQueueWaitForMessageRestricted+0x40>
 800cfb4:	697b      	ldr	r3, [r7, #20]
 800cfb6:	2200      	movs	r2, #0
 800cfb8:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800cfbc:	f7fe fef6 	bl	800bdac <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 800cfc0:	697b      	ldr	r3, [r7, #20]
 800cfc2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800cfc4:	2b00      	cmp	r3, #0
 800cfc6:	d106      	bne.n	800cfd6 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 800cfc8:	697b      	ldr	r3, [r7, #20]
 800cfca:	3324      	adds	r3, #36	@ 0x24
 800cfcc:	687a      	ldr	r2, [r7, #4]
 800cfce:	68b9      	ldr	r1, [r7, #8]
 800cfd0:	4618      	mov	r0, r3
 800cfd2:	f000 fc6d 	bl	800d8b0 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 800cfd6:	6978      	ldr	r0, [r7, #20]
 800cfd8:	f7ff fefc 	bl	800cdd4 <prvUnlockQueue>
	}
 800cfdc:	bf00      	nop
 800cfde:	3718      	adds	r7, #24
 800cfe0:	46bd      	mov	sp, r7
 800cfe2:	bd80      	pop	{r7, pc}

0800cfe4 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 800cfe4:	b580      	push	{r7, lr}
 800cfe6:	b08e      	sub	sp, #56	@ 0x38
 800cfe8:	af04      	add	r7, sp, #16
 800cfea:	60f8      	str	r0, [r7, #12]
 800cfec:	60b9      	str	r1, [r7, #8]
 800cfee:	607a      	str	r2, [r7, #4]
 800cff0:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 800cff2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800cff4:	2b00      	cmp	r3, #0
 800cff6:	d10b      	bne.n	800d010 <xTaskCreateStatic+0x2c>
	__asm volatile
 800cff8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800cffc:	f383 8811 	msr	BASEPRI, r3
 800d000:	f3bf 8f6f 	isb	sy
 800d004:	f3bf 8f4f 	dsb	sy
 800d008:	623b      	str	r3, [r7, #32]
}
 800d00a:	bf00      	nop
 800d00c:	bf00      	nop
 800d00e:	e7fd      	b.n	800d00c <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 800d010:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d012:	2b00      	cmp	r3, #0
 800d014:	d10b      	bne.n	800d02e <xTaskCreateStatic+0x4a>
	__asm volatile
 800d016:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d01a:	f383 8811 	msr	BASEPRI, r3
 800d01e:	f3bf 8f6f 	isb	sy
 800d022:	f3bf 8f4f 	dsb	sy
 800d026:	61fb      	str	r3, [r7, #28]
}
 800d028:	bf00      	nop
 800d02a:	bf00      	nop
 800d02c:	e7fd      	b.n	800d02a <xTaskCreateStatic+0x46>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 800d02e:	23a8      	movs	r3, #168	@ 0xa8
 800d030:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 800d032:	693b      	ldr	r3, [r7, #16]
 800d034:	2ba8      	cmp	r3, #168	@ 0xa8
 800d036:	d00b      	beq.n	800d050 <xTaskCreateStatic+0x6c>
	__asm volatile
 800d038:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d03c:	f383 8811 	msr	BASEPRI, r3
 800d040:	f3bf 8f6f 	isb	sy
 800d044:	f3bf 8f4f 	dsb	sy
 800d048:	61bb      	str	r3, [r7, #24]
}
 800d04a:	bf00      	nop
 800d04c:	bf00      	nop
 800d04e:	e7fd      	b.n	800d04c <xTaskCreateStatic+0x68>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 800d050:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 800d052:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d054:	2b00      	cmp	r3, #0
 800d056:	d01e      	beq.n	800d096 <xTaskCreateStatic+0xb2>
 800d058:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800d05a:	2b00      	cmp	r3, #0
 800d05c:	d01b      	beq.n	800d096 <xTaskCreateStatic+0xb2>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800d05e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d060:	627b      	str	r3, [r7, #36]	@ 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 800d062:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d064:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800d066:	631a      	str	r2, [r3, #48]	@ 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800d068:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d06a:	2202      	movs	r2, #2
 800d06c:	f883 20a5 	strb.w	r2, [r3, #165]	@ 0xa5
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 800d070:	2300      	movs	r3, #0
 800d072:	9303      	str	r3, [sp, #12]
 800d074:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d076:	9302      	str	r3, [sp, #8]
 800d078:	f107 0314 	add.w	r3, r7, #20
 800d07c:	9301      	str	r3, [sp, #4]
 800d07e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d080:	9300      	str	r3, [sp, #0]
 800d082:	683b      	ldr	r3, [r7, #0]
 800d084:	687a      	ldr	r2, [r7, #4]
 800d086:	68b9      	ldr	r1, [r7, #8]
 800d088:	68f8      	ldr	r0, [r7, #12]
 800d08a:	f000 f851 	bl	800d130 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800d08e:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 800d090:	f000 f8f6 	bl	800d280 <prvAddNewTaskToReadyList>
 800d094:	e001      	b.n	800d09a <xTaskCreateStatic+0xb6>
		}
		else
		{
			xReturn = NULL;
 800d096:	2300      	movs	r3, #0
 800d098:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 800d09a:	697b      	ldr	r3, [r7, #20]
	}
 800d09c:	4618      	mov	r0, r3
 800d09e:	3728      	adds	r7, #40	@ 0x28
 800d0a0:	46bd      	mov	sp, r7
 800d0a2:	bd80      	pop	{r7, pc}

0800d0a4 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 800d0a4:	b580      	push	{r7, lr}
 800d0a6:	b08c      	sub	sp, #48	@ 0x30
 800d0a8:	af04      	add	r7, sp, #16
 800d0aa:	60f8      	str	r0, [r7, #12]
 800d0ac:	60b9      	str	r1, [r7, #8]
 800d0ae:	603b      	str	r3, [r7, #0]
 800d0b0:	4613      	mov	r3, r2
 800d0b2:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 800d0b4:	88fb      	ldrh	r3, [r7, #6]
 800d0b6:	009b      	lsls	r3, r3, #2
 800d0b8:	4618      	mov	r0, r3
 800d0ba:	f7fe fa71 	bl	800b5a0 <pvPortMalloc>
 800d0be:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 800d0c0:	697b      	ldr	r3, [r7, #20]
 800d0c2:	2b00      	cmp	r3, #0
 800d0c4:	d00e      	beq.n	800d0e4 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 800d0c6:	20a8      	movs	r0, #168	@ 0xa8
 800d0c8:	f7fe fa6a 	bl	800b5a0 <pvPortMalloc>
 800d0cc:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 800d0ce:	69fb      	ldr	r3, [r7, #28]
 800d0d0:	2b00      	cmp	r3, #0
 800d0d2:	d003      	beq.n	800d0dc <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 800d0d4:	69fb      	ldr	r3, [r7, #28]
 800d0d6:	697a      	ldr	r2, [r7, #20]
 800d0d8:	631a      	str	r2, [r3, #48]	@ 0x30
 800d0da:	e005      	b.n	800d0e8 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 800d0dc:	6978      	ldr	r0, [r7, #20]
 800d0de:	f7fe fb2d 	bl	800b73c <vPortFree>
 800d0e2:	e001      	b.n	800d0e8 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 800d0e4:	2300      	movs	r3, #0
 800d0e6:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 800d0e8:	69fb      	ldr	r3, [r7, #28]
 800d0ea:	2b00      	cmp	r3, #0
 800d0ec:	d017      	beq.n	800d11e <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 800d0ee:	69fb      	ldr	r3, [r7, #28]
 800d0f0:	2200      	movs	r2, #0
 800d0f2:	f883 20a5 	strb.w	r2, [r3, #165]	@ 0xa5
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800d0f6:	88fa      	ldrh	r2, [r7, #6]
 800d0f8:	2300      	movs	r3, #0
 800d0fa:	9303      	str	r3, [sp, #12]
 800d0fc:	69fb      	ldr	r3, [r7, #28]
 800d0fe:	9302      	str	r3, [sp, #8]
 800d100:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d102:	9301      	str	r3, [sp, #4]
 800d104:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d106:	9300      	str	r3, [sp, #0]
 800d108:	683b      	ldr	r3, [r7, #0]
 800d10a:	68b9      	ldr	r1, [r7, #8]
 800d10c:	68f8      	ldr	r0, [r7, #12]
 800d10e:	f000 f80f 	bl	800d130 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800d112:	69f8      	ldr	r0, [r7, #28]
 800d114:	f000 f8b4 	bl	800d280 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800d118:	2301      	movs	r3, #1
 800d11a:	61bb      	str	r3, [r7, #24]
 800d11c:	e002      	b.n	800d124 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800d11e:	f04f 33ff 	mov.w	r3, #4294967295
 800d122:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 800d124:	69bb      	ldr	r3, [r7, #24]
	}
 800d126:	4618      	mov	r0, r3
 800d128:	3720      	adds	r7, #32
 800d12a:	46bd      	mov	sp, r7
 800d12c:	bd80      	pop	{r7, pc}
	...

0800d130 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 800d130:	b580      	push	{r7, lr}
 800d132:	b088      	sub	sp, #32
 800d134:	af00      	add	r7, sp, #0
 800d136:	60f8      	str	r0, [r7, #12]
 800d138:	60b9      	str	r1, [r7, #8]
 800d13a:	607a      	str	r2, [r7, #4]
 800d13c:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 800d13e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d140:	6b18      	ldr	r0, [r3, #48]	@ 0x30
 800d142:	687b      	ldr	r3, [r7, #4]
 800d144:	009b      	lsls	r3, r3, #2
 800d146:	461a      	mov	r2, r3
 800d148:	21a5      	movs	r1, #165	@ 0xa5
 800d14a:	f01d ff82 	bl	802b052 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 800d14e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d150:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800d152:	6879      	ldr	r1, [r7, #4]
 800d154:	f06f 4340 	mvn.w	r3, #3221225472	@ 0xc0000000
 800d158:	440b      	add	r3, r1
 800d15a:	009b      	lsls	r3, r3, #2
 800d15c:	4413      	add	r3, r2
 800d15e:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 800d160:	69bb      	ldr	r3, [r7, #24]
 800d162:	f023 0307 	bic.w	r3, r3, #7
 800d166:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 800d168:	69bb      	ldr	r3, [r7, #24]
 800d16a:	f003 0307 	and.w	r3, r3, #7
 800d16e:	2b00      	cmp	r3, #0
 800d170:	d00b      	beq.n	800d18a <prvInitialiseNewTask+0x5a>
	__asm volatile
 800d172:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d176:	f383 8811 	msr	BASEPRI, r3
 800d17a:	f3bf 8f6f 	isb	sy
 800d17e:	f3bf 8f4f 	dsb	sy
 800d182:	617b      	str	r3, [r7, #20]
}
 800d184:	bf00      	nop
 800d186:	bf00      	nop
 800d188:	e7fd      	b.n	800d186 <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 800d18a:	68bb      	ldr	r3, [r7, #8]
 800d18c:	2b00      	cmp	r3, #0
 800d18e:	d01f      	beq.n	800d1d0 <prvInitialiseNewTask+0xa0>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800d190:	2300      	movs	r3, #0
 800d192:	61fb      	str	r3, [r7, #28]
 800d194:	e012      	b.n	800d1bc <prvInitialiseNewTask+0x8c>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800d196:	68ba      	ldr	r2, [r7, #8]
 800d198:	69fb      	ldr	r3, [r7, #28]
 800d19a:	4413      	add	r3, r2
 800d19c:	7819      	ldrb	r1, [r3, #0]
 800d19e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800d1a0:	69fb      	ldr	r3, [r7, #28]
 800d1a2:	4413      	add	r3, r2
 800d1a4:	3334      	adds	r3, #52	@ 0x34
 800d1a6:	460a      	mov	r2, r1
 800d1a8:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 800d1aa:	68ba      	ldr	r2, [r7, #8]
 800d1ac:	69fb      	ldr	r3, [r7, #28]
 800d1ae:	4413      	add	r3, r2
 800d1b0:	781b      	ldrb	r3, [r3, #0]
 800d1b2:	2b00      	cmp	r3, #0
 800d1b4:	d006      	beq.n	800d1c4 <prvInitialiseNewTask+0x94>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800d1b6:	69fb      	ldr	r3, [r7, #28]
 800d1b8:	3301      	adds	r3, #1
 800d1ba:	61fb      	str	r3, [r7, #28]
 800d1bc:	69fb      	ldr	r3, [r7, #28]
 800d1be:	2b0f      	cmp	r3, #15
 800d1c0:	d9e9      	bls.n	800d196 <prvInitialiseNewTask+0x66>
 800d1c2:	e000      	b.n	800d1c6 <prvInitialiseNewTask+0x96>
			{
				break;
 800d1c4:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800d1c6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d1c8:	2200      	movs	r2, #0
 800d1ca:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 800d1ce:	e003      	b.n	800d1d8 <prvInitialiseNewTask+0xa8>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 800d1d0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d1d2:	2200      	movs	r2, #0
 800d1d4:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800d1d8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d1da:	2b37      	cmp	r3, #55	@ 0x37
 800d1dc:	d901      	bls.n	800d1e2 <prvInitialiseNewTask+0xb2>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800d1de:	2337      	movs	r3, #55	@ 0x37
 800d1e0:	62bb      	str	r3, [r7, #40]	@ 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 800d1e2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d1e4:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800d1e6:	62da      	str	r2, [r3, #44]	@ 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 800d1e8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d1ea:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800d1ec:	64da      	str	r2, [r3, #76]	@ 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 800d1ee:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d1f0:	2200      	movs	r2, #0
 800d1f2:	651a      	str	r2, [r3, #80]	@ 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800d1f4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d1f6:	3304      	adds	r3, #4
 800d1f8:	4618      	mov	r0, r3
 800d1fa:	f7fe fbdf 	bl	800b9bc <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800d1fe:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d200:	3318      	adds	r3, #24
 800d202:	4618      	mov	r0, r3
 800d204:	f7fe fbda 	bl	800b9bc <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800d208:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d20a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800d20c:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800d20e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d210:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 800d214:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d216:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800d218:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d21a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800d21c:	625a      	str	r2, [r3, #36]	@ 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 800d21e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d220:	2200      	movs	r2, #0
 800d222:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800d226:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d228:	2200      	movs	r2, #0
 800d22a:	f883 20a4 	strb.w	r2, [r3, #164]	@ 0xa4
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 800d22e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d230:	3354      	adds	r3, #84	@ 0x54
 800d232:	224c      	movs	r2, #76	@ 0x4c
 800d234:	2100      	movs	r1, #0
 800d236:	4618      	mov	r0, r3
 800d238:	f01d ff0b 	bl	802b052 <memset>
 800d23c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d23e:	4a0d      	ldr	r2, [pc, #52]	@ (800d274 <prvInitialiseNewTask+0x144>)
 800d240:	659a      	str	r2, [r3, #88]	@ 0x58
 800d242:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d244:	4a0c      	ldr	r2, [pc, #48]	@ (800d278 <prvInitialiseNewTask+0x148>)
 800d246:	65da      	str	r2, [r3, #92]	@ 0x5c
 800d248:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d24a:	4a0c      	ldr	r2, [pc, #48]	@ (800d27c <prvInitialiseNewTask+0x14c>)
 800d24c:	661a      	str	r2, [r3, #96]	@ 0x60
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800d24e:	683a      	ldr	r2, [r7, #0]
 800d250:	68f9      	ldr	r1, [r7, #12]
 800d252:	69b8      	ldr	r0, [r7, #24]
 800d254:	f7fe fc46 	bl	800bae4 <pxPortInitialiseStack>
 800d258:	4602      	mov	r2, r0
 800d25a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d25c:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 800d25e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d260:	2b00      	cmp	r3, #0
 800d262:	d002      	beq.n	800d26a <prvInitialiseNewTask+0x13a>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800d264:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d266:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800d268:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800d26a:	bf00      	nop
 800d26c:	3720      	adds	r7, #32
 800d26e:	46bd      	mov	sp, r7
 800d270:	bd80      	pop	{r7, pc}
 800d272:	bf00      	nop
 800d274:	2400b988 	.word	0x2400b988
 800d278:	2400b9f0 	.word	0x2400b9f0
 800d27c:	2400ba58 	.word	0x2400ba58

0800d280 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 800d280:	b580      	push	{r7, lr}
 800d282:	b082      	sub	sp, #8
 800d284:	af00      	add	r7, sp, #0
 800d286:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 800d288:	f7fe fd5e 	bl	800bd48 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 800d28c:	4b2d      	ldr	r3, [pc, #180]	@ (800d344 <prvAddNewTaskToReadyList+0xc4>)
 800d28e:	681b      	ldr	r3, [r3, #0]
 800d290:	3301      	adds	r3, #1
 800d292:	4a2c      	ldr	r2, [pc, #176]	@ (800d344 <prvAddNewTaskToReadyList+0xc4>)
 800d294:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800d296:	4b2c      	ldr	r3, [pc, #176]	@ (800d348 <prvAddNewTaskToReadyList+0xc8>)
 800d298:	681b      	ldr	r3, [r3, #0]
 800d29a:	2b00      	cmp	r3, #0
 800d29c:	d109      	bne.n	800d2b2 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800d29e:	4a2a      	ldr	r2, [pc, #168]	@ (800d348 <prvAddNewTaskToReadyList+0xc8>)
 800d2a0:	687b      	ldr	r3, [r7, #4]
 800d2a2:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 800d2a4:	4b27      	ldr	r3, [pc, #156]	@ (800d344 <prvAddNewTaskToReadyList+0xc4>)
 800d2a6:	681b      	ldr	r3, [r3, #0]
 800d2a8:	2b01      	cmp	r3, #1
 800d2aa:	d110      	bne.n	800d2ce <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 800d2ac:	f000 fc2e 	bl	800db0c <prvInitialiseTaskLists>
 800d2b0:	e00d      	b.n	800d2ce <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800d2b2:	4b26      	ldr	r3, [pc, #152]	@ (800d34c <prvAddNewTaskToReadyList+0xcc>)
 800d2b4:	681b      	ldr	r3, [r3, #0]
 800d2b6:	2b00      	cmp	r3, #0
 800d2b8:	d109      	bne.n	800d2ce <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800d2ba:	4b23      	ldr	r3, [pc, #140]	@ (800d348 <prvAddNewTaskToReadyList+0xc8>)
 800d2bc:	681b      	ldr	r3, [r3, #0]
 800d2be:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800d2c0:	687b      	ldr	r3, [r7, #4]
 800d2c2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800d2c4:	429a      	cmp	r2, r3
 800d2c6:	d802      	bhi.n	800d2ce <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 800d2c8:	4a1f      	ldr	r2, [pc, #124]	@ (800d348 <prvAddNewTaskToReadyList+0xc8>)
 800d2ca:	687b      	ldr	r3, [r7, #4]
 800d2cc:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800d2ce:	4b20      	ldr	r3, [pc, #128]	@ (800d350 <prvAddNewTaskToReadyList+0xd0>)
 800d2d0:	681b      	ldr	r3, [r3, #0]
 800d2d2:	3301      	adds	r3, #1
 800d2d4:	4a1e      	ldr	r2, [pc, #120]	@ (800d350 <prvAddNewTaskToReadyList+0xd0>)
 800d2d6:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 800d2d8:	4b1d      	ldr	r3, [pc, #116]	@ (800d350 <prvAddNewTaskToReadyList+0xd0>)
 800d2da:	681a      	ldr	r2, [r3, #0]
 800d2dc:	687b      	ldr	r3, [r7, #4]
 800d2de:	645a      	str	r2, [r3, #68]	@ 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 800d2e0:	687b      	ldr	r3, [r7, #4]
 800d2e2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800d2e4:	4b1b      	ldr	r3, [pc, #108]	@ (800d354 <prvAddNewTaskToReadyList+0xd4>)
 800d2e6:	681b      	ldr	r3, [r3, #0]
 800d2e8:	429a      	cmp	r2, r3
 800d2ea:	d903      	bls.n	800d2f4 <prvAddNewTaskToReadyList+0x74>
 800d2ec:	687b      	ldr	r3, [r7, #4]
 800d2ee:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800d2f0:	4a18      	ldr	r2, [pc, #96]	@ (800d354 <prvAddNewTaskToReadyList+0xd4>)
 800d2f2:	6013      	str	r3, [r2, #0]
 800d2f4:	687b      	ldr	r3, [r7, #4]
 800d2f6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800d2f8:	4613      	mov	r3, r2
 800d2fa:	009b      	lsls	r3, r3, #2
 800d2fc:	4413      	add	r3, r2
 800d2fe:	009b      	lsls	r3, r3, #2
 800d300:	4a15      	ldr	r2, [pc, #84]	@ (800d358 <prvAddNewTaskToReadyList+0xd8>)
 800d302:	441a      	add	r2, r3
 800d304:	687b      	ldr	r3, [r7, #4]
 800d306:	3304      	adds	r3, #4
 800d308:	4619      	mov	r1, r3
 800d30a:	4610      	mov	r0, r2
 800d30c:	f7fe fb63 	bl	800b9d6 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 800d310:	f7fe fd4c 	bl	800bdac <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 800d314:	4b0d      	ldr	r3, [pc, #52]	@ (800d34c <prvAddNewTaskToReadyList+0xcc>)
 800d316:	681b      	ldr	r3, [r3, #0]
 800d318:	2b00      	cmp	r3, #0
 800d31a:	d00e      	beq.n	800d33a <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800d31c:	4b0a      	ldr	r3, [pc, #40]	@ (800d348 <prvAddNewTaskToReadyList+0xc8>)
 800d31e:	681b      	ldr	r3, [r3, #0]
 800d320:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800d322:	687b      	ldr	r3, [r7, #4]
 800d324:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800d326:	429a      	cmp	r2, r3
 800d328:	d207      	bcs.n	800d33a <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 800d32a:	4b0c      	ldr	r3, [pc, #48]	@ (800d35c <prvAddNewTaskToReadyList+0xdc>)
 800d32c:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800d330:	601a      	str	r2, [r3, #0]
 800d332:	f3bf 8f4f 	dsb	sy
 800d336:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800d33a:	bf00      	nop
 800d33c:	3708      	adds	r7, #8
 800d33e:	46bd      	mov	sp, r7
 800d340:	bd80      	pop	{r7, pc}
 800d342:	bf00      	nop
 800d344:	2400ab20 	.word	0x2400ab20
 800d348:	2400a64c 	.word	0x2400a64c
 800d34c:	2400ab2c 	.word	0x2400ab2c
 800d350:	2400ab3c 	.word	0x2400ab3c
 800d354:	2400ab28 	.word	0x2400ab28
 800d358:	2400a650 	.word	0x2400a650
 800d35c:	e000ed04 	.word	0xe000ed04

0800d360 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 800d360:	b580      	push	{r7, lr}
 800d362:	b084      	sub	sp, #16
 800d364:	af00      	add	r7, sp, #0
 800d366:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 800d368:	2300      	movs	r3, #0
 800d36a:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 800d36c:	687b      	ldr	r3, [r7, #4]
 800d36e:	2b00      	cmp	r3, #0
 800d370:	d018      	beq.n	800d3a4 <vTaskDelay+0x44>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800d372:	4b14      	ldr	r3, [pc, #80]	@ (800d3c4 <vTaskDelay+0x64>)
 800d374:	681b      	ldr	r3, [r3, #0]
 800d376:	2b00      	cmp	r3, #0
 800d378:	d00b      	beq.n	800d392 <vTaskDelay+0x32>
	__asm volatile
 800d37a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d37e:	f383 8811 	msr	BASEPRI, r3
 800d382:	f3bf 8f6f 	isb	sy
 800d386:	f3bf 8f4f 	dsb	sy
 800d38a:	60bb      	str	r3, [r7, #8]
}
 800d38c:	bf00      	nop
 800d38e:	bf00      	nop
 800d390:	e7fd      	b.n	800d38e <vTaskDelay+0x2e>
			vTaskSuspendAll();
 800d392:	f000 f88b 	bl	800d4ac <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 800d396:	2100      	movs	r1, #0
 800d398:	6878      	ldr	r0, [r7, #4]
 800d39a:	f000 fe09 	bl	800dfb0 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 800d39e:	f000 f893 	bl	800d4c8 <xTaskResumeAll>
 800d3a2:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800d3a4:	68fb      	ldr	r3, [r7, #12]
 800d3a6:	2b00      	cmp	r3, #0
 800d3a8:	d107      	bne.n	800d3ba <vTaskDelay+0x5a>
		{
			portYIELD_WITHIN_API();
 800d3aa:	4b07      	ldr	r3, [pc, #28]	@ (800d3c8 <vTaskDelay+0x68>)
 800d3ac:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800d3b0:	601a      	str	r2, [r3, #0]
 800d3b2:	f3bf 8f4f 	dsb	sy
 800d3b6:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800d3ba:	bf00      	nop
 800d3bc:	3710      	adds	r7, #16
 800d3be:	46bd      	mov	sp, r7
 800d3c0:	bd80      	pop	{r7, pc}
 800d3c2:	bf00      	nop
 800d3c4:	2400ab48 	.word	0x2400ab48
 800d3c8:	e000ed04 	.word	0xe000ed04

0800d3cc <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 800d3cc:	b580      	push	{r7, lr}
 800d3ce:	b08a      	sub	sp, #40	@ 0x28
 800d3d0:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800d3d2:	2300      	movs	r3, #0
 800d3d4:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800d3d6:	2300      	movs	r3, #0
 800d3d8:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800d3da:	463a      	mov	r2, r7
 800d3dc:	1d39      	adds	r1, r7, #4
 800d3de:	f107 0308 	add.w	r3, r7, #8
 800d3e2:	4618      	mov	r0, r3
 800d3e4:	f7fe f8a8 	bl	800b538 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 800d3e8:	6839      	ldr	r1, [r7, #0]
 800d3ea:	687b      	ldr	r3, [r7, #4]
 800d3ec:	68ba      	ldr	r2, [r7, #8]
 800d3ee:	9202      	str	r2, [sp, #8]
 800d3f0:	9301      	str	r3, [sp, #4]
 800d3f2:	2300      	movs	r3, #0
 800d3f4:	9300      	str	r3, [sp, #0]
 800d3f6:	2300      	movs	r3, #0
 800d3f8:	460a      	mov	r2, r1
 800d3fa:	4924      	ldr	r1, [pc, #144]	@ (800d48c <vTaskStartScheduler+0xc0>)
 800d3fc:	4824      	ldr	r0, [pc, #144]	@ (800d490 <vTaskStartScheduler+0xc4>)
 800d3fe:	f7ff fdf1 	bl	800cfe4 <xTaskCreateStatic>
 800d402:	4603      	mov	r3, r0
 800d404:	4a23      	ldr	r2, [pc, #140]	@ (800d494 <vTaskStartScheduler+0xc8>)
 800d406:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 800d408:	4b22      	ldr	r3, [pc, #136]	@ (800d494 <vTaskStartScheduler+0xc8>)
 800d40a:	681b      	ldr	r3, [r3, #0]
 800d40c:	2b00      	cmp	r3, #0
 800d40e:	d002      	beq.n	800d416 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 800d410:	2301      	movs	r3, #1
 800d412:	617b      	str	r3, [r7, #20]
 800d414:	e001      	b.n	800d41a <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800d416:	2300      	movs	r3, #0
 800d418:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 800d41a:	697b      	ldr	r3, [r7, #20]
 800d41c:	2b01      	cmp	r3, #1
 800d41e:	d102      	bne.n	800d426 <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 800d420:	f000 fe1a 	bl	800e058 <xTimerCreateTimerTask>
 800d424:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800d426:	697b      	ldr	r3, [r7, #20]
 800d428:	2b01      	cmp	r3, #1
 800d42a:	d11b      	bne.n	800d464 <vTaskStartScheduler+0x98>
	__asm volatile
 800d42c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d430:	f383 8811 	msr	BASEPRI, r3
 800d434:	f3bf 8f6f 	isb	sy
 800d438:	f3bf 8f4f 	dsb	sy
 800d43c:	613b      	str	r3, [r7, #16]
}
 800d43e:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 800d440:	4b15      	ldr	r3, [pc, #84]	@ (800d498 <vTaskStartScheduler+0xcc>)
 800d442:	681b      	ldr	r3, [r3, #0]
 800d444:	3354      	adds	r3, #84	@ 0x54
 800d446:	4a15      	ldr	r2, [pc, #84]	@ (800d49c <vTaskStartScheduler+0xd0>)
 800d448:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 800d44a:	4b15      	ldr	r3, [pc, #84]	@ (800d4a0 <vTaskStartScheduler+0xd4>)
 800d44c:	f04f 32ff 	mov.w	r2, #4294967295
 800d450:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800d452:	4b14      	ldr	r3, [pc, #80]	@ (800d4a4 <vTaskStartScheduler+0xd8>)
 800d454:	2201      	movs	r2, #1
 800d456:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 800d458:	4b13      	ldr	r3, [pc, #76]	@ (800d4a8 <vTaskStartScheduler+0xdc>)
 800d45a:	2200      	movs	r2, #0
 800d45c:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 800d45e:	f7fe fbcf 	bl	800bc00 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 800d462:	e00f      	b.n	800d484 <vTaskStartScheduler+0xb8>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800d464:	697b      	ldr	r3, [r7, #20]
 800d466:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d46a:	d10b      	bne.n	800d484 <vTaskStartScheduler+0xb8>
	__asm volatile
 800d46c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d470:	f383 8811 	msr	BASEPRI, r3
 800d474:	f3bf 8f6f 	isb	sy
 800d478:	f3bf 8f4f 	dsb	sy
 800d47c:	60fb      	str	r3, [r7, #12]
}
 800d47e:	bf00      	nop
 800d480:	bf00      	nop
 800d482:	e7fd      	b.n	800d480 <vTaskStartScheduler+0xb4>
}
 800d484:	bf00      	nop
 800d486:	3718      	adds	r7, #24
 800d488:	46bd      	mov	sp, r7
 800d48a:	bd80      	pop	{r7, pc}
 800d48c:	0802c9ec 	.word	0x0802c9ec
 800d490:	0800dadd 	.word	0x0800dadd
 800d494:	2400ab44 	.word	0x2400ab44
 800d498:	2400a64c 	.word	0x2400a64c
 800d49c:	240000d8 	.word	0x240000d8
 800d4a0:	2400ab40 	.word	0x2400ab40
 800d4a4:	2400ab2c 	.word	0x2400ab2c
 800d4a8:	2400ab24 	.word	0x2400ab24

0800d4ac <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 800d4ac:	b480      	push	{r7}
 800d4ae:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 800d4b0:	4b04      	ldr	r3, [pc, #16]	@ (800d4c4 <vTaskSuspendAll+0x18>)
 800d4b2:	681b      	ldr	r3, [r3, #0]
 800d4b4:	3301      	adds	r3, #1
 800d4b6:	4a03      	ldr	r2, [pc, #12]	@ (800d4c4 <vTaskSuspendAll+0x18>)
 800d4b8:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 800d4ba:	bf00      	nop
 800d4bc:	46bd      	mov	sp, r7
 800d4be:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d4c2:	4770      	bx	lr
 800d4c4:	2400ab48 	.word	0x2400ab48

0800d4c8 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 800d4c8:	b580      	push	{r7, lr}
 800d4ca:	b084      	sub	sp, #16
 800d4cc:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800d4ce:	2300      	movs	r3, #0
 800d4d0:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800d4d2:	2300      	movs	r3, #0
 800d4d4:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800d4d6:	4b42      	ldr	r3, [pc, #264]	@ (800d5e0 <xTaskResumeAll+0x118>)
 800d4d8:	681b      	ldr	r3, [r3, #0]
 800d4da:	2b00      	cmp	r3, #0
 800d4dc:	d10b      	bne.n	800d4f6 <xTaskResumeAll+0x2e>
	__asm volatile
 800d4de:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d4e2:	f383 8811 	msr	BASEPRI, r3
 800d4e6:	f3bf 8f6f 	isb	sy
 800d4ea:	f3bf 8f4f 	dsb	sy
 800d4ee:	603b      	str	r3, [r7, #0]
}
 800d4f0:	bf00      	nop
 800d4f2:	bf00      	nop
 800d4f4:	e7fd      	b.n	800d4f2 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 800d4f6:	f7fe fc27 	bl	800bd48 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 800d4fa:	4b39      	ldr	r3, [pc, #228]	@ (800d5e0 <xTaskResumeAll+0x118>)
 800d4fc:	681b      	ldr	r3, [r3, #0]
 800d4fe:	3b01      	subs	r3, #1
 800d500:	4a37      	ldr	r2, [pc, #220]	@ (800d5e0 <xTaskResumeAll+0x118>)
 800d502:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800d504:	4b36      	ldr	r3, [pc, #216]	@ (800d5e0 <xTaskResumeAll+0x118>)
 800d506:	681b      	ldr	r3, [r3, #0]
 800d508:	2b00      	cmp	r3, #0
 800d50a:	d162      	bne.n	800d5d2 <xTaskResumeAll+0x10a>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800d50c:	4b35      	ldr	r3, [pc, #212]	@ (800d5e4 <xTaskResumeAll+0x11c>)
 800d50e:	681b      	ldr	r3, [r3, #0]
 800d510:	2b00      	cmp	r3, #0
 800d512:	d05e      	beq.n	800d5d2 <xTaskResumeAll+0x10a>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800d514:	e02f      	b.n	800d576 <xTaskResumeAll+0xae>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800d516:	4b34      	ldr	r3, [pc, #208]	@ (800d5e8 <xTaskResumeAll+0x120>)
 800d518:	68db      	ldr	r3, [r3, #12]
 800d51a:	68db      	ldr	r3, [r3, #12]
 800d51c:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800d51e:	68fb      	ldr	r3, [r7, #12]
 800d520:	3318      	adds	r3, #24
 800d522:	4618      	mov	r0, r3
 800d524:	f7fe fab4 	bl	800ba90 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800d528:	68fb      	ldr	r3, [r7, #12]
 800d52a:	3304      	adds	r3, #4
 800d52c:	4618      	mov	r0, r3
 800d52e:	f7fe faaf 	bl	800ba90 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800d532:	68fb      	ldr	r3, [r7, #12]
 800d534:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800d536:	4b2d      	ldr	r3, [pc, #180]	@ (800d5ec <xTaskResumeAll+0x124>)
 800d538:	681b      	ldr	r3, [r3, #0]
 800d53a:	429a      	cmp	r2, r3
 800d53c:	d903      	bls.n	800d546 <xTaskResumeAll+0x7e>
 800d53e:	68fb      	ldr	r3, [r7, #12]
 800d540:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800d542:	4a2a      	ldr	r2, [pc, #168]	@ (800d5ec <xTaskResumeAll+0x124>)
 800d544:	6013      	str	r3, [r2, #0]
 800d546:	68fb      	ldr	r3, [r7, #12]
 800d548:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800d54a:	4613      	mov	r3, r2
 800d54c:	009b      	lsls	r3, r3, #2
 800d54e:	4413      	add	r3, r2
 800d550:	009b      	lsls	r3, r3, #2
 800d552:	4a27      	ldr	r2, [pc, #156]	@ (800d5f0 <xTaskResumeAll+0x128>)
 800d554:	441a      	add	r2, r3
 800d556:	68fb      	ldr	r3, [r7, #12]
 800d558:	3304      	adds	r3, #4
 800d55a:	4619      	mov	r1, r3
 800d55c:	4610      	mov	r0, r2
 800d55e:	f7fe fa3a 	bl	800b9d6 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800d562:	68fb      	ldr	r3, [r7, #12]
 800d564:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800d566:	4b23      	ldr	r3, [pc, #140]	@ (800d5f4 <xTaskResumeAll+0x12c>)
 800d568:	681b      	ldr	r3, [r3, #0]
 800d56a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800d56c:	429a      	cmp	r2, r3
 800d56e:	d302      	bcc.n	800d576 <xTaskResumeAll+0xae>
					{
						xYieldPending = pdTRUE;
 800d570:	4b21      	ldr	r3, [pc, #132]	@ (800d5f8 <xTaskResumeAll+0x130>)
 800d572:	2201      	movs	r2, #1
 800d574:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800d576:	4b1c      	ldr	r3, [pc, #112]	@ (800d5e8 <xTaskResumeAll+0x120>)
 800d578:	681b      	ldr	r3, [r3, #0]
 800d57a:	2b00      	cmp	r3, #0
 800d57c:	d1cb      	bne.n	800d516 <xTaskResumeAll+0x4e>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 800d57e:	68fb      	ldr	r3, [r7, #12]
 800d580:	2b00      	cmp	r3, #0
 800d582:	d001      	beq.n	800d588 <xTaskResumeAll+0xc0>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 800d584:	f000 fb66 	bl	800dc54 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 800d588:	4b1c      	ldr	r3, [pc, #112]	@ (800d5fc <xTaskResumeAll+0x134>)
 800d58a:	681b      	ldr	r3, [r3, #0]
 800d58c:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 800d58e:	687b      	ldr	r3, [r7, #4]
 800d590:	2b00      	cmp	r3, #0
 800d592:	d010      	beq.n	800d5b6 <xTaskResumeAll+0xee>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 800d594:	f000 f846 	bl	800d624 <xTaskIncrementTick>
 800d598:	4603      	mov	r3, r0
 800d59a:	2b00      	cmp	r3, #0
 800d59c:	d002      	beq.n	800d5a4 <xTaskResumeAll+0xdc>
							{
								xYieldPending = pdTRUE;
 800d59e:	4b16      	ldr	r3, [pc, #88]	@ (800d5f8 <xTaskResumeAll+0x130>)
 800d5a0:	2201      	movs	r2, #1
 800d5a2:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 800d5a4:	687b      	ldr	r3, [r7, #4]
 800d5a6:	3b01      	subs	r3, #1
 800d5a8:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 800d5aa:	687b      	ldr	r3, [r7, #4]
 800d5ac:	2b00      	cmp	r3, #0
 800d5ae:	d1f1      	bne.n	800d594 <xTaskResumeAll+0xcc>

						xPendedTicks = 0;
 800d5b0:	4b12      	ldr	r3, [pc, #72]	@ (800d5fc <xTaskResumeAll+0x134>)
 800d5b2:	2200      	movs	r2, #0
 800d5b4:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 800d5b6:	4b10      	ldr	r3, [pc, #64]	@ (800d5f8 <xTaskResumeAll+0x130>)
 800d5b8:	681b      	ldr	r3, [r3, #0]
 800d5ba:	2b00      	cmp	r3, #0
 800d5bc:	d009      	beq.n	800d5d2 <xTaskResumeAll+0x10a>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 800d5be:	2301      	movs	r3, #1
 800d5c0:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 800d5c2:	4b0f      	ldr	r3, [pc, #60]	@ (800d600 <xTaskResumeAll+0x138>)
 800d5c4:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800d5c8:	601a      	str	r2, [r3, #0]
 800d5ca:	f3bf 8f4f 	dsb	sy
 800d5ce:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800d5d2:	f7fe fbeb 	bl	800bdac <vPortExitCritical>

	return xAlreadyYielded;
 800d5d6:	68bb      	ldr	r3, [r7, #8]
}
 800d5d8:	4618      	mov	r0, r3
 800d5da:	3710      	adds	r7, #16
 800d5dc:	46bd      	mov	sp, r7
 800d5de:	bd80      	pop	{r7, pc}
 800d5e0:	2400ab48 	.word	0x2400ab48
 800d5e4:	2400ab20 	.word	0x2400ab20
 800d5e8:	2400aae0 	.word	0x2400aae0
 800d5ec:	2400ab28 	.word	0x2400ab28
 800d5f0:	2400a650 	.word	0x2400a650
 800d5f4:	2400a64c 	.word	0x2400a64c
 800d5f8:	2400ab34 	.word	0x2400ab34
 800d5fc:	2400ab30 	.word	0x2400ab30
 800d600:	e000ed04 	.word	0xe000ed04

0800d604 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 800d604:	b480      	push	{r7}
 800d606:	b083      	sub	sp, #12
 800d608:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 800d60a:	4b05      	ldr	r3, [pc, #20]	@ (800d620 <xTaskGetTickCount+0x1c>)
 800d60c:	681b      	ldr	r3, [r3, #0]
 800d60e:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 800d610:	687b      	ldr	r3, [r7, #4]
}
 800d612:	4618      	mov	r0, r3
 800d614:	370c      	adds	r7, #12
 800d616:	46bd      	mov	sp, r7
 800d618:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d61c:	4770      	bx	lr
 800d61e:	bf00      	nop
 800d620:	2400ab24 	.word	0x2400ab24

0800d624 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 800d624:	b580      	push	{r7, lr}
 800d626:	b086      	sub	sp, #24
 800d628:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800d62a:	2300      	movs	r3, #0
 800d62c:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800d62e:	4b4f      	ldr	r3, [pc, #316]	@ (800d76c <xTaskIncrementTick+0x148>)
 800d630:	681b      	ldr	r3, [r3, #0]
 800d632:	2b00      	cmp	r3, #0
 800d634:	f040 8090 	bne.w	800d758 <xTaskIncrementTick+0x134>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800d638:	4b4d      	ldr	r3, [pc, #308]	@ (800d770 <xTaskIncrementTick+0x14c>)
 800d63a:	681b      	ldr	r3, [r3, #0]
 800d63c:	3301      	adds	r3, #1
 800d63e:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 800d640:	4a4b      	ldr	r2, [pc, #300]	@ (800d770 <xTaskIncrementTick+0x14c>)
 800d642:	693b      	ldr	r3, [r7, #16]
 800d644:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800d646:	693b      	ldr	r3, [r7, #16]
 800d648:	2b00      	cmp	r3, #0
 800d64a:	d121      	bne.n	800d690 <xTaskIncrementTick+0x6c>
		{
			taskSWITCH_DELAYED_LISTS();
 800d64c:	4b49      	ldr	r3, [pc, #292]	@ (800d774 <xTaskIncrementTick+0x150>)
 800d64e:	681b      	ldr	r3, [r3, #0]
 800d650:	681b      	ldr	r3, [r3, #0]
 800d652:	2b00      	cmp	r3, #0
 800d654:	d00b      	beq.n	800d66e <xTaskIncrementTick+0x4a>
	__asm volatile
 800d656:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d65a:	f383 8811 	msr	BASEPRI, r3
 800d65e:	f3bf 8f6f 	isb	sy
 800d662:	f3bf 8f4f 	dsb	sy
 800d666:	603b      	str	r3, [r7, #0]
}
 800d668:	bf00      	nop
 800d66a:	bf00      	nop
 800d66c:	e7fd      	b.n	800d66a <xTaskIncrementTick+0x46>
 800d66e:	4b41      	ldr	r3, [pc, #260]	@ (800d774 <xTaskIncrementTick+0x150>)
 800d670:	681b      	ldr	r3, [r3, #0]
 800d672:	60fb      	str	r3, [r7, #12]
 800d674:	4b40      	ldr	r3, [pc, #256]	@ (800d778 <xTaskIncrementTick+0x154>)
 800d676:	681b      	ldr	r3, [r3, #0]
 800d678:	4a3e      	ldr	r2, [pc, #248]	@ (800d774 <xTaskIncrementTick+0x150>)
 800d67a:	6013      	str	r3, [r2, #0]
 800d67c:	4a3e      	ldr	r2, [pc, #248]	@ (800d778 <xTaskIncrementTick+0x154>)
 800d67e:	68fb      	ldr	r3, [r7, #12]
 800d680:	6013      	str	r3, [r2, #0]
 800d682:	4b3e      	ldr	r3, [pc, #248]	@ (800d77c <xTaskIncrementTick+0x158>)
 800d684:	681b      	ldr	r3, [r3, #0]
 800d686:	3301      	adds	r3, #1
 800d688:	4a3c      	ldr	r2, [pc, #240]	@ (800d77c <xTaskIncrementTick+0x158>)
 800d68a:	6013      	str	r3, [r2, #0]
 800d68c:	f000 fae2 	bl	800dc54 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800d690:	4b3b      	ldr	r3, [pc, #236]	@ (800d780 <xTaskIncrementTick+0x15c>)
 800d692:	681b      	ldr	r3, [r3, #0]
 800d694:	693a      	ldr	r2, [r7, #16]
 800d696:	429a      	cmp	r2, r3
 800d698:	d349      	bcc.n	800d72e <xTaskIncrementTick+0x10a>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800d69a:	4b36      	ldr	r3, [pc, #216]	@ (800d774 <xTaskIncrementTick+0x150>)
 800d69c:	681b      	ldr	r3, [r3, #0]
 800d69e:	681b      	ldr	r3, [r3, #0]
 800d6a0:	2b00      	cmp	r3, #0
 800d6a2:	d104      	bne.n	800d6ae <xTaskIncrementTick+0x8a>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800d6a4:	4b36      	ldr	r3, [pc, #216]	@ (800d780 <xTaskIncrementTick+0x15c>)
 800d6a6:	f04f 32ff 	mov.w	r2, #4294967295
 800d6aa:	601a      	str	r2, [r3, #0]
					break;
 800d6ac:	e03f      	b.n	800d72e <xTaskIncrementTick+0x10a>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800d6ae:	4b31      	ldr	r3, [pc, #196]	@ (800d774 <xTaskIncrementTick+0x150>)
 800d6b0:	681b      	ldr	r3, [r3, #0]
 800d6b2:	68db      	ldr	r3, [r3, #12]
 800d6b4:	68db      	ldr	r3, [r3, #12]
 800d6b6:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800d6b8:	68bb      	ldr	r3, [r7, #8]
 800d6ba:	685b      	ldr	r3, [r3, #4]
 800d6bc:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800d6be:	693a      	ldr	r2, [r7, #16]
 800d6c0:	687b      	ldr	r3, [r7, #4]
 800d6c2:	429a      	cmp	r2, r3
 800d6c4:	d203      	bcs.n	800d6ce <xTaskIncrementTick+0xaa>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 800d6c6:	4a2e      	ldr	r2, [pc, #184]	@ (800d780 <xTaskIncrementTick+0x15c>)
 800d6c8:	687b      	ldr	r3, [r7, #4]
 800d6ca:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 800d6cc:	e02f      	b.n	800d72e <xTaskIncrementTick+0x10a>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800d6ce:	68bb      	ldr	r3, [r7, #8]
 800d6d0:	3304      	adds	r3, #4
 800d6d2:	4618      	mov	r0, r3
 800d6d4:	f7fe f9dc 	bl	800ba90 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800d6d8:	68bb      	ldr	r3, [r7, #8]
 800d6da:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800d6dc:	2b00      	cmp	r3, #0
 800d6de:	d004      	beq.n	800d6ea <xTaskIncrementTick+0xc6>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800d6e0:	68bb      	ldr	r3, [r7, #8]
 800d6e2:	3318      	adds	r3, #24
 800d6e4:	4618      	mov	r0, r3
 800d6e6:	f7fe f9d3 	bl	800ba90 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800d6ea:	68bb      	ldr	r3, [r7, #8]
 800d6ec:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800d6ee:	4b25      	ldr	r3, [pc, #148]	@ (800d784 <xTaskIncrementTick+0x160>)
 800d6f0:	681b      	ldr	r3, [r3, #0]
 800d6f2:	429a      	cmp	r2, r3
 800d6f4:	d903      	bls.n	800d6fe <xTaskIncrementTick+0xda>
 800d6f6:	68bb      	ldr	r3, [r7, #8]
 800d6f8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800d6fa:	4a22      	ldr	r2, [pc, #136]	@ (800d784 <xTaskIncrementTick+0x160>)
 800d6fc:	6013      	str	r3, [r2, #0]
 800d6fe:	68bb      	ldr	r3, [r7, #8]
 800d700:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800d702:	4613      	mov	r3, r2
 800d704:	009b      	lsls	r3, r3, #2
 800d706:	4413      	add	r3, r2
 800d708:	009b      	lsls	r3, r3, #2
 800d70a:	4a1f      	ldr	r2, [pc, #124]	@ (800d788 <xTaskIncrementTick+0x164>)
 800d70c:	441a      	add	r2, r3
 800d70e:	68bb      	ldr	r3, [r7, #8]
 800d710:	3304      	adds	r3, #4
 800d712:	4619      	mov	r1, r3
 800d714:	4610      	mov	r0, r2
 800d716:	f7fe f95e 	bl	800b9d6 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800d71a:	68bb      	ldr	r3, [r7, #8]
 800d71c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800d71e:	4b1b      	ldr	r3, [pc, #108]	@ (800d78c <xTaskIncrementTick+0x168>)
 800d720:	681b      	ldr	r3, [r3, #0]
 800d722:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800d724:	429a      	cmp	r2, r3
 800d726:	d3b8      	bcc.n	800d69a <xTaskIncrementTick+0x76>
						{
							xSwitchRequired = pdTRUE;
 800d728:	2301      	movs	r3, #1
 800d72a:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800d72c:	e7b5      	b.n	800d69a <xTaskIncrementTick+0x76>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800d72e:	4b17      	ldr	r3, [pc, #92]	@ (800d78c <xTaskIncrementTick+0x168>)
 800d730:	681b      	ldr	r3, [r3, #0]
 800d732:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800d734:	4914      	ldr	r1, [pc, #80]	@ (800d788 <xTaskIncrementTick+0x164>)
 800d736:	4613      	mov	r3, r2
 800d738:	009b      	lsls	r3, r3, #2
 800d73a:	4413      	add	r3, r2
 800d73c:	009b      	lsls	r3, r3, #2
 800d73e:	440b      	add	r3, r1
 800d740:	681b      	ldr	r3, [r3, #0]
 800d742:	2b01      	cmp	r3, #1
 800d744:	d901      	bls.n	800d74a <xTaskIncrementTick+0x126>
			{
				xSwitchRequired = pdTRUE;
 800d746:	2301      	movs	r3, #1
 800d748:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 800d74a:	4b11      	ldr	r3, [pc, #68]	@ (800d790 <xTaskIncrementTick+0x16c>)
 800d74c:	681b      	ldr	r3, [r3, #0]
 800d74e:	2b00      	cmp	r3, #0
 800d750:	d007      	beq.n	800d762 <xTaskIncrementTick+0x13e>
			{
				xSwitchRequired = pdTRUE;
 800d752:	2301      	movs	r3, #1
 800d754:	617b      	str	r3, [r7, #20]
 800d756:	e004      	b.n	800d762 <xTaskIncrementTick+0x13e>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 800d758:	4b0e      	ldr	r3, [pc, #56]	@ (800d794 <xTaskIncrementTick+0x170>)
 800d75a:	681b      	ldr	r3, [r3, #0]
 800d75c:	3301      	adds	r3, #1
 800d75e:	4a0d      	ldr	r2, [pc, #52]	@ (800d794 <xTaskIncrementTick+0x170>)
 800d760:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 800d762:	697b      	ldr	r3, [r7, #20]
}
 800d764:	4618      	mov	r0, r3
 800d766:	3718      	adds	r7, #24
 800d768:	46bd      	mov	sp, r7
 800d76a:	bd80      	pop	{r7, pc}
 800d76c:	2400ab48 	.word	0x2400ab48
 800d770:	2400ab24 	.word	0x2400ab24
 800d774:	2400aad8 	.word	0x2400aad8
 800d778:	2400aadc 	.word	0x2400aadc
 800d77c:	2400ab38 	.word	0x2400ab38
 800d780:	2400ab40 	.word	0x2400ab40
 800d784:	2400ab28 	.word	0x2400ab28
 800d788:	2400a650 	.word	0x2400a650
 800d78c:	2400a64c 	.word	0x2400a64c
 800d790:	2400ab34 	.word	0x2400ab34
 800d794:	2400ab30 	.word	0x2400ab30

0800d798 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 800d798:	b480      	push	{r7}
 800d79a:	b085      	sub	sp, #20
 800d79c:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800d79e:	4b2b      	ldr	r3, [pc, #172]	@ (800d84c <vTaskSwitchContext+0xb4>)
 800d7a0:	681b      	ldr	r3, [r3, #0]
 800d7a2:	2b00      	cmp	r3, #0
 800d7a4:	d003      	beq.n	800d7ae <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800d7a6:	4b2a      	ldr	r3, [pc, #168]	@ (800d850 <vTaskSwitchContext+0xb8>)
 800d7a8:	2201      	movs	r2, #1
 800d7aa:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 800d7ac:	e047      	b.n	800d83e <vTaskSwitchContext+0xa6>
		xYieldPending = pdFALSE;
 800d7ae:	4b28      	ldr	r3, [pc, #160]	@ (800d850 <vTaskSwitchContext+0xb8>)
 800d7b0:	2200      	movs	r2, #0
 800d7b2:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800d7b4:	4b27      	ldr	r3, [pc, #156]	@ (800d854 <vTaskSwitchContext+0xbc>)
 800d7b6:	681b      	ldr	r3, [r3, #0]
 800d7b8:	60fb      	str	r3, [r7, #12]
 800d7ba:	e011      	b.n	800d7e0 <vTaskSwitchContext+0x48>
 800d7bc:	68fb      	ldr	r3, [r7, #12]
 800d7be:	2b00      	cmp	r3, #0
 800d7c0:	d10b      	bne.n	800d7da <vTaskSwitchContext+0x42>
	__asm volatile
 800d7c2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d7c6:	f383 8811 	msr	BASEPRI, r3
 800d7ca:	f3bf 8f6f 	isb	sy
 800d7ce:	f3bf 8f4f 	dsb	sy
 800d7d2:	607b      	str	r3, [r7, #4]
}
 800d7d4:	bf00      	nop
 800d7d6:	bf00      	nop
 800d7d8:	e7fd      	b.n	800d7d6 <vTaskSwitchContext+0x3e>
 800d7da:	68fb      	ldr	r3, [r7, #12]
 800d7dc:	3b01      	subs	r3, #1
 800d7de:	60fb      	str	r3, [r7, #12]
 800d7e0:	491d      	ldr	r1, [pc, #116]	@ (800d858 <vTaskSwitchContext+0xc0>)
 800d7e2:	68fa      	ldr	r2, [r7, #12]
 800d7e4:	4613      	mov	r3, r2
 800d7e6:	009b      	lsls	r3, r3, #2
 800d7e8:	4413      	add	r3, r2
 800d7ea:	009b      	lsls	r3, r3, #2
 800d7ec:	440b      	add	r3, r1
 800d7ee:	681b      	ldr	r3, [r3, #0]
 800d7f0:	2b00      	cmp	r3, #0
 800d7f2:	d0e3      	beq.n	800d7bc <vTaskSwitchContext+0x24>
 800d7f4:	68fa      	ldr	r2, [r7, #12]
 800d7f6:	4613      	mov	r3, r2
 800d7f8:	009b      	lsls	r3, r3, #2
 800d7fa:	4413      	add	r3, r2
 800d7fc:	009b      	lsls	r3, r3, #2
 800d7fe:	4a16      	ldr	r2, [pc, #88]	@ (800d858 <vTaskSwitchContext+0xc0>)
 800d800:	4413      	add	r3, r2
 800d802:	60bb      	str	r3, [r7, #8]
 800d804:	68bb      	ldr	r3, [r7, #8]
 800d806:	685b      	ldr	r3, [r3, #4]
 800d808:	685a      	ldr	r2, [r3, #4]
 800d80a:	68bb      	ldr	r3, [r7, #8]
 800d80c:	605a      	str	r2, [r3, #4]
 800d80e:	68bb      	ldr	r3, [r7, #8]
 800d810:	685a      	ldr	r2, [r3, #4]
 800d812:	68bb      	ldr	r3, [r7, #8]
 800d814:	3308      	adds	r3, #8
 800d816:	429a      	cmp	r2, r3
 800d818:	d104      	bne.n	800d824 <vTaskSwitchContext+0x8c>
 800d81a:	68bb      	ldr	r3, [r7, #8]
 800d81c:	685b      	ldr	r3, [r3, #4]
 800d81e:	685a      	ldr	r2, [r3, #4]
 800d820:	68bb      	ldr	r3, [r7, #8]
 800d822:	605a      	str	r2, [r3, #4]
 800d824:	68bb      	ldr	r3, [r7, #8]
 800d826:	685b      	ldr	r3, [r3, #4]
 800d828:	68db      	ldr	r3, [r3, #12]
 800d82a:	4a0c      	ldr	r2, [pc, #48]	@ (800d85c <vTaskSwitchContext+0xc4>)
 800d82c:	6013      	str	r3, [r2, #0]
 800d82e:	4a09      	ldr	r2, [pc, #36]	@ (800d854 <vTaskSwitchContext+0xbc>)
 800d830:	68fb      	ldr	r3, [r7, #12]
 800d832:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 800d834:	4b09      	ldr	r3, [pc, #36]	@ (800d85c <vTaskSwitchContext+0xc4>)
 800d836:	681b      	ldr	r3, [r3, #0]
 800d838:	3354      	adds	r3, #84	@ 0x54
 800d83a:	4a09      	ldr	r2, [pc, #36]	@ (800d860 <vTaskSwitchContext+0xc8>)
 800d83c:	6013      	str	r3, [r2, #0]
}
 800d83e:	bf00      	nop
 800d840:	3714      	adds	r7, #20
 800d842:	46bd      	mov	sp, r7
 800d844:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d848:	4770      	bx	lr
 800d84a:	bf00      	nop
 800d84c:	2400ab48 	.word	0x2400ab48
 800d850:	2400ab34 	.word	0x2400ab34
 800d854:	2400ab28 	.word	0x2400ab28
 800d858:	2400a650 	.word	0x2400a650
 800d85c:	2400a64c 	.word	0x2400a64c
 800d860:	240000d8 	.word	0x240000d8

0800d864 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 800d864:	b580      	push	{r7, lr}
 800d866:	b084      	sub	sp, #16
 800d868:	af00      	add	r7, sp, #0
 800d86a:	6078      	str	r0, [r7, #4]
 800d86c:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 800d86e:	687b      	ldr	r3, [r7, #4]
 800d870:	2b00      	cmp	r3, #0
 800d872:	d10b      	bne.n	800d88c <vTaskPlaceOnEventList+0x28>
	__asm volatile
 800d874:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d878:	f383 8811 	msr	BASEPRI, r3
 800d87c:	f3bf 8f6f 	isb	sy
 800d880:	f3bf 8f4f 	dsb	sy
 800d884:	60fb      	str	r3, [r7, #12]
}
 800d886:	bf00      	nop
 800d888:	bf00      	nop
 800d88a:	e7fd      	b.n	800d888 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800d88c:	4b07      	ldr	r3, [pc, #28]	@ (800d8ac <vTaskPlaceOnEventList+0x48>)
 800d88e:	681b      	ldr	r3, [r3, #0]
 800d890:	3318      	adds	r3, #24
 800d892:	4619      	mov	r1, r3
 800d894:	6878      	ldr	r0, [r7, #4]
 800d896:	f7fe f8c2 	bl	800ba1e <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800d89a:	2101      	movs	r1, #1
 800d89c:	6838      	ldr	r0, [r7, #0]
 800d89e:	f000 fb87 	bl	800dfb0 <prvAddCurrentTaskToDelayedList>
}
 800d8a2:	bf00      	nop
 800d8a4:	3710      	adds	r7, #16
 800d8a6:	46bd      	mov	sp, r7
 800d8a8:	bd80      	pop	{r7, pc}
 800d8aa:	bf00      	nop
 800d8ac:	2400a64c 	.word	0x2400a64c

0800d8b0 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800d8b0:	b580      	push	{r7, lr}
 800d8b2:	b086      	sub	sp, #24
 800d8b4:	af00      	add	r7, sp, #0
 800d8b6:	60f8      	str	r0, [r7, #12]
 800d8b8:	60b9      	str	r1, [r7, #8]
 800d8ba:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 800d8bc:	68fb      	ldr	r3, [r7, #12]
 800d8be:	2b00      	cmp	r3, #0
 800d8c0:	d10b      	bne.n	800d8da <vTaskPlaceOnEventListRestricted+0x2a>
	__asm volatile
 800d8c2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d8c6:	f383 8811 	msr	BASEPRI, r3
 800d8ca:	f3bf 8f6f 	isb	sy
 800d8ce:	f3bf 8f4f 	dsb	sy
 800d8d2:	617b      	str	r3, [r7, #20]
}
 800d8d4:	bf00      	nop
 800d8d6:	bf00      	nop
 800d8d8:	e7fd      	b.n	800d8d6 <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800d8da:	4b0a      	ldr	r3, [pc, #40]	@ (800d904 <vTaskPlaceOnEventListRestricted+0x54>)
 800d8dc:	681b      	ldr	r3, [r3, #0]
 800d8de:	3318      	adds	r3, #24
 800d8e0:	4619      	mov	r1, r3
 800d8e2:	68f8      	ldr	r0, [r7, #12]
 800d8e4:	f7fe f877 	bl	800b9d6 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 800d8e8:	687b      	ldr	r3, [r7, #4]
 800d8ea:	2b00      	cmp	r3, #0
 800d8ec:	d002      	beq.n	800d8f4 <vTaskPlaceOnEventListRestricted+0x44>
		{
			xTicksToWait = portMAX_DELAY;
 800d8ee:	f04f 33ff 	mov.w	r3, #4294967295
 800d8f2:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 800d8f4:	6879      	ldr	r1, [r7, #4]
 800d8f6:	68b8      	ldr	r0, [r7, #8]
 800d8f8:	f000 fb5a 	bl	800dfb0 <prvAddCurrentTaskToDelayedList>
	}
 800d8fc:	bf00      	nop
 800d8fe:	3718      	adds	r7, #24
 800d900:	46bd      	mov	sp, r7
 800d902:	bd80      	pop	{r7, pc}
 800d904:	2400a64c 	.word	0x2400a64c

0800d908 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 800d908:	b580      	push	{r7, lr}
 800d90a:	b086      	sub	sp, #24
 800d90c:	af00      	add	r7, sp, #0
 800d90e:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800d910:	687b      	ldr	r3, [r7, #4]
 800d912:	68db      	ldr	r3, [r3, #12]
 800d914:	68db      	ldr	r3, [r3, #12]
 800d916:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 800d918:	693b      	ldr	r3, [r7, #16]
 800d91a:	2b00      	cmp	r3, #0
 800d91c:	d10b      	bne.n	800d936 <xTaskRemoveFromEventList+0x2e>
	__asm volatile
 800d91e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d922:	f383 8811 	msr	BASEPRI, r3
 800d926:	f3bf 8f6f 	isb	sy
 800d92a:	f3bf 8f4f 	dsb	sy
 800d92e:	60fb      	str	r3, [r7, #12]
}
 800d930:	bf00      	nop
 800d932:	bf00      	nop
 800d934:	e7fd      	b.n	800d932 <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800d936:	693b      	ldr	r3, [r7, #16]
 800d938:	3318      	adds	r3, #24
 800d93a:	4618      	mov	r0, r3
 800d93c:	f7fe f8a8 	bl	800ba90 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800d940:	4b1d      	ldr	r3, [pc, #116]	@ (800d9b8 <xTaskRemoveFromEventList+0xb0>)
 800d942:	681b      	ldr	r3, [r3, #0]
 800d944:	2b00      	cmp	r3, #0
 800d946:	d11d      	bne.n	800d984 <xTaskRemoveFromEventList+0x7c>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800d948:	693b      	ldr	r3, [r7, #16]
 800d94a:	3304      	adds	r3, #4
 800d94c:	4618      	mov	r0, r3
 800d94e:	f7fe f89f 	bl	800ba90 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 800d952:	693b      	ldr	r3, [r7, #16]
 800d954:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800d956:	4b19      	ldr	r3, [pc, #100]	@ (800d9bc <xTaskRemoveFromEventList+0xb4>)
 800d958:	681b      	ldr	r3, [r3, #0]
 800d95a:	429a      	cmp	r2, r3
 800d95c:	d903      	bls.n	800d966 <xTaskRemoveFromEventList+0x5e>
 800d95e:	693b      	ldr	r3, [r7, #16]
 800d960:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800d962:	4a16      	ldr	r2, [pc, #88]	@ (800d9bc <xTaskRemoveFromEventList+0xb4>)
 800d964:	6013      	str	r3, [r2, #0]
 800d966:	693b      	ldr	r3, [r7, #16]
 800d968:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800d96a:	4613      	mov	r3, r2
 800d96c:	009b      	lsls	r3, r3, #2
 800d96e:	4413      	add	r3, r2
 800d970:	009b      	lsls	r3, r3, #2
 800d972:	4a13      	ldr	r2, [pc, #76]	@ (800d9c0 <xTaskRemoveFromEventList+0xb8>)
 800d974:	441a      	add	r2, r3
 800d976:	693b      	ldr	r3, [r7, #16]
 800d978:	3304      	adds	r3, #4
 800d97a:	4619      	mov	r1, r3
 800d97c:	4610      	mov	r0, r2
 800d97e:	f7fe f82a 	bl	800b9d6 <vListInsertEnd>
 800d982:	e005      	b.n	800d990 <xTaskRemoveFromEventList+0x88>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800d984:	693b      	ldr	r3, [r7, #16]
 800d986:	3318      	adds	r3, #24
 800d988:	4619      	mov	r1, r3
 800d98a:	480e      	ldr	r0, [pc, #56]	@ (800d9c4 <xTaskRemoveFromEventList+0xbc>)
 800d98c:	f7fe f823 	bl	800b9d6 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800d990:	693b      	ldr	r3, [r7, #16]
 800d992:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800d994:	4b0c      	ldr	r3, [pc, #48]	@ (800d9c8 <xTaskRemoveFromEventList+0xc0>)
 800d996:	681b      	ldr	r3, [r3, #0]
 800d998:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800d99a:	429a      	cmp	r2, r3
 800d99c:	d905      	bls.n	800d9aa <xTaskRemoveFromEventList+0xa2>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 800d99e:	2301      	movs	r3, #1
 800d9a0:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 800d9a2:	4b0a      	ldr	r3, [pc, #40]	@ (800d9cc <xTaskRemoveFromEventList+0xc4>)
 800d9a4:	2201      	movs	r2, #1
 800d9a6:	601a      	str	r2, [r3, #0]
 800d9a8:	e001      	b.n	800d9ae <xTaskRemoveFromEventList+0xa6>
	}
	else
	{
		xReturn = pdFALSE;
 800d9aa:	2300      	movs	r3, #0
 800d9ac:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 800d9ae:	697b      	ldr	r3, [r7, #20]
}
 800d9b0:	4618      	mov	r0, r3
 800d9b2:	3718      	adds	r7, #24
 800d9b4:	46bd      	mov	sp, r7
 800d9b6:	bd80      	pop	{r7, pc}
 800d9b8:	2400ab48 	.word	0x2400ab48
 800d9bc:	2400ab28 	.word	0x2400ab28
 800d9c0:	2400a650 	.word	0x2400a650
 800d9c4:	2400aae0 	.word	0x2400aae0
 800d9c8:	2400a64c 	.word	0x2400a64c
 800d9cc:	2400ab34 	.word	0x2400ab34

0800d9d0 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 800d9d0:	b480      	push	{r7}
 800d9d2:	b083      	sub	sp, #12
 800d9d4:	af00      	add	r7, sp, #0
 800d9d6:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 800d9d8:	4b06      	ldr	r3, [pc, #24]	@ (800d9f4 <vTaskInternalSetTimeOutState+0x24>)
 800d9da:	681a      	ldr	r2, [r3, #0]
 800d9dc:	687b      	ldr	r3, [r7, #4]
 800d9de:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 800d9e0:	4b05      	ldr	r3, [pc, #20]	@ (800d9f8 <vTaskInternalSetTimeOutState+0x28>)
 800d9e2:	681a      	ldr	r2, [r3, #0]
 800d9e4:	687b      	ldr	r3, [r7, #4]
 800d9e6:	605a      	str	r2, [r3, #4]
}
 800d9e8:	bf00      	nop
 800d9ea:	370c      	adds	r7, #12
 800d9ec:	46bd      	mov	sp, r7
 800d9ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d9f2:	4770      	bx	lr
 800d9f4:	2400ab38 	.word	0x2400ab38
 800d9f8:	2400ab24 	.word	0x2400ab24

0800d9fc <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 800d9fc:	b580      	push	{r7, lr}
 800d9fe:	b088      	sub	sp, #32
 800da00:	af00      	add	r7, sp, #0
 800da02:	6078      	str	r0, [r7, #4]
 800da04:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 800da06:	687b      	ldr	r3, [r7, #4]
 800da08:	2b00      	cmp	r3, #0
 800da0a:	d10b      	bne.n	800da24 <xTaskCheckForTimeOut+0x28>
	__asm volatile
 800da0c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800da10:	f383 8811 	msr	BASEPRI, r3
 800da14:	f3bf 8f6f 	isb	sy
 800da18:	f3bf 8f4f 	dsb	sy
 800da1c:	613b      	str	r3, [r7, #16]
}
 800da1e:	bf00      	nop
 800da20:	bf00      	nop
 800da22:	e7fd      	b.n	800da20 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 800da24:	683b      	ldr	r3, [r7, #0]
 800da26:	2b00      	cmp	r3, #0
 800da28:	d10b      	bne.n	800da42 <xTaskCheckForTimeOut+0x46>
	__asm volatile
 800da2a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800da2e:	f383 8811 	msr	BASEPRI, r3
 800da32:	f3bf 8f6f 	isb	sy
 800da36:	f3bf 8f4f 	dsb	sy
 800da3a:	60fb      	str	r3, [r7, #12]
}
 800da3c:	bf00      	nop
 800da3e:	bf00      	nop
 800da40:	e7fd      	b.n	800da3e <xTaskCheckForTimeOut+0x42>

	taskENTER_CRITICAL();
 800da42:	f7fe f981 	bl	800bd48 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 800da46:	4b1d      	ldr	r3, [pc, #116]	@ (800dabc <xTaskCheckForTimeOut+0xc0>)
 800da48:	681b      	ldr	r3, [r3, #0]
 800da4a:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 800da4c:	687b      	ldr	r3, [r7, #4]
 800da4e:	685b      	ldr	r3, [r3, #4]
 800da50:	69ba      	ldr	r2, [r7, #24]
 800da52:	1ad3      	subs	r3, r2, r3
 800da54:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 800da56:	683b      	ldr	r3, [r7, #0]
 800da58:	681b      	ldr	r3, [r3, #0]
 800da5a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800da5e:	d102      	bne.n	800da66 <xTaskCheckForTimeOut+0x6a>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 800da60:	2300      	movs	r3, #0
 800da62:	61fb      	str	r3, [r7, #28]
 800da64:	e023      	b.n	800daae <xTaskCheckForTimeOut+0xb2>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800da66:	687b      	ldr	r3, [r7, #4]
 800da68:	681a      	ldr	r2, [r3, #0]
 800da6a:	4b15      	ldr	r3, [pc, #84]	@ (800dac0 <xTaskCheckForTimeOut+0xc4>)
 800da6c:	681b      	ldr	r3, [r3, #0]
 800da6e:	429a      	cmp	r2, r3
 800da70:	d007      	beq.n	800da82 <xTaskCheckForTimeOut+0x86>
 800da72:	687b      	ldr	r3, [r7, #4]
 800da74:	685b      	ldr	r3, [r3, #4]
 800da76:	69ba      	ldr	r2, [r7, #24]
 800da78:	429a      	cmp	r2, r3
 800da7a:	d302      	bcc.n	800da82 <xTaskCheckForTimeOut+0x86>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 800da7c:	2301      	movs	r3, #1
 800da7e:	61fb      	str	r3, [r7, #28]
 800da80:	e015      	b.n	800daae <xTaskCheckForTimeOut+0xb2>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800da82:	683b      	ldr	r3, [r7, #0]
 800da84:	681b      	ldr	r3, [r3, #0]
 800da86:	697a      	ldr	r2, [r7, #20]
 800da88:	429a      	cmp	r2, r3
 800da8a:	d20b      	bcs.n	800daa4 <xTaskCheckForTimeOut+0xa8>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 800da8c:	683b      	ldr	r3, [r7, #0]
 800da8e:	681a      	ldr	r2, [r3, #0]
 800da90:	697b      	ldr	r3, [r7, #20]
 800da92:	1ad2      	subs	r2, r2, r3
 800da94:	683b      	ldr	r3, [r7, #0]
 800da96:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 800da98:	6878      	ldr	r0, [r7, #4]
 800da9a:	f7ff ff99 	bl	800d9d0 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 800da9e:	2300      	movs	r3, #0
 800daa0:	61fb      	str	r3, [r7, #28]
 800daa2:	e004      	b.n	800daae <xTaskCheckForTimeOut+0xb2>
		}
		else
		{
			*pxTicksToWait = 0;
 800daa4:	683b      	ldr	r3, [r7, #0]
 800daa6:	2200      	movs	r2, #0
 800daa8:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 800daaa:	2301      	movs	r3, #1
 800daac:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 800daae:	f7fe f97d 	bl	800bdac <vPortExitCritical>

	return xReturn;
 800dab2:	69fb      	ldr	r3, [r7, #28]
}
 800dab4:	4618      	mov	r0, r3
 800dab6:	3720      	adds	r7, #32
 800dab8:	46bd      	mov	sp, r7
 800daba:	bd80      	pop	{r7, pc}
 800dabc:	2400ab24 	.word	0x2400ab24
 800dac0:	2400ab38 	.word	0x2400ab38

0800dac4 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 800dac4:	b480      	push	{r7}
 800dac6:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 800dac8:	4b03      	ldr	r3, [pc, #12]	@ (800dad8 <vTaskMissedYield+0x14>)
 800daca:	2201      	movs	r2, #1
 800dacc:	601a      	str	r2, [r3, #0]
}
 800dace:	bf00      	nop
 800dad0:	46bd      	mov	sp, r7
 800dad2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dad6:	4770      	bx	lr
 800dad8:	2400ab34 	.word	0x2400ab34

0800dadc <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 800dadc:	b580      	push	{r7, lr}
 800dade:	b082      	sub	sp, #8
 800dae0:	af00      	add	r7, sp, #0
 800dae2:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 800dae4:	f000 f852 	bl	800db8c <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800dae8:	4b06      	ldr	r3, [pc, #24]	@ (800db04 <prvIdleTask+0x28>)
 800daea:	681b      	ldr	r3, [r3, #0]
 800daec:	2b01      	cmp	r3, #1
 800daee:	d9f9      	bls.n	800dae4 <prvIdleTask+0x8>
			{
				taskYIELD();
 800daf0:	4b05      	ldr	r3, [pc, #20]	@ (800db08 <prvIdleTask+0x2c>)
 800daf2:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800daf6:	601a      	str	r2, [r3, #0]
 800daf8:	f3bf 8f4f 	dsb	sy
 800dafc:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 800db00:	e7f0      	b.n	800dae4 <prvIdleTask+0x8>
 800db02:	bf00      	nop
 800db04:	2400a650 	.word	0x2400a650
 800db08:	e000ed04 	.word	0xe000ed04

0800db0c <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 800db0c:	b580      	push	{r7, lr}
 800db0e:	b082      	sub	sp, #8
 800db10:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800db12:	2300      	movs	r3, #0
 800db14:	607b      	str	r3, [r7, #4]
 800db16:	e00c      	b.n	800db32 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800db18:	687a      	ldr	r2, [r7, #4]
 800db1a:	4613      	mov	r3, r2
 800db1c:	009b      	lsls	r3, r3, #2
 800db1e:	4413      	add	r3, r2
 800db20:	009b      	lsls	r3, r3, #2
 800db22:	4a12      	ldr	r2, [pc, #72]	@ (800db6c <prvInitialiseTaskLists+0x60>)
 800db24:	4413      	add	r3, r2
 800db26:	4618      	mov	r0, r3
 800db28:	f7fd ff28 	bl	800b97c <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800db2c:	687b      	ldr	r3, [r7, #4]
 800db2e:	3301      	adds	r3, #1
 800db30:	607b      	str	r3, [r7, #4]
 800db32:	687b      	ldr	r3, [r7, #4]
 800db34:	2b37      	cmp	r3, #55	@ 0x37
 800db36:	d9ef      	bls.n	800db18 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 800db38:	480d      	ldr	r0, [pc, #52]	@ (800db70 <prvInitialiseTaskLists+0x64>)
 800db3a:	f7fd ff1f 	bl	800b97c <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800db3e:	480d      	ldr	r0, [pc, #52]	@ (800db74 <prvInitialiseTaskLists+0x68>)
 800db40:	f7fd ff1c 	bl	800b97c <vListInitialise>
	vListInitialise( &xPendingReadyList );
 800db44:	480c      	ldr	r0, [pc, #48]	@ (800db78 <prvInitialiseTaskLists+0x6c>)
 800db46:	f7fd ff19 	bl	800b97c <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800db4a:	480c      	ldr	r0, [pc, #48]	@ (800db7c <prvInitialiseTaskLists+0x70>)
 800db4c:	f7fd ff16 	bl	800b97c <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 800db50:	480b      	ldr	r0, [pc, #44]	@ (800db80 <prvInitialiseTaskLists+0x74>)
 800db52:	f7fd ff13 	bl	800b97c <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800db56:	4b0b      	ldr	r3, [pc, #44]	@ (800db84 <prvInitialiseTaskLists+0x78>)
 800db58:	4a05      	ldr	r2, [pc, #20]	@ (800db70 <prvInitialiseTaskLists+0x64>)
 800db5a:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800db5c:	4b0a      	ldr	r3, [pc, #40]	@ (800db88 <prvInitialiseTaskLists+0x7c>)
 800db5e:	4a05      	ldr	r2, [pc, #20]	@ (800db74 <prvInitialiseTaskLists+0x68>)
 800db60:	601a      	str	r2, [r3, #0]
}
 800db62:	bf00      	nop
 800db64:	3708      	adds	r7, #8
 800db66:	46bd      	mov	sp, r7
 800db68:	bd80      	pop	{r7, pc}
 800db6a:	bf00      	nop
 800db6c:	2400a650 	.word	0x2400a650
 800db70:	2400aab0 	.word	0x2400aab0
 800db74:	2400aac4 	.word	0x2400aac4
 800db78:	2400aae0 	.word	0x2400aae0
 800db7c:	2400aaf4 	.word	0x2400aaf4
 800db80:	2400ab0c 	.word	0x2400ab0c
 800db84:	2400aad8 	.word	0x2400aad8
 800db88:	2400aadc 	.word	0x2400aadc

0800db8c <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 800db8c:	b580      	push	{r7, lr}
 800db8e:	b082      	sub	sp, #8
 800db90:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800db92:	e019      	b.n	800dbc8 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 800db94:	f7fe f8d8 	bl	800bd48 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800db98:	4b10      	ldr	r3, [pc, #64]	@ (800dbdc <prvCheckTasksWaitingTermination+0x50>)
 800db9a:	68db      	ldr	r3, [r3, #12]
 800db9c:	68db      	ldr	r3, [r3, #12]
 800db9e:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800dba0:	687b      	ldr	r3, [r7, #4]
 800dba2:	3304      	adds	r3, #4
 800dba4:	4618      	mov	r0, r3
 800dba6:	f7fd ff73 	bl	800ba90 <uxListRemove>
				--uxCurrentNumberOfTasks;
 800dbaa:	4b0d      	ldr	r3, [pc, #52]	@ (800dbe0 <prvCheckTasksWaitingTermination+0x54>)
 800dbac:	681b      	ldr	r3, [r3, #0]
 800dbae:	3b01      	subs	r3, #1
 800dbb0:	4a0b      	ldr	r2, [pc, #44]	@ (800dbe0 <prvCheckTasksWaitingTermination+0x54>)
 800dbb2:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 800dbb4:	4b0b      	ldr	r3, [pc, #44]	@ (800dbe4 <prvCheckTasksWaitingTermination+0x58>)
 800dbb6:	681b      	ldr	r3, [r3, #0]
 800dbb8:	3b01      	subs	r3, #1
 800dbba:	4a0a      	ldr	r2, [pc, #40]	@ (800dbe4 <prvCheckTasksWaitingTermination+0x58>)
 800dbbc:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800dbbe:	f7fe f8f5 	bl	800bdac <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800dbc2:	6878      	ldr	r0, [r7, #4]
 800dbc4:	f000 f810 	bl	800dbe8 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800dbc8:	4b06      	ldr	r3, [pc, #24]	@ (800dbe4 <prvCheckTasksWaitingTermination+0x58>)
 800dbca:	681b      	ldr	r3, [r3, #0]
 800dbcc:	2b00      	cmp	r3, #0
 800dbce:	d1e1      	bne.n	800db94 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 800dbd0:	bf00      	nop
 800dbd2:	bf00      	nop
 800dbd4:	3708      	adds	r7, #8
 800dbd6:	46bd      	mov	sp, r7
 800dbd8:	bd80      	pop	{r7, pc}
 800dbda:	bf00      	nop
 800dbdc:	2400aaf4 	.word	0x2400aaf4
 800dbe0:	2400ab20 	.word	0x2400ab20
 800dbe4:	2400ab08 	.word	0x2400ab08

0800dbe8 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 800dbe8:	b580      	push	{r7, lr}
 800dbea:	b084      	sub	sp, #16
 800dbec:	af00      	add	r7, sp, #0
 800dbee:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 800dbf0:	687b      	ldr	r3, [r7, #4]
 800dbf2:	3354      	adds	r3, #84	@ 0x54
 800dbf4:	4618      	mov	r0, r3
 800dbf6:	f01d fa75 	bl	802b0e4 <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800dbfa:	687b      	ldr	r3, [r7, #4]
 800dbfc:	f893 30a5 	ldrb.w	r3, [r3, #165]	@ 0xa5
 800dc00:	2b00      	cmp	r3, #0
 800dc02:	d108      	bne.n	800dc16 <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 800dc04:	687b      	ldr	r3, [r7, #4]
 800dc06:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800dc08:	4618      	mov	r0, r3
 800dc0a:	f7fd fd97 	bl	800b73c <vPortFree>
				vPortFree( pxTCB );
 800dc0e:	6878      	ldr	r0, [r7, #4]
 800dc10:	f7fd fd94 	bl	800b73c <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 800dc14:	e019      	b.n	800dc4a <prvDeleteTCB+0x62>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 800dc16:	687b      	ldr	r3, [r7, #4]
 800dc18:	f893 30a5 	ldrb.w	r3, [r3, #165]	@ 0xa5
 800dc1c:	2b01      	cmp	r3, #1
 800dc1e:	d103      	bne.n	800dc28 <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 800dc20:	6878      	ldr	r0, [r7, #4]
 800dc22:	f7fd fd8b 	bl	800b73c <vPortFree>
	}
 800dc26:	e010      	b.n	800dc4a <prvDeleteTCB+0x62>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 800dc28:	687b      	ldr	r3, [r7, #4]
 800dc2a:	f893 30a5 	ldrb.w	r3, [r3, #165]	@ 0xa5
 800dc2e:	2b02      	cmp	r3, #2
 800dc30:	d00b      	beq.n	800dc4a <prvDeleteTCB+0x62>
	__asm volatile
 800dc32:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800dc36:	f383 8811 	msr	BASEPRI, r3
 800dc3a:	f3bf 8f6f 	isb	sy
 800dc3e:	f3bf 8f4f 	dsb	sy
 800dc42:	60fb      	str	r3, [r7, #12]
}
 800dc44:	bf00      	nop
 800dc46:	bf00      	nop
 800dc48:	e7fd      	b.n	800dc46 <prvDeleteTCB+0x5e>
	}
 800dc4a:	bf00      	nop
 800dc4c:	3710      	adds	r7, #16
 800dc4e:	46bd      	mov	sp, r7
 800dc50:	bd80      	pop	{r7, pc}
	...

0800dc54 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 800dc54:	b480      	push	{r7}
 800dc56:	b083      	sub	sp, #12
 800dc58:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800dc5a:	4b0c      	ldr	r3, [pc, #48]	@ (800dc8c <prvResetNextTaskUnblockTime+0x38>)
 800dc5c:	681b      	ldr	r3, [r3, #0]
 800dc5e:	681b      	ldr	r3, [r3, #0]
 800dc60:	2b00      	cmp	r3, #0
 800dc62:	d104      	bne.n	800dc6e <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800dc64:	4b0a      	ldr	r3, [pc, #40]	@ (800dc90 <prvResetNextTaskUnblockTime+0x3c>)
 800dc66:	f04f 32ff 	mov.w	r2, #4294967295
 800dc6a:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 800dc6c:	e008      	b.n	800dc80 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800dc6e:	4b07      	ldr	r3, [pc, #28]	@ (800dc8c <prvResetNextTaskUnblockTime+0x38>)
 800dc70:	681b      	ldr	r3, [r3, #0]
 800dc72:	68db      	ldr	r3, [r3, #12]
 800dc74:	68db      	ldr	r3, [r3, #12]
 800dc76:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800dc78:	687b      	ldr	r3, [r7, #4]
 800dc7a:	685b      	ldr	r3, [r3, #4]
 800dc7c:	4a04      	ldr	r2, [pc, #16]	@ (800dc90 <prvResetNextTaskUnblockTime+0x3c>)
 800dc7e:	6013      	str	r3, [r2, #0]
}
 800dc80:	bf00      	nop
 800dc82:	370c      	adds	r7, #12
 800dc84:	46bd      	mov	sp, r7
 800dc86:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dc8a:	4770      	bx	lr
 800dc8c:	2400aad8 	.word	0x2400aad8
 800dc90:	2400ab40 	.word	0x2400ab40

0800dc94 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 800dc94:	b480      	push	{r7}
 800dc96:	b083      	sub	sp, #12
 800dc98:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800dc9a:	4b0b      	ldr	r3, [pc, #44]	@ (800dcc8 <xTaskGetSchedulerState+0x34>)
 800dc9c:	681b      	ldr	r3, [r3, #0]
 800dc9e:	2b00      	cmp	r3, #0
 800dca0:	d102      	bne.n	800dca8 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800dca2:	2301      	movs	r3, #1
 800dca4:	607b      	str	r3, [r7, #4]
 800dca6:	e008      	b.n	800dcba <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800dca8:	4b08      	ldr	r3, [pc, #32]	@ (800dccc <xTaskGetSchedulerState+0x38>)
 800dcaa:	681b      	ldr	r3, [r3, #0]
 800dcac:	2b00      	cmp	r3, #0
 800dcae:	d102      	bne.n	800dcb6 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 800dcb0:	2302      	movs	r3, #2
 800dcb2:	607b      	str	r3, [r7, #4]
 800dcb4:	e001      	b.n	800dcba <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800dcb6:	2300      	movs	r3, #0
 800dcb8:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800dcba:	687b      	ldr	r3, [r7, #4]
	}
 800dcbc:	4618      	mov	r0, r3
 800dcbe:	370c      	adds	r7, #12
 800dcc0:	46bd      	mov	sp, r7
 800dcc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dcc6:	4770      	bx	lr
 800dcc8:	2400ab2c 	.word	0x2400ab2c
 800dccc:	2400ab48 	.word	0x2400ab48

0800dcd0 <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 800dcd0:	b580      	push	{r7, lr}
 800dcd2:	b084      	sub	sp, #16
 800dcd4:	af00      	add	r7, sp, #0
 800dcd6:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 800dcd8:	687b      	ldr	r3, [r7, #4]
 800dcda:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 800dcdc:	2300      	movs	r3, #0
 800dcde:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 800dce0:	687b      	ldr	r3, [r7, #4]
 800dce2:	2b00      	cmp	r3, #0
 800dce4:	d051      	beq.n	800dd8a <xTaskPriorityInherit+0xba>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 800dce6:	68bb      	ldr	r3, [r7, #8]
 800dce8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800dcea:	4b2a      	ldr	r3, [pc, #168]	@ (800dd94 <xTaskPriorityInherit+0xc4>)
 800dcec:	681b      	ldr	r3, [r3, #0]
 800dcee:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800dcf0:	429a      	cmp	r2, r3
 800dcf2:	d241      	bcs.n	800dd78 <xTaskPriorityInherit+0xa8>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 800dcf4:	68bb      	ldr	r3, [r7, #8]
 800dcf6:	699b      	ldr	r3, [r3, #24]
 800dcf8:	2b00      	cmp	r3, #0
 800dcfa:	db06      	blt.n	800dd0a <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800dcfc:	4b25      	ldr	r3, [pc, #148]	@ (800dd94 <xTaskPriorityInherit+0xc4>)
 800dcfe:	681b      	ldr	r3, [r3, #0]
 800dd00:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800dd02:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 800dd06:	68bb      	ldr	r3, [r7, #8]
 800dd08:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 800dd0a:	68bb      	ldr	r3, [r7, #8]
 800dd0c:	6959      	ldr	r1, [r3, #20]
 800dd0e:	68bb      	ldr	r3, [r7, #8]
 800dd10:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800dd12:	4613      	mov	r3, r2
 800dd14:	009b      	lsls	r3, r3, #2
 800dd16:	4413      	add	r3, r2
 800dd18:	009b      	lsls	r3, r3, #2
 800dd1a:	4a1f      	ldr	r2, [pc, #124]	@ (800dd98 <xTaskPriorityInherit+0xc8>)
 800dd1c:	4413      	add	r3, r2
 800dd1e:	4299      	cmp	r1, r3
 800dd20:	d122      	bne.n	800dd68 <xTaskPriorityInherit+0x98>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800dd22:	68bb      	ldr	r3, [r7, #8]
 800dd24:	3304      	adds	r3, #4
 800dd26:	4618      	mov	r0, r3
 800dd28:	f7fd feb2 	bl	800ba90 <uxListRemove>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 800dd2c:	4b19      	ldr	r3, [pc, #100]	@ (800dd94 <xTaskPriorityInherit+0xc4>)
 800dd2e:	681b      	ldr	r3, [r3, #0]
 800dd30:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800dd32:	68bb      	ldr	r3, [r7, #8]
 800dd34:	62da      	str	r2, [r3, #44]	@ 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 800dd36:	68bb      	ldr	r3, [r7, #8]
 800dd38:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800dd3a:	4b18      	ldr	r3, [pc, #96]	@ (800dd9c <xTaskPriorityInherit+0xcc>)
 800dd3c:	681b      	ldr	r3, [r3, #0]
 800dd3e:	429a      	cmp	r2, r3
 800dd40:	d903      	bls.n	800dd4a <xTaskPriorityInherit+0x7a>
 800dd42:	68bb      	ldr	r3, [r7, #8]
 800dd44:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800dd46:	4a15      	ldr	r2, [pc, #84]	@ (800dd9c <xTaskPriorityInherit+0xcc>)
 800dd48:	6013      	str	r3, [r2, #0]
 800dd4a:	68bb      	ldr	r3, [r7, #8]
 800dd4c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800dd4e:	4613      	mov	r3, r2
 800dd50:	009b      	lsls	r3, r3, #2
 800dd52:	4413      	add	r3, r2
 800dd54:	009b      	lsls	r3, r3, #2
 800dd56:	4a10      	ldr	r2, [pc, #64]	@ (800dd98 <xTaskPriorityInherit+0xc8>)
 800dd58:	441a      	add	r2, r3
 800dd5a:	68bb      	ldr	r3, [r7, #8]
 800dd5c:	3304      	adds	r3, #4
 800dd5e:	4619      	mov	r1, r3
 800dd60:	4610      	mov	r0, r2
 800dd62:	f7fd fe38 	bl	800b9d6 <vListInsertEnd>
 800dd66:	e004      	b.n	800dd72 <xTaskPriorityInherit+0xa2>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 800dd68:	4b0a      	ldr	r3, [pc, #40]	@ (800dd94 <xTaskPriorityInherit+0xc4>)
 800dd6a:	681b      	ldr	r3, [r3, #0]
 800dd6c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800dd6e:	68bb      	ldr	r3, [r7, #8]
 800dd70:	62da      	str	r2, [r3, #44]	@ 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 800dd72:	2301      	movs	r3, #1
 800dd74:	60fb      	str	r3, [r7, #12]
 800dd76:	e008      	b.n	800dd8a <xTaskPriorityInherit+0xba>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 800dd78:	68bb      	ldr	r3, [r7, #8]
 800dd7a:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800dd7c:	4b05      	ldr	r3, [pc, #20]	@ (800dd94 <xTaskPriorityInherit+0xc4>)
 800dd7e:	681b      	ldr	r3, [r3, #0]
 800dd80:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800dd82:	429a      	cmp	r2, r3
 800dd84:	d201      	bcs.n	800dd8a <xTaskPriorityInherit+0xba>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 800dd86:	2301      	movs	r3, #1
 800dd88:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800dd8a:	68fb      	ldr	r3, [r7, #12]
	}
 800dd8c:	4618      	mov	r0, r3
 800dd8e:	3710      	adds	r7, #16
 800dd90:	46bd      	mov	sp, r7
 800dd92:	bd80      	pop	{r7, pc}
 800dd94:	2400a64c 	.word	0x2400a64c
 800dd98:	2400a650 	.word	0x2400a650
 800dd9c:	2400ab28 	.word	0x2400ab28

0800dda0 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 800dda0:	b580      	push	{r7, lr}
 800dda2:	b086      	sub	sp, #24
 800dda4:	af00      	add	r7, sp, #0
 800dda6:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 800dda8:	687b      	ldr	r3, [r7, #4]
 800ddaa:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 800ddac:	2300      	movs	r3, #0
 800ddae:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800ddb0:	687b      	ldr	r3, [r7, #4]
 800ddb2:	2b00      	cmp	r3, #0
 800ddb4:	d058      	beq.n	800de68 <xTaskPriorityDisinherit+0xc8>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 800ddb6:	4b2f      	ldr	r3, [pc, #188]	@ (800de74 <xTaskPriorityDisinherit+0xd4>)
 800ddb8:	681b      	ldr	r3, [r3, #0]
 800ddba:	693a      	ldr	r2, [r7, #16]
 800ddbc:	429a      	cmp	r2, r3
 800ddbe:	d00b      	beq.n	800ddd8 <xTaskPriorityDisinherit+0x38>
	__asm volatile
 800ddc0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ddc4:	f383 8811 	msr	BASEPRI, r3
 800ddc8:	f3bf 8f6f 	isb	sy
 800ddcc:	f3bf 8f4f 	dsb	sy
 800ddd0:	60fb      	str	r3, [r7, #12]
}
 800ddd2:	bf00      	nop
 800ddd4:	bf00      	nop
 800ddd6:	e7fd      	b.n	800ddd4 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 800ddd8:	693b      	ldr	r3, [r7, #16]
 800ddda:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800dddc:	2b00      	cmp	r3, #0
 800ddde:	d10b      	bne.n	800ddf8 <xTaskPriorityDisinherit+0x58>
	__asm volatile
 800dde0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800dde4:	f383 8811 	msr	BASEPRI, r3
 800dde8:	f3bf 8f6f 	isb	sy
 800ddec:	f3bf 8f4f 	dsb	sy
 800ddf0:	60bb      	str	r3, [r7, #8]
}
 800ddf2:	bf00      	nop
 800ddf4:	bf00      	nop
 800ddf6:	e7fd      	b.n	800ddf4 <xTaskPriorityDisinherit+0x54>
			( pxTCB->uxMutexesHeld )--;
 800ddf8:	693b      	ldr	r3, [r7, #16]
 800ddfa:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800ddfc:	1e5a      	subs	r2, r3, #1
 800ddfe:	693b      	ldr	r3, [r7, #16]
 800de00:	651a      	str	r2, [r3, #80]	@ 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800de02:	693b      	ldr	r3, [r7, #16]
 800de04:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800de06:	693b      	ldr	r3, [r7, #16]
 800de08:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800de0a:	429a      	cmp	r2, r3
 800de0c:	d02c      	beq.n	800de68 <xTaskPriorityDisinherit+0xc8>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800de0e:	693b      	ldr	r3, [r7, #16]
 800de10:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800de12:	2b00      	cmp	r3, #0
 800de14:	d128      	bne.n	800de68 <xTaskPriorityDisinherit+0xc8>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800de16:	693b      	ldr	r3, [r7, #16]
 800de18:	3304      	adds	r3, #4
 800de1a:	4618      	mov	r0, r3
 800de1c:	f7fd fe38 	bl	800ba90 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 800de20:	693b      	ldr	r3, [r7, #16]
 800de22:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800de24:	693b      	ldr	r3, [r7, #16]
 800de26:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800de28:	693b      	ldr	r3, [r7, #16]
 800de2a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800de2c:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 800de30:	693b      	ldr	r3, [r7, #16]
 800de32:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 800de34:	693b      	ldr	r3, [r7, #16]
 800de36:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800de38:	4b0f      	ldr	r3, [pc, #60]	@ (800de78 <xTaskPriorityDisinherit+0xd8>)
 800de3a:	681b      	ldr	r3, [r3, #0]
 800de3c:	429a      	cmp	r2, r3
 800de3e:	d903      	bls.n	800de48 <xTaskPriorityDisinherit+0xa8>
 800de40:	693b      	ldr	r3, [r7, #16]
 800de42:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800de44:	4a0c      	ldr	r2, [pc, #48]	@ (800de78 <xTaskPriorityDisinherit+0xd8>)
 800de46:	6013      	str	r3, [r2, #0]
 800de48:	693b      	ldr	r3, [r7, #16]
 800de4a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800de4c:	4613      	mov	r3, r2
 800de4e:	009b      	lsls	r3, r3, #2
 800de50:	4413      	add	r3, r2
 800de52:	009b      	lsls	r3, r3, #2
 800de54:	4a09      	ldr	r2, [pc, #36]	@ (800de7c <xTaskPriorityDisinherit+0xdc>)
 800de56:	441a      	add	r2, r3
 800de58:	693b      	ldr	r3, [r7, #16]
 800de5a:	3304      	adds	r3, #4
 800de5c:	4619      	mov	r1, r3
 800de5e:	4610      	mov	r0, r2
 800de60:	f7fd fdb9 	bl	800b9d6 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 800de64:	2301      	movs	r3, #1
 800de66:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800de68:	697b      	ldr	r3, [r7, #20]
	}
 800de6a:	4618      	mov	r0, r3
 800de6c:	3718      	adds	r7, #24
 800de6e:	46bd      	mov	sp, r7
 800de70:	bd80      	pop	{r7, pc}
 800de72:	bf00      	nop
 800de74:	2400a64c 	.word	0x2400a64c
 800de78:	2400ab28 	.word	0x2400ab28
 800de7c:	2400a650 	.word	0x2400a650

0800de80 <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 800de80:	b580      	push	{r7, lr}
 800de82:	b088      	sub	sp, #32
 800de84:	af00      	add	r7, sp, #0
 800de86:	6078      	str	r0, [r7, #4]
 800de88:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = pxMutexHolder;
 800de8a:	687b      	ldr	r3, [r7, #4]
 800de8c:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 800de8e:	2301      	movs	r3, #1
 800de90:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800de92:	687b      	ldr	r3, [r7, #4]
 800de94:	2b00      	cmp	r3, #0
 800de96:	d06c      	beq.n	800df72 <vTaskPriorityDisinheritAfterTimeout+0xf2>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 800de98:	69bb      	ldr	r3, [r7, #24]
 800de9a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800de9c:	2b00      	cmp	r3, #0
 800de9e:	d10b      	bne.n	800deb8 <vTaskPriorityDisinheritAfterTimeout+0x38>
	__asm volatile
 800dea0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800dea4:	f383 8811 	msr	BASEPRI, r3
 800dea8:	f3bf 8f6f 	isb	sy
 800deac:	f3bf 8f4f 	dsb	sy
 800deb0:	60fb      	str	r3, [r7, #12]
}
 800deb2:	bf00      	nop
 800deb4:	bf00      	nop
 800deb6:	e7fd      	b.n	800deb4 <vTaskPriorityDisinheritAfterTimeout+0x34>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 800deb8:	69bb      	ldr	r3, [r7, #24]
 800deba:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800debc:	683a      	ldr	r2, [r7, #0]
 800debe:	429a      	cmp	r2, r3
 800dec0:	d902      	bls.n	800dec8 <vTaskPriorityDisinheritAfterTimeout+0x48>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 800dec2:	683b      	ldr	r3, [r7, #0]
 800dec4:	61fb      	str	r3, [r7, #28]
 800dec6:	e002      	b.n	800dece <vTaskPriorityDisinheritAfterTimeout+0x4e>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 800dec8:	69bb      	ldr	r3, [r7, #24]
 800deca:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800decc:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 800dece:	69bb      	ldr	r3, [r7, #24]
 800ded0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800ded2:	69fa      	ldr	r2, [r7, #28]
 800ded4:	429a      	cmp	r2, r3
 800ded6:	d04c      	beq.n	800df72 <vTaskPriorityDisinheritAfterTimeout+0xf2>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 800ded8:	69bb      	ldr	r3, [r7, #24]
 800deda:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800dedc:	697a      	ldr	r2, [r7, #20]
 800dede:	429a      	cmp	r2, r3
 800dee0:	d147      	bne.n	800df72 <vTaskPriorityDisinheritAfterTimeout+0xf2>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 800dee2:	4b26      	ldr	r3, [pc, #152]	@ (800df7c <vTaskPriorityDisinheritAfterTimeout+0xfc>)
 800dee4:	681b      	ldr	r3, [r3, #0]
 800dee6:	69ba      	ldr	r2, [r7, #24]
 800dee8:	429a      	cmp	r2, r3
 800deea:	d10b      	bne.n	800df04 <vTaskPriorityDisinheritAfterTimeout+0x84>
	__asm volatile
 800deec:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800def0:	f383 8811 	msr	BASEPRI, r3
 800def4:	f3bf 8f6f 	isb	sy
 800def8:	f3bf 8f4f 	dsb	sy
 800defc:	60bb      	str	r3, [r7, #8]
}
 800defe:	bf00      	nop
 800df00:	bf00      	nop
 800df02:	e7fd      	b.n	800df00 <vTaskPriorityDisinheritAfterTimeout+0x80>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 800df04:	69bb      	ldr	r3, [r7, #24]
 800df06:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800df08:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 800df0a:	69bb      	ldr	r3, [r7, #24]
 800df0c:	69fa      	ldr	r2, [r7, #28]
 800df0e:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 800df10:	69bb      	ldr	r3, [r7, #24]
 800df12:	699b      	ldr	r3, [r3, #24]
 800df14:	2b00      	cmp	r3, #0
 800df16:	db04      	blt.n	800df22 <vTaskPriorityDisinheritAfterTimeout+0xa2>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800df18:	69fb      	ldr	r3, [r7, #28]
 800df1a:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 800df1e:	69bb      	ldr	r3, [r7, #24]
 800df20:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 800df22:	69bb      	ldr	r3, [r7, #24]
 800df24:	6959      	ldr	r1, [r3, #20]
 800df26:	693a      	ldr	r2, [r7, #16]
 800df28:	4613      	mov	r3, r2
 800df2a:	009b      	lsls	r3, r3, #2
 800df2c:	4413      	add	r3, r2
 800df2e:	009b      	lsls	r3, r3, #2
 800df30:	4a13      	ldr	r2, [pc, #76]	@ (800df80 <vTaskPriorityDisinheritAfterTimeout+0x100>)
 800df32:	4413      	add	r3, r2
 800df34:	4299      	cmp	r1, r3
 800df36:	d11c      	bne.n	800df72 <vTaskPriorityDisinheritAfterTimeout+0xf2>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800df38:	69bb      	ldr	r3, [r7, #24]
 800df3a:	3304      	adds	r3, #4
 800df3c:	4618      	mov	r0, r3
 800df3e:	f7fd fda7 	bl	800ba90 <uxListRemove>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 800df42:	69bb      	ldr	r3, [r7, #24]
 800df44:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800df46:	4b0f      	ldr	r3, [pc, #60]	@ (800df84 <vTaskPriorityDisinheritAfterTimeout+0x104>)
 800df48:	681b      	ldr	r3, [r3, #0]
 800df4a:	429a      	cmp	r2, r3
 800df4c:	d903      	bls.n	800df56 <vTaskPriorityDisinheritAfterTimeout+0xd6>
 800df4e:	69bb      	ldr	r3, [r7, #24]
 800df50:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800df52:	4a0c      	ldr	r2, [pc, #48]	@ (800df84 <vTaskPriorityDisinheritAfterTimeout+0x104>)
 800df54:	6013      	str	r3, [r2, #0]
 800df56:	69bb      	ldr	r3, [r7, #24]
 800df58:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800df5a:	4613      	mov	r3, r2
 800df5c:	009b      	lsls	r3, r3, #2
 800df5e:	4413      	add	r3, r2
 800df60:	009b      	lsls	r3, r3, #2
 800df62:	4a07      	ldr	r2, [pc, #28]	@ (800df80 <vTaskPriorityDisinheritAfterTimeout+0x100>)
 800df64:	441a      	add	r2, r3
 800df66:	69bb      	ldr	r3, [r7, #24]
 800df68:	3304      	adds	r3, #4
 800df6a:	4619      	mov	r1, r3
 800df6c:	4610      	mov	r0, r2
 800df6e:	f7fd fd32 	bl	800b9d6 <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800df72:	bf00      	nop
 800df74:	3720      	adds	r7, #32
 800df76:	46bd      	mov	sp, r7
 800df78:	bd80      	pop	{r7, pc}
 800df7a:	bf00      	nop
 800df7c:	2400a64c 	.word	0x2400a64c
 800df80:	2400a650 	.word	0x2400a650
 800df84:	2400ab28 	.word	0x2400ab28

0800df88 <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	TaskHandle_t pvTaskIncrementMutexHeldCount( void )
	{
 800df88:	b480      	push	{r7}
 800df8a:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 800df8c:	4b07      	ldr	r3, [pc, #28]	@ (800dfac <pvTaskIncrementMutexHeldCount+0x24>)
 800df8e:	681b      	ldr	r3, [r3, #0]
 800df90:	2b00      	cmp	r3, #0
 800df92:	d004      	beq.n	800df9e <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 800df94:	4b05      	ldr	r3, [pc, #20]	@ (800dfac <pvTaskIncrementMutexHeldCount+0x24>)
 800df96:	681b      	ldr	r3, [r3, #0]
 800df98:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800df9a:	3201      	adds	r2, #1
 800df9c:	651a      	str	r2, [r3, #80]	@ 0x50
		}

		return pxCurrentTCB;
 800df9e:	4b03      	ldr	r3, [pc, #12]	@ (800dfac <pvTaskIncrementMutexHeldCount+0x24>)
 800dfa0:	681b      	ldr	r3, [r3, #0]
	}
 800dfa2:	4618      	mov	r0, r3
 800dfa4:	46bd      	mov	sp, r7
 800dfa6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dfaa:	4770      	bx	lr
 800dfac:	2400a64c 	.word	0x2400a64c

0800dfb0 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 800dfb0:	b580      	push	{r7, lr}
 800dfb2:	b084      	sub	sp, #16
 800dfb4:	af00      	add	r7, sp, #0
 800dfb6:	6078      	str	r0, [r7, #4]
 800dfb8:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800dfba:	4b21      	ldr	r3, [pc, #132]	@ (800e040 <prvAddCurrentTaskToDelayedList+0x90>)
 800dfbc:	681b      	ldr	r3, [r3, #0]
 800dfbe:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800dfc0:	4b20      	ldr	r3, [pc, #128]	@ (800e044 <prvAddCurrentTaskToDelayedList+0x94>)
 800dfc2:	681b      	ldr	r3, [r3, #0]
 800dfc4:	3304      	adds	r3, #4
 800dfc6:	4618      	mov	r0, r3
 800dfc8:	f7fd fd62 	bl	800ba90 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800dfcc:	687b      	ldr	r3, [r7, #4]
 800dfce:	f1b3 3fff 	cmp.w	r3, #4294967295
 800dfd2:	d10a      	bne.n	800dfea <prvAddCurrentTaskToDelayedList+0x3a>
 800dfd4:	683b      	ldr	r3, [r7, #0]
 800dfd6:	2b00      	cmp	r3, #0
 800dfd8:	d007      	beq.n	800dfea <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800dfda:	4b1a      	ldr	r3, [pc, #104]	@ (800e044 <prvAddCurrentTaskToDelayedList+0x94>)
 800dfdc:	681b      	ldr	r3, [r3, #0]
 800dfde:	3304      	adds	r3, #4
 800dfe0:	4619      	mov	r1, r3
 800dfe2:	4819      	ldr	r0, [pc, #100]	@ (800e048 <prvAddCurrentTaskToDelayedList+0x98>)
 800dfe4:	f7fd fcf7 	bl	800b9d6 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800dfe8:	e026      	b.n	800e038 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800dfea:	68fa      	ldr	r2, [r7, #12]
 800dfec:	687b      	ldr	r3, [r7, #4]
 800dfee:	4413      	add	r3, r2
 800dff0:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800dff2:	4b14      	ldr	r3, [pc, #80]	@ (800e044 <prvAddCurrentTaskToDelayedList+0x94>)
 800dff4:	681b      	ldr	r3, [r3, #0]
 800dff6:	68ba      	ldr	r2, [r7, #8]
 800dff8:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800dffa:	68ba      	ldr	r2, [r7, #8]
 800dffc:	68fb      	ldr	r3, [r7, #12]
 800dffe:	429a      	cmp	r2, r3
 800e000:	d209      	bcs.n	800e016 <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800e002:	4b12      	ldr	r3, [pc, #72]	@ (800e04c <prvAddCurrentTaskToDelayedList+0x9c>)
 800e004:	681a      	ldr	r2, [r3, #0]
 800e006:	4b0f      	ldr	r3, [pc, #60]	@ (800e044 <prvAddCurrentTaskToDelayedList+0x94>)
 800e008:	681b      	ldr	r3, [r3, #0]
 800e00a:	3304      	adds	r3, #4
 800e00c:	4619      	mov	r1, r3
 800e00e:	4610      	mov	r0, r2
 800e010:	f7fd fd05 	bl	800ba1e <vListInsert>
}
 800e014:	e010      	b.n	800e038 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800e016:	4b0e      	ldr	r3, [pc, #56]	@ (800e050 <prvAddCurrentTaskToDelayedList+0xa0>)
 800e018:	681a      	ldr	r2, [r3, #0]
 800e01a:	4b0a      	ldr	r3, [pc, #40]	@ (800e044 <prvAddCurrentTaskToDelayedList+0x94>)
 800e01c:	681b      	ldr	r3, [r3, #0]
 800e01e:	3304      	adds	r3, #4
 800e020:	4619      	mov	r1, r3
 800e022:	4610      	mov	r0, r2
 800e024:	f7fd fcfb 	bl	800ba1e <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800e028:	4b0a      	ldr	r3, [pc, #40]	@ (800e054 <prvAddCurrentTaskToDelayedList+0xa4>)
 800e02a:	681b      	ldr	r3, [r3, #0]
 800e02c:	68ba      	ldr	r2, [r7, #8]
 800e02e:	429a      	cmp	r2, r3
 800e030:	d202      	bcs.n	800e038 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 800e032:	4a08      	ldr	r2, [pc, #32]	@ (800e054 <prvAddCurrentTaskToDelayedList+0xa4>)
 800e034:	68bb      	ldr	r3, [r7, #8]
 800e036:	6013      	str	r3, [r2, #0]
}
 800e038:	bf00      	nop
 800e03a:	3710      	adds	r7, #16
 800e03c:	46bd      	mov	sp, r7
 800e03e:	bd80      	pop	{r7, pc}
 800e040:	2400ab24 	.word	0x2400ab24
 800e044:	2400a64c 	.word	0x2400a64c
 800e048:	2400ab0c 	.word	0x2400ab0c
 800e04c:	2400aadc 	.word	0x2400aadc
 800e050:	2400aad8 	.word	0x2400aad8
 800e054:	2400ab40 	.word	0x2400ab40

0800e058 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 800e058:	b580      	push	{r7, lr}
 800e05a:	b08a      	sub	sp, #40	@ 0x28
 800e05c:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 800e05e:	2300      	movs	r3, #0
 800e060:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 800e062:	f000 fb13 	bl	800e68c <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 800e066:	4b1d      	ldr	r3, [pc, #116]	@ (800e0dc <xTimerCreateTimerTask+0x84>)
 800e068:	681b      	ldr	r3, [r3, #0]
 800e06a:	2b00      	cmp	r3, #0
 800e06c:	d021      	beq.n	800e0b2 <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 800e06e:	2300      	movs	r3, #0
 800e070:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 800e072:	2300      	movs	r3, #0
 800e074:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 800e076:	1d3a      	adds	r2, r7, #4
 800e078:	f107 0108 	add.w	r1, r7, #8
 800e07c:	f107 030c 	add.w	r3, r7, #12
 800e080:	4618      	mov	r0, r3
 800e082:	f7fd fa73 	bl	800b56c <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 800e086:	6879      	ldr	r1, [r7, #4]
 800e088:	68bb      	ldr	r3, [r7, #8]
 800e08a:	68fa      	ldr	r2, [r7, #12]
 800e08c:	9202      	str	r2, [sp, #8]
 800e08e:	9301      	str	r3, [sp, #4]
 800e090:	2302      	movs	r3, #2
 800e092:	9300      	str	r3, [sp, #0]
 800e094:	2300      	movs	r3, #0
 800e096:	460a      	mov	r2, r1
 800e098:	4911      	ldr	r1, [pc, #68]	@ (800e0e0 <xTimerCreateTimerTask+0x88>)
 800e09a:	4812      	ldr	r0, [pc, #72]	@ (800e0e4 <xTimerCreateTimerTask+0x8c>)
 800e09c:	f7fe ffa2 	bl	800cfe4 <xTaskCreateStatic>
 800e0a0:	4603      	mov	r3, r0
 800e0a2:	4a11      	ldr	r2, [pc, #68]	@ (800e0e8 <xTimerCreateTimerTask+0x90>)
 800e0a4:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 800e0a6:	4b10      	ldr	r3, [pc, #64]	@ (800e0e8 <xTimerCreateTimerTask+0x90>)
 800e0a8:	681b      	ldr	r3, [r3, #0]
 800e0aa:	2b00      	cmp	r3, #0
 800e0ac:	d001      	beq.n	800e0b2 <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 800e0ae:	2301      	movs	r3, #1
 800e0b0:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 800e0b2:	697b      	ldr	r3, [r7, #20]
 800e0b4:	2b00      	cmp	r3, #0
 800e0b6:	d10b      	bne.n	800e0d0 <xTimerCreateTimerTask+0x78>
	__asm volatile
 800e0b8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e0bc:	f383 8811 	msr	BASEPRI, r3
 800e0c0:	f3bf 8f6f 	isb	sy
 800e0c4:	f3bf 8f4f 	dsb	sy
 800e0c8:	613b      	str	r3, [r7, #16]
}
 800e0ca:	bf00      	nop
 800e0cc:	bf00      	nop
 800e0ce:	e7fd      	b.n	800e0cc <xTimerCreateTimerTask+0x74>
	return xReturn;
 800e0d0:	697b      	ldr	r3, [r7, #20]
}
 800e0d2:	4618      	mov	r0, r3
 800e0d4:	3718      	adds	r7, #24
 800e0d6:	46bd      	mov	sp, r7
 800e0d8:	bd80      	pop	{r7, pc}
 800e0da:	bf00      	nop
 800e0dc:	2400ab7c 	.word	0x2400ab7c
 800e0e0:	0802c9f4 	.word	0x0802c9f4
 800e0e4:	0800e225 	.word	0x0800e225
 800e0e8:	2400ab80 	.word	0x2400ab80

0800e0ec <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 800e0ec:	b580      	push	{r7, lr}
 800e0ee:	b08a      	sub	sp, #40	@ 0x28
 800e0f0:	af00      	add	r7, sp, #0
 800e0f2:	60f8      	str	r0, [r7, #12]
 800e0f4:	60b9      	str	r1, [r7, #8]
 800e0f6:	607a      	str	r2, [r7, #4]
 800e0f8:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 800e0fa:	2300      	movs	r3, #0
 800e0fc:	627b      	str	r3, [r7, #36]	@ 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 800e0fe:	68fb      	ldr	r3, [r7, #12]
 800e100:	2b00      	cmp	r3, #0
 800e102:	d10b      	bne.n	800e11c <xTimerGenericCommand+0x30>
	__asm volatile
 800e104:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e108:	f383 8811 	msr	BASEPRI, r3
 800e10c:	f3bf 8f6f 	isb	sy
 800e110:	f3bf 8f4f 	dsb	sy
 800e114:	623b      	str	r3, [r7, #32]
}
 800e116:	bf00      	nop
 800e118:	bf00      	nop
 800e11a:	e7fd      	b.n	800e118 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 800e11c:	4b19      	ldr	r3, [pc, #100]	@ (800e184 <xTimerGenericCommand+0x98>)
 800e11e:	681b      	ldr	r3, [r3, #0]
 800e120:	2b00      	cmp	r3, #0
 800e122:	d02a      	beq.n	800e17a <xTimerGenericCommand+0x8e>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 800e124:	68bb      	ldr	r3, [r7, #8]
 800e126:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 800e128:	687b      	ldr	r3, [r7, #4]
 800e12a:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 800e12c:	68fb      	ldr	r3, [r7, #12]
 800e12e:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 800e130:	68bb      	ldr	r3, [r7, #8]
 800e132:	2b05      	cmp	r3, #5
 800e134:	dc18      	bgt.n	800e168 <xTimerGenericCommand+0x7c>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 800e136:	f7ff fdad 	bl	800dc94 <xTaskGetSchedulerState>
 800e13a:	4603      	mov	r3, r0
 800e13c:	2b02      	cmp	r3, #2
 800e13e:	d109      	bne.n	800e154 <xTimerGenericCommand+0x68>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 800e140:	4b10      	ldr	r3, [pc, #64]	@ (800e184 <xTimerGenericCommand+0x98>)
 800e142:	6818      	ldr	r0, [r3, #0]
 800e144:	f107 0110 	add.w	r1, r7, #16
 800e148:	2300      	movs	r3, #0
 800e14a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800e14c:	f7fe f8d2 	bl	800c2f4 <xQueueGenericSend>
 800e150:	6278      	str	r0, [r7, #36]	@ 0x24
 800e152:	e012      	b.n	800e17a <xTimerGenericCommand+0x8e>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 800e154:	4b0b      	ldr	r3, [pc, #44]	@ (800e184 <xTimerGenericCommand+0x98>)
 800e156:	6818      	ldr	r0, [r3, #0]
 800e158:	f107 0110 	add.w	r1, r7, #16
 800e15c:	2300      	movs	r3, #0
 800e15e:	2200      	movs	r2, #0
 800e160:	f7fe f8c8 	bl	800c2f4 <xQueueGenericSend>
 800e164:	6278      	str	r0, [r7, #36]	@ 0x24
 800e166:	e008      	b.n	800e17a <xTimerGenericCommand+0x8e>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 800e168:	4b06      	ldr	r3, [pc, #24]	@ (800e184 <xTimerGenericCommand+0x98>)
 800e16a:	6818      	ldr	r0, [r3, #0]
 800e16c:	f107 0110 	add.w	r1, r7, #16
 800e170:	2300      	movs	r3, #0
 800e172:	683a      	ldr	r2, [r7, #0]
 800e174:	f7fe f9c0 	bl	800c4f8 <xQueueGenericSendFromISR>
 800e178:	6278      	str	r0, [r7, #36]	@ 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 800e17a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 800e17c:	4618      	mov	r0, r3
 800e17e:	3728      	adds	r7, #40	@ 0x28
 800e180:	46bd      	mov	sp, r7
 800e182:	bd80      	pop	{r7, pc}
 800e184:	2400ab7c 	.word	0x2400ab7c

0800e188 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 800e188:	b580      	push	{r7, lr}
 800e18a:	b088      	sub	sp, #32
 800e18c:	af02      	add	r7, sp, #8
 800e18e:	6078      	str	r0, [r7, #4]
 800e190:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800e192:	4b23      	ldr	r3, [pc, #140]	@ (800e220 <prvProcessExpiredTimer+0x98>)
 800e194:	681b      	ldr	r3, [r3, #0]
 800e196:	68db      	ldr	r3, [r3, #12]
 800e198:	68db      	ldr	r3, [r3, #12]
 800e19a:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800e19c:	697b      	ldr	r3, [r7, #20]
 800e19e:	3304      	adds	r3, #4
 800e1a0:	4618      	mov	r0, r3
 800e1a2:	f7fd fc75 	bl	800ba90 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800e1a6:	697b      	ldr	r3, [r7, #20]
 800e1a8:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800e1ac:	f003 0304 	and.w	r3, r3, #4
 800e1b0:	2b00      	cmp	r3, #0
 800e1b2:	d023      	beq.n	800e1fc <prvProcessExpiredTimer+0x74>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 800e1b4:	697b      	ldr	r3, [r7, #20]
 800e1b6:	699a      	ldr	r2, [r3, #24]
 800e1b8:	687b      	ldr	r3, [r7, #4]
 800e1ba:	18d1      	adds	r1, r2, r3
 800e1bc:	687b      	ldr	r3, [r7, #4]
 800e1be:	683a      	ldr	r2, [r7, #0]
 800e1c0:	6978      	ldr	r0, [r7, #20]
 800e1c2:	f000 f8d5 	bl	800e370 <prvInsertTimerInActiveList>
 800e1c6:	4603      	mov	r3, r0
 800e1c8:	2b00      	cmp	r3, #0
 800e1ca:	d020      	beq.n	800e20e <prvProcessExpiredTimer+0x86>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800e1cc:	2300      	movs	r3, #0
 800e1ce:	9300      	str	r3, [sp, #0]
 800e1d0:	2300      	movs	r3, #0
 800e1d2:	687a      	ldr	r2, [r7, #4]
 800e1d4:	2100      	movs	r1, #0
 800e1d6:	6978      	ldr	r0, [r7, #20]
 800e1d8:	f7ff ff88 	bl	800e0ec <xTimerGenericCommand>
 800e1dc:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 800e1de:	693b      	ldr	r3, [r7, #16]
 800e1e0:	2b00      	cmp	r3, #0
 800e1e2:	d114      	bne.n	800e20e <prvProcessExpiredTimer+0x86>
	__asm volatile
 800e1e4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e1e8:	f383 8811 	msr	BASEPRI, r3
 800e1ec:	f3bf 8f6f 	isb	sy
 800e1f0:	f3bf 8f4f 	dsb	sy
 800e1f4:	60fb      	str	r3, [r7, #12]
}
 800e1f6:	bf00      	nop
 800e1f8:	bf00      	nop
 800e1fa:	e7fd      	b.n	800e1f8 <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800e1fc:	697b      	ldr	r3, [r7, #20]
 800e1fe:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800e202:	f023 0301 	bic.w	r3, r3, #1
 800e206:	b2da      	uxtb	r2, r3
 800e208:	697b      	ldr	r3, [r7, #20]
 800e20a:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800e20e:	697b      	ldr	r3, [r7, #20]
 800e210:	6a1b      	ldr	r3, [r3, #32]
 800e212:	6978      	ldr	r0, [r7, #20]
 800e214:	4798      	blx	r3
}
 800e216:	bf00      	nop
 800e218:	3718      	adds	r7, #24
 800e21a:	46bd      	mov	sp, r7
 800e21c:	bd80      	pop	{r7, pc}
 800e21e:	bf00      	nop
 800e220:	2400ab74 	.word	0x2400ab74

0800e224 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 800e224:	b580      	push	{r7, lr}
 800e226:	b084      	sub	sp, #16
 800e228:	af00      	add	r7, sp, #0
 800e22a:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800e22c:	f107 0308 	add.w	r3, r7, #8
 800e230:	4618      	mov	r0, r3
 800e232:	f000 f859 	bl	800e2e8 <prvGetNextExpireTime>
 800e236:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 800e238:	68bb      	ldr	r3, [r7, #8]
 800e23a:	4619      	mov	r1, r3
 800e23c:	68f8      	ldr	r0, [r7, #12]
 800e23e:	f000 f805 	bl	800e24c <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 800e242:	f000 f8d7 	bl	800e3f4 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800e246:	bf00      	nop
 800e248:	e7f0      	b.n	800e22c <prvTimerTask+0x8>
	...

0800e24c <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 800e24c:	b580      	push	{r7, lr}
 800e24e:	b084      	sub	sp, #16
 800e250:	af00      	add	r7, sp, #0
 800e252:	6078      	str	r0, [r7, #4]
 800e254:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 800e256:	f7ff f929 	bl	800d4ac <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800e25a:	f107 0308 	add.w	r3, r7, #8
 800e25e:	4618      	mov	r0, r3
 800e260:	f000 f866 	bl	800e330 <prvSampleTimeNow>
 800e264:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 800e266:	68bb      	ldr	r3, [r7, #8]
 800e268:	2b00      	cmp	r3, #0
 800e26a:	d130      	bne.n	800e2ce <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 800e26c:	683b      	ldr	r3, [r7, #0]
 800e26e:	2b00      	cmp	r3, #0
 800e270:	d10a      	bne.n	800e288 <prvProcessTimerOrBlockTask+0x3c>
 800e272:	687a      	ldr	r2, [r7, #4]
 800e274:	68fb      	ldr	r3, [r7, #12]
 800e276:	429a      	cmp	r2, r3
 800e278:	d806      	bhi.n	800e288 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 800e27a:	f7ff f925 	bl	800d4c8 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 800e27e:	68f9      	ldr	r1, [r7, #12]
 800e280:	6878      	ldr	r0, [r7, #4]
 800e282:	f7ff ff81 	bl	800e188 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 800e286:	e024      	b.n	800e2d2 <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 800e288:	683b      	ldr	r3, [r7, #0]
 800e28a:	2b00      	cmp	r3, #0
 800e28c:	d008      	beq.n	800e2a0 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 800e28e:	4b13      	ldr	r3, [pc, #76]	@ (800e2dc <prvProcessTimerOrBlockTask+0x90>)
 800e290:	681b      	ldr	r3, [r3, #0]
 800e292:	681b      	ldr	r3, [r3, #0]
 800e294:	2b00      	cmp	r3, #0
 800e296:	d101      	bne.n	800e29c <prvProcessTimerOrBlockTask+0x50>
 800e298:	2301      	movs	r3, #1
 800e29a:	e000      	b.n	800e29e <prvProcessTimerOrBlockTask+0x52>
 800e29c:	2300      	movs	r3, #0
 800e29e:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 800e2a0:	4b0f      	ldr	r3, [pc, #60]	@ (800e2e0 <prvProcessTimerOrBlockTask+0x94>)
 800e2a2:	6818      	ldr	r0, [r3, #0]
 800e2a4:	687a      	ldr	r2, [r7, #4]
 800e2a6:	68fb      	ldr	r3, [r7, #12]
 800e2a8:	1ad3      	subs	r3, r2, r3
 800e2aa:	683a      	ldr	r2, [r7, #0]
 800e2ac:	4619      	mov	r1, r3
 800e2ae:	f7fe fe65 	bl	800cf7c <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 800e2b2:	f7ff f909 	bl	800d4c8 <xTaskResumeAll>
 800e2b6:	4603      	mov	r3, r0
 800e2b8:	2b00      	cmp	r3, #0
 800e2ba:	d10a      	bne.n	800e2d2 <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 800e2bc:	4b09      	ldr	r3, [pc, #36]	@ (800e2e4 <prvProcessTimerOrBlockTask+0x98>)
 800e2be:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800e2c2:	601a      	str	r2, [r3, #0]
 800e2c4:	f3bf 8f4f 	dsb	sy
 800e2c8:	f3bf 8f6f 	isb	sy
}
 800e2cc:	e001      	b.n	800e2d2 <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 800e2ce:	f7ff f8fb 	bl	800d4c8 <xTaskResumeAll>
}
 800e2d2:	bf00      	nop
 800e2d4:	3710      	adds	r7, #16
 800e2d6:	46bd      	mov	sp, r7
 800e2d8:	bd80      	pop	{r7, pc}
 800e2da:	bf00      	nop
 800e2dc:	2400ab78 	.word	0x2400ab78
 800e2e0:	2400ab7c 	.word	0x2400ab7c
 800e2e4:	e000ed04 	.word	0xe000ed04

0800e2e8 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 800e2e8:	b480      	push	{r7}
 800e2ea:	b085      	sub	sp, #20
 800e2ec:	af00      	add	r7, sp, #0
 800e2ee:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 800e2f0:	4b0e      	ldr	r3, [pc, #56]	@ (800e32c <prvGetNextExpireTime+0x44>)
 800e2f2:	681b      	ldr	r3, [r3, #0]
 800e2f4:	681b      	ldr	r3, [r3, #0]
 800e2f6:	2b00      	cmp	r3, #0
 800e2f8:	d101      	bne.n	800e2fe <prvGetNextExpireTime+0x16>
 800e2fa:	2201      	movs	r2, #1
 800e2fc:	e000      	b.n	800e300 <prvGetNextExpireTime+0x18>
 800e2fe:	2200      	movs	r2, #0
 800e300:	687b      	ldr	r3, [r7, #4]
 800e302:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 800e304:	687b      	ldr	r3, [r7, #4]
 800e306:	681b      	ldr	r3, [r3, #0]
 800e308:	2b00      	cmp	r3, #0
 800e30a:	d105      	bne.n	800e318 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800e30c:	4b07      	ldr	r3, [pc, #28]	@ (800e32c <prvGetNextExpireTime+0x44>)
 800e30e:	681b      	ldr	r3, [r3, #0]
 800e310:	68db      	ldr	r3, [r3, #12]
 800e312:	681b      	ldr	r3, [r3, #0]
 800e314:	60fb      	str	r3, [r7, #12]
 800e316:	e001      	b.n	800e31c <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 800e318:	2300      	movs	r3, #0
 800e31a:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 800e31c:	68fb      	ldr	r3, [r7, #12]
}
 800e31e:	4618      	mov	r0, r3
 800e320:	3714      	adds	r7, #20
 800e322:	46bd      	mov	sp, r7
 800e324:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e328:	4770      	bx	lr
 800e32a:	bf00      	nop
 800e32c:	2400ab74 	.word	0x2400ab74

0800e330 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 800e330:	b580      	push	{r7, lr}
 800e332:	b084      	sub	sp, #16
 800e334:	af00      	add	r7, sp, #0
 800e336:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 800e338:	f7ff f964 	bl	800d604 <xTaskGetTickCount>
 800e33c:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 800e33e:	4b0b      	ldr	r3, [pc, #44]	@ (800e36c <prvSampleTimeNow+0x3c>)
 800e340:	681b      	ldr	r3, [r3, #0]
 800e342:	68fa      	ldr	r2, [r7, #12]
 800e344:	429a      	cmp	r2, r3
 800e346:	d205      	bcs.n	800e354 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 800e348:	f000 f93a 	bl	800e5c0 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 800e34c:	687b      	ldr	r3, [r7, #4]
 800e34e:	2201      	movs	r2, #1
 800e350:	601a      	str	r2, [r3, #0]
 800e352:	e002      	b.n	800e35a <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 800e354:	687b      	ldr	r3, [r7, #4]
 800e356:	2200      	movs	r2, #0
 800e358:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 800e35a:	4a04      	ldr	r2, [pc, #16]	@ (800e36c <prvSampleTimeNow+0x3c>)
 800e35c:	68fb      	ldr	r3, [r7, #12]
 800e35e:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 800e360:	68fb      	ldr	r3, [r7, #12]
}
 800e362:	4618      	mov	r0, r3
 800e364:	3710      	adds	r7, #16
 800e366:	46bd      	mov	sp, r7
 800e368:	bd80      	pop	{r7, pc}
 800e36a:	bf00      	nop
 800e36c:	2400ab84 	.word	0x2400ab84

0800e370 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 800e370:	b580      	push	{r7, lr}
 800e372:	b086      	sub	sp, #24
 800e374:	af00      	add	r7, sp, #0
 800e376:	60f8      	str	r0, [r7, #12]
 800e378:	60b9      	str	r1, [r7, #8]
 800e37a:	607a      	str	r2, [r7, #4]
 800e37c:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 800e37e:	2300      	movs	r3, #0
 800e380:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 800e382:	68fb      	ldr	r3, [r7, #12]
 800e384:	68ba      	ldr	r2, [r7, #8]
 800e386:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800e388:	68fb      	ldr	r3, [r7, #12]
 800e38a:	68fa      	ldr	r2, [r7, #12]
 800e38c:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 800e38e:	68ba      	ldr	r2, [r7, #8]
 800e390:	687b      	ldr	r3, [r7, #4]
 800e392:	429a      	cmp	r2, r3
 800e394:	d812      	bhi.n	800e3bc <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800e396:	687a      	ldr	r2, [r7, #4]
 800e398:	683b      	ldr	r3, [r7, #0]
 800e39a:	1ad2      	subs	r2, r2, r3
 800e39c:	68fb      	ldr	r3, [r7, #12]
 800e39e:	699b      	ldr	r3, [r3, #24]
 800e3a0:	429a      	cmp	r2, r3
 800e3a2:	d302      	bcc.n	800e3aa <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 800e3a4:	2301      	movs	r3, #1
 800e3a6:	617b      	str	r3, [r7, #20]
 800e3a8:	e01b      	b.n	800e3e2 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 800e3aa:	4b10      	ldr	r3, [pc, #64]	@ (800e3ec <prvInsertTimerInActiveList+0x7c>)
 800e3ac:	681a      	ldr	r2, [r3, #0]
 800e3ae:	68fb      	ldr	r3, [r7, #12]
 800e3b0:	3304      	adds	r3, #4
 800e3b2:	4619      	mov	r1, r3
 800e3b4:	4610      	mov	r0, r2
 800e3b6:	f7fd fb32 	bl	800ba1e <vListInsert>
 800e3ba:	e012      	b.n	800e3e2 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 800e3bc:	687a      	ldr	r2, [r7, #4]
 800e3be:	683b      	ldr	r3, [r7, #0]
 800e3c0:	429a      	cmp	r2, r3
 800e3c2:	d206      	bcs.n	800e3d2 <prvInsertTimerInActiveList+0x62>
 800e3c4:	68ba      	ldr	r2, [r7, #8]
 800e3c6:	683b      	ldr	r3, [r7, #0]
 800e3c8:	429a      	cmp	r2, r3
 800e3ca:	d302      	bcc.n	800e3d2 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 800e3cc:	2301      	movs	r3, #1
 800e3ce:	617b      	str	r3, [r7, #20]
 800e3d0:	e007      	b.n	800e3e2 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800e3d2:	4b07      	ldr	r3, [pc, #28]	@ (800e3f0 <prvInsertTimerInActiveList+0x80>)
 800e3d4:	681a      	ldr	r2, [r3, #0]
 800e3d6:	68fb      	ldr	r3, [r7, #12]
 800e3d8:	3304      	adds	r3, #4
 800e3da:	4619      	mov	r1, r3
 800e3dc:	4610      	mov	r0, r2
 800e3de:	f7fd fb1e 	bl	800ba1e <vListInsert>
		}
	}

	return xProcessTimerNow;
 800e3e2:	697b      	ldr	r3, [r7, #20]
}
 800e3e4:	4618      	mov	r0, r3
 800e3e6:	3718      	adds	r7, #24
 800e3e8:	46bd      	mov	sp, r7
 800e3ea:	bd80      	pop	{r7, pc}
 800e3ec:	2400ab78 	.word	0x2400ab78
 800e3f0:	2400ab74 	.word	0x2400ab74

0800e3f4 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 800e3f4:	b580      	push	{r7, lr}
 800e3f6:	b08e      	sub	sp, #56	@ 0x38
 800e3f8:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800e3fa:	e0ce      	b.n	800e59a <prvProcessReceivedCommands+0x1a6>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 800e3fc:	687b      	ldr	r3, [r7, #4]
 800e3fe:	2b00      	cmp	r3, #0
 800e400:	da19      	bge.n	800e436 <prvProcessReceivedCommands+0x42>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 800e402:	1d3b      	adds	r3, r7, #4
 800e404:	3304      	adds	r3, #4
 800e406:	62fb      	str	r3, [r7, #44]	@ 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 800e408:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e40a:	2b00      	cmp	r3, #0
 800e40c:	d10b      	bne.n	800e426 <prvProcessReceivedCommands+0x32>
	__asm volatile
 800e40e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e412:	f383 8811 	msr	BASEPRI, r3
 800e416:	f3bf 8f6f 	isb	sy
 800e41a:	f3bf 8f4f 	dsb	sy
 800e41e:	61fb      	str	r3, [r7, #28]
}
 800e420:	bf00      	nop
 800e422:	bf00      	nop
 800e424:	e7fd      	b.n	800e422 <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 800e426:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e428:	681b      	ldr	r3, [r3, #0]
 800e42a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800e42c:	6850      	ldr	r0, [r2, #4]
 800e42e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800e430:	6892      	ldr	r2, [r2, #8]
 800e432:	4611      	mov	r1, r2
 800e434:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 800e436:	687b      	ldr	r3, [r7, #4]
 800e438:	2b00      	cmp	r3, #0
 800e43a:	f2c0 80ae 	blt.w	800e59a <prvProcessReceivedCommands+0x1a6>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 800e43e:	68fb      	ldr	r3, [r7, #12]
 800e440:	62bb      	str	r3, [r7, #40]	@ 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 800e442:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e444:	695b      	ldr	r3, [r3, #20]
 800e446:	2b00      	cmp	r3, #0
 800e448:	d004      	beq.n	800e454 <prvProcessReceivedCommands+0x60>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800e44a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e44c:	3304      	adds	r3, #4
 800e44e:	4618      	mov	r0, r3
 800e450:	f7fd fb1e 	bl	800ba90 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800e454:	463b      	mov	r3, r7
 800e456:	4618      	mov	r0, r3
 800e458:	f7ff ff6a 	bl	800e330 <prvSampleTimeNow>
 800e45c:	6278      	str	r0, [r7, #36]	@ 0x24

			switch( xMessage.xMessageID )
 800e45e:	687b      	ldr	r3, [r7, #4]
 800e460:	2b09      	cmp	r3, #9
 800e462:	f200 8097 	bhi.w	800e594 <prvProcessReceivedCommands+0x1a0>
 800e466:	a201      	add	r2, pc, #4	@ (adr r2, 800e46c <prvProcessReceivedCommands+0x78>)
 800e468:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e46c:	0800e495 	.word	0x0800e495
 800e470:	0800e495 	.word	0x0800e495
 800e474:	0800e495 	.word	0x0800e495
 800e478:	0800e50b 	.word	0x0800e50b
 800e47c:	0800e51f 	.word	0x0800e51f
 800e480:	0800e56b 	.word	0x0800e56b
 800e484:	0800e495 	.word	0x0800e495
 800e488:	0800e495 	.word	0x0800e495
 800e48c:	0800e50b 	.word	0x0800e50b
 800e490:	0800e51f 	.word	0x0800e51f
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800e494:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e496:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800e49a:	f043 0301 	orr.w	r3, r3, #1
 800e49e:	b2da      	uxtb	r2, r3
 800e4a0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e4a2:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 800e4a6:	68ba      	ldr	r2, [r7, #8]
 800e4a8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e4aa:	699b      	ldr	r3, [r3, #24]
 800e4ac:	18d1      	adds	r1, r2, r3
 800e4ae:	68bb      	ldr	r3, [r7, #8]
 800e4b0:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800e4b2:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800e4b4:	f7ff ff5c 	bl	800e370 <prvInsertTimerInActiveList>
 800e4b8:	4603      	mov	r3, r0
 800e4ba:	2b00      	cmp	r3, #0
 800e4bc:	d06c      	beq.n	800e598 <prvProcessReceivedCommands+0x1a4>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800e4be:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e4c0:	6a1b      	ldr	r3, [r3, #32]
 800e4c2:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800e4c4:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800e4c6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e4c8:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800e4cc:	f003 0304 	and.w	r3, r3, #4
 800e4d0:	2b00      	cmp	r3, #0
 800e4d2:	d061      	beq.n	800e598 <prvProcessReceivedCommands+0x1a4>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 800e4d4:	68ba      	ldr	r2, [r7, #8]
 800e4d6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e4d8:	699b      	ldr	r3, [r3, #24]
 800e4da:	441a      	add	r2, r3
 800e4dc:	2300      	movs	r3, #0
 800e4de:	9300      	str	r3, [sp, #0]
 800e4e0:	2300      	movs	r3, #0
 800e4e2:	2100      	movs	r1, #0
 800e4e4:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800e4e6:	f7ff fe01 	bl	800e0ec <xTimerGenericCommand>
 800e4ea:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 800e4ec:	6a3b      	ldr	r3, [r7, #32]
 800e4ee:	2b00      	cmp	r3, #0
 800e4f0:	d152      	bne.n	800e598 <prvProcessReceivedCommands+0x1a4>
	__asm volatile
 800e4f2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e4f6:	f383 8811 	msr	BASEPRI, r3
 800e4fa:	f3bf 8f6f 	isb	sy
 800e4fe:	f3bf 8f4f 	dsb	sy
 800e502:	61bb      	str	r3, [r7, #24]
}
 800e504:	bf00      	nop
 800e506:	bf00      	nop
 800e508:	e7fd      	b.n	800e506 <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800e50a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e50c:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800e510:	f023 0301 	bic.w	r3, r3, #1
 800e514:	b2da      	uxtb	r2, r3
 800e516:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e518:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 800e51c:	e03d      	b.n	800e59a <prvProcessReceivedCommands+0x1a6>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800e51e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e520:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800e524:	f043 0301 	orr.w	r3, r3, #1
 800e528:	b2da      	uxtb	r2, r3
 800e52a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e52c:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 800e530:	68ba      	ldr	r2, [r7, #8]
 800e532:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e534:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 800e536:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e538:	699b      	ldr	r3, [r3, #24]
 800e53a:	2b00      	cmp	r3, #0
 800e53c:	d10b      	bne.n	800e556 <prvProcessReceivedCommands+0x162>
	__asm volatile
 800e53e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e542:	f383 8811 	msr	BASEPRI, r3
 800e546:	f3bf 8f6f 	isb	sy
 800e54a:	f3bf 8f4f 	dsb	sy
 800e54e:	617b      	str	r3, [r7, #20]
}
 800e550:	bf00      	nop
 800e552:	bf00      	nop
 800e554:	e7fd      	b.n	800e552 <prvProcessReceivedCommands+0x15e>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 800e556:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e558:	699a      	ldr	r2, [r3, #24]
 800e55a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e55c:	18d1      	adds	r1, r2, r3
 800e55e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e560:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800e562:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800e564:	f7ff ff04 	bl	800e370 <prvInsertTimerInActiveList>
					break;
 800e568:	e017      	b.n	800e59a <prvProcessReceivedCommands+0x1a6>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 800e56a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e56c:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800e570:	f003 0302 	and.w	r3, r3, #2
 800e574:	2b00      	cmp	r3, #0
 800e576:	d103      	bne.n	800e580 <prvProcessReceivedCommands+0x18c>
						{
							vPortFree( pxTimer );
 800e578:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800e57a:	f7fd f8df 	bl	800b73c <vPortFree>
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 800e57e:	e00c      	b.n	800e59a <prvProcessReceivedCommands+0x1a6>
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800e580:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e582:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800e586:	f023 0301 	bic.w	r3, r3, #1
 800e58a:	b2da      	uxtb	r2, r3
 800e58c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e58e:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 800e592:	e002      	b.n	800e59a <prvProcessReceivedCommands+0x1a6>

				default	:
					/* Don't expect to get here. */
					break;
 800e594:	bf00      	nop
 800e596:	e000      	b.n	800e59a <prvProcessReceivedCommands+0x1a6>
					break;
 800e598:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800e59a:	4b08      	ldr	r3, [pc, #32]	@ (800e5bc <prvProcessReceivedCommands+0x1c8>)
 800e59c:	681b      	ldr	r3, [r3, #0]
 800e59e:	1d39      	adds	r1, r7, #4
 800e5a0:	2200      	movs	r2, #0
 800e5a2:	4618      	mov	r0, r3
 800e5a4:	f7fe f8d6 	bl	800c754 <xQueueReceive>
 800e5a8:	4603      	mov	r3, r0
 800e5aa:	2b00      	cmp	r3, #0
 800e5ac:	f47f af26 	bne.w	800e3fc <prvProcessReceivedCommands+0x8>
			}
		}
	}
}
 800e5b0:	bf00      	nop
 800e5b2:	bf00      	nop
 800e5b4:	3730      	adds	r7, #48	@ 0x30
 800e5b6:	46bd      	mov	sp, r7
 800e5b8:	bd80      	pop	{r7, pc}
 800e5ba:	bf00      	nop
 800e5bc:	2400ab7c 	.word	0x2400ab7c

0800e5c0 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 800e5c0:	b580      	push	{r7, lr}
 800e5c2:	b088      	sub	sp, #32
 800e5c4:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800e5c6:	e049      	b.n	800e65c <prvSwitchTimerLists+0x9c>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800e5c8:	4b2e      	ldr	r3, [pc, #184]	@ (800e684 <prvSwitchTimerLists+0xc4>)
 800e5ca:	681b      	ldr	r3, [r3, #0]
 800e5cc:	68db      	ldr	r3, [r3, #12]
 800e5ce:	681b      	ldr	r3, [r3, #0]
 800e5d0:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800e5d2:	4b2c      	ldr	r3, [pc, #176]	@ (800e684 <prvSwitchTimerLists+0xc4>)
 800e5d4:	681b      	ldr	r3, [r3, #0]
 800e5d6:	68db      	ldr	r3, [r3, #12]
 800e5d8:	68db      	ldr	r3, [r3, #12]
 800e5da:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800e5dc:	68fb      	ldr	r3, [r7, #12]
 800e5de:	3304      	adds	r3, #4
 800e5e0:	4618      	mov	r0, r3
 800e5e2:	f7fd fa55 	bl	800ba90 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800e5e6:	68fb      	ldr	r3, [r7, #12]
 800e5e8:	6a1b      	ldr	r3, [r3, #32]
 800e5ea:	68f8      	ldr	r0, [r7, #12]
 800e5ec:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800e5ee:	68fb      	ldr	r3, [r7, #12]
 800e5f0:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800e5f4:	f003 0304 	and.w	r3, r3, #4
 800e5f8:	2b00      	cmp	r3, #0
 800e5fa:	d02f      	beq.n	800e65c <prvSwitchTimerLists+0x9c>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 800e5fc:	68fb      	ldr	r3, [r7, #12]
 800e5fe:	699b      	ldr	r3, [r3, #24]
 800e600:	693a      	ldr	r2, [r7, #16]
 800e602:	4413      	add	r3, r2
 800e604:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 800e606:	68ba      	ldr	r2, [r7, #8]
 800e608:	693b      	ldr	r3, [r7, #16]
 800e60a:	429a      	cmp	r2, r3
 800e60c:	d90e      	bls.n	800e62c <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 800e60e:	68fb      	ldr	r3, [r7, #12]
 800e610:	68ba      	ldr	r2, [r7, #8]
 800e612:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800e614:	68fb      	ldr	r3, [r7, #12]
 800e616:	68fa      	ldr	r2, [r7, #12]
 800e618:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800e61a:	4b1a      	ldr	r3, [pc, #104]	@ (800e684 <prvSwitchTimerLists+0xc4>)
 800e61c:	681a      	ldr	r2, [r3, #0]
 800e61e:	68fb      	ldr	r3, [r7, #12]
 800e620:	3304      	adds	r3, #4
 800e622:	4619      	mov	r1, r3
 800e624:	4610      	mov	r0, r2
 800e626:	f7fd f9fa 	bl	800ba1e <vListInsert>
 800e62a:	e017      	b.n	800e65c <prvSwitchTimerLists+0x9c>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800e62c:	2300      	movs	r3, #0
 800e62e:	9300      	str	r3, [sp, #0]
 800e630:	2300      	movs	r3, #0
 800e632:	693a      	ldr	r2, [r7, #16]
 800e634:	2100      	movs	r1, #0
 800e636:	68f8      	ldr	r0, [r7, #12]
 800e638:	f7ff fd58 	bl	800e0ec <xTimerGenericCommand>
 800e63c:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 800e63e:	687b      	ldr	r3, [r7, #4]
 800e640:	2b00      	cmp	r3, #0
 800e642:	d10b      	bne.n	800e65c <prvSwitchTimerLists+0x9c>
	__asm volatile
 800e644:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e648:	f383 8811 	msr	BASEPRI, r3
 800e64c:	f3bf 8f6f 	isb	sy
 800e650:	f3bf 8f4f 	dsb	sy
 800e654:	603b      	str	r3, [r7, #0]
}
 800e656:	bf00      	nop
 800e658:	bf00      	nop
 800e65a:	e7fd      	b.n	800e658 <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800e65c:	4b09      	ldr	r3, [pc, #36]	@ (800e684 <prvSwitchTimerLists+0xc4>)
 800e65e:	681b      	ldr	r3, [r3, #0]
 800e660:	681b      	ldr	r3, [r3, #0]
 800e662:	2b00      	cmp	r3, #0
 800e664:	d1b0      	bne.n	800e5c8 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 800e666:	4b07      	ldr	r3, [pc, #28]	@ (800e684 <prvSwitchTimerLists+0xc4>)
 800e668:	681b      	ldr	r3, [r3, #0]
 800e66a:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 800e66c:	4b06      	ldr	r3, [pc, #24]	@ (800e688 <prvSwitchTimerLists+0xc8>)
 800e66e:	681b      	ldr	r3, [r3, #0]
 800e670:	4a04      	ldr	r2, [pc, #16]	@ (800e684 <prvSwitchTimerLists+0xc4>)
 800e672:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 800e674:	4a04      	ldr	r2, [pc, #16]	@ (800e688 <prvSwitchTimerLists+0xc8>)
 800e676:	697b      	ldr	r3, [r7, #20]
 800e678:	6013      	str	r3, [r2, #0]
}
 800e67a:	bf00      	nop
 800e67c:	3718      	adds	r7, #24
 800e67e:	46bd      	mov	sp, r7
 800e680:	bd80      	pop	{r7, pc}
 800e682:	bf00      	nop
 800e684:	2400ab74 	.word	0x2400ab74
 800e688:	2400ab78 	.word	0x2400ab78

0800e68c <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 800e68c:	b580      	push	{r7, lr}
 800e68e:	b082      	sub	sp, #8
 800e690:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 800e692:	f7fd fb59 	bl	800bd48 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 800e696:	4b15      	ldr	r3, [pc, #84]	@ (800e6ec <prvCheckForValidListAndQueue+0x60>)
 800e698:	681b      	ldr	r3, [r3, #0]
 800e69a:	2b00      	cmp	r3, #0
 800e69c:	d120      	bne.n	800e6e0 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 800e69e:	4814      	ldr	r0, [pc, #80]	@ (800e6f0 <prvCheckForValidListAndQueue+0x64>)
 800e6a0:	f7fd f96c 	bl	800b97c <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 800e6a4:	4813      	ldr	r0, [pc, #76]	@ (800e6f4 <prvCheckForValidListAndQueue+0x68>)
 800e6a6:	f7fd f969 	bl	800b97c <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 800e6aa:	4b13      	ldr	r3, [pc, #76]	@ (800e6f8 <prvCheckForValidListAndQueue+0x6c>)
 800e6ac:	4a10      	ldr	r2, [pc, #64]	@ (800e6f0 <prvCheckForValidListAndQueue+0x64>)
 800e6ae:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 800e6b0:	4b12      	ldr	r3, [pc, #72]	@ (800e6fc <prvCheckForValidListAndQueue+0x70>)
 800e6b2:	4a10      	ldr	r2, [pc, #64]	@ (800e6f4 <prvCheckForValidListAndQueue+0x68>)
 800e6b4:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 800e6b6:	2300      	movs	r3, #0
 800e6b8:	9300      	str	r3, [sp, #0]
 800e6ba:	4b11      	ldr	r3, [pc, #68]	@ (800e700 <prvCheckForValidListAndQueue+0x74>)
 800e6bc:	4a11      	ldr	r2, [pc, #68]	@ (800e704 <prvCheckForValidListAndQueue+0x78>)
 800e6be:	2110      	movs	r1, #16
 800e6c0:	200a      	movs	r0, #10
 800e6c2:	f7fd fccd 	bl	800c060 <xQueueGenericCreateStatic>
 800e6c6:	4603      	mov	r3, r0
 800e6c8:	4a08      	ldr	r2, [pc, #32]	@ (800e6ec <prvCheckForValidListAndQueue+0x60>)
 800e6ca:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 800e6cc:	4b07      	ldr	r3, [pc, #28]	@ (800e6ec <prvCheckForValidListAndQueue+0x60>)
 800e6ce:	681b      	ldr	r3, [r3, #0]
 800e6d0:	2b00      	cmp	r3, #0
 800e6d2:	d005      	beq.n	800e6e0 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 800e6d4:	4b05      	ldr	r3, [pc, #20]	@ (800e6ec <prvCheckForValidListAndQueue+0x60>)
 800e6d6:	681b      	ldr	r3, [r3, #0]
 800e6d8:	490b      	ldr	r1, [pc, #44]	@ (800e708 <prvCheckForValidListAndQueue+0x7c>)
 800e6da:	4618      	mov	r0, r3
 800e6dc:	f7fe fbfa 	bl	800ced4 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800e6e0:	f7fd fb64 	bl	800bdac <vPortExitCritical>
}
 800e6e4:	bf00      	nop
 800e6e6:	46bd      	mov	sp, r7
 800e6e8:	bd80      	pop	{r7, pc}
 800e6ea:	bf00      	nop
 800e6ec:	2400ab7c 	.word	0x2400ab7c
 800e6f0:	2400ab4c 	.word	0x2400ab4c
 800e6f4:	2400ab60 	.word	0x2400ab60
 800e6f8:	2400ab74 	.word	0x2400ab74
 800e6fc:	2400ab78 	.word	0x2400ab78
 800e700:	2400ac28 	.word	0x2400ac28
 800e704:	2400ab88 	.word	0x2400ab88
 800e708:	0802c9fc 	.word	0x0802c9fc

0800e70c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 800e70c:	b480      	push	{r7}
 800e70e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 800e710:	4b3f      	ldr	r3, [pc, #252]	@ (800e810 <SystemInit+0x104>)
 800e712:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800e716:	4a3e      	ldr	r2, [pc, #248]	@ (800e810 <SystemInit+0x104>)
 800e718:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 800e71c:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
  #endif

    /*SEVONPEND enabled so that an interrupt coming from the CPU(n) interrupt signal is
     detectable by the CPU after a WFI/WFE instruction.*/
 SCB->SCR |= SCB_SCR_SEVONPEND_Msk;
 800e720:	4b3b      	ldr	r3, [pc, #236]	@ (800e810 <SystemInit+0x104>)
 800e722:	691b      	ldr	r3, [r3, #16]
 800e724:	4a3a      	ldr	r2, [pc, #232]	@ (800e810 <SystemInit+0x104>)
 800e726:	f043 0310 	orr.w	r3, r3, #16
 800e72a:	6113      	str	r3, [r2, #16]

#ifdef CORE_CM7
  /* Reset the RCC clock configuration to the default reset state ------------*/
   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 800e72c:	4b39      	ldr	r3, [pc, #228]	@ (800e814 <SystemInit+0x108>)
 800e72e:	681b      	ldr	r3, [r3, #0]
 800e730:	f003 030f 	and.w	r3, r3, #15
 800e734:	2b06      	cmp	r3, #6
 800e736:	d807      	bhi.n	800e748 <SystemInit+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
	MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 800e738:	4b36      	ldr	r3, [pc, #216]	@ (800e814 <SystemInit+0x108>)
 800e73a:	681b      	ldr	r3, [r3, #0]
 800e73c:	f023 030f 	bic.w	r3, r3, #15
 800e740:	4a34      	ldr	r2, [pc, #208]	@ (800e814 <SystemInit+0x108>)
 800e742:	f043 0307 	orr.w	r3, r3, #7
 800e746:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 800e748:	4b33      	ldr	r3, [pc, #204]	@ (800e818 <SystemInit+0x10c>)
 800e74a:	681b      	ldr	r3, [r3, #0]
 800e74c:	4a32      	ldr	r2, [pc, #200]	@ (800e818 <SystemInit+0x10c>)
 800e74e:	f043 0301 	orr.w	r3, r3, #1
 800e752:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 800e754:	4b30      	ldr	r3, [pc, #192]	@ (800e818 <SystemInit+0x10c>)
 800e756:	2200      	movs	r2, #0
 800e758:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, RC48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 800e75a:	4b2f      	ldr	r3, [pc, #188]	@ (800e818 <SystemInit+0x10c>)
 800e75c:	681a      	ldr	r2, [r3, #0]
 800e75e:	492e      	ldr	r1, [pc, #184]	@ (800e818 <SystemInit+0x10c>)
 800e760:	4b2e      	ldr	r3, [pc, #184]	@ (800e81c <SystemInit+0x110>)
 800e762:	4013      	ands	r3, r2
 800e764:	600b      	str	r3, [r1, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 800e766:	4b2b      	ldr	r3, [pc, #172]	@ (800e814 <SystemInit+0x108>)
 800e768:	681b      	ldr	r3, [r3, #0]
 800e76a:	f003 0308 	and.w	r3, r3, #8
 800e76e:	2b00      	cmp	r3, #0
 800e770:	d007      	beq.n	800e782 <SystemInit+0x76>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
	MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 800e772:	4b28      	ldr	r3, [pc, #160]	@ (800e814 <SystemInit+0x108>)
 800e774:	681b      	ldr	r3, [r3, #0]
 800e776:	f023 030f 	bic.w	r3, r3, #15
 800e77a:	4a26      	ldr	r2, [pc, #152]	@ (800e814 <SystemInit+0x108>)
 800e77c:	f043 0307 	orr.w	r3, r3, #7
 800e780:	6013      	str	r3, [r2, #0]
  }

  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 800e782:	4b25      	ldr	r3, [pc, #148]	@ (800e818 <SystemInit+0x10c>)
 800e784:	2200      	movs	r2, #0
 800e786:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 800e788:	4b23      	ldr	r3, [pc, #140]	@ (800e818 <SystemInit+0x10c>)
 800e78a:	2200      	movs	r2, #0
 800e78c:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 800e78e:	4b22      	ldr	r3, [pc, #136]	@ (800e818 <SystemInit+0x10c>)
 800e790:	2200      	movs	r2, #0
 800e792:	621a      	str	r2, [r3, #32]

  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 800e794:	4b20      	ldr	r3, [pc, #128]	@ (800e818 <SystemInit+0x10c>)
 800e796:	4a22      	ldr	r2, [pc, #136]	@ (800e820 <SystemInit+0x114>)
 800e798:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 800e79a:	4b1f      	ldr	r3, [pc, #124]	@ (800e818 <SystemInit+0x10c>)
 800e79c:	4a21      	ldr	r2, [pc, #132]	@ (800e824 <SystemInit+0x118>)
 800e79e:	62da      	str	r2, [r3, #44]	@ 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 800e7a0:	4b1d      	ldr	r3, [pc, #116]	@ (800e818 <SystemInit+0x10c>)
 800e7a2:	4a21      	ldr	r2, [pc, #132]	@ (800e828 <SystemInit+0x11c>)
 800e7a4:	631a      	str	r2, [r3, #48]	@ 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 800e7a6:	4b1c      	ldr	r3, [pc, #112]	@ (800e818 <SystemInit+0x10c>)
 800e7a8:	2200      	movs	r2, #0
 800e7aa:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 800e7ac:	4b1a      	ldr	r3, [pc, #104]	@ (800e818 <SystemInit+0x10c>)
 800e7ae:	4a1e      	ldr	r2, [pc, #120]	@ (800e828 <SystemInit+0x11c>)
 800e7b0:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 800e7b2:	4b19      	ldr	r3, [pc, #100]	@ (800e818 <SystemInit+0x10c>)
 800e7b4:	2200      	movs	r2, #0
 800e7b6:	63da      	str	r2, [r3, #60]	@ 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 800e7b8:	4b17      	ldr	r3, [pc, #92]	@ (800e818 <SystemInit+0x10c>)
 800e7ba:	4a1b      	ldr	r2, [pc, #108]	@ (800e828 <SystemInit+0x11c>)
 800e7bc:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 800e7be:	4b16      	ldr	r3, [pc, #88]	@ (800e818 <SystemInit+0x10c>)
 800e7c0:	2200      	movs	r2, #0
 800e7c2:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 800e7c4:	4b14      	ldr	r3, [pc, #80]	@ (800e818 <SystemInit+0x10c>)
 800e7c6:	681b      	ldr	r3, [r3, #0]
 800e7c8:	4a13      	ldr	r2, [pc, #76]	@ (800e818 <SystemInit+0x10c>)
 800e7ca:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800e7ce:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 800e7d0:	4b11      	ldr	r3, [pc, #68]	@ (800e818 <SystemInit+0x10c>)
 800e7d2:	2200      	movs	r2, #0
 800e7d4:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Enable CortexM7 HSEM EXTI line (line 78)*/
  EXTI_D2->EMR3 |= 0x4000UL;
 800e7d6:	4b15      	ldr	r3, [pc, #84]	@ (800e82c <SystemInit+0x120>)
 800e7d8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800e7da:	4a14      	ldr	r2, [pc, #80]	@ (800e82c <SystemInit+0x120>)
 800e7dc:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800e7e0:	6253      	str	r3, [r2, #36]	@ 0x24


  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 800e7e2:	4b13      	ldr	r3, [pc, #76]	@ (800e830 <SystemInit+0x124>)
 800e7e4:	681a      	ldr	r2, [r3, #0]
 800e7e6:	4b13      	ldr	r3, [pc, #76]	@ (800e834 <SystemInit+0x128>)
 800e7e8:	4013      	ands	r3, r2
 800e7ea:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800e7ee:	d202      	bcs.n	800e7f6 <SystemInit+0xea>
  {
    /* if stm32h7 revY*/
    /* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
    *((__IO uint32_t*)0x51008108) = 0x000000001U;
 800e7f0:	4b11      	ldr	r3, [pc, #68]	@ (800e838 <SystemInit+0x12c>)
 800e7f2:	2201      	movs	r2, #1
 800e7f4:	601a      	str	r2, [r3, #0]
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 800e7f6:	4b11      	ldr	r3, [pc, #68]	@ (800e83c <SystemInit+0x130>)
 800e7f8:	f243 02d2 	movw	r2, #12498	@ 0x30d2
 800e7fc:	601a      	str	r2, [r3, #0]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = D1_AXISRAM_BASE  | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM */
#else
  SCB->VTOR = FLASH_BANK1_BASE | VECT_TAB_OFFSET;       /* Vector Table Relocation in Internal FLASH */
 800e7fe:	4b04      	ldr	r3, [pc, #16]	@ (800e810 <SystemInit+0x104>)
 800e800:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 800e804:	609a      	str	r2, [r3, #8]
#else
#error Please #define CORE_CM4 or CORE_CM7
#endif
#endif

}
 800e806:	bf00      	nop
 800e808:	46bd      	mov	sp, r7
 800e80a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e80e:	4770      	bx	lr
 800e810:	e000ed00 	.word	0xe000ed00
 800e814:	52002000 	.word	0x52002000
 800e818:	58024400 	.word	0x58024400
 800e81c:	eaf6ed7f 	.word	0xeaf6ed7f
 800e820:	02020200 	.word	0x02020200
 800e824:	01ff0000 	.word	0x01ff0000
 800e828:	01010280 	.word	0x01010280
 800e82c:	580000c0 	.word	0x580000c0
 800e830:	5c001000 	.word	0x5c001000
 800e834:	ffff0000 	.word	0xffff0000
 800e838:	51008108 	.word	0x51008108
 800e83c:	52004000 	.word	0x52004000

0800e840 <FT5336_RegisterBusIO>:
  * @brief  Register IO bus to component object
  * @param  Component object pointer
  * @retval error status
  */
int32_t FT5336_RegisterBusIO (FT5336_Object_t *pObj, FT5336_IO_t *pIO)
{
 800e840:	b580      	push	{r7, lr}
 800e842:	b084      	sub	sp, #16
 800e844:	af00      	add	r7, sp, #0
 800e846:	6078      	str	r0, [r7, #4]
 800e848:	6039      	str	r1, [r7, #0]
  int32_t ret;

  if (pObj == NULL)
 800e84a:	687b      	ldr	r3, [r7, #4]
 800e84c:	2b00      	cmp	r3, #0
 800e84e:	d103      	bne.n	800e858 <FT5336_RegisterBusIO+0x18>
  {
    ret = FT5336_ERROR;
 800e850:	f04f 33ff 	mov.w	r3, #4294967295
 800e854:	60fb      	str	r3, [r7, #12]
 800e856:	e02c      	b.n	800e8b2 <FT5336_RegisterBusIO+0x72>
  }
  else
  {
    pObj->IO.Init      = pIO->Init;
 800e858:	683b      	ldr	r3, [r7, #0]
 800e85a:	681a      	ldr	r2, [r3, #0]
 800e85c:	687b      	ldr	r3, [r7, #4]
 800e85e:	601a      	str	r2, [r3, #0]
    pObj->IO.DeInit    = pIO->DeInit;
 800e860:	683b      	ldr	r3, [r7, #0]
 800e862:	685a      	ldr	r2, [r3, #4]
 800e864:	687b      	ldr	r3, [r7, #4]
 800e866:	605a      	str	r2, [r3, #4]
    pObj->IO.Address   = pIO->Address;
 800e868:	683b      	ldr	r3, [r7, #0]
 800e86a:	891a      	ldrh	r2, [r3, #8]
 800e86c:	687b      	ldr	r3, [r7, #4]
 800e86e:	811a      	strh	r2, [r3, #8]
    pObj->IO.WriteReg  = pIO->WriteReg;
 800e870:	683b      	ldr	r3, [r7, #0]
 800e872:	68da      	ldr	r2, [r3, #12]
 800e874:	687b      	ldr	r3, [r7, #4]
 800e876:	60da      	str	r2, [r3, #12]
    pObj->IO.ReadReg   = pIO->ReadReg;
 800e878:	683b      	ldr	r3, [r7, #0]
 800e87a:	691a      	ldr	r2, [r3, #16]
 800e87c:	687b      	ldr	r3, [r7, #4]
 800e87e:	611a      	str	r2, [r3, #16]
    pObj->IO.GetTick   = pIO->GetTick;
 800e880:	683b      	ldr	r3, [r7, #0]
 800e882:	695a      	ldr	r2, [r3, #20]
 800e884:	687b      	ldr	r3, [r7, #4]
 800e886:	615a      	str	r2, [r3, #20]

    pObj->Ctx.ReadReg  = ReadRegWrap;
 800e888:	687b      	ldr	r3, [r7, #4]
 800e88a:	4a0c      	ldr	r2, [pc, #48]	@ (800e8bc <FT5336_RegisterBusIO+0x7c>)
 800e88c:	61da      	str	r2, [r3, #28]
    pObj->Ctx.WriteReg = WriteRegWrap;
 800e88e:	687b      	ldr	r3, [r7, #4]
 800e890:	4a0b      	ldr	r2, [pc, #44]	@ (800e8c0 <FT5336_RegisterBusIO+0x80>)
 800e892:	619a      	str	r2, [r3, #24]
    pObj->Ctx.handle   = pObj;
 800e894:	687b      	ldr	r3, [r7, #4]
 800e896:	687a      	ldr	r2, [r7, #4]
 800e898:	621a      	str	r2, [r3, #32]

    if(pObj->IO.Init != NULL)
 800e89a:	687b      	ldr	r3, [r7, #4]
 800e89c:	681b      	ldr	r3, [r3, #0]
 800e89e:	2b00      	cmp	r3, #0
 800e8a0:	d004      	beq.n	800e8ac <FT5336_RegisterBusIO+0x6c>
    {
      ret = pObj->IO.Init();
 800e8a2:	687b      	ldr	r3, [r7, #4]
 800e8a4:	681b      	ldr	r3, [r3, #0]
 800e8a6:	4798      	blx	r3
 800e8a8:	60f8      	str	r0, [r7, #12]
 800e8aa:	e002      	b.n	800e8b2 <FT5336_RegisterBusIO+0x72>
    }
    else
    {
      ret = FT5336_ERROR;
 800e8ac:	f04f 33ff 	mov.w	r3, #4294967295
 800e8b0:	60fb      	str	r3, [r7, #12]
    }
  }

  return ret;
 800e8b2:	68fb      	ldr	r3, [r7, #12]
}
 800e8b4:	4618      	mov	r0, r3
 800e8b6:	3710      	adds	r7, #16
 800e8b8:	46bd      	mov	sp, r7
 800e8ba:	bd80      	pop	{r7, pc}
 800e8bc:	0800ecb9 	.word	0x0800ecb9
 800e8c0:	0800eced 	.word	0x0800eced

0800e8c4 <FT5336_GetCapabilities>:
  * @param  pObj Component object pointer
  * @param  Capabilities pointer to FT5336 sensor capabilities
  * @retval Component status
  */
int32_t FT5336_GetCapabilities(FT5336_Object_t *pObj, FT5336_Capabilities_t *Capabilities)
{
 800e8c4:	b480      	push	{r7}
 800e8c6:	b083      	sub	sp, #12
 800e8c8:	af00      	add	r7, sp, #0
 800e8ca:	6078      	str	r0, [r7, #4]
 800e8cc:	6039      	str	r1, [r7, #0]
  /* Prevent unused argument(s) compilation warning */
  (void)(pObj);

  /* Store component's capabilities */
  Capabilities->MultiTouch = 1;
 800e8ce:	683b      	ldr	r3, [r7, #0]
 800e8d0:	2201      	movs	r2, #1
 800e8d2:	701a      	strb	r2, [r3, #0]
  Capabilities->Gesture    = 1;
 800e8d4:	683b      	ldr	r3, [r7, #0]
 800e8d6:	2201      	movs	r2, #1
 800e8d8:	705a      	strb	r2, [r3, #1]
  Capabilities->MaxTouch   = FT5336_MAX_NB_TOUCH;
 800e8da:	683b      	ldr	r3, [r7, #0]
 800e8dc:	2205      	movs	r2, #5
 800e8de:	709a      	strb	r2, [r3, #2]
  Capabilities->MaxXl      = FT5336_MAX_X_LENGTH;
 800e8e0:	683b      	ldr	r3, [r7, #0]
 800e8e2:	f44f 72f0 	mov.w	r2, #480	@ 0x1e0
 800e8e6:	605a      	str	r2, [r3, #4]
  Capabilities->MaxYl      = FT5336_MAX_Y_LENGTH;
 800e8e8:	683b      	ldr	r3, [r7, #0]
 800e8ea:	f44f 7288 	mov.w	r2, #272	@ 0x110
 800e8ee:	609a      	str	r2, [r3, #8]

  return FT5336_OK;
 800e8f0:	2300      	movs	r3, #0
}
 800e8f2:	4618      	mov	r0, r3
 800e8f4:	370c      	adds	r7, #12
 800e8f6:	46bd      	mov	sp, r7
 800e8f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e8fc:	4770      	bx	lr

0800e8fe <FT5336_Init>:
  * @param  pObj Component object pointer
  * @param  GestureInit: Gesture init structure
  * @retval FT5336_OK
  */
int32_t FT5336_Init(FT5336_Object_t *pObj)
{
 800e8fe:	b580      	push	{r7, lr}
 800e900:	b084      	sub	sp, #16
 800e902:	af00      	add	r7, sp, #0
 800e904:	6078      	str	r0, [r7, #4]
  int32_t ret = FT5336_OK;
 800e906:	2300      	movs	r3, #0
 800e908:	60fb      	str	r3, [r7, #12]

  if(pObj->IsInitialized == 0U)
 800e90a:	687b      	ldr	r3, [r7, #4]
 800e90c:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 800e910:	2b00      	cmp	r3, #0
 800e912:	d10d      	bne.n	800e930 <FT5336_Init+0x32>
  {
    /* Initialize IO BUS layer */
    pObj->IO.Init();
 800e914:	687b      	ldr	r3, [r7, #4]
 800e916:	681b      	ldr	r3, [r3, #0]
 800e918:	4798      	blx	r3
    /* This is called internal calibration of the touch screen                 */
    ret += FT5336_TS_Calibration(pObj);
#endif /* (FT5336_AUTO_CALIBRATION_ENABLED == 1) */
    /* By default set FT5336 IC in Polling mode : no INT generation on FT5336 for new touch available */
    /* Note TS_INT is active low                                                                      */
    ret += FT5336_DisableIT(pObj);
 800e91a:	6878      	ldr	r0, [r7, #4]
 800e91c:	f000 f987 	bl	800ec2e <FT5336_DisableIT>
 800e920:	4602      	mov	r2, r0
 800e922:	68fb      	ldr	r3, [r7, #12]
 800e924:	4413      	add	r3, r2
 800e926:	60fb      	str	r3, [r7, #12]

    pObj->IsInitialized = 1;
 800e928:	687b      	ldr	r3, [r7, #4]
 800e92a:	2201      	movs	r2, #1
 800e92c:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  }

  if(ret != FT5336_OK)
 800e930:	68fb      	ldr	r3, [r7, #12]
 800e932:	2b00      	cmp	r3, #0
 800e934:	d002      	beq.n	800e93c <FT5336_Init+0x3e>
  {
    ret = FT5336_ERROR;
 800e936:	f04f 33ff 	mov.w	r3, #4294967295
 800e93a:	60fb      	str	r3, [r7, #12]
  }

  return ret;
 800e93c:	68fb      	ldr	r3, [r7, #12]
}
 800e93e:	4618      	mov	r0, r3
 800e940:	3710      	adds	r7, #16
 800e942:	46bd      	mov	sp, r7
 800e944:	bd80      	pop	{r7, pc}

0800e946 <FT5336_DeInit>:
  *         from MCU to FT5336 : ie I2C channel initialization (if required).
  * @param  pObj Component object pointer
  * @retval FT5336_OK
  */
int32_t FT5336_DeInit(FT5336_Object_t *pObj)
{
 800e946:	b480      	push	{r7}
 800e948:	b085      	sub	sp, #20
 800e94a:	af00      	add	r7, sp, #0
 800e94c:	6078      	str	r0, [r7, #4]
  int32_t ret = FT5336_OK;
 800e94e:	2300      	movs	r3, #0
 800e950:	60fb      	str	r3, [r7, #12]

  if(pObj->IsInitialized == 1U)
 800e952:	687b      	ldr	r3, [r7, #4]
 800e954:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 800e958:	2b01      	cmp	r3, #1
 800e95a:	d103      	bne.n	800e964 <FT5336_DeInit+0x1e>
  {
    pObj->IsInitialized = 0;
 800e95c:	687b      	ldr	r3, [r7, #4]
 800e95e:	2200      	movs	r2, #0
 800e960:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  }

  return ret;
 800e964:	68fb      	ldr	r3, [r7, #12]
}
 800e966:	4618      	mov	r0, r3
 800e968:	3714      	adds	r7, #20
 800e96a:	46bd      	mov	sp, r7
 800e96c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e970:	4770      	bx	lr

0800e972 <FT5336_GestureConfig>:
  * @param  pObj  Component object pointer
  * @param  GestureInit Gesture init structure
  * @retval FT5336_OK
  */
int32_t FT5336_GestureConfig(FT5336_Object_t *pObj, FT5336_Gesture_Init_t *GestureInit)
{
 800e972:	b580      	push	{r7, lr}
 800e974:	b084      	sub	sp, #16
 800e976:	af00      	add	r7, sp, #0
 800e978:	6078      	str	r0, [r7, #4]
 800e97a:	6039      	str	r1, [r7, #0]
  int32_t ret;

  ret = ft5336_radian_value(&pObj->Ctx, (uint8_t)GestureInit->Radian);
 800e97c:	687b      	ldr	r3, [r7, #4]
 800e97e:	f103 0218 	add.w	r2, r3, #24
 800e982:	683b      	ldr	r3, [r7, #0]
 800e984:	681b      	ldr	r3, [r3, #0]
 800e986:	b2db      	uxtb	r3, r3
 800e988:	4619      	mov	r1, r3
 800e98a:	4610      	mov	r0, r2
 800e98c:	f000 fa25 	bl	800edda <ft5336_radian_value>
 800e990:	60f8      	str	r0, [r7, #12]
  ret += ft5336_offset_left_right(&pObj->Ctx, (uint8_t)GestureInit->OffsetLeftRight);
 800e992:	687b      	ldr	r3, [r7, #4]
 800e994:	f103 0218 	add.w	r2, r3, #24
 800e998:	683b      	ldr	r3, [r7, #0]
 800e99a:	685b      	ldr	r3, [r3, #4]
 800e99c:	b2db      	uxtb	r3, r3
 800e99e:	4619      	mov	r1, r3
 800e9a0:	4610      	mov	r0, r2
 800e9a2:	f000 fa2b 	bl	800edfc <ft5336_offset_left_right>
 800e9a6:	4602      	mov	r2, r0
 800e9a8:	68fb      	ldr	r3, [r7, #12]
 800e9aa:	4413      	add	r3, r2
 800e9ac:	60fb      	str	r3, [r7, #12]
  ret += ft5336_offset_up_down(&pObj->Ctx, (uint8_t)GestureInit->OffsetUpDown);
 800e9ae:	687b      	ldr	r3, [r7, #4]
 800e9b0:	f103 0218 	add.w	r2, r3, #24
 800e9b4:	683b      	ldr	r3, [r7, #0]
 800e9b6:	689b      	ldr	r3, [r3, #8]
 800e9b8:	b2db      	uxtb	r3, r3
 800e9ba:	4619      	mov	r1, r3
 800e9bc:	4610      	mov	r0, r2
 800e9be:	f000 fa2e 	bl	800ee1e <ft5336_offset_up_down>
 800e9c2:	4602      	mov	r2, r0
 800e9c4:	68fb      	ldr	r3, [r7, #12]
 800e9c6:	4413      	add	r3, r2
 800e9c8:	60fb      	str	r3, [r7, #12]
  ret += ft5336_disatnce_left_right(&pObj->Ctx, (uint8_t)GestureInit->DistanceLeftRight);
 800e9ca:	687b      	ldr	r3, [r7, #4]
 800e9cc:	f103 0218 	add.w	r2, r3, #24
 800e9d0:	683b      	ldr	r3, [r7, #0]
 800e9d2:	68db      	ldr	r3, [r3, #12]
 800e9d4:	b2db      	uxtb	r3, r3
 800e9d6:	4619      	mov	r1, r3
 800e9d8:	4610      	mov	r0, r2
 800e9da:	f000 fa31 	bl	800ee40 <ft5336_disatnce_left_right>
 800e9de:	4602      	mov	r2, r0
 800e9e0:	68fb      	ldr	r3, [r7, #12]
 800e9e2:	4413      	add	r3, r2
 800e9e4:	60fb      	str	r3, [r7, #12]
  ret += ft5336_distance_up_down(&pObj->Ctx, (uint8_t)GestureInit->DistanceUpDown);
 800e9e6:	687b      	ldr	r3, [r7, #4]
 800e9e8:	f103 0218 	add.w	r2, r3, #24
 800e9ec:	683b      	ldr	r3, [r7, #0]
 800e9ee:	691b      	ldr	r3, [r3, #16]
 800e9f0:	b2db      	uxtb	r3, r3
 800e9f2:	4619      	mov	r1, r3
 800e9f4:	4610      	mov	r0, r2
 800e9f6:	f000 fa34 	bl	800ee62 <ft5336_distance_up_down>
 800e9fa:	4602      	mov	r2, r0
 800e9fc:	68fb      	ldr	r3, [r7, #12]
 800e9fe:	4413      	add	r3, r2
 800ea00:	60fb      	str	r3, [r7, #12]
  ret += ft5336_distance_zoom(&pObj->Ctx, (uint8_t)GestureInit->DistanceZoom);
 800ea02:	687b      	ldr	r3, [r7, #4]
 800ea04:	f103 0218 	add.w	r2, r3, #24
 800ea08:	683b      	ldr	r3, [r7, #0]
 800ea0a:	695b      	ldr	r3, [r3, #20]
 800ea0c:	b2db      	uxtb	r3, r3
 800ea0e:	4619      	mov	r1, r3
 800ea10:	4610      	mov	r0, r2
 800ea12:	f000 fa37 	bl	800ee84 <ft5336_distance_zoom>
 800ea16:	4602      	mov	r2, r0
 800ea18:	68fb      	ldr	r3, [r7, #12]
 800ea1a:	4413      	add	r3, r2
 800ea1c:	60fb      	str	r3, [r7, #12]

  if(ret != FT5336_OK)
 800ea1e:	68fb      	ldr	r3, [r7, #12]
 800ea20:	2b00      	cmp	r3, #0
 800ea22:	d002      	beq.n	800ea2a <FT5336_GestureConfig+0xb8>
  {
    ret = FT5336_ERROR;
 800ea24:	f04f 33ff 	mov.w	r3, #4294967295
 800ea28:	60fb      	str	r3, [r7, #12]
  }

  return ret;
 800ea2a:	68fb      	ldr	r3, [r7, #12]
}
 800ea2c:	4618      	mov	r0, r3
 800ea2e:	3710      	adds	r7, #16
 800ea30:	46bd      	mov	sp, r7
 800ea32:	bd80      	pop	{r7, pc}

0800ea34 <FT5336_ReadID>:
  *         able to read the FT5336 device ID, and verify this is a FT5336.
  * @param  pObj Component object pointer
  * @retval The Device ID (two bytes).
  */
int32_t FT5336_ReadID(FT5336_Object_t *pObj, uint32_t *Id)
{
 800ea34:	b580      	push	{r7, lr}
 800ea36:	b082      	sub	sp, #8
 800ea38:	af00      	add	r7, sp, #0
 800ea3a:	6078      	str	r0, [r7, #4]
 800ea3c:	6039      	str	r1, [r7, #0]
  return ft5336_chip_id(&pObj->Ctx, (uint8_t *)Id);
 800ea3e:	687b      	ldr	r3, [r7, #4]
 800ea40:	3318      	adds	r3, #24
 800ea42:	6839      	ldr	r1, [r7, #0]
 800ea44:	4618      	mov	r0, r3
 800ea46:	f000 fa3f 	bl	800eec8 <ft5336_chip_id>
 800ea4a:	4603      	mov	r3, r0
}
 800ea4c:	4618      	mov	r0, r3
 800ea4e:	3708      	adds	r7, #8
 800ea50:	46bd      	mov	sp, r7
 800ea52:	bd80      	pop	{r7, pc}

0800ea54 <FT5336_GetState>:
  * @param  pObj Component object pointer
  * @param  State: Single Touch stucture pointer
  * @retval FT5336_OK.
  */
int32_t FT5336_GetState(FT5336_Object_t *pObj, FT5336_State_t *State)
{
 800ea54:	b580      	push	{r7, lr}
 800ea56:	b084      	sub	sp, #16
 800ea58:	af00      	add	r7, sp, #0
 800ea5a:	6078      	str	r0, [r7, #4]
 800ea5c:	6039      	str	r1, [r7, #0]
  int32_t ret = FT5336_OK;
 800ea5e:	2300      	movs	r3, #0
 800ea60:	60fb      	str	r3, [r7, #12]
  uint8_t  data[4];

  State->TouchDetected = (uint32_t)FT5336_DetectTouch(pObj);
 800ea62:	6878      	ldr	r0, [r7, #4]
 800ea64:	f000 f908 	bl	800ec78 <FT5336_DetectTouch>
 800ea68:	4603      	mov	r3, r0
 800ea6a:	461a      	mov	r2, r3
 800ea6c:	683b      	ldr	r3, [r7, #0]
 800ea6e:	601a      	str	r2, [r3, #0]
  if(ft5336_read_reg(&pObj->Ctx, FT5336_P1_XH_REG, data, (uint16_t)sizeof(data)) != FT5336_OK)
 800ea70:	687b      	ldr	r3, [r7, #4]
 800ea72:	f103 0018 	add.w	r0, r3, #24
 800ea76:	f107 0208 	add.w	r2, r7, #8
 800ea7a:	2304      	movs	r3, #4
 800ea7c:	2103      	movs	r1, #3
 800ea7e:	f000 f94f 	bl	800ed20 <ft5336_read_reg>
 800ea82:	4603      	mov	r3, r0
 800ea84:	2b00      	cmp	r3, #0
 800ea86:	d003      	beq.n	800ea90 <FT5336_GetState+0x3c>
  {
    ret = FT5336_ERROR;
 800ea88:	f04f 33ff 	mov.w	r3, #4294967295
 800ea8c:	60fb      	str	r3, [r7, #12]
 800ea8e:	e00f      	b.n	800eab0 <FT5336_GetState+0x5c>
  }
  else
  {
    /* Send back first ready X position to caller */
    State->TouchX = (((uint32_t)data[0] & FT5336_P1_XH_TP_BIT_MASK) << 8) | ((uint32_t)data[1] & FT5336_P1_XL_TP_BIT_MASK);
 800ea90:	7a3b      	ldrb	r3, [r7, #8]
 800ea92:	021b      	lsls	r3, r3, #8
 800ea94:	f403 6370 	and.w	r3, r3, #3840	@ 0xf00
 800ea98:	7a7a      	ldrb	r2, [r7, #9]
 800ea9a:	431a      	orrs	r2, r3
 800ea9c:	683b      	ldr	r3, [r7, #0]
 800ea9e:	605a      	str	r2, [r3, #4]
    /* Send back first ready Y position to caller */
    State->TouchY = (((uint32_t)data[2] & FT5336_P1_YH_TP_BIT_MASK) << 8) | ((uint32_t)data[3] & FT5336_P1_YL_TP_BIT_MASK);
 800eaa0:	7abb      	ldrb	r3, [r7, #10]
 800eaa2:	021b      	lsls	r3, r3, #8
 800eaa4:	f403 6370 	and.w	r3, r3, #3840	@ 0xf00
 800eaa8:	7afa      	ldrb	r2, [r7, #11]
 800eaaa:	431a      	orrs	r2, r3
 800eaac:	683b      	ldr	r3, [r7, #0]
 800eaae:	609a      	str	r2, [r3, #8]
  }

  return ret;
 800eab0:	68fb      	ldr	r3, [r7, #12]
}
 800eab2:	4618      	mov	r0, r3
 800eab4:	3710      	adds	r7, #16
 800eab6:	46bd      	mov	sp, r7
 800eab8:	bd80      	pop	{r7, pc}

0800eaba <FT5336_GetMultiTouchState>:
  * @param  pObj Component object pointer
  * @param  State Multi Touch structure pointer
  * @retval FT5336_OK.
  */
int32_t FT5336_GetMultiTouchState(FT5336_Object_t *pObj, FT5336_MultiTouch_State_t *State)
{
 800eaba:	b580      	push	{r7, lr}
 800eabc:	b08c      	sub	sp, #48	@ 0x30
 800eabe:	af00      	add	r7, sp, #0
 800eac0:	6078      	str	r0, [r7, #4]
 800eac2:	6039      	str	r1, [r7, #0]
  int32_t ret = FT5336_OK;
 800eac4:	2300      	movs	r3, #0
 800eac6:	62fb      	str	r3, [r7, #44]	@ 0x2c
  uint8_t  data[30];
  uint32_t i;

  State->TouchDetected = (uint32_t)FT5336_DetectTouch(pObj);
 800eac8:	6878      	ldr	r0, [r7, #4]
 800eaca:	f000 f8d5 	bl	800ec78 <FT5336_DetectTouch>
 800eace:	4603      	mov	r3, r0
 800ead0:	461a      	mov	r2, r3
 800ead2:	683b      	ldr	r3, [r7, #0]
 800ead4:	601a      	str	r2, [r3, #0]

  if(ft5336_read_reg(&pObj->Ctx, FT5336_P1_XH_REG, data, (uint16_t)sizeof(data)) != FT5336_OK)
 800ead6:	687b      	ldr	r3, [r7, #4]
 800ead8:	f103 0018 	add.w	r0, r3, #24
 800eadc:	f107 0208 	add.w	r2, r7, #8
 800eae0:	231e      	movs	r3, #30
 800eae2:	2103      	movs	r1, #3
 800eae4:	f000 f91c 	bl	800ed20 <ft5336_read_reg>
 800eae8:	4603      	mov	r3, r0
 800eaea:	2b00      	cmp	r3, #0
 800eaec:	d003      	beq.n	800eaf6 <FT5336_GetMultiTouchState+0x3c>
  {
    ret = FT5336_ERROR;
 800eaee:	f04f 33ff 	mov.w	r3, #4294967295
 800eaf2:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800eaf4:	e077      	b.n	800ebe6 <FT5336_GetMultiTouchState+0x12c>
  }
  else
  {
    for(i = 0; i < FT5336_MAX_NB_TOUCH; i++)
 800eaf6:	2300      	movs	r3, #0
 800eaf8:	62bb      	str	r3, [r7, #40]	@ 0x28
 800eafa:	e071      	b.n	800ebe0 <FT5336_GetMultiTouchState+0x126>
    {
    /* Send back first ready X position to caller */
    State->TouchX[i] = (((uint32_t)data[i*6U] & FT5336_P1_XH_TP_BIT_MASK) << 8U) | ((uint32_t)data[(i*6U) + 1U] & FT5336_P1_XL_TP_BIT_MASK);
 800eafc:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800eafe:	4613      	mov	r3, r2
 800eb00:	005b      	lsls	r3, r3, #1
 800eb02:	4413      	add	r3, r2
 800eb04:	005b      	lsls	r3, r3, #1
 800eb06:	3330      	adds	r3, #48	@ 0x30
 800eb08:	443b      	add	r3, r7
 800eb0a:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 800eb0e:	021b      	lsls	r3, r3, #8
 800eb10:	f403 6170 	and.w	r1, r3, #3840	@ 0xf00
 800eb14:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800eb16:	4613      	mov	r3, r2
 800eb18:	005b      	lsls	r3, r3, #1
 800eb1a:	4413      	add	r3, r2
 800eb1c:	005b      	lsls	r3, r3, #1
 800eb1e:	3301      	adds	r3, #1
 800eb20:	3330      	adds	r3, #48	@ 0x30
 800eb22:	443b      	add	r3, r7
 800eb24:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 800eb28:	ea41 0203 	orr.w	r2, r1, r3
 800eb2c:	6839      	ldr	r1, [r7, #0]
 800eb2e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800eb30:	009b      	lsls	r3, r3, #2
 800eb32:	440b      	add	r3, r1
 800eb34:	605a      	str	r2, [r3, #4]
    /* Send back first ready Y position to caller */
    State->TouchY[i] = (((uint32_t)data[(i*6U) + 2U] & FT5336_P1_YH_TP_BIT_MASK) << 8U) | ((uint32_t)data[(i*6U) + 3U] & FT5336_P1_YL_TP_BIT_MASK);
 800eb36:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800eb38:	4613      	mov	r3, r2
 800eb3a:	005b      	lsls	r3, r3, #1
 800eb3c:	4413      	add	r3, r2
 800eb3e:	005b      	lsls	r3, r3, #1
 800eb40:	3302      	adds	r3, #2
 800eb42:	3330      	adds	r3, #48	@ 0x30
 800eb44:	443b      	add	r3, r7
 800eb46:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 800eb4a:	021b      	lsls	r3, r3, #8
 800eb4c:	f403 6170 	and.w	r1, r3, #3840	@ 0xf00
 800eb50:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800eb52:	4613      	mov	r3, r2
 800eb54:	005b      	lsls	r3, r3, #1
 800eb56:	4413      	add	r3, r2
 800eb58:	005b      	lsls	r3, r3, #1
 800eb5a:	3303      	adds	r3, #3
 800eb5c:	3330      	adds	r3, #48	@ 0x30
 800eb5e:	443b      	add	r3, r7
 800eb60:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 800eb64:	4319      	orrs	r1, r3
 800eb66:	683b      	ldr	r3, [r7, #0]
 800eb68:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800eb6a:	3206      	adds	r2, #6
 800eb6c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    /* Send back first ready Event to caller */
    State->TouchEvent[i] = (((uint32_t)data[i*6U] & FT5336_P1_XH_EF_BIT_MASK) >> FT5336_P1_XH_EF_BIT_POSITION);
 800eb70:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800eb72:	4613      	mov	r3, r2
 800eb74:	005b      	lsls	r3, r3, #1
 800eb76:	4413      	add	r3, r2
 800eb78:	005b      	lsls	r3, r3, #1
 800eb7a:	3330      	adds	r3, #48	@ 0x30
 800eb7c:	443b      	add	r3, r7
 800eb7e:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 800eb82:	099b      	lsrs	r3, r3, #6
 800eb84:	b2db      	uxtb	r3, r3
 800eb86:	4619      	mov	r1, r3
 800eb88:	683b      	ldr	r3, [r7, #0]
 800eb8a:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800eb8c:	3210      	adds	r2, #16
 800eb8e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    /* Send back first ready Weight to caller */
    State->TouchWeight[i] = ((uint32_t)data[(i*6U) + 4U] & FT5336_P1_WEIGHT_BIT_MASK);
 800eb92:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800eb94:	4613      	mov	r3, r2
 800eb96:	005b      	lsls	r3, r3, #1
 800eb98:	4413      	add	r3, r2
 800eb9a:	005b      	lsls	r3, r3, #1
 800eb9c:	3304      	adds	r3, #4
 800eb9e:	3330      	adds	r3, #48	@ 0x30
 800eba0:	443b      	add	r3, r7
 800eba2:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 800eba6:	4619      	mov	r1, r3
 800eba8:	683a      	ldr	r2, [r7, #0]
 800ebaa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ebac:	330a      	adds	r3, #10
 800ebae:	009b      	lsls	r3, r3, #2
 800ebb0:	4413      	add	r3, r2
 800ebb2:	6059      	str	r1, [r3, #4]
    /* Send back first ready Area to caller */
    State->TouchArea[i] = ((uint32_t)data[(i*6U) + 5U] & FT5336_P1_MISC_BIT_MASK) >> FT5336_P1_MISC_BIT_POSITION;
 800ebb4:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800ebb6:	4613      	mov	r3, r2
 800ebb8:	005b      	lsls	r3, r3, #1
 800ebba:	4413      	add	r3, r2
 800ebbc:	005b      	lsls	r3, r3, #1
 800ebbe:	3305      	adds	r3, #5
 800ebc0:	3330      	adds	r3, #48	@ 0x30
 800ebc2:	443b      	add	r3, r7
 800ebc4:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 800ebc8:	091b      	lsrs	r3, r3, #4
 800ebca:	b2db      	uxtb	r3, r3
 800ebcc:	4619      	mov	r1, r3
 800ebce:	683a      	ldr	r2, [r7, #0]
 800ebd0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ebd2:	3314      	adds	r3, #20
 800ebd4:	009b      	lsls	r3, r3, #2
 800ebd6:	4413      	add	r3, r2
 800ebd8:	6059      	str	r1, [r3, #4]
    for(i = 0; i < FT5336_MAX_NB_TOUCH; i++)
 800ebda:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ebdc:	3301      	adds	r3, #1
 800ebde:	62bb      	str	r3, [r7, #40]	@ 0x28
 800ebe0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ebe2:	2b04      	cmp	r3, #4
 800ebe4:	d98a      	bls.n	800eafc <FT5336_GetMultiTouchState+0x42>
    }
  }

  return ret;
 800ebe6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
}
 800ebe8:	4618      	mov	r0, r3
 800ebea:	3730      	adds	r7, #48	@ 0x30
 800ebec:	46bd      	mov	sp, r7
 800ebee:	bd80      	pop	{r7, pc}

0800ebf0 <FT5336_GetGesture>:
  * @param  pObj Component object pointer
  * @param  GestureId: gesture ID
  * @retval Gesture ID.
  */
int32_t FT5336_GetGesture(FT5336_Object_t *pObj, uint8_t *GestureId)
{
 800ebf0:	b580      	push	{r7, lr}
 800ebf2:	b082      	sub	sp, #8
 800ebf4:	af00      	add	r7, sp, #0
 800ebf6:	6078      	str	r0, [r7, #4]
 800ebf8:	6039      	str	r1, [r7, #0]
  return ft5336_gest_id(&pObj->Ctx, GestureId);
 800ebfa:	687b      	ldr	r3, [r7, #4]
 800ebfc:	3318      	adds	r3, #24
 800ebfe:	6839      	ldr	r1, [r7, #0]
 800ec00:	4618      	mov	r0, r3
 800ec02:	f000 f8bb 	bl	800ed7c <ft5336_gest_id>
 800ec06:	4603      	mov	r3, r0
}
 800ec08:	4618      	mov	r0, r3
 800ec0a:	3708      	adds	r7, #8
 800ec0c:	46bd      	mov	sp, r7
 800ec0e:	bd80      	pop	{r7, pc}

0800ec10 <FT5336_EnableIT>:
  *         connected to MCU as EXTI.
  * @param  pObj Component object pointer
  * @retval None
  */
int32_t FT5336_EnableIT(FT5336_Object_t *pObj)
{
 800ec10:	b580      	push	{r7, lr}
 800ec12:	b082      	sub	sp, #8
 800ec14:	af00      	add	r7, sp, #0
 800ec16:	6078      	str	r0, [r7, #4]
  return ft5336_g_mode(&pObj->Ctx, FT5336_G_MODE_INTERRUPT_TRIGGER);
 800ec18:	687b      	ldr	r3, [r7, #4]
 800ec1a:	3318      	adds	r3, #24
 800ec1c:	2101      	movs	r1, #1
 800ec1e:	4618      	mov	r0, r3
 800ec20:	f000 f941 	bl	800eea6 <ft5336_g_mode>
 800ec24:	4603      	mov	r3, r0
}
 800ec26:	4618      	mov	r0, r3
 800ec28:	3708      	adds	r7, #8
 800ec2a:	46bd      	mov	sp, r7
 800ec2c:	bd80      	pop	{r7, pc}

0800ec2e <FT5336_DisableIT>:
  *         connected to MCU as EXTI.
  * @param  pObj Component object pointer
  * @retval None
  */
int32_t FT5336_DisableIT(FT5336_Object_t *pObj)
{
 800ec2e:	b580      	push	{r7, lr}
 800ec30:	b082      	sub	sp, #8
 800ec32:	af00      	add	r7, sp, #0
 800ec34:	6078      	str	r0, [r7, #4]
  return ft5336_g_mode(&pObj->Ctx, FT5336_G_MODE_INTERRUPT_POLLING);
 800ec36:	687b      	ldr	r3, [r7, #4]
 800ec38:	3318      	adds	r3, #24
 800ec3a:	2100      	movs	r1, #0
 800ec3c:	4618      	mov	r0, r3
 800ec3e:	f000 f932 	bl	800eea6 <ft5336_g_mode>
 800ec42:	4603      	mov	r3, r0
}
 800ec44:	4618      	mov	r0, r3
 800ec46:	3708      	adds	r7, #8
 800ec48:	46bd      	mov	sp, r7
 800ec4a:	bd80      	pop	{r7, pc}

0800ec4c <FT5336_ITStatus>:
  *         @note : This feature is not applicable to FT5336.
  * @param  pObj Component object pointer
  * @retval TS interrupts status : always return 0 here
  */
int32_t FT5336_ITStatus(FT5336_Object_t *pObj)
{
 800ec4c:	b480      	push	{r7}
 800ec4e:	b083      	sub	sp, #12
 800ec50:	af00      	add	r7, sp, #0
 800ec52:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  (void)(pObj);

  /* Always return FT5336_OK as feature not applicable to FT5336 */
  return FT5336_OK;
 800ec54:	2300      	movs	r3, #0
}
 800ec56:	4618      	mov	r0, r3
 800ec58:	370c      	adds	r7, #12
 800ec5a:	46bd      	mov	sp, r7
 800ec5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ec60:	4770      	bx	lr

0800ec62 <FT5336_ClearIT>:
  *         @note : This feature is not applicable to FT5336.
  * @param  pObj Component object pointer
  * @retval None
  */
int32_t FT5336_ClearIT(FT5336_Object_t *pObj)
{
 800ec62:	b480      	push	{r7}
 800ec64:	b083      	sub	sp, #12
 800ec66:	af00      	add	r7, sp, #0
 800ec68:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  (void)(pObj);

  /* Always return FT5336_OK as feature not applicable to FT5336 */
  return FT5336_OK;
 800ec6a:	2300      	movs	r3, #0
}
 800ec6c:	4618      	mov	r0, r3
 800ec6e:	370c      	adds	r7, #12
 800ec70:	46bd      	mov	sp, r7
 800ec72:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ec76:	4770      	bx	lr

0800ec78 <FT5336_DetectTouch>:
  * @param  pObj Component object pointer
  * @retval Number of active touches detected (can be 0, 1 or 2) or FT5336_ERROR
  *         in case of error
  */
static int32_t FT5336_DetectTouch(FT5336_Object_t *pObj)
{
 800ec78:	b580      	push	{r7, lr}
 800ec7a:	b084      	sub	sp, #16
 800ec7c:	af00      	add	r7, sp, #0
 800ec7e:	6078      	str	r0, [r7, #4]
  int32_t ret;
  uint8_t nb_touch;

  /* Read register FT5336_TD_STAT_REG to check number of touches detection */
  if(ft5336_td_status(&pObj->Ctx, &nb_touch) != FT5336_OK)
 800ec80:	687b      	ldr	r3, [r7, #4]
 800ec82:	3318      	adds	r3, #24
 800ec84:	f107 020b 	add.w	r2, r7, #11
 800ec88:	4611      	mov	r1, r2
 800ec8a:	4618      	mov	r0, r3
 800ec8c:	f000 f886 	bl	800ed9c <ft5336_td_status>
 800ec90:	4603      	mov	r3, r0
 800ec92:	2b00      	cmp	r3, #0
 800ec94:	d003      	beq.n	800ec9e <FT5336_DetectTouch+0x26>
  {
    ret = FT5336_ERROR;
 800ec96:	f04f 33ff 	mov.w	r3, #4294967295
 800ec9a:	60fb      	str	r3, [r7, #12]
 800ec9c:	e007      	b.n	800ecae <FT5336_DetectTouch+0x36>
  }
  else
  {
    if(nb_touch > FT5336_MAX_NB_TOUCH)
 800ec9e:	7afb      	ldrb	r3, [r7, #11]
 800eca0:	2b05      	cmp	r3, #5
 800eca2:	d902      	bls.n	800ecaa <FT5336_DetectTouch+0x32>
    {
      /* If invalid number of touch detected, set it to zero */
      ret = 0;
 800eca4:	2300      	movs	r3, #0
 800eca6:	60fb      	str	r3, [r7, #12]
 800eca8:	e001      	b.n	800ecae <FT5336_DetectTouch+0x36>
    }
    else
    {
      ret = (int32_t)nb_touch;
 800ecaa:	7afb      	ldrb	r3, [r7, #11]
 800ecac:	60fb      	str	r3, [r7, #12]
    }
  }
  return ret;
 800ecae:	68fb      	ldr	r3, [r7, #12]
}
 800ecb0:	4618      	mov	r0, r3
 800ecb2:	3710      	adds	r7, #16
 800ecb4:	46bd      	mov	sp, r7
 800ecb6:	bd80      	pop	{r7, pc}

0800ecb8 <ReadRegWrap>:
  * @param  pData: The target register value to be written
  * @param  Length: buffer size to be written
  * @retval error status
  */
static int32_t ReadRegWrap(void *handle, uint8_t Reg, uint8_t* pData, uint16_t Length)
{
 800ecb8:	b590      	push	{r4, r7, lr}
 800ecba:	b087      	sub	sp, #28
 800ecbc:	af00      	add	r7, sp, #0
 800ecbe:	60f8      	str	r0, [r7, #12]
 800ecc0:	607a      	str	r2, [r7, #4]
 800ecc2:	461a      	mov	r2, r3
 800ecc4:	460b      	mov	r3, r1
 800ecc6:	72fb      	strb	r3, [r7, #11]
 800ecc8:	4613      	mov	r3, r2
 800ecca:	813b      	strh	r3, [r7, #8]
  FT5336_Object_t *pObj = (FT5336_Object_t *)handle;
 800eccc:	68fb      	ldr	r3, [r7, #12]
 800ecce:	617b      	str	r3, [r7, #20]

  return pObj->IO.ReadReg(pObj->IO.Address, Reg, pData, Length);
 800ecd0:	697b      	ldr	r3, [r7, #20]
 800ecd2:	691c      	ldr	r4, [r3, #16]
 800ecd4:	697b      	ldr	r3, [r7, #20]
 800ecd6:	8918      	ldrh	r0, [r3, #8]
 800ecd8:	7afb      	ldrb	r3, [r7, #11]
 800ecda:	b299      	uxth	r1, r3
 800ecdc:	893b      	ldrh	r3, [r7, #8]
 800ecde:	687a      	ldr	r2, [r7, #4]
 800ece0:	47a0      	blx	r4
 800ece2:	4603      	mov	r3, r0
}
 800ece4:	4618      	mov	r0, r3
 800ece6:	371c      	adds	r7, #28
 800ece8:	46bd      	mov	sp, r7
 800ecea:	bd90      	pop	{r4, r7, pc}

0800ecec <WriteRegWrap>:
  * @param  pData: The target register value to be written
  * @param  Length: buffer size to be written
  * @retval error status
  */
static int32_t WriteRegWrap(void *handle, uint8_t Reg, uint8_t* pData, uint16_t Length)
{
 800ecec:	b590      	push	{r4, r7, lr}
 800ecee:	b087      	sub	sp, #28
 800ecf0:	af00      	add	r7, sp, #0
 800ecf2:	60f8      	str	r0, [r7, #12]
 800ecf4:	607a      	str	r2, [r7, #4]
 800ecf6:	461a      	mov	r2, r3
 800ecf8:	460b      	mov	r3, r1
 800ecfa:	72fb      	strb	r3, [r7, #11]
 800ecfc:	4613      	mov	r3, r2
 800ecfe:	813b      	strh	r3, [r7, #8]
  FT5336_Object_t *pObj = (FT5336_Object_t *)handle;
 800ed00:	68fb      	ldr	r3, [r7, #12]
 800ed02:	617b      	str	r3, [r7, #20]

  return pObj->IO.WriteReg(pObj->IO.Address, Reg, pData, Length);
 800ed04:	697b      	ldr	r3, [r7, #20]
 800ed06:	68dc      	ldr	r4, [r3, #12]
 800ed08:	697b      	ldr	r3, [r7, #20]
 800ed0a:	8918      	ldrh	r0, [r3, #8]
 800ed0c:	7afb      	ldrb	r3, [r7, #11]
 800ed0e:	b299      	uxth	r1, r3
 800ed10:	893b      	ldrh	r3, [r7, #8]
 800ed12:	687a      	ldr	r2, [r7, #4]
 800ed14:	47a0      	blx	r4
 800ed16:	4603      	mov	r3, r0
}
 800ed18:	4618      	mov	r0, r3
 800ed1a:	371c      	adds	r7, #28
 800ed1c:	46bd      	mov	sp, r7
 800ed1e:	bd90      	pop	{r4, r7, pc}

0800ed20 <ft5336_read_reg>:
  * @param  pdata pointer to data to be read
  * @param  length Length of data to read   
  * @retval Component status
  */
int32_t ft5336_read_reg(ft5336_ctx_t *ctx, uint8_t reg, uint8_t* pdata, uint16_t length)
{
 800ed20:	b590      	push	{r4, r7, lr}
 800ed22:	b085      	sub	sp, #20
 800ed24:	af00      	add	r7, sp, #0
 800ed26:	60f8      	str	r0, [r7, #12]
 800ed28:	607a      	str	r2, [r7, #4]
 800ed2a:	461a      	mov	r2, r3
 800ed2c:	460b      	mov	r3, r1
 800ed2e:	72fb      	strb	r3, [r7, #11]
 800ed30:	4613      	mov	r3, r2
 800ed32:	813b      	strh	r3, [r7, #8]
  return ctx->ReadReg(ctx->handle, reg, pdata, length);
 800ed34:	68fb      	ldr	r3, [r7, #12]
 800ed36:	685c      	ldr	r4, [r3, #4]
 800ed38:	68fb      	ldr	r3, [r7, #12]
 800ed3a:	6898      	ldr	r0, [r3, #8]
 800ed3c:	893b      	ldrh	r3, [r7, #8]
 800ed3e:	7af9      	ldrb	r1, [r7, #11]
 800ed40:	687a      	ldr	r2, [r7, #4]
 800ed42:	47a0      	blx	r4
 800ed44:	4603      	mov	r3, r0
}
 800ed46:	4618      	mov	r0, r3
 800ed48:	3714      	adds	r7, #20
 800ed4a:	46bd      	mov	sp, r7
 800ed4c:	bd90      	pop	{r4, r7, pc}

0800ed4e <ft5336_write_reg>:
  * @param  pdata pointer to data to be written
  * @param  length Length of data to write   
  * @retval Component status
  */
int32_t ft5336_write_reg(ft5336_ctx_t *ctx, uint8_t reg, uint8_t *pdata, uint16_t length)
{
 800ed4e:	b590      	push	{r4, r7, lr}
 800ed50:	b085      	sub	sp, #20
 800ed52:	af00      	add	r7, sp, #0
 800ed54:	60f8      	str	r0, [r7, #12]
 800ed56:	607a      	str	r2, [r7, #4]
 800ed58:	461a      	mov	r2, r3
 800ed5a:	460b      	mov	r3, r1
 800ed5c:	72fb      	strb	r3, [r7, #11]
 800ed5e:	4613      	mov	r3, r2
 800ed60:	813b      	strh	r3, [r7, #8]
  return ctx->WriteReg(ctx->handle, reg, pdata, length);
 800ed62:	68fb      	ldr	r3, [r7, #12]
 800ed64:	681c      	ldr	r4, [r3, #0]
 800ed66:	68fb      	ldr	r3, [r7, #12]
 800ed68:	6898      	ldr	r0, [r3, #8]
 800ed6a:	893b      	ldrh	r3, [r7, #8]
 800ed6c:	7af9      	ldrb	r1, [r7, #11]
 800ed6e:	687a      	ldr	r2, [r7, #4]
 800ed70:	47a0      	blx	r4
 800ed72:	4603      	mov	r3, r0
}
 800ed74:	4618      	mov	r0, r3
 800ed76:	3714      	adds	r7, #20
 800ed78:	46bd      	mov	sp, r7
 800ed7a:	bd90      	pop	{r4, r7, pc}

0800ed7c <ft5336_gest_id>:
  * @param  ctx Component context 
  * @param  value pointer to the value of FT5336_GEST_ID_REG register
  * @retval Component status
  */
int32_t  ft5336_gest_id(ft5336_ctx_t *ctx, uint8_t *value)
{
 800ed7c:	b580      	push	{r7, lr}
 800ed7e:	b082      	sub	sp, #8
 800ed80:	af00      	add	r7, sp, #0
 800ed82:	6078      	str	r0, [r7, #4]
 800ed84:	6039      	str	r1, [r7, #0]
  return ft5336_read_reg(ctx, FT5336_GEST_ID_REG, (uint8_t *)value, 1);
 800ed86:	2301      	movs	r3, #1
 800ed88:	683a      	ldr	r2, [r7, #0]
 800ed8a:	2101      	movs	r1, #1
 800ed8c:	6878      	ldr	r0, [r7, #4]
 800ed8e:	f7ff ffc7 	bl	800ed20 <ft5336_read_reg>
 800ed92:	4603      	mov	r3, r0
}
 800ed94:	4618      	mov	r0, r3
 800ed96:	3708      	adds	r7, #8
 800ed98:	46bd      	mov	sp, r7
 800ed9a:	bd80      	pop	{r7, pc}

0800ed9c <ft5336_td_status>:
  * @param  ctx Component context 
  * @param  value pointer to the value of Touch Data Status register
  * @retval Component status
  */
int32_t  ft5336_td_status(ft5336_ctx_t *ctx, uint8_t *value)
{
 800ed9c:	b580      	push	{r7, lr}
 800ed9e:	b084      	sub	sp, #16
 800eda0:	af00      	add	r7, sp, #0
 800eda2:	6078      	str	r0, [r7, #4]
 800eda4:	6039      	str	r1, [r7, #0]
  int32_t ret;
  
  ret = ft5336_read_reg(ctx, FT5336_TD_STAT_REG, (uint8_t *)value, 1);
 800eda6:	2301      	movs	r3, #1
 800eda8:	683a      	ldr	r2, [r7, #0]
 800edaa:	2102      	movs	r1, #2
 800edac:	6878      	ldr	r0, [r7, #4]
 800edae:	f7ff ffb7 	bl	800ed20 <ft5336_read_reg>
 800edb2:	60f8      	str	r0, [r7, #12]
  
  if(ret == 0)
 800edb4:	68fb      	ldr	r3, [r7, #12]
 800edb6:	2b00      	cmp	r3, #0
 800edb8:	d10a      	bne.n	800edd0 <ft5336_td_status+0x34>
  {
    *value &= FT5336_TD_STATUS_BIT_MASK; 
 800edba:	683b      	ldr	r3, [r7, #0]
 800edbc:	781b      	ldrb	r3, [r3, #0]
 800edbe:	f003 030f 	and.w	r3, r3, #15
 800edc2:	b2da      	uxtb	r2, r3
 800edc4:	683b      	ldr	r3, [r7, #0]
 800edc6:	701a      	strb	r2, [r3, #0]
    *value = *value >> FT5336_TD_STATUS_BIT_POSITION; 
 800edc8:	683b      	ldr	r3, [r7, #0]
 800edca:	781a      	ldrb	r2, [r3, #0]
 800edcc:	683b      	ldr	r3, [r7, #0]
 800edce:	701a      	strb	r2, [r3, #0]
  }
  
  return ret;
 800edd0:	68fb      	ldr	r3, [r7, #12]
}
 800edd2:	4618      	mov	r0, r3
 800edd4:	3710      	adds	r7, #16
 800edd6:	46bd      	mov	sp, r7
 800edd8:	bd80      	pop	{r7, pc}

0800edda <ft5336_radian_value>:
  * @param  ctx Component context 
  * @param  value Value to write to FT5336_RADIAN_VALUE_REG register
  * @retval Component status
  */
int32_t  ft5336_radian_value(ft5336_ctx_t *ctx, uint8_t value)
{
 800edda:	b580      	push	{r7, lr}
 800eddc:	b082      	sub	sp, #8
 800edde:	af00      	add	r7, sp, #0
 800ede0:	6078      	str	r0, [r7, #4]
 800ede2:	460b      	mov	r3, r1
 800ede4:	70fb      	strb	r3, [r7, #3]
  return ft5336_write_reg(ctx, FT5336_RADIAN_VALUE_REG, &value, 1);
 800ede6:	1cfa      	adds	r2, r7, #3
 800ede8:	2301      	movs	r3, #1
 800edea:	2191      	movs	r1, #145	@ 0x91
 800edec:	6878      	ldr	r0, [r7, #4]
 800edee:	f7ff ffae 	bl	800ed4e <ft5336_write_reg>
 800edf2:	4603      	mov	r3, r0
}
 800edf4:	4618      	mov	r0, r3
 800edf6:	3708      	adds	r7, #8
 800edf8:	46bd      	mov	sp, r7
 800edfa:	bd80      	pop	{r7, pc}

0800edfc <ft5336_offset_left_right>:
  * @param  ctx Component context 
  * @param  value Value to write to FT5336_OFFSET_LR_REG register
  * @retval Component status
  */
int32_t  ft5336_offset_left_right(ft5336_ctx_t *ctx, uint8_t value)
{
 800edfc:	b580      	push	{r7, lr}
 800edfe:	b082      	sub	sp, #8
 800ee00:	af00      	add	r7, sp, #0
 800ee02:	6078      	str	r0, [r7, #4]
 800ee04:	460b      	mov	r3, r1
 800ee06:	70fb      	strb	r3, [r7, #3]
  return ft5336_write_reg(ctx, FT5336_OFFSET_LR_REG, &value, 1);
 800ee08:	1cfa      	adds	r2, r7, #3
 800ee0a:	2301      	movs	r3, #1
 800ee0c:	2192      	movs	r1, #146	@ 0x92
 800ee0e:	6878      	ldr	r0, [r7, #4]
 800ee10:	f7ff ff9d 	bl	800ed4e <ft5336_write_reg>
 800ee14:	4603      	mov	r3, r0
}
 800ee16:	4618      	mov	r0, r3
 800ee18:	3708      	adds	r7, #8
 800ee1a:	46bd      	mov	sp, r7
 800ee1c:	bd80      	pop	{r7, pc}

0800ee1e <ft5336_offset_up_down>:
  * @param  ctx Component context 
  * @param  value Value to write to FT5336_OFFSET_UD_REG register
  * @retval Component status
  */
int32_t  ft5336_offset_up_down(ft5336_ctx_t *ctx, uint8_t value)
{
 800ee1e:	b580      	push	{r7, lr}
 800ee20:	b082      	sub	sp, #8
 800ee22:	af00      	add	r7, sp, #0
 800ee24:	6078      	str	r0, [r7, #4]
 800ee26:	460b      	mov	r3, r1
 800ee28:	70fb      	strb	r3, [r7, #3]
  return ft5336_write_reg(ctx, FT5336_OFFSET_UD_REG, &value, 1);
 800ee2a:	1cfa      	adds	r2, r7, #3
 800ee2c:	2301      	movs	r3, #1
 800ee2e:	2193      	movs	r1, #147	@ 0x93
 800ee30:	6878      	ldr	r0, [r7, #4]
 800ee32:	f7ff ff8c 	bl	800ed4e <ft5336_write_reg>
 800ee36:	4603      	mov	r3, r0
}
 800ee38:	4618      	mov	r0, r3
 800ee3a:	3708      	adds	r7, #8
 800ee3c:	46bd      	mov	sp, r7
 800ee3e:	bd80      	pop	{r7, pc}

0800ee40 <ft5336_disatnce_left_right>:
  * @param  ctx Component context 
  * @param  value Value to write to FT5336_DISTANCE_LR_REG register
  * @retval Component status
  */
int32_t  ft5336_disatnce_left_right(ft5336_ctx_t *ctx, uint8_t value)
{
 800ee40:	b580      	push	{r7, lr}
 800ee42:	b082      	sub	sp, #8
 800ee44:	af00      	add	r7, sp, #0
 800ee46:	6078      	str	r0, [r7, #4]
 800ee48:	460b      	mov	r3, r1
 800ee4a:	70fb      	strb	r3, [r7, #3]
  return ft5336_write_reg(ctx, FT5336_DISTANCE_LR_REG, &value, 1);
 800ee4c:	1cfa      	adds	r2, r7, #3
 800ee4e:	2301      	movs	r3, #1
 800ee50:	2194      	movs	r1, #148	@ 0x94
 800ee52:	6878      	ldr	r0, [r7, #4]
 800ee54:	f7ff ff7b 	bl	800ed4e <ft5336_write_reg>
 800ee58:	4603      	mov	r3, r0
}
 800ee5a:	4618      	mov	r0, r3
 800ee5c:	3708      	adds	r7, #8
 800ee5e:	46bd      	mov	sp, r7
 800ee60:	bd80      	pop	{r7, pc}

0800ee62 <ft5336_distance_up_down>:
  * @param  ctx Component context 
  * @param  value Value to write to FT5336_DISTANCE_UD_REG register
  * @retval Component status
  */
int32_t  ft5336_distance_up_down(ft5336_ctx_t *ctx, uint8_t value)
{
 800ee62:	b580      	push	{r7, lr}
 800ee64:	b082      	sub	sp, #8
 800ee66:	af00      	add	r7, sp, #0
 800ee68:	6078      	str	r0, [r7, #4]
 800ee6a:	460b      	mov	r3, r1
 800ee6c:	70fb      	strb	r3, [r7, #3]
  return ft5336_write_reg(ctx, FT5336_DISTANCE_UD_REG, &value, 1);
 800ee6e:	1cfa      	adds	r2, r7, #3
 800ee70:	2301      	movs	r3, #1
 800ee72:	2195      	movs	r1, #149	@ 0x95
 800ee74:	6878      	ldr	r0, [r7, #4]
 800ee76:	f7ff ff6a 	bl	800ed4e <ft5336_write_reg>
 800ee7a:	4603      	mov	r3, r0
}
 800ee7c:	4618      	mov	r0, r3
 800ee7e:	3708      	adds	r7, #8
 800ee80:	46bd      	mov	sp, r7
 800ee82:	bd80      	pop	{r7, pc}

0800ee84 <ft5336_distance_zoom>:
  * @param  ctx Component context 
  * @param  value Value to write to FT5336_DISTANCE_ZOOM_REG register
  * @retval Component status
  */
int32_t  ft5336_distance_zoom(ft5336_ctx_t *ctx, uint8_t value)
{
 800ee84:	b580      	push	{r7, lr}
 800ee86:	b082      	sub	sp, #8
 800ee88:	af00      	add	r7, sp, #0
 800ee8a:	6078      	str	r0, [r7, #4]
 800ee8c:	460b      	mov	r3, r1
 800ee8e:	70fb      	strb	r3, [r7, #3]
  return ft5336_write_reg(ctx, FT5336_DISTANCE_ZOOM_REG, &value, 1);
 800ee90:	1cfa      	adds	r2, r7, #3
 800ee92:	2301      	movs	r3, #1
 800ee94:	2196      	movs	r1, #150	@ 0x96
 800ee96:	6878      	ldr	r0, [r7, #4]
 800ee98:	f7ff ff59 	bl	800ed4e <ft5336_write_reg>
 800ee9c:	4603      	mov	r3, r0
}
 800ee9e:	4618      	mov	r0, r3
 800eea0:	3708      	adds	r7, #8
 800eea2:	46bd      	mov	sp, r7
 800eea4:	bd80      	pop	{r7, pc}

0800eea6 <ft5336_g_mode>:
  * @param  ctx Component context 
  * @param  value Value to write to FT5336_GMODE_REG register
  * @retval Component status
  */
int32_t  ft5336_g_mode(ft5336_ctx_t *ctx, uint8_t value)
{
 800eea6:	b580      	push	{r7, lr}
 800eea8:	b082      	sub	sp, #8
 800eeaa:	af00      	add	r7, sp, #0
 800eeac:	6078      	str	r0, [r7, #4]
 800eeae:	460b      	mov	r3, r1
 800eeb0:	70fb      	strb	r3, [r7, #3]
  return ft5336_write_reg(ctx, FT5336_GMODE_REG, &value, 1);
 800eeb2:	1cfa      	adds	r2, r7, #3
 800eeb4:	2301      	movs	r3, #1
 800eeb6:	21a4      	movs	r1, #164	@ 0xa4
 800eeb8:	6878      	ldr	r0, [r7, #4]
 800eeba:	f7ff ff48 	bl	800ed4e <ft5336_write_reg>
 800eebe:	4603      	mov	r3, r0
}
 800eec0:	4618      	mov	r0, r3
 800eec2:	3708      	adds	r7, #8
 800eec4:	46bd      	mov	sp, r7
 800eec6:	bd80      	pop	{r7, pc}

0800eec8 <ft5336_chip_id>:
  * @param  ctx Component context 
  * @param  value Pointer to FT5336_CHIP_ID_REG register value
  * @retval Component status
  */
int32_t  ft5336_chip_id(ft5336_ctx_t *ctx, uint8_t *value)
{
 800eec8:	b580      	push	{r7, lr}
 800eeca:	b084      	sub	sp, #16
 800eecc:	af00      	add	r7, sp, #0
 800eece:	6078      	str	r0, [r7, #4]
 800eed0:	6039      	str	r1, [r7, #0]
  int32_t ret;
  
  ret = ft5336_read_reg(ctx, FT5336_CHIP_ID_REG, (uint8_t *)value, 1);
 800eed2:	2301      	movs	r3, #1
 800eed4:	683a      	ldr	r2, [r7, #0]
 800eed6:	21a8      	movs	r1, #168	@ 0xa8
 800eed8:	6878      	ldr	r0, [r7, #4]
 800eeda:	f7ff ff21 	bl	800ed20 <ft5336_read_reg>
 800eede:	60f8      	str	r0, [r7, #12]
  
  if(ret == 0)
 800eee0:	68fb      	ldr	r3, [r7, #12]
 800eee2:	2b00      	cmp	r3, #0
 800eee4:	d107      	bne.n	800eef6 <ft5336_chip_id+0x2e>
  {
    *value &= FT5336_CHIP_ID_BIT_MASK; 
 800eee6:	683b      	ldr	r3, [r7, #0]
 800eee8:	781a      	ldrb	r2, [r3, #0]
 800eeea:	683b      	ldr	r3, [r7, #0]
 800eeec:	701a      	strb	r2, [r3, #0]
    *value = *value >> FT5336_CHIP_ID_BIT_POSITION; 
 800eeee:	683b      	ldr	r3, [r7, #0]
 800eef0:	781a      	ldrb	r2, [r3, #0]
 800eef2:	683b      	ldr	r3, [r7, #0]
 800eef4:	701a      	strb	r2, [r3, #0]
  }
  
  return ret;
 800eef6:	68fb      	ldr	r3, [r7, #12]
}
 800eef8:	4618      	mov	r0, r3
 800eefa:	3710      	adds	r7, #16
 800eefc:	46bd      	mov	sp, r7
 800eefe:	bd80      	pop	{r7, pc}

0800ef00 <MT25TL01G_GetFlashInfo>:
  * @brief  Return the configuration of the QSPI memory.
  * @param  pInfo pointer on the configuration structure
  * @retval QSPI memory status
  */
int32_t MT25TL01G_GetFlashInfo(MT25TL01G_Info_t *pInfo)
{
 800ef00:	b480      	push	{r7}
 800ef02:	b083      	sub	sp, #12
 800ef04:	af00      	add	r7, sp, #0
 800ef06:	6078      	str	r0, [r7, #4]
  pInfo->FlashSize          = MT25TL01G_FLASH_SIZE;
 800ef08:	687b      	ldr	r3, [r7, #4]
 800ef0a:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 800ef0e:	601a      	str	r2, [r3, #0]
  pInfo->EraseSectorSize    = (2 * MT25TL01G_SUBSECTOR_SIZE);
 800ef10:	687b      	ldr	r3, [r7, #4]
 800ef12:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 800ef16:	605a      	str	r2, [r3, #4]
  pInfo->ProgPageSize       = MT25TL01G_PAGE_SIZE;
 800ef18:	687b      	ldr	r3, [r7, #4]
 800ef1a:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800ef1e:	60da      	str	r2, [r3, #12]
  pInfo->EraseSectorsNumber = (MT25TL01G_FLASH_SIZE/pInfo->EraseSectorSize);
 800ef20:	687b      	ldr	r3, [r7, #4]
 800ef22:	685b      	ldr	r3, [r3, #4]
 800ef24:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 800ef28:	fbb2 f2f3 	udiv	r2, r2, r3
 800ef2c:	687b      	ldr	r3, [r7, #4]
 800ef2e:	609a      	str	r2, [r3, #8]
  pInfo->ProgPagesNumber    = (MT25TL01G_FLASH_SIZE/pInfo->ProgPageSize);
 800ef30:	687b      	ldr	r3, [r7, #4]
 800ef32:	68db      	ldr	r3, [r3, #12]
 800ef34:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 800ef38:	fbb2 f2f3 	udiv	r2, r2, r3
 800ef3c:	687b      	ldr	r3, [r7, #4]
 800ef3e:	611a      	str	r2, [r3, #16]
  return MT25TL01G_OK;
 800ef40:	2300      	movs	r3, #0
}
 800ef42:	4618      	mov	r0, r3
 800ef44:	370c      	adds	r7, #12
 800ef46:	46bd      	mov	sp, r7
 800ef48:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ef4c:	4770      	bx	lr

0800ef4e <MT25TL01G_Enter4BytesAddressMode>:
  * @param  Ctx Component object pointer
  * @param  Mode Interface mode
  * @retval QSPI memory status
  */
int32_t MT25TL01G_Enter4BytesAddressMode(QSPI_HandleTypeDef *Ctx, MT25TL01G_Interface_t Mode)
{
 800ef4e:	b580      	push	{r7, lr}
 800ef50:	b090      	sub	sp, #64	@ 0x40
 800ef52:	af00      	add	r7, sp, #0
 800ef54:	6078      	str	r0, [r7, #4]
 800ef56:	460b      	mov	r3, r1
 800ef58:	70fb      	strb	r3, [r7, #3]
  QSPI_CommandTypeDef s_command;

  /* Initialize the command */
  s_command.InstructionMode   = (Mode == MT25TL01G_QPI_MODE) ? QSPI_INSTRUCTION_4_LINES : QSPI_INSTRUCTION_1_LINE;
 800ef5a:	78fb      	ldrb	r3, [r7, #3]
 800ef5c:	2b03      	cmp	r3, #3
 800ef5e:	d102      	bne.n	800ef66 <MT25TL01G_Enter4BytesAddressMode+0x18>
 800ef60:	f44f 7340 	mov.w	r3, #768	@ 0x300
 800ef64:	e001      	b.n	800ef6a <MT25TL01G_Enter4BytesAddressMode+0x1c>
 800ef66:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800ef6a:	623b      	str	r3, [r7, #32]
  s_command.Instruction       = MT25TL01G_ENTER_4_BYTE_ADDR_MODE_CMD;
 800ef6c:	23b7      	movs	r3, #183	@ 0xb7
 800ef6e:	60bb      	str	r3, [r7, #8]
  s_command.AddressMode       = QSPI_ADDRESS_NONE;
 800ef70:	2300      	movs	r3, #0
 800ef72:	627b      	str	r3, [r7, #36]	@ 0x24
  s_command.AlternateByteMode = QSPI_ALTERNATE_BYTES_NONE;
 800ef74:	2300      	movs	r3, #0
 800ef76:	62bb      	str	r3, [r7, #40]	@ 0x28
  s_command.DataMode          = QSPI_DATA_NONE;
 800ef78:	2300      	movs	r3, #0
 800ef7a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  s_command.DummyCycles       = 0;
 800ef7c:	2300      	movs	r3, #0
 800ef7e:	61fb      	str	r3, [r7, #28]
  s_command.DdrMode           = QSPI_DDR_MODE_DISABLE;
 800ef80:	2300      	movs	r3, #0
 800ef82:	637b      	str	r3, [r7, #52]	@ 0x34
  s_command.DdrHoldHalfCycle  = QSPI_DDR_HHC_ANALOG_DELAY;
 800ef84:	2300      	movs	r3, #0
 800ef86:	63bb      	str	r3, [r7, #56]	@ 0x38
  s_command.SIOOMode          = QSPI_SIOO_INST_EVERY_CMD;
 800ef88:	2300      	movs	r3, #0
 800ef8a:	63fb      	str	r3, [r7, #60]	@ 0x3c

  /*write enable */
  if( MT25TL01G_WriteEnable(Ctx,Mode)!=MT25TL01G_OK)
 800ef8c:	78fb      	ldrb	r3, [r7, #3]
 800ef8e:	4619      	mov	r1, r3
 800ef90:	6878      	ldr	r0, [r7, #4]
 800ef92:	f000 f860 	bl	800f056 <MT25TL01G_WriteEnable>
 800ef96:	4603      	mov	r3, r0
 800ef98:	2b00      	cmp	r3, #0
 800ef9a:	d002      	beq.n	800efa2 <MT25TL01G_Enter4BytesAddressMode+0x54>
  {
    return MT25TL01G_ERROR_COMMAND;
 800ef9c:	f06f 0301 	mvn.w	r3, #1
 800efa0:	e019      	b.n	800efd6 <MT25TL01G_Enter4BytesAddressMode+0x88>
  }
  /* Send the command */
  if (HAL_QSPI_Command(Ctx, &s_command, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 800efa2:	f107 0308 	add.w	r3, r7, #8
 800efa6:	f241 3288 	movw	r2, #5000	@ 0x1388
 800efaa:	4619      	mov	r1, r3
 800efac:	6878      	ldr	r0, [r7, #4]
 800efae:	f004 fd45 	bl	8013a3c <HAL_QSPI_Command>
 800efb2:	4603      	mov	r3, r0
 800efb4:	2b00      	cmp	r3, #0
 800efb6:	d002      	beq.n	800efbe <MT25TL01G_Enter4BytesAddressMode+0x70>
  {
    return MT25TL01G_ERROR_COMMAND;
 800efb8:	f06f 0301 	mvn.w	r3, #1
 800efbc:	e00b      	b.n	800efd6 <MT25TL01G_Enter4BytesAddressMode+0x88>
  }

  /* Configure automatic polling mode to wait the memory is ready */
  else if(MT25TL01G_AutoPollingMemReady(Ctx,Mode)!=MT25TL01G_OK)
 800efbe:	78fb      	ldrb	r3, [r7, #3]
 800efc0:	4619      	mov	r1, r3
 800efc2:	6878      	ldr	r0, [r7, #4]
 800efc4:	f000 f80b 	bl	800efde <MT25TL01G_AutoPollingMemReady>
 800efc8:	4603      	mov	r3, r0
 800efca:	2b00      	cmp	r3, #0
 800efcc:	d002      	beq.n	800efd4 <MT25TL01G_Enter4BytesAddressMode+0x86>
  {
    return MT25TL01G_ERROR_COMMAND;
 800efce:	f06f 0301 	mvn.w	r3, #1
 800efd2:	e000      	b.n	800efd6 <MT25TL01G_Enter4BytesAddressMode+0x88>
  }

  return MT25TL01G_OK;
 800efd4:	2300      	movs	r3, #0
}
 800efd6:	4618      	mov	r0, r3
 800efd8:	3740      	adds	r7, #64	@ 0x40
 800efda:	46bd      	mov	sp, r7
 800efdc:	bd80      	pop	{r7, pc}

0800efde <MT25TL01G_AutoPollingMemReady>:
  * @param  Ctx Component object pointer
  * @param  Mode Interface mode
  * @retval QSPI memory status
  */
int32_t MT25TL01G_AutoPollingMemReady(QSPI_HandleTypeDef *Ctx, MT25TL01G_Interface_t Mode)
{
 800efde:	b580      	push	{r7, lr}
 800efe0:	b096      	sub	sp, #88	@ 0x58
 800efe2:	af00      	add	r7, sp, #0
 800efe4:	6078      	str	r0, [r7, #4]
 800efe6:	460b      	mov	r3, r1
 800efe8:	70fb      	strb	r3, [r7, #3]

  QSPI_CommandTypeDef     s_command;
  QSPI_AutoPollingTypeDef s_config;

  /* Configure automatic polling mode to wait for memory ready */
  s_command.InstructionMode   = QSPI_INSTRUCTION_4_LINES;
 800efea:	f44f 7340 	mov.w	r3, #768	@ 0x300
 800efee:	63bb      	str	r3, [r7, #56]	@ 0x38
  s_command.Instruction       = MT25TL01G_READ_STATUS_REG_CMD;
 800eff0:	2305      	movs	r3, #5
 800eff2:	623b      	str	r3, [r7, #32]
  s_command.AddressMode       = QSPI_ADDRESS_NONE;
 800eff4:	2300      	movs	r3, #0
 800eff6:	63fb      	str	r3, [r7, #60]	@ 0x3c
  s_command.AlternateByteMode = QSPI_ALTERNATE_BYTES_NONE;
 800eff8:	2300      	movs	r3, #0
 800effa:	643b      	str	r3, [r7, #64]	@ 0x40
  s_command.DataMode          = QSPI_DATA_4_LINES;
 800effc:	f04f 7340 	mov.w	r3, #50331648	@ 0x3000000
 800f000:	647b      	str	r3, [r7, #68]	@ 0x44
  s_command.DummyCycles       = 2;
 800f002:	2302      	movs	r3, #2
 800f004:	637b      	str	r3, [r7, #52]	@ 0x34
  s_command.DdrMode           = QSPI_DDR_MODE_DISABLE;
 800f006:	2300      	movs	r3, #0
 800f008:	64fb      	str	r3, [r7, #76]	@ 0x4c
  s_command.DdrHoldHalfCycle  = QSPI_DDR_HHC_ANALOG_DELAY;
 800f00a:	2300      	movs	r3, #0
 800f00c:	653b      	str	r3, [r7, #80]	@ 0x50
  s_command.SIOOMode          = QSPI_SIOO_INST_EVERY_CMD;
 800f00e:	2300      	movs	r3, #0
 800f010:	657b      	str	r3, [r7, #84]	@ 0x54

  s_config.Match           = 0;
 800f012:	2300      	movs	r3, #0
 800f014:	60bb      	str	r3, [r7, #8]
  s_config.MatchMode       = QSPI_MATCH_MODE_AND;
 800f016:	2300      	movs	r3, #0
 800f018:	61bb      	str	r3, [r7, #24]
  s_config.Interval        = 0x10;
 800f01a:	2310      	movs	r3, #16
 800f01c:	613b      	str	r3, [r7, #16]
  s_config.AutomaticStop   = QSPI_AUTOMATIC_STOP_ENABLE;
 800f01e:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 800f022:	61fb      	str	r3, [r7, #28]
  s_config.Mask            = MT25TL01G_SR_WIP | (MT25TL01G_SR_WIP <<8);
 800f024:	f240 1301 	movw	r3, #257	@ 0x101
 800f028:	60fb      	str	r3, [r7, #12]
  s_config.StatusBytesSize = 2;
 800f02a:	2302      	movs	r3, #2
 800f02c:	617b      	str	r3, [r7, #20]

  if (HAL_QSPI_AutoPolling(Ctx, &s_command, &s_config, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 800f02e:	f107 0208 	add.w	r2, r7, #8
 800f032:	f107 0120 	add.w	r1, r7, #32
 800f036:	f241 3388 	movw	r3, #5000	@ 0x1388
 800f03a:	6878      	ldr	r0, [r7, #4]
 800f03c:	f004 fe8b 	bl	8013d56 <HAL_QSPI_AutoPolling>
 800f040:	4603      	mov	r3, r0
 800f042:	2b00      	cmp	r3, #0
 800f044:	d002      	beq.n	800f04c <MT25TL01G_AutoPollingMemReady+0x6e>
  {
    return MT25TL01G_ERROR_AUTOPOLLING;
 800f046:	f06f 0304 	mvn.w	r3, #4
 800f04a:	e000      	b.n	800f04e <MT25TL01G_AutoPollingMemReady+0x70>
  }

  return MT25TL01G_OK;
 800f04c:	2300      	movs	r3, #0

}
 800f04e:	4618      	mov	r0, r3
 800f050:	3758      	adds	r7, #88	@ 0x58
 800f052:	46bd      	mov	sp, r7
 800f054:	bd80      	pop	{r7, pc}

0800f056 <MT25TL01G_WriteEnable>:
  * @param  Mode Interface mode
  * @retval QSPI memory status
  */

int32_t MT25TL01G_WriteEnable(QSPI_HandleTypeDef *Ctx, MT25TL01G_Interface_t Mode)
{
 800f056:	b580      	push	{r7, lr}
 800f058:	b096      	sub	sp, #88	@ 0x58
 800f05a:	af00      	add	r7, sp, #0
 800f05c:	6078      	str	r0, [r7, #4]
 800f05e:	460b      	mov	r3, r1
 800f060:	70fb      	strb	r3, [r7, #3]
  QSPI_CommandTypeDef     s_command;
  QSPI_AutoPollingTypeDef s_config;

  /* Enable write operations */
  s_command.InstructionMode   = (Mode == MT25TL01G_QPI_MODE) ? QSPI_INSTRUCTION_4_LINES : QSPI_INSTRUCTION_1_LINE;
 800f062:	78fb      	ldrb	r3, [r7, #3]
 800f064:	2b03      	cmp	r3, #3
 800f066:	d102      	bne.n	800f06e <MT25TL01G_WriteEnable+0x18>
 800f068:	f44f 7340 	mov.w	r3, #768	@ 0x300
 800f06c:	e001      	b.n	800f072 <MT25TL01G_WriteEnable+0x1c>
 800f06e:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800f072:	63bb      	str	r3, [r7, #56]	@ 0x38

  s_command.Instruction       = MT25TL01G_WRITE_ENABLE_CMD;
 800f074:	2306      	movs	r3, #6
 800f076:	623b      	str	r3, [r7, #32]
  s_command.AddressMode       = QSPI_ADDRESS_NONE;
 800f078:	2300      	movs	r3, #0
 800f07a:	63fb      	str	r3, [r7, #60]	@ 0x3c
  s_command.AlternateByteMode = QSPI_ALTERNATE_BYTES_NONE;
 800f07c:	2300      	movs	r3, #0
 800f07e:	643b      	str	r3, [r7, #64]	@ 0x40
  s_command.DataMode          = QSPI_DATA_NONE;
 800f080:	2300      	movs	r3, #0
 800f082:	647b      	str	r3, [r7, #68]	@ 0x44
  s_command.DummyCycles       = 0;
 800f084:	2300      	movs	r3, #0
 800f086:	637b      	str	r3, [r7, #52]	@ 0x34
  s_command.DdrMode           = QSPI_DDR_MODE_DISABLE;
 800f088:	2300      	movs	r3, #0
 800f08a:	64fb      	str	r3, [r7, #76]	@ 0x4c
  s_command.DdrHoldHalfCycle  = QSPI_DDR_HHC_ANALOG_DELAY;
 800f08c:	2300      	movs	r3, #0
 800f08e:	653b      	str	r3, [r7, #80]	@ 0x50
  s_command.SIOOMode          = QSPI_SIOO_INST_EVERY_CMD;
 800f090:	2300      	movs	r3, #0
 800f092:	657b      	str	r3, [r7, #84]	@ 0x54

  if (HAL_QSPI_Command(Ctx, &s_command, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 800f094:	f107 0320 	add.w	r3, r7, #32
 800f098:	f241 3288 	movw	r2, #5000	@ 0x1388
 800f09c:	4619      	mov	r1, r3
 800f09e:	6878      	ldr	r0, [r7, #4]
 800f0a0:	f004 fccc 	bl	8013a3c <HAL_QSPI_Command>
 800f0a4:	4603      	mov	r3, r0
 800f0a6:	2b00      	cmp	r3, #0
 800f0a8:	d002      	beq.n	800f0b0 <MT25TL01G_WriteEnable+0x5a>
  {
    return MT25TL01G_ERROR_COMMAND;
 800f0aa:	f06f 0301 	mvn.w	r3, #1
 800f0ae:	e029      	b.n	800f104 <MT25TL01G_WriteEnable+0xae>
  }

  /* Configure automatic polling mode to wait for write enabling */
  s_config.Match           = MT25TL01G_SR_WREN | (MT25TL01G_SR_WREN << 8);
 800f0b0:	f240 2302 	movw	r3, #514	@ 0x202
 800f0b4:	60bb      	str	r3, [r7, #8]
  s_config.Mask            = MT25TL01G_SR_WREN | (MT25TL01G_SR_WREN << 8);
 800f0b6:	f240 2302 	movw	r3, #514	@ 0x202
 800f0ba:	60fb      	str	r3, [r7, #12]
  s_config.MatchMode       = QSPI_MATCH_MODE_AND;
 800f0bc:	2300      	movs	r3, #0
 800f0be:	61bb      	str	r3, [r7, #24]
  s_config.StatusBytesSize = 2;
 800f0c0:	2302      	movs	r3, #2
 800f0c2:	617b      	str	r3, [r7, #20]
  s_config.Interval        = 0x10;
 800f0c4:	2310      	movs	r3, #16
 800f0c6:	613b      	str	r3, [r7, #16]
  s_config.AutomaticStop   = QSPI_AUTOMATIC_STOP_ENABLE;
 800f0c8:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 800f0cc:	61fb      	str	r3, [r7, #28]

  s_command.Instruction    = MT25TL01G_READ_STATUS_REG_CMD;
 800f0ce:	2305      	movs	r3, #5
 800f0d0:	623b      	str	r3, [r7, #32]
  s_command.DataMode       = (Mode == MT25TL01G_QPI_MODE) ? QSPI_DATA_4_LINES : QSPI_DATA_1_LINE;
 800f0d2:	78fb      	ldrb	r3, [r7, #3]
 800f0d4:	2b03      	cmp	r3, #3
 800f0d6:	d102      	bne.n	800f0de <MT25TL01G_WriteEnable+0x88>
 800f0d8:	f04f 7340 	mov.w	r3, #50331648	@ 0x3000000
 800f0dc:	e001      	b.n	800f0e2 <MT25TL01G_WriteEnable+0x8c>
 800f0de:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 800f0e2:	647b      	str	r3, [r7, #68]	@ 0x44


  if (HAL_QSPI_AutoPolling(Ctx, &s_command, &s_config, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 800f0e4:	f107 0208 	add.w	r2, r7, #8
 800f0e8:	f107 0120 	add.w	r1, r7, #32
 800f0ec:	f241 3388 	movw	r3, #5000	@ 0x1388
 800f0f0:	6878      	ldr	r0, [r7, #4]
 800f0f2:	f004 fe30 	bl	8013d56 <HAL_QSPI_AutoPolling>
 800f0f6:	4603      	mov	r3, r0
 800f0f8:	2b00      	cmp	r3, #0
 800f0fa:	d002      	beq.n	800f102 <MT25TL01G_WriteEnable+0xac>
  {
    return MT25TL01G_ERROR_AUTOPOLLING;
 800f0fc:	f06f 0304 	mvn.w	r3, #4
 800f100:	e000      	b.n	800f104 <MT25TL01G_WriteEnable+0xae>
  }

  return MT25TL01G_OK;
 800f102:	2300      	movs	r3, #0
}
 800f104:	4618      	mov	r0, r3
 800f106:	3758      	adds	r7, #88	@ 0x58
 800f108:	46bd      	mov	sp, r7
 800f10a:	bd80      	pop	{r7, pc}

0800f10c <MT25TL01G_EnterQPIMode>:
  * @param  Ctx Component object pointer
  * @param  Mode Interface mode
  * @retval QSPI memory status
  */
int32_t MT25TL01G_EnterQPIMode(QSPI_HandleTypeDef *Ctx)
{
 800f10c:	b580      	push	{r7, lr}
 800f10e:	b090      	sub	sp, #64	@ 0x40
 800f110:	af00      	add	r7, sp, #0
 800f112:	6078      	str	r0, [r7, #4]
  QSPI_CommandTypeDef s_command;

  s_command.InstructionMode   = QSPI_INSTRUCTION_1_LINE;
 800f114:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800f118:	623b      	str	r3, [r7, #32]
  s_command.Instruction       = MT25TL01G_ENTER_QUAD_CMD;
 800f11a:	2335      	movs	r3, #53	@ 0x35
 800f11c:	60bb      	str	r3, [r7, #8]
  s_command.AddressMode       = QSPI_ADDRESS_NONE;
 800f11e:	2300      	movs	r3, #0
 800f120:	627b      	str	r3, [r7, #36]	@ 0x24
  s_command.AlternateByteMode = QSPI_ALTERNATE_BYTES_NONE;
 800f122:	2300      	movs	r3, #0
 800f124:	62bb      	str	r3, [r7, #40]	@ 0x28
  s_command.DataMode          = QSPI_DATA_NONE;
 800f126:	2300      	movs	r3, #0
 800f128:	62fb      	str	r3, [r7, #44]	@ 0x2c
  s_command.DummyCycles       = 0;
 800f12a:	2300      	movs	r3, #0
 800f12c:	61fb      	str	r3, [r7, #28]
  s_command.DdrMode           = QSPI_DDR_MODE_DISABLE;
 800f12e:	2300      	movs	r3, #0
 800f130:	637b      	str	r3, [r7, #52]	@ 0x34
  s_command.DdrHoldHalfCycle  = QSPI_DDR_HHC_ANALOG_DELAY;
 800f132:	2300      	movs	r3, #0
 800f134:	63bb      	str	r3, [r7, #56]	@ 0x38
  s_command.SIOOMode          = QSPI_SIOO_INST_EVERY_CMD;
 800f136:	2300      	movs	r3, #0
 800f138:	63fb      	str	r3, [r7, #60]	@ 0x3c

  if (HAL_QSPI_Command(Ctx, &s_command, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 800f13a:	f107 0308 	add.w	r3, r7, #8
 800f13e:	f241 3288 	movw	r2, #5000	@ 0x1388
 800f142:	4619      	mov	r1, r3
 800f144:	6878      	ldr	r0, [r7, #4]
 800f146:	f004 fc79 	bl	8013a3c <HAL_QSPI_Command>
 800f14a:	4603      	mov	r3, r0
 800f14c:	2b00      	cmp	r3, #0
 800f14e:	d002      	beq.n	800f156 <MT25TL01G_EnterQPIMode+0x4a>
  {
    return MT25TL01G_ERROR_COMMAND;
 800f150:	f06f 0301 	mvn.w	r3, #1
 800f154:	e000      	b.n	800f158 <MT25TL01G_EnterQPIMode+0x4c>
  }

  return MT25TL01G_OK;
 800f156:	2300      	movs	r3, #0
}
 800f158:	4618      	mov	r0, r3
 800f15a:	3740      	adds	r7, #64	@ 0x40
 800f15c:	46bd      	mov	sp, r7
 800f15e:	bd80      	pop	{r7, pc}

0800f160 <MT25TL01G_ExitQPIMode>:
  * @param  Ctx Component object pointer
  * @param  Mode Interface mode
  * @retval QSPI memory status
  */
int32_t MT25TL01G_ExitQPIMode(QSPI_HandleTypeDef *Ctx)
{
 800f160:	b580      	push	{r7, lr}
 800f162:	b090      	sub	sp, #64	@ 0x40
 800f164:	af00      	add	r7, sp, #0
 800f166:	6078      	str	r0, [r7, #4]
  QSPI_CommandTypeDef s_command;

  s_command.InstructionMode   = QSPI_INSTRUCTION_1_LINE;
 800f168:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800f16c:	623b      	str	r3, [r7, #32]
  s_command.Instruction       = MT25TL01G_EXIT_QUAD_CMD;
 800f16e:	23f5      	movs	r3, #245	@ 0xf5
 800f170:	60bb      	str	r3, [r7, #8]
  s_command.AddressMode       = QSPI_ADDRESS_NONE;
 800f172:	2300      	movs	r3, #0
 800f174:	627b      	str	r3, [r7, #36]	@ 0x24
  s_command.AlternateByteMode = QSPI_ALTERNATE_BYTES_NONE;
 800f176:	2300      	movs	r3, #0
 800f178:	62bb      	str	r3, [r7, #40]	@ 0x28
  s_command.DataMode          = QSPI_DATA_NONE;
 800f17a:	2300      	movs	r3, #0
 800f17c:	62fb      	str	r3, [r7, #44]	@ 0x2c
  s_command.DummyCycles       = 0;
 800f17e:	2300      	movs	r3, #0
 800f180:	61fb      	str	r3, [r7, #28]
  s_command.DdrMode           = QSPI_DDR_MODE_DISABLE;
 800f182:	2300      	movs	r3, #0
 800f184:	637b      	str	r3, [r7, #52]	@ 0x34
  s_command.DdrHoldHalfCycle  = QSPI_DDR_HHC_ANALOG_DELAY;
 800f186:	2300      	movs	r3, #0
 800f188:	63bb      	str	r3, [r7, #56]	@ 0x38
  s_command.SIOOMode          = QSPI_SIOO_INST_EVERY_CMD;
 800f18a:	2300      	movs	r3, #0
 800f18c:	63fb      	str	r3, [r7, #60]	@ 0x3c

  if (HAL_QSPI_Command(Ctx, &s_command, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 800f18e:	f107 0308 	add.w	r3, r7, #8
 800f192:	f241 3288 	movw	r2, #5000	@ 0x1388
 800f196:	4619      	mov	r1, r3
 800f198:	6878      	ldr	r0, [r7, #4]
 800f19a:	f004 fc4f 	bl	8013a3c <HAL_QSPI_Command>
 800f19e:	4603      	mov	r3, r0
 800f1a0:	2b00      	cmp	r3, #0
 800f1a2:	d002      	beq.n	800f1aa <MT25TL01G_ExitQPIMode+0x4a>
  {
    return MT25TL01G_ERROR_COMMAND;
 800f1a4:	f06f 0301 	mvn.w	r3, #1
 800f1a8:	e000      	b.n	800f1ac <MT25TL01G_ExitQPIMode+0x4c>
  }

  return MT25TL01G_OK;
 800f1aa:	2300      	movs	r3, #0
}
 800f1ac:	4618      	mov	r0, r3
 800f1ae:	3740      	adds	r7, #64	@ 0x40
 800f1b0:	46bd      	mov	sp, r7
 800f1b2:	bd80      	pop	{r7, pc}

0800f1b4 <MT25TL01G_EnableMemoryMappedModeDTR>:
  * @param  Ctx Component object pointer
  * @param  Mode Interface mode
  * @retval QSPI memory status
  */
int32_t MT25TL01G_EnableMemoryMappedModeDTR(QSPI_HandleTypeDef *Ctx, MT25TL01G_Interface_t Mode)
{
 800f1b4:	b580      	push	{r7, lr}
 800f1b6:	b092      	sub	sp, #72	@ 0x48
 800f1b8:	af00      	add	r7, sp, #0
 800f1ba:	6078      	str	r0, [r7, #4]
 800f1bc:	460b      	mov	r3, r1
 800f1be:	70fb      	strb	r3, [r7, #3]
  QSPI_CommandTypeDef      s_command;
  QSPI_MemoryMappedTypeDef s_mem_mapped_cfg;
  switch(Mode)
 800f1c0:	78fb      	ldrb	r3, [r7, #3]
 800f1c2:	2b03      	cmp	r3, #3
 800f1c4:	d83a      	bhi.n	800f23c <MT25TL01G_EnableMemoryMappedModeDTR+0x88>
 800f1c6:	a201      	add	r2, pc, #4	@ (adr r2, 800f1cc <MT25TL01G_EnableMemoryMappedModeDTR+0x18>)
 800f1c8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f1cc:	0800f1dd 	.word	0x0800f1dd
 800f1d0:	0800f1f5 	.word	0x0800f1f5
 800f1d4:	0800f20d 	.word	0x0800f20d
 800f1d8:	0800f225 	.word	0x0800f225
  {
  case MT25TL01G_SPI_MODE:                /* 1-1-1 commands, Power on H/W default setting */
    s_command.InstructionMode   = QSPI_INSTRUCTION_1_LINE;
 800f1dc:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800f1e0:	62bb      	str	r3, [r7, #40]	@ 0x28
    s_command.Instruction       = MT25TL01G_FAST_READ_4_BYTE_DTR_CMD;
 800f1e2:	230e      	movs	r3, #14
 800f1e4:	613b      	str	r3, [r7, #16]
    s_command.AddressMode       = QSPI_ADDRESS_1_LINE;
 800f1e6:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800f1ea:	62fb      	str	r3, [r7, #44]	@ 0x2c
    s_command.DataMode          = QSPI_DATA_1_LINE;
 800f1ec:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 800f1f0:	637b      	str	r3, [r7, #52]	@ 0x34

    break;
 800f1f2:	e023      	b.n	800f23c <MT25TL01G_EnableMemoryMappedModeDTR+0x88>
  case MT25TL01G_SPI_2IO_MODE:           /* 1-1-2 read commands */

    s_command.InstructionMode   = QSPI_INSTRUCTION_1_LINE;
 800f1f4:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800f1f8:	62bb      	str	r3, [r7, #40]	@ 0x28
    s_command.Instruction       = MT25TL01G_DUAL_OUT_FAST_READ_DTR_CMD;
 800f1fa:	233d      	movs	r3, #61	@ 0x3d
 800f1fc:	613b      	str	r3, [r7, #16]
    s_command.AddressMode       = QSPI_ADDRESS_1_LINE;
 800f1fe:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800f202:	62fb      	str	r3, [r7, #44]	@ 0x2c
    s_command.DataMode          = QSPI_DATA_2_LINES;
 800f204:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 800f208:	637b      	str	r3, [r7, #52]	@ 0x34

    break;
 800f20a:	e017      	b.n	800f23c <MT25TL01G_EnableMemoryMappedModeDTR+0x88>
  case MT25TL01G_SPI_4IO_MODE:             /* 1-4-4 read commands */

    s_command.InstructionMode   = QSPI_INSTRUCTION_1_LINE;
 800f20c:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800f210:	62bb      	str	r3, [r7, #40]	@ 0x28
    s_command.Instruction       = MT25TL01G_QUAD_INOUT_FAST_READ_4_BYTE_DTR_CMD;
 800f212:	23ee      	movs	r3, #238	@ 0xee
 800f214:	613b      	str	r3, [r7, #16]
    s_command.AddressMode       = QSPI_ADDRESS_4_LINES;
 800f216:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 800f21a:	62fb      	str	r3, [r7, #44]	@ 0x2c
    s_command.DataMode          = QSPI_DATA_4_LINES;
 800f21c:	f04f 7340 	mov.w	r3, #50331648	@ 0x3000000
 800f220:	637b      	str	r3, [r7, #52]	@ 0x34

    break;
 800f222:	e00b      	b.n	800f23c <MT25TL01G_EnableMemoryMappedModeDTR+0x88>
  case MT25TL01G_QPI_MODE:                 /* 4-4-4 commands */
    s_command.InstructionMode   = QSPI_INSTRUCTION_4_LINES;
 800f224:	f44f 7340 	mov.w	r3, #768	@ 0x300
 800f228:	62bb      	str	r3, [r7, #40]	@ 0x28
    s_command.Instruction       = MT25TL01G_QUAD_INOUT_FAST_READ_DTR_CMD;
 800f22a:	23ed      	movs	r3, #237	@ 0xed
 800f22c:	613b      	str	r3, [r7, #16]
    s_command.AddressMode       = QSPI_ADDRESS_4_LINES;
 800f22e:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 800f232:	62fb      	str	r3, [r7, #44]	@ 0x2c
    s_command.DataMode          = QSPI_DATA_4_LINES;
 800f234:	f04f 7340 	mov.w	r3, #50331648	@ 0x3000000
 800f238:	637b      	str	r3, [r7, #52]	@ 0x34

    break;
 800f23a:	bf00      	nop
  }
  /* Configure the command for the read instruction */
  s_command.AddressSize       = QSPI_ADDRESS_32_BITS;
 800f23c:	f44f 5340 	mov.w	r3, #12288	@ 0x3000
 800f240:	61fb      	str	r3, [r7, #28]
  s_command.AlternateByteMode = QSPI_ALTERNATE_BYTES_NONE;
 800f242:	2300      	movs	r3, #0
 800f244:	633b      	str	r3, [r7, #48]	@ 0x30
  s_command.DummyCycles       = MT25TL01G_DUMMY_CYCLES_READ_QUAD_DTR;
 800f246:	2308      	movs	r3, #8
 800f248:	627b      	str	r3, [r7, #36]	@ 0x24
  s_command.DdrMode           = QSPI_DDR_MODE_ENABLE;
 800f24a:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 800f24e:	63fb      	str	r3, [r7, #60]	@ 0x3c
  s_command.DdrHoldHalfCycle  = QSPI_DDR_HHC_HALF_CLK_DELAY;
 800f250:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 800f254:	643b      	str	r3, [r7, #64]	@ 0x40
  s_command.SIOOMode          = QSPI_SIOO_INST_EVERY_CMD;
 800f256:	2300      	movs	r3, #0
 800f258:	647b      	str	r3, [r7, #68]	@ 0x44

  /* Configure the memory mapped mode */
  s_mem_mapped_cfg.TimeOutActivation = QSPI_TIMEOUT_COUNTER_DISABLE;
 800f25a:	2300      	movs	r3, #0
 800f25c:	60fb      	str	r3, [r7, #12]
  s_mem_mapped_cfg.TimeOutPeriod     = 0;
 800f25e:	2300      	movs	r3, #0
 800f260:	60bb      	str	r3, [r7, #8]

  if (HAL_QSPI_MemoryMapped(Ctx, &s_command, &s_mem_mapped_cfg) != HAL_OK)
 800f262:	f107 0208 	add.w	r2, r7, #8
 800f266:	f107 0310 	add.w	r3, r7, #16
 800f26a:	4619      	mov	r1, r3
 800f26c:	6878      	ldr	r0, [r7, #4]
 800f26e:	f004 fde9 	bl	8013e44 <HAL_QSPI_MemoryMapped>
 800f272:	4603      	mov	r3, r0
 800f274:	2b00      	cmp	r3, #0
 800f276:	d002      	beq.n	800f27e <MT25TL01G_EnableMemoryMappedModeDTR+0xca>
  {
    return MT25TL01G_ERROR_MEMORYMAPPED;
 800f278:	f06f 0305 	mvn.w	r3, #5
 800f27c:	e000      	b.n	800f280 <MT25TL01G_EnableMemoryMappedModeDTR+0xcc>
  }

  return MT25TL01G_OK;
 800f27e:	2300      	movs	r3, #0
}
 800f280:	4618      	mov	r0, r3
 800f282:	3748      	adds	r7, #72	@ 0x48
 800f284:	46bd      	mov	sp, r7
 800f286:	bd80      	pop	{r7, pc}

0800f288 <MT25TL01G_EnableMemoryMappedModeSTR>:
  * @param  Mode Interface mode
  * @retval QSPI memory status
  */

int32_t MT25TL01G_EnableMemoryMappedModeSTR(QSPI_HandleTypeDef *Ctx, MT25TL01G_Interface_t Mode)
{
 800f288:	b580      	push	{r7, lr}
 800f28a:	b092      	sub	sp, #72	@ 0x48
 800f28c:	af00      	add	r7, sp, #0
 800f28e:	6078      	str	r0, [r7, #4]
 800f290:	460b      	mov	r3, r1
 800f292:	70fb      	strb	r3, [r7, #3]
  QSPI_CommandTypeDef      s_command;
  QSPI_MemoryMappedTypeDef s_mem_mapped_cfg;
  switch(Mode)
 800f294:	78fb      	ldrb	r3, [r7, #3]
 800f296:	2b03      	cmp	r3, #3
 800f298:	d83a      	bhi.n	800f310 <MT25TL01G_EnableMemoryMappedModeSTR+0x88>
 800f29a:	a201      	add	r2, pc, #4	@ (adr r2, 800f2a0 <MT25TL01G_EnableMemoryMappedModeSTR+0x18>)
 800f29c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f2a0:	0800f2b1 	.word	0x0800f2b1
 800f2a4:	0800f2c9 	.word	0x0800f2c9
 800f2a8:	0800f2e1 	.word	0x0800f2e1
 800f2ac:	0800f2f9 	.word	0x0800f2f9
  {
  case MT25TL01G_SPI_MODE:           /* 1-1-1 read commands */
    s_command.InstructionMode   = QSPI_INSTRUCTION_1_LINE;
 800f2b0:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800f2b4:	62bb      	str	r3, [r7, #40]	@ 0x28
    s_command.Instruction       = MT25TL01G_FAST_READ_4_BYTE_ADDR_CMD;
 800f2b6:	230c      	movs	r3, #12
 800f2b8:	613b      	str	r3, [r7, #16]
    s_command.AddressMode       = QSPI_ADDRESS_1_LINE;
 800f2ba:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800f2be:	62fb      	str	r3, [r7, #44]	@ 0x2c
    s_command.DataMode          = QSPI_DATA_1_LINE;
 800f2c0:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 800f2c4:	637b      	str	r3, [r7, #52]	@ 0x34


    break;
 800f2c6:	e023      	b.n	800f310 <MT25TL01G_EnableMemoryMappedModeSTR+0x88>
  case MT25TL01G_SPI_2IO_MODE:           /* 1-2-2 read commands */

    s_command.InstructionMode   = QSPI_INSTRUCTION_1_LINE;
 800f2c8:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800f2cc:	62bb      	str	r3, [r7, #40]	@ 0x28
    s_command.Instruction       = MT25TL01G_DUAL_INOUT_FAST_READ_4_BYTE_ADDR_CMD;
 800f2ce:	23bc      	movs	r3, #188	@ 0xbc
 800f2d0:	613b      	str	r3, [r7, #16]
    s_command.AddressMode       = QSPI_ADDRESS_2_LINES;
 800f2d2:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 800f2d6:	62fb      	str	r3, [r7, #44]	@ 0x2c
    s_command.DataMode          = QSPI_DATA_2_LINES;
 800f2d8:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 800f2dc:	637b      	str	r3, [r7, #52]	@ 0x34

    break;
 800f2de:	e017      	b.n	800f310 <MT25TL01G_EnableMemoryMappedModeSTR+0x88>

  case MT25TL01G_SPI_4IO_MODE:             /* 1-4-4 read commands */

    s_command.InstructionMode   = QSPI_INSTRUCTION_1_LINE;
 800f2e0:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800f2e4:	62bb      	str	r3, [r7, #40]	@ 0x28
    s_command.Instruction       = MT25TL01G_QUAD_INOUT_FAST_READ_4_BYTE_ADDR_CMD;
 800f2e6:	23ec      	movs	r3, #236	@ 0xec
 800f2e8:	613b      	str	r3, [r7, #16]
    s_command.AddressMode       = QSPI_ADDRESS_4_LINES;
 800f2ea:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 800f2ee:	62fb      	str	r3, [r7, #44]	@ 0x2c
    s_command.DataMode          = QSPI_DATA_4_LINES;
 800f2f0:	f04f 7340 	mov.w	r3, #50331648	@ 0x3000000
 800f2f4:	637b      	str	r3, [r7, #52]	@ 0x34

    break;
 800f2f6:	e00b      	b.n	800f310 <MT25TL01G_EnableMemoryMappedModeSTR+0x88>

  case MT25TL01G_QPI_MODE:                 /* 4-4-4 commands */
    s_command.InstructionMode   = QSPI_INSTRUCTION_4_LINES;
 800f2f8:	f44f 7340 	mov.w	r3, #768	@ 0x300
 800f2fc:	62bb      	str	r3, [r7, #40]	@ 0x28
    s_command.Instruction       = MT25TL01G_QUAD_INOUT_FAST_READ_CMD;
 800f2fe:	23eb      	movs	r3, #235	@ 0xeb
 800f300:	613b      	str	r3, [r7, #16]
    s_command.AddressMode       = QSPI_ADDRESS_4_LINES;
 800f302:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 800f306:	62fb      	str	r3, [r7, #44]	@ 0x2c
    s_command.DataMode          = QSPI_DATA_4_LINES;
 800f308:	f04f 7340 	mov.w	r3, #50331648	@ 0x3000000
 800f30c:	637b      	str	r3, [r7, #52]	@ 0x34

    break;
 800f30e:	bf00      	nop

  }
  /* Configure the command for the read instruction */
  s_command.DummyCycles       = MT25TL01G_DUMMY_CYCLES_READ;
 800f310:	2308      	movs	r3, #8
 800f312:	627b      	str	r3, [r7, #36]	@ 0x24
  s_command.AddressSize       = QSPI_ADDRESS_32_BITS;
 800f314:	f44f 5340 	mov.w	r3, #12288	@ 0x3000
 800f318:	61fb      	str	r3, [r7, #28]
  s_command.AlternateByteMode = QSPI_ALTERNATE_BYTES_NONE;
 800f31a:	2300      	movs	r3, #0
 800f31c:	633b      	str	r3, [r7, #48]	@ 0x30
  s_command.DdrMode           = QSPI_DDR_MODE_DISABLE;
 800f31e:	2300      	movs	r3, #0
 800f320:	63fb      	str	r3, [r7, #60]	@ 0x3c
  s_command.DdrHoldHalfCycle  = QSPI_DDR_HHC_ANALOG_DELAY;
 800f322:	2300      	movs	r3, #0
 800f324:	643b      	str	r3, [r7, #64]	@ 0x40
  s_command.SIOOMode          = QSPI_SIOO_INST_EVERY_CMD;
 800f326:	2300      	movs	r3, #0
 800f328:	647b      	str	r3, [r7, #68]	@ 0x44

  /* Configure the memory mapped mode */
  s_mem_mapped_cfg.TimeOutActivation = QSPI_TIMEOUT_COUNTER_DISABLE;
 800f32a:	2300      	movs	r3, #0
 800f32c:	60fb      	str	r3, [r7, #12]
  s_mem_mapped_cfg.TimeOutPeriod     = 0;
 800f32e:	2300      	movs	r3, #0
 800f330:	60bb      	str	r3, [r7, #8]

  if (HAL_QSPI_MemoryMapped(Ctx, &s_command, &s_mem_mapped_cfg) != HAL_OK)
 800f332:	f107 0208 	add.w	r2, r7, #8
 800f336:	f107 0310 	add.w	r3, r7, #16
 800f33a:	4619      	mov	r1, r3
 800f33c:	6878      	ldr	r0, [r7, #4]
 800f33e:	f004 fd81 	bl	8013e44 <HAL_QSPI_MemoryMapped>
 800f342:	4603      	mov	r3, r0
 800f344:	2b00      	cmp	r3, #0
 800f346:	d002      	beq.n	800f34e <MT25TL01G_EnableMemoryMappedModeSTR+0xc6>
  {
    return MT25TL01G_ERROR_MEMORYMAPPED;
 800f348:	f06f 0305 	mvn.w	r3, #5
 800f34c:	e000      	b.n	800f350 <MT25TL01G_EnableMemoryMappedModeSTR+0xc8>
  }

  return MT25TL01G_OK;
 800f34e:	2300      	movs	r3, #0
}
 800f350:	4618      	mov	r0, r3
 800f352:	3748      	adds	r7, #72	@ 0x48
 800f354:	46bd      	mov	sp, r7
 800f356:	bd80      	pop	{r7, pc}

0800f358 <MT25TL01G_ResetEnable>:
  * @param  Ctx Component object pointer
  * @param  Mode Interface mode
  * @retval QSPI memory status
  */
int32_t MT25TL01G_ResetEnable(QSPI_HandleTypeDef *Ctx, MT25TL01G_Interface_t Mode)
{
 800f358:	b580      	push	{r7, lr}
 800f35a:	b090      	sub	sp, #64	@ 0x40
 800f35c:	af00      	add	r7, sp, #0
 800f35e:	6078      	str	r0, [r7, #4]
 800f360:	460b      	mov	r3, r1
 800f362:	70fb      	strb	r3, [r7, #3]
  QSPI_CommandTypeDef s_command;

  /* Initialize the reset enable command */
  s_command.InstructionMode   = (Mode == MT25TL01G_QPI_MODE) ? QSPI_INSTRUCTION_4_LINES : QSPI_INSTRUCTION_1_LINE;
 800f364:	78fb      	ldrb	r3, [r7, #3]
 800f366:	2b03      	cmp	r3, #3
 800f368:	d102      	bne.n	800f370 <MT25TL01G_ResetEnable+0x18>
 800f36a:	f44f 7340 	mov.w	r3, #768	@ 0x300
 800f36e:	e001      	b.n	800f374 <MT25TL01G_ResetEnable+0x1c>
 800f370:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800f374:	623b      	str	r3, [r7, #32]
  s_command.Instruction       = MT25TL01G_RESET_ENABLE_CMD;
 800f376:	2366      	movs	r3, #102	@ 0x66
 800f378:	60bb      	str	r3, [r7, #8]
  s_command.AddressMode       = QSPI_ADDRESS_NONE;
 800f37a:	2300      	movs	r3, #0
 800f37c:	627b      	str	r3, [r7, #36]	@ 0x24
  s_command.AlternateByteMode = QSPI_ALTERNATE_BYTES_NONE;
 800f37e:	2300      	movs	r3, #0
 800f380:	62bb      	str	r3, [r7, #40]	@ 0x28
  s_command.DataMode          = QSPI_DATA_NONE;
 800f382:	2300      	movs	r3, #0
 800f384:	62fb      	str	r3, [r7, #44]	@ 0x2c
  s_command.DummyCycles       = 0;
 800f386:	2300      	movs	r3, #0
 800f388:	61fb      	str	r3, [r7, #28]
  s_command.DdrMode           = QSPI_DDR_MODE_DISABLE;
 800f38a:	2300      	movs	r3, #0
 800f38c:	637b      	str	r3, [r7, #52]	@ 0x34
  s_command.DdrHoldHalfCycle  = QSPI_DDR_HHC_ANALOG_DELAY;
 800f38e:	2300      	movs	r3, #0
 800f390:	63bb      	str	r3, [r7, #56]	@ 0x38
  s_command.SIOOMode          = QSPI_SIOO_INST_EVERY_CMD;
 800f392:	2300      	movs	r3, #0
 800f394:	63fb      	str	r3, [r7, #60]	@ 0x3c

  /* Send the command */
  if (HAL_QSPI_Command(Ctx, &s_command, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 800f396:	f107 0308 	add.w	r3, r7, #8
 800f39a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800f39e:	4619      	mov	r1, r3
 800f3a0:	6878      	ldr	r0, [r7, #4]
 800f3a2:	f004 fb4b 	bl	8013a3c <HAL_QSPI_Command>
 800f3a6:	4603      	mov	r3, r0
 800f3a8:	2b00      	cmp	r3, #0
 800f3aa:	d002      	beq.n	800f3b2 <MT25TL01G_ResetEnable+0x5a>
  {
    return MT25TL01G_ERROR_COMMAND;
 800f3ac:	f06f 0301 	mvn.w	r3, #1
 800f3b0:	e000      	b.n	800f3b4 <MT25TL01G_ResetEnable+0x5c>
  }

  return MT25TL01G_OK;
 800f3b2:	2300      	movs	r3, #0
}
 800f3b4:	4618      	mov	r0, r3
 800f3b6:	3740      	adds	r7, #64	@ 0x40
 800f3b8:	46bd      	mov	sp, r7
 800f3ba:	bd80      	pop	{r7, pc}

0800f3bc <MT25TL01G_ResetMemory>:
  * @param  Ctx Component object pointer
  * @param  Mode Interface mode
  * @retval QSPI memory status
  */
int32_t MT25TL01G_ResetMemory(QSPI_HandleTypeDef *Ctx, MT25TL01G_Interface_t Mode)
{
 800f3bc:	b580      	push	{r7, lr}
 800f3be:	b090      	sub	sp, #64	@ 0x40
 800f3c0:	af00      	add	r7, sp, #0
 800f3c2:	6078      	str	r0, [r7, #4]
 800f3c4:	460b      	mov	r3, r1
 800f3c6:	70fb      	strb	r3, [r7, #3]
  QSPI_CommandTypeDef s_command;

  /* Initialize the reset enable command */
  s_command.InstructionMode   = (Mode == MT25TL01G_QPI_MODE) ? QSPI_INSTRUCTION_4_LINES : QSPI_INSTRUCTION_1_LINE;
 800f3c8:	78fb      	ldrb	r3, [r7, #3]
 800f3ca:	2b03      	cmp	r3, #3
 800f3cc:	d102      	bne.n	800f3d4 <MT25TL01G_ResetMemory+0x18>
 800f3ce:	f44f 7340 	mov.w	r3, #768	@ 0x300
 800f3d2:	e001      	b.n	800f3d8 <MT25TL01G_ResetMemory+0x1c>
 800f3d4:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800f3d8:	623b      	str	r3, [r7, #32]
  s_command.Instruction       = MT25TL01G_RESET_MEMORY_CMD ;
 800f3da:	2399      	movs	r3, #153	@ 0x99
 800f3dc:	60bb      	str	r3, [r7, #8]
  s_command.AddressMode       = QSPI_ADDRESS_NONE;
 800f3de:	2300      	movs	r3, #0
 800f3e0:	627b      	str	r3, [r7, #36]	@ 0x24
  s_command.AlternateByteMode = QSPI_ALTERNATE_BYTES_NONE;
 800f3e2:	2300      	movs	r3, #0
 800f3e4:	62bb      	str	r3, [r7, #40]	@ 0x28
  s_command.DataMode          = QSPI_DATA_NONE;
 800f3e6:	2300      	movs	r3, #0
 800f3e8:	62fb      	str	r3, [r7, #44]	@ 0x2c
  s_command.DummyCycles       = 0;
 800f3ea:	2300      	movs	r3, #0
 800f3ec:	61fb      	str	r3, [r7, #28]
  s_command.DdrMode           = QSPI_DDR_MODE_DISABLE;
 800f3ee:	2300      	movs	r3, #0
 800f3f0:	637b      	str	r3, [r7, #52]	@ 0x34
  s_command.DdrHoldHalfCycle  = QSPI_DDR_HHC_ANALOG_DELAY;
 800f3f2:	2300      	movs	r3, #0
 800f3f4:	63bb      	str	r3, [r7, #56]	@ 0x38
  s_command.SIOOMode          = QSPI_SIOO_INST_EVERY_CMD;
 800f3f6:	2300      	movs	r3, #0
 800f3f8:	63fb      	str	r3, [r7, #60]	@ 0x3c

  /* Send the command */
  if (HAL_QSPI_Command(Ctx, &s_command, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 800f3fa:	f107 0308 	add.w	r3, r7, #8
 800f3fe:	f241 3288 	movw	r2, #5000	@ 0x1388
 800f402:	4619      	mov	r1, r3
 800f404:	6878      	ldr	r0, [r7, #4]
 800f406:	f004 fb19 	bl	8013a3c <HAL_QSPI_Command>
 800f40a:	4603      	mov	r3, r0
 800f40c:	2b00      	cmp	r3, #0
 800f40e:	d002      	beq.n	800f416 <MT25TL01G_ResetMemory+0x5a>
  {
    return MT25TL01G_ERROR_COMMAND;
 800f410:	f06f 0301 	mvn.w	r3, #1
 800f414:	e000      	b.n	800f418 <MT25TL01G_ResetMemory+0x5c>
  }

  return MT25TL01G_OK;
 800f416:	2300      	movs	r3, #0
}
 800f418:	4618      	mov	r0, r3
 800f41a:	3740      	adds	r7, #64	@ 0x40
 800f41c:	46bd      	mov	sp, r7
 800f41e:	bd80      	pop	{r7, pc}

0800f420 <MT48LC4M32B2_Init>:
  * @param  Ctx : Component object pointer
  * @param  pRegMode : Pointer to Register Mode stucture
  * @retval error status
  */
int32_t MT48LC4M32B2_Init(SDRAM_HandleTypeDef *Ctx, MT48LC4M32B2_Context_t *pRegMode) 
{
 800f420:	b580      	push	{r7, lr}
 800f422:	b084      	sub	sp, #16
 800f424:	af00      	add	r7, sp, #0
 800f426:	6078      	str	r0, [r7, #4]
 800f428:	6039      	str	r1, [r7, #0]
  int32_t ret = MT48LC4M32B2_ERROR;
 800f42a:	f04f 33ff 	mov.w	r3, #4294967295
 800f42e:	60fb      	str	r3, [r7, #12]
  
  /* Step 1: Configure a clock configuration enable command */
  if(MT48LC4M32B2_ClockEnable(Ctx, pRegMode->TargetBank) == MT48LC4M32B2_OK)
 800f430:	683b      	ldr	r3, [r7, #0]
 800f432:	681b      	ldr	r3, [r3, #0]
 800f434:	4619      	mov	r1, r3
 800f436:	6878      	ldr	r0, [r7, #4]
 800f438:	f000 f832 	bl	800f4a0 <MT48LC4M32B2_ClockEnable>
 800f43c:	4603      	mov	r3, r0
 800f43e:	2b00      	cmp	r3, #0
 800f440:	d128      	bne.n	800f494 <MT48LC4M32B2_Init+0x74>
  {
    /* Step 2: Insert 100 us minimum delay */ 
    /* Inserted delay is equal to 1 ms due to systick time base unit (ms) */
    (void)MT48LC4M32B2_Delay(1);
 800f442:	2001      	movs	r0, #1
 800f444:	f000 f8e2 	bl	800f60c <MT48LC4M32B2_Delay>
    
    /* Step 3: Configure a PALL (precharge all) command */ 
    if(MT48LC4M32B2_Precharge(Ctx, pRegMode->TargetBank) == MT48LC4M32B2_OK)
 800f448:	683b      	ldr	r3, [r7, #0]
 800f44a:	681b      	ldr	r3, [r3, #0]
 800f44c:	4619      	mov	r1, r3
 800f44e:	6878      	ldr	r0, [r7, #4]
 800f450:	f000 f84a 	bl	800f4e8 <MT48LC4M32B2_Precharge>
 800f454:	4603      	mov	r3, r0
 800f456:	2b00      	cmp	r3, #0
 800f458:	d11c      	bne.n	800f494 <MT48LC4M32B2_Init+0x74>
    {
      /* Step 4: Configure a Refresh command */ 
      if(MT48LC4M32B2_RefreshMode(Ctx, pRegMode->TargetBank, pRegMode->RefreshMode) == MT48LC4M32B2_OK)
 800f45a:	683b      	ldr	r3, [r7, #0]
 800f45c:	6819      	ldr	r1, [r3, #0]
 800f45e:	683b      	ldr	r3, [r7, #0]
 800f460:	685b      	ldr	r3, [r3, #4]
 800f462:	461a      	mov	r2, r3
 800f464:	6878      	ldr	r0, [r7, #4]
 800f466:	f000 f897 	bl	800f598 <MT48LC4M32B2_RefreshMode>
 800f46a:	4603      	mov	r3, r0
 800f46c:	2b00      	cmp	r3, #0
 800f46e:	d111      	bne.n	800f494 <MT48LC4M32B2_Init+0x74>
      {
        /* Step 5: Program the external memory mode register */
        if(MT48LC4M32B2_ModeRegConfig(Ctx, pRegMode) == MT48LC4M32B2_OK)
 800f470:	6839      	ldr	r1, [r7, #0]
 800f472:	6878      	ldr	r0, [r7, #4]
 800f474:	f000 f85c 	bl	800f530 <MT48LC4M32B2_ModeRegConfig>
 800f478:	4603      	mov	r3, r0
 800f47a:	2b00      	cmp	r3, #0
 800f47c:	d10a      	bne.n	800f494 <MT48LC4M32B2_Init+0x74>
        {
          /* Step 6: Set the refresh rate counter */
          if(MT48LC4M32B2_RefreshRate(Ctx, pRegMode->RefreshRate) == MT48LC4M32B2_OK)
 800f47e:	683b      	ldr	r3, [r7, #0]
 800f480:	689b      	ldr	r3, [r3, #8]
 800f482:	4619      	mov	r1, r3
 800f484:	6878      	ldr	r0, [r7, #4]
 800f486:	f000 f8ad 	bl	800f5e4 <MT48LC4M32B2_RefreshRate>
 800f48a:	4603      	mov	r3, r0
 800f48c:	2b00      	cmp	r3, #0
 800f48e:	d101      	bne.n	800f494 <MT48LC4M32B2_Init+0x74>
          {
            ret = MT48LC4M32B2_OK;
 800f490:	2300      	movs	r3, #0
 800f492:	60fb      	str	r3, [r7, #12]
          }
        }
      }
    }
  } 
  return ret;
 800f494:	68fb      	ldr	r3, [r7, #12]
}
 800f496:	4618      	mov	r0, r3
 800f498:	3710      	adds	r7, #16
 800f49a:	46bd      	mov	sp, r7
 800f49c:	bd80      	pop	{r7, pc}
	...

0800f4a0 <MT48LC4M32B2_ClockEnable>:
  * @param  Ctx : Component object pointer
  * @param  Interface : Could be FMC_SDRAM_CMD_TARGET_BANK1 or FMC_SDRAM_CMD_TARGET_BANK2
  * @retval error status
  */
int32_t MT48LC4M32B2_ClockEnable(SDRAM_HandleTypeDef *Ctx, uint32_t Interface) 
{
 800f4a0:	b580      	push	{r7, lr}
 800f4a2:	b082      	sub	sp, #8
 800f4a4:	af00      	add	r7, sp, #0
 800f4a6:	6078      	str	r0, [r7, #4]
 800f4a8:	6039      	str	r1, [r7, #0]
  Command.CommandMode            = MT48LC4M32B2_CLK_ENABLE_CMD;
 800f4aa:	4b0e      	ldr	r3, [pc, #56]	@ (800f4e4 <MT48LC4M32B2_ClockEnable+0x44>)
 800f4ac:	2201      	movs	r2, #1
 800f4ae:	601a      	str	r2, [r3, #0]
  Command.CommandTarget          = Interface;
 800f4b0:	4a0c      	ldr	r2, [pc, #48]	@ (800f4e4 <MT48LC4M32B2_ClockEnable+0x44>)
 800f4b2:	683b      	ldr	r3, [r7, #0]
 800f4b4:	6053      	str	r3, [r2, #4]
  Command.AutoRefreshNumber      = 1;
 800f4b6:	4b0b      	ldr	r3, [pc, #44]	@ (800f4e4 <MT48LC4M32B2_ClockEnable+0x44>)
 800f4b8:	2201      	movs	r2, #1
 800f4ba:	609a      	str	r2, [r3, #8]
  Command.ModeRegisterDefinition = 0;
 800f4bc:	4b09      	ldr	r3, [pc, #36]	@ (800f4e4 <MT48LC4M32B2_ClockEnable+0x44>)
 800f4be:	2200      	movs	r2, #0
 800f4c0:	60da      	str	r2, [r3, #12]

  /* Send the command */
  if(HAL_SDRAM_SendCommand(Ctx, &Command, MT48LC4M32B2_TIMEOUT) != HAL_OK)
 800f4c2:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800f4c6:	4907      	ldr	r1, [pc, #28]	@ (800f4e4 <MT48LC4M32B2_ClockEnable+0x44>)
 800f4c8:	6878      	ldr	r0, [r7, #4]
 800f4ca:	f007 fbc3 	bl	8016c54 <HAL_SDRAM_SendCommand>
 800f4ce:	4603      	mov	r3, r0
 800f4d0:	2b00      	cmp	r3, #0
 800f4d2:	d002      	beq.n	800f4da <MT48LC4M32B2_ClockEnable+0x3a>
  {
    return MT48LC4M32B2_ERROR;
 800f4d4:	f04f 33ff 	mov.w	r3, #4294967295
 800f4d8:	e000      	b.n	800f4dc <MT48LC4M32B2_ClockEnable+0x3c>
  }
  else
  {
    return MT48LC4M32B2_OK;
 800f4da:	2300      	movs	r3, #0
  }
}
 800f4dc:	4618      	mov	r0, r3
 800f4de:	3708      	adds	r7, #8
 800f4e0:	46bd      	mov	sp, r7
 800f4e2:	bd80      	pop	{r7, pc}
 800f4e4:	2400ac78 	.word	0x2400ac78

0800f4e8 <MT48LC4M32B2_Precharge>:
  * @param  Ctx : Component object pointer
  * @param  Interface : Could be FMC_SDRAM_CMD_TARGET_BANK1 or FMC_SDRAM_CMD_TARGET_BANK2
  * @retval error status
  */
int32_t MT48LC4M32B2_Precharge(SDRAM_HandleTypeDef *Ctx, uint32_t Interface) 
{
 800f4e8:	b580      	push	{r7, lr}
 800f4ea:	b082      	sub	sp, #8
 800f4ec:	af00      	add	r7, sp, #0
 800f4ee:	6078      	str	r0, [r7, #4]
 800f4f0:	6039      	str	r1, [r7, #0]
  Command.CommandMode            = MT48LC4M32B2_PALL_CMD;
 800f4f2:	4b0e      	ldr	r3, [pc, #56]	@ (800f52c <MT48LC4M32B2_Precharge+0x44>)
 800f4f4:	2202      	movs	r2, #2
 800f4f6:	601a      	str	r2, [r3, #0]
  Command.CommandTarget          = Interface;
 800f4f8:	4a0c      	ldr	r2, [pc, #48]	@ (800f52c <MT48LC4M32B2_Precharge+0x44>)
 800f4fa:	683b      	ldr	r3, [r7, #0]
 800f4fc:	6053      	str	r3, [r2, #4]
  Command.AutoRefreshNumber      = 1;
 800f4fe:	4b0b      	ldr	r3, [pc, #44]	@ (800f52c <MT48LC4M32B2_Precharge+0x44>)
 800f500:	2201      	movs	r2, #1
 800f502:	609a      	str	r2, [r3, #8]
  Command.ModeRegisterDefinition = 0;
 800f504:	4b09      	ldr	r3, [pc, #36]	@ (800f52c <MT48LC4M32B2_Precharge+0x44>)
 800f506:	2200      	movs	r2, #0
 800f508:	60da      	str	r2, [r3, #12]

  /* Send the command */
  if(HAL_SDRAM_SendCommand(Ctx, &Command, MT48LC4M32B2_TIMEOUT) != HAL_OK)
 800f50a:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800f50e:	4907      	ldr	r1, [pc, #28]	@ (800f52c <MT48LC4M32B2_Precharge+0x44>)
 800f510:	6878      	ldr	r0, [r7, #4]
 800f512:	f007 fb9f 	bl	8016c54 <HAL_SDRAM_SendCommand>
 800f516:	4603      	mov	r3, r0
 800f518:	2b00      	cmp	r3, #0
 800f51a:	d002      	beq.n	800f522 <MT48LC4M32B2_Precharge+0x3a>
  {
    return MT48LC4M32B2_ERROR;
 800f51c:	f04f 33ff 	mov.w	r3, #4294967295
 800f520:	e000      	b.n	800f524 <MT48LC4M32B2_Precharge+0x3c>
  }
  else
  {
    return MT48LC4M32B2_OK;
 800f522:	2300      	movs	r3, #0
  }
}
 800f524:	4618      	mov	r0, r3
 800f526:	3708      	adds	r7, #8
 800f528:	46bd      	mov	sp, r7
 800f52a:	bd80      	pop	{r7, pc}
 800f52c:	2400ac78 	.word	0x2400ac78

0800f530 <MT48LC4M32B2_ModeRegConfig>:
  * @param  Ctx : Component object pointer
  * @param  pRegMode : Pointer to Register Mode stucture
  * @retval error status
  */
int32_t MT48LC4M32B2_ModeRegConfig(SDRAM_HandleTypeDef *Ctx, MT48LC4M32B2_Context_t *pRegMode) 
{
 800f530:	b580      	push	{r7, lr}
 800f532:	b084      	sub	sp, #16
 800f534:	af00      	add	r7, sp, #0
 800f536:	6078      	str	r0, [r7, #4]
 800f538:	6039      	str	r1, [r7, #0]
  uint32_t tmpmrd;

  /* Program the external memory mode register */
  tmpmrd = (uint32_t)pRegMode->BurstLength   |\
 800f53a:	683b      	ldr	r3, [r7, #0]
 800f53c:	68da      	ldr	r2, [r3, #12]
                     pRegMode->BurstType     |\
 800f53e:	683b      	ldr	r3, [r7, #0]
 800f540:	691b      	ldr	r3, [r3, #16]
  tmpmrd = (uint32_t)pRegMode->BurstLength   |\
 800f542:	431a      	orrs	r2, r3
                     pRegMode->CASLatency    |\
 800f544:	683b      	ldr	r3, [r7, #0]
 800f546:	695b      	ldr	r3, [r3, #20]
                     pRegMode->BurstType     |\
 800f548:	431a      	orrs	r2, r3
                     pRegMode->OperationMode |\
 800f54a:	683b      	ldr	r3, [r7, #0]
 800f54c:	699b      	ldr	r3, [r3, #24]
                     pRegMode->CASLatency    |\
 800f54e:	431a      	orrs	r2, r3
                     pRegMode->WriteBurstMode;
 800f550:	683b      	ldr	r3, [r7, #0]
 800f552:	69db      	ldr	r3, [r3, #28]
  tmpmrd = (uint32_t)pRegMode->BurstLength   |\
 800f554:	4313      	orrs	r3, r2
 800f556:	60fb      	str	r3, [r7, #12]
  
  Command.CommandMode            = MT48LC4M32B2_LOAD_MODE_CMD;
 800f558:	4b0e      	ldr	r3, [pc, #56]	@ (800f594 <MT48LC4M32B2_ModeRegConfig+0x64>)
 800f55a:	2204      	movs	r2, #4
 800f55c:	601a      	str	r2, [r3, #0]
  Command.CommandTarget          = pRegMode->TargetBank;
 800f55e:	683b      	ldr	r3, [r7, #0]
 800f560:	681b      	ldr	r3, [r3, #0]
 800f562:	4a0c      	ldr	r2, [pc, #48]	@ (800f594 <MT48LC4M32B2_ModeRegConfig+0x64>)
 800f564:	6053      	str	r3, [r2, #4]
  Command.AutoRefreshNumber      = 1;
 800f566:	4b0b      	ldr	r3, [pc, #44]	@ (800f594 <MT48LC4M32B2_ModeRegConfig+0x64>)
 800f568:	2201      	movs	r2, #1
 800f56a:	609a      	str	r2, [r3, #8]
  Command.ModeRegisterDefinition = tmpmrd;
 800f56c:	4a09      	ldr	r2, [pc, #36]	@ (800f594 <MT48LC4M32B2_ModeRegConfig+0x64>)
 800f56e:	68fb      	ldr	r3, [r7, #12]
 800f570:	60d3      	str	r3, [r2, #12]
  
  /* Send the command */
  if(HAL_SDRAM_SendCommand(Ctx, &Command, MT48LC4M32B2_TIMEOUT) != HAL_OK)
 800f572:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800f576:	4907      	ldr	r1, [pc, #28]	@ (800f594 <MT48LC4M32B2_ModeRegConfig+0x64>)
 800f578:	6878      	ldr	r0, [r7, #4]
 800f57a:	f007 fb6b 	bl	8016c54 <HAL_SDRAM_SendCommand>
 800f57e:	4603      	mov	r3, r0
 800f580:	2b00      	cmp	r3, #0
 800f582:	d002      	beq.n	800f58a <MT48LC4M32B2_ModeRegConfig+0x5a>
  {
    return MT48LC4M32B2_ERROR;
 800f584:	f04f 33ff 	mov.w	r3, #4294967295
 800f588:	e000      	b.n	800f58c <MT48LC4M32B2_ModeRegConfig+0x5c>
  }
  else
  {
    return MT48LC4M32B2_OK;
 800f58a:	2300      	movs	r3, #0
  }
}
 800f58c:	4618      	mov	r0, r3
 800f58e:	3710      	adds	r7, #16
 800f590:	46bd      	mov	sp, r7
 800f592:	bd80      	pop	{r7, pc}
 800f594:	2400ac78 	.word	0x2400ac78

0800f598 <MT48LC4M32B2_RefreshMode>:
  * @param  RefreshMode : Could be MT48LC4M32B2_CMD_AUTOREFRESH_MODE or
  *                      MT48LC4M32B2_CMD_SELFREFRESH_MODE
  * @retval error status
  */
int32_t MT48LC4M32B2_RefreshMode(SDRAM_HandleTypeDef *Ctx, uint32_t Interface, uint32_t RefreshMode) 
{
 800f598:	b580      	push	{r7, lr}
 800f59a:	b084      	sub	sp, #16
 800f59c:	af00      	add	r7, sp, #0
 800f59e:	60f8      	str	r0, [r7, #12]
 800f5a0:	60b9      	str	r1, [r7, #8]
 800f5a2:	607a      	str	r2, [r7, #4]
  Command.CommandMode            = RefreshMode;
 800f5a4:	4a0e      	ldr	r2, [pc, #56]	@ (800f5e0 <MT48LC4M32B2_RefreshMode+0x48>)
 800f5a6:	687b      	ldr	r3, [r7, #4]
 800f5a8:	6013      	str	r3, [r2, #0]
  Command.CommandTarget          = Interface;
 800f5aa:	4a0d      	ldr	r2, [pc, #52]	@ (800f5e0 <MT48LC4M32B2_RefreshMode+0x48>)
 800f5ac:	68bb      	ldr	r3, [r7, #8]
 800f5ae:	6053      	str	r3, [r2, #4]
  Command.AutoRefreshNumber      = 8;
 800f5b0:	4b0b      	ldr	r3, [pc, #44]	@ (800f5e0 <MT48LC4M32B2_RefreshMode+0x48>)
 800f5b2:	2208      	movs	r2, #8
 800f5b4:	609a      	str	r2, [r3, #8]
  Command.ModeRegisterDefinition = 0;
 800f5b6:	4b0a      	ldr	r3, [pc, #40]	@ (800f5e0 <MT48LC4M32B2_RefreshMode+0x48>)
 800f5b8:	2200      	movs	r2, #0
 800f5ba:	60da      	str	r2, [r3, #12]

  /* Send the command */
  if(HAL_SDRAM_SendCommand(Ctx, &Command, MT48LC4M32B2_TIMEOUT) != HAL_OK)
 800f5bc:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800f5c0:	4907      	ldr	r1, [pc, #28]	@ (800f5e0 <MT48LC4M32B2_RefreshMode+0x48>)
 800f5c2:	68f8      	ldr	r0, [r7, #12]
 800f5c4:	f007 fb46 	bl	8016c54 <HAL_SDRAM_SendCommand>
 800f5c8:	4603      	mov	r3, r0
 800f5ca:	2b00      	cmp	r3, #0
 800f5cc:	d002      	beq.n	800f5d4 <MT48LC4M32B2_RefreshMode+0x3c>
  {
    return MT48LC4M32B2_ERROR;
 800f5ce:	f04f 33ff 	mov.w	r3, #4294967295
 800f5d2:	e000      	b.n	800f5d6 <MT48LC4M32B2_RefreshMode+0x3e>
  }
  else
  {
    return MT48LC4M32B2_OK;
 800f5d4:	2300      	movs	r3, #0
  }
}
 800f5d6:	4618      	mov	r0, r3
 800f5d8:	3710      	adds	r7, #16
 800f5da:	46bd      	mov	sp, r7
 800f5dc:	bd80      	pop	{r7, pc}
 800f5de:	bf00      	nop
 800f5e0:	2400ac78 	.word	0x2400ac78

0800f5e4 <MT48LC4M32B2_RefreshRate>:
  * @param  Ctx : Component object pointer
  * @param  RefreshCount : The refresh rate to be programmed
  * @retval error status
  */
int32_t MT48LC4M32B2_RefreshRate(SDRAM_HandleTypeDef *Ctx, uint32_t RefreshCount) 
{
 800f5e4:	b580      	push	{r7, lr}
 800f5e6:	b082      	sub	sp, #8
 800f5e8:	af00      	add	r7, sp, #0
 800f5ea:	6078      	str	r0, [r7, #4]
 800f5ec:	6039      	str	r1, [r7, #0]
  /* Set the device refresh rate */
  if(HAL_SDRAM_ProgramRefreshRate(Ctx, RefreshCount) != HAL_OK)
 800f5ee:	6839      	ldr	r1, [r7, #0]
 800f5f0:	6878      	ldr	r0, [r7, #4]
 800f5f2:	f007 fb64 	bl	8016cbe <HAL_SDRAM_ProgramRefreshRate>
 800f5f6:	4603      	mov	r3, r0
 800f5f8:	2b00      	cmp	r3, #0
 800f5fa:	d002      	beq.n	800f602 <MT48LC4M32B2_RefreshRate+0x1e>
  {
    return MT48LC4M32B2_ERROR;
 800f5fc:	f04f 33ff 	mov.w	r3, #4294967295
 800f600:	e000      	b.n	800f604 <MT48LC4M32B2_RefreshRate+0x20>
  }
  else
  {
    return MT48LC4M32B2_OK;
 800f602:	2300      	movs	r3, #0
  }
}
 800f604:	4618      	mov	r0, r3
 800f606:	3708      	adds	r7, #8
 800f608:	46bd      	mov	sp, r7
 800f60a:	bd80      	pop	{r7, pc}

0800f60c <MT48LC4M32B2_Delay>:
  * @brief This function provides accurate delay (in milliseconds)
  * @param Delay: specifies the delay time length, in milliseconds
  * @retval MT48LC4M32B2_OK
  */
static int32_t MT48LC4M32B2_Delay(uint32_t Delay)
{  
 800f60c:	b580      	push	{r7, lr}
 800f60e:	b084      	sub	sp, #16
 800f610:	af00      	add	r7, sp, #0
 800f612:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  tickstart = HAL_GetTick();
 800f614:	f001 fcfc 	bl	8011010 <HAL_GetTick>
 800f618:	60f8      	str	r0, [r7, #12]
  while((HAL_GetTick() - tickstart) < Delay)
 800f61a:	bf00      	nop
 800f61c:	f001 fcf8 	bl	8011010 <HAL_GetTick>
 800f620:	4602      	mov	r2, r0
 800f622:	68fb      	ldr	r3, [r7, #12]
 800f624:	1ad3      	subs	r3, r2, r3
 800f626:	687a      	ldr	r2, [r7, #4]
 800f628:	429a      	cmp	r2, r3
 800f62a:	d8f7      	bhi.n	800f61c <MT48LC4M32B2_Delay+0x10>
  {
  }
  return MT48LC4M32B2_OK;
 800f62c:	2300      	movs	r3, #0
}
 800f62e:	4618      	mov	r0, r3
 800f630:	3710      	adds	r7, #16
 800f632:	46bd      	mov	sp, r7
 800f634:	bd80      	pop	{r7, pc}
	...

0800f638 <BSP_I2C4_Init>:
/**
  * @brief  Initializes I2C HAL.
  * @retval BSP status
  */
int32_t BSP_I2C4_Init(void)
{
 800f638:	b580      	push	{r7, lr}
 800f63a:	b082      	sub	sp, #8
 800f63c:	af00      	add	r7, sp, #0
  int32_t ret = BSP_ERROR_NONE;
 800f63e:	2300      	movs	r3, #0
 800f640:	607b      	str	r3, [r7, #4]

  hbus_i2c4.Instance = BUS_I2C4;
 800f642:	4b16      	ldr	r3, [pc, #88]	@ (800f69c <BSP_I2C4_Init+0x64>)
 800f644:	4a16      	ldr	r2, [pc, #88]	@ (800f6a0 <BSP_I2C4_Init+0x68>)
 800f646:	601a      	str	r2, [r3, #0]

  if (I2c4InitCounter == 0U)
 800f648:	4b16      	ldr	r3, [pc, #88]	@ (800f6a4 <BSP_I2C4_Init+0x6c>)
 800f64a:	681b      	ldr	r3, [r3, #0]
 800f64c:	2b00      	cmp	r3, #0
 800f64e:	d11f      	bne.n	800f690 <BSP_I2C4_Init+0x58>
  {
    I2c4InitCounter++;
 800f650:	4b14      	ldr	r3, [pc, #80]	@ (800f6a4 <BSP_I2C4_Init+0x6c>)
 800f652:	681b      	ldr	r3, [r3, #0]
 800f654:	3301      	adds	r3, #1
 800f656:	4a13      	ldr	r2, [pc, #76]	@ (800f6a4 <BSP_I2C4_Init+0x6c>)
 800f658:	6013      	str	r3, [r2, #0]

    if (HAL_I2C_GetState(&hbus_i2c4) == HAL_I2C_STATE_RESET)
 800f65a:	4810      	ldr	r0, [pc, #64]	@ (800f69c <BSP_I2C4_Init+0x64>)
 800f65c:	f002 ff00 	bl	8012460 <HAL_I2C_GetState>
 800f660:	4603      	mov	r3, r0
 800f662:	2b00      	cmp	r3, #0
 800f664:	d114      	bne.n	800f690 <BSP_I2C4_Init+0x58>
        BspI2cSemaphore = osSemaphoreCreate(osSemaphore(BSP_I2C_SEM), 1);
      }
#endif
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 0)
      /* Init the I2C4 Msp */
      I2C4_MspInit(&hbus_i2c4);
 800f666:	480d      	ldr	r0, [pc, #52]	@ (800f69c <BSP_I2C4_Init+0x64>)
 800f668:	f000 fb60 	bl	800fd2c <I2C4_MspInit>
        }
      }
      if (ret == BSP_ERROR_NONE)
      {
#endif
        if (MX_I2C4_Init(&hbus_i2c4, I2C_GetTiming(HAL_RCC_GetPCLK2Freq(), BUS_I2C4_FREQUENCY)) != HAL_OK)
 800f66c:	f005 fed4 	bl	8015418 <HAL_RCC_GetPCLK2Freq>
 800f670:	4603      	mov	r3, r0
 800f672:	490d      	ldr	r1, [pc, #52]	@ (800f6a8 <BSP_I2C4_Init+0x70>)
 800f674:	4618      	mov	r0, r3
 800f676:	f000 f8e3 	bl	800f840 <I2C_GetTiming>
 800f67a:	4603      	mov	r3, r0
 800f67c:	4619      	mov	r1, r3
 800f67e:	4807      	ldr	r0, [pc, #28]	@ (800f69c <BSP_I2C4_Init+0x64>)
 800f680:	f000 f838 	bl	800f6f4 <MX_I2C4_Init>
 800f684:	4603      	mov	r3, r0
 800f686:	2b00      	cmp	r3, #0
 800f688:	d002      	beq.n	800f690 <BSP_I2C4_Init+0x58>
        {
          ret = BSP_ERROR_BUS_FAILURE;
 800f68a:	f06f 0307 	mvn.w	r3, #7
 800f68e:	607b      	str	r3, [r7, #4]
      }
#endif
    }
  }

  return ret;
 800f690:	687b      	ldr	r3, [r7, #4]
}
 800f692:	4618      	mov	r0, r3
 800f694:	3708      	adds	r7, #8
 800f696:	46bd      	mov	sp, r7
 800f698:	bd80      	pop	{r7, pc}
 800f69a:	bf00      	nop
 800f69c:	2400b690 	.word	0x2400b690
 800f6a0:	58001c00 	.word	0x58001c00
 800f6a4:	2400ac88 	.word	0x2400ac88
 800f6a8:	000186a0 	.word	0x000186a0

0800f6ac <BSP_I2C4_DeInit>:
/**
  * @brief  DeInitializes I2C HAL.
  * @retval BSP status
  */
int32_t BSP_I2C4_DeInit(void)
{
 800f6ac:	b580      	push	{r7, lr}
 800f6ae:	b082      	sub	sp, #8
 800f6b0:	af00      	add	r7, sp, #0
  int32_t ret  = BSP_ERROR_NONE;
 800f6b2:	2300      	movs	r3, #0
 800f6b4:	607b      	str	r3, [r7, #4]

  I2c4InitCounter--;
 800f6b6:	4b0d      	ldr	r3, [pc, #52]	@ (800f6ec <BSP_I2C4_DeInit+0x40>)
 800f6b8:	681b      	ldr	r3, [r3, #0]
 800f6ba:	3b01      	subs	r3, #1
 800f6bc:	4a0b      	ldr	r2, [pc, #44]	@ (800f6ec <BSP_I2C4_DeInit+0x40>)
 800f6be:	6013      	str	r3, [r2, #0]

  if (I2c4InitCounter == 0U)
 800f6c0:	4b0a      	ldr	r3, [pc, #40]	@ (800f6ec <BSP_I2C4_DeInit+0x40>)
 800f6c2:	681b      	ldr	r3, [r3, #0]
 800f6c4:	2b00      	cmp	r3, #0
 800f6c6:	d10b      	bne.n	800f6e0 <BSP_I2C4_DeInit+0x34>
  {
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 0)
    I2C4_MspDeInit(&hbus_i2c4);
 800f6c8:	4809      	ldr	r0, [pc, #36]	@ (800f6f0 <BSP_I2C4_DeInit+0x44>)
 800f6ca:	f000 fb9b 	bl	800fe04 <I2C4_MspDeInit>
#endif /* (USE_HAL_I2C_REGISTER_CALLBACKS == 0) */

    /* Init the I2C */
    if (HAL_I2C_DeInit(&hbus_i2c4) != HAL_OK)
 800f6ce:	4808      	ldr	r0, [pc, #32]	@ (800f6f0 <BSP_I2C4_DeInit+0x44>)
 800f6d0:	f002 fc54 	bl	8011f7c <HAL_I2C_DeInit>
 800f6d4:	4603      	mov	r3, r0
 800f6d6:	2b00      	cmp	r3, #0
 800f6d8:	d002      	beq.n	800f6e0 <BSP_I2C4_DeInit+0x34>
    {
      ret = BSP_ERROR_BUS_FAILURE;
 800f6da:	f06f 0307 	mvn.w	r3, #7
 800f6de:	607b      	str	r3, [r7, #4]
    }
  }

  return ret;
 800f6e0:	687b      	ldr	r3, [r7, #4]
}
 800f6e2:	4618      	mov	r0, r3
 800f6e4:	3708      	adds	r7, #8
 800f6e6:	46bd      	mov	sp, r7
 800f6e8:	bd80      	pop	{r7, pc}
 800f6ea:	bf00      	nop
 800f6ec:	2400ac88 	.word	0x2400ac88
 800f6f0:	2400b690 	.word	0x2400b690

0800f6f4 <MX_I2C4_Init>:
  * @param  hI2c I2C handle
  * @param  timing I2C timing
  * @retval HAL status
  */
__weak HAL_StatusTypeDef MX_I2C4_Init(I2C_HandleTypeDef *hI2c, uint32_t timing)
{
 800f6f4:	b580      	push	{r7, lr}
 800f6f6:	b084      	sub	sp, #16
 800f6f8:	af00      	add	r7, sp, #0
 800f6fa:	6078      	str	r0, [r7, #4]
 800f6fc:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800f6fe:	2300      	movs	r3, #0
 800f700:	73fb      	strb	r3, [r7, #15]

  hI2c->Init.Timing           = timing;
 800f702:	687b      	ldr	r3, [r7, #4]
 800f704:	683a      	ldr	r2, [r7, #0]
 800f706:	605a      	str	r2, [r3, #4]
  hI2c->Init.OwnAddress1      = 0;
 800f708:	687b      	ldr	r3, [r7, #4]
 800f70a:	2200      	movs	r2, #0
 800f70c:	609a      	str	r2, [r3, #8]
  hI2c->Init.AddressingMode   = I2C_ADDRESSINGMODE_7BIT;
 800f70e:	687b      	ldr	r3, [r7, #4]
 800f710:	2201      	movs	r2, #1
 800f712:	60da      	str	r2, [r3, #12]
  hI2c->Init.DualAddressMode  = I2C_DUALADDRESS_DISABLE;
 800f714:	687b      	ldr	r3, [r7, #4]
 800f716:	2200      	movs	r2, #0
 800f718:	611a      	str	r2, [r3, #16]
  hI2c->Init.OwnAddress2      = 0;
 800f71a:	687b      	ldr	r3, [r7, #4]
 800f71c:	2200      	movs	r2, #0
 800f71e:	615a      	str	r2, [r3, #20]
  hI2c->Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 800f720:	687b      	ldr	r3, [r7, #4]
 800f722:	2200      	movs	r2, #0
 800f724:	619a      	str	r2, [r3, #24]
  hI2c->Init.GeneralCallMode  = I2C_GENERALCALL_DISABLE;
 800f726:	687b      	ldr	r3, [r7, #4]
 800f728:	2200      	movs	r2, #0
 800f72a:	61da      	str	r2, [r3, #28]
  hI2c->Init.NoStretchMode    = I2C_NOSTRETCH_DISABLE;
 800f72c:	687b      	ldr	r3, [r7, #4]
 800f72e:	2200      	movs	r2, #0
 800f730:	621a      	str	r2, [r3, #32]

  if (HAL_I2C_Init(hI2c) != HAL_OK)
 800f732:	6878      	ldr	r0, [r7, #4]
 800f734:	f002 fb92 	bl	8011e5c <HAL_I2C_Init>
 800f738:	4603      	mov	r3, r0
 800f73a:	2b00      	cmp	r3, #0
 800f73c:	d002      	beq.n	800f744 <MX_I2C4_Init+0x50>
  {
    status = HAL_ERROR;
 800f73e:	2301      	movs	r3, #1
 800f740:	73fb      	strb	r3, [r7, #15]
 800f742:	e014      	b.n	800f76e <MX_I2C4_Init+0x7a>
  }
  else
  {
    uint32_t analog_filter;

    analog_filter = I2C_ANALOGFILTER_ENABLE;
 800f744:	2300      	movs	r3, #0
 800f746:	60bb      	str	r3, [r7, #8]
    if (HAL_I2CEx_ConfigAnalogFilter(hI2c, analog_filter) != HAL_OK)
 800f748:	68b9      	ldr	r1, [r7, #8]
 800f74a:	6878      	ldr	r0, [r7, #4]
 800f74c:	f003 f95a 	bl	8012a04 <HAL_I2CEx_ConfigAnalogFilter>
 800f750:	4603      	mov	r3, r0
 800f752:	2b00      	cmp	r3, #0
 800f754:	d002      	beq.n	800f75c <MX_I2C4_Init+0x68>
    {
      status = HAL_ERROR;
 800f756:	2301      	movs	r3, #1
 800f758:	73fb      	strb	r3, [r7, #15]
 800f75a:	e008      	b.n	800f76e <MX_I2C4_Init+0x7a>
    }
    else
    {
      if (HAL_I2CEx_ConfigDigitalFilter(hI2c, I2C_DIGITAL_FILTER_COEF) != HAL_OK)
 800f75c:	2100      	movs	r1, #0
 800f75e:	6878      	ldr	r0, [r7, #4]
 800f760:	f003 f99b 	bl	8012a9a <HAL_I2CEx_ConfigDigitalFilter>
 800f764:	4603      	mov	r3, r0
 800f766:	2b00      	cmp	r3, #0
 800f768:	d001      	beq.n	800f76e <MX_I2C4_Init+0x7a>
      {
        status = HAL_ERROR;
 800f76a:	2301      	movs	r3, #1
 800f76c:	73fb      	strb	r3, [r7, #15]
      }
    }
  }

  return status;
 800f76e:	7bfb      	ldrb	r3, [r7, #15]
}
 800f770:	4618      	mov	r0, r3
 800f772:	3710      	adds	r7, #16
 800f774:	46bd      	mov	sp, r7
 800f776:	bd80      	pop	{r7, pc}

0800f778 <BSP_I2C4_WriteReg>:
  * @param  pData  The target register value to be written
  * @param  Length buffer size to be written
  * @retval BSP status
  */
int32_t BSP_I2C4_WriteReg(uint16_t DevAddr, uint16_t Reg, uint8_t *pData, uint16_t Length)
{
 800f778:	b580      	push	{r7, lr}
 800f77a:	b088      	sub	sp, #32
 800f77c:	af02      	add	r7, sp, #8
 800f77e:	60ba      	str	r2, [r7, #8]
 800f780:	461a      	mov	r2, r3
 800f782:	4603      	mov	r3, r0
 800f784:	81fb      	strh	r3, [r7, #14]
 800f786:	460b      	mov	r3, r1
 800f788:	81bb      	strh	r3, [r7, #12]
 800f78a:	4613      	mov	r3, r2
 800f78c:	80fb      	strh	r3, [r7, #6]
  int32_t ret;
#if defined(BSP_USE_CMSIS_OS)
  /* Get semaphore to prevent multiple I2C access */
  osSemaphoreWait(BspI2cSemaphore, osWaitForever);
#endif
  if(I2C4_WriteReg(DevAddr, Reg, I2C_MEMADD_SIZE_8BIT, pData, Length) == 0)
 800f78e:	89b9      	ldrh	r1, [r7, #12]
 800f790:	89f8      	ldrh	r0, [r7, #14]
 800f792:	88fb      	ldrh	r3, [r7, #6]
 800f794:	9300      	str	r3, [sp, #0]
 800f796:	68bb      	ldr	r3, [r7, #8]
 800f798:	2201      	movs	r2, #1
 800f79a:	f000 fb57 	bl	800fe4c <I2C4_WriteReg>
 800f79e:	4603      	mov	r3, r0
 800f7a0:	2b00      	cmp	r3, #0
 800f7a2:	d102      	bne.n	800f7aa <BSP_I2C4_WriteReg+0x32>
  {
    ret = BSP_ERROR_NONE;
 800f7a4:	2300      	movs	r3, #0
 800f7a6:	617b      	str	r3, [r7, #20]
 800f7a8:	e00c      	b.n	800f7c4 <BSP_I2C4_WriteReg+0x4c>
  }
  else
  {
    if( HAL_I2C_GetError(&hbus_i2c4) == HAL_I2C_ERROR_AF)
 800f7aa:	4809      	ldr	r0, [pc, #36]	@ (800f7d0 <BSP_I2C4_WriteReg+0x58>)
 800f7ac:	f002 fe66 	bl	801247c <HAL_I2C_GetError>
 800f7b0:	4603      	mov	r3, r0
 800f7b2:	2b04      	cmp	r3, #4
 800f7b4:	d103      	bne.n	800f7be <BSP_I2C4_WriteReg+0x46>
    {
      ret = BSP_ERROR_BUS_ACKNOWLEDGE_FAILURE;
 800f7b6:	f06f 0365 	mvn.w	r3, #101	@ 0x65
 800f7ba:	617b      	str	r3, [r7, #20]
 800f7bc:	e002      	b.n	800f7c4 <BSP_I2C4_WriteReg+0x4c>
    }
    else
    {
      ret =  BSP_ERROR_PERIPH_FAILURE;
 800f7be:	f06f 0303 	mvn.w	r3, #3
 800f7c2:	617b      	str	r3, [r7, #20]
  }
#if defined(BSP_USE_CMSIS_OS)
  /* Release semaphore to prevent multiple I2C access */
  osSemaphoreRelease(BspI2cSemaphore);
#endif
  return ret;
 800f7c4:	697b      	ldr	r3, [r7, #20]
}
 800f7c6:	4618      	mov	r0, r3
 800f7c8:	3718      	adds	r7, #24
 800f7ca:	46bd      	mov	sp, r7
 800f7cc:	bd80      	pop	{r7, pc}
 800f7ce:	bf00      	nop
 800f7d0:	2400b690 	.word	0x2400b690

0800f7d4 <BSP_I2C4_ReadReg>:
  * @param  pData   Pointer to data buffer
  * @param  Length  Length of the data
  * @retval BSP status
  */
int32_t BSP_I2C4_ReadReg(uint16_t DevAddr, uint16_t Reg, uint8_t *pData, uint16_t Length)
{
 800f7d4:	b580      	push	{r7, lr}
 800f7d6:	b088      	sub	sp, #32
 800f7d8:	af02      	add	r7, sp, #8
 800f7da:	60ba      	str	r2, [r7, #8]
 800f7dc:	461a      	mov	r2, r3
 800f7de:	4603      	mov	r3, r0
 800f7e0:	81fb      	strh	r3, [r7, #14]
 800f7e2:	460b      	mov	r3, r1
 800f7e4:	81bb      	strh	r3, [r7, #12]
 800f7e6:	4613      	mov	r3, r2
 800f7e8:	80fb      	strh	r3, [r7, #6]
  int32_t ret;
#if defined(BSP_USE_CMSIS_OS)
  /* Get semaphore to prevent multiple I2C access */
  osSemaphoreWait(BspI2cSemaphore, osWaitForever);
#endif
  if(I2C4_ReadReg(DevAddr, Reg, I2C_MEMADD_SIZE_8BIT, pData, Length) == 0)
 800f7ea:	89b9      	ldrh	r1, [r7, #12]
 800f7ec:	89f8      	ldrh	r0, [r7, #14]
 800f7ee:	88fb      	ldrh	r3, [r7, #6]
 800f7f0:	9300      	str	r3, [sp, #0]
 800f7f2:	68bb      	ldr	r3, [r7, #8]
 800f7f4:	2201      	movs	r2, #1
 800f7f6:	f000 fb4f 	bl	800fe98 <I2C4_ReadReg>
 800f7fa:	4603      	mov	r3, r0
 800f7fc:	2b00      	cmp	r3, #0
 800f7fe:	d102      	bne.n	800f806 <BSP_I2C4_ReadReg+0x32>
  {
    ret = BSP_ERROR_NONE;
 800f800:	2300      	movs	r3, #0
 800f802:	617b      	str	r3, [r7, #20]
 800f804:	e00c      	b.n	800f820 <BSP_I2C4_ReadReg+0x4c>
  }
  else
  {
    if( HAL_I2C_GetError(&hbus_i2c4) == HAL_I2C_ERROR_AF)
 800f806:	4809      	ldr	r0, [pc, #36]	@ (800f82c <BSP_I2C4_ReadReg+0x58>)
 800f808:	f002 fe38 	bl	801247c <HAL_I2C_GetError>
 800f80c:	4603      	mov	r3, r0
 800f80e:	2b04      	cmp	r3, #4
 800f810:	d103      	bne.n	800f81a <BSP_I2C4_ReadReg+0x46>
    {
      ret = BSP_ERROR_BUS_ACKNOWLEDGE_FAILURE;
 800f812:	f06f 0365 	mvn.w	r3, #101	@ 0x65
 800f816:	617b      	str	r3, [r7, #20]
 800f818:	e002      	b.n	800f820 <BSP_I2C4_ReadReg+0x4c>
    }
    else
    {
      ret =  BSP_ERROR_PERIPH_FAILURE;
 800f81a:	f06f 0303 	mvn.w	r3, #3
 800f81e:	617b      	str	r3, [r7, #20]
  }
#if defined(BSP_USE_CMSIS_OS)
  /* Release semaphore to prevent multiple I2C access */
  osSemaphoreRelease(BspI2cSemaphore);
#endif
  return ret;
 800f820:	697b      	ldr	r3, [r7, #20]
}
 800f822:	4618      	mov	r0, r3
 800f824:	3718      	adds	r7, #24
 800f826:	46bd      	mov	sp, r7
 800f828:	bd80      	pop	{r7, pc}
 800f82a:	bf00      	nop
 800f82c:	2400b690 	.word	0x2400b690

0800f830 <BSP_GetTick>:
/**
  * @brief  Delay function
  * @retval Tick value
  */
int32_t BSP_GetTick(void)
{
 800f830:	b580      	push	{r7, lr}
 800f832:	af00      	add	r7, sp, #0
  return (int32_t)HAL_GetTick();
 800f834:	f001 fbec 	bl	8011010 <HAL_GetTick>
 800f838:	4603      	mov	r3, r0
}
 800f83a:	4618      	mov	r0, r3
 800f83c:	bd80      	pop	{r7, pc}
	...

0800f840 <I2C_GetTiming>:
  * @param  clock_src_freq I2C clock source in Hz.
  * @param  i2c_freq Required I2C clock in Hz.
  * @retval I2C timing or 0 in case of error.
  */
static uint32_t I2C_GetTiming(uint32_t clock_src_freq, uint32_t i2c_freq)
{
 800f840:	b580      	push	{r7, lr}
 800f842:	b086      	sub	sp, #24
 800f844:	af00      	add	r7, sp, #0
 800f846:	6078      	str	r0, [r7, #4]
 800f848:	6039      	str	r1, [r7, #0]
  uint32_t ret = 0;
 800f84a:	2300      	movs	r3, #0
 800f84c:	617b      	str	r3, [r7, #20]
  uint32_t speed;
  uint32_t idx;

  if((clock_src_freq != 0U) && (i2c_freq != 0U))
 800f84e:	687b      	ldr	r3, [r7, #4]
 800f850:	2b00      	cmp	r3, #0
 800f852:	d06b      	beq.n	800f92c <I2C_GetTiming+0xec>
 800f854:	683b      	ldr	r3, [r7, #0]
 800f856:	2b00      	cmp	r3, #0
 800f858:	d068      	beq.n	800f92c <I2C_GetTiming+0xec>
  {
    for ( speed = 0 ; speed <=  (uint32_t)I2C_SPEED_FREQ_FAST_PLUS ; speed++)
 800f85a:	2300      	movs	r3, #0
 800f85c:	613b      	str	r3, [r7, #16]
 800f85e:	e060      	b.n	800f922 <I2C_GetTiming+0xe2>
    {
      if ((i2c_freq >= I2C_Charac[speed].freq_min) &&
 800f860:	4a35      	ldr	r2, [pc, #212]	@ (800f938 <I2C_GetTiming+0xf8>)
 800f862:	693b      	ldr	r3, [r7, #16]
 800f864:	212c      	movs	r1, #44	@ 0x2c
 800f866:	fb01 f303 	mul.w	r3, r1, r3
 800f86a:	4413      	add	r3, r2
 800f86c:	3304      	adds	r3, #4
 800f86e:	681b      	ldr	r3, [r3, #0]
 800f870:	683a      	ldr	r2, [r7, #0]
 800f872:	429a      	cmp	r2, r3
 800f874:	d352      	bcc.n	800f91c <I2C_GetTiming+0xdc>
          (i2c_freq <= I2C_Charac[speed].freq_max))
 800f876:	4a30      	ldr	r2, [pc, #192]	@ (800f938 <I2C_GetTiming+0xf8>)
 800f878:	693b      	ldr	r3, [r7, #16]
 800f87a:	212c      	movs	r1, #44	@ 0x2c
 800f87c:	fb01 f303 	mul.w	r3, r1, r3
 800f880:	4413      	add	r3, r2
 800f882:	3308      	adds	r3, #8
 800f884:	681b      	ldr	r3, [r3, #0]
      if ((i2c_freq >= I2C_Charac[speed].freq_min) &&
 800f886:	683a      	ldr	r2, [r7, #0]
 800f888:	429a      	cmp	r2, r3
 800f88a:	d847      	bhi.n	800f91c <I2C_GetTiming+0xdc>
      {
        I2C_Compute_PRESC_SCLDEL_SDADEL(clock_src_freq, speed);
 800f88c:	6939      	ldr	r1, [r7, #16]
 800f88e:	6878      	ldr	r0, [r7, #4]
 800f890:	f000 f856 	bl	800f940 <I2C_Compute_PRESC_SCLDEL_SDADEL>
        idx = I2C_Compute_SCLL_SCLH(clock_src_freq, speed);
 800f894:	6939      	ldr	r1, [r7, #16]
 800f896:	6878      	ldr	r0, [r7, #4]
 800f898:	f000 f940 	bl	800fb1c <I2C_Compute_SCLL_SCLH>
 800f89c:	60f8      	str	r0, [r7, #12]

        if (idx < I2C_VALID_TIMING_NBR)
 800f89e:	68fb      	ldr	r3, [r7, #12]
 800f8a0:	2b7f      	cmp	r3, #127	@ 0x7f
 800f8a2:	d842      	bhi.n	800f92a <I2C_GetTiming+0xea>
        {
          ret = ((I2c_valid_timing[idx].presc  & 0x0FU) << 28) |\
 800f8a4:	4925      	ldr	r1, [pc, #148]	@ (800f93c <I2C_GetTiming+0xfc>)
 800f8a6:	68fa      	ldr	r2, [r7, #12]
 800f8a8:	4613      	mov	r3, r2
 800f8aa:	009b      	lsls	r3, r3, #2
 800f8ac:	4413      	add	r3, r2
 800f8ae:	009b      	lsls	r3, r3, #2
 800f8b0:	440b      	add	r3, r1
 800f8b2:	681b      	ldr	r3, [r3, #0]
 800f8b4:	0719      	lsls	r1, r3, #28
                ((I2c_valid_timing[idx].tscldel & 0x0FU) << 20) |\
 800f8b6:	4821      	ldr	r0, [pc, #132]	@ (800f93c <I2C_GetTiming+0xfc>)
 800f8b8:	68fa      	ldr	r2, [r7, #12]
 800f8ba:	4613      	mov	r3, r2
 800f8bc:	009b      	lsls	r3, r3, #2
 800f8be:	4413      	add	r3, r2
 800f8c0:	009b      	lsls	r3, r3, #2
 800f8c2:	4403      	add	r3, r0
 800f8c4:	3304      	adds	r3, #4
 800f8c6:	681b      	ldr	r3, [r3, #0]
 800f8c8:	051b      	lsls	r3, r3, #20
 800f8ca:	f403 0370 	and.w	r3, r3, #15728640	@ 0xf00000
          ret = ((I2c_valid_timing[idx].presc  & 0x0FU) << 28) |\
 800f8ce:	4319      	orrs	r1, r3
                ((I2c_valid_timing[idx].tsdadel & 0x0FU) << 16) |\
 800f8d0:	481a      	ldr	r0, [pc, #104]	@ (800f93c <I2C_GetTiming+0xfc>)
 800f8d2:	68fa      	ldr	r2, [r7, #12]
 800f8d4:	4613      	mov	r3, r2
 800f8d6:	009b      	lsls	r3, r3, #2
 800f8d8:	4413      	add	r3, r2
 800f8da:	009b      	lsls	r3, r3, #2
 800f8dc:	4403      	add	r3, r0
 800f8de:	3308      	adds	r3, #8
 800f8e0:	681b      	ldr	r3, [r3, #0]
 800f8e2:	041b      	lsls	r3, r3, #16
 800f8e4:	f403 2370 	and.w	r3, r3, #983040	@ 0xf0000
                ((I2c_valid_timing[idx].tscldel & 0x0FU) << 20) |\
 800f8e8:	4319      	orrs	r1, r3
                ((I2c_valid_timing[idx].sclh & 0xFFU) << 8) |\
 800f8ea:	4814      	ldr	r0, [pc, #80]	@ (800f93c <I2C_GetTiming+0xfc>)
 800f8ec:	68fa      	ldr	r2, [r7, #12]
 800f8ee:	4613      	mov	r3, r2
 800f8f0:	009b      	lsls	r3, r3, #2
 800f8f2:	4413      	add	r3, r2
 800f8f4:	009b      	lsls	r3, r3, #2
 800f8f6:	4403      	add	r3, r0
 800f8f8:	330c      	adds	r3, #12
 800f8fa:	681b      	ldr	r3, [r3, #0]
 800f8fc:	021b      	lsls	r3, r3, #8
 800f8fe:	b29b      	uxth	r3, r3
                ((I2c_valid_timing[idx].tsdadel & 0x0FU) << 16) |\
 800f900:	4319      	orrs	r1, r3
                ((I2c_valid_timing[idx].scll & 0xFFU) << 0);
 800f902:	480e      	ldr	r0, [pc, #56]	@ (800f93c <I2C_GetTiming+0xfc>)
 800f904:	68fa      	ldr	r2, [r7, #12]
 800f906:	4613      	mov	r3, r2
 800f908:	009b      	lsls	r3, r3, #2
 800f90a:	4413      	add	r3, r2
 800f90c:	009b      	lsls	r3, r3, #2
 800f90e:	4403      	add	r3, r0
 800f910:	3310      	adds	r3, #16
 800f912:	681b      	ldr	r3, [r3, #0]
 800f914:	b2db      	uxtb	r3, r3
          ret = ((I2c_valid_timing[idx].presc  & 0x0FU) << 28) |\
 800f916:	430b      	orrs	r3, r1
 800f918:	617b      	str	r3, [r7, #20]
        }
        break;
 800f91a:	e006      	b.n	800f92a <I2C_GetTiming+0xea>
    for ( speed = 0 ; speed <=  (uint32_t)I2C_SPEED_FREQ_FAST_PLUS ; speed++)
 800f91c:	693b      	ldr	r3, [r7, #16]
 800f91e:	3301      	adds	r3, #1
 800f920:	613b      	str	r3, [r7, #16]
 800f922:	693b      	ldr	r3, [r7, #16]
 800f924:	2b02      	cmp	r3, #2
 800f926:	d99b      	bls.n	800f860 <I2C_GetTiming+0x20>
 800f928:	e000      	b.n	800f92c <I2C_GetTiming+0xec>
        break;
 800f92a:	bf00      	nop
      }
    }
  }

  return ret;
 800f92c:	697b      	ldr	r3, [r7, #20]
}
 800f92e:	4618      	mov	r0, r3
 800f930:	3718      	adds	r7, #24
 800f932:	46bd      	mov	sp, r7
 800f934:	bd80      	pop	{r7, pc}
 800f936:	bf00      	nop
 800f938:	0802d5e4 	.word	0x0802d5e4
 800f93c:	2400ac8c 	.word	0x2400ac8c

0800f940 <I2C_Compute_PRESC_SCLDEL_SDADEL>:
  * @param  clock_src_freq I2C source clock in HZ.
  * @param  I2C_speed I2C frequency (index).
  * @retval None.
  */
static void I2C_Compute_PRESC_SCLDEL_SDADEL(uint32_t clock_src_freq, uint32_t I2C_speed)
{
 800f940:	b480      	push	{r7}
 800f942:	b08f      	sub	sp, #60	@ 0x3c
 800f944:	af00      	add	r7, sp, #0
 800f946:	6078      	str	r0, [r7, #4]
 800f948:	6039      	str	r1, [r7, #0]
  uint32_t prev_presc = I2C_PRESC_MAX;
 800f94a:	2310      	movs	r3, #16
 800f94c:	637b      	str	r3, [r7, #52]	@ 0x34
  int32_t  tsdadel_min, tsdadel_max;
  int32_t  tscldel_min;
  uint32_t presc, scldel, sdadel;
  uint32_t tafdel_min, tafdel_max;

  ti2cclk   = (SEC2NSEC + (clock_src_freq / 2U))/ clock_src_freq;
 800f94e:	687b      	ldr	r3, [r7, #4]
 800f950:	085a      	lsrs	r2, r3, #1
 800f952:	4b6e      	ldr	r3, [pc, #440]	@ (800fb0c <I2C_Compute_PRESC_SCLDEL_SDADEL+0x1cc>)
 800f954:	4413      	add	r3, r2
 800f956:	687a      	ldr	r2, [r7, #4]
 800f958:	fbb3 f3f2 	udiv	r3, r3, r2
 800f95c:	61fb      	str	r3, [r7, #28]

  tafdel_min = I2C_ANALOG_FILTER_DELAY_MIN;
 800f95e:	2332      	movs	r3, #50	@ 0x32
 800f960:	61bb      	str	r3, [r7, #24]
  tafdel_max = I2C_ANALOG_FILTER_DELAY_MAX;
 800f962:	f44f 7382 	mov.w	r3, #260	@ 0x104
 800f966:	617b      	str	r3, [r7, #20]
  /* tDNF = DNF x tI2CCLK
     tPRESC = (PRESC+1) x tI2CCLK
     SDADEL >= {tf +tHD;DAT(min) - tAF(min) - tDNF - [3 x tI2CCLK]} / {tPRESC}
     SDADEL <= {tVD;DAT(max) - tr - tAF(max) - tDNF- [4 x tI2CCLK]} / {tPRESC} */

  tsdadel_min = (int32_t)I2C_Charac[I2C_speed].tfall + (int32_t)I2C_Charac[I2C_speed].hddat_min -
 800f968:	4a69      	ldr	r2, [pc, #420]	@ (800fb10 <I2C_Compute_PRESC_SCLDEL_SDADEL+0x1d0>)
 800f96a:	683b      	ldr	r3, [r7, #0]
 800f96c:	212c      	movs	r1, #44	@ 0x2c
 800f96e:	fb01 f303 	mul.w	r3, r1, r3
 800f972:	4413      	add	r3, r2
 800f974:	3324      	adds	r3, #36	@ 0x24
 800f976:	681b      	ldr	r3, [r3, #0]
 800f978:	4618      	mov	r0, r3
 800f97a:	4a65      	ldr	r2, [pc, #404]	@ (800fb10 <I2C_Compute_PRESC_SCLDEL_SDADEL+0x1d0>)
 800f97c:	683b      	ldr	r3, [r7, #0]
 800f97e:	212c      	movs	r1, #44	@ 0x2c
 800f980:	fb01 f303 	mul.w	r3, r1, r3
 800f984:	4413      	add	r3, r2
 800f986:	330c      	adds	r3, #12
 800f988:	681b      	ldr	r3, [r3, #0]
 800f98a:	18c2      	adds	r2, r0, r3
    (int32_t)tafdel_min - (int32_t)(((int32_t)I2C_Charac[I2C_speed].dnf + 3) * (int32_t)ti2cclk);
 800f98c:	69bb      	ldr	r3, [r7, #24]
  tsdadel_min = (int32_t)I2C_Charac[I2C_speed].tfall + (int32_t)I2C_Charac[I2C_speed].hddat_min -
 800f98e:	1ad2      	subs	r2, r2, r3
    (int32_t)tafdel_min - (int32_t)(((int32_t)I2C_Charac[I2C_speed].dnf + 3) * (int32_t)ti2cclk);
 800f990:	495f      	ldr	r1, [pc, #380]	@ (800fb10 <I2C_Compute_PRESC_SCLDEL_SDADEL+0x1d0>)
 800f992:	683b      	ldr	r3, [r7, #0]
 800f994:	202c      	movs	r0, #44	@ 0x2c
 800f996:	fb00 f303 	mul.w	r3, r0, r3
 800f99a:	440b      	add	r3, r1
 800f99c:	3328      	adds	r3, #40	@ 0x28
 800f99e:	681b      	ldr	r3, [r3, #0]
 800f9a0:	3303      	adds	r3, #3
 800f9a2:	69f9      	ldr	r1, [r7, #28]
 800f9a4:	fb01 f303 	mul.w	r3, r1, r3
  tsdadel_min = (int32_t)I2C_Charac[I2C_speed].tfall + (int32_t)I2C_Charac[I2C_speed].hddat_min -
 800f9a8:	1ad3      	subs	r3, r2, r3
 800f9aa:	633b      	str	r3, [r7, #48]	@ 0x30

  tsdadel_max = (int32_t)I2C_Charac[I2C_speed].vddat_max - (int32_t)I2C_Charac[I2C_speed].trise -
 800f9ac:	4a58      	ldr	r2, [pc, #352]	@ (800fb10 <I2C_Compute_PRESC_SCLDEL_SDADEL+0x1d0>)
 800f9ae:	683b      	ldr	r3, [r7, #0]
 800f9b0:	212c      	movs	r1, #44	@ 0x2c
 800f9b2:	fb01 f303 	mul.w	r3, r1, r3
 800f9b6:	4413      	add	r3, r2
 800f9b8:	3310      	adds	r3, #16
 800f9ba:	681b      	ldr	r3, [r3, #0]
 800f9bc:	4618      	mov	r0, r3
 800f9be:	4a54      	ldr	r2, [pc, #336]	@ (800fb10 <I2C_Compute_PRESC_SCLDEL_SDADEL+0x1d0>)
 800f9c0:	683b      	ldr	r3, [r7, #0]
 800f9c2:	212c      	movs	r1, #44	@ 0x2c
 800f9c4:	fb01 f303 	mul.w	r3, r1, r3
 800f9c8:	4413      	add	r3, r2
 800f9ca:	3320      	adds	r3, #32
 800f9cc:	681b      	ldr	r3, [r3, #0]
 800f9ce:	1ac2      	subs	r2, r0, r3
    (int32_t)tafdel_max - (int32_t)(((int32_t)I2C_Charac[I2C_speed].dnf + 4) * (int32_t)ti2cclk);
 800f9d0:	697b      	ldr	r3, [r7, #20]
  tsdadel_max = (int32_t)I2C_Charac[I2C_speed].vddat_max - (int32_t)I2C_Charac[I2C_speed].trise -
 800f9d2:	1ad2      	subs	r2, r2, r3
    (int32_t)tafdel_max - (int32_t)(((int32_t)I2C_Charac[I2C_speed].dnf + 4) * (int32_t)ti2cclk);
 800f9d4:	494e      	ldr	r1, [pc, #312]	@ (800fb10 <I2C_Compute_PRESC_SCLDEL_SDADEL+0x1d0>)
 800f9d6:	683b      	ldr	r3, [r7, #0]
 800f9d8:	202c      	movs	r0, #44	@ 0x2c
 800f9da:	fb00 f303 	mul.w	r3, r0, r3
 800f9de:	440b      	add	r3, r1
 800f9e0:	3328      	adds	r3, #40	@ 0x28
 800f9e2:	681b      	ldr	r3, [r3, #0]
 800f9e4:	3304      	adds	r3, #4
 800f9e6:	69f9      	ldr	r1, [r7, #28]
 800f9e8:	fb01 f303 	mul.w	r3, r1, r3
  tsdadel_max = (int32_t)I2C_Charac[I2C_speed].vddat_max - (int32_t)I2C_Charac[I2C_speed].trise -
 800f9ec:	1ad3      	subs	r3, r2, r3
 800f9ee:	62fb      	str	r3, [r7, #44]	@ 0x2c


  /* {[tr+ tSU;DAT(min)] / [tPRESC]} - 1 <= SCLDEL */
  tscldel_min = (int32_t)I2C_Charac[I2C_speed].trise + (int32_t)I2C_Charac[I2C_speed].sudat_min;
 800f9f0:	4a47      	ldr	r2, [pc, #284]	@ (800fb10 <I2C_Compute_PRESC_SCLDEL_SDADEL+0x1d0>)
 800f9f2:	683b      	ldr	r3, [r7, #0]
 800f9f4:	212c      	movs	r1, #44	@ 0x2c
 800f9f6:	fb01 f303 	mul.w	r3, r1, r3
 800f9fa:	4413      	add	r3, r2
 800f9fc:	3320      	adds	r3, #32
 800f9fe:	681b      	ldr	r3, [r3, #0]
 800fa00:	4618      	mov	r0, r3
 800fa02:	4a43      	ldr	r2, [pc, #268]	@ (800fb10 <I2C_Compute_PRESC_SCLDEL_SDADEL+0x1d0>)
 800fa04:	683b      	ldr	r3, [r7, #0]
 800fa06:	212c      	movs	r1, #44	@ 0x2c
 800fa08:	fb01 f303 	mul.w	r3, r1, r3
 800fa0c:	4413      	add	r3, r2
 800fa0e:	3314      	adds	r3, #20
 800fa10:	681b      	ldr	r3, [r3, #0]
 800fa12:	4403      	add	r3, r0
 800fa14:	613b      	str	r3, [r7, #16]

  if (tsdadel_min <= 0)
 800fa16:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800fa18:	2b00      	cmp	r3, #0
 800fa1a:	dc01      	bgt.n	800fa20 <I2C_Compute_PRESC_SCLDEL_SDADEL+0xe0>
  {
    tsdadel_min = 0;
 800fa1c:	2300      	movs	r3, #0
 800fa1e:	633b      	str	r3, [r7, #48]	@ 0x30
  }

  if (tsdadel_max <= 0)
 800fa20:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800fa22:	2b00      	cmp	r3, #0
 800fa24:	dc01      	bgt.n	800fa2a <I2C_Compute_PRESC_SCLDEL_SDADEL+0xea>
  {
    tsdadel_max = 0;
 800fa26:	2300      	movs	r3, #0
 800fa28:	62fb      	str	r3, [r7, #44]	@ 0x2c
  }

  for (presc = 0; presc < I2C_PRESC_MAX; presc++)
 800fa2a:	2300      	movs	r3, #0
 800fa2c:	62bb      	str	r3, [r7, #40]	@ 0x28
 800fa2e:	e062      	b.n	800faf6 <I2C_Compute_PRESC_SCLDEL_SDADEL+0x1b6>
  {
    for (scldel = 0; scldel < I2C_SCLDEL_MAX; scldel++)
 800fa30:	2300      	movs	r3, #0
 800fa32:	627b      	str	r3, [r7, #36]	@ 0x24
 800fa34:	e059      	b.n	800faea <I2C_Compute_PRESC_SCLDEL_SDADEL+0x1aa>
    {
      /* TSCLDEL = (SCLDEL+1) * (PRESC+1) * TI2CCLK */
      uint32_t tscldel = (scldel + 1U) * (presc + 1U) * ti2cclk;
 800fa36:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800fa38:	3301      	adds	r3, #1
 800fa3a:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800fa3c:	3201      	adds	r2, #1
 800fa3e:	fb03 f202 	mul.w	r2, r3, r2
 800fa42:	69fb      	ldr	r3, [r7, #28]
 800fa44:	fb02 f303 	mul.w	r3, r2, r3
 800fa48:	60fb      	str	r3, [r7, #12]

      if (tscldel >= (uint32_t)tscldel_min)
 800fa4a:	693b      	ldr	r3, [r7, #16]
 800fa4c:	68fa      	ldr	r2, [r7, #12]
 800fa4e:	429a      	cmp	r2, r3
 800fa50:	d348      	bcc.n	800fae4 <I2C_Compute_PRESC_SCLDEL_SDADEL+0x1a4>
      {
        for (sdadel = 0; sdadel < I2C_SDADEL_MAX; sdadel++)
 800fa52:	2300      	movs	r3, #0
 800fa54:	623b      	str	r3, [r7, #32]
 800fa56:	e042      	b.n	800fade <I2C_Compute_PRESC_SCLDEL_SDADEL+0x19e>
        {
          /* TSDADEL = SDADEL * (PRESC+1) * TI2CCLK */
          uint32_t tsdadel = (sdadel * (presc + 1U)) * ti2cclk;
 800fa58:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800fa5a:	3301      	adds	r3, #1
 800fa5c:	6a3a      	ldr	r2, [r7, #32]
 800fa5e:	fb03 f202 	mul.w	r2, r3, r2
 800fa62:	69fb      	ldr	r3, [r7, #28]
 800fa64:	fb02 f303 	mul.w	r3, r2, r3
 800fa68:	60bb      	str	r3, [r7, #8]

          if ((tsdadel >= (uint32_t)tsdadel_min) && (tsdadel <= (uint32_t)tsdadel_max))
 800fa6a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800fa6c:	68ba      	ldr	r2, [r7, #8]
 800fa6e:	429a      	cmp	r2, r3
 800fa70:	d332      	bcc.n	800fad8 <I2C_Compute_PRESC_SCLDEL_SDADEL+0x198>
 800fa72:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800fa74:	68ba      	ldr	r2, [r7, #8]
 800fa76:	429a      	cmp	r2, r3
 800fa78:	d82e      	bhi.n	800fad8 <I2C_Compute_PRESC_SCLDEL_SDADEL+0x198>
          {
            if(presc != prev_presc)
 800fa7a:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800fa7c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800fa7e:	429a      	cmp	r2, r3
 800fa80:	d02a      	beq.n	800fad8 <I2C_Compute_PRESC_SCLDEL_SDADEL+0x198>
            {
              I2c_valid_timing[I2c_valid_timing_nbr].presc = presc;
 800fa82:	4b24      	ldr	r3, [pc, #144]	@ (800fb14 <I2C_Compute_PRESC_SCLDEL_SDADEL+0x1d4>)
 800fa84:	681a      	ldr	r2, [r3, #0]
 800fa86:	4924      	ldr	r1, [pc, #144]	@ (800fb18 <I2C_Compute_PRESC_SCLDEL_SDADEL+0x1d8>)
 800fa88:	4613      	mov	r3, r2
 800fa8a:	009b      	lsls	r3, r3, #2
 800fa8c:	4413      	add	r3, r2
 800fa8e:	009b      	lsls	r3, r3, #2
 800fa90:	440b      	add	r3, r1
 800fa92:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800fa94:	601a      	str	r2, [r3, #0]
              I2c_valid_timing[I2c_valid_timing_nbr].tscldel = scldel;
 800fa96:	4b1f      	ldr	r3, [pc, #124]	@ (800fb14 <I2C_Compute_PRESC_SCLDEL_SDADEL+0x1d4>)
 800fa98:	681a      	ldr	r2, [r3, #0]
 800fa9a:	491f      	ldr	r1, [pc, #124]	@ (800fb18 <I2C_Compute_PRESC_SCLDEL_SDADEL+0x1d8>)
 800fa9c:	4613      	mov	r3, r2
 800fa9e:	009b      	lsls	r3, r3, #2
 800faa0:	4413      	add	r3, r2
 800faa2:	009b      	lsls	r3, r3, #2
 800faa4:	440b      	add	r3, r1
 800faa6:	3304      	adds	r3, #4
 800faa8:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800faaa:	601a      	str	r2, [r3, #0]
              I2c_valid_timing[I2c_valid_timing_nbr].tsdadel = sdadel;
 800faac:	4b19      	ldr	r3, [pc, #100]	@ (800fb14 <I2C_Compute_PRESC_SCLDEL_SDADEL+0x1d4>)
 800faae:	681a      	ldr	r2, [r3, #0]
 800fab0:	4919      	ldr	r1, [pc, #100]	@ (800fb18 <I2C_Compute_PRESC_SCLDEL_SDADEL+0x1d8>)
 800fab2:	4613      	mov	r3, r2
 800fab4:	009b      	lsls	r3, r3, #2
 800fab6:	4413      	add	r3, r2
 800fab8:	009b      	lsls	r3, r3, #2
 800faba:	440b      	add	r3, r1
 800fabc:	3308      	adds	r3, #8
 800fabe:	6a3a      	ldr	r2, [r7, #32]
 800fac0:	601a      	str	r2, [r3, #0]
              prev_presc = presc;
 800fac2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800fac4:	637b      	str	r3, [r7, #52]	@ 0x34
              I2c_valid_timing_nbr ++;
 800fac6:	4b13      	ldr	r3, [pc, #76]	@ (800fb14 <I2C_Compute_PRESC_SCLDEL_SDADEL+0x1d4>)
 800fac8:	681b      	ldr	r3, [r3, #0]
 800faca:	3301      	adds	r3, #1
 800facc:	4a11      	ldr	r2, [pc, #68]	@ (800fb14 <I2C_Compute_PRESC_SCLDEL_SDADEL+0x1d4>)
 800face:	6013      	str	r3, [r2, #0]

              if(I2c_valid_timing_nbr >= I2C_VALID_TIMING_NBR)
 800fad0:	4b10      	ldr	r3, [pc, #64]	@ (800fb14 <I2C_Compute_PRESC_SCLDEL_SDADEL+0x1d4>)
 800fad2:	681b      	ldr	r3, [r3, #0]
 800fad4:	2b7f      	cmp	r3, #127	@ 0x7f
 800fad6:	d812      	bhi.n	800fafe <I2C_Compute_PRESC_SCLDEL_SDADEL+0x1be>
        for (sdadel = 0; sdadel < I2C_SDADEL_MAX; sdadel++)
 800fad8:	6a3b      	ldr	r3, [r7, #32]
 800fada:	3301      	adds	r3, #1
 800fadc:	623b      	str	r3, [r7, #32]
 800fade:	6a3b      	ldr	r3, [r7, #32]
 800fae0:	2b0f      	cmp	r3, #15
 800fae2:	d9b9      	bls.n	800fa58 <I2C_Compute_PRESC_SCLDEL_SDADEL+0x118>
    for (scldel = 0; scldel < I2C_SCLDEL_MAX; scldel++)
 800fae4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800fae6:	3301      	adds	r3, #1
 800fae8:	627b      	str	r3, [r7, #36]	@ 0x24
 800faea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800faec:	2b0f      	cmp	r3, #15
 800faee:	d9a2      	bls.n	800fa36 <I2C_Compute_PRESC_SCLDEL_SDADEL+0xf6>
  for (presc = 0; presc < I2C_PRESC_MAX; presc++)
 800faf0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800faf2:	3301      	adds	r3, #1
 800faf4:	62bb      	str	r3, [r7, #40]	@ 0x28
 800faf6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800faf8:	2b0f      	cmp	r3, #15
 800fafa:	d999      	bls.n	800fa30 <I2C_Compute_PRESC_SCLDEL_SDADEL+0xf0>
 800fafc:	e000      	b.n	800fb00 <I2C_Compute_PRESC_SCLDEL_SDADEL+0x1c0>
              {
                return;
 800fafe:	bf00      	nop
          }
        }
      }
    }
  }
}
 800fb00:	373c      	adds	r7, #60	@ 0x3c
 800fb02:	46bd      	mov	sp, r7
 800fb04:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fb08:	4770      	bx	lr
 800fb0a:	bf00      	nop
 800fb0c:	3b9aca00 	.word	0x3b9aca00
 800fb10:	0802d5e4 	.word	0x0802d5e4
 800fb14:	2400b68c 	.word	0x2400b68c
 800fb18:	2400ac8c 	.word	0x2400ac8c

0800fb1c <I2C_Compute_SCLL_SCLH>:
  * @param  clock_src_freq I2C source clock in HZ.
  * @param  I2C_speed I2C frequency (index).
  * @retval config index (0 to I2C_VALID_TIMING_NBR], 0xFFFFFFFF for no valid config.
  */
static uint32_t I2C_Compute_SCLL_SCLH (uint32_t clock_src_freq, uint32_t I2C_speed)
{
 800fb1c:	b480      	push	{r7}
 800fb1e:	b093      	sub	sp, #76	@ 0x4c
 800fb20:	af00      	add	r7, sp, #0
 800fb22:	6078      	str	r0, [r7, #4]
 800fb24:	6039      	str	r1, [r7, #0]
 uint32_t ret = 0xFFFFFFFFU;
 800fb26:	f04f 33ff 	mov.w	r3, #4294967295
 800fb2a:	647b      	str	r3, [r7, #68]	@ 0x44
  uint32_t dnf_delay;
  uint32_t clk_min, clk_max;
  uint32_t scll, sclh;
  uint32_t tafdel_min;

  ti2cclk   = (SEC2NSEC + (clock_src_freq / 2U))/ clock_src_freq;
 800fb2c:	687b      	ldr	r3, [r7, #4]
 800fb2e:	085a      	lsrs	r2, r3, #1
 800fb30:	4b7a      	ldr	r3, [pc, #488]	@ (800fd1c <I2C_Compute_SCLL_SCLH+0x200>)
 800fb32:	4413      	add	r3, r2
 800fb34:	687a      	ldr	r2, [r7, #4]
 800fb36:	fbb3 f3f2 	udiv	r3, r3, r2
 800fb3a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  ti2cspeed   = (SEC2NSEC + (I2C_Charac[I2C_speed].freq / 2U))/ I2C_Charac[I2C_speed].freq;
 800fb3c:	4a78      	ldr	r2, [pc, #480]	@ (800fd20 <I2C_Compute_SCLL_SCLH+0x204>)
 800fb3e:	683b      	ldr	r3, [r7, #0]
 800fb40:	212c      	movs	r1, #44	@ 0x2c
 800fb42:	fb01 f303 	mul.w	r3, r1, r3
 800fb46:	4413      	add	r3, r2
 800fb48:	681b      	ldr	r3, [r3, #0]
 800fb4a:	085a      	lsrs	r2, r3, #1
 800fb4c:	4b73      	ldr	r3, [pc, #460]	@ (800fd1c <I2C_Compute_SCLL_SCLH+0x200>)
 800fb4e:	4413      	add	r3, r2
 800fb50:	4973      	ldr	r1, [pc, #460]	@ (800fd20 <I2C_Compute_SCLL_SCLH+0x204>)
 800fb52:	683a      	ldr	r2, [r7, #0]
 800fb54:	202c      	movs	r0, #44	@ 0x2c
 800fb56:	fb00 f202 	mul.w	r2, r0, r2
 800fb5a:	440a      	add	r2, r1
 800fb5c:	6812      	ldr	r2, [r2, #0]
 800fb5e:	fbb3 f3f2 	udiv	r3, r3, r2
 800fb62:	62bb      	str	r3, [r7, #40]	@ 0x28

  tafdel_min = I2C_ANALOG_FILTER_DELAY_MIN;
 800fb64:	2332      	movs	r3, #50	@ 0x32
 800fb66:	627b      	str	r3, [r7, #36]	@ 0x24

  /* tDNF = DNF x tI2CCLK */
  dnf_delay = I2C_Charac[I2C_speed].dnf * ti2cclk;
 800fb68:	4a6d      	ldr	r2, [pc, #436]	@ (800fd20 <I2C_Compute_SCLL_SCLH+0x204>)
 800fb6a:	683b      	ldr	r3, [r7, #0]
 800fb6c:	212c      	movs	r1, #44	@ 0x2c
 800fb6e:	fb01 f303 	mul.w	r3, r1, r3
 800fb72:	4413      	add	r3, r2
 800fb74:	3328      	adds	r3, #40	@ 0x28
 800fb76:	681a      	ldr	r2, [r3, #0]
 800fb78:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800fb7a:	fb02 f303 	mul.w	r3, r2, r3
 800fb7e:	623b      	str	r3, [r7, #32]

  clk_max = SEC2NSEC / I2C_Charac[I2C_speed].freq_min;
 800fb80:	4a67      	ldr	r2, [pc, #412]	@ (800fd20 <I2C_Compute_SCLL_SCLH+0x204>)
 800fb82:	683b      	ldr	r3, [r7, #0]
 800fb84:	212c      	movs	r1, #44	@ 0x2c
 800fb86:	fb01 f303 	mul.w	r3, r1, r3
 800fb8a:	4413      	add	r3, r2
 800fb8c:	3304      	adds	r3, #4
 800fb8e:	681b      	ldr	r3, [r3, #0]
 800fb90:	4a62      	ldr	r2, [pc, #392]	@ (800fd1c <I2C_Compute_SCLL_SCLH+0x200>)
 800fb92:	fbb2 f3f3 	udiv	r3, r2, r3
 800fb96:	61fb      	str	r3, [r7, #28]
  clk_min = SEC2NSEC / I2C_Charac[I2C_speed].freq_max;
 800fb98:	4a61      	ldr	r2, [pc, #388]	@ (800fd20 <I2C_Compute_SCLL_SCLH+0x204>)
 800fb9a:	683b      	ldr	r3, [r7, #0]
 800fb9c:	212c      	movs	r1, #44	@ 0x2c
 800fb9e:	fb01 f303 	mul.w	r3, r1, r3
 800fba2:	4413      	add	r3, r2
 800fba4:	3308      	adds	r3, #8
 800fba6:	681b      	ldr	r3, [r3, #0]
 800fba8:	4a5c      	ldr	r2, [pc, #368]	@ (800fd1c <I2C_Compute_SCLL_SCLH+0x200>)
 800fbaa:	fbb2 f3f3 	udiv	r3, r2, r3
 800fbae:	61bb      	str	r3, [r7, #24]

  prev_error = ti2cspeed;
 800fbb0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800fbb2:	643b      	str	r3, [r7, #64]	@ 0x40

  for (uint32_t count = 0; count < I2c_valid_timing_nbr; count++)
 800fbb4:	2300      	movs	r3, #0
 800fbb6:	637b      	str	r3, [r7, #52]	@ 0x34
 800fbb8:	e0a3      	b.n	800fd02 <I2C_Compute_SCLL_SCLH+0x1e6>
  {
    /* tPRESC = (PRESC+1) x tI2CCLK*/
    uint32_t tpresc = (I2c_valid_timing[count].presc + 1U) * ti2cclk;
 800fbba:	495a      	ldr	r1, [pc, #360]	@ (800fd24 <I2C_Compute_SCLL_SCLH+0x208>)
 800fbbc:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800fbbe:	4613      	mov	r3, r2
 800fbc0:	009b      	lsls	r3, r3, #2
 800fbc2:	4413      	add	r3, r2
 800fbc4:	009b      	lsls	r3, r3, #2
 800fbc6:	440b      	add	r3, r1
 800fbc8:	681b      	ldr	r3, [r3, #0]
 800fbca:	1c5a      	adds	r2, r3, #1
 800fbcc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800fbce:	fb02 f303 	mul.w	r3, r2, r3
 800fbd2:	617b      	str	r3, [r7, #20]

    for (scll = 0; scll < I2C_SCLL_MAX; scll++)
 800fbd4:	2300      	movs	r3, #0
 800fbd6:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800fbd8:	e08c      	b.n	800fcf4 <I2C_Compute_SCLL_SCLH+0x1d8>
    {
      /* tLOW(min) <= tAF(min) + tDNF + 2 x tI2CCLK + [(SCLL+1) x tPRESC ] */
      uint32_t tscl_l = tafdel_min + dnf_delay + (2U * ti2cclk) + ((scll + 1U) * tpresc);
 800fbda:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800fbdc:	6a3b      	ldr	r3, [r7, #32]
 800fbde:	441a      	add	r2, r3
 800fbe0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800fbe2:	3301      	adds	r3, #1
 800fbe4:	6979      	ldr	r1, [r7, #20]
 800fbe6:	fb03 f101 	mul.w	r1, r3, r1
 800fbea:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800fbec:	005b      	lsls	r3, r3, #1
 800fbee:	440b      	add	r3, r1
 800fbf0:	4413      	add	r3, r2
 800fbf2:	613b      	str	r3, [r7, #16]


      /* The I2CCLK period tI2CCLK must respect the following conditions:
      tI2CCLK < (tLOW - tfilters) / 4 and tI2CCLK < tHIGH */
      if ((tscl_l > I2C_Charac[I2C_speed].lscl_min) && (ti2cclk < ((tscl_l - tafdel_min - dnf_delay) / 4U)))
 800fbf4:	4a4a      	ldr	r2, [pc, #296]	@ (800fd20 <I2C_Compute_SCLL_SCLH+0x204>)
 800fbf6:	683b      	ldr	r3, [r7, #0]
 800fbf8:	212c      	movs	r1, #44	@ 0x2c
 800fbfa:	fb01 f303 	mul.w	r3, r1, r3
 800fbfe:	4413      	add	r3, r2
 800fc00:	3318      	adds	r3, #24
 800fc02:	681b      	ldr	r3, [r3, #0]
 800fc04:	693a      	ldr	r2, [r7, #16]
 800fc06:	429a      	cmp	r2, r3
 800fc08:	d971      	bls.n	800fcee <I2C_Compute_SCLL_SCLH+0x1d2>
 800fc0a:	693a      	ldr	r2, [r7, #16]
 800fc0c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800fc0e:	1ad2      	subs	r2, r2, r3
 800fc10:	6a3b      	ldr	r3, [r7, #32]
 800fc12:	1ad3      	subs	r3, r2, r3
 800fc14:	089b      	lsrs	r3, r3, #2
 800fc16:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800fc18:	429a      	cmp	r2, r3
 800fc1a:	d268      	bcs.n	800fcee <I2C_Compute_SCLL_SCLH+0x1d2>
      {
        for (sclh = 0; sclh < I2C_SCLH_MAX; sclh++)
 800fc1c:	2300      	movs	r3, #0
 800fc1e:	63bb      	str	r3, [r7, #56]	@ 0x38
 800fc20:	e062      	b.n	800fce8 <I2C_Compute_SCLL_SCLH+0x1cc>
        {
          /* tHIGH(min) <= tAF(min) + tDNF + 2 x tI2CCLK + [(SCLH+1) x tPRESC] */
          uint32_t tscl_h = tafdel_min + dnf_delay + (2U * ti2cclk) + ((sclh + 1U) * tpresc);
 800fc22:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800fc24:	6a3b      	ldr	r3, [r7, #32]
 800fc26:	441a      	add	r2, r3
 800fc28:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800fc2a:	3301      	adds	r3, #1
 800fc2c:	6979      	ldr	r1, [r7, #20]
 800fc2e:	fb03 f101 	mul.w	r1, r3, r1
 800fc32:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800fc34:	005b      	lsls	r3, r3, #1
 800fc36:	440b      	add	r3, r1
 800fc38:	4413      	add	r3, r2
 800fc3a:	60fb      	str	r3, [r7, #12]

          /* tSCL = tf + tLOW + tr + tHIGH */
          uint32_t tscl = tscl_l + tscl_h + I2C_Charac[I2C_speed].trise + I2C_Charac[I2C_speed].tfall;
 800fc3c:	693a      	ldr	r2, [r7, #16]
 800fc3e:	68fb      	ldr	r3, [r7, #12]
 800fc40:	441a      	add	r2, r3
 800fc42:	4937      	ldr	r1, [pc, #220]	@ (800fd20 <I2C_Compute_SCLL_SCLH+0x204>)
 800fc44:	683b      	ldr	r3, [r7, #0]
 800fc46:	202c      	movs	r0, #44	@ 0x2c
 800fc48:	fb00 f303 	mul.w	r3, r0, r3
 800fc4c:	440b      	add	r3, r1
 800fc4e:	3320      	adds	r3, #32
 800fc50:	681b      	ldr	r3, [r3, #0]
 800fc52:	441a      	add	r2, r3
 800fc54:	4932      	ldr	r1, [pc, #200]	@ (800fd20 <I2C_Compute_SCLL_SCLH+0x204>)
 800fc56:	683b      	ldr	r3, [r7, #0]
 800fc58:	202c      	movs	r0, #44	@ 0x2c
 800fc5a:	fb00 f303 	mul.w	r3, r0, r3
 800fc5e:	440b      	add	r3, r1
 800fc60:	3324      	adds	r3, #36	@ 0x24
 800fc62:	681b      	ldr	r3, [r3, #0]
 800fc64:	4413      	add	r3, r2
 800fc66:	60bb      	str	r3, [r7, #8]

          if ((tscl >= clk_min) && (tscl <= clk_max) && (tscl_h >= I2C_Charac[I2C_speed].hscl_min) && (ti2cclk < tscl_h))
 800fc68:	68ba      	ldr	r2, [r7, #8]
 800fc6a:	69bb      	ldr	r3, [r7, #24]
 800fc6c:	429a      	cmp	r2, r3
 800fc6e:	d338      	bcc.n	800fce2 <I2C_Compute_SCLL_SCLH+0x1c6>
 800fc70:	68ba      	ldr	r2, [r7, #8]
 800fc72:	69fb      	ldr	r3, [r7, #28]
 800fc74:	429a      	cmp	r2, r3
 800fc76:	d834      	bhi.n	800fce2 <I2C_Compute_SCLL_SCLH+0x1c6>
 800fc78:	4a29      	ldr	r2, [pc, #164]	@ (800fd20 <I2C_Compute_SCLL_SCLH+0x204>)
 800fc7a:	683b      	ldr	r3, [r7, #0]
 800fc7c:	212c      	movs	r1, #44	@ 0x2c
 800fc7e:	fb01 f303 	mul.w	r3, r1, r3
 800fc82:	4413      	add	r3, r2
 800fc84:	331c      	adds	r3, #28
 800fc86:	681b      	ldr	r3, [r3, #0]
 800fc88:	68fa      	ldr	r2, [r7, #12]
 800fc8a:	429a      	cmp	r2, r3
 800fc8c:	d329      	bcc.n	800fce2 <I2C_Compute_SCLL_SCLH+0x1c6>
 800fc8e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800fc90:	68fb      	ldr	r3, [r7, #12]
 800fc92:	429a      	cmp	r2, r3
 800fc94:	d225      	bcs.n	800fce2 <I2C_Compute_SCLL_SCLH+0x1c6>
          {
            int32_t error = (int32_t)tscl - (int32_t)ti2cspeed;
 800fc96:	68ba      	ldr	r2, [r7, #8]
 800fc98:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800fc9a:	1ad3      	subs	r3, r2, r3
 800fc9c:	633b      	str	r3, [r7, #48]	@ 0x30

            if (error < 0)
 800fc9e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800fca0:	2b00      	cmp	r3, #0
 800fca2:	da02      	bge.n	800fcaa <I2C_Compute_SCLL_SCLH+0x18e>
            {
              error = -error;
 800fca4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800fca6:	425b      	negs	r3, r3
 800fca8:	633b      	str	r3, [r7, #48]	@ 0x30
            }

            /* look for the timings with the lowest clock error */
            if ((uint32_t)error < prev_error)
 800fcaa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800fcac:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800fcae:	429a      	cmp	r2, r3
 800fcb0:	d917      	bls.n	800fce2 <I2C_Compute_SCLL_SCLH+0x1c6>
            {
              prev_error = (uint32_t)error;
 800fcb2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800fcb4:	643b      	str	r3, [r7, #64]	@ 0x40
              I2c_valid_timing[count].scll = scll;
 800fcb6:	491b      	ldr	r1, [pc, #108]	@ (800fd24 <I2C_Compute_SCLL_SCLH+0x208>)
 800fcb8:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800fcba:	4613      	mov	r3, r2
 800fcbc:	009b      	lsls	r3, r3, #2
 800fcbe:	4413      	add	r3, r2
 800fcc0:	009b      	lsls	r3, r3, #2
 800fcc2:	440b      	add	r3, r1
 800fcc4:	3310      	adds	r3, #16
 800fcc6:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 800fcc8:	601a      	str	r2, [r3, #0]
              I2c_valid_timing[count].sclh = sclh;
 800fcca:	4916      	ldr	r1, [pc, #88]	@ (800fd24 <I2C_Compute_SCLL_SCLH+0x208>)
 800fccc:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800fcce:	4613      	mov	r3, r2
 800fcd0:	009b      	lsls	r3, r3, #2
 800fcd2:	4413      	add	r3, r2
 800fcd4:	009b      	lsls	r3, r3, #2
 800fcd6:	440b      	add	r3, r1
 800fcd8:	330c      	adds	r3, #12
 800fcda:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800fcdc:	601a      	str	r2, [r3, #0]
              ret = count;
 800fcde:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800fce0:	647b      	str	r3, [r7, #68]	@ 0x44
        for (sclh = 0; sclh < I2C_SCLH_MAX; sclh++)
 800fce2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800fce4:	3301      	adds	r3, #1
 800fce6:	63bb      	str	r3, [r7, #56]	@ 0x38
 800fce8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800fcea:	2bff      	cmp	r3, #255	@ 0xff
 800fcec:	d999      	bls.n	800fc22 <I2C_Compute_SCLL_SCLH+0x106>
    for (scll = 0; scll < I2C_SCLL_MAX; scll++)
 800fcee:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800fcf0:	3301      	adds	r3, #1
 800fcf2:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800fcf4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800fcf6:	2bff      	cmp	r3, #255	@ 0xff
 800fcf8:	f67f af6f 	bls.w	800fbda <I2C_Compute_SCLL_SCLH+0xbe>
  for (uint32_t count = 0; count < I2c_valid_timing_nbr; count++)
 800fcfc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800fcfe:	3301      	adds	r3, #1
 800fd00:	637b      	str	r3, [r7, #52]	@ 0x34
 800fd02:	4b09      	ldr	r3, [pc, #36]	@ (800fd28 <I2C_Compute_SCLL_SCLH+0x20c>)
 800fd04:	681b      	ldr	r3, [r3, #0]
 800fd06:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800fd08:	429a      	cmp	r2, r3
 800fd0a:	f4ff af56 	bcc.w	800fbba <I2C_Compute_SCLL_SCLH+0x9e>
        }
      }
    }
  }

  return ret;
 800fd0e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
}
 800fd10:	4618      	mov	r0, r3
 800fd12:	374c      	adds	r7, #76	@ 0x4c
 800fd14:	46bd      	mov	sp, r7
 800fd16:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fd1a:	4770      	bx	lr
 800fd1c:	3b9aca00 	.word	0x3b9aca00
 800fd20:	0802d5e4 	.word	0x0802d5e4
 800fd24:	2400ac8c 	.word	0x2400ac8c
 800fd28:	2400b68c 	.word	0x2400b68c

0800fd2c <I2C4_MspInit>:
  * @brief  Initializes I2C MSP.
  * @param  phi2c  I2C handler
  * @retval None
  */
static void I2C4_MspInit(I2C_HandleTypeDef *phi2c)
{
 800fd2c:	b580      	push	{r7, lr}
 800fd2e:	b08a      	sub	sp, #40	@ 0x28
 800fd30:	af00      	add	r7, sp, #0
 800fd32:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phi2c);

  /*** Configure the GPIOs ***/
  /* Enable SCL GPIO clock */
  BUS_I2C4_SCL_GPIO_CLK_ENABLE();
 800fd34:	4b31      	ldr	r3, [pc, #196]	@ (800fdfc <I2C4_MspInit+0xd0>)
 800fd36:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800fd3a:	4a30      	ldr	r2, [pc, #192]	@ (800fdfc <I2C4_MspInit+0xd0>)
 800fd3c:	f043 0308 	orr.w	r3, r3, #8
 800fd40:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 800fd44:	4b2d      	ldr	r3, [pc, #180]	@ (800fdfc <I2C4_MspInit+0xd0>)
 800fd46:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800fd4a:	f003 0308 	and.w	r3, r3, #8
 800fd4e:	613b      	str	r3, [r7, #16]
 800fd50:	693b      	ldr	r3, [r7, #16]
  /* Enable SDA GPIO clock */
  BUS_I2C4_SDA_GPIO_CLK_ENABLE();
 800fd52:	4b2a      	ldr	r3, [pc, #168]	@ (800fdfc <I2C4_MspInit+0xd0>)
 800fd54:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800fd58:	4a28      	ldr	r2, [pc, #160]	@ (800fdfc <I2C4_MspInit+0xd0>)
 800fd5a:	f043 0308 	orr.w	r3, r3, #8
 800fd5e:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 800fd62:	4b26      	ldr	r3, [pc, #152]	@ (800fdfc <I2C4_MspInit+0xd0>)
 800fd64:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800fd68:	f003 0308 	and.w	r3, r3, #8
 800fd6c:	60fb      	str	r3, [r7, #12]
 800fd6e:	68fb      	ldr	r3, [r7, #12]

  /* Configure I2C Tx as alternate function */
  gpio_init_structure.Pin       = BUS_I2C4_SCL_PIN;
 800fd70:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800fd74:	617b      	str	r3, [r7, #20]
  gpio_init_structure.Mode      = GPIO_MODE_AF_OD;
 800fd76:	2312      	movs	r3, #18
 800fd78:	61bb      	str	r3, [r7, #24]
  gpio_init_structure.Pull      = GPIO_NOPULL;
 800fd7a:	2300      	movs	r3, #0
 800fd7c:	61fb      	str	r3, [r7, #28]
  gpio_init_structure.Speed     = GPIO_SPEED_FREQ_HIGH;
 800fd7e:	2302      	movs	r3, #2
 800fd80:	623b      	str	r3, [r7, #32]
  gpio_init_structure.Alternate = BUS_I2C4_SCL_AF;
 800fd82:	2304      	movs	r3, #4
 800fd84:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(BUS_I2C4_SCL_GPIO_PORT, &gpio_init_structure);
 800fd86:	f107 0314 	add.w	r3, r7, #20
 800fd8a:	4619      	mov	r1, r3
 800fd8c:	481c      	ldr	r0, [pc, #112]	@ (800fe00 <I2C4_MspInit+0xd4>)
 800fd8e:	f001 fd4b 	bl	8011828 <HAL_GPIO_Init>

  /* Configure I2C Rx as alternate function */
  gpio_init_structure.Pin       = BUS_I2C4_SDA_PIN;
 800fd92:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800fd96:	617b      	str	r3, [r7, #20]
  gpio_init_structure.Mode      = GPIO_MODE_AF_OD;
 800fd98:	2312      	movs	r3, #18
 800fd9a:	61bb      	str	r3, [r7, #24]
  gpio_init_structure.Pull      = GPIO_NOPULL;
 800fd9c:	2300      	movs	r3, #0
 800fd9e:	61fb      	str	r3, [r7, #28]
  gpio_init_structure.Speed     = GPIO_SPEED_FREQ_HIGH;
 800fda0:	2302      	movs	r3, #2
 800fda2:	623b      	str	r3, [r7, #32]
  gpio_init_structure.Alternate = BUS_I2C4_SDA_AF;
 800fda4:	2304      	movs	r3, #4
 800fda6:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(BUS_I2C4_SDA_GPIO_PORT, &gpio_init_structure);
 800fda8:	f107 0314 	add.w	r3, r7, #20
 800fdac:	4619      	mov	r1, r3
 800fdae:	4814      	ldr	r0, [pc, #80]	@ (800fe00 <I2C4_MspInit+0xd4>)
 800fdb0:	f001 fd3a 	bl	8011828 <HAL_GPIO_Init>

  /*** Configure the I2C peripheral ***/
  /* Enable I2C clock */
  BUS_I2C4_CLK_ENABLE();
 800fdb4:	4b11      	ldr	r3, [pc, #68]	@ (800fdfc <I2C4_MspInit+0xd0>)
 800fdb6:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 800fdba:	4a10      	ldr	r2, [pc, #64]	@ (800fdfc <I2C4_MspInit+0xd0>)
 800fdbc:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800fdc0:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 800fdc4:	4b0d      	ldr	r3, [pc, #52]	@ (800fdfc <I2C4_MspInit+0xd0>)
 800fdc6:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 800fdca:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800fdce:	60bb      	str	r3, [r7, #8]
 800fdd0:	68bb      	ldr	r3, [r7, #8]

  /* Force the I2C peripheral clock reset */
  BUS_I2C4_FORCE_RESET();
 800fdd2:	4b0a      	ldr	r3, [pc, #40]	@ (800fdfc <I2C4_MspInit+0xd0>)
 800fdd4:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 800fdd8:	4a08      	ldr	r2, [pc, #32]	@ (800fdfc <I2C4_MspInit+0xd0>)
 800fdda:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800fdde:	f8c2 309c 	str.w	r3, [r2, #156]	@ 0x9c

  /* Release the I2C peripheral clock reset */
  BUS_I2C4_RELEASE_RESET();
 800fde2:	4b06      	ldr	r3, [pc, #24]	@ (800fdfc <I2C4_MspInit+0xd0>)
 800fde4:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 800fde8:	4a04      	ldr	r2, [pc, #16]	@ (800fdfc <I2C4_MspInit+0xd0>)
 800fdea:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800fdee:	f8c2 309c 	str.w	r3, [r2, #156]	@ 0x9c
}
 800fdf2:	bf00      	nop
 800fdf4:	3728      	adds	r7, #40	@ 0x28
 800fdf6:	46bd      	mov	sp, r7
 800fdf8:	bd80      	pop	{r7, pc}
 800fdfa:	bf00      	nop
 800fdfc:	58024400 	.word	0x58024400
 800fe00:	58020c00 	.word	0x58020c00

0800fe04 <I2C4_MspDeInit>:
  * @brief  DeInitializes I2C MSP.
  * @param  phi2c  I2C handler
  * @retval None
  */
static void I2C4_MspDeInit(I2C_HandleTypeDef *phi2c)
{
 800fe04:	b580      	push	{r7, lr}
 800fe06:	b088      	sub	sp, #32
 800fe08:	af00      	add	r7, sp, #0
 800fe0a:	6078      	str	r0, [r7, #4]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(phi2c);

  /* Configure I2C Tx, Rx as alternate function */
  gpio_init_structure.Pin = BUS_I2C4_SCL_PIN;
 800fe0c:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800fe10:	60fb      	str	r3, [r7, #12]
  HAL_GPIO_DeInit(BUS_I2C4_SCL_GPIO_PORT, gpio_init_structure.Pin );
 800fe12:	68fb      	ldr	r3, [r7, #12]
 800fe14:	4619      	mov	r1, r3
 800fe16:	480b      	ldr	r0, [pc, #44]	@ (800fe44 <I2C4_MspDeInit+0x40>)
 800fe18:	f001 feb6 	bl	8011b88 <HAL_GPIO_DeInit>
  gpio_init_structure.Pin = BUS_I2C4_SDA_PIN;
 800fe1c:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800fe20:	60fb      	str	r3, [r7, #12]
  HAL_GPIO_DeInit(BUS_I2C4_SDA_GPIO_PORT, gpio_init_structure.Pin);
 800fe22:	68fb      	ldr	r3, [r7, #12]
 800fe24:	4619      	mov	r1, r3
 800fe26:	4807      	ldr	r0, [pc, #28]	@ (800fe44 <I2C4_MspDeInit+0x40>)
 800fe28:	f001 feae 	bl	8011b88 <HAL_GPIO_DeInit>

  /* Disable I2C clock */
  BUS_I2C4_CLK_DISABLE();
 800fe2c:	4b06      	ldr	r3, [pc, #24]	@ (800fe48 <I2C4_MspDeInit+0x44>)
 800fe2e:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 800fe32:	4a05      	ldr	r2, [pc, #20]	@ (800fe48 <I2C4_MspDeInit+0x44>)
 800fe34:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800fe38:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
}
 800fe3c:	bf00      	nop
 800fe3e:	3720      	adds	r7, #32
 800fe40:	46bd      	mov	sp, r7
 800fe42:	bd80      	pop	{r7, pc}
 800fe44:	58020c00 	.word	0x58020c00
 800fe48:	58024400 	.word	0x58024400

0800fe4c <I2C4_WriteReg>:
  * @param  pData      The target register value to be written
  * @param  Length     data length in bytes
  * @retval BSP status
  */
static int32_t I2C4_WriteReg(uint16_t DevAddr, uint16_t Reg, uint16_t MemAddSize, uint8_t *pData, uint16_t Length)
{
 800fe4c:	b580      	push	{r7, lr}
 800fe4e:	b088      	sub	sp, #32
 800fe50:	af04      	add	r7, sp, #16
 800fe52:	607b      	str	r3, [r7, #4]
 800fe54:	4603      	mov	r3, r0
 800fe56:	81fb      	strh	r3, [r7, #14]
 800fe58:	460b      	mov	r3, r1
 800fe5a:	81bb      	strh	r3, [r7, #12]
 800fe5c:	4613      	mov	r3, r2
 800fe5e:	817b      	strh	r3, [r7, #10]
  if(HAL_I2C_Mem_Write(&hbus_i2c4, DevAddr, Reg, MemAddSize, pData, Length, 1000) == HAL_OK)
 800fe60:	8978      	ldrh	r0, [r7, #10]
 800fe62:	89ba      	ldrh	r2, [r7, #12]
 800fe64:	89f9      	ldrh	r1, [r7, #14]
 800fe66:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800fe6a:	9302      	str	r3, [sp, #8]
 800fe6c:	8b3b      	ldrh	r3, [r7, #24]
 800fe6e:	9301      	str	r3, [sp, #4]
 800fe70:	687b      	ldr	r3, [r7, #4]
 800fe72:	9300      	str	r3, [sp, #0]
 800fe74:	4603      	mov	r3, r0
 800fe76:	4807      	ldr	r0, [pc, #28]	@ (800fe94 <I2C4_WriteReg+0x48>)
 800fe78:	f002 f8c4 	bl	8012004 <HAL_I2C_Mem_Write>
 800fe7c:	4603      	mov	r3, r0
 800fe7e:	2b00      	cmp	r3, #0
 800fe80:	d101      	bne.n	800fe86 <I2C4_WriteReg+0x3a>
  {
    return BSP_ERROR_NONE;
 800fe82:	2300      	movs	r3, #0
 800fe84:	e001      	b.n	800fe8a <I2C4_WriteReg+0x3e>
  }

  return BSP_ERROR_BUS_FAILURE;
 800fe86:	f06f 0307 	mvn.w	r3, #7
}
 800fe8a:	4618      	mov	r0, r3
 800fe8c:	3710      	adds	r7, #16
 800fe8e:	46bd      	mov	sp, r7
 800fe90:	bd80      	pop	{r7, pc}
 800fe92:	bf00      	nop
 800fe94:	2400b690 	.word	0x2400b690

0800fe98 <I2C4_ReadReg>:
  * @param  pData      The target register value to be read
  * @param  Length     data length in bytes
  * @retval BSP status
  */
static int32_t I2C4_ReadReg(uint16_t DevAddr, uint16_t Reg, uint16_t MemAddSize, uint8_t *pData, uint16_t Length)
{
 800fe98:	b580      	push	{r7, lr}
 800fe9a:	b088      	sub	sp, #32
 800fe9c:	af04      	add	r7, sp, #16
 800fe9e:	607b      	str	r3, [r7, #4]
 800fea0:	4603      	mov	r3, r0
 800fea2:	81fb      	strh	r3, [r7, #14]
 800fea4:	460b      	mov	r3, r1
 800fea6:	81bb      	strh	r3, [r7, #12]
 800fea8:	4613      	mov	r3, r2
 800feaa:	817b      	strh	r3, [r7, #10]
  if (HAL_I2C_Mem_Read(&hbus_i2c4, DevAddr, Reg, MemAddSize, pData, Length, 1000) == HAL_OK)
 800feac:	8978      	ldrh	r0, [r7, #10]
 800feae:	89ba      	ldrh	r2, [r7, #12]
 800feb0:	89f9      	ldrh	r1, [r7, #14]
 800feb2:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800feb6:	9302      	str	r3, [sp, #8]
 800feb8:	8b3b      	ldrh	r3, [r7, #24]
 800feba:	9301      	str	r3, [sp, #4]
 800febc:	687b      	ldr	r3, [r7, #4]
 800febe:	9300      	str	r3, [sp, #0]
 800fec0:	4603      	mov	r3, r0
 800fec2:	4807      	ldr	r0, [pc, #28]	@ (800fee0 <I2C4_ReadReg+0x48>)
 800fec4:	f002 f9b2 	bl	801222c <HAL_I2C_Mem_Read>
 800fec8:	4603      	mov	r3, r0
 800feca:	2b00      	cmp	r3, #0
 800fecc:	d101      	bne.n	800fed2 <I2C4_ReadReg+0x3a>
  {
    return BSP_ERROR_NONE;
 800fece:	2300      	movs	r3, #0
 800fed0:	e001      	b.n	800fed6 <I2C4_ReadReg+0x3e>
  }

  return BSP_ERROR_BUS_FAILURE;
 800fed2:	f06f 0307 	mvn.w	r3, #7
}
 800fed6:	4618      	mov	r0, r3
 800fed8:	3710      	adds	r7, #16
 800feda:	46bd      	mov	sp, r7
 800fedc:	bd80      	pop	{r7, pc}
 800fede:	bf00      	nop
 800fee0:	2400b690 	.word	0x2400b690

0800fee4 <BSP_QSPI_Init>:
  * @param  Instance   QSPI Instance
  * @param  Init       QSPI Init structure
  * @retval BSP status
  */
int32_t BSP_QSPI_Init(uint32_t Instance, BSP_QSPI_Init_t *Init)
{
 800fee4:	b580      	push	{r7, lr}
 800fee6:	b090      	sub	sp, #64	@ 0x40
 800fee8:	af00      	add	r7, sp, #0
 800feea:	6078      	str	r0, [r7, #4]
 800feec:	6039      	str	r1, [r7, #0]
  int32_t ret = BSP_ERROR_NONE;
 800feee:	2300      	movs	r3, #0
 800fef0:	63fb      	str	r3, [r7, #60]	@ 0x3c
  3: For DTR mode to reach max 54Mhz
  */
  static const uint32_t PrescalerTab[2] = {1, 3};

  /* Check if the instance is supported */
  if(Instance >= QSPI_INSTANCES_NUMBER)
 800fef2:	687b      	ldr	r3, [r7, #4]
 800fef4:	2b00      	cmp	r3, #0
 800fef6:	d003      	beq.n	800ff00 <BSP_QSPI_Init+0x1c>
  {
    ret = BSP_ERROR_WRONG_PARAM;
 800fef8:	f06f 0301 	mvn.w	r3, #1
 800fefc:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800fefe:	e090      	b.n	8010022 <BSP_QSPI_Init+0x13e>
  }
  else
  {
    /* Check if instance is already initialized */
    if(QSPI_Ctx[Instance].IsInitialized == QSPI_ACCESS_NONE)
 800ff00:	494a      	ldr	r1, [pc, #296]	@ (801002c <BSP_QSPI_Init+0x148>)
 800ff02:	687a      	ldr	r2, [r7, #4]
 800ff04:	4613      	mov	r3, r2
 800ff06:	005b      	lsls	r3, r3, #1
 800ff08:	4413      	add	r3, r2
 800ff0a:	009b      	lsls	r3, r3, #2
 800ff0c:	440b      	add	r3, r1
 800ff0e:	781b      	ldrb	r3, [r3, #0]
 800ff10:	2b00      	cmp	r3, #0
 800ff12:	f040 8086 	bne.w	8010022 <BSP_QSPI_Init+0x13e>
          ret = BSP_ERROR_PERIPH_FAILURE;
        }
      }
#else
      /* Msp QSPI initialization */
      QSPI_MspInit(&hqspi);
 800ff16:	4846      	ldr	r0, [pc, #280]	@ (8010030 <BSP_QSPI_Init+0x14c>)
 800ff18:	f000 f99c 	bl	8010254 <QSPI_MspInit>
#endif /* USE_HAL_QSPI_REGISTER_CALLBACKS */

      if(ret == BSP_ERROR_NONE)
 800ff1c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800ff1e:	2b00      	cmp	r3, #0
 800ff20:	d17f      	bne.n	8010022 <BSP_QSPI_Init+0x13e>
      {
        /* STM32 QSPI interface initialization */
        (void)MT25TL01G_GetFlashInfo(&pInfo);
 800ff22:	f107 031c 	add.w	r3, r7, #28
 800ff26:	4618      	mov	r0, r3
 800ff28:	f7fe ffea 	bl	800ef00 <MT25TL01G_GetFlashInfo>
        qspi_init.ClockPrescaler = PrescalerTab[Init->TransferRate];
 800ff2c:	683b      	ldr	r3, [r7, #0]
 800ff2e:	785b      	ldrb	r3, [r3, #1]
 800ff30:	461a      	mov	r2, r3
 800ff32:	4b40      	ldr	r3, [pc, #256]	@ (8010034 <BSP_QSPI_Init+0x150>)
 800ff34:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800ff38:	613b      	str	r3, [r7, #16]
        qspi_init.DualFlashMode  = QSPI_DUALFLASH_ENABLE;
 800ff3a:	2340      	movs	r3, #64	@ 0x40
 800ff3c:	61bb      	str	r3, [r7, #24]
        qspi_init.FlashSize      = (uint32_t)POSITION_VAL((uint32_t)pInfo.FlashSize) - 1U;
 800ff3e:	69fb      	ldr	r3, [r7, #28]
 800ff40:	637b      	str	r3, [r7, #52]	@ 0x34
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800ff42:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800ff44:	fa93 f3a3 	rbit	r3, r3
 800ff48:	633b      	str	r3, [r7, #48]	@ 0x30
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 800ff4a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ff4c:	63bb      	str	r3, [r7, #56]	@ 0x38
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 800ff4e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ff50:	2b00      	cmp	r3, #0
 800ff52:	d101      	bne.n	800ff58 <BSP_QSPI_Init+0x74>
  {
    return 32U;
 800ff54:	2320      	movs	r3, #32
 800ff56:	e003      	b.n	800ff60 <BSP_QSPI_Init+0x7c>
  }
  return __builtin_clz(value);
 800ff58:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ff5a:	fab3 f383 	clz	r3, r3
 800ff5e:	b2db      	uxtb	r3, r3
 800ff60:	3b01      	subs	r3, #1
 800ff62:	60fb      	str	r3, [r7, #12]
        qspi_init.SampleShifting = (Init->TransferRate == BSP_QSPI_STR_TRANSFER) ? QSPI_SAMPLE_SHIFTING_HALFCYCLE : QSPI_SAMPLE_SHIFTING_NONE;
 800ff64:	683b      	ldr	r3, [r7, #0]
 800ff66:	785b      	ldrb	r3, [r3, #1]
 800ff68:	2b00      	cmp	r3, #0
 800ff6a:	d101      	bne.n	800ff70 <BSP_QSPI_Init+0x8c>
 800ff6c:	2310      	movs	r3, #16
 800ff6e:	e000      	b.n	800ff72 <BSP_QSPI_Init+0x8e>
 800ff70:	2300      	movs	r3, #0
 800ff72:	617b      	str	r3, [r7, #20]

        if(MX_QSPI_Init(&hqspi, &qspi_init) != HAL_OK)
 800ff74:	f107 030c 	add.w	r3, r7, #12
 800ff78:	4619      	mov	r1, r3
 800ff7a:	482d      	ldr	r0, [pc, #180]	@ (8010030 <BSP_QSPI_Init+0x14c>)
 800ff7c:	f000 f85c 	bl	8010038 <MX_QSPI_Init>
 800ff80:	4603      	mov	r3, r0
 800ff82:	2b00      	cmp	r3, #0
 800ff84:	d003      	beq.n	800ff8e <BSP_QSPI_Init+0xaa>
        {
          ret = BSP_ERROR_PERIPH_FAILURE;
 800ff86:	f06f 0303 	mvn.w	r3, #3
 800ff8a:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800ff8c:	e049      	b.n	8010022 <BSP_QSPI_Init+0x13e>
        }/* QSPI memory reset */
        else if(QSPI_ResetMemory(Instance) != BSP_ERROR_NONE)
 800ff8e:	6878      	ldr	r0, [r7, #4]
 800ff90:	f000 faa8 	bl	80104e4 <QSPI_ResetMemory>
 800ff94:	4603      	mov	r3, r0
 800ff96:	2b00      	cmp	r3, #0
 800ff98:	d003      	beq.n	800ffa2 <BSP_QSPI_Init+0xbe>
        {
          ret = BSP_ERROR_COMPONENT_FAILURE;
 800ff9a:	f06f 0304 	mvn.w	r3, #4
 800ff9e:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800ffa0:	e03f      	b.n	8010022 <BSP_QSPI_Init+0x13e>
        }/* Force Flash enter 4 Byte address mode */
        else if(MT25TL01G_AutoPollingMemReady(&hqspi, QSPI_Ctx[Instance].InterfaceMode) != MT25TL01G_OK)
 800ffa2:	4922      	ldr	r1, [pc, #136]	@ (801002c <BSP_QSPI_Init+0x148>)
 800ffa4:	687a      	ldr	r2, [r7, #4]
 800ffa6:	4613      	mov	r3, r2
 800ffa8:	005b      	lsls	r3, r3, #1
 800ffaa:	4413      	add	r3, r2
 800ffac:	009b      	lsls	r3, r3, #2
 800ffae:	440b      	add	r3, r1
 800ffb0:	3301      	adds	r3, #1
 800ffb2:	781b      	ldrb	r3, [r3, #0]
 800ffb4:	4619      	mov	r1, r3
 800ffb6:	481e      	ldr	r0, [pc, #120]	@ (8010030 <BSP_QSPI_Init+0x14c>)
 800ffb8:	f7ff f811 	bl	800efde <MT25TL01G_AutoPollingMemReady>
 800ffbc:	4603      	mov	r3, r0
 800ffbe:	2b00      	cmp	r3, #0
 800ffc0:	d003      	beq.n	800ffca <BSP_QSPI_Init+0xe6>
        {
          ret = BSP_ERROR_COMPONENT_FAILURE;
 800ffc2:	f06f 0304 	mvn.w	r3, #4
 800ffc6:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800ffc8:	e02b      	b.n	8010022 <BSP_QSPI_Init+0x13e>
        }
        else if(MT25TL01G_Enter4BytesAddressMode(&hqspi, QSPI_Ctx[Instance].InterfaceMode) != MT25TL01G_OK)
 800ffca:	4918      	ldr	r1, [pc, #96]	@ (801002c <BSP_QSPI_Init+0x148>)
 800ffcc:	687a      	ldr	r2, [r7, #4]
 800ffce:	4613      	mov	r3, r2
 800ffd0:	005b      	lsls	r3, r3, #1
 800ffd2:	4413      	add	r3, r2
 800ffd4:	009b      	lsls	r3, r3, #2
 800ffd6:	440b      	add	r3, r1
 800ffd8:	3301      	adds	r3, #1
 800ffda:	781b      	ldrb	r3, [r3, #0]
 800ffdc:	4619      	mov	r1, r3
 800ffde:	4814      	ldr	r0, [pc, #80]	@ (8010030 <BSP_QSPI_Init+0x14c>)
 800ffe0:	f7fe ffb5 	bl	800ef4e <MT25TL01G_Enter4BytesAddressMode>
 800ffe4:	4603      	mov	r3, r0
 800ffe6:	2b00      	cmp	r3, #0
 800ffe8:	d003      	beq.n	800fff2 <BSP_QSPI_Init+0x10e>
        {
          ret = BSP_ERROR_COMPONENT_FAILURE;
 800ffea:	f06f 0304 	mvn.w	r3, #4
 800ffee:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800fff0:	e017      	b.n	8010022 <BSP_QSPI_Init+0x13e>
        }/* Configuration of the dummy cycles on QSPI memory side */
        else if(QSPI_DummyCyclesCfg(Instance) != BSP_ERROR_NONE)
 800fff2:	6878      	ldr	r0, [r7, #4]
 800fff4:	f000 fae2 	bl	80105bc <QSPI_DummyCyclesCfg>
 800fff8:	4603      	mov	r3, r0
 800fffa:	2b00      	cmp	r3, #0
 800fffc:	d003      	beq.n	8010006 <BSP_QSPI_Init+0x122>
        {
          ret = BSP_ERROR_COMPONENT_FAILURE;
 800fffe:	f06f 0304 	mvn.w	r3, #4
 8010002:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8010004:	e00d      	b.n	8010022 <BSP_QSPI_Init+0x13e>
        }
        else
        {
          /* Configure Flash to desired mode */
          if(BSP_QSPI_ConfigFlash(Instance, Init->InterfaceMode, Init->TransferRate) != BSP_ERROR_NONE)
 8010006:	683b      	ldr	r3, [r7, #0]
 8010008:	7819      	ldrb	r1, [r3, #0]
 801000a:	683b      	ldr	r3, [r7, #0]
 801000c:	785b      	ldrb	r3, [r3, #1]
 801000e:	461a      	mov	r2, r3
 8010010:	6878      	ldr	r0, [r7, #4]
 8010012:	f000 f89d 	bl	8010150 <BSP_QSPI_ConfigFlash>
 8010016:	4603      	mov	r3, r0
 8010018:	2b00      	cmp	r3, #0
 801001a:	d002      	beq.n	8010022 <BSP_QSPI_Init+0x13e>
          {
            ret = BSP_ERROR_COMPONENT_FAILURE;
 801001c:	f06f 0304 	mvn.w	r3, #4
 8010020:	63fb      	str	r3, [r7, #60]	@ 0x3c
      }
    }
  }

  /* Return BSP status */
  return ret;
 8010022:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
}
 8010024:	4618      	mov	r0, r3
 8010026:	3740      	adds	r7, #64	@ 0x40
 8010028:	46bd      	mov	sp, r7
 801002a:	bd80      	pop	{r7, pc}
 801002c:	2400b6e4 	.word	0x2400b6e4
 8010030:	2400027c 	.word	0x2400027c
 8010034:	0802d668 	.word	0x0802d668

08010038 <MX_QSPI_Init>:
  * @param  hQspi       QSPI handle
  * @param  Config      QSPI configuration structure
  * @retval BSP status
  */
__weak HAL_StatusTypeDef MX_QSPI_Init(QSPI_HandleTypeDef *hQspi, MX_QSPI_Init_t *Config)
{
 8010038:	b580      	push	{r7, lr}
 801003a:	b082      	sub	sp, #8
 801003c:	af00      	add	r7, sp, #0
 801003e:	6078      	str	r0, [r7, #4]
 8010040:	6039      	str	r1, [r7, #0]
  /* QSPI initialization */
  /* QSPI freq = SYSCLK /(1 + ClockPrescaler) Mhz */
  hQspi->Instance                = QUADSPI;
 8010042:	687b      	ldr	r3, [r7, #4]
 8010044:	4a13      	ldr	r2, [pc, #76]	@ (8010094 <MX_QSPI_Init+0x5c>)
 8010046:	601a      	str	r2, [r3, #0]
  hQspi->Init.ClockPrescaler     = Config->ClockPrescaler;
 8010048:	683b      	ldr	r3, [r7, #0]
 801004a:	685a      	ldr	r2, [r3, #4]
 801004c:	687b      	ldr	r3, [r7, #4]
 801004e:	605a      	str	r2, [r3, #4]
  hQspi->Init.FifoThreshold      = 1;
 8010050:	687b      	ldr	r3, [r7, #4]
 8010052:	2201      	movs	r2, #1
 8010054:	609a      	str	r2, [r3, #8]
  hQspi->Init.SampleShifting     = Config->SampleShifting;
 8010056:	683b      	ldr	r3, [r7, #0]
 8010058:	689a      	ldr	r2, [r3, #8]
 801005a:	687b      	ldr	r3, [r7, #4]
 801005c:	60da      	str	r2, [r3, #12]
  hQspi->Init.FlashSize          = Config->FlashSize;
 801005e:	683b      	ldr	r3, [r7, #0]
 8010060:	681a      	ldr	r2, [r3, #0]
 8010062:	687b      	ldr	r3, [r7, #4]
 8010064:	611a      	str	r2, [r3, #16]
  hQspi->Init.ChipSelectHighTime = QSPI_CS_HIGH_TIME_4_CYCLE; /* Min 50ns for nonRead */
 8010066:	687b      	ldr	r3, [r7, #4]
 8010068:	f44f 7240 	mov.w	r2, #768	@ 0x300
 801006c:	615a      	str	r2, [r3, #20]
  hQspi->Init.ClockMode          = QSPI_CLOCK_MODE_0;
 801006e:	687b      	ldr	r3, [r7, #4]
 8010070:	2200      	movs	r2, #0
 8010072:	619a      	str	r2, [r3, #24]
  hQspi->Init.FlashID            = QSPI_FLASH_ID_1;
 8010074:	687b      	ldr	r3, [r7, #4]
 8010076:	2200      	movs	r2, #0
 8010078:	61da      	str	r2, [r3, #28]
  hQspi->Init.DualFlash          = Config->DualFlashMode;
 801007a:	683b      	ldr	r3, [r7, #0]
 801007c:	68da      	ldr	r2, [r3, #12]
 801007e:	687b      	ldr	r3, [r7, #4]
 8010080:	621a      	str	r2, [r3, #32]

  return HAL_QSPI_Init(hQspi);
 8010082:	6878      	ldr	r0, [r7, #4]
 8010084:	f003 faac 	bl	80135e0 <HAL_QSPI_Init>
 8010088:	4603      	mov	r3, r0
}
 801008a:	4618      	mov	r0, r3
 801008c:	3708      	adds	r7, #8
 801008e:	46bd      	mov	sp, r7
 8010090:	bd80      	pop	{r7, pc}
 8010092:	bf00      	nop
 8010094:	52005000 	.word	0x52005000

08010098 <BSP_QSPI_EnableMemoryMappedMode>:
  *         Only 1 Instance can running MMP mode. And it will lock system at this mode.
  * @param  Instance  QSPI instance
  * @retval BSP status
  */
int32_t BSP_QSPI_EnableMemoryMappedMode(uint32_t Instance)
{
 8010098:	b580      	push	{r7, lr}
 801009a:	b084      	sub	sp, #16
 801009c:	af00      	add	r7, sp, #0
 801009e:	6078      	str	r0, [r7, #4]
  int32_t ret = BSP_ERROR_NONE;
 80100a0:	2300      	movs	r3, #0
 80100a2:	60fb      	str	r3, [r7, #12]

  /* Check if the instance is supported */
  if(Instance >= QSPI_INSTANCES_NUMBER)
 80100a4:	687b      	ldr	r3, [r7, #4]
 80100a6:	2b00      	cmp	r3, #0
 80100a8:	d003      	beq.n	80100b2 <BSP_QSPI_EnableMemoryMappedMode+0x1a>
  {
    ret = BSP_ERROR_WRONG_PARAM;
 80100aa:	f06f 0301 	mvn.w	r3, #1
 80100ae:	60fb      	str	r3, [r7, #12]
 80100b0:	e045      	b.n	801013e <BSP_QSPI_EnableMemoryMappedMode+0xa6>
  }
  else
  {
    if(QSPI_Ctx[Instance].TransferRate == BSP_QSPI_STR_TRANSFER)
 80100b2:	4925      	ldr	r1, [pc, #148]	@ (8010148 <BSP_QSPI_EnableMemoryMappedMode+0xb0>)
 80100b4:	687a      	ldr	r2, [r7, #4]
 80100b6:	4613      	mov	r3, r2
 80100b8:	005b      	lsls	r3, r3, #1
 80100ba:	4413      	add	r3, r2
 80100bc:	009b      	lsls	r3, r3, #2
 80100be:	440b      	add	r3, r1
 80100c0:	3302      	adds	r3, #2
 80100c2:	781b      	ldrb	r3, [r3, #0]
 80100c4:	2b00      	cmp	r3, #0
 80100c6:	d11d      	bne.n	8010104 <BSP_QSPI_EnableMemoryMappedMode+0x6c>
    {
      if(MT25TL01G_EnableMemoryMappedModeSTR(&hqspi, QSPI_Ctx[Instance].InterfaceMode) != MT25TL01G_OK)
 80100c8:	491f      	ldr	r1, [pc, #124]	@ (8010148 <BSP_QSPI_EnableMemoryMappedMode+0xb0>)
 80100ca:	687a      	ldr	r2, [r7, #4]
 80100cc:	4613      	mov	r3, r2
 80100ce:	005b      	lsls	r3, r3, #1
 80100d0:	4413      	add	r3, r2
 80100d2:	009b      	lsls	r3, r3, #2
 80100d4:	440b      	add	r3, r1
 80100d6:	3301      	adds	r3, #1
 80100d8:	781b      	ldrb	r3, [r3, #0]
 80100da:	4619      	mov	r1, r3
 80100dc:	481b      	ldr	r0, [pc, #108]	@ (801014c <BSP_QSPI_EnableMemoryMappedMode+0xb4>)
 80100de:	f7ff f8d3 	bl	800f288 <MT25TL01G_EnableMemoryMappedModeSTR>
 80100e2:	4603      	mov	r3, r0
 80100e4:	2b00      	cmp	r3, #0
 80100e6:	d003      	beq.n	80100f0 <BSP_QSPI_EnableMemoryMappedMode+0x58>
      {
        ret = BSP_ERROR_COMPONENT_FAILURE;
 80100e8:	f06f 0304 	mvn.w	r3, #4
 80100ec:	60fb      	str	r3, [r7, #12]
 80100ee:	e026      	b.n	801013e <BSP_QSPI_EnableMemoryMappedMode+0xa6>
      }
      else /* Update QSPI context if all operations are well done */
      {
        QSPI_Ctx[Instance].IsInitialized = QSPI_ACCESS_MMP;
 80100f0:	4915      	ldr	r1, [pc, #84]	@ (8010148 <BSP_QSPI_EnableMemoryMappedMode+0xb0>)
 80100f2:	687a      	ldr	r2, [r7, #4]
 80100f4:	4613      	mov	r3, r2
 80100f6:	005b      	lsls	r3, r3, #1
 80100f8:	4413      	add	r3, r2
 80100fa:	009b      	lsls	r3, r3, #2
 80100fc:	440b      	add	r3, r1
 80100fe:	2202      	movs	r2, #2
 8010100:	701a      	strb	r2, [r3, #0]
 8010102:	e01c      	b.n	801013e <BSP_QSPI_EnableMemoryMappedMode+0xa6>
      }
    }
    else
    {
      if(MT25TL01G_EnableMemoryMappedModeDTR(&hqspi, QSPI_Ctx[Instance].InterfaceMode) != MT25TL01G_OK)
 8010104:	4910      	ldr	r1, [pc, #64]	@ (8010148 <BSP_QSPI_EnableMemoryMappedMode+0xb0>)
 8010106:	687a      	ldr	r2, [r7, #4]
 8010108:	4613      	mov	r3, r2
 801010a:	005b      	lsls	r3, r3, #1
 801010c:	4413      	add	r3, r2
 801010e:	009b      	lsls	r3, r3, #2
 8010110:	440b      	add	r3, r1
 8010112:	3301      	adds	r3, #1
 8010114:	781b      	ldrb	r3, [r3, #0]
 8010116:	4619      	mov	r1, r3
 8010118:	480c      	ldr	r0, [pc, #48]	@ (801014c <BSP_QSPI_EnableMemoryMappedMode+0xb4>)
 801011a:	f7ff f84b 	bl	800f1b4 <MT25TL01G_EnableMemoryMappedModeDTR>
 801011e:	4603      	mov	r3, r0
 8010120:	2b00      	cmp	r3, #0
 8010122:	d003      	beq.n	801012c <BSP_QSPI_EnableMemoryMappedMode+0x94>
      {
        ret = BSP_ERROR_COMPONENT_FAILURE;
 8010124:	f06f 0304 	mvn.w	r3, #4
 8010128:	60fb      	str	r3, [r7, #12]
 801012a:	e008      	b.n	801013e <BSP_QSPI_EnableMemoryMappedMode+0xa6>
      }
      else /* Update QSPI context if all operations are well done */
      {
        QSPI_Ctx[Instance].IsInitialized = QSPI_ACCESS_MMP;
 801012c:	4906      	ldr	r1, [pc, #24]	@ (8010148 <BSP_QSPI_EnableMemoryMappedMode+0xb0>)
 801012e:	687a      	ldr	r2, [r7, #4]
 8010130:	4613      	mov	r3, r2
 8010132:	005b      	lsls	r3, r3, #1
 8010134:	4413      	add	r3, r2
 8010136:	009b      	lsls	r3, r3, #2
 8010138:	440b      	add	r3, r1
 801013a:	2202      	movs	r2, #2
 801013c:	701a      	strb	r2, [r3, #0]
      }
    }
  }

  /* Return BSP status */
  return ret;
 801013e:	68fb      	ldr	r3, [r7, #12]
}
 8010140:	4618      	mov	r0, r3
 8010142:	3710      	adds	r7, #16
 8010144:	46bd      	mov	sp, r7
 8010146:	bd80      	pop	{r7, pc}
 8010148:	2400b6e4 	.word	0x2400b6e4
 801014c:	2400027c 	.word	0x2400027c

08010150 <BSP_QSPI_ConfigFlash>:
  * @param  Mode      QSPI mode
  * @param  Rate      QSPI transfer rate
  * @retval BSP status
  */
int32_t BSP_QSPI_ConfigFlash(uint32_t Instance, BSP_QSPI_Interface_t Mode, BSP_QSPI_Transfer_t Rate)
{
 8010150:	b580      	push	{r7, lr}
 8010152:	b084      	sub	sp, #16
 8010154:	af00      	add	r7, sp, #0
 8010156:	6078      	str	r0, [r7, #4]
 8010158:	460b      	mov	r3, r1
 801015a:	70fb      	strb	r3, [r7, #3]
 801015c:	4613      	mov	r3, r2
 801015e:	70bb      	strb	r3, [r7, #2]
  int32_t ret = BSP_ERROR_NONE;
 8010160:	2300      	movs	r3, #0
 8010162:	60fb      	str	r3, [r7, #12]

  /* Check if the instance is supported */
  if(Instance >= QSPI_INSTANCES_NUMBER)
 8010164:	687b      	ldr	r3, [r7, #4]
 8010166:	2b00      	cmp	r3, #0
 8010168:	d003      	beq.n	8010172 <BSP_QSPI_ConfigFlash+0x22>
  {
    ret = BSP_ERROR_WRONG_PARAM;
 801016a:	f06f 0301 	mvn.w	r3, #1
 801016e:	60fb      	str	r3, [r7, #12]
 8010170:	e067      	b.n	8010242 <BSP_QSPI_ConfigFlash+0xf2>
  }
  else
  {
    /* Check if MMP mode locked ************************************************/
    if(QSPI_Ctx[Instance].IsInitialized == QSPI_ACCESS_MMP)
 8010172:	4936      	ldr	r1, [pc, #216]	@ (801024c <BSP_QSPI_ConfigFlash+0xfc>)
 8010174:	687a      	ldr	r2, [r7, #4]
 8010176:	4613      	mov	r3, r2
 8010178:	005b      	lsls	r3, r3, #1
 801017a:	4413      	add	r3, r2
 801017c:	009b      	lsls	r3, r3, #2
 801017e:	440b      	add	r3, r1
 8010180:	781b      	ldrb	r3, [r3, #0]
 8010182:	2b02      	cmp	r3, #2
 8010184:	d103      	bne.n	801018e <BSP_QSPI_ConfigFlash+0x3e>
    {
      ret = BSP_ERROR_QSPI_MMP_LOCK_FAILURE;
 8010186:	f06f 0319 	mvn.w	r3, #25
 801018a:	60fb      	str	r3, [r7, #12]
 801018c:	e059      	b.n	8010242 <BSP_QSPI_ConfigFlash+0xf2>
    }
    else
    {
      /* Setup MCU transfer rate setting ***************************************************/
      hqspi.Init.SampleShifting = (Rate == BSP_QSPI_STR_TRANSFER) ? QSPI_SAMPLE_SHIFTING_HALFCYCLE : QSPI_SAMPLE_SHIFTING_NONE;
 801018e:	78bb      	ldrb	r3, [r7, #2]
 8010190:	2b00      	cmp	r3, #0
 8010192:	d101      	bne.n	8010198 <BSP_QSPI_ConfigFlash+0x48>
 8010194:	2310      	movs	r3, #16
 8010196:	e000      	b.n	801019a <BSP_QSPI_ConfigFlash+0x4a>
 8010198:	2300      	movs	r3, #0
 801019a:	4a2d      	ldr	r2, [pc, #180]	@ (8010250 <BSP_QSPI_ConfigFlash+0x100>)
 801019c:	60d3      	str	r3, [r2, #12]

      if(HAL_QSPI_Init(&hqspi)!= HAL_OK)
 801019e:	482c      	ldr	r0, [pc, #176]	@ (8010250 <BSP_QSPI_ConfigFlash+0x100>)
 80101a0:	f003 fa1e 	bl	80135e0 <HAL_QSPI_Init>
 80101a4:	4603      	mov	r3, r0
 80101a6:	2b00      	cmp	r3, #0
 80101a8:	d003      	beq.n	80101b2 <BSP_QSPI_ConfigFlash+0x62>
      {
        ret = BSP_ERROR_PERIPH_FAILURE;
 80101aa:	f06f 0303 	mvn.w	r3, #3
 80101ae:	60fb      	str	r3, [r7, #12]
 80101b0:	e047      	b.n	8010242 <BSP_QSPI_ConfigFlash+0xf2>
      }
      else
      {
        /* Setup Flash interface ***************************************************/
        switch(QSPI_Ctx[Instance].InterfaceMode)
 80101b2:	4926      	ldr	r1, [pc, #152]	@ (801024c <BSP_QSPI_ConfigFlash+0xfc>)
 80101b4:	687a      	ldr	r2, [r7, #4]
 80101b6:	4613      	mov	r3, r2
 80101b8:	005b      	lsls	r3, r3, #1
 80101ba:	4413      	add	r3, r2
 80101bc:	009b      	lsls	r3, r3, #2
 80101be:	440b      	add	r3, r1
 80101c0:	3301      	adds	r3, #1
 80101c2:	781b      	ldrb	r3, [r3, #0]
 80101c4:	2b03      	cmp	r3, #3
 80101c6:	d10c      	bne.n	80101e2 <BSP_QSPI_ConfigFlash+0x92>
        {
        case MT25TL01G_QPI_MODE :               /* 4-4-4 commands */
          if(Mode != MT25TL01G_QPI_MODE)
 80101c8:	78fb      	ldrb	r3, [r7, #3]
 80101ca:	2b03      	cmp	r3, #3
 80101cc:	d016      	beq.n	80101fc <BSP_QSPI_ConfigFlash+0xac>
          {
            if(MT25TL01G_ExitQPIMode(&hqspi) != MT25TL01G_OK)
 80101ce:	4820      	ldr	r0, [pc, #128]	@ (8010250 <BSP_QSPI_ConfigFlash+0x100>)
 80101d0:	f7fe ffc6 	bl	800f160 <MT25TL01G_ExitQPIMode>
 80101d4:	4603      	mov	r3, r0
 80101d6:	2b00      	cmp	r3, #0
 80101d8:	d010      	beq.n	80101fc <BSP_QSPI_ConfigFlash+0xac>
            {
              ret = BSP_ERROR_COMPONENT_FAILURE;
 80101da:	f06f 0304 	mvn.w	r3, #4
 80101de:	60fb      	str	r3, [r7, #12]
            }
          }
          break;
 80101e0:	e00c      	b.n	80101fc <BSP_QSPI_ConfigFlash+0xac>

        case BSP_QSPI_SPI_MODE :               /* 1-1-1 commands, Power on H/W default setting */
        case BSP_QSPI_SPI_2IO_MODE :           /* 1-2-2 read commands */
        case BSP_QSPI_SPI_4IO_MODE :           /* 1-4-4 read commands */
        default :
          if(Mode == MT25TL01G_QPI_MODE)
 80101e2:	78fb      	ldrb	r3, [r7, #3]
 80101e4:	2b03      	cmp	r3, #3
 80101e6:	d10b      	bne.n	8010200 <BSP_QSPI_ConfigFlash+0xb0>
          {
            if(MT25TL01G_EnterQPIMode(&hqspi) != MT25TL01G_OK)
 80101e8:	4819      	ldr	r0, [pc, #100]	@ (8010250 <BSP_QSPI_ConfigFlash+0x100>)
 80101ea:	f7fe ff8f 	bl	800f10c <MT25TL01G_EnterQPIMode>
 80101ee:	4603      	mov	r3, r0
 80101f0:	2b00      	cmp	r3, #0
 80101f2:	d005      	beq.n	8010200 <BSP_QSPI_ConfigFlash+0xb0>
            {
              ret = BSP_ERROR_COMPONENT_FAILURE;
 80101f4:	f06f 0304 	mvn.w	r3, #4
 80101f8:	60fb      	str	r3, [r7, #12]
            }
          }
          break;
 80101fa:	e001      	b.n	8010200 <BSP_QSPI_ConfigFlash+0xb0>
          break;
 80101fc:	bf00      	nop
 80101fe:	e000      	b.n	8010202 <BSP_QSPI_ConfigFlash+0xb2>
          break;
 8010200:	bf00      	nop
        }

        /* Update QSPI context if all operations are well done */
        if(ret == BSP_ERROR_NONE)
 8010202:	68fb      	ldr	r3, [r7, #12]
 8010204:	2b00      	cmp	r3, #0
 8010206:	d11c      	bne.n	8010242 <BSP_QSPI_ConfigFlash+0xf2>
        {
          /* Update current status parameter *****************************************/
          QSPI_Ctx[Instance].IsInitialized = QSPI_ACCESS_INDIRECT;
 8010208:	4910      	ldr	r1, [pc, #64]	@ (801024c <BSP_QSPI_ConfigFlash+0xfc>)
 801020a:	687a      	ldr	r2, [r7, #4]
 801020c:	4613      	mov	r3, r2
 801020e:	005b      	lsls	r3, r3, #1
 8010210:	4413      	add	r3, r2
 8010212:	009b      	lsls	r3, r3, #2
 8010214:	440b      	add	r3, r1
 8010216:	2201      	movs	r2, #1
 8010218:	701a      	strb	r2, [r3, #0]
          QSPI_Ctx[Instance].InterfaceMode = Mode;
 801021a:	490c      	ldr	r1, [pc, #48]	@ (801024c <BSP_QSPI_ConfigFlash+0xfc>)
 801021c:	687a      	ldr	r2, [r7, #4]
 801021e:	4613      	mov	r3, r2
 8010220:	005b      	lsls	r3, r3, #1
 8010222:	4413      	add	r3, r2
 8010224:	009b      	lsls	r3, r3, #2
 8010226:	440b      	add	r3, r1
 8010228:	3301      	adds	r3, #1
 801022a:	78fa      	ldrb	r2, [r7, #3]
 801022c:	701a      	strb	r2, [r3, #0]
          QSPI_Ctx[Instance].TransferRate  = Rate;
 801022e:	4907      	ldr	r1, [pc, #28]	@ (801024c <BSP_QSPI_ConfigFlash+0xfc>)
 8010230:	687a      	ldr	r2, [r7, #4]
 8010232:	4613      	mov	r3, r2
 8010234:	005b      	lsls	r3, r3, #1
 8010236:	4413      	add	r3, r2
 8010238:	009b      	lsls	r3, r3, #2
 801023a:	440b      	add	r3, r1
 801023c:	3302      	adds	r3, #2
 801023e:	78ba      	ldrb	r2, [r7, #2]
 8010240:	701a      	strb	r2, [r3, #0]
      }
    }
  }

  /* Return BSP status */
  return ret;
 8010242:	68fb      	ldr	r3, [r7, #12]
}
 8010244:	4618      	mov	r0, r3
 8010246:	3710      	adds	r7, #16
 8010248:	46bd      	mov	sp, r7
 801024a:	bd80      	pop	{r7, pc}
 801024c:	2400b6e4 	.word	0x2400b6e4
 8010250:	2400027c 	.word	0x2400027c

08010254 <QSPI_MspInit>:
  *           - Peripheral's GPIO Configuration
  *           - NVIC configuration for QSPI interrupt
  * @retval None
  */
static void QSPI_MspInit(QSPI_HandleTypeDef *hQspi)
{
 8010254:	b580      	push	{r7, lr}
 8010256:	b094      	sub	sp, #80	@ 0x50
 8010258:	af00      	add	r7, sp, #0
 801025a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hQspi);

  /*##-1- Enable peripherals and GPIO Clocks #################################*/
  /* Enable the QuadSPI memory interface clock */
  QSPI_CLK_ENABLE();
 801025c:	4b9c      	ldr	r3, [pc, #624]	@ (80104d0 <QSPI_MspInit+0x27c>)
 801025e:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 8010262:	4a9b      	ldr	r2, [pc, #620]	@ (80104d0 <QSPI_MspInit+0x27c>)
 8010264:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8010268:	f8c2 30d4 	str.w	r3, [r2, #212]	@ 0xd4
 801026c:	4b98      	ldr	r3, [pc, #608]	@ (80104d0 <QSPI_MspInit+0x27c>)
 801026e:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 8010272:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8010276:	63bb      	str	r3, [r7, #56]	@ 0x38
 8010278:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
  /* Reset the QuadSPI memory interface */
  QSPI_FORCE_RESET();
 801027a:	4b95      	ldr	r3, [pc, #596]	@ (80104d0 <QSPI_MspInit+0x27c>)
 801027c:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 801027e:	4a94      	ldr	r2, [pc, #592]	@ (80104d0 <QSPI_MspInit+0x27c>)
 8010280:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8010284:	67d3      	str	r3, [r2, #124]	@ 0x7c
  QSPI_RELEASE_RESET();
 8010286:	4b92      	ldr	r3, [pc, #584]	@ (80104d0 <QSPI_MspInit+0x27c>)
 8010288:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 801028a:	4a91      	ldr	r2, [pc, #580]	@ (80104d0 <QSPI_MspInit+0x27c>)
 801028c:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8010290:	67d3      	str	r3, [r2, #124]	@ 0x7c
  /* Enable GPIO clocks */
  QSPI_CLK_GPIO_CLK_ENABLE();
 8010292:	4b8f      	ldr	r3, [pc, #572]	@ (80104d0 <QSPI_MspInit+0x27c>)
 8010294:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8010298:	4a8d      	ldr	r2, [pc, #564]	@ (80104d0 <QSPI_MspInit+0x27c>)
 801029a:	f043 0320 	orr.w	r3, r3, #32
 801029e:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80102a2:	4b8b      	ldr	r3, [pc, #556]	@ (80104d0 <QSPI_MspInit+0x27c>)
 80102a4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80102a8:	f003 0320 	and.w	r3, r3, #32
 80102ac:	637b      	str	r3, [r7, #52]	@ 0x34
 80102ae:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
  QSPI_BK1_CS_GPIO_CLK_ENABLE();
 80102b0:	4b87      	ldr	r3, [pc, #540]	@ (80104d0 <QSPI_MspInit+0x27c>)
 80102b2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80102b6:	4a86      	ldr	r2, [pc, #536]	@ (80104d0 <QSPI_MspInit+0x27c>)
 80102b8:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80102bc:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80102c0:	4b83      	ldr	r3, [pc, #524]	@ (80104d0 <QSPI_MspInit+0x27c>)
 80102c2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80102c6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80102ca:	633b      	str	r3, [r7, #48]	@ 0x30
 80102cc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
  QSPI_BK1_D0_GPIO_CLK_ENABLE();
 80102ce:	4b80      	ldr	r3, [pc, #512]	@ (80104d0 <QSPI_MspInit+0x27c>)
 80102d0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80102d4:	4a7e      	ldr	r2, [pc, #504]	@ (80104d0 <QSPI_MspInit+0x27c>)
 80102d6:	f043 0308 	orr.w	r3, r3, #8
 80102da:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80102de:	4b7c      	ldr	r3, [pc, #496]	@ (80104d0 <QSPI_MspInit+0x27c>)
 80102e0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80102e4:	f003 0308 	and.w	r3, r3, #8
 80102e8:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80102ea:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
  QSPI_BK1_D1_GPIO_CLK_ENABLE();
 80102ec:	4b78      	ldr	r3, [pc, #480]	@ (80104d0 <QSPI_MspInit+0x27c>)
 80102ee:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80102f2:	4a77      	ldr	r2, [pc, #476]	@ (80104d0 <QSPI_MspInit+0x27c>)
 80102f4:	f043 0320 	orr.w	r3, r3, #32
 80102f8:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80102fc:	4b74      	ldr	r3, [pc, #464]	@ (80104d0 <QSPI_MspInit+0x27c>)
 80102fe:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8010302:	f003 0320 	and.w	r3, r3, #32
 8010306:	62bb      	str	r3, [r7, #40]	@ 0x28
 8010308:	6abb      	ldr	r3, [r7, #40]	@ 0x28
  QSPI_BK1_D2_GPIO_CLK_ENABLE();
 801030a:	4b71      	ldr	r3, [pc, #452]	@ (80104d0 <QSPI_MspInit+0x27c>)
 801030c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8010310:	4a6f      	ldr	r2, [pc, #444]	@ (80104d0 <QSPI_MspInit+0x27c>)
 8010312:	f043 0320 	orr.w	r3, r3, #32
 8010316:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 801031a:	4b6d      	ldr	r3, [pc, #436]	@ (80104d0 <QSPI_MspInit+0x27c>)
 801031c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8010320:	f003 0320 	and.w	r3, r3, #32
 8010324:	627b      	str	r3, [r7, #36]	@ 0x24
 8010326:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
  QSPI_BK1_D3_GPIO_CLK_ENABLE();
 8010328:	4b69      	ldr	r3, [pc, #420]	@ (80104d0 <QSPI_MspInit+0x27c>)
 801032a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 801032e:	4a68      	ldr	r2, [pc, #416]	@ (80104d0 <QSPI_MspInit+0x27c>)
 8010330:	f043 0320 	orr.w	r3, r3, #32
 8010334:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8010338:	4b65      	ldr	r3, [pc, #404]	@ (80104d0 <QSPI_MspInit+0x27c>)
 801033a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 801033e:	f003 0320 	and.w	r3, r3, #32
 8010342:	623b      	str	r3, [r7, #32]
 8010344:	6a3b      	ldr	r3, [r7, #32]

  QSPI_BK2_CS_GPIO_CLK_ENABLE();
 8010346:	4b62      	ldr	r3, [pc, #392]	@ (80104d0 <QSPI_MspInit+0x27c>)
 8010348:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 801034c:	4a60      	ldr	r2, [pc, #384]	@ (80104d0 <QSPI_MspInit+0x27c>)
 801034e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8010352:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8010356:	4b5e      	ldr	r3, [pc, #376]	@ (80104d0 <QSPI_MspInit+0x27c>)
 8010358:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 801035c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8010360:	61fb      	str	r3, [r7, #28]
 8010362:	69fb      	ldr	r3, [r7, #28]
  QSPI_BK2_D0_GPIO_CLK_ENABLE();
 8010364:	4b5a      	ldr	r3, [pc, #360]	@ (80104d0 <QSPI_MspInit+0x27c>)
 8010366:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 801036a:	4a59      	ldr	r2, [pc, #356]	@ (80104d0 <QSPI_MspInit+0x27c>)
 801036c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8010370:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8010374:	4b56      	ldr	r3, [pc, #344]	@ (80104d0 <QSPI_MspInit+0x27c>)
 8010376:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 801037a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 801037e:	61bb      	str	r3, [r7, #24]
 8010380:	69bb      	ldr	r3, [r7, #24]
  QSPI_BK2_D1_GPIO_CLK_ENABLE();
 8010382:	4b53      	ldr	r3, [pc, #332]	@ (80104d0 <QSPI_MspInit+0x27c>)
 8010384:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8010388:	4a51      	ldr	r2, [pc, #324]	@ (80104d0 <QSPI_MspInit+0x27c>)
 801038a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 801038e:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8010392:	4b4f      	ldr	r3, [pc, #316]	@ (80104d0 <QSPI_MspInit+0x27c>)
 8010394:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8010398:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 801039c:	617b      	str	r3, [r7, #20]
 801039e:	697b      	ldr	r3, [r7, #20]
  QSPI_BK2_D2_GPIO_CLK_ENABLE();
 80103a0:	4b4b      	ldr	r3, [pc, #300]	@ (80104d0 <QSPI_MspInit+0x27c>)
 80103a2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80103a6:	4a4a      	ldr	r2, [pc, #296]	@ (80104d0 <QSPI_MspInit+0x27c>)
 80103a8:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80103ac:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80103b0:	4b47      	ldr	r3, [pc, #284]	@ (80104d0 <QSPI_MspInit+0x27c>)
 80103b2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80103b6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80103ba:	613b      	str	r3, [r7, #16]
 80103bc:	693b      	ldr	r3, [r7, #16]
  QSPI_BK2_D3_GPIO_CLK_ENABLE();
 80103be:	4b44      	ldr	r3, [pc, #272]	@ (80104d0 <QSPI_MspInit+0x27c>)
 80103c0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80103c4:	4a42      	ldr	r2, [pc, #264]	@ (80104d0 <QSPI_MspInit+0x27c>)
 80103c6:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80103ca:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80103ce:	4b40      	ldr	r3, [pc, #256]	@ (80104d0 <QSPI_MspInit+0x27c>)
 80103d0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80103d4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80103d8:	60fb      	str	r3, [r7, #12]
 80103da:	68fb      	ldr	r3, [r7, #12]

  /*##-2- Configure peripheral GPIO ##########################################*/
  /* QSPI CLK GPIO pin configuration  */
  gpio_init_structure.Pin       = QSPI_CLK_PIN;
 80103dc:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80103e0:	63fb      	str	r3, [r7, #60]	@ 0x3c
  gpio_init_structure.Mode      = GPIO_MODE_AF_PP;
 80103e2:	2302      	movs	r3, #2
 80103e4:	643b      	str	r3, [r7, #64]	@ 0x40
  gpio_init_structure.Speed     = GPIO_SPEED_FREQ_VERY_HIGH;
 80103e6:	2303      	movs	r3, #3
 80103e8:	64bb      	str	r3, [r7, #72]	@ 0x48
  gpio_init_structure.Pull      = GPIO_NOPULL;
 80103ea:	2300      	movs	r3, #0
 80103ec:	647b      	str	r3, [r7, #68]	@ 0x44
  gpio_init_structure.Alternate = GPIO_AF9_QUADSPI;
 80103ee:	2309      	movs	r3, #9
 80103f0:	64fb      	str	r3, [r7, #76]	@ 0x4c
  HAL_GPIO_Init(QSPI_CLK_GPIO_PORT, &gpio_init_structure);
 80103f2:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 80103f6:	4619      	mov	r1, r3
 80103f8:	4836      	ldr	r0, [pc, #216]	@ (80104d4 <QSPI_MspInit+0x280>)
 80103fa:	f001 fa15 	bl	8011828 <HAL_GPIO_Init>

  /* QSPI CS GPIO pin configuration  */
  gpio_init_structure.Pin       = QSPI_BK1_CS_PIN;
 80103fe:	2340      	movs	r3, #64	@ 0x40
 8010400:	63fb      	str	r3, [r7, #60]	@ 0x3c
  gpio_init_structure.Pull      = GPIO_PULLUP;
 8010402:	2301      	movs	r3, #1
 8010404:	647b      	str	r3, [r7, #68]	@ 0x44
  gpio_init_structure.Alternate = GPIO_AF10_QUADSPI;
 8010406:	230a      	movs	r3, #10
 8010408:	64fb      	str	r3, [r7, #76]	@ 0x4c
  HAL_GPIO_Init(QSPI_BK1_CS_GPIO_PORT, &gpio_init_structure);
 801040a:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 801040e:	4619      	mov	r1, r3
 8010410:	4831      	ldr	r0, [pc, #196]	@ (80104d8 <QSPI_MspInit+0x284>)
 8010412:	f001 fa09 	bl	8011828 <HAL_GPIO_Init>

  /* QSPI D0 GPIO pin configuration  */
  gpio_init_structure.Pin       = QSPI_BK1_D0_PIN;
 8010416:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 801041a:	63fb      	str	r3, [r7, #60]	@ 0x3c
  gpio_init_structure.Pull      = GPIO_NOPULL;
 801041c:	2300      	movs	r3, #0
 801041e:	647b      	str	r3, [r7, #68]	@ 0x44
  gpio_init_structure.Alternate = GPIO_AF9_QUADSPI;
 8010420:	2309      	movs	r3, #9
 8010422:	64fb      	str	r3, [r7, #76]	@ 0x4c
  HAL_GPIO_Init(QSPI_BK1_D0_GPIO_PORT, &gpio_init_structure);
 8010424:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 8010428:	4619      	mov	r1, r3
 801042a:	482c      	ldr	r0, [pc, #176]	@ (80104dc <QSPI_MspInit+0x288>)
 801042c:	f001 f9fc 	bl	8011828 <HAL_GPIO_Init>

  gpio_init_structure.Pin       = QSPI_BK2_D0_PIN;
 8010430:	2304      	movs	r3, #4
 8010432:	63fb      	str	r3, [r7, #60]	@ 0x3c
  gpio_init_structure.Alternate = GPIO_AF9_QUADSPI;
 8010434:	2309      	movs	r3, #9
 8010436:	64fb      	str	r3, [r7, #76]	@ 0x4c
  HAL_GPIO_Init(QSPI_BK2_D0_GPIO_PORT, &gpio_init_structure);
 8010438:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 801043c:	4619      	mov	r1, r3
 801043e:	4828      	ldr	r0, [pc, #160]	@ (80104e0 <QSPI_MspInit+0x28c>)
 8010440:	f001 f9f2 	bl	8011828 <HAL_GPIO_Init>

  /* QSPI D1 GPIO pin configuration  */
  gpio_init_structure.Pin       = QSPI_BK1_D1_PIN;
 8010444:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8010448:	63fb      	str	r3, [r7, #60]	@ 0x3c
  gpio_init_structure.Alternate = GPIO_AF10_QUADSPI;
 801044a:	230a      	movs	r3, #10
 801044c:	64fb      	str	r3, [r7, #76]	@ 0x4c
  HAL_GPIO_Init(QSPI_BK1_D1_GPIO_PORT, &gpio_init_structure);
 801044e:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 8010452:	4619      	mov	r1, r3
 8010454:	481f      	ldr	r0, [pc, #124]	@ (80104d4 <QSPI_MspInit+0x280>)
 8010456:	f001 f9e7 	bl	8011828 <HAL_GPIO_Init>

  gpio_init_structure.Pin       = QSPI_BK2_D1_PIN;
 801045a:	2308      	movs	r3, #8
 801045c:	63fb      	str	r3, [r7, #60]	@ 0x3c
  gpio_init_structure.Alternate = GPIO_AF9_QUADSPI;
 801045e:	2309      	movs	r3, #9
 8010460:	64fb      	str	r3, [r7, #76]	@ 0x4c
  HAL_GPIO_Init(QSPI_BK2_D1_GPIO_PORT, &gpio_init_structure);
 8010462:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 8010466:	4619      	mov	r1, r3
 8010468:	481d      	ldr	r0, [pc, #116]	@ (80104e0 <QSPI_MspInit+0x28c>)
 801046a:	f001 f9dd 	bl	8011828 <HAL_GPIO_Init>

  /* QSPI D2 GPIO pin configuration  */
  gpio_init_structure.Pin       = QSPI_BK1_D2_PIN;
 801046e:	2380      	movs	r3, #128	@ 0x80
 8010470:	63fb      	str	r3, [r7, #60]	@ 0x3c
  gpio_init_structure.Alternate = GPIO_AF9_QUADSPI;
 8010472:	2309      	movs	r3, #9
 8010474:	64fb      	str	r3, [r7, #76]	@ 0x4c
  HAL_GPIO_Init(QSPI_BK1_D2_GPIO_PORT, &gpio_init_structure);
 8010476:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 801047a:	4619      	mov	r1, r3
 801047c:	4815      	ldr	r0, [pc, #84]	@ (80104d4 <QSPI_MspInit+0x280>)
 801047e:	f001 f9d3 	bl	8011828 <HAL_GPIO_Init>

  gpio_init_structure.Pin       = QSPI_BK2_D2_PIN;
 8010482:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8010486:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(QSPI_BK2_D2_GPIO_PORT, &gpio_init_structure);
 8010488:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 801048c:	4619      	mov	r1, r3
 801048e:	4812      	ldr	r0, [pc, #72]	@ (80104d8 <QSPI_MspInit+0x284>)
 8010490:	f001 f9ca 	bl	8011828 <HAL_GPIO_Init>

  /* QSPI D3 GPIO pin configuration  */
  gpio_init_structure.Pin       = QSPI_BK1_D3_PIN;
 8010494:	2340      	movs	r3, #64	@ 0x40
 8010496:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(QSPI_BK1_D3_GPIO_PORT, &gpio_init_structure);
 8010498:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 801049c:	4619      	mov	r1, r3
 801049e:	480d      	ldr	r0, [pc, #52]	@ (80104d4 <QSPI_MspInit+0x280>)
 80104a0:	f001 f9c2 	bl	8011828 <HAL_GPIO_Init>

  gpio_init_structure.Pin       = QSPI_BK2_D3_PIN;
 80104a4:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 80104a8:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(QSPI_BK2_D3_GPIO_PORT, &gpio_init_structure);
 80104aa:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 80104ae:	4619      	mov	r1, r3
 80104b0:	4809      	ldr	r0, [pc, #36]	@ (80104d8 <QSPI_MspInit+0x284>)
 80104b2:	f001 f9b9 	bl	8011828 <HAL_GPIO_Init>

  /*##-3- Configure the NVIC for QSPI #########################################*/
  /* NVIC configuration for QSPI interrupt */
  HAL_NVIC_SetPriority(QUADSPI_IRQn, 0x0F, 0);
 80104b6:	2200      	movs	r2, #0
 80104b8:	210f      	movs	r1, #15
 80104ba:	205c      	movs	r0, #92	@ 0x5c
 80104bc:	f000 fe9c 	bl	80111f8 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(QUADSPI_IRQn);
 80104c0:	205c      	movs	r0, #92	@ 0x5c
 80104c2:	f000 feb3 	bl	801122c <HAL_NVIC_EnableIRQ>
}
 80104c6:	bf00      	nop
 80104c8:	3750      	adds	r7, #80	@ 0x50
 80104ca:	46bd      	mov	sp, r7
 80104cc:	bd80      	pop	{r7, pc}
 80104ce:	bf00      	nop
 80104d0:	58024400 	.word	0x58024400
 80104d4:	58021400 	.word	0x58021400
 80104d8:	58021800 	.word	0x58021800
 80104dc:	58020c00 	.word	0x58020c00
 80104e0:	58021c00 	.word	0x58021c00

080104e4 <QSPI_ResetMemory>:
  *         Flash accept 1-1-1, 1-1-2, 1-2-2 commands after reset.
  * @param  Instance  QSPI instance
  * @retval BSP status
  */
static int32_t QSPI_ResetMemory(uint32_t Instance)
{
 80104e4:	b580      	push	{r7, lr}
 80104e6:	b084      	sub	sp, #16
 80104e8:	af00      	add	r7, sp, #0
 80104ea:	6078      	str	r0, [r7, #4]
  int32_t ret = BSP_ERROR_NONE;
 80104ec:	2300      	movs	r3, #0
 80104ee:	60fb      	str	r3, [r7, #12]

  /* Send RESET ENABLE command in QPI mode (QUAD I/Os, 4-4-4) */
  if(MT25TL01G_ResetEnable(&hqspi, MT25TL01G_QPI_MODE) != MT25TL01G_OK)
 80104f0:	2103      	movs	r1, #3
 80104f2:	4830      	ldr	r0, [pc, #192]	@ (80105b4 <QSPI_ResetMemory+0xd0>)
 80104f4:	f7fe ff30 	bl	800f358 <MT25TL01G_ResetEnable>
 80104f8:	4603      	mov	r3, r0
 80104fa:	2b00      	cmp	r3, #0
 80104fc:	d003      	beq.n	8010506 <QSPI_ResetMemory+0x22>
  {
    ret =BSP_ERROR_COMPONENT_FAILURE;
 80104fe:	f06f 0304 	mvn.w	r3, #4
 8010502:	60fb      	str	r3, [r7, #12]
 8010504:	e051      	b.n	80105aa <QSPI_ResetMemory+0xc6>
  }/* Send RESET memory command in QPI mode (QUAD I/Os, 4-4-4) */
  else if(MT25TL01G_ResetMemory(&hqspi, MT25TL01G_QPI_MODE) != MT25TL01G_OK)
 8010506:	2103      	movs	r1, #3
 8010508:	482a      	ldr	r0, [pc, #168]	@ (80105b4 <QSPI_ResetMemory+0xd0>)
 801050a:	f7fe ff57 	bl	800f3bc <MT25TL01G_ResetMemory>
 801050e:	4603      	mov	r3, r0
 8010510:	2b00      	cmp	r3, #0
 8010512:	d003      	beq.n	801051c <QSPI_ResetMemory+0x38>
  {
    ret = BSP_ERROR_COMPONENT_FAILURE;
 8010514:	f06f 0304 	mvn.w	r3, #4
 8010518:	60fb      	str	r3, [r7, #12]
 801051a:	e046      	b.n	80105aa <QSPI_ResetMemory+0xc6>
  }/* Wait Flash ready */
  else if(MT25TL01G_AutoPollingMemReady(&hqspi, QSPI_Ctx[Instance].InterfaceMode) != MT25TL01G_OK)
 801051c:	4926      	ldr	r1, [pc, #152]	@ (80105b8 <QSPI_ResetMemory+0xd4>)
 801051e:	687a      	ldr	r2, [r7, #4]
 8010520:	4613      	mov	r3, r2
 8010522:	005b      	lsls	r3, r3, #1
 8010524:	4413      	add	r3, r2
 8010526:	009b      	lsls	r3, r3, #2
 8010528:	440b      	add	r3, r1
 801052a:	3301      	adds	r3, #1
 801052c:	781b      	ldrb	r3, [r3, #0]
 801052e:	4619      	mov	r1, r3
 8010530:	4820      	ldr	r0, [pc, #128]	@ (80105b4 <QSPI_ResetMemory+0xd0>)
 8010532:	f7fe fd54 	bl	800efde <MT25TL01G_AutoPollingMemReady>
 8010536:	4603      	mov	r3, r0
 8010538:	2b00      	cmp	r3, #0
 801053a:	d003      	beq.n	8010544 <QSPI_ResetMemory+0x60>
  {
    ret = BSP_ERROR_COMPONENT_FAILURE;
 801053c:	f06f 0304 	mvn.w	r3, #4
 8010540:	60fb      	str	r3, [r7, #12]
 8010542:	e032      	b.n	80105aa <QSPI_ResetMemory+0xc6>
  }/* Send RESET ENABLE command in SPI mode (1-1-1) */
  else if(MT25TL01G_ResetEnable(&hqspi, BSP_QSPI_SPI_MODE) != MT25TL01G_OK)
 8010544:	2100      	movs	r1, #0
 8010546:	481b      	ldr	r0, [pc, #108]	@ (80105b4 <QSPI_ResetMemory+0xd0>)
 8010548:	f7fe ff06 	bl	800f358 <MT25TL01G_ResetEnable>
 801054c:	4603      	mov	r3, r0
 801054e:	2b00      	cmp	r3, #0
 8010550:	d003      	beq.n	801055a <QSPI_ResetMemory+0x76>
  {
    ret = BSP_ERROR_COMPONENT_FAILURE;
 8010552:	f06f 0304 	mvn.w	r3, #4
 8010556:	60fb      	str	r3, [r7, #12]
 8010558:	e027      	b.n	80105aa <QSPI_ResetMemory+0xc6>
  }/* Send RESET memory command in SPI mode (1-1-1) */
  else if(MT25TL01G_ResetMemory(&hqspi, BSP_QSPI_SPI_MODE) != MT25TL01G_OK)
 801055a:	2100      	movs	r1, #0
 801055c:	4815      	ldr	r0, [pc, #84]	@ (80105b4 <QSPI_ResetMemory+0xd0>)
 801055e:	f7fe ff2d 	bl	800f3bc <MT25TL01G_ResetMemory>
 8010562:	4603      	mov	r3, r0
 8010564:	2b00      	cmp	r3, #0
 8010566:	d003      	beq.n	8010570 <QSPI_ResetMemory+0x8c>
  {
    ret = BSP_ERROR_COMPONENT_FAILURE;
 8010568:	f06f 0304 	mvn.w	r3, #4
 801056c:	60fb      	str	r3, [r7, #12]
 801056e:	e01c      	b.n	80105aa <QSPI_ResetMemory+0xc6>
  }
  else
  {
    QSPI_Ctx[Instance].IsInitialized = QSPI_ACCESS_INDIRECT;  /* After reset S/W setting to indirect access   */
 8010570:	4911      	ldr	r1, [pc, #68]	@ (80105b8 <QSPI_ResetMemory+0xd4>)
 8010572:	687a      	ldr	r2, [r7, #4]
 8010574:	4613      	mov	r3, r2
 8010576:	005b      	lsls	r3, r3, #1
 8010578:	4413      	add	r3, r2
 801057a:	009b      	lsls	r3, r3, #2
 801057c:	440b      	add	r3, r1
 801057e:	2201      	movs	r2, #1
 8010580:	701a      	strb	r2, [r3, #0]
    QSPI_Ctx[Instance].InterfaceMode = BSP_QSPI_SPI_MODE;     /* After reset H/W back to SPI mode by default  */
 8010582:	490d      	ldr	r1, [pc, #52]	@ (80105b8 <QSPI_ResetMemory+0xd4>)
 8010584:	687a      	ldr	r2, [r7, #4]
 8010586:	4613      	mov	r3, r2
 8010588:	005b      	lsls	r3, r3, #1
 801058a:	4413      	add	r3, r2
 801058c:	009b      	lsls	r3, r3, #2
 801058e:	440b      	add	r3, r1
 8010590:	3301      	adds	r3, #1
 8010592:	2200      	movs	r2, #0
 8010594:	701a      	strb	r2, [r3, #0]
    QSPI_Ctx[Instance].TransferRate  = BSP_QSPI_STR_TRANSFER; /* After reset S/W setting to STR mode          */
 8010596:	4908      	ldr	r1, [pc, #32]	@ (80105b8 <QSPI_ResetMemory+0xd4>)
 8010598:	687a      	ldr	r2, [r7, #4]
 801059a:	4613      	mov	r3, r2
 801059c:	005b      	lsls	r3, r3, #1
 801059e:	4413      	add	r3, r2
 80105a0:	009b      	lsls	r3, r3, #2
 80105a2:	440b      	add	r3, r1
 80105a4:	3302      	adds	r3, #2
 80105a6:	2200      	movs	r2, #0
 80105a8:	701a      	strb	r2, [r3, #0]

  }

  /* Return BSP status */
  return ret;
 80105aa:	68fb      	ldr	r3, [r7, #12]
}
 80105ac:	4618      	mov	r0, r3
 80105ae:	3710      	adds	r7, #16
 80105b0:	46bd      	mov	sp, r7
 80105b2:	bd80      	pop	{r7, pc}
 80105b4:	2400027c 	.word	0x2400027c
 80105b8:	2400b6e4 	.word	0x2400b6e4

080105bc <QSPI_DummyCyclesCfg>:
  *         Dummy cycle bit locate in Configuration Register[7:6]
  * @param  Instance  QSPI instance
  * @retval BSP status
  */
static int32_t QSPI_DummyCyclesCfg(uint32_t Instance)
{
 80105bc:	b580      	push	{r7, lr}
 80105be:	b092      	sub	sp, #72	@ 0x48
 80105c0:	af00      	add	r7, sp, #0
 80105c2:	6078      	str	r0, [r7, #4]
    int32_t ret= BSP_ERROR_NONE;
 80105c4:	2300      	movs	r3, #0
 80105c6:	647b      	str	r3, [r7, #68]	@ 0x44
    QSPI_CommandTypeDef s_command;
  uint16_t reg=0;
 80105c8:	2300      	movs	r3, #0
 80105ca:	817b      	strh	r3, [r7, #10]

  /* Initialize the read volatile configuration register command */
  s_command.InstructionMode   = QSPI_INSTRUCTION_4_LINES;
 80105cc:	f44f 7340 	mov.w	r3, #768	@ 0x300
 80105d0:	627b      	str	r3, [r7, #36]	@ 0x24
  s_command.Instruction       = MT25TL01G_READ_VOL_CFG_REG_CMD;
 80105d2:	2385      	movs	r3, #133	@ 0x85
 80105d4:	60fb      	str	r3, [r7, #12]
  s_command.AddressMode       = QSPI_ADDRESS_NONE;
 80105d6:	2300      	movs	r3, #0
 80105d8:	62bb      	str	r3, [r7, #40]	@ 0x28
  s_command.AlternateByteMode = QSPI_ALTERNATE_BYTES_NONE;
 80105da:	2300      	movs	r3, #0
 80105dc:	62fb      	str	r3, [r7, #44]	@ 0x2c
  s_command.DataMode          = QSPI_DATA_4_LINES;
 80105de:	f04f 7340 	mov.w	r3, #50331648	@ 0x3000000
 80105e2:	633b      	str	r3, [r7, #48]	@ 0x30
  s_command.DummyCycles       = 0;
 80105e4:	2300      	movs	r3, #0
 80105e6:	623b      	str	r3, [r7, #32]
  s_command.NbData            = 2;
 80105e8:	2302      	movs	r3, #2
 80105ea:	637b      	str	r3, [r7, #52]	@ 0x34
  s_command.DdrMode           = QSPI_DDR_MODE_DISABLE;
 80105ec:	2300      	movs	r3, #0
 80105ee:	63bb      	str	r3, [r7, #56]	@ 0x38
  s_command.DdrHoldHalfCycle  = QSPI_DDR_HHC_ANALOG_DELAY;
 80105f0:	2300      	movs	r3, #0
 80105f2:	63fb      	str	r3, [r7, #60]	@ 0x3c
  s_command.SIOOMode          = QSPI_SIOO_INST_EVERY_CMD;
 80105f4:	2300      	movs	r3, #0
 80105f6:	643b      	str	r3, [r7, #64]	@ 0x40

  /* Configure the command */
  if (HAL_QSPI_Command(&hqspi, &s_command, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 80105f8:	f107 030c 	add.w	r3, r7, #12
 80105fc:	f241 3288 	movw	r2, #5000	@ 0x1388
 8010600:	4619      	mov	r1, r3
 8010602:	482b      	ldr	r0, [pc, #172]	@ (80106b0 <QSPI_DummyCyclesCfg+0xf4>)
 8010604:	f003 fa1a 	bl	8013a3c <HAL_QSPI_Command>
 8010608:	4603      	mov	r3, r0
 801060a:	2b00      	cmp	r3, #0
 801060c:	d002      	beq.n	8010614 <QSPI_DummyCyclesCfg+0x58>
  {
    return BSP_ERROR_COMPONENT_FAILURE;
 801060e:	f06f 0304 	mvn.w	r3, #4
 8010612:	e048      	b.n	80106a6 <QSPI_DummyCyclesCfg+0xea>
  }

  /* Reception of the data */
  if (HAL_QSPI_Receive(&hqspi, (uint8_t *)(&reg), HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8010614:	f107 030a 	add.w	r3, r7, #10
 8010618:	f241 3288 	movw	r2, #5000	@ 0x1388
 801061c:	4619      	mov	r1, r3
 801061e:	4824      	ldr	r0, [pc, #144]	@ (80106b0 <QSPI_DummyCyclesCfg+0xf4>)
 8010620:	f003 fafc 	bl	8013c1c <HAL_QSPI_Receive>
 8010624:	4603      	mov	r3, r0
 8010626:	2b00      	cmp	r3, #0
 8010628:	d002      	beq.n	8010630 <QSPI_DummyCyclesCfg+0x74>
  {
    return BSP_ERROR_COMPONENT_FAILURE;
 801062a:	f06f 0304 	mvn.w	r3, #4
 801062e:	e03a      	b.n	80106a6 <QSPI_DummyCyclesCfg+0xea>
  }

  /* Enable write operations */
  if (MT25TL01G_WriteEnable(&hqspi, QSPI_Ctx[Instance].InterfaceMode) != MT25TL01G_OK)
 8010630:	4920      	ldr	r1, [pc, #128]	@ (80106b4 <QSPI_DummyCyclesCfg+0xf8>)
 8010632:	687a      	ldr	r2, [r7, #4]
 8010634:	4613      	mov	r3, r2
 8010636:	005b      	lsls	r3, r3, #1
 8010638:	4413      	add	r3, r2
 801063a:	009b      	lsls	r3, r3, #2
 801063c:	440b      	add	r3, r1
 801063e:	3301      	adds	r3, #1
 8010640:	781b      	ldrb	r3, [r3, #0]
 8010642:	4619      	mov	r1, r3
 8010644:	481a      	ldr	r0, [pc, #104]	@ (80106b0 <QSPI_DummyCyclesCfg+0xf4>)
 8010646:	f7fe fd06 	bl	800f056 <MT25TL01G_WriteEnable>
 801064a:	4603      	mov	r3, r0
 801064c:	2b00      	cmp	r3, #0
 801064e:	d002      	beq.n	8010656 <QSPI_DummyCyclesCfg+0x9a>
  {
    return BSP_ERROR_COMPONENT_FAILURE;
 8010650:	f06f 0304 	mvn.w	r3, #4
 8010654:	e027      	b.n	80106a6 <QSPI_DummyCyclesCfg+0xea>
  }

  /* Update volatile configuration register (with new dummy cycles) */
  s_command.Instruction = MT25TL01G_WRITE_VOL_CFG_REG_CMD;
 8010656:	2381      	movs	r3, #129	@ 0x81
 8010658:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(reg, 0xF0F0, ((MT25TL01G_DUMMY_CYCLES_READ_QUAD << 4) |
 801065a:	897a      	ldrh	r2, [r7, #10]
 801065c:	f640 730f 	movw	r3, #3855	@ 0xf0f
 8010660:	4013      	ands	r3, r2
 8010662:	b29a      	uxth	r2, r3
 8010664:	4b14      	ldr	r3, [pc, #80]	@ (80106b8 <QSPI_DummyCyclesCfg+0xfc>)
 8010666:	4313      	orrs	r3, r2
 8010668:	b29b      	uxth	r3, r3
 801066a:	817b      	strh	r3, [r7, #10]
                               (MT25TL01G_DUMMY_CYCLES_READ_QUAD << 12)));

  /* Configure the write volatile configuration register command */
  if (HAL_QSPI_Command(&hqspi, &s_command, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 801066c:	f107 030c 	add.w	r3, r7, #12
 8010670:	f241 3288 	movw	r2, #5000	@ 0x1388
 8010674:	4619      	mov	r1, r3
 8010676:	480e      	ldr	r0, [pc, #56]	@ (80106b0 <QSPI_DummyCyclesCfg+0xf4>)
 8010678:	f003 f9e0 	bl	8013a3c <HAL_QSPI_Command>
 801067c:	4603      	mov	r3, r0
 801067e:	2b00      	cmp	r3, #0
 8010680:	d002      	beq.n	8010688 <QSPI_DummyCyclesCfg+0xcc>
  {
    return BSP_ERROR_COMPONENT_FAILURE;
 8010682:	f06f 0304 	mvn.w	r3, #4
 8010686:	e00e      	b.n	80106a6 <QSPI_DummyCyclesCfg+0xea>
  }

  /* Transmission of the data */
  if (HAL_QSPI_Transmit(&hqspi, (uint8_t *)(&reg), HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8010688:	f107 030a 	add.w	r3, r7, #10
 801068c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8010690:	4619      	mov	r1, r3
 8010692:	4807      	ldr	r0, [pc, #28]	@ (80106b0 <QSPI_DummyCyclesCfg+0xf4>)
 8010694:	f003 fa30 	bl	8013af8 <HAL_QSPI_Transmit>
 8010698:	4603      	mov	r3, r0
 801069a:	2b00      	cmp	r3, #0
 801069c:	d002      	beq.n	80106a4 <QSPI_DummyCyclesCfg+0xe8>
  {
    return BSP_ERROR_COMPONENT_FAILURE;
 801069e:	f06f 0304 	mvn.w	r3, #4
 80106a2:	e000      	b.n	80106a6 <QSPI_DummyCyclesCfg+0xea>
  }

  /* Return BSP status */
  return ret;
 80106a4:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
}
 80106a6:	4618      	mov	r0, r3
 80106a8:	3748      	adds	r7, #72	@ 0x48
 80106aa:	46bd      	mov	sp, r7
 80106ac:	bd80      	pop	{r7, pc}
 80106ae:	bf00      	nop
 80106b0:	2400027c 	.word	0x2400027c
 80106b4:	2400b6e4 	.word	0x2400b6e4
 80106b8:	ffff8080 	.word	0xffff8080

080106bc <BSP_SDRAM_Init>:
  * @brief  Initializes the SDRAM device.
  * @param Instance  SDRAM Instance
  * @retval BSP status
  */
int32_t BSP_SDRAM_Init(uint32_t Instance)
{
 80106bc:	b580      	push	{r7, lr}
 80106be:	b084      	sub	sp, #16
 80106c0:	af00      	add	r7, sp, #0
 80106c2:	6078      	str	r0, [r7, #4]
  int32_t ret = BSP_ERROR_NONE;
 80106c4:	2300      	movs	r3, #0
 80106c6:	60fb      	str	r3, [r7, #12]
  static MT48LC4M32B2_Context_t pRegMode;
  if(Instance >=SDRAM_INSTANCES_NBR)
 80106c8:	687b      	ldr	r3, [r7, #4]
 80106ca:	2b00      	cmp	r3, #0
 80106cc:	d003      	beq.n	80106d6 <BSP_SDRAM_Init+0x1a>
  {
    ret =  BSP_ERROR_WRONG_PARAM;
 80106ce:	f06f 0301 	mvn.w	r3, #1
 80106d2:	60fb      	str	r3, [r7, #12]
 80106d4:	e044      	b.n	8010760 <BSP_SDRAM_Init+0xa4>
        return BSP_ERROR_PERIPH_FAILURE;
      }
    }
#else
    /* Msp SDRAM initialization */
    SDRAM_MspInit(&hsdram[Instance]);
 80106d6:	687b      	ldr	r3, [r7, #4]
 80106d8:	2234      	movs	r2, #52	@ 0x34
 80106da:	fb02 f303 	mul.w	r3, r2, r3
 80106de:	4a23      	ldr	r2, [pc, #140]	@ (801076c <BSP_SDRAM_Init+0xb0>)
 80106e0:	4413      	add	r3, r2
 80106e2:	4618      	mov	r0, r3
 80106e4:	f000 f8b8 	bl	8010858 <SDRAM_MspInit>
#endif /* USE_HAL_SDRAM_REGISTER_CALLBACKS */
    if(MX_SDRAM_BANK2_Init(&hsdram[Instance],FMC_SDRAM_ROW_BITS_NUM_12, FMC_SDRAM_MEM_BUS_WIDTH_16) != HAL_OK)
 80106e8:	687b      	ldr	r3, [r7, #4]
 80106ea:	2234      	movs	r2, #52	@ 0x34
 80106ec:	fb02 f303 	mul.w	r3, r2, r3
 80106f0:	4a1e      	ldr	r2, [pc, #120]	@ (801076c <BSP_SDRAM_Init+0xb0>)
 80106f2:	4413      	add	r3, r2
 80106f4:	2210      	movs	r2, #16
 80106f6:	2104      	movs	r1, #4
 80106f8:	4618      	mov	r0, r3
 80106fa:	f000 f861 	bl	80107c0 <MX_SDRAM_BANK2_Init>
 80106fe:	4603      	mov	r3, r0
 8010700:	2b00      	cmp	r3, #0
 8010702:	d003      	beq.n	801070c <BSP_SDRAM_Init+0x50>
    {
      ret = BSP_ERROR_NO_INIT;
 8010704:	f04f 33ff 	mov.w	r3, #4294967295
 8010708:	60fb      	str	r3, [r7, #12]
 801070a:	e029      	b.n	8010760 <BSP_SDRAM_Init+0xa4>
    }
    else
    {
      /* External memory mode register configuration */
      pRegMode.TargetBank      = FMC_SDRAM_CMD_TARGET_BANK2;
 801070c:	4b18      	ldr	r3, [pc, #96]	@ (8010770 <BSP_SDRAM_Init+0xb4>)
 801070e:	2208      	movs	r2, #8
 8010710:	601a      	str	r2, [r3, #0]
      pRegMode.RefreshMode     = MT48LC4M32B2_AUTOREFRESH_MODE_CMD;
 8010712:	4b17      	ldr	r3, [pc, #92]	@ (8010770 <BSP_SDRAM_Init+0xb4>)
 8010714:	2203      	movs	r2, #3
 8010716:	605a      	str	r2, [r3, #4]
      pRegMode.RefreshRate     = REFRESH_COUNT;
 8010718:	4b15      	ldr	r3, [pc, #84]	@ (8010770 <BSP_SDRAM_Init+0xb4>)
 801071a:	f240 6203 	movw	r2, #1539	@ 0x603
 801071e:	609a      	str	r2, [r3, #8]
      pRegMode.BurstLength     = MT48LC4M32B2_BURST_LENGTH_1;
 8010720:	4b13      	ldr	r3, [pc, #76]	@ (8010770 <BSP_SDRAM_Init+0xb4>)
 8010722:	2200      	movs	r2, #0
 8010724:	60da      	str	r2, [r3, #12]
      pRegMode.BurstType       = MT48LC4M32B2_BURST_TYPE_SEQUENTIAL;
 8010726:	4b12      	ldr	r3, [pc, #72]	@ (8010770 <BSP_SDRAM_Init+0xb4>)
 8010728:	2200      	movs	r2, #0
 801072a:	611a      	str	r2, [r3, #16]
      pRegMode.CASLatency      = MT48LC4M32B2_CAS_LATENCY_3;
 801072c:	4b10      	ldr	r3, [pc, #64]	@ (8010770 <BSP_SDRAM_Init+0xb4>)
 801072e:	2230      	movs	r2, #48	@ 0x30
 8010730:	615a      	str	r2, [r3, #20]
      pRegMode.OperationMode   = MT48LC4M32B2_OPERATING_MODE_STANDARD;
 8010732:	4b0f      	ldr	r3, [pc, #60]	@ (8010770 <BSP_SDRAM_Init+0xb4>)
 8010734:	2200      	movs	r2, #0
 8010736:	619a      	str	r2, [r3, #24]
      pRegMode.WriteBurstMode  = MT48LC4M32B2_WRITEBURST_MODE_SINGLE;
 8010738:	4b0d      	ldr	r3, [pc, #52]	@ (8010770 <BSP_SDRAM_Init+0xb4>)
 801073a:	f44f 7200 	mov.w	r2, #512	@ 0x200
 801073e:	61da      	str	r2, [r3, #28]

      /* SDRAM initialization sequence */
      if(MT48LC4M32B2_Init(&hsdram[Instance], &pRegMode) != MT48LC4M32B2_OK)
 8010740:	687b      	ldr	r3, [r7, #4]
 8010742:	2234      	movs	r2, #52	@ 0x34
 8010744:	fb02 f303 	mul.w	r3, r2, r3
 8010748:	4a08      	ldr	r2, [pc, #32]	@ (801076c <BSP_SDRAM_Init+0xb0>)
 801074a:	4413      	add	r3, r2
 801074c:	4908      	ldr	r1, [pc, #32]	@ (8010770 <BSP_SDRAM_Init+0xb4>)
 801074e:	4618      	mov	r0, r3
 8010750:	f7fe fe66 	bl	800f420 <MT48LC4M32B2_Init>
 8010754:	4603      	mov	r3, r0
 8010756:	2b00      	cmp	r3, #0
 8010758:	d002      	beq.n	8010760 <BSP_SDRAM_Init+0xa4>
      {
        ret =  BSP_ERROR_COMPONENT_FAILURE;
 801075a:	f06f 0304 	mvn.w	r3, #4
 801075e:	60fb      	str	r3, [r7, #12]
      }
    }
  }

  return ret;
 8010760:	68fb      	ldr	r3, [r7, #12]
}
 8010762:	4618      	mov	r0, r3
 8010764:	3710      	adds	r7, #16
 8010766:	46bd      	mov	sp, r7
 8010768:	bd80      	pop	{r7, pc}
 801076a:	bf00      	nop
 801076c:	2400b6f0 	.word	0x2400b6f0
 8010770:	2400b724 	.word	0x2400b724

08010774 <BSP_SDRAM_DeInit>:
  * @brief  DeInitializes the SDRAM device.
  * @param  Instance  SDRAM Instance
  * @retval BSP status
  */
int32_t BSP_SDRAM_DeInit(uint32_t Instance)
{
 8010774:	b580      	push	{r7, lr}
 8010776:	b084      	sub	sp, #16
 8010778:	af00      	add	r7, sp, #0
 801077a:	6078      	str	r0, [r7, #4]
  int32_t ret = BSP_ERROR_NONE;
 801077c:	2300      	movs	r3, #0
 801077e:	60fb      	str	r3, [r7, #12]

  if(Instance >= SDRAM_INSTANCES_NBR)
 8010780:	687b      	ldr	r3, [r7, #4]
 8010782:	2b00      	cmp	r3, #0
 8010784:	d003      	beq.n	801078e <BSP_SDRAM_DeInit+0x1a>
  {
    ret =  BSP_ERROR_WRONG_PARAM;
 8010786:	f06f 0301 	mvn.w	r3, #1
 801078a:	60fb      	str	r3, [r7, #12]
 801078c:	e011      	b.n	80107b2 <BSP_SDRAM_DeInit+0x3e>
  }
  else
  {
    (void)HAL_SDRAM_DeInit(&hsdram[Instance]);
 801078e:	687b      	ldr	r3, [r7, #4]
 8010790:	2234      	movs	r2, #52	@ 0x34
 8010792:	fb02 f303 	mul.w	r3, r2, r3
 8010796:	4a09      	ldr	r2, [pc, #36]	@ (80107bc <BSP_SDRAM_DeInit+0x48>)
 8010798:	4413      	add	r3, r2
 801079a:	4618      	mov	r0, r3
 801079c:	f006 fa3e 	bl	8016c1c <HAL_SDRAM_DeInit>
#if (USE_HAL_SDRAM_REGISTER_CALLBACKS == 0)
    /* SDRAM controller de-initialization */
    SDRAM_MspDeInit(&hsdram[Instance]);
 80107a0:	687b      	ldr	r3, [r7, #4]
 80107a2:	2234      	movs	r2, #52	@ 0x34
 80107a4:	fb02 f303 	mul.w	r3, r2, r3
 80107a8:	4a04      	ldr	r2, [pc, #16]	@ (80107bc <BSP_SDRAM_DeInit+0x48>)
 80107aa:	4413      	add	r3, r2
 80107ac:	4618      	mov	r0, r3
 80107ae:	f000 f951 	bl	8010a54 <SDRAM_MspDeInit>
#endif /* (USE_HAL_SDRAM_REGISTER_CALLBACKS == 0) */
  }

  return ret;
 80107b2:	68fb      	ldr	r3, [r7, #12]
}
 80107b4:	4618      	mov	r0, r3
 80107b6:	3710      	adds	r7, #16
 80107b8:	46bd      	mov	sp, r7
 80107ba:	bd80      	pop	{r7, pc}
 80107bc:	2400b6f0 	.word	0x2400b6f0

080107c0 <MX_SDRAM_BANK2_Init>:
  * @param  RowBitsNumber Number of row to set
  * @param  MemoryDataWidth The momory width 16 or 32bits
  * @retval HAL status
  */
__weak HAL_StatusTypeDef MX_SDRAM_BANK2_Init(SDRAM_HandleTypeDef *hSdram, uint32_t RowBitsNumber, uint32_t MemoryDataWidth)
{
 80107c0:	b580      	push	{r7, lr}
 80107c2:	b08c      	sub	sp, #48	@ 0x30
 80107c4:	af00      	add	r7, sp, #0
 80107c6:	60f8      	str	r0, [r7, #12]
 80107c8:	60b9      	str	r1, [r7, #8]
 80107ca:	607a      	str	r2, [r7, #4]
  FMC_SDRAM_TimingTypeDef sdram_timing;

  /* SDRAM device configuration */
  hsdram->Instance = FMC_SDRAM_DEVICE;
 80107cc:	4b20      	ldr	r3, [pc, #128]	@ (8010850 <MX_SDRAM_BANK2_Init+0x90>)
 80107ce:	4a21      	ldr	r2, [pc, #132]	@ (8010854 <MX_SDRAM_BANK2_Init+0x94>)
 80107d0:	601a      	str	r2, [r3, #0]

  /* SDRAM handle configuration */
  hSdram->Init.SDBank             = FMC_SDRAM_BANK2;
 80107d2:	68fb      	ldr	r3, [r7, #12]
 80107d4:	2201      	movs	r2, #1
 80107d6:	605a      	str	r2, [r3, #4]
  hSdram->Init.ColumnBitsNumber   = FMC_SDRAM_COLUMN_BITS_NUM_8;
 80107d8:	68fb      	ldr	r3, [r7, #12]
 80107da:	2200      	movs	r2, #0
 80107dc:	609a      	str	r2, [r3, #8]
  hSdram->Init.RowBitsNumber      = RowBitsNumber;
 80107de:	68fb      	ldr	r3, [r7, #12]
 80107e0:	68ba      	ldr	r2, [r7, #8]
 80107e2:	60da      	str	r2, [r3, #12]
  hSdram->Init.MemoryDataWidth    = MemoryDataWidth;
 80107e4:	68fb      	ldr	r3, [r7, #12]
 80107e6:	687a      	ldr	r2, [r7, #4]
 80107e8:	611a      	str	r2, [r3, #16]
  hsdram->Init.InternalBankNumber = FMC_SDRAM_INTERN_BANKS_NUM_4;
 80107ea:	4b19      	ldr	r3, [pc, #100]	@ (8010850 <MX_SDRAM_BANK2_Init+0x90>)
 80107ec:	2240      	movs	r2, #64	@ 0x40
 80107ee:	615a      	str	r2, [r3, #20]
  hSdram->Init.CASLatency         = FMC_SDRAM_CAS_LATENCY_3;
 80107f0:	68fb      	ldr	r3, [r7, #12]
 80107f2:	f44f 72c0 	mov.w	r2, #384	@ 0x180
 80107f6:	619a      	str	r2, [r3, #24]
  hSdram->Init.WriteProtection    = FMC_SDRAM_WRITE_PROTECTION_DISABLE;
 80107f8:	68fb      	ldr	r3, [r7, #12]
 80107fa:	2200      	movs	r2, #0
 80107fc:	61da      	str	r2, [r3, #28]
  hSdram->Init.SDClockPeriod      = FMC_SDRAM_CLOCK_PERIOD_2;
 80107fe:	68fb      	ldr	r3, [r7, #12]
 8010800:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8010804:	621a      	str	r2, [r3, #32]
  hSdram->Init.ReadBurst          = FMC_SDRAM_RBURST_ENABLE;
 8010806:	68fb      	ldr	r3, [r7, #12]
 8010808:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 801080c:	625a      	str	r2, [r3, #36]	@ 0x24
  hSdram->Init.ReadPipeDelay      = FMC_SDRAM_RPIPE_DELAY_0;
 801080e:	68fb      	ldr	r3, [r7, #12]
 8010810:	2200      	movs	r2, #0
 8010812:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Timing configuration for as SDRAM */
  sdram_timing.LoadToActiveDelay    = 2;
 8010814:	2302      	movs	r3, #2
 8010816:	617b      	str	r3, [r7, #20]
  sdram_timing.ExitSelfRefreshDelay = 7;
 8010818:	2307      	movs	r3, #7
 801081a:	61bb      	str	r3, [r7, #24]
  sdram_timing.SelfRefreshTime      = 4;
 801081c:	2304      	movs	r3, #4
 801081e:	61fb      	str	r3, [r7, #28]
  sdram_timing.RowCycleDelay        = 7;
 8010820:	2307      	movs	r3, #7
 8010822:	623b      	str	r3, [r7, #32]
  sdram_timing.WriteRecoveryTime    = 2;
 8010824:	2302      	movs	r3, #2
 8010826:	627b      	str	r3, [r7, #36]	@ 0x24
  sdram_timing.RPDelay              = 2;
 8010828:	2302      	movs	r3, #2
 801082a:	62bb      	str	r3, [r7, #40]	@ 0x28
  sdram_timing.RCDDelay             = 2;
 801082c:	2302      	movs	r3, #2
 801082e:	62fb      	str	r3, [r7, #44]	@ 0x2c

  /* SDRAM controller initialization */
  if(HAL_SDRAM_Init(hSdram, &sdram_timing) != HAL_OK)
 8010830:	f107 0314 	add.w	r3, r7, #20
 8010834:	4619      	mov	r1, r3
 8010836:	68f8      	ldr	r0, [r7, #12]
 8010838:	f006 f9b4 	bl	8016ba4 <HAL_SDRAM_Init>
 801083c:	4603      	mov	r3, r0
 801083e:	2b00      	cmp	r3, #0
 8010840:	d001      	beq.n	8010846 <MX_SDRAM_BANK2_Init+0x86>
  {
    return  HAL_ERROR;
 8010842:	2301      	movs	r3, #1
 8010844:	e000      	b.n	8010848 <MX_SDRAM_BANK2_Init+0x88>
  }
  return HAL_OK;
 8010846:	2300      	movs	r3, #0
}
 8010848:	4618      	mov	r0, r3
 801084a:	3730      	adds	r7, #48	@ 0x30
 801084c:	46bd      	mov	sp, r7
 801084e:	bd80      	pop	{r7, pc}
 8010850:	2400b6f0 	.word	0x2400b6f0
 8010854:	52004140 	.word	0x52004140

08010858 <SDRAM_MspInit>:
  * @brief  Initializes SDRAM MSP.
  * @param  hSdram SDRAM handle
  * @retval None
  */
static void SDRAM_MspInit(SDRAM_HandleTypeDef  *hSdram)
{
 8010858:	b580      	push	{r7, lr}
 801085a:	b08e      	sub	sp, #56	@ 0x38
 801085c:	af00      	add	r7, sp, #0
 801085e:	6078      	str	r0, [r7, #4]
  static MDMA_HandleTypeDef mdma_handle;
  GPIO_InitTypeDef gpio_init_structure;

  /* Enable FMC clock */
  __HAL_RCC_FMC_CLK_ENABLE();
 8010860:	4b73      	ldr	r3, [pc, #460]	@ (8010a30 <SDRAM_MspInit+0x1d8>)
 8010862:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 8010866:	4a72      	ldr	r2, [pc, #456]	@ (8010a30 <SDRAM_MspInit+0x1d8>)
 8010868:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 801086c:	f8c2 30d4 	str.w	r3, [r2, #212]	@ 0xd4
 8010870:	4b6f      	ldr	r3, [pc, #444]	@ (8010a30 <SDRAM_MspInit+0x1d8>)
 8010872:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 8010876:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 801087a:	623b      	str	r3, [r7, #32]
 801087c:	6a3b      	ldr	r3, [r7, #32]

  /* Enable chosen MDMAx clock */
  SDRAM_MDMAx_CLK_ENABLE();
 801087e:	4b6c      	ldr	r3, [pc, #432]	@ (8010a30 <SDRAM_MspInit+0x1d8>)
 8010880:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 8010884:	4a6a      	ldr	r2, [pc, #424]	@ (8010a30 <SDRAM_MspInit+0x1d8>)
 8010886:	f043 0301 	orr.w	r3, r3, #1
 801088a:	f8c2 30d4 	str.w	r3, [r2, #212]	@ 0xd4
 801088e:	4b68      	ldr	r3, [pc, #416]	@ (8010a30 <SDRAM_MspInit+0x1d8>)
 8010890:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 8010894:	f003 0301 	and.w	r3, r3, #1
 8010898:	61fb      	str	r3, [r7, #28]
 801089a:	69fb      	ldr	r3, [r7, #28]

  /* Enable GPIOs clock */
  __HAL_RCC_GPIOD_CLK_ENABLE();
 801089c:	4b64      	ldr	r3, [pc, #400]	@ (8010a30 <SDRAM_MspInit+0x1d8>)
 801089e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80108a2:	4a63      	ldr	r2, [pc, #396]	@ (8010a30 <SDRAM_MspInit+0x1d8>)
 80108a4:	f043 0308 	orr.w	r3, r3, #8
 80108a8:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80108ac:	4b60      	ldr	r3, [pc, #384]	@ (8010a30 <SDRAM_MspInit+0x1d8>)
 80108ae:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80108b2:	f003 0308 	and.w	r3, r3, #8
 80108b6:	61bb      	str	r3, [r7, #24]
 80108b8:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80108ba:	4b5d      	ldr	r3, [pc, #372]	@ (8010a30 <SDRAM_MspInit+0x1d8>)
 80108bc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80108c0:	4a5b      	ldr	r2, [pc, #364]	@ (8010a30 <SDRAM_MspInit+0x1d8>)
 80108c2:	f043 0310 	orr.w	r3, r3, #16
 80108c6:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80108ca:	4b59      	ldr	r3, [pc, #356]	@ (8010a30 <SDRAM_MspInit+0x1d8>)
 80108cc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80108d0:	f003 0310 	and.w	r3, r3, #16
 80108d4:	617b      	str	r3, [r7, #20]
 80108d6:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80108d8:	4b55      	ldr	r3, [pc, #340]	@ (8010a30 <SDRAM_MspInit+0x1d8>)
 80108da:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80108de:	4a54      	ldr	r2, [pc, #336]	@ (8010a30 <SDRAM_MspInit+0x1d8>)
 80108e0:	f043 0320 	orr.w	r3, r3, #32
 80108e4:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80108e8:	4b51      	ldr	r3, [pc, #324]	@ (8010a30 <SDRAM_MspInit+0x1d8>)
 80108ea:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80108ee:	f003 0320 	and.w	r3, r3, #32
 80108f2:	613b      	str	r3, [r7, #16]
 80108f4:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 80108f6:	4b4e      	ldr	r3, [pc, #312]	@ (8010a30 <SDRAM_MspInit+0x1d8>)
 80108f8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80108fc:	4a4c      	ldr	r2, [pc, #304]	@ (8010a30 <SDRAM_MspInit+0x1d8>)
 80108fe:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8010902:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8010906:	4b4a      	ldr	r3, [pc, #296]	@ (8010a30 <SDRAM_MspInit+0x1d8>)
 8010908:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 801090c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8010910:	60fb      	str	r3, [r7, #12]
 8010912:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8010914:	4b46      	ldr	r3, [pc, #280]	@ (8010a30 <SDRAM_MspInit+0x1d8>)
 8010916:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 801091a:	4a45      	ldr	r2, [pc, #276]	@ (8010a30 <SDRAM_MspInit+0x1d8>)
 801091c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8010920:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8010924:	4b42      	ldr	r3, [pc, #264]	@ (8010a30 <SDRAM_MspInit+0x1d8>)
 8010926:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 801092a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 801092e:	60bb      	str	r3, [r7, #8]
 8010930:	68bb      	ldr	r3, [r7, #8]

  /* Common GPIO configuration */
  gpio_init_structure.Mode      = GPIO_MODE_AF_PP;
 8010932:	2302      	movs	r3, #2
 8010934:	62bb      	str	r3, [r7, #40]	@ 0x28
  gpio_init_structure.Pull      = GPIO_PULLUP;
 8010936:	2301      	movs	r3, #1
 8010938:	62fb      	str	r3, [r7, #44]	@ 0x2c
  gpio_init_structure.Speed     = GPIO_SPEED_FREQ_VERY_HIGH;
 801093a:	2303      	movs	r3, #3
 801093c:	633b      	str	r3, [r7, #48]	@ 0x30
  gpio_init_structure.Alternate = GPIO_AF12_FMC;
 801093e:	230c      	movs	r3, #12
 8010940:	637b      	str	r3, [r7, #52]	@ 0x34

  /* GPIOD configuration */
  gpio_init_structure.Pin   = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_8| GPIO_PIN_9 | GPIO_PIN_10 |\
 8010942:	f24c 7303 	movw	r3, #50947	@ 0xc703
 8010946:	627b      	str	r3, [r7, #36]	@ 0x24
                              GPIO_PIN_14 | GPIO_PIN_15;


  HAL_GPIO_Init(GPIOD, &gpio_init_structure);
 8010948:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 801094c:	4619      	mov	r1, r3
 801094e:	4839      	ldr	r0, [pc, #228]	@ (8010a34 <SDRAM_MspInit+0x1dc>)
 8010950:	f000 ff6a 	bl	8011828 <HAL_GPIO_Init>

  /* GPIOE configuration */
  gpio_init_structure.Pin   = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_7| GPIO_PIN_8 | GPIO_PIN_9 |\
 8010954:	f64f 7383 	movw	r3, #65411	@ 0xff83
 8010958:	627b      	str	r3, [r7, #36]	@ 0x24
                              GPIO_PIN_10 | GPIO_PIN_11 | GPIO_PIN_12 | GPIO_PIN_13 | GPIO_PIN_14 |\
                              GPIO_PIN_15;

  HAL_GPIO_Init(GPIOE, &gpio_init_structure);
 801095a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 801095e:	4619      	mov	r1, r3
 8010960:	4835      	ldr	r0, [pc, #212]	@ (8010a38 <SDRAM_MspInit+0x1e0>)
 8010962:	f000 ff61 	bl	8011828 <HAL_GPIO_Init>

  /* GPIOF configuration */
  gpio_init_structure.Pin   = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_2| GPIO_PIN_3 | GPIO_PIN_4 |\
 8010966:	f64f 033f 	movw	r3, #63551	@ 0xf83f
 801096a:	627b      	str	r3, [r7, #36]	@ 0x24
                              GPIO_PIN_5 | GPIO_PIN_11 | GPIO_PIN_12 | GPIO_PIN_13 | GPIO_PIN_14 |\
                              GPIO_PIN_15;

  HAL_GPIO_Init(GPIOF, &gpio_init_structure);
 801096c:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8010970:	4619      	mov	r1, r3
 8010972:	4832      	ldr	r0, [pc, #200]	@ (8010a3c <SDRAM_MspInit+0x1e4>)
 8010974:	f000 ff58 	bl	8011828 <HAL_GPIO_Init>

  /* GPIOG configuration */
  gpio_init_structure.Pin   = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_4 | GPIO_PIN_5 | GPIO_PIN_8 | GPIO_PIN_15;
 8010978:	f248 1333 	movw	r3, #33075	@ 0x8133
 801097c:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOG, &gpio_init_structure);
 801097e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8010982:	4619      	mov	r1, r3
 8010984:	482e      	ldr	r0, [pc, #184]	@ (8010a40 <SDRAM_MspInit+0x1e8>)
 8010986:	f000 ff4f 	bl	8011828 <HAL_GPIO_Init>

  /* GPIOH configuration */
  gpio_init_structure.Pin   = GPIO_PIN_5 | GPIO_PIN_6 | GPIO_PIN_7 ;
 801098a:	23e0      	movs	r3, #224	@ 0xe0
 801098c:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOH, &gpio_init_structure);
 801098e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8010992:	4619      	mov	r1, r3
 8010994:	482b      	ldr	r0, [pc, #172]	@ (8010a44 <SDRAM_MspInit+0x1ec>)
 8010996:	f000 ff47 	bl	8011828 <HAL_GPIO_Init>



  /* Configure common MDMA parameters */
  mdma_handle.Init.Request = MDMA_REQUEST_SW;
 801099a:	4b2b      	ldr	r3, [pc, #172]	@ (8010a48 <SDRAM_MspInit+0x1f0>)
 801099c:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 80109a0:	605a      	str	r2, [r3, #4]
  mdma_handle.Init.TransferTriggerMode = MDMA_BLOCK_TRANSFER;
 80109a2:	4b29      	ldr	r3, [pc, #164]	@ (8010a48 <SDRAM_MspInit+0x1f0>)
 80109a4:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80109a8:	609a      	str	r2, [r3, #8]
  mdma_handle.Init.Priority = MDMA_PRIORITY_HIGH;
 80109aa:	4b27      	ldr	r3, [pc, #156]	@ (8010a48 <SDRAM_MspInit+0x1f0>)
 80109ac:	2280      	movs	r2, #128	@ 0x80
 80109ae:	60da      	str	r2, [r3, #12]
  mdma_handle.Init.Endianness = MDMA_LITTLE_ENDIANNESS_PRESERVE;
 80109b0:	4b25      	ldr	r3, [pc, #148]	@ (8010a48 <SDRAM_MspInit+0x1f0>)
 80109b2:	2200      	movs	r2, #0
 80109b4:	611a      	str	r2, [r3, #16]
  mdma_handle.Init.SourceInc = MDMA_SRC_INC_WORD;
 80109b6:	4b24      	ldr	r3, [pc, #144]	@ (8010a48 <SDRAM_MspInit+0x1f0>)
 80109b8:	f240 2202 	movw	r2, #514	@ 0x202
 80109bc:	615a      	str	r2, [r3, #20]
  mdma_handle.Init.DestinationInc = MDMA_DEST_INC_WORD;
 80109be:	4b22      	ldr	r3, [pc, #136]	@ (8010a48 <SDRAM_MspInit+0x1f0>)
 80109c0:	f640 0208 	movw	r2, #2056	@ 0x808
 80109c4:	619a      	str	r2, [r3, #24]
  mdma_handle.Init.SourceDataSize = MDMA_SRC_DATASIZE_WORD;
 80109c6:	4b20      	ldr	r3, [pc, #128]	@ (8010a48 <SDRAM_MspInit+0x1f0>)
 80109c8:	2220      	movs	r2, #32
 80109ca:	61da      	str	r2, [r3, #28]
  mdma_handle.Init.DestDataSize = MDMA_DEST_DATASIZE_WORD;
 80109cc:	4b1e      	ldr	r3, [pc, #120]	@ (8010a48 <SDRAM_MspInit+0x1f0>)
 80109ce:	2280      	movs	r2, #128	@ 0x80
 80109d0:	621a      	str	r2, [r3, #32]
  mdma_handle.Init.DataAlignment = MDMA_DATAALIGN_PACKENABLE;
 80109d2:	4b1d      	ldr	r3, [pc, #116]	@ (8010a48 <SDRAM_MspInit+0x1f0>)
 80109d4:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 80109d8:	625a      	str	r2, [r3, #36]	@ 0x24
  mdma_handle.Init.SourceBurst = MDMA_SOURCE_BURST_SINGLE;
 80109da:	4b1b      	ldr	r3, [pc, #108]	@ (8010a48 <SDRAM_MspInit+0x1f0>)
 80109dc:	2200      	movs	r2, #0
 80109de:	62da      	str	r2, [r3, #44]	@ 0x2c
  mdma_handle.Init.DestBurst = MDMA_DEST_BURST_SINGLE;
 80109e0:	4b19      	ldr	r3, [pc, #100]	@ (8010a48 <SDRAM_MspInit+0x1f0>)
 80109e2:	2200      	movs	r2, #0
 80109e4:	631a      	str	r2, [r3, #48]	@ 0x30
  mdma_handle.Init.BufferTransferLength = 128;
 80109e6:	4b18      	ldr	r3, [pc, #96]	@ (8010a48 <SDRAM_MspInit+0x1f0>)
 80109e8:	2280      	movs	r2, #128	@ 0x80
 80109ea:	629a      	str	r2, [r3, #40]	@ 0x28
  mdma_handle.Init.SourceBlockAddressOffset = 0;
 80109ec:	4b16      	ldr	r3, [pc, #88]	@ (8010a48 <SDRAM_MspInit+0x1f0>)
 80109ee:	2200      	movs	r2, #0
 80109f0:	635a      	str	r2, [r3, #52]	@ 0x34
  mdma_handle.Init.DestBlockAddressOffset = 0;
 80109f2:	4b15      	ldr	r3, [pc, #84]	@ (8010a48 <SDRAM_MspInit+0x1f0>)
 80109f4:	2200      	movs	r2, #0
 80109f6:	639a      	str	r2, [r3, #56]	@ 0x38


  mdma_handle.Instance = SDRAM_MDMAx_CHANNEL;
 80109f8:	4b13      	ldr	r3, [pc, #76]	@ (8010a48 <SDRAM_MspInit+0x1f0>)
 80109fa:	4a14      	ldr	r2, [pc, #80]	@ (8010a4c <SDRAM_MspInit+0x1f4>)
 80109fc:	601a      	str	r2, [r3, #0]

   /* Associate the DMA handle */
  __HAL_LINKDMA(hsdram, hmdma, mdma_handle);
 80109fe:	4b14      	ldr	r3, [pc, #80]	@ (8010a50 <SDRAM_MspInit+0x1f8>)
 8010a00:	4a11      	ldr	r2, [pc, #68]	@ (8010a48 <SDRAM_MspInit+0x1f0>)
 8010a02:	631a      	str	r2, [r3, #48]	@ 0x30
 8010a04:	4b10      	ldr	r3, [pc, #64]	@ (8010a48 <SDRAM_MspInit+0x1f0>)
 8010a06:	4a12      	ldr	r2, [pc, #72]	@ (8010a50 <SDRAM_MspInit+0x1f8>)
 8010a08:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Deinitialize the stream for new transfer */
  HAL_MDMA_DeInit(&mdma_handle);
 8010a0a:	480f      	ldr	r0, [pc, #60]	@ (8010a48 <SDRAM_MspInit+0x1f0>)
 8010a0c:	f002 fc76 	bl	80132fc <HAL_MDMA_DeInit>

  /* Configure the DMA stream */
  HAL_MDMA_Init(&mdma_handle);
 8010a10:	480d      	ldr	r0, [pc, #52]	@ (8010a48 <SDRAM_MspInit+0x1f0>)
 8010a12:	f002 fc27 	bl	8013264 <HAL_MDMA_Init>

  /* NVIC configuration for DMA transfer complete interrupt */
  HAL_NVIC_SetPriority(SDRAM_MDMAx_IRQn, 0x0F, 0);
 8010a16:	2200      	movs	r2, #0
 8010a18:	210f      	movs	r1, #15
 8010a1a:	207a      	movs	r0, #122	@ 0x7a
 8010a1c:	f000 fbec 	bl	80111f8 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(SDRAM_MDMAx_IRQn);
 8010a20:	207a      	movs	r0, #122	@ 0x7a
 8010a22:	f000 fc03 	bl	801122c <HAL_NVIC_EnableIRQ>
}
 8010a26:	bf00      	nop
 8010a28:	3738      	adds	r7, #56	@ 0x38
 8010a2a:	46bd      	mov	sp, r7
 8010a2c:	bd80      	pop	{r7, pc}
 8010a2e:	bf00      	nop
 8010a30:	58024400 	.word	0x58024400
 8010a34:	58020c00 	.word	0x58020c00
 8010a38:	58021000 	.word	0x58021000
 8010a3c:	58021400 	.word	0x58021400
 8010a40:	58021800 	.word	0x58021800
 8010a44:	58021c00 	.word	0x58021c00
 8010a48:	2400b744 	.word	0x2400b744
 8010a4c:	52000040 	.word	0x52000040
 8010a50:	2400b6f0 	.word	0x2400b6f0

08010a54 <SDRAM_MspDeInit>:
  * @brief  DeInitializes SDRAM MSP.
  * @param  hSdram SDRAM handle
  * @retval None
  */
static void SDRAM_MspDeInit(SDRAM_HandleTypeDef  *hSdram)
{
 8010a54:	b580      	push	{r7, lr}
 8010a56:	b082      	sub	sp, #8
 8010a58:	af00      	add	r7, sp, #0
 8010a5a:	6078      	str	r0, [r7, #4]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(hSdram);

  /* Disable NVIC configuration for DMA interrupt */
  HAL_NVIC_DisableIRQ(SDRAM_MDMAx_IRQn);
 8010a5c:	207a      	movs	r0, #122	@ 0x7a
 8010a5e:	f000 fbf3 	bl	8011248 <HAL_NVIC_DisableIRQ>

  /* Deinitialize the stream for new transfer */
  mdma_handle.Instance = SDRAM_MDMAx_CHANNEL;
 8010a62:	4b05      	ldr	r3, [pc, #20]	@ (8010a78 <SDRAM_MspDeInit+0x24>)
 8010a64:	4a05      	ldr	r2, [pc, #20]	@ (8010a7c <SDRAM_MspDeInit+0x28>)
 8010a66:	601a      	str	r2, [r3, #0]
  (void)HAL_MDMA_DeInit(&mdma_handle);
 8010a68:	4803      	ldr	r0, [pc, #12]	@ (8010a78 <SDRAM_MspDeInit+0x24>)
 8010a6a:	f002 fc47 	bl	80132fc <HAL_MDMA_DeInit>
}
 8010a6e:	bf00      	nop
 8010a70:	3708      	adds	r7, #8
 8010a72:	46bd      	mov	sp, r7
 8010a74:	bd80      	pop	{r7, pc}
 8010a76:	bf00      	nop
 8010a78:	2400b7b0 	.word	0x2400b7b0
 8010a7c:	52000040 	.word	0x52000040

08010a80 <BSP_TS_Init>:
  * @param  Instance TS instance. Could be only 0.
  * @param  TS_Init  TS Init structure
  * @retval BSP status
  */
int32_t BSP_TS_Init(uint32_t Instance, TS_Init_t *TS_Init)
{
 8010a80:	b580      	push	{r7, lr}
 8010a82:	b088      	sub	sp, #32
 8010a84:	af00      	add	r7, sp, #0
 8010a86:	6078      	str	r0, [r7, #4]
 8010a88:	6039      	str	r1, [r7, #0]
  int32_t ret = BSP_ERROR_NONE;
 8010a8a:	2300      	movs	r3, #0
 8010a8c:	61fb      	str	r3, [r7, #28]

  if((Instance >=TS_INSTANCES_NBR) || (TS_Init->Width == 0U) ||( TS_Init->Width > TS_MAX_WIDTH) ||\
 8010a8e:	687b      	ldr	r3, [r7, #4]
 8010a90:	2b00      	cmp	r3, #0
 8010a92:	d11c      	bne.n	8010ace <BSP_TS_Init+0x4e>
 8010a94:	683b      	ldr	r3, [r7, #0]
 8010a96:	681b      	ldr	r3, [r3, #0]
 8010a98:	2b00      	cmp	r3, #0
 8010a9a:	d018      	beq.n	8010ace <BSP_TS_Init+0x4e>
 8010a9c:	683b      	ldr	r3, [r7, #0]
 8010a9e:	681b      	ldr	r3, [r3, #0]
 8010aa0:	f5b3 7ff0 	cmp.w	r3, #480	@ 0x1e0
 8010aa4:	d813      	bhi.n	8010ace <BSP_TS_Init+0x4e>
                         (TS_Init->Height == 0U) ||( TS_Init->Height > TS_MAX_HEIGHT) ||\
 8010aa6:	683b      	ldr	r3, [r7, #0]
 8010aa8:	685b      	ldr	r3, [r3, #4]
  if((Instance >=TS_INSTANCES_NBR) || (TS_Init->Width == 0U) ||( TS_Init->Width > TS_MAX_WIDTH) ||\
 8010aaa:	2b00      	cmp	r3, #0
 8010aac:	d00f      	beq.n	8010ace <BSP_TS_Init+0x4e>
                         (TS_Init->Height == 0U) ||( TS_Init->Height > TS_MAX_HEIGHT) ||\
 8010aae:	683b      	ldr	r3, [r7, #0]
 8010ab0:	685b      	ldr	r3, [r3, #4]
 8010ab2:	f5b3 7f88 	cmp.w	r3, #272	@ 0x110
 8010ab6:	d80a      	bhi.n	8010ace <BSP_TS_Init+0x4e>
                         (TS_Init->Accuracy > TS_MIN((TS_Init->Width), (TS_Init->Height))))
 8010ab8:	683b      	ldr	r3, [r7, #0]
 8010aba:	68da      	ldr	r2, [r3, #12]
 8010abc:	683b      	ldr	r3, [r7, #0]
 8010abe:	6819      	ldr	r1, [r3, #0]
 8010ac0:	683b      	ldr	r3, [r7, #0]
 8010ac2:	685b      	ldr	r3, [r3, #4]
 8010ac4:	428b      	cmp	r3, r1
 8010ac6:	bf28      	it	cs
 8010ac8:	460b      	movcs	r3, r1
                         (TS_Init->Height == 0U) ||( TS_Init->Height > TS_MAX_HEIGHT) ||\
 8010aca:	429a      	cmp	r2, r3
 8010acc:	d903      	bls.n	8010ad6 <BSP_TS_Init+0x56>
  {
    ret = BSP_ERROR_WRONG_PARAM;
 8010ace:	f06f 0301 	mvn.w	r3, #1
 8010ad2:	61fb      	str	r3, [r7, #28]
 8010ad4:	e085      	b.n	8010be2 <BSP_TS_Init+0x162>
  }
  else
  {
    if(FT5336_Probe(Instance) != BSP_ERROR_NONE)
 8010ad6:	6878      	ldr	r0, [r7, #4]
 8010ad8:	f000 f9e6 	bl	8010ea8 <FT5336_Probe>
 8010adc:	4603      	mov	r3, r0
 8010ade:	2b00      	cmp	r3, #0
 8010ae0:	d003      	beq.n	8010aea <BSP_TS_Init+0x6a>
    {
      ret = BSP_ERROR_NO_INIT;
 8010ae2:	f04f 33ff 	mov.w	r3, #4294967295
 8010ae6:	61fb      	str	r3, [r7, #28]
 8010ae8:	e07b      	b.n	8010be2 <BSP_TS_Init+0x162>
    else
    {
      TS_Capabilities_t Capabilities;
      uint32_t i;
      /* Store parameters on TS context */
      Ts_Ctx[Instance].Width             = TS_Init->Width;
 8010aea:	683b      	ldr	r3, [r7, #0]
 8010aec:	6819      	ldr	r1, [r3, #0]
 8010aee:	483f      	ldr	r0, [pc, #252]	@ (8010bec <BSP_TS_Init+0x16c>)
 8010af0:	687a      	ldr	r2, [r7, #4]
 8010af2:	4613      	mov	r3, r2
 8010af4:	009b      	lsls	r3, r3, #2
 8010af6:	4413      	add	r3, r2
 8010af8:	00db      	lsls	r3, r3, #3
 8010afa:	4403      	add	r3, r0
 8010afc:	6019      	str	r1, [r3, #0]
      Ts_Ctx[Instance].Height            = TS_Init->Height;
 8010afe:	683b      	ldr	r3, [r7, #0]
 8010b00:	6859      	ldr	r1, [r3, #4]
 8010b02:	483a      	ldr	r0, [pc, #232]	@ (8010bec <BSP_TS_Init+0x16c>)
 8010b04:	687a      	ldr	r2, [r7, #4]
 8010b06:	4613      	mov	r3, r2
 8010b08:	009b      	lsls	r3, r3, #2
 8010b0a:	4413      	add	r3, r2
 8010b0c:	00db      	lsls	r3, r3, #3
 8010b0e:	4403      	add	r3, r0
 8010b10:	3304      	adds	r3, #4
 8010b12:	6019      	str	r1, [r3, #0]
      Ts_Ctx[Instance].Orientation       = TS_Init->Orientation;
 8010b14:	683b      	ldr	r3, [r7, #0]
 8010b16:	6899      	ldr	r1, [r3, #8]
 8010b18:	4834      	ldr	r0, [pc, #208]	@ (8010bec <BSP_TS_Init+0x16c>)
 8010b1a:	687a      	ldr	r2, [r7, #4]
 8010b1c:	4613      	mov	r3, r2
 8010b1e:	009b      	lsls	r3, r3, #2
 8010b20:	4413      	add	r3, r2
 8010b22:	00db      	lsls	r3, r3, #3
 8010b24:	4403      	add	r3, r0
 8010b26:	3308      	adds	r3, #8
 8010b28:	6019      	str	r1, [r3, #0]
      Ts_Ctx[Instance].Accuracy          = TS_Init->Accuracy;
 8010b2a:	683b      	ldr	r3, [r7, #0]
 8010b2c:	68d9      	ldr	r1, [r3, #12]
 8010b2e:	482f      	ldr	r0, [pc, #188]	@ (8010bec <BSP_TS_Init+0x16c>)
 8010b30:	687a      	ldr	r2, [r7, #4]
 8010b32:	4613      	mov	r3, r2
 8010b34:	009b      	lsls	r3, r3, #2
 8010b36:	4413      	add	r3, r2
 8010b38:	00db      	lsls	r3, r3, #3
 8010b3a:	4403      	add	r3, r0
 8010b3c:	330c      	adds	r3, #12
 8010b3e:	6019      	str	r1, [r3, #0]
      /* Get capabilities to retrieve maximum values of X and Y */
        if (Ts_Drv->GetCapabilities(Ts_CompObj[Instance], &Capabilities) < 0)
 8010b40:	4b2b      	ldr	r3, [pc, #172]	@ (8010bf0 <BSP_TS_Init+0x170>)
 8010b42:	681b      	ldr	r3, [r3, #0]
 8010b44:	69db      	ldr	r3, [r3, #28]
 8010b46:	492b      	ldr	r1, [pc, #172]	@ (8010bf4 <BSP_TS_Init+0x174>)
 8010b48:	687a      	ldr	r2, [r7, #4]
 8010b4a:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 8010b4e:	f107 010c 	add.w	r1, r7, #12
 8010b52:	4610      	mov	r0, r2
 8010b54:	4798      	blx	r3
 8010b56:	4603      	mov	r3, r0
 8010b58:	2b00      	cmp	r3, #0
 8010b5a:	da03      	bge.n	8010b64 <BSP_TS_Init+0xe4>
      {
        ret = BSP_ERROR_COMPONENT_FAILURE;
 8010b5c:	f06f 0304 	mvn.w	r3, #4
 8010b60:	61fb      	str	r3, [r7, #28]
 8010b62:	e03e      	b.n	8010be2 <BSP_TS_Init+0x162>
      }
      else
      {
        /* Store maximum X and Y on context */
        Ts_Ctx[Instance].MaxX = Capabilities.MaxXl;
 8010b64:	6939      	ldr	r1, [r7, #16]
 8010b66:	4821      	ldr	r0, [pc, #132]	@ (8010bec <BSP_TS_Init+0x16c>)
 8010b68:	687a      	ldr	r2, [r7, #4]
 8010b6a:	4613      	mov	r3, r2
 8010b6c:	009b      	lsls	r3, r3, #2
 8010b6e:	4413      	add	r3, r2
 8010b70:	00db      	lsls	r3, r3, #3
 8010b72:	4403      	add	r3, r0
 8010b74:	3310      	adds	r3, #16
 8010b76:	6019      	str	r1, [r3, #0]
        Ts_Ctx[Instance].MaxY = Capabilities.MaxYl;
 8010b78:	6979      	ldr	r1, [r7, #20]
 8010b7a:	481c      	ldr	r0, [pc, #112]	@ (8010bec <BSP_TS_Init+0x16c>)
 8010b7c:	687a      	ldr	r2, [r7, #4]
 8010b7e:	4613      	mov	r3, r2
 8010b80:	009b      	lsls	r3, r3, #2
 8010b82:	4413      	add	r3, r2
 8010b84:	00db      	lsls	r3, r3, #3
 8010b86:	4403      	add	r3, r0
 8010b88:	3314      	adds	r3, #20
 8010b8a:	6019      	str	r1, [r3, #0]
        /* Initialize previous position in order to always detect first touch */
        for(i = 0; i < TS_TOUCH_NBR; i++)
 8010b8c:	2300      	movs	r3, #0
 8010b8e:	61bb      	str	r3, [r7, #24]
 8010b90:	e024      	b.n	8010bdc <BSP_TS_Init+0x15c>
        {
          Ts_Ctx[Instance].PreviousX[i] = TS_Init->Width + TS_Init->Accuracy + 1U;
 8010b92:	683b      	ldr	r3, [r7, #0]
 8010b94:	681a      	ldr	r2, [r3, #0]
 8010b96:	683b      	ldr	r3, [r7, #0]
 8010b98:	68db      	ldr	r3, [r3, #12]
 8010b9a:	4413      	add	r3, r2
 8010b9c:	1c59      	adds	r1, r3, #1
 8010b9e:	4813      	ldr	r0, [pc, #76]	@ (8010bec <BSP_TS_Init+0x16c>)
 8010ba0:	687a      	ldr	r2, [r7, #4]
 8010ba2:	4613      	mov	r3, r2
 8010ba4:	009b      	lsls	r3, r3, #2
 8010ba6:	4413      	add	r3, r2
 8010ba8:	005b      	lsls	r3, r3, #1
 8010baa:	69ba      	ldr	r2, [r7, #24]
 8010bac:	4413      	add	r3, r2
 8010bae:	3306      	adds	r3, #6
 8010bb0:	f840 1023 	str.w	r1, [r0, r3, lsl #2]
          Ts_Ctx[Instance].PreviousY[i] = TS_Init->Height + TS_Init->Accuracy + 1U;
 8010bb4:	683b      	ldr	r3, [r7, #0]
 8010bb6:	685a      	ldr	r2, [r3, #4]
 8010bb8:	683b      	ldr	r3, [r7, #0]
 8010bba:	68db      	ldr	r3, [r3, #12]
 8010bbc:	4413      	add	r3, r2
 8010bbe:	1c59      	adds	r1, r3, #1
 8010bc0:	480a      	ldr	r0, [pc, #40]	@ (8010bec <BSP_TS_Init+0x16c>)
 8010bc2:	687a      	ldr	r2, [r7, #4]
 8010bc4:	4613      	mov	r3, r2
 8010bc6:	009b      	lsls	r3, r3, #2
 8010bc8:	4413      	add	r3, r2
 8010bca:	005b      	lsls	r3, r3, #1
 8010bcc:	69ba      	ldr	r2, [r7, #24]
 8010bce:	4413      	add	r3, r2
 8010bd0:	3308      	adds	r3, #8
 8010bd2:	f840 1023 	str.w	r1, [r0, r3, lsl #2]
        for(i = 0; i < TS_TOUCH_NBR; i++)
 8010bd6:	69bb      	ldr	r3, [r7, #24]
 8010bd8:	3301      	adds	r3, #1
 8010bda:	61bb      	str	r3, [r7, #24]
 8010bdc:	69bb      	ldr	r3, [r7, #24]
 8010bde:	2b01      	cmp	r3, #1
 8010be0:	d9d7      	bls.n	8010b92 <BSP_TS_Init+0x112>
        }
      }
    }
  }

  return ret;
 8010be2:	69fb      	ldr	r3, [r7, #28]
}
 8010be4:	4618      	mov	r0, r3
 8010be6:	3720      	adds	r7, #32
 8010be8:	46bd      	mov	sp, r7
 8010bea:	bd80      	pop	{r7, pc}
 8010bec:	2400b824 	.word	0x2400b824
 8010bf0:	2400b81c 	.word	0x2400b81c
 8010bf4:	2400b820 	.word	0x2400b820

08010bf8 <BSP_TS_GetState>:
  * @param  Instance  TS instance. Could be only 0.
  * @param  TS_State  Pointer to touch screen current state structure
  * @retval BSP status
  */
int32_t BSP_TS_GetState(uint32_t Instance, TS_State_t *TS_State)
{
 8010bf8:	b580      	push	{r7, lr}
 8010bfa:	b08a      	sub	sp, #40	@ 0x28
 8010bfc:	af00      	add	r7, sp, #0
 8010bfe:	6078      	str	r0, [r7, #4]
 8010c00:	6039      	str	r1, [r7, #0]
  int32_t ret = BSP_ERROR_NONE;
 8010c02:	2300      	movs	r3, #0
 8010c04:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t x_oriented, y_oriented;
  uint32_t x_diff, y_diff;

  if(Instance >= TS_INSTANCES_NBR)
 8010c06:	687b      	ldr	r3, [r7, #4]
 8010c08:	2b00      	cmp	r3, #0
 8010c0a:	d003      	beq.n	8010c14 <BSP_TS_GetState+0x1c>
  {
    ret = BSP_ERROR_WRONG_PARAM;
 8010c0c:	f06f 0301 	mvn.w	r3, #1
 8010c10:	627b      	str	r3, [r7, #36]	@ 0x24
 8010c12:	e13e      	b.n	8010e92 <BSP_TS_GetState+0x29a>
  else
  {
    FT5336_State_t state;

    /* Get each touch coordinates */
    if(Ts_Drv->GetState(Ts_CompObj[Instance], &state) < 0)
 8010c14:	4ba1      	ldr	r3, [pc, #644]	@ (8010e9c <BSP_TS_GetState+0x2a4>)
 8010c16:	681b      	ldr	r3, [r3, #0]
 8010c18:	691b      	ldr	r3, [r3, #16]
 8010c1a:	49a1      	ldr	r1, [pc, #644]	@ (8010ea0 <BSP_TS_GetState+0x2a8>)
 8010c1c:	687a      	ldr	r2, [r7, #4]
 8010c1e:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 8010c22:	f107 0108 	add.w	r1, r7, #8
 8010c26:	4610      	mov	r0, r2
 8010c28:	4798      	blx	r3
 8010c2a:	4603      	mov	r3, r0
 8010c2c:	2b00      	cmp	r3, #0
 8010c2e:	da03      	bge.n	8010c38 <BSP_TS_GetState+0x40>
    {
      ret = BSP_ERROR_COMPONENT_FAILURE;
 8010c30:	f06f 0304 	mvn.w	r3, #4
 8010c34:	627b      	str	r3, [r7, #36]	@ 0x24
 8010c36:	e12c      	b.n	8010e92 <BSP_TS_GetState+0x29a>
    }/* Check and update the number of touches active detected */
    else if(state.TouchDetected != 0U)
 8010c38:	68bb      	ldr	r3, [r7, #8]
 8010c3a:	2b00      	cmp	r3, #0
 8010c3c:	f000 8110 	beq.w	8010e60 <BSP_TS_GetState+0x268>
    {
      x_oriented = state.TouchX;
 8010c40:	68fb      	ldr	r3, [r7, #12]
 8010c42:	623b      	str	r3, [r7, #32]
      y_oriented = state.TouchY;
 8010c44:	693b      	ldr	r3, [r7, #16]
 8010c46:	61fb      	str	r3, [r7, #28]

      if((Ts_Ctx[Instance].Orientation & TS_SWAP_XY) == TS_SWAP_XY)
 8010c48:	4996      	ldr	r1, [pc, #600]	@ (8010ea4 <BSP_TS_GetState+0x2ac>)
 8010c4a:	687a      	ldr	r2, [r7, #4]
 8010c4c:	4613      	mov	r3, r2
 8010c4e:	009b      	lsls	r3, r3, #2
 8010c50:	4413      	add	r3, r2
 8010c52:	00db      	lsls	r3, r3, #3
 8010c54:	440b      	add	r3, r1
 8010c56:	3308      	adds	r3, #8
 8010c58:	681b      	ldr	r3, [r3, #0]
 8010c5a:	f003 0308 	and.w	r3, r3, #8
 8010c5e:	2b00      	cmp	r3, #0
 8010c60:	d003      	beq.n	8010c6a <BSP_TS_GetState+0x72>
      {
        x_oriented = state.TouchY;
 8010c62:	693b      	ldr	r3, [r7, #16]
 8010c64:	623b      	str	r3, [r7, #32]
        y_oriented = state.TouchX;
 8010c66:	68fb      	ldr	r3, [r7, #12]
 8010c68:	61fb      	str	r3, [r7, #28]
      }

      if((Ts_Ctx[Instance].Orientation & TS_SWAP_X) == TS_SWAP_X)
 8010c6a:	498e      	ldr	r1, [pc, #568]	@ (8010ea4 <BSP_TS_GetState+0x2ac>)
 8010c6c:	687a      	ldr	r2, [r7, #4]
 8010c6e:	4613      	mov	r3, r2
 8010c70:	009b      	lsls	r3, r3, #2
 8010c72:	4413      	add	r3, r2
 8010c74:	00db      	lsls	r3, r3, #3
 8010c76:	440b      	add	r3, r1
 8010c78:	3308      	adds	r3, #8
 8010c7a:	681b      	ldr	r3, [r3, #0]
 8010c7c:	f003 0302 	and.w	r3, r3, #2
 8010c80:	2b00      	cmp	r3, #0
 8010c82:	d00c      	beq.n	8010c9e <BSP_TS_GetState+0xa6>
      {
        x_oriented = Ts_Ctx[Instance].MaxX - state.TouchX - 1UL;
 8010c84:	4987      	ldr	r1, [pc, #540]	@ (8010ea4 <BSP_TS_GetState+0x2ac>)
 8010c86:	687a      	ldr	r2, [r7, #4]
 8010c88:	4613      	mov	r3, r2
 8010c8a:	009b      	lsls	r3, r3, #2
 8010c8c:	4413      	add	r3, r2
 8010c8e:	00db      	lsls	r3, r3, #3
 8010c90:	440b      	add	r3, r1
 8010c92:	3310      	adds	r3, #16
 8010c94:	681a      	ldr	r2, [r3, #0]
 8010c96:	68fb      	ldr	r3, [r7, #12]
 8010c98:	1ad3      	subs	r3, r2, r3
 8010c9a:	3b01      	subs	r3, #1
 8010c9c:	623b      	str	r3, [r7, #32]
      }

      if((Ts_Ctx[Instance].Orientation & TS_SWAP_Y) == TS_SWAP_Y)
 8010c9e:	4981      	ldr	r1, [pc, #516]	@ (8010ea4 <BSP_TS_GetState+0x2ac>)
 8010ca0:	687a      	ldr	r2, [r7, #4]
 8010ca2:	4613      	mov	r3, r2
 8010ca4:	009b      	lsls	r3, r3, #2
 8010ca6:	4413      	add	r3, r2
 8010ca8:	00db      	lsls	r3, r3, #3
 8010caa:	440b      	add	r3, r1
 8010cac:	3308      	adds	r3, #8
 8010cae:	681b      	ldr	r3, [r3, #0]
 8010cb0:	f003 0304 	and.w	r3, r3, #4
 8010cb4:	2b00      	cmp	r3, #0
 8010cb6:	d00b      	beq.n	8010cd0 <BSP_TS_GetState+0xd8>
      {
        y_oriented = Ts_Ctx[Instance].MaxY - state.TouchY;
 8010cb8:	497a      	ldr	r1, [pc, #488]	@ (8010ea4 <BSP_TS_GetState+0x2ac>)
 8010cba:	687a      	ldr	r2, [r7, #4]
 8010cbc:	4613      	mov	r3, r2
 8010cbe:	009b      	lsls	r3, r3, #2
 8010cc0:	4413      	add	r3, r2
 8010cc2:	00db      	lsls	r3, r3, #3
 8010cc4:	440b      	add	r3, r1
 8010cc6:	3314      	adds	r3, #20
 8010cc8:	681a      	ldr	r2, [r3, #0]
 8010cca:	693b      	ldr	r3, [r7, #16]
 8010ccc:	1ad3      	subs	r3, r2, r3
 8010cce:	61fb      	str	r3, [r7, #28]
      }

      /* Apply boundary */
      TS_State->TouchX = (x_oriented * Ts_Ctx[Instance].Width) / Ts_Ctx[Instance].MaxX;
 8010cd0:	4974      	ldr	r1, [pc, #464]	@ (8010ea4 <BSP_TS_GetState+0x2ac>)
 8010cd2:	687a      	ldr	r2, [r7, #4]
 8010cd4:	4613      	mov	r3, r2
 8010cd6:	009b      	lsls	r3, r3, #2
 8010cd8:	4413      	add	r3, r2
 8010cda:	00db      	lsls	r3, r3, #3
 8010cdc:	440b      	add	r3, r1
 8010cde:	681b      	ldr	r3, [r3, #0]
 8010ce0:	6a3a      	ldr	r2, [r7, #32]
 8010ce2:	fb02 f103 	mul.w	r1, r2, r3
 8010ce6:	486f      	ldr	r0, [pc, #444]	@ (8010ea4 <BSP_TS_GetState+0x2ac>)
 8010ce8:	687a      	ldr	r2, [r7, #4]
 8010cea:	4613      	mov	r3, r2
 8010cec:	009b      	lsls	r3, r3, #2
 8010cee:	4413      	add	r3, r2
 8010cf0:	00db      	lsls	r3, r3, #3
 8010cf2:	4403      	add	r3, r0
 8010cf4:	3310      	adds	r3, #16
 8010cf6:	681b      	ldr	r3, [r3, #0]
 8010cf8:	fbb1 f2f3 	udiv	r2, r1, r3
 8010cfc:	683b      	ldr	r3, [r7, #0]
 8010cfe:	605a      	str	r2, [r3, #4]
      TS_State->TouchY = (y_oriented * Ts_Ctx[Instance].Height) / Ts_Ctx[Instance].MaxY;
 8010d00:	4968      	ldr	r1, [pc, #416]	@ (8010ea4 <BSP_TS_GetState+0x2ac>)
 8010d02:	687a      	ldr	r2, [r7, #4]
 8010d04:	4613      	mov	r3, r2
 8010d06:	009b      	lsls	r3, r3, #2
 8010d08:	4413      	add	r3, r2
 8010d0a:	00db      	lsls	r3, r3, #3
 8010d0c:	440b      	add	r3, r1
 8010d0e:	3304      	adds	r3, #4
 8010d10:	681b      	ldr	r3, [r3, #0]
 8010d12:	69fa      	ldr	r2, [r7, #28]
 8010d14:	fb02 f103 	mul.w	r1, r2, r3
 8010d18:	4862      	ldr	r0, [pc, #392]	@ (8010ea4 <BSP_TS_GetState+0x2ac>)
 8010d1a:	687a      	ldr	r2, [r7, #4]
 8010d1c:	4613      	mov	r3, r2
 8010d1e:	009b      	lsls	r3, r3, #2
 8010d20:	4413      	add	r3, r2
 8010d22:	00db      	lsls	r3, r3, #3
 8010d24:	4403      	add	r3, r0
 8010d26:	3314      	adds	r3, #20
 8010d28:	681b      	ldr	r3, [r3, #0]
 8010d2a:	fbb1 f2f3 	udiv	r2, r1, r3
 8010d2e:	683b      	ldr	r3, [r7, #0]
 8010d30:	609a      	str	r2, [r3, #8]
      /* Store Current TS state */
      TS_State->TouchDetected = state.TouchDetected;
 8010d32:	68ba      	ldr	r2, [r7, #8]
 8010d34:	683b      	ldr	r3, [r7, #0]
 8010d36:	601a      	str	r2, [r3, #0]

      /* Check accuracy */
      x_diff = (TS_State->TouchX > Ts_Ctx[Instance].PreviousX[0])?
 8010d38:	683b      	ldr	r3, [r7, #0]
 8010d3a:	6859      	ldr	r1, [r3, #4]
 8010d3c:	4859      	ldr	r0, [pc, #356]	@ (8010ea4 <BSP_TS_GetState+0x2ac>)
 8010d3e:	687a      	ldr	r2, [r7, #4]
 8010d40:	4613      	mov	r3, r2
 8010d42:	009b      	lsls	r3, r3, #2
 8010d44:	4413      	add	r3, r2
 8010d46:	00db      	lsls	r3, r3, #3
 8010d48:	4403      	add	r3, r0
 8010d4a:	3318      	adds	r3, #24
 8010d4c:	681b      	ldr	r3, [r3, #0]
        (TS_State->TouchX - Ts_Ctx[Instance].PreviousX[0]):
 8010d4e:	4299      	cmp	r1, r3
 8010d50:	d90c      	bls.n	8010d6c <BSP_TS_GetState+0x174>
 8010d52:	683b      	ldr	r3, [r7, #0]
 8010d54:	6859      	ldr	r1, [r3, #4]
 8010d56:	4853      	ldr	r0, [pc, #332]	@ (8010ea4 <BSP_TS_GetState+0x2ac>)
 8010d58:	687a      	ldr	r2, [r7, #4]
 8010d5a:	4613      	mov	r3, r2
 8010d5c:	009b      	lsls	r3, r3, #2
 8010d5e:	4413      	add	r3, r2
 8010d60:	00db      	lsls	r3, r3, #3
 8010d62:	4403      	add	r3, r0
 8010d64:	3318      	adds	r3, #24
 8010d66:	681b      	ldr	r3, [r3, #0]
 8010d68:	1acb      	subs	r3, r1, r3
 8010d6a:	e00b      	b.n	8010d84 <BSP_TS_GetState+0x18c>
        (Ts_Ctx[Instance].PreviousX[0] - TS_State->TouchX);
 8010d6c:	494d      	ldr	r1, [pc, #308]	@ (8010ea4 <BSP_TS_GetState+0x2ac>)
 8010d6e:	687a      	ldr	r2, [r7, #4]
 8010d70:	4613      	mov	r3, r2
 8010d72:	009b      	lsls	r3, r3, #2
 8010d74:	4413      	add	r3, r2
 8010d76:	00db      	lsls	r3, r3, #3
 8010d78:	440b      	add	r3, r1
 8010d7a:	3318      	adds	r3, #24
 8010d7c:	681a      	ldr	r2, [r3, #0]
 8010d7e:	683b      	ldr	r3, [r7, #0]
 8010d80:	685b      	ldr	r3, [r3, #4]
        (TS_State->TouchX - Ts_Ctx[Instance].PreviousX[0]):
 8010d82:	1ad3      	subs	r3, r2, r3
      x_diff = (TS_State->TouchX > Ts_Ctx[Instance].PreviousX[0])?
 8010d84:	61bb      	str	r3, [r7, #24]

        y_diff = (TS_State->TouchY > Ts_Ctx[Instance].PreviousY[0])?
 8010d86:	683b      	ldr	r3, [r7, #0]
 8010d88:	6899      	ldr	r1, [r3, #8]
 8010d8a:	4846      	ldr	r0, [pc, #280]	@ (8010ea4 <BSP_TS_GetState+0x2ac>)
 8010d8c:	687a      	ldr	r2, [r7, #4]
 8010d8e:	4613      	mov	r3, r2
 8010d90:	009b      	lsls	r3, r3, #2
 8010d92:	4413      	add	r3, r2
 8010d94:	00db      	lsls	r3, r3, #3
 8010d96:	4403      	add	r3, r0
 8010d98:	3320      	adds	r3, #32
 8010d9a:	681b      	ldr	r3, [r3, #0]
          (TS_State->TouchY - Ts_Ctx[Instance].PreviousY[0]):
 8010d9c:	4299      	cmp	r1, r3
 8010d9e:	d90c      	bls.n	8010dba <BSP_TS_GetState+0x1c2>
 8010da0:	683b      	ldr	r3, [r7, #0]
 8010da2:	6899      	ldr	r1, [r3, #8]
 8010da4:	483f      	ldr	r0, [pc, #252]	@ (8010ea4 <BSP_TS_GetState+0x2ac>)
 8010da6:	687a      	ldr	r2, [r7, #4]
 8010da8:	4613      	mov	r3, r2
 8010daa:	009b      	lsls	r3, r3, #2
 8010dac:	4413      	add	r3, r2
 8010dae:	00db      	lsls	r3, r3, #3
 8010db0:	4403      	add	r3, r0
 8010db2:	3320      	adds	r3, #32
 8010db4:	681b      	ldr	r3, [r3, #0]
 8010db6:	1acb      	subs	r3, r1, r3
 8010db8:	e00b      	b.n	8010dd2 <BSP_TS_GetState+0x1da>
          (Ts_Ctx[Instance].PreviousY[0] - TS_State->TouchY);
 8010dba:	493a      	ldr	r1, [pc, #232]	@ (8010ea4 <BSP_TS_GetState+0x2ac>)
 8010dbc:	687a      	ldr	r2, [r7, #4]
 8010dbe:	4613      	mov	r3, r2
 8010dc0:	009b      	lsls	r3, r3, #2
 8010dc2:	4413      	add	r3, r2
 8010dc4:	00db      	lsls	r3, r3, #3
 8010dc6:	440b      	add	r3, r1
 8010dc8:	3320      	adds	r3, #32
 8010dca:	681a      	ldr	r2, [r3, #0]
 8010dcc:	683b      	ldr	r3, [r7, #0]
 8010dce:	689b      	ldr	r3, [r3, #8]
          (TS_State->TouchY - Ts_Ctx[Instance].PreviousY[0]):
 8010dd0:	1ad3      	subs	r3, r2, r3
        y_diff = (TS_State->TouchY > Ts_Ctx[Instance].PreviousY[0])?
 8010dd2:	617b      	str	r3, [r7, #20]


          if ((x_diff > Ts_Ctx[Instance].Accuracy) || (y_diff > Ts_Ctx[Instance].Accuracy))
 8010dd4:	4933      	ldr	r1, [pc, #204]	@ (8010ea4 <BSP_TS_GetState+0x2ac>)
 8010dd6:	687a      	ldr	r2, [r7, #4]
 8010dd8:	4613      	mov	r3, r2
 8010dda:	009b      	lsls	r3, r3, #2
 8010ddc:	4413      	add	r3, r2
 8010dde:	00db      	lsls	r3, r3, #3
 8010de0:	440b      	add	r3, r1
 8010de2:	330c      	adds	r3, #12
 8010de4:	681b      	ldr	r3, [r3, #0]
 8010de6:	69ba      	ldr	r2, [r7, #24]
 8010de8:	429a      	cmp	r2, r3
 8010dea:	d80b      	bhi.n	8010e04 <BSP_TS_GetState+0x20c>
 8010dec:	492d      	ldr	r1, [pc, #180]	@ (8010ea4 <BSP_TS_GetState+0x2ac>)
 8010dee:	687a      	ldr	r2, [r7, #4]
 8010df0:	4613      	mov	r3, r2
 8010df2:	009b      	lsls	r3, r3, #2
 8010df4:	4413      	add	r3, r2
 8010df6:	00db      	lsls	r3, r3, #3
 8010df8:	440b      	add	r3, r1
 8010dfa:	330c      	adds	r3, #12
 8010dfc:	681b      	ldr	r3, [r3, #0]
 8010dfe:	697a      	ldr	r2, [r7, #20]
 8010e00:	429a      	cmp	r2, r3
 8010e02:	d916      	bls.n	8010e32 <BSP_TS_GetState+0x23a>
          {
            /* New touch detected */
            Ts_Ctx[Instance].PreviousX[0] = TS_State->TouchX;
 8010e04:	683b      	ldr	r3, [r7, #0]
 8010e06:	6859      	ldr	r1, [r3, #4]
 8010e08:	4826      	ldr	r0, [pc, #152]	@ (8010ea4 <BSP_TS_GetState+0x2ac>)
 8010e0a:	687a      	ldr	r2, [r7, #4]
 8010e0c:	4613      	mov	r3, r2
 8010e0e:	009b      	lsls	r3, r3, #2
 8010e10:	4413      	add	r3, r2
 8010e12:	00db      	lsls	r3, r3, #3
 8010e14:	4403      	add	r3, r0
 8010e16:	3318      	adds	r3, #24
 8010e18:	6019      	str	r1, [r3, #0]
            Ts_Ctx[Instance].PreviousY[0] = TS_State->TouchY;
 8010e1a:	683b      	ldr	r3, [r7, #0]
 8010e1c:	6899      	ldr	r1, [r3, #8]
 8010e1e:	4821      	ldr	r0, [pc, #132]	@ (8010ea4 <BSP_TS_GetState+0x2ac>)
 8010e20:	687a      	ldr	r2, [r7, #4]
 8010e22:	4613      	mov	r3, r2
 8010e24:	009b      	lsls	r3, r3, #2
 8010e26:	4413      	add	r3, r2
 8010e28:	00db      	lsls	r3, r3, #3
 8010e2a:	4403      	add	r3, r0
 8010e2c:	3320      	adds	r3, #32
 8010e2e:	6019      	str	r1, [r3, #0]
 8010e30:	e02f      	b.n	8010e92 <BSP_TS_GetState+0x29a>
          }
          else
          {
            TS_State->TouchX = Ts_Ctx[Instance].PreviousX[0];
 8010e32:	491c      	ldr	r1, [pc, #112]	@ (8010ea4 <BSP_TS_GetState+0x2ac>)
 8010e34:	687a      	ldr	r2, [r7, #4]
 8010e36:	4613      	mov	r3, r2
 8010e38:	009b      	lsls	r3, r3, #2
 8010e3a:	4413      	add	r3, r2
 8010e3c:	00db      	lsls	r3, r3, #3
 8010e3e:	440b      	add	r3, r1
 8010e40:	3318      	adds	r3, #24
 8010e42:	681a      	ldr	r2, [r3, #0]
 8010e44:	683b      	ldr	r3, [r7, #0]
 8010e46:	605a      	str	r2, [r3, #4]
            TS_State->TouchY = Ts_Ctx[Instance].PreviousY[0];
 8010e48:	4916      	ldr	r1, [pc, #88]	@ (8010ea4 <BSP_TS_GetState+0x2ac>)
 8010e4a:	687a      	ldr	r2, [r7, #4]
 8010e4c:	4613      	mov	r3, r2
 8010e4e:	009b      	lsls	r3, r3, #2
 8010e50:	4413      	add	r3, r2
 8010e52:	00db      	lsls	r3, r3, #3
 8010e54:	440b      	add	r3, r1
 8010e56:	3320      	adds	r3, #32
 8010e58:	681a      	ldr	r2, [r3, #0]
 8010e5a:	683b      	ldr	r3, [r7, #0]
 8010e5c:	609a      	str	r2, [r3, #8]
 8010e5e:	e018      	b.n	8010e92 <BSP_TS_GetState+0x29a>
          }
    }
    else
    {
      TS_State->TouchDetected = 0U;
 8010e60:	683b      	ldr	r3, [r7, #0]
 8010e62:	2200      	movs	r2, #0
 8010e64:	601a      	str	r2, [r3, #0]
      TS_State->TouchX = Ts_Ctx[Instance].PreviousX[0];
 8010e66:	490f      	ldr	r1, [pc, #60]	@ (8010ea4 <BSP_TS_GetState+0x2ac>)
 8010e68:	687a      	ldr	r2, [r7, #4]
 8010e6a:	4613      	mov	r3, r2
 8010e6c:	009b      	lsls	r3, r3, #2
 8010e6e:	4413      	add	r3, r2
 8010e70:	00db      	lsls	r3, r3, #3
 8010e72:	440b      	add	r3, r1
 8010e74:	3318      	adds	r3, #24
 8010e76:	681a      	ldr	r2, [r3, #0]
 8010e78:	683b      	ldr	r3, [r7, #0]
 8010e7a:	605a      	str	r2, [r3, #4]
      TS_State->TouchY = Ts_Ctx[Instance].PreviousY[0];
 8010e7c:	4909      	ldr	r1, [pc, #36]	@ (8010ea4 <BSP_TS_GetState+0x2ac>)
 8010e7e:	687a      	ldr	r2, [r7, #4]
 8010e80:	4613      	mov	r3, r2
 8010e82:	009b      	lsls	r3, r3, #2
 8010e84:	4413      	add	r3, r2
 8010e86:	00db      	lsls	r3, r3, #3
 8010e88:	440b      	add	r3, r1
 8010e8a:	3320      	adds	r3, #32
 8010e8c:	681a      	ldr	r2, [r3, #0]
 8010e8e:	683b      	ldr	r3, [r7, #0]
 8010e90:	609a      	str	r2, [r3, #8]
    }
}

return ret;
 8010e92:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 8010e94:	4618      	mov	r0, r3
 8010e96:	3728      	adds	r7, #40	@ 0x28
 8010e98:	46bd      	mov	sp, r7
 8010e9a:	bd80      	pop	{r7, pc}
 8010e9c:	2400b81c 	.word	0x2400b81c
 8010ea0:	2400b820 	.word	0x2400b820
 8010ea4:	2400b824 	.word	0x2400b824

08010ea8 <FT5336_Probe>:
  * @brief  Register Bus IOs if component ID is OK
  * @param  Instance TS instance. Could be only 0.
  * @retval BSP status
  */
static int32_t FT5336_Probe(uint32_t Instance)
{
 8010ea8:	b580      	push	{r7, lr}
 8010eaa:	b08a      	sub	sp, #40	@ 0x28
 8010eac:	af00      	add	r7, sp, #0
 8010eae:	6078      	str	r0, [r7, #4]
  int32_t ret = BSP_ERROR_NONE;
 8010eb0:	2300      	movs	r3, #0
 8010eb2:	627b      	str	r3, [r7, #36]	@ 0x24
  FT5336_IO_t              IOCtx;
  static FT5336_Object_t   FT5336Obj;
  uint32_t ft5336_id       = 0;
 8010eb4:	2300      	movs	r3, #0
 8010eb6:	60bb      	str	r3, [r7, #8]

  /* Configure the touch screen driver */
  IOCtx.Address     = TS_I2C_ADDRESS;
 8010eb8:	2370      	movs	r3, #112	@ 0x70
 8010eba:	82bb      	strh	r3, [r7, #20]
  IOCtx.Init        = BSP_I2C4_Init;
 8010ebc:	4b23      	ldr	r3, [pc, #140]	@ (8010f4c <FT5336_Probe+0xa4>)
 8010ebe:	60fb      	str	r3, [r7, #12]
  IOCtx.DeInit      = BSP_I2C4_DeInit;
 8010ec0:	4b23      	ldr	r3, [pc, #140]	@ (8010f50 <FT5336_Probe+0xa8>)
 8010ec2:	613b      	str	r3, [r7, #16]
  IOCtx.ReadReg     = BSP_I2C4_ReadReg;
 8010ec4:	4b23      	ldr	r3, [pc, #140]	@ (8010f54 <FT5336_Probe+0xac>)
 8010ec6:	61fb      	str	r3, [r7, #28]
  IOCtx.WriteReg    = BSP_I2C4_WriteReg;
 8010ec8:	4b23      	ldr	r3, [pc, #140]	@ (8010f58 <FT5336_Probe+0xb0>)
 8010eca:	61bb      	str	r3, [r7, #24]
  IOCtx.GetTick     = BSP_GetTick;
 8010ecc:	4b23      	ldr	r3, [pc, #140]	@ (8010f5c <FT5336_Probe+0xb4>)
 8010ece:	623b      	str	r3, [r7, #32]

  if(FT5336_RegisterBusIO (&FT5336Obj, &IOCtx) != FT5336_OK)
 8010ed0:	f107 030c 	add.w	r3, r7, #12
 8010ed4:	4619      	mov	r1, r3
 8010ed6:	4822      	ldr	r0, [pc, #136]	@ (8010f60 <FT5336_Probe+0xb8>)
 8010ed8:	f7fd fcb2 	bl	800e840 <FT5336_RegisterBusIO>
 8010edc:	4603      	mov	r3, r0
 8010ede:	2b00      	cmp	r3, #0
 8010ee0:	d003      	beq.n	8010eea <FT5336_Probe+0x42>
  {
    ret = BSP_ERROR_BUS_FAILURE;
 8010ee2:	f06f 0307 	mvn.w	r3, #7
 8010ee6:	627b      	str	r3, [r7, #36]	@ 0x24
 8010ee8:	e02a      	b.n	8010f40 <FT5336_Probe+0x98>
  }
  else if(FT5336_ReadID(&FT5336Obj, &ft5336_id) != FT5336_OK)
 8010eea:	f107 0308 	add.w	r3, r7, #8
 8010eee:	4619      	mov	r1, r3
 8010ef0:	481b      	ldr	r0, [pc, #108]	@ (8010f60 <FT5336_Probe+0xb8>)
 8010ef2:	f7fd fd9f 	bl	800ea34 <FT5336_ReadID>
 8010ef6:	4603      	mov	r3, r0
 8010ef8:	2b00      	cmp	r3, #0
 8010efa:	d003      	beq.n	8010f04 <FT5336_Probe+0x5c>
  {
    ret = BSP_ERROR_COMPONENT_FAILURE;
 8010efc:	f06f 0304 	mvn.w	r3, #4
 8010f00:	627b      	str	r3, [r7, #36]	@ 0x24
 8010f02:	e01d      	b.n	8010f40 <FT5336_Probe+0x98>
  }
  else if(ft5336_id != FT5336_ID)
 8010f04:	68bb      	ldr	r3, [r7, #8]
 8010f06:	2b51      	cmp	r3, #81	@ 0x51
 8010f08:	d003      	beq.n	8010f12 <FT5336_Probe+0x6a>
  {
    ret = BSP_ERROR_UNKNOWN_COMPONENT;
 8010f0a:	f06f 0306 	mvn.w	r3, #6
 8010f0e:	627b      	str	r3, [r7, #36]	@ 0x24
 8010f10:	e016      	b.n	8010f40 <FT5336_Probe+0x98>
  }
  else
  {
    Ts_CompObj[Instance] = &FT5336Obj;
 8010f12:	4a14      	ldr	r2, [pc, #80]	@ (8010f64 <FT5336_Probe+0xbc>)
 8010f14:	687b      	ldr	r3, [r7, #4]
 8010f16:	4912      	ldr	r1, [pc, #72]	@ (8010f60 <FT5336_Probe+0xb8>)
 8010f18:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
    Ts_Drv = (TS_Drv_t *) &FT5336_TS_Driver;
 8010f1c:	4b12      	ldr	r3, [pc, #72]	@ (8010f68 <FT5336_Probe+0xc0>)
 8010f1e:	4a13      	ldr	r2, [pc, #76]	@ (8010f6c <FT5336_Probe+0xc4>)
 8010f20:	601a      	str	r2, [r3, #0]

    if(Ts_Drv->Init(Ts_CompObj[Instance]) != FT5336_OK)
 8010f22:	4b11      	ldr	r3, [pc, #68]	@ (8010f68 <FT5336_Probe+0xc0>)
 8010f24:	681b      	ldr	r3, [r3, #0]
 8010f26:	681b      	ldr	r3, [r3, #0]
 8010f28:	490e      	ldr	r1, [pc, #56]	@ (8010f64 <FT5336_Probe+0xbc>)
 8010f2a:	687a      	ldr	r2, [r7, #4]
 8010f2c:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 8010f30:	4610      	mov	r0, r2
 8010f32:	4798      	blx	r3
 8010f34:	4603      	mov	r3, r0
 8010f36:	2b00      	cmp	r3, #0
 8010f38:	d002      	beq.n	8010f40 <FT5336_Probe+0x98>
    {
      ret = BSP_ERROR_COMPONENT_FAILURE;
 8010f3a:	f06f 0304 	mvn.w	r3, #4
 8010f3e:	627b      	str	r3, [r7, #36]	@ 0x24
    }
  }

  return ret;
 8010f40:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 8010f42:	4618      	mov	r0, r3
 8010f44:	3728      	adds	r7, #40	@ 0x28
 8010f46:	46bd      	mov	sp, r7
 8010f48:	bd80      	pop	{r7, pc}
 8010f4a:	bf00      	nop
 8010f4c:	0800f639 	.word	0x0800f639
 8010f50:	0800f6ad 	.word	0x0800f6ad
 8010f54:	0800f7d5 	.word	0x0800f7d5
 8010f58:	0800f779 	.word	0x0800f779
 8010f5c:	0800f831 	.word	0x0800f831
 8010f60:	2400b84c 	.word	0x2400b84c
 8010f64:	2400b820 	.word	0x2400b820
 8010f68:	2400b81c 	.word	0x2400b81c
 8010f6c:	24000020 	.word	0x24000020

08010f70 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8010f70:	b580      	push	{r7, lr}
 8010f72:	b082      	sub	sp, #8
 8010f74:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8010f76:	2003      	movs	r0, #3
 8010f78:	f000 f933 	bl	80111e2 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8010f7c:	f004 f88c 	bl	8015098 <HAL_RCC_GetSysClockFreq>
 8010f80:	4602      	mov	r2, r0
 8010f82:	4b15      	ldr	r3, [pc, #84]	@ (8010fd8 <HAL_Init+0x68>)
 8010f84:	699b      	ldr	r3, [r3, #24]
 8010f86:	0a1b      	lsrs	r3, r3, #8
 8010f88:	f003 030f 	and.w	r3, r3, #15
 8010f8c:	4913      	ldr	r1, [pc, #76]	@ (8010fdc <HAL_Init+0x6c>)
 8010f8e:	5ccb      	ldrb	r3, [r1, r3]
 8010f90:	f003 031f 	and.w	r3, r3, #31
 8010f94:	fa22 f303 	lsr.w	r3, r2, r3
 8010f98:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8010f9a:	4b0f      	ldr	r3, [pc, #60]	@ (8010fd8 <HAL_Init+0x68>)
 8010f9c:	699b      	ldr	r3, [r3, #24]
 8010f9e:	f003 030f 	and.w	r3, r3, #15
 8010fa2:	4a0e      	ldr	r2, [pc, #56]	@ (8010fdc <HAL_Init+0x6c>)
 8010fa4:	5cd3      	ldrb	r3, [r2, r3]
 8010fa6:	f003 031f 	and.w	r3, r3, #31
 8010faa:	687a      	ldr	r2, [r7, #4]
 8010fac:	fa22 f303 	lsr.w	r3, r2, r3
 8010fb0:	4a0b      	ldr	r2, [pc, #44]	@ (8010fe0 <HAL_Init+0x70>)
 8010fb2:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8010fb4:	4a0b      	ldr	r2, [pc, #44]	@ (8010fe4 <HAL_Init+0x74>)
 8010fb6:	687b      	ldr	r3, [r7, #4]
 8010fb8:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8010fba:	200f      	movs	r0, #15
 8010fbc:	f7f0 faa2 	bl	8001504 <HAL_InitTick>
 8010fc0:	4603      	mov	r3, r0
 8010fc2:	2b00      	cmp	r3, #0
 8010fc4:	d001      	beq.n	8010fca <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 8010fc6:	2301      	movs	r3, #1
 8010fc8:	e002      	b.n	8010fd0 <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 8010fca:	f7ef ff1b 	bl	8000e04 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8010fce:	2300      	movs	r3, #0
}
 8010fd0:	4618      	mov	r0, r3
 8010fd2:	3708      	adds	r7, #8
 8010fd4:	46bd      	mov	sp, r7
 8010fd6:	bd80      	pop	{r7, pc}
 8010fd8:	58024400 	.word	0x58024400
 8010fdc:	0802d5d4 	.word	0x0802d5d4
 8010fe0:	2400001c 	.word	0x2400001c
 8010fe4:	24000018 	.word	0x24000018

08010fe8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8010fe8:	b480      	push	{r7}
 8010fea:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8010fec:	4b06      	ldr	r3, [pc, #24]	@ (8011008 <HAL_IncTick+0x20>)
 8010fee:	781b      	ldrb	r3, [r3, #0]
 8010ff0:	461a      	mov	r2, r3
 8010ff2:	4b06      	ldr	r3, [pc, #24]	@ (801100c <HAL_IncTick+0x24>)
 8010ff4:	681b      	ldr	r3, [r3, #0]
 8010ff6:	4413      	add	r3, r2
 8010ff8:	4a04      	ldr	r2, [pc, #16]	@ (801100c <HAL_IncTick+0x24>)
 8010ffa:	6013      	str	r3, [r2, #0]
}
 8010ffc:	bf00      	nop
 8010ffe:	46bd      	mov	sp, r7
 8011000:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011004:	4770      	bx	lr
 8011006:	bf00      	nop
 8011008:	24000054 	.word	0x24000054
 801100c:	2400b874 	.word	0x2400b874

08011010 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8011010:	b480      	push	{r7}
 8011012:	af00      	add	r7, sp, #0
  return uwTick;
 8011014:	4b03      	ldr	r3, [pc, #12]	@ (8011024 <HAL_GetTick+0x14>)
 8011016:	681b      	ldr	r3, [r3, #0]
}
 8011018:	4618      	mov	r0, r3
 801101a:	46bd      	mov	sp, r7
 801101c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011020:	4770      	bx	lr
 8011022:	bf00      	nop
 8011024:	2400b874 	.word	0x2400b874

08011028 <HAL_GetREVID>:
/**
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
 8011028:	b480      	push	{r7}
 801102a:	af00      	add	r7, sp, #0
   return((DBGMCU->IDCODE) >> 16);
 801102c:	4b03      	ldr	r3, [pc, #12]	@ (801103c <HAL_GetREVID+0x14>)
 801102e:	681b      	ldr	r3, [r3, #0]
 8011030:	0c1b      	lsrs	r3, r3, #16
}
 8011032:	4618      	mov	r0, r3
 8011034:	46bd      	mov	sp, r7
 8011036:	f85d 7b04 	ldr.w	r7, [sp], #4
 801103a:	4770      	bx	lr
 801103c:	5c001000 	.word	0x5c001000

08011040 <__NVIC_SetPriorityGrouping>:
{
 8011040:	b480      	push	{r7}
 8011042:	b085      	sub	sp, #20
 8011044:	af00      	add	r7, sp, #0
 8011046:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8011048:	687b      	ldr	r3, [r7, #4]
 801104a:	f003 0307 	and.w	r3, r3, #7
 801104e:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8011050:	4b0b      	ldr	r3, [pc, #44]	@ (8011080 <__NVIC_SetPriorityGrouping+0x40>)
 8011052:	68db      	ldr	r3, [r3, #12]
 8011054:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8011056:	68ba      	ldr	r2, [r7, #8]
 8011058:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 801105c:	4013      	ands	r3, r2
 801105e:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8011060:	68fb      	ldr	r3, [r7, #12]
 8011062:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8011064:	68bb      	ldr	r3, [r7, #8]
 8011066:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8011068:	4b06      	ldr	r3, [pc, #24]	@ (8011084 <__NVIC_SetPriorityGrouping+0x44>)
 801106a:	4313      	orrs	r3, r2
 801106c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 801106e:	4a04      	ldr	r2, [pc, #16]	@ (8011080 <__NVIC_SetPriorityGrouping+0x40>)
 8011070:	68bb      	ldr	r3, [r7, #8]
 8011072:	60d3      	str	r3, [r2, #12]
}
 8011074:	bf00      	nop
 8011076:	3714      	adds	r7, #20
 8011078:	46bd      	mov	sp, r7
 801107a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801107e:	4770      	bx	lr
 8011080:	e000ed00 	.word	0xe000ed00
 8011084:	05fa0000 	.word	0x05fa0000

08011088 <__NVIC_GetPriorityGrouping>:
{
 8011088:	b480      	push	{r7}
 801108a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 801108c:	4b04      	ldr	r3, [pc, #16]	@ (80110a0 <__NVIC_GetPriorityGrouping+0x18>)
 801108e:	68db      	ldr	r3, [r3, #12]
 8011090:	0a1b      	lsrs	r3, r3, #8
 8011092:	f003 0307 	and.w	r3, r3, #7
}
 8011096:	4618      	mov	r0, r3
 8011098:	46bd      	mov	sp, r7
 801109a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801109e:	4770      	bx	lr
 80110a0:	e000ed00 	.word	0xe000ed00

080110a4 <__NVIC_EnableIRQ>:
{
 80110a4:	b480      	push	{r7}
 80110a6:	b083      	sub	sp, #12
 80110a8:	af00      	add	r7, sp, #0
 80110aa:	4603      	mov	r3, r0
 80110ac:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 80110ae:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80110b2:	2b00      	cmp	r3, #0
 80110b4:	db0b      	blt.n	80110ce <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80110b6:	88fb      	ldrh	r3, [r7, #6]
 80110b8:	f003 021f 	and.w	r2, r3, #31
 80110bc:	4907      	ldr	r1, [pc, #28]	@ (80110dc <__NVIC_EnableIRQ+0x38>)
 80110be:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80110c2:	095b      	lsrs	r3, r3, #5
 80110c4:	2001      	movs	r0, #1
 80110c6:	fa00 f202 	lsl.w	r2, r0, r2
 80110ca:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 80110ce:	bf00      	nop
 80110d0:	370c      	adds	r7, #12
 80110d2:	46bd      	mov	sp, r7
 80110d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80110d8:	4770      	bx	lr
 80110da:	bf00      	nop
 80110dc:	e000e100 	.word	0xe000e100

080110e0 <__NVIC_DisableIRQ>:
{
 80110e0:	b480      	push	{r7}
 80110e2:	b083      	sub	sp, #12
 80110e4:	af00      	add	r7, sp, #0
 80110e6:	4603      	mov	r3, r0
 80110e8:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 80110ea:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80110ee:	2b00      	cmp	r3, #0
 80110f0:	db12      	blt.n	8011118 <__NVIC_DisableIRQ+0x38>
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80110f2:	88fb      	ldrh	r3, [r7, #6]
 80110f4:	f003 021f 	and.w	r2, r3, #31
 80110f8:	490a      	ldr	r1, [pc, #40]	@ (8011124 <__NVIC_DisableIRQ+0x44>)
 80110fa:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80110fe:	095b      	lsrs	r3, r3, #5
 8011100:	2001      	movs	r0, #1
 8011102:	fa00 f202 	lsl.w	r2, r0, r2
 8011106:	3320      	adds	r3, #32
 8011108:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  __ASM volatile ("dsb 0xF":::"memory");
 801110c:	f3bf 8f4f 	dsb	sy
}
 8011110:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8011112:	f3bf 8f6f 	isb	sy
}
 8011116:	bf00      	nop
}
 8011118:	bf00      	nop
 801111a:	370c      	adds	r7, #12
 801111c:	46bd      	mov	sp, r7
 801111e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011122:	4770      	bx	lr
 8011124:	e000e100 	.word	0xe000e100

08011128 <__NVIC_SetPriority>:
{
 8011128:	b480      	push	{r7}
 801112a:	b083      	sub	sp, #12
 801112c:	af00      	add	r7, sp, #0
 801112e:	4603      	mov	r3, r0
 8011130:	6039      	str	r1, [r7, #0]
 8011132:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8011134:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8011138:	2b00      	cmp	r3, #0
 801113a:	db0a      	blt.n	8011152 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 801113c:	683b      	ldr	r3, [r7, #0]
 801113e:	b2da      	uxtb	r2, r3
 8011140:	490c      	ldr	r1, [pc, #48]	@ (8011174 <__NVIC_SetPriority+0x4c>)
 8011142:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8011146:	0112      	lsls	r2, r2, #4
 8011148:	b2d2      	uxtb	r2, r2
 801114a:	440b      	add	r3, r1
 801114c:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 8011150:	e00a      	b.n	8011168 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8011152:	683b      	ldr	r3, [r7, #0]
 8011154:	b2da      	uxtb	r2, r3
 8011156:	4908      	ldr	r1, [pc, #32]	@ (8011178 <__NVIC_SetPriority+0x50>)
 8011158:	88fb      	ldrh	r3, [r7, #6]
 801115a:	f003 030f 	and.w	r3, r3, #15
 801115e:	3b04      	subs	r3, #4
 8011160:	0112      	lsls	r2, r2, #4
 8011162:	b2d2      	uxtb	r2, r2
 8011164:	440b      	add	r3, r1
 8011166:	761a      	strb	r2, [r3, #24]
}
 8011168:	bf00      	nop
 801116a:	370c      	adds	r7, #12
 801116c:	46bd      	mov	sp, r7
 801116e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011172:	4770      	bx	lr
 8011174:	e000e100 	.word	0xe000e100
 8011178:	e000ed00 	.word	0xe000ed00

0801117c <NVIC_EncodePriority>:
{
 801117c:	b480      	push	{r7}
 801117e:	b089      	sub	sp, #36	@ 0x24
 8011180:	af00      	add	r7, sp, #0
 8011182:	60f8      	str	r0, [r7, #12]
 8011184:	60b9      	str	r1, [r7, #8]
 8011186:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8011188:	68fb      	ldr	r3, [r7, #12]
 801118a:	f003 0307 	and.w	r3, r3, #7
 801118e:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8011190:	69fb      	ldr	r3, [r7, #28]
 8011192:	f1c3 0307 	rsb	r3, r3, #7
 8011196:	2b04      	cmp	r3, #4
 8011198:	bf28      	it	cs
 801119a:	2304      	movcs	r3, #4
 801119c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 801119e:	69fb      	ldr	r3, [r7, #28]
 80111a0:	3304      	adds	r3, #4
 80111a2:	2b06      	cmp	r3, #6
 80111a4:	d902      	bls.n	80111ac <NVIC_EncodePriority+0x30>
 80111a6:	69fb      	ldr	r3, [r7, #28]
 80111a8:	3b03      	subs	r3, #3
 80111aa:	e000      	b.n	80111ae <NVIC_EncodePriority+0x32>
 80111ac:	2300      	movs	r3, #0
 80111ae:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80111b0:	f04f 32ff 	mov.w	r2, #4294967295
 80111b4:	69bb      	ldr	r3, [r7, #24]
 80111b6:	fa02 f303 	lsl.w	r3, r2, r3
 80111ba:	43da      	mvns	r2, r3
 80111bc:	68bb      	ldr	r3, [r7, #8]
 80111be:	401a      	ands	r2, r3
 80111c0:	697b      	ldr	r3, [r7, #20]
 80111c2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80111c4:	f04f 31ff 	mov.w	r1, #4294967295
 80111c8:	697b      	ldr	r3, [r7, #20]
 80111ca:	fa01 f303 	lsl.w	r3, r1, r3
 80111ce:	43d9      	mvns	r1, r3
 80111d0:	687b      	ldr	r3, [r7, #4]
 80111d2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80111d4:	4313      	orrs	r3, r2
}
 80111d6:	4618      	mov	r0, r3
 80111d8:	3724      	adds	r7, #36	@ 0x24
 80111da:	46bd      	mov	sp, r7
 80111dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80111e0:	4770      	bx	lr

080111e2 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80111e2:	b580      	push	{r7, lr}
 80111e4:	b082      	sub	sp, #8
 80111e6:	af00      	add	r7, sp, #0
 80111e8:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80111ea:	6878      	ldr	r0, [r7, #4]
 80111ec:	f7ff ff28 	bl	8011040 <__NVIC_SetPriorityGrouping>
}
 80111f0:	bf00      	nop
 80111f2:	3708      	adds	r7, #8
 80111f4:	46bd      	mov	sp, r7
 80111f6:	bd80      	pop	{r7, pc}

080111f8 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80111f8:	b580      	push	{r7, lr}
 80111fa:	b086      	sub	sp, #24
 80111fc:	af00      	add	r7, sp, #0
 80111fe:	4603      	mov	r3, r0
 8011200:	60b9      	str	r1, [r7, #8]
 8011202:	607a      	str	r2, [r7, #4]
 8011204:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8011206:	f7ff ff3f 	bl	8011088 <__NVIC_GetPriorityGrouping>
 801120a:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 801120c:	687a      	ldr	r2, [r7, #4]
 801120e:	68b9      	ldr	r1, [r7, #8]
 8011210:	6978      	ldr	r0, [r7, #20]
 8011212:	f7ff ffb3 	bl	801117c <NVIC_EncodePriority>
 8011216:	4602      	mov	r2, r0
 8011218:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 801121c:	4611      	mov	r1, r2
 801121e:	4618      	mov	r0, r3
 8011220:	f7ff ff82 	bl	8011128 <__NVIC_SetPriority>
}
 8011224:	bf00      	nop
 8011226:	3718      	adds	r7, #24
 8011228:	46bd      	mov	sp, r7
 801122a:	bd80      	pop	{r7, pc}

0801122c <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 801122c:	b580      	push	{r7, lr}
 801122e:	b082      	sub	sp, #8
 8011230:	af00      	add	r7, sp, #0
 8011232:	4603      	mov	r3, r0
 8011234:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8011236:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 801123a:	4618      	mov	r0, r3
 801123c:	f7ff ff32 	bl	80110a4 <__NVIC_EnableIRQ>
}
 8011240:	bf00      	nop
 8011242:	3708      	adds	r7, #8
 8011244:	46bd      	mov	sp, r7
 8011246:	bd80      	pop	{r7, pc}

08011248 <HAL_NVIC_DisableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8011248:	b580      	push	{r7, lr}
 801124a:	b082      	sub	sp, #8
 801124c:	af00      	add	r7, sp, #0
 801124e:	4603      	mov	r3, r0
 8011250:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
 8011252:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8011256:	4618      	mov	r0, r3
 8011258:	f7ff ff42 	bl	80110e0 <__NVIC_DisableIRQ>
}
 801125c:	bf00      	nop
 801125e:	3708      	adds	r7, #8
 8011260:	46bd      	mov	sp, r7
 8011262:	bd80      	pop	{r7, pc}

08011264 <HAL_MPU_Disable>:
/**
  * @brief  Disables the MPU
  * @retval None
  */
void HAL_MPU_Disable(void)
{
 8011264:	b480      	push	{r7}
 8011266:	af00      	add	r7, sp, #0
  __ASM volatile ("dmb 0xF":::"memory");
 8011268:	f3bf 8f5f 	dmb	sy
}
 801126c:	bf00      	nop
  /* Make sure outstanding transfers are done */
  __DMB();

  /* Disable fault exceptions */
  SCB->SHCSR &= ~SCB_SHCSR_MEMFAULTENA_Msk;
 801126e:	4b07      	ldr	r3, [pc, #28]	@ (801128c <HAL_MPU_Disable+0x28>)
 8011270:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8011272:	4a06      	ldr	r2, [pc, #24]	@ (801128c <HAL_MPU_Disable+0x28>)
 8011274:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8011278:	6253      	str	r3, [r2, #36]	@ 0x24

  /* Disable the MPU and clear the control register*/
  MPU->CTRL = 0;
 801127a:	4b05      	ldr	r3, [pc, #20]	@ (8011290 <HAL_MPU_Disable+0x2c>)
 801127c:	2200      	movs	r2, #0
 801127e:	605a      	str	r2, [r3, #4]
}
 8011280:	bf00      	nop
 8011282:	46bd      	mov	sp, r7
 8011284:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011288:	4770      	bx	lr
 801128a:	bf00      	nop
 801128c:	e000ed00 	.word	0xe000ed00
 8011290:	e000ed90 	.word	0xe000ed90

08011294 <HAL_MPU_Enable>:
  *            @arg MPU_PRIVILEGED_DEFAULT
  *            @arg MPU_HFNMI_PRIVDEF
  * @retval None
  */
void HAL_MPU_Enable(uint32_t MPU_Control)
{
 8011294:	b480      	push	{r7}
 8011296:	b083      	sub	sp, #12
 8011298:	af00      	add	r7, sp, #0
 801129a:	6078      	str	r0, [r7, #4]
  /* Enable the MPU */
  MPU->CTRL = MPU_Control | MPU_CTRL_ENABLE_Msk;
 801129c:	4a0b      	ldr	r2, [pc, #44]	@ (80112cc <HAL_MPU_Enable+0x38>)
 801129e:	687b      	ldr	r3, [r7, #4]
 80112a0:	f043 0301 	orr.w	r3, r3, #1
 80112a4:	6053      	str	r3, [r2, #4]

  /* Enable fault exceptions */
  SCB->SHCSR |= SCB_SHCSR_MEMFAULTENA_Msk;
 80112a6:	4b0a      	ldr	r3, [pc, #40]	@ (80112d0 <HAL_MPU_Enable+0x3c>)
 80112a8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80112aa:	4a09      	ldr	r2, [pc, #36]	@ (80112d0 <HAL_MPU_Enable+0x3c>)
 80112ac:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80112b0:	6253      	str	r3, [r2, #36]	@ 0x24
  __ASM volatile ("dsb 0xF":::"memory");
 80112b2:	f3bf 8f4f 	dsb	sy
}
 80112b6:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 80112b8:	f3bf 8f6f 	isb	sy
}
 80112bc:	bf00      	nop

  /* Ensure MPU setting take effects */
  __DSB();
  __ISB();
}
 80112be:	bf00      	nop
 80112c0:	370c      	adds	r7, #12
 80112c2:	46bd      	mov	sp, r7
 80112c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80112c8:	4770      	bx	lr
 80112ca:	bf00      	nop
 80112cc:	e000ed90 	.word	0xe000ed90
 80112d0:	e000ed00 	.word	0xe000ed00

080112d4 <HAL_MPU_ConfigRegion>:
  * @param  MPU_Init Pointer to a MPU_Region_InitTypeDef structure that contains
  *                  the initialization and configuration information.
  * @retval None
  */
void HAL_MPU_ConfigRegion(MPU_Region_InitTypeDef *MPU_Init)
{
 80112d4:	b480      	push	{r7}
 80112d6:	b083      	sub	sp, #12
 80112d8:	af00      	add	r7, sp, #0
 80112da:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_MPU_REGION_NUMBER(MPU_Init->Number));
  assert_param(IS_MPU_REGION_ENABLE(MPU_Init->Enable));

  /* Set the Region number */
  MPU->RNR = MPU_Init->Number;
 80112dc:	687b      	ldr	r3, [r7, #4]
 80112de:	785a      	ldrb	r2, [r3, #1]
 80112e0:	4b1d      	ldr	r3, [pc, #116]	@ (8011358 <HAL_MPU_ConfigRegion+0x84>)
 80112e2:	609a      	str	r2, [r3, #8]

  if ((MPU_Init->Enable) != 0UL)
 80112e4:	687b      	ldr	r3, [r7, #4]
 80112e6:	781b      	ldrb	r3, [r3, #0]
 80112e8:	2b00      	cmp	r3, #0
 80112ea:	d029      	beq.n	8011340 <HAL_MPU_ConfigRegion+0x6c>
    assert_param(IS_MPU_ACCESS_CACHEABLE(MPU_Init->IsCacheable));
    assert_param(IS_MPU_ACCESS_BUFFERABLE(MPU_Init->IsBufferable));
    assert_param(IS_MPU_SUB_REGION_DISABLE(MPU_Init->SubRegionDisable));
    assert_param(IS_MPU_REGION_SIZE(MPU_Init->Size));

    MPU->RBAR = MPU_Init->BaseAddress;
 80112ec:	4a1a      	ldr	r2, [pc, #104]	@ (8011358 <HAL_MPU_ConfigRegion+0x84>)
 80112ee:	687b      	ldr	r3, [r7, #4]
 80112f0:	685b      	ldr	r3, [r3, #4]
 80112f2:	60d3      	str	r3, [r2, #12]
    MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 80112f4:	687b      	ldr	r3, [r7, #4]
 80112f6:	7b1b      	ldrb	r3, [r3, #12]
 80112f8:	071a      	lsls	r2, r3, #28
                ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 80112fa:	687b      	ldr	r3, [r7, #4]
 80112fc:	7adb      	ldrb	r3, [r3, #11]
 80112fe:	061b      	lsls	r3, r3, #24
    MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8011300:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 8011302:	687b      	ldr	r3, [r7, #4]
 8011304:	7a9b      	ldrb	r3, [r3, #10]
 8011306:	04db      	lsls	r3, r3, #19
                ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 8011308:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 801130a:	687b      	ldr	r3, [r7, #4]
 801130c:	7b5b      	ldrb	r3, [r3, #13]
 801130e:	049b      	lsls	r3, r3, #18
                ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 8011310:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 8011312:	687b      	ldr	r3, [r7, #4]
 8011314:	7b9b      	ldrb	r3, [r3, #14]
 8011316:	045b      	lsls	r3, r3, #17
                ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 8011318:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 801131a:	687b      	ldr	r3, [r7, #4]
 801131c:	7bdb      	ldrb	r3, [r3, #15]
 801131e:	041b      	lsls	r3, r3, #16
                ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 8011320:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 8011322:	687b      	ldr	r3, [r7, #4]
 8011324:	7a5b      	ldrb	r3, [r3, #9]
 8011326:	021b      	lsls	r3, r3, #8
                ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 8011328:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 801132a:	687b      	ldr	r3, [r7, #4]
 801132c:	7a1b      	ldrb	r3, [r3, #8]
 801132e:	005b      	lsls	r3, r3, #1
                ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 8011330:	4313      	orrs	r3, r2
                ((uint32_t)MPU_Init->Enable                  << MPU_RASR_ENABLE_Pos);
 8011332:	687a      	ldr	r2, [r7, #4]
 8011334:	7812      	ldrb	r2, [r2, #0]
 8011336:	4611      	mov	r1, r2
    MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8011338:	4a07      	ldr	r2, [pc, #28]	@ (8011358 <HAL_MPU_ConfigRegion+0x84>)
                ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 801133a:	430b      	orrs	r3, r1
    MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 801133c:	6113      	str	r3, [r2, #16]
  else
  {
    MPU->RBAR = 0x00;
    MPU->RASR = 0x00;
  }
}
 801133e:	e005      	b.n	801134c <HAL_MPU_ConfigRegion+0x78>
    MPU->RBAR = 0x00;
 8011340:	4b05      	ldr	r3, [pc, #20]	@ (8011358 <HAL_MPU_ConfigRegion+0x84>)
 8011342:	2200      	movs	r2, #0
 8011344:	60da      	str	r2, [r3, #12]
    MPU->RASR = 0x00;
 8011346:	4b04      	ldr	r3, [pc, #16]	@ (8011358 <HAL_MPU_ConfigRegion+0x84>)
 8011348:	2200      	movs	r2, #0
 801134a:	611a      	str	r2, [r3, #16]
}
 801134c:	bf00      	nop
 801134e:	370c      	adds	r7, #12
 8011350:	46bd      	mov	sp, r7
 8011352:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011356:	4770      	bx	lr
 8011358:	e000ed90 	.word	0xe000ed90

0801135c <HAL_CRC_Init>:
  *         parameters in the CRC_InitTypeDef and create the associated handle.
  * @param  hcrc CRC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRC_Init(CRC_HandleTypeDef *hcrc)
{
 801135c:	b580      	push	{r7, lr}
 801135e:	b082      	sub	sp, #8
 8011360:	af00      	add	r7, sp, #0
 8011362:	6078      	str	r0, [r7, #4]
  /* Check the CRC handle allocation */
  if (hcrc == NULL)
 8011364:	687b      	ldr	r3, [r7, #4]
 8011366:	2b00      	cmp	r3, #0
 8011368:	d101      	bne.n	801136e <HAL_CRC_Init+0x12>
  {
    return HAL_ERROR;
 801136a:	2301      	movs	r3, #1
 801136c:	e054      	b.n	8011418 <HAL_CRC_Init+0xbc>
  }

  /* Check the parameters */
  assert_param(IS_CRC_ALL_INSTANCE(hcrc->Instance));

  if (hcrc->State == HAL_CRC_STATE_RESET)
 801136e:	687b      	ldr	r3, [r7, #4]
 8011370:	7f5b      	ldrb	r3, [r3, #29]
 8011372:	b2db      	uxtb	r3, r3
 8011374:	2b00      	cmp	r3, #0
 8011376:	d105      	bne.n	8011384 <HAL_CRC_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hcrc->Lock = HAL_UNLOCKED;
 8011378:	687b      	ldr	r3, [r7, #4]
 801137a:	2200      	movs	r2, #0
 801137c:	771a      	strb	r2, [r3, #28]
    /* Init the low level hardware */
    HAL_CRC_MspInit(hcrc);
 801137e:	6878      	ldr	r0, [r7, #4]
 8011380:	f7ef fd5e 	bl	8000e40 <HAL_CRC_MspInit>
  }

  hcrc->State = HAL_CRC_STATE_BUSY;
 8011384:	687b      	ldr	r3, [r7, #4]
 8011386:	2202      	movs	r2, #2
 8011388:	775a      	strb	r2, [r3, #29]

  /* check whether or not non-default generating polynomial has been
   * picked up by user */
  assert_param(IS_DEFAULT_POLYNOMIAL(hcrc->Init.DefaultPolynomialUse));
  if (hcrc->Init.DefaultPolynomialUse == DEFAULT_POLYNOMIAL_ENABLE)
 801138a:	687b      	ldr	r3, [r7, #4]
 801138c:	791b      	ldrb	r3, [r3, #4]
 801138e:	2b00      	cmp	r3, #0
 8011390:	d10c      	bne.n	80113ac <HAL_CRC_Init+0x50>
  {
    /* initialize peripheral with default generating polynomial */
    WRITE_REG(hcrc->Instance->POL, DEFAULT_CRC32_POLY);
 8011392:	687b      	ldr	r3, [r7, #4]
 8011394:	681b      	ldr	r3, [r3, #0]
 8011396:	4a22      	ldr	r2, [pc, #136]	@ (8011420 <HAL_CRC_Init+0xc4>)
 8011398:	615a      	str	r2, [r3, #20]
    MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, CRC_POLYLENGTH_32B);
 801139a:	687b      	ldr	r3, [r7, #4]
 801139c:	681b      	ldr	r3, [r3, #0]
 801139e:	689a      	ldr	r2, [r3, #8]
 80113a0:	687b      	ldr	r3, [r7, #4]
 80113a2:	681b      	ldr	r3, [r3, #0]
 80113a4:	f022 0218 	bic.w	r2, r2, #24
 80113a8:	609a      	str	r2, [r3, #8]
 80113aa:	e00c      	b.n	80113c6 <HAL_CRC_Init+0x6a>
  }
  else
  {
    /* initialize CRC peripheral with generating polynomial defined by user */
    if (HAL_CRCEx_Polynomial_Set(hcrc, hcrc->Init.GeneratingPolynomial, hcrc->Init.CRCLength) != HAL_OK)
 80113ac:	687b      	ldr	r3, [r7, #4]
 80113ae:	6899      	ldr	r1, [r3, #8]
 80113b0:	687b      	ldr	r3, [r7, #4]
 80113b2:	68db      	ldr	r3, [r3, #12]
 80113b4:	461a      	mov	r2, r3
 80113b6:	6878      	ldr	r0, [r7, #4]
 80113b8:	f000 f834 	bl	8011424 <HAL_CRCEx_Polynomial_Set>
 80113bc:	4603      	mov	r3, r0
 80113be:	2b00      	cmp	r3, #0
 80113c0:	d001      	beq.n	80113c6 <HAL_CRC_Init+0x6a>
    {
      return HAL_ERROR;
 80113c2:	2301      	movs	r3, #1
 80113c4:	e028      	b.n	8011418 <HAL_CRC_Init+0xbc>
  }

  /* check whether or not non-default CRC initial value has been
   * picked up by user */
  assert_param(IS_DEFAULT_INIT_VALUE(hcrc->Init.DefaultInitValueUse));
  if (hcrc->Init.DefaultInitValueUse == DEFAULT_INIT_VALUE_ENABLE)
 80113c6:	687b      	ldr	r3, [r7, #4]
 80113c8:	795b      	ldrb	r3, [r3, #5]
 80113ca:	2b00      	cmp	r3, #0
 80113cc:	d105      	bne.n	80113da <HAL_CRC_Init+0x7e>
  {
    WRITE_REG(hcrc->Instance->INIT, DEFAULT_CRC_INITVALUE);
 80113ce:	687b      	ldr	r3, [r7, #4]
 80113d0:	681b      	ldr	r3, [r3, #0]
 80113d2:	f04f 32ff 	mov.w	r2, #4294967295
 80113d6:	611a      	str	r2, [r3, #16]
 80113d8:	e004      	b.n	80113e4 <HAL_CRC_Init+0x88>
  }
  else
  {
    WRITE_REG(hcrc->Instance->INIT, hcrc->Init.InitValue);
 80113da:	687b      	ldr	r3, [r7, #4]
 80113dc:	681b      	ldr	r3, [r3, #0]
 80113de:	687a      	ldr	r2, [r7, #4]
 80113e0:	6912      	ldr	r2, [r2, #16]
 80113e2:	611a      	str	r2, [r3, #16]
  }


  /* set input data inversion mode */
  assert_param(IS_CRC_INPUTDATA_INVERSION_MODE(hcrc->Init.InputDataInversionMode));
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_IN, hcrc->Init.InputDataInversionMode);
 80113e4:	687b      	ldr	r3, [r7, #4]
 80113e6:	681b      	ldr	r3, [r3, #0]
 80113e8:	689b      	ldr	r3, [r3, #8]
 80113ea:	f023 0160 	bic.w	r1, r3, #96	@ 0x60
 80113ee:	687b      	ldr	r3, [r7, #4]
 80113f0:	695a      	ldr	r2, [r3, #20]
 80113f2:	687b      	ldr	r3, [r7, #4]
 80113f4:	681b      	ldr	r3, [r3, #0]
 80113f6:	430a      	orrs	r2, r1
 80113f8:	609a      	str	r2, [r3, #8]

  /* set output data inversion mode */
  assert_param(IS_CRC_OUTPUTDATA_INVERSION_MODE(hcrc->Init.OutputDataInversionMode));
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_OUT, hcrc->Init.OutputDataInversionMode);
 80113fa:	687b      	ldr	r3, [r7, #4]
 80113fc:	681b      	ldr	r3, [r3, #0]
 80113fe:	689b      	ldr	r3, [r3, #8]
 8011400:	f023 0180 	bic.w	r1, r3, #128	@ 0x80
 8011404:	687b      	ldr	r3, [r7, #4]
 8011406:	699a      	ldr	r2, [r3, #24]
 8011408:	687b      	ldr	r3, [r7, #4]
 801140a:	681b      	ldr	r3, [r3, #0]
 801140c:	430a      	orrs	r2, r1
 801140e:	609a      	str	r2, [r3, #8]
  /* makes sure the input data format (bytes, halfwords or words stream)
   * is properly specified by user */
  assert_param(IS_CRC_INPUTDATA_FORMAT(hcrc->InputDataFormat));

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_READY;
 8011410:	687b      	ldr	r3, [r7, #4]
 8011412:	2201      	movs	r2, #1
 8011414:	775a      	strb	r2, [r3, #29]

  /* Return function status */
  return HAL_OK;
 8011416:	2300      	movs	r3, #0
}
 8011418:	4618      	mov	r0, r3
 801141a:	3708      	adds	r7, #8
 801141c:	46bd      	mov	sp, r7
 801141e:	bd80      	pop	{r7, pc}
 8011420:	04c11db7 	.word	0x04c11db7

08011424 <HAL_CRCEx_Polynomial_Set>:
  *          @arg @ref CRC_POLYLENGTH_16B 16-bit long CRC (generating polynomial of degree 16)
  *          @arg @ref CRC_POLYLENGTH_32B 32-bit long CRC (generating polynomial of degree 32)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRCEx_Polynomial_Set(CRC_HandleTypeDef *hcrc, uint32_t Pol, uint32_t PolyLength)
{
 8011424:	b480      	push	{r7}
 8011426:	b087      	sub	sp, #28
 8011428:	af00      	add	r7, sp, #0
 801142a:	60f8      	str	r0, [r7, #12]
 801142c:	60b9      	str	r1, [r7, #8]
 801142e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8011430:	2300      	movs	r3, #0
 8011432:	75fb      	strb	r3, [r7, #23]
  uint32_t msb = 31U; /* polynomial degree is 32 at most, so msb is initialized to max value */
 8011434:	231f      	movs	r3, #31
 8011436:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_CRC_POL_LENGTH(PolyLength));

  /* Ensure that the generating polynomial is odd */ 
  if ((Pol & (uint32_t)(0x1U)) ==  0U)
 8011438:	68bb      	ldr	r3, [r7, #8]
 801143a:	f003 0301 	and.w	r3, r3, #1
 801143e:	2b00      	cmp	r3, #0
 8011440:	d102      	bne.n	8011448 <HAL_CRCEx_Polynomial_Set+0x24>
  {
    status =  HAL_ERROR;
 8011442:	2301      	movs	r3, #1
 8011444:	75fb      	strb	r3, [r7, #23]
 8011446:	e063      	b.n	8011510 <HAL_CRCEx_Polynomial_Set+0xec>
     * definition. HAL_ERROR is reported if Pol degree is
     * larger than that indicated by PolyLength.
     * Look for MSB position: msb will contain the degree of
     *  the second to the largest polynomial member. E.g., for
     *  X^7 + X^6 + X^5 + X^2 + 1, msb = 6. */
    while ((msb-- > 0U) && ((Pol & ((uint32_t)(0x1U) << (msb & 0x1FU))) == 0U))
 8011448:	bf00      	nop
 801144a:	693b      	ldr	r3, [r7, #16]
 801144c:	1e5a      	subs	r2, r3, #1
 801144e:	613a      	str	r2, [r7, #16]
 8011450:	2b00      	cmp	r3, #0
 8011452:	d009      	beq.n	8011468 <HAL_CRCEx_Polynomial_Set+0x44>
 8011454:	693b      	ldr	r3, [r7, #16]
 8011456:	f003 031f 	and.w	r3, r3, #31
 801145a:	68ba      	ldr	r2, [r7, #8]
 801145c:	fa22 f303 	lsr.w	r3, r2, r3
 8011460:	f003 0301 	and.w	r3, r3, #1
 8011464:	2b00      	cmp	r3, #0
 8011466:	d0f0      	beq.n	801144a <HAL_CRCEx_Polynomial_Set+0x26>
    {
    }

    switch (PolyLength)
 8011468:	687b      	ldr	r3, [r7, #4]
 801146a:	2b18      	cmp	r3, #24
 801146c:	d846      	bhi.n	80114fc <HAL_CRCEx_Polynomial_Set+0xd8>
 801146e:	a201      	add	r2, pc, #4	@ (adr r2, 8011474 <HAL_CRCEx_Polynomial_Set+0x50>)
 8011470:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8011474:	08011503 	.word	0x08011503
 8011478:	080114fd 	.word	0x080114fd
 801147c:	080114fd 	.word	0x080114fd
 8011480:	080114fd 	.word	0x080114fd
 8011484:	080114fd 	.word	0x080114fd
 8011488:	080114fd 	.word	0x080114fd
 801148c:	080114fd 	.word	0x080114fd
 8011490:	080114fd 	.word	0x080114fd
 8011494:	080114f1 	.word	0x080114f1
 8011498:	080114fd 	.word	0x080114fd
 801149c:	080114fd 	.word	0x080114fd
 80114a0:	080114fd 	.word	0x080114fd
 80114a4:	080114fd 	.word	0x080114fd
 80114a8:	080114fd 	.word	0x080114fd
 80114ac:	080114fd 	.word	0x080114fd
 80114b0:	080114fd 	.word	0x080114fd
 80114b4:	080114e5 	.word	0x080114e5
 80114b8:	080114fd 	.word	0x080114fd
 80114bc:	080114fd 	.word	0x080114fd
 80114c0:	080114fd 	.word	0x080114fd
 80114c4:	080114fd 	.word	0x080114fd
 80114c8:	080114fd 	.word	0x080114fd
 80114cc:	080114fd 	.word	0x080114fd
 80114d0:	080114fd 	.word	0x080114fd
 80114d4:	080114d9 	.word	0x080114d9
    {
          
      case CRC_POLYLENGTH_7B:
        if (msb >= HAL_CRC_LENGTH_7B)
 80114d8:	693b      	ldr	r3, [r7, #16]
 80114da:	2b06      	cmp	r3, #6
 80114dc:	d913      	bls.n	8011506 <HAL_CRCEx_Polynomial_Set+0xe2>
        {
          status =   HAL_ERROR;
 80114de:	2301      	movs	r3, #1
 80114e0:	75fb      	strb	r3, [r7, #23]
        }
        break;
 80114e2:	e010      	b.n	8011506 <HAL_CRCEx_Polynomial_Set+0xe2>
      case CRC_POLYLENGTH_8B:
        if (msb >= HAL_CRC_LENGTH_8B)
 80114e4:	693b      	ldr	r3, [r7, #16]
 80114e6:	2b07      	cmp	r3, #7
 80114e8:	d90f      	bls.n	801150a <HAL_CRCEx_Polynomial_Set+0xe6>
        {
          status =   HAL_ERROR;
 80114ea:	2301      	movs	r3, #1
 80114ec:	75fb      	strb	r3, [r7, #23]
        }
        break;
 80114ee:	e00c      	b.n	801150a <HAL_CRCEx_Polynomial_Set+0xe6>
      case CRC_POLYLENGTH_16B:
        if (msb >= HAL_CRC_LENGTH_16B)
 80114f0:	693b      	ldr	r3, [r7, #16]
 80114f2:	2b0f      	cmp	r3, #15
 80114f4:	d90b      	bls.n	801150e <HAL_CRCEx_Polynomial_Set+0xea>
        {
          status =   HAL_ERROR;
 80114f6:	2301      	movs	r3, #1
 80114f8:	75fb      	strb	r3, [r7, #23]
        }
        break;
 80114fa:	e008      	b.n	801150e <HAL_CRCEx_Polynomial_Set+0xea>
 
      case CRC_POLYLENGTH_32B:
        /* no polynomial definition vs. polynomial length issue possible */
        break;
      default:
        status =  HAL_ERROR;
 80114fc:	2301      	movs	r3, #1
 80114fe:	75fb      	strb	r3, [r7, #23]
        break;
 8011500:	e006      	b.n	8011510 <HAL_CRCEx_Polynomial_Set+0xec>
        break;
 8011502:	bf00      	nop
 8011504:	e004      	b.n	8011510 <HAL_CRCEx_Polynomial_Set+0xec>
        break;
 8011506:	bf00      	nop
 8011508:	e002      	b.n	8011510 <HAL_CRCEx_Polynomial_Set+0xec>
        break;
 801150a:	bf00      	nop
 801150c:	e000      	b.n	8011510 <HAL_CRCEx_Polynomial_Set+0xec>
        break;
 801150e:	bf00      	nop
    }
  }
  if (status == HAL_OK)
 8011510:	7dfb      	ldrb	r3, [r7, #23]
 8011512:	2b00      	cmp	r3, #0
 8011514:	d10d      	bne.n	8011532 <HAL_CRCEx_Polynomial_Set+0x10e>
  {
    /* set generating polynomial */
    WRITE_REG(hcrc->Instance->POL, Pol);
 8011516:	68fb      	ldr	r3, [r7, #12]
 8011518:	681b      	ldr	r3, [r3, #0]
 801151a:	68ba      	ldr	r2, [r7, #8]
 801151c:	615a      	str	r2, [r3, #20]

    /* set generating polynomial size */
    MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, PolyLength);
 801151e:	68fb      	ldr	r3, [r7, #12]
 8011520:	681b      	ldr	r3, [r3, #0]
 8011522:	689b      	ldr	r3, [r3, #8]
 8011524:	f023 0118 	bic.w	r1, r3, #24
 8011528:	68fb      	ldr	r3, [r7, #12]
 801152a:	681b      	ldr	r3, [r3, #0]
 801152c:	687a      	ldr	r2, [r7, #4]
 801152e:	430a      	orrs	r2, r1
 8011530:	609a      	str	r2, [r3, #8]
  }
  /* Return function status */
  return status;
 8011532:	7dfb      	ldrb	r3, [r7, #23]
}
 8011534:	4618      	mov	r0, r3
 8011536:	371c      	adds	r7, #28
 8011538:	46bd      	mov	sp, r7
 801153a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801153e:	4770      	bx	lr

08011540 <HAL_DMA2D_Init>:
  * @param  hdma2d pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_Init(DMA2D_HandleTypeDef *hdma2d)
{
 8011540:	b580      	push	{r7, lr}
 8011542:	b082      	sub	sp, #8
 8011544:	af00      	add	r7, sp, #0
 8011546:	6078      	str	r0, [r7, #4]
  /* Check the DMA2D peripheral state */
  if (hdma2d == NULL)
 8011548:	687b      	ldr	r3, [r7, #4]
 801154a:	2b00      	cmp	r3, #0
 801154c:	d101      	bne.n	8011552 <HAL_DMA2D_Init+0x12>
  {
    return HAL_ERROR;
 801154e:	2301      	movs	r3, #1
 8011550:	e04f      	b.n	80115f2 <HAL_DMA2D_Init+0xb2>

    /* Init the low level hardware */
    hdma2d->MspInitCallback(hdma2d);
  }
#else
  if (hdma2d->State == HAL_DMA2D_STATE_RESET)
 8011552:	687b      	ldr	r3, [r7, #4]
 8011554:	f893 3061 	ldrb.w	r3, [r3, #97]	@ 0x61
 8011558:	b2db      	uxtb	r3, r3
 801155a:	2b00      	cmp	r3, #0
 801155c:	d106      	bne.n	801156c <HAL_DMA2D_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hdma2d->Lock = HAL_UNLOCKED;
 801155e:	687b      	ldr	r3, [r7, #4]
 8011560:	2200      	movs	r2, #0
 8011562:	f883 2060 	strb.w	r2, [r3, #96]	@ 0x60
    /* Init the low level hardware */
    HAL_DMA2D_MspInit(hdma2d);
 8011566:	6878      	ldr	r0, [r7, #4]
 8011568:	f7ef fc8c 	bl	8000e84 <HAL_DMA2D_MspInit>
  }
#endif /* (USE_HAL_DMA2D_REGISTER_CALLBACKS) */

  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 801156c:	687b      	ldr	r3, [r7, #4]
 801156e:	2202      	movs	r2, #2
 8011570:	f883 2061 	strb.w	r2, [r3, #97]	@ 0x61

  /* DMA2D CR register configuration -------------------------------------------*/
  MODIFY_REG(hdma2d->Instance->CR, DMA2D_CR_MODE | DMA2D_CR_LOM, hdma2d->Init.Mode | hdma2d->Init.LineOffsetMode);
 8011574:	687b      	ldr	r3, [r7, #4]
 8011576:	681b      	ldr	r3, [r3, #0]
 8011578:	681a      	ldr	r2, [r3, #0]
 801157a:	4b20      	ldr	r3, [pc, #128]	@ (80115fc <HAL_DMA2D_Init+0xbc>)
 801157c:	4013      	ands	r3, r2
 801157e:	687a      	ldr	r2, [r7, #4]
 8011580:	6851      	ldr	r1, [r2, #4]
 8011582:	687a      	ldr	r2, [r7, #4]
 8011584:	69d2      	ldr	r2, [r2, #28]
 8011586:	4311      	orrs	r1, r2
 8011588:	687a      	ldr	r2, [r7, #4]
 801158a:	6812      	ldr	r2, [r2, #0]
 801158c:	430b      	orrs	r3, r1
 801158e:	6013      	str	r3, [r2, #0]

  /* DMA2D OPFCCR register configuration ---------------------------------------*/
  MODIFY_REG(hdma2d->Instance->OPFCCR, DMA2D_OPFCCR_CM | DMA2D_OPFCCR_SB,
 8011590:	687b      	ldr	r3, [r7, #4]
 8011592:	681b      	ldr	r3, [r3, #0]
 8011594:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8011596:	4b1a      	ldr	r3, [pc, #104]	@ (8011600 <HAL_DMA2D_Init+0xc0>)
 8011598:	4013      	ands	r3, r2
 801159a:	687a      	ldr	r2, [r7, #4]
 801159c:	6891      	ldr	r1, [r2, #8]
 801159e:	687a      	ldr	r2, [r7, #4]
 80115a0:	6992      	ldr	r2, [r2, #24]
 80115a2:	4311      	orrs	r1, r2
 80115a4:	687a      	ldr	r2, [r7, #4]
 80115a6:	6812      	ldr	r2, [r2, #0]
 80115a8:	430b      	orrs	r3, r1
 80115aa:	6353      	str	r3, [r2, #52]	@ 0x34
             hdma2d->Init.ColorMode | hdma2d->Init.BytesSwap);

  /* DMA2D OOR register configuration ------------------------------------------*/
  MODIFY_REG(hdma2d->Instance->OOR, DMA2D_OOR_LO, hdma2d->Init.OutputOffset);
 80115ac:	687b      	ldr	r3, [r7, #4]
 80115ae:	681b      	ldr	r3, [r3, #0]
 80115b0:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80115b2:	4b14      	ldr	r3, [pc, #80]	@ (8011604 <HAL_DMA2D_Init+0xc4>)
 80115b4:	4013      	ands	r3, r2
 80115b6:	687a      	ldr	r2, [r7, #4]
 80115b8:	68d1      	ldr	r1, [r2, #12]
 80115ba:	687a      	ldr	r2, [r7, #4]
 80115bc:	6812      	ldr	r2, [r2, #0]
 80115be:	430b      	orrs	r3, r1
 80115c0:	6413      	str	r3, [r2, #64]	@ 0x40
  /* DMA2D OPFCCR AI and RBS fields setting (Output Alpha Inversion)*/
  MODIFY_REG(hdma2d->Instance->OPFCCR, (DMA2D_OPFCCR_AI | DMA2D_OPFCCR_RBS),
 80115c2:	687b      	ldr	r3, [r7, #4]
 80115c4:	681b      	ldr	r3, [r3, #0]
 80115c6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80115c8:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 80115cc:	687b      	ldr	r3, [r7, #4]
 80115ce:	691b      	ldr	r3, [r3, #16]
 80115d0:	051a      	lsls	r2, r3, #20
 80115d2:	687b      	ldr	r3, [r7, #4]
 80115d4:	695b      	ldr	r3, [r3, #20]
 80115d6:	055b      	lsls	r3, r3, #21
 80115d8:	431a      	orrs	r2, r3
 80115da:	687b      	ldr	r3, [r7, #4]
 80115dc:	681b      	ldr	r3, [r3, #0]
 80115de:	430a      	orrs	r2, r1
 80115e0:	635a      	str	r2, [r3, #52]	@ 0x34
             ((hdma2d->Init.AlphaInverted << DMA2D_OPFCCR_AI_Pos) | \
              (hdma2d->Init.RedBlueSwap << DMA2D_OPFCCR_RBS_Pos)));


  /* Update error code */
  hdma2d->ErrorCode = HAL_DMA2D_ERROR_NONE;
 80115e2:	687b      	ldr	r3, [r7, #4]
 80115e4:	2200      	movs	r2, #0
 80115e6:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Initialize the DMA2D state*/
  hdma2d->State  = HAL_DMA2D_STATE_READY;
 80115e8:	687b      	ldr	r3, [r7, #4]
 80115ea:	2201      	movs	r2, #1
 80115ec:	f883 2061 	strb.w	r2, [r3, #97]	@ 0x61

  return HAL_OK;
 80115f0:	2300      	movs	r3, #0
}
 80115f2:	4618      	mov	r0, r3
 80115f4:	3708      	adds	r7, #8
 80115f6:	46bd      	mov	sp, r7
 80115f8:	bd80      	pop	{r7, pc}
 80115fa:	bf00      	nop
 80115fc:	fff8ffbf 	.word	0xfff8ffbf
 8011600:	fffffef8 	.word	0xfffffef8
 8011604:	ffff0000 	.word	0xffff0000

08011608 <HAL_DMA2D_IRQHandler>:
  * @param  hdma2d Pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval HAL status
  */
void HAL_DMA2D_IRQHandler(DMA2D_HandleTypeDef *hdma2d)
{
 8011608:	b580      	push	{r7, lr}
 801160a:	b084      	sub	sp, #16
 801160c:	af00      	add	r7, sp, #0
 801160e:	6078      	str	r0, [r7, #4]
  uint32_t isrflags = READ_REG(hdma2d->Instance->ISR);
 8011610:	687b      	ldr	r3, [r7, #4]
 8011612:	681b      	ldr	r3, [r3, #0]
 8011614:	685b      	ldr	r3, [r3, #4]
 8011616:	60fb      	str	r3, [r7, #12]
  uint32_t crflags = READ_REG(hdma2d->Instance->CR);
 8011618:	687b      	ldr	r3, [r7, #4]
 801161a:	681b      	ldr	r3, [r3, #0]
 801161c:	681b      	ldr	r3, [r3, #0]
 801161e:	60bb      	str	r3, [r7, #8]

  /* Transfer Error Interrupt management ***************************************/
  if ((isrflags & DMA2D_FLAG_TE) != 0U)
 8011620:	68fb      	ldr	r3, [r7, #12]
 8011622:	f003 0301 	and.w	r3, r3, #1
 8011626:	2b00      	cmp	r3, #0
 8011628:	d026      	beq.n	8011678 <HAL_DMA2D_IRQHandler+0x70>
  {
    if ((crflags & DMA2D_IT_TE) != 0U)
 801162a:	68bb      	ldr	r3, [r7, #8]
 801162c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8011630:	2b00      	cmp	r3, #0
 8011632:	d021      	beq.n	8011678 <HAL_DMA2D_IRQHandler+0x70>
    {
      /* Disable the transfer Error interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_TE);
 8011634:	687b      	ldr	r3, [r7, #4]
 8011636:	681b      	ldr	r3, [r3, #0]
 8011638:	681a      	ldr	r2, [r3, #0]
 801163a:	687b      	ldr	r3, [r7, #4]
 801163c:	681b      	ldr	r3, [r3, #0]
 801163e:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8011642:	601a      	str	r2, [r3, #0]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TE;
 8011644:	687b      	ldr	r3, [r7, #4]
 8011646:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8011648:	f043 0201 	orr.w	r2, r3, #1
 801164c:	687b      	ldr	r3, [r7, #4]
 801164e:	665a      	str	r2, [r3, #100]	@ 0x64

      /* Clear the transfer error flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TE);
 8011650:	687b      	ldr	r3, [r7, #4]
 8011652:	681b      	ldr	r3, [r3, #0]
 8011654:	2201      	movs	r2, #1
 8011656:	609a      	str	r2, [r3, #8]

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_ERROR;
 8011658:	687b      	ldr	r3, [r7, #4]
 801165a:	2204      	movs	r2, #4
 801165c:	f883 2061 	strb.w	r2, [r3, #97]	@ 0x61

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 8011660:	687b      	ldr	r3, [r7, #4]
 8011662:	2200      	movs	r2, #0
 8011664:	f883 2060 	strb.w	r2, [r3, #96]	@ 0x60

      if (hdma2d->XferErrorCallback != NULL)
 8011668:	687b      	ldr	r3, [r7, #4]
 801166a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801166c:	2b00      	cmp	r3, #0
 801166e:	d003      	beq.n	8011678 <HAL_DMA2D_IRQHandler+0x70>
      {
        /* Transfer error Callback */
        hdma2d->XferErrorCallback(hdma2d);
 8011670:	687b      	ldr	r3, [r7, #4]
 8011672:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8011674:	6878      	ldr	r0, [r7, #4]
 8011676:	4798      	blx	r3
      }
    }
  }
  /* Configuration Error Interrupt management **********************************/
  if ((isrflags & DMA2D_FLAG_CE) != 0U)
 8011678:	68fb      	ldr	r3, [r7, #12]
 801167a:	f003 0320 	and.w	r3, r3, #32
 801167e:	2b00      	cmp	r3, #0
 8011680:	d026      	beq.n	80116d0 <HAL_DMA2D_IRQHandler+0xc8>
  {
    if ((crflags & DMA2D_IT_CE) != 0U)
 8011682:	68bb      	ldr	r3, [r7, #8]
 8011684:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8011688:	2b00      	cmp	r3, #0
 801168a:	d021      	beq.n	80116d0 <HAL_DMA2D_IRQHandler+0xc8>
    {
      /* Disable the Configuration Error interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_CE);
 801168c:	687b      	ldr	r3, [r7, #4]
 801168e:	681b      	ldr	r3, [r3, #0]
 8011690:	681a      	ldr	r2, [r3, #0]
 8011692:	687b      	ldr	r3, [r7, #4]
 8011694:	681b      	ldr	r3, [r3, #0]
 8011696:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 801169a:	601a      	str	r2, [r3, #0]

      /* Clear the Configuration error flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CE);
 801169c:	687b      	ldr	r3, [r7, #4]
 801169e:	681b      	ldr	r3, [r3, #0]
 80116a0:	2220      	movs	r2, #32
 80116a2:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CE;
 80116a4:	687b      	ldr	r3, [r7, #4]
 80116a6:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80116a8:	f043 0202 	orr.w	r2, r3, #2
 80116ac:	687b      	ldr	r3, [r7, #4]
 80116ae:	665a      	str	r2, [r3, #100]	@ 0x64

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_ERROR;
 80116b0:	687b      	ldr	r3, [r7, #4]
 80116b2:	2204      	movs	r2, #4
 80116b4:	f883 2061 	strb.w	r2, [r3, #97]	@ 0x61

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 80116b8:	687b      	ldr	r3, [r7, #4]
 80116ba:	2200      	movs	r2, #0
 80116bc:	f883 2060 	strb.w	r2, [r3, #96]	@ 0x60

      if (hdma2d->XferErrorCallback != NULL)
 80116c0:	687b      	ldr	r3, [r7, #4]
 80116c2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80116c4:	2b00      	cmp	r3, #0
 80116c6:	d003      	beq.n	80116d0 <HAL_DMA2D_IRQHandler+0xc8>
      {
        /* Transfer error Callback */
        hdma2d->XferErrorCallback(hdma2d);
 80116c8:	687b      	ldr	r3, [r7, #4]
 80116ca:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80116cc:	6878      	ldr	r0, [r7, #4]
 80116ce:	4798      	blx	r3
      }
    }
  }
  /* CLUT access Error Interrupt management ***********************************/
  if ((isrflags & DMA2D_FLAG_CAE) != 0U)
 80116d0:	68fb      	ldr	r3, [r7, #12]
 80116d2:	f003 0308 	and.w	r3, r3, #8
 80116d6:	2b00      	cmp	r3, #0
 80116d8:	d026      	beq.n	8011728 <HAL_DMA2D_IRQHandler+0x120>
  {
    if ((crflags & DMA2D_IT_CAE) != 0U)
 80116da:	68bb      	ldr	r3, [r7, #8]
 80116dc:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80116e0:	2b00      	cmp	r3, #0
 80116e2:	d021      	beq.n	8011728 <HAL_DMA2D_IRQHandler+0x120>
    {
      /* Disable the CLUT access error interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_CAE);
 80116e4:	687b      	ldr	r3, [r7, #4]
 80116e6:	681b      	ldr	r3, [r3, #0]
 80116e8:	681a      	ldr	r2, [r3, #0]
 80116ea:	687b      	ldr	r3, [r7, #4]
 80116ec:	681b      	ldr	r3, [r3, #0]
 80116ee:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80116f2:	601a      	str	r2, [r3, #0]

      /* Clear the CLUT access error flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CAE);
 80116f4:	687b      	ldr	r3, [r7, #4]
 80116f6:	681b      	ldr	r3, [r3, #0]
 80116f8:	2208      	movs	r2, #8
 80116fa:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CAE;
 80116fc:	687b      	ldr	r3, [r7, #4]
 80116fe:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8011700:	f043 0204 	orr.w	r2, r3, #4
 8011704:	687b      	ldr	r3, [r7, #4]
 8011706:	665a      	str	r2, [r3, #100]	@ 0x64

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_ERROR;
 8011708:	687b      	ldr	r3, [r7, #4]
 801170a:	2204      	movs	r2, #4
 801170c:	f883 2061 	strb.w	r2, [r3, #97]	@ 0x61

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 8011710:	687b      	ldr	r3, [r7, #4]
 8011712:	2200      	movs	r2, #0
 8011714:	f883 2060 	strb.w	r2, [r3, #96]	@ 0x60

      if (hdma2d->XferErrorCallback != NULL)
 8011718:	687b      	ldr	r3, [r7, #4]
 801171a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801171c:	2b00      	cmp	r3, #0
 801171e:	d003      	beq.n	8011728 <HAL_DMA2D_IRQHandler+0x120>
      {
        /* Transfer error Callback */
        hdma2d->XferErrorCallback(hdma2d);
 8011720:	687b      	ldr	r3, [r7, #4]
 8011722:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8011724:	6878      	ldr	r0, [r7, #4]
 8011726:	4798      	blx	r3
      }
    }
  }
  /* Transfer watermark Interrupt management **********************************/
  if ((isrflags & DMA2D_FLAG_TW) != 0U)
 8011728:	68fb      	ldr	r3, [r7, #12]
 801172a:	f003 0304 	and.w	r3, r3, #4
 801172e:	2b00      	cmp	r3, #0
 8011730:	d013      	beq.n	801175a <HAL_DMA2D_IRQHandler+0x152>
  {
    if ((crflags & DMA2D_IT_TW) != 0U)
 8011732:	68bb      	ldr	r3, [r7, #8]
 8011734:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8011738:	2b00      	cmp	r3, #0
 801173a:	d00e      	beq.n	801175a <HAL_DMA2D_IRQHandler+0x152>
    {
      /* Disable the transfer watermark interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_TW);
 801173c:	687b      	ldr	r3, [r7, #4]
 801173e:	681b      	ldr	r3, [r3, #0]
 8011740:	681a      	ldr	r2, [r3, #0]
 8011742:	687b      	ldr	r3, [r7, #4]
 8011744:	681b      	ldr	r3, [r3, #0]
 8011746:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 801174a:	601a      	str	r2, [r3, #0]

      /* Clear the transfer watermark flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TW);
 801174c:	687b      	ldr	r3, [r7, #4]
 801174e:	681b      	ldr	r3, [r3, #0]
 8011750:	2204      	movs	r2, #4
 8011752:	609a      	str	r2, [r3, #8]

      /* Transfer watermark Callback */
#if (USE_HAL_DMA2D_REGISTER_CALLBACKS == 1)
      hdma2d->LineEventCallback(hdma2d);
#else
      HAL_DMA2D_LineEventCallback(hdma2d);
 8011754:	6878      	ldr	r0, [r7, #4]
 8011756:	f000 f853 	bl	8011800 <HAL_DMA2D_LineEventCallback>
#endif /* USE_HAL_DMA2D_REGISTER_CALLBACKS */

    }
  }
  /* Transfer Complete Interrupt management ************************************/
  if ((isrflags & DMA2D_FLAG_TC) != 0U)
 801175a:	68fb      	ldr	r3, [r7, #12]
 801175c:	f003 0302 	and.w	r3, r3, #2
 8011760:	2b00      	cmp	r3, #0
 8011762:	d024      	beq.n	80117ae <HAL_DMA2D_IRQHandler+0x1a6>
  {
    if ((crflags & DMA2D_IT_TC) != 0U)
 8011764:	68bb      	ldr	r3, [r7, #8]
 8011766:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 801176a:	2b00      	cmp	r3, #0
 801176c:	d01f      	beq.n	80117ae <HAL_DMA2D_IRQHandler+0x1a6>
    {
      /* Disable the transfer complete interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_TC);
 801176e:	687b      	ldr	r3, [r7, #4]
 8011770:	681b      	ldr	r3, [r3, #0]
 8011772:	681a      	ldr	r2, [r3, #0]
 8011774:	687b      	ldr	r3, [r7, #4]
 8011776:	681b      	ldr	r3, [r3, #0]
 8011778:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 801177c:	601a      	str	r2, [r3, #0]

      /* Clear the transfer complete flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TC);
 801177e:	687b      	ldr	r3, [r7, #4]
 8011780:	681b      	ldr	r3, [r3, #0]
 8011782:	2202      	movs	r2, #2
 8011784:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_NONE;
 8011786:	687b      	ldr	r3, [r7, #4]
 8011788:	6e5a      	ldr	r2, [r3, #100]	@ 0x64
 801178a:	687b      	ldr	r3, [r7, #4]
 801178c:	665a      	str	r2, [r3, #100]	@ 0x64

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_READY;
 801178e:	687b      	ldr	r3, [r7, #4]
 8011790:	2201      	movs	r2, #1
 8011792:	f883 2061 	strb.w	r2, [r3, #97]	@ 0x61

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 8011796:	687b      	ldr	r3, [r7, #4]
 8011798:	2200      	movs	r2, #0
 801179a:	f883 2060 	strb.w	r2, [r3, #96]	@ 0x60

      if (hdma2d->XferCpltCallback != NULL)
 801179e:	687b      	ldr	r3, [r7, #4]
 80117a0:	6a1b      	ldr	r3, [r3, #32]
 80117a2:	2b00      	cmp	r3, #0
 80117a4:	d003      	beq.n	80117ae <HAL_DMA2D_IRQHandler+0x1a6>
      {
        /* Transfer complete Callback */
        hdma2d->XferCpltCallback(hdma2d);
 80117a6:	687b      	ldr	r3, [r7, #4]
 80117a8:	6a1b      	ldr	r3, [r3, #32]
 80117aa:	6878      	ldr	r0, [r7, #4]
 80117ac:	4798      	blx	r3
      }
    }
  }
  /* CLUT Transfer Complete Interrupt management ******************************/
  if ((isrflags & DMA2D_FLAG_CTC) != 0U)
 80117ae:	68fb      	ldr	r3, [r7, #12]
 80117b0:	f003 0310 	and.w	r3, r3, #16
 80117b4:	2b00      	cmp	r3, #0
 80117b6:	d01f      	beq.n	80117f8 <HAL_DMA2D_IRQHandler+0x1f0>
  {
    if ((crflags & DMA2D_IT_CTC) != 0U)
 80117b8:	68bb      	ldr	r3, [r7, #8]
 80117ba:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80117be:	2b00      	cmp	r3, #0
 80117c0:	d01a      	beq.n	80117f8 <HAL_DMA2D_IRQHandler+0x1f0>
    {
      /* Disable the CLUT transfer complete interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_CTC);
 80117c2:	687b      	ldr	r3, [r7, #4]
 80117c4:	681b      	ldr	r3, [r3, #0]
 80117c6:	681a      	ldr	r2, [r3, #0]
 80117c8:	687b      	ldr	r3, [r7, #4]
 80117ca:	681b      	ldr	r3, [r3, #0]
 80117cc:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 80117d0:	601a      	str	r2, [r3, #0]

      /* Clear the CLUT transfer complete flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CTC);
 80117d2:	687b      	ldr	r3, [r7, #4]
 80117d4:	681b      	ldr	r3, [r3, #0]
 80117d6:	2210      	movs	r2, #16
 80117d8:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_NONE;
 80117da:	687b      	ldr	r3, [r7, #4]
 80117dc:	6e5a      	ldr	r2, [r3, #100]	@ 0x64
 80117de:	687b      	ldr	r3, [r7, #4]
 80117e0:	665a      	str	r2, [r3, #100]	@ 0x64

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_READY;
 80117e2:	687b      	ldr	r3, [r7, #4]
 80117e4:	2201      	movs	r2, #1
 80117e6:	f883 2061 	strb.w	r2, [r3, #97]	@ 0x61

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 80117ea:	687b      	ldr	r3, [r7, #4]
 80117ec:	2200      	movs	r2, #0
 80117ee:	f883 2060 	strb.w	r2, [r3, #96]	@ 0x60

      /* CLUT Transfer complete Callback */
#if (USE_HAL_DMA2D_REGISTER_CALLBACKS == 1)
      hdma2d->CLUTLoadingCpltCallback(hdma2d);
#else
      HAL_DMA2D_CLUTLoadingCpltCallback(hdma2d);
 80117f2:	6878      	ldr	r0, [r7, #4]
 80117f4:	f000 f80e 	bl	8011814 <HAL_DMA2D_CLUTLoadingCpltCallback>
#endif /* USE_HAL_DMA2D_REGISTER_CALLBACKS */
    }
  }

}
 80117f8:	bf00      	nop
 80117fa:	3710      	adds	r7, #16
 80117fc:	46bd      	mov	sp, r7
 80117fe:	bd80      	pop	{r7, pc}

08011800 <HAL_DMA2D_LineEventCallback>:
  * @param  hdma2d pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval None
  */
__weak void HAL_DMA2D_LineEventCallback(DMA2D_HandleTypeDef *hdma2d)
{
 8011800:	b480      	push	{r7}
 8011802:	b083      	sub	sp, #12
 8011804:	af00      	add	r7, sp, #0
 8011806:	6078      	str	r0, [r7, #4]
  UNUSED(hdma2d);

  /* NOTE : This function should not be modified; when the callback is needed,
            the HAL_DMA2D_LineEventCallback can be implemented in the user file.
   */
}
 8011808:	bf00      	nop
 801180a:	370c      	adds	r7, #12
 801180c:	46bd      	mov	sp, r7
 801180e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011812:	4770      	bx	lr

08011814 <HAL_DMA2D_CLUTLoadingCpltCallback>:
  * @param  hdma2d pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval None
  */
__weak void HAL_DMA2D_CLUTLoadingCpltCallback(DMA2D_HandleTypeDef *hdma2d)
{
 8011814:	b480      	push	{r7}
 8011816:	b083      	sub	sp, #12
 8011818:	af00      	add	r7, sp, #0
 801181a:	6078      	str	r0, [r7, #4]
  UNUSED(hdma2d);

  /* NOTE : This function should not be modified; when the callback is needed,
            the HAL_DMA2D_CLUTLoadingCpltCallback can be implemented in the user file.
   */
}
 801181c:	bf00      	nop
 801181e:	370c      	adds	r7, #12
 8011820:	46bd      	mov	sp, r7
 8011822:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011826:	4770      	bx	lr

08011828 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8011828:	b480      	push	{r7}
 801182a:	b089      	sub	sp, #36	@ 0x24
 801182c:	af00      	add	r7, sp, #0
 801182e:	6078      	str	r0, [r7, #4]
 8011830:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8011832:	2300      	movs	r3, #0
 8011834:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 8011836:	4b89      	ldr	r3, [pc, #548]	@ (8011a5c <HAL_GPIO_Init+0x234>)
 8011838:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 801183a:	e194      	b.n	8011b66 <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 801183c:	683b      	ldr	r3, [r7, #0]
 801183e:	681a      	ldr	r2, [r3, #0]
 8011840:	2101      	movs	r1, #1
 8011842:	69fb      	ldr	r3, [r7, #28]
 8011844:	fa01 f303 	lsl.w	r3, r1, r3
 8011848:	4013      	ands	r3, r2
 801184a:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 801184c:	693b      	ldr	r3, [r7, #16]
 801184e:	2b00      	cmp	r3, #0
 8011850:	f000 8186 	beq.w	8011b60 <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8011854:	683b      	ldr	r3, [r7, #0]
 8011856:	685b      	ldr	r3, [r3, #4]
 8011858:	f003 0303 	and.w	r3, r3, #3
 801185c:	2b01      	cmp	r3, #1
 801185e:	d005      	beq.n	801186c <HAL_GPIO_Init+0x44>
 8011860:	683b      	ldr	r3, [r7, #0]
 8011862:	685b      	ldr	r3, [r3, #4]
 8011864:	f003 0303 	and.w	r3, r3, #3
 8011868:	2b02      	cmp	r3, #2
 801186a:	d130      	bne.n	80118ce <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 801186c:	687b      	ldr	r3, [r7, #4]
 801186e:	689b      	ldr	r3, [r3, #8]
 8011870:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8011872:	69fb      	ldr	r3, [r7, #28]
 8011874:	005b      	lsls	r3, r3, #1
 8011876:	2203      	movs	r2, #3
 8011878:	fa02 f303 	lsl.w	r3, r2, r3
 801187c:	43db      	mvns	r3, r3
 801187e:	69ba      	ldr	r2, [r7, #24]
 8011880:	4013      	ands	r3, r2
 8011882:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8011884:	683b      	ldr	r3, [r7, #0]
 8011886:	68da      	ldr	r2, [r3, #12]
 8011888:	69fb      	ldr	r3, [r7, #28]
 801188a:	005b      	lsls	r3, r3, #1
 801188c:	fa02 f303 	lsl.w	r3, r2, r3
 8011890:	69ba      	ldr	r2, [r7, #24]
 8011892:	4313      	orrs	r3, r2
 8011894:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8011896:	687b      	ldr	r3, [r7, #4]
 8011898:	69ba      	ldr	r2, [r7, #24]
 801189a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 801189c:	687b      	ldr	r3, [r7, #4]
 801189e:	685b      	ldr	r3, [r3, #4]
 80118a0:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80118a2:	2201      	movs	r2, #1
 80118a4:	69fb      	ldr	r3, [r7, #28]
 80118a6:	fa02 f303 	lsl.w	r3, r2, r3
 80118aa:	43db      	mvns	r3, r3
 80118ac:	69ba      	ldr	r2, [r7, #24]
 80118ae:	4013      	ands	r3, r2
 80118b0:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80118b2:	683b      	ldr	r3, [r7, #0]
 80118b4:	685b      	ldr	r3, [r3, #4]
 80118b6:	091b      	lsrs	r3, r3, #4
 80118b8:	f003 0201 	and.w	r2, r3, #1
 80118bc:	69fb      	ldr	r3, [r7, #28]
 80118be:	fa02 f303 	lsl.w	r3, r2, r3
 80118c2:	69ba      	ldr	r2, [r7, #24]
 80118c4:	4313      	orrs	r3, r2
 80118c6:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80118c8:	687b      	ldr	r3, [r7, #4]
 80118ca:	69ba      	ldr	r2, [r7, #24]
 80118cc:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80118ce:	683b      	ldr	r3, [r7, #0]
 80118d0:	685b      	ldr	r3, [r3, #4]
 80118d2:	f003 0303 	and.w	r3, r3, #3
 80118d6:	2b03      	cmp	r3, #3
 80118d8:	d017      	beq.n	801190a <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 80118da:	687b      	ldr	r3, [r7, #4]
 80118dc:	68db      	ldr	r3, [r3, #12]
 80118de:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80118e0:	69fb      	ldr	r3, [r7, #28]
 80118e2:	005b      	lsls	r3, r3, #1
 80118e4:	2203      	movs	r2, #3
 80118e6:	fa02 f303 	lsl.w	r3, r2, r3
 80118ea:	43db      	mvns	r3, r3
 80118ec:	69ba      	ldr	r2, [r7, #24]
 80118ee:	4013      	ands	r3, r2
 80118f0:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 80118f2:	683b      	ldr	r3, [r7, #0]
 80118f4:	689a      	ldr	r2, [r3, #8]
 80118f6:	69fb      	ldr	r3, [r7, #28]
 80118f8:	005b      	lsls	r3, r3, #1
 80118fa:	fa02 f303 	lsl.w	r3, r2, r3
 80118fe:	69ba      	ldr	r2, [r7, #24]
 8011900:	4313      	orrs	r3, r2
 8011902:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8011904:	687b      	ldr	r3, [r7, #4]
 8011906:	69ba      	ldr	r2, [r7, #24]
 8011908:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 801190a:	683b      	ldr	r3, [r7, #0]
 801190c:	685b      	ldr	r3, [r3, #4]
 801190e:	f003 0303 	and.w	r3, r3, #3
 8011912:	2b02      	cmp	r3, #2
 8011914:	d123      	bne.n	801195e <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8011916:	69fb      	ldr	r3, [r7, #28]
 8011918:	08da      	lsrs	r2, r3, #3
 801191a:	687b      	ldr	r3, [r7, #4]
 801191c:	3208      	adds	r2, #8
 801191e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8011922:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8011924:	69fb      	ldr	r3, [r7, #28]
 8011926:	f003 0307 	and.w	r3, r3, #7
 801192a:	009b      	lsls	r3, r3, #2
 801192c:	220f      	movs	r2, #15
 801192e:	fa02 f303 	lsl.w	r3, r2, r3
 8011932:	43db      	mvns	r3, r3
 8011934:	69ba      	ldr	r2, [r7, #24]
 8011936:	4013      	ands	r3, r2
 8011938:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 801193a:	683b      	ldr	r3, [r7, #0]
 801193c:	691a      	ldr	r2, [r3, #16]
 801193e:	69fb      	ldr	r3, [r7, #28]
 8011940:	f003 0307 	and.w	r3, r3, #7
 8011944:	009b      	lsls	r3, r3, #2
 8011946:	fa02 f303 	lsl.w	r3, r2, r3
 801194a:	69ba      	ldr	r2, [r7, #24]
 801194c:	4313      	orrs	r3, r2
 801194e:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8011950:	69fb      	ldr	r3, [r7, #28]
 8011952:	08da      	lsrs	r2, r3, #3
 8011954:	687b      	ldr	r3, [r7, #4]
 8011956:	3208      	adds	r2, #8
 8011958:	69b9      	ldr	r1, [r7, #24]
 801195a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 801195e:	687b      	ldr	r3, [r7, #4]
 8011960:	681b      	ldr	r3, [r3, #0]
 8011962:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8011964:	69fb      	ldr	r3, [r7, #28]
 8011966:	005b      	lsls	r3, r3, #1
 8011968:	2203      	movs	r2, #3
 801196a:	fa02 f303 	lsl.w	r3, r2, r3
 801196e:	43db      	mvns	r3, r3
 8011970:	69ba      	ldr	r2, [r7, #24]
 8011972:	4013      	ands	r3, r2
 8011974:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8011976:	683b      	ldr	r3, [r7, #0]
 8011978:	685b      	ldr	r3, [r3, #4]
 801197a:	f003 0203 	and.w	r2, r3, #3
 801197e:	69fb      	ldr	r3, [r7, #28]
 8011980:	005b      	lsls	r3, r3, #1
 8011982:	fa02 f303 	lsl.w	r3, r2, r3
 8011986:	69ba      	ldr	r2, [r7, #24]
 8011988:	4313      	orrs	r3, r2
 801198a:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 801198c:	687b      	ldr	r3, [r7, #4]
 801198e:	69ba      	ldr	r2, [r7, #24]
 8011990:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8011992:	683b      	ldr	r3, [r7, #0]
 8011994:	685b      	ldr	r3, [r3, #4]
 8011996:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 801199a:	2b00      	cmp	r3, #0
 801199c:	f000 80e0 	beq.w	8011b60 <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80119a0:	4b2f      	ldr	r3, [pc, #188]	@ (8011a60 <HAL_GPIO_Init+0x238>)
 80119a2:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 80119a6:	4a2e      	ldr	r2, [pc, #184]	@ (8011a60 <HAL_GPIO_Init+0x238>)
 80119a8:	f043 0302 	orr.w	r3, r3, #2
 80119ac:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 80119b0:	4b2b      	ldr	r3, [pc, #172]	@ (8011a60 <HAL_GPIO_Init+0x238>)
 80119b2:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 80119b6:	f003 0302 	and.w	r3, r3, #2
 80119ba:	60fb      	str	r3, [r7, #12]
 80119bc:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80119be:	4a29      	ldr	r2, [pc, #164]	@ (8011a64 <HAL_GPIO_Init+0x23c>)
 80119c0:	69fb      	ldr	r3, [r7, #28]
 80119c2:	089b      	lsrs	r3, r3, #2
 80119c4:	3302      	adds	r3, #2
 80119c6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80119ca:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 80119cc:	69fb      	ldr	r3, [r7, #28]
 80119ce:	f003 0303 	and.w	r3, r3, #3
 80119d2:	009b      	lsls	r3, r3, #2
 80119d4:	220f      	movs	r2, #15
 80119d6:	fa02 f303 	lsl.w	r3, r2, r3
 80119da:	43db      	mvns	r3, r3
 80119dc:	69ba      	ldr	r2, [r7, #24]
 80119de:	4013      	ands	r3, r2
 80119e0:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 80119e2:	687b      	ldr	r3, [r7, #4]
 80119e4:	4a20      	ldr	r2, [pc, #128]	@ (8011a68 <HAL_GPIO_Init+0x240>)
 80119e6:	4293      	cmp	r3, r2
 80119e8:	d052      	beq.n	8011a90 <HAL_GPIO_Init+0x268>
 80119ea:	687b      	ldr	r3, [r7, #4]
 80119ec:	4a1f      	ldr	r2, [pc, #124]	@ (8011a6c <HAL_GPIO_Init+0x244>)
 80119ee:	4293      	cmp	r3, r2
 80119f0:	d031      	beq.n	8011a56 <HAL_GPIO_Init+0x22e>
 80119f2:	687b      	ldr	r3, [r7, #4]
 80119f4:	4a1e      	ldr	r2, [pc, #120]	@ (8011a70 <HAL_GPIO_Init+0x248>)
 80119f6:	4293      	cmp	r3, r2
 80119f8:	d02b      	beq.n	8011a52 <HAL_GPIO_Init+0x22a>
 80119fa:	687b      	ldr	r3, [r7, #4]
 80119fc:	4a1d      	ldr	r2, [pc, #116]	@ (8011a74 <HAL_GPIO_Init+0x24c>)
 80119fe:	4293      	cmp	r3, r2
 8011a00:	d025      	beq.n	8011a4e <HAL_GPIO_Init+0x226>
 8011a02:	687b      	ldr	r3, [r7, #4]
 8011a04:	4a1c      	ldr	r2, [pc, #112]	@ (8011a78 <HAL_GPIO_Init+0x250>)
 8011a06:	4293      	cmp	r3, r2
 8011a08:	d01f      	beq.n	8011a4a <HAL_GPIO_Init+0x222>
 8011a0a:	687b      	ldr	r3, [r7, #4]
 8011a0c:	4a1b      	ldr	r2, [pc, #108]	@ (8011a7c <HAL_GPIO_Init+0x254>)
 8011a0e:	4293      	cmp	r3, r2
 8011a10:	d019      	beq.n	8011a46 <HAL_GPIO_Init+0x21e>
 8011a12:	687b      	ldr	r3, [r7, #4]
 8011a14:	4a1a      	ldr	r2, [pc, #104]	@ (8011a80 <HAL_GPIO_Init+0x258>)
 8011a16:	4293      	cmp	r3, r2
 8011a18:	d013      	beq.n	8011a42 <HAL_GPIO_Init+0x21a>
 8011a1a:	687b      	ldr	r3, [r7, #4]
 8011a1c:	4a19      	ldr	r2, [pc, #100]	@ (8011a84 <HAL_GPIO_Init+0x25c>)
 8011a1e:	4293      	cmp	r3, r2
 8011a20:	d00d      	beq.n	8011a3e <HAL_GPIO_Init+0x216>
 8011a22:	687b      	ldr	r3, [r7, #4]
 8011a24:	4a18      	ldr	r2, [pc, #96]	@ (8011a88 <HAL_GPIO_Init+0x260>)
 8011a26:	4293      	cmp	r3, r2
 8011a28:	d007      	beq.n	8011a3a <HAL_GPIO_Init+0x212>
 8011a2a:	687b      	ldr	r3, [r7, #4]
 8011a2c:	4a17      	ldr	r2, [pc, #92]	@ (8011a8c <HAL_GPIO_Init+0x264>)
 8011a2e:	4293      	cmp	r3, r2
 8011a30:	d101      	bne.n	8011a36 <HAL_GPIO_Init+0x20e>
 8011a32:	2309      	movs	r3, #9
 8011a34:	e02d      	b.n	8011a92 <HAL_GPIO_Init+0x26a>
 8011a36:	230a      	movs	r3, #10
 8011a38:	e02b      	b.n	8011a92 <HAL_GPIO_Init+0x26a>
 8011a3a:	2308      	movs	r3, #8
 8011a3c:	e029      	b.n	8011a92 <HAL_GPIO_Init+0x26a>
 8011a3e:	2307      	movs	r3, #7
 8011a40:	e027      	b.n	8011a92 <HAL_GPIO_Init+0x26a>
 8011a42:	2306      	movs	r3, #6
 8011a44:	e025      	b.n	8011a92 <HAL_GPIO_Init+0x26a>
 8011a46:	2305      	movs	r3, #5
 8011a48:	e023      	b.n	8011a92 <HAL_GPIO_Init+0x26a>
 8011a4a:	2304      	movs	r3, #4
 8011a4c:	e021      	b.n	8011a92 <HAL_GPIO_Init+0x26a>
 8011a4e:	2303      	movs	r3, #3
 8011a50:	e01f      	b.n	8011a92 <HAL_GPIO_Init+0x26a>
 8011a52:	2302      	movs	r3, #2
 8011a54:	e01d      	b.n	8011a92 <HAL_GPIO_Init+0x26a>
 8011a56:	2301      	movs	r3, #1
 8011a58:	e01b      	b.n	8011a92 <HAL_GPIO_Init+0x26a>
 8011a5a:	bf00      	nop
 8011a5c:	58000080 	.word	0x58000080
 8011a60:	58024400 	.word	0x58024400
 8011a64:	58000400 	.word	0x58000400
 8011a68:	58020000 	.word	0x58020000
 8011a6c:	58020400 	.word	0x58020400
 8011a70:	58020800 	.word	0x58020800
 8011a74:	58020c00 	.word	0x58020c00
 8011a78:	58021000 	.word	0x58021000
 8011a7c:	58021400 	.word	0x58021400
 8011a80:	58021800 	.word	0x58021800
 8011a84:	58021c00 	.word	0x58021c00
 8011a88:	58022000 	.word	0x58022000
 8011a8c:	58022400 	.word	0x58022400
 8011a90:	2300      	movs	r3, #0
 8011a92:	69fa      	ldr	r2, [r7, #28]
 8011a94:	f002 0203 	and.w	r2, r2, #3
 8011a98:	0092      	lsls	r2, r2, #2
 8011a9a:	4093      	lsls	r3, r2
 8011a9c:	69ba      	ldr	r2, [r7, #24]
 8011a9e:	4313      	orrs	r3, r2
 8011aa0:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8011aa2:	4938      	ldr	r1, [pc, #224]	@ (8011b84 <HAL_GPIO_Init+0x35c>)
 8011aa4:	69fb      	ldr	r3, [r7, #28]
 8011aa6:	089b      	lsrs	r3, r3, #2
 8011aa8:	3302      	adds	r3, #2
 8011aaa:	69ba      	ldr	r2, [r7, #24]
 8011aac:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8011ab0:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8011ab4:	681b      	ldr	r3, [r3, #0]
 8011ab6:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8011ab8:	693b      	ldr	r3, [r7, #16]
 8011aba:	43db      	mvns	r3, r3
 8011abc:	69ba      	ldr	r2, [r7, #24]
 8011abe:	4013      	ands	r3, r2
 8011ac0:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8011ac2:	683b      	ldr	r3, [r7, #0]
 8011ac4:	685b      	ldr	r3, [r3, #4]
 8011ac6:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8011aca:	2b00      	cmp	r3, #0
 8011acc:	d003      	beq.n	8011ad6 <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 8011ace:	69ba      	ldr	r2, [r7, #24]
 8011ad0:	693b      	ldr	r3, [r7, #16]
 8011ad2:	4313      	orrs	r3, r2
 8011ad4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 8011ad6:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8011ada:	69bb      	ldr	r3, [r7, #24]
 8011adc:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8011ade:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8011ae2:	685b      	ldr	r3, [r3, #4]
 8011ae4:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8011ae6:	693b      	ldr	r3, [r7, #16]
 8011ae8:	43db      	mvns	r3, r3
 8011aea:	69ba      	ldr	r2, [r7, #24]
 8011aec:	4013      	ands	r3, r2
 8011aee:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8011af0:	683b      	ldr	r3, [r7, #0]
 8011af2:	685b      	ldr	r3, [r3, #4]
 8011af4:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8011af8:	2b00      	cmp	r3, #0
 8011afa:	d003      	beq.n	8011b04 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8011afc:	69ba      	ldr	r2, [r7, #24]
 8011afe:	693b      	ldr	r3, [r7, #16]
 8011b00:	4313      	orrs	r3, r2
 8011b02:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 8011b04:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8011b08:	69bb      	ldr	r3, [r7, #24]
 8011b0a:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 8011b0c:	697b      	ldr	r3, [r7, #20]
 8011b0e:	685b      	ldr	r3, [r3, #4]
 8011b10:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8011b12:	693b      	ldr	r3, [r7, #16]
 8011b14:	43db      	mvns	r3, r3
 8011b16:	69ba      	ldr	r2, [r7, #24]
 8011b18:	4013      	ands	r3, r2
 8011b1a:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8011b1c:	683b      	ldr	r3, [r7, #0]
 8011b1e:	685b      	ldr	r3, [r3, #4]
 8011b20:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8011b24:	2b00      	cmp	r3, #0
 8011b26:	d003      	beq.n	8011b30 <HAL_GPIO_Init+0x308>
        {
          temp |= iocurrent;
 8011b28:	69ba      	ldr	r2, [r7, #24]
 8011b2a:	693b      	ldr	r3, [r7, #16]
 8011b2c:	4313      	orrs	r3, r2
 8011b2e:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 8011b30:	697b      	ldr	r3, [r7, #20]
 8011b32:	69ba      	ldr	r2, [r7, #24]
 8011b34:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 8011b36:	697b      	ldr	r3, [r7, #20]
 8011b38:	681b      	ldr	r3, [r3, #0]
 8011b3a:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8011b3c:	693b      	ldr	r3, [r7, #16]
 8011b3e:	43db      	mvns	r3, r3
 8011b40:	69ba      	ldr	r2, [r7, #24]
 8011b42:	4013      	ands	r3, r2
 8011b44:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8011b46:	683b      	ldr	r3, [r7, #0]
 8011b48:	685b      	ldr	r3, [r3, #4]
 8011b4a:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8011b4e:	2b00      	cmp	r3, #0
 8011b50:	d003      	beq.n	8011b5a <HAL_GPIO_Init+0x332>
        {
          temp |= iocurrent;
 8011b52:	69ba      	ldr	r2, [r7, #24]
 8011b54:	693b      	ldr	r3, [r7, #16]
 8011b56:	4313      	orrs	r3, r2
 8011b58:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 8011b5a:	697b      	ldr	r3, [r7, #20]
 8011b5c:	69ba      	ldr	r2, [r7, #24]
 8011b5e:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 8011b60:	69fb      	ldr	r3, [r7, #28]
 8011b62:	3301      	adds	r3, #1
 8011b64:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8011b66:	683b      	ldr	r3, [r7, #0]
 8011b68:	681a      	ldr	r2, [r3, #0]
 8011b6a:	69fb      	ldr	r3, [r7, #28]
 8011b6c:	fa22 f303 	lsr.w	r3, r2, r3
 8011b70:	2b00      	cmp	r3, #0
 8011b72:	f47f ae63 	bne.w	801183c <HAL_GPIO_Init+0x14>
  }
}
 8011b76:	bf00      	nop
 8011b78:	bf00      	nop
 8011b7a:	3724      	adds	r7, #36	@ 0x24
 8011b7c:	46bd      	mov	sp, r7
 8011b7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011b82:	4770      	bx	lr
 8011b84:	58000400 	.word	0x58000400

08011b88 <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin: specifies the port bit to be written.
  *          This parameter can be one of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 8011b88:	b480      	push	{r7}
 8011b8a:	b087      	sub	sp, #28
 8011b8c:	af00      	add	r7, sp, #0
 8011b8e:	6078      	str	r0, [r7, #4]
 8011b90:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8011b92:	2300      	movs	r3, #0
 8011b94:	617b      	str	r3, [r7, #20]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 8011b96:	4b75      	ldr	r3, [pc, #468]	@ (8011d6c <HAL_GPIO_DeInit+0x1e4>)
 8011b98:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* Configure the port pins */
  while ((GPIO_Pin >> position) != 0x00U)
 8011b9a:	e0d9      	b.n	8011d50 <HAL_GPIO_DeInit+0x1c8>
  {
    /* Get current io position */
    iocurrent = GPIO_Pin & (1UL << position) ;
 8011b9c:	2201      	movs	r2, #1
 8011b9e:	697b      	ldr	r3, [r7, #20]
 8011ba0:	fa02 f303 	lsl.w	r3, r2, r3
 8011ba4:	683a      	ldr	r2, [r7, #0]
 8011ba6:	4013      	ands	r3, r2
 8011ba8:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00U)
 8011baa:	68fb      	ldr	r3, [r7, #12]
 8011bac:	2b00      	cmp	r3, #0
 8011bae:	f000 80cc 	beq.w	8011d4a <HAL_GPIO_DeInit+0x1c2>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      /* Clear the External Interrupt or Event for the current IO */
      tmp = SYSCFG->EXTICR[position >> 2U];
 8011bb2:	4a6f      	ldr	r2, [pc, #444]	@ (8011d70 <HAL_GPIO_DeInit+0x1e8>)
 8011bb4:	697b      	ldr	r3, [r7, #20]
 8011bb6:	089b      	lsrs	r3, r3, #2
 8011bb8:	3302      	adds	r3, #2
 8011bba:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8011bbe:	60bb      	str	r3, [r7, #8]
      tmp &= (0x0FUL << (4U * (position & 0x03U)));
 8011bc0:	697b      	ldr	r3, [r7, #20]
 8011bc2:	f003 0303 	and.w	r3, r3, #3
 8011bc6:	009b      	lsls	r3, r3, #2
 8011bc8:	220f      	movs	r2, #15
 8011bca:	fa02 f303 	lsl.w	r3, r2, r3
 8011bce:	68ba      	ldr	r2, [r7, #8]
 8011bd0:	4013      	ands	r3, r2
 8011bd2:	60bb      	str	r3, [r7, #8]
      if (tmp == (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U))))
 8011bd4:	687b      	ldr	r3, [r7, #4]
 8011bd6:	4a67      	ldr	r2, [pc, #412]	@ (8011d74 <HAL_GPIO_DeInit+0x1ec>)
 8011bd8:	4293      	cmp	r3, r2
 8011bda:	d037      	beq.n	8011c4c <HAL_GPIO_DeInit+0xc4>
 8011bdc:	687b      	ldr	r3, [r7, #4]
 8011bde:	4a66      	ldr	r2, [pc, #408]	@ (8011d78 <HAL_GPIO_DeInit+0x1f0>)
 8011be0:	4293      	cmp	r3, r2
 8011be2:	d031      	beq.n	8011c48 <HAL_GPIO_DeInit+0xc0>
 8011be4:	687b      	ldr	r3, [r7, #4]
 8011be6:	4a65      	ldr	r2, [pc, #404]	@ (8011d7c <HAL_GPIO_DeInit+0x1f4>)
 8011be8:	4293      	cmp	r3, r2
 8011bea:	d02b      	beq.n	8011c44 <HAL_GPIO_DeInit+0xbc>
 8011bec:	687b      	ldr	r3, [r7, #4]
 8011bee:	4a64      	ldr	r2, [pc, #400]	@ (8011d80 <HAL_GPIO_DeInit+0x1f8>)
 8011bf0:	4293      	cmp	r3, r2
 8011bf2:	d025      	beq.n	8011c40 <HAL_GPIO_DeInit+0xb8>
 8011bf4:	687b      	ldr	r3, [r7, #4]
 8011bf6:	4a63      	ldr	r2, [pc, #396]	@ (8011d84 <HAL_GPIO_DeInit+0x1fc>)
 8011bf8:	4293      	cmp	r3, r2
 8011bfa:	d01f      	beq.n	8011c3c <HAL_GPIO_DeInit+0xb4>
 8011bfc:	687b      	ldr	r3, [r7, #4]
 8011bfe:	4a62      	ldr	r2, [pc, #392]	@ (8011d88 <HAL_GPIO_DeInit+0x200>)
 8011c00:	4293      	cmp	r3, r2
 8011c02:	d019      	beq.n	8011c38 <HAL_GPIO_DeInit+0xb0>
 8011c04:	687b      	ldr	r3, [r7, #4]
 8011c06:	4a61      	ldr	r2, [pc, #388]	@ (8011d8c <HAL_GPIO_DeInit+0x204>)
 8011c08:	4293      	cmp	r3, r2
 8011c0a:	d013      	beq.n	8011c34 <HAL_GPIO_DeInit+0xac>
 8011c0c:	687b      	ldr	r3, [r7, #4]
 8011c0e:	4a60      	ldr	r2, [pc, #384]	@ (8011d90 <HAL_GPIO_DeInit+0x208>)
 8011c10:	4293      	cmp	r3, r2
 8011c12:	d00d      	beq.n	8011c30 <HAL_GPIO_DeInit+0xa8>
 8011c14:	687b      	ldr	r3, [r7, #4]
 8011c16:	4a5f      	ldr	r2, [pc, #380]	@ (8011d94 <HAL_GPIO_DeInit+0x20c>)
 8011c18:	4293      	cmp	r3, r2
 8011c1a:	d007      	beq.n	8011c2c <HAL_GPIO_DeInit+0xa4>
 8011c1c:	687b      	ldr	r3, [r7, #4]
 8011c1e:	4a5e      	ldr	r2, [pc, #376]	@ (8011d98 <HAL_GPIO_DeInit+0x210>)
 8011c20:	4293      	cmp	r3, r2
 8011c22:	d101      	bne.n	8011c28 <HAL_GPIO_DeInit+0xa0>
 8011c24:	2309      	movs	r3, #9
 8011c26:	e012      	b.n	8011c4e <HAL_GPIO_DeInit+0xc6>
 8011c28:	230a      	movs	r3, #10
 8011c2a:	e010      	b.n	8011c4e <HAL_GPIO_DeInit+0xc6>
 8011c2c:	2308      	movs	r3, #8
 8011c2e:	e00e      	b.n	8011c4e <HAL_GPIO_DeInit+0xc6>
 8011c30:	2307      	movs	r3, #7
 8011c32:	e00c      	b.n	8011c4e <HAL_GPIO_DeInit+0xc6>
 8011c34:	2306      	movs	r3, #6
 8011c36:	e00a      	b.n	8011c4e <HAL_GPIO_DeInit+0xc6>
 8011c38:	2305      	movs	r3, #5
 8011c3a:	e008      	b.n	8011c4e <HAL_GPIO_DeInit+0xc6>
 8011c3c:	2304      	movs	r3, #4
 8011c3e:	e006      	b.n	8011c4e <HAL_GPIO_DeInit+0xc6>
 8011c40:	2303      	movs	r3, #3
 8011c42:	e004      	b.n	8011c4e <HAL_GPIO_DeInit+0xc6>
 8011c44:	2302      	movs	r3, #2
 8011c46:	e002      	b.n	8011c4e <HAL_GPIO_DeInit+0xc6>
 8011c48:	2301      	movs	r3, #1
 8011c4a:	e000      	b.n	8011c4e <HAL_GPIO_DeInit+0xc6>
 8011c4c:	2300      	movs	r3, #0
 8011c4e:	697a      	ldr	r2, [r7, #20]
 8011c50:	f002 0203 	and.w	r2, r2, #3
 8011c54:	0092      	lsls	r2, r2, #2
 8011c56:	4093      	lsls	r3, r2
 8011c58:	68ba      	ldr	r2, [r7, #8]
 8011c5a:	429a      	cmp	r2, r3
 8011c5c:	d136      	bne.n	8011ccc <HAL_GPIO_DeInit+0x144>
      {
        /* Clear EXTI line configuration for Current CPU */
        EXTI_CurrentCPU->IMR1 &= ~(iocurrent);
 8011c5e:	693b      	ldr	r3, [r7, #16]
 8011c60:	681a      	ldr	r2, [r3, #0]
 8011c62:	68fb      	ldr	r3, [r7, #12]
 8011c64:	43db      	mvns	r3, r3
 8011c66:	401a      	ands	r2, r3
 8011c68:	693b      	ldr	r3, [r7, #16]
 8011c6a:	601a      	str	r2, [r3, #0]
        EXTI_CurrentCPU->EMR1 &= ~(iocurrent);
 8011c6c:	693b      	ldr	r3, [r7, #16]
 8011c6e:	685a      	ldr	r2, [r3, #4]
 8011c70:	68fb      	ldr	r3, [r7, #12]
 8011c72:	43db      	mvns	r3, r3
 8011c74:	401a      	ands	r2, r3
 8011c76:	693b      	ldr	r3, [r7, #16]
 8011c78:	605a      	str	r2, [r3, #4]

        /* Clear Rising Falling edge configuration */
        EXTI->FTSR1 &= ~(iocurrent);
 8011c7a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8011c7e:	685a      	ldr	r2, [r3, #4]
 8011c80:	68fb      	ldr	r3, [r7, #12]
 8011c82:	43db      	mvns	r3, r3
 8011c84:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8011c88:	4013      	ands	r3, r2
 8011c8a:	604b      	str	r3, [r1, #4]
        EXTI->RTSR1 &= ~(iocurrent);
 8011c8c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8011c90:	681a      	ldr	r2, [r3, #0]
 8011c92:	68fb      	ldr	r3, [r7, #12]
 8011c94:	43db      	mvns	r3, r3
 8011c96:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8011c9a:	4013      	ands	r3, r2
 8011c9c:	600b      	str	r3, [r1, #0]

        tmp = 0x0FUL << (4U * (position & 0x03U));
 8011c9e:	697b      	ldr	r3, [r7, #20]
 8011ca0:	f003 0303 	and.w	r3, r3, #3
 8011ca4:	009b      	lsls	r3, r3, #2
 8011ca6:	220f      	movs	r2, #15
 8011ca8:	fa02 f303 	lsl.w	r3, r2, r3
 8011cac:	60bb      	str	r3, [r7, #8]
        SYSCFG->EXTICR[position >> 2U] &= ~tmp;
 8011cae:	4a30      	ldr	r2, [pc, #192]	@ (8011d70 <HAL_GPIO_DeInit+0x1e8>)
 8011cb0:	697b      	ldr	r3, [r7, #20]
 8011cb2:	089b      	lsrs	r3, r3, #2
 8011cb4:	3302      	adds	r3, #2
 8011cb6:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 8011cba:	68bb      	ldr	r3, [r7, #8]
 8011cbc:	43da      	mvns	r2, r3
 8011cbe:	482c      	ldr	r0, [pc, #176]	@ (8011d70 <HAL_GPIO_DeInit+0x1e8>)
 8011cc0:	697b      	ldr	r3, [r7, #20]
 8011cc2:	089b      	lsrs	r3, r3, #2
 8011cc4:	400a      	ands	r2, r1
 8011cc6:	3302      	adds	r3, #2
 8011cc8:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
      }

      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO in Analog Mode */
      GPIOx->MODER |= (GPIO_MODER_MODE0 << (position * 2U));
 8011ccc:	687b      	ldr	r3, [r7, #4]
 8011cce:	681a      	ldr	r2, [r3, #0]
 8011cd0:	697b      	ldr	r3, [r7, #20]
 8011cd2:	005b      	lsls	r3, r3, #1
 8011cd4:	2103      	movs	r1, #3
 8011cd6:	fa01 f303 	lsl.w	r3, r1, r3
 8011cda:	431a      	orrs	r2, r3
 8011cdc:	687b      	ldr	r3, [r7, #4]
 8011cde:	601a      	str	r2, [r3, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3U] &= ~(0xFU << ((position & 0x07U) * 4U)) ;
 8011ce0:	697b      	ldr	r3, [r7, #20]
 8011ce2:	08da      	lsrs	r2, r3, #3
 8011ce4:	687b      	ldr	r3, [r7, #4]
 8011ce6:	3208      	adds	r2, #8
 8011ce8:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8011cec:	697b      	ldr	r3, [r7, #20]
 8011cee:	f003 0307 	and.w	r3, r3, #7
 8011cf2:	009b      	lsls	r3, r3, #2
 8011cf4:	220f      	movs	r2, #15
 8011cf6:	fa02 f303 	lsl.w	r3, r2, r3
 8011cfa:	43db      	mvns	r3, r3
 8011cfc:	697a      	ldr	r2, [r7, #20]
 8011cfe:	08d2      	lsrs	r2, r2, #3
 8011d00:	4019      	ands	r1, r3
 8011d02:	687b      	ldr	r3, [r7, #4]
 8011d04:	3208      	adds	r2, #8
 8011d06:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8011d0a:	687b      	ldr	r3, [r7, #4]
 8011d0c:	68da      	ldr	r2, [r3, #12]
 8011d0e:	697b      	ldr	r3, [r7, #20]
 8011d10:	005b      	lsls	r3, r3, #1
 8011d12:	2103      	movs	r1, #3
 8011d14:	fa01 f303 	lsl.w	r3, r1, r3
 8011d18:	43db      	mvns	r3, r3
 8011d1a:	401a      	ands	r2, r3
 8011d1c:	687b      	ldr	r3, [r7, #4]
 8011d1e:	60da      	str	r2, [r3, #12]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT0 << position) ;
 8011d20:	687b      	ldr	r3, [r7, #4]
 8011d22:	685a      	ldr	r2, [r3, #4]
 8011d24:	2101      	movs	r1, #1
 8011d26:	697b      	ldr	r3, [r7, #20]
 8011d28:	fa01 f303 	lsl.w	r3, r1, r3
 8011d2c:	43db      	mvns	r3, r3
 8011d2e:	401a      	ands	r2, r3
 8011d30:	687b      	ldr	r3, [r7, #4]
 8011d32:	605a      	str	r2, [r3, #4]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8011d34:	687b      	ldr	r3, [r7, #4]
 8011d36:	689a      	ldr	r2, [r3, #8]
 8011d38:	697b      	ldr	r3, [r7, #20]
 8011d3a:	005b      	lsls	r3, r3, #1
 8011d3c:	2103      	movs	r1, #3
 8011d3e:	fa01 f303 	lsl.w	r3, r1, r3
 8011d42:	43db      	mvns	r3, r3
 8011d44:	401a      	ands	r2, r3
 8011d46:	687b      	ldr	r3, [r7, #4]
 8011d48:	609a      	str	r2, [r3, #8]
    }

    position++;
 8011d4a:	697b      	ldr	r3, [r7, #20]
 8011d4c:	3301      	adds	r3, #1
 8011d4e:	617b      	str	r3, [r7, #20]
  while ((GPIO_Pin >> position) != 0x00U)
 8011d50:	683a      	ldr	r2, [r7, #0]
 8011d52:	697b      	ldr	r3, [r7, #20]
 8011d54:	fa22 f303 	lsr.w	r3, r2, r3
 8011d58:	2b00      	cmp	r3, #0
 8011d5a:	f47f af1f 	bne.w	8011b9c <HAL_GPIO_DeInit+0x14>
  }
}
 8011d5e:	bf00      	nop
 8011d60:	bf00      	nop
 8011d62:	371c      	adds	r7, #28
 8011d64:	46bd      	mov	sp, r7
 8011d66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011d6a:	4770      	bx	lr
 8011d6c:	58000080 	.word	0x58000080
 8011d70:	58000400 	.word	0x58000400
 8011d74:	58020000 	.word	0x58020000
 8011d78:	58020400 	.word	0x58020400
 8011d7c:	58020800 	.word	0x58020800
 8011d80:	58020c00 	.word	0x58020c00
 8011d84:	58021000 	.word	0x58021000
 8011d88:	58021400 	.word	0x58021400
 8011d8c:	58021800 	.word	0x58021800
 8011d90:	58021c00 	.word	0x58021c00
 8011d94:	58022000 	.word	0x58022000
 8011d98:	58022400 	.word	0x58022400

08011d9c <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8011d9c:	b480      	push	{r7}
 8011d9e:	b085      	sub	sp, #20
 8011da0:	af00      	add	r7, sp, #0
 8011da2:	6078      	str	r0, [r7, #4]
 8011da4:	460b      	mov	r3, r1
 8011da6:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00U)
 8011da8:	687b      	ldr	r3, [r7, #4]
 8011daa:	691a      	ldr	r2, [r3, #16]
 8011dac:	887b      	ldrh	r3, [r7, #2]
 8011dae:	4013      	ands	r3, r2
 8011db0:	2b00      	cmp	r3, #0
 8011db2:	d002      	beq.n	8011dba <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8011db4:	2301      	movs	r3, #1
 8011db6:	73fb      	strb	r3, [r7, #15]
 8011db8:	e001      	b.n	8011dbe <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8011dba:	2300      	movs	r3, #0
 8011dbc:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8011dbe:	7bfb      	ldrb	r3, [r7, #15]
}
 8011dc0:	4618      	mov	r0, r3
 8011dc2:	3714      	adds	r7, #20
 8011dc4:	46bd      	mov	sp, r7
 8011dc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011dca:	4770      	bx	lr

08011dcc <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8011dcc:	b480      	push	{r7}
 8011dce:	b083      	sub	sp, #12
 8011dd0:	af00      	add	r7, sp, #0
 8011dd2:	6078      	str	r0, [r7, #4]
 8011dd4:	460b      	mov	r3, r1
 8011dd6:	807b      	strh	r3, [r7, #2]
 8011dd8:	4613      	mov	r3, r2
 8011dda:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8011ddc:	787b      	ldrb	r3, [r7, #1]
 8011dde:	2b00      	cmp	r3, #0
 8011de0:	d003      	beq.n	8011dea <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8011de2:	887a      	ldrh	r2, [r7, #2]
 8011de4:	687b      	ldr	r3, [r7, #4]
 8011de6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 8011de8:	e003      	b.n	8011df2 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 8011dea:	887b      	ldrh	r3, [r7, #2]
 8011dec:	041a      	lsls	r2, r3, #16
 8011dee:	687b      	ldr	r3, [r7, #4]
 8011df0:	619a      	str	r2, [r3, #24]
}
 8011df2:	bf00      	nop
 8011df4:	370c      	adds	r7, #12
 8011df6:	46bd      	mov	sp, r7
 8011df8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011dfc:	4770      	bx	lr
	...

08011e00 <HAL_HSEM_FastTake>:
  * @brief  Fast Take a semaphore with 1 Step mode.
  * @param  SemID: semaphore ID from 0 to 31
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HSEM_FastTake(uint32_t SemID)
{
 8011e00:	b480      	push	{r7}
 8011e02:	b083      	sub	sp, #12
 8011e04:	af00      	add	r7, sp, #0
 8011e06:	6078      	str	r0, [r7, #4]
    /*take success when MasterID match and take bit set*/
    return HAL_OK;
  }
#else  
  /* Read the RLR register to take the semaphore */
  if (HSEM->RLR[SemID] == (HSEM_CR_COREID_CURRENT | HSEM_RLR_LOCK))
 8011e08:	4a08      	ldr	r2, [pc, #32]	@ (8011e2c <HAL_HSEM_FastTake+0x2c>)
 8011e0a:	687b      	ldr	r3, [r7, #4]
 8011e0c:	3320      	adds	r3, #32
 8011e0e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8011e12:	4a07      	ldr	r2, [pc, #28]	@ (8011e30 <HAL_HSEM_FastTake+0x30>)
 8011e14:	4293      	cmp	r3, r2
 8011e16:	d101      	bne.n	8011e1c <HAL_HSEM_FastTake+0x1c>
  {
    /*take success when MasterID match and take bit set*/
    return HAL_OK;
 8011e18:	2300      	movs	r3, #0
 8011e1a:	e000      	b.n	8011e1e <HAL_HSEM_FastTake+0x1e>
  }
#endif

  /* Semaphore take fails */
  return HAL_ERROR;
 8011e1c:	2301      	movs	r3, #1
}
 8011e1e:	4618      	mov	r0, r3
 8011e20:	370c      	adds	r7, #12
 8011e22:	46bd      	mov	sp, r7
 8011e24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011e28:	4770      	bx	lr
 8011e2a:	bf00      	nop
 8011e2c:	58026400 	.word	0x58026400
 8011e30:	80000300 	.word	0x80000300

08011e34 <HAL_HSEM_Release>:
  * @param  SemID: semaphore ID from 0 to 31
  * @param  ProcessID: Process ID from 0 to 255
  * @retval None
  */
void  HAL_HSEM_Release(uint32_t SemID, uint32_t ProcessID)
{
 8011e34:	b480      	push	{r7}
 8011e36:	b083      	sub	sp, #12
 8011e38:	af00      	add	r7, sp, #0
 8011e3a:	6078      	str	r0, [r7, #4]
 8011e3c:	6039      	str	r1, [r7, #0]

  /* Clear the semaphore by writing to the R register : the MasterID , the processID and take bit = 0  */
#if  USE_MULTI_CORE_SHARED_CODE != 0U
  HSEM->R[SemID] = (ProcessID | ((HAL_GetCurrentCPUID() << POSITION_VAL(HSEM_R_MASTERID)) & HSEM_R_MASTERID));
#else
  HSEM->R[SemID] = (ProcessID | HSEM_CR_COREID_CURRENT);
 8011e3e:	4906      	ldr	r1, [pc, #24]	@ (8011e58 <HAL_HSEM_Release+0x24>)
 8011e40:	683b      	ldr	r3, [r7, #0]
 8011e42:	f443 7240 	orr.w	r2, r3, #768	@ 0x300
 8011e46:	687b      	ldr	r3, [r7, #4]
 8011e48:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
#endif

}
 8011e4c:	bf00      	nop
 8011e4e:	370c      	adds	r7, #12
 8011e50:	46bd      	mov	sp, r7
 8011e52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011e56:	4770      	bx	lr
 8011e58:	58026400 	.word	0x58026400

08011e5c <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8011e5c:	b580      	push	{r7, lr}
 8011e5e:	b082      	sub	sp, #8
 8011e60:	af00      	add	r7, sp, #0
 8011e62:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8011e64:	687b      	ldr	r3, [r7, #4]
 8011e66:	2b00      	cmp	r3, #0
 8011e68:	d101      	bne.n	8011e6e <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8011e6a:	2301      	movs	r3, #1
 8011e6c:	e07f      	b.n	8011f6e <HAL_I2C_Init+0x112>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8011e6e:	687b      	ldr	r3, [r7, #4]
 8011e70:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8011e74:	b2db      	uxtb	r3, r3
 8011e76:	2b00      	cmp	r3, #0
 8011e78:	d106      	bne.n	8011e88 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8011e7a:	687b      	ldr	r3, [r7, #4]
 8011e7c:	2200      	movs	r2, #0
 8011e7e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8011e82:	6878      	ldr	r0, [r7, #4]
 8011e84:	f000 f8a9 	bl	8011fda <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8011e88:	687b      	ldr	r3, [r7, #4]
 8011e8a:	2224      	movs	r2, #36	@ 0x24
 8011e8c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8011e90:	687b      	ldr	r3, [r7, #4]
 8011e92:	681b      	ldr	r3, [r3, #0]
 8011e94:	681a      	ldr	r2, [r3, #0]
 8011e96:	687b      	ldr	r3, [r7, #4]
 8011e98:	681b      	ldr	r3, [r3, #0]
 8011e9a:	f022 0201 	bic.w	r2, r2, #1
 8011e9e:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8011ea0:	687b      	ldr	r3, [r7, #4]
 8011ea2:	685a      	ldr	r2, [r3, #4]
 8011ea4:	687b      	ldr	r3, [r7, #4]
 8011ea6:	681b      	ldr	r3, [r3, #0]
 8011ea8:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8011eac:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8011eae:	687b      	ldr	r3, [r7, #4]
 8011eb0:	681b      	ldr	r3, [r3, #0]
 8011eb2:	689a      	ldr	r2, [r3, #8]
 8011eb4:	687b      	ldr	r3, [r7, #4]
 8011eb6:	681b      	ldr	r3, [r3, #0]
 8011eb8:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8011ebc:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8011ebe:	687b      	ldr	r3, [r7, #4]
 8011ec0:	68db      	ldr	r3, [r3, #12]
 8011ec2:	2b01      	cmp	r3, #1
 8011ec4:	d107      	bne.n	8011ed6 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8011ec6:	687b      	ldr	r3, [r7, #4]
 8011ec8:	689a      	ldr	r2, [r3, #8]
 8011eca:	687b      	ldr	r3, [r7, #4]
 8011ecc:	681b      	ldr	r3, [r3, #0]
 8011ece:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8011ed2:	609a      	str	r2, [r3, #8]
 8011ed4:	e006      	b.n	8011ee4 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8011ed6:	687b      	ldr	r3, [r7, #4]
 8011ed8:	689a      	ldr	r2, [r3, #8]
 8011eda:	687b      	ldr	r3, [r7, #4]
 8011edc:	681b      	ldr	r3, [r3, #0]
 8011ede:	f442 4204 	orr.w	r2, r2, #33792	@ 0x8400
 8011ee2:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8011ee4:	687b      	ldr	r3, [r7, #4]
 8011ee6:	68db      	ldr	r3, [r3, #12]
 8011ee8:	2b02      	cmp	r3, #2
 8011eea:	d104      	bne.n	8011ef6 <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8011eec:	687b      	ldr	r3, [r7, #4]
 8011eee:	681b      	ldr	r3, [r3, #0]
 8011ef0:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8011ef4:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8011ef6:	687b      	ldr	r3, [r7, #4]
 8011ef8:	681b      	ldr	r3, [r3, #0]
 8011efa:	6859      	ldr	r1, [r3, #4]
 8011efc:	687b      	ldr	r3, [r7, #4]
 8011efe:	681a      	ldr	r2, [r3, #0]
 8011f00:	4b1d      	ldr	r3, [pc, #116]	@ (8011f78 <HAL_I2C_Init+0x11c>)
 8011f02:	430b      	orrs	r3, r1
 8011f04:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8011f06:	687b      	ldr	r3, [r7, #4]
 8011f08:	681b      	ldr	r3, [r3, #0]
 8011f0a:	68da      	ldr	r2, [r3, #12]
 8011f0c:	687b      	ldr	r3, [r7, #4]
 8011f0e:	681b      	ldr	r3, [r3, #0]
 8011f10:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8011f14:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8011f16:	687b      	ldr	r3, [r7, #4]
 8011f18:	691a      	ldr	r2, [r3, #16]
 8011f1a:	687b      	ldr	r3, [r7, #4]
 8011f1c:	695b      	ldr	r3, [r3, #20]
 8011f1e:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8011f22:	687b      	ldr	r3, [r7, #4]
 8011f24:	699b      	ldr	r3, [r3, #24]
 8011f26:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8011f28:	687b      	ldr	r3, [r7, #4]
 8011f2a:	681b      	ldr	r3, [r3, #0]
 8011f2c:	430a      	orrs	r2, r1
 8011f2e:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8011f30:	687b      	ldr	r3, [r7, #4]
 8011f32:	69d9      	ldr	r1, [r3, #28]
 8011f34:	687b      	ldr	r3, [r7, #4]
 8011f36:	6a1a      	ldr	r2, [r3, #32]
 8011f38:	687b      	ldr	r3, [r7, #4]
 8011f3a:	681b      	ldr	r3, [r3, #0]
 8011f3c:	430a      	orrs	r2, r1
 8011f3e:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8011f40:	687b      	ldr	r3, [r7, #4]
 8011f42:	681b      	ldr	r3, [r3, #0]
 8011f44:	681a      	ldr	r2, [r3, #0]
 8011f46:	687b      	ldr	r3, [r7, #4]
 8011f48:	681b      	ldr	r3, [r3, #0]
 8011f4a:	f042 0201 	orr.w	r2, r2, #1
 8011f4e:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8011f50:	687b      	ldr	r3, [r7, #4]
 8011f52:	2200      	movs	r2, #0
 8011f54:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8011f56:	687b      	ldr	r3, [r7, #4]
 8011f58:	2220      	movs	r2, #32
 8011f5a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8011f5e:	687b      	ldr	r3, [r7, #4]
 8011f60:	2200      	movs	r2, #0
 8011f62:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8011f64:	687b      	ldr	r3, [r7, #4]
 8011f66:	2200      	movs	r2, #0
 8011f68:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  return HAL_OK;
 8011f6c:	2300      	movs	r3, #0
}
 8011f6e:	4618      	mov	r0, r3
 8011f70:	3708      	adds	r7, #8
 8011f72:	46bd      	mov	sp, r7
 8011f74:	bd80      	pop	{r7, pc}
 8011f76:	bf00      	nop
 8011f78:	02008000 	.word	0x02008000

08011f7c <HAL_I2C_DeInit>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_DeInit(I2C_HandleTypeDef *hi2c)
{
 8011f7c:	b580      	push	{r7, lr}
 8011f7e:	b082      	sub	sp, #8
 8011f80:	af00      	add	r7, sp, #0
 8011f82:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8011f84:	687b      	ldr	r3, [r7, #4]
 8011f86:	2b00      	cmp	r3, #0
 8011f88:	d101      	bne.n	8011f8e <HAL_I2C_DeInit+0x12>
  {
    return HAL_ERROR;
 8011f8a:	2301      	movs	r3, #1
 8011f8c:	e021      	b.n	8011fd2 <HAL_I2C_DeInit+0x56>
  }

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));

  hi2c->State = HAL_I2C_STATE_BUSY;
 8011f8e:	687b      	ldr	r3, [r7, #4]
 8011f90:	2224      	movs	r2, #36	@ 0x24
 8011f92:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the I2C Peripheral Clock */
  __HAL_I2C_DISABLE(hi2c);
 8011f96:	687b      	ldr	r3, [r7, #4]
 8011f98:	681b      	ldr	r3, [r3, #0]
 8011f9a:	681a      	ldr	r2, [r3, #0]
 8011f9c:	687b      	ldr	r3, [r7, #4]
 8011f9e:	681b      	ldr	r3, [r3, #0]
 8011fa0:	f022 0201 	bic.w	r2, r2, #1
 8011fa4:	601a      	str	r2, [r3, #0]

  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  hi2c->MspDeInitCallback(hi2c);
#else
  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  HAL_I2C_MspDeInit(hi2c);
 8011fa6:	6878      	ldr	r0, [r7, #4]
 8011fa8:	f000 f821 	bl	8011fee <HAL_I2C_MspDeInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8011fac:	687b      	ldr	r3, [r7, #4]
 8011fae:	2200      	movs	r2, #0
 8011fb0:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_RESET;
 8011fb2:	687b      	ldr	r3, [r7, #4]
 8011fb4:	2200      	movs	r2, #0
 8011fb6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8011fba:	687b      	ldr	r3, [r7, #4]
 8011fbc:	2200      	movs	r2, #0
 8011fbe:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8011fc0:	687b      	ldr	r3, [r7, #4]
 8011fc2:	2200      	movs	r2, #0
 8011fc4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  /* Release Lock */
  __HAL_UNLOCK(hi2c);
 8011fc8:	687b      	ldr	r3, [r7, #4]
 8011fca:	2200      	movs	r2, #0
 8011fcc:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  return HAL_OK;
 8011fd0:	2300      	movs	r3, #0
}
 8011fd2:	4618      	mov	r0, r3
 8011fd4:	3708      	adds	r7, #8
 8011fd6:	46bd      	mov	sp, r7
 8011fd8:	bd80      	pop	{r7, pc}

08011fda <HAL_I2C_MspInit>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MspInit(I2C_HandleTypeDef *hi2c)
{
 8011fda:	b480      	push	{r7}
 8011fdc:	b083      	sub	sp, #12
 8011fde:	af00      	add	r7, sp, #0
 8011fe0:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MspInit could be implemented in the user file
   */
}
 8011fe2:	bf00      	nop
 8011fe4:	370c      	adds	r7, #12
 8011fe6:	46bd      	mov	sp, r7
 8011fe8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011fec:	4770      	bx	lr

08011fee <HAL_I2C_MspDeInit>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MspDeInit(I2C_HandleTypeDef *hi2c)
{
 8011fee:	b480      	push	{r7}
 8011ff0:	b083      	sub	sp, #12
 8011ff2:	af00      	add	r7, sp, #0
 8011ff4:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MspDeInit could be implemented in the user file
   */
}
 8011ff6:	bf00      	nop
 8011ff8:	370c      	adds	r7, #12
 8011ffa:	46bd      	mov	sp, r7
 8011ffc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012000:	4770      	bx	lr
	...

08012004 <HAL_I2C_Mem_Write>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                    uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8012004:	b580      	push	{r7, lr}
 8012006:	b088      	sub	sp, #32
 8012008:	af02      	add	r7, sp, #8
 801200a:	60f8      	str	r0, [r7, #12]
 801200c:	4608      	mov	r0, r1
 801200e:	4611      	mov	r1, r2
 8012010:	461a      	mov	r2, r3
 8012012:	4603      	mov	r3, r0
 8012014:	817b      	strh	r3, [r7, #10]
 8012016:	460b      	mov	r3, r1
 8012018:	813b      	strh	r3, [r7, #8]
 801201a:	4613      	mov	r3, r2
 801201c:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 801201e:	68fb      	ldr	r3, [r7, #12]
 8012020:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8012024:	b2db      	uxtb	r3, r3
 8012026:	2b20      	cmp	r3, #32
 8012028:	f040 80f9 	bne.w	801221e <HAL_I2C_Mem_Write+0x21a>
  {
    if ((pData == NULL) || (Size == 0U))
 801202c:	6a3b      	ldr	r3, [r7, #32]
 801202e:	2b00      	cmp	r3, #0
 8012030:	d002      	beq.n	8012038 <HAL_I2C_Mem_Write+0x34>
 8012032:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8012034:	2b00      	cmp	r3, #0
 8012036:	d105      	bne.n	8012044 <HAL_I2C_Mem_Write+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8012038:	68fb      	ldr	r3, [r7, #12]
 801203a:	f44f 7200 	mov.w	r2, #512	@ 0x200
 801203e:	645a      	str	r2, [r3, #68]	@ 0x44
      return  HAL_ERROR;
 8012040:	2301      	movs	r3, #1
 8012042:	e0ed      	b.n	8012220 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8012044:	68fb      	ldr	r3, [r7, #12]
 8012046:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 801204a:	2b01      	cmp	r3, #1
 801204c:	d101      	bne.n	8012052 <HAL_I2C_Mem_Write+0x4e>
 801204e:	2302      	movs	r3, #2
 8012050:	e0e6      	b.n	8012220 <HAL_I2C_Mem_Write+0x21c>
 8012052:	68fb      	ldr	r3, [r7, #12]
 8012054:	2201      	movs	r2, #1
 8012056:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 801205a:	f7fe ffd9 	bl	8011010 <HAL_GetTick>
 801205e:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8012060:	697b      	ldr	r3, [r7, #20]
 8012062:	9300      	str	r3, [sp, #0]
 8012064:	2319      	movs	r3, #25
 8012066:	2201      	movs	r2, #1
 8012068:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 801206c:	68f8      	ldr	r0, [r7, #12]
 801206e:	f000 fadd 	bl	801262c <I2C_WaitOnFlagUntilTimeout>
 8012072:	4603      	mov	r3, r0
 8012074:	2b00      	cmp	r3, #0
 8012076:	d001      	beq.n	801207c <HAL_I2C_Mem_Write+0x78>
    {
      return HAL_ERROR;
 8012078:	2301      	movs	r3, #1
 801207a:	e0d1      	b.n	8012220 <HAL_I2C_Mem_Write+0x21c>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 801207c:	68fb      	ldr	r3, [r7, #12]
 801207e:	2221      	movs	r2, #33	@ 0x21
 8012080:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8012084:	68fb      	ldr	r3, [r7, #12]
 8012086:	2240      	movs	r2, #64	@ 0x40
 8012088:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 801208c:	68fb      	ldr	r3, [r7, #12]
 801208e:	2200      	movs	r2, #0
 8012090:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8012092:	68fb      	ldr	r3, [r7, #12]
 8012094:	6a3a      	ldr	r2, [r7, #32]
 8012096:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 8012098:	68fb      	ldr	r3, [r7, #12]
 801209a:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 801209c:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 801209e:	68fb      	ldr	r3, [r7, #12]
 80120a0:	2200      	movs	r2, #0
 80120a2:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80120a4:	88f8      	ldrh	r0, [r7, #6]
 80120a6:	893a      	ldrh	r2, [r7, #8]
 80120a8:	8979      	ldrh	r1, [r7, #10]
 80120aa:	697b      	ldr	r3, [r7, #20]
 80120ac:	9301      	str	r3, [sp, #4]
 80120ae:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80120b0:	9300      	str	r3, [sp, #0]
 80120b2:	4603      	mov	r3, r0
 80120b4:	68f8      	ldr	r0, [r7, #12]
 80120b6:	f000 f9ed 	bl	8012494 <I2C_RequestMemoryWrite>
 80120ba:	4603      	mov	r3, r0
 80120bc:	2b00      	cmp	r3, #0
 80120be:	d005      	beq.n	80120cc <HAL_I2C_Mem_Write+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80120c0:	68fb      	ldr	r3, [r7, #12]
 80120c2:	2200      	movs	r2, #0
 80120c4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
      return HAL_ERROR;
 80120c8:	2301      	movs	r3, #1
 80120ca:	e0a9      	b.n	8012220 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80120cc:	68fb      	ldr	r3, [r7, #12]
 80120ce:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80120d0:	b29b      	uxth	r3, r3
 80120d2:	2bff      	cmp	r3, #255	@ 0xff
 80120d4:	d90e      	bls.n	80120f4 <HAL_I2C_Mem_Write+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 80120d6:	68fb      	ldr	r3, [r7, #12]
 80120d8:	22ff      	movs	r2, #255	@ 0xff
 80120da:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 80120dc:	68fb      	ldr	r3, [r7, #12]
 80120de:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80120e0:	b2da      	uxtb	r2, r3
 80120e2:	8979      	ldrh	r1, [r7, #10]
 80120e4:	2300      	movs	r3, #0
 80120e6:	9300      	str	r3, [sp, #0]
 80120e8:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 80120ec:	68f8      	ldr	r0, [r7, #12]
 80120ee:	f000 fc57 	bl	80129a0 <I2C_TransferConfig>
 80120f2:	e00f      	b.n	8012114 <HAL_I2C_Mem_Write+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 80120f4:	68fb      	ldr	r3, [r7, #12]
 80120f6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80120f8:	b29a      	uxth	r2, r3
 80120fa:	68fb      	ldr	r3, [r7, #12]
 80120fc:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 80120fe:	68fb      	ldr	r3, [r7, #12]
 8012100:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8012102:	b2da      	uxtb	r2, r3
 8012104:	8979      	ldrh	r1, [r7, #10]
 8012106:	2300      	movs	r3, #0
 8012108:	9300      	str	r3, [sp, #0]
 801210a:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 801210e:	68f8      	ldr	r0, [r7, #12]
 8012110:	f000 fc46 	bl	80129a0 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8012114:	697a      	ldr	r2, [r7, #20]
 8012116:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8012118:	68f8      	ldr	r0, [r7, #12]
 801211a:	f000 fad6 	bl	80126ca <I2C_WaitOnTXISFlagUntilTimeout>
 801211e:	4603      	mov	r3, r0
 8012120:	2b00      	cmp	r3, #0
 8012122:	d001      	beq.n	8012128 <HAL_I2C_Mem_Write+0x124>
      {
        return HAL_ERROR;
 8012124:	2301      	movs	r3, #1
 8012126:	e07b      	b.n	8012220 <HAL_I2C_Mem_Write+0x21c>
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8012128:	68fb      	ldr	r3, [r7, #12]
 801212a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801212c:	781a      	ldrb	r2, [r3, #0]
 801212e:	68fb      	ldr	r3, [r7, #12]
 8012130:	681b      	ldr	r3, [r3, #0]
 8012132:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8012134:	68fb      	ldr	r3, [r7, #12]
 8012136:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8012138:	1c5a      	adds	r2, r3, #1
 801213a:	68fb      	ldr	r3, [r7, #12]
 801213c:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 801213e:	68fb      	ldr	r3, [r7, #12]
 8012140:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8012142:	b29b      	uxth	r3, r3
 8012144:	3b01      	subs	r3, #1
 8012146:	b29a      	uxth	r2, r3
 8012148:	68fb      	ldr	r3, [r7, #12]
 801214a:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 801214c:	68fb      	ldr	r3, [r7, #12]
 801214e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8012150:	3b01      	subs	r3, #1
 8012152:	b29a      	uxth	r2, r3
 8012154:	68fb      	ldr	r3, [r7, #12]
 8012156:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8012158:	68fb      	ldr	r3, [r7, #12]
 801215a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 801215c:	b29b      	uxth	r3, r3
 801215e:	2b00      	cmp	r3, #0
 8012160:	d034      	beq.n	80121cc <HAL_I2C_Mem_Write+0x1c8>
 8012162:	68fb      	ldr	r3, [r7, #12]
 8012164:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8012166:	2b00      	cmp	r3, #0
 8012168:	d130      	bne.n	80121cc <HAL_I2C_Mem_Write+0x1c8>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 801216a:	697b      	ldr	r3, [r7, #20]
 801216c:	9300      	str	r3, [sp, #0]
 801216e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8012170:	2200      	movs	r2, #0
 8012172:	2180      	movs	r1, #128	@ 0x80
 8012174:	68f8      	ldr	r0, [r7, #12]
 8012176:	f000 fa59 	bl	801262c <I2C_WaitOnFlagUntilTimeout>
 801217a:	4603      	mov	r3, r0
 801217c:	2b00      	cmp	r3, #0
 801217e:	d001      	beq.n	8012184 <HAL_I2C_Mem_Write+0x180>
        {
          return HAL_ERROR;
 8012180:	2301      	movs	r3, #1
 8012182:	e04d      	b.n	8012220 <HAL_I2C_Mem_Write+0x21c>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8012184:	68fb      	ldr	r3, [r7, #12]
 8012186:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8012188:	b29b      	uxth	r3, r3
 801218a:	2bff      	cmp	r3, #255	@ 0xff
 801218c:	d90e      	bls.n	80121ac <HAL_I2C_Mem_Write+0x1a8>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 801218e:	68fb      	ldr	r3, [r7, #12]
 8012190:	22ff      	movs	r2, #255	@ 0xff
 8012192:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8012194:	68fb      	ldr	r3, [r7, #12]
 8012196:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8012198:	b2da      	uxtb	r2, r3
 801219a:	8979      	ldrh	r1, [r7, #10]
 801219c:	2300      	movs	r3, #0
 801219e:	9300      	str	r3, [sp, #0]
 80121a0:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 80121a4:	68f8      	ldr	r0, [r7, #12]
 80121a6:	f000 fbfb 	bl	80129a0 <I2C_TransferConfig>
 80121aa:	e00f      	b.n	80121cc <HAL_I2C_Mem_Write+0x1c8>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 80121ac:	68fb      	ldr	r3, [r7, #12]
 80121ae:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80121b0:	b29a      	uxth	r2, r3
 80121b2:	68fb      	ldr	r3, [r7, #12]
 80121b4:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80121b6:	68fb      	ldr	r3, [r7, #12]
 80121b8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80121ba:	b2da      	uxtb	r2, r3
 80121bc:	8979      	ldrh	r1, [r7, #10]
 80121be:	2300      	movs	r3, #0
 80121c0:	9300      	str	r3, [sp, #0]
 80121c2:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 80121c6:	68f8      	ldr	r0, [r7, #12]
 80121c8:	f000 fbea 	bl	80129a0 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }

    } while (hi2c->XferCount > 0U);
 80121cc:	68fb      	ldr	r3, [r7, #12]
 80121ce:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80121d0:	b29b      	uxth	r3, r3
 80121d2:	2b00      	cmp	r3, #0
 80121d4:	d19e      	bne.n	8012114 <HAL_I2C_Mem_Write+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80121d6:	697a      	ldr	r2, [r7, #20]
 80121d8:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80121da:	68f8      	ldr	r0, [r7, #12]
 80121dc:	f000 fabc 	bl	8012758 <I2C_WaitOnSTOPFlagUntilTimeout>
 80121e0:	4603      	mov	r3, r0
 80121e2:	2b00      	cmp	r3, #0
 80121e4:	d001      	beq.n	80121ea <HAL_I2C_Mem_Write+0x1e6>
    {
      return HAL_ERROR;
 80121e6:	2301      	movs	r3, #1
 80121e8:	e01a      	b.n	8012220 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80121ea:	68fb      	ldr	r3, [r7, #12]
 80121ec:	681b      	ldr	r3, [r3, #0]
 80121ee:	2220      	movs	r2, #32
 80121f0:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80121f2:	68fb      	ldr	r3, [r7, #12]
 80121f4:	681b      	ldr	r3, [r3, #0]
 80121f6:	6859      	ldr	r1, [r3, #4]
 80121f8:	68fb      	ldr	r3, [r7, #12]
 80121fa:	681a      	ldr	r2, [r3, #0]
 80121fc:	4b0a      	ldr	r3, [pc, #40]	@ (8012228 <HAL_I2C_Mem_Write+0x224>)
 80121fe:	400b      	ands	r3, r1
 8012200:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8012202:	68fb      	ldr	r3, [r7, #12]
 8012204:	2220      	movs	r2, #32
 8012206:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 801220a:	68fb      	ldr	r3, [r7, #12]
 801220c:	2200      	movs	r2, #0
 801220e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8012212:	68fb      	ldr	r3, [r7, #12]
 8012214:	2200      	movs	r2, #0
 8012216:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 801221a:	2300      	movs	r3, #0
 801221c:	e000      	b.n	8012220 <HAL_I2C_Mem_Write+0x21c>
  }
  else
  {
    return HAL_BUSY;
 801221e:	2302      	movs	r3, #2
  }
}
 8012220:	4618      	mov	r0, r3
 8012222:	3718      	adds	r7, #24
 8012224:	46bd      	mov	sp, r7
 8012226:	bd80      	pop	{r7, pc}
 8012228:	fe00e800 	.word	0xfe00e800

0801222c <HAL_I2C_Mem_Read>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                   uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 801222c:	b580      	push	{r7, lr}
 801222e:	b088      	sub	sp, #32
 8012230:	af02      	add	r7, sp, #8
 8012232:	60f8      	str	r0, [r7, #12]
 8012234:	4608      	mov	r0, r1
 8012236:	4611      	mov	r1, r2
 8012238:	461a      	mov	r2, r3
 801223a:	4603      	mov	r3, r0
 801223c:	817b      	strh	r3, [r7, #10]
 801223e:	460b      	mov	r3, r1
 8012240:	813b      	strh	r3, [r7, #8]
 8012242:	4613      	mov	r3, r2
 8012244:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8012246:	68fb      	ldr	r3, [r7, #12]
 8012248:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 801224c:	b2db      	uxtb	r3, r3
 801224e:	2b20      	cmp	r3, #32
 8012250:	f040 80fd 	bne.w	801244e <HAL_I2C_Mem_Read+0x222>
  {
    if ((pData == NULL) || (Size == 0U))
 8012254:	6a3b      	ldr	r3, [r7, #32]
 8012256:	2b00      	cmp	r3, #0
 8012258:	d002      	beq.n	8012260 <HAL_I2C_Mem_Read+0x34>
 801225a:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 801225c:	2b00      	cmp	r3, #0
 801225e:	d105      	bne.n	801226c <HAL_I2C_Mem_Read+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8012260:	68fb      	ldr	r3, [r7, #12]
 8012262:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8012266:	645a      	str	r2, [r3, #68]	@ 0x44
      return  HAL_ERROR;
 8012268:	2301      	movs	r3, #1
 801226a:	e0f1      	b.n	8012450 <HAL_I2C_Mem_Read+0x224>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 801226c:	68fb      	ldr	r3, [r7, #12]
 801226e:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8012272:	2b01      	cmp	r3, #1
 8012274:	d101      	bne.n	801227a <HAL_I2C_Mem_Read+0x4e>
 8012276:	2302      	movs	r3, #2
 8012278:	e0ea      	b.n	8012450 <HAL_I2C_Mem_Read+0x224>
 801227a:	68fb      	ldr	r3, [r7, #12]
 801227c:	2201      	movs	r2, #1
 801227e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8012282:	f7fe fec5 	bl	8011010 <HAL_GetTick>
 8012286:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8012288:	697b      	ldr	r3, [r7, #20]
 801228a:	9300      	str	r3, [sp, #0]
 801228c:	2319      	movs	r3, #25
 801228e:	2201      	movs	r2, #1
 8012290:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8012294:	68f8      	ldr	r0, [r7, #12]
 8012296:	f000 f9c9 	bl	801262c <I2C_WaitOnFlagUntilTimeout>
 801229a:	4603      	mov	r3, r0
 801229c:	2b00      	cmp	r3, #0
 801229e:	d001      	beq.n	80122a4 <HAL_I2C_Mem_Read+0x78>
    {
      return HAL_ERROR;
 80122a0:	2301      	movs	r3, #1
 80122a2:	e0d5      	b.n	8012450 <HAL_I2C_Mem_Read+0x224>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 80122a4:	68fb      	ldr	r3, [r7, #12]
 80122a6:	2222      	movs	r2, #34	@ 0x22
 80122a8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80122ac:	68fb      	ldr	r3, [r7, #12]
 80122ae:	2240      	movs	r2, #64	@ 0x40
 80122b0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80122b4:	68fb      	ldr	r3, [r7, #12]
 80122b6:	2200      	movs	r2, #0
 80122b8:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 80122ba:	68fb      	ldr	r3, [r7, #12]
 80122bc:	6a3a      	ldr	r2, [r7, #32]
 80122be:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 80122c0:	68fb      	ldr	r3, [r7, #12]
 80122c2:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 80122c4:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 80122c6:	68fb      	ldr	r3, [r7, #12]
 80122c8:	2200      	movs	r2, #0
 80122ca:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80122cc:	88f8      	ldrh	r0, [r7, #6]
 80122ce:	893a      	ldrh	r2, [r7, #8]
 80122d0:	8979      	ldrh	r1, [r7, #10]
 80122d2:	697b      	ldr	r3, [r7, #20]
 80122d4:	9301      	str	r3, [sp, #4]
 80122d6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80122d8:	9300      	str	r3, [sp, #0]
 80122da:	4603      	mov	r3, r0
 80122dc:	68f8      	ldr	r0, [r7, #12]
 80122de:	f000 f92d 	bl	801253c <I2C_RequestMemoryRead>
 80122e2:	4603      	mov	r3, r0
 80122e4:	2b00      	cmp	r3, #0
 80122e6:	d005      	beq.n	80122f4 <HAL_I2C_Mem_Read+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80122e8:	68fb      	ldr	r3, [r7, #12]
 80122ea:	2200      	movs	r2, #0
 80122ec:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
      return HAL_ERROR;
 80122f0:	2301      	movs	r3, #1
 80122f2:	e0ad      	b.n	8012450 <HAL_I2C_Mem_Read+0x224>
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80122f4:	68fb      	ldr	r3, [r7, #12]
 80122f6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80122f8:	b29b      	uxth	r3, r3
 80122fa:	2bff      	cmp	r3, #255	@ 0xff
 80122fc:	d90e      	bls.n	801231c <HAL_I2C_Mem_Read+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 80122fe:	68fb      	ldr	r3, [r7, #12]
 8012300:	22ff      	movs	r2, #255	@ 0xff
 8012302:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8012304:	68fb      	ldr	r3, [r7, #12]
 8012306:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8012308:	b2da      	uxtb	r2, r3
 801230a:	8979      	ldrh	r1, [r7, #10]
 801230c:	4b52      	ldr	r3, [pc, #328]	@ (8012458 <HAL_I2C_Mem_Read+0x22c>)
 801230e:	9300      	str	r3, [sp, #0]
 8012310:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8012314:	68f8      	ldr	r0, [r7, #12]
 8012316:	f000 fb43 	bl	80129a0 <I2C_TransferConfig>
 801231a:	e00f      	b.n	801233c <HAL_I2C_Mem_Read+0x110>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 801231c:	68fb      	ldr	r3, [r7, #12]
 801231e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8012320:	b29a      	uxth	r2, r3
 8012322:	68fb      	ldr	r3, [r7, #12]
 8012324:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8012326:	68fb      	ldr	r3, [r7, #12]
 8012328:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 801232a:	b2da      	uxtb	r2, r3
 801232c:	8979      	ldrh	r1, [r7, #10]
 801232e:	4b4a      	ldr	r3, [pc, #296]	@ (8012458 <HAL_I2C_Mem_Read+0x22c>)
 8012330:	9300      	str	r3, [sp, #0]
 8012332:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8012336:	68f8      	ldr	r0, [r7, #12]
 8012338:	f000 fb32 	bl	80129a0 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 801233c:	697b      	ldr	r3, [r7, #20]
 801233e:	9300      	str	r3, [sp, #0]
 8012340:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8012342:	2200      	movs	r2, #0
 8012344:	2104      	movs	r1, #4
 8012346:	68f8      	ldr	r0, [r7, #12]
 8012348:	f000 f970 	bl	801262c <I2C_WaitOnFlagUntilTimeout>
 801234c:	4603      	mov	r3, r0
 801234e:	2b00      	cmp	r3, #0
 8012350:	d001      	beq.n	8012356 <HAL_I2C_Mem_Read+0x12a>
      {
        return HAL_ERROR;
 8012352:	2301      	movs	r3, #1
 8012354:	e07c      	b.n	8012450 <HAL_I2C_Mem_Read+0x224>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8012356:	68fb      	ldr	r3, [r7, #12]
 8012358:	681b      	ldr	r3, [r3, #0]
 801235a:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 801235c:	68fb      	ldr	r3, [r7, #12]
 801235e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8012360:	b2d2      	uxtb	r2, r2
 8012362:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8012364:	68fb      	ldr	r3, [r7, #12]
 8012366:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8012368:	1c5a      	adds	r2, r3, #1
 801236a:	68fb      	ldr	r3, [r7, #12]
 801236c:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferSize--;
 801236e:	68fb      	ldr	r3, [r7, #12]
 8012370:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8012372:	3b01      	subs	r3, #1
 8012374:	b29a      	uxth	r2, r3
 8012376:	68fb      	ldr	r3, [r7, #12]
 8012378:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 801237a:	68fb      	ldr	r3, [r7, #12]
 801237c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 801237e:	b29b      	uxth	r3, r3
 8012380:	3b01      	subs	r3, #1
 8012382:	b29a      	uxth	r2, r3
 8012384:	68fb      	ldr	r3, [r7, #12]
 8012386:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8012388:	68fb      	ldr	r3, [r7, #12]
 801238a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 801238c:	b29b      	uxth	r3, r3
 801238e:	2b00      	cmp	r3, #0
 8012390:	d034      	beq.n	80123fc <HAL_I2C_Mem_Read+0x1d0>
 8012392:	68fb      	ldr	r3, [r7, #12]
 8012394:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8012396:	2b00      	cmp	r3, #0
 8012398:	d130      	bne.n	80123fc <HAL_I2C_Mem_Read+0x1d0>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 801239a:	697b      	ldr	r3, [r7, #20]
 801239c:	9300      	str	r3, [sp, #0]
 801239e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80123a0:	2200      	movs	r2, #0
 80123a2:	2180      	movs	r1, #128	@ 0x80
 80123a4:	68f8      	ldr	r0, [r7, #12]
 80123a6:	f000 f941 	bl	801262c <I2C_WaitOnFlagUntilTimeout>
 80123aa:	4603      	mov	r3, r0
 80123ac:	2b00      	cmp	r3, #0
 80123ae:	d001      	beq.n	80123b4 <HAL_I2C_Mem_Read+0x188>
        {
          return HAL_ERROR;
 80123b0:	2301      	movs	r3, #1
 80123b2:	e04d      	b.n	8012450 <HAL_I2C_Mem_Read+0x224>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80123b4:	68fb      	ldr	r3, [r7, #12]
 80123b6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80123b8:	b29b      	uxth	r3, r3
 80123ba:	2bff      	cmp	r3, #255	@ 0xff
 80123bc:	d90e      	bls.n	80123dc <HAL_I2C_Mem_Read+0x1b0>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 80123be:	68fb      	ldr	r3, [r7, #12]
 80123c0:	22ff      	movs	r2, #255	@ 0xff
 80123c2:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE,
 80123c4:	68fb      	ldr	r3, [r7, #12]
 80123c6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80123c8:	b2da      	uxtb	r2, r3
 80123ca:	8979      	ldrh	r1, [r7, #10]
 80123cc:	2300      	movs	r3, #0
 80123ce:	9300      	str	r3, [sp, #0]
 80123d0:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 80123d4:	68f8      	ldr	r0, [r7, #12]
 80123d6:	f000 fae3 	bl	80129a0 <I2C_TransferConfig>
 80123da:	e00f      	b.n	80123fc <HAL_I2C_Mem_Read+0x1d0>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 80123dc:	68fb      	ldr	r3, [r7, #12]
 80123de:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80123e0:	b29a      	uxth	r2, r3
 80123e2:	68fb      	ldr	r3, [r7, #12]
 80123e4:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80123e6:	68fb      	ldr	r3, [r7, #12]
 80123e8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80123ea:	b2da      	uxtb	r2, r3
 80123ec:	8979      	ldrh	r1, [r7, #10]
 80123ee:	2300      	movs	r3, #0
 80123f0:	9300      	str	r3, [sp, #0]
 80123f2:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 80123f6:	68f8      	ldr	r0, [r7, #12]
 80123f8:	f000 fad2 	bl	80129a0 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }
    } while (hi2c->XferCount > 0U);
 80123fc:	68fb      	ldr	r3, [r7, #12]
 80123fe:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8012400:	b29b      	uxth	r3, r3
 8012402:	2b00      	cmp	r3, #0
 8012404:	d19a      	bne.n	801233c <HAL_I2C_Mem_Read+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8012406:	697a      	ldr	r2, [r7, #20]
 8012408:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 801240a:	68f8      	ldr	r0, [r7, #12]
 801240c:	f000 f9a4 	bl	8012758 <I2C_WaitOnSTOPFlagUntilTimeout>
 8012410:	4603      	mov	r3, r0
 8012412:	2b00      	cmp	r3, #0
 8012414:	d001      	beq.n	801241a <HAL_I2C_Mem_Read+0x1ee>
    {
      return HAL_ERROR;
 8012416:	2301      	movs	r3, #1
 8012418:	e01a      	b.n	8012450 <HAL_I2C_Mem_Read+0x224>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 801241a:	68fb      	ldr	r3, [r7, #12]
 801241c:	681b      	ldr	r3, [r3, #0]
 801241e:	2220      	movs	r2, #32
 8012420:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8012422:	68fb      	ldr	r3, [r7, #12]
 8012424:	681b      	ldr	r3, [r3, #0]
 8012426:	6859      	ldr	r1, [r3, #4]
 8012428:	68fb      	ldr	r3, [r7, #12]
 801242a:	681a      	ldr	r2, [r3, #0]
 801242c:	4b0b      	ldr	r3, [pc, #44]	@ (801245c <HAL_I2C_Mem_Read+0x230>)
 801242e:	400b      	ands	r3, r1
 8012430:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8012432:	68fb      	ldr	r3, [r7, #12]
 8012434:	2220      	movs	r2, #32
 8012436:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 801243a:	68fb      	ldr	r3, [r7, #12]
 801243c:	2200      	movs	r2, #0
 801243e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8012442:	68fb      	ldr	r3, [r7, #12]
 8012444:	2200      	movs	r2, #0
 8012446:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 801244a:	2300      	movs	r3, #0
 801244c:	e000      	b.n	8012450 <HAL_I2C_Mem_Read+0x224>
  }
  else
  {
    return HAL_BUSY;
 801244e:	2302      	movs	r3, #2
  }
}
 8012450:	4618      	mov	r0, r3
 8012452:	3718      	adds	r7, #24
 8012454:	46bd      	mov	sp, r7
 8012456:	bd80      	pop	{r7, pc}
 8012458:	80002400 	.word	0x80002400
 801245c:	fe00e800 	.word	0xfe00e800

08012460 <HAL_I2C_GetState>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL state
  */
HAL_I2C_StateTypeDef HAL_I2C_GetState(I2C_HandleTypeDef *hi2c)
{
 8012460:	b480      	push	{r7}
 8012462:	b083      	sub	sp, #12
 8012464:	af00      	add	r7, sp, #0
 8012466:	6078      	str	r0, [r7, #4]
  /* Return I2C handle state */
  return hi2c->State;
 8012468:	687b      	ldr	r3, [r7, #4]
 801246a:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 801246e:	b2db      	uxtb	r3, r3
}
 8012470:	4618      	mov	r0, r3
 8012472:	370c      	adds	r7, #12
 8012474:	46bd      	mov	sp, r7
 8012476:	f85d 7b04 	ldr.w	r7, [sp], #4
 801247a:	4770      	bx	lr

0801247c <HAL_I2C_GetError>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *              the configuration information for the specified I2C.
  * @retval I2C Error Code
  */
uint32_t HAL_I2C_GetError(I2C_HandleTypeDef *hi2c)
{
 801247c:	b480      	push	{r7}
 801247e:	b083      	sub	sp, #12
 8012480:	af00      	add	r7, sp, #0
 8012482:	6078      	str	r0, [r7, #4]
  return hi2c->ErrorCode;
 8012484:	687b      	ldr	r3, [r7, #4]
 8012486:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
}
 8012488:	4618      	mov	r0, r3
 801248a:	370c      	adds	r7, #12
 801248c:	46bd      	mov	sp, r7
 801248e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012492:	4770      	bx	lr

08012494 <I2C_RequestMemoryWrite>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                                uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                                uint32_t Tickstart)
{
 8012494:	b580      	push	{r7, lr}
 8012496:	b086      	sub	sp, #24
 8012498:	af02      	add	r7, sp, #8
 801249a:	60f8      	str	r0, [r7, #12]
 801249c:	4608      	mov	r0, r1
 801249e:	4611      	mov	r1, r2
 80124a0:	461a      	mov	r2, r3
 80124a2:	4603      	mov	r3, r0
 80124a4:	817b      	strh	r3, [r7, #10]
 80124a6:	460b      	mov	r3, r1
 80124a8:	813b      	strh	r3, [r7, #8]
 80124aa:	4613      	mov	r3, r2
 80124ac:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 80124ae:	88fb      	ldrh	r3, [r7, #6]
 80124b0:	b2da      	uxtb	r2, r3
 80124b2:	8979      	ldrh	r1, [r7, #10]
 80124b4:	4b20      	ldr	r3, [pc, #128]	@ (8012538 <I2C_RequestMemoryWrite+0xa4>)
 80124b6:	9300      	str	r3, [sp, #0]
 80124b8:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 80124bc:	68f8      	ldr	r0, [r7, #12]
 80124be:	f000 fa6f 	bl	80129a0 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80124c2:	69fa      	ldr	r2, [r7, #28]
 80124c4:	69b9      	ldr	r1, [r7, #24]
 80124c6:	68f8      	ldr	r0, [r7, #12]
 80124c8:	f000 f8ff 	bl	80126ca <I2C_WaitOnTXISFlagUntilTimeout>
 80124cc:	4603      	mov	r3, r0
 80124ce:	2b00      	cmp	r3, #0
 80124d0:	d001      	beq.n	80124d6 <I2C_RequestMemoryWrite+0x42>
  {
    return HAL_ERROR;
 80124d2:	2301      	movs	r3, #1
 80124d4:	e02c      	b.n	8012530 <I2C_RequestMemoryWrite+0x9c>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80124d6:	88fb      	ldrh	r3, [r7, #6]
 80124d8:	2b01      	cmp	r3, #1
 80124da:	d105      	bne.n	80124e8 <I2C_RequestMemoryWrite+0x54>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 80124dc:	893b      	ldrh	r3, [r7, #8]
 80124de:	b2da      	uxtb	r2, r3
 80124e0:	68fb      	ldr	r3, [r7, #12]
 80124e2:	681b      	ldr	r3, [r3, #0]
 80124e4:	629a      	str	r2, [r3, #40]	@ 0x28
 80124e6:	e015      	b.n	8012514 <I2C_RequestMemoryWrite+0x80>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 80124e8:	893b      	ldrh	r3, [r7, #8]
 80124ea:	0a1b      	lsrs	r3, r3, #8
 80124ec:	b29b      	uxth	r3, r3
 80124ee:	b2da      	uxtb	r2, r3
 80124f0:	68fb      	ldr	r3, [r7, #12]
 80124f2:	681b      	ldr	r3, [r3, #0]
 80124f4:	629a      	str	r2, [r3, #40]	@ 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80124f6:	69fa      	ldr	r2, [r7, #28]
 80124f8:	69b9      	ldr	r1, [r7, #24]
 80124fa:	68f8      	ldr	r0, [r7, #12]
 80124fc:	f000 f8e5 	bl	80126ca <I2C_WaitOnTXISFlagUntilTimeout>
 8012500:	4603      	mov	r3, r0
 8012502:	2b00      	cmp	r3, #0
 8012504:	d001      	beq.n	801250a <I2C_RequestMemoryWrite+0x76>
    {
      return HAL_ERROR;
 8012506:	2301      	movs	r3, #1
 8012508:	e012      	b.n	8012530 <I2C_RequestMemoryWrite+0x9c>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 801250a:	893b      	ldrh	r3, [r7, #8]
 801250c:	b2da      	uxtb	r2, r3
 801250e:	68fb      	ldr	r3, [r7, #12]
 8012510:	681b      	ldr	r3, [r3, #0]
 8012512:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 8012514:	69fb      	ldr	r3, [r7, #28]
 8012516:	9300      	str	r3, [sp, #0]
 8012518:	69bb      	ldr	r3, [r7, #24]
 801251a:	2200      	movs	r2, #0
 801251c:	2180      	movs	r1, #128	@ 0x80
 801251e:	68f8      	ldr	r0, [r7, #12]
 8012520:	f000 f884 	bl	801262c <I2C_WaitOnFlagUntilTimeout>
 8012524:	4603      	mov	r3, r0
 8012526:	2b00      	cmp	r3, #0
 8012528:	d001      	beq.n	801252e <I2C_RequestMemoryWrite+0x9a>
  {
    return HAL_ERROR;
 801252a:	2301      	movs	r3, #1
 801252c:	e000      	b.n	8012530 <I2C_RequestMemoryWrite+0x9c>
  }

  return HAL_OK;
 801252e:	2300      	movs	r3, #0
}
 8012530:	4618      	mov	r0, r3
 8012532:	3710      	adds	r7, #16
 8012534:	46bd      	mov	sp, r7
 8012536:	bd80      	pop	{r7, pc}
 8012538:	80002000 	.word	0x80002000

0801253c <I2C_RequestMemoryRead>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                               uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                               uint32_t Tickstart)
{
 801253c:	b580      	push	{r7, lr}
 801253e:	b086      	sub	sp, #24
 8012540:	af02      	add	r7, sp, #8
 8012542:	60f8      	str	r0, [r7, #12]
 8012544:	4608      	mov	r0, r1
 8012546:	4611      	mov	r1, r2
 8012548:	461a      	mov	r2, r3
 801254a:	4603      	mov	r3, r0
 801254c:	817b      	strh	r3, [r7, #10]
 801254e:	460b      	mov	r3, r1
 8012550:	813b      	strh	r3, [r7, #8]
 8012552:	4613      	mov	r3, r2
 8012554:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 8012556:	88fb      	ldrh	r3, [r7, #6]
 8012558:	b2da      	uxtb	r2, r3
 801255a:	8979      	ldrh	r1, [r7, #10]
 801255c:	4b20      	ldr	r3, [pc, #128]	@ (80125e0 <I2C_RequestMemoryRead+0xa4>)
 801255e:	9300      	str	r3, [sp, #0]
 8012560:	2300      	movs	r3, #0
 8012562:	68f8      	ldr	r0, [r7, #12]
 8012564:	f000 fa1c 	bl	80129a0 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8012568:	69fa      	ldr	r2, [r7, #28]
 801256a:	69b9      	ldr	r1, [r7, #24]
 801256c:	68f8      	ldr	r0, [r7, #12]
 801256e:	f000 f8ac 	bl	80126ca <I2C_WaitOnTXISFlagUntilTimeout>
 8012572:	4603      	mov	r3, r0
 8012574:	2b00      	cmp	r3, #0
 8012576:	d001      	beq.n	801257c <I2C_RequestMemoryRead+0x40>
  {
    return HAL_ERROR;
 8012578:	2301      	movs	r3, #1
 801257a:	e02c      	b.n	80125d6 <I2C_RequestMemoryRead+0x9a>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 801257c:	88fb      	ldrh	r3, [r7, #6]
 801257e:	2b01      	cmp	r3, #1
 8012580:	d105      	bne.n	801258e <I2C_RequestMemoryRead+0x52>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8012582:	893b      	ldrh	r3, [r7, #8]
 8012584:	b2da      	uxtb	r2, r3
 8012586:	68fb      	ldr	r3, [r7, #12]
 8012588:	681b      	ldr	r3, [r3, #0]
 801258a:	629a      	str	r2, [r3, #40]	@ 0x28
 801258c:	e015      	b.n	80125ba <I2C_RequestMemoryRead+0x7e>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 801258e:	893b      	ldrh	r3, [r7, #8]
 8012590:	0a1b      	lsrs	r3, r3, #8
 8012592:	b29b      	uxth	r3, r3
 8012594:	b2da      	uxtb	r2, r3
 8012596:	68fb      	ldr	r3, [r7, #12]
 8012598:	681b      	ldr	r3, [r3, #0]
 801259a:	629a      	str	r2, [r3, #40]	@ 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 801259c:	69fa      	ldr	r2, [r7, #28]
 801259e:	69b9      	ldr	r1, [r7, #24]
 80125a0:	68f8      	ldr	r0, [r7, #12]
 80125a2:	f000 f892 	bl	80126ca <I2C_WaitOnTXISFlagUntilTimeout>
 80125a6:	4603      	mov	r3, r0
 80125a8:	2b00      	cmp	r3, #0
 80125aa:	d001      	beq.n	80125b0 <I2C_RequestMemoryRead+0x74>
    {
      return HAL_ERROR;
 80125ac:	2301      	movs	r3, #1
 80125ae:	e012      	b.n	80125d6 <I2C_RequestMemoryRead+0x9a>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 80125b0:	893b      	ldrh	r3, [r7, #8]
 80125b2:	b2da      	uxtb	r2, r3
 80125b4:	68fb      	ldr	r3, [r7, #12]
 80125b6:	681b      	ldr	r3, [r3, #0]
 80125b8:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Wait until TC flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 80125ba:	69fb      	ldr	r3, [r7, #28]
 80125bc:	9300      	str	r3, [sp, #0]
 80125be:	69bb      	ldr	r3, [r7, #24]
 80125c0:	2200      	movs	r2, #0
 80125c2:	2140      	movs	r1, #64	@ 0x40
 80125c4:	68f8      	ldr	r0, [r7, #12]
 80125c6:	f000 f831 	bl	801262c <I2C_WaitOnFlagUntilTimeout>
 80125ca:	4603      	mov	r3, r0
 80125cc:	2b00      	cmp	r3, #0
 80125ce:	d001      	beq.n	80125d4 <I2C_RequestMemoryRead+0x98>
  {
    return HAL_ERROR;
 80125d0:	2301      	movs	r3, #1
 80125d2:	e000      	b.n	80125d6 <I2C_RequestMemoryRead+0x9a>
  }

  return HAL_OK;
 80125d4:	2300      	movs	r3, #0
}
 80125d6:	4618      	mov	r0, r3
 80125d8:	3710      	adds	r7, #16
 80125da:	46bd      	mov	sp, r7
 80125dc:	bd80      	pop	{r7, pc}
 80125de:	bf00      	nop
 80125e0:	80002000 	.word	0x80002000

080125e4 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 80125e4:	b480      	push	{r7}
 80125e6:	b083      	sub	sp, #12
 80125e8:	af00      	add	r7, sp, #0
 80125ea:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 80125ec:	687b      	ldr	r3, [r7, #4]
 80125ee:	681b      	ldr	r3, [r3, #0]
 80125f0:	699b      	ldr	r3, [r3, #24]
 80125f2:	f003 0302 	and.w	r3, r3, #2
 80125f6:	2b02      	cmp	r3, #2
 80125f8:	d103      	bne.n	8012602 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 80125fa:	687b      	ldr	r3, [r7, #4]
 80125fc:	681b      	ldr	r3, [r3, #0]
 80125fe:	2200      	movs	r2, #0
 8012600:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8012602:	687b      	ldr	r3, [r7, #4]
 8012604:	681b      	ldr	r3, [r3, #0]
 8012606:	699b      	ldr	r3, [r3, #24]
 8012608:	f003 0301 	and.w	r3, r3, #1
 801260c:	2b01      	cmp	r3, #1
 801260e:	d007      	beq.n	8012620 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8012610:	687b      	ldr	r3, [r7, #4]
 8012612:	681b      	ldr	r3, [r3, #0]
 8012614:	699a      	ldr	r2, [r3, #24]
 8012616:	687b      	ldr	r3, [r7, #4]
 8012618:	681b      	ldr	r3, [r3, #0]
 801261a:	f042 0201 	orr.w	r2, r2, #1
 801261e:	619a      	str	r2, [r3, #24]
  }
}
 8012620:	bf00      	nop
 8012622:	370c      	adds	r7, #12
 8012624:	46bd      	mov	sp, r7
 8012626:	f85d 7b04 	ldr.w	r7, [sp], #4
 801262a:	4770      	bx	lr

0801262c <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 801262c:	b580      	push	{r7, lr}
 801262e:	b084      	sub	sp, #16
 8012630:	af00      	add	r7, sp, #0
 8012632:	60f8      	str	r0, [r7, #12]
 8012634:	60b9      	str	r1, [r7, #8]
 8012636:	603b      	str	r3, [r7, #0]
 8012638:	4613      	mov	r3, r2
 801263a:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 801263c:	e031      	b.n	80126a2 <I2C_WaitOnFlagUntilTimeout+0x76>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 801263e:	683b      	ldr	r3, [r7, #0]
 8012640:	f1b3 3fff 	cmp.w	r3, #4294967295
 8012644:	d02d      	beq.n	80126a2 <I2C_WaitOnFlagUntilTimeout+0x76>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8012646:	f7fe fce3 	bl	8011010 <HAL_GetTick>
 801264a:	4602      	mov	r2, r0
 801264c:	69bb      	ldr	r3, [r7, #24]
 801264e:	1ad3      	subs	r3, r2, r3
 8012650:	683a      	ldr	r2, [r7, #0]
 8012652:	429a      	cmp	r2, r3
 8012654:	d302      	bcc.n	801265c <I2C_WaitOnFlagUntilTimeout+0x30>
 8012656:	683b      	ldr	r3, [r7, #0]
 8012658:	2b00      	cmp	r3, #0
 801265a:	d122      	bne.n	80126a2 <I2C_WaitOnFlagUntilTimeout+0x76>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 801265c:	68fb      	ldr	r3, [r7, #12]
 801265e:	681b      	ldr	r3, [r3, #0]
 8012660:	699a      	ldr	r2, [r3, #24]
 8012662:	68bb      	ldr	r3, [r7, #8]
 8012664:	4013      	ands	r3, r2
 8012666:	68ba      	ldr	r2, [r7, #8]
 8012668:	429a      	cmp	r2, r3
 801266a:	bf0c      	ite	eq
 801266c:	2301      	moveq	r3, #1
 801266e:	2300      	movne	r3, #0
 8012670:	b2db      	uxtb	r3, r3
 8012672:	461a      	mov	r2, r3
 8012674:	79fb      	ldrb	r3, [r7, #7]
 8012676:	429a      	cmp	r2, r3
 8012678:	d113      	bne.n	80126a2 <I2C_WaitOnFlagUntilTimeout+0x76>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 801267a:	68fb      	ldr	r3, [r7, #12]
 801267c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 801267e:	f043 0220 	orr.w	r2, r3, #32
 8012682:	68fb      	ldr	r3, [r7, #12]
 8012684:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8012686:	68fb      	ldr	r3, [r7, #12]
 8012688:	2220      	movs	r2, #32
 801268a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 801268e:	68fb      	ldr	r3, [r7, #12]
 8012690:	2200      	movs	r2, #0
 8012692:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8012696:	68fb      	ldr	r3, [r7, #12]
 8012698:	2200      	movs	r2, #0
 801269a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
          return HAL_ERROR;
 801269e:	2301      	movs	r3, #1
 80126a0:	e00f      	b.n	80126c2 <I2C_WaitOnFlagUntilTimeout+0x96>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80126a2:	68fb      	ldr	r3, [r7, #12]
 80126a4:	681b      	ldr	r3, [r3, #0]
 80126a6:	699a      	ldr	r2, [r3, #24]
 80126a8:	68bb      	ldr	r3, [r7, #8]
 80126aa:	4013      	ands	r3, r2
 80126ac:	68ba      	ldr	r2, [r7, #8]
 80126ae:	429a      	cmp	r2, r3
 80126b0:	bf0c      	ite	eq
 80126b2:	2301      	moveq	r3, #1
 80126b4:	2300      	movne	r3, #0
 80126b6:	b2db      	uxtb	r3, r3
 80126b8:	461a      	mov	r2, r3
 80126ba:	79fb      	ldrb	r3, [r7, #7]
 80126bc:	429a      	cmp	r2, r3
 80126be:	d0be      	beq.n	801263e <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80126c0:	2300      	movs	r3, #0
}
 80126c2:	4618      	mov	r0, r3
 80126c4:	3710      	adds	r7, #16
 80126c6:	46bd      	mov	sp, r7
 80126c8:	bd80      	pop	{r7, pc}

080126ca <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 80126ca:	b580      	push	{r7, lr}
 80126cc:	b084      	sub	sp, #16
 80126ce:	af00      	add	r7, sp, #0
 80126d0:	60f8      	str	r0, [r7, #12]
 80126d2:	60b9      	str	r1, [r7, #8]
 80126d4:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 80126d6:	e033      	b.n	8012740 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 80126d8:	687a      	ldr	r2, [r7, #4]
 80126da:	68b9      	ldr	r1, [r7, #8]
 80126dc:	68f8      	ldr	r0, [r7, #12]
 80126de:	f000 f87f 	bl	80127e0 <I2C_IsErrorOccurred>
 80126e2:	4603      	mov	r3, r0
 80126e4:	2b00      	cmp	r3, #0
 80126e6:	d001      	beq.n	80126ec <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 80126e8:	2301      	movs	r3, #1
 80126ea:	e031      	b.n	8012750 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80126ec:	68bb      	ldr	r3, [r7, #8]
 80126ee:	f1b3 3fff 	cmp.w	r3, #4294967295
 80126f2:	d025      	beq.n	8012740 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80126f4:	f7fe fc8c 	bl	8011010 <HAL_GetTick>
 80126f8:	4602      	mov	r2, r0
 80126fa:	687b      	ldr	r3, [r7, #4]
 80126fc:	1ad3      	subs	r3, r2, r3
 80126fe:	68ba      	ldr	r2, [r7, #8]
 8012700:	429a      	cmp	r2, r3
 8012702:	d302      	bcc.n	801270a <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 8012704:	68bb      	ldr	r3, [r7, #8]
 8012706:	2b00      	cmp	r3, #0
 8012708:	d11a      	bne.n	8012740 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET))
 801270a:	68fb      	ldr	r3, [r7, #12]
 801270c:	681b      	ldr	r3, [r3, #0]
 801270e:	699b      	ldr	r3, [r3, #24]
 8012710:	f003 0302 	and.w	r3, r3, #2
 8012714:	2b02      	cmp	r3, #2
 8012716:	d013      	beq.n	8012740 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8012718:	68fb      	ldr	r3, [r7, #12]
 801271a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 801271c:	f043 0220 	orr.w	r2, r3, #32
 8012720:	68fb      	ldr	r3, [r7, #12]
 8012722:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8012724:	68fb      	ldr	r3, [r7, #12]
 8012726:	2220      	movs	r2, #32
 8012728:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 801272c:	68fb      	ldr	r3, [r7, #12]
 801272e:	2200      	movs	r2, #0
 8012730:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8012734:	68fb      	ldr	r3, [r7, #12]
 8012736:	2200      	movs	r2, #0
 8012738:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 801273c:	2301      	movs	r3, #1
 801273e:	e007      	b.n	8012750 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8012740:	68fb      	ldr	r3, [r7, #12]
 8012742:	681b      	ldr	r3, [r3, #0]
 8012744:	699b      	ldr	r3, [r3, #24]
 8012746:	f003 0302 	and.w	r3, r3, #2
 801274a:	2b02      	cmp	r3, #2
 801274c:	d1c4      	bne.n	80126d8 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 801274e:	2300      	movs	r3, #0
}
 8012750:	4618      	mov	r0, r3
 8012752:	3710      	adds	r7, #16
 8012754:	46bd      	mov	sp, r7
 8012756:	bd80      	pop	{r7, pc}

08012758 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8012758:	b580      	push	{r7, lr}
 801275a:	b084      	sub	sp, #16
 801275c:	af00      	add	r7, sp, #0
 801275e:	60f8      	str	r0, [r7, #12]
 8012760:	60b9      	str	r1, [r7, #8]
 8012762:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8012764:	e02f      	b.n	80127c6 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8012766:	687a      	ldr	r2, [r7, #4]
 8012768:	68b9      	ldr	r1, [r7, #8]
 801276a:	68f8      	ldr	r0, [r7, #12]
 801276c:	f000 f838 	bl	80127e0 <I2C_IsErrorOccurred>
 8012770:	4603      	mov	r3, r0
 8012772:	2b00      	cmp	r3, #0
 8012774:	d001      	beq.n	801277a <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8012776:	2301      	movs	r3, #1
 8012778:	e02d      	b.n	80127d6 <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 801277a:	f7fe fc49 	bl	8011010 <HAL_GetTick>
 801277e:	4602      	mov	r2, r0
 8012780:	687b      	ldr	r3, [r7, #4]
 8012782:	1ad3      	subs	r3, r2, r3
 8012784:	68ba      	ldr	r2, [r7, #8]
 8012786:	429a      	cmp	r2, r3
 8012788:	d302      	bcc.n	8012790 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 801278a:	68bb      	ldr	r3, [r7, #8]
 801278c:	2b00      	cmp	r3, #0
 801278e:	d11a      	bne.n	80127c6 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET))
 8012790:	68fb      	ldr	r3, [r7, #12]
 8012792:	681b      	ldr	r3, [r3, #0]
 8012794:	699b      	ldr	r3, [r3, #24]
 8012796:	f003 0320 	and.w	r3, r3, #32
 801279a:	2b20      	cmp	r3, #32
 801279c:	d013      	beq.n	80127c6 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 801279e:	68fb      	ldr	r3, [r7, #12]
 80127a0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80127a2:	f043 0220 	orr.w	r2, r3, #32
 80127a6:	68fb      	ldr	r3, [r7, #12]
 80127a8:	645a      	str	r2, [r3, #68]	@ 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 80127aa:	68fb      	ldr	r3, [r7, #12]
 80127ac:	2220      	movs	r2, #32
 80127ae:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80127b2:	68fb      	ldr	r3, [r7, #12]
 80127b4:	2200      	movs	r2, #0
 80127b6:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80127ba:	68fb      	ldr	r3, [r7, #12]
 80127bc:	2200      	movs	r2, #0
 80127be:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        return HAL_ERROR;
 80127c2:	2301      	movs	r3, #1
 80127c4:	e007      	b.n	80127d6 <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80127c6:	68fb      	ldr	r3, [r7, #12]
 80127c8:	681b      	ldr	r3, [r3, #0]
 80127ca:	699b      	ldr	r3, [r3, #24]
 80127cc:	f003 0320 	and.w	r3, r3, #32
 80127d0:	2b20      	cmp	r3, #32
 80127d2:	d1c8      	bne.n	8012766 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80127d4:	2300      	movs	r3, #0
}
 80127d6:	4618      	mov	r0, r3
 80127d8:	3710      	adds	r7, #16
 80127da:	46bd      	mov	sp, r7
 80127dc:	bd80      	pop	{r7, pc}
	...

080127e0 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80127e0:	b580      	push	{r7, lr}
 80127e2:	b08a      	sub	sp, #40	@ 0x28
 80127e4:	af00      	add	r7, sp, #0
 80127e6:	60f8      	str	r0, [r7, #12]
 80127e8:	60b9      	str	r1, [r7, #8]
 80127ea:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80127ec:	2300      	movs	r3, #0
 80127ee:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 80127f2:	68fb      	ldr	r3, [r7, #12]
 80127f4:	681b      	ldr	r3, [r3, #0]
 80127f6:	699b      	ldr	r3, [r3, #24]
 80127f8:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 80127fa:	2300      	movs	r3, #0
 80127fc:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 80127fe:	687b      	ldr	r3, [r7, #4]
 8012800:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 8012802:	69bb      	ldr	r3, [r7, #24]
 8012804:	f003 0310 	and.w	r3, r3, #16
 8012808:	2b00      	cmp	r3, #0
 801280a:	d068      	beq.n	80128de <I2C_IsErrorOccurred+0xfe>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 801280c:	68fb      	ldr	r3, [r7, #12]
 801280e:	681b      	ldr	r3, [r3, #0]
 8012810:	2210      	movs	r2, #16
 8012812:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8012814:	e049      	b.n	80128aa <I2C_IsErrorOccurred+0xca>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8012816:	68bb      	ldr	r3, [r7, #8]
 8012818:	f1b3 3fff 	cmp.w	r3, #4294967295
 801281c:	d045      	beq.n	80128aa <I2C_IsErrorOccurred+0xca>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 801281e:	f7fe fbf7 	bl	8011010 <HAL_GetTick>
 8012822:	4602      	mov	r2, r0
 8012824:	69fb      	ldr	r3, [r7, #28]
 8012826:	1ad3      	subs	r3, r2, r3
 8012828:	68ba      	ldr	r2, [r7, #8]
 801282a:	429a      	cmp	r2, r3
 801282c:	d302      	bcc.n	8012834 <I2C_IsErrorOccurred+0x54>
 801282e:	68bb      	ldr	r3, [r7, #8]
 8012830:	2b00      	cmp	r3, #0
 8012832:	d13a      	bne.n	80128aa <I2C_IsErrorOccurred+0xca>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 8012834:	68fb      	ldr	r3, [r7, #12]
 8012836:	681b      	ldr	r3, [r3, #0]
 8012838:	685b      	ldr	r3, [r3, #4]
 801283a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 801283e:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 8012840:	68fb      	ldr	r3, [r7, #12]
 8012842:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8012846:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8012848:	68fb      	ldr	r3, [r7, #12]
 801284a:	681b      	ldr	r3, [r3, #0]
 801284c:	699b      	ldr	r3, [r3, #24]
 801284e:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8012852:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8012856:	d121      	bne.n	801289c <I2C_IsErrorOccurred+0xbc>
 8012858:	697b      	ldr	r3, [r7, #20]
 801285a:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 801285e:	d01d      	beq.n	801289c <I2C_IsErrorOccurred+0xbc>
              (tmp1 != I2C_CR2_STOP) && \
 8012860:	7cfb      	ldrb	r3, [r7, #19]
 8012862:	2b20      	cmp	r3, #32
 8012864:	d01a      	beq.n	801289c <I2C_IsErrorOccurred+0xbc>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8012866:	68fb      	ldr	r3, [r7, #12]
 8012868:	681b      	ldr	r3, [r3, #0]
 801286a:	685a      	ldr	r2, [r3, #4]
 801286c:	68fb      	ldr	r3, [r7, #12]
 801286e:	681b      	ldr	r3, [r3, #0]
 8012870:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8012874:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 8012876:	f7fe fbcb 	bl	8011010 <HAL_GetTick>
 801287a:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 801287c:	e00e      	b.n	801289c <I2C_IsErrorOccurred+0xbc>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 801287e:	f7fe fbc7 	bl	8011010 <HAL_GetTick>
 8012882:	4602      	mov	r2, r0
 8012884:	69fb      	ldr	r3, [r7, #28]
 8012886:	1ad3      	subs	r3, r2, r3
 8012888:	2b19      	cmp	r3, #25
 801288a:	d907      	bls.n	801289c <I2C_IsErrorOccurred+0xbc>
            {
              error_code |= HAL_I2C_ERROR_TIMEOUT;
 801288c:	6a3b      	ldr	r3, [r7, #32]
 801288e:	f043 0320 	orr.w	r3, r3, #32
 8012892:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 8012894:	2301      	movs	r3, #1
 8012896:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

              break;
 801289a:	e006      	b.n	80128aa <I2C_IsErrorOccurred+0xca>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 801289c:	68fb      	ldr	r3, [r7, #12]
 801289e:	681b      	ldr	r3, [r3, #0]
 80128a0:	699b      	ldr	r3, [r3, #24]
 80128a2:	f003 0320 	and.w	r3, r3, #32
 80128a6:	2b20      	cmp	r3, #32
 80128a8:	d1e9      	bne.n	801287e <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 80128aa:	68fb      	ldr	r3, [r7, #12]
 80128ac:	681b      	ldr	r3, [r3, #0]
 80128ae:	699b      	ldr	r3, [r3, #24]
 80128b0:	f003 0320 	and.w	r3, r3, #32
 80128b4:	2b20      	cmp	r3, #32
 80128b6:	d003      	beq.n	80128c0 <I2C_IsErrorOccurred+0xe0>
 80128b8:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80128bc:	2b00      	cmp	r3, #0
 80128be:	d0aa      	beq.n	8012816 <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 80128c0:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80128c4:	2b00      	cmp	r3, #0
 80128c6:	d103      	bne.n	80128d0 <I2C_IsErrorOccurred+0xf0>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80128c8:	68fb      	ldr	r3, [r7, #12]
 80128ca:	681b      	ldr	r3, [r3, #0]
 80128cc:	2220      	movs	r2, #32
 80128ce:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 80128d0:	6a3b      	ldr	r3, [r7, #32]
 80128d2:	f043 0304 	orr.w	r3, r3, #4
 80128d6:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 80128d8:	2301      	movs	r3, #1
 80128da:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 80128de:	68fb      	ldr	r3, [r7, #12]
 80128e0:	681b      	ldr	r3, [r3, #0]
 80128e2:	699b      	ldr	r3, [r3, #24]
 80128e4:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 80128e6:	69bb      	ldr	r3, [r7, #24]
 80128e8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80128ec:	2b00      	cmp	r3, #0
 80128ee:	d00b      	beq.n	8012908 <I2C_IsErrorOccurred+0x128>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 80128f0:	6a3b      	ldr	r3, [r7, #32]
 80128f2:	f043 0301 	orr.w	r3, r3, #1
 80128f6:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 80128f8:	68fb      	ldr	r3, [r7, #12]
 80128fa:	681b      	ldr	r3, [r3, #0]
 80128fc:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8012900:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8012902:	2301      	movs	r3, #1
 8012904:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 8012908:	69bb      	ldr	r3, [r7, #24]
 801290a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 801290e:	2b00      	cmp	r3, #0
 8012910:	d00b      	beq.n	801292a <I2C_IsErrorOccurred+0x14a>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 8012912:	6a3b      	ldr	r3, [r7, #32]
 8012914:	f043 0308 	orr.w	r3, r3, #8
 8012918:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 801291a:	68fb      	ldr	r3, [r7, #12]
 801291c:	681b      	ldr	r3, [r3, #0]
 801291e:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8012922:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8012924:	2301      	movs	r3, #1
 8012926:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 801292a:	69bb      	ldr	r3, [r7, #24]
 801292c:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8012930:	2b00      	cmp	r3, #0
 8012932:	d00b      	beq.n	801294c <I2C_IsErrorOccurred+0x16c>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 8012934:	6a3b      	ldr	r3, [r7, #32]
 8012936:	f043 0302 	orr.w	r3, r3, #2
 801293a:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 801293c:	68fb      	ldr	r3, [r7, #12]
 801293e:	681b      	ldr	r3, [r3, #0]
 8012940:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8012944:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8012946:	2301      	movs	r3, #1
 8012948:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  if (status != HAL_OK)
 801294c:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8012950:	2b00      	cmp	r3, #0
 8012952:	d01c      	beq.n	801298e <I2C_IsErrorOccurred+0x1ae>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8012954:	68f8      	ldr	r0, [r7, #12]
 8012956:	f7ff fe45 	bl	80125e4 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 801295a:	68fb      	ldr	r3, [r7, #12]
 801295c:	681b      	ldr	r3, [r3, #0]
 801295e:	6859      	ldr	r1, [r3, #4]
 8012960:	68fb      	ldr	r3, [r7, #12]
 8012962:	681a      	ldr	r2, [r3, #0]
 8012964:	4b0d      	ldr	r3, [pc, #52]	@ (801299c <I2C_IsErrorOccurred+0x1bc>)
 8012966:	400b      	ands	r3, r1
 8012968:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 801296a:	68fb      	ldr	r3, [r7, #12]
 801296c:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 801296e:	6a3b      	ldr	r3, [r7, #32]
 8012970:	431a      	orrs	r2, r3
 8012972:	68fb      	ldr	r3, [r7, #12]
 8012974:	645a      	str	r2, [r3, #68]	@ 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8012976:	68fb      	ldr	r3, [r7, #12]
 8012978:	2220      	movs	r2, #32
 801297a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 801297e:	68fb      	ldr	r3, [r7, #12]
 8012980:	2200      	movs	r2, #0
 8012982:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8012986:	68fb      	ldr	r3, [r7, #12]
 8012988:	2200      	movs	r2, #0
 801298a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
  }

  return status;
 801298e:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
}
 8012992:	4618      	mov	r0, r3
 8012994:	3728      	adds	r7, #40	@ 0x28
 8012996:	46bd      	mov	sp, r7
 8012998:	bd80      	pop	{r7, pc}
 801299a:	bf00      	nop
 801299c:	fe00e800 	.word	0xfe00e800

080129a0 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 80129a0:	b480      	push	{r7}
 80129a2:	b087      	sub	sp, #28
 80129a4:	af00      	add	r7, sp, #0
 80129a6:	60f8      	str	r0, [r7, #12]
 80129a8:	607b      	str	r3, [r7, #4]
 80129aa:	460b      	mov	r3, r1
 80129ac:	817b      	strh	r3, [r7, #10]
 80129ae:	4613      	mov	r3, r2
 80129b0:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80129b2:	897b      	ldrh	r3, [r7, #10]
 80129b4:	f3c3 0209 	ubfx	r2, r3, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 80129b8:	7a7b      	ldrb	r3, [r7, #9]
 80129ba:	041b      	lsls	r3, r3, #16
 80129bc:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80129c0:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 80129c2:	687b      	ldr	r3, [r7, #4]
 80129c4:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80129c6:	6a3b      	ldr	r3, [r7, #32]
 80129c8:	4313      	orrs	r3, r2
 80129ca:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 80129ce:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 80129d0:	68fb      	ldr	r3, [r7, #12]
 80129d2:	681b      	ldr	r3, [r3, #0]
 80129d4:	685a      	ldr	r2, [r3, #4]
 80129d6:	6a3b      	ldr	r3, [r7, #32]
 80129d8:	0d5b      	lsrs	r3, r3, #21
 80129da:	f403 6180 	and.w	r1, r3, #1024	@ 0x400
 80129de:	4b08      	ldr	r3, [pc, #32]	@ (8012a00 <I2C_TransferConfig+0x60>)
 80129e0:	430b      	orrs	r3, r1
 80129e2:	43db      	mvns	r3, r3
 80129e4:	ea02 0103 	and.w	r1, r2, r3
 80129e8:	68fb      	ldr	r3, [r7, #12]
 80129ea:	681b      	ldr	r3, [r3, #0]
 80129ec:	697a      	ldr	r2, [r7, #20]
 80129ee:	430a      	orrs	r2, r1
 80129f0:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 80129f2:	bf00      	nop
 80129f4:	371c      	adds	r7, #28
 80129f6:	46bd      	mov	sp, r7
 80129f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80129fc:	4770      	bx	lr
 80129fe:	bf00      	nop
 8012a00:	03ff63ff 	.word	0x03ff63ff

08012a04 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8012a04:	b480      	push	{r7}
 8012a06:	b083      	sub	sp, #12
 8012a08:	af00      	add	r7, sp, #0
 8012a0a:	6078      	str	r0, [r7, #4]
 8012a0c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8012a0e:	687b      	ldr	r3, [r7, #4]
 8012a10:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8012a14:	b2db      	uxtb	r3, r3
 8012a16:	2b20      	cmp	r3, #32
 8012a18:	d138      	bne.n	8012a8c <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8012a1a:	687b      	ldr	r3, [r7, #4]
 8012a1c:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8012a20:	2b01      	cmp	r3, #1
 8012a22:	d101      	bne.n	8012a28 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8012a24:	2302      	movs	r3, #2
 8012a26:	e032      	b.n	8012a8e <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8012a28:	687b      	ldr	r3, [r7, #4]
 8012a2a:	2201      	movs	r2, #1
 8012a2c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8012a30:	687b      	ldr	r3, [r7, #4]
 8012a32:	2224      	movs	r2, #36	@ 0x24
 8012a34:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8012a38:	687b      	ldr	r3, [r7, #4]
 8012a3a:	681b      	ldr	r3, [r3, #0]
 8012a3c:	681a      	ldr	r2, [r3, #0]
 8012a3e:	687b      	ldr	r3, [r7, #4]
 8012a40:	681b      	ldr	r3, [r3, #0]
 8012a42:	f022 0201 	bic.w	r2, r2, #1
 8012a46:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8012a48:	687b      	ldr	r3, [r7, #4]
 8012a4a:	681b      	ldr	r3, [r3, #0]
 8012a4c:	681a      	ldr	r2, [r3, #0]
 8012a4e:	687b      	ldr	r3, [r7, #4]
 8012a50:	681b      	ldr	r3, [r3, #0]
 8012a52:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8012a56:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8012a58:	687b      	ldr	r3, [r7, #4]
 8012a5a:	681b      	ldr	r3, [r3, #0]
 8012a5c:	6819      	ldr	r1, [r3, #0]
 8012a5e:	687b      	ldr	r3, [r7, #4]
 8012a60:	681b      	ldr	r3, [r3, #0]
 8012a62:	683a      	ldr	r2, [r7, #0]
 8012a64:	430a      	orrs	r2, r1
 8012a66:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8012a68:	687b      	ldr	r3, [r7, #4]
 8012a6a:	681b      	ldr	r3, [r3, #0]
 8012a6c:	681a      	ldr	r2, [r3, #0]
 8012a6e:	687b      	ldr	r3, [r7, #4]
 8012a70:	681b      	ldr	r3, [r3, #0]
 8012a72:	f042 0201 	orr.w	r2, r2, #1
 8012a76:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8012a78:	687b      	ldr	r3, [r7, #4]
 8012a7a:	2220      	movs	r2, #32
 8012a7c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8012a80:	687b      	ldr	r3, [r7, #4]
 8012a82:	2200      	movs	r2, #0
 8012a84:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8012a88:	2300      	movs	r3, #0
 8012a8a:	e000      	b.n	8012a8e <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8012a8c:	2302      	movs	r3, #2
  }
}
 8012a8e:	4618      	mov	r0, r3
 8012a90:	370c      	adds	r7, #12
 8012a92:	46bd      	mov	sp, r7
 8012a94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012a98:	4770      	bx	lr

08012a9a <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8012a9a:	b480      	push	{r7}
 8012a9c:	b085      	sub	sp, #20
 8012a9e:	af00      	add	r7, sp, #0
 8012aa0:	6078      	str	r0, [r7, #4]
 8012aa2:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8012aa4:	687b      	ldr	r3, [r7, #4]
 8012aa6:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8012aaa:	b2db      	uxtb	r3, r3
 8012aac:	2b20      	cmp	r3, #32
 8012aae:	d139      	bne.n	8012b24 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8012ab0:	687b      	ldr	r3, [r7, #4]
 8012ab2:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8012ab6:	2b01      	cmp	r3, #1
 8012ab8:	d101      	bne.n	8012abe <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8012aba:	2302      	movs	r3, #2
 8012abc:	e033      	b.n	8012b26 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8012abe:	687b      	ldr	r3, [r7, #4]
 8012ac0:	2201      	movs	r2, #1
 8012ac2:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8012ac6:	687b      	ldr	r3, [r7, #4]
 8012ac8:	2224      	movs	r2, #36	@ 0x24
 8012aca:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8012ace:	687b      	ldr	r3, [r7, #4]
 8012ad0:	681b      	ldr	r3, [r3, #0]
 8012ad2:	681a      	ldr	r2, [r3, #0]
 8012ad4:	687b      	ldr	r3, [r7, #4]
 8012ad6:	681b      	ldr	r3, [r3, #0]
 8012ad8:	f022 0201 	bic.w	r2, r2, #1
 8012adc:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8012ade:	687b      	ldr	r3, [r7, #4]
 8012ae0:	681b      	ldr	r3, [r3, #0]
 8012ae2:	681b      	ldr	r3, [r3, #0]
 8012ae4:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8012ae6:	68fb      	ldr	r3, [r7, #12]
 8012ae8:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 8012aec:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8012aee:	683b      	ldr	r3, [r7, #0]
 8012af0:	021b      	lsls	r3, r3, #8
 8012af2:	68fa      	ldr	r2, [r7, #12]
 8012af4:	4313      	orrs	r3, r2
 8012af6:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8012af8:	687b      	ldr	r3, [r7, #4]
 8012afa:	681b      	ldr	r3, [r3, #0]
 8012afc:	68fa      	ldr	r2, [r7, #12]
 8012afe:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8012b00:	687b      	ldr	r3, [r7, #4]
 8012b02:	681b      	ldr	r3, [r3, #0]
 8012b04:	681a      	ldr	r2, [r3, #0]
 8012b06:	687b      	ldr	r3, [r7, #4]
 8012b08:	681b      	ldr	r3, [r3, #0]
 8012b0a:	f042 0201 	orr.w	r2, r2, #1
 8012b0e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8012b10:	687b      	ldr	r3, [r7, #4]
 8012b12:	2220      	movs	r2, #32
 8012b14:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8012b18:	687b      	ldr	r3, [r7, #4]
 8012b1a:	2200      	movs	r2, #0
 8012b1c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8012b20:	2300      	movs	r3, #0
 8012b22:	e000      	b.n	8012b26 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8012b24:	2302      	movs	r3, #2
  }
}
 8012b26:	4618      	mov	r0, r3
 8012b28:	3714      	adds	r7, #20
 8012b2a:	46bd      	mov	sp, r7
 8012b2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012b30:	4770      	bx	lr
	...

08012b34 <HAL_LTDC_Init>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LTDC_Init(LTDC_HandleTypeDef *hltdc)
{
 8012b34:	b580      	push	{r7, lr}
 8012b36:	b084      	sub	sp, #16
 8012b38:	af00      	add	r7, sp, #0
 8012b3a:	6078      	str	r0, [r7, #4]
  uint32_t tmp;
  uint32_t tmp1;

  /* Check the LTDC peripheral state */
  if (hltdc == NULL)
 8012b3c:	687b      	ldr	r3, [r7, #4]
 8012b3e:	2b00      	cmp	r3, #0
 8012b40:	d101      	bne.n	8012b46 <HAL_LTDC_Init+0x12>
  {
    return HAL_ERROR;
 8012b42:	2301      	movs	r3, #1
 8012b44:	e0bf      	b.n	8012cc6 <HAL_LTDC_Init+0x192>
    }
    /* Init the low level hardware */
    hltdc->MspInitCallback(hltdc);
  }
#else
  if (hltdc->State == HAL_LTDC_STATE_RESET)
 8012b46:	687b      	ldr	r3, [r7, #4]
 8012b48:	f893 30a1 	ldrb.w	r3, [r3, #161]	@ 0xa1
 8012b4c:	b2db      	uxtb	r3, r3
 8012b4e:	2b00      	cmp	r3, #0
 8012b50:	d106      	bne.n	8012b60 <HAL_LTDC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hltdc->Lock = HAL_UNLOCKED;
 8012b52:	687b      	ldr	r3, [r7, #4]
 8012b54:	2200      	movs	r2, #0
 8012b56:	f883 20a0 	strb.w	r2, [r3, #160]	@ 0xa0
    /* Init the low level hardware */
    HAL_LTDC_MspInit(hltdc);
 8012b5a:	6878      	ldr	r0, [r7, #4]
 8012b5c:	f7ee f9ba 	bl	8000ed4 <HAL_LTDC_MspInit>
  }
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 8012b60:	687b      	ldr	r3, [r7, #4]
 8012b62:	2202      	movs	r2, #2
 8012b64:	f883 20a1 	strb.w	r2, [r3, #161]	@ 0xa1

  /* Configure the HS, VS, DE and PC polarity */
  hltdc->Instance->GCR &= ~(LTDC_GCR_HSPOL | LTDC_GCR_VSPOL | LTDC_GCR_DEPOL | LTDC_GCR_PCPOL);
 8012b68:	687b      	ldr	r3, [r7, #4]
 8012b6a:	681b      	ldr	r3, [r3, #0]
 8012b6c:	699a      	ldr	r2, [r3, #24]
 8012b6e:	687b      	ldr	r3, [r7, #4]
 8012b70:	681b      	ldr	r3, [r3, #0]
 8012b72:	f022 4270 	bic.w	r2, r2, #4026531840	@ 0xf0000000
 8012b76:	619a      	str	r2, [r3, #24]
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 8012b78:	687b      	ldr	r3, [r7, #4]
 8012b7a:	681b      	ldr	r3, [r3, #0]
 8012b7c:	6999      	ldr	r1, [r3, #24]
 8012b7e:	687b      	ldr	r3, [r7, #4]
 8012b80:	685a      	ldr	r2, [r3, #4]
 8012b82:	687b      	ldr	r3, [r7, #4]
 8012b84:	689b      	ldr	r3, [r3, #8]
 8012b86:	431a      	orrs	r2, r3
                                     hltdc->Init.DEPolarity | hltdc->Init.PCPolarity);
 8012b88:	687b      	ldr	r3, [r7, #4]
 8012b8a:	68db      	ldr	r3, [r3, #12]
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 8012b8c:	431a      	orrs	r2, r3
                                     hltdc->Init.DEPolarity | hltdc->Init.PCPolarity);
 8012b8e:	687b      	ldr	r3, [r7, #4]
 8012b90:	691b      	ldr	r3, [r3, #16]
 8012b92:	431a      	orrs	r2, r3
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 8012b94:	687b      	ldr	r3, [r7, #4]
 8012b96:	681b      	ldr	r3, [r3, #0]
 8012b98:	430a      	orrs	r2, r1
 8012b9a:	619a      	str	r2, [r3, #24]

  /* Set Synchronization size */
  hltdc->Instance->SSCR &= ~(LTDC_SSCR_VSH | LTDC_SSCR_HSW);
 8012b9c:	687b      	ldr	r3, [r7, #4]
 8012b9e:	681b      	ldr	r3, [r3, #0]
 8012ba0:	6899      	ldr	r1, [r3, #8]
 8012ba2:	687b      	ldr	r3, [r7, #4]
 8012ba4:	681a      	ldr	r2, [r3, #0]
 8012ba6:	4b4a      	ldr	r3, [pc, #296]	@ (8012cd0 <HAL_LTDC_Init+0x19c>)
 8012ba8:	400b      	ands	r3, r1
 8012baa:	6093      	str	r3, [r2, #8]
  tmp = (hltdc->Init.HorizontalSync << 16U);
 8012bac:	687b      	ldr	r3, [r7, #4]
 8012bae:	695b      	ldr	r3, [r3, #20]
 8012bb0:	041b      	lsls	r3, r3, #16
 8012bb2:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->SSCR |= (tmp | hltdc->Init.VerticalSync);
 8012bb4:	687b      	ldr	r3, [r7, #4]
 8012bb6:	681b      	ldr	r3, [r3, #0]
 8012bb8:	6899      	ldr	r1, [r3, #8]
 8012bba:	687b      	ldr	r3, [r7, #4]
 8012bbc:	699a      	ldr	r2, [r3, #24]
 8012bbe:	68fb      	ldr	r3, [r7, #12]
 8012bc0:	431a      	orrs	r2, r3
 8012bc2:	687b      	ldr	r3, [r7, #4]
 8012bc4:	681b      	ldr	r3, [r3, #0]
 8012bc6:	430a      	orrs	r2, r1
 8012bc8:	609a      	str	r2, [r3, #8]

  /* Set Accumulated Back porch */
  hltdc->Instance->BPCR &= ~(LTDC_BPCR_AVBP | LTDC_BPCR_AHBP);
 8012bca:	687b      	ldr	r3, [r7, #4]
 8012bcc:	681b      	ldr	r3, [r3, #0]
 8012bce:	68d9      	ldr	r1, [r3, #12]
 8012bd0:	687b      	ldr	r3, [r7, #4]
 8012bd2:	681a      	ldr	r2, [r3, #0]
 8012bd4:	4b3e      	ldr	r3, [pc, #248]	@ (8012cd0 <HAL_LTDC_Init+0x19c>)
 8012bd6:	400b      	ands	r3, r1
 8012bd8:	60d3      	str	r3, [r2, #12]
  tmp = (hltdc->Init.AccumulatedHBP << 16U);
 8012bda:	687b      	ldr	r3, [r7, #4]
 8012bdc:	69db      	ldr	r3, [r3, #28]
 8012bde:	041b      	lsls	r3, r3, #16
 8012be0:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->BPCR |= (tmp | hltdc->Init.AccumulatedVBP);
 8012be2:	687b      	ldr	r3, [r7, #4]
 8012be4:	681b      	ldr	r3, [r3, #0]
 8012be6:	68d9      	ldr	r1, [r3, #12]
 8012be8:	687b      	ldr	r3, [r7, #4]
 8012bea:	6a1a      	ldr	r2, [r3, #32]
 8012bec:	68fb      	ldr	r3, [r7, #12]
 8012bee:	431a      	orrs	r2, r3
 8012bf0:	687b      	ldr	r3, [r7, #4]
 8012bf2:	681b      	ldr	r3, [r3, #0]
 8012bf4:	430a      	orrs	r2, r1
 8012bf6:	60da      	str	r2, [r3, #12]

  /* Set Accumulated Active Width */
  hltdc->Instance->AWCR &= ~(LTDC_AWCR_AAH | LTDC_AWCR_AAW);
 8012bf8:	687b      	ldr	r3, [r7, #4]
 8012bfa:	681b      	ldr	r3, [r3, #0]
 8012bfc:	6919      	ldr	r1, [r3, #16]
 8012bfe:	687b      	ldr	r3, [r7, #4]
 8012c00:	681a      	ldr	r2, [r3, #0]
 8012c02:	4b33      	ldr	r3, [pc, #204]	@ (8012cd0 <HAL_LTDC_Init+0x19c>)
 8012c04:	400b      	ands	r3, r1
 8012c06:	6113      	str	r3, [r2, #16]
  tmp = (hltdc->Init.AccumulatedActiveW << 16U);
 8012c08:	687b      	ldr	r3, [r7, #4]
 8012c0a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8012c0c:	041b      	lsls	r3, r3, #16
 8012c0e:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->AWCR |= (tmp | hltdc->Init.AccumulatedActiveH);
 8012c10:	687b      	ldr	r3, [r7, #4]
 8012c12:	681b      	ldr	r3, [r3, #0]
 8012c14:	6919      	ldr	r1, [r3, #16]
 8012c16:	687b      	ldr	r3, [r7, #4]
 8012c18:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8012c1a:	68fb      	ldr	r3, [r7, #12]
 8012c1c:	431a      	orrs	r2, r3
 8012c1e:	687b      	ldr	r3, [r7, #4]
 8012c20:	681b      	ldr	r3, [r3, #0]
 8012c22:	430a      	orrs	r2, r1
 8012c24:	611a      	str	r2, [r3, #16]

  /* Set Total Width */
  hltdc->Instance->TWCR &= ~(LTDC_TWCR_TOTALH | LTDC_TWCR_TOTALW);
 8012c26:	687b      	ldr	r3, [r7, #4]
 8012c28:	681b      	ldr	r3, [r3, #0]
 8012c2a:	6959      	ldr	r1, [r3, #20]
 8012c2c:	687b      	ldr	r3, [r7, #4]
 8012c2e:	681a      	ldr	r2, [r3, #0]
 8012c30:	4b27      	ldr	r3, [pc, #156]	@ (8012cd0 <HAL_LTDC_Init+0x19c>)
 8012c32:	400b      	ands	r3, r1
 8012c34:	6153      	str	r3, [r2, #20]
  tmp = (hltdc->Init.TotalWidth << 16U);
 8012c36:	687b      	ldr	r3, [r7, #4]
 8012c38:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8012c3a:	041b      	lsls	r3, r3, #16
 8012c3c:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->TWCR |= (tmp | hltdc->Init.TotalHeigh);
 8012c3e:	687b      	ldr	r3, [r7, #4]
 8012c40:	681b      	ldr	r3, [r3, #0]
 8012c42:	6959      	ldr	r1, [r3, #20]
 8012c44:	687b      	ldr	r3, [r7, #4]
 8012c46:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8012c48:	68fb      	ldr	r3, [r7, #12]
 8012c4a:	431a      	orrs	r2, r3
 8012c4c:	687b      	ldr	r3, [r7, #4]
 8012c4e:	681b      	ldr	r3, [r3, #0]
 8012c50:	430a      	orrs	r2, r1
 8012c52:	615a      	str	r2, [r3, #20]

  /* Set the background color value */
  tmp = ((uint32_t)(hltdc->Init.Backcolor.Green) << 8U);
 8012c54:	687b      	ldr	r3, [r7, #4]
 8012c56:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8012c5a:	021b      	lsls	r3, r3, #8
 8012c5c:	60fb      	str	r3, [r7, #12]
  tmp1 = ((uint32_t)(hltdc->Init.Backcolor.Red) << 16U);
 8012c5e:	687b      	ldr	r3, [r7, #4]
 8012c60:	f893 3036 	ldrb.w	r3, [r3, #54]	@ 0x36
 8012c64:	041b      	lsls	r3, r3, #16
 8012c66:	60bb      	str	r3, [r7, #8]
  hltdc->Instance->BCCR &= ~(LTDC_BCCR_BCBLUE | LTDC_BCCR_BCGREEN | LTDC_BCCR_BCRED);
 8012c68:	687b      	ldr	r3, [r7, #4]
 8012c6a:	681b      	ldr	r3, [r3, #0]
 8012c6c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8012c6e:	687b      	ldr	r3, [r7, #4]
 8012c70:	681b      	ldr	r3, [r3, #0]
 8012c72:	f002 427f 	and.w	r2, r2, #4278190080	@ 0xff000000
 8012c76:	62da      	str	r2, [r3, #44]	@ 0x2c
  hltdc->Instance->BCCR |= (tmp1 | tmp | hltdc->Init.Backcolor.Blue);
 8012c78:	687b      	ldr	r3, [r7, #4]
 8012c7a:	681b      	ldr	r3, [r3, #0]
 8012c7c:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8012c7e:	68ba      	ldr	r2, [r7, #8]
 8012c80:	68fb      	ldr	r3, [r7, #12]
 8012c82:	4313      	orrs	r3, r2
 8012c84:	687a      	ldr	r2, [r7, #4]
 8012c86:	f892 2034 	ldrb.w	r2, [r2, #52]	@ 0x34
 8012c8a:	431a      	orrs	r2, r3
 8012c8c:	687b      	ldr	r3, [r7, #4]
 8012c8e:	681b      	ldr	r3, [r3, #0]
 8012c90:	430a      	orrs	r2, r1
 8012c92:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Enable the Transfer Error and FIFO underrun interrupts */
  __HAL_LTDC_ENABLE_IT(hltdc, LTDC_IT_TE | LTDC_IT_FU);
 8012c94:	687b      	ldr	r3, [r7, #4]
 8012c96:	681b      	ldr	r3, [r3, #0]
 8012c98:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8012c9a:	687b      	ldr	r3, [r7, #4]
 8012c9c:	681b      	ldr	r3, [r3, #0]
 8012c9e:	f042 0206 	orr.w	r2, r2, #6
 8012ca2:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Enable LTDC by setting LTDCEN bit */
  __HAL_LTDC_ENABLE(hltdc);
 8012ca4:	687b      	ldr	r3, [r7, #4]
 8012ca6:	681b      	ldr	r3, [r3, #0]
 8012ca8:	699a      	ldr	r2, [r3, #24]
 8012caa:	687b      	ldr	r3, [r7, #4]
 8012cac:	681b      	ldr	r3, [r3, #0]
 8012cae:	f042 0201 	orr.w	r2, r2, #1
 8012cb2:	619a      	str	r2, [r3, #24]

  /* Initialize the error code */
  hltdc->ErrorCode = HAL_LTDC_ERROR_NONE;
 8012cb4:	687b      	ldr	r3, [r7, #4]
 8012cb6:	2200      	movs	r2, #0
 8012cb8:	f8c3 20a4 	str.w	r2, [r3, #164]	@ 0xa4

  /* Initialize the LTDC state*/
  hltdc->State = HAL_LTDC_STATE_READY;
 8012cbc:	687b      	ldr	r3, [r7, #4]
 8012cbe:	2201      	movs	r2, #1
 8012cc0:	f883 20a1 	strb.w	r2, [r3, #161]	@ 0xa1

  return HAL_OK;
 8012cc4:	2300      	movs	r3, #0
}
 8012cc6:	4618      	mov	r0, r3
 8012cc8:	3710      	adds	r7, #16
 8012cca:	46bd      	mov	sp, r7
 8012ccc:	bd80      	pop	{r7, pc}
 8012cce:	bf00      	nop
 8012cd0:	f000f800 	.word	0xf000f800

08012cd4 <HAL_LTDC_IRQHandler>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval HAL status
  */
void HAL_LTDC_IRQHandler(LTDC_HandleTypeDef *hltdc)
{
 8012cd4:	b580      	push	{r7, lr}
 8012cd6:	b084      	sub	sp, #16
 8012cd8:	af00      	add	r7, sp, #0
 8012cda:	6078      	str	r0, [r7, #4]
  uint32_t isrflags  = READ_REG(hltdc->Instance->ISR);
 8012cdc:	687b      	ldr	r3, [r7, #4]
 8012cde:	681b      	ldr	r3, [r3, #0]
 8012ce0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8012ce2:	60fb      	str	r3, [r7, #12]
  uint32_t itsources = READ_REG(hltdc->Instance->IER);
 8012ce4:	687b      	ldr	r3, [r7, #4]
 8012ce6:	681b      	ldr	r3, [r3, #0]
 8012ce8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8012cea:	60bb      	str	r3, [r7, #8]

  /* Transfer Error Interrupt management ***************************************/
  if (((isrflags & LTDC_ISR_TERRIF) != 0U) && ((itsources & LTDC_IER_TERRIE) != 0U))
 8012cec:	68fb      	ldr	r3, [r7, #12]
 8012cee:	f003 0304 	and.w	r3, r3, #4
 8012cf2:	2b00      	cmp	r3, #0
 8012cf4:	d023      	beq.n	8012d3e <HAL_LTDC_IRQHandler+0x6a>
 8012cf6:	68bb      	ldr	r3, [r7, #8]
 8012cf8:	f003 0304 	and.w	r3, r3, #4
 8012cfc:	2b00      	cmp	r3, #0
 8012cfe:	d01e      	beq.n	8012d3e <HAL_LTDC_IRQHandler+0x6a>
  {
    /* Disable the transfer Error interrupt */
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_TE);
 8012d00:	687b      	ldr	r3, [r7, #4]
 8012d02:	681b      	ldr	r3, [r3, #0]
 8012d04:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8012d06:	687b      	ldr	r3, [r7, #4]
 8012d08:	681b      	ldr	r3, [r3, #0]
 8012d0a:	f022 0204 	bic.w	r2, r2, #4
 8012d0e:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Clear the transfer error flag */
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_TE);
 8012d10:	687b      	ldr	r3, [r7, #4]
 8012d12:	681b      	ldr	r3, [r3, #0]
 8012d14:	2204      	movs	r2, #4
 8012d16:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Update error code */
    hltdc->ErrorCode |= HAL_LTDC_ERROR_TE;
 8012d18:	687b      	ldr	r3, [r7, #4]
 8012d1a:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8012d1e:	f043 0201 	orr.w	r2, r3, #1
 8012d22:	687b      	ldr	r3, [r7, #4]
 8012d24:	f8c3 20a4 	str.w	r2, [r3, #164]	@ 0xa4

    /* Change LTDC state */
    hltdc->State = HAL_LTDC_STATE_ERROR;
 8012d28:	687b      	ldr	r3, [r7, #4]
 8012d2a:	2204      	movs	r2, #4
 8012d2c:	f883 20a1 	strb.w	r2, [r3, #161]	@ 0xa1

    /* Process unlocked */
    __HAL_UNLOCK(hltdc);
 8012d30:	687b      	ldr	r3, [r7, #4]
 8012d32:	2200      	movs	r2, #0
 8012d34:	f883 20a0 	strb.w	r2, [r3, #160]	@ 0xa0
#if (USE_HAL_LTDC_REGISTER_CALLBACKS == 1)
    /*Call registered error callback*/
    hltdc->ErrorCallback(hltdc);
#else
    /* Call legacy error callback*/
    HAL_LTDC_ErrorCallback(hltdc);
 8012d38:	6878      	ldr	r0, [r7, #4]
 8012d3a:	f000 f86f 	bl	8012e1c <HAL_LTDC_ErrorCallback>
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */
  }

  /* FIFO underrun Interrupt management ***************************************/
  if (((isrflags & LTDC_ISR_FUIF) != 0U) && ((itsources & LTDC_IER_FUIE) != 0U))
 8012d3e:	68fb      	ldr	r3, [r7, #12]
 8012d40:	f003 0302 	and.w	r3, r3, #2
 8012d44:	2b00      	cmp	r3, #0
 8012d46:	d023      	beq.n	8012d90 <HAL_LTDC_IRQHandler+0xbc>
 8012d48:	68bb      	ldr	r3, [r7, #8]
 8012d4a:	f003 0302 	and.w	r3, r3, #2
 8012d4e:	2b00      	cmp	r3, #0
 8012d50:	d01e      	beq.n	8012d90 <HAL_LTDC_IRQHandler+0xbc>
  {
    /* Disable the FIFO underrun interrupt */
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_FU);
 8012d52:	687b      	ldr	r3, [r7, #4]
 8012d54:	681b      	ldr	r3, [r3, #0]
 8012d56:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8012d58:	687b      	ldr	r3, [r7, #4]
 8012d5a:	681b      	ldr	r3, [r3, #0]
 8012d5c:	f022 0202 	bic.w	r2, r2, #2
 8012d60:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Clear the FIFO underrun flag */
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_FU);
 8012d62:	687b      	ldr	r3, [r7, #4]
 8012d64:	681b      	ldr	r3, [r3, #0]
 8012d66:	2202      	movs	r2, #2
 8012d68:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Update error code */
    hltdc->ErrorCode |= HAL_LTDC_ERROR_FU;
 8012d6a:	687b      	ldr	r3, [r7, #4]
 8012d6c:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8012d70:	f043 0202 	orr.w	r2, r3, #2
 8012d74:	687b      	ldr	r3, [r7, #4]
 8012d76:	f8c3 20a4 	str.w	r2, [r3, #164]	@ 0xa4

    /* Change LTDC state */
    hltdc->State = HAL_LTDC_STATE_ERROR;
 8012d7a:	687b      	ldr	r3, [r7, #4]
 8012d7c:	2204      	movs	r2, #4
 8012d7e:	f883 20a1 	strb.w	r2, [r3, #161]	@ 0xa1

    /* Process unlocked */
    __HAL_UNLOCK(hltdc);
 8012d82:	687b      	ldr	r3, [r7, #4]
 8012d84:	2200      	movs	r2, #0
 8012d86:	f883 20a0 	strb.w	r2, [r3, #160]	@ 0xa0
#if (USE_HAL_LTDC_REGISTER_CALLBACKS == 1)
    /*Call registered error callback*/
    hltdc->ErrorCallback(hltdc);
#else
    /* Call legacy error callback*/
    HAL_LTDC_ErrorCallback(hltdc);
 8012d8a:	6878      	ldr	r0, [r7, #4]
 8012d8c:	f000 f846 	bl	8012e1c <HAL_LTDC_ErrorCallback>
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */
  }

  /* Line Interrupt management ************************************************/
  if (((isrflags & LTDC_ISR_LIF) != 0U) && ((itsources & LTDC_IER_LIE) != 0U))
 8012d90:	68fb      	ldr	r3, [r7, #12]
 8012d92:	f003 0301 	and.w	r3, r3, #1
 8012d96:	2b00      	cmp	r3, #0
 8012d98:	d01b      	beq.n	8012dd2 <HAL_LTDC_IRQHandler+0xfe>
 8012d9a:	68bb      	ldr	r3, [r7, #8]
 8012d9c:	f003 0301 	and.w	r3, r3, #1
 8012da0:	2b00      	cmp	r3, #0
 8012da2:	d016      	beq.n	8012dd2 <HAL_LTDC_IRQHandler+0xfe>
  {
    /* Disable the Line interrupt */
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_LI);
 8012da4:	687b      	ldr	r3, [r7, #4]
 8012da6:	681b      	ldr	r3, [r3, #0]
 8012da8:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8012daa:	687b      	ldr	r3, [r7, #4]
 8012dac:	681b      	ldr	r3, [r3, #0]
 8012dae:	f022 0201 	bic.w	r2, r2, #1
 8012db2:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Clear the Line interrupt flag */
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_LI);
 8012db4:	687b      	ldr	r3, [r7, #4]
 8012db6:	681b      	ldr	r3, [r3, #0]
 8012db8:	2201      	movs	r2, #1
 8012dba:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Change LTDC state */
    hltdc->State = HAL_LTDC_STATE_READY;
 8012dbc:	687b      	ldr	r3, [r7, #4]
 8012dbe:	2201      	movs	r2, #1
 8012dc0:	f883 20a1 	strb.w	r2, [r3, #161]	@ 0xa1

    /* Process unlocked */
    __HAL_UNLOCK(hltdc);
 8012dc4:	687b      	ldr	r3, [r7, #4]
 8012dc6:	2200      	movs	r2, #0
 8012dc8:	f883 20a0 	strb.w	r2, [r3, #160]	@ 0xa0
#if (USE_HAL_LTDC_REGISTER_CALLBACKS == 1)
    /*Call registered Line Event callback */
    hltdc->LineEventCallback(hltdc);
#else
    /*Call Legacy Line Event callback */
    HAL_LTDC_LineEventCallback(hltdc);
 8012dcc:	6878      	ldr	r0, [r7, #4]
 8012dce:	f7f0 fe61 	bl	8003a94 <HAL_LTDC_LineEventCallback>
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */
  }

  /* Register reload Interrupt management ***************************************/
  if (((isrflags & LTDC_ISR_RRIF) != 0U) && ((itsources & LTDC_IER_RRIE) != 0U))
 8012dd2:	68fb      	ldr	r3, [r7, #12]
 8012dd4:	f003 0308 	and.w	r3, r3, #8
 8012dd8:	2b00      	cmp	r3, #0
 8012dda:	d01b      	beq.n	8012e14 <HAL_LTDC_IRQHandler+0x140>
 8012ddc:	68bb      	ldr	r3, [r7, #8]
 8012dde:	f003 0308 	and.w	r3, r3, #8
 8012de2:	2b00      	cmp	r3, #0
 8012de4:	d016      	beq.n	8012e14 <HAL_LTDC_IRQHandler+0x140>
  {
    /* Disable the register reload interrupt */
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_RR);
 8012de6:	687b      	ldr	r3, [r7, #4]
 8012de8:	681b      	ldr	r3, [r3, #0]
 8012dea:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8012dec:	687b      	ldr	r3, [r7, #4]
 8012dee:	681b      	ldr	r3, [r3, #0]
 8012df0:	f022 0208 	bic.w	r2, r2, #8
 8012df4:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Clear the register reload flag */
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_RR);
 8012df6:	687b      	ldr	r3, [r7, #4]
 8012df8:	681b      	ldr	r3, [r3, #0]
 8012dfa:	2208      	movs	r2, #8
 8012dfc:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Change LTDC state */
    hltdc->State = HAL_LTDC_STATE_READY;
 8012dfe:	687b      	ldr	r3, [r7, #4]
 8012e00:	2201      	movs	r2, #1
 8012e02:	f883 20a1 	strb.w	r2, [r3, #161]	@ 0xa1

    /* Process unlocked */
    __HAL_UNLOCK(hltdc);
 8012e06:	687b      	ldr	r3, [r7, #4]
 8012e08:	2200      	movs	r2, #0
 8012e0a:	f883 20a0 	strb.w	r2, [r3, #160]	@ 0xa0
#if (USE_HAL_LTDC_REGISTER_CALLBACKS == 1)
    /*Call registered reload Event callback */
    hltdc->ReloadEventCallback(hltdc);
#else
    /*Call Legacy Reload Event callback */
    HAL_LTDC_ReloadEventCallback(hltdc);
 8012e0e:	6878      	ldr	r0, [r7, #4]
 8012e10:	f000 f80e 	bl	8012e30 <HAL_LTDC_ReloadEventCallback>
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */
  }
}
 8012e14:	bf00      	nop
 8012e16:	3710      	adds	r7, #16
 8012e18:	46bd      	mov	sp, r7
 8012e1a:	bd80      	pop	{r7, pc}

08012e1c <HAL_LTDC_ErrorCallback>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval None
  */
__weak void HAL_LTDC_ErrorCallback(LTDC_HandleTypeDef *hltdc)
{
 8012e1c:	b480      	push	{r7}
 8012e1e:	b083      	sub	sp, #12
 8012e20:	af00      	add	r7, sp, #0
 8012e22:	6078      	str	r0, [r7, #4]
  UNUSED(hltdc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LTDC_ErrorCallback could be implemented in the user file
   */
}
 8012e24:	bf00      	nop
 8012e26:	370c      	adds	r7, #12
 8012e28:	46bd      	mov	sp, r7
 8012e2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012e2e:	4770      	bx	lr

08012e30 <HAL_LTDC_ReloadEventCallback>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval None
  */
__weak void HAL_LTDC_ReloadEventCallback(LTDC_HandleTypeDef *hltdc)
{
 8012e30:	b480      	push	{r7}
 8012e32:	b083      	sub	sp, #12
 8012e34:	af00      	add	r7, sp, #0
 8012e36:	6078      	str	r0, [r7, #4]
  UNUSED(hltdc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LTDC_ReloadEvenCallback could be implemented in the user file
   */
}
 8012e38:	bf00      	nop
 8012e3a:	370c      	adds	r7, #12
 8012e3c:	46bd      	mov	sp, r7
 8012e3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012e42:	4770      	bx	lr

08012e44 <HAL_LTDC_ConfigLayer>:
  *                    This parameter can be one of the following values:
  *                    LTDC_LAYER_1 (0) or LTDC_LAYER_2 (1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LTDC_ConfigLayer(LTDC_HandleTypeDef *hltdc, LTDC_LayerCfgTypeDef *pLayerCfg, uint32_t LayerIdx)
{
 8012e44:	b5b0      	push	{r4, r5, r7, lr}
 8012e46:	b084      	sub	sp, #16
 8012e48:	af00      	add	r7, sp, #0
 8012e4a:	60f8      	str	r0, [r7, #12]
 8012e4c:	60b9      	str	r1, [r7, #8]
 8012e4e:	607a      	str	r2, [r7, #4]
  assert_param(IS_LTDC_BLENDING_FACTOR2(pLayerCfg->BlendingFactor2));
  assert_param(IS_LTDC_CFBLL(pLayerCfg->ImageWidth));
  assert_param(IS_LTDC_CFBLNBR(pLayerCfg->ImageHeight));

  /* Process locked */
  __HAL_LOCK(hltdc);
 8012e50:	68fb      	ldr	r3, [r7, #12]
 8012e52:	f893 30a0 	ldrb.w	r3, [r3, #160]	@ 0xa0
 8012e56:	2b01      	cmp	r3, #1
 8012e58:	d101      	bne.n	8012e5e <HAL_LTDC_ConfigLayer+0x1a>
 8012e5a:	2302      	movs	r3, #2
 8012e5c:	e02c      	b.n	8012eb8 <HAL_LTDC_ConfigLayer+0x74>
 8012e5e:	68fb      	ldr	r3, [r7, #12]
 8012e60:	2201      	movs	r2, #1
 8012e62:	f883 20a0 	strb.w	r2, [r3, #160]	@ 0xa0

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 8012e66:	68fb      	ldr	r3, [r7, #12]
 8012e68:	2202      	movs	r2, #2
 8012e6a:	f883 20a1 	strb.w	r2, [r3, #161]	@ 0xa1

  /* Copy new layer configuration into handle structure */
  hltdc->LayerCfg[LayerIdx] = *pLayerCfg;
 8012e6e:	68fa      	ldr	r2, [r7, #12]
 8012e70:	687b      	ldr	r3, [r7, #4]
 8012e72:	2134      	movs	r1, #52	@ 0x34
 8012e74:	fb01 f303 	mul.w	r3, r1, r3
 8012e78:	4413      	add	r3, r2
 8012e7a:	f103 0238 	add.w	r2, r3, #56	@ 0x38
 8012e7e:	68bb      	ldr	r3, [r7, #8]
 8012e80:	4614      	mov	r4, r2
 8012e82:	461d      	mov	r5, r3
 8012e84:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8012e86:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8012e88:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8012e8a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8012e8c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8012e8e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8012e90:	682b      	ldr	r3, [r5, #0]
 8012e92:	6023      	str	r3, [r4, #0]

  /* Configure the LTDC Layer */
  LTDC_SetConfig(hltdc, pLayerCfg, LayerIdx);
 8012e94:	687a      	ldr	r2, [r7, #4]
 8012e96:	68b9      	ldr	r1, [r7, #8]
 8012e98:	68f8      	ldr	r0, [r7, #12]
 8012e9a:	f000 f849 	bl	8012f30 <LTDC_SetConfig>

  /* Set the Immediate Reload type */
  hltdc->Instance->SRCR = LTDC_SRCR_IMR;
 8012e9e:	68fb      	ldr	r3, [r7, #12]
 8012ea0:	681b      	ldr	r3, [r3, #0]
 8012ea2:	2201      	movs	r2, #1
 8012ea4:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Initialize the LTDC state*/
  hltdc->State  = HAL_LTDC_STATE_READY;
 8012ea6:	68fb      	ldr	r3, [r7, #12]
 8012ea8:	2201      	movs	r2, #1
 8012eaa:	f883 20a1 	strb.w	r2, [r3, #161]	@ 0xa1

  /* Process unlocked */
  __HAL_UNLOCK(hltdc);
 8012eae:	68fb      	ldr	r3, [r7, #12]
 8012eb0:	2200      	movs	r2, #0
 8012eb2:	f883 20a0 	strb.w	r2, [r3, #160]	@ 0xa0

  return HAL_OK;
 8012eb6:	2300      	movs	r3, #0
}
 8012eb8:	4618      	mov	r0, r3
 8012eba:	3710      	adds	r7, #16
 8012ebc:	46bd      	mov	sp, r7
 8012ebe:	bdb0      	pop	{r4, r5, r7, pc}

08012ec0 <HAL_LTDC_ProgramLineEvent>:
  * @param  Line    Line Interrupt Position.
  * @note   User application may resort to HAL_LTDC_LineEventCallback() at line interrupt generation.
  * @retval  HAL status
  */
HAL_StatusTypeDef HAL_LTDC_ProgramLineEvent(LTDC_HandleTypeDef *hltdc, uint32_t Line)
{
 8012ec0:	b480      	push	{r7}
 8012ec2:	b083      	sub	sp, #12
 8012ec4:	af00      	add	r7, sp, #0
 8012ec6:	6078      	str	r0, [r7, #4]
 8012ec8:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_LTDC_LIPOS(Line));

  /* Process locked */
  __HAL_LOCK(hltdc);
 8012eca:	687b      	ldr	r3, [r7, #4]
 8012ecc:	f893 30a0 	ldrb.w	r3, [r3, #160]	@ 0xa0
 8012ed0:	2b01      	cmp	r3, #1
 8012ed2:	d101      	bne.n	8012ed8 <HAL_LTDC_ProgramLineEvent+0x18>
 8012ed4:	2302      	movs	r3, #2
 8012ed6:	e023      	b.n	8012f20 <HAL_LTDC_ProgramLineEvent+0x60>
 8012ed8:	687b      	ldr	r3, [r7, #4]
 8012eda:	2201      	movs	r2, #1
 8012edc:	f883 20a0 	strb.w	r2, [r3, #160]	@ 0xa0

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 8012ee0:	687b      	ldr	r3, [r7, #4]
 8012ee2:	2202      	movs	r2, #2
 8012ee4:	f883 20a1 	strb.w	r2, [r3, #161]	@ 0xa1

  /* Disable the Line interrupt */
  __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_LI);
 8012ee8:	687b      	ldr	r3, [r7, #4]
 8012eea:	681b      	ldr	r3, [r3, #0]
 8012eec:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8012eee:	687b      	ldr	r3, [r7, #4]
 8012ef0:	681b      	ldr	r3, [r3, #0]
 8012ef2:	f022 0201 	bic.w	r2, r2, #1
 8012ef6:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Set the Line Interrupt position */
  LTDC->LIPCR = (uint32_t)Line;
 8012ef8:	4a0c      	ldr	r2, [pc, #48]	@ (8012f2c <HAL_LTDC_ProgramLineEvent+0x6c>)
 8012efa:	683b      	ldr	r3, [r7, #0]
 8012efc:	6413      	str	r3, [r2, #64]	@ 0x40

  /* Enable the Line interrupt */
  __HAL_LTDC_ENABLE_IT(hltdc, LTDC_IT_LI);
 8012efe:	687b      	ldr	r3, [r7, #4]
 8012f00:	681b      	ldr	r3, [r3, #0]
 8012f02:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8012f04:	687b      	ldr	r3, [r7, #4]
 8012f06:	681b      	ldr	r3, [r3, #0]
 8012f08:	f042 0201 	orr.w	r2, r2, #1
 8012f0c:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Change the LTDC state*/
  hltdc->State = HAL_LTDC_STATE_READY;
 8012f0e:	687b      	ldr	r3, [r7, #4]
 8012f10:	2201      	movs	r2, #1
 8012f12:	f883 20a1 	strb.w	r2, [r3, #161]	@ 0xa1

  /* Process unlocked */
  __HAL_UNLOCK(hltdc);
 8012f16:	687b      	ldr	r3, [r7, #4]
 8012f18:	2200      	movs	r2, #0
 8012f1a:	f883 20a0 	strb.w	r2, [r3, #160]	@ 0xa0

  return HAL_OK;
 8012f1e:	2300      	movs	r3, #0
}
 8012f20:	4618      	mov	r0, r3
 8012f22:	370c      	adds	r7, #12
 8012f24:	46bd      	mov	sp, r7
 8012f26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012f2a:	4770      	bx	lr
 8012f2c:	50001000 	.word	0x50001000

08012f30 <LTDC_SetConfig>:
  * @param  LayerIdx  LTDC Layer index.
  *                   This parameter can be one of the following values: LTDC_LAYER_1 (0) or LTDC_LAYER_2 (1)
  * @retval None
  */
static void LTDC_SetConfig(LTDC_HandleTypeDef *hltdc, LTDC_LayerCfgTypeDef *pLayerCfg, uint32_t LayerIdx)
{
 8012f30:	b480      	push	{r7}
 8012f32:	b089      	sub	sp, #36	@ 0x24
 8012f34:	af00      	add	r7, sp, #0
 8012f36:	60f8      	str	r0, [r7, #12]
 8012f38:	60b9      	str	r1, [r7, #8]
 8012f3a:	607a      	str	r2, [r7, #4]
  uint32_t tmp;
  uint32_t tmp1;
  uint32_t tmp2;

  /* Configure the horizontal start and stop position */
  tmp = ((pLayerCfg->WindowX1 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U)) << 16U);
 8012f3c:	68bb      	ldr	r3, [r7, #8]
 8012f3e:	685a      	ldr	r2, [r3, #4]
 8012f40:	68fb      	ldr	r3, [r7, #12]
 8012f42:	681b      	ldr	r3, [r3, #0]
 8012f44:	68db      	ldr	r3, [r3, #12]
 8012f46:	0c1b      	lsrs	r3, r3, #16
 8012f48:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8012f4c:	4413      	add	r3, r2
 8012f4e:	041b      	lsls	r3, r3, #16
 8012f50:	61fb      	str	r3, [r7, #28]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR &= ~(LTDC_LxWHPCR_WHSTPOS | LTDC_LxWHPCR_WHSPPOS);
 8012f52:	68fb      	ldr	r3, [r7, #12]
 8012f54:	681b      	ldr	r3, [r3, #0]
 8012f56:	461a      	mov	r2, r3
 8012f58:	687b      	ldr	r3, [r7, #4]
 8012f5a:	01db      	lsls	r3, r3, #7
 8012f5c:	4413      	add	r3, r2
 8012f5e:	3384      	adds	r3, #132	@ 0x84
 8012f60:	685b      	ldr	r3, [r3, #4]
 8012f62:	68fa      	ldr	r2, [r7, #12]
 8012f64:	6812      	ldr	r2, [r2, #0]
 8012f66:	4611      	mov	r1, r2
 8012f68:	687a      	ldr	r2, [r7, #4]
 8012f6a:	01d2      	lsls	r2, r2, #7
 8012f6c:	440a      	add	r2, r1
 8012f6e:	3284      	adds	r2, #132	@ 0x84
 8012f70:	f403 4370 	and.w	r3, r3, #61440	@ 0xf000
 8012f74:	6053      	str	r3, [r2, #4]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 8012f76:	68bb      	ldr	r3, [r7, #8]
 8012f78:	681a      	ldr	r2, [r3, #0]
                                         ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 8012f7a:	68fb      	ldr	r3, [r7, #12]
 8012f7c:	681b      	ldr	r3, [r3, #0]
 8012f7e:	68db      	ldr	r3, [r3, #12]
 8012f80:	0c1b      	lsrs	r3, r3, #16
 8012f82:	f3c3 030b 	ubfx	r3, r3, #0, #12
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 8012f86:	4413      	add	r3, r2
                                         ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 8012f88:	1c5a      	adds	r2, r3, #1
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 8012f8a:	68fb      	ldr	r3, [r7, #12]
 8012f8c:	681b      	ldr	r3, [r3, #0]
 8012f8e:	4619      	mov	r1, r3
 8012f90:	687b      	ldr	r3, [r7, #4]
 8012f92:	01db      	lsls	r3, r3, #7
 8012f94:	440b      	add	r3, r1
 8012f96:	3384      	adds	r3, #132	@ 0x84
 8012f98:	4619      	mov	r1, r3
                                         ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 8012f9a:	69fb      	ldr	r3, [r7, #28]
 8012f9c:	4313      	orrs	r3, r2
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 8012f9e:	604b      	str	r3, [r1, #4]

  /* Configure the vertical start and stop position */
  tmp = ((pLayerCfg->WindowY1 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP)) << 16U);
 8012fa0:	68bb      	ldr	r3, [r7, #8]
 8012fa2:	68da      	ldr	r2, [r3, #12]
 8012fa4:	68fb      	ldr	r3, [r7, #12]
 8012fa6:	681b      	ldr	r3, [r3, #0]
 8012fa8:	68db      	ldr	r3, [r3, #12]
 8012faa:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8012fae:	4413      	add	r3, r2
 8012fb0:	041b      	lsls	r3, r3, #16
 8012fb2:	61fb      	str	r3, [r7, #28]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR &= ~(LTDC_LxWVPCR_WVSTPOS | LTDC_LxWVPCR_WVSPPOS);
 8012fb4:	68fb      	ldr	r3, [r7, #12]
 8012fb6:	681b      	ldr	r3, [r3, #0]
 8012fb8:	461a      	mov	r2, r3
 8012fba:	687b      	ldr	r3, [r7, #4]
 8012fbc:	01db      	lsls	r3, r3, #7
 8012fbe:	4413      	add	r3, r2
 8012fc0:	3384      	adds	r3, #132	@ 0x84
 8012fc2:	689b      	ldr	r3, [r3, #8]
 8012fc4:	68fa      	ldr	r2, [r7, #12]
 8012fc6:	6812      	ldr	r2, [r2, #0]
 8012fc8:	4611      	mov	r1, r2
 8012fca:	687a      	ldr	r2, [r7, #4]
 8012fcc:	01d2      	lsls	r2, r2, #7
 8012fce:	440a      	add	r2, r1
 8012fd0:	3284      	adds	r2, #132	@ 0x84
 8012fd2:	f403 4370 	and.w	r3, r3, #61440	@ 0xf000
 8012fd6:	6093      	str	r3, [r2, #8]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR  = ((pLayerCfg->WindowY0 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP) + 1U) | tmp);
 8012fd8:	68bb      	ldr	r3, [r7, #8]
 8012fda:	689a      	ldr	r2, [r3, #8]
 8012fdc:	68fb      	ldr	r3, [r7, #12]
 8012fde:	681b      	ldr	r3, [r3, #0]
 8012fe0:	68db      	ldr	r3, [r3, #12]
 8012fe2:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8012fe6:	4413      	add	r3, r2
 8012fe8:	1c5a      	adds	r2, r3, #1
 8012fea:	68fb      	ldr	r3, [r7, #12]
 8012fec:	681b      	ldr	r3, [r3, #0]
 8012fee:	4619      	mov	r1, r3
 8012ff0:	687b      	ldr	r3, [r7, #4]
 8012ff2:	01db      	lsls	r3, r3, #7
 8012ff4:	440b      	add	r3, r1
 8012ff6:	3384      	adds	r3, #132	@ 0x84
 8012ff8:	4619      	mov	r1, r3
 8012ffa:	69fb      	ldr	r3, [r7, #28]
 8012ffc:	4313      	orrs	r3, r2
 8012ffe:	608b      	str	r3, [r1, #8]

  /* Specifies the pixel format */
  LTDC_LAYER(hltdc, LayerIdx)->PFCR &= ~(LTDC_LxPFCR_PF);
 8013000:	68fb      	ldr	r3, [r7, #12]
 8013002:	681b      	ldr	r3, [r3, #0]
 8013004:	461a      	mov	r2, r3
 8013006:	687b      	ldr	r3, [r7, #4]
 8013008:	01db      	lsls	r3, r3, #7
 801300a:	4413      	add	r3, r2
 801300c:	3384      	adds	r3, #132	@ 0x84
 801300e:	691b      	ldr	r3, [r3, #16]
 8013010:	68fa      	ldr	r2, [r7, #12]
 8013012:	6812      	ldr	r2, [r2, #0]
 8013014:	4611      	mov	r1, r2
 8013016:	687a      	ldr	r2, [r7, #4]
 8013018:	01d2      	lsls	r2, r2, #7
 801301a:	440a      	add	r2, r1
 801301c:	3284      	adds	r2, #132	@ 0x84
 801301e:	f023 0307 	bic.w	r3, r3, #7
 8013022:	6113      	str	r3, [r2, #16]
  LTDC_LAYER(hltdc, LayerIdx)->PFCR = (pLayerCfg->PixelFormat);
 8013024:	68fb      	ldr	r3, [r7, #12]
 8013026:	681b      	ldr	r3, [r3, #0]
 8013028:	461a      	mov	r2, r3
 801302a:	687b      	ldr	r3, [r7, #4]
 801302c:	01db      	lsls	r3, r3, #7
 801302e:	4413      	add	r3, r2
 8013030:	3384      	adds	r3, #132	@ 0x84
 8013032:	461a      	mov	r2, r3
 8013034:	68bb      	ldr	r3, [r7, #8]
 8013036:	691b      	ldr	r3, [r3, #16]
 8013038:	6113      	str	r3, [r2, #16]

  /* Configure the default color values */
  tmp = ((uint32_t)(pLayerCfg->Backcolor.Green) << 8U);
 801303a:	68bb      	ldr	r3, [r7, #8]
 801303c:	f893 3031 	ldrb.w	r3, [r3, #49]	@ 0x31
 8013040:	021b      	lsls	r3, r3, #8
 8013042:	61fb      	str	r3, [r7, #28]
  tmp1 = ((uint32_t)(pLayerCfg->Backcolor.Red) << 16U);
 8013044:	68bb      	ldr	r3, [r7, #8]
 8013046:	f893 3032 	ldrb.w	r3, [r3, #50]	@ 0x32
 801304a:	041b      	lsls	r3, r3, #16
 801304c:	61bb      	str	r3, [r7, #24]
  tmp2 = (pLayerCfg->Alpha0 << 24U);
 801304e:	68bb      	ldr	r3, [r7, #8]
 8013050:	699b      	ldr	r3, [r3, #24]
 8013052:	061b      	lsls	r3, r3, #24
 8013054:	617b      	str	r3, [r7, #20]
  LTDC_LAYER(hltdc, LayerIdx)->DCCR &= ~(LTDC_LxDCCR_DCBLUE | LTDC_LxDCCR_DCGREEN | LTDC_LxDCCR_DCRED |
 8013056:	68fb      	ldr	r3, [r7, #12]
 8013058:	681b      	ldr	r3, [r3, #0]
 801305a:	461a      	mov	r2, r3
 801305c:	687b      	ldr	r3, [r7, #4]
 801305e:	01db      	lsls	r3, r3, #7
 8013060:	4413      	add	r3, r2
 8013062:	3384      	adds	r3, #132	@ 0x84
 8013064:	699b      	ldr	r3, [r3, #24]
 8013066:	68fb      	ldr	r3, [r7, #12]
 8013068:	681b      	ldr	r3, [r3, #0]
 801306a:	461a      	mov	r2, r3
 801306c:	687b      	ldr	r3, [r7, #4]
 801306e:	01db      	lsls	r3, r3, #7
 8013070:	4413      	add	r3, r2
 8013072:	3384      	adds	r3, #132	@ 0x84
 8013074:	461a      	mov	r2, r3
 8013076:	2300      	movs	r3, #0
 8013078:	6193      	str	r3, [r2, #24]
                                         LTDC_LxDCCR_DCALPHA);
  LTDC_LAYER(hltdc, LayerIdx)->DCCR = (pLayerCfg->Backcolor.Blue | tmp | tmp1 | tmp2);
 801307a:	68bb      	ldr	r3, [r7, #8]
 801307c:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8013080:	461a      	mov	r2, r3
 8013082:	69fb      	ldr	r3, [r7, #28]
 8013084:	431a      	orrs	r2, r3
 8013086:	69bb      	ldr	r3, [r7, #24]
 8013088:	431a      	orrs	r2, r3
 801308a:	68fb      	ldr	r3, [r7, #12]
 801308c:	681b      	ldr	r3, [r3, #0]
 801308e:	4619      	mov	r1, r3
 8013090:	687b      	ldr	r3, [r7, #4]
 8013092:	01db      	lsls	r3, r3, #7
 8013094:	440b      	add	r3, r1
 8013096:	3384      	adds	r3, #132	@ 0x84
 8013098:	4619      	mov	r1, r3
 801309a:	697b      	ldr	r3, [r7, #20]
 801309c:	4313      	orrs	r3, r2
 801309e:	618b      	str	r3, [r1, #24]

  /* Specifies the constant alpha value */
  LTDC_LAYER(hltdc, LayerIdx)->CACR &= ~(LTDC_LxCACR_CONSTA);
 80130a0:	68fb      	ldr	r3, [r7, #12]
 80130a2:	681b      	ldr	r3, [r3, #0]
 80130a4:	461a      	mov	r2, r3
 80130a6:	687b      	ldr	r3, [r7, #4]
 80130a8:	01db      	lsls	r3, r3, #7
 80130aa:	4413      	add	r3, r2
 80130ac:	3384      	adds	r3, #132	@ 0x84
 80130ae:	695b      	ldr	r3, [r3, #20]
 80130b0:	68fa      	ldr	r2, [r7, #12]
 80130b2:	6812      	ldr	r2, [r2, #0]
 80130b4:	4611      	mov	r1, r2
 80130b6:	687a      	ldr	r2, [r7, #4]
 80130b8:	01d2      	lsls	r2, r2, #7
 80130ba:	440a      	add	r2, r1
 80130bc:	3284      	adds	r2, #132	@ 0x84
 80130be:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 80130c2:	6153      	str	r3, [r2, #20]
  LTDC_LAYER(hltdc, LayerIdx)->CACR = (pLayerCfg->Alpha);
 80130c4:	68fb      	ldr	r3, [r7, #12]
 80130c6:	681b      	ldr	r3, [r3, #0]
 80130c8:	461a      	mov	r2, r3
 80130ca:	687b      	ldr	r3, [r7, #4]
 80130cc:	01db      	lsls	r3, r3, #7
 80130ce:	4413      	add	r3, r2
 80130d0:	3384      	adds	r3, #132	@ 0x84
 80130d2:	461a      	mov	r2, r3
 80130d4:	68bb      	ldr	r3, [r7, #8]
 80130d6:	695b      	ldr	r3, [r3, #20]
 80130d8:	6153      	str	r3, [r2, #20]

  /* Specifies the blending factors */
  LTDC_LAYER(hltdc, LayerIdx)->BFCR &= ~(LTDC_LxBFCR_BF2 | LTDC_LxBFCR_BF1);
 80130da:	68fb      	ldr	r3, [r7, #12]
 80130dc:	681b      	ldr	r3, [r3, #0]
 80130de:	461a      	mov	r2, r3
 80130e0:	687b      	ldr	r3, [r7, #4]
 80130e2:	01db      	lsls	r3, r3, #7
 80130e4:	4413      	add	r3, r2
 80130e6:	3384      	adds	r3, #132	@ 0x84
 80130e8:	69da      	ldr	r2, [r3, #28]
 80130ea:	68fb      	ldr	r3, [r7, #12]
 80130ec:	681b      	ldr	r3, [r3, #0]
 80130ee:	4619      	mov	r1, r3
 80130f0:	687b      	ldr	r3, [r7, #4]
 80130f2:	01db      	lsls	r3, r3, #7
 80130f4:	440b      	add	r3, r1
 80130f6:	3384      	adds	r3, #132	@ 0x84
 80130f8:	4619      	mov	r1, r3
 80130fa:	4b58      	ldr	r3, [pc, #352]	@ (801325c <LTDC_SetConfig+0x32c>)
 80130fc:	4013      	ands	r3, r2
 80130fe:	61cb      	str	r3, [r1, #28]
  LTDC_LAYER(hltdc, LayerIdx)->BFCR = (pLayerCfg->BlendingFactor1 | pLayerCfg->BlendingFactor2);
 8013100:	68bb      	ldr	r3, [r7, #8]
 8013102:	69da      	ldr	r2, [r3, #28]
 8013104:	68bb      	ldr	r3, [r7, #8]
 8013106:	6a1b      	ldr	r3, [r3, #32]
 8013108:	68f9      	ldr	r1, [r7, #12]
 801310a:	6809      	ldr	r1, [r1, #0]
 801310c:	4608      	mov	r0, r1
 801310e:	6879      	ldr	r1, [r7, #4]
 8013110:	01c9      	lsls	r1, r1, #7
 8013112:	4401      	add	r1, r0
 8013114:	3184      	adds	r1, #132	@ 0x84
 8013116:	4313      	orrs	r3, r2
 8013118:	61cb      	str	r3, [r1, #28]

  /* Configure the color frame buffer start address */
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR &= ~(LTDC_LxCFBAR_CFBADD);
 801311a:	68fb      	ldr	r3, [r7, #12]
 801311c:	681b      	ldr	r3, [r3, #0]
 801311e:	461a      	mov	r2, r3
 8013120:	687b      	ldr	r3, [r7, #4]
 8013122:	01db      	lsls	r3, r3, #7
 8013124:	4413      	add	r3, r2
 8013126:	3384      	adds	r3, #132	@ 0x84
 8013128:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 801312a:	68fb      	ldr	r3, [r7, #12]
 801312c:	681b      	ldr	r3, [r3, #0]
 801312e:	461a      	mov	r2, r3
 8013130:	687b      	ldr	r3, [r7, #4]
 8013132:	01db      	lsls	r3, r3, #7
 8013134:	4413      	add	r3, r2
 8013136:	3384      	adds	r3, #132	@ 0x84
 8013138:	461a      	mov	r2, r3
 801313a:	2300      	movs	r3, #0
 801313c:	6293      	str	r3, [r2, #40]	@ 0x28
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR = (pLayerCfg->FBStartAdress);
 801313e:	68fb      	ldr	r3, [r7, #12]
 8013140:	681b      	ldr	r3, [r3, #0]
 8013142:	461a      	mov	r2, r3
 8013144:	687b      	ldr	r3, [r7, #4]
 8013146:	01db      	lsls	r3, r3, #7
 8013148:	4413      	add	r3, r2
 801314a:	3384      	adds	r3, #132	@ 0x84
 801314c:	461a      	mov	r2, r3
 801314e:	68bb      	ldr	r3, [r7, #8]
 8013150:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8013152:	6293      	str	r3, [r2, #40]	@ 0x28

  if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB8888)
 8013154:	68bb      	ldr	r3, [r7, #8]
 8013156:	691b      	ldr	r3, [r3, #16]
 8013158:	2b00      	cmp	r3, #0
 801315a:	d102      	bne.n	8013162 <LTDC_SetConfig+0x232>
  {
    tmp = 4U;
 801315c:	2304      	movs	r3, #4
 801315e:	61fb      	str	r3, [r7, #28]
 8013160:	e01b      	b.n	801319a <LTDC_SetConfig+0x26a>
  }
  else if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB888)
 8013162:	68bb      	ldr	r3, [r7, #8]
 8013164:	691b      	ldr	r3, [r3, #16]
 8013166:	2b01      	cmp	r3, #1
 8013168:	d102      	bne.n	8013170 <LTDC_SetConfig+0x240>
  {
    tmp = 3U;
 801316a:	2303      	movs	r3, #3
 801316c:	61fb      	str	r3, [r7, #28]
 801316e:	e014      	b.n	801319a <LTDC_SetConfig+0x26a>
  }
  else if ((pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB4444) || \
 8013170:	68bb      	ldr	r3, [r7, #8]
 8013172:	691b      	ldr	r3, [r3, #16]
 8013174:	2b04      	cmp	r3, #4
 8013176:	d00b      	beq.n	8013190 <LTDC_SetConfig+0x260>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB565)   || \
 8013178:	68bb      	ldr	r3, [r7, #8]
 801317a:	691b      	ldr	r3, [r3, #16]
  else if ((pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB4444) || \
 801317c:	2b02      	cmp	r3, #2
 801317e:	d007      	beq.n	8013190 <LTDC_SetConfig+0x260>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB1555) || \
 8013180:	68bb      	ldr	r3, [r7, #8]
 8013182:	691b      	ldr	r3, [r3, #16]
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB565)   || \
 8013184:	2b03      	cmp	r3, #3
 8013186:	d003      	beq.n	8013190 <LTDC_SetConfig+0x260>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_AL88))
 8013188:	68bb      	ldr	r3, [r7, #8]
 801318a:	691b      	ldr	r3, [r3, #16]
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB1555) || \
 801318c:	2b07      	cmp	r3, #7
 801318e:	d102      	bne.n	8013196 <LTDC_SetConfig+0x266>
  {
    tmp = 2U;
 8013190:	2302      	movs	r3, #2
 8013192:	61fb      	str	r3, [r7, #28]
 8013194:	e001      	b.n	801319a <LTDC_SetConfig+0x26a>
  }
  else
  {
    tmp = 1U;
 8013196:	2301      	movs	r3, #1
 8013198:	61fb      	str	r3, [r7, #28]
  }

  /* Configure the color frame buffer pitch in byte */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  &= ~(LTDC_LxCFBLR_CFBLL | LTDC_LxCFBLR_CFBP);
 801319a:	68fb      	ldr	r3, [r7, #12]
 801319c:	681b      	ldr	r3, [r3, #0]
 801319e:	461a      	mov	r2, r3
 80131a0:	687b      	ldr	r3, [r7, #4]
 80131a2:	01db      	lsls	r3, r3, #7
 80131a4:	4413      	add	r3, r2
 80131a6:	3384      	adds	r3, #132	@ 0x84
 80131a8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80131aa:	68fa      	ldr	r2, [r7, #12]
 80131ac:	6812      	ldr	r2, [r2, #0]
 80131ae:	4611      	mov	r1, r2
 80131b0:	687a      	ldr	r2, [r7, #4]
 80131b2:	01d2      	lsls	r2, r2, #7
 80131b4:	440a      	add	r2, r1
 80131b6:	3284      	adds	r2, #132	@ 0x84
 80131b8:	f003 23e0 	and.w	r3, r3, #3758153728	@ 0xe000e000
 80131bc:	62d3      	str	r3, [r2, #44]	@ 0x2c
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  = (((pLayerCfg->ImageWidth * tmp) << 16U) | (((pLayerCfg->WindowX1 - pLayerCfg->WindowX0) * tmp)  + 7U));
 80131be:	68bb      	ldr	r3, [r7, #8]
 80131c0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80131c2:	69fa      	ldr	r2, [r7, #28]
 80131c4:	fb02 f303 	mul.w	r3, r2, r3
 80131c8:	041a      	lsls	r2, r3, #16
 80131ca:	68bb      	ldr	r3, [r7, #8]
 80131cc:	6859      	ldr	r1, [r3, #4]
 80131ce:	68bb      	ldr	r3, [r7, #8]
 80131d0:	681b      	ldr	r3, [r3, #0]
 80131d2:	1acb      	subs	r3, r1, r3
 80131d4:	69f9      	ldr	r1, [r7, #28]
 80131d6:	fb01 f303 	mul.w	r3, r1, r3
 80131da:	3307      	adds	r3, #7
 80131dc:	68f9      	ldr	r1, [r7, #12]
 80131de:	6809      	ldr	r1, [r1, #0]
 80131e0:	4608      	mov	r0, r1
 80131e2:	6879      	ldr	r1, [r7, #4]
 80131e4:	01c9      	lsls	r1, r1, #7
 80131e6:	4401      	add	r1, r0
 80131e8:	3184      	adds	r1, #132	@ 0x84
 80131ea:	4313      	orrs	r3, r2
 80131ec:	62cb      	str	r3, [r1, #44]	@ 0x2c
  /* Configure the frame buffer line number */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  &= ~(LTDC_LxCFBLNR_CFBLNBR);
 80131ee:	68fb      	ldr	r3, [r7, #12]
 80131f0:	681b      	ldr	r3, [r3, #0]
 80131f2:	461a      	mov	r2, r3
 80131f4:	687b      	ldr	r3, [r7, #4]
 80131f6:	01db      	lsls	r3, r3, #7
 80131f8:	4413      	add	r3, r2
 80131fa:	3384      	adds	r3, #132	@ 0x84
 80131fc:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80131fe:	68fb      	ldr	r3, [r7, #12]
 8013200:	681b      	ldr	r3, [r3, #0]
 8013202:	4619      	mov	r1, r3
 8013204:	687b      	ldr	r3, [r7, #4]
 8013206:	01db      	lsls	r3, r3, #7
 8013208:	440b      	add	r3, r1
 801320a:	3384      	adds	r3, #132	@ 0x84
 801320c:	4619      	mov	r1, r3
 801320e:	4b14      	ldr	r3, [pc, #80]	@ (8013260 <LTDC_SetConfig+0x330>)
 8013210:	4013      	ands	r3, r2
 8013212:	630b      	str	r3, [r1, #48]	@ 0x30
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  = (pLayerCfg->ImageHeight);
 8013214:	68fb      	ldr	r3, [r7, #12]
 8013216:	681b      	ldr	r3, [r3, #0]
 8013218:	461a      	mov	r2, r3
 801321a:	687b      	ldr	r3, [r7, #4]
 801321c:	01db      	lsls	r3, r3, #7
 801321e:	4413      	add	r3, r2
 8013220:	3384      	adds	r3, #132	@ 0x84
 8013222:	461a      	mov	r2, r3
 8013224:	68bb      	ldr	r3, [r7, #8]
 8013226:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8013228:	6313      	str	r3, [r2, #48]	@ 0x30

  /* Enable LTDC_Layer by setting LEN bit */
  LTDC_LAYER(hltdc, LayerIdx)->CR |= (uint32_t)LTDC_LxCR_LEN;
 801322a:	68fb      	ldr	r3, [r7, #12]
 801322c:	681b      	ldr	r3, [r3, #0]
 801322e:	461a      	mov	r2, r3
 8013230:	687b      	ldr	r3, [r7, #4]
 8013232:	01db      	lsls	r3, r3, #7
 8013234:	4413      	add	r3, r2
 8013236:	3384      	adds	r3, #132	@ 0x84
 8013238:	681b      	ldr	r3, [r3, #0]
 801323a:	68fa      	ldr	r2, [r7, #12]
 801323c:	6812      	ldr	r2, [r2, #0]
 801323e:	4611      	mov	r1, r2
 8013240:	687a      	ldr	r2, [r7, #4]
 8013242:	01d2      	lsls	r2, r2, #7
 8013244:	440a      	add	r2, r1
 8013246:	3284      	adds	r2, #132	@ 0x84
 8013248:	f043 0301 	orr.w	r3, r3, #1
 801324c:	6013      	str	r3, [r2, #0]
}
 801324e:	bf00      	nop
 8013250:	3724      	adds	r7, #36	@ 0x24
 8013252:	46bd      	mov	sp, r7
 8013254:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013258:	4770      	bx	lr
 801325a:	bf00      	nop
 801325c:	fffff8f8 	.word	0xfffff8f8
 8013260:	fffff800 	.word	0xfffff800

08013264 <HAL_MDMA_Init>:
  * @param  hmdma: Pointer to a MDMA_HandleTypeDef structure that contains
  *               the configuration information for the specified MDMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_MDMA_Init(MDMA_HandleTypeDef *hmdma)
{
 8013264:	b580      	push	{r7, lr}
 8013266:	b084      	sub	sp, #16
 8013268:	af00      	add	r7, sp, #0
 801326a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 801326c:	f7fd fed0 	bl	8011010 <HAL_GetTick>
 8013270:	60f8      	str	r0, [r7, #12]

  /* Check the MDMA peripheral handle */
  if(hmdma == NULL)
 8013272:	687b      	ldr	r3, [r7, #4]
 8013274:	2b00      	cmp	r3, #0
 8013276:	d101      	bne.n	801327c <HAL_MDMA_Init+0x18>
  {
    return HAL_ERROR;
 8013278:	2301      	movs	r3, #1
 801327a:	e03b      	b.n	80132f4 <HAL_MDMA_Init+0x90>
  assert_param(IS_MDMA_BLOCK_ADDR_OFFSET(hmdma->Init.SourceBlockAddressOffset));
  assert_param(IS_MDMA_BLOCK_ADDR_OFFSET(hmdma->Init.DestBlockAddressOffset));


  /* Allocate lock resource */
  __HAL_UNLOCK(hmdma);
 801327c:	687b      	ldr	r3, [r7, #4]
 801327e:	2200      	movs	r2, #0
 8013280:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change MDMA peripheral state */
  hmdma->State = HAL_MDMA_STATE_BUSY;
 8013284:	687b      	ldr	r3, [r7, #4]
 8013286:	2202      	movs	r2, #2
 8013288:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the MDMA channel */
  __HAL_MDMA_DISABLE(hmdma);
 801328c:	687b      	ldr	r3, [r7, #4]
 801328e:	681b      	ldr	r3, [r3, #0]
 8013290:	68da      	ldr	r2, [r3, #12]
 8013292:	687b      	ldr	r3, [r7, #4]
 8013294:	681b      	ldr	r3, [r3, #0]
 8013296:	f022 0201 	bic.w	r2, r2, #1
 801329a:	60da      	str	r2, [r3, #12]

  /* Check if the MDMA channel is effectively disabled */
  while((hmdma->Instance->CCR & MDMA_CCR_EN) != 0U)
 801329c:	e00f      	b.n	80132be <HAL_MDMA_Init+0x5a>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_MDMA_ABORT)
 801329e:	f7fd feb7 	bl	8011010 <HAL_GetTick>
 80132a2:	4602      	mov	r2, r0
 80132a4:	68fb      	ldr	r3, [r7, #12]
 80132a6:	1ad3      	subs	r3, r2, r3
 80132a8:	2b05      	cmp	r3, #5
 80132aa:	d908      	bls.n	80132be <HAL_MDMA_Init+0x5a>
    {
      /* Update error code */
      hmdma->ErrorCode = HAL_MDMA_ERROR_TIMEOUT;
 80132ac:	687b      	ldr	r3, [r7, #4]
 80132ae:	2240      	movs	r2, #64	@ 0x40
 80132b0:	669a      	str	r2, [r3, #104]	@ 0x68

      /* Change the MDMA state */
      hmdma->State = HAL_MDMA_STATE_ERROR;
 80132b2:	687b      	ldr	r3, [r7, #4]
 80132b4:	2203      	movs	r2, #3
 80132b6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

      return HAL_ERROR;
 80132ba:	2301      	movs	r3, #1
 80132bc:	e01a      	b.n	80132f4 <HAL_MDMA_Init+0x90>
  while((hmdma->Instance->CCR & MDMA_CCR_EN) != 0U)
 80132be:	687b      	ldr	r3, [r7, #4]
 80132c0:	681b      	ldr	r3, [r3, #0]
 80132c2:	68db      	ldr	r3, [r3, #12]
 80132c4:	f003 0301 	and.w	r3, r3, #1
 80132c8:	2b00      	cmp	r3, #0
 80132ca:	d1e8      	bne.n	801329e <HAL_MDMA_Init+0x3a>
    }
  }

  /* Initialize the MDMA channel registers */
  MDMA_Init(hmdma);
 80132cc:	6878      	ldr	r0, [r7, #4]
 80132ce:	f000 f894 	bl	80133fa <MDMA_Init>

  /* Reset the MDMA first/last linkedlist node addresses and node counter */
  hmdma->FirstLinkedListNodeAddress  = 0;
 80132d2:	687b      	ldr	r3, [r7, #4]
 80132d4:	2200      	movs	r2, #0
 80132d6:	65da      	str	r2, [r3, #92]	@ 0x5c
  hmdma->LastLinkedListNodeAddress   = 0;
 80132d8:	687b      	ldr	r3, [r7, #4]
 80132da:	2200      	movs	r2, #0
 80132dc:	661a      	str	r2, [r3, #96]	@ 0x60
  hmdma->LinkedListNodeCounter  = 0;
 80132de:	687b      	ldr	r3, [r7, #4]
 80132e0:	2200      	movs	r2, #0
 80132e2:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Initialize the error code */
  hmdma->ErrorCode = HAL_MDMA_ERROR_NONE;
 80132e4:	687b      	ldr	r3, [r7, #4]
 80132e6:	2200      	movs	r2, #0
 80132e8:	669a      	str	r2, [r3, #104]	@ 0x68

  /* Initialize the MDMA state */
  hmdma->State = HAL_MDMA_STATE_READY;
 80132ea:	687b      	ldr	r3, [r7, #4]
 80132ec:	2201      	movs	r2, #1
 80132ee:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80132f2:	2300      	movs	r3, #0
}
 80132f4:	4618      	mov	r0, r3
 80132f6:	3710      	adds	r7, #16
 80132f8:	46bd      	mov	sp, r7
 80132fa:	bd80      	pop	{r7, pc}

080132fc <HAL_MDMA_DeInit>:
  * @param  hmdma: pointer to a MDMA_HandleTypeDef structure that contains
  *               the configuration information for the specified MDMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_MDMA_DeInit(MDMA_HandleTypeDef *hmdma)
{
 80132fc:	b480      	push	{r7}
 80132fe:	b083      	sub	sp, #12
 8013300:	af00      	add	r7, sp, #0
 8013302:	6078      	str	r0, [r7, #4]

  /* Check the MDMA peripheral handle */
  if(hmdma == NULL)
 8013304:	687b      	ldr	r3, [r7, #4]
 8013306:	2b00      	cmp	r3, #0
 8013308:	d101      	bne.n	801330e <HAL_MDMA_DeInit+0x12>
  {
    return HAL_ERROR;
 801330a:	2301      	movs	r3, #1
 801330c:	e048      	b.n	80133a0 <HAL_MDMA_DeInit+0xa4>
  }

  /* Disable the selected MDMA Channelx */
  __HAL_MDMA_DISABLE(hmdma);
 801330e:	687b      	ldr	r3, [r7, #4]
 8013310:	681b      	ldr	r3, [r3, #0]
 8013312:	68da      	ldr	r2, [r3, #12]
 8013314:	687b      	ldr	r3, [r7, #4]
 8013316:	681b      	ldr	r3, [r3, #0]
 8013318:	f022 0201 	bic.w	r2, r2, #1
 801331c:	60da      	str	r2, [r3, #12]

  /* Reset MDMA Channel control register */
  hmdma->Instance->CCR  = 0;
 801331e:	687b      	ldr	r3, [r7, #4]
 8013320:	681b      	ldr	r3, [r3, #0]
 8013322:	2200      	movs	r2, #0
 8013324:	60da      	str	r2, [r3, #12]
  hmdma->Instance->CTCR = 0;
 8013326:	687b      	ldr	r3, [r7, #4]
 8013328:	681b      	ldr	r3, [r3, #0]
 801332a:	2200      	movs	r2, #0
 801332c:	611a      	str	r2, [r3, #16]
  hmdma->Instance->CBNDTR = 0;
 801332e:	687b      	ldr	r3, [r7, #4]
 8013330:	681b      	ldr	r3, [r3, #0]
 8013332:	2200      	movs	r2, #0
 8013334:	615a      	str	r2, [r3, #20]
  hmdma->Instance->CSAR = 0;
 8013336:	687b      	ldr	r3, [r7, #4]
 8013338:	681b      	ldr	r3, [r3, #0]
 801333a:	2200      	movs	r2, #0
 801333c:	619a      	str	r2, [r3, #24]
  hmdma->Instance->CDAR = 0;
 801333e:	687b      	ldr	r3, [r7, #4]
 8013340:	681b      	ldr	r3, [r3, #0]
 8013342:	2200      	movs	r2, #0
 8013344:	61da      	str	r2, [r3, #28]
  hmdma->Instance->CBRUR = 0;
 8013346:	687b      	ldr	r3, [r7, #4]
 8013348:	681b      	ldr	r3, [r3, #0]
 801334a:	2200      	movs	r2, #0
 801334c:	621a      	str	r2, [r3, #32]
  hmdma->Instance->CLAR = 0;
 801334e:	687b      	ldr	r3, [r7, #4]
 8013350:	681b      	ldr	r3, [r3, #0]
 8013352:	2200      	movs	r2, #0
 8013354:	625a      	str	r2, [r3, #36]	@ 0x24
  hmdma->Instance->CTBR = 0;
 8013356:	687b      	ldr	r3, [r7, #4]
 8013358:	681b      	ldr	r3, [r3, #0]
 801335a:	2200      	movs	r2, #0
 801335c:	629a      	str	r2, [r3, #40]	@ 0x28
  hmdma->Instance->CMAR = 0;
 801335e:	687b      	ldr	r3, [r7, #4]
 8013360:	681b      	ldr	r3, [r3, #0]
 8013362:	2200      	movs	r2, #0
 8013364:	631a      	str	r2, [r3, #48]	@ 0x30
  hmdma->Instance->CMDR = 0;
 8013366:	687b      	ldr	r3, [r7, #4]
 8013368:	681b      	ldr	r3, [r3, #0]
 801336a:	2200      	movs	r2, #0
 801336c:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Clear all flags */
  __HAL_MDMA_CLEAR_FLAG(hmdma,(MDMA_FLAG_TE | MDMA_FLAG_CTC | MDMA_FLAG_BRT | MDMA_FLAG_BT | MDMA_FLAG_BFTC));
 801336e:	687b      	ldr	r3, [r7, #4]
 8013370:	681b      	ldr	r3, [r3, #0]
 8013372:	221f      	movs	r2, #31
 8013374:	605a      	str	r2, [r3, #4]

  /* Reset the  MDMA first/last linkedlist node addresses and node counter */
  hmdma->FirstLinkedListNodeAddress  = 0;
 8013376:	687b      	ldr	r3, [r7, #4]
 8013378:	2200      	movs	r2, #0
 801337a:	65da      	str	r2, [r3, #92]	@ 0x5c
  hmdma->LastLinkedListNodeAddress   = 0;
 801337c:	687b      	ldr	r3, [r7, #4]
 801337e:	2200      	movs	r2, #0
 8013380:	661a      	str	r2, [r3, #96]	@ 0x60
  hmdma->LinkedListNodeCounter  = 0;
 8013382:	687b      	ldr	r3, [r7, #4]
 8013384:	2200      	movs	r2, #0
 8013386:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Initialize the error code */
  hmdma->ErrorCode = HAL_MDMA_ERROR_NONE;
 8013388:	687b      	ldr	r3, [r7, #4]
 801338a:	2200      	movs	r2, #0
 801338c:	669a      	str	r2, [r3, #104]	@ 0x68

  /* Initialize the MDMA state */
  hmdma->State = HAL_MDMA_STATE_RESET;
 801338e:	687b      	ldr	r3, [r7, #4]
 8013390:	2200      	movs	r2, #0
 8013392:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Release Lock */
  __HAL_UNLOCK(hmdma);
 8013396:	687b      	ldr	r3, [r7, #4]
 8013398:	2200      	movs	r2, #0
 801339a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 801339e:	2300      	movs	r3, #0
}
 80133a0:	4618      	mov	r0, r3
 80133a2:	370c      	adds	r7, #12
 80133a4:	46bd      	mov	sp, r7
 80133a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80133aa:	4770      	bx	lr

080133ac <HAL_MDMA_Abort_IT>:
  * @param  hmdma  : pointer to a MDMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified MDMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_MDMA_Abort_IT(MDMA_HandleTypeDef *hmdma)
{
 80133ac:	b480      	push	{r7}
 80133ae:	b083      	sub	sp, #12
 80133b0:	af00      	add	r7, sp, #0
 80133b2:	6078      	str	r0, [r7, #4]
  /* Check the MDMA peripheral handle */
  if(hmdma == NULL)
 80133b4:	687b      	ldr	r3, [r7, #4]
 80133b6:	2b00      	cmp	r3, #0
 80133b8:	d101      	bne.n	80133be <HAL_MDMA_Abort_IT+0x12>
  {
    return HAL_ERROR;
 80133ba:	2301      	movs	r3, #1
 80133bc:	e017      	b.n	80133ee <HAL_MDMA_Abort_IT+0x42>
  }

  if(HAL_MDMA_STATE_BUSY != hmdma->State)
 80133be:	687b      	ldr	r3, [r7, #4]
 80133c0:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80133c4:	b2db      	uxtb	r3, r3
 80133c6:	2b02      	cmp	r3, #2
 80133c8:	d004      	beq.n	80133d4 <HAL_MDMA_Abort_IT+0x28>
  {
    /* No transfer ongoing */
    hmdma->ErrorCode = HAL_MDMA_ERROR_NO_XFER;
 80133ca:	687b      	ldr	r3, [r7, #4]
 80133cc:	2280      	movs	r2, #128	@ 0x80
 80133ce:	669a      	str	r2, [r3, #104]	@ 0x68

    return HAL_ERROR;
 80133d0:	2301      	movs	r3, #1
 80133d2:	e00c      	b.n	80133ee <HAL_MDMA_Abort_IT+0x42>
  }
  else
  {
    /* Set Abort State  */
    hmdma->State = HAL_MDMA_STATE_ABORT;
 80133d4:	687b      	ldr	r3, [r7, #4]
 80133d6:	2204      	movs	r2, #4
 80133d8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

    /* Disable the stream */
    __HAL_MDMA_DISABLE(hmdma);
 80133dc:	687b      	ldr	r3, [r7, #4]
 80133de:	681b      	ldr	r3, [r3, #0]
 80133e0:	68da      	ldr	r2, [r3, #12]
 80133e2:	687b      	ldr	r3, [r7, #4]
 80133e4:	681b      	ldr	r3, [r3, #0]
 80133e6:	f022 0201 	bic.w	r2, r2, #1
 80133ea:	60da      	str	r2, [r3, #12]
  }

  return HAL_OK;
 80133ec:	2300      	movs	r3, #0
}
 80133ee:	4618      	mov	r0, r3
 80133f0:	370c      	adds	r7, #12
 80133f2:	46bd      	mov	sp, r7
 80133f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80133f8:	4770      	bx	lr

080133fa <MDMA_Init>:
  * @param  hmdma:       pointer to a MDMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified MDMA Channel.
  * @retval None
  */
static void MDMA_Init(MDMA_HandleTypeDef *hmdma)
{
 80133fa:	b480      	push	{r7}
 80133fc:	b085      	sub	sp, #20
 80133fe:	af00      	add	r7, sp, #0
 8013400:	6078      	str	r0, [r7, #4]
  uint32_t blockoffset;

  /* Prepare the MDMA Channel configuration */
  hmdma->Instance->CCR = hmdma->Init.Priority  | hmdma->Init.Endianness;
 8013402:	687b      	ldr	r3, [r7, #4]
 8013404:	68d9      	ldr	r1, [r3, #12]
 8013406:	687b      	ldr	r3, [r7, #4]
 8013408:	691a      	ldr	r2, [r3, #16]
 801340a:	687b      	ldr	r3, [r7, #4]
 801340c:	681b      	ldr	r3, [r3, #0]
 801340e:	430a      	orrs	r2, r1
 8013410:	60da      	str	r2, [r3, #12]

  /* Write new CTCR Register value */
  hmdma->Instance->CTCR =  hmdma->Init.SourceInc      | hmdma->Init.DestinationInc | \
 8013412:	687b      	ldr	r3, [r7, #4]
 8013414:	695a      	ldr	r2, [r3, #20]
 8013416:	687b      	ldr	r3, [r7, #4]
 8013418:	699b      	ldr	r3, [r3, #24]
 801341a:	431a      	orrs	r2, r3
                           hmdma->Init.SourceDataSize | hmdma->Init.DestDataSize   | \
 801341c:	687b      	ldr	r3, [r7, #4]
 801341e:	69db      	ldr	r3, [r3, #28]
  hmdma->Instance->CTCR =  hmdma->Init.SourceInc      | hmdma->Init.DestinationInc | \
 8013420:	431a      	orrs	r2, r3
                           hmdma->Init.SourceDataSize | hmdma->Init.DestDataSize   | \
 8013422:	687b      	ldr	r3, [r7, #4]
 8013424:	6a1b      	ldr	r3, [r3, #32]
 8013426:	431a      	orrs	r2, r3
                           hmdma->Init.DataAlignment  | hmdma->Init.SourceBurst    | \
 8013428:	687b      	ldr	r3, [r7, #4]
 801342a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
                           hmdma->Init.SourceDataSize | hmdma->Init.DestDataSize   | \
 801342c:	431a      	orrs	r2, r3
                           hmdma->Init.DataAlignment  | hmdma->Init.SourceBurst    | \
 801342e:	687b      	ldr	r3, [r7, #4]
 8013430:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8013432:	431a      	orrs	r2, r3
                           hmdma->Init.DestBurst                                   | \
 8013434:	687b      	ldr	r3, [r7, #4]
 8013436:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
                           hmdma->Init.DataAlignment  | hmdma->Init.SourceBurst    | \
 8013438:	431a      	orrs	r2, r3
                           ((hmdma->Init.BufferTransferLength - 1U) << MDMA_CTCR_TLEN_Pos) | \
 801343a:	687b      	ldr	r3, [r7, #4]
 801343c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 801343e:	3b01      	subs	r3, #1
 8013440:	049b      	lsls	r3, r3, #18
                           hmdma->Init.DestBurst                                   | \
 8013442:	ea42 0103 	orr.w	r1, r2, r3
                           hmdma->Init.TransferTriggerMode;
 8013446:	687b      	ldr	r3, [r7, #4]
 8013448:	689a      	ldr	r2, [r3, #8]
  hmdma->Instance->CTCR =  hmdma->Init.SourceInc      | hmdma->Init.DestinationInc | \
 801344a:	687b      	ldr	r3, [r7, #4]
 801344c:	681b      	ldr	r3, [r3, #0]
                           ((hmdma->Init.BufferTransferLength - 1U) << MDMA_CTCR_TLEN_Pos) | \
 801344e:	430a      	orrs	r2, r1
  hmdma->Instance->CTCR =  hmdma->Init.SourceInc      | hmdma->Init.DestinationInc | \
 8013450:	611a      	str	r2, [r3, #16]

  /* If SW request set the CTCR register to SW Request Mode */
  if(hmdma->Init.Request == MDMA_REQUEST_SW)
 8013452:	687b      	ldr	r3, [r7, #4]
 8013454:	685b      	ldr	r3, [r3, #4]
 8013456:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 801345a:	d107      	bne.n	801346c <MDMA_Init+0x72>
    -If the request is done by SW : BWM could be set to 1 or 0.
    -If the request is done by a peripheral :
    If mask address not set (0) => BWM must be set to 0
    If mask address set (different than 0) => BWM could be set to 1 or 0
    */
    hmdma->Instance->CTCR |= (MDMA_CTCR_SWRM | MDMA_CTCR_BWM);
 801345c:	687b      	ldr	r3, [r7, #4]
 801345e:	681b      	ldr	r3, [r3, #0]
 8013460:	691a      	ldr	r2, [r3, #16]
 8013462:	687b      	ldr	r3, [r7, #4]
 8013464:	681b      	ldr	r3, [r3, #0]
 8013466:	f042 4240 	orr.w	r2, r2, #3221225472	@ 0xc0000000
 801346a:	611a      	str	r2, [r3, #16]
  }

  /* Reset CBNDTR Register */
  hmdma->Instance->CBNDTR = 0;
 801346c:	687b      	ldr	r3, [r7, #4]
 801346e:	681b      	ldr	r3, [r3, #0]
 8013470:	2200      	movs	r2, #0
 8013472:	615a      	str	r2, [r3, #20]

  /* if block source address offset is negative set the Block Repeat Source address Update Mode to decrement */
  if(hmdma->Init.SourceBlockAddressOffset < 0)
 8013474:	687b      	ldr	r3, [r7, #4]
 8013476:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8013478:	2b00      	cmp	r3, #0
 801347a:	da11      	bge.n	80134a0 <MDMA_Init+0xa6>
  {
    hmdma->Instance->CBNDTR |= MDMA_CBNDTR_BRSUM;
 801347c:	687b      	ldr	r3, [r7, #4]
 801347e:	681b      	ldr	r3, [r3, #0]
 8013480:	695a      	ldr	r2, [r3, #20]
 8013482:	687b      	ldr	r3, [r7, #4]
 8013484:	681b      	ldr	r3, [r3, #0]
 8013486:	f442 2280 	orr.w	r2, r2, #262144	@ 0x40000
 801348a:	615a      	str	r2, [r3, #20]
    /* Write new CBRUR Register value : source repeat block offset */
    blockoffset = (uint32_t)(- hmdma->Init.SourceBlockAddressOffset);
 801348c:	687b      	ldr	r3, [r7, #4]
 801348e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8013490:	425b      	negs	r3, r3
 8013492:	60fb      	str	r3, [r7, #12]
    hmdma->Instance->CBRUR = (blockoffset & 0x0000FFFFU);
 8013494:	687b      	ldr	r3, [r7, #4]
 8013496:	681b      	ldr	r3, [r3, #0]
 8013498:	68fa      	ldr	r2, [r7, #12]
 801349a:	b292      	uxth	r2, r2
 801349c:	621a      	str	r2, [r3, #32]
 801349e:	e006      	b.n	80134ae <MDMA_Init+0xb4>
  }
  else
  {
    /* Write new CBRUR Register value : source repeat block offset */
    hmdma->Instance->CBRUR = (((uint32_t)hmdma->Init.SourceBlockAddressOffset) & 0x0000FFFFU);
 80134a0:	687b      	ldr	r3, [r7, #4]
 80134a2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80134a4:	461a      	mov	r2, r3
 80134a6:	687b      	ldr	r3, [r7, #4]
 80134a8:	681b      	ldr	r3, [r3, #0]
 80134aa:	b292      	uxth	r2, r2
 80134ac:	621a      	str	r2, [r3, #32]
  }

  /* If block destination address offset is negative set the Block Repeat destination address Update Mode to decrement */
  if(hmdma->Init.DestBlockAddressOffset < 0)
 80134ae:	687b      	ldr	r3, [r7, #4]
 80134b0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80134b2:	2b00      	cmp	r3, #0
 80134b4:	da15      	bge.n	80134e2 <MDMA_Init+0xe8>
  {
    hmdma->Instance->CBNDTR |= MDMA_CBNDTR_BRDUM;
 80134b6:	687b      	ldr	r3, [r7, #4]
 80134b8:	681b      	ldr	r3, [r3, #0]
 80134ba:	695a      	ldr	r2, [r3, #20]
 80134bc:	687b      	ldr	r3, [r7, #4]
 80134be:	681b      	ldr	r3, [r3, #0]
 80134c0:	f442 2200 	orr.w	r2, r2, #524288	@ 0x80000
 80134c4:	615a      	str	r2, [r3, #20]
    /* Write new CBRUR Register value : destination repeat block offset */
    blockoffset = (uint32_t)(- hmdma->Init.DestBlockAddressOffset);
 80134c6:	687b      	ldr	r3, [r7, #4]
 80134c8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80134ca:	425b      	negs	r3, r3
 80134cc:	60fb      	str	r3, [r7, #12]
    hmdma->Instance->CBRUR |= ((blockoffset & 0x0000FFFFU) << MDMA_CBRUR_DUV_Pos);
 80134ce:	687b      	ldr	r3, [r7, #4]
 80134d0:	681b      	ldr	r3, [r3, #0]
 80134d2:	6a19      	ldr	r1, [r3, #32]
 80134d4:	68fb      	ldr	r3, [r7, #12]
 80134d6:	041a      	lsls	r2, r3, #16
 80134d8:	687b      	ldr	r3, [r7, #4]
 80134da:	681b      	ldr	r3, [r3, #0]
 80134dc:	430a      	orrs	r2, r1
 80134de:	621a      	str	r2, [r3, #32]
 80134e0:	e009      	b.n	80134f6 <MDMA_Init+0xfc>
  }
  else
  {
    /*write new CBRUR Register value : destination repeat block offset */
    hmdma->Instance->CBRUR |= ((((uint32_t)hmdma->Init.DestBlockAddressOffset) & 0x0000FFFFU) << MDMA_CBRUR_DUV_Pos);
 80134e2:	687b      	ldr	r3, [r7, #4]
 80134e4:	681b      	ldr	r3, [r3, #0]
 80134e6:	6a19      	ldr	r1, [r3, #32]
 80134e8:	687b      	ldr	r3, [r7, #4]
 80134ea:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80134ec:	041a      	lsls	r2, r3, #16
 80134ee:	687b      	ldr	r3, [r7, #4]
 80134f0:	681b      	ldr	r3, [r3, #0]
 80134f2:	430a      	orrs	r2, r1
 80134f4:	621a      	str	r2, [r3, #32]
  }

  /* if HW request set the HW request and the requet CleraMask and ClearData MaskData, */
  if(hmdma->Init.Request != MDMA_REQUEST_SW)
 80134f6:	687b      	ldr	r3, [r7, #4]
 80134f8:	685b      	ldr	r3, [r3, #4]
 80134fa:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80134fe:	d006      	beq.n	801350e <MDMA_Init+0x114>
  {
    /* Set the HW request in CTRB register  */
    hmdma->Instance->CTBR = hmdma->Init.Request & MDMA_CTBR_TSEL;
 8013500:	687b      	ldr	r3, [r7, #4]
 8013502:	685a      	ldr	r2, [r3, #4]
 8013504:	687b      	ldr	r3, [r7, #4]
 8013506:	681b      	ldr	r3, [r3, #0]
 8013508:	b2d2      	uxtb	r2, r2
 801350a:	629a      	str	r2, [r3, #40]	@ 0x28
 801350c:	e003      	b.n	8013516 <MDMA_Init+0x11c>
  }
  else /* SW request : reset the CTBR register */
  {
    hmdma->Instance->CTBR = 0;
 801350e:	687b      	ldr	r3, [r7, #4]
 8013510:	681b      	ldr	r3, [r3, #0]
 8013512:	2200      	movs	r2, #0
 8013514:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Write Link Address Register */
  hmdma->Instance->CLAR =  0;
 8013516:	687b      	ldr	r3, [r7, #4]
 8013518:	681b      	ldr	r3, [r3, #0]
 801351a:	2200      	movs	r2, #0
 801351c:	625a      	str	r2, [r3, #36]	@ 0x24
}
 801351e:	bf00      	nop
 8013520:	3714      	adds	r7, #20
 8013522:	46bd      	mov	sp, r7
 8013524:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013528:	4770      	bx	lr
	...

0801352c <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 801352c:	b580      	push	{r7, lr}
 801352e:	b084      	sub	sp, #16
 8013530:	af00      	add	r7, sp, #0
 8013532:	6078      	str	r0, [r7, #4]

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
 8013534:	4b29      	ldr	r3, [pc, #164]	@ (80135dc <HAL_PWREx_ConfigSupply+0xb0>)
 8013536:	68db      	ldr	r3, [r3, #12]
 8013538:	f003 0307 	and.w	r3, r3, #7
 801353c:	2b06      	cmp	r3, #6
 801353e:	d00a      	beq.n	8013556 <HAL_PWREx_ConfigSupply+0x2a>
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 8013540:	4b26      	ldr	r3, [pc, #152]	@ (80135dc <HAL_PWREx_ConfigSupply+0xb0>)
 8013542:	68db      	ldr	r3, [r3, #12]
 8013544:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8013548:	687a      	ldr	r2, [r7, #4]
 801354a:	429a      	cmp	r2, r3
 801354c:	d001      	beq.n	8013552 <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 801354e:	2301      	movs	r3, #1
 8013550:	e040      	b.n	80135d4 <HAL_PWREx_ConfigSupply+0xa8>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 8013552:	2300      	movs	r3, #0
 8013554:	e03e      	b.n	80135d4 <HAL_PWREx_ConfigSupply+0xa8>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 8013556:	4b21      	ldr	r3, [pc, #132]	@ (80135dc <HAL_PWREx_ConfigSupply+0xb0>)
 8013558:	68db      	ldr	r3, [r3, #12]
 801355a:	f023 023f 	bic.w	r2, r3, #63	@ 0x3f
 801355e:	491f      	ldr	r1, [pc, #124]	@ (80135dc <HAL_PWREx_ConfigSupply+0xb0>)
 8013560:	687b      	ldr	r3, [r7, #4]
 8013562:	4313      	orrs	r3, r2
 8013564:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 8013566:	f7fd fd53 	bl	8011010 <HAL_GetTick>
 801356a:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 801356c:	e009      	b.n	8013582 <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 801356e:	f7fd fd4f 	bl	8011010 <HAL_GetTick>
 8013572:	4602      	mov	r2, r0
 8013574:	68fb      	ldr	r3, [r7, #12]
 8013576:	1ad3      	subs	r3, r2, r3
 8013578:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 801357c:	d901      	bls.n	8013582 <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 801357e:	2301      	movs	r3, #1
 8013580:	e028      	b.n	80135d4 <HAL_PWREx_ConfigSupply+0xa8>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8013582:	4b16      	ldr	r3, [pc, #88]	@ (80135dc <HAL_PWREx_ConfigSupply+0xb0>)
 8013584:	685b      	ldr	r3, [r3, #4]
 8013586:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 801358a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 801358e:	d1ee      	bne.n	801356e <HAL_PWREx_ConfigSupply+0x42>
    }
  }

#if defined (SMPS)
  /* When the SMPS supplies external circuits verify that SDEXTRDY flag is set */
  if ((SupplySource == PWR_SMPS_1V8_SUPPLIES_EXT_AND_LDO) ||
 8013590:	687b      	ldr	r3, [r7, #4]
 8013592:	2b1e      	cmp	r3, #30
 8013594:	d008      	beq.n	80135a8 <HAL_PWREx_ConfigSupply+0x7c>
 8013596:	687b      	ldr	r3, [r7, #4]
 8013598:	2b2e      	cmp	r3, #46	@ 0x2e
 801359a:	d005      	beq.n	80135a8 <HAL_PWREx_ConfigSupply+0x7c>
      (SupplySource == PWR_SMPS_2V5_SUPPLIES_EXT_AND_LDO) ||
 801359c:	687b      	ldr	r3, [r7, #4]
 801359e:	2b1d      	cmp	r3, #29
 80135a0:	d002      	beq.n	80135a8 <HAL_PWREx_ConfigSupply+0x7c>
      (SupplySource == PWR_SMPS_1V8_SUPPLIES_EXT)         ||
 80135a2:	687b      	ldr	r3, [r7, #4]
 80135a4:	2b2d      	cmp	r3, #45	@ 0x2d
 80135a6:	d114      	bne.n	80135d2 <HAL_PWREx_ConfigSupply+0xa6>
      (SupplySource == PWR_SMPS_2V5_SUPPLIES_EXT))
  {
    /* Get the current tick number */
    tickstart = HAL_GetTick ();
 80135a8:	f7fd fd32 	bl	8011010 <HAL_GetTick>
 80135ac:	60f8      	str	r0, [r7, #12]

    /* Wait till SMPS external supply ready flag is set */
    while (__HAL_PWR_GET_FLAG (PWR_FLAG_SMPSEXTRDY) == 0U)
 80135ae:	e009      	b.n	80135c4 <HAL_PWREx_ConfigSupply+0x98>
    {
      if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 80135b0:	f7fd fd2e 	bl	8011010 <HAL_GetTick>
 80135b4:	4602      	mov	r2, r0
 80135b6:	68fb      	ldr	r3, [r7, #12]
 80135b8:	1ad3      	subs	r3, r2, r3
 80135ba:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 80135be:	d901      	bls.n	80135c4 <HAL_PWREx_ConfigSupply+0x98>
      {
        return HAL_ERROR;
 80135c0:	2301      	movs	r3, #1
 80135c2:	e007      	b.n	80135d4 <HAL_PWREx_ConfigSupply+0xa8>
    while (__HAL_PWR_GET_FLAG (PWR_FLAG_SMPSEXTRDY) == 0U)
 80135c4:	4b05      	ldr	r3, [pc, #20]	@ (80135dc <HAL_PWREx_ConfigSupply+0xb0>)
 80135c6:	68db      	ldr	r3, [r3, #12]
 80135c8:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80135cc:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80135d0:	d1ee      	bne.n	80135b0 <HAL_PWREx_ConfigSupply+0x84>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 80135d2:	2300      	movs	r3, #0
}
 80135d4:	4618      	mov	r0, r3
 80135d6:	3710      	adds	r7, #16
 80135d8:	46bd      	mov	sp, r7
 80135da:	bd80      	pop	{r7, pc}
 80135dc:	58024800 	.word	0x58024800

080135e0 <HAL_QSPI_Init>:
  *        in the QSPI_InitTypeDef and initialize the associated handle.
  * @param hqspi QSPI handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_QSPI_Init(QSPI_HandleTypeDef *hqspi)
{
 80135e0:	b580      	push	{r7, lr}
 80135e2:	b086      	sub	sp, #24
 80135e4:	af02      	add	r7, sp, #8
 80135e6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status;
  uint32_t tickstart = HAL_GetTick();
 80135e8:	f7fd fd12 	bl	8011010 <HAL_GetTick>
 80135ec:	60f8      	str	r0, [r7, #12]

  /* Check the QSPI handle allocation */
  if(hqspi == NULL)
 80135ee:	687b      	ldr	r3, [r7, #4]
 80135f0:	2b00      	cmp	r3, #0
 80135f2:	d101      	bne.n	80135f8 <HAL_QSPI_Init+0x18>
  {
    return HAL_ERROR;
 80135f4:	2301      	movs	r3, #1
 80135f6:	e05f      	b.n	80136b8 <HAL_QSPI_Init+0xd8>
  if (hqspi->Init.DualFlash != QSPI_DUALFLASH_ENABLE )
  {
    assert_param(IS_QSPI_FLASH_ID(hqspi->Init.FlashID));
  }

  if(hqspi->State == HAL_QSPI_STATE_RESET)
 80135f8:	687b      	ldr	r3, [r7, #4]
 80135fa:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80135fe:	b2db      	uxtb	r3, r3
 8013600:	2b00      	cmp	r3, #0
 8013602:	d107      	bne.n	8013614 <HAL_QSPI_Init+0x34>

    /* Init the low level hardware */
    hqspi->MspInitCallback(hqspi);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_QSPI_MspInit(hqspi);
 8013604:	6878      	ldr	r0, [r7, #4]
 8013606:	f7ed fd59 	bl	80010bc <HAL_QSPI_MspInit>
#endif

    /* Configure the default timeout for the QSPI memory access */
    HAL_QSPI_SetTimeout(hqspi, HAL_QSPI_TIMEOUT_DEFAULT_VALUE);
 801360a:	f241 3188 	movw	r1, #5000	@ 0x1388
 801360e:	6878      	ldr	r0, [r7, #4]
 8013610:	f000 fcca 	bl	8013fa8 <HAL_QSPI_SetTimeout>
  }

  /* Configure QSPI FIFO Threshold */
  MODIFY_REG(hqspi->Instance->CR, QUADSPI_CR_FTHRES,
 8013614:	687b      	ldr	r3, [r7, #4]
 8013616:	681b      	ldr	r3, [r3, #0]
 8013618:	681b      	ldr	r3, [r3, #0]
 801361a:	f423 51f8 	bic.w	r1, r3, #7936	@ 0x1f00
 801361e:	687b      	ldr	r3, [r7, #4]
 8013620:	689b      	ldr	r3, [r3, #8]
 8013622:	3b01      	subs	r3, #1
 8013624:	021a      	lsls	r2, r3, #8
 8013626:	687b      	ldr	r3, [r7, #4]
 8013628:	681b      	ldr	r3, [r3, #0]
 801362a:	430a      	orrs	r2, r1
 801362c:	601a      	str	r2, [r3, #0]
             ((hqspi->Init.FifoThreshold - 1U) << QUADSPI_CR_FTHRES_Pos));

  /* Wait till BUSY flag reset */
  status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_BUSY, RESET, tickstart, hqspi->Timeout);
 801362e:	687b      	ldr	r3, [r7, #4]
 8013630:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8013632:	9300      	str	r3, [sp, #0]
 8013634:	68fb      	ldr	r3, [r7, #12]
 8013636:	2200      	movs	r2, #0
 8013638:	2120      	movs	r1, #32
 801363a:	6878      	ldr	r0, [r7, #4]
 801363c:	f000 fcf5 	bl	801402a <QSPI_WaitFlagStateUntilTimeout>
 8013640:	4603      	mov	r3, r0
 8013642:	72fb      	strb	r3, [r7, #11]

  if(status == HAL_OK)
 8013644:	7afb      	ldrb	r3, [r7, #11]
 8013646:	2b00      	cmp	r3, #0
 8013648:	d135      	bne.n	80136b6 <HAL_QSPI_Init+0xd6>
  {
    /* Configure QSPI Clock Prescaler and Sample Shift */
    MODIFY_REG(hqspi->Instance->CR, (QUADSPI_CR_PRESCALER | QUADSPI_CR_SSHIFT | QUADSPI_CR_FSEL | QUADSPI_CR_DFM),
 801364a:	687b      	ldr	r3, [r7, #4]
 801364c:	681b      	ldr	r3, [r3, #0]
 801364e:	681a      	ldr	r2, [r3, #0]
 8013650:	4b1b      	ldr	r3, [pc, #108]	@ (80136c0 <HAL_QSPI_Init+0xe0>)
 8013652:	4013      	ands	r3, r2
 8013654:	687a      	ldr	r2, [r7, #4]
 8013656:	6852      	ldr	r2, [r2, #4]
 8013658:	0611      	lsls	r1, r2, #24
 801365a:	687a      	ldr	r2, [r7, #4]
 801365c:	68d2      	ldr	r2, [r2, #12]
 801365e:	4311      	orrs	r1, r2
 8013660:	687a      	ldr	r2, [r7, #4]
 8013662:	69d2      	ldr	r2, [r2, #28]
 8013664:	4311      	orrs	r1, r2
 8013666:	687a      	ldr	r2, [r7, #4]
 8013668:	6a12      	ldr	r2, [r2, #32]
 801366a:	4311      	orrs	r1, r2
 801366c:	687a      	ldr	r2, [r7, #4]
 801366e:	6812      	ldr	r2, [r2, #0]
 8013670:	430b      	orrs	r3, r1
 8013672:	6013      	str	r3, [r2, #0]
               ((hqspi->Init.ClockPrescaler << QUADSPI_CR_PRESCALER_Pos) |
                hqspi->Init.SampleShifting  | hqspi->Init.FlashID | hqspi->Init.DualFlash));

    /* Configure QSPI Flash Size, CS High Time and Clock Mode */
    MODIFY_REG(hqspi->Instance->DCR, (QUADSPI_DCR_FSIZE | QUADSPI_DCR_CSHT | QUADSPI_DCR_CKMODE),
 8013674:	687b      	ldr	r3, [r7, #4]
 8013676:	681b      	ldr	r3, [r3, #0]
 8013678:	685a      	ldr	r2, [r3, #4]
 801367a:	4b12      	ldr	r3, [pc, #72]	@ (80136c4 <HAL_QSPI_Init+0xe4>)
 801367c:	4013      	ands	r3, r2
 801367e:	687a      	ldr	r2, [r7, #4]
 8013680:	6912      	ldr	r2, [r2, #16]
 8013682:	0411      	lsls	r1, r2, #16
 8013684:	687a      	ldr	r2, [r7, #4]
 8013686:	6952      	ldr	r2, [r2, #20]
 8013688:	4311      	orrs	r1, r2
 801368a:	687a      	ldr	r2, [r7, #4]
 801368c:	6992      	ldr	r2, [r2, #24]
 801368e:	4311      	orrs	r1, r2
 8013690:	687a      	ldr	r2, [r7, #4]
 8013692:	6812      	ldr	r2, [r2, #0]
 8013694:	430b      	orrs	r3, r1
 8013696:	6053      	str	r3, [r2, #4]
               ((hqspi->Init.FlashSize << QUADSPI_DCR_FSIZE_Pos) |
                hqspi->Init.ChipSelectHighTime | hqspi->Init.ClockMode));

    /* Enable the QSPI peripheral */
    __HAL_QSPI_ENABLE(hqspi);
 8013698:	687b      	ldr	r3, [r7, #4]
 801369a:	681b      	ldr	r3, [r3, #0]
 801369c:	681a      	ldr	r2, [r3, #0]
 801369e:	687b      	ldr	r3, [r7, #4]
 80136a0:	681b      	ldr	r3, [r3, #0]
 80136a2:	f042 0201 	orr.w	r2, r2, #1
 80136a6:	601a      	str	r2, [r3, #0]

    /* Set QSPI error code to none */
    hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;
 80136a8:	687b      	ldr	r3, [r7, #4]
 80136aa:	2200      	movs	r2, #0
 80136ac:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Initialize the QSPI state */
    hqspi->State = HAL_QSPI_STATE_READY;
 80136ae:	687b      	ldr	r3, [r7, #4]
 80136b0:	2201      	movs	r2, #1
 80136b2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  }

  /* Return function status */
  return status;
 80136b6:	7afb      	ldrb	r3, [r7, #11]
}
 80136b8:	4618      	mov	r0, r3
 80136ba:	3710      	adds	r7, #16
 80136bc:	46bd      	mov	sp, r7
 80136be:	bd80      	pop	{r7, pc}
 80136c0:	00ffff2f 	.word	0x00ffff2f
 80136c4:	ffe0f8fe 	.word	0xffe0f8fe

080136c8 <HAL_QSPI_IRQHandler>:
  * @brief Handle QSPI interrupt request.
  * @param hqspi QSPI handle
  * @retval None
  */
void HAL_QSPI_IRQHandler(QSPI_HandleTypeDef *hqspi)
{
 80136c8:	b580      	push	{r7, lr}
 80136ca:	b086      	sub	sp, #24
 80136cc:	af00      	add	r7, sp, #0
 80136ce:	6078      	str	r0, [r7, #4]
  __IO uint32_t *data_reg;
  uint32_t flag = READ_REG(hqspi->Instance->SR);
 80136d0:	687b      	ldr	r3, [r7, #4]
 80136d2:	681b      	ldr	r3, [r3, #0]
 80136d4:	689b      	ldr	r3, [r3, #8]
 80136d6:	617b      	str	r3, [r7, #20]
  uint32_t itsource = READ_REG(hqspi->Instance->CR);
 80136d8:	687b      	ldr	r3, [r7, #4]
 80136da:	681b      	ldr	r3, [r3, #0]
 80136dc:	681b      	ldr	r3, [r3, #0]
 80136de:	613b      	str	r3, [r7, #16]

  /* QSPI Fifo Threshold interrupt occurred ----------------------------------*/
  if(((flag & QSPI_FLAG_FT) != 0U) && ((itsource & QSPI_IT_FT) != 0U))
 80136e0:	697b      	ldr	r3, [r7, #20]
 80136e2:	f003 0304 	and.w	r3, r3, #4
 80136e6:	2b00      	cmp	r3, #0
 80136e8:	d064      	beq.n	80137b4 <HAL_QSPI_IRQHandler+0xec>
 80136ea:	693b      	ldr	r3, [r7, #16]
 80136ec:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80136f0:	2b00      	cmp	r3, #0
 80136f2:	d05f      	beq.n	80137b4 <HAL_QSPI_IRQHandler+0xec>
  {
    data_reg = &hqspi->Instance->DR;
 80136f4:	687b      	ldr	r3, [r7, #4]
 80136f6:	681b      	ldr	r3, [r3, #0]
 80136f8:	3320      	adds	r3, #32
 80136fa:	60fb      	str	r3, [r7, #12]

    if(hqspi->State == HAL_QSPI_STATE_BUSY_INDIRECT_TX)
 80136fc:	687b      	ldr	r3, [r7, #4]
 80136fe:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8013702:	b2db      	uxtb	r3, r3
 8013704:	2b12      	cmp	r3, #18
 8013706:	d125      	bne.n	8013754 <HAL_QSPI_IRQHandler+0x8c>
    {
      /* Transmission process */
      while(__HAL_QSPI_GET_FLAG(hqspi, QSPI_FLAG_FT) != RESET)
 8013708:	e01c      	b.n	8013744 <HAL_QSPI_IRQHandler+0x7c>
      {
        if (hqspi->TxXferCount > 0U)
 801370a:	687b      	ldr	r3, [r7, #4]
 801370c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801370e:	2b00      	cmp	r3, #0
 8013710:	d00f      	beq.n	8013732 <HAL_QSPI_IRQHandler+0x6a>
        {
          /* Fill the FIFO until the threshold is reached */
          *((__IO uint8_t *)data_reg) = *hqspi->pTxBuffPtr;
 8013712:	687b      	ldr	r3, [r7, #4]
 8013714:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8013716:	781a      	ldrb	r2, [r3, #0]
 8013718:	68fb      	ldr	r3, [r7, #12]
 801371a:	701a      	strb	r2, [r3, #0]
          hqspi->pTxBuffPtr++;
 801371c:	687b      	ldr	r3, [r7, #4]
 801371e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8013720:	1c5a      	adds	r2, r3, #1
 8013722:	687b      	ldr	r3, [r7, #4]
 8013724:	625a      	str	r2, [r3, #36]	@ 0x24
          hqspi->TxXferCount--;
 8013726:	687b      	ldr	r3, [r7, #4]
 8013728:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801372a:	1e5a      	subs	r2, r3, #1
 801372c:	687b      	ldr	r3, [r7, #4]
 801372e:	62da      	str	r2, [r3, #44]	@ 0x2c
 8013730:	e008      	b.n	8013744 <HAL_QSPI_IRQHandler+0x7c>
        }
        else
        {
          /* No more data available for the transfer */
          /* Disable the QSPI FIFO Threshold Interrupt */
          __HAL_QSPI_DISABLE_IT(hqspi, QSPI_IT_FT);
 8013732:	687b      	ldr	r3, [r7, #4]
 8013734:	681b      	ldr	r3, [r3, #0]
 8013736:	681a      	ldr	r2, [r3, #0]
 8013738:	687b      	ldr	r3, [r7, #4]
 801373a:	681b      	ldr	r3, [r3, #0]
 801373c:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 8013740:	601a      	str	r2, [r3, #0]
          break;
 8013742:	e033      	b.n	80137ac <HAL_QSPI_IRQHandler+0xe4>
      while(__HAL_QSPI_GET_FLAG(hqspi, QSPI_FLAG_FT) != RESET)
 8013744:	687b      	ldr	r3, [r7, #4]
 8013746:	681b      	ldr	r3, [r3, #0]
 8013748:	689b      	ldr	r3, [r3, #8]
 801374a:	f003 0304 	and.w	r3, r3, #4
 801374e:	2b00      	cmp	r3, #0
 8013750:	d1db      	bne.n	801370a <HAL_QSPI_IRQHandler+0x42>
 8013752:	e02b      	b.n	80137ac <HAL_QSPI_IRQHandler+0xe4>
        }
      }
    }
    else if(hqspi->State == HAL_QSPI_STATE_BUSY_INDIRECT_RX)
 8013754:	687b      	ldr	r3, [r7, #4]
 8013756:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 801375a:	b2db      	uxtb	r3, r3
 801375c:	2b22      	cmp	r3, #34	@ 0x22
 801375e:	d125      	bne.n	80137ac <HAL_QSPI_IRQHandler+0xe4>
    {
      /* Receiving Process */
      while(__HAL_QSPI_GET_FLAG(hqspi, QSPI_FLAG_FT) != RESET)
 8013760:	e01d      	b.n	801379e <HAL_QSPI_IRQHandler+0xd6>
      {
        if (hqspi->RxXferCount > 0U)
 8013762:	687b      	ldr	r3, [r7, #4]
 8013764:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8013766:	2b00      	cmp	r3, #0
 8013768:	d010      	beq.n	801378c <HAL_QSPI_IRQHandler+0xc4>
        {
          /* Read the FIFO until the threshold is reached */
          *hqspi->pRxBuffPtr = *((__IO uint8_t *)data_reg);
 801376a:	687b      	ldr	r3, [r7, #4]
 801376c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 801376e:	68fa      	ldr	r2, [r7, #12]
 8013770:	7812      	ldrb	r2, [r2, #0]
 8013772:	b2d2      	uxtb	r2, r2
 8013774:	701a      	strb	r2, [r3, #0]
          hqspi->pRxBuffPtr++;
 8013776:	687b      	ldr	r3, [r7, #4]
 8013778:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 801377a:	1c5a      	adds	r2, r3, #1
 801377c:	687b      	ldr	r3, [r7, #4]
 801377e:	631a      	str	r2, [r3, #48]	@ 0x30
          hqspi->RxXferCount--;
 8013780:	687b      	ldr	r3, [r7, #4]
 8013782:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8013784:	1e5a      	subs	r2, r3, #1
 8013786:	687b      	ldr	r3, [r7, #4]
 8013788:	639a      	str	r2, [r3, #56]	@ 0x38
 801378a:	e008      	b.n	801379e <HAL_QSPI_IRQHandler+0xd6>
        }
        else
        {
          /* All data have been received for the transfer */
          /* Disable the QSPI FIFO Threshold Interrupt */
          __HAL_QSPI_DISABLE_IT(hqspi, QSPI_IT_FT);
 801378c:	687b      	ldr	r3, [r7, #4]
 801378e:	681b      	ldr	r3, [r3, #0]
 8013790:	681a      	ldr	r2, [r3, #0]
 8013792:	687b      	ldr	r3, [r7, #4]
 8013794:	681b      	ldr	r3, [r3, #0]
 8013796:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 801379a:	601a      	str	r2, [r3, #0]
          break;
 801379c:	e006      	b.n	80137ac <HAL_QSPI_IRQHandler+0xe4>
      while(__HAL_QSPI_GET_FLAG(hqspi, QSPI_FLAG_FT) != RESET)
 801379e:	687b      	ldr	r3, [r7, #4]
 80137a0:	681b      	ldr	r3, [r3, #0]
 80137a2:	689b      	ldr	r3, [r3, #8]
 80137a4:	f003 0304 	and.w	r3, r3, #4
 80137a8:	2b00      	cmp	r3, #0
 80137aa:	d1da      	bne.n	8013762 <HAL_QSPI_IRQHandler+0x9a>

    /* FIFO Threshold callback */
#if (USE_HAL_QSPI_REGISTER_CALLBACKS == 1)
    hqspi->FifoThresholdCallback(hqspi);
#else
    HAL_QSPI_FifoThresholdCallback(hqspi);
 80137ac:	6878      	ldr	r0, [r7, #4]
 80137ae:	f000 fbdd 	bl	8013f6c <HAL_QSPI_FifoThresholdCallback>
 80137b2:	e13c      	b.n	8013a2e <HAL_QSPI_IRQHandler+0x366>
#endif
  }

  /* QSPI Transfer Complete interrupt occurred -------------------------------*/
  else if(((flag & QSPI_FLAG_TC) != 0U) && ((itsource & QSPI_IT_TC) != 0U))
 80137b4:	697b      	ldr	r3, [r7, #20]
 80137b6:	f003 0302 	and.w	r3, r3, #2
 80137ba:	2b00      	cmp	r3, #0
 80137bc:	f000 80b0 	beq.w	8013920 <HAL_QSPI_IRQHandler+0x258>
 80137c0:	693b      	ldr	r3, [r7, #16]
 80137c2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80137c6:	2b00      	cmp	r3, #0
 80137c8:	f000 80aa 	beq.w	8013920 <HAL_QSPI_IRQHandler+0x258>
  {
    /* Clear interrupt */
    WRITE_REG(hqspi->Instance->FCR, QSPI_FLAG_TC);
 80137cc:	687b      	ldr	r3, [r7, #4]
 80137ce:	681b      	ldr	r3, [r3, #0]
 80137d0:	2202      	movs	r2, #2
 80137d2:	60da      	str	r2, [r3, #12]

    /* Disable the QSPI FIFO Threshold, Transfer Error and Transfer complete Interrupts */
    __HAL_QSPI_DISABLE_IT(hqspi, QSPI_IT_TC | QSPI_IT_TE | QSPI_IT_FT);
 80137d4:	687b      	ldr	r3, [r7, #4]
 80137d6:	681b      	ldr	r3, [r3, #0]
 80137d8:	681a      	ldr	r2, [r3, #0]
 80137da:	687b      	ldr	r3, [r7, #4]
 80137dc:	681b      	ldr	r3, [r3, #0]
 80137de:	f422 22e0 	bic.w	r2, r2, #458752	@ 0x70000
 80137e2:	601a      	str	r2, [r3, #0]

    /* Transfer complete callback */
    if(hqspi->State == HAL_QSPI_STATE_BUSY_INDIRECT_TX)
 80137e4:	687b      	ldr	r3, [r7, #4]
 80137e6:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80137ea:	b2db      	uxtb	r3, r3
 80137ec:	2b12      	cmp	r3, #18
 80137ee:	d120      	bne.n	8013832 <HAL_QSPI_IRQHandler+0x16a>
    {
      if ((hqspi->Instance->CR & QUADSPI_CR_DMAEN) != 0U)
 80137f0:	687b      	ldr	r3, [r7, #4]
 80137f2:	681b      	ldr	r3, [r3, #0]
 80137f4:	681b      	ldr	r3, [r3, #0]
 80137f6:	f003 0304 	and.w	r3, r3, #4
 80137fa:	2b00      	cmp	r3, #0
 80137fc:	d011      	beq.n	8013822 <HAL_QSPI_IRQHandler+0x15a>
      {
        /* Disable using MDMA by clearing DMAEN, note that DMAEN bit is "reserved"
           but no impact on H7 HW and it minimize the cost in the footprint */
        CLEAR_BIT(hqspi->Instance->CR, QUADSPI_CR_DMAEN);
 80137fe:	687b      	ldr	r3, [r7, #4]
 8013800:	681b      	ldr	r3, [r3, #0]
 8013802:	681a      	ldr	r2, [r3, #0]
 8013804:	687b      	ldr	r3, [r7, #4]
 8013806:	681b      	ldr	r3, [r3, #0]
 8013808:	f022 0204 	bic.w	r2, r2, #4
 801380c:	601a      	str	r2, [r3, #0]

        /* Disable the MDMA channel */
        __HAL_MDMA_DISABLE(hqspi->hmdma);
 801380e:	687b      	ldr	r3, [r7, #4]
 8013810:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8013812:	681b      	ldr	r3, [r3, #0]
 8013814:	68da      	ldr	r2, [r3, #12]
 8013816:	687b      	ldr	r3, [r7, #4]
 8013818:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 801381a:	681b      	ldr	r3, [r3, #0]
 801381c:	f022 0201 	bic.w	r2, r2, #1
 8013820:	60da      	str	r2, [r3, #12]
      }


      /* Change state of QSPI */
      hqspi->State = HAL_QSPI_STATE_READY;
 8013822:	687b      	ldr	r3, [r7, #4]
 8013824:	2201      	movs	r2, #1
 8013826:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      /* TX Complete callback */
#if (USE_HAL_QSPI_REGISTER_CALLBACKS == 1)
      hqspi->TxCpltCallback(hqspi);
#else
      HAL_QSPI_TxCpltCallback(hqspi);
 801382a:	6878      	ldr	r0, [r7, #4]
 801382c:	f000 fb94 	bl	8013f58 <HAL_QSPI_TxCpltCallback>
    if(hqspi->State == HAL_QSPI_STATE_BUSY_INDIRECT_TX)
 8013830:	e0fa      	b.n	8013a28 <HAL_QSPI_IRQHandler+0x360>
#endif
    }
    else if(hqspi->State == HAL_QSPI_STATE_BUSY_INDIRECT_RX)
 8013832:	687b      	ldr	r3, [r7, #4]
 8013834:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8013838:	b2db      	uxtb	r3, r3
 801383a:	2b22      	cmp	r3, #34	@ 0x22
 801383c:	d143      	bne.n	80138c6 <HAL_QSPI_IRQHandler+0x1fe>
    {
      if ((hqspi->Instance->CR & QUADSPI_CR_DMAEN) != 0U)
 801383e:	687b      	ldr	r3, [r7, #4]
 8013840:	681b      	ldr	r3, [r3, #0]
 8013842:	681b      	ldr	r3, [r3, #0]
 8013844:	f003 0304 	and.w	r3, r3, #4
 8013848:	2b00      	cmp	r3, #0
 801384a:	d012      	beq.n	8013872 <HAL_QSPI_IRQHandler+0x1aa>
      {
        /* Disable using MDMA by clearing DMAEN, note that DMAEN bit is "reserved"
           but no impact on H7 HW and it minimize the cost in the footprint */
        CLEAR_BIT(hqspi->Instance->CR, QUADSPI_CR_DMAEN);
 801384c:	687b      	ldr	r3, [r7, #4]
 801384e:	681b      	ldr	r3, [r3, #0]
 8013850:	681a      	ldr	r2, [r3, #0]
 8013852:	687b      	ldr	r3, [r7, #4]
 8013854:	681b      	ldr	r3, [r3, #0]
 8013856:	f022 0204 	bic.w	r2, r2, #4
 801385a:	601a      	str	r2, [r3, #0]

        /* Disable the MDMA channel */
        __HAL_MDMA_DISABLE(hqspi->hmdma);
 801385c:	687b      	ldr	r3, [r7, #4]
 801385e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8013860:	681b      	ldr	r3, [r3, #0]
 8013862:	68da      	ldr	r2, [r3, #12]
 8013864:	687b      	ldr	r3, [r7, #4]
 8013866:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8013868:	681b      	ldr	r3, [r3, #0]
 801386a:	f022 0201 	bic.w	r2, r2, #1
 801386e:	60da      	str	r2, [r3, #12]
 8013870:	e021      	b.n	80138b6 <HAL_QSPI_IRQHandler+0x1ee>
      }
      else
      {
        data_reg = &hqspi->Instance->DR;
 8013872:	687b      	ldr	r3, [r7, #4]
 8013874:	681b      	ldr	r3, [r3, #0]
 8013876:	3320      	adds	r3, #32
 8013878:	60fb      	str	r3, [r7, #12]
        while(READ_BIT(hqspi->Instance->SR, QUADSPI_SR_FLEVEL) != 0U)
 801387a:	e013      	b.n	80138a4 <HAL_QSPI_IRQHandler+0x1dc>
        {
          if (hqspi->RxXferCount > 0U)
 801387c:	687b      	ldr	r3, [r7, #4]
 801387e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8013880:	2b00      	cmp	r3, #0
 8013882:	d017      	beq.n	80138b4 <HAL_QSPI_IRQHandler+0x1ec>
          {
            /* Read the last data received in the FIFO until it is empty */
            *hqspi->pRxBuffPtr = *((__IO uint8_t *)data_reg);
 8013884:	687b      	ldr	r3, [r7, #4]
 8013886:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8013888:	68fa      	ldr	r2, [r7, #12]
 801388a:	7812      	ldrb	r2, [r2, #0]
 801388c:	b2d2      	uxtb	r2, r2
 801388e:	701a      	strb	r2, [r3, #0]
            hqspi->pRxBuffPtr++;
 8013890:	687b      	ldr	r3, [r7, #4]
 8013892:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8013894:	1c5a      	adds	r2, r3, #1
 8013896:	687b      	ldr	r3, [r7, #4]
 8013898:	631a      	str	r2, [r3, #48]	@ 0x30
            hqspi->RxXferCount--;
 801389a:	687b      	ldr	r3, [r7, #4]
 801389c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 801389e:	1e5a      	subs	r2, r3, #1
 80138a0:	687b      	ldr	r3, [r7, #4]
 80138a2:	639a      	str	r2, [r3, #56]	@ 0x38
        while(READ_BIT(hqspi->Instance->SR, QUADSPI_SR_FLEVEL) != 0U)
 80138a4:	687b      	ldr	r3, [r7, #4]
 80138a6:	681b      	ldr	r3, [r3, #0]
 80138a8:	689b      	ldr	r3, [r3, #8]
 80138aa:	f403 537c 	and.w	r3, r3, #16128	@ 0x3f00
 80138ae:	2b00      	cmp	r3, #0
 80138b0:	d1e4      	bne.n	801387c <HAL_QSPI_IRQHandler+0x1b4>
 80138b2:	e000      	b.n	80138b6 <HAL_QSPI_IRQHandler+0x1ee>
          }
          else
          {
            /* All data have been received for the transfer */
            break;
 80138b4:	bf00      	nop
        }
      }


      /* Change state of QSPI */
      hqspi->State = HAL_QSPI_STATE_READY;
 80138b6:	687b      	ldr	r3, [r7, #4]
 80138b8:	2201      	movs	r2, #1
 80138ba:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      /* RX Complete callback */
#if (USE_HAL_QSPI_REGISTER_CALLBACKS == 1)
      hqspi->RxCpltCallback(hqspi);
#else
      HAL_QSPI_RxCpltCallback(hqspi);
 80138be:	6878      	ldr	r0, [r7, #4]
 80138c0:	f000 fb40 	bl	8013f44 <HAL_QSPI_RxCpltCallback>
    if(hqspi->State == HAL_QSPI_STATE_BUSY_INDIRECT_TX)
 80138c4:	e0b0      	b.n	8013a28 <HAL_QSPI_IRQHandler+0x360>
#endif
    }
    else if(hqspi->State == HAL_QSPI_STATE_BUSY)
 80138c6:	687b      	ldr	r3, [r7, #4]
 80138c8:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80138cc:	b2db      	uxtb	r3, r3
 80138ce:	2b02      	cmp	r3, #2
 80138d0:	d107      	bne.n	80138e2 <HAL_QSPI_IRQHandler+0x21a>
    {
      /* Change state of QSPI */
      hqspi->State = HAL_QSPI_STATE_READY;
 80138d2:	687b      	ldr	r3, [r7, #4]
 80138d4:	2201      	movs	r2, #1
 80138d6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      /* Command Complete callback */
#if (USE_HAL_QSPI_REGISTER_CALLBACKS == 1)
      hqspi->CmdCpltCallback(hqspi);
#else
      HAL_QSPI_CmdCpltCallback(hqspi);
 80138da:	6878      	ldr	r0, [r7, #4]
 80138dc:	f000 fb28 	bl	8013f30 <HAL_QSPI_CmdCpltCallback>
    if(hqspi->State == HAL_QSPI_STATE_BUSY_INDIRECT_TX)
 80138e0:	e0a2      	b.n	8013a28 <HAL_QSPI_IRQHandler+0x360>
#endif
    }
    else if(hqspi->State == HAL_QSPI_STATE_ABORT)
 80138e2:	687b      	ldr	r3, [r7, #4]
 80138e4:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80138e8:	b2db      	uxtb	r3, r3
 80138ea:	2b08      	cmp	r3, #8
 80138ec:	f040 809c 	bne.w	8013a28 <HAL_QSPI_IRQHandler+0x360>
    {
      /* Reset functional mode configuration to indirect write mode by default */
      CLEAR_BIT(hqspi->Instance->CCR, QUADSPI_CCR_FMODE);
 80138f0:	687b      	ldr	r3, [r7, #4]
 80138f2:	681b      	ldr	r3, [r3, #0]
 80138f4:	695a      	ldr	r2, [r3, #20]
 80138f6:	687b      	ldr	r3, [r7, #4]
 80138f8:	681b      	ldr	r3, [r3, #0]
 80138fa:	f022 6240 	bic.w	r2, r2, #201326592	@ 0xc000000
 80138fe:	615a      	str	r2, [r3, #20]

      /* Change state of QSPI */
      hqspi->State = HAL_QSPI_STATE_READY;
 8013900:	687b      	ldr	r3, [r7, #4]
 8013902:	2201      	movs	r2, #1
 8013904:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      if (hqspi->ErrorCode == HAL_QSPI_ERROR_NONE)
 8013908:	687b      	ldr	r3, [r7, #4]
 801390a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 801390c:	2b00      	cmp	r3, #0
 801390e:	d103      	bne.n	8013918 <HAL_QSPI_IRQHandler+0x250>

        /* Abort Complete callback */
#if (USE_HAL_QSPI_REGISTER_CALLBACKS == 1)
        hqspi->AbortCpltCallback(hqspi);
#else
        HAL_QSPI_AbortCpltCallback(hqspi);
 8013910:	6878      	ldr	r0, [r7, #4]
 8013912:	f000 fb03 	bl	8013f1c <HAL_QSPI_AbortCpltCallback>
    if(hqspi->State == HAL_QSPI_STATE_BUSY_INDIRECT_TX)
 8013916:	e087      	b.n	8013a28 <HAL_QSPI_IRQHandler+0x360>

        /* Error callback */
#if (USE_HAL_QSPI_REGISTER_CALLBACKS == 1)
        hqspi->ErrorCallback(hqspi);
#else
        HAL_QSPI_ErrorCallback(hqspi);
 8013918:	6878      	ldr	r0, [r7, #4]
 801391a:	f000 faf5 	bl	8013f08 <HAL_QSPI_ErrorCallback>
    if(hqspi->State == HAL_QSPI_STATE_BUSY_INDIRECT_TX)
 801391e:	e083      	b.n	8013a28 <HAL_QSPI_IRQHandler+0x360>
     /* Nothing to do */
    }
  }

  /* QSPI Status Match interrupt occurred ------------------------------------*/
  else if(((flag & QSPI_FLAG_SM) != 0U) && ((itsource & QSPI_IT_SM) != 0U))
 8013920:	697b      	ldr	r3, [r7, #20]
 8013922:	f003 0308 	and.w	r3, r3, #8
 8013926:	2b00      	cmp	r3, #0
 8013928:	d01f      	beq.n	801396a <HAL_QSPI_IRQHandler+0x2a2>
 801392a:	693b      	ldr	r3, [r7, #16]
 801392c:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8013930:	2b00      	cmp	r3, #0
 8013932:	d01a      	beq.n	801396a <HAL_QSPI_IRQHandler+0x2a2>
  {
    /* Clear interrupt */
    WRITE_REG(hqspi->Instance->FCR, QSPI_FLAG_SM);
 8013934:	687b      	ldr	r3, [r7, #4]
 8013936:	681b      	ldr	r3, [r3, #0]
 8013938:	2208      	movs	r2, #8
 801393a:	60da      	str	r2, [r3, #12]

    /* Check if the automatic poll mode stop is activated */
    if(READ_BIT(hqspi->Instance->CR, QUADSPI_CR_APMS) != 0U)
 801393c:	687b      	ldr	r3, [r7, #4]
 801393e:	681b      	ldr	r3, [r3, #0]
 8013940:	681b      	ldr	r3, [r3, #0]
 8013942:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8013946:	2b00      	cmp	r3, #0
 8013948:	d00b      	beq.n	8013962 <HAL_QSPI_IRQHandler+0x29a>
    {
      /* Disable the QSPI Transfer Error and Status Match Interrupts */
      __HAL_QSPI_DISABLE_IT(hqspi, (QSPI_IT_SM | QSPI_IT_TE));
 801394a:	687b      	ldr	r3, [r7, #4]
 801394c:	681b      	ldr	r3, [r3, #0]
 801394e:	681a      	ldr	r2, [r3, #0]
 8013950:	687b      	ldr	r3, [r7, #4]
 8013952:	681b      	ldr	r3, [r3, #0]
 8013954:	f422 2210 	bic.w	r2, r2, #589824	@ 0x90000
 8013958:	601a      	str	r2, [r3, #0]

      /* Change state of QSPI */
      hqspi->State = HAL_QSPI_STATE_READY;
 801395a:	687b      	ldr	r3, [r7, #4]
 801395c:	2201      	movs	r2, #1
 801395e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Status match callback */
#if (USE_HAL_QSPI_REGISTER_CALLBACKS == 1)
    hqspi->StatusMatchCallback(hqspi);
#else
    HAL_QSPI_StatusMatchCallback(hqspi);
 8013962:	6878      	ldr	r0, [r7, #4]
 8013964:	f000 fb0c 	bl	8013f80 <HAL_QSPI_StatusMatchCallback>
 8013968:	e061      	b.n	8013a2e <HAL_QSPI_IRQHandler+0x366>
#endif
  }

  /* QSPI Transfer Error interrupt occurred ----------------------------------*/
  else if(((flag & QSPI_FLAG_TE) != 0U) && ((itsource & QSPI_IT_TE) != 0U))
 801396a:	697b      	ldr	r3, [r7, #20]
 801396c:	f003 0301 	and.w	r3, r3, #1
 8013970:	2b00      	cmp	r3, #0
 8013972:	d047      	beq.n	8013a04 <HAL_QSPI_IRQHandler+0x33c>
 8013974:	693b      	ldr	r3, [r7, #16]
 8013976:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 801397a:	2b00      	cmp	r3, #0
 801397c:	d042      	beq.n	8013a04 <HAL_QSPI_IRQHandler+0x33c>
  {
    /* Clear interrupt */
    WRITE_REG(hqspi->Instance->FCR, QSPI_FLAG_TE);
 801397e:	687b      	ldr	r3, [r7, #4]
 8013980:	681b      	ldr	r3, [r3, #0]
 8013982:	2201      	movs	r2, #1
 8013984:	60da      	str	r2, [r3, #12]

    /* Disable all the QSPI Interrupts */
    __HAL_QSPI_DISABLE_IT(hqspi, QSPI_IT_SM | QSPI_IT_TC | QSPI_IT_TE | QSPI_IT_FT);
 8013986:	687b      	ldr	r3, [r7, #4]
 8013988:	681b      	ldr	r3, [r3, #0]
 801398a:	681a      	ldr	r2, [r3, #0]
 801398c:	687b      	ldr	r3, [r7, #4]
 801398e:	681b      	ldr	r3, [r3, #0]
 8013990:	f422 2270 	bic.w	r2, r2, #983040	@ 0xf0000
 8013994:	601a      	str	r2, [r3, #0]

    /* Set error code */
    hqspi->ErrorCode |= HAL_QSPI_ERROR_TRANSFER;
 8013996:	687b      	ldr	r3, [r7, #4]
 8013998:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 801399a:	f043 0202 	orr.w	r2, r3, #2
 801399e:	687b      	ldr	r3, [r7, #4]
 80139a0:	645a      	str	r2, [r3, #68]	@ 0x44

    if ((hqspi->Instance->CR & QUADSPI_CR_DMAEN) != 0U)
 80139a2:	687b      	ldr	r3, [r7, #4]
 80139a4:	681b      	ldr	r3, [r3, #0]
 80139a6:	681b      	ldr	r3, [r3, #0]
 80139a8:	f003 0304 	and.w	r3, r3, #4
 80139ac:	2b00      	cmp	r3, #0
 80139ae:	d021      	beq.n	80139f4 <HAL_QSPI_IRQHandler+0x32c>
    {
      /* Disable using MDMA by clearing DMAEN, note that DMAEN bit is "reserved"
         but no impact on H7 HW and it minimize the cost in the footprint */
      CLEAR_BIT(hqspi->Instance->CR, QUADSPI_CR_DMAEN);
 80139b0:	687b      	ldr	r3, [r7, #4]
 80139b2:	681b      	ldr	r3, [r3, #0]
 80139b4:	681a      	ldr	r2, [r3, #0]
 80139b6:	687b      	ldr	r3, [r7, #4]
 80139b8:	681b      	ldr	r3, [r3, #0]
 80139ba:	f022 0204 	bic.w	r2, r2, #4
 80139be:	601a      	str	r2, [r3, #0]

      /* Disable the MDMA channel */
      hqspi->hmdma->XferAbortCallback = QSPI_DMAAbortCplt;
 80139c0:	687b      	ldr	r3, [r7, #4]
 80139c2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80139c4:	4a1c      	ldr	r2, [pc, #112]	@ (8013a38 <HAL_QSPI_IRQHandler+0x370>)
 80139c6:	659a      	str	r2, [r3, #88]	@ 0x58
      if (HAL_MDMA_Abort_IT(hqspi->hmdma) != HAL_OK)
 80139c8:	687b      	ldr	r3, [r7, #4]
 80139ca:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80139cc:	4618      	mov	r0, r3
 80139ce:	f7ff fced 	bl	80133ac <HAL_MDMA_Abort_IT>
 80139d2:	4603      	mov	r3, r0
 80139d4:	2b00      	cmp	r3, #0
 80139d6:	d029      	beq.n	8013a2c <HAL_QSPI_IRQHandler+0x364>
      {
        /* Set error code to DMA */
        hqspi->ErrorCode |= HAL_QSPI_ERROR_DMA;
 80139d8:	687b      	ldr	r3, [r7, #4]
 80139da:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80139dc:	f043 0204 	orr.w	r2, r3, #4
 80139e0:	687b      	ldr	r3, [r7, #4]
 80139e2:	645a      	str	r2, [r3, #68]	@ 0x44

        /* Change state of QSPI */
        hqspi->State = HAL_QSPI_STATE_READY;
 80139e4:	687b      	ldr	r3, [r7, #4]
 80139e6:	2201      	movs	r2, #1
 80139e8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        /* Error callback */
#if (USE_HAL_QSPI_REGISTER_CALLBACKS == 1)
        hqspi->ErrorCallback(hqspi);
#else
        HAL_QSPI_ErrorCallback(hqspi);
 80139ec:	6878      	ldr	r0, [r7, #4]
 80139ee:	f000 fa8b 	bl	8013f08 <HAL_QSPI_ErrorCallback>
    if ((hqspi->Instance->CR & QUADSPI_CR_DMAEN) != 0U)
 80139f2:	e01b      	b.n	8013a2c <HAL_QSPI_IRQHandler+0x364>
      }
    }
    else
    {
      /* Change state of QSPI */
      hqspi->State = HAL_QSPI_STATE_READY;
 80139f4:	687b      	ldr	r3, [r7, #4]
 80139f6:	2201      	movs	r2, #1
 80139f8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      /* Error callback */
#if (USE_HAL_QSPI_REGISTER_CALLBACKS == 1)
      hqspi->ErrorCallback(hqspi);
#else
      HAL_QSPI_ErrorCallback(hqspi);
 80139fc:	6878      	ldr	r0, [r7, #4]
 80139fe:	f000 fa83 	bl	8013f08 <HAL_QSPI_ErrorCallback>
    if ((hqspi->Instance->CR & QUADSPI_CR_DMAEN) != 0U)
 8013a02:	e013      	b.n	8013a2c <HAL_QSPI_IRQHandler+0x364>
#endif
    }
  }

  /* QSPI Timeout interrupt occurred -----------------------------------------*/
  else if(((flag & QSPI_FLAG_TO) != 0U) && ((itsource & QSPI_IT_TO) != 0U))
 8013a04:	697b      	ldr	r3, [r7, #20]
 8013a06:	f003 0310 	and.w	r3, r3, #16
 8013a0a:	2b00      	cmp	r3, #0
 8013a0c:	d00f      	beq.n	8013a2e <HAL_QSPI_IRQHandler+0x366>
 8013a0e:	693b      	ldr	r3, [r7, #16]
 8013a10:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8013a14:	2b00      	cmp	r3, #0
 8013a16:	d00a      	beq.n	8013a2e <HAL_QSPI_IRQHandler+0x366>
  {
    /* Clear interrupt */
    WRITE_REG(hqspi->Instance->FCR, QSPI_FLAG_TO);
 8013a18:	687b      	ldr	r3, [r7, #4]
 8013a1a:	681b      	ldr	r3, [r3, #0]
 8013a1c:	2210      	movs	r2, #16
 8013a1e:	60da      	str	r2, [r3, #12]

    /* Timeout callback */
#if (USE_HAL_QSPI_REGISTER_CALLBACKS == 1)
    hqspi->TimeOutCallback(hqspi);
#else
    HAL_QSPI_TimeOutCallback(hqspi);
 8013a20:	6878      	ldr	r0, [r7, #4]
 8013a22:	f000 fab7 	bl	8013f94 <HAL_QSPI_TimeOutCallback>

   else
  {
   /* Nothing to do */
  }
}
 8013a26:	e002      	b.n	8013a2e <HAL_QSPI_IRQHandler+0x366>
    if(hqspi->State == HAL_QSPI_STATE_BUSY_INDIRECT_TX)
 8013a28:	bf00      	nop
 8013a2a:	e000      	b.n	8013a2e <HAL_QSPI_IRQHandler+0x366>
    if ((hqspi->Instance->CR & QUADSPI_CR_DMAEN) != 0U)
 8013a2c:	bf00      	nop
}
 8013a2e:	bf00      	nop
 8013a30:	3718      	adds	r7, #24
 8013a32:	46bd      	mov	sp, r7
 8013a34:	bd80      	pop	{r7, pc}
 8013a36:	bf00      	nop
 8013a38:	08013fc5 	.word	0x08013fc5

08013a3c <HAL_QSPI_Command>:
  * @param Timeout Timeout duration
  * @note   This function is used only in Indirect Read or Write Modes
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_QSPI_Command(QSPI_HandleTypeDef *hqspi, QSPI_CommandTypeDef *cmd, uint32_t Timeout)
{
 8013a3c:	b580      	push	{r7, lr}
 8013a3e:	b088      	sub	sp, #32
 8013a40:	af02      	add	r7, sp, #8
 8013a42:	60f8      	str	r0, [r7, #12]
 8013a44:	60b9      	str	r1, [r7, #8]
 8013a46:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status;
  uint32_t tickstart = HAL_GetTick();
 8013a48:	f7fd fae2 	bl	8011010 <HAL_GetTick>
 8013a4c:	6138      	str	r0, [r7, #16]
  assert_param(IS_QSPI_DDR_MODE(cmd->DdrMode));
  assert_param(IS_QSPI_DDR_HHC(cmd->DdrHoldHalfCycle));
  assert_param(IS_QSPI_SIOO_MODE(cmd->SIOOMode));

  /* Process locked */
  __HAL_LOCK(hqspi);
 8013a4e:	68fb      	ldr	r3, [r7, #12]
 8013a50:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8013a54:	b2db      	uxtb	r3, r3
 8013a56:	2b01      	cmp	r3, #1
 8013a58:	d101      	bne.n	8013a5e <HAL_QSPI_Command+0x22>
 8013a5a:	2302      	movs	r3, #2
 8013a5c:	e048      	b.n	8013af0 <HAL_QSPI_Command+0xb4>
 8013a5e:	68fb      	ldr	r3, [r7, #12]
 8013a60:	2201      	movs	r2, #1
 8013a62:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  if(hqspi->State == HAL_QSPI_STATE_READY)
 8013a66:	68fb      	ldr	r3, [r7, #12]
 8013a68:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8013a6c:	b2db      	uxtb	r3, r3
 8013a6e:	2b01      	cmp	r3, #1
 8013a70:	d137      	bne.n	8013ae2 <HAL_QSPI_Command+0xa6>
  {
    hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;
 8013a72:	68fb      	ldr	r3, [r7, #12]
 8013a74:	2200      	movs	r2, #0
 8013a76:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Update QSPI state */
    hqspi->State = HAL_QSPI_STATE_BUSY;
 8013a78:	68fb      	ldr	r3, [r7, #12]
 8013a7a:	2202      	movs	r2, #2
 8013a7c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Wait till BUSY flag reset */
    status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_BUSY, RESET, tickstart, Timeout);
 8013a80:	687b      	ldr	r3, [r7, #4]
 8013a82:	9300      	str	r3, [sp, #0]
 8013a84:	693b      	ldr	r3, [r7, #16]
 8013a86:	2200      	movs	r2, #0
 8013a88:	2120      	movs	r1, #32
 8013a8a:	68f8      	ldr	r0, [r7, #12]
 8013a8c:	f000 facd 	bl	801402a <QSPI_WaitFlagStateUntilTimeout>
 8013a90:	4603      	mov	r3, r0
 8013a92:	75fb      	strb	r3, [r7, #23]

    if (status == HAL_OK)
 8013a94:	7dfb      	ldrb	r3, [r7, #23]
 8013a96:	2b00      	cmp	r3, #0
 8013a98:	d125      	bne.n	8013ae6 <HAL_QSPI_Command+0xaa>
    {
      /* Call the configuration function */
      QSPI_Config(hqspi, cmd, QSPI_FUNCTIONAL_MODE_INDIRECT_WRITE);
 8013a9a:	2200      	movs	r2, #0
 8013a9c:	68b9      	ldr	r1, [r7, #8]
 8013a9e:	68f8      	ldr	r0, [r7, #12]
 8013aa0:	f000 fafa 	bl	8014098 <QSPI_Config>

      if (cmd->DataMode == QSPI_DATA_NONE)
 8013aa4:	68bb      	ldr	r3, [r7, #8]
 8013aa6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8013aa8:	2b00      	cmp	r3, #0
 8013aaa:	d115      	bne.n	8013ad8 <HAL_QSPI_Command+0x9c>
      {
        /* When there is no data phase, the transfer start as soon as the configuration is done
        so wait until TC flag is set to go back in idle state */
        status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_TC, SET, tickstart, Timeout);
 8013aac:	687b      	ldr	r3, [r7, #4]
 8013aae:	9300      	str	r3, [sp, #0]
 8013ab0:	693b      	ldr	r3, [r7, #16]
 8013ab2:	2201      	movs	r2, #1
 8013ab4:	2102      	movs	r1, #2
 8013ab6:	68f8      	ldr	r0, [r7, #12]
 8013ab8:	f000 fab7 	bl	801402a <QSPI_WaitFlagStateUntilTimeout>
 8013abc:	4603      	mov	r3, r0
 8013abe:	75fb      	strb	r3, [r7, #23]

        if (status == HAL_OK)
 8013ac0:	7dfb      	ldrb	r3, [r7, #23]
 8013ac2:	2b00      	cmp	r3, #0
 8013ac4:	d10f      	bne.n	8013ae6 <HAL_QSPI_Command+0xaa>
        {
          __HAL_QSPI_CLEAR_FLAG(hqspi, QSPI_FLAG_TC);
 8013ac6:	68fb      	ldr	r3, [r7, #12]
 8013ac8:	681b      	ldr	r3, [r3, #0]
 8013aca:	2202      	movs	r2, #2
 8013acc:	60da      	str	r2, [r3, #12]

          /* Update QSPI state */
          hqspi->State = HAL_QSPI_STATE_READY;
 8013ace:	68fb      	ldr	r3, [r7, #12]
 8013ad0:	2201      	movs	r2, #1
 8013ad2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8013ad6:	e006      	b.n	8013ae6 <HAL_QSPI_Command+0xaa>
        }
      }
      else
      {
        /* Update QSPI state */
        hqspi->State = HAL_QSPI_STATE_READY;
 8013ad8:	68fb      	ldr	r3, [r7, #12]
 8013ada:	2201      	movs	r2, #1
 8013adc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8013ae0:	e001      	b.n	8013ae6 <HAL_QSPI_Command+0xaa>
      }
    }
  }
  else
  {
    status = HAL_BUSY;
 8013ae2:	2302      	movs	r3, #2
 8013ae4:	75fb      	strb	r3, [r7, #23]
  }

  /* Process unlocked */
  __HAL_UNLOCK(hqspi);
 8013ae6:	68fb      	ldr	r3, [r7, #12]
 8013ae8:	2200      	movs	r2, #0
 8013aea:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  /* Return function status */
  return status;
 8013aee:	7dfb      	ldrb	r3, [r7, #23]
}
 8013af0:	4618      	mov	r0, r3
 8013af2:	3718      	adds	r7, #24
 8013af4:	46bd      	mov	sp, r7
 8013af6:	bd80      	pop	{r7, pc}

08013af8 <HAL_QSPI_Transmit>:
  * @param Timeout Timeout duration
  * @note   This function is used only in Indirect Write Mode
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_QSPI_Transmit(QSPI_HandleTypeDef *hqspi, uint8_t *pData, uint32_t Timeout)
{
 8013af8:	b580      	push	{r7, lr}
 8013afa:	b08a      	sub	sp, #40	@ 0x28
 8013afc:	af02      	add	r7, sp, #8
 8013afe:	60f8      	str	r0, [r7, #12]
 8013b00:	60b9      	str	r1, [r7, #8]
 8013b02:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8013b04:	2300      	movs	r3, #0
 8013b06:	77fb      	strb	r3, [r7, #31]
  uint32_t tickstart = HAL_GetTick();
 8013b08:	f7fd fa82 	bl	8011010 <HAL_GetTick>
 8013b0c:	61b8      	str	r0, [r7, #24]
  __IO uint32_t *data_reg = &hqspi->Instance->DR;
 8013b0e:	68fb      	ldr	r3, [r7, #12]
 8013b10:	681b      	ldr	r3, [r3, #0]
 8013b12:	3320      	adds	r3, #32
 8013b14:	617b      	str	r3, [r7, #20]

  /* Process locked */
  __HAL_LOCK(hqspi);
 8013b16:	68fb      	ldr	r3, [r7, #12]
 8013b18:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8013b1c:	b2db      	uxtb	r3, r3
 8013b1e:	2b01      	cmp	r3, #1
 8013b20:	d101      	bne.n	8013b26 <HAL_QSPI_Transmit+0x2e>
 8013b22:	2302      	movs	r3, #2
 8013b24:	e076      	b.n	8013c14 <HAL_QSPI_Transmit+0x11c>
 8013b26:	68fb      	ldr	r3, [r7, #12]
 8013b28:	2201      	movs	r2, #1
 8013b2a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  if(hqspi->State == HAL_QSPI_STATE_READY)
 8013b2e:	68fb      	ldr	r3, [r7, #12]
 8013b30:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8013b34:	b2db      	uxtb	r3, r3
 8013b36:	2b01      	cmp	r3, #1
 8013b38:	d165      	bne.n	8013c06 <HAL_QSPI_Transmit+0x10e>
  {
    hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;
 8013b3a:	68fb      	ldr	r3, [r7, #12]
 8013b3c:	2200      	movs	r2, #0
 8013b3e:	645a      	str	r2, [r3, #68]	@ 0x44

    if(pData != NULL )
 8013b40:	68bb      	ldr	r3, [r7, #8]
 8013b42:	2b00      	cmp	r3, #0
 8013b44:	d056      	beq.n	8013bf4 <HAL_QSPI_Transmit+0xfc>
    {
      /* Update state */
      hqspi->State = HAL_QSPI_STATE_BUSY_INDIRECT_TX;
 8013b46:	68fb      	ldr	r3, [r7, #12]
 8013b48:	2212      	movs	r2, #18
 8013b4a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      /* Configure counters and size of the handle */
      hqspi->TxXferCount = READ_REG(hqspi->Instance->DLR) + 1U;
 8013b4e:	68fb      	ldr	r3, [r7, #12]
 8013b50:	681b      	ldr	r3, [r3, #0]
 8013b52:	691b      	ldr	r3, [r3, #16]
 8013b54:	1c5a      	adds	r2, r3, #1
 8013b56:	68fb      	ldr	r3, [r7, #12]
 8013b58:	62da      	str	r2, [r3, #44]	@ 0x2c
      hqspi->TxXferSize = READ_REG(hqspi->Instance->DLR) + 1U;
 8013b5a:	68fb      	ldr	r3, [r7, #12]
 8013b5c:	681b      	ldr	r3, [r3, #0]
 8013b5e:	691b      	ldr	r3, [r3, #16]
 8013b60:	1c5a      	adds	r2, r3, #1
 8013b62:	68fb      	ldr	r3, [r7, #12]
 8013b64:	629a      	str	r2, [r3, #40]	@ 0x28
      hqspi->pTxBuffPtr = pData;
 8013b66:	68fb      	ldr	r3, [r7, #12]
 8013b68:	68ba      	ldr	r2, [r7, #8]
 8013b6a:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Configure QSPI: CCR register with functional as indirect write */
      MODIFY_REG(hqspi->Instance->CCR, QUADSPI_CCR_FMODE, QSPI_FUNCTIONAL_MODE_INDIRECT_WRITE);
 8013b6c:	68fb      	ldr	r3, [r7, #12]
 8013b6e:	681b      	ldr	r3, [r3, #0]
 8013b70:	695a      	ldr	r2, [r3, #20]
 8013b72:	68fb      	ldr	r3, [r7, #12]
 8013b74:	681b      	ldr	r3, [r3, #0]
 8013b76:	f022 6240 	bic.w	r2, r2, #201326592	@ 0xc000000
 8013b7a:	615a      	str	r2, [r3, #20]

      while(hqspi->TxXferCount > 0U)
 8013b7c:	e01b      	b.n	8013bb6 <HAL_QSPI_Transmit+0xbe>
      {
        /* Wait until FT flag is set to send data */
        status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_FT, SET, tickstart, Timeout);
 8013b7e:	687b      	ldr	r3, [r7, #4]
 8013b80:	9300      	str	r3, [sp, #0]
 8013b82:	69bb      	ldr	r3, [r7, #24]
 8013b84:	2201      	movs	r2, #1
 8013b86:	2104      	movs	r1, #4
 8013b88:	68f8      	ldr	r0, [r7, #12]
 8013b8a:	f000 fa4e 	bl	801402a <QSPI_WaitFlagStateUntilTimeout>
 8013b8e:	4603      	mov	r3, r0
 8013b90:	77fb      	strb	r3, [r7, #31]

        if (status != HAL_OK)
 8013b92:	7ffb      	ldrb	r3, [r7, #31]
 8013b94:	2b00      	cmp	r3, #0
 8013b96:	d113      	bne.n	8013bc0 <HAL_QSPI_Transmit+0xc8>
        {
          break;
        }

        *((__IO uint8_t *)data_reg) = *hqspi->pTxBuffPtr;
 8013b98:	68fb      	ldr	r3, [r7, #12]
 8013b9a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8013b9c:	781a      	ldrb	r2, [r3, #0]
 8013b9e:	697b      	ldr	r3, [r7, #20]
 8013ba0:	701a      	strb	r2, [r3, #0]
        hqspi->pTxBuffPtr++;
 8013ba2:	68fb      	ldr	r3, [r7, #12]
 8013ba4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8013ba6:	1c5a      	adds	r2, r3, #1
 8013ba8:	68fb      	ldr	r3, [r7, #12]
 8013baa:	625a      	str	r2, [r3, #36]	@ 0x24
        hqspi->TxXferCount--;
 8013bac:	68fb      	ldr	r3, [r7, #12]
 8013bae:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8013bb0:	1e5a      	subs	r2, r3, #1
 8013bb2:	68fb      	ldr	r3, [r7, #12]
 8013bb4:	62da      	str	r2, [r3, #44]	@ 0x2c
      while(hqspi->TxXferCount > 0U)
 8013bb6:	68fb      	ldr	r3, [r7, #12]
 8013bb8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8013bba:	2b00      	cmp	r3, #0
 8013bbc:	d1df      	bne.n	8013b7e <HAL_QSPI_Transmit+0x86>
 8013bbe:	e000      	b.n	8013bc2 <HAL_QSPI_Transmit+0xca>
          break;
 8013bc0:	bf00      	nop
      }

      if (status == HAL_OK)
 8013bc2:	7ffb      	ldrb	r3, [r7, #31]
 8013bc4:	2b00      	cmp	r3, #0
 8013bc6:	d110      	bne.n	8013bea <HAL_QSPI_Transmit+0xf2>
      {
        /* Wait until TC flag is set to go back in idle state */
        status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_TC, SET, tickstart, Timeout);
 8013bc8:	687b      	ldr	r3, [r7, #4]
 8013bca:	9300      	str	r3, [sp, #0]
 8013bcc:	69bb      	ldr	r3, [r7, #24]
 8013bce:	2201      	movs	r2, #1
 8013bd0:	2102      	movs	r1, #2
 8013bd2:	68f8      	ldr	r0, [r7, #12]
 8013bd4:	f000 fa29 	bl	801402a <QSPI_WaitFlagStateUntilTimeout>
 8013bd8:	4603      	mov	r3, r0
 8013bda:	77fb      	strb	r3, [r7, #31]

        if (status == HAL_OK)
 8013bdc:	7ffb      	ldrb	r3, [r7, #31]
 8013bde:	2b00      	cmp	r3, #0
 8013be0:	d103      	bne.n	8013bea <HAL_QSPI_Transmit+0xf2>
        {
          /* Clear Transfer Complete bit */
          __HAL_QSPI_CLEAR_FLAG(hqspi, QSPI_FLAG_TC);
 8013be2:	68fb      	ldr	r3, [r7, #12]
 8013be4:	681b      	ldr	r3, [r3, #0]
 8013be6:	2202      	movs	r2, #2
 8013be8:	60da      	str	r2, [r3, #12]

        }
      }

      /* Update QSPI state */
      hqspi->State = HAL_QSPI_STATE_READY;
 8013bea:	68fb      	ldr	r3, [r7, #12]
 8013bec:	2201      	movs	r2, #1
 8013bee:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8013bf2:	e00a      	b.n	8013c0a <HAL_QSPI_Transmit+0x112>
    }
    else
    {
      hqspi->ErrorCode |= HAL_QSPI_ERROR_INVALID_PARAM;
 8013bf4:	68fb      	ldr	r3, [r7, #12]
 8013bf6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8013bf8:	f043 0208 	orr.w	r2, r3, #8
 8013bfc:	68fb      	ldr	r3, [r7, #12]
 8013bfe:	645a      	str	r2, [r3, #68]	@ 0x44
      status = HAL_ERROR;
 8013c00:	2301      	movs	r3, #1
 8013c02:	77fb      	strb	r3, [r7, #31]
 8013c04:	e001      	b.n	8013c0a <HAL_QSPI_Transmit+0x112>
    }
  }
  else
  {
    status = HAL_BUSY;
 8013c06:	2302      	movs	r3, #2
 8013c08:	77fb      	strb	r3, [r7, #31]
  }

  /* Process unlocked */
  __HAL_UNLOCK(hqspi);
 8013c0a:	68fb      	ldr	r3, [r7, #12]
 8013c0c:	2200      	movs	r2, #0
 8013c0e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  return status;
 8013c12:	7ffb      	ldrb	r3, [r7, #31]
}
 8013c14:	4618      	mov	r0, r3
 8013c16:	3720      	adds	r7, #32
 8013c18:	46bd      	mov	sp, r7
 8013c1a:	bd80      	pop	{r7, pc}

08013c1c <HAL_QSPI_Receive>:
  * @param Timeout Timeout duration
  * @note   This function is used only in Indirect Read Mode
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_QSPI_Receive(QSPI_HandleTypeDef *hqspi, uint8_t *pData, uint32_t Timeout)
{
 8013c1c:	b580      	push	{r7, lr}
 8013c1e:	b08a      	sub	sp, #40	@ 0x28
 8013c20:	af02      	add	r7, sp, #8
 8013c22:	60f8      	str	r0, [r7, #12]
 8013c24:	60b9      	str	r1, [r7, #8]
 8013c26:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8013c28:	2300      	movs	r3, #0
 8013c2a:	77fb      	strb	r3, [r7, #31]
  uint32_t tickstart = HAL_GetTick();
 8013c2c:	f7fd f9f0 	bl	8011010 <HAL_GetTick>
 8013c30:	61b8      	str	r0, [r7, #24]
  uint32_t addr_reg = READ_REG(hqspi->Instance->AR);
 8013c32:	68fb      	ldr	r3, [r7, #12]
 8013c34:	681b      	ldr	r3, [r3, #0]
 8013c36:	699b      	ldr	r3, [r3, #24]
 8013c38:	617b      	str	r3, [r7, #20]
  __IO uint32_t *data_reg = &hqspi->Instance->DR;
 8013c3a:	68fb      	ldr	r3, [r7, #12]
 8013c3c:	681b      	ldr	r3, [r3, #0]
 8013c3e:	3320      	adds	r3, #32
 8013c40:	613b      	str	r3, [r7, #16]

  /* Process locked */
  __HAL_LOCK(hqspi);
 8013c42:	68fb      	ldr	r3, [r7, #12]
 8013c44:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8013c48:	b2db      	uxtb	r3, r3
 8013c4a:	2b01      	cmp	r3, #1
 8013c4c:	d101      	bne.n	8013c52 <HAL_QSPI_Receive+0x36>
 8013c4e:	2302      	movs	r3, #2
 8013c50:	e07d      	b.n	8013d4e <HAL_QSPI_Receive+0x132>
 8013c52:	68fb      	ldr	r3, [r7, #12]
 8013c54:	2201      	movs	r2, #1
 8013c56:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  if(hqspi->State == HAL_QSPI_STATE_READY)
 8013c5a:	68fb      	ldr	r3, [r7, #12]
 8013c5c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8013c60:	b2db      	uxtb	r3, r3
 8013c62:	2b01      	cmp	r3, #1
 8013c64:	d16c      	bne.n	8013d40 <HAL_QSPI_Receive+0x124>
  {
    hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;
 8013c66:	68fb      	ldr	r3, [r7, #12]
 8013c68:	2200      	movs	r2, #0
 8013c6a:	645a      	str	r2, [r3, #68]	@ 0x44

    if(pData != NULL )
 8013c6c:	68bb      	ldr	r3, [r7, #8]
 8013c6e:	2b00      	cmp	r3, #0
 8013c70:	d05d      	beq.n	8013d2e <HAL_QSPI_Receive+0x112>
    {
      /* Update state */
      hqspi->State = HAL_QSPI_STATE_BUSY_INDIRECT_RX;
 8013c72:	68fb      	ldr	r3, [r7, #12]
 8013c74:	2222      	movs	r2, #34	@ 0x22
 8013c76:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      /* Configure counters and size of the handle */
      hqspi->RxXferCount = READ_REG(hqspi->Instance->DLR) + 1U;
 8013c7a:	68fb      	ldr	r3, [r7, #12]
 8013c7c:	681b      	ldr	r3, [r3, #0]
 8013c7e:	691b      	ldr	r3, [r3, #16]
 8013c80:	1c5a      	adds	r2, r3, #1
 8013c82:	68fb      	ldr	r3, [r7, #12]
 8013c84:	639a      	str	r2, [r3, #56]	@ 0x38
      hqspi->RxXferSize = READ_REG(hqspi->Instance->DLR) + 1U;
 8013c86:	68fb      	ldr	r3, [r7, #12]
 8013c88:	681b      	ldr	r3, [r3, #0]
 8013c8a:	691b      	ldr	r3, [r3, #16]
 8013c8c:	1c5a      	adds	r2, r3, #1
 8013c8e:	68fb      	ldr	r3, [r7, #12]
 8013c90:	635a      	str	r2, [r3, #52]	@ 0x34
      hqspi->pRxBuffPtr = pData;
 8013c92:	68fb      	ldr	r3, [r7, #12]
 8013c94:	68ba      	ldr	r2, [r7, #8]
 8013c96:	631a      	str	r2, [r3, #48]	@ 0x30

      /* Configure QSPI: CCR register with functional as indirect read */
      MODIFY_REG(hqspi->Instance->CCR, QUADSPI_CCR_FMODE, QSPI_FUNCTIONAL_MODE_INDIRECT_READ);
 8013c98:	68fb      	ldr	r3, [r7, #12]
 8013c9a:	681b      	ldr	r3, [r3, #0]
 8013c9c:	695b      	ldr	r3, [r3, #20]
 8013c9e:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8013ca2:	68fb      	ldr	r3, [r7, #12]
 8013ca4:	681b      	ldr	r3, [r3, #0]
 8013ca6:	f042 6280 	orr.w	r2, r2, #67108864	@ 0x4000000
 8013caa:	615a      	str	r2, [r3, #20]

      /* Start the transfer by re-writing the address in AR register */
      WRITE_REG(hqspi->Instance->AR, addr_reg);
 8013cac:	68fb      	ldr	r3, [r7, #12]
 8013cae:	681b      	ldr	r3, [r3, #0]
 8013cb0:	697a      	ldr	r2, [r7, #20]
 8013cb2:	619a      	str	r2, [r3, #24]

      while(hqspi->RxXferCount > 0U)
 8013cb4:	e01c      	b.n	8013cf0 <HAL_QSPI_Receive+0xd4>
      {
        /* Wait until FT or TC flag is set to read received data */
        status = QSPI_WaitFlagStateUntilTimeout(hqspi, (QSPI_FLAG_FT | QSPI_FLAG_TC), SET, tickstart, Timeout);
 8013cb6:	687b      	ldr	r3, [r7, #4]
 8013cb8:	9300      	str	r3, [sp, #0]
 8013cba:	69bb      	ldr	r3, [r7, #24]
 8013cbc:	2201      	movs	r2, #1
 8013cbe:	2106      	movs	r1, #6
 8013cc0:	68f8      	ldr	r0, [r7, #12]
 8013cc2:	f000 f9b2 	bl	801402a <QSPI_WaitFlagStateUntilTimeout>
 8013cc6:	4603      	mov	r3, r0
 8013cc8:	77fb      	strb	r3, [r7, #31]

        if  (status != HAL_OK)
 8013cca:	7ffb      	ldrb	r3, [r7, #31]
 8013ccc:	2b00      	cmp	r3, #0
 8013cce:	d114      	bne.n	8013cfa <HAL_QSPI_Receive+0xde>
        {
          break;
        }

        *hqspi->pRxBuffPtr = *((__IO uint8_t *)data_reg);
 8013cd0:	68fb      	ldr	r3, [r7, #12]
 8013cd2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8013cd4:	693a      	ldr	r2, [r7, #16]
 8013cd6:	7812      	ldrb	r2, [r2, #0]
 8013cd8:	b2d2      	uxtb	r2, r2
 8013cda:	701a      	strb	r2, [r3, #0]
        hqspi->pRxBuffPtr++;
 8013cdc:	68fb      	ldr	r3, [r7, #12]
 8013cde:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8013ce0:	1c5a      	adds	r2, r3, #1
 8013ce2:	68fb      	ldr	r3, [r7, #12]
 8013ce4:	631a      	str	r2, [r3, #48]	@ 0x30
        hqspi->RxXferCount--;
 8013ce6:	68fb      	ldr	r3, [r7, #12]
 8013ce8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8013cea:	1e5a      	subs	r2, r3, #1
 8013cec:	68fb      	ldr	r3, [r7, #12]
 8013cee:	639a      	str	r2, [r3, #56]	@ 0x38
      while(hqspi->RxXferCount > 0U)
 8013cf0:	68fb      	ldr	r3, [r7, #12]
 8013cf2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8013cf4:	2b00      	cmp	r3, #0
 8013cf6:	d1de      	bne.n	8013cb6 <HAL_QSPI_Receive+0x9a>
 8013cf8:	e000      	b.n	8013cfc <HAL_QSPI_Receive+0xe0>
          break;
 8013cfa:	bf00      	nop
      }

      if (status == HAL_OK)
 8013cfc:	7ffb      	ldrb	r3, [r7, #31]
 8013cfe:	2b00      	cmp	r3, #0
 8013d00:	d110      	bne.n	8013d24 <HAL_QSPI_Receive+0x108>
      {
        /* Wait until TC flag is set to go back in idle state */
        status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_TC, SET, tickstart, Timeout);
 8013d02:	687b      	ldr	r3, [r7, #4]
 8013d04:	9300      	str	r3, [sp, #0]
 8013d06:	69bb      	ldr	r3, [r7, #24]
 8013d08:	2201      	movs	r2, #1
 8013d0a:	2102      	movs	r1, #2
 8013d0c:	68f8      	ldr	r0, [r7, #12]
 8013d0e:	f000 f98c 	bl	801402a <QSPI_WaitFlagStateUntilTimeout>
 8013d12:	4603      	mov	r3, r0
 8013d14:	77fb      	strb	r3, [r7, #31]

        if  (status == HAL_OK)
 8013d16:	7ffb      	ldrb	r3, [r7, #31]
 8013d18:	2b00      	cmp	r3, #0
 8013d1a:	d103      	bne.n	8013d24 <HAL_QSPI_Receive+0x108>
        {
          /* Clear Transfer Complete bit */
          __HAL_QSPI_CLEAR_FLAG(hqspi, QSPI_FLAG_TC);
 8013d1c:	68fb      	ldr	r3, [r7, #12]
 8013d1e:	681b      	ldr	r3, [r3, #0]
 8013d20:	2202      	movs	r2, #2
 8013d22:	60da      	str	r2, [r3, #12]

        }
      }

      /* Update QSPI state */
      hqspi->State = HAL_QSPI_STATE_READY;
 8013d24:	68fb      	ldr	r3, [r7, #12]
 8013d26:	2201      	movs	r2, #1
 8013d28:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8013d2c:	e00a      	b.n	8013d44 <HAL_QSPI_Receive+0x128>
    }
    else
    {
      hqspi->ErrorCode |= HAL_QSPI_ERROR_INVALID_PARAM;
 8013d2e:	68fb      	ldr	r3, [r7, #12]
 8013d30:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8013d32:	f043 0208 	orr.w	r2, r3, #8
 8013d36:	68fb      	ldr	r3, [r7, #12]
 8013d38:	645a      	str	r2, [r3, #68]	@ 0x44
      status = HAL_ERROR;
 8013d3a:	2301      	movs	r3, #1
 8013d3c:	77fb      	strb	r3, [r7, #31]
 8013d3e:	e001      	b.n	8013d44 <HAL_QSPI_Receive+0x128>
    }
  }
  else
  {
    status = HAL_BUSY;
 8013d40:	2302      	movs	r3, #2
 8013d42:	77fb      	strb	r3, [r7, #31]
  }

  /* Process unlocked */
  __HAL_UNLOCK(hqspi);
 8013d44:	68fb      	ldr	r3, [r7, #12]
 8013d46:	2200      	movs	r2, #0
 8013d48:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  return status;
 8013d4c:	7ffb      	ldrb	r3, [r7, #31]
}
 8013d4e:	4618      	mov	r0, r3
 8013d50:	3720      	adds	r7, #32
 8013d52:	46bd      	mov	sp, r7
 8013d54:	bd80      	pop	{r7, pc}

08013d56 <HAL_QSPI_AutoPolling>:
  * @param  Timeout Timeout duration
  * @note   This function is used only in Automatic Polling Mode
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_QSPI_AutoPolling(QSPI_HandleTypeDef *hqspi, QSPI_CommandTypeDef *cmd, QSPI_AutoPollingTypeDef *cfg, uint32_t Timeout)
{
 8013d56:	b580      	push	{r7, lr}
 8013d58:	b088      	sub	sp, #32
 8013d5a:	af02      	add	r7, sp, #8
 8013d5c:	60f8      	str	r0, [r7, #12]
 8013d5e:	60b9      	str	r1, [r7, #8]
 8013d60:	607a      	str	r2, [r7, #4]
 8013d62:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status;
  uint32_t tickstart = HAL_GetTick();
 8013d64:	f7fd f954 	bl	8011010 <HAL_GetTick>
 8013d68:	6138      	str	r0, [r7, #16]
  assert_param(IS_QSPI_INTERVAL(cfg->Interval));
  assert_param(IS_QSPI_STATUS_BYTES_SIZE(cfg->StatusBytesSize));
  assert_param(IS_QSPI_MATCH_MODE(cfg->MatchMode));

  /* Process locked */
  __HAL_LOCK(hqspi);
 8013d6a:	68fb      	ldr	r3, [r7, #12]
 8013d6c:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8013d70:	b2db      	uxtb	r3, r3
 8013d72:	2b01      	cmp	r3, #1
 8013d74:	d101      	bne.n	8013d7a <HAL_QSPI_AutoPolling+0x24>
 8013d76:	2302      	movs	r3, #2
 8013d78:	e060      	b.n	8013e3c <HAL_QSPI_AutoPolling+0xe6>
 8013d7a:	68fb      	ldr	r3, [r7, #12]
 8013d7c:	2201      	movs	r2, #1
 8013d7e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  if(hqspi->State == HAL_QSPI_STATE_READY)
 8013d82:	68fb      	ldr	r3, [r7, #12]
 8013d84:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8013d88:	b2db      	uxtb	r3, r3
 8013d8a:	2b01      	cmp	r3, #1
 8013d8c:	d14f      	bne.n	8013e2e <HAL_QSPI_AutoPolling+0xd8>
  {
    hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;
 8013d8e:	68fb      	ldr	r3, [r7, #12]
 8013d90:	2200      	movs	r2, #0
 8013d92:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Update state */
    hqspi->State = HAL_QSPI_STATE_BUSY_AUTO_POLLING;
 8013d94:	68fb      	ldr	r3, [r7, #12]
 8013d96:	2242      	movs	r2, #66	@ 0x42
 8013d98:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Wait till BUSY flag reset */
    status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_BUSY, RESET, tickstart, Timeout);
 8013d9c:	683b      	ldr	r3, [r7, #0]
 8013d9e:	9300      	str	r3, [sp, #0]
 8013da0:	693b      	ldr	r3, [r7, #16]
 8013da2:	2200      	movs	r2, #0
 8013da4:	2120      	movs	r1, #32
 8013da6:	68f8      	ldr	r0, [r7, #12]
 8013da8:	f000 f93f 	bl	801402a <QSPI_WaitFlagStateUntilTimeout>
 8013dac:	4603      	mov	r3, r0
 8013dae:	75fb      	strb	r3, [r7, #23]

    if (status == HAL_OK)
 8013db0:	7dfb      	ldrb	r3, [r7, #23]
 8013db2:	2b00      	cmp	r3, #0
 8013db4:	d13d      	bne.n	8013e32 <HAL_QSPI_AutoPolling+0xdc>
    {
      /* Configure QSPI: PSMAR register with the status match value */
      WRITE_REG(hqspi->Instance->PSMAR, cfg->Match);
 8013db6:	68fb      	ldr	r3, [r7, #12]
 8013db8:	681b      	ldr	r3, [r3, #0]
 8013dba:	687a      	ldr	r2, [r7, #4]
 8013dbc:	6812      	ldr	r2, [r2, #0]
 8013dbe:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Configure QSPI: PSMKR register with the status mask value */
      WRITE_REG(hqspi->Instance->PSMKR, cfg->Mask);
 8013dc0:	68fb      	ldr	r3, [r7, #12]
 8013dc2:	681b      	ldr	r3, [r3, #0]
 8013dc4:	687a      	ldr	r2, [r7, #4]
 8013dc6:	6852      	ldr	r2, [r2, #4]
 8013dc8:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Configure QSPI: PIR register with the interval value */
      WRITE_REG(hqspi->Instance->PIR, cfg->Interval);
 8013dca:	68fb      	ldr	r3, [r7, #12]
 8013dcc:	681b      	ldr	r3, [r3, #0]
 8013dce:	687a      	ldr	r2, [r7, #4]
 8013dd0:	6892      	ldr	r2, [r2, #8]
 8013dd2:	62da      	str	r2, [r3, #44]	@ 0x2c

      /* Configure QSPI: CR register with Match mode and Automatic stop enabled
      (otherwise there will be an infinite loop in blocking mode) */
      MODIFY_REG(hqspi->Instance->CR, (QUADSPI_CR_PMM | QUADSPI_CR_APMS),
 8013dd4:	68fb      	ldr	r3, [r7, #12]
 8013dd6:	681b      	ldr	r3, [r3, #0]
 8013dd8:	681b      	ldr	r3, [r3, #0]
 8013dda:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8013dde:	687b      	ldr	r3, [r7, #4]
 8013de0:	691b      	ldr	r3, [r3, #16]
 8013de2:	431a      	orrs	r2, r3
 8013de4:	68fb      	ldr	r3, [r7, #12]
 8013de6:	681b      	ldr	r3, [r3, #0]
 8013de8:	f442 0280 	orr.w	r2, r2, #4194304	@ 0x400000
 8013dec:	601a      	str	r2, [r3, #0]
               (cfg->MatchMode | QSPI_AUTOMATIC_STOP_ENABLE));

      /* Call the configuration function */
      cmd->NbData = cfg->StatusBytesSize;
 8013dee:	687b      	ldr	r3, [r7, #4]
 8013df0:	68da      	ldr	r2, [r3, #12]
 8013df2:	68bb      	ldr	r3, [r7, #8]
 8013df4:	629a      	str	r2, [r3, #40]	@ 0x28
      QSPI_Config(hqspi, cmd, QSPI_FUNCTIONAL_MODE_AUTO_POLLING);
 8013df6:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 8013dfa:	68b9      	ldr	r1, [r7, #8]
 8013dfc:	68f8      	ldr	r0, [r7, #12]
 8013dfe:	f000 f94b 	bl	8014098 <QSPI_Config>

      /* Wait until SM flag is set to go back in idle state */
      status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_SM, SET, tickstart, Timeout);
 8013e02:	683b      	ldr	r3, [r7, #0]
 8013e04:	9300      	str	r3, [sp, #0]
 8013e06:	693b      	ldr	r3, [r7, #16]
 8013e08:	2201      	movs	r2, #1
 8013e0a:	2108      	movs	r1, #8
 8013e0c:	68f8      	ldr	r0, [r7, #12]
 8013e0e:	f000 f90c 	bl	801402a <QSPI_WaitFlagStateUntilTimeout>
 8013e12:	4603      	mov	r3, r0
 8013e14:	75fb      	strb	r3, [r7, #23]

      if (status == HAL_OK)
 8013e16:	7dfb      	ldrb	r3, [r7, #23]
 8013e18:	2b00      	cmp	r3, #0
 8013e1a:	d10a      	bne.n	8013e32 <HAL_QSPI_AutoPolling+0xdc>
      {
        __HAL_QSPI_CLEAR_FLAG(hqspi, QSPI_FLAG_SM);
 8013e1c:	68fb      	ldr	r3, [r7, #12]
 8013e1e:	681b      	ldr	r3, [r3, #0]
 8013e20:	2208      	movs	r2, #8
 8013e22:	60da      	str	r2, [r3, #12]

        /* Update state */
        hqspi->State = HAL_QSPI_STATE_READY;
 8013e24:	68fb      	ldr	r3, [r7, #12]
 8013e26:	2201      	movs	r2, #1
 8013e28:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8013e2c:	e001      	b.n	8013e32 <HAL_QSPI_AutoPolling+0xdc>
      }
    }
  }
  else
  {
    status = HAL_BUSY;
 8013e2e:	2302      	movs	r3, #2
 8013e30:	75fb      	strb	r3, [r7, #23]
  }

  /* Process unlocked */
  __HAL_UNLOCK(hqspi);
 8013e32:	68fb      	ldr	r3, [r7, #12]
 8013e34:	2200      	movs	r2, #0
 8013e36:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  /* Return function status */
  return status;
 8013e3a:	7dfb      	ldrb	r3, [r7, #23]
}
 8013e3c:	4618      	mov	r0, r3
 8013e3e:	3718      	adds	r7, #24
 8013e40:	46bd      	mov	sp, r7
 8013e42:	bd80      	pop	{r7, pc}

08013e44 <HAL_QSPI_MemoryMapped>:
  * @param  cfg structure that contains the memory mapped configuration information.
  * @note   This function is used only in Memory mapped Mode
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_QSPI_MemoryMapped(QSPI_HandleTypeDef *hqspi, QSPI_CommandTypeDef *cmd, QSPI_MemoryMappedTypeDef *cfg)
{
 8013e44:	b580      	push	{r7, lr}
 8013e46:	b088      	sub	sp, #32
 8013e48:	af02      	add	r7, sp, #8
 8013e4a:	60f8      	str	r0, [r7, #12]
 8013e4c:	60b9      	str	r1, [r7, #8]
 8013e4e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status;
  uint32_t tickstart = HAL_GetTick();
 8013e50:	f7fd f8de 	bl	8011010 <HAL_GetTick>
 8013e54:	6138      	str	r0, [r7, #16]
  assert_param(IS_QSPI_SIOO_MODE(cmd->SIOOMode));

  assert_param(IS_QSPI_TIMEOUT_ACTIVATION(cfg->TimeOutActivation));

  /* Process locked */
  __HAL_LOCK(hqspi);
 8013e56:	68fb      	ldr	r3, [r7, #12]
 8013e58:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8013e5c:	b2db      	uxtb	r3, r3
 8013e5e:	2b01      	cmp	r3, #1
 8013e60:	d101      	bne.n	8013e66 <HAL_QSPI_MemoryMapped+0x22>
 8013e62:	2302      	movs	r3, #2
 8013e64:	e04c      	b.n	8013f00 <HAL_QSPI_MemoryMapped+0xbc>
 8013e66:	68fb      	ldr	r3, [r7, #12]
 8013e68:	2201      	movs	r2, #1
 8013e6a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  if(hqspi->State == HAL_QSPI_STATE_READY)
 8013e6e:	68fb      	ldr	r3, [r7, #12]
 8013e70:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8013e74:	b2db      	uxtb	r3, r3
 8013e76:	2b01      	cmp	r3, #1
 8013e78:	d13b      	bne.n	8013ef2 <HAL_QSPI_MemoryMapped+0xae>
  {
    hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;
 8013e7a:	68fb      	ldr	r3, [r7, #12]
 8013e7c:	2200      	movs	r2, #0
 8013e7e:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Update state */
    hqspi->State = HAL_QSPI_STATE_BUSY_MEM_MAPPED;
 8013e80:	68fb      	ldr	r3, [r7, #12]
 8013e82:	2282      	movs	r2, #130	@ 0x82
 8013e84:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Wait till BUSY flag reset */
    status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_BUSY, RESET, tickstart, hqspi->Timeout);
 8013e88:	68fb      	ldr	r3, [r7, #12]
 8013e8a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8013e8c:	9300      	str	r3, [sp, #0]
 8013e8e:	693b      	ldr	r3, [r7, #16]
 8013e90:	2200      	movs	r2, #0
 8013e92:	2120      	movs	r1, #32
 8013e94:	68f8      	ldr	r0, [r7, #12]
 8013e96:	f000 f8c8 	bl	801402a <QSPI_WaitFlagStateUntilTimeout>
 8013e9a:	4603      	mov	r3, r0
 8013e9c:	75fb      	strb	r3, [r7, #23]

    if (status == HAL_OK)
 8013e9e:	7dfb      	ldrb	r3, [r7, #23]
 8013ea0:	2b00      	cmp	r3, #0
 8013ea2:	d128      	bne.n	8013ef6 <HAL_QSPI_MemoryMapped+0xb2>
    {
      /* Configure QSPI: CR register with timeout counter enable */
    MODIFY_REG(hqspi->Instance->CR, QUADSPI_CR_TCEN, cfg->TimeOutActivation);
 8013ea4:	68fb      	ldr	r3, [r7, #12]
 8013ea6:	681b      	ldr	r3, [r3, #0]
 8013ea8:	681b      	ldr	r3, [r3, #0]
 8013eaa:	f023 0108 	bic.w	r1, r3, #8
 8013eae:	687b      	ldr	r3, [r7, #4]
 8013eb0:	685a      	ldr	r2, [r3, #4]
 8013eb2:	68fb      	ldr	r3, [r7, #12]
 8013eb4:	681b      	ldr	r3, [r3, #0]
 8013eb6:	430a      	orrs	r2, r1
 8013eb8:	601a      	str	r2, [r3, #0]

    if (cfg->TimeOutActivation == QSPI_TIMEOUT_COUNTER_ENABLE)
 8013eba:	687b      	ldr	r3, [r7, #4]
 8013ebc:	685b      	ldr	r3, [r3, #4]
 8013ebe:	2b08      	cmp	r3, #8
 8013ec0:	d110      	bne.n	8013ee4 <HAL_QSPI_MemoryMapped+0xa0>
      {
        assert_param(IS_QSPI_TIMEOUT_PERIOD(cfg->TimeOutPeriod));

        /* Configure QSPI: LPTR register with the low-power timeout value */
        WRITE_REG(hqspi->Instance->LPTR, cfg->TimeOutPeriod);
 8013ec2:	68fb      	ldr	r3, [r7, #12]
 8013ec4:	681b      	ldr	r3, [r3, #0]
 8013ec6:	687a      	ldr	r2, [r7, #4]
 8013ec8:	6812      	ldr	r2, [r2, #0]
 8013eca:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Clear interrupt */
        __HAL_QSPI_CLEAR_FLAG(hqspi, QSPI_FLAG_TO);
 8013ecc:	68fb      	ldr	r3, [r7, #12]
 8013ece:	681b      	ldr	r3, [r3, #0]
 8013ed0:	2210      	movs	r2, #16
 8013ed2:	60da      	str	r2, [r3, #12]

        /* Enable the QSPI TimeOut Interrupt */
        __HAL_QSPI_ENABLE_IT(hqspi, QSPI_IT_TO);
 8013ed4:	68fb      	ldr	r3, [r7, #12]
 8013ed6:	681b      	ldr	r3, [r3, #0]
 8013ed8:	681a      	ldr	r2, [r3, #0]
 8013eda:	68fb      	ldr	r3, [r7, #12]
 8013edc:	681b      	ldr	r3, [r3, #0]
 8013ede:	f442 1280 	orr.w	r2, r2, #1048576	@ 0x100000
 8013ee2:	601a      	str	r2, [r3, #0]
      }

      /* Call the configuration function */
      QSPI_Config(hqspi, cmd, QSPI_FUNCTIONAL_MODE_MEMORY_MAPPED);
 8013ee4:	f04f 6240 	mov.w	r2, #201326592	@ 0xc000000
 8013ee8:	68b9      	ldr	r1, [r7, #8]
 8013eea:	68f8      	ldr	r0, [r7, #12]
 8013eec:	f000 f8d4 	bl	8014098 <QSPI_Config>
 8013ef0:	e001      	b.n	8013ef6 <HAL_QSPI_MemoryMapped+0xb2>
    }
  }
  else
  {
    status = HAL_BUSY;
 8013ef2:	2302      	movs	r3, #2
 8013ef4:	75fb      	strb	r3, [r7, #23]
  }

  /* Process unlocked */
  __HAL_UNLOCK(hqspi);
 8013ef6:	68fb      	ldr	r3, [r7, #12]
 8013ef8:	2200      	movs	r2, #0
 8013efa:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  /* Return function status */
  return status;
 8013efe:	7dfb      	ldrb	r3, [r7, #23]
}
 8013f00:	4618      	mov	r0, r3
 8013f02:	3718      	adds	r7, #24
 8013f04:	46bd      	mov	sp, r7
 8013f06:	bd80      	pop	{r7, pc}

08013f08 <HAL_QSPI_ErrorCallback>:
  * @brief  Transfer Error callback.
  * @param  hqspi QSPI handle
  * @retval None
  */
__weak void HAL_QSPI_ErrorCallback(QSPI_HandleTypeDef *hqspi)
{
 8013f08:	b480      	push	{r7}
 8013f0a:	b083      	sub	sp, #12
 8013f0c:	af00      	add	r7, sp, #0
 8013f0e:	6078      	str	r0, [r7, #4]
  UNUSED(hqspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_QSPI_ErrorCallback could be implemented in the user file
   */
}
 8013f10:	bf00      	nop
 8013f12:	370c      	adds	r7, #12
 8013f14:	46bd      	mov	sp, r7
 8013f16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013f1a:	4770      	bx	lr

08013f1c <HAL_QSPI_AbortCpltCallback>:
  * @brief  Abort completed callback.
  * @param  hqspi QSPI handle
  * @retval None
  */
__weak void HAL_QSPI_AbortCpltCallback(QSPI_HandleTypeDef *hqspi)
{
 8013f1c:	b480      	push	{r7}
 8013f1e:	b083      	sub	sp, #12
 8013f20:	af00      	add	r7, sp, #0
 8013f22:	6078      	str	r0, [r7, #4]
  UNUSED(hqspi);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_QSPI_AbortCpltCallback could be implemented in the user file
   */
}
 8013f24:	bf00      	nop
 8013f26:	370c      	adds	r7, #12
 8013f28:	46bd      	mov	sp, r7
 8013f2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013f2e:	4770      	bx	lr

08013f30 <HAL_QSPI_CmdCpltCallback>:
  * @brief  Command completed callback.
  * @param  hqspi QSPI handle
  * @retval None
  */
__weak void HAL_QSPI_CmdCpltCallback(QSPI_HandleTypeDef *hqspi)
{
 8013f30:	b480      	push	{r7}
 8013f32:	b083      	sub	sp, #12
 8013f34:	af00      	add	r7, sp, #0
 8013f36:	6078      	str	r0, [r7, #4]
  UNUSED(hqspi);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_QSPI_CmdCpltCallback could be implemented in the user file
   */
}
 8013f38:	bf00      	nop
 8013f3a:	370c      	adds	r7, #12
 8013f3c:	46bd      	mov	sp, r7
 8013f3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013f42:	4770      	bx	lr

08013f44 <HAL_QSPI_RxCpltCallback>:
  * @brief  Rx Transfer completed callback.
  * @param  hqspi QSPI handle
  * @retval None
  */
__weak void HAL_QSPI_RxCpltCallback(QSPI_HandleTypeDef *hqspi)
{
 8013f44:	b480      	push	{r7}
 8013f46:	b083      	sub	sp, #12
 8013f48:	af00      	add	r7, sp, #0
 8013f4a:	6078      	str	r0, [r7, #4]
  UNUSED(hqspi);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_QSPI_RxCpltCallback could be implemented in the user file
   */
}
 8013f4c:	bf00      	nop
 8013f4e:	370c      	adds	r7, #12
 8013f50:	46bd      	mov	sp, r7
 8013f52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013f56:	4770      	bx	lr

08013f58 <HAL_QSPI_TxCpltCallback>:
  * @brief  Tx Transfer completed callback.
  * @param  hqspi QSPI handle
  * @retval None
  */
__weak void HAL_QSPI_TxCpltCallback(QSPI_HandleTypeDef *hqspi)
{
 8013f58:	b480      	push	{r7}
 8013f5a:	b083      	sub	sp, #12
 8013f5c:	af00      	add	r7, sp, #0
 8013f5e:	6078      	str	r0, [r7, #4]
  UNUSED(hqspi);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_QSPI_TxCpltCallback could be implemented in the user file
   */
}
 8013f60:	bf00      	nop
 8013f62:	370c      	adds	r7, #12
 8013f64:	46bd      	mov	sp, r7
 8013f66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013f6a:	4770      	bx	lr

08013f6c <HAL_QSPI_FifoThresholdCallback>:
  * @brief  FIFO Threshold callback.
  * @param  hqspi QSPI handle
  * @retval None
  */
__weak void HAL_QSPI_FifoThresholdCallback(QSPI_HandleTypeDef *hqspi)
{
 8013f6c:	b480      	push	{r7}
 8013f6e:	b083      	sub	sp, #12
 8013f70:	af00      	add	r7, sp, #0
 8013f72:	6078      	str	r0, [r7, #4]
  UNUSED(hqspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_QSPI_FIFOThresholdCallback could be implemented in the user file
   */
}
 8013f74:	bf00      	nop
 8013f76:	370c      	adds	r7, #12
 8013f78:	46bd      	mov	sp, r7
 8013f7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013f7e:	4770      	bx	lr

08013f80 <HAL_QSPI_StatusMatchCallback>:
  * @brief  Status Match callback.
  * @param  hqspi QSPI handle
  * @retval None
  */
__weak void HAL_QSPI_StatusMatchCallback(QSPI_HandleTypeDef *hqspi)
{
 8013f80:	b480      	push	{r7}
 8013f82:	b083      	sub	sp, #12
 8013f84:	af00      	add	r7, sp, #0
 8013f86:	6078      	str	r0, [r7, #4]
  UNUSED(hqspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_QSPI_StatusMatchCallback could be implemented in the user file
   */
}
 8013f88:	bf00      	nop
 8013f8a:	370c      	adds	r7, #12
 8013f8c:	46bd      	mov	sp, r7
 8013f8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013f92:	4770      	bx	lr

08013f94 <HAL_QSPI_TimeOutCallback>:
  * @brief  Timeout callback.
  * @param  hqspi QSPI handle
  * @retval None
  */
__weak void HAL_QSPI_TimeOutCallback(QSPI_HandleTypeDef *hqspi)
{
 8013f94:	b480      	push	{r7}
 8013f96:	b083      	sub	sp, #12
 8013f98:	af00      	add	r7, sp, #0
 8013f9a:	6078      	str	r0, [r7, #4]
  UNUSED(hqspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_QSPI_TimeOutCallback could be implemented in the user file
   */
}
 8013f9c:	bf00      	nop
 8013f9e:	370c      	adds	r7, #12
 8013fa0:	46bd      	mov	sp, r7
 8013fa2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013fa6:	4770      	bx	lr

08013fa8 <HAL_QSPI_SetTimeout>:
  * @param  hqspi QSPI handle.
  * @param  Timeout Timeout for the QSPI memory access.
  * @retval None
  */
void HAL_QSPI_SetTimeout(QSPI_HandleTypeDef *hqspi, uint32_t Timeout)
{
 8013fa8:	b480      	push	{r7}
 8013faa:	b083      	sub	sp, #12
 8013fac:	af00      	add	r7, sp, #0
 8013fae:	6078      	str	r0, [r7, #4]
 8013fb0:	6039      	str	r1, [r7, #0]
  hqspi->Timeout = Timeout;
 8013fb2:	687b      	ldr	r3, [r7, #4]
 8013fb4:	683a      	ldr	r2, [r7, #0]
 8013fb6:	649a      	str	r2, [r3, #72]	@ 0x48
}
 8013fb8:	bf00      	nop
 8013fba:	370c      	adds	r7, #12
 8013fbc:	46bd      	mov	sp, r7
 8013fbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013fc2:	4770      	bx	lr

08013fc4 <QSPI_DMAAbortCplt>:
  * @brief  MDMA QSPI abort complete callback.
  * @param  hmdma MDMA handle
  * @retval None
  */
static void QSPI_DMAAbortCplt(MDMA_HandleTypeDef *hmdma)
{
 8013fc4:	b580      	push	{r7, lr}
 8013fc6:	b084      	sub	sp, #16
 8013fc8:	af00      	add	r7, sp, #0
 8013fca:	6078      	str	r0, [r7, #4]
  QSPI_HandleTypeDef* hqspi = ( QSPI_HandleTypeDef* )(hmdma->Parent);
 8013fcc:	687b      	ldr	r3, [r7, #4]
 8013fce:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8013fd0:	60fb      	str	r3, [r7, #12]

  hqspi->RxXferCount = 0U;
 8013fd2:	68fb      	ldr	r3, [r7, #12]
 8013fd4:	2200      	movs	r2, #0
 8013fd6:	639a      	str	r2, [r3, #56]	@ 0x38
  hqspi->TxXferCount = 0U;
 8013fd8:	68fb      	ldr	r3, [r7, #12]
 8013fda:	2200      	movs	r2, #0
 8013fdc:	62da      	str	r2, [r3, #44]	@ 0x2c

  if(hqspi->State == HAL_QSPI_STATE_ABORT)
 8013fde:	68fb      	ldr	r3, [r7, #12]
 8013fe0:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8013fe4:	b2db      	uxtb	r3, r3
 8013fe6:	2b08      	cmp	r3, #8
 8013fe8:	d114      	bne.n	8014014 <QSPI_DMAAbortCplt+0x50>
  {
    /* MDMA Abort called by QSPI abort */
    /* Clear interrupt */
    __HAL_QSPI_CLEAR_FLAG(hqspi, QSPI_FLAG_TC);
 8013fea:	68fb      	ldr	r3, [r7, #12]
 8013fec:	681b      	ldr	r3, [r3, #0]
 8013fee:	2202      	movs	r2, #2
 8013ff0:	60da      	str	r2, [r3, #12]

    /* Enable the QSPI Transfer Complete Interrupt */
    __HAL_QSPI_ENABLE_IT(hqspi, QSPI_IT_TC);
 8013ff2:	68fb      	ldr	r3, [r7, #12]
 8013ff4:	681b      	ldr	r3, [r3, #0]
 8013ff6:	681a      	ldr	r2, [r3, #0]
 8013ff8:	68fb      	ldr	r3, [r7, #12]
 8013ffa:	681b      	ldr	r3, [r3, #0]
 8013ffc:	f442 3200 	orr.w	r2, r2, #131072	@ 0x20000
 8014000:	601a      	str	r2, [r3, #0]

    /* Configure QSPI: CR register with Abort request */
    SET_BIT(hqspi->Instance->CR, QUADSPI_CR_ABORT);
 8014002:	68fb      	ldr	r3, [r7, #12]
 8014004:	681b      	ldr	r3, [r3, #0]
 8014006:	681a      	ldr	r2, [r3, #0]
 8014008:	68fb      	ldr	r3, [r7, #12]
 801400a:	681b      	ldr	r3, [r3, #0]
 801400c:	f042 0202 	orr.w	r2, r2, #2
 8014010:	601a      	str	r2, [r3, #0]
    hqspi->ErrorCallback(hqspi);
#else
    HAL_QSPI_ErrorCallback(hqspi);
#endif
  }
}
 8014012:	e006      	b.n	8014022 <QSPI_DMAAbortCplt+0x5e>
    hqspi->State = HAL_QSPI_STATE_READY;
 8014014:	68fb      	ldr	r3, [r7, #12]
 8014016:	2201      	movs	r2, #1
 8014018:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    HAL_QSPI_ErrorCallback(hqspi);
 801401c:	68f8      	ldr	r0, [r7, #12]
 801401e:	f7ff ff73 	bl	8013f08 <HAL_QSPI_ErrorCallback>
}
 8014022:	bf00      	nop
 8014024:	3710      	adds	r7, #16
 8014026:	46bd      	mov	sp, r7
 8014028:	bd80      	pop	{r7, pc}

0801402a <QSPI_WaitFlagStateUntilTimeout>:
  * @param  Timeout Duration of the timeout
  * @retval HAL status
  */
static HAL_StatusTypeDef QSPI_WaitFlagStateUntilTimeout(QSPI_HandleTypeDef *hqspi, uint32_t Flag,
                                                        FlagStatus State, uint32_t Tickstart, uint32_t Timeout)
{
 801402a:	b580      	push	{r7, lr}
 801402c:	b084      	sub	sp, #16
 801402e:	af00      	add	r7, sp, #0
 8014030:	60f8      	str	r0, [r7, #12]
 8014032:	60b9      	str	r1, [r7, #8]
 8014034:	603b      	str	r3, [r7, #0]
 8014036:	4613      	mov	r3, r2
 8014038:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is in expected state */
  while((__HAL_QSPI_GET_FLAG(hqspi, Flag)) != State)
 801403a:	e01a      	b.n	8014072 <QSPI_WaitFlagStateUntilTimeout+0x48>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 801403c:	69bb      	ldr	r3, [r7, #24]
 801403e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8014042:	d016      	beq.n	8014072 <QSPI_WaitFlagStateUntilTimeout+0x48>
    {
      if(((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8014044:	f7fc ffe4 	bl	8011010 <HAL_GetTick>
 8014048:	4602      	mov	r2, r0
 801404a:	683b      	ldr	r3, [r7, #0]
 801404c:	1ad3      	subs	r3, r2, r3
 801404e:	69ba      	ldr	r2, [r7, #24]
 8014050:	429a      	cmp	r2, r3
 8014052:	d302      	bcc.n	801405a <QSPI_WaitFlagStateUntilTimeout+0x30>
 8014054:	69bb      	ldr	r3, [r7, #24]
 8014056:	2b00      	cmp	r3, #0
 8014058:	d10b      	bne.n	8014072 <QSPI_WaitFlagStateUntilTimeout+0x48>
      {
        hqspi->State     = HAL_QSPI_STATE_ERROR;
 801405a:	68fb      	ldr	r3, [r7, #12]
 801405c:	2204      	movs	r2, #4
 801405e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
        hqspi->ErrorCode |= HAL_QSPI_ERROR_TIMEOUT;
 8014062:	68fb      	ldr	r3, [r7, #12]
 8014064:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8014066:	f043 0201 	orr.w	r2, r3, #1
 801406a:	68fb      	ldr	r3, [r7, #12]
 801406c:	645a      	str	r2, [r3, #68]	@ 0x44

        return HAL_ERROR;
 801406e:	2301      	movs	r3, #1
 8014070:	e00e      	b.n	8014090 <QSPI_WaitFlagStateUntilTimeout+0x66>
  while((__HAL_QSPI_GET_FLAG(hqspi, Flag)) != State)
 8014072:	68fb      	ldr	r3, [r7, #12]
 8014074:	681b      	ldr	r3, [r3, #0]
 8014076:	689a      	ldr	r2, [r3, #8]
 8014078:	68bb      	ldr	r3, [r7, #8]
 801407a:	4013      	ands	r3, r2
 801407c:	2b00      	cmp	r3, #0
 801407e:	bf14      	ite	ne
 8014080:	2301      	movne	r3, #1
 8014082:	2300      	moveq	r3, #0
 8014084:	b2db      	uxtb	r3, r3
 8014086:	461a      	mov	r2, r3
 8014088:	79fb      	ldrb	r3, [r7, #7]
 801408a:	429a      	cmp	r2, r3
 801408c:	d1d6      	bne.n	801403c <QSPI_WaitFlagStateUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 801408e:	2300      	movs	r3, #0
}
 8014090:	4618      	mov	r0, r3
 8014092:	3710      	adds	r7, #16
 8014094:	46bd      	mov	sp, r7
 8014096:	bd80      	pop	{r7, pc}

08014098 <QSPI_Config>:
  *            @arg QSPI_FUNCTIONAL_MODE_AUTO_POLLING: Automatic polling mode
  *            @arg QSPI_FUNCTIONAL_MODE_MEMORY_MAPPED: Memory-mapped mode
  * @retval None
  */
static void QSPI_Config(QSPI_HandleTypeDef *hqspi, QSPI_CommandTypeDef *cmd, uint32_t FunctionalMode)
{
 8014098:	b480      	push	{r7}
 801409a:	b085      	sub	sp, #20
 801409c:	af00      	add	r7, sp, #0
 801409e:	60f8      	str	r0, [r7, #12]
 80140a0:	60b9      	str	r1, [r7, #8]
 80140a2:	607a      	str	r2, [r7, #4]
  assert_param(IS_QSPI_FUNCTIONAL_MODE(FunctionalMode));

  if ((cmd->DataMode != QSPI_DATA_NONE) && (FunctionalMode != QSPI_FUNCTIONAL_MODE_MEMORY_MAPPED))
 80140a4:	68bb      	ldr	r3, [r7, #8]
 80140a6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80140a8:	2b00      	cmp	r3, #0
 80140aa:	d009      	beq.n	80140c0 <QSPI_Config+0x28>
 80140ac:	687b      	ldr	r3, [r7, #4]
 80140ae:	f1b3 6f40 	cmp.w	r3, #201326592	@ 0xc000000
 80140b2:	d005      	beq.n	80140c0 <QSPI_Config+0x28>
  {
    /* Configure QSPI: DLR register with the number of data to read or write */
    WRITE_REG(hqspi->Instance->DLR, (cmd->NbData - 1U));
 80140b4:	68bb      	ldr	r3, [r7, #8]
 80140b6:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80140b8:	68fb      	ldr	r3, [r7, #12]
 80140ba:	681b      	ldr	r3, [r3, #0]
 80140bc:	3a01      	subs	r2, #1
 80140be:	611a      	str	r2, [r3, #16]
  }

  if (cmd->InstructionMode != QSPI_INSTRUCTION_NONE)
 80140c0:	68bb      	ldr	r3, [r7, #8]
 80140c2:	699b      	ldr	r3, [r3, #24]
 80140c4:	2b00      	cmp	r3, #0
 80140c6:	f000 80b9 	beq.w	801423c <QSPI_Config+0x1a4>
  {
    if (cmd->AlternateByteMode != QSPI_ALTERNATE_BYTES_NONE)
 80140ca:	68bb      	ldr	r3, [r7, #8]
 80140cc:	6a1b      	ldr	r3, [r3, #32]
 80140ce:	2b00      	cmp	r3, #0
 80140d0:	d05f      	beq.n	8014192 <QSPI_Config+0xfa>
    {
      /* Configure QSPI: ABR register with alternate bytes value */
      WRITE_REG(hqspi->Instance->ABR, cmd->AlternateBytes);
 80140d2:	68fb      	ldr	r3, [r7, #12]
 80140d4:	681b      	ldr	r3, [r3, #0]
 80140d6:	68ba      	ldr	r2, [r7, #8]
 80140d8:	6892      	ldr	r2, [r2, #8]
 80140da:	61da      	str	r2, [r3, #28]

      if (cmd->AddressMode != QSPI_ADDRESS_NONE)
 80140dc:	68bb      	ldr	r3, [r7, #8]
 80140de:	69db      	ldr	r3, [r3, #28]
 80140e0:	2b00      	cmp	r3, #0
 80140e2:	d031      	beq.n	8014148 <QSPI_Config+0xb0>
      {
        /*---- Command with instruction, address and alternate bytes ----*/
        /* Configure QSPI: CCR register with all communications parameters */
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 80140e4:	68bb      	ldr	r3, [r7, #8]
 80140e6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80140e8:	68bb      	ldr	r3, [r7, #8]
 80140ea:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80140ec:	431a      	orrs	r2, r3
 80140ee:	68bb      	ldr	r3, [r7, #8]
 80140f0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80140f2:	431a      	orrs	r2, r3
 80140f4:	68bb      	ldr	r3, [r7, #8]
 80140f6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80140f8:	431a      	orrs	r2, r3
 80140fa:	68bb      	ldr	r3, [r7, #8]
 80140fc:	695b      	ldr	r3, [r3, #20]
 80140fe:	049b      	lsls	r3, r3, #18
 8014100:	431a      	orrs	r2, r3
 8014102:	68bb      	ldr	r3, [r7, #8]
 8014104:	691b      	ldr	r3, [r3, #16]
 8014106:	431a      	orrs	r2, r3
 8014108:	68bb      	ldr	r3, [r7, #8]
 801410a:	6a1b      	ldr	r3, [r3, #32]
 801410c:	431a      	orrs	r2, r3
 801410e:	68bb      	ldr	r3, [r7, #8]
 8014110:	68db      	ldr	r3, [r3, #12]
 8014112:	431a      	orrs	r2, r3
 8014114:	68bb      	ldr	r3, [r7, #8]
 8014116:	69db      	ldr	r3, [r3, #28]
 8014118:	431a      	orrs	r2, r3
 801411a:	68bb      	ldr	r3, [r7, #8]
 801411c:	699b      	ldr	r3, [r3, #24]
 801411e:	431a      	orrs	r2, r3
 8014120:	68bb      	ldr	r3, [r7, #8]
 8014122:	681b      	ldr	r3, [r3, #0]
 8014124:	ea42 0103 	orr.w	r1, r2, r3
 8014128:	68fb      	ldr	r3, [r7, #12]
 801412a:	681b      	ldr	r3, [r3, #0]
 801412c:	687a      	ldr	r2, [r7, #4]
 801412e:	430a      	orrs	r2, r1
 8014130:	615a      	str	r2, [r3, #20]
                                         cmd->DataMode | (cmd->DummyCycles << QUADSPI_CCR_DCYC_Pos) |
                                         cmd->AlternateBytesSize | cmd->AlternateByteMode |
                                         cmd->AddressSize | cmd->AddressMode | cmd->InstructionMode |
                                         cmd->Instruction | FunctionalMode));

        if (FunctionalMode != QSPI_FUNCTIONAL_MODE_MEMORY_MAPPED)
 8014132:	687b      	ldr	r3, [r7, #4]
 8014134:	f1b3 6f40 	cmp.w	r3, #201326592	@ 0xc000000
 8014138:	f000 812e 	beq.w	8014398 <QSPI_Config+0x300>
        {
          /* Configure QSPI: AR register with address value */
          WRITE_REG(hqspi->Instance->AR, cmd->Address);
 801413c:	68fb      	ldr	r3, [r7, #12]
 801413e:	681b      	ldr	r3, [r3, #0]
 8014140:	68ba      	ldr	r2, [r7, #8]
 8014142:	6852      	ldr	r2, [r2, #4]
 8014144:	619a      	str	r2, [r3, #24]
                                           cmd->InstructionMode | FunctionalMode));
        }
      }
    }
  }
}
 8014146:	e127      	b.n	8014398 <QSPI_Config+0x300>
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 8014148:	68bb      	ldr	r3, [r7, #8]
 801414a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 801414c:	68bb      	ldr	r3, [r7, #8]
 801414e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8014150:	431a      	orrs	r2, r3
 8014152:	68bb      	ldr	r3, [r7, #8]
 8014154:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8014156:	431a      	orrs	r2, r3
 8014158:	68bb      	ldr	r3, [r7, #8]
 801415a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801415c:	431a      	orrs	r2, r3
 801415e:	68bb      	ldr	r3, [r7, #8]
 8014160:	695b      	ldr	r3, [r3, #20]
 8014162:	049b      	lsls	r3, r3, #18
 8014164:	431a      	orrs	r2, r3
 8014166:	68bb      	ldr	r3, [r7, #8]
 8014168:	691b      	ldr	r3, [r3, #16]
 801416a:	431a      	orrs	r2, r3
 801416c:	68bb      	ldr	r3, [r7, #8]
 801416e:	6a1b      	ldr	r3, [r3, #32]
 8014170:	431a      	orrs	r2, r3
 8014172:	68bb      	ldr	r3, [r7, #8]
 8014174:	69db      	ldr	r3, [r3, #28]
 8014176:	431a      	orrs	r2, r3
 8014178:	68bb      	ldr	r3, [r7, #8]
 801417a:	699b      	ldr	r3, [r3, #24]
 801417c:	431a      	orrs	r2, r3
 801417e:	68bb      	ldr	r3, [r7, #8]
 8014180:	681b      	ldr	r3, [r3, #0]
 8014182:	ea42 0103 	orr.w	r1, r2, r3
 8014186:	68fb      	ldr	r3, [r7, #12]
 8014188:	681b      	ldr	r3, [r3, #0]
 801418a:	687a      	ldr	r2, [r7, #4]
 801418c:	430a      	orrs	r2, r1
 801418e:	615a      	str	r2, [r3, #20]
}
 8014190:	e102      	b.n	8014398 <QSPI_Config+0x300>
      if (cmd->AddressMode != QSPI_ADDRESS_NONE)
 8014192:	68bb      	ldr	r3, [r7, #8]
 8014194:	69db      	ldr	r3, [r3, #28]
 8014196:	2b00      	cmp	r3, #0
 8014198:	d02e      	beq.n	80141f8 <QSPI_Config+0x160>
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 801419a:	68bb      	ldr	r3, [r7, #8]
 801419c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 801419e:	68bb      	ldr	r3, [r7, #8]
 80141a0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80141a2:	431a      	orrs	r2, r3
 80141a4:	68bb      	ldr	r3, [r7, #8]
 80141a6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80141a8:	431a      	orrs	r2, r3
 80141aa:	68bb      	ldr	r3, [r7, #8]
 80141ac:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80141ae:	431a      	orrs	r2, r3
 80141b0:	68bb      	ldr	r3, [r7, #8]
 80141b2:	695b      	ldr	r3, [r3, #20]
 80141b4:	049b      	lsls	r3, r3, #18
 80141b6:	431a      	orrs	r2, r3
 80141b8:	68bb      	ldr	r3, [r7, #8]
 80141ba:	6a1b      	ldr	r3, [r3, #32]
 80141bc:	431a      	orrs	r2, r3
 80141be:	68bb      	ldr	r3, [r7, #8]
 80141c0:	68db      	ldr	r3, [r3, #12]
 80141c2:	431a      	orrs	r2, r3
 80141c4:	68bb      	ldr	r3, [r7, #8]
 80141c6:	69db      	ldr	r3, [r3, #28]
 80141c8:	431a      	orrs	r2, r3
 80141ca:	68bb      	ldr	r3, [r7, #8]
 80141cc:	699b      	ldr	r3, [r3, #24]
 80141ce:	431a      	orrs	r2, r3
 80141d0:	68bb      	ldr	r3, [r7, #8]
 80141d2:	681b      	ldr	r3, [r3, #0]
 80141d4:	ea42 0103 	orr.w	r1, r2, r3
 80141d8:	68fb      	ldr	r3, [r7, #12]
 80141da:	681b      	ldr	r3, [r3, #0]
 80141dc:	687a      	ldr	r2, [r7, #4]
 80141de:	430a      	orrs	r2, r1
 80141e0:	615a      	str	r2, [r3, #20]
        if (FunctionalMode != QSPI_FUNCTIONAL_MODE_MEMORY_MAPPED)
 80141e2:	687b      	ldr	r3, [r7, #4]
 80141e4:	f1b3 6f40 	cmp.w	r3, #201326592	@ 0xc000000
 80141e8:	f000 80d6 	beq.w	8014398 <QSPI_Config+0x300>
          WRITE_REG(hqspi->Instance->AR, cmd->Address);
 80141ec:	68fb      	ldr	r3, [r7, #12]
 80141ee:	681b      	ldr	r3, [r3, #0]
 80141f0:	68ba      	ldr	r2, [r7, #8]
 80141f2:	6852      	ldr	r2, [r2, #4]
 80141f4:	619a      	str	r2, [r3, #24]
}
 80141f6:	e0cf      	b.n	8014398 <QSPI_Config+0x300>
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 80141f8:	68bb      	ldr	r3, [r7, #8]
 80141fa:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80141fc:	68bb      	ldr	r3, [r7, #8]
 80141fe:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8014200:	431a      	orrs	r2, r3
 8014202:	68bb      	ldr	r3, [r7, #8]
 8014204:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8014206:	431a      	orrs	r2, r3
 8014208:	68bb      	ldr	r3, [r7, #8]
 801420a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801420c:	431a      	orrs	r2, r3
 801420e:	68bb      	ldr	r3, [r7, #8]
 8014210:	695b      	ldr	r3, [r3, #20]
 8014212:	049b      	lsls	r3, r3, #18
 8014214:	431a      	orrs	r2, r3
 8014216:	68bb      	ldr	r3, [r7, #8]
 8014218:	6a1b      	ldr	r3, [r3, #32]
 801421a:	431a      	orrs	r2, r3
 801421c:	68bb      	ldr	r3, [r7, #8]
 801421e:	69db      	ldr	r3, [r3, #28]
 8014220:	431a      	orrs	r2, r3
 8014222:	68bb      	ldr	r3, [r7, #8]
 8014224:	699b      	ldr	r3, [r3, #24]
 8014226:	431a      	orrs	r2, r3
 8014228:	68bb      	ldr	r3, [r7, #8]
 801422a:	681b      	ldr	r3, [r3, #0]
 801422c:	ea42 0103 	orr.w	r1, r2, r3
 8014230:	68fb      	ldr	r3, [r7, #12]
 8014232:	681b      	ldr	r3, [r3, #0]
 8014234:	687a      	ldr	r2, [r7, #4]
 8014236:	430a      	orrs	r2, r1
 8014238:	615a      	str	r2, [r3, #20]
}
 801423a:	e0ad      	b.n	8014398 <QSPI_Config+0x300>
    if (cmd->AlternateByteMode != QSPI_ALTERNATE_BYTES_NONE)
 801423c:	68bb      	ldr	r3, [r7, #8]
 801423e:	6a1b      	ldr	r3, [r3, #32]
 8014240:	2b00      	cmp	r3, #0
 8014242:	d058      	beq.n	80142f6 <QSPI_Config+0x25e>
      WRITE_REG(hqspi->Instance->ABR, cmd->AlternateBytes);
 8014244:	68fb      	ldr	r3, [r7, #12]
 8014246:	681b      	ldr	r3, [r3, #0]
 8014248:	68ba      	ldr	r2, [r7, #8]
 801424a:	6892      	ldr	r2, [r2, #8]
 801424c:	61da      	str	r2, [r3, #28]
      if (cmd->AddressMode != QSPI_ADDRESS_NONE)
 801424e:	68bb      	ldr	r3, [r7, #8]
 8014250:	69db      	ldr	r3, [r3, #28]
 8014252:	2b00      	cmp	r3, #0
 8014254:	d02d      	beq.n	80142b2 <QSPI_Config+0x21a>
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 8014256:	68bb      	ldr	r3, [r7, #8]
 8014258:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 801425a:	68bb      	ldr	r3, [r7, #8]
 801425c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 801425e:	431a      	orrs	r2, r3
 8014260:	68bb      	ldr	r3, [r7, #8]
 8014262:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8014264:	431a      	orrs	r2, r3
 8014266:	68bb      	ldr	r3, [r7, #8]
 8014268:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801426a:	431a      	orrs	r2, r3
 801426c:	68bb      	ldr	r3, [r7, #8]
 801426e:	695b      	ldr	r3, [r3, #20]
 8014270:	049b      	lsls	r3, r3, #18
 8014272:	431a      	orrs	r2, r3
 8014274:	68bb      	ldr	r3, [r7, #8]
 8014276:	691b      	ldr	r3, [r3, #16]
 8014278:	431a      	orrs	r2, r3
 801427a:	68bb      	ldr	r3, [r7, #8]
 801427c:	6a1b      	ldr	r3, [r3, #32]
 801427e:	431a      	orrs	r2, r3
 8014280:	68bb      	ldr	r3, [r7, #8]
 8014282:	68db      	ldr	r3, [r3, #12]
 8014284:	431a      	orrs	r2, r3
 8014286:	68bb      	ldr	r3, [r7, #8]
 8014288:	69db      	ldr	r3, [r3, #28]
 801428a:	431a      	orrs	r2, r3
 801428c:	68bb      	ldr	r3, [r7, #8]
 801428e:	699b      	ldr	r3, [r3, #24]
 8014290:	ea42 0103 	orr.w	r1, r2, r3
 8014294:	68fb      	ldr	r3, [r7, #12]
 8014296:	681b      	ldr	r3, [r3, #0]
 8014298:	687a      	ldr	r2, [r7, #4]
 801429a:	430a      	orrs	r2, r1
 801429c:	615a      	str	r2, [r3, #20]
        if (FunctionalMode != QSPI_FUNCTIONAL_MODE_MEMORY_MAPPED)
 801429e:	687b      	ldr	r3, [r7, #4]
 80142a0:	f1b3 6f40 	cmp.w	r3, #201326592	@ 0xc000000
 80142a4:	d078      	beq.n	8014398 <QSPI_Config+0x300>
          WRITE_REG(hqspi->Instance->AR, cmd->Address);
 80142a6:	68fb      	ldr	r3, [r7, #12]
 80142a8:	681b      	ldr	r3, [r3, #0]
 80142aa:	68ba      	ldr	r2, [r7, #8]
 80142ac:	6852      	ldr	r2, [r2, #4]
 80142ae:	619a      	str	r2, [r3, #24]
}
 80142b0:	e072      	b.n	8014398 <QSPI_Config+0x300>
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 80142b2:	68bb      	ldr	r3, [r7, #8]
 80142b4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80142b6:	68bb      	ldr	r3, [r7, #8]
 80142b8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80142ba:	431a      	orrs	r2, r3
 80142bc:	68bb      	ldr	r3, [r7, #8]
 80142be:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80142c0:	431a      	orrs	r2, r3
 80142c2:	68bb      	ldr	r3, [r7, #8]
 80142c4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80142c6:	431a      	orrs	r2, r3
 80142c8:	68bb      	ldr	r3, [r7, #8]
 80142ca:	695b      	ldr	r3, [r3, #20]
 80142cc:	049b      	lsls	r3, r3, #18
 80142ce:	431a      	orrs	r2, r3
 80142d0:	68bb      	ldr	r3, [r7, #8]
 80142d2:	691b      	ldr	r3, [r3, #16]
 80142d4:	431a      	orrs	r2, r3
 80142d6:	68bb      	ldr	r3, [r7, #8]
 80142d8:	6a1b      	ldr	r3, [r3, #32]
 80142da:	431a      	orrs	r2, r3
 80142dc:	68bb      	ldr	r3, [r7, #8]
 80142de:	69db      	ldr	r3, [r3, #28]
 80142e0:	431a      	orrs	r2, r3
 80142e2:	68bb      	ldr	r3, [r7, #8]
 80142e4:	699b      	ldr	r3, [r3, #24]
 80142e6:	ea42 0103 	orr.w	r1, r2, r3
 80142ea:	68fb      	ldr	r3, [r7, #12]
 80142ec:	681b      	ldr	r3, [r3, #0]
 80142ee:	687a      	ldr	r2, [r7, #4]
 80142f0:	430a      	orrs	r2, r1
 80142f2:	615a      	str	r2, [r3, #20]
}
 80142f4:	e050      	b.n	8014398 <QSPI_Config+0x300>
      if (cmd->AddressMode != QSPI_ADDRESS_NONE)
 80142f6:	68bb      	ldr	r3, [r7, #8]
 80142f8:	69db      	ldr	r3, [r3, #28]
 80142fa:	2b00      	cmp	r3, #0
 80142fc:	d02a      	beq.n	8014354 <QSPI_Config+0x2bc>
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 80142fe:	68bb      	ldr	r3, [r7, #8]
 8014300:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8014302:	68bb      	ldr	r3, [r7, #8]
 8014304:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8014306:	431a      	orrs	r2, r3
 8014308:	68bb      	ldr	r3, [r7, #8]
 801430a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 801430c:	431a      	orrs	r2, r3
 801430e:	68bb      	ldr	r3, [r7, #8]
 8014310:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8014312:	431a      	orrs	r2, r3
 8014314:	68bb      	ldr	r3, [r7, #8]
 8014316:	695b      	ldr	r3, [r3, #20]
 8014318:	049b      	lsls	r3, r3, #18
 801431a:	431a      	orrs	r2, r3
 801431c:	68bb      	ldr	r3, [r7, #8]
 801431e:	6a1b      	ldr	r3, [r3, #32]
 8014320:	431a      	orrs	r2, r3
 8014322:	68bb      	ldr	r3, [r7, #8]
 8014324:	68db      	ldr	r3, [r3, #12]
 8014326:	431a      	orrs	r2, r3
 8014328:	68bb      	ldr	r3, [r7, #8]
 801432a:	69db      	ldr	r3, [r3, #28]
 801432c:	431a      	orrs	r2, r3
 801432e:	68bb      	ldr	r3, [r7, #8]
 8014330:	699b      	ldr	r3, [r3, #24]
 8014332:	ea42 0103 	orr.w	r1, r2, r3
 8014336:	68fb      	ldr	r3, [r7, #12]
 8014338:	681b      	ldr	r3, [r3, #0]
 801433a:	687a      	ldr	r2, [r7, #4]
 801433c:	430a      	orrs	r2, r1
 801433e:	615a      	str	r2, [r3, #20]
        if (FunctionalMode != QSPI_FUNCTIONAL_MODE_MEMORY_MAPPED)
 8014340:	687b      	ldr	r3, [r7, #4]
 8014342:	f1b3 6f40 	cmp.w	r3, #201326592	@ 0xc000000
 8014346:	d027      	beq.n	8014398 <QSPI_Config+0x300>
          WRITE_REG(hqspi->Instance->AR, cmd->Address);
 8014348:	68fb      	ldr	r3, [r7, #12]
 801434a:	681b      	ldr	r3, [r3, #0]
 801434c:	68ba      	ldr	r2, [r7, #8]
 801434e:	6852      	ldr	r2, [r2, #4]
 8014350:	619a      	str	r2, [r3, #24]
}
 8014352:	e021      	b.n	8014398 <QSPI_Config+0x300>
        if (cmd->DataMode != QSPI_DATA_NONE)
 8014354:	68bb      	ldr	r3, [r7, #8]
 8014356:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8014358:	2b00      	cmp	r3, #0
 801435a:	d01d      	beq.n	8014398 <QSPI_Config+0x300>
          WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 801435c:	68bb      	ldr	r3, [r7, #8]
 801435e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8014360:	68bb      	ldr	r3, [r7, #8]
 8014362:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8014364:	431a      	orrs	r2, r3
 8014366:	68bb      	ldr	r3, [r7, #8]
 8014368:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 801436a:	431a      	orrs	r2, r3
 801436c:	68bb      	ldr	r3, [r7, #8]
 801436e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8014370:	431a      	orrs	r2, r3
 8014372:	68bb      	ldr	r3, [r7, #8]
 8014374:	695b      	ldr	r3, [r3, #20]
 8014376:	049b      	lsls	r3, r3, #18
 8014378:	431a      	orrs	r2, r3
 801437a:	68bb      	ldr	r3, [r7, #8]
 801437c:	6a1b      	ldr	r3, [r3, #32]
 801437e:	431a      	orrs	r2, r3
 8014380:	68bb      	ldr	r3, [r7, #8]
 8014382:	69db      	ldr	r3, [r3, #28]
 8014384:	431a      	orrs	r2, r3
 8014386:	68bb      	ldr	r3, [r7, #8]
 8014388:	699b      	ldr	r3, [r3, #24]
 801438a:	ea42 0103 	orr.w	r1, r2, r3
 801438e:	68fb      	ldr	r3, [r7, #12]
 8014390:	681b      	ldr	r3, [r3, #0]
 8014392:	687a      	ldr	r2, [r7, #4]
 8014394:	430a      	orrs	r2, r1
 8014396:	615a      	str	r2, [r3, #20]
}
 8014398:	bf00      	nop
 801439a:	3714      	adds	r7, #20
 801439c:	46bd      	mov	sp, r7
 801439e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80143a2:	4770      	bx	lr

080143a4 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80143a4:	b580      	push	{r7, lr}
 80143a6:	b08c      	sub	sp, #48	@ 0x30
 80143a8:	af00      	add	r7, sp, #0
 80143aa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80143ac:	687b      	ldr	r3, [r7, #4]
 80143ae:	2b00      	cmp	r3, #0
 80143b0:	d102      	bne.n	80143b8 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 80143b2:	2301      	movs	r3, #1
 80143b4:	f000 bc48 	b.w	8014c48 <HAL_RCC_OscConfig+0x8a4>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80143b8:	687b      	ldr	r3, [r7, #4]
 80143ba:	681b      	ldr	r3, [r3, #0]
 80143bc:	f003 0301 	and.w	r3, r3, #1
 80143c0:	2b00      	cmp	r3, #0
 80143c2:	f000 8088 	beq.w	80144d6 <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80143c6:	4b99      	ldr	r3, [pc, #612]	@ (801462c <HAL_RCC_OscConfig+0x288>)
 80143c8:	691b      	ldr	r3, [r3, #16]
 80143ca:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80143ce:	62fb      	str	r3, [r7, #44]	@ 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 80143d0:	4b96      	ldr	r3, [pc, #600]	@ (801462c <HAL_RCC_OscConfig+0x288>)
 80143d2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80143d4:	62bb      	str	r3, [r7, #40]	@ 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 80143d6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80143d8:	2b10      	cmp	r3, #16
 80143da:	d007      	beq.n	80143ec <HAL_RCC_OscConfig+0x48>
 80143dc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80143de:	2b18      	cmp	r3, #24
 80143e0:	d111      	bne.n	8014406 <HAL_RCC_OscConfig+0x62>
 80143e2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80143e4:	f003 0303 	and.w	r3, r3, #3
 80143e8:	2b02      	cmp	r3, #2
 80143ea:	d10c      	bne.n	8014406 <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80143ec:	4b8f      	ldr	r3, [pc, #572]	@ (801462c <HAL_RCC_OscConfig+0x288>)
 80143ee:	681b      	ldr	r3, [r3, #0]
 80143f0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80143f4:	2b00      	cmp	r3, #0
 80143f6:	d06d      	beq.n	80144d4 <HAL_RCC_OscConfig+0x130>
 80143f8:	687b      	ldr	r3, [r7, #4]
 80143fa:	685b      	ldr	r3, [r3, #4]
 80143fc:	2b00      	cmp	r3, #0
 80143fe:	d169      	bne.n	80144d4 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 8014400:	2301      	movs	r3, #1
 8014402:	f000 bc21 	b.w	8014c48 <HAL_RCC_OscConfig+0x8a4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8014406:	687b      	ldr	r3, [r7, #4]
 8014408:	685b      	ldr	r3, [r3, #4]
 801440a:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 801440e:	d106      	bne.n	801441e <HAL_RCC_OscConfig+0x7a>
 8014410:	4b86      	ldr	r3, [pc, #536]	@ (801462c <HAL_RCC_OscConfig+0x288>)
 8014412:	681b      	ldr	r3, [r3, #0]
 8014414:	4a85      	ldr	r2, [pc, #532]	@ (801462c <HAL_RCC_OscConfig+0x288>)
 8014416:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 801441a:	6013      	str	r3, [r2, #0]
 801441c:	e02e      	b.n	801447c <HAL_RCC_OscConfig+0xd8>
 801441e:	687b      	ldr	r3, [r7, #4]
 8014420:	685b      	ldr	r3, [r3, #4]
 8014422:	2b00      	cmp	r3, #0
 8014424:	d10c      	bne.n	8014440 <HAL_RCC_OscConfig+0x9c>
 8014426:	4b81      	ldr	r3, [pc, #516]	@ (801462c <HAL_RCC_OscConfig+0x288>)
 8014428:	681b      	ldr	r3, [r3, #0]
 801442a:	4a80      	ldr	r2, [pc, #512]	@ (801462c <HAL_RCC_OscConfig+0x288>)
 801442c:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8014430:	6013      	str	r3, [r2, #0]
 8014432:	4b7e      	ldr	r3, [pc, #504]	@ (801462c <HAL_RCC_OscConfig+0x288>)
 8014434:	681b      	ldr	r3, [r3, #0]
 8014436:	4a7d      	ldr	r2, [pc, #500]	@ (801462c <HAL_RCC_OscConfig+0x288>)
 8014438:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 801443c:	6013      	str	r3, [r2, #0]
 801443e:	e01d      	b.n	801447c <HAL_RCC_OscConfig+0xd8>
 8014440:	687b      	ldr	r3, [r7, #4]
 8014442:	685b      	ldr	r3, [r3, #4]
 8014444:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8014448:	d10c      	bne.n	8014464 <HAL_RCC_OscConfig+0xc0>
 801444a:	4b78      	ldr	r3, [pc, #480]	@ (801462c <HAL_RCC_OscConfig+0x288>)
 801444c:	681b      	ldr	r3, [r3, #0]
 801444e:	4a77      	ldr	r2, [pc, #476]	@ (801462c <HAL_RCC_OscConfig+0x288>)
 8014450:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8014454:	6013      	str	r3, [r2, #0]
 8014456:	4b75      	ldr	r3, [pc, #468]	@ (801462c <HAL_RCC_OscConfig+0x288>)
 8014458:	681b      	ldr	r3, [r3, #0]
 801445a:	4a74      	ldr	r2, [pc, #464]	@ (801462c <HAL_RCC_OscConfig+0x288>)
 801445c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8014460:	6013      	str	r3, [r2, #0]
 8014462:	e00b      	b.n	801447c <HAL_RCC_OscConfig+0xd8>
 8014464:	4b71      	ldr	r3, [pc, #452]	@ (801462c <HAL_RCC_OscConfig+0x288>)
 8014466:	681b      	ldr	r3, [r3, #0]
 8014468:	4a70      	ldr	r2, [pc, #448]	@ (801462c <HAL_RCC_OscConfig+0x288>)
 801446a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 801446e:	6013      	str	r3, [r2, #0]
 8014470:	4b6e      	ldr	r3, [pc, #440]	@ (801462c <HAL_RCC_OscConfig+0x288>)
 8014472:	681b      	ldr	r3, [r3, #0]
 8014474:	4a6d      	ldr	r2, [pc, #436]	@ (801462c <HAL_RCC_OscConfig+0x288>)
 8014476:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 801447a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 801447c:	687b      	ldr	r3, [r7, #4]
 801447e:	685b      	ldr	r3, [r3, #4]
 8014480:	2b00      	cmp	r3, #0
 8014482:	d013      	beq.n	80144ac <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8014484:	f7fc fdc4 	bl	8011010 <HAL_GetTick>
 8014488:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 801448a:	e008      	b.n	801449e <HAL_RCC_OscConfig+0xfa>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 801448c:	f7fc fdc0 	bl	8011010 <HAL_GetTick>
 8014490:	4602      	mov	r2, r0
 8014492:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8014494:	1ad3      	subs	r3, r2, r3
 8014496:	2b64      	cmp	r3, #100	@ 0x64
 8014498:	d901      	bls.n	801449e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 801449a:	2303      	movs	r3, #3
 801449c:	e3d4      	b.n	8014c48 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 801449e:	4b63      	ldr	r3, [pc, #396]	@ (801462c <HAL_RCC_OscConfig+0x288>)
 80144a0:	681b      	ldr	r3, [r3, #0]
 80144a2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80144a6:	2b00      	cmp	r3, #0
 80144a8:	d0f0      	beq.n	801448c <HAL_RCC_OscConfig+0xe8>
 80144aa:	e014      	b.n	80144d6 <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80144ac:	f7fc fdb0 	bl	8011010 <HAL_GetTick>
 80144b0:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 80144b2:	e008      	b.n	80144c6 <HAL_RCC_OscConfig+0x122>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80144b4:	f7fc fdac 	bl	8011010 <HAL_GetTick>
 80144b8:	4602      	mov	r2, r0
 80144ba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80144bc:	1ad3      	subs	r3, r2, r3
 80144be:	2b64      	cmp	r3, #100	@ 0x64
 80144c0:	d901      	bls.n	80144c6 <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 80144c2:	2303      	movs	r3, #3
 80144c4:	e3c0      	b.n	8014c48 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 80144c6:	4b59      	ldr	r3, [pc, #356]	@ (801462c <HAL_RCC_OscConfig+0x288>)
 80144c8:	681b      	ldr	r3, [r3, #0]
 80144ca:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80144ce:	2b00      	cmp	r3, #0
 80144d0:	d1f0      	bne.n	80144b4 <HAL_RCC_OscConfig+0x110>
 80144d2:	e000      	b.n	80144d6 <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80144d4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80144d6:	687b      	ldr	r3, [r7, #4]
 80144d8:	681b      	ldr	r3, [r3, #0]
 80144da:	f003 0302 	and.w	r3, r3, #2
 80144de:	2b00      	cmp	r3, #0
 80144e0:	f000 80ca 	beq.w	8014678 <HAL_RCC_OscConfig+0x2d4>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80144e4:	4b51      	ldr	r3, [pc, #324]	@ (801462c <HAL_RCC_OscConfig+0x288>)
 80144e6:	691b      	ldr	r3, [r3, #16]
 80144e8:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80144ec:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 80144ee:	4b4f      	ldr	r3, [pc, #316]	@ (801462c <HAL_RCC_OscConfig+0x288>)
 80144f0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80144f2:	61fb      	str	r3, [r7, #28]
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 80144f4:	6a3b      	ldr	r3, [r7, #32]
 80144f6:	2b00      	cmp	r3, #0
 80144f8:	d007      	beq.n	801450a <HAL_RCC_OscConfig+0x166>
 80144fa:	6a3b      	ldr	r3, [r7, #32]
 80144fc:	2b18      	cmp	r3, #24
 80144fe:	d156      	bne.n	80145ae <HAL_RCC_OscConfig+0x20a>
 8014500:	69fb      	ldr	r3, [r7, #28]
 8014502:	f003 0303 	and.w	r3, r3, #3
 8014506:	2b00      	cmp	r3, #0
 8014508:	d151      	bne.n	80145ae <HAL_RCC_OscConfig+0x20a>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 801450a:	4b48      	ldr	r3, [pc, #288]	@ (801462c <HAL_RCC_OscConfig+0x288>)
 801450c:	681b      	ldr	r3, [r3, #0]
 801450e:	f003 0304 	and.w	r3, r3, #4
 8014512:	2b00      	cmp	r3, #0
 8014514:	d005      	beq.n	8014522 <HAL_RCC_OscConfig+0x17e>
 8014516:	687b      	ldr	r3, [r7, #4]
 8014518:	68db      	ldr	r3, [r3, #12]
 801451a:	2b00      	cmp	r3, #0
 801451c:	d101      	bne.n	8014522 <HAL_RCC_OscConfig+0x17e>
      {
        return HAL_ERROR;
 801451e:	2301      	movs	r3, #1
 8014520:	e392      	b.n	8014c48 <HAL_RCC_OscConfig+0x8a4>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8014522:	4b42      	ldr	r3, [pc, #264]	@ (801462c <HAL_RCC_OscConfig+0x288>)
 8014524:	681b      	ldr	r3, [r3, #0]
 8014526:	f023 0219 	bic.w	r2, r3, #25
 801452a:	687b      	ldr	r3, [r7, #4]
 801452c:	68db      	ldr	r3, [r3, #12]
 801452e:	493f      	ldr	r1, [pc, #252]	@ (801462c <HAL_RCC_OscConfig+0x288>)
 8014530:	4313      	orrs	r3, r2
 8014532:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8014534:	f7fc fd6c 	bl	8011010 <HAL_GetTick>
 8014538:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 801453a:	e008      	b.n	801454e <HAL_RCC_OscConfig+0x1aa>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 801453c:	f7fc fd68 	bl	8011010 <HAL_GetTick>
 8014540:	4602      	mov	r2, r0
 8014542:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8014544:	1ad3      	subs	r3, r2, r3
 8014546:	2b02      	cmp	r3, #2
 8014548:	d901      	bls.n	801454e <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 801454a:	2303      	movs	r3, #3
 801454c:	e37c      	b.n	8014c48 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 801454e:	4b37      	ldr	r3, [pc, #220]	@ (801462c <HAL_RCC_OscConfig+0x288>)
 8014550:	681b      	ldr	r3, [r3, #0]
 8014552:	f003 0304 	and.w	r3, r3, #4
 8014556:	2b00      	cmp	r3, #0
 8014558:	d0f0      	beq.n	801453c <HAL_RCC_OscConfig+0x198>
          }
        }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 801455a:	f7fc fd65 	bl	8011028 <HAL_GetREVID>
 801455e:	4603      	mov	r3, r0
 8014560:	f241 0203 	movw	r2, #4099	@ 0x1003
 8014564:	4293      	cmp	r3, r2
 8014566:	d817      	bhi.n	8014598 <HAL_RCC_OscConfig+0x1f4>
 8014568:	687b      	ldr	r3, [r7, #4]
 801456a:	691b      	ldr	r3, [r3, #16]
 801456c:	2b40      	cmp	r3, #64	@ 0x40
 801456e:	d108      	bne.n	8014582 <HAL_RCC_OscConfig+0x1de>
 8014570:	4b2e      	ldr	r3, [pc, #184]	@ (801462c <HAL_RCC_OscConfig+0x288>)
 8014572:	685b      	ldr	r3, [r3, #4]
 8014574:	f423 337c 	bic.w	r3, r3, #258048	@ 0x3f000
 8014578:	4a2c      	ldr	r2, [pc, #176]	@ (801462c <HAL_RCC_OscConfig+0x288>)
 801457a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 801457e:	6053      	str	r3, [r2, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8014580:	e07a      	b.n	8014678 <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8014582:	4b2a      	ldr	r3, [pc, #168]	@ (801462c <HAL_RCC_OscConfig+0x288>)
 8014584:	685b      	ldr	r3, [r3, #4]
 8014586:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 801458a:	687b      	ldr	r3, [r7, #4]
 801458c:	691b      	ldr	r3, [r3, #16]
 801458e:	031b      	lsls	r3, r3, #12
 8014590:	4926      	ldr	r1, [pc, #152]	@ (801462c <HAL_RCC_OscConfig+0x288>)
 8014592:	4313      	orrs	r3, r2
 8014594:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8014596:	e06f      	b.n	8014678 <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8014598:	4b24      	ldr	r3, [pc, #144]	@ (801462c <HAL_RCC_OscConfig+0x288>)
 801459a:	685b      	ldr	r3, [r3, #4]
 801459c:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 80145a0:	687b      	ldr	r3, [r7, #4]
 80145a2:	691b      	ldr	r3, [r3, #16]
 80145a4:	061b      	lsls	r3, r3, #24
 80145a6:	4921      	ldr	r1, [pc, #132]	@ (801462c <HAL_RCC_OscConfig+0x288>)
 80145a8:	4313      	orrs	r3, r2
 80145aa:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80145ac:	e064      	b.n	8014678 <HAL_RCC_OscConfig+0x2d4>
    }

    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 80145ae:	687b      	ldr	r3, [r7, #4]
 80145b0:	68db      	ldr	r3, [r3, #12]
 80145b2:	2b00      	cmp	r3, #0
 80145b4:	d047      	beq.n	8014646 <HAL_RCC_OscConfig+0x2a2>
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 80145b6:	4b1d      	ldr	r3, [pc, #116]	@ (801462c <HAL_RCC_OscConfig+0x288>)
 80145b8:	681b      	ldr	r3, [r3, #0]
 80145ba:	f023 0219 	bic.w	r2, r3, #25
 80145be:	687b      	ldr	r3, [r7, #4]
 80145c0:	68db      	ldr	r3, [r3, #12]
 80145c2:	491a      	ldr	r1, [pc, #104]	@ (801462c <HAL_RCC_OscConfig+0x288>)
 80145c4:	4313      	orrs	r3, r2
 80145c6:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80145c8:	f7fc fd22 	bl	8011010 <HAL_GetTick>
 80145cc:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80145ce:	e008      	b.n	80145e2 <HAL_RCC_OscConfig+0x23e>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80145d0:	f7fc fd1e 	bl	8011010 <HAL_GetTick>
 80145d4:	4602      	mov	r2, r0
 80145d6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80145d8:	1ad3      	subs	r3, r2, r3
 80145da:	2b02      	cmp	r3, #2
 80145dc:	d901      	bls.n	80145e2 <HAL_RCC_OscConfig+0x23e>
          {
            return HAL_TIMEOUT;
 80145de:	2303      	movs	r3, #3
 80145e0:	e332      	b.n	8014c48 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80145e2:	4b12      	ldr	r3, [pc, #72]	@ (801462c <HAL_RCC_OscConfig+0x288>)
 80145e4:	681b      	ldr	r3, [r3, #0]
 80145e6:	f003 0304 	and.w	r3, r3, #4
 80145ea:	2b00      	cmp	r3, #0
 80145ec:	d0f0      	beq.n	80145d0 <HAL_RCC_OscConfig+0x22c>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80145ee:	f7fc fd1b 	bl	8011028 <HAL_GetREVID>
 80145f2:	4603      	mov	r3, r0
 80145f4:	f241 0203 	movw	r2, #4099	@ 0x1003
 80145f8:	4293      	cmp	r3, r2
 80145fa:	d819      	bhi.n	8014630 <HAL_RCC_OscConfig+0x28c>
 80145fc:	687b      	ldr	r3, [r7, #4]
 80145fe:	691b      	ldr	r3, [r3, #16]
 8014600:	2b40      	cmp	r3, #64	@ 0x40
 8014602:	d108      	bne.n	8014616 <HAL_RCC_OscConfig+0x272>
 8014604:	4b09      	ldr	r3, [pc, #36]	@ (801462c <HAL_RCC_OscConfig+0x288>)
 8014606:	685b      	ldr	r3, [r3, #4]
 8014608:	f423 337c 	bic.w	r3, r3, #258048	@ 0x3f000
 801460c:	4a07      	ldr	r2, [pc, #28]	@ (801462c <HAL_RCC_OscConfig+0x288>)
 801460e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8014612:	6053      	str	r3, [r2, #4]
 8014614:	e030      	b.n	8014678 <HAL_RCC_OscConfig+0x2d4>
 8014616:	4b05      	ldr	r3, [pc, #20]	@ (801462c <HAL_RCC_OscConfig+0x288>)
 8014618:	685b      	ldr	r3, [r3, #4]
 801461a:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 801461e:	687b      	ldr	r3, [r7, #4]
 8014620:	691b      	ldr	r3, [r3, #16]
 8014622:	031b      	lsls	r3, r3, #12
 8014624:	4901      	ldr	r1, [pc, #4]	@ (801462c <HAL_RCC_OscConfig+0x288>)
 8014626:	4313      	orrs	r3, r2
 8014628:	604b      	str	r3, [r1, #4]
 801462a:	e025      	b.n	8014678 <HAL_RCC_OscConfig+0x2d4>
 801462c:	58024400 	.word	0x58024400
 8014630:	4b9a      	ldr	r3, [pc, #616]	@ (801489c <HAL_RCC_OscConfig+0x4f8>)
 8014632:	685b      	ldr	r3, [r3, #4]
 8014634:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8014638:	687b      	ldr	r3, [r7, #4]
 801463a:	691b      	ldr	r3, [r3, #16]
 801463c:	061b      	lsls	r3, r3, #24
 801463e:	4997      	ldr	r1, [pc, #604]	@ (801489c <HAL_RCC_OscConfig+0x4f8>)
 8014640:	4313      	orrs	r3, r2
 8014642:	604b      	str	r3, [r1, #4]
 8014644:	e018      	b.n	8014678 <HAL_RCC_OscConfig+0x2d4>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8014646:	4b95      	ldr	r3, [pc, #596]	@ (801489c <HAL_RCC_OscConfig+0x4f8>)
 8014648:	681b      	ldr	r3, [r3, #0]
 801464a:	4a94      	ldr	r2, [pc, #592]	@ (801489c <HAL_RCC_OscConfig+0x4f8>)
 801464c:	f023 0301 	bic.w	r3, r3, #1
 8014650:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8014652:	f7fc fcdd 	bl	8011010 <HAL_GetTick>
 8014656:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8014658:	e008      	b.n	801466c <HAL_RCC_OscConfig+0x2c8>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 801465a:	f7fc fcd9 	bl	8011010 <HAL_GetTick>
 801465e:	4602      	mov	r2, r0
 8014660:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8014662:	1ad3      	subs	r3, r2, r3
 8014664:	2b02      	cmp	r3, #2
 8014666:	d901      	bls.n	801466c <HAL_RCC_OscConfig+0x2c8>
          {
            return HAL_TIMEOUT;
 8014668:	2303      	movs	r3, #3
 801466a:	e2ed      	b.n	8014c48 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 801466c:	4b8b      	ldr	r3, [pc, #556]	@ (801489c <HAL_RCC_OscConfig+0x4f8>)
 801466e:	681b      	ldr	r3, [r3, #0]
 8014670:	f003 0304 	and.w	r3, r3, #4
 8014674:	2b00      	cmp	r3, #0
 8014676:	d1f0      	bne.n	801465a <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 8014678:	687b      	ldr	r3, [r7, #4]
 801467a:	681b      	ldr	r3, [r3, #0]
 801467c:	f003 0310 	and.w	r3, r3, #16
 8014680:	2b00      	cmp	r3, #0
 8014682:	f000 80a9 	beq.w	80147d8 <HAL_RCC_OscConfig+0x434>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8014686:	4b85      	ldr	r3, [pc, #532]	@ (801489c <HAL_RCC_OscConfig+0x4f8>)
 8014688:	691b      	ldr	r3, [r3, #16]
 801468a:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 801468e:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8014690:	4b82      	ldr	r3, [pc, #520]	@ (801489c <HAL_RCC_OscConfig+0x4f8>)
 8014692:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8014694:	617b      	str	r3, [r7, #20]
    if ((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 8014696:	69bb      	ldr	r3, [r7, #24]
 8014698:	2b08      	cmp	r3, #8
 801469a:	d007      	beq.n	80146ac <HAL_RCC_OscConfig+0x308>
 801469c:	69bb      	ldr	r3, [r7, #24]
 801469e:	2b18      	cmp	r3, #24
 80146a0:	d13a      	bne.n	8014718 <HAL_RCC_OscConfig+0x374>
 80146a2:	697b      	ldr	r3, [r7, #20]
 80146a4:	f003 0303 	and.w	r3, r3, #3
 80146a8:	2b01      	cmp	r3, #1
 80146aa:	d135      	bne.n	8014718 <HAL_RCC_OscConfig+0x374>
    {
      /* When CSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 80146ac:	4b7b      	ldr	r3, [pc, #492]	@ (801489c <HAL_RCC_OscConfig+0x4f8>)
 80146ae:	681b      	ldr	r3, [r3, #0]
 80146b0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80146b4:	2b00      	cmp	r3, #0
 80146b6:	d005      	beq.n	80146c4 <HAL_RCC_OscConfig+0x320>
 80146b8:	687b      	ldr	r3, [r7, #4]
 80146ba:	69db      	ldr	r3, [r3, #28]
 80146bc:	2b80      	cmp	r3, #128	@ 0x80
 80146be:	d001      	beq.n	80146c4 <HAL_RCC_OscConfig+0x320>
      {
        return HAL_ERROR;
 80146c0:	2301      	movs	r3, #1
 80146c2:	e2c1      	b.n	8014c48 <HAL_RCC_OscConfig+0x8a4>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80146c4:	f7fc fcb0 	bl	8011028 <HAL_GetREVID>
 80146c8:	4603      	mov	r3, r0
 80146ca:	f241 0203 	movw	r2, #4099	@ 0x1003
 80146ce:	4293      	cmp	r3, r2
 80146d0:	d817      	bhi.n	8014702 <HAL_RCC_OscConfig+0x35e>
 80146d2:	687b      	ldr	r3, [r7, #4]
 80146d4:	6a1b      	ldr	r3, [r3, #32]
 80146d6:	2b20      	cmp	r3, #32
 80146d8:	d108      	bne.n	80146ec <HAL_RCC_OscConfig+0x348>
 80146da:	4b70      	ldr	r3, [pc, #448]	@ (801489c <HAL_RCC_OscConfig+0x4f8>)
 80146dc:	685b      	ldr	r3, [r3, #4]
 80146de:	f023 43f8 	bic.w	r3, r3, #2080374784	@ 0x7c000000
 80146e2:	4a6e      	ldr	r2, [pc, #440]	@ (801489c <HAL_RCC_OscConfig+0x4f8>)
 80146e4:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 80146e8:	6053      	str	r3, [r2, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 80146ea:	e075      	b.n	80147d8 <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80146ec:	4b6b      	ldr	r3, [pc, #428]	@ (801489c <HAL_RCC_OscConfig+0x4f8>)
 80146ee:	685b      	ldr	r3, [r3, #4]
 80146f0:	f023 42f8 	bic.w	r2, r3, #2080374784	@ 0x7c000000
 80146f4:	687b      	ldr	r3, [r7, #4]
 80146f6:	6a1b      	ldr	r3, [r3, #32]
 80146f8:	069b      	lsls	r3, r3, #26
 80146fa:	4968      	ldr	r1, [pc, #416]	@ (801489c <HAL_RCC_OscConfig+0x4f8>)
 80146fc:	4313      	orrs	r3, r2
 80146fe:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8014700:	e06a      	b.n	80147d8 <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8014702:	4b66      	ldr	r3, [pc, #408]	@ (801489c <HAL_RCC_OscConfig+0x4f8>)
 8014704:	68db      	ldr	r3, [r3, #12]
 8014706:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
 801470a:	687b      	ldr	r3, [r7, #4]
 801470c:	6a1b      	ldr	r3, [r3, #32]
 801470e:	061b      	lsls	r3, r3, #24
 8014710:	4962      	ldr	r1, [pc, #392]	@ (801489c <HAL_RCC_OscConfig+0x4f8>)
 8014712:	4313      	orrs	r3, r2
 8014714:	60cb      	str	r3, [r1, #12]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8014716:	e05f      	b.n	80147d8 <HAL_RCC_OscConfig+0x434>
      }
    }
    else
    {
      /* Check the CSI State */
      if ((RCC_OscInitStruct->CSIState) != RCC_CSI_OFF)
 8014718:	687b      	ldr	r3, [r7, #4]
 801471a:	69db      	ldr	r3, [r3, #28]
 801471c:	2b00      	cmp	r3, #0
 801471e:	d042      	beq.n	80147a6 <HAL_RCC_OscConfig+0x402>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 8014720:	4b5e      	ldr	r3, [pc, #376]	@ (801489c <HAL_RCC_OscConfig+0x4f8>)
 8014722:	681b      	ldr	r3, [r3, #0]
 8014724:	4a5d      	ldr	r2, [pc, #372]	@ (801489c <HAL_RCC_OscConfig+0x4f8>)
 8014726:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 801472a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 801472c:	f7fc fc70 	bl	8011010 <HAL_GetTick>
 8014730:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till CSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8014732:	e008      	b.n	8014746 <HAL_RCC_OscConfig+0x3a2>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 8014734:	f7fc fc6c 	bl	8011010 <HAL_GetTick>
 8014738:	4602      	mov	r2, r0
 801473a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801473c:	1ad3      	subs	r3, r2, r3
 801473e:	2b02      	cmp	r3, #2
 8014740:	d901      	bls.n	8014746 <HAL_RCC_OscConfig+0x3a2>
          {
            return HAL_TIMEOUT;
 8014742:	2303      	movs	r3, #3
 8014744:	e280      	b.n	8014c48 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8014746:	4b55      	ldr	r3, [pc, #340]	@ (801489c <HAL_RCC_OscConfig+0x4f8>)
 8014748:	681b      	ldr	r3, [r3, #0]
 801474a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 801474e:	2b00      	cmp	r3, #0
 8014750:	d0f0      	beq.n	8014734 <HAL_RCC_OscConfig+0x390>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8014752:	f7fc fc69 	bl	8011028 <HAL_GetREVID>
 8014756:	4603      	mov	r3, r0
 8014758:	f241 0203 	movw	r2, #4099	@ 0x1003
 801475c:	4293      	cmp	r3, r2
 801475e:	d817      	bhi.n	8014790 <HAL_RCC_OscConfig+0x3ec>
 8014760:	687b      	ldr	r3, [r7, #4]
 8014762:	6a1b      	ldr	r3, [r3, #32]
 8014764:	2b20      	cmp	r3, #32
 8014766:	d108      	bne.n	801477a <HAL_RCC_OscConfig+0x3d6>
 8014768:	4b4c      	ldr	r3, [pc, #304]	@ (801489c <HAL_RCC_OscConfig+0x4f8>)
 801476a:	685b      	ldr	r3, [r3, #4]
 801476c:	f023 43f8 	bic.w	r3, r3, #2080374784	@ 0x7c000000
 8014770:	4a4a      	ldr	r2, [pc, #296]	@ (801489c <HAL_RCC_OscConfig+0x4f8>)
 8014772:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8014776:	6053      	str	r3, [r2, #4]
 8014778:	e02e      	b.n	80147d8 <HAL_RCC_OscConfig+0x434>
 801477a:	4b48      	ldr	r3, [pc, #288]	@ (801489c <HAL_RCC_OscConfig+0x4f8>)
 801477c:	685b      	ldr	r3, [r3, #4]
 801477e:	f023 42f8 	bic.w	r2, r3, #2080374784	@ 0x7c000000
 8014782:	687b      	ldr	r3, [r7, #4]
 8014784:	6a1b      	ldr	r3, [r3, #32]
 8014786:	069b      	lsls	r3, r3, #26
 8014788:	4944      	ldr	r1, [pc, #272]	@ (801489c <HAL_RCC_OscConfig+0x4f8>)
 801478a:	4313      	orrs	r3, r2
 801478c:	604b      	str	r3, [r1, #4]
 801478e:	e023      	b.n	80147d8 <HAL_RCC_OscConfig+0x434>
 8014790:	4b42      	ldr	r3, [pc, #264]	@ (801489c <HAL_RCC_OscConfig+0x4f8>)
 8014792:	68db      	ldr	r3, [r3, #12]
 8014794:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
 8014798:	687b      	ldr	r3, [r7, #4]
 801479a:	6a1b      	ldr	r3, [r3, #32]
 801479c:	061b      	lsls	r3, r3, #24
 801479e:	493f      	ldr	r1, [pc, #252]	@ (801489c <HAL_RCC_OscConfig+0x4f8>)
 80147a0:	4313      	orrs	r3, r2
 80147a2:	60cb      	str	r3, [r1, #12]
 80147a4:	e018      	b.n	80147d8 <HAL_RCC_OscConfig+0x434>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 80147a6:	4b3d      	ldr	r3, [pc, #244]	@ (801489c <HAL_RCC_OscConfig+0x4f8>)
 80147a8:	681b      	ldr	r3, [r3, #0]
 80147aa:	4a3c      	ldr	r2, [pc, #240]	@ (801489c <HAL_RCC_OscConfig+0x4f8>)
 80147ac:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80147b0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80147b2:	f7fc fc2d 	bl	8011010 <HAL_GetTick>
 80147b6:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till CSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 80147b8:	e008      	b.n	80147cc <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 80147ba:	f7fc fc29 	bl	8011010 <HAL_GetTick>
 80147be:	4602      	mov	r2, r0
 80147c0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80147c2:	1ad3      	subs	r3, r2, r3
 80147c4:	2b02      	cmp	r3, #2
 80147c6:	d901      	bls.n	80147cc <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 80147c8:	2303      	movs	r3, #3
 80147ca:	e23d      	b.n	8014c48 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 80147cc:	4b33      	ldr	r3, [pc, #204]	@ (801489c <HAL_RCC_OscConfig+0x4f8>)
 80147ce:	681b      	ldr	r3, [r3, #0]
 80147d0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80147d4:	2b00      	cmp	r3, #0
 80147d6:	d1f0      	bne.n	80147ba <HAL_RCC_OscConfig+0x416>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80147d8:	687b      	ldr	r3, [r7, #4]
 80147da:	681b      	ldr	r3, [r3, #0]
 80147dc:	f003 0308 	and.w	r3, r3, #8
 80147e0:	2b00      	cmp	r3, #0
 80147e2:	d036      	beq.n	8014852 <HAL_RCC_OscConfig+0x4ae>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 80147e4:	687b      	ldr	r3, [r7, #4]
 80147e6:	695b      	ldr	r3, [r3, #20]
 80147e8:	2b00      	cmp	r3, #0
 80147ea:	d019      	beq.n	8014820 <HAL_RCC_OscConfig+0x47c>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80147ec:	4b2b      	ldr	r3, [pc, #172]	@ (801489c <HAL_RCC_OscConfig+0x4f8>)
 80147ee:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80147f0:	4a2a      	ldr	r2, [pc, #168]	@ (801489c <HAL_RCC_OscConfig+0x4f8>)
 80147f2:	f043 0301 	orr.w	r3, r3, #1
 80147f6:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80147f8:	f7fc fc0a 	bl	8011010 <HAL_GetTick>
 80147fc:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 80147fe:	e008      	b.n	8014812 <HAL_RCC_OscConfig+0x46e>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8014800:	f7fc fc06 	bl	8011010 <HAL_GetTick>
 8014804:	4602      	mov	r2, r0
 8014806:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8014808:	1ad3      	subs	r3, r2, r3
 801480a:	2b02      	cmp	r3, #2
 801480c:	d901      	bls.n	8014812 <HAL_RCC_OscConfig+0x46e>
        {
          return HAL_TIMEOUT;
 801480e:	2303      	movs	r3, #3
 8014810:	e21a      	b.n	8014c48 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8014812:	4b22      	ldr	r3, [pc, #136]	@ (801489c <HAL_RCC_OscConfig+0x4f8>)
 8014814:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8014816:	f003 0302 	and.w	r3, r3, #2
 801481a:	2b00      	cmp	r3, #0
 801481c:	d0f0      	beq.n	8014800 <HAL_RCC_OscConfig+0x45c>
 801481e:	e018      	b.n	8014852 <HAL_RCC_OscConfig+0x4ae>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8014820:	4b1e      	ldr	r3, [pc, #120]	@ (801489c <HAL_RCC_OscConfig+0x4f8>)
 8014822:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8014824:	4a1d      	ldr	r2, [pc, #116]	@ (801489c <HAL_RCC_OscConfig+0x4f8>)
 8014826:	f023 0301 	bic.w	r3, r3, #1
 801482a:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 801482c:	f7fc fbf0 	bl	8011010 <HAL_GetTick>
 8014830:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8014832:	e008      	b.n	8014846 <HAL_RCC_OscConfig+0x4a2>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8014834:	f7fc fbec 	bl	8011010 <HAL_GetTick>
 8014838:	4602      	mov	r2, r0
 801483a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801483c:	1ad3      	subs	r3, r2, r3
 801483e:	2b02      	cmp	r3, #2
 8014840:	d901      	bls.n	8014846 <HAL_RCC_OscConfig+0x4a2>
        {
          return HAL_TIMEOUT;
 8014842:	2303      	movs	r3, #3
 8014844:	e200      	b.n	8014c48 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8014846:	4b15      	ldr	r3, [pc, #84]	@ (801489c <HAL_RCC_OscConfig+0x4f8>)
 8014848:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 801484a:	f003 0302 	and.w	r3, r3, #2
 801484e:	2b00      	cmp	r3, #0
 8014850:	d1f0      	bne.n	8014834 <HAL_RCC_OscConfig+0x490>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8014852:	687b      	ldr	r3, [r7, #4]
 8014854:	681b      	ldr	r3, [r3, #0]
 8014856:	f003 0320 	and.w	r3, r3, #32
 801485a:	2b00      	cmp	r3, #0
 801485c:	d039      	beq.n	80148d2 <HAL_RCC_OscConfig+0x52e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if ((RCC_OscInitStruct->HSI48State) != RCC_HSI48_OFF)
 801485e:	687b      	ldr	r3, [r7, #4]
 8014860:	699b      	ldr	r3, [r3, #24]
 8014862:	2b00      	cmp	r3, #0
 8014864:	d01c      	beq.n	80148a0 <HAL_RCC_OscConfig+0x4fc>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8014866:	4b0d      	ldr	r3, [pc, #52]	@ (801489c <HAL_RCC_OscConfig+0x4f8>)
 8014868:	681b      	ldr	r3, [r3, #0]
 801486a:	4a0c      	ldr	r2, [pc, #48]	@ (801489c <HAL_RCC_OscConfig+0x4f8>)
 801486c:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8014870:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8014872:	f7fc fbcd 	bl	8011010 <HAL_GetTick>
 8014876:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8014878:	e008      	b.n	801488c <HAL_RCC_OscConfig+0x4e8>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 801487a:	f7fc fbc9 	bl	8011010 <HAL_GetTick>
 801487e:	4602      	mov	r2, r0
 8014880:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8014882:	1ad3      	subs	r3, r2, r3
 8014884:	2b02      	cmp	r3, #2
 8014886:	d901      	bls.n	801488c <HAL_RCC_OscConfig+0x4e8>
        {
          return HAL_TIMEOUT;
 8014888:	2303      	movs	r3, #3
 801488a:	e1dd      	b.n	8014c48 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 801488c:	4b03      	ldr	r3, [pc, #12]	@ (801489c <HAL_RCC_OscConfig+0x4f8>)
 801488e:	681b      	ldr	r3, [r3, #0]
 8014890:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8014894:	2b00      	cmp	r3, #0
 8014896:	d0f0      	beq.n	801487a <HAL_RCC_OscConfig+0x4d6>
 8014898:	e01b      	b.n	80148d2 <HAL_RCC_OscConfig+0x52e>
 801489a:	bf00      	nop
 801489c:	58024400 	.word	0x58024400
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 80148a0:	4b9b      	ldr	r3, [pc, #620]	@ (8014b10 <HAL_RCC_OscConfig+0x76c>)
 80148a2:	681b      	ldr	r3, [r3, #0]
 80148a4:	4a9a      	ldr	r2, [pc, #616]	@ (8014b10 <HAL_RCC_OscConfig+0x76c>)
 80148a6:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80148aa:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 80148ac:	f7fc fbb0 	bl	8011010 <HAL_GetTick>
 80148b0:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 80148b2:	e008      	b.n	80148c6 <HAL_RCC_OscConfig+0x522>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80148b4:	f7fc fbac 	bl	8011010 <HAL_GetTick>
 80148b8:	4602      	mov	r2, r0
 80148ba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80148bc:	1ad3      	subs	r3, r2, r3
 80148be:	2b02      	cmp	r3, #2
 80148c0:	d901      	bls.n	80148c6 <HAL_RCC_OscConfig+0x522>
        {
          return HAL_TIMEOUT;
 80148c2:	2303      	movs	r3, #3
 80148c4:	e1c0      	b.n	8014c48 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 80148c6:	4b92      	ldr	r3, [pc, #584]	@ (8014b10 <HAL_RCC_OscConfig+0x76c>)
 80148c8:	681b      	ldr	r3, [r3, #0]
 80148ca:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80148ce:	2b00      	cmp	r3, #0
 80148d0:	d1f0      	bne.n	80148b4 <HAL_RCC_OscConfig+0x510>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80148d2:	687b      	ldr	r3, [r7, #4]
 80148d4:	681b      	ldr	r3, [r3, #0]
 80148d6:	f003 0304 	and.w	r3, r3, #4
 80148da:	2b00      	cmp	r3, #0
 80148dc:	f000 8081 	beq.w	80149e2 <HAL_RCC_OscConfig+0x63e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 80148e0:	4b8c      	ldr	r3, [pc, #560]	@ (8014b14 <HAL_RCC_OscConfig+0x770>)
 80148e2:	681b      	ldr	r3, [r3, #0]
 80148e4:	4a8b      	ldr	r2, [pc, #556]	@ (8014b14 <HAL_RCC_OscConfig+0x770>)
 80148e6:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80148ea:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80148ec:	f7fc fb90 	bl	8011010 <HAL_GetTick>
 80148f0:	6278      	str	r0, [r7, #36]	@ 0x24

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80148f2:	e008      	b.n	8014906 <HAL_RCC_OscConfig+0x562>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80148f4:	f7fc fb8c 	bl	8011010 <HAL_GetTick>
 80148f8:	4602      	mov	r2, r0
 80148fa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80148fc:	1ad3      	subs	r3, r2, r3
 80148fe:	2b64      	cmp	r3, #100	@ 0x64
 8014900:	d901      	bls.n	8014906 <HAL_RCC_OscConfig+0x562>
      {
        return HAL_TIMEOUT;
 8014902:	2303      	movs	r3, #3
 8014904:	e1a0      	b.n	8014c48 <HAL_RCC_OscConfig+0x8a4>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8014906:	4b83      	ldr	r3, [pc, #524]	@ (8014b14 <HAL_RCC_OscConfig+0x770>)
 8014908:	681b      	ldr	r3, [r3, #0]
 801490a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 801490e:	2b00      	cmp	r3, #0
 8014910:	d0f0      	beq.n	80148f4 <HAL_RCC_OscConfig+0x550>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8014912:	687b      	ldr	r3, [r7, #4]
 8014914:	689b      	ldr	r3, [r3, #8]
 8014916:	2b01      	cmp	r3, #1
 8014918:	d106      	bne.n	8014928 <HAL_RCC_OscConfig+0x584>
 801491a:	4b7d      	ldr	r3, [pc, #500]	@ (8014b10 <HAL_RCC_OscConfig+0x76c>)
 801491c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 801491e:	4a7c      	ldr	r2, [pc, #496]	@ (8014b10 <HAL_RCC_OscConfig+0x76c>)
 8014920:	f043 0301 	orr.w	r3, r3, #1
 8014924:	6713      	str	r3, [r2, #112]	@ 0x70
 8014926:	e02d      	b.n	8014984 <HAL_RCC_OscConfig+0x5e0>
 8014928:	687b      	ldr	r3, [r7, #4]
 801492a:	689b      	ldr	r3, [r3, #8]
 801492c:	2b00      	cmp	r3, #0
 801492e:	d10c      	bne.n	801494a <HAL_RCC_OscConfig+0x5a6>
 8014930:	4b77      	ldr	r3, [pc, #476]	@ (8014b10 <HAL_RCC_OscConfig+0x76c>)
 8014932:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8014934:	4a76      	ldr	r2, [pc, #472]	@ (8014b10 <HAL_RCC_OscConfig+0x76c>)
 8014936:	f023 0301 	bic.w	r3, r3, #1
 801493a:	6713      	str	r3, [r2, #112]	@ 0x70
 801493c:	4b74      	ldr	r3, [pc, #464]	@ (8014b10 <HAL_RCC_OscConfig+0x76c>)
 801493e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8014940:	4a73      	ldr	r2, [pc, #460]	@ (8014b10 <HAL_RCC_OscConfig+0x76c>)
 8014942:	f023 0304 	bic.w	r3, r3, #4
 8014946:	6713      	str	r3, [r2, #112]	@ 0x70
 8014948:	e01c      	b.n	8014984 <HAL_RCC_OscConfig+0x5e0>
 801494a:	687b      	ldr	r3, [r7, #4]
 801494c:	689b      	ldr	r3, [r3, #8]
 801494e:	2b05      	cmp	r3, #5
 8014950:	d10c      	bne.n	801496c <HAL_RCC_OscConfig+0x5c8>
 8014952:	4b6f      	ldr	r3, [pc, #444]	@ (8014b10 <HAL_RCC_OscConfig+0x76c>)
 8014954:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8014956:	4a6e      	ldr	r2, [pc, #440]	@ (8014b10 <HAL_RCC_OscConfig+0x76c>)
 8014958:	f043 0304 	orr.w	r3, r3, #4
 801495c:	6713      	str	r3, [r2, #112]	@ 0x70
 801495e:	4b6c      	ldr	r3, [pc, #432]	@ (8014b10 <HAL_RCC_OscConfig+0x76c>)
 8014960:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8014962:	4a6b      	ldr	r2, [pc, #428]	@ (8014b10 <HAL_RCC_OscConfig+0x76c>)
 8014964:	f043 0301 	orr.w	r3, r3, #1
 8014968:	6713      	str	r3, [r2, #112]	@ 0x70
 801496a:	e00b      	b.n	8014984 <HAL_RCC_OscConfig+0x5e0>
 801496c:	4b68      	ldr	r3, [pc, #416]	@ (8014b10 <HAL_RCC_OscConfig+0x76c>)
 801496e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8014970:	4a67      	ldr	r2, [pc, #412]	@ (8014b10 <HAL_RCC_OscConfig+0x76c>)
 8014972:	f023 0301 	bic.w	r3, r3, #1
 8014976:	6713      	str	r3, [r2, #112]	@ 0x70
 8014978:	4b65      	ldr	r3, [pc, #404]	@ (8014b10 <HAL_RCC_OscConfig+0x76c>)
 801497a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 801497c:	4a64      	ldr	r2, [pc, #400]	@ (8014b10 <HAL_RCC_OscConfig+0x76c>)
 801497e:	f023 0304 	bic.w	r3, r3, #4
 8014982:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8014984:	687b      	ldr	r3, [r7, #4]
 8014986:	689b      	ldr	r3, [r3, #8]
 8014988:	2b00      	cmp	r3, #0
 801498a:	d015      	beq.n	80149b8 <HAL_RCC_OscConfig+0x614>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 801498c:	f7fc fb40 	bl	8011010 <HAL_GetTick>
 8014990:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8014992:	e00a      	b.n	80149aa <HAL_RCC_OscConfig+0x606>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8014994:	f7fc fb3c 	bl	8011010 <HAL_GetTick>
 8014998:	4602      	mov	r2, r0
 801499a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801499c:	1ad3      	subs	r3, r2, r3
 801499e:	f241 3288 	movw	r2, #5000	@ 0x1388
 80149a2:	4293      	cmp	r3, r2
 80149a4:	d901      	bls.n	80149aa <HAL_RCC_OscConfig+0x606>
        {
          return HAL_TIMEOUT;
 80149a6:	2303      	movs	r3, #3
 80149a8:	e14e      	b.n	8014c48 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80149aa:	4b59      	ldr	r3, [pc, #356]	@ (8014b10 <HAL_RCC_OscConfig+0x76c>)
 80149ac:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80149ae:	f003 0302 	and.w	r3, r3, #2
 80149b2:	2b00      	cmp	r3, #0
 80149b4:	d0ee      	beq.n	8014994 <HAL_RCC_OscConfig+0x5f0>
 80149b6:	e014      	b.n	80149e2 <HAL_RCC_OscConfig+0x63e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80149b8:	f7fc fb2a 	bl	8011010 <HAL_GetTick>
 80149bc:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 80149be:	e00a      	b.n	80149d6 <HAL_RCC_OscConfig+0x632>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80149c0:	f7fc fb26 	bl	8011010 <HAL_GetTick>
 80149c4:	4602      	mov	r2, r0
 80149c6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80149c8:	1ad3      	subs	r3, r2, r3
 80149ca:	f241 3288 	movw	r2, #5000	@ 0x1388
 80149ce:	4293      	cmp	r3, r2
 80149d0:	d901      	bls.n	80149d6 <HAL_RCC_OscConfig+0x632>
        {
          return HAL_TIMEOUT;
 80149d2:	2303      	movs	r3, #3
 80149d4:	e138      	b.n	8014c48 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 80149d6:	4b4e      	ldr	r3, [pc, #312]	@ (8014b10 <HAL_RCC_OscConfig+0x76c>)
 80149d8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80149da:	f003 0302 	and.w	r3, r3, #2
 80149de:	2b00      	cmp	r3, #0
 80149e0:	d1ee      	bne.n	80149c0 <HAL_RCC_OscConfig+0x61c>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80149e2:	687b      	ldr	r3, [r7, #4]
 80149e4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80149e6:	2b00      	cmp	r3, #0
 80149e8:	f000 812d 	beq.w	8014c46 <HAL_RCC_OscConfig+0x8a2>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 80149ec:	4b48      	ldr	r3, [pc, #288]	@ (8014b10 <HAL_RCC_OscConfig+0x76c>)
 80149ee:	691b      	ldr	r3, [r3, #16]
 80149f0:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80149f4:	2b18      	cmp	r3, #24
 80149f6:	f000 80bd 	beq.w	8014b74 <HAL_RCC_OscConfig+0x7d0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80149fa:	687b      	ldr	r3, [r7, #4]
 80149fc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80149fe:	2b02      	cmp	r3, #2
 8014a00:	f040 809e 	bne.w	8014b40 <HAL_RCC_OscConfig+0x79c>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8014a04:	4b42      	ldr	r3, [pc, #264]	@ (8014b10 <HAL_RCC_OscConfig+0x76c>)
 8014a06:	681b      	ldr	r3, [r3, #0]
 8014a08:	4a41      	ldr	r2, [pc, #260]	@ (8014b10 <HAL_RCC_OscConfig+0x76c>)
 8014a0a:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8014a0e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8014a10:	f7fc fafe 	bl	8011010 <HAL_GetTick>
 8014a14:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8014a16:	e008      	b.n	8014a2a <HAL_RCC_OscConfig+0x686>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8014a18:	f7fc fafa 	bl	8011010 <HAL_GetTick>
 8014a1c:	4602      	mov	r2, r0
 8014a1e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8014a20:	1ad3      	subs	r3, r2, r3
 8014a22:	2b02      	cmp	r3, #2
 8014a24:	d901      	bls.n	8014a2a <HAL_RCC_OscConfig+0x686>
          {
            return HAL_TIMEOUT;
 8014a26:	2303      	movs	r3, #3
 8014a28:	e10e      	b.n	8014c48 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8014a2a:	4b39      	ldr	r3, [pc, #228]	@ (8014b10 <HAL_RCC_OscConfig+0x76c>)
 8014a2c:	681b      	ldr	r3, [r3, #0]
 8014a2e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8014a32:	2b00      	cmp	r3, #0
 8014a34:	d1f0      	bne.n	8014a18 <HAL_RCC_OscConfig+0x674>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8014a36:	4b36      	ldr	r3, [pc, #216]	@ (8014b10 <HAL_RCC_OscConfig+0x76c>)
 8014a38:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8014a3a:	4b37      	ldr	r3, [pc, #220]	@ (8014b18 <HAL_RCC_OscConfig+0x774>)
 8014a3c:	4013      	ands	r3, r2
 8014a3e:	687a      	ldr	r2, [r7, #4]
 8014a40:	6a91      	ldr	r1, [r2, #40]	@ 0x28
 8014a42:	687a      	ldr	r2, [r7, #4]
 8014a44:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 8014a46:	0112      	lsls	r2, r2, #4
 8014a48:	430a      	orrs	r2, r1
 8014a4a:	4931      	ldr	r1, [pc, #196]	@ (8014b10 <HAL_RCC_OscConfig+0x76c>)
 8014a4c:	4313      	orrs	r3, r2
 8014a4e:	628b      	str	r3, [r1, #40]	@ 0x28
 8014a50:	687b      	ldr	r3, [r7, #4]
 8014a52:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8014a54:	3b01      	subs	r3, #1
 8014a56:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8014a5a:	687b      	ldr	r3, [r7, #4]
 8014a5c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8014a5e:	3b01      	subs	r3, #1
 8014a60:	025b      	lsls	r3, r3, #9
 8014a62:	b29b      	uxth	r3, r3
 8014a64:	431a      	orrs	r2, r3
 8014a66:	687b      	ldr	r3, [r7, #4]
 8014a68:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8014a6a:	3b01      	subs	r3, #1
 8014a6c:	041b      	lsls	r3, r3, #16
 8014a6e:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 8014a72:	431a      	orrs	r2, r3
 8014a74:	687b      	ldr	r3, [r7, #4]
 8014a76:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8014a78:	3b01      	subs	r3, #1
 8014a7a:	061b      	lsls	r3, r3, #24
 8014a7c:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 8014a80:	4923      	ldr	r1, [pc, #140]	@ (8014b10 <HAL_RCC_OscConfig+0x76c>)
 8014a82:	4313      	orrs	r3, r2
 8014a84:	630b      	str	r3, [r1, #48]	@ 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Disable PLLFRACN . */
        __HAL_RCC_PLLFRACN_DISABLE();
 8014a86:	4b22      	ldr	r3, [pc, #136]	@ (8014b10 <HAL_RCC_OscConfig+0x76c>)
 8014a88:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8014a8a:	4a21      	ldr	r2, [pc, #132]	@ (8014b10 <HAL_RCC_OscConfig+0x76c>)
 8014a8c:	f023 0301 	bic.w	r3, r3, #1
 8014a90:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Configure PLL PLL1FRACN */
        __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8014a92:	4b1f      	ldr	r3, [pc, #124]	@ (8014b10 <HAL_RCC_OscConfig+0x76c>)
 8014a94:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8014a96:	4b21      	ldr	r3, [pc, #132]	@ (8014b1c <HAL_RCC_OscConfig+0x778>)
 8014a98:	4013      	ands	r3, r2
 8014a9a:	687a      	ldr	r2, [r7, #4]
 8014a9c:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 8014a9e:	00d2      	lsls	r2, r2, #3
 8014aa0:	491b      	ldr	r1, [pc, #108]	@ (8014b10 <HAL_RCC_OscConfig+0x76c>)
 8014aa2:	4313      	orrs	r3, r2
 8014aa4:	634b      	str	r3, [r1, #52]	@ 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 8014aa6:	4b1a      	ldr	r3, [pc, #104]	@ (8014b10 <HAL_RCC_OscConfig+0x76c>)
 8014aa8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8014aaa:	f023 020c 	bic.w	r2, r3, #12
 8014aae:	687b      	ldr	r3, [r7, #4]
 8014ab0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8014ab2:	4917      	ldr	r1, [pc, #92]	@ (8014b10 <HAL_RCC_OscConfig+0x76c>)
 8014ab4:	4313      	orrs	r3, r2
 8014ab6:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 8014ab8:	4b15      	ldr	r3, [pc, #84]	@ (8014b10 <HAL_RCC_OscConfig+0x76c>)
 8014aba:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8014abc:	f023 0202 	bic.w	r2, r3, #2
 8014ac0:	687b      	ldr	r3, [r7, #4]
 8014ac2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8014ac4:	4912      	ldr	r1, [pc, #72]	@ (8014b10 <HAL_RCC_OscConfig+0x76c>)
 8014ac6:	4313      	orrs	r3, r2
 8014ac8:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8014aca:	4b11      	ldr	r3, [pc, #68]	@ (8014b10 <HAL_RCC_OscConfig+0x76c>)
 8014acc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8014ace:	4a10      	ldr	r2, [pc, #64]	@ (8014b10 <HAL_RCC_OscConfig+0x76c>)
 8014ad0:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8014ad4:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1Q Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8014ad6:	4b0e      	ldr	r3, [pc, #56]	@ (8014b10 <HAL_RCC_OscConfig+0x76c>)
 8014ad8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8014ada:	4a0d      	ldr	r2, [pc, #52]	@ (8014b10 <HAL_RCC_OscConfig+0x76c>)
 8014adc:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8014ae0:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1R  Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 8014ae2:	4b0b      	ldr	r3, [pc, #44]	@ (8014b10 <HAL_RCC_OscConfig+0x76c>)
 8014ae4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8014ae6:	4a0a      	ldr	r2, [pc, #40]	@ (8014b10 <HAL_RCC_OscConfig+0x76c>)
 8014ae8:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8014aec:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1FRACN . */
        __HAL_RCC_PLLFRACN_ENABLE();
 8014aee:	4b08      	ldr	r3, [pc, #32]	@ (8014b10 <HAL_RCC_OscConfig+0x76c>)
 8014af0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8014af2:	4a07      	ldr	r2, [pc, #28]	@ (8014b10 <HAL_RCC_OscConfig+0x76c>)
 8014af4:	f043 0301 	orr.w	r3, r3, #1
 8014af8:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8014afa:	4b05      	ldr	r3, [pc, #20]	@ (8014b10 <HAL_RCC_OscConfig+0x76c>)
 8014afc:	681b      	ldr	r3, [r3, #0]
 8014afe:	4a04      	ldr	r2, [pc, #16]	@ (8014b10 <HAL_RCC_OscConfig+0x76c>)
 8014b00:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8014b04:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8014b06:	f7fc fa83 	bl	8011010 <HAL_GetTick>
 8014b0a:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8014b0c:	e011      	b.n	8014b32 <HAL_RCC_OscConfig+0x78e>
 8014b0e:	bf00      	nop
 8014b10:	58024400 	.word	0x58024400
 8014b14:	58024800 	.word	0x58024800
 8014b18:	fffffc0c 	.word	0xfffffc0c
 8014b1c:	ffff0007 	.word	0xffff0007
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8014b20:	f7fc fa76 	bl	8011010 <HAL_GetTick>
 8014b24:	4602      	mov	r2, r0
 8014b26:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8014b28:	1ad3      	subs	r3, r2, r3
 8014b2a:	2b02      	cmp	r3, #2
 8014b2c:	d901      	bls.n	8014b32 <HAL_RCC_OscConfig+0x78e>
          {
            return HAL_TIMEOUT;
 8014b2e:	2303      	movs	r3, #3
 8014b30:	e08a      	b.n	8014c48 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8014b32:	4b47      	ldr	r3, [pc, #284]	@ (8014c50 <HAL_RCC_OscConfig+0x8ac>)
 8014b34:	681b      	ldr	r3, [r3, #0]
 8014b36:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8014b3a:	2b00      	cmp	r3, #0
 8014b3c:	d0f0      	beq.n	8014b20 <HAL_RCC_OscConfig+0x77c>
 8014b3e:	e082      	b.n	8014c46 <HAL_RCC_OscConfig+0x8a2>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8014b40:	4b43      	ldr	r3, [pc, #268]	@ (8014c50 <HAL_RCC_OscConfig+0x8ac>)
 8014b42:	681b      	ldr	r3, [r3, #0]
 8014b44:	4a42      	ldr	r2, [pc, #264]	@ (8014c50 <HAL_RCC_OscConfig+0x8ac>)
 8014b46:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8014b4a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8014b4c:	f7fc fa60 	bl	8011010 <HAL_GetTick>
 8014b50:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8014b52:	e008      	b.n	8014b66 <HAL_RCC_OscConfig+0x7c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8014b54:	f7fc fa5c 	bl	8011010 <HAL_GetTick>
 8014b58:	4602      	mov	r2, r0
 8014b5a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8014b5c:	1ad3      	subs	r3, r2, r3
 8014b5e:	2b02      	cmp	r3, #2
 8014b60:	d901      	bls.n	8014b66 <HAL_RCC_OscConfig+0x7c2>
          {
            return HAL_TIMEOUT;
 8014b62:	2303      	movs	r3, #3
 8014b64:	e070      	b.n	8014c48 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8014b66:	4b3a      	ldr	r3, [pc, #232]	@ (8014c50 <HAL_RCC_OscConfig+0x8ac>)
 8014b68:	681b      	ldr	r3, [r3, #0]
 8014b6a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8014b6e:	2b00      	cmp	r3, #0
 8014b70:	d1f0      	bne.n	8014b54 <HAL_RCC_OscConfig+0x7b0>
 8014b72:	e068      	b.n	8014c46 <HAL_RCC_OscConfig+0x8a2>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 8014b74:	4b36      	ldr	r3, [pc, #216]	@ (8014c50 <HAL_RCC_OscConfig+0x8ac>)
 8014b76:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8014b78:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 8014b7a:	4b35      	ldr	r3, [pc, #212]	@ (8014c50 <HAL_RCC_OscConfig+0x8ac>)
 8014b7c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8014b7e:	60fb      	str	r3, [r7, #12]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8014b80:	687b      	ldr	r3, [r7, #4]
 8014b82:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8014b84:	2b01      	cmp	r3, #1
 8014b86:	d031      	beq.n	8014bec <HAL_RCC_OscConfig+0x848>
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8014b88:	693b      	ldr	r3, [r7, #16]
 8014b8a:	f003 0203 	and.w	r2, r3, #3
 8014b8e:	687b      	ldr	r3, [r7, #4]
 8014b90:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8014b92:	429a      	cmp	r2, r3
 8014b94:	d12a      	bne.n	8014bec <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8014b96:	693b      	ldr	r3, [r7, #16]
 8014b98:	091b      	lsrs	r3, r3, #4
 8014b9a:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8014b9e:	687b      	ldr	r3, [r7, #4]
 8014ba0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8014ba2:	429a      	cmp	r2, r3
 8014ba4:	d122      	bne.n	8014bec <HAL_RCC_OscConfig+0x848>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8014ba6:	68fb      	ldr	r3, [r7, #12]
 8014ba8:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8014bac:	687b      	ldr	r3, [r7, #4]
 8014bae:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8014bb0:	3b01      	subs	r3, #1
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8014bb2:	429a      	cmp	r2, r3
 8014bb4:	d11a      	bne.n	8014bec <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8014bb6:	68fb      	ldr	r3, [r7, #12]
 8014bb8:	0a5b      	lsrs	r3, r3, #9
 8014bba:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8014bbe:	687b      	ldr	r3, [r7, #4]
 8014bc0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8014bc2:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8014bc4:	429a      	cmp	r2, r3
 8014bc6:	d111      	bne.n	8014bec <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8014bc8:	68fb      	ldr	r3, [r7, #12]
 8014bca:	0c1b      	lsrs	r3, r3, #16
 8014bcc:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8014bd0:	687b      	ldr	r3, [r7, #4]
 8014bd2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8014bd4:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8014bd6:	429a      	cmp	r2, r3
 8014bd8:	d108      	bne.n	8014bec <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 8014bda:	68fb      	ldr	r3, [r7, #12]
 8014bdc:	0e1b      	lsrs	r3, r3, #24
 8014bde:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8014be2:	687b      	ldr	r3, [r7, #4]
 8014be4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8014be6:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8014be8:	429a      	cmp	r2, r3
 8014bea:	d001      	beq.n	8014bf0 <HAL_RCC_OscConfig+0x84c>
      {
        return HAL_ERROR;
 8014bec:	2301      	movs	r3, #1
 8014bee:	e02b      	b.n	8014c48 <HAL_RCC_OscConfig+0x8a4>
      }
      else
      {
        /* Check if only fractional part needs to be updated  */
        temp1_pllckcfg = ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> RCC_PLL1FRACR_FRACN1_Pos);
 8014bf0:	4b17      	ldr	r3, [pc, #92]	@ (8014c50 <HAL_RCC_OscConfig+0x8ac>)
 8014bf2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8014bf4:	08db      	lsrs	r3, r3, #3
 8014bf6:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8014bfa:	613b      	str	r3, [r7, #16]
        if (RCC_OscInitStruct->PLL.PLLFRACN != temp1_pllckcfg)
 8014bfc:	687b      	ldr	r3, [r7, #4]
 8014bfe:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8014c00:	693a      	ldr	r2, [r7, #16]
 8014c02:	429a      	cmp	r2, r3
 8014c04:	d01f      	beq.n	8014c46 <HAL_RCC_OscConfig+0x8a2>
        {
          assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));
          /* Disable PLL1FRACEN */
          __HAL_RCC_PLLFRACN_DISABLE();
 8014c06:	4b12      	ldr	r3, [pc, #72]	@ (8014c50 <HAL_RCC_OscConfig+0x8ac>)
 8014c08:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8014c0a:	4a11      	ldr	r2, [pc, #68]	@ (8014c50 <HAL_RCC_OscConfig+0x8ac>)
 8014c0c:	f023 0301 	bic.w	r3, r3, #1
 8014c10:	62d3      	str	r3, [r2, #44]	@ 0x2c
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8014c12:	f7fc f9fd 	bl	8011010 <HAL_GetTick>
 8014c16:	6278      	str	r0, [r7, #36]	@ 0x24
          /* Wait at least 2 CK_REF (PLL input source divided by M) period to make sure next latched value will be taken into account. */
          while ((HAL_GetTick() - tickstart) < PLL_FRAC_TIMEOUT_VALUE)
 8014c18:	bf00      	nop
 8014c1a:	f7fc f9f9 	bl	8011010 <HAL_GetTick>
 8014c1e:	4602      	mov	r2, r0
 8014c20:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8014c22:	4293      	cmp	r3, r2
 8014c24:	d0f9      	beq.n	8014c1a <HAL_RCC_OscConfig+0x876>
          {
          }
          /* Configure PLL1 PLL1FRACN */
          __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8014c26:	4b0a      	ldr	r3, [pc, #40]	@ (8014c50 <HAL_RCC_OscConfig+0x8ac>)
 8014c28:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8014c2a:	4b0a      	ldr	r3, [pc, #40]	@ (8014c54 <HAL_RCC_OscConfig+0x8b0>)
 8014c2c:	4013      	ands	r3, r2
 8014c2e:	687a      	ldr	r2, [r7, #4]
 8014c30:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 8014c32:	00d2      	lsls	r2, r2, #3
 8014c34:	4906      	ldr	r1, [pc, #24]	@ (8014c50 <HAL_RCC_OscConfig+0x8ac>)
 8014c36:	4313      	orrs	r3, r2
 8014c38:	634b      	str	r3, [r1, #52]	@ 0x34
          /* Enable PLL1FRACEN to latch new value. */
          __HAL_RCC_PLLFRACN_ENABLE();
 8014c3a:	4b05      	ldr	r3, [pc, #20]	@ (8014c50 <HAL_RCC_OscConfig+0x8ac>)
 8014c3c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8014c3e:	4a04      	ldr	r2, [pc, #16]	@ (8014c50 <HAL_RCC_OscConfig+0x8ac>)
 8014c40:	f043 0301 	orr.w	r3, r3, #1
 8014c44:	62d3      	str	r3, [r2, #44]	@ 0x2c
        }
      }
    }
  }
  return HAL_OK;
 8014c46:	2300      	movs	r3, #0
}
 8014c48:	4618      	mov	r0, r3
 8014c4a:	3730      	adds	r7, #48	@ 0x30
 8014c4c:	46bd      	mov	sp, r7
 8014c4e:	bd80      	pop	{r7, pc}
 8014c50:	58024400 	.word	0x58024400
 8014c54:	ffff0007 	.word	0xffff0007

08014c58 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8014c58:	b580      	push	{r7, lr}
 8014c5a:	b086      	sub	sp, #24
 8014c5c:	af00      	add	r7, sp, #0
 8014c5e:	6078      	str	r0, [r7, #4]
 8014c60:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8014c62:	687b      	ldr	r3, [r7, #4]
 8014c64:	2b00      	cmp	r3, #0
 8014c66:	d101      	bne.n	8014c6c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8014c68:	2301      	movs	r3, #1
 8014c6a:	e19c      	b.n	8014fa6 <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8014c6c:	4b8a      	ldr	r3, [pc, #552]	@ (8014e98 <HAL_RCC_ClockConfig+0x240>)
 8014c6e:	681b      	ldr	r3, [r3, #0]
 8014c70:	f003 030f 	and.w	r3, r3, #15
 8014c74:	683a      	ldr	r2, [r7, #0]
 8014c76:	429a      	cmp	r2, r3
 8014c78:	d910      	bls.n	8014c9c <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8014c7a:	4b87      	ldr	r3, [pc, #540]	@ (8014e98 <HAL_RCC_ClockConfig+0x240>)
 8014c7c:	681b      	ldr	r3, [r3, #0]
 8014c7e:	f023 020f 	bic.w	r2, r3, #15
 8014c82:	4985      	ldr	r1, [pc, #532]	@ (8014e98 <HAL_RCC_ClockConfig+0x240>)
 8014c84:	683b      	ldr	r3, [r7, #0]
 8014c86:	4313      	orrs	r3, r2
 8014c88:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8014c8a:	4b83      	ldr	r3, [pc, #524]	@ (8014e98 <HAL_RCC_ClockConfig+0x240>)
 8014c8c:	681b      	ldr	r3, [r3, #0]
 8014c8e:	f003 030f 	and.w	r3, r3, #15
 8014c92:	683a      	ldr	r2, [r7, #0]
 8014c94:	429a      	cmp	r2, r3
 8014c96:	d001      	beq.n	8014c9c <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8014c98:	2301      	movs	r3, #1
 8014c9a:	e184      	b.n	8014fa6 <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8014c9c:	687b      	ldr	r3, [r7, #4]
 8014c9e:	681b      	ldr	r3, [r3, #0]
 8014ca0:	f003 0304 	and.w	r3, r3, #4
 8014ca4:	2b00      	cmp	r3, #0
 8014ca6:	d010      	beq.n	8014cca <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8014ca8:	687b      	ldr	r3, [r7, #4]
 8014caa:	691a      	ldr	r2, [r3, #16]
 8014cac:	4b7b      	ldr	r3, [pc, #492]	@ (8014e9c <HAL_RCC_ClockConfig+0x244>)
 8014cae:	699b      	ldr	r3, [r3, #24]
 8014cb0:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8014cb4:	429a      	cmp	r2, r3
 8014cb6:	d908      	bls.n	8014cca <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8014cb8:	4b78      	ldr	r3, [pc, #480]	@ (8014e9c <HAL_RCC_ClockConfig+0x244>)
 8014cba:	699b      	ldr	r3, [r3, #24]
 8014cbc:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8014cc0:	687b      	ldr	r3, [r7, #4]
 8014cc2:	691b      	ldr	r3, [r3, #16]
 8014cc4:	4975      	ldr	r1, [pc, #468]	@ (8014e9c <HAL_RCC_ClockConfig+0x244>)
 8014cc6:	4313      	orrs	r3, r2
 8014cc8:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8014cca:	687b      	ldr	r3, [r7, #4]
 8014ccc:	681b      	ldr	r3, [r3, #0]
 8014cce:	f003 0308 	and.w	r3, r3, #8
 8014cd2:	2b00      	cmp	r3, #0
 8014cd4:	d010      	beq.n	8014cf8 <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8014cd6:	687b      	ldr	r3, [r7, #4]
 8014cd8:	695a      	ldr	r2, [r3, #20]
 8014cda:	4b70      	ldr	r3, [pc, #448]	@ (8014e9c <HAL_RCC_ClockConfig+0x244>)
 8014cdc:	69db      	ldr	r3, [r3, #28]
 8014cde:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8014ce2:	429a      	cmp	r2, r3
 8014ce4:	d908      	bls.n	8014cf8 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8014ce6:	4b6d      	ldr	r3, [pc, #436]	@ (8014e9c <HAL_RCC_ClockConfig+0x244>)
 8014ce8:	69db      	ldr	r3, [r3, #28]
 8014cea:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8014cee:	687b      	ldr	r3, [r7, #4]
 8014cf0:	695b      	ldr	r3, [r3, #20]
 8014cf2:	496a      	ldr	r1, [pc, #424]	@ (8014e9c <HAL_RCC_ClockConfig+0x244>)
 8014cf4:	4313      	orrs	r3, r2
 8014cf6:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
    }
#endif
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8014cf8:	687b      	ldr	r3, [r7, #4]
 8014cfa:	681b      	ldr	r3, [r3, #0]
 8014cfc:	f003 0310 	and.w	r3, r3, #16
 8014d00:	2b00      	cmp	r3, #0
 8014d02:	d010      	beq.n	8014d26 <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8014d04:	687b      	ldr	r3, [r7, #4]
 8014d06:	699a      	ldr	r2, [r3, #24]
 8014d08:	4b64      	ldr	r3, [pc, #400]	@ (8014e9c <HAL_RCC_ClockConfig+0x244>)
 8014d0a:	69db      	ldr	r3, [r3, #28]
 8014d0c:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8014d10:	429a      	cmp	r2, r3
 8014d12:	d908      	bls.n	8014d26 <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8014d14:	4b61      	ldr	r3, [pc, #388]	@ (8014e9c <HAL_RCC_ClockConfig+0x244>)
 8014d16:	69db      	ldr	r3, [r3, #28]
 8014d18:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8014d1c:	687b      	ldr	r3, [r7, #4]
 8014d1e:	699b      	ldr	r3, [r3, #24]
 8014d20:	495e      	ldr	r1, [pc, #376]	@ (8014e9c <HAL_RCC_ClockConfig+0x244>)
 8014d22:	4313      	orrs	r3, r2
 8014d24:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8014d26:	687b      	ldr	r3, [r7, #4]
 8014d28:	681b      	ldr	r3, [r3, #0]
 8014d2a:	f003 0320 	and.w	r3, r3, #32
 8014d2e:	2b00      	cmp	r3, #0
 8014d30:	d010      	beq.n	8014d54 <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8014d32:	687b      	ldr	r3, [r7, #4]
 8014d34:	69da      	ldr	r2, [r3, #28]
 8014d36:	4b59      	ldr	r3, [pc, #356]	@ (8014e9c <HAL_RCC_ClockConfig+0x244>)
 8014d38:	6a1b      	ldr	r3, [r3, #32]
 8014d3a:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8014d3e:	429a      	cmp	r2, r3
 8014d40:	d908      	bls.n	8014d54 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 8014d42:	4b56      	ldr	r3, [pc, #344]	@ (8014e9c <HAL_RCC_ClockConfig+0x244>)
 8014d44:	6a1b      	ldr	r3, [r3, #32]
 8014d46:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8014d4a:	687b      	ldr	r3, [r7, #4]
 8014d4c:	69db      	ldr	r3, [r3, #28]
 8014d4e:	4953      	ldr	r1, [pc, #332]	@ (8014e9c <HAL_RCC_ClockConfig+0x244>)
 8014d50:	4313      	orrs	r3, r2
 8014d52:	620b      	str	r3, [r1, #32]
    }
#endif
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8014d54:	687b      	ldr	r3, [r7, #4]
 8014d56:	681b      	ldr	r3, [r3, #0]
 8014d58:	f003 0302 	and.w	r3, r3, #2
 8014d5c:	2b00      	cmp	r3, #0
 8014d5e:	d010      	beq.n	8014d82 <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8014d60:	687b      	ldr	r3, [r7, #4]
 8014d62:	68da      	ldr	r2, [r3, #12]
 8014d64:	4b4d      	ldr	r3, [pc, #308]	@ (8014e9c <HAL_RCC_ClockConfig+0x244>)
 8014d66:	699b      	ldr	r3, [r3, #24]
 8014d68:	f003 030f 	and.w	r3, r3, #15
 8014d6c:	429a      	cmp	r2, r3
 8014d6e:	d908      	bls.n	8014d82 <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8014d70:	4b4a      	ldr	r3, [pc, #296]	@ (8014e9c <HAL_RCC_ClockConfig+0x244>)
 8014d72:	699b      	ldr	r3, [r3, #24]
 8014d74:	f023 020f 	bic.w	r2, r3, #15
 8014d78:	687b      	ldr	r3, [r7, #4]
 8014d7a:	68db      	ldr	r3, [r3, #12]
 8014d7c:	4947      	ldr	r1, [pc, #284]	@ (8014e9c <HAL_RCC_ClockConfig+0x244>)
 8014d7e:	4313      	orrs	r3, r2
 8014d80:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*------------------------- SYSCLK Configuration -------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8014d82:	687b      	ldr	r3, [r7, #4]
 8014d84:	681b      	ldr	r3, [r3, #0]
 8014d86:	f003 0301 	and.w	r3, r3, #1
 8014d8a:	2b00      	cmp	r3, #0
 8014d8c:	d055      	beq.n	8014e3a <HAL_RCC_ClockConfig+0x1e2>
  {
    assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
    MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 8014d8e:	4b43      	ldr	r3, [pc, #268]	@ (8014e9c <HAL_RCC_ClockConfig+0x244>)
 8014d90:	699b      	ldr	r3, [r3, #24]
 8014d92:	f423 6270 	bic.w	r2, r3, #3840	@ 0xf00
 8014d96:	687b      	ldr	r3, [r7, #4]
 8014d98:	689b      	ldr	r3, [r3, #8]
 8014d9a:	4940      	ldr	r1, [pc, #256]	@ (8014e9c <HAL_RCC_ClockConfig+0x244>)
 8014d9c:	4313      	orrs	r3, r2
 8014d9e:	618b      	str	r3, [r1, #24]
#else
    MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8014da0:	687b      	ldr	r3, [r7, #4]
 8014da2:	685b      	ldr	r3, [r3, #4]
 8014da4:	2b02      	cmp	r3, #2
 8014da6:	d107      	bne.n	8014db8 <HAL_RCC_ClockConfig+0x160>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8014da8:	4b3c      	ldr	r3, [pc, #240]	@ (8014e9c <HAL_RCC_ClockConfig+0x244>)
 8014daa:	681b      	ldr	r3, [r3, #0]
 8014dac:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8014db0:	2b00      	cmp	r3, #0
 8014db2:	d121      	bne.n	8014df8 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8014db4:	2301      	movs	r3, #1
 8014db6:	e0f6      	b.n	8014fa6 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8014db8:	687b      	ldr	r3, [r7, #4]
 8014dba:	685b      	ldr	r3, [r3, #4]
 8014dbc:	2b03      	cmp	r3, #3
 8014dbe:	d107      	bne.n	8014dd0 <HAL_RCC_ClockConfig+0x178>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8014dc0:	4b36      	ldr	r3, [pc, #216]	@ (8014e9c <HAL_RCC_ClockConfig+0x244>)
 8014dc2:	681b      	ldr	r3, [r3, #0]
 8014dc4:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8014dc8:	2b00      	cmp	r3, #0
 8014dca:	d115      	bne.n	8014df8 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8014dcc:	2301      	movs	r3, #1
 8014dce:	e0ea      	b.n	8014fa6 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* CSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 8014dd0:	687b      	ldr	r3, [r7, #4]
 8014dd2:	685b      	ldr	r3, [r3, #4]
 8014dd4:	2b01      	cmp	r3, #1
 8014dd6:	d107      	bne.n	8014de8 <HAL_RCC_ClockConfig+0x190>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8014dd8:	4b30      	ldr	r3, [pc, #192]	@ (8014e9c <HAL_RCC_ClockConfig+0x244>)
 8014dda:	681b      	ldr	r3, [r3, #0]
 8014ddc:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8014de0:	2b00      	cmp	r3, #0
 8014de2:	d109      	bne.n	8014df8 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8014de4:	2301      	movs	r3, #1
 8014de6:	e0de      	b.n	8014fa6 <HAL_RCC_ClockConfig+0x34e>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8014de8:	4b2c      	ldr	r3, [pc, #176]	@ (8014e9c <HAL_RCC_ClockConfig+0x244>)
 8014dea:	681b      	ldr	r3, [r3, #0]
 8014dec:	f003 0304 	and.w	r3, r3, #4
 8014df0:	2b00      	cmp	r3, #0
 8014df2:	d101      	bne.n	8014df8 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8014df4:	2301      	movs	r3, #1
 8014df6:	e0d6      	b.n	8014fa6 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8014df8:	4b28      	ldr	r3, [pc, #160]	@ (8014e9c <HAL_RCC_ClockConfig+0x244>)
 8014dfa:	691b      	ldr	r3, [r3, #16]
 8014dfc:	f023 0207 	bic.w	r2, r3, #7
 8014e00:	687b      	ldr	r3, [r7, #4]
 8014e02:	685b      	ldr	r3, [r3, #4]
 8014e04:	4925      	ldr	r1, [pc, #148]	@ (8014e9c <HAL_RCC_ClockConfig+0x244>)
 8014e06:	4313      	orrs	r3, r2
 8014e08:	610b      	str	r3, [r1, #16]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8014e0a:	f7fc f901 	bl	8011010 <HAL_GetTick>
 8014e0e:	6178      	str	r0, [r7, #20]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8014e10:	e00a      	b.n	8014e28 <HAL_RCC_ClockConfig+0x1d0>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8014e12:	f7fc f8fd 	bl	8011010 <HAL_GetTick>
 8014e16:	4602      	mov	r2, r0
 8014e18:	697b      	ldr	r3, [r7, #20]
 8014e1a:	1ad3      	subs	r3, r2, r3
 8014e1c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8014e20:	4293      	cmp	r3, r2
 8014e22:	d901      	bls.n	8014e28 <HAL_RCC_ClockConfig+0x1d0>
      {
        return HAL_TIMEOUT;
 8014e24:	2303      	movs	r3, #3
 8014e26:	e0be      	b.n	8014fa6 <HAL_RCC_ClockConfig+0x34e>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8014e28:	4b1c      	ldr	r3, [pc, #112]	@ (8014e9c <HAL_RCC_ClockConfig+0x244>)
 8014e2a:	691b      	ldr	r3, [r3, #16]
 8014e2c:	f003 0238 	and.w	r2, r3, #56	@ 0x38
 8014e30:	687b      	ldr	r3, [r7, #4]
 8014e32:	685b      	ldr	r3, [r3, #4]
 8014e34:	00db      	lsls	r3, r3, #3
 8014e36:	429a      	cmp	r2, r3
 8014e38:	d1eb      	bne.n	8014e12 <HAL_RCC_ClockConfig+0x1ba>

  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8014e3a:	687b      	ldr	r3, [r7, #4]
 8014e3c:	681b      	ldr	r3, [r3, #0]
 8014e3e:	f003 0302 	and.w	r3, r3, #2
 8014e42:	2b00      	cmp	r3, #0
 8014e44:	d010      	beq.n	8014e68 <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8014e46:	687b      	ldr	r3, [r7, #4]
 8014e48:	68da      	ldr	r2, [r3, #12]
 8014e4a:	4b14      	ldr	r3, [pc, #80]	@ (8014e9c <HAL_RCC_ClockConfig+0x244>)
 8014e4c:	699b      	ldr	r3, [r3, #24]
 8014e4e:	f003 030f 	and.w	r3, r3, #15
 8014e52:	429a      	cmp	r2, r3
 8014e54:	d208      	bcs.n	8014e68 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8014e56:	4b11      	ldr	r3, [pc, #68]	@ (8014e9c <HAL_RCC_ClockConfig+0x244>)
 8014e58:	699b      	ldr	r3, [r3, #24]
 8014e5a:	f023 020f 	bic.w	r2, r3, #15
 8014e5e:	687b      	ldr	r3, [r7, #4]
 8014e60:	68db      	ldr	r3, [r3, #12]
 8014e62:	490e      	ldr	r1, [pc, #56]	@ (8014e9c <HAL_RCC_ClockConfig+0x244>)
 8014e64:	4313      	orrs	r3, r2
 8014e66:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8014e68:	4b0b      	ldr	r3, [pc, #44]	@ (8014e98 <HAL_RCC_ClockConfig+0x240>)
 8014e6a:	681b      	ldr	r3, [r3, #0]
 8014e6c:	f003 030f 	and.w	r3, r3, #15
 8014e70:	683a      	ldr	r2, [r7, #0]
 8014e72:	429a      	cmp	r2, r3
 8014e74:	d214      	bcs.n	8014ea0 <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8014e76:	4b08      	ldr	r3, [pc, #32]	@ (8014e98 <HAL_RCC_ClockConfig+0x240>)
 8014e78:	681b      	ldr	r3, [r3, #0]
 8014e7a:	f023 020f 	bic.w	r2, r3, #15
 8014e7e:	4906      	ldr	r1, [pc, #24]	@ (8014e98 <HAL_RCC_ClockConfig+0x240>)
 8014e80:	683b      	ldr	r3, [r7, #0]
 8014e82:	4313      	orrs	r3, r2
 8014e84:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8014e86:	4b04      	ldr	r3, [pc, #16]	@ (8014e98 <HAL_RCC_ClockConfig+0x240>)
 8014e88:	681b      	ldr	r3, [r3, #0]
 8014e8a:	f003 030f 	and.w	r3, r3, #15
 8014e8e:	683a      	ldr	r2, [r7, #0]
 8014e90:	429a      	cmp	r2, r3
 8014e92:	d005      	beq.n	8014ea0 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 8014e94:	2301      	movs	r3, #1
 8014e96:	e086      	b.n	8014fa6 <HAL_RCC_ClockConfig+0x34e>
 8014e98:	52002000 	.word	0x52002000
 8014e9c:	58024400 	.word	0x58024400
    }
  }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8014ea0:	687b      	ldr	r3, [r7, #4]
 8014ea2:	681b      	ldr	r3, [r3, #0]
 8014ea4:	f003 0304 	and.w	r3, r3, #4
 8014ea8:	2b00      	cmp	r3, #0
 8014eaa:	d010      	beq.n	8014ece <HAL_RCC_ClockConfig+0x276>
  {
#if defined(RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8014eac:	687b      	ldr	r3, [r7, #4]
 8014eae:	691a      	ldr	r2, [r3, #16]
 8014eb0:	4b3f      	ldr	r3, [pc, #252]	@ (8014fb0 <HAL_RCC_ClockConfig+0x358>)
 8014eb2:	699b      	ldr	r3, [r3, #24]
 8014eb4:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8014eb8:	429a      	cmp	r2, r3
 8014eba:	d208      	bcs.n	8014ece <HAL_RCC_ClockConfig+0x276>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8014ebc:	4b3c      	ldr	r3, [pc, #240]	@ (8014fb0 <HAL_RCC_ClockConfig+0x358>)
 8014ebe:	699b      	ldr	r3, [r3, #24]
 8014ec0:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8014ec4:	687b      	ldr	r3, [r7, #4]
 8014ec6:	691b      	ldr	r3, [r3, #16]
 8014ec8:	4939      	ldr	r1, [pc, #228]	@ (8014fb0 <HAL_RCC_ClockConfig+0x358>)
 8014eca:	4313      	orrs	r3, r2
 8014ecc:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8014ece:	687b      	ldr	r3, [r7, #4]
 8014ed0:	681b      	ldr	r3, [r3, #0]
 8014ed2:	f003 0308 	and.w	r3, r3, #8
 8014ed6:	2b00      	cmp	r3, #0
 8014ed8:	d010      	beq.n	8014efc <HAL_RCC_ClockConfig+0x2a4>
  {
#if defined(RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8014eda:	687b      	ldr	r3, [r7, #4]
 8014edc:	695a      	ldr	r2, [r3, #20]
 8014ede:	4b34      	ldr	r3, [pc, #208]	@ (8014fb0 <HAL_RCC_ClockConfig+0x358>)
 8014ee0:	69db      	ldr	r3, [r3, #28]
 8014ee2:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8014ee6:	429a      	cmp	r2, r3
 8014ee8:	d208      	bcs.n	8014efc <HAL_RCC_ClockConfig+0x2a4>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8014eea:	4b31      	ldr	r3, [pc, #196]	@ (8014fb0 <HAL_RCC_ClockConfig+0x358>)
 8014eec:	69db      	ldr	r3, [r3, #28]
 8014eee:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8014ef2:	687b      	ldr	r3, [r7, #4]
 8014ef4:	695b      	ldr	r3, [r3, #20]
 8014ef6:	492e      	ldr	r1, [pc, #184]	@ (8014fb0 <HAL_RCC_ClockConfig+0x358>)
 8014ef8:	4313      	orrs	r3, r2
 8014efa:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8014efc:	687b      	ldr	r3, [r7, #4]
 8014efe:	681b      	ldr	r3, [r3, #0]
 8014f00:	f003 0310 	and.w	r3, r3, #16
 8014f04:	2b00      	cmp	r3, #0
 8014f06:	d010      	beq.n	8014f2a <HAL_RCC_ClockConfig+0x2d2>
  {
#if defined (RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8014f08:	687b      	ldr	r3, [r7, #4]
 8014f0a:	699a      	ldr	r2, [r3, #24]
 8014f0c:	4b28      	ldr	r3, [pc, #160]	@ (8014fb0 <HAL_RCC_ClockConfig+0x358>)
 8014f0e:	69db      	ldr	r3, [r3, #28]
 8014f10:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8014f14:	429a      	cmp	r2, r3
 8014f16:	d208      	bcs.n	8014f2a <HAL_RCC_ClockConfig+0x2d2>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8014f18:	4b25      	ldr	r3, [pc, #148]	@ (8014fb0 <HAL_RCC_ClockConfig+0x358>)
 8014f1a:	69db      	ldr	r3, [r3, #28]
 8014f1c:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8014f20:	687b      	ldr	r3, [r7, #4]
 8014f22:	699b      	ldr	r3, [r3, #24]
 8014f24:	4922      	ldr	r1, [pc, #136]	@ (8014fb0 <HAL_RCC_ClockConfig+0x358>)
 8014f26:	4313      	orrs	r3, r2
 8014f28:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8014f2a:	687b      	ldr	r3, [r7, #4]
 8014f2c:	681b      	ldr	r3, [r3, #0]
 8014f2e:	f003 0320 	and.w	r3, r3, #32
 8014f32:	2b00      	cmp	r3, #0
 8014f34:	d010      	beq.n	8014f58 <HAL_RCC_ClockConfig+0x300>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8014f36:	687b      	ldr	r3, [r7, #4]
 8014f38:	69da      	ldr	r2, [r3, #28]
 8014f3a:	4b1d      	ldr	r3, [pc, #116]	@ (8014fb0 <HAL_RCC_ClockConfig+0x358>)
 8014f3c:	6a1b      	ldr	r3, [r3, #32]
 8014f3e:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8014f42:	429a      	cmp	r2, r3
 8014f44:	d208      	bcs.n	8014f58 <HAL_RCC_ClockConfig+0x300>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 8014f46:	4b1a      	ldr	r3, [pc, #104]	@ (8014fb0 <HAL_RCC_ClockConfig+0x358>)
 8014f48:	6a1b      	ldr	r3, [r3, #32]
 8014f4a:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8014f4e:	687b      	ldr	r3, [r7, #4]
 8014f50:	69db      	ldr	r3, [r3, #28]
 8014f52:	4917      	ldr	r1, [pc, #92]	@ (8014fb0 <HAL_RCC_ClockConfig+0x358>)
 8014f54:	4313      	orrs	r3, r2
 8014f56:	620b      	str	r3, [r1, #32]
#endif
  }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8014f58:	f000 f89e 	bl	8015098 <HAL_RCC_GetSysClockFreq>
 8014f5c:	4602      	mov	r2, r0
 8014f5e:	4b14      	ldr	r3, [pc, #80]	@ (8014fb0 <HAL_RCC_ClockConfig+0x358>)
 8014f60:	699b      	ldr	r3, [r3, #24]
 8014f62:	0a1b      	lsrs	r3, r3, #8
 8014f64:	f003 030f 	and.w	r3, r3, #15
 8014f68:	4912      	ldr	r1, [pc, #72]	@ (8014fb4 <HAL_RCC_ClockConfig+0x35c>)
 8014f6a:	5ccb      	ldrb	r3, [r1, r3]
 8014f6c:	f003 031f 	and.w	r3, r3, #31
 8014f70:	fa22 f303 	lsr.w	r3, r2, r3
 8014f74:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8014f76:	4b0e      	ldr	r3, [pc, #56]	@ (8014fb0 <HAL_RCC_ClockConfig+0x358>)
 8014f78:	699b      	ldr	r3, [r3, #24]
 8014f7a:	f003 030f 	and.w	r3, r3, #15
 8014f7e:	4a0d      	ldr	r2, [pc, #52]	@ (8014fb4 <HAL_RCC_ClockConfig+0x35c>)
 8014f80:	5cd3      	ldrb	r3, [r2, r3]
 8014f82:	f003 031f 	and.w	r3, r3, #31
 8014f86:	693a      	ldr	r2, [r7, #16]
 8014f88:	fa22 f303 	lsr.w	r3, r2, r3
 8014f8c:	4a0a      	ldr	r2, [pc, #40]	@ (8014fb8 <HAL_RCC_ClockConfig+0x360>)
 8014f8e:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8014f90:	4a0a      	ldr	r2, [pc, #40]	@ (8014fbc <HAL_RCC_ClockConfig+0x364>)
 8014f92:	693b      	ldr	r3, [r7, #16]
 8014f94:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick(uwTickPrio);
 8014f96:	4b0a      	ldr	r3, [pc, #40]	@ (8014fc0 <HAL_RCC_ClockConfig+0x368>)
 8014f98:	681b      	ldr	r3, [r3, #0]
 8014f9a:	4618      	mov	r0, r3
 8014f9c:	f7ec fab2 	bl	8001504 <HAL_InitTick>
 8014fa0:	4603      	mov	r3, r0
 8014fa2:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 8014fa4:	7bfb      	ldrb	r3, [r7, #15]
}
 8014fa6:	4618      	mov	r0, r3
 8014fa8:	3718      	adds	r7, #24
 8014faa:	46bd      	mov	sp, r7
 8014fac:	bd80      	pop	{r7, pc}
 8014fae:	bf00      	nop
 8014fb0:	58024400 	.word	0x58024400
 8014fb4:	0802d5d4 	.word	0x0802d5d4
 8014fb8:	2400001c 	.word	0x2400001c
 8014fbc:	24000018 	.word	0x24000018
 8014fc0:	24000050 	.word	0x24000050

08014fc4 <HAL_RCC_MCOConfig>:
  *          This parameter can be one of the following values:
  *            @arg RCC_MCODIV_1 up to RCC_MCODIV_15  : divider applied to MCOx clock
  * @retval None
  */
void HAL_RCC_MCOConfig(uint32_t RCC_MCOx, uint32_t RCC_MCOSource, uint32_t RCC_MCODiv)
{
 8014fc4:	b580      	push	{r7, lr}
 8014fc6:	b08c      	sub	sp, #48	@ 0x30
 8014fc8:	af00      	add	r7, sp, #0
 8014fca:	60f8      	str	r0, [r7, #12]
 8014fcc:	60b9      	str	r1, [r7, #8]
 8014fce:	607a      	str	r2, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct;
  /* Check the parameters */
  assert_param(IS_RCC_MCO(RCC_MCOx));
  assert_param(IS_RCC_MCODIV(RCC_MCODiv));
  /* RCC_MCO1 */
  if (RCC_MCOx == RCC_MCO1)
 8014fd0:	68fb      	ldr	r3, [r7, #12]
 8014fd2:	2b00      	cmp	r3, #0
 8014fd4:	d12a      	bne.n	801502c <HAL_RCC_MCOConfig+0x68>
  {
    assert_param(IS_RCC_MCO1SOURCE(RCC_MCOSource));

    /* MCO1 Clock Enable */
    MCO1_CLK_ENABLE();
 8014fd6:	4b2d      	ldr	r3, [pc, #180]	@ (801508c <HAL_RCC_MCOConfig+0xc8>)
 8014fd8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8014fdc:	4a2b      	ldr	r2, [pc, #172]	@ (801508c <HAL_RCC_MCOConfig+0xc8>)
 8014fde:	f043 0301 	orr.w	r3, r3, #1
 8014fe2:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8014fe6:	4b29      	ldr	r3, [pc, #164]	@ (801508c <HAL_RCC_MCOConfig+0xc8>)
 8014fe8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8014fec:	f003 0301 	and.w	r3, r3, #1
 8014ff0:	61bb      	str	r3, [r7, #24]
 8014ff2:	69bb      	ldr	r3, [r7, #24]

    /* Configure the MCO1 pin in alternate function mode */
    GPIO_InitStruct.Pin = MCO1_PIN;
 8014ff4:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8014ff8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8014ffa:	2302      	movs	r3, #2
 8014ffc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8014ffe:	2303      	movs	r3, #3
 8015000:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8015002:	2300      	movs	r3, #0
 8015004:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Alternate = GPIO_AF0_MCO;
 8015006:	2300      	movs	r3, #0
 8015008:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(MCO1_GPIO_PORT, &GPIO_InitStruct);
 801500a:	f107 031c 	add.w	r3, r7, #28
 801500e:	4619      	mov	r1, r3
 8015010:	481f      	ldr	r0, [pc, #124]	@ (8015090 <HAL_RCC_MCOConfig+0xcc>)
 8015012:	f7fc fc09 	bl	8011828 <HAL_GPIO_Init>

    /* Mask MCO1 and MCO1PRE[3:0] bits then Select MCO1 clock source and pre-scaler */
    MODIFY_REG(RCC->CFGR, (RCC_CFGR_MCO1 | RCC_CFGR_MCO1PRE), (RCC_MCOSource | RCC_MCODiv));
 8015016:	4b1d      	ldr	r3, [pc, #116]	@ (801508c <HAL_RCC_MCOConfig+0xc8>)
 8015018:	691b      	ldr	r3, [r3, #16]
 801501a:	f023 72fe 	bic.w	r2, r3, #33292288	@ 0x1fc0000
 801501e:	68b9      	ldr	r1, [r7, #8]
 8015020:	687b      	ldr	r3, [r7, #4]
 8015022:	430b      	orrs	r3, r1
 8015024:	4919      	ldr	r1, [pc, #100]	@ (801508c <HAL_RCC_MCOConfig+0xc8>)
 8015026:	4313      	orrs	r3, r2
 8015028:	610b      	str	r3, [r1, #16]
    HAL_GPIO_Init(MCO2_GPIO_PORT, &GPIO_InitStruct);

    /* Mask MCO2 and MCO2PRE[3:0] bits then Select MCO2 clock source and pre-scaler */
    MODIFY_REG(RCC->CFGR, (RCC_CFGR_MCO2 | RCC_CFGR_MCO2PRE), (RCC_MCOSource | (RCC_MCODiv << 7U)));
  }
}
 801502a:	e02a      	b.n	8015082 <HAL_RCC_MCOConfig+0xbe>
    MCO2_CLK_ENABLE();
 801502c:	4b17      	ldr	r3, [pc, #92]	@ (801508c <HAL_RCC_MCOConfig+0xc8>)
 801502e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8015032:	4a16      	ldr	r2, [pc, #88]	@ (801508c <HAL_RCC_MCOConfig+0xc8>)
 8015034:	f043 0304 	orr.w	r3, r3, #4
 8015038:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 801503c:	4b13      	ldr	r3, [pc, #76]	@ (801508c <HAL_RCC_MCOConfig+0xc8>)
 801503e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8015042:	f003 0304 	and.w	r3, r3, #4
 8015046:	617b      	str	r3, [r7, #20]
 8015048:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = MCO2_PIN;
 801504a:	f44f 7300 	mov.w	r3, #512	@ 0x200
 801504e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8015050:	2302      	movs	r3, #2
 8015052:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8015054:	2303      	movs	r3, #3
 8015056:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8015058:	2300      	movs	r3, #0
 801505a:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Alternate = GPIO_AF0_MCO;
 801505c:	2300      	movs	r3, #0
 801505e:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(MCO2_GPIO_PORT, &GPIO_InitStruct);
 8015060:	f107 031c 	add.w	r3, r7, #28
 8015064:	4619      	mov	r1, r3
 8015066:	480b      	ldr	r0, [pc, #44]	@ (8015094 <HAL_RCC_MCOConfig+0xd0>)
 8015068:	f7fc fbde 	bl	8011828 <HAL_GPIO_Init>
    MODIFY_REG(RCC->CFGR, (RCC_CFGR_MCO2 | RCC_CFGR_MCO2PRE), (RCC_MCOSource | (RCC_MCODiv << 7U)));
 801506c:	4b07      	ldr	r3, [pc, #28]	@ (801508c <HAL_RCC_MCOConfig+0xc8>)
 801506e:	691b      	ldr	r3, [r3, #16]
 8015070:	f023 427e 	bic.w	r2, r3, #4261412864	@ 0xfe000000
 8015074:	687b      	ldr	r3, [r7, #4]
 8015076:	01d9      	lsls	r1, r3, #7
 8015078:	68bb      	ldr	r3, [r7, #8]
 801507a:	430b      	orrs	r3, r1
 801507c:	4903      	ldr	r1, [pc, #12]	@ (801508c <HAL_RCC_MCOConfig+0xc8>)
 801507e:	4313      	orrs	r3, r2
 8015080:	610b      	str	r3, [r1, #16]
}
 8015082:	bf00      	nop
 8015084:	3730      	adds	r7, #48	@ 0x30
 8015086:	46bd      	mov	sp, r7
 8015088:	bd80      	pop	{r7, pc}
 801508a:	bf00      	nop
 801508c:	58024400 	.word	0x58024400
 8015090:	58020000 	.word	0x58020000
 8015094:	58020800 	.word	0x58020800

08015098 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8015098:	b480      	push	{r7}
 801509a:	b089      	sub	sp, #36	@ 0x24
 801509c:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 801509e:	4bb3      	ldr	r3, [pc, #716]	@ (801536c <HAL_RCC_GetSysClockFreq+0x2d4>)
 80150a0:	691b      	ldr	r3, [r3, #16]
 80150a2:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80150a6:	2b18      	cmp	r3, #24
 80150a8:	f200 8155 	bhi.w	8015356 <HAL_RCC_GetSysClockFreq+0x2be>
 80150ac:	a201      	add	r2, pc, #4	@ (adr r2, 80150b4 <HAL_RCC_GetSysClockFreq+0x1c>)
 80150ae:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80150b2:	bf00      	nop
 80150b4:	08015119 	.word	0x08015119
 80150b8:	08015357 	.word	0x08015357
 80150bc:	08015357 	.word	0x08015357
 80150c0:	08015357 	.word	0x08015357
 80150c4:	08015357 	.word	0x08015357
 80150c8:	08015357 	.word	0x08015357
 80150cc:	08015357 	.word	0x08015357
 80150d0:	08015357 	.word	0x08015357
 80150d4:	0801513f 	.word	0x0801513f
 80150d8:	08015357 	.word	0x08015357
 80150dc:	08015357 	.word	0x08015357
 80150e0:	08015357 	.word	0x08015357
 80150e4:	08015357 	.word	0x08015357
 80150e8:	08015357 	.word	0x08015357
 80150ec:	08015357 	.word	0x08015357
 80150f0:	08015357 	.word	0x08015357
 80150f4:	08015145 	.word	0x08015145
 80150f8:	08015357 	.word	0x08015357
 80150fc:	08015357 	.word	0x08015357
 8015100:	08015357 	.word	0x08015357
 8015104:	08015357 	.word	0x08015357
 8015108:	08015357 	.word	0x08015357
 801510c:	08015357 	.word	0x08015357
 8015110:	08015357 	.word	0x08015357
 8015114:	0801514b 	.word	0x0801514b
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8015118:	4b94      	ldr	r3, [pc, #592]	@ (801536c <HAL_RCC_GetSysClockFreq+0x2d4>)
 801511a:	681b      	ldr	r3, [r3, #0]
 801511c:	f003 0320 	and.w	r3, r3, #32
 8015120:	2b00      	cmp	r3, #0
 8015122:	d009      	beq.n	8015138 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8015124:	4b91      	ldr	r3, [pc, #580]	@ (801536c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8015126:	681b      	ldr	r3, [r3, #0]
 8015128:	08db      	lsrs	r3, r3, #3
 801512a:	f003 0303 	and.w	r3, r3, #3
 801512e:	4a90      	ldr	r2, [pc, #576]	@ (8015370 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8015130:	fa22 f303 	lsr.w	r3, r2, r3
 8015134:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

      break;
 8015136:	e111      	b.n	801535c <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 8015138:	4b8d      	ldr	r3, [pc, #564]	@ (8015370 <HAL_RCC_GetSysClockFreq+0x2d8>)
 801513a:	61bb      	str	r3, [r7, #24]
      break;
 801513c:	e10e      	b.n	801535c <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
      sysclockfreq = CSI_VALUE;
 801513e:	4b8d      	ldr	r3, [pc, #564]	@ (8015374 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8015140:	61bb      	str	r3, [r7, #24]
      break;
 8015142:	e10b      	b.n	801535c <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
      sysclockfreq = HSE_VALUE;
 8015144:	4b8c      	ldr	r3, [pc, #560]	@ (8015378 <HAL_RCC_GetSysClockFreq+0x2e0>)
 8015146:	61bb      	str	r3, [r7, #24]
      break;
 8015148:	e108      	b.n	801535c <HAL_RCC_GetSysClockFreq+0x2c4>
    case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR
      */
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 801514a:	4b88      	ldr	r3, [pc, #544]	@ (801536c <HAL_RCC_GetSysClockFreq+0x2d4>)
 801514c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 801514e:	f003 0303 	and.w	r3, r3, #3
 8015152:	617b      	str	r3, [r7, #20]
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
 8015154:	4b85      	ldr	r3, [pc, #532]	@ (801536c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8015156:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8015158:	091b      	lsrs	r3, r3, #4
 801515a:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 801515e:	613b      	str	r3, [r7, #16]
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
 8015160:	4b82      	ldr	r3, [pc, #520]	@ (801536c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8015162:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8015164:	f003 0301 	and.w	r3, r3, #1
 8015168:	60fb      	str	r3, [r7, #12]
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 801516a:	4b80      	ldr	r3, [pc, #512]	@ (801536c <HAL_RCC_GetSysClockFreq+0x2d4>)
 801516c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 801516e:	08db      	lsrs	r3, r3, #3
 8015170:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8015174:	68fa      	ldr	r2, [r7, #12]
 8015176:	fb02 f303 	mul.w	r3, r2, r3
 801517a:	ee07 3a90 	vmov	s15, r3
 801517e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8015182:	edc7 7a02 	vstr	s15, [r7, #8]

      if (pllm != 0U)
 8015186:	693b      	ldr	r3, [r7, #16]
 8015188:	2b00      	cmp	r3, #0
 801518a:	f000 80e1 	beq.w	8015350 <HAL_RCC_GetSysClockFreq+0x2b8>
 801518e:	697b      	ldr	r3, [r7, #20]
 8015190:	2b02      	cmp	r3, #2
 8015192:	f000 8083 	beq.w	801529c <HAL_RCC_GetSysClockFreq+0x204>
 8015196:	697b      	ldr	r3, [r7, #20]
 8015198:	2b02      	cmp	r3, #2
 801519a:	f200 80a1 	bhi.w	80152e0 <HAL_RCC_GetSysClockFreq+0x248>
 801519e:	697b      	ldr	r3, [r7, #20]
 80151a0:	2b00      	cmp	r3, #0
 80151a2:	d003      	beq.n	80151ac <HAL_RCC_GetSysClockFreq+0x114>
 80151a4:	697b      	ldr	r3, [r7, #20]
 80151a6:	2b01      	cmp	r3, #1
 80151a8:	d056      	beq.n	8015258 <HAL_RCC_GetSysClockFreq+0x1c0>
 80151aa:	e099      	b.n	80152e0 <HAL_RCC_GetSysClockFreq+0x248>
      {
        switch (pllsource)
        {
          case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

            if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80151ac:	4b6f      	ldr	r3, [pc, #444]	@ (801536c <HAL_RCC_GetSysClockFreq+0x2d4>)
 80151ae:	681b      	ldr	r3, [r3, #0]
 80151b0:	f003 0320 	and.w	r3, r3, #32
 80151b4:	2b00      	cmp	r3, #0
 80151b6:	d02d      	beq.n	8015214 <HAL_RCC_GetSysClockFreq+0x17c>
            {
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80151b8:	4b6c      	ldr	r3, [pc, #432]	@ (801536c <HAL_RCC_GetSysClockFreq+0x2d4>)
 80151ba:	681b      	ldr	r3, [r3, #0]
 80151bc:	08db      	lsrs	r3, r3, #3
 80151be:	f003 0303 	and.w	r3, r3, #3
 80151c2:	4a6b      	ldr	r2, [pc, #428]	@ (8015370 <HAL_RCC_GetSysClockFreq+0x2d8>)
 80151c4:	fa22 f303 	lsr.w	r3, r2, r3
 80151c8:	607b      	str	r3, [r7, #4]
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80151ca:	687b      	ldr	r3, [r7, #4]
 80151cc:	ee07 3a90 	vmov	s15, r3
 80151d0:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80151d4:	693b      	ldr	r3, [r7, #16]
 80151d6:	ee07 3a90 	vmov	s15, r3
 80151da:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80151de:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80151e2:	4b62      	ldr	r3, [pc, #392]	@ (801536c <HAL_RCC_GetSysClockFreq+0x2d4>)
 80151e4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80151e6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80151ea:	ee07 3a90 	vmov	s15, r3
 80151ee:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80151f2:	ed97 6a02 	vldr	s12, [r7, #8]
 80151f6:	eddf 5a61 	vldr	s11, [pc, #388]	@ 801537c <HAL_RCC_GetSysClockFreq+0x2e4>
 80151fa:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80151fe:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8015202:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8015206:	ee77 7aa6 	vadd.f32	s15, s15, s13
 801520a:	ee67 7a27 	vmul.f32	s15, s14, s15
 801520e:	edc7 7a07 	vstr	s15, [r7, #28]
            }
            else
            {
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
            }
            break;
 8015212:	e087      	b.n	8015324 <HAL_RCC_GetSysClockFreq+0x28c>
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8015214:	693b      	ldr	r3, [r7, #16]
 8015216:	ee07 3a90 	vmov	s15, r3
 801521a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 801521e:	eddf 6a58 	vldr	s13, [pc, #352]	@ 8015380 <HAL_RCC_GetSysClockFreq+0x2e8>
 8015222:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8015226:	4b51      	ldr	r3, [pc, #324]	@ (801536c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8015228:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 801522a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 801522e:	ee07 3a90 	vmov	s15, r3
 8015232:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8015236:	ed97 6a02 	vldr	s12, [r7, #8]
 801523a:	eddf 5a50 	vldr	s11, [pc, #320]	@ 801537c <HAL_RCC_GetSysClockFreq+0x2e4>
 801523e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8015242:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8015246:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 801524a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 801524e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8015252:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8015256:	e065      	b.n	8015324 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8015258:	693b      	ldr	r3, [r7, #16]
 801525a:	ee07 3a90 	vmov	s15, r3
 801525e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8015262:	eddf 6a48 	vldr	s13, [pc, #288]	@ 8015384 <HAL_RCC_GetSysClockFreq+0x2ec>
 8015266:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 801526a:	4b40      	ldr	r3, [pc, #256]	@ (801536c <HAL_RCC_GetSysClockFreq+0x2d4>)
 801526c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 801526e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8015272:	ee07 3a90 	vmov	s15, r3
 8015276:	eef8 6a67 	vcvt.f32.u32	s13, s15
 801527a:	ed97 6a02 	vldr	s12, [r7, #8]
 801527e:	eddf 5a3f 	vldr	s11, [pc, #252]	@ 801537c <HAL_RCC_GetSysClockFreq+0x2e4>
 8015282:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8015286:	ee76 7aa7 	vadd.f32	s15, s13, s15
 801528a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 801528e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8015292:	ee67 7a27 	vmul.f32	s15, s14, s15
 8015296:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 801529a:	e043      	b.n	8015324 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
            pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 801529c:	693b      	ldr	r3, [r7, #16]
 801529e:	ee07 3a90 	vmov	s15, r3
 80152a2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80152a6:	eddf 6a38 	vldr	s13, [pc, #224]	@ 8015388 <HAL_RCC_GetSysClockFreq+0x2f0>
 80152aa:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80152ae:	4b2f      	ldr	r3, [pc, #188]	@ (801536c <HAL_RCC_GetSysClockFreq+0x2d4>)
 80152b0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80152b2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80152b6:	ee07 3a90 	vmov	s15, r3
 80152ba:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80152be:	ed97 6a02 	vldr	s12, [r7, #8]
 80152c2:	eddf 5a2e 	vldr	s11, [pc, #184]	@ 801537c <HAL_RCC_GetSysClockFreq+0x2e4>
 80152c6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80152ca:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80152ce:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80152d2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80152d6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80152da:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 80152de:	e021      	b.n	8015324 <HAL_RCC_GetSysClockFreq+0x28c>

          default:
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80152e0:	693b      	ldr	r3, [r7, #16]
 80152e2:	ee07 3a90 	vmov	s15, r3
 80152e6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80152ea:	eddf 6a26 	vldr	s13, [pc, #152]	@ 8015384 <HAL_RCC_GetSysClockFreq+0x2ec>
 80152ee:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80152f2:	4b1e      	ldr	r3, [pc, #120]	@ (801536c <HAL_RCC_GetSysClockFreq+0x2d4>)
 80152f4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80152f6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80152fa:	ee07 3a90 	vmov	s15, r3
 80152fe:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8015302:	ed97 6a02 	vldr	s12, [r7, #8]
 8015306:	eddf 5a1d 	vldr	s11, [pc, #116]	@ 801537c <HAL_RCC_GetSysClockFreq+0x2e4>
 801530a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 801530e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8015312:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8015316:	ee77 7aa6 	vadd.f32	s15, s15, s13
 801531a:	ee67 7a27 	vmul.f32	s15, s14, s15
 801531e:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8015322:	bf00      	nop
        }
        pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9) + 1U) ;
 8015324:	4b11      	ldr	r3, [pc, #68]	@ (801536c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8015326:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8015328:	0a5b      	lsrs	r3, r3, #9
 801532a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 801532e:	3301      	adds	r3, #1
 8015330:	603b      	str	r3, [r7, #0]
        sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
 8015332:	683b      	ldr	r3, [r7, #0]
 8015334:	ee07 3a90 	vmov	s15, r3
 8015338:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 801533c:	edd7 6a07 	vldr	s13, [r7, #28]
 8015340:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8015344:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8015348:	ee17 3a90 	vmov	r3, s15
 801534c:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        sysclockfreq = 0U;
      }
      break;
 801534e:	e005      	b.n	801535c <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = 0U;
 8015350:	2300      	movs	r3, #0
 8015352:	61bb      	str	r3, [r7, #24]
      break;
 8015354:	e002      	b.n	801535c <HAL_RCC_GetSysClockFreq+0x2c4>

    default:
      sysclockfreq = CSI_VALUE;
 8015356:	4b07      	ldr	r3, [pc, #28]	@ (8015374 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8015358:	61bb      	str	r3, [r7, #24]
      break;
 801535a:	bf00      	nop
  }

  return sysclockfreq;
 801535c:	69bb      	ldr	r3, [r7, #24]
}
 801535e:	4618      	mov	r0, r3
 8015360:	3724      	adds	r7, #36	@ 0x24
 8015362:	46bd      	mov	sp, r7
 8015364:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015368:	4770      	bx	lr
 801536a:	bf00      	nop
 801536c:	58024400 	.word	0x58024400
 8015370:	03d09000 	.word	0x03d09000
 8015374:	003d0900 	.word	0x003d0900
 8015378:	017d7840 	.word	0x017d7840
 801537c:	46000000 	.word	0x46000000
 8015380:	4c742400 	.word	0x4c742400
 8015384:	4a742400 	.word	0x4a742400
 8015388:	4bbebc20 	.word	0x4bbebc20

0801538c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 801538c:	b580      	push	{r7, lr}
 801538e:	b082      	sub	sp, #8
 8015390:	af00      	add	r7, sp, #0
  uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 8015392:	f7ff fe81 	bl	8015098 <HAL_RCC_GetSysClockFreq>
 8015396:	4602      	mov	r2, r0
 8015398:	4b10      	ldr	r3, [pc, #64]	@ (80153dc <HAL_RCC_GetHCLKFreq+0x50>)
 801539a:	699b      	ldr	r3, [r3, #24]
 801539c:	0a1b      	lsrs	r3, r3, #8
 801539e:	f003 030f 	and.w	r3, r3, #15
 80153a2:	490f      	ldr	r1, [pc, #60]	@ (80153e0 <HAL_RCC_GetHCLKFreq+0x54>)
 80153a4:	5ccb      	ldrb	r3, [r1, r3]
 80153a6:	f003 031f 	and.w	r3, r3, #31
 80153aa:	fa22 f303 	lsr.w	r3, r2, r3
 80153ae:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 80153b0:	4b0a      	ldr	r3, [pc, #40]	@ (80153dc <HAL_RCC_GetHCLKFreq+0x50>)
 80153b2:	699b      	ldr	r3, [r3, #24]
 80153b4:	f003 030f 	and.w	r3, r3, #15
 80153b8:	4a09      	ldr	r2, [pc, #36]	@ (80153e0 <HAL_RCC_GetHCLKFreq+0x54>)
 80153ba:	5cd3      	ldrb	r3, [r2, r3]
 80153bc:	f003 031f 	and.w	r3, r3, #31
 80153c0:	687a      	ldr	r2, [r7, #4]
 80153c2:	fa22 f303 	lsr.w	r3, r2, r3
 80153c6:	4a07      	ldr	r2, [pc, #28]	@ (80153e4 <HAL_RCC_GetHCLKFreq+0x58>)
 80153c8:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 80153ca:	4a07      	ldr	r2, [pc, #28]	@ (80153e8 <HAL_RCC_GetHCLKFreq+0x5c>)
 80153cc:	687b      	ldr	r3, [r7, #4]
 80153ce:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 80153d0:	4b04      	ldr	r3, [pc, #16]	@ (80153e4 <HAL_RCC_GetHCLKFreq+0x58>)
 80153d2:	681b      	ldr	r3, [r3, #0]
}
 80153d4:	4618      	mov	r0, r3
 80153d6:	3708      	adds	r7, #8
 80153d8:	46bd      	mov	sp, r7
 80153da:	bd80      	pop	{r7, pc}
 80153dc:	58024400 	.word	0x58024400
 80153e0:	0802d5d4 	.word	0x0802d5d4
 80153e4:	2400001c 	.word	0x2400001c
 80153e8:	24000018 	.word	0x24000018

080153ec <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80153ec:	b580      	push	{r7, lr}
 80153ee:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1) >> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 80153f0:	f7ff ffcc 	bl	801538c <HAL_RCC_GetHCLKFreq>
 80153f4:	4602      	mov	r2, r0
 80153f6:	4b06      	ldr	r3, [pc, #24]	@ (8015410 <HAL_RCC_GetPCLK1Freq+0x24>)
 80153f8:	69db      	ldr	r3, [r3, #28]
 80153fa:	091b      	lsrs	r3, r3, #4
 80153fc:	f003 0307 	and.w	r3, r3, #7
 8015400:	4904      	ldr	r1, [pc, #16]	@ (8015414 <HAL_RCC_GetPCLK1Freq+0x28>)
 8015402:	5ccb      	ldrb	r3, [r1, r3]
 8015404:	f003 031f 	and.w	r3, r3, #31
 8015408:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1) >> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 801540c:	4618      	mov	r0, r3
 801540e:	bd80      	pop	{r7, pc}
 8015410:	58024400 	.word	0x58024400
 8015414:	0802d5d4 	.word	0x0802d5d4

08015418 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8015418:	b580      	push	{r7, lr}
 801541a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2) >> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 801541c:	f7ff ffb6 	bl	801538c <HAL_RCC_GetHCLKFreq>
 8015420:	4602      	mov	r2, r0
 8015422:	4b06      	ldr	r3, [pc, #24]	@ (801543c <HAL_RCC_GetPCLK2Freq+0x24>)
 8015424:	69db      	ldr	r3, [r3, #28]
 8015426:	0a1b      	lsrs	r3, r3, #8
 8015428:	f003 0307 	and.w	r3, r3, #7
 801542c:	4904      	ldr	r1, [pc, #16]	@ (8015440 <HAL_RCC_GetPCLK2Freq+0x28>)
 801542e:	5ccb      	ldrb	r3, [r1, r3]
 8015430:	f003 031f 	and.w	r3, r3, #31
 8015434:	fa22 f303 	lsr.w	r3, r2, r3
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2) >> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 8015438:	4618      	mov	r0, r3
 801543a:	bd80      	pop	{r7, pc}
 801543c:	58024400 	.word	0x58024400
 8015440:	0802d5d4 	.word	0x0802d5d4

08015444 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency: Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8015444:	b480      	push	{r7}
 8015446:	b083      	sub	sp, #12
 8015448:	af00      	add	r7, sp, #0
 801544a:	6078      	str	r0, [r7, #4]
 801544c:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_D1PCLK1 | RCC_CLOCKTYPE_PCLK1 |
 801544e:	687b      	ldr	r3, [r7, #4]
 8015450:	223f      	movs	r2, #63	@ 0x3f
 8015452:	601a      	str	r2, [r3, #0]
                                 RCC_CLOCKTYPE_PCLK2 |  RCC_CLOCKTYPE_D3PCLK1  ;

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8015454:	4b1a      	ldr	r3, [pc, #104]	@ (80154c0 <HAL_RCC_GetClockConfig+0x7c>)
 8015456:	691b      	ldr	r3, [r3, #16]
 8015458:	f003 0207 	and.w	r2, r3, #7
 801545c:	687b      	ldr	r3, [r7, #4]
 801545e:	605a      	str	r2, [r3, #4]

#if defined(RCC_D1CFGR_D1CPRE)
  /* Get the SYSCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKDivider = (uint32_t)(RCC->D1CFGR & RCC_D1CFGR_D1CPRE);
 8015460:	4b17      	ldr	r3, [pc, #92]	@ (80154c0 <HAL_RCC_GetClockConfig+0x7c>)
 8015462:	699b      	ldr	r3, [r3, #24]
 8015464:	f403 6270 	and.w	r2, r3, #3840	@ 0xf00
 8015468:	687b      	ldr	r3, [r7, #4]
 801546a:	609a      	str	r2, [r3, #8]

  /* Get the D1HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->D1CFGR & RCC_D1CFGR_HPRE);
 801546c:	4b14      	ldr	r3, [pc, #80]	@ (80154c0 <HAL_RCC_GetClockConfig+0x7c>)
 801546e:	699b      	ldr	r3, [r3, #24]
 8015470:	f003 020f 	and.w	r2, r3, #15
 8015474:	687b      	ldr	r3, [r7, #4]
 8015476:	60da      	str	r2, [r3, #12]

  /* Get the APB3 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB3CLKDivider = (uint32_t)(RCC->D1CFGR & RCC_D1CFGR_D1PPRE);
 8015478:	4b11      	ldr	r3, [pc, #68]	@ (80154c0 <HAL_RCC_GetClockConfig+0x7c>)
 801547a:	699b      	ldr	r3, [r3, #24]
 801547c:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 8015480:	687b      	ldr	r3, [r7, #4]
 8015482:	611a      	str	r2, [r3, #16]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1);
 8015484:	4b0e      	ldr	r3, [pc, #56]	@ (80154c0 <HAL_RCC_GetClockConfig+0x7c>)
 8015486:	69db      	ldr	r3, [r3, #28]
 8015488:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 801548c:	687b      	ldr	r3, [r7, #4]
 801548e:	615a      	str	r2, [r3, #20]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2);
 8015490:	4b0b      	ldr	r3, [pc, #44]	@ (80154c0 <HAL_RCC_GetClockConfig+0x7c>)
 8015492:	69db      	ldr	r3, [r3, #28]
 8015494:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 8015498:	687b      	ldr	r3, [r7, #4]
 801549a:	619a      	str	r2, [r3, #24]

  /* Get the APB4 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB4CLKDivider = (uint32_t)(RCC->D3CFGR & RCC_D3CFGR_D3PPRE);
 801549c:	4b08      	ldr	r3, [pc, #32]	@ (80154c0 <HAL_RCC_GetClockConfig+0x7c>)
 801549e:	6a1b      	ldr	r3, [r3, #32]
 80154a0:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 80154a4:	687b      	ldr	r3, [r7, #4]
 80154a6:	61da      	str	r2, [r3, #28]
  /* Get the APB4 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB4CLKDivider = (uint32_t)(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE);
#endif

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 80154a8:	4b06      	ldr	r3, [pc, #24]	@ (80154c4 <HAL_RCC_GetClockConfig+0x80>)
 80154aa:	681b      	ldr	r3, [r3, #0]
 80154ac:	f003 020f 	and.w	r2, r3, #15
 80154b0:	683b      	ldr	r3, [r7, #0]
 80154b2:	601a      	str	r2, [r3, #0]
}
 80154b4:	bf00      	nop
 80154b6:	370c      	adds	r7, #12
 80154b8:	46bd      	mov	sp, r7
 80154ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80154be:	4770      	bx	lr
 80154c0:	58024400 	.word	0x58024400
 80154c4:	52002000 	.word	0x52002000

080154c8 <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80154c8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80154cc:	b0ca      	sub	sp, #296	@ 0x128
 80154ce:	af00      	add	r7, sp, #0
 80154d0:	f8c7 0114 	str.w	r0, [r7, #276]	@ 0x114
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 80154d4:	2300      	movs	r3, #0
 80154d6:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80154da:	2300      	movs	r3, #0
 80154dc:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 80154e0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80154e4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80154e8:	f002 6400 	and.w	r4, r2, #134217728	@ 0x8000000
 80154ec:	2500      	movs	r5, #0
 80154ee:	ea54 0305 	orrs.w	r3, r4, r5
 80154f2:	d049      	beq.n	8015588 <HAL_RCCEx_PeriphCLKConfig+0xc0>
  {

    switch (PeriphClkInit->SpdifrxClockSelection)
 80154f4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80154f8:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80154fa:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 80154fe:	d02f      	beq.n	8015560 <HAL_RCCEx_PeriphCLKConfig+0x98>
 8015500:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8015504:	d828      	bhi.n	8015558 <HAL_RCCEx_PeriphCLKConfig+0x90>
 8015506:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 801550a:	d01a      	beq.n	8015542 <HAL_RCCEx_PeriphCLKConfig+0x7a>
 801550c:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8015510:	d822      	bhi.n	8015558 <HAL_RCCEx_PeriphCLKConfig+0x90>
 8015512:	2b00      	cmp	r3, #0
 8015514:	d003      	beq.n	801551e <HAL_RCCEx_PeriphCLKConfig+0x56>
 8015516:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 801551a:	d007      	beq.n	801552c <HAL_RCCEx_PeriphCLKConfig+0x64>
 801551c:	e01c      	b.n	8015558 <HAL_RCCEx_PeriphCLKConfig+0x90>
    {
      case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
        /* Enable PLL1Q Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 801551e:	4bb8      	ldr	r3, [pc, #736]	@ (8015800 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8015520:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8015522:	4ab7      	ldr	r2, [pc, #732]	@ (8015800 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8015524:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8015528:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 801552a:	e01a      	b.n	8015562 <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 801552c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8015530:	3308      	adds	r3, #8
 8015532:	2102      	movs	r1, #2
 8015534:	4618      	mov	r0, r3
 8015536:	f001 f9d1 	bl	80168dc <RCCEx_PLL2_Config>
 801553a:	4603      	mov	r3, r0
 801553c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8015540:	e00f      	b.n	8015562 <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8015542:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8015546:	3328      	adds	r3, #40	@ 0x28
 8015548:	2102      	movs	r1, #2
 801554a:	4618      	mov	r0, r3
 801554c:	f001 fa78 	bl	8016a40 <RCCEx_PLL3_Config>
 8015550:	4603      	mov	r3, r0
 8015552:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8015556:	e004      	b.n	8015562 <HAL_RCCEx_PeriphCLKConfig+0x9a>
        /* Internal OSC clock is used as source of SPDIFRX clock*/
        /* SPDIFRX clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8015558:	2301      	movs	r3, #1
 801555a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 801555e:	e000      	b.n	8015562 <HAL_RCCEx_PeriphCLKConfig+0x9a>
        break;
 8015560:	bf00      	nop
    }

    if (ret == HAL_OK)
 8015562:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8015566:	2b00      	cmp	r3, #0
 8015568:	d10a      	bne.n	8015580 <HAL_RCCEx_PeriphCLKConfig+0xb8>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 801556a:	4ba5      	ldr	r3, [pc, #660]	@ (8015800 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 801556c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 801556e:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 8015572:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8015576:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8015578:	4aa1      	ldr	r2, [pc, #644]	@ (8015800 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 801557a:	430b      	orrs	r3, r1
 801557c:	6513      	str	r3, [r2, #80]	@ 0x50
 801557e:	e003      	b.n	8015588 <HAL_RCCEx_PeriphCLKConfig+0xc0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8015580:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8015584:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8015588:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801558c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8015590:	f402 7880 	and.w	r8, r2, #256	@ 0x100
 8015594:	f04f 0900 	mov.w	r9, #0
 8015598:	ea58 0309 	orrs.w	r3, r8, r9
 801559c:	d047      	beq.n	801562e <HAL_RCCEx_PeriphCLKConfig+0x166>
  {
    switch (PeriphClkInit->Sai1ClockSelection)
 801559e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80155a2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80155a4:	2b04      	cmp	r3, #4
 80155a6:	d82a      	bhi.n	80155fe <HAL_RCCEx_PeriphCLKConfig+0x136>
 80155a8:	a201      	add	r2, pc, #4	@ (adr r2, 80155b0 <HAL_RCCEx_PeriphCLKConfig+0xe8>)
 80155aa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80155ae:	bf00      	nop
 80155b0:	080155c5 	.word	0x080155c5
 80155b4:	080155d3 	.word	0x080155d3
 80155b8:	080155e9 	.word	0x080155e9
 80155bc:	08015607 	.word	0x08015607
 80155c0:	08015607 	.word	0x08015607
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80155c4:	4b8e      	ldr	r3, [pc, #568]	@ (8015800 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80155c6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80155c8:	4a8d      	ldr	r2, [pc, #564]	@ (8015800 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80155ca:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80155ce:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 80155d0:	e01a      	b.n	8015608 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80155d2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80155d6:	3308      	adds	r3, #8
 80155d8:	2100      	movs	r1, #0
 80155da:	4618      	mov	r0, r3
 80155dc:	f001 f97e 	bl	80168dc <RCCEx_PLL2_Config>
 80155e0:	4603      	mov	r3, r0
 80155e2:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 80155e6:	e00f      	b.n	8015608 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 80155e8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80155ec:	3328      	adds	r3, #40	@ 0x28
 80155ee:	2100      	movs	r1, #0
 80155f0:	4618      	mov	r0, r3
 80155f2:	f001 fa25 	bl	8016a40 <RCCEx_PLL3_Config>
 80155f6:	4603      	mov	r3, r0
 80155f8:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 80155fc:	e004      	b.n	8015608 <HAL_RCCEx_PeriphCLKConfig+0x140>
        /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
        /* SAI1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80155fe:	2301      	movs	r3, #1
 8015600:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8015604:	e000      	b.n	8015608 <HAL_RCCEx_PeriphCLKConfig+0x140>
        break;
 8015606:	bf00      	nop
    }

    if (ret == HAL_OK)
 8015608:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 801560c:	2b00      	cmp	r3, #0
 801560e:	d10a      	bne.n	8015626 <HAL_RCCEx_PeriphCLKConfig+0x15e>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8015610:	4b7b      	ldr	r3, [pc, #492]	@ (8015800 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8015612:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8015614:	f023 0107 	bic.w	r1, r3, #7
 8015618:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801561c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 801561e:	4a78      	ldr	r2, [pc, #480]	@ (8015800 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8015620:	430b      	orrs	r3, r1
 8015622:	6513      	str	r3, [r2, #80]	@ 0x50
 8015624:	e003      	b.n	801562e <HAL_RCCEx_PeriphCLKConfig+0x166>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8015626:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 801562a:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

#if defined(SAI3)
  /*---------------------------- SAI2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 801562e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8015632:	e9d3 2300 	ldrd	r2, r3, [r3]
 8015636:	f402 7a00 	and.w	sl, r2, #512	@ 0x200
 801563a:	f04f 0b00 	mov.w	fp, #0
 801563e:	ea5a 030b 	orrs.w	r3, sl, fp
 8015642:	d04c      	beq.n	80156de <HAL_RCCEx_PeriphCLKConfig+0x216>
  {
    switch (PeriphClkInit->Sai23ClockSelection)
 8015644:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8015648:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 801564a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 801564e:	d030      	beq.n	80156b2 <HAL_RCCEx_PeriphCLKConfig+0x1ea>
 8015650:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8015654:	d829      	bhi.n	80156aa <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 8015656:	2bc0      	cmp	r3, #192	@ 0xc0
 8015658:	d02d      	beq.n	80156b6 <HAL_RCCEx_PeriphCLKConfig+0x1ee>
 801565a:	2bc0      	cmp	r3, #192	@ 0xc0
 801565c:	d825      	bhi.n	80156aa <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 801565e:	2b80      	cmp	r3, #128	@ 0x80
 8015660:	d018      	beq.n	8015694 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
 8015662:	2b80      	cmp	r3, #128	@ 0x80
 8015664:	d821      	bhi.n	80156aa <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 8015666:	2b00      	cmp	r3, #0
 8015668:	d002      	beq.n	8015670 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
 801566a:	2b40      	cmp	r3, #64	@ 0x40
 801566c:	d007      	beq.n	801567e <HAL_RCCEx_PeriphCLKConfig+0x1b6>
 801566e:	e01c      	b.n	80156aa <HAL_RCCEx_PeriphCLKConfig+0x1e2>
    {
      case RCC_SAI23CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2/3 */
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8015670:	4b63      	ldr	r3, [pc, #396]	@ (8015800 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8015672:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8015674:	4a62      	ldr	r2, [pc, #392]	@ (8015800 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8015676:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 801567a:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 801567c:	e01c      	b.n	80156b8 <HAL_RCCEx_PeriphCLKConfig+0x1f0>

      case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2/3 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 801567e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8015682:	3308      	adds	r3, #8
 8015684:	2100      	movs	r1, #0
 8015686:	4618      	mov	r0, r3
 8015688:	f001 f928 	bl	80168dc <RCCEx_PLL2_Config>
 801568c:	4603      	mov	r3, r0
 801568e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 8015692:	e011      	b.n	80156b8 <HAL_RCCEx_PeriphCLKConfig+0x1f0>

      case RCC_SAI23CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8015694:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8015698:	3328      	adds	r3, #40	@ 0x28
 801569a:	2100      	movs	r1, #0
 801569c:	4618      	mov	r0, r3
 801569e:	f001 f9cf 	bl	8016a40 <RCCEx_PLL3_Config>
 80156a2:	4603      	mov	r3, r0
 80156a4:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 80156a8:	e006      	b.n	80156b8 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        /* HSI, HSE, or CSI oscillator is used as source of SAI2/3 clock */
        /* SAI2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80156aa:	2301      	movs	r3, #1
 80156ac:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80156b0:	e002      	b.n	80156b8 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        break;
 80156b2:	bf00      	nop
 80156b4:	e000      	b.n	80156b8 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        break;
 80156b6:	bf00      	nop
    }

    if (ret == HAL_OK)
 80156b8:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80156bc:	2b00      	cmp	r3, #0
 80156be:	d10a      	bne.n	80156d6 <HAL_RCCEx_PeriphCLKConfig+0x20e>
    {
      /* Set the source of SAI2/3 clock*/
      __HAL_RCC_SAI23_CONFIG(PeriphClkInit->Sai23ClockSelection);
 80156c0:	4b4f      	ldr	r3, [pc, #316]	@ (8015800 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80156c2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80156c4:	f423 71e0 	bic.w	r1, r3, #448	@ 0x1c0
 80156c8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80156cc:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80156ce:	4a4c      	ldr	r2, [pc, #304]	@ (8015800 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80156d0:	430b      	orrs	r3, r1
 80156d2:	6513      	str	r3, [r2, #80]	@ 0x50
 80156d4:	e003      	b.n	80156de <HAL_RCCEx_PeriphCLKConfig+0x216>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80156d6:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80156da:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 80156de:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80156e2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80156e6:	f402 6380 	and.w	r3, r2, #1024	@ 0x400
 80156ea:	f8c7 3108 	str.w	r3, [r7, #264]	@ 0x108
 80156ee:	2300      	movs	r3, #0
 80156f0:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
 80156f4:	e9d7 1242 	ldrd	r1, r2, [r7, #264]	@ 0x108
 80156f8:	460b      	mov	r3, r1
 80156fa:	4313      	orrs	r3, r2
 80156fc:	d053      	beq.n	80157a6 <HAL_RCCEx_PeriphCLKConfig+0x2de>
  {
    switch (PeriphClkInit->Sai4AClockSelection)
 80156fe:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8015702:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 8015706:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 801570a:	d035      	beq.n	8015778 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
 801570c:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8015710:	d82e      	bhi.n	8015770 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 8015712:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 8015716:	d031      	beq.n	801577c <HAL_RCCEx_PeriphCLKConfig+0x2b4>
 8015718:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 801571c:	d828      	bhi.n	8015770 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 801571e:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8015722:	d01a      	beq.n	801575a <HAL_RCCEx_PeriphCLKConfig+0x292>
 8015724:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8015728:	d822      	bhi.n	8015770 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 801572a:	2b00      	cmp	r3, #0
 801572c:	d003      	beq.n	8015736 <HAL_RCCEx_PeriphCLKConfig+0x26e>
 801572e:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8015732:	d007      	beq.n	8015744 <HAL_RCCEx_PeriphCLKConfig+0x27c>
 8015734:	e01c      	b.n	8015770 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
    {
      case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8015736:	4b32      	ldr	r3, [pc, #200]	@ (8015800 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8015738:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801573a:	4a31      	ldr	r2, [pc, #196]	@ (8015800 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 801573c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8015740:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8015742:	e01c      	b.n	801577e <HAL_RCCEx_PeriphCLKConfig+0x2b6>

      case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8015744:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8015748:	3308      	adds	r3, #8
 801574a:	2100      	movs	r1, #0
 801574c:	4618      	mov	r0, r3
 801574e:	f001 f8c5 	bl	80168dc <RCCEx_PLL2_Config>
 8015752:	4603      	mov	r3, r0
 8015754:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 8015758:	e011      	b.n	801577e <HAL_RCCEx_PeriphCLKConfig+0x2b6>

      case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 801575a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801575e:	3328      	adds	r3, #40	@ 0x28
 8015760:	2100      	movs	r1, #0
 8015762:	4618      	mov	r0, r3
 8015764:	f001 f96c 	bl	8016a40 <RCCEx_PLL3_Config>
 8015768:	4603      	mov	r3, r0
 801576a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 801576e:	e006      	b.n	801577e <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        /* SAI4A clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 8015770:	2301      	movs	r3, #1
 8015772:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8015776:	e002      	b.n	801577e <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        break;
 8015778:	bf00      	nop
 801577a:	e000      	b.n	801577e <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        break;
 801577c:	bf00      	nop
    }

    if (ret == HAL_OK)
 801577e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8015782:	2b00      	cmp	r3, #0
 8015784:	d10b      	bne.n	801579e <HAL_RCCEx_PeriphCLKConfig+0x2d6>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 8015786:	4b1e      	ldr	r3, [pc, #120]	@ (8015800 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8015788:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 801578a:	f423 0160 	bic.w	r1, r3, #14680064	@ 0xe00000
 801578e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8015792:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 8015796:	4a1a      	ldr	r2, [pc, #104]	@ (8015800 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8015798:	430b      	orrs	r3, r1
 801579a:	6593      	str	r3, [r2, #88]	@ 0x58
 801579c:	e003      	b.n	80157a6 <HAL_RCCEx_PeriphCLKConfig+0x2de>
    }
    else
    {
      /* set overall return value */
      status = ret;
 801579e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80157a2:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 80157a6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80157aa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80157ae:	f402 6300 	and.w	r3, r2, #2048	@ 0x800
 80157b2:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
 80157b6:	2300      	movs	r3, #0
 80157b8:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
 80157bc:	e9d7 1240 	ldrd	r1, r2, [r7, #256]	@ 0x100
 80157c0:	460b      	mov	r3, r1
 80157c2:	4313      	orrs	r3, r2
 80157c4:	d056      	beq.n	8015874 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
  {
    switch (PeriphClkInit->Sai4BClockSelection)
 80157c6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80157ca:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 80157ce:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 80157d2:	d038      	beq.n	8015846 <HAL_RCCEx_PeriphCLKConfig+0x37e>
 80157d4:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 80157d8:	d831      	bhi.n	801583e <HAL_RCCEx_PeriphCLKConfig+0x376>
 80157da:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 80157de:	d034      	beq.n	801584a <HAL_RCCEx_PeriphCLKConfig+0x382>
 80157e0:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 80157e4:	d82b      	bhi.n	801583e <HAL_RCCEx_PeriphCLKConfig+0x376>
 80157e6:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 80157ea:	d01d      	beq.n	8015828 <HAL_RCCEx_PeriphCLKConfig+0x360>
 80157ec:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 80157f0:	d825      	bhi.n	801583e <HAL_RCCEx_PeriphCLKConfig+0x376>
 80157f2:	2b00      	cmp	r3, #0
 80157f4:	d006      	beq.n	8015804 <HAL_RCCEx_PeriphCLKConfig+0x33c>
 80157f6:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80157fa:	d00a      	beq.n	8015812 <HAL_RCCEx_PeriphCLKConfig+0x34a>
 80157fc:	e01f      	b.n	801583e <HAL_RCCEx_PeriphCLKConfig+0x376>
 80157fe:	bf00      	nop
 8015800:	58024400 	.word	0x58024400
    {
      case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8015804:	4ba2      	ldr	r3, [pc, #648]	@ (8015a90 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8015806:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8015808:	4aa1      	ldr	r2, [pc, #644]	@ (8015a90 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 801580a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 801580e:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8015810:	e01c      	b.n	801584c <HAL_RCCEx_PeriphCLKConfig+0x384>

      case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8015812:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8015816:	3308      	adds	r3, #8
 8015818:	2100      	movs	r1, #0
 801581a:	4618      	mov	r0, r3
 801581c:	f001 f85e 	bl	80168dc <RCCEx_PLL2_Config>
 8015820:	4603      	mov	r3, r0
 8015822:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 8015826:	e011      	b.n	801584c <HAL_RCCEx_PeriphCLKConfig+0x384>

      case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8015828:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801582c:	3328      	adds	r3, #40	@ 0x28
 801582e:	2100      	movs	r1, #0
 8015830:	4618      	mov	r0, r3
 8015832:	f001 f905 	bl	8016a40 <RCCEx_PLL3_Config>
 8015836:	4603      	mov	r3, r0
 8015838:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 801583c:	e006      	b.n	801584c <HAL_RCCEx_PeriphCLKConfig+0x384>
        /* SAI4B clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 801583e:	2301      	movs	r3, #1
 8015840:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8015844:	e002      	b.n	801584c <HAL_RCCEx_PeriphCLKConfig+0x384>
        break;
 8015846:	bf00      	nop
 8015848:	e000      	b.n	801584c <HAL_RCCEx_PeriphCLKConfig+0x384>
        break;
 801584a:	bf00      	nop
    }

    if (ret == HAL_OK)
 801584c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8015850:	2b00      	cmp	r3, #0
 8015852:	d10b      	bne.n	801586c <HAL_RCCEx_PeriphCLKConfig+0x3a4>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 8015854:	4b8e      	ldr	r3, [pc, #568]	@ (8015a90 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8015856:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8015858:	f023 61e0 	bic.w	r1, r3, #117440512	@ 0x7000000
 801585c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8015860:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 8015864:	4a8a      	ldr	r2, [pc, #552]	@ (8015a90 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8015866:	430b      	orrs	r3, r1
 8015868:	6593      	str	r3, [r2, #88]	@ 0x58
 801586a:	e003      	b.n	8015874 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
    }
    else
    {
      /* set overall return value */
      status = ret;
 801586c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8015870:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
  }
#endif  /*SAI4*/

#if defined(QUADSPI)
  /*---------------------------- QSPI configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 8015874:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8015878:	e9d3 2300 	ldrd	r2, r3, [r3]
 801587c:	f002 7300 	and.w	r3, r2, #33554432	@ 0x2000000
 8015880:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 8015884:	2300      	movs	r3, #0
 8015886:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 801588a:	e9d7 123e 	ldrd	r1, r2, [r7, #248]	@ 0xf8
 801588e:	460b      	mov	r3, r1
 8015890:	4313      	orrs	r3, r2
 8015892:	d03a      	beq.n	801590a <HAL_RCCEx_PeriphCLKConfig+0x442>
  {
    switch (PeriphClkInit->QspiClockSelection)
 8015894:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8015898:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 801589a:	2b30      	cmp	r3, #48	@ 0x30
 801589c:	d01f      	beq.n	80158de <HAL_RCCEx_PeriphCLKConfig+0x416>
 801589e:	2b30      	cmp	r3, #48	@ 0x30
 80158a0:	d819      	bhi.n	80158d6 <HAL_RCCEx_PeriphCLKConfig+0x40e>
 80158a2:	2b20      	cmp	r3, #32
 80158a4:	d00c      	beq.n	80158c0 <HAL_RCCEx_PeriphCLKConfig+0x3f8>
 80158a6:	2b20      	cmp	r3, #32
 80158a8:	d815      	bhi.n	80158d6 <HAL_RCCEx_PeriphCLKConfig+0x40e>
 80158aa:	2b00      	cmp	r3, #0
 80158ac:	d019      	beq.n	80158e2 <HAL_RCCEx_PeriphCLKConfig+0x41a>
 80158ae:	2b10      	cmp	r3, #16
 80158b0:	d111      	bne.n	80158d6 <HAL_RCCEx_PeriphCLKConfig+0x40e>
    {
      case RCC_QSPICLKSOURCE_PLL:      /* PLL is used as clock source for QSPI*/
        /* Enable QSPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80158b2:	4b77      	ldr	r3, [pc, #476]	@ (8015a90 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80158b4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80158b6:	4a76      	ldr	r2, [pc, #472]	@ (8015a90 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80158b8:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80158bc:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* QSPI clock source configuration done later after clock selection check */
        break;
 80158be:	e011      	b.n	80158e4 <HAL_RCCEx_PeriphCLKConfig+0x41c>

      case RCC_QSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for QSPI*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 80158c0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80158c4:	3308      	adds	r3, #8
 80158c6:	2102      	movs	r1, #2
 80158c8:	4618      	mov	r0, r3
 80158ca:	f001 f807 	bl	80168dc <RCCEx_PLL2_Config>
 80158ce:	4603      	mov	r3, r0
 80158d0:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* QSPI clock source configuration done later after clock selection check */
        break;
 80158d4:	e006      	b.n	80158e4 <HAL_RCCEx_PeriphCLKConfig+0x41c>
      case RCC_QSPICLKSOURCE_D1HCLK:
        /* Domain1 HCLK  clock selected as QSPI kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 80158d6:	2301      	movs	r3, #1
 80158d8:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80158dc:	e002      	b.n	80158e4 <HAL_RCCEx_PeriphCLKConfig+0x41c>
        break;
 80158de:	bf00      	nop
 80158e0:	e000      	b.n	80158e4 <HAL_RCCEx_PeriphCLKConfig+0x41c>
        break;
 80158e2:	bf00      	nop
    }

    if (ret == HAL_OK)
 80158e4:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80158e8:	2b00      	cmp	r3, #0
 80158ea:	d10a      	bne.n	8015902 <HAL_RCCEx_PeriphCLKConfig+0x43a>
    {
      /* Set the source of QSPI clock*/
      __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 80158ec:	4b68      	ldr	r3, [pc, #416]	@ (8015a90 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80158ee:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80158f0:	f023 0130 	bic.w	r1, r3, #48	@ 0x30
 80158f4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80158f8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80158fa:	4a65      	ldr	r2, [pc, #404]	@ (8015a90 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80158fc:	430b      	orrs	r3, r1
 80158fe:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8015900:	e003      	b.n	801590a <HAL_RCCEx_PeriphCLKConfig+0x442>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8015902:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8015906:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 801590a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801590e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8015912:	f402 5380 	and.w	r3, r2, #4096	@ 0x1000
 8015916:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 801591a:	2300      	movs	r3, #0
 801591c:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 8015920:	e9d7 123c 	ldrd	r1, r2, [r7, #240]	@ 0xf0
 8015924:	460b      	mov	r3, r1
 8015926:	4313      	orrs	r3, r2
 8015928:	d051      	beq.n	80159ce <HAL_RCCEx_PeriphCLKConfig+0x506>
  {
    switch (PeriphClkInit->Spi123ClockSelection)
 801592a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801592e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8015930:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8015934:	d035      	beq.n	80159a2 <HAL_RCCEx_PeriphCLKConfig+0x4da>
 8015936:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 801593a:	d82e      	bhi.n	801599a <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 801593c:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8015940:	d031      	beq.n	80159a6 <HAL_RCCEx_PeriphCLKConfig+0x4de>
 8015942:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8015946:	d828      	bhi.n	801599a <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 8015948:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 801594c:	d01a      	beq.n	8015984 <HAL_RCCEx_PeriphCLKConfig+0x4bc>
 801594e:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8015952:	d822      	bhi.n	801599a <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 8015954:	2b00      	cmp	r3, #0
 8015956:	d003      	beq.n	8015960 <HAL_RCCEx_PeriphCLKConfig+0x498>
 8015958:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 801595c:	d007      	beq.n	801596e <HAL_RCCEx_PeriphCLKConfig+0x4a6>
 801595e:	e01c      	b.n	801599a <HAL_RCCEx_PeriphCLKConfig+0x4d2>
    {
      case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
        /* Enable SPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8015960:	4b4b      	ldr	r3, [pc, #300]	@ (8015a90 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8015962:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8015964:	4a4a      	ldr	r2, [pc, #296]	@ (8015a90 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8015966:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 801596a:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 801596c:	e01c      	b.n	80159a8 <HAL_RCCEx_PeriphCLKConfig+0x4e0>

      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 801596e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8015972:	3308      	adds	r3, #8
 8015974:	2100      	movs	r1, #0
 8015976:	4618      	mov	r0, r3
 8015978:	f000 ffb0 	bl	80168dc <RCCEx_PLL2_Config>
 801597c:	4603      	mov	r3, r0
 801597e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8015982:	e011      	b.n	80159a8 <HAL_RCCEx_PeriphCLKConfig+0x4e0>

      case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8015984:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8015988:	3328      	adds	r3, #40	@ 0x28
 801598a:	2100      	movs	r1, #0
 801598c:	4618      	mov	r0, r3
 801598e:	f001 f857 	bl	8016a40 <RCCEx_PLL3_Config>
 8015992:	4603      	mov	r3, r0
 8015994:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8015998:	e006      	b.n	80159a8 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 801599a:	2301      	movs	r3, #1
 801599c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80159a0:	e002      	b.n	80159a8 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        break;
 80159a2:	bf00      	nop
 80159a4:	e000      	b.n	80159a8 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        break;
 80159a6:	bf00      	nop
    }

    if (ret == HAL_OK)
 80159a8:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80159ac:	2b00      	cmp	r3, #0
 80159ae:	d10a      	bne.n	80159c6 <HAL_RCCEx_PeriphCLKConfig+0x4fe>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 80159b0:	4b37      	ldr	r3, [pc, #220]	@ (8015a90 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80159b2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80159b4:	f423 41e0 	bic.w	r1, r3, #28672	@ 0x7000
 80159b8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80159bc:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80159be:	4a34      	ldr	r2, [pc, #208]	@ (8015a90 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80159c0:	430b      	orrs	r3, r1
 80159c2:	6513      	str	r3, [r2, #80]	@ 0x50
 80159c4:	e003      	b.n	80159ce <HAL_RCCEx_PeriphCLKConfig+0x506>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80159c6:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80159ca:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 80159ce:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80159d2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80159d6:	f402 5300 	and.w	r3, r2, #8192	@ 0x2000
 80159da:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 80159de:	2300      	movs	r3, #0
 80159e0:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 80159e4:	e9d7 123a 	ldrd	r1, r2, [r7, #232]	@ 0xe8
 80159e8:	460b      	mov	r3, r1
 80159ea:	4313      	orrs	r3, r2
 80159ec:	d056      	beq.n	8015a9c <HAL_RCCEx_PeriphCLKConfig+0x5d4>
  {
    switch (PeriphClkInit->Spi45ClockSelection)
 80159ee:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80159f2:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80159f4:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80159f8:	d033      	beq.n	8015a62 <HAL_RCCEx_PeriphCLKConfig+0x59a>
 80159fa:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80159fe:	d82c      	bhi.n	8015a5a <HAL_RCCEx_PeriphCLKConfig+0x592>
 8015a00:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8015a04:	d02f      	beq.n	8015a66 <HAL_RCCEx_PeriphCLKConfig+0x59e>
 8015a06:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8015a0a:	d826      	bhi.n	8015a5a <HAL_RCCEx_PeriphCLKConfig+0x592>
 8015a0c:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8015a10:	d02b      	beq.n	8015a6a <HAL_RCCEx_PeriphCLKConfig+0x5a2>
 8015a12:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8015a16:	d820      	bhi.n	8015a5a <HAL_RCCEx_PeriphCLKConfig+0x592>
 8015a18:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8015a1c:	d012      	beq.n	8015a44 <HAL_RCCEx_PeriphCLKConfig+0x57c>
 8015a1e:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8015a22:	d81a      	bhi.n	8015a5a <HAL_RCCEx_PeriphCLKConfig+0x592>
 8015a24:	2b00      	cmp	r3, #0
 8015a26:	d022      	beq.n	8015a6e <HAL_RCCEx_PeriphCLKConfig+0x5a6>
 8015a28:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8015a2c:	d115      	bne.n	8015a5a <HAL_RCCEx_PeriphCLKConfig+0x592>
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8015a2e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8015a32:	3308      	adds	r3, #8
 8015a34:	2101      	movs	r1, #1
 8015a36:	4618      	mov	r0, r3
 8015a38:	f000 ff50 	bl	80168dc <RCCEx_PLL2_Config>
 8015a3c:	4603      	mov	r3, r0
 8015a3e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 8015a42:	e015      	b.n	8015a70 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
      case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8015a44:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8015a48:	3328      	adds	r3, #40	@ 0x28
 8015a4a:	2101      	movs	r1, #1
 8015a4c:	4618      	mov	r0, r3
 8015a4e:	f000 fff7 	bl	8016a40 <RCCEx_PLL3_Config>
 8015a52:	4603      	mov	r3, r0
 8015a54:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 8015a58:	e00a      	b.n	8015a70 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        /* HSE,  oscillator is used as source of SPI4/5 clock */
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8015a5a:	2301      	movs	r3, #1
 8015a5c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8015a60:	e006      	b.n	8015a70 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 8015a62:	bf00      	nop
 8015a64:	e004      	b.n	8015a70 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 8015a66:	bf00      	nop
 8015a68:	e002      	b.n	8015a70 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 8015a6a:	bf00      	nop
 8015a6c:	e000      	b.n	8015a70 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 8015a6e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8015a70:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8015a74:	2b00      	cmp	r3, #0
 8015a76:	d10d      	bne.n	8015a94 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 8015a78:	4b05      	ldr	r3, [pc, #20]	@ (8015a90 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8015a7a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8015a7c:	f423 21e0 	bic.w	r1, r3, #458752	@ 0x70000
 8015a80:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8015a84:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8015a86:	4a02      	ldr	r2, [pc, #8]	@ (8015a90 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8015a88:	430b      	orrs	r3, r1
 8015a8a:	6513      	str	r3, [r2, #80]	@ 0x50
 8015a8c:	e006      	b.n	8015a9c <HAL_RCCEx_PeriphCLKConfig+0x5d4>
 8015a8e:	bf00      	nop
 8015a90:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8015a94:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8015a98:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 8015a9c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8015aa0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8015aa4:	f402 4380 	and.w	r3, r2, #16384	@ 0x4000
 8015aa8:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8015aac:	2300      	movs	r3, #0
 8015aae:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8015ab2:	e9d7 1238 	ldrd	r1, r2, [r7, #224]	@ 0xe0
 8015ab6:	460b      	mov	r3, r1
 8015ab8:	4313      	orrs	r3, r2
 8015aba:	d055      	beq.n	8015b68 <HAL_RCCEx_PeriphCLKConfig+0x6a0>
  {
    switch (PeriphClkInit->Spi6ClockSelection)
 8015abc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8015ac0:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8015ac4:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8015ac8:	d033      	beq.n	8015b32 <HAL_RCCEx_PeriphCLKConfig+0x66a>
 8015aca:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8015ace:	d82c      	bhi.n	8015b2a <HAL_RCCEx_PeriphCLKConfig+0x662>
 8015ad0:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8015ad4:	d02f      	beq.n	8015b36 <HAL_RCCEx_PeriphCLKConfig+0x66e>
 8015ad6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8015ada:	d826      	bhi.n	8015b2a <HAL_RCCEx_PeriphCLKConfig+0x662>
 8015adc:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8015ae0:	d02b      	beq.n	8015b3a <HAL_RCCEx_PeriphCLKConfig+0x672>
 8015ae2:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8015ae6:	d820      	bhi.n	8015b2a <HAL_RCCEx_PeriphCLKConfig+0x662>
 8015ae8:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8015aec:	d012      	beq.n	8015b14 <HAL_RCCEx_PeriphCLKConfig+0x64c>
 8015aee:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8015af2:	d81a      	bhi.n	8015b2a <HAL_RCCEx_PeriphCLKConfig+0x662>
 8015af4:	2b00      	cmp	r3, #0
 8015af6:	d022      	beq.n	8015b3e <HAL_RCCEx_PeriphCLKConfig+0x676>
 8015af8:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8015afc:	d115      	bne.n	8015b2a <HAL_RCCEx_PeriphCLKConfig+0x662>
        /* SPI6 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8015afe:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8015b02:	3308      	adds	r3, #8
 8015b04:	2101      	movs	r1, #1
 8015b06:	4618      	mov	r0, r3
 8015b08:	f000 fee8 	bl	80168dc <RCCEx_PLL2_Config>
 8015b0c:	4603      	mov	r3, r0
 8015b0e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI6 clock source configuration done later after clock selection check */
        break;
 8015b12:	e015      	b.n	8015b40 <HAL_RCCEx_PeriphCLKConfig+0x678>
      case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8015b14:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8015b18:	3328      	adds	r3, #40	@ 0x28
 8015b1a:	2101      	movs	r1, #1
 8015b1c:	4618      	mov	r0, r3
 8015b1e:	f000 ff8f 	bl	8016a40 <RCCEx_PLL3_Config>
 8015b22:	4603      	mov	r3, r0
 8015b24:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* SPI6 clock source configuration done later after clock selection check */
        break;
 8015b28:	e00a      	b.n	8015b40 <HAL_RCCEx_PeriphCLKConfig+0x678>
        /* SPI6 clock source configuration done later after clock selection check */
        break;
#endif

      default:
        ret = HAL_ERROR;
 8015b2a:	2301      	movs	r3, #1
 8015b2c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8015b30:	e006      	b.n	8015b40 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 8015b32:	bf00      	nop
 8015b34:	e004      	b.n	8015b40 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 8015b36:	bf00      	nop
 8015b38:	e002      	b.n	8015b40 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 8015b3a:	bf00      	nop
 8015b3c:	e000      	b.n	8015b40 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 8015b3e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8015b40:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8015b44:	2b00      	cmp	r3, #0
 8015b46:	d10b      	bne.n	8015b60 <HAL_RCCEx_PeriphCLKConfig+0x698>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 8015b48:	4ba3      	ldr	r3, [pc, #652]	@ (8015dd8 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8015b4a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8015b4c:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
 8015b50:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8015b54:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8015b58:	4a9f      	ldr	r2, [pc, #636]	@ (8015dd8 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8015b5a:	430b      	orrs	r3, r1
 8015b5c:	6593      	str	r3, [r2, #88]	@ 0x58
 8015b5e:	e003      	b.n	8015b68 <HAL_RCCEx_PeriphCLKConfig+0x6a0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8015b60:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8015b64:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8015b68:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8015b6c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8015b70:	f402 4300 	and.w	r3, r2, #32768	@ 0x8000
 8015b74:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8015b78:	2300      	movs	r3, #0
 8015b7a:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 8015b7e:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 8015b82:	460b      	mov	r3, r1
 8015b84:	4313      	orrs	r3, r2
 8015b86:	d037      	beq.n	8015bf8 <HAL_RCCEx_PeriphCLKConfig+0x730>
  {
    switch (PeriphClkInit->FdcanClockSelection)
 8015b88:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8015b8c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8015b8e:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8015b92:	d00e      	beq.n	8015bb2 <HAL_RCCEx_PeriphCLKConfig+0x6ea>
 8015b94:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8015b98:	d816      	bhi.n	8015bc8 <HAL_RCCEx_PeriphCLKConfig+0x700>
 8015b9a:	2b00      	cmp	r3, #0
 8015b9c:	d018      	beq.n	8015bd0 <HAL_RCCEx_PeriphCLKConfig+0x708>
 8015b9e:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8015ba2:	d111      	bne.n	8015bc8 <HAL_RCCEx_PeriphCLKConfig+0x700>
    {
      case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
        /* Enable FDCAN Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8015ba4:	4b8c      	ldr	r3, [pc, #560]	@ (8015dd8 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8015ba6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8015ba8:	4a8b      	ldr	r2, [pc, #556]	@ (8015dd8 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8015baa:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8015bae:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 8015bb0:	e00f      	b.n	8015bd2 <HAL_RCCEx_PeriphCLKConfig+0x70a>

      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8015bb2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8015bb6:	3308      	adds	r3, #8
 8015bb8:	2101      	movs	r1, #1
 8015bba:	4618      	mov	r0, r3
 8015bbc:	f000 fe8e 	bl	80168dc <RCCEx_PLL2_Config>
 8015bc0:	4603      	mov	r3, r0
 8015bc2:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 8015bc6:	e004      	b.n	8015bd2 <HAL_RCCEx_PeriphCLKConfig+0x70a>
        /* HSE is used as clock source for FDCAN*/
        /* FDCAN clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8015bc8:	2301      	movs	r3, #1
 8015bca:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8015bce:	e000      	b.n	8015bd2 <HAL_RCCEx_PeriphCLKConfig+0x70a>
        break;
 8015bd0:	bf00      	nop
    }

    if (ret == HAL_OK)
 8015bd2:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8015bd6:	2b00      	cmp	r3, #0
 8015bd8:	d10a      	bne.n	8015bf0 <HAL_RCCEx_PeriphCLKConfig+0x728>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8015bda:	4b7f      	ldr	r3, [pc, #508]	@ (8015dd8 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8015bdc:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8015bde:	f023 5140 	bic.w	r1, r3, #805306368	@ 0x30000000
 8015be2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8015be6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8015be8:	4a7b      	ldr	r2, [pc, #492]	@ (8015dd8 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8015bea:	430b      	orrs	r3, r1
 8015bec:	6513      	str	r3, [r2, #80]	@ 0x50
 8015bee:	e003      	b.n	8015bf8 <HAL_RCCEx_PeriphCLKConfig+0x730>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8015bf0:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8015bf4:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 8015bf8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8015bfc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8015c00:	f002 7380 	and.w	r3, r2, #16777216	@ 0x1000000
 8015c04:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8015c08:	2300      	movs	r3, #0
 8015c0a:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 8015c0e:	e9d7 1234 	ldrd	r1, r2, [r7, #208]	@ 0xd0
 8015c12:	460b      	mov	r3, r1
 8015c14:	4313      	orrs	r3, r2
 8015c16:	d039      	beq.n	8015c8c <HAL_RCCEx_PeriphCLKConfig+0x7c4>
  {
    switch (PeriphClkInit->FmcClockSelection)
 8015c18:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8015c1c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8015c1e:	2b03      	cmp	r3, #3
 8015c20:	d81c      	bhi.n	8015c5c <HAL_RCCEx_PeriphCLKConfig+0x794>
 8015c22:	a201      	add	r2, pc, #4	@ (adr r2, 8015c28 <HAL_RCCEx_PeriphCLKConfig+0x760>)
 8015c24:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8015c28:	08015c65 	.word	0x08015c65
 8015c2c:	08015c39 	.word	0x08015c39
 8015c30:	08015c47 	.word	0x08015c47
 8015c34:	08015c65 	.word	0x08015c65
    {
      case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
        /* Enable FMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8015c38:	4b67      	ldr	r3, [pc, #412]	@ (8015dd8 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8015c3a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8015c3c:	4a66      	ldr	r2, [pc, #408]	@ (8015dd8 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8015c3e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8015c42:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* FMC clock source configuration done later after clock selection check */
        break;
 8015c44:	e00f      	b.n	8015c66 <HAL_RCCEx_PeriphCLKConfig+0x79e>

      case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8015c46:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8015c4a:	3308      	adds	r3, #8
 8015c4c:	2102      	movs	r1, #2
 8015c4e:	4618      	mov	r0, r3
 8015c50:	f000 fe44 	bl	80168dc <RCCEx_PLL2_Config>
 8015c54:	4603      	mov	r3, r0
 8015c56:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* FMC clock source configuration done later after clock selection check */
        break;
 8015c5a:	e004      	b.n	8015c66 <HAL_RCCEx_PeriphCLKConfig+0x79e>
      case RCC_FMCCLKSOURCE_HCLK:
        /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 8015c5c:	2301      	movs	r3, #1
 8015c5e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8015c62:	e000      	b.n	8015c66 <HAL_RCCEx_PeriphCLKConfig+0x79e>
        break;
 8015c64:	bf00      	nop
    }

    if (ret == HAL_OK)
 8015c66:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8015c6a:	2b00      	cmp	r3, #0
 8015c6c:	d10a      	bne.n	8015c84 <HAL_RCCEx_PeriphCLKConfig+0x7bc>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 8015c6e:	4b5a      	ldr	r3, [pc, #360]	@ (8015dd8 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8015c70:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8015c72:	f023 0103 	bic.w	r1, r3, #3
 8015c76:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8015c7a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8015c7c:	4a56      	ldr	r2, [pc, #344]	@ (8015dd8 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8015c7e:	430b      	orrs	r3, r1
 8015c80:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8015c82:	e003      	b.n	8015c8c <HAL_RCCEx_PeriphCLKConfig+0x7c4>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8015c84:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8015c88:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8015c8c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8015c90:	e9d3 2300 	ldrd	r2, r3, [r3]
 8015c94:	f402 0380 	and.w	r3, r2, #4194304	@ 0x400000
 8015c98:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8015c9c:	2300      	movs	r3, #0
 8015c9e:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8015ca2:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	@ 0xc8
 8015ca6:	460b      	mov	r3, r1
 8015ca8:	4313      	orrs	r3, r2
 8015caa:	f000 809f 	beq.w	8015dec <HAL_RCCEx_PeriphCLKConfig+0x924>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8015cae:	4b4b      	ldr	r3, [pc, #300]	@ (8015ddc <HAL_RCCEx_PeriphCLKConfig+0x914>)
 8015cb0:	681b      	ldr	r3, [r3, #0]
 8015cb2:	4a4a      	ldr	r2, [pc, #296]	@ (8015ddc <HAL_RCCEx_PeriphCLKConfig+0x914>)
 8015cb4:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8015cb8:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8015cba:	f7fb f9a9 	bl	8011010 <HAL_GetTick>
 8015cbe:	f8c7 0120 	str.w	r0, [r7, #288]	@ 0x120

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8015cc2:	e00b      	b.n	8015cdc <HAL_RCCEx_PeriphCLKConfig+0x814>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8015cc4:	f7fb f9a4 	bl	8011010 <HAL_GetTick>
 8015cc8:	4602      	mov	r2, r0
 8015cca:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 8015cce:	1ad3      	subs	r3, r2, r3
 8015cd0:	2b64      	cmp	r3, #100	@ 0x64
 8015cd2:	d903      	bls.n	8015cdc <HAL_RCCEx_PeriphCLKConfig+0x814>
      {
        ret = HAL_TIMEOUT;
 8015cd4:	2303      	movs	r3, #3
 8015cd6:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8015cda:	e005      	b.n	8015ce8 <HAL_RCCEx_PeriphCLKConfig+0x820>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8015cdc:	4b3f      	ldr	r3, [pc, #252]	@ (8015ddc <HAL_RCCEx_PeriphCLKConfig+0x914>)
 8015cde:	681b      	ldr	r3, [r3, #0]
 8015ce0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8015ce4:	2b00      	cmp	r3, #0
 8015ce6:	d0ed      	beq.n	8015cc4 <HAL_RCCEx_PeriphCLKConfig+0x7fc>
      }
    }

    if (ret == HAL_OK)
 8015ce8:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8015cec:	2b00      	cmp	r3, #0
 8015cee:	d179      	bne.n	8015de4 <HAL_RCCEx_PeriphCLKConfig+0x91c>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 8015cf0:	4b39      	ldr	r3, [pc, #228]	@ (8015dd8 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8015cf2:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8015cf4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8015cf8:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8015cfc:	4053      	eors	r3, r2
 8015cfe:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8015d02:	2b00      	cmp	r3, #0
 8015d04:	d015      	beq.n	8015d32 <HAL_RCCEx_PeriphCLKConfig+0x86a>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8015d06:	4b34      	ldr	r3, [pc, #208]	@ (8015dd8 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8015d08:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8015d0a:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8015d0e:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8015d12:	4b31      	ldr	r3, [pc, #196]	@ (8015dd8 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8015d14:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8015d16:	4a30      	ldr	r2, [pc, #192]	@ (8015dd8 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8015d18:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8015d1c:	6713      	str	r3, [r2, #112]	@ 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 8015d1e:	4b2e      	ldr	r3, [pc, #184]	@ (8015dd8 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8015d20:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8015d22:	4a2d      	ldr	r2, [pc, #180]	@ (8015dd8 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8015d24:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8015d28:	6713      	str	r3, [r2, #112]	@ 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 8015d2a:	4a2b      	ldr	r2, [pc, #172]	@ (8015dd8 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8015d2c:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8015d30:	6713      	str	r3, [r2, #112]	@ 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if (PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 8015d32:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8015d36:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8015d3a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8015d3e:	d118      	bne.n	8015d72 <HAL_RCCEx_PeriphCLKConfig+0x8aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8015d40:	f7fb f966 	bl	8011010 <HAL_GetTick>
 8015d44:	f8c7 0120 	str.w	r0, [r7, #288]	@ 0x120

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8015d48:	e00d      	b.n	8015d66 <HAL_RCCEx_PeriphCLKConfig+0x89e>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8015d4a:	f7fb f961 	bl	8011010 <HAL_GetTick>
 8015d4e:	4602      	mov	r2, r0
 8015d50:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 8015d54:	1ad2      	subs	r2, r2, r3
 8015d56:	f241 3388 	movw	r3, #5000	@ 0x1388
 8015d5a:	429a      	cmp	r2, r3
 8015d5c:	d903      	bls.n	8015d66 <HAL_RCCEx_PeriphCLKConfig+0x89e>
          {
            ret = HAL_TIMEOUT;
 8015d5e:	2303      	movs	r3, #3
 8015d60:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
            break;
 8015d64:	e005      	b.n	8015d72 <HAL_RCCEx_PeriphCLKConfig+0x8aa>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8015d66:	4b1c      	ldr	r3, [pc, #112]	@ (8015dd8 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8015d68:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8015d6a:	f003 0302 	and.w	r3, r3, #2
 8015d6e:	2b00      	cmp	r3, #0
 8015d70:	d0eb      	beq.n	8015d4a <HAL_RCCEx_PeriphCLKConfig+0x882>
          }
        }
      }

      if (ret == HAL_OK)
 8015d72:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8015d76:	2b00      	cmp	r3, #0
 8015d78:	d129      	bne.n	8015dce <HAL_RCCEx_PeriphCLKConfig+0x906>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8015d7a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8015d7e:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8015d82:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8015d86:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8015d8a:	d10e      	bne.n	8015daa <HAL_RCCEx_PeriphCLKConfig+0x8e2>
 8015d8c:	4b12      	ldr	r3, [pc, #72]	@ (8015dd8 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8015d8e:	691b      	ldr	r3, [r3, #16]
 8015d90:	f423 517c 	bic.w	r1, r3, #16128	@ 0x3f00
 8015d94:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8015d98:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8015d9c:	091a      	lsrs	r2, r3, #4
 8015d9e:	4b10      	ldr	r3, [pc, #64]	@ (8015de0 <HAL_RCCEx_PeriphCLKConfig+0x918>)
 8015da0:	4013      	ands	r3, r2
 8015da2:	4a0d      	ldr	r2, [pc, #52]	@ (8015dd8 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8015da4:	430b      	orrs	r3, r1
 8015da6:	6113      	str	r3, [r2, #16]
 8015da8:	e005      	b.n	8015db6 <HAL_RCCEx_PeriphCLKConfig+0x8ee>
 8015daa:	4b0b      	ldr	r3, [pc, #44]	@ (8015dd8 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8015dac:	691b      	ldr	r3, [r3, #16]
 8015dae:	4a0a      	ldr	r2, [pc, #40]	@ (8015dd8 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8015db0:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 8015db4:	6113      	str	r3, [r2, #16]
 8015db6:	4b08      	ldr	r3, [pc, #32]	@ (8015dd8 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8015db8:	6f19      	ldr	r1, [r3, #112]	@ 0x70
 8015dba:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8015dbe:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8015dc2:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8015dc6:	4a04      	ldr	r2, [pc, #16]	@ (8015dd8 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8015dc8:	430b      	orrs	r3, r1
 8015dca:	6713      	str	r3, [r2, #112]	@ 0x70
 8015dcc:	e00e      	b.n	8015dec <HAL_RCCEx_PeriphCLKConfig+0x924>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8015dce:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8015dd2:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
 8015dd6:	e009      	b.n	8015dec <HAL_RCCEx_PeriphCLKConfig+0x924>
 8015dd8:	58024400 	.word	0x58024400
 8015ddc:	58024800 	.word	0x58024800
 8015de0:	00ffffcf 	.word	0x00ffffcf
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8015de4:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8015de8:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 8015dec:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8015df0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8015df4:	f002 0301 	and.w	r3, r2, #1
 8015df8:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8015dfc:	2300      	movs	r3, #0
 8015dfe:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8015e02:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8015e06:	460b      	mov	r3, r1
 8015e08:	4313      	orrs	r3, r2
 8015e0a:	f000 8089 	beq.w	8015f20 <HAL_RCCEx_PeriphCLKConfig+0xa58>
  {
    switch (PeriphClkInit->Usart16ClockSelection)
 8015e0e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8015e12:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8015e14:	2b28      	cmp	r3, #40	@ 0x28
 8015e16:	d86b      	bhi.n	8015ef0 <HAL_RCCEx_PeriphCLKConfig+0xa28>
 8015e18:	a201      	add	r2, pc, #4	@ (adr r2, 8015e20 <HAL_RCCEx_PeriphCLKConfig+0x958>)
 8015e1a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8015e1e:	bf00      	nop
 8015e20:	08015ef9 	.word	0x08015ef9
 8015e24:	08015ef1 	.word	0x08015ef1
 8015e28:	08015ef1 	.word	0x08015ef1
 8015e2c:	08015ef1 	.word	0x08015ef1
 8015e30:	08015ef1 	.word	0x08015ef1
 8015e34:	08015ef1 	.word	0x08015ef1
 8015e38:	08015ef1 	.word	0x08015ef1
 8015e3c:	08015ef1 	.word	0x08015ef1
 8015e40:	08015ec5 	.word	0x08015ec5
 8015e44:	08015ef1 	.word	0x08015ef1
 8015e48:	08015ef1 	.word	0x08015ef1
 8015e4c:	08015ef1 	.word	0x08015ef1
 8015e50:	08015ef1 	.word	0x08015ef1
 8015e54:	08015ef1 	.word	0x08015ef1
 8015e58:	08015ef1 	.word	0x08015ef1
 8015e5c:	08015ef1 	.word	0x08015ef1
 8015e60:	08015edb 	.word	0x08015edb
 8015e64:	08015ef1 	.word	0x08015ef1
 8015e68:	08015ef1 	.word	0x08015ef1
 8015e6c:	08015ef1 	.word	0x08015ef1
 8015e70:	08015ef1 	.word	0x08015ef1
 8015e74:	08015ef1 	.word	0x08015ef1
 8015e78:	08015ef1 	.word	0x08015ef1
 8015e7c:	08015ef1 	.word	0x08015ef1
 8015e80:	08015ef9 	.word	0x08015ef9
 8015e84:	08015ef1 	.word	0x08015ef1
 8015e88:	08015ef1 	.word	0x08015ef1
 8015e8c:	08015ef1 	.word	0x08015ef1
 8015e90:	08015ef1 	.word	0x08015ef1
 8015e94:	08015ef1 	.word	0x08015ef1
 8015e98:	08015ef1 	.word	0x08015ef1
 8015e9c:	08015ef1 	.word	0x08015ef1
 8015ea0:	08015ef9 	.word	0x08015ef9
 8015ea4:	08015ef1 	.word	0x08015ef1
 8015ea8:	08015ef1 	.word	0x08015ef1
 8015eac:	08015ef1 	.word	0x08015ef1
 8015eb0:	08015ef1 	.word	0x08015ef1
 8015eb4:	08015ef1 	.word	0x08015ef1
 8015eb8:	08015ef1 	.word	0x08015ef1
 8015ebc:	08015ef1 	.word	0x08015ef1
 8015ec0:	08015ef9 	.word	0x08015ef9
      case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8015ec4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8015ec8:	3308      	adds	r3, #8
 8015eca:	2101      	movs	r1, #1
 8015ecc:	4618      	mov	r0, r3
 8015ece:	f000 fd05 	bl	80168dc <RCCEx_PLL2_Config>
 8015ed2:	4603      	mov	r3, r0
 8015ed4:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 8015ed8:	e00f      	b.n	8015efa <HAL_RCCEx_PeriphCLKConfig+0xa32>

      case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8015eda:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8015ede:	3328      	adds	r3, #40	@ 0x28
 8015ee0:	2101      	movs	r1, #1
 8015ee2:	4618      	mov	r0, r3
 8015ee4:	f000 fdac 	bl	8016a40 <RCCEx_PLL3_Config>
 8015ee8:	4603      	mov	r3, r0
 8015eea:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 8015eee:	e004      	b.n	8015efa <HAL_RCCEx_PeriphCLKConfig+0xa32>
        /* LSE,  oscillator is used as source of USART1/6 clock */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8015ef0:	2301      	movs	r3, #1
 8015ef2:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8015ef6:	e000      	b.n	8015efa <HAL_RCCEx_PeriphCLKConfig+0xa32>
        break;
 8015ef8:	bf00      	nop
    }

    if (ret == HAL_OK)
 8015efa:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8015efe:	2b00      	cmp	r3, #0
 8015f00:	d10a      	bne.n	8015f18 <HAL_RCCEx_PeriphCLKConfig+0xa50>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 8015f02:	4bbf      	ldr	r3, [pc, #764]	@ (8016200 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8015f04:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8015f06:	f023 0138 	bic.w	r1, r3, #56	@ 0x38
 8015f0a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8015f0e:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8015f10:	4abb      	ldr	r2, [pc, #748]	@ (8016200 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8015f12:	430b      	orrs	r3, r1
 8015f14:	6553      	str	r3, [r2, #84]	@ 0x54
 8015f16:	e003      	b.n	8015f20 <HAL_RCCEx_PeriphCLKConfig+0xa58>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8015f18:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8015f1c:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 8015f20:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8015f24:	e9d3 2300 	ldrd	r2, r3, [r3]
 8015f28:	f002 0302 	and.w	r3, r2, #2
 8015f2c:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8015f30:	2300      	movs	r3, #0
 8015f32:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 8015f36:	e9d7 122e 	ldrd	r1, r2, [r7, #184]	@ 0xb8
 8015f3a:	460b      	mov	r3, r1
 8015f3c:	4313      	orrs	r3, r2
 8015f3e:	d041      	beq.n	8015fc4 <HAL_RCCEx_PeriphCLKConfig+0xafc>
  {
    switch (PeriphClkInit->Usart234578ClockSelection)
 8015f40:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8015f44:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8015f46:	2b05      	cmp	r3, #5
 8015f48:	d824      	bhi.n	8015f94 <HAL_RCCEx_PeriphCLKConfig+0xacc>
 8015f4a:	a201      	add	r2, pc, #4	@ (adr r2, 8015f50 <HAL_RCCEx_PeriphCLKConfig+0xa88>)
 8015f4c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8015f50:	08015f9d 	.word	0x08015f9d
 8015f54:	08015f69 	.word	0x08015f69
 8015f58:	08015f7f 	.word	0x08015f7f
 8015f5c:	08015f9d 	.word	0x08015f9d
 8015f60:	08015f9d 	.word	0x08015f9d
 8015f64:	08015f9d 	.word	0x08015f9d
      case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8015f68:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8015f6c:	3308      	adds	r3, #8
 8015f6e:	2101      	movs	r1, #1
 8015f70:	4618      	mov	r0, r3
 8015f72:	f000 fcb3 	bl	80168dc <RCCEx_PLL2_Config>
 8015f76:	4603      	mov	r3, r0
 8015f78:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 8015f7c:	e00f      	b.n	8015f9e <HAL_RCCEx_PeriphCLKConfig+0xad6>

      case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8015f7e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8015f82:	3328      	adds	r3, #40	@ 0x28
 8015f84:	2101      	movs	r1, #1
 8015f86:	4618      	mov	r0, r3
 8015f88:	f000 fd5a 	bl	8016a40 <RCCEx_PLL3_Config>
 8015f8c:	4603      	mov	r3, r0
 8015f8e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 8015f92:	e004      	b.n	8015f9e <HAL_RCCEx_PeriphCLKConfig+0xad6>
        /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8015f94:	2301      	movs	r3, #1
 8015f96:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8015f9a:	e000      	b.n	8015f9e <HAL_RCCEx_PeriphCLKConfig+0xad6>
        break;
 8015f9c:	bf00      	nop
    }

    if (ret == HAL_OK)
 8015f9e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8015fa2:	2b00      	cmp	r3, #0
 8015fa4:	d10a      	bne.n	8015fbc <HAL_RCCEx_PeriphCLKConfig+0xaf4>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 8015fa6:	4b96      	ldr	r3, [pc, #600]	@ (8016200 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8015fa8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8015faa:	f023 0107 	bic.w	r1, r3, #7
 8015fae:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8015fb2:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8015fb4:	4a92      	ldr	r2, [pc, #584]	@ (8016200 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8015fb6:	430b      	orrs	r3, r1
 8015fb8:	6553      	str	r3, [r2, #84]	@ 0x54
 8015fba:	e003      	b.n	8015fc4 <HAL_RCCEx_PeriphCLKConfig+0xafc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8015fbc:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8015fc0:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8015fc4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8015fc8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8015fcc:	f002 0304 	and.w	r3, r2, #4
 8015fd0:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8015fd4:	2300      	movs	r3, #0
 8015fd6:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8015fda:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	@ 0xb0
 8015fde:	460b      	mov	r3, r1
 8015fe0:	4313      	orrs	r3, r2
 8015fe2:	d044      	beq.n	801606e <HAL_RCCEx_PeriphCLKConfig+0xba6>
  {
    switch (PeriphClkInit->Lpuart1ClockSelection)
 8015fe4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8015fe8:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8015fec:	2b05      	cmp	r3, #5
 8015fee:	d825      	bhi.n	801603c <HAL_RCCEx_PeriphCLKConfig+0xb74>
 8015ff0:	a201      	add	r2, pc, #4	@ (adr r2, 8015ff8 <HAL_RCCEx_PeriphCLKConfig+0xb30>)
 8015ff2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8015ff6:	bf00      	nop
 8015ff8:	08016045 	.word	0x08016045
 8015ffc:	08016011 	.word	0x08016011
 8016000:	08016027 	.word	0x08016027
 8016004:	08016045 	.word	0x08016045
 8016008:	08016045 	.word	0x08016045
 801600c:	08016045 	.word	0x08016045
      case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8016010:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8016014:	3308      	adds	r3, #8
 8016016:	2101      	movs	r1, #1
 8016018:	4618      	mov	r0, r3
 801601a:	f000 fc5f 	bl	80168dc <RCCEx_PLL2_Config>
 801601e:	4603      	mov	r3, r0
 8016020:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 8016024:	e00f      	b.n	8016046 <HAL_RCCEx_PeriphCLKConfig+0xb7e>

      case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8016026:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801602a:	3328      	adds	r3, #40	@ 0x28
 801602c:	2101      	movs	r1, #1
 801602e:	4618      	mov	r0, r3
 8016030:	f000 fd06 	bl	8016a40 <RCCEx_PLL3_Config>
 8016034:	4603      	mov	r3, r0
 8016036:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 801603a:	e004      	b.n	8016046 <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        /* LSE,  oscillator is used as source of LPUART1 clock */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 801603c:	2301      	movs	r3, #1
 801603e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8016042:	e000      	b.n	8016046 <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        break;
 8016044:	bf00      	nop
    }

    if (ret == HAL_OK)
 8016046:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 801604a:	2b00      	cmp	r3, #0
 801604c:	d10b      	bne.n	8016066 <HAL_RCCEx_PeriphCLKConfig+0xb9e>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 801604e:	4b6c      	ldr	r3, [pc, #432]	@ (8016200 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8016050:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8016052:	f023 0107 	bic.w	r1, r3, #7
 8016056:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801605a:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 801605e:	4a68      	ldr	r2, [pc, #416]	@ (8016200 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8016060:	430b      	orrs	r3, r1
 8016062:	6593      	str	r3, [r2, #88]	@ 0x58
 8016064:	e003      	b.n	801606e <HAL_RCCEx_PeriphCLKConfig+0xba6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8016066:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 801606a:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 801606e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8016072:	e9d3 2300 	ldrd	r2, r3, [r3]
 8016076:	f002 0320 	and.w	r3, r2, #32
 801607a:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 801607e:	2300      	movs	r3, #0
 8016080:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8016084:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8016088:	460b      	mov	r3, r1
 801608a:	4313      	orrs	r3, r2
 801608c:	d055      	beq.n	801613a <HAL_RCCEx_PeriphCLKConfig+0xc72>
  {
    switch (PeriphClkInit->Lptim1ClockSelection)
 801608e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8016092:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8016096:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 801609a:	d033      	beq.n	8016104 <HAL_RCCEx_PeriphCLKConfig+0xc3c>
 801609c:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80160a0:	d82c      	bhi.n	80160fc <HAL_RCCEx_PeriphCLKConfig+0xc34>
 80160a2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80160a6:	d02f      	beq.n	8016108 <HAL_RCCEx_PeriphCLKConfig+0xc40>
 80160a8:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80160ac:	d826      	bhi.n	80160fc <HAL_RCCEx_PeriphCLKConfig+0xc34>
 80160ae:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 80160b2:	d02b      	beq.n	801610c <HAL_RCCEx_PeriphCLKConfig+0xc44>
 80160b4:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 80160b8:	d820      	bhi.n	80160fc <HAL_RCCEx_PeriphCLKConfig+0xc34>
 80160ba:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80160be:	d012      	beq.n	80160e6 <HAL_RCCEx_PeriphCLKConfig+0xc1e>
 80160c0:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80160c4:	d81a      	bhi.n	80160fc <HAL_RCCEx_PeriphCLKConfig+0xc34>
 80160c6:	2b00      	cmp	r3, #0
 80160c8:	d022      	beq.n	8016110 <HAL_RCCEx_PeriphCLKConfig+0xc48>
 80160ca:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80160ce:	d115      	bne.n	80160fc <HAL_RCCEx_PeriphCLKConfig+0xc34>
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80160d0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80160d4:	3308      	adds	r3, #8
 80160d6:	2100      	movs	r1, #0
 80160d8:	4618      	mov	r0, r3
 80160da:	f000 fbff 	bl	80168dc <RCCEx_PLL2_Config>
 80160de:	4603      	mov	r3, r0
 80160e0:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 80160e4:	e015      	b.n	8016112 <HAL_RCCEx_PeriphCLKConfig+0xc4a>

      case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 80160e6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80160ea:	3328      	adds	r3, #40	@ 0x28
 80160ec:	2102      	movs	r1, #2
 80160ee:	4618      	mov	r0, r3
 80160f0:	f000 fca6 	bl	8016a40 <RCCEx_PLL3_Config>
 80160f4:	4603      	mov	r3, r0
 80160f6:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 80160fa:	e00a      	b.n	8016112 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80160fc:	2301      	movs	r3, #1
 80160fe:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8016102:	e006      	b.n	8016112 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 8016104:	bf00      	nop
 8016106:	e004      	b.n	8016112 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 8016108:	bf00      	nop
 801610a:	e002      	b.n	8016112 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 801610c:	bf00      	nop
 801610e:	e000      	b.n	8016112 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 8016110:	bf00      	nop
    }

    if (ret == HAL_OK)
 8016112:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8016116:	2b00      	cmp	r3, #0
 8016118:	d10b      	bne.n	8016132 <HAL_RCCEx_PeriphCLKConfig+0xc6a>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 801611a:	4b39      	ldr	r3, [pc, #228]	@ (8016200 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 801611c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 801611e:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
 8016122:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8016126:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 801612a:	4a35      	ldr	r2, [pc, #212]	@ (8016200 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 801612c:	430b      	orrs	r3, r1
 801612e:	6553      	str	r3, [r2, #84]	@ 0x54
 8016130:	e003      	b.n	801613a <HAL_RCCEx_PeriphCLKConfig+0xc72>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8016132:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8016136:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 801613a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801613e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8016142:	f002 0340 	and.w	r3, r2, #64	@ 0x40
 8016146:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 801614a:	2300      	movs	r3, #0
 801614c:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 8016150:	e9d7 1228 	ldrd	r1, r2, [r7, #160]	@ 0xa0
 8016154:	460b      	mov	r3, r1
 8016156:	4313      	orrs	r3, r2
 8016158:	d058      	beq.n	801620c <HAL_RCCEx_PeriphCLKConfig+0xd44>
  {
    switch (PeriphClkInit->Lptim2ClockSelection)
 801615a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801615e:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8016162:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 8016166:	d033      	beq.n	80161d0 <HAL_RCCEx_PeriphCLKConfig+0xd08>
 8016168:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 801616c:	d82c      	bhi.n	80161c8 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 801616e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8016172:	d02f      	beq.n	80161d4 <HAL_RCCEx_PeriphCLKConfig+0xd0c>
 8016174:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8016178:	d826      	bhi.n	80161c8 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 801617a:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 801617e:	d02b      	beq.n	80161d8 <HAL_RCCEx_PeriphCLKConfig+0xd10>
 8016180:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8016184:	d820      	bhi.n	80161c8 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 8016186:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 801618a:	d012      	beq.n	80161b2 <HAL_RCCEx_PeriphCLKConfig+0xcea>
 801618c:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8016190:	d81a      	bhi.n	80161c8 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 8016192:	2b00      	cmp	r3, #0
 8016194:	d022      	beq.n	80161dc <HAL_RCCEx_PeriphCLKConfig+0xd14>
 8016196:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 801619a:	d115      	bne.n	80161c8 <HAL_RCCEx_PeriphCLKConfig+0xd00>
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 801619c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80161a0:	3308      	adds	r3, #8
 80161a2:	2100      	movs	r1, #0
 80161a4:	4618      	mov	r0, r3
 80161a6:	f000 fb99 	bl	80168dc <RCCEx_PLL2_Config>
 80161aa:	4603      	mov	r3, r0
 80161ac:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 80161b0:	e015      	b.n	80161de <HAL_RCCEx_PeriphCLKConfig+0xd16>

      case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 80161b2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80161b6:	3328      	adds	r3, #40	@ 0x28
 80161b8:	2102      	movs	r1, #2
 80161ba:	4618      	mov	r0, r3
 80161bc:	f000 fc40 	bl	8016a40 <RCCEx_PLL3_Config>
 80161c0:	4603      	mov	r3, r0
 80161c2:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 80161c6:	e00a      	b.n	80161de <HAL_RCCEx_PeriphCLKConfig+0xd16>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80161c8:	2301      	movs	r3, #1
 80161ca:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80161ce:	e006      	b.n	80161de <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 80161d0:	bf00      	nop
 80161d2:	e004      	b.n	80161de <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 80161d4:	bf00      	nop
 80161d6:	e002      	b.n	80161de <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 80161d8:	bf00      	nop
 80161da:	e000      	b.n	80161de <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 80161dc:	bf00      	nop
    }

    if (ret == HAL_OK)
 80161de:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80161e2:	2b00      	cmp	r3, #0
 80161e4:	d10e      	bne.n	8016204 <HAL_RCCEx_PeriphCLKConfig+0xd3c>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 80161e6:	4b06      	ldr	r3, [pc, #24]	@ (8016200 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 80161e8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80161ea:	f423 51e0 	bic.w	r1, r3, #7168	@ 0x1c00
 80161ee:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80161f2:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 80161f6:	4a02      	ldr	r2, [pc, #8]	@ (8016200 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 80161f8:	430b      	orrs	r3, r1
 80161fa:	6593      	str	r3, [r2, #88]	@ 0x58
 80161fc:	e006      	b.n	801620c <HAL_RCCEx_PeriphCLKConfig+0xd44>
 80161fe:	bf00      	nop
 8016200:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8016204:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8016208:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 801620c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8016210:	e9d3 2300 	ldrd	r2, r3, [r3]
 8016214:	f002 0380 	and.w	r3, r2, #128	@ 0x80
 8016218:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 801621c:	2300      	movs	r3, #0
 801621e:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8016222:	e9d7 1226 	ldrd	r1, r2, [r7, #152]	@ 0x98
 8016226:	460b      	mov	r3, r1
 8016228:	4313      	orrs	r3, r2
 801622a:	d055      	beq.n	80162d8 <HAL_RCCEx_PeriphCLKConfig+0xe10>
  {
    switch (PeriphClkInit->Lptim345ClockSelection)
 801622c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8016230:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8016234:	f5b3 4f20 	cmp.w	r3, #40960	@ 0xa000
 8016238:	d033      	beq.n	80162a2 <HAL_RCCEx_PeriphCLKConfig+0xdda>
 801623a:	f5b3 4f20 	cmp.w	r3, #40960	@ 0xa000
 801623e:	d82c      	bhi.n	801629a <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 8016240:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8016244:	d02f      	beq.n	80162a6 <HAL_RCCEx_PeriphCLKConfig+0xdde>
 8016246:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 801624a:	d826      	bhi.n	801629a <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 801624c:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
 8016250:	d02b      	beq.n	80162aa <HAL_RCCEx_PeriphCLKConfig+0xde2>
 8016252:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
 8016256:	d820      	bhi.n	801629a <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 8016258:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 801625c:	d012      	beq.n	8016284 <HAL_RCCEx_PeriphCLKConfig+0xdbc>
 801625e:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8016262:	d81a      	bhi.n	801629a <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 8016264:	2b00      	cmp	r3, #0
 8016266:	d022      	beq.n	80162ae <HAL_RCCEx_PeriphCLKConfig+0xde6>
 8016268:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 801626c:	d115      	bne.n	801629a <HAL_RCCEx_PeriphCLKConfig+0xdd2>
      case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 801626e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8016272:	3308      	adds	r3, #8
 8016274:	2100      	movs	r1, #0
 8016276:	4618      	mov	r0, r3
 8016278:	f000 fb30 	bl	80168dc <RCCEx_PLL2_Config>
 801627c:	4603      	mov	r3, r0
 801627e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 8016282:	e015      	b.n	80162b0 <HAL_RCCEx_PeriphCLKConfig+0xde8>

      case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8016284:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8016288:	3328      	adds	r3, #40	@ 0x28
 801628a:	2102      	movs	r1, #2
 801628c:	4618      	mov	r0, r3
 801628e:	f000 fbd7 	bl	8016a40 <RCCEx_PLL3_Config>
 8016292:	4603      	mov	r3, r0
 8016294:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 8016298:	e00a      	b.n	80162b0 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 801629a:	2301      	movs	r3, #1
 801629c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80162a0:	e006      	b.n	80162b0 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 80162a2:	bf00      	nop
 80162a4:	e004      	b.n	80162b0 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 80162a6:	bf00      	nop
 80162a8:	e002      	b.n	80162b0 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 80162aa:	bf00      	nop
 80162ac:	e000      	b.n	80162b0 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 80162ae:	bf00      	nop
    }

    if (ret == HAL_OK)
 80162b0:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80162b4:	2b00      	cmp	r3, #0
 80162b6:	d10b      	bne.n	80162d0 <HAL_RCCEx_PeriphCLKConfig+0xe08>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 80162b8:	4ba1      	ldr	r3, [pc, #644]	@ (8016540 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80162ba:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80162bc:	f423 4160 	bic.w	r1, r3, #57344	@ 0xe000
 80162c0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80162c4:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 80162c8:	4a9d      	ldr	r2, [pc, #628]	@ (8016540 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80162ca:	430b      	orrs	r3, r1
 80162cc:	6593      	str	r3, [r2, #88]	@ 0x58
 80162ce:	e003      	b.n	80162d8 <HAL_RCCEx_PeriphCLKConfig+0xe10>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80162d0:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80162d4:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126

    __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 80162d8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80162dc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80162e0:	f002 0308 	and.w	r3, r2, #8
 80162e4:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 80162e8:	2300      	movs	r3, #0
 80162ea:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 80162ee:	e9d7 1224 	ldrd	r1, r2, [r7, #144]	@ 0x90
 80162f2:	460b      	mov	r3, r1
 80162f4:	4313      	orrs	r3, r2
 80162f6:	d01e      	beq.n	8016336 <HAL_RCCEx_PeriphCLKConfig+0xe6e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection) == RCC_I2C123CLKSOURCE_PLL3)
 80162f8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80162fc:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8016300:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8016304:	d10c      	bne.n	8016320 <HAL_RCCEx_PeriphCLKConfig+0xe58>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8016306:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801630a:	3328      	adds	r3, #40	@ 0x28
 801630c:	2102      	movs	r1, #2
 801630e:	4618      	mov	r0, r3
 8016310:	f000 fb96 	bl	8016a40 <RCCEx_PLL3_Config>
 8016314:	4603      	mov	r3, r0
 8016316:	2b00      	cmp	r3, #0
 8016318:	d002      	beq.n	8016320 <HAL_RCCEx_PeriphCLKConfig+0xe58>
      {
        status = HAL_ERROR;
 801631a:	2301      	movs	r3, #1
 801631c:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
      }
    }

    __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 8016320:	4b87      	ldr	r3, [pc, #540]	@ (8016540 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8016322:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8016324:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8016328:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801632c:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8016330:	4a83      	ldr	r2, [pc, #524]	@ (8016540 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8016332:	430b      	orrs	r3, r1
 8016334:	6553      	str	r3, [r2, #84]	@ 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8016336:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801633a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801633e:	f002 0310 	and.w	r3, r2, #16
 8016342:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8016346:	2300      	movs	r3, #0
 8016348:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 801634c:	e9d7 1222 	ldrd	r1, r2, [r7, #136]	@ 0x88
 8016350:	460b      	mov	r3, r1
 8016352:	4313      	orrs	r3, r2
 8016354:	d01e      	beq.n	8016394 <HAL_RCCEx_PeriphCLKConfig+0xecc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3)
 8016356:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801635a:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 801635e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8016362:	d10c      	bne.n	801637e <HAL_RCCEx_PeriphCLKConfig+0xeb6>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8016364:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8016368:	3328      	adds	r3, #40	@ 0x28
 801636a:	2102      	movs	r1, #2
 801636c:	4618      	mov	r0, r3
 801636e:	f000 fb67 	bl	8016a40 <RCCEx_PLL3_Config>
 8016372:	4603      	mov	r3, r0
 8016374:	2b00      	cmp	r3, #0
 8016376:	d002      	beq.n	801637e <HAL_RCCEx_PeriphCLKConfig+0xeb6>
      {
        status = HAL_ERROR;
 8016378:	2301      	movs	r3, #1
 801637a:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
      }
    }

    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 801637e:	4b70      	ldr	r3, [pc, #448]	@ (8016540 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8016380:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8016382:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 8016386:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801638a:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 801638e:	4a6c      	ldr	r2, [pc, #432]	@ (8016540 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8016390:	430b      	orrs	r3, r1
 8016392:	6593      	str	r3, [r2, #88]	@ 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8016394:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8016398:	e9d3 2300 	ldrd	r2, r3, [r3]
 801639c:	f402 2300 	and.w	r3, r2, #524288	@ 0x80000
 80163a0:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 80163a4:	2300      	movs	r3, #0
 80163a6:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 80163aa:	e9d7 1220 	ldrd	r1, r2, [r7, #128]	@ 0x80
 80163ae:	460b      	mov	r3, r1
 80163b0:	4313      	orrs	r3, r2
 80163b2:	d03e      	beq.n	8016432 <HAL_RCCEx_PeriphCLKConfig+0xf6a>
  {
    switch (PeriphClkInit->AdcClockSelection)
 80163b4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80163b8:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 80163bc:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80163c0:	d022      	beq.n	8016408 <HAL_RCCEx_PeriphCLKConfig+0xf40>
 80163c2:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80163c6:	d81b      	bhi.n	8016400 <HAL_RCCEx_PeriphCLKConfig+0xf38>
 80163c8:	2b00      	cmp	r3, #0
 80163ca:	d003      	beq.n	80163d4 <HAL_RCCEx_PeriphCLKConfig+0xf0c>
 80163cc:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80163d0:	d00b      	beq.n	80163ea <HAL_RCCEx_PeriphCLKConfig+0xf22>
 80163d2:	e015      	b.n	8016400 <HAL_RCCEx_PeriphCLKConfig+0xf38>
    {

      case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80163d4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80163d8:	3308      	adds	r3, #8
 80163da:	2100      	movs	r1, #0
 80163dc:	4618      	mov	r0, r3
 80163de:	f000 fa7d 	bl	80168dc <RCCEx_PLL2_Config>
 80163e2:	4603      	mov	r3, r0
 80163e4:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* ADC clock source configuration done later after clock selection check */
        break;
 80163e8:	e00f      	b.n	801640a <HAL_RCCEx_PeriphCLKConfig+0xf42>

      case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 80163ea:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80163ee:	3328      	adds	r3, #40	@ 0x28
 80163f0:	2102      	movs	r1, #2
 80163f2:	4618      	mov	r0, r3
 80163f4:	f000 fb24 	bl	8016a40 <RCCEx_PLL3_Config>
 80163f8:	4603      	mov	r3, r0
 80163fa:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* ADC clock source configuration done later after clock selection check */
        break;
 80163fe:	e004      	b.n	801640a <HAL_RCCEx_PeriphCLKConfig+0xf42>
        /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
        /* ADC clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8016400:	2301      	movs	r3, #1
 8016402:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8016406:	e000      	b.n	801640a <HAL_RCCEx_PeriphCLKConfig+0xf42>
        break;
 8016408:	bf00      	nop
    }

    if (ret == HAL_OK)
 801640a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 801640e:	2b00      	cmp	r3, #0
 8016410:	d10b      	bne.n	801642a <HAL_RCCEx_PeriphCLKConfig+0xf62>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8016412:	4b4b      	ldr	r3, [pc, #300]	@ (8016540 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8016414:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8016416:	f423 3140 	bic.w	r1, r3, #196608	@ 0x30000
 801641a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801641e:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8016422:	4a47      	ldr	r2, [pc, #284]	@ (8016540 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8016424:	430b      	orrs	r3, r1
 8016426:	6593      	str	r3, [r2, #88]	@ 0x58
 8016428:	e003      	b.n	8016432 <HAL_RCCEx_PeriphCLKConfig+0xf6a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 801642a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 801642e:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8016432:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8016436:	e9d3 2300 	ldrd	r2, r3, [r3]
 801643a:	f402 2380 	and.w	r3, r2, #262144	@ 0x40000
 801643e:	67bb      	str	r3, [r7, #120]	@ 0x78
 8016440:	2300      	movs	r3, #0
 8016442:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8016444:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	@ 0x78
 8016448:	460b      	mov	r3, r1
 801644a:	4313      	orrs	r3, r2
 801644c:	d03b      	beq.n	80164c6 <HAL_RCCEx_PeriphCLKConfig+0xffe>
  {

    switch (PeriphClkInit->UsbClockSelection)
 801644e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8016452:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8016456:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 801645a:	d01f      	beq.n	801649c <HAL_RCCEx_PeriphCLKConfig+0xfd4>
 801645c:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8016460:	d818      	bhi.n	8016494 <HAL_RCCEx_PeriphCLKConfig+0xfcc>
 8016462:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8016466:	d003      	beq.n	8016470 <HAL_RCCEx_PeriphCLKConfig+0xfa8>
 8016468:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 801646c:	d007      	beq.n	801647e <HAL_RCCEx_PeriphCLKConfig+0xfb6>
 801646e:	e011      	b.n	8016494 <HAL_RCCEx_PeriphCLKConfig+0xfcc>
    {
      case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
        /* Enable USB Clock output generated form System USB . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8016470:	4b33      	ldr	r3, [pc, #204]	@ (8016540 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8016472:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8016474:	4a32      	ldr	r2, [pc, #200]	@ (8016540 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8016476:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 801647a:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* USB clock source configuration done later after clock selection check */
        break;
 801647c:	e00f      	b.n	801649e <HAL_RCCEx_PeriphCLKConfig+0xfd6>

      case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 801647e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8016482:	3328      	adds	r3, #40	@ 0x28
 8016484:	2101      	movs	r1, #1
 8016486:	4618      	mov	r0, r3
 8016488:	f000 fada 	bl	8016a40 <RCCEx_PLL3_Config>
 801648c:	4603      	mov	r3, r0
 801648e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* USB clock source configuration done later after clock selection check */
        break;
 8016492:	e004      	b.n	801649e <HAL_RCCEx_PeriphCLKConfig+0xfd6>
        /* HSI48 oscillator is used as source of USB clock */
        /* USB clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8016494:	2301      	movs	r3, #1
 8016496:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 801649a:	e000      	b.n	801649e <HAL_RCCEx_PeriphCLKConfig+0xfd6>
        break;
 801649c:	bf00      	nop
    }

    if (ret == HAL_OK)
 801649e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80164a2:	2b00      	cmp	r3, #0
 80164a4:	d10b      	bne.n	80164be <HAL_RCCEx_PeriphCLKConfig+0xff6>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80164a6:	4b26      	ldr	r3, [pc, #152]	@ (8016540 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80164a8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80164aa:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 80164ae:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80164b2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80164b6:	4a22      	ldr	r2, [pc, #136]	@ (8016540 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80164b8:	430b      	orrs	r3, r1
 80164ba:	6553      	str	r3, [r2, #84]	@ 0x54
 80164bc:	e003      	b.n	80164c6 <HAL_RCCEx_PeriphCLKConfig+0xffe>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80164be:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80164c2:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 80164c6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80164ca:	e9d3 2300 	ldrd	r2, r3, [r3]
 80164ce:	f402 3380 	and.w	r3, r2, #65536	@ 0x10000
 80164d2:	673b      	str	r3, [r7, #112]	@ 0x70
 80164d4:	2300      	movs	r3, #0
 80164d6:	677b      	str	r3, [r7, #116]	@ 0x74
 80164d8:	e9d7 121c 	ldrd	r1, r2, [r7, #112]	@ 0x70
 80164dc:	460b      	mov	r3, r1
 80164de:	4313      	orrs	r3, r2
 80164e0:	d034      	beq.n	801654c <HAL_RCCEx_PeriphCLKConfig+0x1084>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch (PeriphClkInit->SdmmcClockSelection)
 80164e2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80164e6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80164e8:	2b00      	cmp	r3, #0
 80164ea:	d003      	beq.n	80164f4 <HAL_RCCEx_PeriphCLKConfig+0x102c>
 80164ec:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80164f0:	d007      	beq.n	8016502 <HAL_RCCEx_PeriphCLKConfig+0x103a>
 80164f2:	e011      	b.n	8016518 <HAL_RCCEx_PeriphCLKConfig+0x1050>
    {
      case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
        /* Enable SDMMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80164f4:	4b12      	ldr	r3, [pc, #72]	@ (8016540 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80164f6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80164f8:	4a11      	ldr	r2, [pc, #68]	@ (8016540 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80164fa:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80164fe:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 8016500:	e00e      	b.n	8016520 <HAL_RCCEx_PeriphCLKConfig+0x1058>

      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8016502:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8016506:	3308      	adds	r3, #8
 8016508:	2102      	movs	r1, #2
 801650a:	4618      	mov	r0, r3
 801650c:	f000 f9e6 	bl	80168dc <RCCEx_PLL2_Config>
 8016510:	4603      	mov	r3, r0
 8016512:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 8016516:	e003      	b.n	8016520 <HAL_RCCEx_PeriphCLKConfig+0x1058>

      default:
        ret = HAL_ERROR;
 8016518:	2301      	movs	r3, #1
 801651a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 801651e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8016520:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8016524:	2b00      	cmp	r3, #0
 8016526:	d10d      	bne.n	8016544 <HAL_RCCEx_PeriphCLKConfig+0x107c>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 8016528:	4b05      	ldr	r3, [pc, #20]	@ (8016540 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 801652a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 801652c:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8016530:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8016534:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8016536:	4a02      	ldr	r2, [pc, #8]	@ (8016540 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8016538:	430b      	orrs	r3, r1
 801653a:	64d3      	str	r3, [r2, #76]	@ 0x4c
 801653c:	e006      	b.n	801654c <HAL_RCCEx_PeriphCLKConfig+0x1084>
 801653e:	bf00      	nop
 8016540:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8016544:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8016548:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 801654c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8016550:	e9d3 2300 	ldrd	r2, r3, [r3]
 8016554:	f002 5300 	and.w	r3, r2, #536870912	@ 0x20000000
 8016558:	66bb      	str	r3, [r7, #104]	@ 0x68
 801655a:	2300      	movs	r3, #0
 801655c:	66fb      	str	r3, [r7, #108]	@ 0x6c
 801655e:	e9d7 121a 	ldrd	r1, r2, [r7, #104]	@ 0x68
 8016562:	460b      	mov	r3, r1
 8016564:	4313      	orrs	r3, r2
 8016566:	d00c      	beq.n	8016582 <HAL_RCCEx_PeriphCLKConfig+0x10ba>
  {
    if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8016568:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801656c:	3328      	adds	r3, #40	@ 0x28
 801656e:	2102      	movs	r1, #2
 8016570:	4618      	mov	r0, r3
 8016572:	f000 fa65 	bl	8016a40 <RCCEx_PLL3_Config>
 8016576:	4603      	mov	r3, r0
 8016578:	2b00      	cmp	r3, #0
 801657a:	d002      	beq.n	8016582 <HAL_RCCEx_PeriphCLKConfig+0x10ba>
    {
      status = HAL_ERROR;
 801657c:	2301      	movs	r3, #1
 801657e:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 8016582:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8016586:	e9d3 2300 	ldrd	r2, r3, [r3]
 801658a:	f402 3300 	and.w	r3, r2, #131072	@ 0x20000
 801658e:	663b      	str	r3, [r7, #96]	@ 0x60
 8016590:	2300      	movs	r3, #0
 8016592:	667b      	str	r3, [r7, #100]	@ 0x64
 8016594:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	@ 0x60
 8016598:	460b      	mov	r3, r1
 801659a:	4313      	orrs	r3, r2
 801659c:	d038      	beq.n	8016610 <HAL_RCCEx_PeriphCLKConfig+0x1148>
  {

    switch (PeriphClkInit->RngClockSelection)
 801659e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80165a2:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80165a6:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80165aa:	d018      	beq.n	80165de <HAL_RCCEx_PeriphCLKConfig+0x1116>
 80165ac:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80165b0:	d811      	bhi.n	80165d6 <HAL_RCCEx_PeriphCLKConfig+0x110e>
 80165b2:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80165b6:	d014      	beq.n	80165e2 <HAL_RCCEx_PeriphCLKConfig+0x111a>
 80165b8:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80165bc:	d80b      	bhi.n	80165d6 <HAL_RCCEx_PeriphCLKConfig+0x110e>
 80165be:	2b00      	cmp	r3, #0
 80165c0:	d011      	beq.n	80165e6 <HAL_RCCEx_PeriphCLKConfig+0x111e>
 80165c2:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80165c6:	d106      	bne.n	80165d6 <HAL_RCCEx_PeriphCLKConfig+0x110e>
    {
      case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
        /* Enable RNG Clock output generated form System RNG . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80165c8:	4bc3      	ldr	r3, [pc, #780]	@ (80168d8 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80165ca:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80165cc:	4ac2      	ldr	r2, [pc, #776]	@ (80168d8 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80165ce:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80165d2:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* RNG clock source configuration done later after clock selection check */
        break;
 80165d4:	e008      	b.n	80165e8 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        /* HSI48 oscillator is used as source of RNG clock */
        /* RNG clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80165d6:	2301      	movs	r3, #1
 80165d8:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80165dc:	e004      	b.n	80165e8 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 80165de:	bf00      	nop
 80165e0:	e002      	b.n	80165e8 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 80165e2:	bf00      	nop
 80165e4:	e000      	b.n	80165e8 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 80165e6:	bf00      	nop
    }

    if (ret == HAL_OK)
 80165e8:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80165ec:	2b00      	cmp	r3, #0
 80165ee:	d10b      	bne.n	8016608 <HAL_RCCEx_PeriphCLKConfig+0x1140>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80165f0:	4bb9      	ldr	r3, [pc, #740]	@ (80168d8 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80165f2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80165f4:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 80165f8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80165fc:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8016600:	4ab5      	ldr	r2, [pc, #724]	@ (80168d8 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8016602:	430b      	orrs	r3, r1
 8016604:	6553      	str	r3, [r2, #84]	@ 0x54
 8016606:	e003      	b.n	8016610 <HAL_RCCEx_PeriphCLKConfig+0x1148>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8016608:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 801660c:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8016610:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8016614:	e9d3 2300 	ldrd	r2, r3, [r3]
 8016618:	f402 1380 	and.w	r3, r2, #1048576	@ 0x100000
 801661c:	65bb      	str	r3, [r7, #88]	@ 0x58
 801661e:	2300      	movs	r3, #0
 8016620:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8016622:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	@ 0x58
 8016626:	460b      	mov	r3, r1
 8016628:	4313      	orrs	r3, r2
 801662a:	d009      	beq.n	8016640 <HAL_RCCEx_PeriphCLKConfig+0x1178>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 801662c:	4baa      	ldr	r3, [pc, #680]	@ (80168d8 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 801662e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8016630:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 8016634:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8016638:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 801663a:	4aa7      	ldr	r2, [pc, #668]	@ (80168d8 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 801663c:	430b      	orrs	r3, r1
 801663e:	6513      	str	r3, [r2, #80]	@ 0x50
  }
#if defined(HRTIM1)
  /*------------------------------ HRTIM1 clock Configuration ----------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
 8016640:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8016644:	e9d3 2300 	ldrd	r2, r3, [r3]
 8016648:	f002 5380 	and.w	r3, r2, #268435456	@ 0x10000000
 801664c:	653b      	str	r3, [r7, #80]	@ 0x50
 801664e:	2300      	movs	r3, #0
 8016650:	657b      	str	r3, [r7, #84]	@ 0x54
 8016652:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	@ 0x50
 8016656:	460b      	mov	r3, r1
 8016658:	4313      	orrs	r3, r2
 801665a:	d00a      	beq.n	8016672 <HAL_RCCEx_PeriphCLKConfig+0x11aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HRTIM1CLKSOURCE(PeriphClkInit->Hrtim1ClockSelection));

    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
 801665c:	4b9e      	ldr	r3, [pc, #632]	@ (80168d8 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 801665e:	691b      	ldr	r3, [r3, #16]
 8016660:	f423 4180 	bic.w	r1, r3, #16384	@ 0x4000
 8016664:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8016668:	f8d3 30b8 	ldr.w	r3, [r3, #184]	@ 0xb8
 801666c:	4a9a      	ldr	r2, [pc, #616]	@ (80168d8 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 801666e:	430b      	orrs	r3, r1
 8016670:	6113      	str	r3, [r2, #16]
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8016672:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8016676:	e9d3 2300 	ldrd	r2, r3, [r3]
 801667a:	f402 1300 	and.w	r3, r2, #2097152	@ 0x200000
 801667e:	64bb      	str	r3, [r7, #72]	@ 0x48
 8016680:	2300      	movs	r3, #0
 8016682:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8016684:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	@ 0x48
 8016688:	460b      	mov	r3, r1
 801668a:	4313      	orrs	r3, r2
 801668c:	d009      	beq.n	80166a2 <HAL_RCCEx_PeriphCLKConfig+0x11da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 801668e:	4b92      	ldr	r3, [pc, #584]	@ (80168d8 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8016690:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8016692:	f023 7180 	bic.w	r1, r3, #16777216	@ 0x1000000
 8016696:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801669a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 801669c:	4a8e      	ldr	r2, [pc, #568]	@ (80168d8 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 801669e:	430b      	orrs	r3, r1
 80166a0:	6513      	str	r3, [r2, #80]	@ 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 80166a2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80166a6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80166aa:	f002 4380 	and.w	r3, r2, #1073741824	@ 0x40000000
 80166ae:	643b      	str	r3, [r7, #64]	@ 0x40
 80166b0:	2300      	movs	r3, #0
 80166b2:	647b      	str	r3, [r7, #68]	@ 0x44
 80166b4:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	@ 0x40
 80166b8:	460b      	mov	r3, r1
 80166ba:	4313      	orrs	r3, r2
 80166bc:	d00e      	beq.n	80166dc <HAL_RCCEx_PeriphCLKConfig+0x1214>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 80166be:	4b86      	ldr	r3, [pc, #536]	@ (80168d8 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80166c0:	691b      	ldr	r3, [r3, #16]
 80166c2:	4a85      	ldr	r2, [pc, #532]	@ (80168d8 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80166c4:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 80166c8:	6113      	str	r3, [r2, #16]
 80166ca:	4b83      	ldr	r3, [pc, #524]	@ (80168d8 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80166cc:	6919      	ldr	r1, [r3, #16]
 80166ce:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80166d2:	f8d3 30bc 	ldr.w	r3, [r3, #188]	@ 0xbc
 80166d6:	4a80      	ldr	r2, [pc, #512]	@ (80168d8 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80166d8:	430b      	orrs	r3, r1
 80166da:	6113      	str	r3, [r2, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 80166dc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80166e0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80166e4:	f002 4300 	and.w	r3, r2, #2147483648	@ 0x80000000
 80166e8:	63bb      	str	r3, [r7, #56]	@ 0x38
 80166ea:	2300      	movs	r3, #0
 80166ec:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80166ee:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	@ 0x38
 80166f2:	460b      	mov	r3, r1
 80166f4:	4313      	orrs	r3, r2
 80166f6:	d009      	beq.n	801670c <HAL_RCCEx_PeriphCLKConfig+0x1244>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 80166f8:	4b77      	ldr	r3, [pc, #476]	@ (80168d8 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80166fa:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80166fc:	f023 5140 	bic.w	r1, r3, #805306368	@ 0x30000000
 8016700:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8016704:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8016706:	4a74      	ldr	r2, [pc, #464]	@ (80168d8 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8016708:	430b      	orrs	r3, r1
 801670a:	64d3      	str	r3, [r2, #76]	@ 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 801670c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8016710:	e9d3 2300 	ldrd	r2, r3, [r3]
 8016714:	f402 0300 	and.w	r3, r2, #8388608	@ 0x800000
 8016718:	633b      	str	r3, [r7, #48]	@ 0x30
 801671a:	2300      	movs	r3, #0
 801671c:	637b      	str	r3, [r7, #52]	@ 0x34
 801671e:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	@ 0x30
 8016722:	460b      	mov	r3, r1
 8016724:	4313      	orrs	r3, r2
 8016726:	d00a      	beq.n	801673e <HAL_RCCEx_PeriphCLKConfig+0x1276>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8016728:	4b6b      	ldr	r3, [pc, #428]	@ (80168d8 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 801672a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 801672c:	f423 0140 	bic.w	r1, r3, #12582912	@ 0xc00000
 8016730:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8016734:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8016738:	4a67      	ldr	r2, [pc, #412]	@ (80168d8 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 801673a:	430b      	orrs	r3, r1
 801673c:	6553      	str	r3, [r2, #84]	@ 0x54
  }

  /*---------------------------- PLL2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVP) == RCC_PERIPHCLK_PLL2_DIVP)
 801673e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8016742:	e9d3 2300 	ldrd	r2, r3, [r3]
 8016746:	2100      	movs	r1, #0
 8016748:	62b9      	str	r1, [r7, #40]	@ 0x28
 801674a:	f003 0301 	and.w	r3, r3, #1
 801674e:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8016750:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	@ 0x28
 8016754:	460b      	mov	r3, r1
 8016756:	4313      	orrs	r3, r2
 8016758:	d011      	beq.n	801677e <HAL_RCCEx_PeriphCLKConfig+0x12b6>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 801675a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801675e:	3308      	adds	r3, #8
 8016760:	2100      	movs	r1, #0
 8016762:	4618      	mov	r0, r3
 8016764:	f000 f8ba 	bl	80168dc <RCCEx_PLL2_Config>
 8016768:	4603      	mov	r3, r0
 801676a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 801676e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8016772:	2b00      	cmp	r3, #0
 8016774:	d003      	beq.n	801677e <HAL_RCCEx_PeriphCLKConfig+0x12b6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8016776:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 801677a:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    } 
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVQ) == RCC_PERIPHCLK_PLL2_DIVQ)
 801677e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8016782:	e9d3 2300 	ldrd	r2, r3, [r3]
 8016786:	2100      	movs	r1, #0
 8016788:	6239      	str	r1, [r7, #32]
 801678a:	f003 0302 	and.w	r3, r3, #2
 801678e:	627b      	str	r3, [r7, #36]	@ 0x24
 8016790:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 8016794:	460b      	mov	r3, r1
 8016796:	4313      	orrs	r3, r2
 8016798:	d011      	beq.n	80167be <HAL_RCCEx_PeriphCLKConfig+0x12f6>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 801679a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801679e:	3308      	adds	r3, #8
 80167a0:	2101      	movs	r1, #1
 80167a2:	4618      	mov	r0, r3
 80167a4:	f000 f89a 	bl	80168dc <RCCEx_PLL2_Config>
 80167a8:	4603      	mov	r3, r0
 80167aa:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 80167ae:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80167b2:	2b00      	cmp	r3, #0
 80167b4:	d003      	beq.n	80167be <HAL_RCCEx_PeriphCLKConfig+0x12f6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 80167b6:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80167ba:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVR) == RCC_PERIPHCLK_PLL2_DIVR)
 80167be:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80167c2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80167c6:	2100      	movs	r1, #0
 80167c8:	61b9      	str	r1, [r7, #24]
 80167ca:	f003 0304 	and.w	r3, r3, #4
 80167ce:	61fb      	str	r3, [r7, #28]
 80167d0:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 80167d4:	460b      	mov	r3, r1
 80167d6:	4313      	orrs	r3, r2
 80167d8:	d011      	beq.n	80167fe <HAL_RCCEx_PeriphCLKConfig+0x1336>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 80167da:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80167de:	3308      	adds	r3, #8
 80167e0:	2102      	movs	r1, #2
 80167e2:	4618      	mov	r0, r3
 80167e4:	f000 f87a 	bl	80168dc <RCCEx_PLL2_Config>
 80167e8:	4603      	mov	r3, r0
 80167ea:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 80167ee:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80167f2:	2b00      	cmp	r3, #0
 80167f4:	d003      	beq.n	80167fe <HAL_RCCEx_PeriphCLKConfig+0x1336>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 80167f6:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80167fa:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  

  /*---------------------------- PLL3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVP) == RCC_PERIPHCLK_PLL3_DIVP)
 80167fe:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8016802:	e9d3 2300 	ldrd	r2, r3, [r3]
 8016806:	2100      	movs	r1, #0
 8016808:	6139      	str	r1, [r7, #16]
 801680a:	f003 0308 	and.w	r3, r3, #8
 801680e:	617b      	str	r3, [r7, #20]
 8016810:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 8016814:	460b      	mov	r3, r1
 8016816:	4313      	orrs	r3, r2
 8016818:	d011      	beq.n	801683e <HAL_RCCEx_PeriphCLKConfig+0x1376>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 801681a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801681e:	3328      	adds	r3, #40	@ 0x28
 8016820:	2100      	movs	r1, #0
 8016822:	4618      	mov	r0, r3
 8016824:	f000 f90c 	bl	8016a40 <RCCEx_PLL3_Config>
 8016828:	4603      	mov	r3, r0
 801682a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
  
    if (ret == HAL_OK)
 801682e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8016832:	2b00      	cmp	r3, #0
 8016834:	d003      	beq.n	801683e <HAL_RCCEx_PeriphCLKConfig+0x1376>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8016836:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 801683a:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVQ) == RCC_PERIPHCLK_PLL3_DIVQ)
 801683e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8016842:	e9d3 2300 	ldrd	r2, r3, [r3]
 8016846:	2100      	movs	r1, #0
 8016848:	60b9      	str	r1, [r7, #8]
 801684a:	f003 0310 	and.w	r3, r3, #16
 801684e:	60fb      	str	r3, [r7, #12]
 8016850:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 8016854:	460b      	mov	r3, r1
 8016856:	4313      	orrs	r3, r2
 8016858:	d011      	beq.n	801687e <HAL_RCCEx_PeriphCLKConfig+0x13b6>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 801685a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801685e:	3328      	adds	r3, #40	@ 0x28
 8016860:	2101      	movs	r1, #1
 8016862:	4618      	mov	r0, r3
 8016864:	f000 f8ec 	bl	8016a40 <RCCEx_PLL3_Config>
 8016868:	4603      	mov	r3, r0
 801686a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 801686e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8016872:	2b00      	cmp	r3, #0
 8016874:	d003      	beq.n	801687e <HAL_RCCEx_PeriphCLKConfig+0x13b6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8016876:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 801687a:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVR) == RCC_PERIPHCLK_PLL3_DIVR)
 801687e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8016882:	e9d3 2300 	ldrd	r2, r3, [r3]
 8016886:	2100      	movs	r1, #0
 8016888:	6039      	str	r1, [r7, #0]
 801688a:	f003 0320 	and.w	r3, r3, #32
 801688e:	607b      	str	r3, [r7, #4]
 8016890:	e9d7 1200 	ldrd	r1, r2, [r7]
 8016894:	460b      	mov	r3, r1
 8016896:	4313      	orrs	r3, r2
 8016898:	d011      	beq.n	80168be <HAL_RCCEx_PeriphCLKConfig+0x13f6>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 801689a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801689e:	3328      	adds	r3, #40	@ 0x28
 80168a0:	2102      	movs	r1, #2
 80168a2:	4618      	mov	r0, r3
 80168a4:	f000 f8cc 	bl	8016a40 <RCCEx_PLL3_Config>
 80168a8:	4603      	mov	r3, r0
 80168aa:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 80168ae:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80168b2:	2b00      	cmp	r3, #0
 80168b4:	d003      	beq.n	80168be <HAL_RCCEx_PeriphCLKConfig+0x13f6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 80168b6:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80168ba:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    } 
  }

  if (status == HAL_OK)
 80168be:	f897 3126 	ldrb.w	r3, [r7, #294]	@ 0x126
 80168c2:	2b00      	cmp	r3, #0
 80168c4:	d101      	bne.n	80168ca <HAL_RCCEx_PeriphCLKConfig+0x1402>
  {
    return HAL_OK;
 80168c6:	2300      	movs	r3, #0
 80168c8:	e000      	b.n	80168cc <HAL_RCCEx_PeriphCLKConfig+0x1404>
  }
  return HAL_ERROR;
 80168ca:	2301      	movs	r3, #1
}
 80168cc:	4618      	mov	r0, r3
 80168ce:	f507 7794 	add.w	r7, r7, #296	@ 0x128
 80168d2:	46bd      	mov	sp, r7
 80168d4:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80168d8:	58024400 	.word	0x58024400

080168dc <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 80168dc:	b580      	push	{r7, lr}
 80168de:	b084      	sub	sp, #16
 80168e0:	af00      	add	r7, sp, #0
 80168e2:	6078      	str	r0, [r7, #4]
 80168e4:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80168e6:	2300      	movs	r3, #0
 80168e8:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 80168ea:	4b53      	ldr	r3, [pc, #332]	@ (8016a38 <RCCEx_PLL2_Config+0x15c>)
 80168ec:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80168ee:	f003 0303 	and.w	r3, r3, #3
 80168f2:	2b03      	cmp	r3, #3
 80168f4:	d101      	bne.n	80168fa <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 80168f6:	2301      	movs	r3, #1
 80168f8:	e099      	b.n	8016a2e <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 80168fa:	4b4f      	ldr	r3, [pc, #316]	@ (8016a38 <RCCEx_PLL2_Config+0x15c>)
 80168fc:	681b      	ldr	r3, [r3, #0]
 80168fe:	4a4e      	ldr	r2, [pc, #312]	@ (8016a38 <RCCEx_PLL2_Config+0x15c>)
 8016900:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8016904:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8016906:	f7fa fb83 	bl	8011010 <HAL_GetTick>
 801690a:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 801690c:	e008      	b.n	8016920 <RCCEx_PLL2_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 801690e:	f7fa fb7f 	bl	8011010 <HAL_GetTick>
 8016912:	4602      	mov	r2, r0
 8016914:	68bb      	ldr	r3, [r7, #8]
 8016916:	1ad3      	subs	r3, r2, r3
 8016918:	2b02      	cmp	r3, #2
 801691a:	d901      	bls.n	8016920 <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 801691c:	2303      	movs	r3, #3
 801691e:	e086      	b.n	8016a2e <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8016920:	4b45      	ldr	r3, [pc, #276]	@ (8016a38 <RCCEx_PLL2_Config+0x15c>)
 8016922:	681b      	ldr	r3, [r3, #0]
 8016924:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8016928:	2b00      	cmp	r3, #0
 801692a:	d1f0      	bne.n	801690e <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 801692c:	4b42      	ldr	r3, [pc, #264]	@ (8016a38 <RCCEx_PLL2_Config+0x15c>)
 801692e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8016930:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 8016934:	687b      	ldr	r3, [r7, #4]
 8016936:	681b      	ldr	r3, [r3, #0]
 8016938:	031b      	lsls	r3, r3, #12
 801693a:	493f      	ldr	r1, [pc, #252]	@ (8016a38 <RCCEx_PLL2_Config+0x15c>)
 801693c:	4313      	orrs	r3, r2
 801693e:	628b      	str	r3, [r1, #40]	@ 0x28
 8016940:	687b      	ldr	r3, [r7, #4]
 8016942:	685b      	ldr	r3, [r3, #4]
 8016944:	3b01      	subs	r3, #1
 8016946:	f3c3 0208 	ubfx	r2, r3, #0, #9
 801694a:	687b      	ldr	r3, [r7, #4]
 801694c:	689b      	ldr	r3, [r3, #8]
 801694e:	3b01      	subs	r3, #1
 8016950:	025b      	lsls	r3, r3, #9
 8016952:	b29b      	uxth	r3, r3
 8016954:	431a      	orrs	r2, r3
 8016956:	687b      	ldr	r3, [r7, #4]
 8016958:	68db      	ldr	r3, [r3, #12]
 801695a:	3b01      	subs	r3, #1
 801695c:	041b      	lsls	r3, r3, #16
 801695e:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 8016962:	431a      	orrs	r2, r3
 8016964:	687b      	ldr	r3, [r7, #4]
 8016966:	691b      	ldr	r3, [r3, #16]
 8016968:	3b01      	subs	r3, #1
 801696a:	061b      	lsls	r3, r3, #24
 801696c:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 8016970:	4931      	ldr	r1, [pc, #196]	@ (8016a38 <RCCEx_PLL2_Config+0x15c>)
 8016972:	4313      	orrs	r3, r2
 8016974:	638b      	str	r3, [r1, #56]	@ 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 8016976:	4b30      	ldr	r3, [pc, #192]	@ (8016a38 <RCCEx_PLL2_Config+0x15c>)
 8016978:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801697a:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 801697e:	687b      	ldr	r3, [r7, #4]
 8016980:	695b      	ldr	r3, [r3, #20]
 8016982:	492d      	ldr	r1, [pc, #180]	@ (8016a38 <RCCEx_PLL2_Config+0x15c>)
 8016984:	4313      	orrs	r3, r2
 8016986:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 8016988:	4b2b      	ldr	r3, [pc, #172]	@ (8016a38 <RCCEx_PLL2_Config+0x15c>)
 801698a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801698c:	f023 0220 	bic.w	r2, r3, #32
 8016990:	687b      	ldr	r3, [r7, #4]
 8016992:	699b      	ldr	r3, [r3, #24]
 8016994:	4928      	ldr	r1, [pc, #160]	@ (8016a38 <RCCEx_PLL2_Config+0x15c>)
 8016996:	4313      	orrs	r3, r2
 8016998:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 801699a:	4b27      	ldr	r3, [pc, #156]	@ (8016a38 <RCCEx_PLL2_Config+0x15c>)
 801699c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801699e:	4a26      	ldr	r2, [pc, #152]	@ (8016a38 <RCCEx_PLL2_Config+0x15c>)
 80169a0:	f023 0310 	bic.w	r3, r3, #16
 80169a4:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 80169a6:	4b24      	ldr	r3, [pc, #144]	@ (8016a38 <RCCEx_PLL2_Config+0x15c>)
 80169a8:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80169aa:	4b24      	ldr	r3, [pc, #144]	@ (8016a3c <RCCEx_PLL2_Config+0x160>)
 80169ac:	4013      	ands	r3, r2
 80169ae:	687a      	ldr	r2, [r7, #4]
 80169b0:	69d2      	ldr	r2, [r2, #28]
 80169b2:	00d2      	lsls	r2, r2, #3
 80169b4:	4920      	ldr	r1, [pc, #128]	@ (8016a38 <RCCEx_PLL2_Config+0x15c>)
 80169b6:	4313      	orrs	r3, r2
 80169b8:	63cb      	str	r3, [r1, #60]	@ 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 80169ba:	4b1f      	ldr	r3, [pc, #124]	@ (8016a38 <RCCEx_PLL2_Config+0x15c>)
 80169bc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80169be:	4a1e      	ldr	r2, [pc, #120]	@ (8016a38 <RCCEx_PLL2_Config+0x15c>)
 80169c0:	f043 0310 	orr.w	r3, r3, #16
 80169c4:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Enable the PLL2 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 80169c6:	683b      	ldr	r3, [r7, #0]
 80169c8:	2b00      	cmp	r3, #0
 80169ca:	d106      	bne.n	80169da <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 80169cc:	4b1a      	ldr	r3, [pc, #104]	@ (8016a38 <RCCEx_PLL2_Config+0x15c>)
 80169ce:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80169d0:	4a19      	ldr	r2, [pc, #100]	@ (8016a38 <RCCEx_PLL2_Config+0x15c>)
 80169d2:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 80169d6:	62d3      	str	r3, [r2, #44]	@ 0x2c
 80169d8:	e00f      	b.n	80169fa <RCCEx_PLL2_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 80169da:	683b      	ldr	r3, [r7, #0]
 80169dc:	2b01      	cmp	r3, #1
 80169de:	d106      	bne.n	80169ee <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 80169e0:	4b15      	ldr	r3, [pc, #84]	@ (8016a38 <RCCEx_PLL2_Config+0x15c>)
 80169e2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80169e4:	4a14      	ldr	r2, [pc, #80]	@ (8016a38 <RCCEx_PLL2_Config+0x15c>)
 80169e6:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80169ea:	62d3      	str	r3, [r2, #44]	@ 0x2c
 80169ec:	e005      	b.n	80169fa <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 80169ee:	4b12      	ldr	r3, [pc, #72]	@ (8016a38 <RCCEx_PLL2_Config+0x15c>)
 80169f0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80169f2:	4a11      	ldr	r2, [pc, #68]	@ (8016a38 <RCCEx_PLL2_Config+0x15c>)
 80169f4:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 80169f8:	62d3      	str	r3, [r2, #44]	@ 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 80169fa:	4b0f      	ldr	r3, [pc, #60]	@ (8016a38 <RCCEx_PLL2_Config+0x15c>)
 80169fc:	681b      	ldr	r3, [r3, #0]
 80169fe:	4a0e      	ldr	r2, [pc, #56]	@ (8016a38 <RCCEx_PLL2_Config+0x15c>)
 8016a00:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8016a04:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8016a06:	f7fa fb03 	bl	8011010 <HAL_GetTick>
 8016a0a:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8016a0c:	e008      	b.n	8016a20 <RCCEx_PLL2_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8016a0e:	f7fa faff 	bl	8011010 <HAL_GetTick>
 8016a12:	4602      	mov	r2, r0
 8016a14:	68bb      	ldr	r3, [r7, #8]
 8016a16:	1ad3      	subs	r3, r2, r3
 8016a18:	2b02      	cmp	r3, #2
 8016a1a:	d901      	bls.n	8016a20 <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 8016a1c:	2303      	movs	r3, #3
 8016a1e:	e006      	b.n	8016a2e <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8016a20:	4b05      	ldr	r3, [pc, #20]	@ (8016a38 <RCCEx_PLL2_Config+0x15c>)
 8016a22:	681b      	ldr	r3, [r3, #0]
 8016a24:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8016a28:	2b00      	cmp	r3, #0
 8016a2a:	d0f0      	beq.n	8016a0e <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 8016a2c:	7bfb      	ldrb	r3, [r7, #15]
}
 8016a2e:	4618      	mov	r0, r3
 8016a30:	3710      	adds	r7, #16
 8016a32:	46bd      	mov	sp, r7
 8016a34:	bd80      	pop	{r7, pc}
 8016a36:	bf00      	nop
 8016a38:	58024400 	.word	0x58024400
 8016a3c:	ffff0007 	.word	0xffff0007

08016a40 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 8016a40:	b580      	push	{r7, lr}
 8016a42:	b084      	sub	sp, #16
 8016a44:	af00      	add	r7, sp, #0
 8016a46:	6078      	str	r0, [r7, #4]
 8016a48:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8016a4a:	2300      	movs	r3, #0
 8016a4c:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8016a4e:	4b53      	ldr	r3, [pc, #332]	@ (8016b9c <RCCEx_PLL3_Config+0x15c>)
 8016a50:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8016a52:	f003 0303 	and.w	r3, r3, #3
 8016a56:	2b03      	cmp	r3, #3
 8016a58:	d101      	bne.n	8016a5e <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 8016a5a:	2301      	movs	r3, #1
 8016a5c:	e099      	b.n	8016b92 <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 8016a5e:	4b4f      	ldr	r3, [pc, #316]	@ (8016b9c <RCCEx_PLL3_Config+0x15c>)
 8016a60:	681b      	ldr	r3, [r3, #0]
 8016a62:	4a4e      	ldr	r2, [pc, #312]	@ (8016b9c <RCCEx_PLL3_Config+0x15c>)
 8016a64:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8016a68:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8016a6a:	f7fa fad1 	bl	8011010 <HAL_GetTick>
 8016a6e:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8016a70:	e008      	b.n	8016a84 <RCCEx_PLL3_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 8016a72:	f7fa facd 	bl	8011010 <HAL_GetTick>
 8016a76:	4602      	mov	r2, r0
 8016a78:	68bb      	ldr	r3, [r7, #8]
 8016a7a:	1ad3      	subs	r3, r2, r3
 8016a7c:	2b02      	cmp	r3, #2
 8016a7e:	d901      	bls.n	8016a84 <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 8016a80:	2303      	movs	r3, #3
 8016a82:	e086      	b.n	8016b92 <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8016a84:	4b45      	ldr	r3, [pc, #276]	@ (8016b9c <RCCEx_PLL3_Config+0x15c>)
 8016a86:	681b      	ldr	r3, [r3, #0]
 8016a88:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8016a8c:	2b00      	cmp	r3, #0
 8016a8e:	d1f0      	bne.n	8016a72 <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 8016a90:	4b42      	ldr	r3, [pc, #264]	@ (8016b9c <RCCEx_PLL3_Config+0x15c>)
 8016a92:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8016a94:	f023 727c 	bic.w	r2, r3, #66060288	@ 0x3f00000
 8016a98:	687b      	ldr	r3, [r7, #4]
 8016a9a:	681b      	ldr	r3, [r3, #0]
 8016a9c:	051b      	lsls	r3, r3, #20
 8016a9e:	493f      	ldr	r1, [pc, #252]	@ (8016b9c <RCCEx_PLL3_Config+0x15c>)
 8016aa0:	4313      	orrs	r3, r2
 8016aa2:	628b      	str	r3, [r1, #40]	@ 0x28
 8016aa4:	687b      	ldr	r3, [r7, #4]
 8016aa6:	685b      	ldr	r3, [r3, #4]
 8016aa8:	3b01      	subs	r3, #1
 8016aaa:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8016aae:	687b      	ldr	r3, [r7, #4]
 8016ab0:	689b      	ldr	r3, [r3, #8]
 8016ab2:	3b01      	subs	r3, #1
 8016ab4:	025b      	lsls	r3, r3, #9
 8016ab6:	b29b      	uxth	r3, r3
 8016ab8:	431a      	orrs	r2, r3
 8016aba:	687b      	ldr	r3, [r7, #4]
 8016abc:	68db      	ldr	r3, [r3, #12]
 8016abe:	3b01      	subs	r3, #1
 8016ac0:	041b      	lsls	r3, r3, #16
 8016ac2:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 8016ac6:	431a      	orrs	r2, r3
 8016ac8:	687b      	ldr	r3, [r7, #4]
 8016aca:	691b      	ldr	r3, [r3, #16]
 8016acc:	3b01      	subs	r3, #1
 8016ace:	061b      	lsls	r3, r3, #24
 8016ad0:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 8016ad4:	4931      	ldr	r1, [pc, #196]	@ (8016b9c <RCCEx_PLL3_Config+0x15c>)
 8016ad6:	4313      	orrs	r3, r2
 8016ad8:	640b      	str	r3, [r1, #64]	@ 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 8016ada:	4b30      	ldr	r3, [pc, #192]	@ (8016b9c <RCCEx_PLL3_Config+0x15c>)
 8016adc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8016ade:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 8016ae2:	687b      	ldr	r3, [r7, #4]
 8016ae4:	695b      	ldr	r3, [r3, #20]
 8016ae6:	492d      	ldr	r1, [pc, #180]	@ (8016b9c <RCCEx_PLL3_Config+0x15c>)
 8016ae8:	4313      	orrs	r3, r2
 8016aea:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 8016aec:	4b2b      	ldr	r3, [pc, #172]	@ (8016b9c <RCCEx_PLL3_Config+0x15c>)
 8016aee:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8016af0:	f423 7200 	bic.w	r2, r3, #512	@ 0x200
 8016af4:	687b      	ldr	r3, [r7, #4]
 8016af6:	699b      	ldr	r3, [r3, #24]
 8016af8:	4928      	ldr	r1, [pc, #160]	@ (8016b9c <RCCEx_PLL3_Config+0x15c>)
 8016afa:	4313      	orrs	r3, r2
 8016afc:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 8016afe:	4b27      	ldr	r3, [pc, #156]	@ (8016b9c <RCCEx_PLL3_Config+0x15c>)
 8016b00:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8016b02:	4a26      	ldr	r2, [pc, #152]	@ (8016b9c <RCCEx_PLL3_Config+0x15c>)
 8016b04:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8016b08:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 8016b0a:	4b24      	ldr	r3, [pc, #144]	@ (8016b9c <RCCEx_PLL3_Config+0x15c>)
 8016b0c:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8016b0e:	4b24      	ldr	r3, [pc, #144]	@ (8016ba0 <RCCEx_PLL3_Config+0x160>)
 8016b10:	4013      	ands	r3, r2
 8016b12:	687a      	ldr	r2, [r7, #4]
 8016b14:	69d2      	ldr	r2, [r2, #28]
 8016b16:	00d2      	lsls	r2, r2, #3
 8016b18:	4920      	ldr	r1, [pc, #128]	@ (8016b9c <RCCEx_PLL3_Config+0x15c>)
 8016b1a:	4313      	orrs	r3, r2
 8016b1c:	644b      	str	r3, [r1, #68]	@ 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 8016b1e:	4b1f      	ldr	r3, [pc, #124]	@ (8016b9c <RCCEx_PLL3_Config+0x15c>)
 8016b20:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8016b22:	4a1e      	ldr	r2, [pc, #120]	@ (8016b9c <RCCEx_PLL3_Config+0x15c>)
 8016b24:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8016b28:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Enable the PLL3 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 8016b2a:	683b      	ldr	r3, [r7, #0]
 8016b2c:	2b00      	cmp	r3, #0
 8016b2e:	d106      	bne.n	8016b3e <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 8016b30:	4b1a      	ldr	r3, [pc, #104]	@ (8016b9c <RCCEx_PLL3_Config+0x15c>)
 8016b32:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8016b34:	4a19      	ldr	r2, [pc, #100]	@ (8016b9c <RCCEx_PLL3_Config+0x15c>)
 8016b36:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8016b3a:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8016b3c:	e00f      	b.n	8016b5e <RCCEx_PLL3_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 8016b3e:	683b      	ldr	r3, [r7, #0]
 8016b40:	2b01      	cmp	r3, #1
 8016b42:	d106      	bne.n	8016b52 <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 8016b44:	4b15      	ldr	r3, [pc, #84]	@ (8016b9c <RCCEx_PLL3_Config+0x15c>)
 8016b46:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8016b48:	4a14      	ldr	r2, [pc, #80]	@ (8016b9c <RCCEx_PLL3_Config+0x15c>)
 8016b4a:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8016b4e:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8016b50:	e005      	b.n	8016b5e <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 8016b52:	4b12      	ldr	r3, [pc, #72]	@ (8016b9c <RCCEx_PLL3_Config+0x15c>)
 8016b54:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8016b56:	4a11      	ldr	r2, [pc, #68]	@ (8016b9c <RCCEx_PLL3_Config+0x15c>)
 8016b58:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8016b5c:	62d3      	str	r3, [r2, #44]	@ 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 8016b5e:	4b0f      	ldr	r3, [pc, #60]	@ (8016b9c <RCCEx_PLL3_Config+0x15c>)
 8016b60:	681b      	ldr	r3, [r3, #0]
 8016b62:	4a0e      	ldr	r2, [pc, #56]	@ (8016b9c <RCCEx_PLL3_Config+0x15c>)
 8016b64:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8016b68:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8016b6a:	f7fa fa51 	bl	8011010 <HAL_GetTick>
 8016b6e:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8016b70:	e008      	b.n	8016b84 <RCCEx_PLL3_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 8016b72:	f7fa fa4d 	bl	8011010 <HAL_GetTick>
 8016b76:	4602      	mov	r2, r0
 8016b78:	68bb      	ldr	r3, [r7, #8]
 8016b7a:	1ad3      	subs	r3, r2, r3
 8016b7c:	2b02      	cmp	r3, #2
 8016b7e:	d901      	bls.n	8016b84 <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 8016b80:	2303      	movs	r3, #3
 8016b82:	e006      	b.n	8016b92 <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8016b84:	4b05      	ldr	r3, [pc, #20]	@ (8016b9c <RCCEx_PLL3_Config+0x15c>)
 8016b86:	681b      	ldr	r3, [r3, #0]
 8016b88:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8016b8c:	2b00      	cmp	r3, #0
 8016b8e:	d0f0      	beq.n	8016b72 <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 8016b90:	7bfb      	ldrb	r3, [r7, #15]
}
 8016b92:	4618      	mov	r0, r3
 8016b94:	3710      	adds	r7, #16
 8016b96:	46bd      	mov	sp, r7
 8016b98:	bd80      	pop	{r7, pc}
 8016b9a:	bf00      	nop
 8016b9c:	58024400 	.word	0x58024400
 8016ba0:	ffff0007 	.word	0xffff0007

08016ba4 <HAL_SDRAM_Init>:
  *                the configuration information for SDRAM module.
  * @param  Timing Pointer to SDRAM control timing structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_Init(SDRAM_HandleTypeDef *hsdram, FMC_SDRAM_TimingTypeDef *Timing)
{
 8016ba4:	b580      	push	{r7, lr}
 8016ba6:	b082      	sub	sp, #8
 8016ba8:	af00      	add	r7, sp, #0
 8016baa:	6078      	str	r0, [r7, #4]
 8016bac:	6039      	str	r1, [r7, #0]
  /* Check the SDRAM handle parameter */
  if (hsdram == NULL)
 8016bae:	687b      	ldr	r3, [r7, #4]
 8016bb0:	2b00      	cmp	r3, #0
 8016bb2:	d101      	bne.n	8016bb8 <HAL_SDRAM_Init+0x14>
  {
    return HAL_ERROR;
 8016bb4:	2301      	movs	r3, #1
 8016bb6:	e02b      	b.n	8016c10 <HAL_SDRAM_Init+0x6c>
  }

  if (hsdram->State == HAL_SDRAM_STATE_RESET)
 8016bb8:	687b      	ldr	r3, [r7, #4]
 8016bba:	f893 302c 	ldrb.w	r3, [r3, #44]	@ 0x2c
 8016bbe:	b2db      	uxtb	r3, r3
 8016bc0:	2b00      	cmp	r3, #0
 8016bc2:	d106      	bne.n	8016bd2 <HAL_SDRAM_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    hsdram->Lock = HAL_UNLOCKED;
 8016bc4:	687b      	ldr	r3, [r7, #4]
 8016bc6:	2200      	movs	r2, #0
 8016bc8:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d

    /* Init the low level hardware */
    hsdram->MspInitCallback(hsdram);
#else
    /* Initialize the low level hardware (MSP) */
    HAL_SDRAM_MspInit(hsdram);
 8016bcc:	6878      	ldr	r0, [r7, #4]
 8016bce:	f7ea fc4b 	bl	8001468 <HAL_SDRAM_MspInit>
#endif /* USE_HAL_SDRAM_REGISTER_CALLBACKS */
  }

  /* Initialize the SDRAM controller state */
  hsdram->State = HAL_SDRAM_STATE_BUSY;
 8016bd2:	687b      	ldr	r3, [r7, #4]
 8016bd4:	2202      	movs	r2, #2
 8016bd6:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c

  /* Initialize SDRAM control Interface */
  (void)FMC_SDRAM_Init(hsdram->Instance, &(hsdram->Init));
 8016bda:	687b      	ldr	r3, [r7, #4]
 8016bdc:	681a      	ldr	r2, [r3, #0]
 8016bde:	687b      	ldr	r3, [r7, #4]
 8016be0:	3304      	adds	r3, #4
 8016be2:	4619      	mov	r1, r3
 8016be4:	4610      	mov	r0, r2
 8016be6:	f000 fb61 	bl	80172ac <FMC_SDRAM_Init>

  /* Initialize SDRAM timing Interface */
  (void)FMC_SDRAM_Timing_Init(hsdram->Instance, Timing, hsdram->Init.SDBank);
 8016bea:	687b      	ldr	r3, [r7, #4]
 8016bec:	6818      	ldr	r0, [r3, #0]
 8016bee:	687b      	ldr	r3, [r7, #4]
 8016bf0:	685b      	ldr	r3, [r3, #4]
 8016bf2:	461a      	mov	r2, r3
 8016bf4:	6839      	ldr	r1, [r7, #0]
 8016bf6:	f000 fbb5 	bl	8017364 <FMC_SDRAM_Timing_Init>

  /* Enable FMC Peripheral */
  __FMC_ENABLE();
 8016bfa:	4b07      	ldr	r3, [pc, #28]	@ (8016c18 <HAL_SDRAM_Init+0x74>)
 8016bfc:	681b      	ldr	r3, [r3, #0]
 8016bfe:	4a06      	ldr	r2, [pc, #24]	@ (8016c18 <HAL_SDRAM_Init+0x74>)
 8016c00:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8016c04:	6013      	str	r3, [r2, #0]
  /* Update the SDRAM controller state */
  hsdram->State = HAL_SDRAM_STATE_READY;
 8016c06:	687b      	ldr	r3, [r7, #4]
 8016c08:	2201      	movs	r2, #1
 8016c0a:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c

  return HAL_OK;
 8016c0e:	2300      	movs	r3, #0
}
 8016c10:	4618      	mov	r0, r3
 8016c12:	3708      	adds	r7, #8
 8016c14:	46bd      	mov	sp, r7
 8016c16:	bd80      	pop	{r7, pc}
 8016c18:	52004000 	.word	0x52004000

08016c1c <HAL_SDRAM_DeInit>:
  * @param  hsdram pointer to a SDRAM_HandleTypeDef structure that contains
  *                the configuration information for SDRAM module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_DeInit(SDRAM_HandleTypeDef *hsdram)
{
 8016c1c:	b580      	push	{r7, lr}
 8016c1e:	b082      	sub	sp, #8
 8016c20:	af00      	add	r7, sp, #0
 8016c22:	6078      	str	r0, [r7, #4]

  /* DeInit the low level hardware */
  hsdram->MspDeInitCallback(hsdram);
#else
  /* Initialize the low level hardware (MSP) */
  HAL_SDRAM_MspDeInit(hsdram);
 8016c24:	6878      	ldr	r0, [r7, #4]
 8016c26:	f7ea fc63 	bl	80014f0 <HAL_SDRAM_MspDeInit>
#endif /* USE_HAL_SDRAM_REGISTER_CALLBACKS */

  /* Configure the SDRAM registers with their reset values */
  (void)FMC_SDRAM_DeInit(hsdram->Instance, hsdram->Init.SDBank);
 8016c2a:	687b      	ldr	r3, [r7, #4]
 8016c2c:	681a      	ldr	r2, [r3, #0]
 8016c2e:	687b      	ldr	r3, [r7, #4]
 8016c30:	685b      	ldr	r3, [r3, #4]
 8016c32:	4619      	mov	r1, r3
 8016c34:	4610      	mov	r0, r2
 8016c36:	f000 fbff 	bl	8017438 <FMC_SDRAM_DeInit>

  /* Reset the SDRAM controller state */
  hsdram->State = HAL_SDRAM_STATE_RESET;
 8016c3a:	687b      	ldr	r3, [r7, #4]
 8016c3c:	2200      	movs	r2, #0
 8016c3e:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c

  /* Release Lock */
  __HAL_UNLOCK(hsdram);
 8016c42:	687b      	ldr	r3, [r7, #4]
 8016c44:	2200      	movs	r2, #0
 8016c46:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d

  return HAL_OK;
 8016c4a:	2300      	movs	r3, #0
}
 8016c4c:	4618      	mov	r0, r3
 8016c4e:	3708      	adds	r7, #8
 8016c50:	46bd      	mov	sp, r7
 8016c52:	bd80      	pop	{r7, pc}

08016c54 <HAL_SDRAM_SendCommand>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_SendCommand(SDRAM_HandleTypeDef *hsdram, FMC_SDRAM_CommandTypeDef *Command,
                                        uint32_t Timeout)
{
 8016c54:	b580      	push	{r7, lr}
 8016c56:	b086      	sub	sp, #24
 8016c58:	af00      	add	r7, sp, #0
 8016c5a:	60f8      	str	r0, [r7, #12]
 8016c5c:	60b9      	str	r1, [r7, #8]
 8016c5e:	607a      	str	r2, [r7, #4]
  HAL_SDRAM_StateTypeDef state = hsdram->State;
 8016c60:	68fb      	ldr	r3, [r7, #12]
 8016c62:	f893 302c 	ldrb.w	r3, [r3, #44]	@ 0x2c
 8016c66:	75fb      	strb	r3, [r7, #23]

  /* Check the SDRAM controller state */
  if (state == HAL_SDRAM_STATE_BUSY)
 8016c68:	7dfb      	ldrb	r3, [r7, #23]
 8016c6a:	2b02      	cmp	r3, #2
 8016c6c:	d101      	bne.n	8016c72 <HAL_SDRAM_SendCommand+0x1e>
  {
    return HAL_BUSY;
 8016c6e:	2302      	movs	r3, #2
 8016c70:	e021      	b.n	8016cb6 <HAL_SDRAM_SendCommand+0x62>
  }
  else if ((state == HAL_SDRAM_STATE_READY) || (state == HAL_SDRAM_STATE_PRECHARGED))
 8016c72:	7dfb      	ldrb	r3, [r7, #23]
 8016c74:	2b01      	cmp	r3, #1
 8016c76:	d002      	beq.n	8016c7e <HAL_SDRAM_SendCommand+0x2a>
 8016c78:	7dfb      	ldrb	r3, [r7, #23]
 8016c7a:	2b05      	cmp	r3, #5
 8016c7c:	d118      	bne.n	8016cb0 <HAL_SDRAM_SendCommand+0x5c>
  {
    /* Update the SDRAM state */
    hsdram->State = HAL_SDRAM_STATE_BUSY;
 8016c7e:	68fb      	ldr	r3, [r7, #12]
 8016c80:	2202      	movs	r2, #2
 8016c82:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c

    /* Send SDRAM command */
    (void)FMC_SDRAM_SendCommand(hsdram->Instance, Command, Timeout);
 8016c86:	68fb      	ldr	r3, [r7, #12]
 8016c88:	681b      	ldr	r3, [r3, #0]
 8016c8a:	687a      	ldr	r2, [r7, #4]
 8016c8c:	68b9      	ldr	r1, [r7, #8]
 8016c8e:	4618      	mov	r0, r3
 8016c90:	f000 fbf4 	bl	801747c <FMC_SDRAM_SendCommand>

    /* Update the SDRAM controller state state */
    if (Command->CommandMode == FMC_SDRAM_CMD_PALL)
 8016c94:	68bb      	ldr	r3, [r7, #8]
 8016c96:	681b      	ldr	r3, [r3, #0]
 8016c98:	2b02      	cmp	r3, #2
 8016c9a:	d104      	bne.n	8016ca6 <HAL_SDRAM_SendCommand+0x52>
    {
      hsdram->State = HAL_SDRAM_STATE_PRECHARGED;
 8016c9c:	68fb      	ldr	r3, [r7, #12]
 8016c9e:	2205      	movs	r2, #5
 8016ca0:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c
    if (Command->CommandMode == FMC_SDRAM_CMD_PALL)
 8016ca4:	e006      	b.n	8016cb4 <HAL_SDRAM_SendCommand+0x60>
    }
    else
    {
      hsdram->State = HAL_SDRAM_STATE_READY;
 8016ca6:	68fb      	ldr	r3, [r7, #12]
 8016ca8:	2201      	movs	r2, #1
 8016caa:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c
    if (Command->CommandMode == FMC_SDRAM_CMD_PALL)
 8016cae:	e001      	b.n	8016cb4 <HAL_SDRAM_SendCommand+0x60>
    }
  }
  else
  {
    return HAL_ERROR;
 8016cb0:	2301      	movs	r3, #1
 8016cb2:	e000      	b.n	8016cb6 <HAL_SDRAM_SendCommand+0x62>
  }

  return HAL_OK;
 8016cb4:	2300      	movs	r3, #0
}
 8016cb6:	4618      	mov	r0, r3
 8016cb8:	3718      	adds	r7, #24
 8016cba:	46bd      	mov	sp, r7
 8016cbc:	bd80      	pop	{r7, pc}

08016cbe <HAL_SDRAM_ProgramRefreshRate>:
  *                the configuration information for SDRAM module.
  * @param  RefreshRate The SDRAM refresh rate value
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_ProgramRefreshRate(SDRAM_HandleTypeDef *hsdram, uint32_t RefreshRate)
{
 8016cbe:	b580      	push	{r7, lr}
 8016cc0:	b082      	sub	sp, #8
 8016cc2:	af00      	add	r7, sp, #0
 8016cc4:	6078      	str	r0, [r7, #4]
 8016cc6:	6039      	str	r1, [r7, #0]
  /* Check the SDRAM controller state */
  if (hsdram->State == HAL_SDRAM_STATE_BUSY)
 8016cc8:	687b      	ldr	r3, [r7, #4]
 8016cca:	f893 302c 	ldrb.w	r3, [r3, #44]	@ 0x2c
 8016cce:	b2db      	uxtb	r3, r3
 8016cd0:	2b02      	cmp	r3, #2
 8016cd2:	d101      	bne.n	8016cd8 <HAL_SDRAM_ProgramRefreshRate+0x1a>
  {
    return HAL_BUSY;
 8016cd4:	2302      	movs	r3, #2
 8016cd6:	e016      	b.n	8016d06 <HAL_SDRAM_ProgramRefreshRate+0x48>
  }
  else if (hsdram->State == HAL_SDRAM_STATE_READY)
 8016cd8:	687b      	ldr	r3, [r7, #4]
 8016cda:	f893 302c 	ldrb.w	r3, [r3, #44]	@ 0x2c
 8016cde:	b2db      	uxtb	r3, r3
 8016ce0:	2b01      	cmp	r3, #1
 8016ce2:	d10f      	bne.n	8016d04 <HAL_SDRAM_ProgramRefreshRate+0x46>
  {
    /* Update the SDRAM state */
    hsdram->State = HAL_SDRAM_STATE_BUSY;
 8016ce4:	687b      	ldr	r3, [r7, #4]
 8016ce6:	2202      	movs	r2, #2
 8016ce8:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c

    /* Program the refresh rate */
    (void)FMC_SDRAM_ProgramRefreshRate(hsdram->Instance, RefreshRate);
 8016cec:	687b      	ldr	r3, [r7, #4]
 8016cee:	681b      	ldr	r3, [r3, #0]
 8016cf0:	6839      	ldr	r1, [r7, #0]
 8016cf2:	4618      	mov	r0, r3
 8016cf4:	f000 fbe6 	bl	80174c4 <FMC_SDRAM_ProgramRefreshRate>

    /* Update the SDRAM state */
    hsdram->State = HAL_SDRAM_STATE_READY;
 8016cf8:	687b      	ldr	r3, [r7, #4]
 8016cfa:	2201      	movs	r2, #1
 8016cfc:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c
  else
  {
    return HAL_ERROR;
  }

  return HAL_OK;
 8016d00:	2300      	movs	r3, #0
 8016d02:	e000      	b.n	8016d06 <HAL_SDRAM_ProgramRefreshRate+0x48>
    return HAL_ERROR;
 8016d04:	2301      	movs	r3, #1
}
 8016d06:	4618      	mov	r0, r3
 8016d08:	3708      	adds	r7, #8
 8016d0a:	46bd      	mov	sp, r7
 8016d0c:	bd80      	pop	{r7, pc}

08016d0e <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8016d0e:	b580      	push	{r7, lr}
 8016d10:	b082      	sub	sp, #8
 8016d12:	af00      	add	r7, sp, #0
 8016d14:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8016d16:	687b      	ldr	r3, [r7, #4]
 8016d18:	2b00      	cmp	r3, #0
 8016d1a:	d101      	bne.n	8016d20 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8016d1c:	2301      	movs	r3, #1
 8016d1e:	e049      	b.n	8016db4 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8016d20:	687b      	ldr	r3, [r7, #4]
 8016d22:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8016d26:	b2db      	uxtb	r3, r3
 8016d28:	2b00      	cmp	r3, #0
 8016d2a:	d106      	bne.n	8016d3a <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8016d2c:	687b      	ldr	r3, [r7, #4]
 8016d2e:	2200      	movs	r2, #0
 8016d30:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8016d34:	6878      	ldr	r0, [r7, #4]
 8016d36:	f7ea fad1 	bl	80012dc <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8016d3a:	687b      	ldr	r3, [r7, #4]
 8016d3c:	2202      	movs	r2, #2
 8016d3e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8016d42:	687b      	ldr	r3, [r7, #4]
 8016d44:	681a      	ldr	r2, [r3, #0]
 8016d46:	687b      	ldr	r3, [r7, #4]
 8016d48:	3304      	adds	r3, #4
 8016d4a:	4619      	mov	r1, r3
 8016d4c:	4610      	mov	r0, r2
 8016d4e:	f000 f9f5 	bl	801713c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8016d52:	687b      	ldr	r3, [r7, #4]
 8016d54:	2201      	movs	r2, #1
 8016d56:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8016d5a:	687b      	ldr	r3, [r7, #4]
 8016d5c:	2201      	movs	r2, #1
 8016d5e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8016d62:	687b      	ldr	r3, [r7, #4]
 8016d64:	2201      	movs	r2, #1
 8016d66:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8016d6a:	687b      	ldr	r3, [r7, #4]
 8016d6c:	2201      	movs	r2, #1
 8016d6e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8016d72:	687b      	ldr	r3, [r7, #4]
 8016d74:	2201      	movs	r2, #1
 8016d76:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8016d7a:	687b      	ldr	r3, [r7, #4]
 8016d7c:	2201      	movs	r2, #1
 8016d7e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8016d82:	687b      	ldr	r3, [r7, #4]
 8016d84:	2201      	movs	r2, #1
 8016d86:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8016d8a:	687b      	ldr	r3, [r7, #4]
 8016d8c:	2201      	movs	r2, #1
 8016d8e:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8016d92:	687b      	ldr	r3, [r7, #4]
 8016d94:	2201      	movs	r2, #1
 8016d96:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8016d9a:	687b      	ldr	r3, [r7, #4]
 8016d9c:	2201      	movs	r2, #1
 8016d9e:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8016da2:	687b      	ldr	r3, [r7, #4]
 8016da4:	2201      	movs	r2, #1
 8016da6:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8016daa:	687b      	ldr	r3, [r7, #4]
 8016dac:	2201      	movs	r2, #1
 8016dae:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8016db2:	2300      	movs	r3, #0
}
 8016db4:	4618      	mov	r0, r3
 8016db6:	3708      	adds	r7, #8
 8016db8:	46bd      	mov	sp, r7
 8016dba:	bd80      	pop	{r7, pc}

08016dbc <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8016dbc:	b480      	push	{r7}
 8016dbe:	b085      	sub	sp, #20
 8016dc0:	af00      	add	r7, sp, #0
 8016dc2:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8016dc4:	687b      	ldr	r3, [r7, #4]
 8016dc6:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8016dca:	b2db      	uxtb	r3, r3
 8016dcc:	2b01      	cmp	r3, #1
 8016dce:	d001      	beq.n	8016dd4 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8016dd0:	2301      	movs	r3, #1
 8016dd2:	e054      	b.n	8016e7e <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8016dd4:	687b      	ldr	r3, [r7, #4]
 8016dd6:	2202      	movs	r2, #2
 8016dd8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8016ddc:	687b      	ldr	r3, [r7, #4]
 8016dde:	681b      	ldr	r3, [r3, #0]
 8016de0:	68da      	ldr	r2, [r3, #12]
 8016de2:	687b      	ldr	r3, [r7, #4]
 8016de4:	681b      	ldr	r3, [r3, #0]
 8016de6:	f042 0201 	orr.w	r2, r2, #1
 8016dea:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8016dec:	687b      	ldr	r3, [r7, #4]
 8016dee:	681b      	ldr	r3, [r3, #0]
 8016df0:	4a26      	ldr	r2, [pc, #152]	@ (8016e8c <HAL_TIM_Base_Start_IT+0xd0>)
 8016df2:	4293      	cmp	r3, r2
 8016df4:	d022      	beq.n	8016e3c <HAL_TIM_Base_Start_IT+0x80>
 8016df6:	687b      	ldr	r3, [r7, #4]
 8016df8:	681b      	ldr	r3, [r3, #0]
 8016dfa:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8016dfe:	d01d      	beq.n	8016e3c <HAL_TIM_Base_Start_IT+0x80>
 8016e00:	687b      	ldr	r3, [r7, #4]
 8016e02:	681b      	ldr	r3, [r3, #0]
 8016e04:	4a22      	ldr	r2, [pc, #136]	@ (8016e90 <HAL_TIM_Base_Start_IT+0xd4>)
 8016e06:	4293      	cmp	r3, r2
 8016e08:	d018      	beq.n	8016e3c <HAL_TIM_Base_Start_IT+0x80>
 8016e0a:	687b      	ldr	r3, [r7, #4]
 8016e0c:	681b      	ldr	r3, [r3, #0]
 8016e0e:	4a21      	ldr	r2, [pc, #132]	@ (8016e94 <HAL_TIM_Base_Start_IT+0xd8>)
 8016e10:	4293      	cmp	r3, r2
 8016e12:	d013      	beq.n	8016e3c <HAL_TIM_Base_Start_IT+0x80>
 8016e14:	687b      	ldr	r3, [r7, #4]
 8016e16:	681b      	ldr	r3, [r3, #0]
 8016e18:	4a1f      	ldr	r2, [pc, #124]	@ (8016e98 <HAL_TIM_Base_Start_IT+0xdc>)
 8016e1a:	4293      	cmp	r3, r2
 8016e1c:	d00e      	beq.n	8016e3c <HAL_TIM_Base_Start_IT+0x80>
 8016e1e:	687b      	ldr	r3, [r7, #4]
 8016e20:	681b      	ldr	r3, [r3, #0]
 8016e22:	4a1e      	ldr	r2, [pc, #120]	@ (8016e9c <HAL_TIM_Base_Start_IT+0xe0>)
 8016e24:	4293      	cmp	r3, r2
 8016e26:	d009      	beq.n	8016e3c <HAL_TIM_Base_Start_IT+0x80>
 8016e28:	687b      	ldr	r3, [r7, #4]
 8016e2a:	681b      	ldr	r3, [r3, #0]
 8016e2c:	4a1c      	ldr	r2, [pc, #112]	@ (8016ea0 <HAL_TIM_Base_Start_IT+0xe4>)
 8016e2e:	4293      	cmp	r3, r2
 8016e30:	d004      	beq.n	8016e3c <HAL_TIM_Base_Start_IT+0x80>
 8016e32:	687b      	ldr	r3, [r7, #4]
 8016e34:	681b      	ldr	r3, [r3, #0]
 8016e36:	4a1b      	ldr	r2, [pc, #108]	@ (8016ea4 <HAL_TIM_Base_Start_IT+0xe8>)
 8016e38:	4293      	cmp	r3, r2
 8016e3a:	d115      	bne.n	8016e68 <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8016e3c:	687b      	ldr	r3, [r7, #4]
 8016e3e:	681b      	ldr	r3, [r3, #0]
 8016e40:	689a      	ldr	r2, [r3, #8]
 8016e42:	4b19      	ldr	r3, [pc, #100]	@ (8016ea8 <HAL_TIM_Base_Start_IT+0xec>)
 8016e44:	4013      	ands	r3, r2
 8016e46:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8016e48:	68fb      	ldr	r3, [r7, #12]
 8016e4a:	2b06      	cmp	r3, #6
 8016e4c:	d015      	beq.n	8016e7a <HAL_TIM_Base_Start_IT+0xbe>
 8016e4e:	68fb      	ldr	r3, [r7, #12]
 8016e50:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8016e54:	d011      	beq.n	8016e7a <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 8016e56:	687b      	ldr	r3, [r7, #4]
 8016e58:	681b      	ldr	r3, [r3, #0]
 8016e5a:	681a      	ldr	r2, [r3, #0]
 8016e5c:	687b      	ldr	r3, [r7, #4]
 8016e5e:	681b      	ldr	r3, [r3, #0]
 8016e60:	f042 0201 	orr.w	r2, r2, #1
 8016e64:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8016e66:	e008      	b.n	8016e7a <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8016e68:	687b      	ldr	r3, [r7, #4]
 8016e6a:	681b      	ldr	r3, [r3, #0]
 8016e6c:	681a      	ldr	r2, [r3, #0]
 8016e6e:	687b      	ldr	r3, [r7, #4]
 8016e70:	681b      	ldr	r3, [r3, #0]
 8016e72:	f042 0201 	orr.w	r2, r2, #1
 8016e76:	601a      	str	r2, [r3, #0]
 8016e78:	e000      	b.n	8016e7c <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8016e7a:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8016e7c:	2300      	movs	r3, #0
}
 8016e7e:	4618      	mov	r0, r3
 8016e80:	3714      	adds	r7, #20
 8016e82:	46bd      	mov	sp, r7
 8016e84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016e88:	4770      	bx	lr
 8016e8a:	bf00      	nop
 8016e8c:	40010000 	.word	0x40010000
 8016e90:	40000400 	.word	0x40000400
 8016e94:	40000800 	.word	0x40000800
 8016e98:	40000c00 	.word	0x40000c00
 8016e9c:	40010400 	.word	0x40010400
 8016ea0:	40001800 	.word	0x40001800
 8016ea4:	40014000 	.word	0x40014000
 8016ea8:	00010007 	.word	0x00010007

08016eac <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8016eac:	b580      	push	{r7, lr}
 8016eae:	b082      	sub	sp, #8
 8016eb0:	af00      	add	r7, sp, #0
 8016eb2:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8016eb4:	687b      	ldr	r3, [r7, #4]
 8016eb6:	681b      	ldr	r3, [r3, #0]
 8016eb8:	691b      	ldr	r3, [r3, #16]
 8016eba:	f003 0302 	and.w	r3, r3, #2
 8016ebe:	2b02      	cmp	r3, #2
 8016ec0:	d122      	bne.n	8016f08 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8016ec2:	687b      	ldr	r3, [r7, #4]
 8016ec4:	681b      	ldr	r3, [r3, #0]
 8016ec6:	68db      	ldr	r3, [r3, #12]
 8016ec8:	f003 0302 	and.w	r3, r3, #2
 8016ecc:	2b02      	cmp	r3, #2
 8016ece:	d11b      	bne.n	8016f08 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8016ed0:	687b      	ldr	r3, [r7, #4]
 8016ed2:	681b      	ldr	r3, [r3, #0]
 8016ed4:	f06f 0202 	mvn.w	r2, #2
 8016ed8:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8016eda:	687b      	ldr	r3, [r7, #4]
 8016edc:	2201      	movs	r2, #1
 8016ede:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8016ee0:	687b      	ldr	r3, [r7, #4]
 8016ee2:	681b      	ldr	r3, [r3, #0]
 8016ee4:	699b      	ldr	r3, [r3, #24]
 8016ee6:	f003 0303 	and.w	r3, r3, #3
 8016eea:	2b00      	cmp	r3, #0
 8016eec:	d003      	beq.n	8016ef6 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8016eee:	6878      	ldr	r0, [r7, #4]
 8016ef0:	f000 f905 	bl	80170fe <HAL_TIM_IC_CaptureCallback>
 8016ef4:	e005      	b.n	8016f02 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8016ef6:	6878      	ldr	r0, [r7, #4]
 8016ef8:	f000 f8f7 	bl	80170ea <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8016efc:	6878      	ldr	r0, [r7, #4]
 8016efe:	f000 f908 	bl	8017112 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8016f02:	687b      	ldr	r3, [r7, #4]
 8016f04:	2200      	movs	r2, #0
 8016f06:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8016f08:	687b      	ldr	r3, [r7, #4]
 8016f0a:	681b      	ldr	r3, [r3, #0]
 8016f0c:	691b      	ldr	r3, [r3, #16]
 8016f0e:	f003 0304 	and.w	r3, r3, #4
 8016f12:	2b04      	cmp	r3, #4
 8016f14:	d122      	bne.n	8016f5c <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8016f16:	687b      	ldr	r3, [r7, #4]
 8016f18:	681b      	ldr	r3, [r3, #0]
 8016f1a:	68db      	ldr	r3, [r3, #12]
 8016f1c:	f003 0304 	and.w	r3, r3, #4
 8016f20:	2b04      	cmp	r3, #4
 8016f22:	d11b      	bne.n	8016f5c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8016f24:	687b      	ldr	r3, [r7, #4]
 8016f26:	681b      	ldr	r3, [r3, #0]
 8016f28:	f06f 0204 	mvn.w	r2, #4
 8016f2c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8016f2e:	687b      	ldr	r3, [r7, #4]
 8016f30:	2202      	movs	r2, #2
 8016f32:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8016f34:	687b      	ldr	r3, [r7, #4]
 8016f36:	681b      	ldr	r3, [r3, #0]
 8016f38:	699b      	ldr	r3, [r3, #24]
 8016f3a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8016f3e:	2b00      	cmp	r3, #0
 8016f40:	d003      	beq.n	8016f4a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8016f42:	6878      	ldr	r0, [r7, #4]
 8016f44:	f000 f8db 	bl	80170fe <HAL_TIM_IC_CaptureCallback>
 8016f48:	e005      	b.n	8016f56 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8016f4a:	6878      	ldr	r0, [r7, #4]
 8016f4c:	f000 f8cd 	bl	80170ea <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8016f50:	6878      	ldr	r0, [r7, #4]
 8016f52:	f000 f8de 	bl	8017112 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8016f56:	687b      	ldr	r3, [r7, #4]
 8016f58:	2200      	movs	r2, #0
 8016f5a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8016f5c:	687b      	ldr	r3, [r7, #4]
 8016f5e:	681b      	ldr	r3, [r3, #0]
 8016f60:	691b      	ldr	r3, [r3, #16]
 8016f62:	f003 0308 	and.w	r3, r3, #8
 8016f66:	2b08      	cmp	r3, #8
 8016f68:	d122      	bne.n	8016fb0 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8016f6a:	687b      	ldr	r3, [r7, #4]
 8016f6c:	681b      	ldr	r3, [r3, #0]
 8016f6e:	68db      	ldr	r3, [r3, #12]
 8016f70:	f003 0308 	and.w	r3, r3, #8
 8016f74:	2b08      	cmp	r3, #8
 8016f76:	d11b      	bne.n	8016fb0 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8016f78:	687b      	ldr	r3, [r7, #4]
 8016f7a:	681b      	ldr	r3, [r3, #0]
 8016f7c:	f06f 0208 	mvn.w	r2, #8
 8016f80:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8016f82:	687b      	ldr	r3, [r7, #4]
 8016f84:	2204      	movs	r2, #4
 8016f86:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8016f88:	687b      	ldr	r3, [r7, #4]
 8016f8a:	681b      	ldr	r3, [r3, #0]
 8016f8c:	69db      	ldr	r3, [r3, #28]
 8016f8e:	f003 0303 	and.w	r3, r3, #3
 8016f92:	2b00      	cmp	r3, #0
 8016f94:	d003      	beq.n	8016f9e <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8016f96:	6878      	ldr	r0, [r7, #4]
 8016f98:	f000 f8b1 	bl	80170fe <HAL_TIM_IC_CaptureCallback>
 8016f9c:	e005      	b.n	8016faa <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8016f9e:	6878      	ldr	r0, [r7, #4]
 8016fa0:	f000 f8a3 	bl	80170ea <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8016fa4:	6878      	ldr	r0, [r7, #4]
 8016fa6:	f000 f8b4 	bl	8017112 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8016faa:	687b      	ldr	r3, [r7, #4]
 8016fac:	2200      	movs	r2, #0
 8016fae:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8016fb0:	687b      	ldr	r3, [r7, #4]
 8016fb2:	681b      	ldr	r3, [r3, #0]
 8016fb4:	691b      	ldr	r3, [r3, #16]
 8016fb6:	f003 0310 	and.w	r3, r3, #16
 8016fba:	2b10      	cmp	r3, #16
 8016fbc:	d122      	bne.n	8017004 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8016fbe:	687b      	ldr	r3, [r7, #4]
 8016fc0:	681b      	ldr	r3, [r3, #0]
 8016fc2:	68db      	ldr	r3, [r3, #12]
 8016fc4:	f003 0310 	and.w	r3, r3, #16
 8016fc8:	2b10      	cmp	r3, #16
 8016fca:	d11b      	bne.n	8017004 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8016fcc:	687b      	ldr	r3, [r7, #4]
 8016fce:	681b      	ldr	r3, [r3, #0]
 8016fd0:	f06f 0210 	mvn.w	r2, #16
 8016fd4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8016fd6:	687b      	ldr	r3, [r7, #4]
 8016fd8:	2208      	movs	r2, #8
 8016fda:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8016fdc:	687b      	ldr	r3, [r7, #4]
 8016fde:	681b      	ldr	r3, [r3, #0]
 8016fe0:	69db      	ldr	r3, [r3, #28]
 8016fe2:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8016fe6:	2b00      	cmp	r3, #0
 8016fe8:	d003      	beq.n	8016ff2 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8016fea:	6878      	ldr	r0, [r7, #4]
 8016fec:	f000 f887 	bl	80170fe <HAL_TIM_IC_CaptureCallback>
 8016ff0:	e005      	b.n	8016ffe <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8016ff2:	6878      	ldr	r0, [r7, #4]
 8016ff4:	f000 f879 	bl	80170ea <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8016ff8:	6878      	ldr	r0, [r7, #4]
 8016ffa:	f000 f88a 	bl	8017112 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8016ffe:	687b      	ldr	r3, [r7, #4]
 8017000:	2200      	movs	r2, #0
 8017002:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8017004:	687b      	ldr	r3, [r7, #4]
 8017006:	681b      	ldr	r3, [r3, #0]
 8017008:	691b      	ldr	r3, [r3, #16]
 801700a:	f003 0301 	and.w	r3, r3, #1
 801700e:	2b01      	cmp	r3, #1
 8017010:	d10e      	bne.n	8017030 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8017012:	687b      	ldr	r3, [r7, #4]
 8017014:	681b      	ldr	r3, [r3, #0]
 8017016:	68db      	ldr	r3, [r3, #12]
 8017018:	f003 0301 	and.w	r3, r3, #1
 801701c:	2b01      	cmp	r3, #1
 801701e:	d107      	bne.n	8017030 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8017020:	687b      	ldr	r3, [r7, #4]
 8017022:	681b      	ldr	r3, [r3, #0]
 8017024:	f06f 0201 	mvn.w	r2, #1
 8017028:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 801702a:	6878      	ldr	r0, [r7, #4]
 801702c:	f7e9 fe2a 	bl	8000c84 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8017030:	687b      	ldr	r3, [r7, #4]
 8017032:	681b      	ldr	r3, [r3, #0]
 8017034:	691b      	ldr	r3, [r3, #16]
 8017036:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 801703a:	2b80      	cmp	r3, #128	@ 0x80
 801703c:	d10e      	bne.n	801705c <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 801703e:	687b      	ldr	r3, [r7, #4]
 8017040:	681b      	ldr	r3, [r3, #0]
 8017042:	68db      	ldr	r3, [r3, #12]
 8017044:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8017048:	2b80      	cmp	r3, #128	@ 0x80
 801704a:	d107      	bne.n	801705c <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 801704c:	687b      	ldr	r3, [r7, #4]
 801704e:	681b      	ldr	r3, [r3, #0]
 8017050:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 8017054:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8017056:	6878      	ldr	r0, [r7, #4]
 8017058:	f000 f914 	bl	8017284 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 801705c:	687b      	ldr	r3, [r7, #4]
 801705e:	681b      	ldr	r3, [r3, #0]
 8017060:	691b      	ldr	r3, [r3, #16]
 8017062:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8017066:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 801706a:	d10e      	bne.n	801708a <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 801706c:	687b      	ldr	r3, [r7, #4]
 801706e:	681b      	ldr	r3, [r3, #0]
 8017070:	68db      	ldr	r3, [r3, #12]
 8017072:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8017076:	2b80      	cmp	r3, #128	@ 0x80
 8017078:	d107      	bne.n	801708a <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 801707a:	687b      	ldr	r3, [r7, #4]
 801707c:	681b      	ldr	r3, [r3, #0]
 801707e:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 8017082:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8017084:	6878      	ldr	r0, [r7, #4]
 8017086:	f000 f907 	bl	8017298 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 801708a:	687b      	ldr	r3, [r7, #4]
 801708c:	681b      	ldr	r3, [r3, #0]
 801708e:	691b      	ldr	r3, [r3, #16]
 8017090:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8017094:	2b40      	cmp	r3, #64	@ 0x40
 8017096:	d10e      	bne.n	80170b6 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8017098:	687b      	ldr	r3, [r7, #4]
 801709a:	681b      	ldr	r3, [r3, #0]
 801709c:	68db      	ldr	r3, [r3, #12]
 801709e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80170a2:	2b40      	cmp	r3, #64	@ 0x40
 80170a4:	d107      	bne.n	80170b6 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80170a6:	687b      	ldr	r3, [r7, #4]
 80170a8:	681b      	ldr	r3, [r3, #0]
 80170aa:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 80170ae:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80170b0:	6878      	ldr	r0, [r7, #4]
 80170b2:	f000 f838 	bl	8017126 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80170b6:	687b      	ldr	r3, [r7, #4]
 80170b8:	681b      	ldr	r3, [r3, #0]
 80170ba:	691b      	ldr	r3, [r3, #16]
 80170bc:	f003 0320 	and.w	r3, r3, #32
 80170c0:	2b20      	cmp	r3, #32
 80170c2:	d10e      	bne.n	80170e2 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80170c4:	687b      	ldr	r3, [r7, #4]
 80170c6:	681b      	ldr	r3, [r3, #0]
 80170c8:	68db      	ldr	r3, [r3, #12]
 80170ca:	f003 0320 	and.w	r3, r3, #32
 80170ce:	2b20      	cmp	r3, #32
 80170d0:	d107      	bne.n	80170e2 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80170d2:	687b      	ldr	r3, [r7, #4]
 80170d4:	681b      	ldr	r3, [r3, #0]
 80170d6:	f06f 0220 	mvn.w	r2, #32
 80170da:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80170dc:	6878      	ldr	r0, [r7, #4]
 80170de:	f000 f8c7 	bl	8017270 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80170e2:	bf00      	nop
 80170e4:	3708      	adds	r7, #8
 80170e6:	46bd      	mov	sp, r7
 80170e8:	bd80      	pop	{r7, pc}

080170ea <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80170ea:	b480      	push	{r7}
 80170ec:	b083      	sub	sp, #12
 80170ee:	af00      	add	r7, sp, #0
 80170f0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80170f2:	bf00      	nop
 80170f4:	370c      	adds	r7, #12
 80170f6:	46bd      	mov	sp, r7
 80170f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80170fc:	4770      	bx	lr

080170fe <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80170fe:	b480      	push	{r7}
 8017100:	b083      	sub	sp, #12
 8017102:	af00      	add	r7, sp, #0
 8017104:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8017106:	bf00      	nop
 8017108:	370c      	adds	r7, #12
 801710a:	46bd      	mov	sp, r7
 801710c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017110:	4770      	bx	lr

08017112 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8017112:	b480      	push	{r7}
 8017114:	b083      	sub	sp, #12
 8017116:	af00      	add	r7, sp, #0
 8017118:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 801711a:	bf00      	nop
 801711c:	370c      	adds	r7, #12
 801711e:	46bd      	mov	sp, r7
 8017120:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017124:	4770      	bx	lr

08017126 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8017126:	b480      	push	{r7}
 8017128:	b083      	sub	sp, #12
 801712a:	af00      	add	r7, sp, #0
 801712c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 801712e:	bf00      	nop
 8017130:	370c      	adds	r7, #12
 8017132:	46bd      	mov	sp, r7
 8017134:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017138:	4770      	bx	lr
	...

0801713c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 801713c:	b480      	push	{r7}
 801713e:	b085      	sub	sp, #20
 8017140:	af00      	add	r7, sp, #0
 8017142:	6078      	str	r0, [r7, #4]
 8017144:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8017146:	687b      	ldr	r3, [r7, #4]
 8017148:	681b      	ldr	r3, [r3, #0]
 801714a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 801714c:	687b      	ldr	r3, [r7, #4]
 801714e:	4a40      	ldr	r2, [pc, #256]	@ (8017250 <TIM_Base_SetConfig+0x114>)
 8017150:	4293      	cmp	r3, r2
 8017152:	d013      	beq.n	801717c <TIM_Base_SetConfig+0x40>
 8017154:	687b      	ldr	r3, [r7, #4]
 8017156:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 801715a:	d00f      	beq.n	801717c <TIM_Base_SetConfig+0x40>
 801715c:	687b      	ldr	r3, [r7, #4]
 801715e:	4a3d      	ldr	r2, [pc, #244]	@ (8017254 <TIM_Base_SetConfig+0x118>)
 8017160:	4293      	cmp	r3, r2
 8017162:	d00b      	beq.n	801717c <TIM_Base_SetConfig+0x40>
 8017164:	687b      	ldr	r3, [r7, #4]
 8017166:	4a3c      	ldr	r2, [pc, #240]	@ (8017258 <TIM_Base_SetConfig+0x11c>)
 8017168:	4293      	cmp	r3, r2
 801716a:	d007      	beq.n	801717c <TIM_Base_SetConfig+0x40>
 801716c:	687b      	ldr	r3, [r7, #4]
 801716e:	4a3b      	ldr	r2, [pc, #236]	@ (801725c <TIM_Base_SetConfig+0x120>)
 8017170:	4293      	cmp	r3, r2
 8017172:	d003      	beq.n	801717c <TIM_Base_SetConfig+0x40>
 8017174:	687b      	ldr	r3, [r7, #4]
 8017176:	4a3a      	ldr	r2, [pc, #232]	@ (8017260 <TIM_Base_SetConfig+0x124>)
 8017178:	4293      	cmp	r3, r2
 801717a:	d108      	bne.n	801718e <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 801717c:	68fb      	ldr	r3, [r7, #12]
 801717e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8017182:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8017184:	683b      	ldr	r3, [r7, #0]
 8017186:	685b      	ldr	r3, [r3, #4]
 8017188:	68fa      	ldr	r2, [r7, #12]
 801718a:	4313      	orrs	r3, r2
 801718c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 801718e:	687b      	ldr	r3, [r7, #4]
 8017190:	4a2f      	ldr	r2, [pc, #188]	@ (8017250 <TIM_Base_SetConfig+0x114>)
 8017192:	4293      	cmp	r3, r2
 8017194:	d01f      	beq.n	80171d6 <TIM_Base_SetConfig+0x9a>
 8017196:	687b      	ldr	r3, [r7, #4]
 8017198:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 801719c:	d01b      	beq.n	80171d6 <TIM_Base_SetConfig+0x9a>
 801719e:	687b      	ldr	r3, [r7, #4]
 80171a0:	4a2c      	ldr	r2, [pc, #176]	@ (8017254 <TIM_Base_SetConfig+0x118>)
 80171a2:	4293      	cmp	r3, r2
 80171a4:	d017      	beq.n	80171d6 <TIM_Base_SetConfig+0x9a>
 80171a6:	687b      	ldr	r3, [r7, #4]
 80171a8:	4a2b      	ldr	r2, [pc, #172]	@ (8017258 <TIM_Base_SetConfig+0x11c>)
 80171aa:	4293      	cmp	r3, r2
 80171ac:	d013      	beq.n	80171d6 <TIM_Base_SetConfig+0x9a>
 80171ae:	687b      	ldr	r3, [r7, #4]
 80171b0:	4a2a      	ldr	r2, [pc, #168]	@ (801725c <TIM_Base_SetConfig+0x120>)
 80171b2:	4293      	cmp	r3, r2
 80171b4:	d00f      	beq.n	80171d6 <TIM_Base_SetConfig+0x9a>
 80171b6:	687b      	ldr	r3, [r7, #4]
 80171b8:	4a29      	ldr	r2, [pc, #164]	@ (8017260 <TIM_Base_SetConfig+0x124>)
 80171ba:	4293      	cmp	r3, r2
 80171bc:	d00b      	beq.n	80171d6 <TIM_Base_SetConfig+0x9a>
 80171be:	687b      	ldr	r3, [r7, #4]
 80171c0:	4a28      	ldr	r2, [pc, #160]	@ (8017264 <TIM_Base_SetConfig+0x128>)
 80171c2:	4293      	cmp	r3, r2
 80171c4:	d007      	beq.n	80171d6 <TIM_Base_SetConfig+0x9a>
 80171c6:	687b      	ldr	r3, [r7, #4]
 80171c8:	4a27      	ldr	r2, [pc, #156]	@ (8017268 <TIM_Base_SetConfig+0x12c>)
 80171ca:	4293      	cmp	r3, r2
 80171cc:	d003      	beq.n	80171d6 <TIM_Base_SetConfig+0x9a>
 80171ce:	687b      	ldr	r3, [r7, #4]
 80171d0:	4a26      	ldr	r2, [pc, #152]	@ (801726c <TIM_Base_SetConfig+0x130>)
 80171d2:	4293      	cmp	r3, r2
 80171d4:	d108      	bne.n	80171e8 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80171d6:	68fb      	ldr	r3, [r7, #12]
 80171d8:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80171dc:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80171de:	683b      	ldr	r3, [r7, #0]
 80171e0:	68db      	ldr	r3, [r3, #12]
 80171e2:	68fa      	ldr	r2, [r7, #12]
 80171e4:	4313      	orrs	r3, r2
 80171e6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80171e8:	68fb      	ldr	r3, [r7, #12]
 80171ea:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 80171ee:	683b      	ldr	r3, [r7, #0]
 80171f0:	695b      	ldr	r3, [r3, #20]
 80171f2:	4313      	orrs	r3, r2
 80171f4:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80171f6:	687b      	ldr	r3, [r7, #4]
 80171f8:	68fa      	ldr	r2, [r7, #12]
 80171fa:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80171fc:	683b      	ldr	r3, [r7, #0]
 80171fe:	689a      	ldr	r2, [r3, #8]
 8017200:	687b      	ldr	r3, [r7, #4]
 8017202:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8017204:	683b      	ldr	r3, [r7, #0]
 8017206:	681a      	ldr	r2, [r3, #0]
 8017208:	687b      	ldr	r3, [r7, #4]
 801720a:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 801720c:	687b      	ldr	r3, [r7, #4]
 801720e:	4a10      	ldr	r2, [pc, #64]	@ (8017250 <TIM_Base_SetConfig+0x114>)
 8017210:	4293      	cmp	r3, r2
 8017212:	d00f      	beq.n	8017234 <TIM_Base_SetConfig+0xf8>
 8017214:	687b      	ldr	r3, [r7, #4]
 8017216:	4a12      	ldr	r2, [pc, #72]	@ (8017260 <TIM_Base_SetConfig+0x124>)
 8017218:	4293      	cmp	r3, r2
 801721a:	d00b      	beq.n	8017234 <TIM_Base_SetConfig+0xf8>
 801721c:	687b      	ldr	r3, [r7, #4]
 801721e:	4a11      	ldr	r2, [pc, #68]	@ (8017264 <TIM_Base_SetConfig+0x128>)
 8017220:	4293      	cmp	r3, r2
 8017222:	d007      	beq.n	8017234 <TIM_Base_SetConfig+0xf8>
 8017224:	687b      	ldr	r3, [r7, #4]
 8017226:	4a10      	ldr	r2, [pc, #64]	@ (8017268 <TIM_Base_SetConfig+0x12c>)
 8017228:	4293      	cmp	r3, r2
 801722a:	d003      	beq.n	8017234 <TIM_Base_SetConfig+0xf8>
 801722c:	687b      	ldr	r3, [r7, #4]
 801722e:	4a0f      	ldr	r2, [pc, #60]	@ (801726c <TIM_Base_SetConfig+0x130>)
 8017230:	4293      	cmp	r3, r2
 8017232:	d103      	bne.n	801723c <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8017234:	683b      	ldr	r3, [r7, #0]
 8017236:	691a      	ldr	r2, [r3, #16]
 8017238:	687b      	ldr	r3, [r7, #4]
 801723a:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 801723c:	687b      	ldr	r3, [r7, #4]
 801723e:	2201      	movs	r2, #1
 8017240:	615a      	str	r2, [r3, #20]
}
 8017242:	bf00      	nop
 8017244:	3714      	adds	r7, #20
 8017246:	46bd      	mov	sp, r7
 8017248:	f85d 7b04 	ldr.w	r7, [sp], #4
 801724c:	4770      	bx	lr
 801724e:	bf00      	nop
 8017250:	40010000 	.word	0x40010000
 8017254:	40000400 	.word	0x40000400
 8017258:	40000800 	.word	0x40000800
 801725c:	40000c00 	.word	0x40000c00
 8017260:	40010400 	.word	0x40010400
 8017264:	40014000 	.word	0x40014000
 8017268:	40014400 	.word	0x40014400
 801726c:	40014800 	.word	0x40014800

08017270 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8017270:	b480      	push	{r7}
 8017272:	b083      	sub	sp, #12
 8017274:	af00      	add	r7, sp, #0
 8017276:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8017278:	bf00      	nop
 801727a:	370c      	adds	r7, #12
 801727c:	46bd      	mov	sp, r7
 801727e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017282:	4770      	bx	lr

08017284 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8017284:	b480      	push	{r7}
 8017286:	b083      	sub	sp, #12
 8017288:	af00      	add	r7, sp, #0
 801728a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 801728c:	bf00      	nop
 801728e:	370c      	adds	r7, #12
 8017290:	46bd      	mov	sp, r7
 8017292:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017296:	4770      	bx	lr

08017298 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8017298:	b480      	push	{r7}
 801729a:	b083      	sub	sp, #12
 801729c:	af00      	add	r7, sp, #0
 801729e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 80172a0:	bf00      	nop
 80172a2:	370c      	adds	r7, #12
 80172a4:	46bd      	mov	sp, r7
 80172a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80172aa:	4770      	bx	lr

080172ac <FMC_SDRAM_Init>:
  * @param  Device Pointer to SDRAM device instance
  * @param  Init Pointer to SDRAM Initialization structure
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_SDRAM_Init(FMC_SDRAM_TypeDef *Device, FMC_SDRAM_InitTypeDef *Init)
{
 80172ac:	b480      	push	{r7}
 80172ae:	b083      	sub	sp, #12
 80172b0:	af00      	add	r7, sp, #0
 80172b2:	6078      	str	r0, [r7, #4]
 80172b4:	6039      	str	r1, [r7, #0]
  assert_param(IS_FMC_SDCLOCK_PERIOD(Init->SDClockPeriod));
  assert_param(IS_FMC_READ_BURST(Init->ReadBurst));
  assert_param(IS_FMC_READPIPE_DELAY(Init->ReadPipeDelay));

  /* Set SDRAM bank configuration parameters */
  if (Init->SDBank == FMC_SDRAM_BANK1)
 80172b6:	683b      	ldr	r3, [r7, #0]
 80172b8:	681b      	ldr	r3, [r3, #0]
 80172ba:	2b00      	cmp	r3, #0
 80172bc:	d121      	bne.n	8017302 <FMC_SDRAM_Init+0x56>
  {
    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK1],
 80172be:	687b      	ldr	r3, [r7, #4]
 80172c0:	681a      	ldr	r2, [r3, #0]
 80172c2:	4b27      	ldr	r3, [pc, #156]	@ (8017360 <FMC_SDRAM_Init+0xb4>)
 80172c4:	4013      	ands	r3, r2
 80172c6:	683a      	ldr	r2, [r7, #0]
 80172c8:	6851      	ldr	r1, [r2, #4]
 80172ca:	683a      	ldr	r2, [r7, #0]
 80172cc:	6892      	ldr	r2, [r2, #8]
 80172ce:	4311      	orrs	r1, r2
 80172d0:	683a      	ldr	r2, [r7, #0]
 80172d2:	68d2      	ldr	r2, [r2, #12]
 80172d4:	4311      	orrs	r1, r2
 80172d6:	683a      	ldr	r2, [r7, #0]
 80172d8:	6912      	ldr	r2, [r2, #16]
 80172da:	4311      	orrs	r1, r2
 80172dc:	683a      	ldr	r2, [r7, #0]
 80172de:	6952      	ldr	r2, [r2, #20]
 80172e0:	4311      	orrs	r1, r2
 80172e2:	683a      	ldr	r2, [r7, #0]
 80172e4:	6992      	ldr	r2, [r2, #24]
 80172e6:	4311      	orrs	r1, r2
 80172e8:	683a      	ldr	r2, [r7, #0]
 80172ea:	69d2      	ldr	r2, [r2, #28]
 80172ec:	4311      	orrs	r1, r2
 80172ee:	683a      	ldr	r2, [r7, #0]
 80172f0:	6a12      	ldr	r2, [r2, #32]
 80172f2:	4311      	orrs	r1, r2
 80172f4:	683a      	ldr	r2, [r7, #0]
 80172f6:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 80172f8:	430a      	orrs	r2, r1
 80172fa:	431a      	orrs	r2, r3
 80172fc:	687b      	ldr	r3, [r7, #4]
 80172fe:	601a      	str	r2, [r3, #0]
 8017300:	e026      	b.n	8017350 <FMC_SDRAM_Init+0xa4>
                Init->ReadBurst          |
                Init->ReadPipeDelay));
  }
  else /* FMC_Bank2_SDRAM */
  {
    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK1],
 8017302:	687b      	ldr	r3, [r7, #4]
 8017304:	681b      	ldr	r3, [r3, #0]
 8017306:	f423 42f8 	bic.w	r2, r3, #31744	@ 0x7c00
 801730a:	683b      	ldr	r3, [r7, #0]
 801730c:	69d9      	ldr	r1, [r3, #28]
 801730e:	683b      	ldr	r3, [r7, #0]
 8017310:	6a1b      	ldr	r3, [r3, #32]
 8017312:	4319      	orrs	r1, r3
 8017314:	683b      	ldr	r3, [r7, #0]
 8017316:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8017318:	430b      	orrs	r3, r1
 801731a:	431a      	orrs	r2, r3
 801731c:	687b      	ldr	r3, [r7, #4]
 801731e:	601a      	str	r2, [r3, #0]
               FMC_SDCRx_RPIPE,
               (Init->SDClockPeriod      |
                Init->ReadBurst          |
                Init->ReadPipeDelay));

    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK2],
 8017320:	687b      	ldr	r3, [r7, #4]
 8017322:	685a      	ldr	r2, [r3, #4]
 8017324:	4b0e      	ldr	r3, [pc, #56]	@ (8017360 <FMC_SDRAM_Init+0xb4>)
 8017326:	4013      	ands	r3, r2
 8017328:	683a      	ldr	r2, [r7, #0]
 801732a:	6851      	ldr	r1, [r2, #4]
 801732c:	683a      	ldr	r2, [r7, #0]
 801732e:	6892      	ldr	r2, [r2, #8]
 8017330:	4311      	orrs	r1, r2
 8017332:	683a      	ldr	r2, [r7, #0]
 8017334:	68d2      	ldr	r2, [r2, #12]
 8017336:	4311      	orrs	r1, r2
 8017338:	683a      	ldr	r2, [r7, #0]
 801733a:	6912      	ldr	r2, [r2, #16]
 801733c:	4311      	orrs	r1, r2
 801733e:	683a      	ldr	r2, [r7, #0]
 8017340:	6952      	ldr	r2, [r2, #20]
 8017342:	4311      	orrs	r1, r2
 8017344:	683a      	ldr	r2, [r7, #0]
 8017346:	6992      	ldr	r2, [r2, #24]
 8017348:	430a      	orrs	r2, r1
 801734a:	431a      	orrs	r2, r3
 801734c:	687b      	ldr	r3, [r7, #4]
 801734e:	605a      	str	r2, [r3, #4]
                Init->InternalBankNumber |
                Init->CASLatency         |
                Init->WriteProtection));
  }

  return HAL_OK;
 8017350:	2300      	movs	r3, #0
}
 8017352:	4618      	mov	r0, r3
 8017354:	370c      	adds	r7, #12
 8017356:	46bd      	mov	sp, r7
 8017358:	f85d 7b04 	ldr.w	r7, [sp], #4
 801735c:	4770      	bx	lr
 801735e:	bf00      	nop
 8017360:	ffff8000 	.word	0xffff8000

08017364 <FMC_SDRAM_Timing_Init>:
  * @param  Bank SDRAM bank number
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_SDRAM_Timing_Init(FMC_SDRAM_TypeDef *Device,
                                        FMC_SDRAM_TimingTypeDef *Timing, uint32_t Bank)
{
 8017364:	b480      	push	{r7}
 8017366:	b085      	sub	sp, #20
 8017368:	af00      	add	r7, sp, #0
 801736a:	60f8      	str	r0, [r7, #12]
 801736c:	60b9      	str	r1, [r7, #8]
 801736e:	607a      	str	r2, [r7, #4]
  assert_param(IS_FMC_RP_DELAY(Timing->RPDelay));
  assert_param(IS_FMC_RCD_DELAY(Timing->RCDDelay));
  assert_param(IS_FMC_SDRAM_BANK(Bank));

  /* Set SDRAM device timing parameters */
  if (Bank == FMC_SDRAM_BANK1)
 8017370:	687b      	ldr	r3, [r7, #4]
 8017372:	2b00      	cmp	r3, #0
 8017374:	d128      	bne.n	80173c8 <FMC_SDRAM_Timing_Init+0x64>
  {
    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK1],
 8017376:	68fb      	ldr	r3, [r7, #12]
 8017378:	689b      	ldr	r3, [r3, #8]
 801737a:	f003 4270 	and.w	r2, r3, #4026531840	@ 0xf0000000
 801737e:	68bb      	ldr	r3, [r7, #8]
 8017380:	681b      	ldr	r3, [r3, #0]
 8017382:	1e59      	subs	r1, r3, #1
 8017384:	68bb      	ldr	r3, [r7, #8]
 8017386:	685b      	ldr	r3, [r3, #4]
 8017388:	3b01      	subs	r3, #1
 801738a:	011b      	lsls	r3, r3, #4
 801738c:	4319      	orrs	r1, r3
 801738e:	68bb      	ldr	r3, [r7, #8]
 8017390:	689b      	ldr	r3, [r3, #8]
 8017392:	3b01      	subs	r3, #1
 8017394:	021b      	lsls	r3, r3, #8
 8017396:	4319      	orrs	r1, r3
 8017398:	68bb      	ldr	r3, [r7, #8]
 801739a:	68db      	ldr	r3, [r3, #12]
 801739c:	3b01      	subs	r3, #1
 801739e:	031b      	lsls	r3, r3, #12
 80173a0:	4319      	orrs	r1, r3
 80173a2:	68bb      	ldr	r3, [r7, #8]
 80173a4:	691b      	ldr	r3, [r3, #16]
 80173a6:	3b01      	subs	r3, #1
 80173a8:	041b      	lsls	r3, r3, #16
 80173aa:	4319      	orrs	r1, r3
 80173ac:	68bb      	ldr	r3, [r7, #8]
 80173ae:	695b      	ldr	r3, [r3, #20]
 80173b0:	3b01      	subs	r3, #1
 80173b2:	051b      	lsls	r3, r3, #20
 80173b4:	4319      	orrs	r1, r3
 80173b6:	68bb      	ldr	r3, [r7, #8]
 80173b8:	699b      	ldr	r3, [r3, #24]
 80173ba:	3b01      	subs	r3, #1
 80173bc:	061b      	lsls	r3, r3, #24
 80173be:	430b      	orrs	r3, r1
 80173c0:	431a      	orrs	r2, r3
 80173c2:	68fb      	ldr	r3, [r7, #12]
 80173c4:	609a      	str	r2, [r3, #8]
 80173c6:	e02d      	b.n	8017424 <FMC_SDRAM_Timing_Init+0xc0>
                (((Timing->RPDelay) - 1U)              << FMC_SDTRx_TRP_Pos)  |
                (((Timing->RCDDelay) - 1U)             << FMC_SDTRx_TRCD_Pos)));
  }
  else /* FMC_Bank2_SDRAM */
  {
    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK1],
 80173c8:	68fb      	ldr	r3, [r7, #12]
 80173ca:	689a      	ldr	r2, [r3, #8]
 80173cc:	4b19      	ldr	r3, [pc, #100]	@ (8017434 <FMC_SDRAM_Timing_Init+0xd0>)
 80173ce:	4013      	ands	r3, r2
 80173d0:	68ba      	ldr	r2, [r7, #8]
 80173d2:	68d2      	ldr	r2, [r2, #12]
 80173d4:	3a01      	subs	r2, #1
 80173d6:	0311      	lsls	r1, r2, #12
 80173d8:	68ba      	ldr	r2, [r7, #8]
 80173da:	6952      	ldr	r2, [r2, #20]
 80173dc:	3a01      	subs	r2, #1
 80173de:	0512      	lsls	r2, r2, #20
 80173e0:	430a      	orrs	r2, r1
 80173e2:	431a      	orrs	r2, r3
 80173e4:	68fb      	ldr	r3, [r7, #12]
 80173e6:	609a      	str	r2, [r3, #8]
               FMC_SDTRx_TRC |
               FMC_SDTRx_TRP,
               (((Timing->RowCycleDelay) - 1U)         << FMC_SDTRx_TRC_Pos)  |
               (((Timing->RPDelay) - 1U)               << FMC_SDTRx_TRP_Pos));

    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK2],
 80173e8:	68fb      	ldr	r3, [r7, #12]
 80173ea:	68db      	ldr	r3, [r3, #12]
 80173ec:	f003 4270 	and.w	r2, r3, #4026531840	@ 0xf0000000
 80173f0:	68bb      	ldr	r3, [r7, #8]
 80173f2:	681b      	ldr	r3, [r3, #0]
 80173f4:	1e59      	subs	r1, r3, #1
 80173f6:	68bb      	ldr	r3, [r7, #8]
 80173f8:	685b      	ldr	r3, [r3, #4]
 80173fa:	3b01      	subs	r3, #1
 80173fc:	011b      	lsls	r3, r3, #4
 80173fe:	4319      	orrs	r1, r3
 8017400:	68bb      	ldr	r3, [r7, #8]
 8017402:	689b      	ldr	r3, [r3, #8]
 8017404:	3b01      	subs	r3, #1
 8017406:	021b      	lsls	r3, r3, #8
 8017408:	4319      	orrs	r1, r3
 801740a:	68bb      	ldr	r3, [r7, #8]
 801740c:	691b      	ldr	r3, [r3, #16]
 801740e:	3b01      	subs	r3, #1
 8017410:	041b      	lsls	r3, r3, #16
 8017412:	4319      	orrs	r1, r3
 8017414:	68bb      	ldr	r3, [r7, #8]
 8017416:	699b      	ldr	r3, [r3, #24]
 8017418:	3b01      	subs	r3, #1
 801741a:	061b      	lsls	r3, r3, #24
 801741c:	430b      	orrs	r3, r1
 801741e:	431a      	orrs	r2, r3
 8017420:	68fb      	ldr	r3, [r7, #12]
 8017422:	60da      	str	r2, [r3, #12]
                (((Timing->SelfRefreshTime) - 1U)      << FMC_SDTRx_TRAS_Pos) |
                (((Timing->WriteRecoveryTime) - 1U)    << FMC_SDTRx_TWR_Pos)  |
                (((Timing->RCDDelay) - 1U)             << FMC_SDTRx_TRCD_Pos)));
  }

  return HAL_OK;
 8017424:	2300      	movs	r3, #0
}
 8017426:	4618      	mov	r0, r3
 8017428:	3714      	adds	r7, #20
 801742a:	46bd      	mov	sp, r7
 801742c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017430:	4770      	bx	lr
 8017432:	bf00      	nop
 8017434:	ff0f0fff 	.word	0xff0f0fff

08017438 <FMC_SDRAM_DeInit>:
  * @brief  DeInitializes the FMC_SDRAM peripheral
  * @param  Device Pointer to SDRAM device instance
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_SDRAM_DeInit(FMC_SDRAM_TypeDef *Device, uint32_t Bank)
{
 8017438:	b480      	push	{r7}
 801743a:	b083      	sub	sp, #12
 801743c:	af00      	add	r7, sp, #0
 801743e:	6078      	str	r0, [r7, #4]
 8017440:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_FMC_SDRAM_DEVICE(Device));
  assert_param(IS_FMC_SDRAM_BANK(Bank));

  /* De-initialize the SDRAM device */
  Device->SDCR[Bank] = 0x000002D0U;
 8017442:	687b      	ldr	r3, [r7, #4]
 8017444:	683a      	ldr	r2, [r7, #0]
 8017446:	f44f 7134 	mov.w	r1, #720	@ 0x2d0
 801744a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  Device->SDTR[Bank] = 0x0FFFFFFFU;
 801744e:	687b      	ldr	r3, [r7, #4]
 8017450:	683a      	ldr	r2, [r7, #0]
 8017452:	3202      	adds	r2, #2
 8017454:	f06f 4170 	mvn.w	r1, #4026531840	@ 0xf0000000
 8017458:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  Device->SDCMR      = 0x00000000U;
 801745c:	687b      	ldr	r3, [r7, #4]
 801745e:	2200      	movs	r2, #0
 8017460:	611a      	str	r2, [r3, #16]
  Device->SDRTR      = 0x00000000U;
 8017462:	687b      	ldr	r3, [r7, #4]
 8017464:	2200      	movs	r2, #0
 8017466:	615a      	str	r2, [r3, #20]
  Device->SDSR       = 0x00000000U;
 8017468:	687b      	ldr	r3, [r7, #4]
 801746a:	2200      	movs	r2, #0
 801746c:	619a      	str	r2, [r3, #24]

  return HAL_OK;
 801746e:	2300      	movs	r3, #0
}
 8017470:	4618      	mov	r0, r3
 8017472:	370c      	adds	r7, #12
 8017474:	46bd      	mov	sp, r7
 8017476:	f85d 7b04 	ldr.w	r7, [sp], #4
 801747a:	4770      	bx	lr

0801747c <FMC_SDRAM_SendCommand>:
  * @param  Timeout Timeout wait value
  * @retval HAL state
  */
HAL_StatusTypeDef FMC_SDRAM_SendCommand(FMC_SDRAM_TypeDef *Device,
                                        FMC_SDRAM_CommandTypeDef *Command, uint32_t Timeout)
{
 801747c:	b480      	push	{r7}
 801747e:	b085      	sub	sp, #20
 8017480:	af00      	add	r7, sp, #0
 8017482:	60f8      	str	r0, [r7, #12]
 8017484:	60b9      	str	r1, [r7, #8]
 8017486:	607a      	str	r2, [r7, #4]
  assert_param(IS_FMC_COMMAND_TARGET(Command->CommandTarget));
  assert_param(IS_FMC_AUTOREFRESH_NUMBER(Command->AutoRefreshNumber));
  assert_param(IS_FMC_MODE_REGISTER(Command->ModeRegisterDefinition));

  /* Set command register */
  MODIFY_REG(Device->SDCMR, (FMC_SDCMR_MODE | FMC_SDCMR_CTB2 | FMC_SDCMR_CTB1 | FMC_SDCMR_NRFS | FMC_SDCMR_MRD),
 8017488:	68fb      	ldr	r3, [r7, #12]
 801748a:	691a      	ldr	r2, [r3, #16]
 801748c:	4b0c      	ldr	r3, [pc, #48]	@ (80174c0 <FMC_SDRAM_SendCommand+0x44>)
 801748e:	4013      	ands	r3, r2
 8017490:	68ba      	ldr	r2, [r7, #8]
 8017492:	6811      	ldr	r1, [r2, #0]
 8017494:	68ba      	ldr	r2, [r7, #8]
 8017496:	6852      	ldr	r2, [r2, #4]
 8017498:	4311      	orrs	r1, r2
 801749a:	68ba      	ldr	r2, [r7, #8]
 801749c:	6892      	ldr	r2, [r2, #8]
 801749e:	3a01      	subs	r2, #1
 80174a0:	0152      	lsls	r2, r2, #5
 80174a2:	4311      	orrs	r1, r2
 80174a4:	68ba      	ldr	r2, [r7, #8]
 80174a6:	68d2      	ldr	r2, [r2, #12]
 80174a8:	0252      	lsls	r2, r2, #9
 80174aa:	430a      	orrs	r2, r1
 80174ac:	431a      	orrs	r2, r3
 80174ae:	68fb      	ldr	r3, [r7, #12]
 80174b0:	611a      	str	r2, [r3, #16]
             ((Command->CommandMode) | (Command->CommandTarget) |
              (((Command->AutoRefreshNumber) - 1U) << FMC_SDCMR_NRFS_Pos) |
              ((Command->ModeRegisterDefinition) << FMC_SDCMR_MRD_Pos)));
  /* Prevent unused argument(s) compilation warning */
  UNUSED(Timeout);
  return HAL_OK;
 80174b2:	2300      	movs	r3, #0
}
 80174b4:	4618      	mov	r0, r3
 80174b6:	3714      	adds	r7, #20
 80174b8:	46bd      	mov	sp, r7
 80174ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80174be:	4770      	bx	lr
 80174c0:	ffc00000 	.word	0xffc00000

080174c4 <FMC_SDRAM_ProgramRefreshRate>:
  * @param  Device Pointer to SDRAM device instance
  * @param  RefreshRate The SDRAM refresh rate value.
  * @retval HAL state
  */
HAL_StatusTypeDef FMC_SDRAM_ProgramRefreshRate(FMC_SDRAM_TypeDef *Device, uint32_t RefreshRate)
{
 80174c4:	b480      	push	{r7}
 80174c6:	b083      	sub	sp, #12
 80174c8:	af00      	add	r7, sp, #0
 80174ca:	6078      	str	r0, [r7, #4]
 80174cc:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_FMC_SDRAM_DEVICE(Device));
  assert_param(IS_FMC_REFRESH_RATE(RefreshRate));

  /* Set the refresh rate in command register */
  MODIFY_REG(Device->SDRTR, FMC_SDRTR_COUNT, (RefreshRate << FMC_SDRTR_COUNT_Pos));
 80174ce:	687b      	ldr	r3, [r7, #4]
 80174d0:	695a      	ldr	r2, [r3, #20]
 80174d2:	4b07      	ldr	r3, [pc, #28]	@ (80174f0 <FMC_SDRAM_ProgramRefreshRate+0x2c>)
 80174d4:	4013      	ands	r3, r2
 80174d6:	683a      	ldr	r2, [r7, #0]
 80174d8:	0052      	lsls	r2, r2, #1
 80174da:	431a      	orrs	r2, r3
 80174dc:	687b      	ldr	r3, [r7, #4]
 80174de:	615a      	str	r2, [r3, #20]

  return HAL_OK;
 80174e0:	2300      	movs	r3, #0
}
 80174e2:	4618      	mov	r0, r3
 80174e4:	370c      	adds	r7, #12
 80174e6:	46bd      	mov	sp, r7
 80174e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80174ec:	4770      	bx	lr
 80174ee:	bf00      	nop
 80174f0:	ffffc001 	.word	0xffffc001

080174f4 <_ZNK8touchgfx17AbstractPartition18getAllocationCountEv>:
 80174f4:	8880      	ldrh	r0, [r0, #4]
 80174f6:	4770      	bx	lr

080174f8 <_ZN8touchgfx17AbstractPartition5clearEv>:
 80174f8:	2300      	movs	r3, #0
 80174fa:	8083      	strh	r3, [r0, #4]
 80174fc:	4770      	bx	lr
	...

08017500 <_ZN8touchgfx17AbstractPartition7indexOfEPKv>:
 8017500:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8017502:	6803      	ldr	r3, [r0, #0]
 8017504:	460e      	mov	r6, r1
 8017506:	2100      	movs	r1, #0
 8017508:	4605      	mov	r5, r0
 801750a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801750c:	4798      	blx	r3
 801750e:	4604      	mov	r4, r0
 8017510:	682b      	ldr	r3, [r5, #0]
 8017512:	4628      	mov	r0, r5
 8017514:	1b34      	subs	r4, r6, r4
 8017516:	6a1b      	ldr	r3, [r3, #32]
 8017518:	b2a4      	uxth	r4, r4
 801751a:	4798      	blx	r3
 801751c:	88ab      	ldrh	r3, [r5, #4]
 801751e:	fbb4 f4f0 	udiv	r4, r4, r0
 8017522:	42a3      	cmp	r3, r4
 8017524:	d805      	bhi.n	8017532 <_ZN8touchgfx17AbstractPartition7indexOfEPKv+0x32>
 8017526:	4b0e      	ldr	r3, [pc, #56]	@ (8017560 <_ZN8touchgfx17AbstractPartition7indexOfEPKv+0x60>)
 8017528:	211e      	movs	r1, #30
 801752a:	4a0e      	ldr	r2, [pc, #56]	@ (8017564 <_ZN8touchgfx17AbstractPartition7indexOfEPKv+0x64>)
 801752c:	480e      	ldr	r0, [pc, #56]	@ (8017568 <_ZN8touchgfx17AbstractPartition7indexOfEPKv+0x68>)
 801752e:	f013 fb89 	bl	802ac44 <__assert_func>
 8017532:	682b      	ldr	r3, [r5, #0]
 8017534:	2100      	movs	r1, #0
 8017536:	4628      	mov	r0, r5
 8017538:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801753a:	4798      	blx	r3
 801753c:	682b      	ldr	r3, [r5, #0]
 801753e:	4607      	mov	r7, r0
 8017540:	4628      	mov	r0, r5
 8017542:	6a1b      	ldr	r3, [r3, #32]
 8017544:	4798      	blx	r3
 8017546:	1bf3      	subs	r3, r6, r7
 8017548:	b29b      	uxth	r3, r3
 801754a:	fbb3 f2f0 	udiv	r2, r3, r0
 801754e:	fb02 3010 	mls	r0, r2, r0, r3
 8017552:	b118      	cbz	r0, 801755c <_ZN8touchgfx17AbstractPartition7indexOfEPKv+0x5c>
 8017554:	4b05      	ldr	r3, [pc, #20]	@ (801756c <_ZN8touchgfx17AbstractPartition7indexOfEPKv+0x6c>)
 8017556:	211f      	movs	r1, #31
 8017558:	4a02      	ldr	r2, [pc, #8]	@ (8017564 <_ZN8touchgfx17AbstractPartition7indexOfEPKv+0x64>)
 801755a:	e7e7      	b.n	801752c <_ZN8touchgfx17AbstractPartition7indexOfEPKv+0x2c>
 801755c:	4620      	mov	r0, r4
 801755e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8017560:	0802d670 	.word	0x0802d670
 8017564:	0802d7de 	.word	0x0802d7de
 8017568:	0802d685 	.word	0x0802d685
 801756c:	0802d6b3 	.word	0x0802d6b3

08017570 <_ZN8touchgfx17AbstractPartition8allocateEt>:
 8017570:	b538      	push	{r3, r4, r5, lr}
 8017572:	6803      	ldr	r3, [r0, #0]
 8017574:	460d      	mov	r5, r1
 8017576:	4604      	mov	r4, r0
 8017578:	6a1b      	ldr	r3, [r3, #32]
 801757a:	4798      	blx	r3
 801757c:	4285      	cmp	r5, r0
 801757e:	d905      	bls.n	801758c <_ZN8touchgfx17AbstractPartition8allocateEt+0x1c>
 8017580:	4b0c      	ldr	r3, [pc, #48]	@ (80175b4 <_ZN8touchgfx17AbstractPartition8allocateEt+0x44>)
 8017582:	2130      	movs	r1, #48	@ 0x30
 8017584:	4a0c      	ldr	r2, [pc, #48]	@ (80175b8 <_ZN8touchgfx17AbstractPartition8allocateEt+0x48>)
 8017586:	480d      	ldr	r0, [pc, #52]	@ (80175bc <_ZN8touchgfx17AbstractPartition8allocateEt+0x4c>)
 8017588:	f013 fb5c 	bl	802ac44 <__assert_func>
 801758c:	6823      	ldr	r3, [r4, #0]
 801758e:	4620      	mov	r0, r4
 8017590:	88a5      	ldrh	r5, [r4, #4]
 8017592:	69db      	ldr	r3, [r3, #28]
 8017594:	4798      	blx	r3
 8017596:	4285      	cmp	r5, r0
 8017598:	d303      	bcc.n	80175a2 <_ZN8touchgfx17AbstractPartition8allocateEt+0x32>
 801759a:	4b09      	ldr	r3, [pc, #36]	@ (80175c0 <_ZN8touchgfx17AbstractPartition8allocateEt+0x50>)
 801759c:	2131      	movs	r1, #49	@ 0x31
 801759e:	4a06      	ldr	r2, [pc, #24]	@ (80175b8 <_ZN8touchgfx17AbstractPartition8allocateEt+0x48>)
 80175a0:	e7f1      	b.n	8017586 <_ZN8touchgfx17AbstractPartition8allocateEt+0x16>
 80175a2:	6823      	ldr	r3, [r4, #0]
 80175a4:	4620      	mov	r0, r4
 80175a6:	88a1      	ldrh	r1, [r4, #4]
 80175a8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80175aa:	4798      	blx	r3
 80175ac:	88a3      	ldrh	r3, [r4, #4]
 80175ae:	3301      	adds	r3, #1
 80175b0:	80a3      	strh	r3, [r4, #4]
 80175b2:	bd38      	pop	{r3, r4, r5, pc}
 80175b4:	0802d72d 	.word	0x0802d72d
 80175b8:	0802d821 	.word	0x0802d821
 80175bc:	0802d685 	.word	0x0802d685
 80175c0:	0802d744 	.word	0x0802d744

080175c4 <_ZN8touchgfx17AbstractPartition10allocateAtEtt>:
 80175c4:	b570      	push	{r4, r5, r6, lr}
 80175c6:	6803      	ldr	r3, [r0, #0]
 80175c8:	4616      	mov	r6, r2
 80175ca:	4604      	mov	r4, r0
 80175cc:	460d      	mov	r5, r1
 80175ce:	6a1b      	ldr	r3, [r3, #32]
 80175d0:	4798      	blx	r3
 80175d2:	4286      	cmp	r6, r0
 80175d4:	d905      	bls.n	80175e2 <_ZN8touchgfx17AbstractPartition10allocateAtEtt+0x1e>
 80175d6:	4b06      	ldr	r3, [pc, #24]	@ (80175f0 <_ZN8touchgfx17AbstractPartition10allocateAtEtt+0x2c>)
 80175d8:	213a      	movs	r1, #58	@ 0x3a
 80175da:	4a06      	ldr	r2, [pc, #24]	@ (80175f4 <_ZN8touchgfx17AbstractPartition10allocateAtEtt+0x30>)
 80175dc:	4806      	ldr	r0, [pc, #24]	@ (80175f8 <_ZN8touchgfx17AbstractPartition10allocateAtEtt+0x34>)
 80175de:	f013 fb31 	bl	802ac44 <__assert_func>
 80175e2:	6823      	ldr	r3, [r4, #0]
 80175e4:	4629      	mov	r1, r5
 80175e6:	4620      	mov	r0, r4
 80175e8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80175ea:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 80175ee:	4718      	bx	r3
 80175f0:	0802d72d 	.word	0x0802d72d
 80175f4:	0802d794 	.word	0x0802d794
 80175f8:	0802d685 	.word	0x0802d685

080175fc <_ZN8touchgfx17AbstractPartitionD1Ev>:
 80175fc:	4770      	bx	lr
	...

08017600 <_ZN8touchgfx17AbstractPartitionC1Ev>:
 8017600:	4a02      	ldr	r2, [pc, #8]	@ (801760c <_ZN8touchgfx17AbstractPartitionC1Ev+0xc>)
 8017602:	6002      	str	r2, [r0, #0]
 8017604:	2200      	movs	r2, #0
 8017606:	8082      	strh	r2, [r0, #4]
 8017608:	4770      	bx	lr
 801760a:	bf00      	nop
 801760c:	0802d768 	.word	0x0802d768

08017610 <_ZN8touchgfx9Container13getFirstChildEv>:
 8017610:	6a80      	ldr	r0, [r0, #40]	@ 0x28
 8017612:	4770      	bx	lr

08017614 <_ZNK8touchgfx12TextProgress12getTypedTextEv>:
 8017614:	4a02      	ldr	r2, [pc, #8]	@ (8017620 <_ZNK8touchgfx12TextProgress12getTypedTextEv+0xc>)
 8017616:	6002      	str	r2, [r0, #0]
 8017618:	f8b1 20e0 	ldrh.w	r2, [r1, #224]	@ 0xe0
 801761c:	8082      	strh	r2, [r0, #4]
 801761e:	4770      	bx	lr
 8017620:	0802d10c 	.word	0x0802d10c

08017624 <_ZN8touchgfx12TextProgress8setColorENS_9colortypeE>:
 8017624:	f8c0 10e4 	str.w	r1, [r0, #228]	@ 0xe4
 8017628:	4770      	bx	lr

0801762a <_ZNK8touchgfx12TextProgress8getColorEv>:
 801762a:	f8d0 00e4 	ldr.w	r0, [r0, #228]	@ 0xe4
 801762e:	4770      	bx	lr

08017630 <_ZN8touchgfx12TextProgress19setNumberOfDecimalsEt>:
 8017630:	2902      	cmp	r1, #2
 8017632:	b570      	push	{r4, r5, r6, lr}
 8017634:	bf28      	it	cs
 8017636:	2102      	movcs	r1, #2
 8017638:	6803      	ldr	r3, [r0, #0]
 801763a:	4604      	mov	r4, r0
 801763c:	f8a0 1106 	strh.w	r1, [r0, #262]	@ 0x106
 8017640:	f8d3 50ac 	ldr.w	r5, [r3, #172]	@ 0xac
 8017644:	f8d3 30b8 	ldr.w	r3, [r3, #184]	@ 0xb8
 8017648:	4798      	blx	r3
 801764a:	462b      	mov	r3, r5
 801764c:	4601      	mov	r1, r0
 801764e:	4620      	mov	r0, r4
 8017650:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8017654:	4718      	bx	r3

08017656 <_ZNK8touchgfx12TextProgress19getNumberOfDecimalsEv>:
 8017656:	f8b0 0106 	ldrh.w	r0, [r0, #262]	@ 0x106
 801765a:	4770      	bx	lr

0801765c <_ZN8touchgfx12TextProgress12setTypedTextERKNS_9TypedTextE>:
 801765c:	30b4      	adds	r0, #180	@ 0xb4
 801765e:	f002 b9fa 	b.w	8019a56 <_ZN8touchgfx8TextArea12setTypedTextERKNS_9TypedTextE>

08017662 <_ZN8touchgfx12TextProgress8setAlphaEh>:
 8017662:	b538      	push	{r3, r4, r5, lr}
 8017664:	4604      	mov	r4, r0
 8017666:	460d      	mov	r5, r1
 8017668:	f000 f8e7 	bl	801783a <_ZN8touchgfx25AbstractProgressIndicator8setAlphaEh>
 801766c:	f884 50ea 	strb.w	r5, [r4, #234]	@ 0xea
 8017670:	bd38      	pop	{r3, r4, r5, pc}
	...

08017674 <_ZN8touchgfx12TextProgress8setValueEi>:
 8017674:	b530      	push	{r4, r5, lr}
 8017676:	b087      	sub	sp, #28
 8017678:	4604      	mov	r4, r0
 801767a:	f000 f927 	bl	80178cc <_ZN8touchgfx25AbstractProgressIndicator8setValueEi>
 801767e:	4b1d      	ldr	r3, [pc, #116]	@ (80176f4 <_ZN8touchgfx12TextProgress8setValueEi+0x80>)
 8017680:	f104 05f4 	add.w	r5, r4, #244	@ 0xf4
 8017684:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8017688:	ab06      	add	r3, sp, #24
 801768a:	e903 0007 	stmdb	r3, {r0, r1, r2}
 801768e:	f8b4 3106 	ldrh.w	r3, [r4, #262]	@ 0x106
 8017692:	aa06      	add	r2, sp, #24
 8017694:	4620      	mov	r0, r4
 8017696:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 801769a:	f853 1c0c 	ldr.w	r1, [r3, #-12]
 801769e:	eb01 0181 	add.w	r1, r1, r1, lsl #2
 80176a2:	eb01 0181 	add.w	r1, r1, r1, lsl #2
 80176a6:	0089      	lsls	r1, r1, #2
 80176a8:	b289      	uxth	r1, r1
 80176aa:	f000 f9a2 	bl	80179f2 <_ZNK8touchgfx25AbstractProgressIndicator11getProgressEt>
 80176ae:	f8b4 1106 	ldrh.w	r1, [r4, #262]	@ 0x106
 80176b2:	b1c1      	cbz	r1, 80176e6 <_ZN8touchgfx12TextProgress8setValueEi+0x72>
 80176b4:	ab06      	add	r3, sp, #24
 80176b6:	eb03 0381 	add.w	r3, r3, r1, lsl #2
 80176ba:	f853 2c0c 	ldr.w	r2, [r3, #-12]
 80176be:	fb90 f3f2 	sdiv	r3, r0, r2
 80176c2:	fb02 0213 	mls	r2, r2, r3, r0
 80176c6:	4628      	mov	r0, r5
 80176c8:	e9cd 1200 	strd	r1, r2, [sp]
 80176cc:	4a0a      	ldr	r2, [pc, #40]	@ (80176f8 <_ZN8touchgfx12TextProgress8setValueEi+0x84>)
 80176ce:	2108      	movs	r1, #8
 80176d0:	f007 f966 	bl	801e9a0 <_ZN8touchgfx7Unicode8snprintfEPttPKcz>
 80176d4:	f104 00b4 	add.w	r0, r4, #180	@ 0xb4
 80176d8:	f8c4 50f0 	str.w	r5, [r4, #240]	@ 0xf0
 80176dc:	b007      	add	sp, #28
 80176de:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80176e2:	f005 b90b 	b.w	801c8fc <_ZNK8touchgfx8Drawable10invalidateEv>
 80176e6:	4603      	mov	r3, r0
 80176e8:	4a04      	ldr	r2, [pc, #16]	@ (80176fc <_ZN8touchgfx12TextProgress8setValueEi+0x88>)
 80176ea:	2108      	movs	r1, #8
 80176ec:	4628      	mov	r0, r5
 80176ee:	f007 f957 	bl	801e9a0 <_ZN8touchgfx7Unicode8snprintfEPttPKcz>
 80176f2:	e7ef      	b.n	80176d4 <_ZN8touchgfx12TextProgress8setValueEi+0x60>
 80176f4:	0802ca04 	.word	0x0802ca04
 80176f8:	0802d85f 	.word	0x0802d85f
 80176fc:	0802d867 	.word	0x0802d867

08017700 <_ZN8touchgfx12TextProgress28setProgressIndicatorPositionEssss>:
 8017700:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8017704:	461d      	mov	r5, r3
 8017706:	f100 07b4 	add.w	r7, r0, #180	@ 0xb4
 801770a:	2300      	movs	r3, #0
 801770c:	f9bd 6020 	ldrsh.w	r6, [sp, #32]
 8017710:	4691      	mov	r9, r2
 8017712:	4604      	mov	r4, r0
 8017714:	f8c0 30b8 	str.w	r3, [r0, #184]	@ 0xb8
 8017718:	4688      	mov	r8, r1
 801771a:	4638      	mov	r0, r7
 801771c:	4629      	mov	r1, r5
 801771e:	f7ec fc47 	bl	8003fb0 <_ZN8touchgfx8Drawable8setWidthEs>
 8017722:	4631      	mov	r1, r6
 8017724:	4638      	mov	r0, r7
 8017726:	f7ec fc52 	bl	8003fce <_ZN8touchgfx8Drawable9setHeightEs>
 801772a:	9608      	str	r6, [sp, #32]
 801772c:	462b      	mov	r3, r5
 801772e:	464a      	mov	r2, r9
 8017730:	4641      	mov	r1, r8
 8017732:	4620      	mov	r0, r4
 8017734:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8017738:	f000 b978 	b.w	8017a2c <_ZN8touchgfx25AbstractProgressIndicator28setProgressIndicatorPositionEssss>

0801773c <_ZN8touchgfx12TextProgressC1Ev>:
 801773c:	b510      	push	{r4, lr}
 801773e:	4604      	mov	r4, r0
 8017740:	f000 f9a0 	bl	8017a84 <_ZN8touchgfx25AbstractProgressIndicatorC1Ev>
 8017744:	2201      	movs	r2, #1
 8017746:	4b20      	ldr	r3, [pc, #128]	@ (80177c8 <_ZN8touchgfx12TextProgressC1Ev+0x8c>)
 8017748:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 801774c:	f104 01b4 	add.w	r1, r4, #180	@ 0xb4
 8017750:	f884 20d9 	strb.w	r2, [r4, #217]	@ 0xd9
 8017754:	4a1d      	ldr	r2, [pc, #116]	@ (80177cc <_ZN8touchgfx12TextProgressC1Ev+0x90>)
 8017756:	6023      	str	r3, [r4, #0]
 8017758:	2300      	movs	r3, #0
 801775a:	f8c4 20dc 	str.w	r2, [r4, #220]	@ 0xdc
 801775e:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8017762:	f8a4 30b8 	strh.w	r3, [r4, #184]	@ 0xb8
 8017766:	f8a4 20e0 	strh.w	r2, [r4, #224]	@ 0xe0
 801776a:	f44f 027f 	mov.w	r2, #16711680	@ 0xff0000
 801776e:	f8a4 30ba 	strh.w	r3, [r4, #186]	@ 0xba
 8017772:	f8c4 20e8 	str.w	r2, [r4, #232]	@ 0xe8
 8017776:	4a16      	ldr	r2, [pc, #88]	@ (80177d0 <_ZN8touchgfx12TextProgressC1Ev+0x94>)
 8017778:	f8a4 30bc 	strh.w	r3, [r4, #188]	@ 0xbc
 801777c:	f8a4 30be 	strh.w	r3, [r4, #190]	@ 0xbe
 8017780:	f8a4 30c0 	strh.w	r3, [r4, #192]	@ 0xc0
 8017784:	f8a4 30c2 	strh.w	r3, [r4, #194]	@ 0xc2
 8017788:	f8a4 30c4 	strh.w	r3, [r4, #196]	@ 0xc4
 801778c:	f8a4 30c6 	strh.w	r3, [r4, #198]	@ 0xc6
 8017790:	f8c4 30d0 	str.w	r3, [r4, #208]	@ 0xd0
 8017794:	f8a4 30d4 	strh.w	r3, [r4, #212]	@ 0xd4
 8017798:	f8a4 30d6 	strh.w	r3, [r4, #214]	@ 0xd6
 801779c:	f884 30d8 	strb.w	r3, [r4, #216]	@ 0xd8
 80177a0:	f8c4 30e4 	str.w	r3, [r4, #228]	@ 0xe4
 80177a4:	f884 30ec 	strb.w	r3, [r4, #236]	@ 0xec
 80177a8:	f884 30ed 	strb.w	r3, [r4, #237]	@ 0xed
 80177ac:	f8c4 20b4 	str.w	r2, [r4, #180]	@ 0xb4
 80177b0:	f8c4 30f0 	str.w	r3, [r4, #240]	@ 0xf0
 80177b4:	f8a4 3106 	strh.w	r3, [r4, #262]	@ 0x106
 80177b8:	f8a4 30f4 	strh.w	r3, [r4, #244]	@ 0xf4
 80177bc:	e9c4 3332 	strd	r3, r3, [r4, #200]	@ 0xc8
 80177c0:	f000 fa1e 	bl	8017c00 <_ZN8touchgfx9Container3addERNS_8DrawableE>
 80177c4:	4620      	mov	r0, r4
 80177c6:	bd10      	pop	{r4, pc}
 80177c8:	0802d874 	.word	0x0802d874
 80177cc:	0802d10c 	.word	0x0802d10c
 80177d0:	0802edac 	.word	0x0802edac

080177d4 <_ZNK8touchgfx25AbstractProgressIndicator21getProgressIndicatorXEv>:
 80177d4:	f9b0 005c 	ldrsh.w	r0, [r0, #92]	@ 0x5c
 80177d8:	4770      	bx	lr

080177da <_ZNK8touchgfx25AbstractProgressIndicator21getProgressIndicatorYEv>:
 80177da:	f9b0 005e 	ldrsh.w	r0, [r0, #94]	@ 0x5e
 80177de:	4770      	bx	lr

080177e0 <_ZNK8touchgfx25AbstractProgressIndicator25getProgressIndicatorWidthEv>:
 80177e0:	f9b0 0060 	ldrsh.w	r0, [r0, #96]	@ 0x60
 80177e4:	4770      	bx	lr

080177e6 <_ZNK8touchgfx25AbstractProgressIndicator26getProgressIndicatorHeightEv>:
 80177e6:	f9b0 0062 	ldrsh.w	r0, [r0, #98]	@ 0x62
 80177ea:	4770      	bx	lr

080177ec <_ZNK8touchgfx25AbstractProgressIndicator8getRangeERiS1_RtS2_>:
 80177ec:	b510      	push	{r4, lr}
 80177ee:	f8d0 4084 	ldr.w	r4, [r0, #132]	@ 0x84
 80177f2:	600c      	str	r4, [r1, #0]
 80177f4:	f8d0 1088 	ldr.w	r1, [r0, #136]	@ 0x88
 80177f8:	6011      	str	r1, [r2, #0]
 80177fa:	f8b0 2090 	ldrh.w	r2, [r0, #144]	@ 0x90
 80177fe:	801a      	strh	r2, [r3, #0]
 8017800:	9b02      	ldr	r3, [sp, #8]
 8017802:	f8b0 2092 	ldrh.w	r2, [r0, #146]	@ 0x92
 8017806:	801a      	strh	r2, [r3, #0]
 8017808:	bd10      	pop	{r4, pc}

0801780a <_ZNK8touchgfx25AbstractProgressIndicator8getRangeERiS1_Rt>:
 801780a:	b510      	push	{r4, lr}
 801780c:	f8d0 4084 	ldr.w	r4, [r0, #132]	@ 0x84
 8017810:	600c      	str	r4, [r1, #0]
 8017812:	f8d0 1088 	ldr.w	r1, [r0, #136]	@ 0x88
 8017816:	6011      	str	r1, [r2, #0]
 8017818:	f8b0 2090 	ldrh.w	r2, [r0, #144]	@ 0x90
 801781c:	801a      	strh	r2, [r3, #0]
 801781e:	bd10      	pop	{r4, pc}

08017820 <_ZNK8touchgfx25AbstractProgressIndicator8getRangeERiS1_>:
 8017820:	f8d0 3084 	ldr.w	r3, [r0, #132]	@ 0x84
 8017824:	600b      	str	r3, [r1, #0]
 8017826:	f8d0 3088 	ldr.w	r3, [r0, #136]	@ 0x88
 801782a:	6013      	str	r3, [r2, #0]
 801782c:	4770      	bx	lr

0801782e <_ZN8touchgfx25AbstractProgressIndicator17setEasingEquationEPFstsstE>:
 801782e:	f8c0 1094 	str.w	r1, [r0, #148]	@ 0x94
 8017832:	4770      	bx	lr

08017834 <_ZNK8touchgfx25AbstractProgressIndicator8getValueEv>:
 8017834:	f8d0 008c 	ldr.w	r0, [r0, #140]	@ 0x8c
 8017838:	4770      	bx	lr

0801783a <_ZN8touchgfx25AbstractProgressIndicator8setAlphaEh>:
 801783a:	f880 1054 	strb.w	r1, [r0, #84]	@ 0x54
 801783e:	4770      	bx	lr

08017840 <_ZNK8touchgfx25AbstractProgressIndicator8getAlphaEv>:
 8017840:	f890 0054 	ldrb.w	r0, [r0, #84]	@ 0x54
 8017844:	4770      	bx	lr

08017846 <_ZN8touchgfx25AbstractProgressIndicator11updateValueEit>:
 8017846:	b570      	push	{r4, r5, r6, lr}
 8017848:	f8d0 5084 	ldr.w	r5, [r0, #132]	@ 0x84
 801784c:	4604      	mov	r4, r0
 801784e:	4616      	mov	r6, r2
 8017850:	428d      	cmp	r5, r1
 8017852:	bfb8      	it	lt
 8017854:	460d      	movlt	r5, r1
 8017856:	f8d0 1088 	ldr.w	r1, [r0, #136]	@ 0x88
 801785a:	428d      	cmp	r5, r1
 801785c:	bfa8      	it	ge
 801785e:	460d      	movge	r5, r1
 8017860:	b99a      	cbnz	r2, 801788a <_ZN8touchgfx25AbstractProgressIndicator11updateValueEit+0x44>
 8017862:	6803      	ldr	r3, [r0, #0]
 8017864:	4629      	mov	r1, r5
 8017866:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 801786a:	4798      	blx	r3
 801786c:	f8d4 00b0 	ldr.w	r0, [r4, #176]	@ 0xb0
 8017870:	b358      	cbz	r0, 80178ca <_ZN8touchgfx25AbstractProgressIndicator11updateValueEit+0x84>
 8017872:	6803      	ldr	r3, [r0, #0]
 8017874:	68db      	ldr	r3, [r3, #12]
 8017876:	4798      	blx	r3
 8017878:	b338      	cbz	r0, 80178ca <_ZN8touchgfx25AbstractProgressIndicator11updateValueEit+0x84>
 801787a:	f8d4 00b0 	ldr.w	r0, [r4, #176]	@ 0xb0
 801787e:	4621      	mov	r1, r4
 8017880:	6803      	ldr	r3, [r0, #0]
 8017882:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8017886:	689b      	ldr	r3, [r3, #8]
 8017888:	4718      	bx	r3
 801788a:	f8d0 30a4 	ldr.w	r3, [r0, #164]	@ 0xa4
 801788e:	2b00      	cmp	r3, #0
 8017890:	dd07      	ble.n	80178a2 <_ZN8touchgfx25AbstractProgressIndicator11updateValueEit+0x5c>
 8017892:	f004 f869 	bl	801b968 <_ZN8touchgfx11Application11getInstanceEv>
 8017896:	4621      	mov	r1, r4
 8017898:	f004 f89e 	bl	801b9d8 <_ZN8touchgfx11Application21unregisterTimerWidgetEPKNS_8DrawableE>
 801789c:	2300      	movs	r3, #0
 801789e:	f884 3098 	strb.w	r3, [r4, #152]	@ 0x98
 80178a2:	6823      	ldr	r3, [r4, #0]
 80178a4:	4620      	mov	r0, r4
 80178a6:	f8d3 30b8 	ldr.w	r3, [r3, #184]	@ 0xb8
 80178aa:	4798      	blx	r3
 80178ac:	2300      	movs	r3, #0
 80178ae:	f8c4 60a4 	str.w	r6, [r4, #164]	@ 0xa4
 80178b2:	f8c4 30a8 	str.w	r3, [r4, #168]	@ 0xa8
 80178b6:	e9c4 0527 	strd	r0, r5, [r4, #156]	@ 0x9c
 80178ba:	f004 f855 	bl	801b968 <_ZN8touchgfx11Application11getInstanceEv>
 80178be:	4621      	mov	r1, r4
 80178c0:	f004 f858 	bl	801b974 <_ZN8touchgfx11Application19registerTimerWidgetEPNS_8DrawableE>
 80178c4:	2301      	movs	r3, #1
 80178c6:	f884 3098 	strb.w	r3, [r4, #152]	@ 0x98
 80178ca:	bd70      	pop	{r4, r5, r6, pc}

080178cc <_ZN8touchgfx25AbstractProgressIndicator8setValueEi>:
 80178cc:	b510      	push	{r4, lr}
 80178ce:	f8d0 3084 	ldr.w	r3, [r0, #132]	@ 0x84
 80178d2:	4604      	mov	r4, r0
 80178d4:	4299      	cmp	r1, r3
 80178d6:	bfb8      	it	lt
 80178d8:	4619      	movlt	r1, r3
 80178da:	f8d0 3088 	ldr.w	r3, [r0, #136]	@ 0x88
 80178de:	4299      	cmp	r1, r3
 80178e0:	bfa8      	it	ge
 80178e2:	4619      	movge	r1, r3
 80178e4:	f8d0 308c 	ldr.w	r3, [r0, #140]	@ 0x8c
 80178e8:	428b      	cmp	r3, r1
 80178ea:	d010      	beq.n	801790e <_ZN8touchgfx25AbstractProgressIndicator8setValueEi+0x42>
 80178ec:	f8c0 108c 	str.w	r1, [r0, #140]	@ 0x8c
 80178f0:	f8d0 00ac 	ldr.w	r0, [r0, #172]	@ 0xac
 80178f4:	b158      	cbz	r0, 801790e <_ZN8touchgfx25AbstractProgressIndicator8setValueEi+0x42>
 80178f6:	6803      	ldr	r3, [r0, #0]
 80178f8:	68db      	ldr	r3, [r3, #12]
 80178fa:	4798      	blx	r3
 80178fc:	b138      	cbz	r0, 801790e <_ZN8touchgfx25AbstractProgressIndicator8setValueEi+0x42>
 80178fe:	f8d4 00ac 	ldr.w	r0, [r4, #172]	@ 0xac
 8017902:	4621      	mov	r1, r4
 8017904:	6803      	ldr	r3, [r0, #0]
 8017906:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801790a:	689b      	ldr	r3, [r3, #8]
 801790c:	4718      	bx	r3
 801790e:	bd10      	pop	{r4, pc}

08017910 <_ZN8touchgfx25AbstractProgressIndicator8setRangeEiitt>:
 8017910:	4291      	cmp	r1, r2
 8017912:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8017916:	4604      	mov	r4, r0
 8017918:	460e      	mov	r6, r1
 801791a:	4615      	mov	r5, r2
 801791c:	4698      	mov	r8, r3
 801791e:	f8bd 7018 	ldrh.w	r7, [sp, #24]
 8017922:	db05      	blt.n	8017930 <_ZN8touchgfx25AbstractProgressIndicator8setRangeEiitt+0x20>
 8017924:	4b11      	ldr	r3, [pc, #68]	@ (801796c <_ZN8touchgfx25AbstractProgressIndicator8setRangeEiitt+0x5c>)
 8017926:	214b      	movs	r1, #75	@ 0x4b
 8017928:	4a11      	ldr	r2, [pc, #68]	@ (8017970 <_ZN8touchgfx25AbstractProgressIndicator8setRangeEiitt+0x60>)
 801792a:	4812      	ldr	r0, [pc, #72]	@ (8017974 <_ZN8touchgfx25AbstractProgressIndicator8setRangeEiitt+0x64>)
 801792c:	f013 f98a 	bl	802ac44 <__assert_func>
 8017930:	6803      	ldr	r3, [r0, #0]
 8017932:	e9c0 1221 	strd	r1, r2, [r0, #132]	@ 0x84
 8017936:	f8d0 108c 	ldr.w	r1, [r0, #140]	@ 0x8c
 801793a:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 801793e:	4798      	blx	r3
 8017940:	f1b8 0f00 	cmp.w	r8, #0
 8017944:	d10c      	bne.n	8017960 <_ZN8touchgfx25AbstractProgressIndicator8setRangeEiitt+0x50>
 8017946:	1bad      	subs	r5, r5, r6
 8017948:	f8a4 5090 	strh.w	r5, [r4, #144]	@ 0x90
 801794c:	f8b4 3090 	ldrh.w	r3, [r4, #144]	@ 0x90
 8017950:	f8a4 7092 	strh.w	r7, [r4, #146]	@ 0x92
 8017954:	42bb      	cmp	r3, r7
 8017956:	d806      	bhi.n	8017966 <_ZN8touchgfx25AbstractProgressIndicator8setRangeEiitt+0x56>
 8017958:	4b07      	ldr	r3, [pc, #28]	@ (8017978 <_ZN8touchgfx25AbstractProgressIndicator8setRangeEiitt+0x68>)
 801795a:	2158      	movs	r1, #88	@ 0x58
 801795c:	4a04      	ldr	r2, [pc, #16]	@ (8017970 <_ZN8touchgfx25AbstractProgressIndicator8setRangeEiitt+0x60>)
 801795e:	e7e4      	b.n	801792a <_ZN8touchgfx25AbstractProgressIndicator8setRangeEiitt+0x1a>
 8017960:	f8a4 8090 	strh.w	r8, [r4, #144]	@ 0x90
 8017964:	e7f2      	b.n	801794c <_ZN8touchgfx25AbstractProgressIndicator8setRangeEiitt+0x3c>
 8017966:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801796a:	bf00      	nop
 801796c:	0802d954 	.word	0x0802d954
 8017970:	0802daa0 	.word	0x0802daa0
 8017974:	0802d95e 	.word	0x0802d95e
 8017978:	0802d9b5 	.word	0x0802d9b5

0801797c <_ZN8touchgfx25AbstractProgressIndicator15handleTickEventEv>:
 801797c:	b570      	push	{r4, r5, r6, lr}
 801797e:	f890 3098 	ldrb.w	r3, [r0, #152]	@ 0x98
 8017982:	4604      	mov	r4, r0
 8017984:	b3a3      	cbz	r3, 80179f0 <_ZN8touchgfx25AbstractProgressIndicator15handleTickEventEv+0x74>
 8017986:	f8d0 00a8 	ldr.w	r0, [r0, #168]	@ 0xa8
 801798a:	2100      	movs	r1, #0
 801798c:	f8d4 5094 	ldr.w	r5, [r4, #148]	@ 0x94
 8017990:	3001      	adds	r0, #1
 8017992:	e9d4 3227 	ldrd	r3, r2, [r4, #156]	@ 0x9c
 8017996:	f8c4 00a8 	str.w	r0, [r4, #168]	@ 0xa8
 801799a:	b280      	uxth	r0, r0
 801799c:	1ad2      	subs	r2, r2, r3
 801799e:	f8b4 30a4 	ldrh.w	r3, [r4, #164]	@ 0xa4
 80179a2:	b212      	sxth	r2, r2
 80179a4:	47a8      	blx	r5
 80179a6:	f8d4 109c 	ldr.w	r1, [r4, #156]	@ 0x9c
 80179aa:	6823      	ldr	r3, [r4, #0]
 80179ac:	4401      	add	r1, r0
 80179ae:	4620      	mov	r0, r4
 80179b0:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 80179b4:	4798      	blx	r3
 80179b6:	e9d4 3229 	ldrd	r3, r2, [r4, #164]	@ 0xa4
 80179ba:	429a      	cmp	r2, r3
 80179bc:	db18      	blt.n	80179f0 <_ZN8touchgfx25AbstractProgressIndicator15handleTickEventEv+0x74>
 80179be:	2500      	movs	r5, #0
 80179c0:	e9c4 5529 	strd	r5, r5, [r4, #164]	@ 0xa4
 80179c4:	f003 ffd0 	bl	801b968 <_ZN8touchgfx11Application11getInstanceEv>
 80179c8:	4621      	mov	r1, r4
 80179ca:	f004 f805 	bl	801b9d8 <_ZN8touchgfx11Application21unregisterTimerWidgetEPKNS_8DrawableE>
 80179ce:	f8d4 00b0 	ldr.w	r0, [r4, #176]	@ 0xb0
 80179d2:	f884 5098 	strb.w	r5, [r4, #152]	@ 0x98
 80179d6:	b158      	cbz	r0, 80179f0 <_ZN8touchgfx25AbstractProgressIndicator15handleTickEventEv+0x74>
 80179d8:	6803      	ldr	r3, [r0, #0]
 80179da:	68db      	ldr	r3, [r3, #12]
 80179dc:	4798      	blx	r3
 80179de:	b138      	cbz	r0, 80179f0 <_ZN8touchgfx25AbstractProgressIndicator15handleTickEventEv+0x74>
 80179e0:	f8d4 00b0 	ldr.w	r0, [r4, #176]	@ 0xb0
 80179e4:	4621      	mov	r1, r4
 80179e6:	6803      	ldr	r3, [r0, #0]
 80179e8:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 80179ec:	689b      	ldr	r3, [r3, #8]
 80179ee:	4718      	bx	r3
 80179f0:	bd70      	pop	{r4, r5, r6, pc}

080179f2 <_ZNK8touchgfx25AbstractProgressIndicator11getProgressEt>:
 80179f2:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80179f4:	4604      	mov	r4, r0
 80179f6:	460d      	mov	r5, r1
 80179f8:	b1a9      	cbz	r1, 8017a26 <_ZNK8touchgfx25AbstractProgressIndicator11getProgressEt+0x34>
 80179fa:	f8b0 6092 	ldrh.w	r6, [r0, #146]	@ 0x92
 80179fe:	ab01      	add	r3, sp, #4
 8017a00:	f8b4 1090 	ldrh.w	r1, [r4, #144]	@ 0x90
 8017a04:	f8d4 708c 	ldr.w	r7, [r4, #140]	@ 0x8c
 8017a08:	1b89      	subs	r1, r1, r6
 8017a0a:	e9d0 0221 	ldrd	r0, r2, [r0, #132]	@ 0x84
 8017a0e:	1a12      	subs	r2, r2, r0
 8017a10:	1a38      	subs	r0, r7, r0
 8017a12:	f005 f912 	bl	801cc3a <_ZN8touchgfx6muldivElllRl>
 8017a16:	4629      	mov	r1, r5
 8017a18:	ab01      	add	r3, sp, #4
 8017a1a:	f8b4 2090 	ldrh.w	r2, [r4, #144]	@ 0x90
 8017a1e:	4430      	add	r0, r6
 8017a20:	f005 f90b 	bl	801cc3a <_ZN8touchgfx6muldivElllRl>
 8017a24:	b285      	uxth	r5, r0
 8017a26:	4628      	mov	r0, r5
 8017a28:	b003      	add	sp, #12
 8017a2a:	bdf0      	pop	{r4, r5, r6, r7, pc}

08017a2c <_ZN8touchgfx25AbstractProgressIndicator28setProgressIndicatorPositionEssss>:
 8017a2c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8017a30:	4604      	mov	r4, r0
 8017a32:	f9bd 7018 	ldrsh.w	r7, [sp, #24]
 8017a36:	4698      	mov	r8, r3
 8017a38:	460e      	mov	r6, r1
 8017a3a:	4615      	mov	r5, r2
 8017a3c:	f8a4 105c 	strh.w	r1, [r4, #92]	@ 0x5c
 8017a40:	f8a4 205e 	strh.w	r2, [r4, #94]	@ 0x5e
 8017a44:	4619      	mov	r1, r3
 8017a46:	463a      	mov	r2, r7
 8017a48:	3058      	adds	r0, #88	@ 0x58
 8017a4a:	f7ec faef 	bl	800402c <_ZN8touchgfx8Drawable14setWidthHeightEss>
 8017a4e:	4446      	add	r6, r8
 8017a50:	f9b4 3008 	ldrsh.w	r3, [r4, #8]
 8017a54:	443d      	add	r5, r7
 8017a56:	42b3      	cmp	r3, r6
 8017a58:	f9b4 300a 	ldrsh.w	r3, [r4, #10]
 8017a5c:	bfb8      	it	lt
 8017a5e:	8126      	strhlt	r6, [r4, #8]
 8017a60:	42ab      	cmp	r3, r5
 8017a62:	bfb8      	it	lt
 8017a64:	8165      	strhlt	r5, [r4, #10]
 8017a66:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08017a6a <_ZN8touchgfx25AbstractProgressIndicator13setBackgroundERKNS_6BitmapE>:
 8017a6a:	b510      	push	{r4, lr}
 8017a6c:	4604      	mov	r4, r0
 8017a6e:	302c      	adds	r0, #44	@ 0x2c
 8017a70:	f002 fa6b 	bl	8019f4a <_ZN8touchgfx5Image9setBitmapERKNS_6BitmapE>
 8017a74:	f9b4 2036 	ldrsh.w	r2, [r4, #54]	@ 0x36
 8017a78:	4620      	mov	r0, r4
 8017a7a:	f9b4 1034 	ldrsh.w	r1, [r4, #52]	@ 0x34
 8017a7e:	f7ec fad5 	bl	800402c <_ZN8touchgfx8Drawable14setWidthHeightEss>
 8017a82:	bd10      	pop	{r4, pc}

08017a84 <_ZN8touchgfx25AbstractProgressIndicatorC1Ev>:
 8017a84:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8017a86:	4604      	mov	r4, r0
 8017a88:	2500      	movs	r5, #0
 8017a8a:	f7ec f9b3 	bl	8003df4 <_ZN8touchgfx8DrawableC1Ev>
 8017a8e:	4b24      	ldr	r3, [pc, #144]	@ (8017b20 <_ZN8touchgfx25AbstractProgressIndicatorC1Ev+0x9c>)
 8017a90:	4626      	mov	r6, r4
 8017a92:	f64f 77ff 	movw	r7, #65535	@ 0xffff
 8017a96:	2226      	movs	r2, #38	@ 0x26
 8017a98:	4629      	mov	r1, r5
 8017a9a:	62a5      	str	r5, [r4, #40]	@ 0x28
 8017a9c:	f846 3b2c 	str.w	r3, [r6], #44
 8017aa0:	4630      	mov	r0, r6
 8017aa2:	f8ad 7004 	strh.w	r7, [sp, #4]
 8017aa6:	f013 fad4 	bl	802b052 <memset>
 8017aaa:	4630      	mov	r0, r6
 8017aac:	f7ec f9a2 	bl	8003df4 <_ZN8touchgfx8DrawableC1Ev>
 8017ab0:	a902      	add	r1, sp, #8
 8017ab2:	4b1c      	ldr	r3, [pc, #112]	@ (8017b24 <_ZN8touchgfx25AbstractProgressIndicatorC1Ev+0xa0>)
 8017ab4:	4630      	mov	r0, r6
 8017ab6:	f884 7054 	strb.w	r7, [r4, #84]	@ 0x54
 8017aba:	f104 0758 	add.w	r7, r4, #88	@ 0x58
 8017abe:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8017ac0:	f831 3d04 	ldrh.w	r3, [r1, #-4]!
 8017ac4:	f8a4 3052 	strh.w	r3, [r4, #82]	@ 0x52
 8017ac8:	f002 fa3f 	bl	8019f4a <_ZN8touchgfx5Image9setBitmapERKNS_6BitmapE>
 8017acc:	4638      	mov	r0, r7
 8017ace:	f7ec f991 	bl	8003df4 <_ZN8touchgfx8DrawableC1Ev>
 8017ad2:	4b15      	ldr	r3, [pc, #84]	@ (8017b28 <_ZN8touchgfx25AbstractProgressIndicatorC1Ev+0xa4>)
 8017ad4:	4629      	mov	r1, r5
 8017ad6:	4630      	mov	r0, r6
 8017ad8:	65a3      	str	r3, [r4, #88]	@ 0x58
 8017ada:	2364      	movs	r3, #100	@ 0x64
 8017adc:	f884 5098 	strb.w	r5, [r4, #152]	@ 0x98
 8017ae0:	f8c4 3090 	str.w	r3, [r4, #144]	@ 0x90
 8017ae4:	e9c4 3522 	strd	r3, r5, [r4, #136]	@ 0x88
 8017ae8:	4b10      	ldr	r3, [pc, #64]	@ (8017b2c <_ZN8touchgfx25AbstractProgressIndicatorC1Ev+0xa8>)
 8017aea:	e9c4 5520 	strd	r5, r5, [r4, #128]	@ 0x80
 8017aee:	f8c4 3094 	str.w	r3, [r4, #148]	@ 0x94
 8017af2:	e9c4 5527 	strd	r5, r5, [r4, #156]	@ 0x9c
 8017af6:	e9c4 5529 	strd	r5, r5, [r4, #164]	@ 0xa4
 8017afa:	e9c4 552b 	strd	r5, r5, [r4, #172]	@ 0xac
 8017afe:	f7ec fa1b 	bl	8003f38 <_ZN8touchgfx8Drawable4setXEs>
 8017b02:	4629      	mov	r1, r5
 8017b04:	4630      	mov	r0, r6
 8017b06:	f7ec fa26 	bl	8003f56 <_ZN8touchgfx8Drawable4setYEs>
 8017b0a:	4631      	mov	r1, r6
 8017b0c:	4620      	mov	r0, r4
 8017b0e:	f000 f877 	bl	8017c00 <_ZN8touchgfx9Container3addERNS_8DrawableE>
 8017b12:	4620      	mov	r0, r4
 8017b14:	4639      	mov	r1, r7
 8017b16:	f000 f873 	bl	8017c00 <_ZN8touchgfx9Container3addERNS_8DrawableE>
 8017b1a:	4620      	mov	r0, r4
 8017b1c:	b003      	add	sp, #12
 8017b1e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8017b20:	0802d9d8 	.word	0x0802d9d8
 8017b24:	0802eeb8 	.word	0x0802eeb8
 8017b28:	0802dbcc 	.word	0x0802dbcc
 8017b2c:	0801d303 	.word	0x0801d303

08017b30 <_ZN8touchgfx9Container8containsERKNS_8DrawableE>:
 8017b30:	6a83      	ldr	r3, [r0, #40]	@ 0x28
 8017b32:	2000      	movs	r0, #0
 8017b34:	b12b      	cbz	r3, 8017b42 <_ZN8touchgfx9Container8containsERKNS_8DrawableE+0x12>
 8017b36:	b920      	cbnz	r0, 8017b42 <_ZN8touchgfx9Container8containsERKNS_8DrawableE+0x12>
 8017b38:	1a5a      	subs	r2, r3, r1
 8017b3a:	699b      	ldr	r3, [r3, #24]
 8017b3c:	4250      	negs	r0, r2
 8017b3e:	4150      	adcs	r0, r2
 8017b40:	e7f8      	b.n	8017b34 <_ZN8touchgfx9Container8containsERKNS_8DrawableE+0x4>
 8017b42:	4770      	bx	lr

08017b44 <_ZN8touchgfx9Container9removeAllEv>:
 8017b44:	2200      	movs	r2, #0
 8017b46:	6a83      	ldr	r3, [r0, #40]	@ 0x28
 8017b48:	b123      	cbz	r3, 8017b54 <_ZN8touchgfx9Container9removeAllEv+0x10>
 8017b4a:	6999      	ldr	r1, [r3, #24]
 8017b4c:	6281      	str	r1, [r0, #40]	@ 0x28
 8017b4e:	e9c3 2205 	strd	r2, r2, [r3, #20]
 8017b52:	e7f8      	b.n	8017b46 <_ZN8touchgfx9Container9removeAllEv+0x2>
 8017b54:	4770      	bx	lr

08017b56 <_ZN8touchgfx9Container6unlinkEv>:
 8017b56:	2300      	movs	r3, #0
 8017b58:	6283      	str	r3, [r0, #40]	@ 0x28
 8017b5a:	4770      	bx	lr

08017b5c <_ZNK8touchgfx9Container12getSolidRectEv>:
 8017b5c:	2200      	movs	r2, #0
 8017b5e:	8002      	strh	r2, [r0, #0]
 8017b60:	8042      	strh	r2, [r0, #2]
 8017b62:	8082      	strh	r2, [r0, #4]
 8017b64:	80c2      	strh	r2, [r0, #6]
 8017b66:	4770      	bx	lr

08017b68 <_ZN8touchgfx9Container20moveChildrenRelativeEss>:
 8017b68:	b570      	push	{r4, r5, r6, lr}
 8017b6a:	460d      	mov	r5, r1
 8017b6c:	4616      	mov	r6, r2
 8017b6e:	6a84      	ldr	r4, [r0, #40]	@ 0x28
 8017b70:	b13c      	cbz	r4, 8017b82 <_ZN8touchgfx9Container20moveChildrenRelativeEss+0x1a>
 8017b72:	6823      	ldr	r3, [r4, #0]
 8017b74:	4620      	mov	r0, r4
 8017b76:	4632      	mov	r2, r6
 8017b78:	4629      	mov	r1, r5
 8017b7a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8017b7c:	4798      	blx	r3
 8017b7e:	69a4      	ldr	r4, [r4, #24]
 8017b80:	e7f6      	b.n	8017b70 <_ZN8touchgfx9Container20moveChildrenRelativeEss+0x8>
 8017b82:	bd70      	pop	{r4, r5, r6, pc}

08017b84 <_ZN8touchgfx9Container12forEachChildEPNS_15GenericCallbackIRNS_8DrawableEvvEE>:
 8017b84:	b538      	push	{r3, r4, r5, lr}
 8017b86:	460d      	mov	r5, r1
 8017b88:	6a84      	ldr	r4, [r0, #40]	@ 0x28
 8017b8a:	b134      	cbz	r4, 8017b9a <_ZN8touchgfx9Container12forEachChildEPNS_15GenericCallbackIRNS_8DrawableEvvEE+0x16>
 8017b8c:	682b      	ldr	r3, [r5, #0]
 8017b8e:	4621      	mov	r1, r4
 8017b90:	4628      	mov	r0, r5
 8017b92:	689b      	ldr	r3, [r3, #8]
 8017b94:	4798      	blx	r3
 8017b96:	69a4      	ldr	r4, [r4, #24]
 8017b98:	e7f7      	b.n	8017b8a <_ZN8touchgfx9Container12forEachChildEPNS_15GenericCallbackIRNS_8DrawableEvvEE+0x6>
 8017b9a:	bd38      	pop	{r3, r4, r5, pc}

08017b9c <_ZN8touchgfx9Container6removeERNS_8DrawableE>:
 8017b9c:	6a83      	ldr	r3, [r0, #40]	@ 0x28
 8017b9e:	b19b      	cbz	r3, 8017bc8 <_ZN8touchgfx9Container6removeERNS_8DrawableE+0x2c>
 8017ba0:	428b      	cmp	r3, r1
 8017ba2:	d109      	bne.n	8017bb8 <_ZN8touchgfx9Container6removeERNS_8DrawableE+0x1c>
 8017ba4:	699a      	ldr	r2, [r3, #24]
 8017ba6:	2100      	movs	r1, #0
 8017ba8:	6159      	str	r1, [r3, #20]
 8017baa:	6282      	str	r2, [r0, #40]	@ 0x28
 8017bac:	b902      	cbnz	r2, 8017bb0 <_ZN8touchgfx9Container6removeERNS_8DrawableE+0x14>
 8017bae:	4770      	bx	lr
 8017bb0:	6199      	str	r1, [r3, #24]
 8017bb2:	4770      	bx	lr
 8017bb4:	4613      	mov	r3, r2
 8017bb6:	b13a      	cbz	r2, 8017bc8 <_ZN8touchgfx9Container6removeERNS_8DrawableE+0x2c>
 8017bb8:	699a      	ldr	r2, [r3, #24]
 8017bba:	428a      	cmp	r2, r1
 8017bbc:	d1fa      	bne.n	8017bb4 <_ZN8touchgfx9Container6removeERNS_8DrawableE+0x18>
 8017bbe:	698a      	ldr	r2, [r1, #24]
 8017bc0:	619a      	str	r2, [r3, #24]
 8017bc2:	2300      	movs	r3, #0
 8017bc4:	e9c1 3305 	strd	r3, r3, [r1, #20]
 8017bc8:	4770      	bx	lr

08017bca <_ZN8touchgfx9Container6insertEPNS_8DrawableERS1_>:
 8017bca:	b410      	push	{r4}
 8017bcc:	6a83      	ldr	r3, [r0, #40]	@ 0x28
 8017bce:	4604      	mov	r4, r0
 8017bd0:	b92b      	cbnz	r3, 8017bde <_ZN8touchgfx9Container6insertEPNS_8DrawableERS1_+0x14>
 8017bd2:	6803      	ldr	r3, [r0, #0]
 8017bd4:	4611      	mov	r1, r2
 8017bd6:	f85d 4b04 	ldr.w	r4, [sp], #4
 8017bda:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8017bdc:	4718      	bx	r3
 8017bde:	b941      	cbnz	r1, 8017bf2 <_ZN8touchgfx9Container6insertEPNS_8DrawableERS1_+0x28>
 8017be0:	6193      	str	r3, [r2, #24]
 8017be2:	6282      	str	r2, [r0, #40]	@ 0x28
 8017be4:	6154      	str	r4, [r2, #20]
 8017be6:	f85d 4b04 	ldr.w	r4, [sp], #4
 8017bea:	4770      	bx	lr
 8017bec:	4603      	mov	r3, r0
 8017bee:	2800      	cmp	r0, #0
 8017bf0:	d0f9      	beq.n	8017be6 <_ZN8touchgfx9Container6insertEPNS_8DrawableERS1_+0x1c>
 8017bf2:	4299      	cmp	r1, r3
 8017bf4:	6998      	ldr	r0, [r3, #24]
 8017bf6:	d1f9      	bne.n	8017bec <_ZN8touchgfx9Container6insertEPNS_8DrawableERS1_+0x22>
 8017bf8:	6190      	str	r0, [r2, #24]
 8017bfa:	618a      	str	r2, [r1, #24]
 8017bfc:	e7f2      	b.n	8017be4 <_ZN8touchgfx9Container6insertEPNS_8DrawableERS1_+0x1a>
	...

08017c00 <_ZN8touchgfx9Container3addERNS_8DrawableE>:
 8017c00:	4288      	cmp	r0, r1
 8017c02:	b508      	push	{r3, lr}
 8017c04:	d105      	bne.n	8017c12 <_ZN8touchgfx9Container3addERNS_8DrawableE+0x12>
 8017c06:	4b11      	ldr	r3, [pc, #68]	@ (8017c4c <_ZN8touchgfx9Container3addERNS_8DrawableE+0x4c>)
 8017c08:	2123      	movs	r1, #35	@ 0x23
 8017c0a:	4a11      	ldr	r2, [pc, #68]	@ (8017c50 <_ZN8touchgfx9Container3addERNS_8DrawableE+0x50>)
 8017c0c:	4811      	ldr	r0, [pc, #68]	@ (8017c54 <_ZN8touchgfx9Container3addERNS_8DrawableE+0x54>)
 8017c0e:	f013 f819 	bl	802ac44 <__assert_func>
 8017c12:	694b      	ldr	r3, [r1, #20]
 8017c14:	b11b      	cbz	r3, 8017c1e <_ZN8touchgfx9Container3addERNS_8DrawableE+0x1e>
 8017c16:	4b10      	ldr	r3, [pc, #64]	@ (8017c58 <_ZN8touchgfx9Container3addERNS_8DrawableE+0x58>)
 8017c18:	2124      	movs	r1, #36	@ 0x24
 8017c1a:	4a0d      	ldr	r2, [pc, #52]	@ (8017c50 <_ZN8touchgfx9Container3addERNS_8DrawableE+0x50>)
 8017c1c:	e7f6      	b.n	8017c0c <_ZN8touchgfx9Container3addERNS_8DrawableE+0xc>
 8017c1e:	e9c1 0305 	strd	r0, r3, [r1, #20]
 8017c22:	6a83      	ldr	r3, [r0, #40]	@ 0x28
 8017c24:	b913      	cbnz	r3, 8017c2c <_ZN8touchgfx9Container3addERNS_8DrawableE+0x2c>
 8017c26:	6281      	str	r1, [r0, #40]	@ 0x28
 8017c28:	bd08      	pop	{r3, pc}
 8017c2a:	4613      	mov	r3, r2
 8017c2c:	699a      	ldr	r2, [r3, #24]
 8017c2e:	b12a      	cbz	r2, 8017c3c <_ZN8touchgfx9Container3addERNS_8DrawableE+0x3c>
 8017c30:	428b      	cmp	r3, r1
 8017c32:	d1fa      	bne.n	8017c2a <_ZN8touchgfx9Container3addERNS_8DrawableE+0x2a>
 8017c34:	4b09      	ldr	r3, [pc, #36]	@ (8017c5c <_ZN8touchgfx9Container3addERNS_8DrawableE+0x5c>)
 8017c36:	2135      	movs	r1, #53	@ 0x35
 8017c38:	4a05      	ldr	r2, [pc, #20]	@ (8017c50 <_ZN8touchgfx9Container3addERNS_8DrawableE+0x50>)
 8017c3a:	e7e7      	b.n	8017c0c <_ZN8touchgfx9Container3addERNS_8DrawableE+0xc>
 8017c3c:	428b      	cmp	r3, r1
 8017c3e:	d103      	bne.n	8017c48 <_ZN8touchgfx9Container3addERNS_8DrawableE+0x48>
 8017c40:	4b06      	ldr	r3, [pc, #24]	@ (8017c5c <_ZN8touchgfx9Container3addERNS_8DrawableE+0x5c>)
 8017c42:	2138      	movs	r1, #56	@ 0x38
 8017c44:	4a02      	ldr	r2, [pc, #8]	@ (8017c50 <_ZN8touchgfx9Container3addERNS_8DrawableE+0x50>)
 8017c46:	e7e1      	b.n	8017c0c <_ZN8touchgfx9Container3addERNS_8DrawableE+0xc>
 8017c48:	6199      	str	r1, [r3, #24]
 8017c4a:	e7ed      	b.n	8017c28 <_ZN8touchgfx9Container3addERNS_8DrawableE+0x28>
 8017c4c:	0802daf9 	.word	0x0802daf9
 8017c50:	0802dc50 	.word	0x0802dc50
 8017c54:	0802db25 	.word	0x0802db25
 8017c58:	0802db58 	.word	0x0802db58
 8017c5c:	0802db8e 	.word	0x0802db8e

08017c60 <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE>:
 8017c60:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8017c64:	461f      	mov	r7, r3
 8017c66:	f890 3024 	ldrb.w	r3, [r0, #36]	@ 0x24
 8017c6a:	460d      	mov	r5, r1
 8017c6c:	4616      	mov	r6, r2
 8017c6e:	b103      	cbz	r3, 8017c72 <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE+0x12>
 8017c70:	6038      	str	r0, [r7, #0]
 8017c72:	6a84      	ldr	r4, [r0, #40]	@ 0x28
 8017c74:	b314      	cbz	r4, 8017cbc <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE+0x5c>
 8017c76:	f894 3025 	ldrb.w	r3, [r4, #37]	@ 0x25
 8017c7a:	b1eb      	cbz	r3, 8017cb8 <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE+0x58>
 8017c7c:	f9b4 1004 	ldrsh.w	r1, [r4, #4]
 8017c80:	428d      	cmp	r5, r1
 8017c82:	db19      	blt.n	8017cb8 <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE+0x58>
 8017c84:	b289      	uxth	r1, r1
 8017c86:	8923      	ldrh	r3, [r4, #8]
 8017c88:	440b      	add	r3, r1
 8017c8a:	b21b      	sxth	r3, r3
 8017c8c:	429d      	cmp	r5, r3
 8017c8e:	da13      	bge.n	8017cb8 <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE+0x58>
 8017c90:	f9b4 2006 	ldrsh.w	r2, [r4, #6]
 8017c94:	4296      	cmp	r6, r2
 8017c96:	db0f      	blt.n	8017cb8 <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE+0x58>
 8017c98:	b292      	uxth	r2, r2
 8017c9a:	8963      	ldrh	r3, [r4, #10]
 8017c9c:	4413      	add	r3, r2
 8017c9e:	b21b      	sxth	r3, r3
 8017ca0:	429e      	cmp	r6, r3
 8017ca2:	da09      	bge.n	8017cb8 <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE+0x58>
 8017ca4:	6823      	ldr	r3, [r4, #0]
 8017ca6:	1ab2      	subs	r2, r6, r2
 8017ca8:	1a69      	subs	r1, r5, r1
 8017caa:	4620      	mov	r0, r4
 8017cac:	f8d3 8020 	ldr.w	r8, [r3, #32]
 8017cb0:	b212      	sxth	r2, r2
 8017cb2:	463b      	mov	r3, r7
 8017cb4:	b209      	sxth	r1, r1
 8017cb6:	47c0      	blx	r8
 8017cb8:	69a4      	ldr	r4, [r4, #24]
 8017cba:	e7db      	b.n	8017c74 <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE+0x14>
 8017cbc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08017cc0 <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_>:
 8017cc0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8017cc4:	4c6d      	ldr	r4, [pc, #436]	@ (8017e7c <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_+0x1bc>)
 8017cc6:	b0a1      	sub	sp, #132	@ 0x84
 8017cc8:	4606      	mov	r6, r0
 8017cca:	6824      	ldr	r4, [r4, #0]
 8017ccc:	9d2a      	ldr	r5, [sp, #168]	@ 0xa8
 8017cce:	f894 9049 	ldrb.w	r9, [r4, #73]	@ 0x49
 8017cd2:	2400      	movs	r4, #0
 8017cd4:	9303      	str	r3, [sp, #12]
 8017cd6:	802c      	strh	r4, [r5, #0]
 8017cd8:	9d2b      	ldr	r5, [sp, #172]	@ 0xac
 8017cda:	802c      	strh	r4, [r5, #0]
 8017cdc:	601c      	str	r4, [r3, #0]
 8017cde:	e9cd 1201 	strd	r1, r2, [sp, #4]
 8017ce2:	f7ff ffbd 	bl	8017c60 <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE>
 8017ce6:	f1b9 0f03 	cmp.w	r9, #3
 8017cea:	f340 80c1 	ble.w	8017e70 <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_+0x1b0>
 8017cee:	4631      	mov	r1, r6
 8017cf0:	a80c      	add	r0, sp, #48	@ 0x30
 8017cf2:	f004 fe9b 	bl	801ca2c <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 8017cf6:	f9bd 3030 	ldrsh.w	r3, [sp, #48]	@ 0x30
 8017cfa:	9306      	str	r3, [sp, #24]
 8017cfc:	f9bd 3032 	ldrsh.w	r3, [sp, #50]	@ 0x32
 8017d00:	9307      	str	r3, [sp, #28]
 8017d02:	9b03      	ldr	r3, [sp, #12]
 8017d04:	f8d3 a000 	ldr.w	sl, [r3]
 8017d08:	f1ba 0f00 	cmp.w	sl, #0
 8017d0c:	f000 80b3 	beq.w	8017e76 <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_+0x1b6>
 8017d10:	4651      	mov	r1, sl
 8017d12:	a810      	add	r0, sp, #64	@ 0x40
 8017d14:	f004 fe8a 	bl	801ca2c <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 8017d18:	2002      	movs	r0, #2
 8017d1a:	f9bd 1044 	ldrsh.w	r1, [sp, #68]	@ 0x44
 8017d1e:	9b01      	ldr	r3, [sp, #4]
 8017d20:	9a06      	ldr	r2, [sp, #24]
 8017d22:	fb91 f1f0 	sdiv	r1, r1, r0
 8017d26:	189d      	adds	r5, r3, r2
 8017d28:	f9bd 3040 	ldrsh.w	r3, [sp, #64]	@ 0x40
 8017d2c:	9a07      	ldr	r2, [sp, #28]
 8017d2e:	4419      	add	r1, r3
 8017d30:	9b02      	ldr	r3, [sp, #8]
 8017d32:	4413      	add	r3, r2
 8017d34:	f9bd 2046 	ldrsh.w	r2, [sp, #70]	@ 0x46
 8017d38:	1a6d      	subs	r5, r5, r1
 8017d3a:	f9bd 1042 	ldrsh.w	r1, [sp, #66]	@ 0x42
 8017d3e:	fb92 f2f0 	sdiv	r2, r2, r0
 8017d42:	440a      	add	r2, r1
 8017d44:	1a9b      	subs	r3, r3, r2
 8017d46:	435b      	muls	r3, r3
 8017d48:	fb05 3505 	mla	r5, r5, r5, r3
 8017d4c:	4f4c      	ldr	r7, [pc, #304]	@ (8017e80 <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_+0x1c0>)
 8017d4e:	ac10      	add	r4, sp, #64	@ 0x40
 8017d50:	f1b9 0f0c 	cmp.w	r9, #12
 8017d54:	cf0f      	ldmia	r7!, {r0, r1, r2, r3}
 8017d56:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8017d58:	cf0f      	ldmia	r7!, {r0, r1, r2, r3}
 8017d5a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8017d5c:	cf0f      	ldmia	r7!, {r0, r1, r2, r3}
 8017d5e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8017d60:	e897 000f 	ldmia.w	r7, {r0, r1, r2, r3}
 8017d64:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 8017d68:	f04f 0303 	mov.w	r3, #3
 8017d6c:	bfd8      	it	le
 8017d6e:	f109 32ff 	addle.w	r2, r9, #4294967295
 8017d72:	f04f 0400 	mov.w	r4, #0
 8017d76:	f8cd 9000 	str.w	r9, [sp]
 8017d7a:	bfcc      	ite	gt
 8017d7c:	4698      	movgt	r8, r3
 8017d7e:	fb92 f8f3 	sdivle	r8, r2, r3
 8017d82:	1c63      	adds	r3, r4, #1
 8017d84:	aa10      	add	r2, sp, #64	@ 0x40
 8017d86:	f004 0401 	and.w	r4, r4, #1
 8017d8a:	f04f 0b00 	mov.w	fp, #0
 8017d8e:	9308      	str	r3, [sp, #32]
 8017d90:	9b00      	ldr	r3, [sp, #0]
 8017d92:	eb02 1444 	add.w	r4, r2, r4, lsl #5
 8017d96:	fb93 f3f8 	sdiv	r3, r3, r8
 8017d9a:	3404      	adds	r4, #4
 8017d9c:	b29b      	uxth	r3, r3
 8017d9e:	9304      	str	r3, [sp, #16]
 8017da0:	9a04      	ldr	r2, [sp, #16]
 8017da2:	f854 3c04 	ldr.w	r3, [r4, #-4]
 8017da6:	fb13 f302 	smulbb	r3, r3, r2
 8017daa:	9a01      	ldr	r2, [sp, #4]
 8017dac:	b29b      	uxth	r3, r3
 8017dae:	1899      	adds	r1, r3, r2
 8017db0:	9305      	str	r3, [sp, #20]
 8017db2:	f9b6 3004 	ldrsh.w	r3, [r6, #4]
 8017db6:	b209      	sxth	r1, r1
 8017db8:	4299      	cmp	r1, r3
 8017dba:	db4d      	blt.n	8017e58 <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_+0x198>
 8017dbc:	8932      	ldrh	r2, [r6, #8]
 8017dbe:	4413      	add	r3, r2
 8017dc0:	b21b      	sxth	r3, r3
 8017dc2:	4299      	cmp	r1, r3
 8017dc4:	da48      	bge.n	8017e58 <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_+0x198>
 8017dc6:	9b04      	ldr	r3, [sp, #16]
 8017dc8:	6827      	ldr	r7, [r4, #0]
 8017dca:	fb17 f703 	smulbb	r7, r7, r3
 8017dce:	9b02      	ldr	r3, [sp, #8]
 8017dd0:	b2bf      	uxth	r7, r7
 8017dd2:	18fa      	adds	r2, r7, r3
 8017dd4:	f9b6 3006 	ldrsh.w	r3, [r6, #6]
 8017dd8:	b212      	sxth	r2, r2
 8017dda:	429a      	cmp	r2, r3
 8017ddc:	db3c      	blt.n	8017e58 <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_+0x198>
 8017dde:	8970      	ldrh	r0, [r6, #10]
 8017de0:	4403      	add	r3, r0
 8017de2:	b21b      	sxth	r3, r3
 8017de4:	429a      	cmp	r2, r3
 8017de6:	da37      	bge.n	8017e58 <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_+0x198>
 8017de8:	2300      	movs	r3, #0
 8017dea:	4630      	mov	r0, r6
 8017dec:	930b      	str	r3, [sp, #44]	@ 0x2c
 8017dee:	ab0b      	add	r3, sp, #44	@ 0x2c
 8017df0:	f7ff ff36 	bl	8017c60 <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE>
 8017df4:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 8017df6:	b37a      	cbz	r2, 8017e58 <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_+0x198>
 8017df8:	4552      	cmp	r2, sl
 8017dfa:	d02d      	beq.n	8017e58 <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_+0x198>
 8017dfc:	4611      	mov	r1, r2
 8017dfe:	a80e      	add	r0, sp, #56	@ 0x38
 8017e00:	9209      	str	r2, [sp, #36]	@ 0x24
 8017e02:	f004 fe13 	bl	801ca2c <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 8017e06:	f04f 0e02 	mov.w	lr, #2
 8017e0a:	f9bd 103c 	ldrsh.w	r1, [sp, #60]	@ 0x3c
 8017e0e:	9a06      	ldr	r2, [sp, #24]
 8017e10:	f9bd 0038 	ldrsh.w	r0, [sp, #56]	@ 0x38
 8017e14:	9b01      	ldr	r3, [sp, #4]
 8017e16:	f9bd c03e 	ldrsh.w	ip, [sp, #62]	@ 0x3e
 8017e1a:	4413      	add	r3, r2
 8017e1c:	9a07      	ldr	r2, [sp, #28]
 8017e1e:	fb91 f1fe 	sdiv	r1, r1, lr
 8017e22:	fb9c fcfe 	sdiv	ip, ip, lr
 8017e26:	4401      	add	r1, r0
 8017e28:	1a58      	subs	r0, r3, r1
 8017e2a:	9b02      	ldr	r3, [sp, #8]
 8017e2c:	f9bd 103a 	ldrsh.w	r1, [sp, #58]	@ 0x3a
 8017e30:	4413      	add	r3, r2
 8017e32:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8017e34:	448c      	add	ip, r1
 8017e36:	eba3 030c 	sub.w	r3, r3, ip
 8017e3a:	435b      	muls	r3, r3
 8017e3c:	fb00 3300 	mla	r3, r0, r0, r3
 8017e40:	42ab      	cmp	r3, r5
 8017e42:	d208      	bcs.n	8017e56 <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_+0x196>
 8017e44:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8017e46:	461d      	mov	r5, r3
 8017e48:	9803      	ldr	r0, [sp, #12]
 8017e4a:	6001      	str	r1, [r0, #0]
 8017e4c:	992a      	ldr	r1, [sp, #168]	@ 0xa8
 8017e4e:	9805      	ldr	r0, [sp, #20]
 8017e50:	8008      	strh	r0, [r1, #0]
 8017e52:	992b      	ldr	r1, [sp, #172]	@ 0xac
 8017e54:	800f      	strh	r7, [r1, #0]
 8017e56:	4692      	mov	sl, r2
 8017e58:	f10b 0b01 	add.w	fp, fp, #1
 8017e5c:	3408      	adds	r4, #8
 8017e5e:	f1bb 0f04 	cmp.w	fp, #4
 8017e62:	d19d      	bne.n	8017da0 <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_+0xe0>
 8017e64:	9b00      	ldr	r3, [sp, #0]
 8017e66:	9c08      	ldr	r4, [sp, #32]
 8017e68:	444b      	add	r3, r9
 8017e6a:	4544      	cmp	r4, r8
 8017e6c:	9300      	str	r3, [sp, #0]
 8017e6e:	d188      	bne.n	8017d82 <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_+0xc2>
 8017e70:	b021      	add	sp, #132	@ 0x84
 8017e72:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8017e76:	f04f 35ff 	mov.w	r5, #4294967295
 8017e7a:	e767      	b.n	8017d4c <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_+0x8c>
 8017e7c:	2400b884 	.word	0x2400b884
 8017e80:	0802ca10 	.word	0x0802ca10

08017e84 <_ZN8touchgfx4RectaNERKS0_>:
 8017e84:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8017e88:	f9b1 7000 	ldrsh.w	r7, [r1]
 8017e8c:	888c      	ldrh	r4, [r1, #4]
 8017e8e:	f9b0 9000 	ldrsh.w	r9, [r0]
 8017e92:	443c      	add	r4, r7
 8017e94:	b2a4      	uxth	r4, r4
 8017e96:	fa0f f884 	sxth.w	r8, r4
 8017e9a:	45c1      	cmp	r9, r8
 8017e9c:	da2f      	bge.n	8017efe <_ZN8touchgfx4RectaNERKS0_+0x7a>
 8017e9e:	8882      	ldrh	r2, [r0, #4]
 8017ea0:	444a      	add	r2, r9
 8017ea2:	b292      	uxth	r2, r2
 8017ea4:	fa0f fe82 	sxth.w	lr, r2
 8017ea8:	4577      	cmp	r7, lr
 8017eaa:	da28      	bge.n	8017efe <_ZN8touchgfx4RectaNERKS0_+0x7a>
 8017eac:	f9b1 5002 	ldrsh.w	r5, [r1, #2]
 8017eb0:	88cb      	ldrh	r3, [r1, #6]
 8017eb2:	f9b0 6002 	ldrsh.w	r6, [r0, #2]
 8017eb6:	442b      	add	r3, r5
 8017eb8:	b21b      	sxth	r3, r3
 8017eba:	429e      	cmp	r6, r3
 8017ebc:	da1f      	bge.n	8017efe <_ZN8touchgfx4RectaNERKS0_+0x7a>
 8017ebe:	88c3      	ldrh	r3, [r0, #6]
 8017ec0:	4433      	add	r3, r6
 8017ec2:	b29b      	uxth	r3, r3
 8017ec4:	fa0f fc83 	sxth.w	ip, r3
 8017ec8:	4565      	cmp	r5, ip
 8017eca:	da18      	bge.n	8017efe <_ZN8touchgfx4RectaNERKS0_+0x7a>
 8017ecc:	454f      	cmp	r7, r9
 8017ece:	bfb8      	it	lt
 8017ed0:	464f      	movlt	r7, r9
 8017ed2:	42b5      	cmp	r5, r6
 8017ed4:	bfb8      	it	lt
 8017ed6:	4635      	movlt	r5, r6
 8017ed8:	45f0      	cmp	r8, lr
 8017eda:	bfd8      	it	le
 8017edc:	4622      	movle	r2, r4
 8017ede:	1bd2      	subs	r2, r2, r7
 8017ee0:	8082      	strh	r2, [r0, #4]
 8017ee2:	884a      	ldrh	r2, [r1, #2]
 8017ee4:	88c9      	ldrh	r1, [r1, #6]
 8017ee6:	8007      	strh	r7, [r0, #0]
 8017ee8:	440a      	add	r2, r1
 8017eea:	8045      	strh	r5, [r0, #2]
 8017eec:	b292      	uxth	r2, r2
 8017eee:	b211      	sxth	r1, r2
 8017ef0:	458c      	cmp	ip, r1
 8017ef2:	bfa8      	it	ge
 8017ef4:	4613      	movge	r3, r2
 8017ef6:	1b5b      	subs	r3, r3, r5
 8017ef8:	80c3      	strh	r3, [r0, #6]
 8017efa:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8017efe:	2300      	movs	r3, #0
 8017f00:	8003      	strh	r3, [r0, #0]
 8017f02:	8043      	strh	r3, [r0, #2]
 8017f04:	8083      	strh	r3, [r0, #4]
 8017f06:	80c3      	strh	r3, [r0, #6]
 8017f08:	e7f7      	b.n	8017efa <_ZN8touchgfx4RectaNERKS0_+0x76>

08017f0a <_ZNK8touchgfx4Rect7isEmptyEv>:
 8017f0a:	f9b0 3004 	ldrsh.w	r3, [r0, #4]
 8017f0e:	2b00      	cmp	r3, #0
 8017f10:	dd06      	ble.n	8017f20 <_ZNK8touchgfx4Rect7isEmptyEv+0x16>
 8017f12:	f9b0 0006 	ldrsh.w	r0, [r0, #6]
 8017f16:	2800      	cmp	r0, #0
 8017f18:	bfcc      	ite	gt
 8017f1a:	2000      	movgt	r0, #0
 8017f1c:	2001      	movle	r0, #1
 8017f1e:	4770      	bx	lr
 8017f20:	2001      	movs	r0, #1
 8017f22:	4770      	bx	lr

08017f24 <_ZNK8touchgfx9Container16getContainedAreaEv>:
 8017f24:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8017f28:	2300      	movs	r3, #0
 8017f2a:	4604      	mov	r4, r0
 8017f2c:	6a8d      	ldr	r5, [r1, #40]	@ 0x28
 8017f2e:	8003      	strh	r3, [r0, #0]
 8017f30:	8043      	strh	r3, [r0, #2]
 8017f32:	8083      	strh	r3, [r0, #4]
 8017f34:	80c3      	strh	r3, [r0, #6]
 8017f36:	2d00      	cmp	r5, #0
 8017f38:	d040      	beq.n	8017fbc <_ZNK8touchgfx9Container16getContainedAreaEv+0x98>
 8017f3a:	1d28      	adds	r0, r5, #4
 8017f3c:	f7ff ffe5 	bl	8017f0a <_ZNK8touchgfx4Rect7isEmptyEv>
 8017f40:	b988      	cbnz	r0, 8017f66 <_ZNK8touchgfx9Container16getContainedAreaEv+0x42>
 8017f42:	4620      	mov	r0, r4
 8017f44:	f7ff ffe1 	bl	8017f0a <_ZNK8touchgfx4Rect7isEmptyEv>
 8017f48:	f9b5 2004 	ldrsh.w	r2, [r5, #4]
 8017f4c:	f9b5 3006 	ldrsh.w	r3, [r5, #6]
 8017f50:	f9b5 e008 	ldrsh.w	lr, [r5, #8]
 8017f54:	f9b5 c00a 	ldrsh.w	ip, [r5, #10]
 8017f58:	b138      	cbz	r0, 8017f6a <_ZNK8touchgfx9Container16getContainedAreaEv+0x46>
 8017f5a:	8022      	strh	r2, [r4, #0]
 8017f5c:	8063      	strh	r3, [r4, #2]
 8017f5e:	f8a4 e004 	strh.w	lr, [r4, #4]
 8017f62:	f8a4 c006 	strh.w	ip, [r4, #6]
 8017f66:	69ad      	ldr	r5, [r5, #24]
 8017f68:	e7e5      	b.n	8017f36 <_ZNK8touchgfx9Container16getContainedAreaEv+0x12>
 8017f6a:	f9b4 0000 	ldrsh.w	r0, [r4]
 8017f6e:	f9b4 1002 	ldrsh.w	r1, [r4, #2]
 8017f72:	4290      	cmp	r0, r2
 8017f74:	4607      	mov	r7, r0
 8017f76:	f8b4 8004 	ldrh.w	r8, [r4, #4]
 8017f7a:	460e      	mov	r6, r1
 8017f7c:	bfa8      	it	ge
 8017f7e:	4617      	movge	r7, r2
 8017f80:	4299      	cmp	r1, r3
 8017f82:	4472      	add	r2, lr
 8017f84:	f8b4 e006 	ldrh.w	lr, [r4, #6]
 8017f88:	bfa8      	it	ge
 8017f8a:	461e      	movge	r6, r3
 8017f8c:	4440      	add	r0, r8
 8017f8e:	4471      	add	r1, lr
 8017f90:	4463      	add	r3, ip
 8017f92:	b200      	sxth	r0, r0
 8017f94:	8027      	strh	r7, [r4, #0]
 8017f96:	b212      	sxth	r2, r2
 8017f98:	8066      	strh	r6, [r4, #2]
 8017f9a:	b209      	sxth	r1, r1
 8017f9c:	b21b      	sxth	r3, r3
 8017f9e:	4290      	cmp	r0, r2
 8017fa0:	bfac      	ite	ge
 8017fa2:	ebc7 0200 	rsbge	r2, r7, r0
 8017fa6:	ebc7 0202 	rsblt	r2, r7, r2
 8017faa:	4299      	cmp	r1, r3
 8017fac:	bfac      	ite	ge
 8017fae:	ebc6 0301 	rsbge	r3, r6, r1
 8017fb2:	ebc6 0303 	rsblt	r3, r6, r3
 8017fb6:	80a2      	strh	r2, [r4, #4]
 8017fb8:	80e3      	strh	r3, [r4, #6]
 8017fba:	e7d4      	b.n	8017f66 <_ZNK8touchgfx9Container16getContainedAreaEv+0x42>
 8017fbc:	4620      	mov	r0, r4
 8017fbe:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08017fc2 <_ZNK8touchgfx9Container4drawERKNS_4RectE>:
 8017fc2:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 8017fc6:	f890 3025 	ldrb.w	r3, [r0, #37]	@ 0x25
 8017fca:	b383      	cbz	r3, 801802e <_ZNK8touchgfx9Container4drawERKNS_4RectE+0x6c>
 8017fcc:	6a84      	ldr	r4, [r0, #40]	@ 0x28
 8017fce:	b374      	cbz	r4, 801802e <_ZNK8touchgfx9Container4drawERKNS_4RectE+0x6c>
 8017fd0:	f9b1 5000 	ldrsh.w	r5, [r1]
 8017fd4:	f9b1 6002 	ldrsh.w	r6, [r1, #2]
 8017fd8:	f9b1 7004 	ldrsh.w	r7, [r1, #4]
 8017fdc:	f9b1 8006 	ldrsh.w	r8, [r1, #6]
 8017fe0:	f894 3025 	ldrb.w	r3, [r4, #37]	@ 0x25
 8017fe4:	b303      	cbz	r3, 8018028 <_ZNK8touchgfx9Container4drawERKNS_4RectE+0x66>
 8017fe6:	4668      	mov	r0, sp
 8017fe8:	1d21      	adds	r1, r4, #4
 8017fea:	f8ad 5000 	strh.w	r5, [sp]
 8017fee:	f8ad 6002 	strh.w	r6, [sp, #2]
 8017ff2:	f8ad 7004 	strh.w	r7, [sp, #4]
 8017ff6:	f8ad 8006 	strh.w	r8, [sp, #6]
 8017ffa:	f7ff ff43 	bl	8017e84 <_ZN8touchgfx4RectaNERKS0_>
 8017ffe:	4668      	mov	r0, sp
 8018000:	f7ff ff83 	bl	8017f0a <_ZNK8touchgfx4Rect7isEmptyEv>
 8018004:	b980      	cbnz	r0, 8018028 <_ZNK8touchgfx9Container4drawERKNS_4RectE+0x66>
 8018006:	f8bd 3000 	ldrh.w	r3, [sp]
 801800a:	4669      	mov	r1, sp
 801800c:	88a2      	ldrh	r2, [r4, #4]
 801800e:	4620      	mov	r0, r4
 8018010:	1a9b      	subs	r3, r3, r2
 8018012:	88e2      	ldrh	r2, [r4, #6]
 8018014:	f8ad 3000 	strh.w	r3, [sp]
 8018018:	f8bd 3002 	ldrh.w	r3, [sp, #2]
 801801c:	1a9b      	subs	r3, r3, r2
 801801e:	f8ad 3002 	strh.w	r3, [sp, #2]
 8018022:	6823      	ldr	r3, [r4, #0]
 8018024:	689b      	ldr	r3, [r3, #8]
 8018026:	4798      	blx	r3
 8018028:	69a4      	ldr	r4, [r4, #24]
 801802a:	2c00      	cmp	r4, #0
 801802c:	d1d8      	bne.n	8017fe0 <_ZNK8touchgfx9Container4drawERKNS_4RectE+0x1e>
 801802e:	b002      	add	sp, #8
 8018030:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08018034 <_ZN8touchgfx9Container14setupDrawChainERKNS_4RectEPPNS_8DrawableE>:
 8018034:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8018036:	f890 3025 	ldrb.w	r3, [r0, #37]	@ 0x25
 801803a:	460d      	mov	r5, r1
 801803c:	4616      	mov	r6, r2
 801803e:	b323      	cbz	r3, 801808a <_ZN8touchgfx9Container14setupDrawChainERKNS_4RectEPPNS_8DrawableE+0x56>
 8018040:	6a84      	ldr	r4, [r0, #40]	@ 0x28
 8018042:	b314      	cbz	r4, 801808a <_ZN8touchgfx9Container14setupDrawChainERKNS_4RectEPPNS_8DrawableE+0x56>
 8018044:	f894 3025 	ldrb.w	r3, [r4, #37]	@ 0x25
 8018048:	b1eb      	cbz	r3, 8018086 <_ZN8touchgfx9Container14setupDrawChainERKNS_4RectEPPNS_8DrawableE+0x52>
 801804a:	6828      	ldr	r0, [r5, #0]
 801804c:	466b      	mov	r3, sp
 801804e:	6869      	ldr	r1, [r5, #4]
 8018050:	c303      	stmia	r3!, {r0, r1}
 8018052:	4668      	mov	r0, sp
 8018054:	1d21      	adds	r1, r4, #4
 8018056:	f7ff ff15 	bl	8017e84 <_ZN8touchgfx4RectaNERKS0_>
 801805a:	4668      	mov	r0, sp
 801805c:	f7ff ff55 	bl	8017f0a <_ZNK8touchgfx4Rect7isEmptyEv>
 8018060:	b988      	cbnz	r0, 8018086 <_ZN8touchgfx9Container14setupDrawChainERKNS_4RectEPPNS_8DrawableE+0x52>
 8018062:	f8bd 3000 	ldrh.w	r3, [sp]
 8018066:	4669      	mov	r1, sp
 8018068:	88a2      	ldrh	r2, [r4, #4]
 801806a:	4620      	mov	r0, r4
 801806c:	1a9b      	subs	r3, r3, r2
 801806e:	88e2      	ldrh	r2, [r4, #6]
 8018070:	f8ad 3000 	strh.w	r3, [sp]
 8018074:	f8bd 3002 	ldrh.w	r3, [sp, #2]
 8018078:	1a9b      	subs	r3, r3, r2
 801807a:	4632      	mov	r2, r6
 801807c:	f8ad 3002 	strh.w	r3, [sp, #2]
 8018080:	6823      	ldr	r3, [r4, #0]
 8018082:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8018084:	4798      	blx	r3
 8018086:	69a4      	ldr	r4, [r4, #24]
 8018088:	e7db      	b.n	8018042 <_ZN8touchgfx9Container14setupDrawChainERKNS_4RectEPPNS_8DrawableE+0xe>
 801808a:	b002      	add	sp, #8
 801808c:	bd70      	pop	{r4, r5, r6, pc}

0801808e <_ZNK8touchgfx6Slider15getIndicatorMinEv>:
 801808e:	f8b0 00ec 	ldrh.w	r0, [r0, #236]	@ 0xec
 8018092:	4770      	bx	lr

08018094 <_ZNK8touchgfx6Slider15getIndicatorMaxEv>:
 8018094:	f8b0 00ee 	ldrh.w	r0, [r0, #238]	@ 0xee
 8018098:	4770      	bx	lr

0801809a <_ZNK8touchgfx6Slider11getMinValueEv>:
 801809a:	8e80      	ldrh	r0, [r0, #52]	@ 0x34
 801809c:	4770      	bx	lr

0801809e <_ZNK8touchgfx6Slider11getMaxValueEv>:
 801809e:	8f00      	ldrh	r0, [r0, #56]	@ 0x38
 80180a0:	4770      	bx	lr

080180a2 <_ZN8touchgfx6Slider8setValueEi>:
 80180a2:	b570      	push	{r4, r5, r6, lr}
 80180a4:	6803      	ldr	r3, [r0, #0]
 80180a6:	4604      	mov	r4, r0
 80180a8:	e9d3 532a 	ldrd	r5, r3, [r3, #168]	@ 0xa8
 80180ac:	4798      	blx	r3
 80180ae:	4601      	mov	r1, r0
 80180b0:	462b      	mov	r3, r5
 80180b2:	4620      	mov	r0, r4
 80180b4:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 80180b8:	4718      	bx	r3

080180ba <_ZNK8touchgfx6Slider15valueToPositionEi>:
 80180ba:	b538      	push	{r3, r4, r5, lr}
 80180bc:	e9d0 340d 	ldrd	r3, r4, [r0, #52]	@ 0x34
 80180c0:	4605      	mov	r5, r0
 80180c2:	428c      	cmp	r4, r1
 80180c4:	bfa8      	it	ge
 80180c6:	460c      	movge	r4, r1
 80180c8:	429c      	cmp	r4, r3
 80180ca:	bfac      	ite	ge
 80180cc:	ebc3 0404 	rsbge	r4, r3, r4
 80180d0:	ebc3 0403 	rsblt	r4, r3, r3
 80180d4:	6803      	ldr	r3, [r0, #0]
 80180d6:	f8d3 30b8 	ldr.w	r3, [r3, #184]	@ 0xb8
 80180da:	4798      	blx	r3
 80180dc:	682b      	ldr	r3, [r5, #0]
 80180de:	fb00 4404 	mla	r4, r0, r4, r4
 80180e2:	4628      	mov	r0, r5
 80180e4:	f8d3 30bc 	ldr.w	r3, [r3, #188]	@ 0xbc
 80180e8:	4798      	blx	r3
 80180ea:	f895 202c 	ldrb.w	r2, [r5, #44]	@ 0x2c
 80180ee:	f9b5 30ec 	ldrsh.w	r3, [r5, #236]	@ 0xec
 80180f2:	2a01      	cmp	r2, #1
 80180f4:	fb94 f0f0 	sdiv	r0, r4, r0
 80180f8:	bf08      	it	eq
 80180fa:	f9b5 20ee 	ldrsheq.w	r2, [r5, #238]	@ 0xee
 80180fe:	4418      	add	r0, r3
 8018100:	bf04      	itt	eq
 8018102:	1a10      	subeq	r0, r2, r0
 8018104:	18c0      	addeq	r0, r0, r3
 8018106:	b200      	sxth	r0, r0
 8018108:	bd38      	pop	{r3, r4, r5, pc}

0801810a <_ZNK8touchgfx6Slider15positionToValueEs>:
 801810a:	b570      	push	{r4, r5, r6, lr}
 801810c:	f9b0 30ec 	ldrsh.w	r3, [r0, #236]	@ 0xec
 8018110:	4605      	mov	r5, r0
 8018112:	460c      	mov	r4, r1
 8018114:	428b      	cmp	r3, r1
 8018116:	d109      	bne.n	801812c <_ZNK8touchgfx6Slider15positionToValueEs+0x22>
 8018118:	6b40      	ldr	r0, [r0, #52]	@ 0x34
 801811a:	f895 302c 	ldrb.w	r3, [r5, #44]	@ 0x2c
 801811e:	2b01      	cmp	r3, #1
 8018120:	bf01      	itttt	eq
 8018122:	6bab      	ldreq	r3, [r5, #56]	@ 0x38
 8018124:	1a18      	subeq	r0, r3, r0
 8018126:	6b6b      	ldreq	r3, [r5, #52]	@ 0x34
 8018128:	18c0      	addeq	r0, r0, r3
 801812a:	bd70      	pop	{r4, r5, r6, pc}
 801812c:	f9b0 30ee 	ldrsh.w	r3, [r0, #238]	@ 0xee
 8018130:	428b      	cmp	r3, r1
 8018132:	d101      	bne.n	8018138 <_ZNK8touchgfx6Slider15positionToValueEs+0x2e>
 8018134:	6b80      	ldr	r0, [r0, #56]	@ 0x38
 8018136:	e7f0      	b.n	801811a <_ZNK8touchgfx6Slider15positionToValueEs+0x10>
 8018138:	6803      	ldr	r3, [r0, #0]
 801813a:	f8d3 30b8 	ldr.w	r3, [r3, #184]	@ 0xb8
 801813e:	4798      	blx	r3
 8018140:	682b      	ldr	r3, [r5, #0]
 8018142:	f9b5 10ec 	ldrsh.w	r1, [r5, #236]	@ 0xec
 8018146:	4606      	mov	r6, r0
 8018148:	f8d3 30bc 	ldr.w	r3, [r3, #188]	@ 0xbc
 801814c:	4628      	mov	r0, r5
 801814e:	1a64      	subs	r4, r4, r1
 8018150:	4798      	blx	r3
 8018152:	2102      	movs	r1, #2
 8018154:	682b      	ldr	r3, [r5, #0]
 8018156:	fb96 f6f1 	sdiv	r6, r6, r1
 801815a:	fb00 6404 	mla	r4, r0, r4, r6
 801815e:	f8d3 30b8 	ldr.w	r3, [r3, #184]	@ 0xb8
 8018162:	4628      	mov	r0, r5
 8018164:	4798      	blx	r3
 8018166:	6b6b      	ldr	r3, [r5, #52]	@ 0x34
 8018168:	fb94 f0f0 	sdiv	r0, r4, r0
 801816c:	4418      	add	r0, r3
 801816e:	e7d4      	b.n	801811a <_ZNK8touchgfx6Slider15positionToValueEs+0x10>

08018170 <_ZNK8touchgfx6Slider18getIndicatorRadiusEv>:
 8018170:	f890 202c 	ldrb.w	r2, [r0, #44]	@ 0x2c
 8018174:	2302      	movs	r3, #2
 8018176:	b92a      	cbnz	r2, 8018184 <_ZNK8touchgfx6Slider18getIndicatorRadiusEv+0x14>
 8018178:	f9b0 009c 	ldrsh.w	r0, [r0, #156]	@ 0x9c
 801817c:	fb90 f0f3 	sdiv	r0, r0, r3
 8018180:	b280      	uxth	r0, r0
 8018182:	4770      	bx	lr
 8018184:	f9b0 009e 	ldrsh.w	r0, [r0, #158]	@ 0x9e
 8018188:	e7f8      	b.n	801817c <_ZNK8touchgfx6Slider18getIndicatorRadiusEv+0xc>

0801818a <_ZN8touchgfx6Slider13setValueRangeEii>:
 801818a:	6b03      	ldr	r3, [r0, #48]	@ 0x30
 801818c:	428b      	cmp	r3, r1
 801818e:	b410      	push	{r4}
 8018190:	db09      	blt.n	80181a6 <_ZN8touchgfx6Slider13setValueRangeEii+0x1c>
 8018192:	4293      	cmp	r3, r2
 8018194:	bfa8      	it	ge
 8018196:	4613      	movge	r3, r2
 8018198:	6804      	ldr	r4, [r0, #0]
 801819a:	f8d4 4094 	ldr.w	r4, [r4, #148]	@ 0x94
 801819e:	46a4      	mov	ip, r4
 80181a0:	f85d 4b04 	ldr.w	r4, [sp], #4
 80181a4:	4760      	bx	ip
 80181a6:	460b      	mov	r3, r1
 80181a8:	e7f6      	b.n	8018198 <_ZN8touchgfx6Slider13setValueRangeEii+0xe>

080181aa <_ZNK8touchgfx6Slider29getIndicatorPositionRangeSizeEv>:
 80181aa:	f9b0 20ee 	ldrsh.w	r2, [r0, #238]	@ 0xee
 80181ae:	f9b0 00ec 	ldrsh.w	r0, [r0, #236]	@ 0xec
 80181b2:	1a10      	subs	r0, r2, r0
 80181b4:	4770      	bx	lr

080181b6 <_ZNK8touchgfx6Slider17getValueRangeSizeEv>:
 80181b6:	e9d0 020d 	ldrd	r0, r2, [r0, #52]	@ 0x34
 80181ba:	1a10      	subs	r0, r2, r0
 80181bc:	4770      	bx	lr
	...

080181c0 <_ZN8touchgfx6Slider13setValueRangeEiii>:
 80181c0:	4291      	cmp	r1, r2
 80181c2:	b510      	push	{r4, lr}
 80181c4:	db06      	blt.n	80181d4 <_ZN8touchgfx6Slider13setValueRangeEiii+0x14>
 80181c6:	4b08      	ldr	r3, [pc, #32]	@ (80181e8 <_ZN8touchgfx6Slider13setValueRangeEiii+0x28>)
 80181c8:	f240 110d 	movw	r1, #269	@ 0x10d
 80181cc:	4a07      	ldr	r2, [pc, #28]	@ (80181ec <_ZN8touchgfx6Slider13setValueRangeEiii+0x2c>)
 80181ce:	4808      	ldr	r0, [pc, #32]	@ (80181f0 <_ZN8touchgfx6Slider13setValueRangeEiii+0x30>)
 80181d0:	f012 fd38 	bl	802ac44 <__assert_func>
 80181d4:	e9c0 120d 	strd	r1, r2, [r0, #52]	@ 0x34
 80181d8:	6802      	ldr	r2, [r0, #0]
 80181da:	4619      	mov	r1, r3
 80181dc:	f8d2 20a4 	ldr.w	r2, [r2, #164]	@ 0xa4
 80181e0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80181e4:	4710      	bx	r2
 80181e6:	bf00      	nop
 80181e8:	0802dd6a 	.word	0x0802dd6a
 80181ec:	0802e00d 	.word	0x0802e00d
 80181f0:	0802ddc2 	.word	0x0802ddc2

080181f4 <_ZN8touchgfx6Slider16handleClickEventERKNS_10ClickEventE>:
 80181f4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80181f8:	790b      	ldrb	r3, [r1, #4]
 80181fa:	4604      	mov	r4, r0
 80181fc:	460d      	mov	r5, r1
 80181fe:	b323      	cbz	r3, 801824a <_ZN8touchgfx6Slider16handleClickEventERKNS_10ClickEventE+0x56>
 8018200:	2b01      	cmp	r3, #1
 8018202:	d135      	bne.n	8018270 <_ZN8touchgfx6Slider16handleClickEventERKNS_10ClickEventE+0x7c>
 8018204:	6823      	ldr	r3, [r4, #0]
 8018206:	f894 202c 	ldrb.w	r2, [r4, #44]	@ 0x2c
 801820a:	f8d3 70a8 	ldr.w	r7, [r3, #168]	@ 0xa8
 801820e:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8018212:	2a00      	cmp	r2, #0
 8018214:	d12a      	bne.n	801826c <_ZN8touchgfx6Slider16handleClickEventERKNS_10ClickEventE+0x78>
 8018216:	88ee      	ldrh	r6, [r5, #6]
 8018218:	4620      	mov	r0, r4
 801821a:	4798      	blx	r3
 801821c:	1a31      	subs	r1, r6, r0
 801821e:	4620      	mov	r0, r4
 8018220:	b209      	sxth	r1, r1
 8018222:	47b8      	blx	r7
 8018224:	792b      	ldrb	r3, [r5, #4]
 8018226:	2b01      	cmp	r3, #1
 8018228:	d122      	bne.n	8018270 <_ZN8touchgfx6Slider16handleClickEventERKNS_10ClickEventE+0x7c>
 801822a:	f8d4 00f4 	ldr.w	r0, [r4, #244]	@ 0xf4
 801822e:	b1f8      	cbz	r0, 8018270 <_ZN8touchgfx6Slider16handleClickEventERKNS_10ClickEventE+0x7c>
 8018230:	6803      	ldr	r3, [r0, #0]
 8018232:	68db      	ldr	r3, [r3, #12]
 8018234:	4798      	blx	r3
 8018236:	b1d8      	cbz	r0, 8018270 <_ZN8touchgfx6Slider16handleClickEventERKNS_10ClickEventE+0x7c>
 8018238:	f8d4 00f4 	ldr.w	r0, [r4, #244]	@ 0xf4
 801823c:	4621      	mov	r1, r4
 801823e:	6b22      	ldr	r2, [r4, #48]	@ 0x30
 8018240:	6803      	ldr	r3, [r0, #0]
 8018242:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8018246:	689b      	ldr	r3, [r3, #8]
 8018248:	4718      	bx	r3
 801824a:	f8d0 00f0 	ldr.w	r0, [r0, #240]	@ 0xf0
 801824e:	2800      	cmp	r0, #0
 8018250:	d0d8      	beq.n	8018204 <_ZN8touchgfx6Slider16handleClickEventERKNS_10ClickEventE+0x10>
 8018252:	6803      	ldr	r3, [r0, #0]
 8018254:	68db      	ldr	r3, [r3, #12]
 8018256:	4798      	blx	r3
 8018258:	2800      	cmp	r0, #0
 801825a:	d0d3      	beq.n	8018204 <_ZN8touchgfx6Slider16handleClickEventERKNS_10ClickEventE+0x10>
 801825c:	f8d4 00f0 	ldr.w	r0, [r4, #240]	@ 0xf0
 8018260:	4621      	mov	r1, r4
 8018262:	6b22      	ldr	r2, [r4, #48]	@ 0x30
 8018264:	6803      	ldr	r3, [r0, #0]
 8018266:	689b      	ldr	r3, [r3, #8]
 8018268:	4798      	blx	r3
 801826a:	e7cb      	b.n	8018204 <_ZN8touchgfx6Slider16handleClickEventERKNS_10ClickEventE+0x10>
 801826c:	892e      	ldrh	r6, [r5, #8]
 801826e:	e7d3      	b.n	8018218 <_ZN8touchgfx6Slider16handleClickEventERKNS_10ClickEventE+0x24>
 8018270:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08018274 <_ZN8touchgfx6Slider15handleDragEventERKNS_9DragEventE>:
 8018274:	b570      	push	{r4, r5, r6, lr}
 8018276:	6803      	ldr	r3, [r0, #0]
 8018278:	4604      	mov	r4, r0
 801827a:	f890 202c 	ldrb.w	r2, [r0, #44]	@ 0x2c
 801827e:	f8d3 60a8 	ldr.w	r6, [r3, #168]	@ 0xa8
 8018282:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8018286:	b942      	cbnz	r2, 801829a <_ZN8touchgfx6Slider15handleDragEventERKNS_9DragEventE+0x26>
 8018288:	894d      	ldrh	r5, [r1, #10]
 801828a:	4798      	blx	r3
 801828c:	1a29      	subs	r1, r5, r0
 801828e:	4633      	mov	r3, r6
 8018290:	4620      	mov	r0, r4
 8018292:	b209      	sxth	r1, r1
 8018294:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8018298:	4718      	bx	r3
 801829a:	898d      	ldrh	r5, [r1, #12]
 801829c:	e7f5      	b.n	801828a <_ZN8touchgfx6Slider15handleDragEventERKNS_9DragEventE+0x16>
	...

080182a0 <_ZN8touchgfx6Slider21setupHorizontalSliderEttttt>:
 80182a0:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80182a4:	f8bd 7030 	ldrh.w	r7, [sp, #48]	@ 0x30
 80182a8:	4604      	mov	r4, r0
 80182aa:	f8bd 6034 	ldrh.w	r6, [sp, #52]	@ 0x34
 80182ae:	4689      	mov	r9, r1
 80182b0:	4690      	mov	r8, r2
 80182b2:	461d      	mov	r5, r3
 80182b4:	42b7      	cmp	r7, r6
 80182b6:	d305      	bcc.n	80182c4 <_ZN8touchgfx6Slider21setupHorizontalSliderEttttt+0x24>
 80182b8:	4b26      	ldr	r3, [pc, #152]	@ (8018354 <_ZN8touchgfx6Slider21setupHorizontalSliderEttttt+0xb4>)
 80182ba:	2149      	movs	r1, #73	@ 0x49
 80182bc:	4a26      	ldr	r2, [pc, #152]	@ (8018358 <_ZN8touchgfx6Slider21setupHorizontalSliderEttttt+0xb8>)
 80182be:	4827      	ldr	r0, [pc, #156]	@ (801835c <_ZN8touchgfx6Slider21setupHorizontalSliderEttttt+0xbc>)
 80182c0:	f012 fcc0 	bl	802ac44 <__assert_func>
 80182c4:	f04f 0a00 	mov.w	sl, #0
 80182c8:	b213      	sxth	r3, r2
 80182ca:	fa0f fb81 	sxth.w	fp, r1
 80182ce:	303c      	adds	r0, #60	@ 0x3c
 80182d0:	f800 ac10 	strb.w	sl, [r0, #-16]
 80182d4:	461a      	mov	r2, r3
 80182d6:	4659      	mov	r1, fp
 80182d8:	9301      	str	r3, [sp, #4]
 80182da:	f7eb fe4b 	bl	8003f74 <_ZN8touchgfx8Drawable5setXYEss>
 80182de:	9b01      	ldr	r3, [sp, #4]
 80182e0:	4659      	mov	r1, fp
 80182e2:	f104 00c0 	add.w	r0, r4, #192	@ 0xc0
 80182e6:	461a      	mov	r2, r3
 80182e8:	f7eb fe44 	bl	8003f74 <_ZN8touchgfx8Drawable5setXYEss>
 80182ec:	4652      	mov	r2, sl
 80182ee:	4651      	mov	r1, sl
 80182f0:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 80182f4:	f7eb fe3e 	bl	8003f74 <_ZN8touchgfx8Drawable5setXYEss>
 80182f8:	f8b4 1044 	ldrh.w	r1, [r4, #68]	@ 0x44
 80182fc:	f8b4 2046 	ldrh.w	r2, [r4, #70]	@ 0x46
 8018300:	4620      	mov	r0, r4
 8018302:	4489      	add	r9, r1
 8018304:	f8b4 109c 	ldrh.w	r1, [r4, #156]	@ 0x9c
 8018308:	4490      	add	r8, r2
 801830a:	f8b4 209e 	ldrh.w	r2, [r4, #158]	@ 0x9e
 801830e:	4431      	add	r1, r6
 8018310:	fa1f f989 	uxth.w	r9, r9
 8018314:	442a      	add	r2, r5
 8018316:	fa1f f888 	uxth.w	r8, r8
 801831a:	b289      	uxth	r1, r1
 801831c:	f8a4 509a 	strh.w	r5, [r4, #154]	@ 0x9a
 8018320:	b292      	uxth	r2, r2
 8018322:	f8a4 70ec 	strh.w	r7, [r4, #236]	@ 0xec
 8018326:	4589      	cmp	r9, r1
 8018328:	f8a4 60ee 	strh.w	r6, [r4, #238]	@ 0xee
 801832c:	bf8c      	ite	hi
 801832e:	fa0f f189 	sxthhi.w	r1, r9
 8018332:	b209      	sxthls	r1, r1
 8018334:	4590      	cmp	r8, r2
 8018336:	bf8c      	ite	hi
 8018338:	fa0f f288 	sxthhi.w	r2, r8
 801833c:	b212      	sxthls	r2, r2
 801833e:	f7eb fe75 	bl	800402c <_ZN8touchgfx8Drawable14setWidthHeightEss>
 8018342:	6823      	ldr	r3, [r4, #0]
 8018344:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 8018346:	4620      	mov	r0, r4
 8018348:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 801834c:	b003      	add	sp, #12
 801834e:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8018352:	4718      	bx	r3
 8018354:	0802de64 	.word	0x0802de64
 8018358:	0802e0ae 	.word	0x0802e0ae
 801835c:	0802ddc2 	.word	0x0802ddc2

08018360 <_ZN8touchgfx6Slider19setupVerticalSliderEttttt>:
 8018360:	e92d 4ff1 	stmdb	sp!, {r0, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8018364:	f8bd 7028 	ldrh.w	r7, [sp, #40]	@ 0x28
 8018368:	4604      	mov	r4, r0
 801836a:	f8bd 602c 	ldrh.w	r6, [sp, #44]	@ 0x2c
 801836e:	4689      	mov	r9, r1
 8018370:	4690      	mov	r8, r2
 8018372:	461d      	mov	r5, r3
 8018374:	42b7      	cmp	r7, r6
 8018376:	d305      	bcc.n	8018384 <_ZN8touchgfx6Slider19setupVerticalSliderEttttt+0x24>
 8018378:	4b22      	ldr	r3, [pc, #136]	@ (8018404 <_ZN8touchgfx6Slider19setupVerticalSliderEttttt+0xa4>)
 801837a:	2164      	movs	r1, #100	@ 0x64
 801837c:	4a22      	ldr	r2, [pc, #136]	@ (8018408 <_ZN8touchgfx6Slider19setupVerticalSliderEttttt+0xa8>)
 801837e:	4823      	ldr	r0, [pc, #140]	@ (801840c <_ZN8touchgfx6Slider19setupVerticalSliderEttttt+0xac>)
 8018380:	f012 fc60 	bl	802ac44 <__assert_func>
 8018384:	2301      	movs	r3, #1
 8018386:	fa0f fa81 	sxth.w	sl, r1
 801838a:	fa0f fb82 	sxth.w	fp, r2
 801838e:	303c      	adds	r0, #60	@ 0x3c
 8018390:	f800 3c10 	strb.w	r3, [r0, #-16]
 8018394:	4651      	mov	r1, sl
 8018396:	465a      	mov	r2, fp
 8018398:	f7eb fdec 	bl	8003f74 <_ZN8touchgfx8Drawable5setXYEss>
 801839c:	465a      	mov	r2, fp
 801839e:	4651      	mov	r1, sl
 80183a0:	f104 00c0 	add.w	r0, r4, #192	@ 0xc0
 80183a4:	f7eb fde6 	bl	8003f74 <_ZN8touchgfx8Drawable5setXYEss>
 80183a8:	f8b4 1044 	ldrh.w	r1, [r4, #68]	@ 0x44
 80183ac:	f8b4 2046 	ldrh.w	r2, [r4, #70]	@ 0x46
 80183b0:	4620      	mov	r0, r4
 80183b2:	4489      	add	r9, r1
 80183b4:	f8b4 109c 	ldrh.w	r1, [r4, #156]	@ 0x9c
 80183b8:	4490      	add	r8, r2
 80183ba:	f8b4 209e 	ldrh.w	r2, [r4, #158]	@ 0x9e
 80183be:	4429      	add	r1, r5
 80183c0:	fa1f f989 	uxth.w	r9, r9
 80183c4:	4432      	add	r2, r6
 80183c6:	fa1f f888 	uxth.w	r8, r8
 80183ca:	b289      	uxth	r1, r1
 80183cc:	f8a4 5098 	strh.w	r5, [r4, #152]	@ 0x98
 80183d0:	b292      	uxth	r2, r2
 80183d2:	f8a4 70ec 	strh.w	r7, [r4, #236]	@ 0xec
 80183d6:	4589      	cmp	r9, r1
 80183d8:	f8a4 60ee 	strh.w	r6, [r4, #238]	@ 0xee
 80183dc:	bf8c      	ite	hi
 80183de:	fa0f f189 	sxthhi.w	r1, r9
 80183e2:	b209      	sxthls	r1, r1
 80183e4:	4590      	cmp	r8, r2
 80183e6:	bf8c      	ite	hi
 80183e8:	fa0f f288 	sxthhi.w	r2, r8
 80183ec:	b212      	sxthls	r2, r2
 80183ee:	f7eb fe1d 	bl	800402c <_ZN8touchgfx8Drawable14setWidthHeightEss>
 80183f2:	6823      	ldr	r3, [r4, #0]
 80183f4:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 80183f6:	4620      	mov	r0, r4
 80183f8:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 80183fc:	b001      	add	sp, #4
 80183fe:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8018402:	4718      	bx	r3
 8018404:	0802ddf2 	.word	0x0802ddf2
 8018408:	0802e049 	.word	0x0802e049
 801840c:	0802ddc2 	.word	0x0802ddc2

08018410 <_ZN8touchgfx6Slider23updateIndicatorPositionEs>:
 8018410:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8018414:	f9b0 80ec 	ldrsh.w	r8, [r0, #236]	@ 0xec
 8018418:	4604      	mov	r4, r0
 801841a:	3094      	adds	r0, #148	@ 0x94
 801841c:	4588      	cmp	r8, r1
 801841e:	f894 302c 	ldrb.w	r3, [r4, #44]	@ 0x2c
 8018422:	f104 06c0 	add.w	r6, r4, #192	@ 0xc0
 8018426:	bfb8      	it	lt
 8018428:	4688      	movlt	r8, r1
 801842a:	f9b0 105a 	ldrsh.w	r1, [r0, #90]	@ 0x5a
 801842e:	4588      	cmp	r8, r1
 8018430:	bfa8      	it	ge
 8018432:	4688      	movge	r8, r1
 8018434:	fa1f f788 	uxth.w	r7, r8
 8018438:	2b00      	cmp	r3, #0
 801843a:	d12f      	bne.n	801849c <_ZN8touchgfx6Slider23updateIndicatorPositionEs+0x8c>
 801843c:	f9b4 209a 	ldrsh.w	r2, [r4, #154]	@ 0x9a
 8018440:	4641      	mov	r1, r8
 8018442:	f7eb fe40 	bl	80040c6 <_ZN8touchgfx8Drawable6moveToEss>
 8018446:	4630      	mov	r0, r6
 8018448:	f004 fa58 	bl	801c8fc <_ZNK8touchgfx8Drawable10invalidateEv>
 801844c:	f8b4 20c4 	ldrh.w	r2, [r4, #196]	@ 0xc4
 8018450:	6823      	ldr	r3, [r4, #0]
 8018452:	4620      	mov	r0, r4
 8018454:	1abf      	subs	r7, r7, r2
 8018456:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 801845a:	b2bf      	uxth	r7, r7
 801845c:	4798      	blx	r3
 801845e:	4407      	add	r7, r0
 8018460:	f8a4 70c8 	strh.w	r7, [r4, #200]	@ 0xc8
 8018464:	4630      	mov	r0, r6
 8018466:	f004 fa49 	bl	801c8fc <_ZNK8touchgfx8Drawable10invalidateEv>
 801846a:	6823      	ldr	r3, [r4, #0]
 801846c:	4641      	mov	r1, r8
 801846e:	4620      	mov	r0, r4
 8018470:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8018474:	4798      	blx	r3
 8018476:	6320      	str	r0, [r4, #48]	@ 0x30
 8018478:	f8d4 00f8 	ldr.w	r0, [r4, #248]	@ 0xf8
 801847c:	2800      	cmp	r0, #0
 801847e:	d03d      	beq.n	80184fc <_ZN8touchgfx6Slider23updateIndicatorPositionEs+0xec>
 8018480:	6803      	ldr	r3, [r0, #0]
 8018482:	68db      	ldr	r3, [r3, #12]
 8018484:	4798      	blx	r3
 8018486:	2800      	cmp	r0, #0
 8018488:	d038      	beq.n	80184fc <_ZN8touchgfx6Slider23updateIndicatorPositionEs+0xec>
 801848a:	f8d4 00f8 	ldr.w	r0, [r4, #248]	@ 0xf8
 801848e:	4621      	mov	r1, r4
 8018490:	6b22      	ldr	r2, [r4, #48]	@ 0x30
 8018492:	6803      	ldr	r3, [r0, #0]
 8018494:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8018498:	689b      	ldr	r3, [r3, #8]
 801849a:	4718      	bx	r3
 801849c:	4642      	mov	r2, r8
 801849e:	f9b4 1098 	ldrsh.w	r1, [r4, #152]	@ 0x98
 80184a2:	f7eb fe10 	bl	80040c6 <_ZN8touchgfx8Drawable6moveToEss>
 80184a6:	4630      	mov	r0, r6
 80184a8:	f004 fa28 	bl	801c8fc <_ZNK8touchgfx8Drawable10invalidateEv>
 80184ac:	f8b4 0042 	ldrh.w	r0, [r4, #66]	@ 0x42
 80184b0:	f8b4 5046 	ldrh.w	r5, [r4, #70]	@ 0x46
 80184b4:	6823      	ldr	r3, [r4, #0]
 80184b6:	4405      	add	r5, r0
 80184b8:	4620      	mov	r0, r4
 80184ba:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 80184be:	b2ad      	uxth	r5, r5
 80184c0:	4798      	blx	r3
 80184c2:	6823      	ldr	r3, [r4, #0]
 80184c4:	1bed      	subs	r5, r5, r7
 80184c6:	f9b4 a0c4 	ldrsh.w	sl, [r4, #196]	@ 0xc4
 80184ca:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 80184ce:	1a2d      	subs	r5, r5, r0
 80184d0:	4620      	mov	r0, r4
 80184d2:	4798      	blx	r3
 80184d4:	4438      	add	r0, r7
 80184d6:	b2ad      	uxth	r5, r5
 80184d8:	f9b4 90c8 	ldrsh.w	r9, [r4, #200]	@ 0xc8
 80184dc:	b202      	sxth	r2, r0
 80184de:	4651      	mov	r1, sl
 80184e0:	4630      	mov	r0, r6
 80184e2:	f7eb fd47 	bl	8003f74 <_ZN8touchgfx8Drawable5setXYEss>
 80184e6:	4630      	mov	r0, r6
 80184e8:	b22a      	sxth	r2, r5
 80184ea:	4649      	mov	r1, r9
 80184ec:	f7eb fd9e 	bl	800402c <_ZN8touchgfx8Drawable14setWidthHeightEss>
 80184f0:	f8b4 0072 	ldrh.w	r0, [r4, #114]	@ 0x72
 80184f4:	1a2d      	subs	r5, r5, r0
 80184f6:	f8a4 506e 	strh.w	r5, [r4, #110]	@ 0x6e
 80184fa:	e7b3      	b.n	8018464 <_ZN8touchgfx6Slider23updateIndicatorPositionEs+0x54>
 80184fc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

08018500 <_ZN8touchgfx6SliderC1Ev>:
 8018500:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8018504:	4604      	mov	r4, r0
 8018506:	2500      	movs	r5, #0
 8018508:	f7eb fc74 	bl	8003df4 <_ZN8touchgfx8DrawableC1Ev>
 801850c:	ae02      	add	r6, sp, #8
 801850e:	4b28      	ldr	r3, [pc, #160]	@ (80185b0 <_ZN8touchgfx6SliderC1Ev+0xb0>)
 8018510:	f64f 77ff 	movw	r7, #65535	@ 0xffff
 8018514:	f04f 0b01 	mov.w	fp, #1
 8018518:	f104 093c 	add.w	r9, r4, #60	@ 0x3c
 801851c:	f104 0a68 	add.w	sl, r4, #104	@ 0x68
 8018520:	6023      	str	r3, [r4, #0]
 8018522:	f826 7d04 	strh.w	r7, [r6, #-4]!
 8018526:	4648      	mov	r0, r9
 8018528:	4631      	mov	r1, r6
 801852a:	62a5      	str	r5, [r4, #40]	@ 0x28
 801852c:	f884 502c 	strb.w	r5, [r4, #44]	@ 0x2c
 8018530:	f104 0894 	add.w	r8, r4, #148	@ 0x94
 8018534:	f8c4 b038 	str.w	fp, [r4, #56]	@ 0x38
 8018538:	e9c4 550c 	strd	r5, r5, [r4, #48]	@ 0x30
 801853c:	f7ed f9f6 	bl	800592c <_ZN8touchgfx5ImageC1ERKNS_6BitmapE>
 8018540:	4631      	mov	r1, r6
 8018542:	4650      	mov	r0, sl
 8018544:	f8ad 7004 	strh.w	r7, [sp, #4]
 8018548:	f7ed f9f0 	bl	800592c <_ZN8touchgfx5ImageC1ERKNS_6BitmapE>
 801854c:	4631      	mov	r1, r6
 801854e:	f104 06c0 	add.w	r6, r4, #192	@ 0xc0
 8018552:	4640      	mov	r0, r8
 8018554:	f8ad 7004 	strh.w	r7, [sp, #4]
 8018558:	f7ed f9e8 	bl	800592c <_ZN8touchgfx5ImageC1ERKNS_6BitmapE>
 801855c:	4630      	mov	r0, r6
 801855e:	f7eb fc49 	bl	8003df4 <_ZN8touchgfx8DrawableC1Ev>
 8018562:	4b14      	ldr	r3, [pc, #80]	@ (80185b4 <_ZN8touchgfx6SliderC1Ev+0xb4>)
 8018564:	4651      	mov	r1, sl
 8018566:	4630      	mov	r0, r6
 8018568:	f8c4 30c0 	str.w	r3, [r4, #192]	@ 0xc0
 801856c:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8018570:	f8c4 50e8 	str.w	r5, [r4, #232]	@ 0xe8
 8018574:	f884 b024 	strb.w	fp, [r4, #36]	@ 0x24
 8018578:	e9c4 353b 	strd	r3, r5, [r4, #236]	@ 0xec
 801857c:	e9c4 553d 	strd	r5, r5, [r4, #244]	@ 0xf4
 8018580:	f7ff fb3e 	bl	8017c00 <_ZN8touchgfx9Container3addERNS_8DrawableE>
 8018584:	4649      	mov	r1, r9
 8018586:	4620      	mov	r0, r4
 8018588:	f7ff fb3a 	bl	8017c00 <_ZN8touchgfx9Container3addERNS_8DrawableE>
 801858c:	4631      	mov	r1, r6
 801858e:	4620      	mov	r0, r4
 8018590:	f7ff fb36 	bl	8017c00 <_ZN8touchgfx9Container3addERNS_8DrawableE>
 8018594:	4641      	mov	r1, r8
 8018596:	4620      	mov	r0, r4
 8018598:	f7ff fb32 	bl	8017c00 <_ZN8touchgfx9Container3addERNS_8DrawableE>
 801859c:	4620      	mov	r0, r4
 801859e:	2264      	movs	r2, #100	@ 0x64
 80185a0:	4629      	mov	r1, r5
 80185a2:	f7ff fdf2 	bl	801818a <_ZN8touchgfx6Slider13setValueRangeEii>
 80185a6:	4620      	mov	r0, r4
 80185a8:	b003      	add	sp, #12
 80185aa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80185ae:	bf00      	nop
 80185b0:	0802dee0 	.word	0x0802dee0
 80185b4:	0802dbcc 	.word	0x0802dbcc

080185b8 <_ZN8touchgfx6Slider10setBitmapsERKNS_6BitmapES3_S3_>:
 80185b8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80185bc:	4615      	mov	r5, r2
 80185be:	4604      	mov	r4, r0
 80185c0:	4608      	mov	r0, r1
 80185c2:	460e      	mov	r6, r1
 80185c4:	461f      	mov	r7, r3
 80185c6:	f006 facb 	bl	801eb60 <_ZNK8touchgfx6Bitmap8getWidthEv>
 80185ca:	4680      	mov	r8, r0
 80185cc:	4628      	mov	r0, r5
 80185ce:	f006 fac7 	bl	801eb60 <_ZNK8touchgfx6Bitmap8getWidthEv>
 80185d2:	4580      	cmp	r8, r0
 80185d4:	d005      	beq.n	80185e2 <_ZN8touchgfx6Slider10setBitmapsERKNS_6BitmapES3_S3_+0x2a>
 80185d6:	4b14      	ldr	r3, [pc, #80]	@ (8018628 <_ZN8touchgfx6Slider10setBitmapsERKNS_6BitmapES3_S3_+0x70>)
 80185d8:	213a      	movs	r1, #58	@ 0x3a
 80185da:	4a14      	ldr	r2, [pc, #80]	@ (801862c <_ZN8touchgfx6Slider10setBitmapsERKNS_6BitmapES3_S3_+0x74>)
 80185dc:	4814      	ldr	r0, [pc, #80]	@ (8018630 <_ZN8touchgfx6Slider10setBitmapsERKNS_6BitmapES3_S3_+0x78>)
 80185de:	f012 fb31 	bl	802ac44 <__assert_func>
 80185e2:	4630      	mov	r0, r6
 80185e4:	f006 faf6 	bl	801ebd4 <_ZNK8touchgfx6Bitmap9getHeightEv>
 80185e8:	4680      	mov	r8, r0
 80185ea:	4628      	mov	r0, r5
 80185ec:	f006 faf2 	bl	801ebd4 <_ZNK8touchgfx6Bitmap9getHeightEv>
 80185f0:	4580      	cmp	r8, r0
 80185f2:	d1f0      	bne.n	80185d6 <_ZN8touchgfx6Slider10setBitmapsERKNS_6BitmapES3_S3_+0x1e>
 80185f4:	4631      	mov	r1, r6
 80185f6:	f104 003c 	add.w	r0, r4, #60	@ 0x3c
 80185fa:	f001 fca6 	bl	8019f4a <_ZN8touchgfx5Image9setBitmapERKNS_6BitmapE>
 80185fe:	4629      	mov	r1, r5
 8018600:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8018604:	f001 fca1 	bl	8019f4a <_ZN8touchgfx5Image9setBitmapERKNS_6BitmapE>
 8018608:	4639      	mov	r1, r7
 801860a:	f104 0094 	add.w	r0, r4, #148	@ 0x94
 801860e:	f001 fc9c 	bl	8019f4a <_ZN8touchgfx5Image9setBitmapERKNS_6BitmapE>
 8018612:	f9b4 2072 	ldrsh.w	r2, [r4, #114]	@ 0x72
 8018616:	f9b4 1070 	ldrsh.w	r1, [r4, #112]	@ 0x70
 801861a:	f104 00c0 	add.w	r0, r4, #192	@ 0xc0
 801861e:	f7eb fd05 	bl	800402c <_ZN8touchgfx8Drawable14setWidthHeightEss>
 8018622:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8018626:	bf00      	nop
 8018628:	0802dc8b 	.word	0x0802dc8b
 801862c:	0802dfa0 	.word	0x0802dfa0
 8018630:	0802ddc2 	.word	0x0802ddc2

08018634 <_ZN8touchgfx3HAL15InvalidateCacheEv>:
 8018634:	4770      	bx	lr

08018636 <_ZN8touchgfx3HAL10FlushCacheEv>:
 8018636:	4770      	bx	lr

08018638 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEt>:
 8018638:	6803      	ldr	r3, [r0, #0]
 801863a:	b513      	push	{r0, r1, r4, lr}
 801863c:	f8d3 40a0 	ldr.w	r4, [r3, #160]	@ 0xa0
 8018640:	2300      	movs	r3, #0
 8018642:	e9cd 3300 	strd	r3, r3, [sp]
 8018646:	466b      	mov	r3, sp
 8018648:	47a0      	blx	r4
 801864a:	b002      	add	sp, #8
 801864c:	bd10      	pop	{r4, pc}

0801864e <_ZN8touchgfx3HAL16flushFrameBufferEv>:
 801864e:	2301      	movs	r3, #1
 8018650:	f880 304b 	strb.w	r3, [r0, #75]	@ 0x4b
 8018654:	f880 3069 	strb.w	r3, [r0, #105]	@ 0x69
 8018658:	4770      	bx	lr

0801865a <_ZN8touchgfx3HAL16flushFrameBufferERKNS_4RectE>:
 801865a:	2301      	movs	r3, #1
 801865c:	f880 304b 	strb.w	r3, [r0, #75]	@ 0x4b
 8018660:	f880 3069 	strb.w	r3, [r0, #105]	@ 0x69
 8018664:	4770      	bx	lr

08018666 <_ZN8touchgfx3HAL17allowDMATransfersEv>:
 8018666:	6843      	ldr	r3, [r0, #4]
 8018668:	2201      	movs	r2, #1
 801866a:	725a      	strb	r2, [r3, #9]
 801866c:	6840      	ldr	r0, [r0, #4]
 801866e:	6803      	ldr	r3, [r0, #0]
 8018670:	691b      	ldr	r3, [r3, #16]
 8018672:	4718      	bx	r3

08018674 <_ZN8touchgfx3HAL8flushDMAEv>:
 8018674:	6840      	ldr	r0, [r0, #4]
 8018676:	6803      	ldr	r3, [r0, #0]
 8018678:	689b      	ldr	r3, [r3, #8]
 801867a:	4718      	bx	r3

0801867c <_ZN8touchgfx3HAL8blitCopyEPKtttttthbtNS_6Bitmap12BitmapFormatES4_b>:
 801867c:	b530      	push	{r4, r5, lr}
 801867e:	b08b      	sub	sp, #44	@ 0x2c
 8018680:	6804      	ldr	r4, [r0, #0]
 8018682:	f89d 5058 	ldrb.w	r5, [sp, #88]	@ 0x58
 8018686:	9509      	str	r5, [sp, #36]	@ 0x24
 8018688:	f89d 5054 	ldrb.w	r5, [sp, #84]	@ 0x54
 801868c:	9508      	str	r5, [sp, #32]
 801868e:	f89d 5050 	ldrb.w	r5, [sp, #80]	@ 0x50
 8018692:	9507      	str	r5, [sp, #28]
 8018694:	f8bd 504c 	ldrh.w	r5, [sp, #76]	@ 0x4c
 8018698:	9506      	str	r5, [sp, #24]
 801869a:	f89d 5048 	ldrb.w	r5, [sp, #72]	@ 0x48
 801869e:	9505      	str	r5, [sp, #20]
 80186a0:	f89d 5044 	ldrb.w	r5, [sp, #68]	@ 0x44
 80186a4:	9504      	str	r5, [sp, #16]
 80186a6:	f8bd 5040 	ldrh.w	r5, [sp, #64]	@ 0x40
 80186aa:	9503      	str	r5, [sp, #12]
 80186ac:	f8bd 503c 	ldrh.w	r5, [sp, #60]	@ 0x3c
 80186b0:	9502      	str	r5, [sp, #8]
 80186b2:	f8bd 5038 	ldrh.w	r5, [sp, #56]	@ 0x38
 80186b6:	e9cd 3500 	strd	r3, r5, [sp]
 80186ba:	4613      	mov	r3, r2
 80186bc:	6be4      	ldr	r4, [r4, #60]	@ 0x3c
 80186be:	2200      	movs	r2, #0
 80186c0:	47a0      	blx	r4
 80186c2:	b00b      	add	sp, #44	@ 0x2c
 80186c4:	bd30      	pop	{r4, r5, pc}
	...

080186c8 <_ZN8touchgfx3HAL10beginFrameEv>:
 80186c8:	4b04      	ldr	r3, [pc, #16]	@ (80186dc <_ZN8touchgfx3HAL10beginFrameEv+0x14>)
 80186ca:	781b      	ldrb	r3, [r3, #0]
 80186cc:	b123      	cbz	r3, 80186d8 <_ZN8touchgfx3HAL10beginFrameEv+0x10>
 80186ce:	f890 006a 	ldrb.w	r0, [r0, #106]	@ 0x6a
 80186d2:	f080 0001 	eor.w	r0, r0, #1
 80186d6:	4770      	bx	lr
 80186d8:	2001      	movs	r0, #1
 80186da:	4770      	bx	lr
 80186dc:	2400b882 	.word	0x2400b882

080186e0 <_ZN8touchgfx3HAL8endFrameEv>:
 80186e0:	b510      	push	{r4, lr}
 80186e2:	4604      	mov	r4, r0
 80186e4:	6840      	ldr	r0, [r0, #4]
 80186e6:	6803      	ldr	r3, [r0, #0]
 80186e8:	689b      	ldr	r3, [r3, #8]
 80186ea:	4798      	blx	r3
 80186ec:	f894 3069 	ldrb.w	r3, [r4, #105]	@ 0x69
 80186f0:	b113      	cbz	r3, 80186f8 <_ZN8touchgfx3HAL8endFrameEv+0x18>
 80186f2:	2301      	movs	r3, #1
 80186f4:	f884 306a 	strb.w	r3, [r4, #106]	@ 0x6a
 80186f8:	bd10      	pop	{r4, pc}

080186fa <_ZN8touchgfx3HAL10initializeEv>:
 80186fa:	b510      	push	{r4, lr}
 80186fc:	4604      	mov	r4, r0
 80186fe:	f7e9 fbb3 	bl	8001e68 <_ZN8touchgfx10OSWrappers10initializeEv>
 8018702:	6860      	ldr	r0, [r4, #4]
 8018704:	6803      	ldr	r3, [r0, #0]
 8018706:	68db      	ldr	r3, [r3, #12]
 8018708:	4798      	blx	r3
 801870a:	68e0      	ldr	r0, [r4, #12]
 801870c:	6803      	ldr	r3, [r0, #0]
 801870e:	689b      	ldr	r3, [r3, #8]
 8018710:	4798      	blx	r3
 8018712:	6823      	ldr	r3, [r4, #0]
 8018714:	4620      	mov	r0, r4
 8018716:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8018718:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801871c:	4718      	bx	r3

0801871e <_ZN8touchgfx3HAL9taskEntryEv>:
 801871e:	b508      	push	{r3, lr}
 8018720:	6803      	ldr	r3, [r0, #0]
 8018722:	4604      	mov	r4, r0
 8018724:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8018726:	4798      	blx	r3
 8018728:	6823      	ldr	r3, [r4, #0]
 801872a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 801872c:	4620      	mov	r0, r4
 801872e:	4798      	blx	r3
 8018730:	f7e9 fc10 	bl	8001f54 <_ZN8touchgfx10OSWrappers12waitForVSyncEv>
 8018734:	6823      	ldr	r3, [r4, #0]
 8018736:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8018738:	e7f8      	b.n	801872c <_ZN8touchgfx3HAL9taskEntryEv+0xe>
	...

0801873c <_ZN8touchgfx3HAL4tickEv>:
 801873c:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
 801873e:	6803      	ldr	r3, [r0, #0]
 8018740:	4604      	mov	r4, r0
 8018742:	4d5c      	ldr	r5, [pc, #368]	@ (80188b4 <_ZN8touchgfx3HAL4tickEv+0x178>)
 8018744:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 8018748:	4798      	blx	r3
 801874a:	2800      	cmp	r0, #0
 801874c:	f000 8097 	beq.w	801887e <_ZN8touchgfx3HAL4tickEv+0x142>
 8018750:	2001      	movs	r0, #1
 8018752:	2600      	movs	r6, #0
 8018754:	f7e9 f8c6 	bl	80018e4 <_ZN8touchgfx4GPIO3setENS0_7GPIO_IDE>
 8018758:	f894 3066 	ldrb.w	r3, [r4, #102]	@ 0x66
 801875c:	f884 604b 	strb.w	r6, [r4, #75]	@ 0x4b
 8018760:	f884 3067 	strb.w	r3, [r4, #103]	@ 0x67
 8018764:	f894 3075 	ldrb.w	r3, [r4, #117]	@ 0x75
 8018768:	f884 6066 	strb.w	r6, [r4, #102]	@ 0x66
 801876c:	b133      	cbz	r3, 801877c <_ZN8touchgfx3HAL4tickEv+0x40>
 801876e:	6823      	ldr	r3, [r4, #0]
 8018770:	4620      	mov	r0, r4
 8018772:	f8d3 30bc 	ldr.w	r3, [r3, #188]	@ 0xbc
 8018776:	4798      	blx	r3
 8018778:	f884 6075 	strb.w	r6, [r4, #117]	@ 0x75
 801877c:	f894 304a 	ldrb.w	r3, [r4, #74]	@ 0x4a
 8018780:	2601      	movs	r6, #1
 8018782:	6862      	ldr	r2, [r4, #4]
 8018784:	f083 0301 	eor.w	r3, r3, #1
 8018788:	702e      	strb	r6, [r5, #0]
 801878a:	7253      	strb	r3, [r2, #9]
 801878c:	f003 f8ec 	bl	801b968 <_ZN8touchgfx11Application11getInstanceEv>
 8018790:	6803      	ldr	r3, [r0, #0]
 8018792:	4631      	mov	r1, r6
 8018794:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8018796:	4798      	blx	r3
 8018798:	f894 3067 	ldrb.w	r3, [r4, #103]	@ 0x67
 801879c:	b90b      	cbnz	r3, 80187a2 <_ZN8touchgfx3HAL4tickEv+0x66>
 801879e:	f884 6067 	strb.w	r6, [r4, #103]	@ 0x67
 80187a2:	f003 f8e1 	bl	801b968 <_ZN8touchgfx11Application11getInstanceEv>
 80187a6:	6803      	ldr	r3, [r0, #0]
 80187a8:	695b      	ldr	r3, [r3, #20]
 80187aa:	4798      	blx	r3
 80187ac:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80187ae:	6803      	ldr	r3, [r0, #0]
 80187b0:	691b      	ldr	r3, [r3, #16]
 80187b2:	4798      	blx	r3
 80187b4:	f894 3067 	ldrb.w	r3, [r4, #103]	@ 0x67
 80187b8:	f894 2068 	ldrb.w	r2, [r4, #104]	@ 0x68
 80187bc:	3b01      	subs	r3, #1
 80187be:	b2db      	uxtb	r3, r3
 80187c0:	f884 3067 	strb.w	r3, [r4, #103]	@ 0x67
 80187c4:	b10a      	cbz	r2, 80187ca <_ZN8touchgfx3HAL4tickEv+0x8e>
 80187c6:	2b00      	cmp	r3, #0
 80187c8:	d1eb      	bne.n	80187a2 <_ZN8touchgfx3HAL4tickEv+0x66>
 80187ca:	4a3b      	ldr	r2, [pc, #236]	@ (80188b8 <_ZN8touchgfx3HAL4tickEv+0x17c>)
 80187cc:	f994 1064 	ldrsb.w	r1, [r4, #100]	@ 0x64
 80187d0:	7813      	ldrb	r3, [r2, #0]
 80187d2:	3301      	adds	r3, #1
 80187d4:	b25b      	sxtb	r3, r3
 80187d6:	4299      	cmp	r1, r3
 80187d8:	7013      	strb	r3, [r2, #0]
 80187da:	dc10      	bgt.n	80187fe <_ZN8touchgfx3HAL4tickEv+0xc2>
 80187dc:	2300      	movs	r3, #0
 80187de:	68e0      	ldr	r0, [r4, #12]
 80187e0:	a902      	add	r1, sp, #8
 80187e2:	7013      	strb	r3, [r2, #0]
 80187e4:	aa03      	add	r2, sp, #12
 80187e6:	6803      	ldr	r3, [r0, #0]
 80187e8:	68db      	ldr	r3, [r3, #12]
 80187ea:	4798      	blx	r3
 80187ec:	6823      	ldr	r3, [r4, #0]
 80187ee:	2800      	cmp	r0, #0
 80187f0:	d051      	beq.n	8018896 <_ZN8touchgfx3HAL4tickEv+0x15a>
 80187f2:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 80187f6:	4620      	mov	r0, r4
 80187f8:	e9dd 1202 	ldrd	r1, r2, [sp, #8]
 80187fc:	4798      	blx	r3
 80187fe:	2300      	movs	r3, #0
 8018800:	6960      	ldr	r0, [r4, #20]
 8018802:	f88d 3007 	strb.w	r3, [sp, #7]
 8018806:	b158      	cbz	r0, 8018820 <_ZN8touchgfx3HAL4tickEv+0xe4>
 8018808:	6803      	ldr	r3, [r0, #0]
 801880a:	f10d 0107 	add.w	r1, sp, #7
 801880e:	68db      	ldr	r3, [r3, #12]
 8018810:	4798      	blx	r3
 8018812:	b128      	cbz	r0, 8018820 <_ZN8touchgfx3HAL4tickEv+0xe4>
 8018814:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8018816:	f89d 1007 	ldrb.w	r1, [sp, #7]
 801881a:	6803      	ldr	r3, [r0, #0]
 801881c:	68db      	ldr	r3, [r3, #12]
 801881e:	4798      	blx	r3
 8018820:	f104 001c 	add.w	r0, r4, #28
 8018824:	f012 f926 	bl	802aa74 <_ZN8touchgfx8Gestures4tickEv>
 8018828:	f894 306c 	ldrb.w	r3, [r4, #108]	@ 0x6c
 801882c:	b30b      	cbz	r3, 8018872 <_ZN8touchgfx3HAL4tickEv+0x136>
 801882e:	6920      	ldr	r0, [r4, #16]
 8018830:	6803      	ldr	r3, [r0, #0]
 8018832:	691b      	ldr	r3, [r3, #16]
 8018834:	4798      	blx	r3
 8018836:	6f23      	ldr	r3, [r4, #112]	@ 0x70
 8018838:	4606      	mov	r6, r0
 801883a:	b903      	cbnz	r3, 801883e <_ZN8touchgfx3HAL4tickEv+0x102>
 801883c:	6720      	str	r0, [r4, #112]	@ 0x70
 801883e:	6f23      	ldr	r3, [r4, #112]	@ 0x70
 8018840:	4a1e      	ldr	r2, [pc, #120]	@ (80188bc <_ZN8touchgfx3HAL4tickEv+0x180>)
 8018842:	1af3      	subs	r3, r6, r3
 8018844:	4293      	cmp	r3, r2
 8018846:	d914      	bls.n	8018872 <_ZN8touchgfx3HAL4tickEv+0x136>
 8018848:	6920      	ldr	r0, [r4, #16]
 801884a:	6803      	ldr	r3, [r0, #0]
 801884c:	699b      	ldr	r3, [r3, #24]
 801884e:	4798      	blx	r3
 8018850:	6f23      	ldr	r3, [r4, #112]	@ 0x70
 8018852:	2264      	movs	r2, #100	@ 0x64
 8018854:	1af3      	subs	r3, r6, r3
 8018856:	fbb3 f3f2 	udiv	r3, r3, r2
 801885a:	fbb0 f0f3 	udiv	r0, r0, r3
 801885e:	2800      	cmp	r0, #0
 8018860:	dc1e      	bgt.n	80188a0 <_ZN8touchgfx3HAL4tickEv+0x164>
 8018862:	f884 2065 	strb.w	r2, [r4, #101]	@ 0x65
 8018866:	6920      	ldr	r0, [r4, #16]
 8018868:	2100      	movs	r1, #0
 801886a:	6803      	ldr	r3, [r0, #0]
 801886c:	69db      	ldr	r3, [r3, #28]
 801886e:	4798      	blx	r3
 8018870:	6726      	str	r6, [r4, #112]	@ 0x70
 8018872:	f003 f879 	bl	801b968 <_ZN8touchgfx11Application11getInstanceEv>
 8018876:	6803      	ldr	r3, [r0, #0]
 8018878:	2100      	movs	r1, #0
 801887a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 801887c:	4798      	blx	r3
 801887e:	6823      	ldr	r3, [r4, #0]
 8018880:	4620      	mov	r0, r4
 8018882:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 8018886:	4798      	blx	r3
 8018888:	2001      	movs	r0, #1
 801888a:	f7e9 f847 	bl	800191c <_ZN8touchgfx4GPIO5clearENS0_7GPIO_IDE>
 801888e:	2300      	movs	r3, #0
 8018890:	702b      	strb	r3, [r5, #0]
 8018892:	b004      	add	sp, #16
 8018894:	bd70      	pop	{r4, r5, r6, pc}
 8018896:	f8d3 30b8 	ldr.w	r3, [r3, #184]	@ 0xb8
 801889a:	4620      	mov	r0, r4
 801889c:	4798      	blx	r3
 801889e:	e7ae      	b.n	80187fe <_ZN8touchgfx3HAL4tickEv+0xc2>
 80188a0:	2863      	cmp	r0, #99	@ 0x63
 80188a2:	bfcb      	itete	gt
 80188a4:	2300      	movgt	r3, #0
 80188a6:	f1c0 0064 	rsble	r0, r0, #100	@ 0x64
 80188aa:	f884 3065 	strbgt.w	r3, [r4, #101]	@ 0x65
 80188ae:	f884 0065 	strble.w	r0, [r4, #101]	@ 0x65
 80188b2:	e7d8      	b.n	8018866 <_ZN8touchgfx3HAL4tickEv+0x12a>
 80188b4:	2400b888 	.word	0x2400b888
 80188b8:	2400b889 	.word	0x2400b889
 80188bc:	05f5e100 	.word	0x05f5e100

080188c0 <_ZN8touchgfx3HAL17unlockFrameBufferEv>:
 80188c0:	f7e9 bb14 	b.w	8001eec <_ZN8touchgfx10OSWrappers24giveFrameBufferSemaphoreEv>

080188c4 <_ZN8touchgfx3HAL21registerEventListenerERNS_15UIEventListenerE>:
 80188c4:	6581      	str	r1, [r0, #88]	@ 0x58
 80188c6:	301c      	adds	r0, #28
 80188c8:	f012 b8d2 	b.w	802aa70 <_ZN8touchgfx8Gestures21registerEventListenerERNS_15UIEventListenerE>

080188cc <_ZN8touchgfx3HAL5touchEll>:
 80188cc:	b530      	push	{r4, r5, lr}
 80188ce:	b087      	sub	sp, #28
 80188d0:	4604      	mov	r4, r0
 80188d2:	a804      	add	r0, sp, #16
 80188d4:	e9cd 1204 	strd	r1, r2, [sp, #16]
 80188d8:	f002 fe06 	bl	801b4e8 <_ZN8touchgfx16TouchCalibration14translatePointERNS_5PointE>
 80188dc:	9b04      	ldr	r3, [sp, #16]
 80188de:	a906      	add	r1, sp, #24
 80188e0:	a803      	add	r0, sp, #12
 80188e2:	f8ad 300c 	strh.w	r3, [sp, #12]
 80188e6:	9b05      	ldr	r3, [sp, #20]
 80188e8:	f821 3d0a 	strh.w	r3, [r1, #-10]!
 80188ec:	f002 fe4e 	bl	801b58c <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERsS1_>
 80188f0:	f894 106b 	ldrb.w	r1, [r4, #107]	@ 0x6b
 80188f4:	f104 001c 	add.w	r0, r4, #28
 80188f8:	f8bd 200c 	ldrh.w	r2, [sp, #12]
 80188fc:	f8bd 300e 	ldrh.w	r3, [sp, #14]
 8018900:	b189      	cbz	r1, 8018926 <_ZN8touchgfx3HAL5touchEll+0x5a>
 8018902:	f8b4 5060 	ldrh.w	r5, [r4, #96]	@ 0x60
 8018906:	9300      	str	r3, [sp, #0]
 8018908:	4613      	mov	r3, r2
 801890a:	f8b4 105c 	ldrh.w	r1, [r4, #92]	@ 0x5c
 801890e:	462a      	mov	r2, r5
 8018910:	f012 f8be 	bl	802aa90 <_ZN8touchgfx8Gestures17registerDragEventEtttt>
 8018914:	b128      	cbz	r0, 8018922 <_ZN8touchgfx3HAL5touchEll+0x56>
 8018916:	f9bd 300c 	ldrsh.w	r3, [sp, #12]
 801891a:	65e3      	str	r3, [r4, #92]	@ 0x5c
 801891c:	f9bd 300e 	ldrsh.w	r3, [sp, #14]
 8018920:	6623      	str	r3, [r4, #96]	@ 0x60
 8018922:	b007      	add	sp, #28
 8018924:	bd30      	pop	{r4, r5, pc}
 8018926:	f012 f8f7 	bl	802ab18 <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt>
 801892a:	2301      	movs	r3, #1
 801892c:	f884 306b 	strb.w	r3, [r4, #107]	@ 0x6b
 8018930:	e7f1      	b.n	8018916 <_ZN8touchgfx3HAL5touchEll+0x4a>

08018932 <_ZN8touchgfx3HAL9blockCopyEPvPKvm>:
 8018932:	b510      	push	{r4, lr}
 8018934:	2b00      	cmp	r3, #0
 8018936:	d046      	beq.n	80189c6 <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x94>
 8018938:	ea81 0002 	eor.w	r0, r1, r2
 801893c:	07c4      	lsls	r4, r0, #31
 801893e:	d508      	bpl.n	8018952 <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x20>
 8018940:	440b      	add	r3, r1
 8018942:	3a01      	subs	r2, #1
 8018944:	428b      	cmp	r3, r1
 8018946:	d93e      	bls.n	80189c6 <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x94>
 8018948:	f812 0f01 	ldrb.w	r0, [r2, #1]!
 801894c:	f801 0b01 	strb.w	r0, [r1], #1
 8018950:	e7f8      	b.n	8018944 <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x12>
 8018952:	07d0      	lsls	r0, r2, #31
 8018954:	bf42      	ittt	mi
 8018956:	f812 0b01 	ldrbmi.w	r0, [r2], #1
 801895a:	f103 33ff 	addmi.w	r3, r3, #4294967295
 801895e:	f801 0b01 	strbmi.w	r0, [r1], #1
 8018962:	2b01      	cmp	r3, #1
 8018964:	d911      	bls.n	801898a <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x58>
 8018966:	ea81 0402 	eor.w	r4, r1, r2
 801896a:	4610      	mov	r0, r2
 801896c:	07a4      	lsls	r4, r4, #30
 801896e:	d022      	beq.n	80189b6 <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x84>
 8018970:	f023 0401 	bic.w	r4, r3, #1
 8018974:	440c      	add	r4, r1
 8018976:	428c      	cmp	r4, r1
 8018978:	4602      	mov	r2, r0
 801897a:	d904      	bls.n	8018986 <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x54>
 801897c:	8812      	ldrh	r2, [r2, #0]
 801897e:	3002      	adds	r0, #2
 8018980:	f821 2b02 	strh.w	r2, [r1], #2
 8018984:	e7f7      	b.n	8018976 <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x44>
 8018986:	f003 0301 	and.w	r3, r3, #1
 801898a:	f023 0003 	bic.w	r0, r3, #3
 801898e:	4408      	add	r0, r1
 8018990:	4288      	cmp	r0, r1
 8018992:	4614      	mov	r4, r2
 8018994:	d904      	bls.n	80189a0 <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x6e>
 8018996:	6824      	ldr	r4, [r4, #0]
 8018998:	3204      	adds	r2, #4
 801899a:	f841 4b04 	str.w	r4, [r1], #4
 801899e:	e7f7      	b.n	8018990 <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x5e>
 80189a0:	f003 0303 	and.w	r3, r3, #3
 80189a4:	3a01      	subs	r2, #1
 80189a6:	440b      	add	r3, r1
 80189a8:	428b      	cmp	r3, r1
 80189aa:	d90c      	bls.n	80189c6 <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x94>
 80189ac:	f812 0f01 	ldrb.w	r0, [r2, #1]!
 80189b0:	f801 0b01 	strb.w	r0, [r1], #1
 80189b4:	e7f8      	b.n	80189a8 <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x76>
 80189b6:	0790      	lsls	r0, r2, #30
 80189b8:	d0e7      	beq.n	801898a <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x58>
 80189ba:	f832 0b02 	ldrh.w	r0, [r2], #2
 80189be:	3b02      	subs	r3, #2
 80189c0:	f821 0b02 	strh.w	r0, [r1], #2
 80189c4:	e7e1      	b.n	801898a <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x58>
 80189c6:	2001      	movs	r0, #1
 80189c8:	bd10      	pop	{r4, pc}

080189ca <_ZN8touchgfx3HAL7noTouchEv>:
 80189ca:	b510      	push	{r4, lr}
 80189cc:	f890 306b 	ldrb.w	r3, [r0, #107]	@ 0x6b
 80189d0:	4604      	mov	r4, r0
 80189d2:	b153      	cbz	r3, 80189ea <_ZN8touchgfx3HAL7noTouchEv+0x20>
 80189d4:	f8b0 3060 	ldrh.w	r3, [r0, #96]	@ 0x60
 80189d8:	2101      	movs	r1, #1
 80189da:	f8b0 205c 	ldrh.w	r2, [r0, #92]	@ 0x5c
 80189de:	301c      	adds	r0, #28
 80189e0:	f012 f89a 	bl	802ab18 <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt>
 80189e4:	2300      	movs	r3, #0
 80189e6:	f884 306b 	strb.w	r3, [r4, #107]	@ 0x6b
 80189ea:	bd10      	pop	{r4, pc}

080189ec <_ZN8touchgfx3HAL27configurePartialFrameBufferEtttt>:
 80189ec:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80189f0:	4604      	mov	r4, r0
 80189f2:	6980      	ldr	r0, [r0, #24]
 80189f4:	b085      	sub	sp, #20
 80189f6:	460f      	mov	r7, r1
 80189f8:	4690      	mov	r8, r2
 80189fa:	4699      	mov	r9, r3
 80189fc:	b930      	cbnz	r0, 8018a0c <_ZN8touchgfx3HAL27configurePartialFrameBufferEtttt+0x20>
 80189fe:	4b1c      	ldr	r3, [pc, #112]	@ (8018a70 <_ZN8touchgfx3HAL27configurePartialFrameBufferEtttt+0x84>)
 8018a00:	f44f 71a5 	mov.w	r1, #330	@ 0x14a
 8018a04:	4a1b      	ldr	r2, [pc, #108]	@ (8018a74 <_ZN8touchgfx3HAL27configurePartialFrameBufferEtttt+0x88>)
 8018a06:	481c      	ldr	r0, [pc, #112]	@ (8018a78 <_ZN8touchgfx3HAL27configurePartialFrameBufferEtttt+0x8c>)
 8018a08:	f012 f91c 	bl	802ac44 <__assert_func>
 8018a0c:	ad04      	add	r5, sp, #16
 8018a0e:	2600      	movs	r6, #0
 8018a10:	f845 6d04 	str.w	r6, [r5, #-4]!
 8018a14:	6806      	ldr	r6, [r0, #0]
 8018a16:	9501      	str	r5, [sp, #4]
 8018a18:	f8bd 5030 	ldrh.w	r5, [sp, #48]	@ 0x30
 8018a1c:	9500      	str	r5, [sp, #0]
 8018a1e:	6835      	ldr	r5, [r6, #0]
 8018a20:	47a8      	blx	r5
 8018a22:	4d16      	ldr	r5, [pc, #88]	@ (8018a7c <_ZN8touchgfx3HAL27configurePartialFrameBufferEtttt+0x90>)
 8018a24:	4606      	mov	r6, r0
 8018a26:	f8a5 9000 	strh.w	r9, [r5]
 8018a2a:	f7eb fb99 	bl	8004160 <_ZN8touchgfx3HAL3lcdEv>
 8018a2e:	6803      	ldr	r3, [r0, #0]
 8018a30:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8018a32:	4798      	blx	r3
 8018a34:	2801      	cmp	r0, #1
 8018a36:	d012      	beq.n	8018a5e <_ZN8touchgfx3HAL27configurePartialFrameBufferEtttt+0x72>
 8018a38:	d306      	bcc.n	8018a48 <_ZN8touchgfx3HAL27configurePartialFrameBufferEtttt+0x5c>
 8018a3a:	280d      	cmp	r0, #13
 8018a3c:	d80b      	bhi.n	8018a56 <_ZN8touchgfx3HAL27configurePartialFrameBufferEtttt+0x6a>
 8018a3e:	4b10      	ldr	r3, [pc, #64]	@ (8018a80 <_ZN8touchgfx3HAL27configurePartialFrameBufferEtttt+0x94>)
 8018a40:	f240 1167 	movw	r1, #359	@ 0x167
 8018a44:	4a0b      	ldr	r2, [pc, #44]	@ (8018a74 <_ZN8touchgfx3HAL27configurePartialFrameBufferEtttt+0x88>)
 8018a46:	e7de      	b.n	8018a06 <_ZN8touchgfx3HAL27configurePartialFrameBufferEtttt+0x1a>
 8018a48:	882b      	ldrh	r3, [r5, #0]
 8018a4a:	fb08 7203 	mla	r2, r8, r3, r7
 8018a4e:	9b03      	ldr	r3, [sp, #12]
 8018a50:	eba3 0342 	sub.w	r3, r3, r2, lsl #1
 8018a54:	63e3      	str	r3, [r4, #60]	@ 0x3c
 8018a56:	4630      	mov	r0, r6
 8018a58:	b005      	add	sp, #20
 8018a5a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8018a5e:	882a      	ldrh	r2, [r5, #0]
 8018a60:	9b03      	ldr	r3, [sp, #12]
 8018a62:	fb08 7202 	mla	r2, r8, r2, r7
 8018a66:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 8018a6a:	1a9a      	subs	r2, r3, r2
 8018a6c:	63e2      	str	r2, [r4, #60]	@ 0x3c
 8018a6e:	e7f2      	b.n	8018a56 <_ZN8touchgfx3HAL27configurePartialFrameBufferEtttt+0x6a>
 8018a70:	0802e282 	.word	0x0802e282
 8018a74:	0802e613 	.word	0x0802e613
 8018a78:	0802e2c7 	.word	0x0802e2c7
 8018a7c:	2400b87e 	.word	0x2400b87e
 8018a80:	0802e2ed 	.word	0x0802e2ed

08018a84 <_ZN8touchgfx3HAL8blitCopyEPKtttttthbb>:
 8018a84:	b5f0      	push	{r4, r5, r6, r7, lr}
 8018a86:	b08b      	sub	sp, #44	@ 0x2c
 8018a88:	4617      	mov	r7, r2
 8018a8a:	4604      	mov	r4, r0
 8018a8c:	460e      	mov	r6, r1
 8018a8e:	461d      	mov	r5, r3
 8018a90:	f7eb fb66 	bl	8004160 <_ZN8touchgfx3HAL3lcdEv>
 8018a94:	6803      	ldr	r3, [r0, #0]
 8018a96:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8018a98:	4798      	blx	r3
 8018a9a:	f89d 3054 	ldrb.w	r3, [sp, #84]	@ 0x54
 8018a9e:	9007      	str	r0, [sp, #28]
 8018aa0:	4631      	mov	r1, r6
 8018aa2:	6822      	ldr	r2, [r4, #0]
 8018aa4:	e9cd 0308 	strd	r0, r3, [sp, #32]
 8018aa8:	4b0c      	ldr	r3, [pc, #48]	@ (8018adc <_ZN8touchgfx3HAL8blitCopyEPKtttttthbb+0x58>)
 8018aaa:	4620      	mov	r0, r4
 8018aac:	881b      	ldrh	r3, [r3, #0]
 8018aae:	9306      	str	r3, [sp, #24]
 8018ab0:	f89d 3050 	ldrb.w	r3, [sp, #80]	@ 0x50
 8018ab4:	9305      	str	r3, [sp, #20]
 8018ab6:	f89d 304c 	ldrb.w	r3, [sp, #76]	@ 0x4c
 8018aba:	9304      	str	r3, [sp, #16]
 8018abc:	f8bd 3048 	ldrh.w	r3, [sp, #72]	@ 0x48
 8018ac0:	9303      	str	r3, [sp, #12]
 8018ac2:	f8bd 3044 	ldrh.w	r3, [sp, #68]	@ 0x44
 8018ac6:	9302      	str	r3, [sp, #8]
 8018ac8:	f8bd 3040 	ldrh.w	r3, [sp, #64]	@ 0x40
 8018acc:	e9cd 5300 	strd	r5, r3, [sp]
 8018ad0:	463b      	mov	r3, r7
 8018ad2:	6bd5      	ldr	r5, [r2, #60]	@ 0x3c
 8018ad4:	2200      	movs	r2, #0
 8018ad6:	47a8      	blx	r5
 8018ad8:	b00b      	add	sp, #44	@ 0x2c
 8018ada:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8018adc:	2400b87e 	.word	0x2400b87e

08018ae0 <_ZN8touchgfx3HAL16blitCopyARGB8888EPKtttttthb>:
 8018ae0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8018ae4:	4698      	mov	r8, r3
 8018ae6:	6803      	ldr	r3, [r0, #0]
 8018ae8:	b08b      	sub	sp, #44	@ 0x2c
 8018aea:	4617      	mov	r7, r2
 8018aec:	6bdd      	ldr	r5, [r3, #60]	@ 0x3c
 8018aee:	460e      	mov	r6, r1
 8018af0:	4b13      	ldr	r3, [pc, #76]	@ (8018b40 <_ZN8touchgfx3HAL16blitCopyARGB8888EPKtttttthb+0x60>)
 8018af2:	4604      	mov	r4, r0
 8018af4:	f8b3 9000 	ldrh.w	r9, [r3]
 8018af8:	f7eb fb32 	bl	8004160 <_ZN8touchgfx3HAL3lcdEv>
 8018afc:	6803      	ldr	r3, [r0, #0]
 8018afe:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8018b00:	4798      	blx	r3
 8018b02:	f89d 3058 	ldrb.w	r3, [sp, #88]	@ 0x58
 8018b06:	2200      	movs	r2, #0
 8018b08:	4631      	mov	r1, r6
 8018b0a:	e9cd 0308 	strd	r0, r3, [sp, #32]
 8018b0e:	2302      	movs	r3, #2
 8018b10:	4620      	mov	r0, r4
 8018b12:	e9cd 9306 	strd	r9, r3, [sp, #24]
 8018b16:	2301      	movs	r3, #1
 8018b18:	9305      	str	r3, [sp, #20]
 8018b1a:	f89d 3054 	ldrb.w	r3, [sp, #84]	@ 0x54
 8018b1e:	9304      	str	r3, [sp, #16]
 8018b20:	f8bd 3050 	ldrh.w	r3, [sp, #80]	@ 0x50
 8018b24:	9303      	str	r3, [sp, #12]
 8018b26:	f8bd 304c 	ldrh.w	r3, [sp, #76]	@ 0x4c
 8018b2a:	9302      	str	r3, [sp, #8]
 8018b2c:	f8bd 3048 	ldrh.w	r3, [sp, #72]	@ 0x48
 8018b30:	e9cd 8300 	strd	r8, r3, [sp]
 8018b34:	463b      	mov	r3, r7
 8018b36:	47a8      	blx	r5
 8018b38:	b00b      	add	sp, #44	@ 0x2c
 8018b3a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8018b3e:	bf00      	nop
 8018b40:	2400b87e 	.word	0x2400b87e

08018b44 <_ZN8touchgfx3HAL8blitFillENS_9colortypeEtttthb>:
 8018b44:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8018b48:	4698      	mov	r8, r3
 8018b4a:	6803      	ldr	r3, [r0, #0]
 8018b4c:	b087      	sub	sp, #28
 8018b4e:	460e      	mov	r6, r1
 8018b50:	6d9d      	ldr	r5, [r3, #88]	@ 0x58
 8018b52:	4617      	mov	r7, r2
 8018b54:	4b0f      	ldr	r3, [pc, #60]	@ (8018b94 <_ZN8touchgfx3HAL8blitFillENS_9colortypeEtttthb+0x50>)
 8018b56:	4604      	mov	r4, r0
 8018b58:	f8b3 9000 	ldrh.w	r9, [r3]
 8018b5c:	f7eb fb00 	bl	8004160 <_ZN8touchgfx3HAL3lcdEv>
 8018b60:	6803      	ldr	r3, [r0, #0]
 8018b62:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8018b64:	4798      	blx	r3
 8018b66:	f89d 3044 	ldrb.w	r3, [sp, #68]	@ 0x44
 8018b6a:	463a      	mov	r2, r7
 8018b6c:	4631      	mov	r1, r6
 8018b6e:	f8cd 900c 	str.w	r9, [sp, #12]
 8018b72:	e9cd 0304 	strd	r0, r3, [sp, #16]
 8018b76:	f89d 3040 	ldrb.w	r3, [sp, #64]	@ 0x40
 8018b7a:	4620      	mov	r0, r4
 8018b7c:	9302      	str	r3, [sp, #8]
 8018b7e:	f8bd 303c 	ldrh.w	r3, [sp, #60]	@ 0x3c
 8018b82:	9301      	str	r3, [sp, #4]
 8018b84:	f8bd 3038 	ldrh.w	r3, [sp, #56]	@ 0x38
 8018b88:	9300      	str	r3, [sp, #0]
 8018b8a:	4643      	mov	r3, r8
 8018b8c:	47a8      	blx	r5
 8018b8e:	b007      	add	sp, #28
 8018b90:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8018b94:	2400b87e 	.word	0x2400b87e

08018b98 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE>:
 8018b98:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8018b9c:	4604      	mov	r4, r0
 8018b9e:	b08f      	sub	sp, #60	@ 0x3c
 8018ba0:	4610      	mov	r0, r2
 8018ba2:	460d      	mov	r5, r1
 8018ba4:	4691      	mov	r9, r2
 8018ba6:	461e      	mov	r6, r3
 8018ba8:	f005 ff20 	bl	801e9ec <_ZN8touchgfx6Bitmap23dynamicBitmapGetAddressEt>
 8018bac:	2800      	cmp	r0, #0
 8018bae:	f000 809c 	beq.w	8018cea <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x152>
 8018bb2:	6823      	ldr	r3, [r4, #0]
 8018bb4:	4620      	mov	r0, r4
 8018bb6:	f8df b194 	ldr.w	fp, [pc, #404]	@ 8018d4c <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x1b4>
 8018bba:	f10d 0838 	add.w	r8, sp, #56	@ 0x38
 8018bbe:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8018bc0:	4798      	blx	r3
 8018bc2:	6823      	ldr	r3, [r4, #0]
 8018bc4:	4620      	mov	r0, r4
 8018bc6:	f8df a188 	ldr.w	sl, [pc, #392]	@ 8018d50 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x1b8>
 8018bca:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8018bcc:	4798      	blx	r3
 8018bce:	f8bb 3000 	ldrh.w	r3, [fp]
 8018bd2:	4f5b      	ldr	r7, [pc, #364]	@ (8018d40 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x1a8>)
 8018bd4:	9301      	str	r3, [sp, #4]
 8018bd6:	f8ba 3000 	ldrh.w	r3, [sl]
 8018bda:	f828 9d1c 	strh.w	r9, [r8, #-28]!
 8018bde:	4640      	mov	r0, r8
 8018be0:	9302      	str	r3, [sp, #8]
 8018be2:	883b      	ldrh	r3, [r7, #0]
 8018be4:	9303      	str	r3, [sp, #12]
 8018be6:	4b57      	ldr	r3, [pc, #348]	@ (8018d44 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x1ac>)
 8018be8:	881a      	ldrh	r2, [r3, #0]
 8018bea:	9305      	str	r3, [sp, #20]
 8018bec:	9204      	str	r2, [sp, #16]
 8018bee:	f005 ffb7 	bl	801eb60 <_ZNK8touchgfx6Bitmap8getWidthEv>
 8018bf2:	8038      	strh	r0, [r7, #0]
 8018bf4:	4640      	mov	r0, r8
 8018bf6:	f005 ffed 	bl	801ebd4 <_ZNK8touchgfx6Bitmap9getHeightEv>
 8018bfa:	9b05      	ldr	r3, [sp, #20]
 8018bfc:	8018      	strh	r0, [r3, #0]
 8018bfe:	4b52      	ldr	r3, [pc, #328]	@ (8018d48 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x1b0>)
 8018c00:	781b      	ldrb	r3, [r3, #0]
 8018c02:	2b00      	cmp	r3, #0
 8018c04:	d174      	bne.n	8018cf0 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x158>
 8018c06:	883b      	ldrh	r3, [r7, #0]
 8018c08:	f8aa 0000 	strh.w	r0, [sl]
 8018c0c:	f8ab 3000 	strh.w	r3, [fp]
 8018c10:	4648      	mov	r0, r9
 8018c12:	e9d4 870f 	ldrd	r8, r7, [r4, #60]	@ 0x3c
 8018c16:	f005 fee9 	bl	801e9ec <_ZN8touchgfx6Bitmap23dynamicBitmapGetAddressEt>
 8018c1a:	2200      	movs	r2, #0
 8018c1c:	e9c4 000f 	strd	r0, r0, [r4, #60]	@ 0x3c
 8018c20:	4611      	mov	r1, r2
 8018c22:	4628      	mov	r0, r5
 8018c24:	f9b5 9004 	ldrsh.w	r9, [r5, #4]
 8018c28:	f9b5 a006 	ldrsh.w	sl, [r5, #6]
 8018c2c:	f7eb f9a2 	bl	8003f74 <_ZN8touchgfx8Drawable5setXYEss>
 8018c30:	2301      	movs	r3, #1
 8018c32:	f895 b025 	ldrb.w	fp, [r5, #37]	@ 0x25
 8018c36:	f885 3025 	strb.w	r3, [r5, #37]	@ 0x25
 8018c3a:	f9b6 3004 	ldrsh.w	r3, [r6, #4]
 8018c3e:	2b00      	cmp	r3, #0
 8018c40:	dd5c      	ble.n	8018cfc <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x164>
 8018c42:	f9b6 3006 	ldrsh.w	r3, [r6, #6]
 8018c46:	2b00      	cmp	r3, #0
 8018c48:	dd58      	ble.n	8018cfc <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x164>
 8018c4a:	462a      	mov	r2, r5
 8018c4c:	ab0a      	add	r3, sp, #40	@ 0x28
 8018c4e:	f852 0f04 	ldr.w	r0, [r2, #4]!
 8018c52:	6851      	ldr	r1, [r2, #4]
 8018c54:	c303      	stmia	r3!, {r0, r1}
 8018c56:	4631      	mov	r1, r6
 8018c58:	a80a      	add	r0, sp, #40	@ 0x28
 8018c5a:	f7ff f913 	bl	8017e84 <_ZN8touchgfx4RectaNERKS0_>
 8018c5e:	4b38      	ldr	r3, [pc, #224]	@ (8018d40 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x1a8>)
 8018c60:	2100      	movs	r1, #0
 8018c62:	f9b3 2000 	ldrsh.w	r2, [r3]
 8018c66:	4b37      	ldr	r3, [pc, #220]	@ (8018d44 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x1ac>)
 8018c68:	f8ad 2034 	strh.w	r2, [sp, #52]	@ 0x34
 8018c6c:	aa0a      	add	r2, sp, #40	@ 0x28
 8018c6e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8018c72:	910c      	str	r1, [sp, #48]	@ 0x30
 8018c74:	f8ad 3036 	strh.w	r3, [sp, #54]	@ 0x36
 8018c78:	ab08      	add	r3, sp, #32
 8018c7a:	e892 0003 	ldmia.w	r2, {r0, r1}
 8018c7e:	e883 0003 	stmia.w	r3, {r0, r1}
 8018c82:	4618      	mov	r0, r3
 8018c84:	a90c      	add	r1, sp, #48	@ 0x30
 8018c86:	f7ff f8fd 	bl	8017e84 <_ZN8touchgfx4RectaNERKS0_>
 8018c8a:	6ce3      	ldr	r3, [r4, #76]	@ 0x4c
 8018c8c:	2b00      	cmp	r3, #0
 8018c8e:	d13c      	bne.n	8018d0a <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x172>
 8018c90:	2000      	movs	r0, #0
 8018c92:	f884 0076 	strb.w	r0, [r4, #118]	@ 0x76
 8018c96:	2600      	movs	r6, #0
 8018c98:	696b      	ldr	r3, [r5, #20]
 8018c9a:	a908      	add	r1, sp, #32
 8018c9c:	682a      	ldr	r2, [r5, #0]
 8018c9e:	4628      	mov	r0, r5
 8018ca0:	9305      	str	r3, [sp, #20]
 8018ca2:	616e      	str	r6, [r5, #20]
 8018ca4:	6892      	ldr	r2, [r2, #8]
 8018ca6:	4790      	blx	r2
 8018ca8:	9b05      	ldr	r3, [sp, #20]
 8018caa:	4652      	mov	r2, sl
 8018cac:	4649      	mov	r1, r9
 8018cae:	616b      	str	r3, [r5, #20]
 8018cb0:	4628      	mov	r0, r5
 8018cb2:	f884 6076 	strb.w	r6, [r4, #118]	@ 0x76
 8018cb6:	f885 b025 	strb.w	fp, [r5, #37]	@ 0x25
 8018cba:	f7eb f95b 	bl	8003f74 <_ZN8touchgfx8Drawable5setXYEss>
 8018cbe:	9a01      	ldr	r2, [sp, #4]
 8018cc0:	4b22      	ldr	r3, [pc, #136]	@ (8018d4c <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x1b4>)
 8018cc2:	4620      	mov	r0, r4
 8018cc4:	801a      	strh	r2, [r3, #0]
 8018cc6:	9a02      	ldr	r2, [sp, #8]
 8018cc8:	4b21      	ldr	r3, [pc, #132]	@ (8018d50 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x1b8>)
 8018cca:	801a      	strh	r2, [r3, #0]
 8018ccc:	9a03      	ldr	r2, [sp, #12]
 8018cce:	4b1c      	ldr	r3, [pc, #112]	@ (8018d40 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x1a8>)
 8018cd0:	801a      	strh	r2, [r3, #0]
 8018cd2:	4b1c      	ldr	r3, [pc, #112]	@ (8018d44 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x1ac>)
 8018cd4:	9a04      	ldr	r2, [sp, #16]
 8018cd6:	801a      	strh	r2, [r3, #0]
 8018cd8:	6823      	ldr	r3, [r4, #0]
 8018cda:	e9c4 870f 	strd	r8, r7, [r4, #60]	@ 0x3c
 8018cde:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8018ce0:	4798      	blx	r3
 8018ce2:	6823      	ldr	r3, [r4, #0]
 8018ce4:	4620      	mov	r0, r4
 8018ce6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8018ce8:	4798      	blx	r3
 8018cea:	b00f      	add	sp, #60	@ 0x3c
 8018cec:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8018cf0:	883b      	ldrh	r3, [r7, #0]
 8018cf2:	f8ab 0000 	strh.w	r0, [fp]
 8018cf6:	f8aa 3000 	strh.w	r3, [sl]
 8018cfa:	e789      	b.n	8018c10 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x78>
 8018cfc:	462a      	mov	r2, r5
 8018cfe:	ab0a      	add	r3, sp, #40	@ 0x28
 8018d00:	f852 0f04 	ldr.w	r0, [r2, #4]!
 8018d04:	6851      	ldr	r1, [r2, #4]
 8018d06:	c303      	stmia	r3!, {r0, r1}
 8018d08:	e7a9      	b.n	8018c5e <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0xc6>
 8018d0a:	a807      	add	r0, sp, #28
 8018d0c:	f006 f8ba 	bl	801ee84 <_ZNK8touchgfx6Bitmap9getFormatEv>
 8018d10:	4606      	mov	r6, r0
 8018d12:	6ce0      	ldr	r0, [r4, #76]	@ 0x4c
 8018d14:	6803      	ldr	r3, [r0, #0]
 8018d16:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8018d18:	4798      	blx	r3
 8018d1a:	4286      	cmp	r6, r0
 8018d1c:	d1b8      	bne.n	8018c90 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0xf8>
 8018d1e:	f7eb fa1f 	bl	8004160 <_ZN8touchgfx3HAL3lcdEv>
 8018d22:	6803      	ldr	r3, [r0, #0]
 8018d24:	4606      	mov	r6, r0
 8018d26:	a807      	add	r0, sp, #28
 8018d28:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8018d2a:	9305      	str	r3, [sp, #20]
 8018d2c:	f006 f8aa 	bl	801ee84 <_ZNK8touchgfx6Bitmap9getFormatEv>
 8018d30:	9b05      	ldr	r3, [sp, #20]
 8018d32:	4601      	mov	r1, r0
 8018d34:	4630      	mov	r0, r6
 8018d36:	4798      	blx	r3
 8018d38:	f080 0001 	eor.w	r0, r0, #1
 8018d3c:	b2c0      	uxtb	r0, r0
 8018d3e:	e7a8      	b.n	8018c92 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0xfa>
 8018d40:	2400b878 	.word	0x2400b878
 8018d44:	2400b87a 	.word	0x2400b87a
 8018d48:	2400b87c 	.word	0x2400b87c
 8018d4c:	2400b87e 	.word	0x2400b87e
 8018d50:	2400b880 	.word	0x2400b880

08018d54 <_ZN8touchgfx3HAL20getClientFrameBufferEv>:
 8018d54:	4b07      	ldr	r3, [pc, #28]	@ (8018d74 <_ZN8touchgfx3HAL20getClientFrameBufferEv+0x20>)
 8018d56:	b510      	push	{r4, lr}
 8018d58:	781b      	ldrb	r3, [r3, #0]
 8018d5a:	4604      	mov	r4, r0
 8018d5c:	b13b      	cbz	r3, 8018d6e <_ZN8touchgfx3HAL20getClientFrameBufferEv+0x1a>
 8018d5e:	6803      	ldr	r3, [r0, #0]
 8018d60:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8018d62:	4798      	blx	r3
 8018d64:	6be3      	ldr	r3, [r4, #60]	@ 0x3c
 8018d66:	4283      	cmp	r3, r0
 8018d68:	d101      	bne.n	8018d6e <_ZN8touchgfx3HAL20getClientFrameBufferEv+0x1a>
 8018d6a:	6c20      	ldr	r0, [r4, #64]	@ 0x40
 8018d6c:	bd10      	pop	{r4, pc}
 8018d6e:	6be0      	ldr	r0, [r4, #60]	@ 0x3c
 8018d70:	e7fc      	b.n	8018d6c <_ZN8touchgfx3HAL20getClientFrameBufferEv+0x18>
 8018d72:	bf00      	nop
 8018d74:	2400b882 	.word	0x2400b882

08018d78 <_ZN8touchgfx3HAL12blitCopyWordEPKttttttt>:
 8018d78:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8018d7c:	b088      	sub	sp, #32
 8018d7e:	4692      	mov	sl, r2
 8018d80:	461d      	mov	r5, r3
 8018d82:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8018d86:	f8bd 904c 	ldrh.w	r9, [sp, #76]	@ 0x4c
 8018d8a:	2400      	movs	r4, #0
 8018d8c:	f8bd 8040 	ldrh.w	r8, [sp, #64]	@ 0x40
 8018d90:	4606      	mov	r6, r0
 8018d92:	f8bd 7044 	ldrh.w	r7, [sp, #68]	@ 0x44
 8018d96:	fb09 a505 	mla	r5, r9, r5, sl
 8018d9a:	9403      	str	r4, [sp, #12]
 8018d9c:	f8ad 8014 	strh.w	r8, [sp, #20]
 8018da0:	f8ad 7016 	strh.w	r7, [sp, #22]
 8018da4:	f88d 401c 	strb.w	r4, [sp, #28]
 8018da8:	e9cd 3100 	strd	r3, r1, [sp]
 8018dac:	f8bd 3048 	ldrh.w	r3, [sp, #72]	@ 0x48
 8018db0:	f8ad 3018 	strh.w	r3, [sp, #24]
 8018db4:	f7ff ffce 	bl	8018d54 <_ZN8touchgfx3HAL20getClientFrameBufferEv>
 8018db8:	eb00 0545 	add.w	r5, r0, r5, lsl #1
 8018dbc:	f8ad 901a 	strh.w	r9, [sp, #26]
 8018dc0:	f88d 401e 	strb.w	r4, [sp, #30]
 8018dc4:	9504      	str	r5, [sp, #16]
 8018dc6:	f88d 401d 	strb.w	r4, [sp, #29]
 8018dca:	f88d 401f 	strb.w	r4, [sp, #31]
 8018dce:	f1b8 0f00 	cmp.w	r8, #0
 8018dd2:	d000      	beq.n	8018dd6 <_ZN8touchgfx3HAL12blitCopyWordEPKttttttt+0x5e>
 8018dd4:	b937      	cbnz	r7, 8018de4 <_ZN8touchgfx3HAL12blitCopyWordEPKttttttt+0x6c>
 8018dd6:	4b0d      	ldr	r3, [pc, #52]	@ (8018e0c <_ZN8touchgfx3HAL12blitCopyWordEPKttttttt+0x94>)
 8018dd8:	f240 210b 	movw	r1, #523	@ 0x20b
 8018ddc:	4a0c      	ldr	r2, [pc, #48]	@ (8018e10 <_ZN8touchgfx3HAL12blitCopyWordEPKttttttt+0x98>)
 8018dde:	480d      	ldr	r0, [pc, #52]	@ (8018e14 <_ZN8touchgfx3HAL12blitCopyWordEPKttttttt+0x9c>)
 8018de0:	f011 ff30 	bl	802ac44 <__assert_func>
 8018de4:	6833      	ldr	r3, [r6, #0]
 8018de6:	4630      	mov	r0, r6
 8018de8:	9c00      	ldr	r4, [sp, #0]
 8018dea:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8018dec:	4798      	blx	r3
 8018dee:	4220      	tst	r0, r4
 8018df0:	d104      	bne.n	8018dfc <_ZN8touchgfx3HAL12blitCopyWordEPKttttttt+0x84>
 8018df2:	4b09      	ldr	r3, [pc, #36]	@ (8018e18 <_ZN8touchgfx3HAL12blitCopyWordEPKttttttt+0xa0>)
 8018df4:	f44f 7103 	mov.w	r1, #524	@ 0x20c
 8018df8:	4a05      	ldr	r2, [pc, #20]	@ (8018e10 <_ZN8touchgfx3HAL12blitCopyWordEPKttttttt+0x98>)
 8018dfa:	e7f0      	b.n	8018dde <_ZN8touchgfx3HAL12blitCopyWordEPKttttttt+0x66>
 8018dfc:	6870      	ldr	r0, [r6, #4]
 8018dfe:	4669      	mov	r1, sp
 8018e00:	6803      	ldr	r3, [r0, #0]
 8018e02:	685b      	ldr	r3, [r3, #4]
 8018e04:	4798      	blx	r3
 8018e06:	b008      	add	sp, #32
 8018e08:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8018e0c:	0802e115 	.word	0x0802e115
 8018e10:	0802e448 	.word	0x0802e448
 8018e14:	0802e2c7 	.word	0x0802e2c7
 8018e18:	0802e14d 	.word	0x0802e14d

08018e1c <_ZN8touchgfx3HAL12blitFillWordEtttttt>:
 8018e1c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8018e20:	b089      	sub	sp, #36	@ 0x24
 8018e22:	4693      	mov	fp, r2
 8018e24:	461d      	mov	r5, r3
 8018e26:	2400      	movs	r4, #0
 8018e28:	f8bd 9050 	ldrh.w	r9, [sp, #80]	@ 0x50
 8018e2c:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8018e30:	468a      	mov	sl, r1
 8018e32:	f8bd 8048 	ldrh.w	r8, [sp, #72]	@ 0x48
 8018e36:	fb09 b505 	mla	r5, r9, r5, fp
 8018e3a:	f8bd 704c 	ldrh.w	r7, [sp, #76]	@ 0x4c
 8018e3e:	4606      	mov	r6, r0
 8018e40:	9403      	str	r4, [sp, #12]
 8018e42:	e9cd 3400 	strd	r3, r4, [sp]
 8018e46:	f7ff ff85 	bl	8018d54 <_ZN8touchgfx3HAL20getClientFrameBufferEv>
 8018e4a:	f8ad 8014 	strh.w	r8, [sp, #20]
 8018e4e:	eb00 0545 	add.w	r5, r0, r5, lsl #1
 8018e52:	f8ad 7016 	strh.w	r7, [sp, #22]
 8018e56:	f8ad 4018 	strh.w	r4, [sp, #24]
 8018e5a:	9504      	str	r5, [sp, #16]
 8018e5c:	f8ad 901a 	strh.w	r9, [sp, #26]
 8018e60:	f8cd a00c 	str.w	sl, [sp, #12]
 8018e64:	f8ad 401c 	strh.w	r4, [sp, #28]
 8018e68:	f88d 401e 	strb.w	r4, [sp, #30]
 8018e6c:	f88d 401f 	strb.w	r4, [sp, #31]
 8018e70:	f1b8 0f00 	cmp.w	r8, #0
 8018e74:	d000      	beq.n	8018e78 <_ZN8touchgfx3HAL12blitFillWordEtttttt+0x5c>
 8018e76:	b937      	cbnz	r7, 8018e86 <_ZN8touchgfx3HAL12blitFillWordEtttttt+0x6a>
 8018e78:	4b0d      	ldr	r3, [pc, #52]	@ (8018eb0 <_ZN8touchgfx3HAL12blitFillWordEtttttt+0x94>)
 8018e7a:	f240 2121 	movw	r1, #545	@ 0x221
 8018e7e:	4a0d      	ldr	r2, [pc, #52]	@ (8018eb4 <_ZN8touchgfx3HAL12blitFillWordEtttttt+0x98>)
 8018e80:	480d      	ldr	r0, [pc, #52]	@ (8018eb8 <_ZN8touchgfx3HAL12blitFillWordEtttttt+0x9c>)
 8018e82:	f011 fedf 	bl	802ac44 <__assert_func>
 8018e86:	6833      	ldr	r3, [r6, #0]
 8018e88:	4630      	mov	r0, r6
 8018e8a:	9c00      	ldr	r4, [sp, #0]
 8018e8c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8018e8e:	4798      	blx	r3
 8018e90:	4220      	tst	r0, r4
 8018e92:	d104      	bne.n	8018e9e <_ZN8touchgfx3HAL12blitFillWordEtttttt+0x82>
 8018e94:	4b09      	ldr	r3, [pc, #36]	@ (8018ebc <_ZN8touchgfx3HAL12blitFillWordEtttttt+0xa0>)
 8018e96:	f240 2122 	movw	r1, #546	@ 0x222
 8018e9a:	4a06      	ldr	r2, [pc, #24]	@ (8018eb4 <_ZN8touchgfx3HAL12blitFillWordEtttttt+0x98>)
 8018e9c:	e7f0      	b.n	8018e80 <_ZN8touchgfx3HAL12blitFillWordEtttttt+0x64>
 8018e9e:	6870      	ldr	r0, [r6, #4]
 8018ea0:	4669      	mov	r1, sp
 8018ea2:	6803      	ldr	r3, [r0, #0]
 8018ea4:	685b      	ldr	r3, [r3, #4]
 8018ea6:	4798      	blx	r3
 8018ea8:	b009      	add	sp, #36	@ 0x24
 8018eaa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8018eae:	bf00      	nop
 8018eb0:	0802e192 	.word	0x0802e192
 8018eb4:	0802e4be 	.word	0x0802e4be
 8018eb8:	0802e2c7 	.word	0x0802e2c7
 8018ebc:	0802e1ca 	.word	0x0802e1ca

08018ec0 <_ZNK8touchgfx3HAL11getBitDepthENS_6Bitmap12BitmapFormatE>:
 8018ec0:	b508      	push	{r3, lr}
 8018ec2:	290d      	cmp	r1, #13
 8018ec4:	d817      	bhi.n	8018ef6 <_ZNK8touchgfx3HAL11getBitDepthENS_6Bitmap12BitmapFormatE+0x36>
 8018ec6:	e8df f001 	tbb	[pc, r1]
 8018eca:	090b      	.short	0x090b
 8018ecc:	0d0d0d07 	.word	0x0d0d0d07
 8018ed0:	1414140d 	.word	0x1414140d
 8018ed4:	0d0d1414 	.word	0x0d0d1414
 8018ed8:	2020      	movs	r0, #32
 8018eda:	bd08      	pop	{r3, pc}
 8018edc:	2018      	movs	r0, #24
 8018ede:	e7fc      	b.n	8018eda <_ZNK8touchgfx3HAL11getBitDepthENS_6Bitmap12BitmapFormatE+0x1a>
 8018ee0:	2010      	movs	r0, #16
 8018ee2:	e7fa      	b.n	8018eda <_ZNK8touchgfx3HAL11getBitDepthENS_6Bitmap12BitmapFormatE+0x1a>
 8018ee4:	4b05      	ldr	r3, [pc, #20]	@ (8018efc <_ZNK8touchgfx3HAL11getBitDepthENS_6Bitmap12BitmapFormatE+0x3c>)
 8018ee6:	f240 2182 	movw	r1, #642	@ 0x282
 8018eea:	4a05      	ldr	r2, [pc, #20]	@ (8018f00 <_ZNK8touchgfx3HAL11getBitDepthENS_6Bitmap12BitmapFormatE+0x40>)
 8018eec:	4805      	ldr	r0, [pc, #20]	@ (8018f04 <_ZNK8touchgfx3HAL11getBitDepthENS_6Bitmap12BitmapFormatE+0x44>)
 8018eee:	f011 fea9 	bl	802ac44 <__assert_func>
 8018ef2:	2008      	movs	r0, #8
 8018ef4:	e7f1      	b.n	8018eda <_ZNK8touchgfx3HAL11getBitDepthENS_6Bitmap12BitmapFormatE+0x1a>
 8018ef6:	2000      	movs	r0, #0
 8018ef8:	e7ef      	b.n	8018eda <_ZNK8touchgfx3HAL11getBitDepthENS_6Bitmap12BitmapFormatE+0x1a>
 8018efa:	bf00      	nop
 8018efc:	0802e343 	.word	0x0802e343
 8018f00:	0802e7e9 	.word	0x0802e7e9
 8018f04:	0802e2c7 	.word	0x0802e2c7

08018f08 <_ZNK8touchgfx3HAL13getDstAddressEttPttNS_6Bitmap12BitmapFormatE>:
 8018f08:	b570      	push	{r4, r5, r6, lr}
 8018f0a:	460d      	mov	r5, r1
 8018f0c:	f89d 1014 	ldrb.w	r1, [sp, #20]
 8018f10:	4616      	mov	r6, r2
 8018f12:	461c      	mov	r4, r3
 8018f14:	f7ff ffd4 	bl	8018ec0 <_ZNK8touchgfx3HAL11getBitDepthENS_6Bitmap12BitmapFormatE>
 8018f18:	f8bd 1010 	ldrh.w	r1, [sp, #16]
 8018f1c:	10c0      	asrs	r0, r0, #3
 8018f1e:	fb06 5101 	mla	r1, r6, r1, r5
 8018f22:	fb00 4001 	mla	r0, r0, r1, r4
 8018f26:	bd70      	pop	{r4, r5, r6, pc}

08018f28 <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_b>:
 8018f28:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8018f2c:	b08a      	sub	sp, #40	@ 0x28
 8018f2e:	f04f 0c00 	mov.w	ip, #0
 8018f32:	4604      	mov	r4, r0
 8018f34:	469a      	mov	sl, r3
 8018f36:	f89d 5064 	ldrb.w	r5, [sp, #100]	@ 0x64
 8018f3a:	f8bd 704c 	ldrh.w	r7, [sp, #76]	@ 0x4c
 8018f3e:	2d0b      	cmp	r5, #11
 8018f40:	f8bd 6050 	ldrh.w	r6, [sp, #80]	@ 0x50
 8018f44:	f89d 3058 	ldrb.w	r3, [sp, #88]	@ 0x58
 8018f48:	f89d 005c 	ldrb.w	r0, [sp, #92]	@ 0x5c
 8018f4c:	f8bd 9060 	ldrh.w	r9, [sp, #96]	@ 0x60
 8018f50:	f89d 8068 	ldrb.w	r8, [sp, #104]	@ 0x68
 8018f54:	f8cd c014 	str.w	ip, [sp, #20]
 8018f58:	d12d      	bne.n	8018fb6 <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_b+0x8e>
 8018f5a:	2080      	movs	r0, #128	@ 0x80
 8018f5c:	9204      	str	r2, [sp, #16]
 8018f5e:	f8bd 2054 	ldrh.w	r2, [sp, #84]	@ 0x54
 8018f62:	f88d 3024 	strb.w	r3, [sp, #36]	@ 0x24
 8018f66:	f8ad 2020 	strh.w	r2, [sp, #32]
 8018f6a:	f8ad 701c 	strh.w	r7, [sp, #28]
 8018f6e:	f8ad 601e 	strh.w	r6, [sp, #30]
 8018f72:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8018f76:	4620      	mov	r0, r4
 8018f78:	f7ff feec 	bl	8018d54 <_ZN8touchgfx3HAL20getClientFrameBufferEv>
 8018f7c:	f8bd 2048 	ldrh.w	r2, [sp, #72]	@ 0x48
 8018f80:	4603      	mov	r3, r0
 8018f82:	4651      	mov	r1, sl
 8018f84:	4620      	mov	r0, r4
 8018f86:	e9cd 9800 	strd	r9, r8, [sp]
 8018f8a:	f7ff ffbd 	bl	8018f08 <_ZNK8touchgfx3HAL13getDstAddressEttPttNS_6Bitmap12BitmapFormatE>
 8018f8e:	f89d 306c 	ldrb.w	r3, [sp, #108]	@ 0x6c
 8018f92:	9006      	str	r0, [sp, #24]
 8018f94:	f8ad 9022 	strh.w	r9, [sp, #34]	@ 0x22
 8018f98:	f88d 5025 	strb.w	r5, [sp, #37]	@ 0x25
 8018f9c:	f88d 8026 	strb.w	r8, [sp, #38]	@ 0x26
 8018fa0:	f88d 3027 	strb.w	r3, [sp, #39]	@ 0x27
 8018fa4:	b107      	cbz	r7, 8018fa8 <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_b+0x80>
 8018fa6:	b9d6      	cbnz	r6, 8018fde <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_b+0xb6>
 8018fa8:	4b17      	ldr	r3, [pc, #92]	@ (8019008 <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_b+0xe0>)
 8018faa:	f44f 71ea 	mov.w	r1, #468	@ 0x1d4
 8018fae:	4a17      	ldr	r2, [pc, #92]	@ (801900c <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_b+0xe4>)
 8018fb0:	4817      	ldr	r0, [pc, #92]	@ (8019010 <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_b+0xe8>)
 8018fb2:	f011 fe47 	bl	802ac44 <__assert_func>
 8018fb6:	2d02      	cmp	r5, #2
 8018fb8:	d108      	bne.n	8018fcc <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_b+0xa4>
 8018fba:	2bff      	cmp	r3, #255	@ 0xff
 8018fbc:	d104      	bne.n	8018fc8 <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_b+0xa0>
 8018fbe:	2800      	cmp	r0, #0
 8018fc0:	bf14      	ite	ne
 8018fc2:	2040      	movne	r0, #64	@ 0x40
 8018fc4:	2020      	moveq	r0, #32
 8018fc6:	e7c9      	b.n	8018f5c <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_b+0x34>
 8018fc8:	2040      	movs	r0, #64	@ 0x40
 8018fca:	e7c7      	b.n	8018f5c <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_b+0x34>
 8018fcc:	2bff      	cmp	r3, #255	@ 0xff
 8018fce:	d104      	bne.n	8018fda <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_b+0xb2>
 8018fd0:	2800      	cmp	r0, #0
 8018fd2:	bf14      	ite	ne
 8018fd4:	2004      	movne	r0, #4
 8018fd6:	2001      	moveq	r0, #1
 8018fd8:	e7c0      	b.n	8018f5c <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_b+0x34>
 8018fda:	2004      	movs	r0, #4
 8018fdc:	e7be      	b.n	8018f5c <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_b+0x34>
 8018fde:	6823      	ldr	r3, [r4, #0]
 8018fe0:	4620      	mov	r0, r4
 8018fe2:	9d02      	ldr	r5, [sp, #8]
 8018fe4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8018fe6:	4798      	blx	r3
 8018fe8:	4228      	tst	r0, r5
 8018fea:	d104      	bne.n	8018ff6 <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_b+0xce>
 8018fec:	4b09      	ldr	r3, [pc, #36]	@ (8019014 <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_b+0xec>)
 8018fee:	f240 11d5 	movw	r1, #469	@ 0x1d5
 8018ff2:	4a06      	ldr	r2, [pc, #24]	@ (801900c <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_b+0xe4>)
 8018ff4:	e7dc      	b.n	8018fb0 <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_b+0x88>
 8018ff6:	6860      	ldr	r0, [r4, #4]
 8018ff8:	a902      	add	r1, sp, #8
 8018ffa:	6803      	ldr	r3, [r0, #0]
 8018ffc:	685b      	ldr	r3, [r3, #4]
 8018ffe:	4798      	blx	r3
 8019000:	b00a      	add	sp, #40	@ 0x28
 8019002:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8019006:	bf00      	nop
 8019008:	0802e115 	.word	0x0802e115
 801900c:	0802e677 	.word	0x0802e677
 8019010:	0802e2c7 	.word	0x0802e2c7
 8019014:	0802e14d 	.word	0x0802e14d

08019018 <_ZN8touchgfx3HAL8blitFillENS_9colortypeEtttthtNS_6Bitmap12BitmapFormatEb>:
 8019018:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801901c:	b08b      	sub	sp, #44	@ 0x2c
 801901e:	469b      	mov	fp, r3
 8019020:	4604      	mov	r4, r0
 8019022:	4692      	mov	sl, r2
 8019024:	f89d 7058 	ldrb.w	r7, [sp, #88]	@ 0x58
 8019028:	2600      	movs	r6, #0
 801902a:	f89d 5060 	ldrb.w	r5, [sp, #96]	@ 0x60
 801902e:	4689      	mov	r9, r1
 8019030:	2fff      	cmp	r7, #255	@ 0xff
 8019032:	f8bd 805c 	ldrh.w	r8, [sp, #92]	@ 0x5c
 8019036:	9605      	str	r6, [sp, #20]
 8019038:	bf14      	ite	ne
 801903a:	2308      	movne	r3, #8
 801903c:	2302      	moveq	r3, #2
 801903e:	e9cd 3602 	strd	r3, r6, [sp, #8]
 8019042:	f7ff fe87 	bl	8018d54 <_ZN8touchgfx3HAL20getClientFrameBufferEv>
 8019046:	465a      	mov	r2, fp
 8019048:	4603      	mov	r3, r0
 801904a:	4651      	mov	r1, sl
 801904c:	4620      	mov	r0, r4
 801904e:	e9cd 8500 	strd	r8, r5, [sp]
 8019052:	f7ff ff59 	bl	8018f08 <_ZNK8touchgfx3HAL13getDstAddressEttPttNS_6Bitmap12BitmapFormatE>
 8019056:	f8bd 3050 	ldrh.w	r3, [sp, #80]	@ 0x50
 801905a:	f88d 5025 	strb.w	r5, [sp, #37]	@ 0x25
 801905e:	f8ad 301c 	strh.w	r3, [sp, #28]
 8019062:	f8bd 3054 	ldrh.w	r3, [sp, #84]	@ 0x54
 8019066:	f88d 5026 	strb.w	r5, [sp, #38]	@ 0x26
 801906a:	f8ad 301e 	strh.w	r3, [sp, #30]
 801906e:	f89d 3064 	ldrb.w	r3, [sp, #100]	@ 0x64
 8019072:	9d02      	ldr	r5, [sp, #8]
 8019074:	f88d 3027 	strb.w	r3, [sp, #39]	@ 0x27
 8019078:	6823      	ldr	r3, [r4, #0]
 801907a:	9006      	str	r0, [sp, #24]
 801907c:	4620      	mov	r0, r4
 801907e:	f8ad 6020 	strh.w	r6, [sp, #32]
 8019082:	f8ad 8022 	strh.w	r8, [sp, #34]	@ 0x22
 8019086:	f8cd 9014 	str.w	r9, [sp, #20]
 801908a:	f88d 7024 	strb.w	r7, [sp, #36]	@ 0x24
 801908e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8019090:	4798      	blx	r3
 8019092:	4228      	tst	r0, r5
 8019094:	d106      	bne.n	80190a4 <_ZN8touchgfx3HAL8blitFillENS_9colortypeEtttthtNS_6Bitmap12BitmapFormatEb+0x8c>
 8019096:	4b07      	ldr	r3, [pc, #28]	@ (80190b4 <_ZN8touchgfx3HAL8blitFillENS_9colortypeEtttthtNS_6Bitmap12BitmapFormatEb+0x9c>)
 8019098:	f240 2137 	movw	r1, #567	@ 0x237
 801909c:	4a06      	ldr	r2, [pc, #24]	@ (80190b8 <_ZN8touchgfx3HAL8blitFillENS_9colortypeEtttthtNS_6Bitmap12BitmapFormatEb+0xa0>)
 801909e:	4807      	ldr	r0, [pc, #28]	@ (80190bc <_ZN8touchgfx3HAL8blitFillENS_9colortypeEtttthtNS_6Bitmap12BitmapFormatEb+0xa4>)
 80190a0:	f011 fdd0 	bl	802ac44 <__assert_func>
 80190a4:	6860      	ldr	r0, [r4, #4]
 80190a6:	a902      	add	r1, sp, #8
 80190a8:	6803      	ldr	r3, [r0, #0]
 80190aa:	685b      	ldr	r3, [r3, #4]
 80190ac:	4798      	blx	r3
 80190ae:	b00b      	add	sp, #44	@ 0x2c
 80190b0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80190b4:	0802e14d 	.word	0x0802e14d
 80190b8:	0802e74e 	.word	0x0802e74e
 80190bc:	0802e2c7 	.word	0x0802e2c7

080190c0 <_ZNK8touchgfx3HAL13getDstAddressEttPt>:
 80190c0:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 80190c4:	461f      	mov	r7, r3
 80190c6:	4b0b      	ldr	r3, [pc, #44]	@ (80190f4 <_ZNK8touchgfx3HAL13getDstAddressEttPt+0x34>)
 80190c8:	460d      	mov	r5, r1
 80190ca:	4616      	mov	r6, r2
 80190cc:	f8b3 8000 	ldrh.w	r8, [r3]
 80190d0:	4604      	mov	r4, r0
 80190d2:	f7eb f845 	bl	8004160 <_ZN8touchgfx3HAL3lcdEv>
 80190d6:	6803      	ldr	r3, [r0, #0]
 80190d8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80190da:	4798      	blx	r3
 80190dc:	463b      	mov	r3, r7
 80190de:	4632      	mov	r2, r6
 80190e0:	4629      	mov	r1, r5
 80190e2:	e9cd 8000 	strd	r8, r0, [sp]
 80190e6:	4620      	mov	r0, r4
 80190e8:	f7ff ff0e 	bl	8018f08 <_ZNK8touchgfx3HAL13getDstAddressEttPttNS_6Bitmap12BitmapFormatE>
 80190ec:	b002      	add	sp, #8
 80190ee:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80190f2:	bf00      	nop
 80190f4:	2400b87e 	.word	0x2400b87e

080190f8 <_ZN8touchgfx3HAL13blitCopyGlyphEPKhtttttNS_9colortypeEhNS_14BlitOperationsEb>:
 80190f8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80190fc:	4698      	mov	r8, r3
 80190fe:	b088      	sub	sp, #32
 8019100:	2300      	movs	r3, #0
 8019102:	4617      	mov	r7, r2
 8019104:	4604      	mov	r4, r0
 8019106:	f8bd 6038 	ldrh.w	r6, [sp, #56]	@ 0x38
 801910a:	9303      	str	r3, [sp, #12]
 801910c:	f8bd 304c 	ldrh.w	r3, [sp, #76]	@ 0x4c
 8019110:	f8bd 503c 	ldrh.w	r5, [sp, #60]	@ 0x3c
 8019114:	f8ad 6014 	strh.w	r6, [sp, #20]
 8019118:	f8ad 5016 	strh.w	r5, [sp, #22]
 801911c:	e9cd 3100 	strd	r3, r1, [sp]
 8019120:	f8bd 3040 	ldrh.w	r3, [sp, #64]	@ 0x40
 8019124:	f8ad 3018 	strh.w	r3, [sp, #24]
 8019128:	f89d 3048 	ldrb.w	r3, [sp, #72]	@ 0x48
 801912c:	f88d 301c 	strb.w	r3, [sp, #28]
 8019130:	f7ff fe10 	bl	8018d54 <_ZN8touchgfx3HAL20getClientFrameBufferEv>
 8019134:	4642      	mov	r2, r8
 8019136:	4603      	mov	r3, r0
 8019138:	4639      	mov	r1, r7
 801913a:	4620      	mov	r0, r4
 801913c:	f7ff ffc0 	bl	80190c0 <_ZNK8touchgfx3HAL13getDstAddressEttPt>
 8019140:	4b18      	ldr	r3, [pc, #96]	@ (80191a4 <_ZN8touchgfx3HAL13blitCopyGlyphEPKhtttttNS_9colortypeEhNS_14BlitOperationsEb+0xac>)
 8019142:	9004      	str	r0, [sp, #16]
 8019144:	881b      	ldrh	r3, [r3, #0]
 8019146:	f8ad 301a 	strh.w	r3, [sp, #26]
 801914a:	f7eb f809 	bl	8004160 <_ZN8touchgfx3HAL3lcdEv>
 801914e:	6803      	ldr	r3, [r0, #0]
 8019150:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8019152:	4798      	blx	r3
 8019154:	f88d 001e 	strb.w	r0, [sp, #30]
 8019158:	f88d 001d 	strb.w	r0, [sp, #29]
 801915c:	b106      	cbz	r6, 8019160 <_ZN8touchgfx3HAL13blitCopyGlyphEPKhtttttNS_9colortypeEhNS_14BlitOperationsEb+0x68>
 801915e:	b935      	cbnz	r5, 801916e <_ZN8touchgfx3HAL13blitCopyGlyphEPKhtttttNS_9colortypeEhNS_14BlitOperationsEb+0x76>
 8019160:	4b11      	ldr	r3, [pc, #68]	@ (80191a8 <_ZN8touchgfx3HAL13blitCopyGlyphEPKhtttttNS_9colortypeEhNS_14BlitOperationsEb+0xb0>)
 8019162:	f240 11f1 	movw	r1, #497	@ 0x1f1
 8019166:	4a11      	ldr	r2, [pc, #68]	@ (80191ac <_ZN8touchgfx3HAL13blitCopyGlyphEPKhtttttNS_9colortypeEhNS_14BlitOperationsEb+0xb4>)
 8019168:	4811      	ldr	r0, [pc, #68]	@ (80191b0 <_ZN8touchgfx3HAL13blitCopyGlyphEPKhtttttNS_9colortypeEhNS_14BlitOperationsEb+0xb8>)
 801916a:	f011 fd6b 	bl	802ac44 <__assert_func>
 801916e:	6823      	ldr	r3, [r4, #0]
 8019170:	4620      	mov	r0, r4
 8019172:	9d00      	ldr	r5, [sp, #0]
 8019174:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8019176:	4798      	blx	r3
 8019178:	4228      	tst	r0, r5
 801917a:	d104      	bne.n	8019186 <_ZN8touchgfx3HAL13blitCopyGlyphEPKhtttttNS_9colortypeEhNS_14BlitOperationsEb+0x8e>
 801917c:	4b0d      	ldr	r3, [pc, #52]	@ (80191b4 <_ZN8touchgfx3HAL13blitCopyGlyphEPKhtttttNS_9colortypeEhNS_14BlitOperationsEb+0xbc>)
 801917e:	f44f 71f9 	mov.w	r1, #498	@ 0x1f2
 8019182:	4a0a      	ldr	r2, [pc, #40]	@ (80191ac <_ZN8touchgfx3HAL13blitCopyGlyphEPKhtttttNS_9colortypeEhNS_14BlitOperationsEb+0xb4>)
 8019184:	e7f0      	b.n	8019168 <_ZN8touchgfx3HAL13blitCopyGlyphEPKhtttttNS_9colortypeEhNS_14BlitOperationsEb+0x70>
 8019186:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 8019188:	4669      	mov	r1, sp
 801918a:	6860      	ldr	r0, [r4, #4]
 801918c:	9303      	str	r3, [sp, #12]
 801918e:	f89d 3050 	ldrb.w	r3, [sp, #80]	@ 0x50
 8019192:	f88d 301f 	strb.w	r3, [sp, #31]
 8019196:	6803      	ldr	r3, [r0, #0]
 8019198:	685b      	ldr	r3, [r3, #4]
 801919a:	4798      	blx	r3
 801919c:	b008      	add	sp, #32
 801919e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80191a2:	bf00      	nop
 80191a4:	2400b87e 	.word	0x2400b87e
 80191a8:	0802e115 	.word	0x0802e115
 80191ac:	0802e523 	.word	0x0802e523
 80191b0:	0802e2c7 	.word	0x0802e2c7
 80191b4:	0802e14d 	.word	0x0802e14d

080191b8 <_ZN8touchgfx3HAL20copyFBRegionToMemoryENS_4RectE>:
 80191b8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80191ba:	b08b      	sub	sp, #44	@ 0x2c
 80191bc:	4604      	mov	r4, r0
 80191be:	466b      	mov	r3, sp
 80191c0:	e883 0006 	stmia.w	r3, {r1, r2}
 80191c4:	4b20      	ldr	r3, [pc, #128]	@ (8019248 <_ZN8touchgfx3HAL20copyFBRegionToMemoryENS_4RectE+0x90>)
 80191c6:	781b      	ldrb	r3, [r3, #0]
 80191c8:	b933      	cbnz	r3, 80191d8 <_ZN8touchgfx3HAL20copyFBRegionToMemoryENS_4RectE+0x20>
 80191ca:	4b20      	ldr	r3, [pc, #128]	@ (801924c <_ZN8touchgfx3HAL20copyFBRegionToMemoryENS_4RectE+0x94>)
 80191cc:	f44f 7112 	mov.w	r1, #584	@ 0x248
 80191d0:	4a1f      	ldr	r2, [pc, #124]	@ (8019250 <_ZN8touchgfx3HAL20copyFBRegionToMemoryENS_4RectE+0x98>)
 80191d2:	4820      	ldr	r0, [pc, #128]	@ (8019254 <_ZN8touchgfx3HAL20copyFBRegionToMemoryENS_4RectE+0x9c>)
 80191d4:	f011 fd36 	bl	802ac44 <__assert_func>
 80191d8:	2301      	movs	r3, #1
 80191da:	2500      	movs	r5, #0
 80191dc:	f8bd 6000 	ldrh.w	r6, [sp]
 80191e0:	9302      	str	r3, [sp, #8]
 80191e2:	6803      	ldr	r3, [r0, #0]
 80191e4:	f8bd 7002 	ldrh.w	r7, [sp, #2]
 80191e8:	9505      	str	r5, [sp, #20]
 80191ea:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80191ec:	4798      	blx	r3
 80191ee:	463a      	mov	r2, r7
 80191f0:	4631      	mov	r1, r6
 80191f2:	4603      	mov	r3, r0
 80191f4:	4620      	mov	r0, r4
 80191f6:	f7ff ff63 	bl	80190c0 <_ZNK8touchgfx3HAL13getDstAddressEttPt>
 80191fa:	6c63      	ldr	r3, [r4, #68]	@ 0x44
 80191fc:	9003      	str	r0, [sp, #12]
 80191fe:	9306      	str	r3, [sp, #24]
 8019200:	f8bd 3004 	ldrh.w	r3, [sp, #4]
 8019204:	f8ad 301c 	strh.w	r3, [sp, #28]
 8019208:	f8bd 3006 	ldrh.w	r3, [sp, #6]
 801920c:	f8ad 301e 	strh.w	r3, [sp, #30]
 8019210:	4b11      	ldr	r3, [pc, #68]	@ (8019258 <_ZN8touchgfx3HAL20copyFBRegionToMemoryENS_4RectE+0xa0>)
 8019212:	881b      	ldrh	r3, [r3, #0]
 8019214:	f8ad 3020 	strh.w	r3, [sp, #32]
 8019218:	f8ad 3022 	strh.w	r3, [sp, #34]	@ 0x22
 801921c:	f7ea ffa0 	bl	8004160 <_ZN8touchgfx3HAL3lcdEv>
 8019220:	6803      	ldr	r3, [r0, #0]
 8019222:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8019224:	4798      	blx	r3
 8019226:	23ff      	movs	r3, #255	@ 0xff
 8019228:	f88d 0025 	strb.w	r0, [sp, #37]	@ 0x25
 801922c:	a902      	add	r1, sp, #8
 801922e:	f88d 0026 	strb.w	r0, [sp, #38]	@ 0x26
 8019232:	6860      	ldr	r0, [r4, #4]
 8019234:	f88d 3024 	strb.w	r3, [sp, #36]	@ 0x24
 8019238:	f88d 5027 	strb.w	r5, [sp, #39]	@ 0x27
 801923c:	6803      	ldr	r3, [r0, #0]
 801923e:	685b      	ldr	r3, [r3, #4]
 8019240:	4798      	blx	r3
 8019242:	6c60      	ldr	r0, [r4, #68]	@ 0x44
 8019244:	b00b      	add	sp, #44	@ 0x2c
 8019246:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8019248:	2400b883 	.word	0x2400b883
 801924c:	0802e214 	.word	0x0802e214
 8019250:	0802e5cd 	.word	0x0802e5cd
 8019254:	0802e2c7 	.word	0x0802e2c7
 8019258:	2400b87e 	.word	0x2400b87e

0801925c <_ZN8touchgfx3HAL20copyFBRegionToMemoryENS_4RectEPtm>:
 801925c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8019260:	b08a      	sub	sp, #40	@ 0x28
 8019262:	2600      	movs	r6, #0
 8019264:	4604      	mov	r4, r0
 8019266:	466d      	mov	r5, sp
 8019268:	9605      	str	r6, [sp, #20]
 801926a:	e885 0006 	stmia.w	r5, {r1, r2}
 801926e:	461d      	mov	r5, r3
 8019270:	2301      	movs	r3, #1
 8019272:	f8bd 7000 	ldrh.w	r7, [sp]
 8019276:	9302      	str	r3, [sp, #8]
 8019278:	6803      	ldr	r3, [r0, #0]
 801927a:	f8bd 8002 	ldrh.w	r8, [sp, #2]
 801927e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8019280:	4798      	blx	r3
 8019282:	4642      	mov	r2, r8
 8019284:	4639      	mov	r1, r7
 8019286:	4603      	mov	r3, r0
 8019288:	4620      	mov	r0, r4
 801928a:	f7ff ff19 	bl	80190c0 <_ZNK8touchgfx3HAL13getDstAddressEttPt>
 801928e:	f8bd 3004 	ldrh.w	r3, [sp, #4]
 8019292:	9003      	str	r0, [sp, #12]
 8019294:	f8ad 301c 	strh.w	r3, [sp, #28]
 8019298:	f8bd 3006 	ldrh.w	r3, [sp, #6]
 801929c:	9506      	str	r5, [sp, #24]
 801929e:	f8ad 301e 	strh.w	r3, [sp, #30]
 80192a2:	4b0f      	ldr	r3, [pc, #60]	@ (80192e0 <_ZN8touchgfx3HAL20copyFBRegionToMemoryENS_4RectEPtm+0x84>)
 80192a4:	881b      	ldrh	r3, [r3, #0]
 80192a6:	f8ad 3020 	strh.w	r3, [sp, #32]
 80192aa:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 80192ac:	f8ad 3022 	strh.w	r3, [sp, #34]	@ 0x22
 80192b0:	f7ea ff56 	bl	8004160 <_ZN8touchgfx3HAL3lcdEv>
 80192b4:	6803      	ldr	r3, [r0, #0]
 80192b6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80192b8:	4798      	blx	r3
 80192ba:	23ff      	movs	r3, #255	@ 0xff
 80192bc:	f88d 0025 	strb.w	r0, [sp, #37]	@ 0x25
 80192c0:	a902      	add	r1, sp, #8
 80192c2:	f88d 0026 	strb.w	r0, [sp, #38]	@ 0x26
 80192c6:	6860      	ldr	r0, [r4, #4]
 80192c8:	f88d 3024 	strb.w	r3, [sp, #36]	@ 0x24
 80192cc:	f88d 6027 	strb.w	r6, [sp, #39]	@ 0x27
 80192d0:	6803      	ldr	r3, [r0, #0]
 80192d2:	685b      	ldr	r3, [r3, #4]
 80192d4:	4798      	blx	r3
 80192d6:	4628      	mov	r0, r5
 80192d8:	b00a      	add	sp, #40	@ 0x28
 80192da:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80192de:	bf00      	nop
 80192e0:	2400b87e 	.word	0x2400b87e

080192e4 <_ZN8touchgfx3HAL16swapFrameBuffersEv>:
 80192e4:	b570      	push	{r4, r5, r6, lr}
 80192e6:	f890 306a 	ldrb.w	r3, [r0, #106]	@ 0x6a
 80192ea:	4604      	mov	r4, r0
 80192ec:	b19b      	cbz	r3, 8019316 <_ZN8touchgfx3HAL16swapFrameBuffersEv+0x32>
 80192ee:	2002      	movs	r0, #2
 80192f0:	f7e8 fb30 	bl	8001954 <_ZN8touchgfx4GPIO6toggleENS0_7GPIO_IDE>
 80192f4:	2300      	movs	r3, #0
 80192f6:	4620      	mov	r0, r4
 80192f8:	f884 306a 	strb.w	r3, [r4, #106]	@ 0x6a
 80192fc:	f884 3069 	strb.w	r3, [r4, #105]	@ 0x69
 8019300:	6823      	ldr	r3, [r4, #0]
 8019302:	f8d3 50b0 	ldr.w	r5, [r3, #176]	@ 0xb0
 8019306:	f7ff fd25 	bl	8018d54 <_ZN8touchgfx3HAL20getClientFrameBufferEv>
 801930a:	4601      	mov	r1, r0
 801930c:	4620      	mov	r0, r4
 801930e:	462b      	mov	r3, r5
 8019310:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8019314:	4718      	bx	r3
 8019316:	bd70      	pop	{r4, r5, r6, pc}

08019318 <_ZN8touchgfx3HAL18setRenderingMethodENS0_15RenderingMethodE>:
 8019318:	b538      	push	{r3, r4, r5, lr}
 801931a:	f890 2078 	ldrb.w	r2, [r0, #120]	@ 0x78
 801931e:	4604      	mov	r4, r0
 8019320:	460d      	mov	r5, r1
 8019322:	428a      	cmp	r2, r1
 8019324:	d008      	beq.n	8019338 <_ZN8touchgfx3HAL18setRenderingMethodENS0_15RenderingMethodE+0x20>
 8019326:	2a01      	cmp	r2, #1
 8019328:	6803      	ldr	r3, [r0, #0]
 801932a:	d106      	bne.n	801933a <_ZN8touchgfx3HAL18setRenderingMethodENS0_15RenderingMethodE+0x22>
 801932c:	b929      	cbnz	r1, 801933a <_ZN8touchgfx3HAL18setRenderingMethodENS0_15RenderingMethodE+0x22>
 801932e:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 8019332:	4798      	blx	r3
 8019334:	f884 5078 	strb.w	r5, [r4, #120]	@ 0x78
 8019338:	bd38      	pop	{r3, r4, r5, pc}
 801933a:	f8d3 30c4 	ldr.w	r3, [r3, #196]	@ 0xc4
 801933e:	4620      	mov	r0, r4
 8019340:	e7f7      	b.n	8019332 <_ZN8touchgfx3HAL18setRenderingMethodENS0_15RenderingMethodE+0x1a>
	...

08019344 <_ZN8touchgfx3HAL15lockFrameBufferEv>:
 8019344:	4b0d      	ldr	r3, [pc, #52]	@ (801937c <_ZN8touchgfx3HAL15lockFrameBufferEv+0x38>)
 8019346:	b510      	push	{r4, lr}
 8019348:	781b      	ldrb	r3, [r3, #0]
 801934a:	4604      	mov	r4, r0
 801934c:	b95b      	cbnz	r3, 8019366 <_ZN8touchgfx3HAL15lockFrameBufferEv+0x22>
 801934e:	f890 3048 	ldrb.w	r3, [r0, #72]	@ 0x48
 8019352:	2b02      	cmp	r3, #2
 8019354:	d007      	beq.n	8019366 <_ZN8touchgfx3HAL15lockFrameBufferEv+0x22>
 8019356:	6840      	ldr	r0, [r0, #4]
 8019358:	f000 f936 	bl	80195c8 <_ZN8touchgfx13DMA_Interface15isDmaQueueEmptyEv>
 801935c:	b118      	cbz	r0, 8019366 <_ZN8touchgfx3HAL15lockFrameBufferEv+0x22>
 801935e:	6862      	ldr	r2, [r4, #4]
 8019360:	7a53      	ldrb	r3, [r2, #9]
 8019362:	2b00      	cmp	r3, #0
 8019364:	d0fc      	beq.n	8019360 <_ZN8touchgfx3HAL15lockFrameBufferEv+0x1c>
 8019366:	f7e8 fdb3 	bl	8001ed0 <_ZN8touchgfx10OSWrappers24takeFrameBufferSemaphoreEv>
 801936a:	4620      	mov	r0, r4
 801936c:	2100      	movs	r1, #0
 801936e:	f7ff ffd3 	bl	8019318 <_ZN8touchgfx3HAL18setRenderingMethodENS0_15RenderingMethodE>
 8019372:	4620      	mov	r0, r4
 8019374:	f7ff fcee 	bl	8018d54 <_ZN8touchgfx3HAL20getClientFrameBufferEv>
 8019378:	bd10      	pop	{r4, pc}
 801937a:	bf00      	nop
 801937c:	2400b882 	.word	0x2400b882

08019380 <_ZN8touchgfx13DMA_Interface10initializeEv>:
 8019380:	4770      	bx	lr

08019382 <_ZN8touchgfx13DMA_Interface10getDMATypeEv>:
 8019382:	2000      	movs	r0, #0
 8019384:	4770      	bx	lr

08019386 <_ZN8touchgfx17LockFreeDMA_Queue7isEmptyEv>:
 8019386:	e9d0 2003 	ldrd	r2, r0, [r0, #12]
 801938a:	1a13      	subs	r3, r2, r0
 801938c:	4258      	negs	r0, r3
 801938e:	4158      	adcs	r0, r3
 8019390:	4770      	bx	lr

08019392 <_ZN8touchgfx17LockFreeDMA_Queue6isFullEv>:
 8019392:	e9d0 2303 	ldrd	r2, r3, [r0, #12]
 8019396:	1a9b      	subs	r3, r3, r2
 8019398:	2b00      	cmp	r3, #0
 801939a:	bfdc      	itt	le
 801939c:	6882      	ldrle	r2, [r0, #8]
 801939e:	189b      	addle	r3, r3, r2
 80193a0:	2b01      	cmp	r3, #1
 80193a2:	bfcc      	ite	gt
 80193a4:	2000      	movgt	r0, #0
 80193a6:	2001      	movle	r0, #1
 80193a8:	4770      	bx	lr

080193aa <_ZN8touchgfx17LockFreeDMA_Queue5firstEv>:
 80193aa:	6902      	ldr	r2, [r0, #16]
 80193ac:	6840      	ldr	r0, [r0, #4]
 80193ae:	eb00 1042 	add.w	r0, r0, r2, lsl #5
 80193b2:	4770      	bx	lr

080193b4 <_ZN8touchgfx13DMA_Interface13seedExecutionEv>:
 80193b4:	6803      	ldr	r3, [r0, #0]
 80193b6:	691b      	ldr	r3, [r3, #16]
 80193b8:	4718      	bx	r3

080193ba <_ZN8touchgfx13DMA_Interface11enableAlphaEh>:
 80193ba:	4770      	bx	lr

080193bc <_ZN8touchgfx13DMA_Interface12disableAlphaEv>:
 80193bc:	4770      	bx	lr
	...

080193c0 <_ZN8touchgfx13DMA_Interface7executeEv>:
 80193c0:	2301      	movs	r3, #1
 80193c2:	b570      	push	{r4, r5, r6, lr}
 80193c4:	7203      	strb	r3, [r0, #8]
 80193c6:	4604      	mov	r4, r0
 80193c8:	6840      	ldr	r0, [r0, #4]
 80193ca:	6803      	ldr	r3, [r0, #0]
 80193cc:	699b      	ldr	r3, [r3, #24]
 80193ce:	4798      	blx	r3
 80193d0:	6803      	ldr	r3, [r0, #0]
 80193d2:	4605      	mov	r5, r0
 80193d4:	2b40      	cmp	r3, #64	@ 0x40
 80193d6:	d039      	beq.n	801944c <_ZN8touchgfx13DMA_Interface7executeEv+0x8c>
 80193d8:	d815      	bhi.n	8019406 <_ZN8touchgfx13DMA_Interface7executeEv+0x46>
 80193da:	2b04      	cmp	r3, #4
 80193dc:	d022      	beq.n	8019424 <_ZN8touchgfx13DMA_Interface7executeEv+0x64>
 80193de:	d808      	bhi.n	80193f2 <_ZN8touchgfx13DMA_Interface7executeEv+0x32>
 80193e0:	2b01      	cmp	r3, #1
 80193e2:	d033      	beq.n	801944c <_ZN8touchgfx13DMA_Interface7executeEv+0x8c>
 80193e4:	2b02      	cmp	r3, #2
 80193e6:	d108      	bne.n	80193fa <_ZN8touchgfx13DMA_Interface7executeEv+0x3a>
 80193e8:	6823      	ldr	r3, [r4, #0]
 80193ea:	4620      	mov	r0, r4
 80193ec:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80193ee:	4798      	blx	r3
 80193f0:	e025      	b.n	801943e <_ZN8touchgfx13DMA_Interface7executeEv+0x7e>
 80193f2:	2b08      	cmp	r3, #8
 80193f4:	d01e      	beq.n	8019434 <_ZN8touchgfx13DMA_Interface7executeEv+0x74>
 80193f6:	2b20      	cmp	r3, #32
 80193f8:	d028      	beq.n	801944c <_ZN8touchgfx13DMA_Interface7executeEv+0x8c>
 80193fa:	4b17      	ldr	r3, [pc, #92]	@ (8019458 <_ZN8touchgfx13DMA_Interface7executeEv+0x98>)
 80193fc:	218b      	movs	r1, #139	@ 0x8b
 80193fe:	4a17      	ldr	r2, [pc, #92]	@ (801945c <_ZN8touchgfx13DMA_Interface7executeEv+0x9c>)
 8019400:	4817      	ldr	r0, [pc, #92]	@ (8019460 <_ZN8touchgfx13DMA_Interface7executeEv+0xa0>)
 8019402:	f011 fc1f 	bl	802ac44 <__assert_func>
 8019406:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 801940a:	d01f      	beq.n	801944c <_ZN8touchgfx13DMA_Interface7executeEv+0x8c>
 801940c:	d804      	bhi.n	8019418 <_ZN8touchgfx13DMA_Interface7executeEv+0x58>
 801940e:	2b80      	cmp	r3, #128	@ 0x80
 8019410:	d01c      	beq.n	801944c <_ZN8touchgfx13DMA_Interface7executeEv+0x8c>
 8019412:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8019416:	e7ef      	b.n	80193f8 <_ZN8touchgfx13DMA_Interface7executeEv+0x38>
 8019418:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 801941c:	d016      	beq.n	801944c <_ZN8touchgfx13DMA_Interface7executeEv+0x8c>
 801941e:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8019422:	e7e0      	b.n	80193e6 <_ZN8touchgfx13DMA_Interface7executeEv+0x26>
 8019424:	6823      	ldr	r3, [r4, #0]
 8019426:	7f01      	ldrb	r1, [r0, #28]
 8019428:	4620      	mov	r0, r4
 801942a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 801942c:	4798      	blx	r3
 801942e:	6823      	ldr	r3, [r4, #0]
 8019430:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8019432:	e006      	b.n	8019442 <_ZN8touchgfx13DMA_Interface7executeEv+0x82>
 8019434:	6823      	ldr	r3, [r4, #0]
 8019436:	7f01      	ldrb	r1, [r0, #28]
 8019438:	4620      	mov	r0, r4
 801943a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 801943c:	4798      	blx	r3
 801943e:	6823      	ldr	r3, [r4, #0]
 8019440:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8019442:	4629      	mov	r1, r5
 8019444:	4620      	mov	r0, r4
 8019446:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 801944a:	4718      	bx	r3
 801944c:	6823      	ldr	r3, [r4, #0]
 801944e:	4620      	mov	r0, r4
 8019450:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8019452:	4798      	blx	r3
 8019454:	e7eb      	b.n	801942e <_ZN8touchgfx13DMA_Interface7executeEv+0x6e>
 8019456:	bf00      	nop
 8019458:	0802e832 	.word	0x0802e832
 801945c:	0802e944 	.word	0x0802e944
 8019460:	0802e857 	.word	0x0802e857

08019464 <_ZN8touchgfx13DMA_Interface10addToQueueERKNS_6BlitOpE>:
 8019464:	b570      	push	{r4, r5, r6, lr}
 8019466:	4604      	mov	r4, r0
 8019468:	460e      	mov	r6, r1
 801946a:	6860      	ldr	r0, [r4, #4]
 801946c:	6803      	ldr	r3, [r0, #0]
 801946e:	685b      	ldr	r3, [r3, #4]
 8019470:	4798      	blx	r3
 8019472:	2800      	cmp	r0, #0
 8019474:	d1f9      	bne.n	801946a <_ZN8touchgfx13DMA_Interface10addToQueueERKNS_6BlitOpE+0x6>
 8019476:	4d0d      	ldr	r5, [pc, #52]	@ (80194ac <_ZN8touchgfx13DMA_Interface10addToQueueERKNS_6BlitOpE+0x48>)
 8019478:	6828      	ldr	r0, [r5, #0]
 801947a:	6803      	ldr	r3, [r0, #0]
 801947c:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 801947e:	4798      	blx	r3
 8019480:	f7e8 fd40 	bl	8001f04 <_ZN8touchgfx10OSWrappers27tryTakeFrameBufferSemaphoreEv>
 8019484:	6828      	ldr	r0, [r5, #0]
 8019486:	2101      	movs	r1, #1
 8019488:	f7ff ff46 	bl	8019318 <_ZN8touchgfx3HAL18setRenderingMethodENS0_15RenderingMethodE>
 801948c:	6860      	ldr	r0, [r4, #4]
 801948e:	4631      	mov	r1, r6
 8019490:	6803      	ldr	r3, [r0, #0]
 8019492:	689b      	ldr	r3, [r3, #8]
 8019494:	4798      	blx	r3
 8019496:	6823      	ldr	r3, [r4, #0]
 8019498:	4620      	mov	r0, r4
 801949a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801949c:	4798      	blx	r3
 801949e:	6828      	ldr	r0, [r5, #0]
 80194a0:	6803      	ldr	r3, [r0, #0]
 80194a2:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 80194a6:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80194a8:	4718      	bx	r3
 80194aa:	bf00      	nop
 80194ac:	2400b884 	.word	0x2400b884

080194b0 <_ZN8touchgfx13DMA_Interface27waitForFrameBufferSemaphoreEv>:
 80194b0:	b508      	push	{r3, lr}
 80194b2:	f7e8 fd0d 	bl	8001ed0 <_ZN8touchgfx10OSWrappers24takeFrameBufferSemaphoreEv>
 80194b6:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 80194ba:	f7e8 bd17 	b.w	8001eec <_ZN8touchgfx10OSWrappers24giveFrameBufferSemaphoreEv>

080194be <_ZN8touchgfx13DMA_Interface5startEv>:
 80194be:	b510      	push	{r4, lr}
 80194c0:	4604      	mov	r4, r0
 80194c2:	6840      	ldr	r0, [r0, #4]
 80194c4:	6803      	ldr	r3, [r0, #0]
 80194c6:	681b      	ldr	r3, [r3, #0]
 80194c8:	4798      	blx	r3
 80194ca:	b948      	cbnz	r0, 80194e0 <_ZN8touchgfx13DMA_Interface5startEv+0x22>
 80194cc:	7a63      	ldrb	r3, [r4, #9]
 80194ce:	b13b      	cbz	r3, 80194e0 <_ZN8touchgfx13DMA_Interface5startEv+0x22>
 80194d0:	7a23      	ldrb	r3, [r4, #8]
 80194d2:	b92b      	cbnz	r3, 80194e0 <_ZN8touchgfx13DMA_Interface5startEv+0x22>
 80194d4:	6823      	ldr	r3, [r4, #0]
 80194d6:	4620      	mov	r0, r4
 80194d8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80194da:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80194de:	4718      	bx	r3
 80194e0:	bd10      	pop	{r4, pc}
	...

080194e4 <_ZN8touchgfx17LockFreeDMA_Queue10pushCopyOfERKNS_6BlitOpE>:
 80194e4:	b570      	push	{r4, r5, r6, lr}
 80194e6:	e9d0 2303 	ldrd	r2, r3, [r0, #12]
 80194ea:	4606      	mov	r6, r0
 80194ec:	1a9b      	subs	r3, r3, r2
 80194ee:	2b00      	cmp	r3, #0
 80194f0:	bfdc      	itt	le
 80194f2:	6880      	ldrle	r0, [r0, #8]
 80194f4:	181b      	addle	r3, r3, r0
 80194f6:	2b01      	cmp	r3, #1
 80194f8:	dd13      	ble.n	8019522 <_ZN8touchgfx17LockFreeDMA_Queue10pushCopyOfERKNS_6BlitOpE+0x3e>
 80194fa:	6874      	ldr	r4, [r6, #4]
 80194fc:	460d      	mov	r5, r1
 80194fe:	eb04 1442 	add.w	r4, r4, r2, lsl #5
 8019502:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8019504:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8019506:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 801950a:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 801950e:	68f3      	ldr	r3, [r6, #12]
 8019510:	68b2      	ldr	r2, [r6, #8]
 8019512:	f3bf 8f5b 	dmb	ish
 8019516:	3301      	adds	r3, #1
 8019518:	429a      	cmp	r2, r3
 801951a:	bfd8      	it	le
 801951c:	1a9b      	suble	r3, r3, r2
 801951e:	60f3      	str	r3, [r6, #12]
 8019520:	bd70      	pop	{r4, r5, r6, pc}
 8019522:	4b03      	ldr	r3, [pc, #12]	@ (8019530 <_ZN8touchgfx17LockFreeDMA_Queue10pushCopyOfERKNS_6BlitOpE+0x4c>)
 8019524:	2139      	movs	r1, #57	@ 0x39
 8019526:	4a03      	ldr	r2, [pc, #12]	@ (8019534 <_ZN8touchgfx17LockFreeDMA_Queue10pushCopyOfERKNS_6BlitOpE+0x50>)
 8019528:	4803      	ldr	r0, [pc, #12]	@ (8019538 <_ZN8touchgfx17LockFreeDMA_Queue10pushCopyOfERKNS_6BlitOpE+0x54>)
 801952a:	f011 fb8b 	bl	802ac44 <__assert_func>
 801952e:	bf00      	nop
 8019530:	0802e87d 	.word	0x0802e87d
 8019534:	0802e974 	.word	0x0802e974
 8019538:	0802e857 	.word	0x0802e857

0801953c <_ZN8touchgfx17LockFreeDMA_Queue3popEv>:
 801953c:	b510      	push	{r4, lr}
 801953e:	6803      	ldr	r3, [r0, #0]
 8019540:	4604      	mov	r4, r0
 8019542:	681b      	ldr	r3, [r3, #0]
 8019544:	4798      	blx	r3
 8019546:	b128      	cbz	r0, 8019554 <_ZN8touchgfx17LockFreeDMA_Queue3popEv+0x18>
 8019548:	4b07      	ldr	r3, [pc, #28]	@ (8019568 <_ZN8touchgfx17LockFreeDMA_Queue3popEv+0x2c>)
 801954a:	213f      	movs	r1, #63	@ 0x3f
 801954c:	4a07      	ldr	r2, [pc, #28]	@ (801956c <_ZN8touchgfx17LockFreeDMA_Queue3popEv+0x30>)
 801954e:	4808      	ldr	r0, [pc, #32]	@ (8019570 <_ZN8touchgfx17LockFreeDMA_Queue3popEv+0x34>)
 8019550:	f011 fb78 	bl	802ac44 <__assert_func>
 8019554:	6923      	ldr	r3, [r4, #16]
 8019556:	68a2      	ldr	r2, [r4, #8]
 8019558:	f3bf 8f5b 	dmb	ish
 801955c:	3301      	adds	r3, #1
 801955e:	429a      	cmp	r2, r3
 8019560:	bfd8      	it	le
 8019562:	1a9b      	suble	r3, r3, r2
 8019564:	6123      	str	r3, [r4, #16]
 8019566:	bd10      	pop	{r4, pc}
 8019568:	0802e8a0 	.word	0x0802e8a0
 801956c:	0802e9c2 	.word	0x0802e9c2
 8019570:	0802e857 	.word	0x0802e857

08019574 <_ZN8touchgfx13DMA_Interface16executeCompletedEv>:
 8019574:	b570      	push	{r4, r5, r6, lr}
 8019576:	4604      	mov	r4, r0
 8019578:	6840      	ldr	r0, [r0, #4]
 801957a:	6803      	ldr	r3, [r0, #0]
 801957c:	681b      	ldr	r3, [r3, #0]
 801957e:	4798      	blx	r3
 8019580:	4605      	mov	r5, r0
 8019582:	b930      	cbnz	r0, 8019592 <_ZN8touchgfx13DMA_Interface16executeCompletedEv+0x1e>
 8019584:	7a23      	ldrb	r3, [r4, #8]
 8019586:	b123      	cbz	r3, 8019592 <_ZN8touchgfx13DMA_Interface16executeCompletedEv+0x1e>
 8019588:	6860      	ldr	r0, [r4, #4]
 801958a:	6803      	ldr	r3, [r0, #0]
 801958c:	695b      	ldr	r3, [r3, #20]
 801958e:	4798      	blx	r3
 8019590:	7225      	strb	r5, [r4, #8]
 8019592:	6860      	ldr	r0, [r4, #4]
 8019594:	6803      	ldr	r3, [r0, #0]
 8019596:	681b      	ldr	r3, [r3, #0]
 8019598:	4798      	blx	r3
 801959a:	b928      	cbnz	r0, 80195a8 <_ZN8touchgfx13DMA_Interface16executeCompletedEv+0x34>
 801959c:	6823      	ldr	r3, [r4, #0]
 801959e:	4620      	mov	r0, r4
 80195a0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80195a2:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 80195a6:	4718      	bx	r3
 80195a8:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 80195ac:	f7e8 bcb6 	b.w	8001f1c <_ZN8touchgfx10OSWrappers31giveFrameBufferSemaphoreFromISREv>

080195b0 <_ZN8touchgfx17LockFreeDMA_QueueC1EPNS_6BlitOpEi>:
 80195b0:	b510      	push	{r4, lr}
 80195b2:	6082      	str	r2, [r0, #8]
 80195b4:	2200      	movs	r2, #0
 80195b6:	4c03      	ldr	r4, [pc, #12]	@ (80195c4 <_ZN8touchgfx17LockFreeDMA_QueueC1EPNS_6BlitOpEi+0x14>)
 80195b8:	e9c0 2203 	strd	r2, r2, [r0, #12]
 80195bc:	e9c0 4100 	strd	r4, r1, [r0]
 80195c0:	bd10      	pop	{r4, pc}
 80195c2:	bf00      	nop
 80195c4:	0802e928 	.word	0x0802e928

080195c8 <_ZN8touchgfx13DMA_Interface15isDmaQueueEmptyEv>:
 80195c8:	6840      	ldr	r0, [r0, #4]
 80195ca:	6803      	ldr	r3, [r0, #0]
 80195cc:	681b      	ldr	r3, [r3, #0]
 80195ce:	4718      	bx	r3

080195d0 <_ZNK8touchgfx14AbstractButton15getPressedStateEv>:
 80195d0:	f890 002c 	ldrb.w	r0, [r0, #44]	@ 0x2c
 80195d4:	4770      	bx	lr

080195d6 <_ZN8touchgfx14AbstractButton13executeActionEv>:
 80195d6:	b510      	push	{r4, lr}
 80195d8:	4604      	mov	r4, r0
 80195da:	6a80      	ldr	r0, [r0, #40]	@ 0x28
 80195dc:	b150      	cbz	r0, 80195f4 <_ZN8touchgfx14AbstractButton13executeActionEv+0x1e>
 80195de:	6803      	ldr	r3, [r0, #0]
 80195e0:	68db      	ldr	r3, [r3, #12]
 80195e2:	4798      	blx	r3
 80195e4:	b130      	cbz	r0, 80195f4 <_ZN8touchgfx14AbstractButton13executeActionEv+0x1e>
 80195e6:	6aa0      	ldr	r0, [r4, #40]	@ 0x28
 80195e8:	4621      	mov	r1, r4
 80195ea:	6803      	ldr	r3, [r0, #0]
 80195ec:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80195f0:	689b      	ldr	r3, [r3, #8]
 80195f2:	4718      	bx	r3
 80195f4:	bd10      	pop	{r4, pc}

080195f6 <_ZN8touchgfx14AbstractButton16handleClickEventERKNS_10ClickEventE>:
 80195f6:	790b      	ldrb	r3, [r1, #4]
 80195f8:	2b00      	cmp	r3, #0
 80195fa:	bf0c      	ite	eq
 80195fc:	2301      	moveq	r3, #1
 80195fe:	2300      	movne	r3, #0
 8019600:	b570      	push	{r4, r5, r6, lr}
 8019602:	4604      	mov	r4, r0
 8019604:	f890 502c 	ldrb.w	r5, [r0, #44]	@ 0x2c
 8019608:	460e      	mov	r6, r1
 801960a:	f880 302c 	strb.w	r3, [r0, #44]	@ 0x2c
 801960e:	d109      	bne.n	8019624 <_ZN8touchgfx14AbstractButton16handleClickEventERKNS_10ClickEventE+0x2e>
 8019610:	b14d      	cbz	r5, 8019626 <_ZN8touchgfx14AbstractButton16handleClickEventERKNS_10ClickEventE+0x30>
 8019612:	7933      	ldrb	r3, [r6, #4]
 8019614:	2b01      	cmp	r3, #1
 8019616:	d10c      	bne.n	8019632 <_ZN8touchgfx14AbstractButton16handleClickEventERKNS_10ClickEventE+0x3c>
 8019618:	6823      	ldr	r3, [r4, #0]
 801961a:	4620      	mov	r0, r4
 801961c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 801961e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8019622:	4718      	bx	r3
 8019624:	b12d      	cbz	r5, 8019632 <_ZN8touchgfx14AbstractButton16handleClickEventERKNS_10ClickEventE+0x3c>
 8019626:	6823      	ldr	r3, [r4, #0]
 8019628:	4620      	mov	r0, r4
 801962a:	695b      	ldr	r3, [r3, #20]
 801962c:	4798      	blx	r3
 801962e:	2d00      	cmp	r5, #0
 8019630:	d1ef      	bne.n	8019612 <_ZN8touchgfx14AbstractButton16handleClickEventERKNS_10ClickEventE+0x1c>
 8019632:	bd70      	pop	{r4, r5, r6, pc}

08019634 <_ZN8touchgfx12ToggleButton16handleClickEventERKNS_10ClickEventE>:
 8019634:	f890 302c 	ldrb.w	r3, [r0, #44]	@ 0x2c
 8019638:	b133      	cbz	r3, 8019648 <_ZN8touchgfx12ToggleButton16handleClickEventERKNS_10ClickEventE+0x14>
 801963a:	790b      	ldrb	r3, [r1, #4]
 801963c:	2b01      	cmp	r3, #1
 801963e:	bf01      	itttt	eq
 8019640:	8dc3      	ldrheq	r3, [r0, #46]	@ 0x2e
 8019642:	8e02      	ldrheq	r2, [r0, #48]	@ 0x30
 8019644:	8603      	strheq	r3, [r0, #48]	@ 0x30
 8019646:	85c2      	strheq	r2, [r0, #46]	@ 0x2e
 8019648:	f7ff bfd5 	b.w	80195f6 <_ZN8touchgfx14AbstractButton16handleClickEventERKNS_10ClickEventE>

0801964c <_ZN8touchgfx12ToggleButton10forceStateEb>:
 801964c:	b570      	push	{r4, r5, r6, lr}
 801964e:	4604      	mov	r4, r0
 8019650:	f100 0534 	add.w	r5, r0, #52	@ 0x34
 8019654:	b169      	cbz	r1, 8019672 <_ZN8touchgfx12ToggleButton10forceStateEb+0x26>
 8019656:	302e      	adds	r0, #46	@ 0x2e
 8019658:	f7f1 f802 	bl	800a660 <_ZNK8touchgfx6Bitmap5getIdEv>
 801965c:	4606      	mov	r6, r0
 801965e:	4628      	mov	r0, r5
 8019660:	f7f0 fffe 	bl	800a660 <_ZNK8touchgfx6Bitmap5getIdEv>
 8019664:	4286      	cmp	r6, r0
 8019666:	d003      	beq.n	8019670 <_ZN8touchgfx12ToggleButton10forceStateEb+0x24>
 8019668:	8de3      	ldrh	r3, [r4, #46]	@ 0x2e
 801966a:	8623      	strh	r3, [r4, #48]	@ 0x30
 801966c:	8ea3      	ldrh	r3, [r4, #52]	@ 0x34
 801966e:	85e3      	strh	r3, [r4, #46]	@ 0x2e
 8019670:	bd70      	pop	{r4, r5, r6, pc}
 8019672:	3030      	adds	r0, #48	@ 0x30
 8019674:	f7f0 fff4 	bl	800a660 <_ZNK8touchgfx6Bitmap5getIdEv>
 8019678:	4606      	mov	r6, r0
 801967a:	4628      	mov	r0, r5
 801967c:	f7f0 fff0 	bl	800a660 <_ZNK8touchgfx6Bitmap5getIdEv>
 8019680:	4286      	cmp	r6, r0
 8019682:	bf1f      	itttt	ne
 8019684:	8e23      	ldrhne	r3, [r4, #48]	@ 0x30
 8019686:	85e3      	strhne	r3, [r4, #46]	@ 0x2e
 8019688:	8ea3      	ldrhne	r3, [r4, #52]	@ 0x34
 801968a:	8623      	strhne	r3, [r4, #48]	@ 0x30
 801968c:	e7f0      	b.n	8019670 <_ZN8touchgfx12ToggleButton10forceStateEb+0x24>

0801968e <_ZNK8touchgfx8TextArea12getSolidRectEv>:
 801968e:	2200      	movs	r2, #0
 8019690:	8002      	strh	r2, [r0, #0]
 8019692:	8042      	strh	r2, [r0, #2]
 8019694:	8082      	strh	r2, [r0, #4]
 8019696:	80c2      	strh	r2, [r0, #6]
 8019698:	4770      	bx	lr

0801969a <_ZN8touchgfx8TextArea13setXBaselineYEss>:
 801969a:	b570      	push	{r4, r5, r6, lr}
 801969c:	6803      	ldr	r3, [r0, #0]
 801969e:	4604      	mov	r4, r0
 80196a0:	4615      	mov	r5, r2
 80196a2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80196a4:	4798      	blx	r3
 80196a6:	6823      	ldr	r3, [r4, #0]
 80196a8:	4629      	mov	r1, r5
 80196aa:	4620      	mov	r0, r4
 80196ac:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80196ae:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 80196b2:	4718      	bx	r3

080196b4 <_ZNK8touchgfx8TextArea12getTextWidthEv>:
 80196b4:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80196b6:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 80196ba:	8d81      	ldrh	r1, [r0, #44]	@ 0x2c
 80196bc:	4299      	cmp	r1, r3
 80196be:	d029      	beq.n	8019714 <_ZNK8touchgfx8TextArea12getTextWidthEv+0x60>
 80196c0:	4b15      	ldr	r3, [pc, #84]	@ (8019718 <_ZNK8touchgfx8TextArea12getTextWidthEv+0x64>)
 80196c2:	681b      	ldr	r3, [r3, #0]
 80196c4:	b92b      	cbnz	r3, 80196d2 <_ZNK8touchgfx8TextArea12getTextWidthEv+0x1e>
 80196c6:	4b15      	ldr	r3, [pc, #84]	@ (801971c <_ZNK8touchgfx8TextArea12getTextWidthEv+0x68>)
 80196c8:	21ae      	movs	r1, #174	@ 0xae
 80196ca:	4a15      	ldr	r2, [pc, #84]	@ (8019720 <_ZNK8touchgfx8TextArea12getTextWidthEv+0x6c>)
 80196cc:	4815      	ldr	r0, [pc, #84]	@ (8019724 <_ZNK8touchgfx8TextArea12getTextWidthEv+0x70>)
 80196ce:	f011 fab9 	bl	802ac44 <__assert_func>
 80196d2:	4a15      	ldr	r2, [pc, #84]	@ (8019728 <_ZNK8touchgfx8TextArea12getTextWidthEv+0x74>)
 80196d4:	8812      	ldrh	r2, [r2, #0]
 80196d6:	428a      	cmp	r2, r1
 80196d8:	d803      	bhi.n	80196e2 <_ZNK8touchgfx8TextArea12getTextWidthEv+0x2e>
 80196da:	4b14      	ldr	r3, [pc, #80]	@ (801972c <_ZNK8touchgfx8TextArea12getTextWidthEv+0x78>)
 80196dc:	21af      	movs	r1, #175	@ 0xaf
 80196de:	4a10      	ldr	r2, [pc, #64]	@ (8019720 <_ZNK8touchgfx8TextArea12getTextWidthEv+0x6c>)
 80196e0:	e7f4      	b.n	80196cc <_ZNK8touchgfx8TextArea12getTextWidthEv+0x18>
 80196e2:	eb03 0241 	add.w	r2, r3, r1, lsl #1
 80196e6:	f813 0011 	ldrb.w	r0, [r3, r1, lsl #1]
 80196ea:	4b11      	ldr	r3, [pc, #68]	@ (8019730 <_ZNK8touchgfx8TextArea12getTextWidthEv+0x7c>)
 80196ec:	7854      	ldrb	r4, [r2, #1]
 80196ee:	681b      	ldr	r3, [r3, #0]
 80196f0:	f3c4 0481 	ubfx	r4, r4, #2, #2
 80196f4:	f853 5020 	ldr.w	r5, [r3, r0, lsl #2]
 80196f8:	682b      	ldr	r3, [r5, #0]
 80196fa:	69de      	ldr	r6, [r3, #28]
 80196fc:	4b0d      	ldr	r3, [pc, #52]	@ (8019734 <_ZNK8touchgfx8TextArea12getTextWidthEv+0x80>)
 80196fe:	6818      	ldr	r0, [r3, #0]
 8019700:	f7f0 fc56 	bl	8009fb0 <_ZNK8touchgfx5Texts7getTextEt>
 8019704:	2300      	movs	r3, #0
 8019706:	4602      	mov	r2, r0
 8019708:	4621      	mov	r1, r4
 801970a:	9300      	str	r3, [sp, #0]
 801970c:	4628      	mov	r0, r5
 801970e:	47b0      	blx	r6
 8019710:	b002      	add	sp, #8
 8019712:	bd70      	pop	{r4, r5, r6, pc}
 8019714:	2000      	movs	r0, #0
 8019716:	e7fb      	b.n	8019710 <_ZNK8touchgfx8TextArea12getTextWidthEv+0x5c>
 8019718:	2400b8d4 	.word	0x2400b8d4
 801971c:	0802ead0 	.word	0x0802ead0
 8019720:	0802ec08 	.word	0x0802ec08
 8019724:	0802eb12 	.word	0x0802eb12
 8019728:	2400b8d8 	.word	0x2400b8d8
 801972c:	0802eb3b 	.word	0x0802eb3b
 8019730:	2400b8dc 	.word	0x2400b8dc
 8019734:	2400b8e0 	.word	0x2400b8e0

08019738 <_ZN8touchgfx8TextArea12setBaselineYEs>:
 8019738:	b570      	push	{r4, r5, r6, lr}
 801973a:	6803      	ldr	r3, [r0, #0]
 801973c:	4604      	mov	r4, r0
 801973e:	b28d      	uxth	r5, r1
 8019740:	8d82      	ldrh	r2, [r0, #44]	@ 0x2c
 8019742:	6b1e      	ldr	r6, [r3, #48]	@ 0x30
 8019744:	4b10      	ldr	r3, [pc, #64]	@ (8019788 <_ZN8touchgfx8TextArea12setBaselineYEs+0x50>)
 8019746:	681b      	ldr	r3, [r3, #0]
 8019748:	b92b      	cbnz	r3, 8019756 <_ZN8touchgfx8TextArea12setBaselineYEs+0x1e>
 801974a:	4b10      	ldr	r3, [pc, #64]	@ (801978c <_ZN8touchgfx8TextArea12setBaselineYEs+0x54>)
 801974c:	21ae      	movs	r1, #174	@ 0xae
 801974e:	4a10      	ldr	r2, [pc, #64]	@ (8019790 <_ZN8touchgfx8TextArea12setBaselineYEs+0x58>)
 8019750:	4810      	ldr	r0, [pc, #64]	@ (8019794 <_ZN8touchgfx8TextArea12setBaselineYEs+0x5c>)
 8019752:	f011 fa77 	bl	802ac44 <__assert_func>
 8019756:	4910      	ldr	r1, [pc, #64]	@ (8019798 <_ZN8touchgfx8TextArea12setBaselineYEs+0x60>)
 8019758:	8809      	ldrh	r1, [r1, #0]
 801975a:	4291      	cmp	r1, r2
 801975c:	d803      	bhi.n	8019766 <_ZN8touchgfx8TextArea12setBaselineYEs+0x2e>
 801975e:	4b0f      	ldr	r3, [pc, #60]	@ (801979c <_ZN8touchgfx8TextArea12setBaselineYEs+0x64>)
 8019760:	21af      	movs	r1, #175	@ 0xaf
 8019762:	4a0b      	ldr	r2, [pc, #44]	@ (8019790 <_ZN8touchgfx8TextArea12setBaselineYEs+0x58>)
 8019764:	e7f4      	b.n	8019750 <_ZN8touchgfx8TextArea12setBaselineYEs+0x18>
 8019766:	f813 2012 	ldrb.w	r2, [r3, r2, lsl #1]
 801976a:	4b0d      	ldr	r3, [pc, #52]	@ (80197a0 <_ZN8touchgfx8TextArea12setBaselineYEs+0x68>)
 801976c:	681b      	ldr	r3, [r3, #0]
 801976e:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 8019772:	6803      	ldr	r3, [r0, #0]
 8019774:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8019776:	4798      	blx	r3
 8019778:	1a29      	subs	r1, r5, r0
 801977a:	4633      	mov	r3, r6
 801977c:	4620      	mov	r0, r4
 801977e:	b209      	sxth	r1, r1
 8019780:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8019784:	4718      	bx	r3
 8019786:	bf00      	nop
 8019788:	2400b8d4 	.word	0x2400b8d4
 801978c:	0802ead0 	.word	0x0802ead0
 8019790:	0802ec08 	.word	0x0802ec08
 8019794:	0802eb12 	.word	0x0802eb12
 8019798:	2400b8d8 	.word	0x2400b8d8
 801979c:	0802eb3b 	.word	0x0802eb3b
 80197a0:	2400b8dc 	.word	0x2400b8dc

080197a4 <_ZNK8touchgfx8TextArea4drawERKNS_4RectE>:
 80197a4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80197a8:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80197ac:	8d83      	ldrh	r3, [r0, #44]	@ 0x2c
 80197ae:	b08c      	sub	sp, #48	@ 0x30
 80197b0:	4604      	mov	r4, r0
 80197b2:	4293      	cmp	r3, r2
 80197b4:	4688      	mov	r8, r1
 80197b6:	d05f      	beq.n	8019878 <_ZNK8touchgfx8TextArea4drawERKNS_4RectE+0xd4>
 80197b8:	4e31      	ldr	r6, [pc, #196]	@ (8019880 <_ZNK8touchgfx8TextArea4drawERKNS_4RectE+0xdc>)
 80197ba:	6832      	ldr	r2, [r6, #0]
 80197bc:	b92a      	cbnz	r2, 80197ca <_ZNK8touchgfx8TextArea4drawERKNS_4RectE+0x26>
 80197be:	4b31      	ldr	r3, [pc, #196]	@ (8019884 <_ZNK8touchgfx8TextArea4drawERKNS_4RectE+0xe0>)
 80197c0:	21ae      	movs	r1, #174	@ 0xae
 80197c2:	4a31      	ldr	r2, [pc, #196]	@ (8019888 <_ZNK8touchgfx8TextArea4drawERKNS_4RectE+0xe4>)
 80197c4:	4831      	ldr	r0, [pc, #196]	@ (801988c <_ZNK8touchgfx8TextArea4drawERKNS_4RectE+0xe8>)
 80197c6:	f011 fa3d 	bl	802ac44 <__assert_func>
 80197ca:	4d31      	ldr	r5, [pc, #196]	@ (8019890 <_ZNK8touchgfx8TextArea4drawERKNS_4RectE+0xec>)
 80197cc:	8829      	ldrh	r1, [r5, #0]
 80197ce:	4299      	cmp	r1, r3
 80197d0:	d803      	bhi.n	80197da <_ZNK8touchgfx8TextArea4drawERKNS_4RectE+0x36>
 80197d2:	4b30      	ldr	r3, [pc, #192]	@ (8019894 <_ZNK8touchgfx8TextArea4drawERKNS_4RectE+0xf0>)
 80197d4:	21af      	movs	r1, #175	@ 0xaf
 80197d6:	4a2c      	ldr	r2, [pc, #176]	@ (8019888 <_ZNK8touchgfx8TextArea4drawERKNS_4RectE+0xe4>)
 80197d8:	e7f4      	b.n	80197c4 <_ZNK8touchgfx8TextArea4drawERKNS_4RectE+0x20>
 80197da:	eb02 0143 	add.w	r1, r2, r3, lsl #1
 80197de:	f812 2013 	ldrb.w	r2, [r2, r3, lsl #1]
 80197e2:	4b2d      	ldr	r3, [pc, #180]	@ (8019898 <_ZNK8touchgfx8TextArea4drawERKNS_4RectE+0xf4>)
 80197e4:	681b      	ldr	r3, [r3, #0]
 80197e6:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 80197ea:	2a00      	cmp	r2, #0
 80197ec:	d044      	beq.n	8019878 <_ZNK8touchgfx8TextArea4drawERKNS_4RectE+0xd4>
 80197ee:	784b      	ldrb	r3, [r1, #1]
 80197f0:	f890 c036 	ldrb.w	ip, [r0, #54]	@ 0x36
 80197f4:	f3c3 0a01 	ubfx	sl, r3, #0, #2
 80197f8:	f3c3 0381 	ubfx	r3, r3, #2, #2
 80197fc:	f9b0 e034 	ldrsh.w	lr, [r0, #52]	@ 0x34
 8019800:	f88d 3021 	strb.w	r3, [sp, #33]	@ 0x21
 8019804:	4b25      	ldr	r3, [pc, #148]	@ (801989c <_ZNK8touchgfx8TextArea4drawERKNS_4RectE+0xf8>)
 8019806:	f890 9038 	ldrb.w	r9, [r0, #56]	@ 0x38
 801980a:	681b      	ldr	r3, [r3, #0]
 801980c:	f890 7037 	ldrb.w	r7, [r0, #55]	@ 0x37
 8019810:	f890 1039 	ldrb.w	r1, [r0, #57]	@ 0x39
 8019814:	9207      	str	r2, [sp, #28]
 8019816:	6b00      	ldr	r0, [r0, #48]	@ 0x30
 8019818:	f893 2076 	ldrb.w	r2, [r3, #118]	@ 0x76
 801981c:	f88d a020 	strb.w	sl, [sp, #32]
 8019820:	f88d 9022 	strb.w	r9, [sp, #34]	@ 0x22
 8019824:	9009      	str	r0, [sp, #36]	@ 0x24
 8019826:	f8ad e028 	strh.w	lr, [sp, #40]	@ 0x28
 801982a:	f88d c02a 	strb.w	ip, [sp, #42]	@ 0x2a
 801982e:	f88d 702b 	strb.w	r7, [sp, #43]	@ 0x2b
 8019832:	f88d 102c 	strb.w	r1, [sp, #44]	@ 0x2c
 8019836:	b10a      	cbz	r2, 801983c <_ZNK8touchgfx8TextArea4drawERKNS_4RectE+0x98>
 8019838:	6cdf      	ldr	r7, [r3, #76]	@ 0x4c
 801983a:	b907      	cbnz	r7, 801983e <_ZNK8touchgfx8TextArea4drawERKNS_4RectE+0x9a>
 801983c:	689f      	ldr	r7, [r3, #8]
 801983e:	f10d 0914 	add.w	r9, sp, #20
 8019842:	4621      	mov	r1, r4
 8019844:	4648      	mov	r0, r9
 8019846:	f003 f8f1 	bl	801ca2c <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 801984a:	6833      	ldr	r3, [r6, #0]
 801984c:	2b00      	cmp	r3, #0
 801984e:	d0b6      	beq.n	80197be <_ZNK8touchgfx8TextArea4drawERKNS_4RectE+0x1a>
 8019850:	8da1      	ldrh	r1, [r4, #44]	@ 0x2c
 8019852:	882b      	ldrh	r3, [r5, #0]
 8019854:	428b      	cmp	r3, r1
 8019856:	d9bc      	bls.n	80197d2 <_ZNK8touchgfx8TextArea4drawERKNS_4RectE+0x2e>
 8019858:	4b11      	ldr	r3, [pc, #68]	@ (80198a0 <_ZNK8touchgfx8TextArea4drawERKNS_4RectE+0xfc>)
 801985a:	6818      	ldr	r0, [r3, #0]
 801985c:	f7f0 fba8 	bl	8009fb0 <_ZNK8touchgfx5Texts7getTextEt>
 8019860:	2300      	movs	r3, #0
 8019862:	9001      	str	r0, [sp, #4]
 8019864:	4638      	mov	r0, r7
 8019866:	e9cd 3302 	strd	r3, r3, [sp, #8]
 801986a:	ab07      	add	r3, sp, #28
 801986c:	9300      	str	r3, [sp, #0]
 801986e:	4643      	mov	r3, r8
 8019870:	e899 0006 	ldmia.w	r9, {r1, r2}
 8019874:	f7f0 fb2d 	bl	8009ed2 <_ZN8touchgfx3LCD10drawStringENS_4RectERKS1_RKNS0_13StringVisualsEPKtz>
 8019878:	b00c      	add	sp, #48	@ 0x30
 801987a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801987e:	bf00      	nop
 8019880:	2400b8d4 	.word	0x2400b8d4
 8019884:	0802ead0 	.word	0x0802ead0
 8019888:	0802ec08 	.word	0x0802ec08
 801988c:	0802eb12 	.word	0x0802eb12
 8019890:	2400b8d8 	.word	0x2400b8d8
 8019894:	0802eb3b 	.word	0x0802eb3b
 8019898:	2400b8dc 	.word	0x2400b8dc
 801989c:	2400b884 	.word	0x2400b884
 80198a0:	2400b8e0 	.word	0x2400b8e0

080198a4 <_ZNK8touchgfx8TextArea19calculateTextHeightEPKtz>:
 80198a4:	b40e      	push	{r1, r2, r3}
 80198a6:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80198aa:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80198ae:	8d83      	ldrh	r3, [r0, #44]	@ 0x2c
 80198b0:	b09c      	sub	sp, #112	@ 0x70
 80198b2:	4604      	mov	r4, r0
 80198b4:	4293      	cmp	r3, r2
 80198b6:	d06b      	beq.n	8019990 <_ZNK8touchgfx8TextArea19calculateTextHeightEPKtz+0xec>
 80198b8:	aa26      	add	r2, sp, #152	@ 0x98
 80198ba:	f8df a0e8 	ldr.w	sl, [pc, #232]	@ 80199a4 <_ZNK8touchgfx8TextArea19calculateTextHeightEPKtz+0x100>
 80198be:	9202      	str	r2, [sp, #8]
 80198c0:	f8da 2000 	ldr.w	r2, [sl]
 80198c4:	b92a      	cbnz	r2, 80198d2 <_ZNK8touchgfx8TextArea19calculateTextHeightEPKtz+0x2e>
 80198c6:	4b33      	ldr	r3, [pc, #204]	@ (8019994 <_ZNK8touchgfx8TextArea19calculateTextHeightEPKtz+0xf0>)
 80198c8:	21ae      	movs	r1, #174	@ 0xae
 80198ca:	4a33      	ldr	r2, [pc, #204]	@ (8019998 <_ZNK8touchgfx8TextArea19calculateTextHeightEPKtz+0xf4>)
 80198cc:	4833      	ldr	r0, [pc, #204]	@ (801999c <_ZNK8touchgfx8TextArea19calculateTextHeightEPKtz+0xf8>)
 80198ce:	f011 f9b9 	bl	802ac44 <__assert_func>
 80198d2:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 80199a8 <_ZNK8touchgfx8TextArea19calculateTextHeightEPKtz+0x104>
 80198d6:	f8b8 1000 	ldrh.w	r1, [r8]
 80198da:	4299      	cmp	r1, r3
 80198dc:	d803      	bhi.n	80198e6 <_ZNK8touchgfx8TextArea19calculateTextHeightEPKtz+0x42>
 80198de:	4b30      	ldr	r3, [pc, #192]	@ (80199a0 <_ZNK8touchgfx8TextArea19calculateTextHeightEPKtz+0xfc>)
 80198e0:	21af      	movs	r1, #175	@ 0xaf
 80198e2:	4a2d      	ldr	r2, [pc, #180]	@ (8019998 <_ZNK8touchgfx8TextArea19calculateTextHeightEPKtz+0xf4>)
 80198e4:	e7f2      	b.n	80198cc <_ZNK8touchgfx8TextArea19calculateTextHeightEPKtz+0x28>
 80198e6:	f8df 90c4 	ldr.w	r9, [pc, #196]	@ 80199ac <_ZNK8touchgfx8TextArea19calculateTextHeightEPKtz+0x108>
 80198ea:	f812 2013 	ldrb.w	r2, [r2, r3, lsl #1]
 80198ee:	f8d9 3000 	ldr.w	r3, [r9]
 80198f2:	f853 5022 	ldr.w	r5, [r3, r2, lsl #2]
 80198f6:	682b      	ldr	r3, [r5, #0]
 80198f8:	4628      	mov	r0, r5
 80198fa:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80198fc:	4798      	blx	r3
 80198fe:	4606      	mov	r6, r0
 8019900:	b207      	sxth	r7, r0
 8019902:	a803      	add	r0, sp, #12
 8019904:	f003 fd2a 	bl	801d35c <_ZN8touchgfx12TextProviderC1Ev>
 8019908:	682b      	ldr	r3, [r5, #0]
 801990a:	4628      	mov	r0, r5
 801990c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 801990e:	4798      	blx	r3
 8019910:	682b      	ldr	r3, [r5, #0]
 8019912:	4683      	mov	fp, r0
 8019914:	4628      	mov	r0, r5
 8019916:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8019918:	4798      	blx	r3
 801991a:	465b      	mov	r3, fp
 801991c:	9000      	str	r0, [sp, #0]
 801991e:	a803      	add	r0, sp, #12
 8019920:	9925      	ldr	r1, [sp, #148]	@ 0x94
 8019922:	9a02      	ldr	r2, [sp, #8]
 8019924:	f003 fd6d 	bl	801d402 <_ZN8touchgfx12TextProvider10initializeEPKtSt9__va_listS2_PKNS_24FontContextualFormsTableE>
 8019928:	f8da 3000 	ldr.w	r3, [sl]
 801992c:	f894 1039 	ldrb.w	r1, [r4, #57]	@ 0x39
 8019930:	2b00      	cmp	r3, #0
 8019932:	d0c8      	beq.n	80198c6 <_ZNK8touchgfx8TextArea19calculateTextHeightEPKtz+0x22>
 8019934:	8da2      	ldrh	r2, [r4, #44]	@ 0x2c
 8019936:	f8b8 0000 	ldrh.w	r0, [r8]
 801993a:	4290      	cmp	r0, r2
 801993c:	d9cf      	bls.n	80198de <_ZNK8touchgfx8TextArea19calculateTextHeightEPKtz+0x3a>
 801993e:	eb03 0542 	add.w	r5, r3, r2, lsl #1
 8019942:	f813 0012 	ldrb.w	r0, [r3, r2, lsl #1]
 8019946:	f894 c037 	ldrb.w	ip, [r4, #55]	@ 0x37
 801994a:	786a      	ldrb	r2, [r5, #1]
 801994c:	8925      	ldrh	r5, [r4, #8]
 801994e:	f8d9 3000 	ldr.w	r3, [r9]
 8019952:	f3c2 0281 	ubfx	r2, r2, #2, #2
 8019956:	eba5 050c 	sub.w	r5, r5, ip
 801995a:	b22d      	sxth	r5, r5
 801995c:	9500      	str	r5, [sp, #0]
 801995e:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
 8019962:	a803      	add	r0, sp, #12
 8019964:	f001 fb5b 	bl	801b01e <_ZN8touchgfx3LCD11getNumLinesERNS_12TextProviderENS_14WideTextActionEhPKNS_4FontEs>
 8019968:	f9b4 2034 	ldrsh.w	r2, [r4, #52]	@ 0x34
 801996c:	b203      	sxth	r3, r0
 801996e:	18b9      	adds	r1, r7, r2
 8019970:	2900      	cmp	r1, #0
 8019972:	dd0b      	ble.n	801998c <_ZNK8touchgfx8TextArea19calculateTextHeightEPKtz+0xe8>
 8019974:	3b01      	subs	r3, #1
 8019976:	fb13 f302 	smulbb	r3, r3, r2
 801997a:	fb16 3300 	smlabb	r3, r6, r0, r3
 801997e:	b21f      	sxth	r7, r3
 8019980:	4638      	mov	r0, r7
 8019982:	b01c      	add	sp, #112	@ 0x70
 8019984:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8019988:	b003      	add	sp, #12
 801998a:	4770      	bx	lr
 801998c:	2b00      	cmp	r3, #0
 801998e:	dcf7      	bgt.n	8019980 <_ZNK8touchgfx8TextArea19calculateTextHeightEPKtz+0xdc>
 8019990:	2700      	movs	r7, #0
 8019992:	e7f5      	b.n	8019980 <_ZNK8touchgfx8TextArea19calculateTextHeightEPKtz+0xdc>
 8019994:	0802ead0 	.word	0x0802ead0
 8019998:	0802ec08 	.word	0x0802ec08
 801999c:	0802eb12 	.word	0x0802eb12
 80199a0:	0802eb3b 	.word	0x0802eb3b
 80199a4:	2400b8d4 	.word	0x2400b8d4
 80199a8:	2400b8d8 	.word	0x2400b8d8
 80199ac:	2400b8dc 	.word	0x2400b8dc

080199b0 <_ZN8touchgfx8TextArea13getTextHeightEv>:
 80199b0:	b570      	push	{r4, r5, r6, lr}
 80199b2:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 80199b6:	8d81      	ldrh	r1, [r0, #44]	@ 0x2c
 80199b8:	4604      	mov	r4, r0
 80199ba:	4299      	cmp	r1, r3
 80199bc:	d01e      	beq.n	80199fc <_ZN8touchgfx8TextArea13getTextHeightEv+0x4c>
 80199be:	6803      	ldr	r3, [r0, #0]
 80199c0:	6edd      	ldr	r5, [r3, #108]	@ 0x6c
 80199c2:	4b0f      	ldr	r3, [pc, #60]	@ (8019a00 <_ZN8touchgfx8TextArea13getTextHeightEv+0x50>)
 80199c4:	681b      	ldr	r3, [r3, #0]
 80199c6:	b92b      	cbnz	r3, 80199d4 <_ZN8touchgfx8TextArea13getTextHeightEv+0x24>
 80199c8:	4b0e      	ldr	r3, [pc, #56]	@ (8019a04 <_ZN8touchgfx8TextArea13getTextHeightEv+0x54>)
 80199ca:	21ae      	movs	r1, #174	@ 0xae
 80199cc:	4a0e      	ldr	r2, [pc, #56]	@ (8019a08 <_ZN8touchgfx8TextArea13getTextHeightEv+0x58>)
 80199ce:	480f      	ldr	r0, [pc, #60]	@ (8019a0c <_ZN8touchgfx8TextArea13getTextHeightEv+0x5c>)
 80199d0:	f011 f938 	bl	802ac44 <__assert_func>
 80199d4:	4b0e      	ldr	r3, [pc, #56]	@ (8019a10 <_ZN8touchgfx8TextArea13getTextHeightEv+0x60>)
 80199d6:	881b      	ldrh	r3, [r3, #0]
 80199d8:	428b      	cmp	r3, r1
 80199da:	d803      	bhi.n	80199e4 <_ZN8touchgfx8TextArea13getTextHeightEv+0x34>
 80199dc:	4b0d      	ldr	r3, [pc, #52]	@ (8019a14 <_ZN8touchgfx8TextArea13getTextHeightEv+0x64>)
 80199de:	21af      	movs	r1, #175	@ 0xaf
 80199e0:	4a09      	ldr	r2, [pc, #36]	@ (8019a08 <_ZN8touchgfx8TextArea13getTextHeightEv+0x58>)
 80199e2:	e7f4      	b.n	80199ce <_ZN8touchgfx8TextArea13getTextHeightEv+0x1e>
 80199e4:	4b0c      	ldr	r3, [pc, #48]	@ (8019a18 <_ZN8touchgfx8TextArea13getTextHeightEv+0x68>)
 80199e6:	6818      	ldr	r0, [r3, #0]
 80199e8:	f7f0 fae2 	bl	8009fb0 <_ZNK8touchgfx5Texts7getTextEt>
 80199ec:	2300      	movs	r3, #0
 80199ee:	4601      	mov	r1, r0
 80199f0:	46ac      	mov	ip, r5
 80199f2:	4620      	mov	r0, r4
 80199f4:	461a      	mov	r2, r3
 80199f6:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 80199fa:	4760      	bx	ip
 80199fc:	2000      	movs	r0, #0
 80199fe:	bd70      	pop	{r4, r5, r6, pc}
 8019a00:	2400b8d4 	.word	0x2400b8d4
 8019a04:	0802ead0 	.word	0x0802ead0
 8019a08:	0802ec08 	.word	0x0802ec08
 8019a0c:	0802eb12 	.word	0x0802eb12
 8019a10:	2400b8d8 	.word	0x2400b8d8
 8019a14:	0802eb3b 	.word	0x0802eb3b
 8019a18:	2400b8e0 	.word	0x2400b8e0

08019a1c <_ZN8touchgfx8TextArea19resizeToCurrentTextEv>:
 8019a1c:	b538      	push	{r3, r4, r5, lr}
 8019a1e:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8019a22:	8d82      	ldrh	r2, [r0, #44]	@ 0x2c
 8019a24:	4604      	mov	r4, r0
 8019a26:	429a      	cmp	r2, r3
 8019a28:	d014      	beq.n	8019a54 <_ZN8touchgfx8TextArea19resizeToCurrentTextEv+0x38>
 8019a2a:	6803      	ldr	r3, [r0, #0]
 8019a2c:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8019a2e:	4798      	blx	r3
 8019a30:	6823      	ldr	r3, [r4, #0]
 8019a32:	4605      	mov	r5, r0
 8019a34:	4620      	mov	r0, r4
 8019a36:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8019a38:	4798      	blx	r3
 8019a3a:	f894 3038 	ldrb.w	r3, [r4, #56]	@ 0x38
 8019a3e:	b22d      	sxth	r5, r5
 8019a40:	4601      	mov	r1, r0
 8019a42:	f013 0ffd 	tst.w	r3, #253	@ 0xfd
 8019a46:	bf06      	itte	eq
 8019a48:	4602      	moveq	r2, r0
 8019a4a:	4629      	moveq	r1, r5
 8019a4c:	462a      	movne	r2, r5
 8019a4e:	4620      	mov	r0, r4
 8019a50:	f7ea faec 	bl	800402c <_ZN8touchgfx8Drawable14setWidthHeightEss>
 8019a54:	bd38      	pop	{r3, r4, r5, pc}

08019a56 <_ZN8touchgfx8TextArea12setTypedTextERKNS_9TypedTextE>:
 8019a56:	888a      	ldrh	r2, [r1, #4]
 8019a58:	8582      	strh	r2, [r0, #44]	@ 0x2c
 8019a5a:	f9b0 2008 	ldrsh.w	r2, [r0, #8]
 8019a5e:	b922      	cbnz	r2, 8019a6a <_ZN8touchgfx8TextArea12setTypedTextERKNS_9TypedTextE+0x14>
 8019a60:	f9b0 300a 	ldrsh.w	r3, [r0, #10]
 8019a64:	b90b      	cbnz	r3, 8019a6a <_ZN8touchgfx8TextArea12setTypedTextERKNS_9TypedTextE+0x14>
 8019a66:	f7ff bfd9 	b.w	8019a1c <_ZN8touchgfx8TextArea19resizeToCurrentTextEv>
 8019a6a:	4770      	bx	lr

08019a6c <_ZNK8touchgfx3Box12getSolidRectEv>:
 8019a6c:	2300      	movs	r3, #0
 8019a6e:	8083      	strh	r3, [r0, #4]
 8019a70:	80c3      	strh	r3, [r0, #6]
 8019a72:	8003      	strh	r3, [r0, #0]
 8019a74:	8043      	strh	r3, [r0, #2]
 8019a76:	f891 3026 	ldrb.w	r3, [r1, #38]	@ 0x26
 8019a7a:	2bff      	cmp	r3, #255	@ 0xff
 8019a7c:	bf01      	itttt	eq
 8019a7e:	890b      	ldrheq	r3, [r1, #8]
 8019a80:	8083      	strheq	r3, [r0, #4]
 8019a82:	894b      	ldrheq	r3, [r1, #10]
 8019a84:	80c3      	strheq	r3, [r0, #6]
 8019a86:	4770      	bx	lr

08019a88 <_ZNK8touchgfx3Box4drawERKNS_4RectE>:
 8019a88:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8019a8a:	4604      	mov	r4, r0
 8019a8c:	466b      	mov	r3, sp
 8019a8e:	6808      	ldr	r0, [r1, #0]
 8019a90:	6849      	ldr	r1, [r1, #4]
 8019a92:	c303      	stmia	r3!, {r0, r1}
 8019a94:	6823      	ldr	r3, [r4, #0]
 8019a96:	4669      	mov	r1, sp
 8019a98:	4620      	mov	r0, r4
 8019a9a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8019a9c:	4798      	blx	r3
 8019a9e:	4b08      	ldr	r3, [pc, #32]	@ (8019ac0 <_ZNK8touchgfx3Box4drawERKNS_4RectE+0x38>)
 8019aa0:	681b      	ldr	r3, [r3, #0]
 8019aa2:	f893 2076 	ldrb.w	r2, [r3, #118]	@ 0x76
 8019aa6:	b10a      	cbz	r2, 8019aac <_ZNK8touchgfx3Box4drawERKNS_4RectE+0x24>
 8019aa8:	6cd8      	ldr	r0, [r3, #76]	@ 0x4c
 8019aaa:	b900      	cbnz	r0, 8019aae <_ZNK8touchgfx3Box4drawERKNS_4RectE+0x26>
 8019aac:	6898      	ldr	r0, [r3, #8]
 8019aae:	6803      	ldr	r3, [r0, #0]
 8019ab0:	4669      	mov	r1, sp
 8019ab2:	6aa2      	ldr	r2, [r4, #40]	@ 0x28
 8019ab4:	699d      	ldr	r5, [r3, #24]
 8019ab6:	f894 3026 	ldrb.w	r3, [r4, #38]	@ 0x26
 8019aba:	47a8      	blx	r5
 8019abc:	b003      	add	sp, #12
 8019abe:	bd30      	pop	{r4, r5, pc}
 8019ac0:	2400b884 	.word	0x2400b884

08019ac4 <_ZN8touchgfx6Button10setBitmapsERKNS_6BitmapES3_>:
 8019ac4:	b570      	push	{r4, r5, r6, lr}
 8019ac6:	880b      	ldrh	r3, [r1, #0]
 8019ac8:	4605      	mov	r5, r0
 8019aca:	4604      	mov	r4, r0
 8019acc:	85c3      	strh	r3, [r0, #46]	@ 0x2e
 8019ace:	8813      	ldrh	r3, [r2, #0]
 8019ad0:	f825 3f30 	strh.w	r3, [r5, #48]!
 8019ad4:	4628      	mov	r0, r5
 8019ad6:	f005 f843 	bl	801eb60 <_ZNK8touchgfx6Bitmap8getWidthEv>
 8019ada:	4606      	mov	r6, r0
 8019adc:	4628      	mov	r0, r5
 8019ade:	f005 f879 	bl	801ebd4 <_ZNK8touchgfx6Bitmap9getHeightEv>
 8019ae2:	6823      	ldr	r3, [r4, #0]
 8019ae4:	4605      	mov	r5, r0
 8019ae6:	b231      	sxth	r1, r6
 8019ae8:	4620      	mov	r0, r4
 8019aea:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8019aec:	4798      	blx	r3
 8019aee:	6823      	ldr	r3, [r4, #0]
 8019af0:	b229      	sxth	r1, r5
 8019af2:	4620      	mov	r0, r4
 8019af4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8019af6:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8019afa:	4718      	bx	r3

08019afc <_ZNK8touchgfx6Button12getSolidRectEv>:
 8019afc:	b510      	push	{r4, lr}
 8019afe:	f891 3032 	ldrb.w	r3, [r1, #50]	@ 0x32
 8019b02:	4604      	mov	r4, r0
 8019b04:	2bff      	cmp	r3, #255	@ 0xff
 8019b06:	d006      	beq.n	8019b16 <_ZNK8touchgfx6Button12getSolidRectEv+0x1a>
 8019b08:	2300      	movs	r3, #0
 8019b0a:	8003      	strh	r3, [r0, #0]
 8019b0c:	8043      	strh	r3, [r0, #2]
 8019b0e:	8083      	strh	r3, [r0, #4]
 8019b10:	80c3      	strh	r3, [r0, #6]
 8019b12:	4620      	mov	r0, r4
 8019b14:	bd10      	pop	{r4, pc}
 8019b16:	f891 302c 	ldrb.w	r3, [r1, #44]	@ 0x2c
 8019b1a:	b11b      	cbz	r3, 8019b24 <_ZNK8touchgfx6Button12getSolidRectEv+0x28>
 8019b1c:	3130      	adds	r1, #48	@ 0x30
 8019b1e:	f005 f893 	bl	801ec48 <_ZNK8touchgfx6Bitmap12getSolidRectEv>
 8019b22:	e7f6      	b.n	8019b12 <_ZNK8touchgfx6Button12getSolidRectEv+0x16>
 8019b24:	312e      	adds	r1, #46	@ 0x2e
 8019b26:	e7fa      	b.n	8019b1e <_ZNK8touchgfx6Button12getSolidRectEv+0x22>

08019b28 <_ZNK8touchgfx6Button4drawERKNS_4RectE>:
 8019b28:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8019b2c:	f890 302c 	ldrb.w	r3, [r0, #44]	@ 0x2c
 8019b30:	b08a      	sub	sp, #40	@ 0x28
 8019b32:	4604      	mov	r4, r0
 8019b34:	4688      	mov	r8, r1
 8019b36:	2b00      	cmp	r3, #0
 8019b38:	d044      	beq.n	8019bc4 <_ZNK8touchgfx6Button4drawERKNS_4RectE+0x9c>
 8019b3a:	8e03      	ldrh	r3, [r0, #48]	@ 0x30
 8019b3c:	a805      	add	r0, sp, #20
 8019b3e:	f8ad 3014 	strh.w	r3, [sp, #20]
 8019b42:	f005 f80d 	bl	801eb60 <_ZNK8touchgfx6Bitmap8getWidthEv>
 8019b46:	4605      	mov	r5, r0
 8019b48:	b206      	sxth	r6, r0
 8019b4a:	a805      	add	r0, sp, #20
 8019b4c:	f005 f842 	bl	801ebd4 <_ZNK8touchgfx6Bitmap9getHeightEv>
 8019b50:	f9b8 2000 	ldrsh.w	r2, [r8]
 8019b54:	f8b8 7004 	ldrh.w	r7, [r8, #4]
 8019b58:	2300      	movs	r3, #0
 8019b5a:	fa0f fc80 	sxth.w	ip, r0
 8019b5e:	4417      	add	r7, r2
 8019b60:	9306      	str	r3, [sp, #24]
 8019b62:	b2bf      	uxth	r7, r7
 8019b64:	fa0f fe87 	sxth.w	lr, r7
 8019b68:	459e      	cmp	lr, r3
 8019b6a:	dd2d      	ble.n	8019bc8 <_ZNK8touchgfx6Button4drawERKNS_4RectE+0xa0>
 8019b6c:	4296      	cmp	r6, r2
 8019b6e:	dd2b      	ble.n	8019bc8 <_ZNK8touchgfx6Button4drawERKNS_4RectE+0xa0>
 8019b70:	f9b8 3002 	ldrsh.w	r3, [r8, #2]
 8019b74:	f8b8 1006 	ldrh.w	r1, [r8, #6]
 8019b78:	4419      	add	r1, r3
 8019b7a:	b289      	uxth	r1, r1
 8019b7c:	fa0f f881 	sxth.w	r8, r1
 8019b80:	f1b8 0f00 	cmp.w	r8, #0
 8019b84:	dd20      	ble.n	8019bc8 <_ZNK8touchgfx6Button4drawERKNS_4RectE+0xa0>
 8019b86:	459c      	cmp	ip, r3
 8019b88:	dd1e      	ble.n	8019bc8 <_ZNK8touchgfx6Button4drawERKNS_4RectE+0xa0>
 8019b8a:	ea22 72e2 	bic.w	r2, r2, r2, asr #31
 8019b8e:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8019b92:	4576      	cmp	r6, lr
 8019b94:	bfa8      	it	ge
 8019b96:	463d      	movge	r5, r7
 8019b98:	45c4      	cmp	ip, r8
 8019b9a:	bfa8      	it	ge
 8019b9c:	4608      	movge	r0, r1
 8019b9e:	f8ad 2018 	strh.w	r2, [sp, #24]
 8019ba2:	1aad      	subs	r5, r5, r2
 8019ba4:	1ac0      	subs	r0, r0, r3
 8019ba6:	f8ad 301a 	strh.w	r3, [sp, #26]
 8019baa:	f8ad 501c 	strh.w	r5, [sp, #28]
 8019bae:	f8ad 001e 	strh.w	r0, [sp, #30]
 8019bb2:	4b1f      	ldr	r3, [pc, #124]	@ (8019c30 <_ZNK8touchgfx6Button4drawERKNS_4RectE+0x108>)
 8019bb4:	681b      	ldr	r3, [r3, #0]
 8019bb6:	b953      	cbnz	r3, 8019bce <_ZNK8touchgfx6Button4drawERKNS_4RectE+0xa6>
 8019bb8:	4b1e      	ldr	r3, [pc, #120]	@ (8019c34 <_ZNK8touchgfx6Button4drawERKNS_4RectE+0x10c>)
 8019bba:	2187      	movs	r1, #135	@ 0x87
 8019bbc:	4a1e      	ldr	r2, [pc, #120]	@ (8019c38 <_ZNK8touchgfx6Button4drawERKNS_4RectE+0x110>)
 8019bbe:	481f      	ldr	r0, [pc, #124]	@ (8019c3c <_ZNK8touchgfx6Button4drawERKNS_4RectE+0x114>)
 8019bc0:	f011 f840 	bl	802ac44 <__assert_func>
 8019bc4:	8dc3      	ldrh	r3, [r0, #46]	@ 0x2e
 8019bc6:	e7b9      	b.n	8019b3c <_ZNK8touchgfx6Button4drawERKNS_4RectE+0x14>
 8019bc8:	2300      	movs	r3, #0
 8019bca:	9307      	str	r3, [sp, #28]
 8019bcc:	e7f1      	b.n	8019bb2 <_ZNK8touchgfx6Button4drawERKNS_4RectE+0x8a>
 8019bce:	f8bd 2014 	ldrh.w	r2, [sp, #20]
 8019bd2:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8019bd6:	429a      	cmp	r2, r3
 8019bd8:	d026      	beq.n	8019c28 <_ZNK8touchgfx6Button4drawERKNS_4RectE+0x100>
 8019bda:	f9bd 301c 	ldrsh.w	r3, [sp, #28]
 8019bde:	2b00      	cmp	r3, #0
 8019be0:	dd22      	ble.n	8019c28 <_ZNK8touchgfx6Button4drawERKNS_4RectE+0x100>
 8019be2:	f9bd 301e 	ldrsh.w	r3, [sp, #30]
 8019be6:	2b00      	cmp	r3, #0
 8019be8:	dd1e      	ble.n	8019c28 <_ZNK8touchgfx6Button4drawERKNS_4RectE+0x100>
 8019bea:	2300      	movs	r3, #0
 8019bec:	a908      	add	r1, sp, #32
 8019bee:	4620      	mov	r0, r4
 8019bf0:	e9cd 3308 	strd	r3, r3, [sp, #32]
 8019bf4:	6823      	ldr	r3, [r4, #0]
 8019bf6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8019bf8:	4798      	blx	r3
 8019bfa:	4b11      	ldr	r3, [pc, #68]	@ (8019c40 <_ZNK8touchgfx6Button4drawERKNS_4RectE+0x118>)
 8019bfc:	681b      	ldr	r3, [r3, #0]
 8019bfe:	f893 2076 	ldrb.w	r2, [r3, #118]	@ 0x76
 8019c02:	b10a      	cbz	r2, 8019c08 <_ZNK8touchgfx6Button4drawERKNS_4RectE+0xe0>
 8019c04:	6cd8      	ldr	r0, [r3, #76]	@ 0x4c
 8019c06:	b900      	cbnz	r0, 8019c0a <_ZNK8touchgfx6Button4drawERKNS_4RectE+0xe2>
 8019c08:	6898      	ldr	r0, [r3, #8]
 8019c0a:	2501      	movs	r5, #1
 8019c0c:	6801      	ldr	r1, [r0, #0]
 8019c0e:	f9bd 3022 	ldrsh.w	r3, [sp, #34]	@ 0x22
 8019c12:	9502      	str	r5, [sp, #8]
 8019c14:	f894 4032 	ldrb.w	r4, [r4, #50]	@ 0x32
 8019c18:	f9bd 2020 	ldrsh.w	r2, [sp, #32]
 8019c1c:	9401      	str	r4, [sp, #4]
 8019c1e:	ac06      	add	r4, sp, #24
 8019c20:	9400      	str	r4, [sp, #0]
 8019c22:	688c      	ldr	r4, [r1, #8]
 8019c24:	a905      	add	r1, sp, #20
 8019c26:	47a0      	blx	r4
 8019c28:	b00a      	add	sp, #40	@ 0x28
 8019c2a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8019c2e:	bf00      	nop
 8019c30:	2400b90c 	.word	0x2400b90c
 8019c34:	0802ec9c 	.word	0x0802ec9c
 8019c38:	0802ed70 	.word	0x0802ed70
 8019c3c:	0802ecd8 	.word	0x0802ecd8
 8019c40:	2400b884 	.word	0x2400b884

08019c44 <_ZNK8touchgfx23TextAreaWithOneWildcard12getTextWidthEv>:
 8019c44:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8019c46:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8019c4a:	8d81      	ldrh	r1, [r0, #44]	@ 0x2c
 8019c4c:	4606      	mov	r6, r0
 8019c4e:	4299      	cmp	r1, r3
 8019c50:	d02a      	beq.n	8019ca8 <_ZNK8touchgfx23TextAreaWithOneWildcard12getTextWidthEv+0x64>
 8019c52:	4b16      	ldr	r3, [pc, #88]	@ (8019cac <_ZNK8touchgfx23TextAreaWithOneWildcard12getTextWidthEv+0x68>)
 8019c54:	681b      	ldr	r3, [r3, #0]
 8019c56:	b92b      	cbnz	r3, 8019c64 <_ZNK8touchgfx23TextAreaWithOneWildcard12getTextWidthEv+0x20>
 8019c58:	4b15      	ldr	r3, [pc, #84]	@ (8019cb0 <_ZNK8touchgfx23TextAreaWithOneWildcard12getTextWidthEv+0x6c>)
 8019c5a:	21ae      	movs	r1, #174	@ 0xae
 8019c5c:	4a15      	ldr	r2, [pc, #84]	@ (8019cb4 <_ZNK8touchgfx23TextAreaWithOneWildcard12getTextWidthEv+0x70>)
 8019c5e:	4816      	ldr	r0, [pc, #88]	@ (8019cb8 <_ZNK8touchgfx23TextAreaWithOneWildcard12getTextWidthEv+0x74>)
 8019c60:	f010 fff0 	bl	802ac44 <__assert_func>
 8019c64:	4a15      	ldr	r2, [pc, #84]	@ (8019cbc <_ZNK8touchgfx23TextAreaWithOneWildcard12getTextWidthEv+0x78>)
 8019c66:	8812      	ldrh	r2, [r2, #0]
 8019c68:	428a      	cmp	r2, r1
 8019c6a:	d803      	bhi.n	8019c74 <_ZNK8touchgfx23TextAreaWithOneWildcard12getTextWidthEv+0x30>
 8019c6c:	4b14      	ldr	r3, [pc, #80]	@ (8019cc0 <_ZNK8touchgfx23TextAreaWithOneWildcard12getTextWidthEv+0x7c>)
 8019c6e:	21af      	movs	r1, #175	@ 0xaf
 8019c70:	4a10      	ldr	r2, [pc, #64]	@ (8019cb4 <_ZNK8touchgfx23TextAreaWithOneWildcard12getTextWidthEv+0x70>)
 8019c72:	e7f4      	b.n	8019c5e <_ZNK8touchgfx23TextAreaWithOneWildcard12getTextWidthEv+0x1a>
 8019c74:	eb03 0241 	add.w	r2, r3, r1, lsl #1
 8019c78:	f813 0011 	ldrb.w	r0, [r3, r1, lsl #1]
 8019c7c:	4b11      	ldr	r3, [pc, #68]	@ (8019cc4 <_ZNK8touchgfx23TextAreaWithOneWildcard12getTextWidthEv+0x80>)
 8019c7e:	7854      	ldrb	r4, [r2, #1]
 8019c80:	681b      	ldr	r3, [r3, #0]
 8019c82:	f3c4 0481 	ubfx	r4, r4, #2, #2
 8019c86:	f853 5020 	ldr.w	r5, [r3, r0, lsl #2]
 8019c8a:	682b      	ldr	r3, [r5, #0]
 8019c8c:	69df      	ldr	r7, [r3, #28]
 8019c8e:	4b0e      	ldr	r3, [pc, #56]	@ (8019cc8 <_ZNK8touchgfx23TextAreaWithOneWildcard12getTextWidthEv+0x84>)
 8019c90:	6818      	ldr	r0, [r3, #0]
 8019c92:	f7f0 f98d 	bl	8009fb0 <_ZNK8touchgfx5Texts7getTextEt>
 8019c96:	2300      	movs	r3, #0
 8019c98:	4602      	mov	r2, r0
 8019c9a:	4621      	mov	r1, r4
 8019c9c:	9300      	str	r3, [sp, #0]
 8019c9e:	4628      	mov	r0, r5
 8019ca0:	6bf3      	ldr	r3, [r6, #60]	@ 0x3c
 8019ca2:	47b8      	blx	r7
 8019ca4:	b003      	add	sp, #12
 8019ca6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8019ca8:	2000      	movs	r0, #0
 8019caa:	e7fb      	b.n	8019ca4 <_ZNK8touchgfx23TextAreaWithOneWildcard12getTextWidthEv+0x60>
 8019cac:	2400b8d4 	.word	0x2400b8d4
 8019cb0:	0802ead0 	.word	0x0802ead0
 8019cb4:	0802ee1c 	.word	0x0802ee1c
 8019cb8:	0802eb12 	.word	0x0802eb12
 8019cbc:	2400b8d8 	.word	0x2400b8d8
 8019cc0:	0802eb3b 	.word	0x0802eb3b
 8019cc4:	2400b8dc 	.word	0x2400b8dc
 8019cc8:	2400b8e0 	.word	0x2400b8e0

08019ccc <_ZN8touchgfx23TextAreaWithOneWildcard13getTextHeightEv>:
 8019ccc:	b570      	push	{r4, r5, r6, lr}
 8019cce:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8019cd2:	8d81      	ldrh	r1, [r0, #44]	@ 0x2c
 8019cd4:	4604      	mov	r4, r0
 8019cd6:	4299      	cmp	r1, r3
 8019cd8:	d01e      	beq.n	8019d18 <_ZN8touchgfx23TextAreaWithOneWildcard13getTextHeightEv+0x4c>
 8019cda:	6803      	ldr	r3, [r0, #0]
 8019cdc:	6edd      	ldr	r5, [r3, #108]	@ 0x6c
 8019cde:	4b0f      	ldr	r3, [pc, #60]	@ (8019d1c <_ZN8touchgfx23TextAreaWithOneWildcard13getTextHeightEv+0x50>)
 8019ce0:	681b      	ldr	r3, [r3, #0]
 8019ce2:	b92b      	cbnz	r3, 8019cf0 <_ZN8touchgfx23TextAreaWithOneWildcard13getTextHeightEv+0x24>
 8019ce4:	4b0e      	ldr	r3, [pc, #56]	@ (8019d20 <_ZN8touchgfx23TextAreaWithOneWildcard13getTextHeightEv+0x54>)
 8019ce6:	21ae      	movs	r1, #174	@ 0xae
 8019ce8:	4a0e      	ldr	r2, [pc, #56]	@ (8019d24 <_ZN8touchgfx23TextAreaWithOneWildcard13getTextHeightEv+0x58>)
 8019cea:	480f      	ldr	r0, [pc, #60]	@ (8019d28 <_ZN8touchgfx23TextAreaWithOneWildcard13getTextHeightEv+0x5c>)
 8019cec:	f010 ffaa 	bl	802ac44 <__assert_func>
 8019cf0:	4b0e      	ldr	r3, [pc, #56]	@ (8019d2c <_ZN8touchgfx23TextAreaWithOneWildcard13getTextHeightEv+0x60>)
 8019cf2:	881b      	ldrh	r3, [r3, #0]
 8019cf4:	428b      	cmp	r3, r1
 8019cf6:	d803      	bhi.n	8019d00 <_ZN8touchgfx23TextAreaWithOneWildcard13getTextHeightEv+0x34>
 8019cf8:	4b0d      	ldr	r3, [pc, #52]	@ (8019d30 <_ZN8touchgfx23TextAreaWithOneWildcard13getTextHeightEv+0x64>)
 8019cfa:	21af      	movs	r1, #175	@ 0xaf
 8019cfc:	4a09      	ldr	r2, [pc, #36]	@ (8019d24 <_ZN8touchgfx23TextAreaWithOneWildcard13getTextHeightEv+0x58>)
 8019cfe:	e7f4      	b.n	8019cea <_ZN8touchgfx23TextAreaWithOneWildcard13getTextHeightEv+0x1e>
 8019d00:	4b0c      	ldr	r3, [pc, #48]	@ (8019d34 <_ZN8touchgfx23TextAreaWithOneWildcard13getTextHeightEv+0x68>)
 8019d02:	6818      	ldr	r0, [r3, #0]
 8019d04:	f7f0 f954 	bl	8009fb0 <_ZNK8touchgfx5Texts7getTextEt>
 8019d08:	6be2      	ldr	r2, [r4, #60]	@ 0x3c
 8019d0a:	4601      	mov	r1, r0
 8019d0c:	46ac      	mov	ip, r5
 8019d0e:	4620      	mov	r0, r4
 8019d10:	2300      	movs	r3, #0
 8019d12:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8019d16:	4760      	bx	ip
 8019d18:	2000      	movs	r0, #0
 8019d1a:	bd70      	pop	{r4, r5, r6, pc}
 8019d1c:	2400b8d4 	.word	0x2400b8d4
 8019d20:	0802ead0 	.word	0x0802ead0
 8019d24:	0802ee1c 	.word	0x0802ee1c
 8019d28:	0802eb12 	.word	0x0802eb12
 8019d2c:	2400b8d8 	.word	0x2400b8d8
 8019d30:	0802eb3b 	.word	0x0802eb3b
 8019d34:	2400b8e0 	.word	0x2400b8e0

08019d38 <_ZNK8touchgfx23TextAreaWithOneWildcard4drawERKNS_4RectE>:
 8019d38:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8019d3c:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8019d40:	8d83      	ldrh	r3, [r0, #44]	@ 0x2c
 8019d42:	b08c      	sub	sp, #48	@ 0x30
 8019d44:	4604      	mov	r4, r0
 8019d46:	4293      	cmp	r3, r2
 8019d48:	460e      	mov	r6, r1
 8019d4a:	d05d      	beq.n	8019e08 <_ZNK8touchgfx23TextAreaWithOneWildcard4drawERKNS_4RectE+0xd0>
 8019d4c:	f8df 80dc 	ldr.w	r8, [pc, #220]	@ 8019e2c <_ZNK8touchgfx23TextAreaWithOneWildcard4drawERKNS_4RectE+0xf4>
 8019d50:	f8d8 2000 	ldr.w	r2, [r8]
 8019d54:	b92a      	cbnz	r2, 8019d62 <_ZNK8touchgfx23TextAreaWithOneWildcard4drawERKNS_4RectE+0x2a>
 8019d56:	4b2e      	ldr	r3, [pc, #184]	@ (8019e10 <_ZNK8touchgfx23TextAreaWithOneWildcard4drawERKNS_4RectE+0xd8>)
 8019d58:	21ae      	movs	r1, #174	@ 0xae
 8019d5a:	4a2e      	ldr	r2, [pc, #184]	@ (8019e14 <_ZNK8touchgfx23TextAreaWithOneWildcard4drawERKNS_4RectE+0xdc>)
 8019d5c:	482e      	ldr	r0, [pc, #184]	@ (8019e18 <_ZNK8touchgfx23TextAreaWithOneWildcard4drawERKNS_4RectE+0xe0>)
 8019d5e:	f010 ff71 	bl	802ac44 <__assert_func>
 8019d62:	4f2e      	ldr	r7, [pc, #184]	@ (8019e1c <_ZNK8touchgfx23TextAreaWithOneWildcard4drawERKNS_4RectE+0xe4>)
 8019d64:	8839      	ldrh	r1, [r7, #0]
 8019d66:	4299      	cmp	r1, r3
 8019d68:	d803      	bhi.n	8019d72 <_ZNK8touchgfx23TextAreaWithOneWildcard4drawERKNS_4RectE+0x3a>
 8019d6a:	4b2d      	ldr	r3, [pc, #180]	@ (8019e20 <_ZNK8touchgfx23TextAreaWithOneWildcard4drawERKNS_4RectE+0xe8>)
 8019d6c:	21af      	movs	r1, #175	@ 0xaf
 8019d6e:	4a29      	ldr	r2, [pc, #164]	@ (8019e14 <_ZNK8touchgfx23TextAreaWithOneWildcard4drawERKNS_4RectE+0xdc>)
 8019d70:	e7f4      	b.n	8019d5c <_ZNK8touchgfx23TextAreaWithOneWildcard4drawERKNS_4RectE+0x24>
 8019d72:	eb02 0143 	add.w	r1, r2, r3, lsl #1
 8019d76:	f812 2013 	ldrb.w	r2, [r2, r3, lsl #1]
 8019d7a:	4b2a      	ldr	r3, [pc, #168]	@ (8019e24 <_ZNK8touchgfx23TextAreaWithOneWildcard4drawERKNS_4RectE+0xec>)
 8019d7c:	681b      	ldr	r3, [r3, #0]
 8019d7e:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8019d82:	2a00      	cmp	r2, #0
 8019d84:	d040      	beq.n	8019e08 <_ZNK8touchgfx23TextAreaWithOneWildcard4drawERKNS_4RectE+0xd0>
 8019d86:	784b      	ldrb	r3, [r1, #1]
 8019d88:	f890 5037 	ldrb.w	r5, [r0, #55]	@ 0x37
 8019d8c:	f890 1039 	ldrb.w	r1, [r0, #57]	@ 0x39
 8019d90:	f3c3 0a01 	ubfx	sl, r3, #0, #2
 8019d94:	f890 c036 	ldrb.w	ip, [r0, #54]	@ 0x36
 8019d98:	f3c3 0381 	ubfx	r3, r3, #2, #2
 8019d9c:	f9b0 e034 	ldrsh.w	lr, [r0, #52]	@ 0x34
 8019da0:	f890 9038 	ldrb.w	r9, [r0, #56]	@ 0x38
 8019da4:	f88d 502b 	strb.w	r5, [sp, #43]	@ 0x2b
 8019da8:	ad05      	add	r5, sp, #20
 8019daa:	6b00      	ldr	r0, [r0, #48]	@ 0x30
 8019dac:	f88d 3021 	strb.w	r3, [sp, #33]	@ 0x21
 8019db0:	9207      	str	r2, [sp, #28]
 8019db2:	f88d 9022 	strb.w	r9, [sp, #34]	@ 0x22
 8019db6:	f8ad e028 	strh.w	lr, [sp, #40]	@ 0x28
 8019dba:	f88d c02a 	strb.w	ip, [sp, #42]	@ 0x2a
 8019dbe:	f88d 102c 	strb.w	r1, [sp, #44]	@ 0x2c
 8019dc2:	f88d a020 	strb.w	sl, [sp, #32]
 8019dc6:	9009      	str	r0, [sp, #36]	@ 0x24
 8019dc8:	f7ea f9ca 	bl	8004160 <_ZN8touchgfx3HAL3lcdEv>
 8019dcc:	4621      	mov	r1, r4
 8019dce:	4681      	mov	r9, r0
 8019dd0:	4628      	mov	r0, r5
 8019dd2:	f002 fe2b 	bl	801ca2c <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 8019dd6:	f8d8 3000 	ldr.w	r3, [r8]
 8019dda:	2b00      	cmp	r3, #0
 8019ddc:	d0bb      	beq.n	8019d56 <_ZNK8touchgfx23TextAreaWithOneWildcard4drawERKNS_4RectE+0x1e>
 8019dde:	8da1      	ldrh	r1, [r4, #44]	@ 0x2c
 8019de0:	883b      	ldrh	r3, [r7, #0]
 8019de2:	428b      	cmp	r3, r1
 8019de4:	d9c1      	bls.n	8019d6a <_ZNK8touchgfx23TextAreaWithOneWildcard4drawERKNS_4RectE+0x32>
 8019de6:	4b10      	ldr	r3, [pc, #64]	@ (8019e28 <_ZNK8touchgfx23TextAreaWithOneWildcard4drawERKNS_4RectE+0xf0>)
 8019de8:	6818      	ldr	r0, [r3, #0]
 8019dea:	f7f0 f8e1 	bl	8009fb0 <_ZNK8touchgfx5Texts7getTextEt>
 8019dee:	2300      	movs	r3, #0
 8019df0:	9303      	str	r3, [sp, #12]
 8019df2:	6be3      	ldr	r3, [r4, #60]	@ 0x3c
 8019df4:	e9cd 0301 	strd	r0, r3, [sp, #4]
 8019df8:	ab07      	add	r3, sp, #28
 8019dfa:	4648      	mov	r0, r9
 8019dfc:	9300      	str	r3, [sp, #0]
 8019dfe:	4633      	mov	r3, r6
 8019e00:	e895 0006 	ldmia.w	r5, {r1, r2}
 8019e04:	f7f0 f865 	bl	8009ed2 <_ZN8touchgfx3LCD10drawStringENS_4RectERKS1_RKNS0_13StringVisualsEPKtz>
 8019e08:	b00c      	add	sp, #48	@ 0x30
 8019e0a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8019e0e:	bf00      	nop
 8019e10:	0802ead0 	.word	0x0802ead0
 8019e14:	0802ee1c 	.word	0x0802ee1c
 8019e18:	0802eb12 	.word	0x0802eb12
 8019e1c:	2400b8d8 	.word	0x2400b8d8
 8019e20:	0802eb3b 	.word	0x0802eb3b
 8019e24:	2400b8dc 	.word	0x2400b8dc
 8019e28:	2400b8e0 	.word	0x2400b8e0
 8019e2c:	2400b8d4 	.word	0x2400b8d4

08019e30 <_ZNK8touchgfx13BoxWithBorder4drawERKNS_4RectE>:
 8019e30:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8019e34:	8e03      	ldrh	r3, [r0, #48]	@ 0x30
 8019e36:	4604      	mov	r4, r0
 8019e38:	460e      	mov	r6, r1
 8019e3a:	b08e      	sub	sp, #56	@ 0x38
 8019e3c:	b218      	sxth	r0, r3
 8019e3e:	8921      	ldrh	r1, [r4, #8]
 8019e40:	005b      	lsls	r3, r3, #1
 8019e42:	8962      	ldrh	r2, [r4, #10]
 8019e44:	f8ad 0000 	strh.w	r0, [sp]
 8019e48:	b29b      	uxth	r3, r3
 8019e4a:	f8ad 0002 	strh.w	r0, [sp, #2]
 8019e4e:	1ac9      	subs	r1, r1, r3
 8019e50:	1ad3      	subs	r3, r2, r3
 8019e52:	b209      	sxth	r1, r1
 8019e54:	b21b      	sxth	r3, r3
 8019e56:	2900      	cmp	r1, #0
 8019e58:	f8ad 1004 	strh.w	r1, [sp, #4]
 8019e5c:	f8ad 3006 	strh.w	r3, [sp, #6]
 8019e60:	dd5e      	ble.n	8019f20 <_ZNK8touchgfx13BoxWithBorder4drawERKNS_4RectE+0xf0>
 8019e62:	2b00      	cmp	r3, #0
 8019e64:	dd5c      	ble.n	8019f20 <_ZNK8touchgfx13BoxWithBorder4drawERKNS_4RectE+0xf0>
 8019e66:	6830      	ldr	r0, [r6, #0]
 8019e68:	ab02      	add	r3, sp, #8
 8019e6a:	6871      	ldr	r1, [r6, #4]
 8019e6c:	c303      	stmia	r3!, {r0, r1}
 8019e6e:	4669      	mov	r1, sp
 8019e70:	a802      	add	r0, sp, #8
 8019e72:	f7fe f807 	bl	8017e84 <_ZN8touchgfx4RectaNERKS0_>
 8019e76:	4620      	mov	r0, r4
 8019e78:	a902      	add	r1, sp, #8
 8019e7a:	f7ff fe05 	bl	8019a88 <_ZNK8touchgfx3Box4drawERKNS_4RectE>
 8019e7e:	8e20      	ldrh	r0, [r4, #48]	@ 0x30
 8019e80:	2800      	cmp	r0, #0
 8019e82:	d05f      	beq.n	8019f44 <_ZNK8touchgfx13BoxWithBorder4drawERKNS_4RectE+0x114>
 8019e84:	8963      	ldrh	r3, [r4, #10]
 8019e86:	b202      	sxth	r2, r0
 8019e88:	f9b4 1008 	ldrsh.w	r1, [r4, #8]
 8019e8c:	2500      	movs	r5, #0
 8019e8e:	1a1f      	subs	r7, r3, r0
 8019e90:	eba3 0340 	sub.w	r3, r3, r0, lsl #1
 8019e94:	f8ad 101c 	strh.w	r1, [sp, #28]
 8019e98:	b21b      	sxth	r3, r3
 8019e9a:	f8ad 7022 	strh.w	r7, [sp, #34]	@ 0x22
 8019e9e:	f8ad 1024 	strh.w	r1, [sp, #36]	@ 0x24
 8019ea2:	af04      	add	r7, sp, #16
 8019ea4:	1a09      	subs	r1, r1, r0
 8019ea6:	9506      	str	r5, [sp, #24]
 8019ea8:	f8ad 201e 	strh.w	r2, [sp, #30]
 8019eac:	f8ad 5020 	strh.w	r5, [sp, #32]
 8019eb0:	f8ad 2026 	strh.w	r2, [sp, #38]	@ 0x26
 8019eb4:	f8ad 5028 	strh.w	r5, [sp, #40]	@ 0x28
 8019eb8:	f8ad 202a 	strh.w	r2, [sp, #42]	@ 0x2a
 8019ebc:	f8ad 202c 	strh.w	r2, [sp, #44]	@ 0x2c
 8019ec0:	f8ad 302e 	strh.w	r3, [sp, #46]	@ 0x2e
 8019ec4:	f8ad 1030 	strh.w	r1, [sp, #48]	@ 0x30
 8019ec8:	f8ad 2032 	strh.w	r2, [sp, #50]	@ 0x32
 8019ecc:	f8ad 2034 	strh.w	r2, [sp, #52]	@ 0x34
 8019ed0:	f8ad 3036 	strh.w	r3, [sp, #54]	@ 0x36
 8019ed4:	ab06      	add	r3, sp, #24
 8019ed6:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 8019eda:	e893 0003 	ldmia.w	r3, {r0, r1}
 8019ede:	e887 0003 	stmia.w	r7, {r0, r1}
 8019ee2:	4631      	mov	r1, r6
 8019ee4:	4638      	mov	r0, r7
 8019ee6:	f7fd ffcd 	bl	8017e84 <_ZN8touchgfx4RectaNERKS0_>
 8019eea:	f9bd 3014 	ldrsh.w	r3, [sp, #20]
 8019eee:	2b00      	cmp	r3, #0
 8019ef0:	dd12      	ble.n	8019f18 <_ZNK8touchgfx13BoxWithBorder4drawERKNS_4RectE+0xe8>
 8019ef2:	f9bd 3016 	ldrsh.w	r3, [sp, #22]
 8019ef6:	2b00      	cmp	r3, #0
 8019ef8:	dd0e      	ble.n	8019f18 <_ZNK8touchgfx13BoxWithBorder4drawERKNS_4RectE+0xe8>
 8019efa:	6823      	ldr	r3, [r4, #0]
 8019efc:	4639      	mov	r1, r7
 8019efe:	4620      	mov	r0, r4
 8019f00:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8019f02:	4798      	blx	r3
 8019f04:	f7ea f92c 	bl	8004160 <_ZN8touchgfx3HAL3lcdEv>
 8019f08:	6803      	ldr	r3, [r0, #0]
 8019f0a:	6ae2      	ldr	r2, [r4, #44]	@ 0x2c
 8019f0c:	4639      	mov	r1, r7
 8019f0e:	f8d3 8018 	ldr.w	r8, [r3, #24]
 8019f12:	f894 3026 	ldrb.w	r3, [r4, #38]	@ 0x26
 8019f16:	47c0      	blx	r8
 8019f18:	3501      	adds	r5, #1
 8019f1a:	2d04      	cmp	r5, #4
 8019f1c:	d1da      	bne.n	8019ed4 <_ZNK8touchgfx13BoxWithBorder4drawERKNS_4RectE+0xa4>
 8019f1e:	e011      	b.n	8019f44 <_ZNK8touchgfx13BoxWithBorder4drawERKNS_4RectE+0x114>
 8019f20:	6830      	ldr	r0, [r6, #0]
 8019f22:	ab06      	add	r3, sp, #24
 8019f24:	6871      	ldr	r1, [r6, #4]
 8019f26:	c303      	stmia	r3!, {r0, r1}
 8019f28:	6823      	ldr	r3, [r4, #0]
 8019f2a:	a906      	add	r1, sp, #24
 8019f2c:	4620      	mov	r0, r4
 8019f2e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8019f30:	4798      	blx	r3
 8019f32:	f7ea f915 	bl	8004160 <_ZN8touchgfx3HAL3lcdEv>
 8019f36:	6803      	ldr	r3, [r0, #0]
 8019f38:	6ae2      	ldr	r2, [r4, #44]	@ 0x2c
 8019f3a:	a906      	add	r1, sp, #24
 8019f3c:	699d      	ldr	r5, [r3, #24]
 8019f3e:	f894 3026 	ldrb.w	r3, [r4, #38]	@ 0x26
 8019f42:	47a8      	blx	r5
 8019f44:	b00e      	add	sp, #56	@ 0x38
 8019f46:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08019f4a <_ZN8touchgfx5Image9setBitmapERKNS_6BitmapE>:
 8019f4a:	b570      	push	{r4, r5, r6, lr}
 8019f4c:	880b      	ldrh	r3, [r1, #0]
 8019f4e:	460d      	mov	r5, r1
 8019f50:	4604      	mov	r4, r0
 8019f52:	84c3      	strh	r3, [r0, #38]	@ 0x26
 8019f54:	4608      	mov	r0, r1
 8019f56:	f004 fe03 	bl	801eb60 <_ZNK8touchgfx6Bitmap8getWidthEv>
 8019f5a:	4606      	mov	r6, r0
 8019f5c:	4628      	mov	r0, r5
 8019f5e:	f004 fe39 	bl	801ebd4 <_ZNK8touchgfx6Bitmap9getHeightEv>
 8019f62:	6823      	ldr	r3, [r4, #0]
 8019f64:	4605      	mov	r5, r0
 8019f66:	b231      	sxth	r1, r6
 8019f68:	4620      	mov	r0, r4
 8019f6a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8019f6c:	4798      	blx	r3
 8019f6e:	6823      	ldr	r3, [r4, #0]
 8019f70:	b229      	sxth	r1, r5
 8019f72:	4620      	mov	r0, r4
 8019f74:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8019f76:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8019f7a:	4718      	bx	r3

08019f7c <_ZNK8touchgfx5Image12getSolidRectEv>:
 8019f7c:	b510      	push	{r4, lr}
 8019f7e:	f891 3028 	ldrb.w	r3, [r1, #40]	@ 0x28
 8019f82:	4604      	mov	r4, r0
 8019f84:	2bff      	cmp	r3, #255	@ 0xff
 8019f86:	d006      	beq.n	8019f96 <_ZNK8touchgfx5Image12getSolidRectEv+0x1a>
 8019f88:	2300      	movs	r3, #0
 8019f8a:	8003      	strh	r3, [r0, #0]
 8019f8c:	8043      	strh	r3, [r0, #2]
 8019f8e:	8083      	strh	r3, [r0, #4]
 8019f90:	80c3      	strh	r3, [r0, #6]
 8019f92:	4620      	mov	r0, r4
 8019f94:	bd10      	pop	{r4, pc}
 8019f96:	3126      	adds	r1, #38	@ 0x26
 8019f98:	f004 fe56 	bl	801ec48 <_ZNK8touchgfx6Bitmap12getSolidRectEv>
 8019f9c:	e7f9      	b.n	8019f92 <_ZNK8touchgfx5Image12getSolidRectEv+0x16>
	...

08019fa0 <_ZNK8touchgfx5Image4drawERKNS_4RectE>:
 8019fa0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8019fa4:	4604      	mov	r4, r0
 8019fa6:	b088      	sub	sp, #32
 8019fa8:	2500      	movs	r5, #0
 8019faa:	460f      	mov	r7, r1
 8019fac:	f854 3b26 	ldr.w	r3, [r4], #38
 8019fb0:	a904      	add	r1, sp, #16
 8019fb2:	4606      	mov	r6, r0
 8019fb4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8019fb6:	e9cd 5504 	strd	r5, r5, [sp, #16]
 8019fba:	4798      	blx	r3
 8019fbc:	4620      	mov	r0, r4
 8019fbe:	f004 fdcf 	bl	801eb60 <_ZNK8touchgfx6Bitmap8getWidthEv>
 8019fc2:	4680      	mov	r8, r0
 8019fc4:	4620      	mov	r0, r4
 8019fc6:	f004 fe05 	bl	801ebd4 <_ZNK8touchgfx6Bitmap9getHeightEv>
 8019fca:	9506      	str	r5, [sp, #24]
 8019fcc:	ad06      	add	r5, sp, #24
 8019fce:	f8ad 001e 	strh.w	r0, [sp, #30]
 8019fd2:	4639      	mov	r1, r7
 8019fd4:	f8ad 801c 	strh.w	r8, [sp, #28]
 8019fd8:	4628      	mov	r0, r5
 8019fda:	f7fd ff53 	bl	8017e84 <_ZN8touchgfx4RectaNERKS0_>
 8019fde:	f9bd 301c 	ldrsh.w	r3, [sp, #28]
 8019fe2:	2b00      	cmp	r3, #0
 8019fe4:	dd19      	ble.n	801a01a <_ZNK8touchgfx5Image4drawERKNS_4RectE+0x7a>
 8019fe6:	f9bd 301e 	ldrsh.w	r3, [sp, #30]
 8019fea:	2b00      	cmp	r3, #0
 8019fec:	dd15      	ble.n	801a01a <_ZNK8touchgfx5Image4drawERKNS_4RectE+0x7a>
 8019fee:	4b0c      	ldr	r3, [pc, #48]	@ (801a020 <_ZNK8touchgfx5Image4drawERKNS_4RectE+0x80>)
 8019ff0:	681b      	ldr	r3, [r3, #0]
 8019ff2:	f893 2076 	ldrb.w	r2, [r3, #118]	@ 0x76
 8019ff6:	b10a      	cbz	r2, 8019ffc <_ZNK8touchgfx5Image4drawERKNS_4RectE+0x5c>
 8019ff8:	6cd8      	ldr	r0, [r3, #76]	@ 0x4c
 8019ffa:	b900      	cbnz	r0, 8019ffe <_ZNK8touchgfx5Image4drawERKNS_4RectE+0x5e>
 8019ffc:	6898      	ldr	r0, [r3, #8]
 8019ffe:	2701      	movs	r7, #1
 801a000:	6801      	ldr	r1, [r0, #0]
 801a002:	f9bd 3012 	ldrsh.w	r3, [sp, #18]
 801a006:	9702      	str	r7, [sp, #8]
 801a008:	f896 6028 	ldrb.w	r6, [r6, #40]	@ 0x28
 801a00c:	f9bd 2010 	ldrsh.w	r2, [sp, #16]
 801a010:	e9cd 5600 	strd	r5, r6, [sp]
 801a014:	688d      	ldr	r5, [r1, #8]
 801a016:	4621      	mov	r1, r4
 801a018:	47a8      	blx	r5
 801a01a:	b008      	add	sp, #32
 801a01c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801a020:	2400b884 	.word	0x2400b884

0801a024 <_ZN8touchgfx3LCD27supportDynamicBitmapDrawingENS_6Bitmap12BitmapFormatE>:
 801a024:	b510      	push	{r4, lr}
 801a026:	6803      	ldr	r3, [r0, #0]
 801a028:	460c      	mov	r4, r1
 801a02a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801a02c:	4798      	blx	r3
 801a02e:	1b03      	subs	r3, r0, r4
 801a030:	4258      	negs	r0, r3
 801a032:	4158      	adcs	r0, r3
 801a034:	bd10      	pop	{r4, pc}
	...

0801a038 <_ZN8touchgfx3LCD15setDefaultColorENS_9colortypeE>:
 801a038:	4b01      	ldr	r3, [pc, #4]	@ (801a040 <_ZN8touchgfx3LCD15setDefaultColorENS_9colortypeE+0x8>)
 801a03a:	6019      	str	r1, [r3, #0]
 801a03c:	4770      	bx	lr
 801a03e:	bf00      	nop
 801a040:	2400b88c 	.word	0x2400b88c

0801a044 <_ZN8touchgfx3LCD18drawTextureMapQuadERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht>:
 801a044:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801a048:	4696      	mov	lr, r2
 801a04a:	b097      	sub	sp, #92	@ 0x5c
 801a04c:	4605      	mov	r5, r0
 801a04e:	4614      	mov	r4, r2
 801a050:	460e      	mov	r6, r1
 801a052:	461f      	mov	r7, r3
 801a054:	f10d 0c1c 	add.w	ip, sp, #28
 801a058:	f8bd 8088 	ldrh.w	r8, [sp, #136]	@ 0x88
 801a05c:	f89d 908c 	ldrb.w	r9, [sp, #140]	@ 0x8c
 801a060:	f8bd a090 	ldrh.w	sl, [sp, #144]	@ 0x90
 801a064:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 801a068:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 801a06c:	f8de 3000 	ldr.w	r3, [lr]
 801a070:	f104 0e14 	add.w	lr, r4, #20
 801a074:	f8cc 3000 	str.w	r3, [ip]
 801a078:	f10d 0c30 	add.w	ip, sp, #48	@ 0x30
 801a07c:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 801a080:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 801a084:	f8de 3000 	ldr.w	r3, [lr]
 801a088:	f104 0e28 	add.w	lr, r4, #40	@ 0x28
 801a08c:	f8cc 3000 	str.w	r3, [ip]
 801a090:	f10d 0c44 	add.w	ip, sp, #68	@ 0x44
 801a094:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 801a098:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 801a09c:	f8de 3000 	ldr.w	r3, [lr]
 801a0a0:	4631      	mov	r1, r6
 801a0a2:	9a21      	ldr	r2, [sp, #132]	@ 0x84
 801a0a4:	4628      	mov	r0, r5
 801a0a6:	f8cc 3000 	str.w	r3, [ip]
 801a0aa:	682b      	ldr	r3, [r5, #0]
 801a0ac:	9201      	str	r2, [sp, #4]
 801a0ae:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 801a0b0:	f8cd 8008 	str.w	r8, [sp, #8]
 801a0b4:	9200      	str	r2, [sp, #0]
 801a0b6:	aa07      	add	r2, sp, #28
 801a0b8:	e9cd 9a03 	strd	r9, sl, [sp, #12]
 801a0bc:	f8d3 b034 	ldr.w	fp, [r3, #52]	@ 0x34
 801a0c0:	463b      	mov	r3, r7
 801a0c2:	47d8      	blx	fp
 801a0c4:	46a6      	mov	lr, r4
 801a0c6:	f10d 0c1c 	add.w	ip, sp, #28
 801a0ca:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 801a0ce:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 801a0d2:	f8de 3000 	ldr.w	r3, [lr]
 801a0d6:	f104 0e28 	add.w	lr, r4, #40	@ 0x28
 801a0da:	343c      	adds	r4, #60	@ 0x3c
 801a0dc:	f8cc 3000 	str.w	r3, [ip]
 801a0e0:	f10d 0c30 	add.w	ip, sp, #48	@ 0x30
 801a0e4:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 801a0e8:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 801a0ec:	f8de 3000 	ldr.w	r3, [lr]
 801a0f0:	f8cc 3000 	str.w	r3, [ip]
 801a0f4:	f10d 0c44 	add.w	ip, sp, #68	@ 0x44
 801a0f8:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 801a0fa:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 801a0fe:	6823      	ldr	r3, [r4, #0]
 801a100:	4631      	mov	r1, r6
 801a102:	4628      	mov	r0, r5
 801a104:	f8cc 3000 	str.w	r3, [ip]
 801a108:	682b      	ldr	r3, [r5, #0]
 801a10a:	e9cd 9a03 	strd	r9, sl, [sp, #12]
 801a10e:	9a21      	ldr	r2, [sp, #132]	@ 0x84
 801a110:	f8cd 8008 	str.w	r8, [sp, #8]
 801a114:	9201      	str	r2, [sp, #4]
 801a116:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 801a118:	9200      	str	r2, [sp, #0]
 801a11a:	aa07      	add	r2, sp, #28
 801a11c:	6b5c      	ldr	r4, [r3, #52]	@ 0x34
 801a11e:	463b      	mov	r3, r7
 801a120:	47a0      	blx	r4
 801a122:	b017      	add	sp, #92	@ 0x5c
 801a124:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0801a128 <_ZN8touchgfx3LCD28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth>:
 801a128:	2000      	movs	r0, #0
 801a12a:	4770      	bx	lr

0801a12c <_ZN8touchgfx3LCD22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht>:
 801a12c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801a130:	b08d      	sub	sp, #52	@ 0x34
 801a132:	4688      	mov	r8, r1
 801a134:	f8d3 c000 	ldr.w	ip, [r3]
 801a138:	9916      	ldr	r1, [sp, #88]	@ 0x58
 801a13a:	f8bd 4070 	ldrh.w	r4, [sp, #112]	@ 0x70
 801a13e:	680f      	ldr	r7, [r1, #0]
 801a140:	ed92 4a09 	vldr	s8, [r2, #36]	@ 0x24
 801a144:	eba7 070c 	sub.w	r7, r7, ip
 801a148:	edd2 4a0b 	vldr	s9, [r2, #44]	@ 0x2c
 801a14c:	edd3 6a07 	vldr	s13, [r3, #28]
 801a150:	42bc      	cmp	r4, r7
 801a152:	9918      	ldr	r1, [sp, #96]	@ 0x60
 801a154:	f8dd a064 	ldr.w	sl, [sp, #100]	@ 0x64
 801a158:	bfa8      	it	ge
 801a15a:	463c      	movge	r4, r7
 801a15c:	f9b1 9000 	ldrsh.w	r9, [r1]
 801a160:	f9ba 1000 	ldrsh.w	r1, [sl]
 801a164:	ee07 4a90 	vmov	s15, r4
 801a168:	eb09 0e0c 	add.w	lr, r9, ip
 801a16c:	edd3 1a0a 	vldr	s3, [r3, #40]	@ 0x28
 801a170:	eeb8 5ae7 	vcvt.f32.s32	s10, s15
 801a174:	edd2 7a0d 	vldr	s15, [r2, #52]	@ 0x34
 801a178:	ed93 2a0d 	vldr	s4, [r3, #52]	@ 0x34
 801a17c:	4571      	cmp	r1, lr
 801a17e:	ee25 4a04 	vmul.f32	s8, s10, s8
 801a182:	ee65 4a24 	vmul.f32	s9, s10, s9
 801a186:	ee25 5a27 	vmul.f32	s10, s10, s15
 801a18a:	eef7 7a00 	vmov.f32	s15, #112	@ 0x3f800000  1.0
 801a18e:	ee71 0aa4 	vadd.f32	s1, s3, s9
 801a192:	ee32 1a05 	vadd.f32	s2, s4, s10
 801a196:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 801a19a:	ee36 0a84 	vadd.f32	s0, s13, s8
 801a19e:	ee61 1a87 	vmul.f32	s3, s3, s14
 801a1a2:	ee22 2a07 	vmul.f32	s4, s4, s14
 801a1a6:	f340 808c 	ble.w	801a2c2 <_ZN8touchgfx3LCD22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0x196>
 801a1aa:	eba1 060e 	sub.w	r6, r1, lr
 801a1ae:	fb96 f5f4 	sdiv	r5, r6, r4
 801a1b2:	ee07 5a10 	vmov	s14, r5
 801a1b6:	2d00      	cmp	r5, #0
 801a1b8:	fb04 6615 	mls	r6, r4, r5, r6
 801a1bc:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 801a1c0:	eea7 0a04 	vfma.f32	s0, s14, s8
 801a1c4:	eee7 0a24 	vfma.f32	s1, s14, s9
 801a1c8:	eea7 1a05 	vfma.f32	s2, s14, s10
 801a1cc:	dd12      	ble.n	801a1f4 <_ZN8touchgfx3LCD22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0xc8>
 801a1ce:	ee70 6a44 	vsub.f32	s13, s0, s8
 801a1d2:	ee70 1ae4 	vsub.f32	s3, s1, s9
 801a1d6:	ee31 2a45 	vsub.f32	s4, s2, s10
 801a1da:	eef5 6a40 	vcmp.f32	s13, #0.0
 801a1de:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801a1e2:	bf14      	ite	ne
 801a1e4:	ee87 7aa6 	vdivne.f32	s14, s15, s13
 801a1e8:	eeb0 7a67 	vmoveq.f32	s14, s15
 801a1ec:	ee61 1a87 	vmul.f32	s3, s3, s14
 801a1f0:	ee22 2a07 	vmul.f32	s4, s4, s14
 801a1f4:	fb05 f204 	mul.w	r2, r5, r4
 801a1f8:	1abf      	subs	r7, r7, r2
 801a1fa:	4494      	add	ip, r2
 801a1fc:	f8ba 2004 	ldrh.w	r2, [sl, #4]
 801a200:	4411      	add	r1, r2
 801a202:	eb09 020c 	add.w	r2, r9, ip
 801a206:	b209      	sxth	r1, r1
 801a208:	443a      	add	r2, r7
 801a20a:	428a      	cmp	r2, r1
 801a20c:	bfc4      	itt	gt
 801a20e:	eba1 0209 	subgt.w	r2, r1, r9
 801a212:	eba2 070c 	subgt.w	r7, r2, ip
 801a216:	2f00      	cmp	r7, #0
 801a218:	dd50      	ble.n	801a2bc <_ZN8touchgfx3LCD22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0x190>
 801a21a:	fb97 f1f4 	sdiv	r1, r7, r4
 801a21e:	fb04 7211 	mls	r2, r4, r1, r7
 801a222:	b90a      	cbnz	r2, 801a228 <_ZN8touchgfx3LCD22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0xfc>
 801a224:	3901      	subs	r1, #1
 801a226:	4622      	mov	r2, r4
 801a228:	eec7 3a80 	vdiv.f32	s7, s15, s0
 801a22c:	6840      	ldr	r0, [r0, #4]
 801a22e:	f89d b06c 	ldrb.w	fp, [sp, #108]	@ 0x6c
 801a232:	44b6      	add	lr, r6
 801a234:	f8d0 a000 	ldr.w	sl, [r0]
 801a238:	2900      	cmp	r1, #0
 801a23a:	bfcc      	ite	gt
 801a23c:	46a1      	movgt	r9, r4
 801a23e:	4691      	movle	r9, r2
 801a240:	900b      	str	r0, [sp, #44]	@ 0x2c
 801a242:	9817      	ldr	r0, [sp, #92]	@ 0x5c
 801a244:	fb04 e505 	mla	r5, r4, r5, lr
 801a248:	eef0 6a42 	vmov.f32	s13, s4
 801a24c:	f8cd b024 	str.w	fp, [sp, #36]	@ 0x24
 801a250:	9008      	str	r0, [sp, #32]
 801a252:	eeb0 7a61 	vmov.f32	s14, s3
 801a256:	9818      	ldr	r0, [sp, #96]	@ 0x60
 801a258:	695b      	ldr	r3, [r3, #20]
 801a25a:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 801a25e:	f9b0 b002 	ldrsh.w	fp, [r0, #2]
 801a262:	eebe 7ac8 	vcvt.s32.f32	s14, s14, #16
 801a266:	980b      	ldr	r0, [sp, #44]	@ 0x2c
 801a268:	445b      	add	r3, fp
 801a26a:	9307      	str	r3, [sp, #28]
 801a26c:	ee16 3a90 	vmov	r3, s13
 801a270:	e9cd 8505 	strd	r8, r5, [sp, #20]
 801a274:	ee60 2aa3 	vmul.f32	s5, s1, s7
 801a278:	ee21 3a23 	vmul.f32	s6, s2, s7
 801a27c:	ee72 7ae1 	vsub.f32	s15, s5, s3
 801a280:	eefe 7ac8 	vcvt.s32.f32	s15, s15, #16
 801a284:	ee17 7a90 	vmov	r7, s15
 801a288:	ee73 7a42 	vsub.f32	s15, s6, s4
 801a28c:	fb97 f7f4 	sdiv	r7, r7, r4
 801a290:	eefe 7ac8 	vcvt.s32.f32	s15, s15, #16
 801a294:	ee17 ca90 	vmov	ip, s15
 801a298:	fb9c fcf4 	sdiv	ip, ip, r4
 801a29c:	fb0c 3306 	mla	r3, ip, r6, r3
 801a2a0:	9302      	str	r3, [sp, #8]
 801a2a2:	ee17 3a10 	vmov	r3, s14
 801a2a6:	e9cd 7c03 	strd	r7, ip, [sp, #12]
 801a2aa:	fb07 3706 	mla	r7, r7, r6, r3
 801a2ae:	eba9 0306 	sub.w	r3, r9, r6
 801a2b2:	e9cd 4700 	strd	r4, r7, [sp]
 801a2b6:	f8da 4008 	ldr.w	r4, [sl, #8]
 801a2ba:	47a0      	blx	r4
 801a2bc:	b00d      	add	sp, #52	@ 0x34
 801a2be:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801a2c2:	2500      	movs	r5, #0
 801a2c4:	462e      	mov	r6, r5
 801a2c6:	e799      	b.n	801a1fc <_ZN8touchgfx3LCD22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0xd0>

0801a2c8 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht>:
 801a2c8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801a2cc:	b0db      	sub	sp, #364	@ 0x16c
 801a2ce:	461d      	mov	r5, r3
 801a2d0:	4614      	mov	r4, r2
 801a2d2:	f8bd 3198 	ldrh.w	r3, [sp, #408]	@ 0x198
 801a2d6:	910f      	str	r1, [sp, #60]	@ 0x3c
 801a2d8:	4629      	mov	r1, r5
 801a2da:	930a      	str	r3, [sp, #40]	@ 0x28
 801a2dc:	f89d 319c 	ldrb.w	r3, [sp, #412]	@ 0x19c
 801a2e0:	9009      	str	r0, [sp, #36]	@ 0x24
 801a2e2:	930b      	str	r3, [sp, #44]	@ 0x2c
 801a2e4:	f8bd 31a0 	ldrh.w	r3, [sp, #416]	@ 0x1a0
 801a2e8:	f8dd b194 	ldr.w	fp, [sp, #404]	@ 0x194
 801a2ec:	9310      	str	r3, [sp, #64]	@ 0x40
 801a2ee:	6803      	ldr	r3, [r0, #0]
 801a2f0:	6bdf      	ldr	r7, [r3, #60]	@ 0x3c
 801a2f2:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	@ 0x28
 801a2f6:	47b8      	blx	r7
 801a2f8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801a2fa:	6058      	str	r0, [r3, #4]
 801a2fc:	2800      	cmp	r0, #0
 801a2fe:	f000 83a1 	beq.w	801aa44 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x77c>
 801a302:	682b      	ldr	r3, [r5, #0]
 801a304:	eef2 7a04 	vmov.f32	s15, #36	@ 0x41200000  10.0
 801a308:	ed94 7a02 	vldr	s14, [r4, #8]
 801a30c:	9314      	str	r3, [sp, #80]	@ 0x50
 801a30e:	686b      	ldr	r3, [r5, #4]
 801a310:	eeb4 7ae7 	vcmpe.f32	s14, s15
 801a314:	9315      	str	r3, [sp, #84]	@ 0x54
 801a316:	4bc1      	ldr	r3, [pc, #772]	@ (801a61c <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x354>)
 801a318:	7819      	ldrb	r1, [r3, #0]
 801a31a:	e9d5 2302 	ldrd	r2, r3, [r5, #8]
 801a31e:	2900      	cmp	r1, #0
 801a320:	bf16      	itet	ne
 801a322:	4619      	movne	r1, r3
 801a324:	4611      	moveq	r1, r2
 801a326:	4613      	movne	r3, r2
 801a328:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801a32c:	9116      	str	r1, [sp, #88]	@ 0x58
 801a32e:	e9cd 3217 	strd	r3, r2, [sp, #92]	@ 0x5c
 801a332:	f240 8387 	bls.w	801aa44 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x77c>
 801a336:	ed94 7a07 	vldr	s14, [r4, #28]
 801a33a:	eeb4 7ae7 	vcmpe.f32	s14, s15
 801a33e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801a342:	f240 837f 	bls.w	801aa44 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x77c>
 801a346:	ed94 7a0c 	vldr	s14, [r4, #48]	@ 0x30
 801a34a:	eeb4 7ae7 	vcmpe.f32	s14, s15
 801a34e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801a352:	f240 8377 	bls.w	801aa44 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x77c>
 801a356:	6822      	ldr	r2, [r4, #0]
 801a358:	4bb1      	ldr	r3, [pc, #708]	@ (801a620 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x358>)
 801a35a:	429a      	cmp	r2, r3
 801a35c:	f2c0 8372 	blt.w	801aa44 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x77c>
 801a360:	49b0      	ldr	r1, [pc, #704]	@ (801a624 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x35c>)
 801a362:	6963      	ldr	r3, [r4, #20]
 801a364:	428a      	cmp	r2, r1
 801a366:	f300 836d 	bgt.w	801aa44 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x77c>
 801a36a:	f503 331c 	add.w	r3, r3, #159744	@ 0x27000
 801a36e:	48ae      	ldr	r0, [pc, #696]	@ (801a628 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x360>)
 801a370:	33ff      	adds	r3, #255	@ 0xff
 801a372:	4283      	cmp	r3, r0
 801a374:	f200 8366 	bhi.w	801aa44 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x77c>
 801a378:	6aa3      	ldr	r3, [r4, #40]	@ 0x28
 801a37a:	4dac      	ldr	r5, [pc, #688]	@ (801a62c <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x364>)
 801a37c:	f503 331c 	add.w	r3, r3, #159744	@ 0x27000
 801a380:	33ff      	adds	r3, #255	@ 0xff
 801a382:	42ab      	cmp	r3, r5
 801a384:	f200 835e 	bhi.w	801aa44 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x77c>
 801a388:	6862      	ldr	r2, [r4, #4]
 801a38a:	f502 331c 	add.w	r3, r2, #159744	@ 0x27000
 801a38e:	33ff      	adds	r3, #255	@ 0xff
 801a390:	4283      	cmp	r3, r0
 801a392:	f200 8357 	bhi.w	801aa44 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x77c>
 801a396:	69a1      	ldr	r1, [r4, #24]
 801a398:	f501 331c 	add.w	r3, r1, #159744	@ 0x27000
 801a39c:	33ff      	adds	r3, #255	@ 0xff
 801a39e:	4283      	cmp	r3, r0
 801a3a0:	f200 8350 	bhi.w	801aa44 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x77c>
 801a3a4:	6ae3      	ldr	r3, [r4, #44]	@ 0x2c
 801a3a6:	f503 301c 	add.w	r0, r3, #159744	@ 0x27000
 801a3aa:	30ff      	adds	r0, #255	@ 0xff
 801a3ac:	42a8      	cmp	r0, r5
 801a3ae:	f200 8349 	bhi.w	801aa44 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x77c>
 801a3b2:	428a      	cmp	r2, r1
 801a3b4:	f280 8110 	bge.w	801a5d8 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x310>
 801a3b8:	429a      	cmp	r2, r3
 801a3ba:	f300 8119 	bgt.w	801a5f0 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x328>
 801a3be:	4299      	cmp	r1, r3
 801a3c0:	f280 811d 	bge.w	801a5fe <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x336>
 801a3c4:	2502      	movs	r5, #2
 801a3c6:	2701      	movs	r7, #1
 801a3c8:	46a9      	mov	r9, r5
 801a3ca:	46b8      	mov	r8, r7
 801a3cc:	f04f 0a00 	mov.w	sl, #0
 801a3d0:	4621      	mov	r1, r4
 801a3d2:	a849      	add	r0, sp, #292	@ 0x124
 801a3d4:	f003 fd92 	bl	801defc <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE>
 801a3d8:	4622      	mov	r2, r4
 801a3da:	4653      	mov	r3, sl
 801a3dc:	a949      	add	r1, sp, #292	@ 0x124
 801a3de:	f8cd 9000 	str.w	r9, [sp]
 801a3e2:	a819      	add	r0, sp, #100	@ 0x64
 801a3e4:	f003 feba 	bl	801e15c <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii>
 801a3e8:	4622      	mov	r2, r4
 801a3ea:	4653      	mov	r3, sl
 801a3ec:	a949      	add	r1, sp, #292	@ 0x124
 801a3ee:	f8cd 8000 	str.w	r8, [sp]
 801a3f2:	a829      	add	r0, sp, #164	@ 0xa4
 801a3f4:	f003 feb2 	bl	801e15c <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii>
 801a3f8:	4643      	mov	r3, r8
 801a3fa:	4622      	mov	r2, r4
 801a3fc:	a949      	add	r1, sp, #292	@ 0x124
 801a3fe:	f8cd 9000 	str.w	r9, [sp]
 801a402:	a839      	add	r0, sp, #228	@ 0xe4
 801a404:	f003 feaa 	bl	801e15c <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii>
 801a408:	42af      	cmp	r7, r5
 801a40a:	af12      	add	r7, sp, #72	@ 0x48
 801a40c:	bfb7      	itett	lt
 801a40e:	2300      	movlt	r3, #0
 801a410:	2301      	movge	r3, #1
 801a412:	ad29      	addlt	r5, sp, #164	@ 0xa4
 801a414:	ac19      	addlt	r4, sp, #100	@ 0x64
 801a416:	bfb1      	iteee	lt
 801a418:	930e      	strlt	r3, [sp, #56]	@ 0x38
 801a41a:	ad19      	addge	r5, sp, #100	@ 0x64
 801a41c:	930e      	strge	r3, [sp, #56]	@ 0x38
 801a41e:	ac29      	addge	r4, sp, #164	@ 0xa4
 801a420:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 801a422:	e893 0003 	ldmia.w	r3, {r0, r1}
 801a426:	e887 0003 	stmia.w	r7, {r0, r1}
 801a42a:	b928      	cbnz	r0, 801a438 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x170>
 801a42c:	4b80      	ldr	r3, [pc, #512]	@ (801a630 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x368>)
 801a42e:	6818      	ldr	r0, [r3, #0]
 801a430:	6803      	ldr	r3, [r0, #0]
 801a432:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 801a434:	4798      	blx	r3
 801a436:	6038      	str	r0, [r7, #0]
 801a438:	9b64      	ldr	r3, [sp, #400]	@ 0x190
 801a43a:	f8bb 0006 	ldrh.w	r0, [fp, #6]
 801a43e:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 801a442:	9a2f      	ldr	r2, [sp, #188]	@ 0xbc
 801a444:	930c      	str	r3, [sp, #48]	@ 0x30
 801a446:	990c      	ldr	r1, [sp, #48]	@ 0x30
 801a448:	6963      	ldr	r3, [r4, #20]
 801a44a:	440b      	add	r3, r1
 801a44c:	f9bb 1002 	ldrsh.w	r1, [fp, #2]
 801a450:	4408      	add	r0, r1
 801a452:	b200      	sxth	r0, r0
 801a454:	4283      	cmp	r3, r0
 801a456:	900d      	str	r0, [sp, #52]	@ 0x34
 801a458:	f280 80dd 	bge.w	801a616 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x34e>
 801a45c:	428b      	cmp	r3, r1
 801a45e:	da08      	bge.n	801a472 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x1aa>
 801a460:	2a00      	cmp	r2, #0
 801a462:	dd06      	ble.n	801a472 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x1aa>
 801a464:	1acb      	subs	r3, r1, r3
 801a466:	429a      	cmp	r2, r3
 801a468:	f2c0 80e4 	blt.w	801a634 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x36c>
 801a46c:	2b00      	cmp	r3, #0
 801a46e:	f300 80e2 	bgt.w	801a636 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x36e>
 801a472:	6967      	ldr	r7, [r4, #20]
 801a474:	f10d 0850 	add.w	r8, sp, #80	@ 0x50
 801a478:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 801a47a:	443b      	add	r3, r7
 801a47c:	461f      	mov	r7, r3
 801a47e:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 801a480:	1bdf      	subs	r7, r3, r7
 801a482:	4297      	cmp	r7, r2
 801a484:	bfa8      	it	ge
 801a486:	4617      	movge	r7, r2
 801a488:	2f00      	cmp	r7, #0
 801a48a:	f340 8166 	ble.w	801a75a <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x492>
 801a48e:	9b64      	ldr	r3, [sp, #400]	@ 0x190
 801a490:	6829      	ldr	r1, [r5, #0]
 801a492:	f9b3 2000 	ldrsh.w	r2, [r3]
 801a496:	f9bb 3000 	ldrsh.w	r3, [fp]
 801a49a:	4411      	add	r1, r2
 801a49c:	6820      	ldr	r0, [r4, #0]
 801a49e:	4299      	cmp	r1, r3
 801a4a0:	dd1a      	ble.n	801a4d8 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x210>
 801a4a2:	f8bb 1004 	ldrh.w	r1, [fp, #4]
 801a4a6:	4402      	add	r2, r0
 801a4a8:	440b      	add	r3, r1
 801a4aa:	b21b      	sxth	r3, r3
 801a4ac:	429a      	cmp	r2, r3
 801a4ae:	dc13      	bgt.n	801a4d8 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x210>
 801a4b0:	9a10      	ldr	r2, [sp, #64]	@ 0x40
 801a4b2:	a912      	add	r1, sp, #72	@ 0x48
 801a4b4:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801a4b6:	9809      	ldr	r0, [sp, #36]	@ 0x24
 801a4b8:	681b      	ldr	r3, [r3, #0]
 801a4ba:	9206      	str	r2, [sp, #24]
 801a4bc:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 801a4be:	9500      	str	r5, [sp, #0]
 801a4c0:	9205      	str	r2, [sp, #20]
 801a4c2:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 801a4c4:	e9cd b203 	strd	fp, r2, [sp, #12]
 801a4c8:	9a64      	ldr	r2, [sp, #400]	@ 0x190
 801a4ca:	e9cd 8201 	strd	r8, r2, [sp, #4]
 801a4ce:	aa49      	add	r2, sp, #292	@ 0x124
 801a4d0:	f8d3 9040 	ldr.w	r9, [r3, #64]	@ 0x40
 801a4d4:	4623      	mov	r3, r4
 801a4d6:	47c8      	blx	r9
 801a4d8:	ed94 7a0a 	vldr	s14, [r4, #40]	@ 0x28
 801a4dc:	edd4 7a0b 	vldr	s15, [r4, #44]	@ 0x2c
 801a4e0:	edd4 6a0e 	vldr	s13, [r4, #56]	@ 0x38
 801a4e4:	ee37 7a27 	vadd.f32	s14, s14, s15
 801a4e8:	edd4 7a0d 	vldr	s15, [r4, #52]	@ 0x34
 801a4ec:	68a1      	ldr	r1, [r4, #8]
 801a4ee:	ee77 7aa6 	vadd.f32	s15, s15, s13
 801a4f2:	ed94 6a08 	vldr	s12, [r4, #32]
 801a4f6:	edd4 6a07 	vldr	s13, [r4, #28]
 801a4fa:	ed84 7a0a 	vstr	s14, [r4, #40]	@ 0x28
 801a4fe:	ee76 6a86 	vadd.f32	s13, s13, s12
 801a502:	edc4 7a0d 	vstr	s15, [r4, #52]	@ 0x34
 801a506:	e9d4 2300 	ldrd	r2, r3, [r4]
 801a50a:	edc4 6a07 	vstr	s13, [r4, #28]
 801a50e:	441a      	add	r2, r3
 801a510:	6963      	ldr	r3, [r4, #20]
 801a512:	3301      	adds	r3, #1
 801a514:	6022      	str	r2, [r4, #0]
 801a516:	6163      	str	r3, [r4, #20]
 801a518:	69a3      	ldr	r3, [r4, #24]
 801a51a:	3b01      	subs	r3, #1
 801a51c:	61a3      	str	r3, [r4, #24]
 801a51e:	6923      	ldr	r3, [r4, #16]
 801a520:	440b      	add	r3, r1
 801a522:	68e1      	ldr	r1, [r4, #12]
 801a524:	428b      	cmp	r3, r1
 801a526:	6123      	str	r3, [r4, #16]
 801a528:	db15      	blt.n	801a556 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x28e>
 801a52a:	ed94 6a09 	vldr	s12, [r4, #36]	@ 0x24
 801a52e:	3201      	adds	r2, #1
 801a530:	1a5b      	subs	r3, r3, r1
 801a532:	ee76 6a26 	vadd.f32	s13, s12, s13
 801a536:	6022      	str	r2, [r4, #0]
 801a538:	6123      	str	r3, [r4, #16]
 801a53a:	edc4 6a07 	vstr	s13, [r4, #28]
 801a53e:	edd4 6a0c 	vldr	s13, [r4, #48]	@ 0x30
 801a542:	ee36 7a87 	vadd.f32	s14, s13, s14
 801a546:	ed84 7a0a 	vstr	s14, [r4, #40]	@ 0x28
 801a54a:	ed94 7a0f 	vldr	s14, [r4, #60]	@ 0x3c
 801a54e:	ee77 7a27 	vadd.f32	s15, s14, s15
 801a552:	edc4 7a0d 	vstr	s15, [r4, #52]	@ 0x34
 801a556:	ed95 7a0a 	vldr	s14, [r5, #40]	@ 0x28
 801a55a:	edd5 7a0b 	vldr	s15, [r5, #44]	@ 0x2c
 801a55e:	edd5 6a0e 	vldr	s13, [r5, #56]	@ 0x38
 801a562:	ee37 7a27 	vadd.f32	s14, s14, s15
 801a566:	edd5 7a0d 	vldr	s15, [r5, #52]	@ 0x34
 801a56a:	68a9      	ldr	r1, [r5, #8]
 801a56c:	ee77 7aa6 	vadd.f32	s15, s15, s13
 801a570:	ed95 6a08 	vldr	s12, [r5, #32]
 801a574:	edd5 6a07 	vldr	s13, [r5, #28]
 801a578:	ed85 7a0a 	vstr	s14, [r5, #40]	@ 0x28
 801a57c:	ee76 6a86 	vadd.f32	s13, s13, s12
 801a580:	edc5 7a0d 	vstr	s15, [r5, #52]	@ 0x34
 801a584:	e9d5 2300 	ldrd	r2, r3, [r5]
 801a588:	edc5 6a07 	vstr	s13, [r5, #28]
 801a58c:	441a      	add	r2, r3
 801a58e:	696b      	ldr	r3, [r5, #20]
 801a590:	3301      	adds	r3, #1
 801a592:	602a      	str	r2, [r5, #0]
 801a594:	616b      	str	r3, [r5, #20]
 801a596:	69ab      	ldr	r3, [r5, #24]
 801a598:	3b01      	subs	r3, #1
 801a59a:	61ab      	str	r3, [r5, #24]
 801a59c:	692b      	ldr	r3, [r5, #16]
 801a59e:	440b      	add	r3, r1
 801a5a0:	68e9      	ldr	r1, [r5, #12]
 801a5a2:	428b      	cmp	r3, r1
 801a5a4:	612b      	str	r3, [r5, #16]
 801a5a6:	db15      	blt.n	801a5d4 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x30c>
 801a5a8:	ed95 6a09 	vldr	s12, [r5, #36]	@ 0x24
 801a5ac:	3201      	adds	r2, #1
 801a5ae:	1a5b      	subs	r3, r3, r1
 801a5b0:	ee76 6a26 	vadd.f32	s13, s12, s13
 801a5b4:	602a      	str	r2, [r5, #0]
 801a5b6:	612b      	str	r3, [r5, #16]
 801a5b8:	edc5 6a07 	vstr	s13, [r5, #28]
 801a5bc:	edd5 6a0c 	vldr	s13, [r5, #48]	@ 0x30
 801a5c0:	ee36 7a87 	vadd.f32	s14, s13, s14
 801a5c4:	ed85 7a0a 	vstr	s14, [r5, #40]	@ 0x28
 801a5c8:	ed95 7a0f 	vldr	s14, [r5, #60]	@ 0x3c
 801a5cc:	ee77 7a27 	vadd.f32	s15, s14, s15
 801a5d0:	edc5 7a0d 	vstr	s15, [r5, #52]	@ 0x34
 801a5d4:	3f01      	subs	r7, #1
 801a5d6:	e757      	b.n	801a488 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x1c0>
 801a5d8:	4299      	cmp	r1, r3
 801a5da:	dc13      	bgt.n	801a604 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x33c>
 801a5dc:	429a      	cmp	r2, r3
 801a5de:	da14      	bge.n	801a60a <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x342>
 801a5e0:	2502      	movs	r5, #2
 801a5e2:	2703      	movs	r7, #3
 801a5e4:	f04f 0800 	mov.w	r8, #0
 801a5e8:	46a9      	mov	r9, r5
 801a5ea:	f04f 0a01 	mov.w	sl, #1
 801a5ee:	e6ef      	b.n	801a3d0 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x108>
 801a5f0:	2501      	movs	r5, #1
 801a5f2:	2700      	movs	r7, #0
 801a5f4:	46a9      	mov	r9, r5
 801a5f6:	46b8      	mov	r8, r7
 801a5f8:	f04f 0a02 	mov.w	sl, #2
 801a5fc:	e6e8      	b.n	801a3d0 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x108>
 801a5fe:	2501      	movs	r5, #1
 801a600:	2702      	movs	r7, #2
 801a602:	e6e1      	b.n	801a3c8 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x100>
 801a604:	2500      	movs	r5, #0
 801a606:	2701      	movs	r7, #1
 801a608:	e7f4      	b.n	801a5f4 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x32c>
 801a60a:	2702      	movs	r7, #2
 801a60c:	2503      	movs	r5, #3
 801a60e:	f04f 0900 	mov.w	r9, #0
 801a612:	46b8      	mov	r8, r7
 801a614:	e7e9      	b.n	801a5ea <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x322>
 801a616:	4613      	mov	r3, r2
 801a618:	e728      	b.n	801a46c <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x1a4>
 801a61a:	bf00      	nop
 801a61c:	2400b87c 	.word	0x2400b87c
 801a620:	fffd8f01 	.word	0xfffd8f01
 801a624:	00027100 	.word	0x00027100
 801a628:	0004e1ff 	.word	0x0004e1ff
 801a62c:	0004e1fe 	.word	0x0004e1fe
 801a630:	2400b884 	.word	0x2400b884
 801a634:	4613      	mov	r3, r2
 801a636:	992b      	ldr	r1, [sp, #172]	@ 0xac
 801a638:	469e      	mov	lr, r3
 801a63a:	9f2e      	ldr	r7, [sp, #184]	@ 0xb8
 801a63c:	469c      	mov	ip, r3
 801a63e:	9111      	str	r1, [sp, #68]	@ 0x44
 801a640:	f04f 0900 	mov.w	r9, #0
 801a644:	eddd 4a34 	vldr	s9, [sp, #208]	@ 0xd0
 801a648:	ed9d 7a33 	vldr	s14, [sp, #204]	@ 0xcc
 801a64c:	ed9d 4a37 	vldr	s8, [sp, #220]	@ 0xdc
 801a650:	eddd 7a36 	vldr	s15, [sp, #216]	@ 0xd8
 801a654:	eddd 3a31 	vldr	s7, [sp, #196]	@ 0xc4
 801a658:	eddd 6a30 	vldr	s13, [sp, #192]	@ 0xc0
 801a65c:	ed9d 5a32 	vldr	s10, [sp, #200]	@ 0xc8
 801a660:	eddd 5a35 	vldr	s11, [sp, #212]	@ 0xd4
 801a664:	ed9d 6a38 	vldr	s12, [sp, #224]	@ 0xe0
 801a668:	e9dd 0a29 	ldrd	r0, sl, [sp, #164]	@ 0xa4
 801a66c:	e9dd 812c 	ldrd	r8, r1, [sp, #176]	@ 0xb0
 801a670:	f1bc 0f00 	cmp.w	ip, #0
 801a674:	d147      	bne.n	801a706 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x43e>
 801a676:	eb03 0c07 	add.w	ip, r3, r7
 801a67a:	1ad7      	subs	r7, r2, r3
 801a67c:	f1b9 0f00 	cmp.w	r9, #0
 801a680:	d009      	beq.n	801a696 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x3ce>
 801a682:	9029      	str	r0, [sp, #164]	@ 0xa4
 801a684:	ed8d 7a33 	vstr	s14, [sp, #204]	@ 0xcc
 801a688:	edcd 7a36 	vstr	s15, [sp, #216]	@ 0xd8
 801a68c:	edcd 6a30 	vstr	s13, [sp, #192]	@ 0xc0
 801a690:	912d      	str	r1, [sp, #180]	@ 0xb4
 801a692:	e9cd c72e 	strd	ip, r7, [sp, #184]	@ 0xb8
 801a696:	991b      	ldr	r1, [sp, #108]	@ 0x6c
 801a698:	f04f 0800 	mov.w	r8, #0
 801a69c:	eddd 4a24 	vldr	s9, [sp, #144]	@ 0x90
 801a6a0:	9111      	str	r1, [sp, #68]	@ 0x44
 801a6a2:	eddd 6a23 	vldr	s13, [sp, #140]	@ 0x8c
 801a6a6:	ed9d 4a27 	vldr	s8, [sp, #156]	@ 0x9c
 801a6aa:	ed9d 7a26 	vldr	s14, [sp, #152]	@ 0x98
 801a6ae:	eddd 3a21 	vldr	s7, [sp, #132]	@ 0x84
 801a6b2:	eddd 7a20 	vldr	s15, [sp, #128]	@ 0x80
 801a6b6:	ed9d 5a22 	vldr	s10, [sp, #136]	@ 0x88
 801a6ba:	eddd 5a25 	vldr	s11, [sp, #148]	@ 0x94
 801a6be:	ed9d 6a28 	vldr	s12, [sp, #160]	@ 0xa0
 801a6c2:	e9dd 0a19 	ldrd	r0, sl, [sp, #100]	@ 0x64
 801a6c6:	e9dd c71e 	ldrd	ip, r7, [sp, #120]	@ 0x78
 801a6ca:	e9dd 911c 	ldrd	r9, r1, [sp, #112]	@ 0x70
 801a6ce:	f1be 0f00 	cmp.w	lr, #0
 801a6d2:	d031      	beq.n	801a738 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x470>
 801a6d4:	9e11      	ldr	r6, [sp, #68]	@ 0x44
 801a6d6:	4450      	add	r0, sl
 801a6d8:	ee76 6aa4 	vadd.f32	s13, s13, s9
 801a6dc:	4431      	add	r1, r6
 801a6de:	ee37 7a04 	vadd.f32	s14, s14, s8
 801a6e2:	ee77 7aa3 	vadd.f32	s15, s15, s7
 801a6e6:	4549      	cmp	r1, r9
 801a6e8:	db08      	blt.n	801a6fc <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x434>
 801a6ea:	ee77 7a85 	vadd.f32	s15, s15, s10
 801a6ee:	3001      	adds	r0, #1
 801a6f0:	ee76 6aa5 	vadd.f32	s13, s13, s11
 801a6f4:	eba1 0109 	sub.w	r1, r1, r9
 801a6f8:	ee37 7a06 	vadd.f32	s14, s14, s12
 801a6fc:	f10e 3eff 	add.w	lr, lr, #4294967295
 801a700:	f04f 0801 	mov.w	r8, #1
 801a704:	e7e3      	b.n	801a6ce <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x406>
 801a706:	9e11      	ldr	r6, [sp, #68]	@ 0x44
 801a708:	4450      	add	r0, sl
 801a70a:	ee37 7a24 	vadd.f32	s14, s14, s9
 801a70e:	4431      	add	r1, r6
 801a710:	ee77 7a84 	vadd.f32	s15, s15, s8
 801a714:	ee76 6aa3 	vadd.f32	s13, s13, s7
 801a718:	4541      	cmp	r1, r8
 801a71a:	db08      	blt.n	801a72e <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x466>
 801a71c:	ee76 6a85 	vadd.f32	s13, s13, s10
 801a720:	3001      	adds	r0, #1
 801a722:	ee37 7a25 	vadd.f32	s14, s14, s11
 801a726:	eba1 0108 	sub.w	r1, r1, r8
 801a72a:	ee77 7a86 	vadd.f32	s15, s15, s12
 801a72e:	f10c 3cff 	add.w	ip, ip, #4294967295
 801a732:	f04f 0901 	mov.w	r9, #1
 801a736:	e79b      	b.n	801a670 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x3a8>
 801a738:	449c      	add	ip, r3
 801a73a:	1aff      	subs	r7, r7, r3
 801a73c:	f1b8 0f00 	cmp.w	r8, #0
 801a740:	d009      	beq.n	801a756 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x48e>
 801a742:	9019      	str	r0, [sp, #100]	@ 0x64
 801a744:	edcd 6a23 	vstr	s13, [sp, #140]	@ 0x8c
 801a748:	ed8d 7a26 	vstr	s14, [sp, #152]	@ 0x98
 801a74c:	edcd 7a20 	vstr	s15, [sp, #128]	@ 0x80
 801a750:	911d      	str	r1, [sp, #116]	@ 0x74
 801a752:	e9cd c71e 	strd	ip, r7, [sp, #120]	@ 0x78
 801a756:	1ad2      	subs	r2, r2, r3
 801a758:	e68b      	b.n	801a472 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x1aa>
 801a75a:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 801a75c:	9a3f      	ldr	r2, [sp, #252]	@ 0xfc
 801a75e:	2b00      	cmp	r3, #0
 801a760:	f000 80d1 	beq.w	801a906 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x63e>
 801a764:	ad19      	add	r5, sp, #100	@ 0x64
 801a766:	ac39      	add	r4, sp, #228	@ 0xe4
 801a768:	9b64      	ldr	r3, [sp, #400]	@ 0x190
 801a76a:	f8bb 0006 	ldrh.w	r0, [fp, #6]
 801a76e:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 801a772:	930c      	str	r3, [sp, #48]	@ 0x30
 801a774:	990c      	ldr	r1, [sp, #48]	@ 0x30
 801a776:	6963      	ldr	r3, [r4, #20]
 801a778:	440b      	add	r3, r1
 801a77a:	f9bb 1002 	ldrsh.w	r1, [fp, #2]
 801a77e:	4408      	add	r0, r1
 801a780:	b200      	sxth	r0, r0
 801a782:	4283      	cmp	r3, r0
 801a784:	900d      	str	r0, [sp, #52]	@ 0x34
 801a786:	f280 80c1 	bge.w	801a90c <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x644>
 801a78a:	428b      	cmp	r3, r1
 801a78c:	da08      	bge.n	801a7a0 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x4d8>
 801a78e:	2a00      	cmp	r2, #0
 801a790:	dd06      	ble.n	801a7a0 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x4d8>
 801a792:	1acb      	subs	r3, r1, r3
 801a794:	429a      	cmp	r2, r3
 801a796:	f2c0 80bb 	blt.w	801a910 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x648>
 801a79a:	2b00      	cmp	r3, #0
 801a79c:	f300 80b9 	bgt.w	801a912 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x64a>
 801a7a0:	6967      	ldr	r7, [r4, #20]
 801a7a2:	f10d 0850 	add.w	r8, sp, #80	@ 0x50
 801a7a6:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 801a7a8:	443b      	add	r3, r7
 801a7aa:	461f      	mov	r7, r3
 801a7ac:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 801a7ae:	1bdf      	subs	r7, r3, r7
 801a7b0:	4297      	cmp	r7, r2
 801a7b2:	bfa8      	it	ge
 801a7b4:	4617      	movge	r7, r2
 801a7b6:	2f00      	cmp	r7, #0
 801a7b8:	f340 813c 	ble.w	801aa34 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x76c>
 801a7bc:	9b64      	ldr	r3, [sp, #400]	@ 0x190
 801a7be:	6829      	ldr	r1, [r5, #0]
 801a7c0:	f9b3 2000 	ldrsh.w	r2, [r3]
 801a7c4:	f9bb 3000 	ldrsh.w	r3, [fp]
 801a7c8:	4411      	add	r1, r2
 801a7ca:	6820      	ldr	r0, [r4, #0]
 801a7cc:	4299      	cmp	r1, r3
 801a7ce:	dd1a      	ble.n	801a806 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x53e>
 801a7d0:	f8bb 1004 	ldrh.w	r1, [fp, #4]
 801a7d4:	4402      	add	r2, r0
 801a7d6:	440b      	add	r3, r1
 801a7d8:	b21b      	sxth	r3, r3
 801a7da:	429a      	cmp	r2, r3
 801a7dc:	dc13      	bgt.n	801a806 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x53e>
 801a7de:	9a10      	ldr	r2, [sp, #64]	@ 0x40
 801a7e0:	a912      	add	r1, sp, #72	@ 0x48
 801a7e2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801a7e4:	9809      	ldr	r0, [sp, #36]	@ 0x24
 801a7e6:	681b      	ldr	r3, [r3, #0]
 801a7e8:	9206      	str	r2, [sp, #24]
 801a7ea:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 801a7ec:	9500      	str	r5, [sp, #0]
 801a7ee:	9205      	str	r2, [sp, #20]
 801a7f0:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 801a7f2:	e9cd b203 	strd	fp, r2, [sp, #12]
 801a7f6:	9a64      	ldr	r2, [sp, #400]	@ 0x190
 801a7f8:	e9cd 8201 	strd	r8, r2, [sp, #4]
 801a7fc:	aa49      	add	r2, sp, #292	@ 0x124
 801a7fe:	f8d3 9040 	ldr.w	r9, [r3, #64]	@ 0x40
 801a802:	4623      	mov	r3, r4
 801a804:	47c8      	blx	r9
 801a806:	ed94 7a0a 	vldr	s14, [r4, #40]	@ 0x28
 801a80a:	edd4 7a0b 	vldr	s15, [r4, #44]	@ 0x2c
 801a80e:	edd4 6a0e 	vldr	s13, [r4, #56]	@ 0x38
 801a812:	ee37 7a27 	vadd.f32	s14, s14, s15
 801a816:	edd4 7a0d 	vldr	s15, [r4, #52]	@ 0x34
 801a81a:	68a1      	ldr	r1, [r4, #8]
 801a81c:	ee77 7aa6 	vadd.f32	s15, s15, s13
 801a820:	ed94 6a08 	vldr	s12, [r4, #32]
 801a824:	edd4 6a07 	vldr	s13, [r4, #28]
 801a828:	ed84 7a0a 	vstr	s14, [r4, #40]	@ 0x28
 801a82c:	ee76 6a86 	vadd.f32	s13, s13, s12
 801a830:	edc4 7a0d 	vstr	s15, [r4, #52]	@ 0x34
 801a834:	e9d4 2300 	ldrd	r2, r3, [r4]
 801a838:	edc4 6a07 	vstr	s13, [r4, #28]
 801a83c:	441a      	add	r2, r3
 801a83e:	6963      	ldr	r3, [r4, #20]
 801a840:	3301      	adds	r3, #1
 801a842:	6022      	str	r2, [r4, #0]
 801a844:	6163      	str	r3, [r4, #20]
 801a846:	69a3      	ldr	r3, [r4, #24]
 801a848:	3b01      	subs	r3, #1
 801a84a:	61a3      	str	r3, [r4, #24]
 801a84c:	6923      	ldr	r3, [r4, #16]
 801a84e:	440b      	add	r3, r1
 801a850:	68e1      	ldr	r1, [r4, #12]
 801a852:	428b      	cmp	r3, r1
 801a854:	6123      	str	r3, [r4, #16]
 801a856:	db15      	blt.n	801a884 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x5bc>
 801a858:	ed94 6a09 	vldr	s12, [r4, #36]	@ 0x24
 801a85c:	3201      	adds	r2, #1
 801a85e:	1a5b      	subs	r3, r3, r1
 801a860:	ee76 6a26 	vadd.f32	s13, s12, s13
 801a864:	6022      	str	r2, [r4, #0]
 801a866:	6123      	str	r3, [r4, #16]
 801a868:	edc4 6a07 	vstr	s13, [r4, #28]
 801a86c:	edd4 6a0c 	vldr	s13, [r4, #48]	@ 0x30
 801a870:	ee36 7a87 	vadd.f32	s14, s13, s14
 801a874:	ed84 7a0a 	vstr	s14, [r4, #40]	@ 0x28
 801a878:	ed94 7a0f 	vldr	s14, [r4, #60]	@ 0x3c
 801a87c:	ee77 7a27 	vadd.f32	s15, s14, s15
 801a880:	edc4 7a0d 	vstr	s15, [r4, #52]	@ 0x34
 801a884:	ed95 7a0a 	vldr	s14, [r5, #40]	@ 0x28
 801a888:	edd5 7a0b 	vldr	s15, [r5, #44]	@ 0x2c
 801a88c:	edd5 6a0e 	vldr	s13, [r5, #56]	@ 0x38
 801a890:	ee37 7a27 	vadd.f32	s14, s14, s15
 801a894:	edd5 7a0d 	vldr	s15, [r5, #52]	@ 0x34
 801a898:	68a9      	ldr	r1, [r5, #8]
 801a89a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 801a89e:	ed95 6a08 	vldr	s12, [r5, #32]
 801a8a2:	edd5 6a07 	vldr	s13, [r5, #28]
 801a8a6:	ed85 7a0a 	vstr	s14, [r5, #40]	@ 0x28
 801a8aa:	ee76 6a86 	vadd.f32	s13, s13, s12
 801a8ae:	edc5 7a0d 	vstr	s15, [r5, #52]	@ 0x34
 801a8b2:	e9d5 2300 	ldrd	r2, r3, [r5]
 801a8b6:	edc5 6a07 	vstr	s13, [r5, #28]
 801a8ba:	441a      	add	r2, r3
 801a8bc:	696b      	ldr	r3, [r5, #20]
 801a8be:	3301      	adds	r3, #1
 801a8c0:	602a      	str	r2, [r5, #0]
 801a8c2:	616b      	str	r3, [r5, #20]
 801a8c4:	69ab      	ldr	r3, [r5, #24]
 801a8c6:	3b01      	subs	r3, #1
 801a8c8:	61ab      	str	r3, [r5, #24]
 801a8ca:	692b      	ldr	r3, [r5, #16]
 801a8cc:	440b      	add	r3, r1
 801a8ce:	68e9      	ldr	r1, [r5, #12]
 801a8d0:	428b      	cmp	r3, r1
 801a8d2:	612b      	str	r3, [r5, #16]
 801a8d4:	db15      	blt.n	801a902 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x63a>
 801a8d6:	ed95 6a09 	vldr	s12, [r5, #36]	@ 0x24
 801a8da:	3201      	adds	r2, #1
 801a8dc:	1a5b      	subs	r3, r3, r1
 801a8de:	ee76 6a26 	vadd.f32	s13, s12, s13
 801a8e2:	602a      	str	r2, [r5, #0]
 801a8e4:	612b      	str	r3, [r5, #16]
 801a8e6:	edc5 6a07 	vstr	s13, [r5, #28]
 801a8ea:	edd5 6a0c 	vldr	s13, [r5, #48]	@ 0x30
 801a8ee:	ee36 7a87 	vadd.f32	s14, s13, s14
 801a8f2:	ed85 7a0a 	vstr	s14, [r5, #40]	@ 0x28
 801a8f6:	ed95 7a0f 	vldr	s14, [r5, #60]	@ 0x3c
 801a8fa:	ee77 7a27 	vadd.f32	s15, s14, s15
 801a8fe:	edc5 7a0d 	vstr	s15, [r5, #52]	@ 0x34
 801a902:	3f01      	subs	r7, #1
 801a904:	e757      	b.n	801a7b6 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x4ee>
 801a906:	ad39      	add	r5, sp, #228	@ 0xe4
 801a908:	ac19      	add	r4, sp, #100	@ 0x64
 801a90a:	e72d      	b.n	801a768 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x4a0>
 801a90c:	4613      	mov	r3, r2
 801a90e:	e744      	b.n	801a79a <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x4d2>
 801a910:	4613      	mov	r3, r2
 801a912:	9e3b      	ldr	r6, [sp, #236]	@ 0xec
 801a914:	469e      	mov	lr, r3
 801a916:	f8dd c0f8 	ldr.w	ip, [sp, #248]	@ 0xf8
 801a91a:	461f      	mov	r7, r3
 801a91c:	ed9d 7a43 	vldr	s14, [sp, #268]	@ 0x10c
 801a920:	f04f 0900 	mov.w	r9, #0
 801a924:	eddd 4a44 	vldr	s9, [sp, #272]	@ 0x110
 801a928:	eddd 7a46 	vldr	s15, [sp, #280]	@ 0x118
 801a92c:	ed9d 4a47 	vldr	s8, [sp, #284]	@ 0x11c
 801a930:	eddd 6a40 	vldr	s13, [sp, #256]	@ 0x100
 801a934:	eddd 3a41 	vldr	s7, [sp, #260]	@ 0x104
 801a938:	993d      	ldr	r1, [sp, #244]	@ 0xf4
 801a93a:	f8dd 80f0 	ldr.w	r8, [sp, #240]	@ 0xf0
 801a93e:	ed9d 5a42 	vldr	s10, [sp, #264]	@ 0x108
 801a942:	eddd 5a45 	vldr	s11, [sp, #276]	@ 0x114
 801a946:	ed9d 6a48 	vldr	s12, [sp, #288]	@ 0x120
 801a94a:	960e      	str	r6, [sp, #56]	@ 0x38
 801a94c:	e9dd 0a39 	ldrd	r0, sl, [sp, #228]	@ 0xe4
 801a950:	2f00      	cmp	r7, #0
 801a952:	d146      	bne.n	801a9e2 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x71a>
 801a954:	449c      	add	ip, r3
 801a956:	1ad7      	subs	r7, r2, r3
 801a958:	f1b9 0f00 	cmp.w	r9, #0
 801a95c:	d009      	beq.n	801a972 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x6aa>
 801a95e:	9039      	str	r0, [sp, #228]	@ 0xe4
 801a960:	913d      	str	r1, [sp, #244]	@ 0xf4
 801a962:	edcd 6a40 	vstr	s13, [sp, #256]	@ 0x100
 801a966:	ed8d 7a43 	vstr	s14, [sp, #268]	@ 0x10c
 801a96a:	edcd 7a46 	vstr	s15, [sp, #280]	@ 0x118
 801a96e:	e9cd c73e 	strd	ip, r7, [sp, #248]	@ 0xf8
 801a972:	991b      	ldr	r1, [sp, #108]	@ 0x6c
 801a974:	f04f 0800 	mov.w	r8, #0
 801a978:	eddd 4a24 	vldr	s9, [sp, #144]	@ 0x90
 801a97c:	910e      	str	r1, [sp, #56]	@ 0x38
 801a97e:	eddd 6a23 	vldr	s13, [sp, #140]	@ 0x8c
 801a982:	ed9d 4a27 	vldr	s8, [sp, #156]	@ 0x9c
 801a986:	ed9d 7a26 	vldr	s14, [sp, #152]	@ 0x98
 801a98a:	eddd 3a21 	vldr	s7, [sp, #132]	@ 0x84
 801a98e:	eddd 7a20 	vldr	s15, [sp, #128]	@ 0x80
 801a992:	ed9d 5a22 	vldr	s10, [sp, #136]	@ 0x88
 801a996:	eddd 5a25 	vldr	s11, [sp, #148]	@ 0x94
 801a99a:	ed9d 6a28 	vldr	s12, [sp, #160]	@ 0xa0
 801a99e:	e9dd 0a19 	ldrd	r0, sl, [sp, #100]	@ 0x64
 801a9a2:	e9dd c71e 	ldrd	ip, r7, [sp, #120]	@ 0x78
 801a9a6:	e9dd 911c 	ldrd	r9, r1, [sp, #112]	@ 0x70
 801a9aa:	f1be 0f00 	cmp.w	lr, #0
 801a9ae:	d030      	beq.n	801aa12 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x74a>
 801a9b0:	9e0e      	ldr	r6, [sp, #56]	@ 0x38
 801a9b2:	4450      	add	r0, sl
 801a9b4:	ee76 6aa4 	vadd.f32	s13, s13, s9
 801a9b8:	4431      	add	r1, r6
 801a9ba:	ee37 7a04 	vadd.f32	s14, s14, s8
 801a9be:	ee77 7aa3 	vadd.f32	s15, s15, s7
 801a9c2:	4549      	cmp	r1, r9
 801a9c4:	db08      	blt.n	801a9d8 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x710>
 801a9c6:	ee77 7a85 	vadd.f32	s15, s15, s10
 801a9ca:	3001      	adds	r0, #1
 801a9cc:	ee76 6aa5 	vadd.f32	s13, s13, s11
 801a9d0:	eba1 0109 	sub.w	r1, r1, r9
 801a9d4:	ee37 7a06 	vadd.f32	s14, s14, s12
 801a9d8:	f10e 3eff 	add.w	lr, lr, #4294967295
 801a9dc:	f04f 0801 	mov.w	r8, #1
 801a9e0:	e7e3      	b.n	801a9aa <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x6e2>
 801a9e2:	9e0e      	ldr	r6, [sp, #56]	@ 0x38
 801a9e4:	4450      	add	r0, sl
 801a9e6:	ee37 7a24 	vadd.f32	s14, s14, s9
 801a9ea:	4431      	add	r1, r6
 801a9ec:	ee77 7a84 	vadd.f32	s15, s15, s8
 801a9f0:	ee76 6aa3 	vadd.f32	s13, s13, s7
 801a9f4:	4541      	cmp	r1, r8
 801a9f6:	db08      	blt.n	801aa0a <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x742>
 801a9f8:	ee76 6a85 	vadd.f32	s13, s13, s10
 801a9fc:	3001      	adds	r0, #1
 801a9fe:	ee37 7a25 	vadd.f32	s14, s14, s11
 801aa02:	eba1 0108 	sub.w	r1, r1, r8
 801aa06:	ee77 7a86 	vadd.f32	s15, s15, s12
 801aa0a:	3f01      	subs	r7, #1
 801aa0c:	f04f 0901 	mov.w	r9, #1
 801aa10:	e79e      	b.n	801a950 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x688>
 801aa12:	449c      	add	ip, r3
 801aa14:	1aff      	subs	r7, r7, r3
 801aa16:	f1b8 0f00 	cmp.w	r8, #0
 801aa1a:	d009      	beq.n	801aa30 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x768>
 801aa1c:	9019      	str	r0, [sp, #100]	@ 0x64
 801aa1e:	edcd 6a23 	vstr	s13, [sp, #140]	@ 0x8c
 801aa22:	ed8d 7a26 	vstr	s14, [sp, #152]	@ 0x98
 801aa26:	edcd 7a20 	vstr	s15, [sp, #128]	@ 0x80
 801aa2a:	911d      	str	r1, [sp, #116]	@ 0x74
 801aa2c:	e9cd c71e 	strd	ip, r7, [sp, #120]	@ 0x78
 801aa30:	1ad2      	subs	r2, r2, r3
 801aa32:	e6b5      	b.n	801a7a0 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x4d8>
 801aa34:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 801aa36:	681b      	ldr	r3, [r3, #0]
 801aa38:	b923      	cbnz	r3, 801aa44 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x77c>
 801aa3a:	4b04      	ldr	r3, [pc, #16]	@ (801aa4c <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x784>)
 801aa3c:	6818      	ldr	r0, [r3, #0]
 801aa3e:	6803      	ldr	r3, [r0, #0]
 801aa40:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801aa42:	4798      	blx	r3
 801aa44:	b05b      	add	sp, #364	@ 0x16c
 801aa46:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801aa4a:	bf00      	nop
 801aa4c:	2400b884 	.word	0x2400b884

0801aa50 <_ZN8touchgfx3LCD22WideTextInternalStructC1ERNS_12TextProviderEthPKNS_4FontENS_14WideTextActionE>:
 801aa50:	b570      	push	{r4, r5, r6, lr}
 801aa52:	4604      	mov	r4, r0
 801aa54:	2500      	movs	r5, #0
 801aa56:	9804      	ldr	r0, [sp, #16]
 801aa58:	7223      	strb	r3, [r4, #8]
 801aa5a:	f89d 3014 	ldrb.w	r3, [sp, #20]
 801aa5e:	8025      	strh	r5, [r4, #0]
 801aa60:	6061      	str	r1, [r4, #4]
 801aa62:	7263      	strb	r3, [r4, #9]
 801aa64:	60e0      	str	r0, [r4, #12]
 801aa66:	8222      	strh	r2, [r4, #16]
 801aa68:	8265      	strh	r5, [r4, #18]
 801aa6a:	82a5      	strh	r5, [r4, #20]
 801aa6c:	82e5      	strh	r5, [r4, #22]
 801aa6e:	8325      	strh	r5, [r4, #24]
 801aa70:	8365      	strh	r5, [r4, #26]
 801aa72:	83a5      	strh	r5, [r4, #28]
 801aa74:	77a5      	strb	r5, [r4, #30]
 801aa76:	6803      	ldr	r3, [r0, #0]
 801aa78:	695b      	ldr	r3, [r3, #20]
 801aa7a:	4798      	blx	r3
 801aa7c:	4606      	mov	r6, r0
 801aa7e:	b1f8      	cbz	r0, 801aac0 <_ZN8touchgfx3LCD22WideTextInternalStructC1ERNS_12TextProviderEthPKNS_4FontENS_14WideTextActionE+0x70>
 801aa80:	68e0      	ldr	r0, [r4, #12]
 801aa82:	4631      	mov	r1, r6
 801aa84:	6803      	ldr	r3, [r0, #0]
 801aa86:	68db      	ldr	r3, [r3, #12]
 801aa88:	4798      	blx	r3
 801aa8a:	7b43      	ldrb	r3, [r0, #13]
 801aa8c:	7a82      	ldrb	r2, [r0, #10]
 801aa8e:	4605      	mov	r5, r0
 801aa90:	005b      	lsls	r3, r3, #1
 801aa92:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 801aa96:	4313      	orrs	r3, r2
 801aa98:	83a3      	strh	r3, [r4, #28]
 801aa9a:	7a63      	ldrb	r3, [r4, #9]
 801aa9c:	2b04      	cmp	r3, #4
 801aa9e:	d10f      	bne.n	801aac0 <_ZN8touchgfx3LCD22WideTextInternalStructC1ERNS_12TextProviderEthPKNS_4FontENS_14WideTextActionE+0x70>
 801aaa0:	68e0      	ldr	r0, [r4, #12]
 801aaa2:	462a      	mov	r2, r5
 801aaa4:	4631      	mov	r1, r6
 801aaa6:	6803      	ldr	r3, [r0, #0]
 801aaa8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 801aaaa:	4798      	blx	r3
 801aaac:	7b6b      	ldrb	r3, [r5, #13]
 801aaae:	005b      	lsls	r3, r3, #1
 801aab0:	f403 7280 	and.w	r2, r3, #256	@ 0x100
 801aab4:	7aab      	ldrb	r3, [r5, #10]
 801aab6:	4313      	orrs	r3, r2
 801aab8:	4418      	add	r0, r3
 801aaba:	8ba3      	ldrh	r3, [r4, #28]
 801aabc:	4418      	add	r0, r3
 801aabe:	83a0      	strh	r0, [r4, #28]
 801aac0:	4620      	mov	r0, r4
 801aac2:	bd70      	pop	{r4, r5, r6, pc}

0801aac4 <_ZN8touchgfx3LCD11stringWidthERNS_12TextProviderERKNS_4FontEih>:
 801aac4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801aac8:	2400      	movs	r4, #0
 801aaca:	b085      	sub	sp, #20
 801aacc:	4681      	mov	r9, r0
 801aace:	4688      	mov	r8, r1
 801aad0:	4692      	mov	sl, r2
 801aad2:	469b      	mov	fp, r3
 801aad4:	4627      	mov	r7, r4
 801aad6:	4625      	mov	r5, r4
 801aad8:	4626      	mov	r6, r4
 801aada:	4554      	cmp	r4, sl
 801aadc:	da2a      	bge.n	801ab34 <_ZN8touchgfx3LCD11stringWidthERNS_12TextProviderERKNS_4FontEih+0x70>
 801aade:	2300      	movs	r3, #0
 801aae0:	9303      	str	r3, [sp, #12]
 801aae2:	f64f 63ff 	movw	r3, #65279	@ 0xfeff
 801aae6:	429d      	cmp	r5, r3
 801aae8:	d004      	beq.n	801aaf4 <_ZN8touchgfx3LCD11stringWidthERNS_12TextProviderERKNS_4FontEih+0x30>
 801aaea:	f242 030b 	movw	r3, #8203	@ 0x200b
 801aaee:	429d      	cmp	r5, r3
 801aaf0:	bf18      	it	ne
 801aaf2:	462f      	movne	r7, r5
 801aaf4:	ab03      	add	r3, sp, #12
 801aaf6:	4642      	mov	r2, r8
 801aaf8:	4659      	mov	r1, fp
 801aafa:	4648      	mov	r0, r9
 801aafc:	f002 ff82 	bl	801da04 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE>
 801ab00:	4605      	mov	r5, r0
 801ab02:	b1b8      	cbz	r0, 801ab34 <_ZN8touchgfx3LCD11stringWidthERNS_12TextProviderERKNS_4FontEih+0x70>
 801ab04:	280a      	cmp	r0, #10
 801ab06:	d015      	beq.n	801ab34 <_ZN8touchgfx3LCD11stringWidthERNS_12TextProviderERKNS_4FontEih+0x70>
 801ab08:	9a03      	ldr	r2, [sp, #12]
 801ab0a:	b18a      	cbz	r2, 801ab30 <_ZN8touchgfx3LCD11stringWidthERNS_12TextProviderERKNS_4FontEih+0x6c>
 801ab0c:	7b50      	ldrb	r0, [r2, #13]
 801ab0e:	4639      	mov	r1, r7
 801ab10:	7a93      	ldrb	r3, [r2, #10]
 801ab12:	0040      	lsls	r0, r0, #1
 801ab14:	8895      	ldrh	r5, [r2, #4]
 801ab16:	f400 7080 	and.w	r0, r0, #256	@ 0x100
 801ab1a:	4303      	orrs	r3, r0
 801ab1c:	4640      	mov	r0, r8
 801ab1e:	9301      	str	r3, [sp, #4]
 801ab20:	f8d8 3000 	ldr.w	r3, [r8]
 801ab24:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 801ab26:	4798      	blx	r3
 801ab28:	9b01      	ldr	r3, [sp, #4]
 801ab2a:	4418      	add	r0, r3
 801ab2c:	4406      	add	r6, r0
 801ab2e:	b2b6      	uxth	r6, r6
 801ab30:	3401      	adds	r4, #1
 801ab32:	e7d2      	b.n	801aada <_ZN8touchgfx3LCD11stringWidthERNS_12TextProviderERKNS_4FontEih+0x16>
 801ab34:	4630      	mov	r0, r6
 801ab36:	b005      	add	sp, #20
 801ab38:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0801ab3c <_ZN8touchgfx3LCD10rotateRectERNS_4RectERKS1_NS_12TextRotationE>:
 801ab3c:	2a02      	cmp	r2, #2
 801ab3e:	b530      	push	{r4, r5, lr}
 801ab40:	d011      	beq.n	801ab66 <_ZN8touchgfx3LCD10rotateRectERNS_4RectERKS1_NS_12TextRotationE+0x2a>
 801ab42:	2a03      	cmp	r2, #3
 801ab44:	d01c      	beq.n	801ab80 <_ZN8touchgfx3LCD10rotateRectERNS_4RectERKS1_NS_12TextRotationE+0x44>
 801ab46:	2a01      	cmp	r2, #1
 801ab48:	d10c      	bne.n	801ab64 <_ZN8touchgfx3LCD10rotateRectERNS_4RectERKS1_NS_12TextRotationE+0x28>
 801ab4a:	888b      	ldrh	r3, [r1, #4]
 801ab4c:	f9b0 2004 	ldrsh.w	r2, [r0, #4]
 801ab50:	8801      	ldrh	r1, [r0, #0]
 801ab52:	1a9b      	subs	r3, r3, r2
 801ab54:	8844      	ldrh	r4, [r0, #2]
 801ab56:	1a5b      	subs	r3, r3, r1
 801ab58:	f9b0 1006 	ldrsh.w	r1, [r0, #6]
 801ab5c:	8004      	strh	r4, [r0, #0]
 801ab5e:	8043      	strh	r3, [r0, #2]
 801ab60:	8081      	strh	r1, [r0, #4]
 801ab62:	80c2      	strh	r2, [r0, #6]
 801ab64:	bd30      	pop	{r4, r5, pc}
 801ab66:	88cb      	ldrh	r3, [r1, #6]
 801ab68:	88c2      	ldrh	r2, [r0, #6]
 801ab6a:	1a9b      	subs	r3, r3, r2
 801ab6c:	8842      	ldrh	r2, [r0, #2]
 801ab6e:	1a9b      	subs	r3, r3, r2
 801ab70:	888a      	ldrh	r2, [r1, #4]
 801ab72:	8881      	ldrh	r1, [r0, #4]
 801ab74:	8043      	strh	r3, [r0, #2]
 801ab76:	1a52      	subs	r2, r2, r1
 801ab78:	8801      	ldrh	r1, [r0, #0]
 801ab7a:	1a52      	subs	r2, r2, r1
 801ab7c:	8002      	strh	r2, [r0, #0]
 801ab7e:	e7f1      	b.n	801ab64 <_ZN8touchgfx3LCD10rotateRectERNS_4RectERKS1_NS_12TextRotationE+0x28>
 801ab80:	88cb      	ldrh	r3, [r1, #6]
 801ab82:	f9b0 2006 	ldrsh.w	r2, [r0, #6]
 801ab86:	8841      	ldrh	r1, [r0, #2]
 801ab88:	1a9b      	subs	r3, r3, r2
 801ab8a:	f9b0 5000 	ldrsh.w	r5, [r0]
 801ab8e:	f9b0 4004 	ldrsh.w	r4, [r0, #4]
 801ab92:	1a5b      	subs	r3, r3, r1
 801ab94:	8045      	strh	r5, [r0, #2]
 801ab96:	8082      	strh	r2, [r0, #4]
 801ab98:	8003      	strh	r3, [r0, #0]
 801ab9a:	80c4      	strh	r4, [r0, #6]
 801ab9c:	e7e2      	b.n	801ab64 <_ZN8touchgfx3LCD10rotateRectERNS_4RectERKS1_NS_12TextRotationE+0x28>

0801ab9e <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib>:
 801ab9e:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801aba2:	b09f      	sub	sp, #124	@ 0x7c
 801aba4:	9116      	str	r1, [sp, #88]	@ 0x58
 801aba6:	9317      	str	r3, [sp, #92]	@ 0x5c
 801aba8:	9929      	ldr	r1, [sp, #164]	@ 0xa4
 801abaa:	9b29      	ldr	r3, [sp, #164]	@ 0xa4
 801abac:	8809      	ldrh	r1, [r1, #0]
 801abae:	889b      	ldrh	r3, [r3, #4]
 801abb0:	f8dd 80a8 	ldr.w	r8, [sp, #168]	@ 0xa8
 801abb4:	440b      	add	r3, r1
 801abb6:	9212      	str	r2, [sp, #72]	@ 0x48
 801abb8:	f89d 20b8 	ldrb.w	r2, [sp, #184]	@ 0xb8
 801abbc:	b21b      	sxth	r3, r3
 801abbe:	9011      	str	r0, [sp, #68]	@ 0x44
 801abc0:	f89d b0ac 	ldrb.w	fp, [sp, #172]	@ 0xac
 801abc4:	9310      	str	r3, [sp, #64]	@ 0x40
 801abc6:	f8d8 3000 	ldr.w	r3, [r8]
 801abca:	7a59      	ldrb	r1, [r3, #9]
 801abcc:	7a1b      	ldrb	r3, [r3, #8]
 801abce:	9114      	str	r1, [sp, #80]	@ 0x50
 801abd0:	9315      	str	r3, [sp, #84]	@ 0x54
 801abd2:	9b28      	ldr	r3, [sp, #160]	@ 0xa0
 801abd4:	f9b3 5000 	ldrsh.w	r5, [r3]
 801abd8:	2a00      	cmp	r2, #0
 801abda:	d067      	beq.n	801acac <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x10e>
 801abdc:	f898 3010 	ldrb.w	r3, [r8, #16]
 801abe0:	9a2d      	ldr	r2, [sp, #180]	@ 0xb4
 801abe2:	2b04      	cmp	r3, #4
 801abe4:	bf14      	ite	ne
 801abe6:	2301      	movne	r3, #1
 801abe8:	2302      	moveq	r3, #2
 801abea:	4413      	add	r3, r2
 801abec:	f04f 0900 	mov.w	r9, #0
 801abf0:	930f      	str	r3, [sp, #60]	@ 0x3c
 801abf2:	464c      	mov	r4, r9
 801abf4:	f8cd 9038 	str.w	r9, [sp, #56]	@ 0x38
 801abf8:	f8cd 9034 	str.w	r9, [sp, #52]	@ 0x34
 801abfc:	e9dd 320e 	ldrd	r3, r2, [sp, #56]	@ 0x38
 801ac00:	4293      	cmp	r3, r2
 801ac02:	f280 808c 	bge.w	801ad1e <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x180>
 801ac06:	2300      	movs	r3, #0
 801ac08:	931c      	str	r3, [sp, #112]	@ 0x70
 801ac0a:	f64f 63ff 	movw	r3, #65279	@ 0xfeff
 801ac0e:	429c      	cmp	r4, r3
 801ac10:	d006      	beq.n	801ac20 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x82>
 801ac12:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 801ac14:	f242 020b 	movw	r2, #8203	@ 0x200b
 801ac18:	4294      	cmp	r4, r2
 801ac1a:	bf18      	it	ne
 801ac1c:	4623      	movne	r3, r4
 801ac1e:	930d      	str	r3, [sp, #52]	@ 0x34
 801ac20:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 801ac22:	992d      	ldr	r1, [sp, #180]	@ 0xb4
 801ac24:	f8d8 2000 	ldr.w	r2, [r8]
 801ac28:	428b      	cmp	r3, r1
 801ac2a:	db41      	blt.n	801acb0 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x112>
 801ac2c:	6813      	ldr	r3, [r2, #0]
 801ac2e:	4610      	mov	r0, r2
 801ac30:	695b      	ldr	r3, [r3, #20]
 801ac32:	4798      	blx	r3
 801ac34:	4604      	mov	r4, r0
 801ac36:	f8d8 0000 	ldr.w	r0, [r8]
 801ac3a:	aa1d      	add	r2, sp, #116	@ 0x74
 801ac3c:	4621      	mov	r1, r4
 801ac3e:	6803      	ldr	r3, [r0, #0]
 801ac40:	689e      	ldr	r6, [r3, #8]
 801ac42:	f10d 036f 	add.w	r3, sp, #111	@ 0x6f
 801ac46:	47b0      	blx	r6
 801ac48:	901c      	str	r0, [sp, #112]	@ 0x70
 801ac4a:	f64f 63ff 	movw	r3, #65279	@ 0xfeff
 801ac4e:	429c      	cmp	r4, r3
 801ac50:	f000 80ea 	beq.w	801ae28 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x28a>
 801ac54:	f242 030b 	movw	r3, #8203	@ 0x200b
 801ac58:	429c      	cmp	r4, r3
 801ac5a:	f000 80e5 	beq.w	801ae28 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x28a>
 801ac5e:	2c00      	cmp	r4, #0
 801ac60:	f000 80f7 	beq.w	801ae52 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x2b4>
 801ac64:	2c0a      	cmp	r4, #10
 801ac66:	d060      	beq.n	801ad2a <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x18c>
 801ac68:	9a1c      	ldr	r2, [sp, #112]	@ 0x70
 801ac6a:	b36a      	cbz	r2, 801acc8 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x12a>
 801ac6c:	8894      	ldrh	r4, [r2, #4]
 801ac6e:	f1bb 0f00 	cmp.w	fp, #0
 801ac72:	d03b      	beq.n	801acec <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x14e>
 801ac74:	f892 900d 	ldrb.w	r9, [r2, #13]
 801ac78:	f1bb 0f01 	cmp.w	fp, #1
 801ac7c:	ea4f 0949 	mov.w	r9, r9, lsl #1
 801ac80:	f409 7380 	and.w	r3, r9, #256	@ 0x100
 801ac84:	f892 900a 	ldrb.w	r9, [r2, #10]
 801ac88:	ea49 0903 	orr.w	r9, r9, r3
 801ac8c:	d134      	bne.n	801acf8 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x15a>
 801ac8e:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 801ac90:	eba5 0509 	sub.w	r5, r5, r9
 801ac94:	2b00      	cmp	r3, #0
 801ac96:	d14f      	bne.n	801ad38 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x19a>
 801ac98:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 801ac9a:	eb09 0305 	add.w	r3, r9, r5
 801ac9e:	4413      	add	r3, r2
 801aca0:	9a29      	ldr	r2, [sp, #164]	@ 0xa4
 801aca2:	f9b2 2000 	ldrsh.w	r2, [r2]
 801aca6:	4293      	cmp	r3, r2
 801aca8:	da51      	bge.n	801ad4e <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x1b0>
 801acaa:	e038      	b.n	801ad1e <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x180>
 801acac:	9b2d      	ldr	r3, [sp, #180]	@ 0xb4
 801acae:	e79d      	b.n	801abec <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x4e>
 801acb0:	f10d 036f 	add.w	r3, sp, #111	@ 0x6f
 801acb4:	4659      	mov	r1, fp
 801acb6:	982c      	ldr	r0, [sp, #176]	@ 0xb0
 801acb8:	9301      	str	r3, [sp, #4]
 801acba:	ab1d      	add	r3, sp, #116	@ 0x74
 801acbc:	9300      	str	r3, [sp, #0]
 801acbe:	ab1c      	add	r3, sp, #112	@ 0x70
 801acc0:	f002 fef8 	bl	801dab4 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeERPKhRh>
 801acc4:	4604      	mov	r4, r0
 801acc6:	e7c0      	b.n	801ac4a <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0xac>
 801acc8:	f8d8 0000 	ldr.w	r0, [r8]
 801accc:	6803      	ldr	r3, [r0, #0]
 801acce:	691b      	ldr	r3, [r3, #16]
 801acd0:	4798      	blx	r3
 801acd2:	f64f 63ff 	movw	r3, #65279	@ 0xfeff
 801acd6:	4298      	cmp	r0, r3
 801acd8:	f000 80a6 	beq.w	801ae28 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x28a>
 801acdc:	f242 030b 	movw	r3, #8203	@ 0x200b
 801ace0:	4298      	cmp	r0, r3
 801ace2:	f000 80a1 	beq.w	801ae28 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x28a>
 801ace6:	f1bb 0f00 	cmp.w	fp, #0
 801acea:	d100      	bne.n	801acee <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x150>
 801acec:	444d      	add	r5, r9
 801acee:	9a1c      	ldr	r2, [sp, #112]	@ 0x70
 801acf0:	2a00      	cmp	r2, #0
 801acf2:	d1bf      	bne.n	801ac74 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0xd6>
 801acf4:	4691      	mov	r9, r2
 801acf6:	e097      	b.n	801ae28 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x28a>
 801acf8:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 801acfa:	2b00      	cmp	r3, #0
 801acfc:	f000 80ab 	beq.w	801ae56 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x2b8>
 801ad00:	f1bb 0f00 	cmp.w	fp, #0
 801ad04:	d118      	bne.n	801ad38 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x19a>
 801ad06:	f8d8 0000 	ldr.w	r0, [r8]
 801ad0a:	990d      	ldr	r1, [sp, #52]	@ 0x34
 801ad0c:	6803      	ldr	r3, [r0, #0]
 801ad0e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 801ad10:	4798      	blx	r3
 801ad12:	4405      	add	r5, r0
 801ad14:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 801ad16:	9a10      	ldr	r2, [sp, #64]	@ 0x40
 801ad18:	1aeb      	subs	r3, r5, r3
 801ad1a:	4293      	cmp	r3, r2
 801ad1c:	dd17      	ble.n	801ad4e <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x1b0>
 801ad1e:	2c00      	cmp	r4, #0
 801ad20:	f000 8097 	beq.w	801ae52 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x2b4>
 801ad24:	2c0a      	cmp	r4, #10
 801ad26:	f040 8085 	bne.w	801ae34 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x296>
 801ad2a:	240a      	movs	r4, #10
 801ad2c:	fab4 f084 	clz	r0, r4
 801ad30:	0940      	lsrs	r0, r0, #5
 801ad32:	b01f      	add	sp, #124	@ 0x7c
 801ad34:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801ad38:	f8d8 0000 	ldr.w	r0, [r8]
 801ad3c:	990d      	ldr	r1, [sp, #52]	@ 0x34
 801ad3e:	6803      	ldr	r3, [r0, #0]
 801ad40:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 801ad42:	4798      	blx	r3
 801ad44:	f1bb 0f01 	cmp.w	fp, #1
 801ad48:	eba5 0500 	sub.w	r5, r5, r0
 801ad4c:	d0a4      	beq.n	801ac98 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0xfa>
 801ad4e:	981c      	ldr	r0, [sp, #112]	@ 0x70
 801ad50:	9b29      	ldr	r3, [sp, #164]	@ 0xa4
 801ad52:	f990 1009 	ldrsb.w	r1, [r0, #9]
 801ad56:	f9b3 6000 	ldrsh.w	r6, [r3]
 801ad5a:	7b43      	ldrb	r3, [r0, #13]
 801ad5c:	4429      	add	r1, r5
 801ad5e:	015b      	lsls	r3, r3, #5
 801ad60:	f403 7280 	and.w	r2, r3, #256	@ 0x100
 801ad64:	7983      	ldrb	r3, [r0, #6]
 801ad66:	4313      	orrs	r3, r2
 801ad68:	440b      	add	r3, r1
 801ad6a:	42b3      	cmp	r3, r6
 801ad6c:	db5c      	blt.n	801ae28 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x28a>
 801ad6e:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 801ad70:	4299      	cmp	r1, r3
 801ad72:	da59      	bge.n	801ae28 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x28a>
 801ad74:	f8d8 0000 	ldr.w	r0, [r8]
 801ad78:	42ae      	cmp	r6, r5
 801ad7a:	6803      	ldr	r3, [r0, #0]
 801ad7c:	bfcc      	ite	gt
 801ad7e:	1b76      	subgt	r6, r6, r5
 801ad80:	2600      	movle	r6, #0
 801ad82:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801ad84:	bfc8      	it	gt
 801ad86:	b2b6      	uxthgt	r6, r6
 801ad88:	4798      	blx	r3
 801ad8a:	9b1c      	ldr	r3, [sp, #112]	@ 0x70
 801ad8c:	7b5a      	ldrb	r2, [r3, #13]
 801ad8e:	00d1      	lsls	r1, r2, #3
 801ad90:	f401 7780 	and.w	r7, r1, #256	@ 0x100
 801ad94:	7a19      	ldrb	r1, [r3, #8]
 801ad96:	4339      	orrs	r1, r7
 801ad98:	0657      	lsls	r7, r2, #25
 801ad9a:	9f17      	ldr	r7, [sp, #92]	@ 0x5c
 801ad9c:	bf48      	it	mi
 801ad9e:	f5a1 7100 	submi.w	r1, r1, #512	@ 0x200
 801ada2:	4407      	add	r7, r0
 801ada4:	bf48      	it	mi
 801ada6:	b209      	sxthmi	r1, r1
 801ada8:	1a7f      	subs	r7, r7, r1
 801adaa:	9929      	ldr	r1, [sp, #164]	@ 0xa4
 801adac:	b2bf      	uxth	r7, r7
 801adae:	f9b1 1002 	ldrsh.w	r1, [r1, #2]
 801adb2:	fa0f fa87 	sxth.w	sl, r7
 801adb6:	4551      	cmp	r1, sl
 801adb8:	dd3a      	ble.n	801ae30 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x292>
 801adba:	0112      	lsls	r2, r2, #4
 801adbc:	79d8      	ldrb	r0, [r3, #7]
 801adbe:	f402 7280 	and.w	r2, r2, #256	@ 0x100
 801adc2:	4302      	orrs	r2, r0
 801adc4:	4492      	add	sl, r2
 801adc6:	4551      	cmp	r1, sl
 801adc8:	dc2e      	bgt.n	801ae28 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x28a>
 801adca:	1bcf      	subs	r7, r1, r7
 801adcc:	468a      	mov	sl, r1
 801adce:	b2bf      	uxth	r7, r7
 801add0:	9319      	str	r3, [sp, #100]	@ 0x64
 801add2:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 801add4:	f8d8 0000 	ldr.w	r0, [r8]
 801add8:	681a      	ldr	r2, [r3, #0]
 801adda:	6801      	ldr	r1, [r0, #0]
 801addc:	6c53      	ldr	r3, [r2, #68]	@ 0x44
 801adde:	9a1d      	ldr	r2, [sp, #116]	@ 0x74
 801ade0:	9313      	str	r3, [sp, #76]	@ 0x4c
 801ade2:	9218      	str	r2, [sp, #96]	@ 0x60
 801ade4:	6b89      	ldr	r1, [r1, #56]	@ 0x38
 801ade6:	4788      	blx	r1
 801ade8:	f898 1006 	ldrb.w	r1, [r8, #6]
 801adec:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 801adee:	910b      	str	r1, [sp, #44]	@ 0x2c
 801adf0:	f898 100e 	ldrb.w	r1, [r8, #14]
 801adf4:	9a18      	ldr	r2, [sp, #96]	@ 0x60
 801adf6:	910a      	str	r1, [sp, #40]	@ 0x28
 801adf8:	f89d 106f 	ldrb.w	r1, [sp, #111]	@ 0x6f
 801adfc:	9109      	str	r1, [sp, #36]	@ 0x24
 801adfe:	f8d8 1008 	ldr.w	r1, [r8, #8]
 801ae02:	9305      	str	r3, [sp, #20]
 801ae04:	9b29      	ldr	r3, [sp, #164]	@ 0xa4
 801ae06:	9206      	str	r2, [sp, #24]
 801ae08:	e9cd a601 	strd	sl, r6, [sp, #4]
 801ae0c:	442e      	add	r6, r5
 801ae0e:	e9cd 7303 	strd	r7, r3, [sp, #12]
 801ae12:	b236      	sxth	r6, r6
 801ae14:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 801ae16:	e9cd 0107 	strd	r0, r1, [sp, #28]
 801ae1a:	9600      	str	r6, [sp, #0]
 801ae1c:	9916      	ldr	r1, [sp, #88]	@ 0x58
 801ae1e:	681a      	ldr	r2, [r3, #0]
 801ae20:	9811      	ldr	r0, [sp, #68]	@ 0x44
 801ae22:	685b      	ldr	r3, [r3, #4]
 801ae24:	9e13      	ldr	r6, [sp, #76]	@ 0x4c
 801ae26:	47b0      	blx	r6
 801ae28:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 801ae2a:	3301      	adds	r3, #1
 801ae2c:	930e      	str	r3, [sp, #56]	@ 0x38
 801ae2e:	e6e5      	b.n	801abfc <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x5e>
 801ae30:	2700      	movs	r7, #0
 801ae32:	e7cd      	b.n	801add0 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x232>
 801ae34:	9d0e      	ldr	r5, [sp, #56]	@ 0x38
 801ae36:	3501      	adds	r5, #1
 801ae38:	9b2d      	ldr	r3, [sp, #180]	@ 0xb4
 801ae3a:	429d      	cmp	r5, r3
 801ae3c:	f6bf af76 	bge.w	801ad2c <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x18e>
 801ae40:	4659      	mov	r1, fp
 801ae42:	982c      	ldr	r0, [sp, #176]	@ 0xb0
 801ae44:	f7ee ff94 	bl	8009d70 <_ZN8touchgfx12TextProvider15getNextLigatureEh>
 801ae48:	4604      	mov	r4, r0
 801ae4a:	b110      	cbz	r0, 801ae52 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x2b4>
 801ae4c:	280a      	cmp	r0, #10
 801ae4e:	d1f2      	bne.n	801ae36 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x298>
 801ae50:	e76b      	b.n	801ad2a <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x18c>
 801ae52:	2400      	movs	r4, #0
 801ae54:	e76a      	b.n	801ad2c <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x18e>
 801ae56:	f1bb 0f00 	cmp.w	fp, #0
 801ae5a:	f43f af5b 	beq.w	801ad14 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x176>
 801ae5e:	e776      	b.n	801ad4e <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x1b0>

0801ae60 <_ZN8touchgfx3LCD22WideTextInternalStruct7addWordEttt>:
 801ae60:	b530      	push	{r4, r5, lr}
 801ae62:	8a44      	ldrh	r4, [r0, #18]
 801ae64:	8ac5      	ldrh	r5, [r0, #22]
 801ae66:	82c3      	strh	r3, [r0, #22]
 801ae68:	442c      	add	r4, r5
 801ae6a:	1ae4      	subs	r4, r4, r3
 801ae6c:	8b03      	ldrh	r3, [r0, #24]
 801ae6e:	8244      	strh	r4, [r0, #18]
 801ae70:	8a84      	ldrh	r4, [r0, #20]
 801ae72:	4422      	add	r2, r4
 801ae74:	440c      	add	r4, r1
 801ae76:	1a59      	subs	r1, r3, r1
 801ae78:	8342      	strh	r2, [r0, #26]
 801ae7a:	8284      	strh	r4, [r0, #20]
 801ae7c:	8301      	strh	r1, [r0, #24]
 801ae7e:	bd30      	pop	{r4, r5, pc}

0801ae80 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb>:
 801ae80:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801ae84:	7a43      	ldrb	r3, [r0, #9]
 801ae86:	b087      	sub	sp, #28
 801ae88:	4604      	mov	r4, r0
 801ae8a:	460f      	mov	r7, r1
 801ae8c:	1eda      	subs	r2, r3, #3
 801ae8e:	b2d2      	uxtb	r2, r2
 801ae90:	2900      	cmp	r1, #0
 801ae92:	d036      	beq.n	801af02 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x82>
 801ae94:	2a01      	cmp	r2, #1
 801ae96:	d932      	bls.n	801aefe <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x7e>
 801ae98:	1e58      	subs	r0, r3, #1
 801ae9a:	f1d0 0b00 	rsbs	fp, r0, #0
 801ae9e:	eb4b 0b00 	adc.w	fp, fp, r0
 801aea2:	1e99      	subs	r1, r3, #2
 801aea4:	424b      	negs	r3, r1
 801aea6:	414b      	adcs	r3, r1
 801aea8:	9303      	str	r3, [sp, #12]
 801aeaa:	2300      	movs	r3, #0
 801aeac:	e9cd 3301 	strd	r3, r3, [sp, #4]
 801aeb0:	2500      	movs	r5, #0
 801aeb2:	f242 0a0b 	movw	sl, #8203	@ 0x200b
 801aeb6:	46a9      	mov	r9, r5
 801aeb8:	8265      	strh	r5, [r4, #18]
 801aeba:	82a5      	strh	r5, [r4, #20]
 801aebc:	2300      	movs	r3, #0
 801aebe:	9305      	str	r3, [sp, #20]
 801aec0:	8823      	ldrh	r3, [r4, #0]
 801aec2:	2b20      	cmp	r3, #32
 801aec4:	d02b      	beq.n	801af1e <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x9e>
 801aec6:	eba3 020a 	sub.w	r2, r3, sl
 801aeca:	4256      	negs	r6, r2
 801aecc:	4156      	adcs	r6, r2
 801aece:	f64f 62ff 	movw	r2, #65279	@ 0xfeff
 801aed2:	4293      	cmp	r3, r2
 801aed4:	d004      	beq.n	801aee0 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x60>
 801aed6:	4553      	cmp	r3, sl
 801aed8:	bf16      	itet	ne
 801aeda:	4699      	movne	r9, r3
 801aedc:	2601      	moveq	r6, #1
 801aede:	2600      	movne	r6, #0
 801aee0:	ab05      	add	r3, sp, #20
 801aee2:	68e2      	ldr	r2, [r4, #12]
 801aee4:	7a21      	ldrb	r1, [r4, #8]
 801aee6:	6860      	ldr	r0, [r4, #4]
 801aee8:	f002 fd8c 	bl	801da04 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE>
 801aeec:	8020      	strh	r0, [r4, #0]
 801aeee:	b9c8      	cbnz	r0, 801af24 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0xa4>
 801aef0:	8b22      	ldrh	r2, [r4, #24]
 801aef2:	2300      	movs	r3, #0
 801aef4:	4611      	mov	r1, r2
 801aef6:	4620      	mov	r0, r4
 801aef8:	f7ff ffb2 	bl	801ae60 <_ZN8touchgfx3LCD22WideTextInternalStruct7addWordEttt>
 801aefc:	e066      	b.n	801afcc <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x14c>
 801aefe:	468b      	mov	fp, r1
 801af00:	e7cf      	b.n	801aea2 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x22>
 801af02:	3b01      	subs	r3, #1
 801af04:	2a01      	cmp	r2, #1
 801af06:	9103      	str	r1, [sp, #12]
 801af08:	468b      	mov	fp, r1
 801af0a:	bf8c      	ite	hi
 801af0c:	2200      	movhi	r2, #0
 801af0e:	2201      	movls	r2, #1
 801af10:	2b01      	cmp	r3, #1
 801af12:	9202      	str	r2, [sp, #8]
 801af14:	bf8c      	ite	hi
 801af16:	2300      	movhi	r3, #0
 801af18:	2301      	movls	r3, #1
 801af1a:	9301      	str	r3, [sp, #4]
 801af1c:	e7c8      	b.n	801aeb0 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x30>
 801af1e:	4699      	mov	r9, r3
 801af20:	2601      	movs	r6, #1
 801af22:	e7dd      	b.n	801aee0 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x60>
 801af24:	8ae3      	ldrh	r3, [r4, #22]
 801af26:	280a      	cmp	r0, #10
 801af28:	f103 0301 	add.w	r3, r3, #1
 801af2c:	82e3      	strh	r3, [r4, #22]
 801af2e:	d0df      	beq.n	801aef0 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x70>
 801af30:	9a05      	ldr	r2, [sp, #20]
 801af32:	bb42      	cbnz	r2, 801af86 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x106>
 801af34:	f64f 63ff 	movw	r3, #65279	@ 0xfeff
 801af38:	4298      	cmp	r0, r3
 801af3a:	d001      	beq.n	801af40 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0xc0>
 801af3c:	4550      	cmp	r0, sl
 801af3e:	d1bd      	bne.n	801aebc <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x3c>
 801af40:	8823      	ldrh	r3, [r4, #0]
 801af42:	8b21      	ldrh	r1, [r4, #24]
 801af44:	2b20      	cmp	r3, #32
 801af46:	d001      	beq.n	801af4c <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0xcc>
 801af48:	4553      	cmp	r3, sl
 801af4a:	d131      	bne.n	801afb0 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x130>
 801af4c:	2e00      	cmp	r6, #0
 801af4e:	bf0a      	itet	eq
 801af50:	460d      	moveq	r5, r1
 801af52:	4630      	movne	r0, r6
 801af54:	2001      	moveq	r0, #1
 801af56:	440a      	add	r2, r1
 801af58:	8aa3      	ldrh	r3, [r4, #20]
 801af5a:	f8b4 c010 	ldrh.w	ip, [r4, #16]
 801af5e:	b292      	uxth	r2, r2
 801af60:	8322      	strh	r2, [r4, #24]
 801af62:	4413      	add	r3, r2
 801af64:	2f00      	cmp	r7, #0
 801af66:	d03a      	beq.n	801afde <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x15e>
 801af68:	f1bb 0f00 	cmp.w	fp, #0
 801af6c:	d102      	bne.n	801af74 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0xf4>
 801af6e:	9903      	ldr	r1, [sp, #12]
 801af70:	b301      	cbz	r1, 801afb4 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x134>
 801af72:	b1f8      	cbz	r0, 801afb4 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x134>
 801af74:	8ba1      	ldrh	r1, [r4, #28]
 801af76:	4419      	add	r1, r3
 801af78:	458c      	cmp	ip, r1
 801af7a:	da2a      	bge.n	801afd2 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x152>
 801af7c:	8a61      	ldrh	r1, [r4, #18]
 801af7e:	b341      	cbz	r1, 801afd2 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x152>
 801af80:	4563      	cmp	r3, ip
 801af82:	dd9b      	ble.n	801aebc <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x3c>
 801af84:	e01c      	b.n	801afc0 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x140>
 801af86:	8893      	ldrh	r3, [r2, #4]
 801af88:	4649      	mov	r1, r9
 801af8a:	8023      	strh	r3, [r4, #0]
 801af8c:	f892 800d 	ldrb.w	r8, [r2, #13]
 801af90:	ea4f 0848 	mov.w	r8, r8, lsl #1
 801af94:	f408 7080 	and.w	r0, r8, #256	@ 0x100
 801af98:	f892 800a 	ldrb.w	r8, [r2, #10]
 801af9c:	ea48 0800 	orr.w	r8, r8, r0
 801afa0:	68e0      	ldr	r0, [r4, #12]
 801afa2:	6803      	ldr	r3, [r0, #0]
 801afa4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 801afa6:	4798      	blx	r3
 801afa8:	eb08 0200 	add.w	r2, r8, r0
 801afac:	b292      	uxth	r2, r2
 801afae:	e7c7      	b.n	801af40 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0xc0>
 801afb0:	2000      	movs	r0, #0
 801afb2:	e7d0      	b.n	801af56 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0xd6>
 801afb4:	4563      	cmp	r3, ip
 801afb6:	dd81      	ble.n	801aebc <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x3c>
 801afb8:	8a63      	ldrh	r3, [r4, #18]
 801afba:	2b00      	cmp	r3, #0
 801afbc:	f43f af7e 	beq.w	801aebc <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x3c>
 801afc0:	2301      	movs	r3, #1
 801afc2:	8ba2      	ldrh	r2, [r4, #28]
 801afc4:	77a3      	strb	r3, [r4, #30]
 801afc6:	8b63      	ldrh	r3, [r4, #26]
 801afc8:	4413      	add	r3, r2
 801afca:	8363      	strh	r3, [r4, #26]
 801afcc:	b007      	add	sp, #28
 801afce:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801afd2:	2300      	movs	r3, #0
 801afd4:	4611      	mov	r1, r2
 801afd6:	4620      	mov	r0, r4
 801afd8:	f7ff ff42 	bl	801ae60 <_ZN8touchgfx3LCD22WideTextInternalStruct7addWordEttt>
 801afdc:	e76e      	b.n	801aebc <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x3c>
 801afde:	4563      	cmp	r3, ip
 801afe0:	dd14      	ble.n	801b00c <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x18c>
 801afe2:	9b02      	ldr	r3, [sp, #8]
 801afe4:	b113      	cbz	r3, 801afec <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x16c>
 801afe6:	2301      	movs	r3, #1
 801afe8:	460a      	mov	r2, r1
 801afea:	e783      	b.n	801aef4 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x74>
 801afec:	9b01      	ldr	r3, [sp, #4]
 801afee:	2b00      	cmp	r3, #0
 801aff0:	f43f af64 	beq.w	801aebc <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x3c>
 801aff4:	2800      	cmp	r0, #0
 801aff6:	f47f af61 	bne.w	801aebc <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x3c>
 801affa:	b116      	cbz	r6, 801b002 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x182>
 801affc:	2301      	movs	r3, #1
 801affe:	462a      	mov	r2, r5
 801b000:	e779      	b.n	801aef6 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x76>
 801b002:	8a63      	ldrh	r3, [r4, #18]
 801b004:	2b00      	cmp	r3, #0
 801b006:	f43f af59 	beq.w	801aebc <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x3c>
 801b00a:	e7df      	b.n	801afcc <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x14c>
 801b00c:	2800      	cmp	r0, #0
 801b00e:	f47f af55 	bne.w	801aebc <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x3c>
 801b012:	2e00      	cmp	r6, #0
 801b014:	f43f af52 	beq.w	801aebc <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x3c>
 801b018:	2301      	movs	r3, #1
 801b01a:	462a      	mov	r2, r5
 801b01c:	e7db      	b.n	801afd6 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x156>

0801b01e <_ZN8touchgfx3LCD11getNumLinesERNS_12TextProviderENS_14WideTextActionEhPKNS_4FontEs>:
 801b01e:	b530      	push	{r4, r5, lr}
 801b020:	4605      	mov	r5, r0
 801b022:	b08b      	sub	sp, #44	@ 0x2c
 801b024:	b191      	cbz	r1, 801b04c <_ZN8touchgfx3LCD11getNumLinesERNS_12TextProviderENS_14WideTextActionEhPKNS_4FontEs+0x2e>
 801b026:	2401      	movs	r4, #1
 801b028:	e9cd 3100 	strd	r3, r1, [sp]
 801b02c:	4613      	mov	r3, r2
 801b02e:	4601      	mov	r1, r0
 801b030:	f8bd 2038 	ldrh.w	r2, [sp, #56]	@ 0x38
 801b034:	a802      	add	r0, sp, #8
 801b036:	f7ff fd0b 	bl	801aa50 <_ZN8touchgfx3LCD22WideTextInternalStructC1ERNS_12TextProviderEthPKNS_4FontENS_14WideTextActionE>
 801b03a:	2100      	movs	r1, #0
 801b03c:	a802      	add	r0, sp, #8
 801b03e:	f7ff ff1f 	bl	801ae80 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb>
 801b042:	f8bd 3008 	ldrh.w	r3, [sp, #8]
 801b046:	b163      	cbz	r3, 801b062 <_ZN8touchgfx3LCD11getNumLinesERNS_12TextProviderENS_14WideTextActionEhPKNS_4FontEs+0x44>
 801b048:	3401      	adds	r4, #1
 801b04a:	e7f6      	b.n	801b03a <_ZN8touchgfx3LCD11getNumLinesERNS_12TextProviderENS_14WideTextActionEhPKNS_4FontEs+0x1c>
 801b04c:	2401      	movs	r4, #1
 801b04e:	f002 fdd3 	bl	801dbf8 <_ZN8touchgfx12TextProvider11getNextCharEv>
 801b052:	280a      	cmp	r0, #10
 801b054:	4628      	mov	r0, r5
 801b056:	bf08      	it	eq
 801b058:	3401      	addeq	r4, #1
 801b05a:	f002 fdcd 	bl	801dbf8 <_ZN8touchgfx12TextProvider11getNextCharEv>
 801b05e:	2800      	cmp	r0, #0
 801b060:	d1f7      	bne.n	801b052 <_ZN8touchgfx3LCD11getNumLinesERNS_12TextProviderENS_14WideTextActionEhPKNS_4FontEs+0x34>
 801b062:	b2a0      	uxth	r0, r4
 801b064:	b00b      	add	sp, #44	@ 0x2c
 801b066:	bd30      	pop	{r4, r5, pc}

0801b068 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list>:
 801b068:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801b06c:	b0e5      	sub	sp, #404	@ 0x194
 801b06e:	4689      	mov	r9, r1
 801b070:	461c      	mov	r4, r3
 801b072:	f8dd a1b8 	ldr.w	sl, [sp, #440]	@ 0x1b8
 801b076:	900a      	str	r0, [sp, #40]	@ 0x28
 801b078:	f1ba 0f00 	cmp.w	sl, #0
 801b07c:	f000 80b4 	beq.w	801b1e8 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x180>
 801b080:	681b      	ldr	r3, [r3, #0]
 801b082:	2b00      	cmp	r3, #0
 801b084:	f000 80b0 	beq.w	801b1e8 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x180>
 801b088:	7ba3      	ldrb	r3, [r4, #14]
 801b08a:	2b00      	cmp	r3, #0
 801b08c:	f000 80ac 	beq.w	801b1e8 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x180>
 801b090:	f10d 0834 	add.w	r8, sp, #52	@ 0x34
 801b094:	6810      	ldr	r0, [r2, #0]
 801b096:	6851      	ldr	r1, [r2, #4]
 801b098:	2500      	movs	r5, #0
 801b09a:	4643      	mov	r3, r8
 801b09c:	f9b9 2004 	ldrsh.w	r2, [r9, #4]
 801b0a0:	950f      	str	r5, [sp, #60]	@ 0x3c
 801b0a2:	af19      	add	r7, sp, #100	@ 0x64
 801b0a4:	f8ad 2040 	strh.w	r2, [sp, #64]	@ 0x40
 801b0a8:	79a2      	ldrb	r2, [r4, #6]
 801b0aa:	c303      	stmia	r3!, {r0, r1}
 801b0ac:	f9b9 3006 	ldrsh.w	r3, [r9, #6]
 801b0b0:	a90f      	add	r1, sp, #60	@ 0x3c
 801b0b2:	4640      	mov	r0, r8
 801b0b4:	f8ad 3042 	strh.w	r3, [sp, #66]	@ 0x42
 801b0b8:	f7ff fd40 	bl	801ab3c <_ZN8touchgfx3LCD10rotateRectERNS_4RectERKS1_NS_12TextRotationE>
 801b0bc:	a90f      	add	r1, sp, #60	@ 0x3c
 801b0be:	79a2      	ldrb	r2, [r4, #6]
 801b0c0:	4608      	mov	r0, r1
 801b0c2:	f7ff fd3b 	bl	801ab3c <_ZN8touchgfx3LCD10rotateRectERNS_4RectERKS1_NS_12TextRotationE>
 801b0c6:	4638      	mov	r0, r7
 801b0c8:	f002 f948 	bl	801d35c <_ZN8touchgfx12TextProviderC1Ev>
 801b0cc:	6820      	ldr	r0, [r4, #0]
 801b0ce:	6803      	ldr	r3, [r0, #0]
 801b0d0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 801b0d2:	4798      	blx	r3
 801b0d4:	4606      	mov	r6, r0
 801b0d6:	6820      	ldr	r0, [r4, #0]
 801b0d8:	6803      	ldr	r3, [r0, #0]
 801b0da:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 801b0dc:	4798      	blx	r3
 801b0de:	4633      	mov	r3, r6
 801b0e0:	9000      	str	r0, [sp, #0]
 801b0e2:	4651      	mov	r1, sl
 801b0e4:	9a6f      	ldr	r2, [sp, #444]	@ 0x1bc
 801b0e6:	4638      	mov	r0, r7
 801b0e8:	f002 f98b 	bl	801d402 <_ZN8touchgfx12TextProvider10initializeEPKtSt9__va_listS2_PKNS_24FontContextualFormsTableE>
 801b0ec:	7923      	ldrb	r3, [r4, #4]
 801b0ee:	6820      	ldr	r0, [r4, #0]
 801b0f0:	9308      	str	r3, [sp, #32]
 801b0f2:	6803      	ldr	r3, [r0, #0]
 801b0f4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 801b0f6:	4798      	blx	r3
 801b0f8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801b0fc:	181e      	adds	r6, r3, r0
 801b0fe:	42ae      	cmp	r6, r5
 801b100:	dd06      	ble.n	801b110 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0xa8>
 801b102:	f9b8 2002 	ldrsh.w	r2, [r8, #2]
 801b106:	4282      	cmp	r2, r0
 801b108:	bfa4      	itt	ge
 801b10a:	189d      	addge	r5, r3, r2
 801b10c:	fb95 f5f6 	sdivge	r5, r5, r6
 801b110:	a832      	add	r0, sp, #200	@ 0xc8
 801b112:	f002 f923 	bl	801d35c <_ZN8touchgfx12TextProviderC1Ev>
 801b116:	7c23      	ldrb	r3, [r4, #16]
 801b118:	b17b      	cbz	r3, 801b13a <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0xd2>
 801b11a:	6820      	ldr	r0, [r4, #0]
 801b11c:	6803      	ldr	r3, [r0, #0]
 801b11e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 801b120:	4798      	blx	r3
 801b122:	4683      	mov	fp, r0
 801b124:	6820      	ldr	r0, [r4, #0]
 801b126:	6803      	ldr	r3, [r0, #0]
 801b128:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 801b12a:	4798      	blx	r3
 801b12c:	465b      	mov	r3, fp
 801b12e:	9000      	str	r0, [sp, #0]
 801b130:	4651      	mov	r1, sl
 801b132:	9a6f      	ldr	r2, [sp, #444]	@ 0x1bc
 801b134:	a832      	add	r0, sp, #200	@ 0xc8
 801b136:	f002 f964 	bl	801d402 <_ZN8touchgfx12TextProvider10initializeEPKtSt9__va_listS2_PKNS_24FontContextualFormsTableE>
 801b13a:	7be1      	ldrb	r1, [r4, #15]
 801b13c:	a811      	add	r0, sp, #68	@ 0x44
 801b13e:	f8bd 2040 	ldrh.w	r2, [sp, #64]	@ 0x40
 801b142:	7963      	ldrb	r3, [r4, #5]
 801b144:	1a52      	subs	r2, r2, r1
 801b146:	7c21      	ldrb	r1, [r4, #16]
 801b148:	9101      	str	r1, [sp, #4]
 801b14a:	b292      	uxth	r2, r2
 801b14c:	6821      	ldr	r1, [r4, #0]
 801b14e:	9100      	str	r1, [sp, #0]
 801b150:	a932      	add	r1, sp, #200	@ 0xc8
 801b152:	f7ff fc7d 	bl	801aa50 <_ZN8touchgfx3LCD22WideTextInternalStructC1ERNS_12TextProviderEthPKNS_4FontENS_14WideTextActionE>
 801b156:	7c23      	ldrb	r3, [r4, #16]
 801b158:	b9bb      	cbnz	r3, 801b18a <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x122>
 801b15a:	fa1f fa86 	uxth.w	sl, r6
 801b15e:	2d00      	cmp	r5, #0
 801b160:	dd45      	ble.n	801b1ee <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x186>
 801b162:	4638      	mov	r0, r7
 801b164:	f002 fd48 	bl	801dbf8 <_ZN8touchgfx12TextProvider11getNextCharEv>
 801b168:	2800      	cmp	r0, #0
 801b16a:	d03d      	beq.n	801b1e8 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x180>
 801b16c:	280a      	cmp	r0, #10
 801b16e:	d1f6      	bne.n	801b15e <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0xf6>
 801b170:	f8bd 303e 	ldrh.w	r3, [sp, #62]	@ 0x3e
 801b174:	3d01      	subs	r5, #1
 801b176:	4453      	add	r3, sl
 801b178:	f8ad 303e 	strh.w	r3, [sp, #62]	@ 0x3e
 801b17c:	f8bd 3042 	ldrh.w	r3, [sp, #66]	@ 0x42
 801b180:	eba3 030a 	sub.w	r3, r3, sl
 801b184:	f8ad 3042 	strh.w	r3, [sp, #66]	@ 0x42
 801b188:	e7e9      	b.n	801b15e <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0xf6>
 801b18a:	0073      	lsls	r3, r6, #1
 801b18c:	f64f 7bff 	movw	fp, #65535	@ 0xffff
 801b190:	fa1f fa86 	uxth.w	sl, r6
 801b194:	9309      	str	r3, [sp, #36]	@ 0x24
 801b196:	2d00      	cmp	r5, #0
 801b198:	dd29      	ble.n	801b1ee <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x186>
 801b19a:	f9bd 1042 	ldrsh.w	r1, [sp, #66]	@ 0x42
 801b19e:	a811      	add	r0, sp, #68	@ 0x44
 801b1a0:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801b1a2:	428b      	cmp	r3, r1
 801b1a4:	bfd4      	ite	le
 801b1a6:	2100      	movle	r1, #0
 801b1a8:	2101      	movgt	r1, #1
 801b1aa:	f7ff fe69 	bl	801ae80 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb>
 801b1ae:	f8bd 3056 	ldrh.w	r3, [sp, #86]	@ 0x56
 801b1b2:	3b01      	subs	r3, #1
 801b1b4:	b29b      	uxth	r3, r3
 801b1b6:	455b      	cmp	r3, fp
 801b1b8:	930b      	str	r3, [sp, #44]	@ 0x2c
 801b1ba:	d005      	beq.n	801b1c8 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x160>
 801b1bc:	7961      	ldrb	r1, [r4, #5]
 801b1be:	4638      	mov	r0, r7
 801b1c0:	f7ee fdd6 	bl	8009d70 <_ZN8touchgfx12TextProvider15getNextLigatureEh>
 801b1c4:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 801b1c6:	e7f4      	b.n	801b1b2 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x14a>
 801b1c8:	f8bd 303e 	ldrh.w	r3, [sp, #62]	@ 0x3e
 801b1cc:	3d01      	subs	r5, #1
 801b1ce:	4453      	add	r3, sl
 801b1d0:	f8ad 303e 	strh.w	r3, [sp, #62]	@ 0x3e
 801b1d4:	f8bd 3042 	ldrh.w	r3, [sp, #66]	@ 0x42
 801b1d8:	eba3 030a 	sub.w	r3, r3, sl
 801b1dc:	f8ad 3042 	strh.w	r3, [sp, #66]	@ 0x42
 801b1e0:	f8bd 3044 	ldrh.w	r3, [sp, #68]	@ 0x44
 801b1e4:	2b00      	cmp	r3, #0
 801b1e6:	d1d6      	bne.n	801b196 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x12e>
 801b1e8:	b065      	add	sp, #404	@ 0x194
 801b1ea:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801b1ee:	ea4f 0a46 	mov.w	sl, r6, lsl #1
 801b1f2:	ad4b      	add	r5, sp, #300	@ 0x12c
 801b1f4:	f04f 0b00 	mov.w	fp, #0
 801b1f8:	7c23      	ldrb	r3, [r4, #16]
 801b1fa:	2b00      	cmp	r3, #0
 801b1fc:	d067      	beq.n	801b2ce <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x266>
 801b1fe:	f9bd 1042 	ldrsh.w	r1, [sp, #66]	@ 0x42
 801b202:	a811      	add	r0, sp, #68	@ 0x44
 801b204:	458a      	cmp	sl, r1
 801b206:	bfd4      	ite	le
 801b208:	2100      	movle	r1, #0
 801b20a:	2101      	movgt	r1, #1
 801b20c:	f7ff fe38 	bl	801ae80 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb>
 801b210:	9b08      	ldr	r3, [sp, #32]
 801b212:	2b00      	cmp	r3, #0
 801b214:	d056      	beq.n	801b2c4 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x25c>
 801b216:	7c23      	ldrb	r3, [r4, #16]
 801b218:	2264      	movs	r2, #100	@ 0x64
 801b21a:	4639      	mov	r1, r7
 801b21c:	4628      	mov	r0, r5
 801b21e:	9309      	str	r3, [sp, #36]	@ 0x24
 801b220:	f010 f83d 	bl	802b29e <memcpy>
 801b224:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801b226:	2b00      	cmp	r3, #0
 801b228:	d059      	beq.n	801b2de <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x276>
 801b22a:	f9bd 305e 	ldrsh.w	r3, [sp, #94]	@ 0x5e
 801b22e:	7922      	ldrb	r2, [r4, #4]
 801b230:	2a01      	cmp	r2, #1
 801b232:	d13d      	bne.n	801b2b0 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x248>
 801b234:	f9bd 0040 	ldrsh.w	r0, [sp, #64]	@ 0x40
 801b238:	1ac0      	subs	r0, r0, r3
 801b23a:	2302      	movs	r3, #2
 801b23c:	fb90 f0f3 	sdiv	r0, r0, r3
 801b240:	b200      	sxth	r0, r0
 801b242:	f8bd 303c 	ldrh.w	r3, [sp, #60]	@ 0x3c
 801b246:	4418      	add	r0, r3
 801b248:	7c23      	ldrb	r3, [r4, #16]
 801b24a:	f8ad 012c 	strh.w	r0, [sp, #300]	@ 0x12c
 801b24e:	2b00      	cmp	r3, #0
 801b250:	d03a      	beq.n	801b2c8 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x260>
 801b252:	f8bd 2056 	ldrh.w	r2, [sp, #86]	@ 0x56
 801b256:	f89d 1062 	ldrb.w	r1, [sp, #98]	@ 0x62
 801b25a:	f9bd 303e 	ldrsh.w	r3, [sp, #62]	@ 0x3e
 801b25e:	9500      	str	r5, [sp, #0]
 801b260:	980a      	ldr	r0, [sp, #40]	@ 0x28
 801b262:	e9cd 2105 	strd	r2, r1, [sp, #20]
 801b266:	e9cd b703 	strd	fp, r7, [sp, #12]
 801b26a:	e9cd 8401 	strd	r8, r4, [sp, #4]
 801b26e:	464a      	mov	r2, r9
 801b270:	2100      	movs	r1, #0
 801b272:	f7ff fc94 	bl	801ab9e <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib>
 801b276:	2800      	cmp	r0, #0
 801b278:	d1b6      	bne.n	801b1e8 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x180>
 801b27a:	b2b2      	uxth	r2, r6
 801b27c:	f8bd 303e 	ldrh.w	r3, [sp, #62]	@ 0x3e
 801b280:	4611      	mov	r1, r2
 801b282:	4413      	add	r3, r2
 801b284:	f8bd 2042 	ldrh.w	r2, [sp, #66]	@ 0x42
 801b288:	b21b      	sxth	r3, r3
 801b28a:	1a52      	subs	r2, r2, r1
 801b28c:	7c21      	ldrb	r1, [r4, #16]
 801b28e:	f8ad 303e 	strh.w	r3, [sp, #62]	@ 0x3e
 801b292:	b212      	sxth	r2, r2
 801b294:	f8ad 2042 	strh.w	r2, [sp, #66]	@ 0x42
 801b298:	b109      	cbz	r1, 801b29e <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x236>
 801b29a:	42b2      	cmp	r2, r6
 801b29c:	dba4      	blt.n	801b1e8 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x180>
 801b29e:	f8b8 2006 	ldrh.w	r2, [r8, #6]
 801b2a2:	f8b8 1002 	ldrh.w	r1, [r8, #2]
 801b2a6:	440a      	add	r2, r1
 801b2a8:	b212      	sxth	r2, r2
 801b2aa:	4293      	cmp	r3, r2
 801b2ac:	dda4      	ble.n	801b1f8 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x190>
 801b2ae:	e79b      	b.n	801b1e8 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x180>
 801b2b0:	2a02      	cmp	r2, #2
 801b2b2:	d105      	bne.n	801b2c0 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x258>
 801b2b4:	7be2      	ldrb	r2, [r4, #15]
 801b2b6:	f8bd 0040 	ldrh.w	r0, [sp, #64]	@ 0x40
 801b2ba:	1a80      	subs	r0, r0, r2
 801b2bc:	1ac0      	subs	r0, r0, r3
 801b2be:	e7bf      	b.n	801b240 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x1d8>
 801b2c0:	2000      	movs	r0, #0
 801b2c2:	e7be      	b.n	801b242 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x1da>
 801b2c4:	7be0      	ldrb	r0, [r4, #15]
 801b2c6:	e7bc      	b.n	801b242 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x1da>
 801b2c8:	f647 72ff 	movw	r2, #32767	@ 0x7fff
 801b2cc:	e7c3      	b.n	801b256 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x1ee>
 801b2ce:	9b08      	ldr	r3, [sp, #32]
 801b2d0:	2b00      	cmp	r3, #0
 801b2d2:	d0f7      	beq.n	801b2c4 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x25c>
 801b2d4:	2264      	movs	r2, #100	@ 0x64
 801b2d6:	4639      	mov	r1, r7
 801b2d8:	4628      	mov	r0, r5
 801b2da:	f00f ffe0 	bl	802b29e <memcpy>
 801b2de:	2300      	movs	r3, #0
 801b2e0:	f647 72ff 	movw	r2, #32767	@ 0x7fff
 801b2e4:	6821      	ldr	r1, [r4, #0]
 801b2e6:	4628      	mov	r0, r5
 801b2e8:	f7ff fbec 	bl	801aac4 <_ZN8touchgfx3LCD11stringWidthERNS_12TextProviderERKNS_4FontEih>
 801b2ec:	b203      	sxth	r3, r0
 801b2ee:	e79e      	b.n	801b22e <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x1c6>

0801b2f0 <_ZN8touchgfx3LCD5realXERKNS_4RectEssNS_12TextRotationE>:
 801b2f0:	2b02      	cmp	r3, #2
 801b2f2:	b510      	push	{r4, lr}
 801b2f4:	f9b0 4000 	ldrsh.w	r4, [r0]
 801b2f8:	d00b      	beq.n	801b312 <_ZN8touchgfx3LCD5realXERKNS_4RectEssNS_12TextRotationE+0x22>
 801b2fa:	2b03      	cmp	r3, #3
 801b2fc:	d00e      	beq.n	801b31c <_ZN8touchgfx3LCD5realXERKNS_4RectEssNS_12TextRotationE+0x2c>
 801b2fe:	2b01      	cmp	r3, #1
 801b300:	d001      	beq.n	801b306 <_ZN8touchgfx3LCD5realXERKNS_4RectEssNS_12TextRotationE+0x16>
 801b302:	1860      	adds	r0, r4, r1
 801b304:	bd10      	pop	{r4, pc}
 801b306:	8880      	ldrh	r0, [r0, #4]
 801b308:	4420      	add	r0, r4
 801b30a:	b200      	sxth	r0, r0
 801b30c:	1a80      	subs	r0, r0, r2
 801b30e:	3801      	subs	r0, #1
 801b310:	e7f8      	b.n	801b304 <_ZN8touchgfx3LCD5realXERKNS_4RectEssNS_12TextRotationE+0x14>
 801b312:	8880      	ldrh	r0, [r0, #4]
 801b314:	4420      	add	r0, r4
 801b316:	b200      	sxth	r0, r0
 801b318:	1a40      	subs	r0, r0, r1
 801b31a:	e7f8      	b.n	801b30e <_ZN8touchgfx3LCD5realXERKNS_4RectEssNS_12TextRotationE+0x1e>
 801b31c:	18a0      	adds	r0, r4, r2
 801b31e:	e7f1      	b.n	801b304 <_ZN8touchgfx3LCD5realXERKNS_4RectEssNS_12TextRotationE+0x14>

0801b320 <_ZN8touchgfx3LCD5realYERKNS_4RectEssNS_12TextRotationE>:
 801b320:	2b02      	cmp	r3, #2
 801b322:	b510      	push	{r4, lr}
 801b324:	f9b0 4002 	ldrsh.w	r4, [r0, #2]
 801b328:	d006      	beq.n	801b338 <_ZN8touchgfx3LCD5realYERKNS_4RectEssNS_12TextRotationE+0x18>
 801b32a:	2b03      	cmp	r3, #3
 801b32c:	d00a      	beq.n	801b344 <_ZN8touchgfx3LCD5realYERKNS_4RectEssNS_12TextRotationE+0x24>
 801b32e:	2b01      	cmp	r3, #1
 801b330:	bf14      	ite	ne
 801b332:	18a0      	addne	r0, r4, r2
 801b334:	1860      	addeq	r0, r4, r1
 801b336:	bd10      	pop	{r4, pc}
 801b338:	88c0      	ldrh	r0, [r0, #6]
 801b33a:	4420      	add	r0, r4
 801b33c:	b200      	sxth	r0, r0
 801b33e:	1a80      	subs	r0, r0, r2
 801b340:	3801      	subs	r0, #1
 801b342:	e7f8      	b.n	801b336 <_ZN8touchgfx3LCD5realYERKNS_4RectEssNS_12TextRotationE+0x16>
 801b344:	88c0      	ldrh	r0, [r0, #6]
 801b346:	4420      	add	r0, r4
 801b348:	b200      	sxth	r0, r0
 801b34a:	1a40      	subs	r0, r0, r1
 801b34c:	e7f8      	b.n	801b340 <_ZN8touchgfx3LCD5realYERKNS_4RectEssNS_12TextRotationE+0x20>
	...

0801b350 <_GLOBAL__sub_I__ZN8touchgfx3LCD12defaultColorE>:
 801b350:	4b01      	ldr	r3, [pc, #4]	@ (801b358 <_GLOBAL__sub_I__ZN8touchgfx3LCD12defaultColorE+0x8>)
 801b352:	2200      	movs	r2, #0
 801b354:	601a      	str	r2, [r3, #0]
 801b356:	4770      	bx	lr
 801b358:	2400b88c 	.word	0x2400b88c

0801b35c <_ZN8touchgfx16TouchCalibration4clzuEm>:
 801b35c:	4603      	mov	r3, r0
 801b35e:	b1c8      	cbz	r0, 801b394 <_ZN8touchgfx16TouchCalibration4clzuEm+0x38>
 801b360:	0c02      	lsrs	r2, r0, #16
 801b362:	0412      	lsls	r2, r2, #16
 801b364:	b9a2      	cbnz	r2, 801b390 <_ZN8touchgfx16TouchCalibration4clzuEm+0x34>
 801b366:	0403      	lsls	r3, r0, #16
 801b368:	2010      	movs	r0, #16
 801b36a:	f013 4f7f 	tst.w	r3, #4278190080	@ 0xff000000
 801b36e:	bf04      	itt	eq
 801b370:	021b      	lsleq	r3, r3, #8
 801b372:	3008      	addeq	r0, #8
 801b374:	f013 4f70 	tst.w	r3, #4026531840	@ 0xf0000000
 801b378:	bf04      	itt	eq
 801b37a:	011b      	lsleq	r3, r3, #4
 801b37c:	3004      	addeq	r0, #4
 801b37e:	f013 4f40 	tst.w	r3, #3221225472	@ 0xc0000000
 801b382:	bf04      	itt	eq
 801b384:	009b      	lsleq	r3, r3, #2
 801b386:	3002      	addeq	r0, #2
 801b388:	2b00      	cmp	r3, #0
 801b38a:	db04      	blt.n	801b396 <_ZN8touchgfx16TouchCalibration4clzuEm+0x3a>
 801b38c:	3001      	adds	r0, #1
 801b38e:	4770      	bx	lr
 801b390:	2000      	movs	r0, #0
 801b392:	e7ea      	b.n	801b36a <_ZN8touchgfx16TouchCalibration4clzuEm+0xe>
 801b394:	2020      	movs	r0, #32
 801b396:	4770      	bx	lr

0801b398 <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm>:
 801b398:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801b39c:	b087      	sub	sp, #28
 801b39e:	4681      	mov	r9, r0
 801b3a0:	4698      	mov	r8, r3
 801b3a2:	4610      	mov	r0, r2
 801b3a4:	460d      	mov	r5, r1
 801b3a6:	e9dd 4710 	ldrd	r4, r7, [sp, #64]	@ 0x40
 801b3aa:	b981      	cbnz	r1, 801b3ce <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm+0x36>
 801b3ac:	b14b      	cbz	r3, 801b3c2 <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm+0x2a>
 801b3ae:	460b      	mov	r3, r1
 801b3b0:	464a      	mov	r2, r9
 801b3b2:	4641      	mov	r1, r8
 801b3b4:	e9cd 4700 	strd	r4, r7, [sp]
 801b3b8:	f7ff ffee 	bl	801b398 <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm>
 801b3bc:	b007      	add	sp, #28
 801b3be:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801b3c2:	f04f 33ff 	mov.w	r3, #4294967295
 801b3c6:	f06f 4000 	mvn.w	r0, #2147483648	@ 0x80000000
 801b3ca:	603b      	str	r3, [r7, #0]
 801b3cc:	e7f6      	b.n	801b3bc <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm+0x24>
 801b3ce:	fa32 fa01 	lsrs.w	sl, r2, r1
 801b3d2:	d107      	bne.n	801b3e4 <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm+0x4c>
 801b3d4:	fb09 f602 	mul.w	r6, r9, r2
 801b3d8:	fbb6 f0f4 	udiv	r0, r6, r4
 801b3dc:	fb04 6610 	mls	r6, r4, r0, r6
 801b3e0:	603e      	str	r6, [r7, #0]
 801b3e2:	e7eb      	b.n	801b3bc <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm+0x24>
 801b3e4:	2601      	movs	r6, #1
 801b3e6:	fa09 fb01 	lsl.w	fp, r9, r1
 801b3ea:	408e      	lsls	r6, r1
 801b3ec:	fbbb f3f4 	udiv	r3, fp, r4
 801b3f0:	3e01      	subs	r6, #1
 801b3f2:	9302      	str	r3, [sp, #8]
 801b3f4:	fb0a f303 	mul.w	r3, sl, r3
 801b3f8:	4016      	ands	r6, r2
 801b3fa:	9303      	str	r3, [sp, #12]
 801b3fc:	4630      	mov	r0, r6
 801b3fe:	f7ff ffad 	bl	801b35c <_ZN8touchgfx16TouchCalibration4clzuEm>
 801b402:	464a      	mov	r2, r9
 801b404:	460b      	mov	r3, r1
 801b406:	4601      	mov	r1, r0
 801b408:	4630      	mov	r0, r6
 801b40a:	e9cd 4700 	strd	r4, r7, [sp]
 801b40e:	f7ff ffc3 	bl	801b398 <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm>
 801b412:	9b02      	ldr	r3, [sp, #8]
 801b414:	4606      	mov	r6, r0
 801b416:	eb05 0108 	add.w	r1, r5, r8
 801b41a:	fb04 bb13 	mls	fp, r4, r3, fp
 801b41e:	4658      	mov	r0, fp
 801b420:	f7ff ff9c 	bl	801b35c <_ZN8touchgfx16TouchCalibration4clzuEm>
 801b424:	ab05      	add	r3, sp, #20
 801b426:	465a      	mov	r2, fp
 801b428:	e9cd 4300 	strd	r4, r3, [sp]
 801b42c:	4603      	mov	r3, r0
 801b42e:	4650      	mov	r0, sl
 801b430:	f7ff ffb2 	bl	801b398 <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm>
 801b434:	6839      	ldr	r1, [r7, #0]
 801b436:	9a05      	ldr	r2, [sp, #20]
 801b438:	9b03      	ldr	r3, [sp, #12]
 801b43a:	4411      	add	r1, r2
 801b43c:	fbb1 f2f4 	udiv	r2, r1, r4
 801b440:	18d3      	adds	r3, r2, r3
 801b442:	fb04 1412 	mls	r4, r4, r2, r1
 801b446:	441e      	add	r6, r3
 801b448:	603c      	str	r4, [r7, #0]
 801b44a:	4430      	add	r0, r6
 801b44c:	e7b6      	b.n	801b3bc <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm+0x24>

0801b44e <_ZN8touchgfx16TouchCalibration6muldivEllllRl>:
 801b44e:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 801b452:	b085      	sub	sp, #20
 801b454:	f1b0 0900 	subs.w	r9, r0, #0
 801b458:	461d      	mov	r5, r3
 801b45a:	4617      	mov	r7, r2
 801b45c:	9c0c      	ldr	r4, [sp, #48]	@ 0x30
 801b45e:	bfbb      	ittet	lt
 801b460:	f1c9 0900 	rsblt	r9, r9, #0
 801b464:	f04f 36ff 	movlt.w	r6, #4294967295
 801b468:	2601      	movge	r6, #1
 801b46a:	6823      	ldrlt	r3, [r4, #0]
 801b46c:	bfbc      	itt	lt
 801b46e:	425b      	neglt	r3, r3
 801b470:	6023      	strlt	r3, [r4, #0]
 801b472:	2a00      	cmp	r2, #0
 801b474:	da04      	bge.n	801b480 <_ZN8touchgfx16TouchCalibration6muldivEllllRl+0x32>
 801b476:	6823      	ldr	r3, [r4, #0]
 801b478:	4257      	negs	r7, r2
 801b47a:	4276      	negs	r6, r6
 801b47c:	425b      	negs	r3, r3
 801b47e:	6023      	str	r3, [r4, #0]
 801b480:	2d00      	cmp	r5, #0
 801b482:	4638      	mov	r0, r7
 801b484:	bfba      	itte	lt
 801b486:	426d      	neglt	r5, r5
 801b488:	f04f 38ff 	movlt.w	r8, #4294967295
 801b48c:	f04f 0801 	movge.w	r8, #1
 801b490:	f7ff ff64 	bl	801b35c <_ZN8touchgfx16TouchCalibration4clzuEm>
 801b494:	ab03      	add	r3, sp, #12
 801b496:	463a      	mov	r2, r7
 801b498:	e9cd 5300 	strd	r5, r3, [sp]
 801b49c:	4603      	mov	r3, r0
 801b49e:	4648      	mov	r0, r9
 801b4a0:	f7ff ff7a 	bl	801b398 <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm>
 801b4a4:	6823      	ldr	r3, [r4, #0]
 801b4a6:	9a03      	ldr	r2, [sp, #12]
 801b4a8:	4546      	cmp	r6, r8
 801b4aa:	441a      	add	r2, r3
 801b4ac:	fb92 f3f5 	sdiv	r3, r2, r5
 801b4b0:	4418      	add	r0, r3
 801b4b2:	fb05 2313 	mls	r3, r5, r3, r2
 801b4b6:	bf18      	it	ne
 801b4b8:	4240      	negne	r0, r0
 801b4ba:	1c72      	adds	r2, r6, #1
 801b4bc:	6023      	str	r3, [r4, #0]
 801b4be:	d105      	bne.n	801b4cc <_ZN8touchgfx16TouchCalibration6muldivEllllRl+0x7e>
 801b4c0:	2b00      	cmp	r3, #0
 801b4c2:	f1c3 0200 	rsb	r2, r3, #0
 801b4c6:	db0b      	blt.n	801b4e0 <_ZN8touchgfx16TouchCalibration6muldivEllllRl+0x92>
 801b4c8:	6022      	str	r2, [r4, #0]
 801b4ca:	e006      	b.n	801b4da <_ZN8touchgfx16TouchCalibration6muldivEllllRl+0x8c>
 801b4cc:	2e01      	cmp	r6, #1
 801b4ce:	d104      	bne.n	801b4da <_ZN8touchgfx16TouchCalibration6muldivEllllRl+0x8c>
 801b4d0:	2b00      	cmp	r3, #0
 801b4d2:	da02      	bge.n	801b4da <_ZN8touchgfx16TouchCalibration6muldivEllllRl+0x8c>
 801b4d4:	442b      	add	r3, r5
 801b4d6:	3801      	subs	r0, #1
 801b4d8:	6023      	str	r3, [r4, #0]
 801b4da:	b005      	add	sp, #20
 801b4dc:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801b4e0:	3801      	subs	r0, #1
 801b4e2:	1b52      	subs	r2, r2, r5
 801b4e4:	e7f0      	b.n	801b4c8 <_ZN8touchgfx16TouchCalibration6muldivEllllRl+0x7a>
	...

0801b4e8 <_ZN8touchgfx16TouchCalibration14translatePointERNS_5PointE>:
 801b4e8:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
 801b4ec:	4c1c      	ldr	r4, [pc, #112]	@ (801b560 <_ZN8touchgfx16TouchCalibration14translatePointERNS_5PointE+0x78>)
 801b4ee:	4605      	mov	r5, r0
 801b4f0:	6807      	ldr	r7, [r0, #0]
 801b4f2:	69a3      	ldr	r3, [r4, #24]
 801b4f4:	b92b      	cbnz	r3, 801b502 <_ZN8touchgfx16TouchCalibration14translatePointERNS_5PointE+0x1a>
 801b4f6:	6840      	ldr	r0, [r0, #4]
 801b4f8:	e9c5 7000 	strd	r7, r0, [r5]
 801b4fc:	b004      	add	sp, #16
 801b4fe:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801b502:	f04f 0802 	mov.w	r8, #2
 801b506:	68a2      	ldr	r2, [r4, #8]
 801b508:	ae04      	add	r6, sp, #16
 801b50a:	6820      	ldr	r0, [r4, #0]
 801b50c:	fb93 f1f8 	sdiv	r1, r3, r8
 801b510:	440a      	add	r2, r1
 801b512:	69e1      	ldr	r1, [r4, #28]
 801b514:	f846 2d04 	str.w	r2, [r6, #-4]!
 801b518:	463a      	mov	r2, r7
 801b51a:	9600      	str	r6, [sp, #0]
 801b51c:	f7ff ff97 	bl	801b44e <_ZN8touchgfx16TouchCalibration6muldivEllllRl>
 801b520:	69a3      	ldr	r3, [r4, #24]
 801b522:	4607      	mov	r7, r0
 801b524:	686a      	ldr	r2, [r5, #4]
 801b526:	6a21      	ldr	r1, [r4, #32]
 801b528:	9600      	str	r6, [sp, #0]
 801b52a:	6860      	ldr	r0, [r4, #4]
 801b52c:	f7ff ff8f 	bl	801b44e <_ZN8touchgfx16TouchCalibration6muldivEllllRl>
 801b530:	69a3      	ldr	r3, [r4, #24]
 801b532:	6962      	ldr	r2, [r4, #20]
 801b534:	4407      	add	r7, r0
 801b536:	6a61      	ldr	r1, [r4, #36]	@ 0x24
 801b538:	9600      	str	r6, [sp, #0]
 801b53a:	68e0      	ldr	r0, [r4, #12]
 801b53c:	fb93 f8f8 	sdiv	r8, r3, r8
 801b540:	4442      	add	r2, r8
 801b542:	9203      	str	r2, [sp, #12]
 801b544:	682a      	ldr	r2, [r5, #0]
 801b546:	f7ff ff82 	bl	801b44e <_ZN8touchgfx16TouchCalibration6muldivEllllRl>
 801b54a:	4680      	mov	r8, r0
 801b54c:	9600      	str	r6, [sp, #0]
 801b54e:	69a3      	ldr	r3, [r4, #24]
 801b550:	686a      	ldr	r2, [r5, #4]
 801b552:	6aa1      	ldr	r1, [r4, #40]	@ 0x28
 801b554:	6920      	ldr	r0, [r4, #16]
 801b556:	f7ff ff7a 	bl	801b44e <_ZN8touchgfx16TouchCalibration6muldivEllllRl>
 801b55a:	4440      	add	r0, r8
 801b55c:	e7cc      	b.n	801b4f8 <_ZN8touchgfx16TouchCalibration14translatePointERNS_5PointE+0x10>
 801b55e:	bf00      	nop
 801b560:	2400b890 	.word	0x2400b890

0801b564 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERsS1_>:
 801b564:	4b07      	ldr	r3, [pc, #28]	@ (801b584 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERsS1_+0x20>)
 801b566:	781b      	ldrb	r3, [r3, #0]
 801b568:	2b01      	cmp	r3, #1
 801b56a:	d109      	bne.n	801b580 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERsS1_+0x1c>
 801b56c:	f9b1 3000 	ldrsh.w	r3, [r1]
 801b570:	f9b0 2000 	ldrsh.w	r2, [r0]
 801b574:	8003      	strh	r3, [r0, #0]
 801b576:	4b04      	ldr	r3, [pc, #16]	@ (801b588 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERsS1_+0x24>)
 801b578:	881b      	ldrh	r3, [r3, #0]
 801b57a:	3b01      	subs	r3, #1
 801b57c:	1a9b      	subs	r3, r3, r2
 801b57e:	800b      	strh	r3, [r1, #0]
 801b580:	4770      	bx	lr
 801b582:	bf00      	nop
 801b584:	2400b87c 	.word	0x2400b87c
 801b588:	2400b880 	.word	0x2400b880

0801b58c <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERsS1_>:
 801b58c:	4b07      	ldr	r3, [pc, #28]	@ (801b5ac <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERsS1_+0x20>)
 801b58e:	b510      	push	{r4, lr}
 801b590:	781b      	ldrb	r3, [r3, #0]
 801b592:	2b01      	cmp	r3, #1
 801b594:	d108      	bne.n	801b5a8 <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERsS1_+0x1c>
 801b596:	4b06      	ldr	r3, [pc, #24]	@ (801b5b0 <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERsS1_+0x24>)
 801b598:	880c      	ldrh	r4, [r1, #0]
 801b59a:	881b      	ldrh	r3, [r3, #0]
 801b59c:	f9b0 2000 	ldrsh.w	r2, [r0]
 801b5a0:	3b01      	subs	r3, #1
 801b5a2:	1b1b      	subs	r3, r3, r4
 801b5a4:	8003      	strh	r3, [r0, #0]
 801b5a6:	800a      	strh	r2, [r1, #0]
 801b5a8:	bd10      	pop	{r4, pc}
 801b5aa:	bf00      	nop
 801b5ac:	2400b87c 	.word	0x2400b87c
 801b5b0:	2400b880 	.word	0x2400b880

0801b5b4 <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERNS_4RectE>:
 801b5b4:	4b0a      	ldr	r3, [pc, #40]	@ (801b5e0 <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERNS_4RectE+0x2c>)
 801b5b6:	b510      	push	{r4, lr}
 801b5b8:	781b      	ldrb	r3, [r3, #0]
 801b5ba:	2b01      	cmp	r3, #1
 801b5bc:	d10e      	bne.n	801b5dc <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERNS_4RectE+0x28>
 801b5be:	f9b0 1006 	ldrsh.w	r1, [r0, #6]
 801b5c2:	8843      	ldrh	r3, [r0, #2]
 801b5c4:	f9b0 4000 	ldrsh.w	r4, [r0]
 801b5c8:	18ca      	adds	r2, r1, r3
 801b5ca:	4b06      	ldr	r3, [pc, #24]	@ (801b5e4 <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERNS_4RectE+0x30>)
 801b5cc:	8044      	strh	r4, [r0, #2]
 801b5ce:	881b      	ldrh	r3, [r3, #0]
 801b5d0:	1a9b      	subs	r3, r3, r2
 801b5d2:	8003      	strh	r3, [r0, #0]
 801b5d4:	f9b0 3004 	ldrsh.w	r3, [r0, #4]
 801b5d8:	8081      	strh	r1, [r0, #4]
 801b5da:	80c3      	strh	r3, [r0, #6]
 801b5dc:	bd10      	pop	{r4, pc}
 801b5de:	bf00      	nop
 801b5e0:	2400b87c 	.word	0x2400b87c
 801b5e4:	2400b880 	.word	0x2400b880

0801b5e8 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>:
 801b5e8:	4b08      	ldr	r3, [pc, #32]	@ (801b60c <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE+0x24>)
 801b5ea:	781b      	ldrb	r3, [r3, #0]
 801b5ec:	2b01      	cmp	r3, #1
 801b5ee:	d10c      	bne.n	801b60a <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE+0x22>
 801b5f0:	8803      	ldrh	r3, [r0, #0]
 801b5f2:	f9b0 1004 	ldrsh.w	r1, [r0, #4]
 801b5f6:	8842      	ldrh	r2, [r0, #2]
 801b5f8:	8002      	strh	r2, [r0, #0]
 801b5fa:	185a      	adds	r2, r3, r1
 801b5fc:	4b04      	ldr	r3, [pc, #16]	@ (801b610 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE+0x28>)
 801b5fe:	881b      	ldrh	r3, [r3, #0]
 801b600:	1a9b      	subs	r3, r3, r2
 801b602:	8043      	strh	r3, [r0, #2]
 801b604:	88c3      	ldrh	r3, [r0, #6]
 801b606:	80c1      	strh	r1, [r0, #6]
 801b608:	8083      	strh	r3, [r0, #4]
 801b60a:	4770      	bx	lr
 801b60c:	2400b87c 	.word	0x2400b87c
 801b610:	2400b880 	.word	0x2400b880

0801b614 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERsS1_RKNS_4RectE>:
 801b614:	4b07      	ldr	r3, [pc, #28]	@ (801b634 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERsS1_RKNS_4RectE+0x20>)
 801b616:	b510      	push	{r4, lr}
 801b618:	781b      	ldrb	r3, [r3, #0]
 801b61a:	2b01      	cmp	r3, #1
 801b61c:	d108      	bne.n	801b630 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERsS1_RKNS_4RectE+0x1c>
 801b61e:	f9b1 3000 	ldrsh.w	r3, [r1]
 801b622:	f9b0 4000 	ldrsh.w	r4, [r0]
 801b626:	8003      	strh	r3, [r0, #0]
 801b628:	8893      	ldrh	r3, [r2, #4]
 801b62a:	3b01      	subs	r3, #1
 801b62c:	1b1b      	subs	r3, r3, r4
 801b62e:	800b      	strh	r3, [r1, #0]
 801b630:	bd10      	pop	{r4, pc}
 801b632:	bf00      	nop
 801b634:	2400b87c 	.word	0x2400b87c

0801b638 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>:
 801b638:	4b0a      	ldr	r3, [pc, #40]	@ (801b664 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_+0x2c>)
 801b63a:	460a      	mov	r2, r1
 801b63c:	b510      	push	{r4, lr}
 801b63e:	781b      	ldrb	r3, [r3, #0]
 801b640:	2b01      	cmp	r3, #1
 801b642:	d10d      	bne.n	801b660 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_+0x28>
 801b644:	8881      	ldrh	r1, [r0, #4]
 801b646:	8803      	ldrh	r3, [r0, #0]
 801b648:	440b      	add	r3, r1
 801b64a:	4601      	mov	r1, r0
 801b64c:	3b01      	subs	r3, #1
 801b64e:	f821 3b02 	strh.w	r3, [r1], #2
 801b652:	f7ff ffdf 	bl	801b614 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERsS1_RKNS_4RectE>
 801b656:	f9b0 3004 	ldrsh.w	r3, [r0, #4]
 801b65a:	88c2      	ldrh	r2, [r0, #6]
 801b65c:	80c3      	strh	r3, [r0, #6]
 801b65e:	8082      	strh	r2, [r0, #4]
 801b660:	bd10      	pop	{r4, pc}
 801b662:	bf00      	nop
 801b664:	2400b87c 	.word	0x2400b87c

0801b668 <_ZN8touchgfx11Application13requestRedrawEv>:
 801b668:	4b06      	ldr	r3, [pc, #24]	@ (801b684 <_ZN8touchgfx11Application13requestRedrawEv+0x1c>)
 801b66a:	2100      	movs	r1, #0
 801b66c:	f9b3 2000 	ldrsh.w	r2, [r3]
 801b670:	4b05      	ldr	r3, [pc, #20]	@ (801b688 <_ZN8touchgfx11Application13requestRedrawEv+0x20>)
 801b672:	f8c0 112c 	str.w	r1, [r0, #300]	@ 0x12c
 801b676:	f9b3 3000 	ldrsh.w	r3, [r3]
 801b67a:	f8a0 2130 	strh.w	r2, [r0, #304]	@ 0x130
 801b67e:	f8a0 3132 	strh.w	r3, [r0, #306]	@ 0x132
 801b682:	4770      	bx	lr
 801b684:	2400b878 	.word	0x2400b878
 801b688:	2400b87a 	.word	0x2400b87a

0801b68c <_ZN8touchgfx11Application16handleClickEventERKNS_10ClickEventE>:
 801b68c:	4b03      	ldr	r3, [pc, #12]	@ (801b69c <_ZN8touchgfx11Application16handleClickEventERKNS_10ClickEventE+0x10>)
 801b68e:	6818      	ldr	r0, [r3, #0]
 801b690:	b110      	cbz	r0, 801b698 <_ZN8touchgfx11Application16handleClickEventERKNS_10ClickEventE+0xc>
 801b692:	6803      	ldr	r3, [r0, #0]
 801b694:	699b      	ldr	r3, [r3, #24]
 801b696:	4718      	bx	r3
 801b698:	4770      	bx	lr
 801b69a:	bf00      	nop
 801b69c:	2400b8c0 	.word	0x2400b8c0

0801b6a0 <_ZN8touchgfx11Application29handlePendingScreenTransitionEv>:
 801b6a0:	4770      	bx	lr
	...

0801b6a4 <_ZN8touchgfx11Application4drawEv>:
 801b6a4:	4b09      	ldr	r3, [pc, #36]	@ (801b6cc <_ZN8touchgfx11Application4drawEv+0x28>)
 801b6a6:	b507      	push	{r0, r1, r2, lr}
 801b6a8:	f9b3 2000 	ldrsh.w	r2, [r3]
 801b6ac:	2100      	movs	r1, #0
 801b6ae:	4b08      	ldr	r3, [pc, #32]	@ (801b6d0 <_ZN8touchgfx11Application4drawEv+0x2c>)
 801b6b0:	9100      	str	r1, [sp, #0]
 801b6b2:	4669      	mov	r1, sp
 801b6b4:	f9b3 3000 	ldrsh.w	r3, [r3]
 801b6b8:	f8ad 2004 	strh.w	r2, [sp, #4]
 801b6bc:	f8ad 3006 	strh.w	r3, [sp, #6]
 801b6c0:	6803      	ldr	r3, [r0, #0]
 801b6c2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 801b6c4:	4798      	blx	r3
 801b6c6:	b003      	add	sp, #12
 801b6c8:	f85d fb04 	ldr.w	pc, [sp], #4
 801b6cc:	2400b878 	.word	0x2400b878
 801b6d0:	2400b87a 	.word	0x2400b87a

0801b6d4 <_ZN8touchgfx11Application15handleDragEventERKNS_9DragEventE>:
 801b6d4:	4b03      	ldr	r3, [pc, #12]	@ (801b6e4 <_ZN8touchgfx11Application15handleDragEventERKNS_9DragEventE+0x10>)
 801b6d6:	6818      	ldr	r0, [r3, #0]
 801b6d8:	b110      	cbz	r0, 801b6e0 <_ZN8touchgfx11Application15handleDragEventERKNS_9DragEventE+0xc>
 801b6da:	6803      	ldr	r3, [r0, #0]
 801b6dc:	69db      	ldr	r3, [r3, #28]
 801b6de:	4718      	bx	r3
 801b6e0:	4770      	bx	lr
 801b6e2:	bf00      	nop
 801b6e4:	2400b8c0 	.word	0x2400b8c0

0801b6e8 <_ZN8touchgfx11Application18handleGestureEventERKNS_12GestureEventE>:
 801b6e8:	4b03      	ldr	r3, [pc, #12]	@ (801b6f8 <_ZN8touchgfx11Application18handleGestureEventERKNS_12GestureEventE+0x10>)
 801b6ea:	6818      	ldr	r0, [r3, #0]
 801b6ec:	b110      	cbz	r0, 801b6f4 <_ZN8touchgfx11Application18handleGestureEventERKNS_12GestureEventE+0xc>
 801b6ee:	6803      	ldr	r3, [r0, #0]
 801b6f0:	6a1b      	ldr	r3, [r3, #32]
 801b6f2:	4718      	bx	r3
 801b6f4:	4770      	bx	lr
 801b6f6:	bf00      	nop
 801b6f8:	2400b8c0 	.word	0x2400b8c0

0801b6fc <_ZN8touchgfx11Application14handleKeyEventEh>:
 801b6fc:	4b03      	ldr	r3, [pc, #12]	@ (801b70c <_ZN8touchgfx11Application14handleKeyEventEh+0x10>)
 801b6fe:	6818      	ldr	r0, [r3, #0]
 801b700:	b110      	cbz	r0, 801b708 <_ZN8touchgfx11Application14handleKeyEventEh+0xc>
 801b702:	6803      	ldr	r3, [r0, #0]
 801b704:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 801b706:	4718      	bx	r3
 801b708:	4770      	bx	lr
 801b70a:	bf00      	nop
 801b70c:	2400b8c0 	.word	0x2400b8c0

0801b710 <_ZN8touchgfx11Application15handleTickEventEv>:
 801b710:	b570      	push	{r4, r5, r6, lr}
 801b712:	4d38      	ldr	r5, [pc, #224]	@ (801b7f4 <_ZN8touchgfx11Application15handleTickEventEv+0xe4>)
 801b714:	4604      	mov	r4, r0
 801b716:	6828      	ldr	r0, [r5, #0]
 801b718:	b140      	cbz	r0, 801b72c <_ZN8touchgfx11Application15handleTickEventEv+0x1c>
 801b71a:	7a03      	ldrb	r3, [r0, #8]
 801b71c:	b933      	cbnz	r3, 801b72c <_ZN8touchgfx11Application15handleTickEventEv+0x1c>
 801b71e:	f884 3135 	strb.w	r3, [r4, #309]	@ 0x135
 801b722:	6803      	ldr	r3, [r0, #0]
 801b724:	689b      	ldr	r3, [r3, #8]
 801b726:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 801b72a:	4718      	bx	r3
 801b72c:	f894 3135 	ldrb.w	r3, [r4, #309]	@ 0x135
 801b730:	b97b      	cbnz	r3, 801b752 <_ZN8touchgfx11Application15handleTickEventEv+0x42>
 801b732:	b170      	cbz	r0, 801b752 <_ZN8touchgfx11Application15handleTickEventEv+0x42>
 801b734:	7a03      	ldrb	r3, [r0, #8]
 801b736:	b163      	cbz	r3, 801b752 <_ZN8touchgfx11Application15handleTickEventEv+0x42>
 801b738:	4b2f      	ldr	r3, [pc, #188]	@ (801b7f8 <_ZN8touchgfx11Application15handleTickEventEv+0xe8>)
 801b73a:	6818      	ldr	r0, [r3, #0]
 801b73c:	b110      	cbz	r0, 801b744 <_ZN8touchgfx11Application15handleTickEventEv+0x34>
 801b73e:	6803      	ldr	r3, [r0, #0]
 801b740:	691b      	ldr	r3, [r3, #16]
 801b742:	4798      	blx	r3
 801b744:	6828      	ldr	r0, [r5, #0]
 801b746:	6803      	ldr	r3, [r0, #0]
 801b748:	68db      	ldr	r3, [r3, #12]
 801b74a:	4798      	blx	r3
 801b74c:	2301      	movs	r3, #1
 801b74e:	f884 3135 	strb.w	r3, [r4, #309]	@ 0x135
 801b752:	2500      	movs	r5, #0
 801b754:	f8b4 0084 	ldrh.w	r0, [r4, #132]	@ 0x84
 801b758:	42a8      	cmp	r0, r5
 801b75a:	dd0c      	ble.n	801b776 <_ZN8touchgfx11Application15handleTickEventEv+0x66>
 801b75c:	1963      	adds	r3, r4, r5
 801b75e:	f893 2088 	ldrb.w	r2, [r3, #136]	@ 0x88
 801b762:	b132      	cbz	r2, 801b772 <_ZN8touchgfx11Application15handleTickEventEv+0x62>
 801b764:	eb05 0245 	add.w	r2, r5, r5, lsl #1
 801b768:	4413      	add	r3, r2
 801b76a:	6858      	ldr	r0, [r3, #4]
 801b76c:	6803      	ldr	r3, [r0, #0]
 801b76e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 801b770:	4798      	blx	r3
 801b772:	3501      	adds	r5, #1
 801b774:	e7ee      	b.n	801b754 <_ZN8touchgfx11Application15handleTickEventEv+0x44>
 801b776:	2300      	movs	r3, #0
 801b778:	461a      	mov	r2, r3
 801b77a:	4298      	cmp	r0, r3
 801b77c:	d10f      	bne.n	801b79e <_ZN8touchgfx11Application15handleTickEventEv+0x8e>
 801b77e:	1d25      	adds	r5, r4, #4
 801b780:	f8b4 1084 	ldrh.w	r1, [r4, #132]	@ 0x84
 801b784:	4291      	cmp	r1, r2
 801b786:	dd2d      	ble.n	801b7e4 <_ZN8touchgfx11Application15handleTickEventEv+0xd4>
 801b788:	1e48      	subs	r0, r1, #1
 801b78a:	b280      	uxth	r0, r0
 801b78c:	4288      	cmp	r0, r1
 801b78e:	d31a      	bcc.n	801b7c6 <_ZN8touchgfx11Application15handleTickEventEv+0xb6>
 801b790:	4b1a      	ldr	r3, [pc, #104]	@ (801b7fc <_ZN8touchgfx11Application15handleTickEventEv+0xec>)
 801b792:	f240 11a9 	movw	r1, #425	@ 0x1a9
 801b796:	4a1a      	ldr	r2, [pc, #104]	@ (801b800 <_ZN8touchgfx11Application15handleTickEventEv+0xf0>)
 801b798:	481a      	ldr	r0, [pc, #104]	@ (801b804 <_ZN8touchgfx11Application15handleTickEventEv+0xf4>)
 801b79a:	f00f fa53 	bl	802ac44 <__assert_func>
 801b79e:	18e1      	adds	r1, r4, r3
 801b7a0:	f891 5088 	ldrb.w	r5, [r1, #136]	@ 0x88
 801b7a4:	b16d      	cbz	r5, 801b7c2 <_ZN8touchgfx11Application15handleTickEventEv+0xb2>
 801b7a6:	429a      	cmp	r2, r3
 801b7a8:	d00a      	beq.n	801b7c0 <_ZN8touchgfx11Application15handleTickEventEv+0xb0>
 801b7aa:	eb03 0643 	add.w	r6, r3, r3, lsl #1
 801b7ae:	4431      	add	r1, r6
 801b7b0:	684e      	ldr	r6, [r1, #4]
 801b7b2:	b291      	uxth	r1, r2
 801b7b4:	eb04 0181 	add.w	r1, r4, r1, lsl #2
 801b7b8:	604e      	str	r6, [r1, #4]
 801b7ba:	18a1      	adds	r1, r4, r2
 801b7bc:	f881 5088 	strb.w	r5, [r1, #136]	@ 0x88
 801b7c0:	3201      	adds	r2, #1
 801b7c2:	3301      	adds	r3, #1
 801b7c4:	e7d9      	b.n	801b77a <_ZN8touchgfx11Application15handleTickEventEv+0x6a>
 801b7c6:	eb04 0380 	add.w	r3, r4, r0, lsl #2
 801b7ca:	eb05 0181 	add.w	r1, r5, r1, lsl #2
 801b7ce:	3304      	adds	r3, #4
 801b7d0:	428b      	cmp	r3, r1
 801b7d2:	d004      	beq.n	801b7de <_ZN8touchgfx11Application15handleTickEventEv+0xce>
 801b7d4:	f853 6f04 	ldr.w	r6, [r3, #4]!
 801b7d8:	f843 6c04 	str.w	r6, [r3, #-4]
 801b7dc:	e7f8      	b.n	801b7d0 <_ZN8touchgfx11Application15handleTickEventEv+0xc0>
 801b7de:	f8a4 0084 	strh.w	r0, [r4, #132]	@ 0x84
 801b7e2:	e7cd      	b.n	801b780 <_ZN8touchgfx11Application15handleTickEventEv+0x70>
 801b7e4:	4b04      	ldr	r3, [pc, #16]	@ (801b7f8 <_ZN8touchgfx11Application15handleTickEventEv+0xe8>)
 801b7e6:	6818      	ldr	r0, [r3, #0]
 801b7e8:	b110      	cbz	r0, 801b7f0 <_ZN8touchgfx11Application15handleTickEventEv+0xe0>
 801b7ea:	6803      	ldr	r3, [r0, #0]
 801b7ec:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801b7ee:	e79a      	b.n	801b726 <_ZN8touchgfx11Application15handleTickEventEv+0x16>
 801b7f0:	bd70      	pop	{r4, r5, r6, pc}
 801b7f2:	bf00      	nop
 801b7f4:	2400b8c4 	.word	0x2400b8c4
 801b7f8:	2400b8c0 	.word	0x2400b8c0
 801b7fc:	0802ef9c 	.word	0x0802ef9c
 801b800:	0802f1f5 	.word	0x0802f1f5
 801b804:	0802efaa 	.word	0x0802efaa

0801b808 <_ZN8touchgfx11Application12switchScreenEPNS_6ScreenE>:
 801b808:	b570      	push	{r4, r5, r6, lr}
 801b80a:	4606      	mov	r6, r0
 801b80c:	460c      	mov	r4, r1
 801b80e:	b929      	cbnz	r1, 801b81c <_ZN8touchgfx11Application12switchScreenEPNS_6ScreenE+0x14>
 801b810:	4b0c      	ldr	r3, [pc, #48]	@ (801b844 <_ZN8touchgfx11Application12switchScreenEPNS_6ScreenE+0x3c>)
 801b812:	2167      	movs	r1, #103	@ 0x67
 801b814:	4a0c      	ldr	r2, [pc, #48]	@ (801b848 <_ZN8touchgfx11Application12switchScreenEPNS_6ScreenE+0x40>)
 801b816:	480d      	ldr	r0, [pc, #52]	@ (801b84c <_ZN8touchgfx11Application12switchScreenEPNS_6ScreenE+0x44>)
 801b818:	f00f fa14 	bl	802ac44 <__assert_func>
 801b81c:	2300      	movs	r3, #0
 801b81e:	4d0c      	ldr	r5, [pc, #48]	@ (801b850 <_ZN8touchgfx11Application12switchScreenEPNS_6ScreenE+0x48>)
 801b820:	f8a0 3084 	strh.w	r3, [r0, #132]	@ 0x84
 801b824:	6828      	ldr	r0, [r5, #0]
 801b826:	b110      	cbz	r0, 801b82e <_ZN8touchgfx11Application12switchScreenEPNS_6ScreenE+0x26>
 801b828:	6803      	ldr	r3, [r0, #0]
 801b82a:	695b      	ldr	r3, [r3, #20]
 801b82c:	4798      	blx	r3
 801b82e:	602c      	str	r4, [r5, #0]
 801b830:	4620      	mov	r0, r4
 801b832:	6823      	ldr	r3, [r4, #0]
 801b834:	68db      	ldr	r3, [r3, #12]
 801b836:	4798      	blx	r3
 801b838:	6833      	ldr	r3, [r6, #0]
 801b83a:	4630      	mov	r0, r6
 801b83c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 801b83e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 801b842:	4718      	bx	r3
 801b844:	0802ef68 	.word	0x0802ef68
 801b848:	0802f070 	.word	0x0802f070
 801b84c:	0802ef72 	.word	0x0802ef72
 801b850:	2400b8c0 	.word	0x2400b8c0

0801b854 <_ZNK8touchgfx4Rect9intersectERKS0_>:
 801b854:	b510      	push	{r4, lr}
 801b856:	f9b1 4000 	ldrsh.w	r4, [r1]
 801b85a:	888a      	ldrh	r2, [r1, #4]
 801b85c:	f9b0 3000 	ldrsh.w	r3, [r0]
 801b860:	4422      	add	r2, r4
 801b862:	b212      	sxth	r2, r2
 801b864:	4293      	cmp	r3, r2
 801b866:	da15      	bge.n	801b894 <_ZNK8touchgfx4Rect9intersectERKS0_+0x40>
 801b868:	8882      	ldrh	r2, [r0, #4]
 801b86a:	4413      	add	r3, r2
 801b86c:	b21b      	sxth	r3, r3
 801b86e:	429c      	cmp	r4, r3
 801b870:	da10      	bge.n	801b894 <_ZNK8touchgfx4Rect9intersectERKS0_+0x40>
 801b872:	f9b1 3002 	ldrsh.w	r3, [r1, #2]
 801b876:	88c9      	ldrh	r1, [r1, #6]
 801b878:	f9b0 2002 	ldrsh.w	r2, [r0, #2]
 801b87c:	4419      	add	r1, r3
 801b87e:	b209      	sxth	r1, r1
 801b880:	428a      	cmp	r2, r1
 801b882:	da07      	bge.n	801b894 <_ZNK8touchgfx4Rect9intersectERKS0_+0x40>
 801b884:	88c0      	ldrh	r0, [r0, #6]
 801b886:	4410      	add	r0, r2
 801b888:	b200      	sxth	r0, r0
 801b88a:	4283      	cmp	r3, r0
 801b88c:	bfac      	ite	ge
 801b88e:	2000      	movge	r0, #0
 801b890:	2001      	movlt	r0, #1
 801b892:	bd10      	pop	{r4, pc}
 801b894:	2000      	movs	r0, #0
 801b896:	e7fc      	b.n	801b892 <_ZNK8touchgfx4Rect9intersectERKS0_+0x3e>

0801b898 <_ZNK8touchgfx4Rect8includesERKS0_>:
 801b898:	b570      	push	{r4, r5, r6, lr}
 801b89a:	f9b1 4000 	ldrsh.w	r4, [r1]
 801b89e:	f9b0 5000 	ldrsh.w	r5, [r0]
 801b8a2:	42ac      	cmp	r4, r5
 801b8a4:	db18      	blt.n	801b8d8 <_ZNK8touchgfx4Rect8includesERKS0_+0x40>
 801b8a6:	f9b1 2002 	ldrsh.w	r2, [r1, #2]
 801b8aa:	f9b0 3002 	ldrsh.w	r3, [r0, #2]
 801b8ae:	429a      	cmp	r2, r3
 801b8b0:	db12      	blt.n	801b8d8 <_ZNK8touchgfx4Rect8includesERKS0_+0x40>
 801b8b2:	8886      	ldrh	r6, [r0, #4]
 801b8b4:	4435      	add	r5, r6
 801b8b6:	888e      	ldrh	r6, [r1, #4]
 801b8b8:	4434      	add	r4, r6
 801b8ba:	b22d      	sxth	r5, r5
 801b8bc:	b224      	sxth	r4, r4
 801b8be:	42a5      	cmp	r5, r4
 801b8c0:	db0a      	blt.n	801b8d8 <_ZNK8touchgfx4Rect8includesERKS0_+0x40>
 801b8c2:	88c0      	ldrh	r0, [r0, #6]
 801b8c4:	4418      	add	r0, r3
 801b8c6:	88cb      	ldrh	r3, [r1, #6]
 801b8c8:	441a      	add	r2, r3
 801b8ca:	b200      	sxth	r0, r0
 801b8cc:	b212      	sxth	r2, r2
 801b8ce:	4290      	cmp	r0, r2
 801b8d0:	bfb4      	ite	lt
 801b8d2:	2000      	movlt	r0, #0
 801b8d4:	2001      	movge	r0, #1
 801b8d6:	bd70      	pop	{r4, r5, r6, pc}
 801b8d8:	2000      	movs	r0, #0
 801b8da:	e7fc      	b.n	801b8d6 <_ZNK8touchgfx4Rect8includesERKS0_+0x3e>

0801b8dc <_ZN8touchgfx4Rect11expandToFitERKS0_>:
 801b8dc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801b8de:	4604      	mov	r4, r0
 801b8e0:	4608      	mov	r0, r1
 801b8e2:	460d      	mov	r5, r1
 801b8e4:	f7fc fb11 	bl	8017f0a <_ZNK8touchgfx4Rect7isEmptyEv>
 801b8e8:	b978      	cbnz	r0, 801b90a <_ZN8touchgfx4Rect11expandToFitERKS0_+0x2e>
 801b8ea:	4620      	mov	r0, r4
 801b8ec:	f7fc fb0d 	bl	8017f0a <_ZNK8touchgfx4Rect7isEmptyEv>
 801b8f0:	f9b5 6000 	ldrsh.w	r6, [r5]
 801b8f4:	b150      	cbz	r0, 801b90c <_ZN8touchgfx4Rect11expandToFitERKS0_+0x30>
 801b8f6:	8026      	strh	r6, [r4, #0]
 801b8f8:	f9b5 3002 	ldrsh.w	r3, [r5, #2]
 801b8fc:	8063      	strh	r3, [r4, #2]
 801b8fe:	f9b5 3004 	ldrsh.w	r3, [r5, #4]
 801b902:	80a3      	strh	r3, [r4, #4]
 801b904:	f9b5 3006 	ldrsh.w	r3, [r5, #6]
 801b908:	80e3      	strh	r3, [r4, #6]
 801b90a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801b90c:	f9b4 1000 	ldrsh.w	r1, [r4]
 801b910:	f9b5 2002 	ldrsh.w	r2, [r5, #2]
 801b914:	42b1      	cmp	r1, r6
 801b916:	f9b4 3002 	ldrsh.w	r3, [r4, #2]
 801b91a:	f8b5 c004 	ldrh.w	ip, [r5, #4]
 801b91e:	460f      	mov	r7, r1
 801b920:	88ed      	ldrh	r5, [r5, #6]
 801b922:	bfa8      	it	ge
 801b924:	4637      	movge	r7, r6
 801b926:	4293      	cmp	r3, r2
 801b928:	4618      	mov	r0, r3
 801b92a:	4466      	add	r6, ip
 801b92c:	f8b4 c004 	ldrh.w	ip, [r4, #4]
 801b930:	bfa8      	it	ge
 801b932:	4610      	movge	r0, r2
 801b934:	442a      	add	r2, r5
 801b936:	88e5      	ldrh	r5, [r4, #6]
 801b938:	4461      	add	r1, ip
 801b93a:	b236      	sxth	r6, r6
 801b93c:	8027      	strh	r7, [r4, #0]
 801b93e:	442b      	add	r3, r5
 801b940:	b209      	sxth	r1, r1
 801b942:	b212      	sxth	r2, r2
 801b944:	8060      	strh	r0, [r4, #2]
 801b946:	b21b      	sxth	r3, r3
 801b948:	428e      	cmp	r6, r1
 801b94a:	bfac      	ite	ge
 801b94c:	ebc7 0106 	rsbge	r1, r7, r6
 801b950:	ebc7 0101 	rsblt	r1, r7, r1
 801b954:	429a      	cmp	r2, r3
 801b956:	bfac      	ite	ge
 801b958:	ebc0 0202 	rsbge	r2, r0, r2
 801b95c:	ebc0 0203 	rsblt	r2, r0, r3
 801b960:	80a1      	strh	r1, [r4, #4]
 801b962:	80e2      	strh	r2, [r4, #6]
 801b964:	e7d1      	b.n	801b90a <_ZN8touchgfx4Rect11expandToFitERKS0_+0x2e>
	...

0801b968 <_ZN8touchgfx11Application11getInstanceEv>:
 801b968:	4b01      	ldr	r3, [pc, #4]	@ (801b970 <_ZN8touchgfx11Application11getInstanceEv+0x8>)
 801b96a:	6818      	ldr	r0, [r3, #0]
 801b96c:	4770      	bx	lr
 801b96e:	bf00      	nop
 801b970:	2400b8d0 	.word	0x2400b8d0

0801b974 <_ZN8touchgfx11Application19registerTimerWidgetEPNS_8DrawableE>:
 801b974:	b570      	push	{r4, r5, r6, lr}
 801b976:	2200      	movs	r2, #0
 801b978:	f8b0 3084 	ldrh.w	r3, [r0, #132]	@ 0x84
 801b97c:	1d04      	adds	r4, r0, #4
 801b97e:	b295      	uxth	r5, r2
 801b980:	42ab      	cmp	r3, r5
 801b982:	d90e      	bls.n	801b9a2 <_ZN8touchgfx11Application19registerTimerWidgetEPNS_8DrawableE+0x2e>
 801b984:	f854 6b04 	ldr.w	r6, [r4], #4
 801b988:	4615      	mov	r5, r2
 801b98a:	3201      	adds	r2, #1
 801b98c:	428e      	cmp	r6, r1
 801b98e:	d1f6      	bne.n	801b97e <_ZN8touchgfx11Application19registerTimerWidgetEPNS_8DrawableE+0xa>
 801b990:	4428      	add	r0, r5
 801b992:	f890 3088 	ldrb.w	r3, [r0, #136]	@ 0x88
 801b996:	2bff      	cmp	r3, #255	@ 0xff
 801b998:	d002      	beq.n	801b9a0 <_ZN8touchgfx11Application19registerTimerWidgetEPNS_8DrawableE+0x2c>
 801b99a:	3301      	adds	r3, #1
 801b99c:	f880 3088 	strb.w	r3, [r0, #136]	@ 0x88
 801b9a0:	bd70      	pop	{r4, r5, r6, pc}
 801b9a2:	2b20      	cmp	r3, #32
 801b9a4:	d106      	bne.n	801b9b4 <_ZN8touchgfx11Application19registerTimerWidgetEPNS_8DrawableE+0x40>
 801b9a6:	4b09      	ldr	r3, [pc, #36]	@ (801b9cc <_ZN8touchgfx11Application19registerTimerWidgetEPNS_8DrawableE+0x58>)
 801b9a8:	f240 215f 	movw	r1, #607	@ 0x25f
 801b9ac:	4a08      	ldr	r2, [pc, #32]	@ (801b9d0 <_ZN8touchgfx11Application19registerTimerWidgetEPNS_8DrawableE+0x5c>)
 801b9ae:	4809      	ldr	r0, [pc, #36]	@ (801b9d4 <_ZN8touchgfx11Application19registerTimerWidgetEPNS_8DrawableE+0x60>)
 801b9b0:	f00f f948 	bl	802ac44 <__assert_func>
 801b9b4:	18c2      	adds	r2, r0, r3
 801b9b6:	2401      	movs	r4, #1
 801b9b8:	f882 4088 	strb.w	r4, [r2, #136]	@ 0x88
 801b9bc:	191a      	adds	r2, r3, r4
 801b9be:	f8a0 2084 	strh.w	r2, [r0, #132]	@ 0x84
 801b9c2:	eb00 0083 	add.w	r0, r0, r3, lsl #2
 801b9c6:	6041      	str	r1, [r0, #4]
 801b9c8:	e7ea      	b.n	801b9a0 <_ZN8touchgfx11Application19registerTimerWidgetEPNS_8DrawableE+0x2c>
 801b9ca:	bf00      	nop
 801b9cc:	0802efd3 	.word	0x0802efd3
 801b9d0:	0802f0b4 	.word	0x0802f0b4
 801b9d4:	0802ef72 	.word	0x0802ef72

0801b9d8 <_ZN8touchgfx11Application21unregisterTimerWidgetEPKNS_8DrawableE>:
 801b9d8:	b570      	push	{r4, r5, r6, lr}
 801b9da:	2300      	movs	r3, #0
 801b9dc:	f8b0 6084 	ldrh.w	r6, [r0, #132]	@ 0x84
 801b9e0:	1d04      	adds	r4, r0, #4
 801b9e2:	b29a      	uxth	r2, r3
 801b9e4:	4296      	cmp	r6, r2
 801b9e6:	d90a      	bls.n	801b9fe <_ZN8touchgfx11Application21unregisterTimerWidgetEPKNS_8DrawableE+0x26>
 801b9e8:	f854 2b04 	ldr.w	r2, [r4], #4
 801b9ec:	428a      	cmp	r2, r1
 801b9ee:	d107      	bne.n	801ba00 <_ZN8touchgfx11Application21unregisterTimerWidgetEPKNS_8DrawableE+0x28>
 801b9f0:	18c5      	adds	r5, r0, r3
 801b9f2:	f895 2088 	ldrb.w	r2, [r5, #136]	@ 0x88
 801b9f6:	b11a      	cbz	r2, 801ba00 <_ZN8touchgfx11Application21unregisterTimerWidgetEPKNS_8DrawableE+0x28>
 801b9f8:	3a01      	subs	r2, #1
 801b9fa:	f885 2088 	strb.w	r2, [r5, #136]	@ 0x88
 801b9fe:	bd70      	pop	{r4, r5, r6, pc}
 801ba00:	3301      	adds	r3, #1
 801ba02:	e7ee      	b.n	801b9e2 <_ZN8touchgfx11Application21unregisterTimerWidgetEPKNS_8DrawableE+0xa>

0801ba04 <_ZN8touchgfx11Application20clearAllTimerWidgetsEv>:
 801ba04:	2300      	movs	r3, #0
 801ba06:	f100 0288 	add.w	r2, r0, #136	@ 0x88
 801ba0a:	30a8      	adds	r0, #168	@ 0xa8
 801ba0c:	f820 3c24 	strh.w	r3, [r0, #-36]
 801ba10:	f802 3b01 	strb.w	r3, [r2], #1
 801ba14:	4282      	cmp	r2, r0
 801ba16:	d1fb      	bne.n	801ba10 <_ZN8touchgfx11Application20clearAllTimerWidgetsEv+0xc>
 801ba18:	4770      	bx	lr

0801ba1a <_ZN8touchgfx6VectorINS_4RectELt8EEC1Ev>:
 801ba1a:	4603      	mov	r3, r0
 801ba1c:	f100 0140 	add.w	r1, r0, #64	@ 0x40
 801ba20:	2200      	movs	r2, #0
 801ba22:	801a      	strh	r2, [r3, #0]
 801ba24:	3308      	adds	r3, #8
 801ba26:	f823 2c06 	strh.w	r2, [r3, #-6]
 801ba2a:	f823 2c04 	strh.w	r2, [r3, #-4]
 801ba2e:	f823 2c02 	strh.w	r2, [r3, #-2]
 801ba32:	428b      	cmp	r3, r1
 801ba34:	d1f5      	bne.n	801ba22 <_ZN8touchgfx6VectorINS_4RectELt8EEC1Ev+0x8>
 801ba36:	f8a0 2040 	strh.w	r2, [r0, #64]	@ 0x40
 801ba3a:	4770      	bx	lr

0801ba3c <_ZN8touchgfx11ApplicationC1Ev>:
 801ba3c:	b570      	push	{r4, r5, r6, lr}
 801ba3e:	4b1a      	ldr	r3, [pc, #104]	@ (801baa8 <_ZN8touchgfx11ApplicationC1Ev+0x6c>)
 801ba40:	2500      	movs	r5, #0
 801ba42:	4604      	mov	r4, r0
 801ba44:	30a8      	adds	r0, #168	@ 0xa8
 801ba46:	f840 3ca8 	str.w	r3, [r0, #-168]
 801ba4a:	f820 5c24 	strh.w	r5, [r0, #-36]
 801ba4e:	f7ff ffe4 	bl	801ba1a <_ZN8touchgfx6VectorINS_4RectELt8EEC1Ev>
 801ba52:	f104 00ea 	add.w	r0, r4, #234	@ 0xea
 801ba56:	f7ff ffe0 	bl	801ba1a <_ZN8touchgfx6VectorINS_4RectELt8EEC1Ev>
 801ba5a:	f8a4 512c 	strh.w	r5, [r4, #300]	@ 0x12c
 801ba5e:	f8a4 512e 	strh.w	r5, [r4, #302]	@ 0x12e
 801ba62:	f8a4 5130 	strh.w	r5, [r4, #304]	@ 0x130
 801ba66:	f8a4 5132 	strh.w	r5, [r4, #306]	@ 0x132
 801ba6a:	f884 5134 	strb.w	r5, [r4, #308]	@ 0x134
 801ba6e:	f884 5135 	strb.w	r5, [r4, #309]	@ 0x135
 801ba72:	490e      	ldr	r1, [pc, #56]	@ (801baac <_ZN8touchgfx11ApplicationC1Ev+0x70>)
 801ba74:	480e      	ldr	r0, [pc, #56]	@ (801bab0 <_ZN8touchgfx11ApplicationC1Ev+0x74>)
 801ba76:	f00e ffa9 	bl	802a9cc <CRC_Lock>
 801ba7a:	4e0e      	ldr	r6, [pc, #56]	@ (801bab4 <_ZN8touchgfx11ApplicationC1Ev+0x78>)
 801ba7c:	4b0e      	ldr	r3, [pc, #56]	@ (801bab8 <_ZN8touchgfx11ApplicationC1Ev+0x7c>)
 801ba7e:	b158      	cbz	r0, 801ba98 <_ZN8touchgfx11ApplicationC1Ev+0x5c>
 801ba80:	801d      	strh	r5, [r3, #0]
 801ba82:	2300      	movs	r3, #0
 801ba84:	4a0d      	ldr	r2, [pc, #52]	@ (801babc <_ZN8touchgfx11ApplicationC1Ev+0x80>)
 801ba86:	4620      	mov	r0, r4
 801ba88:	6013      	str	r3, [r2, #0]
 801ba8a:	4a0d      	ldr	r2, [pc, #52]	@ (801bac0 <_ZN8touchgfx11ApplicationC1Ev+0x84>)
 801ba8c:	6033      	str	r3, [r6, #0]
 801ba8e:	6013      	str	r3, [r2, #0]
 801ba90:	f7ff ffb8 	bl	801ba04 <_ZN8touchgfx11Application20clearAllTimerWidgetsEv>
 801ba94:	4620      	mov	r0, r4
 801ba96:	bd70      	pop	{r4, r5, r6, pc}
 801ba98:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 801ba9c:	2002      	movs	r0, #2
 801ba9e:	801a      	strh	r2, [r3, #0]
 801baa0:	6030      	str	r0, [r6, #0]
 801baa2:	f001 fa81 	bl	801cfa8 <_ZN8touchgfx6Screen4drawEv>
 801baa6:	e7ec      	b.n	801ba82 <_ZN8touchgfx11ApplicationC1Ev+0x46>
 801baa8:	0802f034 	.word	0x0802f034
 801baac:	b5e8b5cd 	.word	0xb5e8b5cd
 801bab0:	f407a5c2 	.word	0xf407a5c2
 801bab4:	2400b8c0 	.word	0x2400b8c0
 801bab8:	24000056 	.word	0x24000056
 801babc:	2400b8d0 	.word	0x2400b8d0
 801bac0:	2400b8c4 	.word	0x2400b8c4

0801bac4 <_ZN8touchgfx6VectorINS_4RectELt8EE13quickRemoveAtEt>:
 801bac4:	b510      	push	{r4, lr}
 801bac6:	f8b0 3040 	ldrh.w	r3, [r0, #64]	@ 0x40
 801baca:	428b      	cmp	r3, r1
 801bacc:	d806      	bhi.n	801badc <_ZN8touchgfx6VectorINS_4RectELt8EE13quickRemoveAtEt+0x18>
 801bace:	4b0b      	ldr	r3, [pc, #44]	@ (801bafc <_ZN8touchgfx6VectorINS_4RectELt8EE13quickRemoveAtEt+0x38>)
 801bad0:	f44f 71de 	mov.w	r1, #444	@ 0x1bc
 801bad4:	4a0a      	ldr	r2, [pc, #40]	@ (801bb00 <_ZN8touchgfx6VectorINS_4RectELt8EE13quickRemoveAtEt+0x3c>)
 801bad6:	480b      	ldr	r0, [pc, #44]	@ (801bb04 <_ZN8touchgfx6VectorINS_4RectELt8EE13quickRemoveAtEt+0x40>)
 801bad8:	f00f f8b4 	bl	802ac44 <__assert_func>
 801badc:	3b01      	subs	r3, #1
 801bade:	b29b      	uxth	r3, r3
 801bae0:	428b      	cmp	r3, r1
 801bae2:	f8a0 3040 	strh.w	r3, [r0, #64]	@ 0x40
 801bae6:	d908      	bls.n	801bafa <_ZN8touchgfx6VectorINS_4RectELt8EE13quickRemoveAtEt+0x36>
 801bae8:	eb00 03c3 	add.w	r3, r0, r3, lsl #3
 801baec:	eb00 04c1 	add.w	r4, r0, r1, lsl #3
 801baf0:	681a      	ldr	r2, [r3, #0]
 801baf2:	f840 2031 	str.w	r2, [r0, r1, lsl #3]
 801baf6:	685a      	ldr	r2, [r3, #4]
 801baf8:	6062      	str	r2, [r4, #4]
 801bafa:	bd10      	pop	{r4, pc}
 801bafc:	0802ef9c 	.word	0x0802ef9c
 801bb00:	0802f0f9 	.word	0x0802f0f9
 801bb04:	0802efaa 	.word	0x0802efaa

0801bb08 <_ZN8touchgfx6VectorINS_4RectELt8EE3addES1_>:
 801bb08:	b537      	push	{r0, r1, r2, r4, r5, lr}
 801bb0a:	466b      	mov	r3, sp
 801bb0c:	4604      	mov	r4, r0
 801bb0e:	e883 0006 	stmia.w	r3, {r1, r2}
 801bb12:	f8b0 2040 	ldrh.w	r2, [r0, #64]	@ 0x40
 801bb16:	2a07      	cmp	r2, #7
 801bb18:	d906      	bls.n	801bb28 <_ZN8touchgfx6VectorINS_4RectELt8EE3addES1_+0x20>
 801bb1a:	4b09      	ldr	r3, [pc, #36]	@ (801bb40 <_ZN8touchgfx6VectorINS_4RectELt8EE3addES1_+0x38>)
 801bb1c:	f44f 71c1 	mov.w	r1, #386	@ 0x182
 801bb20:	4a08      	ldr	r2, [pc, #32]	@ (801bb44 <_ZN8touchgfx6VectorINS_4RectELt8EE3addES1_+0x3c>)
 801bb22:	4809      	ldr	r0, [pc, #36]	@ (801bb48 <_ZN8touchgfx6VectorINS_4RectELt8EE3addES1_+0x40>)
 801bb24:	f00f f88e 	bl	802ac44 <__assert_func>
 801bb28:	1c51      	adds	r1, r2, #1
 801bb2a:	eb00 05c2 	add.w	r5, r0, r2, lsl #3
 801bb2e:	f8a0 1040 	strh.w	r1, [r0, #64]	@ 0x40
 801bb32:	cb03      	ldmia	r3!, {r0, r1}
 801bb34:	f844 0032 	str.w	r0, [r4, r2, lsl #3]
 801bb38:	6069      	str	r1, [r5, #4]
 801bb3a:	b003      	add	sp, #12
 801bb3c:	bd30      	pop	{r4, r5, pc}
 801bb3e:	bf00      	nop
 801bb40:	0802effb 	.word	0x0802effb
 801bb44:	0802f18f 	.word	0x0802f18f
 801bb48:	0802efaa 	.word	0x0802efaa

0801bb4c <_ZN8touchgfx11Application14invalidateAreaENS_4RectE>:
 801bb4c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801bb50:	b08d      	sub	sp, #52	@ 0x34
 801bb52:	4683      	mov	fp, r0
 801bb54:	ac08      	add	r4, sp, #32
 801bb56:	4620      	mov	r0, r4
 801bb58:	e884 0006 	stmia.w	r4, {r1, r2}
 801bb5c:	f7fc f9d5 	bl	8017f0a <_ZNK8touchgfx4Rect7isEmptyEv>
 801bb60:	2800      	cmp	r0, #0
 801bb62:	d16a      	bne.n	801bc3a <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0xee>
 801bb64:	9402      	str	r4, [sp, #8]
 801bb66:	f8bb 50e8 	ldrh.w	r5, [fp, #232]	@ 0xe8
 801bb6a:	f10b 03a8 	add.w	r3, fp, #168	@ 0xa8
 801bb6e:	2400      	movs	r4, #0
 801bb70:	eb0b 06c5 	add.w	r6, fp, r5, lsl #3
 801bb74:	9301      	str	r3, [sp, #4]
 801bb76:	36a0      	adds	r6, #160	@ 0xa0
 801bb78:	42a5      	cmp	r5, r4
 801bb7a:	d00d      	beq.n	801bb98 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x4c>
 801bb7c:	eba6 01c4 	sub.w	r1, r6, r4, lsl #3
 801bb80:	9802      	ldr	r0, [sp, #8]
 801bb82:	f7ff fe89 	bl	801b898 <_ZNK8touchgfx4Rect8includesERKS0_>
 801bb86:	b128      	cbz	r0, 801bb94 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x48>
 801bb88:	1e69      	subs	r1, r5, #1
 801bb8a:	9801      	ldr	r0, [sp, #4]
 801bb8c:	1b09      	subs	r1, r1, r4
 801bb8e:	b289      	uxth	r1, r1
 801bb90:	f7ff ff98 	bl	801bac4 <_ZN8touchgfx6VectorINS_4RectELt8EE13quickRemoveAtEt>
 801bb94:	3401      	adds	r4, #1
 801bb96:	e7ef      	b.n	801bb78 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x2c>
 801bb98:	f8bb 70e8 	ldrh.w	r7, [fp, #232]	@ 0xe8
 801bb9c:	1e7b      	subs	r3, r7, #1
 801bb9e:	eb0b 0ac7 	add.w	sl, fp, r7, lsl #3
 801bba2:	9703      	str	r7, [sp, #12]
 801bba4:	9300      	str	r3, [sp, #0]
 801bba6:	2400      	movs	r4, #0
 801bba8:	4655      	mov	r5, sl
 801bbaa:	9704      	str	r7, [sp, #16]
 801bbac:	4626      	mov	r6, r4
 801bbae:	9b04      	ldr	r3, [sp, #16]
 801bbb0:	2b00      	cmp	r3, #0
 801bbb2:	d078      	beq.n	801bca6 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x15a>
 801bbb4:	9902      	ldr	r1, [sp, #8]
 801bbb6:	f105 00a0 	add.w	r0, r5, #160	@ 0xa0
 801bbba:	f7ff fe4b 	bl	801b854 <_ZNK8touchgfx4Rect9intersectERKS0_>
 801bbbe:	b360      	cbz	r0, 801bc1a <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0xce>
 801bbc0:	f9bd e020 	ldrsh.w	lr, [sp, #32]
 801bbc4:	f9b5 c0a0 	ldrsh.w	ip, [r5, #160]	@ 0xa0
 801bbc8:	f9bd 9022 	ldrsh.w	r9, [sp, #34]	@ 0x22
 801bbcc:	45e6      	cmp	lr, ip
 801bbce:	f9b5 80a2 	ldrsh.w	r8, [r5, #162]	@ 0xa2
 801bbd2:	db35      	blt.n	801bc40 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0xf4>
 801bbd4:	f8bd 2024 	ldrh.w	r2, [sp, #36]	@ 0x24
 801bbd8:	f8b5 30a4 	ldrh.w	r3, [r5, #164]	@ 0xa4
 801bbdc:	4472      	add	r2, lr
 801bbde:	4463      	add	r3, ip
 801bbe0:	b212      	sxth	r2, r2
 801bbe2:	b21b      	sxth	r3, r3
 801bbe4:	429a      	cmp	r2, r3
 801bbe6:	dc2b      	bgt.n	801bc40 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0xf4>
 801bbe8:	fa1f f288 	uxth.w	r2, r8
 801bbec:	f8b5 30a6 	ldrh.w	r3, [r5, #166]	@ 0xa6
 801bbf0:	45c1      	cmp	r9, r8
 801bbf2:	f8bd 1026 	ldrh.w	r1, [sp, #38]	@ 0x26
 801bbf6:	4413      	add	r3, r2
 801bbf8:	fa1f fc89 	uxth.w	ip, r9
 801bbfc:	b29b      	uxth	r3, r3
 801bbfe:	fa0f fe83 	sxth.w	lr, r3
 801bc02:	db0f      	blt.n	801bc24 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0xd8>
 801bc04:	eba3 030c 	sub.w	r3, r3, ip
 801bc08:	1ac9      	subs	r1, r1, r3
 801bc0a:	b209      	sxth	r1, r1
 801bc0c:	2900      	cmp	r1, #0
 801bc0e:	f8ad 1026 	strh.w	r1, [sp, #38]	@ 0x26
 801bc12:	dd12      	ble.n	801bc3a <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0xee>
 801bc14:	f8ad e022 	strh.w	lr, [sp, #34]	@ 0x22
 801bc18:	4604      	mov	r4, r0
 801bc1a:	9b04      	ldr	r3, [sp, #16]
 801bc1c:	3d08      	subs	r5, #8
 801bc1e:	3b01      	subs	r3, #1
 801bc20:	9304      	str	r3, [sp, #16]
 801bc22:	e7c4      	b.n	801bbae <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x62>
 801bc24:	4461      	add	r1, ip
 801bc26:	b209      	sxth	r1, r1
 801bc28:	4571      	cmp	r1, lr
 801bc2a:	dc3a      	bgt.n	801bca2 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x156>
 801bc2c:	eba2 020c 	sub.w	r2, r2, ip
 801bc30:	b212      	sxth	r2, r2
 801bc32:	f8ad 2026 	strh.w	r2, [sp, #38]	@ 0x26
 801bc36:	2a00      	cmp	r2, #0
 801bc38:	dcee      	bgt.n	801bc18 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0xcc>
 801bc3a:	b00d      	add	sp, #52	@ 0x34
 801bc3c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801bc40:	45c1      	cmp	r9, r8
 801bc42:	db2e      	blt.n	801bca2 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x156>
 801bc44:	f8bd 3026 	ldrh.w	r3, [sp, #38]	@ 0x26
 801bc48:	4499      	add	r9, r3
 801bc4a:	f8b5 30a6 	ldrh.w	r3, [r5, #166]	@ 0xa6
 801bc4e:	4498      	add	r8, r3
 801bc50:	fa0f f989 	sxth.w	r9, r9
 801bc54:	fa0f f888 	sxth.w	r8, r8
 801bc58:	45c1      	cmp	r9, r8
 801bc5a:	dc22      	bgt.n	801bca2 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x156>
 801bc5c:	fa1f f28c 	uxth.w	r2, ip
 801bc60:	f8b5 30a4 	ldrh.w	r3, [r5, #164]	@ 0xa4
 801bc64:	45e6      	cmp	lr, ip
 801bc66:	f8bd 1024 	ldrh.w	r1, [sp, #36]	@ 0x24
 801bc6a:	4413      	add	r3, r2
 801bc6c:	fa1f f88e 	uxth.w	r8, lr
 801bc70:	b29b      	uxth	r3, r3
 801bc72:	fa0f f983 	sxth.w	r9, r3
 801bc76:	db0a      	blt.n	801bc8e <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x142>
 801bc78:	eba3 0308 	sub.w	r3, r3, r8
 801bc7c:	1ac9      	subs	r1, r1, r3
 801bc7e:	b209      	sxth	r1, r1
 801bc80:	2900      	cmp	r1, #0
 801bc82:	f8ad 1024 	strh.w	r1, [sp, #36]	@ 0x24
 801bc86:	ddd8      	ble.n	801bc3a <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0xee>
 801bc88:	f8ad 9020 	strh.w	r9, [sp, #32]
 801bc8c:	e7c4      	b.n	801bc18 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0xcc>
 801bc8e:	4441      	add	r1, r8
 801bc90:	b209      	sxth	r1, r1
 801bc92:	4549      	cmp	r1, r9
 801bc94:	dc05      	bgt.n	801bca2 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x156>
 801bc96:	eba2 0208 	sub.w	r2, r2, r8
 801bc9a:	b212      	sxth	r2, r2
 801bc9c:	f8ad 2024 	strh.w	r2, [sp, #36]	@ 0x24
 801bca0:	e7c9      	b.n	801bc36 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0xea>
 801bca2:	4606      	mov	r6, r0
 801bca4:	e7b9      	b.n	801bc1a <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0xce>
 801bca6:	2c00      	cmp	r4, #0
 801bca8:	f47f af7d 	bne.w	801bba6 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x5a>
 801bcac:	2e00      	cmp	r6, #0
 801bcae:	f000 81dc 	beq.w	801c06a <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x51e>
 801bcb2:	f9bd 7022 	ldrsh.w	r7, [sp, #34]	@ 0x22
 801bcb6:	4655      	mov	r5, sl
 801bcb8:	f9bd 6020 	ldrsh.w	r6, [sp, #32]
 801bcbc:	b2b9      	uxth	r1, r7
 801bcbe:	f8bd 2024 	ldrh.w	r2, [sp, #36]	@ 0x24
 801bcc2:	b2b3      	uxth	r3, r6
 801bcc4:	9104      	str	r1, [sp, #16]
 801bcc6:	9804      	ldr	r0, [sp, #16]
 801bcc8:	441a      	add	r2, r3
 801bcca:	f8bd 1026 	ldrh.w	r1, [sp, #38]	@ 0x26
 801bcce:	b292      	uxth	r2, r2
 801bcd0:	4401      	add	r1, r0
 801bcd2:	fa0f f882 	sxth.w	r8, r2
 801bcd6:	b289      	uxth	r1, r1
 801bcd8:	9105      	str	r1, [sp, #20]
 801bcda:	f9bd 9014 	ldrsh.w	r9, [sp, #20]
 801bcde:	e9cd 2306 	strd	r2, r3, [sp, #24]
 801bce2:	9b03      	ldr	r3, [sp, #12]
 801bce4:	2b00      	cmp	r3, #0
 801bce6:	d054      	beq.n	801bd92 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x246>
 801bce8:	9902      	ldr	r1, [sp, #8]
 801bcea:	f105 00a0 	add.w	r0, r5, #160	@ 0xa0
 801bcee:	f7ff fdb1 	bl	801b854 <_ZNK8touchgfx4Rect9intersectERKS0_>
 801bcf2:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 801bcf6:	b1d8      	cbz	r0, 801bd30 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x1e4>
 801bcf8:	f9b5 e0a0 	ldrsh.w	lr, [r5, #160]	@ 0xa0
 801bcfc:	f9b5 10a2 	ldrsh.w	r1, [r5, #162]	@ 0xa2
 801bd00:	4576      	cmp	r6, lr
 801bd02:	dc26      	bgt.n	801bd52 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x206>
 801bd04:	f8b5 c0a4 	ldrh.w	ip, [r5, #164]	@ 0xa4
 801bd08:	44f4      	add	ip, lr
 801bd0a:	fa0f fc8c 	sxth.w	ip, ip
 801bd0e:	45e0      	cmp	r8, ip
 801bd10:	db1f      	blt.n	801bd52 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x206>
 801bd12:	428f      	cmp	r7, r1
 801bd14:	fa1f fc81 	uxth.w	ip, r1
 801bd18:	f8b5 10a6 	ldrh.w	r1, [r5, #166]	@ 0xa6
 801bd1c:	dc0f      	bgt.n	801bd3e <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x1f2>
 801bd1e:	9805      	ldr	r0, [sp, #20]
 801bd20:	f8a5 90a2 	strh.w	r9, [r5, #162]	@ 0xa2
 801bd24:	eba0 0c0c 	sub.w	ip, r0, ip
 801bd28:	eba1 010c 	sub.w	r1, r1, ip
 801bd2c:	f8a5 10a6 	strh.w	r1, [r5, #166]	@ 0xa6
 801bd30:	4620      	mov	r0, r4
 801bd32:	9903      	ldr	r1, [sp, #12]
 801bd34:	3d08      	subs	r5, #8
 801bd36:	4604      	mov	r4, r0
 801bd38:	3901      	subs	r1, #1
 801bd3a:	9103      	str	r1, [sp, #12]
 801bd3c:	e7cf      	b.n	801bcde <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x192>
 801bd3e:	4461      	add	r1, ip
 801bd40:	b209      	sxth	r1, r1
 801bd42:	4549      	cmp	r1, r9
 801bd44:	dcf5      	bgt.n	801bd32 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x1e6>
 801bd46:	9904      	ldr	r1, [sp, #16]
 801bd48:	eba1 0c0c 	sub.w	ip, r1, ip
 801bd4c:	f8a5 c0a6 	strh.w	ip, [r5, #166]	@ 0xa6
 801bd50:	e7ee      	b.n	801bd30 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x1e4>
 801bd52:	428f      	cmp	r7, r1
 801bd54:	dced      	bgt.n	801bd32 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x1e6>
 801bd56:	f8b5 c0a6 	ldrh.w	ip, [r5, #166]	@ 0xa6
 801bd5a:	4461      	add	r1, ip
 801bd5c:	b209      	sxth	r1, r1
 801bd5e:	4589      	cmp	r9, r1
 801bd60:	dbe7      	blt.n	801bd32 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x1e6>
 801bd62:	4576      	cmp	r6, lr
 801bd64:	fa1f fc8e 	uxth.w	ip, lr
 801bd68:	f8b5 10a4 	ldrh.w	r1, [r5, #164]	@ 0xa4
 801bd6c:	dc08      	bgt.n	801bd80 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x234>
 801bd6e:	eba2 0c0c 	sub.w	ip, r2, ip
 801bd72:	f8a5 80a0 	strh.w	r8, [r5, #160]	@ 0xa0
 801bd76:	eba1 010c 	sub.w	r1, r1, ip
 801bd7a:	f8a5 10a4 	strh.w	r1, [r5, #164]	@ 0xa4
 801bd7e:	e7d7      	b.n	801bd30 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x1e4>
 801bd80:	4461      	add	r1, ip
 801bd82:	b209      	sxth	r1, r1
 801bd84:	4588      	cmp	r8, r1
 801bd86:	dbd4      	blt.n	801bd32 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x1e6>
 801bd88:	eba3 0c0c 	sub.w	ip, r3, ip
 801bd8c:	f8a5 c0a4 	strh.w	ip, [r5, #164]	@ 0xa4
 801bd90:	e7ce      	b.n	801bd30 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x1e4>
 801bd92:	2c00      	cmp	r4, #0
 801bd94:	f000 8169 	beq.w	801c06a <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x51e>
 801bd98:	9b00      	ldr	r3, [sp, #0]
 801bd9a:	3301      	adds	r3, #1
 801bd9c:	f000 8165 	beq.w	801c06a <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x51e>
 801bda0:	f10a 04a0 	add.w	r4, sl, #160	@ 0xa0
 801bda4:	9802      	ldr	r0, [sp, #8]
 801bda6:	4621      	mov	r1, r4
 801bda8:	f7ff fd76 	bl	801b898 <_ZNK8touchgfx4Rect8includesERKS0_>
 801bdac:	b120      	cbz	r0, 801bdb8 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x26c>
 801bdae:	f8bd 1000 	ldrh.w	r1, [sp]
 801bdb2:	9801      	ldr	r0, [sp, #4]
 801bdb4:	f7ff fe86 	bl	801bac4 <_ZN8touchgfx6VectorINS_4RectELt8EE13quickRemoveAtEt>
 801bdb8:	9902      	ldr	r1, [sp, #8]
 801bdba:	4620      	mov	r0, r4
 801bdbc:	f7ff fd4a 	bl	801b854 <_ZNK8touchgfx4Rect9intersectERKS0_>
 801bdc0:	2800      	cmp	r0, #0
 801bdc2:	f000 809b 	beq.w	801befc <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x3b0>
 801bdc6:	f9bd 8020 	ldrsh.w	r8, [sp, #32]
 801bdca:	f8bd 7024 	ldrh.w	r7, [sp, #36]	@ 0x24
 801bdce:	fa1f f288 	uxth.w	r2, r8
 801bdd2:	f9ba 40a0 	ldrsh.w	r4, [sl, #160]	@ 0xa0
 801bdd6:	f8ba 30a4 	ldrh.w	r3, [sl, #164]	@ 0xa4
 801bdda:	19d5      	adds	r5, r2, r7
 801bddc:	b2a1      	uxth	r1, r4
 801bdde:	45a0      	cmp	r8, r4
 801bde0:	f9bd c022 	ldrsh.w	ip, [sp, #34]	@ 0x22
 801bde4:	fa1f f985 	uxth.w	r9, r5
 801bde8:	440b      	add	r3, r1
 801bdea:	f9ba 00a2 	ldrsh.w	r0, [sl, #162]	@ 0xa2
 801bdee:	fa0f f589 	sxth.w	r5, r9
 801bdf2:	b29b      	uxth	r3, r3
 801bdf4:	9503      	str	r5, [sp, #12]
 801bdf6:	f8bb 50e8 	ldrh.w	r5, [fp, #232]	@ 0xe8
 801bdfa:	9507      	str	r5, [sp, #28]
 801bdfc:	f340 809d 	ble.w	801bf3a <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x3ee>
 801be00:	1a52      	subs	r2, r2, r1
 801be02:	4584      	cmp	ip, r0
 801be04:	fa0f fe83 	sxth.w	lr, r3
 801be08:	b292      	uxth	r2, r2
 801be0a:	b215      	sxth	r5, r2
 801be0c:	dd2f      	ble.n	801be6e <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x322>
 801be0e:	9e00      	ldr	r6, [sp, #0]
 801be10:	fa1f fc8c 	uxth.w	ip, ip
 801be14:	b280      	uxth	r0, r0
 801be16:	f8bd 1026 	ldrh.w	r1, [sp, #38]	@ 0x26
 801be1a:	eb0b 08c6 	add.w	r8, fp, r6, lsl #3
 801be1e:	9e03      	ldr	r6, [sp, #12]
 801be20:	ebac 0300 	sub.w	r3, ip, r0
 801be24:	448c      	add	ip, r1
 801be26:	eba6 060e 	sub.w	r6, r6, lr
 801be2a:	f8b8 e0ae 	ldrh.w	lr, [r8, #174]	@ 0xae
 801be2e:	b29b      	uxth	r3, r3
 801be30:	4470      	add	r0, lr
 801be32:	fa0f fc8c 	sxth.w	ip, ip
 801be36:	b21c      	sxth	r4, r3
 801be38:	b200      	sxth	r0, r0
 801be3a:	4366      	muls	r6, r4
 801be3c:	ebac 0000 	sub.w	r0, ip, r0
 801be40:	4368      	muls	r0, r5
 801be42:	4286      	cmp	r6, r0
 801be44:	db09      	blt.n	801be5a <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x30e>
 801be46:	f8b8 30a8 	ldrh.w	r3, [r8, #168]	@ 0xa8
 801be4a:	f8a8 40ae 	strh.w	r4, [r8, #174]	@ 0xae
 801be4e:	4417      	add	r7, r2
 801be50:	f8ad 3020 	strh.w	r3, [sp, #32]
 801be54:	f8ad 7024 	strh.w	r7, [sp, #36]	@ 0x24
 801be58:	e685      	b.n	801bb66 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x1a>
 801be5a:	440b      	add	r3, r1
 801be5c:	f8a8 50ac 	strh.w	r5, [r8, #172]	@ 0xac
 801be60:	f8ad 3026 	strh.w	r3, [sp, #38]	@ 0x26
 801be64:	f8b8 30aa 	ldrh.w	r3, [r8, #170]	@ 0xaa
 801be68:	f8ad 3022 	strh.w	r3, [sp, #34]	@ 0x22
 801be6c:	e67b      	b.n	801bb66 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x1a>
 801be6e:	9e03      	ldr	r6, [sp, #12]
 801be70:	45b6      	cmp	lr, r6
 801be72:	da28      	bge.n	801bec6 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x37a>
 801be74:	9b00      	ldr	r3, [sp, #0]
 801be76:	eba6 060e 	sub.w	r6, r6, lr
 801be7a:	f8bd 4026 	ldrh.w	r4, [sp, #38]	@ 0x26
 801be7e:	eb0b 01c3 	add.w	r1, fp, r3, lsl #3
 801be82:	eb04 030c 	add.w	r3, r4, ip
 801be86:	fa1f f883 	uxth.w	r8, r3
 801be8a:	f8b1 30ae 	ldrh.w	r3, [r1, #174]	@ 0xae
 801be8e:	4403      	add	r3, r0
 801be90:	fa0f f988 	sxth.w	r9, r8
 801be94:	eba0 000c 	sub.w	r0, r0, ip
 801be98:	eba3 0308 	sub.w	r3, r3, r8
 801be9c:	4368      	muls	r0, r5
 801be9e:	b29b      	uxth	r3, r3
 801bea0:	fa0f f883 	sxth.w	r8, r3
 801bea4:	fb08 f606 	mul.w	r6, r8, r6
 801bea8:	42b0      	cmp	r0, r6
 801beaa:	dc06      	bgt.n	801beba <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x36e>
 801beac:	f8a1 90aa 	strh.w	r9, [r1, #170]	@ 0xaa
 801beb0:	f8a1 80ae 	strh.w	r8, [r1, #174]	@ 0xae
 801beb4:	f8b1 30a8 	ldrh.w	r3, [r1, #168]	@ 0xa8
 801beb8:	e7c9      	b.n	801be4e <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x302>
 801beba:	4423      	add	r3, r4
 801bebc:	f8a1 50ac 	strh.w	r5, [r1, #172]	@ 0xac
 801bec0:	f8ad 3026 	strh.w	r3, [sp, #38]	@ 0x26
 801bec4:	e64f      	b.n	801bb66 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x1a>
 801bec6:	eba3 0309 	sub.w	r3, r3, r9
 801beca:	9807      	ldr	r0, [sp, #28]
 801becc:	b29b      	uxth	r3, r3
 801bece:	2806      	cmp	r0, #6
 801bed0:	fa0f fc83 	sxth.w	ip, r3
 801bed4:	d818      	bhi.n	801bf08 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x3bc>
 801bed6:	4652      	mov	r2, sl
 801bed8:	ab0a      	add	r3, sp, #40	@ 0x28
 801beda:	f852 0fa0 	ldr.w	r0, [r2, #160]!
 801bede:	6851      	ldr	r1, [r2, #4]
 801bee0:	f8aa c0a4 	strh.w	ip, [sl, #164]	@ 0xa4
 801bee4:	c303      	stmia	r3!, {r0, r1}
 801bee6:	9b03      	ldr	r3, [sp, #12]
 801bee8:	f8ad 502c 	strh.w	r5, [sp, #44]	@ 0x2c
 801beec:	f8aa 30a0 	strh.w	r3, [sl, #160]	@ 0xa0
 801bef0:	ab0a      	add	r3, sp, #40	@ 0x28
 801bef2:	9801      	ldr	r0, [sp, #4]
 801bef4:	e893 0006 	ldmia.w	r3, {r1, r2}
 801bef8:	f7ff fe06 	bl	801bb08 <_ZN8touchgfx6VectorINS_4RectELt8EE3addES1_>
 801befc:	9b00      	ldr	r3, [sp, #0]
 801befe:	f1aa 0a08 	sub.w	sl, sl, #8
 801bf02:	3b01      	subs	r3, #1
 801bf04:	9300      	str	r3, [sp, #0]
 801bf06:	e747      	b.n	801bd98 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x24c>
 801bf08:	9800      	ldr	r0, [sp, #0]
 801bf0a:	45ac      	cmp	ip, r5
 801bf0c:	ea4f 00c0 	mov.w	r0, r0, lsl #3
 801bf10:	db0c      	blt.n	801bf2c <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x3e0>
 801bf12:	4417      	add	r7, r2
 801bf14:	4458      	add	r0, fp
 801bf16:	f8ad 4020 	strh.w	r4, [sp, #32]
 801bf1a:	b2bf      	uxth	r7, r7
 801bf1c:	f8a0 c0ac 	strh.w	ip, [r0, #172]	@ 0xac
 801bf20:	f8ad 7024 	strh.w	r7, [sp, #36]	@ 0x24
 801bf24:	440f      	add	r7, r1
 801bf26:	f8a0 70a8 	strh.w	r7, [r0, #168]	@ 0xa8
 801bf2a:	e61c      	b.n	801bb66 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x1a>
 801bf2c:	4458      	add	r0, fp
 801bf2e:	f8a0 50ac 	strh.w	r5, [r0, #172]	@ 0xac
 801bf32:	443b      	add	r3, r7
 801bf34:	f8ad 3024 	strh.w	r3, [sp, #36]	@ 0x24
 801bf38:	e615      	b.n	801bb66 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x1a>
 801bf3a:	fa1f f18c 	uxth.w	r1, ip
 801bf3e:	f8bd 5026 	ldrh.w	r5, [sp, #38]	@ 0x26
 801bf42:	b282      	uxth	r2, r0
 801bf44:	4584      	cmp	ip, r0
 801bf46:	eb01 0e05 	add.w	lr, r1, r5
 801bf4a:	9204      	str	r2, [sp, #16]
 801bf4c:	fa1f fe8e 	uxth.w	lr, lr
 801bf50:	9e04      	ldr	r6, [sp, #16]
 801bf52:	fa0f f28e 	sxth.w	r2, lr
 801bf56:	9205      	str	r2, [sp, #20]
 801bf58:	f8ba 20a6 	ldrh.w	r2, [sl, #166]	@ 0xa6
 801bf5c:	4432      	add	r2, r6
 801bf5e:	b292      	uxth	r2, r2
 801bf60:	9206      	str	r2, [sp, #24]
 801bf62:	da26      	bge.n	801bfb2 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x466>
 801bf64:	eba3 0309 	sub.w	r3, r3, r9
 801bf68:	eba2 020e 	sub.w	r2, r2, lr
 801bf6c:	eba0 000c 	sub.w	r0, r0, ip
 801bf70:	eba4 0408 	sub.w	r4, r4, r8
 801bf74:	b29b      	uxth	r3, r3
 801bf76:	b292      	uxth	r2, r2
 801bf78:	fa0f fa83 	sxth.w	sl, r3
 801bf7c:	b211      	sxth	r1, r2
 801bf7e:	fb0a f000 	mul.w	r0, sl, r0
 801bf82:	434c      	muls	r4, r1
 801bf84:	42a0      	cmp	r0, r4
 801bf86:	9800      	ldr	r0, [sp, #0]
 801bf88:	ea4f 00c0 	mov.w	r0, r0, lsl #3
 801bf8c:	dc06      	bgt.n	801bf9c <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x450>
 801bf8e:	4458      	add	r0, fp
 801bf90:	9a05      	ldr	r2, [sp, #20]
 801bf92:	f8a0 10ae 	strh.w	r1, [r0, #174]	@ 0xae
 801bf96:	f8a0 20aa 	strh.w	r2, [r0, #170]	@ 0xaa
 801bf9a:	e7ca      	b.n	801bf32 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x3e6>
 801bf9c:	eb0b 0300 	add.w	r3, fp, r0
 801bfa0:	9903      	ldr	r1, [sp, #12]
 801bfa2:	f8a3 a0ac 	strh.w	sl, [r3, #172]	@ 0xac
 801bfa6:	f8a3 10a8 	strh.w	r1, [r3, #168]	@ 0xa8
 801bfaa:	442a      	add	r2, r5
 801bfac:	f8ad 2026 	strh.w	r2, [sp, #38]	@ 0x26
 801bfb0:	e5d9      	b.n	801bb66 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x1a>
 801bfb2:	9e04      	ldr	r6, [sp, #16]
 801bfb4:	9a03      	ldr	r2, [sp, #12]
 801bfb6:	1b89      	subs	r1, r1, r6
 801bfb8:	b21e      	sxth	r6, r3
 801bfba:	b289      	uxth	r1, r1
 801bfbc:	4296      	cmp	r6, r2
 801bfbe:	fa0f fc81 	sxth.w	ip, r1
 801bfc2:	dd25      	ble.n	801c010 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x4c4>
 801bfc4:	eba3 0309 	sub.w	r3, r3, r9
 801bfc8:	f9bd 2018 	ldrsh.w	r2, [sp, #24]
 801bfcc:	9e05      	ldr	r6, [sp, #20]
 801bfce:	eba4 0408 	sub.w	r4, r4, r8
 801bfd2:	b29b      	uxth	r3, r3
 801bfd4:	eba6 0902 	sub.w	r9, r6, r2
 801bfd8:	fb0c f404 	mul.w	r4, ip, r4
 801bfdc:	b218      	sxth	r0, r3
 801bfde:	9a00      	ldr	r2, [sp, #0]
 801bfe0:	fb00 f909 	mul.w	r9, r0, r9
 801bfe4:	00d2      	lsls	r2, r2, #3
 801bfe6:	454c      	cmp	r4, r9
 801bfe8:	db03      	blt.n	801bff2 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x4a6>
 801bfea:	445a      	add	r2, fp
 801bfec:	f8a2 c0ae 	strh.w	ip, [r2, #174]	@ 0xae
 801bff0:	e79f      	b.n	801bf32 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x3e6>
 801bff2:	eb0b 0302 	add.w	r3, fp, r2
 801bff6:	9a03      	ldr	r2, [sp, #12]
 801bff8:	4429      	add	r1, r5
 801bffa:	f8a3 20a8 	strh.w	r2, [r3, #168]	@ 0xa8
 801bffe:	f8a3 00ac 	strh.w	r0, [r3, #172]	@ 0xac
 801c002:	f8b3 30aa 	ldrh.w	r3, [r3, #170]	@ 0xaa
 801c006:	f8ad 1026 	strh.w	r1, [sp, #38]	@ 0x26
 801c00a:	f8ad 3022 	strh.w	r3, [sp, #34]	@ 0x22
 801c00e:	e5aa      	b.n	801bb66 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x1a>
 801c010:	9b06      	ldr	r3, [sp, #24]
 801c012:	9c07      	ldr	r4, [sp, #28]
 801c014:	eba3 020e 	sub.w	r2, r3, lr
 801c018:	2c06      	cmp	r4, #6
 801c01a:	b292      	uxth	r2, r2
 801c01c:	b213      	sxth	r3, r2
 801c01e:	d80d      	bhi.n	801c03c <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x4f0>
 801c020:	4651      	mov	r1, sl
 801c022:	aa0a      	add	r2, sp, #40	@ 0x28
 801c024:	f851 0fa0 	ldr.w	r0, [r1, #160]!
 801c028:	6849      	ldr	r1, [r1, #4]
 801c02a:	f8aa 30a6 	strh.w	r3, [sl, #166]	@ 0xa6
 801c02e:	9b05      	ldr	r3, [sp, #20]
 801c030:	c203      	stmia	r2!, {r0, r1}
 801c032:	f8aa 30a2 	strh.w	r3, [sl, #162]	@ 0xa2
 801c036:	f8ad c02e 	strh.w	ip, [sp, #46]	@ 0x2e
 801c03a:	e759      	b.n	801bef0 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x3a4>
 801c03c:	9c00      	ldr	r4, [sp, #0]
 801c03e:	4563      	cmp	r3, ip
 801c040:	ea4f 04c4 	mov.w	r4, r4, lsl #3
 801c044:	db0d      	blt.n	801c062 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x516>
 801c046:	4429      	add	r1, r5
 801c048:	9a04      	ldr	r2, [sp, #16]
 801c04a:	445c      	add	r4, fp
 801c04c:	f8ad 0022 	strh.w	r0, [sp, #34]	@ 0x22
 801c050:	b289      	uxth	r1, r1
 801c052:	f8a4 30ae 	strh.w	r3, [r4, #174]	@ 0xae
 801c056:	f8ad 1026 	strh.w	r1, [sp, #38]	@ 0x26
 801c05a:	4411      	add	r1, r2
 801c05c:	f8a4 10aa 	strh.w	r1, [r4, #170]	@ 0xaa
 801c060:	e581      	b.n	801bb66 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x1a>
 801c062:	445c      	add	r4, fp
 801c064:	f8a4 c0ae 	strh.w	ip, [r4, #174]	@ 0xae
 801c068:	e79f      	b.n	801bfaa <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x45e>
 801c06a:	f8bb 70e8 	ldrh.w	r7, [fp, #232]	@ 0xe8
 801c06e:	2f07      	cmp	r7, #7
 801c070:	d806      	bhi.n	801c080 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x534>
 801c072:	ab08      	add	r3, sp, #32
 801c074:	9801      	ldr	r0, [sp, #4]
 801c076:	e893 0006 	ldmia.w	r3, {r1, r2}
 801c07a:	f7ff fd45 	bl	801bb08 <_ZN8touchgfx6VectorINS_4RectELt8EE3addES1_>
 801c07e:	e5dc      	b.n	801bc3a <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0xee>
 801c080:	f107 39ff 	add.w	r9, r7, #4294967295
 801c084:	f10b 03a8 	add.w	r3, fp, #168	@ 0xa8
 801c088:	eb0b 07c7 	add.w	r7, fp, r7, lsl #3
 801c08c:	f06f 4a00 	mvn.w	sl, #2147483648	@ 0x80000000
 801c090:	f04f 35ff 	mov.w	r5, #4294967295
 801c094:	2400      	movs	r4, #0
 801c096:	9304      	str	r3, [sp, #16]
 801c098:	f9b7 30a4 	ldrsh.w	r3, [r7, #164]	@ 0xa4
 801c09c:	f109 32ff 	add.w	r2, r9, #4294967295
 801c0a0:	9300      	str	r3, [sp, #0]
 801c0a2:	4690      	mov	r8, r2
 801c0a4:	f9b7 30a6 	ldrsh.w	r3, [r7, #166]	@ 0xa6
 801c0a8:	9303      	str	r3, [sp, #12]
 801c0aa:	f107 03a0 	add.w	r3, r7, #160	@ 0xa0
 801c0ae:	f1b8 3fff 	cmp.w	r8, #4294967295
 801c0b2:	6818      	ldr	r0, [r3, #0]
 801c0b4:	f10d 0c28 	add.w	ip, sp, #40	@ 0x28
 801c0b8:	9206      	str	r2, [sp, #24]
 801c0ba:	bf16      	itet	ne
 801c0bc:	9904      	ldrne	r1, [sp, #16]
 801c0be:	f8dd e008 	ldreq.w	lr, [sp, #8]
 801c0c2:	eb01 0ec8 	addne.w	lr, r1, r8, lsl #3
 801c0c6:	9305      	str	r3, [sp, #20]
 801c0c8:	f8be 1006 	ldrh.w	r1, [lr, #6]
 801c0cc:	f8be 6004 	ldrh.w	r6, [lr, #4]
 801c0d0:	fb16 f601 	smulbb	r6, r6, r1
 801c0d4:	6859      	ldr	r1, [r3, #4]
 801c0d6:	e8ac 0003 	stmia.w	ip!, {r0, r1}
 801c0da:	4671      	mov	r1, lr
 801c0dc:	a80a      	add	r0, sp, #40	@ 0x28
 801c0de:	f7ff fbfd 	bl	801b8dc <_ZN8touchgfx4Rect11expandToFitERKS0_>
 801c0e2:	f8bd 002e 	ldrh.w	r0, [sp, #46]	@ 0x2e
 801c0e6:	f8bd 102c 	ldrh.w	r1, [sp, #44]	@ 0x2c
 801c0ea:	9b03      	ldr	r3, [sp, #12]
 801c0ec:	9a00      	ldr	r2, [sp, #0]
 801c0ee:	fb11 f100 	smulbb	r1, r1, r0
 801c0f2:	2008      	movs	r0, #8
 801c0f4:	fb02 6603 	mla	r6, r2, r3, r6
 801c0f8:	1b8e      	subs	r6, r1, r6
 801c0fa:	fb91 f1f0 	sdiv	r1, r1, r0
 801c0fe:	42b1      	cmp	r1, r6
 801c100:	dc21      	bgt.n	801c146 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x5fa>
 801c102:	4556      	cmp	r6, sl
 801c104:	e9dd 3205 	ldrd	r3, r2, [sp, #20]
 801c108:	da03      	bge.n	801c112 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x5c6>
 801c10a:	b1e6      	cbz	r6, 801c146 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x5fa>
 801c10c:	46b2      	mov	sl, r6
 801c10e:	4645      	mov	r5, r8
 801c110:	464c      	mov	r4, r9
 801c112:	f108 38ff 	add.w	r8, r8, #4294967295
 801c116:	f118 0f02 	cmn.w	r8, #2
 801c11a:	d1c8      	bne.n	801c0ae <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x562>
 801c11c:	f1b2 3fff 	cmp.w	r2, #4294967295
 801c120:	f1a7 0708 	sub.w	r7, r7, #8
 801c124:	4691      	mov	r9, r2
 801c126:	d1b7      	bne.n	801c098 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x54c>
 801c128:	9b01      	ldr	r3, [sp, #4]
 801c12a:	b2a6      	uxth	r6, r4
 801c12c:	00e4      	lsls	r4, r4, #3
 801c12e:	1918      	adds	r0, r3, r4
 801c130:	1c6b      	adds	r3, r5, #1
 801c132:	d10b      	bne.n	801c14c <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x600>
 801c134:	4601      	mov	r1, r0
 801c136:	9802      	ldr	r0, [sp, #8]
 801c138:	f7ff fbd0 	bl	801b8dc <_ZN8touchgfx4Rect11expandToFitERKS0_>
 801c13c:	4631      	mov	r1, r6
 801c13e:	9801      	ldr	r0, [sp, #4]
 801c140:	f7ff fcc0 	bl	801bac4 <_ZN8touchgfx6VectorINS_4RectELt8EE13quickRemoveAtEt>
 801c144:	e50f      	b.n	801bb66 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x1a>
 801c146:	4645      	mov	r5, r8
 801c148:	464c      	mov	r4, r9
 801c14a:	e7ed      	b.n	801c128 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x5dc>
 801c14c:	9b01      	ldr	r3, [sp, #4]
 801c14e:	00ed      	lsls	r5, r5, #3
 801c150:	445c      	add	r4, fp
 801c152:	1959      	adds	r1, r3, r5
 801c154:	445d      	add	r5, fp
 801c156:	f7ff fbc1 	bl	801b8dc <_ZN8touchgfx4Rect11expandToFitERKS0_>
 801c15a:	9b02      	ldr	r3, [sp, #8]
 801c15c:	cb03      	ldmia	r3!, {r0, r1}
 801c15e:	9b02      	ldr	r3, [sp, #8]
 801c160:	f8c5 00a8 	str.w	r0, [r5, #168]	@ 0xa8
 801c164:	f8c5 10ac 	str.w	r1, [r5, #172]	@ 0xac
 801c168:	f854 0fa8 	ldr.w	r0, [r4, #168]!
 801c16c:	6861      	ldr	r1, [r4, #4]
 801c16e:	c303      	stmia	r3!, {r0, r1}
 801c170:	e7e4      	b.n	801c13c <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x5f0>
	...

0801c174 <_ZN8touchgfx11Application4drawERNS_4RectE>:
 801c174:	4b1d      	ldr	r3, [pc, #116]	@ (801c1ec <_ZN8touchgfx11Application4drawERNS_4RectE+0x78>)
 801c176:	b530      	push	{r4, r5, lr}
 801c178:	f9b3 2000 	ldrsh.w	r2, [r3]
 801c17c:	b085      	sub	sp, #20
 801c17e:	4b1c      	ldr	r3, [pc, #112]	@ (801c1f0 <_ZN8touchgfx11Application4drawERNS_4RectE+0x7c>)
 801c180:	460c      	mov	r4, r1
 801c182:	2100      	movs	r1, #0
 801c184:	4605      	mov	r5, r0
 801c186:	f9b3 3000 	ldrsh.w	r3, [r3]
 801c18a:	6820      	ldr	r0, [r4, #0]
 801c18c:	9100      	str	r1, [sp, #0]
 801c18e:	f8ad 3006 	strh.w	r3, [sp, #6]
 801c192:	ab02      	add	r3, sp, #8
 801c194:	6861      	ldr	r1, [r4, #4]
 801c196:	f8ad 2004 	strh.w	r2, [sp, #4]
 801c19a:	c303      	stmia	r3!, {r0, r1}
 801c19c:	4669      	mov	r1, sp
 801c19e:	a802      	add	r0, sp, #8
 801c1a0:	f7fb fe70 	bl	8017e84 <_ZN8touchgfx4RectaNERKS0_>
 801c1a4:	ab02      	add	r3, sp, #8
 801c1a6:	cb03      	ldmia	r3!, {r0, r1}
 801c1a8:	4b12      	ldr	r3, [pc, #72]	@ (801c1f4 <_ZN8touchgfx11Application4drawERNS_4RectE+0x80>)
 801c1aa:	6020      	str	r0, [r4, #0]
 801c1ac:	6818      	ldr	r0, [r3, #0]
 801c1ae:	6061      	str	r1, [r4, #4]
 801c1b0:	b138      	cbz	r0, 801c1c2 <_ZN8touchgfx11Application4drawERNS_4RectE+0x4e>
 801c1b2:	f895 3134 	ldrb.w	r3, [r5, #308]	@ 0x134
 801c1b6:	b133      	cbz	r3, 801c1c6 <_ZN8touchgfx11Application4drawERNS_4RectE+0x52>
 801c1b8:	6821      	ldr	r1, [r4, #0]
 801c1ba:	4628      	mov	r0, r5
 801c1bc:	6862      	ldr	r2, [r4, #4]
 801c1be:	f7ff fcc5 	bl	801bb4c <_ZN8touchgfx11Application14invalidateAreaENS_4RectE>
 801c1c2:	b005      	add	sp, #20
 801c1c4:	bd30      	pop	{r4, r5, pc}
 801c1c6:	6803      	ldr	r3, [r0, #0]
 801c1c8:	4621      	mov	r1, r4
 801c1ca:	689b      	ldr	r3, [r3, #8]
 801c1cc:	4798      	blx	r3
 801c1ce:	4b0a      	ldr	r3, [pc, #40]	@ (801c1f8 <_ZN8touchgfx11Application4drawERNS_4RectE+0x84>)
 801c1d0:	6818      	ldr	r0, [r3, #0]
 801c1d2:	b118      	cbz	r0, 801c1dc <_ZN8touchgfx11Application4drawERNS_4RectE+0x68>
 801c1d4:	6803      	ldr	r3, [r0, #0]
 801c1d6:	4621      	mov	r1, r4
 801c1d8:	689b      	ldr	r3, [r3, #8]
 801c1da:	4798      	blx	r3
 801c1dc:	4b07      	ldr	r3, [pc, #28]	@ (801c1fc <_ZN8touchgfx11Application4drawERNS_4RectE+0x88>)
 801c1de:	4621      	mov	r1, r4
 801c1e0:	6818      	ldr	r0, [r3, #0]
 801c1e2:	6803      	ldr	r3, [r0, #0]
 801c1e4:	69db      	ldr	r3, [r3, #28]
 801c1e6:	4798      	blx	r3
 801c1e8:	e7eb      	b.n	801c1c2 <_ZN8touchgfx11Application4drawERNS_4RectE+0x4e>
 801c1ea:	bf00      	nop
 801c1ec:	2400b878 	.word	0x2400b878
 801c1f0:	2400b87a 	.word	0x2400b87a
 801c1f4:	2400b8c0 	.word	0x2400b8c0
 801c1f8:	2400b8bc 	.word	0x2400b8bc
 801c1fc:	2400b884 	.word	0x2400b884

0801c200 <_ZN8touchgfx11Application19cacheDrawOperationsEb>:
 801c200:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801c204:	4604      	mov	r4, r0
 801c206:	b09b      	sub	sp, #108	@ 0x6c
 801c208:	f880 1134 	strb.w	r1, [r0, #308]	@ 0x134
 801c20c:	b129      	cbz	r1, 801c21a <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x1a>
 801c20e:	2300      	movs	r3, #0
 801c210:	f8a0 30e8 	strh.w	r3, [r0, #232]	@ 0xe8
 801c214:	b01b      	add	sp, #108	@ 0x6c
 801c216:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801c21a:	f500 7696 	add.w	r6, r0, #300	@ 0x12c
 801c21e:	4630      	mov	r0, r6
 801c220:	f7fb fe73 	bl	8017f0a <_ZNK8touchgfx4Rect7isEmptyEv>
 801c224:	4605      	mov	r5, r0
 801c226:	b940      	cbnz	r0, 801c23a <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x3a>
 801c228:	4620      	mov	r0, r4
 801c22a:	e896 0006 	ldmia.w	r6, {r1, r2}
 801c22e:	f7ff fc8d 	bl	801bb4c <_ZN8touchgfx11Application14invalidateAreaENS_4RectE>
 801c232:	f8c4 512c 	str.w	r5, [r4, #300]	@ 0x12c
 801c236:	f8c4 5130 	str.w	r5, [r4, #304]	@ 0x130
 801c23a:	4ba6      	ldr	r3, [pc, #664]	@ (801c4d4 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x2d4>)
 801c23c:	681b      	ldr	r3, [r3, #0]
 801c23e:	b33b      	cbz	r3, 801c290 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x90>
 801c240:	4da5      	ldr	r5, [pc, #660]	@ (801c4d8 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x2d8>)
 801c242:	4628      	mov	r0, r5
 801c244:	f7fb fe61 	bl	8017f0a <_ZNK8touchgfx4Rect7isEmptyEv>
 801c248:	4606      	mov	r6, r0
 801c24a:	bb08      	cbnz	r0, 801c290 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x90>
 801c24c:	4628      	mov	r0, r5
 801c24e:	f7ff f9b1 	bl	801b5b4 <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERNS_4RectE>
 801c252:	6829      	ldr	r1, [r5, #0]
 801c254:	686a      	ldr	r2, [r5, #4]
 801c256:	4620      	mov	r0, r4
 801c258:	f7ff fc78 	bl	801bb4c <_ZN8touchgfx11Application14invalidateAreaENS_4RectE>
 801c25c:	802e      	strh	r6, [r5, #0]
 801c25e:	806e      	strh	r6, [r5, #2]
 801c260:	80ae      	strh	r6, [r5, #4]
 801c262:	80ee      	strh	r6, [r5, #6]
 801c264:	4f9d      	ldr	r7, [pc, #628]	@ (801c4dc <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x2dc>)
 801c266:	a809      	add	r0, sp, #36	@ 0x24
 801c268:	f7ff fbd7 	bl	801ba1a <_ZN8touchgfx6VectorINS_4RectELt8EEC1Ev>
 801c26c:	883d      	ldrh	r5, [r7, #0]
 801c26e:	462e      	mov	r6, r5
 801c270:	f8b4 30e8 	ldrh.w	r3, [r4, #232]	@ 0xe8
 801c274:	42b3      	cmp	r3, r6
 801c276:	d910      	bls.n	801c29a <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x9a>
 801c278:	eb04 03c6 	add.w	r3, r4, r6, lsl #3
 801c27c:	3601      	adds	r6, #1
 801c27e:	a809      	add	r0, sp, #36	@ 0x24
 801c280:	f8d3 10a8 	ldr.w	r1, [r3, #168]	@ 0xa8
 801c284:	b2b6      	uxth	r6, r6
 801c286:	f8d3 20ac 	ldr.w	r2, [r3, #172]	@ 0xac
 801c28a:	f7ff fc3d 	bl	801bb08 <_ZN8touchgfx6VectorINS_4RectELt8EE3addES1_>
 801c28e:	e7ef      	b.n	801c270 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x70>
 801c290:	f8b4 30e8 	ldrh.w	r3, [r4, #232]	@ 0xe8
 801c294:	2b00      	cmp	r3, #0
 801c296:	d1e5      	bne.n	801c264 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x64>
 801c298:	e7bc      	b.n	801c214 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x14>
 801c29a:	462e      	mov	r6, r5
 801c29c:	f8b4 312a 	ldrh.w	r3, [r4, #298]	@ 0x12a
 801c2a0:	42b3      	cmp	r3, r6
 801c2a2:	d90b      	bls.n	801c2bc <_ZN8touchgfx11Application19cacheDrawOperationsEb+0xbc>
 801c2a4:	eb04 03c6 	add.w	r3, r4, r6, lsl #3
 801c2a8:	3601      	adds	r6, #1
 801c2aa:	4620      	mov	r0, r4
 801c2ac:	f8d3 10ea 	ldr.w	r1, [r3, #234]	@ 0xea
 801c2b0:	b2b6      	uxth	r6, r6
 801c2b2:	f8d3 20ee 	ldr.w	r2, [r3, #238]	@ 0xee
 801c2b6:	f7ff fc49 	bl	801bb4c <_ZN8touchgfx11Application14invalidateAreaENS_4RectE>
 801c2ba:	e7ef      	b.n	801c29c <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x9c>
 801c2bc:	4a88      	ldr	r2, [pc, #544]	@ (801c4e0 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x2e0>)
 801c2be:	6813      	ldr	r3, [r2, #0]
 801c2c0:	4690      	mov	r8, r2
 801c2c2:	f893 3048 	ldrb.w	r3, [r3, #72]	@ 0x48
 801c2c6:	2b01      	cmp	r3, #1
 801c2c8:	f040 8094 	bne.w	801c3f4 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x1f4>
 801c2cc:	eb04 03c5 	add.w	r3, r4, r5, lsl #3
 801c2d0:	f8b4 00e8 	ldrh.w	r0, [r4, #232]	@ 0xe8
 801c2d4:	f04f 0900 	mov.w	r9, #0
 801c2d8:	33aa      	adds	r3, #170	@ 0xaa
 801c2da:	42a8      	cmp	r0, r5
 801c2dc:	f103 0308 	add.w	r3, r3, #8
 801c2e0:	dd0a      	ble.n	801c2f8 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0xf8>
 801c2e2:	f833 2c08 	ldrh.w	r2, [r3, #-8]
 801c2e6:	3501      	adds	r5, #1
 801c2e8:	f833 1c04 	ldrh.w	r1, [r3, #-4]
 801c2ec:	440a      	add	r2, r1
 801c2ee:	b212      	sxth	r2, r2
 801c2f0:	4591      	cmp	r9, r2
 801c2f2:	bfb8      	it	lt
 801c2f4:	4691      	movlt	r9, r2
 801c2f6:	e7f0      	b.n	801c2da <_ZN8touchgfx11Application19cacheDrawOperationsEb+0xda>
 801c2f8:	4b7a      	ldr	r3, [pc, #488]	@ (801c4e4 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x2e4>)
 801c2fa:	4e7b      	ldr	r6, [pc, #492]	@ (801c4e8 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x2e8>)
 801c2fc:	881d      	ldrh	r5, [r3, #0]
 801c2fe:	2300      	movs	r3, #0
 801c300:	2d0f      	cmp	r5, #15
 801c302:	bf8c      	ite	hi
 801c304:	08ed      	lsrhi	r5, r5, #3
 801c306:	2501      	movls	r5, #1
 801c308:	e9cd 3305 	strd	r3, r3, [sp, #20]
 801c30c:	f8bd 3016 	ldrh.w	r3, [sp, #22]
 801c310:	f8bd 101a 	ldrh.w	r1, [sp, #26]
 801c314:	f8d8 0000 	ldr.w	r0, [r8]
 801c318:	440b      	add	r3, r1
 801c31a:	6802      	ldr	r2, [r0, #0]
 801c31c:	b21b      	sxth	r3, r3
 801c31e:	4599      	cmp	r9, r3
 801c320:	dd4b      	ble.n	801c3ba <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x1ba>
 801c322:	f8d2 3094 	ldr.w	r3, [r2, #148]	@ 0x94
 801c326:	4798      	blx	r3
 801c328:	f8bd 201a 	ldrh.w	r2, [sp, #26]
 801c32c:	f8bd 3016 	ldrh.w	r3, [sp, #22]
 801c330:	4413      	add	r3, r2
 801c332:	b21b      	sxth	r3, r3
 801c334:	195a      	adds	r2, r3, r5
 801c336:	4290      	cmp	r0, r2
 801c338:	da07      	bge.n	801c34a <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x14a>
 801c33a:	4581      	cmp	r9, r0
 801c33c:	dd05      	ble.n	801c34a <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x14a>
 801c33e:	4298      	cmp	r0, r3
 801c340:	da33      	bge.n	801c3aa <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x1aa>
 801c342:	2b00      	cmp	r3, #0
 801c344:	dd31      	ble.n	801c3aa <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x1aa>
 801c346:	4648      	mov	r0, r9
 801c348:	e004      	b.n	801c354 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x154>
 801c34a:	4298      	cmp	r0, r3
 801c34c:	dbfb      	blt.n	801c346 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x146>
 801c34e:	4548      	cmp	r0, r9
 801c350:	bfa8      	it	ge
 801c352:	4648      	movge	r0, r9
 801c354:	f9b6 2000 	ldrsh.w	r2, [r6]
 801c358:	2100      	movs	r1, #0
 801c35a:	1ac0      	subs	r0, r0, r3
 801c35c:	f8b7 a000 	ldrh.w	sl, [r7]
 801c360:	f8ad 1014 	strh.w	r1, [sp, #20]
 801c364:	f8ad 3016 	strh.w	r3, [sp, #22]
 801c368:	f8ad 2018 	strh.w	r2, [sp, #24]
 801c36c:	f8ad 001a 	strh.w	r0, [sp, #26]
 801c370:	f8b4 30e8 	ldrh.w	r3, [r4, #232]	@ 0xe8
 801c374:	4553      	cmp	r3, sl
 801c376:	d9c9      	bls.n	801c30c <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x10c>
 801c378:	eb04 02ca 	add.w	r2, r4, sl, lsl #3
 801c37c:	ab07      	add	r3, sp, #28
 801c37e:	f852 0fa8 	ldr.w	r0, [r2, #168]!
 801c382:	6851      	ldr	r1, [r2, #4]
 801c384:	c303      	stmia	r3!, {r0, r1}
 801c386:	a807      	add	r0, sp, #28
 801c388:	a905      	add	r1, sp, #20
 801c38a:	f7fb fd7b 	bl	8017e84 <_ZN8touchgfx4RectaNERKS0_>
 801c38e:	a807      	add	r0, sp, #28
 801c390:	f7fb fdbb 	bl	8017f0a <_ZNK8touchgfx4Rect7isEmptyEv>
 801c394:	b920      	cbnz	r0, 801c3a0 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x1a0>
 801c396:	6823      	ldr	r3, [r4, #0]
 801c398:	a907      	add	r1, sp, #28
 801c39a:	4620      	mov	r0, r4
 801c39c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 801c39e:	4798      	blx	r3
 801c3a0:	f10a 0a01 	add.w	sl, sl, #1
 801c3a4:	fa1f fa8a 	uxth.w	sl, sl
 801c3a8:	e7e2      	b.n	801c370 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x170>
 801c3aa:	f8d8 0000 	ldr.w	r0, [r8]
 801c3ae:	2101      	movs	r1, #1
 801c3b0:	6803      	ldr	r3, [r0, #0]
 801c3b2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 801c3b6:	4798      	blx	r3
 801c3b8:	e7a8      	b.n	801c30c <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x10c>
 801c3ba:	6a53      	ldr	r3, [r2, #36]	@ 0x24
 801c3bc:	4798      	blx	r3
 801c3be:	4b4b      	ldr	r3, [pc, #300]	@ (801c4ec <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x2ec>)
 801c3c0:	781b      	ldrb	r3, [r3, #0]
 801c3c2:	2b00      	cmp	r3, #0
 801c3c4:	f43f af26 	beq.w	801c214 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x14>
 801c3c8:	2300      	movs	r3, #0
 801c3ca:	883d      	ldrh	r5, [r7, #0]
 801c3cc:	34ea      	adds	r4, #234	@ 0xea
 801c3ce:	f8a4 3040 	strh.w	r3, [r4, #64]	@ 0x40
 801c3d2:	f8bd 3064 	ldrh.w	r3, [sp, #100]	@ 0x64
 801c3d6:	42ab      	cmp	r3, r5
 801c3d8:	f67f af1c 	bls.w	801c214 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x14>
 801c3dc:	ab1a      	add	r3, sp, #104	@ 0x68
 801c3de:	4620      	mov	r0, r4
 801c3e0:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 801c3e4:	3501      	adds	r5, #1
 801c3e6:	3b44      	subs	r3, #68	@ 0x44
 801c3e8:	b2ad      	uxth	r5, r5
 801c3ea:	e893 0006 	ldmia.w	r3, {r1, r2}
 801c3ee:	f7ff fb8b 	bl	801bb08 <_ZN8touchgfx6VectorINS_4RectELt8EE3addES1_>
 801c3f2:	e7ee      	b.n	801c3d2 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x1d2>
 801c3f4:	2b02      	cmp	r3, #2
 801c3f6:	f040 813d 	bne.w	801c674 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x474>
 801c3fa:	4b3d      	ldr	r3, [pc, #244]	@ (801c4f0 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x2f0>)
 801c3fc:	781b      	ldrb	r3, [r3, #0]
 801c3fe:	2b01      	cmp	r3, #1
 801c400:	d02c      	beq.n	801c45c <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x25c>
 801c402:	f104 0ba8 	add.w	fp, r4, #168	@ 0xa8
 801c406:	883a      	ldrh	r2, [r7, #0]
 801c408:	f8b4 10e8 	ldrh.w	r1, [r4, #232]	@ 0xe8
 801c40c:	3201      	adds	r2, #1
 801c40e:	b292      	uxth	r2, r2
 801c410:	2900      	cmp	r1, #0
 801c412:	d0d4      	beq.n	801c3be <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x1be>
 801c414:	f8b4 50aa 	ldrh.w	r5, [r4, #170]	@ 0xaa
 801c418:	4610      	mov	r0, r2
 801c41a:	f8b4 30ae 	ldrh.w	r3, [r4, #174]	@ 0xae
 801c41e:	f04f 0a00 	mov.w	sl, #0
 801c422:	441d      	add	r5, r3
 801c424:	b22d      	sxth	r5, r5
 801c426:	b283      	uxth	r3, r0
 801c428:	ea4f 06ca 	mov.w	r6, sl, lsl #3
 801c42c:	4299      	cmp	r1, r3
 801c42e:	f240 80c3 	bls.w	801c5b8 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x3b8>
 801c432:	4426      	add	r6, r4
 801c434:	eb04 09c0 	add.w	r9, r4, r0, lsl #3
 801c438:	4684      	mov	ip, r0
 801c43a:	f9b6 30aa 	ldrsh.w	r3, [r6, #170]	@ 0xaa
 801c43e:	f9b9 e0aa 	ldrsh.w	lr, [r9, #170]	@ 0xaa
 801c442:	4573      	cmp	r3, lr
 801c444:	f340 80a5 	ble.w	801c592 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x392>
 801c448:	f8b9 50ae 	ldrh.w	r5, [r9, #174]	@ 0xae
 801c44c:	4475      	add	r5, lr
 801c44e:	b22d      	sxth	r5, r5
 801c450:	429d      	cmp	r5, r3
 801c452:	bfa8      	it	ge
 801c454:	461d      	movge	r5, r3
 801c456:	3001      	adds	r0, #1
 801c458:	46e2      	mov	sl, ip
 801c45a:	e7e4      	b.n	801c426 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x226>
 801c45c:	f104 09a8 	add.w	r9, r4, #168	@ 0xa8
 801c460:	f8b4 b0e8 	ldrh.w	fp, [r4, #232]	@ 0xe8
 801c464:	f1bb 0f00 	cmp.w	fp, #0
 801c468:	d0a9      	beq.n	801c3be <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x1be>
 801c46a:	883b      	ldrh	r3, [r7, #0]
 801c46c:	2600      	movs	r6, #0
 801c46e:	f9b4 20a8 	ldrsh.w	r2, [r4, #168]	@ 0xa8
 801c472:	3301      	adds	r3, #1
 801c474:	b29b      	uxth	r3, r3
 801c476:	b299      	uxth	r1, r3
 801c478:	00f5      	lsls	r5, r6, #3
 801c47a:	458b      	cmp	fp, r1
 801c47c:	d93a      	bls.n	801c4f4 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x2f4>
 801c47e:	4425      	add	r5, r4
 801c480:	eb04 0ac3 	add.w	sl, r4, r3, lsl #3
 801c484:	469c      	mov	ip, r3
 801c486:	f8b5 10ac 	ldrh.w	r1, [r5, #172]	@ 0xac
 801c48a:	f8b5 00a8 	ldrh.w	r0, [r5, #168]	@ 0xa8
 801c48e:	f9ba e0a8 	ldrsh.w	lr, [sl, #168]	@ 0xa8
 801c492:	4408      	add	r0, r1
 801c494:	f8ba 10ac 	ldrh.w	r1, [sl, #172]	@ 0xac
 801c498:	4471      	add	r1, lr
 801c49a:	b200      	sxth	r0, r0
 801c49c:	b209      	sxth	r1, r1
 801c49e:	4288      	cmp	r0, r1
 801c4a0:	da06      	bge.n	801c4b0 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x2b0>
 801c4a2:	4586      	cmp	lr, r0
 801c4a4:	4672      	mov	r2, lr
 801c4a6:	bfb8      	it	lt
 801c4a8:	4602      	movlt	r2, r0
 801c4aa:	3301      	adds	r3, #1
 801c4ac:	4666      	mov	r6, ip
 801c4ae:	e7e2      	b.n	801c476 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x276>
 801c4b0:	d10b      	bne.n	801c4ca <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x2ca>
 801c4b2:	f9b5 c0ae 	ldrsh.w	ip, [r5, #174]	@ 0xae
 801c4b6:	f9ba 10ae 	ldrsh.w	r1, [sl, #174]	@ 0xae
 801c4ba:	458c      	cmp	ip, r1
 801c4bc:	bfb4      	ite	lt
 801c4be:	469c      	movlt	ip, r3
 801c4c0:	46b4      	movge	ip, r6
 801c4c2:	4572      	cmp	r2, lr
 801c4c4:	bfb8      	it	lt
 801c4c6:	4672      	movlt	r2, lr
 801c4c8:	e7ef      	b.n	801c4aa <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x2aa>
 801c4ca:	428a      	cmp	r2, r1
 801c4cc:	46b4      	mov	ip, r6
 801c4ce:	bfb8      	it	lt
 801c4d0:	460a      	movlt	r2, r1
 801c4d2:	e7ea      	b.n	801c4aa <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x2aa>
 801c4d4:	2400b8bc 	.word	0x2400b8bc
 801c4d8:	2400b8c8 	.word	0x2400b8c8
 801c4dc:	24000056 	.word	0x24000056
 801c4e0:	2400b884 	.word	0x2400b884
 801c4e4:	2400b87a 	.word	0x2400b87a
 801c4e8:	2400b878 	.word	0x2400b878
 801c4ec:	2400b882 	.word	0x2400b882
 801c4f0:	2400b87c 	.word	0x2400b87c
 801c4f4:	1961      	adds	r1, r4, r5
 801c4f6:	ab07      	add	r3, sp, #28
 801c4f8:	f851 0fa8 	ldr.w	r0, [r1, #168]!
 801c4fc:	6849      	ldr	r1, [r1, #4]
 801c4fe:	c303      	stmia	r3!, {r0, r1}
 801c500:	f9bd 3020 	ldrsh.w	r3, [sp, #32]
 801c504:	a807      	add	r0, sp, #28
 801c506:	f8bd 101c 	ldrh.w	r1, [sp, #28]
 801c50a:	2b13      	cmp	r3, #19
 801c50c:	440b      	add	r3, r1
 801c50e:	bfd8      	it	le
 801c510:	f9bd 201c 	ldrshle.w	r2, [sp, #28]
 801c514:	1a9b      	subs	r3, r3, r2
 801c516:	f8ad 201c 	strh.w	r2, [sp, #28]
 801c51a:	f8ad 3020 	strh.w	r3, [sp, #32]
 801c51e:	f7ff f863 	bl	801b5e8 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 801c522:	a807      	add	r0, sp, #28
 801c524:	f7fb fcf1 	bl	8017f0a <_ZNK8touchgfx4Rect7isEmptyEv>
 801c528:	2800      	cmp	r0, #0
 801c52a:	d199      	bne.n	801c460 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x260>
 801c52c:	f9bd c022 	ldrsh.w	ip, [sp, #34]	@ 0x22
 801c530:	4425      	add	r5, r4
 801c532:	f8d8 0000 	ldr.w	r0, [r8]
 801c536:	f1bc 0f14 	cmp.w	ip, #20
 801c53a:	f8bd 3020 	ldrh.w	r3, [sp, #32]
 801c53e:	f8d0 e000 	ldr.w	lr, [r0]
 801c542:	bfa8      	it	ge
 801c544:	f04f 0c14 	movge.w	ip, #20
 801c548:	f8bd 201e 	ldrh.w	r2, [sp, #30]
 801c54c:	f8bd 101c 	ldrh.w	r1, [sp, #28]
 801c550:	fa1f fc8c 	uxth.w	ip, ip
 801c554:	f8cd c000 	str.w	ip, [sp]
 801c558:	f8de a088 	ldr.w	sl, [lr, #136]	@ 0x88
 801c55c:	47d0      	blx	sl
 801c55e:	4682      	mov	sl, r0
 801c560:	f8ad 0022 	strh.w	r0, [sp, #34]	@ 0x22
 801c564:	a807      	add	r0, sp, #28
 801c566:	f7ff f825 	bl	801b5b4 <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERNS_4RectE>
 801c56a:	6823      	ldr	r3, [r4, #0]
 801c56c:	4620      	mov	r0, r4
 801c56e:	a907      	add	r1, sp, #28
 801c570:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 801c572:	4798      	blx	r3
 801c574:	f8b5 00ac 	ldrh.w	r0, [r5, #172]	@ 0xac
 801c578:	eba0 000a 	sub.w	r0, r0, sl
 801c57c:	b200      	sxth	r0, r0
 801c57e:	f8a5 00ac 	strh.w	r0, [r5, #172]	@ 0xac
 801c582:	2800      	cmp	r0, #0
 801c584:	f47f af6c 	bne.w	801c460 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x260>
 801c588:	b2b1      	uxth	r1, r6
 801c58a:	4648      	mov	r0, r9
 801c58c:	f7ff fa9a 	bl	801bac4 <_ZN8touchgfx6VectorINS_4RectELt8EE13quickRemoveAtEt>
 801c590:	e766      	b.n	801c460 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x260>
 801c592:	d10c      	bne.n	801c5ae <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x3ae>
 801c594:	f9b6 c0ac 	ldrsh.w	ip, [r6, #172]	@ 0xac
 801c598:	f9b9 60ac 	ldrsh.w	r6, [r9, #172]	@ 0xac
 801c59c:	45b4      	cmp	ip, r6
 801c59e:	bfb4      	ite	lt
 801c5a0:	4684      	movlt	ip, r0
 801c5a2:	46d4      	movge	ip, sl
 801c5a4:	f8b9 60ae 	ldrh.w	r6, [r9, #174]	@ 0xae
 801c5a8:	4433      	add	r3, r6
 801c5aa:	b21b      	sxth	r3, r3
 801c5ac:	e750      	b.n	801c450 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x250>
 801c5ae:	4575      	cmp	r5, lr
 801c5b0:	46d4      	mov	ip, sl
 801c5b2:	bfa8      	it	ge
 801c5b4:	4675      	movge	r5, lr
 801c5b6:	e74e      	b.n	801c456 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x256>
 801c5b8:	eb0b 0006 	add.w	r0, fp, r6
 801c5bc:	4426      	add	r6, r4
 801c5be:	f9b6 90ae 	ldrsh.w	r9, [r6, #174]	@ 0xae
 801c5c2:	f1b9 0f13 	cmp.w	r9, #19
 801c5c6:	bfdc      	itt	le
 801c5c8:	f8b6 50aa 	ldrhle.w	r5, [r6, #170]	@ 0xaa
 801c5cc:	444d      	addle	r5, r9
 801c5ce:	e9cd 1202 	strd	r1, r2, [sp, #8]
 801c5d2:	bfd8      	it	le
 801c5d4:	b22d      	sxthle	r5, r5
 801c5d6:	f7fb fc98 	bl	8017f0a <_ZNK8touchgfx4Rect7isEmptyEv>
 801c5da:	e9dd 1202 	ldrd	r1, r2, [sp, #8]
 801c5de:	2800      	cmp	r0, #0
 801c5e0:	f47f af16 	bne.w	801c410 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x210>
 801c5e4:	f9b6 c0aa 	ldrsh.w	ip, [r6, #170]	@ 0xaa
 801c5e8:	fa1f f989 	uxth.w	r9, r9
 801c5ec:	f8ad 0022 	strh.w	r0, [sp, #34]	@ 0x22
 801c5f0:	eba5 050c 	sub.w	r5, r5, ip
 801c5f4:	fa1f f28c 	uxth.w	r2, ip
 801c5f8:	f9b6 10a8 	ldrsh.w	r1, [r6, #168]	@ 0xa8
 801c5fc:	eb02 0009 	add.w	r0, r2, r9
 801c600:	2d14      	cmp	r5, #20
 801c602:	f9b6 30ac 	ldrsh.w	r3, [r6, #172]	@ 0xac
 801c606:	bfa8      	it	ge
 801c608:	2514      	movge	r5, #20
 801c60a:	b200      	sxth	r0, r0
 801c60c:	f8ad 101c 	strh.w	r1, [sp, #28]
 801c610:	b289      	uxth	r1, r1
 801c612:	fa1f fe85 	uxth.w	lr, r5
 801c616:	eba0 000c 	sub.w	r0, r0, ip
 801c61a:	f8ad c01e 	strh.w	ip, [sp, #30]
 801c61e:	4586      	cmp	lr, r0
 801c620:	f8d8 0000 	ldr.w	r0, [r8]
 801c624:	f8ad 3020 	strh.w	r3, [sp, #32]
 801c628:	b29b      	uxth	r3, r3
 801c62a:	bfb8      	it	lt
 801c62c:	46f1      	movlt	r9, lr
 801c62e:	6805      	ldr	r5, [r0, #0]
 801c630:	f8cd 9000 	str.w	r9, [sp]
 801c634:	f8d5 5088 	ldr.w	r5, [r5, #136]	@ 0x88
 801c638:	47a8      	blx	r5
 801c63a:	6823      	ldr	r3, [r4, #0]
 801c63c:	f8ad 0022 	strh.w	r0, [sp, #34]	@ 0x22
 801c640:	a907      	add	r1, sp, #28
 801c642:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 801c644:	4620      	mov	r0, r4
 801c646:	4798      	blx	r3
 801c648:	f8bd 1022 	ldrh.w	r1, [sp, #34]	@ 0x22
 801c64c:	f8b6 30ae 	ldrh.w	r3, [r6, #174]	@ 0xae
 801c650:	f8b6 20aa 	ldrh.w	r2, [r6, #170]	@ 0xaa
 801c654:	1a5b      	subs	r3, r3, r1
 801c656:	440a      	add	r2, r1
 801c658:	b21b      	sxth	r3, r3
 801c65a:	f8a6 20aa 	strh.w	r2, [r6, #170]	@ 0xaa
 801c65e:	f8a6 30ae 	strh.w	r3, [r6, #174]	@ 0xae
 801c662:	2b00      	cmp	r3, #0
 801c664:	f47f aecf 	bne.w	801c406 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x206>
 801c668:	fa1f f18a 	uxth.w	r1, sl
 801c66c:	4658      	mov	r0, fp
 801c66e:	f7ff fa29 	bl	801bac4 <_ZN8touchgfx6VectorINS_4RectELt8EE13quickRemoveAtEt>
 801c672:	e6c8      	b.n	801c406 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x206>
 801c674:	f8b4 30e8 	ldrh.w	r3, [r4, #232]	@ 0xe8
 801c678:	42ab      	cmp	r3, r5
 801c67a:	f67f aea0 	bls.w	801c3be <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x1be>
 801c67e:	eb04 02c5 	add.w	r2, r4, r5, lsl #3
 801c682:	ab07      	add	r3, sp, #28
 801c684:	f852 0fa8 	ldr.w	r0, [r2, #168]!
 801c688:	6851      	ldr	r1, [r2, #4]
 801c68a:	c303      	stmia	r3!, {r0, r1}
 801c68c:	a807      	add	r0, sp, #28
 801c68e:	f7fb fc3c 	bl	8017f0a <_ZNK8touchgfx4Rect7isEmptyEv>
 801c692:	b920      	cbnz	r0, 801c69e <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x49e>
 801c694:	6823      	ldr	r3, [r4, #0]
 801c696:	a907      	add	r1, sp, #28
 801c698:	4620      	mov	r0, r4
 801c69a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 801c69c:	4798      	blx	r3
 801c69e:	3501      	adds	r5, #1
 801c6a0:	b2ad      	uxth	r5, r5
 801c6a2:	e7e7      	b.n	801c674 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x474>

0801c6a4 <_GLOBAL__sub_I__ZN8touchgfx11Application8instanceE>:
 801c6a4:	4b03      	ldr	r3, [pc, #12]	@ (801c6b4 <_GLOBAL__sub_I__ZN8touchgfx11Application8instanceE+0x10>)
 801c6a6:	2200      	movs	r2, #0
 801c6a8:	801a      	strh	r2, [r3, #0]
 801c6aa:	805a      	strh	r2, [r3, #2]
 801c6ac:	809a      	strh	r2, [r3, #4]
 801c6ae:	80da      	strh	r2, [r3, #6]
 801c6b0:	4770      	bx	lr
 801c6b2:	bf00      	nop
 801c6b4:	2400b8c8 	.word	0x2400b8c8

0801c6b8 <_ZNK8touchgfx4Font17getStringWidthLTREhPKtSt9__va_list>:
 801c6b8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801c6bc:	b09d      	sub	sp, #116	@ 0x74
 801c6be:	4606      	mov	r6, r0
 801c6c0:	4614      	mov	r4, r2
 801c6c2:	468a      	mov	sl, r1
 801c6c4:	a803      	add	r0, sp, #12
 801c6c6:	461d      	mov	r5, r3
 801c6c8:	f000 fe48 	bl	801d35c <_ZN8touchgfx12TextProviderC1Ev>
 801c6cc:	6833      	ldr	r3, [r6, #0]
 801c6ce:	4630      	mov	r0, r6
 801c6d0:	f242 0b0b 	movw	fp, #8203	@ 0x200b
 801c6d4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 801c6d6:	4798      	blx	r3
 801c6d8:	6833      	ldr	r3, [r6, #0]
 801c6da:	4607      	mov	r7, r0
 801c6dc:	4630      	mov	r0, r6
 801c6de:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 801c6e0:	4798      	blx	r3
 801c6e2:	462a      	mov	r2, r5
 801c6e4:	2500      	movs	r5, #0
 801c6e6:	4621      	mov	r1, r4
 801c6e8:	9000      	str	r0, [sp, #0]
 801c6ea:	463b      	mov	r3, r7
 801c6ec:	462c      	mov	r4, r5
 801c6ee:	46a9      	mov	r9, r5
 801c6f0:	46a8      	mov	r8, r5
 801c6f2:	a803      	add	r0, sp, #12
 801c6f4:	f000 fe85 	bl	801d402 <_ZN8touchgfx12TextProvider10initializeEPKtSt9__va_listS2_PKNS_24FontContextualFormsTableE>
 801c6f8:	2300      	movs	r3, #0
 801c6fa:	9302      	str	r3, [sp, #8]
 801c6fc:	f64f 63ff 	movw	r3, #65279	@ 0xfeff
 801c700:	429c      	cmp	r4, r3
 801c702:	d002      	beq.n	801c70a <_ZNK8touchgfx4Font17getStringWidthLTREhPKtSt9__va_list+0x52>
 801c704:	455c      	cmp	r4, fp
 801c706:	bf18      	it	ne
 801c708:	4625      	movne	r5, r4
 801c70a:	ab02      	add	r3, sp, #8
 801c70c:	4632      	mov	r2, r6
 801c70e:	4651      	mov	r1, sl
 801c710:	a803      	add	r0, sp, #12
 801c712:	f001 f977 	bl	801da04 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE>
 801c716:	4604      	mov	r4, r0
 801c718:	b108      	cbz	r0, 801c71e <_ZNK8touchgfx4Font17getStringWidthLTREhPKtSt9__va_list+0x66>
 801c71a:	280a      	cmp	r0, #10
 801c71c:	d10a      	bne.n	801c734 <_ZNK8touchgfx4Font17getStringWidthLTREhPKtSt9__va_list+0x7c>
 801c71e:	45c1      	cmp	r9, r8
 801c720:	bf38      	it	cc
 801c722:	46c1      	movcc	r9, r8
 801c724:	f04f 0800 	mov.w	r8, #0
 801c728:	2c00      	cmp	r4, #0
 801c72a:	d1e5      	bne.n	801c6f8 <_ZNK8touchgfx4Font17getStringWidthLTREhPKtSt9__va_list+0x40>
 801c72c:	4648      	mov	r0, r9
 801c72e:	b01d      	add	sp, #116	@ 0x74
 801c730:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801c734:	9a02      	ldr	r2, [sp, #8]
 801c736:	2a00      	cmp	r2, #0
 801c738:	d0de      	beq.n	801c6f8 <_ZNK8touchgfx4Font17getStringWidthLTREhPKtSt9__va_list+0x40>
 801c73a:	7b57      	ldrb	r7, [r2, #13]
 801c73c:	4629      	mov	r1, r5
 801c73e:	6833      	ldr	r3, [r6, #0]
 801c740:	007f      	lsls	r7, r7, #1
 801c742:	8894      	ldrh	r4, [r2, #4]
 801c744:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 801c746:	f407 7080 	and.w	r0, r7, #256	@ 0x100
 801c74a:	7a97      	ldrb	r7, [r2, #10]
 801c74c:	4307      	orrs	r7, r0
 801c74e:	4630      	mov	r0, r6
 801c750:	4798      	blx	r3
 801c752:	4438      	add	r0, r7
 801c754:	4480      	add	r8, r0
 801c756:	fa1f f888 	uxth.w	r8, r8
 801c75a:	e7e5      	b.n	801c728 <_ZNK8touchgfx4Font17getStringWidthLTREhPKtSt9__va_list+0x70>

0801c75c <_ZNK8touchgfx4Font12getCharWidthEt>:
 801c75c:	b508      	push	{r3, lr}
 801c75e:	6803      	ldr	r3, [r0, #0]
 801c760:	68db      	ldr	r3, [r3, #12]
 801c762:	4798      	blx	r3
 801c764:	b128      	cbz	r0, 801c772 <_ZNK8touchgfx4Font12getCharWidthEt+0x16>
 801c766:	7b43      	ldrb	r3, [r0, #13]
 801c768:	7a80      	ldrb	r0, [r0, #10]
 801c76a:	005b      	lsls	r3, r3, #1
 801c76c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 801c770:	4318      	orrs	r0, r3
 801c772:	bd08      	pop	{r3, pc}

0801c774 <_ZNK8touchgfx4Font16getMaxTextHeightEPKtz>:
 801c774:	b40e      	push	{r1, r2, r3}
 801c776:	b5f0      	push	{r4, r5, r6, r7, lr}
 801c778:	b09e      	sub	sp, #120	@ 0x78
 801c77a:	4605      	mov	r5, r0
 801c77c:	ab23      	add	r3, sp, #140	@ 0x8c
 801c77e:	a805      	add	r0, sp, #20
 801c780:	f853 4b04 	ldr.w	r4, [r3], #4
 801c784:	9303      	str	r3, [sp, #12]
 801c786:	f000 fde9 	bl	801d35c <_ZN8touchgfx12TextProviderC1Ev>
 801c78a:	682b      	ldr	r3, [r5, #0]
 801c78c:	4628      	mov	r0, r5
 801c78e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 801c790:	4798      	blx	r3
 801c792:	682b      	ldr	r3, [r5, #0]
 801c794:	4606      	mov	r6, r0
 801c796:	4628      	mov	r0, r5
 801c798:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 801c79a:	4798      	blx	r3
 801c79c:	4633      	mov	r3, r6
 801c79e:	4621      	mov	r1, r4
 801c7a0:	ae1e      	add	r6, sp, #120	@ 0x78
 801c7a2:	2400      	movs	r4, #0
 801c7a4:	9000      	str	r0, [sp, #0]
 801c7a6:	9a03      	ldr	r2, [sp, #12]
 801c7a8:	a805      	add	r0, sp, #20
 801c7aa:	f000 fe2a 	bl	801d402 <_ZN8touchgfx12TextProvider10initializeEPKtSt9__va_listS2_PKNS_24FontContextualFormsTableE>
 801c7ae:	f846 4d68 	str.w	r4, [r6, #-104]!
 801c7b2:	462a      	mov	r2, r5
 801c7b4:	4633      	mov	r3, r6
 801c7b6:	4621      	mov	r1, r4
 801c7b8:	a805      	add	r0, sp, #20
 801c7ba:	f001 f923 	bl	801da04 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE>
 801c7be:	b300      	cbz	r0, 801c802 <_ZNK8touchgfx4Font16getMaxTextHeightEPKtz+0x8e>
 801c7c0:	280a      	cmp	r0, #10
 801c7c2:	d01a      	beq.n	801c7fa <_ZNK8touchgfx4Font16getMaxTextHeightEPKtz+0x86>
 801c7c4:	9f04      	ldr	r7, [sp, #16]
 801c7c6:	b1c7      	cbz	r7, 801c7fa <_ZNK8touchgfx4Font16getMaxTextHeightEPKtz+0x86>
 801c7c8:	7b78      	ldrb	r0, [r7, #13]
 801c7ca:	7a3b      	ldrb	r3, [r7, #8]
 801c7cc:	00c1      	lsls	r1, r0, #3
 801c7ce:	88aa      	ldrh	r2, [r5, #4]
 801c7d0:	f401 7180 	and.w	r1, r1, #256	@ 0x100
 801c7d4:	4319      	orrs	r1, r3
 801c7d6:	0643      	lsls	r3, r0, #25
 801c7d8:	ea4f 1000 	mov.w	r0, r0, lsl #4
 801c7dc:	bf48      	it	mi
 801c7de:	f5a1 7300 	submi.w	r3, r1, #512	@ 0x200
 801c7e2:	f400 7080 	and.w	r0, r0, #256	@ 0x100
 801c7e6:	bf48      	it	mi
 801c7e8:	b219      	sxthmi	r1, r3
 801c7ea:	79fb      	ldrb	r3, [r7, #7]
 801c7ec:	4303      	orrs	r3, r0
 801c7ee:	4413      	add	r3, r2
 801c7f0:	1a5b      	subs	r3, r3, r1
 801c7f2:	b29b      	uxth	r3, r3
 801c7f4:	42a3      	cmp	r3, r4
 801c7f6:	bfc8      	it	gt
 801c7f8:	b21c      	sxthgt	r4, r3
 801c7fa:	4633      	mov	r3, r6
 801c7fc:	462a      	mov	r2, r5
 801c7fe:	2100      	movs	r1, #0
 801c800:	e7da      	b.n	801c7b8 <_ZNK8touchgfx4Font16getMaxTextHeightEPKtz+0x44>
 801c802:	b2a0      	uxth	r0, r4
 801c804:	b01e      	add	sp, #120	@ 0x78
 801c806:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 801c80a:	b003      	add	sp, #12
 801c80c:	4770      	bx	lr

0801c80e <_ZNK8touchgfx4Font16getNumberOfLinesEPKtz>:
 801c80e:	b40e      	push	{r1, r2, r3}
 801c810:	b570      	push	{r4, r5, r6, lr}
 801c812:	b09d      	sub	sp, #116	@ 0x74
 801c814:	4604      	mov	r4, r0
 801c816:	ab21      	add	r3, sp, #132	@ 0x84
 801c818:	a803      	add	r0, sp, #12
 801c81a:	f853 5b04 	ldr.w	r5, [r3], #4
 801c81e:	9302      	str	r3, [sp, #8]
 801c820:	f000 fd9c 	bl	801d35c <_ZN8touchgfx12TextProviderC1Ev>
 801c824:	6823      	ldr	r3, [r4, #0]
 801c826:	4620      	mov	r0, r4
 801c828:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 801c82a:	4798      	blx	r3
 801c82c:	6823      	ldr	r3, [r4, #0]
 801c82e:	4606      	mov	r6, r0
 801c830:	4620      	mov	r0, r4
 801c832:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 801c834:	2401      	movs	r4, #1
 801c836:	4798      	blx	r3
 801c838:	4633      	mov	r3, r6
 801c83a:	9000      	str	r0, [sp, #0]
 801c83c:	4629      	mov	r1, r5
 801c83e:	9a02      	ldr	r2, [sp, #8]
 801c840:	a803      	add	r0, sp, #12
 801c842:	f000 fdde 	bl	801d402 <_ZN8touchgfx12TextProvider10initializeEPKtSt9__va_listS2_PKNS_24FontContextualFormsTableE>
 801c846:	a803      	add	r0, sp, #12
 801c848:	f001 f9d6 	bl	801dbf8 <_ZN8touchgfx12TextProvider11getNextCharEv>
 801c84c:	b2a3      	uxth	r3, r4
 801c84e:	b138      	cbz	r0, 801c860 <_ZNK8touchgfx4Font16getNumberOfLinesEPKtz+0x52>
 801c850:	280a      	cmp	r0, #10
 801c852:	a803      	add	r0, sp, #12
 801c854:	bf04      	itt	eq
 801c856:	3301      	addeq	r3, #1
 801c858:	b21c      	sxtheq	r4, r3
 801c85a:	f001 f9cd 	bl	801dbf8 <_ZN8touchgfx12TextProvider11getNextCharEv>
 801c85e:	e7f5      	b.n	801c84c <_ZNK8touchgfx4Font16getNumberOfLinesEPKtz+0x3e>
 801c860:	4618      	mov	r0, r3
 801c862:	b01d      	add	sp, #116	@ 0x74
 801c864:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 801c868:	b003      	add	sp, #12
 801c86a:	4770      	bx	lr

0801c86c <_ZNK8touchgfx4Font15getSpacingAboveEPKtz>:
 801c86c:	b40e      	push	{r1, r2, r3}
 801c86e:	b5f0      	push	{r4, r5, r6, r7, lr}
 801c870:	b09e      	sub	sp, #120	@ 0x78
 801c872:	4604      	mov	r4, r0
 801c874:	ab23      	add	r3, sp, #140	@ 0x8c
 801c876:	a805      	add	r0, sp, #20
 801c878:	f853 5b04 	ldr.w	r5, [r3], #4
 801c87c:	9303      	str	r3, [sp, #12]
 801c87e:	f000 fd6d 	bl	801d35c <_ZN8touchgfx12TextProviderC1Ev>
 801c882:	6823      	ldr	r3, [r4, #0]
 801c884:	4620      	mov	r0, r4
 801c886:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 801c888:	4798      	blx	r3
 801c88a:	6823      	ldr	r3, [r4, #0]
 801c88c:	4606      	mov	r6, r0
 801c88e:	4620      	mov	r0, r4
 801c890:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 801c892:	4798      	blx	r3
 801c894:	4633      	mov	r3, r6
 801c896:	4629      	mov	r1, r5
 801c898:	9000      	str	r0, [sp, #0]
 801c89a:	9a03      	ldr	r2, [sp, #12]
 801c89c:	a805      	add	r0, sp, #20
 801c89e:	f000 fdb0 	bl	801d402 <_ZN8touchgfx12TextProvider10initializeEPKtSt9__va_listS2_PKNS_24FontContextualFormsTableE>
 801c8a2:	ad1e      	add	r5, sp, #120	@ 0x78
 801c8a4:	2100      	movs	r1, #0
 801c8a6:	26ff      	movs	r6, #255	@ 0xff
 801c8a8:	4622      	mov	r2, r4
 801c8aa:	a805      	add	r0, sp, #20
 801c8ac:	f845 1d68 	str.w	r1, [r5, #-104]!
 801c8b0:	462b      	mov	r3, r5
 801c8b2:	f001 f8a7 	bl	801da04 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE>
 801c8b6:	b1d8      	cbz	r0, 801c8f0 <_ZNK8touchgfx4Font15getSpacingAboveEPKtz+0x84>
 801c8b8:	280a      	cmp	r0, #10
 801c8ba:	d012      	beq.n	801c8e2 <_ZNK8touchgfx4Font15getSpacingAboveEPKtz+0x76>
 801c8bc:	9804      	ldr	r0, [sp, #16]
 801c8be:	b180      	cbz	r0, 801c8e2 <_ZNK8touchgfx4Font15getSpacingAboveEPKtz+0x76>
 801c8c0:	7b47      	ldrb	r7, [r0, #13]
 801c8c2:	7922      	ldrb	r2, [r4, #4]
 801c8c4:	00fb      	lsls	r3, r7, #3
 801c8c6:	f403 7180 	and.w	r1, r3, #256	@ 0x100
 801c8ca:	7a03      	ldrb	r3, [r0, #8]
 801c8cc:	430b      	orrs	r3, r1
 801c8ce:	0679      	lsls	r1, r7, #25
 801c8d0:	bf44      	itt	mi
 801c8d2:	f5a3 7300 	submi.w	r3, r3, #512	@ 0x200
 801c8d6:	b21b      	sxthmi	r3, r3
 801c8d8:	1ad3      	subs	r3, r2, r3
 801c8da:	b2db      	uxtb	r3, r3
 801c8dc:	429e      	cmp	r6, r3
 801c8de:	bf28      	it	cs
 801c8e0:	461e      	movcs	r6, r3
 801c8e2:	462b      	mov	r3, r5
 801c8e4:	4622      	mov	r2, r4
 801c8e6:	2100      	movs	r1, #0
 801c8e8:	a805      	add	r0, sp, #20
 801c8ea:	f001 f88b 	bl	801da04 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE>
 801c8ee:	e7e2      	b.n	801c8b6 <_ZNK8touchgfx4Font15getSpacingAboveEPKtz+0x4a>
 801c8f0:	4630      	mov	r0, r6
 801c8f2:	b01e      	add	sp, #120	@ 0x78
 801c8f4:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 801c8f8:	b003      	add	sp, #12
 801c8fa:	4770      	bx	lr

0801c8fc <_ZNK8touchgfx8Drawable10invalidateEv>:
 801c8fc:	b513      	push	{r0, r1, r4, lr}
 801c8fe:	6803      	ldr	r3, [r0, #0]
 801c900:	2400      	movs	r4, #0
 801c902:	f9b0 1008 	ldrsh.w	r1, [r0, #8]
 801c906:	f9b0 200a 	ldrsh.w	r2, [r0, #10]
 801c90a:	f8ad 1004 	strh.w	r1, [sp, #4]
 801c90e:	4669      	mov	r1, sp
 801c910:	691b      	ldr	r3, [r3, #16]
 801c912:	9400      	str	r4, [sp, #0]
 801c914:	f8ad 2006 	strh.w	r2, [sp, #6]
 801c918:	4798      	blx	r3
 801c91a:	b002      	add	sp, #8
 801c91c:	bd10      	pop	{r4, pc}

0801c91e <_ZN8touchgfx8Drawable20getSolidRectAbsoluteEv>:
 801c91e:	b538      	push	{r3, r4, r5, lr}
 801c920:	680b      	ldr	r3, [r1, #0]
 801c922:	460c      	mov	r4, r1
 801c924:	4605      	mov	r5, r0
 801c926:	68db      	ldr	r3, [r3, #12]
 801c928:	4798      	blx	r3
 801c92a:	6823      	ldr	r3, [r4, #0]
 801c92c:	4620      	mov	r0, r4
 801c92e:	4629      	mov	r1, r5
 801c930:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 801c932:	4798      	blx	r3
 801c934:	4628      	mov	r0, r5
 801c936:	bd38      	pop	{r3, r4, r5, pc}

0801c938 <_ZNK8touchgfx8Drawable23translateRectToAbsoluteERNS_4RectE>:
 801c938:	b410      	push	{r4}
 801c93a:	880a      	ldrh	r2, [r1, #0]
 801c93c:	8884      	ldrh	r4, [r0, #4]
 801c93e:	4422      	add	r2, r4
 801c940:	800a      	strh	r2, [r1, #0]
 801c942:	884a      	ldrh	r2, [r1, #2]
 801c944:	88c4      	ldrh	r4, [r0, #6]
 801c946:	4422      	add	r2, r4
 801c948:	804a      	strh	r2, [r1, #2]
 801c94a:	6940      	ldr	r0, [r0, #20]
 801c94c:	b120      	cbz	r0, 801c958 <_ZNK8touchgfx8Drawable23translateRectToAbsoluteERNS_4RectE+0x20>
 801c94e:	6803      	ldr	r3, [r0, #0]
 801c950:	f85d 4b04 	ldr.w	r4, [sp], #4
 801c954:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 801c956:	4718      	bx	r3
 801c958:	f85d 4b04 	ldr.w	r4, [sp], #4
 801c95c:	4770      	bx	lr

0801c95e <_ZNK8touchgfx8Drawable14getVisibleRectERNS_4RectE>:
 801c95e:	b570      	push	{r4, r5, r6, lr}
 801c960:	8882      	ldrh	r2, [r0, #4]
 801c962:	460c      	mov	r4, r1
 801c964:	880b      	ldrh	r3, [r1, #0]
 801c966:	4605      	mov	r5, r0
 801c968:	4413      	add	r3, r2
 801c96a:	800b      	strh	r3, [r1, #0]
 801c96c:	884b      	ldrh	r3, [r1, #2]
 801c96e:	88c2      	ldrh	r2, [r0, #6]
 801c970:	4413      	add	r3, r2
 801c972:	804b      	strh	r3, [r1, #2]
 801c974:	1d01      	adds	r1, r0, #4
 801c976:	4620      	mov	r0, r4
 801c978:	f7fb fa84 	bl	8017e84 <_ZN8touchgfx4RectaNERKS0_>
 801c97c:	f9b4 3004 	ldrsh.w	r3, [r4, #4]
 801c980:	2b00      	cmp	r3, #0
 801c982:	dd0b      	ble.n	801c99c <_ZNK8touchgfx8Drawable14getVisibleRectERNS_4RectE+0x3e>
 801c984:	f9b4 3006 	ldrsh.w	r3, [r4, #6]
 801c988:	2b00      	cmp	r3, #0
 801c98a:	dd07      	ble.n	801c99c <_ZNK8touchgfx8Drawable14getVisibleRectERNS_4RectE+0x3e>
 801c98c:	6968      	ldr	r0, [r5, #20]
 801c98e:	b128      	cbz	r0, 801c99c <_ZNK8touchgfx8Drawable14getVisibleRectERNS_4RectE+0x3e>
 801c990:	6803      	ldr	r3, [r0, #0]
 801c992:	4621      	mov	r1, r4
 801c994:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801c996:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 801c99a:	4718      	bx	r3
 801c99c:	bd70      	pop	{r4, r5, r6, pc}
	...

0801c9a0 <_ZNK8touchgfx8Drawable14invalidateRectERNS_4RectE>:
 801c9a0:	b570      	push	{r4, r5, r6, lr}
 801c9a2:	8882      	ldrh	r2, [r0, #4]
 801c9a4:	460c      	mov	r4, r1
 801c9a6:	880b      	ldrh	r3, [r1, #0]
 801c9a8:	4605      	mov	r5, r0
 801c9aa:	4413      	add	r3, r2
 801c9ac:	800b      	strh	r3, [r1, #0]
 801c9ae:	884b      	ldrh	r3, [r1, #2]
 801c9b0:	88c2      	ldrh	r2, [r0, #6]
 801c9b2:	4413      	add	r3, r2
 801c9b4:	804b      	strh	r3, [r1, #2]
 801c9b6:	1d01      	adds	r1, r0, #4
 801c9b8:	4620      	mov	r0, r4
 801c9ba:	f7fb fa63 	bl	8017e84 <_ZN8touchgfx4RectaNERKS0_>
 801c9be:	f9b4 3004 	ldrsh.w	r3, [r4, #4]
 801c9c2:	2b00      	cmp	r3, #0
 801c9c4:	dd15      	ble.n	801c9f2 <_ZNK8touchgfx8Drawable14invalidateRectERNS_4RectE+0x52>
 801c9c6:	f9b4 3006 	ldrsh.w	r3, [r4, #6]
 801c9ca:	2b00      	cmp	r3, #0
 801c9cc:	dd11      	ble.n	801c9f2 <_ZNK8touchgfx8Drawable14invalidateRectERNS_4RectE+0x52>
 801c9ce:	6968      	ldr	r0, [r5, #20]
 801c9d0:	b128      	cbz	r0, 801c9de <_ZNK8touchgfx8Drawable14invalidateRectERNS_4RectE+0x3e>
 801c9d2:	6803      	ldr	r3, [r0, #0]
 801c9d4:	691b      	ldr	r3, [r3, #16]
 801c9d6:	4621      	mov	r1, r4
 801c9d8:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 801c9dc:	4718      	bx	r3
 801c9de:	4b05      	ldr	r3, [pc, #20]	@ (801c9f4 <_ZNK8touchgfx8Drawable14invalidateRectERNS_4RectE+0x54>)
 801c9e0:	681b      	ldr	r3, [r3, #0]
 801c9e2:	3304      	adds	r3, #4
 801c9e4:	429d      	cmp	r5, r3
 801c9e6:	d104      	bne.n	801c9f2 <_ZNK8touchgfx8Drawable14invalidateRectERNS_4RectE+0x52>
 801c9e8:	f7fe ffbe 	bl	801b968 <_ZN8touchgfx11Application11getInstanceEv>
 801c9ec:	6803      	ldr	r3, [r0, #0]
 801c9ee:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 801c9f0:	e7f1      	b.n	801c9d6 <_ZNK8touchgfx8Drawable14invalidateRectERNS_4RectE+0x36>
 801c9f2:	bd70      	pop	{r4, r5, r6, pc}
 801c9f4:	2400b8c0 	.word	0x2400b8c0

0801c9f8 <_ZN8touchgfx8Drawable12moveRelativeEss>:
 801c9f8:	b570      	push	{r4, r5, r6, lr}
 801c9fa:	4604      	mov	r4, r0
 801c9fc:	4616      	mov	r6, r2
 801c9fe:	460d      	mov	r5, r1
 801ca00:	b901      	cbnz	r1, 801ca04 <_ZN8touchgfx8Drawable12moveRelativeEss+0xc>
 801ca02:	b192      	cbz	r2, 801ca2a <_ZN8touchgfx8Drawable12moveRelativeEss+0x32>
 801ca04:	6823      	ldr	r3, [r4, #0]
 801ca06:	4620      	mov	r0, r4
 801ca08:	695b      	ldr	r3, [r3, #20]
 801ca0a:	4798      	blx	r3
 801ca0c:	88e2      	ldrh	r2, [r4, #6]
 801ca0e:	88a1      	ldrh	r1, [r4, #4]
 801ca10:	4620      	mov	r0, r4
 801ca12:	4432      	add	r2, r6
 801ca14:	4429      	add	r1, r5
 801ca16:	b212      	sxth	r2, r2
 801ca18:	b209      	sxth	r1, r1
 801ca1a:	f7e7 faab 	bl	8003f74 <_ZN8touchgfx8Drawable5setXYEss>
 801ca1e:	6823      	ldr	r3, [r4, #0]
 801ca20:	4620      	mov	r0, r4
 801ca22:	695b      	ldr	r3, [r3, #20]
 801ca24:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 801ca28:	4718      	bx	r3
 801ca2a:	bd70      	pop	{r4, r5, r6, pc}

0801ca2c <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>:
 801ca2c:	b510      	push	{r4, lr}
 801ca2e:	2300      	movs	r3, #0
 801ca30:	4604      	mov	r4, r0
 801ca32:	4608      	mov	r0, r1
 801ca34:	f9b1 1008 	ldrsh.w	r1, [r1, #8]
 801ca38:	8023      	strh	r3, [r4, #0]
 801ca3a:	f9b0 200a 	ldrsh.w	r2, [r0, #10]
 801ca3e:	8063      	strh	r3, [r4, #2]
 801ca40:	6803      	ldr	r3, [r0, #0]
 801ca42:	80a1      	strh	r1, [r4, #4]
 801ca44:	4621      	mov	r1, r4
 801ca46:	80e2      	strh	r2, [r4, #6]
 801ca48:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 801ca4a:	4798      	blx	r3
 801ca4c:	4620      	mov	r0, r4
 801ca4e:	bd10      	pop	{r4, pc}

0801ca50 <_ZN8touchgfx9ConstFontC1EPKNS_9GlyphNodeEtthhhhhtt>:
 801ca50:	b530      	push	{r4, r5, lr}
 801ca52:	8083      	strh	r3, [r0, #4]
 801ca54:	f89d 300c 	ldrb.w	r3, [sp, #12]
 801ca58:	f89d 5010 	ldrb.w	r5, [sp, #16]
 801ca5c:	7183      	strb	r3, [r0, #6]
 801ca5e:	79c3      	ldrb	r3, [r0, #7]
 801ca60:	6101      	str	r1, [r0, #16]
 801ca62:	f365 0306 	bfi	r3, r5, #0, #7
 801ca66:	f89d 5014 	ldrb.w	r5, [sp, #20]
 801ca6a:	8282      	strh	r2, [r0, #20]
 801ca6c:	f365 13c7 	bfi	r3, r5, #7, #1
 801ca70:	71c3      	strb	r3, [r0, #7]
 801ca72:	f89d 3018 	ldrb.w	r3, [sp, #24]
 801ca76:	7203      	strb	r3, [r0, #8]
 801ca78:	f89d 301c 	ldrb.w	r3, [sp, #28]
 801ca7c:	7243      	strb	r3, [r0, #9]
 801ca7e:	f8bd 3020 	ldrh.w	r3, [sp, #32]
 801ca82:	8143      	strh	r3, [r0, #10]
 801ca84:	f8bd 3024 	ldrh.w	r3, [sp, #36]	@ 0x24
 801ca88:	8183      	strh	r3, [r0, #12]
 801ca8a:	4b01      	ldr	r3, [pc, #4]	@ (801ca90 <_ZN8touchgfx9ConstFontC1EPKNS_9GlyphNodeEtthhhhhtt+0x40>)
 801ca8c:	6003      	str	r3, [r0, #0]
 801ca8e:	bd30      	pop	{r4, r5, pc}
 801ca90:	0802f2f8 	.word	0x0802f2f8

0801ca94 <_ZNK8touchgfx9ConstFont4findEt>:
 801ca94:	b5f0      	push	{r4, r5, r6, r7, lr}
 801ca96:	6904      	ldr	r4, [r0, #16]
 801ca98:	b3bc      	cbz	r4, 801cb0a <_ZNK8touchgfx9ConstFont4findEt+0x76>
 801ca9a:	88a3      	ldrh	r3, [r4, #4]
 801ca9c:	8a82      	ldrh	r2, [r0, #20]
 801ca9e:	1acb      	subs	r3, r1, r3
 801caa0:	f102 32ff 	add.w	r2, r2, #4294967295
 801caa4:	d431      	bmi.n	801cb0a <_ZNK8touchgfx9ConstFont4findEt+0x76>
 801caa6:	4293      	cmp	r3, r2
 801caa8:	dd0c      	ble.n	801cac4 <_ZNK8touchgfx9ConstFont4findEt+0x30>
 801caaa:	230e      	movs	r3, #14
 801caac:	fb03 4302 	mla	r3, r3, r2, r4
 801cab0:	889b      	ldrh	r3, [r3, #4]
 801cab2:	1a5b      	subs	r3, r3, r1
 801cab4:	1ad3      	subs	r3, r2, r3
 801cab6:	429a      	cmp	r2, r3
 801cab8:	db27      	blt.n	801cb0a <_ZNK8touchgfx9ConstFont4findEt+0x76>
 801caba:	2b00      	cmp	r3, #0
 801cabc:	bfbc      	itt	lt
 801cabe:	2302      	movlt	r3, #2
 801cac0:	fb92 f3f3 	sdivlt	r3, r2, r3
 801cac4:	2500      	movs	r5, #0
 801cac6:	260e      	movs	r6, #14
 801cac8:	4295      	cmp	r5, r2
 801caca:	dc1e      	bgt.n	801cb0a <_ZNK8touchgfx9ConstFont4findEt+0x76>
 801cacc:	fb06 4003 	mla	r0, r6, r3, r4
 801cad0:	8887      	ldrh	r7, [r0, #4]
 801cad2:	42b9      	cmp	r1, r7
 801cad4:	d01a      	beq.n	801cb0c <_ZNK8touchgfx9ConstFont4findEt+0x78>
 801cad6:	d20d      	bcs.n	801caf4 <_ZNK8touchgfx9ConstFont4findEt+0x60>
 801cad8:	1e5a      	subs	r2, r3, #1
 801cada:	4295      	cmp	r5, r2
 801cadc:	dc15      	bgt.n	801cb0a <_ZNK8touchgfx9ConstFont4findEt+0x76>
 801cade:	f830 3c0a 	ldrh.w	r3, [r0, #-10]
 801cae2:	1a5b      	subs	r3, r3, r1
 801cae4:	1ad3      	subs	r3, r2, r3
 801cae6:	429a      	cmp	r2, r3
 801cae8:	db0f      	blt.n	801cb0a <_ZNK8touchgfx9ConstFont4findEt+0x76>
 801caea:	429d      	cmp	r5, r3
 801caec:	ddec      	ble.n	801cac8 <_ZNK8touchgfx9ConstFont4findEt+0x34>
 801caee:	1953      	adds	r3, r2, r5
 801caf0:	105b      	asrs	r3, r3, #1
 801caf2:	e7e9      	b.n	801cac8 <_ZNK8touchgfx9ConstFont4findEt+0x34>
 801caf4:	1c5d      	adds	r5, r3, #1
 801caf6:	42aa      	cmp	r2, r5
 801caf8:	db07      	blt.n	801cb0a <_ZNK8touchgfx9ConstFont4findEt+0x76>
 801cafa:	8a43      	ldrh	r3, [r0, #18]
 801cafc:	1acb      	subs	r3, r1, r3
 801cafe:	442b      	add	r3, r5
 801cb00:	429d      	cmp	r5, r3
 801cb02:	dc02      	bgt.n	801cb0a <_ZNK8touchgfx9ConstFont4findEt+0x76>
 801cb04:	429a      	cmp	r2, r3
 801cb06:	dadf      	bge.n	801cac8 <_ZNK8touchgfx9ConstFont4findEt+0x34>
 801cb08:	e7f1      	b.n	801caee <_ZNK8touchgfx9ConstFont4findEt+0x5a>
 801cb0a:	2000      	movs	r0, #0
 801cb0c:	bdf0      	pop	{r4, r5, r6, r7, pc}

0801cb0e <_ZNK8touchgfx9ConstFont8getGlyphEtRPKhRh>:
 801cb0e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801cb10:	4604      	mov	r4, r0
 801cb12:	4617      	mov	r7, r2
 801cb14:	461e      	mov	r6, r3
 801cb16:	b911      	cbnz	r1, 801cb1e <_ZNK8touchgfx9ConstFont8getGlyphEtRPKhRh+0x10>
 801cb18:	2500      	movs	r5, #0
 801cb1a:	4628      	mov	r0, r5
 801cb1c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801cb1e:	290a      	cmp	r1, #10
 801cb20:	d0fa      	beq.n	801cb18 <_ZNK8touchgfx9ConstFont8getGlyphEtRPKhRh+0xa>
 801cb22:	f64f 62ff 	movw	r2, #65279	@ 0xfeff
 801cb26:	4291      	cmp	r1, r2
 801cb28:	d0f6      	beq.n	801cb18 <_ZNK8touchgfx9ConstFont8getGlyphEtRPKhRh+0xa>
 801cb2a:	f242 020b 	movw	r2, #8203	@ 0x200b
 801cb2e:	4291      	cmp	r1, r2
 801cb30:	d0f2      	beq.n	801cb18 <_ZNK8touchgfx9ConstFont8getGlyphEtRPKhRh+0xa>
 801cb32:	f7ff ffaf 	bl	801ca94 <_ZNK8touchgfx9ConstFont4findEt>
 801cb36:	4605      	mov	r5, r0
 801cb38:	b950      	cbnz	r0, 801cb50 <_ZNK8touchgfx9ConstFont8getGlyphEtRPKhRh+0x42>
 801cb3a:	6823      	ldr	r3, [r4, #0]
 801cb3c:	4620      	mov	r0, r4
 801cb3e:	691b      	ldr	r3, [r3, #16]
 801cb40:	4798      	blx	r3
 801cb42:	4601      	mov	r1, r0
 801cb44:	4620      	mov	r0, r4
 801cb46:	f7ff ffa5 	bl	801ca94 <_ZNK8touchgfx9ConstFont4findEt>
 801cb4a:	4605      	mov	r5, r0
 801cb4c:	2800      	cmp	r0, #0
 801cb4e:	d0e3      	beq.n	801cb18 <_ZNK8touchgfx9ConstFont8getGlyphEtRPKhRh+0xa>
 801cb50:	6823      	ldr	r3, [r4, #0]
 801cb52:	4629      	mov	r1, r5
 801cb54:	4620      	mov	r0, r4
 801cb56:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 801cb58:	4798      	blx	r3
 801cb5a:	6038      	str	r0, [r7, #0]
 801cb5c:	6823      	ldr	r3, [r4, #0]
 801cb5e:	4620      	mov	r0, r4
 801cb60:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 801cb62:	4798      	blx	r3
 801cb64:	7030      	strb	r0, [r6, #0]
 801cb66:	e7d8      	b.n	801cb1a <_ZNK8touchgfx9ConstFont8getGlyphEtRPKhRh+0xc>

0801cb68 <_ZN8touchgfx4clzuEm>:
 801cb68:	4603      	mov	r3, r0
 801cb6a:	b1c8      	cbz	r0, 801cba0 <_ZN8touchgfx4clzuEm+0x38>
 801cb6c:	0c02      	lsrs	r2, r0, #16
 801cb6e:	0412      	lsls	r2, r2, #16
 801cb70:	b9a2      	cbnz	r2, 801cb9c <_ZN8touchgfx4clzuEm+0x34>
 801cb72:	0403      	lsls	r3, r0, #16
 801cb74:	2010      	movs	r0, #16
 801cb76:	f013 4f7f 	tst.w	r3, #4278190080	@ 0xff000000
 801cb7a:	bf04      	itt	eq
 801cb7c:	021b      	lsleq	r3, r3, #8
 801cb7e:	3008      	addeq	r0, #8
 801cb80:	f013 4f70 	tst.w	r3, #4026531840	@ 0xf0000000
 801cb84:	bf04      	itt	eq
 801cb86:	011b      	lsleq	r3, r3, #4
 801cb88:	3004      	addeq	r0, #4
 801cb8a:	f013 4f40 	tst.w	r3, #3221225472	@ 0xc0000000
 801cb8e:	bf04      	itt	eq
 801cb90:	009b      	lsleq	r3, r3, #2
 801cb92:	3002      	addeq	r0, #2
 801cb94:	2b00      	cmp	r3, #0
 801cb96:	db04      	blt.n	801cba2 <_ZN8touchgfx4clzuEm+0x3a>
 801cb98:	3001      	adds	r0, #1
 801cb9a:	4770      	bx	lr
 801cb9c:	2000      	movs	r0, #0
 801cb9e:	e7ea      	b.n	801cb76 <_ZN8touchgfx4clzuEm+0xe>
 801cba0:	2020      	movs	r0, #32
 801cba2:	4770      	bx	lr

0801cba4 <_ZN8touchgfx7muldivuEmmmRm>:
 801cba4:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801cba8:	4680      	mov	r8, r0
 801cbaa:	460f      	mov	r7, r1
 801cbac:	4615      	mov	r5, r2
 801cbae:	461e      	mov	r6, r3
 801cbb0:	f7ff ffda 	bl	801cb68 <_ZN8touchgfx4clzuEm>
 801cbb4:	b998      	cbnz	r0, 801cbde <_ZN8touchgfx7muldivuEmmmRm+0x3a>
 801cbb6:	4608      	mov	r0, r1
 801cbb8:	f7ff ffd6 	bl	801cb68 <_ZN8touchgfx4clzuEm>
 801cbbc:	2800      	cmp	r0, #0
 801cbbe:	dd08      	ble.n	801cbd2 <_ZN8touchgfx7muldivuEmmmRm+0x2e>
 801cbc0:	4633      	mov	r3, r6
 801cbc2:	462a      	mov	r2, r5
 801cbc4:	4641      	mov	r1, r8
 801cbc6:	4638      	mov	r0, r7
 801cbc8:	f7ff ffec 	bl	801cba4 <_ZN8touchgfx7muldivuEmmmRm>
 801cbcc:	b003      	add	sp, #12
 801cbce:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801cbd2:	f04f 33ff 	mov.w	r3, #4294967295
 801cbd6:	f06f 4000 	mvn.w	r0, #2147483648	@ 0x80000000
 801cbda:	6033      	str	r3, [r6, #0]
 801cbdc:	e7f6      	b.n	801cbcc <_ZN8touchgfx7muldivuEmmmRm+0x28>
 801cbde:	fa31 f900 	lsrs.w	r9, r1, r0
 801cbe2:	fb01 f308 	mul.w	r3, r1, r8
 801cbe6:	d105      	bne.n	801cbf4 <_ZN8touchgfx7muldivuEmmmRm+0x50>
 801cbe8:	fbb3 f0f5 	udiv	r0, r3, r5
 801cbec:	fb05 3510 	mls	r5, r5, r0, r3
 801cbf0:	6035      	str	r5, [r6, #0]
 801cbf2:	e7eb      	b.n	801cbcc <_ZN8touchgfx7muldivuEmmmRm+0x28>
 801cbf4:	2301      	movs	r3, #1
 801cbf6:	fa08 fb00 	lsl.w	fp, r8, r0
 801cbfa:	462a      	mov	r2, r5
 801cbfc:	4641      	mov	r1, r8
 801cbfe:	fa03 f000 	lsl.w	r0, r3, r0
 801cc02:	4633      	mov	r3, r6
 801cc04:	fbbb faf5 	udiv	sl, fp, r5
 801cc08:	3801      	subs	r0, #1
 801cc0a:	fb09 f40a 	mul.w	r4, r9, sl
 801cc0e:	4038      	ands	r0, r7
 801cc10:	f7ff ffc8 	bl	801cba4 <_ZN8touchgfx7muldivuEmmmRm>
 801cc14:	462a      	mov	r2, r5
 801cc16:	4607      	mov	r7, r0
 801cc18:	ab01      	add	r3, sp, #4
 801cc1a:	fb05 b11a 	mls	r1, r5, sl, fp
 801cc1e:	4648      	mov	r0, r9
 801cc20:	f7ff ffc0 	bl	801cba4 <_ZN8touchgfx7muldivuEmmmRm>
 801cc24:	9b01      	ldr	r3, [sp, #4]
 801cc26:	6832      	ldr	r2, [r6, #0]
 801cc28:	441a      	add	r2, r3
 801cc2a:	fbb2 f3f5 	udiv	r3, r2, r5
 801cc2e:	441c      	add	r4, r3
 801cc30:	fb05 2513 	mls	r5, r5, r3, r2
 801cc34:	443c      	add	r4, r7
 801cc36:	4420      	add	r0, r4
 801cc38:	e7da      	b.n	801cbf0 <_ZN8touchgfx7muldivuEmmmRm+0x4c>

0801cc3a <_ZN8touchgfx6muldivElllRl>:
 801cc3a:	b573      	push	{r0, r1, r4, r5, r6, lr}
 801cc3c:	2800      	cmp	r0, #0
 801cc3e:	461e      	mov	r6, r3
 801cc40:	bfba      	itte	lt
 801cc42:	4240      	neglt	r0, r0
 801cc44:	f04f 34ff 	movlt.w	r4, #4294967295
 801cc48:	2401      	movge	r4, #1
 801cc4a:	2900      	cmp	r1, #0
 801cc4c:	bfbc      	itt	lt
 801cc4e:	4249      	neglt	r1, r1
 801cc50:	4264      	neglt	r4, r4
 801cc52:	2a00      	cmp	r2, #0
 801cc54:	bfb6      	itet	lt
 801cc56:	4265      	neglt	r5, r4
 801cc58:	4625      	movge	r5, r4
 801cc5a:	4252      	neglt	r2, r2
 801cc5c:	4288      	cmp	r0, r1
 801cc5e:	bfc2      	ittt	gt
 801cc60:	4603      	movgt	r3, r0
 801cc62:	4608      	movgt	r0, r1
 801cc64:	4619      	movgt	r1, r3
 801cc66:	ab01      	add	r3, sp, #4
 801cc68:	f7ff ff9c 	bl	801cba4 <_ZN8touchgfx7muldivuEmmmRm>
 801cc6c:	9b01      	ldr	r3, [sp, #4]
 801cc6e:	4368      	muls	r0, r5
 801cc70:	435c      	muls	r4, r3
 801cc72:	6034      	str	r4, [r6, #0]
 801cc74:	b002      	add	sp, #8
 801cc76:	bd70      	pop	{r4, r5, r6, pc}

0801cc78 <_ZN8touchgfx10ClickEvent12getEventTypeEv>:
 801cc78:	2000      	movs	r0, #0
 801cc7a:	4770      	bx	lr

0801cc7c <_ZN8touchgfx9DragEvent12getEventTypeEv>:
 801cc7c:	2001      	movs	r0, #1
 801cc7e:	4770      	bx	lr

0801cc80 <_ZN8touchgfx12GestureEvent12getEventTypeEv>:
 801cc80:	2002      	movs	r0, #2
 801cc82:	4770      	bx	lr

0801cc84 <_ZN8touchgfx12GestureEventD1Ev>:
 801cc84:	4770      	bx	lr

0801cc86 <_ZN8touchgfx9DragEventD1Ev>:
 801cc86:	4770      	bx	lr

0801cc88 <_ZN8touchgfx10ClickEventD1Ev>:
 801cc88:	4770      	bx	lr

0801cc8a <_ZN8touchgfx10ClickEventD0Ev>:
 801cc8a:	b510      	push	{r4, lr}
 801cc8c:	4604      	mov	r4, r0
 801cc8e:	210c      	movs	r1, #12
 801cc90:	f00d ffa9 	bl	802abe6 <_ZdlPvj>
 801cc94:	4620      	mov	r0, r4
 801cc96:	bd10      	pop	{r4, pc}

0801cc98 <_ZN8touchgfx9DragEventD0Ev>:
 801cc98:	b510      	push	{r4, lr}
 801cc9a:	4604      	mov	r4, r0
 801cc9c:	2110      	movs	r1, #16
 801cc9e:	f00d ffa2 	bl	802abe6 <_ZdlPvj>
 801cca2:	4620      	mov	r0, r4
 801cca4:	bd10      	pop	{r4, pc}

0801cca6 <_ZN8touchgfx12GestureEventD0Ev>:
 801cca6:	b510      	push	{r4, lr}
 801cca8:	4604      	mov	r4, r0
 801ccaa:	210c      	movs	r1, #12
 801ccac:	f00d ff9b 	bl	802abe6 <_ZdlPvj>
 801ccb0:	4620      	mov	r0, r4
 801ccb2:	bd10      	pop	{r4, pc}

0801ccb4 <_ZN8touchgfx6Screen18handleGestureEventERKNS_12GestureEventE>:
 801ccb4:	b530      	push	{r4, r5, lr}
 801ccb6:	460d      	mov	r5, r1
 801ccb8:	6b01      	ldr	r1, [r0, #48]	@ 0x30
 801ccba:	b087      	sub	sp, #28
 801ccbc:	4604      	mov	r4, r0
 801ccbe:	b301      	cbz	r1, 801cd02 <_ZN8touchgfx6Screen18handleGestureEventERKNS_12GestureEventE+0x4e>
 801ccc0:	a801      	add	r0, sp, #4
 801ccc2:	f7ff feb3 	bl	801ca2c <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 801ccc6:	892a      	ldrh	r2, [r5, #8]
 801ccc8:	f8bd 3004 	ldrh.w	r3, [sp, #4]
 801cccc:	7928      	ldrb	r0, [r5, #4]
 801ccce:	1ad2      	subs	r2, r2, r3
 801ccd0:	8ea3      	ldrh	r3, [r4, #52]	@ 0x34
 801ccd2:	f9b5 1006 	ldrsh.w	r1, [r5, #6]
 801ccd6:	441a      	add	r2, r3
 801ccd8:	896b      	ldrh	r3, [r5, #10]
 801ccda:	f8bd 5006 	ldrh.w	r5, [sp, #6]
 801ccde:	f88d 0010 	strb.w	r0, [sp, #16]
 801cce2:	1b5b      	subs	r3, r3, r5
 801cce4:	8ee5      	ldrh	r5, [r4, #54]	@ 0x36
 801cce6:	6b20      	ldr	r0, [r4, #48]	@ 0x30
 801cce8:	442b      	add	r3, r5
 801ccea:	4d07      	ldr	r5, [pc, #28]	@ (801cd08 <_ZN8touchgfx6Screen18handleGestureEventERKNS_12GestureEventE+0x54>)
 801ccec:	f8ad 1012 	strh.w	r1, [sp, #18]
 801ccf0:	a903      	add	r1, sp, #12
 801ccf2:	9503      	str	r5, [sp, #12]
 801ccf4:	f8ad 2014 	strh.w	r2, [sp, #20]
 801ccf8:	f8ad 3016 	strh.w	r3, [sp, #22]
 801ccfc:	6803      	ldr	r3, [r0, #0]
 801ccfe:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 801cd00:	4798      	blx	r3
 801cd02:	b007      	add	sp, #28
 801cd04:	bd30      	pop	{r4, r5, pc}
 801cd06:	bf00      	nop
 801cd08:	0802f378 	.word	0x0802f378

0801cd0c <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE>:
 801cd0c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801cd10:	6b03      	ldr	r3, [r0, #48]	@ 0x30
 801cd12:	b08a      	sub	sp, #40	@ 0x28
 801cd14:	4604      	mov	r4, r0
 801cd16:	460d      	mov	r5, r1
 801cd18:	b113      	cbz	r3, 801cd20 <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE+0x14>
 801cd1a:	790b      	ldrb	r3, [r1, #4]
 801cd1c:	2b00      	cmp	r3, #0
 801cd1e:	d044      	beq.n	801cdaa <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE+0x9e>
 801cd20:	f104 0804 	add.w	r8, r4, #4
 801cd24:	a803      	add	r0, sp, #12
 801cd26:	4641      	mov	r1, r8
 801cd28:	f7ff fe80 	bl	801ca2c <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 801cd2c:	792b      	ldrb	r3, [r5, #4]
 801cd2e:	f9bd 700c 	ldrsh.w	r7, [sp, #12]
 801cd32:	f9bd 600e 	ldrsh.w	r6, [sp, #14]
 801cd36:	b983      	cbnz	r3, 801cd5a <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE+0x4e>
 801cd38:	f104 0336 	add.w	r3, r4, #54	@ 0x36
 801cd3c:	892a      	ldrh	r2, [r5, #8]
 801cd3e:	88e9      	ldrh	r1, [r5, #6]
 801cd40:	4640      	mov	r0, r8
 801cd42:	1b92      	subs	r2, r2, r6
 801cd44:	9301      	str	r3, [sp, #4]
 801cd46:	1bc9      	subs	r1, r1, r7
 801cd48:	f104 0334 	add.w	r3, r4, #52	@ 0x34
 801cd4c:	b212      	sxth	r2, r2
 801cd4e:	9300      	str	r3, [sp, #0]
 801cd50:	b209      	sxth	r1, r1
 801cd52:	f104 0330 	add.w	r3, r4, #48	@ 0x30
 801cd56:	f7fa ffb3 	bl	8017cc0 <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_>
 801cd5a:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 801cd5c:	b329      	cbz	r1, 801cdaa <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE+0x9e>
 801cd5e:	a805      	add	r0, sp, #20
 801cd60:	f7ff fe64 	bl	801ca2c <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 801cd64:	f8bd 2014 	ldrh.w	r2, [sp, #20]
 801cd68:	792b      	ldrb	r3, [r5, #4]
 801cd6a:	a907      	add	r1, sp, #28
 801cd6c:	1abf      	subs	r7, r7, r2
 801cd6e:	88ea      	ldrh	r2, [r5, #6]
 801cd70:	6b20      	ldr	r0, [r4, #48]	@ 0x30
 801cd72:	4417      	add	r7, r2
 801cd74:	8ea2      	ldrh	r2, [r4, #52]	@ 0x34
 801cd76:	f88d 3020 	strb.w	r3, [sp, #32]
 801cd7a:	4417      	add	r7, r2
 801cd7c:	f8bd 2016 	ldrh.w	r2, [sp, #22]
 801cd80:	1ab6      	subs	r6, r6, r2
 801cd82:	892a      	ldrh	r2, [r5, #8]
 801cd84:	f8ad 7022 	strh.w	r7, [sp, #34]	@ 0x22
 801cd88:	4416      	add	r6, r2
 801cd8a:	8ee2      	ldrh	r2, [r4, #54]	@ 0x36
 801cd8c:	4416      	add	r6, r2
 801cd8e:	4a08      	ldr	r2, [pc, #32]	@ (801cdb0 <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE+0xa4>)
 801cd90:	f8ad 6024 	strh.w	r6, [sp, #36]	@ 0x24
 801cd94:	2600      	movs	r6, #0
 801cd96:	9207      	str	r2, [sp, #28]
 801cd98:	f8ad 6026 	strh.w	r6, [sp, #38]	@ 0x26
 801cd9c:	6803      	ldr	r3, [r0, #0]
 801cd9e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 801cda0:	4798      	blx	r3
 801cda2:	792b      	ldrb	r3, [r5, #4]
 801cda4:	b10b      	cbz	r3, 801cdaa <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE+0x9e>
 801cda6:	e9c4 660c 	strd	r6, r6, [r4, #48]	@ 0x30
 801cdaa:	b00a      	add	sp, #40	@ 0x28
 801cdac:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801cdb0:	0802f350 	.word	0x0802f350

0801cdb4 <_ZN8touchgfx6Screen15handleDragEventERKNS_9DragEventE>:
 801cdb4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801cdb8:	460c      	mov	r4, r1
 801cdba:	6b01      	ldr	r1, [r0, #48]	@ 0x30
 801cdbc:	b088      	sub	sp, #32
 801cdbe:	4605      	mov	r5, r0
 801cdc0:	2900      	cmp	r1, #0
 801cdc2:	d06d      	beq.n	801cea0 <_ZN8touchgfx6Screen15handleDragEventERKNS_9DragEventE+0xec>
 801cdc4:	4668      	mov	r0, sp
 801cdc6:	f7ff fe31 	bl	801ca2c <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 801cdca:	8ea9      	ldrh	r1, [r5, #52]	@ 0x34
 801cdcc:	88e3      	ldrh	r3, [r4, #6]
 801cdce:	f9bd 8000 	ldrsh.w	r8, [sp]
 801cdd2:	440b      	add	r3, r1
 801cdd4:	f9bd 7002 	ldrsh.w	r7, [sp, #2]
 801cdd8:	b21b      	sxth	r3, r3
 801cdda:	4543      	cmp	r3, r8
 801cddc:	db31      	blt.n	801ce42 <_ZN8touchgfx6Screen15handleDragEventERKNS_9DragEventE+0x8e>
 801cdde:	f8bd c004 	ldrh.w	ip, [sp, #4]
 801cde2:	44c4      	add	ip, r8
 801cde4:	fa0f fc8c 	sxth.w	ip, ip
 801cde8:	4563      	cmp	r3, ip
 801cdea:	da2a      	bge.n	801ce42 <_ZN8touchgfx6Screen15handleDragEventERKNS_9DragEventE+0x8e>
 801cdec:	8eea      	ldrh	r2, [r5, #54]	@ 0x36
 801cdee:	8926      	ldrh	r6, [r4, #8]
 801cdf0:	4416      	add	r6, r2
 801cdf2:	b236      	sxth	r6, r6
 801cdf4:	42be      	cmp	r6, r7
 801cdf6:	db24      	blt.n	801ce42 <_ZN8touchgfx6Screen15handleDragEventERKNS_9DragEventE+0x8e>
 801cdf8:	f8bd 0006 	ldrh.w	r0, [sp, #6]
 801cdfc:	4438      	add	r0, r7
 801cdfe:	b200      	sxth	r0, r0
 801ce00:	4286      	cmp	r6, r0
 801ce02:	da1e      	bge.n	801ce42 <_ZN8touchgfx6Screen15handleDragEventERKNS_9DragEventE+0x8e>
 801ce04:	8963      	ldrh	r3, [r4, #10]
 801ce06:	4419      	add	r1, r3
 801ce08:	b209      	sxth	r1, r1
 801ce0a:	4541      	cmp	r1, r8
 801ce0c:	db08      	blt.n	801ce20 <_ZN8touchgfx6Screen15handleDragEventERKNS_9DragEventE+0x6c>
 801ce0e:	4561      	cmp	r1, ip
 801ce10:	da06      	bge.n	801ce20 <_ZN8touchgfx6Screen15handleDragEventERKNS_9DragEventE+0x6c>
 801ce12:	89a3      	ldrh	r3, [r4, #12]
 801ce14:	441a      	add	r2, r3
 801ce16:	b212      	sxth	r2, r2
 801ce18:	42ba      	cmp	r2, r7
 801ce1a:	db01      	blt.n	801ce20 <_ZN8touchgfx6Screen15handleDragEventERKNS_9DragEventE+0x6c>
 801ce1c:	4282      	cmp	r2, r0
 801ce1e:	db10      	blt.n	801ce42 <_ZN8touchgfx6Screen15handleDragEventERKNS_9DragEventE+0x8e>
 801ce20:	4b21      	ldr	r3, [pc, #132]	@ (801cea8 <_ZN8touchgfx6Screen15handleDragEventERKNS_9DragEventE+0xf4>)
 801ce22:	a904      	add	r1, sp, #16
 801ce24:	6b28      	ldr	r0, [r5, #48]	@ 0x30
 801ce26:	9304      	str	r3, [sp, #16]
 801ce28:	2302      	movs	r3, #2
 801ce2a:	f88d 3014 	strb.w	r3, [sp, #20]
 801ce2e:	2300      	movs	r3, #0
 801ce30:	f8ad 3016 	strh.w	r3, [sp, #22]
 801ce34:	f8ad 3018 	strh.w	r3, [sp, #24]
 801ce38:	f8ad 301a 	strh.w	r3, [sp, #26]
 801ce3c:	6803      	ldr	r3, [r0, #0]
 801ce3e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 801ce40:	4798      	blx	r3
 801ce42:	1d29      	adds	r1, r5, #4
 801ce44:	a802      	add	r0, sp, #8
 801ce46:	f7ff fdf1 	bl	801ca2c <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 801ce4a:	f8bd 3008 	ldrh.w	r3, [sp, #8]
 801ce4e:	88e0      	ldrh	r0, [r4, #6]
 801ce50:	eba3 0808 	sub.w	r8, r3, r8
 801ce54:	f8bd 300a 	ldrh.w	r3, [sp, #10]
 801ce58:	7921      	ldrb	r1, [r4, #4]
 801ce5a:	fa1f f888 	uxth.w	r8, r8
 801ce5e:	1bdf      	subs	r7, r3, r7
 801ce60:	f8b5 c034 	ldrh.w	ip, [r5, #52]	@ 0x34
 801ce64:	b2bb      	uxth	r3, r7
 801ce66:	4440      	add	r0, r8
 801ce68:	8922      	ldrh	r2, [r4, #8]
 801ce6a:	8967      	ldrh	r7, [r4, #10]
 801ce6c:	4460      	add	r0, ip
 801ce6e:	89a4      	ldrh	r4, [r4, #12]
 801ce70:	441a      	add	r2, r3
 801ce72:	8eee      	ldrh	r6, [r5, #54]	@ 0x36
 801ce74:	44b8      	add	r8, r7
 801ce76:	4423      	add	r3, r4
 801ce78:	f8ad 0016 	strh.w	r0, [sp, #22]
 801ce7c:	4432      	add	r2, r6
 801ce7e:	44e0      	add	r8, ip
 801ce80:	4433      	add	r3, r6
 801ce82:	4c0a      	ldr	r4, [pc, #40]	@ (801ceac <_ZN8touchgfx6Screen15handleDragEventERKNS_9DragEventE+0xf8>)
 801ce84:	6b28      	ldr	r0, [r5, #48]	@ 0x30
 801ce86:	f88d 1014 	strb.w	r1, [sp, #20]
 801ce8a:	a904      	add	r1, sp, #16
 801ce8c:	9404      	str	r4, [sp, #16]
 801ce8e:	f8ad 2018 	strh.w	r2, [sp, #24]
 801ce92:	f8ad 801a 	strh.w	r8, [sp, #26]
 801ce96:	f8ad 301c 	strh.w	r3, [sp, #28]
 801ce9a:	6803      	ldr	r3, [r0, #0]
 801ce9c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 801ce9e:	4798      	blx	r3
 801cea0:	b008      	add	sp, #32
 801cea2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801cea6:	bf00      	nop
 801cea8:	0802f350 	.word	0x0802f350
 801ceac:	0802f364 	.word	0x0802f364

0801ceb0 <_ZN8touchgfx8Drawable20getCachedVisibleRectEv>:
 801ceb0:	b537      	push	{r0, r1, r2, r4, r5, lr}
 801ceb2:	4604      	mov	r4, r0
 801ceb4:	f934 2f0c 	ldrsh.w	r2, [r4, #12]!
 801ceb8:	3201      	adds	r2, #1
 801ceba:	d112      	bne.n	801cee2 <_ZN8touchgfx8Drawable20getCachedVisibleRectEv+0x32>
 801cebc:	2500      	movs	r5, #0
 801cebe:	f9b0 1008 	ldrsh.w	r1, [r0, #8]
 801cec2:	f9b0 200a 	ldrsh.w	r2, [r0, #10]
 801cec6:	6803      	ldr	r3, [r0, #0]
 801cec8:	9500      	str	r5, [sp, #0]
 801ceca:	466d      	mov	r5, sp
 801cecc:	f8ad 1004 	strh.w	r1, [sp, #4]
 801ced0:	f8ad 2006 	strh.w	r2, [sp, #6]
 801ced4:	4629      	mov	r1, r5
 801ced6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801ced8:	4798      	blx	r3
 801ceda:	e895 0003 	ldmia.w	r5, {r0, r1}
 801cede:	e884 0003 	stmia.w	r4, {r0, r1}
 801cee2:	4620      	mov	r0, r4
 801cee4:	b003      	add	sp, #12
 801cee6:	bd30      	pop	{r4, r5, pc}

0801cee8 <_ZN8touchgfx8Drawable13getCachedAbsXEv>:
 801cee8:	b513      	push	{r0, r1, r4, lr}
 801ceea:	f9b0 3020 	ldrsh.w	r3, [r0, #32]
 801ceee:	4604      	mov	r4, r0
 801cef0:	3301      	adds	r3, #1
 801cef2:	d109      	bne.n	801cf08 <_ZN8touchgfx8Drawable13getCachedAbsXEv+0x20>
 801cef4:	4601      	mov	r1, r0
 801cef6:	4668      	mov	r0, sp
 801cef8:	f7ff fd98 	bl	801ca2c <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 801cefc:	f8bd 3000 	ldrh.w	r3, [sp]
 801cf00:	8423      	strh	r3, [r4, #32]
 801cf02:	f8bd 3002 	ldrh.w	r3, [sp, #2]
 801cf06:	8463      	strh	r3, [r4, #34]	@ 0x22
 801cf08:	f9b4 0020 	ldrsh.w	r0, [r4, #32]
 801cf0c:	b002      	add	sp, #8
 801cf0e:	bd10      	pop	{r4, pc}

0801cf10 <_ZN8touchgfx8Drawable13getCachedAbsYEv>:
 801cf10:	b513      	push	{r0, r1, r4, lr}
 801cf12:	f9b0 3022 	ldrsh.w	r3, [r0, #34]	@ 0x22
 801cf16:	4604      	mov	r4, r0
 801cf18:	3301      	adds	r3, #1
 801cf1a:	d109      	bne.n	801cf30 <_ZN8touchgfx8Drawable13getCachedAbsYEv+0x20>
 801cf1c:	4601      	mov	r1, r0
 801cf1e:	4668      	mov	r0, sp
 801cf20:	f7ff fd84 	bl	801ca2c <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 801cf24:	f8bd 3000 	ldrh.w	r3, [sp]
 801cf28:	8423      	strh	r3, [r4, #32]
 801cf2a:	f8bd 3002 	ldrh.w	r3, [sp, #2]
 801cf2e:	8463      	strh	r3, [r4, #34]	@ 0x22
 801cf30:	f9b4 0022 	ldrsh.w	r0, [r4, #34]	@ 0x22
 801cf34:	b002      	add	sp, #8
 801cf36:	bd10      	pop	{r4, pc}

0801cf38 <_ZN8touchgfx6ScreenC1Ev>:
 801cf38:	b570      	push	{r4, r5, r6, lr}
 801cf3a:	4b17      	ldr	r3, [pc, #92]	@ (801cf98 <_ZN8touchgfx6ScreenC1Ev+0x60>)
 801cf3c:	4605      	mov	r5, r0
 801cf3e:	4a17      	ldr	r2, [pc, #92]	@ (801cf9c <_ZN8touchgfx6ScreenC1Ev+0x64>)
 801cf40:	2101      	movs	r1, #1
 801cf42:	f845 3b04 	str.w	r3, [r5], #4
 801cf46:	2300      	movs	r3, #0
 801cf48:	6042      	str	r2, [r0, #4]
 801cf4a:	4604      	mov	r4, r0
 801cf4c:	8103      	strh	r3, [r0, #8]
 801cf4e:	8143      	strh	r3, [r0, #10]
 801cf50:	8183      	strh	r3, [r0, #12]
 801cf52:	81c3      	strh	r3, [r0, #14]
 801cf54:	8203      	strh	r3, [r0, #16]
 801cf56:	8243      	strh	r3, [r0, #18]
 801cf58:	8283      	strh	r3, [r0, #20]
 801cf5a:	82c3      	strh	r3, [r0, #22]
 801cf5c:	6203      	str	r3, [r0, #32]
 801cf5e:	8483      	strh	r3, [r0, #36]	@ 0x24
 801cf60:	84c3      	strh	r3, [r0, #38]	@ 0x26
 801cf62:	f880 3028 	strb.w	r3, [r0, #40]	@ 0x28
 801cf66:	6343      	str	r3, [r0, #52]	@ 0x34
 801cf68:	f880 1029 	strb.w	r1, [r0, #41]	@ 0x29
 801cf6c:	f880 1038 	strb.w	r1, [r0, #56]	@ 0x38
 801cf70:	e9c0 3306 	strd	r3, r3, [r0, #24]
 801cf74:	e9c0 330b 	strd	r3, r3, [r0, #44]	@ 0x2c
 801cf78:	4b09      	ldr	r3, [pc, #36]	@ (801cfa0 <_ZN8touchgfx6ScreenC1Ev+0x68>)
 801cf7a:	4628      	mov	r0, r5
 801cf7c:	f9b3 6000 	ldrsh.w	r6, [r3]
 801cf80:	6b53      	ldr	r3, [r2, #52]	@ 0x34
 801cf82:	4a08      	ldr	r2, [pc, #32]	@ (801cfa4 <_ZN8touchgfx6ScreenC1Ev+0x6c>)
 801cf84:	f9b2 1000 	ldrsh.w	r1, [r2]
 801cf88:	4798      	blx	r3
 801cf8a:	6863      	ldr	r3, [r4, #4]
 801cf8c:	4628      	mov	r0, r5
 801cf8e:	4631      	mov	r1, r6
 801cf90:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 801cf92:	4798      	blx	r3
 801cf94:	4620      	mov	r0, r4
 801cf96:	bd70      	pop	{r4, r5, r6, pc}
 801cf98:	0802f38c 	.word	0x0802f38c
 801cf9c:	0802dbcc 	.word	0x0802dbcc
 801cfa0:	2400b87a 	.word	0x2400b87a
 801cfa4:	2400b878 	.word	0x2400b878

0801cfa8 <_ZN8touchgfx6Screen4drawEv>:
 801cfa8:	4b09      	ldr	r3, [pc, #36]	@ (801cfd0 <_ZN8touchgfx6Screen4drawEv+0x28>)
 801cfaa:	b507      	push	{r0, r1, r2, lr}
 801cfac:	f9b3 2000 	ldrsh.w	r2, [r3]
 801cfb0:	2100      	movs	r1, #0
 801cfb2:	4b08      	ldr	r3, [pc, #32]	@ (801cfd4 <_ZN8touchgfx6Screen4drawEv+0x2c>)
 801cfb4:	9100      	str	r1, [sp, #0]
 801cfb6:	4669      	mov	r1, sp
 801cfb8:	f9b3 3000 	ldrsh.w	r3, [r3]
 801cfbc:	f8ad 2004 	strh.w	r2, [sp, #4]
 801cfc0:	f8ad 3006 	strh.w	r3, [sp, #6]
 801cfc4:	6803      	ldr	r3, [r0, #0]
 801cfc6:	689b      	ldr	r3, [r3, #8]
 801cfc8:	4798      	blx	r3
 801cfca:	b003      	add	sp, #12
 801cfcc:	f85d fb04 	ldr.w	pc, [sp], #4
 801cfd0:	2400b878 	.word	0x2400b878
 801cfd4:	2400b87a 	.word	0x2400b87a

0801cfd8 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE>:
 801cfd8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801cfdc:	f9b1 3004 	ldrsh.w	r3, [r1, #4]
 801cfe0:	b089      	sub	sp, #36	@ 0x24
 801cfe2:	4680      	mov	r8, r0
 801cfe4:	460c      	mov	r4, r1
 801cfe6:	2b00      	cmp	r3, #0
 801cfe8:	4615      	mov	r5, r2
 801cfea:	dd0e      	ble.n	801d00a <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x32>
 801cfec:	f9b1 3006 	ldrsh.w	r3, [r1, #6]
 801cff0:	2b00      	cmp	r3, #0
 801cff2:	dd0a      	ble.n	801d00a <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x32>
 801cff4:	4628      	mov	r0, r5
 801cff6:	f7ff ff5b 	bl	801ceb0 <_ZN8touchgfx8Drawable20getCachedVisibleRectEv>
 801cffa:	4621      	mov	r1, r4
 801cffc:	f7fe fc2a 	bl	801b854 <_ZNK8touchgfx4Rect9intersectERKS0_>
 801d000:	69eb      	ldr	r3, [r5, #28]
 801d002:	b928      	cbnz	r0, 801d010 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x38>
 801d004:	461d      	mov	r5, r3
 801d006:	2b00      	cmp	r3, #0
 801d008:	d1f4      	bne.n	801cff4 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x1c>
 801d00a:	b009      	add	sp, #36	@ 0x24
 801d00c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801d010:	ae04      	add	r6, sp, #16
 801d012:	2b00      	cmp	r3, #0
 801d014:	f000 80b5 	beq.w	801d182 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x1aa>
 801d018:	682b      	ldr	r3, [r5, #0]
 801d01a:	4629      	mov	r1, r5
 801d01c:	a802      	add	r0, sp, #8
 801d01e:	68db      	ldr	r3, [r3, #12]
 801d020:	4798      	blx	r3
 801d022:	4628      	mov	r0, r5
 801d024:	f7ff ff60 	bl	801cee8 <_ZN8touchgfx8Drawable13getCachedAbsXEv>
 801d028:	f8bd 7008 	ldrh.w	r7, [sp, #8]
 801d02c:	4407      	add	r7, r0
 801d02e:	4628      	mov	r0, r5
 801d030:	f7ff ff6e 	bl	801cf10 <_ZN8touchgfx8Drawable13getCachedAbsYEv>
 801d034:	f8bd 300a 	ldrh.w	r3, [sp, #10]
 801d038:	f9bd 200c 	ldrsh.w	r2, [sp, #12]
 801d03c:	b23f      	sxth	r7, r7
 801d03e:	4418      	add	r0, r3
 801d040:	f9bd 300e 	ldrsh.w	r3, [sp, #14]
 801d044:	4621      	mov	r1, r4
 801d046:	f8ad 2014 	strh.w	r2, [sp, #20]
 801d04a:	f8ad 0012 	strh.w	r0, [sp, #18]
 801d04e:	4630      	mov	r0, r6
 801d050:	f8ad 3016 	strh.w	r3, [sp, #22]
 801d054:	f8ad 7010 	strh.w	r7, [sp, #16]
 801d058:	f7fa ff14 	bl	8017e84 <_ZN8touchgfx4RectaNERKS0_>
 801d05c:	4628      	mov	r0, r5
 801d05e:	f7ff ff27 	bl	801ceb0 <_ZN8touchgfx8Drawable20getCachedVisibleRectEv>
 801d062:	ab06      	add	r3, sp, #24
 801d064:	4602      	mov	r2, r0
 801d066:	e896 0003 	ldmia.w	r6, {r0, r1}
 801d06a:	e883 0003 	stmia.w	r3, {r0, r1}
 801d06e:	4611      	mov	r1, r2
 801d070:	4618      	mov	r0, r3
 801d072:	f7fa ff07 	bl	8017e84 <_ZN8touchgfx4RectaNERKS0_>
 801d076:	f9bd 3018 	ldrsh.w	r3, [sp, #24]
 801d07a:	f9b4 1000 	ldrsh.w	r1, [r4]
 801d07e:	f9bd a01a 	ldrsh.w	sl, [sp, #26]
 801d082:	4299      	cmp	r1, r3
 801d084:	f9bd b01c 	ldrsh.w	fp, [sp, #28]
 801d088:	f9bd 901e 	ldrsh.w	r9, [sp, #30]
 801d08c:	d10b      	bne.n	801d0a6 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0xce>
 801d08e:	f9b4 2002 	ldrsh.w	r2, [r4, #2]
 801d092:	4552      	cmp	r2, sl
 801d094:	d107      	bne.n	801d0a6 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0xce>
 801d096:	f9b4 2004 	ldrsh.w	r2, [r4, #4]
 801d09a:	455a      	cmp	r2, fp
 801d09c:	d103      	bne.n	801d0a6 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0xce>
 801d09e:	f9b4 2006 	ldrsh.w	r2, [r4, #6]
 801d0a2:	454a      	cmp	r2, r9
 801d0a4:	d06d      	beq.n	801d182 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x1aa>
 801d0a6:	f1bb 0f00 	cmp.w	fp, #0
 801d0aa:	dd65      	ble.n	801d178 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x1a0>
 801d0ac:	f1b9 0f00 	cmp.w	r9, #0
 801d0b0:	dd62      	ble.n	801d178 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x1a0>
 801d0b2:	f9b4 2002 	ldrsh.w	r2, [r4, #2]
 801d0b6:	fa1f f08a 	uxth.w	r0, sl
 801d0ba:	4552      	cmp	r2, sl
 801d0bc:	9000      	str	r0, [sp, #0]
 801d0be:	da12      	bge.n	801d0e6 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x10e>
 801d0c0:	9301      	str	r3, [sp, #4]
 801d0c2:	9b00      	ldr	r3, [sp, #0]
 801d0c4:	f9b4 0004 	ldrsh.w	r0, [r4, #4]
 801d0c8:	f8ad 2012 	strh.w	r2, [sp, #18]
 801d0cc:	1a9a      	subs	r2, r3, r2
 801d0ce:	f8ad 1010 	strh.w	r1, [sp, #16]
 801d0d2:	4631      	mov	r1, r6
 801d0d4:	f8ad 0014 	strh.w	r0, [sp, #20]
 801d0d8:	4640      	mov	r0, r8
 801d0da:	f8ad 2016 	strh.w	r2, [sp, #22]
 801d0de:	69ea      	ldr	r2, [r5, #28]
 801d0e0:	f7ff ff7a 	bl	801cfd8 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE>
 801d0e4:	9b01      	ldr	r3, [sp, #4]
 801d0e6:	f9b4 2000 	ldrsh.w	r2, [r4]
 801d0ea:	b29f      	uxth	r7, r3
 801d0ec:	429a      	cmp	r2, r3
 801d0ee:	da0d      	bge.n	801d10c <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x134>
 801d0f0:	f8ad 2010 	strh.w	r2, [sp, #16]
 801d0f4:	1aba      	subs	r2, r7, r2
 801d0f6:	f8ad a012 	strh.w	sl, [sp, #18]
 801d0fa:	4631      	mov	r1, r6
 801d0fc:	f8ad 2014 	strh.w	r2, [sp, #20]
 801d100:	4640      	mov	r0, r8
 801d102:	f8ad 9016 	strh.w	r9, [sp, #22]
 801d106:	69ea      	ldr	r2, [r5, #28]
 801d108:	f7ff ff66 	bl	801cfd8 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE>
 801d10c:	8822      	ldrh	r2, [r4, #0]
 801d10e:	445f      	add	r7, fp
 801d110:	88a3      	ldrh	r3, [r4, #4]
 801d112:	b2bf      	uxth	r7, r7
 801d114:	4413      	add	r3, r2
 801d116:	b23a      	sxth	r2, r7
 801d118:	b29b      	uxth	r3, r3
 801d11a:	b219      	sxth	r1, r3
 801d11c:	4291      	cmp	r1, r2
 801d11e:	dd0d      	ble.n	801d13c <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x164>
 801d120:	1bdb      	subs	r3, r3, r7
 801d122:	f8ad 2010 	strh.w	r2, [sp, #16]
 801d126:	f8ad a012 	strh.w	sl, [sp, #18]
 801d12a:	4631      	mov	r1, r6
 801d12c:	f8ad 3014 	strh.w	r3, [sp, #20]
 801d130:	4640      	mov	r0, r8
 801d132:	f8ad 9016 	strh.w	r9, [sp, #22]
 801d136:	69ea      	ldr	r2, [r5, #28]
 801d138:	f7ff ff4e 	bl	801cfd8 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE>
 801d13c:	88e2      	ldrh	r2, [r4, #6]
 801d13e:	8863      	ldrh	r3, [r4, #2]
 801d140:	4413      	add	r3, r2
 801d142:	9a00      	ldr	r2, [sp, #0]
 801d144:	444a      	add	r2, r9
 801d146:	b29b      	uxth	r3, r3
 801d148:	fa1f f982 	uxth.w	r9, r2
 801d14c:	b219      	sxth	r1, r3
 801d14e:	fa0f f289 	sxth.w	r2, r9
 801d152:	428a      	cmp	r2, r1
 801d154:	da15      	bge.n	801d182 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x1aa>
 801d156:	f9b4 1004 	ldrsh.w	r1, [r4, #4]
 801d15a:	eba3 0309 	sub.w	r3, r3, r9
 801d15e:	f9b4 0000 	ldrsh.w	r0, [r4]
 801d162:	f8ad 1014 	strh.w	r1, [sp, #20]
 801d166:	4631      	mov	r1, r6
 801d168:	f8ad 0010 	strh.w	r0, [sp, #16]
 801d16c:	f8ad 2012 	strh.w	r2, [sp, #18]
 801d170:	f8ad 3016 	strh.w	r3, [sp, #22]
 801d174:	69ea      	ldr	r2, [r5, #28]
 801d176:	e001      	b.n	801d17c <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x1a4>
 801d178:	69ea      	ldr	r2, [r5, #28]
 801d17a:	4621      	mov	r1, r4
 801d17c:	4640      	mov	r0, r8
 801d17e:	f7ff ff2b 	bl	801cfd8 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE>
 801d182:	4628      	mov	r0, r5
 801d184:	f7ff fe94 	bl	801ceb0 <_ZN8touchgfx8Drawable20getCachedVisibleRectEv>
 801d188:	6861      	ldr	r1, [r4, #4]
 801d18a:	4602      	mov	r2, r0
 801d18c:	4633      	mov	r3, r6
 801d18e:	6820      	ldr	r0, [r4, #0]
 801d190:	c303      	stmia	r3!, {r0, r1}
 801d192:	4611      	mov	r1, r2
 801d194:	4630      	mov	r0, r6
 801d196:	f7fa fe75 	bl	8017e84 <_ZN8touchgfx4RectaNERKS0_>
 801d19a:	f9bd 3014 	ldrsh.w	r3, [sp, #20]
 801d19e:	2b00      	cmp	r3, #0
 801d1a0:	f77f af33 	ble.w	801d00a <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x32>
 801d1a4:	f9bd 3016 	ldrsh.w	r3, [sp, #22]
 801d1a8:	2b00      	cmp	r3, #0
 801d1aa:	f77f af2e 	ble.w	801d00a <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x32>
 801d1ae:	4628      	mov	r0, r5
 801d1b0:	f7ff fe9a 	bl	801cee8 <_ZN8touchgfx8Drawable13getCachedAbsXEv>
 801d1b4:	f8bd 3010 	ldrh.w	r3, [sp, #16]
 801d1b8:	1a18      	subs	r0, r3, r0
 801d1ba:	f8ad 0010 	strh.w	r0, [sp, #16]
 801d1be:	4628      	mov	r0, r5
 801d1c0:	f7ff fea6 	bl	801cf10 <_ZN8touchgfx8Drawable13getCachedAbsYEv>
 801d1c4:	f8bd 3012 	ldrh.w	r3, [sp, #18]
 801d1c8:	4631      	mov	r1, r6
 801d1ca:	1a18      	subs	r0, r3, r0
 801d1cc:	f8ad 0012 	strh.w	r0, [sp, #18]
 801d1d0:	4628      	mov	r0, r5
 801d1d2:	682b      	ldr	r3, [r5, #0]
 801d1d4:	689b      	ldr	r3, [r3, #8]
 801d1d6:	4798      	blx	r3
 801d1d8:	e717      	b.n	801d00a <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x32>

0801d1da <_ZN8touchgfx6Screen9startSMOCERKNS_4RectE>:
 801d1da:	b570      	push	{r4, r5, r6, lr}
 801d1dc:	1d06      	adds	r6, r0, #4
 801d1de:	b086      	sub	sp, #24
 801d1e0:	460c      	mov	r4, r1
 801d1e2:	2300      	movs	r3, #0
 801d1e4:	4631      	mov	r1, r6
 801d1e6:	4605      	mov	r5, r0
 801d1e8:	a802      	add	r0, sp, #8
 801d1ea:	9301      	str	r3, [sp, #4]
 801d1ec:	f7ff fc1e 	bl	801ca2c <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 801d1f0:	f8bd 3008 	ldrh.w	r3, [sp, #8]
 801d1f4:	8822      	ldrh	r2, [r4, #0]
 801d1f6:	f8bd 100a 	ldrh.w	r1, [sp, #10]
 801d1fa:	1ad2      	subs	r2, r2, r3
 801d1fc:	8863      	ldrh	r3, [r4, #2]
 801d1fe:	f9b4 0004 	ldrsh.w	r0, [r4, #4]
 801d202:	1a5b      	subs	r3, r3, r1
 801d204:	f9b4 1006 	ldrsh.w	r1, [r4, #6]
 801d208:	f8ad 2010 	strh.w	r2, [sp, #16]
 801d20c:	aa01      	add	r2, sp, #4
 801d20e:	f8ad 0014 	strh.w	r0, [sp, #20]
 801d212:	4630      	mov	r0, r6
 801d214:	f8ad 1016 	strh.w	r1, [sp, #22]
 801d218:	a904      	add	r1, sp, #16
 801d21a:	f8ad 3012 	strh.w	r3, [sp, #18]
 801d21e:	f7fa ff09 	bl	8018034 <_ZN8touchgfx9Container14setupDrawChainERKNS_4RectEPPNS_8DrawableE>
 801d222:	9a01      	ldr	r2, [sp, #4]
 801d224:	b11a      	cbz	r2, 801d22e <_ZN8touchgfx6Screen9startSMOCERKNS_4RectE+0x54>
 801d226:	4621      	mov	r1, r4
 801d228:	4628      	mov	r0, r5
 801d22a:	f7ff fed5 	bl	801cfd8 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE>
 801d22e:	b006      	add	sp, #24
 801d230:	bd70      	pop	{r4, r5, r6, pc}

0801d232 <_ZN8touchgfx6Screen4drawERNS_4RectE>:
 801d232:	4602      	mov	r2, r0
 801d234:	b530      	push	{r4, r5, lr}
 801d236:	4604      	mov	r4, r0
 801d238:	b085      	sub	sp, #20
 801d23a:	f852 0f08 	ldr.w	r0, [r2, #8]!
 801d23e:	460d      	mov	r5, r1
 801d240:	466b      	mov	r3, sp
 801d242:	6851      	ldr	r1, [r2, #4]
 801d244:	c303      	stmia	r3!, {r0, r1}
 801d246:	4629      	mov	r1, r5
 801d248:	4668      	mov	r0, sp
 801d24a:	f7fa fe1b 	bl	8017e84 <_ZN8touchgfx4RectaNERKS0_>
 801d24e:	f894 3038 	ldrb.w	r3, [r4, #56]	@ 0x38
 801d252:	b12b      	cbz	r3, 801d260 <_ZN8touchgfx6Screen4drawERNS_4RectE+0x2e>
 801d254:	4669      	mov	r1, sp
 801d256:	4620      	mov	r0, r4
 801d258:	f7ff ffbf 	bl	801d1da <_ZN8touchgfx6Screen9startSMOCERKNS_4RectE>
 801d25c:	b005      	add	sp, #20
 801d25e:	bd30      	pop	{r4, r5, pc}
 801d260:	3404      	adds	r4, #4
 801d262:	a802      	add	r0, sp, #8
 801d264:	4621      	mov	r1, r4
 801d266:	f7ff fbe1 	bl	801ca2c <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 801d26a:	f8bd 3000 	ldrh.w	r3, [sp]
 801d26e:	f8bd 2008 	ldrh.w	r2, [sp, #8]
 801d272:	4669      	mov	r1, sp
 801d274:	4620      	mov	r0, r4
 801d276:	1a9b      	subs	r3, r3, r2
 801d278:	f8bd 200a 	ldrh.w	r2, [sp, #10]
 801d27c:	f8ad 3000 	strh.w	r3, [sp]
 801d280:	f8bd 3002 	ldrh.w	r3, [sp, #2]
 801d284:	1a9b      	subs	r3, r3, r2
 801d286:	f8ad 3002 	strh.w	r3, [sp, #2]
 801d28a:	f7fa fe9a 	bl	8017fc2 <_ZNK8touchgfx9Container4drawERKNS_4RectE>
 801d28e:	e7e5      	b.n	801d25c <_ZN8touchgfx6Screen4drawERNS_4RectE+0x2a>

0801d290 <_ZN8touchgfx6Screen14bindTransitionERNS_10TransitionE>:
 801d290:	460b      	mov	r3, r1
 801d292:	680a      	ldr	r2, [r1, #0]
 801d294:	1d01      	adds	r1, r0, #4
 801d296:	6992      	ldr	r2, [r2, #24]
 801d298:	4618      	mov	r0, r3
 801d29a:	4710      	bx	r2

0801d29c <_ZN8touchgfx15EasingEquations12cubicEaseOutEtsst>:
 801d29c:	4298      	cmp	r0, r3
 801d29e:	d200      	bcs.n	801d2a2 <_ZN8touchgfx15EasingEquations12cubicEaseOutEtsst+0x6>
 801d2a0:	b913      	cbnz	r3, 801d2a8 <_ZN8touchgfx15EasingEquations12cubicEaseOutEtsst+0xc>
 801d2a2:	440a      	add	r2, r1
 801d2a4:	b210      	sxth	r0, r2
 801d2a6:	4770      	bx	lr
 801d2a8:	ee07 0a90 	vmov	s15, r0
 801d2ac:	eef8 6a67 	vcvt.f32.u32	s13, s15
 801d2b0:	ee07 3a90 	vmov	s15, r3
 801d2b4:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 801d2b8:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 801d2bc:	ee07 2a90 	vmov	s15, r2
 801d2c0:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 801d2c4:	eeb8 6ae7 	vcvt.f32.s32	s12, s15
 801d2c8:	ee07 1a90 	vmov	s15, r1
 801d2cc:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 801d2d0:	ee37 7a66 	vsub.f32	s14, s14, s13
 801d2d4:	ee67 5a07 	vmul.f32	s11, s14, s14
 801d2d8:	eee5 6a87 	vfma.f32	s13, s11, s14
 801d2dc:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 801d2e0:	eee6 7a26 	vfma.f32	s15, s12, s13
 801d2e4:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 801d2e8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801d2ec:	bfcc      	ite	gt
 801d2ee:	ee77 7a87 	vaddgt.f32	s15, s15, s14
 801d2f2:	ee77 7ac7 	vsuble.f32	s15, s15, s14
 801d2f6:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 801d2fa:	ee17 3a90 	vmov	r3, s15
 801d2fe:	b218      	sxth	r0, r3
 801d300:	4770      	bx	lr

0801d302 <_ZN8touchgfx15EasingEquations14linearEaseNoneEtsst>:
 801d302:	4298      	cmp	r0, r3
 801d304:	d200      	bcs.n	801d308 <_ZN8touchgfx15EasingEquations14linearEaseNoneEtsst+0x6>
 801d306:	b913      	cbnz	r3, 801d30e <_ZN8touchgfx15EasingEquations14linearEaseNoneEtsst+0xc>
 801d308:	440a      	add	r2, r1
 801d30a:	b210      	sxth	r0, r2
 801d30c:	4770      	bx	lr
 801d30e:	ee07 2a90 	vmov	s15, r2
 801d312:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 801d316:	ee07 0a90 	vmov	s15, r0
 801d31a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 801d31e:	ee67 7a27 	vmul.f32	s15, s14, s15
 801d322:	ee07 3a10 	vmov	s14, r3
 801d326:	eef8 6ac7 	vcvt.f32.s32	s13, s14
 801d32a:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 801d32e:	ee07 1a90 	vmov	s15, r1
 801d332:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 801d336:	ee77 7a27 	vadd.f32	s15, s14, s15
 801d33a:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 801d33e:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 801d342:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801d346:	bfcc      	ite	gt
 801d348:	ee77 7a87 	vaddgt.f32	s15, s15, s14
 801d34c:	ee77 7ac7 	vsuble.f32	s15, s15, s14
 801d350:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 801d354:	ee17 3a90 	vmov	r3, s15
 801d358:	b218      	sxth	r0, r3
 801d35a:	4770      	bx	lr

0801d35c <_ZN8touchgfx12TextProviderC1Ev>:
 801d35c:	b538      	push	{r3, r4, r5, lr}
 801d35e:	2500      	movs	r5, #0
 801d360:	2302      	movs	r3, #2
 801d362:	4604      	mov	r4, r0
 801d364:	220e      	movs	r2, #14
 801d366:	7403      	strb	r3, [r0, #16]
 801d368:	4629      	mov	r1, r5
 801d36a:	6145      	str	r5, [r0, #20]
 801d36c:	7605      	strb	r5, [r0, #24]
 801d36e:	83c5      	strh	r5, [r0, #30]
 801d370:	8405      	strh	r5, [r0, #32]
 801d372:	86c5      	strh	r5, [r0, #54]	@ 0x36
 801d374:	8705      	strh	r5, [r0, #56]	@ 0x38
 801d376:	87c5      	strh	r5, [r0, #62]	@ 0x3e
 801d378:	f8a0 5040 	strh.w	r5, [r0, #64]	@ 0x40
 801d37c:	e9c0 5500 	strd	r5, r5, [r0]
 801d380:	e9c0 5511 	strd	r5, r5, [r0, #68]	@ 0x44
 801d384:	304c      	adds	r0, #76	@ 0x4c
 801d386:	f00d fe64 	bl	802b052 <memset>
 801d38a:	2301      	movs	r3, #1
 801d38c:	4620      	mov	r0, r4
 801d38e:	f8a4 505a 	strh.w	r5, [r4, #90]	@ 0x5a
 801d392:	f8a4 505c 	strh.w	r5, [r4, #92]	@ 0x5c
 801d396:	f8a4 505e 	strh.w	r5, [r4, #94]	@ 0x5e
 801d39a:	f884 3060 	strb.w	r3, [r4, #96]	@ 0x60
 801d39e:	f884 5061 	strb.w	r5, [r4, #97]	@ 0x61
 801d3a2:	f7ec fd8b 	bl	8009ebc <_ZN8touchgfx12TextProvider18initializeInternalEv>
 801d3a6:	4620      	mov	r0, r4
 801d3a8:	bd38      	pop	{r3, r4, r5, pc}

0801d3aa <_ZN8touchgfx12TextProvider19getNextCharInternalEv>:
 801d3aa:	b530      	push	{r4, r5, lr}
 801d3ac:	2500      	movs	r5, #0
 801d3ae:	2401      	movs	r4, #1
 801d3b0:	6843      	ldr	r3, [r0, #4]
 801d3b2:	b913      	cbnz	r3, 801d3ba <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x10>
 801d3b4:	6803      	ldr	r3, [r0, #0]
 801d3b6:	b313      	cbz	r3, 801d3fe <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x54>
 801d3b8:	6043      	str	r3, [r0, #4]
 801d3ba:	7e03      	ldrb	r3, [r0, #24]
 801d3bc:	b143      	cbz	r3, 801d3d0 <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x26>
 801d3be:	6943      	ldr	r3, [r0, #20]
 801d3c0:	b12b      	cbz	r3, 801d3ce <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x24>
 801d3c2:	881a      	ldrh	r2, [r3, #0]
 801d3c4:	b11a      	cbz	r2, 801d3ce <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x24>
 801d3c6:	1c9a      	adds	r2, r3, #2
 801d3c8:	6142      	str	r2, [r0, #20]
 801d3ca:	8818      	ldrh	r0, [r3, #0]
 801d3cc:	bd30      	pop	{r4, r5, pc}
 801d3ce:	7605      	strb	r5, [r0, #24]
 801d3d0:	6843      	ldr	r3, [r0, #4]
 801d3d2:	8819      	ldrh	r1, [r3, #0]
 801d3d4:	b199      	cbz	r1, 801d3fe <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x54>
 801d3d6:	1c9a      	adds	r2, r3, #2
 801d3d8:	2902      	cmp	r1, #2
 801d3da:	6042      	str	r2, [r0, #4]
 801d3dc:	d1f5      	bne.n	801d3ca <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x20>
 801d3de:	7c03      	ldrb	r3, [r0, #16]
 801d3e0:	2b01      	cmp	r3, #1
 801d3e2:	d8e5      	bhi.n	801d3b0 <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x6>
 801d3e4:	1c5a      	adds	r2, r3, #1
 801d3e6:	3302      	adds	r3, #2
 801d3e8:	7402      	strb	r2, [r0, #16]
 801d3ea:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
 801d3ee:	6143      	str	r3, [r0, #20]
 801d3f0:	2b00      	cmp	r3, #0
 801d3f2:	d0dd      	beq.n	801d3b0 <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x6>
 801d3f4:	881b      	ldrh	r3, [r3, #0]
 801d3f6:	2b00      	cmp	r3, #0
 801d3f8:	d0da      	beq.n	801d3b0 <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x6>
 801d3fa:	7604      	strb	r4, [r0, #24]
 801d3fc:	e7d8      	b.n	801d3b0 <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x6>
 801d3fe:	2000      	movs	r0, #0
 801d400:	e7e4      	b.n	801d3cc <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x22>

0801d402 <_ZN8touchgfx12TextProvider10initializeEPKtSt9__va_listS2_PKNS_24FontContextualFormsTableE>:
 801d402:	b430      	push	{r4, r5}
 801d404:	6815      	ldr	r5, [r2, #0]
 801d406:	6085      	str	r5, [r0, #8]
 801d408:	6852      	ldr	r2, [r2, #4]
 801d40a:	6443      	str	r3, [r0, #68]	@ 0x44
 801d40c:	60c2      	str	r2, [r0, #12]
 801d40e:	2200      	movs	r2, #0
 801d410:	9b02      	ldr	r3, [sp, #8]
 801d412:	7402      	strb	r2, [r0, #16]
 801d414:	6001      	str	r1, [r0, #0]
 801d416:	6483      	str	r3, [r0, #72]	@ 0x48
 801d418:	6042      	str	r2, [r0, #4]
 801d41a:	6142      	str	r2, [r0, #20]
 801d41c:	7602      	strb	r2, [r0, #24]
 801d41e:	8702      	strh	r2, [r0, #56]	@ 0x38
 801d420:	8402      	strh	r2, [r0, #32]
 801d422:	f8a0 2040 	strh.w	r2, [r0, #64]	@ 0x40
 801d426:	bc30      	pop	{r4, r5}
 801d428:	f7ec bd48 	b.w	8009ebc <_ZN8touchgfx12TextProvider18initializeInternalEv>

0801d42c <_ZN8touchgfx12TextProvider16adjustHindiGlyphEPKNS_9GlyphNodeE>:
 801d42c:	b5f0      	push	{r4, r5, r6, r7, lr}
 801d42e:	4605      	mov	r5, r0
 801d430:	4608      	mov	r0, r1
 801d432:	b1f1      	cbz	r1, 801d472 <_ZN8touchgfx12TextProvider16adjustHindiGlyphEPKNS_9GlyphNodeE+0x46>
 801d434:	f105 044c 	add.w	r4, r5, #76	@ 0x4c
 801d438:	460b      	mov	r3, r1
 801d43a:	f101 0708 	add.w	r7, r1, #8
 801d43e:	4622      	mov	r2, r4
 801d440:	6818      	ldr	r0, [r3, #0]
 801d442:	3308      	adds	r3, #8
 801d444:	f853 1c04 	ldr.w	r1, [r3, #-4]
 801d448:	4626      	mov	r6, r4
 801d44a:	42bb      	cmp	r3, r7
 801d44c:	c603      	stmia	r6!, {r0, r1}
 801d44e:	4634      	mov	r4, r6
 801d450:	d1f6      	bne.n	801d440 <_ZN8touchgfx12TextProvider16adjustHindiGlyphEPKNS_9GlyphNodeE+0x14>
 801d452:	6818      	ldr	r0, [r3, #0]
 801d454:	6030      	str	r0, [r6, #0]
 801d456:	4610      	mov	r0, r2
 801d458:	889b      	ldrh	r3, [r3, #4]
 801d45a:	80b3      	strh	r3, [r6, #4]
 801d45c:	f895 3059 	ldrb.w	r3, [r5, #89]	@ 0x59
 801d460:	015b      	lsls	r3, r3, #5
 801d462:	f403 7180 	and.w	r1, r3, #256	@ 0x100
 801d466:	f895 3052 	ldrb.w	r3, [r5, #82]	@ 0x52
 801d46a:	430b      	orrs	r3, r1
 801d46c:	425b      	negs	r3, r3
 801d46e:	f885 3055 	strb.w	r3, [r5, #85]	@ 0x55
 801d472:	bdf0      	pop	{r4, r5, r6, r7, pc}

0801d474 <_ZNK8touchgfx12TextProvider15thaiLookupGlyphEPKNS_9GlyphNodeEPKNS_4FontEt>:
 801d474:	b538      	push	{r3, r4, r5, lr}
 801d476:	460c      	mov	r4, r1
 801d478:	6811      	ldr	r1, [r2, #0]
 801d47a:	4610      	mov	r0, r2
 801d47c:	68cd      	ldr	r5, [r1, #12]
 801d47e:	4619      	mov	r1, r3
 801d480:	47a8      	blx	r5
 801d482:	2800      	cmp	r0, #0
 801d484:	bf08      	it	eq
 801d486:	4620      	moveq	r0, r4
 801d488:	bd38      	pop	{r3, r4, r5, pc}
	...

0801d48c <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE>:
 801d48c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801d48e:	4604      	mov	r4, r0
 801d490:	4615      	mov	r5, r2
 801d492:	4608      	mov	r0, r1
 801d494:	b93a      	cbnz	r2, 801d4a6 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x1a>
 801d496:	f8a4 205a 	strh.w	r2, [r4, #90]	@ 0x5a
 801d49a:	f8a4 205c 	strh.w	r2, [r4, #92]	@ 0x5c
 801d49e:	f8a4 205e 	strh.w	r2, [r4, #94]	@ 0x5e
 801d4a2:	4628      	mov	r0, r5
 801d4a4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801d4a6:	f892 c00d 	ldrb.w	ip, [r2, #13]
 801d4aa:	8893      	ldrh	r3, [r2, #4]
 801d4ac:	ea4f 160c 	mov.w	r6, ip, lsl #4
 801d4b0:	f406 7280 	and.w	r2, r6, #256	@ 0x100
 801d4b4:	79ee      	ldrb	r6, [r5, #7]
 801d4b6:	4316      	orrs	r6, r2
 801d4b8:	f46f 6263 	mvn.w	r2, #3632	@ 0xe30
 801d4bc:	189a      	adds	r2, r3, r2
 801d4be:	b2b7      	uxth	r7, r6
 801d4c0:	b291      	uxth	r1, r2
 801d4c2:	291d      	cmp	r1, #29
 801d4c4:	f200 8084 	bhi.w	801d5d0 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x144>
 801d4c8:	2201      	movs	r2, #1
 801d4ca:	10f6      	asrs	r6, r6, #3
 801d4cc:	408a      	lsls	r2, r1
 801d4ce:	4978      	ldr	r1, [pc, #480]	@ (801d6b0 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x224>)
 801d4d0:	420a      	tst	r2, r1
 801d4d2:	d12e      	bne.n	801d532 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0xa6>
 801d4d4:	f412 7f60 	tst.w	r2, #896	@ 0x380
 801d4d8:	d07a      	beq.n	801d5d0 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x144>
 801d4da:	f104 024c 	add.w	r2, r4, #76	@ 0x4c
 801d4de:	462b      	mov	r3, r5
 801d4e0:	f105 0e08 	add.w	lr, r5, #8
 801d4e4:	4615      	mov	r5, r2
 801d4e6:	6818      	ldr	r0, [r3, #0]
 801d4e8:	3308      	adds	r3, #8
 801d4ea:	f853 1c04 	ldr.w	r1, [r3, #-4]
 801d4ee:	4694      	mov	ip, r2
 801d4f0:	4573      	cmp	r3, lr
 801d4f2:	e8ac 0003 	stmia.w	ip!, {r0, r1}
 801d4f6:	4662      	mov	r2, ip
 801d4f8:	d1f5      	bne.n	801d4e6 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x5a>
 801d4fa:	6818      	ldr	r0, [r3, #0]
 801d4fc:	f8cc 0000 	str.w	r0, [ip]
 801d500:	889b      	ldrh	r3, [r3, #4]
 801d502:	f8ac 3004 	strh.w	r3, [ip, #4]
 801d506:	b2b3      	uxth	r3, r6
 801d508:	f8b4 105c 	ldrh.w	r1, [r4, #92]	@ 0x5c
 801d50c:	f894 0059 	ldrb.w	r0, [r4, #89]	@ 0x59
 801d510:	1aca      	subs	r2, r1, r3
 801d512:	1bcf      	subs	r7, r1, r7
 801d514:	f020 0060 	bic.w	r0, r0, #96	@ 0x60
 801d518:	b292      	uxth	r2, r2
 801d51a:	1afb      	subs	r3, r7, r3
 801d51c:	f884 2054 	strb.w	r2, [r4, #84]	@ 0x54
 801d520:	10d2      	asrs	r2, r2, #3
 801d522:	f002 0260 	and.w	r2, r2, #96	@ 0x60
 801d526:	4302      	orrs	r2, r0
 801d528:	f884 2059 	strb.w	r2, [r4, #89]	@ 0x59
 801d52c:	f8a4 305c 	strh.w	r3, [r4, #92]	@ 0x5c
 801d530:	e7b7      	b.n	801d4a2 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x16>
 801d532:	8f23      	ldrh	r3, [r4, #56]	@ 0x38
 801d534:	b92b      	cbnz	r3, 801d542 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0xb6>
 801d536:	4b5f      	ldr	r3, [pc, #380]	@ (801d6b4 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x228>)
 801d538:	21c0      	movs	r1, #192	@ 0xc0
 801d53a:	4a5f      	ldr	r2, [pc, #380]	@ (801d6b8 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x22c>)
 801d53c:	485f      	ldr	r0, [pc, #380]	@ (801d6bc <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x230>)
 801d53e:	f00d fb81 	bl	802ac44 <__assert_func>
 801d542:	8ee3      	ldrh	r3, [r4, #54]	@ 0x36
 801d544:	eb04 0343 	add.w	r3, r4, r3, lsl #1
 801d548:	8c59      	ldrh	r1, [r3, #34]	@ 0x22
 801d54a:	f640 6333 	movw	r3, #3635	@ 0xe33
 801d54e:	4299      	cmp	r1, r3
 801d550:	d110      	bne.n	801d574 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0xe8>
 801d552:	6803      	ldr	r3, [r0, #0]
 801d554:	68db      	ldr	r3, [r3, #12]
 801d556:	4798      	blx	r3
 801d558:	7b41      	ldrb	r1, [r0, #13]
 801d55a:	00cb      	lsls	r3, r1, #3
 801d55c:	f403 7280 	and.w	r2, r3, #256	@ 0x100
 801d560:	7a03      	ldrb	r3, [r0, #8]
 801d562:	0648      	lsls	r0, r1, #25
 801d564:	ea43 0302 	orr.w	r3, r3, r2
 801d568:	bf44      	itt	mi
 801d56a:	f5a3 7300 	submi.w	r3, r3, #512	@ 0x200
 801d56e:	b21b      	sxthmi	r3, r3
 801d570:	f8a4 305a 	strh.w	r3, [r4, #90]	@ 0x5a
 801d574:	f8b4 305a 	ldrh.w	r3, [r4, #90]	@ 0x5a
 801d578:	462a      	mov	r2, r5
 801d57a:	f105 0c08 	add.w	ip, r5, #8
 801d57e:	443b      	add	r3, r7
 801d580:	4433      	add	r3, r6
 801d582:	f104 064c 	add.w	r6, r4, #76	@ 0x4c
 801d586:	b29b      	uxth	r3, r3
 801d588:	4635      	mov	r5, r6
 801d58a:	f8a4 305a 	strh.w	r3, [r4, #90]	@ 0x5a
 801d58e:	6810      	ldr	r0, [r2, #0]
 801d590:	3208      	adds	r2, #8
 801d592:	f852 1c04 	ldr.w	r1, [r2, #-4]
 801d596:	4637      	mov	r7, r6
 801d598:	4562      	cmp	r2, ip
 801d59a:	c703      	stmia	r7!, {r0, r1}
 801d59c:	463e      	mov	r6, r7
 801d59e:	d1f6      	bne.n	801d58e <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x102>
 801d5a0:	6810      	ldr	r0, [r2, #0]
 801d5a2:	6038      	str	r0, [r7, #0]
 801d5a4:	8892      	ldrh	r2, [r2, #4]
 801d5a6:	80ba      	strh	r2, [r7, #4]
 801d5a8:	f884 3054 	strb.w	r3, [r4, #84]	@ 0x54
 801d5ac:	10db      	asrs	r3, r3, #3
 801d5ae:	f894 2059 	ldrb.w	r2, [r4, #89]	@ 0x59
 801d5b2:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 801d5b6:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 801d5ba:	4313      	orrs	r3, r2
 801d5bc:	f894 205e 	ldrb.w	r2, [r4, #94]	@ 0x5e
 801d5c0:	f884 3059 	strb.w	r3, [r4, #89]	@ 0x59
 801d5c4:	f894 3055 	ldrb.w	r3, [r4, #85]	@ 0x55
 801d5c8:	1a9b      	subs	r3, r3, r2
 801d5ca:	f884 3055 	strb.w	r3, [r4, #85]	@ 0x55
 801d5ce:	e768      	b.n	801d4a2 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x16>
 801d5d0:	f023 0204 	bic.w	r2, r3, #4
 801d5d4:	f640 611b 	movw	r1, #3611	@ 0xe1b
 801d5d8:	428a      	cmp	r2, r1
 801d5da:	d003      	beq.n	801d5e4 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x158>
 801d5dc:	f640 621d 	movw	r2, #3613	@ 0xe1d
 801d5e0:	4293      	cmp	r3, r2
 801d5e2:	d120      	bne.n	801d626 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x19a>
 801d5e4:	3b01      	subs	r3, #1
 801d5e6:	4602      	mov	r2, r0
 801d5e8:	4629      	mov	r1, r5
 801d5ea:	4620      	mov	r0, r4
 801d5ec:	b29b      	uxth	r3, r3
 801d5ee:	f7ff ff41 	bl	801d474 <_ZNK8touchgfx12TextProvider15thaiLookupGlyphEPKNS_9GlyphNodeEPKNS_4FontEt>
 801d5f2:	7b41      	ldrb	r1, [r0, #13]
 801d5f4:	00cb      	lsls	r3, r1, #3
 801d5f6:	0649      	lsls	r1, r1, #25
 801d5f8:	f403 7280 	and.w	r2, r3, #256	@ 0x100
 801d5fc:	7a03      	ldrb	r3, [r0, #8]
 801d5fe:	ea43 0302 	orr.w	r3, r3, r2
 801d602:	bf44      	itt	mi
 801d604:	f5a3 7300 	submi.w	r3, r3, #512	@ 0x200
 801d608:	b21b      	sxthmi	r3, r3
 801d60a:	f8a4 305a 	strh.w	r3, [r4, #90]	@ 0x5a
 801d60e:	7b6b      	ldrb	r3, [r5, #13]
 801d610:	7aaa      	ldrb	r2, [r5, #10]
 801d612:	005b      	lsls	r3, r3, #1
 801d614:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 801d618:	4313      	orrs	r3, r2
 801d61a:	115a      	asrs	r2, r3, #5
 801d61c:	eb02 0393 	add.w	r3, r2, r3, lsr #2
 801d620:	f8a4 305e 	strh.w	r3, [r4, #94]	@ 0x5e
 801d624:	e035      	b.n	801d692 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x206>
 801d626:	ea4f 02cc 	mov.w	r2, ip, lsl #3
 801d62a:	f01c 0f40 	tst.w	ip, #64	@ 0x40
 801d62e:	f402 7180 	and.w	r1, r2, #256	@ 0x100
 801d632:	7a2a      	ldrb	r2, [r5, #8]
 801d634:	ea42 0201 	orr.w	r2, r2, r1
 801d638:	f640 6109 	movw	r1, #3593	@ 0xe09
 801d63c:	bf1c      	itt	ne
 801d63e:	f5a2 7200 	subne.w	r2, r2, #512	@ 0x200
 801d642:	b212      	sxthne	r2, r2
 801d644:	f8a4 205a 	strh.w	r2, [r4, #90]	@ 0x5a
 801d648:	f023 0210 	bic.w	r2, r3, #16
 801d64c:	428a      	cmp	r2, r1
 801d64e:	d003      	beq.n	801d658 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x1cc>
 801d650:	f640 6213 	movw	r2, #3603	@ 0xe13
 801d654:	4293      	cmp	r3, r2
 801d656:	d129      	bne.n	801d6ac <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x220>
 801d658:	7b6e      	ldrb	r6, [r5, #13]
 801d65a:	4629      	mov	r1, r5
 801d65c:	0076      	lsls	r6, r6, #1
 801d65e:	f406 7280 	and.w	r2, r6, #256	@ 0x100
 801d662:	7aae      	ldrb	r6, [r5, #10]
 801d664:	4316      	orrs	r6, r2
 801d666:	f640 6213 	movw	r2, #3603	@ 0xe13
 801d66a:	4293      	cmp	r3, r2
 801d66c:	4602      	mov	r2, r0
 801d66e:	4620      	mov	r0, r4
 801d670:	bf16      	itet	ne
 801d672:	f103 33ff 	addne.w	r3, r3, #4294967295
 801d676:	f640 630c 	movweq	r3, #3596	@ 0xe0c
 801d67a:	b29b      	uxthne	r3, r3
 801d67c:	f7ff fefa 	bl	801d474 <_ZNK8touchgfx12TextProvider15thaiLookupGlyphEPKNS_9GlyphNodeEPKNS_4FontEt>
 801d680:	7b43      	ldrb	r3, [r0, #13]
 801d682:	7a82      	ldrb	r2, [r0, #10]
 801d684:	005b      	lsls	r3, r3, #1
 801d686:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 801d68a:	4313      	orrs	r3, r2
 801d68c:	1af6      	subs	r6, r6, r3
 801d68e:	f8a4 605e 	strh.w	r6, [r4, #94]	@ 0x5e
 801d692:	7b69      	ldrb	r1, [r5, #13]
 801d694:	00cb      	lsls	r3, r1, #3
 801d696:	f403 7280 	and.w	r2, r3, #256	@ 0x100
 801d69a:	7a2b      	ldrb	r3, [r5, #8]
 801d69c:	4313      	orrs	r3, r2
 801d69e:	064a      	lsls	r2, r1, #25
 801d6a0:	bf44      	itt	mi
 801d6a2:	f5a3 7300 	submi.w	r3, r3, #512	@ 0x200
 801d6a6:	b21b      	sxthmi	r3, r3
 801d6a8:	1bdb      	subs	r3, r3, r7
 801d6aa:	e73f      	b.n	801d52c <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0xa0>
 801d6ac:	2300      	movs	r3, #0
 801d6ae:	e7b7      	b.n	801d620 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x194>
 801d6b0:	3fc00079 	.word	0x3fc00079
 801d6b4:	0802f3b8 	.word	0x0802f3b8
 801d6b8:	0802f62a 	.word	0x0802f62a
 801d6bc:	0802f3c1 	.word	0x0802f3c1

0801d6c0 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt>:
 801d6c0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 801d6c4:	4604      	mov	r4, r0
 801d6c6:	b942      	cbnz	r2, 801d6da <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x1a>
 801d6c8:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 801d6cc:	f8a0 305a 	strh.w	r3, [r0, #90]	@ 0x5a
 801d6d0:	f8a0 305c 	strh.w	r3, [r0, #92]	@ 0x5c
 801d6d4:	f8a4 305e 	strh.w	r3, [r4, #94]	@ 0x5e
 801d6d8:	e046      	b.n	801d768 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xa8>
 801d6da:	7b51      	ldrb	r1, [r2, #13]
 801d6dc:	8893      	ldrh	r3, [r2, #4]
 801d6de:	010f      	lsls	r7, r1, #4
 801d6e0:	f407 7080 	and.w	r0, r7, #256	@ 0x100
 801d6e4:	79d7      	ldrb	r7, [r2, #7]
 801d6e6:	4307      	orrs	r7, r0
 801d6e8:	2f04      	cmp	r7, #4
 801d6ea:	b2bd      	uxth	r5, r7
 801d6ec:	bfcc      	ite	gt
 801d6ee:	08bf      	lsrgt	r7, r7, #2
 801d6f0:	2701      	movle	r7, #1
 801d6f2:	f5b3 6fdd 	cmp.w	r3, #1768	@ 0x6e8
 801d6f6:	f200 80ab 	bhi.w	801d850 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x190>
 801d6fa:	f240 60e7 	movw	r0, #1767	@ 0x6e7
 801d6fe:	4283      	cmp	r3, r0
 801d700:	d216      	bcs.n	801d730 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x70>
 801d702:	f240 605b 	movw	r0, #1627	@ 0x65b
 801d706:	4283      	cmp	r3, r0
 801d708:	d859      	bhi.n	801d7be <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xfe>
 801d70a:	f240 6057 	movw	r0, #1623	@ 0x657
 801d70e:	4283      	cmp	r3, r0
 801d710:	d20e      	bcs.n	801d730 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x70>
 801d712:	f5b3 6fca 	cmp.w	r3, #1616	@ 0x650
 801d716:	d24a      	bcs.n	801d7ae <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xee>
 801d718:	f240 604e 	movw	r0, #1614	@ 0x64e
 801d71c:	4283      	cmp	r3, r0
 801d71e:	d207      	bcs.n	801d730 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x70>
 801d720:	f240 601a 	movw	r0, #1562	@ 0x61a
 801d724:	4283      	cmp	r3, r0
 801d726:	d02a      	beq.n	801d77e <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xbe>
 801d728:	d821      	bhi.n	801d76e <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xae>
 801d72a:	f5b3 6fc2 	cmp.w	r3, #1552	@ 0x610
 801d72e:	d35b      	bcc.n	801d7e8 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x128>
 801d730:	f9b4 305a 	ldrsh.w	r3, [r4, #90]	@ 0x5a
 801d734:	f513 4f00 	cmn.w	r3, #32768	@ 0x8000
 801d738:	f040 80d0 	bne.w	801d8dc <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x21c>
 801d73c:	f9b4 005c 	ldrsh.w	r0, [r4, #92]	@ 0x5c
 801d740:	f510 4f00 	cmn.w	r0, #32768	@ 0x8000
 801d744:	f040 80ca 	bne.w	801d8dc <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x21c>
 801d748:	00cb      	lsls	r3, r1, #3
 801d74a:	0649      	lsls	r1, r1, #25
 801d74c:	f403 7080 	and.w	r0, r3, #256	@ 0x100
 801d750:	7a13      	ldrb	r3, [r2, #8]
 801d752:	ea43 0300 	orr.w	r3, r3, r0
 801d756:	bf44      	itt	mi
 801d758:	f5a3 7300 	submi.w	r3, r3, #512	@ 0x200
 801d75c:	b21b      	sxthmi	r3, r3
 801d75e:	f8a4 305a 	strh.w	r3, [r4, #90]	@ 0x5a
 801d762:	1b5d      	subs	r5, r3, r5
 801d764:	f8a4 505c 	strh.w	r5, [r4, #92]	@ 0x5c
 801d768:	4610      	mov	r0, r2
 801d76a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801d76e:	f240 604b 	movw	r0, #1611	@ 0x64b
 801d772:	4283      	cmp	r3, r0
 801d774:	d338      	bcc.n	801d7e8 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x128>
 801d776:	f240 604c 	movw	r0, #1612	@ 0x64c
 801d77a:	4283      	cmp	r3, r0
 801d77c:	d9d8      	bls.n	801d730 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x70>
 801d77e:	f9b4 005a 	ldrsh.w	r0, [r4, #90]	@ 0x5a
 801d782:	f9b4 305c 	ldrsh.w	r3, [r4, #92]	@ 0x5c
 801d786:	f510 4f00 	cmn.w	r0, #32768	@ 0x8000
 801d78a:	f040 80f2 	bne.w	801d972 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x2b2>
 801d78e:	f513 4f00 	cmn.w	r3, #32768	@ 0x8000
 801d792:	f040 80ee 	bne.w	801d972 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x2b2>
 801d796:	00cb      	lsls	r3, r1, #3
 801d798:	064e      	lsls	r6, r1, #25
 801d79a:	f403 7080 	and.w	r0, r3, #256	@ 0x100
 801d79e:	7a13      	ldrb	r3, [r2, #8]
 801d7a0:	ea43 0300 	orr.w	r3, r3, r0
 801d7a4:	bf44      	itt	mi
 801d7a6:	f5a3 7300 	submi.w	r3, r3, #512	@ 0x200
 801d7aa:	b21b      	sxthmi	r3, r3
 801d7ac:	e7d9      	b.n	801d762 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xa2>
 801d7ae:	f240 6054 	movw	r0, #1620	@ 0x654
 801d7b2:	4283      	cmp	r3, r0
 801d7b4:	d8e3      	bhi.n	801d77e <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xbe>
 801d7b6:	f5b3 6fca 	cmp.w	r3, #1616	@ 0x650
 801d7ba:	d9e0      	bls.n	801d77e <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xbe>
 801d7bc:	e7b8      	b.n	801d730 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x70>
 801d7be:	f240 6074 	movw	r0, #1652	@ 0x674
 801d7c2:	4283      	cmp	r3, r0
 801d7c4:	d0b4      	beq.n	801d730 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x70>
 801d7c6:	d82d      	bhi.n	801d824 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x164>
 801d7c8:	f240 605e 	movw	r0, #1630	@ 0x65e
 801d7cc:	4283      	cmp	r3, r0
 801d7ce:	d804      	bhi.n	801d7da <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x11a>
 801d7d0:	f240 605d 	movw	r0, #1629	@ 0x65d
 801d7d4:	4283      	cmp	r3, r0
 801d7d6:	d3d2      	bcc.n	801d77e <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xbe>
 801d7d8:	e7aa      	b.n	801d730 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x70>
 801d7da:	f240 605f 	movw	r0, #1631	@ 0x65f
 801d7de:	4283      	cmp	r3, r0
 801d7e0:	d0cd      	beq.n	801d77e <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xbe>
 801d7e2:	f5b3 6fce 	cmp.w	r3, #1648	@ 0x670
 801d7e6:	d0a3      	beq.n	801d730 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x70>
 801d7e8:	00cb      	lsls	r3, r1, #3
 801d7ea:	0649      	lsls	r1, r1, #25
 801d7ec:	f403 7080 	and.w	r0, r3, #256	@ 0x100
 801d7f0:	7a13      	ldrb	r3, [r2, #8]
 801d7f2:	ea43 0300 	orr.w	r3, r3, r0
 801d7f6:	bf44      	itt	mi
 801d7f8:	f5a3 7300 	submi.w	r3, r3, #512	@ 0x200
 801d7fc:	b21b      	sxthmi	r3, r3
 801d7fe:	1b5d      	subs	r5, r3, r5
 801d800:	f8a4 305a 	strh.w	r3, [r4, #90]	@ 0x5a
 801d804:	f8a4 505c 	strh.w	r5, [r4, #92]	@ 0x5c
 801d808:	7b53      	ldrb	r3, [r2, #13]
 801d80a:	015b      	lsls	r3, r3, #5
 801d80c:	f403 7180 	and.w	r1, r3, #256	@ 0x100
 801d810:	7993      	ldrb	r3, [r2, #6]
 801d812:	430b      	orrs	r3, r1
 801d814:	2105      	movs	r1, #5
 801d816:	005b      	lsls	r3, r3, #1
 801d818:	fb93 f3f1 	sdiv	r3, r3, r1
 801d81c:	f992 1009 	ldrsb.w	r1, [r2, #9]
 801d820:	440b      	add	r3, r1
 801d822:	e757      	b.n	801d6d4 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x14>
 801d824:	f240 60e2 	movw	r0, #1762	@ 0x6e2
 801d828:	4283      	cmp	r3, r0
 801d82a:	d809      	bhi.n	801d840 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x180>
 801d82c:	f240 60df 	movw	r0, #1759	@ 0x6df
 801d830:	4283      	cmp	r3, r0
 801d832:	f4bf af7d 	bcs.w	801d730 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x70>
 801d836:	f2a3 63d6 	subw	r3, r3, #1750	@ 0x6d6
 801d83a:	2b05      	cmp	r3, #5
 801d83c:	d8d4      	bhi.n	801d7e8 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x128>
 801d83e:	e777      	b.n	801d730 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x70>
 801d840:	f240 60e3 	movw	r0, #1763	@ 0x6e3
 801d844:	4283      	cmp	r3, r0
 801d846:	d09a      	beq.n	801d77e <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xbe>
 801d848:	f240 60e4 	movw	r0, #1764	@ 0x6e4
 801d84c:	4283      	cmp	r3, r0
 801d84e:	e7ca      	b.n	801d7e6 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x126>
 801d850:	f5b3 6f0f 	cmp.w	r3, #2288	@ 0x8f0
 801d854:	d22b      	bcs.n	801d8ae <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x1ee>
 801d856:	f640 00ed 	movw	r0, #2285	@ 0x8ed
 801d85a:	4283      	cmp	r3, r0
 801d85c:	d28f      	bcs.n	801d77e <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xbe>
 801d85e:	f640 00e5 	movw	r0, #2277	@ 0x8e5
 801d862:	4283      	cmp	r3, r0
 801d864:	d816      	bhi.n	801d894 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x1d4>
 801d866:	f640 00e4 	movw	r0, #2276	@ 0x8e4
 801d86a:	4283      	cmp	r3, r0
 801d86c:	f4bf af60 	bcs.w	801d730 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x70>
 801d870:	f240 60ec 	movw	r0, #1772	@ 0x6ec
 801d874:	4283      	cmp	r3, r0
 801d876:	d80a      	bhi.n	801d88e <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x1ce>
 801d878:	f240 60eb 	movw	r0, #1771	@ 0x6eb
 801d87c:	4283      	cmp	r3, r0
 801d87e:	f4bf af57 	bcs.w	801d730 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x70>
 801d882:	f240 60ea 	movw	r0, #1770	@ 0x6ea
 801d886:	4283      	cmp	r3, r0
 801d888:	f43f af79 	beq.w	801d77e <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xbe>
 801d88c:	e7ac      	b.n	801d7e8 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x128>
 801d88e:	f240 60ed 	movw	r0, #1773	@ 0x6ed
 801d892:	e7f8      	b.n	801d886 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x1c6>
 801d894:	f640 00e8 	movw	r0, #2280	@ 0x8e8
 801d898:	4283      	cmp	r3, r0
 801d89a:	d802      	bhi.n	801d8a2 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x1e2>
 801d89c:	f640 00e7 	movw	r0, #2279	@ 0x8e7
 801d8a0:	e798      	b.n	801d7d4 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x114>
 801d8a2:	f640 00e9 	movw	r0, #2281	@ 0x8e9
 801d8a6:	4283      	cmp	r3, r0
 801d8a8:	f47f af42 	bne.w	801d730 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x70>
 801d8ac:	e767      	b.n	801d77e <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xbe>
 801d8ae:	f640 00f6 	movw	r0, #2294	@ 0x8f6
 801d8b2:	4283      	cmp	r3, r0
 801d8b4:	f43f af63 	beq.w	801d77e <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xbe>
 801d8b8:	d802      	bhi.n	801d8c0 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x200>
 801d8ba:	f640 00f2 	movw	r0, #2290	@ 0x8f2
 801d8be:	e7f2      	b.n	801d8a6 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x1e6>
 801d8c0:	f640 00fa 	movw	r0, #2298	@ 0x8fa
 801d8c4:	4283      	cmp	r3, r0
 801d8c6:	d805      	bhi.n	801d8d4 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x214>
 801d8c8:	f640 00f9 	movw	r0, #2297	@ 0x8f9
 801d8cc:	4283      	cmp	r3, r0
 801d8ce:	f4ff af2f 	bcc.w	801d730 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x70>
 801d8d2:	e754      	b.n	801d77e <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xbe>
 801d8d4:	f640 00fe 	movw	r0, #2302	@ 0x8fe
 801d8d8:	4283      	cmp	r3, r0
 801d8da:	e7af      	b.n	801d83c <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x17c>
 801d8dc:	f104 0c4c 	add.w	ip, r4, #76	@ 0x4c
 801d8e0:	4617      	mov	r7, r2
 801d8e2:	f102 0808 	add.w	r8, r2, #8
 801d8e6:	4666      	mov	r6, ip
 801d8e8:	6838      	ldr	r0, [r7, #0]
 801d8ea:	3708      	adds	r7, #8
 801d8ec:	f857 1c04 	ldr.w	r1, [r7, #-4]
 801d8f0:	46e6      	mov	lr, ip
 801d8f2:	4547      	cmp	r7, r8
 801d8f4:	e8ae 0003 	stmia.w	lr!, {r0, r1}
 801d8f8:	46f4      	mov	ip, lr
 801d8fa:	d1f5      	bne.n	801d8e8 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x228>
 801d8fc:	6838      	ldr	r0, [r7, #0]
 801d8fe:	f8ce 0000 	str.w	r0, [lr]
 801d902:	88b9      	ldrh	r1, [r7, #4]
 801d904:	f8ae 1004 	strh.w	r1, [lr, #4]
 801d908:	f9b4 005e 	ldrsh.w	r0, [r4, #94]	@ 0x5e
 801d90c:	f510 4f00 	cmn.w	r0, #32768	@ 0x8000
 801d910:	d009      	beq.n	801d926 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x266>
 801d912:	7b51      	ldrb	r1, [r2, #13]
 801d914:	7992      	ldrb	r2, [r2, #6]
 801d916:	0149      	lsls	r1, r1, #5
 801d918:	f401 7180 	and.w	r1, r1, #256	@ 0x100
 801d91c:	4311      	orrs	r1, r2
 801d91e:	eba0 0051 	sub.w	r0, r0, r1, lsr #1
 801d922:	f884 0055 	strb.w	r0, [r4, #85]	@ 0x55
 801d926:	f513 4f00 	cmn.w	r3, #32768	@ 0x8000
 801d92a:	d00d      	beq.n	801d948 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x288>
 801d92c:	442b      	add	r3, r5
 801d92e:	f894 2059 	ldrb.w	r2, [r4, #89]	@ 0x59
 801d932:	b29b      	uxth	r3, r3
 801d934:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 801d938:	f884 3054 	strb.w	r3, [r4, #84]	@ 0x54
 801d93c:	10db      	asrs	r3, r3, #3
 801d93e:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 801d942:	4313      	orrs	r3, r2
 801d944:	f884 3059 	strb.w	r3, [r4, #89]	@ 0x59
 801d948:	f894 1059 	ldrb.w	r1, [r4, #89]	@ 0x59
 801d94c:	00cb      	lsls	r3, r1, #3
 801d94e:	064f      	lsls	r7, r1, #25
 801d950:	f403 7280 	and.w	r2, r3, #256	@ 0x100
 801d954:	f894 3054 	ldrb.w	r3, [r4, #84]	@ 0x54
 801d958:	ea43 0302 	orr.w	r3, r3, r2
 801d95c:	bf44      	itt	mi
 801d95e:	f5a3 7300 	submi.w	r3, r3, #512	@ 0x200
 801d962:	b21b      	sxthmi	r3, r3
 801d964:	f8a4 305a 	strh.w	r3, [r4, #90]	@ 0x5a
 801d968:	1b5d      	subs	r5, r3, r5
 801d96a:	4632      	mov	r2, r6
 801d96c:	f8a4 505c 	strh.w	r5, [r4, #92]	@ 0x5c
 801d970:	e6fa      	b.n	801d768 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xa8>
 801d972:	f104 0e4c 	add.w	lr, r4, #76	@ 0x4c
 801d976:	4694      	mov	ip, r2
 801d978:	f102 0908 	add.w	r9, r2, #8
 801d97c:	4676      	mov	r6, lr
 801d97e:	f8dc 0000 	ldr.w	r0, [ip]
 801d982:	f10c 0c08 	add.w	ip, ip, #8
 801d986:	f85c 1c04 	ldr.w	r1, [ip, #-4]
 801d98a:	46f0      	mov	r8, lr
 801d98c:	45cc      	cmp	ip, r9
 801d98e:	e8a8 0003 	stmia.w	r8!, {r0, r1}
 801d992:	46c6      	mov	lr, r8
 801d994:	d1f3      	bne.n	801d97e <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x2be>
 801d996:	f8dc 0000 	ldr.w	r0, [ip]
 801d99a:	f8c8 0000 	str.w	r0, [r8]
 801d99e:	f8bc 1004 	ldrh.w	r1, [ip, #4]
 801d9a2:	f8a8 1004 	strh.w	r1, [r8, #4]
 801d9a6:	f9b4 005e 	ldrsh.w	r0, [r4, #94]	@ 0x5e
 801d9aa:	f510 4f00 	cmn.w	r0, #32768	@ 0x8000
 801d9ae:	d009      	beq.n	801d9c4 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x304>
 801d9b0:	7b51      	ldrb	r1, [r2, #13]
 801d9b2:	7992      	ldrb	r2, [r2, #6]
 801d9b4:	0149      	lsls	r1, r1, #5
 801d9b6:	f401 7180 	and.w	r1, r1, #256	@ 0x100
 801d9ba:	4311      	orrs	r1, r2
 801d9bc:	eba0 0051 	sub.w	r0, r0, r1, lsr #1
 801d9c0:	f884 0055 	strb.w	r0, [r4, #85]	@ 0x55
 801d9c4:	f513 4f00 	cmn.w	r3, #32768	@ 0x8000
 801d9c8:	d00d      	beq.n	801d9e6 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x326>
 801d9ca:	1bdb      	subs	r3, r3, r7
 801d9cc:	f894 2059 	ldrb.w	r2, [r4, #89]	@ 0x59
 801d9d0:	b29b      	uxth	r3, r3
 801d9d2:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 801d9d6:	f884 3054 	strb.w	r3, [r4, #84]	@ 0x54
 801d9da:	10db      	asrs	r3, r3, #3
 801d9dc:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 801d9e0:	4313      	orrs	r3, r2
 801d9e2:	f884 3059 	strb.w	r3, [r4, #89]	@ 0x59
 801d9e6:	f894 1059 	ldrb.w	r1, [r4, #89]	@ 0x59
 801d9ea:	00cb      	lsls	r3, r1, #3
 801d9ec:	0648      	lsls	r0, r1, #25
 801d9ee:	f403 7280 	and.w	r2, r3, #256	@ 0x100
 801d9f2:	f894 3054 	ldrb.w	r3, [r4, #84]	@ 0x54
 801d9f6:	ea43 0302 	orr.w	r3, r3, r2
 801d9fa:	bf44      	itt	mi
 801d9fc:	f5a3 7300 	submi.w	r3, r3, #512	@ 0x200
 801da00:	b21b      	sxthmi	r3, r3
 801da02:	e7b1      	b.n	801d968 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x2a8>

0801da04 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE>:
 801da04:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801da08:	461e      	mov	r6, r3
 801da0a:	8f03      	ldrh	r3, [r0, #56]	@ 0x38
 801da0c:	4604      	mov	r4, r0
 801da0e:	4617      	mov	r7, r2
 801da10:	b92b      	cbnz	r3, 801da1e <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE+0x1a>
 801da12:	4b25      	ldr	r3, [pc, #148]	@ (801daa8 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE+0xa4>)
 801da14:	21c0      	movs	r1, #192	@ 0xc0
 801da16:	4a25      	ldr	r2, [pc, #148]	@ (801daac <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE+0xa8>)
 801da18:	4825      	ldr	r0, [pc, #148]	@ (801dab0 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE+0xac>)
 801da1a:	f00d f913 	bl	802ac44 <__assert_func>
 801da1e:	8ec3      	ldrh	r3, [r0, #54]	@ 0x36
 801da20:	eb00 0343 	add.w	r3, r0, r3, lsl #1
 801da24:	f8b3 8022 	ldrh.w	r8, [r3, #34]	@ 0x22
 801da28:	f7ec f9a2 	bl	8009d70 <_ZN8touchgfx12TextProvider15getNextLigatureEh>
 801da2c:	4605      	mov	r5, r0
 801da2e:	b918      	cbnz	r0, 801da38 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE+0x34>
 801da30:	6030      	str	r0, [r6, #0]
 801da32:	4628      	mov	r0, r5
 801da34:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801da38:	683b      	ldr	r3, [r7, #0]
 801da3a:	4601      	mov	r1, r0
 801da3c:	4638      	mov	r0, r7
 801da3e:	68db      	ldr	r3, [r3, #12]
 801da40:	4798      	blx	r3
 801da42:	f5a8 63c0 	sub.w	r3, r8, #1536	@ 0x600
 801da46:	4602      	mov	r2, r0
 801da48:	6030      	str	r0, [r6, #0]
 801da4a:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 801da4e:	d213      	bcs.n	801da78 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE+0x74>
 801da50:	4643      	mov	r3, r8
 801da52:	4639      	mov	r1, r7
 801da54:	4620      	mov	r0, r4
 801da56:	f7ff fe33 	bl	801d6c0 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt>
 801da5a:	6030      	str	r0, [r6, #0]
 801da5c:	6833      	ldr	r3, [r6, #0]
 801da5e:	b143      	cbz	r3, 801da72 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE+0x6e>
 801da60:	7b5a      	ldrb	r2, [r3, #13]
 801da62:	7a9b      	ldrb	r3, [r3, #10]
 801da64:	0052      	lsls	r2, r2, #1
 801da66:	f402 7280 	and.w	r2, r2, #256	@ 0x100
 801da6a:	4313      	orrs	r3, r2
 801da6c:	bf0c      	ite	eq
 801da6e:	2301      	moveq	r3, #1
 801da70:	2300      	movne	r3, #0
 801da72:	f884 3061 	strb.w	r3, [r4, #97]	@ 0x61
 801da76:	e7dc      	b.n	801da32 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE+0x2e>
 801da78:	f5a5 6360 	sub.w	r3, r5, #3584	@ 0xe00
 801da7c:	b29b      	uxth	r3, r3
 801da7e:	2b7f      	cmp	r3, #127	@ 0x7f
 801da80:	d804      	bhi.n	801da8c <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE+0x88>
 801da82:	4639      	mov	r1, r7
 801da84:	4620      	mov	r0, r4
 801da86:	f7ff fd01 	bl	801d48c <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE>
 801da8a:	e7e6      	b.n	801da5a <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE+0x56>
 801da8c:	f894 3061 	ldrb.w	r3, [r4, #97]	@ 0x61
 801da90:	2b00      	cmp	r3, #0
 801da92:	d0e3      	beq.n	801da5c <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE+0x58>
 801da94:	f640 1302 	movw	r3, #2306	@ 0x902
 801da98:	429d      	cmp	r5, r3
 801da9a:	d1df      	bne.n	801da5c <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE+0x58>
 801da9c:	4601      	mov	r1, r0
 801da9e:	4620      	mov	r0, r4
 801daa0:	f7ff fcc4 	bl	801d42c <_ZN8touchgfx12TextProvider16adjustHindiGlyphEPKNS_9GlyphNodeE>
 801daa4:	e7d9      	b.n	801da5a <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE+0x56>
 801daa6:	bf00      	nop
 801daa8:	0802f3b8 	.word	0x0802f3b8
 801daac:	0802f62a 	.word	0x0802f62a
 801dab0:	0802f3c1 	.word	0x0802f3c1

0801dab4 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeERPKhRh>:
 801dab4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801dab8:	461e      	mov	r6, r3
 801daba:	8f03      	ldrh	r3, [r0, #56]	@ 0x38
 801dabc:	4604      	mov	r4, r0
 801dabe:	4617      	mov	r7, r2
 801dac0:	b92b      	cbnz	r3, 801dace <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeERPKhRh+0x1a>
 801dac2:	4b26      	ldr	r3, [pc, #152]	@ (801db5c <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeERPKhRh+0xa8>)
 801dac4:	21c0      	movs	r1, #192	@ 0xc0
 801dac6:	4a26      	ldr	r2, [pc, #152]	@ (801db60 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeERPKhRh+0xac>)
 801dac8:	4826      	ldr	r0, [pc, #152]	@ (801db64 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeERPKhRh+0xb0>)
 801daca:	f00d f8bb 	bl	802ac44 <__assert_func>
 801dace:	8ec3      	ldrh	r3, [r0, #54]	@ 0x36
 801dad0:	eb00 0343 	add.w	r3, r0, r3, lsl #1
 801dad4:	f8b3 8022 	ldrh.w	r8, [r3, #34]	@ 0x22
 801dad8:	f7ec f94a 	bl	8009d70 <_ZN8touchgfx12TextProvider15getNextLigatureEh>
 801dadc:	4605      	mov	r5, r0
 801dade:	b918      	cbnz	r0, 801dae8 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeERPKhRh+0x34>
 801dae0:	6030      	str	r0, [r6, #0]
 801dae2:	4628      	mov	r0, r5
 801dae4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801dae8:	683b      	ldr	r3, [r7, #0]
 801daea:	4601      	mov	r1, r0
 801daec:	4638      	mov	r0, r7
 801daee:	f8d3 9008 	ldr.w	r9, [r3, #8]
 801daf2:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 801daf6:	47c8      	blx	r9
 801daf8:	f5a8 63c0 	sub.w	r3, r8, #1536	@ 0x600
 801dafc:	4602      	mov	r2, r0
 801dafe:	6030      	str	r0, [r6, #0]
 801db00:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 801db04:	d213      	bcs.n	801db2e <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeERPKhRh+0x7a>
 801db06:	4643      	mov	r3, r8
 801db08:	4639      	mov	r1, r7
 801db0a:	4620      	mov	r0, r4
 801db0c:	f7ff fdd8 	bl	801d6c0 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt>
 801db10:	6030      	str	r0, [r6, #0]
 801db12:	6833      	ldr	r3, [r6, #0]
 801db14:	b143      	cbz	r3, 801db28 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeERPKhRh+0x74>
 801db16:	7b5a      	ldrb	r2, [r3, #13]
 801db18:	7a9b      	ldrb	r3, [r3, #10]
 801db1a:	0052      	lsls	r2, r2, #1
 801db1c:	f402 7280 	and.w	r2, r2, #256	@ 0x100
 801db20:	4313      	orrs	r3, r2
 801db22:	bf0c      	ite	eq
 801db24:	2301      	moveq	r3, #1
 801db26:	2300      	movne	r3, #0
 801db28:	f884 3061 	strb.w	r3, [r4, #97]	@ 0x61
 801db2c:	e7d9      	b.n	801dae2 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeERPKhRh+0x2e>
 801db2e:	f5a5 6360 	sub.w	r3, r5, #3584	@ 0xe00
 801db32:	b29b      	uxth	r3, r3
 801db34:	2b7f      	cmp	r3, #127	@ 0x7f
 801db36:	d804      	bhi.n	801db42 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeERPKhRh+0x8e>
 801db38:	4639      	mov	r1, r7
 801db3a:	4620      	mov	r0, r4
 801db3c:	f7ff fca6 	bl	801d48c <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE>
 801db40:	e7e6      	b.n	801db10 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeERPKhRh+0x5c>
 801db42:	f894 3061 	ldrb.w	r3, [r4, #97]	@ 0x61
 801db46:	2b00      	cmp	r3, #0
 801db48:	d0e3      	beq.n	801db12 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeERPKhRh+0x5e>
 801db4a:	f640 1302 	movw	r3, #2306	@ 0x902
 801db4e:	429d      	cmp	r5, r3
 801db50:	d1df      	bne.n	801db12 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeERPKhRh+0x5e>
 801db52:	4601      	mov	r1, r0
 801db54:	4620      	mov	r0, r4
 801db56:	f7ff fc69 	bl	801d42c <_ZN8touchgfx12TextProvider16adjustHindiGlyphEPKNS_9GlyphNodeE>
 801db5a:	e7d9      	b.n	801db10 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeERPKhRh+0x5c>
 801db5c:	0802f3b8 	.word	0x0802f3b8
 801db60:	0802f62a 	.word	0x0802f62a
 801db64:	0802f3c1 	.word	0x0802f3c1

0801db68 <_ZN8touchgfx12TextProvider15fillInputBufferEv>:
 801db68:	b510      	push	{r4, lr}
 801db6a:	4604      	mov	r4, r0
 801db6c:	f8b4 1040 	ldrh.w	r1, [r4, #64]	@ 0x40
 801db70:	8f23      	ldrh	r3, [r4, #56]	@ 0x38
 801db72:	b9d9      	cbnz	r1, 801dbac <_ZN8touchgfx12TextProvider15fillInputBufferEv+0x44>
 801db74:	8f23      	ldrh	r3, [r4, #56]	@ 0x38
 801db76:	2b0a      	cmp	r3, #10
 801db78:	d037      	beq.n	801dbea <_ZN8touchgfx12TextProvider15fillInputBufferEv+0x82>
 801db7a:	4620      	mov	r0, r4
 801db7c:	f7ff fc15 	bl	801d3aa <_ZN8touchgfx12TextProvider19getNextCharInternalEv>
 801db80:	8f23      	ldrh	r3, [r4, #56]	@ 0x38
 801db82:	2b09      	cmp	r3, #9
 801db84:	d906      	bls.n	801db94 <_ZN8touchgfx12TextProvider15fillInputBufferEv+0x2c>
 801db86:	4b19      	ldr	r3, [pc, #100]	@ (801dbec <_ZN8touchgfx12TextProvider15fillInputBufferEv+0x84>)
 801db88:	f44f 7182 	mov.w	r1, #260	@ 0x104
 801db8c:	4a18      	ldr	r2, [pc, #96]	@ (801dbf0 <_ZN8touchgfx12TextProvider15fillInputBufferEv+0x88>)
 801db8e:	4819      	ldr	r0, [pc, #100]	@ (801dbf4 <_ZN8touchgfx12TextProvider15fillInputBufferEv+0x8c>)
 801db90:	f00d f858 	bl	802ac44 <__assert_func>
 801db94:	1c5a      	adds	r2, r3, #1
 801db96:	8722      	strh	r2, [r4, #56]	@ 0x38
 801db98:	8ee2      	ldrh	r2, [r4, #54]	@ 0x36
 801db9a:	4413      	add	r3, r2
 801db9c:	b29b      	uxth	r3, r3
 801db9e:	2b09      	cmp	r3, #9
 801dba0:	bf88      	it	hi
 801dba2:	3b0a      	subhi	r3, #10
 801dba4:	eb04 0343 	add.w	r3, r4, r3, lsl #1
 801dba8:	8458      	strh	r0, [r3, #34]	@ 0x22
 801dbaa:	e7e3      	b.n	801db74 <_ZN8touchgfx12TextProvider15fillInputBufferEv+0xc>
 801dbac:	2b0a      	cmp	r3, #10
 801dbae:	d01c      	beq.n	801dbea <_ZN8touchgfx12TextProvider15fillInputBufferEv+0x82>
 801dbb0:	8fe2      	ldrh	r2, [r4, #62]	@ 0x3e
 801dbb2:	3901      	subs	r1, #1
 801dbb4:	eb04 0042 	add.w	r0, r4, r2, lsl #1
 801dbb8:	8f40      	ldrh	r0, [r0, #58]	@ 0x3a
 801dbba:	f8a4 1040 	strh.w	r1, [r4, #64]	@ 0x40
 801dbbe:	1c51      	adds	r1, r2, #1
 801dbc0:	b289      	uxth	r1, r1
 801dbc2:	2901      	cmp	r1, #1
 801dbc4:	bf8a      	itet	hi
 801dbc6:	f102 32ff 	addhi.w	r2, r2, #4294967295
 801dbca:	87e1      	strhls	r1, [r4, #62]	@ 0x3e
 801dbcc:	87e2      	strhhi	r2, [r4, #62]	@ 0x3e
 801dbce:	2b09      	cmp	r3, #9
 801dbd0:	d8d9      	bhi.n	801db86 <_ZN8touchgfx12TextProvider15fillInputBufferEv+0x1e>
 801dbd2:	1c5a      	adds	r2, r3, #1
 801dbd4:	8722      	strh	r2, [r4, #56]	@ 0x38
 801dbd6:	8ee2      	ldrh	r2, [r4, #54]	@ 0x36
 801dbd8:	4413      	add	r3, r2
 801dbda:	b29b      	uxth	r3, r3
 801dbdc:	2b09      	cmp	r3, #9
 801dbde:	bf88      	it	hi
 801dbe0:	3b0a      	subhi	r3, #10
 801dbe2:	eb04 0343 	add.w	r3, r4, r3, lsl #1
 801dbe6:	8458      	strh	r0, [r3, #34]	@ 0x22
 801dbe8:	e7c0      	b.n	801db6c <_ZN8touchgfx12TextProvider15fillInputBufferEv+0x4>
 801dbea:	bd10      	pop	{r4, pc}
 801dbec:	0802f3ed 	.word	0x0802f3ed
 801dbf0:	0802f780 	.word	0x0802f780
 801dbf4:	0802f3c1 	.word	0x0802f3c1

0801dbf8 <_ZN8touchgfx12TextProvider11getNextCharEv>:
 801dbf8:	b538      	push	{r3, r4, r5, lr}
 801dbfa:	8f02      	ldrh	r2, [r0, #56]	@ 0x38
 801dbfc:	4604      	mov	r4, r0
 801dbfe:	b92a      	cbnz	r2, 801dc0c <_ZN8touchgfx12TextProvider11getNextCharEv+0x14>
 801dc00:	4b13      	ldr	r3, [pc, #76]	@ (801dc50 <_ZN8touchgfx12TextProvider11getNextCharEv+0x58>)
 801dc02:	21d5      	movs	r1, #213	@ 0xd5
 801dc04:	4a13      	ldr	r2, [pc, #76]	@ (801dc54 <_ZN8touchgfx12TextProvider11getNextCharEv+0x5c>)
 801dc06:	4814      	ldr	r0, [pc, #80]	@ (801dc58 <_ZN8touchgfx12TextProvider11getNextCharEv+0x60>)
 801dc08:	f00d f81c 	bl	802ac44 <__assert_func>
 801dc0c:	8ec3      	ldrh	r3, [r0, #54]	@ 0x36
 801dc0e:	3a01      	subs	r2, #1
 801dc10:	eb00 0143 	add.w	r1, r0, r3, lsl #1
 801dc14:	8c4d      	ldrh	r5, [r1, #34]	@ 0x22
 801dc16:	8702      	strh	r2, [r0, #56]	@ 0x38
 801dc18:	1c5a      	adds	r2, r3, #1
 801dc1a:	b292      	uxth	r2, r2
 801dc1c:	2a09      	cmp	r2, #9
 801dc1e:	bf8a      	itet	hi
 801dc20:	3b09      	subhi	r3, #9
 801dc22:	86c2      	strhls	r2, [r0, #54]	@ 0x36
 801dc24:	86c3      	strhhi	r3, [r0, #54]	@ 0x36
 801dc26:	f7ff ff9f 	bl	801db68 <_ZN8touchgfx12TextProvider15fillInputBufferEv>
 801dc2a:	8c23      	ldrh	r3, [r4, #32]
 801dc2c:	2b01      	cmp	r3, #1
 801dc2e:	bf9c      	itt	ls
 801dc30:	3301      	addls	r3, #1
 801dc32:	8423      	strhls	r3, [r4, #32]
 801dc34:	8be3      	ldrh	r3, [r4, #30]
 801dc36:	b90b      	cbnz	r3, 801dc3c <_ZN8touchgfx12TextProvider11getNextCharEv+0x44>
 801dc38:	2302      	movs	r3, #2
 801dc3a:	83e3      	strh	r3, [r4, #30]
 801dc3c:	8be3      	ldrh	r3, [r4, #30]
 801dc3e:	4628      	mov	r0, r5
 801dc40:	3b01      	subs	r3, #1
 801dc42:	b29b      	uxth	r3, r3
 801dc44:	83e3      	strh	r3, [r4, #30]
 801dc46:	eb04 0443 	add.w	r4, r4, r3, lsl #1
 801dc4a:	8365      	strh	r5, [r4, #26]
 801dc4c:	bd38      	pop	{r3, r4, r5, pc}
 801dc4e:	bf00      	nop
 801dc50:	0802f3b8 	.word	0x0802f3b8
 801dc54:	0802f6d5 	.word	0x0802f6d5
 801dc58:	0802f3c1 	.word	0x0802f3c1

0801dc5c <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt>:
 801dc5c:	428a      	cmp	r2, r1
 801dc5e:	b538      	push	{r3, r4, r5, lr}
 801dc60:	8f04      	ldrh	r4, [r0, #56]	@ 0x38
 801dc62:	d90c      	bls.n	801dc7e <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt+0x22>
 801dc64:	b92c      	cbnz	r4, 801dc72 <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt+0x16>
 801dc66:	4b1c      	ldr	r3, [pc, #112]	@ (801dcd8 <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt+0x7c>)
 801dc68:	21e1      	movs	r1, #225	@ 0xe1
 801dc6a:	4a1c      	ldr	r2, [pc, #112]	@ (801dcdc <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt+0x80>)
 801dc6c:	481c      	ldr	r0, [pc, #112]	@ (801dce0 <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt+0x84>)
 801dc6e:	f00c ffe9 	bl	802ac44 <__assert_func>
 801dc72:	3c01      	subs	r4, #1
 801dc74:	4b1b      	ldr	r3, [pc, #108]	@ (801dce4 <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt+0x88>)
 801dc76:	4a1c      	ldr	r2, [pc, #112]	@ (801dce8 <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt+0x8c>)
 801dc78:	21c5      	movs	r1, #197	@ 0xc5
 801dc7a:	8704      	strh	r4, [r0, #56]	@ 0x38
 801dc7c:	e7f6      	b.n	801dc6c <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt+0x10>
 801dc7e:	428c      	cmp	r4, r1
 801dc80:	d203      	bcs.n	801dc8a <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt+0x2e>
 801dc82:	4b1a      	ldr	r3, [pc, #104]	@ (801dcec <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt+0x90>)
 801dc84:	21cb      	movs	r1, #203	@ 0xcb
 801dc86:	4a1a      	ldr	r2, [pc, #104]	@ (801dcf0 <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt+0x94>)
 801dc88:	e7f0      	b.n	801dc6c <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt+0x10>
 801dc8a:	1a64      	subs	r4, r4, r1
 801dc8c:	250a      	movs	r5, #10
 801dc8e:	8704      	strh	r4, [r0, #56]	@ 0x38
 801dc90:	8ec4      	ldrh	r4, [r0, #54]	@ 0x36
 801dc92:	4421      	add	r1, r4
 801dc94:	b289      	uxth	r1, r1
 801dc96:	2909      	cmp	r1, #9
 801dc98:	bf88      	it	hi
 801dc9a:	390a      	subhi	r1, #10
 801dc9c:	86c1      	strh	r1, [r0, #54]	@ 0x36
 801dc9e:	b1ba      	cbz	r2, 801dcd0 <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt+0x74>
 801dca0:	3a01      	subs	r2, #1
 801dca2:	8f01      	ldrh	r1, [r0, #56]	@ 0x38
 801dca4:	b292      	uxth	r2, r2
 801dca6:	2909      	cmp	r1, #9
 801dca8:	f833 4012 	ldrh.w	r4, [r3, r2, lsl #1]
 801dcac:	d903      	bls.n	801dcb6 <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt+0x5a>
 801dcae:	4b11      	ldr	r3, [pc, #68]	@ (801dcf4 <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt+0x98>)
 801dcb0:	21e6      	movs	r1, #230	@ 0xe6
 801dcb2:	4a11      	ldr	r2, [pc, #68]	@ (801dcf8 <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt+0x9c>)
 801dcb4:	e7da      	b.n	801dc6c <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt+0x10>
 801dcb6:	3101      	adds	r1, #1
 801dcb8:	8701      	strh	r1, [r0, #56]	@ 0x38
 801dcba:	8ec1      	ldrh	r1, [r0, #54]	@ 0x36
 801dcbc:	b901      	cbnz	r1, 801dcc0 <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt+0x64>
 801dcbe:	86c5      	strh	r5, [r0, #54]	@ 0x36
 801dcc0:	8ec1      	ldrh	r1, [r0, #54]	@ 0x36
 801dcc2:	3901      	subs	r1, #1
 801dcc4:	b289      	uxth	r1, r1
 801dcc6:	86c1      	strh	r1, [r0, #54]	@ 0x36
 801dcc8:	eb00 0141 	add.w	r1, r0, r1, lsl #1
 801dccc:	844c      	strh	r4, [r1, #34]	@ 0x22
 801dcce:	e7e6      	b.n	801dc9e <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt+0x42>
 801dcd0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 801dcd4:	f7ff bf48 	b.w	801db68 <_ZN8touchgfx12TextProvider15fillInputBufferEv>
 801dcd8:	0802f3b8 	.word	0x0802f3b8
 801dcdc:	0802f4ae 	.word	0x0802f4ae
 801dce0:	0802f3c1 	.word	0x0802f3c1
 801dce4:	0802f3f9 	.word	0x0802f3f9
 801dce8:	0802f558 	.word	0x0802f558
 801dcec:	0802f407 	.word	0x0802f407
 801dcf0:	0802f82f 	.word	0x0802f82f
 801dcf4:	0802f413 	.word	0x0802f413
 801dcf8:	0802f426 	.word	0x0802f426

0801dcfc <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt>:
 801dcfc:	3a01      	subs	r2, #1
 801dcfe:	b570      	push	{r4, r5, r6, lr}
 801dd00:	b292      	uxth	r2, r2
 801dd02:	f64f 76ff 	movw	r6, #65535	@ 0xffff
 801dd06:	42b2      	cmp	r2, r6
 801dd08:	d019      	beq.n	801dd3e <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt+0x42>
 801dd0a:	8c04      	ldrh	r4, [r0, #32]
 801dd0c:	f831 5b02 	ldrh.w	r5, [r1], #2
 801dd10:	4294      	cmp	r4, r2
 801dd12:	d805      	bhi.n	801dd20 <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt+0x24>
 801dd14:	4b19      	ldr	r3, [pc, #100]	@ (801dd7c <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt+0x80>)
 801dd16:	4a1a      	ldr	r2, [pc, #104]	@ (801dd80 <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt+0x84>)
 801dd18:	21c5      	movs	r1, #197	@ 0xc5
 801dd1a:	481a      	ldr	r0, [pc, #104]	@ (801dd84 <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt+0x88>)
 801dd1c:	f00c ff92 	bl	802ac44 <__assert_func>
 801dd20:	8bc4      	ldrh	r4, [r0, #30]
 801dd22:	4414      	add	r4, r2
 801dd24:	3a01      	subs	r2, #1
 801dd26:	b2a4      	uxth	r4, r4
 801dd28:	b292      	uxth	r2, r2
 801dd2a:	2c01      	cmp	r4, #1
 801dd2c:	bf88      	it	hi
 801dd2e:	3c02      	subhi	r4, #2
 801dd30:	eb00 0444 	add.w	r4, r0, r4, lsl #1
 801dd34:	8b64      	ldrh	r4, [r4, #26]
 801dd36:	42ac      	cmp	r4, r5
 801dd38:	d0e5      	beq.n	801dd06 <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt+0xa>
 801dd3a:	2000      	movs	r0, #0
 801dd3c:	bd70      	pop	{r4, r5, r6, pc}
 801dd3e:	f8bd 2010 	ldrh.w	r2, [sp, #16]
 801dd42:	2400      	movs	r4, #0
 801dd44:	4413      	add	r3, r2
 801dd46:	b2a2      	uxth	r2, r4
 801dd48:	429a      	cmp	r2, r3
 801dd4a:	da14      	bge.n	801dd76 <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt+0x7a>
 801dd4c:	8f06      	ldrh	r6, [r0, #56]	@ 0x38
 801dd4e:	f831 5014 	ldrh.w	r5, [r1, r4, lsl #1]
 801dd52:	4296      	cmp	r6, r2
 801dd54:	d802      	bhi.n	801dd5c <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt+0x60>
 801dd56:	4b09      	ldr	r3, [pc, #36]	@ (801dd7c <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt+0x80>)
 801dd58:	4a0b      	ldr	r2, [pc, #44]	@ (801dd88 <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt+0x8c>)
 801dd5a:	e7dd      	b.n	801dd18 <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt+0x1c>
 801dd5c:	8ec6      	ldrh	r6, [r0, #54]	@ 0x36
 801dd5e:	3401      	adds	r4, #1
 801dd60:	4432      	add	r2, r6
 801dd62:	b292      	uxth	r2, r2
 801dd64:	2a09      	cmp	r2, #9
 801dd66:	bf88      	it	hi
 801dd68:	3a0a      	subhi	r2, #10
 801dd6a:	eb00 0242 	add.w	r2, r0, r2, lsl #1
 801dd6e:	8c52      	ldrh	r2, [r2, #34]	@ 0x22
 801dd70:	42aa      	cmp	r2, r5
 801dd72:	d0e8      	beq.n	801dd46 <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt+0x4a>
 801dd74:	e7e1      	b.n	801dd3a <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt+0x3e>
 801dd76:	2001      	movs	r0, #1
 801dd78:	e7e0      	b.n	801dd3c <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt+0x40>
 801dd7a:	bf00      	nop
 801dd7c:	0802f3f9 	.word	0x0802f3f9
 801dd80:	0802f8b3 	.word	0x0802f8b3
 801dd84:	0802f3c1 	.word	0x0802f3c1
 801dd88:	0802f558 	.word	0x0802f558

0801dd8c <_ZN8touchgfx12TextProvider14applyGsubRulesEPKtt>:
 801dd8c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801dd90:	4605      	mov	r5, r0
 801dd92:	4616      	mov	r6, r2
 801dd94:	1c8c      	adds	r4, r1, #2
 801dd96:	8809      	ldrh	r1, [r1, #0]
 801dd98:	ea4f 3a11 	mov.w	sl, r1, lsr #12
 801dd9c:	f834 301a 	ldrh.w	r3, [r4, sl, lsl #1]
 801dda0:	42b3      	cmp	r3, r6
 801dda2:	d124      	bne.n	801ddee <_ZN8touchgfx12TextProvider14applyGsubRulesEPKtt+0x62>
 801dda4:	f3c1 2903 	ubfx	r9, r1, #8, #4
 801dda8:	f3c1 1803 	ubfx	r8, r1, #4, #4
 801ddac:	f001 070f 	and.w	r7, r1, #15
 801ddb0:	4652      	mov	r2, sl
 801ddb2:	f8cd 8000 	str.w	r8, [sp]
 801ddb6:	464b      	mov	r3, r9
 801ddb8:	4621      	mov	r1, r4
 801ddba:	4628      	mov	r0, r5
 801ddbc:	f7ff ff9e 	bl	801dcfc <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt>
 801ddc0:	4683      	mov	fp, r0
 801ddc2:	b168      	cbz	r0, 801dde0 <_ZN8touchgfx12TextProvider14applyGsubRulesEPKtt+0x54>
 801ddc4:	eb0a 0109 	add.w	r1, sl, r9
 801ddc8:	463a      	mov	r2, r7
 801ddca:	4628      	mov	r0, r5
 801ddcc:	4441      	add	r1, r8
 801ddce:	eb04 0341 	add.w	r3, r4, r1, lsl #1
 801ddd2:	4649      	mov	r1, r9
 801ddd4:	f7ff ff42 	bl	801dc5c <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt>
 801ddd8:	4658      	mov	r0, fp
 801ddda:	b003      	add	sp, #12
 801dddc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801dde0:	eb07 010a 	add.w	r1, r7, sl
 801dde4:	4449      	add	r1, r9
 801dde6:	4441      	add	r1, r8
 801dde8:	eb04 0141 	add.w	r1, r4, r1, lsl #1
 801ddec:	e7d2      	b.n	801dd94 <_ZN8touchgfx12TextProvider14applyGsubRulesEPKtt+0x8>
 801ddee:	f04f 0b00 	mov.w	fp, #0
 801ddf2:	e7f1      	b.n	801ddd8 <_ZN8touchgfx12TextProvider14applyGsubRulesEPKtt+0x4c>

0801ddf4 <_ZNK8touchgfx12TextProvider21gsubTableBinarySearchEtPKtt>:
 801ddf4:	b570      	push	{r4, r5, r6, lr}
 801ddf6:	8810      	ldrh	r0, [r2, #0]
 801ddf8:	4298      	cmp	r0, r3
 801ddfa:	d817      	bhi.n	801de2c <_ZNK8touchgfx12TextProvider21gsubTableBinarySearchEtPKtt+0x38>
 801ddfc:	1e48      	subs	r0, r1, #1
 801ddfe:	f832 0020 	ldrh.w	r0, [r2, r0, lsl #2]
 801de02:	4298      	cmp	r0, r3
 801de04:	d312      	bcc.n	801de2c <_ZNK8touchgfx12TextProvider21gsubTableBinarySearchEtPKtt+0x38>
 801de06:	2400      	movs	r4, #0
 801de08:	428c      	cmp	r4, r1
 801de0a:	d20f      	bcs.n	801de2c <_ZNK8touchgfx12TextProvider21gsubTableBinarySearchEtPKtt+0x38>
 801de0c:	1860      	adds	r0, r4, r1
 801de0e:	1040      	asrs	r0, r0, #1
 801de10:	f832 6020 	ldrh.w	r6, [r2, r0, lsl #2]
 801de14:	0085      	lsls	r5, r0, #2
 801de16:	42b3      	cmp	r3, r6
 801de18:	d902      	bls.n	801de20 <_ZNK8touchgfx12TextProvider21gsubTableBinarySearchEtPKtt+0x2c>
 801de1a:	3001      	adds	r0, #1
 801de1c:	b284      	uxth	r4, r0
 801de1e:	e7f3      	b.n	801de08 <_ZNK8touchgfx12TextProvider21gsubTableBinarySearchEtPKtt+0x14>
 801de20:	d201      	bcs.n	801de26 <_ZNK8touchgfx12TextProvider21gsubTableBinarySearchEtPKtt+0x32>
 801de22:	b281      	uxth	r1, r0
 801de24:	e7f0      	b.n	801de08 <_ZNK8touchgfx12TextProvider21gsubTableBinarySearchEtPKtt+0x14>
 801de26:	442a      	add	r2, r5
 801de28:	8850      	ldrh	r0, [r2, #2]
 801de2a:	bd70      	pop	{r4, r5, r6, pc}
 801de2c:	2000      	movs	r0, #0
 801de2e:	e7fc      	b.n	801de2a <_ZNK8touchgfx12TextProvider21gsubTableBinarySearchEtPKtt+0x36>

0801de30 <_ZN8touchgfx12TextProvider16substituteGlyphsEv>:
 801de30:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801de34:	6c45      	ldr	r5, [r0, #68]	@ 0x44
 801de36:	4604      	mov	r4, r0
 801de38:	260b      	movs	r6, #11
 801de3a:	886f      	ldrh	r7, [r5, #2]
 801de3c:	087f      	lsrs	r7, r7, #1
 801de3e:	3e01      	subs	r6, #1
 801de40:	d01b      	beq.n	801de7a <_ZN8touchgfx12TextProvider16substituteGlyphsEv+0x4a>
 801de42:	8f23      	ldrh	r3, [r4, #56]	@ 0x38
 801de44:	b92b      	cbnz	r3, 801de52 <_ZN8touchgfx12TextProvider16substituteGlyphsEv+0x22>
 801de46:	4b0e      	ldr	r3, [pc, #56]	@ (801de80 <_ZN8touchgfx12TextProvider16substituteGlyphsEv+0x50>)
 801de48:	21c0      	movs	r1, #192	@ 0xc0
 801de4a:	4a0e      	ldr	r2, [pc, #56]	@ (801de84 <_ZN8touchgfx12TextProvider16substituteGlyphsEv+0x54>)
 801de4c:	480e      	ldr	r0, [pc, #56]	@ (801de88 <_ZN8touchgfx12TextProvider16substituteGlyphsEv+0x58>)
 801de4e:	f00c fef9 	bl	802ac44 <__assert_func>
 801de52:	8ee3      	ldrh	r3, [r4, #54]	@ 0x36
 801de54:	462a      	mov	r2, r5
 801de56:	4639      	mov	r1, r7
 801de58:	4620      	mov	r0, r4
 801de5a:	eb04 0343 	add.w	r3, r4, r3, lsl #1
 801de5e:	f8b3 8022 	ldrh.w	r8, [r3, #34]	@ 0x22
 801de62:	4643      	mov	r3, r8
 801de64:	f7ff ffc6 	bl	801ddf4 <_ZNK8touchgfx12TextProvider21gsubTableBinarySearchEtPKtt>
 801de68:	b138      	cbz	r0, 801de7a <_ZN8touchgfx12TextProvider16substituteGlyphsEv+0x4a>
 801de6a:	eb05 0140 	add.w	r1, r5, r0, lsl #1
 801de6e:	4642      	mov	r2, r8
 801de70:	4620      	mov	r0, r4
 801de72:	f7ff ff8b 	bl	801dd8c <_ZN8touchgfx12TextProvider14applyGsubRulesEPKtt>
 801de76:	2800      	cmp	r0, #0
 801de78:	d1e1      	bne.n	801de3e <_ZN8touchgfx12TextProvider16substituteGlyphsEv+0xe>
 801de7a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801de7e:	bf00      	nop
 801de80:	0802f3b8 	.word	0x0802f3b8
 801de84:	0802f62a 	.word	0x0802f62a
 801de88:	0802f3c1 	.word	0x0802f3c1

0801de8c <_ZN8touchgfx8ceil28_4El>:
 801de8c:	f110 030f 	adds.w	r3, r0, #15
 801de90:	d401      	bmi.n	801de96 <_ZN8touchgfx8ceil28_4El+0xa>
 801de92:	1118      	asrs	r0, r3, #4
 801de94:	4770      	bx	lr
 801de96:	2210      	movs	r2, #16
 801de98:	f1c0 0001 	rsb	r0, r0, #1
 801de9c:	fb93 f3f2 	sdiv	r3, r3, r2
 801dea0:	f010 000f 	ands.w	r0, r0, #15
 801dea4:	bf18      	it	ne
 801dea6:	2001      	movne	r0, #1
 801dea8:	1a18      	subs	r0, r3, r0
 801deaa:	4770      	bx	lr

0801deac <_ZN8touchgfx11floorDivModEllRlS0_>:
 801deac:	2900      	cmp	r1, #0
 801deae:	b538      	push	{r3, r4, r5, lr}
 801deb0:	dc05      	bgt.n	801debe <_ZN8touchgfx11floorDivModEllRlS0_+0x12>
 801deb2:	4b0f      	ldr	r3, [pc, #60]	@ (801def0 <_ZN8touchgfx11floorDivModEllRlS0_+0x44>)
 801deb4:	21f7      	movs	r1, #247	@ 0xf7
 801deb6:	4a0f      	ldr	r2, [pc, #60]	@ (801def4 <_ZN8touchgfx11floorDivModEllRlS0_+0x48>)
 801deb8:	480f      	ldr	r0, [pc, #60]	@ (801def8 <_ZN8touchgfx11floorDivModEllRlS0_+0x4c>)
 801deba:	f00c fec3 	bl	802ac44 <__assert_func>
 801debe:	2800      	cmp	r0, #0
 801dec0:	db06      	blt.n	801ded0 <_ZN8touchgfx11floorDivModEllRlS0_+0x24>
 801dec2:	fb90 f4f1 	sdiv	r4, r0, r1
 801dec6:	fb01 0114 	mls	r1, r1, r4, r0
 801deca:	6014      	str	r4, [r2, #0]
 801decc:	6019      	str	r1, [r3, #0]
 801dece:	bd38      	pop	{r3, r4, r5, pc}
 801ded0:	4240      	negs	r0, r0
 801ded2:	fb90 f4f1 	sdiv	r4, r0, r1
 801ded6:	4265      	negs	r5, r4
 801ded8:	fb01 0014 	mls	r0, r1, r4, r0
 801dedc:	6015      	str	r5, [r2, #0]
 801dede:	6018      	str	r0, [r3, #0]
 801dee0:	2800      	cmp	r0, #0
 801dee2:	d0f4      	beq.n	801dece <_ZN8touchgfx11floorDivModEllRlS0_+0x22>
 801dee4:	6810      	ldr	r0, [r2, #0]
 801dee6:	3801      	subs	r0, #1
 801dee8:	6010      	str	r0, [r2, #0]
 801deea:	6818      	ldr	r0, [r3, #0]
 801deec:	1a09      	subs	r1, r1, r0
 801deee:	e7ed      	b.n	801decc <_ZN8touchgfx11floorDivModEllRlS0_+0x20>
 801def0:	0802f984 	.word	0x0802f984
 801def4:	0802f9c3 	.word	0x0802f9c3
 801def8:	0802f994 	.word	0x0802f994

0801defc <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE>:
 801defc:	b570      	push	{r4, r5, r6, lr}
 801defe:	694a      	ldr	r2, [r1, #20]
 801df00:	6a8d      	ldr	r5, [r1, #40]	@ 0x28
 801df02:	684b      	ldr	r3, [r1, #4]
 801df04:	1b54      	subs	r4, r2, r5
 801df06:	6ace      	ldr	r6, [r1, #44]	@ 0x2c
 801df08:	f000 8106 	beq.w	801e118 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x21c>
 801df0c:	1b9b      	subs	r3, r3, r6
 801df0e:	d003      	beq.n	801df18 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x1c>
 801df10:	4363      	muls	r3, r4
 801df12:	2210      	movs	r2, #16
 801df14:	fb93 f3f2 	sdiv	r3, r3, r2
 801df18:	680c      	ldr	r4, [r1, #0]
 801df1a:	698a      	ldr	r2, [r1, #24]
 801df1c:	1b65      	subs	r5, r4, r5
 801df1e:	f000 80fd 	beq.w	801e11c <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x220>
 801df22:	1b92      	subs	r2, r2, r6
 801df24:	d003      	beq.n	801df2e <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x32>
 801df26:	436a      	muls	r2, r5
 801df28:	2410      	movs	r4, #16
 801df2a:	fb92 f2f4 	sdiv	r2, r2, r4
 801df2e:	1a9b      	subs	r3, r3, r2
 801df30:	ed9f 4a89 	vldr	s8, [pc, #548]	@ 801e158 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x25c>
 801df34:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 801df38:	460a      	mov	r2, r1
 801df3a:	ee07 3a90 	vmov	s15, r3
 801df3e:	f100 040c 	add.w	r4, r0, #12
 801df42:	4603      	mov	r3, r0
 801df44:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 801df48:	ee67 7a84 	vmul.f32	s15, s15, s8
 801df4c:	ee87 3a27 	vdiv.f32	s6, s14, s15
 801df50:	eeb1 6a43 	vneg.f32	s12, s6
 801df54:	edd2 7a02 	vldr	s15, [r2, #8]
 801df58:	3214      	adds	r2, #20
 801df5a:	eec7 6a27 	vdiv.f32	s13, s14, s15
 801df5e:	ece3 6a01 	vstmia	r3!, {s13}
 801df62:	429c      	cmp	r4, r3
 801df64:	ed52 7a02 	vldr	s15, [r2, #-8]
 801df68:	ee67 7aa6 	vmul.f32	s15, s15, s13
 801df6c:	edc3 7a02 	vstr	s15, [r3, #8]
 801df70:	ed52 7a01 	vldr	s15, [r2, #-4]
 801df74:	ee67 7aa6 	vmul.f32	s15, s15, s13
 801df78:	edc3 7a05 	vstr	s15, [r3, #20]
 801df7c:	d1ea      	bne.n	801df54 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x58>
 801df7e:	6aca      	ldr	r2, [r1, #44]	@ 0x2c
 801df80:	698b      	ldr	r3, [r1, #24]
 801df82:	edd0 4a02 	vldr	s9, [r0, #8]
 801df86:	1a9b      	subs	r3, r3, r2
 801df88:	edd0 3a00 	vldr	s7, [r0]
 801df8c:	edd0 6a01 	vldr	s13, [r0, #4]
 801df90:	ee07 3a90 	vmov	s15, r3
 801df94:	684b      	ldr	r3, [r1, #4]
 801df96:	ee76 6ae4 	vsub.f32	s13, s13, s9
 801df9a:	ed90 5a05 	vldr	s10, [r0, #20]
 801df9e:	1a9b      	subs	r3, r3, r2
 801dfa0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 801dfa4:	ee73 4ae4 	vsub.f32	s9, s7, s9
 801dfa8:	ed90 2a03 	vldr	s4, [r0, #12]
 801dfac:	ee07 3a10 	vmov	s14, r3
 801dfb0:	edd0 5a04 	vldr	s11, [r0, #16]
 801dfb4:	ee67 7a84 	vmul.f32	s15, s15, s8
 801dfb8:	ed90 1a07 	vldr	s2, [r0, #28]
 801dfbc:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 801dfc0:	edd0 2a06 	vldr	s5, [r0, #24]
 801dfc4:	ee75 5ac5 	vsub.f32	s11, s11, s10
 801dfc8:	ee64 7ae7 	vnmul.f32	s15, s9, s15
 801dfcc:	ee27 7a04 	vmul.f32	s14, s14, s8
 801dfd0:	ee32 5a45 	vsub.f32	s10, s4, s10
 801dfd4:	eee6 7a87 	vfma.f32	s15, s13, s14
 801dfd8:	ee67 7a83 	vmul.f32	s15, s15, s6
 801dfdc:	edc0 7a09 	vstr	s15, [r0, #36]	@ 0x24
 801dfe0:	6a8c      	ldr	r4, [r1, #40]	@ 0x28
 801dfe2:	694a      	ldr	r2, [r1, #20]
 801dfe4:	1b13      	subs	r3, r2, r4
 801dfe6:	ee07 3a10 	vmov	s14, r3
 801dfea:	680b      	ldr	r3, [r1, #0]
 801dfec:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 801dff0:	1b1b      	subs	r3, r3, r4
 801dff2:	ee27 7a04 	vmul.f32	s14, s14, s8
 801dff6:	ee64 4ac7 	vnmul.f32	s9, s9, s14
 801dffa:	ee07 3a10 	vmov	s14, r3
 801dffe:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 801e002:	ee27 7a04 	vmul.f32	s14, s14, s8
 801e006:	eee6 4a87 	vfma.f32	s9, s13, s14
 801e00a:	ee64 4a86 	vmul.f32	s9, s9, s12
 801e00e:	edc0 4a0a 	vstr	s9, [r0, #40]	@ 0x28
 801e012:	6aca      	ldr	r2, [r1, #44]	@ 0x2c
 801e014:	698b      	ldr	r3, [r1, #24]
 801e016:	1a9b      	subs	r3, r3, r2
 801e018:	ee06 3a90 	vmov	s13, r3
 801e01c:	684b      	ldr	r3, [r1, #4]
 801e01e:	1a9b      	subs	r3, r3, r2
 801e020:	eef8 6ae6 	vcvt.f32.s32	s13, s13
 801e024:	ee07 3a10 	vmov	s14, r3
 801e028:	ee66 6a84 	vmul.f32	s13, s13, s8
 801e02c:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 801e030:	ee65 6a66 	vnmul.f32	s13, s10, s13
 801e034:	ee27 7a04 	vmul.f32	s14, s14, s8
 801e038:	eee5 6a87 	vfma.f32	s13, s11, s14
 801e03c:	ee66 6a83 	vmul.f32	s13, s13, s6
 801e040:	edc0 6a0b 	vstr	s13, [r0, #44]	@ 0x2c
 801e044:	6a8c      	ldr	r4, [r1, #40]	@ 0x28
 801e046:	694a      	ldr	r2, [r1, #20]
 801e048:	1b13      	subs	r3, r2, r4
 801e04a:	ee07 3a10 	vmov	s14, r3
 801e04e:	680b      	ldr	r3, [r1, #0]
 801e050:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 801e054:	1b1b      	subs	r3, r3, r4
 801e056:	ee27 7a04 	vmul.f32	s14, s14, s8
 801e05a:	ee25 5a47 	vnmul.f32	s10, s10, s14
 801e05e:	ee07 3a10 	vmov	s14, r3
 801e062:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 801e066:	ee27 7a04 	vmul.f32	s14, s14, s8
 801e06a:	eea5 5a87 	vfma.f32	s10, s11, s14
 801e06e:	edd0 5a08 	vldr	s11, [r0, #32]
 801e072:	ee31 1a65 	vsub.f32	s2, s2, s11
 801e076:	ee72 5ae5 	vsub.f32	s11, s5, s11
 801e07a:	ee25 5a06 	vmul.f32	s10, s10, s12
 801e07e:	ed80 5a0c 	vstr	s10, [r0, #48]	@ 0x30
 801e082:	6aca      	ldr	r2, [r1, #44]	@ 0x2c
 801e084:	698b      	ldr	r3, [r1, #24]
 801e086:	1a9b      	subs	r3, r3, r2
 801e088:	ee07 3a10 	vmov	s14, r3
 801e08c:	684b      	ldr	r3, [r1, #4]
 801e08e:	1a9b      	subs	r3, r3, r2
 801e090:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 801e094:	ee01 3a90 	vmov	s3, r3
 801e098:	ee27 7a04 	vmul.f32	s14, s14, s8
 801e09c:	eef8 1ae1 	vcvt.f32.s32	s3, s3
 801e0a0:	ee25 7ac7 	vnmul.f32	s14, s11, s14
 801e0a4:	ee61 1a84 	vmul.f32	s3, s3, s8
 801e0a8:	eea1 7a21 	vfma.f32	s14, s2, s3
 801e0ac:	ee27 7a03 	vmul.f32	s14, s14, s6
 801e0b0:	ed80 7a0d 	vstr	s14, [r0, #52]	@ 0x34
 801e0b4:	6a8c      	ldr	r4, [r1, #40]	@ 0x28
 801e0b6:	694a      	ldr	r2, [r1, #20]
 801e0b8:	1b13      	subs	r3, r2, r4
 801e0ba:	ee03 3a10 	vmov	s6, r3
 801e0be:	680b      	ldr	r3, [r1, #0]
 801e0c0:	eeb8 3ac3 	vcvt.f32.s32	s6, s6
 801e0c4:	1b1b      	subs	r3, r3, r4
 801e0c6:	ee23 3a04 	vmul.f32	s6, s6, s8
 801e0ca:	ee65 5ac3 	vnmul.f32	s11, s11, s6
 801e0ce:	ee03 3a10 	vmov	s6, r3
 801e0d2:	eeb8 3ac3 	vcvt.f32.s32	s6, s6
 801e0d6:	ee23 4a04 	vmul.f32	s8, s6, s8
 801e0da:	eee1 5a04 	vfma.f32	s11, s2, s8
 801e0de:	ee25 6a86 	vmul.f32	s12, s11, s12
 801e0e2:	ee62 5a67 	vnmul.f32	s11, s4, s15
 801e0e6:	ed80 6a0e 	vstr	s12, [r0, #56]	@ 0x38
 801e0ea:	eee3 5aa6 	vfma.f32	s11, s7, s13
 801e0ee:	eef5 5ac0 	vcmpe.f32	s11, #0.0
 801e0f2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801e0f6:	dd13      	ble.n	801e120 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x224>
 801e0f8:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 801e0fc:	ee62 7ae7 	vnmul.f32	s15, s5, s15
 801e100:	63c3      	str	r3, [r0, #60]	@ 0x3c
 801e102:	eee3 7a87 	vfma.f32	s15, s7, s14
 801e106:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 801e10a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801e10e:	dd15      	ble.n	801e13c <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x240>
 801e110:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 801e114:	6403      	str	r3, [r0, #64]	@ 0x40
 801e116:	bd70      	pop	{r4, r5, r6, pc}
 801e118:	4623      	mov	r3, r4
 801e11a:	e6fd      	b.n	801df18 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x1c>
 801e11c:	462a      	mov	r2, r5
 801e11e:	e706      	b.n	801df2e <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x32>
 801e120:	d502      	bpl.n	801e128 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x22c>
 801e122:	f647 73ff 	movw	r3, #32767	@ 0x7fff
 801e126:	e7e9      	b.n	801e0fc <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x200>
 801e128:	ee22 2a64 	vnmul.f32	s4, s4, s9
 801e12c:	eea3 2a85 	vfma.f32	s4, s7, s10
 801e130:	eeb5 2ac0 	vcmpe.f32	s4, #0.0
 801e134:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801e138:	dade      	bge.n	801e0f8 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x1fc>
 801e13a:	e7f2      	b.n	801e122 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x226>
 801e13c:	d502      	bpl.n	801e144 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x248>
 801e13e:	f647 73ff 	movw	r3, #32767	@ 0x7fff
 801e142:	e7e7      	b.n	801e114 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x218>
 801e144:	ee62 4ae4 	vnmul.f32	s9, s5, s9
 801e148:	eee3 4a86 	vfma.f32	s9, s7, s12
 801e14c:	eef5 4ac0 	vcmpe.f32	s9, #0.0
 801e150:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801e154:	dadc      	bge.n	801e110 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x214>
 801e156:	e7f2      	b.n	801e13e <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x242>
 801e158:	3d800000 	.word	0x3d800000

0801e15c <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii>:
 801e15c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801e160:	f04f 0814 	mov.w	r8, #20
 801e164:	4604      	mov	r4, r0
 801e166:	4617      	mov	r7, r2
 801e168:	460d      	mov	r5, r1
 801e16a:	fb08 f903 	mul.w	r9, r8, r3
 801e16e:	461e      	mov	r6, r3
 801e170:	eb02 0a09 	add.w	sl, r2, r9
 801e174:	f8da 0004 	ldr.w	r0, [sl, #4]
 801e178:	f7ff fe88 	bl	801de8c <_ZN8touchgfx8ceil28_4El>
 801e17c:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 801e17e:	6160      	str	r0, [r4, #20]
 801e180:	fb08 f803 	mul.w	r8, r8, r3
 801e184:	9001      	str	r0, [sp, #4]
 801e186:	eb07 0b08 	add.w	fp, r7, r8
 801e18a:	f8db 0004 	ldr.w	r0, [fp, #4]
 801e18e:	f7ff fe7d 	bl	801de8c <_ZN8touchgfx8ceil28_4El>
 801e192:	9a01      	ldr	r2, [sp, #4]
 801e194:	1a80      	subs	r0, r0, r2
 801e196:	61a0      	str	r0, [r4, #24]
 801e198:	2800      	cmp	r0, #0
 801e19a:	f000 8088 	beq.w	801e2ae <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii+0x152>
 801e19e:	f857 3009 	ldr.w	r3, [r7, r9]
 801e1a2:	f857 c008 	ldr.w	ip, [r7, r8]
 801e1a6:	f8db 0004 	ldr.w	r0, [fp, #4]
 801e1aa:	ebac 0c03 	sub.w	ip, ip, r3
 801e1ae:	f8da 1004 	ldr.w	r1, [sl, #4]
 801e1b2:	ea4f 1b0c 	mov.w	fp, ip, lsl #4
 801e1b6:	1a40      	subs	r0, r0, r1
 801e1b8:	fb0b f202 	mul.w	r2, fp, r2
 801e1bc:	ea4f 1800 	mov.w	r8, r0, lsl #4
 801e1c0:	fb0c 2211 	mls	r2, ip, r1, r2
 801e1c4:	4641      	mov	r1, r8
 801e1c6:	fb00 2003 	mla	r0, r0, r3, r2
 801e1ca:	f104 0310 	add.w	r3, r4, #16
 801e1ce:	4622      	mov	r2, r4
 801e1d0:	3801      	subs	r0, #1
 801e1d2:	4440      	add	r0, r8
 801e1d4:	f7ff fe6a 	bl	801deac <_ZN8touchgfx11floorDivModEllRlS0_>
 801e1d8:	f104 0308 	add.w	r3, r4, #8
 801e1dc:	1d22      	adds	r2, r4, #4
 801e1de:	4641      	mov	r1, r8
 801e1e0:	4658      	mov	r0, fp
 801e1e2:	f7ff fe63 	bl	801deac <_ZN8touchgfx11floorDivModEllRlS0_>
 801e1e6:	f8c4 800c 	str.w	r8, [r4, #12]
 801e1ea:	6962      	ldr	r2, [r4, #20]
 801e1ec:	f8da 3004 	ldr.w	r3, [sl, #4]
 801e1f0:	eddf 6a31 	vldr	s13, [pc, #196]	@ 801e2b8 <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii+0x15c>
 801e1f4:	ebc3 1302 	rsb	r3, r3, r2, lsl #4
 801e1f8:	6822      	ldr	r2, [r4, #0]
 801e1fa:	ed95 6a0a 	vldr	s12, [r5, #40]	@ 0x28
 801e1fe:	ee07 3a10 	vmov	s14, r3
 801e202:	f857 3009 	ldr.w	r3, [r7, r9]
 801e206:	ebc3 1302 	rsb	r3, r3, r2, lsl #4
 801e20a:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 801e20e:	ee07 3a90 	vmov	s15, r3
 801e212:	eb05 0386 	add.w	r3, r5, r6, lsl #2
 801e216:	ee27 7a26 	vmul.f32	s14, s14, s13
 801e21a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 801e21e:	ee67 7aa6 	vmul.f32	s15, s15, s13
 801e222:	edd3 6a00 	vldr	s13, [r3]
 801e226:	eee6 6a07 	vfma.f32	s13, s12, s14
 801e22a:	ed95 6a09 	vldr	s12, [r5, #36]	@ 0x24
 801e22e:	eee6 6a27 	vfma.f32	s13, s12, s15
 801e232:	edc4 6a07 	vstr	s13, [r4, #28]
 801e236:	edd4 6a01 	vldr	s13, [r4, #4]
 801e23a:	edd5 5a09 	vldr	s11, [r5, #36]	@ 0x24
 801e23e:	eef8 6ae6 	vcvt.f32.s32	s13, s13
 801e242:	ed95 6a0a 	vldr	s12, [r5, #40]	@ 0x28
 801e246:	eea6 6aa5 	vfma.f32	s12, s13, s11
 801e24a:	ed84 6a08 	vstr	s12, [r4, #32]
 801e24e:	6a6a      	ldr	r2, [r5, #36]	@ 0x24
 801e250:	6262      	str	r2, [r4, #36]	@ 0x24
 801e252:	edd5 5a0c 	vldr	s11, [r5, #48]	@ 0x30
 801e256:	ed93 6a03 	vldr	s12, [r3, #12]
 801e25a:	eea5 6a87 	vfma.f32	s12, s11, s14
 801e25e:	edd5 5a0b 	vldr	s11, [r5, #44]	@ 0x2c
 801e262:	eea5 6aa7 	vfma.f32	s12, s11, s15
 801e266:	ed84 6a0a 	vstr	s12, [r4, #40]	@ 0x28
 801e26a:	edd5 5a0b 	vldr	s11, [r5, #44]	@ 0x2c
 801e26e:	ed95 6a0c 	vldr	s12, [r5, #48]	@ 0x30
 801e272:	eea6 6aa5 	vfma.f32	s12, s13, s11
 801e276:	ed84 6a0b 	vstr	s12, [r4, #44]	@ 0x2c
 801e27a:	6aea      	ldr	r2, [r5, #44]	@ 0x2c
 801e27c:	6322      	str	r2, [r4, #48]	@ 0x30
 801e27e:	ed93 6a06 	vldr	s12, [r3, #24]
 801e282:	edd5 5a0e 	vldr	s11, [r5, #56]	@ 0x38
 801e286:	eea5 6a87 	vfma.f32	s12, s11, s14
 801e28a:	eeb0 7a46 	vmov.f32	s14, s12
 801e28e:	ed95 6a0d 	vldr	s12, [r5, #52]	@ 0x34
 801e292:	eea6 7a27 	vfma.f32	s14, s12, s15
 801e296:	ed84 7a0d 	vstr	s14, [r4, #52]	@ 0x34
 801e29a:	ed95 7a0d 	vldr	s14, [r5, #52]	@ 0x34
 801e29e:	edd5 7a0e 	vldr	s15, [r5, #56]	@ 0x38
 801e2a2:	eee6 7a87 	vfma.f32	s15, s13, s14
 801e2a6:	edc4 7a0e 	vstr	s15, [r4, #56]	@ 0x38
 801e2aa:	6b6b      	ldr	r3, [r5, #52]	@ 0x34
 801e2ac:	63e3      	str	r3, [r4, #60]	@ 0x3c
 801e2ae:	4620      	mov	r0, r4
 801e2b0:	b003      	add	sp, #12
 801e2b2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801e2b6:	bf00      	nop
 801e2b8:	3d800000 	.word	0x3d800000

0801e2bc <_ZN8touchgfx7Unicode6strlenEPKt>:
 801e2bc:	4602      	mov	r2, r0
 801e2be:	b148      	cbz	r0, 801e2d4 <_ZN8touchgfx7Unicode6strlenEPKt+0x18>
 801e2c0:	2300      	movs	r3, #0
 801e2c2:	b298      	uxth	r0, r3
 801e2c4:	3301      	adds	r3, #1
 801e2c6:	eb02 0143 	add.w	r1, r2, r3, lsl #1
 801e2ca:	f831 1c02 	ldrh.w	r1, [r1, #-2]
 801e2ce:	2900      	cmp	r1, #0
 801e2d0:	d1f7      	bne.n	801e2c2 <_ZN8touchgfx7Unicode6strlenEPKt+0x6>
 801e2d2:	4770      	bx	lr
 801e2d4:	4770      	bx	lr

0801e2d6 <_ZN8touchgfx7Unicode7strncpyEPtPKct>:
 801e2d6:	b530      	push	{r4, r5, lr}
 801e2d8:	4604      	mov	r4, r0
 801e2da:	b159      	cbz	r1, 801e2f4 <_ZN8touchgfx7Unicode7strncpyEPtPKct+0x1e>
 801e2dc:	b148      	cbz	r0, 801e2f2 <_ZN8touchgfx7Unicode7strncpyEPtPKct+0x1c>
 801e2de:	2300      	movs	r3, #0
 801e2e0:	b298      	uxth	r0, r3
 801e2e2:	4282      	cmp	r2, r0
 801e2e4:	d905      	bls.n	801e2f2 <_ZN8touchgfx7Unicode7strncpyEPtPKct+0x1c>
 801e2e6:	5ccd      	ldrb	r5, [r1, r3]
 801e2e8:	f824 5013 	strh.w	r5, [r4, r3, lsl #1]
 801e2ec:	3301      	adds	r3, #1
 801e2ee:	2d00      	cmp	r5, #0
 801e2f0:	d1f6      	bne.n	801e2e0 <_ZN8touchgfx7Unicode7strncpyEPtPKct+0xa>
 801e2f2:	bd30      	pop	{r4, r5, pc}
 801e2f4:	4608      	mov	r0, r1
 801e2f6:	e7fc      	b.n	801e2f2 <_ZN8touchgfx7Unicode7strncpyEPtPKct+0x1c>

0801e2f8 <_ZN8touchgfx7Unicode4utoaEmPtti.part.2>:
 801e2f8:	b5f0      	push	{r4, r5, r6, r7, lr}
 801e2fa:	468c      	mov	ip, r1
 801e2fc:	b08b      	sub	sp, #44	@ 0x2c
 801e2fe:	2100      	movs	r1, #0
 801e300:	ae01      	add	r6, sp, #4
 801e302:	f88d 1024 	strb.w	r1, [sp, #36]	@ 0x24
 801e306:	211f      	movs	r1, #31
 801e308:	fbb0 f7f3 	udiv	r7, r0, r3
 801e30c:	fb03 0517 	mls	r5, r3, r7, r0
 801e310:	4638      	mov	r0, r7
 801e312:	b2ec      	uxtb	r4, r5
 801e314:	2d09      	cmp	r5, #9
 801e316:	bfd4      	ite	le
 801e318:	3430      	addle	r4, #48	@ 0x30
 801e31a:	3457      	addgt	r4, #87	@ 0x57
 801e31c:	b2e4      	uxtb	r4, r4
 801e31e:	558c      	strb	r4, [r1, r6]
 801e320:	1e4c      	subs	r4, r1, #1
 801e322:	b92f      	cbnz	r7, 801e330 <_ZN8touchgfx7Unicode4utoaEmPtti.part.2+0x38>
 801e324:	4431      	add	r1, r6
 801e326:	4660      	mov	r0, ip
 801e328:	f7ff ffd5 	bl	801e2d6 <_ZN8touchgfx7Unicode7strncpyEPtPKct>
 801e32c:	b00b      	add	sp, #44	@ 0x2c
 801e32e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801e330:	4621      	mov	r1, r4
 801e332:	e7e9      	b.n	801e308 <_ZN8touchgfx7Unicode4utoaEmPtti.part.2+0x10>

0801e334 <_ZN8touchgfx7Unicode4itoaElPtti>:
 801e334:	b5f0      	push	{r4, r5, r6, r7, lr}
 801e336:	4607      	mov	r7, r0
 801e338:	b08b      	sub	sp, #44	@ 0x2c
 801e33a:	4608      	mov	r0, r1
 801e33c:	b341      	cbz	r1, 801e390 <_ZN8touchgfx7Unicode4itoaElPtti+0x5c>
 801e33e:	1e99      	subs	r1, r3, #2
 801e340:	2922      	cmp	r1, #34	@ 0x22
 801e342:	d825      	bhi.n	801e390 <_ZN8touchgfx7Unicode4itoaElPtti+0x5c>
 801e344:	2100      	movs	r1, #0
 801e346:	463c      	mov	r4, r7
 801e348:	261f      	movs	r6, #31
 801e34a:	f10d 0c04 	add.w	ip, sp, #4
 801e34e:	f88d 1024 	strb.w	r1, [sp, #36]	@ 0x24
 801e352:	1e71      	subs	r1, r6, #1
 801e354:	fb94 fef3 	sdiv	lr, r4, r3
 801e358:	fb03 441e 	mls	r4, r3, lr, r4
 801e35c:	ea84 75e4 	eor.w	r5, r4, r4, asr #31
 801e360:	eba5 75e4 	sub.w	r5, r5, r4, asr #31
 801e364:	b2ec      	uxtb	r4, r5
 801e366:	2d09      	cmp	r5, #9
 801e368:	bfd4      	ite	le
 801e36a:	3430      	addle	r4, #48	@ 0x30
 801e36c:	3457      	addgt	r4, #87	@ 0x57
 801e36e:	b2e4      	uxtb	r4, r4
 801e370:	f80c 4006 	strb.w	r4, [ip, r6]
 801e374:	4674      	mov	r4, lr
 801e376:	b96c      	cbnz	r4, 801e394 <_ZN8touchgfx7Unicode4itoaElPtti+0x60>
 801e378:	2f00      	cmp	r7, #0
 801e37a:	da05      	bge.n	801e388 <_ZN8touchgfx7Unicode4itoaElPtti+0x54>
 801e37c:	ab0a      	add	r3, sp, #40	@ 0x28
 801e37e:	4419      	add	r1, r3
 801e380:	232d      	movs	r3, #45	@ 0x2d
 801e382:	f801 3c24 	strb.w	r3, [r1, #-36]
 801e386:	1eb1      	subs	r1, r6, #2
 801e388:	3101      	adds	r1, #1
 801e38a:	4461      	add	r1, ip
 801e38c:	f7ff ffa3 	bl	801e2d6 <_ZN8touchgfx7Unicode7strncpyEPtPKct>
 801e390:	b00b      	add	sp, #44	@ 0x2c
 801e392:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801e394:	460e      	mov	r6, r1
 801e396:	e7dc      	b.n	801e352 <_ZN8touchgfx7Unicode4itoaElPtti+0x1e>

0801e398 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt>:
 801e398:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801e39c:	b085      	sub	sp, #20
 801e39e:	4691      	mov	r9, r2
 801e3a0:	6802      	ldr	r2, [r0, #0]
 801e3a2:	4688      	mov	r8, r1
 801e3a4:	461c      	mov	r4, r3
 801e3a6:	f89d 1040 	ldrb.w	r1, [sp, #64]	@ 0x40
 801e3aa:	f89d 3048 	ldrb.w	r3, [sp, #72]	@ 0x48
 801e3ae:	4683      	mov	fp, r0
 801e3b0:	4610      	mov	r0, r2
 801e3b2:	9103      	str	r1, [sp, #12]
 801e3b4:	9302      	str	r3, [sp, #8]
 801e3b6:	9201      	str	r2, [sp, #4]
 801e3b8:	f7ff ff80 	bl	801e2bc <_ZN8touchgfx7Unicode6strlenEPKt>
 801e3bc:	f1b8 0f00 	cmp.w	r8, #0
 801e3c0:	bf0c      	ite	eq
 801e3c2:	4684      	moveq	ip, r0
 801e3c4:	f100 0c01 	addne.w	ip, r0, #1
 801e3c8:	f1b9 0f69 	cmp.w	r9, #105	@ 0x69
 801e3cc:	f89d 6038 	ldrb.w	r6, [sp, #56]	@ 0x38
 801e3d0:	9f0f      	ldr	r7, [sp, #60]	@ 0x3c
 801e3d2:	fa1f fc8c 	uxth.w	ip, ip
 801e3d6:	9d13      	ldr	r5, [sp, #76]	@ 0x4c
 801e3d8:	f8dd a054 	ldr.w	sl, [sp, #84]	@ 0x54
 801e3dc:	9903      	ldr	r1, [sp, #12]
 801e3de:	e9dd 2301 	ldrd	r2, r3, [sp, #4]
 801e3e2:	d041      	beq.n	801e468 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0xd0>
 801e3e4:	d834      	bhi.n	801e450 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0xb8>
 801e3e6:	f1b9 0f63 	cmp.w	r9, #99	@ 0x63
 801e3ea:	d059      	beq.n	801e4a0 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x108>
 801e3ec:	f1b9 0f64 	cmp.w	r9, #100	@ 0x64
 801e3f0:	d03a      	beq.n	801e468 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0xd0>
 801e3f2:	f1b9 0f58 	cmp.w	r9, #88	@ 0x58
 801e3f6:	d034      	beq.n	801e462 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0xca>
 801e3f8:	2400      	movs	r4, #0
 801e3fa:	f8bd 2050 	ldrh.w	r2, [sp, #80]	@ 0x50
 801e3fe:	3a01      	subs	r2, #1
 801e400:	b169      	cbz	r1, 801e41e <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x86>
 801e402:	9911      	ldr	r1, [sp, #68]	@ 0x44
 801e404:	458c      	cmp	ip, r1
 801e406:	da09      	bge.n	801e41c <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x84>
 801e408:	eba1 010c 	sub.w	r1, r1, ip
 801e40c:	b289      	uxth	r1, r1
 801e40e:	b933      	cbnz	r3, 801e41e <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x86>
 801e410:	2e00      	cmp	r6, #0
 801e412:	d051      	beq.n	801e4b8 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x120>
 801e414:	2800      	cmp	r0, #0
 801e416:	d04f      	beq.n	801e4b8 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x120>
 801e418:	440c      	add	r4, r1
 801e41a:	b2a4      	uxth	r4, r4
 801e41c:	2100      	movs	r1, #0
 801e41e:	682b      	ldr	r3, [r5, #0]
 801e420:	4293      	cmp	r3, r2
 801e422:	da07      	bge.n	801e434 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x9c>
 801e424:	f1b8 0f00 	cmp.w	r8, #0
 801e428:	d004      	beq.n	801e434 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x9c>
 801e42a:	f82a 8013 	strh.w	r8, [sl, r3, lsl #1]
 801e42e:	682b      	ldr	r3, [r5, #0]
 801e430:	3301      	adds	r3, #1
 801e432:	602b      	str	r3, [r5, #0]
 801e434:	2730      	movs	r7, #48	@ 0x30
 801e436:	2c00      	cmp	r4, #0
 801e438:	d04e      	beq.n	801e4d8 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x140>
 801e43a:	682e      	ldr	r6, [r5, #0]
 801e43c:	3c01      	subs	r4, #1
 801e43e:	42b2      	cmp	r2, r6
 801e440:	b2a4      	uxth	r4, r4
 801e442:	dd49      	ble.n	801e4d8 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x140>
 801e444:	f82a 7016 	strh.w	r7, [sl, r6, lsl #1]
 801e448:	682b      	ldr	r3, [r5, #0]
 801e44a:	3301      	adds	r3, #1
 801e44c:	602b      	str	r3, [r5, #0]
 801e44e:	e7f2      	b.n	801e436 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x9e>
 801e450:	f1b9 0f73 	cmp.w	r9, #115	@ 0x73
 801e454:	d01d      	beq.n	801e492 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0xfa>
 801e456:	f1b9 0f78 	cmp.w	r9, #120	@ 0x78
 801e45a:	d002      	beq.n	801e462 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0xca>
 801e45c:	f1b9 0f6f 	cmp.w	r9, #111	@ 0x6f
 801e460:	e7c9      	b.n	801e3f6 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x5e>
 801e462:	4684      	mov	ip, r0
 801e464:	f04f 0800 	mov.w	r8, #0
 801e468:	2c00      	cmp	r4, #0
 801e46a:	d0c6      	beq.n	801e3fa <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x62>
 801e46c:	b947      	cbnz	r7, 801e480 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0xe8>
 801e46e:	2801      	cmp	r0, #1
 801e470:	d106      	bne.n	801e480 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0xe8>
 801e472:	8814      	ldrh	r4, [r2, #0]
 801e474:	2c30      	cmp	r4, #48	@ 0x30
 801e476:	bf02      	ittt	eq
 801e478:	3202      	addeq	r2, #2
 801e47a:	4638      	moveq	r0, r7
 801e47c:	f8cb 2000 	streq.w	r2, [fp]
 801e480:	45bc      	cmp	ip, r7
 801e482:	da14      	bge.n	801e4ae <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x116>
 801e484:	b2bf      	uxth	r7, r7
 801e486:	eba7 040c 	sub.w	r4, r7, ip
 801e48a:	46bc      	mov	ip, r7
 801e48c:	b2a4      	uxth	r4, r4
 801e48e:	2600      	movs	r6, #0
 801e490:	e7b3      	b.n	801e3fa <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x62>
 801e492:	4684      	mov	ip, r0
 801e494:	b16c      	cbz	r4, 801e4b2 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x11a>
 801e496:	42b8      	cmp	r0, r7
 801e498:	dd00      	ble.n	801e49c <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x104>
 801e49a:	b2b8      	uxth	r0, r7
 801e49c:	2400      	movs	r4, #0
 801e49e:	e003      	b.n	801e4a8 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x110>
 801e4a0:	f04f 0c01 	mov.w	ip, #1
 801e4a4:	2400      	movs	r4, #0
 801e4a6:	4660      	mov	r0, ip
 801e4a8:	4626      	mov	r6, r4
 801e4aa:	46a0      	mov	r8, r4
 801e4ac:	e7a5      	b.n	801e3fa <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x62>
 801e4ae:	2400      	movs	r4, #0
 801e4b0:	e7ed      	b.n	801e48e <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0xf6>
 801e4b2:	4626      	mov	r6, r4
 801e4b4:	46a0      	mov	r8, r4
 801e4b6:	e7a0      	b.n	801e3fa <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x62>
 801e4b8:	2900      	cmp	r1, #0
 801e4ba:	d0b0      	beq.n	801e41e <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x86>
 801e4bc:	2720      	movs	r7, #32
 801e4be:	682e      	ldr	r6, [r5, #0]
 801e4c0:	2900      	cmp	r1, #0
 801e4c2:	d0ac      	beq.n	801e41e <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x86>
 801e4c4:	3901      	subs	r1, #1
 801e4c6:	4296      	cmp	r6, r2
 801e4c8:	b289      	uxth	r1, r1
 801e4ca:	daa7      	bge.n	801e41c <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x84>
 801e4cc:	f82a 7016 	strh.w	r7, [sl, r6, lsl #1]
 801e4d0:	682b      	ldr	r3, [r5, #0]
 801e4d2:	3301      	adds	r3, #1
 801e4d4:	602b      	str	r3, [r5, #0]
 801e4d6:	e7f2      	b.n	801e4be <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x126>
 801e4d8:	b188      	cbz	r0, 801e4fe <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x166>
 801e4da:	682b      	ldr	r3, [r5, #0]
 801e4dc:	3801      	subs	r0, #1
 801e4de:	429a      	cmp	r2, r3
 801e4e0:	b280      	uxth	r0, r0
 801e4e2:	dd0c      	ble.n	801e4fe <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x166>
 801e4e4:	f8db 3000 	ldr.w	r3, [fp]
 801e4e8:	1c9c      	adds	r4, r3, #2
 801e4ea:	f8cb 4000 	str.w	r4, [fp]
 801e4ee:	881c      	ldrh	r4, [r3, #0]
 801e4f0:	682b      	ldr	r3, [r5, #0]
 801e4f2:	f82a 4013 	strh.w	r4, [sl, r3, lsl #1]
 801e4f6:	682b      	ldr	r3, [r5, #0]
 801e4f8:	3301      	adds	r3, #1
 801e4fa:	602b      	str	r3, [r5, #0]
 801e4fc:	e7ec      	b.n	801e4d8 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x140>
 801e4fe:	2620      	movs	r6, #32
 801e500:	b151      	cbz	r1, 801e518 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x180>
 801e502:	6828      	ldr	r0, [r5, #0]
 801e504:	3901      	subs	r1, #1
 801e506:	4282      	cmp	r2, r0
 801e508:	b289      	uxth	r1, r1
 801e50a:	dd05      	ble.n	801e518 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x180>
 801e50c:	f82a 6010 	strh.w	r6, [sl, r0, lsl #1]
 801e510:	682b      	ldr	r3, [r5, #0]
 801e512:	3301      	adds	r3, #1
 801e514:	602b      	str	r3, [r5, #0]
 801e516:	e7f3      	b.n	801e500 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x168>
 801e518:	b005      	add	sp, #20
 801e51a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0801e51e <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_>:
 801e51e:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 801e522:	2400      	movs	r4, #0
 801e524:	e9dd 8c07 	ldrd	r8, ip, [sp, #28]
 801e528:	e9dd e609 	ldrd	lr, r6, [sp, #36]	@ 0x24
 801e52c:	e9dd 750b 	ldrd	r7, r5, [sp, #44]	@ 0x2c
 801e530:	8014      	strh	r4, [r2, #0]
 801e532:	701c      	strb	r4, [r3, #0]
 801e534:	f888 4000 	strb.w	r4, [r8]
 801e538:	f88c 4000 	strb.w	r4, [ip]
 801e53c:	f88e 4000 	strb.w	r4, [lr]
 801e540:	703c      	strb	r4, [r7, #0]
 801e542:	6804      	ldr	r4, [r0, #0]
 801e544:	b1a4      	cbz	r4, 801e570 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x52>
 801e546:	8824      	ldrh	r4, [r4, #0]
 801e548:	f04f 0901 	mov.w	r9, #1
 801e54c:	b314      	cbz	r4, 801e594 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x76>
 801e54e:	2c2b      	cmp	r4, #43	@ 0x2b
 801e550:	d001      	beq.n	801e556 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x38>
 801e552:	2c20      	cmp	r4, #32
 801e554:	d110      	bne.n	801e578 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x5a>
 801e556:	8014      	strh	r4, [r2, #0]
 801e558:	6804      	ldr	r4, [r0, #0]
 801e55a:	b10c      	cbz	r4, 801e560 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x42>
 801e55c:	3402      	adds	r4, #2
 801e55e:	6004      	str	r4, [r0, #0]
 801e560:	680c      	ldr	r4, [r1, #0]
 801e562:	b10c      	cbz	r4, 801e568 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x4a>
 801e564:	3401      	adds	r4, #1
 801e566:	600c      	str	r4, [r1, #0]
 801e568:	6804      	ldr	r4, [r0, #0]
 801e56a:	b17c      	cbz	r4, 801e58c <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x6e>
 801e56c:	8824      	ldrh	r4, [r4, #0]
 801e56e:	e7ed      	b.n	801e54c <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x2e>
 801e570:	680c      	ldr	r4, [r1, #0]
 801e572:	b17c      	cbz	r4, 801e594 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x76>
 801e574:	7824      	ldrb	r4, [r4, #0]
 801e576:	e7e7      	b.n	801e548 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x2a>
 801e578:	2c2d      	cmp	r4, #45	@ 0x2d
 801e57a:	d102      	bne.n	801e582 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x64>
 801e57c:	f883 9000 	strb.w	r9, [r3]
 801e580:	e7ea      	b.n	801e558 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x3a>
 801e582:	2c23      	cmp	r4, #35	@ 0x23
 801e584:	d107      	bne.n	801e596 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x78>
 801e586:	f888 9000 	strb.w	r9, [r8]
 801e58a:	e7e5      	b.n	801e558 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x3a>
 801e58c:	680c      	ldr	r4, [r1, #0]
 801e58e:	b10c      	cbz	r4, 801e594 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x76>
 801e590:	7824      	ldrb	r4, [r4, #0]
 801e592:	e7db      	b.n	801e54c <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x2e>
 801e594:	2400      	movs	r4, #0
 801e596:	f1a4 0330 	sub.w	r3, r4, #48	@ 0x30
 801e59a:	2b09      	cmp	r3, #9
 801e59c:	d901      	bls.n	801e5a2 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x84>
 801e59e:	2c2a      	cmp	r4, #42	@ 0x2a
 801e5a0:	d122      	bne.n	801e5e8 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0xca>
 801e5a2:	2301      	movs	r3, #1
 801e5a4:	2c30      	cmp	r4, #48	@ 0x30
 801e5a6:	f88e 3000 	strb.w	r3, [lr]
 801e5aa:	d10d      	bne.n	801e5c8 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0xaa>
 801e5ac:	f88c 3000 	strb.w	r3, [ip]
 801e5b0:	6803      	ldr	r3, [r0, #0]
 801e5b2:	b10b      	cbz	r3, 801e5b8 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x9a>
 801e5b4:	3302      	adds	r3, #2
 801e5b6:	6003      	str	r3, [r0, #0]
 801e5b8:	680b      	ldr	r3, [r1, #0]
 801e5ba:	b10b      	cbz	r3, 801e5c0 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0xa2>
 801e5bc:	3301      	adds	r3, #1
 801e5be:	600b      	str	r3, [r1, #0]
 801e5c0:	6803      	ldr	r3, [r0, #0]
 801e5c2:	2b00      	cmp	r3, #0
 801e5c4:	d02f      	beq.n	801e626 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x108>
 801e5c6:	881c      	ldrh	r4, [r3, #0]
 801e5c8:	2c2a      	cmp	r4, #42	@ 0x2a
 801e5ca:	d135      	bne.n	801e638 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x11a>
 801e5cc:	f04f 33ff 	mov.w	r3, #4294967295
 801e5d0:	6033      	str	r3, [r6, #0]
 801e5d2:	6803      	ldr	r3, [r0, #0]
 801e5d4:	b10b      	cbz	r3, 801e5da <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0xbc>
 801e5d6:	3302      	adds	r3, #2
 801e5d8:	6003      	str	r3, [r0, #0]
 801e5da:	680b      	ldr	r3, [r1, #0]
 801e5dc:	b10b      	cbz	r3, 801e5e2 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0xc4>
 801e5de:	3301      	adds	r3, #1
 801e5e0:	600b      	str	r3, [r1, #0]
 801e5e2:	6803      	ldr	r3, [r0, #0]
 801e5e4:	b31b      	cbz	r3, 801e62e <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x110>
 801e5e6:	881c      	ldrh	r4, [r3, #0]
 801e5e8:	2c2e      	cmp	r4, #46	@ 0x2e
 801e5ea:	d11a      	bne.n	801e622 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x104>
 801e5ec:	2301      	movs	r3, #1
 801e5ee:	703b      	strb	r3, [r7, #0]
 801e5f0:	6803      	ldr	r3, [r0, #0]
 801e5f2:	b10b      	cbz	r3, 801e5f8 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0xda>
 801e5f4:	3302      	adds	r3, #2
 801e5f6:	6003      	str	r3, [r0, #0]
 801e5f8:	680b      	ldr	r3, [r1, #0]
 801e5fa:	b10b      	cbz	r3, 801e600 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0xe2>
 801e5fc:	3301      	adds	r3, #1
 801e5fe:	600b      	str	r3, [r1, #0]
 801e600:	6803      	ldr	r3, [r0, #0]
 801e602:	2b00      	cmp	r3, #0
 801e604:	d036      	beq.n	801e674 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x156>
 801e606:	881b      	ldrh	r3, [r3, #0]
 801e608:	2b2a      	cmp	r3, #42	@ 0x2a
 801e60a:	d137      	bne.n	801e67c <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x15e>
 801e60c:	f04f 33ff 	mov.w	r3, #4294967295
 801e610:	602b      	str	r3, [r5, #0]
 801e612:	6803      	ldr	r3, [r0, #0]
 801e614:	b10b      	cbz	r3, 801e61a <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0xfc>
 801e616:	3302      	adds	r3, #2
 801e618:	6003      	str	r3, [r0, #0]
 801e61a:	680b      	ldr	r3, [r1, #0]
 801e61c:	b10b      	cbz	r3, 801e622 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x104>
 801e61e:	3301      	adds	r3, #1
 801e620:	600b      	str	r3, [r1, #0]
 801e622:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801e626:	680c      	ldr	r4, [r1, #0]
 801e628:	b134      	cbz	r4, 801e638 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x11a>
 801e62a:	7824      	ldrb	r4, [r4, #0]
 801e62c:	e7cc      	b.n	801e5c8 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0xaa>
 801e62e:	680b      	ldr	r3, [r1, #0]
 801e630:	2b00      	cmp	r3, #0
 801e632:	d0f6      	beq.n	801e622 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x104>
 801e634:	781c      	ldrb	r4, [r3, #0]
 801e636:	e7d7      	b.n	801e5e8 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0xca>
 801e638:	2300      	movs	r3, #0
 801e63a:	220a      	movs	r2, #10
 801e63c:	6033      	str	r3, [r6, #0]
 801e63e:	f1a4 0c30 	sub.w	ip, r4, #48	@ 0x30
 801e642:	fa1f f38c 	uxth.w	r3, ip
 801e646:	2b09      	cmp	r3, #9
 801e648:	d8ce      	bhi.n	801e5e8 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0xca>
 801e64a:	6833      	ldr	r3, [r6, #0]
 801e64c:	fb02 c303 	mla	r3, r2, r3, ip
 801e650:	6033      	str	r3, [r6, #0]
 801e652:	6803      	ldr	r3, [r0, #0]
 801e654:	b10b      	cbz	r3, 801e65a <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x13c>
 801e656:	3302      	adds	r3, #2
 801e658:	6003      	str	r3, [r0, #0]
 801e65a:	680b      	ldr	r3, [r1, #0]
 801e65c:	b10b      	cbz	r3, 801e662 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x144>
 801e65e:	3301      	adds	r3, #1
 801e660:	600b      	str	r3, [r1, #0]
 801e662:	6803      	ldr	r3, [r0, #0]
 801e664:	b10b      	cbz	r3, 801e66a <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x14c>
 801e666:	881c      	ldrh	r4, [r3, #0]
 801e668:	e7e9      	b.n	801e63e <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x120>
 801e66a:	680c      	ldr	r4, [r1, #0]
 801e66c:	2c00      	cmp	r4, #0
 801e66e:	d0e6      	beq.n	801e63e <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x120>
 801e670:	7824      	ldrb	r4, [r4, #0]
 801e672:	e7e4      	b.n	801e63e <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x120>
 801e674:	680b      	ldr	r3, [r1, #0]
 801e676:	b10b      	cbz	r3, 801e67c <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x15e>
 801e678:	781b      	ldrb	r3, [r3, #0]
 801e67a:	e7c5      	b.n	801e608 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0xea>
 801e67c:	2200      	movs	r2, #0
 801e67e:	240a      	movs	r4, #10
 801e680:	602a      	str	r2, [r5, #0]
 801e682:	3b30      	subs	r3, #48	@ 0x30
 801e684:	682a      	ldr	r2, [r5, #0]
 801e686:	b29e      	uxth	r6, r3
 801e688:	2e09      	cmp	r6, #9
 801e68a:	d813      	bhi.n	801e6b4 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x196>
 801e68c:	fb04 3302 	mla	r3, r4, r2, r3
 801e690:	602b      	str	r3, [r5, #0]
 801e692:	6803      	ldr	r3, [r0, #0]
 801e694:	b10b      	cbz	r3, 801e69a <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x17c>
 801e696:	3302      	adds	r3, #2
 801e698:	6003      	str	r3, [r0, #0]
 801e69a:	680b      	ldr	r3, [r1, #0]
 801e69c:	b10b      	cbz	r3, 801e6a2 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x184>
 801e69e:	3301      	adds	r3, #1
 801e6a0:	600b      	str	r3, [r1, #0]
 801e6a2:	6803      	ldr	r3, [r0, #0]
 801e6a4:	b10b      	cbz	r3, 801e6aa <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x18c>
 801e6a6:	881b      	ldrh	r3, [r3, #0]
 801e6a8:	e7eb      	b.n	801e682 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x164>
 801e6aa:	680b      	ldr	r3, [r1, #0]
 801e6ac:	2b00      	cmp	r3, #0
 801e6ae:	d0e8      	beq.n	801e682 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x164>
 801e6b0:	781b      	ldrb	r3, [r3, #0]
 801e6b2:	e7e6      	b.n	801e682 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x164>
 801e6b4:	2a06      	cmp	r2, #6
 801e6b6:	bfa8      	it	ge
 801e6b8:	2206      	movge	r2, #6
 801e6ba:	602a      	str	r2, [r5, #0]
 801e6bc:	e7b1      	b.n	801e622 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x104>

0801e6be <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list>:
 801e6be:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801e6c2:	b0a3      	sub	sp, #140	@ 0x8c
 801e6c4:	2600      	movs	r6, #0
 801e6c6:	4607      	mov	r7, r0
 801e6c8:	4688      	mov	r8, r1
 801e6ca:	f10d 0944 	add.w	r9, sp, #68	@ 0x44
 801e6ce:	4631      	mov	r1, r6
 801e6d0:	9c2c      	ldr	r4, [sp, #176]	@ 0xb0
 801e6d2:	4648      	mov	r0, r9
 801e6d4:	960d      	str	r6, [sp, #52]	@ 0x34
 801e6d6:	e9cd 3208 	strd	r3, r2, [sp, #32]
 801e6da:	2242      	movs	r2, #66	@ 0x42
 801e6dc:	f00c fcb9 	bl	802b052 <memset>
 801e6e0:	b15f      	cbz	r7, 801e6fa <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x3c>
 801e6e2:	f108 3aff 	add.w	sl, r8, #4294967295
 801e6e6:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 801e6e8:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 801e6ea:	b152      	cbz	r2, 801e702 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x44>
 801e6ec:	8812      	ldrh	r2, [r2, #0]
 801e6ee:	b10a      	cbz	r2, 801e6f4 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x36>
 801e6f0:	459a      	cmp	sl, r3
 801e6f2:	dc2e      	bgt.n	801e752 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x94>
 801e6f4:	2200      	movs	r2, #0
 801e6f6:	f827 2013 	strh.w	r2, [r7, r3, lsl #1]
 801e6fa:	4638      	mov	r0, r7
 801e6fc:	b023      	add	sp, #140	@ 0x8c
 801e6fe:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801e702:	9a08      	ldr	r2, [sp, #32]
 801e704:	2a00      	cmp	r2, #0
 801e706:	d0f5      	beq.n	801e6f4 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x36>
 801e708:	7812      	ldrb	r2, [r2, #0]
 801e70a:	e7f0      	b.n	801e6ee <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x30>
 801e70c:	2d00      	cmp	r5, #0
 801e70e:	d0ea      	beq.n	801e6e6 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x28>
 801e710:	782a      	ldrb	r2, [r5, #0]
 801e712:	b142      	cbz	r2, 801e726 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x68>
 801e714:	2a25      	cmp	r2, #37	@ 0x25
 801e716:	d001      	beq.n	801e71c <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x5e>
 801e718:	459a      	cmp	sl, r3
 801e71a:	dc08      	bgt.n	801e72e <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x70>
 801e71c:	f1bb 0f00 	cmp.w	fp, #0
 801e720:	d121      	bne.n	801e766 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0xa8>
 801e722:	2d00      	cmp	r5, #0
 801e724:	d0df      	beq.n	801e6e6 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x28>
 801e726:	782a      	ldrb	r2, [r5, #0]
 801e728:	f04f 0b00 	mov.w	fp, #0
 801e72c:	e01d      	b.n	801e76a <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0xac>
 801e72e:	f1bb 0f00 	cmp.w	fp, #0
 801e732:	d077      	beq.n	801e824 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x166>
 801e734:	f8bb 2000 	ldrh.w	r2, [fp]
 801e738:	f827 2013 	strh.w	r2, [r7, r3, lsl #1]
 801e73c:	f1bb 0f00 	cmp.w	fp, #0
 801e740:	d002      	beq.n	801e748 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x8a>
 801e742:	f10b 0202 	add.w	r2, fp, #2
 801e746:	9209      	str	r2, [sp, #36]	@ 0x24
 801e748:	b10d      	cbz	r5, 801e74e <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x90>
 801e74a:	3501      	adds	r5, #1
 801e74c:	9508      	str	r5, [sp, #32]
 801e74e:	3301      	adds	r3, #1
 801e750:	930d      	str	r3, [sp, #52]	@ 0x34
 801e752:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 801e754:	e9dd 5b08 	ldrd	r5, fp, [sp, #32]
 801e758:	f1bb 0f00 	cmp.w	fp, #0
 801e75c:	d0d6      	beq.n	801e70c <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x4e>
 801e75e:	f8bb 2000 	ldrh.w	r2, [fp]
 801e762:	2a00      	cmp	r2, #0
 801e764:	d1d6      	bne.n	801e714 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x56>
 801e766:	f8bb 2000 	ldrh.w	r2, [fp]
 801e76a:	2a00      	cmp	r2, #0
 801e76c:	d0bb      	beq.n	801e6e6 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x28>
 801e76e:	459a      	cmp	sl, r3
 801e770:	ddb9      	ble.n	801e6e6 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x28>
 801e772:	f8ad 6032 	strh.w	r6, [sp, #50]	@ 0x32
 801e776:	f88d 602d 	strb.w	r6, [sp, #45]	@ 0x2d
 801e77a:	f88d 602e 	strb.w	r6, [sp, #46]	@ 0x2e
 801e77e:	f88d 602f 	strb.w	r6, [sp, #47]	@ 0x2f
 801e782:	f88d 6030 	strb.w	r6, [sp, #48]	@ 0x30
 801e786:	960e      	str	r6, [sp, #56]	@ 0x38
 801e788:	f88d 6031 	strb.w	r6, [sp, #49]	@ 0x31
 801e78c:	960f      	str	r6, [sp, #60]	@ 0x3c
 801e78e:	f1bb 0f00 	cmp.w	fp, #0
 801e792:	d002      	beq.n	801e79a <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0xdc>
 801e794:	f10b 0302 	add.w	r3, fp, #2
 801e798:	9309      	str	r3, [sp, #36]	@ 0x24
 801e79a:	b10d      	cbz	r5, 801e7a0 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0xe2>
 801e79c:	1c6b      	adds	r3, r5, #1
 801e79e:	9308      	str	r3, [sp, #32]
 801e7a0:	ab0f      	add	r3, sp, #60	@ 0x3c
 801e7a2:	f10d 0232 	add.w	r2, sp, #50	@ 0x32
 801e7a6:	a908      	add	r1, sp, #32
 801e7a8:	a809      	add	r0, sp, #36	@ 0x24
 801e7aa:	9305      	str	r3, [sp, #20]
 801e7ac:	f10d 0331 	add.w	r3, sp, #49	@ 0x31
 801e7b0:	9304      	str	r3, [sp, #16]
 801e7b2:	ab0e      	add	r3, sp, #56	@ 0x38
 801e7b4:	9303      	str	r3, [sp, #12]
 801e7b6:	ab0c      	add	r3, sp, #48	@ 0x30
 801e7b8:	9302      	str	r3, [sp, #8]
 801e7ba:	f10d 032f 	add.w	r3, sp, #47	@ 0x2f
 801e7be:	9301      	str	r3, [sp, #4]
 801e7c0:	f10d 032e 	add.w	r3, sp, #46	@ 0x2e
 801e7c4:	9300      	str	r3, [sp, #0]
 801e7c6:	f10d 032d 	add.w	r3, sp, #45	@ 0x2d
 801e7ca:	f7ff fea8 	bl	801e51e <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_>
 801e7ce:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 801e7d0:	2b00      	cmp	r3, #0
 801e7d2:	bfbf      	itttt	lt
 801e7d4:	6823      	ldrlt	r3, [r4, #0]
 801e7d6:	3404      	addlt	r4, #4
 801e7d8:	ea23 73e3 	biclt.w	r3, r3, r3, asr #31
 801e7dc:	930e      	strlt	r3, [sp, #56]	@ 0x38
 801e7de:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 801e7e0:	2b00      	cmp	r3, #0
 801e7e2:	bfbe      	ittt	lt
 801e7e4:	6823      	ldrlt	r3, [r4, #0]
 801e7e6:	3404      	addlt	r4, #4
 801e7e8:	ea23 73e3 	biclt.w	r3, r3, r3, asr #31
 801e7ec:	e9dd 2108 	ldrd	r2, r1, [sp, #32]
 801e7f0:	bfb8      	it	lt
 801e7f2:	930f      	strlt	r3, [sp, #60]	@ 0x3c
 801e7f4:	b1d9      	cbz	r1, 801e82e <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x170>
 801e7f6:	880b      	ldrh	r3, [r1, #0]
 801e7f8:	2b69      	cmp	r3, #105	@ 0x69
 801e7fa:	d01f      	beq.n	801e83c <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x17e>
 801e7fc:	d82f      	bhi.n	801e85e <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x1a0>
 801e7fe:	2b58      	cmp	r3, #88	@ 0x58
 801e800:	d01c      	beq.n	801e83c <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x17e>
 801e802:	d818      	bhi.n	801e836 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x178>
 801e804:	2b25      	cmp	r3, #37	@ 0x25
 801e806:	d034      	beq.n	801e872 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x1b4>
 801e808:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 801e80a:	e9cd 5b08 	strd	r5, fp, [sp, #32]
 801e80e:	f1bb 0f00 	cmp.w	fp, #0
 801e812:	f000 80b7 	beq.w	801e984 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x2c6>
 801e816:	f8bb 5000 	ldrh.w	r5, [fp]
 801e81a:	f827 5013 	strh.w	r5, [r7, r3, lsl #1]
 801e81e:	3301      	adds	r3, #1
 801e820:	930d      	str	r3, [sp, #52]	@ 0x34
 801e822:	e029      	b.n	801e878 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x1ba>
 801e824:	b10d      	cbz	r5, 801e82a <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x16c>
 801e826:	782a      	ldrb	r2, [r5, #0]
 801e828:	e786      	b.n	801e738 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x7a>
 801e82a:	462a      	mov	r2, r5
 801e82c:	e784      	b.n	801e738 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x7a>
 801e82e:	2a00      	cmp	r2, #0
 801e830:	d0ea      	beq.n	801e808 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x14a>
 801e832:	7813      	ldrb	r3, [r2, #0]
 801e834:	e7e0      	b.n	801e7f8 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x13a>
 801e836:	3b63      	subs	r3, #99	@ 0x63
 801e838:	2b01      	cmp	r3, #1
 801e83a:	d8e5      	bhi.n	801e808 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x14a>
 801e83c:	f8cd 9040 	str.w	r9, [sp, #64]	@ 0x40
 801e840:	b329      	cbz	r1, 801e88e <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x1d0>
 801e842:	880b      	ldrh	r3, [r1, #0]
 801e844:	2b69      	cmp	r3, #105	@ 0x69
 801e846:	d063      	beq.n	801e910 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x252>
 801e848:	d825      	bhi.n	801e896 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x1d8>
 801e84a:	2b63      	cmp	r3, #99	@ 0x63
 801e84c:	d038      	beq.n	801e8c0 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x202>
 801e84e:	2b64      	cmp	r3, #100	@ 0x64
 801e850:	d05e      	beq.n	801e910 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x252>
 801e852:	2b58      	cmp	r3, #88	@ 0x58
 801e854:	d07a      	beq.n	801e94c <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x28e>
 801e856:	f8ad 6044 	strh.w	r6, [sp, #68]	@ 0x44
 801e85a:	4625      	mov	r5, r4
 801e85c:	e036      	b.n	801e8cc <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x20e>
 801e85e:	2b73      	cmp	r3, #115	@ 0x73
 801e860:	d0ec      	beq.n	801e83c <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x17e>
 801e862:	d802      	bhi.n	801e86a <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x1ac>
 801e864:	2b6f      	cmp	r3, #111	@ 0x6f
 801e866:	d1cf      	bne.n	801e808 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x14a>
 801e868:	e7e8      	b.n	801e83c <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x17e>
 801e86a:	2b75      	cmp	r3, #117	@ 0x75
 801e86c:	d0e6      	beq.n	801e83c <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x17e>
 801e86e:	2b78      	cmp	r3, #120	@ 0x78
 801e870:	e7f9      	b.n	801e866 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x1a8>
 801e872:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 801e874:	f827 3012 	strh.w	r3, [r7, r2, lsl #1]
 801e878:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801e87a:	b10b      	cbz	r3, 801e880 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x1c2>
 801e87c:	3302      	adds	r3, #2
 801e87e:	9309      	str	r3, [sp, #36]	@ 0x24
 801e880:	9b08      	ldr	r3, [sp, #32]
 801e882:	2b00      	cmp	r3, #0
 801e884:	f43f af2f 	beq.w	801e6e6 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x28>
 801e888:	3301      	adds	r3, #1
 801e88a:	9308      	str	r3, [sp, #32]
 801e88c:	e72b      	b.n	801e6e6 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x28>
 801e88e:	2a00      	cmp	r2, #0
 801e890:	d0e1      	beq.n	801e856 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x198>
 801e892:	7813      	ldrb	r3, [r2, #0]
 801e894:	e7d6      	b.n	801e844 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x186>
 801e896:	2b73      	cmp	r3, #115	@ 0x73
 801e898:	d036      	beq.n	801e908 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x24a>
 801e89a:	d807      	bhi.n	801e8ac <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x1ee>
 801e89c:	2b6f      	cmp	r3, #111	@ 0x6f
 801e89e:	d1da      	bne.n	801e856 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x198>
 801e8a0:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 801e8a2:	1d25      	adds	r5, r4, #4
 801e8a4:	2308      	movs	r3, #8
 801e8a6:	eba8 0202 	sub.w	r2, r8, r2
 801e8aa:	e049      	b.n	801e940 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x282>
 801e8ac:	2b75      	cmp	r3, #117	@ 0x75
 801e8ae:	d042      	beq.n	801e936 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x278>
 801e8b0:	2b78      	cmp	r3, #120	@ 0x78
 801e8b2:	d1d0      	bne.n	801e856 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x198>
 801e8b4:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 801e8b6:	1d25      	adds	r5, r4, #4
 801e8b8:	2310      	movs	r3, #16
 801e8ba:	eba8 0202 	sub.w	r2, r8, r2
 801e8be:	e03f      	b.n	801e940 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x282>
 801e8c0:	7823      	ldrb	r3, [r4, #0]
 801e8c2:	1d25      	adds	r5, r4, #4
 801e8c4:	f8ad 6046 	strh.w	r6, [sp, #70]	@ 0x46
 801e8c8:	f8ad 3044 	strh.w	r3, [sp, #68]	@ 0x44
 801e8cc:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801e8ce:	f8bd 1032 	ldrh.w	r1, [sp, #50]	@ 0x32
 801e8d2:	2b00      	cmp	r3, #0
 801e8d4:	d051      	beq.n	801e97a <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x2bc>
 801e8d6:	881a      	ldrh	r2, [r3, #0]
 801e8d8:	a80d      	add	r0, sp, #52	@ 0x34
 801e8da:	f89d 3031 	ldrb.w	r3, [sp, #49]	@ 0x31
 801e8de:	462c      	mov	r4, r5
 801e8e0:	9005      	str	r0, [sp, #20]
 801e8e2:	f89d 002d 	ldrb.w	r0, [sp, #45]	@ 0x2d
 801e8e6:	9004      	str	r0, [sp, #16]
 801e8e8:	980e      	ldr	r0, [sp, #56]	@ 0x38
 801e8ea:	9003      	str	r0, [sp, #12]
 801e8ec:	f89d 0030 	ldrb.w	r0, [sp, #48]	@ 0x30
 801e8f0:	9002      	str	r0, [sp, #8]
 801e8f2:	980f      	ldr	r0, [sp, #60]	@ 0x3c
 801e8f4:	9001      	str	r0, [sp, #4]
 801e8f6:	f89d 002f 	ldrb.w	r0, [sp, #47]	@ 0x2f
 801e8fa:	e9cd 8706 	strd	r8, r7, [sp, #24]
 801e8fe:	9000      	str	r0, [sp, #0]
 801e900:	a810      	add	r0, sp, #64	@ 0x40
 801e902:	f7ff fd49 	bl	801e398 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt>
 801e906:	e7b7      	b.n	801e878 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x1ba>
 801e908:	1d25      	adds	r5, r4, #4
 801e90a:	6823      	ldr	r3, [r4, #0]
 801e90c:	9310      	str	r3, [sp, #64]	@ 0x40
 801e90e:	e7dd      	b.n	801e8cc <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x20e>
 801e910:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 801e912:	230a      	movs	r3, #10
 801e914:	4649      	mov	r1, r9
 801e916:	6820      	ldr	r0, [r4, #0]
 801e918:	eba8 0202 	sub.w	r2, r8, r2
 801e91c:	1d25      	adds	r5, r4, #4
 801e91e:	b292      	uxth	r2, r2
 801e920:	f7ff fd08 	bl	801e334 <_ZN8touchgfx7Unicode4itoaElPtti>
 801e924:	f8bd 3044 	ldrh.w	r3, [sp, #68]	@ 0x44
 801e928:	2b2d      	cmp	r3, #45	@ 0x2d
 801e92a:	d1cf      	bne.n	801e8cc <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x20e>
 801e92c:	f8ad 3032 	strh.w	r3, [sp, #50]	@ 0x32
 801e930:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 801e932:	3302      	adds	r3, #2
 801e934:	e7ea      	b.n	801e90c <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x24e>
 801e936:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 801e938:	1d25      	adds	r5, r4, #4
 801e93a:	230a      	movs	r3, #10
 801e93c:	eba8 0202 	sub.w	r2, r8, r2
 801e940:	b292      	uxth	r2, r2
 801e942:	4649      	mov	r1, r9
 801e944:	6820      	ldr	r0, [r4, #0]
 801e946:	f7ff fcd7 	bl	801e2f8 <_ZN8touchgfx7Unicode4utoaEmPtti.part.2>
 801e94a:	e7bf      	b.n	801e8cc <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x20e>
 801e94c:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 801e94e:	2310      	movs	r3, #16
 801e950:	4649      	mov	r1, r9
 801e952:	6820      	ldr	r0, [r4, #0]
 801e954:	eba8 0202 	sub.w	r2, r8, r2
 801e958:	1d25      	adds	r5, r4, #4
 801e95a:	b292      	uxth	r2, r2
 801e95c:	f7ff fccc 	bl	801e2f8 <_ZN8touchgfx7Unicode4utoaEmPtti.part.2>
 801e960:	f10d 0242 	add.w	r2, sp, #66	@ 0x42
 801e964:	f832 3f02 	ldrh.w	r3, [r2, #2]!
 801e968:	2b00      	cmp	r3, #0
 801e96a:	d0af      	beq.n	801e8cc <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x20e>
 801e96c:	f1a3 0161 	sub.w	r1, r3, #97	@ 0x61
 801e970:	2919      	cmp	r1, #25
 801e972:	d8f7      	bhi.n	801e964 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x2a6>
 801e974:	3b20      	subs	r3, #32
 801e976:	8013      	strh	r3, [r2, #0]
 801e978:	e7f4      	b.n	801e964 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x2a6>
 801e97a:	9a08      	ldr	r2, [sp, #32]
 801e97c:	2a00      	cmp	r2, #0
 801e97e:	d0ab      	beq.n	801e8d8 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x21a>
 801e980:	7812      	ldrb	r2, [r2, #0]
 801e982:	e7a9      	b.n	801e8d8 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x21a>
 801e984:	2d00      	cmp	r5, #0
 801e986:	f43f af48 	beq.w	801e81a <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x15c>
 801e98a:	782d      	ldrb	r5, [r5, #0]
 801e98c:	e745      	b.n	801e81a <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x15c>

0801e98e <_ZN8touchgfx7Unicode9vsnprintfEPttPKcSt9__va_list>:
 801e98e:	b507      	push	{r0, r1, r2, lr}
 801e990:	9300      	str	r3, [sp, #0]
 801e992:	4613      	mov	r3, r2
 801e994:	2200      	movs	r2, #0
 801e996:	f7ff fe92 	bl	801e6be <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list>
 801e99a:	b003      	add	sp, #12
 801e99c:	f85d fb04 	ldr.w	pc, [sp], #4

0801e9a0 <_ZN8touchgfx7Unicode8snprintfEPttPKcz>:
 801e9a0:	b40c      	push	{r2, r3}
 801e9a2:	b507      	push	{r0, r1, r2, lr}
 801e9a4:	ab04      	add	r3, sp, #16
 801e9a6:	f853 2b04 	ldr.w	r2, [r3], #4
 801e9aa:	9301      	str	r3, [sp, #4]
 801e9ac:	f7ff ffef 	bl	801e98e <_ZN8touchgfx7Unicode9vsnprintfEPttPKcSt9__va_list>
 801e9b0:	b003      	add	sp, #12
 801e9b2:	f85d eb04 	ldr.w	lr, [sp], #4
 801e9b6:	b002      	add	sp, #8
 801e9b8:	4770      	bx	lr
	...

0801e9bc <_ZN8touchgfx11FontManager15setFontProviderEPNS_12FontProviderE>:
 801e9bc:	4b01      	ldr	r3, [pc, #4]	@ (801e9c4 <_ZN8touchgfx11FontManager15setFontProviderEPNS_12FontProviderE+0x8>)
 801e9be:	6018      	str	r0, [r3, #0]
 801e9c0:	4770      	bx	lr
 801e9c2:	bf00      	nop
 801e9c4:	2400b8e4 	.word	0x2400b8e4

0801e9c8 <_ZN8touchgfx6Bitmap15isDynamicBitmapEt>:
 801e9c8:	4b06      	ldr	r3, [pc, #24]	@ (801e9e4 <_ZN8touchgfx6Bitmap15isDynamicBitmapEt+0x1c>)
 801e9ca:	881a      	ldrh	r2, [r3, #0]
 801e9cc:	4282      	cmp	r2, r0
 801e9ce:	d807      	bhi.n	801e9e0 <_ZN8touchgfx6Bitmap15isDynamicBitmapEt+0x18>
 801e9d0:	4b05      	ldr	r3, [pc, #20]	@ (801e9e8 <_ZN8touchgfx6Bitmap15isDynamicBitmapEt+0x20>)
 801e9d2:	881b      	ldrh	r3, [r3, #0]
 801e9d4:	4413      	add	r3, r2
 801e9d6:	4298      	cmp	r0, r3
 801e9d8:	bfac      	ite	ge
 801e9da:	2000      	movge	r0, #0
 801e9dc:	2001      	movlt	r0, #1
 801e9de:	4770      	bx	lr
 801e9e0:	2000      	movs	r0, #0
 801e9e2:	4770      	bx	lr
 801e9e4:	2400b904 	.word	0x2400b904
 801e9e8:	2400b908 	.word	0x2400b908

0801e9ec <_ZN8touchgfx6Bitmap23dynamicBitmapGetAddressEt>:
 801e9ec:	b508      	push	{r3, lr}
 801e9ee:	4601      	mov	r1, r0
 801e9f0:	f7ff ffea 	bl	801e9c8 <_ZN8touchgfx6Bitmap15isDynamicBitmapEt>
 801e9f4:	b118      	cbz	r0, 801e9fe <_ZN8touchgfx6Bitmap23dynamicBitmapGetAddressEt+0x12>
 801e9f6:	4b02      	ldr	r3, [pc, #8]	@ (801ea00 <_ZN8touchgfx6Bitmap23dynamicBitmapGetAddressEt+0x14>)
 801e9f8:	681b      	ldr	r3, [r3, #0]
 801e9fa:	f853 0021 	ldr.w	r0, [r3, r1, lsl #2]
 801e9fe:	bd08      	pop	{r3, pc}
 801ea00:	2400b8e8 	.word	0x2400b8e8

0801ea04 <_ZN8touchgfx6Bitmap10clearCacheEv>:
 801ea04:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801ea08:	4d28      	ldr	r5, [pc, #160]	@ (801eaac <_ZN8touchgfx6Bitmap10clearCacheEv+0xa8>)
 801ea0a:	682b      	ldr	r3, [r5, #0]
 801ea0c:	2b00      	cmp	r3, #0
 801ea0e:	d04a      	beq.n	801eaa6 <_ZN8touchgfx6Bitmap10clearCacheEv+0xa2>
 801ea10:	4a27      	ldr	r2, [pc, #156]	@ (801eab0 <_ZN8touchgfx6Bitmap10clearCacheEv+0xac>)
 801ea12:	4e28      	ldr	r6, [pc, #160]	@ (801eab4 <_ZN8touchgfx6Bitmap10clearCacheEv+0xb0>)
 801ea14:	8810      	ldrh	r0, [r2, #0]
 801ea16:	f8b6 8000 	ldrh.w	r8, [r6]
 801ea1a:	4c27      	ldr	r4, [pc, #156]	@ (801eab8 <_ZN8touchgfx6Bitmap10clearCacheEv+0xb4>)
 801ea1c:	4440      	add	r0, r8
 801ea1e:	4f27      	ldr	r7, [pc, #156]	@ (801eabc <_ZN8touchgfx6Bitmap10clearCacheEv+0xb8>)
 801ea20:	1c41      	adds	r1, r0, #1
 801ea22:	ea4f 0e80 	mov.w	lr, r0, lsl #2
 801ea26:	f021 0101 	bic.w	r1, r1, #1
 801ea2a:	eb03 020e 	add.w	r2, r3, lr
 801ea2e:	0409      	lsls	r1, r1, #16
 801ea30:	6022      	str	r2, [r4, #0]
 801ea32:	0c09      	lsrs	r1, r1, #16
 801ea34:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 801ea38:	eb0e 010c 	add.w	r1, lr, ip
 801ea3c:	185a      	adds	r2, r3, r1
 801ea3e:	603a      	str	r2, [r7, #0]
 801ea40:	220e      	movs	r2, #14
 801ea42:	fb02 f208 	mul.w	r2, r2, r8
 801ea46:	3203      	adds	r2, #3
 801ea48:	f022 0203 	bic.w	r2, r2, #3
 801ea4c:	4411      	add	r1, r2
 801ea4e:	440b      	add	r3, r1
 801ea50:	491b      	ldr	r1, [pc, #108]	@ (801eac0 <_ZN8touchgfx6Bitmap10clearCacheEv+0xbc>)
 801ea52:	600b      	str	r3, [r1, #0]
 801ea54:	2300      	movs	r3, #0
 801ea56:	491b      	ldr	r1, [pc, #108]	@ (801eac4 <_ZN8touchgfx6Bitmap10clearCacheEv+0xc0>)
 801ea58:	800b      	strh	r3, [r1, #0]
 801ea5a:	491b      	ldr	r1, [pc, #108]	@ (801eac8 <_ZN8touchgfx6Bitmap10clearCacheEv+0xc4>)
 801ea5c:	6809      	ldr	r1, [r1, #0]
 801ea5e:	eba1 010e 	sub.w	r1, r1, lr
 801ea62:	eba1 010c 	sub.w	r1, r1, ip
 801ea66:	469c      	mov	ip, r3
 801ea68:	1a8a      	subs	r2, r1, r2
 801ea6a:	4918      	ldr	r1, [pc, #96]	@ (801eacc <_ZN8touchgfx6Bitmap10clearCacheEv+0xc8>)
 801ea6c:	600a      	str	r2, [r1, #0]
 801ea6e:	f64f 71ff 	movw	r1, #65535	@ 0xffff
 801ea72:	4a17      	ldr	r2, [pc, #92]	@ (801ead0 <_ZN8touchgfx6Bitmap10clearCacheEv+0xcc>)
 801ea74:	8013      	strh	r3, [r2, #0]
 801ea76:	4283      	cmp	r3, r0
 801ea78:	d10d      	bne.n	801ea96 <_ZN8touchgfx6Bitmap10clearCacheEv+0x92>
 801ea7a:	8835      	ldrh	r5, [r6, #0]
 801ea7c:	2300      	movs	r3, #0
 801ea7e:	6838      	ldr	r0, [r7, #0]
 801ea80:	240e      	movs	r4, #14
 801ea82:	429d      	cmp	r5, r3
 801ea84:	d90f      	bls.n	801eaa6 <_ZN8touchgfx6Bitmap10clearCacheEv+0xa2>
 801ea86:	fb04 0203 	mla	r2, r4, r3, r0
 801ea8a:	3301      	adds	r3, #1
 801ea8c:	7b11      	ldrb	r1, [r2, #12]
 801ea8e:	f36f 1145 	bfc	r1, #5, #1
 801ea92:	7311      	strb	r1, [r2, #12]
 801ea94:	e7f5      	b.n	801ea82 <_ZN8touchgfx6Bitmap10clearCacheEv+0x7e>
 801ea96:	682a      	ldr	r2, [r5, #0]
 801ea98:	f842 c023 	str.w	ip, [r2, r3, lsl #2]
 801ea9c:	6822      	ldr	r2, [r4, #0]
 801ea9e:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
 801eaa2:	3301      	adds	r3, #1
 801eaa4:	e7e7      	b.n	801ea76 <_ZN8touchgfx6Bitmap10clearCacheEv+0x72>
 801eaa6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801eaaa:	bf00      	nop
 801eaac:	2400b8e8 	.word	0x2400b8e8
 801eab0:	2400b904 	.word	0x2400b904
 801eab4:	2400b908 	.word	0x2400b908
 801eab8:	2400b8fc 	.word	0x2400b8fc
 801eabc:	2400b8ec 	.word	0x2400b8ec
 801eac0:	2400b8f4 	.word	0x2400b8f4
 801eac4:	2400b906 	.word	0x2400b906
 801eac8:	2400b8f0 	.word	0x2400b8f0
 801eacc:	2400b900 	.word	0x2400b900
 801ead0:	2400b8f8 	.word	0x2400b8f8

0801ead4 <_ZN8touchgfx6Bitmap8setCacheEPtmm>:
 801ead4:	4b10      	ldr	r3, [pc, #64]	@ (801eb18 <_ZN8touchgfx6Bitmap8setCacheEPtmm+0x44>)
 801ead6:	b510      	push	{r4, lr}
 801ead8:	681b      	ldr	r3, [r3, #0]
 801eada:	b9db      	cbnz	r3, 801eb14 <_ZN8touchgfx6Bitmap8setCacheEPtmm+0x40>
 801eadc:	b1d1      	cbz	r1, 801eb14 <_ZN8touchgfx6Bitmap8setCacheEPtmm+0x40>
 801eade:	4b0f      	ldr	r3, [pc, #60]	@ (801eb1c <_ZN8touchgfx6Bitmap8setCacheEPtmm+0x48>)
 801eae0:	240e      	movs	r4, #14
 801eae2:	801a      	strh	r2, [r3, #0]
 801eae4:	b292      	uxth	r2, r2
 801eae6:	4b0e      	ldr	r3, [pc, #56]	@ (801eb20 <_ZN8touchgfx6Bitmap8setCacheEPtmm+0x4c>)
 801eae8:	881b      	ldrh	r3, [r3, #0]
 801eaea:	4413      	add	r3, r2
 801eaec:	4362      	muls	r2, r4
 801eaee:	2406      	movs	r4, #6
 801eaf0:	fb04 2203 	mla	r2, r4, r3, r2
 801eaf4:	428a      	cmp	r2, r1
 801eaf6:	d305      	bcc.n	801eb04 <_ZN8touchgfx6Bitmap8setCacheEPtmm+0x30>
 801eaf8:	4b0a      	ldr	r3, [pc, #40]	@ (801eb24 <_ZN8touchgfx6Bitmap8setCacheEPtmm+0x50>)
 801eafa:	2135      	movs	r1, #53	@ 0x35
 801eafc:	4a0a      	ldr	r2, [pc, #40]	@ (801eb28 <_ZN8touchgfx6Bitmap8setCacheEPtmm+0x54>)
 801eafe:	480b      	ldr	r0, [pc, #44]	@ (801eb2c <_ZN8touchgfx6Bitmap8setCacheEPtmm+0x58>)
 801eb00:	f00c f8a0 	bl	802ac44 <__assert_func>
 801eb04:	4b0a      	ldr	r3, [pc, #40]	@ (801eb30 <_ZN8touchgfx6Bitmap8setCacheEPtmm+0x5c>)
 801eb06:	6019      	str	r1, [r3, #0]
 801eb08:	4b0a      	ldr	r3, [pc, #40]	@ (801eb34 <_ZN8touchgfx6Bitmap8setCacheEPtmm+0x60>)
 801eb0a:	6018      	str	r0, [r3, #0]
 801eb0c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801eb10:	f7ff bf78 	b.w	801ea04 <_ZN8touchgfx6Bitmap10clearCacheEv>
 801eb14:	bd10      	pop	{r4, pc}
 801eb16:	bf00      	nop
 801eb18:	2400b8f4 	.word	0x2400b8f4
 801eb1c:	2400b908 	.word	0x2400b908
 801eb20:	2400b904 	.word	0x2400b904
 801eb24:	0802fa61 	.word	0x0802fa61
 801eb28:	0802faba 	.word	0x0802faba
 801eb2c:	0802fa3c 	.word	0x0802fa3c
 801eb30:	2400b8f0 	.word	0x2400b8f0
 801eb34:	2400b8e8 	.word	0x2400b8e8

0801eb38 <_ZN8touchgfx6Bitmap22registerBitmapDatabaseEPKNS0_10BitmapDataEtPtmm>:
 801eb38:	b470      	push	{r4, r5, r6}
 801eb3a:	4c07      	ldr	r4, [pc, #28]	@ (801eb58 <_ZN8touchgfx6Bitmap22registerBitmapDatabaseEPKNS0_10BitmapDataEtPtmm+0x20>)
 801eb3c:	4605      	mov	r5, r0
 801eb3e:	4610      	mov	r0, r2
 801eb40:	9a03      	ldr	r2, [sp, #12]
 801eb42:	6826      	ldr	r6, [r4, #0]
 801eb44:	b936      	cbnz	r6, 801eb54 <_ZN8touchgfx6Bitmap22registerBitmapDatabaseEPKNS0_10BitmapDataEtPtmm+0x1c>
 801eb46:	6025      	str	r5, [r4, #0]
 801eb48:	4c04      	ldr	r4, [pc, #16]	@ (801eb5c <_ZN8touchgfx6Bitmap22registerBitmapDatabaseEPKNS0_10BitmapDataEtPtmm+0x24>)
 801eb4a:	8021      	strh	r1, [r4, #0]
 801eb4c:	4619      	mov	r1, r3
 801eb4e:	bc70      	pop	{r4, r5, r6}
 801eb50:	f7ff bfc0 	b.w	801ead4 <_ZN8touchgfx6Bitmap8setCacheEPtmm>
 801eb54:	bc70      	pop	{r4, r5, r6}
 801eb56:	4770      	bx	lr
 801eb58:	2400b90c 	.word	0x2400b90c
 801eb5c:	2400b904 	.word	0x2400b904

0801eb60 <_ZNK8touchgfx6Bitmap8getWidthEv>:
 801eb60:	b508      	push	{r3, lr}
 801eb62:	4b14      	ldr	r3, [pc, #80]	@ (801ebb4 <_ZNK8touchgfx6Bitmap8getWidthEv+0x54>)
 801eb64:	6819      	ldr	r1, [r3, #0]
 801eb66:	b931      	cbnz	r1, 801eb76 <_ZNK8touchgfx6Bitmap8getWidthEv+0x16>
 801eb68:	4b13      	ldr	r3, [pc, #76]	@ (801ebb8 <_ZNK8touchgfx6Bitmap8getWidthEv+0x58>)
 801eb6a:	f240 4185 	movw	r1, #1157	@ 0x485
 801eb6e:	4a13      	ldr	r2, [pc, #76]	@ (801ebbc <_ZNK8touchgfx6Bitmap8getWidthEv+0x5c>)
 801eb70:	4813      	ldr	r0, [pc, #76]	@ (801ebc0 <_ZNK8touchgfx6Bitmap8getWidthEv+0x60>)
 801eb72:	f00c f867 	bl	802ac44 <__assert_func>
 801eb76:	4a13      	ldr	r2, [pc, #76]	@ (801ebc4 <_ZNK8touchgfx6Bitmap8getWidthEv+0x64>)
 801eb78:	8803      	ldrh	r3, [r0, #0]
 801eb7a:	8812      	ldrh	r2, [r2, #0]
 801eb7c:	4293      	cmp	r3, r2
 801eb7e:	d204      	bcs.n	801eb8a <_ZNK8touchgfx6Bitmap8getWidthEv+0x2a>
 801eb80:	2214      	movs	r2, #20
 801eb82:	fb02 1303 	mla	r3, r2, r3, r1
 801eb86:	8918      	ldrh	r0, [r3, #8]
 801eb88:	bd08      	pop	{r3, pc}
 801eb8a:	490f      	ldr	r1, [pc, #60]	@ (801ebc8 <_ZNK8touchgfx6Bitmap8getWidthEv+0x68>)
 801eb8c:	8809      	ldrh	r1, [r1, #0]
 801eb8e:	4411      	add	r1, r2
 801eb90:	428b      	cmp	r3, r1
 801eb92:	da06      	bge.n	801eba2 <_ZNK8touchgfx6Bitmap8getWidthEv+0x42>
 801eb94:	1a9b      	subs	r3, r3, r2
 801eb96:	4a0d      	ldr	r2, [pc, #52]	@ (801ebcc <_ZNK8touchgfx6Bitmap8getWidthEv+0x6c>)
 801eb98:	210e      	movs	r1, #14
 801eb9a:	6812      	ldr	r2, [r2, #0]
 801eb9c:	fb01 2303 	mla	r3, r1, r3, r2
 801eba0:	e7f1      	b.n	801eb86 <_ZNK8touchgfx6Bitmap8getWidthEv+0x26>
 801eba2:	f64f 72fe 	movw	r2, #65534	@ 0xfffe
 801eba6:	4293      	cmp	r3, r2
 801eba8:	bf0a      	itet	eq
 801ebaa:	4b09      	ldreq	r3, [pc, #36]	@ (801ebd0 <_ZNK8touchgfx6Bitmap8getWidthEv+0x70>)
 801ebac:	2000      	movne	r0, #0
 801ebae:	8818      	ldrheq	r0, [r3, #0]
 801ebb0:	e7ea      	b.n	801eb88 <_ZNK8touchgfx6Bitmap8getWidthEv+0x28>
 801ebb2:	bf00      	nop
 801ebb4:	2400b90c 	.word	0x2400b90c
 801ebb8:	0802ec9c 	.word	0x0802ec9c
 801ebbc:	0802fb67 	.word	0x0802fb67
 801ebc0:	0802fa3c 	.word	0x0802fa3c
 801ebc4:	2400b904 	.word	0x2400b904
 801ebc8:	2400b908 	.word	0x2400b908
 801ebcc:	2400b8ec 	.word	0x2400b8ec
 801ebd0:	2400b878 	.word	0x2400b878

0801ebd4 <_ZNK8touchgfx6Bitmap9getHeightEv>:
 801ebd4:	b508      	push	{r3, lr}
 801ebd6:	4b14      	ldr	r3, [pc, #80]	@ (801ec28 <_ZNK8touchgfx6Bitmap9getHeightEv+0x54>)
 801ebd8:	6819      	ldr	r1, [r3, #0]
 801ebda:	b931      	cbnz	r1, 801ebea <_ZNK8touchgfx6Bitmap9getHeightEv+0x16>
 801ebdc:	4b13      	ldr	r3, [pc, #76]	@ (801ec2c <_ZNK8touchgfx6Bitmap9getHeightEv+0x58>)
 801ebde:	f240 4199 	movw	r1, #1177	@ 0x499
 801ebe2:	4a13      	ldr	r2, [pc, #76]	@ (801ec30 <_ZNK8touchgfx6Bitmap9getHeightEv+0x5c>)
 801ebe4:	4813      	ldr	r0, [pc, #76]	@ (801ec34 <_ZNK8touchgfx6Bitmap9getHeightEv+0x60>)
 801ebe6:	f00c f82d 	bl	802ac44 <__assert_func>
 801ebea:	4a13      	ldr	r2, [pc, #76]	@ (801ec38 <_ZNK8touchgfx6Bitmap9getHeightEv+0x64>)
 801ebec:	8803      	ldrh	r3, [r0, #0]
 801ebee:	8812      	ldrh	r2, [r2, #0]
 801ebf0:	4293      	cmp	r3, r2
 801ebf2:	d204      	bcs.n	801ebfe <_ZNK8touchgfx6Bitmap9getHeightEv+0x2a>
 801ebf4:	2214      	movs	r2, #20
 801ebf6:	fb02 1303 	mla	r3, r2, r3, r1
 801ebfa:	8958      	ldrh	r0, [r3, #10]
 801ebfc:	bd08      	pop	{r3, pc}
 801ebfe:	490f      	ldr	r1, [pc, #60]	@ (801ec3c <_ZNK8touchgfx6Bitmap9getHeightEv+0x68>)
 801ec00:	8809      	ldrh	r1, [r1, #0]
 801ec02:	4411      	add	r1, r2
 801ec04:	428b      	cmp	r3, r1
 801ec06:	da06      	bge.n	801ec16 <_ZNK8touchgfx6Bitmap9getHeightEv+0x42>
 801ec08:	1a9b      	subs	r3, r3, r2
 801ec0a:	4a0d      	ldr	r2, [pc, #52]	@ (801ec40 <_ZNK8touchgfx6Bitmap9getHeightEv+0x6c>)
 801ec0c:	210e      	movs	r1, #14
 801ec0e:	6812      	ldr	r2, [r2, #0]
 801ec10:	fb01 2303 	mla	r3, r1, r3, r2
 801ec14:	e7f1      	b.n	801ebfa <_ZNK8touchgfx6Bitmap9getHeightEv+0x26>
 801ec16:	f64f 72fe 	movw	r2, #65534	@ 0xfffe
 801ec1a:	4293      	cmp	r3, r2
 801ec1c:	bf0a      	itet	eq
 801ec1e:	4b09      	ldreq	r3, [pc, #36]	@ (801ec44 <_ZNK8touchgfx6Bitmap9getHeightEv+0x70>)
 801ec20:	2000      	movne	r0, #0
 801ec22:	8818      	ldrheq	r0, [r3, #0]
 801ec24:	e7ea      	b.n	801ebfc <_ZNK8touchgfx6Bitmap9getHeightEv+0x28>
 801ec26:	bf00      	nop
 801ec28:	2400b90c 	.word	0x2400b90c
 801ec2c:	0802ec9c 	.word	0x0802ec9c
 801ec30:	0802fb93 	.word	0x0802fb93
 801ec34:	0802fa3c 	.word	0x0802fa3c
 801ec38:	2400b904 	.word	0x2400b904
 801ec3c:	2400b908 	.word	0x2400b908
 801ec40:	2400b8ec 	.word	0x2400b8ec
 801ec44:	2400b87a 	.word	0x2400b87a

0801ec48 <_ZNK8touchgfx6Bitmap12getSolidRectEv>:
 801ec48:	4b23      	ldr	r3, [pc, #140]	@ (801ecd8 <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x90>)
 801ec4a:	b510      	push	{r4, lr}
 801ec4c:	681c      	ldr	r4, [r3, #0]
 801ec4e:	b934      	cbnz	r4, 801ec5e <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x16>
 801ec50:	4b22      	ldr	r3, [pc, #136]	@ (801ecdc <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x94>)
 801ec52:	f240 41ad 	movw	r1, #1197	@ 0x4ad
 801ec56:	4a22      	ldr	r2, [pc, #136]	@ (801ece0 <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x98>)
 801ec58:	4822      	ldr	r0, [pc, #136]	@ (801ece4 <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x9c>)
 801ec5a:	f00b fff3 	bl	802ac44 <__assert_func>
 801ec5e:	4a22      	ldr	r2, [pc, #136]	@ (801ece8 <_ZNK8touchgfx6Bitmap12getSolidRectEv+0xa0>)
 801ec60:	880b      	ldrh	r3, [r1, #0]
 801ec62:	8812      	ldrh	r2, [r2, #0]
 801ec64:	4293      	cmp	r3, r2
 801ec66:	d211      	bcs.n	801ec8c <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x44>
 801ec68:	2214      	movs	r2, #20
 801ec6a:	fb02 4303 	mla	r3, r2, r3, r4
 801ec6e:	f9b3 400c 	ldrsh.w	r4, [r3, #12]
 801ec72:	f9b3 100e 	ldrsh.w	r1, [r3, #14]
 801ec76:	8a1a      	ldrh	r2, [r3, #16]
 801ec78:	8a5b      	ldrh	r3, [r3, #18]
 801ec7a:	f3c2 020c 	ubfx	r2, r2, #0, #13
 801ec7e:	8004      	strh	r4, [r0, #0]
 801ec80:	f3c3 030c 	ubfx	r3, r3, #0, #13
 801ec84:	8041      	strh	r1, [r0, #2]
 801ec86:	8082      	strh	r2, [r0, #4]
 801ec88:	80c3      	strh	r3, [r0, #6]
 801ec8a:	e00e      	b.n	801ecaa <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x62>
 801ec8c:	4917      	ldr	r1, [pc, #92]	@ (801ecec <_ZNK8touchgfx6Bitmap12getSolidRectEv+0xa4>)
 801ec8e:	8809      	ldrh	r1, [r1, #0]
 801ec90:	4411      	add	r1, r2
 801ec92:	428b      	cmp	r3, r1
 801ec94:	da0a      	bge.n	801ecac <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x64>
 801ec96:	1a9b      	subs	r3, r3, r2
 801ec98:	4a15      	ldr	r2, [pc, #84]	@ (801ecf0 <_ZNK8touchgfx6Bitmap12getSolidRectEv+0xa8>)
 801ec9a:	210e      	movs	r1, #14
 801ec9c:	6812      	ldr	r2, [r2, #0]
 801ec9e:	fb01 2303 	mla	r3, r1, r3, r2
 801eca2:	681a      	ldr	r2, [r3, #0]
 801eca4:	6002      	str	r2, [r0, #0]
 801eca6:	685a      	ldr	r2, [r3, #4]
 801eca8:	6042      	str	r2, [r0, #4]
 801ecaa:	bd10      	pop	{r4, pc}
 801ecac:	f64f 72fe 	movw	r2, #65534	@ 0xfffe
 801ecb0:	4293      	cmp	r3, r2
 801ecb2:	d10b      	bne.n	801eccc <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x84>
 801ecb4:	4b0f      	ldr	r3, [pc, #60]	@ (801ecf4 <_ZNK8touchgfx6Bitmap12getSolidRectEv+0xac>)
 801ecb6:	f9b3 1000 	ldrsh.w	r1, [r3]
 801ecba:	4b0f      	ldr	r3, [pc, #60]	@ (801ecf8 <_ZNK8touchgfx6Bitmap12getSolidRectEv+0xb0>)
 801ecbc:	8081      	strh	r1, [r0, #4]
 801ecbe:	f9b3 2000 	ldrsh.w	r2, [r3]
 801ecc2:	2300      	movs	r3, #0
 801ecc4:	80c2      	strh	r2, [r0, #6]
 801ecc6:	8003      	strh	r3, [r0, #0]
 801ecc8:	8043      	strh	r3, [r0, #2]
 801ecca:	e7ee      	b.n	801ecaa <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x62>
 801eccc:	2300      	movs	r3, #0
 801ecce:	8003      	strh	r3, [r0, #0]
 801ecd0:	8043      	strh	r3, [r0, #2]
 801ecd2:	8083      	strh	r3, [r0, #4]
 801ecd4:	e7d8      	b.n	801ec88 <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x40>
 801ecd6:	bf00      	nop
 801ecd8:	2400b90c 	.word	0x2400b90c
 801ecdc:	0802ec9c 	.word	0x0802ec9c
 801ece0:	0802fb00 	.word	0x0802fb00
 801ece4:	0802fa3c 	.word	0x0802fa3c
 801ece8:	2400b904 	.word	0x2400b904
 801ecec:	2400b908 	.word	0x2400b908
 801ecf0:	2400b8ec 	.word	0x2400b8ec
 801ecf4:	2400b878 	.word	0x2400b878
 801ecf8:	2400b87a 	.word	0x2400b87a

0801ecfc <_ZNK8touchgfx6Bitmap20hasTransparentPixelsEv>:
 801ecfc:	4b18      	ldr	r3, [pc, #96]	@ (801ed60 <_ZNK8touchgfx6Bitmap20hasTransparentPixelsEv+0x64>)
 801ecfe:	681b      	ldr	r3, [r3, #0]
 801ed00:	b34b      	cbz	r3, 801ed56 <_ZNK8touchgfx6Bitmap20hasTransparentPixelsEv+0x5a>
 801ed02:	4a18      	ldr	r2, [pc, #96]	@ (801ed64 <_ZNK8touchgfx6Bitmap20hasTransparentPixelsEv+0x68>)
 801ed04:	8800      	ldrh	r0, [r0, #0]
 801ed06:	8812      	ldrh	r2, [r2, #0]
 801ed08:	4290      	cmp	r0, r2
 801ed0a:	d211      	bcs.n	801ed30 <_ZNK8touchgfx6Bitmap20hasTransparentPixelsEv+0x34>
 801ed0c:	2214      	movs	r2, #20
 801ed0e:	fb02 3300 	mla	r3, r2, r0, r3
 801ed12:	8a1a      	ldrh	r2, [r3, #16]
 801ed14:	8919      	ldrh	r1, [r3, #8]
 801ed16:	f3c2 020c 	ubfx	r2, r2, #0, #13
 801ed1a:	428a      	cmp	r2, r1
 801ed1c:	db1d      	blt.n	801ed5a <_ZNK8touchgfx6Bitmap20hasTransparentPixelsEv+0x5e>
 801ed1e:	8a58      	ldrh	r0, [r3, #18]
 801ed20:	f3c0 000c 	ubfx	r0, r0, #0, #13
 801ed24:	895b      	ldrh	r3, [r3, #10]
 801ed26:	4298      	cmp	r0, r3
 801ed28:	bfac      	ite	ge
 801ed2a:	2000      	movge	r0, #0
 801ed2c:	2001      	movlt	r0, #1
 801ed2e:	4770      	bx	lr
 801ed30:	4b0d      	ldr	r3, [pc, #52]	@ (801ed68 <_ZNK8touchgfx6Bitmap20hasTransparentPixelsEv+0x6c>)
 801ed32:	881b      	ldrh	r3, [r3, #0]
 801ed34:	4413      	add	r3, r2
 801ed36:	4298      	cmp	r0, r3
 801ed38:	da0d      	bge.n	801ed56 <_ZNK8touchgfx6Bitmap20hasTransparentPixelsEv+0x5a>
 801ed3a:	4b0c      	ldr	r3, [pc, #48]	@ (801ed6c <_ZNK8touchgfx6Bitmap20hasTransparentPixelsEv+0x70>)
 801ed3c:	1a80      	subs	r0, r0, r2
 801ed3e:	220e      	movs	r2, #14
 801ed40:	681b      	ldr	r3, [r3, #0]
 801ed42:	fb02 3300 	mla	r3, r2, r0, r3
 801ed46:	f9b3 1004 	ldrsh.w	r1, [r3, #4]
 801ed4a:	891a      	ldrh	r2, [r3, #8]
 801ed4c:	4291      	cmp	r1, r2
 801ed4e:	db04      	blt.n	801ed5a <_ZNK8touchgfx6Bitmap20hasTransparentPixelsEv+0x5e>
 801ed50:	f9b3 0006 	ldrsh.w	r0, [r3, #6]
 801ed54:	e7e6      	b.n	801ed24 <_ZNK8touchgfx6Bitmap20hasTransparentPixelsEv+0x28>
 801ed56:	2000      	movs	r0, #0
 801ed58:	4770      	bx	lr
 801ed5a:	2001      	movs	r0, #1
 801ed5c:	4770      	bx	lr
 801ed5e:	bf00      	nop
 801ed60:	2400b90c 	.word	0x2400b90c
 801ed64:	2400b904 	.word	0x2400b904
 801ed68:	2400b908 	.word	0x2400b908
 801ed6c:	2400b8ec 	.word	0x2400b8ec

0801ed70 <_ZNK8touchgfx6Bitmap7getDataEv>:
 801ed70:	b508      	push	{r3, lr}
 801ed72:	4b12      	ldr	r3, [pc, #72]	@ (801edbc <_ZNK8touchgfx6Bitmap7getDataEv+0x4c>)
 801ed74:	6819      	ldr	r1, [r3, #0]
 801ed76:	b931      	cbnz	r1, 801ed86 <_ZNK8touchgfx6Bitmap7getDataEv+0x16>
 801ed78:	4b11      	ldr	r3, [pc, #68]	@ (801edc0 <_ZNK8touchgfx6Bitmap7getDataEv+0x50>)
 801ed7a:	f240 41d1 	movw	r1, #1233	@ 0x4d1
 801ed7e:	4a11      	ldr	r2, [pc, #68]	@ (801edc4 <_ZNK8touchgfx6Bitmap7getDataEv+0x54>)
 801ed80:	4811      	ldr	r0, [pc, #68]	@ (801edc8 <_ZNK8touchgfx6Bitmap7getDataEv+0x58>)
 801ed82:	f00b ff5f 	bl	802ac44 <__assert_func>
 801ed86:	8803      	ldrh	r3, [r0, #0]
 801ed88:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 801ed8c:	4293      	cmp	r3, r2
 801ed8e:	d012      	beq.n	801edb6 <_ZNK8touchgfx6Bitmap7getDataEv+0x46>
 801ed90:	f64f 72fe 	movw	r2, #65534	@ 0xfffe
 801ed94:	4293      	cmp	r3, r2
 801ed96:	d103      	bne.n	801eda0 <_ZNK8touchgfx6Bitmap7getDataEv+0x30>
 801ed98:	4b0c      	ldr	r3, [pc, #48]	@ (801edcc <_ZNK8touchgfx6Bitmap7getDataEv+0x5c>)
 801ed9a:	681b      	ldr	r3, [r3, #0]
 801ed9c:	6c58      	ldr	r0, [r3, #68]	@ 0x44
 801ed9e:	bd08      	pop	{r3, pc}
 801eda0:	4a0b      	ldr	r2, [pc, #44]	@ (801edd0 <_ZNK8touchgfx6Bitmap7getDataEv+0x60>)
 801eda2:	6812      	ldr	r2, [r2, #0]
 801eda4:	b11a      	cbz	r2, 801edae <_ZNK8touchgfx6Bitmap7getDataEv+0x3e>
 801eda6:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 801edaa:	2800      	cmp	r0, #0
 801edac:	d1f7      	bne.n	801ed9e <_ZNK8touchgfx6Bitmap7getDataEv+0x2e>
 801edae:	2214      	movs	r2, #20
 801edb0:	4353      	muls	r3, r2
 801edb2:	58c8      	ldr	r0, [r1, r3]
 801edb4:	e7f3      	b.n	801ed9e <_ZNK8touchgfx6Bitmap7getDataEv+0x2e>
 801edb6:	2000      	movs	r0, #0
 801edb8:	e7f1      	b.n	801ed9e <_ZNK8touchgfx6Bitmap7getDataEv+0x2e>
 801edba:	bf00      	nop
 801edbc:	2400b90c 	.word	0x2400b90c
 801edc0:	0802ec9c 	.word	0x0802ec9c
 801edc4:	0802fb36 	.word	0x0802fb36
 801edc8:	0802fa3c 	.word	0x0802fa3c
 801edcc:	2400b884 	.word	0x2400b884
 801edd0:	2400b8e8 	.word	0x2400b8e8

0801edd4 <_ZNK8touchgfx6Bitmap12getExtraDataEv>:
 801edd4:	8802      	ldrh	r2, [r0, #0]
 801edd6:	f64f 73fd 	movw	r3, #65533	@ 0xfffd
 801edda:	429a      	cmp	r2, r3
 801eddc:	d845      	bhi.n	801ee6a <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x96>
 801edde:	4b24      	ldr	r3, [pc, #144]	@ (801ee70 <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x9c>)
 801ede0:	8818      	ldrh	r0, [r3, #0]
 801ede2:	4282      	cmp	r2, r0
 801ede4:	d221      	bcs.n	801ee2a <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x56>
 801ede6:	4b23      	ldr	r3, [pc, #140]	@ (801ee74 <_ZNK8touchgfx6Bitmap12getExtraDataEv+0xa0>)
 801ede8:	6819      	ldr	r1, [r3, #0]
 801edea:	2314      	movs	r3, #20
 801edec:	fb03 1302 	mla	r3, r3, r2, r1
 801edf0:	6858      	ldr	r0, [r3, #4]
 801edf2:	2800      	cmp	r0, #0
 801edf4:	d03a      	beq.n	801ee6c <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x98>
 801edf6:	4920      	ldr	r1, [pc, #128]	@ (801ee78 <_ZNK8touchgfx6Bitmap12getExtraDataEv+0xa4>)
 801edf8:	6809      	ldr	r1, [r1, #0]
 801edfa:	2900      	cmp	r1, #0
 801edfc:	d036      	beq.n	801ee6c <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x98>
 801edfe:	f851 1022 	ldr.w	r1, [r1, r2, lsl #2]
 801ee02:	2900      	cmp	r1, #0
 801ee04:	d032      	beq.n	801ee6c <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x98>
 801ee06:	891a      	ldrh	r2, [r3, #8]
 801ee08:	8958      	ldrh	r0, [r3, #10]
 801ee0a:	4350      	muls	r0, r2
 801ee0c:	7c5a      	ldrb	r2, [r3, #17]
 801ee0e:	7cdb      	ldrb	r3, [r3, #19]
 801ee10:	0952      	lsrs	r2, r2, #5
 801ee12:	f3c3 1342 	ubfx	r3, r3, #5, #3
 801ee16:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 801ee1a:	2b0b      	cmp	r3, #11
 801ee1c:	bf18      	it	ne
 801ee1e:	0040      	lslne	r0, r0, #1
 801ee20:	3003      	adds	r0, #3
 801ee22:	f020 0003 	bic.w	r0, r0, #3
 801ee26:	4408      	add	r0, r1
 801ee28:	4770      	bx	lr
 801ee2a:	4b14      	ldr	r3, [pc, #80]	@ (801ee7c <_ZNK8touchgfx6Bitmap12getExtraDataEv+0xa8>)
 801ee2c:	881b      	ldrh	r3, [r3, #0]
 801ee2e:	4403      	add	r3, r0
 801ee30:	429a      	cmp	r2, r3
 801ee32:	da1a      	bge.n	801ee6a <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x96>
 801ee34:	4b12      	ldr	r3, [pc, #72]	@ (801ee80 <_ZNK8touchgfx6Bitmap12getExtraDataEv+0xac>)
 801ee36:	1a10      	subs	r0, r2, r0
 801ee38:	210e      	movs	r1, #14
 801ee3a:	681b      	ldr	r3, [r3, #0]
 801ee3c:	fb01 3000 	mla	r0, r1, r0, r3
 801ee40:	7b03      	ldrb	r3, [r0, #12]
 801ee42:	f003 031f 	and.w	r3, r3, #31
 801ee46:	2b0b      	cmp	r3, #11
 801ee48:	d10b      	bne.n	801ee62 <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x8e>
 801ee4a:	8903      	ldrh	r3, [r0, #8]
 801ee4c:	8940      	ldrh	r0, [r0, #10]
 801ee4e:	4358      	muls	r0, r3
 801ee50:	4b09      	ldr	r3, [pc, #36]	@ (801ee78 <_ZNK8touchgfx6Bitmap12getExtraDataEv+0xa4>)
 801ee52:	3003      	adds	r0, #3
 801ee54:	6819      	ldr	r1, [r3, #0]
 801ee56:	f020 0303 	bic.w	r3, r0, #3
 801ee5a:	f851 0022 	ldr.w	r0, [r1, r2, lsl #2]
 801ee5e:	4418      	add	r0, r3
 801ee60:	4770      	bx	lr
 801ee62:	2b0d      	cmp	r3, #13
 801ee64:	d101      	bne.n	801ee6a <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x96>
 801ee66:	300d      	adds	r0, #13
 801ee68:	4770      	bx	lr
 801ee6a:	2000      	movs	r0, #0
 801ee6c:	4770      	bx	lr
 801ee6e:	bf00      	nop
 801ee70:	2400b904 	.word	0x2400b904
 801ee74:	2400b90c 	.word	0x2400b90c
 801ee78:	2400b8e8 	.word	0x2400b8e8
 801ee7c:	2400b908 	.word	0x2400b908
 801ee80:	2400b8ec 	.word	0x2400b8ec

0801ee84 <_ZNK8touchgfx6Bitmap9getFormatEv>:
 801ee84:	4b17      	ldr	r3, [pc, #92]	@ (801eee4 <_ZNK8touchgfx6Bitmap9getFormatEv+0x60>)
 801ee86:	b510      	push	{r4, lr}
 801ee88:	6819      	ldr	r1, [r3, #0]
 801ee8a:	8803      	ldrh	r3, [r0, #0]
 801ee8c:	b1e9      	cbz	r1, 801eeca <_ZNK8touchgfx6Bitmap9getFormatEv+0x46>
 801ee8e:	4a16      	ldr	r2, [pc, #88]	@ (801eee8 <_ZNK8touchgfx6Bitmap9getFormatEv+0x64>)
 801ee90:	8812      	ldrh	r2, [r2, #0]
 801ee92:	429a      	cmp	r2, r3
 801ee94:	d90a      	bls.n	801eeac <_ZNK8touchgfx6Bitmap9getFormatEv+0x28>
 801ee96:	2214      	movs	r2, #20
 801ee98:	fb02 1303 	mla	r3, r2, r3, r1
 801ee9c:	7c58      	ldrb	r0, [r3, #17]
 801ee9e:	0942      	lsrs	r2, r0, #5
 801eea0:	7cd8      	ldrb	r0, [r3, #19]
 801eea2:	f3c0 1042 	ubfx	r0, r0, #5, #3
 801eea6:	ea40 00c2 	orr.w	r0, r0, r2, lsl #3
 801eeaa:	bd10      	pop	{r4, pc}
 801eeac:	490f      	ldr	r1, [pc, #60]	@ (801eeec <_ZNK8touchgfx6Bitmap9getFormatEv+0x68>)
 801eeae:	8809      	ldrh	r1, [r1, #0]
 801eeb0:	4411      	add	r1, r2
 801eeb2:	428b      	cmp	r3, r1
 801eeb4:	da09      	bge.n	801eeca <_ZNK8touchgfx6Bitmap9getFormatEv+0x46>
 801eeb6:	1a9b      	subs	r3, r3, r2
 801eeb8:	4a0d      	ldr	r2, [pc, #52]	@ (801eef0 <_ZNK8touchgfx6Bitmap9getFormatEv+0x6c>)
 801eeba:	210e      	movs	r1, #14
 801eebc:	6812      	ldr	r2, [r2, #0]
 801eebe:	fb01 2303 	mla	r3, r1, r3, r2
 801eec2:	7b18      	ldrb	r0, [r3, #12]
 801eec4:	f000 001f 	and.w	r0, r0, #31
 801eec8:	e7ef      	b.n	801eeaa <_ZNK8touchgfx6Bitmap9getFormatEv+0x26>
 801eeca:	f64f 72fe 	movw	r2, #65534	@ 0xfffe
 801eece:	4293      	cmp	r3, r2
 801eed0:	d106      	bne.n	801eee0 <_ZNK8touchgfx6Bitmap9getFormatEv+0x5c>
 801eed2:	f7e5 f945 	bl	8004160 <_ZN8touchgfx3HAL3lcdEv>
 801eed6:	6803      	ldr	r3, [r0, #0]
 801eed8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801eedc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801eede:	4718      	bx	r3
 801eee0:	2000      	movs	r0, #0
 801eee2:	e7e2      	b.n	801eeaa <_ZNK8touchgfx6Bitmap9getFormatEv+0x26>
 801eee4:	2400b90c 	.word	0x2400b90c
 801eee8:	2400b904 	.word	0x2400b904
 801eeec:	2400b908 	.word	0x2400b908
 801eef0:	2400b8ec 	.word	0x2400b8ec

0801eef4 <_ZNK8touchgfx8LCD16bpp8bitDepthEv>:
 801eef4:	2010      	movs	r0, #16
 801eef6:	4770      	bx	lr

0801eef8 <_ZNK8touchgfx8LCD16bpp17framebufferFormatEv>:
 801eef8:	2000      	movs	r0, #0
 801eefa:	4770      	bx	lr

0801eefc <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth>:
 801eefc:	2bff      	cmp	r3, #255	@ 0xff
 801eefe:	d050      	beq.n	801efa2 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0xa6>
 801ef00:	2a0b      	cmp	r2, #11
 801ef02:	d04a      	beq.n	801ef9a <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x9e>
 801ef04:	d80e      	bhi.n	801ef24 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x28>
 801ef06:	2a03      	cmp	r2, #3
 801ef08:	d03f      	beq.n	801ef8a <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x8e>
 801ef0a:	d804      	bhi.n	801ef16 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x1a>
 801ef0c:	2a01      	cmp	r2, #1
 801ef0e:	d03e      	beq.n	801ef8e <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x92>
 801ef10:	d93f      	bls.n	801ef92 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x96>
 801ef12:	6b80      	ldr	r0, [r0, #56]	@ 0x38
 801ef14:	4770      	bx	lr
 801ef16:	2a09      	cmp	r2, #9
 801ef18:	d03f      	beq.n	801ef9a <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x9e>
 801ef1a:	d83c      	bhi.n	801ef96 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x9a>
 801ef1c:	2a08      	cmp	r2, #8
 801ef1e:	d03a      	beq.n	801ef96 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x9a>
 801ef20:	2000      	movs	r0, #0
 801ef22:	4770      	bx	lr
 801ef24:	2a2f      	cmp	r2, #47	@ 0x2f
 801ef26:	d024      	beq.n	801ef72 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x76>
 801ef28:	d80d      	bhi.n	801ef46 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x4a>
 801ef2a:	2a2d      	cmp	r2, #45	@ 0x2d
 801ef2c:	d014      	beq.n	801ef58 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x5c>
 801ef2e:	d826      	bhi.n	801ef7e <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x82>
 801ef30:	2a2c      	cmp	r2, #44	@ 0x2c
 801ef32:	d1f5      	bne.n	801ef20 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x24>
 801ef34:	684b      	ldr	r3, [r1, #4]
 801ef36:	781b      	ldrb	r3, [r3, #0]
 801ef38:	2b01      	cmp	r3, #1
 801ef3a:	d018      	beq.n	801ef6e <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x72>
 801ef3c:	d323      	bcc.n	801ef86 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x8a>
 801ef3e:	2b02      	cmp	r3, #2
 801ef40:	d1ee      	bne.n	801ef20 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x24>
 801ef42:	6880      	ldr	r0, [r0, #8]
 801ef44:	4770      	bx	lr
 801ef46:	2a31      	cmp	r2, #49	@ 0x31
 801ef48:	d004      	beq.n	801ef54 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x58>
 801ef4a:	d328      	bcc.n	801ef9e <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0xa2>
 801ef4c:	2a32      	cmp	r2, #50	@ 0x32
 801ef4e:	d026      	beq.n	801ef9e <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0xa2>
 801ef50:	2a33      	cmp	r2, #51	@ 0x33
 801ef52:	d1e5      	bne.n	801ef20 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x24>
 801ef54:	6f00      	ldr	r0, [r0, #112]	@ 0x70
 801ef56:	4770      	bx	lr
 801ef58:	684b      	ldr	r3, [r1, #4]
 801ef5a:	781b      	ldrb	r3, [r3, #0]
 801ef5c:	2b01      	cmp	r3, #1
 801ef5e:	d004      	beq.n	801ef6a <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x6e>
 801ef60:	d30b      	bcc.n	801ef7a <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x7e>
 801ef62:	2b02      	cmp	r3, #2
 801ef64:	d1dc      	bne.n	801ef20 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x24>
 801ef66:	6900      	ldr	r0, [r0, #16]
 801ef68:	4770      	bx	lr
 801ef6a:	6a00      	ldr	r0, [r0, #32]
 801ef6c:	4770      	bx	lr
 801ef6e:	6980      	ldr	r0, [r0, #24]
 801ef70:	4770      	bx	lr
 801ef72:	684b      	ldr	r3, [r1, #4]
 801ef74:	781b      	ldrb	r3, [r3, #0]
 801ef76:	2b00      	cmp	r3, #0
 801ef78:	d1d2      	bne.n	801ef20 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x24>
 801ef7a:	6b00      	ldr	r0, [r0, #48]	@ 0x30
 801ef7c:	4770      	bx	lr
 801ef7e:	684b      	ldr	r3, [r1, #4]
 801ef80:	781b      	ldrb	r3, [r3, #0]
 801ef82:	2b00      	cmp	r3, #0
 801ef84:	d1cc      	bne.n	801ef20 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x24>
 801ef86:	6a80      	ldr	r0, [r0, #40]	@ 0x28
 801ef88:	4770      	bx	lr
 801ef8a:	6c80      	ldr	r0, [r0, #72]	@ 0x48
 801ef8c:	4770      	bx	lr
 801ef8e:	6d00      	ldr	r0, [r0, #80]	@ 0x50
 801ef90:	4770      	bx	lr
 801ef92:	6c00      	ldr	r0, [r0, #64]	@ 0x40
 801ef94:	4770      	bx	lr
 801ef96:	6d80      	ldr	r0, [r0, #88]	@ 0x58
 801ef98:	4770      	bx	lr
 801ef9a:	6e00      	ldr	r0, [r0, #96]	@ 0x60
 801ef9c:	4770      	bx	lr
 801ef9e:	6e80      	ldr	r0, [r0, #104]	@ 0x68
 801efa0:	4770      	bx	lr
 801efa2:	2a0b      	cmp	r2, #11
 801efa4:	d049      	beq.n	801f03a <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x13e>
 801efa6:	d80e      	bhi.n	801efc6 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0xca>
 801efa8:	2a03      	cmp	r2, #3
 801efaa:	d040      	beq.n	801f02e <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x132>
 801efac:	d804      	bhi.n	801efb8 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0xbc>
 801efae:	2a01      	cmp	r2, #1
 801efb0:	d03f      	beq.n	801f032 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x136>
 801efb2:	d940      	bls.n	801f036 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x13a>
 801efb4:	6bc0      	ldr	r0, [r0, #60]	@ 0x3c
 801efb6:	4770      	bx	lr
 801efb8:	2a09      	cmp	r2, #9
 801efba:	d03e      	beq.n	801f03a <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x13e>
 801efbc:	d801      	bhi.n	801efc2 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0xc6>
 801efbe:	2a08      	cmp	r2, #8
 801efc0:	d1ae      	bne.n	801ef20 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x24>
 801efc2:	6dc0      	ldr	r0, [r0, #92]	@ 0x5c
 801efc4:	4770      	bx	lr
 801efc6:	2a2f      	cmp	r2, #47	@ 0x2f
 801efc8:	d024      	beq.n	801f014 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x118>
 801efca:	d80d      	bhi.n	801efe8 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0xec>
 801efcc:	2a2d      	cmp	r2, #45	@ 0x2d
 801efce:	d014      	beq.n	801effa <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0xfe>
 801efd0:	d826      	bhi.n	801f020 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x124>
 801efd2:	2a2c      	cmp	r2, #44	@ 0x2c
 801efd4:	d1a4      	bne.n	801ef20 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x24>
 801efd6:	684b      	ldr	r3, [r1, #4]
 801efd8:	781b      	ldrb	r3, [r3, #0]
 801efda:	2b01      	cmp	r3, #1
 801efdc:	d018      	beq.n	801f010 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x114>
 801efde:	d324      	bcc.n	801f02a <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x12e>
 801efe0:	2b02      	cmp	r3, #2
 801efe2:	d19d      	bne.n	801ef20 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x24>
 801efe4:	68c0      	ldr	r0, [r0, #12]
 801efe6:	4770      	bx	lr
 801efe8:	2a31      	cmp	r2, #49	@ 0x31
 801efea:	d004      	beq.n	801eff6 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0xfa>
 801efec:	d327      	bcc.n	801f03e <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x142>
 801efee:	2a32      	cmp	r2, #50	@ 0x32
 801eff0:	d025      	beq.n	801f03e <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x142>
 801eff2:	2a33      	cmp	r2, #51	@ 0x33
 801eff4:	d194      	bne.n	801ef20 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x24>
 801eff6:	6f40      	ldr	r0, [r0, #116]	@ 0x74
 801eff8:	4770      	bx	lr
 801effa:	684b      	ldr	r3, [r1, #4]
 801effc:	781b      	ldrb	r3, [r3, #0]
 801effe:	2b01      	cmp	r3, #1
 801f000:	d004      	beq.n	801f00c <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x110>
 801f002:	d30b      	bcc.n	801f01c <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x120>
 801f004:	2b02      	cmp	r3, #2
 801f006:	d18b      	bne.n	801ef20 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x24>
 801f008:	6940      	ldr	r0, [r0, #20]
 801f00a:	4770      	bx	lr
 801f00c:	6a40      	ldr	r0, [r0, #36]	@ 0x24
 801f00e:	4770      	bx	lr
 801f010:	69c0      	ldr	r0, [r0, #28]
 801f012:	4770      	bx	lr
 801f014:	684b      	ldr	r3, [r1, #4]
 801f016:	781b      	ldrb	r3, [r3, #0]
 801f018:	2b00      	cmp	r3, #0
 801f01a:	d181      	bne.n	801ef20 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x24>
 801f01c:	6b40      	ldr	r0, [r0, #52]	@ 0x34
 801f01e:	4770      	bx	lr
 801f020:	684b      	ldr	r3, [r1, #4]
 801f022:	781b      	ldrb	r3, [r3, #0]
 801f024:	2b00      	cmp	r3, #0
 801f026:	f47f af7b 	bne.w	801ef20 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x24>
 801f02a:	6ac0      	ldr	r0, [r0, #44]	@ 0x2c
 801f02c:	4770      	bx	lr
 801f02e:	6cc0      	ldr	r0, [r0, #76]	@ 0x4c
 801f030:	4770      	bx	lr
 801f032:	6d40      	ldr	r0, [r0, #84]	@ 0x54
 801f034:	4770      	bx	lr
 801f036:	6c40      	ldr	r0, [r0, #68]	@ 0x44
 801f038:	4770      	bx	lr
 801f03a:	6e40      	ldr	r0, [r0, #100]	@ 0x64
 801f03c:	4770      	bx	lr
 801f03e:	6ec0      	ldr	r0, [r0, #108]	@ 0x6c
 801f040:	4770      	bx	lr

0801f042 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 801f042:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801f046:	b087      	sub	sp, #28
 801f048:	9815      	ldr	r0, [sp, #84]	@ 0x54
 801f04a:	9205      	str	r2, [sp, #20]
 801f04c:	f89d 2064 	ldrb.w	r2, [sp, #100]	@ 0x64
 801f050:	9101      	str	r1, [sp, #4]
 801f052:	9202      	str	r2, [sp, #8]
 801f054:	6841      	ldr	r1, [r0, #4]
 801f056:	f8dd e060 	ldr.w	lr, [sp, #96]	@ 0x60
 801f05a:	e9dd 2416 	ldrd	r2, r4, [sp, #88]	@ 0x58
 801f05e:	fb01 2404 	mla	r4, r1, r4, r2
 801f062:	6802      	ldr	r2, [r0, #0]
 801f064:	eb02 0444 	add.w	r4, r2, r4, lsl #1
 801f068:	f8de 2000 	ldr.w	r2, [lr]
 801f06c:	9203      	str	r2, [sp, #12]
 801f06e:	f8de 2004 	ldr.w	r2, [lr, #4]
 801f072:	3204      	adds	r2, #4
 801f074:	9204      	str	r2, [sp, #16]
 801f076:	9a02      	ldr	r2, [sp, #8]
 801f078:	43d6      	mvns	r6, r2
 801f07a:	b2f6      	uxtb	r6, r6
 801f07c:	9a01      	ldr	r2, [sp, #4]
 801f07e:	2a00      	cmp	r2, #0
 801f080:	dc03      	bgt.n	801f08a <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x48>
 801f082:	9a05      	ldr	r2, [sp, #20]
 801f084:	2a00      	cmp	r2, #0
 801f086:	f340 8129 	ble.w	801f2dc <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x29a>
 801f08a:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 801f08c:	f9be c008 	ldrsh.w	ip, [lr, #8]
 801f090:	f502 4100 	add.w	r1, r2, #32768	@ 0x8000
 801f094:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 801f096:	f9be 700c 	ldrsh.w	r7, [lr, #12]
 801f09a:	f502 4200 	add.w	r2, r2, #32768	@ 0x8000
 801f09e:	2b00      	cmp	r3, #0
 801f0a0:	dd0e      	ble.n	801f0c0 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7e>
 801f0a2:	1408      	asrs	r0, r1, #16
 801f0a4:	d405      	bmi.n	801f0b2 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x70>
 801f0a6:	4560      	cmp	r0, ip
 801f0a8:	da03      	bge.n	801f0b2 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x70>
 801f0aa:	1410      	asrs	r0, r2, #16
 801f0ac:	d401      	bmi.n	801f0b2 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x70>
 801f0ae:	42b8      	cmp	r0, r7
 801f0b0:	db07      	blt.n	801f0c2 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x80>
 801f0b2:	9813      	ldr	r0, [sp, #76]	@ 0x4c
 801f0b4:	3b01      	subs	r3, #1
 801f0b6:	3402      	adds	r4, #2
 801f0b8:	4401      	add	r1, r0
 801f0ba:	9814      	ldr	r0, [sp, #80]	@ 0x50
 801f0bc:	4402      	add	r2, r0
 801f0be:	e7ee      	b.n	801f09e <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5c>
 801f0c0:	d071      	beq.n	801f1a6 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x164>
 801f0c2:	1e58      	subs	r0, r3, #1
 801f0c4:	9d13      	ldr	r5, [sp, #76]	@ 0x4c
 801f0c6:	fb05 1500 	mla	r5, r5, r0, r1
 801f0ca:	142d      	asrs	r5, r5, #16
 801f0cc:	d45f      	bmi.n	801f18e <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x14c>
 801f0ce:	4565      	cmp	r5, ip
 801f0d0:	da5d      	bge.n	801f18e <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x14c>
 801f0d2:	9d14      	ldr	r5, [sp, #80]	@ 0x50
 801f0d4:	fb05 2000 	mla	r0, r5, r0, r2
 801f0d8:	1400      	asrs	r0, r0, #16
 801f0da:	d458      	bmi.n	801f18e <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x14c>
 801f0dc:	42b8      	cmp	r0, r7
 801f0de:	da56      	bge.n	801f18e <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x14c>
 801f0e0:	4699      	mov	r9, r3
 801f0e2:	46a2      	mov	sl, r4
 801f0e4:	f8bd b008 	ldrh.w	fp, [sp, #8]
 801f0e8:	f1b9 0f00 	cmp.w	r9, #0
 801f0ec:	dd57      	ble.n	801f19e <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x15c>
 801f0ee:	ea4f 4c22 	mov.w	ip, r2, asr #16
 801f0f2:	f9be 7008 	ldrsh.w	r7, [lr, #8]
 801f0f6:	9803      	ldr	r0, [sp, #12]
 801f0f8:	140d      	asrs	r5, r1, #16
 801f0fa:	f109 39ff 	add.w	r9, r9, #4294967295
 801f0fe:	fb07 000c 	mla	r0, r7, ip, r0
 801f102:	5d40      	ldrb	r0, [r0, r5]
 801f104:	9d04      	ldr	r5, [sp, #16]
 801f106:	f835 0010 	ldrh.w	r0, [r5, r0, lsl #1]
 801f10a:	f8ba 5000 	ldrh.w	r5, [sl]
 801f10e:	ea4f 2c20 	mov.w	ip, r0, asr #8
 801f112:	122f      	asrs	r7, r5, #8
 801f114:	ea4f 08e5 	mov.w	r8, r5, asr #3
 801f118:	f00c 0cf8 	and.w	ip, ip, #248	@ 0xf8
 801f11c:	f007 07f8 	and.w	r7, r7, #248	@ 0xf8
 801f120:	00ed      	lsls	r5, r5, #3
 801f122:	f008 08fc 	and.w	r8, r8, #252	@ 0xfc
 801f126:	fb17 f706 	smulbb	r7, r7, r6
 801f12a:	b2ed      	uxtb	r5, r5
 801f12c:	fb18 f806 	smulbb	r8, r8, r6
 801f130:	fb0c 7c0b 	mla	ip, ip, fp, r7
 801f134:	10c7      	asrs	r7, r0, #3
 801f136:	fb15 f506 	smulbb	r5, r5, r6
 801f13a:	00c0      	lsls	r0, r0, #3
 801f13c:	f007 07fc 	and.w	r7, r7, #252	@ 0xfc
 801f140:	fa1f fc8c 	uxth.w	ip, ip
 801f144:	b2c0      	uxtb	r0, r0
 801f146:	fb07 870b 	mla	r7, r7, fp, r8
 801f14a:	fb00 500b 	mla	r0, r0, fp, r5
 801f14e:	f10c 0501 	add.w	r5, ip, #1
 801f152:	b2bf      	uxth	r7, r7
 801f154:	b280      	uxth	r0, r0
 801f156:	eb05 2c1c 	add.w	ip, r5, ip, lsr #8
 801f15a:	f107 0801 	add.w	r8, r7, #1
 801f15e:	1c45      	adds	r5, r0, #1
 801f160:	eb08 2817 	add.w	r8, r8, r7, lsr #8
 801f164:	f40c 4c78 	and.w	ip, ip, #63488	@ 0xf800
 801f168:	eb05 2510 	add.w	r5, r5, r0, lsr #8
 801f16c:	9813      	ldr	r0, [sp, #76]	@ 0x4c
 801f16e:	ea4f 1858 	mov.w	r8, r8, lsr #5
 801f172:	f3c5 25c4 	ubfx	r5, r5, #11, #5
 801f176:	4401      	add	r1, r0
 801f178:	f408 68fc 	and.w	r8, r8, #2016	@ 0x7e0
 801f17c:	9814      	ldr	r0, [sp, #80]	@ 0x50
 801f17e:	ea45 0c0c 	orr.w	ip, r5, ip
 801f182:	4402      	add	r2, r0
 801f184:	ea4c 0c08 	orr.w	ip, ip, r8
 801f188:	f82a cb02 	strh.w	ip, [sl], #2
 801f18c:	e7ac      	b.n	801f0e8 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa6>
 801f18e:	f04f 0800 	mov.w	r8, #0
 801f192:	f8bd a008 	ldrh.w	sl, [sp, #8]
 801f196:	eb03 0008 	add.w	r0, r3, r8
 801f19a:	2800      	cmp	r0, #0
 801f19c:	dc41      	bgt.n	801f222 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1e0>
 801f19e:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 801f1a2:	eb04 0443 	add.w	r4, r4, r3, lsl #1
 801f1a6:	9b01      	ldr	r3, [sp, #4]
 801f1a8:	2b00      	cmp	r3, #0
 801f1aa:	f340 8097 	ble.w	801f2dc <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x29a>
 801f1ae:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 801f1b2:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 801f1b4:	ee30 0a04 	vadd.f32	s0, s0, s8
 801f1b8:	ee70 0aa4 	vadd.f32	s1, s1, s9
 801f1bc:	eef0 6a62 	vmov.f32	s13, s5
 801f1c0:	eec7 7a00 	vdiv.f32	s15, s14, s0
 801f1c4:	ee31 1a05 	vadd.f32	s2, s2, s10
 801f1c8:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 801f1cc:	edcd 6a11 	vstr	s13, [sp, #68]	@ 0x44
 801f1d0:	eef0 6a43 	vmov.f32	s13, s6
 801f1d4:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 801f1d8:	edcd 6a12 	vstr	s13, [sp, #72]	@ 0x48
 801f1dc:	ee20 7aa7 	vmul.f32	s14, s1, s15
 801f1e0:	ee61 7a27 	vmul.f32	s15, s2, s15
 801f1e4:	ee77 2a62 	vsub.f32	s5, s14, s5
 801f1e8:	ee37 3ac3 	vsub.f32	s6, s15, s6
 801f1ec:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 801f1f0:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 801f1f4:	ee12 2a90 	vmov	r2, s5
 801f1f8:	eef0 2a47 	vmov.f32	s5, s14
 801f1fc:	fb92 f3f3 	sdiv	r3, r2, r3
 801f200:	ee13 2a10 	vmov	r2, s6
 801f204:	9313      	str	r3, [sp, #76]	@ 0x4c
 801f206:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 801f208:	eeb0 3a67 	vmov.f32	s6, s15
 801f20c:	fb92 f3f3 	sdiv	r3, r2, r3
 801f210:	9314      	str	r3, [sp, #80]	@ 0x50
 801f212:	9b01      	ldr	r3, [sp, #4]
 801f214:	9a05      	ldr	r2, [sp, #20]
 801f216:	3b01      	subs	r3, #1
 801f218:	9301      	str	r3, [sp, #4]
 801f21a:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 801f21c:	bf08      	it	eq
 801f21e:	4613      	moveq	r3, r2
 801f220:	e72c      	b.n	801f07c <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3a>
 801f222:	140f      	asrs	r7, r1, #16
 801f224:	d453      	bmi.n	801f2ce <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x28c>
 801f226:	f8de 5008 	ldr.w	r5, [lr, #8]
 801f22a:	42bd      	cmp	r5, r7
 801f22c:	dd4f      	ble.n	801f2ce <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x28c>
 801f22e:	ea5f 4c22 	movs.w	ip, r2, asr #16
 801f232:	d44c      	bmi.n	801f2ce <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x28c>
 801f234:	f8de 000c 	ldr.w	r0, [lr, #12]
 801f238:	4560      	cmp	r0, ip
 801f23a:	dd48      	ble.n	801f2ce <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x28c>
 801f23c:	9803      	ldr	r0, [sp, #12]
 801f23e:	b22d      	sxth	r5, r5
 801f240:	fb0c 0505 	mla	r5, ip, r5, r0
 801f244:	5de8      	ldrb	r0, [r5, r7]
 801f246:	9d04      	ldr	r5, [sp, #16]
 801f248:	f835 0010 	ldrh.w	r0, [r5, r0, lsl #1]
 801f24c:	f06f 0501 	mvn.w	r5, #1
 801f250:	fb05 fb08 	mul.w	fp, r5, r8
 801f254:	ea4f 2c20 	mov.w	ip, r0, asr #8
 801f258:	f834 500b 	ldrh.w	r5, [r4, fp]
 801f25c:	f00c 0cf8 	and.w	ip, ip, #248	@ 0xf8
 801f260:	122f      	asrs	r7, r5, #8
 801f262:	ea4f 09e5 	mov.w	r9, r5, asr #3
 801f266:	f007 07f8 	and.w	r7, r7, #248	@ 0xf8
 801f26a:	00ed      	lsls	r5, r5, #3
 801f26c:	f009 09fc 	and.w	r9, r9, #252	@ 0xfc
 801f270:	fb17 f706 	smulbb	r7, r7, r6
 801f274:	b2ed      	uxtb	r5, r5
 801f276:	fb19 f906 	smulbb	r9, r9, r6
 801f27a:	fb0c 7c0a 	mla	ip, ip, sl, r7
 801f27e:	10c7      	asrs	r7, r0, #3
 801f280:	fb15 f506 	smulbb	r5, r5, r6
 801f284:	00c0      	lsls	r0, r0, #3
 801f286:	f007 07fc 	and.w	r7, r7, #252	@ 0xfc
 801f28a:	fa1f fc8c 	uxth.w	ip, ip
 801f28e:	b2c0      	uxtb	r0, r0
 801f290:	fb07 970a 	mla	r7, r7, sl, r9
 801f294:	fb00 500a 	mla	r0, r0, sl, r5
 801f298:	f10c 0501 	add.w	r5, ip, #1
 801f29c:	b2bf      	uxth	r7, r7
 801f29e:	b280      	uxth	r0, r0
 801f2a0:	eb05 2c1c 	add.w	ip, r5, ip, lsr #8
 801f2a4:	f107 0901 	add.w	r9, r7, #1
 801f2a8:	1c45      	adds	r5, r0, #1
 801f2aa:	eb09 2917 	add.w	r9, r9, r7, lsr #8
 801f2ae:	f40c 4c78 	and.w	ip, ip, #63488	@ 0xf800
 801f2b2:	eb05 2510 	add.w	r5, r5, r0, lsr #8
 801f2b6:	ea4f 1959 	mov.w	r9, r9, lsr #5
 801f2ba:	f3c5 25c4 	ubfx	r5, r5, #11, #5
 801f2be:	f409 69fc 	and.w	r9, r9, #2016	@ 0x7e0
 801f2c2:	ea45 0c0c 	orr.w	ip, r5, ip
 801f2c6:	ea4c 0c09 	orr.w	ip, ip, r9
 801f2ca:	f824 c00b 	strh.w	ip, [r4, fp]
 801f2ce:	9813      	ldr	r0, [sp, #76]	@ 0x4c
 801f2d0:	f108 38ff 	add.w	r8, r8, #4294967295
 801f2d4:	4401      	add	r1, r0
 801f2d6:	9814      	ldr	r0, [sp, #80]	@ 0x50
 801f2d8:	4402      	add	r2, r0
 801f2da:	e75c      	b.n	801f196 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x154>
 801f2dc:	b007      	add	sp, #28
 801f2de:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0801f2e2 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 801f2e2:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801f2e6:	b085      	sub	sp, #20
 801f2e8:	4693      	mov	fp, r2
 801f2ea:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 801f2ee:	9e13      	ldr	r6, [sp, #76]	@ 0x4c
 801f2f0:	9d16      	ldr	r5, [sp, #88]	@ 0x58
 801f2f2:	6870      	ldr	r0, [r6, #4]
 801f2f4:	9100      	str	r1, [sp, #0]
 801f2f6:	e9dd 2414 	ldrd	r2, r4, [sp, #80]	@ 0x50
 801f2fa:	e9dd ec11 	ldrd	lr, ip, [sp, #68]	@ 0x44
 801f2fe:	fb00 2404 	mla	r4, r0, r4, r2
 801f302:	6832      	ldr	r2, [r6, #0]
 801f304:	eb02 0444 	add.w	r4, r2, r4, lsl #1
 801f308:	682a      	ldr	r2, [r5, #0]
 801f30a:	9201      	str	r2, [sp, #4]
 801f30c:	686a      	ldr	r2, [r5, #4]
 801f30e:	3204      	adds	r2, #4
 801f310:	9202      	str	r2, [sp, #8]
 801f312:	9a00      	ldr	r2, [sp, #0]
 801f314:	2a00      	cmp	r2, #0
 801f316:	dc03      	bgt.n	801f320 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3e>
 801f318:	f1bb 0f00 	cmp.w	fp, #0
 801f31c:	f340 80a0 	ble.w	801f460 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x17e>
 801f320:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 801f322:	f9b5 9008 	ldrsh.w	r9, [r5, #8]
 801f326:	f502 4000 	add.w	r0, r2, #32768	@ 0x8000
 801f32a:	9a10      	ldr	r2, [sp, #64]	@ 0x40
 801f32c:	f9b5 800c 	ldrsh.w	r8, [r5, #12]
 801f330:	f502 4200 	add.w	r2, r2, #32768	@ 0x8000
 801f334:	2b00      	cmp	r3, #0
 801f336:	dd0c      	ble.n	801f352 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x70>
 801f338:	1406      	asrs	r6, r0, #16
 801f33a:	d405      	bmi.n	801f348 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x66>
 801f33c:	454e      	cmp	r6, r9
 801f33e:	da03      	bge.n	801f348 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x66>
 801f340:	1416      	asrs	r6, r2, #16
 801f342:	d401      	bmi.n	801f348 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x66>
 801f344:	4546      	cmp	r6, r8
 801f346:	db05      	blt.n	801f354 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x72>
 801f348:	4470      	add	r0, lr
 801f34a:	4462      	add	r2, ip
 801f34c:	3b01      	subs	r3, #1
 801f34e:	3402      	adds	r4, #2
 801f350:	e7f0      	b.n	801f334 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x52>
 801f352:	d00f      	beq.n	801f374 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x92>
 801f354:	1e5e      	subs	r6, r3, #1
 801f356:	fb0e 0706 	mla	r7, lr, r6, r0
 801f35a:	143f      	asrs	r7, r7, #16
 801f35c:	d541      	bpl.n	801f3e2 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x100>
 801f35e:	eb04 0643 	add.w	r6, r4, r3, lsl #1
 801f362:	4698      	mov	r8, r3
 801f364:	9603      	str	r6, [sp, #12]
 801f366:	f1b8 0f00 	cmp.w	r8, #0
 801f36a:	dc59      	bgt.n	801f420 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x13e>
 801f36c:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 801f370:	eb04 0443 	add.w	r4, r4, r3, lsl #1
 801f374:	9b00      	ldr	r3, [sp, #0]
 801f376:	2b00      	cmp	r3, #0
 801f378:	dd72      	ble.n	801f460 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x17e>
 801f37a:	ee30 0a04 	vadd.f32	s0, s0, s8
 801f37e:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 801f380:	ee70 0aa4 	vadd.f32	s1, s1, s9
 801f384:	eeb0 6a62 	vmov.f32	s12, s5
 801f388:	eec6 7a80 	vdiv.f32	s15, s13, s0
 801f38c:	ee31 1a05 	vadd.f32	s2, s2, s10
 801f390:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 801f394:	ed8d 6a0f 	vstr	s12, [sp, #60]	@ 0x3c
 801f398:	eeb0 6a43 	vmov.f32	s12, s6
 801f39c:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 801f3a0:	ed8d 6a10 	vstr	s12, [sp, #64]	@ 0x40
 801f3a4:	ee20 7aa7 	vmul.f32	s14, s1, s15
 801f3a8:	ee61 7a27 	vmul.f32	s15, s2, s15
 801f3ac:	ee77 2a62 	vsub.f32	s5, s14, s5
 801f3b0:	ee37 3ac3 	vsub.f32	s6, s15, s6
 801f3b4:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 801f3b8:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 801f3bc:	ee12 2a90 	vmov	r2, s5
 801f3c0:	eef0 2a47 	vmov.f32	s5, s14
 801f3c4:	fb92 fef3 	sdiv	lr, r2, r3
 801f3c8:	ee13 2a10 	vmov	r2, s6
 801f3cc:	eeb0 3a67 	vmov.f32	s6, s15
 801f3d0:	fb92 fcf3 	sdiv	ip, r2, r3
 801f3d4:	9b00      	ldr	r3, [sp, #0]
 801f3d6:	3b01      	subs	r3, #1
 801f3d8:	9300      	str	r3, [sp, #0]
 801f3da:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 801f3dc:	bf08      	it	eq
 801f3de:	465b      	moveq	r3, fp
 801f3e0:	e797      	b.n	801f312 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x30>
 801f3e2:	454f      	cmp	r7, r9
 801f3e4:	dabb      	bge.n	801f35e <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7c>
 801f3e6:	fb0c 2606 	mla	r6, ip, r6, r2
 801f3ea:	1436      	asrs	r6, r6, #16
 801f3ec:	d4b7      	bmi.n	801f35e <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7c>
 801f3ee:	4546      	cmp	r6, r8
 801f3f0:	dab5      	bge.n	801f35e <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7c>
 801f3f2:	461e      	mov	r6, r3
 801f3f4:	46a0      	mov	r8, r4
 801f3f6:	2e00      	cmp	r6, #0
 801f3f8:	ddb8      	ble.n	801f36c <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8a>
 801f3fa:	1417      	asrs	r7, r2, #16
 801f3fc:	f9b5 a008 	ldrsh.w	sl, [r5, #8]
 801f400:	9901      	ldr	r1, [sp, #4]
 801f402:	ea4f 4920 	mov.w	r9, r0, asr #16
 801f406:	4462      	add	r2, ip
 801f408:	4470      	add	r0, lr
 801f40a:	fb0a 1707 	mla	r7, sl, r7, r1
 801f40e:	9902      	ldr	r1, [sp, #8]
 801f410:	3e01      	subs	r6, #1
 801f412:	f817 7009 	ldrb.w	r7, [r7, r9]
 801f416:	f831 7017 	ldrh.w	r7, [r1, r7, lsl #1]
 801f41a:	f828 7b02 	strh.w	r7, [r8], #2
 801f41e:	e7ea      	b.n	801f3f6 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x114>
 801f420:	ea5f 4920 	movs.w	r9, r0, asr #16
 801f424:	d417      	bmi.n	801f456 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x174>
 801f426:	68ae      	ldr	r6, [r5, #8]
 801f428:	454e      	cmp	r6, r9
 801f42a:	dd14      	ble.n	801f456 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x174>
 801f42c:	ea5f 4a22 	movs.w	sl, r2, asr #16
 801f430:	d411      	bmi.n	801f456 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x174>
 801f432:	68ef      	ldr	r7, [r5, #12]
 801f434:	4557      	cmp	r7, sl
 801f436:	dd0e      	ble.n	801f456 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x174>
 801f438:	9f01      	ldr	r7, [sp, #4]
 801f43a:	b236      	sxth	r6, r6
 801f43c:	f06f 0101 	mvn.w	r1, #1
 801f440:	fb0a 7606 	mla	r6, sl, r6, r7
 801f444:	9f02      	ldr	r7, [sp, #8]
 801f446:	f816 6009 	ldrb.w	r6, [r6, r9]
 801f44a:	f837 7016 	ldrh.w	r7, [r7, r6, lsl #1]
 801f44e:	fb01 f608 	mul.w	r6, r1, r8
 801f452:	9903      	ldr	r1, [sp, #12]
 801f454:	538f      	strh	r7, [r1, r6]
 801f456:	4470      	add	r0, lr
 801f458:	4462      	add	r2, ip
 801f45a:	f108 38ff 	add.w	r8, r8, #4294967295
 801f45e:	e782      	b.n	801f366 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x84>
 801f460:	b005      	add	sp, #20
 801f462:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0801f466 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 801f466:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801f46a:	b087      	sub	sp, #28
 801f46c:	9c15      	ldr	r4, [sp, #84]	@ 0x54
 801f46e:	9205      	str	r2, [sp, #20]
 801f470:	f89d 2064 	ldrb.w	r2, [sp, #100]	@ 0x64
 801f474:	9102      	str	r1, [sp, #8]
 801f476:	9203      	str	r2, [sp, #12]
 801f478:	6861      	ldr	r1, [r4, #4]
 801f47a:	f8dd c060 	ldr.w	ip, [sp, #96]	@ 0x60
 801f47e:	e9dd 2016 	ldrd	r2, r0, [sp, #88]	@ 0x58
 801f482:	fb01 2000 	mla	r0, r1, r0, r2
 801f486:	6822      	ldr	r2, [r4, #0]
 801f488:	eb02 0240 	add.w	r2, r2, r0, lsl #1
 801f48c:	9200      	str	r2, [sp, #0]
 801f48e:	f8dc 2000 	ldr.w	r2, [ip]
 801f492:	9204      	str	r2, [sp, #16]
 801f494:	f8dc 2004 	ldr.w	r2, [ip, #4]
 801f498:	3204      	adds	r2, #4
 801f49a:	9201      	str	r2, [sp, #4]
 801f49c:	9a03      	ldr	r2, [sp, #12]
 801f49e:	43d5      	mvns	r5, r2
 801f4a0:	b2ed      	uxtb	r5, r5
 801f4a2:	9a02      	ldr	r2, [sp, #8]
 801f4a4:	2a00      	cmp	r2, #0
 801f4a6:	dc03      	bgt.n	801f4b0 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4a>
 801f4a8:	9a05      	ldr	r2, [sp, #20]
 801f4aa:	2a00      	cmp	r2, #0
 801f4ac:	f340 812c 	ble.w	801f708 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2a2>
 801f4b0:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 801f4b2:	f9bc e008 	ldrsh.w	lr, [ip, #8]
 801f4b6:	f502 4100 	add.w	r1, r2, #32768	@ 0x8000
 801f4ba:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 801f4bc:	f9bc 700c 	ldrsh.w	r7, [ip, #12]
 801f4c0:	f502 4200 	add.w	r2, r2, #32768	@ 0x8000
 801f4c4:	2b00      	cmp	r3, #0
 801f4c6:	dd10      	ble.n	801f4ea <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x84>
 801f4c8:	140c      	asrs	r4, r1, #16
 801f4ca:	d405      	bmi.n	801f4d8 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x72>
 801f4cc:	4574      	cmp	r4, lr
 801f4ce:	da03      	bge.n	801f4d8 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x72>
 801f4d0:	1414      	asrs	r4, r2, #16
 801f4d2:	d401      	bmi.n	801f4d8 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x72>
 801f4d4:	42bc      	cmp	r4, r7
 801f4d6:	db09      	blt.n	801f4ec <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x86>
 801f4d8:	9c13      	ldr	r4, [sp, #76]	@ 0x4c
 801f4da:	3b01      	subs	r3, #1
 801f4dc:	9800      	ldr	r0, [sp, #0]
 801f4de:	4421      	add	r1, r4
 801f4e0:	9c14      	ldr	r4, [sp, #80]	@ 0x50
 801f4e2:	3002      	adds	r0, #2
 801f4e4:	4422      	add	r2, r4
 801f4e6:	9000      	str	r0, [sp, #0]
 801f4e8:	e7ec      	b.n	801f4c4 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5e>
 801f4ea:	d071      	beq.n	801f5d0 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x16a>
 801f4ec:	1e5c      	subs	r4, r3, #1
 801f4ee:	9e13      	ldr	r6, [sp, #76]	@ 0x4c
 801f4f0:	fb06 1604 	mla	r6, r6, r4, r1
 801f4f4:	1436      	asrs	r6, r6, #16
 801f4f6:	d45d      	bmi.n	801f5b4 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x14e>
 801f4f8:	4576      	cmp	r6, lr
 801f4fa:	da5b      	bge.n	801f5b4 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x14e>
 801f4fc:	9e14      	ldr	r6, [sp, #80]	@ 0x50
 801f4fe:	fb06 2404 	mla	r4, r6, r4, r2
 801f502:	1424      	asrs	r4, r4, #16
 801f504:	d456      	bmi.n	801f5b4 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x14e>
 801f506:	42bc      	cmp	r4, r7
 801f508:	da54      	bge.n	801f5b4 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x14e>
 801f50a:	4698      	mov	r8, r3
 801f50c:	f8dd 9000 	ldr.w	r9, [sp]
 801f510:	f8bd a00c 	ldrh.w	sl, [sp, #12]
 801f514:	f1b8 0f00 	cmp.w	r8, #0
 801f518:	dd54      	ble.n	801f5c4 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x15e>
 801f51a:	f9bc 7008 	ldrsh.w	r7, [ip, #8]
 801f51e:	1414      	asrs	r4, r2, #16
 801f520:	9804      	ldr	r0, [sp, #16]
 801f522:	140e      	asrs	r6, r1, #16
 801f524:	f108 38ff 	add.w	r8, r8, #4294967295
 801f528:	fb07 0404 	mla	r4, r7, r4, r0
 801f52c:	9801      	ldr	r0, [sp, #4]
 801f52e:	f814 e006 	ldrb.w	lr, [r4, r6]
 801f532:	f8b9 4000 	ldrh.w	r4, [r9]
 801f536:	eb0e 0e4e 	add.w	lr, lr, lr, lsl #1
 801f53a:	1227      	asrs	r7, r4, #8
 801f53c:	eb00 0b0e 	add.w	fp, r0, lr
 801f540:	f810 e00e 	ldrb.w	lr, [r0, lr]
 801f544:	f007 07f8 	and.w	r7, r7, #248	@ 0xf8
 801f548:	9813      	ldr	r0, [sp, #76]	@ 0x4c
 801f54a:	f89b 6002 	ldrb.w	r6, [fp, #2]
 801f54e:	f89b b001 	ldrb.w	fp, [fp, #1]
 801f552:	4401      	add	r1, r0
 801f554:	fb16 f60a 	smulbb	r6, r6, sl
 801f558:	9814      	ldr	r0, [sp, #80]	@ 0x50
 801f55a:	fb1b fb0a 	smulbb	fp, fp, sl
 801f55e:	fb07 6705 	mla	r7, r7, r5, r6
 801f562:	10e6      	asrs	r6, r4, #3
 801f564:	00e4      	lsls	r4, r4, #3
 801f566:	4402      	add	r2, r0
 801f568:	f006 06fc 	and.w	r6, r6, #252	@ 0xfc
 801f56c:	b2bf      	uxth	r7, r7
 801f56e:	b2e4      	uxtb	r4, r4
 801f570:	fb06 b605 	mla	r6, r6, r5, fp
 801f574:	fb14 f405 	smulbb	r4, r4, r5
 801f578:	b2b6      	uxth	r6, r6
 801f57a:	fb0e 4e0a 	mla	lr, lr, sl, r4
 801f57e:	1c7c      	adds	r4, r7, #1
 801f580:	f106 0b01 	add.w	fp, r6, #1
 801f584:	fa1f fe8e 	uxth.w	lr, lr
 801f588:	eb04 2717 	add.w	r7, r4, r7, lsr #8
 801f58c:	f10e 0401 	add.w	r4, lr, #1
 801f590:	eb0b 2b16 	add.w	fp, fp, r6, lsr #8
 801f594:	f407 4778 	and.w	r7, r7, #63488	@ 0xf800
 801f598:	eb04 241e 	add.w	r4, r4, lr, lsr #8
 801f59c:	ea4f 1b5b 	mov.w	fp, fp, lsr #5
 801f5a0:	f3c4 24c4 	ubfx	r4, r4, #11, #5
 801f5a4:	f40b 6bfc 	and.w	fp, fp, #2016	@ 0x7e0
 801f5a8:	4327      	orrs	r7, r4
 801f5aa:	ea47 070b 	orr.w	r7, r7, fp
 801f5ae:	f829 7b02 	strh.w	r7, [r9], #2
 801f5b2:	e7af      	b.n	801f514 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xae>
 801f5b4:	f04f 0e00 	mov.w	lr, #0
 801f5b8:	f8bd 900c 	ldrh.w	r9, [sp, #12]
 801f5bc:	eb03 040e 	add.w	r4, r3, lr
 801f5c0:	2c00      	cmp	r4, #0
 801f5c2:	dc43      	bgt.n	801f64c <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1e6>
 801f5c4:	9a00      	ldr	r2, [sp, #0]
 801f5c6:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 801f5ca:	eb02 0343 	add.w	r3, r2, r3, lsl #1
 801f5ce:	9300      	str	r3, [sp, #0]
 801f5d0:	9b02      	ldr	r3, [sp, #8]
 801f5d2:	2b00      	cmp	r3, #0
 801f5d4:	f340 8098 	ble.w	801f708 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2a2>
 801f5d8:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 801f5dc:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 801f5de:	ee30 0a04 	vadd.f32	s0, s0, s8
 801f5e2:	ee70 0aa4 	vadd.f32	s1, s1, s9
 801f5e6:	eef0 6a62 	vmov.f32	s13, s5
 801f5ea:	eec7 7a00 	vdiv.f32	s15, s14, s0
 801f5ee:	ee31 1a05 	vadd.f32	s2, s2, s10
 801f5f2:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 801f5f6:	edcd 6a11 	vstr	s13, [sp, #68]	@ 0x44
 801f5fa:	eef0 6a43 	vmov.f32	s13, s6
 801f5fe:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 801f602:	edcd 6a12 	vstr	s13, [sp, #72]	@ 0x48
 801f606:	ee20 7aa7 	vmul.f32	s14, s1, s15
 801f60a:	ee61 7a27 	vmul.f32	s15, s2, s15
 801f60e:	ee77 2a62 	vsub.f32	s5, s14, s5
 801f612:	ee37 3ac3 	vsub.f32	s6, s15, s6
 801f616:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 801f61a:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 801f61e:	ee12 2a90 	vmov	r2, s5
 801f622:	eef0 2a47 	vmov.f32	s5, s14
 801f626:	fb92 f3f3 	sdiv	r3, r2, r3
 801f62a:	ee13 2a10 	vmov	r2, s6
 801f62e:	9313      	str	r3, [sp, #76]	@ 0x4c
 801f630:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 801f632:	eeb0 3a67 	vmov.f32	s6, s15
 801f636:	fb92 f3f3 	sdiv	r3, r2, r3
 801f63a:	9314      	str	r3, [sp, #80]	@ 0x50
 801f63c:	9b02      	ldr	r3, [sp, #8]
 801f63e:	9a05      	ldr	r2, [sp, #20]
 801f640:	3b01      	subs	r3, #1
 801f642:	9302      	str	r3, [sp, #8]
 801f644:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 801f646:	bf08      	it	eq
 801f648:	4613      	moveq	r3, r2
 801f64a:	e72a      	b.n	801f4a2 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3c>
 801f64c:	140f      	asrs	r7, r1, #16
 801f64e:	d454      	bmi.n	801f6fa <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x294>
 801f650:	f8dc 6008 	ldr.w	r6, [ip, #8]
 801f654:	42be      	cmp	r6, r7
 801f656:	dd50      	ble.n	801f6fa <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x294>
 801f658:	ea5f 4822 	movs.w	r8, r2, asr #16
 801f65c:	d44d      	bmi.n	801f6fa <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x294>
 801f65e:	f8dc 400c 	ldr.w	r4, [ip, #12]
 801f662:	4544      	cmp	r4, r8
 801f664:	dd49      	ble.n	801f6fa <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x294>
 801f666:	9c04      	ldr	r4, [sp, #16]
 801f668:	b236      	sxth	r6, r6
 801f66a:	f06f 0001 	mvn.w	r0, #1
 801f66e:	fb08 4606 	mla	r6, r8, r6, r4
 801f672:	9c01      	ldr	r4, [sp, #4]
 801f674:	fb00 fa0e 	mul.w	sl, r0, lr
 801f678:	9800      	ldr	r0, [sp, #0]
 801f67a:	f816 8007 	ldrb.w	r8, [r6, r7]
 801f67e:	eb08 0848 	add.w	r8, r8, r8, lsl #1
 801f682:	eb04 0b08 	add.w	fp, r4, r8
 801f686:	f830 400a 	ldrh.w	r4, [r0, sl]
 801f68a:	9801      	ldr	r0, [sp, #4]
 801f68c:	f89b 6002 	ldrb.w	r6, [fp, #2]
 801f690:	1227      	asrs	r7, r4, #8
 801f692:	f89b b001 	ldrb.w	fp, [fp, #1]
 801f696:	fb16 f609 	smulbb	r6, r6, r9
 801f69a:	f007 07f8 	and.w	r7, r7, #248	@ 0xf8
 801f69e:	f810 8008 	ldrb.w	r8, [r0, r8]
 801f6a2:	fb1b fb09 	smulbb	fp, fp, r9
 801f6a6:	fb07 6705 	mla	r7, r7, r5, r6
 801f6aa:	10e6      	asrs	r6, r4, #3
 801f6ac:	00e4      	lsls	r4, r4, #3
 801f6ae:	9800      	ldr	r0, [sp, #0]
 801f6b0:	f006 06fc 	and.w	r6, r6, #252	@ 0xfc
 801f6b4:	b2bf      	uxth	r7, r7
 801f6b6:	b2e4      	uxtb	r4, r4
 801f6b8:	fb06 b605 	mla	r6, r6, r5, fp
 801f6bc:	fb14 f405 	smulbb	r4, r4, r5
 801f6c0:	b2b6      	uxth	r6, r6
 801f6c2:	fb08 4809 	mla	r8, r8, r9, r4
 801f6c6:	1c7c      	adds	r4, r7, #1
 801f6c8:	f106 0b01 	add.w	fp, r6, #1
 801f6cc:	fa1f f888 	uxth.w	r8, r8
 801f6d0:	eb04 2717 	add.w	r7, r4, r7, lsr #8
 801f6d4:	f108 0401 	add.w	r4, r8, #1
 801f6d8:	eb0b 2b16 	add.w	fp, fp, r6, lsr #8
 801f6dc:	f407 4778 	and.w	r7, r7, #63488	@ 0xf800
 801f6e0:	eb04 2418 	add.w	r4, r4, r8, lsr #8
 801f6e4:	ea4f 1b5b 	mov.w	fp, fp, lsr #5
 801f6e8:	f3c4 24c4 	ubfx	r4, r4, #11, #5
 801f6ec:	f40b 6bfc 	and.w	fp, fp, #2016	@ 0x7e0
 801f6f0:	4327      	orrs	r7, r4
 801f6f2:	ea47 070b 	orr.w	r7, r7, fp
 801f6f6:	f820 700a 	strh.w	r7, [r0, sl]
 801f6fa:	9813      	ldr	r0, [sp, #76]	@ 0x4c
 801f6fc:	f10e 3eff 	add.w	lr, lr, #4294967295
 801f700:	4401      	add	r1, r0
 801f702:	9814      	ldr	r0, [sp, #80]	@ 0x50
 801f704:	4402      	add	r2, r0
 801f706:	e759      	b.n	801f5bc <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x156>
 801f708:	b007      	add	sp, #28
 801f70a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	...

0801f710 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 801f710:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801f714:	b085      	sub	sp, #20
 801f716:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 801f71a:	9e13      	ldr	r6, [sp, #76]	@ 0x4c
 801f71c:	9d16      	ldr	r5, [sp, #88]	@ 0x58
 801f71e:	9203      	str	r2, [sp, #12]
 801f720:	6870      	ldr	r0, [r6, #4]
 801f722:	686f      	ldr	r7, [r5, #4]
 801f724:	f8dd c044 	ldr.w	ip, [sp, #68]	@ 0x44
 801f728:	3704      	adds	r7, #4
 801f72a:	9101      	str	r1, [sp, #4]
 801f72c:	e9dd 2414 	ldrd	r2, r4, [sp, #80]	@ 0x50
 801f730:	fb00 2404 	mla	r4, r0, r4, r2
 801f734:	6832      	ldr	r2, [r6, #0]
 801f736:	eb02 0444 	add.w	r4, r2, r4, lsl #1
 801f73a:	682a      	ldr	r2, [r5, #0]
 801f73c:	9202      	str	r2, [sp, #8]
 801f73e:	9a01      	ldr	r2, [sp, #4]
 801f740:	2a00      	cmp	r2, #0
 801f742:	dc03      	bgt.n	801f74c <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3c>
 801f744:	9a03      	ldr	r2, [sp, #12]
 801f746:	2a00      	cmp	r2, #0
 801f748:	f340 80cc 	ble.w	801f8e4 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1d4>
 801f74c:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 801f74e:	f9b5 9008 	ldrsh.w	r9, [r5, #8]
 801f752:	f502 4000 	add.w	r0, r2, #32768	@ 0x8000
 801f756:	9a10      	ldr	r2, [sp, #64]	@ 0x40
 801f758:	f9b5 800c 	ldrsh.w	r8, [r5, #12]
 801f75c:	f502 4200 	add.w	r2, r2, #32768	@ 0x8000
 801f760:	2b00      	cmp	r3, #0
 801f762:	dd0d      	ble.n	801f780 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x70>
 801f764:	1406      	asrs	r6, r0, #16
 801f766:	d405      	bmi.n	801f774 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x64>
 801f768:	454e      	cmp	r6, r9
 801f76a:	da03      	bge.n	801f774 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x64>
 801f76c:	1416      	asrs	r6, r2, #16
 801f76e:	d401      	bmi.n	801f774 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x64>
 801f770:	4546      	cmp	r6, r8
 801f772:	db06      	blt.n	801f782 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x72>
 801f774:	9e12      	ldr	r6, [sp, #72]	@ 0x48
 801f776:	4460      	add	r0, ip
 801f778:	3b01      	subs	r3, #1
 801f77a:	3402      	adds	r4, #2
 801f77c:	4432      	add	r2, r6
 801f77e:	e7ef      	b.n	801f760 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x50>
 801f780:	d00f      	beq.n	801f7a2 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x92>
 801f782:	1e5e      	subs	r6, r3, #1
 801f784:	fb0c 0e06 	mla	lr, ip, r6, r0
 801f788:	ea5f 4e2e 	movs.w	lr, lr, asr #16
 801f78c:	d543      	bpl.n	801f816 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x106>
 801f78e:	4698      	mov	r8, r3
 801f790:	eb04 0a43 	add.w	sl, r4, r3, lsl #1
 801f794:	f1b8 0f00 	cmp.w	r8, #0
 801f798:	dc71      	bgt.n	801f87e <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x16e>
 801f79a:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 801f79e:	eb04 0443 	add.w	r4, r4, r3, lsl #1
 801f7a2:	9b01      	ldr	r3, [sp, #4]
 801f7a4:	2b00      	cmp	r3, #0
 801f7a6:	f340 809d 	ble.w	801f8e4 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1d4>
 801f7aa:	ee30 0a04 	vadd.f32	s0, s0, s8
 801f7ae:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 801f7b0:	ee70 0aa4 	vadd.f32	s1, s1, s9
 801f7b4:	eeb0 6a62 	vmov.f32	s12, s5
 801f7b8:	eec6 7a80 	vdiv.f32	s15, s13, s0
 801f7bc:	ee31 1a05 	vadd.f32	s2, s2, s10
 801f7c0:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 801f7c4:	ed8d 6a0f 	vstr	s12, [sp, #60]	@ 0x3c
 801f7c8:	eeb0 6a43 	vmov.f32	s12, s6
 801f7cc:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 801f7d0:	ed8d 6a10 	vstr	s12, [sp, #64]	@ 0x40
 801f7d4:	ee20 7aa7 	vmul.f32	s14, s1, s15
 801f7d8:	ee61 7a27 	vmul.f32	s15, s2, s15
 801f7dc:	ee77 2a62 	vsub.f32	s5, s14, s5
 801f7e0:	ee37 3ac3 	vsub.f32	s6, s15, s6
 801f7e4:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 801f7e8:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 801f7ec:	ee12 2a90 	vmov	r2, s5
 801f7f0:	eef0 2a47 	vmov.f32	s5, s14
 801f7f4:	fb92 fcf3 	sdiv	ip, r2, r3
 801f7f8:	ee13 2a10 	vmov	r2, s6
 801f7fc:	eeb0 3a67 	vmov.f32	s6, s15
 801f800:	fb92 f3f3 	sdiv	r3, r2, r3
 801f804:	9312      	str	r3, [sp, #72]	@ 0x48
 801f806:	9b01      	ldr	r3, [sp, #4]
 801f808:	9a03      	ldr	r2, [sp, #12]
 801f80a:	3b01      	subs	r3, #1
 801f80c:	9301      	str	r3, [sp, #4]
 801f80e:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 801f810:	bf08      	it	eq
 801f812:	4613      	moveq	r3, r2
 801f814:	e793      	b.n	801f73e <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2e>
 801f816:	45ce      	cmp	lr, r9
 801f818:	dab9      	bge.n	801f78e <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7e>
 801f81a:	9912      	ldr	r1, [sp, #72]	@ 0x48
 801f81c:	fb01 2606 	mla	r6, r1, r6, r2
 801f820:	1436      	asrs	r6, r6, #16
 801f822:	d4b4      	bmi.n	801f78e <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7e>
 801f824:	4546      	cmp	r6, r8
 801f826:	dab2      	bge.n	801f78e <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7e>
 801f828:	4698      	mov	r8, r3
 801f82a:	46a2      	mov	sl, r4
 801f82c:	f1b8 0f00 	cmp.w	r8, #0
 801f830:	ddb3      	ble.n	801f79a <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8a>
 801f832:	f9b5 9008 	ldrsh.w	r9, [r5, #8]
 801f836:	1416      	asrs	r6, r2, #16
 801f838:	9902      	ldr	r1, [sp, #8]
 801f83a:	ea4f 4e20 	mov.w	lr, r0, asr #16
 801f83e:	f108 38ff 	add.w	r8, r8, #4294967295
 801f842:	4460      	add	r0, ip
 801f844:	fb09 1606 	mla	r6, r9, r6, r1
 801f848:	4928      	ldr	r1, [pc, #160]	@ (801f8ec <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1dc>)
 801f84a:	f816 e00e 	ldrb.w	lr, [r6, lr]
 801f84e:	eb0e 0e4e 	add.w	lr, lr, lr, lsl #1
 801f852:	eb07 0b0e 	add.w	fp, r7, lr
 801f856:	f89b 6001 	ldrb.w	r6, [fp, #1]
 801f85a:	f89b 9002 	ldrb.w	r9, [fp, #2]
 801f85e:	00f6      	lsls	r6, r6, #3
 801f860:	ea01 2909 	and.w	r9, r1, r9, lsl #8
 801f864:	9912      	ldr	r1, [sp, #72]	@ 0x48
 801f866:	f406 66fc 	and.w	r6, r6, #2016	@ 0x7e0
 801f86a:	440a      	add	r2, r1
 801f86c:	ea49 0606 	orr.w	r6, r9, r6
 801f870:	f817 900e 	ldrb.w	r9, [r7, lr]
 801f874:	ea46 06d9 	orr.w	r6, r6, r9, lsr #3
 801f878:	f82a 6b02 	strh.w	r6, [sl], #2
 801f87c:	e7d6      	b.n	801f82c <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x11c>
 801f87e:	ea5f 4920 	movs.w	r9, r0, asr #16
 801f882:	d429      	bmi.n	801f8d8 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1c8>
 801f884:	68ae      	ldr	r6, [r5, #8]
 801f886:	454e      	cmp	r6, r9
 801f888:	dd26      	ble.n	801f8d8 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1c8>
 801f88a:	ea5f 4b22 	movs.w	fp, r2, asr #16
 801f88e:	d423      	bmi.n	801f8d8 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1c8>
 801f890:	68e9      	ldr	r1, [r5, #12]
 801f892:	4559      	cmp	r1, fp
 801f894:	dd20      	ble.n	801f8d8 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1c8>
 801f896:	fa0f fe86 	sxth.w	lr, r6
 801f89a:	9902      	ldr	r1, [sp, #8]
 801f89c:	fb0b 1e0e 	mla	lr, fp, lr, r1
 801f8a0:	f06f 0101 	mvn.w	r1, #1
 801f8a4:	f81e e009 	ldrb.w	lr, [lr, r9]
 801f8a8:	fb01 f908 	mul.w	r9, r1, r8
 801f8ac:	f2a1 71fe 	subw	r1, r1, #2046	@ 0x7fe
 801f8b0:	eb0e 0e4e 	add.w	lr, lr, lr, lsl #1
 801f8b4:	eb07 060e 	add.w	r6, r7, lr
 801f8b8:	f896 b002 	ldrb.w	fp, [r6, #2]
 801f8bc:	7876      	ldrb	r6, [r6, #1]
 801f8be:	ea01 2b0b 	and.w	fp, r1, fp, lsl #8
 801f8c2:	00f6      	lsls	r6, r6, #3
 801f8c4:	f406 66fc 	and.w	r6, r6, #2016	@ 0x7e0
 801f8c8:	ea4b 0606 	orr.w	r6, fp, r6
 801f8cc:	f817 b00e 	ldrb.w	fp, [r7, lr]
 801f8d0:	ea46 06db 	orr.w	r6, r6, fp, lsr #3
 801f8d4:	f82a 6009 	strh.w	r6, [sl, r9]
 801f8d8:	9912      	ldr	r1, [sp, #72]	@ 0x48
 801f8da:	4460      	add	r0, ip
 801f8dc:	f108 38ff 	add.w	r8, r8, #4294967295
 801f8e0:	440a      	add	r2, r1
 801f8e2:	e757      	b.n	801f794 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x84>
 801f8e4:	b005      	add	sp, #20
 801f8e6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801f8ea:	bf00      	nop
 801f8ec:	fffff800 	.word	0xfffff800

0801f8f0 <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 801f8f0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801f8f4:	b087      	sub	sp, #28
 801f8f6:	468b      	mov	fp, r1
 801f8f8:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 801f8fc:	9815      	ldr	r0, [sp, #84]	@ 0x54
 801f8fe:	9204      	str	r2, [sp, #16]
 801f900:	f89d 2064 	ldrb.w	r2, [sp, #100]	@ 0x64
 801f904:	6841      	ldr	r1, [r0, #4]
 801f906:	9205      	str	r2, [sp, #20]
 801f908:	f8dd c060 	ldr.w	ip, [sp, #96]	@ 0x60
 801f90c:	e9dd 2416 	ldrd	r2, r4, [sp, #88]	@ 0x58
 801f910:	fb01 2404 	mla	r4, r1, r4, r2
 801f914:	6802      	ldr	r2, [r0, #0]
 801f916:	eb02 0444 	add.w	r4, r2, r4, lsl #1
 801f91a:	f8dc 2000 	ldr.w	r2, [ip]
 801f91e:	9201      	str	r2, [sp, #4]
 801f920:	f8dc 2004 	ldr.w	r2, [ip, #4]
 801f924:	3204      	adds	r2, #4
 801f926:	9202      	str	r2, [sp, #8]
 801f928:	f1bb 0f00 	cmp.w	fp, #0
 801f92c:	dc03      	bgt.n	801f936 <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x46>
 801f92e:	9a04      	ldr	r2, [sp, #16]
 801f930:	2a00      	cmp	r2, #0
 801f932:	f340 8138 	ble.w	801fba6 <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2b6>
 801f936:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 801f938:	f9bc 7008 	ldrsh.w	r7, [ip, #8]
 801f93c:	f502 4000 	add.w	r0, r2, #32768	@ 0x8000
 801f940:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 801f942:	f9bc 600c 	ldrsh.w	r6, [ip, #12]
 801f946:	f502 4100 	add.w	r1, r2, #32768	@ 0x8000
 801f94a:	2b00      	cmp	r3, #0
 801f94c:	dd0e      	ble.n	801f96c <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7c>
 801f94e:	1402      	asrs	r2, r0, #16
 801f950:	d405      	bmi.n	801f95e <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6e>
 801f952:	42ba      	cmp	r2, r7
 801f954:	da03      	bge.n	801f95e <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6e>
 801f956:	140a      	asrs	r2, r1, #16
 801f958:	d401      	bmi.n	801f95e <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6e>
 801f95a:	42b2      	cmp	r2, r6
 801f95c:	db07      	blt.n	801f96e <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7e>
 801f95e:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 801f960:	3b01      	subs	r3, #1
 801f962:	3402      	adds	r4, #2
 801f964:	4410      	add	r0, r2
 801f966:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 801f968:	4411      	add	r1, r2
 801f96a:	e7ee      	b.n	801f94a <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5a>
 801f96c:	d019      	beq.n	801f9a2 <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xb2>
 801f96e:	1e5a      	subs	r2, r3, #1
 801f970:	9d13      	ldr	r5, [sp, #76]	@ 0x4c
 801f972:	fb05 0502 	mla	r5, r5, r2, r0
 801f976:	142d      	asrs	r5, r5, #16
 801f978:	d409      	bmi.n	801f98e <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x9e>
 801f97a:	42bd      	cmp	r5, r7
 801f97c:	da07      	bge.n	801f98e <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x9e>
 801f97e:	9d14      	ldr	r5, [sp, #80]	@ 0x50
 801f980:	fb05 1202 	mla	r2, r5, r2, r1
 801f984:	1412      	asrs	r2, r2, #16
 801f986:	d402      	bmi.n	801f98e <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x9e>
 801f988:	42b2      	cmp	r2, r6
 801f98a:	f2c0 80ac 	blt.w	801fae6 <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1f6>
 801f98e:	f04f 0e00 	mov.w	lr, #0
 801f992:	eb03 020e 	add.w	r2, r3, lr
 801f996:	2a00      	cmp	r2, #0
 801f998:	dc3e      	bgt.n	801fa18 <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x128>
 801f99a:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 801f99e:	eb04 0443 	add.w	r4, r4, r3, lsl #1
 801f9a2:	f1bb 0f00 	cmp.w	fp, #0
 801f9a6:	f340 80fe 	ble.w	801fba6 <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2b6>
 801f9aa:	ee30 0a04 	vadd.f32	s0, s0, s8
 801f9ae:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 801f9b0:	ee70 0aa4 	vadd.f32	s1, s1, s9
 801f9b4:	f1bb 0b01 	subs.w	fp, fp, #1
 801f9b8:	eeb0 6a62 	vmov.f32	s12, s5
 801f9bc:	eec6 7a80 	vdiv.f32	s15, s13, s0
 801f9c0:	ee31 1a05 	vadd.f32	s2, s2, s10
 801f9c4:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 801f9c8:	ed8d 6a11 	vstr	s12, [sp, #68]	@ 0x44
 801f9cc:	eeb0 6a43 	vmov.f32	s12, s6
 801f9d0:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 801f9d4:	ed8d 6a12 	vstr	s12, [sp, #72]	@ 0x48
 801f9d8:	ee20 7aa7 	vmul.f32	s14, s1, s15
 801f9dc:	ee61 7a27 	vmul.f32	s15, s2, s15
 801f9e0:	ee77 2a62 	vsub.f32	s5, s14, s5
 801f9e4:	ee37 3ac3 	vsub.f32	s6, s15, s6
 801f9e8:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 801f9ec:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 801f9f0:	ee12 2a90 	vmov	r2, s5
 801f9f4:	eef0 2a47 	vmov.f32	s5, s14
 801f9f8:	fb92 f3f3 	sdiv	r3, r2, r3
 801f9fc:	ee13 2a10 	vmov	r2, s6
 801fa00:	9313      	str	r3, [sp, #76]	@ 0x4c
 801fa02:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 801fa04:	eeb0 3a67 	vmov.f32	s6, s15
 801fa08:	fb92 f3f3 	sdiv	r3, r2, r3
 801fa0c:	9a04      	ldr	r2, [sp, #16]
 801fa0e:	9314      	str	r3, [sp, #80]	@ 0x50
 801fa10:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 801fa12:	bf08      	it	eq
 801fa14:	4613      	moveq	r3, r2
 801fa16:	e787      	b.n	801f928 <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x38>
 801fa18:	1406      	asrs	r6, r0, #16
 801fa1a:	d45d      	bmi.n	801fad8 <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1e8>
 801fa1c:	f8dc 5008 	ldr.w	r5, [ip, #8]
 801fa20:	42b5      	cmp	r5, r6
 801fa22:	dd59      	ble.n	801fad8 <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1e8>
 801fa24:	140f      	asrs	r7, r1, #16
 801fa26:	d457      	bmi.n	801fad8 <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1e8>
 801fa28:	f8dc 200c 	ldr.w	r2, [ip, #12]
 801fa2c:	42ba      	cmp	r2, r7
 801fa2e:	dd53      	ble.n	801fad8 <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1e8>
 801fa30:	9a01      	ldr	r2, [sp, #4]
 801fa32:	b22d      	sxth	r5, r5
 801fa34:	fb07 2505 	mla	r5, r7, r5, r2
 801fa38:	5daa      	ldrb	r2, [r5, r6]
 801fa3a:	9d02      	ldr	r5, [sp, #8]
 801fa3c:	f855 5022 	ldr.w	r5, [r5, r2, lsl #2]
 801fa40:	0e2e      	lsrs	r6, r5, #24
 801fa42:	d049      	beq.n	801fad8 <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1e8>
 801fa44:	f06f 0201 	mvn.w	r2, #1
 801fa48:	f3c5 2a07 	ubfx	sl, r5, #8, #8
 801fa4c:	fb02 f20e 	mul.w	r2, r2, lr
 801fa50:	f834 8002 	ldrh.w	r8, [r4, r2]
 801fa54:	9203      	str	r2, [sp, #12]
 801fa56:	9a05      	ldr	r2, [sp, #20]
 801fa58:	ea4f 2728 	mov.w	r7, r8, asr #8
 801fa5c:	4356      	muls	r6, r2
 801fa5e:	f007 07f8 	and.w	r7, r7, #248	@ 0xf8
 801fa62:	1c72      	adds	r2, r6, #1
 801fa64:	eb02 2226 	add.w	r2, r2, r6, asr #8
 801fa68:	f3c5 4607 	ubfx	r6, r5, #16, #8
 801fa6c:	b2ed      	uxtb	r5, r5
 801fa6e:	1212      	asrs	r2, r2, #8
 801fa70:	fa1f f982 	uxth.w	r9, r2
 801fa74:	43d2      	mvns	r2, r2
 801fa76:	fb16 f609 	smulbb	r6, r6, r9
 801fa7a:	b2d2      	uxtb	r2, r2
 801fa7c:	fb15 f509 	smulbb	r5, r5, r9
 801fa80:	fb07 6702 	mla	r7, r7, r2, r6
 801fa84:	ea4f 06e8 	mov.w	r6, r8, asr #3
 801fa88:	fb1a fa09 	smulbb	sl, sl, r9
 801fa8c:	ea4f 08c8 	mov.w	r8, r8, lsl #3
 801fa90:	b2bf      	uxth	r7, r7
 801fa92:	f006 06fc 	and.w	r6, r6, #252	@ 0xfc
 801fa96:	fa5f f888 	uxtb.w	r8, r8
 801fa9a:	fb06 a602 	mla	r6, r6, r2, sl
 801fa9e:	fb08 5502 	mla	r5, r8, r2, r5
 801faa2:	1c7a      	adds	r2, r7, #1
 801faa4:	b2b6      	uxth	r6, r6
 801faa6:	b2ad      	uxth	r5, r5
 801faa8:	eb02 2717 	add.w	r7, r2, r7, lsr #8
 801faac:	9a03      	ldr	r2, [sp, #12]
 801faae:	f105 0a01 	add.w	sl, r5, #1
 801fab2:	f407 4778 	and.w	r7, r7, #63488	@ 0xf800
 801fab6:	eb0a 2a15 	add.w	sl, sl, r5, lsr #8
 801faba:	f3ca 2ac4 	ubfx	sl, sl, #11, #5
 801fabe:	ea4a 0707 	orr.w	r7, sl, r7
 801fac2:	f106 0a01 	add.w	sl, r6, #1
 801fac6:	eb0a 2a16 	add.w	sl, sl, r6, lsr #8
 801faca:	ea4f 1a5a 	mov.w	sl, sl, lsr #5
 801face:	f40a 6afc 	and.w	sl, sl, #2016	@ 0x7e0
 801fad2:	ea47 070a 	orr.w	r7, r7, sl
 801fad6:	52a7      	strh	r7, [r4, r2]
 801fad8:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 801fada:	f10e 3eff 	add.w	lr, lr, #4294967295
 801fade:	4410      	add	r0, r2
 801fae0:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 801fae2:	4411      	add	r1, r2
 801fae4:	e755      	b.n	801f992 <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa2>
 801fae6:	f04f 0800 	mov.w	r8, #0
 801faea:	eba3 0208 	sub.w	r2, r3, r8
 801faee:	2a00      	cmp	r2, #0
 801faf0:	f77f af53 	ble.w	801f99a <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xaa>
 801faf4:	f9bc 6008 	ldrsh.w	r6, [ip, #8]
 801faf8:	140a      	asrs	r2, r1, #16
 801fafa:	9f01      	ldr	r7, [sp, #4]
 801fafc:	1405      	asrs	r5, r0, #16
 801fafe:	fb06 7202 	mla	r2, r6, r2, r7
 801fb02:	5d52      	ldrb	r2, [r2, r5]
 801fb04:	9d02      	ldr	r5, [sp, #8]
 801fb06:	f855 5022 	ldr.w	r5, [r5, r2, lsl #2]
 801fb0a:	0e2e      	lsrs	r6, r5, #24
 801fb0c:	d044      	beq.n	801fb98 <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2a8>
 801fb0e:	9a05      	ldr	r2, [sp, #20]
 801fb10:	f3c5 2a07 	ubfx	sl, r5, #8, #8
 801fb14:	f834 e018 	ldrh.w	lr, [r4, r8, lsl #1]
 801fb18:	4356      	muls	r6, r2
 801fb1a:	ea4f 272e 	mov.w	r7, lr, asr #8
 801fb1e:	1c72      	adds	r2, r6, #1
 801fb20:	f007 07f8 	and.w	r7, r7, #248	@ 0xf8
 801fb24:	eb02 2226 	add.w	r2, r2, r6, asr #8
 801fb28:	f3c5 4607 	ubfx	r6, r5, #16, #8
 801fb2c:	b2ed      	uxtb	r5, r5
 801fb2e:	1212      	asrs	r2, r2, #8
 801fb30:	fa1f f982 	uxth.w	r9, r2
 801fb34:	43d2      	mvns	r2, r2
 801fb36:	fb16 f609 	smulbb	r6, r6, r9
 801fb3a:	b2d2      	uxtb	r2, r2
 801fb3c:	fb15 f509 	smulbb	r5, r5, r9
 801fb40:	fb07 6702 	mla	r7, r7, r2, r6
 801fb44:	ea4f 06ee 	mov.w	r6, lr, asr #3
 801fb48:	fb1a fa09 	smulbb	sl, sl, r9
 801fb4c:	ea4f 0ece 	mov.w	lr, lr, lsl #3
 801fb50:	b2bf      	uxth	r7, r7
 801fb52:	f006 06fc 	and.w	r6, r6, #252	@ 0xfc
 801fb56:	fa5f fe8e 	uxtb.w	lr, lr
 801fb5a:	fb06 a602 	mla	r6, r6, r2, sl
 801fb5e:	fb0e 5502 	mla	r5, lr, r2, r5
 801fb62:	1c7a      	adds	r2, r7, #1
 801fb64:	b2b6      	uxth	r6, r6
 801fb66:	b2ad      	uxth	r5, r5
 801fb68:	eb02 2717 	add.w	r7, r2, r7, lsr #8
 801fb6c:	f105 0a01 	add.w	sl, r5, #1
 801fb70:	f407 4778 	and.w	r7, r7, #63488	@ 0xf800
 801fb74:	eb0a 2a15 	add.w	sl, sl, r5, lsr #8
 801fb78:	f3ca 2ac4 	ubfx	sl, sl, #11, #5
 801fb7c:	ea4a 0707 	orr.w	r7, sl, r7
 801fb80:	f106 0a01 	add.w	sl, r6, #1
 801fb84:	eb0a 2a16 	add.w	sl, sl, r6, lsr #8
 801fb88:	ea4f 1a5a 	mov.w	sl, sl, lsr #5
 801fb8c:	f40a 6afc 	and.w	sl, sl, #2016	@ 0x7e0
 801fb90:	ea47 070a 	orr.w	r7, r7, sl
 801fb94:	f824 7018 	strh.w	r7, [r4, r8, lsl #1]
 801fb98:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 801fb9a:	f108 0801 	add.w	r8, r8, #1
 801fb9e:	4410      	add	r0, r2
 801fba0:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 801fba2:	4411      	add	r1, r2
 801fba4:	e7a1      	b.n	801faea <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1fa>
 801fba6:	b007      	add	sp, #28
 801fba8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0801fbac <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 801fbac:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801fbb0:	b085      	sub	sp, #20
 801fbb2:	468b      	mov	fp, r1
 801fbb4:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 801fbb8:	9813      	ldr	r0, [sp, #76]	@ 0x4c
 801fbba:	9203      	str	r2, [sp, #12]
 801fbbc:	6841      	ldr	r1, [r0, #4]
 801fbbe:	f8dd e058 	ldr.w	lr, [sp, #88]	@ 0x58
 801fbc2:	e9dd 2414 	ldrd	r2, r4, [sp, #80]	@ 0x50
 801fbc6:	fb01 2404 	mla	r4, r1, r4, r2
 801fbca:	6802      	ldr	r2, [r0, #0]
 801fbcc:	eb02 0444 	add.w	r4, r2, r4, lsl #1
 801fbd0:	f8de 2000 	ldr.w	r2, [lr]
 801fbd4:	9200      	str	r2, [sp, #0]
 801fbd6:	f8de 2004 	ldr.w	r2, [lr, #4]
 801fbda:	3204      	adds	r2, #4
 801fbdc:	9201      	str	r2, [sp, #4]
 801fbde:	f1bb 0f00 	cmp.w	fp, #0
 801fbe2:	dc03      	bgt.n	801fbec <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x40>
 801fbe4:	9a03      	ldr	r2, [sp, #12]
 801fbe6:	2a00      	cmp	r2, #0
 801fbe8:	f340 8153 	ble.w	801fe92 <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2e6>
 801fbec:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 801fbee:	f9be 7008 	ldrsh.w	r7, [lr, #8]
 801fbf2:	f502 4100 	add.w	r1, r2, #32768	@ 0x8000
 801fbf6:	9a10      	ldr	r2, [sp, #64]	@ 0x40
 801fbf8:	f9be 600c 	ldrsh.w	r6, [lr, #12]
 801fbfc:	f502 4200 	add.w	r2, r2, #32768	@ 0x8000
 801fc00:	2b00      	cmp	r3, #0
 801fc02:	dd0e      	ble.n	801fc22 <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x76>
 801fc04:	1408      	asrs	r0, r1, #16
 801fc06:	d405      	bmi.n	801fc14 <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x68>
 801fc08:	42b8      	cmp	r0, r7
 801fc0a:	da03      	bge.n	801fc14 <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x68>
 801fc0c:	1410      	asrs	r0, r2, #16
 801fc0e:	d401      	bmi.n	801fc14 <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x68>
 801fc10:	42b0      	cmp	r0, r6
 801fc12:	db07      	blt.n	801fc24 <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x78>
 801fc14:	9811      	ldr	r0, [sp, #68]	@ 0x44
 801fc16:	3b01      	subs	r3, #1
 801fc18:	3402      	adds	r4, #2
 801fc1a:	4401      	add	r1, r0
 801fc1c:	9812      	ldr	r0, [sp, #72]	@ 0x48
 801fc1e:	4402      	add	r2, r0
 801fc20:	e7ee      	b.n	801fc00 <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x54>
 801fc22:	d017      	beq.n	801fc54 <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa8>
 801fc24:	1e58      	subs	r0, r3, #1
 801fc26:	9d11      	ldr	r5, [sp, #68]	@ 0x44
 801fc28:	fb05 1500 	mla	r5, r5, r0, r1
 801fc2c:	142d      	asrs	r5, r5, #16
 801fc2e:	d409      	bmi.n	801fc44 <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x98>
 801fc30:	42bd      	cmp	r5, r7
 801fc32:	da07      	bge.n	801fc44 <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x98>
 801fc34:	9d12      	ldr	r5, [sp, #72]	@ 0x48
 801fc36:	fb05 2000 	mla	r0, r5, r0, r2
 801fc3a:	1400      	asrs	r0, r0, #16
 801fc3c:	d402      	bmi.n	801fc44 <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x98>
 801fc3e:	42b0      	cmp	r0, r6
 801fc40:	f2c0 80bc 	blt.w	801fdbc <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x210>
 801fc44:	2600      	movs	r6, #0
 801fc46:	1998      	adds	r0, r3, r6
 801fc48:	2800      	cmp	r0, #0
 801fc4a:	dc3e      	bgt.n	801fcca <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x11e>
 801fc4c:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 801fc50:	eb04 0443 	add.w	r4, r4, r3, lsl #1
 801fc54:	f1bb 0f00 	cmp.w	fp, #0
 801fc58:	f340 811b 	ble.w	801fe92 <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2e6>
 801fc5c:	ee30 0a04 	vadd.f32	s0, s0, s8
 801fc60:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 801fc62:	ee70 0aa4 	vadd.f32	s1, s1, s9
 801fc66:	f1bb 0b01 	subs.w	fp, fp, #1
 801fc6a:	eeb0 6a62 	vmov.f32	s12, s5
 801fc6e:	eec6 7a80 	vdiv.f32	s15, s13, s0
 801fc72:	ee31 1a05 	vadd.f32	s2, s2, s10
 801fc76:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 801fc7a:	ed8d 6a0f 	vstr	s12, [sp, #60]	@ 0x3c
 801fc7e:	eeb0 6a43 	vmov.f32	s12, s6
 801fc82:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 801fc86:	ed8d 6a10 	vstr	s12, [sp, #64]	@ 0x40
 801fc8a:	ee20 7aa7 	vmul.f32	s14, s1, s15
 801fc8e:	ee61 7a27 	vmul.f32	s15, s2, s15
 801fc92:	ee77 2a62 	vsub.f32	s5, s14, s5
 801fc96:	ee37 3ac3 	vsub.f32	s6, s15, s6
 801fc9a:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 801fc9e:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 801fca2:	ee12 2a90 	vmov	r2, s5
 801fca6:	eef0 2a47 	vmov.f32	s5, s14
 801fcaa:	fb92 f3f3 	sdiv	r3, r2, r3
 801fcae:	ee13 2a10 	vmov	r2, s6
 801fcb2:	9311      	str	r3, [sp, #68]	@ 0x44
 801fcb4:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 801fcb6:	eeb0 3a67 	vmov.f32	s6, s15
 801fcba:	fb92 f3f3 	sdiv	r3, r2, r3
 801fcbe:	9a03      	ldr	r2, [sp, #12]
 801fcc0:	9312      	str	r3, [sp, #72]	@ 0x48
 801fcc2:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 801fcc4:	bf08      	it	eq
 801fcc6:	4613      	moveq	r3, r2
 801fcc8:	e789      	b.n	801fbde <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x32>
 801fcca:	140f      	asrs	r7, r1, #16
 801fccc:	d426      	bmi.n	801fd1c <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x170>
 801fcce:	f8de 5008 	ldr.w	r5, [lr, #8]
 801fcd2:	42bd      	cmp	r5, r7
 801fcd4:	dd22      	ble.n	801fd1c <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x170>
 801fcd6:	ea5f 4c22 	movs.w	ip, r2, asr #16
 801fcda:	d41f      	bmi.n	801fd1c <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x170>
 801fcdc:	f8de 000c 	ldr.w	r0, [lr, #12]
 801fce0:	4560      	cmp	r0, ip
 801fce2:	dd1b      	ble.n	801fd1c <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x170>
 801fce4:	9800      	ldr	r0, [sp, #0]
 801fce6:	b22d      	sxth	r5, r5
 801fce8:	fb0c 0505 	mla	r5, ip, r5, r0
 801fcec:	5de8      	ldrb	r0, [r5, r7]
 801fcee:	9d01      	ldr	r5, [sp, #4]
 801fcf0:	f855 0020 	ldr.w	r0, [r5, r0, lsl #2]
 801fcf4:	0e07      	lsrs	r7, r0, #24
 801fcf6:	2fff      	cmp	r7, #255	@ 0xff
 801fcf8:	d116      	bne.n	801fd28 <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x17c>
 801fcfa:	f06f 0501 	mvn.w	r5, #1
 801fcfe:	fb05 f706 	mul.w	r7, r5, r6
 801fd02:	f2a5 75fe 	subw	r5, r5, #2046	@ 0x7fe
 801fd06:	ea05 2c10 	and.w	ip, r5, r0, lsr #8
 801fd0a:	0945      	lsrs	r5, r0, #5
 801fd0c:	f3c0 00c4 	ubfx	r0, r0, #3, #5
 801fd10:	f405 65fc 	and.w	r5, r5, #2016	@ 0x7e0
 801fd14:	ea4c 0505 	orr.w	r5, ip, r5
 801fd18:	4305      	orrs	r5, r0
 801fd1a:	53e5      	strh	r5, [r4, r7]
 801fd1c:	9811      	ldr	r0, [sp, #68]	@ 0x44
 801fd1e:	3e01      	subs	r6, #1
 801fd20:	4401      	add	r1, r0
 801fd22:	9812      	ldr	r0, [sp, #72]	@ 0x48
 801fd24:	4402      	add	r2, r0
 801fd26:	e78e      	b.n	801fc46 <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x9a>
 801fd28:	b2fd      	uxtb	r5, r7
 801fd2a:	2f00      	cmp	r7, #0
 801fd2c:	d0f6      	beq.n	801fd1c <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x170>
 801fd2e:	f06f 0701 	mvn.w	r7, #1
 801fd32:	fa1f f985 	uxth.w	r9, r5
 801fd36:	43ed      	mvns	r5, r5
 801fd38:	f3c0 2a07 	ubfx	sl, r0, #8, #8
 801fd3c:	4377      	muls	r7, r6
 801fd3e:	fb1a fa09 	smulbb	sl, sl, r9
 801fd42:	b2ed      	uxtb	r5, r5
 801fd44:	f834 8007 	ldrh.w	r8, [r4, r7]
 801fd48:	9702      	str	r7, [sp, #8]
 801fd4a:	f3c0 4707 	ubfx	r7, r0, #16, #8
 801fd4e:	ea4f 2c28 	mov.w	ip, r8, asr #8
 801fd52:	fb17 f709 	smulbb	r7, r7, r9
 801fd56:	b2c0      	uxtb	r0, r0
 801fd58:	f00c 0cf8 	and.w	ip, ip, #248	@ 0xf8
 801fd5c:	fb10 f009 	smulbb	r0, r0, r9
 801fd60:	fb0c 7c05 	mla	ip, ip, r5, r7
 801fd64:	ea4f 07e8 	mov.w	r7, r8, asr #3
 801fd68:	ea4f 08c8 	mov.w	r8, r8, lsl #3
 801fd6c:	fa1f fc8c 	uxth.w	ip, ip
 801fd70:	f007 07fc 	and.w	r7, r7, #252	@ 0xfc
 801fd74:	fa5f f888 	uxtb.w	r8, r8
 801fd78:	fb07 a705 	mla	r7, r7, r5, sl
 801fd7c:	fb08 0005 	mla	r0, r8, r5, r0
 801fd80:	f10c 0501 	add.w	r5, ip, #1
 801fd84:	b2bf      	uxth	r7, r7
 801fd86:	b280      	uxth	r0, r0
 801fd88:	eb05 2c1c 	add.w	ip, r5, ip, lsr #8
 801fd8c:	f100 0a01 	add.w	sl, r0, #1
 801fd90:	f40c 4c78 	and.w	ip, ip, #63488	@ 0xf800
 801fd94:	eb0a 2a10 	add.w	sl, sl, r0, lsr #8
 801fd98:	9802      	ldr	r0, [sp, #8]
 801fd9a:	f3ca 2ac4 	ubfx	sl, sl, #11, #5
 801fd9e:	ea4a 0c0c 	orr.w	ip, sl, ip
 801fda2:	f107 0a01 	add.w	sl, r7, #1
 801fda6:	eb0a 2a17 	add.w	sl, sl, r7, lsr #8
 801fdaa:	ea4f 1a5a 	mov.w	sl, sl, lsr #5
 801fdae:	f40a 6afc 	and.w	sl, sl, #2016	@ 0x7e0
 801fdb2:	ea4c 0c0a 	orr.w	ip, ip, sl
 801fdb6:	f824 c000 	strh.w	ip, [r4, r0]
 801fdba:	e7af      	b.n	801fd1c <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x170>
 801fdbc:	f04f 0800 	mov.w	r8, #0
 801fdc0:	eba3 0008 	sub.w	r0, r3, r8
 801fdc4:	2800      	cmp	r0, #0
 801fdc6:	f77f af41 	ble.w	801fc4c <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa0>
 801fdca:	f9be 6008 	ldrsh.w	r6, [lr, #8]
 801fdce:	1410      	asrs	r0, r2, #16
 801fdd0:	9f00      	ldr	r7, [sp, #0]
 801fdd2:	140d      	asrs	r5, r1, #16
 801fdd4:	fb06 7000 	mla	r0, r6, r0, r7
 801fdd8:	5d40      	ldrb	r0, [r0, r5]
 801fdda:	9d01      	ldr	r5, [sp, #4]
 801fddc:	f855 5020 	ldr.w	r5, [r5, r0, lsl #2]
 801fde0:	0e2e      	lsrs	r6, r5, #24
 801fde2:	2eff      	cmp	r6, #255	@ 0xff
 801fde4:	d112      	bne.n	801fe0c <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x260>
 801fde6:	482c      	ldr	r0, [pc, #176]	@ (801fe98 <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2ec>)
 801fde8:	ea00 2615 	and.w	r6, r0, r5, lsr #8
 801fdec:	0968      	lsrs	r0, r5, #5
 801fdee:	f3c5 05c4 	ubfx	r5, r5, #3, #5
 801fdf2:	f400 60fc 	and.w	r0, r0, #2016	@ 0x7e0
 801fdf6:	4330      	orrs	r0, r6
 801fdf8:	4328      	orrs	r0, r5
 801fdfa:	f824 0018 	strh.w	r0, [r4, r8, lsl #1]
 801fdfe:	9811      	ldr	r0, [sp, #68]	@ 0x44
 801fe00:	f108 0801 	add.w	r8, r8, #1
 801fe04:	4401      	add	r1, r0
 801fe06:	9812      	ldr	r0, [sp, #72]	@ 0x48
 801fe08:	4402      	add	r2, r0
 801fe0a:	e7d9      	b.n	801fdc0 <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x214>
 801fe0c:	b2f0      	uxtb	r0, r6
 801fe0e:	2e00      	cmp	r6, #0
 801fe10:	d0f5      	beq.n	801fdfe <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x252>
 801fe12:	f834 c018 	ldrh.w	ip, [r4, r8, lsl #1]
 801fe16:	fa1f f980 	uxth.w	r9, r0
 801fe1a:	f3c5 4607 	ubfx	r6, r5, #16, #8
 801fe1e:	43c0      	mvns	r0, r0
 801fe20:	ea4f 272c 	mov.w	r7, ip, asr #8
 801fe24:	f3c5 2a07 	ubfx	sl, r5, #8, #8
 801fe28:	fb16 f609 	smulbb	r6, r6, r9
 801fe2c:	b2c0      	uxtb	r0, r0
 801fe2e:	f007 07f8 	and.w	r7, r7, #248	@ 0xf8
 801fe32:	b2ed      	uxtb	r5, r5
 801fe34:	fb1a fa09 	smulbb	sl, sl, r9
 801fe38:	fb07 6700 	mla	r7, r7, r0, r6
 801fe3c:	ea4f 06ec 	mov.w	r6, ip, asr #3
 801fe40:	fb15 f509 	smulbb	r5, r5, r9
 801fe44:	ea4f 0ccc 	mov.w	ip, ip, lsl #3
 801fe48:	b2bf      	uxth	r7, r7
 801fe4a:	f006 06fc 	and.w	r6, r6, #252	@ 0xfc
 801fe4e:	fa5f fc8c 	uxtb.w	ip, ip
 801fe52:	fb06 a600 	mla	r6, r6, r0, sl
 801fe56:	fb0c 5500 	mla	r5, ip, r0, r5
 801fe5a:	1c78      	adds	r0, r7, #1
 801fe5c:	b2b6      	uxth	r6, r6
 801fe5e:	b2ad      	uxth	r5, r5
 801fe60:	eb00 2717 	add.w	r7, r0, r7, lsr #8
 801fe64:	f105 0a01 	add.w	sl, r5, #1
 801fe68:	f407 4778 	and.w	r7, r7, #63488	@ 0xf800
 801fe6c:	eb0a 2a15 	add.w	sl, sl, r5, lsr #8
 801fe70:	f3ca 2ac4 	ubfx	sl, sl, #11, #5
 801fe74:	ea4a 0707 	orr.w	r7, sl, r7
 801fe78:	f106 0a01 	add.w	sl, r6, #1
 801fe7c:	eb0a 2a16 	add.w	sl, sl, r6, lsr #8
 801fe80:	ea4f 1a5a 	mov.w	sl, sl, lsr #5
 801fe84:	f40a 6afc 	and.w	sl, sl, #2016	@ 0x7e0
 801fe88:	ea47 070a 	orr.w	r7, r7, sl
 801fe8c:	f824 7018 	strh.w	r7, [r4, r8, lsl #1]
 801fe90:	e7b5      	b.n	801fdfe <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x252>
 801fe92:	b005      	add	sp, #20
 801fe94:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801fe98:	fffff800 	.word	0xfffff800

0801fe9c <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 801fe9c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801fea0:	b087      	sub	sp, #28
 801fea2:	468b      	mov	fp, r1
 801fea4:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 801fea8:	9c15      	ldr	r4, [sp, #84]	@ 0x54
 801feaa:	9204      	str	r2, [sp, #16]
 801feac:	f89d 2064 	ldrb.w	r2, [sp, #100]	@ 0x64
 801feb0:	6861      	ldr	r1, [r4, #4]
 801feb2:	9205      	str	r2, [sp, #20]
 801feb4:	f8dd e060 	ldr.w	lr, [sp, #96]	@ 0x60
 801feb8:	e9dd 2016 	ldrd	r2, r0, [sp, #88]	@ 0x58
 801febc:	fb01 2000 	mla	r0, r1, r0, r2
 801fec0:	6822      	ldr	r2, [r4, #0]
 801fec2:	eb02 0040 	add.w	r0, r2, r0, lsl #1
 801fec6:	f8de 2000 	ldr.w	r2, [lr]
 801feca:	9201      	str	r2, [sp, #4]
 801fecc:	f8de 2004 	ldr.w	r2, [lr, #4]
 801fed0:	9202      	str	r2, [sp, #8]
 801fed2:	f1bb 0f00 	cmp.w	fp, #0
 801fed6:	dc03      	bgt.n	801fee0 <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x44>
 801fed8:	9a04      	ldr	r2, [sp, #16]
 801feda:	2a00      	cmp	r2, #0
 801fedc:	f340 8142 	ble.w	8020164 <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2c8>
 801fee0:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 801fee2:	f9be 7008 	ldrsh.w	r7, [lr, #8]
 801fee6:	f502 4100 	add.w	r1, r2, #32768	@ 0x8000
 801feea:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 801feec:	f9be 600c 	ldrsh.w	r6, [lr, #12]
 801fef0:	f502 4200 	add.w	r2, r2, #32768	@ 0x8000
 801fef4:	2b00      	cmp	r3, #0
 801fef6:	dd0e      	ble.n	801ff16 <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7a>
 801fef8:	140c      	asrs	r4, r1, #16
 801fefa:	d405      	bmi.n	801ff08 <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6c>
 801fefc:	42bc      	cmp	r4, r7
 801fefe:	da03      	bge.n	801ff08 <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6c>
 801ff00:	1414      	asrs	r4, r2, #16
 801ff02:	d401      	bmi.n	801ff08 <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6c>
 801ff04:	42b4      	cmp	r4, r6
 801ff06:	db07      	blt.n	801ff18 <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7c>
 801ff08:	9c13      	ldr	r4, [sp, #76]	@ 0x4c
 801ff0a:	3b01      	subs	r3, #1
 801ff0c:	3002      	adds	r0, #2
 801ff0e:	4421      	add	r1, r4
 801ff10:	9c14      	ldr	r4, [sp, #80]	@ 0x50
 801ff12:	4422      	add	r2, r4
 801ff14:	e7ee      	b.n	801fef4 <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x58>
 801ff16:	d019      	beq.n	801ff4c <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xb0>
 801ff18:	1e5c      	subs	r4, r3, #1
 801ff1a:	9d13      	ldr	r5, [sp, #76]	@ 0x4c
 801ff1c:	fb05 1504 	mla	r5, r5, r4, r1
 801ff20:	142d      	asrs	r5, r5, #16
 801ff22:	d409      	bmi.n	801ff38 <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x9c>
 801ff24:	42bd      	cmp	r5, r7
 801ff26:	da07      	bge.n	801ff38 <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x9c>
 801ff28:	9d14      	ldr	r5, [sp, #80]	@ 0x50
 801ff2a:	fb05 2404 	mla	r4, r5, r4, r2
 801ff2e:	1424      	asrs	r4, r4, #16
 801ff30:	d402      	bmi.n	801ff38 <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x9c>
 801ff32:	42b4      	cmp	r4, r6
 801ff34:	f2c0 80b1 	blt.w	802009a <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1fe>
 801ff38:	f04f 0800 	mov.w	r8, #0
 801ff3c:	eb03 0408 	add.w	r4, r3, r8
 801ff40:	2c00      	cmp	r4, #0
 801ff42:	dc3e      	bgt.n	801ffc2 <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x126>
 801ff44:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 801ff48:	eb00 0043 	add.w	r0, r0, r3, lsl #1
 801ff4c:	f1bb 0f00 	cmp.w	fp, #0
 801ff50:	f340 8108 	ble.w	8020164 <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2c8>
 801ff54:	ee30 0a04 	vadd.f32	s0, s0, s8
 801ff58:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 801ff5a:	ee70 0aa4 	vadd.f32	s1, s1, s9
 801ff5e:	f1bb 0b01 	subs.w	fp, fp, #1
 801ff62:	eeb0 6a62 	vmov.f32	s12, s5
 801ff66:	eec6 7a80 	vdiv.f32	s15, s13, s0
 801ff6a:	ee31 1a05 	vadd.f32	s2, s2, s10
 801ff6e:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 801ff72:	ed8d 6a11 	vstr	s12, [sp, #68]	@ 0x44
 801ff76:	eeb0 6a43 	vmov.f32	s12, s6
 801ff7a:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 801ff7e:	ed8d 6a12 	vstr	s12, [sp, #72]	@ 0x48
 801ff82:	ee20 7aa7 	vmul.f32	s14, s1, s15
 801ff86:	ee61 7a27 	vmul.f32	s15, s2, s15
 801ff8a:	ee77 2a62 	vsub.f32	s5, s14, s5
 801ff8e:	ee37 3ac3 	vsub.f32	s6, s15, s6
 801ff92:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 801ff96:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 801ff9a:	ee12 2a90 	vmov	r2, s5
 801ff9e:	eef0 2a47 	vmov.f32	s5, s14
 801ffa2:	fb92 f3f3 	sdiv	r3, r2, r3
 801ffa6:	ee13 2a10 	vmov	r2, s6
 801ffaa:	9313      	str	r3, [sp, #76]	@ 0x4c
 801ffac:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 801ffae:	eeb0 3a67 	vmov.f32	s6, s15
 801ffb2:	fb92 f3f3 	sdiv	r3, r2, r3
 801ffb6:	9a04      	ldr	r2, [sp, #16]
 801ffb8:	9314      	str	r3, [sp, #80]	@ 0x50
 801ffba:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 801ffbc:	bf08      	it	eq
 801ffbe:	4613      	moveq	r3, r2
 801ffc0:	e787      	b.n	801fed2 <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x36>
 801ffc2:	140e      	asrs	r6, r1, #16
 801ffc4:	d462      	bmi.n	802008c <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1f0>
 801ffc6:	f8de 5008 	ldr.w	r5, [lr, #8]
 801ffca:	42b5      	cmp	r5, r6
 801ffcc:	dd5e      	ble.n	802008c <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1f0>
 801ffce:	1417      	asrs	r7, r2, #16
 801ffd0:	d45c      	bmi.n	802008c <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1f0>
 801ffd2:	f8de 400c 	ldr.w	r4, [lr, #12]
 801ffd6:	42bc      	cmp	r4, r7
 801ffd8:	dd58      	ble.n	802008c <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1f0>
 801ffda:	b22d      	sxth	r5, r5
 801ffdc:	9c02      	ldr	r4, [sp, #8]
 801ffde:	fb07 6505 	mla	r5, r7, r5, r6
 801ffe2:	5d66      	ldrb	r6, [r4, r5]
 801ffe4:	2e00      	cmp	r6, #0
 801ffe6:	d051      	beq.n	802008c <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1f0>
 801ffe8:	9c01      	ldr	r4, [sp, #4]
 801ffea:	f834 9015 	ldrh.w	r9, [r4, r5, lsl #1]
 801ffee:	f06f 0401 	mvn.w	r4, #1
 801fff2:	fb04 f408 	mul.w	r4, r4, r8
 801fff6:	ea4f 2c29 	mov.w	ip, r9, asr #8
 801fffa:	5b05      	ldrh	r5, [r0, r4]
 801fffc:	f00c 0cf8 	and.w	ip, ip, #248	@ 0xf8
 8020000:	9403      	str	r4, [sp, #12]
 8020002:	9c05      	ldr	r4, [sp, #20]
 8020004:	ea4f 0ae5 	mov.w	sl, r5, asr #3
 8020008:	4366      	muls	r6, r4
 802000a:	f00a 0afc 	and.w	sl, sl, #252	@ 0xfc
 802000e:	1c74      	adds	r4, r6, #1
 8020010:	eb04 2416 	add.w	r4, r4, r6, lsr #8
 8020014:	122e      	asrs	r6, r5, #8
 8020016:	1224      	asrs	r4, r4, #8
 8020018:	f006 06f8 	and.w	r6, r6, #248	@ 0xf8
 802001c:	00ed      	lsls	r5, r5, #3
 802001e:	b2a7      	uxth	r7, r4
 8020020:	43e4      	mvns	r4, r4
 8020022:	b2ed      	uxtb	r5, r5
 8020024:	b2e4      	uxtb	r4, r4
 8020026:	fb16 f604 	smulbb	r6, r6, r4
 802002a:	fb15 f504 	smulbb	r5, r5, r4
 802002e:	fb0c 6c07 	mla	ip, ip, r7, r6
 8020032:	ea4f 06e9 	mov.w	r6, r9, asr #3
 8020036:	fb1a fa04 	smulbb	sl, sl, r4
 802003a:	ea4f 09c9 	mov.w	r9, r9, lsl #3
 802003e:	fa1f fc8c 	uxth.w	ip, ip
 8020042:	f006 06fc 	and.w	r6, r6, #252	@ 0xfc
 8020046:	fa5f f989 	uxtb.w	r9, r9
 802004a:	fb06 a607 	mla	r6, r6, r7, sl
 802004e:	f10c 0401 	add.w	r4, ip, #1
 8020052:	fb09 5507 	mla	r5, r9, r7, r5
 8020056:	eb04 2c1c 	add.w	ip, r4, ip, lsr #8
 802005a:	9c03      	ldr	r4, [sp, #12]
 802005c:	b2ad      	uxth	r5, r5
 802005e:	b2b6      	uxth	r6, r6
 8020060:	f40c 4c78 	and.w	ip, ip, #63488	@ 0xf800
 8020064:	f105 0a01 	add.w	sl, r5, #1
 8020068:	eb0a 2a15 	add.w	sl, sl, r5, lsr #8
 802006c:	f3ca 2ac4 	ubfx	sl, sl, #11, #5
 8020070:	ea4a 0c0c 	orr.w	ip, sl, ip
 8020074:	f106 0a01 	add.w	sl, r6, #1
 8020078:	eb0a 2a16 	add.w	sl, sl, r6, lsr #8
 802007c:	ea4f 1a5a 	mov.w	sl, sl, lsr #5
 8020080:	f40a 6afc 	and.w	sl, sl, #2016	@ 0x7e0
 8020084:	ea4c 0c0a 	orr.w	ip, ip, sl
 8020088:	f820 c004 	strh.w	ip, [r0, r4]
 802008c:	9c13      	ldr	r4, [sp, #76]	@ 0x4c
 802008e:	f108 38ff 	add.w	r8, r8, #4294967295
 8020092:	4421      	add	r1, r4
 8020094:	9c14      	ldr	r4, [sp, #80]	@ 0x50
 8020096:	4422      	add	r2, r4
 8020098:	e750      	b.n	801ff3c <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa0>
 802009a:	f04f 0900 	mov.w	r9, #0
 802009e:	eba3 0409 	sub.w	r4, r3, r9
 80200a2:	2c00      	cmp	r4, #0
 80200a4:	f77f af4e 	ble.w	801ff44 <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa8>
 80200a8:	f9be 6008 	ldrsh.w	r6, [lr, #8]
 80200ac:	140d      	asrs	r5, r1, #16
 80200ae:	1414      	asrs	r4, r2, #16
 80200b0:	fb06 5404 	mla	r4, r6, r4, r5
 80200b4:	9d02      	ldr	r5, [sp, #8]
 80200b6:	5d2e      	ldrb	r6, [r5, r4]
 80200b8:	2e00      	cmp	r6, #0
 80200ba:	d04c      	beq.n	8020156 <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2ba>
 80200bc:	9d01      	ldr	r5, [sp, #4]
 80200be:	f835 8014 	ldrh.w	r8, [r5, r4, lsl #1]
 80200c2:	9c05      	ldr	r4, [sp, #20]
 80200c4:	f830 5019 	ldrh.w	r5, [r0, r9, lsl #1]
 80200c8:	ea4f 2c28 	mov.w	ip, r8, asr #8
 80200cc:	4366      	muls	r6, r4
 80200ce:	ea4f 0ae5 	mov.w	sl, r5, asr #3
 80200d2:	f00c 0cf8 	and.w	ip, ip, #248	@ 0xf8
 80200d6:	1c74      	adds	r4, r6, #1
 80200d8:	f00a 0afc 	and.w	sl, sl, #252	@ 0xfc
 80200dc:	eb04 2416 	add.w	r4, r4, r6, lsr #8
 80200e0:	122e      	asrs	r6, r5, #8
 80200e2:	1224      	asrs	r4, r4, #8
 80200e4:	f006 06f8 	and.w	r6, r6, #248	@ 0xf8
 80200e8:	00ed      	lsls	r5, r5, #3
 80200ea:	b2a7      	uxth	r7, r4
 80200ec:	43e4      	mvns	r4, r4
 80200ee:	b2ed      	uxtb	r5, r5
 80200f0:	b2e4      	uxtb	r4, r4
 80200f2:	fb16 f604 	smulbb	r6, r6, r4
 80200f6:	fb15 f504 	smulbb	r5, r5, r4
 80200fa:	fb0c 6c07 	mla	ip, ip, r7, r6
 80200fe:	ea4f 06e8 	mov.w	r6, r8, asr #3
 8020102:	fb1a fa04 	smulbb	sl, sl, r4
 8020106:	ea4f 08c8 	mov.w	r8, r8, lsl #3
 802010a:	fa1f fc8c 	uxth.w	ip, ip
 802010e:	f006 06fc 	and.w	r6, r6, #252	@ 0xfc
 8020112:	fa5f f888 	uxtb.w	r8, r8
 8020116:	fb06 a607 	mla	r6, r6, r7, sl
 802011a:	f10c 0401 	add.w	r4, ip, #1
 802011e:	fb08 5507 	mla	r5, r8, r7, r5
 8020122:	eb04 2c1c 	add.w	ip, r4, ip, lsr #8
 8020126:	b2ad      	uxth	r5, r5
 8020128:	b2b6      	uxth	r6, r6
 802012a:	f40c 4c78 	and.w	ip, ip, #63488	@ 0xf800
 802012e:	f105 0a01 	add.w	sl, r5, #1
 8020132:	eb0a 2a15 	add.w	sl, sl, r5, lsr #8
 8020136:	f3ca 2ac4 	ubfx	sl, sl, #11, #5
 802013a:	ea4a 0c0c 	orr.w	ip, sl, ip
 802013e:	f106 0a01 	add.w	sl, r6, #1
 8020142:	eb0a 2a16 	add.w	sl, sl, r6, lsr #8
 8020146:	ea4f 1a5a 	mov.w	sl, sl, lsr #5
 802014a:	f40a 6afc 	and.w	sl, sl, #2016	@ 0x7e0
 802014e:	ea4c 0c0a 	orr.w	ip, ip, sl
 8020152:	f820 c019 	strh.w	ip, [r0, r9, lsl #1]
 8020156:	9c13      	ldr	r4, [sp, #76]	@ 0x4c
 8020158:	f109 0901 	add.w	r9, r9, #1
 802015c:	4421      	add	r1, r4
 802015e:	9c14      	ldr	r4, [sp, #80]	@ 0x50
 8020160:	4422      	add	r2, r4
 8020162:	e79c      	b.n	802009e <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x202>
 8020164:	b007      	add	sp, #28
 8020166:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0802016a <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 802016a:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 802016e:	b085      	sub	sp, #20
 8020170:	468b      	mov	fp, r1
 8020172:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8020176:	9c13      	ldr	r4, [sp, #76]	@ 0x4c
 8020178:	9203      	str	r2, [sp, #12]
 802017a:	6861      	ldr	r1, [r4, #4]
 802017c:	f8dd 8058 	ldr.w	r8, [sp, #88]	@ 0x58
 8020180:	e9dd 2014 	ldrd	r2, r0, [sp, #80]	@ 0x50
 8020184:	fb01 2000 	mla	r0, r1, r0, r2
 8020188:	6822      	ldr	r2, [r4, #0]
 802018a:	eb02 0040 	add.w	r0, r2, r0, lsl #1
 802018e:	f8d8 2000 	ldr.w	r2, [r8]
 8020192:	9200      	str	r2, [sp, #0]
 8020194:	f8d8 2004 	ldr.w	r2, [r8, #4]
 8020198:	9201      	str	r2, [sp, #4]
 802019a:	f1bb 0f00 	cmp.w	fp, #0
 802019e:	dc03      	bgt.n	80201a8 <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3e>
 80201a0:	9a03      	ldr	r2, [sp, #12]
 80201a2:	2a00      	cmp	r2, #0
 80201a4:	f340 8146 	ble.w	8020434 <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2ca>
 80201a8:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 80201aa:	f9b8 7008 	ldrsh.w	r7, [r8, #8]
 80201ae:	f502 4100 	add.w	r1, r2, #32768	@ 0x8000
 80201b2:	9a10      	ldr	r2, [sp, #64]	@ 0x40
 80201b4:	f9b8 600c 	ldrsh.w	r6, [r8, #12]
 80201b8:	f502 4200 	add.w	r2, r2, #32768	@ 0x8000
 80201bc:	2b00      	cmp	r3, #0
 80201be:	dd0e      	ble.n	80201de <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x74>
 80201c0:	140c      	asrs	r4, r1, #16
 80201c2:	d405      	bmi.n	80201d0 <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x66>
 80201c4:	42bc      	cmp	r4, r7
 80201c6:	da03      	bge.n	80201d0 <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x66>
 80201c8:	1414      	asrs	r4, r2, #16
 80201ca:	d401      	bmi.n	80201d0 <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x66>
 80201cc:	42b4      	cmp	r4, r6
 80201ce:	db07      	blt.n	80201e0 <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x76>
 80201d0:	9c11      	ldr	r4, [sp, #68]	@ 0x44
 80201d2:	3b01      	subs	r3, #1
 80201d4:	3002      	adds	r0, #2
 80201d6:	4421      	add	r1, r4
 80201d8:	9c12      	ldr	r4, [sp, #72]	@ 0x48
 80201da:	4422      	add	r2, r4
 80201dc:	e7ee      	b.n	80201bc <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x52>
 80201de:	d017      	beq.n	8020210 <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa6>
 80201e0:	1e5c      	subs	r4, r3, #1
 80201e2:	9d11      	ldr	r5, [sp, #68]	@ 0x44
 80201e4:	fb05 1504 	mla	r5, r5, r4, r1
 80201e8:	142d      	asrs	r5, r5, #16
 80201ea:	d409      	bmi.n	8020200 <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x96>
 80201ec:	42bd      	cmp	r5, r7
 80201ee:	da07      	bge.n	8020200 <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x96>
 80201f0:	9d12      	ldr	r5, [sp, #72]	@ 0x48
 80201f2:	fb05 2404 	mla	r4, r5, r4, r2
 80201f6:	1424      	asrs	r4, r4, #16
 80201f8:	d402      	bmi.n	8020200 <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x96>
 80201fa:	42b4      	cmp	r4, r6
 80201fc:	f2c0 80b3 	blt.w	8020366 <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1fc>
 8020200:	2600      	movs	r6, #0
 8020202:	199c      	adds	r4, r3, r6
 8020204:	2c00      	cmp	r4, #0
 8020206:	dc3e      	bgt.n	8020286 <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x11c>
 8020208:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 802020c:	eb00 0043 	add.w	r0, r0, r3, lsl #1
 8020210:	f1bb 0f00 	cmp.w	fp, #0
 8020214:	f340 810e 	ble.w	8020434 <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2ca>
 8020218:	ee30 0a04 	vadd.f32	s0, s0, s8
 802021c:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 802021e:	ee70 0aa4 	vadd.f32	s1, s1, s9
 8020222:	f1bb 0b01 	subs.w	fp, fp, #1
 8020226:	eeb0 6a62 	vmov.f32	s12, s5
 802022a:	eec6 7a80 	vdiv.f32	s15, s13, s0
 802022e:	ee31 1a05 	vadd.f32	s2, s2, s10
 8020232:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 8020236:	ed8d 6a0f 	vstr	s12, [sp, #60]	@ 0x3c
 802023a:	eeb0 6a43 	vmov.f32	s12, s6
 802023e:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 8020242:	ed8d 6a10 	vstr	s12, [sp, #64]	@ 0x40
 8020246:	ee20 7aa7 	vmul.f32	s14, s1, s15
 802024a:	ee61 7a27 	vmul.f32	s15, s2, s15
 802024e:	ee77 2a62 	vsub.f32	s5, s14, s5
 8020252:	ee37 3ac3 	vsub.f32	s6, s15, s6
 8020256:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 802025a:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 802025e:	ee12 2a90 	vmov	r2, s5
 8020262:	eef0 2a47 	vmov.f32	s5, s14
 8020266:	fb92 f3f3 	sdiv	r3, r2, r3
 802026a:	ee13 2a10 	vmov	r2, s6
 802026e:	9311      	str	r3, [sp, #68]	@ 0x44
 8020270:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8020272:	eeb0 3a67 	vmov.f32	s6, s15
 8020276:	fb92 f3f3 	sdiv	r3, r2, r3
 802027a:	9a03      	ldr	r2, [sp, #12]
 802027c:	9312      	str	r3, [sp, #72]	@ 0x48
 802027e:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8020280:	bf08      	it	eq
 8020282:	4613      	moveq	r3, r2
 8020284:	e789      	b.n	802019a <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x30>
 8020286:	140f      	asrs	r7, r1, #16
 8020288:	d418      	bmi.n	80202bc <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x152>
 802028a:	f8d8 5008 	ldr.w	r5, [r8, #8]
 802028e:	42bd      	cmp	r5, r7
 8020290:	dd14      	ble.n	80202bc <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x152>
 8020292:	ea5f 4c22 	movs.w	ip, r2, asr #16
 8020296:	d411      	bmi.n	80202bc <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x152>
 8020298:	f8d8 400c 	ldr.w	r4, [r8, #12]
 802029c:	4564      	cmp	r4, ip
 802029e:	dd0d      	ble.n	80202bc <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x152>
 80202a0:	b22d      	sxth	r5, r5
 80202a2:	9c01      	ldr	r4, [sp, #4]
 80202a4:	fb0c 7505 	mla	r5, ip, r5, r7
 80202a8:	5d64      	ldrb	r4, [r4, r5]
 80202aa:	2cff      	cmp	r4, #255	@ 0xff
 80202ac:	d10c      	bne.n	80202c8 <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x15e>
 80202ae:	9c00      	ldr	r4, [sp, #0]
 80202b0:	f834 5015 	ldrh.w	r5, [r4, r5, lsl #1]
 80202b4:	f06f 0401 	mvn.w	r4, #1
 80202b8:	4374      	muls	r4, r6
 80202ba:	5305      	strh	r5, [r0, r4]
 80202bc:	9c11      	ldr	r4, [sp, #68]	@ 0x44
 80202be:	3e01      	subs	r6, #1
 80202c0:	4421      	add	r1, r4
 80202c2:	9c12      	ldr	r4, [sp, #72]	@ 0x48
 80202c4:	4422      	add	r2, r4
 80202c6:	e79c      	b.n	8020202 <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x98>
 80202c8:	2c00      	cmp	r4, #0
 80202ca:	d0f7      	beq.n	80202bc <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x152>
 80202cc:	9f00      	ldr	r7, [sp, #0]
 80202ce:	fa1f fc84 	uxth.w	ip, r4
 80202d2:	43e4      	mvns	r4, r4
 80202d4:	f837 9015 	ldrh.w	r9, [r7, r5, lsl #1]
 80202d8:	f06f 0501 	mvn.w	r5, #1
 80202dc:	b2e4      	uxtb	r4, r4
 80202de:	4375      	muls	r5, r6
 80202e0:	ea4f 2e29 	mov.w	lr, r9, asr #8
 80202e4:	9502      	str	r5, [sp, #8]
 80202e6:	f00e 0ef8 	and.w	lr, lr, #248	@ 0xf8
 80202ea:	5b45      	ldrh	r5, [r0, r5]
 80202ec:	122f      	asrs	r7, r5, #8
 80202ee:	ea4f 0ae5 	mov.w	sl, r5, asr #3
 80202f2:	f007 07f8 	and.w	r7, r7, #248	@ 0xf8
 80202f6:	00ed      	lsls	r5, r5, #3
 80202f8:	f00a 0afc 	and.w	sl, sl, #252	@ 0xfc
 80202fc:	fb17 f704 	smulbb	r7, r7, r4
 8020300:	b2ed      	uxtb	r5, r5
 8020302:	fb1a fa04 	smulbb	sl, sl, r4
 8020306:	fb0e 7e0c 	mla	lr, lr, ip, r7
 802030a:	ea4f 07e9 	mov.w	r7, r9, asr #3
 802030e:	fb15 f504 	smulbb	r5, r5, r4
 8020312:	ea4f 09c9 	mov.w	r9, r9, lsl #3
 8020316:	fa1f fe8e 	uxth.w	lr, lr
 802031a:	f007 07fc 	and.w	r7, r7, #252	@ 0xfc
 802031e:	fa5f f989 	uxtb.w	r9, r9
 8020322:	fb07 a70c 	mla	r7, r7, ip, sl
 8020326:	f10e 0401 	add.w	r4, lr, #1
 802032a:	fb09 550c 	mla	r5, r9, ip, r5
 802032e:	eb04 2e1e 	add.w	lr, r4, lr, lsr #8
 8020332:	9c02      	ldr	r4, [sp, #8]
 8020334:	b2ad      	uxth	r5, r5
 8020336:	b2bf      	uxth	r7, r7
 8020338:	f40e 4e78 	and.w	lr, lr, #63488	@ 0xf800
 802033c:	f105 0a01 	add.w	sl, r5, #1
 8020340:	eb0a 2a15 	add.w	sl, sl, r5, lsr #8
 8020344:	f3ca 2ac4 	ubfx	sl, sl, #11, #5
 8020348:	ea4a 0e0e 	orr.w	lr, sl, lr
 802034c:	f107 0a01 	add.w	sl, r7, #1
 8020350:	eb0a 2a17 	add.w	sl, sl, r7, lsr #8
 8020354:	ea4f 1a5a 	mov.w	sl, sl, lsr #5
 8020358:	f40a 6afc 	and.w	sl, sl, #2016	@ 0x7e0
 802035c:	ea4e 0e0a 	orr.w	lr, lr, sl
 8020360:	f820 e004 	strh.w	lr, [r0, r4]
 8020364:	e7aa      	b.n	80202bc <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x152>
 8020366:	f04f 0900 	mov.w	r9, #0
 802036a:	eba3 0409 	sub.w	r4, r3, r9
 802036e:	2c00      	cmp	r4, #0
 8020370:	f77f af4a 	ble.w	8020208 <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x9e>
 8020374:	1414      	asrs	r4, r2, #16
 8020376:	f9b8 6008 	ldrsh.w	r6, [r8, #8]
 802037a:	140d      	asrs	r5, r1, #16
 802037c:	fb06 5504 	mla	r5, r6, r4, r5
 8020380:	9c01      	ldr	r4, [sp, #4]
 8020382:	5d64      	ldrb	r4, [r4, r5]
 8020384:	2cff      	cmp	r4, #255	@ 0xff
 8020386:	d10b      	bne.n	80203a0 <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x236>
 8020388:	9c00      	ldr	r4, [sp, #0]
 802038a:	f834 4015 	ldrh.w	r4, [r4, r5, lsl #1]
 802038e:	f820 4019 	strh.w	r4, [r0, r9, lsl #1]
 8020392:	9c11      	ldr	r4, [sp, #68]	@ 0x44
 8020394:	f109 0901 	add.w	r9, r9, #1
 8020398:	4421      	add	r1, r4
 802039a:	9c12      	ldr	r4, [sp, #72]	@ 0x48
 802039c:	4422      	add	r2, r4
 802039e:	e7e4      	b.n	802036a <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x200>
 80203a0:	2c00      	cmp	r4, #0
 80203a2:	d0f6      	beq.n	8020392 <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x228>
 80203a4:	9e00      	ldr	r6, [sp, #0]
 80203a6:	b2a7      	uxth	r7, r4
 80203a8:	43e4      	mvns	r4, r4
 80203aa:	f836 e015 	ldrh.w	lr, [r6, r5, lsl #1]
 80203ae:	f830 5019 	ldrh.w	r5, [r0, r9, lsl #1]
 80203b2:	b2e4      	uxtb	r4, r4
 80203b4:	ea4f 2c2e 	mov.w	ip, lr, asr #8
 80203b8:	122e      	asrs	r6, r5, #8
 80203ba:	ea4f 0ae5 	mov.w	sl, r5, asr #3
 80203be:	f00c 0cf8 	and.w	ip, ip, #248	@ 0xf8
 80203c2:	f006 06f8 	and.w	r6, r6, #248	@ 0xf8
 80203c6:	00ed      	lsls	r5, r5, #3
 80203c8:	f00a 0afc 	and.w	sl, sl, #252	@ 0xfc
 80203cc:	fb16 f604 	smulbb	r6, r6, r4
 80203d0:	b2ed      	uxtb	r5, r5
 80203d2:	fb1a fa04 	smulbb	sl, sl, r4
 80203d6:	fb0c 6c07 	mla	ip, ip, r7, r6
 80203da:	ea4f 06ee 	mov.w	r6, lr, asr #3
 80203de:	fb15 f504 	smulbb	r5, r5, r4
 80203e2:	ea4f 0ece 	mov.w	lr, lr, lsl #3
 80203e6:	fa1f fc8c 	uxth.w	ip, ip
 80203ea:	f006 06fc 	and.w	r6, r6, #252	@ 0xfc
 80203ee:	fa5f fe8e 	uxtb.w	lr, lr
 80203f2:	fb06 a607 	mla	r6, r6, r7, sl
 80203f6:	f10c 0401 	add.w	r4, ip, #1
 80203fa:	fb0e 5507 	mla	r5, lr, r7, r5
 80203fe:	eb04 2c1c 	add.w	ip, r4, ip, lsr #8
 8020402:	b2ad      	uxth	r5, r5
 8020404:	b2b6      	uxth	r6, r6
 8020406:	f40c 4c78 	and.w	ip, ip, #63488	@ 0xf800
 802040a:	f105 0a01 	add.w	sl, r5, #1
 802040e:	eb0a 2a15 	add.w	sl, sl, r5, lsr #8
 8020412:	f3ca 2ac4 	ubfx	sl, sl, #11, #5
 8020416:	ea4a 0c0c 	orr.w	ip, sl, ip
 802041a:	f106 0a01 	add.w	sl, r6, #1
 802041e:	eb0a 2a16 	add.w	sl, sl, r6, lsr #8
 8020422:	ea4f 1a5a 	mov.w	sl, sl, lsr #5
 8020426:	f40a 6afc 	and.w	sl, sl, #2016	@ 0x7e0
 802042a:	ea4c 0c0a 	orr.w	ip, ip, sl
 802042e:	f820 c019 	strh.w	ip, [r0, r9, lsl #1]
 8020432:	e7ae      	b.n	8020392 <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x228>
 8020434:	b005      	add	sp, #20
 8020436:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0802043a <_ZN8touchgfx8LCD16bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 802043a:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 802043e:	b085      	sub	sp, #20
 8020440:	9813      	ldr	r0, [sp, #76]	@ 0x4c
 8020442:	9203      	str	r2, [sp, #12]
 8020444:	f89d 205c 	ldrb.w	r2, [sp, #92]	@ 0x5c
 8020448:	9100      	str	r1, [sp, #0]
 802044a:	9201      	str	r2, [sp, #4]
 802044c:	6841      	ldr	r1, [r0, #4]
 802044e:	f8dd e058 	ldr.w	lr, [sp, #88]	@ 0x58
 8020452:	e9dd 2414 	ldrd	r2, r4, [sp, #80]	@ 0x50
 8020456:	fb01 2404 	mla	r4, r1, r4, r2
 802045a:	6802      	ldr	r2, [r0, #0]
 802045c:	eb02 0444 	add.w	r4, r2, r4, lsl #1
 8020460:	f8de 2000 	ldr.w	r2, [lr]
 8020464:	9202      	str	r2, [sp, #8]
 8020466:	9a01      	ldr	r2, [sp, #4]
 8020468:	43d6      	mvns	r6, r2
 802046a:	b2f6      	uxtb	r6, r6
 802046c:	9a00      	ldr	r2, [sp, #0]
 802046e:	2a00      	cmp	r2, #0
 8020470:	dc03      	bgt.n	802047a <_ZN8touchgfx8LCD16bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x40>
 8020472:	9a03      	ldr	r2, [sp, #12]
 8020474:	2a00      	cmp	r2, #0
 8020476:	f340 8124 	ble.w	80206c2 <_ZN8touchgfx8LCD16bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x288>
 802047a:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 802047c:	f9be c008 	ldrsh.w	ip, [lr, #8]
 8020480:	f502 4100 	add.w	r1, r2, #32768	@ 0x8000
 8020484:	9a10      	ldr	r2, [sp, #64]	@ 0x40
 8020486:	f9be 700c 	ldrsh.w	r7, [lr, #12]
 802048a:	f502 4200 	add.w	r2, r2, #32768	@ 0x8000
 802048e:	2b00      	cmp	r3, #0
 8020490:	dd0e      	ble.n	80204b0 <_ZN8touchgfx8LCD16bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x76>
 8020492:	1408      	asrs	r0, r1, #16
 8020494:	d405      	bmi.n	80204a2 <_ZN8touchgfx8LCD16bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x68>
 8020496:	4560      	cmp	r0, ip
 8020498:	da03      	bge.n	80204a2 <_ZN8touchgfx8LCD16bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x68>
 802049a:	1410      	asrs	r0, r2, #16
 802049c:	d401      	bmi.n	80204a2 <_ZN8touchgfx8LCD16bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x68>
 802049e:	42b8      	cmp	r0, r7
 80204a0:	db07      	blt.n	80204b2 <_ZN8touchgfx8LCD16bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x78>
 80204a2:	9811      	ldr	r0, [sp, #68]	@ 0x44
 80204a4:	3b01      	subs	r3, #1
 80204a6:	3402      	adds	r4, #2
 80204a8:	4401      	add	r1, r0
 80204aa:	9812      	ldr	r0, [sp, #72]	@ 0x48
 80204ac:	4402      	add	r2, r0
 80204ae:	e7ee      	b.n	802048e <_ZN8touchgfx8LCD16bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x54>
 80204b0:	d06e      	beq.n	8020590 <_ZN8touchgfx8LCD16bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x156>
 80204b2:	1e58      	subs	r0, r3, #1
 80204b4:	9d11      	ldr	r5, [sp, #68]	@ 0x44
 80204b6:	fb05 1500 	mla	r5, r5, r0, r1
 80204ba:	142d      	asrs	r5, r5, #16
 80204bc:	d45c      	bmi.n	8020578 <_ZN8touchgfx8LCD16bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x13e>
 80204be:	4565      	cmp	r5, ip
 80204c0:	da5a      	bge.n	8020578 <_ZN8touchgfx8LCD16bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x13e>
 80204c2:	9d12      	ldr	r5, [sp, #72]	@ 0x48
 80204c4:	fb05 2000 	mla	r0, r5, r0, r2
 80204c8:	1400      	asrs	r0, r0, #16
 80204ca:	d455      	bmi.n	8020578 <_ZN8touchgfx8LCD16bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x13e>
 80204cc:	42b8      	cmp	r0, r7
 80204ce:	da53      	bge.n	8020578 <_ZN8touchgfx8LCD16bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x13e>
 80204d0:	4699      	mov	r9, r3
 80204d2:	46a2      	mov	sl, r4
 80204d4:	f8bd b004 	ldrh.w	fp, [sp, #4]
 80204d8:	f1b9 0f00 	cmp.w	r9, #0
 80204dc:	dd54      	ble.n	8020588 <_ZN8touchgfx8LCD16bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x14e>
 80204de:	f9be 7008 	ldrsh.w	r7, [lr, #8]
 80204e2:	140d      	asrs	r5, r1, #16
 80204e4:	1410      	asrs	r0, r2, #16
 80204e6:	f109 39ff 	add.w	r9, r9, #4294967295
 80204ea:	fb07 5000 	mla	r0, r7, r0, r5
 80204ee:	9d02      	ldr	r5, [sp, #8]
 80204f0:	f835 0010 	ldrh.w	r0, [r5, r0, lsl #1]
 80204f4:	f8ba 5000 	ldrh.w	r5, [sl]
 80204f8:	ea4f 2c20 	mov.w	ip, r0, asr #8
 80204fc:	122f      	asrs	r7, r5, #8
 80204fe:	ea4f 08e5 	mov.w	r8, r5, asr #3
 8020502:	f00c 0cf8 	and.w	ip, ip, #248	@ 0xf8
 8020506:	f007 07f8 	and.w	r7, r7, #248	@ 0xf8
 802050a:	00ed      	lsls	r5, r5, #3
 802050c:	f008 08fc 	and.w	r8, r8, #252	@ 0xfc
 8020510:	fb17 f706 	smulbb	r7, r7, r6
 8020514:	b2ed      	uxtb	r5, r5
 8020516:	fb18 f806 	smulbb	r8, r8, r6
 802051a:	fb0c 7c0b 	mla	ip, ip, fp, r7
 802051e:	10c7      	asrs	r7, r0, #3
 8020520:	fb15 f506 	smulbb	r5, r5, r6
 8020524:	00c0      	lsls	r0, r0, #3
 8020526:	f007 07fc 	and.w	r7, r7, #252	@ 0xfc
 802052a:	fa1f fc8c 	uxth.w	ip, ip
 802052e:	b2c0      	uxtb	r0, r0
 8020530:	fb07 870b 	mla	r7, r7, fp, r8
 8020534:	fb00 500b 	mla	r0, r0, fp, r5
 8020538:	f10c 0501 	add.w	r5, ip, #1
 802053c:	b2bf      	uxth	r7, r7
 802053e:	b280      	uxth	r0, r0
 8020540:	eb05 2c1c 	add.w	ip, r5, ip, lsr #8
 8020544:	f107 0801 	add.w	r8, r7, #1
 8020548:	1c45      	adds	r5, r0, #1
 802054a:	eb08 2817 	add.w	r8, r8, r7, lsr #8
 802054e:	f40c 4c78 	and.w	ip, ip, #63488	@ 0xf800
 8020552:	eb05 2510 	add.w	r5, r5, r0, lsr #8
 8020556:	9811      	ldr	r0, [sp, #68]	@ 0x44
 8020558:	ea4f 1858 	mov.w	r8, r8, lsr #5
 802055c:	f3c5 25c4 	ubfx	r5, r5, #11, #5
 8020560:	4401      	add	r1, r0
 8020562:	f408 68fc 	and.w	r8, r8, #2016	@ 0x7e0
 8020566:	9812      	ldr	r0, [sp, #72]	@ 0x48
 8020568:	ea45 0c0c 	orr.w	ip, r5, ip
 802056c:	4402      	add	r2, r0
 802056e:	ea4c 0c08 	orr.w	ip, ip, r8
 8020572:	f82a cb02 	strh.w	ip, [sl], #2
 8020576:	e7af      	b.n	80204d8 <_ZN8touchgfx8LCD16bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x9e>
 8020578:	f04f 0800 	mov.w	r8, #0
 802057c:	f8bd a004 	ldrh.w	sl, [sp, #4]
 8020580:	eb03 0008 	add.w	r0, r3, r8
 8020584:	2800      	cmp	r0, #0
 8020586:	dc41      	bgt.n	802060c <_ZN8touchgfx8LCD16bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1d2>
 8020588:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 802058c:	eb04 0443 	add.w	r4, r4, r3, lsl #1
 8020590:	9b00      	ldr	r3, [sp, #0]
 8020592:	2b00      	cmp	r3, #0
 8020594:	f340 8095 	ble.w	80206c2 <_ZN8touchgfx8LCD16bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x288>
 8020598:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 802059c:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 802059e:	ee30 0a04 	vadd.f32	s0, s0, s8
 80205a2:	ee70 0aa4 	vadd.f32	s1, s1, s9
 80205a6:	eef0 6a62 	vmov.f32	s13, s5
 80205aa:	eec7 7a00 	vdiv.f32	s15, s14, s0
 80205ae:	ee31 1a05 	vadd.f32	s2, s2, s10
 80205b2:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 80205b6:	edcd 6a0f 	vstr	s13, [sp, #60]	@ 0x3c
 80205ba:	eef0 6a43 	vmov.f32	s13, s6
 80205be:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 80205c2:	edcd 6a10 	vstr	s13, [sp, #64]	@ 0x40
 80205c6:	ee20 7aa7 	vmul.f32	s14, s1, s15
 80205ca:	ee61 7a27 	vmul.f32	s15, s2, s15
 80205ce:	ee77 2a62 	vsub.f32	s5, s14, s5
 80205d2:	ee37 3ac3 	vsub.f32	s6, s15, s6
 80205d6:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 80205da:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 80205de:	ee12 2a90 	vmov	r2, s5
 80205e2:	eef0 2a47 	vmov.f32	s5, s14
 80205e6:	fb92 f3f3 	sdiv	r3, r2, r3
 80205ea:	ee13 2a10 	vmov	r2, s6
 80205ee:	9311      	str	r3, [sp, #68]	@ 0x44
 80205f0:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80205f2:	eeb0 3a67 	vmov.f32	s6, s15
 80205f6:	fb92 f3f3 	sdiv	r3, r2, r3
 80205fa:	9312      	str	r3, [sp, #72]	@ 0x48
 80205fc:	9b00      	ldr	r3, [sp, #0]
 80205fe:	9a03      	ldr	r2, [sp, #12]
 8020600:	3b01      	subs	r3, #1
 8020602:	9300      	str	r3, [sp, #0]
 8020604:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8020606:	bf08      	it	eq
 8020608:	4613      	moveq	r3, r2
 802060a:	e72f      	b.n	802046c <_ZN8touchgfx8LCD16bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x32>
 802060c:	140f      	asrs	r7, r1, #16
 802060e:	d451      	bmi.n	80206b4 <_ZN8touchgfx8LCD16bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x27a>
 8020610:	f8de 5008 	ldr.w	r5, [lr, #8]
 8020614:	42bd      	cmp	r5, r7
 8020616:	dd4d      	ble.n	80206b4 <_ZN8touchgfx8LCD16bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x27a>
 8020618:	ea5f 4c22 	movs.w	ip, r2, asr #16
 802061c:	d44a      	bmi.n	80206b4 <_ZN8touchgfx8LCD16bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x27a>
 802061e:	f8de 000c 	ldr.w	r0, [lr, #12]
 8020622:	4560      	cmp	r0, ip
 8020624:	dd46      	ble.n	80206b4 <_ZN8touchgfx8LCD16bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x27a>
 8020626:	b22d      	sxth	r5, r5
 8020628:	9802      	ldr	r0, [sp, #8]
 802062a:	fb0c 7505 	mla	r5, ip, r5, r7
 802062e:	f830 0015 	ldrh.w	r0, [r0, r5, lsl #1]
 8020632:	f06f 0501 	mvn.w	r5, #1
 8020636:	fb05 fb08 	mul.w	fp, r5, r8
 802063a:	ea4f 2c20 	mov.w	ip, r0, asr #8
 802063e:	f834 500b 	ldrh.w	r5, [r4, fp]
 8020642:	f00c 0cf8 	and.w	ip, ip, #248	@ 0xf8
 8020646:	122f      	asrs	r7, r5, #8
 8020648:	ea4f 09e5 	mov.w	r9, r5, asr #3
 802064c:	f007 07f8 	and.w	r7, r7, #248	@ 0xf8
 8020650:	00ed      	lsls	r5, r5, #3
 8020652:	f009 09fc 	and.w	r9, r9, #252	@ 0xfc
 8020656:	fb17 f706 	smulbb	r7, r7, r6
 802065a:	b2ed      	uxtb	r5, r5
 802065c:	fb19 f906 	smulbb	r9, r9, r6
 8020660:	fb0c 7c0a 	mla	ip, ip, sl, r7
 8020664:	10c7      	asrs	r7, r0, #3
 8020666:	fb15 f506 	smulbb	r5, r5, r6
 802066a:	00c0      	lsls	r0, r0, #3
 802066c:	f007 07fc 	and.w	r7, r7, #252	@ 0xfc
 8020670:	fa1f fc8c 	uxth.w	ip, ip
 8020674:	b2c0      	uxtb	r0, r0
 8020676:	fb07 970a 	mla	r7, r7, sl, r9
 802067a:	fb00 500a 	mla	r0, r0, sl, r5
 802067e:	f10c 0501 	add.w	r5, ip, #1
 8020682:	b2bf      	uxth	r7, r7
 8020684:	b280      	uxth	r0, r0
 8020686:	eb05 2c1c 	add.w	ip, r5, ip, lsr #8
 802068a:	f107 0901 	add.w	r9, r7, #1
 802068e:	1c45      	adds	r5, r0, #1
 8020690:	eb09 2917 	add.w	r9, r9, r7, lsr #8
 8020694:	f40c 4c78 	and.w	ip, ip, #63488	@ 0xf800
 8020698:	eb05 2510 	add.w	r5, r5, r0, lsr #8
 802069c:	ea4f 1959 	mov.w	r9, r9, lsr #5
 80206a0:	f3c5 25c4 	ubfx	r5, r5, #11, #5
 80206a4:	f409 69fc 	and.w	r9, r9, #2016	@ 0x7e0
 80206a8:	ea45 0c0c 	orr.w	ip, r5, ip
 80206ac:	ea4c 0c09 	orr.w	ip, ip, r9
 80206b0:	f824 c00b 	strh.w	ip, [r4, fp]
 80206b4:	9811      	ldr	r0, [sp, #68]	@ 0x44
 80206b6:	f108 38ff 	add.w	r8, r8, #4294967295
 80206ba:	4401      	add	r1, r0
 80206bc:	9812      	ldr	r0, [sp, #72]	@ 0x48
 80206be:	4402      	add	r2, r0
 80206c0:	e75e      	b.n	8020580 <_ZN8touchgfx8LCD16bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x146>
 80206c2:	b005      	add	sp, #20
 80206c4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

080206c8 <_ZN8touchgfx8LCD16bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 80206c8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80206cc:	b085      	sub	sp, #20
 80206ce:	4693      	mov	fp, r2
 80206d0:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80206d4:	9e13      	ldr	r6, [sp, #76]	@ 0x4c
 80206d6:	9d16      	ldr	r5, [sp, #88]	@ 0x58
 80206d8:	6870      	ldr	r0, [r6, #4]
 80206da:	9101      	str	r1, [sp, #4]
 80206dc:	e9dd 2414 	ldrd	r2, r4, [sp, #80]	@ 0x50
 80206e0:	e9dd ec11 	ldrd	lr, ip, [sp, #68]	@ 0x44
 80206e4:	fb00 2404 	mla	r4, r0, r4, r2
 80206e8:	6832      	ldr	r2, [r6, #0]
 80206ea:	eb02 0444 	add.w	r4, r2, r4, lsl #1
 80206ee:	682a      	ldr	r2, [r5, #0]
 80206f0:	9202      	str	r2, [sp, #8]
 80206f2:	9a01      	ldr	r2, [sp, #4]
 80206f4:	2a00      	cmp	r2, #0
 80206f6:	dc03      	bgt.n	8020700 <_ZN8touchgfx8LCD16bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x38>
 80206f8:	f1bb 0f00 	cmp.w	fp, #0
 80206fc:	f340 809a 	ble.w	8020834 <_ZN8touchgfx8LCD16bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x16c>
 8020700:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 8020702:	f9b5 9008 	ldrsh.w	r9, [r5, #8]
 8020706:	f502 4000 	add.w	r0, r2, #32768	@ 0x8000
 802070a:	9a10      	ldr	r2, [sp, #64]	@ 0x40
 802070c:	f9b5 800c 	ldrsh.w	r8, [r5, #12]
 8020710:	f502 4200 	add.w	r2, r2, #32768	@ 0x8000
 8020714:	2b00      	cmp	r3, #0
 8020716:	dd0c      	ble.n	8020732 <_ZN8touchgfx8LCD16bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6a>
 8020718:	1406      	asrs	r6, r0, #16
 802071a:	d405      	bmi.n	8020728 <_ZN8touchgfx8LCD16bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x60>
 802071c:	454e      	cmp	r6, r9
 802071e:	da03      	bge.n	8020728 <_ZN8touchgfx8LCD16bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x60>
 8020720:	1416      	asrs	r6, r2, #16
 8020722:	d401      	bmi.n	8020728 <_ZN8touchgfx8LCD16bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x60>
 8020724:	4546      	cmp	r6, r8
 8020726:	db05      	blt.n	8020734 <_ZN8touchgfx8LCD16bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6c>
 8020728:	4470      	add	r0, lr
 802072a:	4462      	add	r2, ip
 802072c:	3b01      	subs	r3, #1
 802072e:	3402      	adds	r4, #2
 8020730:	e7f0      	b.n	8020714 <_ZN8touchgfx8LCD16bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4c>
 8020732:	d00f      	beq.n	8020754 <_ZN8touchgfx8LCD16bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8c>
 8020734:	1e5e      	subs	r6, r3, #1
 8020736:	fb0e 0706 	mla	r7, lr, r6, r0
 802073a:	143f      	asrs	r7, r7, #16
 802073c:	d541      	bpl.n	80207c2 <_ZN8touchgfx8LCD16bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xfa>
 802073e:	eb04 0643 	add.w	r6, r4, r3, lsl #1
 8020742:	4698      	mov	r8, r3
 8020744:	9603      	str	r6, [sp, #12]
 8020746:	f1b8 0f00 	cmp.w	r8, #0
 802074a:	dc56      	bgt.n	80207fa <_ZN8touchgfx8LCD16bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x132>
 802074c:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8020750:	eb04 0443 	add.w	r4, r4, r3, lsl #1
 8020754:	9b01      	ldr	r3, [sp, #4]
 8020756:	2b00      	cmp	r3, #0
 8020758:	dd6c      	ble.n	8020834 <_ZN8touchgfx8LCD16bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x16c>
 802075a:	ee30 0a04 	vadd.f32	s0, s0, s8
 802075e:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8020760:	ee70 0aa4 	vadd.f32	s1, s1, s9
 8020764:	eeb0 6a62 	vmov.f32	s12, s5
 8020768:	eec6 7a80 	vdiv.f32	s15, s13, s0
 802076c:	ee31 1a05 	vadd.f32	s2, s2, s10
 8020770:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 8020774:	ed8d 6a0f 	vstr	s12, [sp, #60]	@ 0x3c
 8020778:	eeb0 6a43 	vmov.f32	s12, s6
 802077c:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 8020780:	ed8d 6a10 	vstr	s12, [sp, #64]	@ 0x40
 8020784:	ee20 7aa7 	vmul.f32	s14, s1, s15
 8020788:	ee61 7a27 	vmul.f32	s15, s2, s15
 802078c:	ee77 2a62 	vsub.f32	s5, s14, s5
 8020790:	ee37 3ac3 	vsub.f32	s6, s15, s6
 8020794:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 8020798:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 802079c:	ee12 2a90 	vmov	r2, s5
 80207a0:	eef0 2a47 	vmov.f32	s5, s14
 80207a4:	fb92 fef3 	sdiv	lr, r2, r3
 80207a8:	ee13 2a10 	vmov	r2, s6
 80207ac:	eeb0 3a67 	vmov.f32	s6, s15
 80207b0:	fb92 fcf3 	sdiv	ip, r2, r3
 80207b4:	9b01      	ldr	r3, [sp, #4]
 80207b6:	3b01      	subs	r3, #1
 80207b8:	9301      	str	r3, [sp, #4]
 80207ba:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80207bc:	bf08      	it	eq
 80207be:	465b      	moveq	r3, fp
 80207c0:	e797      	b.n	80206f2 <_ZN8touchgfx8LCD16bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2a>
 80207c2:	454f      	cmp	r7, r9
 80207c4:	dabb      	bge.n	802073e <_ZN8touchgfx8LCD16bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x76>
 80207c6:	fb0c 2606 	mla	r6, ip, r6, r2
 80207ca:	1436      	asrs	r6, r6, #16
 80207cc:	d4b7      	bmi.n	802073e <_ZN8touchgfx8LCD16bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x76>
 80207ce:	4546      	cmp	r6, r8
 80207d0:	dab5      	bge.n	802073e <_ZN8touchgfx8LCD16bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x76>
 80207d2:	461e      	mov	r6, r3
 80207d4:	46a0      	mov	r8, r4
 80207d6:	2e00      	cmp	r6, #0
 80207d8:	ddb8      	ble.n	802074c <_ZN8touchgfx8LCD16bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x84>
 80207da:	1417      	asrs	r7, r2, #16
 80207dc:	f9b5 a008 	ldrsh.w	sl, [r5, #8]
 80207e0:	ea4f 4920 	mov.w	r9, r0, asr #16
 80207e4:	9902      	ldr	r1, [sp, #8]
 80207e6:	4470      	add	r0, lr
 80207e8:	4462      	add	r2, ip
 80207ea:	fb0a 9707 	mla	r7, sl, r7, r9
 80207ee:	3e01      	subs	r6, #1
 80207f0:	f831 7017 	ldrh.w	r7, [r1, r7, lsl #1]
 80207f4:	f828 7b02 	strh.w	r7, [r8], #2
 80207f8:	e7ed      	b.n	80207d6 <_ZN8touchgfx8LCD16bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x10e>
 80207fa:	ea5f 4920 	movs.w	r9, r0, asr #16
 80207fe:	d414      	bmi.n	802082a <_ZN8touchgfx8LCD16bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x162>
 8020800:	68ae      	ldr	r6, [r5, #8]
 8020802:	454e      	cmp	r6, r9
 8020804:	dd11      	ble.n	802082a <_ZN8touchgfx8LCD16bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x162>
 8020806:	ea5f 4a22 	movs.w	sl, r2, asr #16
 802080a:	d40e      	bmi.n	802082a <_ZN8touchgfx8LCD16bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x162>
 802080c:	68ef      	ldr	r7, [r5, #12]
 802080e:	4557      	cmp	r7, sl
 8020810:	dd0b      	ble.n	802082a <_ZN8touchgfx8LCD16bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x162>
 8020812:	b236      	sxth	r6, r6
 8020814:	f06f 0101 	mvn.w	r1, #1
 8020818:	9f02      	ldr	r7, [sp, #8]
 802081a:	fb0a 9606 	mla	r6, sl, r6, r9
 802081e:	f837 7016 	ldrh.w	r7, [r7, r6, lsl #1]
 8020822:	fb01 f608 	mul.w	r6, r1, r8
 8020826:	9903      	ldr	r1, [sp, #12]
 8020828:	538f      	strh	r7, [r1, r6]
 802082a:	4470      	add	r0, lr
 802082c:	4462      	add	r2, ip
 802082e:	f108 38ff 	add.w	r8, r8, #4294967295
 8020832:	e788      	b.n	8020746 <_ZN8touchgfx8LCD16bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7e>
 8020834:	b005      	add	sp, #20
 8020836:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0802083a <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 802083a:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 802083e:	b087      	sub	sp, #28
 8020840:	468b      	mov	fp, r1
 8020842:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8020846:	9815      	ldr	r0, [sp, #84]	@ 0x54
 8020848:	9203      	str	r2, [sp, #12]
 802084a:	f89d 2064 	ldrb.w	r2, [sp, #100]	@ 0x64
 802084e:	6841      	ldr	r1, [r0, #4]
 8020850:	9204      	str	r2, [sp, #16]
 8020852:	f8dd 9060 	ldr.w	r9, [sp, #96]	@ 0x60
 8020856:	e9dd 2516 	ldrd	r2, r5, [sp, #88]	@ 0x58
 802085a:	fb01 2505 	mla	r5, r1, r5, r2
 802085e:	6802      	ldr	r2, [r0, #0]
 8020860:	eb02 0545 	add.w	r5, r2, r5, lsl #1
 8020864:	f8d9 2000 	ldr.w	r2, [r9]
 8020868:	9201      	str	r2, [sp, #4]
 802086a:	f1bb 0f00 	cmp.w	fp, #0
 802086e:	dc03      	bgt.n	8020878 <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3e>
 8020870:	9a03      	ldr	r2, [sp, #12]
 8020872:	2a00      	cmp	r2, #0
 8020874:	f340 8158 	ble.w	8020b28 <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2ee>
 8020878:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 802087a:	f9b9 7008 	ldrsh.w	r7, [r9, #8]
 802087e:	f502 4000 	add.w	r0, r2, #32768	@ 0x8000
 8020882:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 8020884:	f9b9 600c 	ldrsh.w	r6, [r9, #12]
 8020888:	f502 4100 	add.w	r1, r2, #32768	@ 0x8000
 802088c:	2b00      	cmp	r3, #0
 802088e:	dd0e      	ble.n	80208ae <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x74>
 8020890:	1402      	asrs	r2, r0, #16
 8020892:	d405      	bmi.n	80208a0 <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x66>
 8020894:	42ba      	cmp	r2, r7
 8020896:	da03      	bge.n	80208a0 <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x66>
 8020898:	140a      	asrs	r2, r1, #16
 802089a:	d401      	bmi.n	80208a0 <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x66>
 802089c:	42b2      	cmp	r2, r6
 802089e:	db07      	blt.n	80208b0 <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x76>
 80208a0:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 80208a2:	3b01      	subs	r3, #1
 80208a4:	3502      	adds	r5, #2
 80208a6:	4410      	add	r0, r2
 80208a8:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 80208aa:	4411      	add	r1, r2
 80208ac:	e7ee      	b.n	802088c <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x52>
 80208ae:	d017      	beq.n	80208e0 <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa6>
 80208b0:	1e5a      	subs	r2, r3, #1
 80208b2:	9c13      	ldr	r4, [sp, #76]	@ 0x4c
 80208b4:	fb04 0402 	mla	r4, r4, r2, r0
 80208b8:	1424      	asrs	r4, r4, #16
 80208ba:	d409      	bmi.n	80208d0 <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x96>
 80208bc:	42bc      	cmp	r4, r7
 80208be:	da07      	bge.n	80208d0 <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x96>
 80208c0:	9c14      	ldr	r4, [sp, #80]	@ 0x50
 80208c2:	fb04 1202 	mla	r2, r4, r2, r1
 80208c6:	1412      	asrs	r2, r2, #16
 80208c8:	d402      	bmi.n	80208d0 <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x96>
 80208ca:	42b2      	cmp	r2, r6
 80208cc:	f2c0 80bf 	blt.w	8020a4e <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x214>
 80208d0:	2700      	movs	r7, #0
 80208d2:	19da      	adds	r2, r3, r7
 80208d4:	2a00      	cmp	r2, #0
 80208d6:	dc3e      	bgt.n	8020956 <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x11c>
 80208d8:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 80208dc:	eb05 0543 	add.w	r5, r5, r3, lsl #1
 80208e0:	f1bb 0f00 	cmp.w	fp, #0
 80208e4:	f340 8120 	ble.w	8020b28 <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2ee>
 80208e8:	ee30 0a04 	vadd.f32	s0, s0, s8
 80208ec:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 80208ee:	ee70 0aa4 	vadd.f32	s1, s1, s9
 80208f2:	f1bb 0b01 	subs.w	fp, fp, #1
 80208f6:	eeb0 6a62 	vmov.f32	s12, s5
 80208fa:	eec6 7a80 	vdiv.f32	s15, s13, s0
 80208fe:	ee31 1a05 	vadd.f32	s2, s2, s10
 8020902:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 8020906:	ed8d 6a11 	vstr	s12, [sp, #68]	@ 0x44
 802090a:	eeb0 6a43 	vmov.f32	s12, s6
 802090e:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 8020912:	ed8d 6a12 	vstr	s12, [sp, #72]	@ 0x48
 8020916:	ee20 7aa7 	vmul.f32	s14, s1, s15
 802091a:	ee61 7a27 	vmul.f32	s15, s2, s15
 802091e:	ee77 2a62 	vsub.f32	s5, s14, s5
 8020922:	ee37 3ac3 	vsub.f32	s6, s15, s6
 8020926:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 802092a:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 802092e:	ee12 2a90 	vmov	r2, s5
 8020932:	eef0 2a47 	vmov.f32	s5, s14
 8020936:	fb92 f3f3 	sdiv	r3, r2, r3
 802093a:	ee13 2a10 	vmov	r2, s6
 802093e:	9313      	str	r3, [sp, #76]	@ 0x4c
 8020940:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8020942:	eeb0 3a67 	vmov.f32	s6, s15
 8020946:	fb92 f3f3 	sdiv	r3, r2, r3
 802094a:	9a03      	ldr	r2, [sp, #12]
 802094c:	9314      	str	r3, [sp, #80]	@ 0x50
 802094e:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8020950:	bf08      	it	eq
 8020952:	4613      	moveq	r3, r2
 8020954:	e789      	b.n	802086a <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x30>
 8020956:	1406      	asrs	r6, r0, #16
 8020958:	d42d      	bmi.n	80209b6 <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x17c>
 802095a:	f8d9 4008 	ldr.w	r4, [r9, #8]
 802095e:	42b4      	cmp	r4, r6
 8020960:	dd29      	ble.n	80209b6 <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x17c>
 8020962:	ea5f 4c21 	movs.w	ip, r1, asr #16
 8020966:	d426      	bmi.n	80209b6 <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x17c>
 8020968:	f8d9 200c 	ldr.w	r2, [r9, #12]
 802096c:	4562      	cmp	r2, ip
 802096e:	dd22      	ble.n	80209b6 <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x17c>
 8020970:	b224      	sxth	r4, r4
 8020972:	9a01      	ldr	r2, [sp, #4]
 8020974:	fb0c 6404 	mla	r4, ip, r4, r6
 8020978:	f852 4024 	ldr.w	r4, [r2, r4, lsl #2]
 802097c:	0e22      	lsrs	r2, r4, #24
 802097e:	d01a      	beq.n	80209b6 <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x17c>
 8020980:	9e04      	ldr	r6, [sp, #16]
 8020982:	4372      	muls	r2, r6
 8020984:	1c56      	adds	r6, r2, #1
 8020986:	eb06 2222 	add.w	r2, r6, r2, asr #8
 802098a:	0a26      	lsrs	r6, r4, #8
 802098c:	1212      	asrs	r2, r2, #8
 802098e:	9605      	str	r6, [sp, #20]
 8020990:	2aff      	cmp	r2, #255	@ 0xff
 8020992:	d116      	bne.n	80209c2 <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x188>
 8020994:	f06f 0201 	mvn.w	r2, #1
 8020998:	f426 66ff 	bic.w	r6, r6, #2040	@ 0x7f8
 802099c:	fb02 fc07 	mul.w	ip, r2, r7
 80209a0:	0962      	lsrs	r2, r4, #5
 80209a2:	f026 0607 	bic.w	r6, r6, #7
 80209a6:	f3c4 04c4 	ubfx	r4, r4, #3, #5
 80209aa:	f402 62fc 	and.w	r2, r2, #2016	@ 0x7e0
 80209ae:	4316      	orrs	r6, r2
 80209b0:	4326      	orrs	r6, r4
 80209b2:	f825 600c 	strh.w	r6, [r5, ip]
 80209b6:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 80209b8:	3f01      	subs	r7, #1
 80209ba:	4410      	add	r0, r2
 80209bc:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 80209be:	4411      	add	r1, r2
 80209c0:	e787      	b.n	80208d2 <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x98>
 80209c2:	f06f 0601 	mvn.w	r6, #1
 80209c6:	fa1f fa82 	uxth.w	sl, r2
 80209ca:	f3c4 4c07 	ubfx	ip, r4, #16, #8
 80209ce:	43d2      	mvns	r2, r2
 80209d0:	437e      	muls	r6, r7
 80209d2:	b2e4      	uxtb	r4, r4
 80209d4:	fb1c fc0a 	smulbb	ip, ip, sl
 80209d8:	b2d2      	uxtb	r2, r2
 80209da:	f835 8006 	ldrh.w	r8, [r5, r6]
 80209de:	fb14 f40a 	smulbb	r4, r4, sl
 80209e2:	9602      	str	r6, [sp, #8]
 80209e4:	ea4f 2e28 	mov.w	lr, r8, asr #8
 80209e8:	f89d 6014 	ldrb.w	r6, [sp, #20]
 80209ec:	fb16 f60a 	smulbb	r6, r6, sl
 80209f0:	f00e 0ef8 	and.w	lr, lr, #248	@ 0xf8
 80209f4:	fb0e ce02 	mla	lr, lr, r2, ip
 80209f8:	ea4f 0ce8 	mov.w	ip, r8, asr #3
 80209fc:	ea4f 08c8 	mov.w	r8, r8, lsl #3
 8020a00:	fa1f fe8e 	uxth.w	lr, lr
 8020a04:	f00c 0cfc 	and.w	ip, ip, #252	@ 0xfc
 8020a08:	fa5f f888 	uxtb.w	r8, r8
 8020a0c:	fb0c 6c02 	mla	ip, ip, r2, r6
 8020a10:	fb08 4402 	mla	r4, r8, r2, r4
 8020a14:	f10e 0201 	add.w	r2, lr, #1
 8020a18:	fa1f fc8c 	uxth.w	ip, ip
 8020a1c:	b2a4      	uxth	r4, r4
 8020a1e:	eb02 2e1e 	add.w	lr, r2, lr, lsr #8
 8020a22:	9a02      	ldr	r2, [sp, #8]
 8020a24:	1c66      	adds	r6, r4, #1
 8020a26:	f40e 4e78 	and.w	lr, lr, #63488	@ 0xf800
 8020a2a:	eb06 2614 	add.w	r6, r6, r4, lsr #8
 8020a2e:	f3c6 26c4 	ubfx	r6, r6, #11, #5
 8020a32:	ea46 0e0e 	orr.w	lr, r6, lr
 8020a36:	f10c 0601 	add.w	r6, ip, #1
 8020a3a:	eb06 261c 	add.w	r6, r6, ip, lsr #8
 8020a3e:	0976      	lsrs	r6, r6, #5
 8020a40:	f406 66fc 	and.w	r6, r6, #2016	@ 0x7e0
 8020a44:	ea4e 0e06 	orr.w	lr, lr, r6
 8020a48:	f825 e002 	strh.w	lr, [r5, r2]
 8020a4c:	e7b3      	b.n	80209b6 <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x17c>
 8020a4e:	f04f 0800 	mov.w	r8, #0
 8020a52:	eba3 0208 	sub.w	r2, r3, r8
 8020a56:	2a00      	cmp	r2, #0
 8020a58:	f77f af3e 	ble.w	80208d8 <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x9e>
 8020a5c:	1404      	asrs	r4, r0, #16
 8020a5e:	f9b9 6008 	ldrsh.w	r6, [r9, #8]
 8020a62:	140a      	asrs	r2, r1, #16
 8020a64:	fb06 4202 	mla	r2, r6, r2, r4
 8020a68:	9c01      	ldr	r4, [sp, #4]
 8020a6a:	f854 4022 	ldr.w	r4, [r4, r2, lsl #2]
 8020a6e:	0e22      	lsrs	r2, r4, #24
 8020a70:	d015      	beq.n	8020a9e <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x264>
 8020a72:	9e04      	ldr	r6, [sp, #16]
 8020a74:	4372      	muls	r2, r6
 8020a76:	1c56      	adds	r6, r2, #1
 8020a78:	eb06 2222 	add.w	r2, r6, r2, asr #8
 8020a7c:	0a26      	lsrs	r6, r4, #8
 8020a7e:	1212      	asrs	r2, r2, #8
 8020a80:	2aff      	cmp	r2, #255	@ 0xff
 8020a82:	d113      	bne.n	8020aac <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x272>
 8020a84:	0962      	lsrs	r2, r4, #5
 8020a86:	f426 66ff 	bic.w	r6, r6, #2040	@ 0x7f8
 8020a8a:	f3c4 04c4 	ubfx	r4, r4, #3, #5
 8020a8e:	f402 62fc 	and.w	r2, r2, #2016	@ 0x7e0
 8020a92:	f026 0607 	bic.w	r6, r6, #7
 8020a96:	4316      	orrs	r6, r2
 8020a98:	4326      	orrs	r6, r4
 8020a9a:	f825 6018 	strh.w	r6, [r5, r8, lsl #1]
 8020a9e:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 8020aa0:	f108 0801 	add.w	r8, r8, #1
 8020aa4:	4410      	add	r0, r2
 8020aa6:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 8020aa8:	4411      	add	r1, r2
 8020aaa:	e7d2      	b.n	8020a52 <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x218>
 8020aac:	f835 e018 	ldrh.w	lr, [r5, r8, lsl #1]
 8020ab0:	fa1f fa82 	uxth.w	sl, r2
 8020ab4:	f3c4 4707 	ubfx	r7, r4, #16, #8
 8020ab8:	43d2      	mvns	r2, r2
 8020aba:	ea4f 2c2e 	mov.w	ip, lr, asr #8
 8020abe:	fb17 f70a 	smulbb	r7, r7, sl
 8020ac2:	b2d2      	uxtb	r2, r2
 8020ac4:	f00c 0cf8 	and.w	ip, ip, #248	@ 0xf8
 8020ac8:	b2e4      	uxtb	r4, r4
 8020aca:	b2f6      	uxtb	r6, r6
 8020acc:	fb0c 7c02 	mla	ip, ip, r2, r7
 8020ad0:	ea4f 07ee 	mov.w	r7, lr, asr #3
 8020ad4:	fb14 f40a 	smulbb	r4, r4, sl
 8020ad8:	ea4f 0ece 	mov.w	lr, lr, lsl #3
 8020adc:	fa1f fc8c 	uxth.w	ip, ip
 8020ae0:	f007 07fc 	and.w	r7, r7, #252	@ 0xfc
 8020ae4:	fb16 f60a 	smulbb	r6, r6, sl
 8020ae8:	fa5f fe8e 	uxtb.w	lr, lr
 8020aec:	fb0e 4402 	mla	r4, lr, r2, r4
 8020af0:	fb07 6702 	mla	r7, r7, r2, r6
 8020af4:	f10c 0201 	add.w	r2, ip, #1
 8020af8:	b2a4      	uxth	r4, r4
 8020afa:	eb02 2c1c 	add.w	ip, r2, ip, lsr #8
 8020afe:	1c66      	adds	r6, r4, #1
 8020b00:	b2bf      	uxth	r7, r7
 8020b02:	f40c 4c78 	and.w	ip, ip, #63488	@ 0xf800
 8020b06:	eb06 2614 	add.w	r6, r6, r4, lsr #8
 8020b0a:	f3c6 26c4 	ubfx	r6, r6, #11, #5
 8020b0e:	ea46 0c0c 	orr.w	ip, r6, ip
 8020b12:	1c7e      	adds	r6, r7, #1
 8020b14:	eb06 2617 	add.w	r6, r6, r7, lsr #8
 8020b18:	0976      	lsrs	r6, r6, #5
 8020b1a:	f406 66fc 	and.w	r6, r6, #2016	@ 0x7e0
 8020b1e:	ea4c 0c06 	orr.w	ip, ip, r6
 8020b22:	f825 c018 	strh.w	ip, [r5, r8, lsl #1]
 8020b26:	e7ba      	b.n	8020a9e <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x264>
 8020b28:	b007      	add	sp, #28
 8020b2a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	...

08020b30 <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 8020b30:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8020b34:	b085      	sub	sp, #20
 8020b36:	468b      	mov	fp, r1
 8020b38:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8020b3c:	9813      	ldr	r0, [sp, #76]	@ 0x4c
 8020b3e:	9203      	str	r2, [sp, #12]
 8020b40:	6841      	ldr	r1, [r0, #4]
 8020b42:	f8dd 8058 	ldr.w	r8, [sp, #88]	@ 0x58
 8020b46:	e9dd 2414 	ldrd	r2, r4, [sp, #80]	@ 0x50
 8020b4a:	fb01 2404 	mla	r4, r1, r4, r2
 8020b4e:	6802      	ldr	r2, [r0, #0]
 8020b50:	eb02 0444 	add.w	r4, r2, r4, lsl #1
 8020b54:	f8d8 2000 	ldr.w	r2, [r8]
 8020b58:	9201      	str	r2, [sp, #4]
 8020b5a:	f1bb 0f00 	cmp.w	fp, #0
 8020b5e:	dc03      	bgt.n	8020b68 <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x38>
 8020b60:	9a03      	ldr	r2, [sp, #12]
 8020b62:	2a00      	cmp	r2, #0
 8020b64:	f340 814f 	ble.w	8020e06 <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2d6>
 8020b68:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 8020b6a:	f9b8 7008 	ldrsh.w	r7, [r8, #8]
 8020b6e:	f502 4100 	add.w	r1, r2, #32768	@ 0x8000
 8020b72:	9a10      	ldr	r2, [sp, #64]	@ 0x40
 8020b74:	f9b8 600c 	ldrsh.w	r6, [r8, #12]
 8020b78:	f502 4200 	add.w	r2, r2, #32768	@ 0x8000
 8020b7c:	2b00      	cmp	r3, #0
 8020b7e:	dd0e      	ble.n	8020b9e <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6e>
 8020b80:	1408      	asrs	r0, r1, #16
 8020b82:	d405      	bmi.n	8020b90 <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x60>
 8020b84:	42b8      	cmp	r0, r7
 8020b86:	da03      	bge.n	8020b90 <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x60>
 8020b88:	1410      	asrs	r0, r2, #16
 8020b8a:	d401      	bmi.n	8020b90 <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x60>
 8020b8c:	42b0      	cmp	r0, r6
 8020b8e:	db07      	blt.n	8020ba0 <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x70>
 8020b90:	9811      	ldr	r0, [sp, #68]	@ 0x44
 8020b92:	3b01      	subs	r3, #1
 8020b94:	3402      	adds	r4, #2
 8020b96:	4401      	add	r1, r0
 8020b98:	9812      	ldr	r0, [sp, #72]	@ 0x48
 8020b9a:	4402      	add	r2, r0
 8020b9c:	e7ee      	b.n	8020b7c <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4c>
 8020b9e:	d017      	beq.n	8020bd0 <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa0>
 8020ba0:	1e58      	subs	r0, r3, #1
 8020ba2:	9d11      	ldr	r5, [sp, #68]	@ 0x44
 8020ba4:	fb05 1500 	mla	r5, r5, r0, r1
 8020ba8:	142d      	asrs	r5, r5, #16
 8020baa:	d409      	bmi.n	8020bc0 <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x90>
 8020bac:	42bd      	cmp	r5, r7
 8020bae:	da07      	bge.n	8020bc0 <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x90>
 8020bb0:	9d12      	ldr	r5, [sp, #72]	@ 0x48
 8020bb2:	fb05 2000 	mla	r0, r5, r0, r2
 8020bb6:	1400      	asrs	r0, r0, #16
 8020bb8:	d402      	bmi.n	8020bc0 <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x90>
 8020bba:	42b0      	cmp	r0, r6
 8020bbc:	f2c0 80ba 	blt.w	8020d34 <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x204>
 8020bc0:	2600      	movs	r6, #0
 8020bc2:	1998      	adds	r0, r3, r6
 8020bc4:	2800      	cmp	r0, #0
 8020bc6:	dc3e      	bgt.n	8020c46 <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x116>
 8020bc8:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8020bcc:	eb04 0443 	add.w	r4, r4, r3, lsl #1
 8020bd0:	f1bb 0f00 	cmp.w	fp, #0
 8020bd4:	f340 8117 	ble.w	8020e06 <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2d6>
 8020bd8:	ee30 0a04 	vadd.f32	s0, s0, s8
 8020bdc:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8020bde:	ee70 0aa4 	vadd.f32	s1, s1, s9
 8020be2:	f1bb 0b01 	subs.w	fp, fp, #1
 8020be6:	eeb0 6a62 	vmov.f32	s12, s5
 8020bea:	eec6 7a80 	vdiv.f32	s15, s13, s0
 8020bee:	ee31 1a05 	vadd.f32	s2, s2, s10
 8020bf2:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 8020bf6:	ed8d 6a0f 	vstr	s12, [sp, #60]	@ 0x3c
 8020bfa:	eeb0 6a43 	vmov.f32	s12, s6
 8020bfe:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 8020c02:	ed8d 6a10 	vstr	s12, [sp, #64]	@ 0x40
 8020c06:	ee20 7aa7 	vmul.f32	s14, s1, s15
 8020c0a:	ee61 7a27 	vmul.f32	s15, s2, s15
 8020c0e:	ee77 2a62 	vsub.f32	s5, s14, s5
 8020c12:	ee37 3ac3 	vsub.f32	s6, s15, s6
 8020c16:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 8020c1a:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 8020c1e:	ee12 2a90 	vmov	r2, s5
 8020c22:	eef0 2a47 	vmov.f32	s5, s14
 8020c26:	fb92 f3f3 	sdiv	r3, r2, r3
 8020c2a:	ee13 2a10 	vmov	r2, s6
 8020c2e:	9311      	str	r3, [sp, #68]	@ 0x44
 8020c30:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8020c32:	eeb0 3a67 	vmov.f32	s6, s15
 8020c36:	fb92 f3f3 	sdiv	r3, r2, r3
 8020c3a:	9a03      	ldr	r2, [sp, #12]
 8020c3c:	9312      	str	r3, [sp, #72]	@ 0x48
 8020c3e:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8020c40:	bf08      	it	eq
 8020c42:	4613      	moveq	r3, r2
 8020c44:	e789      	b.n	8020b5a <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2a>
 8020c46:	140f      	asrs	r7, r1, #16
 8020c48:	d424      	bmi.n	8020c94 <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x164>
 8020c4a:	f8d8 5008 	ldr.w	r5, [r8, #8]
 8020c4e:	42bd      	cmp	r5, r7
 8020c50:	dd20      	ble.n	8020c94 <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x164>
 8020c52:	ea5f 4c22 	movs.w	ip, r2, asr #16
 8020c56:	d41d      	bmi.n	8020c94 <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x164>
 8020c58:	f8d8 000c 	ldr.w	r0, [r8, #12]
 8020c5c:	4560      	cmp	r0, ip
 8020c5e:	dd19      	ble.n	8020c94 <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x164>
 8020c60:	b22d      	sxth	r5, r5
 8020c62:	9801      	ldr	r0, [sp, #4]
 8020c64:	fb0c 7505 	mla	r5, ip, r5, r7
 8020c68:	f850 0025 	ldr.w	r0, [r0, r5, lsl #2]
 8020c6c:	0e07      	lsrs	r7, r0, #24
 8020c6e:	2fff      	cmp	r7, #255	@ 0xff
 8020c70:	d116      	bne.n	8020ca0 <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x170>
 8020c72:	f06f 0501 	mvn.w	r5, #1
 8020c76:	fb05 f706 	mul.w	r7, r5, r6
 8020c7a:	f2a5 75fe 	subw	r5, r5, #2046	@ 0x7fe
 8020c7e:	ea05 2c10 	and.w	ip, r5, r0, lsr #8
 8020c82:	0945      	lsrs	r5, r0, #5
 8020c84:	f3c0 00c4 	ubfx	r0, r0, #3, #5
 8020c88:	f405 65fc 	and.w	r5, r5, #2016	@ 0x7e0
 8020c8c:	ea4c 0505 	orr.w	r5, ip, r5
 8020c90:	4305      	orrs	r5, r0
 8020c92:	53e5      	strh	r5, [r4, r7]
 8020c94:	9811      	ldr	r0, [sp, #68]	@ 0x44
 8020c96:	3e01      	subs	r6, #1
 8020c98:	4401      	add	r1, r0
 8020c9a:	9812      	ldr	r0, [sp, #72]	@ 0x48
 8020c9c:	4402      	add	r2, r0
 8020c9e:	e790      	b.n	8020bc2 <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x92>
 8020ca0:	b2fd      	uxtb	r5, r7
 8020ca2:	2f00      	cmp	r7, #0
 8020ca4:	d0f6      	beq.n	8020c94 <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x164>
 8020ca6:	f06f 0701 	mvn.w	r7, #1
 8020caa:	fa1f f985 	uxth.w	r9, r5
 8020cae:	43ed      	mvns	r5, r5
 8020cb0:	f3c0 2a07 	ubfx	sl, r0, #8, #8
 8020cb4:	4377      	muls	r7, r6
 8020cb6:	fb1a fa09 	smulbb	sl, sl, r9
 8020cba:	b2ed      	uxtb	r5, r5
 8020cbc:	f834 e007 	ldrh.w	lr, [r4, r7]
 8020cc0:	9702      	str	r7, [sp, #8]
 8020cc2:	f3c0 4707 	ubfx	r7, r0, #16, #8
 8020cc6:	ea4f 2c2e 	mov.w	ip, lr, asr #8
 8020cca:	fb17 f709 	smulbb	r7, r7, r9
 8020cce:	b2c0      	uxtb	r0, r0
 8020cd0:	f00c 0cf8 	and.w	ip, ip, #248	@ 0xf8
 8020cd4:	fb10 f009 	smulbb	r0, r0, r9
 8020cd8:	fb0c 7c05 	mla	ip, ip, r5, r7
 8020cdc:	ea4f 07ee 	mov.w	r7, lr, asr #3
 8020ce0:	ea4f 0ece 	mov.w	lr, lr, lsl #3
 8020ce4:	fa1f fc8c 	uxth.w	ip, ip
 8020ce8:	f007 07fc 	and.w	r7, r7, #252	@ 0xfc
 8020cec:	fa5f fe8e 	uxtb.w	lr, lr
 8020cf0:	fb07 a705 	mla	r7, r7, r5, sl
 8020cf4:	fb0e 0005 	mla	r0, lr, r5, r0
 8020cf8:	f10c 0501 	add.w	r5, ip, #1
 8020cfc:	b2bf      	uxth	r7, r7
 8020cfe:	b280      	uxth	r0, r0
 8020d00:	eb05 2c1c 	add.w	ip, r5, ip, lsr #8
 8020d04:	f100 0a01 	add.w	sl, r0, #1
 8020d08:	f40c 4c78 	and.w	ip, ip, #63488	@ 0xf800
 8020d0c:	eb0a 2a10 	add.w	sl, sl, r0, lsr #8
 8020d10:	9802      	ldr	r0, [sp, #8]
 8020d12:	f3ca 2ac4 	ubfx	sl, sl, #11, #5
 8020d16:	ea4a 0c0c 	orr.w	ip, sl, ip
 8020d1a:	f107 0a01 	add.w	sl, r7, #1
 8020d1e:	eb0a 2a17 	add.w	sl, sl, r7, lsr #8
 8020d22:	ea4f 1a5a 	mov.w	sl, sl, lsr #5
 8020d26:	f40a 6afc 	and.w	sl, sl, #2016	@ 0x7e0
 8020d2a:	ea4c 0c0a 	orr.w	ip, ip, sl
 8020d2e:	f824 c000 	strh.w	ip, [r4, r0]
 8020d32:	e7af      	b.n	8020c94 <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x164>
 8020d34:	f04f 0e00 	mov.w	lr, #0
 8020d38:	eba3 000e 	sub.w	r0, r3, lr
 8020d3c:	2800      	cmp	r0, #0
 8020d3e:	f77f af43 	ble.w	8020bc8 <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x98>
 8020d42:	f9b8 6008 	ldrsh.w	r6, [r8, #8]
 8020d46:	140d      	asrs	r5, r1, #16
 8020d48:	1410      	asrs	r0, r2, #16
 8020d4a:	fb06 5000 	mla	r0, r6, r0, r5
 8020d4e:	9d01      	ldr	r5, [sp, #4]
 8020d50:	f855 5020 	ldr.w	r5, [r5, r0, lsl #2]
 8020d54:	0e2e      	lsrs	r6, r5, #24
 8020d56:	2eff      	cmp	r6, #255	@ 0xff
 8020d58:	d112      	bne.n	8020d80 <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x250>
 8020d5a:	482c      	ldr	r0, [pc, #176]	@ (8020e0c <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2dc>)
 8020d5c:	ea00 2615 	and.w	r6, r0, r5, lsr #8
 8020d60:	0968      	lsrs	r0, r5, #5
 8020d62:	f3c5 05c4 	ubfx	r5, r5, #3, #5
 8020d66:	f400 60fc 	and.w	r0, r0, #2016	@ 0x7e0
 8020d6a:	4330      	orrs	r0, r6
 8020d6c:	4328      	orrs	r0, r5
 8020d6e:	f824 001e 	strh.w	r0, [r4, lr, lsl #1]
 8020d72:	9811      	ldr	r0, [sp, #68]	@ 0x44
 8020d74:	f10e 0e01 	add.w	lr, lr, #1
 8020d78:	4401      	add	r1, r0
 8020d7a:	9812      	ldr	r0, [sp, #72]	@ 0x48
 8020d7c:	4402      	add	r2, r0
 8020d7e:	e7db      	b.n	8020d38 <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x208>
 8020d80:	b2f0      	uxtb	r0, r6
 8020d82:	2e00      	cmp	r6, #0
 8020d84:	d0f5      	beq.n	8020d72 <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x242>
 8020d86:	f834 c01e 	ldrh.w	ip, [r4, lr, lsl #1]
 8020d8a:	fa1f f980 	uxth.w	r9, r0
 8020d8e:	f3c5 4607 	ubfx	r6, r5, #16, #8
 8020d92:	43c0      	mvns	r0, r0
 8020d94:	ea4f 272c 	mov.w	r7, ip, asr #8
 8020d98:	f3c5 2a07 	ubfx	sl, r5, #8, #8
 8020d9c:	fb16 f609 	smulbb	r6, r6, r9
 8020da0:	b2c0      	uxtb	r0, r0
 8020da2:	f007 07f8 	and.w	r7, r7, #248	@ 0xf8
 8020da6:	b2ed      	uxtb	r5, r5
 8020da8:	fb1a fa09 	smulbb	sl, sl, r9
 8020dac:	fb07 6700 	mla	r7, r7, r0, r6
 8020db0:	ea4f 06ec 	mov.w	r6, ip, asr #3
 8020db4:	fb15 f509 	smulbb	r5, r5, r9
 8020db8:	ea4f 0ccc 	mov.w	ip, ip, lsl #3
 8020dbc:	b2bf      	uxth	r7, r7
 8020dbe:	f006 06fc 	and.w	r6, r6, #252	@ 0xfc
 8020dc2:	fa5f fc8c 	uxtb.w	ip, ip
 8020dc6:	fb06 a600 	mla	r6, r6, r0, sl
 8020dca:	fb0c 5500 	mla	r5, ip, r0, r5
 8020dce:	1c78      	adds	r0, r7, #1
 8020dd0:	b2b6      	uxth	r6, r6
 8020dd2:	b2ad      	uxth	r5, r5
 8020dd4:	eb00 2717 	add.w	r7, r0, r7, lsr #8
 8020dd8:	f105 0a01 	add.w	sl, r5, #1
 8020ddc:	f407 4778 	and.w	r7, r7, #63488	@ 0xf800
 8020de0:	eb0a 2a15 	add.w	sl, sl, r5, lsr #8
 8020de4:	f3ca 2ac4 	ubfx	sl, sl, #11, #5
 8020de8:	ea4a 0707 	orr.w	r7, sl, r7
 8020dec:	f106 0a01 	add.w	sl, r6, #1
 8020df0:	eb0a 2a16 	add.w	sl, sl, r6, lsr #8
 8020df4:	ea4f 1a5a 	mov.w	sl, sl, lsr #5
 8020df8:	f40a 6afc 	and.w	sl, sl, #2016	@ 0x7e0
 8020dfc:	ea47 070a 	orr.w	r7, r7, sl
 8020e00:	f824 701e 	strh.w	r7, [r4, lr, lsl #1]
 8020e04:	e7b5      	b.n	8020d72 <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x242>
 8020e06:	b005      	add	sp, #20
 8020e08:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8020e0c:	fffff800 	.word	0xfffff800

08020e10 <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 8020e10:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8020e14:	b087      	sub	sp, #28
 8020e16:	468b      	mov	fp, r1
 8020e18:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8020e1c:	9815      	ldr	r0, [sp, #84]	@ 0x54
 8020e1e:	9203      	str	r2, [sp, #12]
 8020e20:	f89d 2064 	ldrb.w	r2, [sp, #100]	@ 0x64
 8020e24:	6841      	ldr	r1, [r0, #4]
 8020e26:	9204      	str	r2, [sp, #16]
 8020e28:	f8dd 9060 	ldr.w	r9, [sp, #96]	@ 0x60
 8020e2c:	e9dd 2416 	ldrd	r2, r4, [sp, #88]	@ 0x58
 8020e30:	fb01 2404 	mla	r4, r1, r4, r2
 8020e34:	6802      	ldr	r2, [r0, #0]
 8020e36:	eb02 0444 	add.w	r4, r2, r4, lsl #1
 8020e3a:	f8d9 2008 	ldr.w	r2, [r9, #8]
 8020e3e:	3201      	adds	r2, #1
 8020e40:	f022 0201 	bic.w	r2, r2, #1
 8020e44:	9200      	str	r2, [sp, #0]
 8020e46:	f8d9 2000 	ldr.w	r2, [r9]
 8020e4a:	9201      	str	r2, [sp, #4]
 8020e4c:	f1bb 0f00 	cmp.w	fp, #0
 8020e50:	dc03      	bgt.n	8020e5a <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4a>
 8020e52:	9a03      	ldr	r2, [sp, #12]
 8020e54:	2a00      	cmp	r2, #0
 8020e56:	f340 816a 	ble.w	802112e <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x31e>
 8020e5a:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 8020e5c:	f9b9 7008 	ldrsh.w	r7, [r9, #8]
 8020e60:	f502 4000 	add.w	r0, r2, #32768	@ 0x8000
 8020e64:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 8020e66:	f9b9 600c 	ldrsh.w	r6, [r9, #12]
 8020e6a:	f502 4100 	add.w	r1, r2, #32768	@ 0x8000
 8020e6e:	2b00      	cmp	r3, #0
 8020e70:	dd0e      	ble.n	8020e90 <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x80>
 8020e72:	1402      	asrs	r2, r0, #16
 8020e74:	d405      	bmi.n	8020e82 <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x72>
 8020e76:	42ba      	cmp	r2, r7
 8020e78:	da03      	bge.n	8020e82 <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x72>
 8020e7a:	140a      	asrs	r2, r1, #16
 8020e7c:	d401      	bmi.n	8020e82 <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x72>
 8020e7e:	42b2      	cmp	r2, r6
 8020e80:	db07      	blt.n	8020e92 <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x82>
 8020e82:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 8020e84:	3b01      	subs	r3, #1
 8020e86:	3402      	adds	r4, #2
 8020e88:	4410      	add	r0, r2
 8020e8a:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 8020e8c:	4411      	add	r1, r2
 8020e8e:	e7ee      	b.n	8020e6e <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5e>
 8020e90:	d017      	beq.n	8020ec2 <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xb2>
 8020e92:	1e5a      	subs	r2, r3, #1
 8020e94:	9d13      	ldr	r5, [sp, #76]	@ 0x4c
 8020e96:	fb05 0502 	mla	r5, r5, r2, r0
 8020e9a:	142d      	asrs	r5, r5, #16
 8020e9c:	d409      	bmi.n	8020eb2 <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa2>
 8020e9e:	42bd      	cmp	r5, r7
 8020ea0:	da07      	bge.n	8020eb2 <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa2>
 8020ea2:	9d14      	ldr	r5, [sp, #80]	@ 0x50
 8020ea4:	fb05 1202 	mla	r2, r5, r2, r1
 8020ea8:	1412      	asrs	r2, r2, #16
 8020eaa:	d402      	bmi.n	8020eb2 <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa2>
 8020eac:	42b2      	cmp	r2, r6
 8020eae:	f2c0 80c8 	blt.w	8021042 <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x232>
 8020eb2:	2700      	movs	r7, #0
 8020eb4:	19da      	adds	r2, r3, r7
 8020eb6:	2a00      	cmp	r2, #0
 8020eb8:	dc3e      	bgt.n	8020f38 <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x128>
 8020eba:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8020ebe:	eb04 0443 	add.w	r4, r4, r3, lsl #1
 8020ec2:	f1bb 0f00 	cmp.w	fp, #0
 8020ec6:	f340 8132 	ble.w	802112e <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x31e>
 8020eca:	ee30 0a04 	vadd.f32	s0, s0, s8
 8020ece:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8020ed0:	ee70 0aa4 	vadd.f32	s1, s1, s9
 8020ed4:	f1bb 0b01 	subs.w	fp, fp, #1
 8020ed8:	eeb0 6a62 	vmov.f32	s12, s5
 8020edc:	eec6 7a80 	vdiv.f32	s15, s13, s0
 8020ee0:	ee31 1a05 	vadd.f32	s2, s2, s10
 8020ee4:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 8020ee8:	ed8d 6a11 	vstr	s12, [sp, #68]	@ 0x44
 8020eec:	eeb0 6a43 	vmov.f32	s12, s6
 8020ef0:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 8020ef4:	ed8d 6a12 	vstr	s12, [sp, #72]	@ 0x48
 8020ef8:	ee20 7aa7 	vmul.f32	s14, s1, s15
 8020efc:	ee61 7a27 	vmul.f32	s15, s2, s15
 8020f00:	ee77 2a62 	vsub.f32	s5, s14, s5
 8020f04:	ee37 3ac3 	vsub.f32	s6, s15, s6
 8020f08:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 8020f0c:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 8020f10:	ee12 2a90 	vmov	r2, s5
 8020f14:	eef0 2a47 	vmov.f32	s5, s14
 8020f18:	fb92 f3f3 	sdiv	r3, r2, r3
 8020f1c:	ee13 2a10 	vmov	r2, s6
 8020f20:	9313      	str	r3, [sp, #76]	@ 0x4c
 8020f22:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8020f24:	eeb0 3a67 	vmov.f32	s6, s15
 8020f28:	fb92 f3f3 	sdiv	r3, r2, r3
 8020f2c:	9a03      	ldr	r2, [sp, #12]
 8020f2e:	9314      	str	r3, [sp, #80]	@ 0x50
 8020f30:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8020f32:	bf08      	it	eq
 8020f34:	4613      	moveq	r3, r2
 8020f36:	e789      	b.n	8020e4c <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3c>
 8020f38:	1405      	asrs	r5, r0, #16
 8020f3a:	d436      	bmi.n	8020faa <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x19a>
 8020f3c:	f8d9 2008 	ldr.w	r2, [r9, #8]
 8020f40:	42aa      	cmp	r2, r5
 8020f42:	dd32      	ble.n	8020faa <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x19a>
 8020f44:	140e      	asrs	r6, r1, #16
 8020f46:	d430      	bmi.n	8020faa <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x19a>
 8020f48:	f8d9 200c 	ldr.w	r2, [r9, #12]
 8020f4c:	42b2      	cmp	r2, r6
 8020f4e:	dd2c      	ble.n	8020faa <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x19a>
 8020f50:	9a00      	ldr	r2, [sp, #0]
 8020f52:	fb06 5502 	mla	r5, r6, r2, r5
 8020f56:	9e01      	ldr	r6, [sp, #4]
 8020f58:	086a      	lsrs	r2, r5, #1
 8020f5a:	5cb2      	ldrb	r2, [r6, r2]
 8020f5c:	07ee      	lsls	r6, r5, #31
 8020f5e:	bf54      	ite	pl
 8020f60:	f002 020f 	andpl.w	r2, r2, #15
 8020f64:	1112      	asrmi	r2, r2, #4
 8020f66:	eb02 1202 	add.w	r2, r2, r2, lsl #4
 8020f6a:	b2d2      	uxtb	r2, r2
 8020f6c:	b1ea      	cbz	r2, 8020faa <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x19a>
 8020f6e:	9d04      	ldr	r5, [sp, #16]
 8020f70:	436a      	muls	r2, r5
 8020f72:	1c55      	adds	r5, r2, #1
 8020f74:	eb05 2222 	add.w	r2, r5, r2, asr #8
 8020f78:	4d6e      	ldr	r5, [pc, #440]	@ (8021134 <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x324>)
 8020f7a:	1212      	asrs	r2, r2, #8
 8020f7c:	682d      	ldr	r5, [r5, #0]
 8020f7e:	2aff      	cmp	r2, #255	@ 0xff
 8020f80:	ea4f 2615 	mov.w	r6, r5, lsr #8
 8020f84:	9605      	str	r6, [sp, #20]
 8020f86:	d116      	bne.n	8020fb6 <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1a6>
 8020f88:	f06f 0201 	mvn.w	r2, #1
 8020f8c:	f426 66ff 	bic.w	r6, r6, #2040	@ 0x7f8
 8020f90:	fb02 fc07 	mul.w	ip, r2, r7
 8020f94:	096a      	lsrs	r2, r5, #5
 8020f96:	f026 0607 	bic.w	r6, r6, #7
 8020f9a:	f3c5 05c4 	ubfx	r5, r5, #3, #5
 8020f9e:	f402 62fc 	and.w	r2, r2, #2016	@ 0x7e0
 8020fa2:	4316      	orrs	r6, r2
 8020fa4:	432e      	orrs	r6, r5
 8020fa6:	f824 600c 	strh.w	r6, [r4, ip]
 8020faa:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 8020fac:	3f01      	subs	r7, #1
 8020fae:	4410      	add	r0, r2
 8020fb0:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 8020fb2:	4411      	add	r1, r2
 8020fb4:	e77e      	b.n	8020eb4 <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa4>
 8020fb6:	f06f 0601 	mvn.w	r6, #1
 8020fba:	fa1f fa82 	uxth.w	sl, r2
 8020fbe:	f3c5 4c07 	ubfx	ip, r5, #16, #8
 8020fc2:	43d2      	mvns	r2, r2
 8020fc4:	437e      	muls	r6, r7
 8020fc6:	b2ed      	uxtb	r5, r5
 8020fc8:	fb1c fc0a 	smulbb	ip, ip, sl
 8020fcc:	b2d2      	uxtb	r2, r2
 8020fce:	f834 8006 	ldrh.w	r8, [r4, r6]
 8020fd2:	fb15 f50a 	smulbb	r5, r5, sl
 8020fd6:	9602      	str	r6, [sp, #8]
 8020fd8:	ea4f 2e28 	mov.w	lr, r8, asr #8
 8020fdc:	f89d 6014 	ldrb.w	r6, [sp, #20]
 8020fe0:	fb16 f60a 	smulbb	r6, r6, sl
 8020fe4:	f00e 0ef8 	and.w	lr, lr, #248	@ 0xf8
 8020fe8:	fb0e ce02 	mla	lr, lr, r2, ip
 8020fec:	ea4f 0ce8 	mov.w	ip, r8, asr #3
 8020ff0:	ea4f 08c8 	mov.w	r8, r8, lsl #3
 8020ff4:	fa1f fe8e 	uxth.w	lr, lr
 8020ff8:	f00c 0cfc 	and.w	ip, ip, #252	@ 0xfc
 8020ffc:	fa5f f888 	uxtb.w	r8, r8
 8021000:	fb0c 6c02 	mla	ip, ip, r2, r6
 8021004:	fb08 5502 	mla	r5, r8, r2, r5
 8021008:	f10e 0201 	add.w	r2, lr, #1
 802100c:	fa1f fc8c 	uxth.w	ip, ip
 8021010:	b2ad      	uxth	r5, r5
 8021012:	eb02 2e1e 	add.w	lr, r2, lr, lsr #8
 8021016:	9a02      	ldr	r2, [sp, #8]
 8021018:	1c6e      	adds	r6, r5, #1
 802101a:	f40e 4e78 	and.w	lr, lr, #63488	@ 0xf800
 802101e:	eb06 2615 	add.w	r6, r6, r5, lsr #8
 8021022:	f3c6 26c4 	ubfx	r6, r6, #11, #5
 8021026:	ea46 0e0e 	orr.w	lr, r6, lr
 802102a:	f10c 0601 	add.w	r6, ip, #1
 802102e:	eb06 261c 	add.w	r6, r6, ip, lsr #8
 8021032:	0976      	lsrs	r6, r6, #5
 8021034:	f406 66fc 	and.w	r6, r6, #2016	@ 0x7e0
 8021038:	ea4e 0e06 	orr.w	lr, lr, r6
 802103c:	f824 e002 	strh.w	lr, [r4, r2]
 8021040:	e7b3      	b.n	8020faa <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x19a>
 8021042:	f04f 0800 	mov.w	r8, #0
 8021046:	eba3 0208 	sub.w	r2, r3, r8
 802104a:	2a00      	cmp	r2, #0
 802104c:	f77f af35 	ble.w	8020eba <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xaa>
 8021050:	1402      	asrs	r2, r0, #16
 8021052:	9e00      	ldr	r6, [sp, #0]
 8021054:	140d      	asrs	r5, r1, #16
 8021056:	fb06 2505 	mla	r5, r6, r5, r2
 802105a:	9e01      	ldr	r6, [sp, #4]
 802105c:	086a      	lsrs	r2, r5, #1
 802105e:	07ed      	lsls	r5, r5, #31
 8021060:	5cb2      	ldrb	r2, [r6, r2]
 8021062:	bf54      	ite	pl
 8021064:	f002 020f 	andpl.w	r2, r2, #15
 8021068:	1112      	asrmi	r2, r2, #4
 802106a:	eb02 1202 	add.w	r2, r2, r2, lsl #4
 802106e:	b2d2      	uxtb	r2, r2
 8021070:	b1c2      	cbz	r2, 80210a4 <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x294>
 8021072:	9d04      	ldr	r5, [sp, #16]
 8021074:	436a      	muls	r2, r5
 8021076:	1c55      	adds	r5, r2, #1
 8021078:	eb05 2222 	add.w	r2, r5, r2, asr #8
 802107c:	4d2d      	ldr	r5, [pc, #180]	@ (8021134 <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x324>)
 802107e:	1212      	asrs	r2, r2, #8
 8021080:	682e      	ldr	r6, [r5, #0]
 8021082:	2aff      	cmp	r2, #255	@ 0xff
 8021084:	ea4f 2516 	mov.w	r5, r6, lsr #8
 8021088:	d113      	bne.n	80210b2 <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2a2>
 802108a:	0972      	lsrs	r2, r6, #5
 802108c:	f425 65ff 	bic.w	r5, r5, #2040	@ 0x7f8
 8021090:	f3c6 06c4 	ubfx	r6, r6, #3, #5
 8021094:	f402 62fc 	and.w	r2, r2, #2016	@ 0x7e0
 8021098:	f025 0507 	bic.w	r5, r5, #7
 802109c:	4315      	orrs	r5, r2
 802109e:	4335      	orrs	r5, r6
 80210a0:	f824 5018 	strh.w	r5, [r4, r8, lsl #1]
 80210a4:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 80210a6:	f108 0801 	add.w	r8, r8, #1
 80210aa:	4410      	add	r0, r2
 80210ac:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 80210ae:	4411      	add	r1, r2
 80210b0:	e7c9      	b.n	8021046 <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x236>
 80210b2:	f834 e018 	ldrh.w	lr, [r4, r8, lsl #1]
 80210b6:	fa1f fa82 	uxth.w	sl, r2
 80210ba:	f3c6 4707 	ubfx	r7, r6, #16, #8
 80210be:	43d2      	mvns	r2, r2
 80210c0:	ea4f 2c2e 	mov.w	ip, lr, asr #8
 80210c4:	fb17 f70a 	smulbb	r7, r7, sl
 80210c8:	b2d2      	uxtb	r2, r2
 80210ca:	f00c 0cf8 	and.w	ip, ip, #248	@ 0xf8
 80210ce:	b2f6      	uxtb	r6, r6
 80210d0:	b2ed      	uxtb	r5, r5
 80210d2:	fb0c 7c02 	mla	ip, ip, r2, r7
 80210d6:	ea4f 07ee 	mov.w	r7, lr, asr #3
 80210da:	fb16 f60a 	smulbb	r6, r6, sl
 80210de:	ea4f 0ece 	mov.w	lr, lr, lsl #3
 80210e2:	fa1f fc8c 	uxth.w	ip, ip
 80210e6:	f007 07fc 	and.w	r7, r7, #252	@ 0xfc
 80210ea:	fb15 f50a 	smulbb	r5, r5, sl
 80210ee:	fa5f fe8e 	uxtb.w	lr, lr
 80210f2:	fb0e 6602 	mla	r6, lr, r2, r6
 80210f6:	fb07 5702 	mla	r7, r7, r2, r5
 80210fa:	f10c 0201 	add.w	r2, ip, #1
 80210fe:	b2b6      	uxth	r6, r6
 8021100:	eb02 2c1c 	add.w	ip, r2, ip, lsr #8
 8021104:	1c75      	adds	r5, r6, #1
 8021106:	b2bf      	uxth	r7, r7
 8021108:	f40c 4c78 	and.w	ip, ip, #63488	@ 0xf800
 802110c:	eb05 2516 	add.w	r5, r5, r6, lsr #8
 8021110:	f3c5 25c4 	ubfx	r5, r5, #11, #5
 8021114:	ea45 0c0c 	orr.w	ip, r5, ip
 8021118:	1c7d      	adds	r5, r7, #1
 802111a:	eb05 2517 	add.w	r5, r5, r7, lsr #8
 802111e:	096d      	lsrs	r5, r5, #5
 8021120:	f405 65fc 	and.w	r5, r5, #2016	@ 0x7e0
 8021124:	ea4c 0c05 	orr.w	ip, ip, r5
 8021128:	f824 c018 	strh.w	ip, [r4, r8, lsl #1]
 802112c:	e7ba      	b.n	80210a4 <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x294>
 802112e:	b007      	add	sp, #28
 8021130:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8021134:	2400b88c 	.word	0x2400b88c

08021138 <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 8021138:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 802113c:	b087      	sub	sp, #28
 802113e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8021142:	f8df 8308 	ldr.w	r8, [pc, #776]	@ 802144c <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x314>
 8021146:	9815      	ldr	r0, [sp, #84]	@ 0x54
 8021148:	9101      	str	r1, [sp, #4]
 802114a:	9205      	str	r2, [sp, #20]
 802114c:	6841      	ldr	r1, [r0, #4]
 802114e:	f8dd b060 	ldr.w	fp, [sp, #96]	@ 0x60
 8021152:	e9dd 2416 	ldrd	r2, r4, [sp, #88]	@ 0x58
 8021156:	fb01 2404 	mla	r4, r1, r4, r2
 802115a:	6802      	ldr	r2, [r0, #0]
 802115c:	eb02 0444 	add.w	r4, r2, r4, lsl #1
 8021160:	f8db 2008 	ldr.w	r2, [fp, #8]
 8021164:	3201      	adds	r2, #1
 8021166:	f022 0201 	bic.w	r2, r2, #1
 802116a:	9202      	str	r2, [sp, #8]
 802116c:	f8db 2000 	ldr.w	r2, [fp]
 8021170:	9203      	str	r2, [sp, #12]
 8021172:	9a01      	ldr	r2, [sp, #4]
 8021174:	2a00      	cmp	r2, #0
 8021176:	dc03      	bgt.n	8021180 <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x48>
 8021178:	9a05      	ldr	r2, [sp, #20]
 802117a:	2a00      	cmp	r2, #0
 802117c:	f340 8162 	ble.w	8021444 <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x30c>
 8021180:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 8021182:	f9bb 7008 	ldrsh.w	r7, [fp, #8]
 8021186:	f502 4000 	add.w	r0, r2, #32768	@ 0x8000
 802118a:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 802118c:	f9bb 600c 	ldrsh.w	r6, [fp, #12]
 8021190:	f502 4100 	add.w	r1, r2, #32768	@ 0x8000
 8021194:	2b00      	cmp	r3, #0
 8021196:	dd0e      	ble.n	80211b6 <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7e>
 8021198:	1402      	asrs	r2, r0, #16
 802119a:	d405      	bmi.n	80211a8 <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x70>
 802119c:	42ba      	cmp	r2, r7
 802119e:	da03      	bge.n	80211a8 <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x70>
 80211a0:	140a      	asrs	r2, r1, #16
 80211a2:	d401      	bmi.n	80211a8 <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x70>
 80211a4:	42b2      	cmp	r2, r6
 80211a6:	db07      	blt.n	80211b8 <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x80>
 80211a8:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 80211aa:	3b01      	subs	r3, #1
 80211ac:	3402      	adds	r4, #2
 80211ae:	4410      	add	r0, r2
 80211b0:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 80211b2:	4411      	add	r1, r2
 80211b4:	e7ee      	b.n	8021194 <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5c>
 80211b6:	d017      	beq.n	80211e8 <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xb0>
 80211b8:	1e5a      	subs	r2, r3, #1
 80211ba:	9d13      	ldr	r5, [sp, #76]	@ 0x4c
 80211bc:	fb05 0502 	mla	r5, r5, r2, r0
 80211c0:	142d      	asrs	r5, r5, #16
 80211c2:	d409      	bmi.n	80211d8 <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa0>
 80211c4:	42bd      	cmp	r5, r7
 80211c6:	da07      	bge.n	80211d8 <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa0>
 80211c8:	9d14      	ldr	r5, [sp, #80]	@ 0x50
 80211ca:	fb05 1202 	mla	r2, r5, r2, r1
 80211ce:	1412      	asrs	r2, r2, #16
 80211d0:	d402      	bmi.n	80211d8 <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa0>
 80211d2:	42b2      	cmp	r2, r6
 80211d4:	f2c0 80c3 	blt.w	802135e <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x226>
 80211d8:	2500      	movs	r5, #0
 80211da:	195a      	adds	r2, r3, r5
 80211dc:	2a00      	cmp	r2, #0
 80211de:	dc3f      	bgt.n	8021260 <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x128>
 80211e0:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 80211e4:	eb04 0443 	add.w	r4, r4, r3, lsl #1
 80211e8:	9b01      	ldr	r3, [sp, #4]
 80211ea:	2b00      	cmp	r3, #0
 80211ec:	f340 812a 	ble.w	8021444 <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x30c>
 80211f0:	ee30 0a04 	vadd.f32	s0, s0, s8
 80211f4:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 80211f6:	ee70 0aa4 	vadd.f32	s1, s1, s9
 80211fa:	eeb0 6a62 	vmov.f32	s12, s5
 80211fe:	eec6 7a80 	vdiv.f32	s15, s13, s0
 8021202:	ee31 1a05 	vadd.f32	s2, s2, s10
 8021206:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 802120a:	ed8d 6a11 	vstr	s12, [sp, #68]	@ 0x44
 802120e:	eeb0 6a43 	vmov.f32	s12, s6
 8021212:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 8021216:	ed8d 6a12 	vstr	s12, [sp, #72]	@ 0x48
 802121a:	ee20 7aa7 	vmul.f32	s14, s1, s15
 802121e:	ee61 7a27 	vmul.f32	s15, s2, s15
 8021222:	ee77 2a62 	vsub.f32	s5, s14, s5
 8021226:	ee37 3ac3 	vsub.f32	s6, s15, s6
 802122a:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 802122e:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 8021232:	ee12 2a90 	vmov	r2, s5
 8021236:	eef0 2a47 	vmov.f32	s5, s14
 802123a:	fb92 f3f3 	sdiv	r3, r2, r3
 802123e:	ee13 2a10 	vmov	r2, s6
 8021242:	9313      	str	r3, [sp, #76]	@ 0x4c
 8021244:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8021246:	eeb0 3a67 	vmov.f32	s6, s15
 802124a:	fb92 f3f3 	sdiv	r3, r2, r3
 802124e:	9314      	str	r3, [sp, #80]	@ 0x50
 8021250:	9b01      	ldr	r3, [sp, #4]
 8021252:	9a05      	ldr	r2, [sp, #20]
 8021254:	3b01      	subs	r3, #1
 8021256:	9301      	str	r3, [sp, #4]
 8021258:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 802125a:	bf08      	it	eq
 802125c:	4613      	moveq	r3, r2
 802125e:	e788      	b.n	8021172 <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3a>
 8021260:	1406      	asrs	r6, r0, #16
 8021262:	d42c      	bmi.n	80212be <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x186>
 8021264:	f8db 2008 	ldr.w	r2, [fp, #8]
 8021268:	42b2      	cmp	r2, r6
 802126a:	dd28      	ble.n	80212be <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x186>
 802126c:	140f      	asrs	r7, r1, #16
 802126e:	d426      	bmi.n	80212be <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x186>
 8021270:	f8db 200c 	ldr.w	r2, [fp, #12]
 8021274:	42ba      	cmp	r2, r7
 8021276:	dd22      	ble.n	80212be <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x186>
 8021278:	9a02      	ldr	r2, [sp, #8]
 802127a:	fb07 6602 	mla	r6, r7, r2, r6
 802127e:	9f03      	ldr	r7, [sp, #12]
 8021280:	0872      	lsrs	r2, r6, #1
 8021282:	07f6      	lsls	r6, r6, #31
 8021284:	5cba      	ldrb	r2, [r7, r2]
 8021286:	bf54      	ite	pl
 8021288:	f002 020f 	andpl.w	r2, r2, #15
 802128c:	1112      	asrmi	r2, r2, #4
 802128e:	eb02 1202 	add.w	r2, r2, r2, lsl #4
 8021292:	b2d2      	uxtb	r2, r2
 8021294:	2aff      	cmp	r2, #255	@ 0xff
 8021296:	d118      	bne.n	80212ca <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x192>
 8021298:	f06f 0601 	mvn.w	r6, #1
 802129c:	f8d8 2000 	ldr.w	r2, [r8]
 80212a0:	fb06 f705 	mul.w	r7, r6, r5
 80212a4:	f2a6 76fe 	subw	r6, r6, #2046	@ 0x7fe
 80212a8:	ea06 2c12 	and.w	ip, r6, r2, lsr #8
 80212ac:	0956      	lsrs	r6, r2, #5
 80212ae:	f3c2 02c4 	ubfx	r2, r2, #3, #5
 80212b2:	f406 66fc 	and.w	r6, r6, #2016	@ 0x7e0
 80212b6:	ea4c 0606 	orr.w	r6, ip, r6
 80212ba:	4316      	orrs	r6, r2
 80212bc:	53e6      	strh	r6, [r4, r7]
 80212be:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 80212c0:	3d01      	subs	r5, #1
 80212c2:	4410      	add	r0, r2
 80212c4:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 80212c6:	4411      	add	r1, r2
 80212c8:	e787      	b.n	80211da <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa2>
 80212ca:	2a00      	cmp	r2, #0
 80212cc:	d0f7      	beq.n	80212be <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x186>
 80212ce:	f06f 0601 	mvn.w	r6, #1
 80212d2:	f8d8 c000 	ldr.w	ip, [r8]
 80212d6:	fa1f f982 	uxth.w	r9, r2
 80212da:	43d2      	mvns	r2, r2
 80212dc:	436e      	muls	r6, r5
 80212de:	f3cc 2a07 	ubfx	sl, ip, #8, #8
 80212e2:	b2d2      	uxtb	r2, r2
 80212e4:	f834 e006 	ldrh.w	lr, [r4, r6]
 80212e8:	fb1a fa09 	smulbb	sl, sl, r9
 80212ec:	9604      	str	r6, [sp, #16]
 80212ee:	f3cc 4607 	ubfx	r6, ip, #16, #8
 80212f2:	ea4f 272e 	mov.w	r7, lr, asr #8
 80212f6:	fb16 f609 	smulbb	r6, r6, r9
 80212fa:	fa5f fc8c 	uxtb.w	ip, ip
 80212fe:	f007 07f8 	and.w	r7, r7, #248	@ 0xf8
 8021302:	fb1c fc09 	smulbb	ip, ip, r9
 8021306:	fb07 6702 	mla	r7, r7, r2, r6
 802130a:	ea4f 06ee 	mov.w	r6, lr, asr #3
 802130e:	ea4f 0ece 	mov.w	lr, lr, lsl #3
 8021312:	b2bf      	uxth	r7, r7
 8021314:	f006 06fc 	and.w	r6, r6, #252	@ 0xfc
 8021318:	fa5f fe8e 	uxtb.w	lr, lr
 802131c:	fb06 a602 	mla	r6, r6, r2, sl
 8021320:	fb0e cc02 	mla	ip, lr, r2, ip
 8021324:	1c7a      	adds	r2, r7, #1
 8021326:	b2b6      	uxth	r6, r6
 8021328:	fa1f fc8c 	uxth.w	ip, ip
 802132c:	eb02 2717 	add.w	r7, r2, r7, lsr #8
 8021330:	9a04      	ldr	r2, [sp, #16]
 8021332:	f10c 0a01 	add.w	sl, ip, #1
 8021336:	f407 4778 	and.w	r7, r7, #63488	@ 0xf800
 802133a:	eb0a 2a1c 	add.w	sl, sl, ip, lsr #8
 802133e:	f3ca 2ac4 	ubfx	sl, sl, #11, #5
 8021342:	ea4a 0707 	orr.w	r7, sl, r7
 8021346:	f106 0a01 	add.w	sl, r6, #1
 802134a:	eb0a 2a16 	add.w	sl, sl, r6, lsr #8
 802134e:	ea4f 1a5a 	mov.w	sl, sl, lsr #5
 8021352:	f40a 6afc 	and.w	sl, sl, #2016	@ 0x7e0
 8021356:	ea47 070a 	orr.w	r7, r7, sl
 802135a:	52a7      	strh	r7, [r4, r2]
 802135c:	e7af      	b.n	80212be <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x186>
 802135e:	f04f 0e00 	mov.w	lr, #0
 8021362:	eba3 020e 	sub.w	r2, r3, lr
 8021366:	2a00      	cmp	r2, #0
 8021368:	f77f af3a 	ble.w	80211e0 <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa8>
 802136c:	1402      	asrs	r2, r0, #16
 802136e:	9e02      	ldr	r6, [sp, #8]
 8021370:	140d      	asrs	r5, r1, #16
 8021372:	fb06 2505 	mla	r5, r6, r5, r2
 8021376:	9e03      	ldr	r6, [sp, #12]
 8021378:	086a      	lsrs	r2, r5, #1
 802137a:	07ed      	lsls	r5, r5, #31
 802137c:	5cb2      	ldrb	r2, [r6, r2]
 802137e:	bf54      	ite	pl
 8021380:	f002 020f 	andpl.w	r2, r2, #15
 8021384:	1112      	asrmi	r2, r2, #4
 8021386:	eb02 1202 	add.w	r2, r2, r2, lsl #4
 802138a:	b2d2      	uxtb	r2, r2
 802138c:	2aff      	cmp	r2, #255	@ 0xff
 802138e:	d115      	bne.n	80213bc <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x284>
 8021390:	f8d8 5000 	ldr.w	r5, [r8]
 8021394:	f6a2 02ff 	subw	r2, r2, #2303	@ 0x8ff
 8021398:	ea02 2615 	and.w	r6, r2, r5, lsr #8
 802139c:	096a      	lsrs	r2, r5, #5
 802139e:	f3c5 05c4 	ubfx	r5, r5, #3, #5
 80213a2:	f402 62fc 	and.w	r2, r2, #2016	@ 0x7e0
 80213a6:	4332      	orrs	r2, r6
 80213a8:	432a      	orrs	r2, r5
 80213aa:	f824 201e 	strh.w	r2, [r4, lr, lsl #1]
 80213ae:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 80213b0:	f10e 0e01 	add.w	lr, lr, #1
 80213b4:	4410      	add	r0, r2
 80213b6:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 80213b8:	4411      	add	r1, r2
 80213ba:	e7d2      	b.n	8021362 <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x22a>
 80213bc:	2a00      	cmp	r2, #0
 80213be:	d0f6      	beq.n	80213ae <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x276>
 80213c0:	f8d8 7000 	ldr.w	r7, [r8]
 80213c4:	fa1f f982 	uxth.w	r9, r2
 80213c8:	f834 c01e 	ldrh.w	ip, [r4, lr, lsl #1]
 80213cc:	43d2      	mvns	r2, r2
 80213ce:	f3c7 4507 	ubfx	r5, r7, #16, #8
 80213d2:	f3c7 2a07 	ubfx	sl, r7, #8, #8
 80213d6:	ea4f 262c 	mov.w	r6, ip, asr #8
 80213da:	fb15 f509 	smulbb	r5, r5, r9
 80213de:	b2d2      	uxtb	r2, r2
 80213e0:	f006 06f8 	and.w	r6, r6, #248	@ 0xf8
 80213e4:	b2ff      	uxtb	r7, r7
 80213e6:	fb1a fa09 	smulbb	sl, sl, r9
 80213ea:	fb06 5602 	mla	r6, r6, r2, r5
 80213ee:	ea4f 05ec 	mov.w	r5, ip, asr #3
 80213f2:	fb17 f709 	smulbb	r7, r7, r9
 80213f6:	ea4f 0ccc 	mov.w	ip, ip, lsl #3
 80213fa:	b2b6      	uxth	r6, r6
 80213fc:	f005 05fc 	and.w	r5, r5, #252	@ 0xfc
 8021400:	fa5f fc8c 	uxtb.w	ip, ip
 8021404:	fb05 a502 	mla	r5, r5, r2, sl
 8021408:	fb0c 7702 	mla	r7, ip, r2, r7
 802140c:	1c72      	adds	r2, r6, #1
 802140e:	b2ad      	uxth	r5, r5
 8021410:	b2bf      	uxth	r7, r7
 8021412:	eb02 2616 	add.w	r6, r2, r6, lsr #8
 8021416:	f107 0a01 	add.w	sl, r7, #1
 802141a:	f406 4678 	and.w	r6, r6, #63488	@ 0xf800
 802141e:	eb0a 2a17 	add.w	sl, sl, r7, lsr #8
 8021422:	f3ca 2ac4 	ubfx	sl, sl, #11, #5
 8021426:	ea4a 0606 	orr.w	r6, sl, r6
 802142a:	f105 0a01 	add.w	sl, r5, #1
 802142e:	eb0a 2a15 	add.w	sl, sl, r5, lsr #8
 8021432:	ea4f 1a5a 	mov.w	sl, sl, lsr #5
 8021436:	f40a 6afc 	and.w	sl, sl, #2016	@ 0x7e0
 802143a:	ea46 060a 	orr.w	r6, r6, sl
 802143e:	f824 601e 	strh.w	r6, [r4, lr, lsl #1]
 8021442:	e7b4      	b.n	80213ae <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x276>
 8021444:	b007      	add	sp, #28
 8021446:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 802144a:	bf00      	nop
 802144c:	2400b88c 	.word	0x2400b88c

08021450 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGAD1Ev>:
 8021450:	4770      	bx	lr

08021452 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GAD1Ev>:
 8021452:	4770      	bx	lr

08021454 <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGAD1Ev>:
 8021454:	4770      	bx	lr

08021456 <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GAD1Ev>:
 8021456:	4770      	bx	lr

08021458 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGAD1Ev>:
 8021458:	4770      	bx	lr

0802145a <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GAD1Ev>:
 802145a:	4770      	bx	lr

0802145c <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGAD1Ev>:
 802145c:	4770      	bx	lr

0802145e <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GAD1Ev>:
 802145e:	4770      	bx	lr

08021460 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGAD1Ev>:
 8021460:	4770      	bx	lr

08021462 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GAD1Ev>:
 8021462:	4770      	bx	lr

08021464 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGAD1Ev>:
 8021464:	4770      	bx	lr

08021466 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GAD1Ev>:
 8021466:	4770      	bx	lr

08021468 <_ZN8touchgfx8LCD16bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGAD1Ev>:
 8021468:	4770      	bx	lr

0802146a <_ZN8touchgfx8LCD16bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GAD1Ev>:
 802146a:	4770      	bx	lr

0802146c <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGAD1Ev>:
 802146c:	4770      	bx	lr

0802146e <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GAD1Ev>:
 802146e:	4770      	bx	lr

08021470 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGAD1Ev>:
 8021470:	4770      	bx	lr

08021472 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GAD1Ev>:
 8021472:	4770      	bx	lr

08021474 <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGAD1Ev>:
 8021474:	4770      	bx	lr

08021476 <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GAD1Ev>:
 8021476:	4770      	bx	lr

08021478 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGAD1Ev>:
 8021478:	4770      	bx	lr

0802147a <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GAD1Ev>:
 802147a:	4770      	bx	lr

0802147c <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGAD1Ev>:
 802147c:	4770      	bx	lr

0802147e <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GAD1Ev>:
 802147e:	4770      	bx	lr

08021480 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGAD1Ev>:
 8021480:	4770      	bx	lr

08021482 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GAD1Ev>:
 8021482:	4770      	bx	lr

08021484 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGAD1Ev>:
 8021484:	4770      	bx	lr

08021486 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GAD1Ev>:
 8021486:	4770      	bx	lr

08021488 <_ZNK8touchgfx8LCD16bpp17framebufferStrideEv>:
 8021488:	b508      	push	{r3, lr}
 802148a:	4b06      	ldr	r3, [pc, #24]	@ (80214a4 <_ZNK8touchgfx8LCD16bpp17framebufferStrideEv+0x1c>)
 802148c:	8818      	ldrh	r0, [r3, #0]
 802148e:	b928      	cbnz	r0, 802149c <_ZNK8touchgfx8LCD16bpp17framebufferStrideEv+0x14>
 8021490:	4b05      	ldr	r3, [pc, #20]	@ (80214a8 <_ZNK8touchgfx8LCD16bpp17framebufferStrideEv+0x20>)
 8021492:	2150      	movs	r1, #80	@ 0x50
 8021494:	4a05      	ldr	r2, [pc, #20]	@ (80214ac <_ZNK8touchgfx8LCD16bpp17framebufferStrideEv+0x24>)
 8021496:	4806      	ldr	r0, [pc, #24]	@ (80214b0 <_ZNK8touchgfx8LCD16bpp17framebufferStrideEv+0x28>)
 8021498:	f009 fbd4 	bl	802ac44 <__assert_func>
 802149c:	0040      	lsls	r0, r0, #1
 802149e:	b280      	uxth	r0, r0
 80214a0:	bd08      	pop	{r3, pc}
 80214a2:	bf00      	nop
 80214a4:	2400b87e 	.word	0x2400b87e
 80214a8:	0802ff17 	.word	0x0802ff17
 80214ac:	08030510 	.word	0x08030510
 80214b0:	0802ff59 	.word	0x0802ff59

080214b4 <_ZN8touchgfx8LCD16bpp8blitCopyEPKtRKNS_4RectES5_hb>:
 80214b4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80214b8:	b08b      	sub	sp, #44	@ 0x2c
 80214ba:	460f      	mov	r7, r1
 80214bc:	4616      	mov	r6, r2
 80214be:	f89d b050 	ldrb.w	fp, [sp, #80]	@ 0x50
 80214c2:	f89d 4054 	ldrb.w	r4, [sp, #84]	@ 0x54
 80214c6:	f1bb 0f00 	cmp.w	fp, #0
 80214ca:	d049      	beq.n	8021560 <_ZN8touchgfx8LCD16bpp8blitCopyEPKtRKNS_4RectES5_hb+0xac>
 80214cc:	6810      	ldr	r0, [r2, #0]
 80214ce:	ad06      	add	r5, sp, #24
 80214d0:	6851      	ldr	r1, [r2, #4]
 80214d2:	c503      	stmia	r5!, {r0, r1}
 80214d4:	6818      	ldr	r0, [r3, #0]
 80214d6:	ad08      	add	r5, sp, #32
 80214d8:	6859      	ldr	r1, [r3, #4]
 80214da:	c503      	stmia	r5!, {r0, r1}
 80214dc:	a806      	add	r0, sp, #24
 80214de:	f7fa f883 	bl	801b5e8 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 80214e2:	4631      	mov	r1, r6
 80214e4:	a808      	add	r0, sp, #32
 80214e6:	f7fa f8a7 	bl	801b638 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
 80214ea:	f9bd 2020 	ldrsh.w	r2, [sp, #32]
 80214ee:	f9bd 3022 	ldrsh.w	r3, [sp, #34]	@ 0x22
 80214f2:	f8bd 601c 	ldrh.w	r6, [sp, #28]
 80214f6:	f9bd 8024 	ldrsh.w	r8, [sp, #36]	@ 0x24
 80214fa:	fb16 2103 	smlabb	r1, r6, r3, r2
 80214fe:	f9bd 5026 	ldrsh.w	r5, [sp, #38]	@ 0x26
 8021502:	eb07 0641 	add.w	r6, r7, r1, lsl #1
 8021506:	f8bd 1018 	ldrh.w	r1, [sp, #24]
 802150a:	4f5f      	ldr	r7, [pc, #380]	@ (8021688 <_ZN8touchgfx8LCD16bpp8blitCopyEPKtRKNS_4RectES5_hb+0x1d4>)
 802150c:	440a      	add	r2, r1
 802150e:	6838      	ldr	r0, [r7, #0]
 8021510:	46b9      	mov	r9, r7
 8021512:	f8ad 2020 	strh.w	r2, [sp, #32]
 8021516:	f8bd 201a 	ldrh.w	r2, [sp, #26]
 802151a:	4413      	add	r3, r2
 802151c:	f8ad 3022 	strh.w	r3, [sp, #34]	@ 0x22
 8021520:	6803      	ldr	r3, [r0, #0]
 8021522:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8021524:	4798      	blx	r3
 8021526:	f1bb 0fff 	cmp.w	fp, #255	@ 0xff
 802152a:	d01c      	beq.n	8021566 <_ZN8touchgfx8LCD16bpp8blitCopyEPKtRKNS_4RectES5_hb+0xb2>
 802152c:	f010 0f04 	tst.w	r0, #4
 8021530:	d01d      	beq.n	802156e <_ZN8touchgfx8LCD16bpp8blitCopyEPKtRKNS_4RectES5_hb+0xba>
 8021532:	f8d9 0000 	ldr.w	r0, [r9]
 8021536:	2700      	movs	r7, #0
 8021538:	b2ad      	uxth	r5, r5
 802153a:	f8bd 3022 	ldrh.w	r3, [sp, #34]	@ 0x22
 802153e:	6801      	ldr	r1, [r0, #0]
 8021540:	f8bd 2020 	ldrh.w	r2, [sp, #32]
 8021544:	f8cd b00c 	str.w	fp, [sp, #12]
 8021548:	9501      	str	r5, [sp, #4]
 802154a:	e9cd 4704 	strd	r4, r7, [sp, #16]
 802154e:	f8bd 401c 	ldrh.w	r4, [sp, #28]
 8021552:	9402      	str	r4, [sp, #8]
 8021554:	fa1f f488 	uxth.w	r4, r8
 8021558:	9400      	str	r4, [sp, #0]
 802155a:	6c4c      	ldr	r4, [r1, #68]	@ 0x44
 802155c:	4631      	mov	r1, r6
 802155e:	47a0      	blx	r4
 8021560:	b00b      	add	sp, #44	@ 0x2c
 8021562:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8021566:	b914      	cbnz	r4, 802156e <_ZN8touchgfx8LCD16bpp8blitCopyEPKtRKNS_4RectES5_hb+0xba>
 8021568:	f010 0f01 	tst.w	r0, #1
 802156c:	e7e0      	b.n	8021530 <_ZN8touchgfx8LCD16bpp8blitCopyEPKtRKNS_4RectES5_hb+0x7c>
 802156e:	f8d9 0000 	ldr.w	r0, [r9]
 8021572:	ea4f 0748 	mov.w	r7, r8, lsl #1
 8021576:	6803      	ldr	r3, [r0, #0]
 8021578:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 802157a:	4798      	blx	r3
 802157c:	4b43      	ldr	r3, [pc, #268]	@ (802168c <_ZN8touchgfx8LCD16bpp8blitCopyEPKtRKNS_4RectES5_hb+0x1d8>)
 802157e:	f9bd 4022 	ldrsh.w	r4, [sp, #34]	@ 0x22
 8021582:	f1bb 0fff 	cmp.w	fp, #255	@ 0xff
 8021586:	881a      	ldrh	r2, [r3, #0]
 8021588:	469a      	mov	sl, r3
 802158a:	f9bd 1020 	ldrsh.w	r1, [sp, #32]
 802158e:	fb05 f502 	mul.w	r5, r5, r2
 8021592:	fb02 1404 	mla	r4, r2, r4, r1
 8021596:	eb00 0444 	add.w	r4, r0, r4, lsl #1
 802159a:	d059      	beq.n	8021650 <_ZN8touchgfx8LCD16bpp8blitCopyEPKtRKNS_4RectES5_hb+0x19c>
 802159c:	f1cb 09ff 	rsb	r9, fp, #255	@ 0xff
 80215a0:	eb04 0545 	add.w	r5, r4, r5, lsl #1
 80215a4:	fa1f f28b 	uxth.w	r2, fp
 80215a8:	469e      	mov	lr, r3
 80215aa:	fa1f f989 	uxth.w	r9, r9
 80215ae:	42ac      	cmp	r4, r5
 80215b0:	d264      	bcs.n	802167c <_ZN8touchgfx8LCD16bpp8blitCopyEPKtRKNS_4RectES5_hb+0x1c8>
 80215b2:	eb04 0a07 	add.w	sl, r4, r7
 80215b6:	4554      	cmp	r4, sl
 80215b8:	d23d      	bcs.n	8021636 <_ZN8touchgfx8LCD16bpp8blitCopyEPKtRKNS_4RectES5_hb+0x182>
 80215ba:	8821      	ldrh	r1, [r4, #0]
 80215bc:	f836 3b02 	ldrh.w	r3, [r6], #2
 80215c0:	1208      	asrs	r0, r1, #8
 80215c2:	ea4f 2c23 	mov.w	ip, r3, asr #8
 80215c6:	f000 00f8 	and.w	r0, r0, #248	@ 0xf8
 80215ca:	ea4f 0be1 	mov.w	fp, r1, asr #3
 80215ce:	f00c 0cf8 	and.w	ip, ip, #248	@ 0xf8
 80215d2:	00c9      	lsls	r1, r1, #3
 80215d4:	fb10 f009 	smulbb	r0, r0, r9
 80215d8:	f00b 0bfc 	and.w	fp, fp, #252	@ 0xfc
 80215dc:	b2c9      	uxtb	r1, r1
 80215de:	fb0c 0c02 	mla	ip, ip, r2, r0
 80215e2:	10d8      	asrs	r0, r3, #3
 80215e4:	fb1b fb09 	smulbb	fp, fp, r9
 80215e8:	00db      	lsls	r3, r3, #3
 80215ea:	fa1f fc8c 	uxth.w	ip, ip
 80215ee:	f000 00fc 	and.w	r0, r0, #252	@ 0xfc
 80215f2:	fb11 f109 	smulbb	r1, r1, r9
 80215f6:	b2db      	uxtb	r3, r3
 80215f8:	fb00 b002 	mla	r0, r0, r2, fp
 80215fc:	f10c 0b01 	add.w	fp, ip, #1
 8021600:	fb03 1302 	mla	r3, r3, r2, r1
 8021604:	eb0b 2c1c 	add.w	ip, fp, ip, lsr #8
 8021608:	b29b      	uxth	r3, r3
 802160a:	b280      	uxth	r0, r0
 802160c:	f40c 4b78 	and.w	fp, ip, #63488	@ 0xf800
 8021610:	f103 0c01 	add.w	ip, r3, #1
 8021614:	eb0c 2c13 	add.w	ip, ip, r3, lsr #8
 8021618:	1c43      	adds	r3, r0, #1
 802161a:	eb03 2010 	add.w	r0, r3, r0, lsr #8
 802161e:	f3cc 2cc4 	ubfx	ip, ip, #11, #5
 8021622:	0940      	lsrs	r0, r0, #5
 8021624:	ea4c 0c0b 	orr.w	ip, ip, fp
 8021628:	f400 60fc 	and.w	r0, r0, #2016	@ 0x7e0
 802162c:	ea4c 0c00 	orr.w	ip, ip, r0
 8021630:	f824 cb02 	strh.w	ip, [r4], #2
 8021634:	e7bf      	b.n	80215b6 <_ZN8touchgfx8LCD16bpp8blitCopyEPKtRKNS_4RectES5_hb+0x102>
 8021636:	f8be 3000 	ldrh.w	r3, [lr]
 802163a:	eba3 0308 	sub.w	r3, r3, r8
 802163e:	eb04 0443 	add.w	r4, r4, r3, lsl #1
 8021642:	f9bd 301c 	ldrsh.w	r3, [sp, #28]
 8021646:	eba3 0308 	sub.w	r3, r3, r8
 802164a:	eb06 0643 	add.w	r6, r6, r3, lsl #1
 802164e:	e7ae      	b.n	80215ae <_ZN8touchgfx8LCD16bpp8blitCopyEPKtRKNS_4RectES5_hb+0xfa>
 8021650:	eb04 0545 	add.w	r5, r4, r5, lsl #1
 8021654:	f8d9 0000 	ldr.w	r0, [r9]
 8021658:	42ac      	cmp	r4, r5
 802165a:	6803      	ldr	r3, [r0, #0]
 802165c:	d20e      	bcs.n	802167c <_ZN8touchgfx8LCD16bpp8blitCopyEPKtRKNS_4RectES5_hb+0x1c8>
 802165e:	f8d3 8034 	ldr.w	r8, [r3, #52]	@ 0x34
 8021662:	4632      	mov	r2, r6
 8021664:	463b      	mov	r3, r7
 8021666:	4621      	mov	r1, r4
 8021668:	47c0      	blx	r8
 802166a:	f8ba 3000 	ldrh.w	r3, [sl]
 802166e:	eb04 0443 	add.w	r4, r4, r3, lsl #1
 8021672:	f9bd 301c 	ldrsh.w	r3, [sp, #28]
 8021676:	eb06 0643 	add.w	r6, r6, r3, lsl #1
 802167a:	e7eb      	b.n	8021654 <_ZN8touchgfx8LCD16bpp8blitCopyEPKtRKNS_4RectES5_hb+0x1a0>
 802167c:	4b02      	ldr	r3, [pc, #8]	@ (8021688 <_ZN8touchgfx8LCD16bpp8blitCopyEPKtRKNS_4RectES5_hb+0x1d4>)
 802167e:	6818      	ldr	r0, [r3, #0]
 8021680:	6803      	ldr	r3, [r0, #0]
 8021682:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8021684:	4798      	blx	r3
 8021686:	e76b      	b.n	8021560 <_ZN8touchgfx8LCD16bpp8blitCopyEPKtRKNS_4RectES5_hb+0xac>
 8021688:	2400b884 	.word	0x2400b884
 802168c:	2400b87e 	.word	0x2400b87e

08021690 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGAD0Ev>:
 8021690:	b510      	push	{r4, lr}
 8021692:	4604      	mov	r4, r0
 8021694:	2104      	movs	r1, #4
 8021696:	f009 faa6 	bl	802abe6 <_ZdlPvj>
 802169a:	4620      	mov	r0, r4
 802169c:	bd10      	pop	{r4, pc}

0802169e <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GAD0Ev>:
 802169e:	b510      	push	{r4, lr}
 80216a0:	4604      	mov	r4, r0
 80216a2:	2104      	movs	r1, #4
 80216a4:	f009 fa9f 	bl	802abe6 <_ZdlPvj>
 80216a8:	4620      	mov	r0, r4
 80216aa:	bd10      	pop	{r4, pc}

080216ac <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGAD0Ev>:
 80216ac:	b510      	push	{r4, lr}
 80216ae:	4604      	mov	r4, r0
 80216b0:	2104      	movs	r1, #4
 80216b2:	f009 fa98 	bl	802abe6 <_ZdlPvj>
 80216b6:	4620      	mov	r0, r4
 80216b8:	bd10      	pop	{r4, pc}

080216ba <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GAD0Ev>:
 80216ba:	b510      	push	{r4, lr}
 80216bc:	4604      	mov	r4, r0
 80216be:	2104      	movs	r1, #4
 80216c0:	f009 fa91 	bl	802abe6 <_ZdlPvj>
 80216c4:	4620      	mov	r0, r4
 80216c6:	bd10      	pop	{r4, pc}

080216c8 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGAD0Ev>:
 80216c8:	b510      	push	{r4, lr}
 80216ca:	4604      	mov	r4, r0
 80216cc:	2104      	movs	r1, #4
 80216ce:	f009 fa8a 	bl	802abe6 <_ZdlPvj>
 80216d2:	4620      	mov	r0, r4
 80216d4:	bd10      	pop	{r4, pc}

080216d6 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GAD0Ev>:
 80216d6:	b510      	push	{r4, lr}
 80216d8:	4604      	mov	r4, r0
 80216da:	2104      	movs	r1, #4
 80216dc:	f009 fa83 	bl	802abe6 <_ZdlPvj>
 80216e0:	4620      	mov	r0, r4
 80216e2:	bd10      	pop	{r4, pc}

080216e4 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGAD0Ev>:
 80216e4:	b510      	push	{r4, lr}
 80216e6:	4604      	mov	r4, r0
 80216e8:	2104      	movs	r1, #4
 80216ea:	f009 fa7c 	bl	802abe6 <_ZdlPvj>
 80216ee:	4620      	mov	r0, r4
 80216f0:	bd10      	pop	{r4, pc}

080216f2 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GAD0Ev>:
 80216f2:	b510      	push	{r4, lr}
 80216f4:	4604      	mov	r4, r0
 80216f6:	2104      	movs	r1, #4
 80216f8:	f009 fa75 	bl	802abe6 <_ZdlPvj>
 80216fc:	4620      	mov	r0, r4
 80216fe:	bd10      	pop	{r4, pc}

08021700 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGAD0Ev>:
 8021700:	b510      	push	{r4, lr}
 8021702:	4604      	mov	r4, r0
 8021704:	2104      	movs	r1, #4
 8021706:	f009 fa6e 	bl	802abe6 <_ZdlPvj>
 802170a:	4620      	mov	r0, r4
 802170c:	bd10      	pop	{r4, pc}

0802170e <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GAD0Ev>:
 802170e:	b510      	push	{r4, lr}
 8021710:	4604      	mov	r4, r0
 8021712:	2104      	movs	r1, #4
 8021714:	f009 fa67 	bl	802abe6 <_ZdlPvj>
 8021718:	4620      	mov	r0, r4
 802171a:	bd10      	pop	{r4, pc}

0802171c <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGAD0Ev>:
 802171c:	b510      	push	{r4, lr}
 802171e:	4604      	mov	r4, r0
 8021720:	2104      	movs	r1, #4
 8021722:	f009 fa60 	bl	802abe6 <_ZdlPvj>
 8021726:	4620      	mov	r0, r4
 8021728:	bd10      	pop	{r4, pc}

0802172a <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GAD0Ev>:
 802172a:	b510      	push	{r4, lr}
 802172c:	4604      	mov	r4, r0
 802172e:	2104      	movs	r1, #4
 8021730:	f009 fa59 	bl	802abe6 <_ZdlPvj>
 8021734:	4620      	mov	r0, r4
 8021736:	bd10      	pop	{r4, pc}

08021738 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGAD0Ev>:
 8021738:	b510      	push	{r4, lr}
 802173a:	4604      	mov	r4, r0
 802173c:	2104      	movs	r1, #4
 802173e:	f009 fa52 	bl	802abe6 <_ZdlPvj>
 8021742:	4620      	mov	r0, r4
 8021744:	bd10      	pop	{r4, pc}

08021746 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GAD0Ev>:
 8021746:	b510      	push	{r4, lr}
 8021748:	4604      	mov	r4, r0
 802174a:	2104      	movs	r1, #4
 802174c:	f009 fa4b 	bl	802abe6 <_ZdlPvj>
 8021750:	4620      	mov	r0, r4
 8021752:	bd10      	pop	{r4, pc}

08021754 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGAD0Ev>:
 8021754:	b510      	push	{r4, lr}
 8021756:	4604      	mov	r4, r0
 8021758:	2104      	movs	r1, #4
 802175a:	f009 fa44 	bl	802abe6 <_ZdlPvj>
 802175e:	4620      	mov	r0, r4
 8021760:	bd10      	pop	{r4, pc}

08021762 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GAD0Ev>:
 8021762:	b510      	push	{r4, lr}
 8021764:	4604      	mov	r4, r0
 8021766:	2104      	movs	r1, #4
 8021768:	f009 fa3d 	bl	802abe6 <_ZdlPvj>
 802176c:	4620      	mov	r0, r4
 802176e:	bd10      	pop	{r4, pc}

08021770 <_ZN8touchgfx8LCD16bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGAD0Ev>:
 8021770:	b510      	push	{r4, lr}
 8021772:	4604      	mov	r4, r0
 8021774:	2104      	movs	r1, #4
 8021776:	f009 fa36 	bl	802abe6 <_ZdlPvj>
 802177a:	4620      	mov	r0, r4
 802177c:	bd10      	pop	{r4, pc}

0802177e <_ZN8touchgfx8LCD16bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GAD0Ev>:
 802177e:	b510      	push	{r4, lr}
 8021780:	4604      	mov	r4, r0
 8021782:	2104      	movs	r1, #4
 8021784:	f009 fa2f 	bl	802abe6 <_ZdlPvj>
 8021788:	4620      	mov	r0, r4
 802178a:	bd10      	pop	{r4, pc}

0802178c <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGAD0Ev>:
 802178c:	b510      	push	{r4, lr}
 802178e:	4604      	mov	r4, r0
 8021790:	2104      	movs	r1, #4
 8021792:	f009 fa28 	bl	802abe6 <_ZdlPvj>
 8021796:	4620      	mov	r0, r4
 8021798:	bd10      	pop	{r4, pc}

0802179a <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GAD0Ev>:
 802179a:	b510      	push	{r4, lr}
 802179c:	4604      	mov	r4, r0
 802179e:	2104      	movs	r1, #4
 80217a0:	f009 fa21 	bl	802abe6 <_ZdlPvj>
 80217a4:	4620      	mov	r0, r4
 80217a6:	bd10      	pop	{r4, pc}

080217a8 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGAD0Ev>:
 80217a8:	b510      	push	{r4, lr}
 80217aa:	4604      	mov	r4, r0
 80217ac:	2104      	movs	r1, #4
 80217ae:	f009 fa1a 	bl	802abe6 <_ZdlPvj>
 80217b2:	4620      	mov	r0, r4
 80217b4:	bd10      	pop	{r4, pc}

080217b6 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GAD0Ev>:
 80217b6:	b510      	push	{r4, lr}
 80217b8:	4604      	mov	r4, r0
 80217ba:	2104      	movs	r1, #4
 80217bc:	f009 fa13 	bl	802abe6 <_ZdlPvj>
 80217c0:	4620      	mov	r0, r4
 80217c2:	bd10      	pop	{r4, pc}

080217c4 <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGAD0Ev>:
 80217c4:	b510      	push	{r4, lr}
 80217c6:	4604      	mov	r4, r0
 80217c8:	2104      	movs	r1, #4
 80217ca:	f009 fa0c 	bl	802abe6 <_ZdlPvj>
 80217ce:	4620      	mov	r0, r4
 80217d0:	bd10      	pop	{r4, pc}

080217d2 <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GAD0Ev>:
 80217d2:	b510      	push	{r4, lr}
 80217d4:	4604      	mov	r4, r0
 80217d6:	2104      	movs	r1, #4
 80217d8:	f009 fa05 	bl	802abe6 <_ZdlPvj>
 80217dc:	4620      	mov	r0, r4
 80217de:	bd10      	pop	{r4, pc}

080217e0 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGAD0Ev>:
 80217e0:	b510      	push	{r4, lr}
 80217e2:	4604      	mov	r4, r0
 80217e4:	2104      	movs	r1, #4
 80217e6:	f009 f9fe 	bl	802abe6 <_ZdlPvj>
 80217ea:	4620      	mov	r0, r4
 80217ec:	bd10      	pop	{r4, pc}

080217ee <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GAD0Ev>:
 80217ee:	b510      	push	{r4, lr}
 80217f0:	4604      	mov	r4, r0
 80217f2:	2104      	movs	r1, #4
 80217f4:	f009 f9f7 	bl	802abe6 <_ZdlPvj>
 80217f8:	4620      	mov	r0, r4
 80217fa:	bd10      	pop	{r4, pc}

080217fc <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGAD0Ev>:
 80217fc:	b510      	push	{r4, lr}
 80217fe:	4604      	mov	r4, r0
 8021800:	2104      	movs	r1, #4
 8021802:	f009 f9f0 	bl	802abe6 <_ZdlPvj>
 8021806:	4620      	mov	r0, r4
 8021808:	bd10      	pop	{r4, pc}

0802180a <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GAD0Ev>:
 802180a:	b510      	push	{r4, lr}
 802180c:	4604      	mov	r4, r0
 802180e:	2104      	movs	r1, #4
 8021810:	f009 f9e9 	bl	802abe6 <_ZdlPvj>
 8021814:	4620      	mov	r0, r4
 8021816:	bd10      	pop	{r4, pc}

08021818 <_ZN8touchgfx8LCD16bpp8fillRectERKNS_4RectENS_9colortypeEh>:
 8021818:	b5f0      	push	{r4, r5, r6, r7, lr}
 802181a:	4606      	mov	r6, r0
 802181c:	b087      	sub	sp, #28
 802181e:	460c      	mov	r4, r1
 8021820:	4617      	mov	r7, r2
 8021822:	461d      	mov	r5, r3
 8021824:	b333      	cbz	r3, 8021874 <_ZN8touchgfx8LCD16bpp8fillRectERKNS_4RectENS_9colortypeEh+0x5c>
 8021826:	4608      	mov	r0, r1
 8021828:	f7f6 fb6f 	bl	8017f0a <_ZNK8touchgfx4Rect7isEmptyEv>
 802182c:	bb10      	cbnz	r0, 8021874 <_ZN8touchgfx8LCD16bpp8fillRectERKNS_4RectENS_9colortypeEh+0x5c>
 802182e:	6820      	ldr	r0, [r4, #0]
 8021830:	ab04      	add	r3, sp, #16
 8021832:	6861      	ldr	r1, [r4, #4]
 8021834:	4c1b      	ldr	r4, [pc, #108]	@ (80218a4 <_ZN8touchgfx8LCD16bpp8fillRectERKNS_4RectENS_9colortypeEh+0x8c>)
 8021836:	c303      	stmia	r3!, {r0, r1}
 8021838:	a804      	add	r0, sp, #16
 802183a:	f7f9 fed5 	bl	801b5e8 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 802183e:	6820      	ldr	r0, [r4, #0]
 8021840:	6803      	ldr	r3, [r0, #0]
 8021842:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8021844:	4798      	blx	r3
 8021846:	2dff      	cmp	r5, #255	@ 0xff
 8021848:	d016      	beq.n	8021878 <_ZN8touchgfx8LCD16bpp8fillRectERKNS_4RectENS_9colortypeEh+0x60>
 802184a:	f010 0f08 	tst.w	r0, #8
 802184e:	6820      	ldr	r0, [r4, #0]
 8021850:	d015      	beq.n	802187e <_ZN8touchgfx8LCD16bpp8fillRectERKNS_4RectENS_9colortypeEh+0x66>
 8021852:	2400      	movs	r4, #0
 8021854:	6801      	ldr	r1, [r0, #0]
 8021856:	f8bd 3012 	ldrh.w	r3, [sp, #18]
 802185a:	f8bd 2010 	ldrh.w	r2, [sp, #16]
 802185e:	e9cd 5402 	strd	r5, r4, [sp, #8]
 8021862:	f8bd 4016 	ldrh.w	r4, [sp, #22]
 8021866:	9401      	str	r4, [sp, #4]
 8021868:	f8bd 4014 	ldrh.w	r4, [sp, #20]
 802186c:	9400      	str	r4, [sp, #0]
 802186e:	6dcc      	ldr	r4, [r1, #92]	@ 0x5c
 8021870:	4639      	mov	r1, r7
 8021872:	47a0      	blx	r4
 8021874:	b007      	add	sp, #28
 8021876:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8021878:	f010 0f02 	tst.w	r0, #2
 802187c:	e7e7      	b.n	802184e <_ZN8touchgfx8LCD16bpp8fillRectERKNS_4RectENS_9colortypeEh+0x36>
 802187e:	6803      	ldr	r3, [r0, #0]
 8021880:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8021882:	4798      	blx	r3
 8021884:	4b08      	ldr	r3, [pc, #32]	@ (80218a8 <_ZN8touchgfx8LCD16bpp8fillRectERKNS_4RectENS_9colortypeEh+0x90>)
 8021886:	4601      	mov	r1, r0
 8021888:	4630      	mov	r0, r6
 802188a:	881a      	ldrh	r2, [r3, #0]
 802188c:	6833      	ldr	r3, [r6, #0]
 802188e:	e9cd 7500 	strd	r7, r5, [sp]
 8021892:	69dd      	ldr	r5, [r3, #28]
 8021894:	ab04      	add	r3, sp, #16
 8021896:	47a8      	blx	r5
 8021898:	6820      	ldr	r0, [r4, #0]
 802189a:	6803      	ldr	r3, [r0, #0]
 802189c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 802189e:	4798      	blx	r3
 80218a0:	e7e8      	b.n	8021874 <_ZN8touchgfx8LCD16bpp8fillRectERKNS_4RectENS_9colortypeEh+0x5c>
 80218a2:	bf00      	nop
 80218a4:	2400b884 	.word	0x2400b884
 80218a8:	2400b87e 	.word	0x2400b87e

080218ac <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t>:
 80218ac:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80218b0:	4f97      	ldr	r7, [pc, #604]	@ (8021b10 <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x264>)
 80218b2:	4616      	mov	r6, r2
 80218b4:	b08f      	sub	sp, #60	@ 0x3c
 80218b6:	4604      	mov	r4, r0
 80218b8:	683a      	ldr	r2, [r7, #0]
 80218ba:	4689      	mov	r9, r1
 80218bc:	f892 2048 	ldrb.w	r2, [r2, #72]	@ 0x48
 80218c0:	2a02      	cmp	r2, #2
 80218c2:	d106      	bne.n	80218d2 <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x26>
 80218c4:	4b93      	ldr	r3, [pc, #588]	@ (8021b14 <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x268>)
 80218c6:	f44f 7159 	mov.w	r1, #868	@ 0x364
 80218ca:	4a93      	ldr	r2, [pc, #588]	@ (8021b18 <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x26c>)
 80218cc:	4893      	ldr	r0, [pc, #588]	@ (8021b1c <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x270>)
 80218ce:	f009 f9b9 	bl	802ac44 <__assert_func>
 80218d2:	ad0e      	add	r5, sp, #56	@ 0x38
 80218d4:	f825 3d24 	strh.w	r3, [r5, #-36]!
 80218d8:	4628      	mov	r0, r5
 80218da:	f7fd fad3 	bl	801ee84 <_ZNK8touchgfx6Bitmap9getFormatEv>
 80218de:	6823      	ldr	r3, [r4, #0]
 80218e0:	4680      	mov	r8, r0
 80218e2:	4620      	mov	r0, r4
 80218e4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80218e6:	4798      	blx	r3
 80218e8:	4580      	cmp	r8, r0
 80218ea:	d004      	beq.n	80218f6 <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x4a>
 80218ec:	4b8c      	ldr	r3, [pc, #560]	@ (8021b20 <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x274>)
 80218ee:	f240 3166 	movw	r1, #870	@ 0x366
 80218f2:	4a89      	ldr	r2, [pc, #548]	@ (8021b18 <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x26c>)
 80218f4:	e7ea      	b.n	80218cc <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x20>
 80218f6:	4628      	mov	r0, r5
 80218f8:	f7fd fa3a 	bl	801ed70 <_ZNK8touchgfx6Bitmap7getDataEv>
 80218fc:	4680      	mov	r8, r0
 80218fe:	b920      	cbnz	r0, 802190a <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x5e>
 8021900:	4b88      	ldr	r3, [pc, #544]	@ (8021b24 <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x278>)
 8021902:	f44f 715a 	mov.w	r1, #872	@ 0x368
 8021906:	4a84      	ldr	r2, [pc, #528]	@ (8021b18 <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x26c>)
 8021908:	e7e0      	b.n	80218cc <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x20>
 802190a:	6830      	ldr	r0, [r6, #0]
 802190c:	ab06      	add	r3, sp, #24
 802190e:	6871      	ldr	r1, [r6, #4]
 8021910:	f10d 0b20 	add.w	fp, sp, #32
 8021914:	f9b6 a000 	ldrsh.w	sl, [r6]
 8021918:	c303      	stmia	r3!, {r0, r1}
 802191a:	f8d9 1004 	ldr.w	r1, [r9, #4]
 802191e:	ab08      	add	r3, sp, #32
 8021920:	f8d9 0000 	ldr.w	r0, [r9]
 8021924:	f9b6 9002 	ldrsh.w	r9, [r6, #2]
 8021928:	c303      	stmia	r3!, {r0, r1}
 802192a:	4628      	mov	r0, r5
 802192c:	f7fd f918 	bl	801eb60 <_ZNK8touchgfx6Bitmap8getWidthEv>
 8021930:	4606      	mov	r6, r0
 8021932:	4628      	mov	r0, r5
 8021934:	4d7c      	ldr	r5, [pc, #496]	@ (8021b28 <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x27c>)
 8021936:	f7fd f94d 	bl	801ebd4 <_ZNK8touchgfx6Bitmap9getHeightEv>
 802193a:	f8ad 002e 	strh.w	r0, [sp, #46]	@ 0x2e
 802193e:	a806      	add	r0, sp, #24
 8021940:	f8ad a028 	strh.w	sl, [sp, #40]	@ 0x28
 8021944:	f8ad 902a 	strh.w	r9, [sp, #42]	@ 0x2a
 8021948:	f8ad 602c 	strh.w	r6, [sp, #44]	@ 0x2c
 802194c:	f7f9 fe4c 	bl	801b5e8 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 8021950:	4658      	mov	r0, fp
 8021952:	f7f9 fe49 	bl	801b5e8 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 8021956:	a80a      	add	r0, sp, #40	@ 0x28
 8021958:	f7f9 fe46 	bl	801b5e8 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 802195c:	4b73      	ldr	r3, [pc, #460]	@ (8021b2c <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x280>)
 802195e:	2100      	movs	r1, #0
 8021960:	f9b5 2000 	ldrsh.w	r2, [r5]
 8021964:	f9b3 3000 	ldrsh.w	r3, [r3]
 8021968:	4658      	mov	r0, fp
 802196a:	910c      	str	r1, [sp, #48]	@ 0x30
 802196c:	a90c      	add	r1, sp, #48	@ 0x30
 802196e:	f8ad 2034 	strh.w	r2, [sp, #52]	@ 0x34
 8021972:	f8ad 3036 	strh.w	r3, [sp, #54]	@ 0x36
 8021976:	f7f6 fa85 	bl	8017e84 <_ZN8touchgfx4RectaNERKS0_>
 802197a:	4658      	mov	r0, fp
 802197c:	f7f6 fac5 	bl	8017f0a <_ZNK8touchgfx4Rect7isEmptyEv>
 8021980:	2800      	cmp	r0, #0
 8021982:	f040 809a 	bne.w	8021aba <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x20e>
 8021986:	f9bd 0020 	ldrsh.w	r0, [sp, #32]
 802198a:	f9bd 1018 	ldrsh.w	r1, [sp, #24]
 802198e:	4288      	cmp	r0, r1
 8021990:	db38      	blt.n	8021a04 <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x158>
 8021992:	f9bd 2022 	ldrsh.w	r2, [sp, #34]	@ 0x22
 8021996:	f9bd 301a 	ldrsh.w	r3, [sp, #26]
 802199a:	429a      	cmp	r2, r3
 802199c:	db32      	blt.n	8021a04 <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x158>
 802199e:	f8bd 6024 	ldrh.w	r6, [sp, #36]	@ 0x24
 80219a2:	4430      	add	r0, r6
 80219a4:	f8bd 601c 	ldrh.w	r6, [sp, #28]
 80219a8:	4431      	add	r1, r6
 80219aa:	b200      	sxth	r0, r0
 80219ac:	b209      	sxth	r1, r1
 80219ae:	4288      	cmp	r0, r1
 80219b0:	dc28      	bgt.n	8021a04 <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x158>
 80219b2:	f8bd 1026 	ldrh.w	r1, [sp, #38]	@ 0x26
 80219b6:	440a      	add	r2, r1
 80219b8:	f8bd 101e 	ldrh.w	r1, [sp, #30]
 80219bc:	440b      	add	r3, r1
 80219be:	b212      	sxth	r2, r2
 80219c0:	b21b      	sxth	r3, r3
 80219c2:	429a      	cmp	r2, r3
 80219c4:	dc1e      	bgt.n	8021a04 <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x158>
 80219c6:	6823      	ldr	r3, [r4, #0]
 80219c8:	4620      	mov	r0, r4
 80219ca:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80219cc:	4798      	blx	r3
 80219ce:	4682      	mov	sl, r0
 80219d0:	6838      	ldr	r0, [r7, #0]
 80219d2:	6803      	ldr	r3, [r0, #0]
 80219d4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80219d6:	4798      	blx	r3
 80219d8:	f9bd 1028 	ldrsh.w	r1, [sp, #40]	@ 0x28
 80219dc:	f8bd 3020 	ldrh.w	r3, [sp, #32]
 80219e0:	f9bd 202c 	ldrsh.w	r2, [sp, #44]	@ 0x2c
 80219e4:	1a5b      	subs	r3, r3, r1
 80219e6:	b29b      	uxth	r3, r3
 80219e8:	b21c      	sxth	r4, r3
 80219ea:	2c00      	cmp	r4, #0
 80219ec:	dc0f      	bgt.n	8021a0e <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x162>
 80219ee:	bf18      	it	ne
 80219f0:	f8ad 1020 	strhne.w	r1, [sp, #32]
 80219f4:	4644      	mov	r4, r8
 80219f6:	bf1e      	ittt	ne
 80219f8:	f8bd 1024 	ldrhne.w	r1, [sp, #36]	@ 0x24
 80219fc:	185b      	addne	r3, r3, r1
 80219fe:	f8ad 3024 	strhne.w	r3, [sp, #36]	@ 0x24
 8021a02:	e009      	b.n	8021a18 <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x16c>
 8021a04:	4b4a      	ldr	r3, [pc, #296]	@ (8021b30 <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x284>)
 8021a06:	f240 3176 	movw	r1, #886	@ 0x376
 8021a0a:	4a43      	ldr	r2, [pc, #268]	@ (8021b18 <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x26c>)
 8021a0c:	e75e      	b.n	80218cc <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x20>
 8021a0e:	1ad3      	subs	r3, r2, r3
 8021a10:	eb08 0444 	add.w	r4, r8, r4, lsl #1
 8021a14:	f8ad 302c 	strh.w	r3, [sp, #44]	@ 0x2c
 8021a18:	f9bd 602a 	ldrsh.w	r6, [sp, #42]	@ 0x2a
 8021a1c:	f8bd 3022 	ldrh.w	r3, [sp, #34]	@ 0x22
 8021a20:	1b9b      	subs	r3, r3, r6
 8021a22:	b29b      	uxth	r3, r3
 8021a24:	b219      	sxth	r1, r3
 8021a26:	2900      	cmp	r1, #0
 8021a28:	dd4b      	ble.n	8021ac2 <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x216>
 8021a2a:	4351      	muls	r1, r2
 8021a2c:	eb04 0441 	add.w	r4, r4, r1, lsl #1
 8021a30:	f8bd 102e 	ldrh.w	r1, [sp, #46]	@ 0x2e
 8021a34:	1acb      	subs	r3, r1, r3
 8021a36:	f8ad 302e 	strh.w	r3, [sp, #46]	@ 0x2e
 8021a3a:	f9bd 602c 	ldrsh.w	r6, [sp, #44]	@ 0x2c
 8021a3e:	2e00      	cmp	r6, #0
 8021a40:	dd3b      	ble.n	8021aba <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x20e>
 8021a42:	f9bd 302e 	ldrsh.w	r3, [sp, #46]	@ 0x2e
 8021a46:	2b00      	cmp	r3, #0
 8021a48:	dd37      	ble.n	8021aba <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x20e>
 8021a4a:	f9bd c022 	ldrsh.w	ip, [sp, #34]	@ 0x22
 8021a4e:	f9bd 1020 	ldrsh.w	r1, [sp, #32]
 8021a52:	fb0a f90c 	mul.w	r9, sl, ip
 8021a56:	eb09 0941 	add.w	r9, r9, r1, lsl #1
 8021a5a:	4481      	add	r9, r0
 8021a5c:	8828      	ldrh	r0, [r5, #0]
 8021a5e:	f9bd 5024 	ldrsh.w	r5, [sp, #36]	@ 0x24
 8021a62:	1a41      	subs	r1, r0, r1
 8021a64:	42ae      	cmp	r6, r5
 8021a66:	bfa8      	it	ge
 8021a68:	462e      	movge	r6, r5
 8021a6a:	f9bd 5026 	ldrsh.w	r5, [sp, #38]	@ 0x26
 8021a6e:	428e      	cmp	r6, r1
 8021a70:	bfa8      	it	ge
 8021a72:	460e      	movge	r6, r1
 8021a74:	429d      	cmp	r5, r3
 8021a76:	bfa8      	it	ge
 8021a78:	461d      	movge	r5, r3
 8021a7a:	4b2c      	ldr	r3, [pc, #176]	@ (8021b2c <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x280>)
 8021a7c:	881b      	ldrh	r3, [r3, #0]
 8021a7e:	eba3 030c 	sub.w	r3, r3, ip
 8021a82:	429d      	cmp	r5, r3
 8021a84:	bfa8      	it	ge
 8021a86:	461d      	movge	r5, r3
 8021a88:	42b0      	cmp	r0, r6
 8021a8a:	d12c      	bne.n	8021ae6 <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x23a>
 8021a8c:	4290      	cmp	r0, r2
 8021a8e:	d12a      	bne.n	8021ae6 <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x23a>
 8021a90:	6838      	ldr	r0, [r7, #0]
 8021a92:	9203      	str	r2, [sp, #12]
 8021a94:	6803      	ldr	r3, [r0, #0]
 8021a96:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8021a98:	4798      	blx	r3
 8021a9a:	07c3      	lsls	r3, r0, #31
 8021a9c:	d51a      	bpl.n	8021ad4 <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x228>
 8021a9e:	9a03      	ldr	r2, [sp, #12]
 8021aa0:	6838      	ldr	r0, [r7, #0]
 8021aa2:	f8ad 5026 	strh.w	r5, [sp, #38]	@ 0x26
 8021aa6:	f8ad 2024 	strh.w	r2, [sp, #36]	@ 0x24
 8021aaa:	6803      	ldr	r3, [r0, #0]
 8021aac:	9200      	str	r2, [sp, #0]
 8021aae:	6e9d      	ldr	r5, [r3, #104]	@ 0x68
 8021ab0:	4623      	mov	r3, r4
 8021ab2:	e89b 0006 	ldmia.w	fp, {r1, r2}
 8021ab6:	47a8      	blx	r5
 8021ab8:	4680      	mov	r8, r0
 8021aba:	4640      	mov	r0, r8
 8021abc:	b00f      	add	sp, #60	@ 0x3c
 8021abe:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8021ac2:	bf1f      	itttt	ne
 8021ac4:	f8bd 1026 	ldrhne.w	r1, [sp, #38]	@ 0x26
 8021ac8:	f8ad 6022 	strhne.w	r6, [sp, #34]	@ 0x22
 8021acc:	185b      	addne	r3, r3, r1
 8021ace:	f8ad 3026 	strhne.w	r3, [sp, #38]	@ 0x26
 8021ad2:	e7b2      	b.n	8021a3a <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x18e>
 8021ad4:	6838      	ldr	r0, [r7, #0]
 8021ad6:	464a      	mov	r2, r9
 8021ad8:	4621      	mov	r1, r4
 8021ada:	6803      	ldr	r3, [r0, #0]
 8021adc:	6b5e      	ldr	r6, [r3, #52]	@ 0x34
 8021ade:	fb05 f30a 	mul.w	r3, r5, sl
 8021ae2:	47b0      	blx	r6
 8021ae4:	e7e9      	b.n	8021aba <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x20e>
 8021ae6:	4355      	muls	r5, r2
 8021ae8:	0076      	lsls	r6, r6, #1
 8021aea:	ea4f 0b42 	mov.w	fp, r2, lsl #1
 8021aee:	eb04 0345 	add.w	r3, r4, r5, lsl #1
 8021af2:	9303      	str	r3, [sp, #12]
 8021af4:	9b03      	ldr	r3, [sp, #12]
 8021af6:	429c      	cmp	r4, r3
 8021af8:	d2df      	bcs.n	8021aba <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x20e>
 8021afa:	6838      	ldr	r0, [r7, #0]
 8021afc:	464a      	mov	r2, r9
 8021afe:	4621      	mov	r1, r4
 8021b00:	44d1      	add	r9, sl
 8021b02:	6803      	ldr	r3, [r0, #0]
 8021b04:	445c      	add	r4, fp
 8021b06:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8021b08:	461d      	mov	r5, r3
 8021b0a:	4633      	mov	r3, r6
 8021b0c:	47a8      	blx	r5
 8021b0e:	e7f1      	b.n	8021af4 <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x248>
 8021b10:	2400b884 	.word	0x2400b884
 8021b14:	0802fd0f 	.word	0x0802fd0f
 8021b18:	080305c0 	.word	0x080305c0
 8021b1c:	0802fdc1 	.word	0x0802fdc1
 8021b20:	0802fdf3 	.word	0x0802fdf3
 8021b24:	0802fe48 	.word	0x0802fe48
 8021b28:	2400b87e 	.word	0x2400b87e
 8021b2c:	2400b880 	.word	0x2400b880
 8021b30:	0802fe86 	.word	0x0802fe86

08021b34 <_ZN8touchgfx8LCD16bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh>:
 8021b34:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8021b38:	f89d 7024 	ldrb.w	r7, [sp, #36]	@ 0x24
 8021b3c:	4688      	mov	r8, r1
 8021b3e:	4614      	mov	r4, r2
 8021b40:	461d      	mov	r5, r3
 8021b42:	9e08      	ldr	r6, [sp, #32]
 8021b44:	2f00      	cmp	r7, #0
 8021b46:	f000 80b4 	beq.w	8021cb2 <_ZN8touchgfx8LCD16bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x17e>
 8021b4a:	4618      	mov	r0, r3
 8021b4c:	f7f6 f9dd 	bl	8017f0a <_ZNK8touchgfx4Rect7isEmptyEv>
 8021b50:	2800      	cmp	r0, #0
 8021b52:	f040 80ae 	bne.w	8021cb2 <_ZN8touchgfx8LCD16bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x17e>
 8021b56:	f9b5 1000 	ldrsh.w	r1, [r5]
 8021b5a:	2fff      	cmp	r7, #255	@ 0xff
 8021b5c:	f9b5 3002 	ldrsh.w	r3, [r5, #2]
 8021b60:	f9b5 0004 	ldrsh.w	r0, [r5, #4]
 8021b64:	fb04 1303 	mla	r3, r4, r3, r1
 8021b68:	f9b5 5006 	ldrsh.w	r5, [r5, #6]
 8021b6c:	eba4 0200 	sub.w	r2, r4, r0
 8021b70:	eb08 0143 	add.w	r1, r8, r3, lsl #1
 8021b74:	fb04 f505 	mul.w	r5, r4, r5
 8021b78:	ea4f 2816 	mov.w	r8, r6, lsr #8
 8021b7c:	eb01 0545 	add.w	r5, r1, r5, lsl #1
 8021b80:	d04b      	beq.n	8021c1a <_ZN8touchgfx8LCD16bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0xe6>
 8021b82:	b2bc      	uxth	r4, r7
 8021b84:	f1c7 0cff 	rsb	ip, r7, #255	@ 0xff
 8021b88:	f3c6 4e07 	ubfx	lr, r6, #16, #8
 8021b8c:	fa5f f788 	uxtb.w	r7, r8
 8021b90:	b2f3      	uxtb	r3, r6
 8021b92:	0040      	lsls	r0, r0, #1
 8021b94:	fb0e fe04 	mul.w	lr, lr, r4
 8021b98:	4367      	muls	r7, r4
 8021b9a:	ea4f 0842 	mov.w	r8, r2, lsl #1
 8021b9e:	4363      	muls	r3, r4
 8021ba0:	fa1f fc8c 	uxth.w	ip, ip
 8021ba4:	42a9      	cmp	r1, r5
 8021ba6:	f080 8084 	bcs.w	8021cb2 <_ZN8touchgfx8LCD16bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x17e>
 8021baa:	eb01 0900 	add.w	r9, r1, r0
 8021bae:	4549      	cmp	r1, r9
 8021bb0:	d231      	bcs.n	8021c16 <_ZN8touchgfx8LCD16bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0xe2>
 8021bb2:	880a      	ldrh	r2, [r1, #0]
 8021bb4:	1214      	asrs	r4, r2, #8
 8021bb6:	10d6      	asrs	r6, r2, #3
 8021bb8:	f004 04f8 	and.w	r4, r4, #248	@ 0xf8
 8021bbc:	00d2      	lsls	r2, r2, #3
 8021bbe:	f006 06fc 	and.w	r6, r6, #252	@ 0xfc
 8021bc2:	b2d2      	uxtb	r2, r2
 8021bc4:	ea44 1454 	orr.w	r4, r4, r4, lsr #5
 8021bc8:	ea42 1252 	orr.w	r2, r2, r2, lsr #5
 8021bcc:	fb14 f40c 	smulbb	r4, r4, ip
 8021bd0:	ea46 1696 	orr.w	r6, r6, r6, lsr #6
 8021bd4:	fb12 f20c 	smulbb	r2, r2, ip
 8021bd8:	fb16 f60c 	smulbb	r6, r6, ip
 8021bdc:	4474      	add	r4, lr
 8021bde:	441a      	add	r2, r3
 8021be0:	b2a4      	uxth	r4, r4
 8021be2:	443e      	add	r6, r7
 8021be4:	b292      	uxth	r2, r2
 8021be6:	f104 0a01 	add.w	sl, r4, #1
 8021bea:	b2b6      	uxth	r6, r6
 8021bec:	eb0a 2414 	add.w	r4, sl, r4, lsr #8
 8021bf0:	f102 0a01 	add.w	sl, r2, #1
 8021bf4:	eb0a 2212 	add.w	r2, sl, r2, lsr #8
 8021bf8:	f404 4478 	and.w	r4, r4, #63488	@ 0xf800
 8021bfc:	f3c2 22c4 	ubfx	r2, r2, #11, #5
 8021c00:	4322      	orrs	r2, r4
 8021c02:	1c74      	adds	r4, r6, #1
 8021c04:	eb04 2616 	add.w	r6, r4, r6, lsr #8
 8021c08:	0976      	lsrs	r6, r6, #5
 8021c0a:	f406 66fc 	and.w	r6, r6, #2016	@ 0x7e0
 8021c0e:	4332      	orrs	r2, r6
 8021c10:	f821 2b02 	strh.w	r2, [r1], #2
 8021c14:	e7cb      	b.n	8021bae <_ZN8touchgfx8LCD16bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x7a>
 8021c16:	4441      	add	r1, r8
 8021c18:	e7c4      	b.n	8021ba4 <_ZN8touchgfx8LCD16bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x70>
 8021c1a:	0973      	lsrs	r3, r6, #5
 8021c1c:	4f26      	ldr	r7, [pc, #152]	@ (8021cb8 <_ZN8touchgfx8LCD16bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x184>)
 8021c1e:	f3c6 06c4 	ubfx	r6, r6, #3, #5
 8021c22:	f403 63fc 	and.w	r3, r3, #2016	@ 0x7e0
 8021c26:	ea08 0707 	and.w	r7, r8, r7
 8021c2a:	433b      	orrs	r3, r7
 8021c2c:	4333      	orrs	r3, r6
 8021c2e:	07e6      	lsls	r6, r4, #31
 8021c30:	b29b      	uxth	r3, r3
 8021c32:	d50b      	bpl.n	8021c4c <_ZN8touchgfx8LCD16bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x118>
 8021c34:	0040      	lsls	r0, r0, #1
 8021c36:	0052      	lsls	r2, r2, #1
 8021c38:	42a9      	cmp	r1, r5
 8021c3a:	d23a      	bcs.n	8021cb2 <_ZN8touchgfx8LCD16bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x17e>
 8021c3c:	180c      	adds	r4, r1, r0
 8021c3e:	42a1      	cmp	r1, r4
 8021c40:	d202      	bcs.n	8021c48 <_ZN8touchgfx8LCD16bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x114>
 8021c42:	f821 3b02 	strh.w	r3, [r1], #2
 8021c46:	e7fa      	b.n	8021c3e <_ZN8touchgfx8LCD16bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x10a>
 8021c48:	4411      	add	r1, r2
 8021c4a:	e7f5      	b.n	8021c38 <_ZN8touchgfx8LCD16bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x104>
 8021c4c:	078f      	lsls	r7, r1, #30
 8021c4e:	d008      	beq.n	8021c62 <_ZN8touchgfx8LCD16bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x12e>
 8021c50:	0066      	lsls	r6, r4, #1
 8021c52:	460a      	mov	r2, r1
 8021c54:	42aa      	cmp	r2, r5
 8021c56:	d202      	bcs.n	8021c5e <_ZN8touchgfx8LCD16bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x12a>
 8021c58:	8013      	strh	r3, [r2, #0]
 8021c5a:	4432      	add	r2, r6
 8021c5c:	e7fa      	b.n	8021c54 <_ZN8touchgfx8LCD16bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x120>
 8021c5e:	3102      	adds	r1, #2
 8021c60:	3801      	subs	r0, #1
 8021c62:	07c6      	lsls	r6, r0, #31
 8021c64:	d50b      	bpl.n	8021c7e <_ZN8touchgfx8LCD16bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x14a>
 8021c66:	f100 4200 	add.w	r2, r0, #2147483648	@ 0x80000000
 8021c6a:	0066      	lsls	r6, r4, #1
 8021c6c:	3a01      	subs	r2, #1
 8021c6e:	eb01 0242 	add.w	r2, r1, r2, lsl #1
 8021c72:	42aa      	cmp	r2, r5
 8021c74:	d202      	bcs.n	8021c7c <_ZN8touchgfx8LCD16bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x148>
 8021c76:	8013      	strh	r3, [r2, #0]
 8021c78:	4432      	add	r2, r6
 8021c7a:	e7fa      	b.n	8021c72 <_ZN8touchgfx8LCD16bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x13e>
 8021c7c:	3801      	subs	r0, #1
 8021c7e:	b1c0      	cbz	r0, 8021cb2 <_ZN8touchgfx8LCD16bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x17e>
 8021c80:	1040      	asrs	r0, r0, #1
 8021c82:	ea43 4303 	orr.w	r3, r3, r3, lsl #16
 8021c86:	0080      	lsls	r0, r0, #2
 8021c88:	0064      	lsls	r4, r4, #1
 8021c8a:	42a9      	cmp	r1, r5
 8021c8c:	d211      	bcs.n	8021cb2 <_ZN8touchgfx8LCD16bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x17e>
 8021c8e:	078a      	lsls	r2, r1, #30
 8021c90:	d006      	beq.n	8021ca0 <_ZN8touchgfx8LCD16bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x16c>
 8021c92:	4b0a      	ldr	r3, [pc, #40]	@ (8021cbc <_ZN8touchgfx8LCD16bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x188>)
 8021c94:	f44f 6185 	mov.w	r1, #1064	@ 0x428
 8021c98:	4a09      	ldr	r2, [pc, #36]	@ (8021cc0 <_ZN8touchgfx8LCD16bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x18c>)
 8021c9a:	480a      	ldr	r0, [pc, #40]	@ (8021cc4 <_ZN8touchgfx8LCD16bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x190>)
 8021c9c:	f008 ffd2 	bl	802ac44 <__assert_func>
 8021ca0:	180e      	adds	r6, r1, r0
 8021ca2:	460a      	mov	r2, r1
 8021ca4:	42b2      	cmp	r2, r6
 8021ca6:	d202      	bcs.n	8021cae <_ZN8touchgfx8LCD16bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x17a>
 8021ca8:	f842 3b04 	str.w	r3, [r2], #4
 8021cac:	e7fa      	b.n	8021ca4 <_ZN8touchgfx8LCD16bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x170>
 8021cae:	4421      	add	r1, r4
 8021cb0:	e7eb      	b.n	8021c8a <_ZN8touchgfx8LCD16bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x156>
 8021cb2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8021cb6:	bf00      	nop
 8021cb8:	00fff800 	.word	0x00fff800
 8021cbc:	0802fbc0 	.word	0x0802fbc0
 8021cc0:	0803020c 	.word	0x0803020c
 8021cc4:	0802fdc1 	.word	0x0802fdc1

08021cc8 <_ZN8touchgfx8LCD16bppC1Ev>:
 8021cc8:	2200      	movs	r2, #0
 8021cca:	4910      	ldr	r1, [pc, #64]	@ (8021d0c <_ZN8touchgfx8LCD16bppC1Ev+0x44>)
 8021ccc:	6042      	str	r2, [r0, #4]
 8021cce:	6001      	str	r1, [r0, #0]
 8021cd0:	e9c0 2202 	strd	r2, r2, [r0, #8]
 8021cd4:	e9c0 2204 	strd	r2, r2, [r0, #16]
 8021cd8:	e9c0 2206 	strd	r2, r2, [r0, #24]
 8021cdc:	e9c0 2208 	strd	r2, r2, [r0, #32]
 8021ce0:	e9c0 220a 	strd	r2, r2, [r0, #40]	@ 0x28
 8021ce4:	e9c0 220c 	strd	r2, r2, [r0, #48]	@ 0x30
 8021ce8:	e9c0 220e 	strd	r2, r2, [r0, #56]	@ 0x38
 8021cec:	e9c0 2210 	strd	r2, r2, [r0, #64]	@ 0x40
 8021cf0:	e9c0 2212 	strd	r2, r2, [r0, #72]	@ 0x48
 8021cf4:	e9c0 2214 	strd	r2, r2, [r0, #80]	@ 0x50
 8021cf8:	e9c0 2216 	strd	r2, r2, [r0, #88]	@ 0x58
 8021cfc:	e9c0 2218 	strd	r2, r2, [r0, #96]	@ 0x60
 8021d00:	e9c0 221a 	strd	r2, r2, [r0, #104]	@ 0x68
 8021d04:	e9c0 221c 	strd	r2, r2, [r0, #112]	@ 0x70
 8021d08:	4770      	bx	lr
 8021d0a:	bf00      	nop
 8021d0c:	080301c4 	.word	0x080301c4

08021d10 <_ZN8touchgfx8LCD16bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h>:
 8021d10:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8021d14:	b08d      	sub	sp, #52	@ 0x34
 8021d16:	460d      	mov	r5, r1
 8021d18:	4604      	mov	r4, r0
 8021d1a:	4699      	mov	r9, r3
 8021d1c:	6808      	ldr	r0, [r1, #0]
 8021d1e:	ab08      	add	r3, sp, #32
 8021d20:	6849      	ldr	r1, [r1, #4]
 8021d22:	c303      	stmia	r3!, {r0, r1}
 8021d24:	6810      	ldr	r0, [r2, #0]
 8021d26:	ab0a      	add	r3, sp, #40	@ 0x28
 8021d28:	6851      	ldr	r1, [r2, #4]
 8021d2a:	c303      	stmia	r3!, {r0, r1}
 8021d2c:	a808      	add	r0, sp, #32
 8021d2e:	f7f9 fc5b 	bl	801b5e8 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 8021d32:	4629      	mov	r1, r5
 8021d34:	a80a      	add	r0, sp, #40	@ 0x28
 8021d36:	4d67      	ldr	r5, [pc, #412]	@ (8021ed4 <_ZN8touchgfx8LCD16bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x1c4>)
 8021d38:	f7f9 fc7e 	bl	801b638 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
 8021d3c:	f9bd 2028 	ldrsh.w	r2, [sp, #40]	@ 0x28
 8021d40:	f9bd 302a 	ldrsh.w	r3, [sp, #42]	@ 0x2a
 8021d44:	f8bd 1024 	ldrh.w	r1, [sp, #36]	@ 0x24
 8021d48:	6828      	ldr	r0, [r5, #0]
 8021d4a:	fb11 2103 	smlabb	r1, r1, r3, r2
 8021d4e:	f9bd 802c 	ldrsh.w	r8, [sp, #44]	@ 0x2c
 8021d52:	f9bd 602e 	ldrsh.w	r6, [sp, #46]	@ 0x2e
 8021d56:	eb04 0481 	add.w	r4, r4, r1, lsl #2
 8021d5a:	f8bd 1020 	ldrh.w	r1, [sp, #32]
 8021d5e:	440a      	add	r2, r1
 8021d60:	f8ad 2028 	strh.w	r2, [sp, #40]	@ 0x28
 8021d64:	f8bd 2022 	ldrh.w	r2, [sp, #34]	@ 0x22
 8021d68:	4413      	add	r3, r2
 8021d6a:	f8ad 302a 	strh.w	r3, [sp, #42]	@ 0x2a
 8021d6e:	6803      	ldr	r3, [r0, #0]
 8021d70:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8021d72:	4798      	blx	r3
 8021d74:	f1b9 0fff 	cmp.w	r9, #255	@ 0xff
 8021d78:	d119      	bne.n	8021dae <_ZN8touchgfx8LCD16bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x9e>
 8021d7a:	f010 0f20 	tst.w	r0, #32
 8021d7e:	6828      	ldr	r0, [r5, #0]
 8021d80:	d018      	beq.n	8021db4 <_ZN8touchgfx8LCD16bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0xa4>
 8021d82:	2500      	movs	r5, #0
 8021d84:	6801      	ldr	r1, [r0, #0]
 8021d86:	b2b6      	uxth	r6, r6
 8021d88:	f8bd 302a 	ldrh.w	r3, [sp, #42]	@ 0x2a
 8021d8c:	f8bd 2028 	ldrh.w	r2, [sp, #40]	@ 0x28
 8021d90:	9601      	str	r6, [sp, #4]
 8021d92:	e9cd 9503 	strd	r9, r5, [sp, #12]
 8021d96:	f8bd 5024 	ldrh.w	r5, [sp, #36]	@ 0x24
 8021d9a:	9502      	str	r5, [sp, #8]
 8021d9c:	fa1f f588 	uxth.w	r5, r8
 8021da0:	9500      	str	r5, [sp, #0]
 8021da2:	6d0d      	ldr	r5, [r1, #80]	@ 0x50
 8021da4:	4621      	mov	r1, r4
 8021da6:	47a8      	blx	r5
 8021da8:	b00d      	add	sp, #52	@ 0x34
 8021daa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8021dae:	f010 0f40 	tst.w	r0, #64	@ 0x40
 8021db2:	e7e4      	b.n	8021d7e <_ZN8touchgfx8LCD16bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x6e>
 8021db4:	6803      	ldr	r3, [r0, #0]
 8021db6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8021db8:	4798      	blx	r3
 8021dba:	4947      	ldr	r1, [pc, #284]	@ (8021ed8 <_ZN8touchgfx8LCD16bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x1c8>)
 8021dbc:	f9bd 202a 	ldrsh.w	r2, [sp, #42]	@ 0x2a
 8021dc0:	880b      	ldrh	r3, [r1, #0]
 8021dc2:	468a      	mov	sl, r1
 8021dc4:	f9bd 5028 	ldrsh.w	r5, [sp, #40]	@ 0x28
 8021dc8:	fb03 5202 	mla	r2, r3, r2, r5
 8021dcc:	4373      	muls	r3, r6
 8021dce:	eb00 0042 	add.w	r0, r0, r2, lsl #1
 8021dd2:	eb00 0343 	add.w	r3, r0, r3, lsl #1
 8021dd6:	9307      	str	r3, [sp, #28]
 8021dd8:	ea4f 0348 	mov.w	r3, r8, lsl #1
 8021ddc:	9306      	str	r3, [sp, #24]
 8021dde:	9b07      	ldr	r3, [sp, #28]
 8021de0:	4298      	cmp	r0, r3
 8021de2:	d270      	bcs.n	8021ec6 <_ZN8touchgfx8LCD16bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x1b6>
 8021de4:	9b06      	ldr	r3, [sp, #24]
 8021de6:	4621      	mov	r1, r4
 8021de8:	eb00 0b03 	add.w	fp, r0, r3
 8021dec:	4558      	cmp	r0, fp
 8021dee:	d25d      	bcs.n	8021eac <_ZN8touchgfx8LCD16bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x19c>
 8021df0:	f851 4b04 	ldr.w	r4, [r1], #4
 8021df4:	0e23      	lsrs	r3, r4, #24
 8021df6:	d014      	beq.n	8021e22 <_ZN8touchgfx8LCD16bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x112>
 8021df8:	2bff      	cmp	r3, #255	@ 0xff
 8021dfa:	ea4f 2c14 	mov.w	ip, r4, lsr #8
 8021dfe:	d112      	bne.n	8021e26 <_ZN8touchgfx8LCD16bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x116>
 8021e00:	f1b9 0fff 	cmp.w	r9, #255	@ 0xff
 8021e04:	d10f      	bne.n	8021e26 <_ZN8touchgfx8LCD16bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x116>
 8021e06:	0963      	lsrs	r3, r4, #5
 8021e08:	f42c 6cff 	bic.w	ip, ip, #2040	@ 0x7f8
 8021e0c:	f3c4 04c4 	ubfx	r4, r4, #3, #5
 8021e10:	f403 63fc 	and.w	r3, r3, #2016	@ 0x7e0
 8021e14:	f02c 0c07 	bic.w	ip, ip, #7
 8021e18:	ea43 0c0c 	orr.w	ip, r3, ip
 8021e1c:	ea4c 0404 	orr.w	r4, ip, r4
 8021e20:	8004      	strh	r4, [r0, #0]
 8021e22:	3002      	adds	r0, #2
 8021e24:	e7e2      	b.n	8021dec <_ZN8touchgfx8LCD16bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0xdc>
 8021e26:	fb09 f303 	mul.w	r3, r9, r3
 8021e2a:	8807      	ldrh	r7, [r0, #0]
 8021e2c:	f3c4 4e07 	ubfx	lr, r4, #16, #8
 8021e30:	fa5f fc8c 	uxtb.w	ip, ip
 8021e34:	1c5a      	adds	r2, r3, #1
 8021e36:	123e      	asrs	r6, r7, #8
 8021e38:	10fd      	asrs	r5, r7, #3
 8021e3a:	eb02 2223 	add.w	r2, r2, r3, asr #8
 8021e3e:	f006 06f8 	and.w	r6, r6, #248	@ 0xf8
 8021e42:	00ff      	lsls	r7, r7, #3
 8021e44:	f005 05fc 	and.w	r5, r5, #252	@ 0xfc
 8021e48:	1212      	asrs	r2, r2, #8
 8021e4a:	ea46 1656 	orr.w	r6, r6, r6, lsr #5
 8021e4e:	b293      	uxth	r3, r2
 8021e50:	43d2      	mvns	r2, r2
 8021e52:	b2ff      	uxtb	r7, r7
 8021e54:	fb1e fe03 	smulbb	lr, lr, r3
 8021e58:	b2d2      	uxtb	r2, r2
 8021e5a:	fb1c fc03 	smulbb	ip, ip, r3
 8021e5e:	b2e4      	uxtb	r4, r4
 8021e60:	fb06 e602 	mla	r6, r6, r2, lr
 8021e64:	ea45 1595 	orr.w	r5, r5, r5, lsr #6
 8021e68:	fb14 f403 	smulbb	r4, r4, r3
 8021e6c:	ea47 1757 	orr.w	r7, r7, r7, lsr #5
 8021e70:	b2b6      	uxth	r6, r6
 8021e72:	fb05 c502 	mla	r5, r5, r2, ip
 8021e76:	fb07 4702 	mla	r7, r7, r2, r4
 8021e7a:	f106 0e01 	add.w	lr, r6, #1
 8021e7e:	b2ad      	uxth	r5, r5
 8021e80:	b2bf      	uxth	r7, r7
 8021e82:	eb0e 2616 	add.w	r6, lr, r6, lsr #8
 8021e86:	f105 0c01 	add.w	ip, r5, #1
 8021e8a:	f406 4e78 	and.w	lr, r6, #63488	@ 0xf800
 8021e8e:	1c7e      	adds	r6, r7, #1
 8021e90:	eb0c 2515 	add.w	r5, ip, r5, lsr #8
 8021e94:	eb06 2617 	add.w	r6, r6, r7, lsr #8
 8021e98:	096d      	lsrs	r5, r5, #5
 8021e9a:	f3c6 26c4 	ubfx	r6, r6, #11, #5
 8021e9e:	f405 65fc 	and.w	r5, r5, #2016	@ 0x7e0
 8021ea2:	ea46 060e 	orr.w	r6, r6, lr
 8021ea6:	432e      	orrs	r6, r5
 8021ea8:	8006      	strh	r6, [r0, #0]
 8021eaa:	e7ba      	b.n	8021e22 <_ZN8touchgfx8LCD16bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x112>
 8021eac:	f8ba 3000 	ldrh.w	r3, [sl]
 8021eb0:	f9bd 4024 	ldrsh.w	r4, [sp, #36]	@ 0x24
 8021eb4:	eba3 0308 	sub.w	r3, r3, r8
 8021eb8:	eba4 0408 	sub.w	r4, r4, r8
 8021ebc:	eb00 0043 	add.w	r0, r0, r3, lsl #1
 8021ec0:	eb01 0484 	add.w	r4, r1, r4, lsl #2
 8021ec4:	e78b      	b.n	8021dde <_ZN8touchgfx8LCD16bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0xce>
 8021ec6:	4b03      	ldr	r3, [pc, #12]	@ (8021ed4 <_ZN8touchgfx8LCD16bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x1c4>)
 8021ec8:	6818      	ldr	r0, [r3, #0]
 8021eca:	6803      	ldr	r3, [r0, #0]
 8021ecc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8021ece:	4798      	blx	r3
 8021ed0:	e76a      	b.n	8021da8 <_ZN8touchgfx8LCD16bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x98>
 8021ed2:	bf00      	nop
 8021ed4:	2400b884 	.word	0x2400b884
 8021ed8:	2400b87e 	.word	0x2400b87e

08021edc <_ZN8touchgfx8LCD16bpp21blitCopyARGB8888SolidEPKmRKNS_4RectES5_>:
 8021edc:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8021ee0:	b085      	sub	sp, #20
 8021ee2:	6810      	ldr	r0, [r2, #0]
 8021ee4:	460c      	mov	r4, r1
 8021ee6:	6851      	ldr	r1, [r2, #4]
 8021ee8:	466d      	mov	r5, sp
 8021eea:	4616      	mov	r6, r2
 8021eec:	c503      	stmia	r5!, {r0, r1}
 8021eee:	6818      	ldr	r0, [r3, #0]
 8021ef0:	6859      	ldr	r1, [r3, #4]
 8021ef2:	c503      	stmia	r5!, {r0, r1}
 8021ef4:	4668      	mov	r0, sp
 8021ef6:	4d2e      	ldr	r5, [pc, #184]	@ (8021fb0 <_ZN8touchgfx8LCD16bpp21blitCopyARGB8888SolidEPKmRKNS_4RectES5_+0xd4>)
 8021ef8:	f7f9 fb76 	bl	801b5e8 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 8021efc:	4631      	mov	r1, r6
 8021efe:	a802      	add	r0, sp, #8
 8021f00:	4e2c      	ldr	r6, [pc, #176]	@ (8021fb4 <_ZN8touchgfx8LCD16bpp21blitCopyARGB8888SolidEPKmRKNS_4RectES5_+0xd8>)
 8021f02:	f7f9 fb99 	bl	801b638 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
 8021f06:	f9bd 2008 	ldrsh.w	r2, [sp, #8]
 8021f0a:	f9bd 300a 	ldrsh.w	r3, [sp, #10]
 8021f0e:	f8bd 1004 	ldrh.w	r1, [sp, #4]
 8021f12:	6828      	ldr	r0, [r5, #0]
 8021f14:	fb11 2103 	smlabb	r1, r1, r3, r2
 8021f18:	f9bd 700c 	ldrsh.w	r7, [sp, #12]
 8021f1c:	f9bd 800e 	ldrsh.w	r8, [sp, #14]
 8021f20:	eb04 0481 	add.w	r4, r4, r1, lsl #2
 8021f24:	f8bd 1000 	ldrh.w	r1, [sp]
 8021f28:	440a      	add	r2, r1
 8021f2a:	f8ad 2008 	strh.w	r2, [sp, #8]
 8021f2e:	f8bd 2002 	ldrh.w	r2, [sp, #2]
 8021f32:	4413      	add	r3, r2
 8021f34:	f8ad 300a 	strh.w	r3, [sp, #10]
 8021f38:	6803      	ldr	r3, [r0, #0]
 8021f3a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8021f3c:	4798      	blx	r3
 8021f3e:	8833      	ldrh	r3, [r6, #0]
 8021f40:	f9bd 200a 	ldrsh.w	r2, [sp, #10]
 8021f44:	ea4f 0c47 	mov.w	ip, r7, lsl #1
 8021f48:	f9bd 1008 	ldrsh.w	r1, [sp, #8]
 8021f4c:	f8df e068 	ldr.w	lr, [pc, #104]	@ 8021fb8 <_ZN8touchgfx8LCD16bpp21blitCopyARGB8888SolidEPKmRKNS_4RectES5_+0xdc>
 8021f50:	fb03 1202 	mla	r2, r3, r2, r1
 8021f54:	fb08 f303 	mul.w	r3, r8, r3
 8021f58:	eb00 0042 	add.w	r0, r0, r2, lsl #1
 8021f5c:	eb00 0343 	add.w	r3, r0, r3, lsl #1
 8021f60:	4298      	cmp	r0, r3
 8021f62:	d21d      	bcs.n	8021fa0 <_ZN8touchgfx8LCD16bpp21blitCopyARGB8888SolidEPKmRKNS_4RectES5_+0xc4>
 8021f64:	eb00 080c 	add.w	r8, r0, ip
 8021f68:	4540      	cmp	r0, r8
 8021f6a:	d20f      	bcs.n	8021f8c <_ZN8touchgfx8LCD16bpp21blitCopyARGB8888SolidEPKmRKNS_4RectES5_+0xb0>
 8021f6c:	f854 1b04 	ldr.w	r1, [r4], #4
 8021f70:	ea4f 1951 	mov.w	r9, r1, lsr #5
 8021f74:	ea0e 2211 	and.w	r2, lr, r1, lsr #8
 8021f78:	f3c1 01c4 	ubfx	r1, r1, #3, #5
 8021f7c:	f409 69fc 	and.w	r9, r9, #2016	@ 0x7e0
 8021f80:	ea42 0209 	orr.w	r2, r2, r9
 8021f84:	430a      	orrs	r2, r1
 8021f86:	f820 2b02 	strh.w	r2, [r0], #2
 8021f8a:	e7ed      	b.n	8021f68 <_ZN8touchgfx8LCD16bpp21blitCopyARGB8888SolidEPKmRKNS_4RectES5_+0x8c>
 8021f8c:	8832      	ldrh	r2, [r6, #0]
 8021f8e:	1bd2      	subs	r2, r2, r7
 8021f90:	eb00 0042 	add.w	r0, r0, r2, lsl #1
 8021f94:	f9bd 2004 	ldrsh.w	r2, [sp, #4]
 8021f98:	1bd2      	subs	r2, r2, r7
 8021f9a:	eb04 0482 	add.w	r4, r4, r2, lsl #2
 8021f9e:	e7df      	b.n	8021f60 <_ZN8touchgfx8LCD16bpp21blitCopyARGB8888SolidEPKmRKNS_4RectES5_+0x84>
 8021fa0:	6828      	ldr	r0, [r5, #0]
 8021fa2:	6803      	ldr	r3, [r0, #0]
 8021fa4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8021fa6:	4798      	blx	r3
 8021fa8:	b005      	add	sp, #20
 8021faa:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8021fae:	bf00      	nop
 8021fb0:	2400b884 	.word	0x2400b884
 8021fb4:	2400b87e 	.word	0x2400b87e
 8021fb8:	fffff800 	.word	0xfffff800

08021fbc <_ZN8touchgfx8LCD16bpp14blitCopyRGB888EPKhRKNS_4RectES5_h>:
 8021fbc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8021fc0:	b08e      	sub	sp, #56	@ 0x38
 8021fc2:	460e      	mov	r6, r1
 8021fc4:	4604      	mov	r4, r0
 8021fc6:	461d      	mov	r5, r3
 8021fc8:	6808      	ldr	r0, [r1, #0]
 8021fca:	ab0a      	add	r3, sp, #40	@ 0x28
 8021fcc:	6849      	ldr	r1, [r1, #4]
 8021fce:	f8df 81d4 	ldr.w	r8, [pc, #468]	@ 80221a4 <_ZN8touchgfx8LCD16bpp14blitCopyRGB888EPKhRKNS_4RectES5_h+0x1e8>
 8021fd2:	f8df 91d4 	ldr.w	r9, [pc, #468]	@ 80221a8 <_ZN8touchgfx8LCD16bpp14blitCopyRGB888EPKhRKNS_4RectES5_h+0x1ec>
 8021fd6:	c303      	stmia	r3!, {r0, r1}
 8021fd8:	6810      	ldr	r0, [r2, #0]
 8021fda:	ab0c      	add	r3, sp, #48	@ 0x30
 8021fdc:	6851      	ldr	r1, [r2, #4]
 8021fde:	c303      	stmia	r3!, {r0, r1}
 8021fe0:	a80a      	add	r0, sp, #40	@ 0x28
 8021fe2:	f7f9 fb01 	bl	801b5e8 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 8021fe6:	4631      	mov	r1, r6
 8021fe8:	a80c      	add	r0, sp, #48	@ 0x30
 8021fea:	f7f9 fb25 	bl	801b638 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
 8021fee:	f9bd 2030 	ldrsh.w	r2, [sp, #48]	@ 0x30
 8021ff2:	f9bd 3032 	ldrsh.w	r3, [sp, #50]	@ 0x32
 8021ff6:	f8bd 102c 	ldrh.w	r1, [sp, #44]	@ 0x2c
 8021ffa:	f8d8 0000 	ldr.w	r0, [r8]
 8021ffe:	fb11 2103 	smlabb	r1, r1, r3, r2
 8022002:	f9bd 7034 	ldrsh.w	r7, [sp, #52]	@ 0x34
 8022006:	f9bd 6036 	ldrsh.w	r6, [sp, #54]	@ 0x36
 802200a:	eb01 0141 	add.w	r1, r1, r1, lsl #1
 802200e:	440c      	add	r4, r1
 8022010:	f8bd 1028 	ldrh.w	r1, [sp, #40]	@ 0x28
 8022014:	440a      	add	r2, r1
 8022016:	f8ad 2030 	strh.w	r2, [sp, #48]	@ 0x30
 802201a:	f8bd 202a 	ldrh.w	r2, [sp, #42]	@ 0x2a
 802201e:	4413      	add	r3, r2
 8022020:	f8ad 3032 	strh.w	r3, [sp, #50]	@ 0x32
 8022024:	6803      	ldr	r3, [r0, #0]
 8022026:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8022028:	4798      	blx	r3
 802202a:	2dff      	cmp	r5, #255	@ 0xff
 802202c:	d124      	bne.n	8022078 <_ZN8touchgfx8LCD16bpp14blitCopyRGB888EPKhRKNS_4RectES5_h+0xbc>
 802202e:	f010 0f01 	tst.w	r0, #1
 8022032:	f8d8 0000 	ldr.w	r0, [r8]
 8022036:	d022      	beq.n	802207e <_ZN8touchgfx8LCD16bpp14blitCopyRGB888EPKhRKNS_4RectES5_h+0xc2>
 8022038:	2100      	movs	r1, #0
 802203a:	f04f 0e01 	mov.w	lr, #1
 802203e:	f8d0 c000 	ldr.w	ip, [r0]
 8022042:	b2b6      	uxth	r6, r6
 8022044:	f8cd e018 	str.w	lr, [sp, #24]
 8022048:	b2bf      	uxth	r7, r7
 802204a:	f8bd 3032 	ldrh.w	r3, [sp, #50]	@ 0x32
 802204e:	f8bd 2030 	ldrh.w	r2, [sp, #48]	@ 0x30
 8022052:	e9cd 1107 	strd	r1, r1, [sp, #28]
 8022056:	f8b9 e000 	ldrh.w	lr, [r9]
 802205a:	9503      	str	r5, [sp, #12]
 802205c:	9601      	str	r6, [sp, #4]
 802205e:	9700      	str	r7, [sp, #0]
 8022060:	e9cd 1e04 	strd	r1, lr, [sp, #16]
 8022064:	f8bd 102c 	ldrh.w	r1, [sp, #44]	@ 0x2c
 8022068:	9102      	str	r1, [sp, #8]
 802206a:	4621      	mov	r1, r4
 802206c:	f8dc 5040 	ldr.w	r5, [ip, #64]	@ 0x40
 8022070:	47a8      	blx	r5
 8022072:	b00e      	add	sp, #56	@ 0x38
 8022074:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8022078:	f010 0f04 	tst.w	r0, #4
 802207c:	e7d9      	b.n	8022032 <_ZN8touchgfx8LCD16bpp14blitCopyRGB888EPKhRKNS_4RectES5_h+0x76>
 802207e:	6803      	ldr	r3, [r0, #0]
 8022080:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8022082:	4798      	blx	r3
 8022084:	f8b9 3000 	ldrh.w	r3, [r9]
 8022088:	f9bd 2032 	ldrsh.w	r2, [sp, #50]	@ 0x32
 802208c:	ea4f 0e47 	mov.w	lr, r7, lsl #1
 8022090:	f9bd 1030 	ldrsh.w	r1, [sp, #48]	@ 0x30
 8022094:	435e      	muls	r6, r3
 8022096:	f9bd c02c 	ldrsh.w	ip, [sp, #44]	@ 0x2c
 802209a:	2dff      	cmp	r5, #255	@ 0xff
 802209c:	fb03 1202 	mla	r2, r3, r2, r1
 80220a0:	ebac 0c07 	sub.w	ip, ip, r7
 80220a4:	eba3 0707 	sub.w	r7, r3, r7
 80220a8:	eb00 0042 	add.w	r0, r0, r2, lsl #1
 80220ac:	eb0c 0c4c 	add.w	ip, ip, ip, lsl #1
 80220b0:	eb00 0646 	add.w	r6, r0, r6, lsl #1
 80220b4:	ea4f 0747 	mov.w	r7, r7, lsl #1
 80220b8:	d049      	beq.n	802214e <_ZN8touchgfx8LCD16bpp14blitCopyRGB888EPKhRKNS_4RectES5_h+0x192>
 80220ba:	43eb      	mvns	r3, r5
 80220bc:	fa1f f985 	uxth.w	r9, r5
 80220c0:	b2db      	uxtb	r3, r3
 80220c2:	42b0      	cmp	r0, r6
 80220c4:	d266      	bcs.n	8022194 <_ZN8touchgfx8LCD16bpp14blitCopyRGB888EPKhRKNS_4RectES5_h+0x1d8>
 80220c6:	eb00 0a0e 	add.w	sl, r0, lr
 80220ca:	4550      	cmp	r0, sl
 80220cc:	4621      	mov	r1, r4
 80220ce:	f104 0403 	add.w	r4, r4, #3
 80220d2:	d25b      	bcs.n	802218c <_ZN8touchgfx8LCD16bpp14blitCopyRGB888EPKhRKNS_4RectES5_h+0x1d0>
 80220d4:	8802      	ldrh	r2, [r0, #0]
 80220d6:	f814 1c01 	ldrb.w	r1, [r4, #-1]
 80220da:	ea4f 2822 	mov.w	r8, r2, asr #8
 80220de:	fb11 f109 	smulbb	r1, r1, r9
 80220e2:	10d5      	asrs	r5, r2, #3
 80220e4:	f008 08f8 	and.w	r8, r8, #248	@ 0xf8
 80220e8:	00d2      	lsls	r2, r2, #3
 80220ea:	f005 05fc 	and.w	r5, r5, #252	@ 0xfc
 80220ee:	ea48 1858 	orr.w	r8, r8, r8, lsr #5
 80220f2:	ea45 1595 	orr.w	r5, r5, r5, lsr #6
 80220f6:	fb08 1803 	mla	r8, r8, r3, r1
 80220fa:	f814 1c02 	ldrb.w	r1, [r4, #-2]
 80220fe:	b2d2      	uxtb	r2, r2
 8022100:	fb11 f109 	smulbb	r1, r1, r9
 8022104:	fa1f f888 	uxth.w	r8, r8
 8022108:	ea42 1252 	orr.w	r2, r2, r2, lsr #5
 802210c:	fb05 1503 	mla	r5, r5, r3, r1
 8022110:	f814 1c03 	ldrb.w	r1, [r4, #-3]
 8022114:	fb11 f109 	smulbb	r1, r1, r9
 8022118:	b2ad      	uxth	r5, r5
 802211a:	fb02 1203 	mla	r2, r2, r3, r1
 802211e:	f108 0101 	add.w	r1, r8, #1
 8022122:	b292      	uxth	r2, r2
 8022124:	eb01 2818 	add.w	r8, r1, r8, lsr #8
 8022128:	1c51      	adds	r1, r2, #1
 802212a:	f408 4878 	and.w	r8, r8, #63488	@ 0xf800
 802212e:	eb01 2212 	add.w	r2, r1, r2, lsr #8
 8022132:	1c69      	adds	r1, r5, #1
 8022134:	eb01 2515 	add.w	r5, r1, r5, lsr #8
 8022138:	f3c2 22c4 	ubfx	r2, r2, #11, #5
 802213c:	096d      	lsrs	r5, r5, #5
 802213e:	ea42 0208 	orr.w	r2, r2, r8
 8022142:	f405 65fc 	and.w	r5, r5, #2016	@ 0x7e0
 8022146:	432a      	orrs	r2, r5
 8022148:	f820 2b02 	strh.w	r2, [r0], #2
 802214c:	e7bd      	b.n	80220ca <_ZN8touchgfx8LCD16bpp14blitCopyRGB888EPKhRKNS_4RectES5_h+0x10e>
 802214e:	4a14      	ldr	r2, [pc, #80]	@ (80221a0 <_ZN8touchgfx8LCD16bpp14blitCopyRGB888EPKhRKNS_4RectES5_h+0x1e4>)
 8022150:	42b0      	cmp	r0, r6
 8022152:	d21f      	bcs.n	8022194 <_ZN8touchgfx8LCD16bpp14blitCopyRGB888EPKhRKNS_4RectES5_h+0x1d8>
 8022154:	eb00 050e 	add.w	r5, r0, lr
 8022158:	42a8      	cmp	r0, r5
 802215a:	4621      	mov	r1, r4
 802215c:	f104 0403 	add.w	r4, r4, #3
 8022160:	d210      	bcs.n	8022184 <_ZN8touchgfx8LCD16bpp14blitCopyRGB888EPKhRKNS_4RectES5_h+0x1c8>
 8022162:	f814 3c02 	ldrb.w	r3, [r4, #-2]
 8022166:	f814 1c01 	ldrb.w	r1, [r4, #-1]
 802216a:	00db      	lsls	r3, r3, #3
 802216c:	ea02 2101 	and.w	r1, r2, r1, lsl #8
 8022170:	f403 63fc 	and.w	r3, r3, #2016	@ 0x7e0
 8022174:	430b      	orrs	r3, r1
 8022176:	f814 1c03 	ldrb.w	r1, [r4, #-3]
 802217a:	ea43 03d1 	orr.w	r3, r3, r1, lsr #3
 802217e:	f820 3b02 	strh.w	r3, [r0], #2
 8022182:	e7e9      	b.n	8022158 <_ZN8touchgfx8LCD16bpp14blitCopyRGB888EPKhRKNS_4RectES5_h+0x19c>
 8022184:	4438      	add	r0, r7
 8022186:	eb01 040c 	add.w	r4, r1, ip
 802218a:	e7e1      	b.n	8022150 <_ZN8touchgfx8LCD16bpp14blitCopyRGB888EPKhRKNS_4RectES5_h+0x194>
 802218c:	4438      	add	r0, r7
 802218e:	eb01 040c 	add.w	r4, r1, ip
 8022192:	e796      	b.n	80220c2 <_ZN8touchgfx8LCD16bpp14blitCopyRGB888EPKhRKNS_4RectES5_h+0x106>
 8022194:	4b03      	ldr	r3, [pc, #12]	@ (80221a4 <_ZN8touchgfx8LCD16bpp14blitCopyRGB888EPKhRKNS_4RectES5_h+0x1e8>)
 8022196:	6818      	ldr	r0, [r3, #0]
 8022198:	6803      	ldr	r3, [r0, #0]
 802219a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 802219c:	4798      	blx	r3
 802219e:	e768      	b.n	8022072 <_ZN8touchgfx8LCD16bpp14blitCopyRGB888EPKhRKNS_4RectES5_h+0xb6>
 80221a0:	fffff800 	.word	0xfffff800
 80221a4:	2400b884 	.word	0x2400b884
 80221a8:	2400b87e 	.word	0x2400b87e

080221ac <_ZN8touchgfx8LCD16bpp8blitCopyEPKhNS_6Bitmap12BitmapFormatERKNS_4RectES7_hb>:
 80221ac:	b570      	push	{r4, r5, r6, lr}
 80221ae:	9c04      	ldr	r4, [sp, #16]
 80221b0:	4605      	mov	r5, r0
 80221b2:	f89d 6018 	ldrb.w	r6, [sp, #24]
 80221b6:	4608      	mov	r0, r1
 80221b8:	4619      	mov	r1, r3
 80221ba:	f89d 3014 	ldrb.w	r3, [sp, #20]
 80221be:	2a0d      	cmp	r2, #13
 80221c0:	d825      	bhi.n	802220e <_ZN8touchgfx8LCD16bpp8blitCopyEPKhNS_6Bitmap12BitmapFormatERKNS_4RectES7_hb+0x62>
 80221c2:	e8df f002 	tbb	[pc, r2]
 80221c6:	1807      	.short	0x1807
 80221c8:	1d1d1d13 	.word	0x1d1d1d13
 80221cc:	1d1d1d1d 	.word	0x1d1d1d1d
 80221d0:	1d1d1d1d 	.word	0x1d1d1d1d
 80221d4:	682a      	ldr	r2, [r5, #0]
 80221d6:	e9cd 3604 	strd	r3, r6, [sp, #16]
 80221da:	68d6      	ldr	r6, [r2, #12]
 80221dc:	4623      	mov	r3, r4
 80221de:	460a      	mov	r2, r1
 80221e0:	4601      	mov	r1, r0
 80221e2:	46b4      	mov	ip, r6
 80221e4:	4628      	mov	r0, r5
 80221e6:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 80221ea:	4760      	bx	ip
 80221ec:	4622      	mov	r2, r4
 80221ee:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 80221f2:	f7ff bd8d 	b.w	8021d10 <_ZN8touchgfx8LCD16bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h>
 80221f6:	4622      	mov	r2, r4
 80221f8:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 80221fc:	f7ff bede 	b.w	8021fbc <_ZN8touchgfx8LCD16bpp14blitCopyRGB888EPKhRKNS_4RectES5_h>
 8022200:	4b03      	ldr	r3, [pc, #12]	@ (8022210 <_ZN8touchgfx8LCD16bpp8blitCopyEPKhNS_6Bitmap12BitmapFormatERKNS_4RectES7_hb+0x64>)
 8022202:	f240 315d 	movw	r1, #861	@ 0x35d
 8022206:	4a03      	ldr	r2, [pc, #12]	@ (8022214 <_ZN8touchgfx8LCD16bpp8blitCopyEPKhNS_6Bitmap12BitmapFormatERKNS_4RectES7_hb+0x68>)
 8022208:	4803      	ldr	r0, [pc, #12]	@ (8022218 <_ZN8touchgfx8LCD16bpp8blitCopyEPKhNS_6Bitmap12BitmapFormatERKNS_4RectES7_hb+0x6c>)
 802220a:	f008 fd1b 	bl	802ac44 <__assert_func>
 802220e:	bd70      	pop	{r4, r5, r6, pc}
 8022210:	0802fee6 	.word	0x0802fee6
 8022214:	08030646 	.word	0x08030646
 8022218:	0802fdc1 	.word	0x0802fdc1

0802221c <_ZN8touchgfx8LCD16bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h>:
 802221c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8022220:	b093      	sub	sp, #76	@ 0x4c
 8022222:	880e      	ldrh	r6, [r1, #0]
 8022224:	4681      	mov	r9, r0
 8022226:	4688      	mov	r8, r1
 8022228:	4615      	mov	r5, r2
 802222a:	f89d a070 	ldrb.w	sl, [sp, #112]	@ 0x70
 802222e:	b136      	cbz	r6, 802223e <_ZN8touchgfx8LCD16bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x22>
 8022230:	4b70      	ldr	r3, [pc, #448]	@ (80223f4 <_ZN8touchgfx8LCD16bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x1d8>)
 8022232:	f44f 71c5 	mov.w	r1, #394	@ 0x18a
 8022236:	4a70      	ldr	r2, [pc, #448]	@ (80223f8 <_ZN8touchgfx8LCD16bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x1dc>)
 8022238:	4870      	ldr	r0, [pc, #448]	@ (80223fc <_ZN8touchgfx8LCD16bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x1e0>)
 802223a:	f008 fd03 	bl	802ac44 <__assert_func>
 802223e:	6810      	ldr	r0, [r2, #0]
 8022240:	ac0e      	add	r4, sp, #56	@ 0x38
 8022242:	6851      	ldr	r1, [r2, #4]
 8022244:	4f6e      	ldr	r7, [pc, #440]	@ (8022400 <_ZN8touchgfx8LCD16bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x1e4>)
 8022246:	f8df b1bc 	ldr.w	fp, [pc, #444]	@ 8022404 <_ZN8touchgfx8LCD16bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x1e8>
 802224a:	c403      	stmia	r4!, {r0, r1}
 802224c:	6818      	ldr	r0, [r3, #0]
 802224e:	ac10      	add	r4, sp, #64	@ 0x40
 8022250:	6859      	ldr	r1, [r3, #4]
 8022252:	c403      	stmia	r4!, {r0, r1}
 8022254:	a80e      	add	r0, sp, #56	@ 0x38
 8022256:	f7f9 f9c7 	bl	801b5e8 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 802225a:	4629      	mov	r1, r5
 802225c:	a810      	add	r0, sp, #64	@ 0x40
 802225e:	f7f9 f9eb 	bl	801b638 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
 8022262:	f9bd 2040 	ldrsh.w	r2, [sp, #64]	@ 0x40
 8022266:	f9bd 3042 	ldrsh.w	r3, [sp, #66]	@ 0x42
 802226a:	f8bd 103c 	ldrh.w	r1, [sp, #60]	@ 0x3c
 802226e:	6838      	ldr	r0, [r7, #0]
 8022270:	fb11 2103 	smlabb	r1, r1, r3, r2
 8022274:	f9bd 4044 	ldrsh.w	r4, [sp, #68]	@ 0x44
 8022278:	f9bd 5046 	ldrsh.w	r5, [sp, #70]	@ 0x46
 802227c:	4489      	add	r9, r1
 802227e:	f8bd 1038 	ldrh.w	r1, [sp, #56]	@ 0x38
 8022282:	440a      	add	r2, r1
 8022284:	f8ad 2040 	strh.w	r2, [sp, #64]	@ 0x40
 8022288:	f8bd 203a 	ldrh.w	r2, [sp, #58]	@ 0x3a
 802228c:	4413      	add	r3, r2
 802228e:	f8ad 3042 	strh.w	r3, [sp, #66]	@ 0x42
 8022292:	6803      	ldr	r3, [r0, #0]
 8022294:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8022296:	4798      	blx	r3
 8022298:	f010 0f80 	tst.w	r0, #128	@ 0x80
 802229c:	6838      	ldr	r0, [r7, #0]
 802229e:	d01d      	beq.n	80222dc <_ZN8touchgfx8LCD16bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0xc0>
 80222a0:	210b      	movs	r1, #11
 80222a2:	6802      	ldr	r2, [r0, #0]
 80222a4:	b2a4      	uxth	r4, r4
 80222a6:	f8bd 3040 	ldrh.w	r3, [sp, #64]	@ 0x40
 80222aa:	9107      	str	r1, [sp, #28]
 80222ac:	b2ad      	uxth	r5, r5
 80222ae:	e9cd 6608 	strd	r6, r6, [sp, #32]
 80222b2:	f8bb 1000 	ldrh.w	r1, [fp]
 80222b6:	9502      	str	r5, [sp, #8]
 80222b8:	9106      	str	r1, [sp, #24]
 80222ba:	2101      	movs	r1, #1
 80222bc:	9401      	str	r4, [sp, #4]
 80222be:	e9cd a104 	strd	sl, r1, [sp, #16]
 80222c2:	f8bd 103c 	ldrh.w	r1, [sp, #60]	@ 0x3c
 80222c6:	9103      	str	r1, [sp, #12]
 80222c8:	f8bd 1042 	ldrh.w	r1, [sp, #66]	@ 0x42
 80222cc:	9100      	str	r1, [sp, #0]
 80222ce:	4649      	mov	r1, r9
 80222d0:	6bd4      	ldr	r4, [r2, #60]	@ 0x3c
 80222d2:	4642      	mov	r2, r8
 80222d4:	47a0      	blx	r4
 80222d6:	b013      	add	sp, #76	@ 0x4c
 80222d8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80222dc:	6803      	ldr	r3, [r0, #0]
 80222de:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80222e0:	4798      	blx	r3
 80222e2:	f8bb 3000 	ldrh.w	r3, [fp]
 80222e6:	f9bd 2042 	ldrsh.w	r2, [sp, #66]	@ 0x42
 80222ea:	f04f 0e04 	mov.w	lr, #4
 80222ee:	f9bd 1040 	ldrsh.w	r1, [sp, #64]	@ 0x40
 80222f2:	435d      	muls	r5, r3
 80222f4:	fb03 1202 	mla	r2, r3, r2, r1
 80222f8:	eb00 0042 	add.w	r0, r0, r2, lsl #1
 80222fc:	eb00 0245 	add.w	r2, r0, r5, lsl #1
 8022300:	920c      	str	r2, [sp, #48]	@ 0x30
 8022302:	f9bd 203c 	ldrsh.w	r2, [sp, #60]	@ 0x3c
 8022306:	1b12      	subs	r2, r2, r4
 8022308:	920d      	str	r2, [sp, #52]	@ 0x34
 802230a:	0062      	lsls	r2, r4, #1
 802230c:	1b1c      	subs	r4, r3, r4
 802230e:	920a      	str	r2, [sp, #40]	@ 0x28
 8022310:	0063      	lsls	r3, r4, #1
 8022312:	930b      	str	r3, [sp, #44]	@ 0x2c
 8022314:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8022316:	4298      	cmp	r0, r3
 8022318:	d266      	bcs.n	80223e8 <_ZN8touchgfx8LCD16bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x1cc>
 802231a:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 802231c:	eb00 0b03 	add.w	fp, r0, r3
 8022320:	4558      	cmp	r0, fp
 8022322:	d25c      	bcs.n	80223de <_ZN8touchgfx8LCD16bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x1c2>
 8022324:	f819 3b01 	ldrb.w	r3, [r9], #1
 8022328:	fb1e e303 	smlabb	r3, lr, r3, lr
 802232c:	f858 2003 	ldr.w	r2, [r8, r3]
 8022330:	0e11      	lsrs	r1, r2, #24
 8022332:	d012      	beq.n	802235a <_ZN8touchgfx8LCD16bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x13e>
 8022334:	29ff      	cmp	r1, #255	@ 0xff
 8022336:	ea4f 2712 	mov.w	r7, r2, lsr #8
 802233a:	d110      	bne.n	802235e <_ZN8touchgfx8LCD16bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x142>
 802233c:	f1ba 0fff 	cmp.w	sl, #255	@ 0xff
 8022340:	d10d      	bne.n	802235e <_ZN8touchgfx8LCD16bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x142>
 8022342:	0953      	lsrs	r3, r2, #5
 8022344:	f427 67ff 	bic.w	r7, r7, #2040	@ 0x7f8
 8022348:	f3c2 02c4 	ubfx	r2, r2, #3, #5
 802234c:	f403 63fc 	and.w	r3, r3, #2016	@ 0x7e0
 8022350:	f027 0707 	bic.w	r7, r7, #7
 8022354:	431f      	orrs	r7, r3
 8022356:	433a      	orrs	r2, r7
 8022358:	8002      	strh	r2, [r0, #0]
 802235a:	3002      	adds	r0, #2
 802235c:	e7e0      	b.n	8022320 <_ZN8touchgfx8LCD16bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x104>
 802235e:	fb0a f101 	mul.w	r1, sl, r1
 8022362:	8806      	ldrh	r6, [r0, #0]
 8022364:	f3c2 4c07 	ubfx	ip, r2, #16, #8
 8022368:	b2d2      	uxtb	r2, r2
 802236a:	1c4b      	adds	r3, r1, #1
 802236c:	1235      	asrs	r5, r6, #8
 802236e:	10f4      	asrs	r4, r6, #3
 8022370:	eb03 2321 	add.w	r3, r3, r1, asr #8
 8022374:	f005 05f8 	and.w	r5, r5, #248	@ 0xf8
 8022378:	00f6      	lsls	r6, r6, #3
 802237a:	f004 04fc 	and.w	r4, r4, #252	@ 0xfc
 802237e:	121b      	asrs	r3, r3, #8
 8022380:	b2f6      	uxtb	r6, r6
 8022382:	b299      	uxth	r1, r3
 8022384:	43db      	mvns	r3, r3
 8022386:	ea45 1555 	orr.w	r5, r5, r5, lsr #5
 802238a:	fb1c fc01 	smulbb	ip, ip, r1
 802238e:	b2db      	uxtb	r3, r3
 8022390:	fb12 f201 	smulbb	r2, r2, r1
 8022394:	ea46 1656 	orr.w	r6, r6, r6, lsr #5
 8022398:	fb05 c503 	mla	r5, r5, r3, ip
 802239c:	b2ff      	uxtb	r7, r7
 802239e:	fb06 2203 	mla	r2, r6, r3, r2
 80223a2:	ea44 1494 	orr.w	r4, r4, r4, lsr #6
 80223a6:	fb17 f701 	smulbb	r7, r7, r1
 80223aa:	b2ad      	uxth	r5, r5
 80223ac:	b292      	uxth	r2, r2
 80223ae:	fb04 7403 	mla	r4, r4, r3, r7
 80223b2:	f105 0c01 	add.w	ip, r5, #1
 80223b6:	1c57      	adds	r7, r2, #1
 80223b8:	eb0c 2515 	add.w	r5, ip, r5, lsr #8
 80223bc:	eb07 2712 	add.w	r7, r7, r2, lsr #8
 80223c0:	b2a4      	uxth	r4, r4
 80223c2:	f405 4578 	and.w	r5, r5, #63488	@ 0xf800
 80223c6:	f3c7 27c4 	ubfx	r7, r7, #11, #5
 80223ca:	433d      	orrs	r5, r7
 80223cc:	1c67      	adds	r7, r4, #1
 80223ce:	eb07 2414 	add.w	r4, r7, r4, lsr #8
 80223d2:	0964      	lsrs	r4, r4, #5
 80223d4:	f404 64fc 	and.w	r4, r4, #2016	@ 0x7e0
 80223d8:	4325      	orrs	r5, r4
 80223da:	8005      	strh	r5, [r0, #0]
 80223dc:	e7bd      	b.n	802235a <_ZN8touchgfx8LCD16bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x13e>
 80223de:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80223e0:	4418      	add	r0, r3
 80223e2:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 80223e4:	4499      	add	r9, r3
 80223e6:	e795      	b.n	8022314 <_ZN8touchgfx8LCD16bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0xf8>
 80223e8:	4b05      	ldr	r3, [pc, #20]	@ (8022400 <_ZN8touchgfx8LCD16bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x1e4>)
 80223ea:	6818      	ldr	r0, [r3, #0]
 80223ec:	6803      	ldr	r3, [r0, #0]
 80223ee:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80223f0:	4798      	blx	r3
 80223f2:	e770      	b.n	80222d6 <_ZN8touchgfx8LCD16bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0xba>
 80223f4:	0802fcbf 	.word	0x0802fcbf
 80223f8:	08030417 	.word	0x08030417
 80223fc:	0802fdc1 	.word	0x0802fdc1
 8022400:	2400b884 	.word	0x2400b884
 8022404:	2400b87e 	.word	0x2400b87e

08022408 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB565EPKhS2_RKNS_4RectES5_h>:
 8022408:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 802240c:	4614      	mov	r4, r2
 802240e:	880a      	ldrh	r2, [r1, #0]
 8022410:	b087      	sub	sp, #28
 8022412:	4680      	mov	r8, r0
 8022414:	2a02      	cmp	r2, #2
 8022416:	460d      	mov	r5, r1
 8022418:	f89d 6040 	ldrb.w	r6, [sp, #64]	@ 0x40
 802241c:	d006      	beq.n	802242c <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB565EPKhS2_RKNS_4RectES5_h+0x24>
 802241e:	4b63      	ldr	r3, [pc, #396]	@ (80225ac <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB565EPKhS2_RKNS_4RectES5_h+0x1a4>)
 8022420:	f240 11e1 	movw	r1, #481	@ 0x1e1
 8022424:	4a62      	ldr	r2, [pc, #392]	@ (80225b0 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB565EPKhS2_RKNS_4RectES5_h+0x1a8>)
 8022426:	4863      	ldr	r0, [pc, #396]	@ (80225b4 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB565EPKhS2_RKNS_4RectES5_h+0x1ac>)
 8022428:	f008 fc0c 	bl	802ac44 <__assert_func>
 802242c:	2e00      	cmp	r6, #0
 802242e:	f000 80b9 	beq.w	80225a4 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB565EPKhS2_RKNS_4RectES5_h+0x19c>
 8022432:	6820      	ldr	r0, [r4, #0]
 8022434:	af02      	add	r7, sp, #8
 8022436:	6861      	ldr	r1, [r4, #4]
 8022438:	c703      	stmia	r7!, {r0, r1}
 802243a:	6818      	ldr	r0, [r3, #0]
 802243c:	af04      	add	r7, sp, #16
 802243e:	6859      	ldr	r1, [r3, #4]
 8022440:	c703      	stmia	r7!, {r0, r1}
 8022442:	a802      	add	r0, sp, #8
 8022444:	f7f9 f8d0 	bl	801b5e8 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 8022448:	4621      	mov	r1, r4
 802244a:	a804      	add	r0, sp, #16
 802244c:	f7f9 f8f4 	bl	801b638 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
 8022450:	f9bd 2010 	ldrsh.w	r2, [sp, #16]
 8022454:	f9bd 3012 	ldrsh.w	r3, [sp, #18]
 8022458:	f8bd 400c 	ldrh.w	r4, [sp, #12]
 802245c:	f9bd 7016 	ldrsh.w	r7, [sp, #22]
 8022460:	fb14 2103 	smlabb	r1, r4, r3, r2
 8022464:	eb08 0401 	add.w	r4, r8, r1
 8022468:	f8bd 1008 	ldrh.w	r1, [sp, #8]
 802246c:	f9bd 8014 	ldrsh.w	r8, [sp, #20]
 8022470:	440a      	add	r2, r1
 8022472:	ea4f 0a48 	mov.w	sl, r8, lsl #1
 8022476:	f8ad 2010 	strh.w	r2, [sp, #16]
 802247a:	f8bd 200a 	ldrh.w	r2, [sp, #10]
 802247e:	4413      	add	r3, r2
 8022480:	f8ad 3012 	strh.w	r3, [sp, #18]
 8022484:	4b4c      	ldr	r3, [pc, #304]	@ (80225b8 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB565EPKhS2_RKNS_4RectES5_h+0x1b0>)
 8022486:	6818      	ldr	r0, [r3, #0]
 8022488:	6803      	ldr	r3, [r0, #0]
 802248a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 802248c:	4798      	blx	r3
 802248e:	4b4b      	ldr	r3, [pc, #300]	@ (80225bc <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB565EPKhS2_RKNS_4RectES5_h+0x1b4>)
 8022490:	f9bd 1012 	ldrsh.w	r1, [sp, #18]
 8022494:	2eff      	cmp	r6, #255	@ 0xff
 8022496:	881a      	ldrh	r2, [r3, #0]
 8022498:	f9bd c010 	ldrsh.w	ip, [sp, #16]
 802249c:	fb02 c101 	mla	r1, r2, r1, ip
 80224a0:	fb02 f207 	mul.w	r2, r2, r7
 80224a4:	eb00 0041 	add.w	r0, r0, r1, lsl #1
 80224a8:	f105 0104 	add.w	r1, r5, #4
 80224ac:	461d      	mov	r5, r3
 80224ae:	d05a      	beq.n	8022566 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB565EPKhS2_RKNS_4RectES5_h+0x15e>
 80224b0:	f1c6 0eff 	rsb	lr, r6, #255	@ 0xff
 80224b4:	eb00 0242 	add.w	r2, r0, r2, lsl #1
 80224b8:	b2b6      	uxth	r6, r6
 80224ba:	9301      	str	r3, [sp, #4]
 80224bc:	fa1f fe8e 	uxth.w	lr, lr
 80224c0:	4282      	cmp	r2, r0
 80224c2:	d96a      	bls.n	802259a <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB565EPKhS2_RKNS_4RectES5_h+0x192>
 80224c4:	eb00 0b0a 	add.w	fp, r0, sl
 80224c8:	4583      	cmp	fp, r0
 80224ca:	d940      	bls.n	802254e <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB565EPKhS2_RKNS_4RectES5_h+0x146>
 80224cc:	8805      	ldrh	r5, [r0, #0]
 80224ce:	f814 3b01 	ldrb.w	r3, [r4], #1
 80224d2:	122f      	asrs	r7, r5, #8
 80224d4:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 80224d8:	ea4f 09e5 	mov.w	r9, r5, asr #3
 80224dc:	f007 07f8 	and.w	r7, r7, #248	@ 0xf8
 80224e0:	00ed      	lsls	r5, r5, #3
 80224e2:	ea4f 2c23 	mov.w	ip, r3, asr #8
 80224e6:	f009 09fc 	and.w	r9, r9, #252	@ 0xfc
 80224ea:	fb17 f70e 	smulbb	r7, r7, lr
 80224ee:	b2ed      	uxtb	r5, r5
 80224f0:	fb19 f90e 	smulbb	r9, r9, lr
 80224f4:	f00c 0cf8 	and.w	ip, ip, #248	@ 0xf8
 80224f8:	fb15 f50e 	smulbb	r5, r5, lr
 80224fc:	fb0c 7c06 	mla	ip, ip, r6, r7
 8022500:	10df      	asrs	r7, r3, #3
 8022502:	00db      	lsls	r3, r3, #3
 8022504:	fa1f fc8c 	uxth.w	ip, ip
 8022508:	f007 07fc 	and.w	r7, r7, #252	@ 0xfc
 802250c:	b2db      	uxtb	r3, r3
 802250e:	fb07 9706 	mla	r7, r7, r6, r9
 8022512:	f10c 0901 	add.w	r9, ip, #1
 8022516:	fb03 5306 	mla	r3, r3, r6, r5
 802251a:	eb09 2c1c 	add.w	ip, r9, ip, lsr #8
 802251e:	b29b      	uxth	r3, r3
 8022520:	f40c 4978 	and.w	r9, ip, #63488	@ 0xf800
 8022524:	b2bf      	uxth	r7, r7
 8022526:	f103 0c01 	add.w	ip, r3, #1
 802252a:	eb0c 2c13 	add.w	ip, ip, r3, lsr #8
 802252e:	f3cc 2cc4 	ubfx	ip, ip, #11, #5
 8022532:	ea4c 0c09 	orr.w	ip, ip, r9
 8022536:	f107 0901 	add.w	r9, r7, #1
 802253a:	eb09 2717 	add.w	r7, r9, r7, lsr #8
 802253e:	097f      	lsrs	r7, r7, #5
 8022540:	f407 67fc 	and.w	r7, r7, #2016	@ 0x7e0
 8022544:	ea4c 0c07 	orr.w	ip, ip, r7
 8022548:	f820 cb02 	strh.w	ip, [r0], #2
 802254c:	e7bc      	b.n	80224c8 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB565EPKhS2_RKNS_4RectES5_h+0xc0>
 802254e:	9b01      	ldr	r3, [sp, #4]
 8022550:	881b      	ldrh	r3, [r3, #0]
 8022552:	eba3 0308 	sub.w	r3, r3, r8
 8022556:	eb00 0043 	add.w	r0, r0, r3, lsl #1
 802255a:	f9bd 300c 	ldrsh.w	r3, [sp, #12]
 802255e:	eba3 0308 	sub.w	r3, r3, r8
 8022562:	441c      	add	r4, r3
 8022564:	e7ac      	b.n	80224c0 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB565EPKhS2_RKNS_4RectES5_h+0xb8>
 8022566:	eb00 0242 	add.w	r2, r0, r2, lsl #1
 802256a:	4282      	cmp	r2, r0
 802256c:	d915      	bls.n	802259a <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB565EPKhS2_RKNS_4RectES5_h+0x192>
 802256e:	eb00 060a 	add.w	r6, r0, sl
 8022572:	4286      	cmp	r6, r0
 8022574:	d906      	bls.n	8022584 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB565EPKhS2_RKNS_4RectES5_h+0x17c>
 8022576:	f814 3b01 	ldrb.w	r3, [r4], #1
 802257a:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 802257e:	f820 3b02 	strh.w	r3, [r0], #2
 8022582:	e7f6      	b.n	8022572 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB565EPKhS2_RKNS_4RectES5_h+0x16a>
 8022584:	882b      	ldrh	r3, [r5, #0]
 8022586:	eba3 0308 	sub.w	r3, r3, r8
 802258a:	eb00 0043 	add.w	r0, r0, r3, lsl #1
 802258e:	f9bd 300c 	ldrsh.w	r3, [sp, #12]
 8022592:	eba3 0308 	sub.w	r3, r3, r8
 8022596:	441c      	add	r4, r3
 8022598:	e7e7      	b.n	802256a <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB565EPKhS2_RKNS_4RectES5_h+0x162>
 802259a:	4b07      	ldr	r3, [pc, #28]	@ (80225b8 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB565EPKhS2_RKNS_4RectES5_h+0x1b0>)
 802259c:	6818      	ldr	r0, [r3, #0]
 802259e:	6803      	ldr	r3, [r0, #0]
 80225a0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80225a2:	4798      	blx	r3
 80225a4:	b007      	add	sp, #28
 80225a6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80225aa:	bf00      	nop
 80225ac:	0802fbef 	.word	0x0802fbef
 80225b0:	08030281 	.word	0x08030281
 80225b4:	0802fdc1 	.word	0x0802fdc1
 80225b8:	2400b884 	.word	0x2400b884
 80225bc:	2400b87e 	.word	0x2400b87e

080225c0 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h>:
 80225c0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80225c4:	f8b1 9000 	ldrh.w	r9, [r1]
 80225c8:	b091      	sub	sp, #68	@ 0x44
 80225ca:	4604      	mov	r4, r0
 80225cc:	460f      	mov	r7, r1
 80225ce:	f1b9 0f01 	cmp.w	r9, #1
 80225d2:	4690      	mov	r8, r2
 80225d4:	f89d 5068 	ldrb.w	r5, [sp, #104]	@ 0x68
 80225d8:	d006      	beq.n	80225e8 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x28>
 80225da:	4b84      	ldr	r3, [pc, #528]	@ (80227ec <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x22c>)
 80225dc:	f240 212f 	movw	r1, #559	@ 0x22f
 80225e0:	4a83      	ldr	r2, [pc, #524]	@ (80227f0 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x230>)
 80225e2:	4884      	ldr	r0, [pc, #528]	@ (80227f4 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x234>)
 80225e4:	f008 fb2e 	bl	802ac44 <__assert_func>
 80225e8:	2d00      	cmp	r5, #0
 80225ea:	d04f      	beq.n	802268c <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0xcc>
 80225ec:	6810      	ldr	r0, [r2, #0]
 80225ee:	ae0c      	add	r6, sp, #48	@ 0x30
 80225f0:	6851      	ldr	r1, [r2, #4]
 80225f2:	f8df b208 	ldr.w	fp, [pc, #520]	@ 80227fc <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x23c>
 80225f6:	c603      	stmia	r6!, {r0, r1}
 80225f8:	6818      	ldr	r0, [r3, #0]
 80225fa:	ae0e      	add	r6, sp, #56	@ 0x38
 80225fc:	6859      	ldr	r1, [r3, #4]
 80225fe:	c603      	stmia	r6!, {r0, r1}
 8022600:	a80c      	add	r0, sp, #48	@ 0x30
 8022602:	f7f8 fff1 	bl	801b5e8 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 8022606:	4641      	mov	r1, r8
 8022608:	a80e      	add	r0, sp, #56	@ 0x38
 802260a:	f8df 81f4 	ldr.w	r8, [pc, #500]	@ 8022800 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x240>
 802260e:	f7f9 f813 	bl	801b638 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
 8022612:	f9bd 2038 	ldrsh.w	r2, [sp, #56]	@ 0x38
 8022616:	f9bd 303a 	ldrsh.w	r3, [sp, #58]	@ 0x3a
 802261a:	f8bd 1034 	ldrh.w	r1, [sp, #52]	@ 0x34
 802261e:	f8db 0000 	ldr.w	r0, [fp]
 8022622:	fb11 2103 	smlabb	r1, r1, r3, r2
 8022626:	f9bd 603c 	ldrsh.w	r6, [sp, #60]	@ 0x3c
 802262a:	f9bd a03e 	ldrsh.w	sl, [sp, #62]	@ 0x3e
 802262e:	440c      	add	r4, r1
 8022630:	f8bd 1030 	ldrh.w	r1, [sp, #48]	@ 0x30
 8022634:	440a      	add	r2, r1
 8022636:	f8ad 2038 	strh.w	r2, [sp, #56]	@ 0x38
 802263a:	f8bd 2032 	ldrh.w	r2, [sp, #50]	@ 0x32
 802263e:	4413      	add	r3, r2
 8022640:	f8ad 303a 	strh.w	r3, [sp, #58]	@ 0x3a
 8022644:	6803      	ldr	r3, [r0, #0]
 8022646:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8022648:	4798      	blx	r3
 802264a:	f010 0f80 	tst.w	r0, #128	@ 0x80
 802264e:	f8db 0000 	ldr.w	r0, [fp]
 8022652:	d01e      	beq.n	8022692 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0xd2>
 8022654:	2200      	movs	r2, #0
 8022656:	6801      	ldr	r1, [r0, #0]
 8022658:	b2b6      	uxth	r6, r6
 802265a:	f8bd 3038 	ldrh.w	r3, [sp, #56]	@ 0x38
 802265e:	e9cd 2208 	strd	r2, r2, [sp, #32]
 8022662:	220b      	movs	r2, #11
 8022664:	9207      	str	r2, [sp, #28]
 8022666:	f8b8 2000 	ldrh.w	r2, [r8]
 802266a:	9504      	str	r5, [sp, #16]
 802266c:	9601      	str	r6, [sp, #4]
 802266e:	e9cd 9205 	strd	r9, r2, [sp, #20]
 8022672:	f8bd 2034 	ldrh.w	r2, [sp, #52]	@ 0x34
 8022676:	9203      	str	r2, [sp, #12]
 8022678:	fa1f f28a 	uxth.w	r2, sl
 802267c:	9202      	str	r2, [sp, #8]
 802267e:	f8bd 203a 	ldrh.w	r2, [sp, #58]	@ 0x3a
 8022682:	9200      	str	r2, [sp, #0]
 8022684:	463a      	mov	r2, r7
 8022686:	6bcd      	ldr	r5, [r1, #60]	@ 0x3c
 8022688:	4621      	mov	r1, r4
 802268a:	47a8      	blx	r5
 802268c:	b011      	add	sp, #68	@ 0x44
 802268e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8022692:	6803      	ldr	r3, [r0, #0]
 8022694:	ea4f 0946 	mov.w	r9, r6, lsl #1
 8022698:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 802269a:	4798      	blx	r3
 802269c:	f8b8 2000 	ldrh.w	r2, [r8]
 80226a0:	f9bd 303a 	ldrsh.w	r3, [sp, #58]	@ 0x3a
 80226a4:	2dff      	cmp	r5, #255	@ 0xff
 80226a6:	f9bd 1038 	ldrsh.w	r1, [sp, #56]	@ 0x38
 80226aa:	fb0a fa02 	mul.w	sl, sl, r2
 80226ae:	fb02 1303 	mla	r3, r2, r3, r1
 80226b2:	eb00 0043 	add.w	r0, r0, r3, lsl #1
 80226b6:	d062      	beq.n	802277e <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x1be>
 80226b8:	ea6f 0c05 	mvn.w	ip, r5
 80226bc:	eb00 034a 	add.w	r3, r0, sl, lsl #1
 80226c0:	b2ad      	uxth	r5, r5
 80226c2:	f8cd 802c 	str.w	r8, [sp, #44]	@ 0x2c
 80226c6:	fa5f fc8c 	uxtb.w	ip, ip
 80226ca:	930a      	str	r3, [sp, #40]	@ 0x28
 80226cc:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80226ce:	4298      	cmp	r0, r3
 80226d0:	f080 8085 	bcs.w	80227de <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x21e>
 80226d4:	eb00 0b09 	add.w	fp, r0, r9
 80226d8:	4558      	cmp	r0, fp
 80226da:	d246      	bcs.n	802276a <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x1aa>
 80226dc:	f814 eb01 	ldrb.w	lr, [r4], #1
 80226e0:	2303      	movs	r3, #3
 80226e2:	2204      	movs	r2, #4
 80226e4:	fb13 2e0e 	smlabb	lr, r3, lr, r2
 80226e8:	8803      	ldrh	r3, [r0, #0]
 80226ea:	eb07 0a0e 	add.w	sl, r7, lr
 80226ee:	1219      	asrs	r1, r3, #8
 80226f0:	10da      	asrs	r2, r3, #3
 80226f2:	f817 e00e 	ldrb.w	lr, [r7, lr]
 80226f6:	f89a 8002 	ldrb.w	r8, [sl, #2]
 80226fa:	f001 01f8 	and.w	r1, r1, #248	@ 0xf8
 80226fe:	00db      	lsls	r3, r3, #3
 8022700:	f002 02fc 	and.w	r2, r2, #252	@ 0xfc
 8022704:	fb18 f805 	smulbb	r8, r8, r5
 8022708:	ea41 1151 	orr.w	r1, r1, r1, lsr #5
 802270c:	fb1e fe05 	smulbb	lr, lr, r5
 8022710:	b2db      	uxtb	r3, r3
 8022712:	fb01 810c 	mla	r1, r1, ip, r8
 8022716:	f89a 8001 	ldrb.w	r8, [sl, #1]
 802271a:	ea42 1292 	orr.w	r2, r2, r2, lsr #6
 802271e:	fb18 f805 	smulbb	r8, r8, r5
 8022722:	ea43 1353 	orr.w	r3, r3, r3, lsr #5
 8022726:	b289      	uxth	r1, r1
 8022728:	fb02 820c 	mla	r2, r2, ip, r8
 802272c:	fb03 e30c 	mla	r3, r3, ip, lr
 8022730:	f101 0801 	add.w	r8, r1, #1
 8022734:	b292      	uxth	r2, r2
 8022736:	b29b      	uxth	r3, r3
 8022738:	eb08 2111 	add.w	r1, r8, r1, lsr #8
 802273c:	f102 0801 	add.w	r8, r2, #1
 8022740:	f103 0e01 	add.w	lr, r3, #1
 8022744:	eb08 2812 	add.w	r8, r8, r2, lsr #8
 8022748:	f401 4178 	and.w	r1, r1, #63488	@ 0xf800
 802274c:	eb0e 2e13 	add.w	lr, lr, r3, lsr #8
 8022750:	ea4f 1858 	mov.w	r8, r8, lsr #5
 8022754:	f3ce 2ec4 	ubfx	lr, lr, #11, #5
 8022758:	f408 68fc 	and.w	r8, r8, #2016	@ 0x7e0
 802275c:	ea4e 0101 	orr.w	r1, lr, r1
 8022760:	ea41 0108 	orr.w	r1, r1, r8
 8022764:	f820 1b02 	strh.w	r1, [r0], #2
 8022768:	e7b6      	b.n	80226d8 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x118>
 802276a:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 802276c:	881b      	ldrh	r3, [r3, #0]
 802276e:	1b9b      	subs	r3, r3, r6
 8022770:	eb00 0043 	add.w	r0, r0, r3, lsl #1
 8022774:	f9bd 3034 	ldrsh.w	r3, [sp, #52]	@ 0x34
 8022778:	1b9b      	subs	r3, r3, r6
 802277a:	441c      	add	r4, r3
 802277c:	e7a6      	b.n	80226cc <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x10c>
 802277e:	eb00 0a4a 	add.w	sl, r0, sl, lsl #1
 8022782:	2203      	movs	r2, #3
 8022784:	2504      	movs	r5, #4
 8022786:	491c      	ldr	r1, [pc, #112]	@ (80227f8 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x238>)
 8022788:	4550      	cmp	r0, sl
 802278a:	d228      	bcs.n	80227de <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x21e>
 802278c:	eb00 0c09 	add.w	ip, r0, r9
 8022790:	4560      	cmp	r0, ip
 8022792:	4623      	mov	r3, r4
 8022794:	d219      	bcs.n	80227ca <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x20a>
 8022796:	f893 e000 	ldrb.w	lr, [r3]
 802279a:	3401      	adds	r4, #1
 802279c:	fb12 5e0e 	smlabb	lr, r2, lr, r5
 80227a0:	eb07 0b0e 	add.w	fp, r7, lr
 80227a4:	f817 e00e 	ldrb.w	lr, [r7, lr]
 80227a8:	f89b 3002 	ldrb.w	r3, [fp, #2]
 80227ac:	f89b b001 	ldrb.w	fp, [fp, #1]
 80227b0:	ea01 2303 	and.w	r3, r1, r3, lsl #8
 80227b4:	ea4f 0bcb 	mov.w	fp, fp, lsl #3
 80227b8:	f40b 6bfc 	and.w	fp, fp, #2016	@ 0x7e0
 80227bc:	ea43 030b 	orr.w	r3, r3, fp
 80227c0:	ea43 03de 	orr.w	r3, r3, lr, lsr #3
 80227c4:	f820 3b02 	strh.w	r3, [r0], #2
 80227c8:	e7e2      	b.n	8022790 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x1d0>
 80227ca:	f8b8 3000 	ldrh.w	r3, [r8]
 80227ce:	1b9b      	subs	r3, r3, r6
 80227d0:	eb00 0043 	add.w	r0, r0, r3, lsl #1
 80227d4:	f9bd 3034 	ldrsh.w	r3, [sp, #52]	@ 0x34
 80227d8:	1b9b      	subs	r3, r3, r6
 80227da:	441c      	add	r4, r3
 80227dc:	e7d4      	b.n	8022788 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x1c8>
 80227de:	4b07      	ldr	r3, [pc, #28]	@ (80227fc <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x23c>)
 80227e0:	6818      	ldr	r0, [r3, #0]
 80227e2:	6803      	ldr	r3, [r0, #0]
 80227e4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80227e6:	4798      	blx	r3
 80227e8:	e750      	b.n	802268c <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0xcc>
 80227ea:	bf00      	nop
 80227ec:	0802fc3d 	.word	0x0802fc3d
 80227f0:	0803030a 	.word	0x0803030a
 80227f4:	0802fdc1 	.word	0x0802fdc1
 80227f8:	fffff800 	.word	0xfffff800
 80227fc:	2400b884 	.word	0x2400b884
 8022800:	2400b87e 	.word	0x2400b87e

08022804 <_ZN8touchgfx8LCD16bpp10blitCopyL8EPKhS2_RKNS_4RectES5_h>:
 8022804:	b430      	push	{r4, r5}
 8022806:	780d      	ldrb	r5, [r1, #0]
 8022808:	f89d 4008 	ldrb.w	r4, [sp, #8]
 802280c:	2d01      	cmp	r5, #1
 802280e:	d00a      	beq.n	8022826 <_ZN8touchgfx8LCD16bpp10blitCopyL8EPKhS2_RKNS_4RectES5_h+0x22>
 8022810:	d305      	bcc.n	802281e <_ZN8touchgfx8LCD16bpp10blitCopyL8EPKhS2_RKNS_4RectES5_h+0x1a>
 8022812:	2d02      	cmp	r5, #2
 8022814:	d10b      	bne.n	802282e <_ZN8touchgfx8LCD16bpp10blitCopyL8EPKhS2_RKNS_4RectES5_h+0x2a>
 8022816:	9402      	str	r4, [sp, #8]
 8022818:	bc30      	pop	{r4, r5}
 802281a:	f7ff bdf5 	b.w	8022408 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB565EPKhS2_RKNS_4RectES5_h>
 802281e:	9402      	str	r4, [sp, #8]
 8022820:	bc30      	pop	{r4, r5}
 8022822:	f7ff bcfb 	b.w	802221c <_ZN8touchgfx8LCD16bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h>
 8022826:	9402      	str	r4, [sp, #8]
 8022828:	bc30      	pop	{r4, r5}
 802282a:	f7ff bec9 	b.w	80225c0 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h>
 802282e:	bc30      	pop	{r4, r5}
 8022830:	4770      	bx	lr
	...

08022834 <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h>:
 8022834:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8022838:	b087      	sub	sp, #28
 802283a:	4604      	mov	r4, r0
 802283c:	460e      	mov	r6, r1
 802283e:	6810      	ldr	r0, [r2, #0]
 8022840:	6851      	ldr	r1, [r2, #4]
 8022842:	ad02      	add	r5, sp, #8
 8022844:	4617      	mov	r7, r2
 8022846:	f89d a040 	ldrb.w	sl, [sp, #64]	@ 0x40
 802284a:	f8df 9230 	ldr.w	r9, [pc, #560]	@ 8022a7c <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h+0x248>
 802284e:	c503      	stmia	r5!, {r0, r1}
 8022850:	6818      	ldr	r0, [r3, #0]
 8022852:	ad04      	add	r5, sp, #16
 8022854:	6859      	ldr	r1, [r3, #4]
 8022856:	c503      	stmia	r5!, {r0, r1}
 8022858:	a802      	add	r0, sp, #8
 802285a:	f7f8 fec5 	bl	801b5e8 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 802285e:	4639      	mov	r1, r7
 8022860:	a804      	add	r0, sp, #16
 8022862:	f7f8 fee9 	bl	801b638 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
 8022866:	f9bd 2010 	ldrsh.w	r2, [sp, #16]
 802286a:	f9bd 3012 	ldrsh.w	r3, [sp, #18]
 802286e:	f8bd 100c 	ldrh.w	r1, [sp, #12]
 8022872:	f9bd 8014 	ldrsh.w	r8, [sp, #20]
 8022876:	fb11 2103 	smlabb	r1, r1, r3, r2
 802287a:	f9bd 5016 	ldrsh.w	r5, [sp, #22]
 802287e:	eb04 0441 	add.w	r4, r4, r1, lsl #1
 8022882:	440e      	add	r6, r1
 8022884:	f8bd 1008 	ldrh.w	r1, [sp, #8]
 8022888:	440a      	add	r2, r1
 802288a:	f8ad 2010 	strh.w	r2, [sp, #16]
 802288e:	f8bd 200a 	ldrh.w	r2, [sp, #10]
 8022892:	4413      	add	r3, r2
 8022894:	f8ad 3012 	strh.w	r3, [sp, #18]
 8022898:	4b77      	ldr	r3, [pc, #476]	@ (8022a78 <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h+0x244>)
 802289a:	6818      	ldr	r0, [r3, #0]
 802289c:	6803      	ldr	r3, [r0, #0]
 802289e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80228a0:	4798      	blx	r3
 80228a2:	f8b9 b000 	ldrh.w	fp, [r9]
 80228a6:	f9bd 3012 	ldrsh.w	r3, [sp, #18]
 80228aa:	f1ba 0fff 	cmp.w	sl, #255	@ 0xff
 80228ae:	f9bd 2010 	ldrsh.w	r2, [sp, #16]
 80228b2:	fb05 f50b 	mul.w	r5, r5, fp
 80228b6:	fb0b 2303 	mla	r3, fp, r3, r2
 80228ba:	eb00 0043 	add.w	r0, r0, r3, lsl #1
 80228be:	ea4f 0348 	mov.w	r3, r8, lsl #1
 80228c2:	9300      	str	r3, [sp, #0]
 80228c4:	d069      	beq.n	802299a <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h+0x166>
 80228c6:	eb00 0b45 	add.w	fp, r0, r5, lsl #1
 80228ca:	4558      	cmp	r0, fp
 80228cc:	f080 80cc 	bcs.w	8022a68 <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h+0x234>
 80228d0:	9b00      	ldr	r3, [sp, #0]
 80228d2:	4631      	mov	r1, r6
 80228d4:	18c3      	adds	r3, r0, r3
 80228d6:	9301      	str	r3, [sp, #4]
 80228d8:	9b01      	ldr	r3, [sp, #4]
 80228da:	4298      	cmp	r0, r3
 80228dc:	d24f      	bcs.n	802297e <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h+0x14a>
 80228de:	f811 2b01 	ldrb.w	r2, [r1], #1
 80228e2:	2a00      	cmp	r2, #0
 80228e4:	d048      	beq.n	8022978 <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h+0x144>
 80228e6:	fb0a f202 	mul.w	r2, sl, r2
 80228ea:	1c53      	adds	r3, r2, #1
 80228ec:	eb03 2312 	add.w	r3, r3, r2, lsr #8
 80228f0:	121b      	asrs	r3, r3, #8
 80228f2:	d041      	beq.n	8022978 <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h+0x144>
 80228f4:	8802      	ldrh	r2, [r0, #0]
 80228f6:	b29e      	uxth	r6, r3
 80228f8:	f8b4 c000 	ldrh.w	ip, [r4]
 80228fc:	43db      	mvns	r3, r3
 80228fe:	1215      	asrs	r5, r2, #8
 8022900:	b2db      	uxtb	r3, r3
 8022902:	ea4f 272c 	mov.w	r7, ip, asr #8
 8022906:	f005 05f8 	and.w	r5, r5, #248	@ 0xf8
 802290a:	ea4f 0ee2 	mov.w	lr, r2, asr #3
 802290e:	fb15 f503 	smulbb	r5, r5, r3
 8022912:	f007 07f8 	and.w	r7, r7, #248	@ 0xf8
 8022916:	00d2      	lsls	r2, r2, #3
 8022918:	f00e 0efc 	and.w	lr, lr, #252	@ 0xfc
 802291c:	fb07 5706 	mla	r7, r7, r6, r5
 8022920:	ea4f 05ec 	mov.w	r5, ip, asr #3
 8022924:	b2d2      	uxtb	r2, r2
 8022926:	ea4f 0ccc 	mov.w	ip, ip, lsl #3
 802292a:	f005 05fc 	and.w	r5, r5, #252	@ 0xfc
 802292e:	fb1e fe03 	smulbb	lr, lr, r3
 8022932:	b2bf      	uxth	r7, r7
 8022934:	fb12 f203 	smulbb	r2, r2, r3
 8022938:	fa5f fc8c 	uxtb.w	ip, ip
 802293c:	fb05 e506 	mla	r5, r5, r6, lr
 8022940:	f107 0e01 	add.w	lr, r7, #1
 8022944:	fb0c 2c06 	mla	ip, ip, r6, r2
 8022948:	eb0e 2717 	add.w	r7, lr, r7, lsr #8
 802294c:	fa1f fc8c 	uxth.w	ip, ip
 8022950:	f407 4e78 	and.w	lr, r7, #63488	@ 0xf800
 8022954:	b2ad      	uxth	r5, r5
 8022956:	f10c 0701 	add.w	r7, ip, #1
 802295a:	eb07 271c 	add.w	r7, r7, ip, lsr #8
 802295e:	f3c7 27c4 	ubfx	r7, r7, #11, #5
 8022962:	ea47 070e 	orr.w	r7, r7, lr
 8022966:	f105 0e01 	add.w	lr, r5, #1
 802296a:	eb0e 2515 	add.w	r5, lr, r5, lsr #8
 802296e:	096d      	lsrs	r5, r5, #5
 8022970:	f405 65fc 	and.w	r5, r5, #2016	@ 0x7e0
 8022974:	432f      	orrs	r7, r5
 8022976:	8007      	strh	r7, [r0, #0]
 8022978:	3002      	adds	r0, #2
 802297a:	3402      	adds	r4, #2
 802297c:	e7ac      	b.n	80228d8 <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h+0xa4>
 802297e:	f8b9 3000 	ldrh.w	r3, [r9]
 8022982:	f9bd 600c 	ldrsh.w	r6, [sp, #12]
 8022986:	eba3 0308 	sub.w	r3, r3, r8
 802298a:	eba6 0608 	sub.w	r6, r6, r8
 802298e:	eb00 0043 	add.w	r0, r0, r3, lsl #1
 8022992:	eb04 0446 	add.w	r4, r4, r6, lsl #1
 8022996:	440e      	add	r6, r1
 8022998:	e797      	b.n	80228ca <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h+0x96>
 802299a:	eb00 0545 	add.w	r5, r0, r5, lsl #1
 802299e:	42a8      	cmp	r0, r5
 80229a0:	d262      	bcs.n	8022a68 <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h+0x234>
 80229a2:	9b00      	ldr	r3, [sp, #0]
 80229a4:	4631      	mov	r1, r6
 80229a6:	eb00 0b03 	add.w	fp, r0, r3
 80229aa:	4558      	cmp	r0, fp
 80229ac:	d24e      	bcs.n	8022a4c <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h+0x218>
 80229ae:	f811 3b01 	ldrb.w	r3, [r1], #1
 80229b2:	b12b      	cbz	r3, 80229c0 <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h+0x18c>
 80229b4:	2bff      	cmp	r3, #255	@ 0xff
 80229b6:	f8b4 e000 	ldrh.w	lr, [r4]
 80229ba:	d104      	bne.n	80229c6 <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h+0x192>
 80229bc:	f8a0 e000 	strh.w	lr, [r0]
 80229c0:	3002      	adds	r0, #2
 80229c2:	3402      	adds	r4, #2
 80229c4:	e7f1      	b.n	80229aa <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h+0x176>
 80229c6:	8802      	ldrh	r2, [r0, #0]
 80229c8:	b29f      	uxth	r7, r3
 80229ca:	43db      	mvns	r3, r3
 80229cc:	ea4f 2c2e 	mov.w	ip, lr, asr #8
 80229d0:	1216      	asrs	r6, r2, #8
 80229d2:	b2db      	uxtb	r3, r3
 80229d4:	f00c 0cf8 	and.w	ip, ip, #248	@ 0xf8
 80229d8:	f006 06f8 	and.w	r6, r6, #248	@ 0xf8
 80229dc:	ea4f 0ae2 	mov.w	sl, r2, asr #3
 80229e0:	00d2      	lsls	r2, r2, #3
 80229e2:	fb16 f603 	smulbb	r6, r6, r3
 80229e6:	f00a 0afc 	and.w	sl, sl, #252	@ 0xfc
 80229ea:	b2d2      	uxtb	r2, r2
 80229ec:	fb0c 6c07 	mla	ip, ip, r7, r6
 80229f0:	ea4f 06ee 	mov.w	r6, lr, asr #3
 80229f4:	fb1a fa03 	smulbb	sl, sl, r3
 80229f8:	ea4f 0ece 	mov.w	lr, lr, lsl #3
 80229fc:	fa1f fc8c 	uxth.w	ip, ip
 8022a00:	f006 06fc 	and.w	r6, r6, #252	@ 0xfc
 8022a04:	fb12 f303 	smulbb	r3, r2, r3
 8022a08:	fa5f fe8e 	uxtb.w	lr, lr
 8022a0c:	fb06 a607 	mla	r6, r6, r7, sl
 8022a10:	f10c 0201 	add.w	r2, ip, #1
 8022a14:	fb0e 3307 	mla	r3, lr, r7, r3
 8022a18:	b2b6      	uxth	r6, r6
 8022a1a:	b29b      	uxth	r3, r3
 8022a1c:	eb02 2c1c 	add.w	ip, r2, ip, lsr #8
 8022a20:	f106 0a01 	add.w	sl, r6, #1
 8022a24:	f40c 4278 	and.w	r2, ip, #63488	@ 0xf800
 8022a28:	f103 0c01 	add.w	ip, r3, #1
 8022a2c:	eb0a 2616 	add.w	r6, sl, r6, lsr #8
 8022a30:	eb0c 2c13 	add.w	ip, ip, r3, lsr #8
 8022a34:	0976      	lsrs	r6, r6, #5
 8022a36:	f3cc 2cc4 	ubfx	ip, ip, #11, #5
 8022a3a:	f406 66fc 	and.w	r6, r6, #2016	@ 0x7e0
 8022a3e:	ea4c 0c02 	orr.w	ip, ip, r2
 8022a42:	ea4c 0c06 	orr.w	ip, ip, r6
 8022a46:	f8a0 c000 	strh.w	ip, [r0]
 8022a4a:	e7b9      	b.n	80229c0 <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h+0x18c>
 8022a4c:	f8b9 3000 	ldrh.w	r3, [r9]
 8022a50:	f9bd 600c 	ldrsh.w	r6, [sp, #12]
 8022a54:	eba3 0308 	sub.w	r3, r3, r8
 8022a58:	eba6 0608 	sub.w	r6, r6, r8
 8022a5c:	eb00 0043 	add.w	r0, r0, r3, lsl #1
 8022a60:	eb04 0446 	add.w	r4, r4, r6, lsl #1
 8022a64:	440e      	add	r6, r1
 8022a66:	e79a      	b.n	802299e <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h+0x16a>
 8022a68:	4b03      	ldr	r3, [pc, #12]	@ (8022a78 <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h+0x244>)
 8022a6a:	6818      	ldr	r0, [r3, #0]
 8022a6c:	6803      	ldr	r3, [r0, #0]
 8022a6e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8022a70:	4798      	blx	r3
 8022a72:	b007      	add	sp, #28
 8022a74:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8022a78:	2400b884 	.word	0x2400b884
 8022a7c:	2400b87e 	.word	0x2400b87e

08022a80 <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb>:
 8022a80:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8022a84:	b089      	sub	sp, #36	@ 0x24
 8022a86:	4682      	mov	sl, r0
 8022a88:	460f      	mov	r7, r1
 8022a8a:	4691      	mov	r9, r2
 8022a8c:	f89d 604c 	ldrb.w	r6, [sp, #76]	@ 0x4c
 8022a90:	4698      	mov	r8, r3
 8022a92:	9c12      	ldr	r4, [sp, #72]	@ 0x48
 8022a94:	2e00      	cmp	r6, #0
 8022a96:	d03d      	beq.n	8022b14 <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x94>
 8022a98:	4608      	mov	r0, r1
 8022a9a:	f7fc f861 	bl	801eb60 <_ZNK8touchgfx6Bitmap8getWidthEv>
 8022a9e:	4605      	mov	r5, r0
 8022aa0:	4638      	mov	r0, r7
 8022aa2:	f7fc f897 	bl	801ebd4 <_ZNK8touchgfx6Bitmap9getHeightEv>
 8022aa6:	f8ad 000e 	strh.w	r0, [sp, #14]
 8022aaa:	4638      	mov	r0, r7
 8022aac:	f8ad 9008 	strh.w	r9, [sp, #8]
 8022ab0:	f8ad 500c 	strh.w	r5, [sp, #12]
 8022ab4:	f8ad 800a 	strh.w	r8, [sp, #10]
 8022ab8:	f7fc f95a 	bl	801ed70 <_ZNK8touchgfx6Bitmap7getDataEv>
 8022abc:	4605      	mov	r5, r0
 8022abe:	4638      	mov	r0, r7
 8022ac0:	f7fc f988 	bl	801edd4 <_ZNK8touchgfx6Bitmap12getExtraDataEv>
 8022ac4:	4681      	mov	r9, r0
 8022ac6:	4638      	mov	r0, r7
 8022ac8:	f7fc f9dc 	bl	801ee84 <_ZNK8touchgfx6Bitmap9getFormatEv>
 8022acc:	280b      	cmp	r0, #11
 8022ace:	f200 816f 	bhi.w	8022db0 <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x330>
 8022ad2:	e8df f010 	tbh	[pc, r0, lsl #1]
 8022ad6:	00c3      	.short	0x00c3
 8022ad8:	000c00b4 	.word	0x000c00b4
 8022adc:	016d016d 	.word	0x016d016d
 8022ae0:	016d016d 	.word	0x016d016d
 8022ae4:	016d016d 	.word	0x016d016d
 8022ae8:	016d016d 	.word	0x016d016d
 8022aec:	00bb      	.short	0x00bb
 8022aee:	4bb3      	ldr	r3, [pc, #716]	@ (8022dbc <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x33c>)
 8022af0:	6818      	ldr	r0, [r3, #0]
 8022af2:	6803      	ldr	r3, [r0, #0]
 8022af4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8022af6:	4798      	blx	r3
 8022af8:	2eff      	cmp	r6, #255	@ 0xff
 8022afa:	d121      	bne.n	8022b40 <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0xc0>
 8022afc:	0683      	lsls	r3, r0, #26
 8022afe:	d41f      	bmi.n	8022b40 <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0xc0>
 8022b00:	4638      	mov	r0, r7
 8022b02:	f7fc f8fb 	bl	801ecfc <_ZNK8touchgfx6Bitmap20hasTransparentPixelsEv>
 8022b06:	b940      	cbnz	r0, 8022b1a <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x9a>
 8022b08:	4623      	mov	r3, r4
 8022b0a:	aa02      	add	r2, sp, #8
 8022b0c:	4629      	mov	r1, r5
 8022b0e:	4650      	mov	r0, sl
 8022b10:	f7ff f9e4 	bl	8021edc <_ZN8touchgfx8LCD16bpp21blitCopyARGB8888SolidEPKmRKNS_4RectES5_>
 8022b14:	b009      	add	sp, #36	@ 0x24
 8022b16:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8022b1a:	f10d 0818 	add.w	r8, sp, #24
 8022b1e:	4639      	mov	r1, r7
 8022b20:	af04      	add	r7, sp, #16
 8022b22:	4640      	mov	r0, r8
 8022b24:	f7fc f890 	bl	801ec48 <_ZNK8touchgfx6Bitmap12getSolidRectEv>
 8022b28:	e898 0003 	ldmia.w	r8, {r0, r1}
 8022b2c:	e887 0003 	stmia.w	r7, {r0, r1}
 8022b30:	4638      	mov	r0, r7
 8022b32:	4621      	mov	r1, r4
 8022b34:	f7f5 f9a6 	bl	8017e84 <_ZN8touchgfx4RectaNERKS0_>
 8022b38:	4638      	mov	r0, r7
 8022b3a:	f7f5 f9e6 	bl	8017f0a <_ZNK8touchgfx4Rect7isEmptyEv>
 8022b3e:	b130      	cbz	r0, 8022b4e <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0xce>
 8022b40:	4633      	mov	r3, r6
 8022b42:	4622      	mov	r2, r4
 8022b44:	a902      	add	r1, sp, #8
 8022b46:	4628      	mov	r0, r5
 8022b48:	f7ff f8e2 	bl	8021d10 <_ZN8touchgfx8LCD16bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h>
 8022b4c:	e7e2      	b.n	8022b14 <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x94>
 8022b4e:	f9bd 3012 	ldrsh.w	r3, [sp, #18]
 8022b52:	f9b4 2002 	ldrsh.w	r2, [r4, #2]
 8022b56:	4293      	cmp	r3, r2
 8022b58:	dd12      	ble.n	8022b80 <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x100>
 8022b5a:	1a9b      	subs	r3, r3, r2
 8022b5c:	f9b4 0000 	ldrsh.w	r0, [r4]
 8022b60:	f9b4 1004 	ldrsh.w	r1, [r4, #4]
 8022b64:	f8ad 0018 	strh.w	r0, [sp, #24]
 8022b68:	4628      	mov	r0, r5
 8022b6a:	f8ad 201a 	strh.w	r2, [sp, #26]
 8022b6e:	4642      	mov	r2, r8
 8022b70:	f8ad 101c 	strh.w	r1, [sp, #28]
 8022b74:	a902      	add	r1, sp, #8
 8022b76:	f8ad 301e 	strh.w	r3, [sp, #30]
 8022b7a:	4633      	mov	r3, r6
 8022b7c:	f7ff f8c8 	bl	8021d10 <_ZN8touchgfx8LCD16bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h>
 8022b80:	f9bd 3010 	ldrsh.w	r3, [sp, #16]
 8022b84:	f9b4 2000 	ldrsh.w	r2, [r4]
 8022b88:	4293      	cmp	r3, r2
 8022b8a:	dd12      	ble.n	8022bb2 <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x132>
 8022b8c:	1a9b      	subs	r3, r3, r2
 8022b8e:	f9bd 0012 	ldrsh.w	r0, [sp, #18]
 8022b92:	f9bd 1016 	ldrsh.w	r1, [sp, #22]
 8022b96:	f8ad 2018 	strh.w	r2, [sp, #24]
 8022b9a:	4642      	mov	r2, r8
 8022b9c:	f8ad 001a 	strh.w	r0, [sp, #26]
 8022ba0:	4628      	mov	r0, r5
 8022ba2:	f8ad 301c 	strh.w	r3, [sp, #28]
 8022ba6:	23ff      	movs	r3, #255	@ 0xff
 8022ba8:	f8ad 101e 	strh.w	r1, [sp, #30]
 8022bac:	a902      	add	r1, sp, #8
 8022bae:	f7ff f8af 	bl	8021d10 <_ZN8touchgfx8LCD16bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h>
 8022bb2:	463b      	mov	r3, r7
 8022bb4:	aa02      	add	r2, sp, #8
 8022bb6:	4629      	mov	r1, r5
 8022bb8:	4650      	mov	r0, sl
 8022bba:	f7ff f98f 	bl	8021edc <_ZN8touchgfx8LCD16bpp21blitCopyARGB8888SolidEPKmRKNS_4RectES5_>
 8022bbe:	88a2      	ldrh	r2, [r4, #4]
 8022bc0:	8823      	ldrh	r3, [r4, #0]
 8022bc2:	f8bd 1014 	ldrh.w	r1, [sp, #20]
 8022bc6:	4413      	add	r3, r2
 8022bc8:	f8bd 2010 	ldrh.w	r2, [sp, #16]
 8022bcc:	440a      	add	r2, r1
 8022bce:	b29b      	uxth	r3, r3
 8022bd0:	b292      	uxth	r2, r2
 8022bd2:	b218      	sxth	r0, r3
 8022bd4:	b211      	sxth	r1, r2
 8022bd6:	4288      	cmp	r0, r1
 8022bd8:	dd12      	ble.n	8022c00 <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x180>
 8022bda:	1a9b      	subs	r3, r3, r2
 8022bdc:	f9bd 0016 	ldrsh.w	r0, [sp, #22]
 8022be0:	f9bd 6012 	ldrsh.w	r6, [sp, #18]
 8022be4:	4642      	mov	r2, r8
 8022be6:	f8ad 1018 	strh.w	r1, [sp, #24]
 8022bea:	a902      	add	r1, sp, #8
 8022bec:	f8ad 301c 	strh.w	r3, [sp, #28]
 8022bf0:	23ff      	movs	r3, #255	@ 0xff
 8022bf2:	f8ad 001e 	strh.w	r0, [sp, #30]
 8022bf6:	4628      	mov	r0, r5
 8022bf8:	f8ad 601a 	strh.w	r6, [sp, #26]
 8022bfc:	f7ff f888 	bl	8021d10 <_ZN8touchgfx8LCD16bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h>
 8022c00:	88e2      	ldrh	r2, [r4, #6]
 8022c02:	8863      	ldrh	r3, [r4, #2]
 8022c04:	f8bd 1016 	ldrh.w	r1, [sp, #22]
 8022c08:	4413      	add	r3, r2
 8022c0a:	f8bd 2012 	ldrh.w	r2, [sp, #18]
 8022c0e:	440a      	add	r2, r1
 8022c10:	b29b      	uxth	r3, r3
 8022c12:	b292      	uxth	r2, r2
 8022c14:	b218      	sxth	r0, r3
 8022c16:	b211      	sxth	r1, r2
 8022c18:	4288      	cmp	r0, r1
 8022c1a:	f77f af7b 	ble.w	8022b14 <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x94>
 8022c1e:	1a9b      	subs	r3, r3, r2
 8022c20:	f9b4 6000 	ldrsh.w	r6, [r4]
 8022c24:	f9b4 0004 	ldrsh.w	r0, [r4, #4]
 8022c28:	4642      	mov	r2, r8
 8022c2a:	f8ad 301e 	strh.w	r3, [sp, #30]
 8022c2e:	23ff      	movs	r3, #255	@ 0xff
 8022c30:	f8ad 6018 	strh.w	r6, [sp, #24]
 8022c34:	f8ad 101a 	strh.w	r1, [sp, #26]
 8022c38:	f8ad 001c 	strh.w	r0, [sp, #28]
 8022c3c:	e782      	b.n	8022b44 <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0xc4>
 8022c3e:	4633      	mov	r3, r6
 8022c40:	4622      	mov	r2, r4
 8022c42:	a902      	add	r1, sp, #8
 8022c44:	4628      	mov	r0, r5
 8022c46:	f7ff f9b9 	bl	8021fbc <_ZN8touchgfx8LCD16bpp14blitCopyRGB888EPKhRKNS_4RectES5_h>
 8022c4a:	e763      	b.n	8022b14 <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x94>
 8022c4c:	9600      	str	r6, [sp, #0]
 8022c4e:	4623      	mov	r3, r4
 8022c50:	aa02      	add	r2, sp, #8
 8022c52:	4649      	mov	r1, r9
 8022c54:	4628      	mov	r0, r5
 8022c56:	f7ff fdd5 	bl	8022804 <_ZN8touchgfx8LCD16bpp10blitCopyL8EPKhS2_RKNS_4RectES5_h>
 8022c5a:	e75b      	b.n	8022b14 <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x94>
 8022c5c:	4638      	mov	r0, r7
 8022c5e:	f7fc f84d 	bl	801ecfc <_ZNK8touchgfx6Bitmap20hasTransparentPixelsEv>
 8022c62:	b950      	cbnz	r0, 8022c7a <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x1fa>
 8022c64:	f8da 3000 	ldr.w	r3, [sl]
 8022c68:	aa02      	add	r2, sp, #8
 8022c6a:	4629      	mov	r1, r5
 8022c6c:	e9cd 6000 	strd	r6, r0, [sp]
 8022c70:	4650      	mov	r0, sl
 8022c72:	68de      	ldr	r6, [r3, #12]
 8022c74:	4623      	mov	r3, r4
 8022c76:	47b0      	blx	r6
 8022c78:	e74c      	b.n	8022b14 <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x94>
 8022c7a:	f10d 0818 	add.w	r8, sp, #24
 8022c7e:	4639      	mov	r1, r7
 8022c80:	af04      	add	r7, sp, #16
 8022c82:	4640      	mov	r0, r8
 8022c84:	f7fb ffe0 	bl	801ec48 <_ZNK8touchgfx6Bitmap12getSolidRectEv>
 8022c88:	e898 0003 	ldmia.w	r8, {r0, r1}
 8022c8c:	e887 0003 	stmia.w	r7, {r0, r1}
 8022c90:	4638      	mov	r0, r7
 8022c92:	4621      	mov	r1, r4
 8022c94:	f7f5 f8f6 	bl	8017e84 <_ZN8touchgfx4RectaNERKS0_>
 8022c98:	4638      	mov	r0, r7
 8022c9a:	f7f5 f936 	bl	8017f0a <_ZNK8touchgfx4Rect7isEmptyEv>
 8022c9e:	b138      	cbz	r0, 8022cb0 <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x230>
 8022ca0:	4623      	mov	r3, r4
 8022ca2:	9600      	str	r6, [sp, #0]
 8022ca4:	aa02      	add	r2, sp, #8
 8022ca6:	4649      	mov	r1, r9
 8022ca8:	4628      	mov	r0, r5
 8022caa:	f7ff fdc3 	bl	8022834 <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h>
 8022cae:	e731      	b.n	8022b14 <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x94>
 8022cb0:	f8da 3000 	ldr.w	r3, [sl]
 8022cb4:	aa02      	add	r2, sp, #8
 8022cb6:	4629      	mov	r1, r5
 8022cb8:	e9cd 6000 	strd	r6, r0, [sp]
 8022cbc:	4650      	mov	r0, sl
 8022cbe:	f8d3 b00c 	ldr.w	fp, [r3, #12]
 8022cc2:	463b      	mov	r3, r7
 8022cc4:	47d8      	blx	fp
 8022cc6:	f9bd 3012 	ldrsh.w	r3, [sp, #18]
 8022cca:	f9b4 2002 	ldrsh.w	r2, [r4, #2]
 8022cce:	4293      	cmp	r3, r2
 8022cd0:	dd13      	ble.n	8022cfa <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x27a>
 8022cd2:	f9b4 0000 	ldrsh.w	r0, [r4]
 8022cd6:	1a9b      	subs	r3, r3, r2
 8022cd8:	f9b4 1004 	ldrsh.w	r1, [r4, #4]
 8022cdc:	f8ad 0018 	strh.w	r0, [sp, #24]
 8022ce0:	4628      	mov	r0, r5
 8022ce2:	f8ad 201a 	strh.w	r2, [sp, #26]
 8022ce6:	aa02      	add	r2, sp, #8
 8022ce8:	f8ad 101c 	strh.w	r1, [sp, #28]
 8022cec:	4649      	mov	r1, r9
 8022cee:	f8ad 301e 	strh.w	r3, [sp, #30]
 8022cf2:	4643      	mov	r3, r8
 8022cf4:	9600      	str	r6, [sp, #0]
 8022cf6:	f7ff fd9d 	bl	8022834 <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h>
 8022cfa:	f9bd 3010 	ldrsh.w	r3, [sp, #16]
 8022cfe:	f9b4 2000 	ldrsh.w	r2, [r4]
 8022d02:	4293      	cmp	r3, r2
 8022d04:	dd13      	ble.n	8022d2e <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x2ae>
 8022d06:	1a9b      	subs	r3, r3, r2
 8022d08:	f9bd 0012 	ldrsh.w	r0, [sp, #18]
 8022d0c:	f9bd 1016 	ldrsh.w	r1, [sp, #22]
 8022d10:	f8ad 2018 	strh.w	r2, [sp, #24]
 8022d14:	aa02      	add	r2, sp, #8
 8022d16:	f8ad 001a 	strh.w	r0, [sp, #26]
 8022d1a:	4628      	mov	r0, r5
 8022d1c:	f8ad 301c 	strh.w	r3, [sp, #28]
 8022d20:	4643      	mov	r3, r8
 8022d22:	f8ad 101e 	strh.w	r1, [sp, #30]
 8022d26:	4649      	mov	r1, r9
 8022d28:	9600      	str	r6, [sp, #0]
 8022d2a:	f7ff fd83 	bl	8022834 <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h>
 8022d2e:	88a2      	ldrh	r2, [r4, #4]
 8022d30:	8823      	ldrh	r3, [r4, #0]
 8022d32:	f8bd 1014 	ldrh.w	r1, [sp, #20]
 8022d36:	4413      	add	r3, r2
 8022d38:	f8bd 2010 	ldrh.w	r2, [sp, #16]
 8022d3c:	440a      	add	r2, r1
 8022d3e:	b29b      	uxth	r3, r3
 8022d40:	b292      	uxth	r2, r2
 8022d42:	b218      	sxth	r0, r3
 8022d44:	b211      	sxth	r1, r2
 8022d46:	4288      	cmp	r0, r1
 8022d48:	dd13      	ble.n	8022d72 <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x2f2>
 8022d4a:	1a9b      	subs	r3, r3, r2
 8022d4c:	f9bd 0016 	ldrsh.w	r0, [sp, #22]
 8022d50:	f9bd 7012 	ldrsh.w	r7, [sp, #18]
 8022d54:	aa02      	add	r2, sp, #8
 8022d56:	f8ad 1018 	strh.w	r1, [sp, #24]
 8022d5a:	4649      	mov	r1, r9
 8022d5c:	f8ad 301c 	strh.w	r3, [sp, #28]
 8022d60:	4643      	mov	r3, r8
 8022d62:	f8ad 001e 	strh.w	r0, [sp, #30]
 8022d66:	4628      	mov	r0, r5
 8022d68:	9600      	str	r6, [sp, #0]
 8022d6a:	f8ad 701a 	strh.w	r7, [sp, #26]
 8022d6e:	f7ff fd61 	bl	8022834 <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h>
 8022d72:	88e2      	ldrh	r2, [r4, #6]
 8022d74:	8863      	ldrh	r3, [r4, #2]
 8022d76:	f8bd 1016 	ldrh.w	r1, [sp, #22]
 8022d7a:	4413      	add	r3, r2
 8022d7c:	f8bd 2012 	ldrh.w	r2, [sp, #18]
 8022d80:	440a      	add	r2, r1
 8022d82:	b29b      	uxth	r3, r3
 8022d84:	b292      	uxth	r2, r2
 8022d86:	b218      	sxth	r0, r3
 8022d88:	b211      	sxth	r1, r2
 8022d8a:	4288      	cmp	r0, r1
 8022d8c:	f77f aec2 	ble.w	8022b14 <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x94>
 8022d90:	f9b4 7000 	ldrsh.w	r7, [r4]
 8022d94:	1a9b      	subs	r3, r3, r2
 8022d96:	f9b4 0004 	ldrsh.w	r0, [r4, #4]
 8022d9a:	f8ad 301e 	strh.w	r3, [sp, #30]
 8022d9e:	4643      	mov	r3, r8
 8022da0:	f8ad 7018 	strh.w	r7, [sp, #24]
 8022da4:	f8ad 101a 	strh.w	r1, [sp, #26]
 8022da8:	f8ad 001c 	strh.w	r0, [sp, #28]
 8022dac:	9600      	str	r6, [sp, #0]
 8022dae:	e779      	b.n	8022ca4 <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x224>
 8022db0:	4b03      	ldr	r3, [pc, #12]	@ (8022dc0 <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x340>)
 8022db2:	21b4      	movs	r1, #180	@ 0xb4
 8022db4:	4a03      	ldr	r2, [pc, #12]	@ (8022dc4 <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x344>)
 8022db6:	4804      	ldr	r0, [pc, #16]	@ (8022dc8 <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x348>)
 8022db8:	f007 ff44 	bl	802ac44 <__assert_func>
 8022dbc:	2400b884 	.word	0x2400b884
 8022dc0:	0802fc8b 	.word	0x0802fc8b
 8022dc4:	08030393 	.word	0x08030393
 8022dc8:	0802fdc1 	.word	0x0802fdc1

08022dcc <_ZN8touchgfx8LCD16bpp9nextPixelEbNS_12TextRotationE>:
 8022dcc:	b508      	push	{r3, lr}
 8022dce:	b180      	cbz	r0, 8022df2 <_ZN8touchgfx8LCD16bpp9nextPixelEbNS_12TextRotationE+0x26>
 8022dd0:	2902      	cmp	r1, #2
 8022dd2:	d014      	beq.n	8022dfe <_ZN8touchgfx8LCD16bpp9nextPixelEbNS_12TextRotationE+0x32>
 8022dd4:	2903      	cmp	r1, #3
 8022dd6:	d01d      	beq.n	8022e14 <_ZN8touchgfx8LCD16bpp9nextPixelEbNS_12TextRotationE+0x48>
 8022dd8:	2901      	cmp	r1, #1
 8022dda:	d101      	bne.n	8022de0 <_ZN8touchgfx8LCD16bpp9nextPixelEbNS_12TextRotationE+0x14>
 8022ddc:	2001      	movs	r0, #1
 8022dde:	bd08      	pop	{r3, pc}
 8022de0:	4b0e      	ldr	r3, [pc, #56]	@ (8022e1c <_ZN8touchgfx8LCD16bpp9nextPixelEbNS_12TextRotationE+0x50>)
 8022de2:	8818      	ldrh	r0, [r3, #0]
 8022de4:	b990      	cbnz	r0, 8022e0c <_ZN8touchgfx8LCD16bpp9nextPixelEbNS_12TextRotationE+0x40>
 8022de6:	4b0e      	ldr	r3, [pc, #56]	@ (8022e20 <_ZN8touchgfx8LCD16bpp9nextPixelEbNS_12TextRotationE+0x54>)
 8022de8:	2150      	movs	r1, #80	@ 0x50
 8022dea:	4a0e      	ldr	r2, [pc, #56]	@ (8022e24 <_ZN8touchgfx8LCD16bpp9nextPixelEbNS_12TextRotationE+0x58>)
 8022dec:	480e      	ldr	r0, [pc, #56]	@ (8022e28 <_ZN8touchgfx8LCD16bpp9nextPixelEbNS_12TextRotationE+0x5c>)
 8022dee:	f007 ff29 	bl	802ac44 <__assert_func>
 8022df2:	2902      	cmp	r1, #2
 8022df4:	d00e      	beq.n	8022e14 <_ZN8touchgfx8LCD16bpp9nextPixelEbNS_12TextRotationE+0x48>
 8022df6:	2903      	cmp	r1, #3
 8022df8:	d0f2      	beq.n	8022de0 <_ZN8touchgfx8LCD16bpp9nextPixelEbNS_12TextRotationE+0x14>
 8022dfa:	2901      	cmp	r1, #1
 8022dfc:	d1ee      	bne.n	8022ddc <_ZN8touchgfx8LCD16bpp9nextPixelEbNS_12TextRotationE+0x10>
 8022dfe:	4b07      	ldr	r3, [pc, #28]	@ (8022e1c <_ZN8touchgfx8LCD16bpp9nextPixelEbNS_12TextRotationE+0x50>)
 8022e00:	8818      	ldrh	r0, [r3, #0]
 8022e02:	2800      	cmp	r0, #0
 8022e04:	d0ef      	beq.n	8022de6 <_ZN8touchgfx8LCD16bpp9nextPixelEbNS_12TextRotationE+0x1a>
 8022e06:	f3c0 000e 	ubfx	r0, r0, #0, #15
 8022e0a:	e7e8      	b.n	8022dde <_ZN8touchgfx8LCD16bpp9nextPixelEbNS_12TextRotationE+0x12>
 8022e0c:	f3c0 000e 	ubfx	r0, r0, #0, #15
 8022e10:	4240      	negs	r0, r0
 8022e12:	e7e4      	b.n	8022dde <_ZN8touchgfx8LCD16bpp9nextPixelEbNS_12TextRotationE+0x12>
 8022e14:	f04f 30ff 	mov.w	r0, #4294967295
 8022e18:	e7e1      	b.n	8022dde <_ZN8touchgfx8LCD16bpp9nextPixelEbNS_12TextRotationE+0x12>
 8022e1a:	bf00      	nop
 8022e1c:	2400b87e 	.word	0x2400b87e
 8022e20:	0802ff17 	.word	0x0802ff17
 8022e24:	08030510 	.word	0x08030510
 8022e28:	0802ff59 	.word	0x0802ff59

08022e2c <_ZN8touchgfx8LCD16bpp8nextLineEbNS_12TextRotationE>:
 8022e2c:	b508      	push	{r3, lr}
 8022e2e:	b180      	cbz	r0, 8022e52 <_ZN8touchgfx8LCD16bpp8nextLineEbNS_12TextRotationE+0x26>
 8022e30:	2902      	cmp	r1, #2
 8022e32:	d014      	beq.n	8022e5e <_ZN8touchgfx8LCD16bpp8nextLineEbNS_12TextRotationE+0x32>
 8022e34:	2903      	cmp	r1, #3
 8022e36:	d018      	beq.n	8022e6a <_ZN8touchgfx8LCD16bpp8nextLineEbNS_12TextRotationE+0x3e>
 8022e38:	2901      	cmp	r1, #1
 8022e3a:	d001      	beq.n	8022e40 <_ZN8touchgfx8LCD16bpp8nextLineEbNS_12TextRotationE+0x14>
 8022e3c:	2001      	movs	r0, #1
 8022e3e:	e013      	b.n	8022e68 <_ZN8touchgfx8LCD16bpp8nextLineEbNS_12TextRotationE+0x3c>
 8022e40:	4b0e      	ldr	r3, [pc, #56]	@ (8022e7c <_ZN8touchgfx8LCD16bpp8nextLineEbNS_12TextRotationE+0x50>)
 8022e42:	8818      	ldrh	r0, [r3, #0]
 8022e44:	b970      	cbnz	r0, 8022e64 <_ZN8touchgfx8LCD16bpp8nextLineEbNS_12TextRotationE+0x38>
 8022e46:	4b0e      	ldr	r3, [pc, #56]	@ (8022e80 <_ZN8touchgfx8LCD16bpp8nextLineEbNS_12TextRotationE+0x54>)
 8022e48:	2150      	movs	r1, #80	@ 0x50
 8022e4a:	4a0e      	ldr	r2, [pc, #56]	@ (8022e84 <_ZN8touchgfx8LCD16bpp8nextLineEbNS_12TextRotationE+0x58>)
 8022e4c:	480e      	ldr	r0, [pc, #56]	@ (8022e88 <_ZN8touchgfx8LCD16bpp8nextLineEbNS_12TextRotationE+0x5c>)
 8022e4e:	f007 fef9 	bl	802ac44 <__assert_func>
 8022e52:	2902      	cmp	r1, #2
 8022e54:	d009      	beq.n	8022e6a <_ZN8touchgfx8LCD16bpp8nextLineEbNS_12TextRotationE+0x3e>
 8022e56:	2903      	cmp	r1, #3
 8022e58:	d0f0      	beq.n	8022e3c <_ZN8touchgfx8LCD16bpp8nextLineEbNS_12TextRotationE+0x10>
 8022e5a:	2901      	cmp	r1, #1
 8022e5c:	d1f0      	bne.n	8022e40 <_ZN8touchgfx8LCD16bpp8nextLineEbNS_12TextRotationE+0x14>
 8022e5e:	f04f 30ff 	mov.w	r0, #4294967295
 8022e62:	e001      	b.n	8022e68 <_ZN8touchgfx8LCD16bpp8nextLineEbNS_12TextRotationE+0x3c>
 8022e64:	f3c0 000e 	ubfx	r0, r0, #0, #15
 8022e68:	bd08      	pop	{r3, pc}
 8022e6a:	4b04      	ldr	r3, [pc, #16]	@ (8022e7c <_ZN8touchgfx8LCD16bpp8nextLineEbNS_12TextRotationE+0x50>)
 8022e6c:	8818      	ldrh	r0, [r3, #0]
 8022e6e:	2800      	cmp	r0, #0
 8022e70:	d0e9      	beq.n	8022e46 <_ZN8touchgfx8LCD16bpp8nextLineEbNS_12TextRotationE+0x1a>
 8022e72:	f3c0 000e 	ubfx	r0, r0, #0, #15
 8022e76:	4240      	negs	r0, r0
 8022e78:	e7f6      	b.n	8022e68 <_ZN8touchgfx8LCD16bpp8nextLineEbNS_12TextRotationE+0x3c>
 8022e7a:	bf00      	nop
 8022e7c:	2400b87e 	.word	0x2400b87e
 8022e80:	0802ff17 	.word	0x0802ff17
 8022e84:	08030510 	.word	0x08030510
 8022e88:	0802ff59 	.word	0x0802ff59

08022e8c <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE>:
 8022e8c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8022e90:	b099      	sub	sp, #100	@ 0x64
 8022e92:	910b      	str	r1, [sp, #44]	@ 0x2c
 8022e94:	a914      	add	r1, sp, #80	@ 0x50
 8022e96:	f9bd 5088 	ldrsh.w	r5, [sp, #136]	@ 0x88
 8022e9a:	f8bd 6090 	ldrh.w	r6, [sp, #144]	@ 0x90
 8022e9e:	f8bd 7094 	ldrh.w	r7, [sp, #148]	@ 0x94
 8022ea2:	f89d 80ac 	ldrb.w	r8, [sp, #172]	@ 0xac
 8022ea6:	f89d a0b4 	ldrb.w	sl, [sp, #180]	@ 0xb4
 8022eaa:	e881 000c 	stmia.w	r1, {r2, r3}
 8022eae:	f9bd 308c 	ldrsh.w	r3, [sp, #140]	@ 0x8c
 8022eb2:	e9dd 2126 	ldrd	r2, r1, [sp, #152]	@ 0x98
 8022eb6:	930a      	str	r3, [sp, #40]	@ 0x28
 8022eb8:	f89d 30a4 	ldrb.w	r3, [sp, #164]	@ 0xa4
 8022ebc:	f891 900d 	ldrb.w	r9, [r1, #13]
 8022ec0:	9311      	str	r3, [sp, #68]	@ 0x44
 8022ec2:	f89d 30b0 	ldrb.w	r3, [sp, #176]	@ 0xb0
 8022ec6:	7988      	ldrb	r0, [r1, #6]
 8022ec8:	930c      	str	r3, [sp, #48]	@ 0x30
 8022eca:	ea4f 1349 	mov.w	r3, r9, lsl #5
 8022ece:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8022ed2:	4303      	orrs	r3, r0
 8022ed4:	9309      	str	r3, [sp, #36]	@ 0x24
 8022ed6:	f000 81a1 	beq.w	802321c <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x390>
 8022eda:	ea4f 1909 	mov.w	r9, r9, lsl #4
 8022ede:	f409 7380 	and.w	r3, r9, #256	@ 0x100
 8022ee2:	f891 9007 	ldrb.w	r9, [r1, #7]
 8022ee6:	ea59 0903 	orrs.w	r9, r9, r3
 8022eea:	f000 8197 	beq.w	802321c <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x390>
 8022eee:	f991 3009 	ldrsb.w	r3, [r1, #9]
 8022ef2:	b29b      	uxth	r3, r3
 8022ef4:	2e00      	cmp	r6, #0
 8022ef6:	f000 813a 	beq.w	802316e <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x2e2>
 8022efa:	1af6      	subs	r6, r6, r3
 8022efc:	b2b6      	uxth	r6, r6
 8022efe:	0433      	lsls	r3, r6, #16
 8022f00:	d502      	bpl.n	8022f08 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x7c>
 8022f02:	1bad      	subs	r5, r5, r6
 8022f04:	2600      	movs	r6, #0
 8022f06:	b22d      	sxth	r5, r5
 8022f08:	f9b2 1000 	ldrsh.w	r1, [r2]
 8022f0c:	a814      	add	r0, sp, #80	@ 0x50
 8022f0e:	f8bd 4024 	ldrh.w	r4, [sp, #36]	@ 0x24
 8022f12:	428d      	cmp	r5, r1
 8022f14:	b28b      	uxth	r3, r1
 8022f16:	f8cd 9034 	str.w	r9, [sp, #52]	@ 0x34
 8022f1a:	bfbf      	itttt	lt
 8022f1c:	18f6      	addlt	r6, r6, r3
 8022f1e:	1b75      	sublt	r5, r6, r5
 8022f20:	b2ae      	uxthlt	r6, r5
 8022f22:	460d      	movlt	r5, r1
 8022f24:	8891      	ldrh	r1, [r2, #4]
 8022f26:	440b      	add	r3, r1
 8022f28:	4629      	mov	r1, r5
 8022f2a:	b21b      	sxth	r3, r3
 8022f2c:	9310      	str	r3, [sp, #64]	@ 0x40
 8022f2e:	88d3      	ldrh	r3, [r2, #6]
 8022f30:	8852      	ldrh	r2, [r2, #2]
 8022f32:	4413      	add	r3, r2
 8022f34:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8022f36:	b21b      	sxth	r3, r3
 8022f38:	930f      	str	r3, [sp, #60]	@ 0x3c
 8022f3a:	4bbd      	ldr	r3, [pc, #756]	@ (8023230 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x3a4>)
 8022f3c:	f893 b000 	ldrb.w	fp, [r3]
 8022f40:	f10b 3cff 	add.w	ip, fp, #4294967295
 8022f44:	f1dc 0300 	rsbs	r3, ip, #0
 8022f48:	eb43 030c 	adc.w	r3, r3, ip
 8022f4c:	930e      	str	r3, [sp, #56]	@ 0x38
 8022f4e:	4653      	mov	r3, sl
 8022f50:	f7f8 f9ce 	bl	801b2f0 <_ZN8touchgfx3LCD5realXERKNS_4RectEssNS_12TextRotationE>
 8022f54:	4629      	mov	r1, r5
 8022f56:	f8ad 005c 	strh.w	r0, [sp, #92]	@ 0x5c
 8022f5a:	4653      	mov	r3, sl
 8022f5c:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8022f5e:	a814      	add	r0, sp, #80	@ 0x50
 8022f60:	f7f8 f9de 	bl	801b320 <_ZN8touchgfx3LCD5realYERKNS_4RectEssNS_12TextRotationE>
 8022f64:	a918      	add	r1, sp, #96	@ 0x60
 8022f66:	f821 0d02 	strh.w	r0, [r1, #-2]!
 8022f6a:	a817      	add	r0, sp, #92	@ 0x5c
 8022f6c:	f7f8 fafa 	bl	801b564 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERsS1_>
 8022f70:	f1ba 0f00 	cmp.w	sl, #0
 8022f74:	f040 80fe 	bne.w	8023174 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x2e8>
 8022f78:	f1bb 0f01 	cmp.w	fp, #1
 8022f7c:	f040 8102 	bne.w	8023184 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x2f8>
 8022f80:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 8022f82:	b153      	cbz	r3, 8022f9a <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x10e>
 8022f84:	2408      	movs	r4, #8
 8022f86:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8022f88:	fb94 f3f8 	sdiv	r3, r4, r8
 8022f8c:	1e5c      	subs	r4, r3, #1
 8022f8e:	4414      	add	r4, r2
 8022f90:	fb94 f4f3 	sdiv	r4, r4, r3
 8022f94:	fb14 f403 	smulbb	r4, r4, r3
 8022f98:	b2a4      	uxth	r4, r4
 8022f9a:	b906      	cbnz	r6, 8022f9e <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x112>
 8022f9c:	b16f      	cbz	r7, 8022fba <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x12e>
 8022f9e:	fb07 6304 	mla	r3, r7, r4, r6
 8022fa2:	9928      	ldr	r1, [sp, #160]	@ 0xa0
 8022fa4:	463a      	mov	r2, r7
 8022fa6:	fb08 f303 	mul.w	r3, r8, r3
 8022faa:	f003 0707 	and.w	r7, r3, #7
 8022fae:	eb01 03d3 	add.w	r3, r1, r3, lsr #3
 8022fb2:	9328      	str	r3, [sp, #160]	@ 0xa0
 8022fb4:	eba9 0302 	sub.w	r3, r9, r2
 8022fb8:	930d      	str	r3, [sp, #52]	@ 0x34
 8022fba:	4651      	mov	r1, sl
 8022fbc:	980e      	ldr	r0, [sp, #56]	@ 0x38
 8022fbe:	f7ff ff05 	bl	8022dcc <_ZN8touchgfx8LCD16bpp9nextPixelEbNS_12TextRotationE>
 8022fc2:	4651      	mov	r1, sl
 8022fc4:	4681      	mov	r9, r0
 8022fc6:	980e      	ldr	r0, [sp, #56]	@ 0x38
 8022fc8:	f7ff ff30 	bl	8022e2c <_ZN8touchgfx8LCD16bpp8nextLineEbNS_12TextRotationE>
 8022fcc:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8022fce:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8022fd0:	4683      	mov	fp, r0
 8022fd2:	eba3 0a02 	sub.w	sl, r3, r2
 8022fd6:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8022fd8:	459a      	cmp	sl, r3
 8022fda:	bfa8      	it	ge
 8022fdc:	469a      	movge	sl, r3
 8022fde:	f1ba 0f00 	cmp.w	sl, #0
 8022fe2:	f340 811b 	ble.w	802321c <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x390>
 8022fe6:	1bad      	subs	r5, r5, r6
 8022fe8:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8022fea:	1b5d      	subs	r5, r3, r5
 8022fec:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8022fee:	429d      	cmp	r5, r3
 8022ff0:	bfd4      	ite	le
 8022ff2:	ebc6 0605 	rsble	r6, r6, r5
 8022ff6:	ebc6 0603 	rsbgt	r6, r6, r3
 8022ffa:	2e00      	cmp	r6, #0
 8022ffc:	f340 810e 	ble.w	802321c <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x390>
 8023000:	1ba4      	subs	r4, r4, r6
 8023002:	fb08 f304 	mul.w	r3, r8, r4
 8023006:	930f      	str	r3, [sp, #60]	@ 0x3c
 8023008:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 802300a:	2b00      	cmp	r3, #0
 802300c:	f040 810b 	bne.w	8023226 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x39a>
 8023010:	4b88      	ldr	r3, [pc, #544]	@ (8023234 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x3a8>)
 8023012:	6818      	ldr	r0, [r3, #0]
 8023014:	6803      	ldr	r3, [r0, #0]
 8023016:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8023018:	4798      	blx	r3
 802301a:	2301      	movs	r3, #1
 802301c:	4a86      	ldr	r2, [pc, #536]	@ (8023238 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x3ac>)
 802301e:	fa03 f308 	lsl.w	r3, r3, r8
 8023022:	8811      	ldrh	r1, [r2, #0]
 8023024:	f9bd 205c 	ldrsh.w	r2, [sp, #92]	@ 0x5c
 8023028:	3b01      	subs	r3, #1
 802302a:	b2db      	uxtb	r3, r3
 802302c:	930e      	str	r3, [sp, #56]	@ 0x38
 802302e:	f9bd 305e 	ldrsh.w	r3, [sp, #94]	@ 0x5e
 8023032:	fb01 2303 	mla	r3, r1, r3, r2
 8023036:	eb00 0343 	add.w	r3, r0, r3, lsl #1
 802303a:	930a      	str	r3, [sp, #40]	@ 0x28
 802303c:	9b2a      	ldr	r3, [sp, #168]	@ 0xa8
 802303e:	f3c3 4307 	ubfx	r3, r3, #16, #8
 8023042:	9313      	str	r3, [sp, #76]	@ 0x4c
 8023044:	9b2a      	ldr	r3, [sp, #168]	@ 0xa8
 8023046:	0a19      	lsrs	r1, r3, #8
 8023048:	b2cb      	uxtb	r3, r1
 802304a:	9312      	str	r3, [sp, #72]	@ 0x48
 802304c:	9b2a      	ldr	r3, [sp, #168]	@ 0xa8
 802304e:	b2db      	uxtb	r3, r3
 8023050:	9311      	str	r3, [sp, #68]	@ 0x44
 8023052:	9b2a      	ldr	r3, [sp, #168]	@ 0xa8
 8023054:	095a      	lsrs	r2, r3, #5
 8023056:	4b79      	ldr	r3, [pc, #484]	@ (802323c <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x3b0>)
 8023058:	f402 62fc 	and.w	r2, r2, #2016	@ 0x7e0
 802305c:	400b      	ands	r3, r1
 802305e:	4313      	orrs	r3, r2
 8023060:	9a2a      	ldr	r2, [sp, #168]	@ 0xa8
 8023062:	f3c2 02c4 	ubfx	r2, r2, #3, #5
 8023066:	4313      	orrs	r3, r2
 8023068:	b29b      	uxth	r3, r3
 802306a:	9310      	str	r3, [sp, #64]	@ 0x40
 802306c:	9b28      	ldr	r3, [sp, #160]	@ 0xa0
 802306e:	781a      	ldrb	r2, [r3, #0]
 8023070:	ea4f 0349 	mov.w	r3, r9, lsl #1
 8023074:	fb06 b919 	mls	r9, r6, r9, fp
 8023078:	413a      	asrs	r2, r7
 802307a:	fb03 fb06 	mul.w	fp, r3, r6
 802307e:	930d      	str	r3, [sp, #52]	@ 0x34
 8023080:	b2d2      	uxtb	r2, r2
 8023082:	eb0b 0b49 	add.w	fp, fp, r9, lsl #1
 8023086:	f11a 3aff 	adds.w	sl, sl, #4294967295
 802308a:	f0c0 80ea 	bcc.w	8023262 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x3d6>
 802308e:	46b6      	mov	lr, r6
 8023090:	f8dd c028 	ldr.w	ip, [sp, #40]	@ 0x28
 8023094:	f11e 3eff 	adds.w	lr, lr, #4294967295
 8023098:	f0c0 80d2 	bcc.w	8023240 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x3b4>
 802309c:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 802309e:	4013      	ands	r3, r2
 80230a0:	d055      	beq.n	802314e <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x2c2>
 80230a2:	20ff      	movs	r0, #255	@ 0xff
 80230a4:	990e      	ldr	r1, [sp, #56]	@ 0x38
 80230a6:	fb90 f1f1 	sdiv	r1, r0, r1
 80230aa:	434b      	muls	r3, r1
 80230ac:	2bfe      	cmp	r3, #254	@ 0xfe
 80230ae:	dd03      	ble.n	80230b8 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x22c>
 80230b0:	990c      	ldr	r1, [sp, #48]	@ 0x30
 80230b2:	4281      	cmp	r1, r0
 80230b4:	f000 80b9 	beq.w	802322a <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x39e>
 80230b8:	990c      	ldr	r1, [sp, #48]	@ 0x30
 80230ba:	f8bc 4000 	ldrh.w	r4, [ip]
 80230be:	fb11 f303 	smulbb	r3, r1, r3
 80230c2:	1220      	asrs	r0, r4, #8
 80230c4:	b29b      	uxth	r3, r3
 80230c6:	f000 00f8 	and.w	r0, r0, #248	@ 0xf8
 80230ca:	1c59      	adds	r1, r3, #1
 80230cc:	ea40 1050 	orr.w	r0, r0, r0, lsr #5
 80230d0:	eb01 2313 	add.w	r3, r1, r3, lsr #8
 80230d4:	10e1      	asrs	r1, r4, #3
 80230d6:	f3c3 2307 	ubfx	r3, r3, #8, #8
 80230da:	00e4      	lsls	r4, r4, #3
 80230dc:	f001 01fc 	and.w	r1, r1, #252	@ 0xfc
 80230e0:	b29d      	uxth	r5, r3
 80230e2:	43db      	mvns	r3, r3
 80230e4:	ea41 1191 	orr.w	r1, r1, r1, lsr #6
 80230e8:	b2db      	uxtb	r3, r3
 80230ea:	b2e4      	uxtb	r4, r4
 80230ec:	9309      	str	r3, [sp, #36]	@ 0x24
 80230ee:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 80230f0:	ea44 1454 	orr.w	r4, r4, r4, lsr #5
 80230f4:	fb13 f905 	smulbb	r9, r3, r5
 80230f8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80230fa:	fb00 9003 	mla	r0, r0, r3, r9
 80230fe:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 8023100:	fb13 f905 	smulbb	r9, r3, r5
 8023104:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8023106:	b280      	uxth	r0, r0
 8023108:	fb01 9103 	mla	r1, r1, r3, r9
 802310c:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 802310e:	fb13 f505 	smulbb	r5, r3, r5
 8023112:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8023114:	b289      	uxth	r1, r1
 8023116:	fb04 5403 	mla	r4, r4, r3, r5
 802311a:	1c43      	adds	r3, r0, #1
 802311c:	b2a4      	uxth	r4, r4
 802311e:	eb03 2010 	add.w	r0, r3, r0, lsr #8
 8023122:	f104 0901 	add.w	r9, r4, #1
 8023126:	f400 4078 	and.w	r0, r0, #63488	@ 0xf800
 802312a:	eb09 2914 	add.w	r9, r9, r4, lsr #8
 802312e:	f3c9 29c4 	ubfx	r9, r9, #11, #5
 8023132:	ea49 0000 	orr.w	r0, r9, r0
 8023136:	f101 0901 	add.w	r9, r1, #1
 802313a:	eb09 2911 	add.w	r9, r9, r1, lsr #8
 802313e:	ea4f 1959 	mov.w	r9, r9, lsr #5
 8023142:	f409 69fc 	and.w	r9, r9, #2016	@ 0x7e0
 8023146:	ea40 0009 	orr.w	r0, r0, r9
 802314a:	f8ac 0000 	strh.w	r0, [ip]
 802314e:	4447      	add	r7, r8
 8023150:	b2bf      	uxth	r7, r7
 8023152:	2f07      	cmp	r7, #7
 8023154:	bf89      	itett	hi
 8023156:	9b28      	ldrhi	r3, [sp, #160]	@ 0xa0
 8023158:	fa42 f208 	asrls.w	r2, r2, r8
 802315c:	2700      	movhi	r7, #0
 802315e:	785a      	ldrbhi	r2, [r3, #1]
 8023160:	bf8a      	itet	hi
 8023162:	3301      	addhi	r3, #1
 8023164:	b2d2      	uxtbls	r2, r2
 8023166:	9328      	strhi	r3, [sp, #160]	@ 0xa0
 8023168:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 802316a:	449c      	add	ip, r3
 802316c:	e792      	b.n	8023094 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x208>
 802316e:	441d      	add	r5, r3
 8023170:	b22d      	sxth	r5, r5
 8023172:	e6c9      	b.n	8022f08 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x7c>
 8023174:	f1ba 0f01 	cmp.w	sl, #1
 8023178:	f47f af02 	bne.w	8022f80 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0xf4>
 802317c:	f1bb 0f01 	cmp.w	fp, #1
 8023180:	f47f aefe 	bne.w	8022f80 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0xf4>
 8023184:	f8df b0ac 	ldr.w	fp, [pc, #172]	@ 8023234 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x3a8>
 8023188:	f8db 0000 	ldr.w	r0, [fp]
 802318c:	6803      	ldr	r3, [r0, #0]
 802318e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8023190:	4798      	blx	r3
 8023192:	f410 7380 	ands.w	r3, r0, #256	@ 0x100
 8023196:	465a      	mov	r2, fp
 8023198:	d006      	beq.n	80231a8 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x31c>
 802319a:	f1b8 0f04 	cmp.w	r8, #4
 802319e:	d140      	bne.n	8023222 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x396>
 80231a0:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 80231a2:	3300      	adds	r3, #0
 80231a4:	bf18      	it	ne
 80231a6:	2301      	movne	r3, #1
 80231a8:	0580      	lsls	r0, r0, #22
 80231aa:	d563      	bpl.n	8023274 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x3e8>
 80231ac:	f1b8 0f08 	cmp.w	r8, #8
 80231b0:	d160      	bne.n	8023274 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x3e8>
 80231b2:	2b00      	cmp	r3, #0
 80231b4:	bf0c      	ite	eq
 80231b6:	f44f 7100 	moveq.w	r1, #512	@ 0x200
 80231ba:	f44f 7180 	movne.w	r1, #256	@ 0x100
 80231be:	2e00      	cmp	r6, #0
 80231c0:	f47f aede 	bne.w	8022f80 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0xf4>
 80231c4:	2f00      	cmp	r7, #0
 80231c6:	f47f aedb 	bne.w	8022f80 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0xf4>
 80231ca:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80231cc:	9810      	ldr	r0, [sp, #64]	@ 0x40
 80231ce:	18eb      	adds	r3, r5, r3
 80231d0:	4283      	cmp	r3, r0
 80231d2:	f73f aed5 	bgt.w	8022f80 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0xf4>
 80231d6:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80231d8:	980f      	ldr	r0, [sp, #60]	@ 0x3c
 80231da:	444b      	add	r3, r9
 80231dc:	4283      	cmp	r3, r0
 80231de:	f73f aecf 	bgt.w	8022f80 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0xf4>
 80231e2:	f1b8 0f08 	cmp.w	r8, #8
 80231e6:	6810      	ldr	r0, [r2, #0]
 80231e8:	f04f 0600 	mov.w	r6, #0
 80231ec:	f8bd 305e 	ldrh.w	r3, [sp, #94]	@ 0x5e
 80231f0:	bf18      	it	ne
 80231f2:	3401      	addne	r4, #1
 80231f4:	6805      	ldr	r5, [r0, #0]
 80231f6:	f8bd 205c 	ldrh.w	r2, [sp, #92]	@ 0x5c
 80231fa:	bf18      	it	ne
 80231fc:	f024 0401 	bicne.w	r4, r4, #1
 8023200:	e9cd 1605 	strd	r1, r6, [sp, #20]
 8023204:	990c      	ldr	r1, [sp, #48]	@ 0x30
 8023206:	bf18      	it	ne
 8023208:	b2a4      	uxthne	r4, r4
 802320a:	9104      	str	r1, [sp, #16]
 802320c:	992a      	ldr	r1, [sp, #168]	@ 0xa8
 802320e:	e9cd 4900 	strd	r4, r9, [sp]
 8023212:	e9cd 4102 	strd	r4, r1, [sp, #8]
 8023216:	9928      	ldr	r1, [sp, #160]	@ 0xa0
 8023218:	6d6c      	ldr	r4, [r5, #84]	@ 0x54
 802321a:	47a0      	blx	r4
 802321c:	b019      	add	sp, #100	@ 0x64
 802321e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8023222:	2300      	movs	r3, #0
 8023224:	e7c0      	b.n	80231a8 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x31c>
 8023226:	980b      	ldr	r0, [sp, #44]	@ 0x2c
 8023228:	e6f7      	b.n	802301a <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x18e>
 802322a:	9810      	ldr	r0, [sp, #64]	@ 0x40
 802322c:	e78d      	b.n	802314a <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x2be>
 802322e:	bf00      	nop
 8023230:	2400b87c 	.word	0x2400b87c
 8023234:	2400b884 	.word	0x2400b884
 8023238:	2400b87e 	.word	0x2400b87e
 802323c:	00fff800 	.word	0x00fff800
 8023240:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8023242:	b153      	cbz	r3, 802325a <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x3ce>
 8023244:	441f      	add	r7, r3
 8023246:	9b28      	ldr	r3, [sp, #160]	@ 0xa0
 8023248:	b2bf      	uxth	r7, r7
 802324a:	eb03 03d7 	add.w	r3, r3, r7, lsr #3
 802324e:	f007 0707 	and.w	r7, r7, #7
 8023252:	781a      	ldrb	r2, [r3, #0]
 8023254:	9328      	str	r3, [sp, #160]	@ 0xa0
 8023256:	413a      	asrs	r2, r7
 8023258:	b2d2      	uxtb	r2, r2
 802325a:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 802325c:	445b      	add	r3, fp
 802325e:	930a      	str	r3, [sp, #40]	@ 0x28
 8023260:	e711      	b.n	8023086 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x1fa>
 8023262:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8023264:	2b00      	cmp	r3, #0
 8023266:	d1d9      	bne.n	802321c <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x390>
 8023268:	4b05      	ldr	r3, [pc, #20]	@ (8023280 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x3f4>)
 802326a:	6818      	ldr	r0, [r3, #0]
 802326c:	6803      	ldr	r3, [r0, #0]
 802326e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8023270:	4798      	blx	r3
 8023272:	e7d3      	b.n	802321c <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x390>
 8023274:	2b00      	cmp	r3, #0
 8023276:	f43f ae83 	beq.w	8022f80 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0xf4>
 802327a:	f44f 7180 	mov.w	r1, #256	@ 0x100
 802327e:	e79e      	b.n	80231be <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x332>
 8023280:	2400b884 	.word	0x2400b884

08023284 <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB565_BilinearInterpolationEv>:
 8023284:	b538      	push	{r3, r4, r5, lr}
 8023286:	4c15      	ldr	r4, [pc, #84]	@ (80232dc <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB565_BilinearInterpolationEv+0x58>)
 8023288:	4605      	mov	r5, r0
 802328a:	7823      	ldrb	r3, [r4, #0]
 802328c:	f3bf 8f5b 	dmb	ish
 8023290:	07da      	lsls	r2, r3, #31
 8023292:	d40b      	bmi.n	80232ac <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB565_BilinearInterpolationEv+0x28>
 8023294:	4620      	mov	r0, r4
 8023296:	f007 fca8 	bl	802abea <__cxa_guard_acquire>
 802329a:	b138      	cbz	r0, 80232ac <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB565_BilinearInterpolationEv+0x28>
 802329c:	4620      	mov	r0, r4
 802329e:	f007 fcb0 	bl	802ac02 <__cxa_guard_release>
 80232a2:	4a0f      	ldr	r2, [pc, #60]	@ (80232e0 <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB565_BilinearInterpolationEv+0x5c>)
 80232a4:	490f      	ldr	r1, [pc, #60]	@ (80232e4 <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB565_BilinearInterpolationEv+0x60>)
 80232a6:	4810      	ldr	r0, [pc, #64]	@ (80232e8 <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB565_BilinearInterpolationEv+0x64>)
 80232a8:	f007 fc98 	bl	802abdc <__aeabi_atexit>
 80232ac:	4c0f      	ldr	r4, [pc, #60]	@ (80232ec <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB565_BilinearInterpolationEv+0x68>)
 80232ae:	7823      	ldrb	r3, [r4, #0]
 80232b0:	f3bf 8f5b 	dmb	ish
 80232b4:	07db      	lsls	r3, r3, #31
 80232b6:	d40b      	bmi.n	80232d0 <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB565_BilinearInterpolationEv+0x4c>
 80232b8:	4620      	mov	r0, r4
 80232ba:	f007 fc96 	bl	802abea <__cxa_guard_acquire>
 80232be:	b138      	cbz	r0, 80232d0 <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB565_BilinearInterpolationEv+0x4c>
 80232c0:	4620      	mov	r0, r4
 80232c2:	f007 fc9e 	bl	802ac02 <__cxa_guard_release>
 80232c6:	4a06      	ldr	r2, [pc, #24]	@ (80232e0 <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB565_BilinearInterpolationEv+0x5c>)
 80232c8:	4909      	ldr	r1, [pc, #36]	@ (80232f0 <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB565_BilinearInterpolationEv+0x6c>)
 80232ca:	480a      	ldr	r0, [pc, #40]	@ (80232f4 <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB565_BilinearInterpolationEv+0x70>)
 80232cc:	f007 fc86 	bl	802abdc <__aeabi_atexit>
 80232d0:	4b05      	ldr	r3, [pc, #20]	@ (80232e8 <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB565_BilinearInterpolationEv+0x64>)
 80232d2:	612b      	str	r3, [r5, #16]
 80232d4:	4b07      	ldr	r3, [pc, #28]	@ (80232f4 <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB565_BilinearInterpolationEv+0x70>)
 80232d6:	616b      	str	r3, [r5, #20]
 80232d8:	bd38      	pop	{r3, r4, r5, pc}
 80232da:	bf00      	nop
 80232dc:	2400b950 	.word	0x2400b950
 80232e0:	24000000 	.word	0x24000000
 80232e4:	08021483 	.word	0x08021483
 80232e8:	24000098 	.word	0x24000098
 80232ec:	2400b954 	.word	0x2400b954
 80232f0:	08021481 	.word	0x08021481
 80232f4:	2400009c 	.word	0x2400009c

080232f8 <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB565_NearestNeighborEv>:
 80232f8:	b538      	push	{r3, r4, r5, lr}
 80232fa:	4c15      	ldr	r4, [pc, #84]	@ (8023350 <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB565_NearestNeighborEv+0x58>)
 80232fc:	4605      	mov	r5, r0
 80232fe:	7823      	ldrb	r3, [r4, #0]
 8023300:	f3bf 8f5b 	dmb	ish
 8023304:	07da      	lsls	r2, r3, #31
 8023306:	d40b      	bmi.n	8023320 <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB565_NearestNeighborEv+0x28>
 8023308:	4620      	mov	r0, r4
 802330a:	f007 fc6e 	bl	802abea <__cxa_guard_acquire>
 802330e:	b138      	cbz	r0, 8023320 <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB565_NearestNeighborEv+0x28>
 8023310:	4620      	mov	r0, r4
 8023312:	f007 fc76 	bl	802ac02 <__cxa_guard_release>
 8023316:	4a0f      	ldr	r2, [pc, #60]	@ (8023354 <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB565_NearestNeighborEv+0x5c>)
 8023318:	490f      	ldr	r1, [pc, #60]	@ (8023358 <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB565_NearestNeighborEv+0x60>)
 802331a:	4810      	ldr	r0, [pc, #64]	@ (802335c <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB565_NearestNeighborEv+0x64>)
 802331c:	f007 fc5e 	bl	802abdc <__aeabi_atexit>
 8023320:	4c0f      	ldr	r4, [pc, #60]	@ (8023360 <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB565_NearestNeighborEv+0x68>)
 8023322:	7823      	ldrb	r3, [r4, #0]
 8023324:	f3bf 8f5b 	dmb	ish
 8023328:	07db      	lsls	r3, r3, #31
 802332a:	d40b      	bmi.n	8023344 <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB565_NearestNeighborEv+0x4c>
 802332c:	4620      	mov	r0, r4
 802332e:	f007 fc5c 	bl	802abea <__cxa_guard_acquire>
 8023332:	b138      	cbz	r0, 8023344 <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB565_NearestNeighborEv+0x4c>
 8023334:	4620      	mov	r0, r4
 8023336:	f007 fc64 	bl	802ac02 <__cxa_guard_release>
 802333a:	4a06      	ldr	r2, [pc, #24]	@ (8023354 <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB565_NearestNeighborEv+0x5c>)
 802333c:	4909      	ldr	r1, [pc, #36]	@ (8023364 <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB565_NearestNeighborEv+0x6c>)
 802333e:	480a      	ldr	r0, [pc, #40]	@ (8023368 <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB565_NearestNeighborEv+0x70>)
 8023340:	f007 fc4c 	bl	802abdc <__aeabi_atexit>
 8023344:	4b05      	ldr	r3, [pc, #20]	@ (802335c <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB565_NearestNeighborEv+0x64>)
 8023346:	60ab      	str	r3, [r5, #8]
 8023348:	4b07      	ldr	r3, [pc, #28]	@ (8023368 <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB565_NearestNeighborEv+0x70>)
 802334a:	60eb      	str	r3, [r5, #12]
 802334c:	bd38      	pop	{r3, r4, r5, pc}
 802334e:	bf00      	nop
 8023350:	2400b928 	.word	0x2400b928
 8023354:	24000000 	.word	0x24000000
 8023358:	08021487 	.word	0x08021487
 802335c:	24000070 	.word	0x24000070
 8023360:	2400b92c 	.word	0x2400b92c
 8023364:	08021485 	.word	0x08021485
 8023368:	24000074 	.word	0x24000074

0802336c <_ZN8touchgfx8LCD16bpp28enableTextureMapperL8_RGB565Ev>:
 802336c:	b510      	push	{r4, lr}
 802336e:	4604      	mov	r4, r0
 8023370:	f7ff ff88 	bl	8023284 <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB565_BilinearInterpolationEv>
 8023374:	4620      	mov	r0, r4
 8023376:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 802337a:	f7ff bfbd 	b.w	80232f8 <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB565_NearestNeighborEv>
	...

08023380 <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv>:
 8023380:	b538      	push	{r3, r4, r5, lr}
 8023382:	4c15      	ldr	r4, [pc, #84]	@ (80233d8 <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x58>)
 8023384:	4605      	mov	r5, r0
 8023386:	7823      	ldrb	r3, [r4, #0]
 8023388:	f3bf 8f5b 	dmb	ish
 802338c:	07da      	lsls	r2, r3, #31
 802338e:	d40b      	bmi.n	80233a8 <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x28>
 8023390:	4620      	mov	r0, r4
 8023392:	f007 fc2a 	bl	802abea <__cxa_guard_acquire>
 8023396:	b138      	cbz	r0, 80233a8 <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x28>
 8023398:	4620      	mov	r0, r4
 802339a:	f007 fc32 	bl	802ac02 <__cxa_guard_release>
 802339e:	4a0f      	ldr	r2, [pc, #60]	@ (80233dc <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x5c>)
 80233a0:	490f      	ldr	r1, [pc, #60]	@ (80233e0 <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x60>)
 80233a2:	4810      	ldr	r0, [pc, #64]	@ (80233e4 <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x64>)
 80233a4:	f007 fc1a 	bl	802abdc <__aeabi_atexit>
 80233a8:	4c0f      	ldr	r4, [pc, #60]	@ (80233e8 <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x68>)
 80233aa:	7823      	ldrb	r3, [r4, #0]
 80233ac:	f3bf 8f5b 	dmb	ish
 80233b0:	07db      	lsls	r3, r3, #31
 80233b2:	d40b      	bmi.n	80233cc <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x4c>
 80233b4:	4620      	mov	r0, r4
 80233b6:	f007 fc18 	bl	802abea <__cxa_guard_acquire>
 80233ba:	b138      	cbz	r0, 80233cc <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x4c>
 80233bc:	4620      	mov	r0, r4
 80233be:	f007 fc20 	bl	802ac02 <__cxa_guard_release>
 80233c2:	4a06      	ldr	r2, [pc, #24]	@ (80233dc <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x5c>)
 80233c4:	4909      	ldr	r1, [pc, #36]	@ (80233ec <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x6c>)
 80233c6:	480a      	ldr	r0, [pc, #40]	@ (80233f0 <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x70>)
 80233c8:	f007 fc08 	bl	802abdc <__aeabi_atexit>
 80233cc:	4b05      	ldr	r3, [pc, #20]	@ (80233e4 <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x64>)
 80233ce:	622b      	str	r3, [r5, #32]
 80233d0:	4b07      	ldr	r3, [pc, #28]	@ (80233f0 <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x70>)
 80233d2:	626b      	str	r3, [r5, #36]	@ 0x24
 80233d4:	bd38      	pop	{r3, r4, r5, pc}
 80233d6:	bf00      	nop
 80233d8:	2400b958 	.word	0x2400b958
 80233dc:	24000000 	.word	0x24000000
 80233e0:	0802147b 	.word	0x0802147b
 80233e4:	240000a0 	.word	0x240000a0
 80233e8:	2400b95c 	.word	0x2400b95c
 80233ec:	08021479 	.word	0x08021479
 80233f0:	240000a4 	.word	0x240000a4

080233f4 <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB888_NearestNeighborEv>:
 80233f4:	b538      	push	{r3, r4, r5, lr}
 80233f6:	4c15      	ldr	r4, [pc, #84]	@ (802344c <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x58>)
 80233f8:	4605      	mov	r5, r0
 80233fa:	7823      	ldrb	r3, [r4, #0]
 80233fc:	f3bf 8f5b 	dmb	ish
 8023400:	07da      	lsls	r2, r3, #31
 8023402:	d40b      	bmi.n	802341c <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x28>
 8023404:	4620      	mov	r0, r4
 8023406:	f007 fbf0 	bl	802abea <__cxa_guard_acquire>
 802340a:	b138      	cbz	r0, 802341c <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x28>
 802340c:	4620      	mov	r0, r4
 802340e:	f007 fbf8 	bl	802ac02 <__cxa_guard_release>
 8023412:	4a0f      	ldr	r2, [pc, #60]	@ (8023450 <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x5c>)
 8023414:	490f      	ldr	r1, [pc, #60]	@ (8023454 <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x60>)
 8023416:	4810      	ldr	r0, [pc, #64]	@ (8023458 <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x64>)
 8023418:	f007 fbe0 	bl	802abdc <__aeabi_atexit>
 802341c:	4c0f      	ldr	r4, [pc, #60]	@ (802345c <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x68>)
 802341e:	7823      	ldrb	r3, [r4, #0]
 8023420:	f3bf 8f5b 	dmb	ish
 8023424:	07db      	lsls	r3, r3, #31
 8023426:	d40b      	bmi.n	8023440 <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x4c>
 8023428:	4620      	mov	r0, r4
 802342a:	f007 fbde 	bl	802abea <__cxa_guard_acquire>
 802342e:	b138      	cbz	r0, 8023440 <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x4c>
 8023430:	4620      	mov	r0, r4
 8023432:	f007 fbe6 	bl	802ac02 <__cxa_guard_release>
 8023436:	4a06      	ldr	r2, [pc, #24]	@ (8023450 <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x5c>)
 8023438:	4909      	ldr	r1, [pc, #36]	@ (8023460 <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x6c>)
 802343a:	480a      	ldr	r0, [pc, #40]	@ (8023464 <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x70>)
 802343c:	f007 fbce 	bl	802abdc <__aeabi_atexit>
 8023440:	4b05      	ldr	r3, [pc, #20]	@ (8023458 <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x64>)
 8023442:	61ab      	str	r3, [r5, #24]
 8023444:	4b07      	ldr	r3, [pc, #28]	@ (8023464 <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x70>)
 8023446:	61eb      	str	r3, [r5, #28]
 8023448:	bd38      	pop	{r3, r4, r5, pc}
 802344a:	bf00      	nop
 802344c:	2400b930 	.word	0x2400b930
 8023450:	24000000 	.word	0x24000000
 8023454:	0802147f 	.word	0x0802147f
 8023458:	24000078 	.word	0x24000078
 802345c:	2400b934 	.word	0x2400b934
 8023460:	0802147d 	.word	0x0802147d
 8023464:	2400007c 	.word	0x2400007c

08023468 <_ZN8touchgfx8LCD16bpp28enableTextureMapperL8_RGB888Ev>:
 8023468:	b510      	push	{r4, lr}
 802346a:	4604      	mov	r4, r0
 802346c:	f7ff ff88 	bl	8023380 <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv>
 8023470:	4620      	mov	r0, r4
 8023472:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8023476:	f7ff bfbd 	b.w	80233f4 <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB888_NearestNeighborEv>
	...

0802347c <_ZN8touchgfx8LCD16bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv>:
 802347c:	b538      	push	{r3, r4, r5, lr}
 802347e:	4c15      	ldr	r4, [pc, #84]	@ (80234d4 <_ZN8touchgfx8LCD16bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x58>)
 8023480:	4605      	mov	r5, r0
 8023482:	7823      	ldrb	r3, [r4, #0]
 8023484:	f3bf 8f5b 	dmb	ish
 8023488:	07da      	lsls	r2, r3, #31
 802348a:	d40b      	bmi.n	80234a4 <_ZN8touchgfx8LCD16bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x28>
 802348c:	4620      	mov	r0, r4
 802348e:	f007 fbac 	bl	802abea <__cxa_guard_acquire>
 8023492:	b138      	cbz	r0, 80234a4 <_ZN8touchgfx8LCD16bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x28>
 8023494:	4620      	mov	r0, r4
 8023496:	f007 fbb4 	bl	802ac02 <__cxa_guard_release>
 802349a:	4a0f      	ldr	r2, [pc, #60]	@ (80234d8 <_ZN8touchgfx8LCD16bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x5c>)
 802349c:	490f      	ldr	r1, [pc, #60]	@ (80234dc <_ZN8touchgfx8LCD16bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x60>)
 802349e:	4810      	ldr	r0, [pc, #64]	@ (80234e0 <_ZN8touchgfx8LCD16bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x64>)
 80234a0:	f007 fb9c 	bl	802abdc <__aeabi_atexit>
 80234a4:	4c0f      	ldr	r4, [pc, #60]	@ (80234e4 <_ZN8touchgfx8LCD16bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x68>)
 80234a6:	7823      	ldrb	r3, [r4, #0]
 80234a8:	f3bf 8f5b 	dmb	ish
 80234ac:	07db      	lsls	r3, r3, #31
 80234ae:	d40b      	bmi.n	80234c8 <_ZN8touchgfx8LCD16bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x4c>
 80234b0:	4620      	mov	r0, r4
 80234b2:	f007 fb9a 	bl	802abea <__cxa_guard_acquire>
 80234b6:	b138      	cbz	r0, 80234c8 <_ZN8touchgfx8LCD16bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x4c>
 80234b8:	4620      	mov	r0, r4
 80234ba:	f007 fba2 	bl	802ac02 <__cxa_guard_release>
 80234be:	4a06      	ldr	r2, [pc, #24]	@ (80234d8 <_ZN8touchgfx8LCD16bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x5c>)
 80234c0:	4909      	ldr	r1, [pc, #36]	@ (80234e8 <_ZN8touchgfx8LCD16bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x6c>)
 80234c2:	480a      	ldr	r0, [pc, #40]	@ (80234ec <_ZN8touchgfx8LCD16bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x70>)
 80234c4:	f007 fb8a 	bl	802abdc <__aeabi_atexit>
 80234c8:	4b05      	ldr	r3, [pc, #20]	@ (80234e0 <_ZN8touchgfx8LCD16bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x64>)
 80234ca:	632b      	str	r3, [r5, #48]	@ 0x30
 80234cc:	4b07      	ldr	r3, [pc, #28]	@ (80234ec <_ZN8touchgfx8LCD16bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x70>)
 80234ce:	636b      	str	r3, [r5, #52]	@ 0x34
 80234d0:	bd38      	pop	{r3, r4, r5, pc}
 80234d2:	bf00      	nop
 80234d4:	2400b968 	.word	0x2400b968
 80234d8:	24000000 	.word	0x24000000
 80234dc:	08021473 	.word	0x08021473
 80234e0:	240000b0 	.word	0x240000b0
 80234e4:	2400b96c 	.word	0x2400b96c
 80234e8:	08021471 	.word	0x08021471
 80234ec:	240000b4 	.word	0x240000b4

080234f0 <_ZN8touchgfx8LCD16bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv>:
 80234f0:	b538      	push	{r3, r4, r5, lr}
 80234f2:	4c15      	ldr	r4, [pc, #84]	@ (8023548 <_ZN8touchgfx8LCD16bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x58>)
 80234f4:	4605      	mov	r5, r0
 80234f6:	7823      	ldrb	r3, [r4, #0]
 80234f8:	f3bf 8f5b 	dmb	ish
 80234fc:	07da      	lsls	r2, r3, #31
 80234fe:	d40b      	bmi.n	8023518 <_ZN8touchgfx8LCD16bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x28>
 8023500:	4620      	mov	r0, r4
 8023502:	f007 fb72 	bl	802abea <__cxa_guard_acquire>
 8023506:	b138      	cbz	r0, 8023518 <_ZN8touchgfx8LCD16bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x28>
 8023508:	4620      	mov	r0, r4
 802350a:	f007 fb7a 	bl	802ac02 <__cxa_guard_release>
 802350e:	4a0f      	ldr	r2, [pc, #60]	@ (802354c <_ZN8touchgfx8LCD16bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x5c>)
 8023510:	490f      	ldr	r1, [pc, #60]	@ (8023550 <_ZN8touchgfx8LCD16bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x60>)
 8023512:	4810      	ldr	r0, [pc, #64]	@ (8023554 <_ZN8touchgfx8LCD16bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x64>)
 8023514:	f007 fb62 	bl	802abdc <__aeabi_atexit>
 8023518:	4c0f      	ldr	r4, [pc, #60]	@ (8023558 <_ZN8touchgfx8LCD16bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x68>)
 802351a:	7823      	ldrb	r3, [r4, #0]
 802351c:	f3bf 8f5b 	dmb	ish
 8023520:	07db      	lsls	r3, r3, #31
 8023522:	d40b      	bmi.n	802353c <_ZN8touchgfx8LCD16bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x4c>
 8023524:	4620      	mov	r0, r4
 8023526:	f007 fb60 	bl	802abea <__cxa_guard_acquire>
 802352a:	b138      	cbz	r0, 802353c <_ZN8touchgfx8LCD16bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x4c>
 802352c:	4620      	mov	r0, r4
 802352e:	f007 fb68 	bl	802ac02 <__cxa_guard_release>
 8023532:	4a06      	ldr	r2, [pc, #24]	@ (802354c <_ZN8touchgfx8LCD16bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x5c>)
 8023534:	4909      	ldr	r1, [pc, #36]	@ (802355c <_ZN8touchgfx8LCD16bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x6c>)
 8023536:	480a      	ldr	r0, [pc, #40]	@ (8023560 <_ZN8touchgfx8LCD16bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x70>)
 8023538:	f007 fb50 	bl	802abdc <__aeabi_atexit>
 802353c:	4b05      	ldr	r3, [pc, #20]	@ (8023554 <_ZN8touchgfx8LCD16bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x64>)
 802353e:	62ab      	str	r3, [r5, #40]	@ 0x28
 8023540:	4b07      	ldr	r3, [pc, #28]	@ (8023560 <_ZN8touchgfx8LCD16bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x70>)
 8023542:	62eb      	str	r3, [r5, #44]	@ 0x2c
 8023544:	bd38      	pop	{r3, r4, r5, pc}
 8023546:	bf00      	nop
 8023548:	2400b938 	.word	0x2400b938
 802354c:	24000000 	.word	0x24000000
 8023550:	08021477 	.word	0x08021477
 8023554:	24000080 	.word	0x24000080
 8023558:	2400b93c 	.word	0x2400b93c
 802355c:	08021475 	.word	0x08021475
 8023560:	24000084 	.word	0x24000084

08023564 <_ZN8touchgfx8LCD16bpp30enableTextureMapperL8_ARGB8888Ev>:
 8023564:	b510      	push	{r4, lr}
 8023566:	4604      	mov	r4, r0
 8023568:	f7ff ff88 	bl	802347c <_ZN8touchgfx8LCD16bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv>
 802356c:	4620      	mov	r0, r4
 802356e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8023572:	f7ff bfbd 	b.w	80234f0 <_ZN8touchgfx8LCD16bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv>
	...

08023578 <_ZN8touchgfx8LCD16bpp54enableTextureMapperRGB565_Opaque_BilinearInterpolationEv>:
 8023578:	b538      	push	{r3, r4, r5, lr}
 802357a:	4c15      	ldr	r4, [pc, #84]	@ (80235d0 <_ZN8touchgfx8LCD16bpp54enableTextureMapperRGB565_Opaque_BilinearInterpolationEv+0x58>)
 802357c:	4605      	mov	r5, r0
 802357e:	7823      	ldrb	r3, [r4, #0]
 8023580:	f3bf 8f5b 	dmb	ish
 8023584:	07da      	lsls	r2, r3, #31
 8023586:	d40b      	bmi.n	80235a0 <_ZN8touchgfx8LCD16bpp54enableTextureMapperRGB565_Opaque_BilinearInterpolationEv+0x28>
 8023588:	4620      	mov	r0, r4
 802358a:	f007 fb2e 	bl	802abea <__cxa_guard_acquire>
 802358e:	b138      	cbz	r0, 80235a0 <_ZN8touchgfx8LCD16bpp54enableTextureMapperRGB565_Opaque_BilinearInterpolationEv+0x28>
 8023590:	4620      	mov	r0, r4
 8023592:	f007 fb36 	bl	802ac02 <__cxa_guard_release>
 8023596:	4a0f      	ldr	r2, [pc, #60]	@ (80235d4 <_ZN8touchgfx8LCD16bpp54enableTextureMapperRGB565_Opaque_BilinearInterpolationEv+0x5c>)
 8023598:	490f      	ldr	r1, [pc, #60]	@ (80235d8 <_ZN8touchgfx8LCD16bpp54enableTextureMapperRGB565_Opaque_BilinearInterpolationEv+0x60>)
 802359a:	4810      	ldr	r0, [pc, #64]	@ (80235dc <_ZN8touchgfx8LCD16bpp54enableTextureMapperRGB565_Opaque_BilinearInterpolationEv+0x64>)
 802359c:	f007 fb1e 	bl	802abdc <__aeabi_atexit>
 80235a0:	4c0f      	ldr	r4, [pc, #60]	@ (80235e0 <_ZN8touchgfx8LCD16bpp54enableTextureMapperRGB565_Opaque_BilinearInterpolationEv+0x68>)
 80235a2:	7823      	ldrb	r3, [r4, #0]
 80235a4:	f3bf 8f5b 	dmb	ish
 80235a8:	07db      	lsls	r3, r3, #31
 80235aa:	d40b      	bmi.n	80235c4 <_ZN8touchgfx8LCD16bpp54enableTextureMapperRGB565_Opaque_BilinearInterpolationEv+0x4c>
 80235ac:	4620      	mov	r0, r4
 80235ae:	f007 fb1c 	bl	802abea <__cxa_guard_acquire>
 80235b2:	b138      	cbz	r0, 80235c4 <_ZN8touchgfx8LCD16bpp54enableTextureMapperRGB565_Opaque_BilinearInterpolationEv+0x4c>
 80235b4:	4620      	mov	r0, r4
 80235b6:	f007 fb24 	bl	802ac02 <__cxa_guard_release>
 80235ba:	4a06      	ldr	r2, [pc, #24]	@ (80235d4 <_ZN8touchgfx8LCD16bpp54enableTextureMapperRGB565_Opaque_BilinearInterpolationEv+0x5c>)
 80235bc:	4909      	ldr	r1, [pc, #36]	@ (80235e4 <_ZN8touchgfx8LCD16bpp54enableTextureMapperRGB565_Opaque_BilinearInterpolationEv+0x6c>)
 80235be:	480a      	ldr	r0, [pc, #40]	@ (80235e8 <_ZN8touchgfx8LCD16bpp54enableTextureMapperRGB565_Opaque_BilinearInterpolationEv+0x70>)
 80235c0:	f007 fb0c 	bl	802abdc <__aeabi_atexit>
 80235c4:	4b05      	ldr	r3, [pc, #20]	@ (80235dc <_ZN8touchgfx8LCD16bpp54enableTextureMapperRGB565_Opaque_BilinearInterpolationEv+0x64>)
 80235c6:	652b      	str	r3, [r5, #80]	@ 0x50
 80235c8:	4b07      	ldr	r3, [pc, #28]	@ (80235e8 <_ZN8touchgfx8LCD16bpp54enableTextureMapperRGB565_Opaque_BilinearInterpolationEv+0x70>)
 80235ca:	656b      	str	r3, [r5, #84]	@ 0x54
 80235cc:	bd38      	pop	{r3, r4, r5, pc}
 80235ce:	bf00      	nop
 80235d0:	2400b970 	.word	0x2400b970
 80235d4:	24000000 	.word	0x24000000
 80235d8:	08021463 	.word	0x08021463
 80235dc:	240000b8 	.word	0x240000b8
 80235e0:	2400b974 	.word	0x2400b974
 80235e4:	08021461 	.word	0x08021461
 80235e8:	240000bc 	.word	0x240000bc

080235ec <_ZN8touchgfx8LCD16bpp57enableTextureMapperRGB565_NonOpaque_BilinearInterpolationEv>:
 80235ec:	b538      	push	{r3, r4, r5, lr}
 80235ee:	4c15      	ldr	r4, [pc, #84]	@ (8023644 <_ZN8touchgfx8LCD16bpp57enableTextureMapperRGB565_NonOpaque_BilinearInterpolationEv+0x58>)
 80235f0:	4605      	mov	r5, r0
 80235f2:	7823      	ldrb	r3, [r4, #0]
 80235f4:	f3bf 8f5b 	dmb	ish
 80235f8:	07da      	lsls	r2, r3, #31
 80235fa:	d40b      	bmi.n	8023614 <_ZN8touchgfx8LCD16bpp57enableTextureMapperRGB565_NonOpaque_BilinearInterpolationEv+0x28>
 80235fc:	4620      	mov	r0, r4
 80235fe:	f007 faf4 	bl	802abea <__cxa_guard_acquire>
 8023602:	b138      	cbz	r0, 8023614 <_ZN8touchgfx8LCD16bpp57enableTextureMapperRGB565_NonOpaque_BilinearInterpolationEv+0x28>
 8023604:	4620      	mov	r0, r4
 8023606:	f007 fafc 	bl	802ac02 <__cxa_guard_release>
 802360a:	4a0f      	ldr	r2, [pc, #60]	@ (8023648 <_ZN8touchgfx8LCD16bpp57enableTextureMapperRGB565_NonOpaque_BilinearInterpolationEv+0x5c>)
 802360c:	490f      	ldr	r1, [pc, #60]	@ (802364c <_ZN8touchgfx8LCD16bpp57enableTextureMapperRGB565_NonOpaque_BilinearInterpolationEv+0x60>)
 802360e:	4810      	ldr	r0, [pc, #64]	@ (8023650 <_ZN8touchgfx8LCD16bpp57enableTextureMapperRGB565_NonOpaque_BilinearInterpolationEv+0x64>)
 8023610:	f007 fae4 	bl	802abdc <__aeabi_atexit>
 8023614:	4c0f      	ldr	r4, [pc, #60]	@ (8023654 <_ZN8touchgfx8LCD16bpp57enableTextureMapperRGB565_NonOpaque_BilinearInterpolationEv+0x68>)
 8023616:	7823      	ldrb	r3, [r4, #0]
 8023618:	f3bf 8f5b 	dmb	ish
 802361c:	07db      	lsls	r3, r3, #31
 802361e:	d40b      	bmi.n	8023638 <_ZN8touchgfx8LCD16bpp57enableTextureMapperRGB565_NonOpaque_BilinearInterpolationEv+0x4c>
 8023620:	4620      	mov	r0, r4
 8023622:	f007 fae2 	bl	802abea <__cxa_guard_acquire>
 8023626:	b138      	cbz	r0, 8023638 <_ZN8touchgfx8LCD16bpp57enableTextureMapperRGB565_NonOpaque_BilinearInterpolationEv+0x4c>
 8023628:	4620      	mov	r0, r4
 802362a:	f007 faea 	bl	802ac02 <__cxa_guard_release>
 802362e:	4a06      	ldr	r2, [pc, #24]	@ (8023648 <_ZN8touchgfx8LCD16bpp57enableTextureMapperRGB565_NonOpaque_BilinearInterpolationEv+0x5c>)
 8023630:	4909      	ldr	r1, [pc, #36]	@ (8023658 <_ZN8touchgfx8LCD16bpp57enableTextureMapperRGB565_NonOpaque_BilinearInterpolationEv+0x6c>)
 8023632:	480a      	ldr	r0, [pc, #40]	@ (802365c <_ZN8touchgfx8LCD16bpp57enableTextureMapperRGB565_NonOpaque_BilinearInterpolationEv+0x70>)
 8023634:	f007 fad2 	bl	802abdc <__aeabi_atexit>
 8023638:	4b05      	ldr	r3, [pc, #20]	@ (8023650 <_ZN8touchgfx8LCD16bpp57enableTextureMapperRGB565_NonOpaque_BilinearInterpolationEv+0x64>)
 802363a:	64ab      	str	r3, [r5, #72]	@ 0x48
 802363c:	4b07      	ldr	r3, [pc, #28]	@ (802365c <_ZN8touchgfx8LCD16bpp57enableTextureMapperRGB565_NonOpaque_BilinearInterpolationEv+0x70>)
 802363e:	64eb      	str	r3, [r5, #76]	@ 0x4c
 8023640:	bd38      	pop	{r3, r4, r5, pc}
 8023642:	bf00      	nop
 8023644:	2400b978 	.word	0x2400b978
 8023648:	24000000 	.word	0x24000000
 802364c:	08021467 	.word	0x08021467
 8023650:	240000c0 	.word	0x240000c0
 8023654:	2400b97c 	.word	0x2400b97c
 8023658:	08021465 	.word	0x08021465
 802365c:	240000c4 	.word	0x240000c4

08023660 <_ZN8touchgfx8LCD16bpp48enableTextureMapperRGB565_Opaque_NearestNeighborEv>:
 8023660:	b538      	push	{r3, r4, r5, lr}
 8023662:	4c15      	ldr	r4, [pc, #84]	@ (80236b8 <_ZN8touchgfx8LCD16bpp48enableTextureMapperRGB565_Opaque_NearestNeighborEv+0x58>)
 8023664:	4605      	mov	r5, r0
 8023666:	7823      	ldrb	r3, [r4, #0]
 8023668:	f3bf 8f5b 	dmb	ish
 802366c:	07da      	lsls	r2, r3, #31
 802366e:	d40b      	bmi.n	8023688 <_ZN8touchgfx8LCD16bpp48enableTextureMapperRGB565_Opaque_NearestNeighborEv+0x28>
 8023670:	4620      	mov	r0, r4
 8023672:	f007 faba 	bl	802abea <__cxa_guard_acquire>
 8023676:	b138      	cbz	r0, 8023688 <_ZN8touchgfx8LCD16bpp48enableTextureMapperRGB565_Opaque_NearestNeighborEv+0x28>
 8023678:	4620      	mov	r0, r4
 802367a:	f007 fac2 	bl	802ac02 <__cxa_guard_release>
 802367e:	4a0f      	ldr	r2, [pc, #60]	@ (80236bc <_ZN8touchgfx8LCD16bpp48enableTextureMapperRGB565_Opaque_NearestNeighborEv+0x5c>)
 8023680:	490f      	ldr	r1, [pc, #60]	@ (80236c0 <_ZN8touchgfx8LCD16bpp48enableTextureMapperRGB565_Opaque_NearestNeighborEv+0x60>)
 8023682:	4810      	ldr	r0, [pc, #64]	@ (80236c4 <_ZN8touchgfx8LCD16bpp48enableTextureMapperRGB565_Opaque_NearestNeighborEv+0x64>)
 8023684:	f007 faaa 	bl	802abdc <__aeabi_atexit>
 8023688:	4c0f      	ldr	r4, [pc, #60]	@ (80236c8 <_ZN8touchgfx8LCD16bpp48enableTextureMapperRGB565_Opaque_NearestNeighborEv+0x68>)
 802368a:	7823      	ldrb	r3, [r4, #0]
 802368c:	f3bf 8f5b 	dmb	ish
 8023690:	07db      	lsls	r3, r3, #31
 8023692:	d40b      	bmi.n	80236ac <_ZN8touchgfx8LCD16bpp48enableTextureMapperRGB565_Opaque_NearestNeighborEv+0x4c>
 8023694:	4620      	mov	r0, r4
 8023696:	f007 faa8 	bl	802abea <__cxa_guard_acquire>
 802369a:	b138      	cbz	r0, 80236ac <_ZN8touchgfx8LCD16bpp48enableTextureMapperRGB565_Opaque_NearestNeighborEv+0x4c>
 802369c:	4620      	mov	r0, r4
 802369e:	f007 fab0 	bl	802ac02 <__cxa_guard_release>
 80236a2:	4a06      	ldr	r2, [pc, #24]	@ (80236bc <_ZN8touchgfx8LCD16bpp48enableTextureMapperRGB565_Opaque_NearestNeighborEv+0x5c>)
 80236a4:	4909      	ldr	r1, [pc, #36]	@ (80236cc <_ZN8touchgfx8LCD16bpp48enableTextureMapperRGB565_Opaque_NearestNeighborEv+0x6c>)
 80236a6:	480a      	ldr	r0, [pc, #40]	@ (80236d0 <_ZN8touchgfx8LCD16bpp48enableTextureMapperRGB565_Opaque_NearestNeighborEv+0x70>)
 80236a8:	f007 fa98 	bl	802abdc <__aeabi_atexit>
 80236ac:	4b05      	ldr	r3, [pc, #20]	@ (80236c4 <_ZN8touchgfx8LCD16bpp48enableTextureMapperRGB565_Opaque_NearestNeighborEv+0x64>)
 80236ae:	642b      	str	r3, [r5, #64]	@ 0x40
 80236b0:	4b07      	ldr	r3, [pc, #28]	@ (80236d0 <_ZN8touchgfx8LCD16bpp48enableTextureMapperRGB565_Opaque_NearestNeighborEv+0x70>)
 80236b2:	646b      	str	r3, [r5, #68]	@ 0x44
 80236b4:	bd38      	pop	{r3, r4, r5, pc}
 80236b6:	bf00      	nop
 80236b8:	2400b940 	.word	0x2400b940
 80236bc:	24000000 	.word	0x24000000
 80236c0:	0802146b 	.word	0x0802146b
 80236c4:	24000088 	.word	0x24000088
 80236c8:	2400b944 	.word	0x2400b944
 80236cc:	08021469 	.word	0x08021469
 80236d0:	2400008c 	.word	0x2400008c

080236d4 <_ZN8touchgfx8LCD16bpp51enableTextureMapperRGB565_NonOpaque_NearestNeighborEv>:
 80236d4:	b538      	push	{r3, r4, r5, lr}
 80236d6:	4c15      	ldr	r4, [pc, #84]	@ (802372c <_ZN8touchgfx8LCD16bpp51enableTextureMapperRGB565_NonOpaque_NearestNeighborEv+0x58>)
 80236d8:	4605      	mov	r5, r0
 80236da:	7823      	ldrb	r3, [r4, #0]
 80236dc:	f3bf 8f5b 	dmb	ish
 80236e0:	07da      	lsls	r2, r3, #31
 80236e2:	d40b      	bmi.n	80236fc <_ZN8touchgfx8LCD16bpp51enableTextureMapperRGB565_NonOpaque_NearestNeighborEv+0x28>
 80236e4:	4620      	mov	r0, r4
 80236e6:	f007 fa80 	bl	802abea <__cxa_guard_acquire>
 80236ea:	b138      	cbz	r0, 80236fc <_ZN8touchgfx8LCD16bpp51enableTextureMapperRGB565_NonOpaque_NearestNeighborEv+0x28>
 80236ec:	4620      	mov	r0, r4
 80236ee:	f007 fa88 	bl	802ac02 <__cxa_guard_release>
 80236f2:	4a0f      	ldr	r2, [pc, #60]	@ (8023730 <_ZN8touchgfx8LCD16bpp51enableTextureMapperRGB565_NonOpaque_NearestNeighborEv+0x5c>)
 80236f4:	490f      	ldr	r1, [pc, #60]	@ (8023734 <_ZN8touchgfx8LCD16bpp51enableTextureMapperRGB565_NonOpaque_NearestNeighborEv+0x60>)
 80236f6:	4810      	ldr	r0, [pc, #64]	@ (8023738 <_ZN8touchgfx8LCD16bpp51enableTextureMapperRGB565_NonOpaque_NearestNeighborEv+0x64>)
 80236f8:	f007 fa70 	bl	802abdc <__aeabi_atexit>
 80236fc:	4c0f      	ldr	r4, [pc, #60]	@ (802373c <_ZN8touchgfx8LCD16bpp51enableTextureMapperRGB565_NonOpaque_NearestNeighborEv+0x68>)
 80236fe:	7823      	ldrb	r3, [r4, #0]
 8023700:	f3bf 8f5b 	dmb	ish
 8023704:	07db      	lsls	r3, r3, #31
 8023706:	d40b      	bmi.n	8023720 <_ZN8touchgfx8LCD16bpp51enableTextureMapperRGB565_NonOpaque_NearestNeighborEv+0x4c>
 8023708:	4620      	mov	r0, r4
 802370a:	f007 fa6e 	bl	802abea <__cxa_guard_acquire>
 802370e:	b138      	cbz	r0, 8023720 <_ZN8touchgfx8LCD16bpp51enableTextureMapperRGB565_NonOpaque_NearestNeighborEv+0x4c>
 8023710:	4620      	mov	r0, r4
 8023712:	f007 fa76 	bl	802ac02 <__cxa_guard_release>
 8023716:	4a06      	ldr	r2, [pc, #24]	@ (8023730 <_ZN8touchgfx8LCD16bpp51enableTextureMapperRGB565_NonOpaque_NearestNeighborEv+0x5c>)
 8023718:	4909      	ldr	r1, [pc, #36]	@ (8023740 <_ZN8touchgfx8LCD16bpp51enableTextureMapperRGB565_NonOpaque_NearestNeighborEv+0x6c>)
 802371a:	480a      	ldr	r0, [pc, #40]	@ (8023744 <_ZN8touchgfx8LCD16bpp51enableTextureMapperRGB565_NonOpaque_NearestNeighborEv+0x70>)
 802371c:	f007 fa5e 	bl	802abdc <__aeabi_atexit>
 8023720:	4b05      	ldr	r3, [pc, #20]	@ (8023738 <_ZN8touchgfx8LCD16bpp51enableTextureMapperRGB565_NonOpaque_NearestNeighborEv+0x64>)
 8023722:	63ab      	str	r3, [r5, #56]	@ 0x38
 8023724:	4b07      	ldr	r3, [pc, #28]	@ (8023744 <_ZN8touchgfx8LCD16bpp51enableTextureMapperRGB565_NonOpaque_NearestNeighborEv+0x70>)
 8023726:	63eb      	str	r3, [r5, #60]	@ 0x3c
 8023728:	bd38      	pop	{r3, r4, r5, pc}
 802372a:	bf00      	nop
 802372c:	2400b960 	.word	0x2400b960
 8023730:	24000000 	.word	0x24000000
 8023734:	0802146f 	.word	0x0802146f
 8023738:	240000a8 	.word	0x240000a8
 802373c:	2400b964 	.word	0x2400b964
 8023740:	0802146d 	.word	0x0802146d
 8023744:	240000ac 	.word	0x240000ac

08023748 <_ZN8touchgfx8LCD16bpp25enableTextureMapperRGB565Ev>:
 8023748:	b510      	push	{r4, lr}
 802374a:	4604      	mov	r4, r0
 802374c:	f7ff ff14 	bl	8023578 <_ZN8touchgfx8LCD16bpp54enableTextureMapperRGB565_Opaque_BilinearInterpolationEv>
 8023750:	4620      	mov	r0, r4
 8023752:	f7ff ff85 	bl	8023660 <_ZN8touchgfx8LCD16bpp48enableTextureMapperRGB565_Opaque_NearestNeighborEv>
 8023756:	4620      	mov	r0, r4
 8023758:	f7ff ff48 	bl	80235ec <_ZN8touchgfx8LCD16bpp57enableTextureMapperRGB565_NonOpaque_BilinearInterpolationEv>
 802375c:	4620      	mov	r0, r4
 802375e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8023762:	f7ff bfb7 	b.w	80236d4 <_ZN8touchgfx8LCD16bpp51enableTextureMapperRGB565_NonOpaque_NearestNeighborEv>
	...

08023768 <_ZN8touchgfx8LCD16bpp49enableTextureMapperARGB8888_BilinearInterpolationEv>:
 8023768:	b538      	push	{r3, r4, r5, lr}
 802376a:	4c15      	ldr	r4, [pc, #84]	@ (80237c0 <_ZN8touchgfx8LCD16bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x58>)
 802376c:	4605      	mov	r5, r0
 802376e:	7823      	ldrb	r3, [r4, #0]
 8023770:	f3bf 8f5b 	dmb	ish
 8023774:	07da      	lsls	r2, r3, #31
 8023776:	d40b      	bmi.n	8023790 <_ZN8touchgfx8LCD16bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x28>
 8023778:	4620      	mov	r0, r4
 802377a:	f007 fa36 	bl	802abea <__cxa_guard_acquire>
 802377e:	b138      	cbz	r0, 8023790 <_ZN8touchgfx8LCD16bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x28>
 8023780:	4620      	mov	r0, r4
 8023782:	f007 fa3e 	bl	802ac02 <__cxa_guard_release>
 8023786:	4a0f      	ldr	r2, [pc, #60]	@ (80237c4 <_ZN8touchgfx8LCD16bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x5c>)
 8023788:	490f      	ldr	r1, [pc, #60]	@ (80237c8 <_ZN8touchgfx8LCD16bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x60>)
 802378a:	4810      	ldr	r0, [pc, #64]	@ (80237cc <_ZN8touchgfx8LCD16bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x64>)
 802378c:	f007 fa26 	bl	802abdc <__aeabi_atexit>
 8023790:	4c0f      	ldr	r4, [pc, #60]	@ (80237d0 <_ZN8touchgfx8LCD16bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x68>)
 8023792:	7823      	ldrb	r3, [r4, #0]
 8023794:	f3bf 8f5b 	dmb	ish
 8023798:	07db      	lsls	r3, r3, #31
 802379a:	d40b      	bmi.n	80237b4 <_ZN8touchgfx8LCD16bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x4c>
 802379c:	4620      	mov	r0, r4
 802379e:	f007 fa24 	bl	802abea <__cxa_guard_acquire>
 80237a2:	b138      	cbz	r0, 80237b4 <_ZN8touchgfx8LCD16bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x4c>
 80237a4:	4620      	mov	r0, r4
 80237a6:	f007 fa2c 	bl	802ac02 <__cxa_guard_release>
 80237aa:	4a06      	ldr	r2, [pc, #24]	@ (80237c4 <_ZN8touchgfx8LCD16bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x5c>)
 80237ac:	4909      	ldr	r1, [pc, #36]	@ (80237d4 <_ZN8touchgfx8LCD16bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x6c>)
 80237ae:	480a      	ldr	r0, [pc, #40]	@ (80237d8 <_ZN8touchgfx8LCD16bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x70>)
 80237b0:	f007 fa14 	bl	802abdc <__aeabi_atexit>
 80237b4:	4b05      	ldr	r3, [pc, #20]	@ (80237cc <_ZN8touchgfx8LCD16bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x64>)
 80237b6:	662b      	str	r3, [r5, #96]	@ 0x60
 80237b8:	4b07      	ldr	r3, [pc, #28]	@ (80237d8 <_ZN8touchgfx8LCD16bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x70>)
 80237ba:	666b      	str	r3, [r5, #100]	@ 0x64
 80237bc:	bd38      	pop	{r3, r4, r5, pc}
 80237be:	bf00      	nop
 80237c0:	2400b948 	.word	0x2400b948
 80237c4:	24000000 	.word	0x24000000
 80237c8:	0802145b 	.word	0x0802145b
 80237cc:	24000090 	.word	0x24000090
 80237d0:	2400b94c 	.word	0x2400b94c
 80237d4:	08021459 	.word	0x08021459
 80237d8:	24000094 	.word	0x24000094

080237dc <_ZN8touchgfx8LCD16bpp43enableTextureMapperARGB8888_NearestNeighborEv>:
 80237dc:	b538      	push	{r3, r4, r5, lr}
 80237de:	4c15      	ldr	r4, [pc, #84]	@ (8023834 <_ZN8touchgfx8LCD16bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x58>)
 80237e0:	4605      	mov	r5, r0
 80237e2:	7823      	ldrb	r3, [r4, #0]
 80237e4:	f3bf 8f5b 	dmb	ish
 80237e8:	07da      	lsls	r2, r3, #31
 80237ea:	d40b      	bmi.n	8023804 <_ZN8touchgfx8LCD16bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x28>
 80237ec:	4620      	mov	r0, r4
 80237ee:	f007 f9fc 	bl	802abea <__cxa_guard_acquire>
 80237f2:	b138      	cbz	r0, 8023804 <_ZN8touchgfx8LCD16bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x28>
 80237f4:	4620      	mov	r0, r4
 80237f6:	f007 fa04 	bl	802ac02 <__cxa_guard_release>
 80237fa:	4a0f      	ldr	r2, [pc, #60]	@ (8023838 <_ZN8touchgfx8LCD16bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x5c>)
 80237fc:	490f      	ldr	r1, [pc, #60]	@ (802383c <_ZN8touchgfx8LCD16bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x60>)
 80237fe:	4810      	ldr	r0, [pc, #64]	@ (8023840 <_ZN8touchgfx8LCD16bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x64>)
 8023800:	f007 f9ec 	bl	802abdc <__aeabi_atexit>
 8023804:	4c0f      	ldr	r4, [pc, #60]	@ (8023844 <_ZN8touchgfx8LCD16bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x68>)
 8023806:	7823      	ldrb	r3, [r4, #0]
 8023808:	f3bf 8f5b 	dmb	ish
 802380c:	07db      	lsls	r3, r3, #31
 802380e:	d40b      	bmi.n	8023828 <_ZN8touchgfx8LCD16bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x4c>
 8023810:	4620      	mov	r0, r4
 8023812:	f007 f9ea 	bl	802abea <__cxa_guard_acquire>
 8023816:	b138      	cbz	r0, 8023828 <_ZN8touchgfx8LCD16bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x4c>
 8023818:	4620      	mov	r0, r4
 802381a:	f007 f9f2 	bl	802ac02 <__cxa_guard_release>
 802381e:	4a06      	ldr	r2, [pc, #24]	@ (8023838 <_ZN8touchgfx8LCD16bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x5c>)
 8023820:	4909      	ldr	r1, [pc, #36]	@ (8023848 <_ZN8touchgfx8LCD16bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x6c>)
 8023822:	480a      	ldr	r0, [pc, #40]	@ (802384c <_ZN8touchgfx8LCD16bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x70>)
 8023824:	f007 f9da 	bl	802abdc <__aeabi_atexit>
 8023828:	4b05      	ldr	r3, [pc, #20]	@ (8023840 <_ZN8touchgfx8LCD16bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x64>)
 802382a:	65ab      	str	r3, [r5, #88]	@ 0x58
 802382c:	4b07      	ldr	r3, [pc, #28]	@ (802384c <_ZN8touchgfx8LCD16bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x70>)
 802382e:	65eb      	str	r3, [r5, #92]	@ 0x5c
 8023830:	bd38      	pop	{r3, r4, r5, pc}
 8023832:	bf00      	nop
 8023834:	2400b920 	.word	0x2400b920
 8023838:	24000000 	.word	0x24000000
 802383c:	0802145f 	.word	0x0802145f
 8023840:	24000068 	.word	0x24000068
 8023844:	2400b924 	.word	0x2400b924
 8023848:	0802145d 	.word	0x0802145d
 802384c:	2400006c 	.word	0x2400006c

08023850 <_ZN8touchgfx8LCD16bpp27enableTextureMapperARGB8888Ev>:
 8023850:	b510      	push	{r4, lr}
 8023852:	4604      	mov	r4, r0
 8023854:	f7ff ff88 	bl	8023768 <_ZN8touchgfx8LCD16bpp49enableTextureMapperARGB8888_BilinearInterpolationEv>
 8023858:	4620      	mov	r0, r4
 802385a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 802385e:	f7ff bfbd 	b.w	80237dc <_ZN8touchgfx8LCD16bpp43enableTextureMapperARGB8888_NearestNeighborEv>
	...

08023864 <_ZN8touchgfx8LCD16bpp43enableTextureMapperA4_BilinearInterpolationEv>:
 8023864:	b538      	push	{r3, r4, r5, lr}
 8023866:	4c15      	ldr	r4, [pc, #84]	@ (80238bc <_ZN8touchgfx8LCD16bpp43enableTextureMapperA4_BilinearInterpolationEv+0x58>)
 8023868:	4605      	mov	r5, r0
 802386a:	7823      	ldrb	r3, [r4, #0]
 802386c:	f3bf 8f5b 	dmb	ish
 8023870:	07da      	lsls	r2, r3, #31
 8023872:	d40b      	bmi.n	802388c <_ZN8touchgfx8LCD16bpp43enableTextureMapperA4_BilinearInterpolationEv+0x28>
 8023874:	4620      	mov	r0, r4
 8023876:	f007 f9b8 	bl	802abea <__cxa_guard_acquire>
 802387a:	b138      	cbz	r0, 802388c <_ZN8touchgfx8LCD16bpp43enableTextureMapperA4_BilinearInterpolationEv+0x28>
 802387c:	4620      	mov	r0, r4
 802387e:	f007 f9c0 	bl	802ac02 <__cxa_guard_release>
 8023882:	4a0f      	ldr	r2, [pc, #60]	@ (80238c0 <_ZN8touchgfx8LCD16bpp43enableTextureMapperA4_BilinearInterpolationEv+0x5c>)
 8023884:	490f      	ldr	r1, [pc, #60]	@ (80238c4 <_ZN8touchgfx8LCD16bpp43enableTextureMapperA4_BilinearInterpolationEv+0x60>)
 8023886:	4810      	ldr	r0, [pc, #64]	@ (80238c8 <_ZN8touchgfx8LCD16bpp43enableTextureMapperA4_BilinearInterpolationEv+0x64>)
 8023888:	f007 f9a8 	bl	802abdc <__aeabi_atexit>
 802388c:	4c0f      	ldr	r4, [pc, #60]	@ (80238cc <_ZN8touchgfx8LCD16bpp43enableTextureMapperA4_BilinearInterpolationEv+0x68>)
 802388e:	7823      	ldrb	r3, [r4, #0]
 8023890:	f3bf 8f5b 	dmb	ish
 8023894:	07db      	lsls	r3, r3, #31
 8023896:	d40b      	bmi.n	80238b0 <_ZN8touchgfx8LCD16bpp43enableTextureMapperA4_BilinearInterpolationEv+0x4c>
 8023898:	4620      	mov	r0, r4
 802389a:	f007 f9a6 	bl	802abea <__cxa_guard_acquire>
 802389e:	b138      	cbz	r0, 80238b0 <_ZN8touchgfx8LCD16bpp43enableTextureMapperA4_BilinearInterpolationEv+0x4c>
 80238a0:	4620      	mov	r0, r4
 80238a2:	f007 f9ae 	bl	802ac02 <__cxa_guard_release>
 80238a6:	4a06      	ldr	r2, [pc, #24]	@ (80238c0 <_ZN8touchgfx8LCD16bpp43enableTextureMapperA4_BilinearInterpolationEv+0x5c>)
 80238a8:	4909      	ldr	r1, [pc, #36]	@ (80238d0 <_ZN8touchgfx8LCD16bpp43enableTextureMapperA4_BilinearInterpolationEv+0x6c>)
 80238aa:	480a      	ldr	r0, [pc, #40]	@ (80238d4 <_ZN8touchgfx8LCD16bpp43enableTextureMapperA4_BilinearInterpolationEv+0x70>)
 80238ac:	f007 f996 	bl	802abdc <__aeabi_atexit>
 80238b0:	4b05      	ldr	r3, [pc, #20]	@ (80238c8 <_ZN8touchgfx8LCD16bpp43enableTextureMapperA4_BilinearInterpolationEv+0x64>)
 80238b2:	672b      	str	r3, [r5, #112]	@ 0x70
 80238b4:	4b07      	ldr	r3, [pc, #28]	@ (80238d4 <_ZN8touchgfx8LCD16bpp43enableTextureMapperA4_BilinearInterpolationEv+0x70>)
 80238b6:	676b      	str	r3, [r5, #116]	@ 0x74
 80238b8:	bd38      	pop	{r3, r4, r5, pc}
 80238ba:	bf00      	nop
 80238bc:	2400b918 	.word	0x2400b918
 80238c0:	24000000 	.word	0x24000000
 80238c4:	08021453 	.word	0x08021453
 80238c8:	24000060 	.word	0x24000060
 80238cc:	2400b91c 	.word	0x2400b91c
 80238d0:	08021451 	.word	0x08021451
 80238d4:	24000064 	.word	0x24000064

080238d8 <_ZN8touchgfx8LCD16bpp37enableTextureMapperA4_NearestNeighborEv>:
 80238d8:	b538      	push	{r3, r4, r5, lr}
 80238da:	4c15      	ldr	r4, [pc, #84]	@ (8023930 <_ZN8touchgfx8LCD16bpp37enableTextureMapperA4_NearestNeighborEv+0x58>)
 80238dc:	4605      	mov	r5, r0
 80238de:	7823      	ldrb	r3, [r4, #0]
 80238e0:	f3bf 8f5b 	dmb	ish
 80238e4:	07da      	lsls	r2, r3, #31
 80238e6:	d40b      	bmi.n	8023900 <_ZN8touchgfx8LCD16bpp37enableTextureMapperA4_NearestNeighborEv+0x28>
 80238e8:	4620      	mov	r0, r4
 80238ea:	f007 f97e 	bl	802abea <__cxa_guard_acquire>
 80238ee:	b138      	cbz	r0, 8023900 <_ZN8touchgfx8LCD16bpp37enableTextureMapperA4_NearestNeighborEv+0x28>
 80238f0:	4620      	mov	r0, r4
 80238f2:	f007 f986 	bl	802ac02 <__cxa_guard_release>
 80238f6:	4a0f      	ldr	r2, [pc, #60]	@ (8023934 <_ZN8touchgfx8LCD16bpp37enableTextureMapperA4_NearestNeighborEv+0x5c>)
 80238f8:	490f      	ldr	r1, [pc, #60]	@ (8023938 <_ZN8touchgfx8LCD16bpp37enableTextureMapperA4_NearestNeighborEv+0x60>)
 80238fa:	4810      	ldr	r0, [pc, #64]	@ (802393c <_ZN8touchgfx8LCD16bpp37enableTextureMapperA4_NearestNeighborEv+0x64>)
 80238fc:	f007 f96e 	bl	802abdc <__aeabi_atexit>
 8023900:	4c0f      	ldr	r4, [pc, #60]	@ (8023940 <_ZN8touchgfx8LCD16bpp37enableTextureMapperA4_NearestNeighborEv+0x68>)
 8023902:	7823      	ldrb	r3, [r4, #0]
 8023904:	f3bf 8f5b 	dmb	ish
 8023908:	07db      	lsls	r3, r3, #31
 802390a:	d40b      	bmi.n	8023924 <_ZN8touchgfx8LCD16bpp37enableTextureMapperA4_NearestNeighborEv+0x4c>
 802390c:	4620      	mov	r0, r4
 802390e:	f007 f96c 	bl	802abea <__cxa_guard_acquire>
 8023912:	b138      	cbz	r0, 8023924 <_ZN8touchgfx8LCD16bpp37enableTextureMapperA4_NearestNeighborEv+0x4c>
 8023914:	4620      	mov	r0, r4
 8023916:	f007 f974 	bl	802ac02 <__cxa_guard_release>
 802391a:	4a06      	ldr	r2, [pc, #24]	@ (8023934 <_ZN8touchgfx8LCD16bpp37enableTextureMapperA4_NearestNeighborEv+0x5c>)
 802391c:	4909      	ldr	r1, [pc, #36]	@ (8023944 <_ZN8touchgfx8LCD16bpp37enableTextureMapperA4_NearestNeighborEv+0x6c>)
 802391e:	480a      	ldr	r0, [pc, #40]	@ (8023948 <_ZN8touchgfx8LCD16bpp37enableTextureMapperA4_NearestNeighborEv+0x70>)
 8023920:	f007 f95c 	bl	802abdc <__aeabi_atexit>
 8023924:	4b05      	ldr	r3, [pc, #20]	@ (802393c <_ZN8touchgfx8LCD16bpp37enableTextureMapperA4_NearestNeighborEv+0x64>)
 8023926:	66ab      	str	r3, [r5, #104]	@ 0x68
 8023928:	4b07      	ldr	r3, [pc, #28]	@ (8023948 <_ZN8touchgfx8LCD16bpp37enableTextureMapperA4_NearestNeighborEv+0x70>)
 802392a:	66eb      	str	r3, [r5, #108]	@ 0x6c
 802392c:	bd38      	pop	{r3, r4, r5, pc}
 802392e:	bf00      	nop
 8023930:	2400b910 	.word	0x2400b910
 8023934:	24000000 	.word	0x24000000
 8023938:	08021457 	.word	0x08021457
 802393c:	24000058 	.word	0x24000058
 8023940:	2400b914 	.word	0x2400b914
 8023944:	08021455 	.word	0x08021455
 8023948:	2400005c 	.word	0x2400005c

0802394c <_ZN8touchgfx8LCD16bpp21enableTextureMapperA4Ev>:
 802394c:	b510      	push	{r4, lr}
 802394e:	4604      	mov	r4, r0
 8023950:	f7ff ff88 	bl	8023864 <_ZN8touchgfx8LCD16bpp43enableTextureMapperA4_BilinearInterpolationEv>
 8023954:	4620      	mov	r0, r4
 8023956:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 802395a:	f7ff bfbd 	b.w	80238d8 <_ZN8touchgfx8LCD16bpp37enableTextureMapperA4_NearestNeighborEv>

0802395e <_ZN8touchgfx8LCD16bpp22enableTextureMapperAllEv>:
 802395e:	b510      	push	{r4, lr}
 8023960:	4604      	mov	r4, r0
 8023962:	f7ff fff3 	bl	802394c <_ZN8touchgfx8LCD16bpp21enableTextureMapperA4Ev>
 8023966:	4620      	mov	r0, r4
 8023968:	f7ff ff72 	bl	8023850 <_ZN8touchgfx8LCD16bpp27enableTextureMapperARGB8888Ev>
 802396c:	4620      	mov	r0, r4
 802396e:	f7ff fdf9 	bl	8023564 <_ZN8touchgfx8LCD16bpp30enableTextureMapperL8_ARGB8888Ev>
 8023972:	4620      	mov	r0, r4
 8023974:	f7ff fcfa 	bl	802336c <_ZN8touchgfx8LCD16bpp28enableTextureMapperL8_RGB565Ev>
 8023978:	4620      	mov	r0, r4
 802397a:	f7ff fd75 	bl	8023468 <_ZN8touchgfx8LCD16bpp28enableTextureMapperL8_RGB888Ev>
 802397e:	4620      	mov	r0, r4
 8023980:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8023984:	f7ff bee0 	b.w	8023748 <_ZN8touchgfx8LCD16bpp25enableTextureMapperRGB565Ev>

08023988 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKtssiihhh>:
 8023988:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 802398c:	e9dd 4e0c 	ldrd	r4, lr, [sp, #48]	@ 0x30
 8023990:	f9bd 8028 	ldrsh.w	r8, [sp, #40]	@ 0x28
 8023994:	f1be 0f00 	cmp.w	lr, #0
 8023998:	f9bd b02c 	ldrsh.w	fp, [sp, #44]	@ 0x2c
 802399c:	fb0e 4708 	mla	r7, lr, r8, r4
 80239a0:	f89d 6038 	ldrb.w	r6, [sp, #56]	@ 0x38
 80239a4:	f89d c03c 	ldrb.w	ip, [sp, #60]	@ 0x3c
 80239a8:	f89d 5040 	ldrb.w	r5, [sp, #64]	@ 0x40
 80239ac:	eb02 0a07 	add.w	sl, r2, r7
 80239b0:	8808      	ldrh	r0, [r1, #0]
 80239b2:	db37      	blt.n	8023a24 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKtssiihhh+0x9c>
 80239b4:	45f3      	cmp	fp, lr
 80239b6:	dd35      	ble.n	8023a24 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKtssiihhh+0x9c>
 80239b8:	2c00      	cmp	r4, #0
 80239ba:	db31      	blt.n	8023a20 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKtssiihhh+0x98>
 80239bc:	45a0      	cmp	r8, r4
 80239be:	dd2f      	ble.n	8023a20 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKtssiihhh+0x98>
 80239c0:	5dd2      	ldrb	r2, [r2, r7]
 80239c2:	f833 9012 	ldrh.w	r9, [r3, r2, lsl #1]
 80239c6:	1c62      	adds	r2, r4, #1
 80239c8:	d42f      	bmi.n	8023a2a <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKtssiihhh+0xa2>
 80239ca:	4590      	cmp	r8, r2
 80239cc:	dd2d      	ble.n	8023a2a <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKtssiihhh+0xa2>
 80239ce:	b366      	cbz	r6, 8023a2a <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKtssiihhh+0xa2>
 80239d0:	f89a 2001 	ldrb.w	r2, [sl, #1]
 80239d4:	f833 7012 	ldrh.w	r7, [r3, r2, lsl #1]
 80239d8:	f11e 0e01 	adds.w	lr, lr, #1
 80239dc:	d429      	bmi.n	8023a32 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKtssiihhh+0xaa>
 80239de:	45f3      	cmp	fp, lr
 80239e0:	dd27      	ble.n	8023a32 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKtssiihhh+0xaa>
 80239e2:	f1bc 0f00 	cmp.w	ip, #0
 80239e6:	f000 80a1 	beq.w	8023b2c <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKtssiihhh+0x1a4>
 80239ea:	2c00      	cmp	r4, #0
 80239ec:	db1f      	blt.n	8023a2e <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKtssiihhh+0xa6>
 80239ee:	45a0      	cmp	r8, r4
 80239f0:	dd1d      	ble.n	8023a2e <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKtssiihhh+0xa6>
 80239f2:	f81a 2008 	ldrb.w	r2, [sl, r8]
 80239f6:	f833 e012 	ldrh.w	lr, [r3, r2, lsl #1]
 80239fa:	3401      	adds	r4, #1
 80239fc:	d41c      	bmi.n	8023a38 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKtssiihhh+0xb0>
 80239fe:	45a0      	cmp	r8, r4
 8023a00:	dd1a      	ble.n	8023a38 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKtssiihhh+0xb0>
 8023a02:	b1de      	cbz	r6, 8023a3c <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKtssiihhh+0xb4>
 8023a04:	44d0      	add	r8, sl
 8023a06:	f898 2001 	ldrb.w	r2, [r8, #1]
 8023a0a:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 8023a0e:	2e0f      	cmp	r6, #15
 8023a10:	d915      	bls.n	8023a3e <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKtssiihhh+0xb6>
 8023a12:	4b49      	ldr	r3, [pc, #292]	@ (8023b38 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKtssiihhh+0x1b0>)
 8023a14:	f44f 71ec 	mov.w	r1, #472	@ 0x1d8
 8023a18:	4a48      	ldr	r2, [pc, #288]	@ (8023b3c <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKtssiihhh+0x1b4>)
 8023a1a:	4849      	ldr	r0, [pc, #292]	@ (8023b40 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKtssiihhh+0x1b8>)
 8023a1c:	f007 f912 	bl	802ac44 <__assert_func>
 8023a20:	4681      	mov	r9, r0
 8023a22:	e7d0      	b.n	80239c6 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKtssiihhh+0x3e>
 8023a24:	4607      	mov	r7, r0
 8023a26:	4681      	mov	r9, r0
 8023a28:	e7d6      	b.n	80239d8 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKtssiihhh+0x50>
 8023a2a:	4607      	mov	r7, r0
 8023a2c:	e7d4      	b.n	80239d8 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKtssiihhh+0x50>
 8023a2e:	4686      	mov	lr, r0
 8023a30:	e7e3      	b.n	80239fa <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKtssiihhh+0x72>
 8023a32:	4603      	mov	r3, r0
 8023a34:	4686      	mov	lr, r0
 8023a36:	e7ea      	b.n	8023a0e <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKtssiihhh+0x86>
 8023a38:	4603      	mov	r3, r0
 8023a3a:	e7e8      	b.n	8023a0e <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKtssiihhh+0x86>
 8023a3c:	4603      	mov	r3, r0
 8023a3e:	f1bc 0f0f 	cmp.w	ip, #15
 8023a42:	d8e6      	bhi.n	8023a12 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKtssiihhh+0x8a>
 8023a44:	fb16 f80c 	smulbb	r8, r6, ip
 8023a48:	ea4f 4409 	mov.w	r4, r9, lsl #16
 8023a4c:	ea4f 4a07 	mov.w	sl, r7, lsl #16
 8023a50:	f429 69fc 	bic.w	r9, r9, #2016	@ 0x7e0
 8023a54:	f004 64fc 	and.w	r4, r4, #132120576	@ 0x7e00000
 8023a58:	ea4f 08e8 	mov.w	r8, r8, asr #3
 8023a5c:	f00a 6afc 	and.w	sl, sl, #132120576	@ 0x7e00000
 8023a60:	f427 67fc 	bic.w	r7, r7, #2016	@ 0x7e0
 8023a64:	ea44 0909 	orr.w	r9, r4, r9
 8023a68:	f1cc 0410 	rsb	r4, ip, #16
 8023a6c:	041a      	lsls	r2, r3, #16
 8023a6e:	ea4a 0707 	orr.w	r7, sl, r7
 8023a72:	1ba4      	subs	r4, r4, r6
 8023a74:	ebc8 0646 	rsb	r6, r8, r6, lsl #1
 8023a78:	f002 62fc 	and.w	r2, r2, #132120576	@ 0x7e00000
 8023a7c:	f423 63fc 	bic.w	r3, r3, #2016	@ 0x7e0
 8023a80:	4377      	muls	r7, r6
 8023a82:	eb08 0444 	add.w	r4, r8, r4, lsl #1
 8023a86:	4313      	orrs	r3, r2
 8023a88:	ea4f 420e 	mov.w	r2, lr, lsl #16
 8023a8c:	fb04 7409 	mla	r4, r4, r9, r7
 8023a90:	ebc8 0c4c 	rsb	ip, r8, ip, lsl #1
 8023a94:	f002 62fc 	and.w	r2, r2, #132120576	@ 0x7e00000
 8023a98:	b2af      	uxth	r7, r5
 8023a9a:	fb08 4303 	mla	r3, r8, r3, r4
 8023a9e:	f42e 64fc 	bic.w	r4, lr, #2016	@ 0x7e0
 8023aa2:	43ed      	mvns	r5, r5
 8023aa4:	10c6      	asrs	r6, r0, #3
 8023aa6:	4322      	orrs	r2, r4
 8023aa8:	b2ed      	uxtb	r5, r5
 8023aaa:	f006 06fc 	and.w	r6, r6, #252	@ 0xfc
 8023aae:	fb0c 3202 	mla	r2, ip, r2, r3
 8023ab2:	fb16 f605 	smulbb	r6, r6, r5
 8023ab6:	0d53      	lsrs	r3, r2, #21
 8023ab8:	0952      	lsrs	r2, r2, #5
 8023aba:	f403 63fc 	and.w	r3, r3, #2016	@ 0x7e0
 8023abe:	f422 62fc 	bic.w	r2, r2, #2016	@ 0x7e0
 8023ac2:	431a      	orrs	r2, r3
 8023ac4:	b293      	uxth	r3, r2
 8023ac6:	1202      	asrs	r2, r0, #8
 8023ac8:	ea4f 2c23 	mov.w	ip, r3, asr #8
 8023acc:	f002 02f8 	and.w	r2, r2, #248	@ 0xf8
 8023ad0:	00dc      	lsls	r4, r3, #3
 8023ad2:	f00c 0cf8 	and.w	ip, ip, #248	@ 0xf8
 8023ad6:	fb12 f205 	smulbb	r2, r2, r5
 8023ada:	b2e4      	uxtb	r4, r4
 8023adc:	fb0c 2c07 	mla	ip, ip, r7, r2
 8023ae0:	10da      	asrs	r2, r3, #3
 8023ae2:	00c3      	lsls	r3, r0, #3
 8023ae4:	f002 02fc 	and.w	r2, r2, #252	@ 0xfc
 8023ae8:	fa1f fc8c 	uxth.w	ip, ip
 8023aec:	b2db      	uxtb	r3, r3
 8023aee:	fb02 6207 	mla	r2, r2, r7, r6
 8023af2:	fb13 f305 	smulbb	r3, r3, r5
 8023af6:	b296      	uxth	r6, r2
 8023af8:	fb04 3307 	mla	r3, r4, r7, r3
 8023afc:	b29a      	uxth	r2, r3
 8023afe:	f10c 0301 	add.w	r3, ip, #1
 8023b02:	eb03 2c1c 	add.w	ip, r3, ip, lsr #8
 8023b06:	1c53      	adds	r3, r2, #1
 8023b08:	eb03 2312 	add.w	r3, r3, r2, lsr #8
 8023b0c:	1c72      	adds	r2, r6, #1
 8023b0e:	f40c 4c78 	and.w	ip, ip, #63488	@ 0xf800
 8023b12:	eb02 2216 	add.w	r2, r2, r6, lsr #8
 8023b16:	f3c3 23c4 	ubfx	r3, r3, #11, #5
 8023b1a:	0952      	lsrs	r2, r2, #5
 8023b1c:	ea43 030c 	orr.w	r3, r3, ip
 8023b20:	f402 62fc 	and.w	r2, r2, #2016	@ 0x7e0
 8023b24:	4313      	orrs	r3, r2
 8023b26:	800b      	strh	r3, [r1, #0]
 8023b28:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8023b2c:	2e0f      	cmp	r6, #15
 8023b2e:	f63f af70 	bhi.w	8023a12 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKtssiihhh+0x8a>
 8023b32:	4603      	mov	r3, r0
 8023b34:	4686      	mov	lr, r0
 8023b36:	e785      	b.n	8023a44 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKtssiihhh+0xbc>
 8023b38:	0802fed5 	.word	0x0802fed5
 8023b3c:	0803054b 	.word	0x0803054b
 8023b40:	0802ff59 	.word	0x0802ff59

08023b44 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 8023b44:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8023b48:	ed2d 8b08 	vpush	{d8-d11}
 8023b4c:	b099      	sub	sp, #100	@ 0x64
 8023b4e:	eeb0 aa40 	vmov.f32	s20, s0
 8023b52:	eef0 9a60 	vmov.f32	s19, s1
 8023b56:	9215      	str	r2, [sp, #84]	@ 0x54
 8023b58:	eeb0 9a41 	vmov.f32	s18, s2
 8023b5c:	9a2f      	ldr	r2, [sp, #188]	@ 0xbc
 8023b5e:	eeb0 8a62 	vmov.f32	s16, s5
 8023b62:	9309      	str	r3, [sp, #36]	@ 0x24
 8023b64:	eef0 8a43 	vmov.f32	s17, s6
 8023b68:	f89d 30cc 	ldrb.w	r3, [sp, #204]	@ 0xcc
 8023b6c:	eef0 ba44 	vmov.f32	s23, s8
 8023b70:	9016      	str	r0, [sp, #88]	@ 0x58
 8023b72:	eeb0 ba64 	vmov.f32	s22, s9
 8023b76:	930d      	str	r3, [sp, #52]	@ 0x34
 8023b78:	eef0 aa45 	vmov.f32	s21, s10
 8023b7c:	6850      	ldr	r0, [r2, #4]
 8023b7e:	910c      	str	r1, [sp, #48]	@ 0x30
 8023b80:	6812      	ldr	r2, [r2, #0]
 8023b82:	e9dd 1330 	ldrd	r1, r3, [sp, #192]	@ 0xc0
 8023b86:	e9dd a52b 	ldrd	sl, r5, [sp, #172]	@ 0xac
 8023b8a:	fb00 1303 	mla	r3, r0, r3, r1
 8023b8e:	eb02 0843 	add.w	r8, r2, r3, lsl #1
 8023b92:	9b32      	ldr	r3, [sp, #200]	@ 0xc8
 8023b94:	681b      	ldr	r3, [r3, #0]
 8023b96:	930b      	str	r3, [sp, #44]	@ 0x2c
 8023b98:	9b32      	ldr	r3, [sp, #200]	@ 0xc8
 8023b9a:	685e      	ldr	r6, [r3, #4]
 8023b9c:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8023b9e:	3604      	adds	r6, #4
 8023ba0:	43db      	mvns	r3, r3
 8023ba2:	b2db      	uxtb	r3, r3
 8023ba4:	930a      	str	r3, [sp, #40]	@ 0x28
 8023ba6:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8023ba8:	2b00      	cmp	r3, #0
 8023baa:	dc03      	bgt.n	8023bb4 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x70>
 8023bac:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 8023bae:	2b00      	cmp	r3, #0
 8023bb0:	f340 8225 	ble.w	8023ffe <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4ba>
 8023bb4:	9b32      	ldr	r3, [sp, #200]	@ 0xc8
 8023bb6:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 8023bba:	f9b3 200c 	ldrsh.w	r2, [r3, #12]
 8023bbe:	1e48      	subs	r0, r1, #1
 8023bc0:	1e57      	subs	r7, r2, #1
 8023bc2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8023bc4:	2b00      	cmp	r3, #0
 8023bc6:	f340 80e3 	ble.w	8023d90 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x24c>
 8023bca:	ea5f 4c2a 	movs.w	ip, sl, asr #16
 8023bce:	ea4f 4325 	mov.w	r3, r5, asr #16
 8023bd2:	d406      	bmi.n	8023be2 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x9e>
 8023bd4:	4584      	cmp	ip, r0
 8023bd6:	da04      	bge.n	8023be2 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x9e>
 8023bd8:	2b00      	cmp	r3, #0
 8023bda:	db02      	blt.n	8023be2 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x9e>
 8023bdc:	42bb      	cmp	r3, r7
 8023bde:	f2c0 80d8 	blt.w	8023d92 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x24e>
 8023be2:	f11c 0c01 	adds.w	ip, ip, #1
 8023be6:	f100 80c9 	bmi.w	8023d7c <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x238>
 8023bea:	4561      	cmp	r1, ip
 8023bec:	f2c0 80c6 	blt.w	8023d7c <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x238>
 8023bf0:	3301      	adds	r3, #1
 8023bf2:	f100 80c3 	bmi.w	8023d7c <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x238>
 8023bf6:	429a      	cmp	r2, r3
 8023bf8:	f2c0 80c0 	blt.w	8023d7c <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x238>
 8023bfc:	f8dd b024 	ldr.w	fp, [sp, #36]	@ 0x24
 8023c00:	4647      	mov	r7, r8
 8023c02:	f1bb 0f00 	cmp.w	fp, #0
 8023c06:	f340 80e3 	ble.w	8023dd0 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x28c>
 8023c0a:	9a32      	ldr	r2, [sp, #200]	@ 0xc8
 8023c0c:	ea4f 4c25 	mov.w	ip, r5, asr #16
 8023c10:	9b32      	ldr	r3, [sp, #200]	@ 0xc8
 8023c12:	f3ca 3003 	ubfx	r0, sl, #12, #4
 8023c16:	f8d2 e00c 	ldr.w	lr, [r2, #12]
 8023c1a:	ea5f 422a 	movs.w	r2, sl, asr #16
 8023c1e:	f3c5 3103 	ubfx	r1, r5, #12, #4
 8023c22:	689b      	ldr	r3, [r3, #8]
 8023c24:	f100 8121 	bmi.w	8023e6a <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x326>
 8023c28:	f103 39ff 	add.w	r9, r3, #4294967295
 8023c2c:	454a      	cmp	r2, r9
 8023c2e:	f280 811c 	bge.w	8023e6a <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x326>
 8023c32:	f1bc 0f00 	cmp.w	ip, #0
 8023c36:	f2c0 8118 	blt.w	8023e6a <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x326>
 8023c3a:	f10e 39ff 	add.w	r9, lr, #4294967295
 8023c3e:	45cc      	cmp	ip, r9
 8023c40:	f280 8113 	bge.w	8023e6a <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x326>
 8023c44:	b21b      	sxth	r3, r3
 8023c46:	9c0b      	ldr	r4, [sp, #44]	@ 0x2c
 8023c48:	fb0c 2203 	mla	r2, ip, r3, r2
 8023c4c:	eb04 0902 	add.w	r9, r4, r2
 8023c50:	5ca2      	ldrb	r2, [r4, r2]
 8023c52:	f836 e012 	ldrh.w	lr, [r6, r2, lsl #1]
 8023c56:	2800      	cmp	r0, #0
 8023c58:	f000 80fe 	beq.w	8023e58 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x314>
 8023c5c:	f899 2001 	ldrb.w	r2, [r9, #1]
 8023c60:	f836 2012 	ldrh.w	r2, [r6, r2, lsl #1]
 8023c64:	9211      	str	r2, [sp, #68]	@ 0x44
 8023c66:	b151      	cbz	r1, 8023c7e <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x13a>
 8023c68:	eb09 0203 	add.w	r2, r9, r3
 8023c6c:	f819 3003 	ldrb.w	r3, [r9, r3]
 8023c70:	f836 3013 	ldrh.w	r3, [r6, r3, lsl #1]
 8023c74:	930f      	str	r3, [sp, #60]	@ 0x3c
 8023c76:	7853      	ldrb	r3, [r2, #1]
 8023c78:	f836 3013 	ldrh.w	r3, [r6, r3, lsl #1]
 8023c7c:	9312      	str	r3, [sp, #72]	@ 0x48
 8023c7e:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 8023c80:	fb10 f201 	smulbb	r2, r0, r1
 8023c84:	9c12      	ldr	r4, [sp, #72]	@ 0x48
 8023c86:	ea4f 4c03 	mov.w	ip, r3, lsl #16
 8023c8a:	f423 63fc 	bic.w	r3, r3, #2016	@ 0x7e0
 8023c8e:	f424 64fc 	bic.w	r4, r4, #2016	@ 0x7e0
 8023c92:	10d2      	asrs	r2, r2, #3
 8023c94:	f00c 6cfc 	and.w	ip, ip, #132120576	@ 0x7e00000
 8023c98:	ebc2 0940 	rsb	r9, r2, r0, lsl #1
 8023c9c:	ea4c 0c03 	orr.w	ip, ip, r3
 8023ca0:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 8023ca2:	041b      	lsls	r3, r3, #16
 8023ca4:	f003 63fc 	and.w	r3, r3, #132120576	@ 0x7e00000
 8023ca8:	4323      	orrs	r3, r4
 8023caa:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 8023cac:	4353      	muls	r3, r2
 8023cae:	fb09 330c 	mla	r3, r9, ip, r3
 8023cb2:	ea4f 4c0e 	mov.w	ip, lr, lsl #16
 8023cb6:	f42e 6efc 	bic.w	lr, lr, #2016	@ 0x7e0
 8023cba:	f00c 6cfc 	and.w	ip, ip, #132120576	@ 0x7e00000
 8023cbe:	ea4c 0e0e 	orr.w	lr, ip, lr
 8023cc2:	f1c1 0c10 	rsb	ip, r1, #16
 8023cc6:	ebac 0c00 	sub.w	ip, ip, r0
 8023cca:	eb02 0c4c 	add.w	ip, r2, ip, lsl #1
 8023cce:	ebc2 0241 	rsb	r2, r2, r1, lsl #1
 8023cd2:	fb0c 3c0e 	mla	ip, ip, lr, r3
 8023cd6:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8023cd8:	0418      	lsls	r0, r3, #16
 8023cda:	f423 63fc 	bic.w	r3, r3, #2016	@ 0x7e0
 8023cde:	f000 60fc 	and.w	r0, r0, #132120576	@ 0x7e00000
 8023ce2:	4318      	orrs	r0, r3
 8023ce4:	fb02 c200 	mla	r2, r2, r0, ip
 8023ce8:	8838      	ldrh	r0, [r7, #0]
 8023cea:	0d53      	lsrs	r3, r2, #21
 8023cec:	0952      	lsrs	r2, r2, #5
 8023cee:	f403 63fc 	and.w	r3, r3, #2016	@ 0x7e0
 8023cf2:	1201      	asrs	r1, r0, #8
 8023cf4:	f422 62fc 	bic.w	r2, r2, #2016	@ 0x7e0
 8023cf8:	ea4f 0ee0 	mov.w	lr, r0, asr #3
 8023cfc:	f001 01f8 	and.w	r1, r1, #248	@ 0xf8
 8023d00:	00c0      	lsls	r0, r0, #3
 8023d02:	431a      	orrs	r2, r3
 8023d04:	f8bd 3034 	ldrh.w	r3, [sp, #52]	@ 0x34
 8023d08:	fb11 f104 	smulbb	r1, r1, r4
 8023d0c:	f00e 0efc 	and.w	lr, lr, #252	@ 0xfc
 8023d10:	b292      	uxth	r2, r2
 8023d12:	fb1e fe04 	smulbb	lr, lr, r4
 8023d16:	b2c0      	uxtb	r0, r0
 8023d18:	ea4f 2c22 	mov.w	ip, r2, asr #8
 8023d1c:	fb10 f004 	smulbb	r0, r0, r4
 8023d20:	f00c 0cf8 	and.w	ip, ip, #248	@ 0xf8
 8023d24:	fb0c 1c03 	mla	ip, ip, r3, r1
 8023d28:	10d1      	asrs	r1, r2, #3
 8023d2a:	00d2      	lsls	r2, r2, #3
 8023d2c:	f001 01fc 	and.w	r1, r1, #252	@ 0xfc
 8023d30:	fa1f fc8c 	uxth.w	ip, ip
 8023d34:	b2d2      	uxtb	r2, r2
 8023d36:	fb01 e103 	mla	r1, r1, r3, lr
 8023d3a:	fb02 0303 	mla	r3, r2, r3, r0
 8023d3e:	b289      	uxth	r1, r1
 8023d40:	b29a      	uxth	r2, r3
 8023d42:	f10c 0301 	add.w	r3, ip, #1
 8023d46:	eb03 2c1c 	add.w	ip, r3, ip, lsr #8
 8023d4a:	1c53      	adds	r3, r2, #1
 8023d4c:	eb03 2312 	add.w	r3, r3, r2, lsr #8
 8023d50:	1c4a      	adds	r2, r1, #1
 8023d52:	f40c 4c78 	and.w	ip, ip, #63488	@ 0xf800
 8023d56:	eb02 2111 	add.w	r1, r2, r1, lsr #8
 8023d5a:	f3c3 23c4 	ubfx	r3, r3, #11, #5
 8023d5e:	0949      	lsrs	r1, r1, #5
 8023d60:	ea43 030c 	orr.w	r3, r3, ip
 8023d64:	f401 61fc 	and.w	r1, r1, #2016	@ 0x7e0
 8023d68:	430b      	orrs	r3, r1
 8023d6a:	803b      	strh	r3, [r7, #0]
 8023d6c:	9b2d      	ldr	r3, [sp, #180]	@ 0xb4
 8023d6e:	3702      	adds	r7, #2
 8023d70:	f10b 3bff 	add.w	fp, fp, #4294967295
 8023d74:	449a      	add	sl, r3
 8023d76:	9b2e      	ldr	r3, [sp, #184]	@ 0xb8
 8023d78:	441d      	add	r5, r3
 8023d7a:	e742      	b.n	8023c02 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xbe>
 8023d7c:	9b2d      	ldr	r3, [sp, #180]	@ 0xb4
 8023d7e:	f108 0802 	add.w	r8, r8, #2
 8023d82:	449a      	add	sl, r3
 8023d84:	9b2e      	ldr	r3, [sp, #184]	@ 0xb8
 8023d86:	441d      	add	r5, r3
 8023d88:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8023d8a:	3b01      	subs	r3, #1
 8023d8c:	9309      	str	r3, [sp, #36]	@ 0x24
 8023d8e:	e718      	b.n	8023bc2 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7e>
 8023d90:	d023      	beq.n	8023dda <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x296>
 8023d92:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8023d94:	982d      	ldr	r0, [sp, #180]	@ 0xb4
 8023d96:	3b01      	subs	r3, #1
 8023d98:	fb00 a003 	mla	r0, r0, r3, sl
 8023d9c:	1400      	asrs	r0, r0, #16
 8023d9e:	f53f af2d 	bmi.w	8023bfc <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xb8>
 8023da2:	3901      	subs	r1, #1
 8023da4:	4288      	cmp	r0, r1
 8023da6:	f6bf af29 	bge.w	8023bfc <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xb8>
 8023daa:	992e      	ldr	r1, [sp, #184]	@ 0xb8
 8023dac:	fb01 5303 	mla	r3, r1, r3, r5
 8023db0:	141b      	asrs	r3, r3, #16
 8023db2:	f53f af23 	bmi.w	8023bfc <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xb8>
 8023db6:	3a01      	subs	r2, #1
 8023db8:	4293      	cmp	r3, r2
 8023dba:	f6bf af1f 	bge.w	8023bfc <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xb8>
 8023dbe:	f8dd e024 	ldr.w	lr, [sp, #36]	@ 0x24
 8023dc2:	f8bd 9034 	ldrh.w	r9, [sp, #52]	@ 0x34
 8023dc6:	f8cd 8038 	str.w	r8, [sp, #56]	@ 0x38
 8023dca:	f1be 0f00 	cmp.w	lr, #0
 8023dce:	dc6c      	bgt.n	8023eaa <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x366>
 8023dd0:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8023dd2:	ea23 74e3 	bic.w	r4, r3, r3, asr #31
 8023dd6:	eb08 0844 	add.w	r8, r8, r4, lsl #1
 8023dda:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8023ddc:	2b00      	cmp	r3, #0
 8023dde:	f340 810e 	ble.w	8023ffe <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4ba>
 8023de2:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8023de6:	9b2a      	ldr	r3, [sp, #168]	@ 0xa8
 8023de8:	ee3a aa2b 	vadd.f32	s20, s20, s23
 8023dec:	ee79 9a8b 	vadd.f32	s19, s19, s22
 8023df0:	eef0 6a48 	vmov.f32	s13, s16
 8023df4:	eec7 7a0a 	vdiv.f32	s15, s14, s20
 8023df8:	ee39 9a2a 	vadd.f32	s18, s18, s21
 8023dfc:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 8023e00:	ee16 aa90 	vmov	sl, s13
 8023e04:	eef0 6a68 	vmov.f32	s13, s17
 8023e08:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 8023e0c:	ee16 5a90 	vmov	r5, s13
 8023e10:	ee29 7aa7 	vmul.f32	s14, s19, s15
 8023e14:	ee69 7a27 	vmul.f32	s15, s18, s15
 8023e18:	ee37 8a48 	vsub.f32	s16, s14, s16
 8023e1c:	ee77 8ae8 	vsub.f32	s17, s15, s17
 8023e20:	eebe 8ac8 	vcvt.s32.f32	s16, s16, #16
 8023e24:	eefe 8ac8 	vcvt.s32.f32	s17, s17, #16
 8023e28:	ee18 2a10 	vmov	r2, s16
 8023e2c:	eeb0 8a47 	vmov.f32	s16, s14
 8023e30:	fb92 f3f3 	sdiv	r3, r2, r3
 8023e34:	ee18 2a90 	vmov	r2, s17
 8023e38:	932d      	str	r3, [sp, #180]	@ 0xb4
 8023e3a:	9b2a      	ldr	r3, [sp, #168]	@ 0xa8
 8023e3c:	eef0 8a67 	vmov.f32	s17, s15
 8023e40:	fb92 f3f3 	sdiv	r3, r2, r3
 8023e44:	932e      	str	r3, [sp, #184]	@ 0xb8
 8023e46:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8023e48:	9a15      	ldr	r2, [sp, #84]	@ 0x54
 8023e4a:	3b01      	subs	r3, #1
 8023e4c:	930c      	str	r3, [sp, #48]	@ 0x30
 8023e4e:	9b2a      	ldr	r3, [sp, #168]	@ 0xa8
 8023e50:	bf08      	it	eq
 8023e52:	4613      	moveq	r3, r2
 8023e54:	9309      	str	r3, [sp, #36]	@ 0x24
 8023e56:	e6a6      	b.n	8023ba6 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x62>
 8023e58:	2900      	cmp	r1, #0
 8023e5a:	f43f af10 	beq.w	8023c7e <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x13a>
 8023e5e:	f819 3003 	ldrb.w	r3, [r9, r3]
 8023e62:	f836 3013 	ldrh.w	r3, [r6, r3, lsl #1]
 8023e66:	930f      	str	r3, [sp, #60]	@ 0x3c
 8023e68:	e709      	b.n	8023c7e <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x13a>
 8023e6a:	f112 0901 	adds.w	r9, r2, #1
 8023e6e:	f53f af7d 	bmi.w	8023d6c <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x228>
 8023e72:	454b      	cmp	r3, r9
 8023e74:	f6ff af7a 	blt.w	8023d6c <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x228>
 8023e78:	f11c 0901 	adds.w	r9, ip, #1
 8023e7c:	f53f af76 	bmi.w	8023d6c <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x228>
 8023e80:	45ce      	cmp	lr, r9
 8023e82:	f6ff af73 	blt.w	8023d6c <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x228>
 8023e86:	9c0d      	ldr	r4, [sp, #52]	@ 0x34
 8023e88:	b21b      	sxth	r3, r3
 8023e8a:	9202      	str	r2, [sp, #8]
 8023e8c:	fa0f f28e 	sxth.w	r2, lr
 8023e90:	9300      	str	r3, [sp, #0]
 8023e92:	4633      	mov	r3, r6
 8023e94:	9201      	str	r2, [sp, #4]
 8023e96:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 8023e98:	e9cd 1405 	strd	r1, r4, [sp, #20]
 8023e9c:	e9cd c003 	strd	ip, r0, [sp, #12]
 8023ea0:	4639      	mov	r1, r7
 8023ea2:	9816      	ldr	r0, [sp, #88]	@ 0x58
 8023ea4:	f7ff fd70 	bl	8023988 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKtssiihhh>
 8023ea8:	e760      	b.n	8023d6c <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x228>
 8023eaa:	9b32      	ldr	r3, [sp, #200]	@ 0xc8
 8023eac:	ea4f 422a 	mov.w	r2, sl, asr #16
 8023eb0:	1429      	asrs	r1, r5, #16
 8023eb2:	9c0b      	ldr	r4, [sp, #44]	@ 0x2c
 8023eb4:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8023eb8:	f3ca 3c03 	ubfx	ip, sl, #12, #4
 8023ebc:	f3c5 3003 	ubfx	r0, r5, #12, #4
 8023ec0:	fb03 2101 	mla	r1, r3, r1, r2
 8023ec4:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 8023ec6:	440a      	add	r2, r1
 8023ec8:	5c61      	ldrb	r1, [r4, r1]
 8023eca:	f836 1011 	ldrh.w	r1, [r6, r1, lsl #1]
 8023ece:	f1bc 0f00 	cmp.w	ip, #0
 8023ed2:	f000 808c 	beq.w	8023fee <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4aa>
 8023ed6:	7857      	ldrb	r7, [r2, #1]
 8023ed8:	f836 4017 	ldrh.w	r4, [r6, r7, lsl #1]
 8023edc:	9413      	str	r4, [sp, #76]	@ 0x4c
 8023ede:	b140      	cbz	r0, 8023ef2 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3ae>
 8023ee0:	18d7      	adds	r7, r2, r3
 8023ee2:	5cd3      	ldrb	r3, [r2, r3]
 8023ee4:	f836 3013 	ldrh.w	r3, [r6, r3, lsl #1]
 8023ee8:	9310      	str	r3, [sp, #64]	@ 0x40
 8023eea:	787b      	ldrb	r3, [r7, #1]
 8023eec:	f836 3013 	ldrh.w	r3, [r6, r3, lsl #1]
 8023ef0:	9314      	str	r3, [sp, #80]	@ 0x50
 8023ef2:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 8023ef4:	fb1c f200 	smulbb	r2, ip, r0
 8023ef8:	9c14      	ldr	r4, [sp, #80]	@ 0x50
 8023efa:	f10e 3eff 	add.w	lr, lr, #4294967295
 8023efe:	041f      	lsls	r7, r3, #16
 8023f00:	f423 63fc 	bic.w	r3, r3, #2016	@ 0x7e0
 8023f04:	10d2      	asrs	r2, r2, #3
 8023f06:	f424 6bfc 	bic.w	fp, r4, #2016	@ 0x7e0
 8023f0a:	f007 67fc 	and.w	r7, r7, #132120576	@ 0x7e00000
 8023f0e:	431f      	orrs	r7, r3
 8023f10:	ebc2 034c 	rsb	r3, r2, ip, lsl #1
 8023f14:	9317      	str	r3, [sp, #92]	@ 0x5c
 8023f16:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 8023f18:	9c17      	ldr	r4, [sp, #92]	@ 0x5c
 8023f1a:	041b      	lsls	r3, r3, #16
 8023f1c:	f003 63fc 	and.w	r3, r3, #132120576	@ 0x7e00000
 8023f20:	ea43 030b 	orr.w	r3, r3, fp
 8023f24:	ea4f 4b01 	mov.w	fp, r1, lsl #16
 8023f28:	f421 61fc 	bic.w	r1, r1, #2016	@ 0x7e0
 8023f2c:	4353      	muls	r3, r2
 8023f2e:	fb04 3707 	mla	r7, r4, r7, r3
 8023f32:	f00b 63fc 	and.w	r3, fp, #132120576	@ 0x7e00000
 8023f36:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 8023f38:	ea43 0b01 	orr.w	fp, r3, r1
 8023f3c:	f1c0 0110 	rsb	r1, r0, #16
 8023f40:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8023f42:	eba1 0c0c 	sub.w	ip, r1, ip
 8023f46:	eb02 0c4c 	add.w	ip, r2, ip, lsl #1
 8023f4a:	ebc2 0240 	rsb	r2, r2, r0, lsl #1
 8023f4e:	fb0c 770b 	mla	r7, ip, fp, r7
 8023f52:	ea4f 4c03 	mov.w	ip, r3, lsl #16
 8023f56:	f423 6bfc 	bic.w	fp, r3, #2016	@ 0x7e0
 8023f5a:	f00c 6cfc 	and.w	ip, ip, #132120576	@ 0x7e00000
 8023f5e:	ea4c 0c0b 	orr.w	ip, ip, fp
 8023f62:	fb02 770c 	mla	r7, r2, ip, r7
 8023f66:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8023f68:	0d79      	lsrs	r1, r7, #21
 8023f6a:	8812      	ldrh	r2, [r2, #0]
 8023f6c:	097f      	lsrs	r7, r7, #5
 8023f6e:	f401 61fc 	and.w	r1, r1, #2016	@ 0x7e0
 8023f72:	f427 67fc 	bic.w	r7, r7, #2016	@ 0x7e0
 8023f76:	430f      	orrs	r7, r1
 8023f78:	1211      	asrs	r1, r2, #8
 8023f7a:	b2bb      	uxth	r3, r7
 8023f7c:	f001 01f8 	and.w	r1, r1, #248	@ 0xf8
 8023f80:	10d7      	asrs	r7, r2, #3
 8023f82:	fb11 f104 	smulbb	r1, r1, r4
 8023f86:	1218      	asrs	r0, r3, #8
 8023f88:	00d2      	lsls	r2, r2, #3
 8023f8a:	f007 07fc 	and.w	r7, r7, #252	@ 0xfc
 8023f8e:	f000 00f8 	and.w	r0, r0, #248	@ 0xf8
 8023f92:	fb17 f704 	smulbb	r7, r7, r4
 8023f96:	b2d2      	uxtb	r2, r2
 8023f98:	fb00 1009 	mla	r0, r0, r9, r1
 8023f9c:	10d9      	asrs	r1, r3, #3
 8023f9e:	fb12 f204 	smulbb	r2, r2, r4
 8023fa2:	00db      	lsls	r3, r3, #3
 8023fa4:	f001 01fc 	and.w	r1, r1, #252	@ 0xfc
 8023fa8:	b280      	uxth	r0, r0
 8023faa:	b2db      	uxtb	r3, r3
 8023fac:	fb01 7109 	mla	r1, r1, r9, r7
 8023fb0:	fb03 2309 	mla	r3, r3, r9, r2
 8023fb4:	1c42      	adds	r2, r0, #1
 8023fb6:	b289      	uxth	r1, r1
 8023fb8:	b29b      	uxth	r3, r3
 8023fba:	eb02 2010 	add.w	r0, r2, r0, lsr #8
 8023fbe:	1c4f      	adds	r7, r1, #1
 8023fc0:	1c5a      	adds	r2, r3, #1
 8023fc2:	eb07 2111 	add.w	r1, r7, r1, lsr #8
 8023fc6:	f400 4078 	and.w	r0, r0, #63488	@ 0xf800
 8023fca:	eb02 2213 	add.w	r2, r2, r3, lsr #8
 8023fce:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8023fd0:	0949      	lsrs	r1, r1, #5
 8023fd2:	f3c2 22c4 	ubfx	r2, r2, #11, #5
 8023fd6:	f401 61fc 	and.w	r1, r1, #2016	@ 0x7e0
 8023fda:	4310      	orrs	r0, r2
 8023fdc:	4308      	orrs	r0, r1
 8023fde:	f823 0b02 	strh.w	r0, [r3], #2
 8023fe2:	930e      	str	r3, [sp, #56]	@ 0x38
 8023fe4:	9b2d      	ldr	r3, [sp, #180]	@ 0xb4
 8023fe6:	449a      	add	sl, r3
 8023fe8:	9b2e      	ldr	r3, [sp, #184]	@ 0xb8
 8023fea:	441d      	add	r5, r3
 8023fec:	e6ed      	b.n	8023dca <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x286>
 8023fee:	2800      	cmp	r0, #0
 8023ff0:	f43f af7f 	beq.w	8023ef2 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3ae>
 8023ff4:	5cd3      	ldrb	r3, [r2, r3]
 8023ff6:	f836 3013 	ldrh.w	r3, [r6, r3, lsl #1]
 8023ffa:	9310      	str	r3, [sp, #64]	@ 0x40
 8023ffc:	e779      	b.n	8023ef2 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3ae>
 8023ffe:	b019      	add	sp, #100	@ 0x64
 8024000:	ecbd 8b08 	vpop	{d8-d11}
 8024004:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08024008 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh>:
 8024008:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 802400c:	e9dd 560a 	ldrd	r5, r6, [sp, #40]	@ 0x28
 8024010:	f9bd e020 	ldrsh.w	lr, [sp, #32]
 8024014:	2e00      	cmp	r6, #0
 8024016:	f9bd 9024 	ldrsh.w	r9, [sp, #36]	@ 0x24
 802401a:	fb06 570e 	mla	r7, r6, lr, r5
 802401e:	f89d 4030 	ldrb.w	r4, [sp, #48]	@ 0x30
 8024022:	f89d c034 	ldrb.w	ip, [sp, #52]	@ 0x34
 8024026:	eb02 0807 	add.w	r8, r2, r7
 802402a:	8808      	ldrh	r0, [r1, #0]
 802402c:	db38      	blt.n	80240a0 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x98>
 802402e:	45b1      	cmp	r9, r6
 8024030:	dd36      	ble.n	80240a0 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x98>
 8024032:	2d00      	cmp	r5, #0
 8024034:	db32      	blt.n	802409c <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x94>
 8024036:	45ae      	cmp	lr, r5
 8024038:	dd30      	ble.n	802409c <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x94>
 802403a:	5dd2      	ldrb	r2, [r2, r7]
 802403c:	f833 7012 	ldrh.w	r7, [r3, r2, lsl #1]
 8024040:	1c6a      	adds	r2, r5, #1
 8024042:	d430      	bmi.n	80240a6 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x9e>
 8024044:	4596      	cmp	lr, r2
 8024046:	dd2e      	ble.n	80240a6 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x9e>
 8024048:	b36c      	cbz	r4, 80240a6 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x9e>
 802404a:	f898 2001 	ldrb.w	r2, [r8, #1]
 802404e:	f833 2012 	ldrh.w	r2, [r3, r2, lsl #1]
 8024052:	3601      	adds	r6, #1
 8024054:	d42b      	bmi.n	80240ae <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0xa6>
 8024056:	45b1      	cmp	r9, r6
 8024058:	dd29      	ble.n	80240ae <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0xa6>
 802405a:	f1bc 0f00 	cmp.w	ip, #0
 802405e:	d028      	beq.n	80240b2 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0xaa>
 8024060:	2d00      	cmp	r5, #0
 8024062:	db22      	blt.n	80240aa <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0xa2>
 8024064:	45ae      	cmp	lr, r5
 8024066:	dd20      	ble.n	80240aa <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0xa2>
 8024068:	f818 600e 	ldrb.w	r6, [r8, lr]
 802406c:	f833 6016 	ldrh.w	r6, [r3, r6, lsl #1]
 8024070:	3501      	adds	r5, #1
 8024072:	d407      	bmi.n	8024084 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x7c>
 8024074:	45ae      	cmp	lr, r5
 8024076:	dd05      	ble.n	8024084 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x7c>
 8024078:	b134      	cbz	r4, 8024088 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x80>
 802407a:	44c6      	add	lr, r8
 802407c:	f89e 0001 	ldrb.w	r0, [lr, #1]
 8024080:	f833 0010 	ldrh.w	r0, [r3, r0, lsl #1]
 8024084:	2c0f      	cmp	r4, #15
 8024086:	d802      	bhi.n	802408e <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x86>
 8024088:	f1bc 0f0f 	cmp.w	ip, #15
 802408c:	d914      	bls.n	80240b8 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0xb0>
 802408e:	4b26      	ldr	r3, [pc, #152]	@ (8024128 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x120>)
 8024090:	f44f 71ec 	mov.w	r1, #472	@ 0x1d8
 8024094:	4a25      	ldr	r2, [pc, #148]	@ (802412c <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x124>)
 8024096:	4826      	ldr	r0, [pc, #152]	@ (8024130 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x128>)
 8024098:	f006 fdd4 	bl	802ac44 <__assert_func>
 802409c:	4607      	mov	r7, r0
 802409e:	e7cf      	b.n	8024040 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x38>
 80240a0:	4602      	mov	r2, r0
 80240a2:	4607      	mov	r7, r0
 80240a4:	e7d5      	b.n	8024052 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x4a>
 80240a6:	4602      	mov	r2, r0
 80240a8:	e7d3      	b.n	8024052 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x4a>
 80240aa:	4606      	mov	r6, r0
 80240ac:	e7e0      	b.n	8024070 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x68>
 80240ae:	4606      	mov	r6, r0
 80240b0:	e7e8      	b.n	8024084 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x7c>
 80240b2:	2c0f      	cmp	r4, #15
 80240b4:	d8eb      	bhi.n	802408e <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x86>
 80240b6:	4606      	mov	r6, r0
 80240b8:	fb14 f30c 	smulbb	r3, r4, ip
 80240bc:	043d      	lsls	r5, r7, #16
 80240be:	ea4f 4e02 	mov.w	lr, r2, lsl #16
 80240c2:	f427 67fc 	bic.w	r7, r7, #2016	@ 0x7e0
 80240c6:	f005 65fc 	and.w	r5, r5, #132120576	@ 0x7e00000
 80240ca:	10db      	asrs	r3, r3, #3
 80240cc:	f00e 6efc 	and.w	lr, lr, #132120576	@ 0x7e00000
 80240d0:	f422 62fc 	bic.w	r2, r2, #2016	@ 0x7e0
 80240d4:	432f      	orrs	r7, r5
 80240d6:	f1cc 0510 	rsb	r5, ip, #16
 80240da:	ea4e 0202 	orr.w	r2, lr, r2
 80240de:	1b2d      	subs	r5, r5, r4
 80240e0:	ebc3 0444 	rsb	r4, r3, r4, lsl #1
 80240e4:	eb03 0545 	add.w	r5, r3, r5, lsl #1
 80240e8:	4354      	muls	r4, r2
 80240ea:	fb05 4507 	mla	r5, r5, r7, r4
 80240ee:	0404      	lsls	r4, r0, #16
 80240f0:	f420 60fc 	bic.w	r0, r0, #2016	@ 0x7e0
 80240f4:	f004 64fc 	and.w	r4, r4, #132120576	@ 0x7e00000
 80240f8:	4320      	orrs	r0, r4
 80240fa:	fb03 5400 	mla	r4, r3, r0, r5
 80240fe:	0430      	lsls	r0, r6, #16
 8024100:	f426 66fc 	bic.w	r6, r6, #2016	@ 0x7e0
 8024104:	ebc3 034c 	rsb	r3, r3, ip, lsl #1
 8024108:	f000 60fc 	and.w	r0, r0, #132120576	@ 0x7e00000
 802410c:	4330      	orrs	r0, r6
 802410e:	fb03 4000 	mla	r0, r3, r0, r4
 8024112:	0d43      	lsrs	r3, r0, #21
 8024114:	0940      	lsrs	r0, r0, #5
 8024116:	f403 63fc 	and.w	r3, r3, #2016	@ 0x7e0
 802411a:	f420 60fc 	bic.w	r0, r0, #2016	@ 0x7e0
 802411e:	4318      	orrs	r0, r3
 8024120:	8008      	strh	r0, [r1, #0]
 8024122:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8024126:	bf00      	nop
 8024128:	0802fed5 	.word	0x0802fed5
 802412c:	0803054b 	.word	0x0803054b
 8024130:	0802ff59 	.word	0x0802ff59

08024134 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 8024134:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8024138:	ed2d 8b0a 	vpush	{d8-d12}
 802413c:	b093      	sub	sp, #76	@ 0x4c
 802413e:	eeb0 aa40 	vmov.f32	s20, s0
 8024142:	eef0 9a60 	vmov.f32	s19, s1
 8024146:	920f      	str	r2, [sp, #60]	@ 0x3c
 8024148:	eeb0 9a41 	vmov.f32	s18, s2
 802414c:	9a2b      	ldr	r2, [sp, #172]	@ 0xac
 802414e:	eeb0 8a62 	vmov.f32	s16, s5
 8024152:	9010      	str	r0, [sp, #64]	@ 0x40
 8024154:	eef0 8a43 	vmov.f32	s17, s6
 8024158:	6850      	ldr	r0, [r2, #4]
 802415a:	eeb0 ca44 	vmov.f32	s24, s8
 802415e:	9108      	str	r1, [sp, #32]
 8024160:	eef0 ba64 	vmov.f32	s23, s9
 8024164:	9306      	str	r3, [sp, #24]
 8024166:	eeb0 ba45 	vmov.f32	s22, s10
 802416a:	6812      	ldr	r2, [r2, #0]
 802416c:	eef7 aa00 	vmov.f32	s21, #112	@ 0x3f800000  1.0
 8024170:	e9dd 132c 	ldrd	r1, r3, [sp, #176]	@ 0xb0
 8024174:	e9dd 4627 	ldrd	r4, r6, [sp, #156]	@ 0x9c
 8024178:	fb00 1303 	mla	r3, r0, r3, r1
 802417c:	eb02 0943 	add.w	r9, r2, r3, lsl #1
 8024180:	9b2e      	ldr	r3, [sp, #184]	@ 0xb8
 8024182:	681b      	ldr	r3, [r3, #0]
 8024184:	9307      	str	r3, [sp, #28]
 8024186:	9b2e      	ldr	r3, [sp, #184]	@ 0xb8
 8024188:	685f      	ldr	r7, [r3, #4]
 802418a:	3704      	adds	r7, #4
 802418c:	9b08      	ldr	r3, [sp, #32]
 802418e:	2b00      	cmp	r3, #0
 8024190:	dc03      	bgt.n	802419a <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x66>
 8024192:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8024194:	2b00      	cmp	r3, #0
 8024196:	f340 81b2 	ble.w	80244fe <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3ca>
 802419a:	9b2e      	ldr	r3, [sp, #184]	@ 0xb8
 802419c:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 80241a0:	f9b3 200c 	ldrsh.w	r2, [r3, #12]
 80241a4:	1e48      	subs	r0, r1, #1
 80241a6:	f102 3cff 	add.w	ip, r2, #4294967295
 80241aa:	9b06      	ldr	r3, [sp, #24]
 80241ac:	2b00      	cmp	r3, #0
 80241ae:	f340 80a9 	ble.w	8024304 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1d0>
 80241b2:	ea5f 4e24 	movs.w	lr, r4, asr #16
 80241b6:	ea4f 4326 	mov.w	r3, r6, asr #16
 80241ba:	d406      	bmi.n	80241ca <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x96>
 80241bc:	4586      	cmp	lr, r0
 80241be:	da04      	bge.n	80241ca <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x96>
 80241c0:	2b00      	cmp	r3, #0
 80241c2:	db02      	blt.n	80241ca <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x96>
 80241c4:	4563      	cmp	r3, ip
 80241c6:	f2c0 809e 	blt.w	8024306 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1d2>
 80241ca:	f11e 0e01 	adds.w	lr, lr, #1
 80241ce:	f100 808f 	bmi.w	80242f0 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1bc>
 80241d2:	4571      	cmp	r1, lr
 80241d4:	f2c0 808c 	blt.w	80242f0 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1bc>
 80241d8:	3301      	adds	r3, #1
 80241da:	f100 8089 	bmi.w	80242f0 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1bc>
 80241de:	429a      	cmp	r2, r3
 80241e0:	f2c0 8086 	blt.w	80242f0 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1bc>
 80241e4:	f8dd b018 	ldr.w	fp, [sp, #24]
 80241e8:	46c8      	mov	r8, r9
 80241ea:	f1bb 0f00 	cmp.w	fp, #0
 80241ee:	f340 80a6 	ble.w	802433e <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x20a>
 80241f2:	9a2e      	ldr	r2, [sp, #184]	@ 0xb8
 80241f4:	ea4f 4c26 	mov.w	ip, r6, asr #16
 80241f8:	9b2e      	ldr	r3, [sp, #184]	@ 0xb8
 80241fa:	f3c4 3003 	ubfx	r0, r4, #12, #4
 80241fe:	f8d2 e00c 	ldr.w	lr, [r2, #12]
 8024202:	1422      	asrs	r2, r4, #16
 8024204:	f3c6 3103 	ubfx	r1, r6, #12, #4
 8024208:	689b      	ldr	r3, [r3, #8]
 802420a:	f100 80e3 	bmi.w	80243d4 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2a0>
 802420e:	f103 3aff 	add.w	sl, r3, #4294967295
 8024212:	4552      	cmp	r2, sl
 8024214:	f280 80de 	bge.w	80243d4 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2a0>
 8024218:	f1bc 0f00 	cmp.w	ip, #0
 802421c:	f2c0 80da 	blt.w	80243d4 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2a0>
 8024220:	f10e 3aff 	add.w	sl, lr, #4294967295
 8024224:	45d4      	cmp	ip, sl
 8024226:	f280 80d5 	bge.w	80243d4 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2a0>
 802422a:	b21b      	sxth	r3, r3
 802422c:	9d07      	ldr	r5, [sp, #28]
 802422e:	fb0c 2203 	mla	r2, ip, r3, r2
 8024232:	eb05 0a02 	add.w	sl, r5, r2
 8024236:	5caa      	ldrb	r2, [r5, r2]
 8024238:	f837 e012 	ldrh.w	lr, [r7, r2, lsl #1]
 802423c:	2800      	cmp	r0, #0
 802423e:	f000 80c0 	beq.w	80243c2 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x28e>
 8024242:	f89a 2001 	ldrb.w	r2, [sl, #1]
 8024246:	f837 2012 	ldrh.w	r2, [r7, r2, lsl #1]
 802424a:	920b      	str	r2, [sp, #44]	@ 0x2c
 802424c:	b151      	cbz	r1, 8024264 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x130>
 802424e:	eb0a 0203 	add.w	r2, sl, r3
 8024252:	f81a 3003 	ldrb.w	r3, [sl, r3]
 8024256:	f837 3013 	ldrh.w	r3, [r7, r3, lsl #1]
 802425a:	9309      	str	r3, [sp, #36]	@ 0x24
 802425c:	7853      	ldrb	r3, [r2, #1]
 802425e:	f837 3013 	ldrh.w	r3, [r7, r3, lsl #1]
 8024262:	930c      	str	r3, [sp, #48]	@ 0x30
 8024264:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8024266:	fb10 f201 	smulbb	r2, r0, r1
 802426a:	9d0c      	ldr	r5, [sp, #48]	@ 0x30
 802426c:	ea4f 4c03 	mov.w	ip, r3, lsl #16
 8024270:	f423 63fc 	bic.w	r3, r3, #2016	@ 0x7e0
 8024274:	f425 65fc 	bic.w	r5, r5, #2016	@ 0x7e0
 8024278:	10d2      	asrs	r2, r2, #3
 802427a:	f00c 6cfc 	and.w	ip, ip, #132120576	@ 0x7e00000
 802427e:	ebc2 0a40 	rsb	sl, r2, r0, lsl #1
 8024282:	ea4c 0c03 	orr.w	ip, ip, r3
 8024286:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8024288:	041b      	lsls	r3, r3, #16
 802428a:	f003 63fc 	and.w	r3, r3, #132120576	@ 0x7e00000
 802428e:	432b      	orrs	r3, r5
 8024290:	4353      	muls	r3, r2
 8024292:	fb0a 330c 	mla	r3, sl, ip, r3
 8024296:	ea4f 4c0e 	mov.w	ip, lr, lsl #16
 802429a:	f42e 6efc 	bic.w	lr, lr, #2016	@ 0x7e0
 802429e:	f00c 6cfc 	and.w	ip, ip, #132120576	@ 0x7e00000
 80242a2:	ea4c 0e0e 	orr.w	lr, ip, lr
 80242a6:	f1c1 0c10 	rsb	ip, r1, #16
 80242aa:	ebac 0c00 	sub.w	ip, ip, r0
 80242ae:	eb02 0c4c 	add.w	ip, r2, ip, lsl #1
 80242b2:	ebc2 0241 	rsb	r2, r2, r1, lsl #1
 80242b6:	fb0c 3c0e 	mla	ip, ip, lr, r3
 80242ba:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80242bc:	0418      	lsls	r0, r3, #16
 80242be:	f423 63fc 	bic.w	r3, r3, #2016	@ 0x7e0
 80242c2:	f000 60fc 	and.w	r0, r0, #132120576	@ 0x7e00000
 80242c6:	4318      	orrs	r0, r3
 80242c8:	fb02 c200 	mla	r2, r2, r0, ip
 80242cc:	0d53      	lsrs	r3, r2, #21
 80242ce:	0952      	lsrs	r2, r2, #5
 80242d0:	f403 63fc 	and.w	r3, r3, #2016	@ 0x7e0
 80242d4:	f422 62fc 	bic.w	r2, r2, #2016	@ 0x7e0
 80242d8:	431a      	orrs	r2, r3
 80242da:	f8a8 2000 	strh.w	r2, [r8]
 80242de:	9b29      	ldr	r3, [sp, #164]	@ 0xa4
 80242e0:	f108 0802 	add.w	r8, r8, #2
 80242e4:	f10b 3bff 	add.w	fp, fp, #4294967295
 80242e8:	441c      	add	r4, r3
 80242ea:	9b2a      	ldr	r3, [sp, #168]	@ 0xa8
 80242ec:	441e      	add	r6, r3
 80242ee:	e77c      	b.n	80241ea <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xb6>
 80242f0:	9b29      	ldr	r3, [sp, #164]	@ 0xa4
 80242f2:	f109 0902 	add.w	r9, r9, #2
 80242f6:	441c      	add	r4, r3
 80242f8:	9b2a      	ldr	r3, [sp, #168]	@ 0xa8
 80242fa:	441e      	add	r6, r3
 80242fc:	9b06      	ldr	r3, [sp, #24]
 80242fe:	3b01      	subs	r3, #1
 8024300:	9306      	str	r3, [sp, #24]
 8024302:	e752      	b.n	80241aa <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x76>
 8024304:	d020      	beq.n	8024348 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x214>
 8024306:	9b06      	ldr	r3, [sp, #24]
 8024308:	9829      	ldr	r0, [sp, #164]	@ 0xa4
 802430a:	3b01      	subs	r3, #1
 802430c:	fb00 4003 	mla	r0, r0, r3, r4
 8024310:	1400      	asrs	r0, r0, #16
 8024312:	f53f af67 	bmi.w	80241e4 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xb0>
 8024316:	3901      	subs	r1, #1
 8024318:	4288      	cmp	r0, r1
 802431a:	f6bf af63 	bge.w	80241e4 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xb0>
 802431e:	992a      	ldr	r1, [sp, #168]	@ 0xa8
 8024320:	fb01 6303 	mla	r3, r1, r3, r6
 8024324:	141b      	asrs	r3, r3, #16
 8024326:	f53f af5d 	bmi.w	80241e4 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xb0>
 802432a:	3a01      	subs	r2, #1
 802432c:	4293      	cmp	r3, r2
 802432e:	f6bf af59 	bge.w	80241e4 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xb0>
 8024332:	f8dd 8018 	ldr.w	r8, [sp, #24]
 8024336:	46ca      	mov	sl, r9
 8024338:	f1b8 0f00 	cmp.w	r8, #0
 802433c:	dc67      	bgt.n	802440e <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2da>
 802433e:	9b06      	ldr	r3, [sp, #24]
 8024340:	ea23 75e3 	bic.w	r5, r3, r3, asr #31
 8024344:	eb09 0945 	add.w	r9, r9, r5, lsl #1
 8024348:	9b08      	ldr	r3, [sp, #32]
 802434a:	2b00      	cmp	r3, #0
 802434c:	f340 80d7 	ble.w	80244fe <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3ca>
 8024350:	ee3a aa0c 	vadd.f32	s20, s20, s24
 8024354:	9b26      	ldr	r3, [sp, #152]	@ 0x98
 8024356:	ee79 9aab 	vadd.f32	s19, s19, s23
 802435a:	eef0 6a48 	vmov.f32	s13, s16
 802435e:	eeca 7a8a 	vdiv.f32	s15, s21, s20
 8024362:	ee39 9a0b 	vadd.f32	s18, s18, s22
 8024366:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 802436a:	ee16 4a90 	vmov	r4, s13
 802436e:	eef0 6a68 	vmov.f32	s13, s17
 8024372:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 8024376:	ee16 6a90 	vmov	r6, s13
 802437a:	ee29 7aa7 	vmul.f32	s14, s19, s15
 802437e:	ee69 7a27 	vmul.f32	s15, s18, s15
 8024382:	ee37 8a48 	vsub.f32	s16, s14, s16
 8024386:	ee77 8ae8 	vsub.f32	s17, s15, s17
 802438a:	eebe 8ac8 	vcvt.s32.f32	s16, s16, #16
 802438e:	eefe 8ac8 	vcvt.s32.f32	s17, s17, #16
 8024392:	ee18 2a10 	vmov	r2, s16
 8024396:	eeb0 8a47 	vmov.f32	s16, s14
 802439a:	fb92 f3f3 	sdiv	r3, r2, r3
 802439e:	ee18 2a90 	vmov	r2, s17
 80243a2:	9329      	str	r3, [sp, #164]	@ 0xa4
 80243a4:	9b26      	ldr	r3, [sp, #152]	@ 0x98
 80243a6:	eef0 8a67 	vmov.f32	s17, s15
 80243aa:	fb92 f3f3 	sdiv	r3, r2, r3
 80243ae:	932a      	str	r3, [sp, #168]	@ 0xa8
 80243b0:	9b08      	ldr	r3, [sp, #32]
 80243b2:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 80243b4:	3b01      	subs	r3, #1
 80243b6:	9308      	str	r3, [sp, #32]
 80243b8:	9b26      	ldr	r3, [sp, #152]	@ 0x98
 80243ba:	bf08      	it	eq
 80243bc:	4613      	moveq	r3, r2
 80243be:	9306      	str	r3, [sp, #24]
 80243c0:	e6e4      	b.n	802418c <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x58>
 80243c2:	2900      	cmp	r1, #0
 80243c4:	f43f af4e 	beq.w	8024264 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x130>
 80243c8:	f81a 3003 	ldrb.w	r3, [sl, r3]
 80243cc:	f837 3013 	ldrh.w	r3, [r7, r3, lsl #1]
 80243d0:	9309      	str	r3, [sp, #36]	@ 0x24
 80243d2:	e747      	b.n	8024264 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x130>
 80243d4:	f112 0a01 	adds.w	sl, r2, #1
 80243d8:	d481      	bmi.n	80242de <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1aa>
 80243da:	4553      	cmp	r3, sl
 80243dc:	f6ff af7f 	blt.w	80242de <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1aa>
 80243e0:	f11c 0a01 	adds.w	sl, ip, #1
 80243e4:	f53f af7b 	bmi.w	80242de <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1aa>
 80243e8:	45d6      	cmp	lr, sl
 80243ea:	f6ff af78 	blt.w	80242de <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1aa>
 80243ee:	b21b      	sxth	r3, r3
 80243f0:	e9cd 2c02 	strd	r2, ip, [sp, #8]
 80243f4:	fa0f f28e 	sxth.w	r2, lr
 80243f8:	9300      	str	r3, [sp, #0]
 80243fa:	463b      	mov	r3, r7
 80243fc:	9201      	str	r2, [sp, #4]
 80243fe:	9a07      	ldr	r2, [sp, #28]
 8024400:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8024404:	4641      	mov	r1, r8
 8024406:	9810      	ldr	r0, [sp, #64]	@ 0x40
 8024408:	f7ff fdfe 	bl	8024008 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh>
 802440c:	e767      	b.n	80242de <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1aa>
 802440e:	9b2e      	ldr	r3, [sp, #184]	@ 0xb8
 8024410:	1422      	asrs	r2, r4, #16
 8024412:	1431      	asrs	r1, r6, #16
 8024414:	9d07      	ldr	r5, [sp, #28]
 8024416:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 802441a:	f3c4 3e03 	ubfx	lr, r4, #12, #4
 802441e:	f3c6 3003 	ubfx	r0, r6, #12, #4
 8024422:	fb03 2101 	mla	r1, r3, r1, r2
 8024426:	9a07      	ldr	r2, [sp, #28]
 8024428:	440a      	add	r2, r1
 802442a:	5c69      	ldrb	r1, [r5, r1]
 802442c:	f837 1011 	ldrh.w	r1, [r7, r1, lsl #1]
 8024430:	f1be 0f00 	cmp.w	lr, #0
 8024434:	d05c      	beq.n	80244f0 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3bc>
 8024436:	f892 c001 	ldrb.w	ip, [r2, #1]
 802443a:	f837 501c 	ldrh.w	r5, [r7, ip, lsl #1]
 802443e:	950d      	str	r5, [sp, #52]	@ 0x34
 8024440:	b150      	cbz	r0, 8024458 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x324>
 8024442:	eb02 0c03 	add.w	ip, r2, r3
 8024446:	5cd3      	ldrb	r3, [r2, r3]
 8024448:	f837 3013 	ldrh.w	r3, [r7, r3, lsl #1]
 802444c:	930a      	str	r3, [sp, #40]	@ 0x28
 802444e:	f89c 3001 	ldrb.w	r3, [ip, #1]
 8024452:	f837 3013 	ldrh.w	r3, [r7, r3, lsl #1]
 8024456:	930e      	str	r3, [sp, #56]	@ 0x38
 8024458:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 802445a:	fb1e f200 	smulbb	r2, lr, r0
 802445e:	9d0e      	ldr	r5, [sp, #56]	@ 0x38
 8024460:	f108 38ff 	add.w	r8, r8, #4294967295
 8024464:	ea4f 4c03 	mov.w	ip, r3, lsl #16
 8024468:	f423 63fc 	bic.w	r3, r3, #2016	@ 0x7e0
 802446c:	10d2      	asrs	r2, r2, #3
 802446e:	f425 6bfc 	bic.w	fp, r5, #2016	@ 0x7e0
 8024472:	f00c 6cfc 	and.w	ip, ip, #132120576	@ 0x7e00000
 8024476:	ea4c 0c03 	orr.w	ip, ip, r3
 802447a:	ebc2 034e 	rsb	r3, r2, lr, lsl #1
 802447e:	9311      	str	r3, [sp, #68]	@ 0x44
 8024480:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8024482:	9d11      	ldr	r5, [sp, #68]	@ 0x44
 8024484:	041b      	lsls	r3, r3, #16
 8024486:	f003 63fc 	and.w	r3, r3, #132120576	@ 0x7e00000
 802448a:	ea43 030b 	orr.w	r3, r3, fp
 802448e:	ea4f 4b01 	mov.w	fp, r1, lsl #16
 8024492:	f421 61fc 	bic.w	r1, r1, #2016	@ 0x7e0
 8024496:	4353      	muls	r3, r2
 8024498:	fb05 3c0c 	mla	ip, r5, ip, r3
 802449c:	f00b 63fc 	and.w	r3, fp, #132120576	@ 0x7e00000
 80244a0:	ea43 0b01 	orr.w	fp, r3, r1
 80244a4:	f1c0 0110 	rsb	r1, r0, #16
 80244a8:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80244aa:	eba1 0e0e 	sub.w	lr, r1, lr
 80244ae:	eb02 0e4e 	add.w	lr, r2, lr, lsl #1
 80244b2:	ebc2 0240 	rsb	r2, r2, r0, lsl #1
 80244b6:	fb0e cc0b 	mla	ip, lr, fp, ip
 80244ba:	ea4f 4b03 	mov.w	fp, r3, lsl #16
 80244be:	f423 6efc 	bic.w	lr, r3, #2016	@ 0x7e0
 80244c2:	f00b 6bfc 	and.w	fp, fp, #132120576	@ 0x7e00000
 80244c6:	ea4b 0e0e 	orr.w	lr, fp, lr
 80244ca:	fb02 cc0e 	mla	ip, r2, lr, ip
 80244ce:	ea4f 535c 	mov.w	r3, ip, lsr #21
 80244d2:	ea4f 1c5c 	mov.w	ip, ip, lsr #5
 80244d6:	f403 63fc 	and.w	r3, r3, #2016	@ 0x7e0
 80244da:	f42c 6cfc 	bic.w	ip, ip, #2016	@ 0x7e0
 80244de:	ea43 0c0c 	orr.w	ip, r3, ip
 80244e2:	9b29      	ldr	r3, [sp, #164]	@ 0xa4
 80244e4:	441c      	add	r4, r3
 80244e6:	9b2a      	ldr	r3, [sp, #168]	@ 0xa8
 80244e8:	f82a cb02 	strh.w	ip, [sl], #2
 80244ec:	441e      	add	r6, r3
 80244ee:	e723      	b.n	8024338 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x204>
 80244f0:	2800      	cmp	r0, #0
 80244f2:	d0b1      	beq.n	8024458 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x324>
 80244f4:	5cd3      	ldrb	r3, [r2, r3]
 80244f6:	f837 3013 	ldrh.w	r3, [r7, r3, lsl #1]
 80244fa:	930a      	str	r3, [sp, #40]	@ 0x28
 80244fc:	e7ac      	b.n	8024458 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x324>
 80244fe:	b013      	add	sp, #76	@ 0x4c
 8024500:	ecbd 8b0a 	vpop	{d8-d12}
 8024504:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08024508 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh>:
 8024508:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 802450c:	468b      	mov	fp, r1
 802450e:	8809      	ldrh	r1, [r1, #0]
 8024510:	b089      	sub	sp, #36	@ 0x24
 8024512:	10cd      	asrs	r5, r1, #3
 8024514:	ea4f 2921 	mov.w	r9, r1, asr #8
 8024518:	f9bd e048 	ldrsh.w	lr, [sp, #72]	@ 0x48
 802451c:	00c9      	lsls	r1, r1, #3
 802451e:	f005 05fc 	and.w	r5, r5, #252	@ 0xfc
 8024522:	f009 09f8 	and.w	r9, r9, #248	@ 0xf8
 8024526:	9202      	str	r2, [sp, #8]
 8024528:	b2c9      	uxtb	r1, r1
 802452a:	9500      	str	r5, [sp, #0]
 802452c:	f9bd a04c 	ldrsh.w	sl, [sp, #76]	@ 0x4c
 8024530:	9101      	str	r1, [sp, #4]
 8024532:	9900      	ldr	r1, [sp, #0]
 8024534:	f89d 7058 	ldrb.w	r7, [sp, #88]	@ 0x58
 8024538:	0209      	lsls	r1, r1, #8
 802453a:	f89d 005c 	ldrb.w	r0, [sp, #92]	@ 0x5c
 802453e:	f89d c060 	ldrb.w	ip, [sp, #96]	@ 0x60
 8024542:	ea41 4109 	orr.w	r1, r1, r9, lsl #16
 8024546:	e9dd 6414 	ldrd	r6, r4, [sp, #80]	@ 0x50
 802454a:	fb04 650e 	mla	r5, r4, lr, r6
 802454e:	2c00      	cmp	r4, #0
 8024550:	eb02 0805 	add.w	r8, r2, r5
 8024554:	9a01      	ldr	r2, [sp, #4]
 8024556:	ea41 0102 	orr.w	r1, r1, r2
 802455a:	9107      	str	r1, [sp, #28]
 802455c:	db43      	blt.n	80245e6 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh+0xde>
 802455e:	45a2      	cmp	sl, r4
 8024560:	dd41      	ble.n	80245e6 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh+0xde>
 8024562:	2e00      	cmp	r6, #0
 8024564:	db3d      	blt.n	80245e2 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh+0xda>
 8024566:	45b6      	cmp	lr, r6
 8024568:	dd3b      	ble.n	80245e2 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh+0xda>
 802456a:	9a02      	ldr	r2, [sp, #8]
 802456c:	5d55      	ldrb	r5, [r2, r5]
 802456e:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8024572:	441d      	add	r5, r3
 8024574:	1c72      	adds	r2, r6, #1
 8024576:	d439      	bmi.n	80245ec <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh+0xe4>
 8024578:	4596      	cmp	lr, r2
 802457a:	dd37      	ble.n	80245ec <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh+0xe4>
 802457c:	2f00      	cmp	r7, #0
 802457e:	d035      	beq.n	80245ec <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh+0xe4>
 8024580:	f898 1001 	ldrb.w	r1, [r8, #1]
 8024584:	eb01 0141 	add.w	r1, r1, r1, lsl #1
 8024588:	4419      	add	r1, r3
 802458a:	3401      	adds	r4, #1
 802458c:	d432      	bmi.n	80245f4 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh+0xec>
 802458e:	45a2      	cmp	sl, r4
 8024590:	dd30      	ble.n	80245f4 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh+0xec>
 8024592:	b378      	cbz	r0, 80245f4 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh+0xec>
 8024594:	2e00      	cmp	r6, #0
 8024596:	db2b      	blt.n	80245f0 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh+0xe8>
 8024598:	45b6      	cmp	lr, r6
 802459a:	dd29      	ble.n	80245f0 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh+0xe8>
 802459c:	f818 400e 	ldrb.w	r4, [r8, lr]
 80245a0:	eb04 0444 	add.w	r4, r4, r4, lsl #1
 80245a4:	441c      	add	r4, r3
 80245a6:	3601      	adds	r6, #1
 80245a8:	d427      	bmi.n	80245fa <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh+0xf2>
 80245aa:	45b6      	cmp	lr, r6
 80245ac:	dd25      	ble.n	80245fa <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh+0xf2>
 80245ae:	b327      	cbz	r7, 80245fa <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh+0xf2>
 80245b0:	44c6      	add	lr, r8
 80245b2:	f89e 2001 	ldrb.w	r2, [lr, #1]
 80245b6:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 80245ba:	4413      	add	r3, r2
 80245bc:	782a      	ldrb	r2, [r5, #0]
 80245be:	2f0f      	cmp	r7, #15
 80245c0:	9202      	str	r2, [sp, #8]
 80245c2:	780a      	ldrb	r2, [r1, #0]
 80245c4:	9203      	str	r2, [sp, #12]
 80245c6:	7822      	ldrb	r2, [r4, #0]
 80245c8:	9204      	str	r2, [sp, #16]
 80245ca:	781a      	ldrb	r2, [r3, #0]
 80245cc:	9205      	str	r2, [sp, #20]
 80245ce:	d801      	bhi.n	80245d4 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh+0xcc>
 80245d0:	280f      	cmp	r0, #15
 80245d2:	d914      	bls.n	80245fe <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh+0xf6>
 80245d4:	4b3f      	ldr	r3, [pc, #252]	@ (80246d4 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh+0x1cc>)
 80245d6:	f44f 71fb 	mov.w	r1, #502	@ 0x1f6
 80245da:	4a3f      	ldr	r2, [pc, #252]	@ (80246d8 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh+0x1d0>)
 80245dc:	483f      	ldr	r0, [pc, #252]	@ (80246dc <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh+0x1d4>)
 80245de:	f006 fb31 	bl	802ac44 <__assert_func>
 80245e2:	ad07      	add	r5, sp, #28
 80245e4:	e7c6      	b.n	8024574 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh+0x6c>
 80245e6:	a907      	add	r1, sp, #28
 80245e8:	460d      	mov	r5, r1
 80245ea:	e7ce      	b.n	802458a <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh+0x82>
 80245ec:	a907      	add	r1, sp, #28
 80245ee:	e7cc      	b.n	802458a <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh+0x82>
 80245f0:	ac07      	add	r4, sp, #28
 80245f2:	e7d8      	b.n	80245a6 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh+0x9e>
 80245f4:	ab07      	add	r3, sp, #28
 80245f6:	461c      	mov	r4, r3
 80245f8:	e7e0      	b.n	80245bc <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh+0xb4>
 80245fa:	ab07      	add	r3, sp, #28
 80245fc:	e7de      	b.n	80245bc <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh+0xb4>
 80245fe:	b2ba      	uxth	r2, r7
 8024600:	f891 8002 	ldrb.w	r8, [r1, #2]
 8024604:	b280      	uxth	r0, r0
 8024606:	7849      	ldrb	r1, [r1, #1]
 8024608:	78ae      	ldrb	r6, [r5, #2]
 802460a:	fa1f f78c 	uxth.w	r7, ip
 802460e:	fb02 fa00 	mul.w	sl, r2, r0
 8024612:	0112      	lsls	r2, r2, #4
 8024614:	786d      	ldrb	r5, [r5, #1]
 8024616:	ea6f 0c0c 	mvn.w	ip, ip
 802461a:	ebca 1000 	rsb	r0, sl, r0, lsl #4
 802461e:	f5c2 7e80 	rsb	lr, r2, #256	@ 0x100
 8024622:	eba2 020a 	sub.w	r2, r2, sl
 8024626:	fa5f fc8c 	uxtb.w	ip, ip
 802462a:	b280      	uxth	r0, r0
 802462c:	fb19 f90c 	smulbb	r9, r9, ip
 8024630:	b292      	uxth	r2, r2
 8024632:	ebae 0e00 	sub.w	lr, lr, r0
 8024636:	4351      	muls	r1, r2
 8024638:	fa1f fe8e 	uxth.w	lr, lr
 802463c:	fb02 f808 	mul.w	r8, r2, r8
 8024640:	fb0e 1505 	mla	r5, lr, r5, r1
 8024644:	7861      	ldrb	r1, [r4, #1]
 8024646:	fb0e 8806 	mla	r8, lr, r6, r8
 802464a:	78a6      	ldrb	r6, [r4, #2]
 802464c:	fb00 5501 	mla	r5, r0, r1, r5
 8024650:	7859      	ldrb	r1, [r3, #1]
 8024652:	fb00 8806 	mla	r8, r0, r6, r8
 8024656:	789e      	ldrb	r6, [r3, #2]
 8024658:	9b00      	ldr	r3, [sp, #0]
 802465a:	fb0a 5101 	mla	r1, sl, r1, r5
 802465e:	fb0a 8606 	mla	r6, sl, r6, r8
 8024662:	fb13 f50c 	smulbb	r5, r3, ip
 8024666:	9b03      	ldr	r3, [sp, #12]
 8024668:	f3c6 2607 	ubfx	r6, r6, #8, #8
 802466c:	f3c1 2107 	ubfx	r1, r1, #8, #8
 8024670:	435a      	muls	r2, r3
 8024672:	9b02      	ldr	r3, [sp, #8]
 8024674:	fb06 9607 	mla	r6, r6, r7, r9
 8024678:	fb0e 2203 	mla	r2, lr, r3, r2
 802467c:	9b04      	ldr	r3, [sp, #16]
 802467e:	b2b6      	uxth	r6, r6
 8024680:	fb01 5107 	mla	r1, r1, r7, r5
 8024684:	fb00 2003 	mla	r0, r0, r3, r2
 8024688:	9b05      	ldr	r3, [sp, #20]
 802468a:	f106 0901 	add.w	r9, r6, #1
 802468e:	b289      	uxth	r1, r1
 8024690:	fb0a 0a03 	mla	sl, sl, r3, r0
 8024694:	9b01      	ldr	r3, [sp, #4]
 8024696:	eb09 2616 	add.w	r6, r9, r6, lsr #8
 802469a:	1c4d      	adds	r5, r1, #1
 802469c:	fb13 fc0c 	smulbb	ip, r3, ip
 80246a0:	f3ca 2a07 	ubfx	sl, sl, #8, #8
 80246a4:	f406 4978 	and.w	r9, r6, #63488	@ 0xf800
 80246a8:	eb05 2111 	add.w	r1, r5, r1, lsr #8
 80246ac:	fb0a c707 	mla	r7, sl, r7, ip
 80246b0:	0949      	lsrs	r1, r1, #5
 80246b2:	b2bf      	uxth	r7, r7
 80246b4:	f401 61fc 	and.w	r1, r1, #2016	@ 0x7e0
 80246b8:	1c7e      	adds	r6, r7, #1
 80246ba:	eb06 2617 	add.w	r6, r6, r7, lsr #8
 80246be:	f3c6 26c4 	ubfx	r6, r6, #11, #5
 80246c2:	ea46 0609 	orr.w	r6, r6, r9
 80246c6:	430e      	orrs	r6, r1
 80246c8:	f8ab 6000 	strh.w	r6, [fp]
 80246cc:	b009      	add	sp, #36	@ 0x24
 80246ce:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80246d2:	bf00      	nop
 80246d4:	0802fed5 	.word	0x0802fed5
 80246d8:	080304a2 	.word	0x080304a2
 80246dc:	0802ff59 	.word	0x0802ff59

080246e0 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 80246e0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80246e4:	ed2d 8b08 	vpush	{d8-d11}
 80246e8:	b095      	sub	sp, #84	@ 0x54
 80246ea:	eeb0 aa40 	vmov.f32	s20, s0
 80246ee:	eef0 9a60 	vmov.f32	s19, s1
 80246f2:	9212      	str	r2, [sp, #72]	@ 0x48
 80246f4:	eeb0 9a41 	vmov.f32	s18, s2
 80246f8:	9a2b      	ldr	r2, [sp, #172]	@ 0xac
 80246fa:	eeb0 8a62 	vmov.f32	s16, s5
 80246fe:	9309      	str	r3, [sp, #36]	@ 0x24
 8024700:	eef0 8a43 	vmov.f32	s17, s6
 8024704:	f89d 30bc 	ldrb.w	r3, [sp, #188]	@ 0xbc
 8024708:	eef0 ba44 	vmov.f32	s23, s8
 802470c:	9013      	str	r0, [sp, #76]	@ 0x4c
 802470e:	eeb0 ba64 	vmov.f32	s22, s9
 8024712:	930f      	str	r3, [sp, #60]	@ 0x3c
 8024714:	eef0 aa45 	vmov.f32	s21, s10
 8024718:	6850      	ldr	r0, [r2, #4]
 802471a:	910e      	str	r1, [sp, #56]	@ 0x38
 802471c:	6812      	ldr	r2, [r2, #0]
 802471e:	e9dd 132c 	ldrd	r1, r3, [sp, #176]	@ 0xb0
 8024722:	fb00 1303 	mla	r3, r0, r3, r1
 8024726:	eb02 0343 	add.w	r3, r2, r3, lsl #1
 802472a:	930a      	str	r3, [sp, #40]	@ 0x28
 802472c:	9b2e      	ldr	r3, [sp, #184]	@ 0xb8
 802472e:	681b      	ldr	r3, [r3, #0]
 8024730:	930d      	str	r3, [sp, #52]	@ 0x34
 8024732:	9b2e      	ldr	r3, [sp, #184]	@ 0xb8
 8024734:	685c      	ldr	r4, [r3, #4]
 8024736:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8024738:	3404      	adds	r4, #4
 802473a:	43db      	mvns	r3, r3
 802473c:	b2db      	uxtb	r3, r3
 802473e:	930b      	str	r3, [sp, #44]	@ 0x2c
 8024740:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8024742:	2b00      	cmp	r3, #0
 8024744:	dc03      	bgt.n	802474e <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6e>
 8024746:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 8024748:	2b00      	cmp	r3, #0
 802474a:	f340 8255 	ble.w	8024bf8 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x518>
 802474e:	9b2e      	ldr	r3, [sp, #184]	@ 0xb8
 8024750:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 8024754:	f9b3 200c 	ldrsh.w	r2, [r3, #12]
 8024758:	1e48      	subs	r0, r1, #1
 802475a:	1e55      	subs	r5, r2, #1
 802475c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 802475e:	2b00      	cmp	r3, #0
 8024760:	f340 80f9 	ble.w	8024956 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x276>
 8024764:	9e27      	ldr	r6, [sp, #156]	@ 0x9c
 8024766:	9b28      	ldr	r3, [sp, #160]	@ 0xa0
 8024768:	1436      	asrs	r6, r6, #16
 802476a:	ea4f 4323 	mov.w	r3, r3, asr #16
 802476e:	d406      	bmi.n	802477e <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x9e>
 8024770:	4286      	cmp	r6, r0
 8024772:	da04      	bge.n	802477e <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x9e>
 8024774:	2b00      	cmp	r3, #0
 8024776:	db02      	blt.n	802477e <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x9e>
 8024778:	42ab      	cmp	r3, r5
 802477a:	f2c0 80ed 	blt.w	8024958 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x278>
 802477e:	3601      	adds	r6, #1
 8024780:	f100 80da 	bmi.w	8024938 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x258>
 8024784:	42b1      	cmp	r1, r6
 8024786:	f2c0 80d7 	blt.w	8024938 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x258>
 802478a:	3301      	adds	r3, #1
 802478c:	f100 80d4 	bmi.w	8024938 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x258>
 8024790:	429a      	cmp	r2, r3
 8024792:	f2c0 80d1 	blt.w	8024938 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x258>
 8024796:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8024798:	9311      	str	r3, [sp, #68]	@ 0x44
 802479a:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 802479c:	930c      	str	r3, [sp, #48]	@ 0x30
 802479e:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 80247a0:	2b00      	cmp	r3, #0
 80247a2:	f340 80fa 	ble.w	802499a <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2ba>
 80247a6:	982e      	ldr	r0, [sp, #184]	@ 0xb8
 80247a8:	9b28      	ldr	r3, [sp, #160]	@ 0xa0
 80247aa:	9a28      	ldr	r2, [sp, #160]	@ 0xa0
 80247ac:	68c6      	ldr	r6, [r0, #12]
 80247ae:	141d      	asrs	r5, r3, #16
 80247b0:	9827      	ldr	r0, [sp, #156]	@ 0x9c
 80247b2:	f3c2 3103 	ubfx	r1, r2, #12, #4
 80247b6:	9b27      	ldr	r3, [sp, #156]	@ 0x9c
 80247b8:	9a2e      	ldr	r2, [sp, #184]	@ 0xb8
 80247ba:	1400      	asrs	r0, r0, #16
 80247bc:	f3c3 3303 	ubfx	r3, r3, #12, #4
 80247c0:	6892      	ldr	r2, [r2, #8]
 80247c2:	f100 813e 	bmi.w	8024a42 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x362>
 80247c6:	1e57      	subs	r7, r2, #1
 80247c8:	42b8      	cmp	r0, r7
 80247ca:	f280 813a 	bge.w	8024a42 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x362>
 80247ce:	2d00      	cmp	r5, #0
 80247d0:	f2c0 8137 	blt.w	8024a42 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x362>
 80247d4:	1e77      	subs	r7, r6, #1
 80247d6:	42bd      	cmp	r5, r7
 80247d8:	f280 8133 	bge.w	8024a42 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x362>
 80247dc:	b212      	sxth	r2, r2
 80247de:	fb05 0002 	mla	r0, r5, r2, r0
 80247e2:	9d0d      	ldr	r5, [sp, #52]	@ 0x34
 80247e4:	f815 a000 	ldrb.w	sl, [r5, r0]
 80247e8:	182e      	adds	r6, r5, r0
 80247ea:	eb0a 0a4a 	add.w	sl, sl, sl, lsl #1
 80247ee:	eb04 050a 	add.w	r5, r4, sl
 80247f2:	2b00      	cmp	r3, #0
 80247f4:	f000 8117 	beq.w	8024a26 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x346>
 80247f8:	f896 c001 	ldrb.w	ip, [r6, #1]
 80247fc:	eb0c 0c4c 	add.w	ip, ip, ip, lsl #1
 8024800:	44a4      	add	ip, r4
 8024802:	2900      	cmp	r1, #0
 8024804:	f000 8117 	beq.w	8024a36 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x356>
 8024808:	18b0      	adds	r0, r6, r2
 802480a:	5cb2      	ldrb	r2, [r6, r2]
 802480c:	7840      	ldrb	r0, [r0, #1]
 802480e:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 8024812:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 8024816:	4422      	add	r2, r4
 8024818:	4420      	add	r0, r4
 802481a:	b29b      	uxth	r3, r3
 802481c:	f89c 7002 	ldrb.w	r7, [ip, #2]
 8024820:	b289      	uxth	r1, r1
 8024822:	f895 b002 	ldrb.w	fp, [r5, #2]
 8024826:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8024828:	fb03 f901 	mul.w	r9, r3, r1
 802482c:	011b      	lsls	r3, r3, #4
 802482e:	f8b6 e000 	ldrh.w	lr, [r6]
 8024832:	ebc9 1101 	rsb	r1, r9, r1, lsl #4
 8024836:	f5c3 7880 	rsb	r8, r3, #256	@ 0x100
 802483a:	eba3 0309 	sub.w	r3, r3, r9
 802483e:	f8bd 603c 	ldrh.w	r6, [sp, #60]	@ 0x3c
 8024842:	b289      	uxth	r1, r1
 8024844:	f814 a00a 	ldrb.w	sl, [r4, sl]
 8024848:	b29b      	uxth	r3, r3
 802484a:	eba8 0801 	sub.w	r8, r8, r1
 802484e:	435f      	muls	r7, r3
 8024850:	fa1f f888 	uxth.w	r8, r8
 8024854:	9310      	str	r3, [sp, #64]	@ 0x40
 8024856:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8024858:	fb08 770b 	mla	r7, r8, fp, r7
 802485c:	f892 b002 	ldrb.w	fp, [r2, #2]
 8024860:	fb01 770b 	mla	r7, r1, fp, r7
 8024864:	f890 b002 	ldrb.w	fp, [r0, #2]
 8024868:	fb09 770b 	mla	r7, r9, fp, r7
 802486c:	ea4f 2b2e 	mov.w	fp, lr, asr #8
 8024870:	f00b 0bf8 	and.w	fp, fp, #248	@ 0xf8
 8024874:	f3c7 2707 	ubfx	r7, r7, #8, #8
 8024878:	fb1b fb03 	smulbb	fp, fp, r3
 802487c:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 802487e:	fb07 b706 	mla	r7, r7, r6, fp
 8024882:	f895 b001 	ldrb.w	fp, [r5, #1]
 8024886:	f89c 5001 	ldrb.w	r5, [ip, #1]
 802488a:	f89c c000 	ldrb.w	ip, [ip]
 802488e:	b2bf      	uxth	r7, r7
 8024890:	435d      	muls	r5, r3
 8024892:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8024894:	fb08 550b 	mla	r5, r8, fp, r5
 8024898:	f892 b001 	ldrb.w	fp, [r2, #1]
 802489c:	fb01 550b 	mla	r5, r1, fp, r5
 80248a0:	f890 b001 	ldrb.w	fp, [r0, #1]
 80248a4:	fb09 550b 	mla	r5, r9, fp, r5
 80248a8:	ea4f 0bee 	mov.w	fp, lr, asr #3
 80248ac:	ea4f 0ece 	mov.w	lr, lr, lsl #3
 80248b0:	f00b 0bfc 	and.w	fp, fp, #252	@ 0xfc
 80248b4:	f3c5 2507 	ubfx	r5, r5, #8, #8
 80248b8:	fa5f fe8e 	uxtb.w	lr, lr
 80248bc:	fb1b fb03 	smulbb	fp, fp, r3
 80248c0:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 80248c2:	fb03 f30c 	mul.w	r3, r3, ip
 80248c6:	f892 c000 	ldrb.w	ip, [r2]
 80248ca:	fb05 b506 	mla	r5, r5, r6, fp
 80248ce:	fb08 330a 	mla	r3, r8, sl, r3
 80248d2:	b2ad      	uxth	r5, r5
 80248d4:	fb01 330c 	mla	r3, r1, ip, r3
 80248d8:	f890 c000 	ldrb.w	ip, [r0]
 80248dc:	f105 0b01 	add.w	fp, r5, #1
 80248e0:	fb09 3c0c 	mla	ip, r9, ip, r3
 80248e4:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80248e6:	eb0b 2515 	add.w	r5, fp, r5, lsr #8
 80248ea:	fb1e fe03 	smulbb	lr, lr, r3
 80248ee:	f3cc 2c07 	ubfx	ip, ip, #8, #8
 80248f2:	1c7b      	adds	r3, r7, #1
 80248f4:	096d      	lsrs	r5, r5, #5
 80248f6:	fb0c e606 	mla	r6, ip, r6, lr
 80248fa:	eb03 2717 	add.w	r7, r3, r7, lsr #8
 80248fe:	f405 65fc 	and.w	r5, r5, #2016	@ 0x7e0
 8024902:	b2b6      	uxth	r6, r6
 8024904:	f407 4378 	and.w	r3, r7, #63488	@ 0xf800
 8024908:	1c77      	adds	r7, r6, #1
 802490a:	eb07 2716 	add.w	r7, r7, r6, lsr #8
 802490e:	f3c7 27c4 	ubfx	r7, r7, #11, #5
 8024912:	431f      	orrs	r7, r3
 8024914:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8024916:	433d      	orrs	r5, r7
 8024918:	801d      	strh	r5, [r3, #0]
 802491a:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 802491c:	9a29      	ldr	r2, [sp, #164]	@ 0xa4
 802491e:	3302      	adds	r3, #2
 8024920:	930c      	str	r3, [sp, #48]	@ 0x30
 8024922:	9b27      	ldr	r3, [sp, #156]	@ 0x9c
 8024924:	4413      	add	r3, r2
 8024926:	9a2a      	ldr	r2, [sp, #168]	@ 0xa8
 8024928:	9327      	str	r3, [sp, #156]	@ 0x9c
 802492a:	9b28      	ldr	r3, [sp, #160]	@ 0xa0
 802492c:	4413      	add	r3, r2
 802492e:	9328      	str	r3, [sp, #160]	@ 0xa0
 8024930:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 8024932:	3b01      	subs	r3, #1
 8024934:	9311      	str	r3, [sp, #68]	@ 0x44
 8024936:	e732      	b.n	802479e <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xbe>
 8024938:	9b27      	ldr	r3, [sp, #156]	@ 0x9c
 802493a:	9e29      	ldr	r6, [sp, #164]	@ 0xa4
 802493c:	4433      	add	r3, r6
 802493e:	9e2a      	ldr	r6, [sp, #168]	@ 0xa8
 8024940:	9327      	str	r3, [sp, #156]	@ 0x9c
 8024942:	9b28      	ldr	r3, [sp, #160]	@ 0xa0
 8024944:	4433      	add	r3, r6
 8024946:	9328      	str	r3, [sp, #160]	@ 0xa0
 8024948:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 802494a:	3b01      	subs	r3, #1
 802494c:	9309      	str	r3, [sp, #36]	@ 0x24
 802494e:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8024950:	3302      	adds	r3, #2
 8024952:	930a      	str	r3, [sp, #40]	@ 0x28
 8024954:	e702      	b.n	802475c <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7c>
 8024956:	d027      	beq.n	80249a8 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2c8>
 8024958:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 802495a:	9829      	ldr	r0, [sp, #164]	@ 0xa4
 802495c:	3b01      	subs	r3, #1
 802495e:	9d27      	ldr	r5, [sp, #156]	@ 0x9c
 8024960:	fb00 5003 	mla	r0, r0, r3, r5
 8024964:	1400      	asrs	r0, r0, #16
 8024966:	f53f af16 	bmi.w	8024796 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xb6>
 802496a:	3901      	subs	r1, #1
 802496c:	4288      	cmp	r0, r1
 802496e:	f6bf af12 	bge.w	8024796 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xb6>
 8024972:	992a      	ldr	r1, [sp, #168]	@ 0xa8
 8024974:	9828      	ldr	r0, [sp, #160]	@ 0xa0
 8024976:	fb01 0303 	mla	r3, r1, r3, r0
 802497a:	141b      	asrs	r3, r3, #16
 802497c:	f53f af0b 	bmi.w	8024796 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xb6>
 8024980:	3a01      	subs	r2, #1
 8024982:	4293      	cmp	r3, r2
 8024984:	f6bf af07 	bge.w	8024796 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xb6>
 8024988:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 802498a:	f8bd a03c 	ldrh.w	sl, [sp, #60]	@ 0x3c
 802498e:	9311      	str	r3, [sp, #68]	@ 0x44
 8024990:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8024992:	930c      	str	r3, [sp, #48]	@ 0x30
 8024994:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 8024996:	2b00      	cmp	r3, #0
 8024998:	dc70      	bgt.n	8024a7c <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x39c>
 802499a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 802499c:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 802499e:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 80249a2:	eb02 0343 	add.w	r3, r2, r3, lsl #1
 80249a6:	930a      	str	r3, [sp, #40]	@ 0x28
 80249a8:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80249aa:	2b00      	cmp	r3, #0
 80249ac:	f340 8124 	ble.w	8024bf8 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x518>
 80249b0:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 80249b4:	9b26      	ldr	r3, [sp, #152]	@ 0x98
 80249b6:	ee3a aa2b 	vadd.f32	s20, s20, s23
 80249ba:	ee79 9a8b 	vadd.f32	s19, s19, s22
 80249be:	eef0 6a48 	vmov.f32	s13, s16
 80249c2:	eec7 7a0a 	vdiv.f32	s15, s14, s20
 80249c6:	ee39 9a2a 	vadd.f32	s18, s18, s21
 80249ca:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 80249ce:	edcd 6a27 	vstr	s13, [sp, #156]	@ 0x9c
 80249d2:	eef0 6a68 	vmov.f32	s13, s17
 80249d6:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 80249da:	edcd 6a28 	vstr	s13, [sp, #160]	@ 0xa0
 80249de:	ee29 7aa7 	vmul.f32	s14, s19, s15
 80249e2:	ee69 7a27 	vmul.f32	s15, s18, s15
 80249e6:	ee37 8a48 	vsub.f32	s16, s14, s16
 80249ea:	ee77 8ae8 	vsub.f32	s17, s15, s17
 80249ee:	eebe 8ac8 	vcvt.s32.f32	s16, s16, #16
 80249f2:	eefe 8ac8 	vcvt.s32.f32	s17, s17, #16
 80249f6:	ee18 2a10 	vmov	r2, s16
 80249fa:	eeb0 8a47 	vmov.f32	s16, s14
 80249fe:	fb92 f3f3 	sdiv	r3, r2, r3
 8024a02:	ee18 2a90 	vmov	r2, s17
 8024a06:	9329      	str	r3, [sp, #164]	@ 0xa4
 8024a08:	9b26      	ldr	r3, [sp, #152]	@ 0x98
 8024a0a:	eef0 8a67 	vmov.f32	s17, s15
 8024a0e:	fb92 f3f3 	sdiv	r3, r2, r3
 8024a12:	932a      	str	r3, [sp, #168]	@ 0xa8
 8024a14:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8024a16:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 8024a18:	3b01      	subs	r3, #1
 8024a1a:	930e      	str	r3, [sp, #56]	@ 0x38
 8024a1c:	9b26      	ldr	r3, [sp, #152]	@ 0x98
 8024a1e:	bf08      	it	eq
 8024a20:	4613      	moveq	r3, r2
 8024a22:	9309      	str	r3, [sp, #36]	@ 0x24
 8024a24:	e68c      	b.n	8024740 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x60>
 8024a26:	b149      	cbz	r1, 8024a3c <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x35c>
 8024a28:	5cb2      	ldrb	r2, [r6, r2]
 8024a2a:	4628      	mov	r0, r5
 8024a2c:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 8024a30:	4422      	add	r2, r4
 8024a32:	46ac      	mov	ip, r5
 8024a34:	e6f1      	b.n	802481a <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x13a>
 8024a36:	4628      	mov	r0, r5
 8024a38:	462a      	mov	r2, r5
 8024a3a:	e6ee      	b.n	802481a <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x13a>
 8024a3c:	4628      	mov	r0, r5
 8024a3e:	462a      	mov	r2, r5
 8024a40:	e7f7      	b.n	8024a32 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x352>
 8024a42:	1c47      	adds	r7, r0, #1
 8024a44:	f53f af69 	bmi.w	802491a <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x23a>
 8024a48:	42ba      	cmp	r2, r7
 8024a4a:	f6ff af66 	blt.w	802491a <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x23a>
 8024a4e:	1c6f      	adds	r7, r5, #1
 8024a50:	f53f af63 	bmi.w	802491a <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x23a>
 8024a54:	42be      	cmp	r6, r7
 8024a56:	f6ff af60 	blt.w	802491a <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x23a>
 8024a5a:	9f0f      	ldr	r7, [sp, #60]	@ 0x3c
 8024a5c:	b236      	sxth	r6, r6
 8024a5e:	b212      	sxth	r2, r2
 8024a60:	9002      	str	r0, [sp, #8]
 8024a62:	9601      	str	r6, [sp, #4]
 8024a64:	9200      	str	r2, [sp, #0]
 8024a66:	9813      	ldr	r0, [sp, #76]	@ 0x4c
 8024a68:	e9cd 1705 	strd	r1, r7, [sp, #20]
 8024a6c:	e9cd 5303 	strd	r5, r3, [sp, #12]
 8024a70:	e9dd 120c 	ldrd	r1, r2, [sp, #48]	@ 0x30
 8024a74:	4623      	mov	r3, r4
 8024a76:	f7ff fd47 	bl	8024508 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh>
 8024a7a:	e74e      	b.n	802491a <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x23a>
 8024a7c:	9a28      	ldr	r2, [sp, #160]	@ 0xa0
 8024a7e:	9828      	ldr	r0, [sp, #160]	@ 0xa0
 8024a80:	f3c2 3103 	ubfx	r1, r2, #12, #4
 8024a84:	9d27      	ldr	r5, [sp, #156]	@ 0x9c
 8024a86:	9a2e      	ldr	r2, [sp, #184]	@ 0xb8
 8024a88:	1400      	asrs	r0, r0, #16
 8024a8a:	142d      	asrs	r5, r5, #16
 8024a8c:	9b27      	ldr	r3, [sp, #156]	@ 0x9c
 8024a8e:	f9b2 2008 	ldrsh.w	r2, [r2, #8]
 8024a92:	f3c3 3303 	ubfx	r3, r3, #12, #4
 8024a96:	fb02 5000 	mla	r0, r2, r0, r5
 8024a9a:	9d0d      	ldr	r5, [sp, #52]	@ 0x34
 8024a9c:	f815 9000 	ldrb.w	r9, [r5, r0]
 8024aa0:	182e      	adds	r6, r5, r0
 8024aa2:	eb09 0949 	add.w	r9, r9, r9, lsl #1
 8024aa6:	eb04 0509 	add.w	r5, r4, r9
 8024aaa:	2b00      	cmp	r3, #0
 8024aac:	f000 8096 	beq.w	8024bdc <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4fc>
 8024ab0:	7877      	ldrb	r7, [r6, #1]
 8024ab2:	eb07 0747 	add.w	r7, r7, r7, lsl #1
 8024ab6:	4427      	add	r7, r4
 8024ab8:	2900      	cmp	r1, #0
 8024aba:	f000 8097 	beq.w	8024bec <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x50c>
 8024abe:	18b0      	adds	r0, r6, r2
 8024ac0:	5cb2      	ldrb	r2, [r6, r2]
 8024ac2:	7840      	ldrb	r0, [r0, #1]
 8024ac4:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 8024ac8:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 8024acc:	4422      	add	r2, r4
 8024ace:	4420      	add	r0, r4
 8024ad0:	b29b      	uxth	r3, r3
 8024ad2:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8024ad4:	b289      	uxth	r1, r1
 8024ad6:	f895 b002 	ldrb.w	fp, [r5, #2]
 8024ada:	f8b6 c000 	ldrh.w	ip, [r6]
 8024ade:	fb03 f801 	mul.w	r8, r3, r1
 8024ae2:	011b      	lsls	r3, r3, #4
 8024ae4:	78be      	ldrb	r6, [r7, #2]
 8024ae6:	ebc8 1101 	rsb	r1, r8, r1, lsl #4
 8024aea:	f5c3 7e80 	rsb	lr, r3, #256	@ 0x100
 8024aee:	eba3 0308 	sub.w	r3, r3, r8
 8024af2:	f814 9009 	ldrb.w	r9, [r4, r9]
 8024af6:	b289      	uxth	r1, r1
 8024af8:	b29b      	uxth	r3, r3
 8024afa:	ebae 0e01 	sub.w	lr, lr, r1
 8024afe:	435e      	muls	r6, r3
 8024b00:	fa1f fe8e 	uxth.w	lr, lr
 8024b04:	9310      	str	r3, [sp, #64]	@ 0x40
 8024b06:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8024b08:	fb0e 660b 	mla	r6, lr, fp, r6
 8024b0c:	f892 b002 	ldrb.w	fp, [r2, #2]
 8024b10:	fb01 660b 	mla	r6, r1, fp, r6
 8024b14:	f890 b002 	ldrb.w	fp, [r0, #2]
 8024b18:	fb08 660b 	mla	r6, r8, fp, r6
 8024b1c:	ea4f 2b2c 	mov.w	fp, ip, asr #8
 8024b20:	f00b 0bf8 	and.w	fp, fp, #248	@ 0xf8
 8024b24:	f3c6 2607 	ubfx	r6, r6, #8, #8
 8024b28:	fb1b fb03 	smulbb	fp, fp, r3
 8024b2c:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8024b2e:	fb06 b60a 	mla	r6, r6, sl, fp
 8024b32:	f895 b001 	ldrb.w	fp, [r5, #1]
 8024b36:	787d      	ldrb	r5, [r7, #1]
 8024b38:	783f      	ldrb	r7, [r7, #0]
 8024b3a:	b2b6      	uxth	r6, r6
 8024b3c:	435d      	muls	r5, r3
 8024b3e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8024b40:	fb0e 550b 	mla	r5, lr, fp, r5
 8024b44:	f892 b001 	ldrb.w	fp, [r2, #1]
 8024b48:	fb01 550b 	mla	r5, r1, fp, r5
 8024b4c:	f890 b001 	ldrb.w	fp, [r0, #1]
 8024b50:	fb08 550b 	mla	r5, r8, fp, r5
 8024b54:	ea4f 0bec 	mov.w	fp, ip, asr #3
 8024b58:	ea4f 0ccc 	mov.w	ip, ip, lsl #3
 8024b5c:	f00b 0bfc 	and.w	fp, fp, #252	@ 0xfc
 8024b60:	f3c5 2507 	ubfx	r5, r5, #8, #8
 8024b64:	fa5f fc8c 	uxtb.w	ip, ip
 8024b68:	fb1b fb03 	smulbb	fp, fp, r3
 8024b6c:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8024b6e:	437b      	muls	r3, r7
 8024b70:	7817      	ldrb	r7, [r2, #0]
 8024b72:	fb05 b50a 	mla	r5, r5, sl, fp
 8024b76:	fb0e 3309 	mla	r3, lr, r9, r3
 8024b7a:	b2ad      	uxth	r5, r5
 8024b7c:	fb01 3307 	mla	r3, r1, r7, r3
 8024b80:	7807      	ldrb	r7, [r0, #0]
 8024b82:	f105 0b01 	add.w	fp, r5, #1
 8024b86:	fb08 3707 	mla	r7, r8, r7, r3
 8024b8a:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8024b8c:	eb0b 2515 	add.w	r5, fp, r5, lsr #8
 8024b90:	fb1c fc03 	smulbb	ip, ip, r3
 8024b94:	f3c7 2707 	ubfx	r7, r7, #8, #8
 8024b98:	1c73      	adds	r3, r6, #1
 8024b9a:	096d      	lsrs	r5, r5, #5
 8024b9c:	fb07 c70a 	mla	r7, r7, sl, ip
 8024ba0:	eb03 2616 	add.w	r6, r3, r6, lsr #8
 8024ba4:	f405 65fc 	and.w	r5, r5, #2016	@ 0x7e0
 8024ba8:	b2bf      	uxth	r7, r7
 8024baa:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8024bac:	f406 4678 	and.w	r6, r6, #63488	@ 0xf800
 8024bb0:	1c7a      	adds	r2, r7, #1
 8024bb2:	eb02 2217 	add.w	r2, r2, r7, lsr #8
 8024bb6:	f3c2 22c4 	ubfx	r2, r2, #11, #5
 8024bba:	4316      	orrs	r6, r2
 8024bbc:	9a29      	ldr	r2, [sp, #164]	@ 0xa4
 8024bbe:	432e      	orrs	r6, r5
 8024bc0:	f823 6b02 	strh.w	r6, [r3], #2
 8024bc4:	930c      	str	r3, [sp, #48]	@ 0x30
 8024bc6:	9b27      	ldr	r3, [sp, #156]	@ 0x9c
 8024bc8:	4413      	add	r3, r2
 8024bca:	9a2a      	ldr	r2, [sp, #168]	@ 0xa8
 8024bcc:	9327      	str	r3, [sp, #156]	@ 0x9c
 8024bce:	9b28      	ldr	r3, [sp, #160]	@ 0xa0
 8024bd0:	4413      	add	r3, r2
 8024bd2:	9328      	str	r3, [sp, #160]	@ 0xa0
 8024bd4:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 8024bd6:	3b01      	subs	r3, #1
 8024bd8:	9311      	str	r3, [sp, #68]	@ 0x44
 8024bda:	e6db      	b.n	8024994 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2b4>
 8024bdc:	b149      	cbz	r1, 8024bf2 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x512>
 8024bde:	5cb2      	ldrb	r2, [r6, r2]
 8024be0:	4628      	mov	r0, r5
 8024be2:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 8024be6:	4422      	add	r2, r4
 8024be8:	462f      	mov	r7, r5
 8024bea:	e771      	b.n	8024ad0 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3f0>
 8024bec:	4628      	mov	r0, r5
 8024bee:	462a      	mov	r2, r5
 8024bf0:	e76e      	b.n	8024ad0 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3f0>
 8024bf2:	4628      	mov	r0, r5
 8024bf4:	462a      	mov	r2, r5
 8024bf6:	e7f7      	b.n	8024be8 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x508>
 8024bf8:	b015      	add	sp, #84	@ 0x54
 8024bfa:	ecbd 8b08 	vpop	{d8-d11}
 8024bfe:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	...

08024c04 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh>:
 8024c04:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8024c08:	880e      	ldrh	r6, [r1, #0]
 8024c0a:	b085      	sub	sp, #20
 8024c0c:	4691      	mov	r9, r2
 8024c0e:	0230      	lsls	r0, r6, #8
 8024c10:	f9bd c038 	ldrsh.w	ip, [sp, #56]	@ 0x38
 8024c14:	9101      	str	r1, [sp, #4]
 8024c16:	f400 0b78 	and.w	fp, r0, #16252928	@ 0xf80000
 8024c1a:	0170      	lsls	r0, r6, #5
 8024c1c:	00f6      	lsls	r6, r6, #3
 8024c1e:	f9bd 803c 	ldrsh.w	r8, [sp, #60]	@ 0x3c
 8024c22:	f400 407c 	and.w	r0, r0, #64512	@ 0xfc00
 8024c26:	f89d 2048 	ldrb.w	r2, [sp, #72]	@ 0x48
 8024c2a:	b2f6      	uxtb	r6, r6
 8024c2c:	f89d 404c 	ldrb.w	r4, [sp, #76]	@ 0x4c
 8024c30:	ea4b 0000 	orr.w	r0, fp, r0
 8024c34:	e9dd 7510 	ldrd	r7, r5, [sp, #64]	@ 0x40
 8024c38:	4306      	orrs	r6, r0
 8024c3a:	fb05 7a0c 	mla	sl, r5, ip, r7
 8024c3e:	2d00      	cmp	r5, #0
 8024c40:	9603      	str	r6, [sp, #12]
 8024c42:	eb09 0e0a 	add.w	lr, r9, sl
 8024c46:	db42      	blt.n	8024cce <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh+0xca>
 8024c48:	45a8      	cmp	r8, r5
 8024c4a:	dd40      	ble.n	8024cce <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh+0xca>
 8024c4c:	2f00      	cmp	r7, #0
 8024c4e:	db3c      	blt.n	8024cca <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh+0xc6>
 8024c50:	45bc      	cmp	ip, r7
 8024c52:	dd3a      	ble.n	8024cca <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh+0xc6>
 8024c54:	f819 600a 	ldrb.w	r6, [r9, sl]
 8024c58:	eb06 0646 	add.w	r6, r6, r6, lsl #1
 8024c5c:	441e      	add	r6, r3
 8024c5e:	1c78      	adds	r0, r7, #1
 8024c60:	d438      	bmi.n	8024cd4 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh+0xd0>
 8024c62:	4584      	cmp	ip, r0
 8024c64:	dd36      	ble.n	8024cd4 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh+0xd0>
 8024c66:	b3aa      	cbz	r2, 8024cd4 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh+0xd0>
 8024c68:	f89e 0001 	ldrb.w	r0, [lr, #1]
 8024c6c:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 8024c70:	4418      	add	r0, r3
 8024c72:	3501      	adds	r5, #1
 8024c74:	d432      	bmi.n	8024cdc <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh+0xd8>
 8024c76:	45a8      	cmp	r8, r5
 8024c78:	dd30      	ble.n	8024cdc <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh+0xd8>
 8024c7a:	b37c      	cbz	r4, 8024cdc <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh+0xd8>
 8024c7c:	2f00      	cmp	r7, #0
 8024c7e:	db2b      	blt.n	8024cd8 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh+0xd4>
 8024c80:	45bc      	cmp	ip, r7
 8024c82:	dd29      	ble.n	8024cd8 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh+0xd4>
 8024c84:	f81e 500c 	ldrb.w	r5, [lr, ip]
 8024c88:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8024c8c:	441d      	add	r5, r3
 8024c8e:	3701      	adds	r7, #1
 8024c90:	d427      	bmi.n	8024ce2 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh+0xde>
 8024c92:	45bc      	cmp	ip, r7
 8024c94:	dd25      	ble.n	8024ce2 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh+0xde>
 8024c96:	b322      	cbz	r2, 8024ce2 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh+0xde>
 8024c98:	44f4      	add	ip, lr
 8024c9a:	f89c 7001 	ldrb.w	r7, [ip, #1]
 8024c9e:	eb07 0747 	add.w	r7, r7, r7, lsl #1
 8024ca2:	443b      	add	r3, r7
 8024ca4:	781f      	ldrb	r7, [r3, #0]
 8024ca6:	2a0f      	cmp	r2, #15
 8024ca8:	f896 9000 	ldrb.w	r9, [r6]
 8024cac:	f890 a000 	ldrb.w	sl, [r0]
 8024cb0:	4639      	mov	r1, r7
 8024cb2:	f895 8000 	ldrb.w	r8, [r5]
 8024cb6:	d801      	bhi.n	8024cbc <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh+0xb8>
 8024cb8:	2c0f      	cmp	r4, #15
 8024cba:	d914      	bls.n	8024ce6 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh+0xe2>
 8024cbc:	4b2c      	ldr	r3, [pc, #176]	@ (8024d70 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh+0x16c>)
 8024cbe:	f44f 71fb 	mov.w	r1, #502	@ 0x1f6
 8024cc2:	4a2c      	ldr	r2, [pc, #176]	@ (8024d74 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh+0x170>)
 8024cc4:	482c      	ldr	r0, [pc, #176]	@ (8024d78 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh+0x174>)
 8024cc6:	f005 ffbd 	bl	802ac44 <__assert_func>
 8024cca:	ae03      	add	r6, sp, #12
 8024ccc:	e7c7      	b.n	8024c5e <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh+0x5a>
 8024cce:	a803      	add	r0, sp, #12
 8024cd0:	4606      	mov	r6, r0
 8024cd2:	e7ce      	b.n	8024c72 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh+0x6e>
 8024cd4:	a803      	add	r0, sp, #12
 8024cd6:	e7cc      	b.n	8024c72 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh+0x6e>
 8024cd8:	ad03      	add	r5, sp, #12
 8024cda:	e7d8      	b.n	8024c8e <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh+0x8a>
 8024cdc:	ab03      	add	r3, sp, #12
 8024cde:	461d      	mov	r5, r3
 8024ce0:	e7e0      	b.n	8024ca4 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh+0xa0>
 8024ce2:	ab03      	add	r3, sp, #12
 8024ce4:	e7de      	b.n	8024ca4 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh+0xa0>
 8024ce6:	b292      	uxth	r2, r2
 8024ce8:	f890 c002 	ldrb.w	ip, [r0, #2]
 8024cec:	b2a4      	uxth	r4, r4
 8024cee:	f896 b002 	ldrb.w	fp, [r6, #2]
 8024cf2:	7840      	ldrb	r0, [r0, #1]
 8024cf4:	fb02 fe04 	mul.w	lr, r2, r4
 8024cf8:	0112      	lsls	r2, r2, #4
 8024cfa:	7876      	ldrb	r6, [r6, #1]
 8024cfc:	ebce 1404 	rsb	r4, lr, r4, lsl #4
 8024d00:	f5c2 7780 	rsb	r7, r2, #256	@ 0x100
 8024d04:	eba2 020e 	sub.w	r2, r2, lr
 8024d08:	b2a4      	uxth	r4, r4
 8024d0a:	b292      	uxth	r2, r2
 8024d0c:	1b3f      	subs	r7, r7, r4
 8024d0e:	fb02 fc0c 	mul.w	ip, r2, ip
 8024d12:	b2bf      	uxth	r7, r7
 8024d14:	fb07 cc0b 	mla	ip, r7, fp, ip
 8024d18:	f895 b002 	ldrb.w	fp, [r5, #2]
 8024d1c:	fb04 cc0b 	mla	ip, r4, fp, ip
 8024d20:	f893 b002 	ldrb.w	fp, [r3, #2]
 8024d24:	785b      	ldrb	r3, [r3, #1]
 8024d26:	fb0e cc0b 	mla	ip, lr, fp, ip
 8024d2a:	f40c 4b78 	and.w	fp, ip, #63488	@ 0xf800
 8024d2e:	fb02 fc0a 	mul.w	ip, r2, sl
 8024d32:	4342      	muls	r2, r0
 8024d34:	7868      	ldrb	r0, [r5, #1]
 8024d36:	fb07 cc09 	mla	ip, r7, r9, ip
 8024d3a:	fb07 2206 	mla	r2, r7, r6, r2
 8024d3e:	fb04 cc08 	mla	ip, r4, r8, ip
 8024d42:	fb04 2400 	mla	r4, r4, r0, r2
 8024d46:	fb0e cc01 	mla	ip, lr, r1, ip
 8024d4a:	fb0e 4e03 	mla	lr, lr, r3, r4
 8024d4e:	9b01      	ldr	r3, [sp, #4]
 8024d50:	f3cc 2cc4 	ubfx	ip, ip, #11, #5
 8024d54:	ea4f 1e5e 	mov.w	lr, lr, lsr #5
 8024d58:	ea4c 0c0b 	orr.w	ip, ip, fp
 8024d5c:	f40e 6efc 	and.w	lr, lr, #2016	@ 0x7e0
 8024d60:	ea4c 0c0e 	orr.w	ip, ip, lr
 8024d64:	f8a3 c000 	strh.w	ip, [r3]
 8024d68:	b005      	add	sp, #20
 8024d6a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8024d6e:	bf00      	nop
 8024d70:	0802fed5 	.word	0x0802fed5
 8024d74:	080304a2 	.word	0x080304a2
 8024d78:	0802ff59 	.word	0x0802ff59

08024d7c <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 8024d7c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8024d80:	ed2d 8b08 	vpush	{d8-d11}
 8024d84:	b08f      	sub	sp, #60	@ 0x3c
 8024d86:	eeb0 aa40 	vmov.f32	s20, s0
 8024d8a:	eef0 9a60 	vmov.f32	s19, s1
 8024d8e:	920c      	str	r2, [sp, #48]	@ 0x30
 8024d90:	eeb0 9a41 	vmov.f32	s18, s2
 8024d94:	9a25      	ldr	r2, [sp, #148]	@ 0x94
 8024d96:	eeb0 8a62 	vmov.f32	s16, s5
 8024d9a:	900d      	str	r0, [sp, #52]	@ 0x34
 8024d9c:	eef0 8a43 	vmov.f32	s17, s6
 8024da0:	6850      	ldr	r0, [r2, #4]
 8024da2:	eef0 ba44 	vmov.f32	s23, s8
 8024da6:	910a      	str	r1, [sp, #40]	@ 0x28
 8024da8:	eeb0 ba64 	vmov.f32	s22, s9
 8024dac:	9306      	str	r3, [sp, #24]
 8024dae:	eef0 aa45 	vmov.f32	s21, s10
 8024db2:	6812      	ldr	r2, [r2, #0]
 8024db4:	e9dd 1326 	ldrd	r1, r3, [sp, #152]	@ 0x98
 8024db8:	e9dd b521 	ldrd	fp, r5, [sp, #132]	@ 0x84
 8024dbc:	fb00 1303 	mla	r3, r0, r3, r1
 8024dc0:	eb02 0343 	add.w	r3, r2, r3, lsl #1
 8024dc4:	9307      	str	r3, [sp, #28]
 8024dc6:	9b28      	ldr	r3, [sp, #160]	@ 0xa0
 8024dc8:	681b      	ldr	r3, [r3, #0]
 8024dca:	9308      	str	r3, [sp, #32]
 8024dcc:	9b28      	ldr	r3, [sp, #160]	@ 0xa0
 8024dce:	685c      	ldr	r4, [r3, #4]
 8024dd0:	3404      	adds	r4, #4
 8024dd2:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8024dd4:	2b00      	cmp	r3, #0
 8024dd6:	dc03      	bgt.n	8024de0 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x64>
 8024dd8:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8024dda:	2b00      	cmp	r3, #0
 8024ddc:	f340 81d5 	ble.w	802518a <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x40e>
 8024de0:	9b28      	ldr	r3, [sp, #160]	@ 0xa0
 8024de2:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 8024de6:	f9b3 200c 	ldrsh.w	r2, [r3, #12]
 8024dea:	1e48      	subs	r0, r1, #1
 8024dec:	1e56      	subs	r6, r2, #1
 8024dee:	9b06      	ldr	r3, [sp, #24]
 8024df0:	2b00      	cmp	r3, #0
 8024df2:	f340 80b6 	ble.w	8024f62 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1e6>
 8024df6:	ea5f 472b 	movs.w	r7, fp, asr #16
 8024dfa:	ea4f 4325 	mov.w	r3, r5, asr #16
 8024dfe:	d406      	bmi.n	8024e0e <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x92>
 8024e00:	4287      	cmp	r7, r0
 8024e02:	da04      	bge.n	8024e0e <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x92>
 8024e04:	2b00      	cmp	r3, #0
 8024e06:	db02      	blt.n	8024e0e <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x92>
 8024e08:	42b3      	cmp	r3, r6
 8024e0a:	f2c0 80ab 	blt.w	8024f64 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1e8>
 8024e0e:	3701      	adds	r7, #1
 8024e10:	f100 809c 	bmi.w	8024f4c <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1d0>
 8024e14:	42b9      	cmp	r1, r7
 8024e16:	f2c0 8099 	blt.w	8024f4c <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1d0>
 8024e1a:	3301      	adds	r3, #1
 8024e1c:	f100 8096 	bmi.w	8024f4c <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1d0>
 8024e20:	429a      	cmp	r2, r3
 8024e22:	f2c0 8093 	blt.w	8024f4c <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1d0>
 8024e26:	9b06      	ldr	r3, [sp, #24]
 8024e28:	930b      	str	r3, [sp, #44]	@ 0x2c
 8024e2a:	9b07      	ldr	r3, [sp, #28]
 8024e2c:	9309      	str	r3, [sp, #36]	@ 0x24
 8024e2e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8024e30:	2b00      	cmp	r3, #0
 8024e32:	f340 80b4 	ble.w	8024f9e <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x222>
 8024e36:	9828      	ldr	r0, [sp, #160]	@ 0xa0
 8024e38:	142e      	asrs	r6, r5, #16
 8024e3a:	9a28      	ldr	r2, [sp, #160]	@ 0xa0
 8024e3c:	f3cb 3303 	ubfx	r3, fp, #12, #4
 8024e40:	68c7      	ldr	r7, [r0, #12]
 8024e42:	ea5f 402b 	movs.w	r0, fp, asr #16
 8024e46:	f3c5 3103 	ubfx	r1, r5, #12, #4
 8024e4a:	6892      	ldr	r2, [r2, #8]
 8024e4c:	f100 80fb 	bmi.w	8025046 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2ca>
 8024e50:	f102 3cff 	add.w	ip, r2, #4294967295
 8024e54:	4560      	cmp	r0, ip
 8024e56:	f280 80f6 	bge.w	8025046 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2ca>
 8024e5a:	2e00      	cmp	r6, #0
 8024e5c:	f2c0 80f3 	blt.w	8025046 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2ca>
 8024e60:	f107 3cff 	add.w	ip, r7, #4294967295
 8024e64:	4566      	cmp	r6, ip
 8024e66:	f280 80ee 	bge.w	8025046 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2ca>
 8024e6a:	b212      	sxth	r2, r2
 8024e6c:	fb06 0002 	mla	r0, r6, r2, r0
 8024e70:	9e08      	ldr	r6, [sp, #32]
 8024e72:	1837      	adds	r7, r6, r0
 8024e74:	5c30      	ldrb	r0, [r6, r0]
 8024e76:	eb00 0840 	add.w	r8, r0, r0, lsl #1
 8024e7a:	eb04 0c08 	add.w	ip, r4, r8
 8024e7e:	2b00      	cmp	r3, #0
 8024e80:	f000 80d3 	beq.w	802502a <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2ae>
 8024e84:	787e      	ldrb	r6, [r7, #1]
 8024e86:	eb06 0646 	add.w	r6, r6, r6, lsl #1
 8024e8a:	4426      	add	r6, r4
 8024e8c:	2900      	cmp	r1, #0
 8024e8e:	f000 80d4 	beq.w	802503a <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2be>
 8024e92:	18b8      	adds	r0, r7, r2
 8024e94:	5cba      	ldrb	r2, [r7, r2]
 8024e96:	7840      	ldrb	r0, [r0, #1]
 8024e98:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 8024e9c:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 8024ea0:	4422      	add	r2, r4
 8024ea2:	4420      	add	r0, r4
 8024ea4:	b29b      	uxth	r3, r3
 8024ea6:	78b7      	ldrb	r7, [r6, #2]
 8024ea8:	b289      	uxth	r1, r1
 8024eaa:	f89c a002 	ldrb.w	sl, [ip, #2]
 8024eae:	f89c c001 	ldrb.w	ip, [ip, #1]
 8024eb2:	fb03 f901 	mul.w	r9, r3, r1
 8024eb6:	011b      	lsls	r3, r3, #4
 8024eb8:	ebc9 1101 	rsb	r1, r9, r1, lsl #4
 8024ebc:	f5c3 7e80 	rsb	lr, r3, #256	@ 0x100
 8024ec0:	eba3 0309 	sub.w	r3, r3, r9
 8024ec4:	b289      	uxth	r1, r1
 8024ec6:	b29b      	uxth	r3, r3
 8024ec8:	ebae 0e01 	sub.w	lr, lr, r1
 8024ecc:	435f      	muls	r7, r3
 8024ece:	fa1f fe8e 	uxth.w	lr, lr
 8024ed2:	fb0e 770a 	mla	r7, lr, sl, r7
 8024ed6:	f892 a002 	ldrb.w	sl, [r2, #2]
 8024eda:	fb01 770a 	mla	r7, r1, sl, r7
 8024ede:	f890 a002 	ldrb.w	sl, [r0, #2]
 8024ee2:	fb09 7a0a 	mla	sl, r9, sl, r7
 8024ee6:	f814 7008 	ldrb.w	r7, [r4, r8]
 8024eea:	f896 8000 	ldrb.w	r8, [r6]
 8024eee:	7876      	ldrb	r6, [r6, #1]
 8024ef0:	f40a 4a78 	and.w	sl, sl, #63488	@ 0xf800
 8024ef4:	fb03 f808 	mul.w	r8, r3, r8
 8024ef8:	4373      	muls	r3, r6
 8024efa:	fb0e 8807 	mla	r8, lr, r7, r8
 8024efe:	7817      	ldrb	r7, [r2, #0]
 8024f00:	fb0e 330c 	mla	r3, lr, ip, r3
 8024f04:	fb01 8807 	mla	r8, r1, r7, r8
 8024f08:	7807      	ldrb	r7, [r0, #0]
 8024f0a:	fb09 8707 	mla	r7, r9, r7, r8
 8024f0e:	f3c7 27c4 	ubfx	r7, r7, #11, #5
 8024f12:	ea47 070a 	orr.w	r7, r7, sl
 8024f16:	f892 a001 	ldrb.w	sl, [r2, #1]
 8024f1a:	fb01 310a 	mla	r1, r1, sl, r3
 8024f1e:	f890 a001 	ldrb.w	sl, [r0, #1]
 8024f22:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8024f24:	fb09 1a0a 	mla	sl, r9, sl, r1
 8024f28:	ea4f 1a5a 	mov.w	sl, sl, lsr #5
 8024f2c:	f40a 6afc 	and.w	sl, sl, #2016	@ 0x7e0
 8024f30:	ea47 070a 	orr.w	r7, r7, sl
 8024f34:	801f      	strh	r7, [r3, #0]
 8024f36:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8024f38:	3302      	adds	r3, #2
 8024f3a:	9309      	str	r3, [sp, #36]	@ 0x24
 8024f3c:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 8024f3e:	449b      	add	fp, r3
 8024f40:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 8024f42:	441d      	add	r5, r3
 8024f44:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8024f46:	3b01      	subs	r3, #1
 8024f48:	930b      	str	r3, [sp, #44]	@ 0x2c
 8024f4a:	e770      	b.n	8024e2e <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xb2>
 8024f4c:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 8024f4e:	449b      	add	fp, r3
 8024f50:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 8024f52:	441d      	add	r5, r3
 8024f54:	9b06      	ldr	r3, [sp, #24]
 8024f56:	3b01      	subs	r3, #1
 8024f58:	9306      	str	r3, [sp, #24]
 8024f5a:	9b07      	ldr	r3, [sp, #28]
 8024f5c:	3302      	adds	r3, #2
 8024f5e:	9307      	str	r3, [sp, #28]
 8024f60:	e745      	b.n	8024dee <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x72>
 8024f62:	d023      	beq.n	8024fac <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x230>
 8024f64:	9b06      	ldr	r3, [sp, #24]
 8024f66:	9823      	ldr	r0, [sp, #140]	@ 0x8c
 8024f68:	3b01      	subs	r3, #1
 8024f6a:	fb00 b003 	mla	r0, r0, r3, fp
 8024f6e:	1400      	asrs	r0, r0, #16
 8024f70:	f53f af59 	bmi.w	8024e26 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xaa>
 8024f74:	3901      	subs	r1, #1
 8024f76:	4288      	cmp	r0, r1
 8024f78:	f6bf af55 	bge.w	8024e26 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xaa>
 8024f7c:	9924      	ldr	r1, [sp, #144]	@ 0x90
 8024f7e:	fb01 5303 	mla	r3, r1, r3, r5
 8024f82:	141b      	asrs	r3, r3, #16
 8024f84:	f53f af4f 	bmi.w	8024e26 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xaa>
 8024f88:	3a01      	subs	r2, #1
 8024f8a:	4293      	cmp	r3, r2
 8024f8c:	f6bf af4b 	bge.w	8024e26 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xaa>
 8024f90:	9b06      	ldr	r3, [sp, #24]
 8024f92:	9309      	str	r3, [sp, #36]	@ 0x24
 8024f94:	9b07      	ldr	r3, [sp, #28]
 8024f96:	930b      	str	r3, [sp, #44]	@ 0x2c
 8024f98:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8024f9a:	2b00      	cmp	r3, #0
 8024f9c:	dc70      	bgt.n	8025080 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x304>
 8024f9e:	9b06      	ldr	r3, [sp, #24]
 8024fa0:	9a07      	ldr	r2, [sp, #28]
 8024fa2:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8024fa6:	eb02 0343 	add.w	r3, r2, r3, lsl #1
 8024faa:	9307      	str	r3, [sp, #28]
 8024fac:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8024fae:	2b00      	cmp	r3, #0
 8024fb0:	f340 80eb 	ble.w	802518a <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x40e>
 8024fb4:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8024fb8:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 8024fba:	ee3a aa2b 	vadd.f32	s20, s20, s23
 8024fbe:	ee79 9a8b 	vadd.f32	s19, s19, s22
 8024fc2:	eef0 6a48 	vmov.f32	s13, s16
 8024fc6:	eec7 7a0a 	vdiv.f32	s15, s14, s20
 8024fca:	ee39 9a2a 	vadd.f32	s18, s18, s21
 8024fce:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 8024fd2:	ee16 ba90 	vmov	fp, s13
 8024fd6:	eef0 6a68 	vmov.f32	s13, s17
 8024fda:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 8024fde:	ee16 5a90 	vmov	r5, s13
 8024fe2:	ee29 7aa7 	vmul.f32	s14, s19, s15
 8024fe6:	ee69 7a27 	vmul.f32	s15, s18, s15
 8024fea:	ee37 8a48 	vsub.f32	s16, s14, s16
 8024fee:	ee77 8ae8 	vsub.f32	s17, s15, s17
 8024ff2:	eebe 8ac8 	vcvt.s32.f32	s16, s16, #16
 8024ff6:	eefe 8ac8 	vcvt.s32.f32	s17, s17, #16
 8024ffa:	ee18 2a10 	vmov	r2, s16
 8024ffe:	eeb0 8a47 	vmov.f32	s16, s14
 8025002:	fb92 f3f3 	sdiv	r3, r2, r3
 8025006:	ee18 2a90 	vmov	r2, s17
 802500a:	9323      	str	r3, [sp, #140]	@ 0x8c
 802500c:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 802500e:	eef0 8a67 	vmov.f32	s17, s15
 8025012:	fb92 f3f3 	sdiv	r3, r2, r3
 8025016:	9324      	str	r3, [sp, #144]	@ 0x90
 8025018:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 802501a:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 802501c:	3b01      	subs	r3, #1
 802501e:	930a      	str	r3, [sp, #40]	@ 0x28
 8025020:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 8025022:	bf08      	it	eq
 8025024:	4613      	moveq	r3, r2
 8025026:	9306      	str	r3, [sp, #24]
 8025028:	e6d3      	b.n	8024dd2 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x56>
 802502a:	b149      	cbz	r1, 8025040 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2c4>
 802502c:	5cba      	ldrb	r2, [r7, r2]
 802502e:	4660      	mov	r0, ip
 8025030:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 8025034:	4422      	add	r2, r4
 8025036:	4666      	mov	r6, ip
 8025038:	e734      	b.n	8024ea4 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x128>
 802503a:	4660      	mov	r0, ip
 802503c:	4662      	mov	r2, ip
 802503e:	e731      	b.n	8024ea4 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x128>
 8025040:	4660      	mov	r0, ip
 8025042:	4662      	mov	r2, ip
 8025044:	e7f7      	b.n	8025036 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2ba>
 8025046:	f110 0c01 	adds.w	ip, r0, #1
 802504a:	f53f af74 	bmi.w	8024f36 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ba>
 802504e:	4562      	cmp	r2, ip
 8025050:	f6ff af71 	blt.w	8024f36 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ba>
 8025054:	f116 0c01 	adds.w	ip, r6, #1
 8025058:	f53f af6d 	bmi.w	8024f36 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ba>
 802505c:	4567      	cmp	r7, ip
 802505e:	f6ff af6a 	blt.w	8024f36 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ba>
 8025062:	b23f      	sxth	r7, r7
 8025064:	b212      	sxth	r2, r2
 8025066:	9701      	str	r7, [sp, #4]
 8025068:	9200      	str	r2, [sp, #0]
 802506a:	e9cd 3104 	strd	r3, r1, [sp, #16]
 802506e:	e9cd 0602 	strd	r0, r6, [sp, #8]
 8025072:	4623      	mov	r3, r4
 8025074:	980d      	ldr	r0, [sp, #52]	@ 0x34
 8025076:	e9dd 2108 	ldrd	r2, r1, [sp, #32]
 802507a:	f7ff fdc3 	bl	8024c04 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh>
 802507e:	e75a      	b.n	8024f36 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ba>
 8025080:	9a28      	ldr	r2, [sp, #160]	@ 0xa0
 8025082:	ea4f 462b 	mov.w	r6, fp, asr #16
 8025086:	1428      	asrs	r0, r5, #16
 8025088:	f3cb 3303 	ubfx	r3, fp, #12, #4
 802508c:	f9b2 2008 	ldrsh.w	r2, [r2, #8]
 8025090:	f3c5 3103 	ubfx	r1, r5, #12, #4
 8025094:	fb02 6000 	mla	r0, r2, r0, r6
 8025098:	9e08      	ldr	r6, [sp, #32]
 802509a:	f816 8000 	ldrb.w	r8, [r6, r0]
 802509e:	1837      	adds	r7, r6, r0
 80250a0:	eb08 0848 	add.w	r8, r8, r8, lsl #1
 80250a4:	eb04 0c08 	add.w	ip, r4, r8
 80250a8:	2b00      	cmp	r3, #0
 80250aa:	d060      	beq.n	802516e <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3f2>
 80250ac:	787e      	ldrb	r6, [r7, #1]
 80250ae:	eb06 0646 	add.w	r6, r6, r6, lsl #1
 80250b2:	4426      	add	r6, r4
 80250b4:	2900      	cmp	r1, #0
 80250b6:	d062      	beq.n	802517e <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x402>
 80250b8:	18b8      	adds	r0, r7, r2
 80250ba:	5cba      	ldrb	r2, [r7, r2]
 80250bc:	7840      	ldrb	r0, [r0, #1]
 80250be:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 80250c2:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 80250c6:	4422      	add	r2, r4
 80250c8:	4420      	add	r0, r4
 80250ca:	b29b      	uxth	r3, r3
 80250cc:	78b7      	ldrb	r7, [r6, #2]
 80250ce:	b289      	uxth	r1, r1
 80250d0:	f89c a002 	ldrb.w	sl, [ip, #2]
 80250d4:	f89c c001 	ldrb.w	ip, [ip, #1]
 80250d8:	fb03 f901 	mul.w	r9, r3, r1
 80250dc:	011b      	lsls	r3, r3, #4
 80250de:	ebc9 1101 	rsb	r1, r9, r1, lsl #4
 80250e2:	f5c3 7e80 	rsb	lr, r3, #256	@ 0x100
 80250e6:	eba3 0309 	sub.w	r3, r3, r9
 80250ea:	b289      	uxth	r1, r1
 80250ec:	b29b      	uxth	r3, r3
 80250ee:	ebae 0e01 	sub.w	lr, lr, r1
 80250f2:	435f      	muls	r7, r3
 80250f4:	fa1f fe8e 	uxth.w	lr, lr
 80250f8:	fb0e 770a 	mla	r7, lr, sl, r7
 80250fc:	f892 a002 	ldrb.w	sl, [r2, #2]
 8025100:	fb01 770a 	mla	r7, r1, sl, r7
 8025104:	f890 a002 	ldrb.w	sl, [r0, #2]
 8025108:	fb09 7a0a 	mla	sl, r9, sl, r7
 802510c:	f814 7008 	ldrb.w	r7, [r4, r8]
 8025110:	f896 8000 	ldrb.w	r8, [r6]
 8025114:	7876      	ldrb	r6, [r6, #1]
 8025116:	f40a 4a78 	and.w	sl, sl, #63488	@ 0xf800
 802511a:	fb03 f808 	mul.w	r8, r3, r8
 802511e:	4373      	muls	r3, r6
 8025120:	7856      	ldrb	r6, [r2, #1]
 8025122:	fb0e 8807 	mla	r8, lr, r7, r8
 8025126:	7817      	ldrb	r7, [r2, #0]
 8025128:	fb0e 330c 	mla	r3, lr, ip, r3
 802512c:	fb01 8807 	mla	r8, r1, r7, r8
 8025130:	7807      	ldrb	r7, [r0, #0]
 8025132:	fb01 3306 	mla	r3, r1, r6, r3
 8025136:	fb09 8707 	mla	r7, r9, r7, r8
 802513a:	f3c7 27c4 	ubfx	r7, r7, #11, #5
 802513e:	ea47 070a 	orr.w	r7, r7, sl
 8025142:	f890 a001 	ldrb.w	sl, [r0, #1]
 8025146:	fb09 3a0a 	mla	sl, r9, sl, r3
 802514a:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 802514c:	ea4f 1a5a 	mov.w	sl, sl, lsr #5
 8025150:	f40a 6afc 	and.w	sl, sl, #2016	@ 0x7e0
 8025154:	ea47 070a 	orr.w	r7, r7, sl
 8025158:	f823 7b02 	strh.w	r7, [r3], #2
 802515c:	930b      	str	r3, [sp, #44]	@ 0x2c
 802515e:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 8025160:	449b      	add	fp, r3
 8025162:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 8025164:	441d      	add	r5, r3
 8025166:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8025168:	3b01      	subs	r3, #1
 802516a:	9309      	str	r3, [sp, #36]	@ 0x24
 802516c:	e714      	b.n	8024f98 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x21c>
 802516e:	b149      	cbz	r1, 8025184 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x408>
 8025170:	5cba      	ldrb	r2, [r7, r2]
 8025172:	4660      	mov	r0, ip
 8025174:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 8025178:	4422      	add	r2, r4
 802517a:	4666      	mov	r6, ip
 802517c:	e7a5      	b.n	80250ca <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x34e>
 802517e:	4660      	mov	r0, ip
 8025180:	4662      	mov	r2, ip
 8025182:	e7a2      	b.n	80250ca <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x34e>
 8025184:	4660      	mov	r0, ip
 8025186:	4662      	mov	r2, ip
 8025188:	e7f7      	b.n	802517a <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3fe>
 802518a:	b00f      	add	sp, #60	@ 0x3c
 802518c:	ecbd 8b08 	vpop	{d8-d11}
 8025190:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08025194 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh>:
 8025194:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8025198:	e9dd 540e 	ldrd	r5, r4, [sp, #56]	@ 0x38
 802519c:	f9bd c030 	ldrsh.w	ip, [sp, #48]	@ 0x30
 80251a0:	2c00      	cmp	r4, #0
 80251a2:	f9bd 8034 	ldrsh.w	r8, [sp, #52]	@ 0x34
 80251a6:	fb04 560c 	mla	r6, r4, ip, r5
 80251aa:	f89d 0040 	ldrb.w	r0, [sp, #64]	@ 0x40
 80251ae:	f89d 7044 	ldrb.w	r7, [sp, #68]	@ 0x44
 80251b2:	eb02 0e06 	add.w	lr, r2, r6
 80251b6:	db3d      	blt.n	8025234 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0xa0>
 80251b8:	45a0      	cmp	r8, r4
 80251ba:	dd3b      	ble.n	8025234 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0xa0>
 80251bc:	2d00      	cmp	r5, #0
 80251be:	db37      	blt.n	8025230 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0x9c>
 80251c0:	45ac      	cmp	ip, r5
 80251c2:	dd35      	ble.n	8025230 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0x9c>
 80251c4:	5d92      	ldrb	r2, [r2, r6]
 80251c6:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 80251ca:	1c6e      	adds	r6, r5, #1
 80251cc:	d435      	bmi.n	802523a <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0xa6>
 80251ce:	45b4      	cmp	ip, r6
 80251d0:	dd33      	ble.n	802523a <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0xa6>
 80251d2:	b3a0      	cbz	r0, 802523e <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0xaa>
 80251d4:	f89e 6001 	ldrb.w	r6, [lr, #1]
 80251d8:	f853 6026 	ldr.w	r6, [r3, r6, lsl #2]
 80251dc:	3401      	adds	r4, #1
 80251de:	d432      	bmi.n	8025246 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0xb2>
 80251e0:	45a0      	cmp	r8, r4
 80251e2:	dd30      	ble.n	8025246 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0xb2>
 80251e4:	b397      	cbz	r7, 802524c <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0xb8>
 80251e6:	2d00      	cmp	r5, #0
 80251e8:	db2b      	blt.n	8025242 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0xae>
 80251ea:	45ac      	cmp	ip, r5
 80251ec:	dd29      	ble.n	8025242 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0xae>
 80251ee:	f81e 400c 	ldrb.w	r4, [lr, ip]
 80251f2:	f853 4024 	ldr.w	r4, [r3, r4, lsl #2]
 80251f6:	3501      	adds	r5, #1
 80251f8:	d42b      	bmi.n	8025252 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0xbe>
 80251fa:	45ac      	cmp	ip, r5
 80251fc:	dd29      	ble.n	8025252 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0xbe>
 80251fe:	b350      	cbz	r0, 8025256 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0xc2>
 8025200:	44f4      	add	ip, lr
 8025202:	f89c 5001 	ldrb.w	r5, [ip, #1]
 8025206:	f853 3025 	ldr.w	r3, [r3, r5, lsl #2]
 802520a:	280f      	cmp	r0, #15
 802520c:	ea4f 6b12 	mov.w	fp, r2, lsr #24
 8025210:	ea4f 6a16 	mov.w	sl, r6, lsr #24
 8025214:	ea4f 6914 	mov.w	r9, r4, lsr #24
 8025218:	ea4f 6813 	mov.w	r8, r3, lsr #24
 802521c:	d801      	bhi.n	8025222 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0x8e>
 802521e:	2f0f      	cmp	r7, #15
 8025220:	d91b      	bls.n	802525a <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0xc6>
 8025222:	4b8d      	ldr	r3, [pc, #564]	@ (8025458 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0x2c4>)
 8025224:	f44f 71fb 	mov.w	r1, #502	@ 0x1f6
 8025228:	4a8c      	ldr	r2, [pc, #560]	@ (802545c <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0x2c8>)
 802522a:	488d      	ldr	r0, [pc, #564]	@ (8025460 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0x2cc>)
 802522c:	f005 fd0a 	bl	802ac44 <__assert_func>
 8025230:	2200      	movs	r2, #0
 8025232:	e7ca      	b.n	80251ca <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0x36>
 8025234:	2600      	movs	r6, #0
 8025236:	4632      	mov	r2, r6
 8025238:	e7d0      	b.n	80251dc <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0x48>
 802523a:	2600      	movs	r6, #0
 802523c:	e7ce      	b.n	80251dc <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0x48>
 802523e:	4606      	mov	r6, r0
 8025240:	e7cc      	b.n	80251dc <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0x48>
 8025242:	2400      	movs	r4, #0
 8025244:	e7d7      	b.n	80251f6 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0x62>
 8025246:	2300      	movs	r3, #0
 8025248:	461c      	mov	r4, r3
 802524a:	e7de      	b.n	802520a <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0x76>
 802524c:	463b      	mov	r3, r7
 802524e:	463c      	mov	r4, r7
 8025250:	e7db      	b.n	802520a <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0x76>
 8025252:	2300      	movs	r3, #0
 8025254:	e7d9      	b.n	802520a <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0x76>
 8025256:	4603      	mov	r3, r0
 8025258:	e7d7      	b.n	802520a <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0x76>
 802525a:	b280      	uxth	r0, r0
 802525c:	b2bf      	uxth	r7, r7
 802525e:	fb07 fe00 	mul.w	lr, r7, r0
 8025262:	0100      	lsls	r0, r0, #4
 8025264:	ebce 1707 	rsb	r7, lr, r7, lsl #4
 8025268:	eba0 0c0e 	sub.w	ip, r0, lr
 802526c:	f5c0 7580 	rsb	r5, r0, #256	@ 0x100
 8025270:	b2bf      	uxth	r7, r7
 8025272:	fa1f fc8c 	uxth.w	ip, ip
 8025276:	1bed      	subs	r5, r5, r7
 8025278:	fb0a f00c 	mul.w	r0, sl, ip
 802527c:	b2ad      	uxth	r5, r5
 802527e:	fb0b 0005 	mla	r0, fp, r5, r0
 8025282:	fb07 0009 	mla	r0, r7, r9, r0
 8025286:	fb0e 0008 	mla	r0, lr, r8, r0
 802528a:	f3c0 2007 	ubfx	r0, r0, #8, #8
 802528e:	9001      	str	r0, [sp, #4]
 8025290:	2800      	cmp	r0, #0
 8025292:	f000 80de 	beq.w	8025452 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0x2be>
 8025296:	f1bb 0fff 	cmp.w	fp, #255	@ 0xff
 802529a:	d018      	beq.n	80252ce <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0x13a>
 802529c:	f002 10ff 	and.w	r0, r2, #16711935	@ 0xff00ff
 80252a0:	f402 427f 	and.w	r2, r2, #65280	@ 0xff00
 80252a4:	fb0b f000 	mul.w	r0, fp, r0
 80252a8:	fb0b fb02 	mul.w	fp, fp, r2
 80252ac:	0a02      	lsrs	r2, r0, #8
 80252ae:	f100 1001 	add.w	r0, r0, #65537	@ 0x10001
 80252b2:	f002 12ff 	and.w	r2, r2, #16711935	@ 0xff00ff
 80252b6:	4402      	add	r2, r0
 80252b8:	f50b 7080 	add.w	r0, fp, #256	@ 0x100
 80252bc:	eb00 201b 	add.w	r0, r0, fp, lsr #8
 80252c0:	0a12      	lsrs	r2, r2, #8
 80252c2:	0a00      	lsrs	r0, r0, #8
 80252c4:	f002 12ff 	and.w	r2, r2, #16711935	@ 0xff00ff
 80252c8:	f400 407f 	and.w	r0, r0, #65280	@ 0xff00
 80252cc:	4302      	orrs	r2, r0
 80252ce:	f1ba 0fff 	cmp.w	sl, #255	@ 0xff
 80252d2:	d01a      	beq.n	802530a <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0x176>
 80252d4:	f006 10ff 	and.w	r0, r6, #16711935	@ 0xff00ff
 80252d8:	f406 467f 	and.w	r6, r6, #65280	@ 0xff00
 80252dc:	fb0a f000 	mul.w	r0, sl, r0
 80252e0:	fb0a fa06 	mul.w	sl, sl, r6
 80252e4:	0a06      	lsrs	r6, r0, #8
 80252e6:	f100 1001 	add.w	r0, r0, #65537	@ 0x10001
 80252ea:	f006 16ff 	and.w	r6, r6, #16711935	@ 0xff00ff
 80252ee:	4406      	add	r6, r0
 80252f0:	f50a 7080 	add.w	r0, sl, #256	@ 0x100
 80252f4:	eb00 2a1a 	add.w	sl, r0, sl, lsr #8
 80252f8:	0a36      	lsrs	r6, r6, #8
 80252fa:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 80252fe:	f006 16ff 	and.w	r6, r6, #16711935	@ 0xff00ff
 8025302:	f40a 4a7f 	and.w	sl, sl, #65280	@ 0xff00
 8025306:	ea46 060a 	orr.w	r6, r6, sl
 802530a:	f1b9 0fff 	cmp.w	r9, #255	@ 0xff
 802530e:	d01b      	beq.n	8025348 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0x1b4>
 8025310:	f004 1aff 	and.w	sl, r4, #16711935	@ 0xff00ff
 8025314:	f404 447f 	and.w	r4, r4, #65280	@ 0xff00
 8025318:	fb09 fa0a 	mul.w	sl, r9, sl
 802531c:	fb09 f004 	mul.w	r0, r9, r4
 8025320:	ea4f 241a 	mov.w	r4, sl, lsr #8
 8025324:	f10a 1a01 	add.w	sl, sl, #65537	@ 0x10001
 8025328:	f500 7980 	add.w	r9, r0, #256	@ 0x100
 802532c:	f004 14ff 	and.w	r4, r4, #16711935	@ 0xff00ff
 8025330:	eb09 2910 	add.w	r9, r9, r0, lsr #8
 8025334:	4454      	add	r4, sl
 8025336:	ea4f 2919 	mov.w	r9, r9, lsr #8
 802533a:	0a24      	lsrs	r4, r4, #8
 802533c:	f409 497f 	and.w	r9, r9, #65280	@ 0xff00
 8025340:	f004 14ff 	and.w	r4, r4, #16711935	@ 0xff00ff
 8025344:	ea44 0409 	orr.w	r4, r4, r9
 8025348:	f1b8 0fff 	cmp.w	r8, #255	@ 0xff
 802534c:	d01b      	beq.n	8025386 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0x1f2>
 802534e:	f003 19ff 	and.w	r9, r3, #16711935	@ 0xff00ff
 8025352:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 8025356:	fb08 f909 	mul.w	r9, r8, r9
 802535a:	fb08 f003 	mul.w	r0, r8, r3
 802535e:	ea4f 2319 	mov.w	r3, r9, lsr #8
 8025362:	f109 1901 	add.w	r9, r9, #65537	@ 0x10001
 8025366:	f500 7880 	add.w	r8, r0, #256	@ 0x100
 802536a:	f003 13ff 	and.w	r3, r3, #16711935	@ 0xff00ff
 802536e:	eb08 2810 	add.w	r8, r8, r0, lsr #8
 8025372:	444b      	add	r3, r9
 8025374:	ea4f 2818 	mov.w	r8, r8, lsr #8
 8025378:	0a1b      	lsrs	r3, r3, #8
 802537a:	f408 487f 	and.w	r8, r8, #65280	@ 0xff00
 802537e:	f003 13ff 	and.w	r3, r3, #16711935	@ 0xff00ff
 8025382:	ea43 0308 	orr.w	r3, r3, r8
 8025386:	f006 18ff 	and.w	r8, r6, #16711935	@ 0xff00ff
 802538a:	f406 467f 	and.w	r6, r6, #65280	@ 0xff00
 802538e:	f002 19ff 	and.w	r9, r2, #16711935	@ 0xff00ff
 8025392:	f402 427f 	and.w	r2, r2, #65280	@ 0xff00
 8025396:	fb0c f808 	mul.w	r8, ip, r8
 802539a:	8808      	ldrh	r0, [r1, #0]
 802539c:	fb0c f606 	mul.w	r6, ip, r6
 80253a0:	fb05 8909 	mla	r9, r5, r9, r8
 80253a4:	f004 18ff 	and.w	r8, r4, #16711935	@ 0xff00ff
 80253a8:	fb05 6502 	mla	r5, r5, r2, r6
 80253ac:	f404 447f 	and.w	r4, r4, #65280	@ 0xff00
 80253b0:	fb07 9908 	mla	r9, r7, r8, r9
 80253b4:	f89d 6048 	ldrb.w	r6, [sp, #72]	@ 0x48
 80253b8:	fb07 5704 	mla	r7, r7, r4, r5
 80253bc:	f003 18ff 	and.w	r8, r3, #16711935	@ 0xff00ff
 80253c0:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 80253c4:	b2b6      	uxth	r6, r6
 80253c6:	fb0e 9808 	mla	r8, lr, r8, r9
 80253ca:	9a01      	ldr	r2, [sp, #4]
 80253cc:	fb0e 7e03 	mla	lr, lr, r3, r7
 80253d0:	1205      	asrs	r5, r0, #8
 80253d2:	4372      	muls	r2, r6
 80253d4:	ea4f 2818 	mov.w	r8, r8, lsr #8
 80253d8:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 80253dc:	f005 05f8 	and.w	r5, r5, #248	@ 0xf8
 80253e0:	1c53      	adds	r3, r2, #1
 80253e2:	f008 18ff 	and.w	r8, r8, #16711935	@ 0xff00ff
 80253e6:	f40e 4e7f 	and.w	lr, lr, #65280	@ 0xff00
 80253ea:	eb03 2312 	add.w	r3, r3, r2, lsr #8
 80253ee:	ea48 0e0e 	orr.w	lr, r8, lr
 80253f2:	ea6f 2313 	mvn.w	r3, r3, lsr #8
 80253f6:	ea4f 421e 	mov.w	r2, lr, lsr #16
 80253fa:	f3ce 2407 	ubfx	r4, lr, #8, #8
 80253fe:	b2db      	uxtb	r3, r3
 8025400:	fb12 f206 	smulbb	r2, r2, r6
 8025404:	fa5f fe8e 	uxtb.w	lr, lr
 8025408:	fb14 f406 	smulbb	r4, r4, r6
 802540c:	fb05 2503 	mla	r5, r5, r3, r2
 8025410:	10c2      	asrs	r2, r0, #3
 8025412:	fb1e fe06 	smulbb	lr, lr, r6
 8025416:	00c0      	lsls	r0, r0, #3
 8025418:	f002 02fc 	and.w	r2, r2, #252	@ 0xfc
 802541c:	b2ad      	uxth	r5, r5
 802541e:	b2c0      	uxtb	r0, r0
 8025420:	fb02 4203 	mla	r2, r2, r3, r4
 8025424:	fb00 e303 	mla	r3, r0, r3, lr
 8025428:	b294      	uxth	r4, r2
 802542a:	b298      	uxth	r0, r3
 802542c:	1c6b      	adds	r3, r5, #1
 802542e:	1c62      	adds	r2, r4, #1
 8025430:	eb03 2515 	add.w	r5, r3, r5, lsr #8
 8025434:	1c43      	adds	r3, r0, #1
 8025436:	eb02 2214 	add.w	r2, r2, r4, lsr #8
 802543a:	eb03 2310 	add.w	r3, r3, r0, lsr #8
 802543e:	f405 4578 	and.w	r5, r5, #63488	@ 0xf800
 8025442:	0952      	lsrs	r2, r2, #5
 8025444:	f3c3 23c4 	ubfx	r3, r3, #11, #5
 8025448:	f402 62fc 	and.w	r2, r2, #2016	@ 0x7e0
 802544c:	432b      	orrs	r3, r5
 802544e:	4313      	orrs	r3, r2
 8025450:	800b      	strh	r3, [r1, #0]
 8025452:	b003      	add	sp, #12
 8025454:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8025458:	0802fed5 	.word	0x0802fed5
 802545c:	080304a2 	.word	0x080304a2
 8025460:	0802ff59 	.word	0x0802ff59

08025464 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 8025464:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8025468:	ed2d 8b08 	vpush	{d8-d11}
 802546c:	b09f      	sub	sp, #124	@ 0x7c
 802546e:	eeb0 aa40 	vmov.f32	s20, s0
 8025472:	eef0 9a60 	vmov.f32	s19, s1
 8025476:	921b      	str	r2, [sp, #108]	@ 0x6c
 8025478:	eeb0 9a41 	vmov.f32	s18, s2
 802547c:	9a35      	ldr	r2, [sp, #212]	@ 0xd4
 802547e:	eeb0 8a62 	vmov.f32	s16, s5
 8025482:	9309      	str	r3, [sp, #36]	@ 0x24
 8025484:	eef0 8a43 	vmov.f32	s17, s6
 8025488:	f89d 30e4 	ldrb.w	r3, [sp, #228]	@ 0xe4
 802548c:	eef0 ba44 	vmov.f32	s23, s8
 8025490:	901d      	str	r0, [sp, #116]	@ 0x74
 8025492:	eeb0 ba64 	vmov.f32	s22, s9
 8025496:	931c      	str	r3, [sp, #112]	@ 0x70
 8025498:	eef0 aa45 	vmov.f32	s21, s10
 802549c:	6850      	ldr	r0, [r2, #4]
 802549e:	9119      	str	r1, [sp, #100]	@ 0x64
 80254a0:	6812      	ldr	r2, [r2, #0]
 80254a2:	9d32      	ldr	r5, [sp, #200]	@ 0xc8
 80254a4:	e9dd 1336 	ldrd	r1, r3, [sp, #216]	@ 0xd8
 80254a8:	fb00 1303 	mla	r3, r0, r3, r1
 80254ac:	eb02 0343 	add.w	r3, r2, r3, lsl #1
 80254b0:	930c      	str	r3, [sp, #48]	@ 0x30
 80254b2:	9b38      	ldr	r3, [sp, #224]	@ 0xe0
 80254b4:	681b      	ldr	r3, [r3, #0]
 80254b6:	9312      	str	r3, [sp, #72]	@ 0x48
 80254b8:	9b38      	ldr	r3, [sp, #224]	@ 0xe0
 80254ba:	685e      	ldr	r6, [r3, #4]
 80254bc:	f8bd 3070 	ldrh.w	r3, [sp, #112]	@ 0x70
 80254c0:	3604      	adds	r6, #4
 80254c2:	930d      	str	r3, [sp, #52]	@ 0x34
 80254c4:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 80254c6:	2b00      	cmp	r3, #0
 80254c8:	dc03      	bgt.n	80254d2 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6e>
 80254ca:	9b1b      	ldr	r3, [sp, #108]	@ 0x6c
 80254cc:	2b00      	cmp	r3, #0
 80254ce:	f340 8387 	ble.w	8025be0 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x77c>
 80254d2:	9b38      	ldr	r3, [sp, #224]	@ 0xe0
 80254d4:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 80254d8:	f9b3 200c 	ldrsh.w	r2, [r3, #12]
 80254dc:	1e48      	subs	r0, r1, #1
 80254de:	1e57      	subs	r7, r2, #1
 80254e0:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80254e2:	2b00      	cmp	r3, #0
 80254e4:	f340 8194 	ble.w	8025810 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3ac>
 80254e8:	9c31      	ldr	r4, [sp, #196]	@ 0xc4
 80254ea:	142b      	asrs	r3, r5, #16
 80254ec:	ea5f 4c24 	movs.w	ip, r4, asr #16
 80254f0:	d406      	bmi.n	8025500 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x9c>
 80254f2:	4584      	cmp	ip, r0
 80254f4:	da04      	bge.n	8025500 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x9c>
 80254f6:	2b00      	cmp	r3, #0
 80254f8:	db02      	blt.n	8025500 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x9c>
 80254fa:	42bb      	cmp	r3, r7
 80254fc:	f2c0 8189 	blt.w	8025812 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3ae>
 8025500:	f11c 0c01 	adds.w	ip, ip, #1
 8025504:	f100 8177 	bmi.w	80257f6 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x392>
 8025508:	4561      	cmp	r1, ip
 802550a:	f2c0 8174 	blt.w	80257f6 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x392>
 802550e:	3301      	adds	r3, #1
 8025510:	f100 8171 	bmi.w	80257f6 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x392>
 8025514:	429a      	cmp	r2, r3
 8025516:	f2c0 816e 	blt.w	80257f6 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x392>
 802551a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 802551c:	9f0c      	ldr	r7, [sp, #48]	@ 0x30
 802551e:	931a      	str	r3, [sp, #104]	@ 0x68
 8025520:	9b1a      	ldr	r3, [sp, #104]	@ 0x68
 8025522:	2b00      	cmp	r3, #0
 8025524:	f340 8193 	ble.w	802584e <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3ea>
 8025528:	9b31      	ldr	r3, [sp, #196]	@ 0xc4
 802552a:	ea4f 4c25 	mov.w	ip, r5, asr #16
 802552e:	f3c5 3103 	ubfx	r1, r5, #12, #4
 8025532:	f3c3 3203 	ubfx	r2, r3, #12, #4
 8025536:	9b38      	ldr	r3, [sp, #224]	@ 0xe0
 8025538:	e9d3 0e02 	ldrd	r0, lr, [r3, #8]
 802553c:	9b31      	ldr	r3, [sp, #196]	@ 0xc4
 802553e:	141b      	asrs	r3, r3, #16
 8025540:	f100 81d6 	bmi.w	80258f0 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x48c>
 8025544:	f100 38ff 	add.w	r8, r0, #4294967295
 8025548:	4543      	cmp	r3, r8
 802554a:	f280 81d1 	bge.w	80258f0 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x48c>
 802554e:	f1bc 0f00 	cmp.w	ip, #0
 8025552:	f2c0 81cd 	blt.w	80258f0 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x48c>
 8025556:	f10e 38ff 	add.w	r8, lr, #4294967295
 802555a:	45c4      	cmp	ip, r8
 802555c:	f280 81c8 	bge.w	80258f0 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x48c>
 8025560:	b200      	sxth	r0, r0
 8025562:	9c12      	ldr	r4, [sp, #72]	@ 0x48
 8025564:	fb0c 3300 	mla	r3, ip, r0, r3
 8025568:	eb04 0803 	add.w	r8, r4, r3
 802556c:	5ce3      	ldrb	r3, [r4, r3]
 802556e:	f856 3023 	ldr.w	r3, [r6, r3, lsl #2]
 8025572:	ea4f 6e13 	mov.w	lr, r3, lsr #24
 8025576:	2a00      	cmp	r2, #0
 8025578:	f000 81af 	beq.w	80258da <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x476>
 802557c:	f898 c001 	ldrb.w	ip, [r8, #1]
 8025580:	f856 402c 	ldr.w	r4, [r6, ip, lsl #2]
 8025584:	940e      	str	r4, [sp, #56]	@ 0x38
 8025586:	0e24      	lsrs	r4, r4, #24
 8025588:	9415      	str	r4, [sp, #84]	@ 0x54
 802558a:	b179      	cbz	r1, 80255ac <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x148>
 802558c:	eb08 0c00 	add.w	ip, r8, r0
 8025590:	f818 0000 	ldrb.w	r0, [r8, r0]
 8025594:	f856 0020 	ldr.w	r0, [r6, r0, lsl #2]
 8025598:	900a      	str	r0, [sp, #40]	@ 0x28
 802559a:	0e00      	lsrs	r0, r0, #24
 802559c:	9013      	str	r0, [sp, #76]	@ 0x4c
 802559e:	f89c 0001 	ldrb.w	r0, [ip, #1]
 80255a2:	f856 0020 	ldr.w	r0, [r6, r0, lsl #2]
 80255a6:	900f      	str	r0, [sp, #60]	@ 0x3c
 80255a8:	0e00      	lsrs	r0, r0, #24
 80255aa:	9016      	str	r0, [sp, #88]	@ 0x58
 80255ac:	b292      	uxth	r2, r2
 80255ae:	9815      	ldr	r0, [sp, #84]	@ 0x54
 80255b0:	b289      	uxth	r1, r1
 80255b2:	9c13      	ldr	r4, [sp, #76]	@ 0x4c
 80255b4:	fb02 f901 	mul.w	r9, r2, r1
 80255b8:	0112      	lsls	r2, r2, #4
 80255ba:	ebc9 1101 	rsb	r1, r9, r1, lsl #4
 80255be:	eba2 0809 	sub.w	r8, r2, r9
 80255c2:	f5c2 7280 	rsb	r2, r2, #256	@ 0x100
 80255c6:	b289      	uxth	r1, r1
 80255c8:	fa1f f888 	uxth.w	r8, r8
 80255cc:	1a52      	subs	r2, r2, r1
 80255ce:	fb08 f000 	mul.w	r0, r8, r0
 80255d2:	b292      	uxth	r2, r2
 80255d4:	fb02 000e 	mla	r0, r2, lr, r0
 80255d8:	fb01 0004 	mla	r0, r1, r4, r0
 80255dc:	9c16      	ldr	r4, [sp, #88]	@ 0x58
 80255de:	fb09 0004 	mla	r0, r9, r4, r0
 80255e2:	f3c0 2007 	ubfx	r0, r0, #8, #8
 80255e6:	2800      	cmp	r0, #0
 80255e8:	f000 80fa 	beq.w	80257e0 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x37c>
 80255ec:	f1be 0fff 	cmp.w	lr, #255	@ 0xff
 80255f0:	d01b      	beq.n	802562a <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1c6>
 80255f2:	f003 1aff 	and.w	sl, r3, #16711935	@ 0xff00ff
 80255f6:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 80255fa:	fb0e fa0a 	mul.w	sl, lr, sl
 80255fe:	fb0e fe03 	mul.w	lr, lr, r3
 8025602:	ea4f 231a 	mov.w	r3, sl, lsr #8
 8025606:	f10a 1a01 	add.w	sl, sl, #65537	@ 0x10001
 802560a:	f50e 7c80 	add.w	ip, lr, #256	@ 0x100
 802560e:	f003 13ff 	and.w	r3, r3, #16711935	@ 0xff00ff
 8025612:	eb0c 2c1e 	add.w	ip, ip, lr, lsr #8
 8025616:	4453      	add	r3, sl
 8025618:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 802561c:	0a1b      	lsrs	r3, r3, #8
 802561e:	f40c 4c7f 	and.w	ip, ip, #65280	@ 0xff00
 8025622:	f003 13ff 	and.w	r3, r3, #16711935	@ 0xff00ff
 8025626:	ea43 030c 	orr.w	r3, r3, ip
 802562a:	9c15      	ldr	r4, [sp, #84]	@ 0x54
 802562c:	2cff      	cmp	r4, #255	@ 0xff
 802562e:	d021      	beq.n	8025674 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x210>
 8025630:	9c0e      	ldr	r4, [sp, #56]	@ 0x38
 8025632:	f004 1bff 	and.w	fp, r4, #16711935	@ 0xff00ff
 8025636:	9c15      	ldr	r4, [sp, #84]	@ 0x54
 8025638:	fb04 fb0b 	mul.w	fp, r4, fp
 802563c:	9c0e      	ldr	r4, [sp, #56]	@ 0x38
 802563e:	f404 4a7f 	and.w	sl, r4, #65280	@ 0xff00
 8025642:	9c15      	ldr	r4, [sp, #84]	@ 0x54
 8025644:	ea4f 2e1b 	mov.w	lr, fp, lsr #8
 8025648:	f10b 1b01 	add.w	fp, fp, #65537	@ 0x10001
 802564c:	fb04 fa0a 	mul.w	sl, r4, sl
 8025650:	f00e 1eff 	and.w	lr, lr, #16711935	@ 0xff00ff
 8025654:	f50a 7c80 	add.w	ip, sl, #256	@ 0x100
 8025658:	44de      	add	lr, fp
 802565a:	eb0c 2a1a 	add.w	sl, ip, sl, lsr #8
 802565e:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 8025662:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 8025666:	f00e 1eff 	and.w	lr, lr, #16711935	@ 0xff00ff
 802566a:	f40a 4a7f 	and.w	sl, sl, #65280	@ 0xff00
 802566e:	ea4e 040a 	orr.w	r4, lr, sl
 8025672:	940e      	str	r4, [sp, #56]	@ 0x38
 8025674:	9c13      	ldr	r4, [sp, #76]	@ 0x4c
 8025676:	2cff      	cmp	r4, #255	@ 0xff
 8025678:	d021      	beq.n	80256be <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x25a>
 802567a:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 802567c:	f004 1bff 	and.w	fp, r4, #16711935	@ 0xff00ff
 8025680:	9c13      	ldr	r4, [sp, #76]	@ 0x4c
 8025682:	fb04 fb0b 	mul.w	fp, r4, fp
 8025686:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 8025688:	f404 4a7f 	and.w	sl, r4, #65280	@ 0xff00
 802568c:	9c13      	ldr	r4, [sp, #76]	@ 0x4c
 802568e:	ea4f 2e1b 	mov.w	lr, fp, lsr #8
 8025692:	f10b 1b01 	add.w	fp, fp, #65537	@ 0x10001
 8025696:	fb04 fa0a 	mul.w	sl, r4, sl
 802569a:	f00e 1eff 	and.w	lr, lr, #16711935	@ 0xff00ff
 802569e:	f50a 7c80 	add.w	ip, sl, #256	@ 0x100
 80256a2:	44de      	add	lr, fp
 80256a4:	eb0c 2a1a 	add.w	sl, ip, sl, lsr #8
 80256a8:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 80256ac:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 80256b0:	f00e 1eff 	and.w	lr, lr, #16711935	@ 0xff00ff
 80256b4:	f40a 4a7f 	and.w	sl, sl, #65280	@ 0xff00
 80256b8:	ea4e 040a 	orr.w	r4, lr, sl
 80256bc:	940a      	str	r4, [sp, #40]	@ 0x28
 80256be:	9c16      	ldr	r4, [sp, #88]	@ 0x58
 80256c0:	2cff      	cmp	r4, #255	@ 0xff
 80256c2:	d021      	beq.n	8025708 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2a4>
 80256c4:	9c0f      	ldr	r4, [sp, #60]	@ 0x3c
 80256c6:	f004 1bff 	and.w	fp, r4, #16711935	@ 0xff00ff
 80256ca:	9c16      	ldr	r4, [sp, #88]	@ 0x58
 80256cc:	fb04 fb0b 	mul.w	fp, r4, fp
 80256d0:	9c0f      	ldr	r4, [sp, #60]	@ 0x3c
 80256d2:	f404 4a7f 	and.w	sl, r4, #65280	@ 0xff00
 80256d6:	9c16      	ldr	r4, [sp, #88]	@ 0x58
 80256d8:	ea4f 2e1b 	mov.w	lr, fp, lsr #8
 80256dc:	f10b 1b01 	add.w	fp, fp, #65537	@ 0x10001
 80256e0:	fb04 fa0a 	mul.w	sl, r4, sl
 80256e4:	f00e 1eff 	and.w	lr, lr, #16711935	@ 0xff00ff
 80256e8:	f50a 7c80 	add.w	ip, sl, #256	@ 0x100
 80256ec:	44de      	add	lr, fp
 80256ee:	eb0c 2a1a 	add.w	sl, ip, sl, lsr #8
 80256f2:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 80256f6:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 80256fa:	f00e 1eff 	and.w	lr, lr, #16711935	@ 0xff00ff
 80256fe:	f40a 4a7f 	and.w	sl, sl, #65280	@ 0xff00
 8025702:	ea4e 040a 	orr.w	r4, lr, sl
 8025706:	940f      	str	r4, [sp, #60]	@ 0x3c
 8025708:	9c0e      	ldr	r4, [sp, #56]	@ 0x38
 802570a:	f003 1eff 	and.w	lr, r3, #16711935	@ 0xff00ff
 802570e:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 8025712:	f004 1cff 	and.w	ip, r4, #16711935	@ 0xff00ff
 8025716:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 8025718:	fb08 fc0c 	mul.w	ip, r8, ip
 802571c:	fb02 cc0e 	mla	ip, r2, lr, ip
 8025720:	f004 1eff 	and.w	lr, r4, #16711935	@ 0xff00ff
 8025724:	9c0f      	ldr	r4, [sp, #60]	@ 0x3c
 8025726:	fb01 cc0e 	mla	ip, r1, lr, ip
 802572a:	f004 1eff 	and.w	lr, r4, #16711935	@ 0xff00ff
 802572e:	9c0e      	ldr	r4, [sp, #56]	@ 0x38
 8025730:	fb09 cc0e 	mla	ip, r9, lr, ip
 8025734:	f404 4e7f 	and.w	lr, r4, #65280	@ 0xff00
 8025738:	9c0d      	ldr	r4, [sp, #52]	@ 0x34
 802573a:	fb08 f80e 	mul.w	r8, r8, lr
 802573e:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 8025742:	fb02 8303 	mla	r3, r2, r3, r8
 8025746:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8025748:	f00c 1cff 	and.w	ip, ip, #16711935	@ 0xff00ff
 802574c:	f402 4a7f 	and.w	sl, r2, #65280	@ 0xff00
 8025750:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 8025752:	fb01 330a 	mla	r3, r1, sl, r3
 8025756:	f402 417f 	and.w	r1, r2, #65280	@ 0xff00
 802575a:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 802575c:	fb09 3901 	mla	r9, r9, r1, r3
 8025760:	883b      	ldrh	r3, [r7, #0]
 8025762:	4342      	muls	r2, r0
 8025764:	ea4f 2919 	mov.w	r9, r9, lsr #8
 8025768:	1c50      	adds	r0, r2, #1
 802576a:	1219      	asrs	r1, r3, #8
 802576c:	f409 497f 	and.w	r9, r9, #65280	@ 0xff00
 8025770:	eb00 2012 	add.w	r0, r0, r2, lsr #8
 8025774:	f001 01f8 	and.w	r1, r1, #248	@ 0xf8
 8025778:	ea4c 0c09 	orr.w	ip, ip, r9
 802577c:	ea6f 2010 	mvn.w	r0, r0, lsr #8
 8025780:	ea4f 421c 	mov.w	r2, ip, lsr #16
 8025784:	f3cc 2e07 	ubfx	lr, ip, #8, #8
 8025788:	b2c0      	uxtb	r0, r0
 802578a:	fb12 f204 	smulbb	r2, r2, r4
 802578e:	fa5f fc8c 	uxtb.w	ip, ip
 8025792:	fb1e fe04 	smulbb	lr, lr, r4
 8025796:	fb01 2100 	mla	r1, r1, r0, r2
 802579a:	10da      	asrs	r2, r3, #3
 802579c:	fb1c fc04 	smulbb	ip, ip, r4
 80257a0:	00db      	lsls	r3, r3, #3
 80257a2:	b289      	uxth	r1, r1
 80257a4:	f002 02fc 	and.w	r2, r2, #252	@ 0xfc
 80257a8:	b2db      	uxtb	r3, r3
 80257aa:	fb02 e200 	mla	r2, r2, r0, lr
 80257ae:	fb03 c300 	mla	r3, r3, r0, ip
 80257b2:	b292      	uxth	r2, r2
 80257b4:	fa1f fc83 	uxth.w	ip, r3
 80257b8:	1c4b      	adds	r3, r1, #1
 80257ba:	eb03 2111 	add.w	r1, r3, r1, lsr #8
 80257be:	f10c 0301 	add.w	r3, ip, #1
 80257c2:	eb03 231c 	add.w	r3, r3, ip, lsr #8
 80257c6:	f401 4178 	and.w	r1, r1, #63488	@ 0xf800
 80257ca:	f3c3 23c4 	ubfx	r3, r3, #11, #5
 80257ce:	430b      	orrs	r3, r1
 80257d0:	1c51      	adds	r1, r2, #1
 80257d2:	eb01 2212 	add.w	r2, r1, r2, lsr #8
 80257d6:	0952      	lsrs	r2, r2, #5
 80257d8:	f402 62fc 	and.w	r2, r2, #2016	@ 0x7e0
 80257dc:	4313      	orrs	r3, r2
 80257de:	803b      	strh	r3, [r7, #0]
 80257e0:	9b33      	ldr	r3, [sp, #204]	@ 0xcc
 80257e2:	3702      	adds	r7, #2
 80257e4:	9a31      	ldr	r2, [sp, #196]	@ 0xc4
 80257e6:	441a      	add	r2, r3
 80257e8:	9b34      	ldr	r3, [sp, #208]	@ 0xd0
 80257ea:	441d      	add	r5, r3
 80257ec:	9b1a      	ldr	r3, [sp, #104]	@ 0x68
 80257ee:	9231      	str	r2, [sp, #196]	@ 0xc4
 80257f0:	3b01      	subs	r3, #1
 80257f2:	931a      	str	r3, [sp, #104]	@ 0x68
 80257f4:	e694      	b.n	8025520 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xbc>
 80257f6:	9b33      	ldr	r3, [sp, #204]	@ 0xcc
 80257f8:	9c31      	ldr	r4, [sp, #196]	@ 0xc4
 80257fa:	441c      	add	r4, r3
 80257fc:	9b34      	ldr	r3, [sp, #208]	@ 0xd0
 80257fe:	441d      	add	r5, r3
 8025800:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8025802:	9431      	str	r4, [sp, #196]	@ 0xc4
 8025804:	3b01      	subs	r3, #1
 8025806:	9309      	str	r3, [sp, #36]	@ 0x24
 8025808:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 802580a:	3302      	adds	r3, #2
 802580c:	930c      	str	r3, [sp, #48]	@ 0x30
 802580e:	e667      	b.n	80254e0 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7c>
 8025810:	d024      	beq.n	802585c <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3f8>
 8025812:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8025814:	9833      	ldr	r0, [sp, #204]	@ 0xcc
 8025816:	3b01      	subs	r3, #1
 8025818:	9c31      	ldr	r4, [sp, #196]	@ 0xc4
 802581a:	fb00 4003 	mla	r0, r0, r3, r4
 802581e:	1400      	asrs	r0, r0, #16
 8025820:	f53f ae7b 	bmi.w	802551a <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xb6>
 8025824:	3901      	subs	r1, #1
 8025826:	4288      	cmp	r0, r1
 8025828:	f6bf ae77 	bge.w	802551a <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xb6>
 802582c:	9934      	ldr	r1, [sp, #208]	@ 0xd0
 802582e:	fb01 5303 	mla	r3, r1, r3, r5
 8025832:	141b      	asrs	r3, r3, #16
 8025834:	f53f ae71 	bmi.w	802551a <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xb6>
 8025838:	3a01      	subs	r2, #1
 802583a:	4293      	cmp	r3, r2
 802583c:	f6bf ae6d 	bge.w	802551a <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xb6>
 8025840:	f8dd b024 	ldr.w	fp, [sp, #36]	@ 0x24
 8025844:	f8dd 9030 	ldr.w	r9, [sp, #48]	@ 0x30
 8025848:	f1bb 0f00 	cmp.w	fp, #0
 802584c:	dc70      	bgt.n	8025930 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4cc>
 802584e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8025850:	ea23 74e3 	bic.w	r4, r3, r3, asr #31
 8025854:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8025856:	eb03 0344 	add.w	r3, r3, r4, lsl #1
 802585a:	930c      	str	r3, [sp, #48]	@ 0x30
 802585c:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 802585e:	2b00      	cmp	r3, #0
 8025860:	f340 81be 	ble.w	8025be0 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x77c>
 8025864:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8025868:	9b30      	ldr	r3, [sp, #192]	@ 0xc0
 802586a:	ee3a aa2b 	vadd.f32	s20, s20, s23
 802586e:	ee79 9a8b 	vadd.f32	s19, s19, s22
 8025872:	eef0 6a48 	vmov.f32	s13, s16
 8025876:	eec7 7a0a 	vdiv.f32	s15, s14, s20
 802587a:	ee39 9a2a 	vadd.f32	s18, s18, s21
 802587e:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 8025882:	edcd 6a31 	vstr	s13, [sp, #196]	@ 0xc4
 8025886:	eef0 6a68 	vmov.f32	s13, s17
 802588a:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 802588e:	ee16 5a90 	vmov	r5, s13
 8025892:	ee29 7aa7 	vmul.f32	s14, s19, s15
 8025896:	ee69 7a27 	vmul.f32	s15, s18, s15
 802589a:	ee37 8a48 	vsub.f32	s16, s14, s16
 802589e:	ee77 8ae8 	vsub.f32	s17, s15, s17
 80258a2:	eebe 8ac8 	vcvt.s32.f32	s16, s16, #16
 80258a6:	eefe 8ac8 	vcvt.s32.f32	s17, s17, #16
 80258aa:	ee18 2a10 	vmov	r2, s16
 80258ae:	eeb0 8a47 	vmov.f32	s16, s14
 80258b2:	fb92 f3f3 	sdiv	r3, r2, r3
 80258b6:	ee18 2a90 	vmov	r2, s17
 80258ba:	9333      	str	r3, [sp, #204]	@ 0xcc
 80258bc:	9b30      	ldr	r3, [sp, #192]	@ 0xc0
 80258be:	eef0 8a67 	vmov.f32	s17, s15
 80258c2:	fb92 f3f3 	sdiv	r3, r2, r3
 80258c6:	9334      	str	r3, [sp, #208]	@ 0xd0
 80258c8:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 80258ca:	9a1b      	ldr	r2, [sp, #108]	@ 0x6c
 80258cc:	3b01      	subs	r3, #1
 80258ce:	9319      	str	r3, [sp, #100]	@ 0x64
 80258d0:	9b30      	ldr	r3, [sp, #192]	@ 0xc0
 80258d2:	bf08      	it	eq
 80258d4:	4613      	moveq	r3, r2
 80258d6:	9309      	str	r3, [sp, #36]	@ 0x24
 80258d8:	e5f4      	b.n	80254c4 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x60>
 80258da:	2900      	cmp	r1, #0
 80258dc:	f43f ae66 	beq.w	80255ac <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x148>
 80258e0:	f818 0000 	ldrb.w	r0, [r8, r0]
 80258e4:	f856 0020 	ldr.w	r0, [r6, r0, lsl #2]
 80258e8:	900a      	str	r0, [sp, #40]	@ 0x28
 80258ea:	0e00      	lsrs	r0, r0, #24
 80258ec:	9013      	str	r0, [sp, #76]	@ 0x4c
 80258ee:	e65d      	b.n	80255ac <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x148>
 80258f0:	f113 0801 	adds.w	r8, r3, #1
 80258f4:	f53f af74 	bmi.w	80257e0 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x37c>
 80258f8:	4540      	cmp	r0, r8
 80258fa:	f6ff af71 	blt.w	80257e0 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x37c>
 80258fe:	f11c 0801 	adds.w	r8, ip, #1
 8025902:	f53f af6d 	bmi.w	80257e0 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x37c>
 8025906:	45c6      	cmp	lr, r8
 8025908:	f6ff af6a 	blt.w	80257e0 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x37c>
 802590c:	9c1c      	ldr	r4, [sp, #112]	@ 0x70
 802590e:	b200      	sxth	r0, r0
 8025910:	9302      	str	r3, [sp, #8]
 8025912:	fa0f f38e 	sxth.w	r3, lr
 8025916:	9000      	str	r0, [sp, #0]
 8025918:	9301      	str	r3, [sp, #4]
 802591a:	4633      	mov	r3, r6
 802591c:	981d      	ldr	r0, [sp, #116]	@ 0x74
 802591e:	e9cd 1405 	strd	r1, r4, [sp, #20]
 8025922:	e9cd c203 	strd	ip, r2, [sp, #12]
 8025926:	4639      	mov	r1, r7
 8025928:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 802592a:	f7ff fc33 	bl	8025194 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh>
 802592e:	e757      	b.n	80257e0 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x37c>
 8025930:	9b31      	ldr	r3, [sp, #196]	@ 0xc4
 8025932:	f3c5 3003 	ubfx	r0, r5, #12, #4
 8025936:	9c31      	ldr	r4, [sp, #196]	@ 0xc4
 8025938:	f3c3 3203 	ubfx	r2, r3, #12, #4
 802593c:	9b38      	ldr	r3, [sp, #224]	@ 0xe0
 802593e:	1427      	asrs	r7, r4, #16
 8025940:	9c12      	ldr	r4, [sp, #72]	@ 0x48
 8025942:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 8025946:	142b      	asrs	r3, r5, #16
 8025948:	fb01 7303 	mla	r3, r1, r3, r7
 802594c:	18e7      	adds	r7, r4, r3
 802594e:	5ce3      	ldrb	r3, [r4, r3]
 8025950:	f856 3023 	ldr.w	r3, [r6, r3, lsl #2]
 8025954:	ea4f 6c13 	mov.w	ip, r3, lsr #24
 8025958:	2a00      	cmp	r2, #0
 802595a:	f000 8137 	beq.w	8025bcc <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x768>
 802595e:	f897 e001 	ldrb.w	lr, [r7, #1]
 8025962:	f856 402e 	ldr.w	r4, [r6, lr, lsl #2]
 8025966:	9410      	str	r4, [sp, #64]	@ 0x40
 8025968:	0e24      	lsrs	r4, r4, #24
 802596a:	9417      	str	r4, [sp, #92]	@ 0x5c
 802596c:	b170      	cbz	r0, 802598c <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x528>
 802596e:	eb07 0e01 	add.w	lr, r7, r1
 8025972:	5c79      	ldrb	r1, [r7, r1]
 8025974:	f856 1021 	ldr.w	r1, [r6, r1, lsl #2]
 8025978:	910b      	str	r1, [sp, #44]	@ 0x2c
 802597a:	0e09      	lsrs	r1, r1, #24
 802597c:	9114      	str	r1, [sp, #80]	@ 0x50
 802597e:	f89e 1001 	ldrb.w	r1, [lr, #1]
 8025982:	f856 1021 	ldr.w	r1, [r6, r1, lsl #2]
 8025986:	9111      	str	r1, [sp, #68]	@ 0x44
 8025988:	0e09      	lsrs	r1, r1, #24
 802598a:	9118      	str	r1, [sp, #96]	@ 0x60
 802598c:	b292      	uxth	r2, r2
 802598e:	9917      	ldr	r1, [sp, #92]	@ 0x5c
 8025990:	b280      	uxth	r0, r0
 8025992:	9c14      	ldr	r4, [sp, #80]	@ 0x50
 8025994:	fb02 f800 	mul.w	r8, r2, r0
 8025998:	0112      	lsls	r2, r2, #4
 802599a:	ebc8 1000 	rsb	r0, r8, r0, lsl #4
 802599e:	eba2 0e08 	sub.w	lr, r2, r8
 80259a2:	f5c2 7280 	rsb	r2, r2, #256	@ 0x100
 80259a6:	b280      	uxth	r0, r0
 80259a8:	fa1f fe8e 	uxth.w	lr, lr
 80259ac:	1a12      	subs	r2, r2, r0
 80259ae:	fb0e f101 	mul.w	r1, lr, r1
 80259b2:	b292      	uxth	r2, r2
 80259b4:	fb02 110c 	mla	r1, r2, ip, r1
 80259b8:	fb00 1104 	mla	r1, r0, r4, r1
 80259bc:	9c18      	ldr	r4, [sp, #96]	@ 0x60
 80259be:	fb08 1104 	mla	r1, r8, r4, r1
 80259c2:	f3c1 2107 	ubfx	r1, r1, #8, #8
 80259c6:	2900      	cmp	r1, #0
 80259c8:	f000 80f5 	beq.w	8025bb6 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x752>
 80259cc:	f1bc 0fff 	cmp.w	ip, #255	@ 0xff
 80259d0:	d019      	beq.n	8025a06 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5a2>
 80259d2:	f003 1aff 	and.w	sl, r3, #16711935	@ 0xff00ff
 80259d6:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 80259da:	fb0c fa0a 	mul.w	sl, ip, sl
 80259de:	fb0c fc03 	mul.w	ip, ip, r3
 80259e2:	ea4f 231a 	mov.w	r3, sl, lsr #8
 80259e6:	f10a 1a01 	add.w	sl, sl, #65537	@ 0x10001
 80259ea:	f50c 7780 	add.w	r7, ip, #256	@ 0x100
 80259ee:	f003 13ff 	and.w	r3, r3, #16711935	@ 0xff00ff
 80259f2:	eb07 271c 	add.w	r7, r7, ip, lsr #8
 80259f6:	4453      	add	r3, sl
 80259f8:	0a3f      	lsrs	r7, r7, #8
 80259fa:	0a1b      	lsrs	r3, r3, #8
 80259fc:	f407 477f 	and.w	r7, r7, #65280	@ 0xff00
 8025a00:	f003 13ff 	and.w	r3, r3, #16711935	@ 0xff00ff
 8025a04:	433b      	orrs	r3, r7
 8025a06:	9c17      	ldr	r4, [sp, #92]	@ 0x5c
 8025a08:	2cff      	cmp	r4, #255	@ 0xff
 8025a0a:	d020      	beq.n	8025a4e <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5ea>
 8025a0c:	9c10      	ldr	r4, [sp, #64]	@ 0x40
 8025a0e:	f004 17ff 	and.w	r7, r4, #16711935	@ 0xff00ff
 8025a12:	9c17      	ldr	r4, [sp, #92]	@ 0x5c
 8025a14:	4367      	muls	r7, r4
 8025a16:	9c10      	ldr	r4, [sp, #64]	@ 0x40
 8025a18:	ea4f 2c17 	mov.w	ip, r7, lsr #8
 8025a1c:	f404 4a7f 	and.w	sl, r4, #65280	@ 0xff00
 8025a20:	9c17      	ldr	r4, [sp, #92]	@ 0x5c
 8025a22:	f107 1701 	add.w	r7, r7, #65537	@ 0x10001
 8025a26:	f00c 1cff 	and.w	ip, ip, #16711935	@ 0xff00ff
 8025a2a:	fb04 fa0a 	mul.w	sl, r4, sl
 8025a2e:	44bc      	add	ip, r7
 8025a30:	f50a 7780 	add.w	r7, sl, #256	@ 0x100
 8025a34:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 8025a38:	eb07 2a1a 	add.w	sl, r7, sl, lsr #8
 8025a3c:	f00c 1cff 	and.w	ip, ip, #16711935	@ 0xff00ff
 8025a40:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 8025a44:	f40a 4a7f 	and.w	sl, sl, #65280	@ 0xff00
 8025a48:	ea4c 040a 	orr.w	r4, ip, sl
 8025a4c:	9410      	str	r4, [sp, #64]	@ 0x40
 8025a4e:	9c14      	ldr	r4, [sp, #80]	@ 0x50
 8025a50:	2cff      	cmp	r4, #255	@ 0xff
 8025a52:	d020      	beq.n	8025a96 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x632>
 8025a54:	9c0b      	ldr	r4, [sp, #44]	@ 0x2c
 8025a56:	f004 17ff 	and.w	r7, r4, #16711935	@ 0xff00ff
 8025a5a:	9c14      	ldr	r4, [sp, #80]	@ 0x50
 8025a5c:	4367      	muls	r7, r4
 8025a5e:	9c0b      	ldr	r4, [sp, #44]	@ 0x2c
 8025a60:	ea4f 2c17 	mov.w	ip, r7, lsr #8
 8025a64:	f404 4a7f 	and.w	sl, r4, #65280	@ 0xff00
 8025a68:	9c14      	ldr	r4, [sp, #80]	@ 0x50
 8025a6a:	f107 1701 	add.w	r7, r7, #65537	@ 0x10001
 8025a6e:	f00c 1cff 	and.w	ip, ip, #16711935	@ 0xff00ff
 8025a72:	fb04 fa0a 	mul.w	sl, r4, sl
 8025a76:	44bc      	add	ip, r7
 8025a78:	f50a 7780 	add.w	r7, sl, #256	@ 0x100
 8025a7c:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 8025a80:	eb07 2a1a 	add.w	sl, r7, sl, lsr #8
 8025a84:	f00c 1cff 	and.w	ip, ip, #16711935	@ 0xff00ff
 8025a88:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 8025a8c:	f40a 4a7f 	and.w	sl, sl, #65280	@ 0xff00
 8025a90:	ea4c 040a 	orr.w	r4, ip, sl
 8025a94:	940b      	str	r4, [sp, #44]	@ 0x2c
 8025a96:	9c18      	ldr	r4, [sp, #96]	@ 0x60
 8025a98:	2cff      	cmp	r4, #255	@ 0xff
 8025a9a:	d020      	beq.n	8025ade <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x67a>
 8025a9c:	9c11      	ldr	r4, [sp, #68]	@ 0x44
 8025a9e:	f004 17ff 	and.w	r7, r4, #16711935	@ 0xff00ff
 8025aa2:	9c18      	ldr	r4, [sp, #96]	@ 0x60
 8025aa4:	4367      	muls	r7, r4
 8025aa6:	9c11      	ldr	r4, [sp, #68]	@ 0x44
 8025aa8:	ea4f 2c17 	mov.w	ip, r7, lsr #8
 8025aac:	f404 4a7f 	and.w	sl, r4, #65280	@ 0xff00
 8025ab0:	9c18      	ldr	r4, [sp, #96]	@ 0x60
 8025ab2:	f107 1701 	add.w	r7, r7, #65537	@ 0x10001
 8025ab6:	f00c 1cff 	and.w	ip, ip, #16711935	@ 0xff00ff
 8025aba:	fb04 fa0a 	mul.w	sl, r4, sl
 8025abe:	44bc      	add	ip, r7
 8025ac0:	f50a 7780 	add.w	r7, sl, #256	@ 0x100
 8025ac4:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 8025ac8:	eb07 2a1a 	add.w	sl, r7, sl, lsr #8
 8025acc:	f00c 1cff 	and.w	ip, ip, #16711935	@ 0xff00ff
 8025ad0:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 8025ad4:	f40a 4a7f 	and.w	sl, sl, #65280	@ 0xff00
 8025ad8:	ea4c 040a 	orr.w	r4, ip, sl
 8025adc:	9411      	str	r4, [sp, #68]	@ 0x44
 8025ade:	9c10      	ldr	r4, [sp, #64]	@ 0x40
 8025ae0:	f003 1cff 	and.w	ip, r3, #16711935	@ 0xff00ff
 8025ae4:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 8025ae8:	f004 17ff 	and.w	r7, r4, #16711935	@ 0xff00ff
 8025aec:	9c0b      	ldr	r4, [sp, #44]	@ 0x2c
 8025aee:	fb0e f707 	mul.w	r7, lr, r7
 8025af2:	fb02 770c 	mla	r7, r2, ip, r7
 8025af6:	f004 1cff 	and.w	ip, r4, #16711935	@ 0xff00ff
 8025afa:	9c11      	ldr	r4, [sp, #68]	@ 0x44
 8025afc:	fb00 770c 	mla	r7, r0, ip, r7
 8025b00:	f004 1cff 	and.w	ip, r4, #16711935	@ 0xff00ff
 8025b04:	9c10      	ldr	r4, [sp, #64]	@ 0x40
 8025b06:	fb08 770c 	mla	r7, r8, ip, r7
 8025b0a:	f404 4c7f 	and.w	ip, r4, #65280	@ 0xff00
 8025b0e:	9c0d      	ldr	r4, [sp, #52]	@ 0x34
 8025b10:	fb0e fe0c 	mul.w	lr, lr, ip
 8025b14:	0a3f      	lsrs	r7, r7, #8
 8025b16:	fb02 e303 	mla	r3, r2, r3, lr
 8025b1a:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 8025b1c:	f007 17ff 	and.w	r7, r7, #16711935	@ 0xff00ff
 8025b20:	f402 4a7f 	and.w	sl, r2, #65280	@ 0xff00
 8025b24:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 8025b26:	fb00 330a 	mla	r3, r0, sl, r3
 8025b2a:	f402 4c7f 	and.w	ip, r2, #65280	@ 0xff00
 8025b2e:	f8b9 0000 	ldrh.w	r0, [r9]
 8025b32:	fb08 3c0c 	mla	ip, r8, ip, r3
 8025b36:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8025b38:	1202      	asrs	r2, r0, #8
 8025b3a:	434b      	muls	r3, r1
 8025b3c:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 8025b40:	f002 02f8 	and.w	r2, r2, #248	@ 0xf8
 8025b44:	f40c 4c7f 	and.w	ip, ip, #65280	@ 0xff00
 8025b48:	1c59      	adds	r1, r3, #1
 8025b4a:	ea47 070c 	orr.w	r7, r7, ip
 8025b4e:	eb01 2113 	add.w	r1, r1, r3, lsr #8
 8025b52:	0c3b      	lsrs	r3, r7, #16
 8025b54:	ea6f 2111 	mvn.w	r1, r1, lsr #8
 8025b58:	f3c7 2c07 	ubfx	ip, r7, #8, #8
 8025b5c:	b2ff      	uxtb	r7, r7
 8025b5e:	fb13 f304 	smulbb	r3, r3, r4
 8025b62:	b2c9      	uxtb	r1, r1
 8025b64:	fb1c fc04 	smulbb	ip, ip, r4
 8025b68:	fb02 3201 	mla	r2, r2, r1, r3
 8025b6c:	10c3      	asrs	r3, r0, #3
 8025b6e:	fb17 f704 	smulbb	r7, r7, r4
 8025b72:	00c0      	lsls	r0, r0, #3
 8025b74:	b292      	uxth	r2, r2
 8025b76:	f003 03fc 	and.w	r3, r3, #252	@ 0xfc
 8025b7a:	b2c0      	uxtb	r0, r0
 8025b7c:	fb03 c301 	mla	r3, r3, r1, ip
 8025b80:	f102 0c01 	add.w	ip, r2, #1
 8025b84:	fb00 7001 	mla	r0, r0, r1, r7
 8025b88:	eb0c 2212 	add.w	r2, ip, r2, lsr #8
 8025b8c:	b280      	uxth	r0, r0
 8025b8e:	f402 4c78 	and.w	ip, r2, #63488	@ 0xf800
 8025b92:	b29b      	uxth	r3, r3
 8025b94:	1c42      	adds	r2, r0, #1
 8025b96:	eb02 2210 	add.w	r2, r2, r0, lsr #8
 8025b9a:	f3c2 22c4 	ubfx	r2, r2, #11, #5
 8025b9e:	ea42 020c 	orr.w	r2, r2, ip
 8025ba2:	f103 0c01 	add.w	ip, r3, #1
 8025ba6:	eb0c 2313 	add.w	r3, ip, r3, lsr #8
 8025baa:	095b      	lsrs	r3, r3, #5
 8025bac:	f403 63fc 	and.w	r3, r3, #2016	@ 0x7e0
 8025bb0:	431a      	orrs	r2, r3
 8025bb2:	f8a9 2000 	strh.w	r2, [r9]
 8025bb6:	9b33      	ldr	r3, [sp, #204]	@ 0xcc
 8025bb8:	f109 0902 	add.w	r9, r9, #2
 8025bbc:	9a31      	ldr	r2, [sp, #196]	@ 0xc4
 8025bbe:	f10b 3bff 	add.w	fp, fp, #4294967295
 8025bc2:	441a      	add	r2, r3
 8025bc4:	9b34      	ldr	r3, [sp, #208]	@ 0xd0
 8025bc6:	9231      	str	r2, [sp, #196]	@ 0xc4
 8025bc8:	441d      	add	r5, r3
 8025bca:	e63d      	b.n	8025848 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3e4>
 8025bcc:	2800      	cmp	r0, #0
 8025bce:	f43f aedd 	beq.w	802598c <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x528>
 8025bd2:	5c79      	ldrb	r1, [r7, r1]
 8025bd4:	f856 1021 	ldr.w	r1, [r6, r1, lsl #2]
 8025bd8:	910b      	str	r1, [sp, #44]	@ 0x2c
 8025bda:	0e09      	lsrs	r1, r1, #24
 8025bdc:	9114      	str	r1, [sp, #80]	@ 0x50
 8025bde:	e6d5      	b.n	802598c <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x528>
 8025be0:	b01f      	add	sp, #124	@ 0x7c
 8025be2:	ecbd 8b08 	vpop	{d8-d11}
 8025be6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	...

08025bec <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh>:
 8025bec:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8025bf0:	880e      	ldrh	r6, [r1, #0]
 8025bf2:	b085      	sub	sp, #20
 8025bf4:	4691      	mov	r9, r2
 8025bf6:	ea4f 2826 	mov.w	r8, r6, asr #8
 8025bfa:	f9bd c038 	ldrsh.w	ip, [sp, #56]	@ 0x38
 8025bfe:	f9bd e03c 	ldrsh.w	lr, [sp, #60]	@ 0x3c
 8025c02:	f008 02f8 	and.w	r2, r8, #248	@ 0xf8
 8025c06:	ea4f 08e6 	mov.w	r8, r6, asr #3
 8025c0a:	00f6      	lsls	r6, r6, #3
 8025c0c:	f89d 0048 	ldrb.w	r0, [sp, #72]	@ 0x48
 8025c10:	9200      	str	r2, [sp, #0]
 8025c12:	f008 02fc 	and.w	r2, r8, #252	@ 0xfc
 8025c16:	f89d 704c 	ldrb.w	r7, [sp, #76]	@ 0x4c
 8025c1a:	9201      	str	r2, [sp, #4]
 8025c1c:	b2f2      	uxtb	r2, r6
 8025c1e:	e9dd 5410 	ldrd	r5, r4, [sp, #64]	@ 0x40
 8025c22:	9202      	str	r2, [sp, #8]
 8025c24:	fb04 560c 	mla	r6, r4, ip, r5
 8025c28:	2c00      	cmp	r4, #0
 8025c2a:	eb09 0806 	add.w	r8, r9, r6
 8025c2e:	db3f      	blt.n	8025cb0 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0xc4>
 8025c30:	45a6      	cmp	lr, r4
 8025c32:	dd3d      	ble.n	8025cb0 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0xc4>
 8025c34:	2d00      	cmp	r5, #0
 8025c36:	db39      	blt.n	8025cac <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0xc0>
 8025c38:	45ac      	cmp	ip, r5
 8025c3a:	dd37      	ble.n	8025cac <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0xc0>
 8025c3c:	f819 2006 	ldrb.w	r2, [r9, r6]
 8025c40:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8025c44:	1c6e      	adds	r6, r5, #1
 8025c46:	d436      	bmi.n	8025cb6 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0xca>
 8025c48:	45b4      	cmp	ip, r6
 8025c4a:	dd34      	ble.n	8025cb6 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0xca>
 8025c4c:	b3a8      	cbz	r0, 8025cba <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0xce>
 8025c4e:	f898 6001 	ldrb.w	r6, [r8, #1]
 8025c52:	f853 6026 	ldr.w	r6, [r3, r6, lsl #2]
 8025c56:	3401      	adds	r4, #1
 8025c58:	d433      	bmi.n	8025cc2 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0xd6>
 8025c5a:	45a6      	cmp	lr, r4
 8025c5c:	dd31      	ble.n	8025cc2 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0xd6>
 8025c5e:	b39f      	cbz	r7, 8025cc8 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0xdc>
 8025c60:	2d00      	cmp	r5, #0
 8025c62:	eb08 0e0c 	add.w	lr, r8, ip
 8025c66:	db2a      	blt.n	8025cbe <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0xd2>
 8025c68:	45ac      	cmp	ip, r5
 8025c6a:	dd28      	ble.n	8025cbe <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0xd2>
 8025c6c:	f818 400c 	ldrb.w	r4, [r8, ip]
 8025c70:	f853 4024 	ldr.w	r4, [r3, r4, lsl #2]
 8025c74:	3501      	adds	r5, #1
 8025c76:	d42a      	bmi.n	8025cce <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0xe2>
 8025c78:	45ac      	cmp	ip, r5
 8025c7a:	dd28      	ble.n	8025cce <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0xe2>
 8025c7c:	b348      	cbz	r0, 8025cd2 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0xe6>
 8025c7e:	f89e 5001 	ldrb.w	r5, [lr, #1]
 8025c82:	f853 3025 	ldr.w	r3, [r3, r5, lsl #2]
 8025c86:	280f      	cmp	r0, #15
 8025c88:	ea4f 6b12 	mov.w	fp, r2, lsr #24
 8025c8c:	ea4f 6a16 	mov.w	sl, r6, lsr #24
 8025c90:	ea4f 6914 	mov.w	r9, r4, lsr #24
 8025c94:	ea4f 6813 	mov.w	r8, r3, lsr #24
 8025c98:	d801      	bhi.n	8025c9e <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0xb2>
 8025c9a:	2f0f      	cmp	r7, #15
 8025c9c:	d91b      	bls.n	8025cd6 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0xea>
 8025c9e:	4b7e      	ldr	r3, [pc, #504]	@ (8025e98 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0x2ac>)
 8025ca0:	f44f 71fb 	mov.w	r1, #502	@ 0x1f6
 8025ca4:	4a7d      	ldr	r2, [pc, #500]	@ (8025e9c <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0x2b0>)
 8025ca6:	487e      	ldr	r0, [pc, #504]	@ (8025ea0 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0x2b4>)
 8025ca8:	f004 ffcc 	bl	802ac44 <__assert_func>
 8025cac:	2200      	movs	r2, #0
 8025cae:	e7c9      	b.n	8025c44 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0x58>
 8025cb0:	2600      	movs	r6, #0
 8025cb2:	4632      	mov	r2, r6
 8025cb4:	e7cf      	b.n	8025c56 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0x6a>
 8025cb6:	2600      	movs	r6, #0
 8025cb8:	e7cd      	b.n	8025c56 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0x6a>
 8025cba:	4606      	mov	r6, r0
 8025cbc:	e7cb      	b.n	8025c56 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0x6a>
 8025cbe:	2400      	movs	r4, #0
 8025cc0:	e7d8      	b.n	8025c74 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0x88>
 8025cc2:	2300      	movs	r3, #0
 8025cc4:	461c      	mov	r4, r3
 8025cc6:	e7de      	b.n	8025c86 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0x9a>
 8025cc8:	463b      	mov	r3, r7
 8025cca:	463c      	mov	r4, r7
 8025ccc:	e7db      	b.n	8025c86 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0x9a>
 8025cce:	2300      	movs	r3, #0
 8025cd0:	e7d9      	b.n	8025c86 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0x9a>
 8025cd2:	4603      	mov	r3, r0
 8025cd4:	e7d7      	b.n	8025c86 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0x9a>
 8025cd6:	b280      	uxth	r0, r0
 8025cd8:	f1bb 0fff 	cmp.w	fp, #255	@ 0xff
 8025cdc:	b2bf      	uxth	r7, r7
 8025cde:	fb00 fe07 	mul.w	lr, r0, r7
 8025ce2:	ea4f 1000 	mov.w	r0, r0, lsl #4
 8025ce6:	ebce 1707 	rsb	r7, lr, r7, lsl #4
 8025cea:	eba0 0c0e 	sub.w	ip, r0, lr
 8025cee:	f5c0 7580 	rsb	r5, r0, #256	@ 0x100
 8025cf2:	b2bf      	uxth	r7, r7
 8025cf4:	fa1f fc8c 	uxth.w	ip, ip
 8025cf8:	eba5 0507 	sub.w	r5, r5, r7
 8025cfc:	fb0c f00a 	mul.w	r0, ip, sl
 8025d00:	b2ad      	uxth	r5, r5
 8025d02:	fb05 000b 	mla	r0, r5, fp, r0
 8025d06:	fb07 0009 	mla	r0, r7, r9, r0
 8025d0a:	fb0e 0008 	mla	r0, lr, r8, r0
 8025d0e:	f3c0 2007 	ubfx	r0, r0, #8, #8
 8025d12:	9003      	str	r0, [sp, #12]
 8025d14:	d018      	beq.n	8025d48 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0x15c>
 8025d16:	f002 10ff 	and.w	r0, r2, #16711935	@ 0xff00ff
 8025d1a:	f402 427f 	and.w	r2, r2, #65280	@ 0xff00
 8025d1e:	fb0b f000 	mul.w	r0, fp, r0
 8025d22:	fb0b fb02 	mul.w	fp, fp, r2
 8025d26:	0a02      	lsrs	r2, r0, #8
 8025d28:	f100 1001 	add.w	r0, r0, #65537	@ 0x10001
 8025d2c:	f002 12ff 	and.w	r2, r2, #16711935	@ 0xff00ff
 8025d30:	4402      	add	r2, r0
 8025d32:	f50b 7080 	add.w	r0, fp, #256	@ 0x100
 8025d36:	eb00 201b 	add.w	r0, r0, fp, lsr #8
 8025d3a:	0a12      	lsrs	r2, r2, #8
 8025d3c:	0a00      	lsrs	r0, r0, #8
 8025d3e:	f002 12ff 	and.w	r2, r2, #16711935	@ 0xff00ff
 8025d42:	f400 407f 	and.w	r0, r0, #65280	@ 0xff00
 8025d46:	4302      	orrs	r2, r0
 8025d48:	f1ba 0fff 	cmp.w	sl, #255	@ 0xff
 8025d4c:	d019      	beq.n	8025d82 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0x196>
 8025d4e:	f006 1bff 	and.w	fp, r6, #16711935	@ 0xff00ff
 8025d52:	f406 467f 	and.w	r6, r6, #65280	@ 0xff00
 8025d56:	fb0a fb0b 	mul.w	fp, sl, fp
 8025d5a:	fb0a fa06 	mul.w	sl, sl, r6
 8025d5e:	ea4f 261b 	mov.w	r6, fp, lsr #8
 8025d62:	f10b 1b01 	add.w	fp, fp, #65537	@ 0x10001
 8025d66:	f50a 7080 	add.w	r0, sl, #256	@ 0x100
 8025d6a:	f006 16ff 	and.w	r6, r6, #16711935	@ 0xff00ff
 8025d6e:	eb00 201a 	add.w	r0, r0, sl, lsr #8
 8025d72:	445e      	add	r6, fp
 8025d74:	0a00      	lsrs	r0, r0, #8
 8025d76:	0a36      	lsrs	r6, r6, #8
 8025d78:	f400 407f 	and.w	r0, r0, #65280	@ 0xff00
 8025d7c:	f006 16ff 	and.w	r6, r6, #16711935	@ 0xff00ff
 8025d80:	4306      	orrs	r6, r0
 8025d82:	f1b9 0fff 	cmp.w	r9, #255	@ 0xff
 8025d86:	d019      	beq.n	8025dbc <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0x1d0>
 8025d88:	f004 1aff 	and.w	sl, r4, #16711935	@ 0xff00ff
 8025d8c:	f404 447f 	and.w	r4, r4, #65280	@ 0xff00
 8025d90:	fb09 fa0a 	mul.w	sl, r9, sl
 8025d94:	fb09 f904 	mul.w	r9, r9, r4
 8025d98:	ea4f 241a 	mov.w	r4, sl, lsr #8
 8025d9c:	f10a 1a01 	add.w	sl, sl, #65537	@ 0x10001
 8025da0:	f509 7080 	add.w	r0, r9, #256	@ 0x100
 8025da4:	f004 14ff 	and.w	r4, r4, #16711935	@ 0xff00ff
 8025da8:	eb00 2019 	add.w	r0, r0, r9, lsr #8
 8025dac:	4454      	add	r4, sl
 8025dae:	0a00      	lsrs	r0, r0, #8
 8025db0:	0a24      	lsrs	r4, r4, #8
 8025db2:	f400 407f 	and.w	r0, r0, #65280	@ 0xff00
 8025db6:	f004 14ff 	and.w	r4, r4, #16711935	@ 0xff00ff
 8025dba:	4304      	orrs	r4, r0
 8025dbc:	f1b8 0fff 	cmp.w	r8, #255	@ 0xff
 8025dc0:	d019      	beq.n	8025df6 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0x20a>
 8025dc2:	f003 19ff 	and.w	r9, r3, #16711935	@ 0xff00ff
 8025dc6:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 8025dca:	fb08 f909 	mul.w	r9, r8, r9
 8025dce:	fb08 f803 	mul.w	r8, r8, r3
 8025dd2:	ea4f 2319 	mov.w	r3, r9, lsr #8
 8025dd6:	f109 1901 	add.w	r9, r9, #65537	@ 0x10001
 8025dda:	f508 7080 	add.w	r0, r8, #256	@ 0x100
 8025dde:	f003 13ff 	and.w	r3, r3, #16711935	@ 0xff00ff
 8025de2:	eb00 2018 	add.w	r0, r0, r8, lsr #8
 8025de6:	444b      	add	r3, r9
 8025de8:	0a00      	lsrs	r0, r0, #8
 8025dea:	0a1b      	lsrs	r3, r3, #8
 8025dec:	f400 407f 	and.w	r0, r0, #65280	@ 0xff00
 8025df0:	f003 13ff 	and.w	r3, r3, #16711935	@ 0xff00ff
 8025df4:	4303      	orrs	r3, r0
 8025df6:	f006 18ff 	and.w	r8, r6, #16711935	@ 0xff00ff
 8025dfa:	f002 10ff 	and.w	r0, r2, #16711935	@ 0xff00ff
 8025dfe:	f406 467f 	and.w	r6, r6, #65280	@ 0xff00
 8025e02:	f402 427f 	and.w	r2, r2, #65280	@ 0xff00
 8025e06:	fb0c f808 	mul.w	r8, ip, r8
 8025e0a:	fb0c f606 	mul.w	r6, ip, r6
 8025e0e:	fb05 8800 	mla	r8, r5, r0, r8
 8025e12:	f004 10ff 	and.w	r0, r4, #16711935	@ 0xff00ff
 8025e16:	fb05 6202 	mla	r2, r5, r2, r6
 8025e1a:	9d00      	ldr	r5, [sp, #0]
 8025e1c:	fb07 8800 	mla	r8, r7, r0, r8
 8025e20:	f003 10ff 	and.w	r0, r3, #16711935	@ 0xff00ff
 8025e24:	fb0e 8000 	mla	r0, lr, r0, r8
 8025e28:	0a00      	lsrs	r0, r0, #8
 8025e2a:	f000 18ff 	and.w	r8, r0, #16711935	@ 0xff00ff
 8025e2e:	f404 407f 	and.w	r0, r4, #65280	@ 0xff00
 8025e32:	fb07 2700 	mla	r7, r7, r0, r2
 8025e36:	f403 407f 	and.w	r0, r3, #65280	@ 0xff00
 8025e3a:	9b03      	ldr	r3, [sp, #12]
 8025e3c:	fb0e 7000 	mla	r0, lr, r0, r7
 8025e40:	9a02      	ldr	r2, [sp, #8]
 8025e42:	43dc      	mvns	r4, r3
 8025e44:	9b01      	ldr	r3, [sp, #4]
 8025e46:	0a00      	lsrs	r0, r0, #8
 8025e48:	b2e4      	uxtb	r4, r4
 8025e4a:	f400 407f 	and.w	r0, r0, #65280	@ 0xff00
 8025e4e:	4363      	muls	r3, r4
 8025e50:	4365      	muls	r5, r4
 8025e52:	ea48 0000 	orr.w	r0, r8, r0
 8025e56:	4362      	muls	r2, r4
 8025e58:	1c5e      	adds	r6, r3, #1
 8025e5a:	4614      	mov	r4, r2
 8025e5c:	1c6a      	adds	r2, r5, #1
 8025e5e:	eb06 2613 	add.w	r6, r6, r3, lsr #8
 8025e62:	eb02 2515 	add.w	r5, r2, r5, lsr #8
 8025e66:	0a03      	lsrs	r3, r0, #8
 8025e68:	0c02      	lsrs	r2, r0, #16
 8025e6a:	eb03 2316 	add.w	r3, r3, r6, lsr #8
 8025e6e:	eb02 2215 	add.w	r2, r2, r5, lsr #8
 8025e72:	00db      	lsls	r3, r3, #3
 8025e74:	0212      	lsls	r2, r2, #8
 8025e76:	f403 63fc 	and.w	r3, r3, #2016	@ 0x7e0
 8025e7a:	f402 4278 	and.w	r2, r2, #63488	@ 0xf800
 8025e7e:	4313      	orrs	r3, r2
 8025e80:	1c62      	adds	r2, r4, #1
 8025e82:	eb02 2414 	add.w	r4, r2, r4, lsr #8
 8025e86:	eb00 2014 	add.w	r0, r0, r4, lsr #8
 8025e8a:	f3c0 00c4 	ubfx	r0, r0, #3, #5
 8025e8e:	4318      	orrs	r0, r3
 8025e90:	8008      	strh	r0, [r1, #0]
 8025e92:	b005      	add	sp, #20
 8025e94:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8025e98:	0802fed5 	.word	0x0802fed5
 8025e9c:	080304a2 	.word	0x080304a2
 8025ea0:	0802ff59 	.word	0x0802ff59

08025ea4 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 8025ea4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8025ea8:	ed2d 8b08 	vpush	{d8-d11}
 8025eac:	b09b      	sub	sp, #108	@ 0x6c
 8025eae:	eeb0 aa40 	vmov.f32	s20, s0
 8025eb2:	eef0 9a60 	vmov.f32	s19, s1
 8025eb6:	9218      	str	r2, [sp, #96]	@ 0x60
 8025eb8:	eeb0 9a41 	vmov.f32	s18, s2
 8025ebc:	9a31      	ldr	r2, [sp, #196]	@ 0xc4
 8025ebe:	eeb0 8a62 	vmov.f32	s16, s5
 8025ec2:	9019      	str	r0, [sp, #100]	@ 0x64
 8025ec4:	eef0 8a43 	vmov.f32	s17, s6
 8025ec8:	6850      	ldr	r0, [r2, #4]
 8025eca:	eef0 ba44 	vmov.f32	s23, s8
 8025ece:	9116      	str	r1, [sp, #88]	@ 0x58
 8025ed0:	eeb0 ba64 	vmov.f32	s22, s9
 8025ed4:	9307      	str	r3, [sp, #28]
 8025ed6:	eef0 aa45 	vmov.f32	s21, s10
 8025eda:	6812      	ldr	r2, [r2, #0]
 8025edc:	9d2e      	ldr	r5, [sp, #184]	@ 0xb8
 8025ede:	e9dd 1332 	ldrd	r1, r3, [sp, #200]	@ 0xc8
 8025ee2:	fb00 1303 	mla	r3, r0, r3, r1
 8025ee6:	eb02 0343 	add.w	r3, r2, r3, lsl #1
 8025eea:	930a      	str	r3, [sp, #40]	@ 0x28
 8025eec:	9b34      	ldr	r3, [sp, #208]	@ 0xd0
 8025eee:	681b      	ldr	r3, [r3, #0]
 8025ef0:	930f      	str	r3, [sp, #60]	@ 0x3c
 8025ef2:	9b34      	ldr	r3, [sp, #208]	@ 0xd0
 8025ef4:	685e      	ldr	r6, [r3, #4]
 8025ef6:	3604      	adds	r6, #4
 8025ef8:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 8025efa:	2b00      	cmp	r3, #0
 8025efc:	dc03      	bgt.n	8025f06 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x62>
 8025efe:	9b18      	ldr	r3, [sp, #96]	@ 0x60
 8025f00:	2b00      	cmp	r3, #0
 8025f02:	f340 8373 	ble.w	80265ec <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x748>
 8025f06:	9b34      	ldr	r3, [sp, #208]	@ 0xd0
 8025f08:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 8025f0c:	f9b3 200c 	ldrsh.w	r2, [r3, #12]
 8025f10:	1e48      	subs	r0, r1, #1
 8025f12:	1e57      	subs	r7, r2, #1
 8025f14:	9b07      	ldr	r3, [sp, #28]
 8025f16:	2b00      	cmp	r3, #0
 8025f18:	f340 818f 	ble.w	802623a <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x396>
 8025f1c:	9c2d      	ldr	r4, [sp, #180]	@ 0xb4
 8025f1e:	142b      	asrs	r3, r5, #16
 8025f20:	ea5f 4c24 	movs.w	ip, r4, asr #16
 8025f24:	d406      	bmi.n	8025f34 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x90>
 8025f26:	4584      	cmp	ip, r0
 8025f28:	da04      	bge.n	8025f34 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x90>
 8025f2a:	2b00      	cmp	r3, #0
 8025f2c:	db02      	blt.n	8025f34 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x90>
 8025f2e:	42bb      	cmp	r3, r7
 8025f30:	f2c0 8184 	blt.w	802623c <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x398>
 8025f34:	f11c 0c01 	adds.w	ip, ip, #1
 8025f38:	f100 8172 	bmi.w	8026220 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x37c>
 8025f3c:	4561      	cmp	r1, ip
 8025f3e:	f2c0 816f 	blt.w	8026220 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x37c>
 8025f42:	3301      	adds	r3, #1
 8025f44:	f100 816c 	bmi.w	8026220 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x37c>
 8025f48:	429a      	cmp	r2, r3
 8025f4a:	f2c0 8169 	blt.w	8026220 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x37c>
 8025f4e:	9b07      	ldr	r3, [sp, #28]
 8025f50:	9f0a      	ldr	r7, [sp, #40]	@ 0x28
 8025f52:	9317      	str	r3, [sp, #92]	@ 0x5c
 8025f54:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 8025f56:	2b00      	cmp	r3, #0
 8025f58:	f340 818e 	ble.w	8026278 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3d4>
 8025f5c:	9b2d      	ldr	r3, [sp, #180]	@ 0xb4
 8025f5e:	ea4f 4c25 	mov.w	ip, r5, asr #16
 8025f62:	f3c5 3003 	ubfx	r0, r5, #12, #4
 8025f66:	f3c3 3203 	ubfx	r2, r3, #12, #4
 8025f6a:	9b34      	ldr	r3, [sp, #208]	@ 0xd0
 8025f6c:	e9d3 1e02 	ldrd	r1, lr, [r3, #8]
 8025f70:	9b2d      	ldr	r3, [sp, #180]	@ 0xb4
 8025f72:	141b      	asrs	r3, r3, #16
 8025f74:	f100 81d1 	bmi.w	802631a <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x476>
 8025f78:	f101 38ff 	add.w	r8, r1, #4294967295
 8025f7c:	4543      	cmp	r3, r8
 8025f7e:	f280 81cc 	bge.w	802631a <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x476>
 8025f82:	f1bc 0f00 	cmp.w	ip, #0
 8025f86:	f2c0 81c8 	blt.w	802631a <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x476>
 8025f8a:	f10e 38ff 	add.w	r8, lr, #4294967295
 8025f8e:	45c4      	cmp	ip, r8
 8025f90:	f280 81c3 	bge.w	802631a <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x476>
 8025f94:	b209      	sxth	r1, r1
 8025f96:	9c0f      	ldr	r4, [sp, #60]	@ 0x3c
 8025f98:	fb0c 3301 	mla	r3, ip, r1, r3
 8025f9c:	eb04 0803 	add.w	r8, r4, r3
 8025fa0:	5ce3      	ldrb	r3, [r4, r3]
 8025fa2:	f856 3023 	ldr.w	r3, [r6, r3, lsl #2]
 8025fa6:	ea4f 6e13 	mov.w	lr, r3, lsr #24
 8025faa:	2a00      	cmp	r2, #0
 8025fac:	f000 81aa 	beq.w	8026304 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x460>
 8025fb0:	f898 c001 	ldrb.w	ip, [r8, #1]
 8025fb4:	f856 402c 	ldr.w	r4, [r6, ip, lsl #2]
 8025fb8:	940b      	str	r4, [sp, #44]	@ 0x2c
 8025fba:	0e24      	lsrs	r4, r4, #24
 8025fbc:	9412      	str	r4, [sp, #72]	@ 0x48
 8025fbe:	b178      	cbz	r0, 8025fe0 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x13c>
 8025fc0:	eb08 0c01 	add.w	ip, r8, r1
 8025fc4:	f818 1001 	ldrb.w	r1, [r8, r1]
 8025fc8:	f856 1021 	ldr.w	r1, [r6, r1, lsl #2]
 8025fcc:	9108      	str	r1, [sp, #32]
 8025fce:	0e09      	lsrs	r1, r1, #24
 8025fd0:	9110      	str	r1, [sp, #64]	@ 0x40
 8025fd2:	f89c 1001 	ldrb.w	r1, [ip, #1]
 8025fd6:	f856 1021 	ldr.w	r1, [r6, r1, lsl #2]
 8025fda:	910c      	str	r1, [sp, #48]	@ 0x30
 8025fdc:	0e09      	lsrs	r1, r1, #24
 8025fde:	9113      	str	r1, [sp, #76]	@ 0x4c
 8025fe0:	b292      	uxth	r2, r2
 8025fe2:	9912      	ldr	r1, [sp, #72]	@ 0x48
 8025fe4:	b280      	uxth	r0, r0
 8025fe6:	9c10      	ldr	r4, [sp, #64]	@ 0x40
 8025fe8:	fb02 f900 	mul.w	r9, r2, r0
 8025fec:	0112      	lsls	r2, r2, #4
 8025fee:	ebc9 1000 	rsb	r0, r9, r0, lsl #4
 8025ff2:	eba2 0809 	sub.w	r8, r2, r9
 8025ff6:	f5c2 7280 	rsb	r2, r2, #256	@ 0x100
 8025ffa:	b280      	uxth	r0, r0
 8025ffc:	fa1f f888 	uxth.w	r8, r8
 8026000:	1a12      	subs	r2, r2, r0
 8026002:	fb08 f101 	mul.w	r1, r8, r1
 8026006:	b292      	uxth	r2, r2
 8026008:	fb02 110e 	mla	r1, r2, lr, r1
 802600c:	fb00 1104 	mla	r1, r0, r4, r1
 8026010:	9c13      	ldr	r4, [sp, #76]	@ 0x4c
 8026012:	fb09 1104 	mla	r1, r9, r4, r1
 8026016:	f3c1 2107 	ubfx	r1, r1, #8, #8
 802601a:	2900      	cmp	r1, #0
 802601c:	f000 80f5 	beq.w	802620a <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x366>
 8026020:	f1be 0fff 	cmp.w	lr, #255	@ 0xff
 8026024:	d01b      	beq.n	802605e <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ba>
 8026026:	f003 1aff 	and.w	sl, r3, #16711935	@ 0xff00ff
 802602a:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 802602e:	fb0e fa0a 	mul.w	sl, lr, sl
 8026032:	fb0e fe03 	mul.w	lr, lr, r3
 8026036:	ea4f 231a 	mov.w	r3, sl, lsr #8
 802603a:	f10a 1a01 	add.w	sl, sl, #65537	@ 0x10001
 802603e:	f50e 7c80 	add.w	ip, lr, #256	@ 0x100
 8026042:	f003 13ff 	and.w	r3, r3, #16711935	@ 0xff00ff
 8026046:	eb0c 2c1e 	add.w	ip, ip, lr, lsr #8
 802604a:	4453      	add	r3, sl
 802604c:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 8026050:	0a1b      	lsrs	r3, r3, #8
 8026052:	f40c 4c7f 	and.w	ip, ip, #65280	@ 0xff00
 8026056:	f003 13ff 	and.w	r3, r3, #16711935	@ 0xff00ff
 802605a:	ea43 030c 	orr.w	r3, r3, ip
 802605e:	9c12      	ldr	r4, [sp, #72]	@ 0x48
 8026060:	2cff      	cmp	r4, #255	@ 0xff
 8026062:	d021      	beq.n	80260a8 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x204>
 8026064:	9c0b      	ldr	r4, [sp, #44]	@ 0x2c
 8026066:	f004 1bff 	and.w	fp, r4, #16711935	@ 0xff00ff
 802606a:	9c12      	ldr	r4, [sp, #72]	@ 0x48
 802606c:	fb04 fb0b 	mul.w	fp, r4, fp
 8026070:	9c0b      	ldr	r4, [sp, #44]	@ 0x2c
 8026072:	f404 4a7f 	and.w	sl, r4, #65280	@ 0xff00
 8026076:	9c12      	ldr	r4, [sp, #72]	@ 0x48
 8026078:	ea4f 2e1b 	mov.w	lr, fp, lsr #8
 802607c:	f10b 1b01 	add.w	fp, fp, #65537	@ 0x10001
 8026080:	fb04 fa0a 	mul.w	sl, r4, sl
 8026084:	f00e 1eff 	and.w	lr, lr, #16711935	@ 0xff00ff
 8026088:	f50a 7c80 	add.w	ip, sl, #256	@ 0x100
 802608c:	44de      	add	lr, fp
 802608e:	eb0c 2a1a 	add.w	sl, ip, sl, lsr #8
 8026092:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 8026096:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 802609a:	f00e 1eff 	and.w	lr, lr, #16711935	@ 0xff00ff
 802609e:	f40a 4a7f 	and.w	sl, sl, #65280	@ 0xff00
 80260a2:	ea4e 040a 	orr.w	r4, lr, sl
 80260a6:	940b      	str	r4, [sp, #44]	@ 0x2c
 80260a8:	9c10      	ldr	r4, [sp, #64]	@ 0x40
 80260aa:	2cff      	cmp	r4, #255	@ 0xff
 80260ac:	d021      	beq.n	80260f2 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x24e>
 80260ae:	9c08      	ldr	r4, [sp, #32]
 80260b0:	f004 1bff 	and.w	fp, r4, #16711935	@ 0xff00ff
 80260b4:	9c10      	ldr	r4, [sp, #64]	@ 0x40
 80260b6:	fb04 fb0b 	mul.w	fp, r4, fp
 80260ba:	9c08      	ldr	r4, [sp, #32]
 80260bc:	f404 4a7f 	and.w	sl, r4, #65280	@ 0xff00
 80260c0:	9c10      	ldr	r4, [sp, #64]	@ 0x40
 80260c2:	ea4f 2e1b 	mov.w	lr, fp, lsr #8
 80260c6:	f10b 1b01 	add.w	fp, fp, #65537	@ 0x10001
 80260ca:	fb04 fa0a 	mul.w	sl, r4, sl
 80260ce:	f00e 1eff 	and.w	lr, lr, #16711935	@ 0xff00ff
 80260d2:	f50a 7c80 	add.w	ip, sl, #256	@ 0x100
 80260d6:	44de      	add	lr, fp
 80260d8:	eb0c 2a1a 	add.w	sl, ip, sl, lsr #8
 80260dc:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 80260e0:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 80260e4:	f00e 1eff 	and.w	lr, lr, #16711935	@ 0xff00ff
 80260e8:	f40a 4a7f 	and.w	sl, sl, #65280	@ 0xff00
 80260ec:	ea4e 040a 	orr.w	r4, lr, sl
 80260f0:	9408      	str	r4, [sp, #32]
 80260f2:	9c13      	ldr	r4, [sp, #76]	@ 0x4c
 80260f4:	2cff      	cmp	r4, #255	@ 0xff
 80260f6:	d021      	beq.n	802613c <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x298>
 80260f8:	9c0c      	ldr	r4, [sp, #48]	@ 0x30
 80260fa:	f004 1bff 	and.w	fp, r4, #16711935	@ 0xff00ff
 80260fe:	9c13      	ldr	r4, [sp, #76]	@ 0x4c
 8026100:	fb04 fb0b 	mul.w	fp, r4, fp
 8026104:	9c0c      	ldr	r4, [sp, #48]	@ 0x30
 8026106:	f404 4a7f 	and.w	sl, r4, #65280	@ 0xff00
 802610a:	9c13      	ldr	r4, [sp, #76]	@ 0x4c
 802610c:	ea4f 2e1b 	mov.w	lr, fp, lsr #8
 8026110:	f10b 1b01 	add.w	fp, fp, #65537	@ 0x10001
 8026114:	fb04 fa0a 	mul.w	sl, r4, sl
 8026118:	f00e 1eff 	and.w	lr, lr, #16711935	@ 0xff00ff
 802611c:	f50a 7c80 	add.w	ip, sl, #256	@ 0x100
 8026120:	44de      	add	lr, fp
 8026122:	eb0c 2a1a 	add.w	sl, ip, sl, lsr #8
 8026126:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 802612a:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 802612e:	f00e 1eff 	and.w	lr, lr, #16711935	@ 0xff00ff
 8026132:	f40a 4a7f 	and.w	sl, sl, #65280	@ 0xff00
 8026136:	ea4e 040a 	orr.w	r4, lr, sl
 802613a:	940c      	str	r4, [sp, #48]	@ 0x30
 802613c:	9c0b      	ldr	r4, [sp, #44]	@ 0x2c
 802613e:	f003 1eff 	and.w	lr, r3, #16711935	@ 0xff00ff
 8026142:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 8026146:	43c9      	mvns	r1, r1
 8026148:	f004 1cff 	and.w	ip, r4, #16711935	@ 0xff00ff
 802614c:	9c08      	ldr	r4, [sp, #32]
 802614e:	fb08 fc0c 	mul.w	ip, r8, ip
 8026152:	fb02 cc0e 	mla	ip, r2, lr, ip
 8026156:	f004 1eff 	and.w	lr, r4, #16711935	@ 0xff00ff
 802615a:	9c0c      	ldr	r4, [sp, #48]	@ 0x30
 802615c:	fb00 cc0e 	mla	ip, r0, lr, ip
 8026160:	f004 1eff 	and.w	lr, r4, #16711935	@ 0xff00ff
 8026164:	9c0b      	ldr	r4, [sp, #44]	@ 0x2c
 8026166:	fb09 cc0e 	mla	ip, r9, lr, ip
 802616a:	f404 4e7f 	and.w	lr, r4, #65280	@ 0xff00
 802616e:	fb08 f80e 	mul.w	r8, r8, lr
 8026172:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 8026176:	fa5f fe81 	uxtb.w	lr, r1
 802617a:	fb02 8303 	mla	r3, r2, r3, r8
 802617e:	9a08      	ldr	r2, [sp, #32]
 8026180:	f8b7 8000 	ldrh.w	r8, [r7]
 8026184:	f00c 1cff 	and.w	ip, ip, #16711935	@ 0xff00ff
 8026188:	f402 4a7f 	and.w	sl, r2, #65280	@ 0xff00
 802618c:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 802618e:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8026192:	fb00 330a 	mla	r3, r0, sl, r3
 8026196:	f402 407f 	and.w	r0, r2, #65280	@ 0xff00
 802619a:	ea4f 2228 	mov.w	r2, r8, asr #8
 802619e:	fb09 3900 	mla	r9, r9, r0, r3
 80261a2:	ea4f 00e8 	mov.w	r0, r8, asr #3
 80261a6:	f002 02f8 	and.w	r2, r2, #248	@ 0xf8
 80261aa:	b2c9      	uxtb	r1, r1
 80261ac:	ea4f 2919 	mov.w	r9, r9, lsr #8
 80261b0:	f000 00fc 	and.w	r0, r0, #252	@ 0xfc
 80261b4:	fb02 f20e 	mul.w	r2, r2, lr
 80261b8:	f409 497f 	and.w	r9, r9, #65280	@ 0xff00
 80261bc:	fb00 f00e 	mul.w	r0, r0, lr
 80261c0:	1c53      	adds	r3, r2, #1
 80261c2:	fb01 f10e 	mul.w	r1, r1, lr
 80261c6:	ea4c 0c09 	orr.w	ip, ip, r9
 80261ca:	eb03 2212 	add.w	r2, r3, r2, lsr #8
 80261ce:	ea4f 431c 	mov.w	r3, ip, lsr #16
 80261d2:	eb03 2312 	add.w	r3, r3, r2, lsr #8
 80261d6:	4a60      	ldr	r2, [pc, #384]	@ (8026358 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4b4>)
 80261d8:	b2db      	uxtb	r3, r3
 80261da:	ea02 2203 	and.w	r2, r2, r3, lsl #8
 80261de:	1c43      	adds	r3, r0, #1
 80261e0:	eb03 2010 	add.w	r0, r3, r0, lsr #8
 80261e4:	ea4f 231c 	mov.w	r3, ip, lsr #8
 80261e8:	eb03 2310 	add.w	r3, r3, r0, lsr #8
 80261ec:	00db      	lsls	r3, r3, #3
 80261ee:	f403 63fc 	and.w	r3, r3, #2016	@ 0x7e0
 80261f2:	4313      	orrs	r3, r2
 80261f4:	1c4a      	adds	r2, r1, #1
 80261f6:	eb02 2111 	add.w	r1, r2, r1, lsr #8
 80261fa:	eb0c 2c11 	add.w	ip, ip, r1, lsr #8
 80261fe:	f3cc 0cc4 	ubfx	ip, ip, #3, #5
 8026202:	ea4c 0c03 	orr.w	ip, ip, r3
 8026206:	f8a7 c000 	strh.w	ip, [r7]
 802620a:	9b2f      	ldr	r3, [sp, #188]	@ 0xbc
 802620c:	3702      	adds	r7, #2
 802620e:	9a2d      	ldr	r2, [sp, #180]	@ 0xb4
 8026210:	441a      	add	r2, r3
 8026212:	9b30      	ldr	r3, [sp, #192]	@ 0xc0
 8026214:	441d      	add	r5, r3
 8026216:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 8026218:	922d      	str	r2, [sp, #180]	@ 0xb4
 802621a:	3b01      	subs	r3, #1
 802621c:	9317      	str	r3, [sp, #92]	@ 0x5c
 802621e:	e699      	b.n	8025f54 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xb0>
 8026220:	9b2f      	ldr	r3, [sp, #188]	@ 0xbc
 8026222:	9c2d      	ldr	r4, [sp, #180]	@ 0xb4
 8026224:	441c      	add	r4, r3
 8026226:	9b30      	ldr	r3, [sp, #192]	@ 0xc0
 8026228:	441d      	add	r5, r3
 802622a:	9b07      	ldr	r3, [sp, #28]
 802622c:	942d      	str	r4, [sp, #180]	@ 0xb4
 802622e:	3b01      	subs	r3, #1
 8026230:	9307      	str	r3, [sp, #28]
 8026232:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8026234:	3302      	adds	r3, #2
 8026236:	930a      	str	r3, [sp, #40]	@ 0x28
 8026238:	e66c      	b.n	8025f14 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x70>
 802623a:	d024      	beq.n	8026286 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3e2>
 802623c:	9b07      	ldr	r3, [sp, #28]
 802623e:	982f      	ldr	r0, [sp, #188]	@ 0xbc
 8026240:	3b01      	subs	r3, #1
 8026242:	9c2d      	ldr	r4, [sp, #180]	@ 0xb4
 8026244:	fb00 4003 	mla	r0, r0, r3, r4
 8026248:	1400      	asrs	r0, r0, #16
 802624a:	f53f ae80 	bmi.w	8025f4e <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xaa>
 802624e:	3901      	subs	r1, #1
 8026250:	4288      	cmp	r0, r1
 8026252:	f6bf ae7c 	bge.w	8025f4e <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xaa>
 8026256:	9930      	ldr	r1, [sp, #192]	@ 0xc0
 8026258:	fb01 5303 	mla	r3, r1, r3, r5
 802625c:	141b      	asrs	r3, r3, #16
 802625e:	f53f ae76 	bmi.w	8025f4e <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xaa>
 8026262:	3a01      	subs	r2, #1
 8026264:	4293      	cmp	r3, r2
 8026266:	f6bf ae72 	bge.w	8025f4e <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xaa>
 802626a:	f8dd b01c 	ldr.w	fp, [sp, #28]
 802626e:	f8dd 9028 	ldr.w	r9, [sp, #40]	@ 0x28
 8026272:	f1bb 0f00 	cmp.w	fp, #0
 8026276:	dc71      	bgt.n	802635c <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4b8>
 8026278:	9b07      	ldr	r3, [sp, #28]
 802627a:	ea23 74e3 	bic.w	r4, r3, r3, asr #31
 802627e:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8026280:	eb03 0344 	add.w	r3, r3, r4, lsl #1
 8026284:	930a      	str	r3, [sp, #40]	@ 0x28
 8026286:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 8026288:	2b00      	cmp	r3, #0
 802628a:	f340 81af 	ble.w	80265ec <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x748>
 802628e:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8026292:	9b2c      	ldr	r3, [sp, #176]	@ 0xb0
 8026294:	ee3a aa2b 	vadd.f32	s20, s20, s23
 8026298:	ee79 9a8b 	vadd.f32	s19, s19, s22
 802629c:	eef0 6a48 	vmov.f32	s13, s16
 80262a0:	eec7 7a0a 	vdiv.f32	s15, s14, s20
 80262a4:	ee39 9a2a 	vadd.f32	s18, s18, s21
 80262a8:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 80262ac:	edcd 6a2d 	vstr	s13, [sp, #180]	@ 0xb4
 80262b0:	eef0 6a68 	vmov.f32	s13, s17
 80262b4:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 80262b8:	ee16 5a90 	vmov	r5, s13
 80262bc:	ee29 7aa7 	vmul.f32	s14, s19, s15
 80262c0:	ee69 7a27 	vmul.f32	s15, s18, s15
 80262c4:	ee37 8a48 	vsub.f32	s16, s14, s16
 80262c8:	ee77 8ae8 	vsub.f32	s17, s15, s17
 80262cc:	eebe 8ac8 	vcvt.s32.f32	s16, s16, #16
 80262d0:	eefe 8ac8 	vcvt.s32.f32	s17, s17, #16
 80262d4:	ee18 2a10 	vmov	r2, s16
 80262d8:	eeb0 8a47 	vmov.f32	s16, s14
 80262dc:	fb92 f3f3 	sdiv	r3, r2, r3
 80262e0:	ee18 2a90 	vmov	r2, s17
 80262e4:	932f      	str	r3, [sp, #188]	@ 0xbc
 80262e6:	9b2c      	ldr	r3, [sp, #176]	@ 0xb0
 80262e8:	eef0 8a67 	vmov.f32	s17, s15
 80262ec:	fb92 f3f3 	sdiv	r3, r2, r3
 80262f0:	9330      	str	r3, [sp, #192]	@ 0xc0
 80262f2:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 80262f4:	9a18      	ldr	r2, [sp, #96]	@ 0x60
 80262f6:	3b01      	subs	r3, #1
 80262f8:	9316      	str	r3, [sp, #88]	@ 0x58
 80262fa:	9b2c      	ldr	r3, [sp, #176]	@ 0xb0
 80262fc:	bf08      	it	eq
 80262fe:	4613      	moveq	r3, r2
 8026300:	9307      	str	r3, [sp, #28]
 8026302:	e5f9      	b.n	8025ef8 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x54>
 8026304:	2800      	cmp	r0, #0
 8026306:	f43f ae6b 	beq.w	8025fe0 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x13c>
 802630a:	f818 1001 	ldrb.w	r1, [r8, r1]
 802630e:	f856 1021 	ldr.w	r1, [r6, r1, lsl #2]
 8026312:	9108      	str	r1, [sp, #32]
 8026314:	0e09      	lsrs	r1, r1, #24
 8026316:	9110      	str	r1, [sp, #64]	@ 0x40
 8026318:	e662      	b.n	8025fe0 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x13c>
 802631a:	f113 0801 	adds.w	r8, r3, #1
 802631e:	f53f af74 	bmi.w	802620a <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x366>
 8026322:	4541      	cmp	r1, r8
 8026324:	f6ff af71 	blt.w	802620a <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x366>
 8026328:	f11c 0801 	adds.w	r8, ip, #1
 802632c:	f53f af6d 	bmi.w	802620a <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x366>
 8026330:	45c6      	cmp	lr, r8
 8026332:	f6ff af6a 	blt.w	802620a <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x366>
 8026336:	b209      	sxth	r1, r1
 8026338:	e9cd 3c02 	strd	r3, ip, [sp, #8]
 802633c:	fa0f f38e 	sxth.w	r3, lr
 8026340:	9100      	str	r1, [sp, #0]
 8026342:	4639      	mov	r1, r7
 8026344:	9301      	str	r3, [sp, #4]
 8026346:	4633      	mov	r3, r6
 8026348:	e9cd 2004 	strd	r2, r0, [sp, #16]
 802634c:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 802634e:	9819      	ldr	r0, [sp, #100]	@ 0x64
 8026350:	f7ff fc4c 	bl	8025bec <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh>
 8026354:	e759      	b.n	802620a <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x366>
 8026356:	bf00      	nop
 8026358:	fffff800 	.word	0xfffff800
 802635c:	9b2d      	ldr	r3, [sp, #180]	@ 0xb4
 802635e:	f3c5 3003 	ubfx	r0, r5, #12, #4
 8026362:	9c2d      	ldr	r4, [sp, #180]	@ 0xb4
 8026364:	f3c3 3203 	ubfx	r2, r3, #12, #4
 8026368:	9b34      	ldr	r3, [sp, #208]	@ 0xd0
 802636a:	1427      	asrs	r7, r4, #16
 802636c:	9c0f      	ldr	r4, [sp, #60]	@ 0x3c
 802636e:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 8026372:	142b      	asrs	r3, r5, #16
 8026374:	fb01 7303 	mla	r3, r1, r3, r7
 8026378:	18e7      	adds	r7, r4, r3
 802637a:	5ce3      	ldrb	r3, [r4, r3]
 802637c:	f856 3023 	ldr.w	r3, [r6, r3, lsl #2]
 8026380:	ea4f 6c13 	mov.w	ip, r3, lsr #24
 8026384:	2a00      	cmp	r2, #0
 8026386:	f000 8127 	beq.w	80265d8 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x734>
 802638a:	f897 e001 	ldrb.w	lr, [r7, #1]
 802638e:	f856 402e 	ldr.w	r4, [r6, lr, lsl #2]
 8026392:	940d      	str	r4, [sp, #52]	@ 0x34
 8026394:	0e24      	lsrs	r4, r4, #24
 8026396:	9414      	str	r4, [sp, #80]	@ 0x50
 8026398:	b170      	cbz	r0, 80263b8 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x514>
 802639a:	eb07 0e01 	add.w	lr, r7, r1
 802639e:	5c79      	ldrb	r1, [r7, r1]
 80263a0:	f856 1021 	ldr.w	r1, [r6, r1, lsl #2]
 80263a4:	9109      	str	r1, [sp, #36]	@ 0x24
 80263a6:	0e09      	lsrs	r1, r1, #24
 80263a8:	9111      	str	r1, [sp, #68]	@ 0x44
 80263aa:	f89e 1001 	ldrb.w	r1, [lr, #1]
 80263ae:	f856 1021 	ldr.w	r1, [r6, r1, lsl #2]
 80263b2:	910e      	str	r1, [sp, #56]	@ 0x38
 80263b4:	0e09      	lsrs	r1, r1, #24
 80263b6:	9115      	str	r1, [sp, #84]	@ 0x54
 80263b8:	b292      	uxth	r2, r2
 80263ba:	9c11      	ldr	r4, [sp, #68]	@ 0x44
 80263bc:	b280      	uxth	r0, r0
 80263be:	fb02 f800 	mul.w	r8, r2, r0
 80263c2:	0112      	lsls	r2, r2, #4
 80263c4:	ebc8 1000 	rsb	r0, r8, r0, lsl #4
 80263c8:	eba2 0e08 	sub.w	lr, r2, r8
 80263cc:	f5c2 7180 	rsb	r1, r2, #256	@ 0x100
 80263d0:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 80263d2:	b280      	uxth	r0, r0
 80263d4:	fa1f fe8e 	uxth.w	lr, lr
 80263d8:	1a09      	subs	r1, r1, r0
 80263da:	fb0e f202 	mul.w	r2, lr, r2
 80263de:	b289      	uxth	r1, r1
 80263e0:	fb01 220c 	mla	r2, r1, ip, r2
 80263e4:	fb00 2204 	mla	r2, r0, r4, r2
 80263e8:	9c15      	ldr	r4, [sp, #84]	@ 0x54
 80263ea:	fb08 2204 	mla	r2, r8, r4, r2
 80263ee:	f3c2 2207 	ubfx	r2, r2, #8, #8
 80263f2:	2a00      	cmp	r2, #0
 80263f4:	f000 80e5 	beq.w	80265c2 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x71e>
 80263f8:	f1bc 0fff 	cmp.w	ip, #255	@ 0xff
 80263fc:	d019      	beq.n	8026432 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x58e>
 80263fe:	f003 1aff 	and.w	sl, r3, #16711935	@ 0xff00ff
 8026402:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 8026406:	fb0c fa0a 	mul.w	sl, ip, sl
 802640a:	fb0c fc03 	mul.w	ip, ip, r3
 802640e:	ea4f 231a 	mov.w	r3, sl, lsr #8
 8026412:	f10a 1a01 	add.w	sl, sl, #65537	@ 0x10001
 8026416:	f50c 7780 	add.w	r7, ip, #256	@ 0x100
 802641a:	f003 13ff 	and.w	r3, r3, #16711935	@ 0xff00ff
 802641e:	eb07 271c 	add.w	r7, r7, ip, lsr #8
 8026422:	4453      	add	r3, sl
 8026424:	0a3f      	lsrs	r7, r7, #8
 8026426:	0a1b      	lsrs	r3, r3, #8
 8026428:	f407 477f 	and.w	r7, r7, #65280	@ 0xff00
 802642c:	f003 13ff 	and.w	r3, r3, #16711935	@ 0xff00ff
 8026430:	433b      	orrs	r3, r7
 8026432:	9c14      	ldr	r4, [sp, #80]	@ 0x50
 8026434:	2cff      	cmp	r4, #255	@ 0xff
 8026436:	d020      	beq.n	802647a <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5d6>
 8026438:	9c0d      	ldr	r4, [sp, #52]	@ 0x34
 802643a:	f004 17ff 	and.w	r7, r4, #16711935	@ 0xff00ff
 802643e:	9c14      	ldr	r4, [sp, #80]	@ 0x50
 8026440:	4367      	muls	r7, r4
 8026442:	9c0d      	ldr	r4, [sp, #52]	@ 0x34
 8026444:	ea4f 2c17 	mov.w	ip, r7, lsr #8
 8026448:	f404 4a7f 	and.w	sl, r4, #65280	@ 0xff00
 802644c:	9c14      	ldr	r4, [sp, #80]	@ 0x50
 802644e:	f107 1701 	add.w	r7, r7, #65537	@ 0x10001
 8026452:	f00c 1cff 	and.w	ip, ip, #16711935	@ 0xff00ff
 8026456:	fb04 fa0a 	mul.w	sl, r4, sl
 802645a:	44bc      	add	ip, r7
 802645c:	f50a 7780 	add.w	r7, sl, #256	@ 0x100
 8026460:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 8026464:	eb07 2a1a 	add.w	sl, r7, sl, lsr #8
 8026468:	f00c 1cff 	and.w	ip, ip, #16711935	@ 0xff00ff
 802646c:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 8026470:	f40a 4a7f 	and.w	sl, sl, #65280	@ 0xff00
 8026474:	ea4c 040a 	orr.w	r4, ip, sl
 8026478:	940d      	str	r4, [sp, #52]	@ 0x34
 802647a:	9c11      	ldr	r4, [sp, #68]	@ 0x44
 802647c:	2cff      	cmp	r4, #255	@ 0xff
 802647e:	d020      	beq.n	80264c2 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x61e>
 8026480:	9c09      	ldr	r4, [sp, #36]	@ 0x24
 8026482:	f004 17ff 	and.w	r7, r4, #16711935	@ 0xff00ff
 8026486:	9c11      	ldr	r4, [sp, #68]	@ 0x44
 8026488:	4367      	muls	r7, r4
 802648a:	9c09      	ldr	r4, [sp, #36]	@ 0x24
 802648c:	ea4f 2c17 	mov.w	ip, r7, lsr #8
 8026490:	f404 4a7f 	and.w	sl, r4, #65280	@ 0xff00
 8026494:	9c11      	ldr	r4, [sp, #68]	@ 0x44
 8026496:	f107 1701 	add.w	r7, r7, #65537	@ 0x10001
 802649a:	f00c 1cff 	and.w	ip, ip, #16711935	@ 0xff00ff
 802649e:	fb04 fa0a 	mul.w	sl, r4, sl
 80264a2:	44bc      	add	ip, r7
 80264a4:	f50a 7780 	add.w	r7, sl, #256	@ 0x100
 80264a8:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 80264ac:	eb07 2a1a 	add.w	sl, r7, sl, lsr #8
 80264b0:	f00c 1cff 	and.w	ip, ip, #16711935	@ 0xff00ff
 80264b4:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 80264b8:	f40a 4a7f 	and.w	sl, sl, #65280	@ 0xff00
 80264bc:	ea4c 040a 	orr.w	r4, ip, sl
 80264c0:	9409      	str	r4, [sp, #36]	@ 0x24
 80264c2:	9c15      	ldr	r4, [sp, #84]	@ 0x54
 80264c4:	2cff      	cmp	r4, #255	@ 0xff
 80264c6:	d020      	beq.n	802650a <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x666>
 80264c8:	9c0e      	ldr	r4, [sp, #56]	@ 0x38
 80264ca:	f004 17ff 	and.w	r7, r4, #16711935	@ 0xff00ff
 80264ce:	9c15      	ldr	r4, [sp, #84]	@ 0x54
 80264d0:	4367      	muls	r7, r4
 80264d2:	9c0e      	ldr	r4, [sp, #56]	@ 0x38
 80264d4:	ea4f 2c17 	mov.w	ip, r7, lsr #8
 80264d8:	f404 4a7f 	and.w	sl, r4, #65280	@ 0xff00
 80264dc:	9c15      	ldr	r4, [sp, #84]	@ 0x54
 80264de:	f107 1701 	add.w	r7, r7, #65537	@ 0x10001
 80264e2:	f00c 1cff 	and.w	ip, ip, #16711935	@ 0xff00ff
 80264e6:	fb04 fa0a 	mul.w	sl, r4, sl
 80264ea:	44bc      	add	ip, r7
 80264ec:	f50a 7780 	add.w	r7, sl, #256	@ 0x100
 80264f0:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 80264f4:	eb07 2a1a 	add.w	sl, r7, sl, lsr #8
 80264f8:	f00c 1cff 	and.w	ip, ip, #16711935	@ 0xff00ff
 80264fc:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 8026500:	f40a 4a7f 	and.w	sl, sl, #65280	@ 0xff00
 8026504:	ea4c 040a 	orr.w	r4, ip, sl
 8026508:	940e      	str	r4, [sp, #56]	@ 0x38
 802650a:	9c0d      	ldr	r4, [sp, #52]	@ 0x34
 802650c:	f003 1cff 	and.w	ip, r3, #16711935	@ 0xff00ff
 8026510:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 8026514:	43d2      	mvns	r2, r2
 8026516:	f004 17ff 	and.w	r7, r4, #16711935	@ 0xff00ff
 802651a:	9c09      	ldr	r4, [sp, #36]	@ 0x24
 802651c:	b2d2      	uxtb	r2, r2
 802651e:	fb0e f707 	mul.w	r7, lr, r7
 8026522:	fb01 770c 	mla	r7, r1, ip, r7
 8026526:	f004 1cff 	and.w	ip, r4, #16711935	@ 0xff00ff
 802652a:	9c0e      	ldr	r4, [sp, #56]	@ 0x38
 802652c:	fb00 770c 	mla	r7, r0, ip, r7
 8026530:	f004 1cff 	and.w	ip, r4, #16711935	@ 0xff00ff
 8026534:	9c0d      	ldr	r4, [sp, #52]	@ 0x34
 8026536:	fb08 770c 	mla	r7, r8, ip, r7
 802653a:	f404 4c7f 	and.w	ip, r4, #65280	@ 0xff00
 802653e:	fb0e fe0c 	mul.w	lr, lr, ip
 8026542:	0a3f      	lsrs	r7, r7, #8
 8026544:	fb01 e303 	mla	r3, r1, r3, lr
 8026548:	9909      	ldr	r1, [sp, #36]	@ 0x24
 802654a:	f007 17ff 	and.w	r7, r7, #16711935	@ 0xff00ff
 802654e:	f401 4a7f 	and.w	sl, r1, #65280	@ 0xff00
 8026552:	990e      	ldr	r1, [sp, #56]	@ 0x38
 8026554:	fb00 330a 	mla	r3, r0, sl, r3
 8026558:	f401 4c7f 	and.w	ip, r1, #65280	@ 0xff00
 802655c:	fb08 3c0c 	mla	ip, r8, ip, r3
 8026560:	f8b9 3000 	ldrh.w	r3, [r9]
 8026564:	1218      	asrs	r0, r3, #8
 8026566:	10d9      	asrs	r1, r3, #3
 8026568:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 802656c:	f000 00f8 	and.w	r0, r0, #248	@ 0xf8
 8026570:	00db      	lsls	r3, r3, #3
 8026572:	f001 01fc 	and.w	r1, r1, #252	@ 0xfc
 8026576:	4350      	muls	r0, r2
 8026578:	f40c 4c7f 	and.w	ip, ip, #65280	@ 0xff00
 802657c:	b2db      	uxtb	r3, r3
 802657e:	4351      	muls	r1, r2
 8026580:	ea47 070c 	orr.w	r7, r7, ip
 8026584:	4353      	muls	r3, r2
 8026586:	1c42      	adds	r2, r0, #1
 8026588:	eb02 2010 	add.w	r0, r2, r0, lsr #8
 802658c:	0c3a      	lsrs	r2, r7, #16
 802658e:	eb02 2010 	add.w	r0, r2, r0, lsr #8
 8026592:	4a19      	ldr	r2, [pc, #100]	@ (80265f8 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x754>)
 8026594:	b2c0      	uxtb	r0, r0
 8026596:	ea02 2000 	and.w	r0, r2, r0, lsl #8
 802659a:	1c4a      	adds	r2, r1, #1
 802659c:	eb02 2111 	add.w	r1, r2, r1, lsr #8
 80265a0:	0a3a      	lsrs	r2, r7, #8
 80265a2:	eb02 2111 	add.w	r1, r2, r1, lsr #8
 80265a6:	00c9      	lsls	r1, r1, #3
 80265a8:	f401 61fc 	and.w	r1, r1, #2016	@ 0x7e0
 80265ac:	4301      	orrs	r1, r0
 80265ae:	1c58      	adds	r0, r3, #1
 80265b0:	eb00 2013 	add.w	r0, r0, r3, lsr #8
 80265b4:	eb07 2710 	add.w	r7, r7, r0, lsr #8
 80265b8:	f3c7 00c4 	ubfx	r0, r7, #3, #5
 80265bc:	4308      	orrs	r0, r1
 80265be:	f8a9 0000 	strh.w	r0, [r9]
 80265c2:	9b2f      	ldr	r3, [sp, #188]	@ 0xbc
 80265c4:	f109 0902 	add.w	r9, r9, #2
 80265c8:	9a2d      	ldr	r2, [sp, #180]	@ 0xb4
 80265ca:	f10b 3bff 	add.w	fp, fp, #4294967295
 80265ce:	441a      	add	r2, r3
 80265d0:	9b30      	ldr	r3, [sp, #192]	@ 0xc0
 80265d2:	922d      	str	r2, [sp, #180]	@ 0xb4
 80265d4:	441d      	add	r5, r3
 80265d6:	e64c      	b.n	8026272 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3ce>
 80265d8:	2800      	cmp	r0, #0
 80265da:	f43f aeed 	beq.w	80263b8 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x514>
 80265de:	5c79      	ldrb	r1, [r7, r1]
 80265e0:	f856 1021 	ldr.w	r1, [r6, r1, lsl #2]
 80265e4:	9109      	str	r1, [sp, #36]	@ 0x24
 80265e6:	0e09      	lsrs	r1, r1, #24
 80265e8:	9111      	str	r1, [sp, #68]	@ 0x44
 80265ea:	e6e5      	b.n	80263b8 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x514>
 80265ec:	b01b      	add	sp, #108	@ 0x6c
 80265ee:	ecbd 8b08 	vpop	{d8-d11}
 80265f2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80265f6:	bf00      	nop
 80265f8:	fffff800 	.word	0xfffff800

080265fc <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh>:
 80265fc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8026600:	b085      	sub	sp, #20
 8026602:	e9dd 7510 	ldrd	r7, r5, [sp, #64]	@ 0x40
 8026606:	f9bd 6038 	ldrsh.w	r6, [sp, #56]	@ 0x38
 802660a:	9103      	str	r1, [sp, #12]
 802660c:	2d00      	cmp	r5, #0
 802660e:	fb05 7106 	mla	r1, r5, r6, r7
 8026612:	f9bd 803c 	ldrsh.w	r8, [sp, #60]	@ 0x3c
 8026616:	f89d 0048 	ldrb.w	r0, [sp, #72]	@ 0x48
 802661a:	eb02 0441 	add.w	r4, r2, r1, lsl #1
 802661e:	f89d e04c 	ldrb.w	lr, [sp, #76]	@ 0x4c
 8026622:	eb03 0901 	add.w	r9, r3, r1
 8026626:	9401      	str	r4, [sp, #4]
 8026628:	f2c0 80c0 	blt.w	80267ac <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0x1b0>
 802662c:	45a8      	cmp	r8, r5
 802662e:	f340 80bd 	ble.w	80267ac <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0x1b0>
 8026632:	2f00      	cmp	r7, #0
 8026634:	f2c0 80b6 	blt.w	80267a4 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0x1a8>
 8026638:	42be      	cmp	r6, r7
 802663a:	f340 80b3 	ble.w	80267a4 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0x1a8>
 802663e:	f813 c001 	ldrb.w	ip, [r3, r1]
 8026642:	f832 1011 	ldrh.w	r1, [r2, r1, lsl #1]
 8026646:	f1bc 0fff 	cmp.w	ip, #255	@ 0xff
 802664a:	d019      	beq.n	8026680 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0x84>
 802664c:	f421 63fc 	bic.w	r3, r1, #2016	@ 0x7e0
 8026650:	ea4f 02ec 	mov.w	r2, ip, asr #3
 8026654:	435a      	muls	r2, r3
 8026656:	f401 63fc 	and.w	r3, r1, #2016	@ 0x7e0
 802665a:	f64f 011f 	movw	r1, #63519	@ 0xf81f
 802665e:	fb0c f403 	mul.w	r4, ip, r3
 8026662:	ea01 1352 	and.w	r3, r1, r2, lsr #5
 8026666:	f602 0201 	addw	r2, r2, #2049	@ 0x801
 802666a:	441a      	add	r2, r3
 802666c:	f104 0320 	add.w	r3, r4, #32
 8026670:	eb03 2314 	add.w	r3, r3, r4, lsr #8
 8026674:	ea01 1152 	and.w	r1, r1, r2, lsr #5
 8026678:	0a1b      	lsrs	r3, r3, #8
 802667a:	f403 63fc 	and.w	r3, r3, #2016	@ 0x7e0
 802667e:	4319      	orrs	r1, r3
 8026680:	b289      	uxth	r1, r1
 8026682:	1c7b      	adds	r3, r7, #1
 8026684:	f100 8097 	bmi.w	80267b6 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0x1ba>
 8026688:	429e      	cmp	r6, r3
 802668a:	f340 8094 	ble.w	80267b6 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0x1ba>
 802668e:	2800      	cmp	r0, #0
 8026690:	f000 8094 	beq.w	80267bc <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0x1c0>
 8026694:	f899 4001 	ldrb.w	r4, [r9, #1]
 8026698:	9b01      	ldr	r3, [sp, #4]
 802669a:	2cff      	cmp	r4, #255	@ 0xff
 802669c:	885b      	ldrh	r3, [r3, #2]
 802669e:	d01b      	beq.n	80266d8 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0xdc>
 80266a0:	f423 62fc 	bic.w	r2, r3, #2016	@ 0x7e0
 80266a4:	ea4f 0ae4 	mov.w	sl, r4, asr #3
 80266a8:	f403 63fc 	and.w	r3, r3, #2016	@ 0x7e0
 80266ac:	f64f 0b1f 	movw	fp, #63519	@ 0xf81f
 80266b0:	fb0a f202 	mul.w	r2, sl, r2
 80266b4:	fb04 fa03 	mul.w	sl, r4, r3
 80266b8:	ea0b 1352 	and.w	r3, fp, r2, lsr #5
 80266bc:	f602 0201 	addw	r2, r2, #2049	@ 0x801
 80266c0:	441a      	add	r2, r3
 80266c2:	f10a 0320 	add.w	r3, sl, #32
 80266c6:	eb03 231a 	add.w	r3, r3, sl, lsr #8
 80266ca:	ea0b 1b52 	and.w	fp, fp, r2, lsr #5
 80266ce:	0a1b      	lsrs	r3, r3, #8
 80266d0:	f403 63fc 	and.w	r3, r3, #2016	@ 0x7e0
 80266d4:	ea4b 0303 	orr.w	r3, fp, r3
 80266d8:	b29b      	uxth	r3, r3
 80266da:	3501      	adds	r5, #1
 80266dc:	d474      	bmi.n	80267c8 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0x1cc>
 80266de:	45a8      	cmp	r8, r5
 80266e0:	dd72      	ble.n	80267c8 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0x1cc>
 80266e2:	f1be 0f00 	cmp.w	lr, #0
 80266e6:	f000 8120 	beq.w	802692a <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0x32e>
 80266ea:	2f00      	cmp	r7, #0
 80266ec:	db69      	blt.n	80267c2 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0x1c6>
 80266ee:	42be      	cmp	r6, r7
 80266f0:	dd67      	ble.n	80267c2 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0x1c6>
 80266f2:	f819 5006 	ldrb.w	r5, [r9, r6]
 80266f6:	9a01      	ldr	r2, [sp, #4]
 80266f8:	2dff      	cmp	r5, #255	@ 0xff
 80266fa:	f832 b016 	ldrh.w	fp, [r2, r6, lsl #1]
 80266fe:	d01c      	beq.n	802673a <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0x13e>
 8026700:	f42b 62fc 	bic.w	r2, fp, #2016	@ 0x7e0
 8026704:	ea4f 08e5 	mov.w	r8, r5, asr #3
 8026708:	f40b 6bfc 	and.w	fp, fp, #2016	@ 0x7e0
 802670c:	fb08 f802 	mul.w	r8, r8, r2
 8026710:	fb05 fa0b 	mul.w	sl, r5, fp
 8026714:	f64f 0b1f 	movw	fp, #63519	@ 0xf81f
 8026718:	ea0b 1258 	and.w	r2, fp, r8, lsr #5
 802671c:	f608 0801 	addw	r8, r8, #2049	@ 0x801
 8026720:	4490      	add	r8, r2
 8026722:	f10a 0220 	add.w	r2, sl, #32
 8026726:	eb02 2a1a 	add.w	sl, r2, sl, lsr #8
 802672a:	ea0b 1b58 	and.w	fp, fp, r8, lsr #5
 802672e:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 8026732:	f40a 6afc 	and.w	sl, sl, #2016	@ 0x7e0
 8026736:	ea4b 0b0a 	orr.w	fp, fp, sl
 802673a:	fa1f fb8b 	uxth.w	fp, fp
 802673e:	3701      	adds	r7, #1
 8026740:	d447      	bmi.n	80267d2 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0x1d6>
 8026742:	42be      	cmp	r6, r7
 8026744:	dd45      	ble.n	80267d2 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0x1d6>
 8026746:	2800      	cmp	r0, #0
 8026748:	d046      	beq.n	80267d8 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0x1dc>
 802674a:	3601      	adds	r6, #1
 802674c:	9a01      	ldr	r2, [sp, #4]
 802674e:	f819 7006 	ldrb.w	r7, [r9, r6]
 8026752:	f832 2016 	ldrh.w	r2, [r2, r6, lsl #1]
 8026756:	2fff      	cmp	r7, #255	@ 0xff
 8026758:	d01a      	beq.n	8026790 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0x194>
 802675a:	f422 66fc 	bic.w	r6, r2, #2016	@ 0x7e0
 802675e:	ea4f 08e7 	mov.w	r8, r7, asr #3
 8026762:	f402 62fc 	and.w	r2, r2, #2016	@ 0x7e0
 8026766:	fb08 f806 	mul.w	r8, r8, r6
 802676a:	fb07 f902 	mul.w	r9, r7, r2
 802676e:	f64f 021f 	movw	r2, #63519	@ 0xf81f
 8026772:	ea02 1658 	and.w	r6, r2, r8, lsr #5
 8026776:	f608 0801 	addw	r8, r8, #2049	@ 0x801
 802677a:	44b0      	add	r8, r6
 802677c:	f109 0620 	add.w	r6, r9, #32
 8026780:	eb06 2619 	add.w	r6, r6, r9, lsr #8
 8026784:	ea02 1258 	and.w	r2, r2, r8, lsr #5
 8026788:	0a36      	lsrs	r6, r6, #8
 802678a:	f406 66fc 	and.w	r6, r6, #2016	@ 0x7e0
 802678e:	4332      	orrs	r2, r6
 8026790:	b292      	uxth	r2, r2
 8026792:	280f      	cmp	r0, #15
 8026794:	d922      	bls.n	80267dc <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0x1e0>
 8026796:	4b69      	ldr	r3, [pc, #420]	@ (802693c <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0x340>)
 8026798:	f44f 71fb 	mov.w	r1, #502	@ 0x1f6
 802679c:	4a68      	ldr	r2, [pc, #416]	@ (8026940 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0x344>)
 802679e:	4869      	ldr	r0, [pc, #420]	@ (8026944 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0x348>)
 80267a0:	f004 fa50 	bl	802ac44 <__assert_func>
 80267a4:	f04f 0c00 	mov.w	ip, #0
 80267a8:	4661      	mov	r1, ip
 80267aa:	e76a      	b.n	8026682 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0x86>
 80267ac:	2400      	movs	r4, #0
 80267ae:	46a4      	mov	ip, r4
 80267b0:	4623      	mov	r3, r4
 80267b2:	4621      	mov	r1, r4
 80267b4:	e791      	b.n	80266da <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0xde>
 80267b6:	2400      	movs	r4, #0
 80267b8:	4623      	mov	r3, r4
 80267ba:	e78e      	b.n	80266da <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0xde>
 80267bc:	4604      	mov	r4, r0
 80267be:	4603      	mov	r3, r0
 80267c0:	e78b      	b.n	80266da <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0xde>
 80267c2:	2500      	movs	r5, #0
 80267c4:	46ab      	mov	fp, r5
 80267c6:	e7ba      	b.n	802673e <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0x142>
 80267c8:	2700      	movs	r7, #0
 80267ca:	463d      	mov	r5, r7
 80267cc:	463a      	mov	r2, r7
 80267ce:	46bb      	mov	fp, r7
 80267d0:	e7df      	b.n	8026792 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0x196>
 80267d2:	2700      	movs	r7, #0
 80267d4:	463a      	mov	r2, r7
 80267d6:	e7dc      	b.n	8026792 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0x196>
 80267d8:	4607      	mov	r7, r0
 80267da:	4602      	mov	r2, r0
 80267dc:	f1be 0f0f 	cmp.w	lr, #15
 80267e0:	d8d9      	bhi.n	8026796 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0x19a>
 80267e2:	b286      	uxth	r6, r0
 80267e4:	fa1f f98e 	uxth.w	r9, lr
 80267e8:	ea4f 4a01 	mov.w	sl, r1, lsl #16
 80267ec:	f421 61fc 	bic.w	r1, r1, #2016	@ 0x7e0
 80267f0:	fb06 f809 	mul.w	r8, r6, r9
 80267f4:	0136      	lsls	r6, r6, #4
 80267f6:	f00a 6afc 	and.w	sl, sl, #132120576	@ 0x7e00000
 80267fa:	ebc8 1909 	rsb	r9, r8, r9, lsl #4
 80267fe:	9601      	str	r6, [sp, #4]
 8026800:	ea4a 0101 	orr.w	r1, sl, r1
 8026804:	ea4f 4a03 	mov.w	sl, r3, lsl #16
 8026808:	fa1f f689 	uxth.w	r6, r9
 802680c:	f423 63fc 	bic.w	r3, r3, #2016	@ 0x7e0
 8026810:	fb10 f90e 	smulbb	r9, r0, lr
 8026814:	f00a 6afc 	and.w	sl, sl, #132120576	@ 0x7e00000
 8026818:	9602      	str	r6, [sp, #8]
 802681a:	460e      	mov	r6, r1
 802681c:	ea4f 09e9 	mov.w	r9, r9, asr #3
 8026820:	f1ce 0110 	rsb	r1, lr, #16
 8026824:	ea4a 0303 	orr.w	r3, sl, r3
 8026828:	ea4f 4a02 	mov.w	sl, r2, lsl #16
 802682c:	1a09      	subs	r1, r1, r0
 802682e:	ebc9 0040 	rsb	r0, r9, r0, lsl #1
 8026832:	f00a 6afc 	and.w	sl, sl, #132120576	@ 0x7e00000
 8026836:	f422 62fc 	bic.w	r2, r2, #2016	@ 0x7e0
 802683a:	4343      	muls	r3, r0
 802683c:	eb09 0141 	add.w	r1, r9, r1, lsl #1
 8026840:	9801      	ldr	r0, [sp, #4]
 8026842:	ea4a 0202 	orr.w	r2, sl, r2
 8026846:	fb01 3106 	mla	r1, r1, r6, r3
 802684a:	9e02      	ldr	r6, [sp, #8]
 802684c:	f5c0 7080 	rsb	r0, r0, #256	@ 0x100
 8026850:	ea4f 4a0b 	mov.w	sl, fp, lsl #16
 8026854:	fb09 1302 	mla	r3, r9, r2, r1
 8026858:	f42b 6bfc 	bic.w	fp, fp, #2016	@ 0x7e0
 802685c:	1b80      	subs	r0, r0, r6
 802685e:	9e01      	ldr	r6, [sp, #4]
 8026860:	9a03      	ldr	r2, [sp, #12]
 8026862:	f00a 6afc 	and.w	sl, sl, #132120576	@ 0x7e00000
 8026866:	eba6 0608 	sub.w	r6, r6, r8
 802686a:	b280      	uxth	r0, r0
 802686c:	8811      	ldrh	r1, [r2, #0]
 802686e:	ea4a 0b0b 	orr.w	fp, sl, fp
 8026872:	b2b6      	uxth	r6, r6
 8026874:	f89d 2050 	ldrb.w	r2, [sp, #80]	@ 0x50
 8026878:	ebc9 0e4e 	rsb	lr, r9, lr, lsl #1
 802687c:	4374      	muls	r4, r6
 802687e:	b292      	uxth	r2, r2
 8026880:	fb0e 3e0b 	mla	lr, lr, fp, r3
 8026884:	fb0c 4400 	mla	r4, ip, r0, r4
 8026888:	9802      	ldr	r0, [sp, #8]
 802688a:	ea4f 535e 	mov.w	r3, lr, lsr #21
 802688e:	fb00 4505 	mla	r5, r0, r5, r4
 8026892:	ea4f 1e5e 	mov.w	lr, lr, lsr #5
 8026896:	f403 63fc 	and.w	r3, r3, #2016	@ 0x7e0
 802689a:	1208      	asrs	r0, r1, #8
 802689c:	fb08 5707 	mla	r7, r8, r7, r5
 80268a0:	f42e 6efc 	bic.w	lr, lr, #2016	@ 0x7e0
 80268a4:	f000 00f8 	and.w	r0, r0, #248	@ 0xf8
 80268a8:	10cd      	asrs	r5, r1, #3
 80268aa:	f3c7 2707 	ubfx	r7, r7, #8, #8
 80268ae:	ea43 0e0e 	orr.w	lr, r3, lr
 80268b2:	f005 05fc 	and.w	r5, r5, #252	@ 0xfc
 80268b6:	4357      	muls	r7, r2
 80268b8:	fa1f f38e 	uxth.w	r3, lr
 80268bc:	f107 0801 	add.w	r8, r7, #1
 80268c0:	121c      	asrs	r4, r3, #8
 80268c2:	eb08 2717 	add.w	r7, r8, r7, lsr #8
 80268c6:	f004 04f8 	and.w	r4, r4, #248	@ 0xf8
 80268ca:	ea6f 2717 	mvn.w	r7, r7, lsr #8
 80268ce:	b2ff      	uxtb	r7, r7
 80268d0:	fb10 f007 	smulbb	r0, r0, r7
 80268d4:	fb15 f507 	smulbb	r5, r5, r7
 80268d8:	fb04 0402 	mla	r4, r4, r2, r0
 80268dc:	10d8      	asrs	r0, r3, #3
 80268de:	00db      	lsls	r3, r3, #3
 80268e0:	f000 00fc 	and.w	r0, r0, #252	@ 0xfc
 80268e4:	b2a4      	uxth	r4, r4
 80268e6:	fb00 5002 	mla	r0, r0, r2, r5
 80268ea:	b2dd      	uxtb	r5, r3
 80268ec:	00cb      	lsls	r3, r1, #3
 80268ee:	b280      	uxth	r0, r0
 80268f0:	b2db      	uxtb	r3, r3
 80268f2:	fb13 f307 	smulbb	r3, r3, r7
 80268f6:	fb05 3202 	mla	r2, r5, r2, r3
 80268fa:	1c63      	adds	r3, r4, #1
 80268fc:	b292      	uxth	r2, r2
 80268fe:	eb03 2414 	add.w	r4, r3, r4, lsr #8
 8026902:	1c53      	adds	r3, r2, #1
 8026904:	f404 4478 	and.w	r4, r4, #63488	@ 0xf800
 8026908:	eb03 2312 	add.w	r3, r3, r2, lsr #8
 802690c:	1c42      	adds	r2, r0, #1
 802690e:	eb02 2010 	add.w	r0, r2, r0, lsr #8
 8026912:	f3c3 23c4 	ubfx	r3, r3, #11, #5
 8026916:	9a03      	ldr	r2, [sp, #12]
 8026918:	0940      	lsrs	r0, r0, #5
 802691a:	4323      	orrs	r3, r4
 802691c:	f400 60fc 	and.w	r0, r0, #2016	@ 0x7e0
 8026920:	4303      	orrs	r3, r0
 8026922:	8013      	strh	r3, [r2, #0]
 8026924:	b005      	add	sp, #20
 8026926:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 802692a:	280f      	cmp	r0, #15
 802692c:	f63f af33 	bhi.w	8026796 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0x19a>
 8026930:	4677      	mov	r7, lr
 8026932:	4675      	mov	r5, lr
 8026934:	4672      	mov	r2, lr
 8026936:	46f3      	mov	fp, lr
 8026938:	e753      	b.n	80267e2 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0x1e6>
 802693a:	bf00      	nop
 802693c:	0802fed5 	.word	0x0802fed5
 8026940:	080304a2 	.word	0x080304a2
 8026944:	0802ff59 	.word	0x0802ff59

08026948 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 8026948:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 802694c:	ed2d 8b08 	vpush	{d8-d11}
 8026950:	b097      	sub	sp, #92	@ 0x5c
 8026952:	eeb0 aa40 	vmov.f32	s20, s0
 8026956:	eef0 9a60 	vmov.f32	s19, s1
 802695a:	9214      	str	r2, [sp, #80]	@ 0x50
 802695c:	eeb0 9a41 	vmov.f32	s18, s2
 8026960:	9a2d      	ldr	r2, [sp, #180]	@ 0xb4
 8026962:	eeb0 8a62 	vmov.f32	s16, s5
 8026966:	9308      	str	r3, [sp, #32]
 8026968:	eef0 8a43 	vmov.f32	s17, s6
 802696c:	f89d 30c4 	ldrb.w	r3, [sp, #196]	@ 0xc4
 8026970:	eef0 ba44 	vmov.f32	s23, s8
 8026974:	9015      	str	r0, [sp, #84]	@ 0x54
 8026976:	eeb0 ba64 	vmov.f32	s22, s9
 802697a:	9312      	str	r3, [sp, #72]	@ 0x48
 802697c:	eef0 aa45 	vmov.f32	s21, s10
 8026980:	6850      	ldr	r0, [r2, #4]
 8026982:	9111      	str	r1, [sp, #68]	@ 0x44
 8026984:	6812      	ldr	r2, [r2, #0]
 8026986:	e9dd 132e 	ldrd	r1, r3, [sp, #184]	@ 0xb8
 802698a:	fb00 1303 	mla	r3, r0, r3, r1
 802698e:	eb02 0343 	add.w	r3, r2, r3, lsl #1
 8026992:	9309      	str	r3, [sp, #36]	@ 0x24
 8026994:	9b30      	ldr	r3, [sp, #192]	@ 0xc0
 8026996:	681b      	ldr	r3, [r3, #0]
 8026998:	930b      	str	r3, [sp, #44]	@ 0x2c
 802699a:	9b30      	ldr	r3, [sp, #192]	@ 0xc0
 802699c:	685b      	ldr	r3, [r3, #4]
 802699e:	930c      	str	r3, [sp, #48]	@ 0x30
 80269a0:	f8bd 3048 	ldrh.w	r3, [sp, #72]	@ 0x48
 80269a4:	930a      	str	r3, [sp, #40]	@ 0x28
 80269a6:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 80269a8:	2b00      	cmp	r3, #0
 80269aa:	dc03      	bgt.n	80269b4 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6c>
 80269ac:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 80269ae:	2b00      	cmp	r3, #0
 80269b0:	f340 83cd 	ble.w	802714e <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x806>
 80269b4:	9b30      	ldr	r3, [sp, #192]	@ 0xc0
 80269b6:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 80269ba:	f9b3 200c 	ldrsh.w	r2, [r3, #12]
 80269be:	1e48      	subs	r0, r1, #1
 80269c0:	1e55      	subs	r5, r2, #1
 80269c2:	9b08      	ldr	r3, [sp, #32]
 80269c4:	2b00      	cmp	r3, #0
 80269c6:	f340 81a5 	ble.w	8026d14 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3cc>
 80269ca:	9e29      	ldr	r6, [sp, #164]	@ 0xa4
 80269cc:	9b2a      	ldr	r3, [sp, #168]	@ 0xa8
 80269ce:	1436      	asrs	r6, r6, #16
 80269d0:	ea4f 4323 	mov.w	r3, r3, asr #16
 80269d4:	d406      	bmi.n	80269e4 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x9c>
 80269d6:	4286      	cmp	r6, r0
 80269d8:	da04      	bge.n	80269e4 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x9c>
 80269da:	2b00      	cmp	r3, #0
 80269dc:	db02      	blt.n	80269e4 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x9c>
 80269de:	42ab      	cmp	r3, r5
 80269e0:	f2c0 8199 	blt.w	8026d16 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3ce>
 80269e4:	3601      	adds	r6, #1
 80269e6:	f100 8186 	bmi.w	8026cf6 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3ae>
 80269ea:	42b1      	cmp	r1, r6
 80269ec:	f2c0 8183 	blt.w	8026cf6 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3ae>
 80269f0:	3301      	adds	r3, #1
 80269f2:	f100 8180 	bmi.w	8026cf6 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3ae>
 80269f6:	429a      	cmp	r2, r3
 80269f8:	f2c0 817d 	blt.w	8026cf6 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3ae>
 80269fc:	9b08      	ldr	r3, [sp, #32]
 80269fe:	f64f 061f 	movw	r6, #63519	@ 0xf81f
 8026a02:	9f09      	ldr	r7, [sp, #36]	@ 0x24
 8026a04:	9313      	str	r3, [sp, #76]	@ 0x4c
 8026a06:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 8026a08:	2b00      	cmp	r3, #0
 8026a0a:	f340 81a6 	ble.w	8026d5a <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x412>
 8026a0e:	9b2a      	ldr	r3, [sp, #168]	@ 0xa8
 8026a10:	9d29      	ldr	r5, [sp, #164]	@ 0xa4
 8026a12:	1418      	asrs	r0, r3, #16
 8026a14:	9b29      	ldr	r3, [sp, #164]	@ 0xa4
 8026a16:	142d      	asrs	r5, r5, #16
 8026a18:	f3c3 3103 	ubfx	r1, r3, #12, #4
 8026a1c:	9b2a      	ldr	r3, [sp, #168]	@ 0xa8
 8026a1e:	f3c3 3c03 	ubfx	ip, r3, #12, #4
 8026a22:	9b30      	ldr	r3, [sp, #192]	@ 0xc0
 8026a24:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 8026a28:	f100 81fa 	bmi.w	8026e20 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4d8>
 8026a2c:	f102 3eff 	add.w	lr, r2, #4294967295
 8026a30:	4575      	cmp	r5, lr
 8026a32:	f280 81f5 	bge.w	8026e20 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4d8>
 8026a36:	2800      	cmp	r0, #0
 8026a38:	f2c0 81f2 	blt.w	8026e20 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4d8>
 8026a3c:	f103 3eff 	add.w	lr, r3, #4294967295
 8026a40:	4570      	cmp	r0, lr
 8026a42:	f280 81ed 	bge.w	8026e20 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4d8>
 8026a46:	b212      	sxth	r2, r2
 8026a48:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8026a4a:	fa1f fe81 	uxth.w	lr, r1
 8026a4e:	fb00 5002 	mla	r0, r0, r2, r5
 8026a52:	ea4f 150e 	mov.w	r5, lr, lsl #4
 8026a56:	eb03 0a00 	add.w	sl, r3, r0
 8026a5a:	f813 9000 	ldrb.w	r9, [r3, r0]
 8026a5e:	f5c5 7380 	rsb	r3, r5, #256	@ 0x100
 8026a62:	f89a 8001 	ldrb.w	r8, [sl, #1]
 8026a66:	b29b      	uxth	r3, r3
 8026a68:	f1bc 0f00 	cmp.w	ip, #0
 8026a6c:	f000 81bb 	beq.w	8026de6 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x49e>
 8026a70:	f81a 4002 	ldrb.w	r4, [sl, r2]
 8026a74:	eb0a 0b02 	add.w	fp, sl, r2
 8026a78:	fa1f fa8c 	uxth.w	sl, ip
 8026a7c:	940d      	str	r4, [sp, #52]	@ 0x34
 8026a7e:	fb0a fe0e 	mul.w	lr, sl, lr
 8026a82:	f89b 4001 	ldrb.w	r4, [fp, #1]
 8026a86:	ebce 1a0a 	rsb	sl, lr, sl, lsl #4
 8026a8a:	eba5 050e 	sub.w	r5, r5, lr
 8026a8e:	940e      	str	r4, [sp, #56]	@ 0x38
 8026a90:	fa1f fa8a 	uxth.w	sl, sl
 8026a94:	9c0d      	ldr	r4, [sp, #52]	@ 0x34
 8026a96:	b2ad      	uxth	r5, r5
 8026a98:	eba3 030a 	sub.w	r3, r3, sl
 8026a9c:	fb08 f505 	mul.w	r5, r8, r5
 8026aa0:	b29b      	uxth	r3, r3
 8026aa2:	fb09 5303 	mla	r3, r9, r3, r5
 8026aa6:	fb0a 3304 	mla	r3, sl, r4, r3
 8026aaa:	9c0e      	ldr	r4, [sp, #56]	@ 0x38
 8026aac:	fb0e 3304 	mla	r3, lr, r4, r3
 8026ab0:	f3c3 2307 	ubfx	r3, r3, #8, #8
 8026ab4:	2b00      	cmp	r3, #0
 8026ab6:	f000 8111 	beq.w	8026cdc <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x394>
 8026aba:	9c0b      	ldr	r4, [sp, #44]	@ 0x2c
 8026abc:	f1b9 0fff 	cmp.w	r9, #255	@ 0xff
 8026ac0:	eb04 0540 	add.w	r5, r4, r0, lsl #1
 8026ac4:	f834 0010 	ldrh.w	r0, [r4, r0, lsl #1]
 8026ac8:	f000 8192 	beq.w	8026df0 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4a8>
 8026acc:	f420 6efc 	bic.w	lr, r0, #2016	@ 0x7e0
 8026ad0:	ea4f 0ae9 	mov.w	sl, r9, asr #3
 8026ad4:	f400 60fc 	and.w	r0, r0, #2016	@ 0x7e0
 8026ad8:	fb0a fe0e 	mul.w	lr, sl, lr
 8026adc:	fb09 f000 	mul.w	r0, r9, r0
 8026ae0:	ea06 195e 	and.w	r9, r6, lr, lsr #5
 8026ae4:	f60e 0e01 	addw	lr, lr, #2049	@ 0x801
 8026ae8:	f100 0b20 	add.w	fp, r0, #32
 8026aec:	44ce      	add	lr, r9
 8026aee:	eb0b 2910 	add.w	r9, fp, r0, lsr #8
 8026af2:	ea06 1e5e 	and.w	lr, r6, lr, lsr #5
 8026af6:	ea4f 2919 	mov.w	r9, r9, lsr #8
 8026afa:	f409 69fc 	and.w	r9, r9, #2016	@ 0x7e0
 8026afe:	ea4e 0909 	orr.w	r9, lr, r9
 8026b02:	f1b8 0fff 	cmp.w	r8, #255	@ 0xff
 8026b06:	8868      	ldrh	r0, [r5, #2]
 8026b08:	d019      	beq.n	8026b3e <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1f6>
 8026b0a:	f420 6efc 	bic.w	lr, r0, #2016	@ 0x7e0
 8026b0e:	ea4f 0ae8 	mov.w	sl, r8, asr #3
 8026b12:	f400 60fc 	and.w	r0, r0, #2016	@ 0x7e0
 8026b16:	fb0a fe0e 	mul.w	lr, sl, lr
 8026b1a:	fb08 f800 	mul.w	r8, r8, r0
 8026b1e:	ea06 105e 	and.w	r0, r6, lr, lsr #5
 8026b22:	f60e 0e01 	addw	lr, lr, #2049	@ 0x801
 8026b26:	f108 0b20 	add.w	fp, r8, #32
 8026b2a:	4486      	add	lr, r0
 8026b2c:	eb0b 2018 	add.w	r0, fp, r8, lsr #8
 8026b30:	ea06 1e5e 	and.w	lr, r6, lr, lsr #5
 8026b34:	0a00      	lsrs	r0, r0, #8
 8026b36:	f400 60fc 	and.w	r0, r0, #2016	@ 0x7e0
 8026b3a:	ea4e 0000 	orr.w	r0, lr, r0
 8026b3e:	ea4f 4e09 	mov.w	lr, r9, lsl #16
 8026b42:	f429 69fc 	bic.w	r9, r9, #2016	@ 0x7e0
 8026b46:	ea4f 4a00 	mov.w	sl, r0, lsl #16
 8026b4a:	f420 60fc 	bic.w	r0, r0, #2016	@ 0x7e0
 8026b4e:	f00e 6efc 	and.w	lr, lr, #132120576	@ 0x7e00000
 8026b52:	f00a 6afc 	and.w	sl, sl, #132120576	@ 0x7e00000
 8026b56:	ea4e 0909 	orr.w	r9, lr, r9
 8026b5a:	ea4a 0000 	orr.w	r0, sl, r0
 8026b5e:	f1bc 0f00 	cmp.w	ip, #0
 8026b62:	f000 8147 	beq.w	8026df4 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4ac>
 8026b66:	f102 4200 	add.w	r2, r2, #2147483648	@ 0x80000000
 8026b6a:	9c0d      	ldr	r4, [sp, #52]	@ 0x34
 8026b6c:	3a01      	subs	r2, #1
 8026b6e:	2cff      	cmp	r4, #255	@ 0xff
 8026b70:	ea4f 0242 	mov.w	r2, r2, lsl #1
 8026b74:	f102 0202 	add.w	r2, r2, #2
 8026b78:	eb05 0e02 	add.w	lr, r5, r2
 8026b7c:	5aaa      	ldrh	r2, [r5, r2]
 8026b7e:	d018      	beq.n	8026bb2 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x26a>
 8026b80:	f422 65fc 	bic.w	r5, r2, #2016	@ 0x7e0
 8026b84:	f402 62fc 	and.w	r2, r2, #2016	@ 0x7e0
 8026b88:	ea4f 08e4 	mov.w	r8, r4, asr #3
 8026b8c:	fb04 fa02 	mul.w	sl, r4, r2
 8026b90:	fb08 f805 	mul.w	r8, r8, r5
 8026b94:	f10a 0520 	add.w	r5, sl, #32
 8026b98:	ea06 1258 	and.w	r2, r6, r8, lsr #5
 8026b9c:	f608 0801 	addw	r8, r8, #2049	@ 0x801
 8026ba0:	eb05 251a 	add.w	r5, r5, sl, lsr #8
 8026ba4:	4442      	add	r2, r8
 8026ba6:	0a2d      	lsrs	r5, r5, #8
 8026ba8:	ea06 1252 	and.w	r2, r6, r2, lsr #5
 8026bac:	f405 65fc 	and.w	r5, r5, #2016	@ 0x7e0
 8026bb0:	432a      	orrs	r2, r5
 8026bb2:	9c0e      	ldr	r4, [sp, #56]	@ 0x38
 8026bb4:	f8be 5002 	ldrh.w	r5, [lr, #2]
 8026bb8:	2cff      	cmp	r4, #255	@ 0xff
 8026bba:	d01a      	beq.n	8026bf2 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2aa>
 8026bbc:	f425 6efc 	bic.w	lr, r5, #2016	@ 0x7e0
 8026bc0:	f405 65fc 	and.w	r5, r5, #2016	@ 0x7e0
 8026bc4:	ea4f 08e4 	mov.w	r8, r4, asr #3
 8026bc8:	fb04 fa05 	mul.w	sl, r4, r5
 8026bcc:	fb08 f80e 	mul.w	r8, r8, lr
 8026bd0:	f10a 0e20 	add.w	lr, sl, #32
 8026bd4:	ea06 1558 	and.w	r5, r6, r8, lsr #5
 8026bd8:	f608 0801 	addw	r8, r8, #2049	@ 0x801
 8026bdc:	eb0e 2e1a 	add.w	lr, lr, sl, lsr #8
 8026be0:	4445      	add	r5, r8
 8026be2:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 8026be6:	ea06 1555 	and.w	r5, r6, r5, lsr #5
 8026bea:	f40e 6efc 	and.w	lr, lr, #2016	@ 0x7e0
 8026bee:	ea45 050e 	orr.w	r5, r5, lr
 8026bf2:	fb1c fe01 	smulbb	lr, ip, r1
 8026bf6:	f1cc 0810 	rsb	r8, ip, #16
 8026bfa:	ea4f 4a02 	mov.w	sl, r2, lsl #16
 8026bfe:	f422 62fc 	bic.w	r2, r2, #2016	@ 0x7e0
 8026c02:	ea4f 0eee 	mov.w	lr, lr, asr #3
 8026c06:	eba8 0801 	sub.w	r8, r8, r1
 8026c0a:	ea4f 4b05 	mov.w	fp, r5, lsl #16
 8026c0e:	f00a 6afc 	and.w	sl, sl, #132120576	@ 0x7e00000
 8026c12:	ebce 0141 	rsb	r1, lr, r1, lsl #1
 8026c16:	f425 65fc 	bic.w	r5, r5, #2016	@ 0x7e0
 8026c1a:	eb0e 0848 	add.w	r8, lr, r8, lsl #1
 8026c1e:	ea4a 0202 	orr.w	r2, sl, r2
 8026c22:	4341      	muls	r1, r0
 8026c24:	ebce 0c4c 	rsb	ip, lr, ip, lsl #1
 8026c28:	f00b 6bfc 	and.w	fp, fp, #132120576	@ 0x7e00000
 8026c2c:	fb09 1108 	mla	r1, r9, r8, r1
 8026c30:	ea4b 0505 	orr.w	r5, fp, r5
 8026c34:	fb0c 1102 	mla	r1, ip, r2, r1
 8026c38:	fb0e 1e05 	mla	lr, lr, r5, r1
 8026c3c:	ea4f 525e 	mov.w	r2, lr, lsr #21
 8026c40:	ea4f 1e5e 	mov.w	lr, lr, lsr #5
 8026c44:	f402 62fc 	and.w	r2, r2, #2016	@ 0x7e0
 8026c48:	f42e 6efc 	bic.w	lr, lr, #2016	@ 0x7e0
 8026c4c:	ea42 0e0e 	orr.w	lr, r2, lr
 8026c50:	fa1f f28e 	uxth.w	r2, lr
 8026c54:	2bff      	cmp	r3, #255	@ 0xff
 8026c56:	d103      	bne.n	8026c60 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x318>
 8026c58:	9912      	ldr	r1, [sp, #72]	@ 0x48
 8026c5a:	29ff      	cmp	r1, #255	@ 0xff
 8026c5c:	f000 80de 	beq.w	8026e1c <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4d4>
 8026c60:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8026c62:	1215      	asrs	r5, r2, #8
 8026c64:	8838      	ldrh	r0, [r7, #0]
 8026c66:	434b      	muls	r3, r1
 8026c68:	f005 05f8 	and.w	r5, r5, #248	@ 0xf8
 8026c6c:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 8026c6e:	f103 0c01 	add.w	ip, r3, #1
 8026c72:	eb0c 2323 	add.w	r3, ip, r3, asr #8
 8026c76:	ea6f 2323 	mvn.w	r3, r3, asr #8
 8026c7a:	fa5f fc83 	uxtb.w	ip, r3
 8026c7e:	1203      	asrs	r3, r0, #8
 8026c80:	f003 03f8 	and.w	r3, r3, #248	@ 0xf8
 8026c84:	fb13 f30c 	smulbb	r3, r3, ip
 8026c88:	fb05 3501 	mla	r5, r5, r1, r3
 8026c8c:	10c3      	asrs	r3, r0, #3
 8026c8e:	10d1      	asrs	r1, r2, #3
 8026c90:	f003 03fc 	and.w	r3, r3, #252	@ 0xfc
 8026c94:	00d2      	lsls	r2, r2, #3
 8026c96:	f001 01fc 	and.w	r1, r1, #252	@ 0xfc
 8026c9a:	b2ad      	uxth	r5, r5
 8026c9c:	fb13 f30c 	smulbb	r3, r3, ip
 8026ca0:	b2d2      	uxtb	r2, r2
 8026ca2:	fb01 3104 	mla	r1, r1, r4, r3
 8026ca6:	00c3      	lsls	r3, r0, #3
 8026ca8:	b2db      	uxtb	r3, r3
 8026caa:	b289      	uxth	r1, r1
 8026cac:	fb13 f30c 	smulbb	r3, r3, ip
 8026cb0:	fb02 3304 	mla	r3, r2, r4, r3
 8026cb4:	b29a      	uxth	r2, r3
 8026cb6:	1c6b      	adds	r3, r5, #1
 8026cb8:	eb03 2515 	add.w	r5, r3, r5, lsr #8
 8026cbc:	1c53      	adds	r3, r2, #1
 8026cbe:	eb03 2312 	add.w	r3, r3, r2, lsr #8
 8026cc2:	1c4a      	adds	r2, r1, #1
 8026cc4:	f405 4578 	and.w	r5, r5, #63488	@ 0xf800
 8026cc8:	eb02 2111 	add.w	r1, r2, r1, lsr #8
 8026ccc:	f3c3 23c4 	ubfx	r3, r3, #11, #5
 8026cd0:	0949      	lsrs	r1, r1, #5
 8026cd2:	432b      	orrs	r3, r5
 8026cd4:	f401 61fc 	and.w	r1, r1, #2016	@ 0x7e0
 8026cd8:	430b      	orrs	r3, r1
 8026cda:	803b      	strh	r3, [r7, #0]
 8026cdc:	9b29      	ldr	r3, [sp, #164]	@ 0xa4
 8026cde:	3702      	adds	r7, #2
 8026ce0:	9a2b      	ldr	r2, [sp, #172]	@ 0xac
 8026ce2:	4413      	add	r3, r2
 8026ce4:	9a2a      	ldr	r2, [sp, #168]	@ 0xa8
 8026ce6:	9329      	str	r3, [sp, #164]	@ 0xa4
 8026ce8:	9b2c      	ldr	r3, [sp, #176]	@ 0xb0
 8026cea:	441a      	add	r2, r3
 8026cec:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 8026cee:	3b01      	subs	r3, #1
 8026cf0:	922a      	str	r2, [sp, #168]	@ 0xa8
 8026cf2:	9313      	str	r3, [sp, #76]	@ 0x4c
 8026cf4:	e687      	b.n	8026a06 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xbe>
 8026cf6:	9b29      	ldr	r3, [sp, #164]	@ 0xa4
 8026cf8:	9e2b      	ldr	r6, [sp, #172]	@ 0xac
 8026cfa:	9c2a      	ldr	r4, [sp, #168]	@ 0xa8
 8026cfc:	4433      	add	r3, r6
 8026cfe:	9329      	str	r3, [sp, #164]	@ 0xa4
 8026d00:	9b2c      	ldr	r3, [sp, #176]	@ 0xb0
 8026d02:	441c      	add	r4, r3
 8026d04:	9b08      	ldr	r3, [sp, #32]
 8026d06:	3b01      	subs	r3, #1
 8026d08:	942a      	str	r4, [sp, #168]	@ 0xa8
 8026d0a:	9308      	str	r3, [sp, #32]
 8026d0c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8026d0e:	3302      	adds	r3, #2
 8026d10:	9309      	str	r3, [sp, #36]	@ 0x24
 8026d12:	e656      	b.n	80269c2 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7a>
 8026d14:	d028      	beq.n	8026d68 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x420>
 8026d16:	9b08      	ldr	r3, [sp, #32]
 8026d18:	982b      	ldr	r0, [sp, #172]	@ 0xac
 8026d1a:	3b01      	subs	r3, #1
 8026d1c:	9d29      	ldr	r5, [sp, #164]	@ 0xa4
 8026d1e:	fb00 5003 	mla	r0, r0, r3, r5
 8026d22:	1400      	asrs	r0, r0, #16
 8026d24:	f53f ae6a 	bmi.w	80269fc <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xb4>
 8026d28:	3901      	subs	r1, #1
 8026d2a:	4288      	cmp	r0, r1
 8026d2c:	f6bf ae66 	bge.w	80269fc <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xb4>
 8026d30:	992c      	ldr	r1, [sp, #176]	@ 0xb0
 8026d32:	982a      	ldr	r0, [sp, #168]	@ 0xa8
 8026d34:	fb01 0303 	mla	r3, r1, r3, r0
 8026d38:	141b      	asrs	r3, r3, #16
 8026d3a:	f53f ae5f 	bmi.w	80269fc <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xb4>
 8026d3e:	3a01      	subs	r2, #1
 8026d40:	4293      	cmp	r3, r2
 8026d42:	f6bf ae5b 	bge.w	80269fc <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xb4>
 8026d46:	9b08      	ldr	r3, [sp, #32]
 8026d48:	f64f 061f 	movw	r6, #63519	@ 0xf81f
 8026d4c:	f8dd e024 	ldr.w	lr, [sp, #36]	@ 0x24
 8026d50:	9313      	str	r3, [sp, #76]	@ 0x4c
 8026d52:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 8026d54:	2b00      	cmp	r3, #0
 8026d56:	f300 8082 	bgt.w	8026e5e <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x516>
 8026d5a:	9b08      	ldr	r3, [sp, #32]
 8026d5c:	ea23 74e3 	bic.w	r4, r3, r3, asr #31
 8026d60:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8026d62:	eb03 0344 	add.w	r3, r3, r4, lsl #1
 8026d66:	9309      	str	r3, [sp, #36]	@ 0x24
 8026d68:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 8026d6a:	2b00      	cmp	r3, #0
 8026d6c:	f340 81ef 	ble.w	802714e <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x806>
 8026d70:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8026d74:	9b28      	ldr	r3, [sp, #160]	@ 0xa0
 8026d76:	ee3a aa2b 	vadd.f32	s20, s20, s23
 8026d7a:	ee79 9a8b 	vadd.f32	s19, s19, s22
 8026d7e:	eef0 6a48 	vmov.f32	s13, s16
 8026d82:	eec7 7a0a 	vdiv.f32	s15, s14, s20
 8026d86:	ee39 9a2a 	vadd.f32	s18, s18, s21
 8026d8a:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 8026d8e:	edcd 6a29 	vstr	s13, [sp, #164]	@ 0xa4
 8026d92:	eef0 6a68 	vmov.f32	s13, s17
 8026d96:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 8026d9a:	edcd 6a2a 	vstr	s13, [sp, #168]	@ 0xa8
 8026d9e:	ee29 7aa7 	vmul.f32	s14, s19, s15
 8026da2:	ee69 7a27 	vmul.f32	s15, s18, s15
 8026da6:	ee37 8a48 	vsub.f32	s16, s14, s16
 8026daa:	ee77 8ae8 	vsub.f32	s17, s15, s17
 8026dae:	eebe 8ac8 	vcvt.s32.f32	s16, s16, #16
 8026db2:	eefe 8ac8 	vcvt.s32.f32	s17, s17, #16
 8026db6:	ee18 2a10 	vmov	r2, s16
 8026dba:	eeb0 8a47 	vmov.f32	s16, s14
 8026dbe:	fb92 f3f3 	sdiv	r3, r2, r3
 8026dc2:	ee18 2a90 	vmov	r2, s17
 8026dc6:	932b      	str	r3, [sp, #172]	@ 0xac
 8026dc8:	9b28      	ldr	r3, [sp, #160]	@ 0xa0
 8026dca:	eef0 8a67 	vmov.f32	s17, s15
 8026dce:	fb92 f3f3 	sdiv	r3, r2, r3
 8026dd2:	932c      	str	r3, [sp, #176]	@ 0xb0
 8026dd4:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 8026dd6:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 8026dd8:	3b01      	subs	r3, #1
 8026dda:	9311      	str	r3, [sp, #68]	@ 0x44
 8026ddc:	9b28      	ldr	r3, [sp, #160]	@ 0xa0
 8026dde:	bf08      	it	eq
 8026de0:	4613      	moveq	r3, r2
 8026de2:	9308      	str	r3, [sp, #32]
 8026de4:	e5df      	b.n	80269a6 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5e>
 8026de6:	fb08 f505 	mul.w	r5, r8, r5
 8026dea:	fb09 5303 	mla	r3, r9, r3, r5
 8026dee:	e65f      	b.n	8026ab0 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x168>
 8026df0:	4681      	mov	r9, r0
 8026df2:	e686      	b.n	8026b02 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ba>
 8026df4:	f1c1 0210 	rsb	r2, r1, #16
 8026df8:	4341      	muls	r1, r0
 8026dfa:	fb09 1902 	mla	r9, r9, r2, r1
 8026dfe:	ea4f 0949 	mov.w	r9, r9, lsl #1
 8026e02:	ea4f 5259 	mov.w	r2, r9, lsr #21
 8026e06:	ea4f 1959 	mov.w	r9, r9, lsr #5
 8026e0a:	f402 62fc 	and.w	r2, r2, #2016	@ 0x7e0
 8026e0e:	f429 69fc 	bic.w	r9, r9, #2016	@ 0x7e0
 8026e12:	ea42 0909 	orr.w	r9, r2, r9
 8026e16:	fa1f f289 	uxth.w	r2, r9
 8026e1a:	e71b      	b.n	8026c54 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x30c>
 8026e1c:	803a      	strh	r2, [r7, #0]
 8026e1e:	e75d      	b.n	8026cdc <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x394>
 8026e20:	f115 0e01 	adds.w	lr, r5, #1
 8026e24:	f53f af5a 	bmi.w	8026cdc <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x394>
 8026e28:	4572      	cmp	r2, lr
 8026e2a:	f6ff af57 	blt.w	8026cdc <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x394>
 8026e2e:	f110 0e01 	adds.w	lr, r0, #1
 8026e32:	f53f af53 	bmi.w	8026cdc <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x394>
 8026e36:	4573      	cmp	r3, lr
 8026e38:	f6ff af50 	blt.w	8026cdc <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x394>
 8026e3c:	9c12      	ldr	r4, [sp, #72]	@ 0x48
 8026e3e:	b21b      	sxth	r3, r3
 8026e40:	b212      	sxth	r2, r2
 8026e42:	9502      	str	r5, [sp, #8]
 8026e44:	9301      	str	r3, [sp, #4]
 8026e46:	9200      	str	r2, [sp, #0]
 8026e48:	e9cd 0103 	strd	r0, r1, [sp, #12]
 8026e4c:	e9cd c405 	strd	ip, r4, [sp, #20]
 8026e50:	e9dd 230b 	ldrd	r2, r3, [sp, #44]	@ 0x2c
 8026e54:	4639      	mov	r1, r7
 8026e56:	9815      	ldr	r0, [sp, #84]	@ 0x54
 8026e58:	f7ff fbd0 	bl	80265fc <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh>
 8026e5c:	e73e      	b.n	8026cdc <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x394>
 8026e5e:	9b29      	ldr	r3, [sp, #164]	@ 0xa4
 8026e60:	f3c3 3203 	ubfx	r2, r3, #12, #4
 8026e64:	9b2a      	ldr	r3, [sp, #168]	@ 0xa8
 8026e66:	f3c3 3503 	ubfx	r5, r3, #12, #4
 8026e6a:	9b30      	ldr	r3, [sp, #192]	@ 0xc0
 8026e6c:	fa1f fc82 	uxth.w	ip, r2
 8026e70:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 8026e74:	9b2a      	ldr	r3, [sp, #168]	@ 0xa8
 8026e76:	ea4f 100c 	mov.w	r0, ip, lsl #4
 8026e7a:	141f      	asrs	r7, r3, #16
 8026e7c:	9b29      	ldr	r3, [sp, #164]	@ 0xa4
 8026e7e:	141b      	asrs	r3, r3, #16
 8026e80:	fb01 3707 	mla	r7, r1, r7, r3
 8026e84:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8026e86:	eb03 0a07 	add.w	sl, r3, r7
 8026e8a:	f813 9007 	ldrb.w	r9, [r3, r7]
 8026e8e:	f5c0 7380 	rsb	r3, r0, #256	@ 0x100
 8026e92:	f89a 8001 	ldrb.w	r8, [sl, #1]
 8026e96:	b29b      	uxth	r3, r3
 8026e98:	2d00      	cmp	r5, #0
 8026e9a:	f000 813d 	beq.w	8027118 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7d0>
 8026e9e:	f81a 4001 	ldrb.w	r4, [sl, r1]
 8026ea2:	eb0a 0b01 	add.w	fp, sl, r1
 8026ea6:	fa1f fa85 	uxth.w	sl, r5
 8026eaa:	940f      	str	r4, [sp, #60]	@ 0x3c
 8026eac:	fb0a fc0c 	mul.w	ip, sl, ip
 8026eb0:	f89b 4001 	ldrb.w	r4, [fp, #1]
 8026eb4:	ebcc 1a0a 	rsb	sl, ip, sl, lsl #4
 8026eb8:	eba0 000c 	sub.w	r0, r0, ip
 8026ebc:	9410      	str	r4, [sp, #64]	@ 0x40
 8026ebe:	fa1f fa8a 	uxth.w	sl, sl
 8026ec2:	b280      	uxth	r0, r0
 8026ec4:	eba3 030a 	sub.w	r3, r3, sl
 8026ec8:	fb08 f000 	mul.w	r0, r8, r0
 8026ecc:	b29b      	uxth	r3, r3
 8026ece:	fb09 0303 	mla	r3, r9, r3, r0
 8026ed2:	980f      	ldr	r0, [sp, #60]	@ 0x3c
 8026ed4:	fb0a 3300 	mla	r3, sl, r0, r3
 8026ed8:	fb0c 3304 	mla	r3, ip, r4, r3
 8026edc:	f3c3 2307 	ubfx	r3, r3, #8, #8
 8026ee0:	2b00      	cmp	r3, #0
 8026ee2:	f000 810b 	beq.w	80270fc <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7b4>
 8026ee6:	980b      	ldr	r0, [sp, #44]	@ 0x2c
 8026ee8:	f1b9 0fff 	cmp.w	r9, #255	@ 0xff
 8026eec:	9c0b      	ldr	r4, [sp, #44]	@ 0x2c
 8026eee:	eb00 0047 	add.w	r0, r0, r7, lsl #1
 8026ef2:	f834 7017 	ldrh.w	r7, [r4, r7, lsl #1]
 8026ef6:	f000 8114 	beq.w	8027122 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7da>
 8026efa:	f427 6cfc 	bic.w	ip, r7, #2016	@ 0x7e0
 8026efe:	ea4f 0ae9 	mov.w	sl, r9, asr #3
 8026f02:	f407 67fc 	and.w	r7, r7, #2016	@ 0x7e0
 8026f06:	fb0a fc0c 	mul.w	ip, sl, ip
 8026f0a:	fb09 f707 	mul.w	r7, r9, r7
 8026f0e:	ea06 195c 	and.w	r9, r6, ip, lsr #5
 8026f12:	f60c 0c01 	addw	ip, ip, #2049	@ 0x801
 8026f16:	f107 0b20 	add.w	fp, r7, #32
 8026f1a:	44cc      	add	ip, r9
 8026f1c:	eb0b 2917 	add.w	r9, fp, r7, lsr #8
 8026f20:	ea06 1c5c 	and.w	ip, r6, ip, lsr #5
 8026f24:	ea4f 2919 	mov.w	r9, r9, lsr #8
 8026f28:	f409 69fc 	and.w	r9, r9, #2016	@ 0x7e0
 8026f2c:	ea4c 0909 	orr.w	r9, ip, r9
 8026f30:	f1b8 0fff 	cmp.w	r8, #255	@ 0xff
 8026f34:	8847      	ldrh	r7, [r0, #2]
 8026f36:	d019      	beq.n	8026f6c <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x624>
 8026f38:	f427 6cfc 	bic.w	ip, r7, #2016	@ 0x7e0
 8026f3c:	ea4f 0ae8 	mov.w	sl, r8, asr #3
 8026f40:	f407 67fc 	and.w	r7, r7, #2016	@ 0x7e0
 8026f44:	fb0a fc0c 	mul.w	ip, sl, ip
 8026f48:	fb08 f807 	mul.w	r8, r8, r7
 8026f4c:	ea06 175c 	and.w	r7, r6, ip, lsr #5
 8026f50:	f60c 0c01 	addw	ip, ip, #2049	@ 0x801
 8026f54:	f108 0b20 	add.w	fp, r8, #32
 8026f58:	44bc      	add	ip, r7
 8026f5a:	eb0b 2718 	add.w	r7, fp, r8, lsr #8
 8026f5e:	ea06 1c5c 	and.w	ip, r6, ip, lsr #5
 8026f62:	0a3f      	lsrs	r7, r7, #8
 8026f64:	f407 67fc 	and.w	r7, r7, #2016	@ 0x7e0
 8026f68:	ea4c 0707 	orr.w	r7, ip, r7
 8026f6c:	ea4f 4c09 	mov.w	ip, r9, lsl #16
 8026f70:	f429 69fc 	bic.w	r9, r9, #2016	@ 0x7e0
 8026f74:	ea4f 4a07 	mov.w	sl, r7, lsl #16
 8026f78:	f427 67fc 	bic.w	r7, r7, #2016	@ 0x7e0
 8026f7c:	f00c 6cfc 	and.w	ip, ip, #132120576	@ 0x7e00000
 8026f80:	f00a 6afc 	and.w	sl, sl, #132120576	@ 0x7e00000
 8026f84:	ea4c 0909 	orr.w	r9, ip, r9
 8026f88:	ea4a 0707 	orr.w	r7, sl, r7
 8026f8c:	2d00      	cmp	r5, #0
 8026f8e:	f000 80ca 	beq.w	8027126 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7de>
 8026f92:	f101 4100 	add.w	r1, r1, #2147483648	@ 0x80000000
 8026f96:	3901      	subs	r1, #1
 8026f98:	0049      	lsls	r1, r1, #1
 8026f9a:	3102      	adds	r1, #2
 8026f9c:	eb00 0c01 	add.w	ip, r0, r1
 8026fa0:	5a41      	ldrh	r1, [r0, r1]
 8026fa2:	980f      	ldr	r0, [sp, #60]	@ 0x3c
 8026fa4:	28ff      	cmp	r0, #255	@ 0xff
 8026fa6:	d019      	beq.n	8026fdc <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x694>
 8026fa8:	f421 60fc 	bic.w	r0, r1, #2016	@ 0x7e0
 8026fac:	9c0f      	ldr	r4, [sp, #60]	@ 0x3c
 8026fae:	f401 61fc 	and.w	r1, r1, #2016	@ 0x7e0
 8026fb2:	ea4f 08e4 	mov.w	r8, r4, asr #3
 8026fb6:	fb04 fa01 	mul.w	sl, r4, r1
 8026fba:	fb08 f800 	mul.w	r8, r8, r0
 8026fbe:	f10a 0020 	add.w	r0, sl, #32
 8026fc2:	ea06 1158 	and.w	r1, r6, r8, lsr #5
 8026fc6:	f608 0801 	addw	r8, r8, #2049	@ 0x801
 8026fca:	eb00 201a 	add.w	r0, r0, sl, lsr #8
 8026fce:	4441      	add	r1, r8
 8026fd0:	0a00      	lsrs	r0, r0, #8
 8026fd2:	ea06 1151 	and.w	r1, r6, r1, lsr #5
 8026fd6:	f400 60fc 	and.w	r0, r0, #2016	@ 0x7e0
 8026fda:	4301      	orrs	r1, r0
 8026fdc:	9c10      	ldr	r4, [sp, #64]	@ 0x40
 8026fde:	f8bc 0002 	ldrh.w	r0, [ip, #2]
 8026fe2:	2cff      	cmp	r4, #255	@ 0xff
 8026fe4:	d01a      	beq.n	802701c <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6d4>
 8026fe6:	f420 6cfc 	bic.w	ip, r0, #2016	@ 0x7e0
 8026fea:	f400 60fc 	and.w	r0, r0, #2016	@ 0x7e0
 8026fee:	ea4f 08e4 	mov.w	r8, r4, asr #3
 8026ff2:	fb04 fa00 	mul.w	sl, r4, r0
 8026ff6:	fb08 f80c 	mul.w	r8, r8, ip
 8026ffa:	f10a 0c20 	add.w	ip, sl, #32
 8026ffe:	ea06 1058 	and.w	r0, r6, r8, lsr #5
 8027002:	f608 0801 	addw	r8, r8, #2049	@ 0x801
 8027006:	eb0c 2c1a 	add.w	ip, ip, sl, lsr #8
 802700a:	4440      	add	r0, r8
 802700c:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 8027010:	ea06 1050 	and.w	r0, r6, r0, lsr #5
 8027014:	f40c 6cfc 	and.w	ip, ip, #2016	@ 0x7e0
 8027018:	ea40 000c 	orr.w	r0, r0, ip
 802701c:	fb15 fc02 	smulbb	ip, r5, r2
 8027020:	f1c5 0810 	rsb	r8, r5, #16
 8027024:	ea4f 4a01 	mov.w	sl, r1, lsl #16
 8027028:	f421 61fc 	bic.w	r1, r1, #2016	@ 0x7e0
 802702c:	ea4f 0cec 	mov.w	ip, ip, asr #3
 8027030:	eba8 0802 	sub.w	r8, r8, r2
 8027034:	ea4f 4b00 	mov.w	fp, r0, lsl #16
 8027038:	f00a 6afc 	and.w	sl, sl, #132120576	@ 0x7e00000
 802703c:	ebcc 0242 	rsb	r2, ip, r2, lsl #1
 8027040:	f420 60fc 	bic.w	r0, r0, #2016	@ 0x7e0
 8027044:	eb0c 0848 	add.w	r8, ip, r8, lsl #1
 8027048:	ea4a 0101 	orr.w	r1, sl, r1
 802704c:	437a      	muls	r2, r7
 802704e:	ebcc 0545 	rsb	r5, ip, r5, lsl #1
 8027052:	f00b 6bfc 	and.w	fp, fp, #132120576	@ 0x7e00000
 8027056:	fb09 2208 	mla	r2, r9, r8, r2
 802705a:	ea4b 0000 	orr.w	r0, fp, r0
 802705e:	fb05 2201 	mla	r2, r5, r1, r2
 8027062:	fb0c 2200 	mla	r2, ip, r0, r2
 8027066:	0d57      	lsrs	r7, r2, #21
 8027068:	0952      	lsrs	r2, r2, #5
 802706a:	f407 67fc 	and.w	r7, r7, #2016	@ 0x7e0
 802706e:	f422 62fc 	bic.w	r2, r2, #2016	@ 0x7e0
 8027072:	433a      	orrs	r2, r7
 8027074:	2bff      	cmp	r3, #255	@ 0xff
 8027076:	b292      	uxth	r2, r2
 8027078:	d102      	bne.n	8027080 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x738>
 802707a:	9912      	ldr	r1, [sp, #72]	@ 0x48
 802707c:	29ff      	cmp	r1, #255	@ 0xff
 802707e:	d063      	beq.n	8027148 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x800>
 8027080:	980a      	ldr	r0, [sp, #40]	@ 0x28
 8027082:	1215      	asrs	r5, r2, #8
 8027084:	f8be 1000 	ldrh.w	r1, [lr]
 8027088:	4343      	muls	r3, r0
 802708a:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 802708c:	10cf      	asrs	r7, r1, #3
 802708e:	f005 05f8 	and.w	r5, r5, #248	@ 0xf8
 8027092:	1c58      	adds	r0, r3, #1
 8027094:	f007 07fc 	and.w	r7, r7, #252	@ 0xfc
 8027098:	eb00 2323 	add.w	r3, r0, r3, asr #8
 802709c:	1208      	asrs	r0, r1, #8
 802709e:	ea6f 2323 	mvn.w	r3, r3, asr #8
 80270a2:	00c9      	lsls	r1, r1, #3
 80270a4:	f000 00f8 	and.w	r0, r0, #248	@ 0xf8
 80270a8:	b2db      	uxtb	r3, r3
 80270aa:	b2c9      	uxtb	r1, r1
 80270ac:	fb10 f003 	smulbb	r0, r0, r3
 80270b0:	fb11 f103 	smulbb	r1, r1, r3
 80270b4:	fb05 0504 	mla	r5, r5, r4, r0
 80270b8:	10d0      	asrs	r0, r2, #3
 80270ba:	fb17 f703 	smulbb	r7, r7, r3
 80270be:	00d2      	lsls	r2, r2, #3
 80270c0:	b2ad      	uxth	r5, r5
 80270c2:	f000 00fc 	and.w	r0, r0, #252	@ 0xfc
 80270c6:	b2d2      	uxtb	r2, r2
 80270c8:	fb00 7004 	mla	r0, r0, r4, r7
 80270cc:	1c6b      	adds	r3, r5, #1
 80270ce:	fb02 1204 	mla	r2, r2, r4, r1
 80270d2:	eb03 2515 	add.w	r5, r3, r5, lsr #8
 80270d6:	b292      	uxth	r2, r2
 80270d8:	b280      	uxth	r0, r0
 80270da:	f405 4578 	and.w	r5, r5, #63488	@ 0xf800
 80270de:	1c57      	adds	r7, r2, #1
 80270e0:	eb07 2712 	add.w	r7, r7, r2, lsr #8
 80270e4:	f3c7 27c4 	ubfx	r7, r7, #11, #5
 80270e8:	433d      	orrs	r5, r7
 80270ea:	1c47      	adds	r7, r0, #1
 80270ec:	eb07 2710 	add.w	r7, r7, r0, lsr #8
 80270f0:	097f      	lsrs	r7, r7, #5
 80270f2:	f407 67fc 	and.w	r7, r7, #2016	@ 0x7e0
 80270f6:	433d      	orrs	r5, r7
 80270f8:	f8ae 5000 	strh.w	r5, [lr]
 80270fc:	9b29      	ldr	r3, [sp, #164]	@ 0xa4
 80270fe:	f10e 0e02 	add.w	lr, lr, #2
 8027102:	9a2b      	ldr	r2, [sp, #172]	@ 0xac
 8027104:	4413      	add	r3, r2
 8027106:	9a2a      	ldr	r2, [sp, #168]	@ 0xa8
 8027108:	9329      	str	r3, [sp, #164]	@ 0xa4
 802710a:	9b2c      	ldr	r3, [sp, #176]	@ 0xb0
 802710c:	441a      	add	r2, r3
 802710e:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 8027110:	3b01      	subs	r3, #1
 8027112:	922a      	str	r2, [sp, #168]	@ 0xa8
 8027114:	9313      	str	r3, [sp, #76]	@ 0x4c
 8027116:	e61c      	b.n	8026d52 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x40a>
 8027118:	fb08 f000 	mul.w	r0, r8, r0
 802711c:	fb09 0303 	mla	r3, r9, r3, r0
 8027120:	e6dc      	b.n	8026edc <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x594>
 8027122:	46b9      	mov	r9, r7
 8027124:	e704      	b.n	8026f30 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5e8>
 8027126:	f1c2 0110 	rsb	r1, r2, #16
 802712a:	437a      	muls	r2, r7
 802712c:	fb09 2901 	mla	r9, r9, r1, r2
 8027130:	ea4f 0949 	mov.w	r9, r9, lsl #1
 8027134:	ea4f 5059 	mov.w	r0, r9, lsr #21
 8027138:	ea4f 1259 	mov.w	r2, r9, lsr #5
 802713c:	f400 60fc 	and.w	r0, r0, #2016	@ 0x7e0
 8027140:	f422 62fc 	bic.w	r2, r2, #2016	@ 0x7e0
 8027144:	4302      	orrs	r2, r0
 8027146:	e795      	b.n	8027074 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x72c>
 8027148:	f8ae 2000 	strh.w	r2, [lr]
 802714c:	e7d6      	b.n	80270fc <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7b4>
 802714e:	b017      	add	sp, #92	@ 0x5c
 8027150:	ecbd 8b08 	vpop	{d8-d11}
 8027154:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08027158 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh>:
 8027158:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 802715c:	b085      	sub	sp, #20
 802715e:	e9dd 7510 	ldrd	r7, r5, [sp, #64]	@ 0x40
 8027162:	f9bd 6038 	ldrsh.w	r6, [sp, #56]	@ 0x38
 8027166:	9103      	str	r1, [sp, #12]
 8027168:	2d00      	cmp	r5, #0
 802716a:	fb05 7106 	mla	r1, r5, r6, r7
 802716e:	f9bd 803c 	ldrsh.w	r8, [sp, #60]	@ 0x3c
 8027172:	f89d 0048 	ldrb.w	r0, [sp, #72]	@ 0x48
 8027176:	eb03 0441 	add.w	r4, r3, r1, lsl #1
 802717a:	f89d e04c 	ldrb.w	lr, [sp, #76]	@ 0x4c
 802717e:	eb02 0901 	add.w	r9, r2, r1
 8027182:	9401      	str	r4, [sp, #4]
 8027184:	f2c0 80c0 	blt.w	8027308 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x1b0>
 8027188:	45a8      	cmp	r8, r5
 802718a:	f340 80bd 	ble.w	8027308 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x1b0>
 802718e:	2f00      	cmp	r7, #0
 8027190:	f2c0 80b6 	blt.w	8027300 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x1a8>
 8027194:	42be      	cmp	r6, r7
 8027196:	f340 80b3 	ble.w	8027300 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x1a8>
 802719a:	f812 c001 	ldrb.w	ip, [r2, r1]
 802719e:	f833 1011 	ldrh.w	r1, [r3, r1, lsl #1]
 80271a2:	f1bc 0fff 	cmp.w	ip, #255	@ 0xff
 80271a6:	d019      	beq.n	80271dc <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x84>
 80271a8:	f421 63fc 	bic.w	r3, r1, #2016	@ 0x7e0
 80271ac:	ea4f 02ec 	mov.w	r2, ip, asr #3
 80271b0:	435a      	muls	r2, r3
 80271b2:	f401 63fc 	and.w	r3, r1, #2016	@ 0x7e0
 80271b6:	f64f 011f 	movw	r1, #63519	@ 0xf81f
 80271ba:	fb0c f403 	mul.w	r4, ip, r3
 80271be:	ea01 1352 	and.w	r3, r1, r2, lsr #5
 80271c2:	f602 0201 	addw	r2, r2, #2049	@ 0x801
 80271c6:	441a      	add	r2, r3
 80271c8:	f104 0320 	add.w	r3, r4, #32
 80271cc:	eb03 2314 	add.w	r3, r3, r4, lsr #8
 80271d0:	ea01 1152 	and.w	r1, r1, r2, lsr #5
 80271d4:	0a1b      	lsrs	r3, r3, #8
 80271d6:	f403 63fc 	and.w	r3, r3, #2016	@ 0x7e0
 80271da:	4319      	orrs	r1, r3
 80271dc:	b289      	uxth	r1, r1
 80271de:	1c7b      	adds	r3, r7, #1
 80271e0:	f100 8097 	bmi.w	8027312 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x1ba>
 80271e4:	429e      	cmp	r6, r3
 80271e6:	f340 8094 	ble.w	8027312 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x1ba>
 80271ea:	2800      	cmp	r0, #0
 80271ec:	f000 8094 	beq.w	8027318 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x1c0>
 80271f0:	f899 4001 	ldrb.w	r4, [r9, #1]
 80271f4:	9b01      	ldr	r3, [sp, #4]
 80271f6:	2cff      	cmp	r4, #255	@ 0xff
 80271f8:	885b      	ldrh	r3, [r3, #2]
 80271fa:	d01b      	beq.n	8027234 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0xdc>
 80271fc:	f423 62fc 	bic.w	r2, r3, #2016	@ 0x7e0
 8027200:	ea4f 0ae4 	mov.w	sl, r4, asr #3
 8027204:	f403 63fc 	and.w	r3, r3, #2016	@ 0x7e0
 8027208:	f64f 0b1f 	movw	fp, #63519	@ 0xf81f
 802720c:	fb0a f202 	mul.w	r2, sl, r2
 8027210:	fb04 fa03 	mul.w	sl, r4, r3
 8027214:	ea0b 1352 	and.w	r3, fp, r2, lsr #5
 8027218:	f602 0201 	addw	r2, r2, #2049	@ 0x801
 802721c:	441a      	add	r2, r3
 802721e:	f10a 0320 	add.w	r3, sl, #32
 8027222:	eb03 231a 	add.w	r3, r3, sl, lsr #8
 8027226:	ea0b 1b52 	and.w	fp, fp, r2, lsr #5
 802722a:	0a1b      	lsrs	r3, r3, #8
 802722c:	f403 63fc 	and.w	r3, r3, #2016	@ 0x7e0
 8027230:	ea4b 0303 	orr.w	r3, fp, r3
 8027234:	b29b      	uxth	r3, r3
 8027236:	3501      	adds	r5, #1
 8027238:	d474      	bmi.n	8027324 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x1cc>
 802723a:	45a8      	cmp	r8, r5
 802723c:	dd72      	ble.n	8027324 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x1cc>
 802723e:	f1be 0f00 	cmp.w	lr, #0
 8027242:	f000 8110 	beq.w	8027466 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x30e>
 8027246:	2f00      	cmp	r7, #0
 8027248:	db69      	blt.n	802731e <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x1c6>
 802724a:	42be      	cmp	r6, r7
 802724c:	dd67      	ble.n	802731e <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x1c6>
 802724e:	f819 5006 	ldrb.w	r5, [r9, r6]
 8027252:	9a01      	ldr	r2, [sp, #4]
 8027254:	2dff      	cmp	r5, #255	@ 0xff
 8027256:	f832 b016 	ldrh.w	fp, [r2, r6, lsl #1]
 802725a:	d01c      	beq.n	8027296 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x13e>
 802725c:	f42b 62fc 	bic.w	r2, fp, #2016	@ 0x7e0
 8027260:	ea4f 08e5 	mov.w	r8, r5, asr #3
 8027264:	f40b 6bfc 	and.w	fp, fp, #2016	@ 0x7e0
 8027268:	fb08 f802 	mul.w	r8, r8, r2
 802726c:	fb05 fa0b 	mul.w	sl, r5, fp
 8027270:	f64f 0b1f 	movw	fp, #63519	@ 0xf81f
 8027274:	ea0b 1258 	and.w	r2, fp, r8, lsr #5
 8027278:	f608 0801 	addw	r8, r8, #2049	@ 0x801
 802727c:	4490      	add	r8, r2
 802727e:	f10a 0220 	add.w	r2, sl, #32
 8027282:	eb02 2a1a 	add.w	sl, r2, sl, lsr #8
 8027286:	ea0b 1b58 	and.w	fp, fp, r8, lsr #5
 802728a:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 802728e:	f40a 6afc 	and.w	sl, sl, #2016	@ 0x7e0
 8027292:	ea4b 0b0a 	orr.w	fp, fp, sl
 8027296:	fa1f fb8b 	uxth.w	fp, fp
 802729a:	3701      	adds	r7, #1
 802729c:	d447      	bmi.n	802732e <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x1d6>
 802729e:	42be      	cmp	r6, r7
 80272a0:	dd45      	ble.n	802732e <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x1d6>
 80272a2:	2800      	cmp	r0, #0
 80272a4:	d046      	beq.n	8027334 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x1dc>
 80272a6:	3601      	adds	r6, #1
 80272a8:	9a01      	ldr	r2, [sp, #4]
 80272aa:	f819 7006 	ldrb.w	r7, [r9, r6]
 80272ae:	f832 2016 	ldrh.w	r2, [r2, r6, lsl #1]
 80272b2:	2fff      	cmp	r7, #255	@ 0xff
 80272b4:	d01a      	beq.n	80272ec <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x194>
 80272b6:	f422 66fc 	bic.w	r6, r2, #2016	@ 0x7e0
 80272ba:	ea4f 08e7 	mov.w	r8, r7, asr #3
 80272be:	f402 62fc 	and.w	r2, r2, #2016	@ 0x7e0
 80272c2:	fb08 f806 	mul.w	r8, r8, r6
 80272c6:	fb07 f902 	mul.w	r9, r7, r2
 80272ca:	f64f 021f 	movw	r2, #63519	@ 0xf81f
 80272ce:	ea02 1658 	and.w	r6, r2, r8, lsr #5
 80272d2:	f608 0801 	addw	r8, r8, #2049	@ 0x801
 80272d6:	44b0      	add	r8, r6
 80272d8:	f109 0620 	add.w	r6, r9, #32
 80272dc:	eb06 2619 	add.w	r6, r6, r9, lsr #8
 80272e0:	ea02 1258 	and.w	r2, r2, r8, lsr #5
 80272e4:	0a36      	lsrs	r6, r6, #8
 80272e6:	f406 66fc 	and.w	r6, r6, #2016	@ 0x7e0
 80272ea:	4332      	orrs	r2, r6
 80272ec:	b292      	uxth	r2, r2
 80272ee:	280f      	cmp	r0, #15
 80272f0:	d922      	bls.n	8027338 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x1e0>
 80272f2:	4b61      	ldr	r3, [pc, #388]	@ (8027478 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x320>)
 80272f4:	f44f 71fb 	mov.w	r1, #502	@ 0x1f6
 80272f8:	4a60      	ldr	r2, [pc, #384]	@ (802747c <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x324>)
 80272fa:	4861      	ldr	r0, [pc, #388]	@ (8027480 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x328>)
 80272fc:	f003 fca2 	bl	802ac44 <__assert_func>
 8027300:	f04f 0c00 	mov.w	ip, #0
 8027304:	4661      	mov	r1, ip
 8027306:	e76a      	b.n	80271de <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x86>
 8027308:	2400      	movs	r4, #0
 802730a:	46a4      	mov	ip, r4
 802730c:	4623      	mov	r3, r4
 802730e:	4621      	mov	r1, r4
 8027310:	e791      	b.n	8027236 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0xde>
 8027312:	2400      	movs	r4, #0
 8027314:	4623      	mov	r3, r4
 8027316:	e78e      	b.n	8027236 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0xde>
 8027318:	4604      	mov	r4, r0
 802731a:	4603      	mov	r3, r0
 802731c:	e78b      	b.n	8027236 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0xde>
 802731e:	2500      	movs	r5, #0
 8027320:	46ab      	mov	fp, r5
 8027322:	e7ba      	b.n	802729a <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x142>
 8027324:	2700      	movs	r7, #0
 8027326:	463d      	mov	r5, r7
 8027328:	463a      	mov	r2, r7
 802732a:	46bb      	mov	fp, r7
 802732c:	e7df      	b.n	80272ee <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x196>
 802732e:	2700      	movs	r7, #0
 8027330:	463a      	mov	r2, r7
 8027332:	e7dc      	b.n	80272ee <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x196>
 8027334:	4607      	mov	r7, r0
 8027336:	4602      	mov	r2, r0
 8027338:	f1be 0f0f 	cmp.w	lr, #15
 802733c:	d8d9      	bhi.n	80272f2 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x19a>
 802733e:	b286      	uxth	r6, r0
 8027340:	fa1f f98e 	uxth.w	r9, lr
 8027344:	ea4f 4a01 	mov.w	sl, r1, lsl #16
 8027348:	f421 61fc 	bic.w	r1, r1, #2016	@ 0x7e0
 802734c:	fb06 f809 	mul.w	r8, r6, r9
 8027350:	0136      	lsls	r6, r6, #4
 8027352:	f00a 6afc 	and.w	sl, sl, #132120576	@ 0x7e00000
 8027356:	ebc8 1909 	rsb	r9, r8, r9, lsl #4
 802735a:	9601      	str	r6, [sp, #4]
 802735c:	ea4a 0101 	orr.w	r1, sl, r1
 8027360:	ea4f 4a03 	mov.w	sl, r3, lsl #16
 8027364:	fa1f f689 	uxth.w	r6, r9
 8027368:	f423 63fc 	bic.w	r3, r3, #2016	@ 0x7e0
 802736c:	fb10 f90e 	smulbb	r9, r0, lr
 8027370:	f00a 6afc 	and.w	sl, sl, #132120576	@ 0x7e00000
 8027374:	9602      	str	r6, [sp, #8]
 8027376:	460e      	mov	r6, r1
 8027378:	ea4f 09e9 	mov.w	r9, r9, asr #3
 802737c:	f1ce 0110 	rsb	r1, lr, #16
 8027380:	ea4a 0303 	orr.w	r3, sl, r3
 8027384:	ea4f 4a02 	mov.w	sl, r2, lsl #16
 8027388:	1a09      	subs	r1, r1, r0
 802738a:	ebc9 0040 	rsb	r0, r9, r0, lsl #1
 802738e:	f00a 6afc 	and.w	sl, sl, #132120576	@ 0x7e00000
 8027392:	f422 62fc 	bic.w	r2, r2, #2016	@ 0x7e0
 8027396:	4343      	muls	r3, r0
 8027398:	eb09 0141 	add.w	r1, r9, r1, lsl #1
 802739c:	ea4a 0202 	orr.w	r2, sl, r2
 80273a0:	9802      	ldr	r0, [sp, #8]
 80273a2:	fb01 3106 	mla	r1, r1, r6, r3
 80273a6:	ea4f 4a0b 	mov.w	sl, fp, lsl #16
 80273aa:	f42b 6bfc 	bic.w	fp, fp, #2016	@ 0x7e0
 80273ae:	ebc9 0e4e 	rsb	lr, r9, lr, lsl #1
 80273b2:	fb09 1302 	mla	r3, r9, r2, r1
 80273b6:	9a03      	ldr	r2, [sp, #12]
 80273b8:	f00a 6afc 	and.w	sl, sl, #132120576	@ 0x7e00000
 80273bc:	8811      	ldrh	r1, [r2, #0]
 80273be:	9a01      	ldr	r2, [sp, #4]
 80273c0:	ea4a 0b0b 	orr.w	fp, sl, fp
 80273c4:	f5c2 7280 	rsb	r2, r2, #256	@ 0x100
 80273c8:	fb0e 3e0b 	mla	lr, lr, fp, r3
 80273cc:	1a12      	subs	r2, r2, r0
 80273ce:	9801      	ldr	r0, [sp, #4]
 80273d0:	ea4f 535e 	mov.w	r3, lr, lsr #21
 80273d4:	eba0 0608 	sub.w	r6, r0, r8
 80273d8:	b292      	uxth	r2, r2
 80273da:	ea4f 1e5e 	mov.w	lr, lr, lsr #5
 80273de:	f403 63fc 	and.w	r3, r3, #2016	@ 0x7e0
 80273e2:	b2b6      	uxth	r6, r6
 80273e4:	10c8      	asrs	r0, r1, #3
 80273e6:	f42e 6efc 	bic.w	lr, lr, #2016	@ 0x7e0
 80273ea:	4374      	muls	r4, r6
 80273ec:	ea43 0e0e 	orr.w	lr, r3, lr
 80273f0:	f000 00fc 	and.w	r0, r0, #252	@ 0xfc
 80273f4:	fb0c 4402 	mla	r4, ip, r2, r4
 80273f8:	9a02      	ldr	r2, [sp, #8]
 80273fa:	fa1f f38e 	uxth.w	r3, lr
 80273fe:	fb02 4505 	mla	r5, r2, r5, r4
 8027402:	120a      	asrs	r2, r1, #8
 8027404:	00c9      	lsls	r1, r1, #3
 8027406:	fb08 5707 	mla	r7, r8, r7, r5
 802740a:	f002 02f8 	and.w	r2, r2, #248	@ 0xf8
 802740e:	b2c9      	uxtb	r1, r1
 8027410:	ea6f 2727 	mvn.w	r7, r7, asr #8
 8027414:	b2ff      	uxtb	r7, r7
 8027416:	437a      	muls	r2, r7
 8027418:	4378      	muls	r0, r7
 802741a:	434f      	muls	r7, r1
 802741c:	1c51      	adds	r1, r2, #1
 802741e:	eb01 2112 	add.w	r1, r1, r2, lsr #8
 8027422:	121a      	asrs	r2, r3, #8
 8027424:	f022 0207 	bic.w	r2, r2, #7
 8027428:	eb02 2211 	add.w	r2, r2, r1, lsr #8
 802742c:	1c41      	adds	r1, r0, #1
 802742e:	eb01 2010 	add.w	r0, r1, r0, lsr #8
 8027432:	10d9      	asrs	r1, r3, #3
 8027434:	0212      	lsls	r2, r2, #8
 8027436:	f021 0103 	bic.w	r1, r1, #3
 802743a:	00db      	lsls	r3, r3, #3
 802743c:	f402 4278 	and.w	r2, r2, #63488	@ 0xf800
 8027440:	eb01 2110 	add.w	r1, r1, r0, lsr #8
 8027444:	00c9      	lsls	r1, r1, #3
 8027446:	f401 61fc 	and.w	r1, r1, #2016	@ 0x7e0
 802744a:	430a      	orrs	r2, r1
 802744c:	1c79      	adds	r1, r7, #1
 802744e:	eb01 2717 	add.w	r7, r1, r7, lsr #8
 8027452:	eb03 2317 	add.w	r3, r3, r7, lsr #8
 8027456:	f3c3 03c4 	ubfx	r3, r3, #3, #5
 802745a:	4313      	orrs	r3, r2
 802745c:	9a03      	ldr	r2, [sp, #12]
 802745e:	8013      	strh	r3, [r2, #0]
 8027460:	b005      	add	sp, #20
 8027462:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8027466:	280f      	cmp	r0, #15
 8027468:	f63f af43 	bhi.w	80272f2 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x19a>
 802746c:	4677      	mov	r7, lr
 802746e:	4675      	mov	r5, lr
 8027470:	4672      	mov	r2, lr
 8027472:	46f3      	mov	fp, lr
 8027474:	e763      	b.n	802733e <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x1e6>
 8027476:	bf00      	nop
 8027478:	0802fed5 	.word	0x0802fed5
 802747c:	080304a2 	.word	0x080304a2
 8027480:	0802ff59 	.word	0x0802ff59

08027484 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 8027484:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8027488:	ed2d 8b08 	vpush	{d8-d11}
 802748c:	b093      	sub	sp, #76	@ 0x4c
 802748e:	eeb0 aa40 	vmov.f32	s20, s0
 8027492:	eef0 9a60 	vmov.f32	s19, s1
 8027496:	9210      	str	r2, [sp, #64]	@ 0x40
 8027498:	eeb0 9a41 	vmov.f32	s18, s2
 802749c:	9a29      	ldr	r2, [sp, #164]	@ 0xa4
 802749e:	eeb0 8a62 	vmov.f32	s16, s5
 80274a2:	9011      	str	r0, [sp, #68]	@ 0x44
 80274a4:	eef0 8a43 	vmov.f32	s17, s6
 80274a8:	6850      	ldr	r0, [r2, #4]
 80274aa:	eef0 ba44 	vmov.f32	s23, s8
 80274ae:	910e      	str	r1, [sp, #56]	@ 0x38
 80274b0:	eeb0 ba64 	vmov.f32	s22, s9
 80274b4:	9306      	str	r3, [sp, #24]
 80274b6:	eef0 aa45 	vmov.f32	s21, s10
 80274ba:	6812      	ldr	r2, [r2, #0]
 80274bc:	e9dd 132a 	ldrd	r1, r3, [sp, #168]	@ 0xa8
 80274c0:	fb00 1303 	mla	r3, r0, r3, r1
 80274c4:	eb02 0343 	add.w	r3, r2, r3, lsl #1
 80274c8:	9307      	str	r3, [sp, #28]
 80274ca:	9b2c      	ldr	r3, [sp, #176]	@ 0xb0
 80274cc:	681b      	ldr	r3, [r3, #0]
 80274ce:	9308      	str	r3, [sp, #32]
 80274d0:	9b2c      	ldr	r3, [sp, #176]	@ 0xb0
 80274d2:	685b      	ldr	r3, [r3, #4]
 80274d4:	9309      	str	r3, [sp, #36]	@ 0x24
 80274d6:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80274d8:	2b00      	cmp	r3, #0
 80274da:	dc03      	bgt.n	80274e4 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x60>
 80274dc:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 80274de:	2b00      	cmp	r3, #0
 80274e0:	f340 83b6 	ble.w	8027c50 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7cc>
 80274e4:	9b2c      	ldr	r3, [sp, #176]	@ 0xb0
 80274e6:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 80274ea:	f9b3 200c 	ldrsh.w	r2, [r3, #12]
 80274ee:	1e48      	subs	r0, r1, #1
 80274f0:	1e55      	subs	r5, r2, #1
 80274f2:	9b06      	ldr	r3, [sp, #24]
 80274f4:	2b00      	cmp	r3, #0
 80274f6:	f340 8165 	ble.w	80277c4 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x340>
 80274fa:	9e25      	ldr	r6, [sp, #148]	@ 0x94
 80274fc:	9b26      	ldr	r3, [sp, #152]	@ 0x98
 80274fe:	1436      	asrs	r6, r6, #16
 8027500:	ea4f 4323 	mov.w	r3, r3, asr #16
 8027504:	d406      	bmi.n	8027514 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x90>
 8027506:	4286      	cmp	r6, r0
 8027508:	da04      	bge.n	8027514 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x90>
 802750a:	2b00      	cmp	r3, #0
 802750c:	db02      	blt.n	8027514 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x90>
 802750e:	42ab      	cmp	r3, r5
 8027510:	f2c0 8159 	blt.w	80277c6 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x342>
 8027514:	3601      	adds	r6, #1
 8027516:	f100 8146 	bmi.w	80277a6 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x322>
 802751a:	42b1      	cmp	r1, r6
 802751c:	f2c0 8143 	blt.w	80277a6 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x322>
 8027520:	3301      	adds	r3, #1
 8027522:	f100 8140 	bmi.w	80277a6 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x322>
 8027526:	429a      	cmp	r2, r3
 8027528:	f2c0 813d 	blt.w	80277a6 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x322>
 802752c:	9b06      	ldr	r3, [sp, #24]
 802752e:	f64f 061f 	movw	r6, #63519	@ 0xf81f
 8027532:	9f07      	ldr	r7, [sp, #28]
 8027534:	930f      	str	r3, [sp, #60]	@ 0x3c
 8027536:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8027538:	2b00      	cmp	r3, #0
 802753a:	f340 8166 	ble.w	802780a <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x386>
 802753e:	9b26      	ldr	r3, [sp, #152]	@ 0x98
 8027540:	9d25      	ldr	r5, [sp, #148]	@ 0x94
 8027542:	1418      	asrs	r0, r3, #16
 8027544:	9b25      	ldr	r3, [sp, #148]	@ 0x94
 8027546:	142d      	asrs	r5, r5, #16
 8027548:	f3c3 3103 	ubfx	r1, r3, #12, #4
 802754c:	9b26      	ldr	r3, [sp, #152]	@ 0x98
 802754e:	f3c3 3c03 	ubfx	ip, r3, #12, #4
 8027552:	9b2c      	ldr	r3, [sp, #176]	@ 0xb0
 8027554:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 8027558:	f100 81f0 	bmi.w	802793c <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4b8>
 802755c:	f102 3eff 	add.w	lr, r2, #4294967295
 8027560:	4575      	cmp	r5, lr
 8027562:	f280 81eb 	bge.w	802793c <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4b8>
 8027566:	2800      	cmp	r0, #0
 8027568:	f2c0 81e8 	blt.w	802793c <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4b8>
 802756c:	f103 3eff 	add.w	lr, r3, #4294967295
 8027570:	4570      	cmp	r0, lr
 8027572:	f280 81e3 	bge.w	802793c <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4b8>
 8027576:	b212      	sxth	r2, r2
 8027578:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 802757a:	fa1f fe81 	uxth.w	lr, r1
 802757e:	fb00 5002 	mla	r0, r0, r2, r5
 8027582:	ea4f 150e 	mov.w	r5, lr, lsl #4
 8027586:	eb03 0a00 	add.w	sl, r3, r0
 802758a:	f813 9000 	ldrb.w	r9, [r3, r0]
 802758e:	f5c5 7380 	rsb	r3, r5, #256	@ 0x100
 8027592:	f89a 8001 	ldrb.w	r8, [sl, #1]
 8027596:	b29b      	uxth	r3, r3
 8027598:	f1bc 0f00 	cmp.w	ip, #0
 802759c:	f000 817b 	beq.w	8027896 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x412>
 80275a0:	f81a 4002 	ldrb.w	r4, [sl, r2]
 80275a4:	eb0a 0b02 	add.w	fp, sl, r2
 80275a8:	fa1f fa8c 	uxth.w	sl, ip
 80275ac:	940a      	str	r4, [sp, #40]	@ 0x28
 80275ae:	fb0a fe0e 	mul.w	lr, sl, lr
 80275b2:	f89b 4001 	ldrb.w	r4, [fp, #1]
 80275b6:	ebce 1a0a 	rsb	sl, lr, sl, lsl #4
 80275ba:	eba5 050e 	sub.w	r5, r5, lr
 80275be:	940b      	str	r4, [sp, #44]	@ 0x2c
 80275c0:	fa1f fa8a 	uxth.w	sl, sl
 80275c4:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 80275c6:	b2ad      	uxth	r5, r5
 80275c8:	eba3 030a 	sub.w	r3, r3, sl
 80275cc:	fb08 f505 	mul.w	r5, r8, r5
 80275d0:	b29b      	uxth	r3, r3
 80275d2:	fb09 5303 	mla	r3, r9, r3, r5
 80275d6:	fb0a 3304 	mla	r3, sl, r4, r3
 80275da:	9c0b      	ldr	r4, [sp, #44]	@ 0x2c
 80275dc:	fb0e 3304 	mla	r3, lr, r4, r3
 80275e0:	f3c3 2307 	ubfx	r3, r3, #8, #8
 80275e4:	2b00      	cmp	r3, #0
 80275e6:	f000 80d1 	beq.w	802778c <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x308>
 80275ea:	9c08      	ldr	r4, [sp, #32]
 80275ec:	f1b9 0fff 	cmp.w	r9, #255	@ 0xff
 80275f0:	eb04 0540 	add.w	r5, r4, r0, lsl #1
 80275f4:	f834 0010 	ldrh.w	r0, [r4, r0, lsl #1]
 80275f8:	f000 8152 	beq.w	80278a0 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x41c>
 80275fc:	f420 6efc 	bic.w	lr, r0, #2016	@ 0x7e0
 8027600:	ea4f 0ae9 	mov.w	sl, r9, asr #3
 8027604:	f400 60fc 	and.w	r0, r0, #2016	@ 0x7e0
 8027608:	fb0a fe0e 	mul.w	lr, sl, lr
 802760c:	fb09 f000 	mul.w	r0, r9, r0
 8027610:	ea06 195e 	and.w	r9, r6, lr, lsr #5
 8027614:	f60e 0e01 	addw	lr, lr, #2049	@ 0x801
 8027618:	f100 0b20 	add.w	fp, r0, #32
 802761c:	44ce      	add	lr, r9
 802761e:	eb0b 2910 	add.w	r9, fp, r0, lsr #8
 8027622:	ea06 1e5e 	and.w	lr, r6, lr, lsr #5
 8027626:	ea4f 2919 	mov.w	r9, r9, lsr #8
 802762a:	f409 69fc 	and.w	r9, r9, #2016	@ 0x7e0
 802762e:	ea4e 0909 	orr.w	r9, lr, r9
 8027632:	f1b8 0fff 	cmp.w	r8, #255	@ 0xff
 8027636:	8868      	ldrh	r0, [r5, #2]
 8027638:	d019      	beq.n	802766e <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ea>
 802763a:	f420 6efc 	bic.w	lr, r0, #2016	@ 0x7e0
 802763e:	ea4f 0ae8 	mov.w	sl, r8, asr #3
 8027642:	f400 60fc 	and.w	r0, r0, #2016	@ 0x7e0
 8027646:	fb0a fe0e 	mul.w	lr, sl, lr
 802764a:	fb08 f800 	mul.w	r8, r8, r0
 802764e:	ea06 105e 	and.w	r0, r6, lr, lsr #5
 8027652:	f60e 0e01 	addw	lr, lr, #2049	@ 0x801
 8027656:	f108 0b20 	add.w	fp, r8, #32
 802765a:	4486      	add	lr, r0
 802765c:	eb0b 2018 	add.w	r0, fp, r8, lsr #8
 8027660:	ea06 1e5e 	and.w	lr, r6, lr, lsr #5
 8027664:	0a00      	lsrs	r0, r0, #8
 8027666:	f400 60fc 	and.w	r0, r0, #2016	@ 0x7e0
 802766a:	ea4e 0000 	orr.w	r0, lr, r0
 802766e:	ea4f 4e09 	mov.w	lr, r9, lsl #16
 8027672:	f429 69fc 	bic.w	r9, r9, #2016	@ 0x7e0
 8027676:	ea4f 4a00 	mov.w	sl, r0, lsl #16
 802767a:	f420 60fc 	bic.w	r0, r0, #2016	@ 0x7e0
 802767e:	f00e 6efc 	and.w	lr, lr, #132120576	@ 0x7e00000
 8027682:	f00a 6afc 	and.w	sl, sl, #132120576	@ 0x7e00000
 8027686:	ea4e 0909 	orr.w	r9, lr, r9
 802768a:	ea4a 0000 	orr.w	r0, sl, r0
 802768e:	f1bc 0f00 	cmp.w	ip, #0
 8027692:	f000 8107 	beq.w	80278a4 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x420>
 8027696:	f102 4200 	add.w	r2, r2, #2147483648	@ 0x80000000
 802769a:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 802769c:	3a01      	subs	r2, #1
 802769e:	2cff      	cmp	r4, #255	@ 0xff
 80276a0:	ea4f 0242 	mov.w	r2, r2, lsl #1
 80276a4:	f102 0202 	add.w	r2, r2, #2
 80276a8:	eb05 0e02 	add.w	lr, r5, r2
 80276ac:	5aaa      	ldrh	r2, [r5, r2]
 80276ae:	d018      	beq.n	80276e2 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x25e>
 80276b0:	f422 65fc 	bic.w	r5, r2, #2016	@ 0x7e0
 80276b4:	f402 62fc 	and.w	r2, r2, #2016	@ 0x7e0
 80276b8:	ea4f 08e4 	mov.w	r8, r4, asr #3
 80276bc:	fb04 fa02 	mul.w	sl, r4, r2
 80276c0:	fb08 f805 	mul.w	r8, r8, r5
 80276c4:	f10a 0520 	add.w	r5, sl, #32
 80276c8:	ea06 1258 	and.w	r2, r6, r8, lsr #5
 80276cc:	f608 0801 	addw	r8, r8, #2049	@ 0x801
 80276d0:	eb05 251a 	add.w	r5, r5, sl, lsr #8
 80276d4:	4442      	add	r2, r8
 80276d6:	0a2d      	lsrs	r5, r5, #8
 80276d8:	ea06 1252 	and.w	r2, r6, r2, lsr #5
 80276dc:	f405 65fc 	and.w	r5, r5, #2016	@ 0x7e0
 80276e0:	432a      	orrs	r2, r5
 80276e2:	9c0b      	ldr	r4, [sp, #44]	@ 0x2c
 80276e4:	f8be 5002 	ldrh.w	r5, [lr, #2]
 80276e8:	2cff      	cmp	r4, #255	@ 0xff
 80276ea:	d01a      	beq.n	8027722 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x29e>
 80276ec:	f425 6efc 	bic.w	lr, r5, #2016	@ 0x7e0
 80276f0:	f405 65fc 	and.w	r5, r5, #2016	@ 0x7e0
 80276f4:	ea4f 08e4 	mov.w	r8, r4, asr #3
 80276f8:	fb04 fa05 	mul.w	sl, r4, r5
 80276fc:	fb08 f80e 	mul.w	r8, r8, lr
 8027700:	f10a 0e20 	add.w	lr, sl, #32
 8027704:	ea06 1558 	and.w	r5, r6, r8, lsr #5
 8027708:	f608 0801 	addw	r8, r8, #2049	@ 0x801
 802770c:	eb0e 2e1a 	add.w	lr, lr, sl, lsr #8
 8027710:	4445      	add	r5, r8
 8027712:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 8027716:	ea06 1555 	and.w	r5, r6, r5, lsr #5
 802771a:	f40e 6efc 	and.w	lr, lr, #2016	@ 0x7e0
 802771e:	ea45 050e 	orr.w	r5, r5, lr
 8027722:	fb1c fe01 	smulbb	lr, ip, r1
 8027726:	f1cc 0810 	rsb	r8, ip, #16
 802772a:	ea4f 4a02 	mov.w	sl, r2, lsl #16
 802772e:	f422 62fc 	bic.w	r2, r2, #2016	@ 0x7e0
 8027732:	ea4f 0eee 	mov.w	lr, lr, asr #3
 8027736:	eba8 0801 	sub.w	r8, r8, r1
 802773a:	ea4f 4b05 	mov.w	fp, r5, lsl #16
 802773e:	f00a 6afc 	and.w	sl, sl, #132120576	@ 0x7e00000
 8027742:	ebce 0141 	rsb	r1, lr, r1, lsl #1
 8027746:	f425 65fc 	bic.w	r5, r5, #2016	@ 0x7e0
 802774a:	eb0e 0848 	add.w	r8, lr, r8, lsl #1
 802774e:	ea4a 0202 	orr.w	r2, sl, r2
 8027752:	4341      	muls	r1, r0
 8027754:	ebce 0c4c 	rsb	ip, lr, ip, lsl #1
 8027758:	f00b 6bfc 	and.w	fp, fp, #132120576	@ 0x7e00000
 802775c:	fb09 1108 	mla	r1, r9, r8, r1
 8027760:	ea4b 0505 	orr.w	r5, fp, r5
 8027764:	fb0c 1102 	mla	r1, ip, r2, r1
 8027768:	fb0e 1e05 	mla	lr, lr, r5, r1
 802776c:	ea4f 525e 	mov.w	r2, lr, lsr #21
 8027770:	ea4f 1e5e 	mov.w	lr, lr, lsr #5
 8027774:	f402 62fc 	and.w	r2, r2, #2016	@ 0x7e0
 8027778:	f42e 6efc 	bic.w	lr, lr, #2016	@ 0x7e0
 802777c:	ea42 0e0e 	orr.w	lr, r2, lr
 8027780:	fa1f f28e 	uxth.w	r2, lr
 8027784:	2bff      	cmp	r3, #255	@ 0xff
 8027786:	f040 80a1 	bne.w	80278cc <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x448>
 802778a:	803a      	strh	r2, [r7, #0]
 802778c:	9b25      	ldr	r3, [sp, #148]	@ 0x94
 802778e:	3702      	adds	r7, #2
 8027790:	9a27      	ldr	r2, [sp, #156]	@ 0x9c
 8027792:	4413      	add	r3, r2
 8027794:	9a26      	ldr	r2, [sp, #152]	@ 0x98
 8027796:	9325      	str	r3, [sp, #148]	@ 0x94
 8027798:	9b28      	ldr	r3, [sp, #160]	@ 0xa0
 802779a:	441a      	add	r2, r3
 802779c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 802779e:	3b01      	subs	r3, #1
 80277a0:	9226      	str	r2, [sp, #152]	@ 0x98
 80277a2:	930f      	str	r3, [sp, #60]	@ 0x3c
 80277a4:	e6c7      	b.n	8027536 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xb2>
 80277a6:	9b25      	ldr	r3, [sp, #148]	@ 0x94
 80277a8:	9e27      	ldr	r6, [sp, #156]	@ 0x9c
 80277aa:	9c26      	ldr	r4, [sp, #152]	@ 0x98
 80277ac:	4433      	add	r3, r6
 80277ae:	9325      	str	r3, [sp, #148]	@ 0x94
 80277b0:	9b28      	ldr	r3, [sp, #160]	@ 0xa0
 80277b2:	441c      	add	r4, r3
 80277b4:	9b06      	ldr	r3, [sp, #24]
 80277b6:	3b01      	subs	r3, #1
 80277b8:	9426      	str	r4, [sp, #152]	@ 0x98
 80277ba:	9306      	str	r3, [sp, #24]
 80277bc:	9b07      	ldr	r3, [sp, #28]
 80277be:	3302      	adds	r3, #2
 80277c0:	9307      	str	r3, [sp, #28]
 80277c2:	e696      	b.n	80274f2 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6e>
 80277c4:	d028      	beq.n	8027818 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x394>
 80277c6:	9b06      	ldr	r3, [sp, #24]
 80277c8:	9827      	ldr	r0, [sp, #156]	@ 0x9c
 80277ca:	3b01      	subs	r3, #1
 80277cc:	9d25      	ldr	r5, [sp, #148]	@ 0x94
 80277ce:	fb00 5003 	mla	r0, r0, r3, r5
 80277d2:	1400      	asrs	r0, r0, #16
 80277d4:	f53f aeaa 	bmi.w	802752c <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa8>
 80277d8:	3901      	subs	r1, #1
 80277da:	4288      	cmp	r0, r1
 80277dc:	f6bf aea6 	bge.w	802752c <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa8>
 80277e0:	9928      	ldr	r1, [sp, #160]	@ 0xa0
 80277e2:	9826      	ldr	r0, [sp, #152]	@ 0x98
 80277e4:	fb01 0303 	mla	r3, r1, r3, r0
 80277e8:	141b      	asrs	r3, r3, #16
 80277ea:	f53f ae9f 	bmi.w	802752c <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa8>
 80277ee:	3a01      	subs	r2, #1
 80277f0:	4293      	cmp	r3, r2
 80277f2:	f6bf ae9b 	bge.w	802752c <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa8>
 80277f6:	9b06      	ldr	r3, [sp, #24]
 80277f8:	f64f 061f 	movw	r6, #63519	@ 0xf81f
 80277fc:	f8dd e01c 	ldr.w	lr, [sp, #28]
 8027800:	930f      	str	r3, [sp, #60]	@ 0x3c
 8027802:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8027804:	2b00      	cmp	r3, #0
 8027806:	f300 80b6 	bgt.w	8027976 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4f2>
 802780a:	9b06      	ldr	r3, [sp, #24]
 802780c:	ea23 74e3 	bic.w	r4, r3, r3, asr #31
 8027810:	9b07      	ldr	r3, [sp, #28]
 8027812:	eb03 0344 	add.w	r3, r3, r4, lsl #1
 8027816:	9307      	str	r3, [sp, #28]
 8027818:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 802781a:	2b00      	cmp	r3, #0
 802781c:	f340 8218 	ble.w	8027c50 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7cc>
 8027820:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8027824:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 8027826:	ee3a aa2b 	vadd.f32	s20, s20, s23
 802782a:	ee79 9a8b 	vadd.f32	s19, s19, s22
 802782e:	eef0 6a48 	vmov.f32	s13, s16
 8027832:	eec7 7a0a 	vdiv.f32	s15, s14, s20
 8027836:	ee39 9a2a 	vadd.f32	s18, s18, s21
 802783a:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 802783e:	edcd 6a25 	vstr	s13, [sp, #148]	@ 0x94
 8027842:	eef0 6a68 	vmov.f32	s13, s17
 8027846:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 802784a:	edcd 6a26 	vstr	s13, [sp, #152]	@ 0x98
 802784e:	ee29 7aa7 	vmul.f32	s14, s19, s15
 8027852:	ee69 7a27 	vmul.f32	s15, s18, s15
 8027856:	ee37 8a48 	vsub.f32	s16, s14, s16
 802785a:	ee77 8ae8 	vsub.f32	s17, s15, s17
 802785e:	eebe 8ac8 	vcvt.s32.f32	s16, s16, #16
 8027862:	eefe 8ac8 	vcvt.s32.f32	s17, s17, #16
 8027866:	ee18 2a10 	vmov	r2, s16
 802786a:	eeb0 8a47 	vmov.f32	s16, s14
 802786e:	fb92 f3f3 	sdiv	r3, r2, r3
 8027872:	ee18 2a90 	vmov	r2, s17
 8027876:	9327      	str	r3, [sp, #156]	@ 0x9c
 8027878:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 802787a:	eef0 8a67 	vmov.f32	s17, s15
 802787e:	fb92 f3f3 	sdiv	r3, r2, r3
 8027882:	9328      	str	r3, [sp, #160]	@ 0xa0
 8027884:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8027886:	9a10      	ldr	r2, [sp, #64]	@ 0x40
 8027888:	3b01      	subs	r3, #1
 802788a:	930e      	str	r3, [sp, #56]	@ 0x38
 802788c:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 802788e:	bf08      	it	eq
 8027890:	4613      	moveq	r3, r2
 8027892:	9306      	str	r3, [sp, #24]
 8027894:	e61f      	b.n	80274d6 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x52>
 8027896:	fb08 f505 	mul.w	r5, r8, r5
 802789a:	fb09 5303 	mla	r3, r9, r3, r5
 802789e:	e69f      	b.n	80275e0 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x15c>
 80278a0:	4681      	mov	r9, r0
 80278a2:	e6c6      	b.n	8027632 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ae>
 80278a4:	f1c1 0210 	rsb	r2, r1, #16
 80278a8:	4341      	muls	r1, r0
 80278aa:	fb09 1902 	mla	r9, r9, r2, r1
 80278ae:	ea4f 0949 	mov.w	r9, r9, lsl #1
 80278b2:	ea4f 5259 	mov.w	r2, r9, lsr #21
 80278b6:	ea4f 1959 	mov.w	r9, r9, lsr #5
 80278ba:	f402 62fc 	and.w	r2, r2, #2016	@ 0x7e0
 80278be:	f429 69fc 	bic.w	r9, r9, #2016	@ 0x7e0
 80278c2:	ea42 0909 	orr.w	r9, r2, r9
 80278c6:	fa1f f289 	uxth.w	r2, r9
 80278ca:	e75b      	b.n	8027784 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x300>
 80278cc:	f8b7 c000 	ldrh.w	ip, [r7]
 80278d0:	43db      	mvns	r3, r3
 80278d2:	ea4f 202c 	mov.w	r0, ip, asr #8
 80278d6:	fa5f fe83 	uxtb.w	lr, r3
 80278da:	f000 00f8 	and.w	r0, r0, #248	@ 0xf8
 80278de:	ea4f 05ec 	mov.w	r5, ip, asr #3
 80278e2:	ea4f 03cc 	mov.w	r3, ip, lsl #3
 80278e6:	fb00 f00e 	mul.w	r0, r0, lr
 80278ea:	f005 05fc 	and.w	r5, r5, #252	@ 0xfc
 80278ee:	b2db      	uxtb	r3, r3
 80278f0:	1c41      	adds	r1, r0, #1
 80278f2:	fb05 f50e 	mul.w	r5, r5, lr
 80278f6:	fb03 f30e 	mul.w	r3, r3, lr
 80278fa:	eb01 2010 	add.w	r0, r1, r0, lsr #8
 80278fe:	1211      	asrs	r1, r2, #8
 8027900:	f021 0107 	bic.w	r1, r1, #7
 8027904:	eb01 2110 	add.w	r1, r1, r0, lsr #8
 8027908:	48d4      	ldr	r0, [pc, #848]	@ (8027c5c <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7d8>)
 802790a:	b2c9      	uxtb	r1, r1
 802790c:	ea00 2001 	and.w	r0, r0, r1, lsl #8
 8027910:	1c69      	adds	r1, r5, #1
 8027912:	eb01 2515 	add.w	r5, r1, r5, lsr #8
 8027916:	10d1      	asrs	r1, r2, #3
 8027918:	00d2      	lsls	r2, r2, #3
 802791a:	f021 0103 	bic.w	r1, r1, #3
 802791e:	eb01 2115 	add.w	r1, r1, r5, lsr #8
 8027922:	00c9      	lsls	r1, r1, #3
 8027924:	f401 61fc 	and.w	r1, r1, #2016	@ 0x7e0
 8027928:	4301      	orrs	r1, r0
 802792a:	1c58      	adds	r0, r3, #1
 802792c:	eb00 2313 	add.w	r3, r0, r3, lsr #8
 8027930:	eb02 2213 	add.w	r2, r2, r3, lsr #8
 8027934:	f3c2 02c4 	ubfx	r2, r2, #3, #5
 8027938:	430a      	orrs	r2, r1
 802793a:	e726      	b.n	802778a <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x306>
 802793c:	f115 0e01 	adds.w	lr, r5, #1
 8027940:	f53f af24 	bmi.w	802778c <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x308>
 8027944:	4572      	cmp	r2, lr
 8027946:	f6ff af21 	blt.w	802778c <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x308>
 802794a:	f110 0e01 	adds.w	lr, r0, #1
 802794e:	f53f af1d 	bmi.w	802778c <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x308>
 8027952:	4573      	cmp	r3, lr
 8027954:	f6ff af1a 	blt.w	802778c <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x308>
 8027958:	b21b      	sxth	r3, r3
 802795a:	b212      	sxth	r2, r2
 802795c:	9301      	str	r3, [sp, #4]
 802795e:	9200      	str	r2, [sp, #0]
 8027960:	e9cd 1c04 	strd	r1, ip, [sp, #16]
 8027964:	e9cd 5002 	strd	r5, r0, [sp, #8]
 8027968:	e9dd 3208 	ldrd	r3, r2, [sp, #32]
 802796c:	4639      	mov	r1, r7
 802796e:	9811      	ldr	r0, [sp, #68]	@ 0x44
 8027970:	f7ff fbf2 	bl	8027158 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh>
 8027974:	e70a      	b.n	802778c <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x308>
 8027976:	9b25      	ldr	r3, [sp, #148]	@ 0x94
 8027978:	f3c3 3203 	ubfx	r2, r3, #12, #4
 802797c:	9b26      	ldr	r3, [sp, #152]	@ 0x98
 802797e:	f3c3 3503 	ubfx	r5, r3, #12, #4
 8027982:	9b2c      	ldr	r3, [sp, #176]	@ 0xb0
 8027984:	fa1f fc82 	uxth.w	ip, r2
 8027988:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 802798c:	9b26      	ldr	r3, [sp, #152]	@ 0x98
 802798e:	ea4f 100c 	mov.w	r0, ip, lsl #4
 8027992:	141f      	asrs	r7, r3, #16
 8027994:	9b25      	ldr	r3, [sp, #148]	@ 0x94
 8027996:	141b      	asrs	r3, r3, #16
 8027998:	fb01 3707 	mla	r7, r1, r7, r3
 802799c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 802799e:	eb03 0a07 	add.w	sl, r3, r7
 80279a2:	f813 9007 	ldrb.w	r9, [r3, r7]
 80279a6:	f5c0 7380 	rsb	r3, r0, #256	@ 0x100
 80279aa:	f89a 8001 	ldrb.w	r8, [sl, #1]
 80279ae:	b29b      	uxth	r3, r3
 80279b0:	2d00      	cmp	r5, #0
 80279b2:	f000 80fe 	beq.w	8027bb2 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x72e>
 80279b6:	f81a 4001 	ldrb.w	r4, [sl, r1]
 80279ba:	eb0a 0b01 	add.w	fp, sl, r1
 80279be:	fa1f fa85 	uxth.w	sl, r5
 80279c2:	940c      	str	r4, [sp, #48]	@ 0x30
 80279c4:	fb0a fc0c 	mul.w	ip, sl, ip
 80279c8:	f89b 4001 	ldrb.w	r4, [fp, #1]
 80279cc:	ebcc 1a0a 	rsb	sl, ip, sl, lsl #4
 80279d0:	eba0 000c 	sub.w	r0, r0, ip
 80279d4:	940d      	str	r4, [sp, #52]	@ 0x34
 80279d6:	fa1f fa8a 	uxth.w	sl, sl
 80279da:	b280      	uxth	r0, r0
 80279dc:	eba3 030a 	sub.w	r3, r3, sl
 80279e0:	fb08 f000 	mul.w	r0, r8, r0
 80279e4:	b29b      	uxth	r3, r3
 80279e6:	fb09 0303 	mla	r3, r9, r3, r0
 80279ea:	980c      	ldr	r0, [sp, #48]	@ 0x30
 80279ec:	fb0a 3300 	mla	r3, sl, r0, r3
 80279f0:	fb0c 3304 	mla	r3, ip, r4, r3
 80279f4:	f3c3 2307 	ubfx	r3, r3, #8, #8
 80279f8:	2b00      	cmp	r3, #0
 80279fa:	f000 80cc 	beq.w	8027b96 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x712>
 80279fe:	9808      	ldr	r0, [sp, #32]
 8027a00:	f1b9 0fff 	cmp.w	r9, #255	@ 0xff
 8027a04:	9c08      	ldr	r4, [sp, #32]
 8027a06:	eb00 0047 	add.w	r0, r0, r7, lsl #1
 8027a0a:	f834 7017 	ldrh.w	r7, [r4, r7, lsl #1]
 8027a0e:	f000 80d5 	beq.w	8027bbc <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x738>
 8027a12:	f427 6cfc 	bic.w	ip, r7, #2016	@ 0x7e0
 8027a16:	ea4f 0ae9 	mov.w	sl, r9, asr #3
 8027a1a:	f407 67fc 	and.w	r7, r7, #2016	@ 0x7e0
 8027a1e:	fb0a fc0c 	mul.w	ip, sl, ip
 8027a22:	fb09 f707 	mul.w	r7, r9, r7
 8027a26:	ea06 195c 	and.w	r9, r6, ip, lsr #5
 8027a2a:	f60c 0c01 	addw	ip, ip, #2049	@ 0x801
 8027a2e:	f107 0b20 	add.w	fp, r7, #32
 8027a32:	44cc      	add	ip, r9
 8027a34:	eb0b 2917 	add.w	r9, fp, r7, lsr #8
 8027a38:	ea06 1c5c 	and.w	ip, r6, ip, lsr #5
 8027a3c:	ea4f 2919 	mov.w	r9, r9, lsr #8
 8027a40:	f409 69fc 	and.w	r9, r9, #2016	@ 0x7e0
 8027a44:	ea4c 0909 	orr.w	r9, ip, r9
 8027a48:	f1b8 0fff 	cmp.w	r8, #255	@ 0xff
 8027a4c:	8847      	ldrh	r7, [r0, #2]
 8027a4e:	d019      	beq.n	8027a84 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x600>
 8027a50:	f427 6cfc 	bic.w	ip, r7, #2016	@ 0x7e0
 8027a54:	ea4f 0ae8 	mov.w	sl, r8, asr #3
 8027a58:	f407 67fc 	and.w	r7, r7, #2016	@ 0x7e0
 8027a5c:	fb0a fc0c 	mul.w	ip, sl, ip
 8027a60:	fb08 f807 	mul.w	r8, r8, r7
 8027a64:	ea06 175c 	and.w	r7, r6, ip, lsr #5
 8027a68:	f60c 0c01 	addw	ip, ip, #2049	@ 0x801
 8027a6c:	f108 0b20 	add.w	fp, r8, #32
 8027a70:	44bc      	add	ip, r7
 8027a72:	eb0b 2718 	add.w	r7, fp, r8, lsr #8
 8027a76:	ea06 1c5c 	and.w	ip, r6, ip, lsr #5
 8027a7a:	0a3f      	lsrs	r7, r7, #8
 8027a7c:	f407 67fc 	and.w	r7, r7, #2016	@ 0x7e0
 8027a80:	ea4c 0707 	orr.w	r7, ip, r7
 8027a84:	ea4f 4c09 	mov.w	ip, r9, lsl #16
 8027a88:	f429 69fc 	bic.w	r9, r9, #2016	@ 0x7e0
 8027a8c:	ea4f 4a07 	mov.w	sl, r7, lsl #16
 8027a90:	f427 67fc 	bic.w	r7, r7, #2016	@ 0x7e0
 8027a94:	f00c 6cfc 	and.w	ip, ip, #132120576	@ 0x7e00000
 8027a98:	f00a 6afc 	and.w	sl, sl, #132120576	@ 0x7e00000
 8027a9c:	ea4c 0909 	orr.w	r9, ip, r9
 8027aa0:	ea4a 0707 	orr.w	r7, sl, r7
 8027aa4:	2d00      	cmp	r5, #0
 8027aa6:	f000 808b 	beq.w	8027bc0 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x73c>
 8027aaa:	f101 4100 	add.w	r1, r1, #2147483648	@ 0x80000000
 8027aae:	3901      	subs	r1, #1
 8027ab0:	0049      	lsls	r1, r1, #1
 8027ab2:	3102      	adds	r1, #2
 8027ab4:	eb00 0c01 	add.w	ip, r0, r1
 8027ab8:	5a41      	ldrh	r1, [r0, r1]
 8027aba:	980c      	ldr	r0, [sp, #48]	@ 0x30
 8027abc:	28ff      	cmp	r0, #255	@ 0xff
 8027abe:	d019      	beq.n	8027af4 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x670>
 8027ac0:	f421 60fc 	bic.w	r0, r1, #2016	@ 0x7e0
 8027ac4:	9c0c      	ldr	r4, [sp, #48]	@ 0x30
 8027ac6:	f401 61fc 	and.w	r1, r1, #2016	@ 0x7e0
 8027aca:	ea4f 08e4 	mov.w	r8, r4, asr #3
 8027ace:	fb04 fa01 	mul.w	sl, r4, r1
 8027ad2:	fb08 f800 	mul.w	r8, r8, r0
 8027ad6:	f10a 0020 	add.w	r0, sl, #32
 8027ada:	ea06 1158 	and.w	r1, r6, r8, lsr #5
 8027ade:	f608 0801 	addw	r8, r8, #2049	@ 0x801
 8027ae2:	eb00 201a 	add.w	r0, r0, sl, lsr #8
 8027ae6:	4441      	add	r1, r8
 8027ae8:	0a00      	lsrs	r0, r0, #8
 8027aea:	ea06 1151 	and.w	r1, r6, r1, lsr #5
 8027aee:	f400 60fc 	and.w	r0, r0, #2016	@ 0x7e0
 8027af2:	4301      	orrs	r1, r0
 8027af4:	9c0d      	ldr	r4, [sp, #52]	@ 0x34
 8027af6:	f8bc 0002 	ldrh.w	r0, [ip, #2]
 8027afa:	2cff      	cmp	r4, #255	@ 0xff
 8027afc:	d01a      	beq.n	8027b34 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6b0>
 8027afe:	f420 6cfc 	bic.w	ip, r0, #2016	@ 0x7e0
 8027b02:	f400 60fc 	and.w	r0, r0, #2016	@ 0x7e0
 8027b06:	ea4f 08e4 	mov.w	r8, r4, asr #3
 8027b0a:	fb04 fa00 	mul.w	sl, r4, r0
 8027b0e:	fb08 f80c 	mul.w	r8, r8, ip
 8027b12:	f10a 0c20 	add.w	ip, sl, #32
 8027b16:	ea06 1058 	and.w	r0, r6, r8, lsr #5
 8027b1a:	f608 0801 	addw	r8, r8, #2049	@ 0x801
 8027b1e:	eb0c 2c1a 	add.w	ip, ip, sl, lsr #8
 8027b22:	4440      	add	r0, r8
 8027b24:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 8027b28:	ea06 1050 	and.w	r0, r6, r0, lsr #5
 8027b2c:	f40c 6cfc 	and.w	ip, ip, #2016	@ 0x7e0
 8027b30:	ea40 000c 	orr.w	r0, r0, ip
 8027b34:	fb15 fc02 	smulbb	ip, r5, r2
 8027b38:	f1c5 0810 	rsb	r8, r5, #16
 8027b3c:	ea4f 4a01 	mov.w	sl, r1, lsl #16
 8027b40:	f421 61fc 	bic.w	r1, r1, #2016	@ 0x7e0
 8027b44:	ea4f 0cec 	mov.w	ip, ip, asr #3
 8027b48:	eba8 0802 	sub.w	r8, r8, r2
 8027b4c:	ea4f 4b00 	mov.w	fp, r0, lsl #16
 8027b50:	f00a 6afc 	and.w	sl, sl, #132120576	@ 0x7e00000
 8027b54:	ebcc 0242 	rsb	r2, ip, r2, lsl #1
 8027b58:	f420 60fc 	bic.w	r0, r0, #2016	@ 0x7e0
 8027b5c:	eb0c 0848 	add.w	r8, ip, r8, lsl #1
 8027b60:	ea4a 0101 	orr.w	r1, sl, r1
 8027b64:	437a      	muls	r2, r7
 8027b66:	ebcc 0545 	rsb	r5, ip, r5, lsl #1
 8027b6a:	f00b 6bfc 	and.w	fp, fp, #132120576	@ 0x7e00000
 8027b6e:	fb09 2208 	mla	r2, r9, r8, r2
 8027b72:	ea4b 0000 	orr.w	r0, fp, r0
 8027b76:	fb05 2201 	mla	r2, r5, r1, r2
 8027b7a:	fb0c 2200 	mla	r2, ip, r0, r2
 8027b7e:	0d57      	lsrs	r7, r2, #21
 8027b80:	0952      	lsrs	r2, r2, #5
 8027b82:	f407 67fc 	and.w	r7, r7, #2016	@ 0x7e0
 8027b86:	f422 62fc 	bic.w	r2, r2, #2016	@ 0x7e0
 8027b8a:	433a      	orrs	r2, r7
 8027b8c:	2bff      	cmp	r3, #255	@ 0xff
 8027b8e:	b292      	uxth	r2, r2
 8027b90:	d127      	bne.n	8027be2 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x75e>
 8027b92:	f8ae 2000 	strh.w	r2, [lr]
 8027b96:	9b25      	ldr	r3, [sp, #148]	@ 0x94
 8027b98:	f10e 0e02 	add.w	lr, lr, #2
 8027b9c:	9a27      	ldr	r2, [sp, #156]	@ 0x9c
 8027b9e:	4413      	add	r3, r2
 8027ba0:	9a26      	ldr	r2, [sp, #152]	@ 0x98
 8027ba2:	9325      	str	r3, [sp, #148]	@ 0x94
 8027ba4:	9b28      	ldr	r3, [sp, #160]	@ 0xa0
 8027ba6:	441a      	add	r2, r3
 8027ba8:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8027baa:	3b01      	subs	r3, #1
 8027bac:	9226      	str	r2, [sp, #152]	@ 0x98
 8027bae:	930f      	str	r3, [sp, #60]	@ 0x3c
 8027bb0:	e627      	b.n	8027802 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x37e>
 8027bb2:	fb08 f000 	mul.w	r0, r8, r0
 8027bb6:	fb09 0303 	mla	r3, r9, r3, r0
 8027bba:	e71b      	b.n	80279f4 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x570>
 8027bbc:	46b9      	mov	r9, r7
 8027bbe:	e743      	b.n	8027a48 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5c4>
 8027bc0:	f1c2 0110 	rsb	r1, r2, #16
 8027bc4:	437a      	muls	r2, r7
 8027bc6:	fb09 2901 	mla	r9, r9, r1, r2
 8027bca:	ea4f 0949 	mov.w	r9, r9, lsl #1
 8027bce:	ea4f 5059 	mov.w	r0, r9, lsr #21
 8027bd2:	ea4f 1259 	mov.w	r2, r9, lsr #5
 8027bd6:	f400 60fc 	and.w	r0, r0, #2016	@ 0x7e0
 8027bda:	f422 62fc 	bic.w	r2, r2, #2016	@ 0x7e0
 8027bde:	4302      	orrs	r2, r0
 8027be0:	e7d4      	b.n	8027b8c <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x708>
 8027be2:	f8be 7000 	ldrh.w	r7, [lr]
 8027be6:	43db      	mvns	r3, r3
 8027be8:	4c1c      	ldr	r4, [pc, #112]	@ (8027c5c <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7d8>)
 8027bea:	1238      	asrs	r0, r7, #8
 8027bec:	fa5f fc83 	uxtb.w	ip, r3
 8027bf0:	f000 00f8 	and.w	r0, r0, #248	@ 0xf8
 8027bf4:	10fd      	asrs	r5, r7, #3
 8027bf6:	00fb      	lsls	r3, r7, #3
 8027bf8:	fb00 f00c 	mul.w	r0, r0, ip
 8027bfc:	f005 05fc 	and.w	r5, r5, #252	@ 0xfc
 8027c00:	b2db      	uxtb	r3, r3
 8027c02:	fb05 f10c 	mul.w	r1, r5, ip
 8027c06:	1c45      	adds	r5, r0, #1
 8027c08:	fb03 f30c 	mul.w	r3, r3, ip
 8027c0c:	eb05 2010 	add.w	r0, r5, r0, lsr #8
 8027c10:	1215      	asrs	r5, r2, #8
 8027c12:	f025 0507 	bic.w	r5, r5, #7
 8027c16:	eb05 2010 	add.w	r0, r5, r0, lsr #8
 8027c1a:	1c4d      	adds	r5, r1, #1
 8027c1c:	eb05 2511 	add.w	r5, r5, r1, lsr #8
 8027c20:	10d1      	asrs	r1, r2, #3
 8027c22:	b2c0      	uxtb	r0, r0
 8027c24:	f021 0103 	bic.w	r1, r1, #3
 8027c28:	00d2      	lsls	r2, r2, #3
 8027c2a:	ea04 2000 	and.w	r0, r4, r0, lsl #8
 8027c2e:	eb01 2115 	add.w	r1, r1, r5, lsr #8
 8027c32:	00c9      	lsls	r1, r1, #3
 8027c34:	f401 61fc 	and.w	r1, r1, #2016	@ 0x7e0
 8027c38:	4308      	orrs	r0, r1
 8027c3a:	1c59      	adds	r1, r3, #1
 8027c3c:	eb01 2313 	add.w	r3, r1, r3, lsr #8
 8027c40:	eb02 2313 	add.w	r3, r2, r3, lsr #8
 8027c44:	f3c3 03c4 	ubfx	r3, r3, #3, #5
 8027c48:	4318      	orrs	r0, r3
 8027c4a:	f8ae 0000 	strh.w	r0, [lr]
 8027c4e:	e7a2      	b.n	8027b96 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x712>
 8027c50:	b013      	add	sp, #76	@ 0x4c
 8027c52:	ecbd 8b08 	vpop	{d8-d11}
 8027c56:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8027c5a:	bf00      	nop
 8027c5c:	fffff800 	.word	0xfffff800

08027c60 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtssiihhh>:
 8027c60:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8027c64:	e9dd 4c09 	ldrd	r4, ip, [sp, #36]	@ 0x24
 8027c68:	f9bd a020 	ldrsh.w	sl, [sp, #32]
 8027c6c:	fb0c 4e03 	mla	lr, ip, r3, r4
 8027c70:	f1bc 0f00 	cmp.w	ip, #0
 8027c74:	f89d 702c 	ldrb.w	r7, [sp, #44]	@ 0x2c
 8027c78:	f89d 6030 	ldrb.w	r6, [sp, #48]	@ 0x30
 8027c7c:	eb02 084e 	add.w	r8, r2, lr, lsl #1
 8027c80:	f89d 5034 	ldrb.w	r5, [sp, #52]	@ 0x34
 8027c84:	8808      	ldrh	r0, [r1, #0]
 8027c86:	db2f      	blt.n	8027ce8 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtssiihhh+0x88>
 8027c88:	45e2      	cmp	sl, ip
 8027c8a:	dd2d      	ble.n	8027ce8 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtssiihhh+0x88>
 8027c8c:	2c00      	cmp	r4, #0
 8027c8e:	db29      	blt.n	8027ce4 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtssiihhh+0x84>
 8027c90:	42a3      	cmp	r3, r4
 8027c92:	dd27      	ble.n	8027ce4 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtssiihhh+0x84>
 8027c94:	f832 901e 	ldrh.w	r9, [r2, lr, lsl #1]
 8027c98:	1c62      	adds	r2, r4, #1
 8027c9a:	d428      	bmi.n	8027cee <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtssiihhh+0x8e>
 8027c9c:	4293      	cmp	r3, r2
 8027c9e:	dd26      	ble.n	8027cee <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtssiihhh+0x8e>
 8027ca0:	b32f      	cbz	r7, 8027cee <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtssiihhh+0x8e>
 8027ca2:	f8b8 e002 	ldrh.w	lr, [r8, #2]
 8027ca6:	f11c 0c01 	adds.w	ip, ip, #1
 8027caa:	d424      	bmi.n	8027cf6 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtssiihhh+0x96>
 8027cac:	45e2      	cmp	sl, ip
 8027cae:	dd22      	ble.n	8027cf6 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtssiihhh+0x96>
 8027cb0:	2e00      	cmp	r6, #0
 8027cb2:	f000 809d 	beq.w	8027df0 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtssiihhh+0x190>
 8027cb6:	2c00      	cmp	r4, #0
 8027cb8:	db1b      	blt.n	8027cf2 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtssiihhh+0x92>
 8027cba:	42a3      	cmp	r3, r4
 8027cbc:	dd19      	ble.n	8027cf2 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtssiihhh+0x92>
 8027cbe:	f838 c013 	ldrh.w	ip, [r8, r3, lsl #1]
 8027cc2:	3401      	adds	r4, #1
 8027cc4:	d41a      	bmi.n	8027cfc <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtssiihhh+0x9c>
 8027cc6:	42a3      	cmp	r3, r4
 8027cc8:	dd18      	ble.n	8027cfc <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtssiihhh+0x9c>
 8027cca:	b1cf      	cbz	r7, 8027d00 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtssiihhh+0xa0>
 8027ccc:	3301      	adds	r3, #1
 8027cce:	f838 3013 	ldrh.w	r3, [r8, r3, lsl #1]
 8027cd2:	2f0f      	cmp	r7, #15
 8027cd4:	d915      	bls.n	8027d02 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtssiihhh+0xa2>
 8027cd6:	4b49      	ldr	r3, [pc, #292]	@ (8027dfc <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtssiihhh+0x19c>)
 8027cd8:	f44f 71ec 	mov.w	r1, #472	@ 0x1d8
 8027cdc:	4a48      	ldr	r2, [pc, #288]	@ (8027e00 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtssiihhh+0x1a0>)
 8027cde:	4849      	ldr	r0, [pc, #292]	@ (8027e04 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtssiihhh+0x1a4>)
 8027ce0:	f002 ffb0 	bl	802ac44 <__assert_func>
 8027ce4:	4681      	mov	r9, r0
 8027ce6:	e7d7      	b.n	8027c98 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtssiihhh+0x38>
 8027ce8:	4686      	mov	lr, r0
 8027cea:	4681      	mov	r9, r0
 8027cec:	e7db      	b.n	8027ca6 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtssiihhh+0x46>
 8027cee:	4686      	mov	lr, r0
 8027cf0:	e7d9      	b.n	8027ca6 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtssiihhh+0x46>
 8027cf2:	4684      	mov	ip, r0
 8027cf4:	e7e5      	b.n	8027cc2 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtssiihhh+0x62>
 8027cf6:	4603      	mov	r3, r0
 8027cf8:	4684      	mov	ip, r0
 8027cfa:	e7ea      	b.n	8027cd2 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtssiihhh+0x72>
 8027cfc:	4603      	mov	r3, r0
 8027cfe:	e7e8      	b.n	8027cd2 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtssiihhh+0x72>
 8027d00:	4603      	mov	r3, r0
 8027d02:	2e0f      	cmp	r6, #15
 8027d04:	d8e7      	bhi.n	8027cd6 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtssiihhh+0x76>
 8027d06:	fb17 f806 	smulbb	r8, r7, r6
 8027d0a:	ea4f 4409 	mov.w	r4, r9, lsl #16
 8027d0e:	ea4f 4a0e 	mov.w	sl, lr, lsl #16
 8027d12:	f429 69fc 	bic.w	r9, r9, #2016	@ 0x7e0
 8027d16:	f004 64fc 	and.w	r4, r4, #132120576	@ 0x7e00000
 8027d1a:	ea4f 08e8 	mov.w	r8, r8, asr #3
 8027d1e:	f00a 6afc 	and.w	sl, sl, #132120576	@ 0x7e00000
 8027d22:	f42e 6efc 	bic.w	lr, lr, #2016	@ 0x7e0
 8027d26:	ea44 0909 	orr.w	r9, r4, r9
 8027d2a:	f1c6 0410 	rsb	r4, r6, #16
 8027d2e:	041a      	lsls	r2, r3, #16
 8027d30:	ea4a 0e0e 	orr.w	lr, sl, lr
 8027d34:	1be4      	subs	r4, r4, r7
 8027d36:	ebc8 0747 	rsb	r7, r8, r7, lsl #1
 8027d3a:	f002 62fc 	and.w	r2, r2, #132120576	@ 0x7e00000
 8027d3e:	f423 63fc 	bic.w	r3, r3, #2016	@ 0x7e0
 8027d42:	fb07 fe0e 	mul.w	lr, r7, lr
 8027d46:	eb08 0444 	add.w	r4, r8, r4, lsl #1
 8027d4a:	4313      	orrs	r3, r2
 8027d4c:	ea4f 420c 	mov.w	r2, ip, lsl #16
 8027d50:	fb04 e409 	mla	r4, r4, r9, lr
 8027d54:	ebc8 0646 	rsb	r6, r8, r6, lsl #1
 8027d58:	f002 62fc 	and.w	r2, r2, #132120576	@ 0x7e00000
 8027d5c:	b2af      	uxth	r7, r5
 8027d5e:	fb08 4303 	mla	r3, r8, r3, r4
 8027d62:	f42c 64fc 	bic.w	r4, ip, #2016	@ 0x7e0
 8027d66:	43ed      	mvns	r5, r5
 8027d68:	4322      	orrs	r2, r4
 8027d6a:	b2ed      	uxtb	r5, r5
 8027d6c:	fb06 3202 	mla	r2, r6, r2, r3
 8027d70:	10c6      	asrs	r6, r0, #3
 8027d72:	0d53      	lsrs	r3, r2, #21
 8027d74:	f006 06fc 	and.w	r6, r6, #252	@ 0xfc
 8027d78:	0952      	lsrs	r2, r2, #5
 8027d7a:	fb16 f605 	smulbb	r6, r6, r5
 8027d7e:	f403 63fc 	and.w	r3, r3, #2016	@ 0x7e0
 8027d82:	f422 62fc 	bic.w	r2, r2, #2016	@ 0x7e0
 8027d86:	431a      	orrs	r2, r3
 8027d88:	b293      	uxth	r3, r2
 8027d8a:	1202      	asrs	r2, r0, #8
 8027d8c:	ea4f 2c23 	mov.w	ip, r3, asr #8
 8027d90:	f002 02f8 	and.w	r2, r2, #248	@ 0xf8
 8027d94:	00dc      	lsls	r4, r3, #3
 8027d96:	f00c 0cf8 	and.w	ip, ip, #248	@ 0xf8
 8027d9a:	fb12 f205 	smulbb	r2, r2, r5
 8027d9e:	b2e4      	uxtb	r4, r4
 8027da0:	fb0c 2c07 	mla	ip, ip, r7, r2
 8027da4:	10da      	asrs	r2, r3, #3
 8027da6:	00c3      	lsls	r3, r0, #3
 8027da8:	f002 02fc 	and.w	r2, r2, #252	@ 0xfc
 8027dac:	fa1f fc8c 	uxth.w	ip, ip
 8027db0:	b2db      	uxtb	r3, r3
 8027db2:	fb02 6207 	mla	r2, r2, r7, r6
 8027db6:	fb13 f305 	smulbb	r3, r3, r5
 8027dba:	b296      	uxth	r6, r2
 8027dbc:	fb04 3307 	mla	r3, r4, r7, r3
 8027dc0:	b29a      	uxth	r2, r3
 8027dc2:	f10c 0301 	add.w	r3, ip, #1
 8027dc6:	eb03 2c1c 	add.w	ip, r3, ip, lsr #8
 8027dca:	1c53      	adds	r3, r2, #1
 8027dcc:	eb03 2312 	add.w	r3, r3, r2, lsr #8
 8027dd0:	1c72      	adds	r2, r6, #1
 8027dd2:	f40c 4c78 	and.w	ip, ip, #63488	@ 0xf800
 8027dd6:	eb02 2216 	add.w	r2, r2, r6, lsr #8
 8027dda:	f3c3 23c4 	ubfx	r3, r3, #11, #5
 8027dde:	0952      	lsrs	r2, r2, #5
 8027de0:	ea43 030c 	orr.w	r3, r3, ip
 8027de4:	f402 62fc 	and.w	r2, r2, #2016	@ 0x7e0
 8027de8:	4313      	orrs	r3, r2
 8027dea:	800b      	strh	r3, [r1, #0]
 8027dec:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8027df0:	2f0f      	cmp	r7, #15
 8027df2:	f63f af70 	bhi.w	8027cd6 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtssiihhh+0x76>
 8027df6:	4603      	mov	r3, r0
 8027df8:	4684      	mov	ip, r0
 8027dfa:	e784      	b.n	8027d06 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtssiihhh+0xa6>
 8027dfc:	0802fed5 	.word	0x0802fed5
 8027e00:	0803054b 	.word	0x0803054b
 8027e04:	0802ff59 	.word	0x0802ff59

08027e08 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 8027e08:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8027e0c:	ed2d 8b08 	vpush	{d8-d11}
 8027e10:	b093      	sub	sp, #76	@ 0x4c
 8027e12:	461d      	mov	r5, r3
 8027e14:	eeb0 aa40 	vmov.f32	s20, s0
 8027e18:	9b29      	ldr	r3, [sp, #164]	@ 0xa4
 8027e1a:	eef0 9a60 	vmov.f32	s19, s1
 8027e1e:	9210      	str	r2, [sp, #64]	@ 0x40
 8027e20:	eeb0 9a41 	vmov.f32	s18, s2
 8027e24:	f89d 20b4 	ldrb.w	r2, [sp, #180]	@ 0xb4
 8027e28:	eeb0 8a62 	vmov.f32	s16, s5
 8027e2c:	910a      	str	r1, [sp, #40]	@ 0x28
 8027e2e:	eef0 8a43 	vmov.f32	s17, s6
 8027e32:	920b      	str	r2, [sp, #44]	@ 0x2c
 8027e34:	eef0 ba44 	vmov.f32	s23, s8
 8027e38:	6859      	ldr	r1, [r3, #4]
 8027e3a:	eeb0 ba64 	vmov.f32	s22, s9
 8027e3e:	681b      	ldr	r3, [r3, #0]
 8027e40:	eef0 aa45 	vmov.f32	s21, s10
 8027e44:	9011      	str	r0, [sp, #68]	@ 0x44
 8027e46:	e9dd 272a 	ldrd	r2, r7, [sp, #168]	@ 0xa8
 8027e4a:	e9dd 4625 	ldrd	r4, r6, [sp, #148]	@ 0x94
 8027e4e:	fb01 2707 	mla	r7, r1, r7, r2
 8027e52:	eb03 0347 	add.w	r3, r3, r7, lsl #1
 8027e56:	9307      	str	r3, [sp, #28]
 8027e58:	9b2c      	ldr	r3, [sp, #176]	@ 0xb0
 8027e5a:	681b      	ldr	r3, [r3, #0]
 8027e5c:	9309      	str	r3, [sp, #36]	@ 0x24
 8027e5e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8027e60:	43db      	mvns	r3, r3
 8027e62:	b2db      	uxtb	r3, r3
 8027e64:	9308      	str	r3, [sp, #32]
 8027e66:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8027e68:	2b00      	cmp	r3, #0
 8027e6a:	dc03      	bgt.n	8027e74 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6c>
 8027e6c:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8027e6e:	2b00      	cmp	r3, #0
 8027e70:	f340 8205 	ble.w	802827e <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x476>
 8027e74:	9b2c      	ldr	r3, [sp, #176]	@ 0xb0
 8027e76:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 8027e7a:	f9b3 200c 	ldrsh.w	r2, [r3, #12]
 8027e7e:	1e48      	subs	r0, r1, #1
 8027e80:	f102 3cff 	add.w	ip, r2, #4294967295
 8027e84:	2d00      	cmp	r5, #0
 8027e86:	f340 80da 	ble.w	802803e <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x236>
 8027e8a:	ea5f 4e24 	movs.w	lr, r4, asr #16
 8027e8e:	ea4f 4326 	mov.w	r3, r6, asr #16
 8027e92:	d406      	bmi.n	8027ea2 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x9a>
 8027e94:	4586      	cmp	lr, r0
 8027e96:	da04      	bge.n	8027ea2 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x9a>
 8027e98:	2b00      	cmp	r3, #0
 8027e9a:	db02      	blt.n	8027ea2 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x9a>
 8027e9c:	4563      	cmp	r3, ip
 8027e9e:	f2c0 80cf 	blt.w	8028040 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x238>
 8027ea2:	f11e 0e01 	adds.w	lr, lr, #1
 8027ea6:	f100 80c1 	bmi.w	802802c <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x224>
 8027eaa:	4571      	cmp	r1, lr
 8027eac:	f2c0 80be 	blt.w	802802c <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x224>
 8027eb0:	3301      	adds	r3, #1
 8027eb2:	f100 80bb 	bmi.w	802802c <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x224>
 8027eb6:	429a      	cmp	r2, r3
 8027eb8:	f2c0 80b8 	blt.w	802802c <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x224>
 8027ebc:	46a9      	mov	r9, r5
 8027ebe:	f8dd 801c 	ldr.w	r8, [sp, #28]
 8027ec2:	f1b9 0f00 	cmp.w	r9, #0
 8027ec6:	f340 80d8 	ble.w	802807a <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x272>
 8027eca:	9b2c      	ldr	r3, [sp, #176]	@ 0xb0
 8027ecc:	1421      	asrs	r1, r4, #16
 8027ece:	ea4f 4026 	mov.w	r0, r6, asr #16
 8027ed2:	f3c4 3203 	ubfx	r2, r4, #12, #4
 8027ed6:	f3c6 3c03 	ubfx	ip, r6, #12, #4
 8027eda:	e9d3 e302 	ldrd	lr, r3, [r3, #8]
 8027ede:	f100 8112 	bmi.w	8028106 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2fe>
 8027ee2:	f10e 3aff 	add.w	sl, lr, #4294967295
 8027ee6:	4551      	cmp	r1, sl
 8027ee8:	f280 810d 	bge.w	8028106 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2fe>
 8027eec:	2800      	cmp	r0, #0
 8027eee:	f2c0 810a 	blt.w	8028106 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2fe>
 8027ef2:	f103 3aff 	add.w	sl, r3, #4294967295
 8027ef6:	4550      	cmp	r0, sl
 8027ef8:	f280 8105 	bge.w	8028106 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2fe>
 8027efc:	fa0f f38e 	sxth.w	r3, lr
 8027f00:	fb00 1103 	mla	r1, r0, r3, r1
 8027f04:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8027f06:	eb00 0a41 	add.w	sl, r0, r1, lsl #1
 8027f0a:	f830 e011 	ldrh.w	lr, [r0, r1, lsl #1]
 8027f0e:	f8ba 1002 	ldrh.w	r1, [sl, #2]
 8027f12:	f1bc 0f00 	cmp.w	ip, #0
 8027f16:	d007      	beq.n	8027f28 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x120>
 8027f18:	005b      	lsls	r3, r3, #1
 8027f1a:	eb0a 0003 	add.w	r0, sl, r3
 8027f1e:	f83a 3003 	ldrh.w	r3, [sl, r3]
 8027f22:	930c      	str	r3, [sp, #48]	@ 0x30
 8027f24:	8843      	ldrh	r3, [r0, #2]
 8027f26:	930d      	str	r3, [sp, #52]	@ 0x34
 8027f28:	ea4f 400e 	mov.w	r0, lr, lsl #16
 8027f2c:	f42e 6efc 	bic.w	lr, lr, #2016	@ 0x7e0
 8027f30:	fb12 f30c 	smulbb	r3, r2, ip
 8027f34:	ea4f 4a01 	mov.w	sl, r1, lsl #16
 8027f38:	f000 60fc 	and.w	r0, r0, #132120576	@ 0x7e00000
 8027f3c:	f421 61fc 	bic.w	r1, r1, #2016	@ 0x7e0
 8027f40:	10db      	asrs	r3, r3, #3
 8027f42:	f00a 6afc 	and.w	sl, sl, #132120576	@ 0x7e00000
 8027f46:	ea40 000e 	orr.w	r0, r0, lr
 8027f4a:	f1cc 0e10 	rsb	lr, ip, #16
 8027f4e:	ea4a 0101 	orr.w	r1, sl, r1
 8027f52:	9f08      	ldr	r7, [sp, #32]
 8027f54:	ebae 0e02 	sub.w	lr, lr, r2
 8027f58:	ebc3 0242 	rsb	r2, r3, r2, lsl #1
 8027f5c:	eb03 0e4e 	add.w	lr, r3, lr, lsl #1
 8027f60:	4351      	muls	r1, r2
 8027f62:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 8027f64:	fb0e 1e00 	mla	lr, lr, r0, r1
 8027f68:	990c      	ldr	r1, [sp, #48]	@ 0x30
 8027f6a:	0410      	lsls	r0, r2, #16
 8027f6c:	f422 62fc 	bic.w	r2, r2, #2016	@ 0x7e0
 8027f70:	f000 60fc 	and.w	r0, r0, #132120576	@ 0x7e00000
 8027f74:	4310      	orrs	r0, r2
 8027f76:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 8027f78:	0412      	lsls	r2, r2, #16
 8027f7a:	fb03 e000 	mla	r0, r3, r0, lr
 8027f7e:	f421 6efc 	bic.w	lr, r1, #2016	@ 0x7e0
 8027f82:	ebc3 034c 	rsb	r3, r3, ip, lsl #1
 8027f86:	f002 62fc 	and.w	r2, r2, #132120576	@ 0x7e00000
 8027f8a:	ea42 020e 	orr.w	r2, r2, lr
 8027f8e:	fb03 0302 	mla	r3, r3, r2, r0
 8027f92:	f8b8 0000 	ldrh.w	r0, [r8]
 8027f96:	0d5a      	lsrs	r2, r3, #21
 8027f98:	095b      	lsrs	r3, r3, #5
 8027f9a:	f402 62fc 	and.w	r2, r2, #2016	@ 0x7e0
 8027f9e:	1201      	asrs	r1, r0, #8
 8027fa0:	f423 63fc 	bic.w	r3, r3, #2016	@ 0x7e0
 8027fa4:	ea4f 0ee0 	mov.w	lr, r0, asr #3
 8027fa8:	f001 01f8 	and.w	r1, r1, #248	@ 0xf8
 8027fac:	00c0      	lsls	r0, r0, #3
 8027fae:	4313      	orrs	r3, r2
 8027fb0:	f8bd 202c 	ldrh.w	r2, [sp, #44]	@ 0x2c
 8027fb4:	fb11 f107 	smulbb	r1, r1, r7
 8027fb8:	b2c0      	uxtb	r0, r0
 8027fba:	b29b      	uxth	r3, r3
 8027fbc:	f00e 0efc 	and.w	lr, lr, #252	@ 0xfc
 8027fc0:	fb10 f007 	smulbb	r0, r0, r7
 8027fc4:	fb1e fe07 	smulbb	lr, lr, r7
 8027fc8:	ea4f 2c23 	mov.w	ip, r3, asr #8
 8027fcc:	f00c 0cf8 	and.w	ip, ip, #248	@ 0xf8
 8027fd0:	fb0c 1c02 	mla	ip, ip, r2, r1
 8027fd4:	10d9      	asrs	r1, r3, #3
 8027fd6:	00db      	lsls	r3, r3, #3
 8027fd8:	fa1f fc8c 	uxth.w	ip, ip
 8027fdc:	f001 01fc 	and.w	r1, r1, #252	@ 0xfc
 8027fe0:	b2db      	uxtb	r3, r3
 8027fe2:	fb01 e102 	mla	r1, r1, r2, lr
 8027fe6:	fb03 0302 	mla	r3, r3, r2, r0
 8027fea:	b289      	uxth	r1, r1
 8027fec:	b29a      	uxth	r2, r3
 8027fee:	f10c 0301 	add.w	r3, ip, #1
 8027ff2:	eb03 2c1c 	add.w	ip, r3, ip, lsr #8
 8027ff6:	1c53      	adds	r3, r2, #1
 8027ff8:	eb03 2312 	add.w	r3, r3, r2, lsr #8
 8027ffc:	1c4a      	adds	r2, r1, #1
 8027ffe:	f40c 4c78 	and.w	ip, ip, #63488	@ 0xf800
 8028002:	eb02 2111 	add.w	r1, r2, r1, lsr #8
 8028006:	f3c3 23c4 	ubfx	r3, r3, #11, #5
 802800a:	0949      	lsrs	r1, r1, #5
 802800c:	ea43 030c 	orr.w	r3, r3, ip
 8028010:	f401 61fc 	and.w	r1, r1, #2016	@ 0x7e0
 8028014:	430b      	orrs	r3, r1
 8028016:	f8a8 3000 	strh.w	r3, [r8]
 802801a:	9b27      	ldr	r3, [sp, #156]	@ 0x9c
 802801c:	f108 0802 	add.w	r8, r8, #2
 8028020:	f109 39ff 	add.w	r9, r9, #4294967295
 8028024:	441c      	add	r4, r3
 8028026:	9b28      	ldr	r3, [sp, #160]	@ 0xa0
 8028028:	441e      	add	r6, r3
 802802a:	e74a      	b.n	8027ec2 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xba>
 802802c:	9b27      	ldr	r3, [sp, #156]	@ 0x9c
 802802e:	3d01      	subs	r5, #1
 8028030:	441c      	add	r4, r3
 8028032:	9b28      	ldr	r3, [sp, #160]	@ 0xa0
 8028034:	441e      	add	r6, r3
 8028036:	9b07      	ldr	r3, [sp, #28]
 8028038:	3302      	adds	r3, #2
 802803a:	9307      	str	r3, [sp, #28]
 802803c:	e722      	b.n	8027e84 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7c>
 802803e:	d022      	beq.n	8028086 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x27e>
 8028040:	1e6b      	subs	r3, r5, #1
 8028042:	9827      	ldr	r0, [sp, #156]	@ 0x9c
 8028044:	fb00 4003 	mla	r0, r0, r3, r4
 8028048:	1400      	asrs	r0, r0, #16
 802804a:	f53f af37 	bmi.w	8027ebc <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xb4>
 802804e:	3901      	subs	r1, #1
 8028050:	4288      	cmp	r0, r1
 8028052:	f6bf af33 	bge.w	8027ebc <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xb4>
 8028056:	9928      	ldr	r1, [sp, #160]	@ 0xa0
 8028058:	fb01 6303 	mla	r3, r1, r3, r6
 802805c:	141b      	asrs	r3, r3, #16
 802805e:	f53f af2d 	bmi.w	8027ebc <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xb4>
 8028062:	3a01      	subs	r2, #1
 8028064:	4293      	cmp	r3, r2
 8028066:	f6bf af29 	bge.w	8027ebc <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xb4>
 802806a:	46a8      	mov	r8, r5
 802806c:	f8dd 901c 	ldr.w	r9, [sp, #28]
 8028070:	f8bd a02c 	ldrh.w	sl, [sp, #44]	@ 0x2c
 8028074:	f1b8 0f00 	cmp.w	r8, #0
 8028078:	dc60      	bgt.n	802813c <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x334>
 802807a:	9b07      	ldr	r3, [sp, #28]
 802807c:	ea25 75e5 	bic.w	r5, r5, r5, asr #31
 8028080:	eb03 0345 	add.w	r3, r3, r5, lsl #1
 8028084:	9307      	str	r3, [sp, #28]
 8028086:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8028088:	2b00      	cmp	r3, #0
 802808a:	f340 80f8 	ble.w	802827e <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x476>
 802808e:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8028092:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 8028094:	ee3a aa2b 	vadd.f32	s20, s20, s23
 8028098:	ee79 9a8b 	vadd.f32	s19, s19, s22
 802809c:	eef0 6a48 	vmov.f32	s13, s16
 80280a0:	eec7 7a0a 	vdiv.f32	s15, s14, s20
 80280a4:	ee39 9a2a 	vadd.f32	s18, s18, s21
 80280a8:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 80280ac:	ee16 4a90 	vmov	r4, s13
 80280b0:	eef0 6a68 	vmov.f32	s13, s17
 80280b4:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 80280b8:	ee16 6a90 	vmov	r6, s13
 80280bc:	ee29 7aa7 	vmul.f32	s14, s19, s15
 80280c0:	ee69 7a27 	vmul.f32	s15, s18, s15
 80280c4:	ee37 8a48 	vsub.f32	s16, s14, s16
 80280c8:	ee77 8ae8 	vsub.f32	s17, s15, s17
 80280cc:	eebe 8ac8 	vcvt.s32.f32	s16, s16, #16
 80280d0:	eefe 8ac8 	vcvt.s32.f32	s17, s17, #16
 80280d4:	ee18 2a10 	vmov	r2, s16
 80280d8:	eeb0 8a47 	vmov.f32	s16, s14
 80280dc:	fb92 f3f3 	sdiv	r3, r2, r3
 80280e0:	ee18 2a90 	vmov	r2, s17
 80280e4:	9327      	str	r3, [sp, #156]	@ 0x9c
 80280e6:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 80280e8:	eef0 8a67 	vmov.f32	s17, s15
 80280ec:	fb92 f3f3 	sdiv	r3, r2, r3
 80280f0:	9328      	str	r3, [sp, #160]	@ 0xa0
 80280f2:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80280f4:	9a10      	ldr	r2, [sp, #64]	@ 0x40
 80280f6:	3b01      	subs	r3, #1
 80280f8:	930a      	str	r3, [sp, #40]	@ 0x28
 80280fa:	bf08      	it	eq
 80280fc:	4615      	moveq	r5, r2
 80280fe:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 8028100:	bf18      	it	ne
 8028102:	461d      	movne	r5, r3
 8028104:	e6af      	b.n	8027e66 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5e>
 8028106:	f111 0a01 	adds.w	sl, r1, #1
 802810a:	d486      	bmi.n	802801a <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x212>
 802810c:	45d6      	cmp	lr, sl
 802810e:	db84      	blt.n	802801a <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x212>
 8028110:	f110 0a01 	adds.w	sl, r0, #1
 8028114:	d481      	bmi.n	802801a <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x212>
 8028116:	4553      	cmp	r3, sl
 8028118:	f6ff af7f 	blt.w	802801a <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x212>
 802811c:	9f0b      	ldr	r7, [sp, #44]	@ 0x2c
 802811e:	b21b      	sxth	r3, r3
 8028120:	9101      	str	r1, [sp, #4]
 8028122:	4641      	mov	r1, r8
 8028124:	9300      	str	r3, [sp, #0]
 8028126:	fa0f f38e 	sxth.w	r3, lr
 802812a:	e9cd 0202 	strd	r0, r2, [sp, #8]
 802812e:	e9cd c704 	strd	ip, r7, [sp, #16]
 8028132:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8028134:	9811      	ldr	r0, [sp, #68]	@ 0x44
 8028136:	f7ff fd93 	bl	8027c60 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtssiihhh>
 802813a:	e76e      	b.n	802801a <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x212>
 802813c:	9b2c      	ldr	r3, [sp, #176]	@ 0xb0
 802813e:	1430      	asrs	r0, r6, #16
 8028140:	9f09      	ldr	r7, [sp, #36]	@ 0x24
 8028142:	f3c6 3e03 	ubfx	lr, r6, #12, #4
 8028146:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 802814a:	1423      	asrs	r3, r4, #16
 802814c:	f3c4 3203 	ubfx	r2, r4, #12, #4
 8028150:	fb01 3000 	mla	r0, r1, r0, r3
 8028154:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8028156:	eb03 0340 	add.w	r3, r3, r0, lsl #1
 802815a:	f837 c010 	ldrh.w	ip, [r7, r0, lsl #1]
 802815e:	8858      	ldrh	r0, [r3, #2]
 8028160:	f1be 0f00 	cmp.w	lr, #0
 8028164:	d00b      	beq.n	802817e <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x376>
 8028166:	f101 4100 	add.w	r1, r1, #2147483648	@ 0x80000000
 802816a:	3901      	subs	r1, #1
 802816c:	0049      	lsls	r1, r1, #1
 802816e:	3102      	adds	r1, #2
 8028170:	eb03 0b01 	add.w	fp, r3, r1
 8028174:	5a5b      	ldrh	r3, [r3, r1]
 8028176:	930e      	str	r3, [sp, #56]	@ 0x38
 8028178:	f8bb 3002 	ldrh.w	r3, [fp, #2]
 802817c:	930f      	str	r3, [sp, #60]	@ 0x3c
 802817e:	ea4f 410c 	mov.w	r1, ip, lsl #16
 8028182:	f42c 6cfc 	bic.w	ip, ip, #2016	@ 0x7e0
 8028186:	fb12 f30e 	smulbb	r3, r2, lr
 802818a:	ea4f 4b00 	mov.w	fp, r0, lsl #16
 802818e:	f001 61fc 	and.w	r1, r1, #132120576	@ 0x7e00000
 8028192:	f420 60fc 	bic.w	r0, r0, #2016	@ 0x7e0
 8028196:	10db      	asrs	r3, r3, #3
 8028198:	f00b 6bfc 	and.w	fp, fp, #132120576	@ 0x7e00000
 802819c:	ea41 010c 	orr.w	r1, r1, ip
 80281a0:	f1ce 0c10 	rsb	ip, lr, #16
 80281a4:	ea4b 0000 	orr.w	r0, fp, r0
 80281a8:	9f08      	ldr	r7, [sp, #32]
 80281aa:	ebac 0c02 	sub.w	ip, ip, r2
 80281ae:	ebc3 0242 	rsb	r2, r3, r2, lsl #1
 80281b2:	f108 38ff 	add.w	r8, r8, #4294967295
 80281b6:	4350      	muls	r0, r2
 80281b8:	eb03 0c4c 	add.w	ip, r3, ip, lsl #1
 80281bc:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 80281be:	fb0c 0c01 	mla	ip, ip, r1, r0
 80281c2:	980e      	ldr	r0, [sp, #56]	@ 0x38
 80281c4:	ea4f 4b02 	mov.w	fp, r2, lsl #16
 80281c8:	f422 61fc 	bic.w	r1, r2, #2016	@ 0x7e0
 80281cc:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 80281ce:	f420 60fc 	bic.w	r0, r0, #2016	@ 0x7e0
 80281d2:	f00b 6bfc 	and.w	fp, fp, #132120576	@ 0x7e00000
 80281d6:	0412      	lsls	r2, r2, #16
 80281d8:	ea4b 0101 	orr.w	r1, fp, r1
 80281dc:	f002 62fc 	and.w	r2, r2, #132120576	@ 0x7e00000
 80281e0:	fb03 c101 	mla	r1, r3, r1, ip
 80281e4:	ebc3 034e 	rsb	r3, r3, lr, lsl #1
 80281e8:	4302      	orrs	r2, r0
 80281ea:	fb03 1202 	mla	r2, r3, r2, r1
 80281ee:	ea4f 5b52 	mov.w	fp, r2, lsr #21
 80281f2:	0952      	lsrs	r2, r2, #5
 80281f4:	f40b 6bfc 	and.w	fp, fp, #2016	@ 0x7e0
 80281f8:	f422 63fc 	bic.w	r3, r2, #2016	@ 0x7e0
 80281fc:	f8b9 2000 	ldrh.w	r2, [r9]
 8028200:	ea4b 0303 	orr.w	r3, fp, r3
 8028204:	1211      	asrs	r1, r2, #8
 8028206:	ea4f 0ce2 	mov.w	ip, r2, asr #3
 802820a:	b29b      	uxth	r3, r3
 802820c:	f001 01f8 	and.w	r1, r1, #248	@ 0xf8
 8028210:	00d2      	lsls	r2, r2, #3
 8028212:	f00c 0cfc 	and.w	ip, ip, #252	@ 0xfc
 8028216:	fb11 f107 	smulbb	r1, r1, r7
 802821a:	1218      	asrs	r0, r3, #8
 802821c:	fb1c fc07 	smulbb	ip, ip, r7
 8028220:	b2d2      	uxtb	r2, r2
 8028222:	f000 00f8 	and.w	r0, r0, #248	@ 0xf8
 8028226:	fb12 f207 	smulbb	r2, r2, r7
 802822a:	fb00 100a 	mla	r0, r0, sl, r1
 802822e:	10d9      	asrs	r1, r3, #3
 8028230:	00db      	lsls	r3, r3, #3
 8028232:	f001 01fc 	and.w	r1, r1, #252	@ 0xfc
 8028236:	b280      	uxth	r0, r0
 8028238:	b2db      	uxtb	r3, r3
 802823a:	fb01 c10a 	mla	r1, r1, sl, ip
 802823e:	fb03 230a 	mla	r3, r3, sl, r2
 8028242:	1c42      	adds	r2, r0, #1
 8028244:	b289      	uxth	r1, r1
 8028246:	b29b      	uxth	r3, r3
 8028248:	eb02 2010 	add.w	r0, r2, r0, lsr #8
 802824c:	f101 0c01 	add.w	ip, r1, #1
 8028250:	1c5a      	adds	r2, r3, #1
 8028252:	eb0c 2c11 	add.w	ip, ip, r1, lsr #8
 8028256:	f400 4078 	and.w	r0, r0, #63488	@ 0xf800
 802825a:	eb02 2213 	add.w	r2, r2, r3, lsr #8
 802825e:	9b27      	ldr	r3, [sp, #156]	@ 0x9c
 8028260:	ea4f 1c5c 	mov.w	ip, ip, lsr #5
 8028264:	f3c2 22c4 	ubfx	r2, r2, #11, #5
 8028268:	441c      	add	r4, r3
 802826a:	f40c 6cfc 	and.w	ip, ip, #2016	@ 0x7e0
 802826e:	9b28      	ldr	r3, [sp, #160]	@ 0xa0
 8028270:	4310      	orrs	r0, r2
 8028272:	441e      	add	r6, r3
 8028274:	ea40 000c 	orr.w	r0, r0, ip
 8028278:	f829 0b02 	strh.w	r0, [r9], #2
 802827c:	e6fa      	b.n	8028074 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x26c>
 802827e:	b013      	add	sp, #76	@ 0x4c
 8028280:	ecbd 8b08 	vpop	{d8-d11}
 8028284:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08028288 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtssiihh>:
 8028288:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 802828c:	e9dd 5607 	ldrd	r5, r6, [sp, #28]
 8028290:	f9bd 8018 	ldrsh.w	r8, [sp, #24]
 8028294:	fb06 5c03 	mla	ip, r6, r3, r5
 8028298:	2e00      	cmp	r6, #0
 802829a:	f89d 4024 	ldrb.w	r4, [sp, #36]	@ 0x24
 802829e:	f89d 7028 	ldrb.w	r7, [sp, #40]	@ 0x28
 80282a2:	eb02 0e4c 	add.w	lr, r2, ip, lsl #1
 80282a6:	8808      	ldrh	r0, [r1, #0]
 80282a8:	db2e      	blt.n	8028308 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtssiihh+0x80>
 80282aa:	45b0      	cmp	r8, r6
 80282ac:	dd2c      	ble.n	8028308 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtssiihh+0x80>
 80282ae:	2d00      	cmp	r5, #0
 80282b0:	db28      	blt.n	8028304 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtssiihh+0x7c>
 80282b2:	42ab      	cmp	r3, r5
 80282b4:	dd26      	ble.n	8028304 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtssiihh+0x7c>
 80282b6:	f832 c01c 	ldrh.w	ip, [r2, ip, lsl #1]
 80282ba:	1c6a      	adds	r2, r5, #1
 80282bc:	d427      	bmi.n	802830e <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtssiihh+0x86>
 80282be:	4293      	cmp	r3, r2
 80282c0:	dd25      	ble.n	802830e <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtssiihh+0x86>
 80282c2:	b324      	cbz	r4, 802830e <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtssiihh+0x86>
 80282c4:	f8be 2002 	ldrh.w	r2, [lr, #2]
 80282c8:	3601      	adds	r6, #1
 80282ca:	d424      	bmi.n	8028316 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtssiihh+0x8e>
 80282cc:	45b0      	cmp	r8, r6
 80282ce:	dd22      	ble.n	8028316 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtssiihh+0x8e>
 80282d0:	b31f      	cbz	r7, 802831a <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtssiihh+0x92>
 80282d2:	2d00      	cmp	r5, #0
 80282d4:	db1d      	blt.n	8028312 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtssiihh+0x8a>
 80282d6:	42ab      	cmp	r3, r5
 80282d8:	dd1b      	ble.n	8028312 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtssiihh+0x8a>
 80282da:	f83e 6013 	ldrh.w	r6, [lr, r3, lsl #1]
 80282de:	3501      	adds	r5, #1
 80282e0:	d405      	bmi.n	80282ee <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtssiihh+0x66>
 80282e2:	42ab      	cmp	r3, r5
 80282e4:	dd03      	ble.n	80282ee <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtssiihh+0x66>
 80282e6:	b124      	cbz	r4, 80282f2 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtssiihh+0x6a>
 80282e8:	3301      	adds	r3, #1
 80282ea:	f83e 0013 	ldrh.w	r0, [lr, r3, lsl #1]
 80282ee:	2c0f      	cmp	r4, #15
 80282f0:	d801      	bhi.n	80282f6 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtssiihh+0x6e>
 80282f2:	2f0f      	cmp	r7, #15
 80282f4:	d914      	bls.n	8028320 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtssiihh+0x98>
 80282f6:	4b27      	ldr	r3, [pc, #156]	@ (8028394 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtssiihh+0x10c>)
 80282f8:	f44f 71ec 	mov.w	r1, #472	@ 0x1d8
 80282fc:	4a26      	ldr	r2, [pc, #152]	@ (8028398 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtssiihh+0x110>)
 80282fe:	4827      	ldr	r0, [pc, #156]	@ (802839c <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtssiihh+0x114>)
 8028300:	f002 fca0 	bl	802ac44 <__assert_func>
 8028304:	4684      	mov	ip, r0
 8028306:	e7d8      	b.n	80282ba <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtssiihh+0x32>
 8028308:	4602      	mov	r2, r0
 802830a:	4684      	mov	ip, r0
 802830c:	e7dc      	b.n	80282c8 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtssiihh+0x40>
 802830e:	4602      	mov	r2, r0
 8028310:	e7da      	b.n	80282c8 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtssiihh+0x40>
 8028312:	4606      	mov	r6, r0
 8028314:	e7e3      	b.n	80282de <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtssiihh+0x56>
 8028316:	4606      	mov	r6, r0
 8028318:	e7e9      	b.n	80282ee <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtssiihh+0x66>
 802831a:	2c0f      	cmp	r4, #15
 802831c:	d8eb      	bhi.n	80282f6 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtssiihh+0x6e>
 802831e:	4606      	mov	r6, r0
 8028320:	fb14 f307 	smulbb	r3, r4, r7
 8028324:	ea4f 450c 	mov.w	r5, ip, lsl #16
 8028328:	ea4f 4e02 	mov.w	lr, r2, lsl #16
 802832c:	f42c 6cfc 	bic.w	ip, ip, #2016	@ 0x7e0
 8028330:	f005 65fc 	and.w	r5, r5, #132120576	@ 0x7e00000
 8028334:	10db      	asrs	r3, r3, #3
 8028336:	f00e 6efc 	and.w	lr, lr, #132120576	@ 0x7e00000
 802833a:	f422 62fc 	bic.w	r2, r2, #2016	@ 0x7e0
 802833e:	ea45 0c0c 	orr.w	ip, r5, ip
 8028342:	f1c7 0510 	rsb	r5, r7, #16
 8028346:	ea4e 0202 	orr.w	r2, lr, r2
 802834a:	ebc3 0747 	rsb	r7, r3, r7, lsl #1
 802834e:	1b2d      	subs	r5, r5, r4
 8028350:	ebc3 0444 	rsb	r4, r3, r4, lsl #1
 8028354:	eb03 0545 	add.w	r5, r3, r5, lsl #1
 8028358:	4354      	muls	r4, r2
 802835a:	fb05 450c 	mla	r5, r5, ip, r4
 802835e:	0404      	lsls	r4, r0, #16
 8028360:	f420 60fc 	bic.w	r0, r0, #2016	@ 0x7e0
 8028364:	f004 64fc 	and.w	r4, r4, #132120576	@ 0x7e00000
 8028368:	4320      	orrs	r0, r4
 802836a:	fb03 5400 	mla	r4, r3, r0, r5
 802836e:	0430      	lsls	r0, r6, #16
 8028370:	f426 66fc 	bic.w	r6, r6, #2016	@ 0x7e0
 8028374:	f000 60fc 	and.w	r0, r0, #132120576	@ 0x7e00000
 8028378:	4330      	orrs	r0, r6
 802837a:	fb07 4000 	mla	r0, r7, r0, r4
 802837e:	0d43      	lsrs	r3, r0, #21
 8028380:	0940      	lsrs	r0, r0, #5
 8028382:	f403 63fc 	and.w	r3, r3, #2016	@ 0x7e0
 8028386:	f420 60fc 	bic.w	r0, r0, #2016	@ 0x7e0
 802838a:	4318      	orrs	r0, r3
 802838c:	8008      	strh	r0, [r1, #0]
 802838e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8028392:	bf00      	nop
 8028394:	0802fed5 	.word	0x0802fed5
 8028398:	0803054b 	.word	0x0803054b
 802839c:	0802ff59 	.word	0x0802ff59

080283a0 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 80283a0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80283a4:	ed2d 8b08 	vpush	{d8-d11}
 80283a8:	b08f      	sub	sp, #60	@ 0x3c
 80283aa:	461d      	mov	r5, r3
 80283ac:	eeb0 aa40 	vmov.f32	s20, s0
 80283b0:	9b25      	ldr	r3, [sp, #148]	@ 0x94
 80283b2:	eef0 9a60 	vmov.f32	s19, s1
 80283b6:	9107      	str	r1, [sp, #28]
 80283b8:	eeb0 9a41 	vmov.f32	s18, s2
 80283bc:	6859      	ldr	r1, [r3, #4]
 80283be:	eeb0 8a62 	vmov.f32	s16, s5
 80283c2:	920c      	str	r2, [sp, #48]	@ 0x30
 80283c4:	eef0 8a43 	vmov.f32	s17, s6
 80283c8:	681b      	ldr	r3, [r3, #0]
 80283ca:	eef0 ba44 	vmov.f32	s23, s8
 80283ce:	eeb0 ba64 	vmov.f32	s22, s9
 80283d2:	900d      	str	r0, [sp, #52]	@ 0x34
 80283d4:	eef0 aa45 	vmov.f32	s21, s10
 80283d8:	e9dd 2726 	ldrd	r2, r7, [sp, #152]	@ 0x98
 80283dc:	e9dd 4621 	ldrd	r4, r6, [sp, #132]	@ 0x84
 80283e0:	fb01 2707 	mla	r7, r1, r7, r2
 80283e4:	eb03 0747 	add.w	r7, r3, r7, lsl #1
 80283e8:	9b28      	ldr	r3, [sp, #160]	@ 0xa0
 80283ea:	f8d3 8000 	ldr.w	r8, [r3]
 80283ee:	9b07      	ldr	r3, [sp, #28]
 80283f0:	2b00      	cmp	r3, #0
 80283f2:	dc03      	bgt.n	80283fc <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5c>
 80283f4:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 80283f6:	2b00      	cmp	r3, #0
 80283f8:	f340 8182 	ble.w	8028700 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x360>
 80283fc:	9b28      	ldr	r3, [sp, #160]	@ 0xa0
 80283fe:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 8028402:	f9b3 200c 	ldrsh.w	r2, [r3, #12]
 8028406:	1e48      	subs	r0, r1, #1
 8028408:	f102 3cff 	add.w	ip, r2, #4294967295
 802840c:	2d00      	cmp	r5, #0
 802840e:	f340 809b 	ble.w	8028548 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1a8>
 8028412:	ea5f 4e24 	movs.w	lr, r4, asr #16
 8028416:	ea4f 4326 	mov.w	r3, r6, asr #16
 802841a:	d406      	bmi.n	802842a <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8a>
 802841c:	4586      	cmp	lr, r0
 802841e:	da04      	bge.n	802842a <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8a>
 8028420:	2b00      	cmp	r3, #0
 8028422:	db02      	blt.n	802842a <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8a>
 8028424:	4563      	cmp	r3, ip
 8028426:	f2c0 8090 	blt.w	802854a <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1aa>
 802842a:	f11e 0e01 	adds.w	lr, lr, #1
 802842e:	f100 8084 	bmi.w	802853a <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x19a>
 8028432:	4571      	cmp	r1, lr
 8028434:	f2c0 8081 	blt.w	802853a <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x19a>
 8028438:	3301      	adds	r3, #1
 802843a:	d47e      	bmi.n	802853a <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x19a>
 802843c:	429a      	cmp	r2, r3
 802843e:	db7c      	blt.n	802853a <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x19a>
 8028440:	46aa      	mov	sl, r5
 8028442:	46b9      	mov	r9, r7
 8028444:	f1ba 0f00 	cmp.w	sl, #0
 8028448:	f340 8099 	ble.w	802857e <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1de>
 802844c:	9b28      	ldr	r3, [sp, #160]	@ 0xa0
 802844e:	1421      	asrs	r1, r4, #16
 8028450:	ea4f 4026 	mov.w	r0, r6, asr #16
 8028454:	f3c4 3203 	ubfx	r2, r4, #12, #4
 8028458:	f3c6 3c03 	ubfx	ip, r6, #12, #4
 802845c:	e9d3 e302 	ldrd	lr, r3, [r3, #8]
 8028460:	f100 80d1 	bmi.w	8028606 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x266>
 8028464:	f10e 3bff 	add.w	fp, lr, #4294967295
 8028468:	4559      	cmp	r1, fp
 802846a:	f280 80cc 	bge.w	8028606 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x266>
 802846e:	2800      	cmp	r0, #0
 8028470:	f2c0 80c9 	blt.w	8028606 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x266>
 8028474:	f103 3bff 	add.w	fp, r3, #4294967295
 8028478:	4558      	cmp	r0, fp
 802847a:	f280 80c4 	bge.w	8028606 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x266>
 802847e:	fa0f fe8e 	sxth.w	lr, lr
 8028482:	fb00 110e 	mla	r1, r0, lr, r1
 8028486:	eb08 0041 	add.w	r0, r8, r1, lsl #1
 802848a:	f838 b011 	ldrh.w	fp, [r8, r1, lsl #1]
 802848e:	8841      	ldrh	r1, [r0, #2]
 8028490:	f1bc 0f00 	cmp.w	ip, #0
 8028494:	d00b      	beq.n	80284ae <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x10e>
 8028496:	f10e 4300 	add.w	r3, lr, #2147483648	@ 0x80000000
 802849a:	3b01      	subs	r3, #1
 802849c:	005b      	lsls	r3, r3, #1
 802849e:	3302      	adds	r3, #2
 80284a0:	eb00 0e03 	add.w	lr, r0, r3
 80284a4:	5ac3      	ldrh	r3, [r0, r3]
 80284a6:	9308      	str	r3, [sp, #32]
 80284a8:	f8be 3002 	ldrh.w	r3, [lr, #2]
 80284ac:	9309      	str	r3, [sp, #36]	@ 0x24
 80284ae:	ea4f 400b 	mov.w	r0, fp, lsl #16
 80284b2:	f42b 6bfc 	bic.w	fp, fp, #2016	@ 0x7e0
 80284b6:	fb12 f30c 	smulbb	r3, r2, ip
 80284ba:	f1cc 0e10 	rsb	lr, ip, #16
 80284be:	f000 60fc 	and.w	r0, r0, #132120576	@ 0x7e00000
 80284c2:	10db      	asrs	r3, r3, #3
 80284c4:	ebae 0e02 	sub.w	lr, lr, r2
 80284c8:	ea40 000b 	orr.w	r0, r0, fp
 80284cc:	ea4f 4b01 	mov.w	fp, r1, lsl #16
 80284d0:	f421 61fc 	bic.w	r1, r1, #2016	@ 0x7e0
 80284d4:	ebc3 0242 	rsb	r2, r3, r2, lsl #1
 80284d8:	f00b 6bfc 	and.w	fp, fp, #132120576	@ 0x7e00000
 80284dc:	eb03 0e4e 	add.w	lr, r3, lr, lsl #1
 80284e0:	ea4b 0101 	orr.w	r1, fp, r1
 80284e4:	4351      	muls	r1, r2
 80284e6:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80284e8:	fb0e 1e00 	mla	lr, lr, r0, r1
 80284ec:	0410      	lsls	r0, r2, #16
 80284ee:	f422 62fc 	bic.w	r2, r2, #2016	@ 0x7e0
 80284f2:	9908      	ldr	r1, [sp, #32]
 80284f4:	f000 60fc 	and.w	r0, r0, #132120576	@ 0x7e00000
 80284f8:	4310      	orrs	r0, r2
 80284fa:	9a08      	ldr	r2, [sp, #32]
 80284fc:	0412      	lsls	r2, r2, #16
 80284fe:	fb03 e000 	mla	r0, r3, r0, lr
 8028502:	f421 6efc 	bic.w	lr, r1, #2016	@ 0x7e0
 8028506:	ebc3 034c 	rsb	r3, r3, ip, lsl #1
 802850a:	f002 62fc 	and.w	r2, r2, #132120576	@ 0x7e00000
 802850e:	ea42 020e 	orr.w	r2, r2, lr
 8028512:	fb03 0302 	mla	r3, r3, r2, r0
 8028516:	0d5a      	lsrs	r2, r3, #21
 8028518:	095b      	lsrs	r3, r3, #5
 802851a:	f402 62fc 	and.w	r2, r2, #2016	@ 0x7e0
 802851e:	f423 63fc 	bic.w	r3, r3, #2016	@ 0x7e0
 8028522:	4313      	orrs	r3, r2
 8028524:	f8a9 3000 	strh.w	r3, [r9]
 8028528:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 802852a:	f109 0902 	add.w	r9, r9, #2
 802852e:	f10a 3aff 	add.w	sl, sl, #4294967295
 8028532:	441c      	add	r4, r3
 8028534:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 8028536:	441e      	add	r6, r3
 8028538:	e784      	b.n	8028444 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa4>
 802853a:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 802853c:	3d01      	subs	r5, #1
 802853e:	3702      	adds	r7, #2
 8028540:	441c      	add	r4, r3
 8028542:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 8028544:	441e      	add	r6, r3
 8028546:	e761      	b.n	802840c <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6c>
 8028548:	d01d      	beq.n	8028586 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1e6>
 802854a:	1e6b      	subs	r3, r5, #1
 802854c:	9823      	ldr	r0, [sp, #140]	@ 0x8c
 802854e:	fb00 4003 	mla	r0, r0, r3, r4
 8028552:	1400      	asrs	r0, r0, #16
 8028554:	f53f af74 	bmi.w	8028440 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa0>
 8028558:	3901      	subs	r1, #1
 802855a:	4288      	cmp	r0, r1
 802855c:	f6bf af70 	bge.w	8028440 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa0>
 8028560:	9924      	ldr	r1, [sp, #144]	@ 0x90
 8028562:	fb01 6303 	mla	r3, r1, r3, r6
 8028566:	141b      	asrs	r3, r3, #16
 8028568:	f53f af6a 	bmi.w	8028440 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa0>
 802856c:	3a01      	subs	r2, #1
 802856e:	4293      	cmp	r3, r2
 8028570:	f6bf af66 	bge.w	8028440 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa0>
 8028574:	46a9      	mov	r9, r5
 8028576:	46ba      	mov	sl, r7
 8028578:	f1b9 0f00 	cmp.w	r9, #0
 802857c:	dc5b      	bgt.n	8028636 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x296>
 802857e:	ea25 75e5 	bic.w	r5, r5, r5, asr #31
 8028582:	eb07 0745 	add.w	r7, r7, r5, lsl #1
 8028586:	9b07      	ldr	r3, [sp, #28]
 8028588:	2b00      	cmp	r3, #0
 802858a:	f340 80b9 	ble.w	8028700 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x360>
 802858e:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8028592:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 8028594:	ee3a aa2b 	vadd.f32	s20, s20, s23
 8028598:	ee79 9a8b 	vadd.f32	s19, s19, s22
 802859c:	eef0 6a48 	vmov.f32	s13, s16
 80285a0:	eec7 7a0a 	vdiv.f32	s15, s14, s20
 80285a4:	ee39 9a2a 	vadd.f32	s18, s18, s21
 80285a8:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 80285ac:	ee16 4a90 	vmov	r4, s13
 80285b0:	eef0 6a68 	vmov.f32	s13, s17
 80285b4:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 80285b8:	ee16 6a90 	vmov	r6, s13
 80285bc:	ee29 7aa7 	vmul.f32	s14, s19, s15
 80285c0:	ee69 7a27 	vmul.f32	s15, s18, s15
 80285c4:	ee37 8a48 	vsub.f32	s16, s14, s16
 80285c8:	ee77 8ae8 	vsub.f32	s17, s15, s17
 80285cc:	eebe 8ac8 	vcvt.s32.f32	s16, s16, #16
 80285d0:	eefe 8ac8 	vcvt.s32.f32	s17, s17, #16
 80285d4:	ee18 2a10 	vmov	r2, s16
 80285d8:	eeb0 8a47 	vmov.f32	s16, s14
 80285dc:	fb92 f3f3 	sdiv	r3, r2, r3
 80285e0:	ee18 2a90 	vmov	r2, s17
 80285e4:	9323      	str	r3, [sp, #140]	@ 0x8c
 80285e6:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 80285e8:	eef0 8a67 	vmov.f32	s17, s15
 80285ec:	fb92 f3f3 	sdiv	r3, r2, r3
 80285f0:	9324      	str	r3, [sp, #144]	@ 0x90
 80285f2:	9b07      	ldr	r3, [sp, #28]
 80285f4:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 80285f6:	3b01      	subs	r3, #1
 80285f8:	9307      	str	r3, [sp, #28]
 80285fa:	bf08      	it	eq
 80285fc:	4615      	moveq	r5, r2
 80285fe:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 8028600:	bf18      	it	ne
 8028602:	461d      	movne	r5, r3
 8028604:	e6f3      	b.n	80283ee <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4e>
 8028606:	f111 0b01 	adds.w	fp, r1, #1
 802860a:	d48d      	bmi.n	8028528 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x188>
 802860c:	45de      	cmp	lr, fp
 802860e:	db8b      	blt.n	8028528 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x188>
 8028610:	f110 0b01 	adds.w	fp, r0, #1
 8028614:	d488      	bmi.n	8028528 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x188>
 8028616:	455b      	cmp	r3, fp
 8028618:	db86      	blt.n	8028528 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x188>
 802861a:	b21b      	sxth	r3, r3
 802861c:	e9cd 1001 	strd	r1, r0, [sp, #4]
 8028620:	e9cd 2c03 	strd	r2, ip, [sp, #12]
 8028624:	9300      	str	r3, [sp, #0]
 8028626:	4642      	mov	r2, r8
 8028628:	fa0f f38e 	sxth.w	r3, lr
 802862c:	4649      	mov	r1, r9
 802862e:	980d      	ldr	r0, [sp, #52]	@ 0x34
 8028630:	f7ff fe2a 	bl	8028288 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtssiihh>
 8028634:	e778      	b.n	8028528 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x188>
 8028636:	9b28      	ldr	r3, [sp, #160]	@ 0xa0
 8028638:	1420      	asrs	r0, r4, #16
 802863a:	1431      	asrs	r1, r6, #16
 802863c:	f3c6 3e03 	ubfx	lr, r6, #12, #4
 8028640:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8028644:	f3c4 3203 	ubfx	r2, r4, #12, #4
 8028648:	fb03 0101 	mla	r1, r3, r1, r0
 802864c:	eb08 0041 	add.w	r0, r8, r1, lsl #1
 8028650:	f838 c011 	ldrh.w	ip, [r8, r1, lsl #1]
 8028654:	8841      	ldrh	r1, [r0, #2]
 8028656:	f1be 0f00 	cmp.w	lr, #0
 802865a:	d00b      	beq.n	8028674 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2d4>
 802865c:	f103 4300 	add.w	r3, r3, #2147483648	@ 0x80000000
 8028660:	3b01      	subs	r3, #1
 8028662:	005b      	lsls	r3, r3, #1
 8028664:	3302      	adds	r3, #2
 8028666:	eb00 0b03 	add.w	fp, r0, r3
 802866a:	5ac3      	ldrh	r3, [r0, r3]
 802866c:	930a      	str	r3, [sp, #40]	@ 0x28
 802866e:	f8bb 3002 	ldrh.w	r3, [fp, #2]
 8028672:	930b      	str	r3, [sp, #44]	@ 0x2c
 8028674:	ea4f 400c 	mov.w	r0, ip, lsl #16
 8028678:	f42c 6cfc 	bic.w	ip, ip, #2016	@ 0x7e0
 802867c:	fb12 f30e 	smulbb	r3, r2, lr
 8028680:	ea4f 4b01 	mov.w	fp, r1, lsl #16
 8028684:	f000 60fc 	and.w	r0, r0, #132120576	@ 0x7e00000
 8028688:	f421 61fc 	bic.w	r1, r1, #2016	@ 0x7e0
 802868c:	10db      	asrs	r3, r3, #3
 802868e:	f00b 6bfc 	and.w	fp, fp, #132120576	@ 0x7e00000
 8028692:	ea40 000c 	orr.w	r0, r0, ip
 8028696:	f1ce 0c10 	rsb	ip, lr, #16
 802869a:	ea4b 0101 	orr.w	r1, fp, r1
 802869e:	f109 39ff 	add.w	r9, r9, #4294967295
 80286a2:	ebac 0c02 	sub.w	ip, ip, r2
 80286a6:	ebc3 0242 	rsb	r2, r3, r2, lsl #1
 80286aa:	eb03 0c4c 	add.w	ip, r3, ip, lsl #1
 80286ae:	4351      	muls	r1, r2
 80286b0:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 80286b2:	fb0c 1c00 	mla	ip, ip, r0, r1
 80286b6:	990a      	ldr	r1, [sp, #40]	@ 0x28
 80286b8:	ea4f 4b02 	mov.w	fp, r2, lsl #16
 80286bc:	f422 60fc 	bic.w	r0, r2, #2016	@ 0x7e0
 80286c0:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 80286c2:	f00b 6bfc 	and.w	fp, fp, #132120576	@ 0x7e00000
 80286c6:	0412      	lsls	r2, r2, #16
 80286c8:	ea4b 0000 	orr.w	r0, fp, r0
 80286cc:	f421 6bfc 	bic.w	fp, r1, #2016	@ 0x7e0
 80286d0:	f002 62fc 	and.w	r2, r2, #132120576	@ 0x7e00000
 80286d4:	fb03 c000 	mla	r0, r3, r0, ip
 80286d8:	ebc3 034e 	rsb	r3, r3, lr, lsl #1
 80286dc:	ea42 0b0b 	orr.w	fp, r2, fp
 80286e0:	fb03 000b 	mla	r0, r3, fp, r0
 80286e4:	0d43      	lsrs	r3, r0, #21
 80286e6:	0940      	lsrs	r0, r0, #5
 80286e8:	f403 63fc 	and.w	r3, r3, #2016	@ 0x7e0
 80286ec:	f420 60fc 	bic.w	r0, r0, #2016	@ 0x7e0
 80286f0:	4318      	orrs	r0, r3
 80286f2:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 80286f4:	441c      	add	r4, r3
 80286f6:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 80286f8:	f82a 0b02 	strh.w	r0, [sl], #2
 80286fc:	441e      	add	r6, r3
 80286fe:	e73b      	b.n	8028578 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1d8>
 8028700:	b00f      	add	sp, #60	@ 0x3c
 8028702:	ecbd 8b08 	vpop	{d8-d11}
 8028706:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	...

0802870c <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh>:
 802870c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8028710:	e9dd 540d 	ldrd	r5, r4, [sp, #52]	@ 0x34
 8028714:	f9bd e030 	ldrsh.w	lr, [sp, #48]	@ 0x30
 8028718:	fb04 5603 	mla	r6, r4, r3, r5
 802871c:	2c00      	cmp	r4, #0
 802871e:	f89d 003c 	ldrb.w	r0, [sp, #60]	@ 0x3c
 8028722:	f89d 7040 	ldrb.w	r7, [sp, #64]	@ 0x40
 8028726:	eb02 0c86 	add.w	ip, r2, r6, lsl #2
 802872a:	db36      	blt.n	802879a <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0x8e>
 802872c:	45a6      	cmp	lr, r4
 802872e:	dd34      	ble.n	802879a <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0x8e>
 8028730:	2d00      	cmp	r5, #0
 8028732:	db30      	blt.n	8028796 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0x8a>
 8028734:	42ab      	cmp	r3, r5
 8028736:	dd2e      	ble.n	8028796 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0x8a>
 8028738:	f852 2026 	ldr.w	r2, [r2, r6, lsl #2]
 802873c:	1c6e      	adds	r6, r5, #1
 802873e:	d42f      	bmi.n	80287a0 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0x94>
 8028740:	42b3      	cmp	r3, r6
 8028742:	dd2d      	ble.n	80287a0 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0x94>
 8028744:	b370      	cbz	r0, 80287a4 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0x98>
 8028746:	f8dc 6004 	ldr.w	r6, [ip, #4]
 802874a:	3401      	adds	r4, #1
 802874c:	d42e      	bmi.n	80287ac <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0xa0>
 802874e:	45a6      	cmp	lr, r4
 8028750:	dd2c      	ble.n	80287ac <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0xa0>
 8028752:	b377      	cbz	r7, 80287b2 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0xa6>
 8028754:	2d00      	cmp	r5, #0
 8028756:	db27      	blt.n	80287a8 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0x9c>
 8028758:	42ab      	cmp	r3, r5
 802875a:	dd25      	ble.n	80287a8 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0x9c>
 802875c:	f85c 4023 	ldr.w	r4, [ip, r3, lsl #2]
 8028760:	3501      	adds	r5, #1
 8028762:	d429      	bmi.n	80287b8 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0xac>
 8028764:	42ab      	cmp	r3, r5
 8028766:	dd27      	ble.n	80287b8 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0xac>
 8028768:	b340      	cbz	r0, 80287bc <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0xb0>
 802876a:	3301      	adds	r3, #1
 802876c:	f85c 3023 	ldr.w	r3, [ip, r3, lsl #2]
 8028770:	280f      	cmp	r0, #15
 8028772:	ea4f 6b12 	mov.w	fp, r2, lsr #24
 8028776:	ea4f 6a16 	mov.w	sl, r6, lsr #24
 802877a:	ea4f 6914 	mov.w	r9, r4, lsr #24
 802877e:	ea4f 6813 	mov.w	r8, r3, lsr #24
 8028782:	d801      	bhi.n	8028788 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0x7c>
 8028784:	2f0f      	cmp	r7, #15
 8028786:	d91b      	bls.n	80287c0 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0xb4>
 8028788:	4b8d      	ldr	r3, [pc, #564]	@ (80289c0 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0x2b4>)
 802878a:	f44f 71fb 	mov.w	r1, #502	@ 0x1f6
 802878e:	4a8d      	ldr	r2, [pc, #564]	@ (80289c4 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0x2b8>)
 8028790:	488d      	ldr	r0, [pc, #564]	@ (80289c8 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0x2bc>)
 8028792:	f002 fa57 	bl	802ac44 <__assert_func>
 8028796:	2200      	movs	r2, #0
 8028798:	e7d0      	b.n	802873c <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0x30>
 802879a:	2600      	movs	r6, #0
 802879c:	4632      	mov	r2, r6
 802879e:	e7d4      	b.n	802874a <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0x3e>
 80287a0:	2600      	movs	r6, #0
 80287a2:	e7d2      	b.n	802874a <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0x3e>
 80287a4:	4606      	mov	r6, r0
 80287a6:	e7d0      	b.n	802874a <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0x3e>
 80287a8:	2400      	movs	r4, #0
 80287aa:	e7d9      	b.n	8028760 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0x54>
 80287ac:	2300      	movs	r3, #0
 80287ae:	461c      	mov	r4, r3
 80287b0:	e7de      	b.n	8028770 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0x64>
 80287b2:	463b      	mov	r3, r7
 80287b4:	463c      	mov	r4, r7
 80287b6:	e7db      	b.n	8028770 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0x64>
 80287b8:	2300      	movs	r3, #0
 80287ba:	e7d9      	b.n	8028770 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0x64>
 80287bc:	4603      	mov	r3, r0
 80287be:	e7d7      	b.n	8028770 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0x64>
 80287c0:	b280      	uxth	r0, r0
 80287c2:	b2bf      	uxth	r7, r7
 80287c4:	fb07 fe00 	mul.w	lr, r7, r0
 80287c8:	0100      	lsls	r0, r0, #4
 80287ca:	ebce 1707 	rsb	r7, lr, r7, lsl #4
 80287ce:	eba0 0c0e 	sub.w	ip, r0, lr
 80287d2:	f5c0 7580 	rsb	r5, r0, #256	@ 0x100
 80287d6:	b2bf      	uxth	r7, r7
 80287d8:	fa1f fc8c 	uxth.w	ip, ip
 80287dc:	1bed      	subs	r5, r5, r7
 80287de:	fb0a f00c 	mul.w	r0, sl, ip
 80287e2:	b2ad      	uxth	r5, r5
 80287e4:	fb0b 0005 	mla	r0, fp, r5, r0
 80287e8:	fb07 0009 	mla	r0, r7, r9, r0
 80287ec:	fb0e 0008 	mla	r0, lr, r8, r0
 80287f0:	f3c0 2007 	ubfx	r0, r0, #8, #8
 80287f4:	9001      	str	r0, [sp, #4]
 80287f6:	2800      	cmp	r0, #0
 80287f8:	f000 80de 	beq.w	80289b8 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0x2ac>
 80287fc:	f1bb 0fff 	cmp.w	fp, #255	@ 0xff
 8028800:	d018      	beq.n	8028834 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0x128>
 8028802:	f002 10ff 	and.w	r0, r2, #16711935	@ 0xff00ff
 8028806:	f402 427f 	and.w	r2, r2, #65280	@ 0xff00
 802880a:	fb0b f000 	mul.w	r0, fp, r0
 802880e:	fb0b fb02 	mul.w	fp, fp, r2
 8028812:	0a02      	lsrs	r2, r0, #8
 8028814:	f100 1001 	add.w	r0, r0, #65537	@ 0x10001
 8028818:	f002 12ff 	and.w	r2, r2, #16711935	@ 0xff00ff
 802881c:	4402      	add	r2, r0
 802881e:	f50b 7080 	add.w	r0, fp, #256	@ 0x100
 8028822:	eb00 201b 	add.w	r0, r0, fp, lsr #8
 8028826:	0a12      	lsrs	r2, r2, #8
 8028828:	0a00      	lsrs	r0, r0, #8
 802882a:	f002 12ff 	and.w	r2, r2, #16711935	@ 0xff00ff
 802882e:	f400 407f 	and.w	r0, r0, #65280	@ 0xff00
 8028832:	4302      	orrs	r2, r0
 8028834:	f1ba 0fff 	cmp.w	sl, #255	@ 0xff
 8028838:	d01a      	beq.n	8028870 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0x164>
 802883a:	f006 10ff 	and.w	r0, r6, #16711935	@ 0xff00ff
 802883e:	f406 467f 	and.w	r6, r6, #65280	@ 0xff00
 8028842:	fb0a f000 	mul.w	r0, sl, r0
 8028846:	fb0a fa06 	mul.w	sl, sl, r6
 802884a:	0a06      	lsrs	r6, r0, #8
 802884c:	f100 1001 	add.w	r0, r0, #65537	@ 0x10001
 8028850:	f006 16ff 	and.w	r6, r6, #16711935	@ 0xff00ff
 8028854:	4406      	add	r6, r0
 8028856:	f50a 7080 	add.w	r0, sl, #256	@ 0x100
 802885a:	eb00 2a1a 	add.w	sl, r0, sl, lsr #8
 802885e:	0a36      	lsrs	r6, r6, #8
 8028860:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 8028864:	f006 16ff 	and.w	r6, r6, #16711935	@ 0xff00ff
 8028868:	f40a 4a7f 	and.w	sl, sl, #65280	@ 0xff00
 802886c:	ea46 060a 	orr.w	r6, r6, sl
 8028870:	f1b9 0fff 	cmp.w	r9, #255	@ 0xff
 8028874:	d01b      	beq.n	80288ae <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0x1a2>
 8028876:	f004 1aff 	and.w	sl, r4, #16711935	@ 0xff00ff
 802887a:	f404 447f 	and.w	r4, r4, #65280	@ 0xff00
 802887e:	fb09 fa0a 	mul.w	sl, r9, sl
 8028882:	fb09 f004 	mul.w	r0, r9, r4
 8028886:	ea4f 241a 	mov.w	r4, sl, lsr #8
 802888a:	f10a 1a01 	add.w	sl, sl, #65537	@ 0x10001
 802888e:	f500 7980 	add.w	r9, r0, #256	@ 0x100
 8028892:	f004 14ff 	and.w	r4, r4, #16711935	@ 0xff00ff
 8028896:	eb09 2910 	add.w	r9, r9, r0, lsr #8
 802889a:	4454      	add	r4, sl
 802889c:	ea4f 2919 	mov.w	r9, r9, lsr #8
 80288a0:	0a24      	lsrs	r4, r4, #8
 80288a2:	f409 497f 	and.w	r9, r9, #65280	@ 0xff00
 80288a6:	f004 14ff 	and.w	r4, r4, #16711935	@ 0xff00ff
 80288aa:	ea44 0409 	orr.w	r4, r4, r9
 80288ae:	f1b8 0fff 	cmp.w	r8, #255	@ 0xff
 80288b2:	d01b      	beq.n	80288ec <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0x1e0>
 80288b4:	f003 19ff 	and.w	r9, r3, #16711935	@ 0xff00ff
 80288b8:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 80288bc:	fb08 f909 	mul.w	r9, r8, r9
 80288c0:	fb08 f003 	mul.w	r0, r8, r3
 80288c4:	ea4f 2319 	mov.w	r3, r9, lsr #8
 80288c8:	f109 1901 	add.w	r9, r9, #65537	@ 0x10001
 80288cc:	f500 7880 	add.w	r8, r0, #256	@ 0x100
 80288d0:	f003 13ff 	and.w	r3, r3, #16711935	@ 0xff00ff
 80288d4:	eb08 2810 	add.w	r8, r8, r0, lsr #8
 80288d8:	444b      	add	r3, r9
 80288da:	ea4f 2818 	mov.w	r8, r8, lsr #8
 80288de:	0a1b      	lsrs	r3, r3, #8
 80288e0:	f408 487f 	and.w	r8, r8, #65280	@ 0xff00
 80288e4:	f003 13ff 	and.w	r3, r3, #16711935	@ 0xff00ff
 80288e8:	ea43 0308 	orr.w	r3, r3, r8
 80288ec:	f006 18ff 	and.w	r8, r6, #16711935	@ 0xff00ff
 80288f0:	f406 467f 	and.w	r6, r6, #65280	@ 0xff00
 80288f4:	f002 19ff 	and.w	r9, r2, #16711935	@ 0xff00ff
 80288f8:	f402 427f 	and.w	r2, r2, #65280	@ 0xff00
 80288fc:	fb0c f808 	mul.w	r8, ip, r8
 8028900:	8808      	ldrh	r0, [r1, #0]
 8028902:	fb0c f606 	mul.w	r6, ip, r6
 8028906:	fb05 8909 	mla	r9, r5, r9, r8
 802890a:	f004 18ff 	and.w	r8, r4, #16711935	@ 0xff00ff
 802890e:	fb05 6502 	mla	r5, r5, r2, r6
 8028912:	f404 447f 	and.w	r4, r4, #65280	@ 0xff00
 8028916:	fb07 9908 	mla	r9, r7, r8, r9
 802891a:	f89d 6044 	ldrb.w	r6, [sp, #68]	@ 0x44
 802891e:	fb07 5704 	mla	r7, r7, r4, r5
 8028922:	f003 18ff 	and.w	r8, r3, #16711935	@ 0xff00ff
 8028926:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 802892a:	b2b6      	uxth	r6, r6
 802892c:	fb0e 9808 	mla	r8, lr, r8, r9
 8028930:	9a01      	ldr	r2, [sp, #4]
 8028932:	fb0e 7e03 	mla	lr, lr, r3, r7
 8028936:	1205      	asrs	r5, r0, #8
 8028938:	4372      	muls	r2, r6
 802893a:	ea4f 2818 	mov.w	r8, r8, lsr #8
 802893e:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 8028942:	f005 05f8 	and.w	r5, r5, #248	@ 0xf8
 8028946:	1c53      	adds	r3, r2, #1
 8028948:	f008 18ff 	and.w	r8, r8, #16711935	@ 0xff00ff
 802894c:	f40e 4e7f 	and.w	lr, lr, #65280	@ 0xff00
 8028950:	eb03 2312 	add.w	r3, r3, r2, lsr #8
 8028954:	ea48 0e0e 	orr.w	lr, r8, lr
 8028958:	ea6f 2313 	mvn.w	r3, r3, lsr #8
 802895c:	ea4f 421e 	mov.w	r2, lr, lsr #16
 8028960:	f3ce 2407 	ubfx	r4, lr, #8, #8
 8028964:	b2db      	uxtb	r3, r3
 8028966:	fb12 f206 	smulbb	r2, r2, r6
 802896a:	fa5f fe8e 	uxtb.w	lr, lr
 802896e:	fb14 f406 	smulbb	r4, r4, r6
 8028972:	fb05 2503 	mla	r5, r5, r3, r2
 8028976:	10c2      	asrs	r2, r0, #3
 8028978:	fb1e fe06 	smulbb	lr, lr, r6
 802897c:	00c0      	lsls	r0, r0, #3
 802897e:	f002 02fc 	and.w	r2, r2, #252	@ 0xfc
 8028982:	b2ad      	uxth	r5, r5
 8028984:	b2c0      	uxtb	r0, r0
 8028986:	fb02 4203 	mla	r2, r2, r3, r4
 802898a:	fb00 e303 	mla	r3, r0, r3, lr
 802898e:	b294      	uxth	r4, r2
 8028990:	b298      	uxth	r0, r3
 8028992:	1c6b      	adds	r3, r5, #1
 8028994:	1c62      	adds	r2, r4, #1
 8028996:	eb03 2515 	add.w	r5, r3, r5, lsr #8
 802899a:	1c43      	adds	r3, r0, #1
 802899c:	eb02 2214 	add.w	r2, r2, r4, lsr #8
 80289a0:	eb03 2310 	add.w	r3, r3, r0, lsr #8
 80289a4:	f405 4578 	and.w	r5, r5, #63488	@ 0xf800
 80289a8:	0952      	lsrs	r2, r2, #5
 80289aa:	f3c3 23c4 	ubfx	r3, r3, #11, #5
 80289ae:	f402 62fc 	and.w	r2, r2, #2016	@ 0x7e0
 80289b2:	432b      	orrs	r3, r5
 80289b4:	4313      	orrs	r3, r2
 80289b6:	800b      	strh	r3, [r1, #0]
 80289b8:	b003      	add	sp, #12
 80289ba:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80289be:	bf00      	nop
 80289c0:	0802fed5 	.word	0x0802fed5
 80289c4:	080304a2 	.word	0x080304a2
 80289c8:	0802ff59 	.word	0x0802ff59

080289cc <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 80289cc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80289d0:	ed2d 8b08 	vpush	{d8-d11}
 80289d4:	b09d      	sub	sp, #116	@ 0x74
 80289d6:	eeb0 aa40 	vmov.f32	s20, s0
 80289da:	eef0 9a60 	vmov.f32	s19, s1
 80289de:	9219      	str	r2, [sp, #100]	@ 0x64
 80289e0:	eeb0 9a41 	vmov.f32	s18, s2
 80289e4:	9a33      	ldr	r2, [sp, #204]	@ 0xcc
 80289e6:	eeb0 8a62 	vmov.f32	s16, s5
 80289ea:	9307      	str	r3, [sp, #28]
 80289ec:	eef0 8a43 	vmov.f32	s17, s6
 80289f0:	f89d 30dc 	ldrb.w	r3, [sp, #220]	@ 0xdc
 80289f4:	eef0 ba44 	vmov.f32	s23, s8
 80289f8:	901b      	str	r0, [sp, #108]	@ 0x6c
 80289fa:	eeb0 ba64 	vmov.f32	s22, s9
 80289fe:	931a      	str	r3, [sp, #104]	@ 0x68
 8028a00:	eef0 aa45 	vmov.f32	s21, s10
 8028a04:	6850      	ldr	r0, [r2, #4]
 8028a06:	9117      	str	r1, [sp, #92]	@ 0x5c
 8028a08:	6812      	ldr	r2, [r2, #0]
 8028a0a:	e9dd 1334 	ldrd	r1, r3, [sp, #208]	@ 0xd0
 8028a0e:	e9dd 462f 	ldrd	r4, r6, [sp, #188]	@ 0xbc
 8028a12:	fb00 1303 	mla	r3, r0, r3, r1
 8028a16:	eb02 0343 	add.w	r3, r2, r3, lsl #1
 8028a1a:	930a      	str	r3, [sp, #40]	@ 0x28
 8028a1c:	9b36      	ldr	r3, [sp, #216]	@ 0xd8
 8028a1e:	681b      	ldr	r3, [r3, #0]
 8028a20:	9310      	str	r3, [sp, #64]	@ 0x40
 8028a22:	f8bd 3068 	ldrh.w	r3, [sp, #104]	@ 0x68
 8028a26:	930b      	str	r3, [sp, #44]	@ 0x2c
 8028a28:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 8028a2a:	2b00      	cmp	r3, #0
 8028a2c:	dc03      	bgt.n	8028a36 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6a>
 8028a2e:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8028a30:	2b00      	cmp	r3, #0
 8028a32:	f340 8375 	ble.w	8029120 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x754>
 8028a36:	9b36      	ldr	r3, [sp, #216]	@ 0xd8
 8028a38:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 8028a3c:	f9b3 200c 	ldrsh.w	r2, [r3, #12]
 8028a40:	1e48      	subs	r0, r1, #1
 8028a42:	1e57      	subs	r7, r2, #1
 8028a44:	9b07      	ldr	r3, [sp, #28]
 8028a46:	2b00      	cmp	r3, #0
 8028a48:	f340 818e 	ble.w	8028d68 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x39c>
 8028a4c:	ea5f 4c24 	movs.w	ip, r4, asr #16
 8028a50:	ea4f 4326 	mov.w	r3, r6, asr #16
 8028a54:	d406      	bmi.n	8028a64 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x98>
 8028a56:	4584      	cmp	ip, r0
 8028a58:	da04      	bge.n	8028a64 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x98>
 8028a5a:	2b00      	cmp	r3, #0
 8028a5c:	db02      	blt.n	8028a64 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x98>
 8028a5e:	42bb      	cmp	r3, r7
 8028a60:	f2c0 8183 	blt.w	8028d6a <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x39e>
 8028a64:	f11c 0c01 	adds.w	ip, ip, #1
 8028a68:	f100 8173 	bmi.w	8028d52 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x386>
 8028a6c:	4561      	cmp	r1, ip
 8028a6e:	f2c0 8170 	blt.w	8028d52 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x386>
 8028a72:	3301      	adds	r3, #1
 8028a74:	f100 816d 	bmi.w	8028d52 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x386>
 8028a78:	429a      	cmp	r2, r3
 8028a7a:	f2c0 816a 	blt.w	8028d52 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x386>
 8028a7e:	9b07      	ldr	r3, [sp, #28]
 8028a80:	9f0a      	ldr	r7, [sp, #40]	@ 0x28
 8028a82:	9318      	str	r3, [sp, #96]	@ 0x60
 8028a84:	9b18      	ldr	r3, [sp, #96]	@ 0x60
 8028a86:	2b00      	cmp	r3, #0
 8028a88:	f340 818c 	ble.w	8028da4 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3d8>
 8028a8c:	9a36      	ldr	r2, [sp, #216]	@ 0xd8
 8028a8e:	ea4f 4c26 	mov.w	ip, r6, asr #16
 8028a92:	9b36      	ldr	r3, [sp, #216]	@ 0xd8
 8028a94:	f3c4 3003 	ubfx	r0, r4, #12, #4
 8028a98:	f8d2 e00c 	ldr.w	lr, [r2, #12]
 8028a9c:	1422      	asrs	r2, r4, #16
 8028a9e:	f3c6 3103 	ubfx	r1, r6, #12, #4
 8028aa2:	689b      	ldr	r3, [r3, #8]
 8028aa4:	f100 81cd 	bmi.w	8028e42 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x476>
 8028aa8:	f103 38ff 	add.w	r8, r3, #4294967295
 8028aac:	4542      	cmp	r2, r8
 8028aae:	f280 81c8 	bge.w	8028e42 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x476>
 8028ab2:	f1bc 0f00 	cmp.w	ip, #0
 8028ab6:	f2c0 81c4 	blt.w	8028e42 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x476>
 8028aba:	f10e 38ff 	add.w	r8, lr, #4294967295
 8028abe:	45c4      	cmp	ip, r8
 8028ac0:	f280 81bf 	bge.w	8028e42 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x476>
 8028ac4:	b21b      	sxth	r3, r3
 8028ac6:	9d10      	ldr	r5, [sp, #64]	@ 0x40
 8028ac8:	fb0c 2203 	mla	r2, ip, r3, r2
 8028acc:	eb05 0882 	add.w	r8, r5, r2, lsl #2
 8028ad0:	f855 2022 	ldr.w	r2, [r5, r2, lsl #2]
 8028ad4:	ea4f 6e12 	mov.w	lr, r2, lsr #24
 8028ad8:	2800      	cmp	r0, #0
 8028ada:	f000 81a9 	beq.w	8028e30 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x464>
 8028ade:	f8d8 5004 	ldr.w	r5, [r8, #4]
 8028ae2:	950c      	str	r5, [sp, #48]	@ 0x30
 8028ae4:	0e2d      	lsrs	r5, r5, #24
 8028ae6:	9513      	str	r5, [sp, #76]	@ 0x4c
 8028ae8:	b181      	cbz	r1, 8028b0c <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x140>
 8028aea:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8028aee:	3b01      	subs	r3, #1
 8028af0:	009b      	lsls	r3, r3, #2
 8028af2:	3304      	adds	r3, #4
 8028af4:	eb08 0c03 	add.w	ip, r8, r3
 8028af8:	f858 3003 	ldr.w	r3, [r8, r3]
 8028afc:	9308      	str	r3, [sp, #32]
 8028afe:	0e1b      	lsrs	r3, r3, #24
 8028b00:	9311      	str	r3, [sp, #68]	@ 0x44
 8028b02:	f8dc 3004 	ldr.w	r3, [ip, #4]
 8028b06:	930d      	str	r3, [sp, #52]	@ 0x34
 8028b08:	0e1b      	lsrs	r3, r3, #24
 8028b0a:	9314      	str	r3, [sp, #80]	@ 0x50
 8028b0c:	b280      	uxth	r0, r0
 8028b0e:	9d11      	ldr	r5, [sp, #68]	@ 0x44
 8028b10:	b289      	uxth	r1, r1
 8028b12:	fb00 f901 	mul.w	r9, r0, r1
 8028b16:	0100      	lsls	r0, r0, #4
 8028b18:	ebc9 1101 	rsb	r1, r9, r1, lsl #4
 8028b1c:	eba0 0809 	sub.w	r8, r0, r9
 8028b20:	f5c0 7380 	rsb	r3, r0, #256	@ 0x100
 8028b24:	9813      	ldr	r0, [sp, #76]	@ 0x4c
 8028b26:	b289      	uxth	r1, r1
 8028b28:	fa1f f888 	uxth.w	r8, r8
 8028b2c:	1a5b      	subs	r3, r3, r1
 8028b2e:	fb08 f000 	mul.w	r0, r8, r0
 8028b32:	b29b      	uxth	r3, r3
 8028b34:	fb03 000e 	mla	r0, r3, lr, r0
 8028b38:	fb01 0005 	mla	r0, r1, r5, r0
 8028b3c:	9d14      	ldr	r5, [sp, #80]	@ 0x50
 8028b3e:	fb09 0005 	mla	r0, r9, r5, r0
 8028b42:	f3c0 2007 	ubfx	r0, r0, #8, #8
 8028b46:	2800      	cmp	r0, #0
 8028b48:	f000 80fa 	beq.w	8028d40 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x374>
 8028b4c:	f1be 0fff 	cmp.w	lr, #255	@ 0xff
 8028b50:	d01b      	beq.n	8028b8a <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1be>
 8028b52:	f002 1aff 	and.w	sl, r2, #16711935	@ 0xff00ff
 8028b56:	f402 427f 	and.w	r2, r2, #65280	@ 0xff00
 8028b5a:	fb0e fa0a 	mul.w	sl, lr, sl
 8028b5e:	fb0e fe02 	mul.w	lr, lr, r2
 8028b62:	ea4f 221a 	mov.w	r2, sl, lsr #8
 8028b66:	f10a 1a01 	add.w	sl, sl, #65537	@ 0x10001
 8028b6a:	f50e 7c80 	add.w	ip, lr, #256	@ 0x100
 8028b6e:	f002 12ff 	and.w	r2, r2, #16711935	@ 0xff00ff
 8028b72:	eb0c 2c1e 	add.w	ip, ip, lr, lsr #8
 8028b76:	4452      	add	r2, sl
 8028b78:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 8028b7c:	0a12      	lsrs	r2, r2, #8
 8028b7e:	f40c 4c7f 	and.w	ip, ip, #65280	@ 0xff00
 8028b82:	f002 12ff 	and.w	r2, r2, #16711935	@ 0xff00ff
 8028b86:	ea42 020c 	orr.w	r2, r2, ip
 8028b8a:	9d13      	ldr	r5, [sp, #76]	@ 0x4c
 8028b8c:	2dff      	cmp	r5, #255	@ 0xff
 8028b8e:	d021      	beq.n	8028bd4 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x208>
 8028b90:	9d0c      	ldr	r5, [sp, #48]	@ 0x30
 8028b92:	f005 1bff 	and.w	fp, r5, #16711935	@ 0xff00ff
 8028b96:	9d13      	ldr	r5, [sp, #76]	@ 0x4c
 8028b98:	fb05 fb0b 	mul.w	fp, r5, fp
 8028b9c:	9d0c      	ldr	r5, [sp, #48]	@ 0x30
 8028b9e:	f405 4a7f 	and.w	sl, r5, #65280	@ 0xff00
 8028ba2:	9d13      	ldr	r5, [sp, #76]	@ 0x4c
 8028ba4:	ea4f 2e1b 	mov.w	lr, fp, lsr #8
 8028ba8:	f10b 1b01 	add.w	fp, fp, #65537	@ 0x10001
 8028bac:	fb05 fa0a 	mul.w	sl, r5, sl
 8028bb0:	f00e 1eff 	and.w	lr, lr, #16711935	@ 0xff00ff
 8028bb4:	f50a 7c80 	add.w	ip, sl, #256	@ 0x100
 8028bb8:	44de      	add	lr, fp
 8028bba:	eb0c 2a1a 	add.w	sl, ip, sl, lsr #8
 8028bbe:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 8028bc2:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 8028bc6:	f00e 1eff 	and.w	lr, lr, #16711935	@ 0xff00ff
 8028bca:	f40a 4a7f 	and.w	sl, sl, #65280	@ 0xff00
 8028bce:	ea4e 050a 	orr.w	r5, lr, sl
 8028bd2:	950c      	str	r5, [sp, #48]	@ 0x30
 8028bd4:	9d11      	ldr	r5, [sp, #68]	@ 0x44
 8028bd6:	2dff      	cmp	r5, #255	@ 0xff
 8028bd8:	d021      	beq.n	8028c1e <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x252>
 8028bda:	9d08      	ldr	r5, [sp, #32]
 8028bdc:	f005 1bff 	and.w	fp, r5, #16711935	@ 0xff00ff
 8028be0:	9d11      	ldr	r5, [sp, #68]	@ 0x44
 8028be2:	fb05 fb0b 	mul.w	fp, r5, fp
 8028be6:	9d08      	ldr	r5, [sp, #32]
 8028be8:	f405 4a7f 	and.w	sl, r5, #65280	@ 0xff00
 8028bec:	9d11      	ldr	r5, [sp, #68]	@ 0x44
 8028bee:	ea4f 2e1b 	mov.w	lr, fp, lsr #8
 8028bf2:	f10b 1b01 	add.w	fp, fp, #65537	@ 0x10001
 8028bf6:	fb05 fa0a 	mul.w	sl, r5, sl
 8028bfa:	f00e 1eff 	and.w	lr, lr, #16711935	@ 0xff00ff
 8028bfe:	f50a 7c80 	add.w	ip, sl, #256	@ 0x100
 8028c02:	44de      	add	lr, fp
 8028c04:	eb0c 2a1a 	add.w	sl, ip, sl, lsr #8
 8028c08:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 8028c0c:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 8028c10:	f00e 1eff 	and.w	lr, lr, #16711935	@ 0xff00ff
 8028c14:	f40a 4a7f 	and.w	sl, sl, #65280	@ 0xff00
 8028c18:	ea4e 050a 	orr.w	r5, lr, sl
 8028c1c:	9508      	str	r5, [sp, #32]
 8028c1e:	9d14      	ldr	r5, [sp, #80]	@ 0x50
 8028c20:	2dff      	cmp	r5, #255	@ 0xff
 8028c22:	d021      	beq.n	8028c68 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x29c>
 8028c24:	9d0d      	ldr	r5, [sp, #52]	@ 0x34
 8028c26:	f005 1bff 	and.w	fp, r5, #16711935	@ 0xff00ff
 8028c2a:	9d14      	ldr	r5, [sp, #80]	@ 0x50
 8028c2c:	fb05 fb0b 	mul.w	fp, r5, fp
 8028c30:	9d0d      	ldr	r5, [sp, #52]	@ 0x34
 8028c32:	f405 4a7f 	and.w	sl, r5, #65280	@ 0xff00
 8028c36:	9d14      	ldr	r5, [sp, #80]	@ 0x50
 8028c38:	ea4f 2e1b 	mov.w	lr, fp, lsr #8
 8028c3c:	f10b 1b01 	add.w	fp, fp, #65537	@ 0x10001
 8028c40:	fb05 fa0a 	mul.w	sl, r5, sl
 8028c44:	f00e 1eff 	and.w	lr, lr, #16711935	@ 0xff00ff
 8028c48:	f50a 7c80 	add.w	ip, sl, #256	@ 0x100
 8028c4c:	44de      	add	lr, fp
 8028c4e:	eb0c 2a1a 	add.w	sl, ip, sl, lsr #8
 8028c52:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 8028c56:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 8028c5a:	f00e 1eff 	and.w	lr, lr, #16711935	@ 0xff00ff
 8028c5e:	f40a 4a7f 	and.w	sl, sl, #65280	@ 0xff00
 8028c62:	ea4e 050a 	orr.w	r5, lr, sl
 8028c66:	950d      	str	r5, [sp, #52]	@ 0x34
 8028c68:	9d0c      	ldr	r5, [sp, #48]	@ 0x30
 8028c6a:	f002 1eff 	and.w	lr, r2, #16711935	@ 0xff00ff
 8028c6e:	f402 427f 	and.w	r2, r2, #65280	@ 0xff00
 8028c72:	f005 1cff 	and.w	ip, r5, #16711935	@ 0xff00ff
 8028c76:	9d08      	ldr	r5, [sp, #32]
 8028c78:	fb08 fc0c 	mul.w	ip, r8, ip
 8028c7c:	fb03 cc0e 	mla	ip, r3, lr, ip
 8028c80:	f005 1eff 	and.w	lr, r5, #16711935	@ 0xff00ff
 8028c84:	9d0d      	ldr	r5, [sp, #52]	@ 0x34
 8028c86:	fb01 cc0e 	mla	ip, r1, lr, ip
 8028c8a:	f005 1eff 	and.w	lr, r5, #16711935	@ 0xff00ff
 8028c8e:	9d0c      	ldr	r5, [sp, #48]	@ 0x30
 8028c90:	fb09 cc0e 	mla	ip, r9, lr, ip
 8028c94:	f405 4e7f 	and.w	lr, r5, #65280	@ 0xff00
 8028c98:	9d0b      	ldr	r5, [sp, #44]	@ 0x2c
 8028c9a:	fb08 f80e 	mul.w	r8, r8, lr
 8028c9e:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 8028ca2:	fb03 8202 	mla	r2, r3, r2, r8
 8028ca6:	9b08      	ldr	r3, [sp, #32]
 8028ca8:	f00c 1cff 	and.w	ip, ip, #16711935	@ 0xff00ff
 8028cac:	f403 4a7f 	and.w	sl, r3, #65280	@ 0xff00
 8028cb0:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8028cb2:	fb01 220a 	mla	r2, r1, sl, r2
 8028cb6:	f403 417f 	and.w	r1, r3, #65280	@ 0xff00
 8028cba:	883b      	ldrh	r3, [r7, #0]
 8028cbc:	fb09 2901 	mla	r9, r9, r1, r2
 8028cc0:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 8028cc2:	1219      	asrs	r1, r3, #8
 8028cc4:	4342      	muls	r2, r0
 8028cc6:	ea4f 2919 	mov.w	r9, r9, lsr #8
 8028cca:	f001 01f8 	and.w	r1, r1, #248	@ 0xf8
 8028cce:	1c50      	adds	r0, r2, #1
 8028cd0:	f409 497f 	and.w	r9, r9, #65280	@ 0xff00
 8028cd4:	eb00 2012 	add.w	r0, r0, r2, lsr #8
 8028cd8:	ea4c 0c09 	orr.w	ip, ip, r9
 8028cdc:	ea6f 2010 	mvn.w	r0, r0, lsr #8
 8028ce0:	ea4f 421c 	mov.w	r2, ip, lsr #16
 8028ce4:	f3cc 2e07 	ubfx	lr, ip, #8, #8
 8028ce8:	fa5f fc8c 	uxtb.w	ip, ip
 8028cec:	fb12 f205 	smulbb	r2, r2, r5
 8028cf0:	b2c0      	uxtb	r0, r0
 8028cf2:	fb1c fc05 	smulbb	ip, ip, r5
 8028cf6:	fb01 2100 	mla	r1, r1, r0, r2
 8028cfa:	10da      	asrs	r2, r3, #3
 8028cfc:	fb1e fe05 	smulbb	lr, lr, r5
 8028d00:	00db      	lsls	r3, r3, #3
 8028d02:	b289      	uxth	r1, r1
 8028d04:	f002 02fc 	and.w	r2, r2, #252	@ 0xfc
 8028d08:	b2db      	uxtb	r3, r3
 8028d0a:	fb02 e200 	mla	r2, r2, r0, lr
 8028d0e:	fb03 c300 	mla	r3, r3, r0, ip
 8028d12:	b292      	uxth	r2, r2
 8028d14:	fa1f fc83 	uxth.w	ip, r3
 8028d18:	1c4b      	adds	r3, r1, #1
 8028d1a:	eb03 2111 	add.w	r1, r3, r1, lsr #8
 8028d1e:	f10c 0301 	add.w	r3, ip, #1
 8028d22:	eb03 231c 	add.w	r3, r3, ip, lsr #8
 8028d26:	f401 4178 	and.w	r1, r1, #63488	@ 0xf800
 8028d2a:	f3c3 23c4 	ubfx	r3, r3, #11, #5
 8028d2e:	430b      	orrs	r3, r1
 8028d30:	1c51      	adds	r1, r2, #1
 8028d32:	eb01 2212 	add.w	r2, r1, r2, lsr #8
 8028d36:	0952      	lsrs	r2, r2, #5
 8028d38:	f402 62fc 	and.w	r2, r2, #2016	@ 0x7e0
 8028d3c:	4313      	orrs	r3, r2
 8028d3e:	803b      	strh	r3, [r7, #0]
 8028d40:	9b31      	ldr	r3, [sp, #196]	@ 0xc4
 8028d42:	3702      	adds	r7, #2
 8028d44:	441c      	add	r4, r3
 8028d46:	9b32      	ldr	r3, [sp, #200]	@ 0xc8
 8028d48:	441e      	add	r6, r3
 8028d4a:	9b18      	ldr	r3, [sp, #96]	@ 0x60
 8028d4c:	3b01      	subs	r3, #1
 8028d4e:	9318      	str	r3, [sp, #96]	@ 0x60
 8028d50:	e698      	b.n	8028a84 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xb8>
 8028d52:	9b31      	ldr	r3, [sp, #196]	@ 0xc4
 8028d54:	441c      	add	r4, r3
 8028d56:	9b32      	ldr	r3, [sp, #200]	@ 0xc8
 8028d58:	441e      	add	r6, r3
 8028d5a:	9b07      	ldr	r3, [sp, #28]
 8028d5c:	3b01      	subs	r3, #1
 8028d5e:	9307      	str	r3, [sp, #28]
 8028d60:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8028d62:	3302      	adds	r3, #2
 8028d64:	930a      	str	r3, [sp, #40]	@ 0x28
 8028d66:	e66d      	b.n	8028a44 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x78>
 8028d68:	d023      	beq.n	8028db2 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3e6>
 8028d6a:	9b07      	ldr	r3, [sp, #28]
 8028d6c:	9831      	ldr	r0, [sp, #196]	@ 0xc4
 8028d6e:	3b01      	subs	r3, #1
 8028d70:	fb00 4003 	mla	r0, r0, r3, r4
 8028d74:	1400      	asrs	r0, r0, #16
 8028d76:	f53f ae82 	bmi.w	8028a7e <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xb2>
 8028d7a:	3901      	subs	r1, #1
 8028d7c:	4288      	cmp	r0, r1
 8028d7e:	f6bf ae7e 	bge.w	8028a7e <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xb2>
 8028d82:	9932      	ldr	r1, [sp, #200]	@ 0xc8
 8028d84:	fb01 6303 	mla	r3, r1, r3, r6
 8028d88:	141b      	asrs	r3, r3, #16
 8028d8a:	f53f ae78 	bmi.w	8028a7e <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xb2>
 8028d8e:	3a01      	subs	r2, #1
 8028d90:	4293      	cmp	r3, r2
 8028d92:	f6bf ae74 	bge.w	8028a7e <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xb2>
 8028d96:	f8dd b01c 	ldr.w	fp, [sp, #28]
 8028d9a:	f8dd 9028 	ldr.w	r9, [sp, #40]	@ 0x28
 8028d9e:	f1bb 0f00 	cmp.w	fp, #0
 8028da2:	dc6c      	bgt.n	8028e7e <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4b2>
 8028da4:	9b07      	ldr	r3, [sp, #28]
 8028da6:	ea23 75e3 	bic.w	r5, r3, r3, asr #31
 8028daa:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8028dac:	eb03 0345 	add.w	r3, r3, r5, lsl #1
 8028db0:	930a      	str	r3, [sp, #40]	@ 0x28
 8028db2:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 8028db4:	2b00      	cmp	r3, #0
 8028db6:	f340 81b3 	ble.w	8029120 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x754>
 8028dba:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8028dbe:	9b2e      	ldr	r3, [sp, #184]	@ 0xb8
 8028dc0:	ee3a aa2b 	vadd.f32	s20, s20, s23
 8028dc4:	ee79 9a8b 	vadd.f32	s19, s19, s22
 8028dc8:	eef0 6a48 	vmov.f32	s13, s16
 8028dcc:	eec7 7a0a 	vdiv.f32	s15, s14, s20
 8028dd0:	ee39 9a2a 	vadd.f32	s18, s18, s21
 8028dd4:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 8028dd8:	ee16 4a90 	vmov	r4, s13
 8028ddc:	eef0 6a68 	vmov.f32	s13, s17
 8028de0:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 8028de4:	ee16 6a90 	vmov	r6, s13
 8028de8:	ee29 7aa7 	vmul.f32	s14, s19, s15
 8028dec:	ee69 7a27 	vmul.f32	s15, s18, s15
 8028df0:	ee37 8a48 	vsub.f32	s16, s14, s16
 8028df4:	ee77 8ae8 	vsub.f32	s17, s15, s17
 8028df8:	eebe 8ac8 	vcvt.s32.f32	s16, s16, #16
 8028dfc:	eefe 8ac8 	vcvt.s32.f32	s17, s17, #16
 8028e00:	ee18 2a10 	vmov	r2, s16
 8028e04:	eeb0 8a47 	vmov.f32	s16, s14
 8028e08:	fb92 f3f3 	sdiv	r3, r2, r3
 8028e0c:	ee18 2a90 	vmov	r2, s17
 8028e10:	9331      	str	r3, [sp, #196]	@ 0xc4
 8028e12:	9b2e      	ldr	r3, [sp, #184]	@ 0xb8
 8028e14:	eef0 8a67 	vmov.f32	s17, s15
 8028e18:	fb92 f3f3 	sdiv	r3, r2, r3
 8028e1c:	9332      	str	r3, [sp, #200]	@ 0xc8
 8028e1e:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 8028e20:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 8028e22:	3b01      	subs	r3, #1
 8028e24:	9317      	str	r3, [sp, #92]	@ 0x5c
 8028e26:	9b2e      	ldr	r3, [sp, #184]	@ 0xb8
 8028e28:	bf08      	it	eq
 8028e2a:	4613      	moveq	r3, r2
 8028e2c:	9307      	str	r3, [sp, #28]
 8028e2e:	e5fb      	b.n	8028a28 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5c>
 8028e30:	2900      	cmp	r1, #0
 8028e32:	f43f ae6b 	beq.w	8028b0c <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x140>
 8028e36:	f858 3023 	ldr.w	r3, [r8, r3, lsl #2]
 8028e3a:	9308      	str	r3, [sp, #32]
 8028e3c:	0e1b      	lsrs	r3, r3, #24
 8028e3e:	9311      	str	r3, [sp, #68]	@ 0x44
 8028e40:	e664      	b.n	8028b0c <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x140>
 8028e42:	f112 0801 	adds.w	r8, r2, #1
 8028e46:	f53f af7b 	bmi.w	8028d40 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x374>
 8028e4a:	4543      	cmp	r3, r8
 8028e4c:	f6ff af78 	blt.w	8028d40 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x374>
 8028e50:	f11c 0801 	adds.w	r8, ip, #1
 8028e54:	f53f af74 	bmi.w	8028d40 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x374>
 8028e58:	45c6      	cmp	lr, r8
 8028e5a:	f6ff af71 	blt.w	8028d40 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x374>
 8028e5e:	9d1a      	ldr	r5, [sp, #104]	@ 0x68
 8028e60:	b21b      	sxth	r3, r3
 8028e62:	9201      	str	r2, [sp, #4]
 8028e64:	fa0f f28e 	sxth.w	r2, lr
 8028e68:	e9cd 1504 	strd	r1, r5, [sp, #16]
 8028e6c:	e9cd c002 	strd	ip, r0, [sp, #8]
 8028e70:	9200      	str	r2, [sp, #0]
 8028e72:	4639      	mov	r1, r7
 8028e74:	9a10      	ldr	r2, [sp, #64]	@ 0x40
 8028e76:	981b      	ldr	r0, [sp, #108]	@ 0x6c
 8028e78:	f7ff fc48 	bl	802870c <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh>
 8028e7c:	e760      	b.n	8028d40 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x374>
 8028e7e:	9b36      	ldr	r3, [sp, #216]	@ 0xd8
 8028e80:	1427      	asrs	r7, r4, #16
 8028e82:	9d10      	ldr	r5, [sp, #64]	@ 0x40
 8028e84:	f3c4 3203 	ubfx	r2, r4, #12, #4
 8028e88:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 8028e8c:	1433      	asrs	r3, r6, #16
 8028e8e:	f3c6 3003 	ubfx	r0, r6, #12, #4
 8028e92:	fb01 7303 	mla	r3, r1, r3, r7
 8028e96:	eb05 0783 	add.w	r7, r5, r3, lsl #2
 8028e9a:	f855 3023 	ldr.w	r3, [r5, r3, lsl #2]
 8028e9e:	ea4f 6c13 	mov.w	ip, r3, lsr #24
 8028ea2:	2a00      	cmp	r2, #0
 8028ea4:	f000 8133 	beq.w	802910e <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x742>
 8028ea8:	687d      	ldr	r5, [r7, #4]
 8028eaa:	950e      	str	r5, [sp, #56]	@ 0x38
 8028eac:	0e2d      	lsrs	r5, r5, #24
 8028eae:	9515      	str	r5, [sp, #84]	@ 0x54
 8028eb0:	b178      	cbz	r0, 8028ed2 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x506>
 8028eb2:	f101 4180 	add.w	r1, r1, #1073741824	@ 0x40000000
 8028eb6:	3901      	subs	r1, #1
 8028eb8:	0089      	lsls	r1, r1, #2
 8028eba:	3104      	adds	r1, #4
 8028ebc:	eb07 0e01 	add.w	lr, r7, r1
 8028ec0:	5879      	ldr	r1, [r7, r1]
 8028ec2:	9109      	str	r1, [sp, #36]	@ 0x24
 8028ec4:	0e09      	lsrs	r1, r1, #24
 8028ec6:	9112      	str	r1, [sp, #72]	@ 0x48
 8028ec8:	f8de 1004 	ldr.w	r1, [lr, #4]
 8028ecc:	910f      	str	r1, [sp, #60]	@ 0x3c
 8028ece:	0e09      	lsrs	r1, r1, #24
 8028ed0:	9116      	str	r1, [sp, #88]	@ 0x58
 8028ed2:	b292      	uxth	r2, r2
 8028ed4:	9915      	ldr	r1, [sp, #84]	@ 0x54
 8028ed6:	b280      	uxth	r0, r0
 8028ed8:	9d12      	ldr	r5, [sp, #72]	@ 0x48
 8028eda:	fb02 f800 	mul.w	r8, r2, r0
 8028ede:	0112      	lsls	r2, r2, #4
 8028ee0:	ebc8 1000 	rsb	r0, r8, r0, lsl #4
 8028ee4:	eba2 0e08 	sub.w	lr, r2, r8
 8028ee8:	f5c2 7280 	rsb	r2, r2, #256	@ 0x100
 8028eec:	b280      	uxth	r0, r0
 8028eee:	fa1f fe8e 	uxth.w	lr, lr
 8028ef2:	1a12      	subs	r2, r2, r0
 8028ef4:	fb0e f101 	mul.w	r1, lr, r1
 8028ef8:	b292      	uxth	r2, r2
 8028efa:	fb02 110c 	mla	r1, r2, ip, r1
 8028efe:	fb00 1105 	mla	r1, r0, r5, r1
 8028f02:	9d16      	ldr	r5, [sp, #88]	@ 0x58
 8028f04:	fb08 1105 	mla	r1, r8, r5, r1
 8028f08:	f3c1 2107 	ubfx	r1, r1, #8, #8
 8028f0c:	2900      	cmp	r1, #0
 8028f0e:	f000 80f5 	beq.w	80290fc <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x730>
 8028f12:	f1bc 0fff 	cmp.w	ip, #255	@ 0xff
 8028f16:	d019      	beq.n	8028f4c <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x580>
 8028f18:	f003 1aff 	and.w	sl, r3, #16711935	@ 0xff00ff
 8028f1c:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 8028f20:	fb0c fa0a 	mul.w	sl, ip, sl
 8028f24:	fb0c fc03 	mul.w	ip, ip, r3
 8028f28:	ea4f 231a 	mov.w	r3, sl, lsr #8
 8028f2c:	f10a 1a01 	add.w	sl, sl, #65537	@ 0x10001
 8028f30:	f50c 7780 	add.w	r7, ip, #256	@ 0x100
 8028f34:	f003 13ff 	and.w	r3, r3, #16711935	@ 0xff00ff
 8028f38:	eb07 271c 	add.w	r7, r7, ip, lsr #8
 8028f3c:	4453      	add	r3, sl
 8028f3e:	0a3f      	lsrs	r7, r7, #8
 8028f40:	0a1b      	lsrs	r3, r3, #8
 8028f42:	f407 477f 	and.w	r7, r7, #65280	@ 0xff00
 8028f46:	f003 13ff 	and.w	r3, r3, #16711935	@ 0xff00ff
 8028f4a:	433b      	orrs	r3, r7
 8028f4c:	9d15      	ldr	r5, [sp, #84]	@ 0x54
 8028f4e:	2dff      	cmp	r5, #255	@ 0xff
 8028f50:	d020      	beq.n	8028f94 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5c8>
 8028f52:	9d0e      	ldr	r5, [sp, #56]	@ 0x38
 8028f54:	f005 17ff 	and.w	r7, r5, #16711935	@ 0xff00ff
 8028f58:	9d15      	ldr	r5, [sp, #84]	@ 0x54
 8028f5a:	436f      	muls	r7, r5
 8028f5c:	9d0e      	ldr	r5, [sp, #56]	@ 0x38
 8028f5e:	ea4f 2c17 	mov.w	ip, r7, lsr #8
 8028f62:	f405 4a7f 	and.w	sl, r5, #65280	@ 0xff00
 8028f66:	9d15      	ldr	r5, [sp, #84]	@ 0x54
 8028f68:	f107 1701 	add.w	r7, r7, #65537	@ 0x10001
 8028f6c:	f00c 1cff 	and.w	ip, ip, #16711935	@ 0xff00ff
 8028f70:	fb05 fa0a 	mul.w	sl, r5, sl
 8028f74:	44bc      	add	ip, r7
 8028f76:	f50a 7780 	add.w	r7, sl, #256	@ 0x100
 8028f7a:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 8028f7e:	eb07 2a1a 	add.w	sl, r7, sl, lsr #8
 8028f82:	f00c 1cff 	and.w	ip, ip, #16711935	@ 0xff00ff
 8028f86:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 8028f8a:	f40a 4a7f 	and.w	sl, sl, #65280	@ 0xff00
 8028f8e:	ea4c 050a 	orr.w	r5, ip, sl
 8028f92:	950e      	str	r5, [sp, #56]	@ 0x38
 8028f94:	9d12      	ldr	r5, [sp, #72]	@ 0x48
 8028f96:	2dff      	cmp	r5, #255	@ 0xff
 8028f98:	d020      	beq.n	8028fdc <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x610>
 8028f9a:	9d09      	ldr	r5, [sp, #36]	@ 0x24
 8028f9c:	f005 17ff 	and.w	r7, r5, #16711935	@ 0xff00ff
 8028fa0:	9d12      	ldr	r5, [sp, #72]	@ 0x48
 8028fa2:	436f      	muls	r7, r5
 8028fa4:	9d09      	ldr	r5, [sp, #36]	@ 0x24
 8028fa6:	ea4f 2c17 	mov.w	ip, r7, lsr #8
 8028faa:	f405 4a7f 	and.w	sl, r5, #65280	@ 0xff00
 8028fae:	9d12      	ldr	r5, [sp, #72]	@ 0x48
 8028fb0:	f107 1701 	add.w	r7, r7, #65537	@ 0x10001
 8028fb4:	f00c 1cff 	and.w	ip, ip, #16711935	@ 0xff00ff
 8028fb8:	fb05 fa0a 	mul.w	sl, r5, sl
 8028fbc:	44bc      	add	ip, r7
 8028fbe:	f50a 7780 	add.w	r7, sl, #256	@ 0x100
 8028fc2:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 8028fc6:	eb07 2a1a 	add.w	sl, r7, sl, lsr #8
 8028fca:	f00c 1cff 	and.w	ip, ip, #16711935	@ 0xff00ff
 8028fce:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 8028fd2:	f40a 4a7f 	and.w	sl, sl, #65280	@ 0xff00
 8028fd6:	ea4c 050a 	orr.w	r5, ip, sl
 8028fda:	9509      	str	r5, [sp, #36]	@ 0x24
 8028fdc:	9d16      	ldr	r5, [sp, #88]	@ 0x58
 8028fde:	2dff      	cmp	r5, #255	@ 0xff
 8028fe0:	d020      	beq.n	8029024 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x658>
 8028fe2:	9d0f      	ldr	r5, [sp, #60]	@ 0x3c
 8028fe4:	f005 17ff 	and.w	r7, r5, #16711935	@ 0xff00ff
 8028fe8:	9d16      	ldr	r5, [sp, #88]	@ 0x58
 8028fea:	436f      	muls	r7, r5
 8028fec:	9d0f      	ldr	r5, [sp, #60]	@ 0x3c
 8028fee:	ea4f 2c17 	mov.w	ip, r7, lsr #8
 8028ff2:	f405 4a7f 	and.w	sl, r5, #65280	@ 0xff00
 8028ff6:	9d16      	ldr	r5, [sp, #88]	@ 0x58
 8028ff8:	f107 1701 	add.w	r7, r7, #65537	@ 0x10001
 8028ffc:	f00c 1cff 	and.w	ip, ip, #16711935	@ 0xff00ff
 8029000:	fb05 fa0a 	mul.w	sl, r5, sl
 8029004:	44bc      	add	ip, r7
 8029006:	f50a 7780 	add.w	r7, sl, #256	@ 0x100
 802900a:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 802900e:	eb07 2a1a 	add.w	sl, r7, sl, lsr #8
 8029012:	f00c 1cff 	and.w	ip, ip, #16711935	@ 0xff00ff
 8029016:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 802901a:	f40a 4a7f 	and.w	sl, sl, #65280	@ 0xff00
 802901e:	ea4c 050a 	orr.w	r5, ip, sl
 8029022:	950f      	str	r5, [sp, #60]	@ 0x3c
 8029024:	9d0e      	ldr	r5, [sp, #56]	@ 0x38
 8029026:	f003 1cff 	and.w	ip, r3, #16711935	@ 0xff00ff
 802902a:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 802902e:	f005 17ff 	and.w	r7, r5, #16711935	@ 0xff00ff
 8029032:	9d09      	ldr	r5, [sp, #36]	@ 0x24
 8029034:	fb0e f707 	mul.w	r7, lr, r7
 8029038:	fb02 770c 	mla	r7, r2, ip, r7
 802903c:	f005 1cff 	and.w	ip, r5, #16711935	@ 0xff00ff
 8029040:	9d0f      	ldr	r5, [sp, #60]	@ 0x3c
 8029042:	fb00 770c 	mla	r7, r0, ip, r7
 8029046:	f005 1cff 	and.w	ip, r5, #16711935	@ 0xff00ff
 802904a:	9d0e      	ldr	r5, [sp, #56]	@ 0x38
 802904c:	fb08 770c 	mla	r7, r8, ip, r7
 8029050:	f405 4c7f 	and.w	ip, r5, #65280	@ 0xff00
 8029054:	9d0b      	ldr	r5, [sp, #44]	@ 0x2c
 8029056:	fb0e fe0c 	mul.w	lr, lr, ip
 802905a:	0a3f      	lsrs	r7, r7, #8
 802905c:	fb02 e303 	mla	r3, r2, r3, lr
 8029060:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8029062:	f007 17ff 	and.w	r7, r7, #16711935	@ 0xff00ff
 8029066:	f402 4a7f 	and.w	sl, r2, #65280	@ 0xff00
 802906a:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 802906c:	fb00 330a 	mla	r3, r0, sl, r3
 8029070:	f402 4c7f 	and.w	ip, r2, #65280	@ 0xff00
 8029074:	f8b9 0000 	ldrh.w	r0, [r9]
 8029078:	fb08 3c0c 	mla	ip, r8, ip, r3
 802907c:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 802907e:	1202      	asrs	r2, r0, #8
 8029080:	4359      	muls	r1, r3
 8029082:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 8029086:	f002 02f8 	and.w	r2, r2, #248	@ 0xf8
 802908a:	f40c 4c7f 	and.w	ip, ip, #65280	@ 0xff00
 802908e:	1c4b      	adds	r3, r1, #1
 8029090:	ea47 070c 	orr.w	r7, r7, ip
 8029094:	eb03 2111 	add.w	r1, r3, r1, lsr #8
 8029098:	0c3b      	lsrs	r3, r7, #16
 802909a:	ea6f 2111 	mvn.w	r1, r1, lsr #8
 802909e:	f3c7 2c07 	ubfx	ip, r7, #8, #8
 80290a2:	b2ff      	uxtb	r7, r7
 80290a4:	fb13 f305 	smulbb	r3, r3, r5
 80290a8:	b2c9      	uxtb	r1, r1
 80290aa:	fb17 f705 	smulbb	r7, r7, r5
 80290ae:	fb02 3201 	mla	r2, r2, r1, r3
 80290b2:	10c3      	asrs	r3, r0, #3
 80290b4:	fb1c fc05 	smulbb	ip, ip, r5
 80290b8:	00c0      	lsls	r0, r0, #3
 80290ba:	b292      	uxth	r2, r2
 80290bc:	f003 03fc 	and.w	r3, r3, #252	@ 0xfc
 80290c0:	b2c0      	uxtb	r0, r0
 80290c2:	fb03 c301 	mla	r3, r3, r1, ip
 80290c6:	fb00 7001 	mla	r0, r0, r1, r7
 80290ca:	1c51      	adds	r1, r2, #1
 80290cc:	b29b      	uxth	r3, r3
 80290ce:	b280      	uxth	r0, r0
 80290d0:	eb01 2212 	add.w	r2, r1, r2, lsr #8
 80290d4:	f100 0c01 	add.w	ip, r0, #1
 80290d8:	f402 4278 	and.w	r2, r2, #63488	@ 0xf800
 80290dc:	eb0c 2c10 	add.w	ip, ip, r0, lsr #8
 80290e0:	f3cc 2cc4 	ubfx	ip, ip, #11, #5
 80290e4:	ea4c 0202 	orr.w	r2, ip, r2
 80290e8:	f103 0c01 	add.w	ip, r3, #1
 80290ec:	eb0c 2313 	add.w	r3, ip, r3, lsr #8
 80290f0:	095b      	lsrs	r3, r3, #5
 80290f2:	f403 63fc 	and.w	r3, r3, #2016	@ 0x7e0
 80290f6:	431a      	orrs	r2, r3
 80290f8:	f8a9 2000 	strh.w	r2, [r9]
 80290fc:	9b31      	ldr	r3, [sp, #196]	@ 0xc4
 80290fe:	f109 0902 	add.w	r9, r9, #2
 8029102:	f10b 3bff 	add.w	fp, fp, #4294967295
 8029106:	441c      	add	r4, r3
 8029108:	9b32      	ldr	r3, [sp, #200]	@ 0xc8
 802910a:	441e      	add	r6, r3
 802910c:	e647      	b.n	8028d9e <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3d2>
 802910e:	2800      	cmp	r0, #0
 8029110:	f43f aedf 	beq.w	8028ed2 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x506>
 8029114:	f857 1021 	ldr.w	r1, [r7, r1, lsl #2]
 8029118:	9109      	str	r1, [sp, #36]	@ 0x24
 802911a:	0e09      	lsrs	r1, r1, #24
 802911c:	9112      	str	r1, [sp, #72]	@ 0x48
 802911e:	e6d8      	b.n	8028ed2 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x506>
 8029120:	b01d      	add	sp, #116	@ 0x74
 8029122:	ecbd 8b08 	vpop	{d8-d11}
 8029126:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	...

0802912c <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh>:
 802912c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8029130:	e9dd 540d 	ldrd	r5, r4, [sp, #52]	@ 0x34
 8029134:	f9bd e030 	ldrsh.w	lr, [sp, #48]	@ 0x30
 8029138:	fb04 5603 	mla	r6, r4, r3, r5
 802913c:	2c00      	cmp	r4, #0
 802913e:	f89d 003c 	ldrb.w	r0, [sp, #60]	@ 0x3c
 8029142:	f89d 7040 	ldrb.w	r7, [sp, #64]	@ 0x40
 8029146:	eb02 0c86 	add.w	ip, r2, r6, lsl #2
 802914a:	db37      	blt.n	80291bc <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0x90>
 802914c:	45a6      	cmp	lr, r4
 802914e:	dd35      	ble.n	80291bc <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0x90>
 8029150:	2d00      	cmp	r5, #0
 8029152:	db31      	blt.n	80291b8 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0x8c>
 8029154:	42ab      	cmp	r3, r5
 8029156:	dd2f      	ble.n	80291b8 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0x8c>
 8029158:	f852 2026 	ldr.w	r2, [r2, r6, lsl #2]
 802915c:	1c6e      	adds	r6, r5, #1
 802915e:	d430      	bmi.n	80291c2 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0x96>
 8029160:	42b3      	cmp	r3, r6
 8029162:	dd2e      	ble.n	80291c2 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0x96>
 8029164:	b378      	cbz	r0, 80291c6 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0x9a>
 8029166:	f8dc 6004 	ldr.w	r6, [ip, #4]
 802916a:	3401      	adds	r4, #1
 802916c:	d42f      	bmi.n	80291ce <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0xa2>
 802916e:	45a6      	cmp	lr, r4
 8029170:	dd2d      	ble.n	80291ce <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0xa2>
 8029172:	b37f      	cbz	r7, 80291d4 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0xa8>
 8029174:	2d00      	cmp	r5, #0
 8029176:	eb0c 0e83 	add.w	lr, ip, r3, lsl #2
 802917a:	db26      	blt.n	80291ca <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0x9e>
 802917c:	42ab      	cmp	r3, r5
 802917e:	dd24      	ble.n	80291ca <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0x9e>
 8029180:	f85c 4023 	ldr.w	r4, [ip, r3, lsl #2]
 8029184:	3501      	adds	r5, #1
 8029186:	d428      	bmi.n	80291da <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0xae>
 8029188:	42ab      	cmp	r3, r5
 802918a:	dd26      	ble.n	80291da <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0xae>
 802918c:	b338      	cbz	r0, 80291de <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0xb2>
 802918e:	f8de 3004 	ldr.w	r3, [lr, #4]
 8029192:	280f      	cmp	r0, #15
 8029194:	ea4f 6b12 	mov.w	fp, r2, lsr #24
 8029198:	ea4f 6a16 	mov.w	sl, r6, lsr #24
 802919c:	ea4f 6914 	mov.w	r9, r4, lsr #24
 80291a0:	ea4f 6813 	mov.w	r8, r3, lsr #24
 80291a4:	d801      	bhi.n	80291aa <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0x7e>
 80291a6:	2f0f      	cmp	r7, #15
 80291a8:	d91b      	bls.n	80291e2 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0xb6>
 80291aa:	4b87      	ldr	r3, [pc, #540]	@ (80293c8 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0x29c>)
 80291ac:	f44f 71fb 	mov.w	r1, #502	@ 0x1f6
 80291b0:	4a86      	ldr	r2, [pc, #536]	@ (80293cc <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0x2a0>)
 80291b2:	4887      	ldr	r0, [pc, #540]	@ (80293d0 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0x2a4>)
 80291b4:	f001 fd46 	bl	802ac44 <__assert_func>
 80291b8:	2200      	movs	r2, #0
 80291ba:	e7cf      	b.n	802915c <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0x30>
 80291bc:	2600      	movs	r6, #0
 80291be:	4632      	mov	r2, r6
 80291c0:	e7d3      	b.n	802916a <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0x3e>
 80291c2:	2600      	movs	r6, #0
 80291c4:	e7d1      	b.n	802916a <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0x3e>
 80291c6:	4606      	mov	r6, r0
 80291c8:	e7cf      	b.n	802916a <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0x3e>
 80291ca:	2400      	movs	r4, #0
 80291cc:	e7da      	b.n	8029184 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0x58>
 80291ce:	2300      	movs	r3, #0
 80291d0:	461c      	mov	r4, r3
 80291d2:	e7de      	b.n	8029192 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0x66>
 80291d4:	463b      	mov	r3, r7
 80291d6:	463c      	mov	r4, r7
 80291d8:	e7db      	b.n	8029192 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0x66>
 80291da:	2300      	movs	r3, #0
 80291dc:	e7d9      	b.n	8029192 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0x66>
 80291de:	4603      	mov	r3, r0
 80291e0:	e7d7      	b.n	8029192 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0x66>
 80291e2:	b280      	uxth	r0, r0
 80291e4:	b2bf      	uxth	r7, r7
 80291e6:	fb07 fe00 	mul.w	lr, r7, r0
 80291ea:	0100      	lsls	r0, r0, #4
 80291ec:	ebce 1707 	rsb	r7, lr, r7, lsl #4
 80291f0:	eba0 0c0e 	sub.w	ip, r0, lr
 80291f4:	f5c0 7580 	rsb	r5, r0, #256	@ 0x100
 80291f8:	b2bf      	uxth	r7, r7
 80291fa:	fa1f fc8c 	uxth.w	ip, ip
 80291fe:	1bed      	subs	r5, r5, r7
 8029200:	fb0c f00a 	mul.w	r0, ip, sl
 8029204:	b2ad      	uxth	r5, r5
 8029206:	fb0b 0005 	mla	r0, fp, r5, r0
 802920a:	fb07 0009 	mla	r0, r7, r9, r0
 802920e:	fb0e 0008 	mla	r0, lr, r8, r0
 8029212:	f3c0 2007 	ubfx	r0, r0, #8, #8
 8029216:	9001      	str	r0, [sp, #4]
 8029218:	2800      	cmp	r0, #0
 802921a:	f000 80d1 	beq.w	80293c0 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0x294>
 802921e:	f1bb 0fff 	cmp.w	fp, #255	@ 0xff
 8029222:	d018      	beq.n	8029256 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0x12a>
 8029224:	f002 10ff 	and.w	r0, r2, #16711935	@ 0xff00ff
 8029228:	f402 427f 	and.w	r2, r2, #65280	@ 0xff00
 802922c:	fb0b f000 	mul.w	r0, fp, r0
 8029230:	fb0b fb02 	mul.w	fp, fp, r2
 8029234:	0a02      	lsrs	r2, r0, #8
 8029236:	f100 1001 	add.w	r0, r0, #65537	@ 0x10001
 802923a:	f002 12ff 	and.w	r2, r2, #16711935	@ 0xff00ff
 802923e:	4402      	add	r2, r0
 8029240:	f50b 7080 	add.w	r0, fp, #256	@ 0x100
 8029244:	eb00 201b 	add.w	r0, r0, fp, lsr #8
 8029248:	0a12      	lsrs	r2, r2, #8
 802924a:	0a00      	lsrs	r0, r0, #8
 802924c:	f002 12ff 	and.w	r2, r2, #16711935	@ 0xff00ff
 8029250:	f400 407f 	and.w	r0, r0, #65280	@ 0xff00
 8029254:	4302      	orrs	r2, r0
 8029256:	f1ba 0fff 	cmp.w	sl, #255	@ 0xff
 802925a:	d01a      	beq.n	8029292 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0x166>
 802925c:	f006 10ff 	and.w	r0, r6, #16711935	@ 0xff00ff
 8029260:	f406 467f 	and.w	r6, r6, #65280	@ 0xff00
 8029264:	fb0a f000 	mul.w	r0, sl, r0
 8029268:	fb0a fa06 	mul.w	sl, sl, r6
 802926c:	0a06      	lsrs	r6, r0, #8
 802926e:	f100 1001 	add.w	r0, r0, #65537	@ 0x10001
 8029272:	f006 16ff 	and.w	r6, r6, #16711935	@ 0xff00ff
 8029276:	4406      	add	r6, r0
 8029278:	f50a 7080 	add.w	r0, sl, #256	@ 0x100
 802927c:	eb00 2a1a 	add.w	sl, r0, sl, lsr #8
 8029280:	0a36      	lsrs	r6, r6, #8
 8029282:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 8029286:	f006 16ff 	and.w	r6, r6, #16711935	@ 0xff00ff
 802928a:	f40a 4a7f 	and.w	sl, sl, #65280	@ 0xff00
 802928e:	ea46 060a 	orr.w	r6, r6, sl
 8029292:	f1b9 0fff 	cmp.w	r9, #255	@ 0xff
 8029296:	d01b      	beq.n	80292d0 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0x1a4>
 8029298:	f004 1aff 	and.w	sl, r4, #16711935	@ 0xff00ff
 802929c:	f404 447f 	and.w	r4, r4, #65280	@ 0xff00
 80292a0:	fb09 fa0a 	mul.w	sl, r9, sl
 80292a4:	fb09 f004 	mul.w	r0, r9, r4
 80292a8:	ea4f 241a 	mov.w	r4, sl, lsr #8
 80292ac:	f10a 1a01 	add.w	sl, sl, #65537	@ 0x10001
 80292b0:	f500 7980 	add.w	r9, r0, #256	@ 0x100
 80292b4:	f004 14ff 	and.w	r4, r4, #16711935	@ 0xff00ff
 80292b8:	eb09 2910 	add.w	r9, r9, r0, lsr #8
 80292bc:	4454      	add	r4, sl
 80292be:	ea4f 2919 	mov.w	r9, r9, lsr #8
 80292c2:	0a24      	lsrs	r4, r4, #8
 80292c4:	f409 497f 	and.w	r9, r9, #65280	@ 0xff00
 80292c8:	f004 14ff 	and.w	r4, r4, #16711935	@ 0xff00ff
 80292cc:	ea44 0409 	orr.w	r4, r4, r9
 80292d0:	f1b8 0fff 	cmp.w	r8, #255	@ 0xff
 80292d4:	d01b      	beq.n	802930e <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0x1e2>
 80292d6:	f003 19ff 	and.w	r9, r3, #16711935	@ 0xff00ff
 80292da:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 80292de:	fb08 f909 	mul.w	r9, r8, r9
 80292e2:	fb08 f003 	mul.w	r0, r8, r3
 80292e6:	ea4f 2319 	mov.w	r3, r9, lsr #8
 80292ea:	f109 1901 	add.w	r9, r9, #65537	@ 0x10001
 80292ee:	f500 7880 	add.w	r8, r0, #256	@ 0x100
 80292f2:	f003 13ff 	and.w	r3, r3, #16711935	@ 0xff00ff
 80292f6:	eb08 2810 	add.w	r8, r8, r0, lsr #8
 80292fa:	444b      	add	r3, r9
 80292fc:	ea4f 2818 	mov.w	r8, r8, lsr #8
 8029300:	0a1b      	lsrs	r3, r3, #8
 8029302:	f408 487f 	and.w	r8, r8, #65280	@ 0xff00
 8029306:	f003 13ff 	and.w	r3, r3, #16711935	@ 0xff00ff
 802930a:	ea43 0308 	orr.w	r3, r3, r8
 802930e:	f006 18ff 	and.w	r8, r6, #16711935	@ 0xff00ff
 8029312:	f406 467f 	and.w	r6, r6, #65280	@ 0xff00
 8029316:	f002 19ff 	and.w	r9, r2, #16711935	@ 0xff00ff
 802931a:	f402 427f 	and.w	r2, r2, #65280	@ 0xff00
 802931e:	fb0c f808 	mul.w	r8, ip, r8
 8029322:	8808      	ldrh	r0, [r1, #0]
 8029324:	fb0c f606 	mul.w	r6, ip, r6
 8029328:	fb05 8909 	mla	r9, r5, r9, r8
 802932c:	f004 18ff 	and.w	r8, r4, #16711935	@ 0xff00ff
 8029330:	fb05 6502 	mla	r5, r5, r2, r6
 8029334:	f404 447f 	and.w	r4, r4, #65280	@ 0xff00
 8029338:	fb07 9908 	mla	r9, r7, r8, r9
 802933c:	f003 18ff 	and.w	r8, r3, #16711935	@ 0xff00ff
 8029340:	fb07 5704 	mla	r7, r7, r4, r5
 8029344:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 8029348:	fb0e 9808 	mla	r8, lr, r8, r9
 802934c:	10c4      	asrs	r4, r0, #3
 802934e:	fb0e 7e03 	mla	lr, lr, r3, r7
 8029352:	9b01      	ldr	r3, [sp, #4]
 8029354:	ea4f 2818 	mov.w	r8, r8, lsr #8
 8029358:	f004 04fc 	and.w	r4, r4, #252	@ 0xfc
 802935c:	43da      	mvns	r2, r3
 802935e:	1203      	asrs	r3, r0, #8
 8029360:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 8029364:	f008 18ff 	and.w	r8, r8, #16711935	@ 0xff00ff
 8029368:	b2d2      	uxtb	r2, r2
 802936a:	f003 03f8 	and.w	r3, r3, #248	@ 0xf8
 802936e:	00c0      	lsls	r0, r0, #3
 8029370:	f40e 4e7f 	and.w	lr, lr, #65280	@ 0xff00
 8029374:	4353      	muls	r3, r2
 8029376:	b2c0      	uxtb	r0, r0
 8029378:	ea48 0e0e 	orr.w	lr, r8, lr
 802937c:	4354      	muls	r4, r2
 802937e:	4350      	muls	r0, r2
 8029380:	1c5a      	adds	r2, r3, #1
 8029382:	eb02 2213 	add.w	r2, r2, r3, lsr #8
 8029386:	ea4f 431e 	mov.w	r3, lr, lsr #16
 802938a:	eb03 2312 	add.w	r3, r3, r2, lsr #8
 802938e:	1c62      	adds	r2, r4, #1
 8029390:	eb02 2414 	add.w	r4, r2, r4, lsr #8
 8029394:	ea4f 221e 	mov.w	r2, lr, lsr #8
 8029398:	021b      	lsls	r3, r3, #8
 802939a:	eb02 2214 	add.w	r2, r2, r4, lsr #8
 802939e:	f403 4378 	and.w	r3, r3, #63488	@ 0xf800
 80293a2:	00d2      	lsls	r2, r2, #3
 80293a4:	f402 62fc 	and.w	r2, r2, #2016	@ 0x7e0
 80293a8:	4313      	orrs	r3, r2
 80293aa:	1c42      	adds	r2, r0, #1
 80293ac:	eb02 2010 	add.w	r0, r2, r0, lsr #8
 80293b0:	eb0e 2e10 	add.w	lr, lr, r0, lsr #8
 80293b4:	f3ce 0ec4 	ubfx	lr, lr, #3, #5
 80293b8:	ea4e 0e03 	orr.w	lr, lr, r3
 80293bc:	f8a1 e000 	strh.w	lr, [r1]
 80293c0:	b003      	add	sp, #12
 80293c2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80293c6:	bf00      	nop
 80293c8:	0802fed5 	.word	0x0802fed5
 80293cc:	080304a2 	.word	0x080304a2
 80293d0:	0802ff59 	.word	0x0802ff59

080293d4 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 80293d4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80293d8:	ed2d 8b08 	vpush	{d8-d11}
 80293dc:	b09b      	sub	sp, #108	@ 0x6c
 80293de:	eeb0 aa40 	vmov.f32	s20, s0
 80293e2:	eef0 9a60 	vmov.f32	s19, s1
 80293e6:	9218      	str	r2, [sp, #96]	@ 0x60
 80293e8:	eeb0 9a41 	vmov.f32	s18, s2
 80293ec:	9a31      	ldr	r2, [sp, #196]	@ 0xc4
 80293ee:	eeb0 8a62 	vmov.f32	s16, s5
 80293f2:	9019      	str	r0, [sp, #100]	@ 0x64
 80293f4:	eef0 8a43 	vmov.f32	s17, s6
 80293f8:	6850      	ldr	r0, [r2, #4]
 80293fa:	eef0 ba44 	vmov.f32	s23, s8
 80293fe:	9116      	str	r1, [sp, #88]	@ 0x58
 8029400:	eeb0 ba64 	vmov.f32	s22, s9
 8029404:	9307      	str	r3, [sp, #28]
 8029406:	eef0 aa45 	vmov.f32	s21, s10
 802940a:	6812      	ldr	r2, [r2, #0]
 802940c:	e9dd 1332 	ldrd	r1, r3, [sp, #200]	@ 0xc8
 8029410:	e9dd 462d 	ldrd	r4, r6, [sp, #180]	@ 0xb4
 8029414:	fb00 1303 	mla	r3, r0, r3, r1
 8029418:	eb02 0343 	add.w	r3, r2, r3, lsl #1
 802941c:	930a      	str	r3, [sp, #40]	@ 0x28
 802941e:	9b34      	ldr	r3, [sp, #208]	@ 0xd0
 8029420:	681b      	ldr	r3, [r3, #0]
 8029422:	930f      	str	r3, [sp, #60]	@ 0x3c
 8029424:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 8029426:	2b00      	cmp	r3, #0
 8029428:	dc03      	bgt.n	8029432 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5e>
 802942a:	9b18      	ldr	r3, [sp, #96]	@ 0x60
 802942c:	2b00      	cmp	r3, #0
 802942e:	f340 8387 	ble.w	8029b40 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x76c>
 8029432:	9b34      	ldr	r3, [sp, #208]	@ 0xd0
 8029434:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 8029438:	f9b3 200c 	ldrsh.w	r2, [r3, #12]
 802943c:	1e48      	subs	r0, r1, #1
 802943e:	1e57      	subs	r7, r2, #1
 8029440:	9b07      	ldr	r3, [sp, #28]
 8029442:	2b00      	cmp	r3, #0
 8029444:	f340 8166 	ble.w	8029714 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x340>
 8029448:	ea5f 4c24 	movs.w	ip, r4, asr #16
 802944c:	ea4f 4326 	mov.w	r3, r6, asr #16
 8029450:	d406      	bmi.n	8029460 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8c>
 8029452:	4584      	cmp	ip, r0
 8029454:	da04      	bge.n	8029460 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8c>
 8029456:	2b00      	cmp	r3, #0
 8029458:	db02      	blt.n	8029460 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8c>
 802945a:	42bb      	cmp	r3, r7
 802945c:	f2c0 815b 	blt.w	8029716 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x342>
 8029460:	f11c 0c01 	adds.w	ip, ip, #1
 8029464:	f100 814b 	bmi.w	80296fe <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x32a>
 8029468:	4561      	cmp	r1, ip
 802946a:	f2c0 8148 	blt.w	80296fe <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x32a>
 802946e:	3301      	adds	r3, #1
 8029470:	f100 8145 	bmi.w	80296fe <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x32a>
 8029474:	429a      	cmp	r2, r3
 8029476:	f2c0 8142 	blt.w	80296fe <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x32a>
 802947a:	9b07      	ldr	r3, [sp, #28]
 802947c:	9f0a      	ldr	r7, [sp, #40]	@ 0x28
 802947e:	9317      	str	r3, [sp, #92]	@ 0x5c
 8029480:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 8029482:	2b00      	cmp	r3, #0
 8029484:	f340 8165 	ble.w	8029752 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x37e>
 8029488:	9a34      	ldr	r2, [sp, #208]	@ 0xd0
 802948a:	ea4f 4c26 	mov.w	ip, r6, asr #16
 802948e:	9b34      	ldr	r3, [sp, #208]	@ 0xd0
 8029490:	f3c4 3103 	ubfx	r1, r4, #12, #4
 8029494:	f8d2 e00c 	ldr.w	lr, [r2, #12]
 8029498:	1422      	asrs	r2, r4, #16
 802949a:	f3c6 3003 	ubfx	r0, r6, #12, #4
 802949e:	689b      	ldr	r3, [r3, #8]
 80294a0:	f100 81d5 	bmi.w	802984e <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x47a>
 80294a4:	f103 38ff 	add.w	r8, r3, #4294967295
 80294a8:	4542      	cmp	r2, r8
 80294aa:	f280 81d0 	bge.w	802984e <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x47a>
 80294ae:	f1bc 0f00 	cmp.w	ip, #0
 80294b2:	f2c0 81cc 	blt.w	802984e <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x47a>
 80294b6:	f10e 38ff 	add.w	r8, lr, #4294967295
 80294ba:	45c4      	cmp	ip, r8
 80294bc:	f280 81c7 	bge.w	802984e <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x47a>
 80294c0:	b21b      	sxth	r3, r3
 80294c2:	9d0f      	ldr	r5, [sp, #60]	@ 0x3c
 80294c4:	fb0c 2203 	mla	r2, ip, r3, r2
 80294c8:	eb05 0882 	add.w	r8, r5, r2, lsl #2
 80294cc:	f855 2022 	ldr.w	r2, [r5, r2, lsl #2]
 80294d0:	ea4f 6e12 	mov.w	lr, r2, lsr #24
 80294d4:	2900      	cmp	r1, #0
 80294d6:	f000 8182 	beq.w	80297de <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x40a>
 80294da:	f8d8 5004 	ldr.w	r5, [r8, #4]
 80294de:	950b      	str	r5, [sp, #44]	@ 0x2c
 80294e0:	0e2d      	lsrs	r5, r5, #24
 80294e2:	9512      	str	r5, [sp, #72]	@ 0x48
 80294e4:	b180      	cbz	r0, 8029508 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x134>
 80294e6:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 80294ea:	3b01      	subs	r3, #1
 80294ec:	009b      	lsls	r3, r3, #2
 80294ee:	3304      	adds	r3, #4
 80294f0:	eb08 0c03 	add.w	ip, r8, r3
 80294f4:	f858 3003 	ldr.w	r3, [r8, r3]
 80294f8:	9308      	str	r3, [sp, #32]
 80294fa:	0e1b      	lsrs	r3, r3, #24
 80294fc:	9310      	str	r3, [sp, #64]	@ 0x40
 80294fe:	f8dc 3004 	ldr.w	r3, [ip, #4]
 8029502:	930c      	str	r3, [sp, #48]	@ 0x30
 8029504:	0e1b      	lsrs	r3, r3, #24
 8029506:	9313      	str	r3, [sp, #76]	@ 0x4c
 8029508:	b289      	uxth	r1, r1
 802950a:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 802950c:	b280      	uxth	r0, r0
 802950e:	9d10      	ldr	r5, [sp, #64]	@ 0x40
 8029510:	fb01 f900 	mul.w	r9, r1, r0
 8029514:	0109      	lsls	r1, r1, #4
 8029516:	ebc9 1000 	rsb	r0, r9, r0, lsl #4
 802951a:	eba1 0809 	sub.w	r8, r1, r9
 802951e:	f5c1 7180 	rsb	r1, r1, #256	@ 0x100
 8029522:	b280      	uxth	r0, r0
 8029524:	fa1f f888 	uxth.w	r8, r8
 8029528:	1a09      	subs	r1, r1, r0
 802952a:	fb08 f303 	mul.w	r3, r8, r3
 802952e:	b289      	uxth	r1, r1
 8029530:	fb01 330e 	mla	r3, r1, lr, r3
 8029534:	fb00 3305 	mla	r3, r0, r5, r3
 8029538:	9d13      	ldr	r5, [sp, #76]	@ 0x4c
 802953a:	fb09 3305 	mla	r3, r9, r5, r3
 802953e:	f3c3 2307 	ubfx	r3, r3, #8, #8
 8029542:	2b00      	cmp	r3, #0
 8029544:	f000 80d2 	beq.w	80296ec <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x318>
 8029548:	f1be 0fff 	cmp.w	lr, #255	@ 0xff
 802954c:	d01b      	beq.n	8029586 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1b2>
 802954e:	f002 1aff 	and.w	sl, r2, #16711935	@ 0xff00ff
 8029552:	f402 427f 	and.w	r2, r2, #65280	@ 0xff00
 8029556:	fb0e fa0a 	mul.w	sl, lr, sl
 802955a:	fb0e fe02 	mul.w	lr, lr, r2
 802955e:	ea4f 221a 	mov.w	r2, sl, lsr #8
 8029562:	f10a 1a01 	add.w	sl, sl, #65537	@ 0x10001
 8029566:	f50e 7c80 	add.w	ip, lr, #256	@ 0x100
 802956a:	f002 12ff 	and.w	r2, r2, #16711935	@ 0xff00ff
 802956e:	eb0c 2c1e 	add.w	ip, ip, lr, lsr #8
 8029572:	4452      	add	r2, sl
 8029574:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 8029578:	0a12      	lsrs	r2, r2, #8
 802957a:	f40c 4c7f 	and.w	ip, ip, #65280	@ 0xff00
 802957e:	f002 12ff 	and.w	r2, r2, #16711935	@ 0xff00ff
 8029582:	ea42 020c 	orr.w	r2, r2, ip
 8029586:	9d12      	ldr	r5, [sp, #72]	@ 0x48
 8029588:	2dff      	cmp	r5, #255	@ 0xff
 802958a:	d021      	beq.n	80295d0 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1fc>
 802958c:	9d0b      	ldr	r5, [sp, #44]	@ 0x2c
 802958e:	f005 1bff 	and.w	fp, r5, #16711935	@ 0xff00ff
 8029592:	9d12      	ldr	r5, [sp, #72]	@ 0x48
 8029594:	fb05 fb0b 	mul.w	fp, r5, fp
 8029598:	9d0b      	ldr	r5, [sp, #44]	@ 0x2c
 802959a:	f405 4a7f 	and.w	sl, r5, #65280	@ 0xff00
 802959e:	9d12      	ldr	r5, [sp, #72]	@ 0x48
 80295a0:	ea4f 2e1b 	mov.w	lr, fp, lsr #8
 80295a4:	f10b 1b01 	add.w	fp, fp, #65537	@ 0x10001
 80295a8:	fb05 fa0a 	mul.w	sl, r5, sl
 80295ac:	f00e 1eff 	and.w	lr, lr, #16711935	@ 0xff00ff
 80295b0:	f50a 7c80 	add.w	ip, sl, #256	@ 0x100
 80295b4:	44de      	add	lr, fp
 80295b6:	eb0c 2a1a 	add.w	sl, ip, sl, lsr #8
 80295ba:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 80295be:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 80295c2:	f00e 1eff 	and.w	lr, lr, #16711935	@ 0xff00ff
 80295c6:	f40a 4a7f 	and.w	sl, sl, #65280	@ 0xff00
 80295ca:	ea4e 050a 	orr.w	r5, lr, sl
 80295ce:	950b      	str	r5, [sp, #44]	@ 0x2c
 80295d0:	9d10      	ldr	r5, [sp, #64]	@ 0x40
 80295d2:	2dff      	cmp	r5, #255	@ 0xff
 80295d4:	d021      	beq.n	802961a <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x246>
 80295d6:	9d08      	ldr	r5, [sp, #32]
 80295d8:	f005 1bff 	and.w	fp, r5, #16711935	@ 0xff00ff
 80295dc:	9d10      	ldr	r5, [sp, #64]	@ 0x40
 80295de:	fb05 fb0b 	mul.w	fp, r5, fp
 80295e2:	9d08      	ldr	r5, [sp, #32]
 80295e4:	f405 4e7f 	and.w	lr, r5, #65280	@ 0xff00
 80295e8:	9d10      	ldr	r5, [sp, #64]	@ 0x40
 80295ea:	fb05 fa0e 	mul.w	sl, r5, lr
 80295ee:	ea4f 2e1b 	mov.w	lr, fp, lsr #8
 80295f2:	f10b 1b01 	add.w	fp, fp, #65537	@ 0x10001
 80295f6:	f00e 1eff 	and.w	lr, lr, #16711935	@ 0xff00ff
 80295fa:	f50a 7c80 	add.w	ip, sl, #256	@ 0x100
 80295fe:	44de      	add	lr, fp
 8029600:	eb0c 2a1a 	add.w	sl, ip, sl, lsr #8
 8029604:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 8029608:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 802960c:	f00e 1eff 	and.w	lr, lr, #16711935	@ 0xff00ff
 8029610:	f40a 4a7f 	and.w	sl, sl, #65280	@ 0xff00
 8029614:	ea4e 050a 	orr.w	r5, lr, sl
 8029618:	9508      	str	r5, [sp, #32]
 802961a:	9d13      	ldr	r5, [sp, #76]	@ 0x4c
 802961c:	2dff      	cmp	r5, #255	@ 0xff
 802961e:	d021      	beq.n	8029664 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x290>
 8029620:	9d0c      	ldr	r5, [sp, #48]	@ 0x30
 8029622:	f005 1bff 	and.w	fp, r5, #16711935	@ 0xff00ff
 8029626:	9d13      	ldr	r5, [sp, #76]	@ 0x4c
 8029628:	fb05 fb0b 	mul.w	fp, r5, fp
 802962c:	9d0c      	ldr	r5, [sp, #48]	@ 0x30
 802962e:	f405 4a7f 	and.w	sl, r5, #65280	@ 0xff00
 8029632:	9d13      	ldr	r5, [sp, #76]	@ 0x4c
 8029634:	ea4f 2e1b 	mov.w	lr, fp, lsr #8
 8029638:	f10b 1b01 	add.w	fp, fp, #65537	@ 0x10001
 802963c:	fb05 fa0a 	mul.w	sl, r5, sl
 8029640:	f00e 1eff 	and.w	lr, lr, #16711935	@ 0xff00ff
 8029644:	f50a 7c80 	add.w	ip, sl, #256	@ 0x100
 8029648:	44de      	add	lr, fp
 802964a:	eb0c 2a1a 	add.w	sl, ip, sl, lsr #8
 802964e:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 8029652:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 8029656:	f00e 1eff 	and.w	lr, lr, #16711935	@ 0xff00ff
 802965a:	f40a 4a7f 	and.w	sl, sl, #65280	@ 0xff00
 802965e:	ea4e 050a 	orr.w	r5, lr, sl
 8029662:	950c      	str	r5, [sp, #48]	@ 0x30
 8029664:	9d0b      	ldr	r5, [sp, #44]	@ 0x2c
 8029666:	f002 1eff 	and.w	lr, r2, #16711935	@ 0xff00ff
 802966a:	f402 427f 	and.w	r2, r2, #65280	@ 0xff00
 802966e:	2bff      	cmp	r3, #255	@ 0xff
 8029670:	f005 1cff 	and.w	ip, r5, #16711935	@ 0xff00ff
 8029674:	9d08      	ldr	r5, [sp, #32]
 8029676:	fb08 fc0c 	mul.w	ip, r8, ip
 802967a:	fb01 cc0e 	mla	ip, r1, lr, ip
 802967e:	f005 1eff 	and.w	lr, r5, #16711935	@ 0xff00ff
 8029682:	9d0c      	ldr	r5, [sp, #48]	@ 0x30
 8029684:	fb00 cc0e 	mla	ip, r0, lr, ip
 8029688:	f005 1eff 	and.w	lr, r5, #16711935	@ 0xff00ff
 802968c:	9d0b      	ldr	r5, [sp, #44]	@ 0x2c
 802968e:	fb09 cc0e 	mla	ip, r9, lr, ip
 8029692:	f405 4e7f 	and.w	lr, r5, #65280	@ 0xff00
 8029696:	fb08 f80e 	mul.w	r8, r8, lr
 802969a:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 802969e:	fb01 8202 	mla	r2, r1, r2, r8
 80296a2:	9908      	ldr	r1, [sp, #32]
 80296a4:	f00c 1cff 	and.w	ip, ip, #16711935	@ 0xff00ff
 80296a8:	f401 4a7f 	and.w	sl, r1, #65280	@ 0xff00
 80296ac:	990c      	ldr	r1, [sp, #48]	@ 0x30
 80296ae:	fb00 220a 	mla	r2, r0, sl, r2
 80296b2:	f401 407f 	and.w	r0, r1, #65280	@ 0xff00
 80296b6:	fb09 2900 	mla	r9, r9, r0, r2
 80296ba:	ea4f 2919 	mov.w	r9, r9, lsr #8
 80296be:	f409 497f 	and.w	r9, r9, #65280	@ 0xff00
 80296c2:	ea4c 0c09 	orr.w	ip, ip, r9
 80296c6:	ea4f 221c 	mov.w	r2, ip, lsr #8
 80296ca:	f040 8091 	bne.w	80297f0 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x41c>
 80296ce:	ea4f 135c 	mov.w	r3, ip, lsr #5
 80296d2:	f422 62ff 	bic.w	r2, r2, #2040	@ 0x7f8
 80296d6:	f403 63fc 	and.w	r3, r3, #2016	@ 0x7e0
 80296da:	f022 0207 	bic.w	r2, r2, #7
 80296de:	431a      	orrs	r2, r3
 80296e0:	f3cc 0cc4 	ubfx	ip, ip, #3, #5
 80296e4:	ea4c 0c02 	orr.w	ip, ip, r2
 80296e8:	f8a7 c000 	strh.w	ip, [r7]
 80296ec:	9b2f      	ldr	r3, [sp, #188]	@ 0xbc
 80296ee:	3702      	adds	r7, #2
 80296f0:	441c      	add	r4, r3
 80296f2:	9b30      	ldr	r3, [sp, #192]	@ 0xc0
 80296f4:	441e      	add	r6, r3
 80296f6:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 80296f8:	3b01      	subs	r3, #1
 80296fa:	9317      	str	r3, [sp, #92]	@ 0x5c
 80296fc:	e6c0      	b.n	8029480 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xac>
 80296fe:	9b2f      	ldr	r3, [sp, #188]	@ 0xbc
 8029700:	441c      	add	r4, r3
 8029702:	9b30      	ldr	r3, [sp, #192]	@ 0xc0
 8029704:	441e      	add	r6, r3
 8029706:	9b07      	ldr	r3, [sp, #28]
 8029708:	3b01      	subs	r3, #1
 802970a:	9307      	str	r3, [sp, #28]
 802970c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 802970e:	3302      	adds	r3, #2
 8029710:	930a      	str	r3, [sp, #40]	@ 0x28
 8029712:	e695      	b.n	8029440 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6c>
 8029714:	d024      	beq.n	8029760 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x38c>
 8029716:	9b07      	ldr	r3, [sp, #28]
 8029718:	982f      	ldr	r0, [sp, #188]	@ 0xbc
 802971a:	3b01      	subs	r3, #1
 802971c:	fb00 4003 	mla	r0, r0, r3, r4
 8029720:	1400      	asrs	r0, r0, #16
 8029722:	f53f aeaa 	bmi.w	802947a <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa6>
 8029726:	3901      	subs	r1, #1
 8029728:	4288      	cmp	r0, r1
 802972a:	f6bf aea6 	bge.w	802947a <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa6>
 802972e:	9930      	ldr	r1, [sp, #192]	@ 0xc0
 8029730:	fb01 6303 	mla	r3, r1, r3, r6
 8029734:	141b      	asrs	r3, r3, #16
 8029736:	f53f aea0 	bmi.w	802947a <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa6>
 802973a:	3a01      	subs	r2, #1
 802973c:	4293      	cmp	r3, r2
 802973e:	f6bf ae9c 	bge.w	802947a <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa6>
 8029742:	f8dd b01c 	ldr.w	fp, [sp, #28]
 8029746:	f8dd 8028 	ldr.w	r8, [sp, #40]	@ 0x28
 802974a:	f1bb 0f00 	cmp.w	fp, #0
 802974e:	f300 809a 	bgt.w	8029886 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4b2>
 8029752:	9b07      	ldr	r3, [sp, #28]
 8029754:	ea23 75e3 	bic.w	r5, r3, r3, asr #31
 8029758:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 802975a:	eb03 0345 	add.w	r3, r3, r5, lsl #1
 802975e:	930a      	str	r3, [sp, #40]	@ 0x28
 8029760:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 8029762:	2b00      	cmp	r3, #0
 8029764:	f340 81ec 	ble.w	8029b40 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x76c>
 8029768:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 802976c:	9b2c      	ldr	r3, [sp, #176]	@ 0xb0
 802976e:	ee3a aa2b 	vadd.f32	s20, s20, s23
 8029772:	ee79 9a8b 	vadd.f32	s19, s19, s22
 8029776:	eef0 6a48 	vmov.f32	s13, s16
 802977a:	eec7 7a0a 	vdiv.f32	s15, s14, s20
 802977e:	ee39 9a2a 	vadd.f32	s18, s18, s21
 8029782:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 8029786:	ee16 4a90 	vmov	r4, s13
 802978a:	eef0 6a68 	vmov.f32	s13, s17
 802978e:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 8029792:	ee16 6a90 	vmov	r6, s13
 8029796:	ee29 7aa7 	vmul.f32	s14, s19, s15
 802979a:	ee69 7a27 	vmul.f32	s15, s18, s15
 802979e:	ee37 8a48 	vsub.f32	s16, s14, s16
 80297a2:	ee77 8ae8 	vsub.f32	s17, s15, s17
 80297a6:	eebe 8ac8 	vcvt.s32.f32	s16, s16, #16
 80297aa:	eefe 8ac8 	vcvt.s32.f32	s17, s17, #16
 80297ae:	ee18 2a10 	vmov	r2, s16
 80297b2:	eeb0 8a47 	vmov.f32	s16, s14
 80297b6:	fb92 f3f3 	sdiv	r3, r2, r3
 80297ba:	ee18 2a90 	vmov	r2, s17
 80297be:	932f      	str	r3, [sp, #188]	@ 0xbc
 80297c0:	9b2c      	ldr	r3, [sp, #176]	@ 0xb0
 80297c2:	eef0 8a67 	vmov.f32	s17, s15
 80297c6:	fb92 f3f3 	sdiv	r3, r2, r3
 80297ca:	9330      	str	r3, [sp, #192]	@ 0xc0
 80297cc:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 80297ce:	9a18      	ldr	r2, [sp, #96]	@ 0x60
 80297d0:	3b01      	subs	r3, #1
 80297d2:	9316      	str	r3, [sp, #88]	@ 0x58
 80297d4:	9b2c      	ldr	r3, [sp, #176]	@ 0xb0
 80297d6:	bf08      	it	eq
 80297d8:	4613      	moveq	r3, r2
 80297da:	9307      	str	r3, [sp, #28]
 80297dc:	e622      	b.n	8029424 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x50>
 80297de:	2800      	cmp	r0, #0
 80297e0:	f43f ae92 	beq.w	8029508 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x134>
 80297e4:	f858 3023 	ldr.w	r3, [r8, r3, lsl #2]
 80297e8:	9308      	str	r3, [sp, #32]
 80297ea:	0e1b      	lsrs	r3, r3, #24
 80297ec:	9310      	str	r3, [sp, #64]	@ 0x40
 80297ee:	e68b      	b.n	8029508 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x134>
 80297f0:	8839      	ldrh	r1, [r7, #0]
 80297f2:	43db      	mvns	r3, r3
 80297f4:	4dd5      	ldr	r5, [pc, #852]	@ (8029b4c <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x778>)
 80297f6:	ea4f 2e21 	mov.w	lr, r1, asr #8
 80297fa:	fa5f f883 	uxtb.w	r8, r3
 80297fe:	f00e 0ef8 	and.w	lr, lr, #248	@ 0xf8
 8029802:	10c8      	asrs	r0, r1, #3
 8029804:	00cb      	lsls	r3, r1, #3
 8029806:	fb0e fe08 	mul.w	lr, lr, r8
 802980a:	f000 00fc 	and.w	r0, r0, #252	@ 0xfc
 802980e:	b2db      	uxtb	r3, r3
 8029810:	f10e 0101 	add.w	r1, lr, #1
 8029814:	fb00 f008 	mul.w	r0, r0, r8
 8029818:	fb03 f308 	mul.w	r3, r3, r8
 802981c:	eb01 2e1e 	add.w	lr, r1, lr, lsr #8
 8029820:	ea4f 411c 	mov.w	r1, ip, lsr #16
 8029824:	eb01 211e 	add.w	r1, r1, lr, lsr #8
 8029828:	f100 0e01 	add.w	lr, r0, #1
 802982c:	eb0e 2010 	add.w	r0, lr, r0, lsr #8
 8029830:	b2c9      	uxtb	r1, r1
 8029832:	eb02 2210 	add.w	r2, r2, r0, lsr #8
 8029836:	ea05 2101 	and.w	r1, r5, r1, lsl #8
 802983a:	00d2      	lsls	r2, r2, #3
 802983c:	f402 62fc 	and.w	r2, r2, #2016	@ 0x7e0
 8029840:	430a      	orrs	r2, r1
 8029842:	1c59      	adds	r1, r3, #1
 8029844:	eb01 2313 	add.w	r3, r1, r3, lsr #8
 8029848:	eb0c 2c13 	add.w	ip, ip, r3, lsr #8
 802984c:	e748      	b.n	80296e0 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x30c>
 802984e:	f112 0801 	adds.w	r8, r2, #1
 8029852:	f53f af4b 	bmi.w	80296ec <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x318>
 8029856:	4543      	cmp	r3, r8
 8029858:	f6ff af48 	blt.w	80296ec <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x318>
 802985c:	f11c 0801 	adds.w	r8, ip, #1
 8029860:	f53f af44 	bmi.w	80296ec <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x318>
 8029864:	45c6      	cmp	lr, r8
 8029866:	f6ff af41 	blt.w	80296ec <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x318>
 802986a:	b21b      	sxth	r3, r3
 802986c:	e9cd 2c01 	strd	r2, ip, [sp, #4]
 8029870:	fa0f f28e 	sxth.w	r2, lr
 8029874:	e9cd 1003 	strd	r1, r0, [sp, #12]
 8029878:	9200      	str	r2, [sp, #0]
 802987a:	4639      	mov	r1, r7
 802987c:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 802987e:	9819      	ldr	r0, [sp, #100]	@ 0x64
 8029880:	f7ff fc54 	bl	802912c <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh>
 8029884:	e732      	b.n	80296ec <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x318>
 8029886:	9b34      	ldr	r3, [sp, #208]	@ 0xd0
 8029888:	1421      	asrs	r1, r4, #16
 802988a:	9d0f      	ldr	r5, [sp, #60]	@ 0x3c
 802988c:	f3c4 3203 	ubfx	r2, r4, #12, #4
 8029890:	f9b3 7008 	ldrsh.w	r7, [r3, #8]
 8029894:	1433      	asrs	r3, r6, #16
 8029896:	f3c6 3003 	ubfx	r0, r6, #12, #4
 802989a:	fb07 1303 	mla	r3, r7, r3, r1
 802989e:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 80298a0:	eb01 0183 	add.w	r1, r1, r3, lsl #2
 80298a4:	f855 3023 	ldr.w	r3, [r5, r3, lsl #2]
 80298a8:	ea4f 6c13 	mov.w	ip, r3, lsr #24
 80298ac:	2a00      	cmp	r2, #0
 80298ae:	f000 8108 	beq.w	8029ac2 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6ee>
 80298b2:	684d      	ldr	r5, [r1, #4]
 80298b4:	950d      	str	r5, [sp, #52]	@ 0x34
 80298b6:	0e2d      	lsrs	r5, r5, #24
 80298b8:	9514      	str	r5, [sp, #80]	@ 0x50
 80298ba:	b178      	cbz	r0, 80298dc <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x508>
 80298bc:	f107 4780 	add.w	r7, r7, #1073741824	@ 0x40000000
 80298c0:	3f01      	subs	r7, #1
 80298c2:	00bf      	lsls	r7, r7, #2
 80298c4:	3704      	adds	r7, #4
 80298c6:	eb01 0e07 	add.w	lr, r1, r7
 80298ca:	59c9      	ldr	r1, [r1, r7]
 80298cc:	9109      	str	r1, [sp, #36]	@ 0x24
 80298ce:	0e09      	lsrs	r1, r1, #24
 80298d0:	9111      	str	r1, [sp, #68]	@ 0x44
 80298d2:	f8de 1004 	ldr.w	r1, [lr, #4]
 80298d6:	910e      	str	r1, [sp, #56]	@ 0x38
 80298d8:	0e09      	lsrs	r1, r1, #24
 80298da:	9115      	str	r1, [sp, #84]	@ 0x54
 80298dc:	b292      	uxth	r2, r2
 80298de:	9d11      	ldr	r5, [sp, #68]	@ 0x44
 80298e0:	b280      	uxth	r0, r0
 80298e2:	fb02 f900 	mul.w	r9, r2, r0
 80298e6:	0112      	lsls	r2, r2, #4
 80298e8:	ebc9 1000 	rsb	r0, r9, r0, lsl #4
 80298ec:	eba2 0e09 	sub.w	lr, r2, r9
 80298f0:	f5c2 7180 	rsb	r1, r2, #256	@ 0x100
 80298f4:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 80298f6:	b280      	uxth	r0, r0
 80298f8:	fa1f fe8e 	uxth.w	lr, lr
 80298fc:	1a09      	subs	r1, r1, r0
 80298fe:	fb0e f202 	mul.w	r2, lr, r2
 8029902:	b289      	uxth	r1, r1
 8029904:	fb01 220c 	mla	r2, r1, ip, r2
 8029908:	fb00 2205 	mla	r2, r0, r5, r2
 802990c:	9d15      	ldr	r5, [sp, #84]	@ 0x54
 802990e:	fb09 2205 	mla	r2, r9, r5, r2
 8029912:	f3c2 2207 	ubfx	r2, r2, #8, #8
 8029916:	2a00      	cmp	r2, #0
 8029918:	f000 80ca 	beq.w	8029ab0 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6dc>
 802991c:	f1bc 0fff 	cmp.w	ip, #255	@ 0xff
 8029920:	d019      	beq.n	8029956 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x582>
 8029922:	f003 1aff 	and.w	sl, r3, #16711935	@ 0xff00ff
 8029926:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 802992a:	fb0c fa0a 	mul.w	sl, ip, sl
 802992e:	fb0c fc03 	mul.w	ip, ip, r3
 8029932:	ea4f 231a 	mov.w	r3, sl, lsr #8
 8029936:	f10a 1a01 	add.w	sl, sl, #65537	@ 0x10001
 802993a:	f50c 7780 	add.w	r7, ip, #256	@ 0x100
 802993e:	f003 13ff 	and.w	r3, r3, #16711935	@ 0xff00ff
 8029942:	eb07 271c 	add.w	r7, r7, ip, lsr #8
 8029946:	4453      	add	r3, sl
 8029948:	0a3f      	lsrs	r7, r7, #8
 802994a:	0a1b      	lsrs	r3, r3, #8
 802994c:	f407 477f 	and.w	r7, r7, #65280	@ 0xff00
 8029950:	f003 13ff 	and.w	r3, r3, #16711935	@ 0xff00ff
 8029954:	433b      	orrs	r3, r7
 8029956:	9d14      	ldr	r5, [sp, #80]	@ 0x50
 8029958:	2dff      	cmp	r5, #255	@ 0xff
 802995a:	d020      	beq.n	802999e <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5ca>
 802995c:	9d0d      	ldr	r5, [sp, #52]	@ 0x34
 802995e:	f005 17ff 	and.w	r7, r5, #16711935	@ 0xff00ff
 8029962:	9d14      	ldr	r5, [sp, #80]	@ 0x50
 8029964:	436f      	muls	r7, r5
 8029966:	9d0d      	ldr	r5, [sp, #52]	@ 0x34
 8029968:	ea4f 2c17 	mov.w	ip, r7, lsr #8
 802996c:	f405 4a7f 	and.w	sl, r5, #65280	@ 0xff00
 8029970:	9d14      	ldr	r5, [sp, #80]	@ 0x50
 8029972:	f107 1701 	add.w	r7, r7, #65537	@ 0x10001
 8029976:	f00c 1cff 	and.w	ip, ip, #16711935	@ 0xff00ff
 802997a:	fb05 fa0a 	mul.w	sl, r5, sl
 802997e:	44bc      	add	ip, r7
 8029980:	f50a 7780 	add.w	r7, sl, #256	@ 0x100
 8029984:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 8029988:	eb07 2a1a 	add.w	sl, r7, sl, lsr #8
 802998c:	f00c 1cff 	and.w	ip, ip, #16711935	@ 0xff00ff
 8029990:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 8029994:	f40a 4a7f 	and.w	sl, sl, #65280	@ 0xff00
 8029998:	ea4c 050a 	orr.w	r5, ip, sl
 802999c:	950d      	str	r5, [sp, #52]	@ 0x34
 802999e:	9d11      	ldr	r5, [sp, #68]	@ 0x44
 80299a0:	2dff      	cmp	r5, #255	@ 0xff
 80299a2:	d020      	beq.n	80299e6 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x612>
 80299a4:	9d09      	ldr	r5, [sp, #36]	@ 0x24
 80299a6:	f005 17ff 	and.w	r7, r5, #16711935	@ 0xff00ff
 80299aa:	9d11      	ldr	r5, [sp, #68]	@ 0x44
 80299ac:	436f      	muls	r7, r5
 80299ae:	9d09      	ldr	r5, [sp, #36]	@ 0x24
 80299b0:	f405 4c7f 	and.w	ip, r5, #65280	@ 0xff00
 80299b4:	9d11      	ldr	r5, [sp, #68]	@ 0x44
 80299b6:	fb05 fa0c 	mul.w	sl, r5, ip
 80299ba:	ea4f 2c17 	mov.w	ip, r7, lsr #8
 80299be:	f107 1701 	add.w	r7, r7, #65537	@ 0x10001
 80299c2:	f00c 1cff 	and.w	ip, ip, #16711935	@ 0xff00ff
 80299c6:	44bc      	add	ip, r7
 80299c8:	f50a 7780 	add.w	r7, sl, #256	@ 0x100
 80299cc:	eb07 2a1a 	add.w	sl, r7, sl, lsr #8
 80299d0:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 80299d4:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 80299d8:	f00c 1cff 	and.w	ip, ip, #16711935	@ 0xff00ff
 80299dc:	f40a 4a7f 	and.w	sl, sl, #65280	@ 0xff00
 80299e0:	ea4c 050a 	orr.w	r5, ip, sl
 80299e4:	9509      	str	r5, [sp, #36]	@ 0x24
 80299e6:	9d15      	ldr	r5, [sp, #84]	@ 0x54
 80299e8:	2dff      	cmp	r5, #255	@ 0xff
 80299ea:	d020      	beq.n	8029a2e <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x65a>
 80299ec:	9d0e      	ldr	r5, [sp, #56]	@ 0x38
 80299ee:	f005 17ff 	and.w	r7, r5, #16711935	@ 0xff00ff
 80299f2:	9d15      	ldr	r5, [sp, #84]	@ 0x54
 80299f4:	436f      	muls	r7, r5
 80299f6:	9d0e      	ldr	r5, [sp, #56]	@ 0x38
 80299f8:	ea4f 2c17 	mov.w	ip, r7, lsr #8
 80299fc:	f405 4a7f 	and.w	sl, r5, #65280	@ 0xff00
 8029a00:	9d15      	ldr	r5, [sp, #84]	@ 0x54
 8029a02:	f107 1701 	add.w	r7, r7, #65537	@ 0x10001
 8029a06:	f00c 1cff 	and.w	ip, ip, #16711935	@ 0xff00ff
 8029a0a:	fb05 fa0a 	mul.w	sl, r5, sl
 8029a0e:	44bc      	add	ip, r7
 8029a10:	f50a 7780 	add.w	r7, sl, #256	@ 0x100
 8029a14:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 8029a18:	eb07 2a1a 	add.w	sl, r7, sl, lsr #8
 8029a1c:	f00c 1cff 	and.w	ip, ip, #16711935	@ 0xff00ff
 8029a20:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 8029a24:	f40a 4a7f 	and.w	sl, sl, #65280	@ 0xff00
 8029a28:	ea4c 050a 	orr.w	r5, ip, sl
 8029a2c:	950e      	str	r5, [sp, #56]	@ 0x38
 8029a2e:	9d0d      	ldr	r5, [sp, #52]	@ 0x34
 8029a30:	f003 1cff 	and.w	ip, r3, #16711935	@ 0xff00ff
 8029a34:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 8029a38:	2aff      	cmp	r2, #255	@ 0xff
 8029a3a:	f005 17ff 	and.w	r7, r5, #16711935	@ 0xff00ff
 8029a3e:	9d09      	ldr	r5, [sp, #36]	@ 0x24
 8029a40:	fb0e f707 	mul.w	r7, lr, r7
 8029a44:	fb01 770c 	mla	r7, r1, ip, r7
 8029a48:	f005 1cff 	and.w	ip, r5, #16711935	@ 0xff00ff
 8029a4c:	9d0e      	ldr	r5, [sp, #56]	@ 0x38
 8029a4e:	fb00 770c 	mla	r7, r0, ip, r7
 8029a52:	f005 1cff 	and.w	ip, r5, #16711935	@ 0xff00ff
 8029a56:	9d0d      	ldr	r5, [sp, #52]	@ 0x34
 8029a58:	fb09 770c 	mla	r7, r9, ip, r7
 8029a5c:	f405 4c7f 	and.w	ip, r5, #65280	@ 0xff00
 8029a60:	fb0e fe0c 	mul.w	lr, lr, ip
 8029a64:	ea4f 2717 	mov.w	r7, r7, lsr #8
 8029a68:	fb01 e303 	mla	r3, r1, r3, lr
 8029a6c:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8029a6e:	f007 17ff 	and.w	r7, r7, #16711935	@ 0xff00ff
 8029a72:	f401 4a7f 	and.w	sl, r1, #65280	@ 0xff00
 8029a76:	990e      	ldr	r1, [sp, #56]	@ 0x38
 8029a78:	fb00 330a 	mla	r3, r0, sl, r3
 8029a7c:	f401 4c7f 	and.w	ip, r1, #65280	@ 0xff00
 8029a80:	fb09 3c0c 	mla	ip, r9, ip, r3
 8029a84:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 8029a88:	f40c 4c7f 	and.w	ip, ip, #65280	@ 0xff00
 8029a8c:	ea47 070c 	orr.w	r7, r7, ip
 8029a90:	ea4f 2317 	mov.w	r3, r7, lsr #8
 8029a94:	d11e      	bne.n	8029ad4 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x700>
 8029a96:	097a      	lsrs	r2, r7, #5
 8029a98:	f423 63ff 	bic.w	r3, r3, #2040	@ 0x7f8
 8029a9c:	f3c7 07c4 	ubfx	r7, r7, #3, #5
 8029aa0:	f402 62fc 	and.w	r2, r2, #2016	@ 0x7e0
 8029aa4:	f023 0307 	bic.w	r3, r3, #7
 8029aa8:	4313      	orrs	r3, r2
 8029aaa:	431f      	orrs	r7, r3
 8029aac:	f8a8 7000 	strh.w	r7, [r8]
 8029ab0:	9b2f      	ldr	r3, [sp, #188]	@ 0xbc
 8029ab2:	f108 0802 	add.w	r8, r8, #2
 8029ab6:	f10b 3bff 	add.w	fp, fp, #4294967295
 8029aba:	441c      	add	r4, r3
 8029abc:	9b30      	ldr	r3, [sp, #192]	@ 0xc0
 8029abe:	441e      	add	r6, r3
 8029ac0:	e643      	b.n	802974a <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x376>
 8029ac2:	2800      	cmp	r0, #0
 8029ac4:	f43f af0a 	beq.w	80298dc <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x508>
 8029ac8:	f851 1027 	ldr.w	r1, [r1, r7, lsl #2]
 8029acc:	9109      	str	r1, [sp, #36]	@ 0x24
 8029ace:	0e09      	lsrs	r1, r1, #24
 8029ad0:	9111      	str	r1, [sp, #68]	@ 0x44
 8029ad2:	e703      	b.n	80298dc <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x508>
 8029ad4:	f8b8 1000 	ldrh.w	r1, [r8]
 8029ad8:	43d2      	mvns	r2, r2
 8029ada:	ea4f 2c21 	mov.w	ip, r1, asr #8
 8029ade:	fa5f fe82 	uxtb.w	lr, r2
 8029ae2:	f00c 0cf8 	and.w	ip, ip, #248	@ 0xf8
 8029ae6:	10c8      	asrs	r0, r1, #3
 8029ae8:	00ca      	lsls	r2, r1, #3
 8029aea:	fb0c fc0e 	mul.w	ip, ip, lr
 8029aee:	f000 00fc 	and.w	r0, r0, #252	@ 0xfc
 8029af2:	b2d2      	uxtb	r2, r2
 8029af4:	f10c 0101 	add.w	r1, ip, #1
 8029af8:	fb00 f00e 	mul.w	r0, r0, lr
 8029afc:	fb02 f20e 	mul.w	r2, r2, lr
 8029b00:	eb01 2c1c 	add.w	ip, r1, ip, lsr #8
 8029b04:	0c39      	lsrs	r1, r7, #16
 8029b06:	eb01 2c1c 	add.w	ip, r1, ip, lsr #8
 8029b0a:	4910      	ldr	r1, [pc, #64]	@ (8029b4c <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x778>)
 8029b0c:	fa5f fc8c 	uxtb.w	ip, ip
 8029b10:	ea01 2c0c 	and.w	ip, r1, ip, lsl #8
 8029b14:	1c41      	adds	r1, r0, #1
 8029b16:	eb01 2010 	add.w	r0, r1, r0, lsr #8
 8029b1a:	1c51      	adds	r1, r2, #1
 8029b1c:	eb03 2010 	add.w	r0, r3, r0, lsr #8
 8029b20:	eb01 2212 	add.w	r2, r1, r2, lsr #8
 8029b24:	00c0      	lsls	r0, r0, #3
 8029b26:	eb07 2712 	add.w	r7, r7, r2, lsr #8
 8029b2a:	f400 60fc 	and.w	r0, r0, #2016	@ 0x7e0
 8029b2e:	f3c7 07c4 	ubfx	r7, r7, #3, #5
 8029b32:	ea4c 0c00 	orr.w	ip, ip, r0
 8029b36:	ea47 0c0c 	orr.w	ip, r7, ip
 8029b3a:	f8a8 c000 	strh.w	ip, [r8]
 8029b3e:	e7b7      	b.n	8029ab0 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6dc>
 8029b40:	b01b      	add	sp, #108	@ 0x6c
 8029b42:	ecbd 8b08 	vpop	{d8-d11}
 8029b46:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8029b4a:	bf00      	nop
 8029b4c:	fffff800 	.word	0xfffff800

08029b50 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh>:
 8029b50:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8029b54:	e9dd c40a 	ldrd	ip, r4, [sp, #40]	@ 0x28
 8029b58:	f9bd 8020 	ldrsh.w	r8, [sp, #32]
 8029b5c:	2c00      	cmp	r4, #0
 8029b5e:	f9bd 9024 	ldrsh.w	r9, [sp, #36]	@ 0x24
 8029b62:	f89d 5030 	ldrb.w	r5, [sp, #48]	@ 0x30
 8029b66:	fb04 ce03 	mla	lr, r4, r3, ip
 8029b6a:	f89d 7034 	ldrb.w	r7, [sp, #52]	@ 0x34
 8029b6e:	db60      	blt.n	8029c32 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0xe2>
 8029b70:	45a1      	cmp	r9, r4
 8029b72:	dd5e      	ble.n	8029c32 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0xe2>
 8029b74:	f1bc 0f00 	cmp.w	ip, #0
 8029b78:	db59      	blt.n	8029c2e <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0xde>
 8029b7a:	45e0      	cmp	r8, ip
 8029b7c:	dd57      	ble.n	8029c2e <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0xde>
 8029b7e:	ea4f 005e 	mov.w	r0, lr, lsr #1
 8029b82:	f01e 0f01 	tst.w	lr, #1
 8029b86:	5c16      	ldrb	r6, [r2, r0]
 8029b88:	bf0c      	ite	eq
 8029b8a:	f006 060f 	andeq.w	r6, r6, #15
 8029b8e:	1136      	asrne	r6, r6, #4
 8029b90:	eb06 1606 	add.w	r6, r6, r6, lsl #4
 8029b94:	b2f6      	uxtb	r6, r6
 8029b96:	f11c 0001 	adds.w	r0, ip, #1
 8029b9a:	d44d      	bmi.n	8029c38 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0xe8>
 8029b9c:	4580      	cmp	r8, r0
 8029b9e:	dd4b      	ble.n	8029c38 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0xe8>
 8029ba0:	2d00      	cmp	r5, #0
 8029ba2:	d04b      	beq.n	8029c3c <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0xec>
 8029ba4:	f10e 0a01 	add.w	sl, lr, #1
 8029ba8:	ea4f 005a 	mov.w	r0, sl, lsr #1
 8029bac:	f01a 0f01 	tst.w	sl, #1
 8029bb0:	5c10      	ldrb	r0, [r2, r0]
 8029bb2:	bf0c      	ite	eq
 8029bb4:	f000 000f 	andeq.w	r0, r0, #15
 8029bb8:	1100      	asrne	r0, r0, #4
 8029bba:	eb00 1000 	add.w	r0, r0, r0, lsl #4
 8029bbe:	b2c0      	uxtb	r0, r0
 8029bc0:	3401      	adds	r4, #1
 8029bc2:	d43f      	bmi.n	8029c44 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0xf4>
 8029bc4:	45a1      	cmp	r9, r4
 8029bc6:	dd3d      	ble.n	8029c44 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0xf4>
 8029bc8:	2f00      	cmp	r7, #0
 8029bca:	f000 80a8 	beq.w	8029d1e <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0x1ce>
 8029bce:	f1bc 0f00 	cmp.w	ip, #0
 8029bd2:	db35      	blt.n	8029c40 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0xf0>
 8029bd4:	45e0      	cmp	r8, ip
 8029bd6:	dd33      	ble.n	8029c40 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0xf0>
 8029bd8:	eb03 090e 	add.w	r9, r3, lr
 8029bdc:	ea4f 0459 	mov.w	r4, r9, lsr #1
 8029be0:	f019 0f01 	tst.w	r9, #1
 8029be4:	5d14      	ldrb	r4, [r2, r4]
 8029be6:	bf0c      	ite	eq
 8029be8:	f004 040f 	andeq.w	r4, r4, #15
 8029bec:	1124      	asrne	r4, r4, #4
 8029bee:	eb04 1404 	add.w	r4, r4, r4, lsl #4
 8029bf2:	b2e4      	uxtb	r4, r4
 8029bf4:	f11c 0c01 	adds.w	ip, ip, #1
 8029bf8:	d427      	bmi.n	8029c4a <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0xfa>
 8029bfa:	45e0      	cmp	r8, ip
 8029bfc:	dd25      	ble.n	8029c4a <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0xfa>
 8029bfe:	b335      	cbz	r5, 8029c4e <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0xfe>
 8029c00:	3301      	adds	r3, #1
 8029c02:	449e      	add	lr, r3
 8029c04:	ea4f 035e 	mov.w	r3, lr, lsr #1
 8029c08:	f01e 0f01 	tst.w	lr, #1
 8029c0c:	5cd2      	ldrb	r2, [r2, r3]
 8029c0e:	bf0c      	ite	eq
 8029c10:	f002 020f 	andeq.w	r2, r2, #15
 8029c14:	1112      	asrne	r2, r2, #4
 8029c16:	eb02 1202 	add.w	r2, r2, r2, lsl #4
 8029c1a:	b2d3      	uxtb	r3, r2
 8029c1c:	2d0f      	cmp	r5, #15
 8029c1e:	d917      	bls.n	8029c50 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0x100>
 8029c20:	4b42      	ldr	r3, [pc, #264]	@ (8029d2c <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0x1dc>)
 8029c22:	f44f 71fb 	mov.w	r1, #502	@ 0x1f6
 8029c26:	4a42      	ldr	r2, [pc, #264]	@ (8029d30 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0x1e0>)
 8029c28:	4842      	ldr	r0, [pc, #264]	@ (8029d34 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0x1e4>)
 8029c2a:	f001 f80b 	bl	802ac44 <__assert_func>
 8029c2e:	2600      	movs	r6, #0
 8029c30:	e7b1      	b.n	8029b96 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0x46>
 8029c32:	2000      	movs	r0, #0
 8029c34:	4606      	mov	r6, r0
 8029c36:	e7c3      	b.n	8029bc0 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0x70>
 8029c38:	2000      	movs	r0, #0
 8029c3a:	e7c1      	b.n	8029bc0 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0x70>
 8029c3c:	4628      	mov	r0, r5
 8029c3e:	e7bf      	b.n	8029bc0 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0x70>
 8029c40:	2400      	movs	r4, #0
 8029c42:	e7d7      	b.n	8029bf4 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0xa4>
 8029c44:	2300      	movs	r3, #0
 8029c46:	461c      	mov	r4, r3
 8029c48:	e7e8      	b.n	8029c1c <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0xcc>
 8029c4a:	2300      	movs	r3, #0
 8029c4c:	e7e6      	b.n	8029c1c <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0xcc>
 8029c4e:	462b      	mov	r3, r5
 8029c50:	2f0f      	cmp	r7, #15
 8029c52:	d8e5      	bhi.n	8029c20 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0xd0>
 8029c54:	b2ad      	uxth	r5, r5
 8029c56:	b2bf      	uxth	r7, r7
 8029c58:	fb05 fc07 	mul.w	ip, r5, r7
 8029c5c:	012d      	lsls	r5, r5, #4
 8029c5e:	ebcc 1707 	rsb	r7, ip, r7, lsl #4
 8029c62:	f5c5 7280 	rsb	r2, r5, #256	@ 0x100
 8029c66:	eba5 050c 	sub.w	r5, r5, ip
 8029c6a:	b2bf      	uxth	r7, r7
 8029c6c:	b2ad      	uxth	r5, r5
 8029c6e:	1bd2      	subs	r2, r2, r7
 8029c70:	4368      	muls	r0, r5
 8029c72:	b292      	uxth	r2, r2
 8029c74:	fb06 0002 	mla	r0, r6, r2, r0
 8029c78:	fb07 0404 	mla	r4, r7, r4, r0
 8029c7c:	fb0c 4303 	mla	r3, ip, r3, r4
 8029c80:	f3c3 2307 	ubfx	r3, r3, #8, #8
 8029c84:	b1b3      	cbz	r3, 8029cb4 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0x164>
 8029c86:	f89d 2038 	ldrb.w	r2, [sp, #56]	@ 0x38
 8029c8a:	435a      	muls	r2, r3
 8029c8c:	1c53      	adds	r3, r2, #1
 8029c8e:	eb03 2312 	add.w	r3, r3, r2, lsr #8
 8029c92:	4a29      	ldr	r2, [pc, #164]	@ (8029d38 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0x1e8>)
 8029c94:	121b      	asrs	r3, r3, #8
 8029c96:	6812      	ldr	r2, [r2, #0]
 8029c98:	2bff      	cmp	r3, #255	@ 0xff
 8029c9a:	ea4f 2612 	mov.w	r6, r2, lsr #8
 8029c9e:	d10b      	bne.n	8029cb8 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0x168>
 8029ca0:	0950      	lsrs	r0, r2, #5
 8029ca2:	4b26      	ldr	r3, [pc, #152]	@ (8029d3c <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0x1ec>)
 8029ca4:	f3c2 02c4 	ubfx	r2, r2, #3, #5
 8029ca8:	f400 60fc 	and.w	r0, r0, #2016	@ 0x7e0
 8029cac:	4033      	ands	r3, r6
 8029cae:	4318      	orrs	r0, r3
 8029cb0:	4302      	orrs	r2, r0
 8029cb2:	800a      	strh	r2, [r1, #0]
 8029cb4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8029cb8:	880d      	ldrh	r5, [r1, #0]
 8029cba:	b29f      	uxth	r7, r3
 8029cbc:	f3c2 4007 	ubfx	r0, r2, #16, #8
 8029cc0:	43db      	mvns	r3, r3
 8029cc2:	122c      	asrs	r4, r5, #8
 8029cc4:	fb10 f007 	smulbb	r0, r0, r7
 8029cc8:	b2db      	uxtb	r3, r3
 8029cca:	f004 04f8 	and.w	r4, r4, #248	@ 0xf8
 8029cce:	b2f6      	uxtb	r6, r6
 8029cd0:	b2d2      	uxtb	r2, r2
 8029cd2:	fb04 0403 	mla	r4, r4, r3, r0
 8029cd6:	10e8      	asrs	r0, r5, #3
 8029cd8:	fb12 f207 	smulbb	r2, r2, r7
 8029cdc:	00ed      	lsls	r5, r5, #3
 8029cde:	f000 00fc 	and.w	r0, r0, #252	@ 0xfc
 8029ce2:	b2a4      	uxth	r4, r4
 8029ce4:	fb16 f607 	smulbb	r6, r6, r7
 8029ce8:	b2ed      	uxtb	r5, r5
 8029cea:	fb00 6603 	mla	r6, r0, r3, r6
 8029cee:	fb05 2303 	mla	r3, r5, r3, r2
 8029cf2:	b2b0      	uxth	r0, r6
 8029cf4:	b29a      	uxth	r2, r3
 8029cf6:	1c63      	adds	r3, r4, #1
 8029cf8:	eb03 2414 	add.w	r4, r3, r4, lsr #8
 8029cfc:	1c53      	adds	r3, r2, #1
 8029cfe:	eb03 2312 	add.w	r3, r3, r2, lsr #8
 8029d02:	1c42      	adds	r2, r0, #1
 8029d04:	f404 4478 	and.w	r4, r4, #63488	@ 0xf800
 8029d08:	eb02 2010 	add.w	r0, r2, r0, lsr #8
 8029d0c:	f3c3 23c4 	ubfx	r3, r3, #11, #5
 8029d10:	0940      	lsrs	r0, r0, #5
 8029d12:	4323      	orrs	r3, r4
 8029d14:	f400 60fc 	and.w	r0, r0, #2016	@ 0x7e0
 8029d18:	4303      	orrs	r3, r0
 8029d1a:	800b      	strh	r3, [r1, #0]
 8029d1c:	e7ca      	b.n	8029cb4 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0x164>
 8029d1e:	2d0f      	cmp	r5, #15
 8029d20:	f63f af7e 	bhi.w	8029c20 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0xd0>
 8029d24:	463b      	mov	r3, r7
 8029d26:	463c      	mov	r4, r7
 8029d28:	e794      	b.n	8029c54 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0x104>
 8029d2a:	bf00      	nop
 8029d2c:	0802fed5 	.word	0x0802fed5
 8029d30:	080304a2 	.word	0x080304a2
 8029d34:	0802ff59 	.word	0x0802ff59
 8029d38:	2400b88c 	.word	0x2400b88c
 8029d3c:	00fff800 	.word	0x00fff800

08029d40 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 8029d40:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8029d44:	ed2d 8b08 	vpush	{d8-d11}
 8029d48:	b097      	sub	sp, #92	@ 0x5c
 8029d4a:	eeb0 aa40 	vmov.f32	s20, s0
 8029d4e:	eef0 9a60 	vmov.f32	s19, s1
 8029d52:	9214      	str	r2, [sp, #80]	@ 0x50
 8029d54:	eeb0 9a41 	vmov.f32	s18, s2
 8029d58:	9a2d      	ldr	r2, [sp, #180]	@ 0xb4
 8029d5a:	eeb0 8a62 	vmov.f32	s16, s5
 8029d5e:	9309      	str	r3, [sp, #36]	@ 0x24
 8029d60:	eef0 8a43 	vmov.f32	s17, s6
 8029d64:	f89d 30c4 	ldrb.w	r3, [sp, #196]	@ 0xc4
 8029d68:	eef0 ba44 	vmov.f32	s23, s8
 8029d6c:	9015      	str	r0, [sp, #84]	@ 0x54
 8029d6e:	eeb0 ba64 	vmov.f32	s22, s9
 8029d72:	6850      	ldr	r0, [r2, #4]
 8029d74:	eef0 aa45 	vmov.f32	s21, s10
 8029d78:	910d      	str	r1, [sp, #52]	@ 0x34
 8029d7a:	930f      	str	r3, [sp, #60]	@ 0x3c
 8029d7c:	6812      	ldr	r2, [r2, #0]
 8029d7e:	e9dd 132e 	ldrd	r1, r3, [sp, #184]	@ 0xb8
 8029d82:	e9dd 4629 	ldrd	r4, r6, [sp, #164]	@ 0xa4
 8029d86:	fb00 1303 	mla	r3, r0, r3, r1
 8029d8a:	eb02 0943 	add.w	r9, r2, r3, lsl #1
 8029d8e:	9b30      	ldr	r3, [sp, #192]	@ 0xc0
 8029d90:	689b      	ldr	r3, [r3, #8]
 8029d92:	3301      	adds	r3, #1
 8029d94:	f023 0301 	bic.w	r3, r3, #1
 8029d98:	930a      	str	r3, [sp, #40]	@ 0x28
 8029d9a:	9b30      	ldr	r3, [sp, #192]	@ 0xc0
 8029d9c:	681f      	ldr	r7, [r3, #0]
 8029d9e:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8029da0:	2b00      	cmp	r3, #0
 8029da2:	dc03      	bgt.n	8029dac <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6c>
 8029da4:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 8029da6:	2b00      	cmp	r3, #0
 8029da8:	f340 8289 	ble.w	802a2be <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x57e>
 8029dac:	9b30      	ldr	r3, [sp, #192]	@ 0xc0
 8029dae:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 8029db2:	f9b3 200c 	ldrsh.w	r2, [r3, #12]
 8029db6:	1e48      	subs	r0, r1, #1
 8029db8:	f102 3cff 	add.w	ip, r2, #4294967295
 8029dbc:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8029dbe:	2b00      	cmp	r3, #0
 8029dc0:	f340 80c5 	ble.w	8029f4e <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x20e>
 8029dc4:	ea5f 4e24 	movs.w	lr, r4, asr #16
 8029dc8:	ea4f 4326 	mov.w	r3, r6, asr #16
 8029dcc:	d406      	bmi.n	8029ddc <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x9c>
 8029dce:	4586      	cmp	lr, r0
 8029dd0:	da04      	bge.n	8029ddc <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x9c>
 8029dd2:	2b00      	cmp	r3, #0
 8029dd4:	db02      	blt.n	8029ddc <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x9c>
 8029dd6:	4563      	cmp	r3, ip
 8029dd8:	f2c0 80ba 	blt.w	8029f50 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x210>
 8029ddc:	f11e 0e01 	adds.w	lr, lr, #1
 8029de0:	f100 80ab 	bmi.w	8029f3a <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1fa>
 8029de4:	4571      	cmp	r1, lr
 8029de6:	f2c0 80a8 	blt.w	8029f3a <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1fa>
 8029dea:	3301      	adds	r3, #1
 8029dec:	f100 80a5 	bmi.w	8029f3a <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1fa>
 8029df0:	429a      	cmp	r2, r3
 8029df2:	f2c0 80a2 	blt.w	8029f3a <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1fa>
 8029df6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8029df8:	46c8      	mov	r8, r9
 8029dfa:	f9bd a028 	ldrsh.w	sl, [sp, #40]	@ 0x28
 8029dfe:	930e      	str	r3, [sp, #56]	@ 0x38
 8029e00:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8029e02:	2b00      	cmp	r3, #0
 8029e04:	f340 80c4 	ble.w	8029f90 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x250>
 8029e08:	9b30      	ldr	r3, [sp, #192]	@ 0xc0
 8029e0a:	1430      	asrs	r0, r6, #16
 8029e0c:	f3c4 3203 	ubfx	r2, r4, #12, #4
 8029e10:	f3c6 3103 	ubfx	r1, r6, #12, #4
 8029e14:	e9d3 ce02 	ldrd	ip, lr, [r3, #8]
 8029e18:	1423      	asrs	r3, r4, #16
 8029e1a:	f100 814f 	bmi.w	802a0bc <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x37c>
 8029e1e:	f10c 3bff 	add.w	fp, ip, #4294967295
 8029e22:	455b      	cmp	r3, fp
 8029e24:	f280 814a 	bge.w	802a0bc <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x37c>
 8029e28:	2800      	cmp	r0, #0
 8029e2a:	f2c0 8147 	blt.w	802a0bc <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x37c>
 8029e2e:	f10e 3bff 	add.w	fp, lr, #4294967295
 8029e32:	4558      	cmp	r0, fp
 8029e34:	f280 8142 	bge.w	802a0bc <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x37c>
 8029e38:	9d0a      	ldr	r5, [sp, #40]	@ 0x28
 8029e3a:	fb00 3305 	mla	r3, r0, r5, r3
 8029e3e:	0858      	lsrs	r0, r3, #1
 8029e40:	07dd      	lsls	r5, r3, #31
 8029e42:	f817 c000 	ldrb.w	ip, [r7, r0]
 8029e46:	bf54      	ite	pl
 8029e48:	f00c 0c0f 	andpl.w	ip, ip, #15
 8029e4c:	ea4f 1c2c 	movmi.w	ip, ip, asr #4
 8029e50:	eb0c 1c0c 	add.w	ip, ip, ip, lsl #4
 8029e54:	fa5f fc8c 	uxtb.w	ip, ip
 8029e58:	2a00      	cmp	r2, #0
 8029e5a:	f000 80dd 	beq.w	802a018 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2d8>
 8029e5e:	1c58      	adds	r0, r3, #1
 8029e60:	ea4f 0e50 	mov.w	lr, r0, lsr #1
 8029e64:	07c0      	lsls	r0, r0, #31
 8029e66:	f817 e00e 	ldrb.w	lr, [r7, lr]
 8029e6a:	bf54      	ite	pl
 8029e6c:	f00e 0e0f 	andpl.w	lr, lr, #15
 8029e70:	ea4f 1e2e 	movmi.w	lr, lr, asr #4
 8029e74:	eb0e 1e0e 	add.w	lr, lr, lr, lsl #4
 8029e78:	fa5f f08e 	uxtb.w	r0, lr
 8029e7c:	9010      	str	r0, [sp, #64]	@ 0x40
 8029e7e:	b1d9      	cbz	r1, 8029eb8 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x178>
 8029e80:	4453      	add	r3, sl
 8029e82:	0858      	lsrs	r0, r3, #1
 8029e84:	07dd      	lsls	r5, r3, #31
 8029e86:	f103 0301 	add.w	r3, r3, #1
 8029e8a:	5c38      	ldrb	r0, [r7, r0]
 8029e8c:	bf54      	ite	pl
 8029e8e:	f000 000f 	andpl.w	r0, r0, #15
 8029e92:	1100      	asrmi	r0, r0, #4
 8029e94:	07dd      	lsls	r5, r3, #31
 8029e96:	eb00 1000 	add.w	r0, r0, r0, lsl #4
 8029e9a:	b2c0      	uxtb	r0, r0
 8029e9c:	900b      	str	r0, [sp, #44]	@ 0x2c
 8029e9e:	ea4f 0053 	mov.w	r0, r3, lsr #1
 8029ea2:	f817 e000 	ldrb.w	lr, [r7, r0]
 8029ea6:	bf54      	ite	pl
 8029ea8:	f00e 030f 	andpl.w	r3, lr, #15
 8029eac:	ea4f 132e 	movmi.w	r3, lr, asr #4
 8029eb0:	eb03 1303 	add.w	r3, r3, r3, lsl #4
 8029eb4:	b2db      	uxtb	r3, r3
 8029eb6:	9311      	str	r3, [sp, #68]	@ 0x44
 8029eb8:	b292      	uxth	r2, r2
 8029eba:	9d10      	ldr	r5, [sp, #64]	@ 0x40
 8029ebc:	b289      	uxth	r1, r1
 8029ebe:	fb02 f301 	mul.w	r3, r2, r1
 8029ec2:	0112      	lsls	r2, r2, #4
 8029ec4:	ebc3 1101 	rsb	r1, r3, r1, lsl #4
 8029ec8:	f5c2 7080 	rsb	r0, r2, #256	@ 0x100
 8029ecc:	1ad2      	subs	r2, r2, r3
 8029ece:	b289      	uxth	r1, r1
 8029ed0:	b292      	uxth	r2, r2
 8029ed2:	1a40      	subs	r0, r0, r1
 8029ed4:	436a      	muls	r2, r5
 8029ed6:	b280      	uxth	r0, r0
 8029ed8:	fb0c 2c00 	mla	ip, ip, r0, r2
 8029edc:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 8029ede:	fb01 c102 	mla	r1, r1, r2, ip
 8029ee2:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 8029ee4:	fb03 1302 	mla	r3, r3, r2, r1
 8029ee8:	f3c3 2307 	ubfx	r3, r3, #8, #8
 8029eec:	b1db      	cbz	r3, 8029f26 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1e6>
 8029eee:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 8029ef0:	4353      	muls	r3, r2
 8029ef2:	1c5a      	adds	r2, r3, #1
 8029ef4:	eb02 2313 	add.w	r3, r2, r3, lsr #8
 8029ef8:	4ac6      	ldr	r2, [pc, #792]	@ (802a214 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4d4>)
 8029efa:	121b      	asrs	r3, r3, #8
 8029efc:	6812      	ldr	r2, [r2, #0]
 8029efe:	2bff      	cmp	r3, #255	@ 0xff
 8029f00:	ea4f 2c12 	mov.w	ip, r2, lsr #8
 8029f04:	f040 8099 	bne.w	802a03a <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2fa>
 8029f08:	0953      	lsrs	r3, r2, #5
 8029f0a:	f42c 6cff 	bic.w	ip, ip, #2040	@ 0x7f8
 8029f0e:	f3c2 02c4 	ubfx	r2, r2, #3, #5
 8029f12:	f403 63fc 	and.w	r3, r3, #2016	@ 0x7e0
 8029f16:	f02c 0c07 	bic.w	ip, ip, #7
 8029f1a:	ea43 0c0c 	orr.w	ip, r3, ip
 8029f1e:	ea4c 0202 	orr.w	r2, ip, r2
 8029f22:	f8a8 2000 	strh.w	r2, [r8]
 8029f26:	9b2b      	ldr	r3, [sp, #172]	@ 0xac
 8029f28:	f108 0802 	add.w	r8, r8, #2
 8029f2c:	441c      	add	r4, r3
 8029f2e:	9b2c      	ldr	r3, [sp, #176]	@ 0xb0
 8029f30:	441e      	add	r6, r3
 8029f32:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8029f34:	3b01      	subs	r3, #1
 8029f36:	930e      	str	r3, [sp, #56]	@ 0x38
 8029f38:	e762      	b.n	8029e00 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xc0>
 8029f3a:	9b2b      	ldr	r3, [sp, #172]	@ 0xac
 8029f3c:	f109 0902 	add.w	r9, r9, #2
 8029f40:	441c      	add	r4, r3
 8029f42:	9b2c      	ldr	r3, [sp, #176]	@ 0xb0
 8029f44:	441e      	add	r6, r3
 8029f46:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8029f48:	3b01      	subs	r3, #1
 8029f4a:	9309      	str	r3, [sp, #36]	@ 0x24
 8029f4c:	e736      	b.n	8029dbc <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7c>
 8029f4e:	d024      	beq.n	8029f9a <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x25a>
 8029f50:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8029f52:	982b      	ldr	r0, [sp, #172]	@ 0xac
 8029f54:	3b01      	subs	r3, #1
 8029f56:	fb00 4003 	mla	r0, r0, r3, r4
 8029f5a:	1400      	asrs	r0, r0, #16
 8029f5c:	f53f af4b 	bmi.w	8029df6 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xb6>
 8029f60:	3901      	subs	r1, #1
 8029f62:	4288      	cmp	r0, r1
 8029f64:	f6bf af47 	bge.w	8029df6 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xb6>
 8029f68:	992c      	ldr	r1, [sp, #176]	@ 0xb0
 8029f6a:	fb01 6303 	mla	r3, r1, r3, r6
 8029f6e:	141b      	asrs	r3, r3, #16
 8029f70:	f53f af41 	bmi.w	8029df6 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xb6>
 8029f74:	3a01      	subs	r2, #1
 8029f76:	4293      	cmp	r3, r2
 8029f78:	f6bf af3d 	bge.w	8029df6 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xb6>
 8029f7c:	f9bd 3028 	ldrsh.w	r3, [sp, #40]	@ 0x28
 8029f80:	46c8      	mov	r8, r9
 8029f82:	f8dd b024 	ldr.w	fp, [sp, #36]	@ 0x24
 8029f86:	930e      	str	r3, [sp, #56]	@ 0x38
 8029f88:	f1bb 0f00 	cmp.w	fp, #0
 8029f8c:	f300 80b7 	bgt.w	802a0fe <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3be>
 8029f90:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8029f92:	ea23 75e3 	bic.w	r5, r3, r3, asr #31
 8029f96:	eb09 0945 	add.w	r9, r9, r5, lsl #1
 8029f9a:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8029f9c:	2b00      	cmp	r3, #0
 8029f9e:	f340 818e 	ble.w	802a2be <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x57e>
 8029fa2:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8029fa6:	9b28      	ldr	r3, [sp, #160]	@ 0xa0
 8029fa8:	ee3a aa2b 	vadd.f32	s20, s20, s23
 8029fac:	ee79 9a8b 	vadd.f32	s19, s19, s22
 8029fb0:	eef0 6a48 	vmov.f32	s13, s16
 8029fb4:	eec7 7a0a 	vdiv.f32	s15, s14, s20
 8029fb8:	ee39 9a2a 	vadd.f32	s18, s18, s21
 8029fbc:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 8029fc0:	ee16 4a90 	vmov	r4, s13
 8029fc4:	eef0 6a68 	vmov.f32	s13, s17
 8029fc8:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 8029fcc:	ee16 6a90 	vmov	r6, s13
 8029fd0:	ee29 7aa7 	vmul.f32	s14, s19, s15
 8029fd4:	ee69 7a27 	vmul.f32	s15, s18, s15
 8029fd8:	ee37 8a48 	vsub.f32	s16, s14, s16
 8029fdc:	ee77 8ae8 	vsub.f32	s17, s15, s17
 8029fe0:	eebe 8ac8 	vcvt.s32.f32	s16, s16, #16
 8029fe4:	eefe 8ac8 	vcvt.s32.f32	s17, s17, #16
 8029fe8:	ee18 2a10 	vmov	r2, s16
 8029fec:	eeb0 8a47 	vmov.f32	s16, s14
 8029ff0:	fb92 f3f3 	sdiv	r3, r2, r3
 8029ff4:	ee18 2a90 	vmov	r2, s17
 8029ff8:	932b      	str	r3, [sp, #172]	@ 0xac
 8029ffa:	9b28      	ldr	r3, [sp, #160]	@ 0xa0
 8029ffc:	eef0 8a67 	vmov.f32	s17, s15
 802a000:	fb92 f3f3 	sdiv	r3, r2, r3
 802a004:	932c      	str	r3, [sp, #176]	@ 0xb0
 802a006:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 802a008:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 802a00a:	3b01      	subs	r3, #1
 802a00c:	930d      	str	r3, [sp, #52]	@ 0x34
 802a00e:	9b28      	ldr	r3, [sp, #160]	@ 0xa0
 802a010:	bf08      	it	eq
 802a012:	4613      	moveq	r3, r2
 802a014:	9309      	str	r3, [sp, #36]	@ 0x24
 802a016:	e6c2      	b.n	8029d9e <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5e>
 802a018:	2900      	cmp	r1, #0
 802a01a:	f43f af4d 	beq.w	8029eb8 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x178>
 802a01e:	eb0a 0003 	add.w	r0, sl, r3
 802a022:	0843      	lsrs	r3, r0, #1
 802a024:	07c0      	lsls	r0, r0, #31
 802a026:	5cfb      	ldrb	r3, [r7, r3]
 802a028:	bf54      	ite	pl
 802a02a:	f003 030f 	andpl.w	r3, r3, #15
 802a02e:	111b      	asrmi	r3, r3, #4
 802a030:	eb03 1303 	add.w	r3, r3, r3, lsl #4
 802a034:	b2db      	uxtb	r3, r3
 802a036:	930b      	str	r3, [sp, #44]	@ 0x2c
 802a038:	e73e      	b.n	8029eb8 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x178>
 802a03a:	f8b8 e000 	ldrh.w	lr, [r8]
 802a03e:	fa1f fb83 	uxth.w	fp, r3
 802a042:	f3c2 4107 	ubfx	r1, r2, #16, #8
 802a046:	43db      	mvns	r3, r3
 802a048:	ea4f 202e 	mov.w	r0, lr, asr #8
 802a04c:	fb11 f10b 	smulbb	r1, r1, fp
 802a050:	b2db      	uxtb	r3, r3
 802a052:	f000 00f8 	and.w	r0, r0, #248	@ 0xf8
 802a056:	fa5f fc8c 	uxtb.w	ip, ip
 802a05a:	b2d2      	uxtb	r2, r2
 802a05c:	fb00 1003 	mla	r0, r0, r3, r1
 802a060:	ea4f 01ee 	mov.w	r1, lr, asr #3
 802a064:	fb1c fc0b 	smulbb	ip, ip, fp
 802a068:	ea4f 0ece 	mov.w	lr, lr, lsl #3
 802a06c:	b280      	uxth	r0, r0
 802a06e:	f001 01fc 	and.w	r1, r1, #252	@ 0xfc
 802a072:	fb12 fb0b 	smulbb	fp, r2, fp
 802a076:	fa5f fe8e 	uxtb.w	lr, lr
 802a07a:	fb01 cc03 	mla	ip, r1, r3, ip
 802a07e:	fb0e bb03 	mla	fp, lr, r3, fp
 802a082:	1c43      	adds	r3, r0, #1
 802a084:	fa1f fc8c 	uxth.w	ip, ip
 802a088:	fa1f fb8b 	uxth.w	fp, fp
 802a08c:	eb03 2010 	add.w	r0, r3, r0, lsr #8
 802a090:	f10c 0101 	add.w	r1, ip, #1
 802a094:	f400 4378 	and.w	r3, r0, #63488	@ 0xf800
 802a098:	f10b 0001 	add.w	r0, fp, #1
 802a09c:	eb01 2c1c 	add.w	ip, r1, ip, lsr #8
 802a0a0:	eb00 201b 	add.w	r0, r0, fp, lsr #8
 802a0a4:	ea4f 1c5c 	mov.w	ip, ip, lsr #5
 802a0a8:	f3c0 20c4 	ubfx	r0, r0, #11, #5
 802a0ac:	f40c 6cfc 	and.w	ip, ip, #2016	@ 0x7e0
 802a0b0:	4318      	orrs	r0, r3
 802a0b2:	ea40 000c 	orr.w	r0, r0, ip
 802a0b6:	f8a8 0000 	strh.w	r0, [r8]
 802a0ba:	e734      	b.n	8029f26 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1e6>
 802a0bc:	f113 0b01 	adds.w	fp, r3, #1
 802a0c0:	f53f af31 	bmi.w	8029f26 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1e6>
 802a0c4:	45dc      	cmp	ip, fp
 802a0c6:	f6ff af2e 	blt.w	8029f26 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1e6>
 802a0ca:	f110 0b01 	adds.w	fp, r0, #1
 802a0ce:	f53f af2a 	bmi.w	8029f26 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1e6>
 802a0d2:	45de      	cmp	lr, fp
 802a0d4:	f6ff af27 	blt.w	8029f26 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1e6>
 802a0d8:	9302      	str	r3, [sp, #8]
 802a0da:	fa0f f38e 	sxth.w	r3, lr
 802a0de:	9d0f      	ldr	r5, [sp, #60]	@ 0x3c
 802a0e0:	9301      	str	r3, [sp, #4]
 802a0e2:	fa0f f38c 	sxth.w	r3, ip
 802a0e6:	e9cd 0203 	strd	r0, r2, [sp, #12]
 802a0ea:	e9cd 1505 	strd	r1, r5, [sp, #20]
 802a0ee:	9300      	str	r3, [sp, #0]
 802a0f0:	463a      	mov	r2, r7
 802a0f2:	4653      	mov	r3, sl
 802a0f4:	4641      	mov	r1, r8
 802a0f6:	9815      	ldr	r0, [sp, #84]	@ 0x54
 802a0f8:	f7ff fd2a 	bl	8029b50 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh>
 802a0fc:	e713      	b.n	8029f26 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1e6>
 802a0fe:	1422      	asrs	r2, r4, #16
 802a100:	9d0a      	ldr	r5, [sp, #40]	@ 0x28
 802a102:	1433      	asrs	r3, r6, #16
 802a104:	f3c4 3103 	ubfx	r1, r4, #12, #4
 802a108:	f3c6 3003 	ubfx	r0, r6, #12, #4
 802a10c:	fb05 2303 	mla	r3, r5, r3, r2
 802a110:	085a      	lsrs	r2, r3, #1
 802a112:	07dd      	lsls	r5, r3, #31
 802a114:	5cba      	ldrb	r2, [r7, r2]
 802a116:	bf54      	ite	pl
 802a118:	f002 020f 	andpl.w	r2, r2, #15
 802a11c:	1112      	asrmi	r2, r2, #4
 802a11e:	eb02 1202 	add.w	r2, r2, r2, lsl #4
 802a122:	b2d2      	uxtb	r2, r2
 802a124:	2900      	cmp	r1, #0
 802a126:	d077      	beq.n	802a218 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4d8>
 802a128:	f103 0e01 	add.w	lr, r3, #1
 802a12c:	ea4f 0c5e 	mov.w	ip, lr, lsr #1
 802a130:	f01e 0f01 	tst.w	lr, #1
 802a134:	f817 c00c 	ldrb.w	ip, [r7, ip]
 802a138:	bf0c      	ite	eq
 802a13a:	f00c 0c0f 	andeq.w	ip, ip, #15
 802a13e:	ea4f 1c2c 	movne.w	ip, ip, asr #4
 802a142:	eb0c 1c0c 	add.w	ip, ip, ip, lsl #4
 802a146:	fa5f f58c 	uxtb.w	r5, ip
 802a14a:	9512      	str	r5, [sp, #72]	@ 0x48
 802a14c:	b308      	cbz	r0, 802a192 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x452>
 802a14e:	9d0e      	ldr	r5, [sp, #56]	@ 0x38
 802a150:	442b      	add	r3, r5
 802a152:	ea4f 0c53 	mov.w	ip, r3, lsr #1
 802a156:	07dd      	lsls	r5, r3, #31
 802a158:	f103 0301 	add.w	r3, r3, #1
 802a15c:	f817 c00c 	ldrb.w	ip, [r7, ip]
 802a160:	bf54      	ite	pl
 802a162:	f00c 0c0f 	andpl.w	ip, ip, #15
 802a166:	ea4f 1c2c 	movmi.w	ip, ip, asr #4
 802a16a:	eb0c 1c0c 	add.w	ip, ip, ip, lsl #4
 802a16e:	fa5f f58c 	uxtb.w	r5, ip
 802a172:	ea4f 0c53 	mov.w	ip, r3, lsr #1
 802a176:	950c      	str	r5, [sp, #48]	@ 0x30
 802a178:	07dd      	lsls	r5, r3, #31
 802a17a:	f817 c00c 	ldrb.w	ip, [r7, ip]
 802a17e:	bf54      	ite	pl
 802a180:	f00c 0c0f 	andpl.w	ip, ip, #15
 802a184:	ea4f 1c2c 	movmi.w	ip, ip, asr #4
 802a188:	eb0c 1c0c 	add.w	ip, ip, ip, lsl #4
 802a18c:	fa5f f38c 	uxtb.w	r3, ip
 802a190:	9313      	str	r3, [sp, #76]	@ 0x4c
 802a192:	b289      	uxth	r1, r1
 802a194:	9d12      	ldr	r5, [sp, #72]	@ 0x48
 802a196:	b280      	uxth	r0, r0
 802a198:	fb01 f300 	mul.w	r3, r1, r0
 802a19c:	0109      	lsls	r1, r1, #4
 802a19e:	ebc3 1000 	rsb	r0, r3, r0, lsl #4
 802a1a2:	f5c1 7c80 	rsb	ip, r1, #256	@ 0x100
 802a1a6:	1ac9      	subs	r1, r1, r3
 802a1a8:	b280      	uxth	r0, r0
 802a1aa:	b289      	uxth	r1, r1
 802a1ac:	ebac 0c00 	sub.w	ip, ip, r0
 802a1b0:	4369      	muls	r1, r5
 802a1b2:	fa1f fc8c 	uxth.w	ip, ip
 802a1b6:	fb02 120c 	mla	r2, r2, ip, r1
 802a1ba:	990c      	ldr	r1, [sp, #48]	@ 0x30
 802a1bc:	fb00 2001 	mla	r0, r0, r1, r2
 802a1c0:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 802a1c2:	fb03 0302 	mla	r3, r3, r2, r0
 802a1c6:	f3c3 2307 	ubfx	r3, r3, #8, #8
 802a1ca:	b1d3      	cbz	r3, 802a202 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4c2>
 802a1cc:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 802a1ce:	4353      	muls	r3, r2
 802a1d0:	1c5a      	adds	r2, r3, #1
 802a1d2:	eb02 2313 	add.w	r3, r2, r3, lsr #8
 802a1d6:	4a0f      	ldr	r2, [pc, #60]	@ (802a214 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4d4>)
 802a1d8:	121b      	asrs	r3, r3, #8
 802a1da:	6812      	ldr	r2, [r2, #0]
 802a1dc:	2bff      	cmp	r3, #255	@ 0xff
 802a1de:	ea4f 2c12 	mov.w	ip, r2, lsr #8
 802a1e2:	d12d      	bne.n	802a240 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x500>
 802a1e4:	0953      	lsrs	r3, r2, #5
 802a1e6:	f42c 6cff 	bic.w	ip, ip, #2040	@ 0x7f8
 802a1ea:	f3c2 02c4 	ubfx	r2, r2, #3, #5
 802a1ee:	f403 63fc 	and.w	r3, r3, #2016	@ 0x7e0
 802a1f2:	f02c 0c07 	bic.w	ip, ip, #7
 802a1f6:	ea43 0c0c 	orr.w	ip, r3, ip
 802a1fa:	ea4c 0202 	orr.w	r2, ip, r2
 802a1fe:	f8a8 2000 	strh.w	r2, [r8]
 802a202:	9b2b      	ldr	r3, [sp, #172]	@ 0xac
 802a204:	f108 0802 	add.w	r8, r8, #2
 802a208:	f10b 3bff 	add.w	fp, fp, #4294967295
 802a20c:	441c      	add	r4, r3
 802a20e:	9b2c      	ldr	r3, [sp, #176]	@ 0xb0
 802a210:	441e      	add	r6, r3
 802a212:	e6b9      	b.n	8029f88 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x248>
 802a214:	2400b88c 	.word	0x2400b88c
 802a218:	2800      	cmp	r0, #0
 802a21a:	d0ba      	beq.n	802a192 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x452>
 802a21c:	9d0e      	ldr	r5, [sp, #56]	@ 0x38
 802a21e:	442b      	add	r3, r5
 802a220:	ea4f 0c53 	mov.w	ip, r3, lsr #1
 802a224:	07db      	lsls	r3, r3, #31
 802a226:	f817 c00c 	ldrb.w	ip, [r7, ip]
 802a22a:	bf54      	ite	pl
 802a22c:	f00c 0c0f 	andpl.w	ip, ip, #15
 802a230:	ea4f 1c2c 	movmi.w	ip, ip, asr #4
 802a234:	eb0c 1c0c 	add.w	ip, ip, ip, lsl #4
 802a238:	fa5f f38c 	uxtb.w	r3, ip
 802a23c:	930c      	str	r3, [sp, #48]	@ 0x30
 802a23e:	e7a8      	b.n	802a192 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x452>
 802a240:	f8b8 e000 	ldrh.w	lr, [r8]
 802a244:	fa1f fa83 	uxth.w	sl, r3
 802a248:	f3c2 4107 	ubfx	r1, r2, #16, #8
 802a24c:	43db      	mvns	r3, r3
 802a24e:	ea4f 202e 	mov.w	r0, lr, asr #8
 802a252:	fb11 f10a 	smulbb	r1, r1, sl
 802a256:	b2db      	uxtb	r3, r3
 802a258:	f000 00f8 	and.w	r0, r0, #248	@ 0xf8
 802a25c:	b2d2      	uxtb	r2, r2
 802a25e:	fa5f fc8c 	uxtb.w	ip, ip
 802a262:	fb00 1003 	mla	r0, r0, r3, r1
 802a266:	ea4f 01ee 	mov.w	r1, lr, asr #3
 802a26a:	fb12 f20a 	smulbb	r2, r2, sl
 802a26e:	ea4f 0ece 	mov.w	lr, lr, lsl #3
 802a272:	b280      	uxth	r0, r0
 802a274:	f001 01fc 	and.w	r1, r1, #252	@ 0xfc
 802a278:	fb1c fc0a 	smulbb	ip, ip, sl
 802a27c:	fa5f fe8e 	uxtb.w	lr, lr
 802a280:	fb0e 2203 	mla	r2, lr, r3, r2
 802a284:	fb01 cc03 	mla	ip, r1, r3, ip
 802a288:	1c43      	adds	r3, r0, #1
 802a28a:	b292      	uxth	r2, r2
 802a28c:	eb03 2010 	add.w	r0, r3, r0, lsr #8
 802a290:	1c51      	adds	r1, r2, #1
 802a292:	fa1f fc8c 	uxth.w	ip, ip
 802a296:	f400 4078 	and.w	r0, r0, #63488	@ 0xf800
 802a29a:	eb01 2112 	add.w	r1, r1, r2, lsr #8
 802a29e:	f3c1 21c4 	ubfx	r1, r1, #11, #5
 802a2a2:	4308      	orrs	r0, r1
 802a2a4:	f10c 0101 	add.w	r1, ip, #1
 802a2a8:	eb01 2c1c 	add.w	ip, r1, ip, lsr #8
 802a2ac:	ea4f 1c5c 	mov.w	ip, ip, lsr #5
 802a2b0:	f40c 6cfc 	and.w	ip, ip, #2016	@ 0x7e0
 802a2b4:	ea40 000c 	orr.w	r0, r0, ip
 802a2b8:	f8a8 0000 	strh.w	r0, [r8]
 802a2bc:	e7a1      	b.n	802a202 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4c2>
 802a2be:	b017      	add	sp, #92	@ 0x5c
 802a2c0:	ecbd 8b08 	vpop	{d8-d11}
 802a2c4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0802a2c8 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh>:
 802a2c8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 802a2cc:	e9dd c40a 	ldrd	ip, r4, [sp, #40]	@ 0x28
 802a2d0:	f9bd 8020 	ldrsh.w	r8, [sp, #32]
 802a2d4:	2c00      	cmp	r4, #0
 802a2d6:	f9bd 9024 	ldrsh.w	r9, [sp, #36]	@ 0x24
 802a2da:	f89d 5030 	ldrb.w	r5, [sp, #48]	@ 0x30
 802a2de:	fb04 ce03 	mla	lr, r4, r3, ip
 802a2e2:	f89d 7034 	ldrb.w	r7, [sp, #52]	@ 0x34
 802a2e6:	db60      	blt.n	802a3aa <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0xe2>
 802a2e8:	45a1      	cmp	r9, r4
 802a2ea:	dd5e      	ble.n	802a3aa <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0xe2>
 802a2ec:	f1bc 0f00 	cmp.w	ip, #0
 802a2f0:	db59      	blt.n	802a3a6 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0xde>
 802a2f2:	45e0      	cmp	r8, ip
 802a2f4:	dd57      	ble.n	802a3a6 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0xde>
 802a2f6:	ea4f 005e 	mov.w	r0, lr, lsr #1
 802a2fa:	f01e 0f01 	tst.w	lr, #1
 802a2fe:	5c16      	ldrb	r6, [r2, r0]
 802a300:	bf0c      	ite	eq
 802a302:	f006 060f 	andeq.w	r6, r6, #15
 802a306:	1136      	asrne	r6, r6, #4
 802a308:	eb06 1606 	add.w	r6, r6, r6, lsl #4
 802a30c:	b2f6      	uxtb	r6, r6
 802a30e:	f11c 0001 	adds.w	r0, ip, #1
 802a312:	d44d      	bmi.n	802a3b0 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0xe8>
 802a314:	4580      	cmp	r8, r0
 802a316:	dd4b      	ble.n	802a3b0 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0xe8>
 802a318:	2d00      	cmp	r5, #0
 802a31a:	d04b      	beq.n	802a3b4 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0xec>
 802a31c:	f10e 0a01 	add.w	sl, lr, #1
 802a320:	ea4f 005a 	mov.w	r0, sl, lsr #1
 802a324:	f01a 0f01 	tst.w	sl, #1
 802a328:	5c10      	ldrb	r0, [r2, r0]
 802a32a:	bf0c      	ite	eq
 802a32c:	f000 000f 	andeq.w	r0, r0, #15
 802a330:	1100      	asrne	r0, r0, #4
 802a332:	eb00 1000 	add.w	r0, r0, r0, lsl #4
 802a336:	b2c0      	uxtb	r0, r0
 802a338:	3401      	adds	r4, #1
 802a33a:	d43f      	bmi.n	802a3bc <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0xf4>
 802a33c:	45a1      	cmp	r9, r4
 802a33e:	dd3d      	ble.n	802a3bc <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0xf4>
 802a340:	2f00      	cmp	r7, #0
 802a342:	f000 8093 	beq.w	802a46c <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0x1a4>
 802a346:	f1bc 0f00 	cmp.w	ip, #0
 802a34a:	db35      	blt.n	802a3b8 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0xf0>
 802a34c:	45e0      	cmp	r8, ip
 802a34e:	dd33      	ble.n	802a3b8 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0xf0>
 802a350:	eb03 090e 	add.w	r9, r3, lr
 802a354:	ea4f 0459 	mov.w	r4, r9, lsr #1
 802a358:	f019 0f01 	tst.w	r9, #1
 802a35c:	5d14      	ldrb	r4, [r2, r4]
 802a35e:	bf0c      	ite	eq
 802a360:	f004 040f 	andeq.w	r4, r4, #15
 802a364:	1124      	asrne	r4, r4, #4
 802a366:	eb04 1404 	add.w	r4, r4, r4, lsl #4
 802a36a:	b2e4      	uxtb	r4, r4
 802a36c:	f11c 0c01 	adds.w	ip, ip, #1
 802a370:	d427      	bmi.n	802a3c2 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0xfa>
 802a372:	45e0      	cmp	r8, ip
 802a374:	dd25      	ble.n	802a3c2 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0xfa>
 802a376:	b335      	cbz	r5, 802a3c6 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0xfe>
 802a378:	3301      	adds	r3, #1
 802a37a:	449e      	add	lr, r3
 802a37c:	ea4f 035e 	mov.w	r3, lr, lsr #1
 802a380:	f01e 0f01 	tst.w	lr, #1
 802a384:	5cd2      	ldrb	r2, [r2, r3]
 802a386:	bf0c      	ite	eq
 802a388:	f002 020f 	andeq.w	r2, r2, #15
 802a38c:	1112      	asrne	r2, r2, #4
 802a38e:	eb02 1202 	add.w	r2, r2, r2, lsl #4
 802a392:	b2d3      	uxtb	r3, r2
 802a394:	2d0f      	cmp	r5, #15
 802a396:	d917      	bls.n	802a3c8 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0x100>
 802a398:	4b37      	ldr	r3, [pc, #220]	@ (802a478 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0x1b0>)
 802a39a:	f44f 71fb 	mov.w	r1, #502	@ 0x1f6
 802a39e:	4a37      	ldr	r2, [pc, #220]	@ (802a47c <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0x1b4>)
 802a3a0:	4837      	ldr	r0, [pc, #220]	@ (802a480 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0x1b8>)
 802a3a2:	f000 fc4f 	bl	802ac44 <__assert_func>
 802a3a6:	2600      	movs	r6, #0
 802a3a8:	e7b1      	b.n	802a30e <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0x46>
 802a3aa:	2000      	movs	r0, #0
 802a3ac:	4606      	mov	r6, r0
 802a3ae:	e7c3      	b.n	802a338 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0x70>
 802a3b0:	2000      	movs	r0, #0
 802a3b2:	e7c1      	b.n	802a338 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0x70>
 802a3b4:	4628      	mov	r0, r5
 802a3b6:	e7bf      	b.n	802a338 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0x70>
 802a3b8:	2400      	movs	r4, #0
 802a3ba:	e7d7      	b.n	802a36c <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0xa4>
 802a3bc:	2300      	movs	r3, #0
 802a3be:	461c      	mov	r4, r3
 802a3c0:	e7e8      	b.n	802a394 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0xcc>
 802a3c2:	2300      	movs	r3, #0
 802a3c4:	e7e6      	b.n	802a394 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0xcc>
 802a3c6:	462b      	mov	r3, r5
 802a3c8:	2f0f      	cmp	r7, #15
 802a3ca:	d8e5      	bhi.n	802a398 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0xd0>
 802a3cc:	b2ad      	uxth	r5, r5
 802a3ce:	b2bf      	uxth	r7, r7
 802a3d0:	fb05 fc07 	mul.w	ip, r5, r7
 802a3d4:	012d      	lsls	r5, r5, #4
 802a3d6:	ebcc 1707 	rsb	r7, ip, r7, lsl #4
 802a3da:	f5c5 7280 	rsb	r2, r5, #256	@ 0x100
 802a3de:	eba5 050c 	sub.w	r5, r5, ip
 802a3e2:	b2bf      	uxth	r7, r7
 802a3e4:	b2ad      	uxth	r5, r5
 802a3e6:	1bd2      	subs	r2, r2, r7
 802a3e8:	4368      	muls	r0, r5
 802a3ea:	b292      	uxth	r2, r2
 802a3ec:	fb06 0002 	mla	r0, r6, r2, r0
 802a3f0:	fb07 0404 	mla	r4, r7, r4, r0
 802a3f4:	fb0c 4303 	mla	r3, ip, r3, r4
 802a3f8:	f3c3 2307 	ubfx	r3, r3, #8, #8
 802a3fc:	b3a3      	cbz	r3, 802a468 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0x1a0>
 802a3fe:	4a21      	ldr	r2, [pc, #132]	@ (802a484 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0x1bc>)
 802a400:	880e      	ldrh	r6, [r1, #0]
 802a402:	6815      	ldr	r5, [r2, #0]
 802a404:	b29a      	uxth	r2, r3
 802a406:	1234      	asrs	r4, r6, #8
 802a408:	43db      	mvns	r3, r3
 802a40a:	f3c5 4007 	ubfx	r0, r5, #16, #8
 802a40e:	f3c5 2707 	ubfx	r7, r5, #8, #8
 802a412:	b2db      	uxtb	r3, r3
 802a414:	f004 04f8 	and.w	r4, r4, #248	@ 0xf8
 802a418:	fb10 f002 	smulbb	r0, r0, r2
 802a41c:	b2ed      	uxtb	r5, r5
 802a41e:	fb17 f702 	smulbb	r7, r7, r2
 802a422:	fb04 0403 	mla	r4, r4, r3, r0
 802a426:	10f0      	asrs	r0, r6, #3
 802a428:	fb15 f202 	smulbb	r2, r5, r2
 802a42c:	00f6      	lsls	r6, r6, #3
 802a42e:	f000 00fc 	and.w	r0, r0, #252	@ 0xfc
 802a432:	b2a4      	uxth	r4, r4
 802a434:	b2f6      	uxtb	r6, r6
 802a436:	fb00 7003 	mla	r0, r0, r3, r7
 802a43a:	fb06 2303 	mla	r3, r6, r3, r2
 802a43e:	b280      	uxth	r0, r0
 802a440:	b29a      	uxth	r2, r3
 802a442:	1c63      	adds	r3, r4, #1
 802a444:	eb03 2414 	add.w	r4, r3, r4, lsr #8
 802a448:	1c53      	adds	r3, r2, #1
 802a44a:	eb03 2312 	add.w	r3, r3, r2, lsr #8
 802a44e:	1c42      	adds	r2, r0, #1
 802a450:	f404 4478 	and.w	r4, r4, #63488	@ 0xf800
 802a454:	eb02 2010 	add.w	r0, r2, r0, lsr #8
 802a458:	f3c3 23c4 	ubfx	r3, r3, #11, #5
 802a45c:	0940      	lsrs	r0, r0, #5
 802a45e:	4323      	orrs	r3, r4
 802a460:	f400 60fc 	and.w	r0, r0, #2016	@ 0x7e0
 802a464:	4303      	orrs	r3, r0
 802a466:	800b      	strh	r3, [r1, #0]
 802a468:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 802a46c:	2d0f      	cmp	r5, #15
 802a46e:	d893      	bhi.n	802a398 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0xd0>
 802a470:	463b      	mov	r3, r7
 802a472:	463c      	mov	r4, r7
 802a474:	e7aa      	b.n	802a3cc <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0x104>
 802a476:	bf00      	nop
 802a478:	0802fed5 	.word	0x0802fed5
 802a47c:	080304a2 	.word	0x080304a2
 802a480:	0802ff59 	.word	0x0802ff59
 802a484:	2400b88c 	.word	0x2400b88c

0802a488 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 802a488:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 802a48c:	ed2d 8b08 	vpush	{d8-d11}
 802a490:	b093      	sub	sp, #76	@ 0x4c
 802a492:	461d      	mov	r5, r3
 802a494:	eeb0 aa40 	vmov.f32	s20, s0
 802a498:	920c      	str	r2, [sp, #48]	@ 0x30
 802a49a:	eef0 9a60 	vmov.f32	s19, s1
 802a49e:	9a29      	ldr	r2, [sp, #164]	@ 0xa4
 802a4a0:	eeb0 9a41 	vmov.f32	s18, s2
 802a4a4:	9011      	str	r0, [sp, #68]	@ 0x44
 802a4a6:	eeb0 8a62 	vmov.f32	s16, s5
 802a4aa:	6850      	ldr	r0, [r2, #4]
 802a4ac:	eef0 8a43 	vmov.f32	s17, s6
 802a4b0:	9107      	str	r1, [sp, #28]
 802a4b2:	eef0 ba44 	vmov.f32	s23, s8
 802a4b6:	6812      	ldr	r2, [r2, #0]
 802a4b8:	eeb0 ba64 	vmov.f32	s22, s9
 802a4bc:	eef0 aa45 	vmov.f32	s21, s10
 802a4c0:	e9dd 132a 	ldrd	r1, r3, [sp, #168]	@ 0xa8
 802a4c4:	e9dd 4625 	ldrd	r4, r6, [sp, #148]	@ 0x94
 802a4c8:	fb00 1303 	mla	r3, r0, r3, r1
 802a4cc:	eb02 0943 	add.w	r9, r2, r3, lsl #1
 802a4d0:	9b2c      	ldr	r3, [sp, #176]	@ 0xb0
 802a4d2:	689b      	ldr	r3, [r3, #8]
 802a4d4:	3301      	adds	r3, #1
 802a4d6:	f023 0301 	bic.w	r3, r3, #1
 802a4da:	9306      	str	r3, [sp, #24]
 802a4dc:	9b2c      	ldr	r3, [sp, #176]	@ 0xb0
 802a4de:	681f      	ldr	r7, [r3, #0]
 802a4e0:	9b07      	ldr	r3, [sp, #28]
 802a4e2:	2b00      	cmp	r3, #0
 802a4e4:	dc03      	bgt.n	802a4ee <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x66>
 802a4e6:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 802a4e8:	2b00      	cmp	r3, #0
 802a4ea:	f340 8267 	ble.w	802a9bc <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x534>
 802a4ee:	9b2c      	ldr	r3, [sp, #176]	@ 0xb0
 802a4f0:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 802a4f4:	f9b3 200c 	ldrsh.w	r2, [r3, #12]
 802a4f8:	1e48      	subs	r0, r1, #1
 802a4fa:	f102 3cff 	add.w	ip, r2, #4294967295
 802a4fe:	2d00      	cmp	r5, #0
 802a500:	f340 80b7 	ble.w	802a672 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ea>
 802a504:	ea5f 4e24 	movs.w	lr, r4, asr #16
 802a508:	ea4f 4326 	mov.w	r3, r6, asr #16
 802a50c:	d406      	bmi.n	802a51c <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x94>
 802a50e:	4586      	cmp	lr, r0
 802a510:	da04      	bge.n	802a51c <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x94>
 802a512:	2b00      	cmp	r3, #0
 802a514:	db02      	blt.n	802a51c <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x94>
 802a516:	4563      	cmp	r3, ip
 802a518:	f2c0 80ac 	blt.w	802a674 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ec>
 802a51c:	f11e 0e01 	adds.w	lr, lr, #1
 802a520:	f100 809f 	bmi.w	802a662 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1da>
 802a524:	4571      	cmp	r1, lr
 802a526:	f2c0 809c 	blt.w	802a662 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1da>
 802a52a:	3301      	adds	r3, #1
 802a52c:	f100 8099 	bmi.w	802a662 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1da>
 802a530:	429a      	cmp	r2, r3
 802a532:	f2c0 8096 	blt.w	802a662 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1da>
 802a536:	46c8      	mov	r8, r9
 802a538:	f9bd a018 	ldrsh.w	sl, [sp, #24]
 802a53c:	9509      	str	r5, [sp, #36]	@ 0x24
 802a53e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 802a540:	2b00      	cmp	r3, #0
 802a542:	f340 80b5 	ble.w	802a6b0 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x228>
 802a546:	f3c4 3303 	ubfx	r3, r4, #12, #4
 802a54a:	1430      	asrs	r0, r6, #16
 802a54c:	f3c6 3103 	ubfx	r1, r6, #12, #4
 802a550:	9308      	str	r3, [sp, #32]
 802a552:	9b2c      	ldr	r3, [sp, #176]	@ 0xb0
 802a554:	e9d3 ce02 	ldrd	ip, lr, [r3, #8]
 802a558:	1423      	asrs	r3, r4, #16
 802a55a:	f100 813f 	bmi.w	802a7dc <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x354>
 802a55e:	f10c 3bff 	add.w	fp, ip, #4294967295
 802a562:	455b      	cmp	r3, fp
 802a564:	f280 813a 	bge.w	802a7dc <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x354>
 802a568:	2800      	cmp	r0, #0
 802a56a:	f2c0 8137 	blt.w	802a7dc <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x354>
 802a56e:	f10e 3bff 	add.w	fp, lr, #4294967295
 802a572:	4558      	cmp	r0, fp
 802a574:	f280 8132 	bge.w	802a7dc <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x354>
 802a578:	9a06      	ldr	r2, [sp, #24]
 802a57a:	fb00 3302 	mla	r3, r0, r2, r3
 802a57e:	0858      	lsrs	r0, r3, #1
 802a580:	07da      	lsls	r2, r3, #31
 802a582:	9a08      	ldr	r2, [sp, #32]
 802a584:	f817 c000 	ldrb.w	ip, [r7, r0]
 802a588:	bf54      	ite	pl
 802a58a:	f00c 0c0f 	andpl.w	ip, ip, #15
 802a58e:	ea4f 1c2c 	movmi.w	ip, ip, asr #4
 802a592:	eb0c 1c0c 	add.w	ip, ip, ip, lsl #4
 802a596:	fa5f fc8c 	uxtb.w	ip, ip
 802a59a:	2a00      	cmp	r2, #0
 802a59c:	f000 80cc 	beq.w	802a738 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2b0>
 802a5a0:	1c58      	adds	r0, r3, #1
 802a5a2:	ea4f 0e50 	mov.w	lr, r0, lsr #1
 802a5a6:	07c0      	lsls	r0, r0, #31
 802a5a8:	f817 e00e 	ldrb.w	lr, [r7, lr]
 802a5ac:	bf54      	ite	pl
 802a5ae:	f00e 0e0f 	andpl.w	lr, lr, #15
 802a5b2:	ea4f 1e2e 	movmi.w	lr, lr, asr #4
 802a5b6:	eb0e 1e0e 	add.w	lr, lr, lr, lsl #4
 802a5ba:	fa5f fe8e 	uxtb.w	lr, lr
 802a5be:	f8cd e034 	str.w	lr, [sp, #52]	@ 0x34
 802a5c2:	b1b9      	cbz	r1, 802a5f4 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x16c>
 802a5c4:	4453      	add	r3, sl
 802a5c6:	0858      	lsrs	r0, r3, #1
 802a5c8:	07da      	lsls	r2, r3, #31
 802a5ca:	5c38      	ldrb	r0, [r7, r0]
 802a5cc:	bf54      	ite	pl
 802a5ce:	f000 000f 	andpl.w	r0, r0, #15
 802a5d2:	1100      	asrmi	r0, r0, #4
 802a5d4:	eb00 1000 	add.w	r0, r0, r0, lsl #4
 802a5d8:	b2c0      	uxtb	r0, r0
 802a5da:	900a      	str	r0, [sp, #40]	@ 0x28
 802a5dc:	1c58      	adds	r0, r3, #1
 802a5de:	0843      	lsrs	r3, r0, #1
 802a5e0:	07c2      	lsls	r2, r0, #31
 802a5e2:	5cfb      	ldrb	r3, [r7, r3]
 802a5e4:	bf54      	ite	pl
 802a5e6:	f003 030f 	andpl.w	r3, r3, #15
 802a5ea:	111b      	asrmi	r3, r3, #4
 802a5ec:	eb03 1303 	add.w	r3, r3, r3, lsl #4
 802a5f0:	b2db      	uxtb	r3, r3
 802a5f2:	930e      	str	r3, [sp, #56]	@ 0x38
 802a5f4:	f8bd 2020 	ldrh.w	r2, [sp, #32]
 802a5f8:	b289      	uxth	r1, r1
 802a5fa:	fb02 f301 	mul.w	r3, r2, r1
 802a5fe:	0112      	lsls	r2, r2, #4
 802a600:	ebc3 1101 	rsb	r1, r3, r1, lsl #4
 802a604:	f5c2 7080 	rsb	r0, r2, #256	@ 0x100
 802a608:	1ad2      	subs	r2, r2, r3
 802a60a:	b289      	uxth	r1, r1
 802a60c:	b292      	uxth	r2, r2
 802a60e:	1a40      	subs	r0, r0, r1
 802a610:	fa1f fe80 	uxth.w	lr, r0
 802a614:	980d      	ldr	r0, [sp, #52]	@ 0x34
 802a616:	4342      	muls	r2, r0
 802a618:	fb0c 2c0e 	mla	ip, ip, lr, r2
 802a61c:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 802a61e:	fb01 c102 	mla	r1, r1, r2, ip
 802a622:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 802a624:	fb03 1302 	mla	r3, r3, r2, r1
 802a628:	f3c3 2307 	ubfx	r3, r3, #8, #8
 802a62c:	2bff      	cmp	r3, #255	@ 0xff
 802a62e:	f040 8094 	bne.w	802a75a <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2d2>
 802a632:	4bbf      	ldr	r3, [pc, #764]	@ (802a930 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4a8>)
 802a634:	681a      	ldr	r2, [r3, #0]
 802a636:	4bbf      	ldr	r3, [pc, #764]	@ (802a934 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4ac>)
 802a638:	0951      	lsrs	r1, r2, #5
 802a63a:	ea03 2312 	and.w	r3, r3, r2, lsr #8
 802a63e:	f3c2 02c4 	ubfx	r2, r2, #3, #5
 802a642:	f401 61fc 	and.w	r1, r1, #2016	@ 0x7e0
 802a646:	430b      	orrs	r3, r1
 802a648:	4313      	orrs	r3, r2
 802a64a:	f8a8 3000 	strh.w	r3, [r8]
 802a64e:	9b27      	ldr	r3, [sp, #156]	@ 0x9c
 802a650:	f108 0802 	add.w	r8, r8, #2
 802a654:	441c      	add	r4, r3
 802a656:	9b28      	ldr	r3, [sp, #160]	@ 0xa0
 802a658:	441e      	add	r6, r3
 802a65a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 802a65c:	3b01      	subs	r3, #1
 802a65e:	9309      	str	r3, [sp, #36]	@ 0x24
 802a660:	e76d      	b.n	802a53e <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xb6>
 802a662:	9b27      	ldr	r3, [sp, #156]	@ 0x9c
 802a664:	3d01      	subs	r5, #1
 802a666:	f109 0902 	add.w	r9, r9, #2
 802a66a:	441c      	add	r4, r3
 802a66c:	9b28      	ldr	r3, [sp, #160]	@ 0xa0
 802a66e:	441e      	add	r6, r3
 802a670:	e745      	b.n	802a4fe <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x76>
 802a672:	d021      	beq.n	802a6b8 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x230>
 802a674:	1e6b      	subs	r3, r5, #1
 802a676:	9827      	ldr	r0, [sp, #156]	@ 0x9c
 802a678:	fb00 4003 	mla	r0, r0, r3, r4
 802a67c:	1400      	asrs	r0, r0, #16
 802a67e:	f53f af5a 	bmi.w	802a536 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xae>
 802a682:	3901      	subs	r1, #1
 802a684:	4288      	cmp	r0, r1
 802a686:	f6bf af56 	bge.w	802a536 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xae>
 802a68a:	9928      	ldr	r1, [sp, #160]	@ 0xa0
 802a68c:	fb01 6303 	mla	r3, r1, r3, r6
 802a690:	141b      	asrs	r3, r3, #16
 802a692:	f53f af50 	bmi.w	802a536 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xae>
 802a696:	3a01      	subs	r2, #1
 802a698:	4293      	cmp	r3, r2
 802a69a:	f6bf af4c 	bge.w	802a536 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xae>
 802a69e:	f9bd 3018 	ldrsh.w	r3, [sp, #24]
 802a6a2:	46a8      	mov	r8, r5
 802a6a4:	46ce      	mov	lr, r9
 802a6a6:	9308      	str	r3, [sp, #32]
 802a6a8:	f1b8 0f00 	cmp.w	r8, #0
 802a6ac:	f300 80b6 	bgt.w	802a81c <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x394>
 802a6b0:	ea25 75e5 	bic.w	r5, r5, r5, asr #31
 802a6b4:	eb09 0945 	add.w	r9, r9, r5, lsl #1
 802a6b8:	9b07      	ldr	r3, [sp, #28]
 802a6ba:	2b00      	cmp	r3, #0
 802a6bc:	f340 817e 	ble.w	802a9bc <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x534>
 802a6c0:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 802a6c4:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 802a6c6:	ee3a aa2b 	vadd.f32	s20, s20, s23
 802a6ca:	ee79 9a8b 	vadd.f32	s19, s19, s22
 802a6ce:	eef0 6a48 	vmov.f32	s13, s16
 802a6d2:	eec7 7a0a 	vdiv.f32	s15, s14, s20
 802a6d6:	ee39 9a2a 	vadd.f32	s18, s18, s21
 802a6da:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 802a6de:	ee16 4a90 	vmov	r4, s13
 802a6e2:	eef0 6a68 	vmov.f32	s13, s17
 802a6e6:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 802a6ea:	ee16 6a90 	vmov	r6, s13
 802a6ee:	ee29 7aa7 	vmul.f32	s14, s19, s15
 802a6f2:	ee69 7a27 	vmul.f32	s15, s18, s15
 802a6f6:	ee37 8a48 	vsub.f32	s16, s14, s16
 802a6fa:	ee77 8ae8 	vsub.f32	s17, s15, s17
 802a6fe:	eebe 8ac8 	vcvt.s32.f32	s16, s16, #16
 802a702:	eefe 8ac8 	vcvt.s32.f32	s17, s17, #16
 802a706:	ee18 2a10 	vmov	r2, s16
 802a70a:	eeb0 8a47 	vmov.f32	s16, s14
 802a70e:	fb92 f3f3 	sdiv	r3, r2, r3
 802a712:	ee18 2a90 	vmov	r2, s17
 802a716:	9327      	str	r3, [sp, #156]	@ 0x9c
 802a718:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 802a71a:	eef0 8a67 	vmov.f32	s17, s15
 802a71e:	fb92 f3f3 	sdiv	r3, r2, r3
 802a722:	9328      	str	r3, [sp, #160]	@ 0xa0
 802a724:	9b07      	ldr	r3, [sp, #28]
 802a726:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 802a728:	3b01      	subs	r3, #1
 802a72a:	9307      	str	r3, [sp, #28]
 802a72c:	bf08      	it	eq
 802a72e:	4615      	moveq	r5, r2
 802a730:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 802a732:	bf18      	it	ne
 802a734:	461d      	movne	r5, r3
 802a736:	e6d3      	b.n	802a4e0 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x58>
 802a738:	2900      	cmp	r1, #0
 802a73a:	f43f af5b 	beq.w	802a5f4 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x16c>
 802a73e:	eb0a 0003 	add.w	r0, sl, r3
 802a742:	0843      	lsrs	r3, r0, #1
 802a744:	07c0      	lsls	r0, r0, #31
 802a746:	5cfb      	ldrb	r3, [r7, r3]
 802a748:	bf54      	ite	pl
 802a74a:	f003 030f 	andpl.w	r3, r3, #15
 802a74e:	111b      	asrmi	r3, r3, #4
 802a750:	eb03 1303 	add.w	r3, r3, r3, lsl #4
 802a754:	b2db      	uxtb	r3, r3
 802a756:	930a      	str	r3, [sp, #40]	@ 0x28
 802a758:	e74c      	b.n	802a5f4 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x16c>
 802a75a:	2b00      	cmp	r3, #0
 802a75c:	f43f af77 	beq.w	802a64e <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1c6>
 802a760:	4a73      	ldr	r2, [pc, #460]	@ (802a930 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4a8>)
 802a762:	fa1f fe83 	uxth.w	lr, r3
 802a766:	f8b8 c000 	ldrh.w	ip, [r8]
 802a76a:	43db      	mvns	r3, r3
 802a76c:	6810      	ldr	r0, [r2, #0]
 802a76e:	ea4f 212c 	mov.w	r1, ip, asr #8
 802a772:	f3c0 4207 	ubfx	r2, r0, #16, #8
 802a776:	b2db      	uxtb	r3, r3
 802a778:	f001 01f8 	and.w	r1, r1, #248	@ 0xf8
 802a77c:	f3c0 2b07 	ubfx	fp, r0, #8, #8
 802a780:	fb12 f20e 	smulbb	r2, r2, lr
 802a784:	b2c0      	uxtb	r0, r0
 802a786:	fb1b fb0e 	smulbb	fp, fp, lr
 802a78a:	fb01 2103 	mla	r1, r1, r3, r2
 802a78e:	ea4f 02ec 	mov.w	r2, ip, asr #3
 802a792:	fb10 fe0e 	smulbb	lr, r0, lr
 802a796:	ea4f 0ccc 	mov.w	ip, ip, lsl #3
 802a79a:	b289      	uxth	r1, r1
 802a79c:	f002 02fc 	and.w	r2, r2, #252	@ 0xfc
 802a7a0:	fa5f fc8c 	uxtb.w	ip, ip
 802a7a4:	fb02 b203 	mla	r2, r2, r3, fp
 802a7a8:	1c48      	adds	r0, r1, #1
 802a7aa:	fb0c e303 	mla	r3, ip, r3, lr
 802a7ae:	b292      	uxth	r2, r2
 802a7b0:	b29b      	uxth	r3, r3
 802a7b2:	eb00 2111 	add.w	r1, r0, r1, lsr #8
 802a7b6:	f102 0b01 	add.w	fp, r2, #1
 802a7ba:	f401 4078 	and.w	r0, r1, #63488	@ 0xf800
 802a7be:	1c59      	adds	r1, r3, #1
 802a7c0:	eb0b 2212 	add.w	r2, fp, r2, lsr #8
 802a7c4:	eb01 2113 	add.w	r1, r1, r3, lsr #8
 802a7c8:	0952      	lsrs	r2, r2, #5
 802a7ca:	f3c1 21c4 	ubfx	r1, r1, #11, #5
 802a7ce:	f402 62fc 	and.w	r2, r2, #2016	@ 0x7e0
 802a7d2:	4301      	orrs	r1, r0
 802a7d4:	4311      	orrs	r1, r2
 802a7d6:	f8a8 1000 	strh.w	r1, [r8]
 802a7da:	e738      	b.n	802a64e <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1c6>
 802a7dc:	f113 0b01 	adds.w	fp, r3, #1
 802a7e0:	f53f af35 	bmi.w	802a64e <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1c6>
 802a7e4:	45dc      	cmp	ip, fp
 802a7e6:	f6ff af32 	blt.w	802a64e <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1c6>
 802a7ea:	f110 0b01 	adds.w	fp, r0, #1
 802a7ee:	f53f af2e 	bmi.w	802a64e <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1c6>
 802a7f2:	45de      	cmp	lr, fp
 802a7f4:	f6ff af2b 	blt.w	802a64e <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1c6>
 802a7f8:	9302      	str	r3, [sp, #8]
 802a7fa:	fa0f f38e 	sxth.w	r3, lr
 802a7fe:	9a08      	ldr	r2, [sp, #32]
 802a800:	9301      	str	r3, [sp, #4]
 802a802:	fa0f f38c 	sxth.w	r3, ip
 802a806:	9105      	str	r1, [sp, #20]
 802a808:	4641      	mov	r1, r8
 802a80a:	9300      	str	r3, [sp, #0]
 802a80c:	4653      	mov	r3, sl
 802a80e:	e9cd 0203 	strd	r0, r2, [sp, #12]
 802a812:	463a      	mov	r2, r7
 802a814:	9811      	ldr	r0, [sp, #68]	@ 0x44
 802a816:	f7ff fd57 	bl	802a2c8 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh>
 802a81a:	e718      	b.n	802a64e <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1c6>
 802a81c:	1422      	asrs	r2, r4, #16
 802a81e:	9906      	ldr	r1, [sp, #24]
 802a820:	1433      	asrs	r3, r6, #16
 802a822:	f3c4 3003 	ubfx	r0, r4, #12, #4
 802a826:	f3c6 3c03 	ubfx	ip, r6, #12, #4
 802a82a:	fb01 2303 	mla	r3, r1, r3, r2
 802a82e:	085a      	lsrs	r2, r3, #1
 802a830:	07d9      	lsls	r1, r3, #31
 802a832:	5cba      	ldrb	r2, [r7, r2]
 802a834:	bf54      	ite	pl
 802a836:	f002 020f 	andpl.w	r2, r2, #15
 802a83a:	1112      	asrmi	r2, r2, #4
 802a83c:	eb02 1202 	add.w	r2, r2, r2, lsl #4
 802a840:	b2d2      	uxtb	r2, r2
 802a842:	2800      	cmp	r0, #0
 802a844:	d063      	beq.n	802a90e <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x486>
 802a846:	f103 0a01 	add.w	sl, r3, #1
 802a84a:	ea4f 015a 	mov.w	r1, sl, lsr #1
 802a84e:	f01a 0f01 	tst.w	sl, #1
 802a852:	5c79      	ldrb	r1, [r7, r1]
 802a854:	bf0c      	ite	eq
 802a856:	f001 010f 	andeq.w	r1, r1, #15
 802a85a:	1109      	asrne	r1, r1, #4
 802a85c:	eb01 1101 	add.w	r1, r1, r1, lsl #4
 802a860:	b2c9      	uxtb	r1, r1
 802a862:	910f      	str	r1, [sp, #60]	@ 0x3c
 802a864:	f1bc 0f00 	cmp.w	ip, #0
 802a868:	d01a      	beq.n	802a8a0 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x418>
 802a86a:	9908      	ldr	r1, [sp, #32]
 802a86c:	440b      	add	r3, r1
 802a86e:	0859      	lsrs	r1, r3, #1
 802a870:	f013 0f01 	tst.w	r3, #1
 802a874:	f103 0301 	add.w	r3, r3, #1
 802a878:	5c79      	ldrb	r1, [r7, r1]
 802a87a:	bf0c      	ite	eq
 802a87c:	f001 010f 	andeq.w	r1, r1, #15
 802a880:	1109      	asrne	r1, r1, #4
 802a882:	eb01 1101 	add.w	r1, r1, r1, lsl #4
 802a886:	b2c9      	uxtb	r1, r1
 802a888:	910b      	str	r1, [sp, #44]	@ 0x2c
 802a88a:	0859      	lsrs	r1, r3, #1
 802a88c:	07db      	lsls	r3, r3, #31
 802a88e:	5c79      	ldrb	r1, [r7, r1]
 802a890:	bf54      	ite	pl
 802a892:	f001 010f 	andpl.w	r1, r1, #15
 802a896:	1109      	asrmi	r1, r1, #4
 802a898:	eb01 1101 	add.w	r1, r1, r1, lsl #4
 802a89c:	b2c9      	uxtb	r1, r1
 802a89e:	9110      	str	r1, [sp, #64]	@ 0x40
 802a8a0:	b280      	uxth	r0, r0
 802a8a2:	fa1f fc8c 	uxth.w	ip, ip
 802a8a6:	fb00 f30c 	mul.w	r3, r0, ip
 802a8aa:	0100      	lsls	r0, r0, #4
 802a8ac:	ebc3 1c0c 	rsb	ip, r3, ip, lsl #4
 802a8b0:	f5c0 7180 	rsb	r1, r0, #256	@ 0x100
 802a8b4:	1ac0      	subs	r0, r0, r3
 802a8b6:	fa1f fc8c 	uxth.w	ip, ip
 802a8ba:	b280      	uxth	r0, r0
 802a8bc:	eba1 010c 	sub.w	r1, r1, ip
 802a8c0:	fa1f fa81 	uxth.w	sl, r1
 802a8c4:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 802a8c6:	4348      	muls	r0, r1
 802a8c8:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 802a8ca:	fb02 020a 	mla	r2, r2, sl, r0
 802a8ce:	fb0c 2c01 	mla	ip, ip, r1, r2
 802a8d2:	9a10      	ldr	r2, [sp, #64]	@ 0x40
 802a8d4:	fb03 c302 	mla	r3, r3, r2, ip
 802a8d8:	f3c3 2307 	ubfx	r3, r3, #8, #8
 802a8dc:	2bff      	cmp	r3, #255	@ 0xff
 802a8de:	d12b      	bne.n	802a938 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4b0>
 802a8e0:	4b13      	ldr	r3, [pc, #76]	@ (802a930 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4a8>)
 802a8e2:	681a      	ldr	r2, [r3, #0]
 802a8e4:	4b13      	ldr	r3, [pc, #76]	@ (802a934 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4ac>)
 802a8e6:	0951      	lsrs	r1, r2, #5
 802a8e8:	ea03 2312 	and.w	r3, r3, r2, lsr #8
 802a8ec:	f3c2 02c4 	ubfx	r2, r2, #3, #5
 802a8f0:	f401 61fc 	and.w	r1, r1, #2016	@ 0x7e0
 802a8f4:	430b      	orrs	r3, r1
 802a8f6:	4313      	orrs	r3, r2
 802a8f8:	f8ae 3000 	strh.w	r3, [lr]
 802a8fc:	9b27      	ldr	r3, [sp, #156]	@ 0x9c
 802a8fe:	f10e 0e02 	add.w	lr, lr, #2
 802a902:	f108 38ff 	add.w	r8, r8, #4294967295
 802a906:	441c      	add	r4, r3
 802a908:	9b28      	ldr	r3, [sp, #160]	@ 0xa0
 802a90a:	441e      	add	r6, r3
 802a90c:	e6cc      	b.n	802a6a8 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x220>
 802a90e:	f1bc 0f00 	cmp.w	ip, #0
 802a912:	d0c5      	beq.n	802a8a0 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x418>
 802a914:	9908      	ldr	r1, [sp, #32]
 802a916:	440b      	add	r3, r1
 802a918:	0859      	lsrs	r1, r3, #1
 802a91a:	07db      	lsls	r3, r3, #31
 802a91c:	5c79      	ldrb	r1, [r7, r1]
 802a91e:	bf54      	ite	pl
 802a920:	f001 010f 	andpl.w	r1, r1, #15
 802a924:	1109      	asrmi	r1, r1, #4
 802a926:	eb01 1101 	add.w	r1, r1, r1, lsl #4
 802a92a:	b2c9      	uxtb	r1, r1
 802a92c:	910b      	str	r1, [sp, #44]	@ 0x2c
 802a92e:	e7b7      	b.n	802a8a0 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x418>
 802a930:	2400b88c 	.word	0x2400b88c
 802a934:	fffff800 	.word	0xfffff800
 802a938:	2b00      	cmp	r3, #0
 802a93a:	d0df      	beq.n	802a8fc <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x474>
 802a93c:	4a22      	ldr	r2, [pc, #136]	@ (802a9c8 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x540>)
 802a93e:	fa1f fa83 	uxth.w	sl, r3
 802a942:	f8be c000 	ldrh.w	ip, [lr]
 802a946:	43db      	mvns	r3, r3
 802a948:	6810      	ldr	r0, [r2, #0]
 802a94a:	ea4f 212c 	mov.w	r1, ip, asr #8
 802a94e:	f3c0 4207 	ubfx	r2, r0, #16, #8
 802a952:	b2db      	uxtb	r3, r3
 802a954:	f001 01f8 	and.w	r1, r1, #248	@ 0xf8
 802a958:	f3c0 2b07 	ubfx	fp, r0, #8, #8
 802a95c:	fb12 f20a 	smulbb	r2, r2, sl
 802a960:	b2c0      	uxtb	r0, r0
 802a962:	fb1b fb0a 	smulbb	fp, fp, sl
 802a966:	fb01 2103 	mla	r1, r1, r3, r2
 802a96a:	ea4f 02ec 	mov.w	r2, ip, asr #3
 802a96e:	fb10 f00a 	smulbb	r0, r0, sl
 802a972:	ea4f 0ccc 	mov.w	ip, ip, lsl #3
 802a976:	b289      	uxth	r1, r1
 802a978:	f002 02fc 	and.w	r2, r2, #252	@ 0xfc
 802a97c:	fa5f fc8c 	uxtb.w	ip, ip
 802a980:	fb02 b203 	mla	r2, r2, r3, fp
 802a984:	fb0c 0003 	mla	r0, ip, r3, r0
 802a988:	1c4b      	adds	r3, r1, #1
 802a98a:	b292      	uxth	r2, r2
 802a98c:	b280      	uxth	r0, r0
 802a98e:	eb03 2111 	add.w	r1, r3, r1, lsr #8
 802a992:	f100 0b01 	add.w	fp, r0, #1
 802a996:	f401 4178 	and.w	r1, r1, #63488	@ 0xf800
 802a99a:	eb0b 2b10 	add.w	fp, fp, r0, lsr #8
 802a99e:	f3cb 2bc4 	ubfx	fp, fp, #11, #5
 802a9a2:	ea4b 0101 	orr.w	r1, fp, r1
 802a9a6:	f102 0b01 	add.w	fp, r2, #1
 802a9aa:	eb0b 2212 	add.w	r2, fp, r2, lsr #8
 802a9ae:	0952      	lsrs	r2, r2, #5
 802a9b0:	f402 62fc 	and.w	r2, r2, #2016	@ 0x7e0
 802a9b4:	4311      	orrs	r1, r2
 802a9b6:	f8ae 1000 	strh.w	r1, [lr]
 802a9ba:	e79f      	b.n	802a8fc <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x474>
 802a9bc:	b013      	add	sp, #76	@ 0x4c
 802a9be:	ecbd 8b08 	vpop	{d8-d11}
 802a9c2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 802a9c6:	bf00      	nop
 802a9c8:	2400b88c 	.word	0x2400b88c

0802a9cc <CRC_Lock>:
 802a9cc:	4a20      	ldr	r2, [pc, #128]	@ (802aa50 <CRC_Lock+0x84>)
 802a9ce:	b530      	push	{r4, r5, lr}
 802a9d0:	6813      	ldr	r3, [r2, #0]
 802a9d2:	f64f 74f0 	movw	r4, #65520	@ 0xfff0
 802a9d6:	f24c 2540 	movw	r5, #49728	@ 0xc240
 802a9da:	f023 0301 	bic.w	r3, r3, #1
 802a9de:	6013      	str	r3, [r2, #0]
 802a9e0:	4b1c      	ldr	r3, [pc, #112]	@ (802aa54 <CRC_Lock+0x88>)
 802a9e2:	681a      	ldr	r2, [r3, #0]
 802a9e4:	4022      	ands	r2, r4
 802a9e6:	42aa      	cmp	r2, r5
 802a9e8:	d005      	beq.n	802a9f6 <CRC_Lock+0x2a>
 802a9ea:	681b      	ldr	r3, [r3, #0]
 802a9ec:	f24c 2270 	movw	r2, #49776	@ 0xc270
 802a9f0:	4023      	ands	r3, r4
 802a9f2:	4293      	cmp	r3, r2
 802a9f4:	d124      	bne.n	802aa40 <CRC_Lock+0x74>
 802a9f6:	4b18      	ldr	r3, [pc, #96]	@ (802aa58 <CRC_Lock+0x8c>)
 802a9f8:	681b      	ldr	r3, [r3, #0]
 802a9fa:	bb0b      	cbnz	r3, 802aa40 <CRC_Lock+0x74>
 802a9fc:	4b17      	ldr	r3, [pc, #92]	@ (802aa5c <CRC_Lock+0x90>)
 802a9fe:	681a      	ldr	r2, [r3, #0]
 802aa00:	f3c2 020b 	ubfx	r2, r2, #0, #12
 802aa04:	f5b2 6f8a 	cmp.w	r2, #1104	@ 0x450
 802aa08:	d00d      	beq.n	802aa26 <CRC_Lock+0x5a>
 802aa0a:	681a      	ldr	r2, [r3, #0]
 802aa0c:	f240 4483 	movw	r4, #1155	@ 0x483
 802aa10:	f3c2 020b 	ubfx	r2, r2, #0, #12
 802aa14:	42a2      	cmp	r2, r4
 802aa16:	d006      	beq.n	802aa26 <CRC_Lock+0x5a>
 802aa18:	681b      	ldr	r3, [r3, #0]
 802aa1a:	f240 4285 	movw	r2, #1157	@ 0x485
 802aa1e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 802aa22:	4293      	cmp	r3, r2
 802aa24:	d10c      	bne.n	802aa40 <CRC_Lock+0x74>
 802aa26:	4b0e      	ldr	r3, [pc, #56]	@ (802aa60 <CRC_Lock+0x94>)
 802aa28:	2201      	movs	r2, #1
 802aa2a:	601a      	str	r2, [r3, #0]
 802aa2c:	681a      	ldr	r2, [r3, #0]
 802aa2e:	2a00      	cmp	r2, #0
 802aa30:	d1fc      	bne.n	802aa2c <CRC_Lock+0x60>
 802aa32:	4b0c      	ldr	r3, [pc, #48]	@ (802aa64 <CRC_Lock+0x98>)
 802aa34:	6018      	str	r0, [r3, #0]
 802aa36:	6818      	ldr	r0, [r3, #0]
 802aa38:	1a43      	subs	r3, r0, r1
 802aa3a:	4258      	negs	r0, r3
 802aa3c:	4158      	adcs	r0, r3
 802aa3e:	bd30      	pop	{r4, r5, pc}
 802aa40:	4b09      	ldr	r3, [pc, #36]	@ (802aa68 <CRC_Lock+0x9c>)
 802aa42:	2201      	movs	r2, #1
 802aa44:	601a      	str	r2, [r3, #0]
 802aa46:	681a      	ldr	r2, [r3, #0]
 802aa48:	2a00      	cmp	r2, #0
 802aa4a:	d1fc      	bne.n	802aa46 <CRC_Lock+0x7a>
 802aa4c:	4b07      	ldr	r3, [pc, #28]	@ (802aa6c <CRC_Lock+0xa0>)
 802aa4e:	e7f1      	b.n	802aa34 <CRC_Lock+0x68>
 802aa50:	e0002000 	.word	0xe0002000
 802aa54:	e000ed00 	.word	0xe000ed00
 802aa58:	e0042000 	.word	0xe0042000
 802aa5c:	5c001000 	.word	0x5c001000
 802aa60:	58024c08 	.word	0x58024c08
 802aa64:	58024c00 	.word	0x58024c00
 802aa68:	40023008 	.word	0x40023008
 802aa6c:	40023000 	.word	0x40023000

0802aa70 <_ZN8touchgfx8Gestures21registerEventListenerERNS_15UIEventListenerE>:
 802aa70:	6101      	str	r1, [r0, #16]
 802aa72:	4770      	bx	lr

0802aa74 <_ZN8touchgfx8Gestures4tickEv>:
 802aa74:	7b83      	ldrb	r3, [r0, #14]
 802aa76:	b14b      	cbz	r3, 802aa8c <_ZN8touchgfx8Gestures4tickEv+0x18>
 802aa78:	8903      	ldrh	r3, [r0, #8]
 802aa7a:	3301      	adds	r3, #1
 802aa7c:	b29b      	uxth	r3, r3
 802aa7e:	2b07      	cmp	r3, #7
 802aa80:	8103      	strh	r3, [r0, #8]
 802aa82:	bf81      	itttt	hi
 802aa84:	2300      	movhi	r3, #0
 802aa86:	8143      	strhhi	r3, [r0, #10]
 802aa88:	8183      	strhhi	r3, [r0, #12]
 802aa8a:	7383      	strbhi	r3, [r0, #14]
 802aa8c:	4770      	bx	lr
	...

0802aa90 <_ZN8touchgfx8Gestures17registerDragEventEtttt>:
 802aa90:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
 802aa94:	4604      	mov	r4, r0
 802aa96:	4698      	mov	r8, r3
 802aa98:	8880      	ldrh	r0, [r0, #4]
 802aa9a:	4617      	mov	r7, r2
 802aa9c:	4b1d      	ldr	r3, [pc, #116]	@ (802ab14 <_ZN8touchgfx8Gestures17registerDragEventEtttt+0x84>)
 802aa9e:	460e      	mov	r6, r1
 802aaa0:	f8ad 0006 	strh.w	r0, [sp, #6]
 802aaa4:	eba8 0000 	sub.w	r0, r8, r0
 802aaa8:	9300      	str	r3, [sp, #0]
 802aaaa:	2300      	movs	r3, #0
 802aaac:	b280      	uxth	r0, r0
 802aaae:	8aa2      	ldrh	r2, [r4, #20]
 802aab0:	f88d 3004 	strb.w	r3, [sp, #4]
 802aab4:	b203      	sxth	r3, r0
 802aab6:	f8bd 5028 	ldrh.w	r5, [sp, #40]	@ 0x28
 802aaba:	88e1      	ldrh	r1, [r4, #6]
 802aabc:	2b00      	cmp	r3, #0
 802aabe:	f8ad 800a 	strh.w	r8, [sp, #10]
 802aac2:	f8ad 1008 	strh.w	r1, [sp, #8]
 802aac6:	bfb8      	it	lt
 802aac8:	4240      	neglt	r0, r0
 802aaca:	f8ad 500c 	strh.w	r5, [sp, #12]
 802aace:	bfb8      	it	lt
 802aad0:	b203      	sxthlt	r3, r0
 802aad2:	4293      	cmp	r3, r2
 802aad4:	dc08      	bgt.n	802aae8 <_ZN8touchgfx8Gestures17registerDragEventEtttt+0x58>
 802aad6:	1a69      	subs	r1, r5, r1
 802aad8:	b289      	uxth	r1, r1
 802aada:	b20b      	sxth	r3, r1
 802aadc:	2b00      	cmp	r3, #0
 802aade:	bfbc      	itt	lt
 802aae0:	4249      	neglt	r1, r1
 802aae2:	b20b      	sxthlt	r3, r1
 802aae4:	429a      	cmp	r2, r3
 802aae6:	da13      	bge.n	802ab10 <_ZN8touchgfx8Gestures17registerDragEventEtttt+0x80>
 802aae8:	6920      	ldr	r0, [r4, #16]
 802aaea:	4669      	mov	r1, sp
 802aaec:	eba8 0606 	sub.w	r6, r8, r6
 802aaf0:	1bef      	subs	r7, r5, r7
 802aaf2:	6803      	ldr	r3, [r0, #0]
 802aaf4:	685b      	ldr	r3, [r3, #4]
 802aaf6:	4798      	blx	r3
 802aaf8:	2300      	movs	r3, #0
 802aafa:	2001      	movs	r0, #1
 802aafc:	8166      	strh	r6, [r4, #10]
 802aafe:	8123      	strh	r3, [r4, #8]
 802ab00:	81a7      	strh	r7, [r4, #12]
 802ab02:	f8a4 8004 	strh.w	r8, [r4, #4]
 802ab06:	80e5      	strh	r5, [r4, #6]
 802ab08:	73a0      	strb	r0, [r4, #14]
 802ab0a:	b004      	add	sp, #16
 802ab0c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 802ab10:	2000      	movs	r0, #0
 802ab12:	e7fa      	b.n	802ab0a <_ZN8touchgfx8Gestures17registerDragEventEtttt+0x7a>
 802ab14:	0802f364 	.word	0x0802f364

0802ab18 <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt>:
 802ab18:	b5f0      	push	{r4, r5, r6, r7, lr}
 802ab1a:	461e      	mov	r6, r3
 802ab1c:	1e4b      	subs	r3, r1, #1
 802ab1e:	b085      	sub	sp, #20
 802ab20:	4604      	mov	r4, r0
 802ab22:	2b01      	cmp	r3, #1
 802ab24:	460d      	mov	r5, r1
 802ab26:	4617      	mov	r7, r2
 802ab28:	d84b      	bhi.n	802abc2 <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt+0xaa>
 802ab2a:	f9b0 200a 	ldrsh.w	r2, [r0, #10]
 802ab2e:	1cd3      	adds	r3, r2, #3
 802ab30:	b29b      	uxth	r3, r3
 802ab32:	2b06      	cmp	r3, #6
 802ab34:	d916      	bls.n	802ab64 <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt+0x4c>
 802ab36:	f8df c0a0 	ldr.w	ip, [pc, #160]	@ 802abd8 <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt+0xc0>
 802ab3a:	f9b4 1004 	ldrsh.w	r1, [r4, #4]
 802ab3e:	f8cd c004 	str.w	ip, [sp, #4]
 802ab42:	f04f 0c00 	mov.w	ip, #0
 802ab46:	f9b4 3006 	ldrsh.w	r3, [r4, #6]
 802ab4a:	6900      	ldr	r0, [r0, #16]
 802ab4c:	f8ad 100c 	strh.w	r1, [sp, #12]
 802ab50:	a901      	add	r1, sp, #4
 802ab52:	f88d c008 	strb.w	ip, [sp, #8]
 802ab56:	f8ad 200a 	strh.w	r2, [sp, #10]
 802ab5a:	f8ad 300e 	strh.w	r3, [sp, #14]
 802ab5e:	6803      	ldr	r3, [r0, #0]
 802ab60:	689b      	ldr	r3, [r3, #8]
 802ab62:	4798      	blx	r3
 802ab64:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 802ab68:	1cd3      	adds	r3, r2, #3
 802ab6a:	b29b      	uxth	r3, r3
 802ab6c:	2b06      	cmp	r3, #6
 802ab6e:	d916      	bls.n	802ab9e <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt+0x86>
 802ab70:	f8df c064 	ldr.w	ip, [pc, #100]	@ 802abd8 <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt+0xc0>
 802ab74:	f9b4 1004 	ldrsh.w	r1, [r4, #4]
 802ab78:	f8cd c004 	str.w	ip, [sp, #4]
 802ab7c:	f04f 0c01 	mov.w	ip, #1
 802ab80:	f9b4 3006 	ldrsh.w	r3, [r4, #6]
 802ab84:	6920      	ldr	r0, [r4, #16]
 802ab86:	f8ad 100c 	strh.w	r1, [sp, #12]
 802ab8a:	a901      	add	r1, sp, #4
 802ab8c:	f88d c008 	strb.w	ip, [sp, #8]
 802ab90:	f8ad 200a 	strh.w	r2, [sp, #10]
 802ab94:	f8ad 300e 	strh.w	r3, [sp, #14]
 802ab98:	6803      	ldr	r3, [r0, #0]
 802ab9a:	689b      	ldr	r3, [r3, #8]
 802ab9c:	4798      	blx	r3
 802ab9e:	4b0d      	ldr	r3, [pc, #52]	@ (802abd4 <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt+0xbc>)
 802aba0:	a901      	add	r1, sp, #4
 802aba2:	6920      	ldr	r0, [r4, #16]
 802aba4:	9301      	str	r3, [sp, #4]
 802aba6:	2300      	movs	r3, #0
 802aba8:	f88d 5008 	strb.w	r5, [sp, #8]
 802abac:	f8ad 700a 	strh.w	r7, [sp, #10]
 802abb0:	f8ad 600c 	strh.w	r6, [sp, #12]
 802abb4:	f8ad 300e 	strh.w	r3, [sp, #14]
 802abb8:	6803      	ldr	r3, [r0, #0]
 802abba:	681b      	ldr	r3, [r3, #0]
 802abbc:	4798      	blx	r3
 802abbe:	b005      	add	sp, #20
 802abc0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 802abc2:	2900      	cmp	r1, #0
 802abc4:	d1eb      	bne.n	802ab9e <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt+0x86>
 802abc6:	80a2      	strh	r2, [r4, #4]
 802abc8:	80c6      	strh	r6, [r0, #6]
 802abca:	60a1      	str	r1, [r4, #8]
 802abcc:	81a1      	strh	r1, [r4, #12]
 802abce:	73a1      	strb	r1, [r4, #14]
 802abd0:	e7e5      	b.n	802ab9e <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt+0x86>
 802abd2:	bf00      	nop
 802abd4:	0802f350 	.word	0x0802f350
 802abd8:	0802f378 	.word	0x0802f378

0802abdc <__aeabi_atexit>:
 802abdc:	460b      	mov	r3, r1
 802abde:	4601      	mov	r1, r0
 802abe0:	4618      	mov	r0, r3
 802abe2:	f000 b911 	b.w	802ae08 <__cxa_atexit>

0802abe6 <_ZdlPvj>:
 802abe6:	f000 b812 	b.w	802ac0e <_ZdlPv>

0802abea <__cxa_guard_acquire>:
 802abea:	6802      	ldr	r2, [r0, #0]
 802abec:	07d2      	lsls	r2, r2, #31
 802abee:	4603      	mov	r3, r0
 802abf0:	d405      	bmi.n	802abfe <__cxa_guard_acquire+0x14>
 802abf2:	7842      	ldrb	r2, [r0, #1]
 802abf4:	b102      	cbz	r2, 802abf8 <__cxa_guard_acquire+0xe>
 802abf6:	deff      	udf	#255	@ 0xff
 802abf8:	2001      	movs	r0, #1
 802abfa:	7058      	strb	r0, [r3, #1]
 802abfc:	4770      	bx	lr
 802abfe:	2000      	movs	r0, #0
 802ac00:	4770      	bx	lr

0802ac02 <__cxa_guard_release>:
 802ac02:	2301      	movs	r3, #1
 802ac04:	6003      	str	r3, [r0, #0]
 802ac06:	4770      	bx	lr

0802ac08 <__cxa_pure_virtual>:
 802ac08:	b508      	push	{r3, lr}
 802ac0a:	f000 f80f 	bl	802ac2c <_ZSt9terminatev>

0802ac0e <_ZdlPv>:
 802ac0e:	f000 b845 	b.w	802ac9c <free>

0802ac12 <_ZN10__cxxabiv111__terminateEPFvvE>:
 802ac12:	b508      	push	{r3, lr}
 802ac14:	4780      	blx	r0
 802ac16:	f000 f80e 	bl	802ac36 <abort>
	...

0802ac1c <_ZSt13get_terminatev>:
 802ac1c:	4b02      	ldr	r3, [pc, #8]	@ (802ac28 <_ZSt13get_terminatev+0xc>)
 802ac1e:	6818      	ldr	r0, [r3, #0]
 802ac20:	f3bf 8f5b 	dmb	ish
 802ac24:	4770      	bx	lr
 802ac26:	bf00      	nop
 802ac28:	240000c8 	.word	0x240000c8

0802ac2c <_ZSt9terminatev>:
 802ac2c:	b508      	push	{r3, lr}
 802ac2e:	f7ff fff5 	bl	802ac1c <_ZSt13get_terminatev>
 802ac32:	f7ff ffee 	bl	802ac12 <_ZN10__cxxabiv111__terminateEPFvvE>

0802ac36 <abort>:
 802ac36:	b508      	push	{r3, lr}
 802ac38:	2006      	movs	r0, #6
 802ac3a:	f000 fa3b 	bl	802b0b4 <raise>
 802ac3e:	2001      	movs	r0, #1
 802ac40:	f7d6 fd28 	bl	8001694 <_exit>

0802ac44 <__assert_func>:
 802ac44:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 802ac46:	4614      	mov	r4, r2
 802ac48:	461a      	mov	r2, r3
 802ac4a:	4b09      	ldr	r3, [pc, #36]	@ (802ac70 <__assert_func+0x2c>)
 802ac4c:	681b      	ldr	r3, [r3, #0]
 802ac4e:	4605      	mov	r5, r0
 802ac50:	68d8      	ldr	r0, [r3, #12]
 802ac52:	b954      	cbnz	r4, 802ac6a <__assert_func+0x26>
 802ac54:	4b07      	ldr	r3, [pc, #28]	@ (802ac74 <__assert_func+0x30>)
 802ac56:	461c      	mov	r4, r3
 802ac58:	e9cd 3401 	strd	r3, r4, [sp, #4]
 802ac5c:	9100      	str	r1, [sp, #0]
 802ac5e:	462b      	mov	r3, r5
 802ac60:	4905      	ldr	r1, [pc, #20]	@ (802ac78 <__assert_func+0x34>)
 802ac62:	f000 f983 	bl	802af6c <fiprintf>
 802ac66:	f7ff ffe6 	bl	802ac36 <abort>
 802ac6a:	4b04      	ldr	r3, [pc, #16]	@ (802ac7c <__assert_func+0x38>)
 802ac6c:	e7f4      	b.n	802ac58 <__assert_func+0x14>
 802ac6e:	bf00      	nop
 802ac70:	240000d8 	.word	0x240000d8
 802ac74:	08030718 	.word	0x08030718
 802ac78:	080306ea 	.word	0x080306ea
 802ac7c:	080306dd 	.word	0x080306dd

0802ac80 <atexit>:
 802ac80:	2300      	movs	r3, #0
 802ac82:	4601      	mov	r1, r0
 802ac84:	461a      	mov	r2, r3
 802ac86:	4618      	mov	r0, r3
 802ac88:	f000 bb18 	b.w	802b2bc <__register_exitproc>

0802ac8c <malloc>:
 802ac8c:	4b02      	ldr	r3, [pc, #8]	@ (802ac98 <malloc+0xc>)
 802ac8e:	4601      	mov	r1, r0
 802ac90:	6818      	ldr	r0, [r3, #0]
 802ac92:	f000 b82d 	b.w	802acf0 <_malloc_r>
 802ac96:	bf00      	nop
 802ac98:	240000d8 	.word	0x240000d8

0802ac9c <free>:
 802ac9c:	4b02      	ldr	r3, [pc, #8]	@ (802aca8 <free+0xc>)
 802ac9e:	4601      	mov	r1, r0
 802aca0:	6818      	ldr	r0, [r3, #0]
 802aca2:	f000 bb67 	b.w	802b374 <_free_r>
 802aca6:	bf00      	nop
 802aca8:	240000d8 	.word	0x240000d8

0802acac <sbrk_aligned>:
 802acac:	b570      	push	{r4, r5, r6, lr}
 802acae:	4e0f      	ldr	r6, [pc, #60]	@ (802acec <sbrk_aligned+0x40>)
 802acb0:	460c      	mov	r4, r1
 802acb2:	6831      	ldr	r1, [r6, #0]
 802acb4:	4605      	mov	r5, r0
 802acb6:	b911      	cbnz	r1, 802acbe <sbrk_aligned+0x12>
 802acb8:	f000 faa2 	bl	802b200 <_sbrk_r>
 802acbc:	6030      	str	r0, [r6, #0]
 802acbe:	4621      	mov	r1, r4
 802acc0:	4628      	mov	r0, r5
 802acc2:	f000 fa9d 	bl	802b200 <_sbrk_r>
 802acc6:	1c43      	adds	r3, r0, #1
 802acc8:	d103      	bne.n	802acd2 <sbrk_aligned+0x26>
 802acca:	f04f 34ff 	mov.w	r4, #4294967295
 802acce:	4620      	mov	r0, r4
 802acd0:	bd70      	pop	{r4, r5, r6, pc}
 802acd2:	1cc4      	adds	r4, r0, #3
 802acd4:	f024 0403 	bic.w	r4, r4, #3
 802acd8:	42a0      	cmp	r0, r4
 802acda:	d0f8      	beq.n	802acce <sbrk_aligned+0x22>
 802acdc:	1a21      	subs	r1, r4, r0
 802acde:	4628      	mov	r0, r5
 802ace0:	f000 fa8e 	bl	802b200 <_sbrk_r>
 802ace4:	3001      	adds	r0, #1
 802ace6:	d1f2      	bne.n	802acce <sbrk_aligned+0x22>
 802ace8:	e7ef      	b.n	802acca <sbrk_aligned+0x1e>
 802acea:	bf00      	nop
 802acec:	2400b980 	.word	0x2400b980

0802acf0 <_malloc_r>:
 802acf0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 802acf4:	1ccd      	adds	r5, r1, #3
 802acf6:	f025 0503 	bic.w	r5, r5, #3
 802acfa:	3508      	adds	r5, #8
 802acfc:	2d0c      	cmp	r5, #12
 802acfe:	bf38      	it	cc
 802ad00:	250c      	movcc	r5, #12
 802ad02:	2d00      	cmp	r5, #0
 802ad04:	4606      	mov	r6, r0
 802ad06:	db01      	blt.n	802ad0c <_malloc_r+0x1c>
 802ad08:	42a9      	cmp	r1, r5
 802ad0a:	d904      	bls.n	802ad16 <_malloc_r+0x26>
 802ad0c:	230c      	movs	r3, #12
 802ad0e:	6033      	str	r3, [r6, #0]
 802ad10:	2000      	movs	r0, #0
 802ad12:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 802ad16:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 802adec <_malloc_r+0xfc>
 802ad1a:	f000 f869 	bl	802adf0 <__malloc_lock>
 802ad1e:	f8d8 3000 	ldr.w	r3, [r8]
 802ad22:	461c      	mov	r4, r3
 802ad24:	bb44      	cbnz	r4, 802ad78 <_malloc_r+0x88>
 802ad26:	4629      	mov	r1, r5
 802ad28:	4630      	mov	r0, r6
 802ad2a:	f7ff ffbf 	bl	802acac <sbrk_aligned>
 802ad2e:	1c43      	adds	r3, r0, #1
 802ad30:	4604      	mov	r4, r0
 802ad32:	d158      	bne.n	802ade6 <_malloc_r+0xf6>
 802ad34:	f8d8 4000 	ldr.w	r4, [r8]
 802ad38:	4627      	mov	r7, r4
 802ad3a:	2f00      	cmp	r7, #0
 802ad3c:	d143      	bne.n	802adc6 <_malloc_r+0xd6>
 802ad3e:	2c00      	cmp	r4, #0
 802ad40:	d04b      	beq.n	802adda <_malloc_r+0xea>
 802ad42:	6823      	ldr	r3, [r4, #0]
 802ad44:	4639      	mov	r1, r7
 802ad46:	4630      	mov	r0, r6
 802ad48:	eb04 0903 	add.w	r9, r4, r3
 802ad4c:	f000 fa58 	bl	802b200 <_sbrk_r>
 802ad50:	4581      	cmp	r9, r0
 802ad52:	d142      	bne.n	802adda <_malloc_r+0xea>
 802ad54:	6821      	ldr	r1, [r4, #0]
 802ad56:	1a6d      	subs	r5, r5, r1
 802ad58:	4629      	mov	r1, r5
 802ad5a:	4630      	mov	r0, r6
 802ad5c:	f7ff ffa6 	bl	802acac <sbrk_aligned>
 802ad60:	3001      	adds	r0, #1
 802ad62:	d03a      	beq.n	802adda <_malloc_r+0xea>
 802ad64:	6823      	ldr	r3, [r4, #0]
 802ad66:	442b      	add	r3, r5
 802ad68:	6023      	str	r3, [r4, #0]
 802ad6a:	f8d8 3000 	ldr.w	r3, [r8]
 802ad6e:	685a      	ldr	r2, [r3, #4]
 802ad70:	bb62      	cbnz	r2, 802adcc <_malloc_r+0xdc>
 802ad72:	f8c8 7000 	str.w	r7, [r8]
 802ad76:	e00f      	b.n	802ad98 <_malloc_r+0xa8>
 802ad78:	6822      	ldr	r2, [r4, #0]
 802ad7a:	1b52      	subs	r2, r2, r5
 802ad7c:	d420      	bmi.n	802adc0 <_malloc_r+0xd0>
 802ad7e:	2a0b      	cmp	r2, #11
 802ad80:	d917      	bls.n	802adb2 <_malloc_r+0xc2>
 802ad82:	1961      	adds	r1, r4, r5
 802ad84:	42a3      	cmp	r3, r4
 802ad86:	6025      	str	r5, [r4, #0]
 802ad88:	bf18      	it	ne
 802ad8a:	6059      	strne	r1, [r3, #4]
 802ad8c:	6863      	ldr	r3, [r4, #4]
 802ad8e:	bf08      	it	eq
 802ad90:	f8c8 1000 	streq.w	r1, [r8]
 802ad94:	5162      	str	r2, [r4, r5]
 802ad96:	604b      	str	r3, [r1, #4]
 802ad98:	4630      	mov	r0, r6
 802ad9a:	f000 f82f 	bl	802adfc <__malloc_unlock>
 802ad9e:	f104 000b 	add.w	r0, r4, #11
 802ada2:	1d23      	adds	r3, r4, #4
 802ada4:	f020 0007 	bic.w	r0, r0, #7
 802ada8:	1ac2      	subs	r2, r0, r3
 802adaa:	bf1c      	itt	ne
 802adac:	1a1b      	subne	r3, r3, r0
 802adae:	50a3      	strne	r3, [r4, r2]
 802adb0:	e7af      	b.n	802ad12 <_malloc_r+0x22>
 802adb2:	6862      	ldr	r2, [r4, #4]
 802adb4:	42a3      	cmp	r3, r4
 802adb6:	bf0c      	ite	eq
 802adb8:	f8c8 2000 	streq.w	r2, [r8]
 802adbc:	605a      	strne	r2, [r3, #4]
 802adbe:	e7eb      	b.n	802ad98 <_malloc_r+0xa8>
 802adc0:	4623      	mov	r3, r4
 802adc2:	6864      	ldr	r4, [r4, #4]
 802adc4:	e7ae      	b.n	802ad24 <_malloc_r+0x34>
 802adc6:	463c      	mov	r4, r7
 802adc8:	687f      	ldr	r7, [r7, #4]
 802adca:	e7b6      	b.n	802ad3a <_malloc_r+0x4a>
 802adcc:	461a      	mov	r2, r3
 802adce:	685b      	ldr	r3, [r3, #4]
 802add0:	42a3      	cmp	r3, r4
 802add2:	d1fb      	bne.n	802adcc <_malloc_r+0xdc>
 802add4:	2300      	movs	r3, #0
 802add6:	6053      	str	r3, [r2, #4]
 802add8:	e7de      	b.n	802ad98 <_malloc_r+0xa8>
 802adda:	230c      	movs	r3, #12
 802addc:	6033      	str	r3, [r6, #0]
 802adde:	4630      	mov	r0, r6
 802ade0:	f000 f80c 	bl	802adfc <__malloc_unlock>
 802ade4:	e794      	b.n	802ad10 <_malloc_r+0x20>
 802ade6:	6005      	str	r5, [r0, #0]
 802ade8:	e7d6      	b.n	802ad98 <_malloc_r+0xa8>
 802adea:	bf00      	nop
 802adec:	2400b984 	.word	0x2400b984

0802adf0 <__malloc_lock>:
 802adf0:	4801      	ldr	r0, [pc, #4]	@ (802adf8 <__malloc_lock+0x8>)
 802adf2:	f000 ba52 	b.w	802b29a <__retarget_lock_acquire_recursive>
 802adf6:	bf00      	nop
 802adf8:	2400bac8 	.word	0x2400bac8

0802adfc <__malloc_unlock>:
 802adfc:	4801      	ldr	r0, [pc, #4]	@ (802ae04 <__malloc_unlock+0x8>)
 802adfe:	f000 ba4d 	b.w	802b29c <__retarget_lock_release_recursive>
 802ae02:	bf00      	nop
 802ae04:	2400bac8 	.word	0x2400bac8

0802ae08 <__cxa_atexit>:
 802ae08:	b510      	push	{r4, lr}
 802ae0a:	4604      	mov	r4, r0
 802ae0c:	4804      	ldr	r0, [pc, #16]	@ (802ae20 <__cxa_atexit+0x18>)
 802ae0e:	4613      	mov	r3, r2
 802ae10:	b120      	cbz	r0, 802ae1c <__cxa_atexit+0x14>
 802ae12:	460a      	mov	r2, r1
 802ae14:	2002      	movs	r0, #2
 802ae16:	4621      	mov	r1, r4
 802ae18:	f000 fa50 	bl	802b2bc <__register_exitproc>
 802ae1c:	bd10      	pop	{r4, pc}
 802ae1e:	bf00      	nop
 802ae20:	0802b2bd 	.word	0x0802b2bd

0802ae24 <std>:
 802ae24:	2300      	movs	r3, #0
 802ae26:	b510      	push	{r4, lr}
 802ae28:	4604      	mov	r4, r0
 802ae2a:	e9c0 3300 	strd	r3, r3, [r0]
 802ae2e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 802ae32:	6083      	str	r3, [r0, #8]
 802ae34:	8181      	strh	r1, [r0, #12]
 802ae36:	6643      	str	r3, [r0, #100]	@ 0x64
 802ae38:	81c2      	strh	r2, [r0, #14]
 802ae3a:	6183      	str	r3, [r0, #24]
 802ae3c:	4619      	mov	r1, r3
 802ae3e:	2208      	movs	r2, #8
 802ae40:	305c      	adds	r0, #92	@ 0x5c
 802ae42:	f000 f906 	bl	802b052 <memset>
 802ae46:	4b0d      	ldr	r3, [pc, #52]	@ (802ae7c <std+0x58>)
 802ae48:	6263      	str	r3, [r4, #36]	@ 0x24
 802ae4a:	4b0d      	ldr	r3, [pc, #52]	@ (802ae80 <std+0x5c>)
 802ae4c:	62a3      	str	r3, [r4, #40]	@ 0x28
 802ae4e:	4b0d      	ldr	r3, [pc, #52]	@ (802ae84 <std+0x60>)
 802ae50:	62e3      	str	r3, [r4, #44]	@ 0x2c
 802ae52:	4b0d      	ldr	r3, [pc, #52]	@ (802ae88 <std+0x64>)
 802ae54:	6323      	str	r3, [r4, #48]	@ 0x30
 802ae56:	4b0d      	ldr	r3, [pc, #52]	@ (802ae8c <std+0x68>)
 802ae58:	6224      	str	r4, [r4, #32]
 802ae5a:	429c      	cmp	r4, r3
 802ae5c:	d006      	beq.n	802ae6c <std+0x48>
 802ae5e:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 802ae62:	4294      	cmp	r4, r2
 802ae64:	d002      	beq.n	802ae6c <std+0x48>
 802ae66:	33d0      	adds	r3, #208	@ 0xd0
 802ae68:	429c      	cmp	r4, r3
 802ae6a:	d105      	bne.n	802ae78 <std+0x54>
 802ae6c:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 802ae70:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 802ae74:	f000 ba10 	b.w	802b298 <__retarget_lock_init_recursive>
 802ae78:	bd10      	pop	{r4, pc}
 802ae7a:	bf00      	nop
 802ae7c:	0802afcd 	.word	0x0802afcd
 802ae80:	0802afef 	.word	0x0802afef
 802ae84:	0802b027 	.word	0x0802b027
 802ae88:	0802b04b 	.word	0x0802b04b
 802ae8c:	2400b988 	.word	0x2400b988

0802ae90 <stdio_exit_handler>:
 802ae90:	4a02      	ldr	r2, [pc, #8]	@ (802ae9c <stdio_exit_handler+0xc>)
 802ae92:	4903      	ldr	r1, [pc, #12]	@ (802aea0 <stdio_exit_handler+0x10>)
 802ae94:	4803      	ldr	r0, [pc, #12]	@ (802aea4 <stdio_exit_handler+0x14>)
 802ae96:	f000 b87b 	b.w	802af90 <_fwalk_sglue>
 802ae9a:	bf00      	nop
 802ae9c:	240000cc 	.word	0x240000cc
 802aea0:	0802bab1 	.word	0x0802bab1
 802aea4:	240000dc 	.word	0x240000dc

0802aea8 <cleanup_stdio>:
 802aea8:	6841      	ldr	r1, [r0, #4]
 802aeaa:	4b0c      	ldr	r3, [pc, #48]	@ (802aedc <cleanup_stdio+0x34>)
 802aeac:	4299      	cmp	r1, r3
 802aeae:	b510      	push	{r4, lr}
 802aeb0:	4604      	mov	r4, r0
 802aeb2:	d001      	beq.n	802aeb8 <cleanup_stdio+0x10>
 802aeb4:	f000 fdfc 	bl	802bab0 <_fflush_r>
 802aeb8:	68a1      	ldr	r1, [r4, #8]
 802aeba:	4b09      	ldr	r3, [pc, #36]	@ (802aee0 <cleanup_stdio+0x38>)
 802aebc:	4299      	cmp	r1, r3
 802aebe:	d002      	beq.n	802aec6 <cleanup_stdio+0x1e>
 802aec0:	4620      	mov	r0, r4
 802aec2:	f000 fdf5 	bl	802bab0 <_fflush_r>
 802aec6:	68e1      	ldr	r1, [r4, #12]
 802aec8:	4b06      	ldr	r3, [pc, #24]	@ (802aee4 <cleanup_stdio+0x3c>)
 802aeca:	4299      	cmp	r1, r3
 802aecc:	d004      	beq.n	802aed8 <cleanup_stdio+0x30>
 802aece:	4620      	mov	r0, r4
 802aed0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 802aed4:	f000 bdec 	b.w	802bab0 <_fflush_r>
 802aed8:	bd10      	pop	{r4, pc}
 802aeda:	bf00      	nop
 802aedc:	2400b988 	.word	0x2400b988
 802aee0:	2400b9f0 	.word	0x2400b9f0
 802aee4:	2400ba58 	.word	0x2400ba58

0802aee8 <global_stdio_init.part.0>:
 802aee8:	b510      	push	{r4, lr}
 802aeea:	4b0b      	ldr	r3, [pc, #44]	@ (802af18 <global_stdio_init.part.0+0x30>)
 802aeec:	4c0b      	ldr	r4, [pc, #44]	@ (802af1c <global_stdio_init.part.0+0x34>)
 802aeee:	4a0c      	ldr	r2, [pc, #48]	@ (802af20 <global_stdio_init.part.0+0x38>)
 802aef0:	601a      	str	r2, [r3, #0]
 802aef2:	4620      	mov	r0, r4
 802aef4:	2200      	movs	r2, #0
 802aef6:	2104      	movs	r1, #4
 802aef8:	f7ff ff94 	bl	802ae24 <std>
 802aefc:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 802af00:	2201      	movs	r2, #1
 802af02:	2109      	movs	r1, #9
 802af04:	f7ff ff8e 	bl	802ae24 <std>
 802af08:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 802af0c:	2202      	movs	r2, #2
 802af0e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 802af12:	2112      	movs	r1, #18
 802af14:	f7ff bf86 	b.w	802ae24 <std>
 802af18:	2400bac0 	.word	0x2400bac0
 802af1c:	2400b988 	.word	0x2400b988
 802af20:	0802ae91 	.word	0x0802ae91

0802af24 <__sfp_lock_acquire>:
 802af24:	4801      	ldr	r0, [pc, #4]	@ (802af2c <__sfp_lock_acquire+0x8>)
 802af26:	f000 b9b8 	b.w	802b29a <__retarget_lock_acquire_recursive>
 802af2a:	bf00      	nop
 802af2c:	2400baca 	.word	0x2400baca

0802af30 <__sfp_lock_release>:
 802af30:	4801      	ldr	r0, [pc, #4]	@ (802af38 <__sfp_lock_release+0x8>)
 802af32:	f000 b9b3 	b.w	802b29c <__retarget_lock_release_recursive>
 802af36:	bf00      	nop
 802af38:	2400baca 	.word	0x2400baca

0802af3c <__sinit>:
 802af3c:	b510      	push	{r4, lr}
 802af3e:	4604      	mov	r4, r0
 802af40:	f7ff fff0 	bl	802af24 <__sfp_lock_acquire>
 802af44:	6a23      	ldr	r3, [r4, #32]
 802af46:	b11b      	cbz	r3, 802af50 <__sinit+0x14>
 802af48:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 802af4c:	f7ff bff0 	b.w	802af30 <__sfp_lock_release>
 802af50:	4b04      	ldr	r3, [pc, #16]	@ (802af64 <__sinit+0x28>)
 802af52:	6223      	str	r3, [r4, #32]
 802af54:	4b04      	ldr	r3, [pc, #16]	@ (802af68 <__sinit+0x2c>)
 802af56:	681b      	ldr	r3, [r3, #0]
 802af58:	2b00      	cmp	r3, #0
 802af5a:	d1f5      	bne.n	802af48 <__sinit+0xc>
 802af5c:	f7ff ffc4 	bl	802aee8 <global_stdio_init.part.0>
 802af60:	e7f2      	b.n	802af48 <__sinit+0xc>
 802af62:	bf00      	nop
 802af64:	0802aea9 	.word	0x0802aea9
 802af68:	2400bac0 	.word	0x2400bac0

0802af6c <fiprintf>:
 802af6c:	b40e      	push	{r1, r2, r3}
 802af6e:	b503      	push	{r0, r1, lr}
 802af70:	4601      	mov	r1, r0
 802af72:	ab03      	add	r3, sp, #12
 802af74:	4805      	ldr	r0, [pc, #20]	@ (802af8c <fiprintf+0x20>)
 802af76:	f853 2b04 	ldr.w	r2, [r3], #4
 802af7a:	6800      	ldr	r0, [r0, #0]
 802af7c:	9301      	str	r3, [sp, #4]
 802af7e:	f000 fa6d 	bl	802b45c <_vfiprintf_r>
 802af82:	b002      	add	sp, #8
 802af84:	f85d eb04 	ldr.w	lr, [sp], #4
 802af88:	b003      	add	sp, #12
 802af8a:	4770      	bx	lr
 802af8c:	240000d8 	.word	0x240000d8

0802af90 <_fwalk_sglue>:
 802af90:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 802af94:	4607      	mov	r7, r0
 802af96:	4688      	mov	r8, r1
 802af98:	4614      	mov	r4, r2
 802af9a:	2600      	movs	r6, #0
 802af9c:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 802afa0:	f1b9 0901 	subs.w	r9, r9, #1
 802afa4:	d505      	bpl.n	802afb2 <_fwalk_sglue+0x22>
 802afa6:	6824      	ldr	r4, [r4, #0]
 802afa8:	2c00      	cmp	r4, #0
 802afaa:	d1f7      	bne.n	802af9c <_fwalk_sglue+0xc>
 802afac:	4630      	mov	r0, r6
 802afae:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 802afb2:	89ab      	ldrh	r3, [r5, #12]
 802afb4:	2b01      	cmp	r3, #1
 802afb6:	d907      	bls.n	802afc8 <_fwalk_sglue+0x38>
 802afb8:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 802afbc:	3301      	adds	r3, #1
 802afbe:	d003      	beq.n	802afc8 <_fwalk_sglue+0x38>
 802afc0:	4629      	mov	r1, r5
 802afc2:	4638      	mov	r0, r7
 802afc4:	47c0      	blx	r8
 802afc6:	4306      	orrs	r6, r0
 802afc8:	3568      	adds	r5, #104	@ 0x68
 802afca:	e7e9      	b.n	802afa0 <_fwalk_sglue+0x10>

0802afcc <__sread>:
 802afcc:	b510      	push	{r4, lr}
 802afce:	460c      	mov	r4, r1
 802afd0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 802afd4:	f000 f8ee 	bl	802b1b4 <_read_r>
 802afd8:	2800      	cmp	r0, #0
 802afda:	bfab      	itete	ge
 802afdc:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 802afde:	89a3      	ldrhlt	r3, [r4, #12]
 802afe0:	181b      	addge	r3, r3, r0
 802afe2:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 802afe6:	bfac      	ite	ge
 802afe8:	6563      	strge	r3, [r4, #84]	@ 0x54
 802afea:	81a3      	strhlt	r3, [r4, #12]
 802afec:	bd10      	pop	{r4, pc}

0802afee <__swrite>:
 802afee:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 802aff2:	461f      	mov	r7, r3
 802aff4:	898b      	ldrh	r3, [r1, #12]
 802aff6:	05db      	lsls	r3, r3, #23
 802aff8:	4605      	mov	r5, r0
 802affa:	460c      	mov	r4, r1
 802affc:	4616      	mov	r6, r2
 802affe:	d505      	bpl.n	802b00c <__swrite+0x1e>
 802b000:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 802b004:	2302      	movs	r3, #2
 802b006:	2200      	movs	r2, #0
 802b008:	f000 f8c2 	bl	802b190 <_lseek_r>
 802b00c:	89a3      	ldrh	r3, [r4, #12]
 802b00e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 802b012:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 802b016:	81a3      	strh	r3, [r4, #12]
 802b018:	4632      	mov	r2, r6
 802b01a:	463b      	mov	r3, r7
 802b01c:	4628      	mov	r0, r5
 802b01e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 802b022:	f000 b8fd 	b.w	802b220 <_write_r>

0802b026 <__sseek>:
 802b026:	b510      	push	{r4, lr}
 802b028:	460c      	mov	r4, r1
 802b02a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 802b02e:	f000 f8af 	bl	802b190 <_lseek_r>
 802b032:	1c43      	adds	r3, r0, #1
 802b034:	89a3      	ldrh	r3, [r4, #12]
 802b036:	bf15      	itete	ne
 802b038:	6560      	strne	r0, [r4, #84]	@ 0x54
 802b03a:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 802b03e:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 802b042:	81a3      	strheq	r3, [r4, #12]
 802b044:	bf18      	it	ne
 802b046:	81a3      	strhne	r3, [r4, #12]
 802b048:	bd10      	pop	{r4, pc}

0802b04a <__sclose>:
 802b04a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 802b04e:	f000 b839 	b.w	802b0c4 <_close_r>

0802b052 <memset>:
 802b052:	4402      	add	r2, r0
 802b054:	4603      	mov	r3, r0
 802b056:	4293      	cmp	r3, r2
 802b058:	d100      	bne.n	802b05c <memset+0xa>
 802b05a:	4770      	bx	lr
 802b05c:	f803 1b01 	strb.w	r1, [r3], #1
 802b060:	e7f9      	b.n	802b056 <memset+0x4>

0802b062 <_raise_r>:
 802b062:	291f      	cmp	r1, #31
 802b064:	b538      	push	{r3, r4, r5, lr}
 802b066:	4605      	mov	r5, r0
 802b068:	460c      	mov	r4, r1
 802b06a:	d904      	bls.n	802b076 <_raise_r+0x14>
 802b06c:	2316      	movs	r3, #22
 802b06e:	6003      	str	r3, [r0, #0]
 802b070:	f04f 30ff 	mov.w	r0, #4294967295
 802b074:	bd38      	pop	{r3, r4, r5, pc}
 802b076:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 802b078:	b112      	cbz	r2, 802b080 <_raise_r+0x1e>
 802b07a:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 802b07e:	b94b      	cbnz	r3, 802b094 <_raise_r+0x32>
 802b080:	4628      	mov	r0, r5
 802b082:	f000 f8bb 	bl	802b1fc <_getpid_r>
 802b086:	4622      	mov	r2, r4
 802b088:	4601      	mov	r1, r0
 802b08a:	4628      	mov	r0, r5
 802b08c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 802b090:	f000 b8a2 	b.w	802b1d8 <_kill_r>
 802b094:	2b01      	cmp	r3, #1
 802b096:	d00a      	beq.n	802b0ae <_raise_r+0x4c>
 802b098:	1c59      	adds	r1, r3, #1
 802b09a:	d103      	bne.n	802b0a4 <_raise_r+0x42>
 802b09c:	2316      	movs	r3, #22
 802b09e:	6003      	str	r3, [r0, #0]
 802b0a0:	2001      	movs	r0, #1
 802b0a2:	e7e7      	b.n	802b074 <_raise_r+0x12>
 802b0a4:	2100      	movs	r1, #0
 802b0a6:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 802b0aa:	4620      	mov	r0, r4
 802b0ac:	4798      	blx	r3
 802b0ae:	2000      	movs	r0, #0
 802b0b0:	e7e0      	b.n	802b074 <_raise_r+0x12>
	...

0802b0b4 <raise>:
 802b0b4:	4b02      	ldr	r3, [pc, #8]	@ (802b0c0 <raise+0xc>)
 802b0b6:	4601      	mov	r1, r0
 802b0b8:	6818      	ldr	r0, [r3, #0]
 802b0ba:	f7ff bfd2 	b.w	802b062 <_raise_r>
 802b0be:	bf00      	nop
 802b0c0:	240000d8 	.word	0x240000d8

0802b0c4 <_close_r>:
 802b0c4:	b538      	push	{r3, r4, r5, lr}
 802b0c6:	4d06      	ldr	r5, [pc, #24]	@ (802b0e0 <_close_r+0x1c>)
 802b0c8:	2300      	movs	r3, #0
 802b0ca:	4604      	mov	r4, r0
 802b0cc:	4608      	mov	r0, r1
 802b0ce:	602b      	str	r3, [r5, #0]
 802b0d0:	f7d6 fb08 	bl	80016e4 <_close>
 802b0d4:	1c43      	adds	r3, r0, #1
 802b0d6:	d102      	bne.n	802b0de <_close_r+0x1a>
 802b0d8:	682b      	ldr	r3, [r5, #0]
 802b0da:	b103      	cbz	r3, 802b0de <_close_r+0x1a>
 802b0dc:	6023      	str	r3, [r4, #0]
 802b0de:	bd38      	pop	{r3, r4, r5, pc}
 802b0e0:	2400bac4 	.word	0x2400bac4

0802b0e4 <_reclaim_reent>:
 802b0e4:	4b29      	ldr	r3, [pc, #164]	@ (802b18c <_reclaim_reent+0xa8>)
 802b0e6:	681b      	ldr	r3, [r3, #0]
 802b0e8:	4283      	cmp	r3, r0
 802b0ea:	b570      	push	{r4, r5, r6, lr}
 802b0ec:	4604      	mov	r4, r0
 802b0ee:	d04b      	beq.n	802b188 <_reclaim_reent+0xa4>
 802b0f0:	69c3      	ldr	r3, [r0, #28]
 802b0f2:	b1ab      	cbz	r3, 802b120 <_reclaim_reent+0x3c>
 802b0f4:	68db      	ldr	r3, [r3, #12]
 802b0f6:	b16b      	cbz	r3, 802b114 <_reclaim_reent+0x30>
 802b0f8:	2500      	movs	r5, #0
 802b0fa:	69e3      	ldr	r3, [r4, #28]
 802b0fc:	68db      	ldr	r3, [r3, #12]
 802b0fe:	5959      	ldr	r1, [r3, r5]
 802b100:	2900      	cmp	r1, #0
 802b102:	d13b      	bne.n	802b17c <_reclaim_reent+0x98>
 802b104:	3504      	adds	r5, #4
 802b106:	2d80      	cmp	r5, #128	@ 0x80
 802b108:	d1f7      	bne.n	802b0fa <_reclaim_reent+0x16>
 802b10a:	69e3      	ldr	r3, [r4, #28]
 802b10c:	4620      	mov	r0, r4
 802b10e:	68d9      	ldr	r1, [r3, #12]
 802b110:	f000 f930 	bl	802b374 <_free_r>
 802b114:	69e3      	ldr	r3, [r4, #28]
 802b116:	6819      	ldr	r1, [r3, #0]
 802b118:	b111      	cbz	r1, 802b120 <_reclaim_reent+0x3c>
 802b11a:	4620      	mov	r0, r4
 802b11c:	f000 f92a 	bl	802b374 <_free_r>
 802b120:	6961      	ldr	r1, [r4, #20]
 802b122:	b111      	cbz	r1, 802b12a <_reclaim_reent+0x46>
 802b124:	4620      	mov	r0, r4
 802b126:	f000 f925 	bl	802b374 <_free_r>
 802b12a:	69e1      	ldr	r1, [r4, #28]
 802b12c:	b111      	cbz	r1, 802b134 <_reclaim_reent+0x50>
 802b12e:	4620      	mov	r0, r4
 802b130:	f000 f920 	bl	802b374 <_free_r>
 802b134:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 802b136:	b111      	cbz	r1, 802b13e <_reclaim_reent+0x5a>
 802b138:	4620      	mov	r0, r4
 802b13a:	f000 f91b 	bl	802b374 <_free_r>
 802b13e:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 802b140:	b111      	cbz	r1, 802b148 <_reclaim_reent+0x64>
 802b142:	4620      	mov	r0, r4
 802b144:	f000 f916 	bl	802b374 <_free_r>
 802b148:	6ba1      	ldr	r1, [r4, #56]	@ 0x38
 802b14a:	b111      	cbz	r1, 802b152 <_reclaim_reent+0x6e>
 802b14c:	4620      	mov	r0, r4
 802b14e:	f000 f911 	bl	802b374 <_free_r>
 802b152:	6ca1      	ldr	r1, [r4, #72]	@ 0x48
 802b154:	b111      	cbz	r1, 802b15c <_reclaim_reent+0x78>
 802b156:	4620      	mov	r0, r4
 802b158:	f000 f90c 	bl	802b374 <_free_r>
 802b15c:	6c61      	ldr	r1, [r4, #68]	@ 0x44
 802b15e:	b111      	cbz	r1, 802b166 <_reclaim_reent+0x82>
 802b160:	4620      	mov	r0, r4
 802b162:	f000 f907 	bl	802b374 <_free_r>
 802b166:	6ae1      	ldr	r1, [r4, #44]	@ 0x2c
 802b168:	b111      	cbz	r1, 802b170 <_reclaim_reent+0x8c>
 802b16a:	4620      	mov	r0, r4
 802b16c:	f000 f902 	bl	802b374 <_free_r>
 802b170:	6a23      	ldr	r3, [r4, #32]
 802b172:	b14b      	cbz	r3, 802b188 <_reclaim_reent+0xa4>
 802b174:	4620      	mov	r0, r4
 802b176:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 802b17a:	4718      	bx	r3
 802b17c:	680e      	ldr	r6, [r1, #0]
 802b17e:	4620      	mov	r0, r4
 802b180:	f000 f8f8 	bl	802b374 <_free_r>
 802b184:	4631      	mov	r1, r6
 802b186:	e7bb      	b.n	802b100 <_reclaim_reent+0x1c>
 802b188:	bd70      	pop	{r4, r5, r6, pc}
 802b18a:	bf00      	nop
 802b18c:	240000d8 	.word	0x240000d8

0802b190 <_lseek_r>:
 802b190:	b538      	push	{r3, r4, r5, lr}
 802b192:	4d07      	ldr	r5, [pc, #28]	@ (802b1b0 <_lseek_r+0x20>)
 802b194:	4604      	mov	r4, r0
 802b196:	4608      	mov	r0, r1
 802b198:	4611      	mov	r1, r2
 802b19a:	2200      	movs	r2, #0
 802b19c:	602a      	str	r2, [r5, #0]
 802b19e:	461a      	mov	r2, r3
 802b1a0:	f7d6 fac7 	bl	8001732 <_lseek>
 802b1a4:	1c43      	adds	r3, r0, #1
 802b1a6:	d102      	bne.n	802b1ae <_lseek_r+0x1e>
 802b1a8:	682b      	ldr	r3, [r5, #0]
 802b1aa:	b103      	cbz	r3, 802b1ae <_lseek_r+0x1e>
 802b1ac:	6023      	str	r3, [r4, #0]
 802b1ae:	bd38      	pop	{r3, r4, r5, pc}
 802b1b0:	2400bac4 	.word	0x2400bac4

0802b1b4 <_read_r>:
 802b1b4:	b538      	push	{r3, r4, r5, lr}
 802b1b6:	4d07      	ldr	r5, [pc, #28]	@ (802b1d4 <_read_r+0x20>)
 802b1b8:	4604      	mov	r4, r0
 802b1ba:	4608      	mov	r0, r1
 802b1bc:	4611      	mov	r1, r2
 802b1be:	2200      	movs	r2, #0
 802b1c0:	602a      	str	r2, [r5, #0]
 802b1c2:	461a      	mov	r2, r3
 802b1c4:	f7d6 fa71 	bl	80016aa <_read>
 802b1c8:	1c43      	adds	r3, r0, #1
 802b1ca:	d102      	bne.n	802b1d2 <_read_r+0x1e>
 802b1cc:	682b      	ldr	r3, [r5, #0]
 802b1ce:	b103      	cbz	r3, 802b1d2 <_read_r+0x1e>
 802b1d0:	6023      	str	r3, [r4, #0]
 802b1d2:	bd38      	pop	{r3, r4, r5, pc}
 802b1d4:	2400bac4 	.word	0x2400bac4

0802b1d8 <_kill_r>:
 802b1d8:	b538      	push	{r3, r4, r5, lr}
 802b1da:	4d07      	ldr	r5, [pc, #28]	@ (802b1f8 <_kill_r+0x20>)
 802b1dc:	2300      	movs	r3, #0
 802b1de:	4604      	mov	r4, r0
 802b1e0:	4608      	mov	r0, r1
 802b1e2:	4611      	mov	r1, r2
 802b1e4:	602b      	str	r3, [r5, #0]
 802b1e6:	f7d6 fa45 	bl	8001674 <_kill>
 802b1ea:	1c43      	adds	r3, r0, #1
 802b1ec:	d102      	bne.n	802b1f4 <_kill_r+0x1c>
 802b1ee:	682b      	ldr	r3, [r5, #0]
 802b1f0:	b103      	cbz	r3, 802b1f4 <_kill_r+0x1c>
 802b1f2:	6023      	str	r3, [r4, #0]
 802b1f4:	bd38      	pop	{r3, r4, r5, pc}
 802b1f6:	bf00      	nop
 802b1f8:	2400bac4 	.word	0x2400bac4

0802b1fc <_getpid_r>:
 802b1fc:	f7d6 ba32 	b.w	8001664 <_getpid>

0802b200 <_sbrk_r>:
 802b200:	b538      	push	{r3, r4, r5, lr}
 802b202:	4d06      	ldr	r5, [pc, #24]	@ (802b21c <_sbrk_r+0x1c>)
 802b204:	2300      	movs	r3, #0
 802b206:	4604      	mov	r4, r0
 802b208:	4608      	mov	r0, r1
 802b20a:	602b      	str	r3, [r5, #0]
 802b20c:	f7d6 fa9e 	bl	800174c <_sbrk>
 802b210:	1c43      	adds	r3, r0, #1
 802b212:	d102      	bne.n	802b21a <_sbrk_r+0x1a>
 802b214:	682b      	ldr	r3, [r5, #0]
 802b216:	b103      	cbz	r3, 802b21a <_sbrk_r+0x1a>
 802b218:	6023      	str	r3, [r4, #0]
 802b21a:	bd38      	pop	{r3, r4, r5, pc}
 802b21c:	2400bac4 	.word	0x2400bac4

0802b220 <_write_r>:
 802b220:	b538      	push	{r3, r4, r5, lr}
 802b222:	4d07      	ldr	r5, [pc, #28]	@ (802b240 <_write_r+0x20>)
 802b224:	4604      	mov	r4, r0
 802b226:	4608      	mov	r0, r1
 802b228:	4611      	mov	r1, r2
 802b22a:	2200      	movs	r2, #0
 802b22c:	602a      	str	r2, [r5, #0]
 802b22e:	461a      	mov	r2, r3
 802b230:	f7d5 f923 	bl	800047a <_write>
 802b234:	1c43      	adds	r3, r0, #1
 802b236:	d102      	bne.n	802b23e <_write_r+0x1e>
 802b238:	682b      	ldr	r3, [r5, #0]
 802b23a:	b103      	cbz	r3, 802b23e <_write_r+0x1e>
 802b23c:	6023      	str	r3, [r4, #0]
 802b23e:	bd38      	pop	{r3, r4, r5, pc}
 802b240:	2400bac4 	.word	0x2400bac4

0802b244 <__errno>:
 802b244:	4b01      	ldr	r3, [pc, #4]	@ (802b24c <__errno+0x8>)
 802b246:	6818      	ldr	r0, [r3, #0]
 802b248:	4770      	bx	lr
 802b24a:	bf00      	nop
 802b24c:	240000d8 	.word	0x240000d8

0802b250 <__libc_init_array>:
 802b250:	b570      	push	{r4, r5, r6, lr}
 802b252:	4d0d      	ldr	r5, [pc, #52]	@ (802b288 <__libc_init_array+0x38>)
 802b254:	4c0d      	ldr	r4, [pc, #52]	@ (802b28c <__libc_init_array+0x3c>)
 802b256:	1b64      	subs	r4, r4, r5
 802b258:	10a4      	asrs	r4, r4, #2
 802b25a:	2600      	movs	r6, #0
 802b25c:	42a6      	cmp	r6, r4
 802b25e:	d109      	bne.n	802b274 <__libc_init_array+0x24>
 802b260:	4d0b      	ldr	r5, [pc, #44]	@ (802b290 <__libc_init_array+0x40>)
 802b262:	4c0c      	ldr	r4, [pc, #48]	@ (802b294 <__libc_init_array+0x44>)
 802b264:	f000 fd64 	bl	802bd30 <_init>
 802b268:	1b64      	subs	r4, r4, r5
 802b26a:	10a4      	asrs	r4, r4, #2
 802b26c:	2600      	movs	r6, #0
 802b26e:	42a6      	cmp	r6, r4
 802b270:	d105      	bne.n	802b27e <__libc_init_array+0x2e>
 802b272:	bd70      	pop	{r4, r5, r6, pc}
 802b274:	f855 3b04 	ldr.w	r3, [r5], #4
 802b278:	4798      	blx	r3
 802b27a:	3601      	adds	r6, #1
 802b27c:	e7ee      	b.n	802b25c <__libc_init_array+0xc>
 802b27e:	f855 3b04 	ldr.w	r3, [r5], #4
 802b282:	4798      	blx	r3
 802b284:	3601      	adds	r6, #1
 802b286:	e7f2      	b.n	802b26e <__libc_init_array+0x1e>
 802b288:	08030784 	.word	0x08030784
 802b28c:	08030784 	.word	0x08030784
 802b290:	08030784 	.word	0x08030784
 802b294:	08030798 	.word	0x08030798

0802b298 <__retarget_lock_init_recursive>:
 802b298:	4770      	bx	lr

0802b29a <__retarget_lock_acquire_recursive>:
 802b29a:	4770      	bx	lr

0802b29c <__retarget_lock_release_recursive>:
 802b29c:	4770      	bx	lr

0802b29e <memcpy>:
 802b29e:	440a      	add	r2, r1
 802b2a0:	4291      	cmp	r1, r2
 802b2a2:	f100 33ff 	add.w	r3, r0, #4294967295
 802b2a6:	d100      	bne.n	802b2aa <memcpy+0xc>
 802b2a8:	4770      	bx	lr
 802b2aa:	b510      	push	{r4, lr}
 802b2ac:	f811 4b01 	ldrb.w	r4, [r1], #1
 802b2b0:	f803 4f01 	strb.w	r4, [r3, #1]!
 802b2b4:	4291      	cmp	r1, r2
 802b2b6:	d1f9      	bne.n	802b2ac <memcpy+0xe>
 802b2b8:	bd10      	pop	{r4, pc}
	...

0802b2bc <__register_exitproc>:
 802b2bc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 802b2c0:	4d27      	ldr	r5, [pc, #156]	@ (802b360 <__register_exitproc+0xa4>)
 802b2c2:	4607      	mov	r7, r0
 802b2c4:	6828      	ldr	r0, [r5, #0]
 802b2c6:	4691      	mov	r9, r2
 802b2c8:	460e      	mov	r6, r1
 802b2ca:	4698      	mov	r8, r3
 802b2cc:	f7ff ffe5 	bl	802b29a <__retarget_lock_acquire_recursive>
 802b2d0:	4a24      	ldr	r2, [pc, #144]	@ (802b364 <__register_exitproc+0xa8>)
 802b2d2:	6814      	ldr	r4, [r2, #0]
 802b2d4:	b93c      	cbnz	r4, 802b2e6 <__register_exitproc+0x2a>
 802b2d6:	4b24      	ldr	r3, [pc, #144]	@ (802b368 <__register_exitproc+0xac>)
 802b2d8:	6013      	str	r3, [r2, #0]
 802b2da:	4a24      	ldr	r2, [pc, #144]	@ (802b36c <__register_exitproc+0xb0>)
 802b2dc:	b112      	cbz	r2, 802b2e4 <__register_exitproc+0x28>
 802b2de:	6812      	ldr	r2, [r2, #0]
 802b2e0:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
 802b2e4:	4c20      	ldr	r4, [pc, #128]	@ (802b368 <__register_exitproc+0xac>)
 802b2e6:	6863      	ldr	r3, [r4, #4]
 802b2e8:	2b1f      	cmp	r3, #31
 802b2ea:	dd06      	ble.n	802b2fa <__register_exitproc+0x3e>
 802b2ec:	6828      	ldr	r0, [r5, #0]
 802b2ee:	f7ff ffd5 	bl	802b29c <__retarget_lock_release_recursive>
 802b2f2:	f04f 30ff 	mov.w	r0, #4294967295
 802b2f6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 802b2fa:	b32f      	cbz	r7, 802b348 <__register_exitproc+0x8c>
 802b2fc:	f8d4 0088 	ldr.w	r0, [r4, #136]	@ 0x88
 802b300:	b968      	cbnz	r0, 802b31e <__register_exitproc+0x62>
 802b302:	4b1b      	ldr	r3, [pc, #108]	@ (802b370 <__register_exitproc+0xb4>)
 802b304:	2b00      	cmp	r3, #0
 802b306:	d0f1      	beq.n	802b2ec <__register_exitproc+0x30>
 802b308:	f44f 7084 	mov.w	r0, #264	@ 0x108
 802b30c:	f7ff fcbe 	bl	802ac8c <malloc>
 802b310:	2800      	cmp	r0, #0
 802b312:	d0eb      	beq.n	802b2ec <__register_exitproc+0x30>
 802b314:	2300      	movs	r3, #0
 802b316:	e9c0 3340 	strd	r3, r3, [r0, #256]	@ 0x100
 802b31a:	f8c4 0088 	str.w	r0, [r4, #136]	@ 0x88
 802b31e:	6863      	ldr	r3, [r4, #4]
 802b320:	f840 9023 	str.w	r9, [r0, r3, lsl #2]
 802b324:	2201      	movs	r2, #1
 802b326:	409a      	lsls	r2, r3
 802b328:	eb00 0183 	add.w	r1, r0, r3, lsl #2
 802b32c:	f8d0 3100 	ldr.w	r3, [r0, #256]	@ 0x100
 802b330:	4313      	orrs	r3, r2
 802b332:	f8c0 3100 	str.w	r3, [r0, #256]	@ 0x100
 802b336:	2f02      	cmp	r7, #2
 802b338:	f8c1 8080 	str.w	r8, [r1, #128]	@ 0x80
 802b33c:	bf02      	ittt	eq
 802b33e:	f8d0 3104 	ldreq.w	r3, [r0, #260]	@ 0x104
 802b342:	4313      	orreq	r3, r2
 802b344:	f8c0 3104 	streq.w	r3, [r0, #260]	@ 0x104
 802b348:	6863      	ldr	r3, [r4, #4]
 802b34a:	6828      	ldr	r0, [r5, #0]
 802b34c:	1c5a      	adds	r2, r3, #1
 802b34e:	3302      	adds	r3, #2
 802b350:	6062      	str	r2, [r4, #4]
 802b352:	f844 6023 	str.w	r6, [r4, r3, lsl #2]
 802b356:	f7ff ffa1 	bl	802b29c <__retarget_lock_release_recursive>
 802b35a:	2000      	movs	r0, #0
 802b35c:	e7cb      	b.n	802b2f6 <__register_exitproc+0x3a>
 802b35e:	bf00      	nop
 802b360:	24000128 	.word	0x24000128
 802b364:	2400bb58 	.word	0x2400bb58
 802b368:	2400bacc 	.word	0x2400bacc
 802b36c:	0803071c 	.word	0x0803071c
 802b370:	0802ac8d 	.word	0x0802ac8d

0802b374 <_free_r>:
 802b374:	b538      	push	{r3, r4, r5, lr}
 802b376:	4605      	mov	r5, r0
 802b378:	2900      	cmp	r1, #0
 802b37a:	d041      	beq.n	802b400 <_free_r+0x8c>
 802b37c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 802b380:	1f0c      	subs	r4, r1, #4
 802b382:	2b00      	cmp	r3, #0
 802b384:	bfb8      	it	lt
 802b386:	18e4      	addlt	r4, r4, r3
 802b388:	f7ff fd32 	bl	802adf0 <__malloc_lock>
 802b38c:	4a1d      	ldr	r2, [pc, #116]	@ (802b404 <_free_r+0x90>)
 802b38e:	6813      	ldr	r3, [r2, #0]
 802b390:	b933      	cbnz	r3, 802b3a0 <_free_r+0x2c>
 802b392:	6063      	str	r3, [r4, #4]
 802b394:	6014      	str	r4, [r2, #0]
 802b396:	4628      	mov	r0, r5
 802b398:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 802b39c:	f7ff bd2e 	b.w	802adfc <__malloc_unlock>
 802b3a0:	42a3      	cmp	r3, r4
 802b3a2:	d908      	bls.n	802b3b6 <_free_r+0x42>
 802b3a4:	6820      	ldr	r0, [r4, #0]
 802b3a6:	1821      	adds	r1, r4, r0
 802b3a8:	428b      	cmp	r3, r1
 802b3aa:	bf01      	itttt	eq
 802b3ac:	6819      	ldreq	r1, [r3, #0]
 802b3ae:	685b      	ldreq	r3, [r3, #4]
 802b3b0:	1809      	addeq	r1, r1, r0
 802b3b2:	6021      	streq	r1, [r4, #0]
 802b3b4:	e7ed      	b.n	802b392 <_free_r+0x1e>
 802b3b6:	461a      	mov	r2, r3
 802b3b8:	685b      	ldr	r3, [r3, #4]
 802b3ba:	b10b      	cbz	r3, 802b3c0 <_free_r+0x4c>
 802b3bc:	42a3      	cmp	r3, r4
 802b3be:	d9fa      	bls.n	802b3b6 <_free_r+0x42>
 802b3c0:	6811      	ldr	r1, [r2, #0]
 802b3c2:	1850      	adds	r0, r2, r1
 802b3c4:	42a0      	cmp	r0, r4
 802b3c6:	d10b      	bne.n	802b3e0 <_free_r+0x6c>
 802b3c8:	6820      	ldr	r0, [r4, #0]
 802b3ca:	4401      	add	r1, r0
 802b3cc:	1850      	adds	r0, r2, r1
 802b3ce:	4283      	cmp	r3, r0
 802b3d0:	6011      	str	r1, [r2, #0]
 802b3d2:	d1e0      	bne.n	802b396 <_free_r+0x22>
 802b3d4:	6818      	ldr	r0, [r3, #0]
 802b3d6:	685b      	ldr	r3, [r3, #4]
 802b3d8:	6053      	str	r3, [r2, #4]
 802b3da:	4408      	add	r0, r1
 802b3dc:	6010      	str	r0, [r2, #0]
 802b3de:	e7da      	b.n	802b396 <_free_r+0x22>
 802b3e0:	d902      	bls.n	802b3e8 <_free_r+0x74>
 802b3e2:	230c      	movs	r3, #12
 802b3e4:	602b      	str	r3, [r5, #0]
 802b3e6:	e7d6      	b.n	802b396 <_free_r+0x22>
 802b3e8:	6820      	ldr	r0, [r4, #0]
 802b3ea:	1821      	adds	r1, r4, r0
 802b3ec:	428b      	cmp	r3, r1
 802b3ee:	bf04      	itt	eq
 802b3f0:	6819      	ldreq	r1, [r3, #0]
 802b3f2:	685b      	ldreq	r3, [r3, #4]
 802b3f4:	6063      	str	r3, [r4, #4]
 802b3f6:	bf04      	itt	eq
 802b3f8:	1809      	addeq	r1, r1, r0
 802b3fa:	6021      	streq	r1, [r4, #0]
 802b3fc:	6054      	str	r4, [r2, #4]
 802b3fe:	e7ca      	b.n	802b396 <_free_r+0x22>
 802b400:	bd38      	pop	{r3, r4, r5, pc}
 802b402:	bf00      	nop
 802b404:	2400b984 	.word	0x2400b984

0802b408 <__sfputc_r>:
 802b408:	6893      	ldr	r3, [r2, #8]
 802b40a:	3b01      	subs	r3, #1
 802b40c:	2b00      	cmp	r3, #0
 802b40e:	b410      	push	{r4}
 802b410:	6093      	str	r3, [r2, #8]
 802b412:	da08      	bge.n	802b426 <__sfputc_r+0x1e>
 802b414:	6994      	ldr	r4, [r2, #24]
 802b416:	42a3      	cmp	r3, r4
 802b418:	db01      	blt.n	802b41e <__sfputc_r+0x16>
 802b41a:	290a      	cmp	r1, #10
 802b41c:	d103      	bne.n	802b426 <__sfputc_r+0x1e>
 802b41e:	f85d 4b04 	ldr.w	r4, [sp], #4
 802b422:	f000 bb6d 	b.w	802bb00 <__swbuf_r>
 802b426:	6813      	ldr	r3, [r2, #0]
 802b428:	1c58      	adds	r0, r3, #1
 802b42a:	6010      	str	r0, [r2, #0]
 802b42c:	7019      	strb	r1, [r3, #0]
 802b42e:	4608      	mov	r0, r1
 802b430:	f85d 4b04 	ldr.w	r4, [sp], #4
 802b434:	4770      	bx	lr

0802b436 <__sfputs_r>:
 802b436:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 802b438:	4606      	mov	r6, r0
 802b43a:	460f      	mov	r7, r1
 802b43c:	4614      	mov	r4, r2
 802b43e:	18d5      	adds	r5, r2, r3
 802b440:	42ac      	cmp	r4, r5
 802b442:	d101      	bne.n	802b448 <__sfputs_r+0x12>
 802b444:	2000      	movs	r0, #0
 802b446:	e007      	b.n	802b458 <__sfputs_r+0x22>
 802b448:	f814 1b01 	ldrb.w	r1, [r4], #1
 802b44c:	463a      	mov	r2, r7
 802b44e:	4630      	mov	r0, r6
 802b450:	f7ff ffda 	bl	802b408 <__sfputc_r>
 802b454:	1c43      	adds	r3, r0, #1
 802b456:	d1f3      	bne.n	802b440 <__sfputs_r+0xa>
 802b458:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0802b45c <_vfiprintf_r>:
 802b45c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 802b460:	460d      	mov	r5, r1
 802b462:	b09d      	sub	sp, #116	@ 0x74
 802b464:	4614      	mov	r4, r2
 802b466:	4698      	mov	r8, r3
 802b468:	4606      	mov	r6, r0
 802b46a:	b118      	cbz	r0, 802b474 <_vfiprintf_r+0x18>
 802b46c:	6a03      	ldr	r3, [r0, #32]
 802b46e:	b90b      	cbnz	r3, 802b474 <_vfiprintf_r+0x18>
 802b470:	f7ff fd64 	bl	802af3c <__sinit>
 802b474:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 802b476:	07d9      	lsls	r1, r3, #31
 802b478:	d405      	bmi.n	802b486 <_vfiprintf_r+0x2a>
 802b47a:	89ab      	ldrh	r3, [r5, #12]
 802b47c:	059a      	lsls	r2, r3, #22
 802b47e:	d402      	bmi.n	802b486 <_vfiprintf_r+0x2a>
 802b480:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 802b482:	f7ff ff0a 	bl	802b29a <__retarget_lock_acquire_recursive>
 802b486:	89ab      	ldrh	r3, [r5, #12]
 802b488:	071b      	lsls	r3, r3, #28
 802b48a:	d501      	bpl.n	802b490 <_vfiprintf_r+0x34>
 802b48c:	692b      	ldr	r3, [r5, #16]
 802b48e:	b99b      	cbnz	r3, 802b4b8 <_vfiprintf_r+0x5c>
 802b490:	4629      	mov	r1, r5
 802b492:	4630      	mov	r0, r6
 802b494:	f000 fb72 	bl	802bb7c <__swsetup_r>
 802b498:	b170      	cbz	r0, 802b4b8 <_vfiprintf_r+0x5c>
 802b49a:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 802b49c:	07dc      	lsls	r4, r3, #31
 802b49e:	d504      	bpl.n	802b4aa <_vfiprintf_r+0x4e>
 802b4a0:	f04f 30ff 	mov.w	r0, #4294967295
 802b4a4:	b01d      	add	sp, #116	@ 0x74
 802b4a6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 802b4aa:	89ab      	ldrh	r3, [r5, #12]
 802b4ac:	0598      	lsls	r0, r3, #22
 802b4ae:	d4f7      	bmi.n	802b4a0 <_vfiprintf_r+0x44>
 802b4b0:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 802b4b2:	f7ff fef3 	bl	802b29c <__retarget_lock_release_recursive>
 802b4b6:	e7f3      	b.n	802b4a0 <_vfiprintf_r+0x44>
 802b4b8:	2300      	movs	r3, #0
 802b4ba:	9309      	str	r3, [sp, #36]	@ 0x24
 802b4bc:	2320      	movs	r3, #32
 802b4be:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 802b4c2:	f8cd 800c 	str.w	r8, [sp, #12]
 802b4c6:	2330      	movs	r3, #48	@ 0x30
 802b4c8:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 802b678 <_vfiprintf_r+0x21c>
 802b4cc:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 802b4d0:	f04f 0901 	mov.w	r9, #1
 802b4d4:	4623      	mov	r3, r4
 802b4d6:	469a      	mov	sl, r3
 802b4d8:	f813 2b01 	ldrb.w	r2, [r3], #1
 802b4dc:	b10a      	cbz	r2, 802b4e2 <_vfiprintf_r+0x86>
 802b4de:	2a25      	cmp	r2, #37	@ 0x25
 802b4e0:	d1f9      	bne.n	802b4d6 <_vfiprintf_r+0x7a>
 802b4e2:	ebba 0b04 	subs.w	fp, sl, r4
 802b4e6:	d00b      	beq.n	802b500 <_vfiprintf_r+0xa4>
 802b4e8:	465b      	mov	r3, fp
 802b4ea:	4622      	mov	r2, r4
 802b4ec:	4629      	mov	r1, r5
 802b4ee:	4630      	mov	r0, r6
 802b4f0:	f7ff ffa1 	bl	802b436 <__sfputs_r>
 802b4f4:	3001      	adds	r0, #1
 802b4f6:	f000 80a7 	beq.w	802b648 <_vfiprintf_r+0x1ec>
 802b4fa:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 802b4fc:	445a      	add	r2, fp
 802b4fe:	9209      	str	r2, [sp, #36]	@ 0x24
 802b500:	f89a 3000 	ldrb.w	r3, [sl]
 802b504:	2b00      	cmp	r3, #0
 802b506:	f000 809f 	beq.w	802b648 <_vfiprintf_r+0x1ec>
 802b50a:	2300      	movs	r3, #0
 802b50c:	f04f 32ff 	mov.w	r2, #4294967295
 802b510:	e9cd 2305 	strd	r2, r3, [sp, #20]
 802b514:	f10a 0a01 	add.w	sl, sl, #1
 802b518:	9304      	str	r3, [sp, #16]
 802b51a:	9307      	str	r3, [sp, #28]
 802b51c:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 802b520:	931a      	str	r3, [sp, #104]	@ 0x68
 802b522:	4654      	mov	r4, sl
 802b524:	2205      	movs	r2, #5
 802b526:	f814 1b01 	ldrb.w	r1, [r4], #1
 802b52a:	4853      	ldr	r0, [pc, #332]	@ (802b678 <_vfiprintf_r+0x21c>)
 802b52c:	f7d4 fed8 	bl	80002e0 <memchr>
 802b530:	9a04      	ldr	r2, [sp, #16]
 802b532:	b9d8      	cbnz	r0, 802b56c <_vfiprintf_r+0x110>
 802b534:	06d1      	lsls	r1, r2, #27
 802b536:	bf44      	itt	mi
 802b538:	2320      	movmi	r3, #32
 802b53a:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 802b53e:	0713      	lsls	r3, r2, #28
 802b540:	bf44      	itt	mi
 802b542:	232b      	movmi	r3, #43	@ 0x2b
 802b544:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 802b548:	f89a 3000 	ldrb.w	r3, [sl]
 802b54c:	2b2a      	cmp	r3, #42	@ 0x2a
 802b54e:	d015      	beq.n	802b57c <_vfiprintf_r+0x120>
 802b550:	9a07      	ldr	r2, [sp, #28]
 802b552:	4654      	mov	r4, sl
 802b554:	2000      	movs	r0, #0
 802b556:	f04f 0c0a 	mov.w	ip, #10
 802b55a:	4621      	mov	r1, r4
 802b55c:	f811 3b01 	ldrb.w	r3, [r1], #1
 802b560:	3b30      	subs	r3, #48	@ 0x30
 802b562:	2b09      	cmp	r3, #9
 802b564:	d94b      	bls.n	802b5fe <_vfiprintf_r+0x1a2>
 802b566:	b1b0      	cbz	r0, 802b596 <_vfiprintf_r+0x13a>
 802b568:	9207      	str	r2, [sp, #28]
 802b56a:	e014      	b.n	802b596 <_vfiprintf_r+0x13a>
 802b56c:	eba0 0308 	sub.w	r3, r0, r8
 802b570:	fa09 f303 	lsl.w	r3, r9, r3
 802b574:	4313      	orrs	r3, r2
 802b576:	9304      	str	r3, [sp, #16]
 802b578:	46a2      	mov	sl, r4
 802b57a:	e7d2      	b.n	802b522 <_vfiprintf_r+0xc6>
 802b57c:	9b03      	ldr	r3, [sp, #12]
 802b57e:	1d19      	adds	r1, r3, #4
 802b580:	681b      	ldr	r3, [r3, #0]
 802b582:	9103      	str	r1, [sp, #12]
 802b584:	2b00      	cmp	r3, #0
 802b586:	bfbb      	ittet	lt
 802b588:	425b      	neglt	r3, r3
 802b58a:	f042 0202 	orrlt.w	r2, r2, #2
 802b58e:	9307      	strge	r3, [sp, #28]
 802b590:	9307      	strlt	r3, [sp, #28]
 802b592:	bfb8      	it	lt
 802b594:	9204      	strlt	r2, [sp, #16]
 802b596:	7823      	ldrb	r3, [r4, #0]
 802b598:	2b2e      	cmp	r3, #46	@ 0x2e
 802b59a:	d10a      	bne.n	802b5b2 <_vfiprintf_r+0x156>
 802b59c:	7863      	ldrb	r3, [r4, #1]
 802b59e:	2b2a      	cmp	r3, #42	@ 0x2a
 802b5a0:	d132      	bne.n	802b608 <_vfiprintf_r+0x1ac>
 802b5a2:	9b03      	ldr	r3, [sp, #12]
 802b5a4:	1d1a      	adds	r2, r3, #4
 802b5a6:	681b      	ldr	r3, [r3, #0]
 802b5a8:	9203      	str	r2, [sp, #12]
 802b5aa:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 802b5ae:	3402      	adds	r4, #2
 802b5b0:	9305      	str	r3, [sp, #20]
 802b5b2:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 802b688 <_vfiprintf_r+0x22c>
 802b5b6:	7821      	ldrb	r1, [r4, #0]
 802b5b8:	2203      	movs	r2, #3
 802b5ba:	4650      	mov	r0, sl
 802b5bc:	f7d4 fe90 	bl	80002e0 <memchr>
 802b5c0:	b138      	cbz	r0, 802b5d2 <_vfiprintf_r+0x176>
 802b5c2:	9b04      	ldr	r3, [sp, #16]
 802b5c4:	eba0 000a 	sub.w	r0, r0, sl
 802b5c8:	2240      	movs	r2, #64	@ 0x40
 802b5ca:	4082      	lsls	r2, r0
 802b5cc:	4313      	orrs	r3, r2
 802b5ce:	3401      	adds	r4, #1
 802b5d0:	9304      	str	r3, [sp, #16]
 802b5d2:	f814 1b01 	ldrb.w	r1, [r4], #1
 802b5d6:	4829      	ldr	r0, [pc, #164]	@ (802b67c <_vfiprintf_r+0x220>)
 802b5d8:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 802b5dc:	2206      	movs	r2, #6
 802b5de:	f7d4 fe7f 	bl	80002e0 <memchr>
 802b5e2:	2800      	cmp	r0, #0
 802b5e4:	d03f      	beq.n	802b666 <_vfiprintf_r+0x20a>
 802b5e6:	4b26      	ldr	r3, [pc, #152]	@ (802b680 <_vfiprintf_r+0x224>)
 802b5e8:	bb1b      	cbnz	r3, 802b632 <_vfiprintf_r+0x1d6>
 802b5ea:	9b03      	ldr	r3, [sp, #12]
 802b5ec:	3307      	adds	r3, #7
 802b5ee:	f023 0307 	bic.w	r3, r3, #7
 802b5f2:	3308      	adds	r3, #8
 802b5f4:	9303      	str	r3, [sp, #12]
 802b5f6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 802b5f8:	443b      	add	r3, r7
 802b5fa:	9309      	str	r3, [sp, #36]	@ 0x24
 802b5fc:	e76a      	b.n	802b4d4 <_vfiprintf_r+0x78>
 802b5fe:	fb0c 3202 	mla	r2, ip, r2, r3
 802b602:	460c      	mov	r4, r1
 802b604:	2001      	movs	r0, #1
 802b606:	e7a8      	b.n	802b55a <_vfiprintf_r+0xfe>
 802b608:	2300      	movs	r3, #0
 802b60a:	3401      	adds	r4, #1
 802b60c:	9305      	str	r3, [sp, #20]
 802b60e:	4619      	mov	r1, r3
 802b610:	f04f 0c0a 	mov.w	ip, #10
 802b614:	4620      	mov	r0, r4
 802b616:	f810 2b01 	ldrb.w	r2, [r0], #1
 802b61a:	3a30      	subs	r2, #48	@ 0x30
 802b61c:	2a09      	cmp	r2, #9
 802b61e:	d903      	bls.n	802b628 <_vfiprintf_r+0x1cc>
 802b620:	2b00      	cmp	r3, #0
 802b622:	d0c6      	beq.n	802b5b2 <_vfiprintf_r+0x156>
 802b624:	9105      	str	r1, [sp, #20]
 802b626:	e7c4      	b.n	802b5b2 <_vfiprintf_r+0x156>
 802b628:	fb0c 2101 	mla	r1, ip, r1, r2
 802b62c:	4604      	mov	r4, r0
 802b62e:	2301      	movs	r3, #1
 802b630:	e7f0      	b.n	802b614 <_vfiprintf_r+0x1b8>
 802b632:	ab03      	add	r3, sp, #12
 802b634:	9300      	str	r3, [sp, #0]
 802b636:	462a      	mov	r2, r5
 802b638:	4b12      	ldr	r3, [pc, #72]	@ (802b684 <_vfiprintf_r+0x228>)
 802b63a:	a904      	add	r1, sp, #16
 802b63c:	4630      	mov	r0, r6
 802b63e:	f3af 8000 	nop.w
 802b642:	4607      	mov	r7, r0
 802b644:	1c78      	adds	r0, r7, #1
 802b646:	d1d6      	bne.n	802b5f6 <_vfiprintf_r+0x19a>
 802b648:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 802b64a:	07d9      	lsls	r1, r3, #31
 802b64c:	d405      	bmi.n	802b65a <_vfiprintf_r+0x1fe>
 802b64e:	89ab      	ldrh	r3, [r5, #12]
 802b650:	059a      	lsls	r2, r3, #22
 802b652:	d402      	bmi.n	802b65a <_vfiprintf_r+0x1fe>
 802b654:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 802b656:	f7ff fe21 	bl	802b29c <__retarget_lock_release_recursive>
 802b65a:	89ab      	ldrh	r3, [r5, #12]
 802b65c:	065b      	lsls	r3, r3, #25
 802b65e:	f53f af1f 	bmi.w	802b4a0 <_vfiprintf_r+0x44>
 802b662:	9809      	ldr	r0, [sp, #36]	@ 0x24
 802b664:	e71e      	b.n	802b4a4 <_vfiprintf_r+0x48>
 802b666:	ab03      	add	r3, sp, #12
 802b668:	9300      	str	r3, [sp, #0]
 802b66a:	462a      	mov	r2, r5
 802b66c:	4b05      	ldr	r3, [pc, #20]	@ (802b684 <_vfiprintf_r+0x228>)
 802b66e:	a904      	add	r1, sp, #16
 802b670:	4630      	mov	r0, r6
 802b672:	f000 f879 	bl	802b768 <_printf_i>
 802b676:	e7e4      	b.n	802b642 <_vfiprintf_r+0x1e6>
 802b678:	08030720 	.word	0x08030720
 802b67c:	0803072a 	.word	0x0803072a
 802b680:	00000000 	.word	0x00000000
 802b684:	0802b437 	.word	0x0802b437
 802b688:	08030726 	.word	0x08030726

0802b68c <_printf_common>:
 802b68c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 802b690:	4616      	mov	r6, r2
 802b692:	4698      	mov	r8, r3
 802b694:	688a      	ldr	r2, [r1, #8]
 802b696:	690b      	ldr	r3, [r1, #16]
 802b698:	f8dd 9020 	ldr.w	r9, [sp, #32]
 802b69c:	4293      	cmp	r3, r2
 802b69e:	bfb8      	it	lt
 802b6a0:	4613      	movlt	r3, r2
 802b6a2:	6033      	str	r3, [r6, #0]
 802b6a4:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 802b6a8:	4607      	mov	r7, r0
 802b6aa:	460c      	mov	r4, r1
 802b6ac:	b10a      	cbz	r2, 802b6b2 <_printf_common+0x26>
 802b6ae:	3301      	adds	r3, #1
 802b6b0:	6033      	str	r3, [r6, #0]
 802b6b2:	6823      	ldr	r3, [r4, #0]
 802b6b4:	0699      	lsls	r1, r3, #26
 802b6b6:	bf42      	ittt	mi
 802b6b8:	6833      	ldrmi	r3, [r6, #0]
 802b6ba:	3302      	addmi	r3, #2
 802b6bc:	6033      	strmi	r3, [r6, #0]
 802b6be:	6825      	ldr	r5, [r4, #0]
 802b6c0:	f015 0506 	ands.w	r5, r5, #6
 802b6c4:	d106      	bne.n	802b6d4 <_printf_common+0x48>
 802b6c6:	f104 0a19 	add.w	sl, r4, #25
 802b6ca:	68e3      	ldr	r3, [r4, #12]
 802b6cc:	6832      	ldr	r2, [r6, #0]
 802b6ce:	1a9b      	subs	r3, r3, r2
 802b6d0:	42ab      	cmp	r3, r5
 802b6d2:	dc26      	bgt.n	802b722 <_printf_common+0x96>
 802b6d4:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 802b6d8:	6822      	ldr	r2, [r4, #0]
 802b6da:	3b00      	subs	r3, #0
 802b6dc:	bf18      	it	ne
 802b6de:	2301      	movne	r3, #1
 802b6e0:	0692      	lsls	r2, r2, #26
 802b6e2:	d42b      	bmi.n	802b73c <_printf_common+0xb0>
 802b6e4:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 802b6e8:	4641      	mov	r1, r8
 802b6ea:	4638      	mov	r0, r7
 802b6ec:	47c8      	blx	r9
 802b6ee:	3001      	adds	r0, #1
 802b6f0:	d01e      	beq.n	802b730 <_printf_common+0xa4>
 802b6f2:	6823      	ldr	r3, [r4, #0]
 802b6f4:	6922      	ldr	r2, [r4, #16]
 802b6f6:	f003 0306 	and.w	r3, r3, #6
 802b6fa:	2b04      	cmp	r3, #4
 802b6fc:	bf02      	ittt	eq
 802b6fe:	68e5      	ldreq	r5, [r4, #12]
 802b700:	6833      	ldreq	r3, [r6, #0]
 802b702:	1aed      	subeq	r5, r5, r3
 802b704:	68a3      	ldr	r3, [r4, #8]
 802b706:	bf0c      	ite	eq
 802b708:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 802b70c:	2500      	movne	r5, #0
 802b70e:	4293      	cmp	r3, r2
 802b710:	bfc4      	itt	gt
 802b712:	1a9b      	subgt	r3, r3, r2
 802b714:	18ed      	addgt	r5, r5, r3
 802b716:	2600      	movs	r6, #0
 802b718:	341a      	adds	r4, #26
 802b71a:	42b5      	cmp	r5, r6
 802b71c:	d11a      	bne.n	802b754 <_printf_common+0xc8>
 802b71e:	2000      	movs	r0, #0
 802b720:	e008      	b.n	802b734 <_printf_common+0xa8>
 802b722:	2301      	movs	r3, #1
 802b724:	4652      	mov	r2, sl
 802b726:	4641      	mov	r1, r8
 802b728:	4638      	mov	r0, r7
 802b72a:	47c8      	blx	r9
 802b72c:	3001      	adds	r0, #1
 802b72e:	d103      	bne.n	802b738 <_printf_common+0xac>
 802b730:	f04f 30ff 	mov.w	r0, #4294967295
 802b734:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 802b738:	3501      	adds	r5, #1
 802b73a:	e7c6      	b.n	802b6ca <_printf_common+0x3e>
 802b73c:	18e1      	adds	r1, r4, r3
 802b73e:	1c5a      	adds	r2, r3, #1
 802b740:	2030      	movs	r0, #48	@ 0x30
 802b742:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 802b746:	4422      	add	r2, r4
 802b748:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 802b74c:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 802b750:	3302      	adds	r3, #2
 802b752:	e7c7      	b.n	802b6e4 <_printf_common+0x58>
 802b754:	2301      	movs	r3, #1
 802b756:	4622      	mov	r2, r4
 802b758:	4641      	mov	r1, r8
 802b75a:	4638      	mov	r0, r7
 802b75c:	47c8      	blx	r9
 802b75e:	3001      	adds	r0, #1
 802b760:	d0e6      	beq.n	802b730 <_printf_common+0xa4>
 802b762:	3601      	adds	r6, #1
 802b764:	e7d9      	b.n	802b71a <_printf_common+0x8e>
	...

0802b768 <_printf_i>:
 802b768:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 802b76c:	7e0f      	ldrb	r7, [r1, #24]
 802b76e:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 802b770:	2f78      	cmp	r7, #120	@ 0x78
 802b772:	4691      	mov	r9, r2
 802b774:	4680      	mov	r8, r0
 802b776:	460c      	mov	r4, r1
 802b778:	469a      	mov	sl, r3
 802b77a:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 802b77e:	d807      	bhi.n	802b790 <_printf_i+0x28>
 802b780:	2f62      	cmp	r7, #98	@ 0x62
 802b782:	d80a      	bhi.n	802b79a <_printf_i+0x32>
 802b784:	2f00      	cmp	r7, #0
 802b786:	f000 80d2 	beq.w	802b92e <_printf_i+0x1c6>
 802b78a:	2f58      	cmp	r7, #88	@ 0x58
 802b78c:	f000 80b9 	beq.w	802b902 <_printf_i+0x19a>
 802b790:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 802b794:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 802b798:	e03a      	b.n	802b810 <_printf_i+0xa8>
 802b79a:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 802b79e:	2b15      	cmp	r3, #21
 802b7a0:	d8f6      	bhi.n	802b790 <_printf_i+0x28>
 802b7a2:	a101      	add	r1, pc, #4	@ (adr r1, 802b7a8 <_printf_i+0x40>)
 802b7a4:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 802b7a8:	0802b801 	.word	0x0802b801
 802b7ac:	0802b815 	.word	0x0802b815
 802b7b0:	0802b791 	.word	0x0802b791
 802b7b4:	0802b791 	.word	0x0802b791
 802b7b8:	0802b791 	.word	0x0802b791
 802b7bc:	0802b791 	.word	0x0802b791
 802b7c0:	0802b815 	.word	0x0802b815
 802b7c4:	0802b791 	.word	0x0802b791
 802b7c8:	0802b791 	.word	0x0802b791
 802b7cc:	0802b791 	.word	0x0802b791
 802b7d0:	0802b791 	.word	0x0802b791
 802b7d4:	0802b915 	.word	0x0802b915
 802b7d8:	0802b83f 	.word	0x0802b83f
 802b7dc:	0802b8cf 	.word	0x0802b8cf
 802b7e0:	0802b791 	.word	0x0802b791
 802b7e4:	0802b791 	.word	0x0802b791
 802b7e8:	0802b937 	.word	0x0802b937
 802b7ec:	0802b791 	.word	0x0802b791
 802b7f0:	0802b83f 	.word	0x0802b83f
 802b7f4:	0802b791 	.word	0x0802b791
 802b7f8:	0802b791 	.word	0x0802b791
 802b7fc:	0802b8d7 	.word	0x0802b8d7
 802b800:	6833      	ldr	r3, [r6, #0]
 802b802:	1d1a      	adds	r2, r3, #4
 802b804:	681b      	ldr	r3, [r3, #0]
 802b806:	6032      	str	r2, [r6, #0]
 802b808:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 802b80c:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 802b810:	2301      	movs	r3, #1
 802b812:	e09d      	b.n	802b950 <_printf_i+0x1e8>
 802b814:	6833      	ldr	r3, [r6, #0]
 802b816:	6820      	ldr	r0, [r4, #0]
 802b818:	1d19      	adds	r1, r3, #4
 802b81a:	6031      	str	r1, [r6, #0]
 802b81c:	0606      	lsls	r6, r0, #24
 802b81e:	d501      	bpl.n	802b824 <_printf_i+0xbc>
 802b820:	681d      	ldr	r5, [r3, #0]
 802b822:	e003      	b.n	802b82c <_printf_i+0xc4>
 802b824:	0645      	lsls	r5, r0, #25
 802b826:	d5fb      	bpl.n	802b820 <_printf_i+0xb8>
 802b828:	f9b3 5000 	ldrsh.w	r5, [r3]
 802b82c:	2d00      	cmp	r5, #0
 802b82e:	da03      	bge.n	802b838 <_printf_i+0xd0>
 802b830:	232d      	movs	r3, #45	@ 0x2d
 802b832:	426d      	negs	r5, r5
 802b834:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 802b838:	4859      	ldr	r0, [pc, #356]	@ (802b9a0 <_printf_i+0x238>)
 802b83a:	230a      	movs	r3, #10
 802b83c:	e011      	b.n	802b862 <_printf_i+0xfa>
 802b83e:	6821      	ldr	r1, [r4, #0]
 802b840:	6833      	ldr	r3, [r6, #0]
 802b842:	0608      	lsls	r0, r1, #24
 802b844:	f853 5b04 	ldr.w	r5, [r3], #4
 802b848:	d402      	bmi.n	802b850 <_printf_i+0xe8>
 802b84a:	0649      	lsls	r1, r1, #25
 802b84c:	bf48      	it	mi
 802b84e:	b2ad      	uxthmi	r5, r5
 802b850:	2f6f      	cmp	r7, #111	@ 0x6f
 802b852:	4853      	ldr	r0, [pc, #332]	@ (802b9a0 <_printf_i+0x238>)
 802b854:	6033      	str	r3, [r6, #0]
 802b856:	bf14      	ite	ne
 802b858:	230a      	movne	r3, #10
 802b85a:	2308      	moveq	r3, #8
 802b85c:	2100      	movs	r1, #0
 802b85e:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 802b862:	6866      	ldr	r6, [r4, #4]
 802b864:	60a6      	str	r6, [r4, #8]
 802b866:	2e00      	cmp	r6, #0
 802b868:	bfa2      	ittt	ge
 802b86a:	6821      	ldrge	r1, [r4, #0]
 802b86c:	f021 0104 	bicge.w	r1, r1, #4
 802b870:	6021      	strge	r1, [r4, #0]
 802b872:	b90d      	cbnz	r5, 802b878 <_printf_i+0x110>
 802b874:	2e00      	cmp	r6, #0
 802b876:	d04b      	beq.n	802b910 <_printf_i+0x1a8>
 802b878:	4616      	mov	r6, r2
 802b87a:	fbb5 f1f3 	udiv	r1, r5, r3
 802b87e:	fb03 5711 	mls	r7, r3, r1, r5
 802b882:	5dc7      	ldrb	r7, [r0, r7]
 802b884:	f806 7d01 	strb.w	r7, [r6, #-1]!
 802b888:	462f      	mov	r7, r5
 802b88a:	42bb      	cmp	r3, r7
 802b88c:	460d      	mov	r5, r1
 802b88e:	d9f4      	bls.n	802b87a <_printf_i+0x112>
 802b890:	2b08      	cmp	r3, #8
 802b892:	d10b      	bne.n	802b8ac <_printf_i+0x144>
 802b894:	6823      	ldr	r3, [r4, #0]
 802b896:	07df      	lsls	r7, r3, #31
 802b898:	d508      	bpl.n	802b8ac <_printf_i+0x144>
 802b89a:	6923      	ldr	r3, [r4, #16]
 802b89c:	6861      	ldr	r1, [r4, #4]
 802b89e:	4299      	cmp	r1, r3
 802b8a0:	bfde      	ittt	le
 802b8a2:	2330      	movle	r3, #48	@ 0x30
 802b8a4:	f806 3c01 	strble.w	r3, [r6, #-1]
 802b8a8:	f106 36ff 	addle.w	r6, r6, #4294967295
 802b8ac:	1b92      	subs	r2, r2, r6
 802b8ae:	6122      	str	r2, [r4, #16]
 802b8b0:	f8cd a000 	str.w	sl, [sp]
 802b8b4:	464b      	mov	r3, r9
 802b8b6:	aa03      	add	r2, sp, #12
 802b8b8:	4621      	mov	r1, r4
 802b8ba:	4640      	mov	r0, r8
 802b8bc:	f7ff fee6 	bl	802b68c <_printf_common>
 802b8c0:	3001      	adds	r0, #1
 802b8c2:	d14a      	bne.n	802b95a <_printf_i+0x1f2>
 802b8c4:	f04f 30ff 	mov.w	r0, #4294967295
 802b8c8:	b004      	add	sp, #16
 802b8ca:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 802b8ce:	6823      	ldr	r3, [r4, #0]
 802b8d0:	f043 0320 	orr.w	r3, r3, #32
 802b8d4:	6023      	str	r3, [r4, #0]
 802b8d6:	4833      	ldr	r0, [pc, #204]	@ (802b9a4 <_printf_i+0x23c>)
 802b8d8:	2778      	movs	r7, #120	@ 0x78
 802b8da:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 802b8de:	6823      	ldr	r3, [r4, #0]
 802b8e0:	6831      	ldr	r1, [r6, #0]
 802b8e2:	061f      	lsls	r7, r3, #24
 802b8e4:	f851 5b04 	ldr.w	r5, [r1], #4
 802b8e8:	d402      	bmi.n	802b8f0 <_printf_i+0x188>
 802b8ea:	065f      	lsls	r7, r3, #25
 802b8ec:	bf48      	it	mi
 802b8ee:	b2ad      	uxthmi	r5, r5
 802b8f0:	6031      	str	r1, [r6, #0]
 802b8f2:	07d9      	lsls	r1, r3, #31
 802b8f4:	bf44      	itt	mi
 802b8f6:	f043 0320 	orrmi.w	r3, r3, #32
 802b8fa:	6023      	strmi	r3, [r4, #0]
 802b8fc:	b11d      	cbz	r5, 802b906 <_printf_i+0x19e>
 802b8fe:	2310      	movs	r3, #16
 802b900:	e7ac      	b.n	802b85c <_printf_i+0xf4>
 802b902:	4827      	ldr	r0, [pc, #156]	@ (802b9a0 <_printf_i+0x238>)
 802b904:	e7e9      	b.n	802b8da <_printf_i+0x172>
 802b906:	6823      	ldr	r3, [r4, #0]
 802b908:	f023 0320 	bic.w	r3, r3, #32
 802b90c:	6023      	str	r3, [r4, #0]
 802b90e:	e7f6      	b.n	802b8fe <_printf_i+0x196>
 802b910:	4616      	mov	r6, r2
 802b912:	e7bd      	b.n	802b890 <_printf_i+0x128>
 802b914:	6833      	ldr	r3, [r6, #0]
 802b916:	6825      	ldr	r5, [r4, #0]
 802b918:	6961      	ldr	r1, [r4, #20]
 802b91a:	1d18      	adds	r0, r3, #4
 802b91c:	6030      	str	r0, [r6, #0]
 802b91e:	062e      	lsls	r6, r5, #24
 802b920:	681b      	ldr	r3, [r3, #0]
 802b922:	d501      	bpl.n	802b928 <_printf_i+0x1c0>
 802b924:	6019      	str	r1, [r3, #0]
 802b926:	e002      	b.n	802b92e <_printf_i+0x1c6>
 802b928:	0668      	lsls	r0, r5, #25
 802b92a:	d5fb      	bpl.n	802b924 <_printf_i+0x1bc>
 802b92c:	8019      	strh	r1, [r3, #0]
 802b92e:	2300      	movs	r3, #0
 802b930:	6123      	str	r3, [r4, #16]
 802b932:	4616      	mov	r6, r2
 802b934:	e7bc      	b.n	802b8b0 <_printf_i+0x148>
 802b936:	6833      	ldr	r3, [r6, #0]
 802b938:	1d1a      	adds	r2, r3, #4
 802b93a:	6032      	str	r2, [r6, #0]
 802b93c:	681e      	ldr	r6, [r3, #0]
 802b93e:	6862      	ldr	r2, [r4, #4]
 802b940:	2100      	movs	r1, #0
 802b942:	4630      	mov	r0, r6
 802b944:	f7d4 fccc 	bl	80002e0 <memchr>
 802b948:	b108      	cbz	r0, 802b94e <_printf_i+0x1e6>
 802b94a:	1b80      	subs	r0, r0, r6
 802b94c:	6060      	str	r0, [r4, #4]
 802b94e:	6863      	ldr	r3, [r4, #4]
 802b950:	6123      	str	r3, [r4, #16]
 802b952:	2300      	movs	r3, #0
 802b954:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 802b958:	e7aa      	b.n	802b8b0 <_printf_i+0x148>
 802b95a:	6923      	ldr	r3, [r4, #16]
 802b95c:	4632      	mov	r2, r6
 802b95e:	4649      	mov	r1, r9
 802b960:	4640      	mov	r0, r8
 802b962:	47d0      	blx	sl
 802b964:	3001      	adds	r0, #1
 802b966:	d0ad      	beq.n	802b8c4 <_printf_i+0x15c>
 802b968:	6823      	ldr	r3, [r4, #0]
 802b96a:	079b      	lsls	r3, r3, #30
 802b96c:	d413      	bmi.n	802b996 <_printf_i+0x22e>
 802b96e:	68e0      	ldr	r0, [r4, #12]
 802b970:	9b03      	ldr	r3, [sp, #12]
 802b972:	4298      	cmp	r0, r3
 802b974:	bfb8      	it	lt
 802b976:	4618      	movlt	r0, r3
 802b978:	e7a6      	b.n	802b8c8 <_printf_i+0x160>
 802b97a:	2301      	movs	r3, #1
 802b97c:	4632      	mov	r2, r6
 802b97e:	4649      	mov	r1, r9
 802b980:	4640      	mov	r0, r8
 802b982:	47d0      	blx	sl
 802b984:	3001      	adds	r0, #1
 802b986:	d09d      	beq.n	802b8c4 <_printf_i+0x15c>
 802b988:	3501      	adds	r5, #1
 802b98a:	68e3      	ldr	r3, [r4, #12]
 802b98c:	9903      	ldr	r1, [sp, #12]
 802b98e:	1a5b      	subs	r3, r3, r1
 802b990:	42ab      	cmp	r3, r5
 802b992:	dcf2      	bgt.n	802b97a <_printf_i+0x212>
 802b994:	e7eb      	b.n	802b96e <_printf_i+0x206>
 802b996:	2500      	movs	r5, #0
 802b998:	f104 0619 	add.w	r6, r4, #25
 802b99c:	e7f5      	b.n	802b98a <_printf_i+0x222>
 802b99e:	bf00      	nop
 802b9a0:	08030731 	.word	0x08030731
 802b9a4:	08030742 	.word	0x08030742

0802b9a8 <__sflush_r>:
 802b9a8:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 802b9ac:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 802b9b0:	0716      	lsls	r6, r2, #28
 802b9b2:	4605      	mov	r5, r0
 802b9b4:	460c      	mov	r4, r1
 802b9b6:	d454      	bmi.n	802ba62 <__sflush_r+0xba>
 802b9b8:	684b      	ldr	r3, [r1, #4]
 802b9ba:	2b00      	cmp	r3, #0
 802b9bc:	dc02      	bgt.n	802b9c4 <__sflush_r+0x1c>
 802b9be:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 802b9c0:	2b00      	cmp	r3, #0
 802b9c2:	dd48      	ble.n	802ba56 <__sflush_r+0xae>
 802b9c4:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 802b9c6:	2e00      	cmp	r6, #0
 802b9c8:	d045      	beq.n	802ba56 <__sflush_r+0xae>
 802b9ca:	2300      	movs	r3, #0
 802b9cc:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 802b9d0:	682f      	ldr	r7, [r5, #0]
 802b9d2:	6a21      	ldr	r1, [r4, #32]
 802b9d4:	602b      	str	r3, [r5, #0]
 802b9d6:	d030      	beq.n	802ba3a <__sflush_r+0x92>
 802b9d8:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 802b9da:	89a3      	ldrh	r3, [r4, #12]
 802b9dc:	0759      	lsls	r1, r3, #29
 802b9de:	d505      	bpl.n	802b9ec <__sflush_r+0x44>
 802b9e0:	6863      	ldr	r3, [r4, #4]
 802b9e2:	1ad2      	subs	r2, r2, r3
 802b9e4:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 802b9e6:	b10b      	cbz	r3, 802b9ec <__sflush_r+0x44>
 802b9e8:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 802b9ea:	1ad2      	subs	r2, r2, r3
 802b9ec:	2300      	movs	r3, #0
 802b9ee:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 802b9f0:	6a21      	ldr	r1, [r4, #32]
 802b9f2:	4628      	mov	r0, r5
 802b9f4:	47b0      	blx	r6
 802b9f6:	1c43      	adds	r3, r0, #1
 802b9f8:	89a3      	ldrh	r3, [r4, #12]
 802b9fa:	d106      	bne.n	802ba0a <__sflush_r+0x62>
 802b9fc:	6829      	ldr	r1, [r5, #0]
 802b9fe:	291d      	cmp	r1, #29
 802ba00:	d82b      	bhi.n	802ba5a <__sflush_r+0xb2>
 802ba02:	4a2a      	ldr	r2, [pc, #168]	@ (802baac <__sflush_r+0x104>)
 802ba04:	410a      	asrs	r2, r1
 802ba06:	07d6      	lsls	r6, r2, #31
 802ba08:	d427      	bmi.n	802ba5a <__sflush_r+0xb2>
 802ba0a:	2200      	movs	r2, #0
 802ba0c:	6062      	str	r2, [r4, #4]
 802ba0e:	04d9      	lsls	r1, r3, #19
 802ba10:	6922      	ldr	r2, [r4, #16]
 802ba12:	6022      	str	r2, [r4, #0]
 802ba14:	d504      	bpl.n	802ba20 <__sflush_r+0x78>
 802ba16:	1c42      	adds	r2, r0, #1
 802ba18:	d101      	bne.n	802ba1e <__sflush_r+0x76>
 802ba1a:	682b      	ldr	r3, [r5, #0]
 802ba1c:	b903      	cbnz	r3, 802ba20 <__sflush_r+0x78>
 802ba1e:	6560      	str	r0, [r4, #84]	@ 0x54
 802ba20:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 802ba22:	602f      	str	r7, [r5, #0]
 802ba24:	b1b9      	cbz	r1, 802ba56 <__sflush_r+0xae>
 802ba26:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 802ba2a:	4299      	cmp	r1, r3
 802ba2c:	d002      	beq.n	802ba34 <__sflush_r+0x8c>
 802ba2e:	4628      	mov	r0, r5
 802ba30:	f7ff fca0 	bl	802b374 <_free_r>
 802ba34:	2300      	movs	r3, #0
 802ba36:	6363      	str	r3, [r4, #52]	@ 0x34
 802ba38:	e00d      	b.n	802ba56 <__sflush_r+0xae>
 802ba3a:	2301      	movs	r3, #1
 802ba3c:	4628      	mov	r0, r5
 802ba3e:	47b0      	blx	r6
 802ba40:	4602      	mov	r2, r0
 802ba42:	1c50      	adds	r0, r2, #1
 802ba44:	d1c9      	bne.n	802b9da <__sflush_r+0x32>
 802ba46:	682b      	ldr	r3, [r5, #0]
 802ba48:	2b00      	cmp	r3, #0
 802ba4a:	d0c6      	beq.n	802b9da <__sflush_r+0x32>
 802ba4c:	2b1d      	cmp	r3, #29
 802ba4e:	d001      	beq.n	802ba54 <__sflush_r+0xac>
 802ba50:	2b16      	cmp	r3, #22
 802ba52:	d11e      	bne.n	802ba92 <__sflush_r+0xea>
 802ba54:	602f      	str	r7, [r5, #0]
 802ba56:	2000      	movs	r0, #0
 802ba58:	e022      	b.n	802baa0 <__sflush_r+0xf8>
 802ba5a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 802ba5e:	b21b      	sxth	r3, r3
 802ba60:	e01b      	b.n	802ba9a <__sflush_r+0xf2>
 802ba62:	690f      	ldr	r7, [r1, #16]
 802ba64:	2f00      	cmp	r7, #0
 802ba66:	d0f6      	beq.n	802ba56 <__sflush_r+0xae>
 802ba68:	0793      	lsls	r3, r2, #30
 802ba6a:	680e      	ldr	r6, [r1, #0]
 802ba6c:	bf08      	it	eq
 802ba6e:	694b      	ldreq	r3, [r1, #20]
 802ba70:	600f      	str	r7, [r1, #0]
 802ba72:	bf18      	it	ne
 802ba74:	2300      	movne	r3, #0
 802ba76:	eba6 0807 	sub.w	r8, r6, r7
 802ba7a:	608b      	str	r3, [r1, #8]
 802ba7c:	f1b8 0f00 	cmp.w	r8, #0
 802ba80:	dde9      	ble.n	802ba56 <__sflush_r+0xae>
 802ba82:	6a21      	ldr	r1, [r4, #32]
 802ba84:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 802ba86:	4643      	mov	r3, r8
 802ba88:	463a      	mov	r2, r7
 802ba8a:	4628      	mov	r0, r5
 802ba8c:	47b0      	blx	r6
 802ba8e:	2800      	cmp	r0, #0
 802ba90:	dc08      	bgt.n	802baa4 <__sflush_r+0xfc>
 802ba92:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 802ba96:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 802ba9a:	81a3      	strh	r3, [r4, #12]
 802ba9c:	f04f 30ff 	mov.w	r0, #4294967295
 802baa0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 802baa4:	4407      	add	r7, r0
 802baa6:	eba8 0800 	sub.w	r8, r8, r0
 802baaa:	e7e7      	b.n	802ba7c <__sflush_r+0xd4>
 802baac:	dfbffffe 	.word	0xdfbffffe

0802bab0 <_fflush_r>:
 802bab0:	b538      	push	{r3, r4, r5, lr}
 802bab2:	690b      	ldr	r3, [r1, #16]
 802bab4:	4605      	mov	r5, r0
 802bab6:	460c      	mov	r4, r1
 802bab8:	b913      	cbnz	r3, 802bac0 <_fflush_r+0x10>
 802baba:	2500      	movs	r5, #0
 802babc:	4628      	mov	r0, r5
 802babe:	bd38      	pop	{r3, r4, r5, pc}
 802bac0:	b118      	cbz	r0, 802baca <_fflush_r+0x1a>
 802bac2:	6a03      	ldr	r3, [r0, #32]
 802bac4:	b90b      	cbnz	r3, 802baca <_fflush_r+0x1a>
 802bac6:	f7ff fa39 	bl	802af3c <__sinit>
 802baca:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 802bace:	2b00      	cmp	r3, #0
 802bad0:	d0f3      	beq.n	802baba <_fflush_r+0xa>
 802bad2:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 802bad4:	07d0      	lsls	r0, r2, #31
 802bad6:	d404      	bmi.n	802bae2 <_fflush_r+0x32>
 802bad8:	0599      	lsls	r1, r3, #22
 802bada:	d402      	bmi.n	802bae2 <_fflush_r+0x32>
 802badc:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 802bade:	f7ff fbdc 	bl	802b29a <__retarget_lock_acquire_recursive>
 802bae2:	4628      	mov	r0, r5
 802bae4:	4621      	mov	r1, r4
 802bae6:	f7ff ff5f 	bl	802b9a8 <__sflush_r>
 802baea:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 802baec:	07da      	lsls	r2, r3, #31
 802baee:	4605      	mov	r5, r0
 802baf0:	d4e4      	bmi.n	802babc <_fflush_r+0xc>
 802baf2:	89a3      	ldrh	r3, [r4, #12]
 802baf4:	059b      	lsls	r3, r3, #22
 802baf6:	d4e1      	bmi.n	802babc <_fflush_r+0xc>
 802baf8:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 802bafa:	f7ff fbcf 	bl	802b29c <__retarget_lock_release_recursive>
 802bafe:	e7dd      	b.n	802babc <_fflush_r+0xc>

0802bb00 <__swbuf_r>:
 802bb00:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 802bb02:	460e      	mov	r6, r1
 802bb04:	4614      	mov	r4, r2
 802bb06:	4605      	mov	r5, r0
 802bb08:	b118      	cbz	r0, 802bb12 <__swbuf_r+0x12>
 802bb0a:	6a03      	ldr	r3, [r0, #32]
 802bb0c:	b90b      	cbnz	r3, 802bb12 <__swbuf_r+0x12>
 802bb0e:	f7ff fa15 	bl	802af3c <__sinit>
 802bb12:	69a3      	ldr	r3, [r4, #24]
 802bb14:	60a3      	str	r3, [r4, #8]
 802bb16:	89a3      	ldrh	r3, [r4, #12]
 802bb18:	071a      	lsls	r2, r3, #28
 802bb1a:	d501      	bpl.n	802bb20 <__swbuf_r+0x20>
 802bb1c:	6923      	ldr	r3, [r4, #16]
 802bb1e:	b943      	cbnz	r3, 802bb32 <__swbuf_r+0x32>
 802bb20:	4621      	mov	r1, r4
 802bb22:	4628      	mov	r0, r5
 802bb24:	f000 f82a 	bl	802bb7c <__swsetup_r>
 802bb28:	b118      	cbz	r0, 802bb32 <__swbuf_r+0x32>
 802bb2a:	f04f 37ff 	mov.w	r7, #4294967295
 802bb2e:	4638      	mov	r0, r7
 802bb30:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 802bb32:	6823      	ldr	r3, [r4, #0]
 802bb34:	6922      	ldr	r2, [r4, #16]
 802bb36:	1a98      	subs	r0, r3, r2
 802bb38:	6963      	ldr	r3, [r4, #20]
 802bb3a:	b2f6      	uxtb	r6, r6
 802bb3c:	4283      	cmp	r3, r0
 802bb3e:	4637      	mov	r7, r6
 802bb40:	dc05      	bgt.n	802bb4e <__swbuf_r+0x4e>
 802bb42:	4621      	mov	r1, r4
 802bb44:	4628      	mov	r0, r5
 802bb46:	f7ff ffb3 	bl	802bab0 <_fflush_r>
 802bb4a:	2800      	cmp	r0, #0
 802bb4c:	d1ed      	bne.n	802bb2a <__swbuf_r+0x2a>
 802bb4e:	68a3      	ldr	r3, [r4, #8]
 802bb50:	3b01      	subs	r3, #1
 802bb52:	60a3      	str	r3, [r4, #8]
 802bb54:	6823      	ldr	r3, [r4, #0]
 802bb56:	1c5a      	adds	r2, r3, #1
 802bb58:	6022      	str	r2, [r4, #0]
 802bb5a:	701e      	strb	r6, [r3, #0]
 802bb5c:	6962      	ldr	r2, [r4, #20]
 802bb5e:	1c43      	adds	r3, r0, #1
 802bb60:	429a      	cmp	r2, r3
 802bb62:	d004      	beq.n	802bb6e <__swbuf_r+0x6e>
 802bb64:	89a3      	ldrh	r3, [r4, #12]
 802bb66:	07db      	lsls	r3, r3, #31
 802bb68:	d5e1      	bpl.n	802bb2e <__swbuf_r+0x2e>
 802bb6a:	2e0a      	cmp	r6, #10
 802bb6c:	d1df      	bne.n	802bb2e <__swbuf_r+0x2e>
 802bb6e:	4621      	mov	r1, r4
 802bb70:	4628      	mov	r0, r5
 802bb72:	f7ff ff9d 	bl	802bab0 <_fflush_r>
 802bb76:	2800      	cmp	r0, #0
 802bb78:	d0d9      	beq.n	802bb2e <__swbuf_r+0x2e>
 802bb7a:	e7d6      	b.n	802bb2a <__swbuf_r+0x2a>

0802bb7c <__swsetup_r>:
 802bb7c:	b538      	push	{r3, r4, r5, lr}
 802bb7e:	4b29      	ldr	r3, [pc, #164]	@ (802bc24 <__swsetup_r+0xa8>)
 802bb80:	4605      	mov	r5, r0
 802bb82:	6818      	ldr	r0, [r3, #0]
 802bb84:	460c      	mov	r4, r1
 802bb86:	b118      	cbz	r0, 802bb90 <__swsetup_r+0x14>
 802bb88:	6a03      	ldr	r3, [r0, #32]
 802bb8a:	b90b      	cbnz	r3, 802bb90 <__swsetup_r+0x14>
 802bb8c:	f7ff f9d6 	bl	802af3c <__sinit>
 802bb90:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 802bb94:	0719      	lsls	r1, r3, #28
 802bb96:	d422      	bmi.n	802bbde <__swsetup_r+0x62>
 802bb98:	06da      	lsls	r2, r3, #27
 802bb9a:	d407      	bmi.n	802bbac <__swsetup_r+0x30>
 802bb9c:	2209      	movs	r2, #9
 802bb9e:	602a      	str	r2, [r5, #0]
 802bba0:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 802bba4:	81a3      	strh	r3, [r4, #12]
 802bba6:	f04f 30ff 	mov.w	r0, #4294967295
 802bbaa:	e033      	b.n	802bc14 <__swsetup_r+0x98>
 802bbac:	0758      	lsls	r0, r3, #29
 802bbae:	d512      	bpl.n	802bbd6 <__swsetup_r+0x5a>
 802bbb0:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 802bbb2:	b141      	cbz	r1, 802bbc6 <__swsetup_r+0x4a>
 802bbb4:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 802bbb8:	4299      	cmp	r1, r3
 802bbba:	d002      	beq.n	802bbc2 <__swsetup_r+0x46>
 802bbbc:	4628      	mov	r0, r5
 802bbbe:	f7ff fbd9 	bl	802b374 <_free_r>
 802bbc2:	2300      	movs	r3, #0
 802bbc4:	6363      	str	r3, [r4, #52]	@ 0x34
 802bbc6:	89a3      	ldrh	r3, [r4, #12]
 802bbc8:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 802bbcc:	81a3      	strh	r3, [r4, #12]
 802bbce:	2300      	movs	r3, #0
 802bbd0:	6063      	str	r3, [r4, #4]
 802bbd2:	6923      	ldr	r3, [r4, #16]
 802bbd4:	6023      	str	r3, [r4, #0]
 802bbd6:	89a3      	ldrh	r3, [r4, #12]
 802bbd8:	f043 0308 	orr.w	r3, r3, #8
 802bbdc:	81a3      	strh	r3, [r4, #12]
 802bbde:	6923      	ldr	r3, [r4, #16]
 802bbe0:	b94b      	cbnz	r3, 802bbf6 <__swsetup_r+0x7a>
 802bbe2:	89a3      	ldrh	r3, [r4, #12]
 802bbe4:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 802bbe8:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 802bbec:	d003      	beq.n	802bbf6 <__swsetup_r+0x7a>
 802bbee:	4621      	mov	r1, r4
 802bbf0:	4628      	mov	r0, r5
 802bbf2:	f000 f83f 	bl	802bc74 <__smakebuf_r>
 802bbf6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 802bbfa:	f013 0201 	ands.w	r2, r3, #1
 802bbfe:	d00a      	beq.n	802bc16 <__swsetup_r+0x9a>
 802bc00:	2200      	movs	r2, #0
 802bc02:	60a2      	str	r2, [r4, #8]
 802bc04:	6962      	ldr	r2, [r4, #20]
 802bc06:	4252      	negs	r2, r2
 802bc08:	61a2      	str	r2, [r4, #24]
 802bc0a:	6922      	ldr	r2, [r4, #16]
 802bc0c:	b942      	cbnz	r2, 802bc20 <__swsetup_r+0xa4>
 802bc0e:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 802bc12:	d1c5      	bne.n	802bba0 <__swsetup_r+0x24>
 802bc14:	bd38      	pop	{r3, r4, r5, pc}
 802bc16:	0799      	lsls	r1, r3, #30
 802bc18:	bf58      	it	pl
 802bc1a:	6962      	ldrpl	r2, [r4, #20]
 802bc1c:	60a2      	str	r2, [r4, #8]
 802bc1e:	e7f4      	b.n	802bc0a <__swsetup_r+0x8e>
 802bc20:	2000      	movs	r0, #0
 802bc22:	e7f7      	b.n	802bc14 <__swsetup_r+0x98>
 802bc24:	240000d8 	.word	0x240000d8

0802bc28 <__swhatbuf_r>:
 802bc28:	b570      	push	{r4, r5, r6, lr}
 802bc2a:	460c      	mov	r4, r1
 802bc2c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 802bc30:	2900      	cmp	r1, #0
 802bc32:	b096      	sub	sp, #88	@ 0x58
 802bc34:	4615      	mov	r5, r2
 802bc36:	461e      	mov	r6, r3
 802bc38:	da0d      	bge.n	802bc56 <__swhatbuf_r+0x2e>
 802bc3a:	89a3      	ldrh	r3, [r4, #12]
 802bc3c:	f013 0f80 	tst.w	r3, #128	@ 0x80
 802bc40:	f04f 0100 	mov.w	r1, #0
 802bc44:	bf14      	ite	ne
 802bc46:	2340      	movne	r3, #64	@ 0x40
 802bc48:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 802bc4c:	2000      	movs	r0, #0
 802bc4e:	6031      	str	r1, [r6, #0]
 802bc50:	602b      	str	r3, [r5, #0]
 802bc52:	b016      	add	sp, #88	@ 0x58
 802bc54:	bd70      	pop	{r4, r5, r6, pc}
 802bc56:	466a      	mov	r2, sp
 802bc58:	f000 f848 	bl	802bcec <_fstat_r>
 802bc5c:	2800      	cmp	r0, #0
 802bc5e:	dbec      	blt.n	802bc3a <__swhatbuf_r+0x12>
 802bc60:	9901      	ldr	r1, [sp, #4]
 802bc62:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 802bc66:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 802bc6a:	4259      	negs	r1, r3
 802bc6c:	4159      	adcs	r1, r3
 802bc6e:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 802bc72:	e7eb      	b.n	802bc4c <__swhatbuf_r+0x24>

0802bc74 <__smakebuf_r>:
 802bc74:	898b      	ldrh	r3, [r1, #12]
 802bc76:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 802bc78:	079d      	lsls	r5, r3, #30
 802bc7a:	4606      	mov	r6, r0
 802bc7c:	460c      	mov	r4, r1
 802bc7e:	d507      	bpl.n	802bc90 <__smakebuf_r+0x1c>
 802bc80:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 802bc84:	6023      	str	r3, [r4, #0]
 802bc86:	6123      	str	r3, [r4, #16]
 802bc88:	2301      	movs	r3, #1
 802bc8a:	6163      	str	r3, [r4, #20]
 802bc8c:	b003      	add	sp, #12
 802bc8e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 802bc90:	ab01      	add	r3, sp, #4
 802bc92:	466a      	mov	r2, sp
 802bc94:	f7ff ffc8 	bl	802bc28 <__swhatbuf_r>
 802bc98:	9f00      	ldr	r7, [sp, #0]
 802bc9a:	4605      	mov	r5, r0
 802bc9c:	4639      	mov	r1, r7
 802bc9e:	4630      	mov	r0, r6
 802bca0:	f7ff f826 	bl	802acf0 <_malloc_r>
 802bca4:	b948      	cbnz	r0, 802bcba <__smakebuf_r+0x46>
 802bca6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 802bcaa:	059a      	lsls	r2, r3, #22
 802bcac:	d4ee      	bmi.n	802bc8c <__smakebuf_r+0x18>
 802bcae:	f023 0303 	bic.w	r3, r3, #3
 802bcb2:	f043 0302 	orr.w	r3, r3, #2
 802bcb6:	81a3      	strh	r3, [r4, #12]
 802bcb8:	e7e2      	b.n	802bc80 <__smakebuf_r+0xc>
 802bcba:	89a3      	ldrh	r3, [r4, #12]
 802bcbc:	6020      	str	r0, [r4, #0]
 802bcbe:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 802bcc2:	81a3      	strh	r3, [r4, #12]
 802bcc4:	9b01      	ldr	r3, [sp, #4]
 802bcc6:	e9c4 0704 	strd	r0, r7, [r4, #16]
 802bcca:	b15b      	cbz	r3, 802bce4 <__smakebuf_r+0x70>
 802bccc:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 802bcd0:	4630      	mov	r0, r6
 802bcd2:	f000 f81d 	bl	802bd10 <_isatty_r>
 802bcd6:	b128      	cbz	r0, 802bce4 <__smakebuf_r+0x70>
 802bcd8:	89a3      	ldrh	r3, [r4, #12]
 802bcda:	f023 0303 	bic.w	r3, r3, #3
 802bcde:	f043 0301 	orr.w	r3, r3, #1
 802bce2:	81a3      	strh	r3, [r4, #12]
 802bce4:	89a3      	ldrh	r3, [r4, #12]
 802bce6:	431d      	orrs	r5, r3
 802bce8:	81a5      	strh	r5, [r4, #12]
 802bcea:	e7cf      	b.n	802bc8c <__smakebuf_r+0x18>

0802bcec <_fstat_r>:
 802bcec:	b538      	push	{r3, r4, r5, lr}
 802bcee:	4d07      	ldr	r5, [pc, #28]	@ (802bd0c <_fstat_r+0x20>)
 802bcf0:	2300      	movs	r3, #0
 802bcf2:	4604      	mov	r4, r0
 802bcf4:	4608      	mov	r0, r1
 802bcf6:	4611      	mov	r1, r2
 802bcf8:	602b      	str	r3, [r5, #0]
 802bcfa:	f7d5 fcff 	bl	80016fc <_fstat>
 802bcfe:	1c43      	adds	r3, r0, #1
 802bd00:	d102      	bne.n	802bd08 <_fstat_r+0x1c>
 802bd02:	682b      	ldr	r3, [r5, #0]
 802bd04:	b103      	cbz	r3, 802bd08 <_fstat_r+0x1c>
 802bd06:	6023      	str	r3, [r4, #0]
 802bd08:	bd38      	pop	{r3, r4, r5, pc}
 802bd0a:	bf00      	nop
 802bd0c:	2400bac4 	.word	0x2400bac4

0802bd10 <_isatty_r>:
 802bd10:	b538      	push	{r3, r4, r5, lr}
 802bd12:	4d06      	ldr	r5, [pc, #24]	@ (802bd2c <_isatty_r+0x1c>)
 802bd14:	2300      	movs	r3, #0
 802bd16:	4604      	mov	r4, r0
 802bd18:	4608      	mov	r0, r1
 802bd1a:	602b      	str	r3, [r5, #0]
 802bd1c:	f7d5 fcfe 	bl	800171c <_isatty>
 802bd20:	1c43      	adds	r3, r0, #1
 802bd22:	d102      	bne.n	802bd2a <_isatty_r+0x1a>
 802bd24:	682b      	ldr	r3, [r5, #0]
 802bd26:	b103      	cbz	r3, 802bd2a <_isatty_r+0x1a>
 802bd28:	6023      	str	r3, [r4, #0]
 802bd2a:	bd38      	pop	{r3, r4, r5, pc}
 802bd2c:	2400bac4 	.word	0x2400bac4

0802bd30 <_init>:
 802bd30:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 802bd32:	bf00      	nop
 802bd34:	bcf8      	pop	{r3, r4, r5, r6, r7}
 802bd36:	bc08      	pop	{r3}
 802bd38:	469e      	mov	lr, r3
 802bd3a:	4770      	bx	lr

0802bd3c <_fini>:
 802bd3c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 802bd3e:	bf00      	nop
 802bd40:	bcf8      	pop	{r3, r4, r5, r6, r7}
 802bd42:	bc08      	pop	{r3}
 802bd44:	469e      	mov	lr, r3
 802bd46:	4770      	bx	lr
